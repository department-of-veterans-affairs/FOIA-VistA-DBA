Released ROR*1.5*2 SEQ #2
Extracted from mail message
**KIDS**:ROR*1.5*2^

**INSTALL NAME**
ROR*1.5*2
"BLD",6469,0)
ROR*1.5*2^CLINICAL CASE REGISTRIES^0^3070611^y
"BLD",6469,1,0)
^^2^2^3070510^
"BLD",6469,1,1,0)
This build fixes several Clinical Case Registries problems and implements 
"BLD",6469,1,2,0)
several enhancements.
"BLD",6469,4,0)
^9.64PA^^0
"BLD",6469,6.3)
6
"BLD",6469,"KRN",0)
^9.67PA^8989.52^19
"BLD",6469,"KRN",.4,0)
.4
"BLD",6469,"KRN",.401,0)
.401
"BLD",6469,"KRN",.402,0)
.402
"BLD",6469,"KRN",.403,0)
.403
"BLD",6469,"KRN",.5,0)
.5
"BLD",6469,"KRN",.84,0)
.84
"BLD",6469,"KRN",.84,"NM",0)
^9.68A^^0
"BLD",6469,"KRN",3.6,0)
3.6
"BLD",6469,"KRN",3.8,0)
3.8
"BLD",6469,"KRN",9.2,0)
9.2
"BLD",6469,"KRN",9.8,0)
9.8
"BLD",6469,"KRN",9.8,"NM",0)
^9.68A^15^7
"BLD",6469,"KRN",9.8,"NM",6,0)
RORRP037^^0^B11518664
"BLD",6469,"KRN",9.8,"NM",7,0)
RORRP034^^0^B12580586
"BLD",6469,"KRN",9.8,"NM",8,0)
RORUTL19^^0^B2923874
"BLD",6469,"KRN",9.8,"NM",9,0)
RORHL7A^^0^B35139964
"BLD",6469,"KRN",9.8,"NM",10,0)
RORUTL18^^0^B26583151
"BLD",6469,"KRN",9.8,"NM",14,0)
RORTSK14^^0^B7015337
"BLD",6469,"KRN",9.8,"NM",15,0)
RORUTL05^^0^B58374925
"BLD",6469,"KRN",9.8,"NM","B","RORHL7A",9)

"BLD",6469,"KRN",9.8,"NM","B","RORRP034",7)

"BLD",6469,"KRN",9.8,"NM","B","RORRP037",6)

"BLD",6469,"KRN",9.8,"NM","B","RORTSK14",14)

"BLD",6469,"KRN",9.8,"NM","B","RORUTL05",15)

"BLD",6469,"KRN",9.8,"NM","B","RORUTL18",10)

"BLD",6469,"KRN",9.8,"NM","B","RORUTL19",8)

"BLD",6469,"KRN",19,0)
19
"BLD",6469,"KRN",19.1,0)
19.1
"BLD",6469,"KRN",101,0)
101
"BLD",6469,"KRN",409.61,0)
409.61
"BLD",6469,"KRN",771,0)
771
"BLD",6469,"KRN",870,0)
870
"BLD",6469,"KRN",8989.51,0)
8989.51
"BLD",6469,"KRN",8989.52,0)
8989.52
"BLD",6469,"KRN",8994,0)
8994
"BLD",6469,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",6469,"KRN",8994,"NM",1,0)
RORHEPC PATIENT LOAD^^0
"BLD",6469,"KRN",8994,"NM",2,0)
RORICR PATIENT LOAD^^0
"BLD",6469,"KRN",8994,"NM","B","RORHEPC PATIENT LOAD",1)

"BLD",6469,"KRN",8994,"NM","B","RORICR PATIENT LOAD",2)

"BLD",6469,"KRN","B",.4,.4)

"BLD",6469,"KRN","B",.401,.401)

"BLD",6469,"KRN","B",.402,.402)

"BLD",6469,"KRN","B",.403,.403)

"BLD",6469,"KRN","B",.5,.5)

"BLD",6469,"KRN","B",.84,.84)

"BLD",6469,"KRN","B",3.6,3.6)

"BLD",6469,"KRN","B",3.8,3.8)

"BLD",6469,"KRN","B",9.2,9.2)

"BLD",6469,"KRN","B",9.8,9.8)

"BLD",6469,"KRN","B",19,19)

"BLD",6469,"KRN","B",19.1,19.1)

"BLD",6469,"KRN","B",101,101)

"BLD",6469,"KRN","B",409.61,409.61)

"BLD",6469,"KRN","B",771,771)

"BLD",6469,"KRN","B",870,870)

"BLD",6469,"KRN","B",8989.51,8989.51)

"BLD",6469,"KRN","B",8989.52,8989.52)

"BLD",6469,"KRN","B",8994,8994)

"BLD",6469,"QUES",0)
^9.62^^
"BLD",6469,"REQB",0)
^9.611^1^1
"BLD",6469,"REQB",1,0)
ROR*1.5*1^2
"BLD",6469,"REQB","B","ROR*1.5*1",1)

"KRN",8994,1861,-1)
0^2
"KRN",8994,1861,0)
RORICR PATIENT LOAD^LOAD^RORRP033^4^R^^^1^1
"KRN",8994,1861,1,0)
^8994.01^2^2^3070129^^^^
"KRN",8994,1861,1,1,0)
The RORICR PATIENT LOAD remote procedure loads the patient's data from the
"KRN",8994,1861,1,2,0)
ICR registry and prepares the record for editing.
"KRN",8994,1861,2,0)
^8994.02A^3^3
"KRN",8994,1861,2,1,0)
REGIEN^1^^1^1
"KRN",8994,1861,2,1,1,0)
^8994.021^2^2^3030703^^^
"KRN",8994,1861,2,1,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,1861,2,1,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,1861,2,2,0)
PATIEN^1^^1^2
"KRN",8994,1861,2,2,1,0)
^8994.021^1^1^3030715^^^^
"KRN",8994,1861,2,2,1,1,0)
A valid patient IEN (DFN) should be assigned to the PATIEN parameter.
"KRN",8994,1861,2,3,0)
LOCK^1^^^3
"KRN",8994,1861,2,3,1,0)
^8994.021^2^2^3070129^^^^
"KRN",8994,1861,2,3,1,1,0)
If this parameter is defined and not zero then the RPC will try to lock
"KRN",8994,1861,2,3,1,2,0)
the registry record before loading the data and will leave it locked.
"KRN",8994,1861,2,"B","LOCK",3)

"KRN",8994,1861,2,"B","PATIEN",2)

"KRN",8994,1861,2,"B","REGIEN",1)

"KRN",8994,1861,2,"PARAMSEQ",1,1)

"KRN",8994,1861,2,"PARAMSEQ",2,2)

"KRN",8994,1861,2,"PARAMSEQ",3,3)

"KRN",8994,1861,3,0)
^^127^127^3070129^
"KRN",8994,1861,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that
"KRN",8994,1861,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,1861,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,1861,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,1861,3,5,0)
   
"KRN",8994,1861,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,1861,3,7,0)
                          ^01: The last error code
"KRN",8994,1861,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,1861,3,9,0)
                                                                      
"KRN",8994,1861,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,1861,3,11,0)
                          ^01: Error code
"KRN",8994,1861,3,12,0)
                          ^02: Message
"KRN",8994,1861,3,13,0)
                          ^03: Place of the error
"KRN",8994,1861,3,14,0)
 
"KRN",8994,1861,3,15,0)
If locking was requested (see the LOCK parameter) and the record could not
"KRN",8994,1861,3,16,0)
be locked then the first "^"-piece of the Results[0] would be greater than
"KRN",8994,1861,3,17,0)
0. The Results[0] would contain the lock descriptor and subsequent nodes
"KRN",8994,1861,3,18,0)
of the global array would contain the data (see below). The lock 
"KRN",8994,1861,3,19,0)
descriptor contains information about the process, which owns the most 
"KRN",8994,1861,3,20,0)
recent lock of the record. The "O" flag (read-only) would also be added to
"KRN",8994,1861,3,21,0)
the 15th field of the "PRD" segment.
"KRN",8994,1861,3,22,0)
 
"KRN",8994,1861,3,23,0)
  Results[0]            Lock Descriptor
"KRN",8994,1861,3,24,0)
                          ^01: Date/Time (FileMan)
"KRN",8994,1861,3,25,0)
                          ^02: User/Process name
"KRN",8994,1861,3,26,0)
                          ^03: User IEN (DUZ)
"KRN",8994,1861,3,27,0)
                          ^04: $JOB
"KRN",8994,1861,3,28,0)
                          ^05: Task number
"KRN",8994,1861,3,29,0)
 
"KRN",8994,1861,3,30,0)
THE DATA ARE LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"KRN",8994,1861,3,31,0)
 
"KRN",8994,1861,3,32,0)
Otherwise, zero is returned in the Results[0] and the subsequent nodes of
"KRN",8994,1861,3,33,0)
the array contain the data.
"KRN",8994,1861,3,34,0)
 
"KRN",8994,1861,3,35,0)
  Results[0]            0
"KRN",8994,1861,3,36,0)
 
"KRN",8994,1861,3,37,0)
  Results[i]            Demographic Information
"KRN",8994,1861,3,38,0)
                          ^01: "DEM"
"KRN",8994,1861,3,39,0)
                          ^02: ""
"KRN",8994,1861,3,40,0)
                          ^03: Patient IEN (DFN)
"KRN",8994,1861,3,41,0)
                          ^04: Patient Name
"KRN",8994,1861,3,42,0)
                          ^05: Date of Birth (FileMan)
"KRN",8994,1861,3,43,0)
                          ^06: SSN
"KRN",8994,1861,3,44,0)
                          ^07: Date of Death (FileMan)
"KRN",8994,1861,3,45,0)
                          ^08: Sex (F/M)
"KRN",8994,1861,3,46,0)
 
"KRN",8994,1861,3,47,0)
  Results[i]            Basic Registry Data
"KRN",8994,1861,3,48,0)
                          ^01: "PRD"
"KRN",8994,1861,3,49,0)
                          ^02: ""
"KRN",8994,1861,3,50,0)
                          ^03: Date Entered (FileMan)
"KRN",8994,1861,3,51,0)
                          ^04: Status Code (Field 3, File #798)
"KRN",8994,1861,3,52,0)
                          ^05: Active (0/1)
"KRN",8994,1861,3,53,0)
                          ^06: Do not Send (0/1)
"KRN",8994,1861,3,54,0)
                          ^07: Data Acknowledged Until (FileMan)
"KRN",8994,1861,3,55,0)
                          ^08: Data Extracted Until (FileMan)
"KRN",8994,1861,3,56,0)
                          ^09: Date Selected (FileMan)
"KRN",8994,1861,3,57,0)
                          ^10: Date Confirmed (FileMan)
"KRN",8994,1861,3,58,0)
                          ^11: Location Selected (Institution Name)
"KRN",8994,1861,3,59,0)
                          ^12: Selection Rule Description
"KRN",8994,1861,3,60,0)
                          ^13: reserved
"KRN",8994,1861,3,61,0)
                          ^14: reserved
"KRN",8994,1861,3,62,0)
                          ^15: Action Flags (see the description below)
"KRN",8994,1861,3,63,0)
 
"KRN",8994,1861,3,64,0)
                        The Status field can have the following values
"KRN",8994,1861,3,65,0)
                        (see description of the STATUS field of the
"KRN",8994,1861,3,66,0)
                        ROR REGISTRY RECORD file for more details):
"KRN",8994,1861,3,67,0)
                            0  Confirmed
"KRN",8994,1861,3,68,0)
                            4  Pending
"KRN",8994,1861,3,69,0)
                            5  Deleted
"KRN",8994,1861,3,70,0)
 
"KRN",8994,1861,3,71,0)
                        The Action Flags field indicates the actions that
"KRN",8994,1861,3,72,0)
                        can be performed on the patient's record:
"KRN",8994,1861,3,73,0)
                            C  CDC form can be edited/printed
"KRN",8994,1861,3,74,0)
                            D  The record can be deleted
"KRN",8994,1861,3,75,0)
                            E  The record can be edited
"KRN",8994,1861,3,76,0)
                            O  Read-only mode
"KRN",8994,1861,3,77,0)
 
"KRN",8994,1861,3,78,0)
  Results[i]            Local field data
"KRN",8994,1861,3,79,0)
                          ^O1: "LFV"
"KRN",8994,1861,3,80,0)
                          ^02: IEN in the LOCAL FIELD multiple
"KRN",8994,1861,3,81,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1861,3,82,0)
                          ^03: Field Definition IEN
"KRN",8994,1861,3,83,0)
                               (in the ROR LOCAL FIELD file)
"KRN",8994,1861,3,84,0)
                          ^04: Field Name
"KRN",8994,1861,3,85,0)
                          ^05: Date (FileMan)
"KRN",8994,1861,3,86,0)
                          ^06: Comment
"KRN",8994,1861,3,87,0)
 
"KRN",8994,1861,3,88,0)
  Results[i]            Selection Rule
"KRN",8994,1861,3,89,0)
                          ^01: "PSR"
"KRN",8994,1861,3,90,0)
                          ^02: IEN in the SELECTION RULE multiple
"KRN",8994,1861,3,91,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,1861,3,92,0)
                          ^03: Rule Definition IEN
"KRN",8994,1861,3,93,0)
                               (in the ROR SELECTION RULE file)
"KRN",8994,1861,3,94,0)
                          ^04: Name of the Rule
"KRN",8994,1861,3,95,0)
                          ^05: Date (FileMan)
"KRN",8994,1861,3,96,0)
                          ^06: Location IEN  (Institution IEN)
"KRN",8994,1861,3,97,0)
                          ^07: Location Name (Institution Name)
"KRN",8994,1861,3,98,0)
                          ^08: Short Description
"KRN",8994,1861,3,99,0)
 
"KRN",8994,1861,3,100,0)
  Results[i]            Patient History (risk factors)
"KRN",8994,1861,3,101,0)
                          ^01: "PH"
"KRN",8994,1861,3,102,0)
                          ^02: ""
"KRN",8994,1861,3,103,0)
                          ^03: SEX RELATIONS W/MALE PARTNER   {0|1|9}
"KRN",8994,1861,3,104,0)
                          ^04: SEX RELATIONS W/FEMALE PARTNER {0|1|9}
"KRN",8994,1861,3,105,0)
                          ^05: IV DRUGS AFTER 77 AND PRE HIV  {0|1|9}
"KRN",8994,1861,3,106,0)
                          ^06: REC'D CLOTTING FACTORS         {0|1|9}
"KRN",8994,1861,3,107,0)
                          ^07: TYPE OF HEMOPHILIA             {1|2|8}
"KRN",8994,1861,3,108,0)
                          ^08: OTHER HEMOPHILIA DESCRIPTION
"KRN",8994,1861,3,109,0)
                          ^09: SR WITH IV DRUG USER           {0|1|9}
"KRN",8994,1861,3,110,0)
                          ^10: SR WITH BISEXUAL MAN           {0|1|9}
"KRN",8994,1861,3,111,0)
                          ^11: SR W HEMOPHILIA/COAG DISORDER  {0|1|9}
"KRN",8994,1861,3,112,0)
                          ^12: SR W TRANS RECIPIENT WITH AIDS {0|1|9}
"KRN",8994,1861,3,113,0)
                          ^13: TRANSPLANT RECIP-DOCUMNTD HIV  {0|1|9}
"KRN",8994,1861,3,114,0)
                          ^14: SR W AIDS/HIV INFECTION        {0|1|9}
"KRN",8994,1861,3,115,0)
                          ^15: TRANS AFTER 77 AND BEFORE HIV  {0|1|9}
"KRN",8994,1861,3,116,0)
                          ^16: DATE OF FIRST TRANSFUSION      (MM/YY)
"KRN",8994,1861,3,117,0)
                          ^17: DATE OF LAST TRANSFUSION       (MM/YY)
"KRN",8994,1861,3,118,0)
                          ^18: TRANSPLANT OR ARTIF INSEMIN    {0|1|9}
"KRN",8994,1861,3,119,0)
                          ^19: WORK IN HEALTH CARE OR LAB     {0|1|9}
"KRN",8994,1861,3,120,0)
                          ^20: OCCUPATION
"KRN",8994,1861,3,121,0)
 
"KRN",8994,1861,3,122,0)
  Results[i]            Registry Data
"KRN",8994,1861,3,123,0)
                          ^01: "ICR"
"KRN",8994,1861,3,124,0)
                          ^02: ""
"KRN",8994,1861,3,125,0)
                          ^03: Clinical AIDS                  {0|1}
"KRN",8994,1861,3,126,0)
                          ^04: Date of Clinical AIDS (FileMan)
"KRN",8994,1861,3,127,0)
                          ^05: reserved
"KRN",8994,1861,3,128,0)
                          ^06: Test name
"KRN",8994,1861,3,129,0)
                          ^07: Code of the group
"KRN",8994,1861,3,130,0)
                          ^08: Group name
"KRN",8994,1861,3,131,0)
 
"KRN",8994,1861,3,132,0)
  Results[i]            Registry Data
"KRN",8994,1861,3,133,0)
                          ^01: "ICR"
"KRN",8994,1861,3,134,0)
                          ^02: ""
"KRN",8994,1861,3,135,0)
                          ^03: Clinical AIDS                  {0|1}
"KRN",8994,1861,3,136,0)
                          ^04: Date of Clinical AIDS (FileMan)
"KRN",8994,1861,3,137,0)
                          ^05: Code of the Supporting Evidence
"KRN",8994,1861,3,138,0)
                          ^06: Date of last CD4 (FileMan)
"KRN",8994,1861,3,139,0)
                          ^07: Last CD4
"KRN",8994,1861,3,140,0)
                          ^08: Date of lowest CD4 (FileMan)
"KRN",8994,1861,3,141,0)
                          ^09: Lowest CD4
"KRN",8994,1861,3,142,0)
                          ^10: Date of lowest CD4 % (FileMan)
"KRN",8994,1861,3,143,0)
                          ^11: Lowest CD4 %
"KRN",8994,2081,-1)
0^1
"KRN",8994,2081,0)
RORHEPC PATIENT LOAD^LOAD^RORRP036^4^R^^^1^1
"KRN",8994,2081,1,0)
^8994.01^2^2^3070129^^
"KRN",8994,2081,1,1,0)
The RORHEPC PATIENT LOAD remote procedure loads the patient's data from
"KRN",8994,2081,1,2,0)
the Hepatitis C registry and prepares the record for editing.
"KRN",8994,2081,2,0)
^8994.02A^3^3
"KRN",8994,2081,2,1,0)
REGIEN^1^^1^1
"KRN",8994,2081,2,1,1,0)
^8994.021^2^2^3030703^^^
"KRN",8994,2081,2,1,1,1,0)
The REGIEN parameter should contain a valid registry IEN (IEN of the
"KRN",8994,2081,2,1,1,2,0)
registry parameters record in the ROR REGISTRY PARAMETERS file #798.1).
"KRN",8994,2081,2,2,0)
PATIEN^1^^1^2
"KRN",8994,2081,2,2,1,0)
^8994.021^1^1^3030715^^^^
"KRN",8994,2081,2,2,1,1,0)
A valid patient IEN (DFN) should be assigned to the PATIEN parameter.
"KRN",8994,2081,2,3,0)
LOCK^1^^^3
"KRN",8994,2081,2,3,1,0)
^8994.021^2^2^3070129^^^
"KRN",8994,2081,2,3,1,1,0)
If this parameter is defined and not zero then the RPC will try to lock
"KRN",8994,2081,2,3,1,2,0)
the registry record before loading the data and will leave it locked.
"KRN",8994,2081,2,"B","LOCK",3)

"KRN",8994,2081,2,"B","PATIEN",2)

"KRN",8994,2081,2,"B","REGIEN",1)

"KRN",8994,2081,2,"PARAMSEQ",1,1)

"KRN",8994,2081,2,"PARAMSEQ",2,2)

"KRN",8994,2081,2,"PARAMSEQ",3,3)

"KRN",8994,2081,3,0)
^^89^89^3070129^
"KRN",8994,2081,3,1,0)
A negative value of the first "^"-piece of the Results[0] indicates that
"KRN",8994,2081,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2081,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2081,3,4,0)
descriptors returned in the subsequent nodes of the Results array:
"KRN",8994,2081,3,5,0)
   
"KRN",8994,2081,3,6,0)
  Results[0]            Result Descriptor
"KRN",8994,2081,3,7,0)
                          ^01: The last error code
"KRN",8994,2081,3,8,0)
                          ^02: Number of the error descriptors
"KRN",8994,2081,3,9,0)
                                                                      
"KRN",8994,2081,3,10,0)
  Results[i]            Error Descriptor
"KRN",8994,2081,3,11,0)
                          ^01: Error code
"KRN",8994,2081,3,12,0)
                          ^02: Message
"KRN",8994,2081,3,13,0)
                          ^03: Place of the error
"KRN",8994,2081,3,14,0)
 
"KRN",8994,2081,3,15,0)
If locking was requested (see the LOCK parameter) and the record could not
"KRN",8994,2081,3,16,0)
be locked then the first "^"-piece of the Results[0] would be greater than
"KRN",8994,2081,3,17,0)
0. The Results[0] would contain the lock descriptor and subsequent nodes
"KRN",8994,2081,3,18,0)
of the global array would contain the data (see below). The lock 
"KRN",8994,2081,3,19,0)
descriptor contains information about the process, which owns the most 
"KRN",8994,2081,3,20,0)
recent lock of the record. The "O" flag (read-only) would also be added to
"KRN",8994,2081,3,21,0)
the 15th field of the "PRD" segment.
"KRN",8994,2081,3,22,0)
 
"KRN",8994,2081,3,23,0)
  Results[0]            Lock Descriptor
"KRN",8994,2081,3,24,0)
                          ^01: Date/Time (FileMan)
"KRN",8994,2081,3,25,0)
                          ^02: User/Process name
"KRN",8994,2081,3,26,0)
                          ^03: User IEN (DUZ)
"KRN",8994,2081,3,27,0)
                          ^04: $JOB
"KRN",8994,2081,3,28,0)
                          ^05: Task number
"KRN",8994,2081,3,29,0)
 
"KRN",8994,2081,3,30,0)
THE DATA ARE LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"KRN",8994,2081,3,31,0)
 
"KRN",8994,2081,3,32,0)
Otherwise, zero is returned in the Results[0] and the subsequent nodes of
"KRN",8994,2081,3,33,0)
the array contain the data.
"KRN",8994,2081,3,34,0)
 
"KRN",8994,2081,3,35,0)
  Results[0]            0
"KRN",8994,2081,3,36,0)
 
"KRN",8994,2081,3,37,0)
  Results[i]            Demographic Information
"KRN",8994,2081,3,38,0)
                          ^01: "DEM"
"KRN",8994,2081,3,39,0)
                          ^02: ""
"KRN",8994,2081,3,40,0)
                          ^03: Patient IEN (DFN)
"KRN",8994,2081,3,41,0)
                          ^04: Patient Name
"KRN",8994,2081,3,42,0)
                          ^05: Date of Birth (FileMan)
"KRN",8994,2081,3,43,0)
                          ^06: SSN
"KRN",8994,2081,3,44,0)
                          ^07: Date of Death (FileMan)
"KRN",8994,2081,3,45,0)
                          ^08: Sex (F/M)
"KRN",8994,2081,3,46,0)
 
"KRN",8994,2081,3,47,0)
  Results[i]            Basic Registry Data
"KRN",8994,2081,3,48,0)
                          ^01: "PRD"
"KRN",8994,2081,3,49,0)
                          ^02: ""
"KRN",8994,2081,3,50,0)
                          ^03: Date Entered (FileMan)
"KRN",8994,2081,3,51,0)
                          ^04: Status Code (Field 3, File #798)
"KRN",8994,2081,3,52,0)
                          ^05: Active (0/1)
"KRN",8994,2081,3,53,0)
                          ^06: Do not Send (0/1)
"KRN",8994,2081,3,54,0)
                          ^07: Data Acknowledged Until (FileMan)
"KRN",8994,2081,3,55,0)
                          ^08: Data Extracted Until (FileMan)
"KRN",8994,2081,3,56,0)
                          ^09: Date Selected (FileMan)
"KRN",8994,2081,3,57,0)
                          ^10: Date Confirmed (FileMan)
"KRN",8994,2081,3,58,0)
                          ^11: Location Selected (Institution Name)
"KRN",8994,2081,3,59,0)
                          ^12: Selection Rule Description
"KRN",8994,2081,3,60,0)
                          ^13: reserved
"KRN",8994,2081,3,61,0)
                          ^14: reserved
"KRN",8994,2081,3,62,0)
                          ^15: Action Flags (see the description below)
"KRN",8994,2081,3,63,0)
 
"KRN",8994,2081,3,64,0)
  Results[i]            Local field data
"KRN",8994,2081,3,65,0)
                          ^O1: "LFV"
"KRN",8994,2081,3,66,0)
                          ^02: IEN in the LOCAL FIELD multiple
"KRN",8994,2081,3,67,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,2081,3,68,0)
                          ^03: Field Definition IEN
"KRN",8994,2081,3,69,0)
                               (in the ROR LOCAL FIELD file)
"KRN",8994,2081,3,70,0)
                          ^04: Field Name
"KRN",8994,2081,3,71,0)
                          ^05: Date (FileMan)
"KRN",8994,2081,3,72,0)
                          ^06: Comment
"KRN",8994,2081,3,73,0)
 
"KRN",8994,2081,3,74,0)
  Results[i]            Selection Rule
"KRN",8994,2081,3,75,0)
                          ^01: "PSR"
"KRN",8994,2081,3,76,0)
                          ^02: IEN in the SELECTION RULE multiple
"KRN",8994,2081,3,77,0)
                               of the ROR REGISTRY RECORD file
"KRN",8994,2081,3,78,0)
                          ^03: Rule Definition IEN
"KRN",8994,2081,3,79,0)
                               (in the ROR SELECTION RULE file)
"KRN",8994,2081,3,80,0)
                          ^04: Name of the Rule
"KRN",8994,2081,3,81,0)
                          ^05: Date (FileMan)
"KRN",8994,2081,3,82,0)
                          ^06: Location IEN  (Institution IEN)
"KRN",8994,2081,3,83,0)
                          ^07: Location Name (Institution Name)
"KRN",8994,2081,3,84,0)
                          ^08: Short Description
"KRN",8994,2081,3,85,0)
 
"KRN",8994,2081,3,86,0)
  Results[i]            Registry Data
"KRN",8994,2081,3,87,0)
                          ^01: "HEPC"
"KRN",8994,2081,3,88,0)
                          ^02: ""
"KRN",8994,2081,3,89,0)
                          ^03: reserved
"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",389,-1)
1^1
"PKG",389,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL CASE REGISTRIES
"PKG",389,20,0)
^9.402P^^
"PKG",389,22,0)
^9.49I^1^1
"PKG",389,22,1,0)
1.5^3060208^3060221^222222227
"PKG",389,22,1,"PAH",1,0)
2^3070611
"PKG",389,22,1,"PAH",1,1,0)
^^2^2^3070611
"PKG",389,22,1,"PAH",1,1,1,0)
This build fixes several Clinical Case Registries problems and implements 
"PKG",389,22,1,"PAH",1,1,2,0)
several enhancements.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","RORHL7A")
0^9^B35139964^B35053076
"RTN","RORHL7A",1,0)
RORHL7A ;HCIOFO/SG - HL7 UTILITIES ; 4/4/07 1:07pm
"RTN","RORHL7A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORHL7A",3,0)
 ;
"RTN","RORHL7A",4,0)
 Q
"RTN","RORHL7A",5,0)
 ;
"RTN","RORHL7A",6,0)
 ;***** ADDS THE SEGMENT TO THE HL7 MESSAGE BUFFER
"RTN","RORHL7A",7,0)
 ;
"RTN","RORHL7A",8,0)
 ; SEG           Complete HL7 segment
"RTN","RORHL7A",9,0)
 ;
"RTN","RORHL7A",10,0)
 ; The ADDSEGC^RORHL7A procedure adds the HL7 segment to the HL7
"RTN","RORHL7A",11,0)
 ; message buffer defined by the ROREXT("HL7BUF") parameter
"RTN","RORHL7A",12,0)
 ; (the ^TMP("HLS",$J), by default). The <TAB>, <CR> and <LF>
"RTN","RORHL7A",13,0)
 ; characters are replaced with spaces. Long segments are split
"RTN","RORHL7A",14,0)
 ; among sub-nodes of the main segment node in the destination
"RTN","RORHL7A",15,0)
 ; buffer.
"RTN","RORHL7A",16,0)
 ;
"RTN","RORHL7A",17,0)
 ; The RORHL array and some nodes of the ROREXT array must be
"RTN","RORHL7A",18,0)
 ; initialized (either by the $$INIT^RORHL7 or manually) before
"RTN","RORHL7A",19,0)
 ; calling this procedure.
"RTN","RORHL7A",20,0)
 ;
"RTN","RORHL7A",21,0)
ADDSEGC(SEG) ;
"RTN","RORHL7A",22,0)
 N I1,I2,MAXLEN,NODE,PTR,PTR1,SID,SL
"RTN","RORHL7A",23,0)
 S NODE=ROREXT("HL7BUF"),PTR=$G(ROREXT("HL7PTR"))+1
"RTN","RORHL7A",24,0)
 S HLFS=RORHL("FS"),HLECH=RORHL("ECH")
"RTN","RORHL7A",25,0)
 Q:$P(SEG,HLFS)=""  ; Segment Name
"RTN","RORHL7A",26,0)
 ;--- Assign the Set ID if necessary
"RTN","RORHL7A",27,0)
 S SID=$$SETID($P(SEG,HLFS))
"RTN","RORHL7A",28,0)
 S:SID>0 $P(SEG,HLFS,2)=SID
"RTN","RORHL7A",29,0)
 ;--- Remove empty trailing fields
"RTN","RORHL7A",30,0)
 S I2=$L(SEG,HLFS)
"RTN","RORHL7A",31,0)
 F I1=I2:-1:1  Q:$TR($P(SEG,HLFS,I1),HLECH)'=""
"RTN","RORHL7A",32,0)
 S:I1<I2 $P(SEG,HLFS,I1+1,I2)=""
"RTN","RORHL7A",33,0)
 ;--- Store the segment
"RTN","RORHL7A",34,0)
 S SL=$L(SEG),MAXLEN=245  K @NODE@(PTR)
"RTN","RORHL7A",35,0)
 S @NODE@(PTR)=$TR($E(SEG,1,MAXLEN),$C(9,10,13),"   ")
"RTN","RORHL7A",36,0)
 S ROREXT("HL7SIZE")=$G(ROREXT("HL7SIZE"))+SL+1
"RTN","RORHL7A",37,0)
 ;--- Split the segment into sub-nodes if necessary
"RTN","RORHL7A",38,0)
 D:SL>MAXLEN
"RTN","RORHL7A",39,0)
 . S I2=MAXLEN
"RTN","RORHL7A",40,0)
 . F PTR1=1:1  S I1=I2+1,I2=I1+MAXLEN-1  Q:I1>SL  D
"RTN","RORHL7A",41,0)
 . . S @NODE@(PTR,PTR1)=$TR($E(SEG,I1,I2),$C(9,10,13),"   ")
"RTN","RORHL7A",42,0)
 ;--- Save the pointer
"RTN","RORHL7A",43,0)
 S ROREXT("HL7PTR")=PTR
"RTN","RORHL7A",44,0)
 Q
"RTN","RORHL7A",45,0)
 ;
"RTN","RORHL7A",46,0)
 ;***** ASSEMBLES THE SEGMENT AND ADDS IT TO THE HL7 MESSAGE BUFFER
"RTN","RORHL7A",47,0)
 ;
"RTN","RORHL7A",48,0)
 ; .FIELDS       Reference to a local variable where the HL7
"RTN","RORHL7A",49,0)
 ;               fields are stored
"RTN","RORHL7A",50,0)
 ;
"RTN","RORHL7A",51,0)
 ;  FIELDS(
"RTN","RORHL7A",52,0)
 ;    0)         Segment name
"RTN","RORHL7A",53,0)
 ;    I,         Field value
"RTN","RORHL7A",54,0)
 ;      i)       Continuation of the value if it is
"RTN","RORHL7A",55,0)
 ;    ...        longer than than 245 characters
"RTN","RORHL7A",56,0)
 ;
"RTN","RORHL7A",57,0)
 ; The ADDSEGF^RORHL7A procedure assembles the HL7 segment from
"RTN","RORHL7A",58,0)
 ; provided field values and adds it to the HL7 message buffer
"RTN","RORHL7A",59,0)
 ; defined by the ROREXT("HL7BUF") node (the ^TMP("HLS",$J), by
"RTN","RORHL7A",60,0)
 ; default). The <TAB>, <CR> and <LF> characters are replaced with
"RTN","RORHL7A",61,0)
 ; spaces. Long segments are split among sub-nodes of the main
"RTN","RORHL7A",62,0)
 ; segment node in the destination buffer.
"RTN","RORHL7A",63,0)
 ;
"RTN","RORHL7A",64,0)
 ; The RORHL array and some nodes of the ROREXT array must be
"RTN","RORHL7A",65,0)
 ; initialized (either by the $$INIT^RORHL7 or manually) before
"RTN","RORHL7A",66,0)
 ; calling this procedure.
"RTN","RORHL7A",67,0)
 ;
"RTN","RORHL7A",68,0)
ADDSEGF(FIELDS) ;
"RTN","RORHL7A",69,0)
 ; RORBUF        Temporary buffer for the segment construction
"RTN","RORHL7A",70,0)
 ; RORIS         Current continuation subscript in the HL7 buffer
"RTN","RORHL7A",71,0)
 ; RORNODE       Closed root of the HL7 message buffer
"RTN","RORHL7A",72,0)
 ; RORPTR        Current subscript in the HL7 message buffer
"RTN","RORHL7A",73,0)
 ; RORSL         Number of characters that can be appended to the
"RTN","RORHL7A",74,0)
 ;               RORBUF before it has to be emptied into the HL7
"RTN","RORHL7A",75,0)
 ;               message buffer
"RTN","RORHL7A",76,0)
 ;
"RTN","RORHL7A",77,0)
 N FLD,I,LASTFLD,RORBUF,RORIS,RORNODE,RORPTR,RORSL
"RTN","RORHL7A",78,0)
 Q:$G(FIELDS(0))=""  ; Segment Name
"RTN","RORHL7A",79,0)
 S RORNODE=ROREXT("HL7BUF"),RORPTR=$G(ROREXT("HL7PTR"))+1
"RTN","RORHL7A",80,0)
 S HLFS=RORHL("FS"),HLECH=RORHL("ECH")
"RTN","RORHL7A",81,0)
 ;--- Assign the Set ID if necessary
"RTN","RORHL7A",82,0)
 S I=$$SETID(FIELDS(0))
"RTN","RORHL7A",83,0)
 S:I>0 FIELDS(1)=I
"RTN","RORHL7A",84,0)
 ;--- Remove empty trailing fields
"RTN","RORHL7A",85,0)
 S I=$NA(FIELDS(" "))
"RTN","RORHL7A",86,0)
 F  S I=$$Q^RORUTL18(I,-1)  Q:I=""  Q:$TR(@I,HLECH)'=""  K @I
"RTN","RORHL7A",87,0)
 ;--- Initialize construction variables
"RTN","RORHL7A",88,0)
 S RORBUF=FIELDS(0),I=$L(RORBUF)
"RTN","RORHL7A",89,0)
 S ROREXT("HL7SIZE")=$G(ROREXT("HL7SIZE"))+I+1
"RTN","RORHL7A",90,0)
 S RORIS=0,RORSL=245-I
"RTN","RORHL7A",91,0)
 ;--- Append the fields and store the segment
"RTN","RORHL7A",92,0)
 S LASTFLD=+$O(FIELDS(" "),-1)
"RTN","RORHL7A",93,0)
 F FLD=1:1:LASTFLD  D
"RTN","RORHL7A",94,0)
 . D APPEND(HLFS_$G(FIELDS(FLD)))
"RTN","RORHL7A",95,0)
 . ;--- Process the field continuation nodes
"RTN","RORHL7A",96,0)
 . S I=""
"RTN","RORHL7A",97,0)
 . F  S I=$O(FIELDS(FLD,I))  Q:I=""  D APPEND(FIELDS(FLD,I))
"RTN","RORHL7A",98,0)
 ;--- Flush the buffer if necessary
"RTN","RORHL7A",99,0)
 D:RORBUF'=""
"RTN","RORHL7A",100,0)
 . I 'RORIS  S @RORNODE@(RORPTR)=RORBUF  Q
"RTN","RORHL7A",101,0)
 . S @RORNODE@(RORPTR,RORIS)=RORBUF
"RTN","RORHL7A",102,0)
 S ROREXT("HL7PTR")=RORPTR
"RTN","RORHL7A",103,0)
 Q
"RTN","RORHL7A",104,0)
 ;
"RTN","RORHL7A",105,0)
 ;***** APPENDS THE FIELD VALUE TO THE HL7 SEGMENT
"RTN","RORHL7A",106,0)
 ;
"RTN","RORHL7A",107,0)
 ; VAL           Value of the field (or its part)
"RTN","RORHL7A",108,0)
 ;
"RTN","RORHL7A",109,0)
 ; This is an internal function. Do not call it directly.
"RTN","RORHL7A",110,0)
 ;
"RTN","RORHL7A",111,0)
APPEND(VAL) ;
"RTN","RORHL7A",112,0)
 N BASE,L
"RTN","RORHL7A",113,0)
 S VAL=$TR(VAL,$C(9,10,13),"   "),L=$L(VAL)
"RTN","RORHL7A",114,0)
 S ROREXT("HL7SIZE")=$G(ROREXT("HL7SIZE"))+L
"RTN","RORHL7A",115,0)
 I L'>RORSL  S RORBUF=RORBUF_VAL,RORSL=RORSL-L  Q
"RTN","RORHL7A",116,0)
 ;---
"RTN","RORHL7A",117,0)
 S RORBUF=RORBUF_$E(VAL,1,RORSL),L=L-RORSL
"RTN","RORHL7A",118,0)
 S BASE=1
"RTN","RORHL7A",119,0)
 F  D  Q:L'>0
"RTN","RORHL7A",120,0)
 . I 'RORIS  S @RORNODE@(RORPTR)=RORBUF
"RTN","RORHL7A",121,0)
 . E  S @RORNODE@(RORPTR,RORIS)=RORBUF
"RTN","RORHL7A",122,0)
 . S BASE=BASE+RORSL,RORIS=RORIS+1,RORSL=245
"RTN","RORHL7A",123,0)
 . S RORBUF=$E(VAL,BASE,BASE+RORSL-1),L=L-RORSL
"RTN","RORHL7A",124,0)
 S RORSL=-L
"RTN","RORHL7A",125,0)
 Q
"RTN","RORHL7A",126,0)
 ;
"RTN","RORHL7A",127,0)
 ;***** RETURNS THE BHS SEGMENT
"RTN","RORHL7A",128,0)
 ;
"RTN","RORHL7A",129,0)
 ; BID           Batch message ID
"RTN","RORHL7A",130,0)
 ;
"RTN","RORHL7A",131,0)
 ; [BDT]         Batch message creation time in internal FileMan
"RTN","RORHL7A",132,0)
 ;               format (NOW by default)
"RTN","RORHL7A",133,0)
 ;
"RTN","RORHL7A",134,0)
 ; [COMMENT]     Optional comment
"RTN","RORHL7A",135,0)
 ;
"RTN","RORHL7A",136,0)
 ; The RORHL local variable must be initialized by the $$INIT^RORHL7
"RTN","RORHL7A",137,0)
 ; function before calling this entry point.
"RTN","RORHL7A",138,0)
 ;
"RTN","RORHL7A",139,0)
BHS(BID,BDT,COMMENT) ;
"RTN","RORHL7A",140,0)
 N CS,SEG,TMP
"RTN","RORHL7A",141,0)
 D BHS^HLFNC3(.RORHL,BID,.SEG)
"RTN","RORHL7A",142,0)
 Q:$G(SEG)="" ""
"RTN","RORHL7A",143,0)
 S HLFS=RORHL("FS"),HLECH=RORHL("ECH"),CS=$E(HLECH,1)
"RTN","RORHL7A",144,0)
 ;--- Post-processing
"RTN","RORHL7A",145,0)
 S SEG=SEG_$G(SEG(1))
"RTN","RORHL7A",146,0)
 S:$G(BDT)'>0 BDT=$$NOW^XLFDT
"RTN","RORHL7A",147,0)
 S TMP=$E($P($$SITE^VASITE,U,3),1,3)
"RTN","RORHL7A",148,0)
 S $P(SEG,HLFS,4)=TMP_CS_$G(^XMB("NETNAME"))_CS_"DNS"
"RTN","RORHL7A",149,0)
 S $P(SEG,HLFS,5)="ROR AAC"
"RTN","RORHL7A",150,0)
 S $P(SEG,HLFS,7)=$$FMTHL7^XLFDT(BDT)
"RTN","RORHL7A",151,0)
 S TMP=$P(SEG,HLFS,9)
"RTN","RORHL7A",152,0)
 S $P(TMP,CS,3)=$P(TMP,CS,3)_$E(HLECH,2)_$G(RORHL("ETN"))
"RTN","RORHL7A",153,0)
 S $P(SEG,HLFS,9)=TMP
"RTN","RORHL7A",154,0)
 S $P(SEG,HLFS,10)=$G(COMMENT)
"RTN","RORHL7A",155,0)
 Q SEG
"RTN","RORHL7A",156,0)
 ;
"RTN","RORHL7A",157,0)
 ;***** RETURNS BTS SEGMENT
"RTN","RORHL7A",158,0)
 ;
"RTN","RORHL7A",159,0)
 ; MSGCNT        Batch message count
"RTN","RORHL7A",160,0)
 ; [COMMENT]     Batch comment
"RTN","RORHL7A",161,0)
 ;
"RTN","RORHL7A",162,0)
 ; The RORHL variable must be initialized by the INIT^HLFNC2 before
"RTN","RORHL7A",163,0)
 ; calling this entry point
"RTN","RORHL7A",164,0)
 ;
"RTN","RORHL7A",165,0)
BTS(MSGCNT,COMMENT) ;
"RTN","RORHL7A",166,0)
 Q "BTS"_RORHL("FS")_MSGCNT_RORHL("FS")_$G(COMMENT)
"RTN","RORHL7A",167,0)
 ;
"RTN","RORHL7A",168,0)
 ;***** LOADS THE HL7 FIELD (OR ITS PART) TO THE BUFFER
"RTN","RORHL7A",169,0)
 ;
"RTN","RORHL7A",170,0)
 ; VAL           Value of the field (or its part)
"RTN","RORHL7A",171,0)
 ;
"RTN","RORHL7A",172,0)
 ; FLD           Number of the field in the segment (piece number)
"RTN","RORHL7A",173,0)
 ;
"RTN","RORHL7A",174,0)
FIELD(VAL,FLD) ;
"RTN","RORHL7A",175,0)
 N BASE,L
"RTN","RORHL7A",176,0)
 S:FLD>RORFLD RORFLD=FLD,RORIS=0,RORSL=245
"RTN","RORHL7A",177,0)
 S L=$L(VAL),BASE=1
"RTN","RORHL7A",178,0)
 F RORIS=RORIS:1  D  Q:L'>0
"RTN","RORHL7A",179,0)
 . I 'RORIS  S RORSEG(RORFLD)=$G(RORSEG(RORFLD))_$E(VAL,BASE,BASE+RORSL-1)
"RTN","RORHL7A",180,0)
 . E  S RORSEG(RORFLD,RORIS)=$G(RORSEG(RORFLD,RORIS))_$E(VAL,BASE,BASE+RORSL-1)
"RTN","RORHL7A",181,0)
 . S BASE=BASE+RORSL,L=L-RORSL,RORSL=245
"RTN","RORHL7A",182,0)
 S RORSL=-L
"RTN","RORHL7A",183,0)
 Q
"RTN","RORHL7A",184,0)
 ;
"RTN","RORHL7A",185,0)
 ;***** LOADS THE HL7 SEGMENT INTO THE RPOVIDED BUFFER
"RTN","RORHL7A",186,0)
 ;
"RTN","RORHL7A",187,0)
 ; .RORSEG       Reference to a local variable where the HL7
"RTN","RORHL7A",188,0)
 ;               fields will be stored. The fields are stored
"RTN","RORHL7A",189,0)
 ;               in the following format:
"RTN","RORHL7A",190,0)
 ;
"RTN","RORHL7A",191,0)
 ;                 RORSEG(FldNum)=FldVal
"RTN","RORHL7A",192,0)
 ;
"RTN","RORHL7A",193,0)
 ;               If the value is longer that 245 characters then
"RTN","RORHL7A",194,0)
 ;               the continuation nodes are created:
"RTN","RORHL7A",195,0)
 ;
"RTN","RORHL7A",196,0)
 ;                 RORSEG(FldNum,#)=FldValCont
"RTN","RORHL7A",197,0)
 ;
"RTN","RORHL7A",198,0)
 ; ROR8SRC       Closed root of the source buffer containing
"RTN","RORHL7A",199,0)
 ;               the HL7 segment
"RTN","RORHL7A",200,0)
 ;
"RTN","RORHL7A",201,0)
LOADSEG(RORSEG,ROR8SRC) ;
"RTN","RORHL7A",202,0)
 N BUF,FLD,I,IFL,NFL,RORFLD,RORIS,RORSL
"RTN","RORHL7A",203,0)
 S HLFS=RORHL("FS")  K RORSEG
"RTN","RORHL7A",204,0)
 ;--- Process the main segment
"RTN","RORHL7A",205,0)
 S BUF=$G(@ROR8SRC),NFL=$L(BUF,HLFS)
"RTN","RORHL7A",206,0)
 F IFL=1:1:NFL  S RORSEG(IFL-1)=$P(BUF,HLFS,IFL)
"RTN","RORHL7A",207,0)
 Q:$D(@ROR8SRC)<10
"RTN","RORHL7A",208,0)
 ;--- Process the sub-segments
"RTN","RORHL7A",209,0)
 S (FLD,RORFLD)=NFL-1,RORIS=0,RORSL=245-$L(RORSEG(FLD))
"RTN","RORHL7A",210,0)
 S I=""
"RTN","RORHL7A",211,0)
 F  S I=$O(@ROR8SRC@(I))  Q:I=""  D
"RTN","RORHL7A",212,0)
 . S BUF=@ROR8SRC@(I),NFL=$L(BUF,HLFS)
"RTN","RORHL7A",213,0)
 . D FIELD($P(BUF,HLFS),FLD)
"RTN","RORHL7A",214,0)
 . F IFL=2:1:NFL  S FLD=FLD+1  D FIELD($P(BUF,HLFS,IFL),FLD)
"RTN","RORHL7A",215,0)
 Q
"RTN","RORHL7A",216,0)
 ;
"RTN","RORHL7A",217,0)
 ;***** RETURNS TEXT EXPLANATIONS OF THE HL7 MESSAGE STATUS
"RTN","RORHL7A",218,0)
 ;
"RTN","RORHL7A",219,0)
 ; MSGST         Status value returned by the $$MSGSTAT^HLUTIL
"RTN","RORHL7A",220,0)
 ;
"RTN","RORHL7A",221,0)
MSGSTXT(MSGST) ;
"RTN","RORHL7A",222,0)
 N ST  S ST=+MSGST
"RTN","RORHL7A",223,0)
 Q:'ST "Message does not exist"
"RTN","RORHL7A",224,0)
 Q:ST=1 "Waiting in queue"
"RTN","RORHL7A",225,0)
 Q:ST=1.5 "Opening connection"
"RTN","RORHL7A",226,0)
 Q:ST=1.7 "Awaiting response"
"RTN","RORHL7A",227,0)
 Q:ST=2 "Awaiting application ack"
"RTN","RORHL7A",228,0)
 Q:ST=3 "Successfully completed"
"RTN","RORHL7A",229,0)
 Q:ST=4 "Error"
"RTN","RORHL7A",230,0)
 Q:ST=8 "Being generated"
"RTN","RORHL7A",231,0)
 Q:ST=9 "Awaiting processing"
"RTN","RORHL7A",232,0)
 Q "Unknown"
"RTN","RORHL7A",233,0)
 ;
"RTN","RORHL7A",234,0)
 ;***** ASSIGNS THE 'SET ID'
"RTN","RORHL7A",235,0)
 ;
"RTN","RORHL7A",236,0)
 ; SEGNAME       Name of the HL7 segment
"RTN","RORHL7A",237,0)
 ; [DISINC]      Disable increment of the Set ID
"RTN","RORHL7A",238,0)
 ;
"RTN","RORHL7A",239,0)
 ; Return Values:
"RTN","RORHL7A",240,0)
 ;        ""  Not required for this segment
"RTN","RORHL7A",241,0)
 ;        >0  Value for the Set ID field
"RTN","RORHL7A",242,0)
 ;
"RTN","RORHL7A",243,0)
SETID(SEGNAME,DISINC) ;
"RTN","RORHL7A",244,0)
 N SETID
"RTN","RORHL7A",245,0)
 Q:$G(SEGNAME)="" ""
"RTN","RORHL7A",246,0)
 S SETID=+$G(ROREXT("HL7SID",SEGNAME))
"RTN","RORHL7A",247,0)
 Q:SETID'>0 ""
"RTN","RORHL7A",248,0)
 S:'$G(DISINC) ROREXT("HL7SID",SEGNAME)=SETID+1
"RTN","RORHL7A",249,0)
 Q SETID
"RTN","RORRP034")
0^7^B12580586^B12664578
"RTN","RORRP034",1,0)
RORRP034 ;HCIOFO/SG - RPC: HIV PATIENT SAVE/CANCEL ; 1/29/07 9:54am
"RTN","RORRP034",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORRP034",3,0)
 ;
"RTN","RORRP034",4,0)
 Q
"RTN","RORRP034",5,0)
 ;
"RTN","RORRP034",6,0)
 ;***** UPDATES THE PATIENT'S REGISTRY DATA
"RTN","RORRP034",7,0)
 ; RPC: [RORICR PATIENT SAVE]
"RTN","RORRP034",8,0)
 ;
"RTN","RORRP034",9,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP034",10,0)
 ;               are returned to.
"RTN","RORRP034",11,0)
 ;
"RTN","RORRP034",12,0)
 ; REGIEN        Registry IEN
"RTN","RORRP034",13,0)
 ;
"RTN","RORRP034",14,0)
 ; PTIEN         IEN of the registry patient (DFN)
"RTN","RORRP034",15,0)
 ;
"RTN","RORRP034",16,0)
 ; [CANCEL]      Cancel the update and unlock the registry data
"RTN","RORRP034",17,0)
 ;
"RTN","RORRP034",18,0)
 ; .DATA         Reference to a local array that contains the data
"RTN","RORRP034",19,0)
 ;               in the same format as the output of the RORICR
"RTN","RORRP034",20,0)
 ;               PATIENT LOAD remote procedure. Only PH, ICR, and
"RTN","RORRP034",21,0)
 ;               LFV segments are processed; the others are ignored.
"RTN","RORRP034",22,0)
 ;
"RTN","RORRP034",23,0)
 ; Return Values:
"RTN","RORRP034",24,0)
 ;
"RTN","RORRP034",25,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP034",26,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP034",27,0)
 ; details).
"RTN","RORRP034",28,0)
 ;
"RTN","RORRP034",29,0)
 ; Otherwise, zero is returned in the RESULTS(0).
"RTN","RORRP034",30,0)
 ;
"RTN","RORRP034",31,0)
SAVE(RESULTS,REGIEN,PTIEN,CANCEL,DATA) ;
"RTN","RORRP034",32,0)
 N IENS,LOCK,RC,RORERRDL
"RTN","RORRP034",33,0)
 D CLEAR^RORERR("SAVE^RORRP034",1)
"RTN","RORRP034",34,0)
 K RESULTS  S (RESULTS(0),RC)=0
"RTN","RORRP034",35,0)
 D
"RTN","RORRP034",36,0)
 . ;--- Registry IEN
"RTN","RORRP034",37,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP034",38,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP034",39,0)
 . S REGIEN=+REGIEN
"RTN","RORRP034",40,0)
 . ;--- Patient IEN
"RTN","RORRP034",41,0)
 . I $G(PTIEN)'>0  D  Q
"RTN","RORRP034",42,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PTIEN",$G(PTIEN))
"RTN","RORRP034",43,0)
 . S PTIEN=+PTIEN
"RTN","RORRP034",44,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP034",45,0)
 . S IENS=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP034",46,0)
 . S:IENS>0 (LOCK(798,IENS),LOCK(799.4,IENS))=""
"RTN","RORRP034",47,0)
 . Q:$G(CANCEL)
"RTN","RORRP034",48,0)
 . ;--- Save the data
"RTN","RORRP034",49,0)
 . S RC=$$SAVE1(.IENS)
"RTN","RORRP034",50,0)
 . I '$D(LOCK)  S:IENS>0 (LOCK(798,IENS),LOCK(799.4,IENS))=""
"RTN","RORRP034",51,0)
 . S:RC>0 RESULTS(0)=RC
"RTN","RORRP034",52,0)
 ;
"RTN","RORRP034",53,0)
 ;--- Do not unlock the records if there are errors in the data
"RTN","RORRP034",54,0)
 ;    (positive value is returned by the $$SAVE1), since the user
"RTN","RORRP034",55,0)
 ;--- will have another chance to correct the data and save it.
"RTN","RORRP034",56,0)
 D:RC'>0 UNLOCK^RORLOCK(.LOCK)
"RTN","RORRP034",57,0)
 D:RC<0 RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP034",58,0)
 Q
"RTN","RORRP034",59,0)
 ;
"RTN","RORRP034",60,0)
 ;***** INTERNAL ENTRY POINT THAT UPDATES THE REGISTRY DATA
"RTN","RORRP034",61,0)
SAVE1(IENS798) ;
"RTN","RORRP034",62,0)
 N IENS,LFIEN,LFV,RC,RDI,REGNAME,RORFDA,RORMSG,SEG,TMP
"RTN","RORRP034",63,0)
 ;
"RTN","RORRP034",64,0)
 ;=== Add the patient to the registry if necessary
"RTN","RORRP034",65,0)
 I IENS798'>0  S RC=0  D  Q:RC<0 RC
"RTN","RORRP034",66,0)
 . S REGNAME=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORRP034",67,0)
 . ;--- Add the patient to the registry
"RTN","RORRP034",68,0)
 . S RC=$$ADDPAT^RORUPD06(PTIEN,REGNAME)  Q:RC<0
"RTN","RORRP034",69,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP034",70,0)
 . S IENS798=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP034",71,0)
 . S:IENS798'>0 RC=$$ERROR^RORERR(-97,,,PTIEN,REGNAME)
"RTN","RORRP034",72,0)
 ;
"RTN","RORRP034",73,0)
 ;=== Prepare the data
"RTN","RORRP034",74,0)
 S (LFCNT,RDI,RC)=0
"RTN","RORRP034",75,0)
 F  S RDI=$O(DATA(RDI))  Q:RDI'>0  D  Q:RC
"RTN","RORRP034",76,0)
 . S SEG=$P(DATA(RDI),U)
"RTN","RORRP034",77,0)
 . ;--- Risk factors
"RTN","RORRP034",78,0)
 . I SEG="PH"  D  Q
"RTN","RORRP034",79,0)
 . . S RC=$$CDCFDA^RORRP026(IENS798,"PH^RORRP026",DATA(RDI),.RORFDA)
"RTN","RORRP034",80,0)
 . ;--- Registry data
"RTN","RORRP034",81,0)
 . I SEG="ICR"  D  Q
"RTN","RORRP034",82,0)
 . . S TMP=$P(DATA(RDI),U,3)
"RTN","RORRP034",83,0)
 . . S RORFDA(799.4,IENS798,.02)=TMP
"RTN","RORRP034",84,0)
 . . S RORFDA(799.4,IENS798,.03)=$S(TMP:$P(DATA(RDI),U,4),1:"")
"RTN","RORRP034",85,0)
 . ;--- Local field values
"RTN","RORRP034",86,0)
 . I SEG="LFV"  D  Q
"RTN","RORRP034",87,0)
 . . S LFIEN=+$P(DATA(RDI),U,3)
"RTN","RORRP034",88,0)
 . . S:LFIEN>0 LFV(LFIEN)=DATA(RDI)
"RTN","RORRP034",89,0)
 Q:RC RC
"RTN","RORRP034",90,0)
 ;
"RTN","RORRP034",91,0)
 ;=== Confirm the pending patient
"RTN","RORRP034",92,0)
 D:$$GET1^DIQ(798,IENS798,3,"I",,"RORMSG")=4
"RTN","RORRP034",93,0)
 . ;--- Do not clear the DON'T SEND flag for 'test' patients
"RTN","RORRP034",94,0)
 . S:'$$TESTPAT^RORUTL01(PTIEN) RORFDA(798,IENS798,11)="@"
"RTN","RORRP034",95,0)
 . ;--- Change the STATUS from 'Pending' to 'Active'
"RTN","RORRP034",96,0)
 . S RORFDA(798,IENS798,3)=0
"RTN","RORRP034",97,0)
 ;
"RTN","RORRP034",98,0)
 ;=== Update local fields
"RTN","RORRP034",99,0)
 S RC=$$UPDLFV^RORUTL19(IENS798,.LFV)  Q:RC<0 RC
"RTN","RORRP034",100,0)
 S:RC RORFDA(798,IENS798,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP034",101,0)
 ;
"RTN","RORRP034",102,0)
 ;=== Update the record(s)
"RTN","RORRP034",103,0)
 I $D(RORFDA)>1  D  Q:RC<0 RC
"RTN","RORRP034",104,0)
 . S RORFDA(798,IENS798,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP034",105,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP034",106,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,"798&799.4",IENS798)
"RTN","RORRP034",107,0)
 ;
"RTN","RORRP034",108,0)
 ;=== Success
"RTN","RORRP034",109,0)
 Q 0
"RTN","RORRP037")
0^6^B11518664^B11590629
"RTN","RORRP037",1,0)
RORRP037 ;HCIOFO/SG - RPC: HEPC PATIENT SAVE/CANCEL ; 1/29/07 9:51am
"RTN","RORRP037",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORRP037",3,0)
 ;
"RTN","RORRP037",4,0)
 Q
"RTN","RORRP037",5,0)
 ;
"RTN","RORRP037",6,0)
 ;***** UPDATES THE PATIENT'S REGISTRY DATA
"RTN","RORRP037",7,0)
 ; RPC: [RORHEPC PATIENT SAVE]
"RTN","RORRP037",8,0)
 ;
"RTN","RORRP037",9,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP037",10,0)
 ;               are returned to.
"RTN","RORRP037",11,0)
 ;
"RTN","RORRP037",12,0)
 ; REGIEN        Registry IEN
"RTN","RORRP037",13,0)
 ;
"RTN","RORRP037",14,0)
 ; PTIEN         IEN of the registry patient (DFN)
"RTN","RORRP037",15,0)
 ;
"RTN","RORRP037",16,0)
 ; [CANCEL]      Cancel the update and unlock the registry data
"RTN","RORRP037",17,0)
 ;
"RTN","RORRP037",18,0)
 ; .DATA         Reference to a local array that contains the data
"RTN","RORRP037",19,0)
 ;               in the same format as the output of the RORHEPC
"RTN","RORRP037",20,0)
 ;               PATIENT LOAD remote procedure. Only HEPC and LFV
"RTN","RORRP037",21,0)
 ;               segments are processed; the others are ignored.
"RTN","RORRP037",22,0)
 ;
"RTN","RORRP037",23,0)
 ; Return Values:
"RTN","RORRP037",24,0)
 ;
"RTN","RORRP037",25,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP037",26,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP037",27,0)
 ; details).
"RTN","RORRP037",28,0)
 ;
"RTN","RORRP037",29,0)
 ; Otherwise, zero is returned in the RESULTS(0).
"RTN","RORRP037",30,0)
 ;
"RTN","RORRP037",31,0)
SAVE(RESULTS,REGIEN,PTIEN,CANCEL,DATA) ;
"RTN","RORRP037",32,0)
 N IENS,LOCK,RC,RORERRDL
"RTN","RORRP037",33,0)
 D CLEAR^RORERR("SAVE^RORRP037",1)
"RTN","RORRP037",34,0)
 K RESULTS  S (RESULTS(0),RC)=0
"RTN","RORRP037",35,0)
 D
"RTN","RORRP037",36,0)
 . ;--- Registry IEN
"RTN","RORRP037",37,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP037",38,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP037",39,0)
 . S REGIEN=+REGIEN
"RTN","RORRP037",40,0)
 . ;--- Patient IEN
"RTN","RORRP037",41,0)
 . I $G(PTIEN)'>0  D  Q
"RTN","RORRP037",42,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PTIEN",$G(PTIEN))
"RTN","RORRP037",43,0)
 . S PTIEN=+PTIEN
"RTN","RORRP037",44,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP037",45,0)
 . S IENS=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP037",46,0)
 . S:IENS>0 LOCK(798,IENS)=""
"RTN","RORRP037",47,0)
 . Q:$G(CANCEL)
"RTN","RORRP037",48,0)
 . ;--- Save the data
"RTN","RORRP037",49,0)
 . S RC=$$SAVE1(.IENS)
"RTN","RORRP037",50,0)
 . I '$D(LOCK)  S:IENS>0 LOCK(798,IENS)=""
"RTN","RORRP037",51,0)
 . S:RC>0 RESULTS(0)=RC
"RTN","RORRP037",52,0)
 ;
"RTN","RORRP037",53,0)
 ;--- Do not unlock the records if there are errors in the data
"RTN","RORRP037",54,0)
 ;    (positive value is returned by the $$SAVE1), since the user
"RTN","RORRP037",55,0)
 ;--- will have another chance to correct the data and save it.
"RTN","RORRP037",56,0)
 D:RC'>0 UNLOCK^RORLOCK(.LOCK)
"RTN","RORRP037",57,0)
 D:RC<0 RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP037",58,0)
 Q
"RTN","RORRP037",59,0)
 ;
"RTN","RORRP037",60,0)
 ;***** INTERNAL ENTRY POINT THAT UPDATES THE REGISTRY DATA
"RTN","RORRP037",61,0)
 ;
"RTN","RORRP037",62,0)
 ; IENS798       IENS of the registry record in the file #798
"RTN","RORRP037",63,0)
 ;
"RTN","RORRP037",64,0)
 ; Return Values:
"RTN","RORRP037",65,0)
 ;       <0  Error code
"RTN","RORRP037",66,0)
 ;        0  Ok
"RTN","RORRP037",67,0)
 ;
"RTN","RORRP037",68,0)
SAVE1(IENS798) ;
"RTN","RORRP037",69,0)
 N IENS,LFIEN,LFV,RC,RDI,REGNAME,RORFDA,RORMSG,SEG,TMP
"RTN","RORRP037",70,0)
 ;
"RTN","RORRP037",71,0)
 ;=== Add the patient to the registry if necessary
"RTN","RORRP037",72,0)
 I IENS798'>0  S RC=0  D  Q:RC<0 RC
"RTN","RORRP037",73,0)
 . S REGNAME=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORRP037",74,0)
 . ;--- Add the patient to the registry
"RTN","RORRP037",75,0)
 . S RC=$$ADDPAT^RORUPD06(PTIEN,REGNAME)  Q:RC<0
"RTN","RORRP037",76,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP037",77,0)
 . S IENS798=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP037",78,0)
 . S:IENS798'>0 RC=$$ERROR^RORERR(-97,,,PTIEN,REGNAME)
"RTN","RORRP037",79,0)
 ;
"RTN","RORRP037",80,0)
 ;=== Prepare the data
"RTN","RORRP037",81,0)
 S (LFCNT,RDI,RC)=0
"RTN","RORRP037",82,0)
 F  S RDI=$O(DATA(RDI))  Q:RDI'>0  D  Q:RC
"RTN","RORRP037",83,0)
 . S SEG=$P(DATA(RDI),U)
"RTN","RORRP037",84,0)
 . ;--- Registry data
"RTN","RORRP037",85,0)
 . I SEG="HEPC"  D  Q
"RTN","RORRP037",86,0)
 . . ; Insert code here if/when necessary
"RTN","RORRP037",87,0)
 . ;--- Local field values
"RTN","RORRP037",88,0)
 . I SEG="LFV"  D  Q
"RTN","RORRP037",89,0)
 . . S LFIEN=+$P(DATA(RDI),U,3)
"RTN","RORRP037",90,0)
 . . S:LFIEN>0 LFV(LFIEN)=DATA(RDI)
"RTN","RORRP037",91,0)
 Q:RC RC
"RTN","RORRP037",92,0)
 ;
"RTN","RORRP037",93,0)
 ;=== Confirm the pending patient
"RTN","RORRP037",94,0)
 D:$$GET1^DIQ(798,IENS798,3,"I",,"RORMSG")=4
"RTN","RORRP037",95,0)
 . ;--- Do not clear the DON'T SEND flag for 'test' patients
"RTN","RORRP037",96,0)
 . S:'$$TESTPAT^RORUTL01(PTIEN) RORFDA(798,IENS798,11)="@"
"RTN","RORRP037",97,0)
 . ;--- Change the STATUS from 'Pending' to 'Active'
"RTN","RORRP037",98,0)
 . S RORFDA(798,IENS798,3)=0
"RTN","RORRP037",99,0)
 ;
"RTN","RORRP037",100,0)
 ;=== Update local fields
"RTN","RORRP037",101,0)
 S RC=$$UPDLFV^RORUTL19(IENS798,.LFV)  Q:RC<0 RC
"RTN","RORRP037",102,0)
 S:RC RORFDA(798,IENS798,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP037",103,0)
 ;
"RTN","RORRP037",104,0)
 ;=== Update the record(s)
"RTN","RORRP037",105,0)
 I $D(RORFDA)>1  D  Q:RC<0 RC
"RTN","RORRP037",106,0)
 . S RORFDA(798,IENS798,5)=1   ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP037",107,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP037",108,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IENS798)
"RTN","RORRP037",109,0)
 ;
"RTN","RORRP037",110,0)
 ;=== Success
"RTN","RORRP037",111,0)
 Q 0
"RTN","RORTSK14")
0^14^B7015337^B6333918
"RTN","RORTSK14",1,0)
RORTSK14 ;HCIOFO/SG - PARSER FOR REPORT PARAMETERS (TOOLS) ; 4/25/07 2:48pm
"RTN","RORTSK14",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORTSK14",3,0)
 ;
"RTN","RORTSK14",4,0)
 Q
"RTN","RORTSK14",5,0)
 ;
"RTN","RORTSK14",6,0)
 ;***** CALCULATES START AND END DATES FROM DATE RANGE ATTRIBUTES
"RTN","RORTSK14",7,0)
 ;
"RTN","RORTSK14",8,0)
 ; .ATTR         Reference to a local variable that contains
"RTN","RORTSK14",9,0)
 ;               attributes of the <DATE_RANGE> element.
"RTN","RORTSK14",10,0)
 ;
"RTN","RORTSK14",11,0)
 ; .STDT         Reference to a local variable where
"RTN","RORTSK14",12,0)
 ;               the start date is returned to
"RTN","RORTSK14",13,0)
 ;
"RTN","RORTSK14",14,0)
 ; .ENDT         Reference to a local variable where
"RTN","RORTSK14",15,0)
 ;               the end date is returned to
"RTN","RORTSK14",16,0)
 ;
"RTN","RORTSK14",17,0)
 ; Return Values:
"RTN","RORTSK14",18,0)
 ;       <0  Error code
"RTN","RORTSK14",19,0)
 ;        0  Ok
"RTN","RORTSK14",20,0)
 ;
"RTN","RORTSK14",21,0)
 ; NOTE: In case of an error the function does not change
"RTN","RORTSK14",22,0)
 ;       values of the STDT and ENDT parameters.
"RTN","RORTSK14",23,0)
 ;
"RTN","RORTSK14",24,0)
DTRANGE(ATTR,STDT,ENDT) ;
"RTN","RORTSK14",25,0)
 N ENDT1,FISCAL,I,QUARTER,RC,RORMSG,STDT1,TMP,TYPE,YEAR
"RTN","RORTSK14",26,0)
 S (STDT1,ENDT1)="",TYPE=$G(ATTR("TYPE"))
"RTN","RORTSK14",27,0)
 S RC=0  D  Q:RC<0 $$DBS^RORERR("RORMSG",-9)
"RTN","RORTSK14",28,0)
 . ;
"RTN","RORTSK14",29,0)
 . ;--- CUSTOM: StartDate, EndDate
"RTN","RORTSK14",30,0)
 . I TYPE="CUSTOM"  D  Q
"RTN","RORTSK14",31,0)
 . . S STDT1=$G(ATTR("START")),ENDT1=$G(ATTR("END"))
"RTN","RORTSK14",32,0)
 . ;
"RTN","RORTSK14",33,0)
 . ;--- CUTOFF: Cutoff
"RTN","RORTSK14",34,0)
 . I TYPE="CUTOFF"  D  Q
"RTN","RORTSK14",35,0)
 . . S ENDT1=$$DT^XLFDT,TMP=$$TRIM^XLFSTR($G(ATTR("CUTOFF")))
"RTN","RORTSK14",36,0)
 . . ;--- Strip "TODAY-" (or "T-") from the attribute value
"RTN","RORTSK14",37,0)
 . . S:TMP["-" TMP=$P(TMP,"-",2)
"RTN","RORTSK14",38,0)
 . . ;--- Calculate the start date
"RTN","RORTSK14",39,0)
 . . D DT^DILF("P","TODAY-"_TMP,.STDT1,-ENDT1,"RORMSG")
"RTN","RORTSK14",40,0)
 . . S:STDT1<0 RC=STDT1
"RTN","RORTSK14",41,0)
 . ;
"RTN","RORTSK14",42,0)
 . ;--- QUARTER: Quarter, Year, Fiscal
"RTN","RORTSK14",43,0)
 . I TYPE="QUARTER"  D  Q
"RTN","RORTSK14",44,0)
 . . S QUARTER=+$G(ATTR("QUARTER")),YEAR=+$G(ATTR("YEAR"))
"RTN","RORTSK14",45,0)
 . . S FISCAL=+$G(ATTR("FISCAL"))  S:FISCAL QUARTER=QUARTER-1
"RTN","RORTSK14",46,0)
 . . S TMP=$P("10/01^01/01^04/01^07/01^10/01","^",QUARTER+1)
"RTN","RORTSK14",47,0)
 . . S TMP=TMP_"/"_$S(QUARTER:YEAR,1:YEAR-1)
"RTN","RORTSK14",48,0)
 . . D DT^DILF("P",TMP,.STDT1,,"RORMSG")
"RTN","RORTSK14",49,0)
 . . I STDT1<0  S RC=STDT1  Q
"RTN","RORTSK14",50,0)
 . . S TMP=$P("12/31^03/31^06/30^09/30^12/31","^",QUARTER+1)
"RTN","RORTSK14",51,0)
 . . S TMP=TMP_"/"_$S(QUARTER:YEAR,1:YEAR-1)
"RTN","RORTSK14",52,0)
 . . D DT^DILF("P",TMP,.ENDT1,STDT1,"RORMSG")
"RTN","RORTSK14",53,0)
 . . I ENDT1<0  S RC=ENDT1  Q
"RTN","RORTSK14",54,0)
 . ;
"RTN","RORTSK14",55,0)
 . ;--- YEAR: Year, Fiscal
"RTN","RORTSK14",56,0)
 . I TYPE="YEAR"  D  Q
"RTN","RORTSK14",57,0)
 . . S YEAR=+$G(ATTR("YEAR")),FISCAL=+$G(ATTR("FISCAL"))
"RTN","RORTSK14",58,0)
 . . S TMP=$S(FISCAL:"10/01/"_(YEAR-1),1:"01/01/"_YEAR)
"RTN","RORTSK14",59,0)
 . . D DT^DILF("P",TMP,.STDT1,,"RORMSG")
"RTN","RORTSK14",60,0)
 . . I STDT1<0  S RC=STDT1  Q
"RTN","RORTSK14",61,0)
 . . S TMP=$S(FISCAL:"09/30/"_YEAR,1:"12/31/"_YEAR)
"RTN","RORTSK14",62,0)
 . . D DT^DILF("P",TMP,.ENDT1,STDT1,"RORMSG")
"RTN","RORTSK14",63,0)
 . . I ENDT1<0  S RC=ENDT1  Q
"RTN","RORTSK14",64,0)
 ;
"RTN","RORTSK14",65,0)
 ;--- Invalid time frame
"RTN","RORTSK14",66,0)
 I (STDT1'>0)!(ENDT1'>0)!(STDT1>ENDT1)  D  Q RC
"RTN","RORTSK14",67,0)
 . S RC=$$ERROR^RORERR(-88,,,,"DATE_RANGE",STDT1_"-"_ENDT1)
"RTN","RORTSK14",68,0)
 ;
"RTN","RORTSK14",69,0)
 ;--- Success
"RTN","RORTSK14",70,0)
 S STDT=STDT1,ENDT=ENDT1
"RTN","RORTSK14",71,0)
 Q 0
"RTN","RORUTL05")
0^15^B58374925^B57340264
"RTN","RORUTL05",1,0)
RORUTL05 ;HCIOFO/SG - MISCELLANEOUS UTILITIES ; 1/26/07 4:24pm
"RTN","RORUTL05",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,2**;Feb 17, 2006;Build 6
"RTN","RORUTL05",3,0)
 ;
"RTN","RORUTL05",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL05",5,0)
 ;
"RTN","RORUTL05",6,0)
 ; #4493         Read the .01 field of the file #771.7 (private)
"RTN","RORUTL05",7,0)
 ; #10040        Access to the HOSPITAL LOCATION file (supported)
"RTN","RORUTL05",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORUTL05",9,0)
 ;
"RTN","RORUTL05",10,0)
 Q
"RTN","RORUTL05",11,0)
 ;
"RTN","RORUTL05",12,0)
 ;***** CHECKS IF THE E-MAIL NOTIFICATION IS ENABLED
"RTN","RORUTL05",13,0)
 ;
"RTN","RORUTL05",14,0)
 ; REGIEN        Registry IEN
"RTN","RORUTL05",15,0)
 ;
"RTN","RORUTL05",16,0)
 ; Return Values:
"RTN","RORUTL05",17,0)
 ;        0  Do not send e-mail notifications
"RTN","RORUTL05",18,0)
 ;        1  E-mail notifications are enabled
"RTN","RORUTL05",19,0)
 ;
"RTN","RORUTL05",20,0)
CCRNTFY(REGIEN) ;
"RTN","RORUTL05",21,0)
 N DOMAIN,RC
"RTN","RORUTL05",22,0)
 ;--- Check if not a production account
"RTN","RORUTL05",23,0)
 I $T(PROD^XUPROD)'=""  Q:'$$PROD^XUPROD() 0
"RTN","RORUTL05",24,0)
 ;--- Check the domain name
"RTN","RORUTL05",25,0)
 S DOMAIN=$G(^XMB("NETNAME"))
"RTN","RORUTL05",26,0)
 Q:DOMAIN'?1.E1".VA.GOV" 0
"RTN","RORUTL05",27,0)
 Q:(DOMAIN?1"TEST.".E)!(DOMAIN?1"TST.".E) 0
"RTN","RORUTL05",28,0)
 ;--- Registry-specific checks
"RTN","RORUTL05",29,0)
 I $G(REGIEN)>0  S RC=1  D  Q:'RC 0
"RTN","RORUTL05",30,0)
 . N HL,HLECH,HLFS,HLQ,NAME,RORMSG
"RTN","RORUTL05",31,0)
 . ;--- Get the HL7 protocol name
"RTN","RORUTL05",32,0)
 . S NAME=$$GET1^DIQ(798.1,+REGIEN,13,,,"RORMSG")  Q:NAME=""
"RTN","RORUTL05",33,0)
 . ;--- Check the HL7 processing ID
"RTN","RORUTL05",34,0)
 . D INIT^HLFNC2(NAME,.HL)
"RTN","RORUTL05",35,0)
 . I $G(HL("PID"))'="",HL("PID")'="P"  S RC=0  Q
"RTN","RORUTL05",36,0)
 ;--- Notification is enabled (production account)
"RTN","RORUTL05",37,0)
 Q 1
"RTN","RORUTL05",38,0)
 ;
"RTN","RORUTL05",39,0)
 ;***** CHECK IF THE PATIENT'S RECORD IN FILE #2 IS VALID
"RTN","RORUTL05",40,0)
 ;
"RTN","RORUTL05",41,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORUTL05",42,0)
 ;
"RTN","RORUTL05",43,0)
 ; Return Values:
"RTN","RORUTL05",44,0)
 ;       <0  Error code
"RTN","RORUTL05",45,0)
 ;        0  Ok
"RTN","RORUTL05",46,0)
 ;
"RTN","RORUTL05",47,0)
CHKPTR(DFN,SILENT) ;
"RTN","RORUTL05",48,0)
 N RC,VA,VADM,VAERR
"RTN","RORUTL05",49,0)
 D VADEM(DFN)
"RTN","RORUTL05",50,0)
 I $G(VADM(1))=""  S RC=-102  D:'$G(SILENT)  Q RC
"RTN","RORUTL05",51,0)
 . D ERROR^RORERR(RC,,,,"PATIENT",DFN)
"RTN","RORUTL05",52,0)
 Q 0
"RTN","RORUTL05",53,0)
 ;
"RTN","RORUTL05",54,0)
 ;***** DELETES ALL RECORDS FROM THE (SUB)FILE
"RTN","RORUTL05",55,0)
 ;
"RTN","RORUTL05",56,0)
 ; FILE          File/Subfile number
"RTN","RORUTL05",57,0)
 ; [IENS]        IENS of the subfile
"RTN","RORUTL05",58,0)
 ;
"RTN","RORUTL05",59,0)
 ; Return Values:
"RTN","RORUTL05",60,0)
 ;       <0  Error code
"RTN","RORUTL05",61,0)
 ;        0  Ok
"RTN","RORUTL05",62,0)
 ;
"RTN","RORUTL05",63,0)
CLEAR(FILE,IENS) ;
"RTN","RORUTL05",64,0)
 Q:'$$VFILE^DILFD(FILE) 0
"RTN","RORUTL05",65,0)
 N DA,DIK,RC,ROOT,TMP
"RTN","RORUTL05",66,0)
 S IENS=$G(IENS)
"RTN","RORUTL05",67,0)
 ;--- Lock the (sub)file
"RTN","RORUTL05",68,0)
 S RC=$$LOCK^RORLOCK(FILE,IENS)
"RTN","RORUTL05",69,0)
 I RC  D  Q RC
"RTN","RORUTL05",70,0)
 . S TMP=$$GET1^DID(FILE,,,"NAME",,"RORMSG")
"RTN","RORUTL05",71,0)
 . S TMP=$S(TMP'="":"file",1:"subfile")_" #"_FILE
"RTN","RORUTL05",72,0)
 . S:IENS'="" TMP=TMP_"; IENS: '"_IENS_"'"
"RTN","RORUTL05",73,0)
 . S RC=$$ERROR^RORERR(-11,,"By "_$$TEXT^RORLOCK(RC),,TMP)
"RTN","RORUTL05",74,0)
 ;
"RTN","RORUTL05",75,0)
 ;--- Delete the records
"RTN","RORUTL05",76,0)
 S DIK=$$ROOT^DILFD(FILE,IENS)
"RTN","RORUTL05",77,0)
 S ROOT=$$CREF^DILF(DIK)
"RTN","RORUTL05",78,0)
 D DA^DILF(IENS,.DA)  S DA=0
"RTN","RORUTL05",79,0)
 F  S DA=$O(@ROOT@(DA))  Q:DA'>0  D ^DIK
"RTN","RORUTL05",80,0)
 ;
"RTN","RORUTL05",81,0)
 ;--- Unlock the (sub)file
"RTN","RORUTL05",82,0)
 D UNLOCK^RORLOCK(FILE,IENS)
"RTN","RORUTL05",83,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL05",84,0)
 ;
"RTN","RORUTL05",85,0)
 ;***** CLEARS THE FIELDS OF THE RECORDS FOUND BY NAME
"RTN","RORUTL05",86,0)
 ;
"RTN","RORUTL05",87,0)
 ; FILE          File number
"RTN","RORUTL05",88,0)
 ; [IENS]        IENS of the subfile
"RTN","RORUTL05",89,0)
 ; NAME          Name of the record (value of the .01 field)
"RTN","RORUTL05",90,0)
 ; FIELDS        List of field numbers separated by semicolons
"RTN","RORUTL05",91,0)
 ;
"RTN","RORUTL05",92,0)
 ; Return Values:
"RTN","RORUTL05",93,0)
 ;       <0  Error code
"RTN","RORUTL05",94,0)
 ;        0  Ok
"RTN","RORUTL05",95,0)
 ;
"RTN","RORUTL05",96,0)
CLRFLDS(FILE,IENS,NAME,FIELDS) ;
"RTN","RORUTL05",97,0)
 N FLD,I,IEN,IENS1,IS,RC,RORBUF,RORFDA,RORMSG
"RTN","RORUTL05",98,0)
 ;--- Find the record(s)
"RTN","RORUTL05",99,0)
 D FIND^DIC(FILE,$G(IENS),"@","X",NAME,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL05",100,0)
 S RC=$$DBS^RORERR("RORMSG",-9,,,FILE)  Q:RC<0 RC
"RTN","RORUTL05",101,0)
 S:$G(IENS)="" IENS=","  S FIELDS=$TR(FIELDS," ")
"RTN","RORUTL05",102,0)
 ;--- Update the record(s)
"RTN","RORUTL05",103,0)
 S IS="",RC=0
"RTN","RORUTL05",104,0)
 F  S IS=$O(RORBUF("DILIST",2,IS))  Q:IS=""  D  Q:RC<0
"RTN","RORUTL05",105,0)
 . S IEN=RORBUF("DILIST",2,IS)  Q:IEN'>0
"RTN","RORUTL05",106,0)
 . S IENS1=IEN_IENS
"RTN","RORUTL05",107,0)
 . F I=1:1  S FLD=$P(FIELDS,";",I)  Q:FLD'>0  D
"RTN","RORUTL05",108,0)
 . . S RORFDA(FILE,IENS1,+FLD)="@"
"RTN","RORUTL05",109,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUTL05",110,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,FILE,IENS1)
"RTN","RORUTL05",111,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL05",112,0)
 ;
"RTN","RORUTL05",113,0)
 ;***** RETURNS THE END DATE FOR THE EVENT PURGE
"RTN","RORUTL05",114,0)
EPDATE() ;
"RTN","RORUTL05",115,0)
 N DATE,IR,RC,RORBUF,RORMSG,TMP
"RTN","RORUTL05",116,0)
 D LIST^DIC(798.1,,"@;1I;2I","U",,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL05",117,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL05",118,0)
 ;--- Get the oldest date of registry updates
"RTN","RORUTL05",119,0)
 S IR="",DATE=$$DT^XLFDT
"RTN","RORUTL05",120,0)
 F  S IR=$O(RORBUF("DILIST","ID",IR))  Q:IR=""  D
"RTN","RORUTL05",121,0)
 . S TMP=$G(RORBUF("DILIST","ID",IR,1)) ; REGISTRY UPDATED UNTIL
"RTN","RORUTL05",122,0)
 . I TMP>0  S:TMP<DATE DATE=TMP
"RTN","RORUTL05",123,0)
 . ;S TMP=$G(RORBUF("DILIST","ID",IR,2)) ; DATA EXTRACTED UNTIL
"RTN","RORUTL05",124,0)
 . ;I TMP>0  S:TMP<DATE DATE=TMP
"RTN","RORUTL05",125,0)
 ;--- Subtract additional 14 days (just in case)
"RTN","RORUTL05",126,0)
 S DATE=$$FMADD^XLFDT(DATE\1,-14)
"RTN","RORUTL05",127,0)
 ;--- No more than 60 days in the past
"RTN","RORUTL05",128,0)
 S TMP=$$FMADD^XLFDT($$DT^XLFDT,-60)
"RTN","RORUTL05",129,0)
 Q $S(DATE>TMP:DATE,1:TMP)
"RTN","RORUTL05",130,0)
 ;
"RTN","RORUTL05",131,0)
 ;***** RETURNS NAME OF THE HOSPITAL LOCATION
"RTN","RORUTL05",132,0)
 ;
"RTN","RORUTL05",133,0)
 ; HLIEN         IEN of the hospital location
"RTN","RORUTL05",134,0)
 ;
"RTN","RORUTL05",135,0)
HLNAME(HLIEN) ;
"RTN","RORUTL05",136,0)
 N NAME
"RTN","RORUTL05",137,0)
 S NAME=$$GET1^DIQ(44,(+HLIEN)_",",.01,,,"RORMSG")
"RTN","RORUTL05",138,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,(+HLIEN)_",")
"RTN","RORUTL05",139,0)
 Q NAME
"RTN","RORUTL05",140,0)
 ;
"RTN","RORUTL05",141,0)
 ;***** FORMATS THE TEXT THAT DESCRIBES STATUS OF THE HL7 MESSAGE
"RTN","RORUTL05",142,0)
 ;
"RTN","RORUTL05",143,0)
 ; MSGID         A valid ID of the HL7 message
"RTN","RORUTL05",144,0)
 ;
"RTN","RORUTL05",145,0)
 ; .RORDST       Reference to a local array that the text
"RTN","RORUTL05",146,0)
 ;               is appended to
"RTN","RORUTL05",147,0)
 ;
"RTN","RORUTL05",148,0)
 ; [TITLE]       Title of the output
"RTN","RORUTL05",149,0)
 ;
"RTN","RORUTL05",150,0)
 ; [DLGNUM]      Number of an entry in the DIALOG file that
"RTN","RORUTL05",151,0)
 ;               contains the text template (by default,
"RTN","RORUTL05",152,0)
 ;               the 7980000.004 is used)
"RTN","RORUTL05",153,0)
 ;
"RTN","RORUTL05",154,0)
 ; [.PARAMS]     Reference to a local variable containing
"RTN","RORUTL05",155,0)
 ;               additional parameters that substitute the
"RTN","RORUTL05",156,0)
 ;               placeholders in the text template
"RTN","RORUTL05",157,0)
 ; PARAMS(
"RTN","RORUTL05",158,0)
 ;  "NOR")       Number of retries to resend the message
"RTN","RORUTL05",159,0)
 ;  "REGISTRY")  Name of the registry
"RTN","RORUTL05",160,0)
 ;
"RTN","RORUTL05",161,0)
 ; [MSGSTAT]     Status of the message (result value of the
"RTN","RORUTL05",162,0)
 ;               $$MSGSTAT^HLUTIL function). If this parameter
"RTN","RORUTL05",163,0)
 ;               is undefined or equal to an empty string, the
"RTN","RORUTL05",164,0)
 ;               current status of the message is retrieved.
"RTN","RORUTL05",165,0)
 ;
"RTN","RORUTL05",166,0)
MSG7STS(MSGID,RORDST,TITLE,DLGNUM,PARAMS,MSGSTAT) ;
"RTN","RORUTL05",167,0)
 N RORMSG,TMP
"RTN","RORUTL05",168,0)
 Q:$G(MSGID)?." "
"RTN","RORUTL05",169,0)
 S:$G(MSGSTAT)="" MSGSTAT=$$MSGSTAT^HLUTIL(MSGID)
"RTN","RORUTL05",170,0)
 ;--- Prepare the parameters
"RTN","RORUTL05",171,0)
 S PARAMS("ID")=MSGID
"RTN","RORUTL05",172,0)
 S PARAMS("STATUS")=$$MSGSTXT^RORHL7A(MSGSTAT)
"RTN","RORUTL05",173,0)
 S TMP=+$P(MSGSTAT,U,2)
"RTN","RORUTL05",174,0)
 S:TMP>0 PARAMS("UPDATED")=$$FMTE^XLFDT(TMP)
"RTN","RORUTL05",175,0)
 S PARAMS("ERRMSG")=$P(MSGSTAT,U,3)
"RTN","RORUTL05",176,0)
 S TMP=+$P(MSGSTAT,U,4)
"RTN","RORUTL05",177,0)
 S:TMP>0 PARAMS("ERRTYPE")=$$GET1^DIQ(771.7,TMP_",",.01,,,"RORMSG")
"RTN","RORUTL05",178,0)
 S PARAMS($S(+MSGSTAT=1:"QPOS",1:"RETRIES"))=$P(MSGSTAT,U,5)
"RTN","RORUTL05",179,0)
 S PARAMS("OPENFAIL")=$P(MSGSTAT,U,6)
"RTN","RORUTL05",180,0)
 S PARAMS("ACK")=$P(MSGSTAT,U,7)
"RTN","RORUTL05",181,0)
 ;--- Additional parameters
"RTN","RORUTL05",182,0)
 I $G(DLGNUM)>0  D
"RTN","RORUTL05",183,0)
 . S PARAMS("STATCODE")=+MSGSTAT
"RTN","RORUTL05",184,0)
 . S TMP=+$P(MSGSTAT,U,2)
"RTN","RORUTL05",185,0)
 . S:TMP>0 PARAMS("STATUPD")=$$FMTHL7^XLFDT(TMP)
"RTN","RORUTL05",186,0)
 . S TMP=$$SITE^RORUTL03()
"RTN","RORUTL05",187,0)
 . S PARAMS("STNAME")=$P(TMP,U,2)
"RTN","RORUTL05",188,0)
 . S PARAMS("STNUM")=$P(TMP,U)
"RTN","RORUTL05",189,0)
 . S:$G(PARAMS("NOR"))'>0 PARAMS("NOR")="several"
"RTN","RORUTL05",190,0)
 . S:$G(PARAMS("REGISTRY"))="" PARAMS("REGISTRY")="<unknown>"
"RTN","RORUTL05",191,0)
 E  S DLGNUM=7980000.004
"RTN","RORUTL05",192,0)
 ;--- Build the text
"RTN","RORUTL05",193,0)
 S:$G(TITLE)'="" RORDST(1)=TITLE,RORDST(2)=" "
"RTN","RORUTL05",194,0)
 D BLD^DIALOG(DLGNUM,.PARAMS,,"RORDST","S")
"RTN","RORUTL05",195,0)
 Q
"RTN","RORUTL05",196,0)
 ;
"RTN","RORUTL05",197,0)
 ;***** CHECK IF THE ARGUMENT IS A NUMBER
"RTN","RORUTL05",198,0)
 ;
"RTN","RORUTL05",199,0)
 ; Return Values:
"RTN","RORUTL05",200,0)
 ;        1  Value starts from a number
"RTN","RORUTL05",201,0)
 ;        0  Otherwise
"RTN","RORUTL05",202,0)
 ;
"RTN","RORUTL05",203,0)
NUMERIC(VAL,NUMVAL) ;
"RTN","RORUTL05",204,0)
 S NUMVAL=$$TRIM^XLFSTR(VAL)
"RTN","RORUTL05",205,0)
 I NUMVAL?.1(1"+",1"-")1(1.N.1".".N,.N.1"."1.N).1(1"E".1(1"+",1"-")1.N)  S NUMVAL=+NUMVAL  Q 1
"RTN","RORUTL05",206,0)
 S NUMVAL=""
"RTN","RORUTL05",207,0)
 Q 0
"RTN","RORUTL05",208,0)
 ;
"RTN","RORUTL05",209,0)
 ;***** MARKS THE REGISTRY RECORDS FOR RESENDING THE LOCAL DATA
"RTN","RORUTL05",210,0)
 ;
"RTN","RORUTL05",211,0)
 ; .REGLST       Reference to a local array containing registry names 
"RTN","RORUTL05",212,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUTL05",213,0)
 ;
"RTN","RORUTL05",214,0)
 ; WD            Number of days to wait before marking the records
"RTN","RORUTL05",215,0)
 ;               for resending the local registry data
"RTN","RORUTL05",216,0)
 ;
"RTN","RORUTL05",217,0)
 ; Return Values:
"RTN","RORUTL05",218,0)
 ;       <0  Error code
"RTN","RORUTL05",219,0)
 ;        0  Ok
"RTN","RORUTL05",220,0)
 ;
"RTN","RORUTL05",221,0)
REMARK(REGLST,WD) ;
"RTN","RORUTL05",222,0)
 N DATE,IEN,IENS,REGIEN,REGNAME,ROOT,RORFDA,RORMSG,TMP
"RTN","RORUTL05",223,0)
 S ROOT=$$ROOT^DILFD(798,,1),RC=0
"RTN","RORUTL05",224,0)
 S DATE=$$FMADD^XLFDT($$DT^XLFDT,-WD)
"RTN","RORUTL05",225,0)
 ;--- Process the registries from the list
"RTN","RORUTL05",226,0)
 S REGNAME=""
"RTN","RORUTL05",227,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D
"RTN","RORUTL05",228,0)
 . S REGIEN=+REGLST(REGNAME)
"RTN","RORUTL05",229,0)
 . I REGIEN'>0  S REGIEN=$$REGIEN^RORUTL02(REGNAME)  Q:REGIEN'>0
"RTN","RORUTL05",230,0)
 . S IENS=REGIEN_","
"RTN","RORUTL05",231,0)
 . ;--- Get the registry parameters
"RTN","RORUTL05",232,0)
 . D GETS^DIQ(798.1,IENS,"21.04;21.05","I","RORFDA","RORMSG")
"RTN","RORUTL05",233,0)
 . I $G(DIERR)  S TMP=$$DBS^RORERR("RORMSG",-9,,,798.1,IENS)  Q
"RTN","RORUTL05",234,0)
 . ;--- Local data has been resent already
"RTN","RORUTL05",235,0)
 . Q:$G(RORFDA(798.1,IENS,21.04,"I"))
"RTN","RORUTL05",236,0)
 . ;--- The registry has not been populated yet
"RTN","RORUTL05",237,0)
 . Q:'$G(RORFDA(798.1,IENS,21.05,"I"))
"RTN","RORUTL05",238,0)
 . ;--- It is too early for resending the local data
"RTN","RORUTL05",239,0)
 . Q:RORFDA(798.1,IENS,21.05,"I")>DATE
"RTN","RORUTL05",240,0)
 . K RORFDA,RORMSG
"RTN","RORUTL05",241,0)
 . ;--- Mark registry records as modified
"RTN","RORUTL05",242,0)
 . S IEN=0
"RTN","RORUTL05",243,0)
 . F  S IEN=$O(@ROOT@("AC",REGIEN,IEN))  Q:'IEN  D
"RTN","RORUTL05",244,0)
 . . S IENS=IEN_","
"RTN","RORUTL05",245,0)
 . . S RORFDA(798,IENS,4)=1  ; UPDATE DEMOGRAPHICS
"RTN","RORUTL05",246,0)
 . . S RORFDA(798,IENS,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORUTL05",247,0)
 . . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUTL05",248,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORUTL05",249,0)
 . ;--- Update registry parameters
"RTN","RORUTL05",250,0)
 . S IENS=REGIEN_","
"RTN","RORUTL05",251,0)
 . S RORFDA(798.1,IENS,21.04)=$$NOW^XLFDT
"RTN","RORUTL05",252,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUTL05",253,0)
 . I $G(DIERR)  S TMP=$$DBS^RORERR("RORMSG",-9,,,798.1,IENS)  Q
"RTN","RORUTL05",254,0)
 . ;--- Record the message
"RTN","RORUTL05",255,0)
 . S TMP="Local registry and demographic data will be resent to AAC"
"RTN","RORUTL05",256,0)
 . D LOG^RORLOG(2,TMP,,"Registry Name: "_REGNAME)
"RTN","RORUTL05",257,0)
 Q 0
"RTN","RORUTL05",258,0)
 ;
"RTN","RORUTL05",259,0)
 ;***** CALLS THE DEM^VADPT
"RTN","RORUTL05",260,0)
 ;
"RTN","RORUTL05",261,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORUTL05",262,0)
 ; VALIDATE      Make sure that required fields are not empty
"RTN","RORUTL05",263,0)
 ; VAPTYP
"RTN","RORUTL05",264,0)
 ; VAHOW
"RTN","RORUTL05",265,0)
 ;
"RTN","RORUTL05",266,0)
VADEM(DFN,VALIDATE,VAPTYP,VAHOW) ;
"RTN","RORUTL05",267,0)
 N I,J,X,A,K,K1,NC,NF,NQ,T,VAROOT
"RTN","RORUTL05",268,0)
 D DEM^VADPT
"RTN","RORUTL05",269,0)
 S VA("BID")=$E($P($G(VADM(2)),U),6,10)  ; Always 'Last4'
"RTN","RORUTL05",270,0)
 Q:'$G(VALIDATE)
"RTN","RORUTL05",271,0)
 ;--- Make sure that required fields are not empty
"RTN","RORUTL05",272,0)
 S:$G(VADM(1))="" VADM(1)="Unknown ("_DFN_")"
"RTN","RORUTL05",273,0)
 S:$G(VA("BID"))="" VA("BID")="UNKN"
"RTN","RORUTL05",274,0)
 Q
"RTN","RORUTL18")
0^10^B26583151^B22624377
"RTN","RORUTL18",1,0)
RORUTL18 ;HCIOFO/SG - MISCELLANEOUS UTILITIES ; 4/4/07 1:19pm
"RTN","RORUTL18",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORUTL18",3,0)
 ;
"RTN","RORUTL18",4,0)
 ; This routine uses the following IA's:
"RTN","RORUTL18",5,0)
 ;
"RTN","RORUTL18",6,0)
 ; #10035        Access to the field #63 of the file #2
"RTN","RORUTL18",7,0)
 ;
"RTN","RORUTL18",8,0)
 Q
"RTN","RORUTL18",9,0)
 ;
"RTN","RORUTL18",10,0)
 ;***** STRIPS NON-NUMERIC CHARACTERS FROM THE LAB RESULT VALUE
"RTN","RORUTL18",11,0)
 ;
"RTN","RORUTL18",12,0)
 ; VAL           Source value
"RTN","RORUTL18",13,0)
 ;
"RTN","RORUTL18",14,0)
CLRNMVAL(VAL) ;
"RTN","RORUTL18",15,0)
 Q $TR(VAL," <>,")
"RTN","RORUTL18",16,0)
 ;
"RTN","RORUTL18",17,0)
 ;***** CHECKS FOR 'CONFIRMED' STATUS
"RTN","RORUTL18",18,0)
 ;
"RTN","RORUTL18",19,0)
 ; IEN           IEN of the registry record (in file #798)
"RTN","RORUTL18",20,0)
 ;
"RTN","RORUTL18",21,0)
 ; Return Values:
"RTN","RORUTL18",22,0)
 ;        0  Not confirmed
"RTN","RORUTL18",23,0)
 ;       >0  Confirmation date/time
"RTN","RORUTL18",24,0)
 ;
"RTN","RORUTL18",25,0)
CONFDT(IEN) ;
"RTN","RORUTL18",26,0)
 N CONF  S CONF=$P($G(^RORDATA(798,+IEN,0)),U,4,5)
"RTN","RORUTL18",27,0)
 Q $S('$P(CONF,U,2):$P(CONF,U),1:0)
"RTN","RORUTL18",28,0)
 ;
"RTN","RORUTL18",29,0)
 ;***** DATE RANGE COMPARISON FUNCTIONS
"RTN","RORUTL18",30,0)
DTMAX(DT1,DT2) ;
"RTN","RORUTL18",31,0)
 I DT1>0  Q $S(DT2>DT1:DT2,1:DT1)
"RTN","RORUTL18",32,0)
 Q $S(DT2>0:DT2,1:0)
"RTN","RORUTL18",33,0)
 ;
"RTN","RORUTL18",34,0)
DTMIN(DT1,DT2) ;
"RTN","RORUTL18",35,0)
 I DT1>0  Q $S(DT2'>0:DT1,DT2<DT1:DT2,1:DT1)
"RTN","RORUTL18",36,0)
 Q $S(DT2>0:DT2,1:0)
"RTN","RORUTL18",37,0)
 ;
"RTN","RORUTL18",38,0)
 ;***** RETURNS THE INSTITUTION IEN FOR THE HOSPITAL LOCATION
"RTN","RORUTL18",39,0)
 ;
"RTN","RORUTL18",40,0)
 ; IEN44         IEN in the HOSPITAL LOCATION file (#44)
"RTN","RORUTL18",41,0)
 ;
"RTN","RORUTL18",42,0)
 ; Return Values:
"RTN","RORUTL18",43,0)
 ;       <0  Error
"RTN","RORUTL18",44,0)
 ;       ""  Location has no corresponding institution
"RTN","RORUTL18",45,0)
 ;       >0  Institution IEN
"RTN","RORUTL18",46,0)
 ;
"RTN","RORUTL18",47,0)
IEN4(IEN44) ;
"RTN","RORUTL18",48,0)
 N IEN4,RC,RORMSG
"RTN","RORUTL18",49,0)
 Q:$G(IEN44)'>0 ""
"RTN","RORUTL18",50,0)
 S IEN4=+$$GET1^DIQ(44,IEN44_",",3,"I",,"RORMSG")
"RTN","RORUTL18",51,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,44,IEN44_",")
"RTN","RORUTL18",52,0)
 Q $S(IEN4>0:IEN4,1:"")
"RTN","RORUTL18",53,0)
 ;
"RTN","RORUTL18",54,0)
 ;***** RETURNS A LAB REFERENCE (IEN IN 'LAB DATA') FOR THE PATIENT
"RTN","RORUTL18",55,0)
 ;
"RTN","RORUTL18",56,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL18",57,0)
 ;
"RTN","RORUTL18",58,0)
 ; Return values:
"RTN","RORUTL18",59,0)
 ;       <0  Error code
"RTN","RORUTL18",60,0)
 ;        0  No lab data
"RTN","RORUTL18",61,0)
 ;       >0  IEN of the record in LAB DATA file
"RTN","RORUTL18",62,0)
 ;
"RTN","RORUTL18",63,0)
LABREF(PTIEN) ;
"RTN","RORUTL18",64,0)
 N LABREF,RORMSG
"RTN","RORUTL18",65,0)
 Q:$G(PTIEN)'>0 0
"RTN","RORUTL18",66,0)
 Q:$$MERGED(PTIEN) 0
"RTN","RORUTL18",67,0)
 S LABREF=+$$GET1^DIQ(2,PTIEN_",",63,"I",,"RORMSG")
"RTN","RORUTL18",68,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,PTIEN,2,PTIEN_",")
"RTN","RORUTL18",69,0)
 Q LABREF
"RTN","RORUTL18",70,0)
 ;
"RTN","RORUTL18",71,0)
 ;***** RETURNS THE NEW DFN OF A MERGED PATIENT RECORD
"RTN","RORUTL18",72,0)
 ;
"RTN","RORUTL18",73,0)
 ; DFN           Patient IEN
"RTN","RORUTL18",74,0)
 ;
"RTN","RORUTL18",75,0)
 ; Return values:
"RTN","RORUTL18",76,0)
 ;        0  The patient has not been merged
"RTN","RORUTL18",77,0)
 ;       >0  New DFN
"RTN","RORUTL18",78,0)
 ;
"RTN","RORUTL18",79,0)
MERGED(DFN) ;
"RTN","RORUTL18",80,0)
 N NEWDFN
"RTN","RORUTL18",81,0)
 F  S DFN=+$G(^DPT(+DFN,-9))  Q:DFN'>0  S NEWDFN=DFN
"RTN","RORUTL18",82,0)
 Q +$G(NEWDFN)
"RTN","RORUTL18",83,0)
 ;
"RTN","RORUTL18",84,0)
 ;***** SENDS THE CPRS-COMPATIBLE INFORMATIONAL ALERT
"RTN","RORUTL18",85,0)
 ;
"RTN","RORUTL18",86,0)
 ; MSG           Text of the alert message.  The text is truncated
"RTN","RORUTL18",87,0)
 ;               to 50 characters and '^' are replaced with '~'.
"RTN","RORUTL18",88,0)
 ;
"RTN","RORUTL18",89,0)
 ; [DFN]         Patient IEN
"RTN","RORUTL18",90,0)
 ;
"RTN","RORUTL18",91,0)
 ; [.XQA]        List of addressees.  By default, the
"RTN","RORUTL18",92,0)
 ;               alert is sent to the current user.
"RTN","RORUTL18",93,0)
 ;
"RTN","RORUTL18",94,0)
ORALERT(MSG,DFN,XQA) ;
"RTN","RORUTL18",95,0)
 N LAST4,NAME,VA,VADM,VAHOW,VAROOT,XQADATA,XQAID,XQAMSG,XQAROU
"RTN","RORUTL18",96,0)
 S XQAMSG="",XQAID="ROR,,"
"RTN","RORUTL18",97,0)
 I $G(DFN)>0  D
"RTN","RORUTL18",98,0)
 . D DEM^VADPT
"RTN","RORUTL18",99,0)
 . S NAME=$E($G(VADM(1)),1,9)         ; Patient name
"RTN","RORUTL18",100,0)
 . S LAST4=$E($P($G(VADM(2)),U),6,9)  ; Last 4 of SSN
"RTN","RORUTL18",101,0)
 . S XQAMSG=$$LJ^XLFSTR(NAME_" ("_$E(NAME,1)_LAST4_"):",19)
"RTN","RORUTL18",102,0)
 . S $P(XQAID,",",2)=+DFN
"RTN","RORUTL18",103,0)
 S XQAMSG=XQAMSG_$TR(MSG,"^","~")
"RTN","RORUTL18",104,0)
 S:$L(XQAMSG)>70 $E(XQAMSG,68,999)="..."
"RTN","RORUTL18",105,0)
 I $D(XQA)<10  Q:$G(DUZ)'>0  S XQA(+DUZ)=""
"RTN","RORUTL18",106,0)
 D SETUP^XQALERT
"RTN","RORUTL18",107,0)
 Q
"RTN","RORUTL18",108,0)
 ;
"RTN","RORUTL18",109,0)
 ;***** CHECKS FOR 'PENDING' STATUS
"RTN","RORUTL18",110,0)
 ;
"RTN","RORUTL18",111,0)
 ; IEN           IEN of the registry record (in file #798)
"RTN","RORUTL18",112,0)
 ;
"RTN","RORUTL18",113,0)
 ; Return Values:
"RTN","RORUTL18",114,0)
 ;        0  Non-pending
"RTN","RORUTL18",115,0)
 ;        1  Pending patient
"RTN","RORUTL18",116,0)
 ;
"RTN","RORUTL18",117,0)
PENDING(IEN) ;
"RTN","RORUTL18",118,0)
 Q ($P($G(^RORDATA(798,+IEN,0)),U,5)=4)
"RTN","RORUTL18",119,0)
 ;
"RTN","RORUTL18",120,0)
 ;***** EMULATES $QUERY WITH 'DIRECTION' PARAMETER
"RTN","RORUTL18",121,0)
 ;
"RTN","RORUTL18",122,0)
 ; NODE          Closed root of a node
"RTN","RORUTL18",123,0)
 ;
"RTN","RORUTL18",124,0)
 ; [DIR]          Direction:
"RTN","RORUTL18",125,0)
 ;                  $G(DIR)'<0  forward
"RTN","RORUTL18",126,0)
 ;                  DIR<0       backward
"RTN","RORUTL18",127,0)
 ;
"RTN","RORUTL18",128,0)
Q(NODE,DIR) ;
"RTN","RORUTL18",129,0)
 Q:$G(DIR)'<0 $Q(@NODE)
"RTN","RORUTL18",130,0)
 N I,DN,PI,TMP
"RTN","RORUTL18",131,0)
 S TMP=$QL(NODE)  Q:TMP'>0 ""
"RTN","RORUTL18",132,0)
 S I=$QS(NODE,TMP),NODE=$NA(@NODE,TMP-1)
"RTN","RORUTL18",133,0)
 S PI=""
"RTN","RORUTL18",134,0)
 F  S I=$O(@NODE@(I),-1)  Q:I=""  D  Q:PI'=""
"RTN","RORUTL18",135,0)
 . S DN=$D(@NODE@(I))
"RTN","RORUTL18",136,0)
 . I DN#10  S PI=$NA(@NODE@(I))  Q
"RTN","RORUTL18",137,0)
 . S:DN>1 PI=$$Q($NA(@NODE@(I,"")),-1)
"RTN","RORUTL18",138,0)
 Q PI
"RTN","RORUTL18",139,0)
 ;
"RTN","RORUTL18",140,0)
 ;***** COUNTS THE REGISTRY PATIENTS
"RTN","RORUTL18",141,0)
 ;
"RTN","RORUTL18",142,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","RORUTL18",143,0)
 ;               names as the subscripts and optional registry IENs
"RTN","RORUTL18",144,0)
 ;               as the values.
"RTN","RORUTL18",145,0)
 ;
"RTN","RORUTL18",146,0)
 ; [FLAGS]       Flags (can be combined)
"RTN","RORUTL18",147,0)
 ;                 A  Skip non-active patients
"RTN","RORUTL18",148,0)
 ;                 S  Skip patients marked as "Do not Send"
"RTN","RORUTL18",149,0)
 ;
"RTN","RORUTL18",150,0)
 ; [ROR8DST]     Closed root of the global node that will contain a
"RTN","RORUTL18",151,0)
 ;               list of patients. By default ($G(ROR8DST)=""), the
"RTN","RORUTL18",152,0)
 ;               ^TMP("RORUTL18",$J) global node is used internally
"RTN","RORUTL18",153,0)
 ;               (it is deleted before exiting the function).
"RTN","RORUTL18",154,0)
 ; @ROR8DST@(
"RTN","RORUTL18",155,0)
 ;  PatIEN,
"RTN","RORUTL18",156,0)
 ;    RegIEN)    Registry Record IEN
"RTN","RORUTL18",157,0)
 ;
"RTN","RORUTL18",158,0)
 ; Return Values:
"RTN","RORUTL18",159,0)
 ;       <0  Error code
"RTN","RORUTL18",160,0)
 ;        0  All provided registries are empty
"RTN","RORUTL18",161,0)
 ;       >0  Number of unique patients
"RTN","RORUTL18",162,0)
 ;
"RTN","RORUTL18",163,0)
REGPTCNT(REGLST,FLAGS,ROR8DST) ;
"RTN","RORUTL18",164,0)
 N CNT,IEN,NODE,PLKILL,PTIEN,REGIEN,REGNAME
"RTN","RORUTL18",165,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORUTL18",$J)),PLKILL=1
"RTN","RORUTL18",166,0)
 S FLAGS=$G(FLAGS),NODE=$$ROOT^DILFD(798,"",1),CNT=0
"RTN","RORUTL18",167,0)
 K @ROR8DST
"RTN","RORUTL18",168,0)
 ;--- Build a list of unique patients and count them
"RTN","RORUTL18",169,0)
 S REGNAME=""
"RTN","RORUTL18",170,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D
"RTN","RORUTL18",171,0)
 . ;--- Get the registry IEN
"RTN","RORUTL18",172,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUTL18",173,0)
 . I REGIEN'>0  D  Q:REGIEN'>0
"RTN","RORUTL18",174,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUTL18",175,0)
 . ;--- Count the registry patients
"RTN","RORUTL18",176,0)
 . S IEN=0
"RTN","RORUTL18",177,0)
 . F  S IEN=$O(@NODE@("AC",REGIEN,IEN))  Q:IEN'>0  D
"RTN","RORUTL18",178,0)
 . . I FLAGS["A"  Q:'$$ACTIVE^RORDD(IEN)
"RTN","RORUTL18",179,0)
 . . I FLAGS["S"  Q:$P($G(^RORDATA(798,IEN,2)),U,4)
"RTN","RORUTL18",180,0)
 . . S PTIEN=$$PTIEN^RORUTL01(IEN)  Q:PTIEN'>0
"RTN","RORUTL18",181,0)
 . . I '$D(@ROR8DST@(PTIEN))  D  S CNT=CNT+1
"RTN","RORUTL18",182,0)
 . . . S @ROR8DST@(PTIEN,REGIEN)=IEN
"RTN","RORUTL18",183,0)
 ;--- Cleanup
"RTN","RORUTL18",184,0)
 K:$G(PLKILL) @ROR8DST
"RTN","RORUTL18",185,0)
 Q CNT
"RTN","RORUTL18",186,0)
 ;
"RTN","RORUTL18",187,0)
 ;***** SELECTS A REGISTRY DESCRIPTOR IN THE FILE #798.1
"RTN","RORUTL18",188,0)
 ;
"RTN","RORUTL18",189,0)
 ; [.REGNAME]    Registry name is returned via this parameter
"RTN","RORUTL18",190,0)
 ;
"RTN","RORUTL18",191,0)
 ; Return Values:
"RTN","RORUTL18",192,0)
 ;       <0  Error code
"RTN","RORUTL18",193,0)
 ;       ""  Timeout, "^" entered, or an error in ^DIC
"RTN","RORUTL18",194,0)
 ;        0  There are no records in the file #798.1
"RTN","RORUTL18",195,0)
 ;       >0  IEN of the selected registry
"RTN","RORUTL18",196,0)
 ;
"RTN","RORUTL18",197,0)
SELREG(REGNAME) ;
"RTN","RORUTL18",198,0)
 N DA,DIC,DLAYGO,DTOUT,DUOUT,RC,RORBUF,RORMSG,X,Y
"RTN","RORUTL18",199,0)
 S REGNAME=""
"RTN","RORUTL18",200,0)
 ;--- If there are less than two records, do not ask a user
"RTN","RORUTL18",201,0)
 D LIST^DIC(798.1,,"@;.01E",,2,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL18",202,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL18",203,0)
 I $G(RORBUF("DILIST",0))<2  D  Q +$G(RORBUF("DILIST",2,1))
"RTN","RORUTL18",204,0)
 . S REGNAME=$G(RORBUF("DILIST","ID",1,.01))
"RTN","RORUTL18",205,0)
 ;--- Select a registry
"RTN","RORUTL18",206,0)
 S DIC=798.1,DIC(0)="AENQZ"
"RTN","RORUTL18",207,0)
 S DIC("A")="Select a Registry: "
"RTN","RORUTL18",208,0)
 D ^DIC
"RTN","RORUTL18",209,0)
 S:Y>0 REGNAME=Y(0,0)
"RTN","RORUTL18",210,0)
 Q $S($D(DTOUT)!$D(DUOUT):"",Y<0:"",1:+Y)
"RTN","RORUTL18",211,0)
 ;
"RTN","RORUTL18",212,0)
 ;***** RETURNS THE CLINIC'S STOP CODE
"RTN","RORUTL18",213,0)
 ;
"RTN","RORUTL18",214,0)
 ; CLIEN         Clinic IEN
"RTN","RORUTL18",215,0)
 ;
"RTN","RORUTL18",216,0)
 ; Return Values:
"RTN","RORUTL18",217,0)
 ;       <0  Error code
"RTN","RORUTL18",218,0)
 ;       ""  No stop code
"RTN","RORUTL18",219,0)
 ;       >0  Stop code
"RTN","RORUTL18",220,0)
 ;
"RTN","RORUTL18",221,0)
STOPCODE(CLIEN) ;
"RTN","RORUTL18",222,0)
 N RORMSG,STOP
"RTN","RORUTL18",223,0)
 I CLIEN>0  D
"RTN","RORUTL18",224,0)
 . S STOP=$$GET1^DIQ(44,CLIEN_",","#8:#1","I",,"RORMSG")
"RTN","RORUTL18",225,0)
 . S:$G(DIERR) STOP=$$DBS^RORERR("RORMSG",-99,,,44,CLIEN_",")
"RTN","RORUTL18",226,0)
 E  S STOP=""
"RTN","RORUTL18",227,0)
 Q STOP
"RTN","RORUTL19")
0^8^B2923874^B2739501
"RTN","RORUTL19",1,0)
RORUTL19 ;HCIOFO/SG - PATIENT DATA UTILITIES ; 1/29/07 9:53am
"RTN","RORUTL19",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2**;Feb 17, 2006;Build 6
"RTN","RORUTL19",3,0)
 ;
"RTN","RORUTL19",4,0)
 Q
"RTN","RORUTL19",5,0)
 ;
"RTN","RORUTL19",6,0)
 ;***** UPDATES THE LOCAL FIELDS
"RTN","RORUTL19",7,0)
 ;
"RTN","RORUTL19",8,0)
 ; IENS798       IENS of the registry record in the file #798
"RTN","RORUTL19",9,0)
 ;
"RTN","RORUTL19",10,0)
 ; .LFV          Reference to a local variable that stores the
"RTN","RORUTL19",11,0)
 ;               list of the local field values
"RTN","RORUTL19",12,0)
 ;
"RTN","RORUTL19",13,0)
 ; Return Values:
"RTN","RORUTL19",14,0)
 ;       <0  Error code
"RTN","RORUTL19",15,0)
 ;        0  Ok. No changes in local fields.
"RTN","RORUTL19",16,0)
 ;       >1  Ok. Local fields were modified.
"RTN","RORUTL19",17,0)
 ;
"RTN","RORUTL19",18,0)
UPDLFV(IENS798,LFV) ;
"RTN","RORUTL19",19,0)
 N DA,DIK,FLDIEN,IENS,IR,LFCNT,LFIEN,MOD,RC,RORFDA,RORLST,RORMSG,SCR
"RTN","RORUTL19",20,0)
 S (MOD,RC)=0
"RTN","RORUTL19",21,0)
 ;
"RTN","RORUTL19",22,0)
 S (LFCNT,LFIEN)=0
"RTN","RORUTL19",23,0)
 F  S LFIEN=$O(LFV(LFIEN))  Q:LFIEN'>0  D
"RTN","RORUTL19",24,0)
 . S LFCNT=LFCNT+1,IENS="?+"_LFCNT_","_IENS798
"RTN","RORUTL19",25,0)
 . S RORFDA(798.02,IENS,.01)=LFIEN
"RTN","RORUTL19",26,0)
 . S RORFDA(798.02,IENS,.02)=$P(LFV(LFIEN),U,5)
"RTN","RORUTL19",27,0)
 . S RORFDA(798.02,IENS,1)=$P(LFV(LFIEN),U,6)
"RTN","RORUTL19",28,0)
 ;--- Delete values of active fields that are not present in the
"RTN","RORUTL19",29,0)
 ;    LFV array (deleted by the user). Values of inactive fields
"RTN","RORUTL19",30,0)
 ;--- are always left intact.
"RTN","RORUTL19",31,0)
 S SCR="I $$LFACTIVE^RORDD01(+$G(^(0)))"
"RTN","RORUTL19",32,0)
 S IENS=","_IENS798
"RTN","RORUTL19",33,0)
 D LIST^DIC(798.02,IENS,"@;.01I",,,,,"B",SCR,,"RORLST","RORMSG")
"RTN","RORUTL19",34,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.02,IENS)
"RTN","RORUTL19",35,0)
 S DIK=$$ROOT^DILFD(798.02,IENS),DA(1)=+IENS798
"RTN","RORUTL19",36,0)
 S IR=""
"RTN","RORUTL19",37,0)
 F  S IR=$O(RORLST("DILIST","ID",IR))  Q:IR=""  D
"RTN","RORUTL19",38,0)
 . S FLDIEN=+RORLST("DILIST","ID",IR,.01)
"RTN","RORUTL19",39,0)
 . I '$D(LFV(FLDIEN))  S DA=+RORLST("DILIST",2,IR)  D ^DIK  S MOD=1
"RTN","RORUTL19",40,0)
 ;--- Store the data
"RTN","RORUTL19",41,0)
 I $D(RORFDA)>1  S MOD=1  D  Q:RC<0 RC
"RTN","RORUTL19",42,0)
 . D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORUTL19",43,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.02,IENS798)
"RTN","RORUTL19",44,0)
 ;--- Success
"RTN","RORUTL19",45,0)
 Q MOD
"VER")
8.0^22.0
"BLD",6469,6)
^2
**END**
**END**
