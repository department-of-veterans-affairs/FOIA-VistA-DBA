KIDS Distribution saved on Aug 23, 2005@15:03:17
My HealtheVet 1.0
**KIDS**:My HealtheVet 1.0^

**INSTALL NAME**
My HealtheVet 1.0
"BLD",5551,0)
My HealtheVet 1.0^My HealtheVet^0^3050823^y
"BLD",5551,1,0)
^^3^3^3050318^
"BLD",5551,1,1,0)
The is the initial release the My HealtheVet package.  It defines HL7 
"BLD",5551,1,2,0)
interfaces for supporting internet prescription refill and queries for 
"BLD",5551,1,3,0)
prescription information.
"BLD",5551,4,0)
^9.64PA^2275.3^1
"BLD",5551,4,2275.3,0)
2275.3
"BLD",5551,4,2275.3,222)
y^y^f^^n^^y^o^n
"BLD",5551,4,2275.3,223)
I 1
"BLD",5551,4,"B",2275.3,2275.3)

"BLD",5551,"ABPKG")
n
"BLD",5551,"INID")
n^n
"BLD",5551,"INIT")
POST^MHV1P0
"BLD",5551,"KRN",0)
^9.67PA^8989.52^19
"BLD",5551,"KRN",.4,0)
.4
"BLD",5551,"KRN",.401,0)
.401
"BLD",5551,"KRN",.402,0)
.402
"BLD",5551,"KRN",.403,0)
.403
"BLD",5551,"KRN",.5,0)
.5
"BLD",5551,"KRN",.84,0)
.84
"BLD",5551,"KRN",3.6,0)
3.6
"BLD",5551,"KRN",3.8,0)
3.8
"BLD",5551,"KRN",9.2,0)
9.2
"BLD",5551,"KRN",9.8,0)
9.8
"BLD",5551,"KRN",9.8,"NM",0)
^9.68A^18^13
"BLD",5551,"KRN",9.8,"NM",1,0)
MHV7R1^^0^B39959689
"BLD",5551,"KRN",9.8,"NM",2,0)
MHV7R2^^0^B44015238
"BLD",5551,"KRN",9.8,"NM",3,0)
MHV7B1^^0^B10417792
"BLD",5551,"KRN",9.8,"NM",4,0)
MHV7B2^^0^B19305881
"BLD",5551,"KRN",9.8,"NM",5,0)
MHV7B1B^^0^B16923322
"BLD",5551,"KRN",9.8,"NM",7,0)
MHV7T^^0^B13277198
"BLD",5551,"KRN",9.8,"NM",9,0)
MHVXRX^^0^B12216271
"BLD",5551,"KRN",9.8,"NM",11,0)
MHV7B0^^0^B2839283
"BLD",5551,"KRN",9.8,"NM",14,0)
MHVXRXR^^0^B1479238
"BLD",5551,"KRN",9.8,"NM",15,0)
MHVRQI^^0^B5569720
"BLD",5551,"KRN",9.8,"NM",16,0)
MHV1P0^^0^B1426345
"BLD",5551,"KRN",9.8,"NM",17,0)
MHV7U^^0^B62743685
"BLD",5551,"KRN",9.8,"NM",18,0)
MHVU1^^0^B3571161
"BLD",5551,"KRN",9.8,"NM","B","MHV1P0",16)

"BLD",5551,"KRN",9.8,"NM","B","MHV7B0",11)

"BLD",5551,"KRN",9.8,"NM","B","MHV7B1",3)

"BLD",5551,"KRN",9.8,"NM","B","MHV7B1B",5)

"BLD",5551,"KRN",9.8,"NM","B","MHV7B2",4)

"BLD",5551,"KRN",9.8,"NM","B","MHV7R1",1)

"BLD",5551,"KRN",9.8,"NM","B","MHV7R2",2)

"BLD",5551,"KRN",9.8,"NM","B","MHV7T",7)

"BLD",5551,"KRN",9.8,"NM","B","MHV7U",17)

"BLD",5551,"KRN",9.8,"NM","B","MHVRQI",15)

"BLD",5551,"KRN",9.8,"NM","B","MHVU1",18)

"BLD",5551,"KRN",9.8,"NM","B","MHVXRX",9)

"BLD",5551,"KRN",9.8,"NM","B","MHVXRXR",14)

"BLD",5551,"KRN",19,0)
19
"BLD",5551,"KRN",19.1,0)
19.1
"BLD",5551,"KRN",101,0)
101
"BLD",5551,"KRN",101,"NM",0)
^9.68A^10^6
"BLD",5551,"KRN",101,"NM",1,0)
MHV OMP-O09 Event Driver^^0
"BLD",5551,"KRN",101,"NM",2,0)
MHV OMP-O09 Subscriber^^0
"BLD",5551,"KRN",101,"NM",5,0)
MHV QBP-Q13 Event Driver^^0
"BLD",5551,"KRN",101,"NM",6,0)
MHV QBP-Q13 Subscriber^^0
"BLD",5551,"KRN",101,"NM",9,0)
MHV MFN-Z01 Event Driver^^0
"BLD",5551,"KRN",101,"NM",10,0)
MHV MFN-Z01 Subscriber^^0
"BLD",5551,"KRN",101,"NM","B","MHV MFN-Z01 Event Driver",9)

"BLD",5551,"KRN",101,"NM","B","MHV MFN-Z01 Subscriber",10)

"BLD",5551,"KRN",101,"NM","B","MHV OMP-O09 Event Driver",1)

"BLD",5551,"KRN",101,"NM","B","MHV OMP-O09 Subscriber",2)

"BLD",5551,"KRN",101,"NM","B","MHV QBP-Q13 Event Driver",5)

"BLD",5551,"KRN",101,"NM","B","MHV QBP-Q13 Subscriber",6)

"BLD",5551,"KRN",409.61,0)
409.61
"BLD",5551,"KRN",771,0)
771
"BLD",5551,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",5551,"KRN",771,"NM",1,0)
MHV EVAULT^^0
"BLD",5551,"KRN",771,"NM",2,0)
MHV VISTA^^0
"BLD",5551,"KRN",771,"NM","B","MHV EVAULT",1)

"BLD",5551,"KRN",771,"NM","B","MHV VISTA",2)

"BLD",5551,"KRN",870,0)
870
"BLD",5551,"KRN",8989.51,0)
8989.51
"BLD",5551,"KRN",8989.52,0)
8989.52
"BLD",5551,"KRN",8994,0)
8994
"BLD",5551,"KRN","B",.4,.4)

"BLD",5551,"KRN","B",.401,.401)

"BLD",5551,"KRN","B",.402,.402)

"BLD",5551,"KRN","B",.403,.403)

"BLD",5551,"KRN","B",.5,.5)

"BLD",5551,"KRN","B",.84,.84)

"BLD",5551,"KRN","B",3.6,3.6)

"BLD",5551,"KRN","B",3.8,3.8)

"BLD",5551,"KRN","B",9.2,9.2)

"BLD",5551,"KRN","B",9.8,9.8)

"BLD",5551,"KRN","B",19,19)

"BLD",5551,"KRN","B",19.1,19.1)

"BLD",5551,"KRN","B",101,101)

"BLD",5551,"KRN","B",409.61,409.61)

"BLD",5551,"KRN","B",771,771)

"BLD",5551,"KRN","B",870,870)

"BLD",5551,"KRN","B",8989.51,8989.51)

"BLD",5551,"KRN","B",8989.52,8989.52)

"BLD",5551,"KRN","B",8994,8994)

"BLD",5551,"PRE")
MHV1P0
"BLD",5551,"QUES",0)
^9.62^^
"BLD",5551,"REQB",0)
^9.611^2^2
"BLD",5551,"REQB",1,0)
PSO*7.0*204^2
"BLD",5551,"REQB",2,0)
XU*8.0*284^2
"BLD",5551,"REQB","B","PSO*7.0*204",1)

"BLD",5551,"REQB","B","XU*8.0*284",2)

"DATA",2275.3,3,0)
PRESCRIPTIONS^3^0^1^EXTRACT~MHVXRX
"DATA",2275.3,3,1,0)
^2275.31^1^1
"DATA",2275.3,3,1,1,0)
Prescriptions
"DATA",2275.3,20,0)
PRESCRIPTION REFILL^20^0^1^REQUEST~MHVXRXR
"DATA",2275.3,20,1,0)
^2275.31^1^1
"DATA",2275.3,20,1,1,0)
RxRefill
"DATA",2275.3,21,0)
PRESCRIPTION PROFILE^21^0^1^PROFILE~MHVXRX
"DATA",2275.3,21,1,0)
^2275.31^1^1
"DATA",2275.3,21,1,1,0)
RxList
"FIA",2275.3)
MHV REQUEST TYPE
"FIA",2275.3,0)
^MHV(2275.3,
"FIA",2275.3,0,0)
2275.3
"FIA",2275.3,0,1)
y^y^f^^n^^y^o^n
"FIA",2275.3,0,10)
I 1
"FIA",2275.3,0,11)

"FIA",2275.3,0,"RLRO")

"FIA",2275.3,0,"VR")
1.0^My HealtheVet
"FIA",2275.3,2275.3)
0
"FIA",2275.3,2275.31)
0
"INIT")
POST^MHV1P0
"KRN",101,5280,-1)
0^9
"KRN",101,5280,0)
MHV MFN-Z01 Event Driver^^^E^^^^^^^^
"KRN",101,5280,770)
MHV VISTA^^MFN^Z01^37^^^AL^NE^2.4^
"KRN",101,5280,775,0)
^101.0775PA^1^1
"KRN",101,5280,775,1,0)
5281
"KRN",101,5280,775,1,"^")
MHV MFN-Z01 Subscriber
"KRN",101,5281,-1)
0^10
"KRN",101,5281,0)
MHV MFN-Z01 Subscriber^^^S^^^^^^^^
"KRN",101,5281,770)
^MHV EVAULT^^Z01^^^^^^^MFN
"KRN",101,5281,773)
1^1^0
"KRN",101,5282,-1)
0^5
"KRN",101,5282,0)
MHV QBP-Q13 Event Driver^^^E^^^^^^^^
"KRN",101,5282,770)
MHV EVAULT^^QBP^Q13^165^D^^^^2.4^
"KRN",101,5282,775,0)
^101.0775PA^1^1
"KRN",101,5282,775,1,0)
5283
"KRN",101,5282,775,1,"^")
MHV QBP-Q13 Subscriber
"KRN",101,5283,-1)
0^6
"KRN",101,5283,0)
MHV QBP-Q13 Subscriber^^^S^^^^^^^^
"KRN",101,5283,770)
^MHV VISTA^^K13^^^^^^^RTB
"KRN",101,5283,771)
D QBPQ13^MHV7R1
"KRN",101,5283,773)
1^1^0
"KRN",101,5284,-1)
0^1
"KRN",101,5284,0)
MHV OMP-O09 Event Driver^^^E^^^^^^^^
"KRN",101,5284,770)
MHV EVAULT^^OMP^O09^154^D^^^^2.4^
"KRN",101,5284,775,0)
^101.0775PA^1^1
"KRN",101,5284,775,1,0)
5285
"KRN",101,5284,775,1,"^")
MHV OMP-O09 Subscriber
"KRN",101,5285,-1)
0^2
"KRN",101,5285,0)
MHV OMP-O09 Subscriber^^^S^^^^^^^^
"KRN",101,5285,770)
^MHV VISTA^^O10^^^^^^^ORP
"KRN",101,5285,771)
D OMPO09^MHV7R2
"KRN",101,5285,773)
1^1^0
"KRN",771,131,-1)
0^2
"KRN",771,131,0)
MHV VISTA^a^^^^^US
"KRN",771,131,"EC")
^~\&
"KRN",771,131,"FS")
|
"KRN",771,132,-1)
0^1
"KRN",771,132,0)
MHV EVAULT^a^^^^^US
"KRN",771,132,"EC")
^~\&
"KRN",771,132,"FS")
|
"MBREQ")
0
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",558,-1)
1^1
"PKG",558,0)
My HealtheVet^MHV^Support for My HealtheVet web site.
"PKG",558,1,0)
^9.41A^2^2^3050414^^^^
"PKG",558,1,1,0)
This package supports the My HealtheVet website.  It exposes interfaces 
"PKG",558,1,2,0)
for extracting patient data, supporting prescription refill, and more.
"PKG",558,7)
^^I
"PKG",558,20,0)
^9.402P^^
"PKG",558,22,0)
^9.49I^1^1
"PKG",558,22,1,0)
1.0^3050823^3050818^10000000041
"PKG",558,22,1,1,0)
^^3^3^3050823
"PKG",558,22,1,1,1,0)
The is the initial release the My HealtheVet package.  It defines HL7 
"PKG",558,22,1,1,2,0)
interfaces for supporting internet prescription refill and queries for 
"PKG",558,22,1,1,3,0)
prescription information.
"PKG",558,22,1,"PAH",0)
^9.4901^^0
"PKG",558,"DEV")
Gary Monger/OI Silver Spring
"PKG",558,"VERSION")
1.0
"PRE")
MHV1P0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","MHV1P0")
0^16^B1426345
"RTN","MHV1P0",1,0)
MHV1P0 ;WAS/GPM - My HealtheVet Install Utility Routine ; [8/23/05 2:31pm]
"RTN","MHV1P0",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV1P0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV1P0",4,0)
 ;
"RTN","MHV1P0",5,0)
 ;  Integration Agreements:
"RTN","MHV1P0",6,0)
 ;         3779 : Direct read of "B" x-ref of file 4.2 (DOMAIN)
"RTN","MHV1P0",7,0)
 ;        10141 : BMES^XPDUTL, XPDQUIT
"RTN","MHV1P0",8,0)
 ;
"RTN","MHV1P0",9,0)
ENV ;
"RTN","MHV1P0",10,0)
 N EVAULT
"RTN","MHV1P0",11,0)
 ; Check for the proper domain entry before proceeding
"RTN","MHV1P0",12,0)
 S EVAULT=$$FIND1^DIC(4.2,,"QX","VAMHVWEB1.AAC.VA.GOV","B")
"RTN","MHV1P0",13,0)
 I EVAULT<1 D BMES^XPDUTL("       *** Patch: XM*DBA*159 is required for this package ***") S XPDQUIT=1 Q
"RTN","MHV1P0",14,0)
 Q
"RTN","MHV1P0",15,0)
 ;
"RTN","MHV1P0",16,0)
POST ;
"RTN","MHV1P0",17,0)
 N ADM
"RTN","MHV1P0",18,0)
 D SETADM^MHVU1(.ADM)
"RTN","MHV1P0",19,0)
 I ADM("SYSTEM TYPE")'="P" Q
"RTN","MHV1P0",20,0)
 D NOTIFY^MHVU1(.ADM)
"RTN","MHV1P0",21,0)
 D BMES^XPDUTL("       *** Installation message sent to My HealtheVet Server")
"RTN","MHV1P0",22,0)
 Q
"RTN","MHV1P0",23,0)
 ;
"RTN","MHV7B0")
0^11^B2839283
"RTN","MHV7B0",1,0)
MHV7B0 ;WAS/GPM - HL7 MESSAGE BUILDER FOR MFN^Z01 ; [8/22/05 6:21pm]
"RTN","MHV7B0",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7B0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B0",4,0)
 ;
"RTN","MHV7B0",5,0)
MFNZ01(MSGROOT,ADM,ERR,DATAROOT,HL) ;Build MFN^Z01
"RTN","MHV7B0",6,0)
 ;
"RTN","MHV7B0",7,0)
 ;  Input:
"RTN","MHV7B0",8,0)
 ;   MSGROOT - (required) Global root of message
"RTN","MHV7B0",9,0)
 ;       ADM - (required) Array of administrative data
"RTN","MHV7B0",10,0)
 ;       ERR - (Not used) For compatibility with MHV7T
"RTN","MHV7B0",11,0)
 ;  DATAROOT - (Not used) For compatibility with MHV7T
"RTN","MHV7B0",12,0)
 ;        HL - (required) Array of HL package variables
"RTN","MHV7B0",13,0)
 ;  Output:
"RTN","MHV7B0",14,0)
 ;       MFN^Z01 message in MSGROOT
"RTN","MHV7B0",15,0)
 ;          MSH,MFI,MFE,ZHV
"RTN","MHV7B0",16,0)
 ;
"RTN","MHV7B0",17,0)
 N CNT
"RTN","MHV7B0",18,0)
 S CNT=0
"RTN","MHV7B0",19,0)
 K @MSGROOT
"RTN","MHV7B0",20,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$MFI(.HL)
"RTN","MHV7B0",21,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$MFE(.ADM,.HL)
"RTN","MHV7B0",22,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$ZHV(.ADM,.HL)
"RTN","MHV7B0",23,0)
 Q
"RTN","MHV7B0",24,0)
 ;
"RTN","MHV7B0",25,0)
MFI(HL) ;build MFI segment
"RTN","MHV7B0",26,0)
 N MFI
"RTN","MHV7B0",27,0)
 S MFI(0)="MFI"
"RTN","MHV7B0",28,0)
 S MFI(1,1,1)="MHV"
"RTN","MHV7B0",29,0)
 S MFI(3)="UPD"
"RTN","MHV7B0",30,0)
 S MFI(6)="NE"
"RTN","MHV7B0",31,0)
 Q $$BLDSEG^MHV7U(.MFI,.HL)
"RTN","MHV7B0",32,0)
 ;
"RTN","MHV7B0",33,0)
MFE(ADM,HL) ;build MFE segment
"RTN","MHV7B0",34,0)
 N MFE
"RTN","MHV7B0",35,0)
 S MFE(0)="MFE"
"RTN","MHV7B0",36,0)
 S MFE(1)="MUP"
"RTN","MHV7B0",37,0)
 S MFE(4)=$G(ADM("SITE NUMBER"))
"RTN","MHV7B0",38,0)
 S MFE(5)="CE"
"RTN","MHV7B0",39,0)
 Q $$BLDSEG^MHV7U(.MFE,.HL)
"RTN","MHV7B0",40,0)
 ;
"RTN","MHV7B0",41,0)
ZHV(ADM,HL) ;build ZHV segment
"RTN","MHV7B0",42,0)
 N ZHV
"RTN","MHV7B0",43,0)
 S ZHV(0)="ZHV"
"RTN","MHV7B0",44,0)
 S ZHV(1,1,1)=$G(ADM("SITE NUMBER"))
"RTN","MHV7B0",45,0)
 S ZHV(1,1,2)=$$ESCAPE^MHV7U($G(ADM("SITE NAME")),.HL)
"RTN","MHV7B0",46,0)
 S ZHV(2)=$G(ADM("DOMAIN"))
"RTN","MHV7B0",47,0)
 S ZHV(3)=$G(ADM("IP ADDRESS"))
"RTN","MHV7B0",48,0)
 S ZHV(4)=$G(ADM("HL7 LISTENER PORT"))
"RTN","MHV7B0",49,0)
 S ZHV(5)=$G(ADM("RPC BROKER PORT"))
"RTN","MHV7B0",50,0)
 S ZHV(6,1,1)=$G(ADM("VERSION"))
"RTN","MHV7B0",51,0)
 S ZHV(7)=$$ESCAPE^MHV7U($G(ADM("PATCH NUMBER")),.HL)
"RTN","MHV7B0",52,0)
 S ZHV(8)=$G(ADM("SYSTEM TYPE"))
"RTN","MHV7B0",53,0)
 Q $$BLDSEG^MHV7U(.ZHV,.HL)
"RTN","MHV7B0",54,0)
 ;
"RTN","MHV7B1")
0^3^B10417792
"RTN","MHV7B1",1,0)
MHV7B1 ;WAS/GPM - HL7 message builder RTB^K13 ; [8/22/05 6:18pm]
"RTN","MHV7B1",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7B1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1",4,0)
 ;
"RTN","MHV7B1",5,0)
 Q
"RTN","MHV7B1",6,0)
 ;
"RTN","MHV7B1",7,0)
RTBK13(MSGROOT,QRY,ERR,DATAROOT,HL) ; Build query response
"RTN","MHV7B1",8,0)
 ;
"RTN","MHV7B1",9,0)
 ;  Populates the array pointed to by MSGROOT with an RTB^K13 query
"RTN","MHV7B1",10,0)
 ; response message by calling the appropriate segment builders based
"RTN","MHV7B1",11,0)
 ; on the type of response ACK/Data or NAK.  Extracted data pointed to
"RTN","MHV7B1",12,0)
 ; by DATAROOT, errors, hit counts, and query information are user to
"RTN","MHV7B1",13,0)
 ; buld the segments.
"RTN","MHV7B1",14,0)
 ; An error number in ERR^4 indicates a NAK is needed.
"RTN","MHV7B1",15,0)
 ; DATAROOT being null indicates a dataless ACK (testing purposes).
"RTN","MHV7B1",16,0)
 ;  Multiple types of RDF/RDT are supported based on the type of
"RTN","MHV7B1",17,0)
 ; data in the response, indicated by QRY("TYPE").
"RTN","MHV7B1",18,0)
 ;
"RTN","MHV7B1",19,0)
 ;  Input:
"RTN","MHV7B1",20,0)
 ;     MSGROOT - Global root of message
"RTN","MHV7B1",21,0)
 ;         QRY - Query parameters
"RTN","MHV7B1",22,0)
 ;             QRY("TYPE") - Request type number
"RTN","MHV7B1",23,0)
 ;             QRY("MID") - original message control ID
"RTN","MHV7B1",24,0)
 ;         ERR - Caret delimited error string
"RTN","MHV7B1",25,0)
 ;               segment^sequence^field^code^ACK type^error text
"RTN","MHV7B1",26,0)
 ;    DATAROOT - Global root of data array
"RTN","MHV7B1",27,0)
 ;          HL - HL7 package array variable
"RTN","MHV7B1",28,0)
 ;
"RTN","MHV7B1",29,0)
 ;  Output: RTB^K13 message in MSGROOT
"RTN","MHV7B1",30,0)
 ;
"RTN","MHV7B1",31,0)
 N CNT,RDT,HIT
"RTN","MHV7B1",32,0)
 S HIT=""
"RTN","MHV7B1",33,0)
 I DATAROOT'="" S HIT=$G(@DATAROOT)
"RTN","MHV7B1",34,0)
 I HIT="" S HIT=0
"RTN","MHV7B1",35,0)
 S HIT=HIT_"^"_HIT_"^0"
"RTN","MHV7B1",36,0)
 K @MSGROOT
"RTN","MHV7B1",37,0)
 S CNT=1,@MSGROOT@(CNT)=$$MSA($G(QRY("MID")),ERR,.HL)
"RTN","MHV7B1",38,0)
 I $P(ERR,"^",4) S CNT=CNT+1,HIT="0^0^0",@MSGROOT@(CNT)=$$ERR(ERR,.HL)
"RTN","MHV7B1",39,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$QAK(.QRY,ERR,HIT,.HL)
"RTN","MHV7B1",40,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$QPD(.QRY,.HL)
"RTN","MHV7B1",41,0)
 Q:$P(ERR,"^",4)
"RTN","MHV7B1",42,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$RDF(QRY("TYPE"),.HL)
"RTN","MHV7B1",43,0)
 Q:DATAROOT=""
"RTN","MHV7B1",44,0)
 Q:@DATAROOT<1
"RTN","MHV7B1",45,0)
 D RDT(MSGROOT,QRY("TYPE"),DATAROOT,.CNT,.HL)
"RTN","MHV7B1",46,0)
 Q
"RTN","MHV7B1",47,0)
 ;
"RTN","MHV7B1",48,0)
MSA(MID,ERROR,HL) ;build MSA segment
"RTN","MHV7B1",49,0)
 N MSA,ACK
"RTN","MHV7B1",50,0)
 S ACK=$P(ERROR,"^",5)
"RTN","MHV7B1",51,0)
 I ACK="" S ACK="AA"
"RTN","MHV7B1",52,0)
 S MSA(0)="MSA"
"RTN","MHV7B1",53,0)
 S MSA(1)=ACK                ;ACK code
"RTN","MHV7B1",54,0)
 S MSA(2)=MID                ;message control ID
"RTN","MHV7B1",55,0)
 S MSA(3)=$$ESCAPE^MHV7U($P(ERROR,"^",6),.HL)  ;text message
"RTN","MHV7B1",56,0)
 Q $$BLDSEG^MHV7U(.MSA,.HL)
"RTN","MHV7B1",57,0)
 ;
"RTN","MHV7B1",58,0)
ERR(ERROR,HL) ;build ERR segment
"RTN","MHV7B1",59,0)
 N ERR
"RTN","MHV7B1",60,0)
 S ERR(0)="ERR"
"RTN","MHV7B1",61,0)
 S ERR(1,1,1)=$P(ERROR,"^",1)           ;segment
"RTN","MHV7B1",62,0)
 S ERR(1,1,2)=$P(ERROR,"^",2)           ;sequence
"RTN","MHV7B1",63,0)
 S ERR(1,1,3)=$P(ERROR,"^",3)           ;field
"RTN","MHV7B1",64,0)
 S ERR(1,1,4,1)=$P(ERROR,"^",4)         ;code
"RTN","MHV7B1",65,0)
 S ERR(1,1,4,2)=$$ESCAPE^MHV7U($P(ERROR,"^",6),.HL) ;text
"RTN","MHV7B1",66,0)
 Q $$BLDSEG^MHV7U(.ERR,.HL)
"RTN","MHV7B1",67,0)
 ;
"RTN","MHV7B1",68,0)
QAK(QRY,ERROR,HIT,HL) ;build QAK segment
"RTN","MHV7B1",69,0)
 N QAK,STATUS
"RTN","MHV7B1",70,0)
 S STATUS=$P(ERROR,"^",5)
"RTN","MHV7B1",71,0)
 I STATUS="" S STATUS="OK"
"RTN","MHV7B1",72,0)
 I STATUS="OK",HIT<1 S STATUS="NF"
"RTN","MHV7B1",73,0)
 S QAK(0)="QAK"
"RTN","MHV7B1",74,0)
 S QAK(1)=QRY("QPD",2)     ;query tag
"RTN","MHV7B1",75,0)
 S QAK(2)=STATUS           ;query response status
"RTN","MHV7B1",76,0)
 M QAK(3)=QRY("QPD",1)     ;message query name
"RTN","MHV7B1",77,0)
 S QAK(4)=$P(HIT,"^",1)    ;hit count total
"RTN","MHV7B1",78,0)
 S QAK(5)=$P(HIT,"^",2)    ;hits this payload
"RTN","MHV7B1",79,0)
 S QAK(6)=$P(HIT,"^",3)    ;hits remaining
"RTN","MHV7B1",80,0)
 Q $$BLDSEG^MHV7U(.QAK,.HL)
"RTN","MHV7B1",81,0)
 ;
"RTN","MHV7B1",82,0)
QPD(QRY,HL) ;build QPD segment
"RTN","MHV7B1",83,0)
 N QPD
"RTN","MHV7B1",84,0)
 M QPD=QRY("QPD")
"RTN","MHV7B1",85,0)
 S QPD(0)="QPD"
"RTN","MHV7B1",86,0)
 S QPD(7)=$G(QRY("ICN"))   ;ICN
"RTN","MHV7B1",87,0)
 S QPD(8)=$G(QRY("DFN"))   ;DFN
"RTN","MHV7B1",88,0)
 Q $$BLDSEG^MHV7U(.QPD,.HL)
"RTN","MHV7B1",89,0)
 ;
"RTN","MHV7B1",90,0)
RDF(REQTYPE,HL) ; build RDF segment
"RTN","MHV7B1",91,0)
 N RTN
"RTN","MHV7B1",92,0)
 S RTN=$$RTN(REQTYPE)
"RTN","MHV7B1",93,0)
 Q:RTN="" "RDF"
"RTN","MHV7B1",94,0)
 Q @("$$RDF^"_RTN_"(.HL)")
"RTN","MHV7B1",95,0)
 ;
"RTN","MHV7B1",96,0)
RDT(MSGROOT,REQTYPE,DATAROOT,CNT,HL) ; Build RDT segments
"RTN","MHV7B1",97,0)
 N RTN
"RTN","MHV7B1",98,0)
 S RTN=$$RTN(REQTYPE)
"RTN","MHV7B1",99,0)
 Q:RTN=""
"RTN","MHV7B1",100,0)
 D @("RDT^"_RTN_"(MSGROOT,DATAROOT,.CNT,.HL)")
"RTN","MHV7B1",101,0)
 Q
"RTN","MHV7B1",102,0)
 ;
"RTN","MHV7B1",103,0)
RTN(REQTYPE) ;
"RTN","MHV7B1",104,0)
 N RDEF
"RTN","MHV7B1",105,0)
 S RDEF(3)="MHV7B1B"
"RTN","MHV7B1",106,0)
 S RDEF(21)="MHV7B1B"
"RTN","MHV7B1",107,0)
 Q $G(RDEF(REQTYPE))
"RTN","MHV7B1",108,0)
 ;
"RTN","MHV7B1B")
0^5^B16923322
"RTN","MHV7B1B",1,0)
MHV7B1B ;WAS/GPM - HL7 message builder RTB^K13 Rx Profile ; [8/22/05 11:45pm]
"RTN","MHV7B1B",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7B1B",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1B",4,0)
 ;
"RTN","MHV7B1B",5,0)
 Q
"RTN","MHV7B1B",6,0)
 ;
"RTN","MHV7B1B",7,0)
RDF(HL) ;  Build RDF segment for Rx Profile data
"RTN","MHV7B1B",8,0)
 N RDF
"RTN","MHV7B1B",9,0)
 S RDF(0)="RDF"
"RTN","MHV7B1B",10,0)
 S RDF(1)=20
"RTN","MHV7B1B",11,0)
 S RDF(2,1,1)="Prescription Number",RDF(2,1,2)="ST",RDF(2,1,3)=20
"RTN","MHV7B1B",12,0)
 S RDF(2,2,1)="IEN",RDF(2,2,2)="NM",RDF(2,2,3)=30
"RTN","MHV7B1B",13,0)
 S RDF(2,3,1)="Drug Name",RDF(2,3,2)="ST",RDF(2,3,3)=40
"RTN","MHV7B1B",14,0)
 S RDF(2,4,1)="Issue Date/Time",RDF(2,4,2)="TS",RDF(2,4,3)=26
"RTN","MHV7B1B",15,0)
 S RDF(2,5,1)="Last Fill Date",RDF(2,5,2)="TS",RDF(2,5,3)=26
"RTN","MHV7B1B",16,0)
 S RDF(2,6,1)="Release Date/Time",RDF(2,6,2)="TS",RDF(2,6,3)=26
"RTN","MHV7B1B",17,0)
 S RDF(2,7,1)="Expiration or Cancel Date",RDF(2,7,2)="TS",RDF(2,7,3)=26
"RTN","MHV7B1B",18,0)
 S RDF(2,8,1)="Status",RDF(2,8,2)="ST",RDF(2,8,3)=25
"RTN","MHV7B1B",19,0)
 S RDF(2,9,1)="Quantity",RDF(2,9,2)="NM",RDF(2,9,3)=11
"RTN","MHV7B1B",20,0)
 S RDF(2,10,1)="Days Supply",RDF(2,10,2)="NM",RDF(2,10,3)=3
"RTN","MHV7B1B",21,0)
 S RDF(2,11,1)="Number of Refills",RDF(2,11,2)="NM",RDF(2,11,3)=3
"RTN","MHV7B1B",22,0)
 S RDF(2,12,1)="Provider",RDF(2,12,2)="XCN",RDF(2,12,3)=150
"RTN","MHV7B1B",23,0)
 S RDF(2,13,1)="Placer Order Number",RDF(2,13,2)="ST",RDF(2,13,3)=30
"RTN","MHV7B1B",24,0)
 S RDF(2,14,1)="Mail/Window",RDF(2,14,2)="ST",RDF(2,14,3)=1
"RTN","MHV7B1B",25,0)
 S RDF(2,15,1)="Division",RDF(2,15,2)="NM",RDF(2,15,3)=3
"RTN","MHV7B1B",26,0)
 S RDF(2,16,1)="Division Name",RDF(2,16,2)="ST",RDF(2,16,3)=20
"RTN","MHV7B1B",27,0)
 S RDF(2,17,1)="MHV Request Status",RDF(2,17,2)="NM",RDF(2,17,3)=3
"RTN","MHV7B1B",28,0)
 S RDF(2,18,1)="MHV Request Status Date",RDF(2,18,2)="TS",RDF(2,18,3)=26
"RTN","MHV7B1B",29,0)
 S RDF(2,19,1)="Remarks",RDF(2,19,2)="ST",RDF(2,19,3)=75
"RTN","MHV7B1B",30,0)
 S RDF(2,20,1)="SIG",RDF(2,20,2)="TX",RDF(2,20,3)=1024
"RTN","MHV7B1B",31,0)
 Q $$BLDSEG^MHV7U(.RDF,.HL)
"RTN","MHV7B1B",32,0)
 ;
"RTN","MHV7B1B",33,0)
RDT(MSGROOT,DATAROOT,CNT,HL) ;  Build RDT segments for Rx Profile data
"RTN","MHV7B1B",34,0)
 ;
"RTN","MHV7B1B",35,0)
 ; Walks data in DATAROOT to popoulate MSGROOT with RDT segments
"RTN","MHV7B1B",36,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1B",37,0)
 ;
"RTN","MHV7B1B",38,0)
 ;  Integration Agreements:
"RTN","MHV7B1B",39,0)
 ;         3065 : $$HLNAME^XLFNAME
"RTN","MHV7B1B",40,0)
 ;
"RTN","MHV7B1B",41,0)
 ;  Input:
"RTN","MHV7B1B",42,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1B",43,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1B",44,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1B",45,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1B",46,0)
 ;
"RTN","MHV7B1B",47,0)
 ;  Output:
"RTN","MHV7B1B",48,0)
 ;           - Populated message array
"RTN","MHV7B1B",49,0)
 ;
"RTN","MHV7B1B",50,0)
 N I,RX,RX0,RXP,RXN,RXD,RDT,SIG,SEG,PIEN,NAME
"RTN","MHV7B1B",51,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1B",52,0)
 . S RX=@DATAROOT@(I)
"RTN","MHV7B1B",53,0)
 . S RX0=@DATAROOT@(I,0)
"RTN","MHV7B1B",54,0)
 . S RXP=@DATAROOT@(I,"P")
"RTN","MHV7B1B",55,0)
 . S PIEN=+RXP
"RTN","MHV7B1B",56,0)
 . S RXN=@DATAROOT@(I,"RXN")
"RTN","MHV7B1B",57,0)
 . S RXD=@DATAROOT@(I,"DIV")
"RTN","MHV7B1B",58,0)
 . K SIG M SIG=@DATAROOT@(I,"SIG")
"RTN","MHV7B1B",59,0)
 . S RDT(0)="RDT"
"RTN","MHV7B1B",60,0)
 . S RDT(1)=$P(RX,"^")                         ;Rx Number
"RTN","MHV7B1B",61,0)
 . S RDT(2)=$P(RXN,"^",9)                      ;Rx IEN
"RTN","MHV7B1B",62,0)
 . S RDT(3)=$$ESCAPE^MHV7U($P(RX,"^",2),.HL)   ;Drug Name
"RTN","MHV7B1B",63,0)
 . S RDT(4)=$$FMTHL7^XLFDT($P(RX0,"^",5))      ;Issue Date/Time
"RTN","MHV7B1B",64,0)
 . S RDT(5)=$$FMTHL7^XLFDT($P(RX0,"^",12))     ;Last Fill Date
"RTN","MHV7B1B",65,0)
 . S RDT(6)=$$FMTHL7^XLFDT($P(RXN,"^",2))      ;Release Date/Time
"RTN","MHV7B1B",66,0)
 . S RDT(7)=$$FMTHL7^XLFDT($P(RX0,"^",3))      ;Expiration/Cancel Date
"RTN","MHV7B1B",67,0)
 . S RDT(8)=$$ESCAPE^MHV7U($P(RX0,"^",6),.HL)  ;Status
"RTN","MHV7B1B",68,0)
 . S RDT(9)=$P(RX0,"^",8)                      ;Quantity
"RTN","MHV7B1B",69,0)
 . S RDT(10)=$P(RX0,"^",7)                     ;Days Supply
"RTN","MHV7B1B",70,0)
 . S RDT(11)=$P(RX0,"^",4)                     ;Number of Refills
"RTN","MHV7B1B",71,0)
 . I PIEN D
"RTN","MHV7B1B",72,0)
 .. S RDT(12,1,1)=PIEN                         ;Provider IEN
"RTN","MHV7B1B",73,0)
 .. S NAME("FILE")=200,NAME("FIELD")=.01,NAME("IENS")=PIEN_","
"RTN","MHV7B1B",74,0)
 .. S NAME=$$HLNAME^XLFNAME(.NAME,"","^")
"RTN","MHV7B1B",75,0)
 .. S RDT(12,1,2)=$$ESCAPE^MHV7U($P(NAME,"^"),.HL)     ;family
"RTN","MHV7B1B",76,0)
 .. S RDT(12,1,3)=$$ESCAPE^MHV7U($P(NAME,"^",2),.HL)   ;given
"RTN","MHV7B1B",77,0)
 .. S RDT(12,1,4)=$$ESCAPE^MHV7U($P(NAME,"^",3),.HL)   ;middle
"RTN","MHV7B1B",78,0)
 .. S RDT(12,1,5)=$$ESCAPE^MHV7U($P(NAME,"^",4),.HL)   ;suffix
"RTN","MHV7B1B",79,0)
 .. S RDT(12,1,6)=$$ESCAPE^MHV7U($P(NAME,"^",5),.HL)   ;prefix
"RTN","MHV7B1B",80,0)
 .. S RDT(12,1,7)=$$ESCAPE^MHV7U($P(NAME,"^",6),.HL)   ;degree
"RTN","MHV7B1B",81,0)
 .. Q
"RTN","MHV7B1B",82,0)
 . S RDT(13)=$$ESCAPE^MHV7U($P(RX0,"^",11),.HL)   ;Placer Order Number
"RTN","MHV7B1B",83,0)
 . S RDT(14)=$P(RXN,"^",3)                        ;Mail/Window
"RTN","MHV7B1B",84,0)
 . S RDT(15)=$P(RXD,"^")                          ;Division
"RTN","MHV7B1B",85,0)
 . S RDT(16)=$$ESCAPE^MHV7U($P(RXD,"^",2),.HL)    ;Division Name
"RTN","MHV7B1B",86,0)
 . S RDT(17)=$P(RX,"^",3)                         ;MHV status
"RTN","MHV7B1B",87,0)
 . S RDT(18)=$$FMTHL7^XLFDT($P(RX,"^",4))         ;MHV status date
"RTN","MHV7B1B",88,0)
 . S RDT(19)=$$ESCAPE^MHV7U($P(RXN,"^",4),.HL)    ;Remarks
"RTN","MHV7B1B",89,0)
 . S CNT=CNT+1
"RTN","MHV7B1B",90,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDT,.HL)
"RTN","MHV7B1B",91,0)
 . Q:'SIG(0)
"RTN","MHV7B1B",92,0)
 . K SEG
"RTN","MHV7B1B",93,0)
 . D BLDWPSEG^MHV7U(.SIG,.SEG,1024,.HL)
"RTN","MHV7B1B",94,0)
 . M @MSGROOT@(CNT)=SEG
"RTN","MHV7B1B",95,0)
 . Q
"RTN","MHV7B1B",96,0)
 Q
"RTN","MHV7B1B",97,0)
 ;
"RTN","MHV7B2")
0^4^B19305881
"RTN","MHV7B2",1,0)
MHV7B2 ;WAS/GPM - HL7 message builder ORP^O10 ; [8/22/05 11:47pm]
"RTN","MHV7B2",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7B2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B2",4,0)
 ;
"RTN","MHV7B2",5,0)
 Q
"RTN","MHV7B2",6,0)
 ;
"RTN","MHV7B2",7,0)
ORPO10(MSGROOT,REQ,ERR,DATAROOT,HL) ; Build refill request response
"RTN","MHV7B2",8,0)
 ;
"RTN","MHV7B2",9,0)
 ;  Populates the array pointed to by MSGROOT with an ORP^O10 order
"RTN","MHV7B2",10,0)
 ; response message by calling the appropriate segment builders based
"RTN","MHV7B2",11,0)
 ; on the type of response ACK or NAK.  Extracted data pointed to
"RTN","MHV7B2",12,0)
 ; by DATAROOT, errors, and request parameters are used to build the
"RTN","MHV7B2",13,0)
 ; segments.  An error number in ERR^4 indicates a NAK is needed.
"RTN","MHV7B2",14,0)
 ;
"RTN","MHV7B2",15,0)
 ;  Integration Agreements:
"RTN","MHV7B2",16,0)
 ;         3065 : $$HLNAME^XLFNAME
"RTN","MHV7B2",17,0)
 ;        10112 : $$SITE^VASITE
"RTN","MHV7B2",18,0)
 ;
"RTN","MHV7B2",19,0)
 ;  Input:
"RTN","MHV7B2",20,0)
 ;     MSGROOT - Global root of message
"RTN","MHV7B2",21,0)
 ;         REQ - Query parameters
"RTN","MHV7B2",22,0)
 ;             REQ("TYPE") - Request type number
"RTN","MHV7B2",23,0)
 ;             REQ("MID") - original message control ID
"RTN","MHV7B2",24,0)
 ;         ERR - Caret delimited error string
"RTN","MHV7B2",25,0)
 ;               segment^sequence^field^code^ACK type^error text
"RTN","MHV7B2",26,0)
 ;    DATAROOT - Global root of data array
"RTN","MHV7B2",27,0)
 ;          HL - HL7 package array variable
"RTN","MHV7B2",28,0)
 ;
"RTN","MHV7B2",29,0)
 ;  Output: ORP^O10 message in MSGROOT
"RTN","MHV7B2",30,0)
 ;
"RTN","MHV7B2",31,0)
 N CNT,RDT,HIT,I
"RTN","MHV7B2",32,0)
 K @MSGROOT
"RTN","MHV7B2",33,0)
 S CNT=1,@MSGROOT@(CNT)=$$MSA^MHV7B1($G(REQ("MID")),ERR,.HL)
"RTN","MHV7B2",34,0)
 I $P(ERR,"^",4) S CNT=CNT+1,@MSGROOT@(CNT)=$$ERR^MHV7B1(ERR,.HL)
"RTN","MHV7B2",35,0)
 Q:$P(ERR,"^",4)
"RTN","MHV7B2",36,0)
 S CNT=CNT+1,@MSGROOT@(CNT)=$$PID(.REQ,.HL)
"RTN","MHV7B2",37,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B2",38,0)
 . S CNT=CNT+1,@MSGROOT@(CNT)=$$ORC(@DATAROOT@(I),.HL)
"RTN","MHV7B2",39,0)
 . S CNT=CNT+1,@MSGROOT@(CNT)=$$RXE(@DATAROOT@(I),.HL)
"RTN","MHV7B2",40,0)
 . Q
"RTN","MHV7B2",41,0)
 Q
"RTN","MHV7B2",42,0)
 ;
"RTN","MHV7B2",43,0)
PID(REQ,HL) ;
"RTN","MHV7B2",44,0)
 N PID,NAME,STATION,IDCNT
"RTN","MHV7B2",45,0)
 S STATION=$P($$SITE^VASITE,"^",3)
"RTN","MHV7B2",46,0)
 S PID(0)="PID"
"RTN","MHV7B2",47,0)
 S IDCNT=0
"RTN","MHV7B2",48,0)
 I REQ("ICN")'="" D
"RTN","MHV7B2",49,0)
 . S IDCNT=IDCNT+1
"RTN","MHV7B2",50,0)
 . S PID(3,IDCNT,1)=REQ("ICN")          ;Patient ID - ICN
"RTN","MHV7B2",51,0)
 . S PID(3,IDCNT,4,1)="USVHA"           ;assigning authority ID
"RTN","MHV7B2",52,0)
 . S PID(3,IDCNT,4,3)="HL70363"         ;assigning authority type
"RTN","MHV7B2",53,0)
 . S PID(3,IDCNT,5)="NI"                ;Patient ID type
"RTN","MHV7B2",54,0)
 . S PID(3,IDCNT,6,1)="VA FACILITY ID"  ;assigning facility
"RTN","MHV7B2",55,0)
 . S PID(3,IDCNT,6,2)=STATION           ;Station number
"RTN","MHV7B2",56,0)
 . S PID(3,IDCNT,6,3)="L"               ;facility ID type
"RTN","MHV7B2",57,0)
 . Q
"RTN","MHV7B2",58,0)
 ;
"RTN","MHV7B2",59,0)
 I REQ("DFN")'="" D
"RTN","MHV7B2",60,0)
 . S IDCNT=IDCNT+1
"RTN","MHV7B2",61,0)
 . S PID(3,IDCNT,1)=REQ("DFN")          ;Patient ID - DFN
"RTN","MHV7B2",62,0)
 . S PID(3,IDCNT,4,1)="USVHA"           ;assigning authority ID
"RTN","MHV7B2",63,0)
 . S PID(3,IDCNT,4,3)="HL70363"         ;assigning authority type
"RTN","MHV7B2",64,0)
 . S PID(3,IDCNT,5)="PI"                ;Patient ID type
"RTN","MHV7B2",65,0)
 . S PID(3,IDCNT,6,1)="VA FACILITY ID"  ;assigning facility
"RTN","MHV7B2",66,0)
 . S PID(3,IDCNT,6,2)=STATION           ;Station number
"RTN","MHV7B2",67,0)
 . S PID(3,IDCNT,6,3)="L"               ;facility ID type
"RTN","MHV7B2",68,0)
 . Q
"RTN","MHV7B2",69,0)
 ;
"RTN","MHV7B2",70,0)
 I REQ("SSN")'="" D
"RTN","MHV7B2",71,0)
 . S IDCNT=IDCNT+1
"RTN","MHV7B2",72,0)
 . S PID(3,IDCNT,1)=REQ("SSN")          ;Patient ID - SSN
"RTN","MHV7B2",73,0)
 . S PID(3,IDCNT,4,1)="USSSA"           ;assigning authority ID
"RTN","MHV7B2",74,0)
 . S PID(3,IDCNT,4,3)="HL70363"         ;assigning authority type
"RTN","MHV7B2",75,0)
 . S PID(3,IDCNT,5)="SS"                ;Patient ID type
"RTN","MHV7B2",76,0)
 . S PID(3,IDCNT,6,1)="VA FACILITY ID"  ;assigning facility
"RTN","MHV7B2",77,0)
 . S PID(3,IDCNT,6,2)="200MH"           ;Station number
"RTN","MHV7B2",78,0)
 . S PID(3,IDCNT,6,3)="L"               ;facility ID type
"RTN","MHV7B2",79,0)
 . Q
"RTN","MHV7B2",80,0)
 ;
"RTN","MHV7B2",81,0)
 S NAME("FILE")=2,NAME("FIELD")=.01,NAME("IENS")=REQ("DFN")_","
"RTN","MHV7B2",82,0)
 S NAME=$$NAMEFMT^XLFNAME(.NAME)
"RTN","MHV7B2",83,0)
 S PID(5,1,1)=$$ESCAPE^MHV7U($P(NAME,"^"),.HL)    ;family
"RTN","MHV7B2",84,0)
 S PID(5,1,2)=$$ESCAPE^MHV7U($P(NAME,"^",2),.HL)  ;given
"RTN","MHV7B2",85,0)
 S PID(5,1,3)=$$ESCAPE^MHV7U($P(NAME,"^",3),.HL)  ;middle
"RTN","MHV7B2",86,0)
 S PID(5,1,4)=$$ESCAPE^MHV7U($P(NAME,"^",4),.HL)  ;suffix
"RTN","MHV7B2",87,0)
 ;
"RTN","MHV7B2",88,0)
 Q $$BLDSEG^MHV7U(.PID,.HL)
"RTN","MHV7B2",89,0)
 ;
"RTN","MHV7B2",90,0)
ORC(DATA,HL) ;build ORC segment
"RTN","MHV7B2",91,0)
 N ORC,STATUS,CONTROL
"RTN","MHV7B2",92,0)
 S STATUS=$P(DATA,"^",2)
"RTN","MHV7B2",93,0)
 S CONTROL=$S(STATUS=1:"OK",1:"UA")
"RTN","MHV7B2",94,0)
 S ORC(0)="ORC"
"RTN","MHV7B2",95,0)
 S ORC(1)=CONTROL              ;order control
"RTN","MHV7B2",96,0)
 S ORC(2)=$P(DATA,"^",3)       ;placer order number
"RTN","MHV7B2",97,0)
 S ORC(3)=$P(DATA,"^",3)       ;filler order number
"RTN","MHV7B2",98,0)
 Q $$BLDSEG^MHV7U(.ORC,.HL)
"RTN","MHV7B2",99,0)
 ;
"RTN","MHV7B2",100,0)
RXE(DATA,HL) ;build RXE segment
"RTN","MHV7B2",101,0)
 N RXE,STATUS,CONTROL
"RTN","MHV7B2",102,0)
 S STATUS=$P(DATA,"^",2)
"RTN","MHV7B2",103,0)
 S CONTROL=$S(STATUS=1:"OK",1:"UA")
"RTN","MHV7B2",104,0)
 S RXE(0)="RXE"
"RTN","MHV7B2",105,0)
 S RXE(1,1,1,1)=1              ;order quantity
"RTN","MHV7B2",106,0)
 S RXE(1,1,4,1)=$P(DATA,"^",4) ;order start time
"RTN","MHV7B2",107,0)
 S RXE(2,1,1)=CONTROL          ;give code identifier
"RTN","MHV7B2",108,0)
 S RXE(2,1,2)=STATUS           ;give code text
"RTN","MHV7B2",109,0)
 S RXE(2,1,3)="HL70119"        ;give code system
"RTN","MHV7B2",110,0)
 S RXE(3)=1                    ;give amount
"RTN","MHV7B2",111,0)
 S RXE(5)="1 refill unit"      ;give units
"RTN","MHV7B2",112,0)
 ;S RXE(7)=""                  ;division number
"RTN","MHV7B2",113,0)
 S RXE(15)=$P(DATA,"^",1)      ;prescription number
"RTN","MHV7B2",114,0)
 Q $$BLDSEG^MHV7U(.RXE,.HL)
"RTN","MHV7B2",115,0)
 ;
"RTN","MHV7R1")
0^1^B39959689
"RTN","MHV7R1",1,0)
MHV7R1 ;WAS/GPM - HL7 RECEIVER FOR QBP^Q13 ; [8/22/05 11:48pm]
"RTN","MHV7R1",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7R1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R1",4,0)
 ;
"RTN","MHV7R1",5,0)
QBPQ13 ;Process QBP^Q13 messages from the MHV QBP-Q13 Subsciber protocol
"RTN","MHV7R1",6,0)
 ;
"RTN","MHV7R1",7,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R1",8,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R1",9,0)
 ; if they are missing.
"RTN","MHV7R1",10,0)
 ;
"RTN","MHV7R1",11,0)
 ;  The message will be checked to see if it is a valid QBP^Q13 query.
"RTN","MHV7R1",12,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R1",13,0)
 ; immedeiate mode or synchronous query, the realtime request manager
"RTN","MHV7R1",14,0)
 ; is called to handle the query.
"RTN","MHV7R1",15,0)
 ; In the future deferred mode queries may be filed in a database for 
"RTN","MHV7R1",16,0)
 ; later processing, or transmission.
"RTN","MHV7R1",17,0)
 ;
"RTN","MHV7R1",18,0)
 ;  Integration Agreements:
"RTN","MHV7R1",19,0)
 ;        10103 : $$HL7TFM^XLFDT
"RTN","MHV7R1",20,0)
 ;
"RTN","MHV7R1",21,0)
 ;  Input:
"RTN","MHV7R1",22,0)
 ;          HL7 environment variables
"RTN","MHV7R1",23,0)
 ;
"RTN","MHV7R1",24,0)
 ; Output:
"RTN","MHV7R1",25,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R1",26,0)
 ;
"RTN","MHV7R1",27,0)
 N MSGROOT,QRY,XMT,ERR
"RTN","MHV7R1",28,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R1",29,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R1",30,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R1",31,0)
 N MHV7MSG
"RTN","MHV7R1",32,0)
 S ^XTMP("MHV7LOG")=1                ;Temporary - turns on logging
"RTN","MHV7R1",33,0)
 D LOG^MHV7U("QBP-Q13 RECEIVER","","S",1)
"RTN","MHV7R1",34,0)
 ;
"RTN","MHV7R1",35,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R1",36,0)
 D LOG^MHV7U("LOAD",MSGROOT,"I",0)
"RTN","MHV7R1",37,0)
 ;
"RTN","MHV7R1",38,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R1",39,0)
 D LOG^MHV7U("PARSE",MSGROOT,"I",0)
"RTN","MHV7R1",40,0)
 ;
"RTN","MHV7R1",41,0)
 I '$$VALIDQ13(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R1",42,0)
 . D LOG^MHV7U("MSG CHECK","INVALID^"_ERR,"S",0)
"RTN","MHV7R1",43,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R1",44,0)
 D LOG^MHV7U("MSG CHECK","VALID","S",0)
"RTN","MHV7R1",45,0)
 ;
"RTN","MHV7R1",46,0)
 ; Immediate Mode
"RTN","MHV7R1",47,0)
 ; Only real time synchronous calls are supported at this time.
"RTN","MHV7R1",48,0)
 I QRY("PRI")="I" D REALTIME^MHVRQI(.QRY,.XMT,.HL) Q
"RTN","MHV7R1",49,0)
 ;
"RTN","MHV7R1",50,0)
 Q
"RTN","MHV7R1",51,0)
 ;
"RTN","MHV7R1",52,0)
VALIDQ13(MSG,QRY,XMT,ERR) ;Parse and Validate message
"RTN","MHV7R1",53,0)
 ;
"RTN","MHV7R1",54,0)
 ;  QBP^Q13 messages must contain QPD and RCP segments
"RTN","MHV7R1",55,0)
 ;          RDF segments are optional but not processed
"RTN","MHV7R1",56,0)
 ;  The following sequences are required
"RTN","MHV7R1",57,0)
 ;     PID(3) - Patient ID
"RTN","MHV7R1",58,0)
 ;     QPD(3) - Request ID
"RTN","MHV7R1",59,0)
 ;     QPD(4) - Subject Area
"RTN","MHV7R1",60,0)
 ;     RCP(1) - priority
"RTN","MHV7R1",61,0)
 ;  The following sequences are optional
"RTN","MHV7R1",62,0)
 ;     QPD(5) - From Date
"RTN","MHV7R1",63,0)
 ;     QPD(6) - To Date
"RTN","MHV7R1",64,0)
 ;     QPD(7) - ICN
"RTN","MHV7R1",65,0)
 ;     QPD(8) - DFN
"RTN","MHV7R1",66,0)
 ;
"RTN","MHV7R1",67,0)
 ;  ERR = segment^sequence^field^code^ACK type^error text
"RTN","MHV7R1",68,0)
 ;
"RTN","MHV7R1",69,0)
 N MSH,PID,RDF,RXE,QPD,RCP,REQID,ICN,REQTYPE,FROMDT,TODT,DFN,PRI,REQTIEN,REQT0,QTAG,QNAME,SEGTYPE,CNT,SSN,FAMILY,GIVEN,MIDDLE,SUFFIX,SEGTYPE,CNT,OCNT,RXNUM,I,ID,TYPE
"RTN","MHV7R1",70,0)
 S ERR=""
"RTN","MHV7R1",71,0)
 K QRY,XMT
"RTN","MHV7R1",72,0)
 ;
"RTN","MHV7R1",73,0)
 ;Set response control defaults
"RTN","MHV7R1",74,0)
 S XMT("PROTOCOL")="MHV RTB-K13 Event Driver"   ;Response protocol
"RTN","MHV7R1",75,0)
 S XMT("BUILDER")="RTBK13^MHV7B1"               ;Response builder
"RTN","MHV7R1",76,0)
 S XMT("MODE")="D"                               ;Response mode
"RTN","MHV7R1",77,0)
 I $G(HL("APAT"))="" S XMT("MODE")="I"           ;Immediate mode
"RTN","MHV7R1",78,0)
 S XMT("HLMTIENS")=HLMTIENS                      ;Message IEN
"RTN","MHV7R1",79,0)
 S QRY("MID")=""                                 ;Message ID
"RTN","MHV7R1",80,0)
 S QRY("QPD")=""                                 ;QPD segment
"RTN","MHV7R1",81,0)
 ;
"RTN","MHV7R1",82,0)
 ;
"RTN","MHV7R1",83,0)
 ;Validate message is a well formed QBP^Q13 message
"RTN","MHV7R1",84,0)
 ;
"RTN","MHV7R1",85,0)
 ;Must have MSH first, followed by QPD,PID,RXE,RDF,RCP in any order
"RTN","MHV7R1",86,0)
 ;RDF is not required, any other segments are ignored
"RTN","MHV7R1",87,0)
 ;
"RTN","MHV7R1",88,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1) S QRY("MID")=$G(MSH(9))
"RTN","MHV7R1",89,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R1",90,0)
 S CNT=2,OCNT=0
"RTN","MHV7R1",91,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R1",92,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R1",93,0)
 . I SEGTYPE="PID" M PID=@MSGROOT@(CNT),QRY("PID")=PID Q
"RTN","MHV7R1",94,0)
 . I SEGTYPE="QPD" M QPD=@MSGROOT@(CNT),QRY("QPD")=QPD Q
"RTN","MHV7R1",95,0)
 . I SEGTYPE="RDF" M RDF=@MSGROOT@(CNT) Q
"RTN","MHV7R1",96,0)
 . I SEGTYPE="RCP" M RCP=@MSGROOT@(CNT) Q
"RTN","MHV7R1",97,0)
 . I SEGTYPE="RXE" S OCNT=OCNT+1 M RXE(OCNT)=@MSGROOT@(CNT) Q
"RTN","MHV7R1",98,0)
 . Q
"RTN","MHV7R1",99,0)
 ;
"RTN","MHV7R1",100,0)
 I '$D(PID) S ERR="PID^1^^100^AE^Missing PID segment" Q 0
"RTN","MHV7R1",101,0)
 I '$D(QPD) S ERR="QPD^1^^100^AE^Missing QPD segment" Q 0
"RTN","MHV7R1",102,0)
 I '$D(RCP) S ERR="RCP^1^^100^AE^Missing RCP segment" Q 0
"RTN","MHV7R1",103,0)
 ;
"RTN","MHV7R1",104,0)
 ;
"RTN","MHV7R1",105,0)
 ;Validate required fields and query parameters
"RTN","MHV7R1",106,0)
 ;
"RTN","MHV7R1",107,0)
 S ICN="",DFN="",SSN=""
"RTN","MHV7R1",108,0)
 F I=1:1:3 Q:'$D(PID(3,I))  D  Q:ERR'=""
"RTN","MHV7R1",109,0)
 . S ID=$G(PID(3,I,1))
"RTN","MHV7R1",110,0)
 . S TYPE=$G(PID(3,I,5))
"RTN","MHV7R1",111,0)
 . I ID="" S ERR="PID^1^3^101^AE^Missing Patient ID" Q
"RTN","MHV7R1",112,0)
 . I TYPE="" S ERR="PID^1^3^101^AE^Missing Patient ID Type" Q
"RTN","MHV7R1",113,0)
 . I TYPE="NI" S ICN=ID
"RTN","MHV7R1",114,0)
 . I TYPE="PI" S DFN=ID
"RTN","MHV7R1",115,0)
 . I TYPE="SS" S SSN=ID
"RTN","MHV7R1",116,0)
 . Q
"RTN","MHV7R1",117,0)
 Q:ERR'="" 0
"RTN","MHV7R1",118,0)
 ;
"RTN","MHV7R1",119,0)
 S FAMILY=$G(PID(5,1,1))
"RTN","MHV7R1",120,0)
 S GIVEN=$G(PID(5,1,2))
"RTN","MHV7R1",121,0)
 S MIDDLE=$G(PID(5,1,3))
"RTN","MHV7R1",122,0)
 S SUFFIX=$G(PID(5,1,4))
"RTN","MHV7R1",123,0)
 ;
"RTN","MHV7R1",124,0)
 ; ID is validatd from PID only,
"RTN","MHV7R1",125,0)
 ; May want to add fallback to use ID supplied in QPD
"RTN","MHV7R1",126,0)
 I '$$VALIDID^MHV7R2(.ICN,.DFN,.SSN,.ERR) S ERR="PID^1^3^"_ERR Q 0
"RTN","MHV7R1",127,0)
 ;
"RTN","MHV7R1",128,0)
 ; *** May need to add validation of name - compare against system
"RTN","MHV7R1",129,0)
 ;I FAMILY="" S ERR="PID^1^5^101^AE^Missing Patient Family Name" Q 0
"RTN","MHV7R1",130,0)
 ;I GIVEN="" S ERR="PID^1^5^101^AE^Missing Patient Given Name" Q 0
"RTN","MHV7R1",131,0)
 ;
"RTN","MHV7R1",132,0)
 ;
"RTN","MHV7R1",133,0)
 S QTAG=$G(QPD(2))            ;Query Tag
"RTN","MHV7R1",134,0)
 S REQID=$G(QPD(3))           ;Request ID
"RTN","MHV7R1",135,0)
 S REQTYPE=$G(QPD(4))         ;Request Type
"RTN","MHV7R1",136,0)
 S FROMDT=$G(QPD(5))          ;From Date
"RTN","MHV7R1",137,0)
 S TODT=$G(QPD(6))            ;To Date
"RTN","MHV7R1",138,0)
 ; Do not use ICN or DFN from QPD, get from PID
"RTN","MHV7R1",139,0)
 ;I ICN="" S ICN=$G(QPD(7))    ;ICN
"RTN","MHV7R1",140,0)
 ;I DFN="" S DFN=$G(QPD(8))    ;DFN
"RTN","MHV7R1",141,0)
 S PRI=$G(RCP(1))             ;Query Priority
"RTN","MHV7R1",142,0)
 ;
"RTN","MHV7R1",143,0)
 I '$D(QPD(1)) S ERR="QPD^1^1^101^AE^Missing Message Query Name" Q 0
"RTN","MHV7R1",144,0)
 M QNAME=QPD(1)  ;Message Query Name
"RTN","MHV7R1",145,0)
 ;
"RTN","MHV7R1",146,0)
 I QTAG="" S ERR="QPD^1^2^101^AE^Missing Query Tag" Q 0
"RTN","MHV7R1",147,0)
 ;
"RTN","MHV7R1",148,0)
 I REQID="" S ERR="QPD^1^3^101^AE^Missing Request ID" Q 0
"RTN","MHV7R1",149,0)
 ;
"RTN","MHV7R1",150,0)
 I REQTYPE="" S ERR="QPD^1^4^101^AE^Missing Request Type" Q 0
"RTN","MHV7R1",151,0)
 S REQTIEN=$O(^MHV(2275.3,"D",REQTYPE,0))
"RTN","MHV7R1",152,0)
 I 'REQTIEN S ERR="QPD^1^4^103^AE^Request Type Not Found" Q 0
"RTN","MHV7R1",153,0)
 S REQT0=$G(^MHV(2275.3,REQTIEN,0))
"RTN","MHV7R1",154,0)
 S REQTYPE=$P(REQT0,"^",2)
"RTN","MHV7R1",155,0)
 ;
"RTN","MHV7R1",156,0)
 I FROMDT'="" D  Q:ERR'="" 0
"RTN","MHV7R1",157,0)
 . I FROMDT'?8.16N S ERR="QPD^1^5^102^AE^Invalid From Date" Q
"RTN","MHV7R1",158,0)
 . ;***Check into Time Zone issue between MHV server and site
"RTN","MHV7R1",159,0)
 . S FROMDT=$$HL7TFM^XLFDT(FROMDT)\1
"RTN","MHV7R1",160,0)
 . I FROMDT'?7N S ERR="QPD^1^5^102^AE^Invalid From Date" Q
"RTN","MHV7R1",161,0)
 . Q
"RTN","MHV7R1",162,0)
 ;
"RTN","MHV7R1",163,0)
 I TODT'="" D  Q:ERR'="" 0
"RTN","MHV7R1",164,0)
 . I TODT'?8.16N S ERR="QPD^1^6^102^AE^Invalid To Date" Q
"RTN","MHV7R1",165,0)
 . ;***Check into Time Zone issue between MHV server and site
"RTN","MHV7R1",166,0)
 . S TODT=$$HL7TFM^XLFDT(TODT)\1
"RTN","MHV7R1",167,0)
 . I TODT'?7N S ERR="QPD^1^6^102^AE^Invalid To Date" Q
"RTN","MHV7R1",168,0)
 . Q
"RTN","MHV7R1",169,0)
 ;
"RTN","MHV7R1",170,0)
 I TODT'="",TODT<FROMDT S ERR="QPD^1^6^102^AE^To Date precedes From Date" Q 0
"RTN","MHV7R1",171,0)
 ;
"RTN","MHV7R1",172,0)
 I PRI="" S ERR="RCP^1^1^101^AE^Missing Query Priority" Q 0
"RTN","MHV7R1",173,0)
 I "D|I"'[PRI S ERR="RCP^1^1^102^AE^Invalid Query Priority" Q 0
"RTN","MHV7R1",174,0)
 ;
"RTN","MHV7R1",175,0)
 F CNT=1:1 Q:'$D(RXE(CNT))  D
"RTN","MHV7R1",176,0)
 . S RXNUM=$G(RXE(CNT,15))
"RTN","MHV7R1",177,0)
 . Q:RXNUM<1
"RTN","MHV7R1",178,0)
 . S QRY("RXLIST",RXNUM)=""
"RTN","MHV7R1",179,0)
 . Q
"RTN","MHV7R1",180,0)
 ;
"RTN","MHV7R1",181,0)
 S QRY("REQID")=REQID     ;Request ID
"RTN","MHV7R1",182,0)
 S QRY("ICN")=ICN         ;ICN
"RTN","MHV7R1",183,0)
 S QRY("TYPE")=REQTYPE    ;Request Data Type
"RTN","MHV7R1",184,0)
 S QRY("FROM")=FROMDT     ;From Date
"RTN","MHV7R1",185,0)
 S QRY("TO")=TODT         ;To Date
"RTN","MHV7R1",186,0)
 S QRY("DFN")=DFN         ;DFN
"RTN","MHV7R1",187,0)
 S QRY("SSN")=SSN         ;SSN
"RTN","MHV7R1",188,0)
 S QRY("PRI")=PRI         ;Priority
"RTN","MHV7R1",189,0)
 ;
"RTN","MHV7R1",190,0)
 S QRY("BLOCKED")=$P(REQT0,"^",3)
"RTN","MHV7R1",191,0)
 S QRY("REALTIME")=$P(REQT0,"^",4)
"RTN","MHV7R1",192,0)
 S QRY("EXECUTE")=$TR($P(REQT0,"^",5),"~","^")
"RTN","MHV7R1",193,0)
 ;
"RTN","MHV7R1",194,0)
 Q 1
"RTN","MHV7R1",195,0)
 ;
"RTN","MHV7R2")
0^2^B44015238
"RTN","MHV7R2",1,0)
MHV7R2 ;WAS/GPM - HL7 RECEIVER FOR OMP^O09 ; [8/22/05 11:53pm]
"RTN","MHV7R2",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7R2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R2",4,0)
 ;
"RTN","MHV7R2",5,0)
OMPO09 ;Process OMP^O09 messages from the MHV OMP^O09 Subsciber protocol
"RTN","MHV7R2",6,0)
 ;
"RTN","MHV7R2",7,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R2",8,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R2",9,0)
 ; if they are missing.
"RTN","MHV7R2",10,0)
 ;
"RTN","MHV7R2",11,0)
 ;  The message will be checked to see if it is a valid OMP^O09 order
"RTN","MHV7R2",12,0)
 ; message.  If not, a negative acknowledgement will be sent.  If the ; order message is real time or synchronous, the realtime request
"RTN","MHV7R2",13,0)
 ; manager is called to handle it.
"RTN","MHV7R2",14,0)
 ;
"RTN","MHV7R2",15,0)
 ;  Input:
"RTN","MHV7R2",16,0)
 ;          HL7 environment variables
"RTN","MHV7R2",17,0)
 ;
"RTN","MHV7R2",18,0)
 ; Output:
"RTN","MHV7R2",19,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R2",20,0)
 ;
"RTN","MHV7R2",21,0)
 N MSGROOT,REQ,XMT,ERR
"RTN","MHV7R2",22,0)
 S (REQ,XMT,ERR)=""
"RTN","MHV7R2",23,0)
 S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R2",24,0)
 S ^XTMP("MHV7LOG")=1                ;Temporary - turns on logging
"RTN","MHV7R2",25,0)
 D LOG^MHV7U("OMP-O09 RECEIVER","","S",1)
"RTN","MHV7R2",26,0)
 ;
"RTN","MHV7R2",27,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R2",28,0)
 D LOG^MHV7U("LOAD",MSGROOT,"I",0)
"RTN","MHV7R2",29,0)
 ;
"RTN","MHV7R2",30,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R2",31,0)
 ;D LOG^MHV7U("PARSE",MSGROOT,"I",0)
"RTN","MHV7R2",32,0)
 ;
"RTN","MHV7R2",33,0)
 I '$$VALIDO09(MSGROOT,.REQ,.XMT,.ERR) D  Q
"RTN","MHV7R2",34,0)
 . D LOG^MHV7U("MSG CHECK","INVALID^"_ERR,"S",0)
"RTN","MHV7R2",35,0)
 . D XMIT^MHV7T(.REQ,.XMT,ERR,"",.HL)
"RTN","MHV7R2",36,0)
 D LOG^MHV7U("MSG CHECK","VALID","S",0)
"RTN","MHV7R2",37,0)
 ;
"RTN","MHV7R2",38,0)
 ; Immediate Mode
"RTN","MHV7R2",39,0)
 ; Only real time synchronous calls are supported at this time.
"RTN","MHV7R2",40,0)
 I REQ("PRI")="I" D REALTIME^MHVRQI(.REQ,.XMT,.HL) Q
"RTN","MHV7R2",41,0)
 ;
"RTN","MHV7R2",42,0)
 Q
"RTN","MHV7R2",43,0)
 ;
"RTN","MHV7R2",44,0)
VALIDO09(MSGROOT,REQ,XMT,ERR) ;Parse and Validate message
"RTN","MHV7R2",45,0)
 ;
"RTN","MHV7R2",46,0)
 ;  OMP^O09 messages must contain PID, ORC, and RXE segments
"RTN","MHV7R2",47,0)
 ;  The following sequences are required
"RTN","MHV7R2",48,0)
 ;     PID(3)  - ICN/DFN
"RTN","MHV7R2",49,0)
 ;     ORC(2)  - Placer Order Number
"RTN","MHV7R2",50,0)
 ;     RXE(1).4- Order Start Time
"RTN","MHV7R2",51,0)
 ;     RXE(15) - Prescription Number
"RTN","MHV7R2",52,0)
 ;  The following sequences are optional
"RTN","MHV7R2",53,0)
 ;
"RTN","MHV7R2",54,0)
 ;  ERR = segment^sequence^field^code^ACK type^error text
"RTN","MHV7R2",55,0)
 ;
"RTN","MHV7R2",56,0)
 N MSH,PID,ORC,RXE,CNT,ICN,SSN,REQTYPE,DFN,PRI,REQTIEN,REQT0,TYPE,ID,I,ORDERCTL,PORDERN,ORDERQTY,GIVEID,GIVESYS,GIVEAMT,GIVEUNT,ORDERTM,RXNUM,FAMILY,GIVEN,MIDDLE,SUFFIX
"RTN","MHV7R2",57,0)
 S ERR=""
"RTN","MHV7R2",58,0)
 K REQ,XMT
"RTN","MHV7R2",59,0)
 ;
"RTN","MHV7R2",60,0)
 ;Set response control defaults
"RTN","MHV7R2",61,0)
 S XMT("PROTOCOL")="MHV ORP-O10 Event Driver"   ;Response protocol
"RTN","MHV7R2",62,0)
 S XMT("BUILDER")="ORPO10^MHV7B2"               ;Response builder
"RTN","MHV7R2",63,0)
 S XMT("MODE")="D"                               ;Response mode
"RTN","MHV7R2",64,0)
 I $G(HL("APAT"))="" S XMT("MODE")="I"           ;Immediate mode
"RTN","MHV7R2",65,0)
 S XMT("HLMTIENS")=HLMTIENS                      ;Message IEN
"RTN","MHV7R2",66,0)
 S REQ("MID")=""                                 ;Message ID
"RTN","MHV7R2",67,0)
 ;
"RTN","MHV7R2",68,0)
 ;Validate message is a well-formed OMP^O09 message
"RTN","MHV7R2",69,0)
 ;Must have MSH first followed by PID, then one or more ORC/RXE pairs
"RTN","MHV7R2",70,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1) S REQ("MID")=$G(MSH(9))
"RTN","MHV7R2",71,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R2",72,0)
 I $G(@MSGROOT@(2,0))="PID" M PID=@MSGROOT@(2),REQ("PID")=PID
"RTN","MHV7R2",73,0)
 E  S ERR="PID^1^^100^AE^Missing PID segment" Q 0
"RTN","MHV7R2",74,0)
 S CNT=3
"RTN","MHV7R2",75,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  Q:ERR'=""
"RTN","MHV7R2",76,0)
 . I $G(@MSGROOT@(CNT,0))="ORC" M ORC(CNT\2)=@MSGROOT@(CNT)
"RTN","MHV7R2",77,0)
 . E  S ERR="ORC^1^^100^AE^Missing ORC segment" Q
"RTN","MHV7R2",78,0)
 . I $G(@MSGROOT@(CNT+1,0))="RXE" M RXE(CNT\2)=@MSGROOT@(CNT+1)
"RTN","MHV7R2",79,0)
 . E  S ERR="RXE^1^^100^AE^Missing RXE segment" Q
"RTN","MHV7R2",80,0)
 . S CNT=CNT+2
"RTN","MHV7R2",81,0)
 . Q
"RTN","MHV7R2",82,0)
 Q:ERR'="" 0
"RTN","MHV7R2",83,0)
 I '$D(ORC) S ERR="ORC^1^^100^AE^Missing ORC segment" Q 0
"RTN","MHV7R2",84,0)
 I '$D(RXE) S ERR="RXE^1^^100^AE^Missing RXE segment" Q 0
"RTN","MHV7R2",85,0)
 ;
"RTN","MHV7R2",86,0)
 ;
"RTN","MHV7R2",87,0)
 ;Validate required fields and refill request parameters
"RTN","MHV7R2",88,0)
 ;
"RTN","MHV7R2",89,0)
 S ICN="",DFN="",SSN=""
"RTN","MHV7R2",90,0)
 F I=1:1:3 Q:'$D(PID(3,I))  D  Q:ERR'=""
"RTN","MHV7R2",91,0)
 . S ID=$G(PID(3,I,1))
"RTN","MHV7R2",92,0)
 . S TYPE=$G(PID(3,I,5))
"RTN","MHV7R2",93,0)
 . I ID="" S ERR="PID^1^3^101^AE^Missing Patient ID" Q
"RTN","MHV7R2",94,0)
 . I TYPE="" S ERR="PID^1^3^101^AE^Missing Patient ID Type" Q
"RTN","MHV7R2",95,0)
 . I TYPE="NI" S ICN=ID
"RTN","MHV7R2",96,0)
 . I TYPE="PI" S DFN=ID
"RTN","MHV7R2",97,0)
 . I TYPE="SS" S SSN=ID
"RTN","MHV7R2",98,0)
 . Q
"RTN","MHV7R2",99,0)
 Q:ERR'="" 0
"RTN","MHV7R2",100,0)
 ;
"RTN","MHV7R2",101,0)
 S FAMILY=$G(PID(5,1,1))
"RTN","MHV7R2",102,0)
 S GIVEN=$G(PID(5,1,2))
"RTN","MHV7R2",103,0)
 S MIDDLE=$G(PID(5,1,3))
"RTN","MHV7R2",104,0)
 S SUFFIX=$G(PID(5,1,4))
"RTN","MHV7R2",105,0)
 ;
"RTN","MHV7R2",106,0)
 I '$$VALIDID(.ICN,.DFN,.SSN,.ERR) S ERR="PID^1^3^"_ERR Q 0
"RTN","MHV7R2",107,0)
 ;
"RTN","MHV7R2",108,0)
 ; *** May need to add validation of name - compare against system
"RTN","MHV7R2",109,0)
 ;I FAMILY="" S ERR="PID^1^5^101^AE^Missing Patient Family Name" Q 0
"RTN","MHV7R2",110,0)
 ;I GIVEN="" S ERR="PID^1^5^101^AE^Missing Patient Given Name" Q 0
"RTN","MHV7R2",111,0)
 ;
"RTN","MHV7R2",112,0)
 F I=1:1 Q:'$D(ORC(I))  D  Q:ERR'=""
"RTN","MHV7R2",113,0)
 . S ORDERCTL=$G(ORC(I,1))
"RTN","MHV7R2",114,0)
 . S PORDERN=$G(ORC(I,2))
"RTN","MHV7R2",115,0)
 . I ORDERCTL="" S ERR="ORC^"_I_"^2^101^AE^Missing Order Control" Q
"RTN","MHV7R2",116,0)
 . I PORDERN="" S ERR="ORC^"_I_"^2^101^AE^Missing Placer Order#" Q
"RTN","MHV7R2",117,0)
 . ;
"RTN","MHV7R2",118,0)
 . S ORDERQTY=$G(RXE(I,1,1,1))
"RTN","MHV7R2",119,0)
 . S ORDERTM=$G(RXE(I,1,1,4))
"RTN","MHV7R2",120,0)
 . S GIVEID=$G(RXE(I,2,1,1))
"RTN","MHV7R2",121,0)
 . S GIVESYS=$G(RXE(I,2,1,3))
"RTN","MHV7R2",122,0)
 . S GIVEAMT=$G(RXE(I,3))
"RTN","MHV7R2",123,0)
 . S GIVEUNT=$G(RXE(I,5))
"RTN","MHV7R2",124,0)
 . S RXNUM=$G(RXE(I,15))
"RTN","MHV7R2",125,0)
 . I ORDERQTY="" S ERR="RXE^"_I_"^1^101^AE^Missing Order Quantity" Q
"RTN","MHV7R2",126,0)
 . I ORDERTM="" S ERR="RXE^"_I_"^1^101^AE^Missing Order Start Time" Q
"RTN","MHV7R2",127,0)
 . I GIVEID="" S ERR="RXE^"_I_"^2^101^AE^Missign Give Code ID" Q
"RTN","MHV7R2",128,0)
 . I GIVESYS="" S ERR="RXE^"_I_"^2^101^AE^Missing Give Code System" Q
"RTN","MHV7R2",129,0)
 . I GIVEAMT="" S ERR="RXE^"_I_"^3^101^AE^Missing Give Amount" Q
"RTN","MHV7R2",130,0)
 . I GIVEUNT="" S ERR="RXE^"_I_"^5^101^AE^Missing Give Units" Q
"RTN","MHV7R2",131,0)
 . I RXNUM="" S ERR="RXE^"_I_"^15^101^AE^Missing Prescription#" Q
"RTN","MHV7R2",132,0)
 . I RXNUM'?1N.N0.1A S ERR="RXE^"_I_"^15^102^AE^Invalid Prescription#" Q
"RTN","MHV7R2",133,0)
 . S REQ("RX",I)=RXNUM_"^"_PORDERN_"^"_ORDERTM
"RTN","MHV7R2",134,0)
 . Q
"RTN","MHV7R2",135,0)
 Q:ERR'="" 0
"RTN","MHV7R2",136,0)
 ;
"RTN","MHV7R2",137,0)
 S PRI=XMT("MODE")
"RTN","MHV7R2",138,0)
 S REQTYPE="RxRefill"
"RTN","MHV7R2",139,0)
 S REQTIEN=$O(^MHV(2275.3,"D",REQTYPE,0))
"RTN","MHV7R2",140,0)
 I 'REQTIEN S ERR="MSH^1^9^103^AE^Request Type Not Found" Q 0
"RTN","MHV7R2",141,0)
 S REQT0=$G(^MHV(2275.3,REQTIEN,0))
"RTN","MHV7R2",142,0)
 S REQTYPE=$P(REQT0,"^",2)
"RTN","MHV7R2",143,0)
 ;
"RTN","MHV7R2",144,0)
 S REQ("ICN")=ICN         ;ICN
"RTN","MHV7R2",145,0)
 S REQ("DFN")=DFN         ;DFN
"RTN","MHV7R2",146,0)
 S REQ("SSN")=SSN         ;SSN
"RTN","MHV7R2",147,0)
 S REQ("TYPE")=REQTYPE    ;Request Data Type
"RTN","MHV7R2",148,0)
 S REQ("PRI")=PRI         ;Priority
"RTN","MHV7R2",149,0)
 ;
"RTN","MHV7R2",150,0)
 S REQ("BLOCKED")=$P(REQT0,"^",3)
"RTN","MHV7R2",151,0)
 S REQ("REALTIME")=$P(REQT0,"^",4)
"RTN","MHV7R2",152,0)
 S REQ("EXECUTE")=$TR($P(REQT0,"^",5),"~","^")
"RTN","MHV7R2",153,0)
 ;
"RTN","MHV7R2",154,0)
 Q 1
"RTN","MHV7R2",155,0)
 ;
"RTN","MHV7R2",156,0)
VALIDID(ICN,DFN,SSN,ERR) ;Validate patient identifiers
"RTN","MHV7R2",157,0)
 ; Will accept ICN, SSN, or DFN, but must have at least one.
"RTN","MHV7R2",158,0)
 ; Only validate one, in order of preference: ICN, SSN, DFN.
"RTN","MHV7R2",159,0)
 ;
"RTN","MHV7R2",160,0)
 ;  Integration Agreements:
"RTN","MHV7R2",161,0)
 ;         2701 : $$GETDFN^MPIF001, $$GETICN^MPIF001
"RTN","MHV7R2",162,0)
 ;        10035 : Direct referenc of ^DPT(DFN,0);9
"RTN","MHV7R2",163,0)
 ; 
"RTN","MHV7R2",164,0)
 N XSSN,XDFN
"RTN","MHV7R2",165,0)
 S ERR=""
"RTN","MHV7R2",166,0)
 I ICN="",SSN="",DFN="" S ERR="101^AE^Missing Patient ID" Q 0
"RTN","MHV7R2",167,0)
 ;I ICN="" S ERR="101^AE^Missing ICN" Q 0
"RTN","MHV7R2",168,0)
 ;
"RTN","MHV7R2",169,0)
 I ICN'="" D  Q:ERR'="" 0 Q 1
"RTN","MHV7R2",170,0)
 . S ICN=$P(ICN,"V")
"RTN","MHV7R2",171,0)
 . I ICN'?9.10N S ERR="102^AE^Invalid ICN" Q
"RTN","MHV7R2",172,0)
 . S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","MHV7R2",173,0)
 . I XDFN<1 S ERR="204^AR^Patient Not Found" Q
"RTN","MHV7R2",174,0)
 . S XSSN=$P($G(^DPT(XDFN,0)),"^",9)
"RTN","MHV7R2",175,0)
 . I SSN'="" D  Q:ERR'=""
"RTN","MHV7R2",176,0)
 .. I SSN'?9N S ERR="102^AE^Invalid SSN" Q
"RTN","MHV7R2",177,0)
 .. I SSN'=XSSN S ERR="204^AE^Patient SSN Mismatch" Q
"RTN","MHV7R2",178,0)
 . I DFN'="",DFN'=XDFN S ERR="204^AE^Patient DFN Mismatch" Q
"RTN","MHV7R2",179,0)
 . S DFN=XDFN,SSN=XSSN
"RTN","MHV7R2",180,0)
 . Q
"RTN","MHV7R2",181,0)
 ;
"RTN","MHV7R2",182,0)
 I SSN'="" D  Q:ERR'="" 0 Q 1
"RTN","MHV7R2",183,0)
 . I SSN'?9N S ERR="102^AE^Invalid SSN" Q
"RTN","MHV7R2",184,0)
 . S XDFN=$O(^DPT("SSN",SSN,""))
"RTN","MHV7R2",185,0)
 . I XDFN<1 S ERR="204^AR^Patient Not Found" Q
"RTN","MHV7R2",186,0)
 . S ICN=+$$GETICN^MPIF001(DFN)
"RTN","MHV7R2",187,0)
 . I ICN<1 S ICN=""
"RTN","MHV7R2",188,0)
 . I DFN'="",DFN'=XDFN S ERR="204^AE^Patient DFN Mismatch" Q
"RTN","MHV7R2",189,0)
 . S DFN=XDFN
"RTN","MHV7R2",190,0)
 . Q
"RTN","MHV7R2",191,0)
 ;
"RTN","MHV7R2",192,0)
 I DFN'="" D  Q:ERR'="" 0 Q 1
"RTN","MHV7R2",193,0)
 . I DFN'?1N.N  S ERR="102^AE^Invalid DFN" Q
"RTN","MHV7R2",194,0)
 . I DFN<1 S ERR="102^AE^Invalid DFN" Q
"RTN","MHV7R2",195,0)
 . I '$D(^DPT(DFN,0)) S ERR="204^AR^Patient Not Found" Q
"RTN","MHV7R2",196,0)
 . S ICN=+$$GETICN^MPIF001(DFN)
"RTN","MHV7R2",197,0)
 . I ICN<1 S ICN=""
"RTN","MHV7R2",198,0)
 . S SSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","MHV7R2",199,0)
 . Q
"RTN","MHV7R2",200,0)
 ;
"RTN","MHV7R2",201,0)
 S ERR="101^AE^Missing Patient ID" Q 0
"RTN","MHV7R2",202,0)
 ;
"RTN","MHV7T")
0^7^B13277198
"RTN","MHV7T",1,0)
MHV7T ;WAS/GPM - HL7 TRANSMITTER ; [8/22/05 11:54pm]
"RTN","MHV7T",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7T",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7T",4,0)
 ;
"RTN","MHV7T",5,0)
 Q
"RTN","MHV7T",6,0)
 ;
"RTN","MHV7T",7,0)
XMIT(REQ,XMT,ERR,DATAROOT,HL) ;Build and Transmit HL7 message
"RTN","MHV7T",8,0)
 ;   Builds and sends the desired HL7 message based on the mode and
"RTN","MHV7T",9,0)
 ; builder passed in XMT.  If the builder requires other information
"RTN","MHV7T",10,0)
 ; to build the message, it can be passed as additional subscripts of
"RTN","MHV7T",11,0)
 ; XMT or REQ.  REQ is used for request or query related parameters,
"RTN","MHV7T",12,0)
 ; XMT for transmission and control related parameters.
"RTN","MHV7T",13,0)
 ;
"RTN","MHV7T",14,0)
 ;  The message builder sent in XMT("BUILDER") is called to build the
"RTN","MHV7T",15,0)
 ; desired message.
"RTN","MHV7T",16,0)
 ;
"RTN","MHV7T",17,0)
 ;  An immediate mode response is indicated by XMT("MODE") of I, and
"RTN","MHV7T",18,0)
 ; sent on the current interface as an original mode acknowledgement.
"RTN","MHV7T",19,0)
 ;
"RTN","MHV7T",20,0)
 ;  A deferred mode response is indicated by XMT("MODE") of D, and
"RTN","MHV7T",21,0)
 ; sent on the interface associated with XMT("PROTOCOL") as an
"RTN","MHV7T",22,0)
 ; enhanced mode application acknowledgement.
"RTN","MHV7T",23,0)
 ;
"RTN","MHV7T",24,0)
 ;  A message may be initiated by using the deferred mode settings.
"RTN","MHV7T",25,0)
 ;  Synchronous messages cannot be initiate with this API.
"RTN","MHV7T",26,0)
 ;
"RTN","MHV7T",27,0)
 ;  Integration Agreements:
"RTN","MHV7T",28,0)
 ;         2161 : INIT^HLFNC2
"RTN","MHV7T",29,0)
 ;         2164 : GENERATE^HLMA
"RTN","MHV7T",30,0)
 ;         2165 : GENACK^HLMA1
"RTN","MHV7T",31,0)
 ;
"RTN","MHV7T",32,0)
 ;  Input:
"RTN","MHV7T",33,0)
 ;         REQ - Request parameters and Message ID of original message
"RTN","MHV7T",34,0)
 ;         XMT - Transmission parameters
"RTN","MHV7T",35,0)
 ;            XMT("MODE") - Priority or mode of the transmission
"RTN","MHV7T",36,0)
 ;            XMT("PROTOCOL") - Protocol for deferred transmissions
"RTN","MHV7T",37,0)
 ;            XMT("BUILDER") - Name/tag of message builder routine
"RTN","MHV7T",38,0)
 ;            XMT("HLMTIENS") - Original message IEN - Immediate mode
"RTN","MHV7T",39,0)
 ;         ERR - Caret delimited error string
"RTN","MHV7T",40,0)
 ;               segment^sequence^field^code^ACK type^error text
"RTN","MHV7T",41,0)
 ;    DATAROOT - Global root of data array
"RTN","MHV7T",42,0)
 ;          HL - HL7 package array variable
"RTN","MHV7T",43,0)
 ;
"RTN","MHV7T",44,0)
 ;  Output: HL7 Message Transmitted
"RTN","MHV7T",45,0)
 ;
"RTN","MHV7T",46,0)
 N MSGROOT,HLRSLT,HLP
"RTN","MHV7T",47,0)
 I XMT("MODE")="D" D           ;Deferred mode
"RTN","MHV7T",48,0)
 . D LOG^MHV7U("TRANSMIT","DEFERRED MODE","S",0)
"RTN","MHV7T",49,0)
 . K HL
"RTN","MHV7T",50,0)
 . D INIT^HLFNC2(XMT("PROTOCOL"),.HL)
"RTN","MHV7T",51,0)
 . I $G(HL) S ERR=HL D LOG^MHV7U("PROTOCOL INIT FAIL",ERR,"S",0) Q
"RTN","MHV7T",52,0)
 . D LOG^MHV7U("PROTOCOL INIT","DONE "_XMT("MODE"),"S",0)
"RTN","MHV7T",53,0)
 . S MSGROOT="^TMP(""HLS"",$J)"
"RTN","MHV7T",54,0)
 . D @(XMT("BUILDER")_"(MSGROOT,.REQ,ERR,DATAROOT,.HL)")
"RTN","MHV7T",55,0)
 . D LOG^MHV7U("BUILD "_$P(XMT("BUILDER"),"^"),MSGROOT,"I",0)
"RTN","MHV7T",56,0)
 . D GENERATE^HLMA(XMT("PROTOCOL"),"GM",1,.HLRSLT,"",.HLP)
"RTN","MHV7T",57,0)
 . K @MSGROOT
"RTN","MHV7T",58,0)
 . D LOG^MHV7U("TRANSMIT "_$P(XMT("BUILDER"),"^"),.HLRSLT,"M",0)
"RTN","MHV7T",59,0)
 . Q
"RTN","MHV7T",60,0)
 ;
"RTN","MHV7T",61,0)
 I XMT("MODE")="I" D           ;Immediate mode
"RTN","MHV7T",62,0)
 . D LOG^MHV7U("TRANSMIT","IMMEDIATE MODE","S",0)
"RTN","MHV7T",63,0)
 . S MSGROOT="^TMP(""HLA"",$J)"
"RTN","MHV7T",64,0)
 . D @(XMT("BUILDER")_"(MSGROOT,.REQ,ERR,DATAROOT,.HL)")
"RTN","MHV7T",65,0)
 . D LOG^MHV7U("BUILD "_$P(XMT("BUILDER"),"^"),MSGROOT,"I",0)
"RTN","MHV7T",66,0)
 . D GENACK^HLMA1(HL("EID"),XMT("HLMTIENS"),HL("EIDS"),"GM",1,.HLRSLT)
"RTN","MHV7T",67,0)
 . K @MSGROOT
"RTN","MHV7T",68,0)
 . D LOG^MHV7U("TRANSMIT "_$P(XMT("BUILDER"),"^"),.HLRSLT,"M",0)
"RTN","MHV7T",69,0)
 . Q
"RTN","MHV7T",70,0)
 D LOG^MHV7U("TRANSMIT","COMPLETE","S",0)
"RTN","MHV7T",71,0)
 Q
"RTN","MHV7T",72,0)
 ;
"RTN","MHV7T",73,0)
EMAIL(REQ,XMT,ERR,DATAROOT,HL) ;Build and Transmit HL7 message
"RTN","MHV7T",74,0)
 ;   Builds and sends the desired HL7 message via email.
"RTN","MHV7T",75,0)
 ; This will only be used until the MHV server can establish normal
"RTN","MHV7T",76,0)
 ; HL7 receivers.
"RTN","MHV7T",77,0)
 ;
"RTN","MHV7T",78,0)
 ;  If the builder requires other information to build the message, it
"RTN","MHV7T",79,0)
 ; can be passed as additional subscripts of XMT or REQ.  REQ is used
"RTN","MHV7T",80,0)
 ; for request or query related parameters, XMT for transmission and
"RTN","MHV7T",81,0)
 ; control related parameters.
"RTN","MHV7T",82,0)
 ;
"RTN","MHV7T",83,0)
 ;  The message builder sent in XMT("BUILDER") is called to build the
"RTN","MHV7T",84,0)
 ; desired message.
"RTN","MHV7T",85,0)
 ;
"RTN","MHV7T",86,0)
 ;  Integration Agreements:
"RTN","MHV7T",87,0)
 ;         2161 : INIT^HLFNC2, MSH^HLFNC2
"RTN","MHV7T",88,0)
 ;        10070 : ^XMD
"RTN","MHV7T",89,0)
 ;
"RTN","MHV7T",90,0)
 ;  Input:
"RTN","MHV7T",91,0)
 ;         REQ - Request parameters and Message ID of original message
"RTN","MHV7T",92,0)
 ;         XMT - Transmission parameters
"RTN","MHV7T",93,0)
 ;            XMT("PROTOCOL") - Protocol for deferred transmissions
"RTN","MHV7T",94,0)
 ;            XMT("BUILDER") - Name/tag of message builder routine
"RTN","MHV7T",95,0)
 ;            XMT("SAF") - Sending Facility
"RTN","MHV7T",96,0)
 ;            XMT("EMAIL") - Email Address to use
"RTN","MHV7T",97,0)
 ;         ERR - Caret delimited error string
"RTN","MHV7T",98,0)
 ;               segment^sequence^field^code^ACK type^error text
"RTN","MHV7T",99,0)
 ;    DATAROOT - Global root of data array
"RTN","MHV7T",100,0)
 ;          HL - HL7 package array variable
"RTN","MHV7T",101,0)
 ;
"RTN","MHV7T",102,0)
 ;  Output: HL7 Message Transmitted
"RTN","MHV7T",103,0)
 ;
"RTN","MHV7T",104,0)
 N MSGROOT,MID,MSH,CNT
"RTN","MHV7T",105,0)
 N TEXT,XMDUN,XMDUZ,XMTEXT,XMROU,XMSTRIP,XMSUB,XMY,XMZ,XMDF,XMMG
"RTN","MHV7T",106,0)
 D LOG^MHV7U("TRANSMIT","EMAIL","S",0)
"RTN","MHV7T",107,0)
 K HL
"RTN","MHV7T",108,0)
 D INIT^HLFNC2(XMT("PROTOCOL"),.HL)
"RTN","MHV7T",109,0)
 I $G(HL) S ERR=HL D LOG^MHV7U("PROTOCOL INIT FAIL",ERR,"S",0) Q
"RTN","MHV7T",110,0)
 D LOG^MHV7U("PROTOCOL INIT","DONE EMAIL","S",0)
"RTN","MHV7T",111,0)
 S MSGROOT="^TMP(""MHV7TEM"",$J)"
"RTN","MHV7T",112,0)
 D @(XMT("BUILDER")_"(MSGROOT,.REQ,ERR,DATAROOT,.HL)")
"RTN","MHV7T",113,0)
 D LOG^MHV7U("BUILD "_$P(XMT("BUILDER"),"^"),MSGROOT,"I",0)
"RTN","MHV7T",114,0)
 S MID=+$H_"-"_$P($H,",",2)
"RTN","MHV7T",115,0)
 S HL("SAF")=XMT("SAF")
"RTN","MHV7T",116,0)
 D MSH^HLFNC2(.HL,MID,.MSH)
"RTN","MHV7T",117,0)
 S XMDF="",(XMDUN,XMDUZ)="My HealtheVet Package"
"RTN","MHV7T",118,0)
 S XMY(XMT("EMAIL"))=""
"RTN","MHV7T",119,0)
 S XMSUB=XMT("SAF")_" MHV PACKAGE MESSAGE"
"RTN","MHV7T",120,0)
 S XMTEXT="TEXT("
"RTN","MHV7T",121,0)
 S TEXT(1)=MSH
"RTN","MHV7T",122,0)
 F CNT=1:1 Q:'$D(@MSGROOT@(CNT))  S TEXT(CNT+1)=@MSGROOT@(CNT)
"RTN","MHV7T",123,0)
 D ^XMD
"RTN","MHV7T",124,0)
 K @MSGROOT
"RTN","MHV7T",125,0)
 I $D(XMMG) D LOG^MHV7U("EMAIL TRANSMIT","FAILURE: "_XMMG,"S",0) Q
"RTN","MHV7T",126,0)
 D LOG^MHV7U("EMAIL TRANSMIT","SUCCESS: "_XMZ,"S",0)
"RTN","MHV7T",127,0)
 Q
"RTN","MHV7U")
0^17^B62743685
"RTN","MHV7U",1,0)
MHV7U ;WAS/GPM - HL7 UTILITIES ; [8/22/05 6:09pm]
"RTN","MHV7U",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHV7U",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7U",4,0)
 ;
"RTN","MHV7U",5,0)
 ;This routine contains generic utilities used when building
"RTN","MHV7U",6,0)
 ;or processing HL7 messages.
"RTN","MHV7U",7,0)
 ;
"RTN","MHV7U",8,0)
 Q  ;Direct entry not supported
"RTN","MHV7U",9,0)
 ;
"RTN","MHV7U",10,0)
LOADMSG(MSGROOT) ; Load HL7 message into temporary global for processing
"RTN","MHV7U",11,0)
 ;
"RTN","MHV7U",12,0)
 ;This subroutine assumes that all VistA HL7 environment variables are
"RTN","MHV7U",13,0)
 ;properly initialized and will produce a fatal error if they aren't.
"RTN","MHV7U",14,0)
 ;
"RTN","MHV7U",15,0)
 N CNT,SEG
"RTN","MHV7U",16,0)
 K @MSGROOT
"RTN","MHV7U",17,0)
 F SEG=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","MHV7U",18,0)
 . S CNT=0
"RTN","MHV7U",19,0)
 . S @MSGROOT@(SEG,CNT)=HLNODE
"RTN","MHV7U",20,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  S @MSGROOT@(SEG,CNT)=HLNODE(CNT)
"RTN","MHV7U",21,0)
 Q
"RTN","MHV7U",22,0)
 ;
"RTN","MHV7U",23,0)
PARSEMSG(MSGROOT,HL) ; Message Parser
"RTN","MHV7U",24,0)
 ; Does not handle segments that span nodes
"RTN","MHV7U",25,0)
 ; Does not handle extremely long segments (uses a local)
"RTN","MHV7U",26,0)
 ; Does not handle long fields (segment parser doesn't)
"RTN","MHV7U",27,0)
 ;
"RTN","MHV7U",28,0)
 N SEG,CNT,DATA,MSG
"RTN","MHV7U",29,0)
 F CNT=1:1 Q:'$D(@MSGROOT@(CNT))  M SEG=@MSGROOT@(CNT) D
"RTN","MHV7U",30,0)
 . D PARSESEG(SEG(0),.DATA,.HL)
"RTN","MHV7U",31,0)
 . K @MSGROOT@(CNT)
"RTN","MHV7U",32,0)
 . I DATA(0)'="" M @MSGROOT@(CNT)=DATA
"RTN","MHV7U",33,0)
 . Q:'$D(SEG(1))
"RTN","MHV7U",34,0)
 . ;Add handler for segments that span nodes here.
"RTN","MHV7U",35,0)
 . Q
"RTN","MHV7U",36,0)
 Q
"RTN","MHV7U",37,0)
 ;
"RTN","MHV7U",38,0)
LOG(NAME,DATA,TYPE,NEW) ;
"RTN","MHV7U",39,0)
 Q:'$G(^XTMP("MHV7LOG"))
"RTN","MHV7U",40,0)
 N DTM,CNT
"RTN","MHV7U",41,0)
 I NEW D
"RTN","MHV7U",42,0)
 . S DTM=-$$NOW^XLFDT()
"RTN","MHV7U",43,0)
 . K ^TMP("MHV7LOG",DTM,$J)
"RTN","MHV7U",44,0)
 . S ^TMP("MHV7LOG",$J)=DTM
"RTN","MHV7U",45,0)
 . S CNT=1
"RTN","MHV7U",46,0)
 . S ^TMP("MHV7LOG",DTM,$J)=CNT
"RTN","MHV7U",47,0)
 E  D
"RTN","MHV7U",48,0)
 . S DTM=^TMP("MHV7LOG",$J)
"RTN","MHV7U",49,0)
 . S CNT=^TMP("MHV7LOG",DTM,$J)+1
"RTN","MHV7U",50,0)
 . S ^TMP("MHV7LOG",DTM,$J)=CNT
"RTN","MHV7U",51,0)
 ;
"RTN","MHV7U",52,0)
 I TYPE="S" S ^TMP("MHV7LOG",DTM,$J,CNT,NAME)=DATA Q
"RTN","MHV7U",53,0)
 I TYPE="M" M ^TMP("MHV7LOG",DTM,$J,CNT,NAME)=DATA Q
"RTN","MHV7U",54,0)
 I TYPE="I" M ^TMP("MHV7LOG",DTM,$J,CNT,NAME)=@DATA Q
"RTN","MHV7U",55,0)
 ;
"RTN","MHV7U",56,0)
 S ^TMP("MHV7LOG",DTM,$J)=CNT
"RTN","MHV7U",57,0)
 Q
"RTN","MHV7U",58,0)
 ;
"RTN","MHV7U",59,0)
TRIMSPC(STR) ;Trim leading and trailing spaces from a text string
"RTN","MHV7U",60,0)
 ;
"RTN","MHV7U",61,0)
 ;  Input:
"RTN","MHV7U",62,0)
 ;    STR - Text string
"RTN","MHV7U",63,0)
 ;
"RTN","MHV7U",64,0)
 ;  Output:
"RTN","MHV7U",65,0)
 ;   Function Value - Input text string with leading and trailing
"RTN","MHV7U",66,0)
 ;                    spaces removed
"RTN","MHV7U",67,0)
 ;
"RTN","MHV7U",68,0)
 N SPACE,POS,LEN
"RTN","MHV7U",69,0)
 S SPACE=$C(32)
"RTN","MHV7U",70,0)
 S LEN=$L(STR)
"RTN","MHV7U",71,0)
 S POS=1
"RTN","MHV7U",72,0)
 F  Q:$E(STR,POS)'=SPACE!(POS>LEN)  S POS=POS+1
"RTN","MHV7U",73,0)
 S STR=$E(STR,POS,LEN)
"RTN","MHV7U",74,0)
 S POS=$L(STR)
"RTN","MHV7U",75,0)
 F  Q:$E(STR,POS)'=SPACE!(POS<1)  S POS=POS-1
"RTN","MHV7U",76,0)
 S STR=$E(STR,1,POS)
"RTN","MHV7U",77,0)
 Q STR
"RTN","MHV7U",78,0)
 ;
"RTN","MHV7U",79,0)
PARSESEG(SEG,DATA,HL) ;Generic segment parser
"RTN","MHV7U",80,0)
 ;This procedure parses a single HL7 segment and builds an array
"RTN","MHV7U",81,0)
 ;subscripted by the field number containing the data for that field.
"RTN","MHV7U",82,0)
 ; Does not handle segments that span nodes
"RTN","MHV7U",83,0)
 ;
"RTN","MHV7U",84,0)
 ;  Input:
"RTN","MHV7U",85,0)
 ;     SEG - HL7 segment to parse
"RTN","MHV7U",86,0)
 ;      HL - HL7 environment array
"RTN","MHV7U",87,0)
 ;
"RTN","MHV7U",88,0)
 ;  Output:
"RTN","MHV7U",89,0)
 ;    Function value - field data array [SUB1:field, SUB2:repetition,
"RTN","MHV7U",90,0)
 ;                                SUB3:component, SUB4:sub-component] 
"RTN","MHV7U",91,0)
 ;
"RTN","MHV7U",92,0)
 N CMP     ;component subscript
"RTN","MHV7U",93,0)
 N CMPVAL  ;component value
"RTN","MHV7U",94,0)
 N FLD     ;field subscript
"RTN","MHV7U",95,0)
 N FLDVAL  ;field value
"RTN","MHV7U",96,0)
 N REP     ;repetition subscript
"RTN","MHV7U",97,0)
 N REPVAL  ;repetition value
"RTN","MHV7U",98,0)
 N SUB     ;sub-component subscript
"RTN","MHV7U",99,0)
 N SUBVAL  ;suc-component value
"RTN","MHV7U",100,0)
 N FS      ;field separator
"RTN","MHV7U",101,0)
 N CS      ;component separator
"RTN","MHV7U",102,0)
 N RS      ;repetition separator
"RTN","MHV7U",103,0)
 N SS      ;sub-component separator
"RTN","MHV7U",104,0)
 ;
"RTN","MHV7U",105,0)
 K DATA
"RTN","MHV7U",106,0)
 S FS=HL("FS")
"RTN","MHV7U",107,0)
 S CS=$E(HL("ECH"))
"RTN","MHV7U",108,0)
 S RS=$E(HL("ECH"),2)
"RTN","MHV7U",109,0)
 S SS=$E(HL("ECH"),4)
"RTN","MHV7U",110,0)
 ;
"RTN","MHV7U",111,0)
 S DATA(0)=$P(SEG,FS)
"RTN","MHV7U",112,0)
 S SEG=$P(SEG,FS,2,9999)
"RTN","MHV7U",113,0)
 F FLD=1:1:$L(SEG,FS) D
"RTN","MHV7U",114,0)
 . S FLDVAL=$P(SEG,FS,FLD)
"RTN","MHV7U",115,0)
 . F REP=1:1:$L(FLDVAL,RS) D
"RTN","MHV7U",116,0)
 . . S REPVAL=$P(FLDVAL,RS,REP)
"RTN","MHV7U",117,0)
 . . I REPVAL[CS F CMP=1:1:$L(REPVAL,CS) D
"RTN","MHV7U",118,0)
 . . . S CMPVAL=$P(REPVAL,CS,CMP)
"RTN","MHV7U",119,0)
 . . . I CMPVAL[SS F SUB=1:1:$L(CMPVAL,SS) D
"RTN","MHV7U",120,0)
 . . . . S SUBVAL=$P(CMPVAL,SS,SUB)
"RTN","MHV7U",121,0)
 . . . . I SUBVAL'="" S DATA(FLD,REP,CMP,SUB)=SUBVAL
"RTN","MHV7U",122,0)
 . . . I '$D(DATA(FLD,REP,CMP)),CMPVAL'="" S DATA(FLD,REP,CMP)=CMPVAL
"RTN","MHV7U",123,0)
 . . I '$D(DATA(FLD,REP)),REPVAL'="",FLDVAL[RS S DATA(FLD,REP)=REPVAL
"RTN","MHV7U",124,0)
 . I '$D(DATA(FLD)),FLDVAL'="" S DATA(FLD)=FLDVAL
"RTN","MHV7U",125,0)
 Q
"RTN","MHV7U",126,0)
 ;
"RTN","MHV7U",127,0)
BLDSEG(DATA,HL) ;generic segment builder
"RTN","MHV7U",128,0)
 ;
"RTN","MHV7U",129,0)
 ;  Input:
"RTN","MHV7U",130,0)
 ;    DATA - field data array [SUB1:field, SUB2:repetition,
"RTN","MHV7U",131,0)
 ;                             SUB3:component, SUB4:sub-component]
"RTN","MHV7U",132,0)
 ;     HL - HL7 environment array
"RTN","MHV7U",133,0)
 ;
"RTN","MHV7U",134,0)
 ;  Output:
"RTN","MHV7U",135,0)
 ;   Function Value - Formatted HL7 segment on success, "" on failure
"RTN","MHV7U",136,0)
 ;
"RTN","MHV7U",137,0)
 N CMP     ;component subscript
"RTN","MHV7U",138,0)
 N CMPVAL  ;component value
"RTN","MHV7U",139,0)
 N FLD     ;field subscript
"RTN","MHV7U",140,0)
 N FLDVAL  ;field value
"RTN","MHV7U",141,0)
 N REP     ;repetition subscript
"RTN","MHV7U",142,0)
 N REPVAL  ;repetition value
"RTN","MHV7U",143,0)
 N SUB     ;sub-component subscript
"RTN","MHV7U",144,0)
 N SUBVAL  ;suc-component value
"RTN","MHV7U",145,0)
 N FS      ;field separator
"RTN","MHV7U",146,0)
 N CS      ;component separator
"RTN","MHV7U",147,0)
 N RS      ;repetition separator
"RTN","MHV7U",148,0)
 N ES      ;escape character
"RTN","MHV7U",149,0)
 N SS      ;sub-component separator
"RTN","MHV7U",150,0)
 N SEG,SEP
"RTN","MHV7U",151,0)
 ;
"RTN","MHV7U",152,0)
 S FS=HL("FS")
"RTN","MHV7U",153,0)
 S CS=$E(HL("ECH"))
"RTN","MHV7U",154,0)
 S RS=$E(HL("ECH"),2)
"RTN","MHV7U",155,0)
 S ES=$E(HL("ECH"),3)
"RTN","MHV7U",156,0)
 S SS=$E(HL("ECH"),4)
"RTN","MHV7U",157,0)
 ;
"RTN","MHV7U",158,0)
 S SEG=$G(DATA(0))
"RTN","MHV7U",159,0)
 F FLD=1:1:$O(DATA(""),-1) D
"RTN","MHV7U",160,0)
 . S FLDVAL=$G(DATA(FLD)),SEP=FS
"RTN","MHV7U",161,0)
 . S SEG=SEG_SEP_FLDVAL
"RTN","MHV7U",162,0)
 . F REP=1:1:$O(DATA(FLD,""),-1)  D
"RTN","MHV7U",163,0)
 . . S REPVAL=$G(DATA(FLD,REP))
"RTN","MHV7U",164,0)
 . . S SEP=$S(REP=1:"",1:RS)
"RTN","MHV7U",165,0)
 . . S SEG=SEG_SEP_REPVAL
"RTN","MHV7U",166,0)
 . . F CMP=1:1:$O(DATA(FLD,REP,""),-1) D
"RTN","MHV7U",167,0)
 . . . S CMPVAL=$G(DATA(FLD,REP,CMP))
"RTN","MHV7U",168,0)
 . . . S SEP=$S(CMP=1:"",1:CS)
"RTN","MHV7U",169,0)
 . . . S SEG=SEG_SEP_CMPVAL
"RTN","MHV7U",170,0)
 . . . F SUB=1:1:$O(DATA(FLD,REP,CMP,""),-1) D
"RTN","MHV7U",171,0)
 . . . . S SUBVAL=$G(DATA(FLD,REP,CMP,SUB))
"RTN","MHV7U",172,0)
 . . . . S SEP=$S(SUB=1:"",1:SS)
"RTN","MHV7U",173,0)
 . . . . S SEG=SEG_SEP_SUBVAL
"RTN","MHV7U",174,0)
 Q SEG
"RTN","MHV7U",175,0)
 ;
"RTN","MHV7U",176,0)
BLDWPSEG(WP,SEG,MAXLEN,HL) ;
"RTN","MHV7U",177,0)
 ;Builds segment nodes to add word processing fields to a segment
"RTN","MHV7U",178,0)
 N CNT,LINE,LAST,FS,RS,LENGTH
"RTN","MHV7U",179,0)
 I MAXLEN<1 S MAXLEN=999999999999
"RTN","MHV7U",180,0)
 S FS=HL("FS")         ;field separator
"RTN","MHV7U",181,0)
 S RS=$E(HL("ECH"),2)  ;repeat separator
"RTN","MHV7U",182,0)
 S CNT=$O(SEG(""),-1)+1
"RTN","MHV7U",183,0)
 S LINE=$O(WP(0))
"RTN","MHV7U",184,0)
 S LENGTH=$L(LINE)
"RTN","MHV7U",185,0)
 S SEG(CNT)=""
"RTN","MHV7U",186,0)
 S SEG(CNT)=FS_$$ESCAPE($G(WP(LINE,0)),.HL)
"RTN","MHV7U",187,0)
 F  S LINE=$O(WP(LINE)) Q:LINE=""  D  Q:LENGTH'<MAXLEN
"RTN","MHV7U",188,0)
 . S LENGTH=LENGTH+$L(LINE)
"RTN","MHV7U",189,0)
 . I LENGTH'<MAXLEN S LINE=$E(LINE,1,$L(LINE)-(LENGTH-MAXLEN))
"RTN","MHV7U",190,0)
 . S LAST=$E(SEG(CNT),$L(SEG(CNT)))
"RTN","MHV7U",191,0)
 . S CNT=CNT+1
"RTN","MHV7U",192,0)
 . S SEG(CNT)=$$ESCAPE($G(WP(LINE,0)),.HL)
"RTN","MHV7U",193,0)
 . I $E(SEG(CNT))'=" ",LAST'=" " S SEG(CNT)=RS_SEG(CNT)
"RTN","MHV7U",194,0)
 . Q
"RTN","MHV7U",195,0)
 Q
"RTN","MHV7U",196,0)
 ;
"RTN","MHV7U",197,0)
ADD(VAL,SEP,SEG) ;append a value onto segment
"RTN","MHV7U",198,0)
 ;
"RTN","MHV7U",199,0)
 ;  Input:
"RTN","MHV7U",200,0)
 ;    VAL - value to append
"RTN","MHV7U",201,0)
 ;    SEP - HL7 separator
"RTN","MHV7U",202,0)
 ;
"RTN","MHV7U",203,0)
 ;  Output:
"RTN","MHV7U",204,0)
 ;    SEG - segment passed by reference
"RTN","MHV7U",205,0)
 ;
"RTN","MHV7U",206,0)
 S SEP=$G(SEP)
"RTN","MHV7U",207,0)
 S VAL=$G(VAL)
"RTN","MHV7U",208,0)
 ; Escape VAL??
"RTN","MHV7U",209,0)
 ; If exceed 512 characters don't add
"RTN","MHV7U",210,0)
 S SEG=SEG_SEP_VAL
"RTN","MHV7U",211,0)
 Q
"RTN","MHV7U",212,0)
 ;
"RTN","MHV7U",213,0)
ESCAPE(VAL,HL) ;Escape any special characters
"RTN","MHV7U",214,0)
 ; *** Does not handle long strings of special characters ***
"RTN","MHV7U",215,0)
 ;
"RTN","MHV7U",216,0)
 ;  Input:
"RTN","MHV7U",217,0)
 ;    VAL - value to escape
"RTN","MHV7U",218,0)
 ;     HL - HL7 environment array
"RTN","MHV7U",219,0)
 ;
"RTN","MHV7U",220,0)
 ;  Output:
"RTN","MHV7U",221,0)
 ;    VAL - passed by reference
"RTN","MHV7U",222,0)
 ;
"RTN","MHV7U",223,0)
 N FS      ;field separator
"RTN","MHV7U",224,0)
 N CS      ;component separator
"RTN","MHV7U",225,0)
 N RS      ;repetition separator
"RTN","MHV7U",226,0)
 N ES      ;escape character
"RTN","MHV7U",227,0)
 N SS      ;sub-component separator
"RTN","MHV7U",228,0)
 N L,STR,I
"RTN","MHV7U",229,0)
 ;
"RTN","MHV7U",230,0)
 S FS=HL("FS")
"RTN","MHV7U",231,0)
 S CS=$E(HL("ECH"))
"RTN","MHV7U",232,0)
 S RS=$E(HL("ECH"),2)
"RTN","MHV7U",233,0)
 S ES=$E(HL("ECH"),3)
"RTN","MHV7U",234,0)
 S SS=$E(HL("ECH"),4)
"RTN","MHV7U",235,0)
 ;
"RTN","MHV7U",236,0)
 I VAL[ES D
"RTN","MHV7U",237,0)
 . S L=$L(VAL,ES),STR=""
"RTN","MHV7U",238,0)
 . F I=1:1:L S $P(STR,ES_"E"_ES,I)=$P(VAL,ES,I)
"RTN","MHV7U",239,0)
 . S VAL=STR
"RTN","MHV7U",240,0)
 I VAL[FS D
"RTN","MHV7U",241,0)
 . S L=$L(VAL,FS),STR=""
"RTN","MHV7U",242,0)
 . F I=1:1:L S $P(STR,ES_"F"_ES,I)=$P(VAL,FS,I)
"RTN","MHV7U",243,0)
 . S VAL=STR
"RTN","MHV7U",244,0)
 I VAL[RS D
"RTN","MHV7U",245,0)
 . S L=$L(VAL,RS),STR=""
"RTN","MHV7U",246,0)
 . F I=1:1:L S $P(STR,ES_"R"_ES,I)=$P(VAL,RS,I)
"RTN","MHV7U",247,0)
 . S VAL=STR
"RTN","MHV7U",248,0)
 I VAL[CS D
"RTN","MHV7U",249,0)
 . S L=$L(VAL,CS),STR=""
"RTN","MHV7U",250,0)
 . F I=1:1:L S $P(STR,ES_"S"_ES,I)=$P(VAL,CS,I)
"RTN","MHV7U",251,0)
 . S VAL=STR
"RTN","MHV7U",252,0)
 I VAL[SS D
"RTN","MHV7U",253,0)
 . S L=$L(VAL,SS),STR=""
"RTN","MHV7U",254,0)
 . F I=1:1:L S $P(STR,ES_"T"_ES,I)=$P(VAL,SS,I)
"RTN","MHV7U",255,0)
 . S VAL=STR
"RTN","MHV7U",256,0)
 Q VAL
"RTN","MHV7U",257,0)
 ;
"RTN","MHV7U",258,0)
UNESC(VAL,HL) ;Reconstitute any escaped characters
"RTN","MHV7U",259,0)
 ;
"RTN","MHV7U",260,0)
 ;  Input:
"RTN","MHV7U",261,0)
 ;    VAL - Value to reconstitute
"RTN","MHV7U",262,0)
 ;     HL - HL7 environment array
"RTN","MHV7U",263,0)
 ;
"RTN","MHV7U",264,0)
 ;  Output:
"RTN","MHV7U",265,0)
 ;    VAL - passed by referenc
"RTN","MHV7U",266,0)
 ;
"RTN","MHV7U",267,0)
 N FS      ;field separator
"RTN","MHV7U",268,0)
 N CS      ;component separator
"RTN","MHV7U",269,0)
 N RS      ;repetition separator
"RTN","MHV7U",270,0)
 N ES      ;escape character
"RTN","MHV7U",271,0)
 N SS      ;sub-component separator
"RTN","MHV7U",272,0)
 N L,STR,I,FESC,CESC,RESC,EESC,SESC
"RTN","MHV7U",273,0)
 ;
"RTN","MHV7U",274,0)
 S FS=HL("FS")
"RTN","MHV7U",275,0)
 S CS=$E(HL("ECH"))
"RTN","MHV7U",276,0)
 S RS=$E(HL("ECH"),2)
"RTN","MHV7U",277,0)
 S ES=$E(HL("ECH"),3)
"RTN","MHV7U",278,0)
 S SS=$E(HL("ECH"),4)
"RTN","MHV7U",279,0)
 S FESC=ES_"F"_ES
"RTN","MHV7U",280,0)
 S CESC=ES_"S"_ES
"RTN","MHV7U",281,0)
 S RESC=ES_"R"_ES
"RTN","MHV7U",282,0)
 S EESC=ES_"E"_ES
"RTN","MHV7U",283,0)
 S SESC=ES_"T"_ES
"RTN","MHV7U",284,0)
 ;
"RTN","MHV7U",285,0)
 I VAL'[ES Q VAL
"RTN","MHV7U",286,0)
 I VAL[FESC D
"RTN","MHV7U",287,0)
 . S L=$L(VAL,FESC),STR=""
"RTN","MHV7U",288,0)
 . F I=1:1:L S $P(STR,FS,I)=$P(VAL,FESC,I)
"RTN","MHV7U",289,0)
 . S VAL=STR
"RTN","MHV7U",290,0)
 I VAL[CESC D
"RTN","MHV7U",291,0)
 . S L=$L(VAL,CESC),STR=""
"RTN","MHV7U",292,0)
 . F I=1:1:L S $P(STR,CS,I)=$P(VAL,CESC,I)
"RTN","MHV7U",293,0)
 . S VAL=STR
"RTN","MHV7U",294,0)
 I VAL[RESC D
"RTN","MHV7U",295,0)
 . S L=$L(VAL,RESC),STR=""
"RTN","MHV7U",296,0)
 . F I=1:1:L S $P(STR,RS,I)=$P(VAL,RESC,I)
"RTN","MHV7U",297,0)
 . S VAL=STR
"RTN","MHV7U",298,0)
 I VAL[SESC D
"RTN","MHV7U",299,0)
 . S L=$L(VAL,SESC),STR=""
"RTN","MHV7U",300,0)
 . F I=1:1:L S $P(STR,SS,I)=$P(VAL,SESC,I)
"RTN","MHV7U",301,0)
 . S VAL=STR
"RTN","MHV7U",302,0)
 I VAL[EESC D
"RTN","MHV7U",303,0)
 . S L=$L(VAL,EESC),STR=""
"RTN","MHV7U",304,0)
 . F I=1:1:L S $P(STR,ES,I)=$P(VAL,EESC,I)
"RTN","MHV7U",305,0)
 . S VAL=STR
"RTN","MHV7U",306,0)
 Q VAL
"RTN","MHV7U",307,0)
 ;
"RTN","MHVRQI")
0^15^B5569720
"RTN","MHVRQI",1,0)
MHVRQI ;WAS/GPM - Request Manager Immediate Mode ; [8/22/05 6:19pm]
"RTN","MHVRQI",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHVRQI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVRQI",4,0)
 ;
"RTN","MHVRQI",5,0)
 ;
"RTN","MHVRQI",6,0)
REALTIME(REQ,XMT,HL) ; Manage real time requests
"RTN","MHVRQI",7,0)
 ;
"RTN","MHVRQI",8,0)
 ;  It is assumed no ROI logging or checking is needed for real time
"RTN","MHVRQI",9,0)
 ; request.
"RTN","MHVRQI",10,0)
 ;
"RTN","MHVRQI",11,0)
 ;  Triage, execute/extract and respond to real time requests and
"RTN","MHVRQI",12,0)
 ; queries.  If the request is rejected (blocked, or doesn't support
"RTN","MHVRQI",13,0)
 ; real time access), send a negative acknowledgement, otherwise call
"RTN","MHVRQI",14,0)
 ; the execute/extraction routine.  If there are no errors transmit
"RTN","MHVRQI",15,0)
 ; the results, send a negative acknowledgement if there are errors.
"RTN","MHVRQI",16,0)
 ;
"RTN","MHVRQI",17,0)
 ; Input:
"RTN","MHVRQI",18,0)
 ;      REQ - Parsed query and query paramters
"RTN","MHVRQI",19,0)
 ;      XMT - Transmission parameters
"RTN","MHVRQI",20,0)
 ;       HL - HL7 package array variable
"RTN","MHVRQI",21,0)
 ;
"RTN","MHVRQI",22,0)
 ; Output:
"RTN","MHVRQI",23,0)
 ;      Extract information and respond to query
"RTN","MHVRQI",24,0)
 ;
"RTN","MHVRQI",25,0)
 N ERR,DATAROOT
"RTN","MHVRQI",26,0)
 S DATAROOT="^TMP(""MHVEXTRACT"",$J,"_REQ("TYPE")_")"
"RTN","MHVRQI",27,0)
 S ERR=""
"RTN","MHVRQI",28,0)
 ;
"RTN","MHVRQI",29,0)
 D LOG^MHV7U("REAL TIME","BEGIN","S",0)
"RTN","MHVRQI",30,0)
 ;
"RTN","MHVRQI",31,0)
 I $$REJECT(.REQ,.ERR) D  Q
"RTN","MHVRQI",32,0)
 . D LOG^MHV7U("REQUEST CHECK","REJECT^"_ERR,"S",0)
"RTN","MHVRQI",33,0)
 . D XMIT^MHV7T(.REQ,.XMT,ERR,"",.HL)
"RTN","MHVRQI",34,0)
 D LOG^MHV7U("REQUEST CHECK","PROCESS","S",0)
"RTN","MHVRQI",35,0)
 ;
"RTN","MHVRQI",36,0)
 I '$$EXECUTE(.REQ,.ERR,DATAROOT) D  Q
"RTN","MHVRQI",37,0)
 . D LOG^MHV7U("EXECUTE","ERROR^"_ERR,"S",0)
"RTN","MHVRQI",38,0)
 . D XMIT^MHV7T(.REQ,.XMT,ERR,DATAROOT,.HL)
"RTN","MHVRQI",39,0)
 D LOG^MHV7U("EXECUTE","COMPLETE","S",0)
"RTN","MHVRQI",40,0)
 ;
"RTN","MHVRQI",41,0)
 D XMIT^MHV7T(.REQ,.XMT,ERR,DATAROOT,.HL)
"RTN","MHVRQI",42,0)
 K @DATAROOT
"RTN","MHVRQI",43,0)
 ;
"RTN","MHVRQI",44,0)
 D LOG^MHV7U("REAL TIME","END","S",0)
"RTN","MHVRQI",45,0)
 ;
"RTN","MHVRQI",46,0)
 Q
"RTN","MHVRQI",47,0)
 ;
"RTN","MHVRQI",48,0)
REJECT(REQ,ERR) ;Check to see if request can be processed
"RTN","MHVRQI",49,0)
 S ERR=""
"RTN","MHVRQI",50,0)
 I REQ("BLOCKED") D  Q 1
"RTN","MHVRQI",51,0)
 . S ERR="^207^AR^Request Type Blocked by Site"
"RTN","MHVRQI",52,0)
 . I $D(REQ("QPD")) S ERR="QPD^1^5"_ERR    ;Its a query flag the QPD
"RTN","MHVRQI",53,0)
 . E  S ERR="MSH^1^9"_ERR
"RTN","MHVRQI",54,0)
 . Q
"RTN","MHVRQI",55,0)
 I 'REQ("REALTIME") D  Q 1
"RTN","MHVRQI",56,0)
 . S ERR="^207^AR^Real Time Calls Not Supported By Request Type"
"RTN","MHVRQI",57,0)
 . I $D(REQ("QPD")) S ERR="RCP^1^1"_ERR    ;Its a query flag the RCP
"RTN","MHVRQI",58,0)
 . E  S ERR="MSH^1^9"_ERR
"RTN","MHVRQI",59,0)
 . Q
"RTN","MHVRQI",60,0)
 Q 0
"RTN","MHVRQI",61,0)
 ;
"RTN","MHVRQI",62,0)
EXECUTE(REQ,ERR,DATAROOT) ;Execute action or extraction
"RTN","MHVRQI",63,0)
 ;Calls the execute routine for this request type
"RTN","MHVRQI",64,0)
 ;For queries this is the extraction routine
"RTN","MHVRQI",65,0)
 ;Parameters can be passed on REQ
"RTN","MHVRQI",66,0)
 ;Errors are passed on ERR
"RTN","MHVRQI",67,0)
 ;DATAROOT is the name holding the data, can be local or global
"RTN","MHVRQI",68,0)
 S ERR=""
"RTN","MHVRQI",69,0)
 D @(REQ("EXECUTE")_"(.REQ,.ERR,DATAROOT)")
"RTN","MHVRQI",70,0)
 I ERR D  Q 0
"RTN","MHVRQI",71,0)
 . S ERR="^207^AR^"_$P(ERR,"^",2)
"RTN","MHVRQI",72,0)
 . I $D(REQ("QPD")) S ERR="QPD^1^5"_ERR    ;Its a query flag the QPD
"RTN","MHVRQI",73,0)
 . E  S ERR="MSH^1^9"_ERR
"RTN","MHVRQI",74,0)
 . Q
"RTN","MHVRQI",75,0)
 Q 1
"RTN","MHVRQI",76,0)
 ;
"RTN","MHVU1")
0^18^B3571161
"RTN","MHVU1",1,0)
MHVU1 ;WAS/GPM - MHV UTILITIES  ; [8/22/05 6:20pm]
"RTN","MHVU1",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHVU1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVU1",4,0)
 ;
"RTN","MHVU1",5,0)
 Q
"RTN","MHVU1",6,0)
 ;
"RTN","MHVU1",7,0)
NOTIFY(ADM) ; Notify MHV server of patch installation, and configuration data
"RTN","MHVU1",8,0)
 ;  Sends the current version and last patch installed for the 
"RTN","MHVU1",9,0)
 ; My HealtheVet package.  This is called by post install routines to
"RTN","MHVU1",10,0)
 ; notify the MHV server of patch installation.
"RTN","MHVU1",11,0)
 ;  Configuration data passed in ADM will also be sent.
"RTN","MHVU1",12,0)
 ;
"RTN","MHVU1",13,0)
 ;  Input:
"RTN","MHVU1",14,0)
 ;     ADM - Array of administrative data
"RTN","MHVU1",15,0)
 ;                SITE NUMBER - From Institution file
"RTN","MHVU1",16,0)
 ;                  SITE NAME - Descriptive Site Name
"RTN","MHVU1",17,0)
 ;                     DOMAIN - System Domain Name
"RTN","MHVU1",18,0)
 ;               SYSTEM TYPE  - Production or Test
"RTN","MHVU1",19,0)
 ;                    VERSION - MHV version
"RTN","MHVU1",20,0)
 ;               PATCH NUMBER - Last MHV patch loaded
"RTN","MHVU1",21,0)
 ;            RPC BROKER PORT - Broker port MHV Server should use
"RTN","MHVU1",22,0)
 ;                 IP ADDRESS - System IP address
"RTN","MHVU1",23,0)
 ;          HL7 LISTENER PORT - For HL7 listener
"RTN","MHVU1",24,0)
 ;
"RTN","MHVU1",25,0)
 ;  Output:
"RTN","MHVU1",26,0)
 ;     MFN^Z01 Message is sent to the MHV server
"RTN","MHVU1",27,0)
 ;
"RTN","MHVU1",28,0)
 ;
"RTN","MHVU1",29,0)
 N XMT
"RTN","MHVU1",30,0)
 D LOG^MHV7U("ADM",.ADM,"M",1)
"RTN","MHVU1",31,0)
 S XMT("BUILDER")="MFNZ01^MHV7B0"
"RTN","MHVU1",32,0)
 S XMT("PROTOCOL")="MHV MFN-Z01 Event Driver"
"RTN","MHVU1",33,0)
 ; Use email transmitter for now
"RTN","MHVU1",34,0)
 S XMT("SAF")=ADM("SITE NUMBER")
"RTN","MHVU1",35,0)
 S XMT("EMAIL")="VHAMHVSITECOMMCONFIG@MED.VA.GOV"
"RTN","MHVU1",36,0)
 D EMAIL^MHV7T(.ADM,.XMT,"","","")
"RTN","MHVU1",37,0)
 Q
"RTN","MHVU1",38,0)
 ;
"RTN","MHVU1",39,0)
SETADM(ADM) ; Set up ADM array of site information
"RTN","MHVU1",40,0)
 ;
"RTN","MHVU1",41,0)
 ;  Integration Agreements:
"RTN","MHVU1",42,0)
 ;        10141 : $$LAST^XPDUTL,$$VERSION^XPDUTL
"RTN","MHVU1",43,0)
 ;         3552 : $$PARAM^HLCS2
"RTN","MHVU1",44,0)
 ;         4440 : $$PROD^XUPROD
"RTN","MHVU1",45,0)
 ;
"RTN","MHVU1",46,0)
 ;  Input: None
"RTN","MHVU1",47,0)
 ;
"RTN","MHVU1",48,0)
 ;  Output:
"RTN","MHVU1",49,0)
 ;     ADM - Array of administrative data
"RTN","MHVU1",50,0)
 ;                SITE NUMBER - From Institution file
"RTN","MHVU1",51,0)
 ;                  SITE NAME - Descriptive Site Name
"RTN","MHVU1",52,0)
 ;                     DOMAIN - System Domain Name
"RTN","MHVU1",53,0)
 ;               SYSTEM TYPE  - Production or Test
"RTN","MHVU1",54,0)
 ;                    VERSION - MHV version
"RTN","MHVU1",55,0)
 ;               PATCH NUMBER - Last MHV patch loaded
"RTN","MHVU1",56,0)
 ;            RPC BROKER PORT - Broker port MHV Server should use
"RTN","MHVU1",57,0)
 ;                 IP ADDRESS - System IP address
"RTN","MHVU1",58,0)
 ;          HL7 LISTENER PORT - For HL7 listener
"RTN","MHVU1",59,0)
 ;
"RTN","MHVU1",60,0)
 N PARAM,VERSION,PATCH
"RTN","MHVU1",61,0)
 S PARAM=$$PARAM^HLCS2
"RTN","MHVU1",62,0)
 S VERSION=$$VERSION^XPDUTL("My HealtheVet")
"RTN","MHVU1",63,0)
 S PATCH=$P($$LAST^XPDUTL("My HealtheVet",.VERSION),"^")
"RTN","MHVU1",64,0)
 I PATCH<1 S PATCH=""
"RTN","MHVU1",65,0)
 ;
"RTN","MHVU1",66,0)
 S ADM("SITE NUMBER")=$P(PARAM,"^",6)
"RTN","MHVU1",67,0)
 S ADM("SITE NAME")=$P(PARAM,"^",5)
"RTN","MHVU1",68,0)
 S ADM("DOMAIN")=$P(PARAM,"^",2)
"RTN","MHVU1",69,0)
 S ADM("SYSTEM TYPE")=$S($$PROD^XUPROD(1):"P",1:"T")
"RTN","MHVU1",70,0)
 S ADM("VERSION")=VERSION
"RTN","MHVU1",71,0)
 S ADM("PATCH NUMBER")=PATCH
"RTN","MHVU1",72,0)
 S ADM("RPC BROKER PORT")=""
"RTN","MHVU1",73,0)
 S ADM("IP ADDRESS")=""
"RTN","MHVU1",74,0)
 S ADM("HL7 LISTENER PORT")=5000
"RTN","MHVU1",75,0)
 Q
"RTN","MHVU1",76,0)
 ;
"RTN","MHVXRX")
0^9^B12216271
"RTN","MHVXRX",1,0)
MHVXRX ;WAS/GPM - Prescription extract ; [8/23/05 12:33am]
"RTN","MHVXRX",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHVXRX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXRX",4,0)
 ;
"RTN","MHVXRX",5,0)
 Q
"RTN","MHVXRX",6,0)
 ;
"RTN","MHVXRX",7,0)
PROFILE(QRY,ERR,DATAROOT) ; Entry point to get prescription profile
"RTN","MHVXRX",8,0)
 ; Retrieves requested prescripton data and returns it in DATAROOT
"RTN","MHVXRX",9,0)
 ; Retrieves all prescriptions with an active status
"RTN","MHVXRX",10,0)
 ;
"RTN","MHVXRX",11,0)
 ;  Integration Agreements:
"RTN","MHVXRX",12,0)
 ;         3768 : AP2^PSOPRA,AP5^PSOPRA
"RTN","MHVXRX",13,0)
 ;         4687 : EN^PSOMHV1
"RTN","MHVXRX",14,0)
 ;
"RTN","MHVXRX",15,0)
 ;  Input:
"RTN","MHVXRX",16,0)
 ;       QRY - Query array
"RTN","MHVXRX",17,0)
 ;          QRY(DFN) - (required) Pointer to PATIENT (#2) file
"RTN","MHVXRX",18,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXRX",19,0)
 ;
"RTN","MHVXRX",20,0)
 ;  Output:
"RTN","MHVXRX",21,0)
 ;  DATAROOT - Populated data array, includes # of hits
"RTN","MHVXRX",22,0)
 ;       ERR - Errors during extraction
"RTN","MHVXRX",23,0)
 ;
"RTN","MHVXRX",24,0)
 N U,DT,HIT,DFN,PRI,FROM,TO,STA,DRUG,DIV,MHVSTAT,RXN,MHVDATE,INDEX
"RTN","MHVXRX",25,0)
 ;
"RTN","MHVXRX",26,0)
 D LOG^MHV7U("MHVXRX Profile","BEGIN","S",0)
"RTN","MHVXRX",27,0)
 S U="^",DT=$$DT^XLFDT
"RTN","MHVXRX",28,0)
 S ERR=0,HIT=0
"RTN","MHVXRX",29,0)
 K @DATAROOT
"RTN","MHVXRX",30,0)
 K ^TMP("PSO",$J)
"RTN","MHVXRX",31,0)
 S DFN=$G(QRY("DFN"))
"RTN","MHVXRX",32,0)
 S PRI=$G(QRY("PRI"))
"RTN","MHVXRX",33,0)
 S FROM=DT
"RTN","MHVXRX",34,0)
 S TO=""
"RTN","MHVXRX",35,0)
 ;
"RTN","MHVXRX",36,0)
 D EN^PSOMHV1(DFN,FROM,TO)
"RTN","MHVXRX",37,0)
 ;
"RTN","MHVXRX",38,0)
 S STA="",INDEX=""
"RTN","MHVXRX",39,0)
 F STA="ACT","SUS" F  S INDEX=$O(^TMP("PSO",$J,STA,INDEX)) Q:INDEX=""  D SET
"RTN","MHVXRX",40,0)
 ;
"RTN","MHVXRX",41,0)
 K ^TMP("PSO",$J)
"RTN","MHVXRX",42,0)
 S @DATAROOT=HIT
"RTN","MHVXRX",43,0)
 D LOG^MHV7U("MHVXRX Profile HITS=",HIT,"S",0)
"RTN","MHVXRX",44,0)
 D LOG^MHV7U("MHVXRX Profile","END","S",0)
"RTN","MHVXRX",45,0)
 Q
"RTN","MHVXRX",46,0)
 ;
"RTN","MHVXRX",47,0)
EXTRACT(QRY,ERR,DATAROOT) ; Entry point to extract prescription data
"RTN","MHVXRX",48,0)
 ; Retrieves requested prescripton data and returns it in DATAROOT
"RTN","MHVXRX",49,0)
 ; Retrieves all prescriptions of all statuses in given date range
"RTN","MHVXRX",50,0)
 ; Statuses of deleted are filtered by the pharmacy API.
"RTN","MHVXRX",51,0)
 ;
"RTN","MHVXRX",52,0)
 ;  Integration Agreements:
"RTN","MHVXRX",53,0)
 ;         3768 : AP2^PSOPRA,AP5^PSOPRA
"RTN","MHVXRX",54,0)
 ;         4687 : EN3^PSOMHV1
"RTN","MHVXRX",55,0)
 ;
"RTN","MHVXRX",56,0)
 ;  Input:
"RTN","MHVXRX",57,0)
 ;       QRY - Query array
"RTN","MHVXRX",58,0)
 ;          QRY(DFN) - (required) Pointer to PATIENT (#2) file
"RTN","MHVXRX",59,0)
 ;         QRY(FROM) - Date to start from
"RTN","MHVXRX",60,0)
 ;           QRY(TO) - Date to go to
"RTN","MHVXRX",61,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXRX",62,0)
 ;
"RTN","MHVXRX",63,0)
 ;  Output:
"RTN","MHVXRX",64,0)
 ;  DATAROOT - Populated data array, includes # of hits
"RTN","MHVXRX",65,0)
 ;       ERR - Errors during extraction
"RTN","MHVXRX",66,0)
 ;
"RTN","MHVXRX",67,0)
 N U,DT,HIT,DFN,PRI,FROM,TO,STA,DRUG,DIV,MHVSTAT,RXN,MHVDATE,INDEX
"RTN","MHVXRX",68,0)
 ;
"RTN","MHVXRX",69,0)
 D LOG^MHV7U("MHVXRX Extract","BEGIN","S",0)
"RTN","MHVXRX",70,0)
 S U="^",DT=$$DT^XLFDT
"RTN","MHVXRX",71,0)
 S ERR=0,HIT=0
"RTN","MHVXRX",72,0)
 K @DATAROOT
"RTN","MHVXRX",73,0)
 K ^TMP("PS",$J)
"RTN","MHVXRX",74,0)
 S DFN=$G(QRY("DFN"))
"RTN","MHVXRX",75,0)
 S PRI=$G(QRY("PRI"))
"RTN","MHVXRX",76,0)
 S FROM=$G(QRY("FROM"))
"RTN","MHVXRX",77,0)
 S TO=$G(QRY("TO"))
"RTN","MHVXRX",78,0)
 ;
"RTN","MHVXRX",79,0)
 I FROM="" S FROM=2000101  ;01/01/1900
"RTN","MHVXRX",80,0)
 ;
"RTN","MHVXRX",81,0)
 ; The EN3^PSOMHV1 call uses RX IEN instead of DRUG as a
"RTN","MHVXRX",82,0)
 ; subscript in ^TMP("PSO",$J).  This was a late breaking change to
"RTN","MHVXRX",83,0)
 ; PSOMHV1 to support historical extracts.
"RTN","MHVXRX",84,0)
 D EN3^PSOMHV1(DFN,FROM,TO)
"RTN","MHVXRX",85,0)
 ;
"RTN","MHVXRX",86,0)
 S STA="",INDEX=""
"RTN","MHVXRX",87,0)
 F  S STA=$O(^TMP("PSO",$J,STA)) Q:STA=""  I STA'="PEN" F  S INDEX=$O(^TMP("PSO",$J,STA,INDEX)) Q:INDEX=""  D SET
"RTN","MHVXRX",88,0)
 ;
"RTN","MHVXRX",89,0)
 K ^TMP("PSO",$J)
"RTN","MHVXRX",90,0)
 S @DATAROOT=HIT
"RTN","MHVXRX",91,0)
 D LOG^MHV7U("MHVXRX Extract HITS=",HIT,"S",0)
"RTN","MHVXRX",92,0)
 D LOG^MHV7U("MHVXRX Extract","END","S",0)
"RTN","MHVXRX",93,0)
 Q
"RTN","MHVXRX",94,0)
 ;
"RTN","MHVXRX",95,0)
SET ;
"RTN","MHVXRX",96,0)
 ;INDEX will be RXIEN if called from EXTRACT
"RTN","MHVXRX",97,0)
 ;INDEX will be drug name if called from PROFILE
"RTN","MHVXRX",98,0)
 S RXN=$P($G(^TMP("PSO",$J,STA,INDEX,"RXN",0)),"^")
"RTN","MHVXRX",99,0)
 I RXN="" Q
"RTN","MHVXRX",100,0)
 I $D(QRY("RXLIST")) Q:'$D(QRY("RXLIST",RXN))
"RTN","MHVXRX",101,0)
 S MHVSTAT=$$AP2^PSOPRA(DFN,RXN)
"RTN","MHVXRX",102,0)
 S MHVDATE=$P(MHVSTAT,"^",2)
"RTN","MHVXRX",103,0)
 S MHVSTAT=$P(MHVSTAT,"^",1)
"RTN","MHVXRX",104,0)
 I MHVSTAT>0 I $$AP5^PSOPRA(DFN,RXN)   ;Clear RXN from queue
"RTN","MHVXRX",105,0)
 S DRUG=$P($G(^TMP("PSO",$J,STA,INDEX,0)),"^",1)   ;Drug Name
"RTN","MHVXRX",106,0)
 S HIT=HIT+1
"RTN","MHVXRX",107,0)
 S @DATAROOT@(HIT)=RXN_U_DRUG_U_MHVSTAT_U_MHVDATE
"RTN","MHVXRX",108,0)
 S @DATAROOT@(HIT,0)=$G(^TMP("PSO",$J,STA,INDEX,0))
"RTN","MHVXRX",109,0)
 S @DATAROOT@(HIT,"P")=$G(^TMP("PSO",$J,STA,INDEX,"P",0))
"RTN","MHVXRX",110,0)
 S @DATAROOT@(HIT,"RXN")=$G(^TMP("PSO",$J,STA,INDEX,"RXN",0))
"RTN","MHVXRX",111,0)
 S @DATAROOT@(HIT,"DIV")=$G(^TMP("PSO",$J,STA,INDEX,"DIV",0))
"RTN","MHVXRX",112,0)
 I '$D(^TMP("PSO",$J,STA,INDEX,"SIG")) S @DATAROOT@(HIT,"SIG",0)=0
"RTN","MHVXRX",113,0)
 E  M @DATAROOT@(HIT,"SIG")=^TMP("PSO",$J,STA,INDEX,"SIG")
"RTN","MHVXRX",114,0)
 Q
"RTN","MHVXRX",115,0)
 ;
"RTN","MHVXRXR")
0^14^B1479238
"RTN","MHVXRXR",1,0)
MHVXRXR ;WAS/GPM - Prescription refill request ; [8/23/05 12:34am]
"RTN","MHVXRXR",2,0)
 ;;1.0;My HealtheVet;;Aug 23, 2005
"RTN","MHVXRXR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXRXR",4,0)
 ;
"RTN","MHVXRXR",5,0)
 Q
"RTN","MHVXRXR",6,0)
 ;
"RTN","MHVXRXR",7,0)
REQUEST(QRY,ERR,DATAROOT) ; Entry point to extract appointment data
"RTN","MHVXRXR",8,0)
 ; Retrieves requested appointment data and returns it in DATAROOT
"RTN","MHVXRXR",9,0)
 ;
"RTN","MHVXRXR",10,0)
 ;  Integration Agreements:
"RTN","MHVXRXR",11,0)
 ;         3768 : AP1^PSOPRA
"RTN","MHVXRXR",12,0)
 ;
"RTN","MHVXRXR",13,0)
 ;  Input:
"RTN","MHVXRXR",14,0)
 ;       QRY - Query array
"RTN","MHVXRXR",15,0)
 ;          QRY(DFN) - (required) Pointer to PATIENT (#2) file
"RTN","MHVXRXR",16,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXRXR",17,0)
 ;
"RTN","MHVXRXR",18,0)
 ;  Output:
"RTN","MHVXRXR",19,0)
 ;  DATAROOT - Populated data array, includes # of hits
"RTN","MHVXRXR",20,0)
 ;       ERR - Errors during extraction
"RTN","MHVXRXR",21,0)
 ;
"RTN","MHVXRXR",22,0)
 N CNT,RX,PORDERN,ORDERTM,STATUS,DIV,DFN,U
"RTN","MHVXRXR",23,0)
 ;
"RTN","MHVXRXR",24,0)
 D LOG^MHV7U("MHVXRXR","BEGIN","S",0)
"RTN","MHVXRXR",25,0)
 S U="^"
"RTN","MHVXRXR",26,0)
 S ERR=0
"RTN","MHVXRXR",27,0)
 K @DATAROOT
"RTN","MHVXRXR",28,0)
 S DFN=$G(QRY("DFN"))
"RTN","MHVXRXR",29,0)
 ;
"RTN","MHVXRXR",30,0)
 F CNT=1:1 Q:'$D(QRY("RX",CNT))  D
"RTN","MHVXRXR",31,0)
 . S RX=$G(QRY("RX",CNT))
"RTN","MHVXRXR",32,0)
 . S PORDERN=$P(RX,"^",2)
"RTN","MHVXRXR",33,0)
 . S ORDERTM=$P(RX,"^",3)
"RTN","MHVXRXR",34,0)
 . S RX=$P(RX,"^")
"RTN","MHVXRXR",35,0)
 . S STATUS=$$AP1^PSOPRA(DFN,RX)
"RTN","MHVXRXR",36,0)
 . S @DATAROOT@(CNT)=RX_U_STATUS_U_PORDERN_U_ORDERTM
"RTN","MHVXRXR",37,0)
 . Q
"RTN","MHVXRXR",38,0)
 ;
"RTN","MHVXRXR",39,0)
 S @DATAROOT=CNT-1
"RTN","MHVXRXR",40,0)
 D LOG^MHV7U("MHVXRXR","END","S",0)
"RTN","MHVXRXR",41,0)
 Q
"SEC","^DIC",2275.3,2275.3,0,"AUDIT")
@
"SEC","^DIC",2275.3,2275.3,0,"DD")
@
"SEC","^DIC",2275.3,2275.3,0,"DEL")
@
"SEC","^DIC",2275.3,2275.3,0,"LAYGO")
@
"SEC","^DIC",2275.3,2275.3,0,"RD")
@
"SEC","^DIC",2275.3,2275.3,0,"WR")
@
"VER")
8.0^22.0
"^DD",2275.3,2275.3,0)
FIELD^^1^6
"^DD",2275.3,2275.3,0,"DDA")
N
"^DD",2275.3,2275.3,0,"DT")
3050113
"^DD",2275.3,2275.3,0,"IX","B",2275.3,.01)

"^DD",2275.3,2275.3,0,"IX","C",2275.3,.02)

"^DD",2275.3,2275.3,0,"IX","D",2275.31,.01)

"^DD",2275.3,2275.3,0,"NM","MHV REQUEST TYPE")

"^DD",2275.3,2275.3,0,"PT",2275.21,.01)

"^DD",2275.3,2275.3,0,"VRPK")
My HealtheVet
"^DD",2275.3,2275.3,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",2275.3,2275.3,.01,1,0)
^.1
"^DD",2275.3,2275.3,.01,1,1,0)
2275.3^B
"^DD",2275.3,2275.3,.01,1,1,1)
S ^MHV(2275.3,"B",$E(X,1,30),DA)=""
"^DD",2275.3,2275.3,.01,1,1,2)
K ^MHV(2275.3,"B",$E(X,1,30),DA)
"^DD",2275.3,2275.3,.01,3)
Answer must be 3-30 characters in length
"^DD",2275.3,2275.3,.01,"DT")
3030618
"^DD",2275.3,2275.3,.02,0)
NUMBER^NJ9,0^^0;2^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1.N) X
"^DD",2275.3,2275.3,.02,1,0)
^.1
"^DD",2275.3,2275.3,.02,1,1,0)
2275.3^C
"^DD",2275.3,2275.3,.02,1,1,1)
S ^MHV(2275.3,"C",$E(X,1,30),DA)=""
"^DD",2275.3,2275.3,.02,1,1,2)
K ^MHV(2275.3,"C",$E(X,1,30),DA)
"^DD",2275.3,2275.3,.02,1,1,"DT")
3030618
"^DD",2275.3,2275.3,.02,3)
Type a number between 1 and 999999999, 0 Decimal Digits
"^DD",2275.3,2275.3,.02,"DT")
3040309
"^DD",2275.3,2275.3,.03,0)
BLOCKED?^S^1:YES;0:NO;^0;3^Q
"^DD",2275.3,2275.3,.03,"DT")
3040227
"^DD",2275.3,2275.3,.04,0)
REALTIME?^S^0:NOT ALLOWED;1:ALLOWED;^0;4^Q
"^DD",2275.3,2275.3,.04,"DT")
3050113
"^DD",2275.3,2275.3,.05,0)
EXECUTE ROUTINE^F^^0;5^K:$L(X)>17!($L(X)<2) X
"^DD",2275.3,2275.3,.05,3)
Answer must be 2-17 characters in length
"^DD",2275.3,2275.3,.05,"DT")
3050113
"^DD",2275.3,2275.3,1,0)
MHV DATATYPE^2275.31^^1;0
"^DD",2275.3,2275.31,0)
MHV DATATYPE SUB-FIELD^^.01^1
"^DD",2275.3,2275.31,0,"DT")
3040802
"^DD",2275.3,2275.31,0,"IX","B",2275.31,.01)

"^DD",2275.3,2275.31,0,"NM","MHV DATATYPE")

"^DD",2275.3,2275.31,0,"UP")
2275.3
"^DD",2275.3,2275.31,.01,0)
MHV DATATYPE^F^^0;1^K:$L(X)>60!($L(X)<1) X
"^DD",2275.3,2275.31,.01,1,0)
^.1
"^DD",2275.3,2275.31,.01,1,1,0)
2275.31^B
"^DD",2275.3,2275.31,.01,1,1,1)
S ^MHV(2275.3,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",2275.3,2275.31,.01,1,1,2)
K ^MHV(2275.3,DA(1),1,"B",$E(X,1,30),DA)
"^DD",2275.3,2275.31,.01,1,2,0)
2275.3^D
"^DD",2275.3,2275.31,.01,1,2,1)
S ^MHV(2275.3,"D",$E(X,1,30),DA(1),DA)=""
"^DD",2275.3,2275.31,.01,1,2,2)
K ^MHV(2275.3,"D",$E(X,1,30),DA(1),DA)
"^DD",2275.3,2275.31,.01,1,2,"DT")
3040309
"^DD",2275.3,2275.31,.01,3)
Answer must be 1-60 characters in length
"^DD",2275.3,2275.31,.01,"DT")
3040802
"^DIC",2275.3,2275.3,0)
MHV REQUEST TYPE^2275.3
"^DIC",2275.3,2275.3,0,"GL")
^MHV(2275.3,
"^DIC",2275.3,2275.3,"%",0)
^1.005^1^1
"^DIC",2275.3,2275.3,"%",1,0)
MHV
"^DIC",2275.3,2275.3,"%","B","MHV",1)

"^DIC",2275.3,2275.3,"%D",0)
^1.001^5^5^3050414^^
"^DIC",2275.3,2275.3,"%D",1,0)
This file contains the data request types support by My HealtheVet.
"^DIC",2275.3,2275.3,"%D",2,0)
A request is typically a query for a data domain, but can be just about 
"^DIC",2275.3,2275.3,"%D",3,0)
any operation that can be requested via HL7 and requires some code to be 
"^DIC",2275.3,2275.3,"%D",4,0)
executed within the MHV package.  The file defines much of the behavior 
"^DIC",2275.3,2275.3,"%D",5,0)
for these requests.
"^DIC",2275.3,"B","MHV REQUEST TYPE",2275.3)

**END**
**END**
