Released XU*8*404 SEQ #346
Extracted from mail message
**KIDS**:XU*8.0*404^

**INSTALL NAME**
XU*8.0*404
"BLD",940,0)
XU*8.0*404^KERNEL^0^3060816^y
"BLD",940,1,0)
^^5^5^3060814^
"BLD",940,1,1,0)
This patch is part of the Broker Security Enhancement (in conjunction 
"BLD",940,1,2,0)
with patch XWB*1.1*45).
"BLD",940,1,3,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",940,1,4,0)
Patch XU*8*404.
"BLD",940,1,5,0)

"BLD",940,4,0)
^9.64PA^^0
"BLD",940,6.3)
7
"BLD",940,"KRN",0)
^9.67PA^8989.52^19
"BLD",940,"KRN",.4,0)
.4
"BLD",940,"KRN",.401,0)
.401
"BLD",940,"KRN",.402,0)
.402
"BLD",940,"KRN",.403,0)
.403
"BLD",940,"KRN",.5,0)
.5
"BLD",940,"KRN",.84,0)
.84
"BLD",940,"KRN",3.6,0)
3.6
"BLD",940,"KRN",3.8,0)
3.8
"BLD",940,"KRN",9.2,0)
9.2
"BLD",940,"KRN",9.8,0)
9.8
"BLD",940,"KRN",9.8,"NM",0)
^9.68A^4^3
"BLD",940,"KRN",9.8,"NM",1,0)
XUSBSE1^^0^B24454678
"BLD",940,"KRN",9.8,"NM",2,0)
XUSBSE2^^0^B9339084
"BLD",940,"KRN",9.8,"NM",4,0)
XUSRB^^0^B30617453
"BLD",940,"KRN",9.8,"NM","B","XUSBSE1",1)

"BLD",940,"KRN",9.8,"NM","B","XUSBSE2",2)

"BLD",940,"KRN",9.8,"NM","B","XUSRB",4)

"BLD",940,"KRN",19,0)
19
"BLD",940,"KRN",19.1,0)
19.1
"BLD",940,"KRN",101,0)
101
"BLD",940,"KRN",409.61,0)
409.61
"BLD",940,"KRN",771,0)
771
"BLD",940,"KRN",870,0)
870
"BLD",940,"KRN",8989.51,0)
8989.51
"BLD",940,"KRN",8989.52,0)
8989.52
"BLD",940,"KRN",8994,0)
8994
"BLD",940,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",940,"KRN",8994,"NM",1,0)
XUS SET VISITOR^^0
"BLD",940,"KRN",8994,"NM",2,0)
XUS GET VISITOR^^0
"BLD",940,"KRN",8994,"NM","B","XUS GET VISITOR",2)

"BLD",940,"KRN",8994,"NM","B","XUS SET VISITOR",1)

"BLD",940,"KRN","B",.4,.4)

"BLD",940,"KRN","B",.401,.401)

"BLD",940,"KRN","B",.402,.402)

"BLD",940,"KRN","B",.403,.403)

"BLD",940,"KRN","B",.5,.5)

"BLD",940,"KRN","B",.84,.84)

"BLD",940,"KRN","B",3.6,3.6)

"BLD",940,"KRN","B",3.8,3.8)

"BLD",940,"KRN","B",9.2,9.2)

"BLD",940,"KRN","B",9.8,9.8)

"BLD",940,"KRN","B",19,19)

"BLD",940,"KRN","B",19.1,19.1)

"BLD",940,"KRN","B",101,101)

"BLD",940,"KRN","B",409.61,409.61)

"BLD",940,"KRN","B",771,771)

"BLD",940,"KRN","B",870,870)

"BLD",940,"KRN","B",8989.51,8989.51)

"BLD",940,"KRN","B",8989.52,8989.52)

"BLD",940,"KRN","B",8994,8994)

"BLD",940,"QUES",0)
^9.62^^
"BLD",940,"REQB",0)
^9.611^1^1
"BLD",940,"REQB",1,0)
XWB*1.1*45^2
"BLD",940,"REQB","B","XWB*1.1*45",1)

"KRN",8994,167,-1)
0^1
"KRN",8994,167,0)
XUS SET VISITOR^SETVISIT^XUSBSE1^1
"KRN",8994,168,-1)
0^2
"KRN",8994,168,0)
XUS GET VISITOR^GETVISIT^XUSBSE1^1
"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3051215^2970507^.5
"PKG",3,22,1,"PAH",1,0)
404^3060816^2
"PKG",3,22,1,"PAH",1,1,0)
^^5^5^3060816
"PKG",3,22,1,"PAH",1,1,1,0)
This patch is part of the Broker Security Enhancement (in conjunction 
"PKG",3,22,1,"PAH",1,1,2,0)
with patch XWB*1.1*45).
"PKG",3,22,1,"PAH",1,1,3,0)
Please refer to the Description in the FORUM Patch Module for details.
"PKG",3,22,1,"PAH",1,1,4,0)
Patch XU*8*404.
"PKG",3,22,1,"PAH",1,1,5,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","XUSBSE1")
0^1^B24454678^n/a
"RTN","XUSBSE1",1,0)
XUSBSE1 ;JLI/OAK-OIFO - MODIFICATIONS FOR BSE ;08/16/2006
"RTN","XUSBSE1",2,0)
 ;;8.0;KERNEL;**404**;Jul 10, 1995;Build 7
"RTN","XUSBSE1",3,0)
 ; SETVISIT - returns a BSE token
"RTN","XUSBSE1",4,0)
SETVISIT(RES) ; .RPC
"RTN","XUSBSE1",5,0)
 N TOKEN
"RTN","XUSBSE1",6,0)
 S TOKEN=$$HANDLE^XUSRB4("XUSBSE",1)
"RTN","XUSBSE1",7,0)
 S ^XTMP(TOKEN,1)=$$GET^XUESSO1(DUZ)
"RTN","XUSBSE1",8,0)
 S RES=TOKEN
"RTN","XUSBSE1",9,0)
 Q
"RTN","XUSBSE1",10,0)
 ;
"RTN","XUSBSE1",11,0)
 ; GETVISIT - returns demographics for user indicated by TOKEN
"RTN","XUSBSE1",12,0)
 ;   output - RES - passed by reference, contains global location on return
"RTN","XUSBSE1",13,0)
 ;   input  - TOKEN - token value returned by remote site
"RTN","XUSBSE1",14,0)
GETVISIT(RES,TOKEN) ; .RPC
"RTN","XUSBSE1",15,0)
 S RES=$G(^XTMP(TOKEN,1))
"RTN","XUSBSE1",16,0)
 K ^XTMP(TOKEN)
"RTN","XUSBSE1",17,0)
 Q
"RTN","XUSBSE1",18,0)
 ;
"RTN","XUSBSE1",19,0)
OLDCAPRI(XWBUSRNM) ;The OLD CAPRI code, Remove next patch
"RTN","XUSBSE1",20,0)
 ; Return 1 if a valid user, else 0.
"RTN","XUSBSE1",21,0)
 N XVAL,XUCNTXT
"RTN","XUSBSE1",22,0)
 S XVAL=$$PUT^XUESSO1($P(XWBUSRNM,U,3,99)) ; Sign in as Visitor
"RTN","XUSBSE1",23,0)
 I XVAL D
"RTN","XUSBSE1",24,0)
 . S XUCNTXT=$$FIND1^DIC(19,"","X","DVBA CAPRI GUI")
"RTN","XUSBSE1",25,0)
 . D SETCNTXT(XUCNTXT)
"RTN","XUSBSE1",26,0)
 Q $S(XVAL>0:1,1:0)
"RTN","XUSBSE1",27,0)
 ;
"RTN","XUSBSE1",28,0)
 ; CHKUSER - determines if a BSE sign-on is valid
"RTN","XUSBSE1",29,0)
 ;   INPUTSTR - input - String of characters from client
"RTN","XUSBSE1",30,0)
 ;   return value - 1 if a valid user, else 0
"RTN","XUSBSE1",31,0)
 ; called from XUSRB
"RTN","XUSBSE1",32,0)
CHKUSER(INPUTSTR) ;
"RTN","XUSBSE1",33,0)
 N XUCODE,XUENTRY,XUSTR,XUTOKEN
"RTN","XUSBSE1",34,0)
 I +INPUTSTR=-31,INPUTSTR["DVBA_",$$OLDCAPRI(INPUTSTR) Q 1
"RTN","XUSBSE1",35,0)
 I +INPUTSTR'=-35 Q 0
"RTN","XUSBSE1",36,0)
 S INPUTSTR=$P(INPUTSTR,U,2,99)
"RTN","XUSBSE1",37,0)
 K ^TMP("XUSBSE1",$J)
"RTN","XUSBSE1",38,0)
 S XUCODE=$$DECRYP^XUSRB1(INPUTSTR) ;TMP
"RTN","XUSBSE1",39,0)
 S XUCODE=$$EN^XUSHSH($P(XUCODE,U))
"RTN","XUSBSE1",40,0)
 S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE") D:XUENTRY>0
"RTN","XUSBSE1",41,0)
 . S XUTOKEN=$P($$DECRYP^XUSRB1(INPUTSTR),U,2)
"RTN","XUSBSE1",42,0)
 . S XUSTR=$P($$DECRYP^XUSRB1(INPUTSTR),U,3,4)
"RTN","XUSBSE1",43,0)
 . S XUENTRY=$$BSEUSER(XUENTRY,XUTOKEN,XUSTR)
"RTN","XUSBSE1",44,0)
 . Q
"RTN","XUSBSE1",45,0)
 Q $S(XUENTRY'>0:0,1:XUENTRY)
"RTN","XUSBSE1",46,0)
 ;
"RTN","XUSBSE1",47,0)
 ; BSEUSER - returns internal entry number for authenicated user or 0
"RTN","XUSBSE1",48,0)
 ;   ENTRY - input - internal entry number in REMOTE APPLICATION file
"RTN","XUSBSE1",49,0)
 ;   TOKEN - input - token from authenticaing site
"RTN","XUSBSE1",50,0)
 ;   STR   - input - remainder of input string (2 pieces)
"RTN","XUSBSE1",51,0)
BSEUSER(ENTRY,TOKEN,STR) ;
"RTN","XUSBSE1",52,0)
 N XUIEN,XUCONTXT,XUDEMOG,XCNT,XVAL
"RTN","XUSBSE1",53,0)
 S XUIEN=0,XUDEMOG=""
"RTN","XUSBSE1",54,0)
 S XCNT=0 F  S XCNT=$O(^XWB(8994.5,ENTRY,1,XCNT)) Q:XCNT'>0  S XVAL=^(XCNT,0) D  Q:XUDEMOG'=""
"RTN","XUSBSE1",55,0)
 . ; INSERT CODE TO HANDLE CONNECTION TYPE AND CONNECTIONS
"RTN","XUSBSE1",56,0)
 . I $P(XVAL,U)="M" S XUDEMOG=$$M2M($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) D CLOSE^XWBM2MC() Q
"RTN","XUSBSE1",57,0)
 . I $P(XVAL,U)="R" S XUDEMOG=$$XWB($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) Q
"RTN","XUSBSE1",58,0)
 . I $P(XVAL,U)="H" S XUDEMOG=$$POST^XUSBSE2($P(XVAL,U,3),$P(XVAL,U,4),"xVAL="_TOKEN) Q
"RTN","XUSBSE1",59,0)
 . Q
"RTN","XUSBSE1",60,0)
 I XUDEMOG="" D
"RTN","XUSBSE1",61,0)
 . N SERVER,PORT
"RTN","XUSBSE1",62,0)
 . S XUDEMOG=""
"RTN","XUSBSE1",63,0)
 . S SERVER=$P(STR,U),PORT=$P(STR,U,2)
"RTN","XUSBSE1",64,0)
 . I SERVER'="",PORT>0 S XUDEMOG=$$GETDEMOG(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",65,0)
 . Q
"RTN","XUSBSE1",66,0)
 I XUDEMOG'="" D
"RTN","XUSBSE1",67,0)
 . S XUCONTXT=$P($G(^XWB(8994.5,ENTRY,0)),U,2)
"RTN","XUSBSE1",68,0)
 . S XUIEN=$$SETUP(XUDEMOG,XUCONTXT)
"RTN","XUSBSE1",69,0)
 Q $S(XUIEN'>0:0,1:XUIEN)
"RTN","XUSBSE1",70,0)
 ;
"RTN","XUSBSE1",71,0)
XWB(SERVER,PORT,TOKEN) ;Special Broker service
"RTN","XUSBSE1",72,0)
 N DEMOSTR,IO,XWBTDEV,XWBRBUF
"RTN","XUSBSE1",73,0)
 ;TEST CODE
"RTN","XUSBSE1",74,0)
 Q $$CALLBSE^XWBTCPM2(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",75,0)
 ;
"RTN","XUSBSE1",76,0)
M2M(SERVER,PORT,TOKEN) ;
"RTN","XUSBSE1",77,0)
 N DEMOGSTR,XWBCRLFL,RETRNVAL,XUSBSARR
"RTN","XUSBSE1",78,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",79,0)
 N XWBSTAT,XWBPARMS,XWBTDEV,XWBNULL
"RTN","XUSBSE1",80,0)
 S XWBPARMS("ADDRESS")=SERVER,XWBPARMS("PORT")=PORT
"RTN","XUSBSE1",81,0)
 S XWBPARMS("RETRIES")=3 ;Retries 3 times to open
"RTN","XUSBSE1",82,0)
 ;
"RTN","XUSBSE1",83,0)
 I '$$OPEN^XWBRL(.XWBPARMS) Q "NO OPEN"
"RTN","XUSBSE1",84,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",85,0)
 D CLEARP^XWBM2MEZ
"RTN","XUSBSE1",86,0)
 D SETPARAM^XWBM2MEZ(1,"STRING",TOKEN)
"RTN","XUSBSE1",87,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",88,0)
 S XWBPARMS("RESULTS")=$NA(^TMP("XUSBSE1",$J))
"RTN","XUSBSE1",89,0)
 S XWBCRLFL=0
"RTN","XUSBSE1",90,0)
 D REQUEST^XWBRPCC(.XWBPARMS)
"RTN","XUSBSE1",91,0)
 I XWBCRLFL S RETRNVAL="XWBCRLFL IS TRUE" G M2MEXIT ; S @M2MLOC="XWBCRLFL IS TRUE" Q  ; Q 0
"RTN","XUSBSE1",92,0)
 ;
"RTN","XUSBSE1",93,0)
 I '$$EXECUTE^XWBVLC(.XWBPARMS) S RETRNVAL="FAILURE ON EXECUTE" G M2MEXIT ; S @M2MLOC="failure on execute" Q  ;Run RPC and place raw XML results in ^TMP("XWBM2MVLC"
"RTN","XUSBSE1",94,0)
 D PARSE^XWBRPC(.XWBPARMS,"XUSBSARR") ;Parse out raw XML and place results in ^TMP("XWBM2MRPC"
"RTN","XUSBSE1",95,0)
 S RETRNVAL=$G(XUSBSARR(1))
"RTN","XUSBSE1",96,0)
M2MEXIT ;
"RTN","XUSBSE1",97,0)
 D CLOSE^XWBM2MEZ
"RTN","XUSBSE1",98,0)
 Q RETRNVAL
"RTN","XUSBSE1",99,0)
 ;
"RTN","XUSBSE1",100,0)
 ; GETDEMOG - return value = string of demographic characteristics
"RTN","XUSBSE1",101,0)
 ;   input SERVER - server address
"RTN","XUSBSE1",102,0)
 ;   input PORT   - port number for connection
"RTN","XUSBSE1",103,0)
 ;   input TOKEN  - token to identify user to authenticating server
"RTN","XUSBSE1",104,0)
GETDEMOG(SERVER,PORT,TOKEN) ;
"RTN","XUSBSE1",105,0)
 N DEMOGSTR
"RTN","XUSBSE1",106,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",107,0)
 Q DEMOGSTR
"RTN","XUSBSE1",108,0)
 ;
"RTN","XUSBSE1",109,0)
 ; SETUP - setup user as visitor, add context option
"RTN","XUSBSE1",110,0)
 ; return value = internal entry number for user, or 0
"RTN","XUSBSE1",111,0)
 ;   input XUDEMOG  - string of demographic characteristics
"RTN","XUSBSE1",112,0)
 ;   input XUCONTXT - context option to be given to user
"RTN","XUSBSE1",113,0)
SETUP(XUDEMOG,XUCONTXT) ;
"RTN","XUSBSE1",114,0)
 I '$$PUT^XUESSO1(XUDEMOG) Q 0
"RTN","XUSBSE1",115,0)
 I $G(DUZ)'>0 Q 0
"RTN","XUSBSE1",116,0)
 D SETCNTXT(XUCONTXT)
"RTN","XUSBSE1",117,0)
 Q DUZ
"RTN","XUSBSE1",118,0)
 ;
"RTN","XUSBSE1",119,0)
SETCNTXT(XOPT) ;
"RTN","XUSBSE1",120,0)
 N OPT,XUCONTXT
"RTN","XUSBSE1",121,0)
 S XUCONTXT="`"_XOPT
"RTN","XUSBSE1",122,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 Q  ; context option not in option file
"RTN","XUSBSE1",123,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUSBSE1",124,0)
 I '$D(^VA(200,DUZ,203,"B",XOPT)) D
"RTN","XUSBSE1",125,0)
 . ; Have to give the user a delegated option
"RTN","XUSBSE1",126,0)
 . N XARR S XARR(200.19,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",127,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUSBSE1",128,0)
 . ; And now she can give himself the context option
"RTN","XUSBSE1",129,0)
 . K XARR S XARR(200.03,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",130,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUSBSE1",131,0)
 . S ^XUTL("XQ",$J,"DUZ(BSE)")=XUCONTXT
"RTN","XUSBSE1",132,0)
 . ; But now we have to remove the delegated option
"RTN","XUSBSE1",133,0)
 . S OPT=$$FIND1^DIC(200.19,","_DUZ_",","X",XUCONTXT)
"RTN","XUSBSE1",134,0)
 . I OPT>0 D
"RTN","XUSBSE1",135,0)
 . . K XARR S XARR(200.19,(OPT_","_DUZ_","),.01)="@"
"RTN","XUSBSE1",136,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUSBSE1",137,0)
 . . Q
"RTN","XUSBSE1",138,0)
 . Q
"RTN","XUSBSE1",139,0)
 Q
"RTN","XUSBSE1",140,0)
 ;
"RTN","XUSBSE2")
0^2^B9339084^n/a
"RTN","XUSBSE2",1,0)
XUSBSE2 ;FO-OAK/JLI-CONNECT WITH HTTP SERVER AND GET REPLY ;08/16/2006
"RTN","XUSBSE2",2,0)
 ;;8.0;KERNEL;**404**;Jul 10, 1995;Build 7
"RTN","XUSBSE2",3,0)
 Q
"RTN","XUSBSE2",4,0)
 ;
"RTN","XUSBSE2",5,0)
 ; MODIFY THE PROGRAM TO CHANGE THE 10.161.12.182 TO
"RTN","XUSBSE2",6,0)
 ; IP ADDRESSES FOR THE WORKSTATION WITH THE BSE SAMPLE
"RTN","XUSBSE2",7,0)
 ; SERVER
"RTN","XUSBSE2",8,0)
EN(ADDRESS) ; test with input address or 10.161.12.182 if none entered
"RTN","XUSBSE2",9,0)
 N VALUE,PAGE,SERVER
"RTN","XUSBSE2",10,0)
 S ADDRESS=$G(ADDRESS,"10.237.131.26")
"RTN","XUSBSE2",11,0)
 S PAGE="/",SERVER=ADDRESS
"RTN","XUSBSE2",12,0)
 I SERVER["/" D
"RTN","XUSBSE2",13,0)
 . I SERVER["//" S SERVER=$P(SERVER,"//",2)
"RTN","XUSBSE2",14,0)
 . I SERVER["/" S PAGE="/"_$P(SERVER,"/",2,99),SERVER=$P(SERVER,"/")
"RTN","XUSBSE2",15,0)
 . Q
"RTN","XUSBSE2",16,0)
 S VALUE=$$ENTRY(SERVER,PAGE) ; $G(ADDRESS,"10.237.131.26"))
"RTN","XUSBSE2",17,0)
 I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",18,0)
 W !,VALUE
"RTN","XUSBSE2",19,0)
 Q
"RTN","XUSBSE2",20,0)
 ;
"RTN","XUSBSE2",21,0)
EN1 ;
"RTN","XUSBSE2",22,0)
 D EN("10.237.131.26/page1.htm")
"RTN","XUSBSE2",23,0)
 Q
"RTN","XUSBSE2",24,0)
 ;
"RTN","XUSBSE2",25,0)
EN2 ;
"RTN","XUSBSE2",26,0)
 D EN("10.237.131.26/level2/page2.htm")
"RTN","XUSBSE2",27,0)
 Q
"RTN","XUSBSE2",28,0)
 ;
"RTN","XUSBSE2",29,0)
 ;
"RTN","XUSBSE2",30,0)
TESTPOST ;
"RTN","XUSBSE2",31,0)
 W !,$$POST("10.237.131.26","/","xVAL=XWBHDL851-487411_0")
"RTN","XUSBSE2",32,0)
 I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",33,0)
 Q
"RTN","XUSBSE2",34,0)
 ;
"RTN","XUSBSE2",35,0)
POST(SERVER,PAGE,DATA) ;
"RTN","XUSBSE2",36,0)
 Q $$ENTRY(SERVER,$G(PAGE),"POST",$G(DATA))
"RTN","XUSBSE2",37,0)
 ;
"RTN","XUSBSE2",38,0)
ENTRY(SERVER,PAGE,HTTPTYPE,DATA) ;
"RTN","XUSBSE2",39,0)
 N DONE,XVALUE,XWBICNT,XWBRBUF,XWBSBUF,XWBTDEV,POP
"RTN","XUSBSE2",40,0)
 S PAGE=$G(PAGE,"/") I PAGE="" S PAGE="/"
"RTN","XUSBSE2",41,0)
 S HTTPTYPE=$G(HTTPTYPE,"GET")
"RTN","XUSBSE2",42,0)
 S DATA=$G(DATA)
"RTN","XUSBSE2",43,0)
 S IO(0)=$P
"RTN","XUSBSE2",44,0)
 D INIT^XWBTCPM
"RTN","XUSBSE2",45,0)
 D OPEN^XWBTCPM2(SERVER,80)
"RTN","XUSBSE2",46,0)
 I POP Q "DIDN'T OPEN CONNECTION"
"RTN","XUSBSE2",47,0)
 S XWBSBUF=""
"RTN","XUSBSE2",48,0)
 U XWBTDEV
"RTN","XUSBSE2",49,0)
 D WRITE^XWBRW(HTTPTYPE_" "_PAGE_" HTTP/1.1"_$C(13,10))
"RTN","XUSBSE2",50,0)
 D WRITE^XWBRW("Accept: image/gif */*"_$C(13,10))
"RTN","XUSBSE2",51,0)
 I HTTPTYPE="POST" D WRITE^XWBRW("Referer: http://a1.fo-oakland.med.va.gov"_$C(13,10))
"RTN","XUSBSE2",52,0)
 D WRITE^XWBRW("Accept-Language: en-us"_$C(13,10))
"RTN","XUSBSE2",53,0)
 I HTTPTYPE="POST" D WRITE^XWBRW("Content-Type: application/x-www-form-urlencoded"_$C(13,10))
"RTN","XUSBSE2",54,0)
 D WRITE^XWBRW("Accept-Encoding: gzip, deflate"_$C(13,10))
"RTN","XUSBSE2",55,0)
 D WRITE^XWBRW("User-Agent: Mozilla/4.0 (compatible; MSIE 6.0;)"_$C(13,10))
"RTN","XUSBSE2",56,0)
 D WRITE^XWBRW("Host: 10.237.131.26"_$C(13,10))
"RTN","XUSBSE2",57,0)
 I HTTPTYPE="POST" D WRITE^XWBRW("Content-Length: "_$L(DATA)_$C(13,10))
"RTN","XUSBSE2",58,0)
 D WRITE^XWBRW("Connection: Keep-Alive"_$C(13,10))
"RTN","XUSBSE2",59,0)
 D WRITE^XWBRW("Cache-Control: no-cache"_$C(13,10,13,10)_DATA)
"RTN","XUSBSE2",60,0)
 D WBF^XWBRW
"RTN","XUSBSE2",61,0)
 S XWBRBUF="",DONE=0
"RTN","XUSBSE2",62,0)
 F  Q:DONE  D
"RTN","XUSBSE2",63,0)
 . S XVALUE=$$BREAD^XWBRW(1,1,1)
"RTN","XUSBSE2",64,0)
 . I $P(XWBRBUF,$C(13,10,13,10))'="" D
"RTN","XUSBSE2",65,0)
 . . S XVALUE=$P(XWBRBUF,$C(13,10,13,10),2,99)
"RTN","XUSBSE2",66,0)
 . . S XWBICNT=$P(XWBRBUF,"Content-Length:",2) F  Q:$E(XWBICNT)'=" "  S XWBICNT=$E(XWBICNT,2,$L(XWBICNT))
"RTN","XUSBSE2",67,0)
 . . S XWBRBUF=XVALUE
"RTN","XUSBSE2",68,0)
 . . S XWBICNT=+XWBICNT-$L(XWBRBUF)
"RTN","XUSBSE2",69,0)
 . . S DONE=1
"RTN","XUSBSE2",70,0)
 . . Q
"RTN","XUSBSE2",71,0)
 . Q
"RTN","XUSBSE2",72,0)
 S XVALUE=$$BREAD^XWBRW(XWBICNT,1,1)
"RTN","XUSBSE2",73,0)
 I IO="|TCP|80" U IO D ^%ZISC
"RTN","XUSBSE2",74,0)
 Q XVALUE
"RTN","XUSRB")
0^4^B30617453^B37739188
"RTN","XUSRB",1,0)
XUSRB ;ISCSF/RWF - Request Broker ;05/10/2006
"RTN","XUSRB",2,0)
 ;;8.0;KERNEL;**11,16,28,32,59,70,82,109,115,165,150,180,213,234,238,265,337,395,404**;Jul 10, 1995;Build 7
"RTN","XUSRB",3,0)
 Q  ;No entry from top
"RTN","XUSRB",4,0)
 ;
"RTN","XUSRB",5,0)
 ;RPC BROKER calls, First parameter is always call-by-reference
"RTN","XUSRB",6,0)
VALIDAV(RET,AVCODE) ;Check a users access
"RTN","XUSRB",7,0)
 ;Return R(0)=DUZ, R(1)=(0=OK, 1,2...=Can't sign-on for some reason)
"RTN","XUSRB",8,0)
 ; R(2)=verify needs changing, R(3)=Message, R(4)=0, R(5)=msg cnt, R(5+n)
"RTN","XUSRB",9,0)
 ; R(R(5)+6)=# div user must select from, R(R(5)+6+n)=div
"RTN","XUSRB",10,0)
 ;
"RTN","XUSRB",11,0)
 N X,XUSER,XUF,XUNOW,XUDEV,XUM,XUMSG,%1,VCCH K DUZ
"RTN","XUSRB",12,0)
 S U="^",RET(0)=0,RET(5)=0,XUF=$G(XUF,0),XUM=0,XUMSG=0,XUDEV=0
"RTN","XUSRB",13,0)
 S DUZ=0,DUZ(0)="",VCCH=0 D NOW
"RTN","XUSRB",14,0)
 S XOPT=$$STATE^XWBSEC("XUS XOPT")
"RTN","XUSRB",15,0)
 S XUMSG=$$INHIBIT() I XUMSG S XUM=1 G VAX ;Logon inhibited
"RTN","XUSRB",16,0)
 ;3 Strikes
"RTN","XUSRB",17,0)
 I $$LKCHECK^XUSTZIP($G(IO("IP"))) S XUMSG=7 G VAX ;IP locked
"RTN","XUSRB",18,0)
 ;Check type of sign-on code
"RTN","XUSRB",19,0)
 I $L(AVCODE) D
"RTN","XUSRB",20,0)
 . I $E(AVCODE,1,2)="~1" S DUZ=$$CHKASH^XUSRB4(AVCODE) Q
"RTN","XUSRB",21,0)
 . I $E(AVCODE,1,2)="~2" S DUZ=$$CHKCCOW^XUSRB4(AVCODE) Q
"RTN","XUSRB",22,0)
 . S DUZ=$$CHECKAV^XUS($$DECRYP^XUSRB1(AVCODE))
"RTN","XUSRB",23,0)
 . Q
"RTN","XUSRB",24,0)
 I DUZ'>0,$$FAIL^XUS3 D  G VAX
"RTN","XUSRB",25,0)
 . S XUM=1,XUMSG=7,X=$$RA^XUSTZ H 5 ;3 Strikes
"RTN","XUSRB",26,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX ;Check User
"RTN","XUSRB",27,0)
 S VCCH=$$VCVALID() ;Check VC
"RTN","XUSRB",28,0)
 I DUZ>0 S XUMSG=$$POST(1)
"RTN","XUSRB",29,0)
 I XUMSG>0 S DUZ=0,VCCH=0 ;If can't sign-on, don't tell need to change VC
"RTN","XUSRB",30,0)
 I 'XUMSG,VCCH S XUMSG=12 D SET^XWBSEC("XUS DUZ",DUZ) ;Need to change VC
"RTN","XUSRB",31,0)
VAX S:XUMSG>0 DUZ=0 ;Can't sign-on, Clear DUZ.
"RTN","XUSRB",32,0)
 D:DUZ>0 POST2
"RTN","XUSRB",33,0)
 S RET(0)=DUZ,RET(1)=XUM,RET(2)=VCCH,RET(3)=$S(XUMSG:$$TXT^XUS3(XUMSG),1:""),RET(4)=0
"RTN","XUSRB",34,0)
 K DUZ("CCOW")
"RTN","XUSRB",35,0)
 Q
"RTN","XUSRB",36,0)
 ;
"RTN","XUSRB",37,0)
NOW S U="^",XUNOW=$$NOW^XLFDT(),DT=$P(XUNOW,".")
"RTN","XUSRB",38,0)
 Q
"RTN","XUSRB",39,0)
 ;
"RTN","XUSRB",40,0)
INTRO(RET) ;Return INTRO TEXT.
"RTN","XUSRB",41,0)
 D INTRO^XUS1A("RET")
"RTN","XUSRB",42,0)
 Q
"RTN","XUSRB",43,0)
 ;
"RTN","XUSRB",44,0)
VCVALID() ;Return 1 if the Verify code needs changing.
"RTN","XUSRB",45,0)
 Q:'$G(DUZ) 1
"RTN","XUSRB",46,0)
 Q:$P($G(^VA(200,DUZ,.1)),U,2)="" 1 ;VC is empty
"RTN","XUSRB",47,0)
 Q:$P(^VA(200,DUZ,0),U,8)=1 0 ;VC never expires
"RTN","XUSRB",48,0)
 N XUSER D USER^XUS(DUZ)
"RTN","XUSRB",49,0)
 Q $$VCHG^XUS1
"RTN","XUSRB",50,0)
 ;
"RTN","XUSRB",51,0)
CVC(RET,XU1) ;change VC, Return 0 = success
"RTN","XUSRB",52,0)
 N XU2,XU3,XU4 S DUZ=$G(DUZ),RET(0)=99,XU4=$$STATE^XWBSEC("XUS DUZ") S:(DUZ=0)&(XU4>0) DUZ=XU4 Q:DUZ'>0
"RTN","XUSRB",53,0)
 S U="^",XU2=$P(XU1,U,2),XU3=$P(XU1,U,3),XU1=$P(XU1,U)
"RTN","XUSRB",54,0)
 S XU1=$$DECRYP^XUSRB1(XU1),XU2=$$DECRYP^XUSRB1(XU2),XU3=$$DECRYP^XUSRB1(XU3)
"RTN","XUSRB",55,0)
 S XU3=$$BRCVC^XUS2(XU1,XU2),RET(0)=+XU3,RET(1)=$P(XU3,U,2,9)
"RTN","XUSRB",56,0)
 I XU3>0 S DUZ=0 ;Clean-up if not changed.
"RTN","XUSRB",57,0)
 I 'XU3,XU4 D KILL^XWBSEC("XUS DUZ"),POST2
"RTN","XUSRB",58,0)
 Q
"RTN","XUSRB",59,0)
 ;
"RTN","XUSRB",60,0)
SHOWPOST() ;EF. Check if should send the POST SIGN-ON msg.
"RTN","XUSRB",61,0)
 Q +$P($G(^XTV(8989.3,1,"XWB")),"^",2)
"RTN","XUSRB",62,0)
 ;
"RTN","XUSRB",63,0)
POST(CVC) ;Finish setup partition, I CVC don't log yet
"RTN","XUSRB",64,0)
 N X,XUM,XUDIV S:$D(IO)[0 IO=$I S IO(0)=IO
"RTN","XUSRB",65,0)
 K ^UTILITY($J),^TMP($J)
"RTN","XUSRB",66,0)
 I '$D(XUSER(0)),DUZ D USER^XUS(DUZ)
"RTN","XUSRB",67,0)
 S XUM=$$USER^XUS1A Q:XUM>0 XUM ;User can't sign on for some reason.
"RTN","XUSRB",68,0)
 S RET(5)=0 ;The next line sends the post sign-on msg
"RTN","XUSRB",69,0)
 F %=1:1 Q:'$D(XUTEXT(%))  S RET(5+%)=$E(XUTEXT(%),2,256),RET(5)=%
"RTN","XUSRB",70,0)
 I '$$SHOWPOST S RET(5)=0 ;This line stops the sending/display of the msg.
"RTN","XUSRB",71,0)
 D:'$G(CVC) POST2
"RTN","XUSRB",72,0)
 Q 0
"RTN","XUSRB",73,0)
 ;
"RTN","XUSRB",74,0)
POST2 D:'$D(XUNOW) NOW
"RTN","XUSRB",75,0)
 D DUZ^XUS1A,SAVE^XUS1,LOG^XUS1,ABT^XQ12
"RTN","XUSRB",76,0)
 D KILL^XWBSEC("XUS XOPT"),CLRFAC^XUS3($G(IO("IP"))) ;p265
"RTN","XUSRB",77,0)
 I $T(SETTIME^XWBTCPC)]"" D SETTIME^XWBTCPC() ;Clear sign-on time-out
"RTN","XUSRB",78,0)
 K:$G(XWBVER)<1.106 XQY,XQY0 ;Delete the sign-on context.
"RTN","XUSRB",79,0)
 K XUTEXT,XOPT,XUEON,XUEOFF,XUTT,XUDEV,XUSER
"RTN","XUSRB",80,0)
 Q
"RTN","XUSRB",81,0)
 ;
"RTN","XUSRB",82,0)
INHIBIT() ;Is Logon to this system Inhibited?
"RTN","XUSRB",83,0)
 I $$INHIB1() Q 1
"RTN","XUSRB",84,0)
 I $$INHIB2() Q 2
"RTN","XUSRB",85,0)
 Q 0
"RTN","XUSRB",86,0)
 ;
"RTN","XUSRB",87,0)
INHIB1() ;The LOGON check
"RTN","XUSRB",88,0)
 I $G(^%ZIS(14.5,"LOGON",XQVOL)) Q 1
"RTN","XUSRB",89,0)
 Q 0
"RTN","XUSRB",90,0)
 ;
"RTN","XUSRB",91,0)
INHIB2() ;The Max User Check
"RTN","XUSRB",92,0)
 I $D(^%ZOSF("ACTJ")) X ^("ACTJ") I $P(XUVOL,U,3),($P(XUVOL,U,3)'>Y) Q 2
"RTN","XUSRB",93,0)
 Q 0
"RTN","XUSRB",94,0)
 ;
"RTN","XUSRB",95,0)
LOGOUT ;Finish logout of user.
"RTN","XUSRB",96,0)
 N XU1
"RTN","XUSRB",97,0)
 D CLEARALL^XWBDRPC(.XU1)
"RTN","XUSRB",98,0)
 ;Remove CCOW sign-on data
"RTN","XUSRB",99,0)
 S HDL=$G(^XUTL("XQ",$J,"HDL")) I $L(HDL) D
"RTN","XUSRB",100,0)
 . K ^XTMP(HDL,"JOB",$J)
"RTN","XUSRB",101,0)
 . I $O(^XTMP(HDL,"JOB",0))="" K ^XTMP(HDL)
"RTN","XUSRB",102,0)
 ;
"RTN","XUSRB",103,0)
 D BYE^XUSCLEAN,XUTL^XUSCLEAN ;Mark the sign-on log, File cleanup.
"RTN","XUSRB",104,0)
 Q
"RTN","XUSRB",105,0)
 ;D1,D2 are place holders for now
"RTN","XUSRB",106,0)
SETUP(RET,XWBUSRNM,ASOSKIP,D2) ;sets up environment for GUI signon
"RTN","XUSRB",107,0)
 K DUZ
"RTN","XUSRB",108,0)
 S XWBUSRNM=$G(XWBUSRNM),ASOSKIP=$G(ASOSKIP)
"RTN","XUSRB",109,0)
 I $L($G(XWBTIP)) S IO("IP")=XWBTIP
"RTN","XUSRB",110,0)
 S IO("CLNM")=$$LOW^XLFSTR($G(XWBCLMAN)) D ZIO^%ZIS4
"RTN","XUSRB",111,0)
 ;Setup needed variables
"RTN","XUSRB",112,0)
 D SET1^XUS(0),SET^XWBSEC("XUS XOPT",XOPT) ;p265
"RTN","XUSRB",113,0)
 ;I '$D(IO("HOME")) S %ZIS="0H",IOP="NULL" D ^%ZIS ;Setup NULL as the home device
"RTN","XUSRB",114,0)
 D SAVE^XUS1 ;save the home device
"RTN","XUSRB",115,0)
 ;0=server name, 1=volume, 2=uci, 3=device, 4=# attempts, 5=skip signon-screen,6=Domain Name, 7=Production (0=no, 1=Yes)
"RTN","XUSRB",116,0)
 S RET(0)=$P(XUENV,U,3),RET(1)=$P(XUVOL,U),RET(2)=XUCI
"RTN","XUSRB",117,0)
 S RET(3)=$I,RET(4)=$P(XOPT,U,2),RET(5)=0
"RTN","XUSRB",118,0)
 S RET(6)=$G(^XMB("NETNAME")) ;DBIA #1131
"RTN","XUSRB",119,0)
 S RET(7)=$$PROD^XUPROD ;Tell if production.
"RTN","XUSRB",120,0)
 I $$INHIBIT() Q
"RTN","XUSRB",121,0)
 ; Code for DBA Capri Type Program
"RTN","XUSRB",122,0)
 I (+XWBUSRNM<-30),$$CHKUSER^XUSBSE1(XWBUSRNM) S RET(5)=1 Q  ; BSE CHANGE
"RTN","XUSRB",123,0)
 ; End of Code for DBA Capri Program
"RTN","XUSRB",124,0)
 ;Auto sign-on check only for Broker v1.1
"RTN","XUSRB",125,0)
 I $G(ASOSKIP) S XQXFLG("ASO")=1 ;Skip the ASO check
"RTN","XUSRB",126,0)
 I $G(XWBVER)<1.1 S XQXFLG("ZEBRA")=-1 ;Disable for v1.0
"RTN","XUSRB",127,0)
 I $L(IO("CLNM")) S DUZ=$$AUTOXWB^XUS1B() ;Only check when 1.1 CL.
"RTN","XUSRB",128,0)
 I DUZ>0 D NOW S XUMSG=$$POST(0) I XUMSG>0 S DUZ=0
"RTN","XUSRB",129,0)
 S:DUZ>0 RET(5)=1
"RTN","XUSRB",130,0)
 Q
"RTN","XUSRB",131,0)
 ;
"RTN","XUSRB",132,0)
OWNSKEY(RET,LIST,IEN) ;Does user have Key
"RTN","XUSRB",133,0)
 N I,K S I=""
"RTN","XUSRB",134,0)
 I $G(IEN)'>0 S IEN=$G(DUZ)
"RTN","XUSRB",135,0)
 I $G(IEN)'>0 S RET(0)=0 Q
"RTN","XUSRB",136,0)
 I $O(LIST(""))="" S RET(0)=$$KCHK(LIST,IEN) Q
"RTN","XUSRB",137,0)
 F  S I=$O(LIST(I)) Q:I=""  S RET(I)=$$KCHK(LIST(I),IEN)
"RTN","XUSRB",138,0)
 Q
"RTN","XUSRB",139,0)
 ;
"RTN","XUSRB",140,0)
KCHK(%,IEN) ;Key Check
"RTN","XUSRB",141,0)
 S:$G(IEN)'>0 IEN=$G(DUZ) Q $S($G(IEN)>0:$D(^XUSEC(%,IEN)),1:0)
"RTN","XUSRB",142,0)
 ;
"RTN","XUSRB",143,0)
ALLKEYS(RET,IEN,FLG) ;Return ALL or most KEYS that a user has.
"RTN","XUSRB",144,0)
 N I,J,K,L K ^TMP("XU",$J)
"RTN","XUSRB",145,0)
 S RET=$NA(^TMP("XU",$J))
"RTN","XUSRB",146,0)
 S:'$D(IEN) IEN=DUZ I IEN'>0 S @RET@(0)=-1 Q
"RTN","XUSRB",147,0)
 S I=0,L=0
"RTN","XUSRB",148,0)
 F  S I=$O(^VA(200,IEN,51,I)) Q:I'>0  S K=$G(^DIC(19.1,I,0)) D
"RTN","XUSRB",149,0)
 . Q:'$P(K,U,5)  ;Check 'Send to J2EE' field.
"RTN","XUSRB",150,0)
 . S L=L+1,@RET@(L,0)=$P(K,U,1)
"RTN","XUSRB",151,0)
 . Q
"RTN","XUSRB",152,0)
 Q
"RTN","XUSRB",153,0)
 ;
"RTN","XUSRB",154,0)
AVHELP(RET) ; send access/verify code instructions.
"RTN","XUSRB",155,0)
 S RET(0)=$$AVHLPTXT^XUS2()
"RTN","XUSRB",156,0)
 Q
"RTN","XUSRB",157,0)
 ;
"RTN","XUSRB",158,0)
OPTACCES(RET,USER,OPTIONS,MODE) ;Checks or sets user's access for passed in options
"RTN","XUSRB",159,0)
 S MODE="CHECK" ;only CHECK mode supported for now
"RTN","XUSRB",160,0)
 N I S I=""
"RTN","XUSRB",161,0)
 I $G(USER)'>0 S RET(0)=0 Q
"RTN","XUSRB",162,0)
 F  S I=$O(OPTIONS(I)) Q:I=""  S RET(I)=$$CHK^XQCS(USER,OPTIONS(I))=1
"RTN","XUSRB",163,0)
 Q
"RTN","XUSRB",164,0)
 ;
"RTN","XUSRB",165,0)
CHECKAV(AVC) ;SR. EF. to check an A/V code, Separate w/ ";", return IEN or 0
"RTN","XUSRB",166,0)
 N XUF,XUSER S XUF=0,U="^"
"RTN","XUSRB",167,0)
 Q $$CHECKAV^XUS(AVC)
"VER")
8.0^22.0
"BLD",940,6)
^346
**END**
**END**
