Released IB*2*321 SEQ #300
Extracted from mail message
**KIDS**:IB*2.0*321^

**INSTALL NAME**
IB*2.0*321
"BLD",6014,0)
IB*2.0*321^INTEGRATED BILLING^0^3051213^y
"BLD",6014,4,0)
^9.64PA^^
"BLD",6014,"INID")
n^n^n
"BLD",6014,"INIT")
START^IBARXEPS
"BLD",6014,"KRN",0)
^9.67PA^8989.52^19
"BLD",6014,"KRN",.4,0)
.4
"BLD",6014,"KRN",.401,0)
.401
"BLD",6014,"KRN",.402,0)
.402
"BLD",6014,"KRN",.403,0)
.403
"BLD",6014,"KRN",.5,0)
.5
"BLD",6014,"KRN",.84,0)
.84
"BLD",6014,"KRN",3.6,0)
3.6
"BLD",6014,"KRN",3.8,0)
3.8
"BLD",6014,"KRN",9.2,0)
9.2
"BLD",6014,"KRN",9.8,0)
9.8
"BLD",6014,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",6014,"KRN",9.8,"NM",1,0)
IBARXEPS^^0^B42904497
"BLD",6014,"KRN",9.8,"NM",2,0)
IBAMTED^^0^B10970561
"BLD",6014,"KRN",9.8,"NM",3,0)
IBAMTC^^0^B24161099
"BLD",6014,"KRN",9.8,"NM","B","IBAMTC",3)

"BLD",6014,"KRN",9.8,"NM","B","IBAMTED",2)

"BLD",6014,"KRN",9.8,"NM","B","IBARXEPS",1)

"BLD",6014,"KRN",19,0)
19
"BLD",6014,"KRN",19.1,0)
19.1
"BLD",6014,"KRN",101,0)
101
"BLD",6014,"KRN",409.61,0)
409.61
"BLD",6014,"KRN",771,0)
771
"BLD",6014,"KRN",870,0)
870
"BLD",6014,"KRN",8989.51,0)
8989.51
"BLD",6014,"KRN",8989.52,0)
8989.52
"BLD",6014,"KRN",8994,0)
8994
"BLD",6014,"KRN","B",.4,.4)

"BLD",6014,"KRN","B",.401,.401)

"BLD",6014,"KRN","B",.402,.402)

"BLD",6014,"KRN","B",.403,.403)

"BLD",6014,"KRN","B",.5,.5)

"BLD",6014,"KRN","B",.84,.84)

"BLD",6014,"KRN","B",3.6,3.6)

"BLD",6014,"KRN","B",3.8,3.8)

"BLD",6014,"KRN","B",9.2,9.2)

"BLD",6014,"KRN","B",9.8,9.8)

"BLD",6014,"KRN","B",19,19)

"BLD",6014,"KRN","B",19.1,19.1)

"BLD",6014,"KRN","B",101,101)

"BLD",6014,"KRN","B",409.61,409.61)

"BLD",6014,"KRN","B",771,771)

"BLD",6014,"KRN","B",870,870)

"BLD",6014,"KRN","B",8989.51,8989.51)

"BLD",6014,"KRN","B",8989.52,8989.52)

"BLD",6014,"KRN","B",8994,8994)

"BLD",6014,"QUES",0)
^9.62^^
"BLD",6014,"REQB",0)
^9.611^2^2
"BLD",6014,"REQB",1,0)
IB*2.0*269^2
"BLD",6014,"REQB",2,0)
IB*2.0*275^2
"BLD",6014,"REQB","B","IB*2.0*269",1)

"BLD",6014,"REQB","B","IB*2.0*275",2)

"INIT")
START^IBARXEPS
"MBREQ")
0
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^2^1
"PKG",200,20,2,0)
2^^IBAXDR
"PKG",200,20,2,1)

"PKG",200,20,"B",2,2)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
321^3051213
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","IBAMTC")
0^3^B24161099^B23660778
"RTN","IBAMTC",1,0)
IBAMTC ;ALB/CPM-MEANS TEST NIGHTLY COMPILATION JOB ;09-OCT-91
"RTN","IBAMTC",2,0)
V ;;2.0;INTEGRATED BILLING;**34,52,70,93,100,118,115,132,150,153,137,176,215,275,321**;21-MAR-94
"RTN","IBAMTC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBAMTC",4,0)
 ;
"RTN","IBAMTC",5,0)
INIT ; Entry point - initialize variables and parameters
"RTN","IBAMTC",6,0)
 ;
"RTN","IBAMTC",7,0)
 ;***
"RTN","IBAMTC",8,0)
 ;S XRTL=$ZU(0),XRTN="IBAMTC-1" D T0^%ZOSV ;start rt clock
"RTN","IBAMTC",9,0)
 ;
"RTN","IBAMTC",10,0)
 D UPDT^IBARXEPS($$FMADD^XLFDT(DT,-30),DT,1)
"RTN","IBAMTC",11,0)
 ;
"RTN","IBAMTC",12,0)
 D NIGHTLY^IBTRKR ; claims tracking nightly update
"RTN","IBAMTC",13,0)
 ;
"RTN","IBAMTC",14,0)
 D ^IBCD ; automated biller
"RTN","IBAMTC",15,0)
 ;
"RTN","IBAMTC",16,0)
 D RELPR^IBAMTV3 ; auto-release patient charges on hold at least 60 days
"RTN","IBAMTC",17,0)
 ;
"RTN","IBAMTC",18,0)
 D EN^IBOHRL ; auto-release patient charges on hold longer than 90 days
"RTN","IBAMTC",19,0)
 ;
"RTN","IBAMTC",20,0)
 K IBDT D BJ^IBJDE  ; Automated DM extract monthly background job.
"RTN","IBAMTC",21,0)
 ;
"RTN","IBAMTC",22,0)
 D ^IBATEI1 ; transfer pricing background job
"RTN","IBAMTC",23,0)
 ;
"RTN","IBAMTC",24,0)
 D NIGHT^IBARXMA ; transmit copay cap info
"RTN","IBAMTC",25,0)
 ;
"RTN","IBAMTC",26,0)
 D NOW^%DTC S IBAFY=$$FY^IBOUTL(X),DT=X,U="^"
"RTN","IBAMTC",27,0)
 S (IBERRN,IBWHER,IBJOB,IBY,Y)=1,IBCNT=0 K ^TMP($J,"IBAMTC")
"RTN","IBAMTC",28,0)
 D SITE^IBAUTL I Y<1 S IBY=Y D ERR G CLEAN
"RTN","IBAMTC",29,0)
 D SERV^IBAUTL2 I IBY<1 D ERR G CLEAN
"RTN","IBAMTC",30,0)
 ;
"RTN","IBAMTC",31,0)
 ; Compile Means Test copay and per diem charges for all inpatients
"RTN","IBAMTC",32,0)
 S (IBWARD,DFN)="" F  S IBWARD=$O(^DPT("CN",IBWARD)) Q:IBWARD=""  F  S DFN=$O(^DPT("CN",IBWARD,DFN)) Q:'DFN  W !,DFN S IBA=^(DFN),IBY=1 D PROC
"RTN","IBAMTC",33,0)
 ;
"RTN","IBAMTC",34,0)
 ;send inpatients' CV (CombatVet) expiration e-mail alert
"RTN","IBAMTC",35,0)
 D CVEXMAIL^IBACV(DT)
"RTN","IBAMTC",36,0)
 ;
"RTN","IBAMTC",37,0)
 ;check & start LTC Monthly Job LTC if necessary
"RTN","IBAMTC",38,0)
 D NJ^IBAECN1
"RTN","IBAMTC",39,0)
 ;
"RTN","IBAMTC",40,0)
 D EN^IBCE ; Transmit electronic bills
"RTN","IBAMTC",41,0)
 ; Clean up expired Means Test billing clocks
"RTN","IBAMTC",42,0)
CLEAN S %H=+$H-1 D YMD^%DTC S IBDT=X,(IBN,DFN)=0,IBWHER=23
"RTN","IBAMTC",43,0)
 F  S DFN=$O(^IBE(351,"ACT",DFN)) Q:'DFN  D
"RTN","IBAMTC",44,0)
 . F  S IBN=$O(^IBE(351,"ACT",DFN,IBN)) Q:'IBN  D
"RTN","IBAMTC",45,0)
 ..  S IBY=1,X1=IBDT,(X2,IBCLDT)=+$P($G(^IBE(351,+IBN,0)),"^",3) D ^%DTC
"RTN","IBAMTC",46,0)
 ..  I X>364 S IBCLDA=IBN D CLOCKCL^IBAUTL3,ERR:IBY<1
"RTN","IBAMTC",47,0)
 ;
"RTN","IBAMTC",48,0)
 ; Close out incomplete events where the patient has been discharged,
"RTN","IBAMTC",49,0)
 ; pass the related charges if they appear correct, and send a bulletin
"RTN","IBAMTC",50,0)
 ; - also, send bulletins on old incomplete charges where there is no
"RTN","IBAMTC",51,0)
 ; incomplete event
"RTN","IBAMTC",52,0)
 D MAIN^IBAMTC2
"RTN","IBAMTC",53,0)
 ;
"RTN","IBAMTC",54,0)
 ;D ^IBAMTC1
"RTN","IBAMTC",55,0)
 ;
"RTN","IBAMTC",56,0)
 ; Send bulletin reporting job completion
"RTN","IBAMTC",57,0)
 D BULL^IBAMTC1
"RTN","IBAMTC",58,0)
 ;
"RTN","IBAMTC",59,0)
 ; -- purge alerts
"RTN","IBAMTC",60,0)
 D PURGE^IBAERR3
"RTN","IBAMTC",61,0)
 ;
"RTN","IBAMTC",62,0)
 ; Monitor special inpatient billing cases
"RTN","IBAMTC",63,0)
 D BGJ^IBAMTI
"RTN","IBAMTC",64,0)
 ;
"RTN","IBAMTC",65,0)
 ; Print Pharmacy Copay Exemption Income Test Reminder Letters
"RTN","IBAMTC",66,0)
 D EN^IBARXEL
"RTN","IBAMTC",67,0)
 ;
"RTN","IBAMTC",68,0)
 ; Kill variables and quit.
"RTN","IBAMTC",69,0)
 D KILL1
"RTN","IBAMTC",70,0)
 ;
"RTN","IBAMTC",71,0)
 I $D(ZTQUEUED),$G(ZTSK) D KILL^%ZTLOAD
"RTN","IBAMTC",72,0)
 ;***
"RTN","IBAMTC",73,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBAMTC" D T1^%ZOSV ;stop rt clock
"RTN","IBAMTC",74,0)
 ;
"RTN","IBAMTC",75,0)
 Q
"RTN","IBAMTC",76,0)
 ;
"RTN","IBAMTC",77,0)
 ;
"RTN","IBAMTC",78,0)
PROC ; Process all currently admitted patients.
"RTN","IBAMTC",79,0)
 ;
"RTN","IBAMTC",80,0)
 D IFCVEXP^IBACV(DFN,DT,IBA) ;if CV has expired (see CVEXMAIL^IBACV)
"RTN","IBAMTC",81,0)
 ;--
"RTN","IBAMTC",82,0)
 ;1) checks effective date for LTC legislation.
"RTN","IBAMTC",83,0)
 ;2) determine current treating specialty (TS) for the 
"RTN","IBAMTC",84,0)
 ;"original" admission.
"RTN","IBAMTC",85,0)
 ;if TS is LTC: 
"RTN","IBAMTC",86,0)
 ;  - creates new LTC #350 parent event entry if necessary.
"RTN","IBAMTC",87,0)
 ;NOTE: It doesn't stop MT billing for LTC. CALC^IBAUTL4 does it.
"RTN","IBAMTC",88,0)
 I $$ISLTCADM^IBAECN1(DFN,IBA)
"RTN","IBAMTC",89,0)
 ;--
"RTN","IBAMTC",90,0)
 D ORIG  ; find "original" admission date
"RTN","IBAMTC",91,0)
 Q:$$BILST^DGMTUB(DFN)<IBADMDT  ; pat. was last billable before admission
"RTN","IBAMTC",92,0)
 Q:IBADMDT\1=DT  ; patient was admitted today - process tomorrow
"RTN","IBAMTC",93,0)
 Q:+$$MVT^DGPMOBS(IBA)  ; admitted for Observation & Examination
"RTN","IBAMTC",94,0)
 Q:$O(^IBE(351.2,"AC",IBA,0))  ; skip special inpatient admissions
"RTN","IBAMTC",95,0)
 ;
"RTN","IBAMTC",96,0)
 ; - if vet is SC, create a Special Inpatient Billing Case
"RTN","IBAMTC",97,0)
 ;   in file #351.2 (use code 3 for SC, as it is changed to 4 in IBAMTI)
"RTN","IBAMTC",98,0)
 D ELIG^VADPT I VAEL(3) D ADM^IBAMTI(DFN,IBA,3) Q
"RTN","IBAMTC",99,0)
 ;
"RTN","IBAMTC",100,0)
 ; - gather event information
"RTN","IBAMTC",101,0)
 D EVFIND^IBAUTL3 I 'IBEVDA D BSEC Q:'IBBS  ; wasn't billable yesterday
"RTN","IBAMTC",102,0)
 S X=IBADMDT D H^%DTC S IBBDT=%H D:'IBEVDA LAST^IBAUTL5
"RTN","IBAMTC",103,0)
 I IBEVDA,IBEVCAL S X1=IBEVCAL,X2=1 D C^%DTC S IBBDT=%H
"RTN","IBAMTC",104,0)
 S IBEDT=+$H-1
"RTN","IBAMTC",105,0)
 ; - gather clock information
"RTN","IBAMTC",106,0)
 S IBWHER=24 D CLOCK^IBAUTL3 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",107,0)
 I IBCLDA S X=IBCLDT D H^%DTC S IBCLCT=IBBDT-%H
"RTN","IBAMTC",108,0)
 ; - build charges for inpatient days
"RTN","IBAMTC",109,0)
 D ^IBAUTL4 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",110,0)
 ; - pass per diem if over 30 days old, or both per diem and the copay
"RTN","IBAMTC",111,0)
 ; - if 4 days from patient's statement date; update event, clock
"RTN","IBAMTC",112,0)
 S IBWHER=22
"RTN","IBAMTC",113,0)
 I $G(IBCHPDA),$P($G(^IB(+IBCHPDA,0)),"^",6)>30!($$STD^IBAUTL5(DFN)) S IBNOS=IBCHPDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",114,0)
 I $G(IBCHCDA),$$STD^IBAUTL5(DFN) S IBNOS=IBCHCDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",115,0)
 I IBEVDA,$D(IBDT) S IBEVCLD=IBDT D EVUPD^IBAUTL3
"RTN","IBAMTC",116,0)
 I IBCLDA D CLUPD^IBAUTL3
"RTN","IBAMTC",117,0)
PROCQ D KILL Q
"RTN","IBAMTC",118,0)
 ;
"RTN","IBAMTC",119,0)
BSEC ; Determine patient's bedsection for the previous day.
"RTN","IBAMTC",120,0)
 S X1=DT,X2=-1 D C^%DTC
"RTN","IBAMTC",121,0)
 S VAIP("D")=X_.2359 D IN5^VADPT S IBBS=$$SECT^IBAUTL5(+VAIP(8)) Q
"RTN","IBAMTC",122,0)
 ;
"RTN","IBAMTC",123,0)
ERR ; Error processing.  Input:  IBY, IBWHER, IBCNT
"RTN","IBAMTC",124,0)
 S IBDUZ=DUZ,IBCNT=IBCNT+1 D ^IBAERR1 K IBDUZ Q
"RTN","IBAMTC",125,0)
 ;S ^TMP($J,"IBAMTC","E",IBERRN)=$P(IBY,"^",2)_"^"_$S($D(DFN):DFN,1:"")_"^"_IBWHER,IBERRN=IBERRN+1 Q
"RTN","IBAMTC",126,0)
 ;
"RTN","IBAMTC",127,0)
ORIG ; Find first admission date, considering ASIH movements
"RTN","IBAMTC",128,0)
 ;  Input:  IBA    Output:  IBADMDT
"RTN","IBAMTC",129,0)
 N X,Y,Z S Z=IBA
"RTN","IBAMTC",130,0)
 F  S X=$G(^DGPM(Z,0)),Y=$P(X,"^",21) Q:Y=""  S Z=+$P($G(^DGPM(Y,0)),"^",14)
"RTN","IBAMTC",131,0)
 S IBADMDT=+X Q
"RTN","IBAMTC",132,0)
 ;
"RTN","IBAMTC",133,0)
KILL1 ; Kill all IB variables.
"RTN","IBAMTC",134,0)
 K VAERR,VAEL,VAIP,IBA,IBADMDT,IBAFY,IBATYP,IBBDT,IBBS,IBCHARG,IBCHG,IBCNT,IBCUR,IBDESC,IBDISDT,IBDT,IBDUZ,IBFAC,IBI,IBIL,IBJOB,IBLC,IBMAX
"RTN","IBAMTC",135,0)
 K IBN,IBNOS,IBSAVBS,IBSEQNO,IBSERV,IBSITE,IBSL,IBTRAN,IBX,IBY,IBWHER,IBWARD,IBEDT,IBCHCTY,IBCHPDE,IBERRN,IBASIH,IBRTED
"RTN","IBAMTC",136,0)
KILL ; Kill all IB variables needed to build charges.
"RTN","IBAMTC",137,0)
 K IBCLCT,IBCLDA,IBCLDT,IBCLDAY,IBCLDOL,IBCHPDA,IBCHCDA,IBCHG,IBCHFR,IBCHTO,IBCHTOTL,IBBS,IBNH
"RTN","IBAMTC",138,0)
 K IBEVDA,IBEVDT,IBEVCLD,IBEVCAL,IBEVNEW,IBEVOLD,IBMED,IBTOTL,IBDESC,IBIL,IBTRAN,IBATYP,IBDATE
"RTN","IBAMTC",139,0)
 Q
"RTN","IBAMTED")
0^2^B10970561^B8126243
"RTN","IBAMTED",1,0)
IBAMTED ;ALB/CPM,GN,PHH,EG - MEANS TEST EVENT DRIVER INTERFACE ; 11/30/05 1:48pm
"RTN","IBAMTED",2,0)
 ;;2.0;INTEGRATED BILLING;**15,255,269,321**;21-MAR-94
"RTN","IBAMTED",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBAMTED",4,0)
 ;
"RTN","IBAMTED",5,0)
 ;IB*2*269 add IVM converted RX Copay Test update calls to a new API.
"RTN","IBAMTED",6,0)
 ;
"RTN","IBAMTED",7,0)
 ; -- do medication copayment exemption processing
"RTN","IBAMTED",8,0)
 ;
"RTN","IBAMTED",9,0)
 ;Z06 processing for RX Copay then Quit
"RTN","IBAMTED",10,0)
 I $D(EASZ06),DGMTYPT=2 D ^IBAMTED2 G END                    ;IB*2*269
"RTN","IBAMTED",11,0)
 ;Original Non-Z06 Copay processing
"RTN","IBAMTED",12,0)
 I '$D(EASZ06) D
"RTN","IBAMTED",13,0)
 . ;this routine is called from the DG namespace and IB namespace
"RTN","IBAMTED",14,0)
 . ;when coming in from the DG namespace, variable DGMTD and DGMTDT is
"RTN","IBAMTED",15,0)
 . ;used to define the means test test.  When coming in
"RTN","IBAMTED",16,0)
 . ;from the IB namespace, variable IBDT  OR IVMMTDT is used
"RTN","IBAMTED",17,0)
 . I '$D(IBDT) N IBDT
"RTN","IBAMTED",18,0)
 . S IBDT=$S($D(IBDT):IBDT,$D(IVMMTDT):IVMMTDT,$D(DGMTDT):DGMTDT,$D(DGMTD):DGMTD,1:0)
"RTN","IBAMTED",19,0)
 . I $P($G(^DGMT(408.31,+$$LST^DGMTCOU1(DFN,IBDT,2),0)),"^",23)=2 Q
"RTN","IBAMTED",20,0)
 . I $G(^DGMT(408.31,+$$LST^DGMTCOU1(DFN,IBDT,2),"C",1,0))["Z06 MT via Edb" Q
"RTN","IBAMTED",21,0)
 . D ^IBAMTED1
"RTN","IBAMTED",22,0)
 . Q
"RTN","IBAMTED",23,0)
 ;
"RTN","IBAMTED",24,0)
 ; -- end medication copayment exemption processing
"RTN","IBAMTED",25,0)
 ;
"RTN","IBAMTED",26,0)
 ; Quit if supported variables are unavailable.
"RTN","IBAMTED",27,0)
 Q:'$D(DFN)!('$D(DGMTA))!('$D(DGMTP))!('$D(DUZ))!('$D(DGMTINF))!('$D(DGMTACT))
"RTN","IBAMTED",28,0)
 ;
"RTN","IBAMTED",29,0)
 ;***
"RTN","IBAMTED",30,0)
 ;S XRTL=$ZU(0),XRTN="IBAMTED-1" D T0^%ZOSV ;start rt clock
"RTN","IBAMTED",31,0)
 ;
"RTN","IBAMTED",32,0)
 ; -- quit if copay exemption test
"RTN","IBAMTED",33,0)
 I $P(DGMTA,"^",19)=2!($P(DGMTP,"^",19)=2) G END
"RTN","IBAMTED",34,0)
 ;
"RTN","IBAMTED",35,0)
 ; Quit if test is a Category change resulting from a deleted test.
"RTN","IBAMTED",36,0)
 I DGMTA]"",DGMTP]"",+DGMTA'=+DGMTP G END ; on-line deletion
"RTN","IBAMTED",37,0)
 I DGMTA]"",DGMTP]"",DGMTACT="DEL" G END ; IVM 'delete' transmission
"RTN","IBAMTED",38,0)
 ;
"RTN","IBAMTED",39,0)
 ; Process Means Tests uploaded by IVM.
"RTN","IBAMTED",40,0)
 I DGMTACT="UPL"!(DGMTACT="DUP") D  G END
"RTN","IBAMTED",41,0)
 .;
"RTN","IBAMTED",42,0)
 .; - if IVM is uploading a verified test, create new MT charges
"RTN","IBAMTED",43,0)
 .I $P(DGMTP,"^",23)<2,$P(DGMTA,"^",23)>1,'$$CK^DGMTUB(DGMTP),$$CK^DGMTUB(DGMTA) D ^IBAMTV Q
"RTN","IBAMTED",44,0)
 .;
"RTN","IBAMTED",45,0)
 .; - if IVM is sending a 'Delete' transmission, cancel previous charges
"RTN","IBAMTED",46,0)
 .I $P(DGMTP,"^",23)>1,$P(DGMTA,"^",23)<2,$$CK^DGMTUB(DGMTP),'$$CK^DGMTUB(DGMTA) D CANC^IBAMTV
"RTN","IBAMTED",47,0)
 ;
"RTN","IBAMTED",48,0)
 ; Quit if the most current Means Test was not altered.
"RTN","IBAMTED",49,0)
 S IBMT=$S(DGMTA="":DGMTP,1:DGMTA)
"RTN","IBAMTED",50,0)
 S X=$$LST^DGMTU(DFN) I X,$P(X,"^",2)>+IBMT G END
"RTN","IBAMTED",51,0)
 ;
"RTN","IBAMTED",52,0)
 ; Quit if an added or deleted test is a Required test.
"RTN","IBAMTED",53,0)
 I (DGMTA=""!(DGMTP="")),$P(IBMT,"^",3)=1 G END
"RTN","IBAMTED",54,0)
 ;
"RTN","IBAMTED",55,0)
 ; Determine the billable status before and after the transaction.
"RTN","IBAMTED",56,0)
 D NOW^%DTC S IBCATCA=$$BIL^DGMTUB(DFN,%)
"RTN","IBAMTED",57,0)
 S IBCATCP=$S(DGMTP="":$$ADD,DGMTA="":$$CK^DGMTUB(DGMTP),1:$$EDIT)
"RTN","IBAMTED",58,0)
 ;
"RTN","IBAMTED",59,0)
 ; Generate a bulletin if the patient's billing status has changed.
"RTN","IBAMTED",60,0)
 I (IBCATCP&('IBCATCA))!('IBCATCP&(IBCATCA)) D
"RTN","IBAMTED",61,0)
 .S IBEFDT=$S($P(IBMT,"^",7):+$P(IBMT,"^",7),1:+IBMT)
"RTN","IBAMTED",62,0)
 .I IBCATCP,'IBCATCA,'$$CHG^IBAMTEDU(IBEFDT) Q  ; hasn't been billed since going c->a
"RTN","IBAMTED",63,0)
 .I 'IBCATCP,IBCATCA,'$$EP^IBAMTEDU(IBEFDT) Q  ; hasn't been treated since going a->c
"RTN","IBAMTED",64,0)
 .D MT^IBAMTBU2 ; create bulletin
"RTN","IBAMTED",65,0)
 ;
"RTN","IBAMTED",66,0)
END K IBARR,IBCANCEL,IBCATCA,IBCATCP,IBDIQ,IBDUZ,IBEFDT,IBMT,IBI,IBC,IBPT,IBT
"RTN","IBAMTED",67,0)
 K DIC,DIQ,DR,DA,VA,VAERR,VAEL,X,X1,X2,XMDUZ,XMTEXT,XMY,XMSUB
"RTN","IBAMTED",68,0)
 ;***
"RTN","IBAMTED",69,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBAMTED" D T1^%ZOSV ;stop rt clock
"RTN","IBAMTED",70,0)
 Q
"RTN","IBAMTED",71,0)
 ;
"RTN","IBAMTED",72,0)
 ;
"RTN","IBAMTED",73,0)
ADD() ; Determine the billable status before adding a Means Test.
"RTN","IBAMTED",74,0)
 S X1=$S($P(DGMTA,"^",3)=3:+DGMTA,1:+$P(DGMTA,"^",7)\1),X2=-1 D C^%DTC
"RTN","IBAMTED",75,0)
 Q $$BIL^DGMTUB(DFN,X)
"RTN","IBAMTED",76,0)
 ;
"RTN","IBAMTED",77,0)
 ;
"RTN","IBAMTED",78,0)
EDIT() ; Determine the billable status before editing a Means Test.
"RTN","IBAMTED",79,0)
 I $P(DGMTP,"^",3)'=1 Q $$CK^DGMTUB(DGMTP)
"RTN","IBAMTED",80,0)
 S X1=+DGMTP,X2=-1 D C^%DTC Q $$BIL^DGMTUB(DFN,X)
"RTN","IBARXEPS")
0^1^B42904497
"RTN","IBARXEPS",1,0)
IBARXEPS ;ALB/RM/PHH,EG - RX COPAY EXEMPTION UPDATE STATUS ; 12/13/2005
"RTN","IBARXEPS",2,0)
 ;;2.0;INTEGRATED BILLING;**321**; 21-MAR-94
"RTN","IBARXEPS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBARXEPS",4,0)
 ;
"RTN","IBARXEPS",5,0)
 ; This routine was copied/modified from IBARXEPV.
"RTN","IBARXEPS",6,0)
 ;
"RTN","IBARXEPS",7,0)
 Q
"RTN","IBARXEPS",8,0)
POST ; Entry point from TaskMan
"RTN","IBARXEPS",9,0)
 I '$D(DT) D
"RTN","IBARXEPS",10,0)
 .N %,%H,%I,X,DT
"RTN","IBARXEPS",11,0)
 .D NOW^%DTC
"RTN","IBARXEPS",12,0)
 .S DT=X
"RTN","IBARXEPS",13,0)
 N NAMESPC
"RTN","IBARXEPS",14,0)
 S NAMESPC=$$NAMESPC()
"RTN","IBARXEPS",15,0)
 D UPDT($E(DT,1,3)_"0101",DT,1)
"RTN","IBARXEPS",16,0)
 K ^XTMP(NAMESPC,"RUNNING")
"RTN","IBARXEPS",17,0)
 Q
"RTN","IBARXEPS",18,0)
START ;Entry Point from post-install
"RTN","IBARXEPS",19,0)
 N QTIME,X,NAMESPC
"RTN","IBARXEPS",20,0)
 S NAMESPC=$$NAMESPC()
"RTN","IBARXEPS",21,0)
 Q:$$RUNCHK(NAMESPC)   ; Quit if already running or has run to completion
"RTN","IBARXEPS",22,0)
 K ^XTMP(NAMESPC)
"RTN","IBARXEPS",23,0)
 S X=$$QTIME(.QTIME)
"RTN","IBARXEPS",24,0)
 S ^XTMP(NAMESPC,"USER")=$S($G(DUZ)'="":DUZ,1:"UNKNOWN")
"RTN","IBARXEPS",25,0)
 S:'$$QUEUE(QTIME) ^XTMP(NAMESPC,"RUNNING")=""
"RTN","IBARXEPS",26,0)
 Q
"RTN","IBARXEPS",27,0)
NAMESPC() ; API returns the name space for this patch
"RTN","IBARXEPS",28,0)
 Q "IBARXEPS"
"RTN","IBARXEPS",29,0)
RUNCHK(NAMESPC) ; Check to see if clean up is already running
"RTN","IBARXEPS",30,0)
 Q:NAMESPC="" 1                   ; Name Space must be defined
"RTN","IBARXEPS",31,0)
 Q:$D(^XTMP(NAMESPC,"RUNNING")) 1
"RTN","IBARXEPS",32,0)
 Q 0
"RTN","IBARXEPS",33,0)
QTIME(WHEN) ; Get the run time for queuing
"RTN","IBARXEPS",34,0)
 N %,%H,%I,X
"RTN","IBARXEPS",35,0)
 D NOW^%DTC
"RTN","IBARXEPS",36,0)
 S WHEN=$P(%,".")_"."_$E($P(%,".",2),1,4)
"RTN","IBARXEPS",37,0)
 Q 0
"RTN","IBARXEPS",38,0)
QUEUE(ZTDTH) ; Queue the process
"RTN","IBARXEPS",39,0)
 N NAMESPC,QUEERR,ZTDESC,ZTRTN,ZTSK
"RTN","IBARXEPS",40,0)
 S NAMESPC=$$NAMESPC
"RTN","IBARXEPS",41,0)
 S QUEERR=0
"RTN","IBARXEPS",42,0)
 S ZTRTN="POST^IBARXEPS"
"RTN","IBARXEPS",43,0)
 S ZTDESC=NAMESPC_" - RX COPAY EXEMPTION UPDATE STATUS"
"RTN","IBARXEPS",44,0)
 S ZTIO=""
"RTN","IBARXEPS",45,0)
 D ^%ZTLOAD
"RTN","IBARXEPS",46,0)
 K ^XTMP(NAMESPC,"ZTSK")
"RTN","IBARXEPS",47,0)
 I '$D(ZTSK) S ^XTMP(NAMESPC,"ZTSK")="Unable to queue post-install process.",QUEERR=1
"RTN","IBARXEPS",48,0)
 I $D(ZTSK) D
"RTN","IBARXEPS",49,0)
 . S ^XTMP(NAMESPC,"ZTSK")="Post-install queued. Task ID: "_$G(ZTSK)
"RTN","IBARXEPS",50,0)
 . D MES^XPDUTL(" This request queued as Task # "_ZTSK)
"RTN","IBARXEPS",51,0)
    . D MES^XPDUTL("")
"RTN","IBARXEPS",52,0)
    . Q
"RTN","IBARXEPS",53,0)
 Q QUEERR
"RTN","IBARXEPS",54,0)
 ;
"RTN","IBARXEPS",55,0)
UPDT(IBBDT,IBEDT,IBUP) ;
"RTN","IBARXEPS",56,0)
 ; IBBDT - Beginning Date for the process
"RTN","IBARXEPS",57,0)
 ; IBEDT - Ending Date for the process
"RTN","IBARXEPS",58,0)
 ; IBUP  - Update mode (1 - Update, 0 - Report only)
"RTN","IBARXEPS",59,0)
 ;
"RTN","IBARXEPS",60,0)
 ; All three input parameters are required
"RTN","IBARXEPS",61,0)
 I 'IBBDT!('IBEDT)!(IBEDT<IBBDT) Q
"RTN","IBARXEPS",62,0)
 ;
"RTN","IBARXEPS",63,0)
 ; Entry point to start comparison
"RTN","IBARXEPS",64,0)
 N IBJOB,IBWHER,%
"RTN","IBARXEPS",65,0)
 S (IBPCNT,IBPAG)=0,IBOK=1 D NOW^%DTC S Y=% D D^DIQ
"RTN","IBARXEPS",66,0)
 S IBPDAT=$P(Y,"@")_" "_$E($P(Y,"@",2),1,5)
"RTN","IBARXEPS",67,0)
 K ^TMP($J,"IBUNVER")
"RTN","IBARXEPS",68,0)
 ;
"RTN","IBARXEPS",69,0)
 ; Look through EFFECTIVE DATE x-ref in BILLING EXEMPTIONS File #354.1
"RTN","IBARXEPS",70,0)
 S IBDT=IBBDT-.00001
"RTN","IBARXEPS",71,0)
 F  S IBDT=$O(^IBA(354.1,"B",IBDT)) Q:'IBDT!(IBDT>(IBEDT+.9))  D
"RTN","IBARXEPS",72,0)
 .S IBDA=0 F   S IBDA=$O(^IBA(354.1,"B",IBDT,IBDA)) Q:'IBDA  D 
"RTN","IBARXEPS",73,0)
 ..D CHK I 'IBOK D UP:IBUP,SET
"RTN","IBARXEPS",74,0)
 D REPORT
"RTN","IBARXEPS",75,0)
 ;
"RTN","IBARXEPS",76,0)
 K ^TMP($J,"IBUNVER")
"RTN","IBARXEPS",77,0)
 K DFN,DIR,DIRUT,DIC,DIE,DA,DR,X,Y
"RTN","IBARXEPS",78,0)
 K IBBDT,IBDA,IBDATA,IBDEPEN,IBDFN,IBDT,IBEDT,IBER,IBERR,IBEXREA,IBEXREAN,IBEXREAO,IBJ,IBMESS,IBNAM,IBOK,IBP,IBPAG,IBPCNT,IBPDAT,IBQUIT,IBUP
"RTN","IBARXEPS",79,0)
 Q
"RTN","IBARXEPS",80,0)
 ;
"RTN","IBARXEPS",81,0)
CHK ; Check if current status = computed status
"RTN","IBARXEPS",82,0)
 S IBOK=1,IBMESS="Nothing Updated",IBERR=""
"RTN","IBARXEPS",83,0)
 S X=$G(^IBA(354.1,+IBDA,0)) G CHKQ:'$P(X,"^",10) ;not active skip
"RTN","IBARXEPS",84,0)
 S DFN=$P(X,"^",2)
"RTN","IBARXEPS",85,0)
 S Y=$G(^IBA(354,DFN,0)) I +X<$P(Y,"^",3) G CHKQ ;not current exemption
"RTN","IBARXEPS",86,0)
 ;
"RTN","IBARXEPS",87,0)
 N DGMT,CONV,CLN S (CLN,CONV)=0,DGMT=$$LST^DGMTU(DFN,+X,1)
"RTN","IBARXEPS",88,0)
 I $P(DGMT,U,5)=2 D  G:CONV CHKQ           ; skip Edb conv. tests
"RTN","IBARXEPS",89,0)
 .; Loop through the MT comments, Check for EDB converted test 
"RTN","IBARXEPS",90,0)
 .; No comments to check
"RTN","IBARXEPS",91,0)
 .Q:'$D(^DGMT(408.31,+DGMT,"C",1,0))
"RTN","IBARXEPS",92,0)
 .F  S CLN=$O(^DGMT(408.31,+DGMT,"C",CLN)) Q:'CLN!(CONV)  D
"RTN","IBARXEPS",93,0)
 ..I ^DGMT(408.31,+DGMT,"C",CLN,0)["Z06 MT via Edb" S CONV=1
"RTN","IBARXEPS",94,0)
 ;
"RTN","IBARXEPS",95,0)
 S IBPCNT=IBPCNT+1
"RTN","IBARXEPS",96,0)
 I '+Y S IBOK=0,IBERR=4
"RTN","IBARXEPS",97,0)
 S IBEXREAO=$P(X,"^",5)_"^"_+X ;current exemption
"RTN","IBARXEPS",98,0)
 I $P($G(^IBE(354.2,+IBEXREAO,0)),"^",5)=2010 G CHKQ ; hardships don't report
"RTN","IBARXEPS",99,0)
 I +X>$P(Y,"^",3) S IBOK=0,IBERR=1 ;most current exemption not in 354
"RTN","IBARXEPS",100,0)
 I $P(X,"^",5)'=$P(Y,"^",5) S IBOK=0,IBERR=2 ;Current exemption not in 354
"RTN","IBARXEPS",101,0)
 I $P(X,"^",4)'=$P(Y,"^",4) S IBOK=0,IBERR=5 ;current status in exemption not in 354
"RTN","IBARXEPS",102,0)
 S IBEXREAN=$$STATUS^IBARXEU1(DFN,DT)
"RTN","IBARXEPS",103,0)
 I +IBEXREAO'=+IBEXREAN S IBOK=0,IBERR=3
"RTN","IBARXEPS",104,0)
CHKQ Q
"RTN","IBARXEPS",105,0)
 ;
"RTN","IBARXEPS",106,0)
UP ; -- update current exemption status
"RTN","IBARXEPS",107,0)
 Q:IBOK
"RTN","IBARXEPS",108,0)
 S IBJOB=15,IBWHER=16
"RTN","IBARXEPS",109,0)
 I IBERR=4 D  G UPQ
"RTN","IBARXEPS",110,0)
 .S DIE="^IBA(354,",DA=DFN,DR=".01////"_DFN D ^DIE
"RTN","IBARXEPS",111,0)
 .K DIE,DA,DR,DIC
"RTN","IBARXEPS",112,0)
 .S IBMESS="Name Corrected"
"RTN","IBARXEPS",113,0)
UP1 N IBOLDAUT S IBOLDAUT=""
"RTN","IBARXEPS",114,0)
 ;
"RTN","IBARXEPS",115,0)
 ; -- if currently not auto exempt make sure not more recent auto exempt
"RTN","IBARXEPS",116,0)
 I $L($P($G(^IBE(354.2,+IBEXREAN,0)),"^",5))>2 D OLDAUT^IBARXEX1(IBEXREAN)
"RTN","IBARXEPS",117,0)
 S IBFORCE=$P(IBEXREAN,"^",2)
"RTN","IBARXEPS",118,0)
 D MOSTR^IBARXEU5($P(IBEXREAN,"^",2),+IBEXREAN)
"RTN","IBARXEPS",119,0)
 D ADDEX^IBAUTL6(+IBEXREAN,$P(IBEXREAN,"^",2),1,1,IBOLDAUT)
"RTN","IBARXEPS",120,0)
 S IBMESS="Updated"
"RTN","IBARXEPS",121,0)
UPQ K IBFORCE Q
"RTN","IBARXEPS",122,0)
 ;
"RTN","IBARXEPS",123,0)
SET ; Set ^tmp node if not okay
"RTN","IBARXEPS",124,0)
 Q:IBOK
"RTN","IBARXEPS",125,0)
 S IBP=$$PT^IBEFUNC(DFN)
"RTN","IBARXEPS",126,0)
 S IBDFN=DFN
"RTN","IBARXEPS",127,0)
 I $D(^TMP($J,"IBUNVER",$P(IBP,"^"),DFN)) S IBDFN=DFN_"-"_IBPCNT
"RTN","IBARXEPS",128,0)
 S ^TMP($J,"IBUNVER",$P(IBP,"^"),IBDFN)=IBEXREAO_"^"_IBEXREAN_"^"_IBERR_"^"_IBMESS_"^"_IBP
"RTN","IBARXEPS",129,0)
 Q
"RTN","IBARXEPS",130,0)
 ;
"RTN","IBARXEPS",131,0)
REPORT ; Send MailMan recap report of updated records
"RTN","IBARXEPS",132,0)
 N IBMGRP,XMDUZ,XMTEXT,XMY,XMSUB,LNCNT,IBPDAT,IBDCNT,MSG,TXT,EXRSN,XMDUZ
"RTN","IBARXEPS",133,0)
 S IBMGRP=$$GET1^DIQ(350.9,1,.13)
"RTN","IBARXEPS",134,0)
 Q:IBMGRP=""
"RTN","IBARXEPS",135,0)
 S IBMGRP=$O(^XMB(3.8,"B",IBMGRP,""))
"RTN","IBARXEPS",136,0)
 Q:'IBMGRP
"RTN","IBARXEPS",137,0)
 D XMY^DGMTUTL(IBMGRP,0,1)
"RTN","IBARXEPS",138,0)
 S XMDUZ="IB PACKAGE",XMTEXT="MSG(",LNCNT=1,IBDCNT=0
"RTN","IBARXEPS",139,0)
 S XMY(DUZ)="",XMSUB="IB RX COPAY EXEMPT UPDATE"
"RTN","IBARXEPS",140,0)
 D NOW^%DTC S Y=% D D^DIQ S IBPDAT=$P(Y,"@")_" "_$E($P(Y,"@",2),1,5)
"RTN","IBARXEPS",141,0)
 S MSG(LNCNT)="     Medication Copayment Exemption Problem Report "_IBPDAT
"RTN","IBARXEPS",142,0)
 S LNCNT=LNCNT+1,MSG(LNCNT)=" "
"RTN","IBARXEPS",143,0)
 S TXT="Patient               PT. ID       Error         Current/Calc Exemption"
"RTN","IBARXEPS",144,0)
 S LNCNT=LNCNT+1,MSG(LNCNT)=TXT
"RTN","IBARXEPS",145,0)
 S LNCNT=LNCNT+1,MSG(LNCNT)=$TR($J(" ",78)," ","-")
"RTN","IBARXEPS",146,0)
 D EXRSN
"RTN","IBARXEPS",147,0)
 S IBNAM="" F  S IBNAM=$O(^TMP($J,"IBUNVER",IBNAM)) Q:IBNAM=""  D
"RTN","IBARXEPS",148,0)
 .S IBDFN="" F  S IBDFN=$O(^TMP($J,"IBUNVER",IBNAM,IBDFN)) Q:IBDFN=""  D
"RTN","IBARXEPS",149,0)
 ..S IBER=^(IBDFN) D MSGLN(IBNAM,IBER)
"RTN","IBARXEPS",150,0)
 ;
"RTN","IBARXEPS",151,0)
 I $D(^TMP($J,"IBUNVER")) D
"RTN","IBARXEPS",152,0)
 .S LNCNT=LNCNT+1,MSG(LNCNT)=" "
"RTN","IBARXEPS",153,0)
 .S LNCNT=LNCNT+1,MSG(LNCNT)="There were "_IBDCNT_" discrepancies found in "_IBPCNT_" exemptions checked."
"RTN","IBARXEPS",154,0)
 I '$D(^TMP($J,"IBUNVER")) S LNCNT=LNCNT+1,MSG(LNCNT)=" No discrepancies found in "_IBPCNT_" exemptions checked."
"RTN","IBARXEPS",155,0)
 D ^XMD
"RTN","IBARXEPS",156,0)
REPORTQ Q
"RTN","IBARXEPS",157,0)
 ;
"RTN","IBARXEPS",158,0)
MSGLN(IBNAM,IBER) ; Create the body of the report
"RTN","IBARXEPS",159,0)
 N IBSSN,IBCURX,IBCALX,RECORD
"RTN","IBARXEPS",160,0)
 S IBNAM=$E(IBNAM,1,20),IBDCNT=IBDCNT+1
"RTN","IBARXEPS",161,0)
 S IBSSN=$P(IBER,U,8)
"RTN","IBARXEPS",162,0)
 S X=$P(IBER,U,5),X=$E($S(X=3:"Incorr Exmpt",X=1!(X=2)!(X=5):"Not Curr Stat",X=4:"Name Missing",1:"Hmmmm"),1,13)
"RTN","IBARXEPS",163,0)
 S IBCURX=EXRSN($P(IBER,U))
"RTN","IBARXEPS",164,0)
 S IBCALX=EXRSN($P(IBER,U,3))
"RTN","IBARXEPS",165,0)
 S RECORD=$$LJ^XLFSTR(IBNAM,22," ")_IBSSN_"  "_$$LJ^XLFSTR(X,15," ")_IBCURX_"/"_IBCALX
"RTN","IBARXEPS",166,0)
 S LNCNT=LNCNT+1,MSG(LNCNT)=RECORD
"RTN","IBARXEPS",167,0)
 Q
"RTN","IBARXEPS",168,0)
 ;
"RTN","IBARXEPS",169,0)
EXRSN ; Exempt Reason Array for MailMan Message
"RTN","IBARXEPS",170,0)
 N IBIEN S IBIEN=0
"RTN","IBARXEPS",171,0)
 F  S IBIEN=$O(^IBE(354.2,IBIEN)) Q:'IBIEN  S EXRSN(IBIEN)=$E($P(^IBE(354.2,IBIEN,0),U),1,15)
"RTN","IBARXEPS",172,0)
 Q
"RTN","IBARXEPS",173,0)
 ;
"VER")
8.0^22.0
"BLD",6014,6)
^300
**END**
**END**
