Released PSU*4*3 SEQ #2
Extracted from mail message
**KIDS**:PSU*4.0*3^

**INSTALL NAME**
PSU*4.0*3
"BLD",5500,0)
PSU*4.0*3^PHARMACY BENEFITS MANAGEMENT^0^3060201^y
"BLD",5500,1,0)
^^17^17^3051117^^
"BLD",5500,1,1,0)
The Pharmacy Benefits Management (PBM) Extract Enhancement III project 
"BLD",5500,1,2,0)
provides enhancements to send all chemistry lab test results to the 
"BLD",5500,1,3,0)
Consolidated Mail Outpatient Pharmacy (CMOP) National Server.  These 
"BLD",5500,1,4,0)
results are sent via Health Level 7 (HL7) messages using the Health Level 
"BLD",5500,1,5,0)
Seven Optimized (HLO) messaging service.  
"BLD",5500,1,6,0)
 
"BLD",5500,1,7,0)
This patch includes an environmental check routine. The preinstallation 
"BLD",5500,1,8,0)
steps require the logical link, PSU SEND, to be defined correctly. It 
"BLD",5500,1,9,0)
checks to see if it is unfurling within a test area or a live area and if
"BLD",5500,1,10,0)
the link is configured incorrectly, the installation lists what is wrong 
"BLD",5500,1,11,0)
with the link and then aborts.  The IRM can troubleshoot the link and run 
"BLD",5500,1,12,0)
the installation of PSU*4*3 once he has the link defined as specified.
"BLD",5500,1,13,0)
 
"BLD",5500,1,14,0)
This patch also includes the listening software employed at the CMOP-NAT
"BLD",5500,1,15,0)
server. It is routines PSULRHL2 & PSULRHL3. NEITHER OF THESE ROUTINES 
"BLD",5500,1,16,0)
SHOULD BE USED AT SITES.  These should only be deployed on the CMOP-NAT
"BLD",5500,1,17,0)
server for PBM.
"BLD",5500,4,0)
^9.64PA^779.2^1
"BLD",5500,4,779.2,0)
779.2
"BLD",5500,4,779.2,222)
n^n^f^^y^^y^o^n
"BLD",5500,4,779.2,224)
I $P($G(^HLD(779.2,+Y,0)),"^")="PSU-SITE"
"BLD",5500,4,"B",779.2,779.2)

"BLD",5500,6)
13^
"BLD",5500,"ABPKG")
n
"BLD",5500,"INID")
y
"BLD",5500,"INIT")

"BLD",5500,"KRN",0)
^9.67PA^8989.52^19
"BLD",5500,"KRN",.4,0)
.4
"BLD",5500,"KRN",.401,0)
.401
"BLD",5500,"KRN",.402,0)
.402
"BLD",5500,"KRN",.403,0)
.403
"BLD",5500,"KRN",.5,0)
.5
"BLD",5500,"KRN",.84,0)
.84
"BLD",5500,"KRN",3.6,0)
3.6
"BLD",5500,"KRN",3.8,0)
3.8
"BLD",5500,"KRN",3.8,"NM",0)
^9.68A^^0
"BLD",5500,"KRN",9.2,0)
9.2
"BLD",5500,"KRN",9.2,"NM",0)
^9.68A^^
"BLD",5500,"KRN",9.8,0)
9.8
"BLD",5500,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",5500,"KRN",9.8,"NM",1,0)
PSULRHL1^^0^B39562989
"BLD",5500,"KRN",9.8,"NM",2,0)
PSULRHL2^^0^B32829434
"BLD",5500,"KRN",9.8,"NM",3,0)
PSULRHL3^^0^B37733711
"BLD",5500,"KRN",9.8,"NM","B","PSULRHL1",1)

"BLD",5500,"KRN",9.8,"NM","B","PSULRHL2",2)

"BLD",5500,"KRN",9.8,"NM","B","PSULRHL3",3)

"BLD",5500,"KRN",19,0)
19
"BLD",5500,"KRN",19,"NM",0)
^9.68A^^0
"BLD",5500,"KRN",19.1,0)
19.1
"BLD",5500,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",5500,"KRN",101,0)
101
"BLD",5500,"KRN",101,"NM",0)
^9.68A^9^4
"BLD",5500,"KRN",101,"NM",1,0)
PSU EVENT LAB^^0
"BLD",5500,"KRN",101,"NM",7,0)
LR7O ALL EVSEND RESULTS^^2
"BLD",5500,"KRN",101,"NM",8,0)
PSU-SITE-DRIVER^^0
"BLD",5500,"KRN",101,"NM",9,0)
PSU-SITE-SUBSCRIBER^^0
"BLD",5500,"KRN",101,"NM","B","LR7O ALL EVSEND RESULTS",7)

"BLD",5500,"KRN",101,"NM","B","PSU EVENT LAB",1)

"BLD",5500,"KRN",101,"NM","B","PSU-SITE-DRIVER",8)

"BLD",5500,"KRN",101,"NM","B","PSU-SITE-SUBSCRIBER",9)

"BLD",5500,"KRN",409.61,0)
409.61
"BLD",5500,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",5500,"KRN",771,0)
771
"BLD",5500,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",5500,"KRN",771,"NM",1,0)
PSU NAT SITE^^0
"BLD",5500,"KRN",771,"NM",2,0)
PSU-SITE^^0
"BLD",5500,"KRN",771,"NM","B","PSU NAT SITE",1)

"BLD",5500,"KRN",771,"NM","B","PSU-SITE",2)

"BLD",5500,"KRN",870,0)
870
"BLD",5500,"KRN",870,"NM",0)
^9.68A^^0
"BLD",5500,"KRN",8989.51,0)
8989.51
"BLD",5500,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",5500,"KRN",8989.52,0)
8989.52
"BLD",5500,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",5500,"KRN",8994,0)
8994
"BLD",5500,"KRN",8994,"NM",0)
^9.68A^^
"BLD",5500,"KRN","B",.4,.4)

"BLD",5500,"KRN","B",.401,.401)

"BLD",5500,"KRN","B",.402,.402)

"BLD",5500,"KRN","B",.403,.403)

"BLD",5500,"KRN","B",.5,.5)

"BLD",5500,"KRN","B",.84,.84)

"BLD",5500,"KRN","B",3.6,3.6)

"BLD",5500,"KRN","B",3.8,3.8)

"BLD",5500,"KRN","B",9.2,9.2)

"BLD",5500,"KRN","B",9.8,9.8)

"BLD",5500,"KRN","B",19,19)

"BLD",5500,"KRN","B",19.1,19.1)

"BLD",5500,"KRN","B",101,101)

"BLD",5500,"KRN","B",409.61,409.61)

"BLD",5500,"KRN","B",771,771)

"BLD",5500,"KRN","B",870,870)

"BLD",5500,"KRN","B",8989.51,8989.51)

"BLD",5500,"KRN","B",8989.52,8989.52)

"BLD",5500,"KRN","B",8994,8994)

"BLD",5500,"PRE")
PSU3ENCK
"BLD",5500,"QUES",0)
^9.62^^0
"BLD",5500,"REQB",0)
^9.611^1^1
"BLD",5500,"REQB",1,0)
HL*1.6*126^2
"BLD",5500,"REQB","B","HL*1.6*126",1)

"DATA",779.2,11,0)
PSU-SITE
"DATA",779.2,11,2)
367
"FIA",779.2)
HLO APPLICATION REGISTRY
"FIA",779.2,0)
^HLD(779.2,
"FIA",779.2,0,0)
779.2
"FIA",779.2,0,1)
n^n^f^^y^^y^o^n
"FIA",779.2,0,10)

"FIA",779.2,0,11)
I $P($G(^HLD(779.2,+Y,0)),"^")="PSU-SITE"
"FIA",779.2,0,"RLRO")

"FIA",779.2,0,"VR")
4.0^PSU
"FIA",779.2,779.2)
0
"FIA",779.2,779.21)
0
"FRV1",779.2,"11,2",1)
PHARMACY BENEFITS MANAGEMENT
"FRV1",779.2,"11,2",1,"F")
;DIC(9.4,
"IX",779.2,779.2,"C",0)
779.2^C^Uniqueness Index for Key 'A' of File #779.2^R^^F^IR^I^779.2^^^^^LS
"IX",779.2,779.2,"C",1)
S ^HLD(779.2,"C",X,DA)=""
"IX",779.2,779.2,"C",2)
K ^HLD(779.2,"C",X,DA)
"IX",779.2,779.2,"C",2.5)
K ^HLD(779.2,"C")
"IX",779.2,779.2,"C",11.1,0)
^.114IA^1^1
"IX",779.2,779.2,"C",11.1,1,0)
1^F^779.2^.01^^1
"IX",779.2,779.21,"C",0)
779.21^C^Uniqueness Index for Key 'A' of Subfile #779.21^R^^R^IR^I^779.21^^^^^LS
"IX",779.2,779.21,"C",1)
S ^HLD(779.2,DA(1),1,"C",X(1),X(2),DA)=""
"IX",779.2,779.21,"C",2)
K ^HLD(779.2,DA(1),1,"C",X(1),X(2),DA)
"IX",779.2,779.21,"C",2.5)
K ^HLD(779.2,DA(1),1,"C")
"IX",779.2,779.21,"C",11.1,0)
^.114IA^2^2
"IX",779.2,779.21,"C",11.1,1,0)
1^F^779.21^.01^^1
"IX",779.2,779.21,"C",11.1,2,0)
2^F^779.21^.02^^2
"KEY",779.2,779.2,"A",0)
779.2^A^P^583
"KEY",779.2,779.2,"A",2,0)
^.312IA^1^1
"KEY",779.2,779.2,"A",2,1,0)
.01^779.2^1
"KEY",779.2,779.21,"A",0)
779.21^A^P^584
"KEY",779.2,779.21,"A",2,0)
^.312IA^2^2
"KEY",779.2,779.21,"A",2,1,0)
.01^779.21^1
"KEY",779.2,779.21,"A",2,2,0)
.02^779.21^2
"KEYPTR",779.2,779.2,"A")
779.2^C
"KEYPTR",779.2,779.21,"A")
779.21^C
"KRN",101,3346,-1)
2^7
"KRN",101,3346,0)
LR7O ALL EVSEND RESULTS^LAB RESULTS => EXTERNAL PACKAGE^^X^10000000083^^^^^^^
"KRN",101,3346,10,0)
^101.01PA^1^1
"KRN",101,3346,10,1,0)
5144^^^
"KRN",101,3346,10,1,"^")
PSU EVENT LAB
"KRN",101,5142,-1)
0^8
"KRN",101,5142,0)
PSU-SITE-DRIVER^^^E^^^^^^^^
"KRN",101,5142,770)
PSU-SITE^^OUL^R21^163^^^AL^NE^2.4^
"KRN",101,5142,772)

"KRN",101,5142,775,0)
^101.0775PA^1^1
"KRN",101,5142,775,1,0)
5143
"KRN",101,5142,775,1,"^")
PSU-SITE-SUBSCRIBER
"KRN",101,5143,-1)
0^9
"KRN",101,5143,0)
PSU-SITE-SUBSCRIBER^^^S^^^^^^^^
"KRN",101,5143,770)
^PSU NAT SITE^^A01^^^PSU SEND^^^^ACK
"KRN",101,5143,773)
1^0^0
"KRN",101,5144,-1)
0^1
"KRN",101,5144,0)
PSU EVENT LAB^LAB RESULTS => Send to PBM^^A^^^^^^^^PHARMACY BENEFITS MANAGEMENT
"KRN",101,5144,1,0)
^101.06^3^3^3050921^^^^
"KRN",101,5144,1,1,0)
This Protocol is triggered by the LR7O ALL EVSEND RESULTS protocol.  It 
"KRN",101,5144,1,2,0)
calls a Pharmacy routine that creates an HL7 message and sends it to the 
"KRN",101,5144,1,3,0)
national PBM Lab data data base.
"KRN",101,5144,20)
Q
"KRN",101,5144,99)
60285,51372
"KRN",101,5144,770)
^^^^^^PSU SEND^^^^
"KRN",771,123,-1)
0^2
"KRN",771,123,0)
PSU-SITE^a^^^^^US
"KRN",771,123,"FS")

"KRN",771,124,-1)
0^1
"KRN",771,124,0)
PSU NAT SITE^a^^^^^US
"MBREQ")
0
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PGL",779.2,0,9,.09)
APPLICATION SPECIFIC LISTENER^*P870'^HLCS(870,^0;9^S DIC("S")="I $E($P(^HLCS(870,Y,0),""^"",4),2)=""S""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"PGL",779.2,2,1,2)
Package File Link^RP9.4'^DIC(9.4,^2;1^Q
"PKG",367,-1)
1^1
"PKG",367,0)
PHARMACY BENEFITS MANAGEMENT^PSU^PHARMACY BENEFITS MANAGEMENT
"PKG",367,20,0)
^9.402P^^
"PKG",367,22,0)
^9.49I^1^1
"PKG",367,22,1,0)
4.0^3050620^3050831^10000000012
"PKG",367,22,1,"PAH",1,0)
3^3060201^10000000083
"PKG",367,22,1,"PAH",1,1,0)
^^17^17^3060201
"PKG",367,22,1,"PAH",1,1,1,0)
The Pharmacy Benefits Management (PBM) Extract Enhancement III project 
"PKG",367,22,1,"PAH",1,1,2,0)
provides enhancements to send all chemistry lab test results to the 
"PKG",367,22,1,"PAH",1,1,3,0)
Consolidated Mail Outpatient Pharmacy (CMOP) National Server.  These 
"PKG",367,22,1,"PAH",1,1,4,0)
results are sent via Health Level 7 (HL7) messages using the Health Level 
"PKG",367,22,1,"PAH",1,1,5,0)
Seven Optimized (HLO) messaging service.  
"PKG",367,22,1,"PAH",1,1,6,0)
 
"PKG",367,22,1,"PAH",1,1,7,0)
This patch includes an environmental check routine. The preinstallation 
"PKG",367,22,1,"PAH",1,1,8,0)
steps require the logical link, PSU SEND, to be defined correctly. It 
"PKG",367,22,1,"PAH",1,1,9,0)
checks to see if it is unfurling within a test area or a live area and if
"PKG",367,22,1,"PAH",1,1,10,0)
the link is configured incorrectly, the installation lists what is wrong 
"PKG",367,22,1,"PAH",1,1,11,0)
with the link and then aborts.  The IRM can troubleshoot the link and run 
"PKG",367,22,1,"PAH",1,1,12,0)
the installation of PSU*4*3 once he has the link defined as specified.
"PKG",367,22,1,"PAH",1,1,13,0)
 
"PKG",367,22,1,"PAH",1,1,14,0)
This patch also includes the listening software employed at the CMOP-NAT
"PKG",367,22,1,"PAH",1,1,15,0)
server. It is routines PSULRHL2 & PSULRHL3. NEITHER OF THESE ROUTINES 
"PKG",367,22,1,"PAH",1,1,16,0)
SHOULD BE USED AT SITES.  These should only be deployed on the CMOP-NAT
"PKG",367,22,1,"PAH",1,1,17,0)
server for PBM.
"PRE")
PSU3ENCK
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","PSU3ENCK")
0^^B21346880
"RTN","PSU3ENCK",1,0)
PSU3ENCK ;BIR/RDC - ENVIRONMENTAL CHECK ROUTINE ; 29 SEPT 2005
"RTN","PSU3ENCK",2,0)
 ;;4.0;PHARMACY BENEFITS MANAGEMENT;**3**;MARCH, 2005
"RTN","PSU3ENCK",3,0)
 ;ENVIRONMENT CHECK FOR PBM
"RTN","PSU3ENCK",4,0)
START ;
"RTN","PSU3ENCK",5,0)
 ; * This program inspects the configuration of the
"RTN","PSU3ENCK",6,0)
 ;   PSU SEND link. If the link is not set up right,
"RTN","PSU3ENCK",7,0)
 ;   depending on if they are in live or test, the
"RTN","PSU3ENCK",8,0)
 ;   distribution fails. The reason for failure and
"RTN","PSU3ENCK",9,0)
 ;   a prompt to fix the link and retry are displayed.
"RTN","PSU3ENCK",10,0)
 ;
"RTN","PSU3ENCK",11,0)
 ; * DBIA 4440 for the $$PROD^XUPROD API            *
"RTN","PSU3ENCK",12,0)
 ; * DBIA 4804 for direct global read of ^HLCS(870  *
"RTN","PSU3ENCK",13,0)
 ; * DBIA 4421 for the $$RUNNING^HLOUSER API        *
"RTN","PSU3ENCK",14,0)
 ;
"RTN","PSU3ENCK",15,0)
 N Y,DIR,PTR,REC,DETAIL,DOMAIN,IPADDR,PORT,ENABLED,LIVE,QQ,R,IP2,LEGACY
"RTN","PSU3ENCK",16,0)
 S (QQ,DETAIL,IPADDR,PORT,ENABLED,LIVE,LEGACY)=0
"RTN","PSU3ENCK",17,0)
 ;
"RTN","PSU3ENCK",18,0)
 S PTR=$O(^HLCS(870,"B","PSU SEND",""))  ; * get link details
"RTN","PSU3ENCK",19,0)
 ;
"RTN","PSU3ENCK",20,0)
 S REC=$G(^HLCS(870,PTR,0))
"RTN","PSU3ENCK",21,0)
 ;
"RTN","PSU3ENCK",22,0)
 I REC']"" D  Q
"RTN","PSU3ENCK",23,0)
 . D MES^XPDUTL("CREATE AND DEFINE THE PSU SEND HL LOGICAL LINK AND TRY AGAIN")
"RTN","PSU3ENCK",24,0)
 ;
"RTN","PSU3ENCK",25,0)
MENU ;
"RTN","PSU3ENCK",26,0)
 S R(1)="**********************************************************"
"RTN","PSU3ENCK",27,0)
 S R(1,"F")="!"
"RTN","PSU3ENCK",28,0)
 S R(2)="This patch you are about to install sends LAB data out via"
"RTN","PSU3ENCK",29,0)
 S R(2,"F")="!"
"RTN","PSU3ENCK",30,0)
 S R(3)="HL7 messages through the new HLO HL7 engine."
"RTN","PSU3ENCK",31,0)
 S R(3,"F")="!"
"RTN","PSU3ENCK",32,0)
 S R(4)="Messages should never be sent from anything other than a live account"
"RTN","PSU3ENCK",33,0)
 S R(4,"F")="!!"
"RTN","PSU3ENCK",34,0)
 S R(5)="If this install is for a live area, please ensure HLO is up and running"
"RTN","PSU3ENCK",35,0)
 S R(5,"F")="!!"
"RTN","PSU3ENCK",36,0)
 S R(6)="If this is a test or legacy system, please ensure HLO is NOT up and running"
"RTN","PSU3ENCK",37,0)
 S R(6,"F")="!!"
"RTN","PSU3ENCK",38,0)
 S R(7)="    "
"RTN","PSU3ENCK",39,0)
 S R(7,"F")="!"
"RTN","PSU3ENCK",40,0)
 D EN^DDIOL(.R)
"RTN","PSU3ENCK",41,0)
 K R
"RTN","PSU3ENCK",42,0)
 ;*******************************************************
"RTN","PSU3ENCK",43,0)
 K DIR
"RTN","PSU3ENCK",44,0)
 S DIR(0)="Y"
"RTN","PSU3ENCK",45,0)
 S DIR("A")="Is this a legacy system (Y/N)"
"RTN","PSU3ENCK",46,0)
 S DIR("B")="NO"
"RTN","PSU3ENCK",47,0)
 S DIR("?")="Enter a 'Y' if this *IS* a legacy system."
"RTN","PSU3ENCK",48,0)
 S DIR("??")="Enter an 'N' *UNLESS* this is a legacy system."
"RTN","PSU3ENCK",49,0)
 S DIR("T")=300
"RTN","PSU3ENCK",50,0)
 D ^DIR K DIR
"RTN","PSU3ENCK",51,0)
 I Y S LEGACY="1"
"RTN","PSU3ENCK",52,0)
 ;***************************************************
"RTN","PSU3ENCK",53,0)
 K DIR
"RTN","PSU3ENCK",54,0)
 S DIR("B")="YES"
"RTN","PSU3ENCK",55,0)
 S DIR(0)="Y"
"RTN","PSU3ENCK",56,0)
 S DIR("A")="Are you certain you want to continue (Y/N)"
"RTN","PSU3ENCK",57,0)
 S DIR("A",1)="  "
"RTN","PSU3ENCK",58,0)
 S DIR("A",2)="You are about to load patch PSU*4*3 into this area"
"RTN","PSU3ENCK",59,0)
 S DIR("A",3)="   "
"RTN","PSU3ENCK",60,0)
 S DIR("?")="Enter Y to continue, or N to exit this process"
"RTN","PSU3ENCK",61,0)
 S DIR("T")=300
"RTN","PSU3ENCK",62,0)
 D ^DIR K DIR
"RTN","PSU3ENCK",63,0)
 I $G(Y)'=1 D  Q
"RTN","PSU3ENCK",64,0)
 . S R(1)="You have opted to terminate the installation of patch PSU*4*3"
"RTN","PSU3ENCK",65,0)
 . S R(1,"F")="!!"
"RTN","PSU3ENCK",66,0)
 . S R(2)="Goodbye..."
"RTN","PSU3ENCK",67,0)
 . S R(2,"F")="!!"
"RTN","PSU3ENCK",68,0)
 . S R(3)="   "
"RTN","PSU3ENCK",69,0)
 . S R(3,"F")="!"
"RTN","PSU3ENCK",70,0)
 . D EN^DDIOL(.R)
"RTN","PSU3ENCK",71,0)
 K R
"RTN","PSU3ENCK",72,0)
 ;****************************************************************
"RTN","PSU3ENCK",73,0)
 S LIVE=$$PROD^XUPROD        ;get account type - 1=live ~ 0=test
"RTN","PSU3ENCK",74,0)
 I LEGACY S LIVE=0      ;IF THIS IS A LEGACY SYSTEM, TREAT AS NOT LIVE
"RTN","PSU3ENCK",75,0)
 ;
"RTN","PSU3ENCK",76,0)
 S DOMAIN=$P(REC,U,8)
"RTN","PSU3ENCK",77,0)
 ;
"RTN","PSU3ENCK",78,0)
 S ENABLED=$P(REC,U,6)
"RTN","PSU3ENCK",79,0)
 ;
"RTN","PSU3ENCK",80,0)
 S REC2=^HLCS(870,PTR,400)   ;IP & PORT live under the 400 node
"RTN","PSU3ENCK",81,0)
 ;
"RTN","PSU3ENCK",82,0)
 S IPADDR=$P(REC2,U,1)
"RTN","PSU3ENCK",83,0)
 ;
"RTN","PSU3ENCK",84,0)
 I DOMAIN]"" S IP2=$$ADDRESS^XLFNSLK(DOMAIN)
"RTN","PSU3ENCK",85,0)
 ;
"RTN","PSU3ENCK",86,0)
 S PORT=$P(REC2,U,8)
"RTN","PSU3ENCK",87,0)
 ;
"RTN","PSU3ENCK",88,0)
 ;                 ** if this is a test account or legacy system **
"RTN","PSU3ENCK",89,0)
 ;
"RTN","PSU3ENCK",90,0)
 I 'LIVE D  I QQ S XPDQUIT=1 QUIT
"RTN","PSU3ENCK",91,0)
 . I $$RUNNING^HLOUSR D
"RTN","PSU3ENCK",92,0)
 .. D MES^XPDUTL("HLO IS RUNNING, DEACTIVATE THE HLO APPLICATION FOR PBM PLEASE")
"RTN","PSU3ENCK",93,0)
 . I DOMAIN]"" D
"RTN","PSU3ENCK",94,0)
 .. D MES^XPDUTL("DELETE THE DOMAIN FROM YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",95,0)
 .. S QQ=1
"RTN","PSU3ENCK",96,0)
 . I IPADDR D
"RTN","PSU3ENCK",97,0)
 .. D MES^XPDUTL("DELETE THE IP ADDRESS FROM YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",98,0)
 .. S QQ=1
"RTN","PSU3ENCK",99,0)
 . I PORT'=5026 D
"RTN","PSU3ENCK",100,0)
 .. D MES^XPDUTL("SET THE PORT NUMBER TO 5026 IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",101,0)
 .. S QQ=1
"RTN","PSU3ENCK",102,0)
 . I ENABLED D
"RTN","PSU3ENCK",103,0)
 .. D MES^XPDUTL("DISABLE THE AUTOSTART IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",104,0)
 .. S QQ=1
"RTN","PSU3ENCK",105,0)
 ;                                * if this is a live account *
"RTN","PSU3ENCK",106,0)
 I LIVE D  I QQ S XPDQUIT=1 QUIT
"RTN","PSU3ENCK",107,0)
 . I '$$RUNNING^HLOUSR D
"RTN","PSU3ENCK",108,0)
 .. D MES^XPDUTL("HLO IS NOT RUNNING, ACTIVATE THE HLO APPLICATION FOR PBM PLEASE")
"RTN","PSU3ENCK",109,0)
 . I DOMAIN'="CMOP-NAT.MED.VA.GOV" D
"RTN","PSU3ENCK",110,0)
 .. D MES^XPDUTL("CORRECT THE DOMAIN NAME IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",111,0)
 .. S QQ=1
"RTN","PSU3ENCK",112,0)
 . I IPADDR'=IP2 D
"RTN","PSU3ENCK",113,0)
 .. D MES^XPDUTL("CORRECT THE IP ADDRESS IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",114,0)
 .. S QQ=1
"RTN","PSU3ENCK",115,0)
 . I PORT'=5001 D
"RTN","PSU3ENCK",116,0)
 .. D MES^XPDUTL("CORRECT THE PORT NUMBER (HLO) IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",117,0)
 .. S QQ=1
"RTN","PSU3ENCK",118,0)
 . I 'ENABLED D
"RTN","PSU3ENCK",119,0)
 .. D MES^XPDUTL("ENABLE THE AUTOSTART IN YOUR PSU SEND LINK AND TRY AGAIN")
"RTN","PSU3ENCK",120,0)
 .. S QQ=1
"RTN","PSU3ENCK",121,0)
 ;
"RTN","PSU3ENCK",122,0)
 ; * the link is correct - proceed
"RTN","PSU3ENCK",123,0)
 ;
"RTN","PSU3ENCK",124,0)
 D MES^XPDUTL("     ")
"RTN","PSU3ENCK",125,0)
 D MES^XPDUTL("***  ENVIRONMENTAL CHECK COMPLETE   ***")
"RTN","PSU3ENCK",126,0)
 D MES^XPDUTL("***  ENVIRONMENT PASSES ~ PROCEED  ***")
"RTN","PSU3ENCK",127,0)
 D MES^XPDUTL("     ")
"RTN","PSU3ENCK",128,0)
 ;
"RTN","PSU3ENCK",129,0)
 Q
"RTN","PSULRHL1")
0^1^B39562989
"RTN","PSULRHL1",1,0)
PSULRHL1 ;HCIOFO/BH/RDC - Process real time HL7 Lab messages ; 5/15/04 3:10pm
"RTN","PSULRHL1",2,0)
 ;;4.0;PHARMACY BENEFITS MANAGEMENT;**3**;MARCH, 2005
"RTN","PSULRHL1",3,0)
 ;
"RTN","PSULRHL1",4,0)
 ; DBIA 3565 to subscribe to the LR7O ALL EVSEND RESULTS protocol
"RTN","PSULRHL1",5,0)
 ; DBIA 998 to dig through ^DPT(i,"LR" go get the ien to file #63
"RTN","PSULRHL1",6,0)
 ; DBIA 91-A to dig through ^LAB(60 to get the name of the test
"RTN","PSULRHL1",7,0)
 ; DBIA 3630 to call the HL7 PID builder
"RTN","PSULRHL1",8,0)
 ; DBIA 4727 to call EN^HLOCNRT
"RTN","PSULRHL1",9,0)
 ; DBIA 3646 to call API: $$EMPL^DGSEC4
"RTN","PSULRHL1",10,0)
 ; DBIA 4658 to call API: $$TSTRES^LRRPU
"RTN","PSULRHL1",11,0)
 ;
"RTN","PSULRHL1",12,0)
 ; This program is called when a lab test is verified. If it is for a
"RTN","PSULRHL1",13,0)
 ; chemistry test, and not for an employee, an HL7 message will be
"RTN","PSULRHL1",14,0)
 ; created and sent to the CMOP-NAT server.
"RTN","PSULRHL1",15,0)
 ;
"RTN","PSULRHL1",16,0)
 ;
"RTN","PSULRHL1",17,0)
HL7 ; Entry point for PBM processing - triggered by lab protocol 
"RTN","PSULRHL1",18,0)
 ; LR7O ALL EVSEND RESULTS.
"RTN","PSULRHL1",19,0)
 ;
"RTN","PSULRHL1",20,0)
 N ARR,FIRST,LRDFN,PSUEXT,PSUHLFS,PSUHLECH,PSUHLCS
"RTN","PSULRHL1",21,0)
 ;
"RTN","PSULRHL1",22,0)
 ;  OREMSG is the pointer reference to the global that contains the
"RTN","PSULRHL1",23,0)
 ;  lab data and is passed in by the LR7O ALL EVSEND RESULTS protocol.
"RTN","PSULRHL1",24,0)
 ;  
"RTN","PSULRHL1",25,0)
 I '$D(@OREMSG) Q
"RTN","PSULRHL1",26,0)
 ;
"RTN","PSULRHL1",27,0)
 ; Get Lab parameters
"RTN","PSULRHL1",28,0)
 ;
"RTN","PSULRHL1",29,0)
 D INIT^HLFNC2("PSU-SITE-DRIVER",.PSUHL)
"RTN","PSULRHL1",30,0)
 ;
"RTN","PSULRHL1",31,0)
 ; Set up CS delimeter for the Pharmacy message
"RTN","PSULRHL1",32,0)
 ;
"RTN","PSULRHL1",33,0)
 S PSUHL("CS")=$E(PSUHL("ECH"),1)
"RTN","PSULRHL1",34,0)
 ;
"RTN","PSULRHL1",35,0)
 ; Set up segment processing parameters 
"RTN","PSULRHL1",36,0)
 ;
"RTN","PSULRHL1",37,0)
 S PSUEXT("PSUBUF")=$NA(^TMP("HLS",$J))
"RTN","PSULRHL1",38,0)
 S PSUEXT("PSUPTR")=0
"RTN","PSULRHL1",39,0)
 ;
"RTN","PSULRHL1",40,0)
 ; Get the delimiters that the passed in lab data is using
"RTN","PSULRHL1",41,0)
 ;
"RTN","PSULRHL1",42,0)
 D PARAMS
"RTN","PSULRHL1",43,0)
 S PSUHLECH=$G(ARR("PSUHLECH"),"^~\&")
"RTN","PSULRHL1",44,0)
 S PSUHLCS=$E(PSUHLECH,1)
"RTN","PSULRHL1",45,0)
 ;
"RTN","PSULRHL1",46,0)
 ; Quit if no DFN
"RTN","PSULRHL1",47,0)
 ;
"RTN","PSULRHL1",48,0)
 I '$D(ARR) Q
"RTN","PSULRHL1",49,0)
 I ARR("DFN")=0!(ARR("DFN")="") Q
"RTN","PSULRHL1",50,0)
 ;
"RTN","PSULRHL1",51,0)
 ; Quit if patient is an employee
"RTN","PSULRHL1",52,0)
 ;
"RTN","PSULRHL1",53,0)
 I $$EMPL^DGSEC4(ARR("DFN"),"PS") Q
"RTN","PSULRHL1",54,0)
 ;
"RTN","PSULRHL1",55,0)
 ; Get Lab's equivalent of a DFN (LRDFN)
"RTN","PSULRHL1",56,0)
 ;
"RTN","PSULRHL1",57,0)
 S LRDFN=$P(^DPT(ARR("DFN"),"LR"),"^")  ; DBIA 998 to get file #63 ien
"RTN","PSULRHL1",58,0)
 ;
"RTN","PSULRHL1",59,0)
 ; Loop through the lab data 
"RTN","PSULRHL1",60,0)
 ;
"RTN","PSULRHL1",61,0)
 S FIRST=1
"RTN","PSULRHL1",62,0)
 D LOOP
"RTN","PSULRHL1",63,0)
 ;
"RTN","PSULRHL1",64,0)
 ; Generate an HL7 if data exists to be sent
"RTN","PSULRHL1",65,0)
 ;
"RTN","PSULRHL1",66,0)
 I 'FIRST D GENERATE
"RTN","PSULRHL1",67,0)
 ;
"RTN","PSULRHL1",68,0)
 K PSUHL,ERR,OPTNS,ERR
"RTN","PSULRHL1",69,0)
 ;
"RTN","PSULRHL1",70,0)
 Q
"RTN","PSULRHL1",71,0)
 ;
"RTN","PSULRHL1",72,0)
LOOP ;
"RTN","PSULRHL1",73,0)
 N CNT,LRIDT,LRSS,PREV1,PREV2,QUIT1,QUIT2,REC,REC1,REC2,SEG,SEG1,SEG2,STR1
"RTN","PSULRHL1",74,0)
 K ^TMP("HLS",$J)
"RTN","PSULRHL1",75,0)
 S CNT=0
"RTN","PSULRHL1",76,0)
 F  Q:CNT=""  S CNT=$O(@OREMSG@(CNT)) Q:'CNT  D
"RTN","PSULRHL1",77,0)
 . S REC=@OREMSG@(CNT)
"RTN","PSULRHL1",78,0)
 . S REC=$$STRING(REC,CNT)
"RTN","PSULRHL1",79,0)
 . S SEG=$P(REC,PSUHLFS,1)
"RTN","PSULRHL1",80,0)
 . I SEG'="ORC" Q
"RTN","PSULRHL1",81,0)
 . S STR1=$P(REC,PSUHLFS,4)
"RTN","PSULRHL1",82,0)
 . S STR1=$P(STR1,PSUHLCS,1)
"RTN","PSULRHL1",83,0)
 . S LRSS=$P(STR1,";",4)
"RTN","PSULRHL1",84,0)
 . ;
"RTN","PSULRHL1",85,0)
 . ; Quit if data is not for Chemistry
"RTN","PSULRHL1",86,0)
 . ;
"RTN","PSULRHL1",87,0)
 . I LRSS'="CH" Q
"RTN","PSULRHL1",88,0)
 . S LRIDT=$P(STR1,";",5)
"RTN","PSULRHL1",89,0)
 . S QUIT1=0
"RTN","PSULRHL1",90,0)
 . F  Q:QUIT1!(CNT="")  S PREV1=CNT,CNT=$O(@OREMSG@(CNT)) Q:'CNT  D
"RTN","PSULRHL1",91,0)
 . . S REC1=@OREMSG@(CNT)
"RTN","PSULRHL1",92,0)
 . . S REC1=$$STRING(REC1,CNT)
"RTN","PSULRHL1",93,0)
 . . S SEG1=$P(REC1,PSUHLFS,1)
"RTN","PSULRHL1",94,0)
 . . I SEG1="ORC" S CNT=PREV1,QUIT1=1 Q
"RTN","PSULRHL1",95,0)
 . . I SEG1'="OBR" Q
"RTN","PSULRHL1",96,0)
 . . ; If this is the first OBR being processed i.e. this is valid 
"RTN","PSULRHL1",97,0)
 . . ; chemistry data set the PID segment
"RTN","PSULRHL1",98,0)
 . . I FIRST D PID S FIRST=0
"RTN","PSULRHL1",99,0)
 . . D OBR(REC1)
"RTN","PSULRHL1",100,0)
 . . S QUIT2=0
"RTN","PSULRHL1",101,0)
 . . F  Q:QUIT2  S PREV2=CNT,CNT=$O(@OREMSG@(CNT)) Q:'CNT  D
"RTN","PSULRHL1",102,0)
 . . . S REC2=@OREMSG@(CNT)
"RTN","PSULRHL1",103,0)
 . . . S REC2=$$STRING(REC2,CNT)
"RTN","PSULRHL1",104,0)
 . . . S SEG2=$P(REC2,PSUHLFS,1)
"RTN","PSULRHL1",105,0)
 . . . I SEG2="OBR"!(SEG2="ORC") S CNT=PREV2,QUIT2=1 Q
"RTN","PSULRHL1",106,0)
 . . . I SEG2'="OBX" Q
"RTN","PSULRHL1",107,0)
 . . . D OBX(REC2)
"RTN","PSULRHL1",108,0)
 Q
"RTN","PSULRHL1",109,0)
 ;
"RTN","PSULRHL1",110,0)
PID ;  Create the PID segment using the standard builder
"RTN","PSULRHL1",111,0)
 ;
"RTN","PSULRHL1",112,0)
 N K1,NEWSEG,SEG
"RTN","PSULRHL1",113,0)
 S SEG="SEG"
"RTN","PSULRHL1",114,0)
 D BLDPID^VAFCQRY(ARR("DFN"),1,"1,2,3",.SEG,.PSUHL,.ERR)
"RTN","PSULRHL1",115,0)
 ;
"RTN","PSULRHL1",116,0)
 ; Loop through the returned array just in case the data is spread over
"RTN","PSULRHL1",117,0)
 ; more than one node
"RTN","PSULRHL1",118,0)
 ;
"RTN","PSULRHL1",119,0)
 S K1="",NEWSEG=""
"RTN","PSULRHL1",120,0)
 F  S K1=$O(SEG(K1)) Q:'K1  D
"RTN","PSULRHL1",121,0)
 . S NEWSEG=NEWSEG_SEG(K1)
"RTN","PSULRHL1",122,0)
 ;
"RTN","PSULRHL1",123,0)
 ; Set the data string into the PBM HL7 array
"RTN","PSULRHL1",124,0)
 ;
"RTN","PSULRHL1",125,0)
 D SETSEG(NEWSEG)
"RTN","PSULRHL1",126,0)
 ;
"RTN","PSULRHL1",127,0)
 Q
"RTN","PSULRHL1",128,0)
 ;
"RTN","PSULRHL1",129,0)
OBR(REC) ;  Re-forms lab OBR to only send required data
"RTN","PSULRHL1",130,0)
 ;
"RTN","PSULRHL1",131,0)
 N OBRSEG,SITE,SPECDATE
"RTN","PSULRHL1",132,0)
 S OBRSEG="OBR"
"RTN","PSULRHL1",133,0)
 S SPECDATE=$P(REC,PSUHLFS,8)
"RTN","PSULRHL1",134,0)
 S SITE=$P(REC,PSUHLFS,16)
"RTN","PSULRHL1",135,0)
 S SITE=$TR(SITE,PSUHLCS,PSUHL("CS"))
"RTN","PSULRHL1",136,0)
 ;
"RTN","PSULRHL1",137,0)
 ; Create new OBR Segment and pass to SETSEG
"RTN","PSULRHL1",138,0)
 ;
"RTN","PSULRHL1",139,0)
 S $P(OBRSEG,PSUHL("FS"),8)=SPECDATE
"RTN","PSULRHL1",140,0)
 S $P(OBRSEG,PSUHL("FS"),16)=SITE
"RTN","PSULRHL1",141,0)
 ;
"RTN","PSULRHL1",142,0)
 ; Set the data string into the PBM HL7 array
"RTN","PSULRHL1",143,0)
 ;
"RTN","PSULRHL1",144,0)
 D SETSEG(OBRSEG)
"RTN","PSULRHL1",145,0)
 ;
"RTN","PSULRHL1",146,0)
 Q
"RTN","PSULRHL1",147,0)
 ;
"RTN","PSULRHL1",148,0)
OBX(REC) ;  Reforms lab OBX to only send the data needed
"RTN","PSULRHL1",149,0)
 N CODES,HRANGE,LABS,LNAME,LR60,LRANGE,LRDN,LOINC,LOINCS,P2,P3,P12,RANGE,RES,RESULTS,SEG,UNITS
"RTN","PSULRHL1",150,0)
 ;
"RTN","PSULRHL1",151,0)
 S P2=$P(REC,PSUHLFS,2)
"RTN","PSULRHL1",152,0)
 S P3=$P(REC,PSUHLFS,3)
"RTN","PSULRHL1",153,0)
 S P12=$P(REC,PSUHLFS,12)
"RTN","PSULRHL1",154,0)
 S RESULTS=$P(REC,PSUHLFS,6)
"RTN","PSULRHL1",155,0)
 S UNITS=$P(REC,PSUHLFS,7)
"RTN","PSULRHL1",156,0)
 S LABS=$P(REC,PSUHLFS,4)
"RTN","PSULRHL1",157,0)
 S LR60=$P(LABS,"^",4)
"RTN","PSULRHL1",158,0)
 S LRDN=$G(^LAB(60,LR60,0))
"RTN","PSULRHL1",159,0)
 S LRDN=$P($P(LRDN,"^",5),";",2)   ;  DBIA 91 for data name
"RTN","PSULRHL1",160,0)
 ;
"RTN","PSULRHL1",161,0)
 ; Make the call to LRRPU to get the LOINC code for this test
"RTN","PSULRHL1",162,0)
 ;
"RTN","PSULRHL1",163,0)
 S RES=$$TSTRES^LRRPU(LRDFN,LRSS,LRIDT,LRDN,LR60,1)
"RTN","PSULRHL1",164,0)
 ;
"RTN","PSULRHL1",165,0)
 S CODES=$P(RES,U,8),LOINCS=$P(CODES,"!",3)
"RTN","PSULRHL1",166,0)
 S LOINC=$P(LOINCS,";",1),LNAME=$P(LOINCS,";",2)
"RTN","PSULRHL1",167,0)
 S LRANGE=$P(RES,U,3),HRANGE=$P(RES,U,4)
"RTN","PSULRHL1",168,0)
 S RANGE=LRANGE_"-"_HRANGE I RANGE="-" S RANGE=""
"RTN","PSULRHL1",169,0)
 ;
"RTN","PSULRHL1",170,0)
 ; Use the Pharmacy HL7 delimeters
"RTN","PSULRHL1",171,0)
 ;
"RTN","PSULRHL1",172,0)
 S LABS=$TR(LABS,PSUHLCS,PSUHL("CS"))
"RTN","PSULRHL1",173,0)
 ;
"RTN","PSULRHL1",174,0)
 ; Add LOINC to the list of Labs if it exists
"RTN","PSULRHL1",175,0)
 ;
"RTN","PSULRHL1",176,0)
 I LOINC'="" D
"RTN","PSULRHL1",177,0)
 . ;
"RTN","PSULRHL1",178,0)
 . ; Append the LOINC data using the pharmacy delimiters
"RTN","PSULRHL1",179,0)
 . S LABS=LABS_PSUHL("CS")_LOINC_PSUHL("CS")_LNAME_PSUHL("CS")_"99LN"
"RTN","PSULRHL1",180,0)
 ;
"RTN","PSULRHL1",181,0)
 ; Put the data in the string
"RTN","PSULRHL1",182,0)
 ;
"RTN","PSULRHL1",183,0)
 S SEG="OBX"
"RTN","PSULRHL1",184,0)
 S $P(SEG,PSUHL("FS"),2)=P2
"RTN","PSULRHL1",185,0)
 S $P(SEG,PSUHL("FS"),3)=P3
"RTN","PSULRHL1",186,0)
 S $P(SEG,PSUHL("FS"),4)=LABS
"RTN","PSULRHL1",187,0)
 S $P(SEG,PSUHL("FS"),6)=RESULTS
"RTN","PSULRHL1",188,0)
 S $P(SEG,PSUHL("FS"),7)=UNITS
"RTN","PSULRHL1",189,0)
 S $P(SEG,PSUHL("FS"),8)=RANGE
"RTN","PSULRHL1",190,0)
 S $P(SEG,PSUHL("FS"),12)=P12
"RTN","PSULRHL1",191,0)
 ;
"RTN","PSULRHL1",192,0)
 ; Put the string into the PBM HL7 global
"RTN","PSULRHL1",193,0)
 ;
"RTN","PSULRHL1",194,0)
 D SETSEG(SEG)
"RTN","PSULRHL1",195,0)
 ;
"RTN","PSULRHL1",196,0)
 Q
"RTN","PSULRHL1",197,0)
 ;
"RTN","PSULRHL1",198,0)
STRING(HLSTR,CNT) ;  Loops through sub nodes to create a full data string
"RTN","PSULRHL1",199,0)
 N J
"RTN","PSULRHL1",200,0)
 S J=""
"RTN","PSULRHL1",201,0)
 F  S J=$O(@OREMSG@(CNT,J))  Q:J=""  S HLSTR=HLSTR_@OREMSG@(CNT,J)
"RTN","PSULRHL1",202,0)
 Q HLSTR
"RTN","PSULRHL1",203,0)
 ;
"RTN","PSULRHL1",204,0)
PARAMS ; Get the delimiters used in the lab data
"RTN","PSULRHL1",205,0)
 ;
"RTN","PSULRHL1",206,0)
 N CNT,ID,QUIT,REC,RES
"RTN","PSULRHL1",207,0)
 K ARR
"RTN","PSULRHL1",208,0)
 S (QUIT,CNT)=0,RES=""
"RTN","PSULRHL1",209,0)
 F  S CNT=$O(@OREMSG@(CNT)) Q:'CNT!(QUIT=2)  D
"RTN","PSULRHL1",210,0)
 . S REC=@OREMSG@(CNT)
"RTN","PSULRHL1",211,0)
 . I $E(REC,1,3)="MSH" D  Q
"RTN","PSULRHL1",212,0)
 . . S PSUHLFS=$E(REC,4,4)
"RTN","PSULRHL1",213,0)
 . . S ARR("PSUHLECH")=$P(REC,PSUHLFS,2),QUIT=QUIT+1
"RTN","PSULRHL1",214,0)
 . I $P(REC,PSUHLFS,1)="PID" D  Q
"RTN","PSULRHL1",215,0)
 . . S ARR("DFN")=$P(REC,PSUHLFS,4)
"RTN","PSULRHL1",216,0)
 . . S QUIT=QUIT+1
"RTN","PSULRHL1",217,0)
 Q
"RTN","PSULRHL1",218,0)
 ;
"RTN","PSULRHL1",219,0)
GENERATE ; Generate HL7 message
"RTN","PSULRHL1",220,0)
 ;
"RTN","PSULRHL1",221,0)
 ; D GENERATE^HLMA("PSU-SITE-DRIVER","GM",1,.RESULT,"",.OPTNS)
"RTN","PSULRHL1",222,0)
 S OPTNS("QUEUE")="PBM LAB"
"RTN","PSULRHL1",223,0)
 S RESULT=$$EN^HLOCNRT("PSU-SITE-DRIVER","GM",.OPTNS)
"RTN","PSULRHL1",224,0)
 I +RESULT'=RESULT D
"RTN","PSULRHL1",225,0)
 . S ^XTMP("PBM/HLO",DT,$J)=RESULT
"RTN","PSULRHL1",226,0)
 K ^TMP("HLS",$J)
"RTN","PSULRHL1",227,0)
 Q
"RTN","PSULRHL1",228,0)
 ;
"RTN","PSULRHL1",229,0)
 ;
"RTN","PSULRHL1",230,0)
SETSEG(SEG) ;
"RTN","PSULRHL1",231,0)
 ;
"RTN","PSULRHL1",232,0)
 ;***** STORES THE SEGMENT INTO THE ^TMP("HLS",$J) BUFFER
"RTN","PSULRHL1",233,0)
 ;
"RTN","PSULRHL1",234,0)
 ; SEG           HL7 segment
"RTN","PSULRHL1",235,0)
 ;
"RTN","PSULRHL1",236,0)
 ; The SETSEG procedure stores the HL7 segment into the
"RTN","PSULRHL1",237,0)
 ; standard HL7 buffer ^TMP("HLS",$J). The <TAB>, <CR> and <LF>
"RTN","PSULRHL1",238,0)
 ; characters are replaced with spaces. Long segments are split among 
"RTN","PSULRHL1",239,0)
 ; sub-nodes of the main segment node.
"RTN","PSULRHL1",240,0)
 ;
"RTN","PSULRHL1",241,0)
 ; The PSUEXT array must be initialized before
"RTN","PSULRHL1",242,0)
 ; calling this function.
"RTN","PSULRHL1",243,0)
 ;
"RTN","PSULRHL1",244,0)
 N I1,I2,MAXLEN,NODE,PTR,PTR1,SID,SL
"RTN","PSULRHL1",245,0)
 S NODE=PSUEXT("PSUBUF"),PTR=$G(PSUEXT("PSUPTR"))+1
"RTN","PSULRHL1",246,0)
 S SL=$L(SEG),MAXLEN=245  K @NODE@(PTR)
"RTN","PSULRHL1",247,0)
 ;--- Store the segment
"RTN","PSULRHL1",248,0)
 S @NODE@(PTR)=$TR($E(SEG,1,MAXLEN),$C(9,10,13),"   ")
"RTN","PSULRHL1",249,0)
 ;
"RTN","PSULRHL1",250,0)
 ;--- Split the segment into sub-nodes if necessary
"RTN","PSULRHL1",251,0)
 D:SL>MAXLEN
"RTN","PSULRHL1",252,0)
 . S I2=MAXLEN
"RTN","PSULRHL1",253,0)
 . F PTR1=1:1  S I1=I2+1,I2=I1+MAXLEN-1  Q:I1>SL  D
"RTN","PSULRHL1",254,0)
 . . S @NODE@(PTR,PTR1)=$TR($E(SEG,I1,I2),$C(9,10,13),"   ")
"RTN","PSULRHL1",255,0)
 ;--- Save the pointer
"RTN","PSULRHL1",256,0)
 S PSUEXT("PSUPTR")=PTR
"RTN","PSULRHL1",257,0)
 Q
"RTN","PSULRHL2")
0^2^B32829434
"RTN","PSULRHL2",1,0)
PSULRHL2 ;HCIOFO/BH - File real time HL7 messages ; 24 Aug 2005  5:23 PM
"RTN","PSULRHL2",2,0)
 ;;4.0;PHARMACY BENEFITS MANAGEMENT;**3**;MARCH, 2005
"RTN","PSULRHL2",3,0)
 ;
"RTN","PSULRHL2",4,0)
FILE Q  ;  quit for HLO - ALA
"RTN","PSULRHL2",5,0)
 ;
"RTN","PSULRHL2",6,0)
 ; * THIS CODE IS NEVER TO BE INVOKED AT A SITE!!! ***
"RTN","PSULRHL2",7,0)
 ; * IT SHOULD ONLY BE INSTALLED ON THE CMOP-NAT SERVER ***
"RTN","PSULRHL2",8,0)
 ;
"RTN","PSULRHL2",9,0)
 Q
"RTN","PSULRHL2",10,0)
 ;
"RTN","PSULRHL2",11,0)
 ;***** parses then files the incoming HL7 message into the message
"RTN","PSULRHL2",12,0)
 ;      global
"RTN","PSULRHL2",13,0)
 ;
"RTN","PSULRHL2",14,0)
 ;***** The following are present upon entry to this label
"RTN","PSULRHL2",15,0)
 ;
"RTN","PSULRHL2",16,0)
 ; HLNEXT   M Code you can use to execute a $O through the segments of 
"RTN","PSULRHL2",17,0)
 ;          a message
"RTN","PSULRHL2",18,0)
 ; 
"RTN","PSULRHL2",19,0)
 ; HLNODE   The current segment in the message (initally set to null)
"RTN","PSULRHL2",20,0)
 ;
"RTN","PSULRHL2",21,0)
 ; HLQUIT   If not greater than zero, indicates there are no more 
"RTN","PSULRHL2",22,0)
 ;          segments to $O through
"RTN","PSULRHL2",23,0)
 ;
"RTN","PSULRHL2",24,0)
 ;*****
"RTN","PSULRHL2",25,0)
 ;
"RTN","PSULRHL2",26,0)
 N FAC,HLCS,HLCSS,HLECH,HLFILE,HLFS,I,I2,ID,IEN,J2
"RTN","PSULRHL2",27,0)
 K HLFILE,X2
"RTN","PSULRHL2",28,0)
 ;
"RTN","PSULRHL2",29,0)
 F I2=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","PSULRHL2",30,0)
 . S HLFILE(I2)=HLNODE,J2=0
"RTN","PSULRHL2",31,0)
 . F  S J2=$O(HLNODE(J2))  Q:'J2  S HLFILE(I2,J2)=HLNODE(J2)
"RTN","PSULRHL2",32,0)
 ;
"RTN","PSULRHL2",33,0)
 S HLFILE="HLFILE"
"RTN","PSULRHL2",34,0)
 ;
"RTN","PSULRHL2",35,0)
 I $D(@(HLFILE))<10 Q
"RTN","PSULRHL2",36,0)
 ;
"RTN","PSULRHL2",37,0)
 ;
"RTN","PSULRHL2",38,0)
 I '$$PARAMS() Q
"RTN","PSULRHL2",39,0)
 ;
"RTN","PSULRHL2",40,0)
 S IEN=$$DEMO() I 'IEN Q
"RTN","PSULRHL2",41,0)
 ;
"RTN","PSULRHL2",42,0)
 D WRITE(IEN)
"RTN","PSULRHL2",43,0)
 ;
"RTN","PSULRHL2",44,0)
 K X2,HLFILE
"RTN","PSULRHL2",45,0)
 Q
"RTN","PSULRHL2",46,0)
 ;
"RTN","PSULRHL2",47,0)
 ;
"RTN","PSULRHL2",48,0)
WRITE(IEN) ;--- Find the OBR/OBX segments
"RTN","PSULRHL2",49,0)
 ;
"RTN","PSULRHL2",50,0)
 N I,IEN1,IEN2,J,J1,PREV,QUIT,STR,STR1
"RTN","PSULRHL2",51,0)
 S I=0
"RTN","PSULRHL2",52,0)
 F  S I=$O(@HLFILE@(I)) Q:I=""  D
"RTN","PSULRHL2",53,0)
 . S STR=@HLFILE@(I)
"RTN","PSULRHL2",54,0)
 . S J=""
"RTN","PSULRHL2",55,0)
 . F  S J=$O(@HLFILE@(I,J))  Q:J=""  S STR=STR_@HLFILE@(I,J)
"RTN","PSULRHL2",56,0)
 . I $E(STR,1,3)="OBR" D
"RTN","PSULRHL2",57,0)
 . . S IEN1=$$OBR(STR,IEN)
"RTN","PSULRHL2",58,0)
 . . I 'IEN1 Q
"RTN","PSULRHL2",59,0)
 . . S QUIT=0
"RTN","PSULRHL2",60,0)
 . . F  Q:QUIT  S PREV=I,I=$O(@HLFILE@(I)) Q:I=""  D
"RTN","PSULRHL2",61,0)
 . . . S STR1=@HLFILE@(I)
"RTN","PSULRHL2",62,0)
 . . . S J1=""
"RTN","PSULRHL2",63,0)
 . . . F  S J1=$O(@HLFILE@(I,J1))  Q:J1=""  S STR1=STR1_@HLFILE@(I,J1)
"RTN","PSULRHL2",64,0)
 . . . I $E(STR1,1,3)'="OBX" S QUIT=1 Q 
"RTN","PSULRHL2",65,0)
 . . . D OBX(STR1,IEN,IEN1)
"RTN","PSULRHL2",66,0)
 . . S I=PREV
"RTN","PSULRHL2",67,0)
 Q
"RTN","PSULRHL2",68,0)
 ;
"RTN","PSULRHL2",69,0)
 ;
"RTN","PSULRHL2",70,0)
ERROR(CODE,FAC,MESSAGE) ; Files any errors found within the processing
"RTN","PSULRHL2",71,0)
 ;
"RTN","PSULRHL2",72,0)
 ;  Input:        
"RTN","PSULRHL2",73,0)
 ;
"RTN","PSULRHL2",74,0)
 ;  CODE     Error Code
"RTN","PSULRHL2",75,0)
 ;  FAC      Facility number
"RTN","PSULRHL2",76,0)
 ;  MESSAGE  Optional parameter to help illustrate the error
"RTN","PSULRHL2",77,0)
 ;
"RTN","PSULRHL2",78,0)
 ;
"RTN","PSULRHL2",79,0)
 N ARR,FDA,STR
"RTN","PSULRHL2",80,0)
 I CODE=1 S STR=DT_": No patient DFN in the HL7 message ID: "_MESSAGE_" - Facility: "_FAC
"RTN","PSULRHL2",81,0)
 ;
"RTN","PSULRHL2",82,0)
 I CODE=2 S STR=DT_": Fileman Update did not work for message ID: "_MESSAGE_" -  Facility: "_FAC
"RTN","PSULRHL2",83,0)
 ;
"RTN","PSULRHL2",84,0)
 I CODE=3 S STR=DT_": Could not update the OBR segment in message ID "_MESSAGE
"RTN","PSULRHL2",85,0)
 ;
"RTN","PSULRHL2",86,0)
 I CODE=4 S STR=DT_": Could not update the OBX segment in message ID "_MESSAGE
"RTN","PSULRHL2",87,0)
 ;
"RTN","PSULRHL2",88,0)
 S FDA(99999,"+1,",.01)=FAC
"RTN","PSULRHL2",89,0)
 S FDA(99999,"+1,",2)=STR
"RTN","PSULRHL2",90,0)
 D UPDATE^DIE("","FDA",)
"RTN","PSULRHL2",91,0)
 Q
"RTN","PSULRHL2",92,0)
 ;
"RTN","PSULRHL2",93,0)
 ;
"RTN","PSULRHL2",94,0)
OBX(STR1,IEN,IEN1) ; Extracts required OBX fields and files into 
"RTN","PSULRHL2",95,0)
 ;                 the global
"RTN","PSULRHL2",96,0)
 ;
"RTN","PSULRHL2",97,0)
 N FDA2,IENS,INDEX,LABS,LOCAL,LOINCC,LOINCNME,MSG2,NLTCODE,NLTNAME,OUT2,RANGE,RESULT,UNITS,VALUE
"RTN","PSULRHL2",98,0)
 ;
"RTN","PSULRHL2",99,0)
 S LABS=$P(STR1,HLFS,4)
"RTN","PSULRHL2",100,0)
 F INDEX=3,6,9 D
"RTN","PSULRHL2",101,0)
 . S VALUE=$P(LABS,HLCS,INDEX)
"RTN","PSULRHL2",102,0)
 . I VALUE="99LRT" D
"RTN","PSULRHL2",103,0)
 . . S LOCAL=$P(LABS,HLCS,INDEX-1)
"RTN","PSULRHL2",104,0)
 . I VALUE="99NLT" D
"RTN","PSULRHL2",105,0)
 . . S NLTCODE=$P(LABS,HLCS,INDEX-2)
"RTN","PSULRHL2",106,0)
 . . S NLTNAME=$P(LABS,HLCS,INDEX-1)
"RTN","PSULRHL2",107,0)
 . I VALUE="99LN" D
"RTN","PSULRHL2",108,0)
 . . S LOINCC=$P(LABS,HLCS,INDEX-2)
"RTN","PSULRHL2",109,0)
 . . S LOINCNME=$P(LABS,HLCS,INDEX-1)
"RTN","PSULRHL2",110,0)
 ;
"RTN","PSULRHL2",111,0)
 S RESULT=$P(STR1,HLFS,6)
"RTN","PSULRHL2",112,0)
 I $G(RESULTS)="" Q
"RTN","PSULRHL2",113,0)
 S UNITS=$P(STR1,HLFS,7)
"RTN","PSULRHL2",114,0)
 S RANGE=$P(STR1,HLFS,8)
"RTN","PSULRHL2",115,0)
 ;
"RTN","PSULRHL2",116,0)
 S IENS="+1,"_IEN1_","_IEN_","
"RTN","PSULRHL2",117,0)
 S FDA2(99999.11,IENS,.01)=RESULT
"RTN","PSULRHL2",118,0)
 S FDA2(99999.11,IENS,.02)=$G(NLTCODE)
"RTN","PSULRHL2",119,0)
 S FDA2(99999.11,IENS,.03)=$G(NLTNAME)
"RTN","PSULRHL2",120,0)
 S FDA2(99999.11,IENS,.04)=$G(LOINCC)
"RTN","PSULRHL2",121,0)
 S FDA2(99999.11,IENS,.05)=$G(LOINCNME)
"RTN","PSULRHL2",122,0)
 S FDA2(99999.11,IENS,.06)=$G(LOCAL)
"RTN","PSULRHL2",123,0)
 S FDA2(99999.11,IENS,2.01)=UNITS
"RTN","PSULRHL2",124,0)
 S FDA2(99999.11,IENS,2.02)=RANGE
"RTN","PSULRHL2",125,0)
 D UPDATE^DIE("","FDA2","OUT2","MSG2")
"RTN","PSULRHL2",126,0)
 ;
"RTN","PSULRHL2",127,0)
 ;I $D(MSG2) S ^TMP("PSUTEST",$J)=MSG2 D ERROR(4,FAC,ID_" IENs: "_IENS)
"RTN","PSULRHL2",128,0)
 I $D(MSG2) D ERROR(4,FAC,ID_" IENs: "_IENS)
"RTN","PSULRHL2",129,0)
 ;
"RTN","PSULRHL2",130,0)
 Q
"RTN","PSULRHL2",131,0)
 ;
"RTN","PSULRHL2",132,0)
 ;
"RTN","PSULRHL2",133,0)
 ;
"RTN","PSULRHL2",134,0)
OBR(STR,IEN) ; Extracts required OBR fields and files into the global
"RTN","PSULRHL2",135,0)
 N DD,FDA1,MM,MSG1,OUT1,SPEC,SPECDATE,YY
"RTN","PSULRHL2",136,0)
 S SPECDATE=+$P(STR,HLFS,8)
"RTN","PSULRHL2",137,0)
 S MM=$E(SPECDATE,5,6),DD=$E(SPECDATE,7,8),YY=$E(SPECDATE,3,4)
"RTN","PSULRHL2",138,0)
 S YY=$S($E(YY,1,1)=0:"3",1:"2")_YY,SPECDATE=YY_MM_DD
"RTN","PSULRHL2",139,0)
 S SPEC=$P(STR,HLFS,16)
"RTN","PSULRHL2",140,0)
 ;
"RTN","PSULRHL2",141,0)
 S FDA1(99999.01,"+1,"_IEN_",",.01)=SPEC
"RTN","PSULRHL2",142,0)
 S FDA1(99999.01,"+1,"_IEN_",",.02)=SPECDATE
"RTN","PSULRHL2",143,0)
 D UPDATE^DIE("","FDA1","OUT1","MSG1")
"RTN","PSULRHL2",144,0)
 ;
"RTN","PSULRHL2",145,0)
 I $D(MSG1) D ERROR(3,FAC,ID_" IENs: "_IEN) Q 0
"RTN","PSULRHL2",146,0)
 ;
"RTN","PSULRHL2",147,0)
 Q OUT1(1)
"RTN","PSULRHL2",148,0)
 ;
"RTN","PSULRHL2",149,0)
 ;
"RTN","PSULRHL2",150,0)
PARAMS() ; Get HL7 Parameters and facility # from the MSH segment
"RTN","PSULRHL2",151,0)
 N CNT,J2,QUIT,REC
"RTN","PSULRHL2",152,0)
 S (QUIT,CNT)=0
"RTN","PSULRHL2",153,0)
 F  S CNT=$O(@HLFILE@(CNT)) Q:'CNT!(QUIT)  D
"RTN","PSULRHL2",154,0)
 . S REC=@HLFILE@(CNT)
"RTN","PSULRHL2",155,0)
 . S J2=""
"RTN","PSULRHL2",156,0)
 . F  S J2=$O(@HLFILE@(CNT,J2))  Q:J2=""  S REC=REC_@HLFILE@(CNT,J2)
"RTN","PSULRHL2",157,0)
 . I $E(REC,1,3)="MSH" D  Q
"RTN","PSULRHL2",158,0)
 . . S HLFS=$E(REC,4,4)
"RTN","PSULRHL2",159,0)
 . . S HLECH=$P(REC,HLFS,2)
"RTN","PSULRHL2",160,0)
 . . S HLCS=$E(HLECH,1,1)
"RTN","PSULRHL2",161,0)
 . . S HLCSS=$E(HLECH,2,2)
"RTN","PSULRHL2",162,0)
 . . S FAC=$P(REC,HLFS,4),FAC=$P(FAC,HLCS,1)
"RTN","PSULRHL2",163,0)
 . . S ID=$P(REC,HLFS,10)
"RTN","PSULRHL2",164,0)
 . . S QUIT=1
"RTN","PSULRHL2",165,0)
 I $G(FAC)="" Q 0
"RTN","PSULRHL2",166,0)
 Q 1
"RTN","PSULRHL2",167,0)
 ;
"RTN","PSULRHL2",168,0)
DEMO() ; Get the demographic data and file a zero node entry in the 
"RTN","PSULRHL2",169,0)
 ; message global
"RTN","PSULRHL2",170,0)
 ;
"RTN","PSULRHL2",171,0)
 N CNT,DFN,END,FDA,I,ICN,IDSTR,J3,MSG,OUT,QUIT,REC,SUB,SSN
"RTN","PSULRHL2",172,0)
 S (ICN,SSN,DFN)=""
"RTN","PSULRHL2",173,0)
 S (QUIT,CNT)=0
"RTN","PSULRHL2",174,0)
 F  S CNT=$O(@HLFILE@(CNT)) Q:'CNT!(QUIT)  D
"RTN","PSULRHL2",175,0)
 . S REC=@HLFILE@(CNT)
"RTN","PSULRHL2",176,0)
 . S J3=""
"RTN","PSULRHL2",177,0)
 . F  S J3=$O(@HLFILE@(CNT,J3))  Q:J3=""  S REC=REC_@HLFILE@(CNT,J3)
"RTN","PSULRHL2",178,0)
 . I $E(REC,1,3)="PID" D  Q
"RTN","PSULRHL2",179,0)
 . . S IDSTR=$P(REC,HLFS,4),END=0
"RTN","PSULRHL2",180,0)
 . . ;
"RTN","PSULRHL2",181,0)
 . . F I=1:1  Q:END  D
"RTN","PSULRHL2",182,0)
 . . . S SUB=$P(IDSTR,HLCSS,I)
"RTN","PSULRHL2",183,0)
 . . . I SUB="" S END=1 Q
"RTN","PSULRHL2",184,0)
 . . . I $P(SUB,HLCS,5)="NI" D
"RTN","PSULRHL2",185,0)
 . . . . I $P(SUB,HLCS,8)'="" Q
"RTN","PSULRHL2",186,0)
 . . . . S ICN=$P(SUB,HLCS,1),ICN=$P(ICN,"V",1)
"RTN","PSULRHL2",187,0)
 . . . . ; 
"RTN","PSULRHL2",188,0)
 . . . I $P(SUB,HLCS,5)="SS" D
"RTN","PSULRHL2",189,0)
 . . . . S SSN=$P(SUB,HLCS,1)
"RTN","PSULRHL2",190,0)
 . . . . ;
"RTN","PSULRHL2",191,0)
 . . . I $P(SUB,HLCS,5)="PI" D
"RTN","PSULRHL2",192,0)
 . . . . S DFN=$P(SUB,HLCS,1)
"RTN","PSULRHL2",193,0)
 . . S QUIT=1
"RTN","PSULRHL2",194,0)
 ;
"RTN","PSULRHL2",195,0)
 I DFN="" D ERROR(1,FAC,ID) Q 0
"RTN","PSULRHL2",196,0)
 ;
"RTN","PSULRHL2",197,0)
 K FDA,OUT,MSG
"RTN","PSULRHL2",198,0)
 ;
"RTN","PSULRHL2",199,0)
 S FDA(99999,"+1,",.02)=DFN
"RTN","PSULRHL2",200,0)
 S FDA(99999,"+1,",.04)=ICN
"RTN","PSULRHL2",201,0)
 S FDA(99999,"+1,",.05)=SSN
"RTN","PSULRHL2",202,0)
 S FDA(99999,"+1,",.01)=FAC
"RTN","PSULRHL2",203,0)
 D UPDATE^DIE("","FDA","OUT","MSG")
"RTN","PSULRHL2",204,0)
 ;
"RTN","PSULRHL2",205,0)
 I $D(MSG) D ERROR(2,FAC,ID) Q 0
"RTN","PSULRHL2",206,0)
 ;
"RTN","PSULRHL2",207,0)
 Q OUT(1)
"RTN","PSULRHL2",208,0)
 ;
"RTN","PSULRHL2",209,0)
 ;
"RTN","PSULRHL2",210,0)
 Q
"RTN","PSULRHL2",211,0)
 ;
"RTN","PSULRHL2",212,0)
 ;
"RTN","PSULRHL3")
0^3^B37733711
"RTN","PSULRHL3",1,0)
PSULRHL3 ;HCIOFO/BH - Daily file procesing ; 4/28/04 3:10pm
"RTN","PSULRHL3",2,0)
 ;;4.0;PHARMACY BENEFITS MANAGEMENT;**3**;MARCH, 2005
"RTN","PSULRHL3",3,0)
 ;
"RTN","PSULRHL3",4,0)
 ; ** THIS ROUTINE SHOULD NEVER BE INSTALLED AT A SITE ***
"RTN","PSULRHL3",5,0)
 ; ** THIS ROUTINE IS ONLY TO BE RUN ON THE CMOP-NAT SERVER ***
"RTN","PSULRHL3",6,0)
 ;
"RTN","PSULRHL3",7,0)
 Q
"RTN","PSULRHL3",8,0)
 ;
"RTN","PSULRHL3",9,0)
PROCESS ; This process loops through the file containing parsed HL7 data.
"RTN","PSULRHL3",10,0)
 ; This process runs each day and collects up to the previous days data.
"RTN","PSULRHL3",11,0)
 ; The data is ordered by facility.  All the data for the facility for
"RTN","PSULRHL3",12,0)
 ; for up to the previous day gets filed into one flat file for PBM to
"RTN","PSULRHL3",13,0)
 ; process.   A pre-init sub routine CULL loops through all x-refs that 
"RTN","PSULRHL3",14,0)
 ; indicate processed data for facility and date and culls the data and
"RTN","PSULRHL3",15,0)
 ; removes the FD x-ref.
"RTN","PSULRHL3",16,0)
 ; 
"RTN","PSULRHL3",17,0)
 ;
"RTN","PSULRHL3",18,0)
 D CULL
"RTN","PSULRHL3",19,0)
 ;
"RTN","PSULRHL3",20,0)
 ;
"RTN","PSULRHL3",21,0)
 N DFN,EDATE,FACILITY,FILE,IEN,OPEN,OUTDIR,PSUDTE,QUIT,RDATE,RC,SDATE,TEMP,X,X1,X2
"RTN","PSULRHL3",22,0)
 ;
"RTN","PSULRHL3",23,0)
 ; End date for search
"RTN","PSULRHL3",24,0)
 D NOW^%DTC S TEMP=%,EDATE=$P(TEMP,".",1)
"RTN","PSULRHL3",25,0)
 ; Run date i.e. going to process data up to yesterday 
"RTN","PSULRHL3",26,0)
 S X1=$P(TEMP,".",1),X2="-1" D C^%DTC S RDATE=$P(X,".",1)
"RTN","PSULRHL3",27,0)
 ;
"RTN","PSULRHL3",28,0)
 ;
"RTN","PSULRHL3",29,0)
 S FACILITY="",(QUIT,OPEN)=0
"RTN","PSULRHL3",30,0)
 ;
"RTN","PSULRHL3",31,0)
 F  S FACILITY=$O(^DIZ(99999,"FDP",FACILITY)) Q:'FACILITY!(QUIT)  D
"RTN","PSULRHL3",32,0)
 . ;
"RTN","PSULRHL3",33,0)
 . I $D(^DIZ(99999,"FD",FACILITY,RDATE)) D  Q
"RTN","PSULRHL3",34,0)
 . . D ERROR(3,FACILITY,RDATE) Q
"RTN","PSULRHL3",35,0)
 . ; New facility so close any open files.
"RTN","PSULRHL3",36,0)
 . I OPEN D CLOSE S OPEN=0
"RTN","PSULRHL3",37,0)
 . S DATE="0"
"RTN","PSULRHL3",38,0)
 . F  S DATE=$O(^DIZ(99999,"FDP",FACILITY,DATE)) Q:'DATE!(DATE'<EDATE)!(QUIT)  D
"RTN","PSULRHL3",39,0)
 . . ;
"RTN","PSULRHL3",40,0)
 . . S DFN=""
"RTN","PSULRHL3",41,0)
 . . F  S DFN=$O(^DIZ(99999,"FDP",FACILITY,DATE,DFN)) Q:'DFN!(QUIT)  D
"RTN","PSULRHL3",42,0)
 . . . S IEN=""
"RTN","PSULRHL3",43,0)
 . . . F  S IEN=$O(^DIZ(99999,"FDP",FACILITY,DATE,DFN,IEN)) Q:'IEN!(QUIT)  D
"RTN","PSULRHL3",44,0)
 . . . . I 'OPEN D  Q:'RC
"RTN","PSULRHL3",45,0)
 . . . . . S RC=$$OPEN()
"RTN","PSULRHL3",46,0)
 . . . . . I 'RC S QUIT=1 Q
"RTN","PSULRHL3",47,0)
 . . . . . S OPEN=1
"RTN","PSULRHL3",48,0)
 . . . . D FILE
"RTN","PSULRHL3",49,0)
 I OPEN D CLOSE
"RTN","PSULRHL3",50,0)
 Q
"RTN","PSULRHL3",51,0)
 ;
"RTN","PSULRHL3",52,0)
 ;
"RTN","PSULRHL3",53,0)
OPEN() ; Open the output directory
"RTN","PSULRHL3",54,0)
 N DST,POP,SRC
"RTN","PSULRHL3",55,0)
 S FILE=FACILITY_DT_".DAT"
"RTN","PSULRHL3",56,0)
 ;S OUTDIR="W:\PBM\National-PBM"
"RTN","PSULRHL3",57,0)
 S OUTDIR="USER$:[PBM.LAB]"
"RTN","PSULRHL3",58,0)
 ;
"RTN","PSULRHL3",59,0)
 K DST,SRC
"RTN","PSULRHL3",60,0)
 S SRC(FILE)=""
"RTN","PSULRHL3",61,0)
 I $$LIST^%ZISH(OUTDIR,"SRC","DST") D ERROR(2,FACILITY,FILE) Q 0
"RTN","PSULRHL3",62,0)
 ;
"RTN","PSULRHL3",63,0)
 D OPEN^%ZISH("HL7FILE",OUTDIR,FILE,"W")
"RTN","PSULRHL3",64,0)
 I $G(POP) D ERROR(1,FACILITY,OUTDIR_FILE) Q 0
"RTN","PSULRHL3",65,0)
 ;
"RTN","PSULRHL3",66,0)
 Q 1
"RTN","PSULRHL3",67,0)
 ;
"RTN","PSULRHL3",68,0)
CLOSE ; Set Cross ref indicating that facilities data for the day got 
"RTN","PSULRHL3",69,0)
 ; processed, and close the output file.
"RTN","PSULRHL3",70,0)
 N FDA
"RTN","PSULRHL3",71,0)
 K FDA
"RTN","PSULRHL3",72,0)
 S FDA(99999,"+1,",.01)=$E(FILE,1,3)
"RTN","PSULRHL3",73,0)
 S FDA(99999,"+1,",.03)=RDATE
"RTN","PSULRHL3",74,0)
 D UPDATE^DIE("","FDA",)
"RTN","PSULRHL3",75,0)
 D CLOSE^%ZISH("HL7FILE")
"RTN","PSULRHL3",76,0)
 Q
"RTN","PSULRHL3",77,0)
 ;
"RTN","PSULRHL3",78,0)
FILE ; File the lab data to the output file in the following single string format.
"RTN","PSULRHL3",79,0)
 ;
"RTN","PSULRHL3",80,0)
 ;  PAT|Facility|ICN|SSN|DFN|Date/Time Specimen Collected|Site/Specimen|Local Lab Number^Local Lab Name|
"RTN","PSULRHL3",81,0)
 ;  NLT Code^NLT Name|LOINC Code^LOINC Name|Result|Units|Low Range|High Range|
"RTN","PSULRHL3",82,0)
 ;
"RTN","PSULRHL3",83,0)
 ;
"RTN","PSULRHL3",84,0)
 N CNT,CR,DFN,FAC,HRANGE,ICN,LABA,LABB,LABC,LNCODE,LNNAME,LOCALLAB,LRANGE,NLTCODE,NLTNAME,RANGE,REC,RESIEN,RESREC,RESREC1,RESULT,SPEC,SPECDATE,SPECREC,SPECIEN,SSN,STR,STR1,TEST,UNITS
"RTN","PSULRHL3",85,0)
 ;
"RTN","PSULRHL3",86,0)
 U IO
"RTN","PSULRHL3",87,0)
 S REC=^DIZ(99999,IEN,0)
"RTN","PSULRHL3",88,0)
 S SSN=$P(REC,U,5),ICN=$P(REC,U,4),FAC=$P(REC,U,1),DFN=$P(REC,U,2)
"RTN","PSULRHL3",89,0)
 ;
"RTN","PSULRHL3",90,0)
 S SPECIEN=0
"RTN","PSULRHL3",91,0)
 F  S SPECIEN=$O(^DIZ(99999,IEN,1,SPECIEN)) Q:'SPECIEN  D
"RTN","PSULRHL3",92,0)
 . ; Do not file if Specimen has no results
"RTN","PSULRHL3",93,0)
 . S TEST=0
"RTN","PSULRHL3",94,0)
 . S TEST=$O(^DIZ(99999,IEN,1,SPECIEN,1,TEST)) Q:'TEST
"RTN","PSULRHL3",95,0)
 . S SPECREC=^DIZ(99999,IEN,1,SPECIEN,0)
"RTN","PSULRHL3",96,0)
 . S SPEC=$P(SPECREC,U,1),SPECDATE=$P(SPECREC,U,2)
"RTN","PSULRHL3",97,0)
 . S STR="PAT|"_FAC_"|"_ICN_"|"_SSN_"|"_DFN_"|"_SPECDATE_"|"_SPEC
"RTN","PSULRHL3",98,0)
 . ;W STR
"RTN","PSULRHL3",99,0)
 . S RESIEN=0
"RTN","PSULRHL3",100,0)
 . ;S CNT=0
"RTN","PSULRHL3",101,0)
 . F  S RESIEN=$O(^DIZ(99999,IEN,1,SPECIEN,1,RESIEN)) Q:'RESIEN  D
"RTN","PSULRHL3",102,0)
 . . S RESREC=^DIZ(99999,IEN,1,SPECIEN,1,RESIEN,0)
"RTN","PSULRHL3",103,0)
 . . S RESREC1=^DIZ(99999,IEN,1,SPECIEN,1,RESIEN,2)
"RTN","PSULRHL3",104,0)
 . . ;S CNT=CNT+1
"RTN","PSULRHL3",105,0)
 . . S LOCALLAB=$P(RESREC,U,6),NLTCODE=$P(RESREC,U,2)
"RTN","PSULRHL3",106,0)
 . . S NLTNAME=$P(RESREC,U,3),LNNAME=$P(RESREC,U,5)
"RTN","PSULRHL3",107,0)
 . . S LNCODE=$P(RESREC,U,4),RESULT=$P(RESREC,U,1)
"RTN","PSULRHL3",108,0)
 . . S UNITS=$P(RESREC1,U,1),RANGE=$P(RESREC1,U,2)
"RTN","PSULRHL3",109,0)
 . . ; Most of the time High and Low range are separated by a "-"
"RTN","PSULRHL3",110,0)
 . . I RANGE["-" D
"RTN","PSULRHL3",111,0)
 . . . S LRANGE=$P(RANGE,"-",1),HRANGE=$P(RANGE,"-",2)
"RTN","PSULRHL3",112,0)
 . . I RANGE'["-" D
"RTN","PSULRHL3",113,0)
 . . . S LRANGE=RANGE,HRANGE=""
"RTN","PSULRHL3",114,0)
 . . S LABA="|^"_LOCALLAB_"|"_NLTCODE_"^"_NLTNAME_"|"_LNCODE_"^"_LNNAME_"|"
"RTN","PSULRHL3",115,0)
 . . ;
"RTN","PSULRHL3",116,0)
 . . S LABB=RESULT_"|"_UNITS_"|"
"RTN","PSULRHL3",117,0)
 . . ;
"RTN","PSULRHL3",118,0)
 . . S LABC=LRANGE_"|"_HRANGE_"|"
"RTN","PSULRHL3",119,0)
 . . W STR_LABA_LABB_LABC,!
"RTN","PSULRHL3",120,0)
 Q
"RTN","PSULRHL3",121,0)
 ;
"RTN","PSULRHL3",122,0)
ERROR(CODE,FAC,MESSAGE) ; Error processing
"RTN","PSULRHL3",123,0)
 N ARR,STR
"RTN","PSULRHL3",124,0)
 I CODE=1 S STR=DT_": Cannot open output file "_MESSAGE
"RTN","PSULRHL3",125,0)
 I CODE=2 S STR=DT_": File name already exists in the output directory "_MESSAGE
"RTN","PSULRHL3",126,0)
 I CODE=3 D
"RTN","PSULRHL3",127,0)
 . S MESSAGE=$E(MESSAGE,4,5)_"/"_$E(MESSAGE,6,7)_"/"_$E(MESSAGE,2,3)
"RTN","PSULRHL3",128,0)
 . S STR=DT_": Trying to process records for Facility #"_FAC_" for the date of "_MESSAGE_" that  have already been processed."
"RTN","PSULRHL3",129,0)
 S FDA(99999,"+1,",.01)=FAC
"RTN","PSULRHL3",130,0)
 S FDA(99999,"+1,",2)=STR
"RTN","PSULRHL3",131,0)
 D UPDATE^DIE("","FDA",)
"RTN","PSULRHL3",132,0)
 Q
"RTN","PSULRHL3",133,0)
 ;
"RTN","PSULRHL3",134,0)
 ;
"RTN","PSULRHL3",135,0)
CULL ;  Cull all entries for a facility that have been processed on or before the date in FD x-ref
"RTN","PSULRHL3",136,0)
 N A,B,DFN,DELLIEN,FAC,IDATE,IEN,PDATE
"RTN","PSULRHL3",137,0)
 S FAC="0"
"RTN","PSULRHL3",138,0)
 F  S FAC=$O(^DIZ(99999,"FD",FAC)) Q:'FAC  D
"RTN","PSULRHL3",139,0)
 . S PDATE=0
"RTN","PSULRHL3",140,0)
 . F  S PDATE=$O(^DIZ(99999,"FD",FAC,PDATE)) Q:'PDATE  D
"RTN","PSULRHL3",141,0)
 . . S IDATE=0
"RTN","PSULRHL3",142,0)
 . . ;  Remove entry with FD x-ref
"RTN","PSULRHL3",143,0)
 . . S DELLIEN=0
"RTN","PSULRHL3",144,0)
 . . S DELLIEN=$O(^DIZ(99999,"FD",FAC,PDATE,DELLIEN))
"RTN","PSULRHL3",145,0)
 . . K B
"RTN","PSULRHL3",146,0)
 . . S B(99999,DELLIEN_",",.01)="@" D FILE^DIE(,"B")
"RTN","PSULRHL3",147,0)
 . . ;
"RTN","PSULRHL3",148,0)
 . . F  S IDATE=$O(^DIZ(99999,"FDP",FAC,IDATE)) Q:'IDATE!($P(IDATE,".",1)>PDATE)  D
"RTN","PSULRHL3",149,0)
 . . . S DFN=0
"RTN","PSULRHL3",150,0)
 . . . F  S DFN=$O(^DIZ(99999,"FDP",FAC,IDATE,DFN)) Q:'DFN  D
"RTN","PSULRHL3",151,0)
 . . . . S IEN=0
"RTN","PSULRHL3",152,0)
 . . . . F  S IEN=$O(^DIZ(99999,"FDP",FAC,IDATE,DFN,IEN)) Q:'IEN  D
"RTN","PSULRHL3",153,0)
 . . . . . K A
"RTN","PSULRHL3",154,0)
 . . . . . S A(99999,IEN_",",.01)="@" D FILE^DIE(,"A")
"RTN","PSULRHL3",155,0)
 Q
"RTN","PSULRHL3",156,0)
 ;
"RTN","PSULRHL3",157,0)
 ;
"RTN","PSULRHL3",158,0)
ERORDSP ; Display errors
"RTN","PSULRHL3",159,0)
 ;
"RTN","PSULRHL3",160,0)
 N DATE,DONE,EDATE,FAC,IEN,PG
"RTN","PSULRHL3",161,0)
 S PG=0,DATE=$E(DT,4,5)_"/"_$E(DT,6,7)_"/"_$E(DT,2,3)
"RTN","PSULRHL3",162,0)
 D HEAD
"RTN","PSULRHL3",163,0)
 I '$D(^DIZ(99999,"FDE")) W "No Error's to report." H 4 Q
"RTN","PSULRHL3",164,0)
 ;
"RTN","PSULRHL3",165,0)
 ;
"RTN","PSULRHL3",166,0)
 S FAC="0"
"RTN","PSULRHL3",167,0)
 F  S FAC=$O(^DIZ(99999,"FDE",FAC)) Q:'FAC  D
"RTN","PSULRHL3",168,0)
 . ;
"RTN","PSULRHL3",169,0)
 . S EDATE=0
"RTN","PSULRHL3",170,0)
 . F  S EDATE=$O(^DIZ(99999,"FDE",FAC,EDATE)) Q:'EDATE  D
"RTN","PSULRHL3",171,0)
 . . S IEN=0
"RTN","PSULRHL3",172,0)
 . . F  S IEN=$O(^DIZ(99999,"FDE",FAC,EDATE,IEN)) Q:'IEN  D
"RTN","PSULRHL3",173,0)
 . . . S MSG=^DIZ(99999,IEN,2)
"RTN","PSULRHL3",174,0)
 . . . I ($Y+4>IOSL) D PRTC Q:$D(DONE)  D HEAD
"RTN","PSULRHL3",175,0)
 . . . W !,"  "_MSG,!
"RTN","PSULRHL3",176,0)
 Q
"RTN","PSULRHL3",177,0)
 ;
"RTN","PSULRHL3",178,0)
HEAD ;
"RTN","PSULRHL3",179,0)
 W:$Y>0 @IOF S PG=PG+1
"RTN","PSULRHL3",180,0)
 W "  "_DATE,?71,"Page ",PG,!!
"RTN","PSULRHL3",181,0)
 W "  Error log for PBM III national database processing.",!
"RTN","PSULRHL3",182,0)
 W "  ---------------------------------------------------",!
"RTN","PSULRHL3",183,0)
 Q
"RTN","PSULRHL3",184,0)
 ;
"RTN","PSULRHL3",185,0)
PRTC ;press return to continue prompt
"RTN","PSULRHL3",186,0)
 Q:$E(IOST,1,2)'="C-"!($D(IO("S")))
"RTN","PSULRHL3",187,0)
 K DIR W ! S DIR(0)="E" D ^DIR K DIR I 'Y S DONE=1
"RTN","PSULRHL3",188,0)
 Q
"RTN","PSULRHL3",189,0)
 ;
"RTN","PSULRHL3",190,0)
 ;
"VER")
8.0^22.0
"^DD",779.2,779.2,0)
FIELD^^2^11
"^DD",779.2,779.2,0,"DDA")
N
"^DD",779.2,779.2,0,"DT")
3050503
"^DD",779.2,779.2,0,"IX","B",779.2,.01)

"^DD",779.2,779.2,0,"NM","HLO APPLICATION REGISTRY")

"^DD",779.2,779.2,0,"VRPK")
HL
"^DD",779.2,779.2,.01,0)
APPLICATION NAME^RF^^0;1^K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",779.2,779.2,.01,1,0)
^.1
"^DD",779.2,779.2,.01,1,1,0)
779.2^B
"^DD",779.2,779.2,.01,1,1,1)
S ^HLD(779.2,"B",$E(X,1,30),DA)=""
"^DD",779.2,779.2,.01,1,1,2)
K ^HLD(779.2,"B",$E(X,1,30),DA)
"^DD",779.2,779.2,.01,3)
Answer must be 3-60 characters in length. It must be unique and should be name-spaced.
"^DD",779.2,779.2,.01,"DT")
3050125
"^DD",779.2,779.2,.02,0)
RESPONSE LINK (OPTIONAL)^FX^^0;2^K:'$$CHKLINK^HLOTLNK(X) X
"^DD",779.2,779.2,.02,3)
If the return link cannot be identified via the Sending Facility (i.e., sent via an IE), what link should the application ack be sent through?
"^DD",779.2,779.2,.02,21,0)
^^5^5^3041116^^
"^DD",779.2,779.2,.02,21,1,0)
This field applies only if: 1) The receiving application is expected to 
"^DD",779.2,779.2,.02,21,2,0)
return application acknowledgments.  2) The initial message is  received 
"^DD",779.2,779.2,.02,21,3,0)
indirectly through the IE, and the  receiving application in turn does 
"^DD",779.2,779.2,.02,21,4,0)
not want to send the application acknowledgment directly back to the 
"^DD",779.2,779.2,.02,21,5,0)
sending facility identified in the message header.  
"^DD",779.2,779.2,.02,"DT")
3041116
"^DD",779.2,779.2,.03,0)
DEFAULT PRIVATE IN-QUEUE^F^^0;3^K:$L(X)>20!($L(X)<3) X
"^DD",779.2,779.2,.03,3)
You may create an optional default private in-queue by entering a unique name up to 20 characters in length. Queues specified for specific message types take precedence.
"^DD",779.2,779.2,.03,"DT")
3050317
"^DD",779.2,779.2,.04,0)
BATCH ACTION TAG^F^^0;4^K:$L(X)>8!($L(X)<1) X
"^DD",779.2,779.2,.04,3)
If the application utilizes batch messages, the action to perform upon receipt of the message should be entered in the BATCH ACTION TAG and BATCH ACTION ROUTINE fields as <tag>^<routine>.
"^DD",779.2,779.2,.04,"DT")
3040814
"^DD",779.2,779.2,.05,0)
BATCH ACTION ROUTINE^F^^0;5^K:$L(X)>8!($L(X)<3) X
"^DD",779.2,779.2,.05,3)
If the application utilizes batch messages, the action to perform upon receipt of the message should be entered in the BATCH ACTION TAG and BATCH ACTION ROUTINE fields as <tag>^<routine>.
"^DD",779.2,779.2,.05,"DT")
3040814
"^DD",779.2,779.2,.06,0)
DEFAULT ACTION TAG^F^^0;6^K:$L(X)>8!($L(X)<1) X
"^DD",779.2,779.2,.06,3)
You can enter the action to perform upon  receipt of a message where no other action applies by entering the DEFAULT ACTION TAG and DEFAULT ACTION ROUTINE fields as <tag>^<routine>. 
"^DD",779.2,779.2,.06,"DT")
3040815
"^DD",779.2,779.2,.07,0)
DEFAULT ACTION ROUTINE^F^^0;7^K:$L(X)>8!($L(X)<3) X
"^DD",779.2,779.2,.07,3)
You can enter the action to perform upon receipt of a message where no other action applies by entering the DEFAULT ACTION TAG and DEFAULT ACTION ROUTINE fields as <tag>^<routine>.
"^DD",779.2,779.2,.07,"DT")
3040814
"^DD",779.2,779.2,.08,0)
BATCH PRIVATE IN-QUEUE^F^^0;8^K:$L(X)>20!($L(X)<3) X
"^DD",779.2,779.2,.08,3)
You may establish a private queue for your batch messages by entering a unique name (name-spaced) up to 20 characters long.
"^DD",779.2,779.2,.08,"DT")
3050317
"^DD",779.2,779.2,.09,0)
APPLICATION SPECIFIC LISTENER^*P870'^HLCS(870,^0;9^S DIC("S")="I $E($P(^HLCS(870,Y,0),""^"",4),2)=""S""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",779.2,779.2,.09,3)
If your application requires its own listener (HIGHLY DISCOURAGED), enter it here.
"^DD",779.2,779.2,.09,12)
The link entered must be a listener.
"^DD",779.2,779.2,.09,12.1)
S DIC("S")="I $E($P(^HLCS(870,Y,0),""^"",4),2)=""S"""
"^DD",779.2,779.2,.09,21,0)
^^6^6^3050503^
"^DD",779.2,779.2,.09,21,1,0)
Applications are highly discouraged from establishing their own listeners.  The
"^DD",779.2,779.2,.09,21,2,0)
use of the multi-listeners provide concurrent processing of many connections
"^DD",779.2,779.2,.09,21,3,0)
over the same port, so a dedicated listener will not provide an application
"^DD",779.2,779.2,.09,21,4,0)
with a performance boost, while it will cause the site additional work to
"^DD",779.2,779.2,.09,21,5,0)
maintain. So before establishing a dedicated listener, the application
"^DD",779.2,779.2,.09,21,6,0)
developer should verify the need.
"^DD",779.2,779.2,.09,"DT")
3050527
"^DD",779.2,779.2,1,0)
MESSAGE TYPE ACTIONS^779.21^^1;0
"^DD",779.2,779.2,2,0)
Package File Link^RP9.4'^DIC(9.4,^2;1^Q
"^DD",779.2,779.2,2,3)
Enter the package responsible for these messages.
"^DD",779.2,779.2,2,21,0)
^^2^2^3050105^
"^DD",779.2,779.2,2,21,1,0)
This field holds a pointer to the Package File for the Package 
"^DD",779.2,779.2,2,21,2,0)
responsible for thes messages.
"^DD",779.2,779.2,2,"DT")
3050105
"^DD",779.2,779.21,0)
MESSAGE TYPE ACTIONS SUB-FIELD^^.05^5
"^DD",779.2,779.21,0,"DT")
3040815
"^DD",779.2,779.21,0,"IX","B",779.21,.01)

"^DD",779.2,779.21,0,"NM","MESSAGE TYPE ACTIONS")

"^DD",779.2,779.21,0,"UP")
779.2
"^DD",779.2,779.21,.01,0)
HL7 MESSAGE TYPE^MF^^0;1^K:$L(X)>3!($L(X)<3) X
"^DD",779.2,779.21,.01,1,0)
^.1
"^DD",779.2,779.21,.01,1,1,0)
779.21^B
"^DD",779.2,779.21,.01,1,1,1)
S ^HLD(779.2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",779.2,779.21,.01,1,1,2)
K ^HLD(779.2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",779.2,779.21,.01,3)
Enter the 3 character HL7 Message Type.
"^DD",779.2,779.21,.01,21,0)
^^3^3^3040814^
"^DD",779.2,779.21,.01,21,1,0)
An application should use this multiple to define the action that the receiving
"^DD",779.2,779.21,.01,21,2,0)
application needs to perform upon receipt of a specific type of HL7 message,
"^DD",779.2,779.21,.01,21,3,0)
identified by the HL7 MESSAGE TYPE and HL7 EVENT fields.
"^DD",779.2,779.21,.01,"DT")
3040815
"^DD",779.2,779.21,.02,0)
HL7 EVENT^RF^^0;2^K:$L(X)>3!($L(X)<3) X
"^DD",779.2,779.21,.02,3)
Enter the 3 character HL7 event type.
"^DD",779.2,779.21,.02,"DT")
3040815
"^DD",779.2,779.21,.03,0)
PRIVATE IN-QUEUE^F^^0;3^K:$L(X)>20!($L(X)<3) X
"^DD",779.2,779.21,.03,3)
You may create a private in-queue for message of this type by entering a unique name up to 20 characters long..
"^DD",779.2,779.21,.03,"DT")
3050317
"^DD",779.2,779.21,.04,0)
ACTION TAG^F^^0;4^K:$L(X)>8!($L(X)<1) X
"^DD",779.2,779.21,.04,3)
You must enter the action to perform upon receipt of this type by entering the ACTION TAG and ACTION ROUTINE fields as <tag>^<routine>. The tag is optional. 
"^DD",779.2,779.21,.04,"DT")
3040815
"^DD",779.2,779.21,.05,0)
ACTION ROUTINE^RF^^0;5^K:$L(X)>8!($L(X)<3) X
"^DD",779.2,779.21,.05,3)
You must enter the action to perform upon receipt of this type by entering the ACTION TAG and ACTION ROUTINE fields as <tag>^<routine>.
"^DD",779.2,779.21,.05,"DT")
3040814
"^DIC",779.2,779.2,0)
HLO APPLICATION REGISTRY^779.2
"^DIC",779.2,779.2,0,"GL")
^HLD(779.2,
"^DIC",779.2,779.2,"%",0)
^1.005^^0
"^DIC",779.2,779.2,"%D",0)
^^12^12^3050317^^^^
"^DIC",779.2,779.2,"%D",1,0)
This file is used to register sending and receiving applications for HL7
"^DIC",779.2,779.2,"%D",2,0)
messaging. For receiving applications, the process of registration consists of
"^DIC",779.2,779.2,"%D",3,0)
registering what messages the application is prepared to receive.
"^DIC",779.2,779.2,"%D",4,0)

"^DIC",779.2,779.2,"%D",5,0)
For both sending and receiving applications, it is necessary to specify
"^DIC",779.2,779.2,"%D",6,0)
what package the application belongs to.  For sending applications, that is
"^DIC",779.2,779.2,"%D",7,0)
the only field that applies, other than the name of the sending application.
"^DIC",779.2,779.2,"%D",8,0)

"^DIC",779.2,779.2,"%D",9,0)
An application can be both a sender and a receiver, its not necessary to specify
"^DIC",779.2,779.2,"%D",10,0)
which.  However, if it is a receiver of messages, the application action must
"^DIC",779.2,779.2,"%D",11,0)
be specified for each type of message that it may receive, or a default action
"^DIC",779.2,779.2,"%D",12,0)
can be specified.
"^DIC",779.2,"B","HLO APPLICATION REGISTRY",779.2)

"BLD",5500,6)
^2
**END**
**END**
