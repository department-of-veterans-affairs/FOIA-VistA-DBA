KIDS Distribution saved on Jun 23, 2003@11:10:55
GEOGRAPHIC MEANS TESTING PHASE 2
**KIDS**:DG*5.3*497^IVM*2.0*75^FB*3.5*54^EAS*1.0*25^

**INSTALL NAME**
DG*5.3*497
"BLD",4197,0)
DG*5.3*497^REGISTRATION^0^3030623^y
"BLD",4197,1,0)
^^1^1^3030305^
"BLD",4197,1,1,0)
GEOGRAPHIC MEANS TESTING - PHASE II
"BLD",4197,4,0)
^9.64PA^43^2
"BLD",4197,4,2,0)
2
"BLD",4197,4,2,2,0)
^9.641^2^1
"BLD",4197,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",4197,4,2,2,2,1,0)
^9.6411^.3618^2
"BLD",4197,4,2,2,2,1,.3617,0)
USER ENROLLEE VALID THROUGH
"BLD",4197,4,2,2,2,1,.3618,0)
USER ENROLLEE SITE
"BLD",4197,4,2,222)
y^y^p^^^^n^^n
"BLD",4197,4,2,224)

"BLD",4197,4,43,0)
43
"BLD",4197,4,43,2,0)
^9.641^43.03^1
"BLD",4197,4,43,2,43.03,0)
MEANS TEST DATA  (sub-file)
"BLD",4197,4,43,2,43.03,1,0)
^9.6411^4^3
"BLD",4197,4,43,2,43.03,1,2,0)
MT COPAY EXEMPT VET INCOME
"BLD",4197,4,43,2,43.03,1,3,0)
MT COPAY EXEMPT 1ST DEP INCOME
"BLD",4197,4,43,2,43.03,1,4,0)
MT COPAY EXEMPT INCOME PER DEP
"BLD",4197,4,43,222)
y^y^p^^^^n^^n
"BLD",4197,4,43,224)

"BLD",4197,4,"APDD",2,2)

"BLD",4197,4,"APDD",2,2,.3617)

"BLD",4197,4,"APDD",2,2,.3618)

"BLD",4197,4,"APDD",43,43.03)

"BLD",4197,4,"APDD",43,43.03,2)

"BLD",4197,4,"APDD",43,43.03,3)

"BLD",4197,4,"APDD",43,43.03,4)

"BLD",4197,4,"B",2,2)

"BLD",4197,4,"B",43,43)

"BLD",4197,"ABPKG")
n
"BLD",4197,"KRN",0)
^9.67PA^8989.52^19
"BLD",4197,"KRN",.4,0)
.4
"BLD",4197,"KRN",.401,0)
.401
"BLD",4197,"KRN",.402,0)
.402
"BLD",4197,"KRN",.403,0)
.403
"BLD",4197,"KRN",.5,0)
.5
"BLD",4197,"KRN",.84,0)
.84
"BLD",4197,"KRN",3.6,0)
3.6
"BLD",4197,"KRN",3.8,0)
3.8
"BLD",4197,"KRN",9.2,0)
9.2
"BLD",4197,"KRN",9.8,0)
9.8
"BLD",4197,"KRN",9.8,"NM",0)
^9.68A^5^4
"BLD",4197,"KRN",9.8,"NM",1,0)
DGENELA1^^0^B74652192
"BLD",4197,"KRN",9.8,"NM",3,0)
VAFHLZE1^^0^B21852719
"BLD",4197,"KRN",9.8,"NM",4,0)
DGENUPL^^0^B28512409
"BLD",4197,"KRN",9.8,"NM",5,0)
DGENUPLA^^0^B25726260
"BLD",4197,"KRN",9.8,"NM","B","DGENELA1",1)

"BLD",4197,"KRN",9.8,"NM","B","DGENUPL",4)

"BLD",4197,"KRN",9.8,"NM","B","DGENUPLA",5)

"BLD",4197,"KRN",9.8,"NM","B","VAFHLZE1",3)

"BLD",4197,"KRN",19,0)
19
"BLD",4197,"KRN",19,"NM",0)
^9.68A^^
"BLD",4197,"KRN",19.1,0)
19.1
"BLD",4197,"KRN",101,0)
101
"BLD",4197,"KRN",101,"NM",0)
^9.68A^^0
"BLD",4197,"KRN",409.61,0)
409.61
"BLD",4197,"KRN",771,0)
771
"BLD",4197,"KRN",870,0)
870
"BLD",4197,"KRN",8989.51,0)
8989.51
"BLD",4197,"KRN",8989.52,0)
8989.52
"BLD",4197,"KRN",8994,0)
8994
"BLD",4197,"KRN","B",.4,.4)

"BLD",4197,"KRN","B",.401,.401)

"BLD",4197,"KRN","B",.402,.402)

"BLD",4197,"KRN","B",.403,.403)

"BLD",4197,"KRN","B",.5,.5)

"BLD",4197,"KRN","B",.84,.84)

"BLD",4197,"KRN","B",3.6,3.6)

"BLD",4197,"KRN","B",3.8,3.8)

"BLD",4197,"KRN","B",9.2,9.2)

"BLD",4197,"KRN","B",9.8,9.8)

"BLD",4197,"KRN","B",19,19)

"BLD",4197,"KRN","B",19.1,19.1)

"BLD",4197,"KRN","B",101,101)

"BLD",4197,"KRN","B",409.61,409.61)

"BLD",4197,"KRN","B",771,771)

"BLD",4197,"KRN","B",870,870)

"BLD",4197,"KRN","B",8989.51,8989.51)

"BLD",4197,"KRN","B",8989.52,8989.52)

"BLD",4197,"KRN","B",8994,8994)

"BLD",4197,"QUES",0)
^9.62^^
"BLD",4197,"REQB",0)
^9.611^4^4
"BLD",4197,"REQB",1,0)
DG*5.3*342^2
"BLD",4197,"REQB",2,0)
DG*5.3*367^2
"BLD",4197,"REQB",3,0)
DG*5.3*379^2
"BLD",4197,"REQB",4,0)
DG*5.3*472^2
"BLD",4197,"REQB","B","DG*5.3*342",1)

"BLD",4197,"REQB","B","DG*5.3*367",2)

"BLD",4197,"REQB","B","DG*5.3*379",3)

"BLD",4197,"REQB","B","DG*5.3*472",4)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.3617)

"FIA",2,2,.3618)

"FIA",43)
MAS PARAMETERS
"FIA",43,0)
^DG(43,
"FIA",43,0,0)
43
"FIA",43,0,1)
y^y^p^^^^n^^n
"FIA",43,0,10)

"FIA",43,0,11)

"FIA",43,0,"RLRO")

"FIA",43,0,"VR")
5.3^DG
"FIA",43,43)
1
"FIA",43,43.03)
1
"FIA",43,43.03,2)

"FIA",43,43.03,3)

"FIA",43,43.03,4)

"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
497^3030623^100881
"PKG",5,22,1,"PAH",1,1,0)
^^1^1^3030623
"PKG",5,22,1,"PAH",1,1,1,0)
GEOGRAPHIC MEANS TESTING - PHASE II
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","DGENELA1")
0^1^B74652192
"RTN","DGENELA1",1,0)
DGENELA1 ;ALB/CJM ,RTK,TDM- Patient Eligibility API ; 4/17/03 2:47pm
"RTN","DGENELA1",2,0)
 ;;5.3;Registration;**147,327,314,367,497**;Aug 13,1993
"RTN","DGENELA1",3,0)
 ;
"RTN","DGENELA1",4,0)
CHECK(DGELG,DGPAT,DGCDIS,ERRMSG) ;
"RTN","DGENELA1",5,0)
 ;Does validation checks on the eligibility contained in the DGELG array.
"RTN","DGENELA1",6,0)
 ;
"RTN","DGENELA1",7,0)
 ;Input:
"RTN","DGENELA1",8,0)
 ;  DGELG - array containing eligibility data (pass by reference)
"RTN","DGENELA1",9,0)
 ;  DGPAT - array containing patient data (pass by reference)
"RTN","DGENELA1",10,0)
 ;  DGCDIS - array containing catastrophic disability determination (pass by reference)
"RTN","DGENELA1",11,0)
 ;
"RTN","DGENELA1",12,0)
 ;Output:
"RTN","DGENELA1",13,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENELA1",14,0)
 ;  ERRMSG - returns a message if validations fail (pass by reference)
"RTN","DGENELA1",15,0)
 ;
"RTN","DGENELA1",16,0)
 N SUCCESS,NATCODE,BAD,SUB,CODE,DGONV,DGTEXT,INELDATE
"RTN","DGENELA1",17,0)
 S SUCCESS=0
"RTN","DGENELA1",18,0)
 S ERRMSG=""
"RTN","DGENELA1",19,0)
 ;
"RTN","DGENELA1",20,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",21,0)
 .;
"RTN","DGENELA1",22,0)
 .;get optional arrays if not there
"RTN","DGENELA1",23,0)
 .I '$D(DGPAT),'$$GET^DGENPTA(DGELG("DFN"),.DGPAT) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",24,0)
 .I '$D(DGCDIS),'$$GET^DGENCDA(DGELG("DFN"),.DGCDIS) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",25,0)
 .;
"RTN","DGENELA1",26,0)
 .;do field level checks
"RTN","DGENELA1",27,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I SUB'="ELIG",SUB'="RATEDIS",'$$CHKFIELD(SUB,DGELG(SUB)) S ERRMSG="BAD VALUE, FIELD = "_$$GET1^DID(2,$$FIELD(SUB),"","LABEL") Q
"RTN","DGENELA1",28,0)
 .;
"RTN","DGENELA1",29,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",30,0)
 .;
"RTN","DGENELA1",31,0)
 .;also check SC % field of Rated Disabilities
"RTN","DGENELA1",32,0)
 .S SUB="" F  S SUB=$O(DGELG("RATEDIS",SUB)) Q:(SUB="")  I '$$CHKFIELD("PER",DGELG("RATEDIS",SUB,"PER")) S ERRMSG="BAD VALUE, FIELD = DISABILITY % OF THE RATED DISABILITIES MULTIPLE" Q
"RTN","DGENELA1",33,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",34,0)
 .;
"RTN","DGENELA1",35,0)
 .I DGELG("SC")="Y",DGELG("SCPER")="" S ERRMSG="SC% UNSPECIFIED FOR SC VET" Q
"RTN","DGENELA1",36,0)
 .;
"RTN","DGENELA1",37,0)
 .;!! put this check back when POS is added to the Z11 message
"RTN","DGENELA1",38,0)
 .;I DGPAT("VETERAN")="Y",'DGELG("POS") S ERRMSG="POS UNSPECIFIED" Q 
"RTN","DGENELA1",39,0)
 .;
"RTN","DGENELA1",40,0)
 .I 'DGELG("ELIG","CODE") S ERRMSG="PRIMARY ELIGIBILITY IS UNSPECIFIED" Q
"RTN","DGENELA1",41,0)
 .;
"RTN","DGENELA1",42,0)
 .I (DGELG("VACKAMT")>0),(DGELG("A&A")_DGELG("HB")_DGELG("VAPEN")_DGELG("VADISAB")'["Y") S ERRMSG="VA CHECK AMOUNT > 0 BUT INCOME INDICATORS ALL SHOW 'NO'" Q
"RTN","DGENELA1",43,0)
 .;
"RTN","DGENELA1",44,0)
 .I (DGELG("VACKAMT")'>0),DGELG("VADISAB")_DGELG("VAPEN")_DGELG("A&A")_DGELG("HB")["Y" S ERRMSG="INCOME INDICATORS INCONSISTENT WITH $0 VA CHECK AMOUNT" Q 
"RTN","DGENELA1",45,0)
 .;
"RTN","DGENELA1",46,0)
 .I (DGELG("SC")="N"),(DGELG("VADISAB")="Y") S ERRMSG="NSC VETERANS CAN NOT BE RECEIVING VA DISABILITY BENEFITS" Q
"RTN","DGENELA1",47,0)
 .;
"RTN","DGENELA1",48,0)
 .S BAD=1 D  Q:BAD  ;check primary eligibility
"RTN","DGENELA1",49,0)
 ..S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA1",50,0)
 ..Q:'NATCODE
"RTN","DGENELA1",51,0)
 ..;
"RTN","DGENELA1",52,0)
 ..I NATCODE=21 S ERRMSG="CATASTROPHICALLY DISABLED NOT ALLOWED AS PRIMARY ELIGIBILITY" Q
"RTN","DGENELA1",53,0)
 ..;
"RTN","DGENELA1",54,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")<50),(NATCODE'=3) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",55,0)
 ..;
"RTN","DGENELA1",56,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")>49),(NATCODE'=1) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",57,0)
 ..;
"RTN","DGENELA1",58,0)
 ..S DGONV=$O(^DIC(21,"B","OTHER NON-VETERANS","")),INELDATE=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENELA1",59,0)
 ..I INELDATE'="",DGPAT("INELDATE")'>0,DGELG("POS"),DGELG("POS")=DGONV,'$D(^DIC(21,DGELG("POS"),"E",DGELG("ELIG","CODE"))) D
"RTN","DGENELA1",60,0)
 ...S DGTEXT="Patient was previously determined to be ineligible for VA health care.  Upon review, the individual is now determined to be eligible for VA care.  Please update period of service and complete a new application for enrollment in VistA."
"RTN","DGENELA1",61,0)
 ...D ADDMSG^DGENUPL3(.MSGS,DGTEXT,0)
"RTN","DGENELA1",62,0)
 ..;
"RTN","DGENELA1",63,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(NATCODE=1)!(NATCODE=3) S BAD=0 Q  ;primary eligibility OK
"RTN","DGENELA1",64,0)
 ..;
"RTN","DGENELA1",65,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE'=18 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PRISONER OF WAR" Q
"RTN","DGENELA1",66,0)
 ..;
"RTN","DGENELA1",67,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE=18 S BAD=0 Q
"RTN","DGENELA1",68,0)
 ..;
"RTN","DGENELA1",69,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE'=22 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PURPLE HEART RECIPIENT" Q
"RTN","DGENELA1",70,0)
 ..;
"RTN","DGENELA1",71,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE=22 S BAD=0 Q
"RTN","DGENELA1",72,0)
 ..;
"RTN","DGENELA1",73,0)
 ..; disabled DG*5.3*367, for Inel
"RTN","DGENELA1",74,0)
 ..;I (DGPAT("VETERAN")'=$P($G(^DIC(8.1,NATCODE,0)),"^",5)) S ERRMSG="PRIMARY ELIGIBILTY NOT CONSISTENT WITH VETERAN STATUS" Q
"RTN","DGENELA1",75,0)
 ..;
"RTN","DGENELA1",76,0)
 ..I DGELG("A&A")'="Y",NATCODE=2 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH A&A INDICATOR" Q
"RTN","DGENELA1",77,0)
 ..;
"RTN","DGENELA1",78,0)
 ..I DGELG("HB")'="Y",NATCODE=15 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH HOUSEBOUND INDICATOR" Q
"RTN","DGENELA1",79,0)
 ..;
"RTN","DGENELA1",80,0)
 ..I DGELG("VAPEN")'="Y",NATCODE=4 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH VA PENSION INDICATOR" Q
"RTN","DGENELA1",81,0)
 ..;
"RTN","DGENELA1",82,0)
 ..I DGELG("SC")="Y",((NATCODE=4)!(NATCODE=5)) S ERRMSG="NSC ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTION INDICATOR" Q
"RTN","DGENELA1",83,0)
 ..;
"RTN","DGENELA1",84,0)
 ..I (DGPAT("DOB")>2200101),(NATCODE=16) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF MEXICAN BORDER WAR" Q
"RTN","DGENELA1",85,0)
 ..;
"RTN","DGENELA1",86,0)
 ..I (DGPAT("DOB")>2200101),(NATCODE=17) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF WORLD WAR I" Q
"RTN","DGENELA1",87,0)
 ..;
"RTN","DGENELA1",88,0)
 ..;primary eligibility is good
"RTN","DGENELA1",89,0)
 ..S BAD=0
"RTN","DGENELA1",90,0)
 .;
"RTN","DGENELA1",91,0)
 .S SUCCESS=1
"RTN","DGENELA1",92,0)
 .;check eligibilities multiple
"RTN","DGENELA1",93,0)
 .S CODE=0 F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:'CODE  D  Q:('SUCCESS)
"RTN","DGENELA1",94,0)
 ..S NATCODE=$$NATCODE^DGENELA(CODE)
"RTN","DGENELA1",95,0)
 ..Q:'NATCODE
"RTN","DGENELA1",96,0)
 ..I NATCODE=21,'DGCDIS("DATE") S SUCCESS=0,ERRMSG="CATASTROPHICALLY DISABLED ELIGIBILITY REQUIRES CATASTROPHICALLY DISABLED DETERMINATION DATE" Q
"RTN","DGENELA1",97,0)
 .;
"RTN","DGENELA1",98,0)
 Q SUCCESS
"RTN","DGENELA1",99,0)
 ;
"RTN","DGENELA1",100,0)
STORE(DGELG,DGPAT,DGCDIS,ERROR,SKIPCHK) ;
"RTN","DGENELA1",101,0)
 ;Stores an eligibility record for a patient. The patient record must
"RTN","DGENELA1",102,0)
 ;already exist. A lock on the Patient record is required, and is
"RTN","DGENELA1",103,0)
 ;released upon completion.
"RTN","DGENELA1",104,0)
 ;
"RTN","DGENELA1",105,0)
 ;Input:
"RTN","DGENELA1",106,0)
 ;  DGELG - eligibility array (pass by reference)
"RTN","DGENELA1",107,0)
 ;  DGPAT - patient array (optional, pass by reference)
"RTN","DGENELA1",108,0)
 ;  DGCDIS - array containing the catastrophic disability determination (optional, pass by reference)
"RTN","DGENELA1",109,0)
 ;  SKIPCHK - flag, set to 1 means that the consistency checks
"RTN","DGENELA1",110,0)
 ;            were already done & should be skipped
"RTN","DGENELA1",111,0)
 ;
"RTN","DGENELA1",112,0)
 ;Output:
"RTN","DGENELA1",113,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENELA1",114,0)
 ;  ERROR - in event of failure returns an error message (pass by reference, optional)
"RTN","DGENELA1",115,0)
 ;
"RTN","DGENELA1",116,0)
 N SUCCESS,DATA,FIELD,DA,DFN,COUNT
"RTN","DGENELA1",117,0)
 S DFN=$G(DGELG("DFN"))
"RTN","DGENELA1",118,0)
 S SUCCESS=0
"RTN","DGENELA1",119,0)
 S ERROR=""
"RTN","DGENELA1",120,0)
 ;
"RTN","DGENELA1",121,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",122,0)
 .I '$$LOCK^DGENPTA1(DFN) S ERROR="UNABLE TO LOCK PATIENT RECORD" Q
"RTN","DGENELA1",123,0)
 .I $G(SKIPCHK)'=1,'$$CHECK(.DGELG,.DGPAT,.DGCDIS,.ERROR) Q
"RTN","DGENELA1",124,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:SUB=""  D
"RTN","DGENELA1",125,0)
 ..I SUB'="ELIG",SUB'="RATEDIS",SUB'="DFN" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=DGELG(SUB)
"RTN","DGENELA1",126,0)
 .;
"RTN","DGENELA1",127,0)
 .;don't add the Primary Eligibility unless different, so as to not
"RTN","DGENELA1",128,0)
 .;fire off x-refs unless necessary
"RTN","DGENELA1",129,0)
 .I $P($G(^DPT(DFN,.36)),"^")'=DGELG("ELIG","CODE") S DATA(.361)=DGELG("ELIG","CODE")
"RTN","DGENELA1",130,0)
 .;
"RTN","DGENELA1",131,0)
 .; Only update User Enrollee fields if the incoming UE status is
"RTN","DGENELA1",132,0)
 .; greater than the USER ENROLLEE VALID THROUGH on file.
"RTN","DGENELA1",133,0)
 .I $G(DATA(.3617))<$P($G(^DPT(DFN,.361)),"^",7) K DATA(.3617),DATA(.3618)
"RTN","DGENELA1",134,0)
 .;
"RTN","DGENELA1",135,0)
 .I '$$UPD^DGENDBS(2,DFN,.DATA) S ERROR="FILEMAN FAILED TO UPDATE THE PATIENT RECORD" Q
"RTN","DGENELA1",136,0)
 .;
"RTN","DGENELA1",137,0)
 .;
"RTN","DGENELA1",138,0)
 .;delete eligibilities that do not belong
"RTN","DGENELA1",139,0)
 .D DELELIG^DGENELA2(DFN,.DGELG)
"RTN","DGENELA1",140,0)
 .;
"RTN","DGENELA1",141,0)
 .;overlay Rated Disabilities
"RTN","DGENELA1",142,0)
 .Q:'$$OVERLAY()
"RTN","DGENELA1",143,0)
 .;
"RTN","DGENELA1",144,0)
 .;Add the new Patient Eligibilities
"RTN","DGENELA1",145,0)
 .;Don't add the an eligibility unless different - so as to not
"RTN","DGENELA1",146,0)
 .;fire off the x-refs unless necessary.
"RTN","DGENELA1",147,0)
 .;Also, try to assign ien = the code (see input tranform of the field).
"RTN","DGENELA1",148,0)
 .K DA,DATA
"RTN","DGENELA1",149,0)
 .S DA(1)=DFN
"RTN","DGENELA1",150,0)
 .S DATA(.01)=0
"RTN","DGENELA1",151,0)
 .F  S DATA(.01)=$O(DGELG("ELIG","CODE",DATA(.01))) Q:'DATA(.01)  I '$D(^DPT(DFN,"E","B",DATA(.01))) I '$$ADD^DGENDBS(2.0361,.DA,.DATA,,$S($D(^DPT(DFN,"E",DATA(.01))):0,1:DATA(.01))) S ERROR="FILEMAN FAILED TO ADD PATIENT ELIGIBILITY" Q
"RTN","DGENELA1",152,0)
 .;
"RTN","DGENELA1",153,0)
 .S SUCCESS=1
"RTN","DGENELA1",154,0)
 ;
"RTN","DGENELA1",155,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGENELA1",156,0)
 Q SUCCESS
"RTN","DGENELA1",157,0)
 ;
"RTN","DGENELA1",158,0)
FIELD(SUB) ;
"RTN","DGENELA1",159,0)
 ;given a subscript from the ELIGIBILITY array, returns the field number
"RTN","DGENELA1",160,0)
 ;
"RTN","DGENELA1",161,0)
 Q:SUB="CODE" .361
"RTN","DGENELA1",162,0)
 Q:SUB="SC" .301
"RTN","DGENELA1",163,0)
 Q:SUB="SCPER" .302
"RTN","DGENELA1",164,0)
 Q:SUB="POW" .525
"RTN","DGENELA1",165,0)
 Q:SUB="PH" .531
"RTN","DGENELA1",166,0)
 Q:SUB="A&A" .36205
"RTN","DGENELA1",167,0)
 Q:SUB="HB" .36215
"RTN","DGENELA1",168,0)
 Q:SUB="VAPEN" .36235
"RTN","DGENELA1",169,0)
 Q:SUB="VACKAMT" .36295
"RTN","DGENELA1",170,0)
 Q:SUB="DISRET" .362
"RTN","DGENELA1",171,0)
 Q:SUB="MEDICAID" .381
"RTN","DGENELA1",172,0)
 Q:SUB="AO" .32102
"RTN","DGENELA1",173,0)
 Q:SUB="IR" .32103
"RTN","DGENELA1",174,0)
 Q:SUB="EC" .322013
"RTN","DGENELA1",175,0)
 Q:SUB="MTSTA" ""  ;don't map Means Test Category
"RTN","DGENELA1",176,0)
 Q:SUB="P&T" .304
"RTN","DGENELA1",177,0)
 Q:SUB="POS" .323
"RTN","DGENELA1",178,0)
 Q:SUB="UNEMPLOY" .305
"RTN","DGENELA1",179,0)
 Q:SUB="SCAWDATE" .3012
"RTN","DGENELA1",180,0)
 Q:SUB="RATEINC" .293
"RTN","DGENELA1",181,0)
 Q:SUB="CLAIMNUM" .313
"RTN","DGENELA1",182,0)
 ;Q:SUB="CLAIMLOC" .312 ; ** removed **
"RTN","DGENELA1",183,0)
 Q:SUB="VADISAB" .3025
"RTN","DGENELA1",184,0)
 Q:SUB="ELIGSTA" .3611
"RTN","DGENELA1",185,0)
 Q:SUB="ELIGSTADATE" .3612
"RTN","DGENELA1",186,0)
 Q:SUB="ELIGVERIF" .3615
"RTN","DGENELA1",187,0)
 Q:SUB="ELIGENTBY" .3616
"RTN","DGENELA1",188,0)
 Q:SUB="RD" .01
"RTN","DGENELA1",189,0)
 Q:SUB="PER" 2
"RTN","DGENELA1",190,0)
 Q:SUB="RDSC" 3
"RTN","DGENELA1",191,0)
 Q:SUB="UEYEAR" .3617
"RTN","DGENELA1",192,0)
 Q:SUB="UESITE" .3618
"RTN","DGENELA1",193,0)
 ;
"RTN","DGENELA1",194,0)
 Q ""
"RTN","DGENELA1",195,0)
 ;
"RTN","DGENELA1",196,0)
CHKFIELD(SUB,VAL) ;
"RTN","DGENELA1",197,0)
 ;Description: Does field level validation of the value. Returns 1
"RTN","DGENELA1",198,0)
 ;if the value is good, 0 otherwise.
"RTN","DGENELA1",199,0)
 ;
"RTN","DGENELA1",200,0)
 Q:($G(VAL)="") 1  ;for now, all NULL values assumed okay
"RTN","DGENELA1",201,0)
 ;
"RTN","DGENELA1",202,0)
 N BAD S BAD=0
"RTN","DGENELA1",203,0)
 I (SUB="SCPER")!(SUB="PER"),(+VAL'=VAL)!(VAL>100)!(VAL<0)!(VAL?.E1"."1N.N) S BAD=1
"RTN","DGENELA1",204,0)
 I SUB="VACKAMT",+VAL'=VAL&(VAL'?.N1"."2N)!(VAL>99999)!(VAL<0) S BAD=1
"RTN","DGENELA1",205,0)
 I SUB="DISRET",VAL'=0,VAL'=1,VAL'=2,VAL'=3 S BAD=1
"RTN","DGENELA1",206,0)
 I SUB="MEDICAID",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",207,0)
 I SUB="RATEINC",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",208,0)
 I SUB="CLAIMLOC",(VAL["""")!($A(VAL)=45)!($L(VAL)>40)!($L(VAL)<2) S BAD=1
"RTN","DGENELA1",209,0)
 I SUB="ELIGSTA",VAL'="P",VAL'="R",VAL'="V" S BAD=1
"RTN","DGENELA1",210,0)
 I SUB="POW",VAL'="Y",VAL'="N",VAL'="U" S BAD=1
"RTN","DGENELA1",211,0)
 Q 'BAD
"RTN","DGENELA1",212,0)
 ;
"RTN","DGENELA1",213,0)
 ;
"RTN","DGENELA1",214,0)
OVERLAY() ;
"RTN","DGENELA1",215,0)
 ;Description: Overlay the local Rated Disabilities with whatever HEC
"RTN","DGENELA1",216,0)
 ;sent.
"RTN","DGENELA1",217,0)
 ;
"RTN","DGENELA1",218,0)
 N SUCCESS S SUCCESS=1
"RTN","DGENELA1",219,0)
 ;
"RTN","DGENELA1",220,0)
 ;delete the rated disabilties multiple
"RTN","DGENELA1",221,0)
 D DELRDIS^DGENELA2(DFN)
"RTN","DGENELA1",222,0)
 ;
"RTN","DGENELA1",223,0)
 ;add the rated disabilities
"RTN","DGENELA1",224,0)
 K DATA,DA
"RTN","DGENELA1",225,0)
 S DA(1)=DFN
"RTN","DGENELA1",226,0)
 S COUNT=0
"RTN","DGENELA1",227,0)
 F  S COUNT=$O(DGELG("RATEDIS",COUNT)) Q:'COUNT  D
"RTN","DGENELA1",228,0)
 .S DATA(.01)=DGELG("RATEDIS",COUNT,"RD")
"RTN","DGENELA1",229,0)
 .I DATA(.01) S DATA(2)=DGELG("RATEDIS",COUNT,"PER"),DATA(3)=DGELG("RATEDIS",COUNT,"RDSC") I '$$ADD^DGENDBS(2.04,.DA,.DATA) S ERROR="FILEMAN FAILED TO ADD RATED DISABILTIES",SUCCESS=0
"RTN","DGENELA1",230,0)
 Q SUCCESS
"RTN","DGENUPL")
0^4^B28512409
"RTN","DGENUPL",1,0)
DGENUPL ;ALB/CJM,ISA/KWP,TDM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 3/6/03 2:01pm
"RTN","DGENUPL",2,0)
 ;;5.3;REGISTRATION;**147,222,232,363,472,497**;Aug 13,1993
"RTN","DGENUPL",3,0)
 ;Phase II Moved Z11 to DGENUPL7
"RTN","DGENUPL",4,0)
ORUZ11(MSGIEN,ERRCOUNT) ;
"RTN","DGENUPL",5,0)
 ;Description:  This procedure is used to process a batch of ORU~Z11
"RTN","DGENUPL",6,0)
 ;messages or a single ORU~Z11 message.The processing consists of
"RTN","DGENUPL",7,0)
 ;uploading the patient enrollment and eligibility data.
"RTN","DGENUPL",8,0)
 ;
"RTN","DGENUPL",9,0)
 ;Input:
"RTN","DGENUPL",10,0)
 ;  MSGIEN - the ien of the HL7 message in the HL7 MESSAGE TEXT file
"RTN","DGENUPL",11,0)
 ;Output:
"RTN","DGENUPL",12,0)
 ;  ERRCOUNT - count of messages that were not processed due to
"RTN","DGENUPL",13,0)
 ;    errors encountered  (pass by reference)
"RTN","DGENUPL",14,0)
 ;
"RTN","DGENUPL",15,0)
 N CURLINE,SSN,DOB,SEX,SEG,MSGID,SSN,DFN,ERRMSG,SEG
"RTN","DGENUPL",16,0)
 ;
"RTN","DGENUPL",17,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",18,0)
 ;
"RTN","DGENUPL",19,0)
 ;initialize HL7 variable
"RTN","DGENUPL",20,0)
 S HLSDT="IVMQ" ;location of error message
"RTN","DGENUPL",21,0)
 ;
"RTN","DGENUPL",22,0)
 S CURLINE=1
"RTN","DGENUPL",23,0)
 D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",24,0)
 Q:'CURLINE
"RTN","DGENUPL",25,0)
 F  Q:'CURLINE  D  D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",26,0)
 .D GETSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",27,0)
 .S MSGID=SEG(10)
"RTN","DGENUPL",28,0)
 .D NXTSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",29,0)
 .I SEG("TYPE")'="PID" D ADDERROR(MSGID,,"PID SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",30,0)
 .S DFN=$$LOOKUP^DGENPTA(SEG(19),$$FMDATE^HLFNC(SEG(7)),SEG(8),.ERRMSG)
"RTN","DGENUPL",31,0)
 .I 'DFN D ADDERROR(MSGID,SEG(19),ERRMSG,.ERRCOUNT) Q
"RTN","DGENUPL",32,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",33,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",34,0)
 M ^TMP("HLS",$J)=^TMP("IVM","HLS",$J)                     ;DG*5.3*472
"RTN","DGENUPL",35,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",36,0)
 Q
"RTN","DGENUPL",37,0)
 ;
"RTN","DGENUPL",38,0)
ORFZ11(MSGIEN,MSGID) ;
"RTN","DGENUPL",39,0)
 ;Description:  This procedure is used to process an ORF~Z11 message
"RTN","DGENUPL",40,0)
 ;It uploads the patient enrollment and eligibility data.
"RTN","DGENUPL",41,0)
 ;An acknowledgment is returned.
"RTN","DGENUPL",42,0)
 ;
"RTN","DGENUPL",43,0)
 ;Input:
"RTN","DGENUPL",44,0)
 ;  MSGIEN - the internal entry number of the HL7 message in the HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL",45,0)
 ;  MSGID - the message control id from the MSH segment
"RTN","DGENUPL",46,0)
 ;
"RTN","DGENUPL",47,0)
 ;Output: none
"RTN","DGENUPL",48,0)
 ;
"RTN","DGENUPL",49,0)
 N CURLINE,DFN,QUERYIEN,QARRAY,QRYMSGID,ERRCOUNT,HECERROR,SEG,DGRESENT
"RTN","DGENUPL",50,0)
 ;CURLINE tracks current line in the message
"RTN","DGENUPL",51,0)
 ;QUERYIEN  the ien of query in the ENROLLMENT QUERY LOG
"RTN","DGENUPL",52,0)
 ;QRYMSGID  the Message Controll ID of the query
"RTN","DGENUPL",53,0)
 ;QARRAY  array containing the ENROLLMENT QUERY LOG record
"RTN","DGENUPL",54,0)
 ;HECERROR  error message returned by HEC in response to query
"RTN","DGENUPL",55,0)
 ;DGRESENT  flag=1 if query was resent
"RTN","DGENUPL",56,0)
 ;
"RTN","DGENUPL",57,0)
 S (QUERYIEN,ERRCOUNT)=0
"RTN","DGENUPL",58,0)
 ;
"RTN","DGENUPL",59,0)
 ;initialize HL7 variable
"RTN","DGENUPL",60,0)
 S HLSDT="IVMQ" ;subscript in ^TMP( global for ACK message
"RTN","DGENUPL",61,0)
 ;
"RTN","DGENUPL",62,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",63,0)
 ;
"RTN","DGENUPL",64,0)
 S CURLINE=1
"RTN","DGENUPL",65,0)
 S HECERROR=""
"RTN","DGENUPL",66,0)
 ;
"RTN","DGENUPL",67,0)
 D  ;drops out on error
"RTN","DGENUPL",68,0)
 .D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",69,0)
 .I SEG("TYPE")'="MSA" D ADDERROR(MSGID,,"MISSING MSA SEGMENT",.ERRCOUNT) Q
"RTN","DGENUPL",70,0)
 .;trace the reply back to the query
"RTN","DGENUPL",71,0)
 .S QRYMSGID=SEG(2)
"RTN","DGENUPL",72,0)
 .S QUERYIEN=$$FINDMSG^DGENQRY(QRYMSGID)
"RTN","DGENUPL",73,0)
 .I 'QUERYIEN D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",74,0)
 .I QUERYIEN,'$$GET^DGENQRY(QUERYIEN,.QARRAY) D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",75,0)
 .S DFN=QARRAY("DFN")
"RTN","DGENUPL",76,0)
 .I (SEG(1)="AR")!(SEG(1)="AE") D  Q
"RTN","DGENUPL",77,0)
 ..;HEC was unable to reply to the query. If due to incorrect patient
"RTN","DGENUPL",78,0)
 ..;info, then resend the query, otherwise just log it as unsuccessful
"RTN","DGENUPL",79,0)
 ..N SSN,DOB,SEX,DGPAT,HECMSG
"RTN","DGENUPL",80,0)
 ..S HECMSG=SEG(3)
"RTN","DGENUPL",81,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",82,0)
 ..Q:(SEG("TYPE")'="QRD")
"RTN","DGENUPL",83,0)
 ..S SSN=SEG(8)
"RTN","DGENUPL",84,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",85,0)
 ..Q:(SEG("TYPE")'="QRF")
"RTN","DGENUPL",86,0)
 ..S DOB=$$FMDATE^HLFNC(SEG(4))
"RTN","DGENUPL",87,0)
 ..S SEX=SEG(5)
"RTN","DGENUPL",88,0)
 ..;if patient id info incorrect, resend the query
"RTN","DGENUPL",89,0)
 ..I $$GET^DGENPTA(DFN,.DGPAT),((DOB'=DGPAT("DOB"))!(SEX'=DGPAT("SEX"))!(SSN'=DGPAT("SSN"))) I $$RESEND^DGENQRY1(QUERYIEN) S DGRESENT=1 Q
"RTN","DGENUPL",90,0)
 ..S HECERROR="HEC UNABLE TO RESPOND TO QUERY- "_HECMSG Q
"RTN","DGENUPL",91,0)
 .;
"RTN","DGENUPL",92,0)
 .F SEG="QRD","QRF","PID" D NXTSEG(MSGIEN,.CURLINE,.SEG) I SEG("TYPE")'=SEG D ADDERROR(MSGID,,SEG_" SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",93,0)
 .S CURLINE=CURLINE-1 ;should point to line before PID
"RTN","DGENUPL",94,0)
 .I $$SSN^DGENPTA(DFN)'=SEG(19) D ADDERROR(MSGID,,"SSN DOES NOT MATCH",.ERRCOUNT) Q
"RTN","DGENUPL",95,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",96,0)
 ;
"RTN","DGENUPL",97,0)
 ;update the query log
"RTN","DGENUPL",98,0)
 I $G(HECERROR)="",ERRCOUNT S HECERROR="UPLOAD FAILED DUE TO CONSISTENCY CHECKS"
"RTN","DGENUPL",99,0)
 I '$G(DGRESENT),$$RECEIVE^DGENQRY1(QUERYIEN,HECERROR,MSGID)
"RTN","DGENUPL",100,0)
 ;
"RTN","DGENUPL",101,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",102,0)
 ;
"RTN","DGENUPL",103,0)
 ;if there was no error, create an 'AA' ack
"RTN","DGENUPL",104,0)
 ;I 'ERRCOUNT D ACCEPT^DGENUPL1(MSGID)                  ;DG*5.3*472
"RTN","DGENUPL",105,0)
 ;D MVERRORS^DGENUPL1                                   ;DG*5.3*472
"RTN","DGENUPL",106,0)
 ;transmit the ack
"RTN","DGENUPL",107,0)
 ;********************************************************
"RTN","DGENUPL",108,0)
 ;7.12.01;KSD; COMMENTED OUT. DON'T SEND ACK TO ORF
"RTN","DGENUPL",109,0)
 ;I $D(HLTRANS) S HLARYTYP="GB",HLFORMAT=1 D GENACK^HLMA1(HLEID,HLMTIENS,HLEIDS,HLARYTYP,HLFORMAT,.HLRESLTA,HLMTIEN)
"RTN","DGENUPL",110,0)
 ;
"RTN","DGENUPL",111,0)
 Q
"RTN","DGENUPL",112,0)
 ;
"RTN","DGENUPL",113,0)
ADDERROR(MSGID,SSN,ERRMSG,ERRCOUNT) ;
"RTN","DGENUPL",114,0)
 ;Description - writes an error message to a global. It will be
"RTN","DGENUPL",115,0)
 ;transmitted in the ack later.
"RTN","DGENUPL",116,0)
 ;
"RTN","DGENUPL",117,0)
 ;Inputs:
"RTN","DGENUPL",118,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL",119,0)
 ;  SSN - patient social security number
"RTN","DGENUPL",120,0)
 ;  ERRMSG - the error message
"RTN","DGENUPL",121,0)
 ;  ERRCOUNT - count of errors written so far
"RTN","DGENUPL",122,0)
 ;
"RTN","DGENUPL",123,0)
 ;Outputs: none
"RTN","DGENUPL",124,0)
 ;
"RTN","DGENUPL",125,0)
 S ERRCOUNT=+$G(ERRCOUNT)
"RTN","DGENUPL",126,0)
 ;
"RTN","DGENUPL",127,0)
 I (ERRCOUNT*2)+1=1 D
"RTN","DGENUPL",128,0)
 . K HL,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","DGENUPL",129,0)
 . D INIT^HLFNC2(HLEID,.HL)
"RTN","DGENUPL",130,0)
 . D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","DGENUPL",131,0)
 K HLRES
"RTN","DGENUPL",132,0)
 S MID=HLMID_"-"_((ERRCOUNT*2)+1)
"RTN","DGENUPL",133,0)
 D MSH^HLFNC2(.HL,MID,.HLRES)
"RTN","DGENUPL",134,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+1)=HLRES
"RTN","DGENUPL",135,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+2)="MSA"_HLFS_"AE"_HLFS_MSGID_HLFS_ERRMSG_" - SSN "_$S($L($G(SSN)):SSN,1:"NOT FOUND")
"RTN","DGENUPL",136,0)
 S ERRCOUNT=ERRCOUNT+1
"RTN","DGENUPL",137,0)
 ;Put in error message in HECERROR to be included in the NOTIFY message for a solicited query
"RTN","DGENUPL",138,0)
 I $D(HECERROR) S HECERROR=ERRMSG
"RTN","DGENUPL",139,0)
 Q
"RTN","DGENUPL",140,0)
 ;
"RTN","DGENUPL",141,0)
NXTSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",142,0)
 ;Description: Returns the next segment
"RTN","DGENUPL",143,0)
 ;
"RTN","DGENUPL",144,0)
 ;Input:
"RTN","DGENUPL",145,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",146,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",147,0)
 ;
"RTN","DGENUPL",148,0)
 ;Output:
"RTN","DGENUPL",149,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",150,0)
 ;  CURLINE - upon exiting, will be the subscript of the next segment
"RTN","DGENUPL",151,0)
 ;
"RTN","DGENUPL",152,0)
 S CURLINE=CURLINE+1
"RTN","DGENUPL",153,0)
 D GETSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",154,0)
 Q
"RTN","DGENUPL",155,0)
 ;
"RTN","DGENUPL",156,0)
GETSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",157,0)
 ;returns the current segment
"RTN","DGENUPL",158,0)
 ;
"RTN","DGENUPL",159,0)
 ;Input:
"RTN","DGENUPL",160,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",161,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",162,0)
 ;
"RTN","DGENUPL",163,0)
 ;Output:
"RTN","DGENUPL",164,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",165,0)
 ;
"RTN","DGENUPL",166,0)
 N SEGMENT,I
"RTN","DGENUPL",167,0)
 S:$G(HLFS)="" HLFS=$G(HL("FS")) S:HLFS="" HLFS="^"
"RTN","DGENUPL",168,0)
 S SEGMENT=$G(^TMP($J,IVMRTN,CURLINE,0))
"RTN","DGENUPL",169,0)
 S SEG("TYPE")=$E(SEGMENT,1,3)
"RTN","DGENUPL",170,0)
 ;
"RTN","DGENUPL",171,0)
 ;the MSH & BHS segs contain as their first piece the field separator, which makes breaKing the seqment into fields a bit different
"RTN","DGENUPL",172,0)
 I (SEG("TYPE")="MSH")!(SEG("TYPE")="BHS") D
"RTN","DGENUPL",173,0)
 .S SEG(1)=$E(SEGMENT,4)
"RTN","DGENUPL",174,0)
 .F I=2:1:30 S SEG(I)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",175,0)
 E  D
"RTN","DGENUPL",176,0)
 .F I=2:1:36 S SEG(I-1)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",177,0)
 Q
"RTN","DGENUPL",178,0)
 ;
"RTN","DGENUPL",179,0)
ADVANCE(MSGIEN,CURLINE) ;
"RTN","DGENUPL",180,0)
 ;Description: Used to find the begining of the next message in the batch.
"RTN","DGENUPL",181,0)
 ;
"RTN","DGENUPL",182,0)
 ;Input:
"RTN","DGENUPL",183,0)
 ;  MSGIEN - ien of message in the HL7 MESSAGE TEXT file.
"RTN","DGENUPL",184,0)
 ;  CURLINE - current position in the message
"RTN","DGENUPL",185,0)
 ;Output:
"RTN","DGENUPL",186,0)
 ;  CURLINE - starting position of next message in the batch, or 0 if 
"RTN","DGENUPL",187,0)
 ;    the end of the message is reached
"RTN","DGENUPL",188,0)
 ;
"RTN","DGENUPL",189,0)
 Q:'CURLINE
"RTN","DGENUPL",190,0)
 F  S CURLINE=$O(^TMP($J,IVMRTN,CURLINE)) Q:'CURLINE  Q:$E($G(^TMP($J,IVMRTN,CURLINE,0)),1,3)="MSH"
"RTN","DGENUPL",191,0)
 S CURLINE=+CURLINE
"RTN","DGENUPL",192,0)
 Q
"RTN","DGENUPLA")
0^5^B25726260
"RTN","DGENUPLA",1,0)
DGENUPLA ;ALB/CKN,TDM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 3/6/03 12:32pm
"RTN","DGENUPLA",2,0)
 ;;5.3;REGISTRATION;**397,379,497**;Aug 13,1993
"RTN","DGENUPLA",3,0)
 ;
"RTN","DGENUPLA",4,0)
 ;***************************************************************
"RTN","DGENUPLA",5,0)
 ; This routine was created because DGENUPL2 had reached it's
"RTN","DGENUPLA",6,0)
 ; maximum size, therefore no new code could not be added.  All
"RTN","DGENUPLA",7,0)
 ; code that existed in the ZEL and OBX tags of DGENUPL2 has
"RTN","DGENUPLA",8,0)
 ; been moved to the ZEL and OBX tags of DGENUPLA.  A line of code
"RTN","DGENUPLA",9,0)
 ; was placed in ZEL^DGENUPL2 to call ZEL^DGENUPLA.  A line of
"RTN","DGENUPLA",10,0)
 ; code was placed in OBX^DGENUPL2 to call OBX^DGENUPLA.
"RTN","DGENUPLA",11,0)
 ; Any routine that calls ZEL^DGENUPL2 or OBX^DGENUPL2 will not
"RTN","DGENUPLA",12,0)
 ; be affected by this change.
"RTN","DGENUPLA",13,0)
 ;***************************************************************
"RTN","DGENUPLA",14,0)
 ;
"RTN","DGENUPLA",15,0)
 ;***************************************************************
"RTN","DGENUPLA",16,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPLA",17,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPLA",18,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGNTR(),DGMST(),ERROR
"RTN","DGENUPLA",19,0)
 ;***************************************************************
"RTN","DGENUPLA",20,0)
 ;
"RTN","DGENUPLA",21,0)
 ;
"RTN","DGENUPLA",22,0)
ZEL(COUNT) ;
"RTN","DGENUPLA",23,0)
 N CODE
"RTN","DGENUPLA",24,0)
 S CODE=$$CONVERT^DGENUPL1(SEG(2),"ELIGIBILITY",.ERROR)
"RTN","DGENUPLA",25,0)
 I ERROR D  Q
"RTN","DGENUPLA",26,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ELIGIBILITY CODE "_SEG(2)_" NOT FOUND IN ELIGIBILTIY CODE FILE",.ERRCOUNT)
"RTN","DGENUPLA",27,0)
 I COUNT=1 D
"RTN","DGENUPLA",28,0)
 .S DGELG("ELIG","CODE")=CODE
"RTN","DGENUPLA",29,0)
 .S DGELG("DISRET")=$$CONVERT^DGENUPL1(SEG(5))
"RTN","DGENUPLA",30,0)
 .S DGELG("CLAIMNUM")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPLA",31,0)
 .;
"RTN","DGENUPLA",32,0)
 .;** removed **
"RTN","DGENUPLA",33,0)
 .;S DGELG("CLAIMLOC")=$$CONVERT^DGENUPL1(SEG(7))
"RTN","DGENUPLA",34,0)
 .;
"RTN","DGENUPLA",35,0)
 .S DGPAT("VETERAN")=$$CONVERT^DGENUPL1(SEG(8),"Y/N",.ERROR)
"RTN","DGENUPLA",36,0)
 .I ERROR D  Q
"RTN","DGENUPLA",37,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPLA",38,0)
 .S DGELG("ELIGSTA")=$$CONVERT^DGENUPL1(SEG(10))
"RTN","DGENUPLA",39,0)
 .S DGELG("ELIGSTADATE")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPLA",40,0)
 .I ERROR D  Q
"RTN","DGENUPLA",41,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPLA",42,0)
 .S DGELG("ELIGVERIF")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPLA",43,0)
 .S DGELG("A&A")=$$CONVERT^DGENUPL1(SEG(14),"Y/N",.ERROR)
"RTN","DGENUPLA",44,0)
 .I ERROR D  Q
"RTN","DGENUPLA",45,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 14",.ERRCOUNT)
"RTN","DGENUPLA",46,0)
 .S DGELG("HB")=$$CONVERT^DGENUPL1(SEG(15),"Y/N",.ERROR)
"RTN","DGENUPLA",47,0)
 .I ERROR D  Q
"RTN","DGENUPLA",48,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 15",.ERRCOUNT)
"RTN","DGENUPLA",49,0)
 .S DGELG("VAPEN")=$$CONVERT^DGENUPL1(SEG(16),"Y/N",.ERROR)
"RTN","DGENUPLA",50,0)
 .I ERROR D  Q
"RTN","DGENUPLA",51,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 16",.ERRCOUNT)
"RTN","DGENUPLA",52,0)
 .S DGELG("VADISAB")=$$CONVERT^DGENUPL1(SEG(17),"Y/N",.ERROR)
"RTN","DGENUPLA",53,0)
 .I ERROR D  Q
"RTN","DGENUPLA",54,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 17",.ERRCOUNT)
"RTN","DGENUPLA",55,0)
 .S DGELG("AO")=$$CONVERT^DGENUPL1(SEG(18),"Y/N",.ERROR)
"RTN","DGENUPLA",56,0)
 .I ERROR D  Q
"RTN","DGENUPLA",57,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 18",.ERRCOUNT)
"RTN","DGENUPLA",58,0)
 .S DGELG("IR")=$$CONVERT^DGENUPL1(SEG(19),"Y/N",.ERROR)
"RTN","DGENUPLA",59,0)
 .I ERROR D  Q
"RTN","DGENUPLA",60,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 19",.ERRCOUNT)
"RTN","DGENUPLA",61,0)
 .S DGELG("EC")=$$CONVERT^DGENUPL1(SEG(20),"Y/N",.ERROR)
"RTN","DGENUPLA",62,0)
 .I ERROR D  Q
"RTN","DGENUPLA",63,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 20",.ERROR)
"RTN","DGENUPLA",64,0)
 .;
"RTN","DGENUPLA",65,0)
 .S DGELG("VACKAMT")=$$CONVERT^DGENUPL1(SEG(21))
"RTN","DGENUPLA",66,0)
 .;
"RTN","DGENUPLA",67,0)
 .;Parse MST data into DGMST array from sequences 23, 24, 25 of ZEL segment
"RTN","DGENUPLA",68,0)
 . S DGMST("MSTSTAT")=SEG(23)
"RTN","DGENUPLA",69,0)
 . S DGMST("MSTDT")=$$CONVERT^DGENUPL1(SEG(24),"TS",.ERROR)
"RTN","DGENUPLA",70,0)
 . I ERROR D  Q
"RTN","DGENUPLA",71,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 24",.ERROR)
"RTN","DGENUPLA",72,0)
 . S DGMST("MSTST")=$$CONVERT^DGENUPL1(SEG(25),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",73,0)
 . I ERROR D  Q
"RTN","DGENUPLA",74,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 25",.ERROR)
"RTN","DGENUPLA",75,0)
 .;
"RTN","DGENUPLA",76,0)
 . S DGELG("UEYEAR")=$$CONVERT^DGENUPL1(SEG(34),"DATE",.ERROR)
"RTN","DGENUPLA",77,0)
 . I ERROR D  Q
"RTN","DGENUPLA",78,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 34",.ERRCOUNT)
"RTN","DGENUPLA",79,0)
 . S DGELG("UESITE")=$$CONVERT^DGENUPL1(SEG(35),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",80,0)
 . I ERROR D  Q
"RTN","DGENUPLA",81,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 35",.ERRCOUNT)
"RTN","DGENUPLA",82,0)
 ;
"RTN","DGENUPLA",83,0)
 I COUNT>1 D
"RTN","DGENUPLA",84,0)
 .S DGELG("ELIG","CODE",CODE)=""
"RTN","DGENUPLA",85,0)
 Q
"RTN","DGENUPLA",86,0)
 ;
"RTN","DGENUPLA",87,0)
OBX ;
"RTN","DGENUPLA",88,0)
 N OBXPCE,OBXVAL,OBXTBL,I,CS,SS,RS
"RTN","DGENUPLA",89,0)
 I $G(HLECH)'="~|\&" N HLECH S HLECH="~|\&"
"RTN","DGENUPLA",90,0)
 I $G(HLFS)="" N HLFS S HLFS="^"
"RTN","DGENUPLA",91,0)
 S CS=$E(HLECH,1),SS=$E(HLECH,4),RS=$E(HLECH,2)
"RTN","DGENUPLA",92,0)
 I $G(SEG(3))=("38.1"_$E(HLECH)_"SECURITY LOG") D
"RTN","DGENUPLA",93,0)
 . N LEVEL
"RTN","DGENUPLA",94,0)
 . S LEVEL=$P(SEG(5),$E(HLECH))
"RTN","DGENUPLA",95,0)
 . S DGSEC("LEVEL")=$$CONVERT^DGENUPL1(LEVEL,"1/0",.ERROR)
"RTN","DGENUPLA",96,0)
 . I ERROR D  Q
"RTN","DGENUPLA",97,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, OBX SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPLA",98,0)
 . S DGSEC("SOURCE")=$$CONVERT^DGENUPL1(SEG(16))
"RTN","DGENUPLA",99,0)
 ;
"RTN","DGENUPLA",100,0)
 I $G(SEG(3))=("VISTA"_CS_"28.11") D
"RTN","DGENUPLA",101,0)
 . S OBXTBL(1)="NTR^Y",OBXTBL(2)="AVI^Y",OBXTBL(3)="SUB^Y"
"RTN","DGENUPLA",102,0)
 . S OBXTBL(4)="HNC^Y",OBXTBL(5)="NTR^N",OBXTBL(6)="AVI^N"
"RTN","DGENUPLA",103,0)
 . S OBXTBL(7)="SUB^N",OBXTBL(8)="HNC^N",OBXTBL(9)="NTR^U"
"RTN","DGENUPLA",104,0)
 . F I=1:1:$L($G(SEG(5)),RS) D
"RTN","DGENUPLA",105,0)
 . . S OBXPCE=$P($G(SEG(5)),RS,I),OBXVAL=$P($G(OBXPCE),CS)
"RTN","DGENUPLA",106,0)
 . . S DGNTR($P($G(OBXTBL(OBXVAL)),"^"))=$P($G(OBXTBL(OBXVAL)),"^",2)
"RTN","DGENUPLA",107,0)
 . I $G(SEG(12))'="" S DGNTR("HDT")=$$CONVERT^DGENUPL1(SEG(12),"TS",.ERROR)
"RTN","DGENUPLA",108,0)
 . S DGNTR("VDT")=$$CONVERT^DGENUPL1(SEG(14),"TS",.ERROR)
"RTN","DGENUPLA",109,0)
 . S DGNTR("VSIT")=$$CONVERT^DGENUPL1(SEG(15),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",110,0)
 . S DGNTR("HSIT")=$P($P($G(SEG(16)),CS,14),SS,2)
"RTN","DGENUPLA",111,0)
 . I DGNTR("HSIT")'="" S DGNTR("HSIT")=$$CONVERT^DGENUPL1($G(DGNTR("HSIT")),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",112,0)
 . S DGNTR("VER")=$P($G(SEG(17)),CS)
"RTN","DGENUPLA",113,0)
 Q
"RTN","VAFHLZE1")
0^3^B21852719
"RTN","VAFHLZE1",1,0)
VAFHLZE1 ;BPFO/JRP,TDM - Data extractor for ZEL segment ; 3/3/03 4:47pm
"RTN","VAFHLZE1",2,0)
 ;;5.3;Registration;**342,497**;Aug 13, 1993
"RTN","VAFHLZE1",3,0)
 ;
"RTN","VAFHLZE1",4,0)
GETDATA ;Get information needed to build ZEL  segment
"RTN","VAFHLZE1",5,0)
 ;Input: Existance of the following variables is assumed
"RTN","VAFHLZE1",6,0)
 ;   DFN - Pointer to Patient (#2) file
"RTN","VAFHLZE1",7,0)
 ;   VAFPELIG - Primary Eligibility string (.36 node)
"RTN","VAFHLZE1",8,0)
 ;   VAFSTR - Fields to extract (padded with commas)
"RTN","VAFHLZE1",9,0)
 ;   VAFNODE - Eligibility Node (node from Elig. ["E"] mult)
"RTN","VAFHLZE1",10,0)
 ;   VAFMSTDT - Date to use when getting MST status (optional)
"RTN","VAFHLZE1",11,0)
 ;   VAFSETID - Value to use for Set ID (optional)
"RTN","VAFHLZE1",12,0)
 ;   HL7 encoding characters (HLFS, HLENC, HLQ)
"RTN","VAFHLZE1",13,0)
 ;
"RTN","VAFHLZE1",14,0)
 ;Output: VAFHLZEL(SeqNum) = Value
"RTN","VAFHLZE1",15,0)
 ;
"RTN","VAFHLZE1",16,0)
 ;Notes: VAFHLZEL is initialized (KILLed) on entry
"RTN","VAFHLZE1",17,0)
 ;     : If not passed, sequence 1 (Set ID) will have a value of '1'
"RTN","VAFHLZE1",18,0)
 ;       if getting data for the primary eligibility and '2' if getting
"RTN","VAFHLZE1",19,0)
 ;       data for other eligibility
"RTN","VAFHLZE1",20,0)
 ;     : All requested fields will be returned with the primary
"RTN","VAFHLZE1",21,0)
 ;       eligibility.  The Set ID (seq 1), eligibility code (seq 2)
"RTN","VAFHLZE1",22,0)
 ;       long ID (seq 3), and short ID (seq 4) will be the only fields
"RTN","VAFHLZE1",23,0)
 ;       returned for all other eligibilities.
"RTN","VAFHLZE1",24,0)
 ;
"RTN","VAFHLZE1",25,0)
 N PRIME,VAF,VAFMST,X
"RTN","VAFHLZE1",26,0)
 K VAFHLZEL
"RTN","VAFHLZE1",27,0)
 ;If true, primary eligibility (return all fields)
"RTN","VAFHLZE1",28,0)
 S PRIME=+VAFNODE=+VAFPELIG
"RTN","VAFHLZE1",29,0)
 ;Set ID
"RTN","VAFHLZE1",30,0)
 I VAFSTR[",1," S VAFHLZEL(1)=$S($G(VAFSETID):VAFSETID,PRIME:1,1:2)
"RTN","VAFHLZE1",31,0)
 ;Eligibility Code
"RTN","VAFHLZE1",32,0)
 I VAFSTR[",2," S X=$P($G(^DIC(8,+VAFNODE,0)),"^",9),VAFHLZEL(2)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",33,0)
 ;Long ID
"RTN","VAFHLZE1",34,0)
 I VAFSTR[",3," S X=$P(VAFNODE,"^",3),VAFHLZEL(3)=$S(X]"":$$M10^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",35,0)
 ;Short ID
"RTN","VAFHLZE1",36,0)
 I VAFSTR[",4," S X=$P(VAFNODE,"^",4),VAFHLZEL(4)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",37,0)
 ;Done if not getting primary eligibility information
"RTN","VAFHLZE1",38,0)
 I 'PRIME D  Q
"RTN","VAFHLZE1",39,0)
 .N Y,Z
"RTN","VAFHLZE1",40,0)
 .S Y=$L(VAFSTR,",")
"RTN","VAFHLZE1",41,0)
 .F X=1:1:Y S Z=$P(VAFSTR,",",X) I Z S:(Z>4) VAFHLZEL(Z)=HLQ
"RTN","VAFHLZE1",42,0)
 ;Get needed nodes in Patient file (#2)
"RTN","VAFHLZE1",43,0)
 N VAF
"RTN","VAFHLZE1",44,0)
 F X=.3,.31,.321,.322,.362,.361 S VAF(X)=$G(^DPT(DFN,X))
"RTN","VAFHLZE1",45,0)
 ;Disability ret. from military code
"RTN","VAFHLZE1",46,0)
 I VAFSTR[",5," S X=$P(VAFPELIG,"^",2),VAFHLZEL(5)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",47,0)
 ;Claim Number
"RTN","VAFHLZE1",48,0)
 I VAFSTR[",6," S X=$P(VAF(.31),"^",3),VAFHLZEL(6)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",49,0)
 ;Claim Folder Loc
"RTN","VAFHLZE1",50,0)
 I VAFSTR[",7," S X=$P(VAF(.31),"^",2),VAFHLZEL(7)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",51,0)
 ;Veteran?
"RTN","VAFHLZE1",52,0)
 I VAFSTR[",8," S X=$P($G(^DPT(DFN,"VET")),"^"),VAFHLZEL(8)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",53,0)
 ;Type
"RTN","VAFHLZE1",54,0)
 I VAFSTR[",9," S X=$P($G(^DG(391,+$P($G(^DPT(DFN,"TYPE")),"^"),0)),"^"),VAFHLZEL(9)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",55,0)
 ;Elig Status
"RTN","VAFHLZE1",56,0)
 I VAFSTR[10 S X=$P(VAF(.361),"^",1),VAFHLZEL(10)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",57,0)
 ;Elig Status Date
"RTN","VAFHLZE1",58,0)
 I VAFSTR[11 S X=$P(VAF(.361),"^",2),VAFHLZEL(11)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",59,0)
 ;Elig Interim Response
"RTN","VAFHLZE1",60,0)
 I VAFSTR[12 S X=$P(VAF(.361),"^",4),VAFHLZEL(12)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",61,0)
 ;Elig Verif. Method
"RTN","VAFHLZE1",62,0)
 I VAFSTR[13 S X=$P(VAF(.361),"^",5),VAFHLZEL(13)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",63,0)
 ;Rec A&A Benefits?
"RTN","VAFHLZE1",64,0)
 I VAFSTR[14 S X=$P(VAF(.362),"^",12),VAFHLZEL(14)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",65,0)
 ;Rec Housebound Benefits?
"RTN","VAFHLZE1",66,0)
 I VAFSTR[15 S X=$P(VAF(.362),"^",13),VAFHLZEL(15)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",67,0)
 ;Rec VA Pension?
"RTN","VAFHLZE1",68,0)
 I VAFSTR[16 S X=$P(VAF(.362),"^",14),VAFHLZEL(16)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",69,0)
 ;Rec VA Disability?
"RTN","VAFHLZE1",70,0)
 I VAFSTR[17 S X=$P(VAF(.3),"^",11),VAFHLZEL(17)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",71,0)
 ;Agent Orange Expos. Indicated?
"RTN","VAFHLZE1",72,0)
 I VAFSTR[18 S X=$P(VAF(.321),"^",2),VAFHLZEL(18)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",73,0)
 ;Radiation Expos. Indicated?
"RTN","VAFHLZE1",74,0)
 I VAFSTR[19 S X=$P(VAF(.321),"^",3),VAFHLZEL(19)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",75,0)
 ;Environmental Contaminants?
"RTN","VAFHLZE1",76,0)
 I VAFSTR[20 S X=$P(VAF(.322),"^",13),VAFHLZEL(20)=$S(X]"":$$YN^VAFHLFNC(X),1:HLQ)
"RTN","VAFHLZE1",77,0)
 ;Total Annual VA Check Amount
"RTN","VAFHLZE1",78,0)
 I VAFSTR[21 S X=$P(VAF(.362),"^",20),VAFHLZEL(21)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",79,0)
 ;Radiation Exposure Method
"RTN","VAFHLZE1",80,0)
 I (VAFSTR[22) D
"RTN","VAFHLZE1",81,0)
 .S X=$P(VAF(.321),"^",12)
"RTN","VAFHLZE1",82,0)
 .S:(X="")!($L(X)>1) X=HLQ
"RTN","VAFHLZE1",83,0)
 .S:(X'=HLQ) X=$TR(X,"NTB","234")
"RTN","VAFHLZE1",84,0)
 .S VAFHLZEL(22)=X
"RTN","VAFHLZE1",85,0)
 ;Call MST status API
"RTN","VAFHLZE1",86,0)
 S VAFMST=$$GETSTAT^DGMSTAPI(DFN,$G(VAFMSTDT))
"RTN","VAFHLZE1",87,0)
 I $P(VAFMST,"^",1)<0 D  I 1
"RTN","VAFHLZE1",88,0)
 .F J=23,24,25 I VAFSTR[J S VAFHLZEL(J)=HLQ
"RTN","VAFHLZE1",89,0)
 E  D
"RTN","VAFHLZE1",90,0)
 .;Current MST status
"RTN","VAFHLZE1",91,0)
 .I VAFSTR[23 S X=$P(VAFMST,"^",2),VAFHLZEL(23)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",92,0)
 .;MST status change date
"RTN","VAFHLZE1",93,0)
 .I VAFSTR[24 S X=$P(VAFMST,"^",3),VAFHLZEL(24)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",94,0)
 .;Site determining MST status
"RTN","VAFHLZE1",95,0)
 .I VAFSTR[25 S X=$P(VAFMST,"^",7) S X=$$GET1^DIQ(4,(+X)_",",99) S VAFHLZEL(25)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",96,0)
 ;Agent Orange Registration Date
"RTN","VAFHLZE1",97,0)
 I VAFSTR[26 S X=$P(VAF(.321),"^",7),VAFHLZEL(26)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",98,0)
 ;Agent Orange Exam Date
"RTN","VAFHLZE1",99,0)
 I VAFSTR[27 S X=$P(VAF(.321),"^",9),VAFHLZEL(27)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",100,0)
 ;Agent Orange Registration #
"RTN","VAFHLZE1",101,0)
 I VAFSTR[28 S X=$P(VAF(.321),"^",10),VAFHLZEL(28)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",102,0)
 ;Agent Orange Exposure Location
"RTN","VAFHLZE1",103,0)
 I VAFSTR[29 S X=$P(VAF(.321),"^",13),VAFHLZEL(29)=$S(X]"":X,$P(VAF(.321),U,2)="Y":"U",1:HLQ)
"RTN","VAFHLZE1",104,0)
 ;Radiation Registration Date
"RTN","VAFHLZE1",105,0)
 I VAFSTR[30 S X=$P(VAF(.321),"^",11),VAFHLZEL(30)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",106,0)
 ;Envir. Cont. Exam Date
"RTN","VAFHLZE1",107,0)
 I VAFSTR[31 S X=$P(VAF(.322),"^",15),VAFHLZEL(31)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",108,0)
 ;Envir. Cont. Registration date
"RTN","VAFHLZE1",109,0)
 I VAFSTR[32 S X=$P(VAF(.322),"^",14),VAFHLZEL(32)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",110,0)
 ;Monetary Ben. Verify Date
"RTN","VAFHLZE1",111,0)
 I VAFSTR[33 S X=$P(VAF(.3),"^",6),VAFHLZEL(33)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",112,0)
 ;User Enrollee Valid Through
"RTN","VAFHLZE1",113,0)
 I VAFSTR[34 S X=$P(VAF(.361),"^",7),VAFHLZEL(34)=$S(X]"":$$HLDATE^HLFNC(X),1:HLQ)
"RTN","VAFHLZE1",114,0)
 ;User Enrollee Site
"RTN","VAFHLZE1",115,0)
 I VAFSTR[35 S X=$P(VAF(.361),"^",8),X=$$GET1^DIQ(4,+X,99),VAFHLZEL(35)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZE1",116,0)
 ;Done
"RTN","VAFHLZE1",117,0)
 Q
"UP",43,43.03,-1)
43^MT
"UP",43,43.03,0)
43.03
"VER")
8.0^22
"^DD",2,2,.3617,0)
USER ENROLLEE VALID THROUGH^DX^^.361;7^S %DT="E" D ^%DT S X=$E(Y,1,3)_"0000" K:Y<1 X
"^DD",2,2,.3617,3)
Enter valid Fiscal Year
"^DD",2,2,.3617,21,0)
^.001^3^3^3030313^^
"^DD",2,2,.3617,21,1,0)
This field contains the Fiscal Year that the veteran's User Enrollee 
"^DD",2,2,.3617,21,2,0)
Status is valid through. This field is populated by the system, no user 
"^DD",2,2,.3617,21,3,0)
input is required.
"^DD",2,2,.3617,"DT")
3030313
"^DD",2,2,.3618,0)
USER ENROLLEE SITE^P4'^DIC(4,^.361;8^Q
"^DD",2,2,.3618,3)
Enter Valid Site
"^DD",2,2,.3618,21,0)
^^3^3^3030225^
"^DD",2,2,.3618,21,1,0)
This field contains the Site that determined the User Enrollee 
"^DD",2,2,.3618,21,2,0)
information for the Veteran. This field is populated by the system, no 
"^DD",2,2,.3618,21,3,0)
user input is required.
"^DD",2,2,.3618,"DT")
3030225
"^DD",43,43.03,2,0)
MT COPAY EXEMPT VET INCOME^NJ8,2^^0;2^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99000)!(X<0) X
"^DD",43,43.03,2,3)
Type a Dollar Amount between 0 and 99000, 2 Decimal Digits
"^DD",43,43.03,2,21,0)
^^4^4^3030228^
"^DD",43,43.03,2,21,1,0)
Enter in this field the threshold for MT COPAY EXEMPT.  This amount
"^DD",43,43.03,2,21,2,0)
represents the income level for the previous calendar year.  This
"^DD",43,43.03,2,21,3,0)
amount plus any additional amounts for dependents represents the
"^DD",43,43.03,2,21,4,0)
income level under which the veteran will be placed in MT COPAY EXEMPT.
"^DD",43,43.03,2,"DT")
3030228
"^DD",43,43.03,3,0)
MT COPAY EXEMPT 1ST DEP INCOME^NJ8,2^^0;3^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99000)!(X<0) X
"^DD",43,43.03,3,.1)

"^DD",43,43.03,3,3)
Type a Dollar Amount between 0 and 99000, 2 Decimal Digits
"^DD",43,43.03,3,21,0)
^.001^3^3^3030228^^^^
"^DD",43,43.03,3,21,1,0)
Enter in this field the first dependent income increment.  This
"^DD",43,43.03,3,21,2,0)
amount represents the additional amount of income for the first
"^DD",43,43.03,3,21,3,0)
dependent for this category.
"^DD",43,43.03,3,"DT")
3030228
"^DD",43,43.03,4,0)
MT COPAY EXEMPT INCOME PER DEP^NJ8,2^^0;4^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99000)!(X<0) X
"^DD",43,43.03,4,3)
Type a Dollar Amount between 0 and 99000, 2 Decimal Digits
"^DD",43,43.03,4,21,0)
^.001^3^3^3030228^^^^
"^DD",43,43.03,4,21,1,0)
Enter in this field the income increment for each dependent
"^DD",43,43.03,4,21,2,0)
after the first.  This amount represents the additional amount
"^DD",43,43.03,4,21,3,0)
of income for each dependent after the first for this category.
"^DD",43,43.03,4,"DT")
3030228
**INSTALL NAME**
IVM*2.0*75
"BLD",4198,0)
IVM*2.0*75^INCOME VERIFICATION MATCH^0^3030623^y
"BLD",4198,1,0)
^^1^1^3030305^
"BLD",4198,1,1,0)
GEOGRAPHIC MEANS TESTING - PHASE II
"BLD",4198,4,0)
^9.64PA^^
"BLD",4198,"ABPKG")
n
"BLD",4198,"KRN",0)
^9.67PA^8989.52^19
"BLD",4198,"KRN",.4,0)
.4
"BLD",4198,"KRN",.401,0)
.401
"BLD",4198,"KRN",.402,0)
.402
"BLD",4198,"KRN",.403,0)
.403
"BLD",4198,"KRN",.5,0)
.5
"BLD",4198,"KRN",.84,0)
.84
"BLD",4198,"KRN",3.6,0)
3.6
"BLD",4198,"KRN",3.8,0)
3.8
"BLD",4198,"KRN",9.2,0)
9.2
"BLD",4198,"KRN",9.8,0)
9.8
"BLD",4198,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",4198,"KRN",9.8,"NM",1,0)
IVMPTRN8^^0^B49278097
"BLD",4198,"KRN",9.8,"NM","B","IVMPTRN8",1)

"BLD",4198,"KRN",19,0)
19
"BLD",4198,"KRN",19.1,0)
19.1
"BLD",4198,"KRN",101,0)
101
"BLD",4198,"KRN",409.61,0)
409.61
"BLD",4198,"KRN",771,0)
771
"BLD",4198,"KRN",870,0)
870
"BLD",4198,"KRN",8989.51,0)
8989.51
"BLD",4198,"KRN",8989.52,0)
8989.52
"BLD",4198,"KRN",8994,0)
8994
"BLD",4198,"KRN","B",.4,.4)

"BLD",4198,"KRN","B",.401,.401)

"BLD",4198,"KRN","B",.402,.402)

"BLD",4198,"KRN","B",.403,.403)

"BLD",4198,"KRN","B",.5,.5)

"BLD",4198,"KRN","B",.84,.84)

"BLD",4198,"KRN","B",3.6,3.6)

"BLD",4198,"KRN","B",3.8,3.8)

"BLD",4198,"KRN","B",9.2,9.2)

"BLD",4198,"KRN","B",9.8,9.8)

"BLD",4198,"KRN","B",19,19)

"BLD",4198,"KRN","B",19.1,19.1)

"BLD",4198,"KRN","B",101,101)

"BLD",4198,"KRN","B",409.61,409.61)

"BLD",4198,"KRN","B",771,771)

"BLD",4198,"KRN","B",870,870)

"BLD",4198,"KRN","B",8989.51,8989.51)

"BLD",4198,"KRN","B",8989.52,8989.52)

"BLD",4198,"KRN","B",8994,8994)

"BLD",4198,"QUES",0)
^9.62^^
"BLD",4198,"REQB",0)
^9.611^1^1
"BLD",4198,"REQB",1,0)
IVM*2.0*76^2
"BLD",4198,"REQB","B","IVM*2.0*76",1)

"MBREQ")
0
"PKG",220,-1)
1^1
"PKG",220,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
2.0^2941021
"PKG",220,22,1,"PAH",1,0)
75^3030623^100881
"PKG",220,22,1,"PAH",1,1,0)
^^1^1^3030623
"PKG",220,22,1,"PAH",1,1,1,0)
GEOGRAPHIC MEANS TESTING - PHASE II
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","IVMPTRN8")
0^1^B49278097
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ/BRM/TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 6/23/03 10:39am
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77,76,75**; 21-OCT-94
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH,IVMSEQ
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 S IVMSEQ="3,5,7,8,11,12,13,14,19"
"RTN","IVMPTRN8",54,0)
 ; do not transmit seq 11 and 12 if the Bad Address Indicator is set
"RTN","IVMPTRN8",55,0)
 S:$$BADADR^DGUTL3(DFN) IVMSEQ="3,5,7,8,13,14,19"
"RTN","IVMPTRN8",56,0)
 S IVMPID=$$EN^VAFHLPID(DFN,"1,"_IVMSEQ)        ;add SEQ 1 for PID
"RTN","IVMPTRN8",57,0)
 ;
"RTN","IVMPTRN8",58,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",59,0)
 S IVMCMOR="1,2"
"RTN","IVMPTRN8",60,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",61,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",62,0)
 .I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMPID=$$EN^VAFCPID(DFN,"1,2,"_IVMSEQ),IVMCMOR="1,2,3"  ;add SEQ 1 and 2 for PID
"RTN","IVMPTRN8",63,0)
 ;
"RTN","IVMPTRN8",64,0)
 I $D(VAFPID(1)) S IVMPID(1)=VAFPID(1)
"RTN","IVMPTRN8",65,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",66,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",67,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID
"RTN","IVMPTRN8",68,0)
 I $D(IVMPID(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(1)
"RTN","IVMPTRN8",69,0)
 ;
"RTN","IVMPTRN8",70,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",71,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",72,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",73,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",74,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",75,0)
 ;
"RTN","IVMPTRN8",76,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",77,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",78,0)
 ;
"RTN","IVMPTRN8",79,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",80,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",81,0)
 ;
"RTN","IVMPTRN8",82,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",83,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",84,0)
 ;
"RTN","IVMPTRN8",85,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",86,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",87,0)
 D EN1^VAFHLZEL(DFN,"1,2,5,6,7,10,11,13,14,15,16,17,18,19,20,21,23,24,25,34,35",2,.VAFZEL)
"RTN","IVMPTRN8",88,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1))  ; Primary Eligibility
"RTN","IVMPTRN8",89,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",90,0)
 F IVMSUB=1:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",91,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",92,0)
 ;
"RTN","IVMPTRN8",93,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",94,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",95,0)
 ;
"RTN","IVMPTRN8",96,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",97,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",98,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",99,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",100,0)
 ;
"RTN","IVMPTRN8",101,0)
 ; Optionally create (ZMH) Military History segment for Purple Heart
"RTN","IVMPTRN8",102,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH","13")
"RTN","IVMPTRN8",103,0)
 I $P(IVMZMH(1,0),HLFS,3)="PH","YN"[$E($P(IVMZMH(1,0),HLFS,4)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMZMH(1,0)
"RTN","IVMPTRN8",104,0)
 ;
"RTN","IVMPTRN8",105,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",106,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",107,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",108,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",109,0)
 ;
"RTN","IVMPTRN8",110,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",111,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",112,0)
 ;
"RTN","IVMPTRN8",113,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",114,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",115,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",116,0)
 ;
"RTN","IVMPTRN8",117,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",118,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",119,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",120,0)
 ;
"RTN","IVMPTRN8",121,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",122,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",123,0)
 ;
"RTN","IVMPTRN8",124,0)
 ; The following function call returns:
"RTN","IVMPTRN8",125,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",126,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",127,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",128,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",129,0)
 ;
"RTN","IVMPTRN8",130,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",131,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",132,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",133,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",134,0)
 I $P(^TMP("HLS",$J,IVMCT),"^",3)=HLQ S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC($E(IVMMTDT,1,3)-1_"0000")
"RTN","IVMPTRN8",135,0)
 ;
"RTN","IVMPTRN8",136,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",137,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",138,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",139,0)
 ;
"RTN","IVMPTRN8",140,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",141,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9")
"RTN","IVMPTRN8",142,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",143,0)
 .; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",144,0)
 .S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",145,0)
 ;
"RTN","IVMPTRN8",146,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",147,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",148,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",149,0)
 ;
"RTN","IVMPTRN8",150,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",151,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",152,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",153,0)
 ;
"RTN","IVMPTRN8",154,0)
 ;
"RTN","IVMPTRN8",155,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",156,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",157,0)
 .;
"RTN","IVMPTRN8",158,0)
 .; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",159,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9")
"RTN","IVMPTRN8",160,0)
 .I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",161,0)
 ..; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",162,0)
 ..S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",163,0)
 .;
"RTN","IVMPTRN8",164,0)
 .; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",165,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",166,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",167,0)
 .;
"RTN","IVMPTRN8",168,0)
 .; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",169,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9")
"RTN","IVMPTRN8",170,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",171,0)
 .; 
"RTN","IVMPTRN8",172,0)
 ;
"RTN","IVMPTRN8",173,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN8",174,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)
"RTN","IVMPTRN8",175,0)
 ;
"RTN","IVMPTRN8",176,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN8",177,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN8",178,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN8",179,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN8",180,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN8",181,0)
 .; - get notes and comments
"RTN","IVMPTRN8",182,0)
 .F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",183,0)
 ..S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN8",184,0)
 ;
"RTN","IVMPTRN8",185,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN8",186,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN8",187,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN8",188,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",189,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN8",190,0)
 ;
"RTN","IVMPTRN8",191,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",192,0)
 Q
"VER")
8.0^22
**INSTALL NAME**
FB*3.5*54
"BLD",4195,0)
FB*3.5*54^FEE BASIS^0^3030623^y
"BLD",4195,1,0)
^^1^1^3030228^
"BLD",4195,1,1,0)
GMT2 MODIFICATIONS FOR FEE BASIS
"BLD",4195,4,0)
^9.64PA^161^1
"BLD",4195,4,161,0)
161
"BLD",4195,4,161,2,0)
^9.641^161.01^1
"BLD",4195,4,161,2,161.01,0)
AUTHORIZATION  (sub-file)
"BLD",4195,4,161,2,161.01,1,0)
^9.6411^.02^1
"BLD",4195,4,161,2,161.01,1,.02,0)
TO DATE
"BLD",4195,4,161,222)
y^n^p^^^^n
"BLD",4195,4,"APDD",161,161.01)

"BLD",4195,4,"APDD",161,161.01,.02)

"BLD",4195,4,"B",161,161)

"BLD",4195,"INIT")
EN^FBXIP54
"BLD",4195,"KRN",0)
^9.67PA^8989.52^19
"BLD",4195,"KRN",.4,0)
.4
"BLD",4195,"KRN",.401,0)
.401
"BLD",4195,"KRN",.402,0)
.402
"BLD",4195,"KRN",.403,0)
.403
"BLD",4195,"KRN",.5,0)
.5
"BLD",4195,"KRN",.84,0)
.84
"BLD",4195,"KRN",3.6,0)
3.6
"BLD",4195,"KRN",3.8,0)
3.8
"BLD",4195,"KRN",9.2,0)
9.2
"BLD",4195,"KRN",9.8,0)
9.8
"BLD",4195,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",4195,"KRN",9.8,"NM",1,0)
FBGMT2^^0^B732351
"BLD",4195,"KRN",9.8,"NM",2,0)
FBXIP54^^0^B599460
"BLD",4195,"KRN",9.8,"NM","B","FBGMT2",1)

"BLD",4195,"KRN",9.8,"NM","B","FBXIP54",2)

"BLD",4195,"KRN",19,0)
19
"BLD",4195,"KRN",19.1,0)
19.1
"BLD",4195,"KRN",101,0)
101
"BLD",4195,"KRN",409.61,0)
409.61
"BLD",4195,"KRN",771,0)
771
"BLD",4195,"KRN",870,0)
870
"BLD",4195,"KRN",8989.51,0)
8989.51
"BLD",4195,"KRN",8989.52,0)
8989.52
"BLD",4195,"KRN",8994,0)
8994
"BLD",4195,"KRN","B",.4,.4)

"BLD",4195,"KRN","B",.401,.401)

"BLD",4195,"KRN","B",.402,.402)

"BLD",4195,"KRN","B",.403,.403)

"BLD",4195,"KRN","B",.5,.5)

"BLD",4195,"KRN","B",.84,.84)

"BLD",4195,"KRN","B",3.6,3.6)

"BLD",4195,"KRN","B",3.8,3.8)

"BLD",4195,"KRN","B",9.2,9.2)

"BLD",4195,"KRN","B",9.8,9.8)

"BLD",4195,"KRN","B",19,19)

"BLD",4195,"KRN","B",19.1,19.1)

"BLD",4195,"KRN","B",101,101)

"BLD",4195,"KRN","B",409.61,409.61)

"BLD",4195,"KRN","B",771,771)

"BLD",4195,"KRN","B",870,870)

"BLD",4195,"KRN","B",8989.51,8989.51)

"BLD",4195,"KRN","B",8989.52,8989.52)

"BLD",4195,"KRN","B",8994,8994)

"BLD",4195,"QUES",0)
^9.62^^
"BLD",4195,"REQB",0)
^9.611^1^1
"BLD",4195,"REQB",1,0)
FB*3.5*14^2
"BLD",4195,"REQB","B","FB*3.5*14",1)

"FIA",161)
FEE BASIS PATIENT
"FIA",161,0)
^FBAAA(
"FIA",161,0,0)
161P
"FIA",161,0,1)
y^n^p^^^^n
"FIA",161,0,10)

"FIA",161,0,11)

"FIA",161,0,"RLRO")

"FIA",161,0,"VR")
3.5^FB
"FIA",161,161)
1
"FIA",161,161.01)
1
"FIA",161,161.01,.02)

"INIT")
EN^FBXIP54
"MBREQ")
0
"PKG",60,-1)
1^1
"PKG",60,0)
FEE BASIS^FB^Used to pay private vendors
"PKG",60,20,0)
^9.402P^1^1
"PKG",60,20,1,0)
2^^FBPMRG
"PKG",60,20,1,1)

"PKG",60,20,"B",2,1)

"PKG",60,22,0)
^9.49I^1^1
"PKG",60,22,1,0)
3.5^2950130^2950313
"PKG",60,22,1,"PAH",1,0)
54^3030623^100881
"PKG",60,22,1,"PAH",1,1,0)
^^1^1^3030623
"PKG",60,22,1,"PAH",1,1,1,0)
GMT2 MODIFICATIONS FOR FEE BASIS
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","FBGMT2")
0^1^B732351
"RTN","FBGMT2",1,0)
FBGMT2 ;WOIFO/SS-FEE BASIS PORTION OF GMT2 ;2/27/03
"RTN","FBGMT2",2,0)
 ;;3.5;FEE BASIS;**54**;JAN 30, 1995
"RTN","FBGMT2",3,0)
 ;
"RTN","FBGMT2",4,0)
 Q
"RTN","FBGMT2",5,0)
 ;Check for Fee basis encounters
"RTN","FBGMT2",6,0)
 ;
"RTN","FBGMT2",7,0)
 ;function returns 0 or the date in File Man format. 
"RTN","FBGMT2",8,0)
 ;"0" return value indicates that there is no any authorization 
"RTN","FBGMT2",9,0)
 ;for this patient in Fee Basis. Otherwise the return value is 
"RTN","FBGMT2",10,0)
 ;the TO DATE of Fee Basis authorization for the patient. If 
"RTN","FBGMT2",11,0)
 ;the patient has more than one authorization then return value 
"RTN","FBGMT2",12,0)
 ;will contain the TO DATE of the authorization with the latest 
"RTN","FBGMT2",13,0)
 ;TO DATE for the patient.
"RTN","FBGMT2",14,0)
AUTH(FBDFN) ;
"RTN","FBGMT2",15,0)
 N FBDATE,FBNODE,FBTDATE
"RTN","FBGMT2",16,0)
 S (FBDATE,FBNODE)=0
"RTN","FBGMT2",17,0)
 F  S FBNODE=$O(^FBAAA(FBDFN,1,FBNODE)) Q:+FBNODE=0  D
"RTN","FBGMT2",18,0)
 . S FBTDATE=$P($G(^FBAAA(FBDFN,1,FBNODE,0)),"^",2)
"RTN","FBGMT2",19,0)
 . I FBTDATE>FBDATE S FBDATE=FBTDATE
"RTN","FBGMT2",20,0)
 Q FBDATE
"RTN","FBGMT2",21,0)
 ;
"RTN","FBGMT2",22,0)
 ;called from crossref of field #.02 of #161.01 to notify
"RTN","FBGMT2",23,0)
 ;Enrollment about change of TODATE of patient's authorization
"RTN","FBGMT2",24,0)
 ;sends patient's IEN and TODATE of the authorization with the 
"RTN","FBGMT2",25,0)
 ;latest TODATE (see IA #3989)
"RTN","FBGMT2",26,0)
ENRLLMNT(FBDFN) ;
"RTN","FBGMT2",27,0)
 N FBTODT S FBTODT=$$AUTH(FBDFN)
"RTN","FBGMT2",28,0)
 D:FBTODT>0 FBAUTH^EASUER(FBDFN,FBTODT)
"RTN","FBGMT2",29,0)
 Q
"RTN","FBGMT2",30,0)
 ;
"RTN","FBXIP54")
0^2^B599460
"RTN","FBXIP54",1,0)
FBXIP54 ;WOIFO/SS-PATCH INSTALL ROUTINE ;5/24/03
"RTN","FBXIP54",2,0)
 ;;3.5;FEE BASIS;**54**;JAN 30, 1995
"RTN","FBXIP54",3,0)
 ;File #161 input template compilation routine
"RTN","FBXIP54",4,0)
 Q  ;stub
"RTN","FBXIP54",5,0)
EN ;entry point for post-install routine
"RTN","FBXIP54",6,0)
 ;re-compile template
"RTN","FBXIP54",7,0)
 N DMAX,FBX,Y,X,FBMAX
"RTN","FBXIP54",8,0)
 D BMES^XPDUTL("Recompilation of [FBAA AUTHORIZATION] Input Template:")
"RTN","FBXIP54",9,0)
 S FBMAX=^DD("ROU")
"RTN","FBXIP54",10,0)
 S FBX="FBAA AUTHORIZATION"
"RTN","FBXIP54",11,0)
 S Y=$O(^DIE("B",FBX,0)) Q:'Y
"RTN","FBXIP54",12,0)
 I $D(^DIE(Y,"ROUOLD")),^("ROUOLD")]"",$D(^(0)) D
"RTN","FBXIP54",13,0)
 . S X=$P(^("ROUOLD"),"^"),DMAX=FBMAX
"RTN","FBXIP54",14,0)
 . D EN^DIEZ
"RTN","FBXIP54",15,0)
 Q
"RTN","FBXIP54",16,0)
 ;
"UP",161,161.01,-1)
161^1
"UP",161,161.01,0)
161.01
"VER")
8.0^22
"^DD",161,161.01,.02,0)
TO DATE^RDX^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X I $D(X),$P(^FBAAA(DA(1),1,DA,0),U,1)>X K X W !!,"To Date cannot be earlier than From Date!",!
"^DD",161,161.01,.02,1,0)
^.1
"^DD",161,161.01,.02,1,1,0)
161^AENR02^MUMPS
"^DD",161,161.01,.02,1,1,1)
D:'$D(DIU(0)) EVENT^IVMPLOG(DA(1)),ENRLLMNT^FBGMT2(DA(1))
"^DD",161,161.01,.02,1,1,2)
Q
"^DD",161,161.01,.02,1,1,"%D",0)
^.101^1^1^3030305^^^^
"^DD",161,161.01,.02,1,1,"%D",1,0)
Notify HEC and Enrollment of changes to FEE Authorization.
"^DD",161,161.01,.02,1,1,"DT")
3030228
"^DD",161,161.01,.02,21,0)
^^4^4^2930603^^^^
"^DD",161,161.01,.02,21,1,0)
The date through which the veteran may obtain services from private vendors,
"^DD",161,161.01,.02,21,2,0)
and which the VA will reimburse. For every claim submitted by a vendor,
"^DD",161,161.01,.02,21,3,0)
this date is compared with the date the service was provided, and 
"^DD",161,161.01,.02,21,4,0)
service date must be on or before this date.
"^DD",161,161.01,.02,"DT")
3030228
**INSTALL NAME**
EAS*1.0*25
"BLD",4219,0)
EAS*1.0*25^ENROLLMENT APPLICATION SYSTEM^0^3030623^y
"BLD",4219,4,0)
^9.64PA^^
"BLD",4219,"ABPKG")
n
"BLD",4219,"INID")
n^n^n
"BLD",4219,"INIT")
EP^EAS25UEI
"BLD",4219,"KRN",0)
^9.67PA^8989.52^19
"BLD",4219,"KRN",.4,0)
.4
"BLD",4219,"KRN",.401,0)
.401
"BLD",4219,"KRN",.402,0)
.402
"BLD",4219,"KRN",.403,0)
.403
"BLD",4219,"KRN",.5,0)
.5
"BLD",4219,"KRN",.84,0)
.84
"BLD",4219,"KRN",3.6,0)
3.6
"BLD",4219,"KRN",3.8,0)
3.8
"BLD",4219,"KRN",9.2,0)
9.2
"BLD",4219,"KRN",9.8,0)
9.8
"BLD",4219,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",4219,"KRN",9.8,"NM",1,0)
EASMTL6^^0^B66329935
"BLD",4219,"KRN",9.8,"NM",2,0)
EAS25UEI^^0^B41422722
"BLD",4219,"KRN",9.8,"NM",3,0)
EASUER^^0^B13750596
"BLD",4219,"KRN",9.8,"NM","B","EAS25UEI",2)

"BLD",4219,"KRN",9.8,"NM","B","EASMTL6",1)

"BLD",4219,"KRN",9.8,"NM","B","EASUER",3)

"BLD",4219,"KRN",19,0)
19
"BLD",4219,"KRN",19.1,0)
19.1
"BLD",4219,"KRN",101,0)
101
"BLD",4219,"KRN",101,"NM",0)
^9.68A^7^6
"BLD",4219,"KRN",101,"NM",2,0)
EAS UE PCE EVENT^^0
"BLD",4219,"KRN",101,"NM",3,0)
PXK VISIT DATA EVENT^^2
"BLD",4219,"KRN",101,"NM",4,0)
EAS UE SCHED EVENT^^0
"BLD",4219,"KRN",101,"NM",5,0)
SDAM APPOINTMENT EVENTS^^2
"BLD",4219,"KRN",101,"NM",6,0)
EAS UE INP EVENT^^0
"BLD",4219,"KRN",101,"NM",7,0)
DGPM MOVEMENT EVENTS^^2
"BLD",4219,"KRN",101,"NM","B","DGPM MOVEMENT EVENTS",7)

"BLD",4219,"KRN",101,"NM","B","EAS UE INP EVENT",6)

"BLD",4219,"KRN",101,"NM","B","EAS UE PCE EVENT",2)

"BLD",4219,"KRN",101,"NM","B","EAS UE SCHED EVENT",4)

"BLD",4219,"KRN",101,"NM","B","PXK VISIT DATA EVENT",3)

"BLD",4219,"KRN",101,"NM","B","SDAM APPOINTMENT EVENTS",5)

"BLD",4219,"KRN",409.61,0)
409.61
"BLD",4219,"KRN",771,0)
771
"BLD",4219,"KRN",870,0)
870
"BLD",4219,"KRN",8989.51,0)
8989.51
"BLD",4219,"KRN",8989.52,0)
8989.52
"BLD",4219,"KRN",8994,0)
8994
"BLD",4219,"KRN","B",.4,.4)

"BLD",4219,"KRN","B",.401,.401)

"BLD",4219,"KRN","B",.402,.402)

"BLD",4219,"KRN","B",.403,.403)

"BLD",4219,"KRN","B",.5,.5)

"BLD",4219,"KRN","B",.84,.84)

"BLD",4219,"KRN","B",3.6,3.6)

"BLD",4219,"KRN","B",3.8,3.8)

"BLD",4219,"KRN","B",9.2,9.2)

"BLD",4219,"KRN","B",9.8,9.8)

"BLD",4219,"KRN","B",19,19)

"BLD",4219,"KRN","B",19.1,19.1)

"BLD",4219,"KRN","B",101,101)

"BLD",4219,"KRN","B",409.61,409.61)

"BLD",4219,"KRN","B",771,771)

"BLD",4219,"KRN","B",870,870)

"BLD",4219,"KRN","B",8989.51,8989.51)

"BLD",4219,"KRN","B",8989.52,8989.52)

"BLD",4219,"KRN","B",8994,8994)

"BLD",4219,"QUES",0)
^9.62^^
"BLD",4219,"REQB",0)
^9.611^3^2
"BLD",4219,"REQB",1,0)
EAS*1.0*29^2
"BLD",4219,"REQB",3,0)
SD*5.3*275^2
"BLD",4219,"REQB","B","EAS*1.0*29",1)

"BLD",4219,"REQB","B","SD*5.3*275",3)

"INIT")
EP^EAS25UEI
"KRN",101,101,-1)
2^7
"KRN",101,101,0)
DGPM MOVEMENT EVENTS^MOVEMENT EVENTS v 5.0^^X^100881^^^^^^^REGISTRATION
"KRN",101,101,10,0)
^101.01PA^28^28
"KRN",101,101,10,28,0)
3578^^^
"KRN",101,101,10,28,"^")
EAS UE INP EVENT
"KRN",101,414,-1)
2^5
"KRN",101,414,0)
SDAM APPOINTMENT EVENTS^Appointment Event Driver^^X^100881^^^^^^^16
"KRN",101,414,10,0)
^101.01PA^17^17
"KRN",101,414,10,17,0)
3572^^^
"KRN",101,414,10,17,"^")
EAS UE SCHED EVENT
"KRN",101,1110,-1)
2^3
"KRN",101,1110,0)
PXK VISIT DATA EVENT^VISIT RELATED DATA^^X^100881^^^^^^^
"KRN",101,1110,10,0)
^101.01PA^3^3
"KRN",101,1110,10,3,0)
3571^^^
"KRN",101,1110,10,3,"^")
EAS UE PCE EVENT
"KRN",101,3571,-1)
0^2
"KRN",101,3571,0)
EAS UE PCE EVENT^EAS UE PCE EVENT^^A^^^^^^^^ENROLLMENT APPLICATION SYSTEM
"KRN",101,3571,1,0)
^^4^4^3030304^
"KRN",101,3571,1,1,0)
This Protocol is attached to multiple ITEM of PXK VISIT DATA EVENT 
"KRN",101,3571,1,2,0)
Protocol. This protocol will make enrollment call if any 
"KRN",101,3571,1,3,0)
inpatient/outpatient encounter occurs to determine Veteran's User 
"KRN",101,3571,1,4,0)
Enrollee status.
"KRN",101,3571,4)
^^^EAS UE
"KRN",101,3571,20)
D ENC^EASUER
"KRN",101,3571,99)
59309,69548
"KRN",101,3572,-1)
0^4
"KRN",101,3572,0)
EAS UE SCHED EVENT^EAS UE SCHED EVENT^^A^^^^^^^^ENROLLMENT APPLICATION SYSTEM
"KRN",101,3572,1,0)
^^3^3^3030304^
"KRN",101,3572,1,1,0)
This protocol is attached to multiple ITEM of SDAM APPOINTMENT EVENTS 
"KRN",101,3572,1,2,0)
protocol. This protocol will make a call to enrollment api if any 
"KRN",101,3572,1,3,0)
appointment made to determine Veteran's User Enrollee status.
"KRN",101,3572,4)
^^^EAS UE
"KRN",101,3572,20)
D SCHED^EASUER
"KRN",101,3572,99)
59309,69548
"KRN",101,3578,-1)
0^6
"KRN",101,3578,0)
EAS UE INP EVENT^EAS UE INP EVENT^^A^^^^^^^^ENROLLMENT APPLICATION SYSTEM
"KRN",101,3578,1,0)
^^3^3^3030320^
"KRN",101,3578,1,1,0)
This protocol attached as multiple item of protocol named DGPM MOVEMENT EVENTS.
"KRN",101,3578,1,2,0)
It will notify enrollment whenever veteran is admitted, transfered or
"KRN",101,3578,1,3,0)
discharged.
"KRN",101,3578,20)
D INP^EASUER
"KRN",101,3578,99)
59309,69548
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",551,-1)
1^1
"PKG",551,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",551,20,0)
^9.402P^1^1
"PKG",551,20,1,0)
2^^EASXDR
"PKG",551,20,1,1)
 
"PKG",551,20,"B",2,1)

"PKG",551,22,0)
^9.49I^1^1
"PKG",551,22,1,0)
1.0^3010315^3010516^66481
"PKG",551,22,1,"PAH",1,0)
25^3030623^100881
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","EAS25UEI")
0^2^B41422722
"RTN","EAS25UEI",1,0)
EAS25UEI ;ALB/CKN - GEOGRAPHIC MEANS TEST PHASE II ; 03-MAR-2003
"RTN","EAS25UEI",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**25**;Mar 15, 2001
"RTN","EAS25UEI",3,0)
 ;This post install routine will check inpatient/outpatient encounters,
"RTN","EAS25UEI",4,0)
 ;future appointments and fee basis authorizations to determine
"RTN","EAS25UEI",5,0)
 ;User Enrollee status for each Veteran in PATIENT(#2) file.
"RTN","EAS25UEI",6,0)
 ;User Enrollee data will be stored in PATIENT file and transmitted
"RTN","EAS25UEI",7,0)
 ;to HEC via Z07 HL7 messages.
"RTN","EAS25UEI",8,0)
 Q
"RTN","EAS25UEI",9,0)
EP ;Entry point
"RTN","EAS25UEI",10,0)
 N DONE,TXT
"RTN","EAS25UEI",11,0)
 ;create bulletin message in install file.
"RTN","EAS25UEI",12,0)
 S TXT(1)="The Post Install will now process through PATIENT (#2) file"
"RTN","EAS25UEI",13,0)
 S TXT(2)="to determine User Enrollee status for each Veteran by checking"
"RTN","EAS25UEI",14,0)
 S TXT(3)="inpatient/outpatient encounter for current fiscal year, any"
"RTN","EAS25UEI",15,0)
 S TXT(4)="future appointments and any fee basis authorizations."
"RTN","EAS25UEI",16,0)
 S TXT(5)=" "
"RTN","EAS25UEI",17,0)
 D BMES^XPDUTL(.TXT)
"RTN","EAS25UEI",18,0)
 ;check for completion of checkpoint, quit if checkpoint completed.
"RTN","EAS25UEI",19,0)
 ;create new checkpoint if necessary
"RTN","EAS25UEI",20,0)
 D CHECK Q:DONE
"RTN","EAS25UEI",21,0)
 D QUETASK
"RTN","EAS25UEI",22,0)
 Q
"RTN","EAS25UEI",23,0)
CHECK ;Initial checking
"RTN","EAS25UEI",24,0)
 N STAT,TASKNUM
"RTN","EAS25UEI",25,0)
 S DONE=0
"RTN","EAS25UEI",26,0)
 I '$D(^XTMP("EAS*1*25")) Q
"RTN","EAS25UEI",27,0)
 I $G(^XTMP("EAS*1*25","COMPLETED"))=1 D  Q
"RTN","EAS25UEI",28,0)
 . N MSG,XMDUZ,XMSUB,XMTEXT,XMY
"RTN","EAS25UEI",29,0)
 . S (XMDUZ,XMSUB)="USER ENROLLEE INITIAL DETERMINATION PROCESS"
"RTN","EAS25UEI",30,0)
 . S (XMY(.5),XMY(DUZ))="",XMTEXT="MSG("
"RTN","EAS25UEI",31,0)
 . S MSG(1)="User Enrollee initial determination process was completed in previous run."
"RTN","EAS25UEI",32,0)
 . S DONE=1 D ^XMD
"RTN","EAS25UEI",33,0)
 . D BMES^XPDUTL(.MSG)
"RTN","EAS25UEI",34,0)
 S TASKNUM=$G(^XTMP("EAS*1*25","TASK"))
"RTN","EAS25UEI",35,0)
 I TASKNUM'="" D
"RTN","EAS25UEI",36,0)
 . S STAT=$$ACTIVE(TASKNUM)
"RTN","EAS25UEI",37,0)
 . I STAT>0 D
"RTN","EAS25UEI",38,0)
 . . N MSG,XMDUZ,XMSUB,XMTEXT,XMY
"RTN","EAS25UEI",39,0)
 . . S (XMDUZ,XMSUB)="USER ENROLLEE INITIAL DETERMINATION PROCESS"
"RTN","EAS25UEI",40,0)
 . . S (XMY(.5),XMY(DUZ))="",XMTEXT="MSG("
"RTN","EAS25UEI",41,0)
 . . S MSG(1)="Task: "_TASKNUM_" is currently running User Enrollee determination"
"RTN","EAS25UEI",42,0)
 . . S MSG(2)="process. Duplicate process cannot be started."
"RTN","EAS25UEI",43,0)
 . . S DONE=1 D ^XMD
"RTN","EAS25UEI",44,0)
 . . D BMES^XPDUTL(.MSG)
"RTN","EAS25UEI",45,0)
 Q
"RTN","EAS25UEI",46,0)
ACTIVE(TASK) ;Checks if task is running or not
"RTN","EAS25UEI",47,0)
 ;  input  --  The taskman ID
"RTN","EAS25UEI",48,0)
 ;  output --  1=The task is running
"RTN","EAS25UEI",49,0)
 ;             0=The task is not running
"RTN","EAS25UEI",50,0)
 ;
"RTN","EAS25UEI",51,0)
 N ZTSK,STAT,Y
"RTN","EAS25UEI",52,0)
 S STAT=0,ZTSK=+TASK
"RTN","EAS25UEI",53,0)
 D STAT^%ZTLOAD
"RTN","EAS25UEI",54,0)
 S Y=ZTSK(1)
"RTN","EAS25UEI",55,0)
 I Y=0 S STAT=-1
"RTN","EAS25UEI",56,0)
 I ",1,2,"[(","_Y_",") S STAT=1
"RTN","EAS25UEI",57,0)
 I ",3,5,"[(","_Y_",") S STAT=0
"RTN","EAS25UEI",58,0)
 Q STAT
"RTN","EAS25UEI",59,0)
 ;
"RTN","EAS25UEI",60,0)
QUETASK ;Queue the task
"RTN","EAS25UEI",61,0)
 N TXT,ZTRTN,ZTDESC,ZTSK,ZTIO,ZTDTH
"RTN","EAS25UEI",62,0)
 S ZTRTN="EP1^EAS25UEI",ZTIO="",ZTDTH=$$NOW^XLFDT()
"RTN","EAS25UEI",63,0)
 S ZTDESC="USER ENROLLEE INITIAL DETERMINATION PROCESS"
"RTN","EAS25UEI",64,0)
 D ^%ZTLOAD S ^XTMP("EAS*1*25","TASK")=ZTSK
"RTN","EAS25UEI",65,0)
 S TXT(1)="Task: "_ZTSK_" Queued."
"RTN","EAS25UEI",66,0)
 D BMES^XPDUTL(.TXT)
"RTN","EAS25UEI",67,0)
 Q
"RTN","EAS25UEI",68,0)
EP1 ;Entry point
"RTN","EAS25UEI",69,0)
 N X,X1,X2,BDT,FDT,UEST,CNT,TXT,XIEN,TOT,ZTSTOP
"RTN","EAS25UEI",70,0)
 S ZTSTOP=0
"RTN","EAS25UEI",71,0)
 S XIEN=+$G(^XTMP("EAS*1*25","CURRENT IEN"))
"RTN","EAS25UEI",72,0)
 S X1=DT,X2=60 D C^%DTC
"RTN","EAS25UEI",73,0)
 S ^XTMP("EAS*1*25",0)=X_"^"_$$DT^XLFDT_"^EAS*1*25 GMT PHASE II-UE POST INSTALL"
"RTN","EAS25UEI",74,0)
 ;store start date
"RTN","EAS25UEI",75,0)
 I '$D(^XTMP("EAS*1*25","DATE")) S $P(^XTMP("EAS*1*25","DATE"),"^",1)=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","EAS25UEI",76,0)
 S TOT=$P($G(^XTMP("EAS*1*25",1)),"^"),CNT=$P($G(^XTMP("EAS*1*25",1)),"^",2)
"RTN","EAS25UEI",77,0)
 ;Loop through Patient file (#2)
"RTN","EAS25UEI",78,0)
 F  S XIEN=$O(^DPT(XIEN)) Q:+XIEN=0!(ZTSTOP)  D
"RTN","EAS25UEI",79,0)
 . S TOT=TOT+1  ;processed records counter
"RTN","EAS25UEI",80,0)
 . S ^XTMP("EAS*1*25","CURRENT IEN")=XIEN
"RTN","EAS25UEI",81,0)
 . I (TOT#1000=0),$$S^%ZTLOAD S ZTSTOP=1  ;Check for Stop request
"RTN","EAS25UEI",82,0)
 . I $$DECEASED^EASMTUTL(XIEN) D  Q  ; Quit if Deceased
"RTN","EAS25UEI",83,0)
 . . S ^XTMP("EAS*1*25",1)=TOT_"^"_CNT
"RTN","EAS25UEI",84,0)
 . ;Remove current value to avoid any invalid data
"RTN","EAS25UEI",85,0)
 . S CURUE=$P($G(^DPT(XIEN,.361)),"^",7,8)
"RTN","EAS25UEI",86,0)
 . I $P(CURUE,"^")'=""!($P(CURUE,"^",2)'="") D
"RTN","EAS25UEI",87,0)
 . . S (DATA(.3617),DATA(.3618))="@"
"RTN","EAS25UEI",88,0)
 . . S UPD=$$UPD^DGENDBS(2,XIEN,.DATA)
"RTN","EAS25UEI",89,0)
 . . K UPD,DATA,CURUE
"RTN","EAS25UEI",90,0)
 . K TEMP
"RTN","EAS25UEI",91,0)
 . D SCHED,ENC,FBENC  ;Determine UE status
"RTN","EAS25UEI",92,0)
 . S UEST=$O(TEMP("UE",9999999),-1)  ;get last from all encounters
"RTN","EAS25UEI",93,0)
 . I +$G(UEST) D
"RTN","EAS25UEI",94,0)
 . . S CNT=CNT+1  ;User Enrollee counter
"RTN","EAS25UEI",95,0)
 . . I $$UPDCHK^EASUER(XIEN,UEST) D FILE^EASUER(XIEN,UEST)  ;file data
"RTN","EAS25UEI",96,0)
 . S ^XTMP("EAS*1*25",1)=TOT_"^"_CNT
"RTN","EAS25UEI",97,0)
 S $P(^XTMP("EAS*1*25","DATE"),"^",2)=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","EAS25UEI",98,0)
 I ZTSTOP D  Q
"RTN","EAS25UEI",99,0)
 . N MSG,XMDUZ,XMSUB,XMTEXT,XMY
"RTN","EAS25UEI",100,0)
 . S (XMDUZ,XMSUB)="USER ENROLLEE INITIAL DETERMINATION PROCESS"
"RTN","EAS25UEI",101,0)
 . S (XMY(.5),XMY(DUZ))="",XMTEXT="MSG("
"RTN","EAS25UEI",102,0)
 . S MSG(1)="USER ENROLLEE INITIAL DETERMINATION PROCESS     TASK: "_$G(^XTMP("EAS*1*25","TASK"))
"RTN","EAS25UEI",103,0)
 . S MSG(2)=""
"RTN","EAS25UEI",104,0)
 . S MSG(3)="User Enrollee initial determination process is requested to stop"
"RTN","EAS25UEI",105,0)
 . S MSG(4)="by the user. Please restart the process by using the following"
"RTN","EAS25UEI",106,0)
 . S MSG(5)="command at the programmer prompt:"
"RTN","EAS25UEI",107,0)
 . S MSG(6)=""
"RTN","EAS25UEI",108,0)
 . S MSG(7)="D EP^EAS25UEI"
"RTN","EAS25UEI",109,0)
 . D ^XMD
"RTN","EAS25UEI",110,0)
 D MAIL  ;send mailman message to User
"RTN","EAS25UEI",111,0)
 S ^XTMP("EAS*1*25","COMPLETED")=1
"RTN","EAS25UEI",112,0)
 D BMES^XPDUTL("Post install process for initial User Enrollee determination is completed.")
"RTN","EAS25UEI",113,0)
 Q
"RTN","EAS25UEI",114,0)
SCHED ;Check for future appointment
"RTN","EAS25UEI",115,0)
 N XDT,NODE,SDRESULT
"RTN","EAS25UEI",116,0)
 D GETAPPT^SDAMA201(XIEN,1,"R",DT,,.SDRESULT)
"RTN","EAS25UEI",117,0)
 I SDRESULT>0 D
"RTN","EAS25UEI",118,0)
 . S NODE=$O(^TMP($J,"SDAMA201","GETAPPT",""),-1)
"RTN","EAS25UEI",119,0)
 . S XDT=$G(^TMP($J,"SDAMA201","GETAPPT",NODE,1))
"RTN","EAS25UEI",120,0)
 . S XDT=$$FY^EASUER(XDT) I +$G(XDT) S TEMP("UE",XDT)="SCH"
"RTN","EAS25UEI",121,0)
 Q
"RTN","EAS25UEI",122,0)
ENC ;Check for Inpatient/Outpatient encounters
"RTN","EAS25UEI",123,0)
 N ENC,DFN,SDRESULT,DFN,VAIP
"RTN","EAS25UEI",124,0)
 S ENC=$$EXOE^SDOEOE(XIEN,3021001,DT)
"RTN","EAS25UEI",125,0)
 I ENC D  Q
"RTN","EAS25UEI",126,0)
 . S XDT=$$FY^EASUER(DT),TEMP("UE",XDT)="ENC"
"RTN","EAS25UEI",127,0)
 I $O(^DPT(XIEN,"S",9999999))="" D  ;Get appt between Oct1 - today
"RTN","EAS25UEI",128,0)
 . D GETAPPT^SDAMA201(XIEN,1,"R",3021001,DT,.SDRESULT)
"RTN","EAS25UEI",129,0)
 . I SDRESULT>0 D
"RTN","EAS25UEI",130,0)
 . . S XDT=$$FY^EASUER(DT),TEMP("UE",XDT)="ENC"
"RTN","EAS25UEI",131,0)
 I $G(SDRESULT)>0 Q
"RTN","EAS25UEI",132,0)
 S DFN=XIEN D IN5^VADPT I +$G(VAIP(10)) D  Q  ;Check for Inpatient
"RTN","EAS25UEI",133,0)
 . S XDT=$$FY^EASUER(DT),TEMP("UE",XDT)="ENC"
"RTN","EAS25UEI",134,0)
 Q
"RTN","EAS25UEI",135,0)
FBENC ;Check for Fee basis encounters
"RTN","EAS25UEI",136,0)
 N EDATE,TDATE
"RTN","EAS25UEI",137,0)
 S TDATE=$$AUTH^FBGMT2(XIEN)
"RTN","EAS25UEI",138,0)
 I TDATE=0!(TDATE<3021001) Q
"RTN","EAS25UEI",139,0)
 S TDATE=$$FY^EASUER(TDATE) I +$G(TDATE) S TEMP("UE",TDATE)="FB"
"RTN","EAS25UEI",140,0)
 Q
"RTN","EAS25UEI",141,0)
MAIL ;
"RTN","EAS25UEI",142,0)
 N MSG,XMDUZ,XMSUB,XMTEXT,XMY,SITE,STATN,SITENM
"RTN","EAS25UEI",143,0)
 S SITE=$$SITE^VASITE,STATN=$P($G(SITE),"^",3),SITENM=$P($G(SITE),"^",2)
"RTN","EAS25UEI",144,0)
 S (XMDUZ,XMSUB)="GMTII - USER ENROLLEE INITIAL DETERMINATION PROCESS"
"RTN","EAS25UEI",145,0)
 S (XMY(DUZ),XMY(.5))="",XMY("NAIK.CHINTAN@FORUM.VA.GOV")=""
"RTN","EAS25UEI",146,0)
 S XMTEXT="MSG("
"RTN","EAS25UEI",147,0)
 S MSG(1)="User Enrollee initial determination process is completed successfully."
"RTN","EAS25UEI",148,0)
 S MSG(1.5)="Task: "_$G(^XTMP("EAS*1*25","TASK"))
"RTN","EAS25UEI",149,0)
 S MSG(2)=""
"RTN","EAS25UEI",150,0)
 S MSG(3)="Site Station number: "_STATN
"RTN","EAS25UEI",151,0)
 S MSG(4)="Site Name: "_SITENM
"RTN","EAS25UEI",152,0)
 S MSG(5)=""
"RTN","EAS25UEI",153,0)
 S MSG(6)="Process started at           : "_$P($G(^XTMP("EAS*1*25","DATE")),"^",1)
"RTN","EAS25UEI",154,0)
 S MSG(7)="Process completed at         : "_$P($G(^XTMP("EAS*1*25","DATE")),"^",2)
"RTN","EAS25UEI",155,0)
 S MSG(8)="Total Veterans processed     : "_$P($G(^XTMP("EAS*1*25",1)),"^",1)
"RTN","EAS25UEI",156,0)
 S MSG(9)="Total Veterans with UE status: "_$P($G(^XTMP("EAS*1*25",1)),"^",2)
"RTN","EAS25UEI",157,0)
 D ^XMD
"RTN","EAS25UEI",158,0)
 Q
"RTN","EASMTL6")
0^1^B66329935
"RTN","EASMTL6",1,0)
EASMTL6 ; ALB/SCK,BRM,LBD - AUTOMATED MEANS TEST LETTER-INTERACTIVE PRINT ; 5/22/03 9:52am
"RTN","EASMTL6",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**3,14,15,29,25**;MAR 15,2001
"RTN","EASMTL6",3,0)
 ;
"RTN","EASMTL6",4,0)
EN ; Main entry point
"RTN","EASMTL6",5,0)
 ; Input, set in option call, if not passed in, or called interactively, user is asked to specify.
"RTN","EASMTL6",6,0)
 ;    EATYP - Used for selective printing of letters and forms
"RTN","EASMTL6",7,0)
 ;         1 : 60-Day
"RTN","EASMTL6",8,0)
 ;         2 : 30-Day
"RTN","EASMTL6",9,0)
 ;         4 :  0-Day
"RTN","EASMTL6",10,0)
 ;
"RTN","EASMTL6",11,0)
 N DIR,DIRUT,POP,EASLOC,Y
"RTN","EASMTL6",12,0)
 ;
"RTN","EASMTL6",13,0)
 ;; Select type of letter to print
"RTN","EASMTL6",14,0)
 I '$G(EATYP) D  Q:$D(DIRUT)
"RTN","EASMTL6",15,0)
 . S DIR(0)="SO^1:60-Day;2:30-Day;4:0-Day"
"RTN","EASMTL6",16,0)
 . S DIR("?")="Select the type of letter to print"
"RTN","EASMTL6",17,0)
 . D ^DIR K DIR
"RTN","EASMTL6",18,0)
 . S EATYP=+Y
"RTN","EASMTL6",19,0)
 ;
"RTN","EASMTL6",20,0)
 ;; Select facility filter if appropriate
"RTN","EASMTL6",21,0)
 S EASLOC=-1
"RTN","EASMTL6",22,0)
 I $$GET1^DIQ(713,1,8,"I") D  Q:$D(DIRUT)
"RTN","EASMTL6",23,0)
 . S DIR(0)="YAO",DIR("A")="Filter letters by Preferred Facility? "
"RTN","EASMTL6",24,0)
 . S DIR("B")="NO"
"RTN","EASMTL6",25,0)
 . S DIR("?")="Enter 'YES' to limit letters to a specific Facility or 'NO' to print all letters."
"RTN","EASMTL6",26,0)
 . D ^DIR K DIR
"RTN","EASMTL6",27,0)
 . Q:$D(DIRUT)!('Y)
"RTN","EASMTL6",28,0)
 . S EASLOC=$$FACNUM
"RTN","EASMTL6",29,0)
 ;
"RTN","EASMTL6",30,0)
 K IOP,IO("Q")
"RTN","EASMTL6",31,0)
 ;
"RTN","EASMTL6",32,0)
 S %ZIS="QP",%ZIS("B")=$$GET1^DIQ(713,1,5)
"RTN","EASMTL6",33,0)
 D ^%ZIS K %ZIS
"RTN","EASMTL6",34,0)
 Q:POP
"RTN","EASMTL6",35,0)
 I $D(IO("Q")) D QUE Q
"RTN","EASMTL6",36,0)
 D LTR
"RTN","EASMTL6",37,0)
 D ^%ZISC
"RTN","EASMTL6",38,0)
 K EATYP
"RTN","EASMTL6",39,0)
 Q
"RTN","EASMTL6",40,0)
 ;
"RTN","EASMTL6",41,0)
QUE ; Queue the report
"RTN","EASMTL6",42,0)
 N ZTRTN,ZTDESC,ZTSAVE,ZTSK,ZTDTH,ZTQUEUED
"RTN","EASMTL6",43,0)
 ;
"RTN","EASMTL6",44,0)
 S ZTRTN="LTR^EASMTL6"
"RTN","EASMTL6",45,0)
 S ZTDESC="EAS MT LETTERS PRINT JOB"
"RTN","EASMTL6",46,0)
 S ZTSAVE("EATYP")="",ZTSAVE("EASLOC")=""
"RTN","EASMTL6",47,0)
 S ZTDTH="NOW"
"RTN","EASMTL6",48,0)
 ;
"RTN","EASMTL6",49,0)
 D ^%ZTLOAD
"RTN","EASMTL6",50,0)
 I $D(ZTSK)[0 W !!?5,"Letters canceled!"
"RTN","EASMTL6",51,0)
 E  W !!?5,"Letters queued! [ ",ZTSK," ]"
"RTN","EASMTL6",52,0)
 D HOME^%ZIS
"RTN","EASMTL6",53,0)
 Q
"RTN","EASMTL6",54,0)
 ;
"RTN","EASMTL6",55,0)
LTR ; Main entry point
"RTN","EASMTL6",56,0)
 N EASTMP,EASKP
"RTN","EASMTL6",57,0)
 ;
"RTN","EASMTL6",58,0)
 S EASTMP="^TMP(""EASMT"",$J)"
"RTN","EASMTL6",59,0)
 K @EASTMP
"RTN","EASMTL6",60,0)
 ;
"RTN","EASMTL6",61,0)
 I '$D(ZTQUEUED) W !,"...Gathering letters to print...Please wait"
"RTN","EASMTL6",62,0)
 D BLD(EATYP,EASLOC,EASTMP,.EASKP)
"RTN","EASMTL6",63,0)
 D RESULT(.EASKP,EATYP)
"RTN","EASMTL6",64,0)
 I '$D(ZTQUEUED) W !,"...Printing letters..."
"RTN","EASMTL6",65,0)
 D PRINT(EASTMP,EATYP)
"RTN","EASMTL6",66,0)
 K @EASTMP,EATYP
"RTN","EASMTL6",67,0)
 Q
"RTN","EASMTL6",68,0)
 ;
"RTN","EASMTL6",69,0)
RESULT(EASKP,EATYP) ; Send results of letter printing to mail group
"RTN","EASMTL6",70,0)
 N MSG,XMSUB,XMY,XMTEXT,XMDUZ,TOT,X1
"RTN","EASMTL6",71,0)
 ;
"RTN","EASMTL6",72,0)
 S MSG(1)="Letters to print: "_$J($FN(EASKP("CNT"),","),8)
"RTN","EASMTL6",73,0)
 S MSG(2)="Letters where the print date has not reached: "_$J($FN(EASKP("T"),","),8)
"RTN","EASMTL6",74,0)
 S MSG(2.5)=""
"RTN","EASMTL6",75,0)
 S MSG(3)="The following letters were found but not printed for the following reasons:"
"RTN","EASMTL6",76,0)
 S MSG(4)="Incomplete/Bad Addr :                 "_$J($FN(EASKP("I"),","),8)
"RTN","EASMTL6",77,0)
 S MSG(5)="Deceased :                            "_$J($FN(EASKP("D"),","),8)
"RTN","EASMTL6",78,0)
 S MSG(6)="MT Changed:                           "_$J($FN(EASKP("C"),","),8)
"RTN","EASMTL6",79,0)
 S MSG(7)="Prohibit flag set:                    "_$J($FN(EASKP("P"),","),8)
"RTN","EASMTL6",80,0)
 S MSG(8)="Not a User Enrollee:                  "_$J($FN(EASKP("U"),","),8)
"RTN","EASMTL6",81,0)
 S MSG(8.5)="Not a User Enrollee of this facility: "_$J($FN(EASKP("O"),","),8)
"RTN","EASMTL6",82,0)
 S MSG(9)=""
"RTN","EASMTL6",83,0)
 S TOT=0 F X1="I","D","C","P","O","T","U","CNT" S TOT=TOT+EASKP(X1)
"RTN","EASMTL6",84,0)
 S MSG(10)="Total Letters Processed: "_$J($FN(TOT,","),8)_" (MT not returned)"
"RTN","EASMTL6",85,0)
 ;
"RTN","EASMTL6",86,0)
 S XMSUB=$S(EATYP=1:"60-Day",EATYP=2:"30-Day",1:"0-Day")_" Print Letter Results"
"RTN","EASMTL6",87,0)
 S XMTEXT="MSG("
"RTN","EASMTL6",88,0)
 S XMY("G.EAS MTLETTERS")=""
"RTN","EASMTL6",89,0)
 S XMDUZ="AUTOMATED MT LETTERS"
"RTN","EASMTL6",90,0)
 D ^XMD
"RTN","EASMTL6",91,0)
 Q
"RTN","EASMTL6",92,0)
 ;
"RTN","EASMTL6",93,0)
BLD(EATYP,EASLOC,EASTMP,EASKP) ; Build TMP array of letters to print
"RTN","EASMTL6",94,0)
 N DFN,EASIEN,COUNT,EAX2,EASPTR,EASABRT,EASUE
"RTN","EASMTL6",95,0)
 ;
"RTN","EASMTL6",96,0)
 F EAX2="P","D","C","F","T","I","O","U","CNT" S EASKP(EAX2)=0
"RTN","EASMTL6",97,0)
 S COUNT=0
"RTN","EASMTL6",98,0)
 ;
"RTN","EASMTL6",99,0)
 S EASIEN=0 ; Begin loop through un-returned means tests
"RTN","EASMTL6",100,0)
 F  S EASIEN=$O(^EAS(713.2,"AC",0,EASIEN)) Q:'EASIEN  D  Q:$G(EASABRT)
"RTN","EASMTL6",101,0)
 . S EASPTR=$$GET1^DIQ(713.2,EASIEN,2,"I") ; Pointer to File 713.1
"RTN","EASMTL6",102,0)
 . ; begin checks
"RTN","EASMTL6",103,0)
 . Q:$$LTRTYP^EASMTL6B(EASIEN)'=EATYP  ;  Check for appropriate letter type
"RTN","EASMTL6",104,0)
 . S DFN=$$GET1^DIQ(713.1,EASPTR,.01,"I") Q:'DFN
"RTN","EASMTL6",105,0)
 . ;; Filter by site, quit if filter not met
"RTN","EASMTL6",106,0)
 . I +$G(EASLOC)>0 Q:$$GET1^DIQ(2,DFN,27.02,"I")'=+EASLOC
"RTN","EASMTL6",107,0)
 . I $D(^EAS(713.1,"AP",1,EASPTR)) D  Q  ; Check Prohibit letter
"RTN","EASMTL6",108,0)
 . . D CLRFLG^EASMTUTL(0,EASIEN)
"RTN","EASMTL6",109,0)
 . . S EASKP("P")=EASKP("P")+1
"RTN","EASMTL6",110,0)
 . I $$DECEASED^EASMTUTL(EASIEN) D  Q  ; Check Deceased
"RTN","EASMTL6",111,0)
 . . D CLRFLG^EASMTUTL(0,EASIEN)
"RTN","EASMTL6",112,0)
 . . S EASKP("D")=EASKP("D")+1
"RTN","EASMTL6",113,0)
 . I $$CHECKMT^EASMTUTL(EASPTR,EASIEN) D  Q  ; Check MT changed?
"RTN","EASMTL6",114,0)
 . . D CLRFLG^EASMTUTL(0,EASIEN)
"RTN","EASMTL6",115,0)
 . . S EASKP("C")=EASKP("C")+1 Q
"RTN","EASMTL6",116,0)
 . I $$FUTMT^EASMTUTL(EASIEN) D  Q  ; Check for a Future MT
"RTN","EASMTL6",117,0)
 . . D CLRFLG^EASMTUTL(0,EASIEN)
"RTN","EASMTL6",118,0)
 . . S EASKP("F")=EASKP("F")+1
"RTN","EASMTL6",119,0)
 . I '$$THRSHLD(EATYP,EASIEN) D  Q  ; Quit if letter threshold not reached
"RTN","EASMTL6",120,0)
 . . S EASKP("T")=EASKP("T")+1
"RTN","EASMTL6",121,0)
 . ; Get User Enrollee status (0=not UE; 1=UE; 2=UE, not this site)
"RTN","EASMTL6",122,0)
 . S EASUE=$$UESTAT^EASUER(DFN)
"RTN","EASMTL6",123,0)
 . I 'EASUE D  Q     ; Quit if not User Enrollee
"RTN","EASMTL6",124,0)
 . . D NOPRT(EATYP,EASIEN)
"RTN","EASMTL6",125,0)
 . . S EASKP("U")=EASKP("U")+1
"RTN","EASMTL6",126,0)
 . I EASUE'=1 D  Q   ; Quit if User Enrollee site is not this facility
"RTN","EASMTL6",127,0)
 . . D NOPRT(EATYP,EASIEN)
"RTN","EASMTL6",128,0)
 . . S EASKP("O")=EASKP("O")+1
"RTN","EASMTL6",129,0)
 . I $$CHKADR^EASMTL6A(EASPTR) D  Q  ; Check for valid address
"RTN","EASMTL6",130,0)
 . . S EASKP("I")=EASKP("I")+1
"RTN","EASMTL6",131,0)
 . S @EASTMP@(EASIEN)=EATYP ; Build entry
"RTN","EASMTL6",132,0)
 . S EASKP("CNT")=EASKP("CNT")+1
"RTN","EASMTL6",133,0)
 . I $D(IO("Q")),$$S^%ZTLOAD("STOPPED BY USER") S EASABRT=1
"RTN","EASMTL6",134,0)
 Q
"RTN","EASMTL6",135,0)
 ;
"RTN","EASMTL6",136,0)
OWNED(PTR1,EAIEN) ;  Check - Does this facility "own" this means test
"RTN","EASMTL6",137,0)
 ;  Returns '1' if means test 'owned' by facility
"RTN","EASMTL6",138,0)
 ;          '0' if not owned
"RTN","EASMTL6",139,0)
 ;
"RTN","EASMTL6",140,0)
 N MTNODE,MTLST,MTOWN,RSLT
"RTN","EASMTL6",141,0)
 ;
"RTN","EASMTL6",142,0)
 S RSLT=0
"RTN","EASMTL6",143,0)
 S MTLST=$$LST^DGMTU(PTR1)
"RTN","EASMTL6",144,0)
 I $P(MTLST,U,1)>0 D
"RTN","EASMTL6",145,0)
 . S MTNODE=$G(^DGMT(408.31,$P(MTLST,U,1),0))
"RTN","EASMTL6",146,0)
 . S MTOWN=$$GET1^DIQ(408.34,$P(MTNODE,U,23),.01)
"RTN","EASMTL6",147,0)
 . I MTOWN="VAMC" S RSLT=1 Q
"RTN","EASMTL6",148,0)
 . I MTOWN="DCD",$$VERSION^XPDUTL("IVMC") S RSLT=1
"RTN","EASMTL6",149,0)
 ;
"RTN","EASMTL6",150,0)
 ;; If another facility 'owns' this MT, update MT Status information
"RTN","EASMTL6",151,0)
 I 'RSLT D
"RTN","EASMTL6",152,0)
 . Q:'EAIEN
"RTN","EASMTL6",153,0)
 . S DIE="^EAS(713.2,",DA=EAIEN
"RTN","EASMTL6",154,0)
 . S DR="4///YES;5///TODAY;7///MT 'OWNED' BY ANOTHER FACILITY;9///NO;12///NO;18///NO"
"RTN","EASMTL6",155,0)
 . D ^DIE K DIE
"RTN","EASMTL6",156,0)
 ;
"RTN","EASMTL6",157,0)
 Q RSLT
"RTN","EASMTL6",158,0)
 ;
"RTN","EASMTL6",159,0)
PRINT(EASTMP,EATYP) ; Print letters
"RTN","EASMTL6",160,0)
 N EASIEN,EASABRT,Y
"RTN","EASMTL6",161,0)
 ;
"RTN","EASMTL6",162,0)
 U IO
"RTN","EASMTL6",163,0)
 S EASIEN=0
"RTN","EASMTL6",164,0)
 F  S EASIEN=$O(@EASTMP@(EASIEN)) Q:'EASIEN  D  Q:$G(EASABRT)
"RTN","EASMTL6",165,0)
 . D LETTER^EASMTL6A(EASIEN,EATYP) ; Print letter
"RTN","EASMTL6",166,0)
 . D UPDSTAT(EASIEN,EATYP) ; Update Letter status file, #713.2
"RTN","EASMTL6",167,0)
 . I $D(IO("Q")),$$S^%ZTLOAD("STOPPED BY USER") S EASABRT=1 Q
"RTN","EASMTL6",168,0)
 . I '$D(IO("Q")),$E(IOST,1,2)="C-" D
"RTN","EASMTL6",169,0)
 . . S DIR(0)="E"
"RTN","EASMTL6",170,0)
 . . D ^DIR K DIR
"RTN","EASMTL6",171,0)
 . . S:'Y EASABRT=1
"RTN","EASMTL6",172,0)
 Q
"RTN","EASMTL6",173,0)
 ;
"RTN","EASMTL6",174,0)
THRSHLD(EATYP,EASIEN) ; Check threshold for letter types
"RTN","EASMTL6",175,0)
 ; Input
"RTN","EASMTL6",176,0)
 ;    EATYP  - Letter type to print
"RTN","EASMTL6",177,0)
 ;    EASIEN - IEN for file #713.2
"RTN","EASMTL6",178,0)
 ;
"RTN","EASMTL6",179,0)
 ; Output
"RTN","EASMTL6",180,0)
 ;    RSLT = 1: Letter is inside threshold to print
"RTN","EASMTL6",181,0)
 ;           0: Letter is outside threshold (Don't print)
"RTN","EASMTL6",182,0)
 ;
"RTN","EASMTL6",183,0)
 N DIFF,THRESH,RSLT,ANVDT,MTDT
"RTN","EASMTL6",184,0)
 ;
"RTN","EASMTL6",185,0)
 S RSLT=1
"RTN","EASMTL6",186,0)
 Q:'$G(EATYP)
"RTN","EASMTL6",187,0)
 S THRESH=$S(EATYP=1:60,EATYP=2:30,1:0)
"RTN","EASMTL6",188,0)
 S MTDT=$$GET1^DIQ(713.2,EASIEN,3,"I")
"RTN","EASMTL6",189,0)
 S ANVDT=$$FMADD^XLFDT(MTDT,365)
"RTN","EASMTL6",190,0)
 S DIFF=$$FMDIFF^XLFDT(ANVDT,$$DT^XLFDT)
"RTN","EASMTL6",191,0)
 I DIFF>THRESH S RSLT=0
"RTN","EASMTL6",192,0)
 Q RSLT
"RTN","EASMTL6",193,0)
 ;
"RTN","EASMTL6",194,0)
NOPRT(EATYP,EASIEN) ; Letter not printed, update Letter Status file #713.2
"RTN","EASMTL6",195,0)
 ; Input
"RTN","EASMTL6",196,0)
 ;    EATYP  - Letter type to print
"RTN","EASMTL6",197,0)
 ;    EASIEN - IEN for file #713.2
"RTN","EASMTL6",198,0)
 ;
"RTN","EASMTL6",199,0)
 N DIE,DR,DA,LTR
"RTN","EASMTL6",200,0)
 Q:'$G(EATYP)  Q:'$G(EASIEN)
"RTN","EASMTL6",201,0)
 S DIE="^EAS(713.2,",DA=EASIEN
"RTN","EASMTL6",202,0)
 S LTR=$S(EATYP=1:9,EATYP=2:12,EATYP=4:18,1:0)
"RTN","EASMTL6",203,0)
 Q:'LTR
"RTN","EASMTL6",204,0)
 ; Set current letter print statuses = "N"
"RTN","EASMTL6",205,0)
 S DR=LTR_"///0;"_(LTR+1)_"///0"
"RTN","EASMTL6",206,0)
 ; If current letter is not 0-day letter, set next letter print = "Y"
"RTN","EASMTL6",207,0)
 S:LTR'=18 DR=DR_";"_$S(LTR=9:12,1:18)_"///1"
"RTN","EASMTL6",208,0)
 D ^DIE
"RTN","EASMTL6",209,0)
 Q
"RTN","EASMTL6",210,0)
 ;
"RTN","EASMTL6",211,0)
UPDSTAT(EASN,EAX) ; Update Letter status file, #713.2
"RTN","EASMTL6",212,0)
 N DIE,DR,DA,EAPD,EAFLG,NXTFLG
"RTN","EASMTL6",213,0)
 ;
"RTN","EASMTL6",214,0)
 S DIE="^EAS(713.2,",DA=EASN
"RTN","EASMTL6",215,0)
 S DR=$S(EAX=1:10,EAX=2:13,EAX=4:19,1:0)
"RTN","EASMTL6",216,0)
 Q:'DR
"RTN","EASMTL6",217,0)
 S EAPD=DR_".5",EAFLG=DR-1
"RTN","EASMTL6",218,0)
 S DR=DR_"///1;"_EAPD_"///^S X=$$DT^XLFDT;"_EAFLG_"///0"
"RTN","EASMTL6",219,0)
 S NXTFLG=$S(EAFLG=9:12,EAFLG=12:18,1:0)
"RTN","EASMTL6",220,0)
 S:NXTFLG>0 DR=DR_";"_NXTFLG_"///1"
"RTN","EASMTL6",221,0)
 D ^DIE K DIE
"RTN","EASMTL6",222,0)
 D CLRFLG^EASMTUTL(EAX,EASN)
"RTN","EASMTL6",223,0)
 Q
"RTN","EASMTL6",224,0)
 ;
"RTN","EASMTL6",225,0)
FACNUM() ;  Get facility number
"RTN","EASMTL6",226,0)
 N RSLT,DIR,Y
"RTN","EASMTL6",227,0)
 ;
"RTN","EASMTL6",228,0)
 S DIR(0)="P^4:EMZ"
"RTN","EASMTL6",229,0)
 S DIR("S")="I '$P($G(^DIC(4,Y,99)),U,4)"
"RTN","EASMTL6",230,0)
 D ^DIR K DIR
"RTN","EASMTL6",231,0)
 I $D(DIRUT) S RSLT=0
"RTN","EASMTL6",232,0)
 E  S RSLT=+Y_"^"_$P($G(^DIC(4,+Y,99)),U,1)
"RTN","EASMTL6",233,0)
 ;
"RTN","EASMTL6",234,0)
 Q RSLT
"RTN","EASMTL6",235,0)
 ;
"RTN","EASMTL6",236,0)
GETFAC(EADFN,EASARY) ;  set facility return address information
"RTN","EASMTL6",237,0)
 N EASFAC,EAX,EASF,EAS4
"RTN","EASMTL6",238,0)
 ;
"RTN","EASMTL6",239,0)
 I $$GET1^DIQ(713,1,9,"I") D
"RTN","EASMTL6",240,0)
 . S EASFAC=$$GET1^DIQ(2,EADFN,27.02,"I")
"RTN","EASMTL6",241,0)
 . Q:'EASFAC
"RTN","EASMTL6",242,0)
 . ;; Check for inactive flag
"RTN","EASMTL6",243,0)
 . Q:$$GET1^DIQ(4,EASFAC,101,"I")
"RTN","EASMTL6",244,0)
 . D GETS^DIQ(4,EASFAC,".01;1.01;1.02;1.03;1.04;.02;100","EI","EAS4")
"RTN","EASMTL6",245,0)
 . S EASF=EASFAC_","
"RTN","EASMTL6",246,0)
 . ;; Check for valid address information
"RTN","EASMTL6",247,0)
 . I EAS4(4,EASF,1.01,"E")]"",EAS4(4,EASF,1.03,"E")]"",EAS4(4,EASF,.02,"E")]"" S EASARY("TYP")="P"
"RTN","EASMTL6",248,0)
 ;
"RTN","EASMTL6",249,0)
 I $G(EASARY("TYP"))'="P" D
"RTN","EASMTL6",250,0)
 . S EASFAC=$$SITE^VASITE
"RTN","EASMTL6",251,0)
 . D GETS^DIQ(4,+EASFAC,".01;1.01;1.02;1.03;1.04;.02;100","EI","EAS4")
"RTN","EASMTL6",252,0)
 . S EASARY("TYP")="F"
"RTN","EASMTL6",253,0)
 ;
"RTN","EASMTL6",254,0)
 S EASARY("FACNUM")=+EASFAC
"RTN","EASMTL6",255,0)
 S EASARY("FAC")=$$GET1^DIQ(4,+EASFAC,.01,"I")
"RTN","EASMTL6",256,0)
 F EAX=1.01,1.02,1.03,1.04,100 D
"RTN","EASMTL6",257,0)
 .  S EASARY(EAX)=EAS4(4,+EASFAC_",",EAX,"E")
"RTN","EASMTL6",258,0)
 S EASARY(.02)=EAS4(4,+EASFAC_",",.02,"E")_"^"_$$GET1^DIQ(5,EAS4(4,+EASFAC_",",.02,"I"),1)
"RTN","EASMTL6",259,0)
 Q
"RTN","EASUER")
0^3^B13750596
"RTN","EASUER",1,0)
EASUER ;ALB/CKN - GEOGRAPHIC MEANS TEST PHASE II ; 03-MAR-2003
"RTN","EASUER",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**25**;Mar 15, 2001
"RTN","EASUER",3,0)
 ;This routine contains several APIs that will be called from
"RTN","EASUER",4,0)
 ;different packages like Scheduling, PCE and Fee basis to notify
"RTN","EASUER",5,0)
 ;Enrollment package whenever any inpatient/outpatient encounter occurs,
"RTN","EASUER",6,0)
 ;or any appointment made or any changes made to fee basis authorization.
"RTN","EASUER",7,0)
 Q
"RTN","EASUER",8,0)
SCHED ;This API will be called from SDAM APPOINTMENT EVENTS via EAS UE SCHED 
"RTN","EASUER",9,0)
 ;EVENT protocol whenever any changes made to veteran's appointment.
"RTN","EASUER",10,0)
 ;Input variables used in this api:
"RTN","EASUER",11,0)
 ;             SDATA     -  piece 1 - ien of multiple entry of the 
"RTN","EASUER",12,0)
 ;                                    APPOINTMENTS multiple of the
"RTN","EASUER",13,0)
 ;                                    HOSPITAL LOCATION file.
"RTN","EASUER",14,0)
 ;                          piece 2 - ien of PATIENT file (DFN)
"RTN","EASUER",15,0)
 ;                          piece 3 - internal Date/time of appt.
"RTN","EASUER",16,0)
 ;                          piece 4 - ien of clinic in the HOSPITAL
"RTN","EASUER",17,0)
 ;                                    LOCATION file.
"RTN","EASUER",18,0)
 ;             SDAMEVT   -  ien pointing to an entry in the APPOINTMENT
"RTN","EASUER",19,0)
 ;                          TRANSACTION file (#409.66).
"RTN","EASUER",20,0)
 ;
"RTN","EASUER",21,0)
 N DFN,APT,APTDT
"RTN","EASUER",22,0)
 S DFN=$P($G(SDATA),"^",2) Q:DFN=""  ;Veteran's IEN
"RTN","EASUER",23,0)
 I $G(SDAMEVT)=1 D  ;if new appointment is made
"RTN","EASUER",24,0)
 . S APTDT=$P($G(SDATA),"^",3),APTDT=$$FY(APTDT)
"RTN","EASUER",25,0)
 . ;check current User Enrollee data and update it if necessary.
"RTN","EASUER",26,0)
 . I $$UPDCHK(DFN,APTDT) D FILE(DFN,APTDT)
"RTN","EASUER",27,0)
 Q
"RTN","EASUER",28,0)
ENC ;This API will be called from PXK VISIT DATA EVENT via EAS UE PCE EVENT
"RTN","EASUER",29,0)
 ;whenever any inpatient/outpatient encounter occurs.
"RTN","EASUER",30,0)
 ;Input:
"RTN","EASUER",31,0)
 ;^TMP("PXKCO",$J,VISIT,"V FILE STRING",V FILE RECORD,DDSUBSCRIPT,"AFTER/BEFORE")=DATA
"RTN","EASUER",32,0)
 ;where: subscript piece 1 - string notation representing package "PXKCO"
"RTN","EASUER",33,0)
 ;       subscript piece 2 - Job number ($J)
"RTN","EASUER",34,0)
 ;       subscript piece 3 - ien of VISIT file
"RTN","EASUER",35,0)
 ;       subscript piece 4 - string representing the VISIT or V file
"RTN","EASUER",36,0)
 ;                           data category
"RTN","EASUER",37,0)
 ;       subscript piece 5 - ien of the entry in the file represented in
"RTN","EASUER",38,0)
 ;                           subscript #4
"RTN","EASUER",39,0)
 ;       subscript piece 6 - subscript or DD node on which the data is stored.
"RTN","EASUER",40,0)
 ;       subscript piece 7 - string designating whether or not the data
"RTN","EASUER",41,0)
 ;                           is an "after" or "before" reflection of data.
"RTN","EASUER",42,0)
 ;
"RTN","EASUER",43,0)
 N VSIT,NODE,DFN,VDT
"RTN","EASUER",44,0)
 I '$D(^TMP("PXKCO",$J)) Q
"RTN","EASUER",45,0)
 S VSIT=$O(^TMP("PXKCO",$J,"")) Q:VSIT=""  ;ien of VISIT file
"RTN","EASUER",46,0)
 S NODE=$G(^AUPNVSIT(VSIT,0))
"RTN","EASUER",47,0)
 ;get Veteran's IEN and encounter date
"RTN","EASUER",48,0)
 S DFN=$P($G(NODE),"^",5),VDT=$P($G(NODE),"^",1)
"RTN","EASUER",49,0)
 S VDT=$$FY(VDT)
"RTN","EASUER",50,0)
 ;check current User Enrollee data and update if necessary
"RTN","EASUER",51,0)
 I $$UPDCHK(DFN,VDT) D FILE(DFN,VDT)
"RTN","EASUER",52,0)
 Q
"RTN","EASUER",53,0)
FBAUTH(FBDFN,FBTODT) ;This Enrollment api will be called from Fee basis
"RTN","EASUER",54,0)
 ;applications at the time of any fee basis authorization changes.
"RTN","EASUER",55,0)
 ;Input:         FBDFN  -  Veteran's ien
"RTN","EASUER",56,0)
 ;              FBTODT  -  Latest date of authorization.
"RTN","EASUER",57,0)
 ;
"RTN","EASUER",58,0)
 N XDT
"RTN","EASUER",59,0)
 S XDT=$$FY(FBTODT)
"RTN","EASUER",60,0)
 I $$UPDCHK(FBDFN,XDT) D FILE(FBDFN,XDT)
"RTN","EASUER",61,0)
 Q
"RTN","EASUER",62,0)
INP ;This Enrollment api will be called from DGPM MOVEMENT EVENT via 
"RTN","EASUER",63,0)
 ;EAS UE INP EVENT protocol whenever inpatient veteran is admitted,
"RTN","EASUER",64,0)
 ;transfered,discharged or any movement.
"RTN","EASUER",65,0)
 ;supported variables of this event:
"RTN","EASUER",66,0)
 ;       DFN  - Pointer to patient in PATIENT file (#2)
"RTN","EASUER",67,0)
 ;    DGPMDA  - Pointer to primary movement in PATIENT MOVEMENT file.
"RTN","EASUER",68,0)
 ;     DGPMP  - Zero node of primary movement prior to add/edit/del
"RTN","EASUER",69,0)
 ;     DGPMA  - Zero node of primary movement after add/edit/delete
"RTN","EASUER",70,0)
 ;
"RTN","EASUER",71,0)
 N XDT
"RTN","EASUER",72,0)
 I '$G(DFN)!'$G(DGPMDA) Q
"RTN","EASUER",73,0)
 S XDT=$P($G(^DGPM(DGPMDA,0)),"^")  ;Date of movement
"RTN","EASUER",74,0)
 S XDT=$$FY(XDT) I $$UPDCHK(DFN,XDT) D FILE(DFN,XDT)
"RTN","EASUER",75,0)
 Q
"RTN","EASUER",76,0)
UESTAT(DFN) ;This api will be called at the time of Annual MT renewal
"RTN","EASUER",77,0)
 ;process to check if veteran has UE status for current FY.
"RTN","EASUER",78,0)
 N UESTAT,UESITE,UESTN,CURSTN,PRNT
"RTN","EASUER",79,0)
 I '$G(DFN) Q 0  ;No DFN
"RTN","EASUER",80,0)
 S UESTAT=$P($G(^DPT(DFN,.361)),"^",7)
"RTN","EASUER",81,0)
 I UESTAT="" Q 0  ;Not User Enrollee
"RTN","EASUER",82,0)
 I UESTAT<$$FY(DT) Q 0  ;Not User Enrollee for current FY
"RTN","EASUER",83,0)
 S UESITE=$P($G(^DPT(DFN,.361)),"^",8) Q:+UESITE=0 0
"RTN","EASUER",84,0)
 S UESTN=$P($G(^DIC(4,UESITE,99)),"^")
"RTN","EASUER",85,0)
 S CURSTN=$P($$SITE^VASITE,"^",3)
"RTN","EASUER",86,0)
 S PRNT=$$PSITE(CURSTN),CURSTN=$P($G(^DIC(4,PRNT,99)),"^")
"RTN","EASUER",87,0)
 I UESTN'=CURSTN Q 2  ;Not same site
"RTN","EASUER",88,0)
 Q 1
"RTN","EASUER",89,0)
UPDCHK(DFN,APTDT) ;This api will determine whether to update User Enrollee data.
"RTN","EASUER",90,0)
 I APTDT<3030000 Q 0  ;Quit if APTDT is less than FY 2003
"RTN","EASUER",91,0)
 N CURSTAT
"RTN","EASUER",92,0)
 S CURSTAT=$P($G(^DPT(DFN,.361)),"^",7)
"RTN","EASUER",93,0)
 I APTDT>CURSTAT Q 1
"RTN","EASUER",94,0)
 Q 0
"RTN","EASUER",95,0)
FY(XDATE) ;Returns a fiscal year for the date
"RTN","EASUER",96,0)
 N ENFY S ENFY=""
"RTN","EASUER",97,0)
 I $G(XDATE)?7N.E S ENFY=$S($E(XDATE,4,5)<10:$E(XDATE,1,3),1:$E(XDATE,1,3)+1)
"RTN","EASUER",98,0)
 Q ENFY_"0000"
"RTN","EASUER",99,0)
PSITE(STA) ;Get parent site IEN
"RTN","EASUER",100,0)
 N PRNT
"RTN","EASUER",101,0)
 S PRNT=+$$PRNT^XUAF4(STA)
"RTN","EASUER",102,0)
 I 'PRNT S PRNT=+$$PRNT^XUAF4($E($G(STA),1,3))
"RTN","EASUER",103,0)
 I 'PRNT S PRNT=$O(^DIC(4,"D",$E($G(STA),1,3),""))
"RTN","EASUER",104,0)
 Q PRNT
"RTN","EASUER",105,0)
FILE(XIEN,XDT) ;Update User Enrollee fields and queue Z07
"RTN","EASUER",106,0)
 N DATA,FILEUPD,SITE,PRNT,EVENT,IYR
"RTN","EASUER",107,0)
 S SITE=$$SITE^VASITE,SITE=$P($G(SITE),"^",3)
"RTN","EASUER",108,0)
 S PRNT=$$PSITE(SITE) Q:'+$G(PRNT)
"RTN","EASUER",109,0)
 S DATA(.3617)=XDT,DATA(.3618)=PRNT
"RTN","EASUER",110,0)
 I '$$UPD^DGENDBS(2,.XIEN,.DATA) Q
"RTN","EASUER",111,0)
 S IYR=$$INCYR(XIEN)
"RTN","EASUER",112,0)
 S EVENT("ENROLL")=1 I $$LOG^IVMPLOG(XIEN,IYR,.EVENT)
"RTN","EASUER",113,0)
 Q
"RTN","EASUER",114,0)
INCYR(XIEN) ;Get valid income year
"RTN","EASUER",115,0)
 ;N INCYR,LMT,R3015,I,TEMP
"RTN","EASUER",116,0)
 I $D(^IVM(301.5,"APT",XIEN)) D  Q INCYR
"RTN","EASUER",117,0)
 . S INCYR=$O(^IVM(301.5,"APT",XIEN,""),-1)
"RTN","EASUER",118,0)
 F I=1,2,4 D
"RTN","EASUER",119,0)
 . S LMT=$$LST^DGMTU(XIEN,,I)
"RTN","EASUER",120,0)
 . I +$G(LMT) S TEMP($P(LMT,"^",2))=""
"RTN","EASUER",121,0)
 I $D(TEMP) S LMT=$O(TEMP(""),-1),INCYR=($E(LMT,1,3)-1)_"0000" Q INCYR
"RTN","EASUER",122,0)
 S INCYR=($E(DT,1,3)-1)_"0000"
"RTN","EASUER",123,0)
 Q INCYR
"VER")
8.0^22
**END**
**END**
