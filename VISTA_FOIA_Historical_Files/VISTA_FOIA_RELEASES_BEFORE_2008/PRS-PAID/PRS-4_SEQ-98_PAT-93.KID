Released PRS*4*93 SEQ #98
Extracted from mail message
**KIDS**:PRS*4.0*93^

**INSTALL NAME**
PRS*4.0*93
"BLD",5796,0)
PRS*4.0*93^PAID^0^3070228^y
"BLD",5796,4,0)
^9.64PA^458^3
"BLD",5796,4,458,0)
458
"BLD",5796,4,458,2,0)
^9.641^458.02^1
"BLD",5796,4,458,2,458.02,0)
DAY #  (sub-file)
"BLD",5796,4,458,2,458.02,1,0)
^9.6411^149^40
"BLD",5796,4,458,2,458.02,1,110,0)
ESR START TIME-1
"BLD",5796,4,458,2,458.02,1,111,0)
ESR STOP TIME-1
"BLD",5796,4,458,2,458.02,1,112,0)
ESR TYPE OF TIME-1
"BLD",5796,4,458,2,458.02,1,113,0)
ESR SPECIAL CODE-1
"BLD",5796,4,458,2,458.02,1,114,0)
ESR MEAL TIME-1
"BLD",5796,4,458,2,458.02,1,115,0)
ESR START TIME-2
"BLD",5796,4,458,2,458.02,1,116,0)
ESR STOP TIME-2
"BLD",5796,4,458,2,458.02,1,117,0)
ESR TYPE OF TIME-2
"BLD",5796,4,458,2,458.02,1,118,0)
ESR SPECIAL CODE-2
"BLD",5796,4,458,2,458.02,1,119,0)
ESR MEAL TIME-2
"BLD",5796,4,458,2,458.02,1,120,0)
ESR START TIME-3
"BLD",5796,4,458,2,458.02,1,121,0)
ESR STOP TIME-3
"BLD",5796,4,458,2,458.02,1,122,0)
ESR TYPE OF TIME-3
"BLD",5796,4,458,2,458.02,1,123,0)
ESR SPECIAL CODE-3
"BLD",5796,4,458,2,458.02,1,124,0)
ESR MEAL TIME-3
"BLD",5796,4,458,2,458.02,1,125,0)
ESR START TIME-4
"BLD",5796,4,458,2,458.02,1,126,0)
ESR STOP TIME-4
"BLD",5796,4,458,2,458.02,1,127,0)
ESR TYPE OF TIME-4
"BLD",5796,4,458,2,458.02,1,128,0)
ESR SPECIAL CODE-4
"BLD",5796,4,458,2,458.02,1,129,0)
ESR MEAL TIME-4
"BLD",5796,4,458,2,458.02,1,130,0)
ESR START TIME-5
"BLD",5796,4,458,2,458.02,1,131,0)
ESR STOP TIME-5
"BLD",5796,4,458,2,458.02,1,132,0)
ESR TYPE OF TIME-5
"BLD",5796,4,458,2,458.02,1,133,0)
ESR SPECIAL CODE-5
"BLD",5796,4,458,2,458.02,1,134,0)
ESR MEAL TIME-5
"BLD",5796,4,458,2,458.02,1,135,0)
ESR START TIME-6
"BLD",5796,4,458,2,458.02,1,136,0)
ESR STOP TIME-6
"BLD",5796,4,458,2,458.02,1,137,0)
ESR TYPE OF TIME-6
"BLD",5796,4,458,2,458.02,1,138,0)
ESR SPECIAL CODE-6
"BLD",5796,4,458,2,458.02,1,139,0)
ESR MEAL TIME-6
"BLD",5796,4,458,2,458.02,1,140,0)
ESR START TIME-7
"BLD",5796,4,458,2,458.02,1,141,0)
ESR STOP TIME-7
"BLD",5796,4,458,2,458.02,1,142,0)
ESR TYPE OF TIME-7
"BLD",5796,4,458,2,458.02,1,143,0)
ESR SPECIAL CODE-7
"BLD",5796,4,458,2,458.02,1,144,0)
ESR MEAL TIME-7
"BLD",5796,4,458,2,458.02,1,145,0)
DAILY ESR REMARKS
"BLD",5796,4,458,2,458.02,1,146,0)
ESR DAILY STATUS
"BLD",5796,4,458,2,458.02,1,147,0)
PT PHYSICIAN DATE/TIME STAMP
"BLD",5796,4,458,2,458.02,1,148,0)
ESR SUPERVISOR COMMENTS 
"BLD",5796,4,458,2,458.02,1,149,0)
ESR DAY LAST SIGN METHOD
"BLD",5796,4,458,222)
y^n^p^^^^n^^n
"BLD",5796,4,458,224)

"BLD",5796,4,458.4,0)
458.4
"BLD",5796,4,458.4,222)
y^y^f^^^^n
"BLD",5796,4,458.7,0)
458.7
"BLD",5796,4,458.7,222)
y^y^f^^^^n
"BLD",5796,4,"APDD",458,458.02)

"BLD",5796,4,"APDD",458,458.02,110)

"BLD",5796,4,"APDD",458,458.02,111)

"BLD",5796,4,"APDD",458,458.02,112)

"BLD",5796,4,"APDD",458,458.02,113)

"BLD",5796,4,"APDD",458,458.02,114)

"BLD",5796,4,"APDD",458,458.02,115)

"BLD",5796,4,"APDD",458,458.02,116)

"BLD",5796,4,"APDD",458,458.02,117)

"BLD",5796,4,"APDD",458,458.02,118)

"BLD",5796,4,"APDD",458,458.02,119)

"BLD",5796,4,"APDD",458,458.02,120)

"BLD",5796,4,"APDD",458,458.02,121)

"BLD",5796,4,"APDD",458,458.02,122)

"BLD",5796,4,"APDD",458,458.02,123)

"BLD",5796,4,"APDD",458,458.02,124)

"BLD",5796,4,"APDD",458,458.02,125)

"BLD",5796,4,"APDD",458,458.02,126)

"BLD",5796,4,"APDD",458,458.02,127)

"BLD",5796,4,"APDD",458,458.02,128)

"BLD",5796,4,"APDD",458,458.02,129)

"BLD",5796,4,"APDD",458,458.02,130)

"BLD",5796,4,"APDD",458,458.02,131)

"BLD",5796,4,"APDD",458,458.02,132)

"BLD",5796,4,"APDD",458,458.02,133)

"BLD",5796,4,"APDD",458,458.02,134)

"BLD",5796,4,"APDD",458,458.02,135)

"BLD",5796,4,"APDD",458,458.02,136)

"BLD",5796,4,"APDD",458,458.02,137)

"BLD",5796,4,"APDD",458,458.02,138)

"BLD",5796,4,"APDD",458,458.02,139)

"BLD",5796,4,"APDD",458,458.02,140)

"BLD",5796,4,"APDD",458,458.02,141)

"BLD",5796,4,"APDD",458,458.02,142)

"BLD",5796,4,"APDD",458,458.02,143)

"BLD",5796,4,"APDD",458,458.02,144)

"BLD",5796,4,"APDD",458,458.02,145)

"BLD",5796,4,"APDD",458,458.02,146)

"BLD",5796,4,"APDD",458,458.02,147)

"BLD",5796,4,"APDD",458,458.02,148)

"BLD",5796,4,"APDD",458,458.02,149)

"BLD",5796,4,"B",458,458)

"BLD",5796,4,"B",458.4,458.4)

"BLD",5796,4,"B",458.7,458.7)

"BLD",5796,6)
30^
"BLD",5796,6.3)
7
"BLD",5796,"INIT")

"BLD",5796,"KRN",0)
^9.67PA^8989.52^19
"BLD",5796,"KRN",.4,0)
.4
"BLD",5796,"KRN",.401,0)
.401
"BLD",5796,"KRN",.402,0)
.402
"BLD",5796,"KRN",.403,0)
.403
"BLD",5796,"KRN",.403,"NM",0)
^9.68A^2^2
"BLD",5796,"KRN",.403,"NM",1,0)
PRSP ESR POST    FILE #458^458^0
"BLD",5796,"KRN",.403,"NM",2,0)
PRSP EXT ABSENCE    FILE #458.4^458.4^0
"BLD",5796,"KRN",.403,"NM","B","PRSP ESR POST    FILE #458",1)

"BLD",5796,"KRN",.403,"NM","B","PRSP EXT ABSENCE    FILE #458.4",2)

"BLD",5796,"KRN",.5,0)
.5
"BLD",5796,"KRN",.84,0)
.84
"BLD",5796,"KRN",3.6,0)
3.6
"BLD",5796,"KRN",3.8,0)
3.8
"BLD",5796,"KRN",9.2,0)
9.2
"BLD",5796,"KRN",9.8,0)
9.8
"BLD",5796,"KRN",9.8,"NM",0)
^9.68A^59^53
"BLD",5796,"KRN",9.8,"NM",1,0)
PRSPESR^^0^B47968851
"BLD",5796,"KRN",9.8,"NM",2,0)
PRSPESR1^^0^B74187836
"BLD",5796,"KRN",9.8,"NM",3,0)
PRSPESR2^^0^B38293354
"BLD",5796,"KRN",9.8,"NM",5,0)
PRSPEAA^^0^B69144897
"BLD",5796,"KRN",9.8,"NM",6,0)
PRSPEAF^^0^B26618366
"BLD",5796,"KRN",9.8,"NM",7,0)
PRSPEAN^^0^B5183365
"BLD",5796,"KRN",9.8,"NM",8,0)
PRSPEAE^^0^B2407382
"BLD",5796,"KRN",9.8,"NM",9,0)
PRSPEAX^^0^B11554289
"BLD",5796,"KRN",9.8,"NM",10,0)
PRSPEAD^^0^B2441712
"BLD",5796,"KRN",9.8,"NM",11,0)
PRSPEAU^^0^B26159765
"BLD",5796,"KRN",9.8,"NM",12,0)
PRSPEM^^0^B63374576
"BLD",5796,"KRN",9.8,"NM",13,0)
PRSPTM^^0^B69411806
"BLD",5796,"KRN",9.8,"NM",14,0)
PRSPDFM^^0^B44603242
"BLD",5796,"KRN",9.8,"NM",15,0)
PRSPRM^^0^B43555737
"BLD",5796,"KRN",9.8,"NM",16,0)
PRSPBRP^^0^B69250787
"BLD",5796,"KRN",9.8,"NM",18,0)
PRSPDM^^0^B55955782
"BLD",5796,"KRN",9.8,"NM",20,0)
PRSPUT2^^0^B17270700
"BLD",5796,"KRN",9.8,"NM",21,0)
PRSPUT1^^0^B56311974
"BLD",5796,"KRN",9.8,"NM",22,0)
PRSPSAP^^0^B45637052
"BLD",5796,"KRN",9.8,"NM",23,0)
PRSPSAP1^^0^B29868650
"BLD",5796,"KRN",9.8,"NM",24,0)
PRSPSAPU^^0^B39830658
"BLD",5796,"KRN",9.8,"NM",25,0)
PRSPAPU^^0^B19966403
"BLD",5796,"KRN",9.8,"NM",26,0)
PRSATP^^0^B31409450
"BLD",5796,"KRN",9.8,"NM",27,0)
PRSPRM1^^0^B63409102
"BLD",5796,"KRN",9.8,"NM",29,0)
PRSPDESR^^0^B28832253
"BLD",5796,"KRN",9.8,"NM",30,0)
PRSPSRC^^0^B13584533
"BLD",5796,"KRN",9.8,"NM",31,0)
PRSPCPPE^^0^B15175937
"BLD",5796,"KRN",9.8,"NM",32,0)
PRSPEEM^^0^B86830064
"BLD",5796,"KRN",9.8,"NM",33,0)
PRSPUE^^0^B6810675
"BLD",5796,"KRN",9.8,"NM",35,0)
PRSPDEM^^0^B36157537
"BLD",5796,"KRN",9.8,"NM",36,0)
PRSPESR3^^0^B4084305
"BLD",5796,"KRN",9.8,"NM",37,0)
PRSPLVU^^0^B47621313
"BLD",5796,"KRN",9.8,"NM",38,0)
PRSPLVA^^0^B56019414
"BLD",5796,"KRN",9.8,"NM",39,0)
PRSPLVA1^^0^B61516932
"BLD",5796,"KRN",9.8,"NM",40,0)
PRSASC^^0^B20003482
"BLD",5796,"KRN",9.8,"NM",41,0)
PRSASC1^^0^B26512238
"BLD",5796,"KRN",9.8,"NM",42,0)
PRSALVX^^0^B5361977
"BLD",5796,"KRN",9.8,"NM",43,0)
PRSALVR^^0^B14279218
"BLD",5796,"KRN",9.8,"NM",44,0)
PRSAPPO^^0^B11822872
"BLD",5796,"KRN",9.8,"NM",45,0)
PRSASR^^0^B44221248
"BLD",5796,"KRN",9.8,"NM",46,0)
PRSASR1^^0^B49767232
"BLD",5796,"KRN",9.8,"NM",48,0)
PRSPUT3^^0^B60317538
"BLD",5796,"KRN",9.8,"NM",49,0)
PRSPSAP2^^0^B50229463
"BLD",5796,"KRN",9.8,"NM",50,0)
PRSPCPP1^^0^B16625625
"BLD",5796,"KRN",9.8,"NM",51,0)
PRSPLVA2^^0^B52382378
"BLD",5796,"KRN",9.8,"NM",52,0)
PRSLIB01^^0^B52516097
"BLD",5796,"KRN",9.8,"NM",53,0)
PRSATIM^^0^B4060707
"BLD",5796,"KRN",9.8,"NM",54,0)
PRSATE^^0^B80705897
"BLD",5796,"KRN",9.8,"NM",55,0)
PRSPSAP3^^0^B49966570
"BLD",5796,"KRN",9.8,"NM",56,0)
PRSPCORE^^0^B33543498
"BLD",5796,"KRN",9.8,"NM",57,0)
PRSASC3^^0^B7711149
"BLD",5796,"KRN",9.8,"NM",58,0)
PRSAPRE^^0^B5270397
"BLD",5796,"KRN",9.8,"NM",59,0)
PRSLIB00^^0^B23488632
"BLD",5796,"KRN",9.8,"NM","B","PRSALVR",43)

"BLD",5796,"KRN",9.8,"NM","B","PRSALVX",42)

"BLD",5796,"KRN",9.8,"NM","B","PRSAPPO",44)

"BLD",5796,"KRN",9.8,"NM","B","PRSAPRE",58)

"BLD",5796,"KRN",9.8,"NM","B","PRSASC",40)

"BLD",5796,"KRN",9.8,"NM","B","PRSASC1",41)

"BLD",5796,"KRN",9.8,"NM","B","PRSASC3",57)

"BLD",5796,"KRN",9.8,"NM","B","PRSASR",45)

"BLD",5796,"KRN",9.8,"NM","B","PRSASR1",46)

"BLD",5796,"KRN",9.8,"NM","B","PRSATE",54)

"BLD",5796,"KRN",9.8,"NM","B","PRSATIM",53)

"BLD",5796,"KRN",9.8,"NM","B","PRSATP",26)

"BLD",5796,"KRN",9.8,"NM","B","PRSLIB00",59)

"BLD",5796,"KRN",9.8,"NM","B","PRSLIB01",52)

"BLD",5796,"KRN",9.8,"NM","B","PRSPAPU",25)

"BLD",5796,"KRN",9.8,"NM","B","PRSPBRP",16)

"BLD",5796,"KRN",9.8,"NM","B","PRSPCORE",56)

"BLD",5796,"KRN",9.8,"NM","B","PRSPCPP1",50)

"BLD",5796,"KRN",9.8,"NM","B","PRSPCPPE",31)

"BLD",5796,"KRN",9.8,"NM","B","PRSPDEM",35)

"BLD",5796,"KRN",9.8,"NM","B","PRSPDESR",29)

"BLD",5796,"KRN",9.8,"NM","B","PRSPDFM",14)

"BLD",5796,"KRN",9.8,"NM","B","PRSPDM",18)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAA",5)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAD",10)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAE",8)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAF",6)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAN",7)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAU",11)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEAX",9)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEEM",32)

"BLD",5796,"KRN",9.8,"NM","B","PRSPEM",12)

"BLD",5796,"KRN",9.8,"NM","B","PRSPESR",1)

"BLD",5796,"KRN",9.8,"NM","B","PRSPESR1",2)

"BLD",5796,"KRN",9.8,"NM","B","PRSPESR2",3)

"BLD",5796,"KRN",9.8,"NM","B","PRSPESR3",36)

"BLD",5796,"KRN",9.8,"NM","B","PRSPLVA",38)

"BLD",5796,"KRN",9.8,"NM","B","PRSPLVA1",39)

"BLD",5796,"KRN",9.8,"NM","B","PRSPLVA2",51)

"BLD",5796,"KRN",9.8,"NM","B","PRSPLVU",37)

"BLD",5796,"KRN",9.8,"NM","B","PRSPRM",15)

"BLD",5796,"KRN",9.8,"NM","B","PRSPRM1",27)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSAP",22)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSAP1",23)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSAP2",49)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSAP3",55)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSAPU",24)

"BLD",5796,"KRN",9.8,"NM","B","PRSPSRC",30)

"BLD",5796,"KRN",9.8,"NM","B","PRSPTM",13)

"BLD",5796,"KRN",9.8,"NM","B","PRSPUE",33)

"BLD",5796,"KRN",9.8,"NM","B","PRSPUT1",21)

"BLD",5796,"KRN",9.8,"NM","B","PRSPUT2",20)

"BLD",5796,"KRN",9.8,"NM","B","PRSPUT3",48)

"BLD",5796,"KRN",19,0)
19
"BLD",5796,"KRN",19,"NM",0)
^9.68A^49^43
"BLD",5796,"KRN",19,"NM",1,0)
PRSP ESR EDIT^^0
"BLD",5796,"KRN",19,"NM",2,0)
PRSP EA MENU^^0
"BLD",5796,"KRN",19,"NM",3,0)
PRSP EA ENTER^^0
"BLD",5796,"KRN",19,"NM",4,0)
PRSP EA EDIT^^0
"BLD",5796,"KRN",19,"NM",5,0)
PRSP EA CANCEL^^0
"BLD",5796,"KRN",19,"NM",6,0)
PRSP EA DISPLAY^^0
"BLD",5796,"KRN",19,"NM",8,0)
PRSP HR EM^^0
"BLD",5796,"KRN",19,"NM",9,0)
PRSP HR TM^^0
"BLD",5796,"KRN",19,"NM",10,0)
PRSP HR DFM^^0
"BLD",5796,"KRN",19,"NM",11,0)
PRSP HR BRP^^0
"BLD",5796,"KRN",19,"NM",12,0)
PRSP HR RM^^0
"BLD",5796,"KRN",19,"NM",13,0)
PRSP HR MR^^0
"BLD",5796,"KRN",19,"NM",15,0)
PRSP HR DE^^0
"BLD",5796,"KRN",19,"NM",16,0)
PRSD 05 EMPLOYEE INQUIRY MENU^^2
"BLD",5796,"KRN",19,"NM",17,0)
PRSA EMP MENU^^2
"BLD",5796,"KRN",19,"NM",18,0)
PRSP PTP MENU^^0
"BLD",5796,"KRN",19,"NM",19,0)
PRSA SUP MENU^^2
"BLD",5796,"KRN",19,"NM",20,0)
PRSP ESR SAP^^0
"BLD",5796,"KRN",19,"NM",21,0)
PRSA TK POST^^0
"BLD",5796,"KRN",19,"NM",22,0)
PRSP TK POST^^0
"BLD",5796,"KRN",19,"NM",23,0)
PRSA TK MENU^^2
"BLD",5796,"KRN",19,"NM",25,0)
PRSP PTP DE^^0
"BLD",5796,"KRN",19,"NM",26,0)
PRSP PTP DM^^0
"BLD",5796,"KRN",19,"NM",27,0)
PRSP PTP SRC^^0
"BLD",5796,"KRN",19,"NM",28,0)
PRSP SUP MAIN^^0
"BLD",5796,"KRN",19,"NM",29,0)
PRSP SUP MR^^0
"BLD",5796,"KRN",19,"NM",30,0)
PRSP SUP CPPE^^0
"BLD",5796,"KRN",19,"NM",31,0)
PRSP SUP EXCEPT^^0
"BLD",5796,"KRN",19,"NM",32,0)
PRSP SUP UNLOCK^^0
"BLD",5796,"KRN",19,"NM",34,0)
PRSP PS MAIN^^0
"BLD",5796,"KRN",19,"NM",36,0)
PRSP PS DE^^0
"BLD",5796,"KRN",19,"NM",37,0)
PRSP HR DEM^^0
"BLD",5796,"KRN",19,"NM",38,0)
PRSP HR MAIN^^0
"BLD",5796,"KRN",19,"NM",39,0)
PRSP SUP DE^^0
"BLD",5796,"KRN",19,"NM",40,0)
PRSA OT MENU^^2
"BLD",5796,"KRN",19,"NM",42,0)
PRSP PS MR^^0
"BLD",5796,"KRN",19,"NM",43,0)
PRSP PS CORE HRS RPT^^0
"BLD",5796,"KRN",19,"NM",44,0)
PRSA PAY MENU^^2
"BLD",5796,"KRN",19,"NM",45,0)
PRSP TK MAIN^^0
"BLD",5796,"KRN",19,"NM",46,0)
PRSP TK CPPE^^0
"BLD",5796,"KRN",19,"NM",47,0)
PRSP TK DE^^0
"BLD",5796,"KRN",19,"NM",48,0)
PRSP TK MR^^0
"BLD",5796,"KRN",19,"NM",49,0)
PRSP PS EXCEPT^^0
"BLD",5796,"KRN",19,"NM","B","PRSA EMP MENU",17)

"BLD",5796,"KRN",19,"NM","B","PRSA OT MENU",40)

"BLD",5796,"KRN",19,"NM","B","PRSA PAY MENU",44)

"BLD",5796,"KRN",19,"NM","B","PRSA SUP MENU",19)

"BLD",5796,"KRN",19,"NM","B","PRSA TK MENU",23)

"BLD",5796,"KRN",19,"NM","B","PRSA TK POST",21)

"BLD",5796,"KRN",19,"NM","B","PRSD 05 EMPLOYEE INQUIRY MENU",16)

"BLD",5796,"KRN",19,"NM","B","PRSP EA CANCEL",5)

"BLD",5796,"KRN",19,"NM","B","PRSP EA DISPLAY",6)

"BLD",5796,"KRN",19,"NM","B","PRSP EA EDIT",4)

"BLD",5796,"KRN",19,"NM","B","PRSP EA ENTER",3)

"BLD",5796,"KRN",19,"NM","B","PRSP EA MENU",2)

"BLD",5796,"KRN",19,"NM","B","PRSP ESR EDIT",1)

"BLD",5796,"KRN",19,"NM","B","PRSP ESR SAP",20)

"BLD",5796,"KRN",19,"NM","B","PRSP HR BRP",11)

"BLD",5796,"KRN",19,"NM","B","PRSP HR DE",15)

"BLD",5796,"KRN",19,"NM","B","PRSP HR DEM",37)

"BLD",5796,"KRN",19,"NM","B","PRSP HR DFM",10)

"BLD",5796,"KRN",19,"NM","B","PRSP HR EM",8)

"BLD",5796,"KRN",19,"NM","B","PRSP HR MAIN",38)

"BLD",5796,"KRN",19,"NM","B","PRSP HR MR",13)

"BLD",5796,"KRN",19,"NM","B","PRSP HR RM",12)

"BLD",5796,"KRN",19,"NM","B","PRSP HR TM",9)

"BLD",5796,"KRN",19,"NM","B","PRSP PS CORE HRS RPT",43)

"BLD",5796,"KRN",19,"NM","B","PRSP PS DE",36)

"BLD",5796,"KRN",19,"NM","B","PRSP PS EXCEPT",49)

"BLD",5796,"KRN",19,"NM","B","PRSP PS MAIN",34)

"BLD",5796,"KRN",19,"NM","B","PRSP PS MR",42)

"BLD",5796,"KRN",19,"NM","B","PRSP PTP DE",25)

"BLD",5796,"KRN",19,"NM","B","PRSP PTP DM",26)

"BLD",5796,"KRN",19,"NM","B","PRSP PTP MENU",18)

"BLD",5796,"KRN",19,"NM","B","PRSP PTP SRC",27)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP CPPE",30)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP DE",39)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP EXCEPT",31)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP MAIN",28)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP MR",29)

"BLD",5796,"KRN",19,"NM","B","PRSP SUP UNLOCK",32)

"BLD",5796,"KRN",19,"NM","B","PRSP TK CPPE",46)

"BLD",5796,"KRN",19,"NM","B","PRSP TK DE",47)

"BLD",5796,"KRN",19,"NM","B","PRSP TK MAIN",45)

"BLD",5796,"KRN",19,"NM","B","PRSP TK MR",48)

"BLD",5796,"KRN",19,"NM","B","PRSP TK POST",22)

"BLD",5796,"KRN",19.1,0)
19.1
"BLD",5796,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",5796,"KRN",19.1,"NM",1,0)
PRSP EMP^^0
"BLD",5796,"KRN",19.1,"NM","B","PRSP EMP",1)

"BLD",5796,"KRN",101,0)
101
"BLD",5796,"KRN",409.61,0)
409.61
"BLD",5796,"KRN",771,0)
771
"BLD",5796,"KRN",870,0)
870
"BLD",5796,"KRN",8989.51,0)
8989.51
"BLD",5796,"KRN",8989.52,0)
8989.52
"BLD",5796,"KRN",8994,0)
8994
"BLD",5796,"KRN","B",.4,.4)

"BLD",5796,"KRN","B",.401,.401)

"BLD",5796,"KRN","B",.402,.402)

"BLD",5796,"KRN","B",.403,.403)

"BLD",5796,"KRN","B",.5,.5)

"BLD",5796,"KRN","B",.84,.84)

"BLD",5796,"KRN","B",3.6,3.6)

"BLD",5796,"KRN","B",3.8,3.8)

"BLD",5796,"KRN","B",9.2,9.2)

"BLD",5796,"KRN","B",9.8,9.8)

"BLD",5796,"KRN","B",19,19)

"BLD",5796,"KRN","B",19.1,19.1)

"BLD",5796,"KRN","B",101,101)

"BLD",5796,"KRN","B",409.61,409.61)

"BLD",5796,"KRN","B",771,771)

"BLD",5796,"KRN","B",870,870)

"BLD",5796,"KRN","B",8989.51,8989.51)

"BLD",5796,"KRN","B",8989.52,8989.52)

"BLD",5796,"KRN","B",8994,8994)

"BLD",5796,"QUES",0)
^9.62^^
"BLD",5796,"REQB",0)
^9.611^20^8
"BLD",5796,"REQB",10,0)
PRS*4.0*46^1
"BLD",5796,"REQB",12,0)
PRS*4.0*55^1
"BLD",5796,"REQB",14,0)
PRS*4.0*61^1
"BLD",5796,"REQB",16,0)
PRS*4.0*70^1
"BLD",5796,"REQB",17,0)
PRS*4.0*71^1
"BLD",5796,"REQB",18,0)
PRS*4.0*82^1
"BLD",5796,"REQB",19,0)
PRS*4.0*92^1
"BLD",5796,"REQB",20,0)
PRS*4.0*102^1
"BLD",5796,"REQB","B","PRS*4.0*102",20)

"BLD",5796,"REQB","B","PRS*4.0*46",10)

"BLD",5796,"REQB","B","PRS*4.0*55",12)

"BLD",5796,"REQB","B","PRS*4.0*61",14)

"BLD",5796,"REQB","B","PRS*4.0*70",16)

"BLD",5796,"REQB","B","PRS*4.0*71",17)

"BLD",5796,"REQB","B","PRS*4.0*82",18)

"BLD",5796,"REQB","B","PRS*4.0*92",19)

"FIA",458)
TIME & ATTENDANCE RECORDS
"FIA",458,0)
^PRST(458,
"FIA",458,0,0)
458
"FIA",458,0,1)
y^n^p^^^^n^^n
"FIA",458,0,10)

"FIA",458,0,11)

"FIA",458,0,"RLRO")

"FIA",458,0,"VR")
4.0^PRS
"FIA",458,458)
1
"FIA",458,458.02)
1
"FIA",458,458.02,110)

"FIA",458,458.02,111)

"FIA",458,458.02,112)

"FIA",458,458.02,113)

"FIA",458,458.02,114)

"FIA",458,458.02,115)

"FIA",458,458.02,116)

"FIA",458,458.02,117)

"FIA",458,458.02,118)

"FIA",458,458.02,119)

"FIA",458,458.02,120)

"FIA",458,458.02,121)

"FIA",458,458.02,122)

"FIA",458,458.02,123)

"FIA",458,458.02,124)

"FIA",458,458.02,125)

"FIA",458,458.02,126)

"FIA",458,458.02,127)

"FIA",458,458.02,128)

"FIA",458,458.02,129)

"FIA",458,458.02,130)

"FIA",458,458.02,131)

"FIA",458,458.02,132)

"FIA",458,458.02,133)

"FIA",458,458.02,134)

"FIA",458,458.02,135)

"FIA",458,458.02,136)

"FIA",458,458.02,137)

"FIA",458,458.02,138)

"FIA",458,458.02,139)

"FIA",458,458.02,140)

"FIA",458,458.02,141)

"FIA",458,458.02,142)

"FIA",458,458.02,143)

"FIA",458,458.02,144)

"FIA",458,458.02,145)

"FIA",458,458.02,146)

"FIA",458,458.02,147)

"FIA",458,458.02,148)

"FIA",458,458.02,149)

"FIA",458.4)
PT PHYSICIAN EXTENDED ABSENCE
"FIA",458.4,0)
^PRST(458.4,
"FIA",458.4,0,0)
458.4D
"FIA",458.4,0,1)
y^y^f^^^^n
"FIA",458.4,0,10)

"FIA",458.4,0,11)

"FIA",458.4,0,"RLRO")

"FIA",458.4,0,"VR")
4.0^PRS
"FIA",458.4,458.4)
0
"FIA",458.7)
PT PHYSICIAN MEMORANDUM
"FIA",458.7,0)
^PRST(458.7,
"FIA",458.7,0,0)
458.7P
"FIA",458.7,0,1)
y^y^f^^^^n
"FIA",458.7,0,10)

"FIA",458.7,0,11)

"FIA",458.7,0,"RLRO")

"FIA",458.7,0,"VR")
4.0^PRS
"FIA",458.7,458.7)
0
"FIA",458.7,458.701)
0
"IX",458,458,"AEA",0)
458^AEA^All Employee Action (AEA) Part time physician incompletes^R^^R^IR^W^458.02^^^^^S
"IX",458,458,"AEA",.1,0)
^^3^3^3040923^
"IX",458,458,"AEA",.1,1,0)
This index can be used to quickly find all of a part time
"IX",458,458,"AEA",.1,2,0)
physician's ESR days that have a status that requires action on 
"IX",458,458,"AEA",.1,3,0)
their part. (not started, pending, resubmit)
"IX",458,458,"AEA",1)
S ^PRST(458,"AEA",X(1),X(2),X(3),DA(2),DA(1),DA)=""
"IX",458,458,"AEA",1.4)
S X=$S($G(X(4))<4&($G(X(4))>0):1,1:0)
"IX",458,458,"AEA",2)
K ^PRST(458,"AEA",X(1),X(2),X(3),DA(2),DA(1),DA)
"IX",458,458,"AEA",2.4)

"IX",458,458,"AEA",2.5)
K ^PRST(458,"AEA")
"IX",458,458,"AEA",11.1,0)
^.114IA^4^4
"IX",458,458,"AEA",11.1,1,0)
1^C^^^^1
"IX",458,458,"AEA",11.1,1,1.5)
S X=DA(1)
"IX",458,458,"AEA",11.1,2,0)
2^C^^^^2
"IX",458,458,"AEA",11.1,2,1.5)
S X=$P(^PRST(458,DA(2),0),"^")
"IX",458,458,"AEA",11.1,3,0)
3^F^458.02^.01^^3^F
"IX",458,458,"AEA",11.1,4,0)
4^F^458.02^146^^^F
"IX",458,458,"ASA",0)
458^ASA^TEST^R^^R^IR^W^458.02^^^^^S
"IX",458,458,"ASA",.1,0)
^^2^2^3040923^
"IX",458,458,"ASA",.1,1,0)
This index promotes rapid access to all the ESR days for which a Supervisor
"IX",458,458,"ASA",.1,2,0)
of a T&L unit must take action.
"IX",458,458,"ASA",1)
S ^PRST(458,"ASA",X(1),X(2),X(3),DA(2),DA(1),DA)=""
"IX",458,458,"ASA",1.4)
S X=$S($G(X(4))=4:1,1:0)
"IX",458,458,"ASA",2)
K ^PRST(458,"ASA",X(1),X(2),X(3),DA(2),DA(1),DA)
"IX",458,458,"ASA",2.4)

"IX",458,458,"ASA",2.5)
K ^PRST(458,"ASA")
"IX",458,458,"ASA",11.1,0)
^.114IA^4^4
"IX",458,458,"ASA",11.1,1,0)
1^C^^^^1
"IX",458,458,"ASA",11.1,1,1.5)
S X=DA(1)
"IX",458,458,"ASA",11.1,2,0)
2^C^^^^2
"IX",458,458,"ASA",11.1,2,1.5)
S X=$P(^PRST(458,DA(2),0),"^")
"IX",458,458,"ASA",11.1,3,0)
3^F^458.02^.01^^3^F
"IX",458,458,"ASA",11.1,4,0)
4^F^458.02^146^^^F
"IX",458.4,458.4,"AEE",0)
458.4^AEE^Index of employee and end date.^R^^R^IR^I^458.4^^^^^S
"IX",458.4,458.4,"AEE",.1,0)
^^1^1^3041004^
"IX",458.4,458.4,"AEE",.1,1,0)
Regular compound cross-reference of employee and end date.
"IX",458.4,458.4,"AEE",1)
S ^PRST(458.4,"AEE",X(1),X(2),DA)=""
"IX",458.4,458.4,"AEE",2)
K ^PRST(458.4,"AEE",X(1),X(2),DA)
"IX",458.4,458.4,"AEE",2.5)
K ^PRST(458.4,"AEE")
"IX",458.4,458.4,"AEE",11.1,0)
^.114IA^2^2
"IX",458.4,458.4,"AEE",11.1,1,0)
1^F^458.4^2^^1^F
"IX",458.4,458.4,"AEE",11.1,2,0)
2^F^458.4^1^^2^F
"IX",458.7,458.7,"AST",0)
458.7^AST^index for rapid access to a physicians memo's by STATUS^R^^R^IR^I^458.7^^^^^S
"IX",458.7,458.7,"AST",.1,0)
^^2^2^3040924^
"IX",458.7,458.7,"AST",.1,1,0)
This index provides rapid access for all of a Physicians Memorandum's
"IX",458.7,458.7,"AST",.1,2,0)
by it's status.
"IX",458.7,458.7,"AST",1)
S ^PRST(458.7,"AST",X(1),X(2),DA)=""
"IX",458.7,458.7,"AST",2)
K ^PRST(458.7,"AST",X(1),X(2),DA)
"IX",458.7,458.7,"AST",2.5)
K ^PRST(458.7,"AST")
"IX",458.7,458.7,"AST",11.1,0)
^.114IA^2^2
"IX",458.7,458.7,"AST",11.1,1,0)
1^F^458.7^.01^^1^F
"IX",458.7,458.7,"AST",11.1,1,3)

"IX",458.7,458.7,"AST",11.1,2,0)
2^F^458.7^5^^2^F
"IX",458.7,458.7,"AST",11.1,2,3)

"KRN",.403,117,-1)
0^1
"KRN",.403,117,0)
PRSP ESR POST^^^^2920714^^^458^0^0^1
"KRN",.403,117,20)
D ESRVALID^PRSPESR1
"KRN",.403,117,40,0)
^.4031I^1^1
"KRN",.403,117,40,1,0)
1^^1,1^1^1^0
"KRN",.403,117,40,1,1)
Page 1
"KRN",.403,117,40,1,40,0)
^.4032PI^430^2
"KRN",.403,117,40,1,40,429,0)
PRSP ESR POST SEGMENTS^1^7,1^e
"KRN",.403,117,40,1,40,430,0)
PRSP PTP EMP^2^1,1^d
"KRN",.403,118,-1)
0^2
"KRN",.403,118,0)
PRSP EXT ABSENCE^@^@^^3041006.1824^^^458.4^0^0^1
"KRN",.403,118,11)
D FRMPRE^PRSPEAF
"KRN",.403,118,12)
D FRMPST^PRSPEAF
"KRN",.403,118,14)
D FRMPSV^PRSPEAF
"KRN",.403,118,20)
D FRMVAL^PRSPEAF
"KRN",.403,118,40,0)
^.4031I^1^1
"KRN",.403,118,40,1,0)
1^^1,1
"KRN",.403,118,40,1,1)
Page 1
"KRN",.403,118,40,1,40,0)
^.4032IP^431^1
"KRN",.403,118,40,1,40,431,0)
PRSP EXT ABSENCE^1^1,1^e
"KRN",.404,429,0)
PRSP ESR POST SEGMENTS^458.02^0
"KRN",.404,429,12)

"KRN",.404,429,40,0)
^.4044I^46^44
"KRN",.404,429,40,3,0)
3^START     STOP    TYPE OF TIME        REMARKS CODE       MEAL     HRS^1^
"KRN",.404,429,40,3,2)
^^1,5
"KRN",.404,429,40,4,0)
4^1^3^^ST1
"KRN",.404,429,40,4,1)
110
"KRN",.404,429,40,4,2)
3,4^7^3,2^1
"KRN",.404,429,40,4,13)
S $P(Z,"^",1)=X
"KRN",.404,429,40,5,0)
5^^3^^END1
"KRN",.404,429,40,5,1)
111
"KRN",.404,429,40,5,2)
3,14^7
"KRN",.404,429,40,5,13)
S $P(Z,"^",2)=X
"KRN",.404,429,40,6,0)
6^^3
"KRN",.404,429,40,6,1)
112
"KRN",.404,429,40,6,2)
3,24^10
"KRN",.404,429,40,6,11)
D PSTML^PRSPESR2(1)
"KRN",.404,429,40,6,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,6,13)
S $P(Z,"^",3)=X,$P(Z,"^",4)="" D PUT^DDSVAL(DIE,.DA,113,"@","","E")
"KRN",.404,429,40,6,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,7,0)
7^^3
"KRN",.404,429,40,7,1)
113
"KRN",.404,429,40,7,2)
3,37^23
"KRN",.404,429,40,7,11)
S TT=$$GET^DDSVAL(DIE,.DA,112) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,7,13)
S $P(Z,"^",4)=X
"KRN",.404,429,40,8,0)
10^2^3^^ST2
"KRN",.404,429,40,8,1)
115
"KRN",.404,429,40,8,2)
4,4^7^4,2^1
"KRN",.404,429,40,8,13)
S $P(Z,"^",6)=X
"KRN",.404,429,40,9,0)
11^^3^^END2
"KRN",.404,429,40,9,1)
116
"KRN",.404,429,40,9,2)
4,14^7
"KRN",.404,429,40,9,13)
S $P(Z,"^",7)=X
"KRN",.404,429,40,10,0)
12^^3
"KRN",.404,429,40,10,1)
117
"KRN",.404,429,40,10,2)
4,24^10
"KRN",.404,429,40,10,11)
D PSTML^PRSPESR2(2)
"KRN",.404,429,40,10,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,10,13)
S $P(Z,"^",8)=X,$P(Z,"^",9)="" D PUT^DDSVAL(DIE,.DA,118,"@","","E")
"KRN",.404,429,40,10,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,11,0)
13^^3
"KRN",.404,429,40,11,1)
118
"KRN",.404,429,40,11,2)
4,37^23
"KRN",.404,429,40,11,11)
S TT=$$GET^DDSVAL(DIE,.DA,117) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,11,13)
S $P(Z,"^",9)=X
"KRN",.404,429,40,12,0)
16^3^3^^ST3
"KRN",.404,429,40,12,1)
120
"KRN",.404,429,40,12,2)
5,4^7^5,2^1
"KRN",.404,429,40,12,13)
S $P(Z,"^",11)=X
"KRN",.404,429,40,13,0)
17^^3^^END3
"KRN",.404,429,40,13,1)
121
"KRN",.404,429,40,13,2)
5,14^7
"KRN",.404,429,40,13,13)
S $P(Z,"^",12)=X
"KRN",.404,429,40,14,0)
18^^3
"KRN",.404,429,40,14,1)
122
"KRN",.404,429,40,14,2)
5,24^10
"KRN",.404,429,40,14,11)
D PSTML^PRSPESR2(3)
"KRN",.404,429,40,14,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,14,13)
S $P(Z,"^",13)=X,$P(Z,"^",14)="" D PUT^DDSVAL(DIE,.DA,123,"@","","E")
"KRN",.404,429,40,14,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,15,0)
19^^3
"KRN",.404,429,40,15,1)
123
"KRN",.404,429,40,15,2)
5,37^23
"KRN",.404,429,40,15,11)
S TT=$$GET^DDSVAL(DIE,.DA,122) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,15,13)
S $P(Z,"^",14)=X
"KRN",.404,429,40,16,0)
22^4^3^^ST4
"KRN",.404,429,40,16,1)
125
"KRN",.404,429,40,16,2)
6,4^7^6,2^1
"KRN",.404,429,40,16,13)
S $P(Z,"^",16)=X
"KRN",.404,429,40,17,0)
23^^3^^END4
"KRN",.404,429,40,17,1)
126
"KRN",.404,429,40,17,2)
6,14^7
"KRN",.404,429,40,17,13)
S $P(Z,"^",17)=X
"KRN",.404,429,40,18,0)
24^^3
"KRN",.404,429,40,18,1)
127
"KRN",.404,429,40,18,2)
6,24^10
"KRN",.404,429,40,18,11)
D PSTML^PRSPESR2(4)
"KRN",.404,429,40,18,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,18,13)
S $P(Z,"^",18)=X,$P(Z,"^",19)="" D PUT^DDSVAL(DIE,.DA,128,"@","","E")
"KRN",.404,429,40,18,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,19,0)
25^^3
"KRN",.404,429,40,19,1)
128
"KRN",.404,429,40,19,2)
6,37^23
"KRN",.404,429,40,19,11)
S TT=$$GET^DDSVAL(DIE,.DA,127) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,19,13)
S $P(Z,"^",19)=X
"KRN",.404,429,40,20,0)
28^5^3^^ST5
"KRN",.404,429,40,20,1)
130
"KRN",.404,429,40,20,2)
7,4^7^7,2^1
"KRN",.404,429,40,20,13)
S $P(Z,"^",21)=X
"KRN",.404,429,40,21,0)
29^^3^^END5
"KRN",.404,429,40,21,1)
131
"KRN",.404,429,40,21,2)
7,14^7
"KRN",.404,429,40,21,13)
S $P(Z,"^",22)=X
"KRN",.404,429,40,22,0)
30^^3
"KRN",.404,429,40,22,1)
132
"KRN",.404,429,40,22,2)
7,24^10
"KRN",.404,429,40,22,11)
D PSTML^PRSPESR2(5)
"KRN",.404,429,40,22,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,22,13)
S $P(Z,"^",23)=X,$P(Z,"^",24)="" D PUT^DDSVAL(DIE,.DA,133,"@","","E")
"KRN",.404,429,40,22,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,23,0)
31^^3
"KRN",.404,429,40,23,1)
133
"KRN",.404,429,40,23,2)
7,37^23
"KRN",.404,429,40,23,11)
S TT=$$GET^DDSVAL(DIE,.DA,132) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,23,13)
S $P(Z,"^",24)=X
"KRN",.404,429,40,24,0)
34^6^3^^ST6
"KRN",.404,429,40,24,1)
135
"KRN",.404,429,40,24,2)
8,4^7^8,2^1
"KRN",.404,429,40,24,13)
S $P(Z,"^",26)=X
"KRN",.404,429,40,25,0)
35^^3^^END6
"KRN",.404,429,40,25,1)
136
"KRN",.404,429,40,25,2)
8,14^7
"KRN",.404,429,40,25,13)
S $P(Z,"^",27)=X
"KRN",.404,429,40,26,0)
36^^3
"KRN",.404,429,40,26,1)
137
"KRN",.404,429,40,26,2)
8,24^10
"KRN",.404,429,40,26,11)
D PSTML^PRSPESR2(6)
"KRN",.404,429,40,26,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,26,13)
S $P(Z,"^",28)=X,$P(Z,"^",29)="" D PUT^DDSVAL(DIE,.DA,138,"@","","E")
"KRN",.404,429,40,26,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,27,0)
37^^3
"KRN",.404,429,40,27,1)
138
"KRN",.404,429,40,27,2)
8,37^23
"KRN",.404,429,40,27,11)
S TT=$$GET^DDSVAL(DIE,.DA,137) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,27,13)
S $P(Z,"^",29)=X
"KRN",.404,429,40,28,0)
40^7^3^^ST7
"KRN",.404,429,40,28,1)
140
"KRN",.404,429,40,28,2)
9,4^7^9,2^1
"KRN",.404,429,40,28,13)
S $P(Z,"^",31)=X
"KRN",.404,429,40,29,0)
41^^3^^END7
"KRN",.404,429,40,29,1)
141
"KRN",.404,429,40,29,2)
9,14^7
"KRN",.404,429,40,29,13)
S $P(Z,"^",32)=X
"KRN",.404,429,40,30,0)
42^^3
"KRN",.404,429,40,30,1)
142
"KRN",.404,429,40,30,2)
9,24^10
"KRN",.404,429,40,30,11)
D PSTML^PRSPESR2(7)
"KRN",.404,429,40,30,12)
I X="ML" D HLP^DDSUTL("Please verify that at least one hour of Military Leave has been requested.")
"KRN",.404,429,40,30,13)
S $P(Z,"^",33)=X,$P(Z,"^",34)="" D PUT^DDSVAL(DIE,.DA,143,"@","","E")
"KRN",.404,429,40,30,14)
D VALIDTT^PRSPESR2
"KRN",.404,429,40,31,0)
43^^3
"KRN",.404,429,40,31,1)
143
"KRN",.404,429,40,31,2)
9,37^23
"KRN",.404,429,40,31,11)
S TT=$$GET^DDSVAL(DIE,.DA,142) S:TT=""!(TT="RG") TT="*" S:TT="WP" TT="AL"
"KRN",.404,429,40,31,13)
S $P(Z,"^",34)=X
"KRN",.404,429,40,32,0)
46^REMARKS^3
"KRN",.404,429,40,32,1)
145
"KRN",.404,429,40,32,2)
11,11^60^11,1
"KRN",.404,429,40,32,13)
S $P(Z,"^",36)=X
"KRN",.404,429,40,33,0)
44^^3
"KRN",.404,429,40,33,1)
144
"KRN",.404,429,40,33,2)
9,63^2
"KRN",.404,429,40,33,13)
S $P(Z,"^",35)=X
"KRN",.404,429,40,33,14)
D OVEREAT^PRSPESR2(7)
"KRN",.404,429,40,34,0)
45^^4
"KRN",.404,429,40,34,2)
9,69^5
"KRN",.404,429,40,34,4)
^^1
"KRN",.404,429,40,34,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-7},{ESR START TIME-7},{ESR STOP TIME-7})
"KRN",.404,429,40,35,0)
38^^3
"KRN",.404,429,40,35,1)
139
"KRN",.404,429,40,35,2)
8,63^2
"KRN",.404,429,40,35,13)
S $P(Z,"^",30)=X
"KRN",.404,429,40,35,14)
D OVEREAT^PRSPESR2(6)
"KRN",.404,429,40,36,0)
39^^4^^HR6
"KRN",.404,429,40,36,2)
8,69^5
"KRN",.404,429,40,36,4)
^^1
"KRN",.404,429,40,36,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-6},{ESR START TIME-6},{ESR STOP TIME-6})
"KRN",.404,429,40,37,0)
33^^4^^HR5
"KRN",.404,429,40,37,2)
7,69^5
"KRN",.404,429,40,37,4)
^^1
"KRN",.404,429,40,37,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-5},{ESR START TIME-5},{ESR STOP TIME-5})
"KRN",.404,429,40,38,0)
32^^3
"KRN",.404,429,40,38,1)
134
"KRN",.404,429,40,38,2)
7,63^2
"KRN",.404,429,40,38,13)
S $P(Z,"^",25)=X
"KRN",.404,429,40,38,14)
D OVEREAT^PRSPESR2(5)
"KRN",.404,429,40,39,0)
27^^4
"KRN",.404,429,40,39,2)
6,69^5
"KRN",.404,429,40,39,4)
^^1
"KRN",.404,429,40,39,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-4},{ESR START TIME-4},{ESR STOP TIME-4})
"KRN",.404,429,40,40,0)
26^^3
"KRN",.404,429,40,40,1)
129
"KRN",.404,429,40,40,2)
6,63^2
"KRN",.404,429,40,40,13)
S $P(Z,"^",20)=X
"KRN",.404,429,40,40,14)
D OVEREAT^PRSPESR2(4)
"KRN",.404,429,40,41,0)
21^^4
"KRN",.404,429,40,41,2)
5,69^5
"KRN",.404,429,40,41,4)
^^1
"KRN",.404,429,40,41,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-3},{ESR START TIME-3},{ESR STOP TIME-3})
"KRN",.404,429,40,42,0)
20^^3
"KRN",.404,429,40,42,1)
124
"KRN",.404,429,40,42,2)
5,63^2
"KRN",.404,429,40,42,13)
S $P(Z,"^",15)=X
"KRN",.404,429,40,42,14)
D OVEREAT^PRSPESR2(3)
"KRN",.404,429,40,43,0)
15^^4
"KRN",.404,429,40,43,2)
4,69^5
"KRN",.404,429,40,43,4)
^^1
"KRN",.404,429,40,43,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-2},{ESR START TIME-2},{ESR STOP TIME-2})
"KRN",.404,429,40,44,0)
14^^3
"KRN",.404,429,40,44,1)
119
"KRN",.404,429,40,44,2)
4,63^2
"KRN",.404,429,40,44,13)
S $P(Z,"^",10)=X
"KRN",.404,429,40,44,14)
D OVEREAT^PRSPESR2(2)
"KRN",.404,429,40,45,0)
9^^4
"KRN",.404,429,40,45,2)
3,69^5
"KRN",.404,429,40,45,4)
^^1
"KRN",.404,429,40,45,30)
S Y=$$ELAPSE^PRSPESR2({ESR MEAL TIME-1},{ESR START TIME-1},{ESR STOP TIME-1})
"KRN",.404,429,40,46,0)
8^^3
"KRN",.404,429,40,46,1)
114
"KRN",.404,429,40,46,2)
3,63^2
"KRN",.404,429,40,46,13)
S $P(Z,U,5)=X
"KRN",.404,429,40,46,14)
D OVEREAT^PRSPESR2(1)
"KRN",.404,430,0)
PRSP PTP EMP^458.02
"KRN",.404,430,40,0)
^.4044I^8^8
"KRN",.404,430,40,1,0)
2^VA TIME & ATTENDANCE SYSTEM^1^
"KRN",.404,430,40,1,2)
^^1,27^
"KRN",.404,430,40,2,0)
1^!M^1^
"KRN",.404,430,40,2,.1)
S Y=$P($G(^PRSPC(PRSIEN,0)),"^",1)
"KRN",.404,430,40,2,2)
^^1,1
"KRN",.404,430,40,3,0)
3^!M^1^
"KRN",.404,430,40,3,.1)
S Y=$P($G(^PRSPC(PRSIEN,0)),"^",9) S:Y'="" Y="XXX-XX-"_$E(Y,6,9)
"KRN",.404,430,40,3,2)
^^1,69
"KRN",.404,430,40,4,0)
4^!M^1^
"KRN",.404,430,40,4,.1)
S Y="Station: "_$P($G(^PRSPC(PRSIEN,0)),"^",7)
"KRN",.404,430,40,4,2)
^^2,1
"KRN",.404,430,40,5,0)
7^!M^1^
"KRN",.404,430,40,5,.1)
S Y=$G(PRSDTE)
"KRN",.404,430,40,5,2)
^^3,34
"KRN",.404,430,40,6,0)
6^!M^1^
"KRN",.404,430,40,6,.1)
S Y="T&L: "_$P($G(^PRSPC(PRSIEN,0)),"^",8)
"KRN",.404,430,40,6,2)
^^2,72
"KRN",.404,430,40,7,0)
5^Tour Beginning^1^
"KRN",.404,430,40,7,2)
^^2,34^
"KRN",.404,430,40,8,0)
8^!M^1^
"KRN",.404,430,40,8,.1)
S Y="Tour: "_Y31_"  Meal: "_PRSML
"KRN",.404,430,40,8,2)
^^5,1
"KRN",.404,431,0)
PRSP EXT ABSENCE^458.4^0
"KRN",.404,431,15,0)
^^1^1^3041006^
"KRN",.404,431,15,1,0)
This form is used to enter or edit an extended absence.
"KRN",.404,431,40,0)
^.4044I^6^6
"KRN",.404,431,40,1,0)
1^VA TIME & ATTENDANCE SYSTEM^1
"KRN",.404,431,40,1,2)
^^1,27
"KRN",.404,431,40,2,0)
2^!M^1
"KRN",.404,431,40,2,.1)
S Y=$S($G(PRSEANEW):"ENTER",1:"EDIT")_" EXTENDED ABSENCE"
"KRN",.404,431,40,2,2)
^^2,29
"KRN",.404,431,40,3,0)
3^!M^1
"KRN",.404,431,40,3,.1)
S Y=$P(^PRSPC(PRSIEN,0),"^",1)
"KRN",.404,431,40,3,2)
^^4,1
"KRN",.404,431,40,4,0)
4^FROM DATE^3
"KRN",.404,431,40,4,1)
.01
"KRN",.404,431,40,4,2)
6,12^11^6,1
"KRN",.404,431,40,4,14)
D FVAL01^PRSPEAF
"KRN",.404,431,40,5,0)
5^TO DATE^3
"KRN",.404,431,40,5,1)
1
"KRN",.404,431,40,5,2)
8,10^11^8,1
"KRN",.404,431,40,5,14)
D FVAL1^PRSPEAF
"KRN",.404,431,40,6,0)
6^REMARKS^3
"KRN",.404,431,40,6,1)
6
"KRN",.404,431,40,6,2)
16,10^60^16,1
"KRN",19,5851,-1)
2^16
"KRN",19,5851,0)
PRSD 05 EMPLOYEE INQUIRY MENU^Employee Inquiry/Reports Menu^^M^.5^^^^^^^^^1
"KRN",19,5851,10,0)
^19.01IP^10^10
"KRN",19,5851,10,9,0)
12175^9^9
"KRN",19,5851,10,9,"^")
PRSP HR MAIN
"KRN",19,5851,"U")
EMPLOYEE INQUIRY/REPORTS MENU
"KRN",19,5859,-1)
2^44
"KRN",19,5859,0)
PRSA PAY MENU^Payroll Main Menu^^M^12222^^^^^^^408^^1^
"KRN",19,5859,10,0)
^19.01IP^33^33
"KRN",19,5859,10,33,0)
12320^16
"KRN",19,5859,10,33,"^")
PRSP PS MAIN
"KRN",19,5859,"U")
PAYROLL MAIN MENU
"KRN",19,5860,-1)
2^23
"KRN",19,5860,0)
PRSA TK MENU^TimeKeeper Main Menu^^M^.5^^^^^^^^^1^
"KRN",19,5860,10,0)
^19.01IP^27^27
"KRN",19,5860,10,4,0)
5870^1
"KRN",19,5860,10,4,"^")
PRSA TK POST
"KRN",19,5860,10,27,0)
12681^17
"KRN",19,5860,10,27,"^")
PRSP TK MAIN
"KRN",19,5860,"U")
TIMEKEEPER MAIN MENU
"KRN",19,5870,-1)
0^21
"KRN",19,5870,0)
PRSA TK POST^Post Employee Time^^R^^^^^^^^
"KRN",19,5870,1,0)
^19.06^5^5^3050325^^^^
"KRN",19,5870,1,1,0)
This option allows the Timekeeper to post timecard data on employees. The
"KRN",19,5870,1,2,0)
Timekeeper is prompted for a date and whether or not to post the employees
"KRN",19,5870,1,3,0)
timecards in alphabetical order.  A different option must be used if time
"KRN",19,5870,1,4,0)
has to be posted for a part-time physician who has a Memorandum of Service
"KRN",19,5870,1,5,0)
Level Expectations.
"KRN",19,5870,25)
PRSATP
"KRN",19,5870,99)
55612,45269
"KRN",19,5870,"U")
POST EMPLOYEE TIME
"KRN",19,5872,-1)
2^17
"KRN",19,5872,0)
PRSA EMP MENU^Employee Menu^^M^12222^^^^^^^^^1^
"KRN",19,5872,10,0)
^19.01IP^13^13
"KRN",19,5872,10,12,0)
12187^11^
"KRN",19,5872,10,12,"^")
PRSP PTP MENU
"KRN",19,5872,"U")
EMPLOYEE MENU
"KRN",19,5873,-1)
2^19
"KRN",19,5873,0)
PRSA SUP MENU^T&A Supervisor Menu^^M^.5^^^^^^^408^^1^
"KRN",19,5873,10,0)
^19.01IP^15^15
"KRN",19,5873,10,15,0)
12318^15
"KRN",19,5873,10,15,"^")
PRSP SUP MAIN
"KRN",19,5873,"U")
T&A SUPERVISOR MENU
"KRN",19,5919,-1)
2^40
"KRN",19,5919,0)
PRSA OT MENU^T&A OT/Supervisor Menu^^M^.5^^^^^^^408^^1^
"KRN",19,5919,10,0)
^19.01IP^16^16
"KRN",19,5919,10,16,0)
12318^16
"KRN",19,5919,10,16,"^")
PRSP SUP MAIN
"KRN",19,5919,"U")
T&A OT/SUPERVISOR MENU
"KRN",19,12156,-1)
0^1
"KRN",19,12156,0)
PRSP ESR EDIT^Electronic Subsidiary Record-Daily Enter/Edit^^R^^^^^^^^PAID
"KRN",19,12156,1,0)
^19.06^19^19^3050211^^^^
"KRN",19,12156,1,1,0)
The primary purpose of this option is to allow part-time
"KRN",19,12156,1,2,0)
physicians with a Memorandum of Service Level Expectations to
"KRN",19,12156,1,3,0)
record time and leave on their daily electronic subsidiary record
"KRN",19,12156,1,4,0)
(ESR).  This option presents a list of pay periods for the
"KRN",19,12156,1,5,0)
part-time physician to select.  Any pay period that appears in the
"KRN",19,12156,1,6,0)
selection list must have one or more days that are in a status
"KRN",19,12156,1,7,0)
that requires some action from the part-time physician.  Once a pay
"KRN",19,12156,1,8,0)
period is selected, the option presents a summary of the memorandum
"KRN",19,12156,1,9,0)
that contains the pay period and a summary of each day within that
"KRN",19,12156,1,10,0)
pay period.  The physician can select any day in the pay period
"KRN",19,12156,1,11,0)
that is not yet approved.  Once a day is selected, the option
"KRN",19,12156,1,12,0)
presents a form that allows the part-time physician to edit and
"KRN",19,12156,1,13,0)
electronically sign their time and leave for that day. 
"KRN",19,12156,1,14,0)

"KRN",19,12156,1,15,0)
Secondarily, this option will also present the part-time physician
"KRN",19,12156,1,16,0)
with any recently ended memoranda.  Any such memoranda will appear
"KRN",19,12156,1,17,0)
first in the selection list.  If selected, the option allows the 
"KRN",19,12156,1,18,0)
part-time physician to review the memorandum and select a 
"KRN",19,12156,1,19,0)
reconciliation option. 
"KRN",19,12156,10.1)
ESR Edit/Update
"KRN",19,12156,25)
MAIN^PRSPESR
"KRN",19,12156,"U")
ELECTRONIC SUBSIDIARY RECORD-D
"KRN",19,12161,-1)
0^3
"KRN",19,12161,0)
PRSP EA ENTER^Enter Extended Absence^^R^^^^^^^^PAID
"KRN",19,12161,1,0)
^19.06^7^7^3050211^^^^
"KRN",19,12161,1,1,0)
This option allows a part-time physician to specify a future
"KRN",19,12161,1,2,0)
period of time when they will not be performing work for the
"KRN",19,12161,1,3,0)
VA (extended absence).  The physician will not need to
"KRN",19,12161,1,4,0)
manually update their ESR during the absence.  The software
"KRN",19,12161,1,5,0)
will automatically change the status of daily ESRs, with a
"KRN",19,12161,1,6,0)
scheduled tour of duty, to SIGNED, if those days are covered
"KRN",19,12161,1,7,0)
by the period of extended absence.
"KRN",19,12161,25)
PRSPEAN
"KRN",19,12161,"U")
ENTER EXTENDED ABSENCE
"KRN",19,12162,-1)
0^4
"KRN",19,12162,0)
PRSP EA EDIT^Edit Extended Absence^^R^^^^^^^^PAID
"KRN",19,12162,1,0)
^19.06^6^6^3050222^^^^
"KRN",19,12162,1,1,0)
This option allows the part-time physician to edit a previously entered
"KRN",19,12162,1,2,0)
extended absence.  The software will automatically update the current
"KRN",19,12162,1,3,0)
and future days on the ESR as necessary.  However, any ESR days prior to
"KRN",19,12162,1,4,0)
the current day will not be automatically modified when an extended
"KRN",19,12162,1,5,0)
absence is edited.  An extended absence can not be edited when the To Date
"KRN",19,12162,1,6,0)
is prior to the current day. 
"KRN",19,12162,25)
PRSPEAE
"KRN",19,12162,"U")
EDIT EXTENDED ABSENCE
"KRN",19,12163,-1)
0^5
"KRN",19,12163,0)
PRSP EA CANCEL^Cancel Extended Absence^^R^^^^^^^^PAID
"KRN",19,12163,1,0)
^19.06^6^6^3050222^^^^
"KRN",19,12163,1,1,0)
This option allows the part-time physician to cancel a previously
"KRN",19,12163,1,2,0)
entered extended absence.  The software will automatically update the
"KRN",19,12163,1,3,0)
current and future days on the ESR as necessary.  However, any ESR days
"KRN",19,12163,1,4,0)
prior to the current day will not be automatically modified when an
"KRN",19,12163,1,5,0)
extended absence is cancelled.  An extended absence can not be cancelled
"KRN",19,12163,1,6,0)
if its To Date is prior to the current day. 
"KRN",19,12163,25)
PRSPEAX
"KRN",19,12163,"U")
CANCEL EXTENDED ABSENCE
"KRN",19,12164,-1)
0^2
"KRN",19,12164,0)
PRSP EA MENU^Extended Absence^^M^^^^^^^^PAID
"KRN",19,12164,1,0)
^19.06^1^1^3050122^^^
"KRN",19,12164,1,1,0)
The menu contains options related to maintaining extended absence records.
"KRN",19,12164,10,0)
^19.01IP^4^4
"KRN",19,12164,10,1,0)
12161^1^1
"KRN",19,12164,10,1,"^")
PRSP EA ENTER
"KRN",19,12164,10,2,0)
12162^2^2
"KRN",19,12164,10,2,"^")
PRSP EA EDIT
"KRN",19,12164,10,3,0)
12163^3^3
"KRN",19,12164,10,3,"^")
PRSP EA CANCEL
"KRN",19,12164,10,4,0)
12165^4^4
"KRN",19,12164,10,4,"^")
PRSP EA DISPLAY
"KRN",19,12164,99)
60689,43682
"KRN",19,12164,"U")
EXTENDED ABSENCE
"KRN",19,12165,-1)
0^6
"KRN",19,12165,0)
PRSP EA DISPLAY^Display Extended Absence^^R^^^^^^^^PAID
"KRN",19,12165,1,0)
^19.06^2^2^3041025^^
"KRN",19,12165,1,1,0)
This option allows a user to display a list of their extended absence 
"KRN",19,12165,1,2,0)
records that end on or after a specified date.
"KRN",19,12165,25)
PRSPEAD
"KRN",19,12165,"U")
DISPLAY EXTENDED ABSENCE
"KRN",19,12171,-1)
0^8
"KRN",19,12171,0)
PRSP HR EM^Enter Memoranda^^R^^^^^^^^PAID
"KRN",19,12171,1,0)
^^2^2^3050302^
"KRN",19,12171,1,1,0)
This option allows Human Resources to enter Memoranda of Service Level
"KRN",19,12171,1,2,0)
Expectations for part-time physicians.
"KRN",19,12171,25)
MAIN^PRSPEM
"KRN",19,12171,"U")
ENTER MEMORANDA
"KRN",19,12172,-1)
0^9
"KRN",19,12172,0)
PRSP HR TM^Terminate Memoranda^^R^^^^^^^^PAID
"KRN",19,12172,1,0)
^^2^2^3050302^
"KRN",19,12172,1,1,0)
This option allows Human Resources to terminate Memoranda of Service
"KRN",19,12172,1,2,0)
Level Expectations for part-time physicians.
"KRN",19,12172,25)
MAIN^PRSPTM
"KRN",19,12172,"U")
TERMINATE MEMORANDA
"KRN",19,12173,-1)
0^10
"KRN",19,12173,0)
PRSP HR DFM^Delete Future Memoranda^^R^^^^^^^^PAID
"KRN",19,12173,1,0)
^^4^4^3050302^
"KRN",19,12173,1,1,0)
This option allows Human Resources to delete Memoranda of Service Level
"KRN",19,12173,1,2,0)
Expectations for part-time physicians.  The first pay period covered must
"KRN",19,12173,1,3,0)
either not be open or if opened, the part-time physician's timecard must
"KRN",19,12173,1,4,0)
be in the status of TIMEKEEPER.
"KRN",19,12173,25)
MAIN^PRSPDFM
"KRN",19,12173,"U")
DELETE FUTURE MEMORANDA
"KRN",19,12174,-1)
0^11
"KRN",19,12174,0)
PRSP HR BRP^Begin Reconciliation Process^^R^^^^^^^^PAID
"KRN",19,12174,1,0)
^19.06^2^2^3050122^^^
"KRN",19,12174,1,1,0)
This option allows Human Resources to review part-time physician
"KRN",19,12174,1,2,0)
Memoranda and to begin its reconciliation.
"KRN",19,12174,25)
MAIN^PRSPBRP
"KRN",19,12174,"U")
BEGIN RECONCILIATION PROCESS
"KRN",19,12175,-1)
0^38
"KRN",19,12175,0)
PRSP HR MAIN^PT Physician Menu^^M^^^^^^^^PAID
"KRN",19,12175,1,0)
^19.06^3^3^3050317^^
"KRN",19,12175,1,1,0)
This option will allow the Human Resources user to access a menu of
"KRN",19,12175,1,2,0)
options related to the processing of part-time physicians with Memoranda
"KRN",19,12175,1,3,0)
of Service Level Expectations.
"KRN",19,12175,10,0)
^19.01IP^8^8
"KRN",19,12175,10,1,0)
12171^1^1
"KRN",19,12175,10,1,"^")
PRSP HR EM
"KRN",19,12175,10,2,0)
12172^2^2
"KRN",19,12175,10,2,"^")
PRSP HR TM
"KRN",19,12175,10,3,0)
12173^3^3
"KRN",19,12175,10,3,"^")
PRSP HR DFM
"KRN",19,12175,10,4,0)
12174^4^4
"KRN",19,12175,10,4,"^")
PRSP HR BRP
"KRN",19,12175,10,5,0)
12176^5^5
"KRN",19,12175,10,5,"^")
PRSP HR RM
"KRN",19,12175,10,6,0)
12177^6^6
"KRN",19,12175,10,6,"^")
PRSP HR MR
"KRN",19,12175,10,7,0)
12317^7^7
"KRN",19,12175,10,7,"^")
PRSP HR DEM
"KRN",19,12175,10,8,0)
12179^8^8
"KRN",19,12175,10,8,"^")
PRSP HR DE
"KRN",19,12175,99)
60689,43682
"KRN",19,12175,"U")
PT PHYSICIAN MENU
"KRN",19,12176,-1)
0^12
"KRN",19,12176,0)
PRSP HR RM^Reconcile Memoranda^^R^^^^^^^^PAID
"KRN",19,12176,1,0)
^19.06^2^2^3050122^^^^
"KRN",19,12176,1,1,0)
This option allows Human Resources to review part-time physicians memoranda
"KRN",19,12176,1,2,0)
and to complete its reconciliation.
"KRN",19,12176,25)
MAIN^PRSPRM
"KRN",19,12176,"U")
RECONCILE MEMORANDA
"KRN",19,12177,-1)
0^13
"KRN",19,12177,0)
PRSP HR MR^Memoranda Report^^R^^^^^^^^PAID
"KRN",19,12177,1,0)
^19.06^1^1^3050122^^^^
"KRN",19,12177,1,1,0)
This option allows Human Resources to review a part-time physician's memoranda.
"KRN",19,12177,25)
PAY^PRSPDM
"KRN",19,12177,"U")
MEMORANDA REPORT
"KRN",19,12179,-1)
0^15
"KRN",19,12179,0)
PRSP HR DE^Display Pay Period ESR^^R^^^^^^^^PAID
"KRN",19,12179,1,0)
^19.06^2^2^3050122^^^^
"KRN",19,12179,1,1,0)
This option lets Human Resources review a part-time physician's ESR
"KRN",19,12179,1,2,0)
for the selected pay period.
"KRN",19,12179,25)
PAY^PRSPDESR
"KRN",19,12179,"U")
DISPLAY PAY PERIOD ESR
"KRN",19,12181,-1)
0^20
"KRN",19,12181,0)
PRSP ESR SAP^Approve Signed ESRs^^R^^^^^^^^PAID
"KRN",19,12181,1,0)
^19.06^7^7^3050222^^^^
"KRN",19,12181,1,1,0)
A T&A Supervisor of a part-time physician is required to review and take
"KRN",19,12181,1,2,0)
one of the following actions on each signed day of the part-time
"KRN",19,12181,1,3,0)
physician's ESR: (A)pprove, (B)ypass or mark the ESR for (R)esubmission.
"KRN",19,12181,1,4,0)
When the T&A Supervisor approves a signed daily ESR, this option
"KRN",19,12181,1,5,0)
attempts to update the part-time physician's timecard for that day. 
"KRN",19,12181,1,6,0)
Updates to the timecard will be screened based on the status of the
"KRN",19,12181,1,7,0)
timecard and the effect of any potential update. 
"KRN",19,12181,10.1)
Approve ESRs
"KRN",19,12181,25)
MAIN^PRSPSAP
"KRN",19,12181,"U")
APPROVE SIGNED ESRS
"KRN",19,12182,-1)
0^22
"KRN",19,12182,0)
PRSP TK POST^Post PT Physician Time^^R^^^^^^^^PAID^^1^1
"KRN",19,12182,1,0)
^^9^9^3050302^
"KRN",19,12182,1,1,0)
This option allows the timekeeper to post timecard data for a 
"KRN",19,12182,1,2,0)
part-time physician that has a Memoranda of Service Level
"KRN",19,12182,1,3,0)
Expectations.  This action should only be done at the direction of the
"KRN",19,12182,1,4,0)
T&L Supervisor when the physician's Electronic Subsidiary Record
"KRN",19,12182,1,5,0)
(ESR) can not be completed before timecard certification for the pay
"KRN",19,12182,1,6,0)
period.  Unscheduled regular time (RG) will only be tracked via the
"KRN",19,12182,1,7,0)
ESR, and can not be posted to the timecard.  The timekeeper is
"KRN",19,12182,1,8,0)
prompted for a date and whether or not to post the timecards in 
"KRN",19,12182,1,9,0)
alphabetical order.
"KRN",19,12182,15)
K PTPF
"KRN",19,12182,20)
S PTPF=1
"KRN",19,12182,25)
PRSATP
"KRN",19,12182,"U")
POST PT PHYSICIAN TIME
"KRN",19,12187,-1)
0^18
"KRN",19,12187,0)
PRSP PTP MENU^PT Physician With Memorandum Menu^^M^^PRSP EMP^^^^^^PAID
"KRN",19,12187,1,0)
^19.06^4^4^3050317^^^^
"KRN",19,12187,1,1,0)
This menu option contains a list of options to allow part-time
"KRN",19,12187,1,2,0)
physicians with Memoranda of Service Level Expectations to perform
"KRN",19,12187,1,3,0)
the necessary actions related to the tracking of their Time and
"KRN",19,12187,1,4,0)
Attendance.
"KRN",19,12187,10,0)
^19.01IP^6^6
"KRN",19,12187,10,1,0)
12156^1^1
"KRN",19,12187,10,1,"^")
PRSP ESR EDIT
"KRN",19,12187,10,2,0)
12164^2^2
"KRN",19,12187,10,2,"^")
PRSP EA MENU
"KRN",19,12187,10,3,0)
12189^3^3
"KRN",19,12187,10,3,"^")
PRSP PTP DE
"KRN",19,12187,10,5,0)
12188^5^5
"KRN",19,12187,10,5,"^")
PRSP PTP SRC
"KRN",19,12187,10,6,0)
12316^4^4
"KRN",19,12187,10,6,"^")
PRSP PTP DM
"KRN",19,12187,99)
60689,43682
"KRN",19,12187,"U")
PT PHYSICIAN WITH MEMORANDUM M
"KRN",19,12188,-1)
0^27
"KRN",19,12188,0)
PRSP PTP SRC^Select Reconciliation Choice^^R^^^^^^^^PAID
"KRN",19,12188,1,0)
^19.06^2^2^3050128^^^^
"KRN",19,12188,1,1,0)
This option allows the part-time physician to review a recently ended
"KRN",19,12188,1,2,0)
memorandum and to select a reconciliation option.
"KRN",19,12188,3.91,0)
^19.391
"KRN",19,12188,25)
MAIN^PRSPSRC(0,0)
"KRN",19,12188,"U")
SELECT RECONCILIATION CHOICE
"KRN",19,12189,-1)
0^25
"KRN",19,12189,0)
PRSP PTP DE^Display Pay Period ESR^^R^^^^^^^^PAID
"KRN",19,12189,1,0)
^19.06^2^2^3050122^^^^
"KRN",19,12189,1,1,0)
This options allows the part-time physician to review their daily ESR
"KRN",19,12189,1,2,0)
records for the selected pay period.
"KRN",19,12189,25)
EMP^PRSPDESR
"KRN",19,12189,"U")
DISPLAY PAY PERIOD ESR
"KRN",19,12190,-1)
0^39
"KRN",19,12190,0)
PRSP SUP DE^Display Pay Period ESR^^R^^^^^^^^PAID
"KRN",19,12190,1,0)
^19.06^2^2^3050122^^^^
"KRN",19,12190,1,1,0)
This option allows the supervisor to review the part-time physician's
"KRN",19,12190,1,2,0)
daily ESR record for the selected pay period.
"KRN",19,12190,25)
SUP^PRSPDESR
"KRN",19,12190,"U")
DISPLAY PAY PERIOD ESR
"KRN",19,12307,-1)
0^29
"KRN",19,12307,0)
PRSP SUP MR^Memoranda Report^^R^^^^^^^^PAID
"KRN",19,12307,1,0)
^19.06^1^1^3050122^^^^
"KRN",19,12307,1,1,0)
This option lets supervisors review a part-time physician's memoranda.
"KRN",19,12307,25)
SUP^PRSPDM
"KRN",19,12307,"U")
MEMORANDA REPORT
"KRN",19,12308,-1)
0^30
"KRN",19,12308,0)
PRSP SUP CPPE^Display PP ESR Exceptions^^R^^^^^^^^PAID
"KRN",19,12308,1,0)
^19.06^2^2^3050122^^^
"KRN",19,12308,1,1,0)
This option allows supervisors to review daily ESR exceptions for
"KRN",19,12308,1,2,0)
part-time physicians with Memoranda of Service Level Expectations.
"KRN",19,12308,25)
SUP^PRSPCPPE
"KRN",19,12308,"U")
DISPLAY PP ESR EXCEPTIONS
"KRN",19,12309,-1)
0^31
"KRN",19,12309,0)
PRSP SUP EXCEPT^ESR Exceptions For Entire Memoranda^^R^^^^^^^^PAID
"KRN",19,12309,1,0)
^19.06^2^2^3050122^^^^
"KRN",19,12309,1,1,0)
This option allows supervisors to identify any incomplete daily ESRs
"KRN",19,12309,1,2,0)
that occurred during the part-time physician's memoranda.
"KRN",19,12309,25)
SUP^PRSPEEM
"KRN",19,12309,"U")
ESR EXCEPTIONS FOR ENTIRE MEMO
"KRN",19,12310,-1)
0^32
"KRN",19,12310,0)
PRSP SUP UNLOCK^Unlock Daily ESR^^R^^^^^^^^PAID
"KRN",19,12310,1,0)
^^10^10^3050715^
"KRN",19,12310,1,1,0)
This option allows supervisors to unlock prior pay period ESRs, so the
"KRN",19,12310,1,2,0)
part-time physician can change or complete any incomplete daily ESRs.
"KRN",19,12310,1,3,0)
If a timecard has a status of payroll or transmitted, the unlock option
"KRN",19,12310,1,4,0)
will only return the ESR to the physician, by way of setting the status to
"KRN",19,12310,1,5,0)
resubmit.  The timecard will not be modified.  If the re-approval of the
"KRN",19,12310,1,6,0)
ESR will impact the timecard (i.e. change to leave on a scheduled day)
"KRN",19,12310,1,7,0)
then either a corrected timecard will be required prior to approval or the
"KRN",19,12310,1,8,0)
timecard may be returned to timekeeper.  If a timecard has a status of
"KRN",19,12310,1,9,0)
timekeeper, then the option, Unlock Daily ESR, will clear any timecard
"KRN",19,12310,1,10,0)
postings and reset the status to not posted.
"KRN",19,12310,25)
SUP^PRSPUE
"KRN",19,12310,"U")
UNLOCK DAILY ESR
"KRN",19,12313,-1)
0^42
"KRN",19,12313,0)
PRSP PS MR^Memoranda Report^^R^^^^^^^^PAID
"KRN",19,12313,1,0)
^^2^2^3050331^
"KRN",19,12313,1,1,0)
This option allows Payroll to review all of the details related to a 
"KRN",19,12313,1,2,0)
part-time physician's Memorandum of Service Level Expectations.
"KRN",19,12313,25)
PAY^PRSPDM
"KRN",19,12313,"U")
MEMORANDA REPORT
"KRN",19,12314,-1)
0^36
"KRN",19,12314,0)
PRSP PS DE^Display Pay Period ESR^^R^^^^^^^^PAID
"KRN",19,12314,1,0)
^^2^2^3050124^
"KRN",19,12314,1,1,0)
This option allows Payroll to review a part-time physician's ESR record
"KRN",19,12314,1,2,0)
for the selected pay period.
"KRN",19,12314,25)
PAY^PRSPDESR
"KRN",19,12314,"U")
DISPLAY PAY PERIOD ESR
"KRN",19,12316,-1)
0^26
"KRN",19,12316,0)
PRSP PTP DM^Display Memoranda^^R^^^^^^^^PAID
"KRN",19,12316,1,0)
^^2^2^3050302^
"KRN",19,12316,1,1,0)
This option allows the part-time physician to display all of the
"KRN",19,12316,1,2,0)
information related to their Memoranda of Service Level Expectations.
"KRN",19,12316,25)
EMP^PRSPDM
"KRN",19,12316,"U")
DISPLAY MEMORANDA
"KRN",19,12317,-1)
0^37
"KRN",19,12317,0)
PRSP HR DEM^Memoranda Expiring Within Date Range^^R^^^^^^^^PAID
"KRN",19,12317,1,0)
^19.06^3^3^3050122^^^^
"KRN",19,12317,1,1,0)
This option allows Human Resources to identify part-time physician
"KRN",19,12317,1,2,0)
memoranda that will expire within the specified date range, so they can
"KRN",19,12317,1,3,0)
initiate the appropriate paperwork to begin the memoranda renewal process.
"KRN",19,12317,25)
PAY^PRSPDEM
"KRN",19,12317,"U")
MEMORANDA EXPIRING WITHIN DATE
"KRN",19,12318,-1)
0^28
"KRN",19,12318,0)
PRSP SUP MAIN^PT Physician Menu^^M^^^^^^^^PAID
"KRN",19,12318,1,0)
^19.06^3^3^3050122^^
"KRN",19,12318,1,1,0)
This menu contains all of the options that the Supervisors will need
"KRN",19,12318,1,2,0)
to monitor and maintain part-time physicians Memoranda of Service
"KRN",19,12318,1,3,0)
Level Expectations.
"KRN",19,12318,10,0)
^19.01IP^6^6
"KRN",19,12318,10,1,0)
12181^1^1
"KRN",19,12318,10,1,"^")
PRSP ESR SAP
"KRN",19,12318,10,2,0)
12307^2^2
"KRN",19,12318,10,2,"^")
PRSP SUP MR
"KRN",19,12318,10,3,0)
12308^3^3
"KRN",19,12318,10,3,"^")
PRSP SUP CPPE
"KRN",19,12318,10,4,0)
12309^4^4
"KRN",19,12318,10,4,"^")
PRSP SUP EXCEPT
"KRN",19,12318,10,5,0)
12190^5^5
"KRN",19,12318,10,5,"^")
PRSP SUP DE
"KRN",19,12318,10,6,0)
12310^6^6
"KRN",19,12318,10,6,"^")
PRSP SUP UNLOCK
"KRN",19,12318,99)
60689,43682
"KRN",19,12318,"U")
PT PHYSICIAN MENU
"KRN",19,12320,-1)
0^34
"KRN",19,12320,0)
PRSP PS MAIN^PT Physician Menu^^M^^^^^^^^PAID
"KRN",19,12320,1,0)
^19.06^3^3^3050222^^
"KRN",19,12320,1,1,0)
This menu contains all of the necessary options to allow Payroll to
"KRN",19,12320,1,2,0)
monitor the status of part-time physician's Memoranda of Service Level
"KRN",19,12320,1,3,0)
Expectations.
"KRN",19,12320,10,0)
^19.01IP^3^3
"KRN",19,12320,10,1,0)
12313^1
"KRN",19,12320,10,1,"^")
PRSP PS MR
"KRN",19,12320,10,2,0)
12314^2
"KRN",19,12320,10,2,"^")
PRSP PS DE
"KRN",19,12320,10,3,0)
12685^3
"KRN",19,12320,10,3,"^")
PRSP PS EXCEPT
"KRN",19,12320,99)
60689,43682
"KRN",19,12320,"U")
PT PHYSICIAN MENU
"KRN",19,12342,-1)
0^43
"KRN",19,12342,0)
PRSP PS CORE HRS RPT^Tours of Duty with Phy/Den Core Hours Report^^R^^^^^^^^
"KRN",19,12342,1,0)
^19.06^6^6^3050317^^^^
"KRN",19,12342,1,1,0)
This report will identify tours of duty in file 457.1 that 
"KRN",19,12342,1,2,0)
have tour segments with the special type of time, Phy/Den Core Hours.
"KRN",19,12342,1,3,0)
With the implementation of the part-time physicians' electronic
"KRN",19,12342,1,4,0)
subsidiary record, these special types of time should not be used
"KRN",19,12342,1,5,0)
in tours of duty.  This report will allow sites to identify and 
"KRN",19,12342,1,6,0)
correct any tours with Phy/Den Core Hours.
"KRN",19,12342,10.1)
Tours Rpt-Phy/Den Core Hrs
"KRN",19,12342,25)
COREHRS^PRSPCORE
"KRN",19,12342,99.1)
60121,52482
"KRN",19,12342,"U")
TOURS OF DUTY WITH PHY/DEN COR
"KRN",19,12681,-1)
0^45
"KRN",19,12681,0)
PRSP TK MAIN^PT Physician Menu^^M^^^^^^^^PAID
"KRN",19,12681,1,0)
^^3^3^3050427^
"KRN",19,12681,1,1,0)
This menu contains all of the options that Timekeepers will need to 
"KRN",19,12681,1,2,0)
monitor and post timecards for part-time physicians with a Memorandum of
"KRN",19,12681,1,3,0)
Service Level Expectations.
"KRN",19,12681,10,0)
^19.01IP^4^4
"KRN",19,12681,10,1,0)
12182^1
"KRN",19,12681,10,1,"^")
PRSP TK POST
"KRN",19,12681,10,2,0)
12682^2
"KRN",19,12681,10,2,"^")
PRSP TK DE
"KRN",19,12681,10,3,0)
12683^3
"KRN",19,12681,10,3,"^")
PRSP TK CPPE
"KRN",19,12681,10,4,0)
12684^4
"KRN",19,12681,10,4,"^")
PRSP TK MR
"KRN",19,12681,99)
60689,43682
"KRN",19,12681,"U")
PT PHYSICIAN MENU
"KRN",19,12682,-1)
0^47
"KRN",19,12682,0)
PRSP TK DE^Display Pay Period ESR^^R^^^^^^^^PAID
"KRN",19,12682,1,0)
^^2^2^3050427^
"KRN",19,12682,1,1,0)
This option lets Timekeepers review a part-time physician's ESR for the
"KRN",19,12682,1,2,0)
selected pay period.
"KRN",19,12682,25)
TK^PRSPDESR
"KRN",19,12682,"U")
DISPLAY PAY PERIOD ESR
"KRN",19,12683,-1)
0^46
"KRN",19,12683,0)
PRSP TK CPPE^Display PP ESR Exceptions^^R^^^^^^^^PAID
"KRN",19,12683,1,0)
^^2^2^3050427^
"KRN",19,12683,1,1,0)
This option allows timekeepers to review daily ESR exceptions for
"KRN",19,12683,1,2,0)
part-time physicians with Memoranda of Service Level Expectations.
"KRN",19,12683,25)
TK^PRSPCPPE
"KRN",19,12683,"U")
DISPLAY PP ESR EXCEPTIONS
"KRN",19,12684,-1)
0^48
"KRN",19,12684,0)
PRSP TK MR^Memoranda Report^^R^^^^^^^^PAID
"KRN",19,12684,1,0)
^^1^1^3050427^
"KRN",19,12684,1,1,0)
This option lets timekeepers review a part-time physician's memoranda.
"KRN",19,12684,25)
TK^PRSPDM
"KRN",19,12684,"U")
MEMORANDA REPORT
"KRN",19,12685,-1)
0^49
"KRN",19,12685,0)
PRSP PS EXCEPT^ESR Exceptions For Entire Memoranda^^R^^^^^^^^PAID
"KRN",19,12685,1,0)
^^2^2^3050427^
"KRN",19,12685,1,1,0)
This option allows Payroll to identify any incomplete daily ESRs that
"KRN",19,12685,1,2,0)
occurred during the part-time physician's memoranda.
"KRN",19,12685,25)
PAY^PRSPEEM
"KRN",19,12685,"U")
ESR EXCEPTIONS FOR ENTIRE MEMO
"KRN",19.1,484,-1)
0^1
"KRN",19.1,484,0)
PRSP EMP^Part-Time Physician with Memo^^n
"KRN",19.1,484,1,0)
^19.11^4^4^3050122^^^
"KRN",19.1,484,1,1,0)
This key grants access to the Part Time Physician With Memorandum Menu [PRSP PTP 
"KRN",19.1,484,1,2,0)
MENU]. The key will automatically be assigned to an employee when a new
"KRN",19.1,484,1,3,0)
memorandum is entered for them using the Enter Memoranda [PRSP HR EM] 
"KRN",19.1,484,1,4,0)
option.
"MBREQ")
0
"ORD",3,19.1)
19.1;3;1;;KEY^XPDTA1;;;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
93^3070228^12222
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
53
"RTN","PRSALVR")
0^43^B14279218^B9905117
"RTN","PRSALVR",1,0)
PRSALVR ;HISC/REL - Leave Request ;11/30/2004
"RTN","PRSALVR",2,0)
 ;;4.0;PAID;**61,93**;Sep 21, 1995;Build 7
"RTN","PRSALVR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSALVR",4,0)
 S DFN="",SSN=$P($G(^VA(200,DUZ,1)),"^",9) I SSN'="" S DFN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSALVR",5,0)
 I 'DFN W !!,*7,"Your SSN was not found in both the New Person & Employee File!" G EX
"RTN","PRSALVR",6,0)
 S TLE=$P($G(^PRSPC(DFN,0)),"^",8) S:TLE="" TLE="   " S TLI=+$O(^PRST(455.5,"B",TLE,0))
"RTN","PRSALVR",7,0)
 D ^PRSAENT S ZENT="",Z1="30 31 31 31 32 33 28 35 35 34 30",Z2="AL SL CB AD NL WP CU AA DL ML RL"
"RTN","PRSALVR",8,0)
 F K=1:1:11 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSALVR",9,0)
 I ZENT="" W !!?5,"You are not entitled to any type of Leave." G EX
"RTN","PRSALVR",10,0)
 L +^PRST(458.1,0) K DDSFILE,DA,DR
"RTN","PRSALVR",11,0)
N1 S DA=$P(^PRST(458.1,0),"^",3)+1 I $D(^PRST(458.1,DA)) S $P(^PRST(458.1,0),"^",3)=DA G N1
"RTN","PRSALVR",12,0)
 S $P(^PRST(458.1,0),"^",3)=DA,$P(^(0),"^",4)=$P(^(0),"^",4)+1 L -^PRST(458.1,0)
"RTN","PRSALVR",13,0)
 S ^PRST(458.1,DA,0)=DA_"^"_DFN,^PRST(458.1,"B",DA,DA)="",^PRST(458.1,"C",DFN,DA)=""
"RTN","PRSALVR",14,0)
 S ZOLD=^PRST(458.1,DA,0) D ED
"RTN","PRSALVR",15,0)
 K DIR S DIR("A")="Do you wish to enter another Leave Request? ",DIR(0)="YA",DIR("B")="No" W ! D ^DIR G PRSALVR:Y,EX Q
"RTN","PRSALVR",16,0)
ED ; Edit Leave Request
"RTN","PRSALVR",17,0)
 ;
"RTN","PRSALVR",18,0)
 N PPLCK,PPLCKE,SKIP
"RTN","PRSALVR",19,0)
 ; if request is approved and employee has any part-time physician memos
"RTN","PRSALVR",20,0)
 ; then lock appropriate pay periods
"RTN","PRSALVR",21,0)
 S SKIP=0
"RTN","PRSALVR",22,0)
 I $P(ZOLD,U,12),$$PTP^PRSPUT3($P(ZOLD,U,2)) D
"RTN","PRSALVR",23,0)
 . ; lock applicable time cards
"RTN","PRSALVR",24,0)
 . D LCK^PRSPAPU($P(ZOLD,U,2),$$FMADD^XLFDT($P(ZOLD,U,3),-1),$P(ZOLD,U,5),.PPLCK,.PPLCKE)
"RTN","PRSALVR",25,0)
 . ; if problem locking time cards
"RTN","PRSALVR",26,0)
 . I $D(PPLCKE) D
"RTN","PRSALVR",27,0)
 . . S SKIP=1 ; set flag to skip edit of leave
"RTN","PRSALVR",28,0)
 . . D TCULCK^PRSPAPU($P(ZOLD,U,2),.PPLCK) ; unlock any locked PP
"RTN","PRSALVR",29,0)
 . . D RLCKE^PRSPAPU(.PPLCKE) ; report problems
"RTN","PRSALVR",30,0)
 Q:SKIP  ; don't proceed with edit
"RTN","PRSALVR",31,0)
 ;
"RTN","PRSALVR",32,0)
 S $P(^PRST(458.1,DA,0),"^",16)=$S(ENT["D":"D",1:"H") S X="IOUON;IOUOFF" D ENDR^%ZISS
"RTN","PRSALVR",33,0)
 S Y15=IOUON_"Number of "_$S(ENT["D":"Days",1:"Hours")_IOUOFF_":"
"RTN","PRSALVR",34,0)
 S DDSFILE=458.1,DR="[PRSA LV REQ]" D ^DDS K DS
"RTN","PRSALVR",35,0)
 I '$P(^PRST(458.1,DA,0),"^",3) S DIK="^PRST(458.1," D ^DIK K DIK Q
"RTN","PRSALVR",36,0)
 I ZOLD=^PRST(458.1,DA,0) Q
"RTN","PRSALVR",37,0)
 ;
"RTN","PRSALVR",38,0)
 ; if timecards were locked (PTP), unpost the leave and remove the locks
"RTN","PRSALVR",39,0)
 I $D(PPLCK) D
"RTN","PRSALVR",40,0)
 . D ULR^PRSPLVA(ZOLD)
"RTN","PRSALVR",41,0)
 . D TCULCK^PRSPAPU($P(ZOLD,U,2),.PPLCK)
"RTN","PRSALVR",42,0)
 ;
"RTN","PRSALVR",43,0)
 D NOW^%DTC S $P(^PRST(458.1,DA,0),"^",9,11)="R^"_DUZ_"^"_%,^PRST(458.1,"AR",DFN,DA)=""
"RTN","PRSALVR",44,0)
 I $P(ZOLD,"^",12) S $P(^PRST(458.1,DA,0),"^",12,14)="^^" K ^(1)
"RTN","PRSALVR",45,0)
 S Z1=$P($G(^PRST(458.1,DA,0)),"^",7) I "AL SL CB AD"[Z1 S PRT=0 D BAL^PRSALVS I BAL<0 D OK
"RTN","PRSALVR",46,0)
 D CHK,UPD^PRSASAL Q
"RTN","PRSALVR",47,0)
OK ; Negative Balance Message
"RTN","PRSALVR",48,0)
 W !!,"WARNING: Your Leave Balance MAY go below zero!"
"RTN","PRSALVR",49,0)
 R !!,"Press RETURN to Continue.",X:DTIME Q
"RTN","PRSALVR",50,0)
VAL ; Validate request
"RTN","PRSALVR",51,0)
 Q:'$D(Z1)  I $P(Z1,"^",1)>$P(Z1,"^",3) S STR="Start date cannot be after the ending date." G V1
"RTN","PRSALVR",52,0)
 S X1=$P(Z1,"^",3),X2=$P(Z1,"^",1) D ^%DTC I X>40 S STR="Period of leave cannot exceed 40 days." G V1
"RTN","PRSALVR",53,0)
 Q:$P(Z1,"^",1)<$P(Z1,"^",3)  S X=$P(Z1,"^",2)_"^"_$P(Z1,"^",4) D CNV^PRSATIM
"RTN","PRSALVR",54,0)
 S Z2=$P(Y,"^",1),Z4=$P(Y,"^",2)
"RTN","PRSALVR",55,0)
 I Z2'<Z4 S STR="Start time must be less than ending time." G V1
"RTN","PRSALVR",56,0)
 ;The following line of code intentally commented out as unnecessary
"RTN","PRSALVR",57,0)
 ;as well as causing an erroneous error message. Refer PRS*4*61
"RTN","PRSALVR",58,0)
 ;I "AL SL"[$P(Z1,"^",7) S PRT=0 D BAL^PRSALVS I BAL<0 S STR="WARNING: Your leave balance MAY go below zero." D HLP^DDSUTL(.STR)
"RTN","PRSALVR",59,0)
 Q
"RTN","PRSALVR",60,0)
V1 S DDSERROR=1 D HLP^DDSUTL(.STR) Q
"RTN","PRSALVR",61,0)
CHK ; Check if start date already posted
"RTN","PRSALVR",62,0)
 S Z1=$P(^PRST(458.1,DA,0),"^",3)
"RTN","PRSALVR",63,0)
 S Y=$G(^PRST(458,"AD",Z1)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2) I PPI="" Q
"RTN","PRSALVR",64,0)
 Q:'$D(^PRST(458,PPI,"E",DFN,"D",DAY,10))  S Y=$G(^(2)) Q:Y[$P(^PRST(458.1,DA,0),"^",7)
"RTN","PRSALVR",65,0)
 S XMB="PRSA LV TK" F XMKK=0:0 S XMKK=$O(^PRST(455.5,TLI,"T",XMKK)) Q:XMKK<1  S XMY(XMKK)=""
"RTN","PRSALVR",66,0)
 S XMB(1)=$P($G(^PRSPC(DFN,0)),"^",1)
"RTN","PRSALVR",67,0)
 S X=$P($G(^PRST(458.1,DA,0)),"^",3) D DTP^PRSAPPU S XMB(3)=Y,XMB(2)=""
"RTN","PRSALVR",68,0)
 S LVT=";"_$P(^DD(458.1,6,0),"^",3)
"RTN","PRSALVR",69,0)
 S X=$P($G(^PRST(458.1,DA,0)),"^",7),%=$F(LVT,";"_X_":") I %>0 S XMB(2)=$P($E(LVT,%,999),";",1)
"RTN","PRSALVR",70,0)
 D ^XMB K XMB,XMY,XMM,XMDT,XMKK Q
"RTN","PRSALVR",71,0)
EX G KILL^XUSCLEAN
"RTN","PRSALVX")
0^42^B5361977^B2872665
"RTN","PRSALVX",1,0)
PRSALVX ;HISC/REL - Cancel Leave Request ;12/15/04
"RTN","PRSALVX",2,0)
 ;;4.0;PAID;**61,93**;Sep 21, 1995;Build 7
"RTN","PRSALVX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSALVX",4,0)
 N SKIP,ZOLD
"RTN","PRSALVX",5,0)
 S DFN="",SSN=$P($G(^VA(200,DUZ,1)),"^",9) I SSN'="" S DFN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSALVX",6,0)
 I 'DFN W !!,*7,"Your SSN was not found in both the New Person & Employee File!" G EX
"RTN","PRSALVX",7,0)
 S TLE=$P($G(^PRSPC(DFN,0)),"^",8) S:TLE="" TLE="   " S TLI=+$O(^PRST(455.5,"B",TLE,0))
"RTN","PRSALVX",8,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM",!?29,"CANCEL LEAVE REQUESTS"
"RTN","PRSALVX",9,0)
 S X=$G(^PRSPC(DFN,0)) W !!,$P(X,"^",1) S X=$P(X,"^",9) I X W ?50,$E(X,1,3),"-",$E(X,4,5),"-",$E(X,6,9)
"RTN","PRSALVX",10,0)
 K %DT S %DT="AEFX",%DT("A")="Begin with Date: ",%DT("B")="T" W ! D ^%DT K %DT S:$D(DTOUT) Y=0 G:Y<1 EX S EDT=9999999-Y
"RTN","PRSALVX",11,0)
 W ! S NUM=1 D DISP^PRSALVS
"RTN","PRSALVX",12,0)
 G:'CNT EX
"RTN","PRSALVX",13,0)
X1 R !!,"Cancel Which Request #? ",X:DTIME G:'$T!("^"[X) EX I X'?1N.N!(X<1)!(X>CNT) W *7," Enter # of Request to Cancel" G X1
"RTN","PRSALVX",14,0)
 S X=+X,DA=R(X)
"RTN","PRSALVX",15,0)
 ;
"RTN","PRSALVX",16,0)
 ; if request is approved and employee has any part-time physician memos
"RTN","PRSALVX",17,0)
 ; then lock appropriate pay periods
"RTN","PRSALVX",18,0)
 K PPLCK,PPLCKE
"RTN","PRSALVX",19,0)
 S SKIP=0
"RTN","PRSALVX",20,0)
 S ZOLD=$G(^PRST(458.1,DA,0))
"RTN","PRSALVX",21,0)
 I $P(ZOLD,U,12),$$PTP^PRSPUT3($P(ZOLD,U,2)) D
"RTN","PRSALVX",22,0)
 . ; lock applicable time cards
"RTN","PRSALVX",23,0)
 . D LCK^PRSPAPU($P(ZOLD,U,2),$$FMADD^XLFDT($P(ZOLD,U,3),-1),$P(ZOLD,U,5),.PPLCK,.PPLCKE)
"RTN","PRSALVX",24,0)
 . ; if problem locking time cards
"RTN","PRSALVX",25,0)
 . I $D(PPLCKE) D
"RTN","PRSALVX",26,0)
 . . S SKIP=1 ; set flag to skip cancel of leave
"RTN","PRSALVX",27,0)
 . . D TCULCK^PRSPAPU($P(ZOLD,U,2),.PPLCK) ; unlock any locked PP
"RTN","PRSALVX",28,0)
 . . D RLCKE^PRSPAPU(.PPLCKE) ; report problems
"RTN","PRSALVX",29,0)
 . . K PPLCK,PPLCKE
"RTN","PRSALVX",30,0)
 Q:SKIP  ; don't proceed with cancel
"RTN","PRSALVX",31,0)
 ;
"RTN","PRSALVX",32,0)
 ; cancel leave request
"RTN","PRSALVX",33,0)
 S $P(^PRST(458.1,DA,0),"^",9)="X" K ^PRST(458.1,"AR",DFN,DA)
"RTN","PRSALVX",34,0)
 ;
"RTN","PRSALVX",35,0)
 ; if timecards were locked (PTP), unpost the leave and remove the locks
"RTN","PRSALVX",36,0)
 I $D(PPLCK) D
"RTN","PRSALVX",37,0)
 . D ULR^PRSPLVA(ZOLD)
"RTN","PRSALVX",38,0)
 . D TCULCK^PRSPAPU($P(ZOLD,U,2),.PPLCK)
"RTN","PRSALVX",39,0)
 . K PPLCK
"RTN","PRSALVX",40,0)
 ;
"RTN","PRSALVX",41,0)
 ; update T&L action counts
"RTN","PRSALVX",42,0)
 D UPD^PRSASAL W "  ... done"
"RTN","PRSALVX",43,0)
EX G KILL^XUSCLEAN
"RTN","PRSAPPO")
0^44^B11822872^B8397198
"RTN","PRSAPPO",1,0)
PRSAPPO ; HISC/MGD - Open New Pay Period ;03/15/06
"RTN","PRSAPPO",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSAPPO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAPPO",4,0)
 S PPI=$P(^PRST(458,0),"^",3),PPE=$P(^PRST(458,PPI,0),"^",1)
"RTN","PRSAPPO",5,0)
 D NX^PRSAPPU S X1=D1,X2=14 D C^%DTC S D1=X
"RTN","PRSAPPO",6,0)
 S X1=DT,X2=7 D C^%DTC I D1>X W *7,!!,"You cannot open a Pay Period more than 7 days in advance!" G EX
"RTN","PRSAPPO",7,0)
 D PP^PRSAPPU S X=D1 D DTP^PRSAPPU
"RTN","PRSAPPO",8,0)
A1 W !!,"Do you wish to Open Pay Period ",PPE," beginning ",Y," ? "
"RTN","PRSAPPO",9,0)
 R X:DTIME G:'$T!(X["^") EX S:X="" X="*" S X=$TR(X,"yesno","YESNO")
"RTN","PRSAPPO",10,0)
 I $P("YES",X,1)'="",$P("NO",X,1)'="" W !?5,*7,"Answer YES or NO" G A1
"RTN","PRSAPPO",11,0)
 G:$E(X,1)'="Y" EX
"RTN","PRSAPPO",12,0)
 I $D(^PRST(458,"B",PPE)) W !!,*7,"That Pay Period is already open!" G EX
"RTN","PRSAPPO",13,0)
 K DIC,DD,DO S DIC="^PRST(458,",DIC(0)="L",DLAYGO=458,X=PPE D FILE^DICN G:Y<1 EX
"RTN","PRSAPPO",14,0)
 K DIC,DLAYGO S PPI=+Y,PPIP=PPI-1
"RTN","PRSAPPO",15,0)
A2 I PPIP,'$D(^PRST(458,PPIP)) S PPIP=PPIP-1 G A2
"RTN","PRSAPPO",16,0)
 ; Generate dates
"RTN","PRSAPPO",17,0)
 S Y1=D1 F K=1:1:13 S X2=K,X1=D1 D C^%DTC S Y1=Y1_"^"_X
"RTN","PRSAPPO",18,0)
 S Y2="" F K=1:1:14 S X=$P(Y1,"^",K) D DTP^PRSAPPU S Y=$P("Sat Sun Mon Tue Wed Thu Fri"," ",K#7+1)_" "_Y S $P(Y2,"^",K)=Y
"RTN","PRSAPPO",19,0)
 S ^PRST(458,PPI,1)=Y1,^(2)=Y2
"RTN","PRSAPPO",20,0)
 F K=1:1:14 S X=$P(Y1,"^",K),^PRST(458,"AD",X)=PPI_"^"_K
"RTN","PRSAPPO",21,0)
A3 S ^PRST(458,PPI,"E",0)="^458.01P^^" D NOW^%DTC S NOW=% D ^PRSAPPH
"RTN","PRSAPPO",22,0)
 W !!,"Moving Current Employees into Pay Period ... " S N=0
"RTN","PRSAPPO",23,0)
 N MDAT,MIEN,PRSIEN
"RTN","PRSAPPO",24,0)
 S ATL="ATL00" F  S ATL=$O(^PRSPC(ATL)) Q:ATL'?1"ATL".E  S TLE=$E(ATL,4,6),NAM="" F  S NAM=$O(^PRSPC(ATL,NAM)) Q:NAM=""  F DFN=0:0 S DFN=$O(^PRSPC(ATL,NAM,DFN)) Q:DFN<1  D
"RTN","PRSAPPO",25,0)
 .Q:$D(^PRST(458,PPI,"E",DFN,"D",14,0))
"RTN","PRSAPPO",26,0)
 .I $P($G(^PRSPC(DFN,"LWOP")),"^",1)="Y" Q
"RTN","PRSAPPO",27,0)
 .I $P($G(^PRSPC(DFN,1)),"^",20)="Y" Q
"RTN","PRSAPPO",28,0)
 .I $P($G(^PRSPC(DFN,1)),"^",33)'="N" Q
"RTN","PRSAPPO",29,0)
 .S PRSIEN=DFN,MDAT=$P(PDT,U,1)
"RTN","PRSAPPO",30,0)
 .S MIEN=$$MIEN^PRSPUT1(PRSIEN,MDAT)
"RTN","PRSAPPO",31,0)
 .D MOV I $D(HOL),'MIEN S TT="HX",DUP=0 D E^PRSAPPH
"RTN","PRSAPPO",32,0)
 .;
"RTN","PRSAPPO",33,0)
 .; Call to Autopost PT Phy Leave
"RTN","PRSAPPO",34,0)
 .I $G(MIEN) D PLPP^PRSPLVA(PRSIEN,PPI)
"RTN","PRSAPPO",35,0)
 .;
"RTN","PRSAPPO",36,0)
 .; Call to autopost PT Phy Extended Absence
"RTN","PRSAPPO",37,0)
 .I $G(MIEN) D PEAPP^PRSPEAA(PRSIEN,PPI)
"RTN","PRSAPPO",38,0)
 .S N=N+1 W:N#100=0 "." Q
"RTN","PRSAPPO",39,0)
 S $P(^PRST(458,PPI,"E",0),"^",3,4)=N_"^"_N W !!,N," Employee Records created.",!
"RTN","PRSAPPO",40,0)
EX G KILL^XUSCLEAN
"RTN","PRSAPPO",41,0)
RES ; Re-start/Re-open a Pay Period
"RTN","PRSAPPO",42,0)
 S PPI=$P(^PRST(458,0),"^",3),PPIP=PPI-1 G A3
"RTN","PRSAPPO",43,0)
MOV ; Create PP entry for Employee
"RTN","PRSAPPO",44,0)
 I '$D(^PRST(458,PPI,"E",DFN,0)) S ^(0)=DFN_"^T" D
"RTN","PRSAPPO",45,0)
 .S CPI=$G(^PRST(458,PPIP,"E",DFN,0))
"RTN","PRSAPPO",46,0)
 .S CPI=$S($P(CPI,"^",7)'="":$P(CPI,"^",7),$P(CPI,"^",6)'="":$P(CPI,"^",6),1:$P($G(^PRSPC(DFN,1)),"^",7))
"RTN","PRSAPPO",47,0)
 .S:CPI="" CPI=0 S $P(^PRST(458,PPI,"E",DFN,0),"^",6)=CPI Q
"RTN","PRSAPPO",48,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSAPPO",49,0)
 ;
"RTN","PRSAPPO",50,0)
 ; if there's a PTP memo and this is the 1st PP for the memo then
"RTN","PRSAPPO",51,0)
 ; set the memo status to Active
"RTN","PRSAPPO",52,0)
 I $G(MIEN),($P($G(^PRST(458.7,+MIEN,9,1,0)),U,1)=$P($G(^PRST(458,PPI,0)),U,1)) D
"RTN","PRSAPPO",53,0)
 . N IENS,PRSFDA
"RTN","PRSAPPO",54,0)
 . S IENS=+MIEN_","
"RTN","PRSAPPO",55,0)
 . S PRSFDA(458.7,IENS,5)=2 ; 2:ACTIVE
"RTN","PRSAPPO",56,0)
 . D FILE^DIE("","PRSFDA")
"RTN","PRSAPPO",57,0)
 . K PRSFDA
"RTN","PRSAPPO",58,0)
 ;
"RTN","PRSAPPO",59,0)
 F DAY=1:1:14 I '$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2) D
"RTN","PRSAPPO",60,0)
 . D M1
"RTN","PRSAPPO",61,0)
 . ; Update Daily ESR and post Holiday Excused
"RTN","PRSAPPO",62,0)
 . I MIEN D ESRUPDT^PRSPUT3(PPI,DFN,DAY)
"RTN","PRSAPPO",63,0)
 Q
"RTN","PRSAPPO",64,0)
 ;
"RTN","PRSAPPO",65,0)
M1 ; Set a day
"RTN","PRSAPPO",66,0)
 S Z=$G(^PRST(458,PPIP,"E",DFN,"D",DAY,0)),TD=$P(Z,"^",2) I $P(Z,"^",3) S TD=$P(Z,"^",4)
"RTN","PRSAPPO",67,0)
 S X=$G(^PRST(457.1,+TD,1)),TDH=$P($G(^(0)),"^",6)
"RTN","PRSAPPO",68,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=DAY_"^"_TD S:TDH'="" $P(^(0),"^",8)=TDH S:X'="" ^(1)=X
"RTN","PRSAPPO",69,0)
 Q
"RTN","PRSAPRE")
0^58^B5270397^B4795766
"RTN","PRSAPRE",1,0)
PRSAPRE ; HISC/MGD-Add Employee to Pay Period ;03/03/05
"RTN","PRSAPRE",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSAPRE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAPRE",4,0)
 S DIC="^PRST(458,",DIC(0)="AEQM",DIC("A")="Select PAY PERIOD: " W ! D ^DIC K DIC G:Y<1 EX S PPI=+Y
"RTN","PRSAPRE",5,0)
 S D1=$P($G(^PRST(458,PPI,1)),"^",14),X1=D1,X2=5 D C^%DTC I DT>X W *7,!!,"This Pay Period ended more than 5 days ago!" G EX
"RTN","PRSAPRE",6,0)
 D ^PRSAPPH
"RTN","PRSAPRE",7,0)
 N MIEN
"RTN","PRSAPRE",8,0)
P0 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC(" W ! D ^DIC S DFN=+Y K DIC
"RTN","PRSAPRE",9,0)
 G:DFN<1 EX
"RTN","PRSAPRE",10,0)
 I $D(^PRST(458,PPI,"E",DFN)) W *7,!!,"Pay Period Already Open for this Employee." G P0
"RTN","PRSAPRE",11,0)
 I $P($G(^PRSPC(DFN,"LWOP")),"^",1)="Y" W !!,"Warning: 30-day LWOP Indicator is set."
"RTN","PRSAPRE",12,0)
 I $P($G(^PRSPC(DFN,1)),"^",20)="Y" W !!,"Warning: No-Pay Indicator is set."
"RTN","PRSAPRE",13,0)
 I $P($G(^PRSPC(DFN,1)),"^",33)'="N" W !!,"Warning: Separation Indicator is not N."
"RTN","PRSAPRE",14,0)
 S TLE=$P($G(^PRSPC(DFN,0)),"^",8) I TLE="" W !!,"Warning: No T&L Unit has been specified."
"RTN","PRSAPRE",15,0)
OK R !!,"OK to Create Record for this Employee? ",X:DTIME G:'$T!(X["^") EX S:X="" X="*" S X=$TR(X,"yesno","YESNO")
"RTN","PRSAPRE",16,0)
 I $P("YES",X,1)'="",$P("NO",X,1)'="" W *7," Answer YES or NO" G OK
"RTN","PRSAPRE",17,0)
 G P0:X?1"N".E,P2:TLE'=""
"RTN","PRSAPRE",18,0)
P1 K DIC S DIC="^PRST(455.5,",DIC(0)="AEQM" W ! D ^DIC K DIC G EX:$D(DTOUT),EX:$D(DUOUT),P1:Y<1
"RTN","PRSAPRE",19,0)
 S TLE=$P(Y,"^",2)
"RTN","PRSAPRE",20,0)
 S DA=DFN,DIE="^PRSPC(",DR="7////^S X=TLE" D ^DIE
"RTN","PRSAPRE",21,0)
P2 S PPIP=PPI-1
"RTN","PRSAPRE",22,0)
 S MIEN=$$MIEN^PRSPUT1(DFN,+$G(^PRST(458,PPI,1)))
"RTN","PRSAPRE",23,0)
 D MOV^PRSAPPO I $D(HOL) D NOW^%DTC S NOW=%,TT="HX",DUP=0 D E^PRSAPPH
"RTN","PRSAPRE",24,0)
 W !!?5,"Pay Period opened for this Employee." G P0
"RTN","PRSAPRE",25,0)
EX G KILL^XUSCLEAN
"RTN","PRSASC")
0^40^B20003482^B15349711
"RTN","PRSASC",1,0)
PRSASC ; HISC/MGD - Supervisor Certification ;01/22/05
"RTN","PRSASC",2,0)
 ;;4.0;PAID;**15,43,93**;Sep 21, 1995;Build 7
"RTN","PRSASC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASC",4,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM",!?28,"SUPERVISOR'S APPROVALS"
"RTN","PRSASC",5,0)
 S PRSTLV=3 D ^PRSAUTL G:TLI<1 EX S QT=0
"RTN","PRSASC",6,0)
 S LVT=";"_$P(^DD(458.1,6,0),"^",3),LVS=";"_$P(^DD(458.1,8,0),"^",3) K AP
"RTN","PRSASC",7,0)
 S OTS=";"_$P(^DD(458.2,10,0),"^",3)
"RTN","PRSASC",8,0)
 S EDS=";"_$P(^DD(458.3,8,0),"^",3)
"RTN","PRSASC",9,0)
 S NN="",CKS=1 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  D CHK I QT G ES
"RTN","PRSASC",10,0)
 S CKS=0 F VA2=0:0 S VA2=$O(^PRST(455.5,"ASX",TLE,VA2)) Q:VA2<1  S SSN=$P($G(^VA(200,VA2,1)),"^",9) I SSN'="" S DFN=$O(^PRSPC("SSN",SSN,0)) I DFN,$P($G(^PRSPC(+DFN,0)),"^",8)'=TLE D CHK I QT G ES
"RTN","PRSASC",11,0)
ES I '$D(AP) W !!,"No actions to certify." G EX
"RTN","PRSASC",12,0)
 D ^PRSAES G:'ESOK EX
"RTN","PRSASC",13,0)
 ; Queue approvals
"RTN","PRSASC",14,0)
 K ZTUCI,ZTDTH,ZTIO,ZTSAVE S ZTRTN="^PRSASC1",ZTREQ="@",ZTIO="",ZTDTH=$H
"RTN","PRSASC",15,0)
 S ZTSAVE("ZTREQ")="",ZTSAVE("AP(")="",ZTSAVE("ESNAM")="",ZTDESC=$P(XQY0,"^",1)
"RTN","PRSASC",16,0)
 S ZTSAVE("TLI")="",ZTSAVE("TLE")=""
"RTN","PRSASC",17,0)
 D ^%ZTLOAD W !,"Approvals Queued",! G EX
"RTN","PRSASC",18,0)
CHK ; Check for needed approvals
"RTN","PRSASC",19,0)
 S HDR=0 I USR=DFN Q:'$D(^XUSEC("PRSA SIGN",DUZ))
"RTN","PRSASC",20,0)
 E  I CKS S SSN=$P($G(^PRSPC(DFN,0)),"^",9) I SSN S EDUZ=+$O(^VA(200,"SSN",SSN,0)) I $D(^PRST(455.5,"AS",EDUZ,TLI)) Q:$P($G(^PRST(455.5,TLI,"S",EDUZ,0)),"^",2)'=TLE
"RTN","PRSASC",21,0)
 F DA=0:0 S DA=$O(^PRST(458.1,"AR",DFN,DA)) Q:DA<1  D LV G:QT C1
"RTN","PRSASC",22,0)
 F DA=0:0 S DA=$O(^PRST(458.2,"AR",DFN,DA)) Q:DA<1  D OT G:QT C1
"RTN","PRSASC",23,0)
 F DA=0:0 S DA=$O(^PRST(458.3,"AR",DFN,DA)) Q:DA<1  D ED G:QT C1
"RTN","PRSASC",24,0)
 I $D(^PRST(458,"ATC",DFN)) F PPI=0:0 S PPI=$O(^PRST(458,"ATC",DFN,PPI)) Q:PPI<1  S DA=DFN_"~"_PPI D TC G:QT C1
"RTN","PRSASC",25,0)
 I $D(^PRST(458,"AXR",DFN)) F PPI=0:0 S PPI=$O(^PRST(458,"AXR",DFN,PPI)) Q:PPI<1  F AUN=0:0 S AUN=$O(^PRST(458,"AXR",DFN,PPI,AUN)) Q:AUN<1  S DA=DFN_"~"_PPI_"~"_AUN D PP G:QT C1
"RTN","PRSASC",26,0)
C1 Q
"RTN","PRSASC",27,0)
LV ; Leave Request
"RTN","PRSASC",28,0)
 N PRSX
"RTN","PRSASC",29,0)
 D:'HDR HDR S (NUM,CNT)=0,PRT=1 W ! D BAL^PRSALVS W ! D LST^PRSALVS
"RTN","PRSASC",30,0)
 S PRSX=$$OKALVR^PRSPLVU(DA)
"RTN","PRSASC",31,0)
 I PRSX'>0 D
"RTN","PRSASC",32,0)
 . W !!,"This leave request can not be approved because the employee is"
"RTN","PRSASC",33,0)
 . W !,"a part-time physician with a memorandum of service level"
"RTN","PRSASC",34,0)
 . W !,"expectations, and the leave request may impact a time card for"
"RTN","PRSASC",35,0)
 . W !,"pay period "_$P($G(^PRST(458,+$P(PRSX,U,2),0)),U)_" that has a status of Payroll."
"RTN","PRSASC",36,0)
 . W !,"The request can be approved once the time card status changes."
"RTN","PRSASC",37,0)
 . W !,"(i.e. returned to Timekeeper or transmitted to Austin)",!
"RTN","PRSASC",38,0)
 S COM="" D LVOK Q:QT
"RTN","PRSASC",39,0)
 I ACT="A",PRSX'>0 W !,"Approved action can't be accepted at this time" Q
"RTN","PRSASC",40,0)
 S:ACT'="" AP(1,DA)=DFN_"^"_ACT_"^"_COM
"RTN","PRSASC",41,0)
 Q
"RTN","PRSASC",42,0)
OT ; Overtime/CompTime Request
"RTN","PRSASC",43,0)
 D:'HDR HDR S (NUM,CNT)=0 W ! D LST^PRSAOTS S COM="" D OK Q:QT  I ACT'="" S:ACT="A" ACT="S" S AP(2,DA)=DFN_"^"_ACT_"^"_COM
"RTN","PRSASC",44,0)
 Q
"RTN","PRSASC",45,0)
ED ; Environmental Diff. Request
"RTN","PRSASC",46,0)
 D:'HDR HDR S (NUM,CNT)=0 W ! D LST^PRSAEDS S COM="" D OK Q:QT  S:ACT'="" AP(3,DA)=DFN_"^"_ACT_"^"_COM Q
"RTN","PRSASC",47,0)
TC ; Tour Change
"RTN","PRSASC",48,0)
 D:'HDR HDR D LST^PRSATE1 K COM D OK Q:QT  S:ACT'="" AP(4,DA)=DFN_"^"_ACT Q
"RTN","PRSASC",49,0)
PP ; Prior Pay Period Change
"RTN","PRSASC",50,0)
 D:'HDR HDR D DIS^PRSASC3 K COM D OK Q:QT  I ACT'="" S:ACT="A" ACT="S" S AP(5,DA)=DFN_"^"_ACT
"RTN","PRSASC",51,0)
 Q
"RTN","PRSASC",52,0)
OK R !!,"Disposition (A=Approve, D=Disapprove, X=Cancel, RETURN to bypass): ",ACT:DTIME S:'$T!(ACT["^") QT=1 Q:QT!(ACT="")  S ACT=$TR(ACT,"adx","ADX") I ACT'?1U!("ADX"'[ACT) W *7,!,"Enter A, D or X or Press RETURN to bypass" G OK
"RTN","PRSASC",53,0)
 Q:'$D(COM)  S COM=""
"RTN","PRSASC",54,0)
O1 I ACT'="A" R !!,"Comment: ",COM:DTIME S:'$T!(COM["^") QT=1 Q:QT  I COM'?.ANP W *7," ??" G O1
"RTN","PRSASC",55,0)
 I ACT'="A",$L(COM)<4!($L(COM)>60)!(COM?1"?".E) W *7,"   A 4-60 character comment is required." G O1
"RTN","PRSASC",56,0)
 Q
"RTN","PRSASC",57,0)
 ;
"RTN","PRSASC",58,0)
LVOK N PROMPT,REPROMPT
"RTN","PRSASC",59,0)
 S PROMPT="Disposition (A=Approve, D=Disapprove, RETURN to bypass): "
"RTN","PRSASC",60,0)
 S REPROMPT="Enter A or D or Press RETURN to bypass"
"RTN","PRSASC",61,0)
 W !!,PROMPT
"RTN","PRSASC",62,0)
 R ACT:DTIME
"RTN","PRSASC",63,0)
 S:'$T!(ACT["^") QT=1
"RTN","PRSASC",64,0)
 Q:QT!(ACT="")
"RTN","PRSASC",65,0)
 S ACT=$TR(ACT,"ad","AD")
"RTN","PRSASC",66,0)
 I ACT'?1U!("AD"'[ACT) W *7,!,REPROMPT G LVOK
"RTN","PRSASC",67,0)
 Q:'$D(COM)  S COM=""
"RTN","PRSASC",68,0)
 D O1
"RTN","PRSASC",69,0)
 Q
"RTN","PRSASC",70,0)
 ;
"RTN","PRSASC",71,0)
HDR ; Display Header
"RTN","PRSASC",72,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM",!?28,"SUPERVISOR'S APPROVALS"
"RTN","PRSASC",73,0)
 S PPE="" D HDR^PRSADP1 S HDR=1 Q
"RTN","PRSASC",74,0)
EX G KILL^XUSCLEAN
"RTN","PRSASC1")
0^41^B26512238^B7241522
"RTN","PRSASC1",1,0)
PRSASC1 ; HISC/MGD - File Approvals ;01/22/05
"RTN","PRSASC1",2,0)
 ;;4.0;PAID;**55,93**;Sep 21, 1995;Build 7
"RTN","PRSASC1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASC1",4,0)
 D NOW^%DTC S NOW=%
"RTN","PRSASC1",5,0)
 F DA=0:0 S DA=$O(AP(1,DA)) Q:DA<1  D LV1
"RTN","PRSASC1",6,0)
 F DA=0:0 S DA=$O(AP(2,DA)) Q:DA<1  D OT1
"RTN","PRSASC1",7,0)
 F DA=0:0 S DA=$O(AP(3,DA)) Q:DA<1  D ED1
"RTN","PRSASC1",8,0)
 S NX="" F  S NX=$O(AP(4,NX)) Q:NX=""  D TC1
"RTN","PRSASC1",9,0)
 S NOD="AXR",NX="" F  S NX=$O(AP(5,NX)) Q:NX=""  D APP^PRSASC3
"RTN","PRSASC1",10,0)
 D UPD^PRSASAL,APP^PRSASAL Q
"RTN","PRSASC1",11,0)
LV1 ; Process action
"RTN","PRSASC1",12,0)
 N SKIP
"RTN","PRSASC1",13,0)
 S SKIP=0
"RTN","PRSASC1",14,0)
 ; if action = approve and employee has any PTP memos
"RTN","PRSASC1",15,0)
 I $P(AP(1,DA),"^",2)="A",$$PTP^PRSPUT3($P(AP(1,DA),"^",1)) D
"RTN","PRSASC1",16,0)
 . N LVY0,PPLCK,PPLCKE,PRSEX
"RTN","PRSASC1",17,0)
 . S LVY0=$G(^PRST(458.1,DA,0))
"RTN","PRSASC1",18,0)
 . ; lock applicable time cards
"RTN","PRSASC1",19,0)
 . D LCK^PRSPAPU($P(LVY0,U,2),$$FMADD^XLFDT($P(LVY0,U,3),-1),$P(LVY0,U,5),.PPLCK,.PPLCKE)
"RTN","PRSASC1",20,0)
 . ; if problem locking time cards
"RTN","PRSASC1",21,0)
 . I $D(PPLCKE) D
"RTN","PRSASC1",22,0)
 . . S SKIP=1 ; set flag to skip approval of leave
"RTN","PRSASC1",23,0)
 . . ; construct and send error message
"RTN","PRSASC1",24,0)
 . . D LVEMSG
"RTN","PRSASC1",25,0)
 . I '$G(SKIP),$D(PPLCK) D
"RTN","PRSASC1",26,0)
 . . ; attempt to auto post leave to ESR
"RTN","PRSASC1",27,0)
 . . D PLR^PRSPLVA(DA,,,.PRSEX)
"RTN","PRSASC1",28,0)
 . . ; if fatal error during auto post
"RTN","PRSASC1",29,0)
 . . I $D(PRSEX) D
"RTN","PRSASC1",30,0)
 . . . S SKIP=1 ; set flag to skip approval of leave
"RTN","PRSASC1",31,0)
 . . . ; construct and send error message
"RTN","PRSASC1",32,0)
 . . . D LVEMSG
"RTN","PRSASC1",33,0)
 . D TCULCK^PRSPAPU($P(LVY0,U,2),.PPLCK) ; remove any TC locks
"RTN","PRSASC1",34,0)
 Q:SKIP
"RTN","PRSASC1",35,0)
 S DFN=$P(AP(1,DA),"^",1),ACT=$P(AP(1,DA),"^",2),COM=$P(AP(1,DA),"^",3),X=ESNAM,X1=DUZ,X2=DA D EN^XUSHSHP
"RTN","PRSASC1",36,0)
 S $P(^PRST(458.1,DA,0),"^",9)=ACT K ^PRST(458.1,"AR",DFN,DA)
"RTN","PRSASC1",37,0)
 S $P(^PRST(458.1,DA,0),"^",12,14)=DUZ_"^"_NOW_"^"_X
"RTN","PRSASC1",38,0)
 S:COM'="" $P(^PRST(458.1,DA,1),"^",1)=COM Q
"RTN","PRSASC1",39,0)
OT1 ; Process action
"RTN","PRSASC1",40,0)
 S DFN=$P(AP(2,DA),"^",1),ACT=$P(AP(2,DA),"^",2),COM=$P(AP(2,DA),"^",3),X=ESNAM,X1=DUZ,X2=DA D EN^XUSHSHP
"RTN","PRSASC1",41,0)
 I ACT="S" S ^PRST(458.2,"AS",DFN,DA)=""
"RTN","PRSASC1",42,0)
 S $P(^PRST(458.2,DA,0),"^",8)=ACT K ^PRST(458.2,"AR",DFN,DA)
"RTN","PRSASC1",43,0)
 S $P(^PRST(458.2,DA,0),"^",13,15)=DUZ_"^"_NOW_"^"_X
"RTN","PRSASC1",44,0)
 S:COM'="" $P(^PRST(458.2,DA,1),"^",1)=COM Q
"RTN","PRSASC1",45,0)
ED1 ; Process action
"RTN","PRSASC1",46,0)
 S DFN=$P(AP(3,DA),"^",1),ACT=$P(AP(3,DA),"^",2),COM=$P(AP(3,DA),"^",3),X=ESNAM,X1=DUZ,X2=DA D EN^XUSHSHP
"RTN","PRSASC1",47,0)
 S $P(^PRST(458.3,DA,0),"^",9)=ACT K ^PRST(458.3,"AR",DFN,DA)
"RTN","PRSASC1",48,0)
 S $P(^PRST(458.3,DA,0),"^",12,14)=DUZ_"^"_NOW_"^"_X
"RTN","PRSASC1",49,0)
 S:COM'="" $P(^PRST(458.3,DA,1),"^",1)=COM D:ACT="A" ^PRSASC2 Q
"RTN","PRSASC1",50,0)
TC1 ; Process action
"RTN","PRSASC1",51,0)
 S DFN=$P(AP(4,NX),"^",1),ACT=$P(AP(4,NX),"^",2),PPI=$P(NX,"~",2)
"RTN","PRSASC1",52,0)
 S X=ESNAM,X1=DUZ,X2=DFN D EN^XUSHSHP
"RTN","PRSASC1",53,0)
 I ACT="A" F DAY=0:0 S DAY=$O(^PRST(458,"ATC",DFN,PPI,DAY)) G:DAY="" T1 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,0),"^",5,7)=DUZ_"^"_NOW_"^"_X
"RTN","PRSASC1",54,0)
 ; tour change(s) were disapproved or canceled so undo them
"RTN","PRSASC1",55,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) I STAT'="","PX"[STAT G T1
"RTN","PRSASC1",56,0)
 S TYP="" F DAY=0:0 S DAY=$O(^PRST(458,"ATC",DFN,PPI,DAY)) Q:DAY=""  D
"RTN","PRSASC1",57,0)
 .; special undo if tour change made to next pay period
"RTN","PRSASC1",58,0)
 .I $P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),U,3)=2 D  Q
"RTN","PRSASC1",59,0)
 ..S $P(^PRST(458,PPI,"E",DFN,"D",DAY,0),U,3,4)="^"
"RTN","PRSASC1",60,0)
 ..S $P(^PRST(458,PPI,"E",DFN,"D",DAY,0),U,10,11)=DUZ_"^"_NOW
"RTN","PRSASC1",61,0)
 .; tour change not made to next pay period
"RTN","PRSASC1",62,0)
 .I $D(^PRST(458,PPI,"E",DFN,"D",DAY,4)) K ^(4) S $P(^(0),"^",13,15)="^^"
"RTN","PRSASC1",63,0)
 .S TD=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",4),Y=$G(^PRST(457.1,+TD,1)),TDH=$P($G(^(0)),"^",6) D SET^PRSATE
"RTN","PRSASC1",64,0)
 .Q
"RTN","PRSASC1",65,0)
T1 K ^PRST(458,"ATC",DFN,PPI) Q
"RTN","PRSASC1",66,0)
 ;
"RTN","PRSASC1",67,0)
LVEMSG ; Construct and send a leave approval error message
"RTN","PRSASC1",68,0)
 ; inputs LVY0,PPLCKE(),
"RTN","PRSASC1",69,0)
 N LN,PRSARR,PRSI,PRST,TYPI,XMDUZ,XMMG,XMSUB,XMTEXT,XMY,XMZ
"RTN","PRSASC1",70,0)
 S PRST(1)="You recently entered an approval for the following leave request:"
"RTN","PRSASC1",71,0)
 S PRST(2)=" "
"RTN","PRSASC1",72,0)
 S PRST(3)="  Employee: "_$P($G(^PRSPC($P(LVY0,U,2),0)),U)
"RTN","PRSASC1",73,0)
 S TYPI=$S($P(LVY0,U,7)'="":$O(^PRST(457.3,"B",$P(LVY0,U,7),0)),1:"")
"RTN","PRSASC1",74,0)
 I TYPI S PRST(3)=PRST(3)_"   Type: "_$P($G(^PRST(457.3,TYPI,0)),U,3)
"RTN","PRSASC1",75,0)
 S PRST(4)="  "_$P(LVY0,U,4)_" "_$$FMTE^XLFDT($P(LVY0,U,3))
"RTN","PRSASC1",76,0)
 S PRST(4)=PRST(4)_"  to  "_$P(LVY0,U,6)_" "_$$FMTE^XLFDT($P(LVY0,U,5))
"RTN","PRSASC1",77,0)
 S PRST(5)=" "
"RTN","PRSASC1",78,0)
 S PRST(6)="The software was unable to save the approval of this leave"
"RTN","PRSASC1",79,0)
 S PRST(7)="request and nothing has been changed.  The request will"
"RTN","PRSASC1",80,0)
 S PRST(8)="continue to appear as a pending action under the Supervisory"
"RTN","PRSASC1",81,0)
 S PRST(9)="Approvals option."
"RTN","PRSASC1",82,0)
 S PRST(10)=" "
"RTN","PRSASC1",83,0)
 S LN=10
"RTN","PRSASC1",84,0)
 ; load lock problems (if any)
"RTN","PRSASC1",85,0)
 I $D(PPLCKE) D
"RTN","PRSASC1",86,0)
 . D RLCKE^PRSPAPU(.PPLCKE,0,"PRSARR")
"RTN","PRSASC1",87,0)
 . S PRSI=0
"RTN","PRSASC1",88,0)
 . F  S PRSI=$O(PRSARR(PRSI)) Q:'PRSI  S LN=LN+1,PRST(LN)=PRSARR(PRSI)
"RTN","PRSASC1",89,0)
 ; load time card status problem (if any)
"RTN","PRSASC1",90,0)
 I $G(PRSEX) D
"RTN","PRSASC1",91,0)
 . S LN=LN+1,PRST(LN)="This leave request can not be approved because the employee is"
"RTN","PRSASC1",92,0)
 . S LN=LN+1,PRST(LN)="a part-time physician with a memorandum of service level"
"RTN","PRSASC1",93,0)
 . S LN=LN+1,PRST(LN)="expectations, and the leave request may impact a time card for"
"RTN","PRSASC1",94,0)
 . S LN=LN+1,PRST(LN)="pay period "_$P($G(^PRST(458,PRSEX,0)),U)_" that has a status of Payroll."
"RTN","PRSASC1",95,0)
 . S LN=LN+1,PRST(LN)="The request can be approved once the time card status changes."
"RTN","PRSASC1",96,0)
 . S LN=LN+1,PRST(LN)="(i.e. returned to Timekeeper or transmitted to Austin)"
"RTN","PRSASC1",97,0)
 S XMDUZ="PAID Package"
"RTN","PRSASC1",98,0)
 S XMSUB="Unable to File Approval of Leave Request"
"RTN","PRSASC1",99,0)
 S XMTEXT="PRST("
"RTN","PRSASC1",100,0)
 S XMY(DUZ)=""
"RTN","PRSASC1",101,0)
 D ^XMD
"RTN","PRSASC1",102,0)
 Q
"RTN","PRSASC3")
0^57^B7711149^B6858140
"RTN","PRSASC3",1,0)
PRSASC3 ; HISC/REL,WOIFO/JAH - Supervisor Approve Prior PP Actions ;2/16/05
"RTN","PRSASC3",2,0)
 ;;4.0;PAID;**6,93**;Sep 21, 1995;Build 7
"RTN","PRSASC3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASC3",4,0)
DIS ; Display PP Action
"RTN","PRSASC3",5,0)
 N IFN
"RTN","PRSASC3",6,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"X",AUN,0)),TYP=$P(Z,"^",4) D DT:TYP="T",DV:TYP="V",DH:TYP="H"
"RTN","PRSASC3",7,0)
 I $D(^PRST(458,PPI,"E",DFN,"X",AUN,7)) W !!,"Change Remarks: ",^(7)
"RTN","PRSASC3",8,0)
 Q
"RTN","PRSASC3",9,0)
DT ; Display Time
"RTN","PRSASC3",10,0)
 S DAY=$P($G(^PRST(458,PPI,"E",DFN,"X",AUN,1)),"^",1) Q:'DAY
"RTN","PRSASC3",11,0)
 W !!,?28,"Prior Pay Period Change"
"RTN","PRSASC3",12,0)
 W !,?7,"Date",?21,"Scheduled Tour",?46,"Tour Exceptions"
"RTN","PRSASC3",13,0)
 W !?3,"------------------------------------------------------------------------"
"RTN","PRSASC3",14,0)
 S DTE=$P($G(^PRST(458,PPI,2)),"^",DAY) S IFN=AUN+1 D GET^PRSAPPP D F0^PRSAPPQ Q
"RTN","PRSASC3",15,0)
DV ; Display VCS/Fee changes
"RTN","PRSASC3",16,0)
 S PAYP=$P($G(^PRSPC(DFN,0)),"^",21)
"RTN","PRSASC3",17,0)
 S DTE=$P($G(^PRST(458,PPI,2)),"^",1)
"RTN","PRSASC3",18,0)
 W !!,$S(PAYP="F":"Fee Basis",1:"VCS Sales")," Adjustment for Pay Period beginning ",DTE
"RTN","PRSASC3",19,0)
 S IFN=AUN+1 D GET^PRSAPPP S Z=AUR(1) D VCS^PRSAPPQ Q
"RTN","PRSASC3",20,0)
DH ; Display ED changes
"RTN","PRSASC3",21,0)
 S DTE=$P($G(^PRST(458,PPI,2)),"^",1)
"RTN","PRSASC3",22,0)
 W !!,"Envir. Differential Adjustment for Pay Period beginning ",DTE
"RTN","PRSASC3",23,0)
 S IFN=AUN+1 D GET^PRSAPPP S Z=AUR(1) D ED^PRSAPPQ Q
"RTN","PRSASC3",24,0)
APP ; Approve PP Action
"RTN","PRSASC3",25,0)
 S DFN=$P(AP(5,NX),"^",1),ACT=$P(AP(5,NX),"^",2),PPI=$P(NX,"~",2),AUN=$P(NX,"~",3)
"RTN","PRSASC3",26,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"X",AUN,0)),$P(^(0),"^",5)=ACT
"RTN","PRSASC3",27,0)
 K ^PRST(458,NOD,DFN,PPI,AUN) S:"AS"[ACT ^PRST(458,"AX"_ACT,DFN,PPI,AUN)=""
"RTN","PRSASC3",28,0)
 ; if second level approver then recalculate PTP's Hours bank
"RTN","PRSASC3",29,0)
 I NOD="AXS" D
"RTN","PRSASC3",30,0)
 .  S $P(^PRST(458,PPI,"E",DFN,"X",AUN,0),"^",8,9)=DUZ_"^"_NOW
"RTN","PRSASC3",31,0)
 .  D PTP^PRSASR1(DFN,PPI)
"RTN","PRSASC3",32,0)
 I NOD="AXR" S $P(^PRST(458,PPI,"E",DFN,"X",AUN,0),"^",10,11)=DUZ_"^"_NOW
"RTN","PRSASC3",33,0)
 S TYP=$P(Z,"^",4) G AT:TYP="T",AV:TYP="V",AH:TYP="H"
"RTN","PRSASC3",34,0)
 Q
"RTN","PRSASC3",35,0)
AT ; Approve time
"RTN","PRSASC3",36,0)
 Q:"DX"'[ACT
"RTN","PRSASC3",37,0)
 ; If disapproved, un-do
"RTN","PRSASC3",38,0)
 S DAY=$P($G(^PRST(458,PPI,"E",DFN,"X",AUN,1)),"^",1) Q:'DAY
"RTN","PRSASC3",39,0)
 S IFN=AUN+1 D GET^PRSAPPP
"RTN","PRSASC3",40,0)
 I AUC N L2 S L2=0 F L1=0,1,2,10,3,4 S L2=L2+1 S Z=$G(^PRST(458,PPI,"E",DFN,"X",AUN,L2)) K ^PRST(458,PPI,"E",DFN,"D",DAY,L1) I Z'="" S ^(L1)=Z
"RTN","PRSASC3",41,0)
 ;if PTP corrected timecard is disapproved then call hrs bank API
"RTN","PRSASC3",42,0)
 ;since the unapproved work node for the corrected tc may have been
"RTN","PRSASC3",43,0)
 ;used in a call to the hours bank.  Call will quit if not PTP w/memo
"RTN","PRSASC3",44,0)
 D PTP^PRSASR1(DFN,PPI)
"RTN","PRSASC3",45,0)
 Q
"RTN","PRSASC3",46,0)
AV ; Approve VCS/Fee Changes
"RTN","PRSASC3",47,0)
 I "DX"'[ACT S:ACT="S" $P(^PRST(458,PPI,"E",DFN,2),"^",17,18)=DUZ_"^"_NOW Q
"RTN","PRSASC3",48,0)
 ; If disapproved, un-do
"RTN","PRSASC3",49,0)
 S IFN=AUN+1 D GET^PRSAPPP
"RTN","PRSASC3",50,0)
 I AUC S Z=$G(^PRST(458,PPI,"E",DFN,"X",AUN,1)) K ^PRST(458,PPI,"E",DFN,2) S:Z'="" ^(2)=Z
"RTN","PRSASC3",51,0)
 Q
"RTN","PRSASC3",52,0)
AH ; Approve ED Changes
"RTN","PRSASC3",53,0)
 Q:"DX"'[ACT
"RTN","PRSASC3",54,0)
 ; if disapproved, un-do
"RTN","PRSASC3",55,0)
 S IFN=AUN+1 D GET^PRSAPPP
"RTN","PRSASC3",56,0)
 I AUC S Z=$G(^PRST(458,PPI,"E",DFN,"X",AUN,1)) K ^PRST(458,PPI,"E",DFN,4) S:Z'="" ^(4)=Z
"RTN","PRSASC3",57,0)
 Q
"RTN","PRSASR")
0^45^B44221248^B42887185
"RTN","PRSASR",1,0)
PRSASR ;HISC/MGD,WOIFO/JAH - Supervisor Certification ;02/05/2005
"RTN","PRSASR",2,0)
 ;;4.0;PAID;**2,7,8,22,37,43,82,93**;Sep 21, 1995;Build 7
"RTN","PRSASR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASR",4,0)
 ;
"RTN","PRSASR",5,0)
 ;Called by Pay Per Cert Option on T&A Superv menu. Timecard 4 each 
"RTN","PRSASR",6,0)
 ;employee in this supervs T&L is displayed.  Superv prompted at each 
"RTN","PRSASR",7,0)
 ;display as to whether card is ready 4 certification. Cards that r
"RTN","PRSASR",8,0)
 ;ready r saved in ^TMP.  After this review--elect sign code is 
"RTN","PRSASR",9,0)
 ;required to release approved cards to payroll. Upon ES
"RTN","PRSASR",10,0)
 ; 8b, exceptions, & ot warnings r stored & timecard status 
"RTN","PRSASR",11,0)
 ;changed to 'P'--'released to payroll' 
"RTN","PRSASR",12,0)
 ;
"RTN","PRSASR",13,0)
 ;=====================================================================
"RTN","PRSASR",14,0)
 ;
"RTN","PRSASR",15,0)
 ;Set up reverse video ON & OFF for tour error highlighting
"RTN","PRSASR",16,0)
 N IORVOFF,IORVON,IOINHI,IOINORM,IOBOFF,IOBON,RESP
"RTN","PRSASR",17,0)
 S X="IORVOFF;IORVON;IOBOFF;IOBON;IOINHI;IOINORM" D ENDR^%ZISS
"RTN","PRSASR",18,0)
 ;
"RTN","PRSASR",19,0)
 N MIDPP,DUMMY
"RTN","PRSASR",20,0)
 S MIDPP="In middle of Pay Period; Cannot Certify & Release."
"RTN","PRSASR",21,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSASR",22,0)
 W !?27,"SUPERVISORY CERTIFICATION"
"RTN","PRSASR",23,0)
 S PRSTLV=3 D ^PRSAUTL G:TLI<1 EX
"RTN","PRSASR",24,0)
 D NOW^%DTC
"RTN","PRSASR",25,0)
 S DT=%\1,APDT=%,Y=$G(^PRST(458,"AD",DT)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2)
"RTN","PRSASR",26,0)
 I DAY>5,DAY<11 W $C(7),!!,MIDPP G EX
"RTN","PRSASR",27,0)
 I DAY<6 S X1=DT,X2=-7 D C^%DTC S PPI=$P($G(^PRST(458,"AD",X)),"^",1) G:'PPI EX
"RTN","PRSASR",28,0)
 ;     -----------------------------------------
"RTN","PRSASR",29,0)
P0 ;PDT     = string of pay period dates with format - Sun 29-Sep-96^
"RTN","PRSASR",30,0)
 ;PDTI    = string of pay period dates in fileman format.
"RTN","PRSASR",31,0)
 ;PPI     = pay period internal entry number in file 458.
"RTN","PRSASR",32,0)
 ;GLOB    = global reference for employees pay period record
"RTN","PRSASR",33,0)
 ;          returned from $$AVAILREC & passed to UNLOCK.
"RTN","PRSASR",34,0)
 ;     -----------------------------------------
"RTN","PRSASR",35,0)
 ;
"RTN","PRSASR",36,0)
 S PDT=$G(^PRST(458,PPI,2)),PDTI=$G(^(1)),QT=0 K ^TMP($J)
"RTN","PRSASR",37,0)
 ;
"RTN","PRSASR",38,0)
 ;     -----------------------------------------
"RTN","PRSASR",39,0)
 ;Loop thru this supervisor's T&L unit on x-ref in 450.
"RTN","PRSASR",40,0)
 ;$$availrec() ensures there's data & node with employee's 
"RTN","PRSASR",41,0)
 ;pay period record is NOT locked, then locks node.
"RTN","PRSASR",42,0)
 ;Call to CHK checks for needed approvals for current employee
"RTN","PRSASR",43,0)
 ;If supervisor decides record is not ready, during this call,
"RTN","PRSASR",44,0)
 ;then node is unlocked.  Records that super accepts for release
"RTN","PRSASR",45,0)
 ;are not unlocked until they are processed thru temp global
"RTN","PRSASR",46,0)
 ;& their status' are updated.
"RTN","PRSASR",47,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",48,0)
 ;
"RTN","PRSASR",49,0)
 S NN="",CKS=1
"RTN","PRSASR",50,0)
 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  I $$AVAILREC^PRSLIB00("SUP",.GLOB) D CHK I QT G T0
"RTN","PRSASR",51,0)
 ;
"RTN","PRSASR",52,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",53,0)
 ;Loop through T&L unit file x-ref 2 c if this supervisor certifies
"RTN","PRSASR",54,0)
 ;payperiod data for other supervisors of other T&L units.  If so
"RTN","PRSASR",55,0)
 ;process after ensuring node to be certified is available.
"RTN","PRSASR",56,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",57,0)
 ;
"RTN","PRSASR",58,0)
 S CKS=0
"RTN","PRSASR",59,0)
 F VA2=0:0 S VA2=$$TLSUP Q:VA2<1  S SSN=$$SSN I SSN'="" S DFN=$$DFN S Z=$P($G(^PRSPC(+DFN,0)),"^",8) I Z'="",Z'=TLE,$$AVAILREC^PRSLIB00("SUP",.GLOB) D CHK I QT G EX:'$T,T0
"RTN","PRSASR",60,0)
 ;
"RTN","PRSASR",61,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",62,0)
T0 I $D(^TMP($J,"E")) G T1
"RTN","PRSASR",63,0)
 W !!,"No records have been selected for certification."
"RTN","PRSASR",64,0)
 S DUMMY=$$ASK^PRSLIB00(1) G EX
"RTN","PRSASR",65,0)
 ;
"RTN","PRSASR",66,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",67,0)
 ;
"RTN","PRSASR",68,0)
T1 ;if supervisor signs off then update all records in tmp
"RTN","PRSASR",69,0)
 ;otherwise remove any auto posting.
"RTN","PRSASR",70,0)
 D ^PRSAES I ESOK D
"RTN","PRSASR",71,0)
 .D NOW^%DTC S APDT=%
"RTN","PRSASR",72,0)
 .F DFN=0:0 S DFN=$O(^TMP($J,"E",DFN)) Q:DFN<1  S VAL=$G(^(DFN)) D PROC
"RTN","PRSASR",73,0)
 I 'ESOK D
"RTN","PRSASR",74,0)
 .F DFN=0:0 S DFN=$O(^TMP($J,"E",DFN)) Q:DFN<1  D
"RTN","PRSASR",75,0)
 ..D AUTOPINI^PRS8(PPI,DFN)
"RTN","PRSASR",76,0)
 D EX
"RTN","PRSASR",77,0)
 Q
"RTN","PRSASR",78,0)
 ;
"RTN","PRSASR",79,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",80,0)
CHK ; Check for needed approvals
"RTN","PRSASR",81,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) I "PX"[STAT Q
"RTN","PRSASR",82,0)
 I USR=DFN Q:'$D(^XUSEC("PRSA SIGN",DUZ))
"RTN","PRSASR",83,0)
 E  I CKS S SSN=$P($G(^PRSPC(DFN,0)),"^",9) I SSN S EDUZ=+$O(^VA(200,"SSN",SSN,0)) I $D(^PRST(455.5,"AS",EDUZ,TLI)) Q:$P($G(^PRST(455.5,TLI,"S",EDUZ,0)),"^",2)'=TLE
"RTN","PRSASR",84,0)
 S HDR=0 D HDR
"RTN","PRSASR",85,0)
 ;
"RTN","PRSASR",86,0)
 ;Loop to display tour, exceptions(leave, etc..) & errors.
"RTN","PRSASR",87,0)
 ;
"RTN","PRSASR",88,0)
 S (XF,X9)=0
"RTN","PRSASR",89,0)
 F DAY=1:1:14 D TOURERR($P(PDT,"^",DAY),.X9,.XF) D:$Y>(IOSL-6)&(DAY<14) HDR G:QT O1
"RTN","PRSASR",90,0)
 ;
"RTN","PRSASR",91,0)
 ;Display VCS commission sales, if applicable
"RTN","PRSASR",92,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,2))
"RTN","PRSASR",93,0)
 I Z'="" D:$Y>(IOSL-11) HDR Q:QT  D VCS^PRSASR1
"RTN","PRSASR",94,0)
 ;
"RTN","PRSASR",95,0)
 ;
"RTN","PRSASR",96,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,4))
"RTN","PRSASR",97,0)
 I Z'="" D:$Y>(IOSL-9) HDR Q:QT  D ED^PRSASR1
"RTN","PRSASR",98,0)
 I XF W !,IORVON,"Serious error; cannot release.",IORVOFF S QT=$$ASK^PRSLIB00() Q
"RTN","PRSASR",99,0)
 S QT=$$ASK^PRSLIB00() Q:QT
"RTN","PRSASR",100,0)
 ;
"RTN","PRSASR",101,0)
 ;PRS8 call creates & stores 8B string in employees attendance
"RTN","PRSASR",102,0)
 ;record.  Later, under a payroll option, string will be
"RTN","PRSASR",103,0)
 ;transmitted to Austin.
"RTN","PRSASR",104,0)
 ;
"RTN","PRSASR",105,0)
 N NN D ONE^PRS8 S C0=$G(^PRSPC(DFN,0)),PY=PPI D CERT^PRS8VW S QT=0
"RTN","PRSASR",106,0)
 ;
"RTN","PRSASR",107,0)
 ;Show OT (approve-vs-8B) warning & save in TMP.
"RTN","PRSASR",108,0)
 N WK,OTERR,O8,OA
"RTN","PRSASR",109,0)
 F WK=1:1:2 D
"RTN","PRSASR",110,0)
 .  D WARNSUP^PRSAOTT(PPE,DFN,VAL,WK,.OTERR,.O8,.OA)
"RTN","PRSASR",111,0)
 .  I OTERR S ^TMP($J,"OT",DFN,WK)=O8_"^"_OA
"RTN","PRSASR",112,0)
 ;
"RTN","PRSASR",113,0)
LD ; Check for changes to the Labor Distribution Codes made during the pay
"RTN","PRSASR",114,0)
 ; period.
"RTN","PRSASR",115,0)
 I $D(^PRST(458,PPI,"E",DFN,"LDAUD")) D LD^PRSASR1
"RTN","PRSASR",116,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",117,0)
OK ;Prompt Supervisor to release timecard.  If yes, store in ^TMP(.
"RTN","PRSASR",118,0)
 ;If supervisor answers no then bypass & unlock record.
"RTN","PRSASR",119,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",120,0)
 W !!,IORVON,"Release to Payroll?",IORVOFF," "
"RTN","PRSASR",121,0)
 R X:DTIME S:'$T!(X["^") QT=1 Q:QT  S:X="" X="*" S X=$TR(X,"yesno","YESNO")
"RTN","PRSASR",122,0)
 I $P("YES",X,1)'="",$P("NO",X,1)'="" W $C(7)," Answer YES or NO" G OK
"RTN","PRSASR",123,0)
 I X?1"Y".E S ^TMP($J,"E",DFN)=VAL
"RTN","PRSASR",124,0)
 E  D
"RTN","PRSASR",125,0)
 .  D AUTOPINI^PRS8(PPI,DFN) ; remove any auto posting
"RTN","PRSASR",126,0)
 .  D UNLOCK^PRSLIB00(GLOB) ; unlock record
"RTN","PRSASR",127,0)
 .  K ^TMP($J,"LOCK",DFN) ;clean out of local lock list.
"RTN","PRSASR",128,0)
O1 Q
"RTN","PRSASR",129,0)
 ;
"RTN","PRSASR",130,0)
PROC ; Set Approval, file any exceptions & update 8B string
"RTN","PRSASR",131,0)
 ;
"RTN","PRSASR",132,0)
 ; get employees entitlement string in variable A1
"RTN","PRSASR",133,0)
 D ^PRSAENT
"RTN","PRSASR",134,0)
 ;
"RTN","PRSASR",135,0)
 ; set approvals
"RTN","PRSASR",136,0)
 S $P(^PRST(458,PPI,"E",DFN,0),"^",3,5)=DUZ_"^"_APDT_"^"_A1
"RTN","PRSASR",137,0)
 ; VCS approval
"RTN","PRSASR",138,0)
 I $D(^PRST(458,PPI,"E",DFN,2)) S $P(^(2),"^",17,18)=DUZ_"^"_APDT
"RTN","PRSASR",139,0)
 ;
"RTN","PRSASR",140,0)
 ; loop thru any exceptions & file in 458.5
"RTN","PRSASR",141,0)
 I $D(^TMP($J,"X",DFN)) S K="" F  S K=$O(^TMP($J,"X",DFN,K)) Q:K=""  S DAY=$P(K," ",1),X1=$P(PDTI,"^",DAY),X2=$G(^(K)) D ^PRSATPF
"RTN","PRSASR",142,0)
 ;
"RTN","PRSASR",143,0)
 ; file overtime warnings
"RTN","PRSASR",144,0)
 F WK=1:1:2 I $G(^TMP($J,"OT",DFN,WK))'="" D
"RTN","PRSASR",145,0)
 .  S O8=$P(^TMP($J,"OT",DFN,WK),"^")
"RTN","PRSASR",146,0)
 .  S OA=$P(^TMP($J,"OT",DFN,WK),"^",2)
"RTN","PRSASR",147,0)
 .  D FILEOTW^PRSAOTTF(PPI,DFN,WK,O8,OA)
"RTN","PRSASR",148,0)
 ;
"RTN","PRSASR",149,0)
 ;set 8b string & change status of timecard to payroll
"RTN","PRSASR",150,0)
 S ^PRST(458,PPI,"E",DFN,5)=VAL S $P(^PRST(458,PPI,"E",DFN,0),"^",2)="P"
"RTN","PRSASR",151,0)
 ;
"RTN","PRSASR",152,0)
 ; If employee is a PT Phys w/ memo update hours credited
"RTN","PRSASR",153,0)
 D PTP^PRSASR1(DFN,PPI)
"RTN","PRSASR",154,0)
 ;
"RTN","PRSASR",155,0)
 ;unlock employees time card record
"RTN","PRSASR",156,0)
 S GLOB="^PRST(458,"_PPI_","_"""E"""_","_DFN_",0)"
"RTN","PRSASR",157,0)
 D UNLOCK^PRSLIB00(GLOB)
"RTN","PRSASR",158,0)
 K ^TMP($J,"LOCK",DFN) ;clean out of local lock list.
"RTN","PRSASR",159,0)
 Q
"RTN","PRSASR",160,0)
 ;
"RTN","PRSASR",161,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRSASR",162,0)
 ;
"RTN","PRSASR",163,0)
HDR ; Display Header
"RTN","PRSASR",164,0)
 I HDR S QT=$$ASK^PRSLIB00() Q:QT
"RTN","PRSASR",165,0)
 S X=$G(^PRSPC(DFN,0)) W !,@IOF,?3,$P(X,"^",1) S X=$P(X,"^",9) I X W ?68,$E(X,1,3),"-",$E(X,4,5),"-",$E(X,6,9) S HDR=1
"RTN","PRSASR",166,0)
 W !,?6,"Date",?20,"Scheduled Tour",?40,"Tour Exceptions",?63,IORVON,"Tour Errors",IORVOFF
"RTN","PRSASR",167,0)
 W !?3 F I=1:1:72 W "-"
"RTN","PRSASR",168,0)
 Q
"RTN","PRSASR",169,0)
 ;====================================================================
"RTN","PRSASR",170,0)
HDR2 ; Display Header don't quit
"RTN","PRSASR",171,0)
 N HOLD
"RTN","PRSASR",172,0)
 S HOLD=$$ASK^PRSLIB00(1)
"RTN","PRSASR",173,0)
 S X=$G(^PRSPC(DFN,0)) W !,@IOF,?3,$P(X,"^",1) S X=$P(X,"^",9) I X W ?68,$E(X,1,3),"-",$E(X,4,5),"-",$E(X,6,9)
"RTN","PRSASR",174,0)
 W !,?6,"Date",?20,"Scheduled Tour",?40,"Tour Exceptions",?63,IORVON,"Tour Errors",IORVOFF
"RTN","PRSASR",175,0)
 W !?3 F I=1:1:72 W "-"
"RTN","PRSASR",176,0)
 Q
"RTN","PRSASR",177,0)
 ;====================================================================
"RTN","PRSASR",178,0)
 ;
"RTN","PRSASR",179,0)
EX ; clean up variables & unlock any leftover time card nodes
"RTN","PRSASR",180,0)
 N EMPREC
"RTN","PRSASR",181,0)
 S EMPREC=""
"RTN","PRSASR",182,0)
 F  S EMPREC=$O(^TMP($J,"LOCK",EMPREC))  Q:EMPREC=""  D
"RTN","PRSASR",183,0)
 .  S GLOB="^PRST(458,"_PPI_","_"""E"""_","_EMPREC_",0)"
"RTN","PRSASR",184,0)
 .  D UNLOCK^PRSLIB00(GLOB)
"RTN","PRSASR",185,0)
 K ^TMP($J) G KILL^XUSCLEAN
"RTN","PRSASR",186,0)
 Q
"RTN","PRSASR",187,0)
 ;
"RTN","PRSASR",188,0)
 ;====================================================================
"RTN","PRSASR",189,0)
 ;These extrinsic functions simply remove lengthy code from long, 
"RTN","PRSASR",190,0)
 ;single line, nested loop.
"RTN","PRSASR",191,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",192,0)
TLSUP() ;get next supervisor who certifies other supervisors
"RTN","PRSASR",193,0)
 Q $O(^PRST(455.5,"ASX",TLE,VA2))
"RTN","PRSASR",194,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",195,0)
SSN() ;get ssn of supervisor to be certified by this supervisor.
"RTN","PRSASR",196,0)
 Q $P($G(^VA(200,VA2,1)),"^",9)
"RTN","PRSASR",197,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",198,0)
DFN() ;get internal entry number of supvisor of other T&L 2b approved
"RTN","PRSASR",199,0)
 ;by current supervisor.
"RTN","PRSASR",200,0)
 Q $O(^PRSPC("SSN",SSN,0))
"RTN","PRSASR",201,0)
 ;====================================================================
"RTN","PRSASR",202,0)
TOURERR(DTE,X9,XF) ;DISPLAY TOUR & ERRORS
"RTN","PRSASR",203,0)
 ;
"RTN","PRSASR",204,0)
 N IORVOFF,IORVON,RESP,ERRLEN
"RTN","PRSASR",205,0)
 S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","PRSASR",206,0)
 D F1^PRSADP1,^PRSATPE
"RTN","PRSASR",207,0)
 F K=1:1 Q:'$D(Y1(K))&'$D(Y2(K))  D
"RTN","PRSASR",208,0)
 . I $Y>(IOSL-4) D HDR2
"RTN","PRSASR",209,0)
 . W:K>1 !
"RTN","PRSASR",210,0)
 . W:$D(Y1(K)) ?21,Y1(K)
"RTN","PRSASR",211,0)
 . W:$P($G(Y2(K)),"^")'="" ?45,$P(Y2(K),"^",1)
"RTN","PRSASR",212,0)
 . I $P($G(Y2(K)),"^",2)'="" W:$X>44 ! W ?45,$P(Y2(K),"^",2)
"RTN","PRSASR",213,0)
 W:Y3'="" !?10,Y3
"RTN","PRSASR",214,0)
 I $D(ER) S:FATAL XF=1 F K=0:0 S K=$O(ER(K)) Q:K<1  D
"RTN","PRSASR",215,0)
 . I $Y>(IOSL-4) D HDR2
"RTN","PRSASR",216,0)
 .W:X9!($X>55) ! S ERRLEN=23
"RTN","PRSASR",217,0)
 .I $P(ER(K),"^",2)'="" S ERRLEN=$L(ER(K))
"RTN","PRSASR",218,0)
 .W ?(IOM-(ERRLEN+1)),IORVON
"RTN","PRSASR",219,0)
 .W:$P(ER(K),"^",2)'="" $P(ER(K),"^",2)
"RTN","PRSASR",220,0)
 .W " ",$P(ER(K),"^",1),IORVOFF
"RTN","PRSASR",221,0)
 .S X9=0 S:'XF ^TMP($J,"X",DFN,DAY_" "_K)=ER(K)
"RTN","PRSASR",222,0)
 .Q
"RTN","PRSASR",223,0)
 Q
"RTN","PRSASR1")
0^46^B49767232^B13017312
"RTN","PRSASR1",1,0)
PRSASR1 ;HISC/MGD - Display VCS, Fee, ED ;04/19/05
"RTN","PRSASR1",2,0)
 ;;4.0;PAID;**6,21,82,93**;Sep 21, 1995;Build 7
"RTN","PRSASR1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASR1",4,0)
VCS ; Display VCS Sales/Fee Basis
"RTN","PRSASR1",5,0)
 ;
"RTN","PRSASR1",6,0)
 N OLDPP
"RTN","PRSASR1",7,0)
 S PAYP=$P($G(^PRSPC(DFN,0)),"^",21)
"RTN","PRSASR1",8,0)
 ; Check the pay plan for the pay period we are dealing with
"RTN","PRSASR1",9,0)
 ; in case it's a previous pay period where an employee
"RTN","PRSASR1",10,0)
 ; had a different pay plan.
"RTN","PRSASR1",11,0)
 ;  1st put pay period in YY-PP format 4 call 2 lookup old pay plan.
"RTN","PRSASR1",12,0)
 ;Only check if called from option Display employee pay period PPERIOD
"RTN","PRSASR1",13,0)
 ;will be defined.
"RTN","PRSASR1",14,0)
 I $G(PPERIOD) D
"RTN","PRSASR1",15,0)
 .;S PPERIOD=$S(Y["-":$P(Y,"^",2),1:$P(^PRST(458,$P(Y,"^"),0),"^"))
"RTN","PRSASR1",16,0)
 .S OLDPP=$$OLDPP^PRS8UT(PPERIOD,DFN)
"RTN","PRSASR1",17,0)
 .I OLDPP'=0,(OLDPP'=PAYP) D
"RTN","PRSASR1",18,0)
 .. S PAYP=OLDPP
"RTN","PRSASR1",19,0)
 .. W !,"Employee is NOT currently under this pay plan."
"RTN","PRSASR1",20,0)
 ;
"RTN","PRSASR1",21,0)
 W !!?30,$S(PAYP="F":"Fee Basis Appointee",1:"VCS Commission Sales")
"RTN","PRSASR1",22,0)
 W !!?13,"Sun       Mon       Tue       Wed       Thu       Fri       Sat",!
"RTN","PRSASR1",23,0)
 W !,"Week 1" S L1=1 F K=1:1:7 S L1=L1+10,Z1=$P(Z,"^",K) I Z1'="" W ?L1,$J(Z1,7,2)
"RTN","PRSASR1",24,0)
 W !,"Week 2" S L1=1 F K=8:1:14 S L1=L1+10,Z1=$P(Z,"^",K) I Z1'="" W ?L1,$J(Z1,7,2)
"RTN","PRSASR1",25,0)
 I PAYP="F" W !! F K=19:1:21 S Z1=$P(Z,"^",K) W "Total ",$P("Hours Days Procedures"," ",K-18),": ",Z1,"    "
"RTN","PRSASR1",26,0)
 Q
"RTN","PRSASR1",27,0)
ED ; Display Envir. Diff.
"RTN","PRSASR1",28,0)
 W !!?26,"Environmental Differentials",!
"RTN","PRSASR1",29,0)
 S Y="" F K=1:2:5 S Z1=$P(Z,"^",K) Q:'Z1  S:Y'="" Y=Y_"; " S Y=Y_$P($G(^PRST(457.6,+Z1,0)),"^",1)_" "_$P(Z,"^",K+1)_" Hrs."
"RTN","PRSASR1",30,0)
 I Y'="" W !,"Week 1: ",Y
"RTN","PRSASR1",31,0)
 S Y="" F K=7:2:11 S Z1=$P(Z,"^",K) Q:'Z1  S:Y'="" Y=Y_"; " S Y=Y_$P($G(^PRST(457.6,+Z1,0)),"^",1)_" "_$P(Z,"^",K+1)_" Hrs."
"RTN","PRSASR1",32,0)
 I Y'="" W !,"Week 2: ",Y
"RTN","PRSASR1",33,0)
 Q
"RTN","PRSASR1",34,0)
 ;
"RTN","PRSASR1",35,0)
LD ; Display changes to the Labor Distribution Codes within the Pay
"RTN","PRSASR1",36,0)
 ; Period.
"RTN","PRSASR1",37,0)
 ;
"RTN","PRSASR1",38,0)
 N DASH,DESC,IENS,LDCC,LDCCB,LDCCEX,LDCODE,LDCNT,LDDOA,LDFCP
"RTN","PRSASR1",39,0)
 N LDHOLD,LDPCT,LDTOI,PRSLD,Y
"RTN","PRSASR1",40,0)
 S $P(DASH,"-",80)=""
"RTN","PRSASR1",41,0)
 W !
"RTN","PRSASR1",42,0)
 D LDHOLD
"RTN","PRSASR1",43,0)
 W !,"Current Labor Distribution Values:"
"RTN","PRSASR1",44,0)
 S LDDOA=$$GET1^DIQ(450,DFN,756,"E")
"RTN","PRSASR1",45,0)
 S LDCCB=$$GET1^DIQ(450,DFN,755,"E")
"RTN","PRSASR1",46,0)
 S LDTOI=$$GET1^DIQ(450,DFN,755.1,"E")
"RTN","PRSASR1",47,0)
 W !,LDDOA,?24,LDCCB,?61,LDTOI
"RTN","PRSASR1",48,0)
 F PRSLD=1:1:4 D
"RTN","PRSASR1",49,0)
 . S LDCODE=$$GET1^DIQ(450.0757,PRSLD_","_DFN,1)
"RTN","PRSASR1",50,0)
 . S LDPCT=$$GET1^DIQ(450.0757,PRSLD_","_DFN,2)
"RTN","PRSASR1",51,0)
 . S LDCC=$$GET1^DIQ(450.0757,PRSLD_","_DFN,3)
"RTN","PRSASR1",52,0)
 . S Y=LDCC,SUB454="CC"
"RTN","PRSASR1",53,0)
 . D OT^PRSDUTIL K SUB454
"RTN","PRSASR1",54,0)
 . S LDCCEX=$E(Y,1,30)
"RTN","PRSASR1",55,0)
 . S LDFCP=$$GET1^DIQ(450.0757,PRSLD_","_DFN,4)
"RTN","PRSASR1",56,0)
 . W !,"Code",PRSLD,": ",LDCODE,?12,LDPCT,?24,LDCC," - ",LDCCEX,?70,LDFCP
"RTN","PRSASR1",57,0)
 ;
"RTN","PRSASR1",58,0)
 W !!,"The previous Labor Distribution Values:"
"RTN","PRSASR1",59,0)
 S LDCNT="A"
"RTN","PRSASR1",60,0)
 S LDCNT=$O(^PRST(458,PPI,"E",DFN,"LDAUD",LDCNT),-1)
"RTN","PRSASR1",61,0)
 Q:'LDCNT
"RTN","PRSASR1",62,0)
 S IENS=LDCNT_","_DFN_","_PPI_","
"RTN","PRSASR1",63,0)
 S LDDOA=$$GET1^DIQ(458.1105,IENS,1,"E")
"RTN","PRSASR1",64,0)
 S LDCCB=$$GET1^DIQ(458.1105,IENS,2,"E")
"RTN","PRSASR1",65,0)
 S LDTOI=$$GET1^DIQ(458.1105,IENS,3,"E")
"RTN","PRSASR1",66,0)
 W !,LDDOA,?24,LDCCB,?61,LDTOI
"RTN","PRSASR1",67,0)
 F PRSLD=1:1:4 D
"RTN","PRSASR1",68,0)
 . S IENS=PRSLD_","_LDCNT_","_DFN_","_PPI_","
"RTN","PRSASR1",69,0)
 . S LDCODE=$$GET1^DIQ(458.11054,IENS,1)
"RTN","PRSASR1",70,0)
 . S LDPCT=$$GET1^DIQ(458.11054,IENS,2)
"RTN","PRSASR1",71,0)
 . S LDCC=$$GET1^DIQ(458.11054,IENS,3)
"RTN","PRSASR1",72,0)
 . S Y=LDCC,SUB454="CC"
"RTN","PRSASR1",73,0)
 . D OT^PRSDUTIL K SUB454
"RTN","PRSASR1",74,0)
 . S LDCCEX=$E(Y,1,30)
"RTN","PRSASR1",75,0)
 . S LDFCP=$$GET1^DIQ(458.11054,IENS,4)
"RTN","PRSASR1",76,0)
 . W !,"Code",PRSLD,": ",LDCODE,?12,LDPCT,?24,LDCC," - ",LDCCEX,?70,LDFCP
"RTN","PRSASR1",77,0)
 Q
"RTN","PRSASR1",78,0)
 ;
"RTN","PRSASR1",79,0)
LDHDR ; Labor Distribution Header information
"RTN","PRSASR1",80,0)
 ;
"RTN","PRSASR1",81,0)
 W !?15,"Labor Distribution Changes within the Pay Period:"
"RTN","PRSASR1",82,0)
 W !,"Date/Time",?24,"Changed by",?61,"Type of Interface"
"RTN","PRSASR1",83,0)
 W !,"Code",?12,"Percent",?24,"Cost Center - Description"
"RTN","PRSASR1",84,0)
 W ?65,"Fund Ctrl Pt"
"RTN","PRSASR1",85,0)
 W !,DASH
"RTN","PRSASR1",86,0)
 Q
"RTN","PRSASR1",87,0)
 ;
"RTN","PRSASR1",88,0)
LDHOLD ; Pause of more LD changes that will fit on 1 screen.
"RTN","PRSASR1",89,0)
 ;
"RTN","PRSASR1",90,0)
 N X
"RTN","PRSASR1",91,0)
 S LDHOLD=$$ASK^PRSLIB00(1)
"RTN","PRSASR1",92,0)
 S X=$G(^PRSPC(DFN,0))
"RTN","PRSASR1",93,0)
 W !,@IOF,?3,$P(X,"^",1)
"RTN","PRSASR1",94,0)
 S X=$P(X,"^",9)
"RTN","PRSASR1",95,0)
 I X W ?68,$E(X,1,3),"-",$E(X,4,5),"-",$E(X,6,9)
"RTN","PRSASR1",96,0)
 W !,DASH
"RTN","PRSASR1",97,0)
 D LDHDR
"RTN","PRSASR1",98,0)
 Q
"RTN","PRSASR1",99,0)
 ;
"RTN","PRSASR1",100,0)
PTP(PRSIEN,PPI) ; Updates hours credited for PT Phys w/ Memorandums
"RTN","PRSASR1",101,0)
 ; This API can be used for initial and subsequent calculation
"RTN","PRSASR1",102,0)
 ; of the PTP's ESR.
"RTN","PRSASR1",103,0)
 ;    algorithm for this API follows:
"RTN","PRSASR1",104,0)
 ; 1. Grab copy of currently stored pay period hours
"RTN","PRSASR1",105,0)
 ; 2. Look at ESR/timecard data to recalculate pay period hours
"RTN","PRSASR1",106,0)
 ; 3. Calculate net difference between 1 and 2
"RTN","PRSASR1",107,0)
 ; 4. update current pay period with new pp totals from (2) above
"RTN","PRSASR1",108,0)
 ; 5. add net diff (3) to memo totals
"RTN","PRSASR1",109,0)
 ;
"RTN","PRSASR1",110,0)
 N AHRS,AHTCM,AMT,COHRS,DIFFNP,DIFFRG,DIFFWP,INPH,ITHP,ITHW,IWPH
"RTN","PRSASR1",111,0)
 N MDAT,MDATA,MEAL,MIEN,MPPIEN,POHC,POT,PPC,PPE
"RTN","PRSASR1",112,0)
 N PPHRS,PPNP,PPWP,PRSX,START,STOP,THP,TOT,TOTAL,TOTNP,TOTWP
"RTN","PRSASR1",113,0)
 S MDAT=$P($G(^PRST(458,PPI,1)),U,1)
"RTN","PRSASR1",114,0)
 S MIEN=+$$MIEN^PRSPUT1(PRSIEN,MDAT)
"RTN","PRSASR1",115,0)
 Q:'MIEN  ; Not a PTP w/ memo
"RTN","PRSASR1",116,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSASR1",117,0)
 ;
"RTN","PRSASR1",118,0)
 ; Locate this PP in the PTP's memorandum
"RTN","PRSASR1",119,0)
 S MPPIEN=$O(^PRST(458.7,MIEN,9,"B",PPE,0))
"RTN","PRSASR1",120,0)
 Q:'MPPIEN  ; PP not found within memo (###exception message)
"RTN","PRSASR1",121,0)
 ;
"RTN","PRSASR1",122,0)
 ;get the current values for this pay period under the memo.
"RTN","PRSASR1",123,0)
 S PRSX=$G(^PRST(458.7,MIEN,9,MPPIEN,0))
"RTN","PRSASR1",124,0)
 S PPHRS=+$P(PRSX,U,2) ; Actual hours of work credited
"RTN","PRSASR1",125,0)
 S PPNP=+$P(PRSX,U,3)  ; Actual hours of Non Pay
"RTN","PRSASR1",126,0)
 S PPWP=+$P(PRSX,U,4)  ; Actual hours of LWOP
"RTN","PRSASR1",127,0)
 K PRSX
"RTN","PRSASR1",128,0)
 ;
"RTN","PRSASR1",129,0)
 ; Load the memo totals
"RTN","PRSASR1",130,0)
 S MDATA=$G(^PRST(458.7,MIEN,0))
"RTN","PRSASR1",131,0)
 S AHRS=+$P(MDATA,U,4)  ; Agreed Hours
"RTN","PRSASR1",132,0)
 S COHRS=+$P(MDATA,U,9) ; Carryover Hours
"RTN","PRSASR1",133,0)
 S ITHW=+$P(MDATA,U,10) ; Initial Total Hours Worked
"RTN","PRSASR1",134,0)
 S ITHP=+$P(MDATA,U,11) ; Initial Total Hours Paid
"RTN","PRSASR1",135,0)
 S INPH=+$P(MDATA,U,12) ; Initial Non-Pay Hours
"RTN","PRSASR1",136,0)
 S IWPH=+$P(MDATA,U,13) ; Initial Without Pay Hours
"RTN","PRSASR1",137,0)
 S (AHTCM,DIFFRG,DIFFNP,DIFFWP)=0
"RTN","PRSASR1",138,0)
 ;
"RTN","PRSASR1",139,0)
 ; Get Non pay and Leave without pay times from 8b string or recalc.
"RTN","PRSASR1",140,0)
 N TAMTS
"RTN","PRSASR1",141,0)
 S TAMTS("WP","Leave Without Pay")=""
"RTN","PRSASR1",142,0)
 S TAMTS("NP","Non-Pay Time")=""
"RTN","PRSASR1",143,0)
 D PP8BAMT^PRSPUT3(.TAMTS,PPI,PRSIEN)
"RTN","PRSASR1",144,0)
 S TOTAL("WP")=$G(TAMTS("WP","Leave Without Pay"))
"RTN","PRSASR1",145,0)
 S TOTAL("NP")=$G(TAMTS("NP","Non-Pay Time"))
"RTN","PRSASR1",146,0)
 S DIFFNP=TOTAL("NP")-PPNP
"RTN","PRSASR1",147,0)
 S DIFFWP=TOTAL("WP")-PPWP
"RTN","PRSASR1",148,0)
 ;
"RTN","PRSASR1",149,0)
 ; Loop thru day and ESR segments looking for leave and RG time
"RTN","PRSASR1",150,0)
 N DAY,ESR,RGCODES,SEG,TOT
"RTN","PRSASR1",151,0)
 S RGCODES="AA,AD,AL,CB,CP,DL,HX,ML,RG,RL,SL,TR,TV"
"RTN","PRSASR1",152,0)
 S TOTAL("RG")=0
"RTN","PRSASR1",153,0)
 F DAY=1:1:14 D
"RTN","PRSASR1",154,0)
 . ; only add totals for supervisor approved days
"RTN","PRSASR1",155,0)
 . Q:$$GETSTAT^PRSPESR1(PRSIEN,PPI,DAY)'=5
"RTN","PRSASR1",156,0)
 . S ESR=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))
"RTN","PRSASR1",157,0)
 . Q:ESR=""
"RTN","PRSASR1",158,0)
 . F SEG=0:1:6 Q:$P(ESR,U,(5*SEG)+3)=""  D
"RTN","PRSASR1",159,0)
 . . S TOT=$P(ESR,U,(5*SEG)+3)
"RTN","PRSASR1",160,0)
 . . ; Types Of Time that might have been worked in week 1
"RTN","PRSASR1",161,0)
 . . I RGCODES[TOT D  Q
"RTN","PRSASR1",162,0)
 . . . S TOTAL("RG")=TOTAL("RG")+$$AMT(ESR)
"RTN","PRSASR1",163,0)
 ;
"RTN","PRSASR1",164,0)
 ; Checks for Regular Time
"RTN","PRSASR1",165,0)
 S DIFFRG=TOTAL("RG")-PPHRS
"RTN","PRSASR1",166,0)
 ; determine number of memo pay periods that have been certified
"RTN","PRSASR1",167,0)
 S PRSX=$$MEMCPP^PRSPUT3(MIEN)
"RTN","PRSASR1",168,0)
 S PPC=$P(PRSX,U,2)+$S(PPE]$P(PRSX,U):1,1:0)
"RTN","PRSASR1",169,0)
 ;
"RTN","PRSASR1",170,0)
 ; Update pp totals with current calculated values
"RTN","PRSASR1",171,0)
 K IEN4587,PRSFDA
"RTN","PRSASR1",172,0)
 S IEN4587=MIEN_","
"RTN","PRSASR1",173,0)
 S PRSFDA(458.701,MPPIEN_","_IEN4587,1)=TOTAL("RG")  ; PP new REG hrs
"RTN","PRSASR1",174,0)
 S PRSFDA(458.701,MPPIEN_","_IEN4587,2)=TOTAL("NP")  ; PP new NP hrs
"RTN","PRSASR1",175,0)
 S PRSFDA(458.701,MPPIEN_","_IEN4587,3)=TOTAL("WP")  ; PP new WP hrs
"RTN","PRSASR1",176,0)
 ;
"RTN","PRSASR1",177,0)
 ; update memo grand totals with differences found 
"RTN","PRSASR1",178,0)
 S TOTNP=INPH+DIFFNP
"RTN","PRSASR1",179,0)
 S TOTWP=IWPH+DIFFWP
"RTN","PRSASR1",180,0)
 S PRSFDA(458.7,IEN4587,11)=TOTNP ; NP hrs
"RTN","PRSASR1",181,0)
 S PRSFDA(458.7,IEN4587,12)=TOTWP ; WP hrs
"RTN","PRSASR1",182,0)
 S PRSFDA(458.7,IEN4587,9)=ITHW+DIFFRG ; tot hrs worked (all creditable)
"RTN","PRSASR1",183,0)
 ;
"RTN","PRSASR1",184,0)
 ; If this is the first time the PP has been processed PPHRS will be null
"RTN","PRSASR1",185,0)
 ; so add the average hrs/pp, otherwise this count has already been added
"RTN","PRSASR1",186,0)
 S THP=ITHP+$S(PPHRS="":AHRS/26,1:0)
"RTN","PRSASR1",187,0)
 S PRSFDA(458.7,IEN4587,10)=$FN(THP-DIFFNP-DIFFWP,"",2) ; tot hrs paid
"RTN","PRSASR1",188,0)
 S PRSFDA(458.7,IEN4587,13)=$FN(PPC/26,"",2) ; % of memo completed
"RTN","PRSASR1",189,0)
 ; % OF HOURS COMPLETED
"RTN","PRSASR1",190,0)
 S POHC=$FN((ITHW+COHRS+DIFFRG)/(AHRS-TOTNP-TOTWP),"",2)
"RTN","PRSASR1",191,0)
 S PRSFDA(458.7,IEN4587,14)=POHC
"RTN","PRSASR1",192,0)
 ;
"RTN","PRSASR1",193,0)
 ; ave hrs/pp to complete mem (if certifying last pay period then then
"RTN","PRSASR1",194,0)
 ; you're out of pay periods so use 0.00 to report how many more hours)
"RTN","PRSASR1",195,0)
 S AHTCM=$S(PPC>25:"0.00",1:$FN((AHRS-(ITHW+COHRS+DIFFRG)/(26-PPC)),"",2))
"RTN","PRSASR1",196,0)
 S PRSFDA(458.7,IEN4587,15)=AHTCM
"RTN","PRSASR1",197,0)
 ; % off target
"RTN","PRSASR1",198,0)
 S POT=((AHRS/26)*PPC)-TOTNP-TOTWP
"RTN","PRSASR1",199,0)
 S POT=(ITHW+COHRS+DIFFRG)-POT/POT,POT=POT*100,POT=$FN(POT,"",2)
"RTN","PRSASR1",200,0)
 S PRSFDA(458.7,IEN4587,16)=POT
"RTN","PRSASR1",201,0)
 D FILE^DIE("","PRSFDA")
"RTN","PRSASR1",202,0)
 Q
"RTN","PRSASR1",203,0)
 ;
"RTN","PRSASR1",204,0)
AMT(ESR) ; Return hours elapsed for time segment in decimal format
"RTN","PRSASR1",205,0)
 ;          deduct meal
"RTN","PRSASR1",206,0)
 ;            e.g. AMT=2.5 (2 hours 30 min)
"RTN","PRSASR1",207,0)
 N START,STOP,MEAL,AMT,X
"RTN","PRSASR1",208,0)
 S START=$P(ESR,U,(5*SEG)+1),STOP=$P(ESR,U,(5*SEG)+2)
"RTN","PRSASR1",209,0)
 S MEAL=$P(ESR,U,(5*SEG)+5)
"RTN","PRSASR1",210,0)
 S AMT=$$ELAPSE^PRSPESR2(MEAL,START,STOP)
"RTN","PRSASR1",211,0)
 S X=$P(AMT,":",2) S X=$S(X=30:5,X=15:25,X=45:75,1:0)
"RTN","PRSASR1",212,0)
 S AMT=+$P(AMT,":",1)_"."_X
"RTN","PRSASR1",213,0)
 Q AMT
"RTN","PRSATE")
0^54^B80705897^B73506937
"RTN","PRSATE",1,0)
PRSATE ;WCIOFO/JAH - Enter/Edit Employee (emp) Tour of Duty (ToD) ;03/15/2005
"RTN","PRSATE",2,0)
 ;;4.0;PAID;**8,11,27,45,55,93**;Sep 21, 1995;Build 7
"RTN","PRSATE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATE",4,0)
 N PPI,PPE,PRSTLV,TLI,TLE,DFN
"RTN","PRSATE",5,0)
 ;
"RTN","PRSATE",6,0)
 ;    PPI =  pay period (pp) internal #.
"RTN","PRSATE",7,0)
 ;    PPE = pp external form (99-06).
"RTN","PRSATE",8,0)
 ;    PRSTLV = flag indicates timekeeper (TK) in T&L lookup ^PRSAUTL.
"RTN","PRSATE",9,0)
 ;    TLI = T&L unit internal #.
"RTN","PRSATE",10,0)
 ;    TLU = T&L unit # 3-digit
"RTN","PRSATE",11,0)
 ;
"RTN","PRSATE",12,0)
 ;  -Get current pp-internal & external.  -Ask user for T&L.
"RTN","PRSATE",13,0)
 ;  -Loop to ask for emp until TK is done.
"RTN","PRSATE",14,0)
 ;  --Emp lookup screens emps not in T&L returned by PRSAUTL call.
"RTN","PRSATE",15,0)
 ;
"RTN","PRSATE",16,0)
 S PRSTLV=2 D ^PRSAUTL Q:TLI<1
"RTN","PRSATE",17,0)
 F  S DFN=$$GETEMP^PRSATE6(TLE) Q:DFN<1  D
"RTN","PRSATE",18,0)
 .    S PPI=$P(^PRST(458,0),"^",3),PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",19,0)
 .    D TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV)
"RTN","PRSATE",20,0)
 Q
"RTN","PRSATE",21,0)
 ;=======================
"RTN","PRSATE",22,0)
 ;
"RTN","PRSATE",23,0)
TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV) ;
"RTN","PRSATE",24,0)
 ;
"RTN","PRSATE",25,0)
 N C0,NH,FLX,PMP,PP,PB,ENT,SRT,WTL,TYP,Z,TD,ERROR,NOERROR
"RTN","PRSATE",26,0)
 ;
"RTN","PRSATE",27,0)
 ;   Entitlement lookup leaks many variables.  Following R used in 
"RTN","PRSATE",28,0)
 ;   this routine but may be looked up again despite the fact they R 
"RTN","PRSATE",29,0)
 ;   leaked by ^PRSAENT.  See PRSAENT for further doc.
"RTN","PRSATE",30,0)
 ;
"RTN","PRSATE",31,0)
 ;    C0=emps 0 node in file 450    NH= emps 8B normal hrs
"RTN","PRSATE",32,0)
 ;    FLX= compressed/flextime code (0=none,C=compressed,F=flextime)
"RTN","PRSATE",33,0)
 ;    PMP= premium pay indicator 
"RTN","PRSATE",34,0)
 ;      ( D=entitled Sun., F=entitled Sat./Sun.,
"RTN","PRSATE",35,0)
 ;        E=entitled variable Sat./Sun. premium pay,
"RTN","PRSATE",36,0)
 ;        G=entitled variable Sun. prem pay, X=title 5 emps
"RTN","PRSATE",37,0)
 ;        R,C,O=different types of firefighters)
"RTN","PRSATE",38,0)
 ;  * PP= emps pay plan
"RTN","PRSATE",39,0)
 ;    DB = pay basis-1:full,2:part,3:intermit
"RTN","PRSATE",40,0)
 ;    ENT= 39 char entitlement string
"RTN","PRSATE",41,0)
 ;
"RTN","PRSATE",42,0)
 ;  Entitlement lookup.
"RTN","PRSATE",43,0)
 ;
"RTN","PRSATE",44,0)
 D ^PRSAENT I ENT="" D ERROR(1) S OUT=1 Q
"RTN","PRSATE",45,0)
 ;
"RTN","PRSATE",46,0)
 ; Display header/Ask pp (NOL^PRSATE2 returns SRT = Current, Next, Last)
"RTN","PRSATE",47,0)
 ;
"RTN","PRSATE",48,0)
 D NOW^%DTC S NOW=%
"RTN","PRSATE",49,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSATE",50,0)
 W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSATE",51,0)
 W !?29,"EMPLOYEE TOUR OF DUTY"
"RTN","PRSATE",52,0)
 D HDR^PRSADP1,NOL^PRSATE2
"RTN","PRSATE",53,0)
 Q:SRT="^"
"RTN","PRSATE",54,0)
 I SRT="L" S PPI=PPI-1,PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",55,0)
 ;
"RTN","PRSATE",56,0)
 ;  Get emp's flexitime code
"RTN","PRSATE",57,0)
 ;
"RTN","PRSATE",58,0)
 S FLX=$$FLEXIND^PRSATE6(PPI,DFN,SRT)
"RTN","PRSATE",59,0)
 ;
"RTN","PRSATE",60,0)
 ;  Is emp entitled reg. shed. hrs.?
"RTN","PRSATE",61,0)
 ;
"RTN","PRSATE",62,0)
 I $E(ENT,1)="0" D
"RTN","PRSATE",63,0)
 .  S Z=$E(ENT,2),TD=$S(Z="D":3,1:4) D NONE
"RTN","PRSATE",64,0)
 E  D
"RTN","PRSATE",65,0)
 .;
"RTN","PRSATE",66,0)
 .;    initialize t&l for this ToD
"RTN","PRSATE",67,0)
 .;
"RTN","PRSATE",68,0)
 .  S WTL=TLI
"RTN","PRSATE",69,0)
 .  I "NL"[SRT D
"RTN","PRSATE",70,0)
 ..    S TYP=0
"RTN","PRSATE",71,0)
 .  E  D
"RTN","PRSATE",72,0)
 ..    S TYP=$$ISTEMPTR()
"RTN","PRSATE",73,0)
 ..;
"RTN","PRSATE",74,0)
 ..;  For temp ToDs--ask user for T&L ToD will be worked
"RTN","PRSATE",75,0)
 ..;  Quit if we don't get a valid T&L unit.
"RTN","PRSATE",76,0)
 ..;
"RTN","PRSATE",77,0)
 ..    I TYP S WTL=$$ASKTLWRK^PRSATE6(TLE)
"RTN","PRSATE",78,0)
 .;
"RTN","PRSATE",79,0)
 .;  Save current ToD in case user aborts with an unacceptable ToD.
"RTN","PRSATE",80,0)
 .;
"RTN","PRSATE",81,0)
 .   D SAVETOUR^PRSATE6(PPI,DFN)
"RTN","PRSATE",82,0)
 .;
"RTN","PRSATE",83,0)
 .  I WTL'<1,TYP'["^" D 
"RTN","PRSATE",84,0)
 ..    D A1
"RTN","PRSATE",85,0)
 ..;
"RTN","PRSATE",86,0)
 ..; verify firefighter ToD after compressed ind. edit.  Don't accept 
"RTN","PRSATE",87,0)
 ..; ToD until its within guidlines. If TK force exits, restore old ToD.
"RTN","PRSATE",88,0)
 ..;
"RTN","PRSATE",89,0)
 ..  S NOERROR=0
"RTN","PRSATE",90,0)
 ..  F  D  Q:NOERROR
"RTN","PRSATE",91,0)
 ...    N ERROR D FFTOUR^PRSATE6(PPI,DFN,SRT,.ERROR)
"RTN","PRSATE",92,0)
 ...    I $$ISERRORS^PRSATE6(.ERROR) D
"RTN","PRSATE",93,0)
 ....      I $$ASKTOFIX^PRSATE6() D
"RTN","PRSATE",94,0)
 .....        D A1
"RTN","PRSATE",95,0)
 ....      E  D
"RTN","PRSATE",96,0)
 .....        D RESTORE^PRSATE6(PPI,DFN) S NOERROR=1
"RTN","PRSATE",97,0)
 ...    E  D
"RTN","PRSATE",98,0)
 ....      S NOERROR=1
"RTN","PRSATE",99,0)
 Q
"RTN","PRSATE",100,0)
 ;=======================
"RTN","PRSATE",101,0)
 ;
"RTN","PRSATE",102,0)
ISTEMPTR() ; IS TEMPORARY ToD ?
"RTN","PRSATE",103,0)
 ; Ask user if ToD is temp or perm & convert TYP to true false flag
"RTN","PRSATE",104,0)
 ;    Permanent set TYP=0,  Temporary set TYP=true (1)
"RTN","PRSATE",105,0)
 ; 
"RTN","PRSATE",106,0)
 S TYP=$$ASKTEMP^PRSATE6() I TYP'["^" S TYP=$E(TYP,1)="T",WTL=TLI
"RTN","PRSATE",107,0)
 Q TYP
"RTN","PRSATE",108,0)
 ;=======================
"RTN","PRSATE",109,0)
 ;
"RTN","PRSATE",110,0)
A1 ; Set up for emps ToD look up. Screen allows Daily ToDs & days off 
"RTN","PRSATE",111,0)
 ; for daily emps.  Everyone else gets days off & all other ToDs.
"RTN","PRSATE",112,0)
 ; Screen further ensures ToD is available either to all t&ls 
"RTN","PRSATE",113,0)
 ; or to t&l that this emp is working in.
"RTN","PRSATE",114,0)
 ;
"RTN","PRSATE",115,0)
 N DIC,X
"RTN","PRSATE",116,0)
 S DIC="^PRST(457.1,",DIC(0)="AEQMN"
"RTN","PRSATE",117,0)
 S DIC("S")="I "_$S($E(ENT,1)="D":"Y<3",1:"Y>5!(Y=1)")_",$P(^PRST(457.1,+Y,0),U,4)!($D(^PRST(457.1,+Y,""T"",""B"",WTL)))"
"RTN","PRSATE",118,0)
 ;
"RTN","PRSATE",119,0)
 ; Setup a fixed or varying ToD.  Compressed ToDs must be varying;
"RTN","PRSATE",120,0)
 ; ask TK about all others.
"RTN","PRSATE",121,0)
 ;
"RTN","PRSATE",122,0)
 I FLX="C" D
"RTN","PRSATE",123,0)
 .   D VAR
"RTN","PRSATE",124,0)
 E  D
"RTN","PRSATE",125,0)
 .  S X=$$ASKFIXED()
"RTN","PRSATE",126,0)
 .  Q:X="^"
"RTN","PRSATE",127,0)
 .  I X="N" D
"RTN","PRSATE",128,0)
 ..    D VAR
"RTN","PRSATE",129,0)
 .  E  D FX
"RTN","PRSATE",130,0)
 Q
"RTN","PRSATE",131,0)
 ;=======================
"RTN","PRSATE",132,0)
 ;
"RTN","PRSATE",133,0)
FX ; Fixed ToD
"RTN","PRSATE",134,0)
 S DIC("A")="Select TOUR OF DUTY: "
"RTN","PRSATE",135,0)
 W ! D ^DIC
"RTN","PRSATE",136,0)
 Q:Y'>0
"RTN","PRSATE",137,0)
 S TD=+Y,Y=$G(^PRST(457.1,TD,1)),TDH=$P(^(0),"^",6),HRS=TDH*10
"RTN","PRSATE",138,0)
 S (ZENT,STR)=""
"RTN","PRSATE",139,0)
 D OT^PRSATP,VS^PRSATE0
"RTN","PRSATE",140,0)
 I STR'="" W *7,!!,STR G FX
"RTN","PRSATE",141,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",142,0)
 I SRT="N" D
"RTN","PRSATE",143,0)
 .  D F1
"RTN","PRSATE",144,0)
 E  D
"RTN","PRSATE",145,0)
 .  F DAY=2:1:6,9:1:13 D SET
"RTN","PRSATE",146,0)
 .  S TD=1,(Y,TDH)="" F DAY=1,7,8,14 D SET
"RTN","PRSATE",147,0)
 .  W "  ... done" D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",148,0)
 .  D T2,^PRSATE5
"RTN","PRSATE",149,0)
 D HOL,RS
"RTN","PRSATE",150,0)
 Q
"RTN","PRSATE",151,0)
 ;=======================
"RTN","PRSATE",152,0)
 ;
"RTN","PRSATE",153,0)
F1 F DAY=2:1:6,9:1:13 D NX
"RTN","PRSATE",154,0)
 S TD=1 F DAY=1,7,8,14 D NX
"RTN","PRSATE",155,0)
 W "  ... done"
"RTN","PRSATE",156,0)
 D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",157,0)
 Q
"RTN","PRSATE",158,0)
 ;=======================
"RTN","PRSATE",159,0)
 ;
"RTN","PRSATE",160,0)
VAR ; Variable ToD
"RTN","PRSATE",161,0)
 D ^PRSATE0
"RTN","PRSATE",162,0)
 I SRT'="N" D T2,^PRSATE5
"RTN","PRSATE",163,0)
 D HOL,RS
"RTN","PRSATE",164,0)
 Q
"RTN","PRSATE",165,0)
 ;=======================
"RTN","PRSATE",166,0)
 ;
"RTN","PRSATE",167,0)
NONE ; No ToD
"RTN","PRSATE",168,0)
 N TYP2,UPDT,Y,TDH
"RTN","PRSATE",169,0)
 W !!,"This is an intermittent employee with no specified tour."
"RTN","PRSATE",170,0)
 W !!,"Time records will now be updated to indicate this."
"RTN","PRSATE",171,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",172,0)
 I '$$PERM^PRSALIB(PPI,DFN) D
"RTN","PRSATE",173,0)
 .  W !!,"Not all tour days are assigned a permanent status."
"RTN","PRSATE",174,0)
 .  I $$UPDTQ^PRSALIB(),$$TMPST^PRSALIB(.TYP2) D UPDSTAT^PRSALIB(PPI,DFN,TYP2)
"RTN","PRSATE",175,0)
 S (Y,TDH)="",TYP=0,WTL=TLI
"RTN","PRSATE",176,0)
 I SRT="N" D
"RTN","PRSATE",177,0)
 .  F DAY=1:1:14 D NX
"RTN","PRSATE",178,0)
 E  D
"RTN","PRSATE",179,0)
 .  F DAY=1:1:14 D SET
"RTN","PRSATE",180,0)
 W "  ... done"
"RTN","PRSATE",181,0)
 D HOL,RS
"RTN","PRSATE",182,0)
 Q
"RTN","PRSATE",183,0)
 ;=======================
"RTN","PRSATE",184,0)
 ;
"RTN","PRSATE",185,0)
RS ; Get Comp Ind
"RTN","PRSATE",186,0)
 S Y=$G(^PRST(458,PPI,"E",DFN,0))
"RTN","PRSATE",187,0)
 S FLX=$S((SRT="N")&($P(Y,U,7)]""):$P(Y,U,7),1:$P(Y,U,6))
"RTN","PRSATE",188,0)
 S DIR(0)="SAM^C:Compressed;F:Flexitime;0:None"
"RTN","PRSATE",189,0)
 S DIR("A")="Compressed Tour Indicator: "
"RTN","PRSATE",190,0)
 S DIR("B")=$S(FLX="C":"Compressed",FLX="F":"Flexitime",1:"None")
"RTN","PRSATE",191,0)
 D ^DIR K DIR I "^C^F^0^"'[(U_Y_U) S Y=FLX
"RTN","PRSATE",192,0)
 ;
"RTN","PRSATE",193,0)
 ;  Intermittent employee cannot have compressed tour.
"RTN","PRSATE",194,0)
 ;
"RTN","PRSATE",195,0)
 I $P(C0,U,10)=3,Y="C" D  G RS
"RTN","PRSATE",196,0)
 .   W *7,!?5,"Compressed tour not valid for this employee."
"RTN","PRSATE",197,0)
 ;
"RTN","PRSATE",198,0)
 I Y="F" S Z=0 D  I Z G RS
"RTN","PRSATE",199,0)
 .S PAY=$P(C0,U,21),PB=$P(C0,U,20)
"RTN","PRSATE",200,0)
 .I "0123456789GU"'[PAY S Z=1
"RTN","PRSATE",201,0)
 .I PAY="G",PB'=2 S Z=1
"RTN","PRSATE",202,0)
 .I PAY="U","27EXT"'[PB S Z=1
"RTN","PRSATE",203,0)
 .I Z W *7,!?5,"Flexitime not valid for this employee."
"RTN","PRSATE",204,0)
 .Q
"RTN","PRSATE",205,0)
 S $P(^PRST(458,PPI,"E",DFN,0),U,$S(SRT="N":7,1:6))=Y
"RTN","PRSATE",206,0)
 I $D(^PRST(458,"ATC",DFN)) D UPD^PRSASAL
"RTN","PRSATE",207,0)
 Q
"RTN","PRSATE",208,0)
 ;=======================
"RTN","PRSATE",209,0)
 ;
"RTN","PRSATE",210,0)
NX ; Set Next ToD
"RTN","PRSATE",211,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",212,0)
 Q:$P(Z,"^",2)=TD&('$P(Z,"^",3))
"RTN","PRSATE",213,0)
 ;
"RTN","PRSATE",214,0)
 S $P(Z,"^",3,4)="2^"_TD,$P(Z,"^",10,11)=DUZ_"^"_NOW
"RTN","PRSATE",215,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z,^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",216,0)
 Q
"RTN","PRSATE",217,0)
 ;=======================
"RTN","PRSATE",218,0)
 ;
"RTN","PRSATE",219,0)
SET ; Set ToD
"RTN","PRSATE",220,0)
 N ZLASTPP
"RTN","PRSATE",221,0)
 S U="^"
"RTN","PRSATE",222,0)
 ;
"RTN","PRSATE",223,0)
 ; Get Zero node of emp pp rec, Old ToD, & Prior scheduled ToD.
"RTN","PRSATE",224,0)
 ; ZLASTPP is true if a ToD present on this day last pp.
"RTN","PRSATE",225,0)
 ;
"RTN","PRSATE",226,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",227,0)
 S ZLASTPP=$P($G(^PRST(458,PPI-1,"E",DFN,"D",DAY,0)),U,2)'=""
"RTN","PRSATE",228,0)
 S OLD=$P(Z,U,2),SCH=$P(Z,U,4)
"RTN","PRSATE",229,0)
 ;
"RTN","PRSATE",230,0)
 ; Quit if old ToD=this ToD & emp rec start/stop=ToD file start/stop.
"RTN","PRSATE",231,0)
 ;
"RTN","PRSATE",232,0)
 Q:(OLD=TD)&($G(^PRST(458,PPI,"E",DFN,"D",DAY,1))=Y)
"RTN","PRSATE",233,0)
 ;
"RTN","PRSATE",234,0)
 ; Z is updated with new ToD info & replaces the emp ToD record.
"RTN","PRSATE",235,0)
 ;
"RTN","PRSATE",236,0)
 S $P(Z,U,8)=TDH
"RTN","PRSATE",237,0)
 S $P(Z,U,10,11)=DUZ_U_NOW
"RTN","PRSATE",238,0)
 I $P(Z,U,12) S $P(Z,U,12)="" ; remove holiday flag
"RTN","PRSATE",239,0)
 ;
"RTN","PRSATE",240,0)
 ; Temp ToD, store T&L ToD will be worked if it's not emp's usual t&l.
"RTN","PRSATE",241,0)
 ;
"RTN","PRSATE",242,0)
 I TYP S:TLI'=WTL $P(Z,U,9)=WTL
"RTN","PRSATE",243,0)
 ;
"RTN","PRSATE",244,0)
 ; No existing ToD on this day.
"RTN","PRSATE",245,0)
 ;
"RTN","PRSATE",246,0)
 I OLD="" D
"RTN","PRSATE",247,0)
 .  S $P(Z,U,1,3)=DAY_U_TD_U_TYP
"RTN","PRSATE",248,0)
 .  I ZLASTPP D S0
"RTN","PRSATE",249,0)
 E  D
"RTN","PRSATE",250,0)
 .;
"RTN","PRSATE",251,0)
 .;  clean out postings and other ToD info since ToD is changing
"RTN","PRSATE",252,0)
 .;
"RTN","PRSATE",253,0)
 .  D CLEANTOD(PPI,DFN,DAY,TD)
"RTN","PRSATE",254,0)
 .;
"RTN","PRSATE",255,0)
 .;
"RTN","PRSATE",256,0)
 .;
"RTN","PRSATE",257,0)
 .  S:SCH $P(Z,U,5,7)="^^"
"RTN","PRSATE",258,0)
 .  I SCH="" D
"RTN","PRSATE",259,0)
 ..    S $P(Z,U,2,4)=TD_U_TYP_U_OLD
"RTN","PRSATE",260,0)
 ..    D S0
"RTN","PRSATE",261,0)
 .  E  D
"RTN","PRSATE",262,0)
 ..    I SCH=TD D
"RTN","PRSATE",263,0)
 ...      S $P(Z,U,2,4)=TD_"^^"
"RTN","PRSATE",264,0)
 ...      K ^PRST(458,"ATC",DFN,PPI,DAY)
"RTN","PRSATE",265,0)
 ..    E  D
"RTN","PRSATE",266,0)
 ...      S $P(Z,U,2,3)=TD_U_TYP
"RTN","PRSATE",267,0)
 ...      D S0
"RTN","PRSATE",268,0)
 ;
"RTN","PRSATE",269,0)
 D S1
"RTN","PRSATE",270,0)
 Q
"RTN","PRSATE",271,0)
 ;=======================
"RTN","PRSATE",272,0)
 ;
"RTN","PRSATE",273,0)
 ; Set up x-ref for supervisor approval of ToD change
"RTN","PRSATE",274,0)
 ;
"RTN","PRSATE",275,0)
S0 S ^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",276,0)
 Q
"RTN","PRSATE",277,0)
 ;=======================
"RTN","PRSATE",278,0)
 ;
"RTN","PRSATE",279,0)
S1 ;
"RTN","PRSATE",280,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z S:Y'="" ^(1)=Y
"RTN","PRSATE",281,0)
 Q
"RTN","PRSATE",282,0)
 ;=======================
"RTN","PRSATE",283,0)
 ;
"RTN","PRSATE",284,0)
T2 ; Ask if second ToD
"RTN","PRSATE",285,0)
 N X
"RTN","PRSATE",286,0)
 ;
"RTN","PRSATE",287,0)
 ;  Don't ask for Daily ToDs
"RTN","PRSATE",288,0)
 ;
"RTN","PRSATE",289,0)
 Q:$E(ENT,1)="D"
"RTN","PRSATE",290,0)
 ;
"RTN","PRSATE",291,0)
 S X=$$ASK2NDTR()
"RTN","PRSATE",292,0)
 Q:X'="Y"  G ^PRSATE4
"RTN","PRSATE",293,0)
 ;=======================
"RTN","PRSATE",294,0)
 ;
"RTN","PRSATE",295,0)
HOL ; Determine if Holiday within ToD
"RTN","PRSATE",296,0)
 N DAY
"RTN","PRSATE",297,0)
 D ^PRSAPPH
"RTN","PRSATE",298,0)
 Q:'$D(HOL)
"RTN","PRSATE",299,0)
 S TT="HX",DUP=1
"RTN","PRSATE",300,0)
 D E^PRSAPPH
"RTN","PRSATE",301,0)
 Q
"RTN","PRSATE",302,0)
 ;=======================
"RTN","PRSATE",303,0)
 ;
"RTN","PRSATE",304,0)
CLEANTOD(PPI,DFN,DAY,TD) ; CLEAN OUT TOUR
"RTN","PRSATE",305,0)
 N PRSDT,MIEN
"RTN","PRSATE",306,0)
 K ^PRST(458,PPI,"E",DFN,"D",DAY,1),^(2),^(3),^(10) I TD<5 K ^(4) S $P(Z,U,13,15)="^^"
"RTN","PRSATE",307,0)
 ; if employee is PTP with active memo then reset the ESR day
"RTN","PRSATE",308,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSATE",309,0)
 S MIEN=$$MIEN^PRSPUT1(DFN,PRSDT)
"RTN","PRSATE",310,0)
 I MIEN D
"RTN","PRSATE",311,0)
 . N PRSFDA
"RTN","PRSATE",312,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",146)="3" ; status = resubmit
"RTN","PRSATE",313,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",148)="Tour Changed" ; remarks
"RTN","PRSATE",314,0)
 . D FILE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSATE",315,0)
 Q
"RTN","PRSATE",316,0)
 ;=======================
"RTN","PRSATE",317,0)
 ;
"RTN","PRSATE",318,0)
ERROR(NUM,VAR1,VAR2) ;
"RTN","PRSATE",319,0)
 W *7,!!
"RTN","PRSATE",320,0)
 I NUM=1 W "Employee has no Pay Entitlement table entry."
"RTN","PRSATE",321,0)
 I NUM=2 D
"RTN","PRSATE",322,0)
 .  Q:$G(NH)=112
"RTN","PRSATE",323,0)
 .  W "Warning: Normal Hours are ",$G(VAR1),"; Tour Hours are ",$G(VAR2)
"RTN","PRSATE",324,0)
 Q
"RTN","PRSATE",325,0)
 ;=======================
"RTN","PRSATE",326,0)
 ;
"RTN","PRSATE",327,0)
ASKFIXED() ;GET USER'S YES OR NO RESPONSE TO FIXED ToD QUESTION
"RTN","PRSATE",328,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",329,0)
 S DIR("A")="Do you wish to enter a fixed Mon-Fri Tour"
"RTN","PRSATE",330,0)
 S DIR(0)="Y"
"RTN","PRSATE",331,0)
 S DIR("?")="Answer NO to create any other type of tour."
"RTN","PRSATE",332,0)
 S DIR("?",1)="Fixed tours are Monday - Friday with the same hours."
"RTN","PRSATE",333,0)
 D ^DIR
"RTN","PRSATE",334,0)
 S RESP=$S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",335,0)
 Q RESP
"RTN","PRSATE",336,0)
 ;=======================
"RTN","PRSATE",337,0)
 ;
"RTN","PRSATE",338,0)
ASK2NDTR() ;GET USER'S YES OR NO RESPONSE TO 2nd ToD QUESTION
"RTN","PRSATE",339,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",340,0)
 S DIR("A")="Do you wish to enter a Second Tour for any Day"
"RTN","PRSATE",341,0)
 S DIR(0)="Y"
"RTN","PRSATE",342,0)
 S DIR("B")="N"
"RTN","PRSATE",343,0)
 S DIR("?",1)="Answer Yes to add a second tour.  No to continue."
"RTN","PRSATE",344,0)
 S DIR("?")="Enter ^ to escape and cancel this tour change."
"RTN","PRSATE",345,0)
 D ^DIR
"RTN","PRSATE",346,0)
 S RESP=$S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",347,0)
 Q RESP
"RTN","PRSATE",348,0)
 ;=======================
"RTN","PRSATE",349,0)
 ;
"RTN","PRSATIM")
0^53^B4060707^B3640674
"RTN","PRSATIM",1,0)
PRSATIM ;HISC/REL - Time Input Conversion ;01/21/05
"RTN","PRSATIM",2,0)
 ;;4.0;PAID;**69,70,71,93**;Sep 21, 1995;Build 7
"RTN","PRSATIM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATIM",4,0)
 S X=$TR(X,"adimnop","ADIMNOP")
"RTN","PRSATIM",5,0)
 S X=$S(X="M":"MID",X="N":"NOON",1:X)
"RTN","PRSATIM",6,0)
 I X?1"12".A S X=$S(X="12M":"MID",X="12N":"NOON",1:X)
"RTN","PRSATIM",7,0)
 I X?1.A S X=$S(X["MID":2400,X["NOON":1200,1:"")
"RTN","PRSATIM",8,0)
 S:$E(X,$L(X))="M" X=$E(X,1,$L(X)-1) S X1=$E(X,$L(X)) I X1?1U,"AP"'[X1 G ERR
"RTN","PRSATIM",9,0)
 S X1=$P(X,":",2) I X1'="",X1'?2N1.2U G ERR
"RTN","PRSATIM",10,0)
 I X'?4N,$S($L(+X)<3:+X,1:+X\100)>12 G ERR
"RTN","PRSATIM",11,0)
 S X=$P(X,":",1)_$P(X,":",2),X1=X
"RTN","PRSATIM",12,0)
 G:X?4N A I X'?1.4N1.2U G ERR
"RTN","PRSATIM",13,0)
 S:X<13 X=X*100 I X1["A" G:X>1259 ERR S X=$S(X=1200:2400,X>1159:X-1200,1:X)
"RTN","PRSATIM",14,0)
 E  I X<1200,X1["P"!(X<600) S X=X+1200 I X<1300 G ERR
"RTN","PRSATIM",15,0)
A I X>2400!('X&(X'="0000"))!(X#100>59) G ERR
"RTN","PRSATIM",16,0)
 S X1=+X I 'X1!(X1=1200)!(X1=2400) S X=$S(X1=1200:"NOON",1:"MID") G DNE
"RTN","PRSATIM",17,0)
 S X1=$S(X1>1259:X1-1200,1:X1),X1=$E("000",0,4-$L(X1))_X1_$S(X=2400:"A",X>1159:"P",1:"A")
"RTN","PRSATIM",18,0)
 I "00^15^30^45"'[$E(X1,3,4) G ERR
"RTN","PRSATIM",19,0)
 S X=$E(X1,1,2)_":"_$E(X1,3,5)
"RTN","PRSATIM",20,0)
DNE K X1 Q
"RTN","PRSATIM",21,0)
ERR K X,X1 Q
"RTN","PRSATIM",22,0)
CNV ; Convert Start/Stop to minutes
"RTN","PRSATIM",23,0)
 ; X=start_"^"_stop  Output: Y=start(min)_"^"_stop(min)
"RTN","PRSATIM",24,0)
 S CNX=X,X=$P(CNX,"^",1),Y=0 D MIL S Y=Y\100*60+(Y#100),$P(CNX,"^",1)=Y
"RTN","PRSATIM",25,0)
 S X=$P(CNX,"^",2),Y=1 D MIL S Y=Y\100*60+(Y#100)
"RTN","PRSATIM",26,0)
 S Y=$P(CNX,"^",1)_"^"_Y K CNX Q
"RTN","PRSATIM",27,0)
MIL ; Convert from AM/PM to 2400
"RTN","PRSATIM",28,0)
 ; X=time Y: 0=Mid=0,1=Mid=2400 Output: Y=time in 2400
"RTN","PRSATIM",29,0)
 I X="MID"!(X="NOON") S Y=$S(X="NOON":1200,Y:2400,1:0) Q
"RTN","PRSATIM",30,0)
 S Y=$P(X,":",1)_$P(X,":",2),Y=+Y Q:X["A"
"RTN","PRSATIM",31,0)
 S:Y<1200 Y=Y+1200 Q
"RTN","PRSATIM",32,0)
HLP ; Time Help
"RTN","PRSATIM",33,0)
 W !?5,"Time may be entered as 8A or 8a, 8:00A, 8:15A, 8:15AM or military"
"RTN","PRSATIM",34,0)
 W !?5,"time: 0800, 1300; or MID or 12M for midnight; NOON or 12N for noon."
"RTN","PRSATIM",35,0)
 W !?5,"Time must be in quarter hours; e.g., 8A or 8:15A or 8:30A or 8:45A.",!
"RTN","PRSATIM",36,0)
 Q
"RTN","PRSATP")
0^26^B31409450^B19887527
"RTN","PRSATP",1,0)
PRSATP ;HISC/REL,WIRMFO/MGD - Timekeeper Post Time ;3/21/06
"RTN","PRSATP",2,0)
 ;;4.0;PAID;**22,57,69,92,102,93**;Sep 21, 1995;Build 7
"RTN","PRSATP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATP",4,0)
 ; input (from calling option)
"RTN","PRSATP",5,0)
 ;   PTPF - (optional) part-time physician flag, true (=1) when called
"RTN","PRSATP",6,0)
 ;          by the posting option for part-time physicians with a memo.
"RTN","PRSATP",7,0)
 ;
"RTN","PRSATP",8,0)
 N GLOB ; global reference for employee's time & attendance record.
"RTN","PRSATP",9,0)
 N PRSDT
"RTN","PRSATP",10,0)
 S PRSTLV=2 D ^PRSAUTL G:TLI<1 EX S %DT="X",X="T+3" D ^%DT
"RTN","PRSATP",11,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT("B")="T-1",%DT(0)=-Y W ! D ^%DT
"RTN","PRSATP",12,0)
 G:Y<1 EX S (PRSDT,D1)=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2)
"RTN","PRSATP",13,0)
 I PPI="" W !!,$C(7),"Pay Period is Not Open Yet!" G EX
"RTN","PRSATP",14,0)
 S PPE=$P($G(^PRST(458,PPI,0)),"^",1),DTE=$P($G(^PRST(458,PPI,2)),"^",DAY),DTI=$P($G(^(1)),"^",DAY)
"RTN","PRSATP",15,0)
D2 W !!,"Would you like to edit the T & A RECORDs in alphabetical order" S %=1 D YN^DICN I % S LP=% G EX:%=-1,LOOP:%=1,NME
"RTN","PRSATP",16,0)
 W !!,"Answer YES if you want all RECORDs brought up for which no data"
"RTN","PRSATP",17,0)
 W !,"has been entered." G D2
"RTN","PRSATP",18,0)
 ;
"RTN","PRSATP",19,0)
 ;
"RTN","PRSATP",20,0)
LOOP ;
"RTN","PRSATP",21,0)
 S LP=1,NN=""
"RTN","PRSATP",22,0)
 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  I $$PTPSCR(DFN,PRSDT,$G(PTPF)) S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) I 'LP G EX
"RTN","PRSATP",23,0)
 G EX
"RTN","PRSATP",24,0)
NME K DIC S DIC("A")="Select EMPLOYEE: ",DIC("S")="I $P(^(0),""^"",8)=TLE,$D(^PRST(458,PPI,""E"",+Y)),$$PTPSCR^PRSATP(+Y,PRSDT,$G(PTPF))",DIC(0)="AEQM",DIC="^PRSPC(",D="ATL"_TLE W ! D IX^DIC S DFN=+Y K DIC
"RTN","PRSATP",25,0)
 G:DFN<1 EX S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) G NME
"RTN","PRSATP",26,0)
POST S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2),TC2=$P($G(^(0)),"^",13)
"RTN","PRSATP",27,0)
 I 'TC Q:LP'=2  W !!?5,"This Employee has no tour entered for this date." Q
"RTN","PRSATP",28,0)
 I "T"'[$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) W:LP=2 $C(7),!!,"This Employee has already been sent to Payroll." Q
"RTN","PRSATP",29,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,10)),"^",1)
"RTN","PRSATP",30,0)
 I LP=1,"1 3 4"[TC!(STAT'="") Q
"RTN","PRSATP",31,0)
 ;
"RTN","PRSATP",32,0)
 ; check if ESR is approved when posting PT Phy with memo
"RTN","PRSATP",33,0)
 I $G(PTPF),$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,7)),U)=5 D  Q:'Y!$D(DIRUT)
"RTN","PRSATP",34,0)
 . W $C(7),!
"RTN","PRSATP",35,0)
 . W !,"This day was auto-posted from an approved Electronic Subsidiary Record (ESR)."
"RTN","PRSATP",36,0)
 . W !,"Normally, changes should be accomplished by having the T & L supervisor return"
"RTN","PRSATP",37,0)
 . W !,"the ESR day to the part-time physician for correction."
"RTN","PRSATP",38,0)
 . W !,"An exception to the above is when AWOL, On Suspension, or Non-Pay must be"
"RTN","PRSATP",39,0)
 . W !,"posted, since those can not be entered via the ESR.",!
"RTN","PRSATP",40,0)
 . S DIR(0)="Y"
"RTN","PRSATP",41,0)
 . S DIR("A")="Do you want to manually post this day on the timecard"
"RTN","PRSATP",42,0)
 . S DIR("B")="NO"
"RTN","PRSATP",43,0)
 . D ^DIR K DIR
"RTN","PRSATP",44,0)
 ;
"RTN","PRSATP",45,0)
 ; lock employee record for editing by timekeeper
"RTN","PRSATP",46,0)
 I '$$AVAILREC^PRSLIB00("TK",.GLOB,.STOP) S:LP=1&$G(STOP) LP=0 Q
"RTN","PRSATP",47,0)
 D ^PRSADP1,LP,^PRSATP2,^PRSAENT
"RTN","PRSATP",48,0)
 G P0:TC>4,P0:TC=2,P0:TC=3,P3:TC=4,P1
"RTN","PRSATP",49,0)
P0 R !!,"Did Employee Only Work Scheduled Tour? ",X:DTIME S:'$T X="^^" S:X["^^" LP=0 Q:X["^"  S X=$TR(X,"yesnor","YESNOR")
"RTN","PRSATP",50,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="",X'="R" W $C(7),!?5," Answer YES or NO or R for Normal Posting with Remarks" G P0
"RTN","PRSATP",51,0)
 S X=$E(X,1) I "YR"'[X G P1
"RTN","PRSATP",52,0)
 S PTY=1 I STAT'="" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3)
"RTN","PRSATP",53,0)
 I TC=3 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,2),"^",3)="RG",STAT="T"
"RTN","PRSATP",54,0)
 I STAT'="",$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) D NOW^%DTC S NOW=%,TT="HW" D S0^PRSAPPH
"RTN","PRSATP",55,0)
 S LV="" D A2^PRSATP0:X="R" G UPD
"RTN","PRSATP",56,0)
P1 R !!,"Was Employee Absent the Entire Tour? ",X:DTIME S:'$T X="^" Q:X["^"  S X=$TR(X,"yesno","YESNO")
"RTN","PRSATP",57,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="" W $C(7)," Answer YES or NO" G P1
"RTN","PRSATP",58,0)
 I X?1"Y".E D ^PRSATP0 Q:X["^"  G UPD
"RTN","PRSATP",59,0)
 I $E(ENT,1,2)["D" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3),^(10) Q
"RTN","PRSATP",60,0)
P3 S ZENT=$S($E(ENT,2)="H"&('$G(PTPF)):"RG ",$E(ENT,1,2)="00":"RG ",1:"")
"RTN","PRSATP",61,0)
 I TC=1 D OT S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&(AC="M2E") ZENT=ZENT_"HW " S ZENT=ZENT_"NP CP " G P31
"RTN","PRSATP",62,0)
 I TC=3!(TC=4) D LV S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&($E(ENT,22)) ZENT=ZENT_"HW " G P31
"RTN","PRSATP",63,0)
 D LV,OT S ZENT=ZENT_"TV TR " S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) ZENT=ZENT_"HX HW "
"RTN","PRSATP",64,0)
P31 S DDSFILE=458,DDSFILE(1)=458.02,DA(2)=PPI,DA(1)=DFN,DA=DAY
"RTN","PRSATP",65,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ZS
"RTN","PRSATP",66,0)
 S DR="[PRSA TP POST1]" D ^DDS K DS Q:'$D(ZS)
"RTN","PRSATP",67,0)
 I ZS'="" S ^PRST(458,PPI,"E",DFN,"D",DAY,2)=ZS,PTY=3 G UPD
"RTN","PRSATP",68,0)
 I $D(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ^(2),^(3),^(10)
"RTN","PRSATP",69,0)
 Q
"RTN","PRSATP",70,0)
UPD ; Update status
"RTN","PRSATP",71,0)
 D NOW^%DTC
"RTN","PRSATP",72,0)
 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,10),"^",1,4)="T^"_DUZ_"^"_%_"^"_PTY
"RTN","PRSATP",73,0)
 N DAH,DBH,HOL,QUIT
"RTN","PRSATP",74,0)
 S (DAH,DBH,HOL,QUIT)=""
"RTN","PRSATP",75,0)
 ;
"RTN","PRSATP",76,0)
 ; Check to holiday encapsulated by a form a non-pay
"RTN","PRSATP",77,0)
 D HENCAP^PRSATP3(PPI,DFN,DAY,.DBH,.HOL,.DAH,.QUIT)
"RTN","PRSATP",78,0)
 Q:QUIT
"RTN","PRSATP",79,0)
 D UPDT^PRSATP3(DFN,DBH,HOL,DAH)
"RTN","PRSATP",80,0)
 K DAH,DBH,HOL,QUIT
"RTN","PRSATP",81,0)
 Q
"RTN","PRSATP",82,0)
LP W !!,"Enter '^' to bypass this employee." W:LP=1 " Enter '^^' to stop T&L editing." W ! Q
"RTN","PRSATP",83,0)
LV S Z1="30 31 31 31 32 33 28 35 35 30 36 37 38",Z2="AL SL CB AD NL WP CU AA DL RL NP CP HX"
"RTN","PRSATP",84,0)
 ;
"RTN","PRSATP",85,0)
 ; Check to see if the employee is entitled to Military Leave and add
"RTN","PRSATP",86,0)
 ; ML to list if they are.  Added to be compliant with Public Law
"RTN","PRSATP",87,0)
 ; 106-554.
"RTN","PRSATP",88,0)
 ;
"RTN","PRSATP",89,0)
 I $E(ENT,34) D
"RTN","PRSATP",90,0)
 . S Z1=Z1_" 34",Z2=Z2_" ML"
"RTN","PRSATP",91,0)
 . F K=1:1:14 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSATP",92,0)
 ;
"RTN","PRSATP",93,0)
 I '$E(ENT,34) D
"RTN","PRSATP",94,0)
 . F K=1:1:13 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSATP",95,0)
 Q
"RTN","PRSATP",96,0)
OT ; Get entitled out-of-tour types of time
"RTN","PRSATP",97,0)
 S Z1="12 28 26",Z2="OT CT ON" F K=1:1:3 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" " I ZENT'["UN" S ZENT=ZENT_"UN "
"RTN","PRSATP",98,0)
 I $E(ENT,29),'$E(ENT,26) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",99,0)
 ; Allow Stand By for employees w/ Prem Pay Ind = W or V
"RTN","PRSATP",100,0)
 I $E(ENT,29),$E(ENT,26),"^W^V^"[(U_PMP_U) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",101,0)
 Q
"RTN","PRSATP",102,0)
EX ;clean up lock global which is set in $$AVAILREC^PRSLIB00
"RTN","PRSATP",103,0)
 K ^TMP($J,"LOCK")
"RTN","PRSATP",104,0)
 ;generic cleanup
"RTN","PRSATP",105,0)
 G KILL^XUSCLEAN
"RTN","PRSATP",106,0)
 ;
"RTN","PRSATP",107,0)
PTPSCR(PRSIEN,PSTDT,PTPF) ; part-time physician screen extrinsic function
"RTN","PRSATP",108,0)
 ; input
"RTN","PRSATP",109,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSATP",110,0)
 ;   PSTDT  - Date being posted (FileMan internal)
"RTN","PRSATP",111,0)
 ;   PTPF   - (opt) Part-time physician flag, equals true (1) when screen
"RTN","PRSATP",112,0)
 ;            should only allow selection of part-time physician with
"RTN","PRSATP",113,0)
 ;            memo and false (null or 0) when screen should only
"RTN","PRSATP",114,0)
 ;            allow selection of employees that are not part-time
"RTN","PRSATP",115,0)
 ;            physicians with memo.
"RTN","PRSATP",116,0)
 ; result
"RTN","PRSATP",117,0)
 ;   returns a boolean value (1 or 0) or null
"RTN","PRSATP",118,0)
 ;     =1 if employee passed screen
"RTN","PRSATP",119,0)
 ;        (PTPF true and employee is PTP with memo) OR
"RTN","PRSATP",120,0)
 ;        (PTPF false and employee is not PTP with memo)
"RTN","PRSATP",121,0)
 ;     =0 if employee did not pass screen
"RTN","PRSATP",122,0)
 ;     =null value if required inputs were not provided
"RTN","PRSATP",123,0)
 ;
"RTN","PRSATP",124,0)
 N PRSRET,PTPM
"RTN","PRSATP",125,0)
 S PTPF=$G(PTPF)
"RTN","PRSATP",126,0)
 S PRSRET="" ; init return
"RTN","PRSATP",127,0)
 I PRSIEN,PSTDT D
"RTN","PRSATP",128,0)
 . ; determine if employee is PT physician with memo on the posting date
"RTN","PRSATP",129,0)
 . S PTPM=$S($$MIEN^PRSPUT1(PRSIEN,PSTDT)>0:1,1:0)
"RTN","PRSATP",130,0)
 . ; apply screen
"RTN","PRSATP",131,0)
 . S PRSRET=$S(PTPF&PTPM:1,'PTPF&'PTPM:1,1:0)
"RTN","PRSATP",132,0)
 ;
"RTN","PRSATP",133,0)
 Q PRSRET
"RTN","PRSATP",134,0)
 ;
"RTN","PRSATP",135,0)
 ;PRSATP
"RTN","PRSLIB00")
0^59^B23488632^B23114692
"RTN","PRSLIB00",1,0)
PRSLIB00 ;WOIFO/JAH - PAID LIBRARY - ROUTINES & FUNCTIONS ;01/22/2005
"RTN","PRSLIB00",2,0)
 ;;4.0;PAID;**25,35,49,57,93**;Sep 21, 1995;Build 7
"RTN","PRSLIB00",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSLIB00",4,0)
 Q
"RTN","PRSLIB00",5,0)
 ;
"RTN","PRSLIB00",6,0)
 ;=====================================================================
"RTN","PRSLIB00",7,0)
AVAILREC(WHO,GLOBREF,OUT) ;IS RECORD AVAILABLE
"RTN","PRSLIB00",8,0)
 ;parameters
"RTN","PRSLIB00",9,0)
 ;  WHO     indicates type of option attempting the lock (TK or SUP)
"RTN","PRSLIB00",10,0)
 ;  GLOBREF passed by reference - used to return a global name
"RTN","PRSLIB00",11,0)
 ;  OUT     passed by reference - used to return results of call to
"RTN","PRSLIB00",12,0)
 ;          $$ASK. Equals 1 if user entered '^' at the prompt.
"RTN","PRSLIB00",13,0)
 ;          Is only defined when employee record could not be locked.
"RTN","PRSLIB00",14,0)
 ;make sure there is a pay period record for employee & that
"RTN","PRSLIB00",15,0)
 ;record is not being edited by timekeeper or supervisor.
"RTN","PRSLIB00",16,0)
 ;
"RTN","PRSLIB00",17,0)
 ;If record is available, then lock it and store pointer to
"RTN","PRSLIB00",18,0)
 ;locked record in ^TMP($J,"LOCK" so we can unlock all 
"RTN","PRSLIB00",19,0)
 ;records in ^TMP "queue" upon exit of certification option.
"RTN","PRSLIB00",20,0)
 ;
"RTN","PRSLIB00",21,0)
 N MESSAGE,M1,M2,M3,EMPNAME
"RTN","PRSLIB00",22,0)
 ;
"RTN","PRSLIB00",23,0)
 ;create message depending on which option is being used to attempt
"RTN","PRSLIB00",24,0)
 ;to edit record: Supervisory Certification or TimeKeeper posting.
"RTN","PRSLIB00",25,0)
 ;
"RTN","PRSLIB00",26,0)
 S M1="-Employee's pay period record locked. "
"RTN","PRSLIB00",27,0)
 S M2=$S(WHO="SUP":"Timekeeper",WHO="TK":"Supervisor",1:"Another user")
"RTN","PRSLIB00",28,0)
 S M3=" may be editing or reviewing."
"RTN","PRSLIB00",29,0)
 S MESSAGE=M1_M2_M3
"RTN","PRSLIB00",30,0)
 ;
"RTN","PRSLIB00",31,0)
 ;
"RTN","PRSLIB00",32,0)
 S GLOBREF="^PRST(458,"_PPI_","_"""E"""_","_DFN_",0)"
"RTN","PRSLIB00",33,0)
 K OUT
"RTN","PRSLIB00",34,0)
 S AVAIL=0
"RTN","PRSLIB00",35,0)
 I $D(^PRST(458,PPI,"E",DFN,0)) D
"RTN","PRSLIB00",36,0)
 .  S EMPNAME=$P($G(^PRSPC(DFN,0)),"^")_" "
"RTN","PRSLIB00",37,0)
 .  I '$$LOCK(GLOBREF) W !!,EMPNAME,!,MESSAGE S OUT=$$ASK^PRSLIB00()
"RTN","PRSLIB00",38,0)
 .  E  D
"RTN","PRSLIB00",39,0)
 ..    S ^TMP($J,"LOCK",DFN)=""
"RTN","PRSLIB00",40,0)
 ..    S AVAIL=1
"RTN","PRSLIB00",41,0)
 Q AVAIL
"RTN","PRSLIB00",42,0)
 ;====================================================================
"RTN","PRSLIB00",43,0)
 ;
"RTN","PRSLIB00",44,0)
 ;===================================================================
"RTN","PRSLIB00",45,0)
LOCK(GLOBREF) ;INCREMENTALLY LOCK A RECORD
"RTN","PRSLIB00",46,0)
 ;
"RTN","PRSLIB00",47,0)
 ;RETURN FALSE IF RECORD ALREADY HAS A LOCK
"RTN","PRSLIB00",48,0)
 L +@GLOBREF:2 S SUCCESS=$T
"RTN","PRSLIB00",49,0)
 Q SUCCESS
"RTN","PRSLIB00",50,0)
 ;
"RTN","PRSLIB00",51,0)
 ;===================================================================
"RTN","PRSLIB00",52,0)
 ;
"RTN","PRSLIB00",53,0)
 ;====================================================================
"RTN","PRSLIB00",54,0)
 ;
"RTN","PRSLIB00",55,0)
UNLOCK(GLOBREF) ;INCREMENTALLY UNLOCK A RECORD
"RTN","PRSLIB00",56,0)
 L -@GLOBREF
"RTN","PRSLIB00",57,0)
 Q
"RTN","PRSLIB00",58,0)
 ;
"RTN","PRSLIB00",59,0)
 ;===================================================================
"RTN","PRSLIB00",60,0)
 ;
"RTN","PRSLIB00",61,0)
 ;===================================================================
"RTN","PRSLIB00",62,0)
ASK(HOLD) ;ask user 2 continue function
"RTN","PRSLIB00",63,0)
 ;return true (1) if user want's 2 stop, false (0) 2 continue.
"RTN","PRSLIB00",64,0)
 ;If HOLD defined, use prompt 2 hold display until user hits return.
"RTN","PRSLIB00",65,0)
 ;If not terminal then, do nothing, return FALSE.
"RTN","PRSLIB00",66,0)
 ;
"RTN","PRSLIB00",67,0)
 S STOP=0
"RTN","PRSLIB00",68,0)
 I $E(IOST,1,2)="C-" D
"RTN","PRSLIB00",69,0)
 .;
"RTN","PRSLIB00",70,0)
 .N RESP,DIR S RESP=0
"RTN","PRSLIB00",71,0)
 .I $G(HOLD) S DIR(0)="EA",DIR("A")="Enter return to continue. "
"RTN","PRSLIB00",72,0)
 .E  S DIR(0)="E"
"RTN","PRSLIB00",73,0)
 .D ^DIR I Y="" S STOP=0
"RTN","PRSLIB00",74,0)
 .I $D(DIRUT) S STOP=1
"RTN","PRSLIB00",75,0)
 Q STOP
"RTN","PRSLIB00",76,0)
 ;=====================================================================
"RTN","PRSLIB00",77,0)
BLDYR(NEXT) ;Build year with last digit of year.
"RTN","PRSLIB00",78,0)
 ;pivot back 2 years and forward 7.
"RTN","PRSLIB00",79,0)
 ;NEXT is a single digit (0-9).  Single digit is assummed 2 b last 
"RTN","PRSLIB00",80,0)
 ;digit in a year.  This function takes that digit & finds 
"RTN","PRSLIB00",81,0)
 ;1st yr. including current year that has passed digit in it's 
"RTN","PRSLIB00",82,0)
 ;last position.  4 digit year returned.
"RTN","PRSLIB00",83,0)
 ;
"RTN","PRSLIB00",84,0)
 N CNT,CURR,I,ADDYRS,YR,X1,X2,Y,X,RTN
"RTN","PRSLIB00",85,0)
 S CNT=0
"RTN","PRSLIB00",86,0)
 S YR=$E(DT,1,3)-2
"RTN","PRSLIB00",87,0)
 S CURR=$E(YR,3)
"RTN","PRSLIB00",88,0)
 F I=1:1:10  Q:CURR=NEXT  D
"RTN","PRSLIB00",89,0)
 . S CURR=CURR+1
"RTN","PRSLIB00",90,0)
 . S CURR=$E(CURR,$L(CURR))
"RTN","PRSLIB00",91,0)
 . S CNT=CNT+1
"RTN","PRSLIB00",92,0)
 S ADDYRS=CNT*365
"RTN","PRSLIB00",93,0)
 S YR=YR_"0601" S X1=YR,X2=ADDYRS D C^%DTC
"RTN","PRSLIB00",94,0)
 S Y=X D DD^%DT S RTN=$P(Y," ",3)
"RTN","PRSLIB00",95,0)
 Q RTN
"RTN","PRSLIB00",96,0)
 ;==================================================================
"RTN","PRSLIB00",97,0)
LEAPYR(Y) ;boolean function determines if year is leap year.
"RTN","PRSLIB00",98,0)
 ;INPUT:           Y =  year in standard 4 digit format.
"RTN","PRSLIB00",99,0)
 ;OUTPUT:  LEAPFLAG =  return 1 for leap year, otherwise 0.
"RTN","PRSLIB00",100,0)
 ;
"RTN","PRSLIB00",101,0)
 N LEAPFLAG
"RTN","PRSLIB00",102,0)
 S LEAPFLAG='(Y#4)
"RTN","PRSLIB00",103,0)
 I '(Y#100) S LEAPFLAG='(Y#400)
"RTN","PRSLIB00",104,0)
 Q LEAPFLAG
"RTN","PRSLIB00",105,0)
 ;==================================================================
"RTN","PRSLIB00",106,0)
MONOGRPH(MSG) ;DISPLAY A MESSAGE (MSG)
"RTN","PRSLIB00",107,0)
 ;
"RTN","PRSLIB00",108,0)
 N HAIR,FORHEAD,NOSE,LINE,TOE,TAB1,TAB2,LEN
"RTN","PRSLIB00",109,0)
 S LEN=$L(MSG)
"RTN","PRSLIB00",110,0)
 S TAB1=(47-LEN\2)
"RTN","PRSLIB00",111,0)
 S TAB2=48
"RTN","PRSLIB00",112,0)
 S HAIR="                       /////"
"RTN","PRSLIB00",113,0)
 S TOE="|_______________________________________________|"
"RTN","PRSLIB00",114,0)
 S NOSE="|                       (_)                     |"
"RTN","PRSLIB00",115,0)
 S LINE="|                                               |"
"RTN","PRSLIB00",116,0)
 S FORHEAD=" __________________oOO_(O-O)__OOo_______________"
"RTN","PRSLIB00",117,0)
 W !!,HAIR,!,FORHEAD,!,NOSE,!,LINE
"RTN","PRSLIB00",118,0)
 W !,"| ",?TAB1,MSG,?TAB2,"|",!,LINE,!,TOE,!
"RTN","PRSLIB00",119,0)
 Q
"RTN","PRSLIB00",120,0)
 ;===================================================================
"RTN","PRSLIB00",121,0)
 ;=====================================================================
"RTN","PRSLIB00",122,0)
HUMDRUM(ZZ,INC) ;A SORT OF CLOCK THAT SPINS WHILE LONG PROCESSING IS OCCURRING
"RTN","PRSLIB00",123,0)
 S ZZ=ZZ+INC I ZZ#1=0 S ZZT=ZZ#9 W $C(13),$S(ZZT=1:"|",ZZT=2:"/",ZZT=3:"-",ZZT=4:"\",ZZT=5:"|",ZZT=6:"/",ZZT=7:"-",ZZT=8:"\",1:"") I ZZ=8 S ZZ=0
"RTN","PRSLIB00",124,0)
 Q ZZ
"RTN","PRSLIB00",125,0)
 ;=====================================================================
"RTN","PRSLIB00",126,0)
 ;
"RTN","PRSLIB00",127,0)
 Q
"RTN","PRSLIB00",128,0)
MSSG(MSG) ;Randomly pick a heart warming message
"RTN","PRSLIB00",129,0)
 ; MSGS = The # of messages in this routine.  If u add a message, update
"RTN","PRSLIB00",130,0)
 N MSGS,CNT
"RTN","PRSLIB00",131,0)
 S MSGS=8
"RTN","PRSLIB00",132,0)
 S CNT=$R(MSGS)+1,MSG=$P($TEXT(MSG+CNT),";",2)
"RTN","PRSLIB00",133,0)
MSG ;
"RTN","PRSLIB00",134,0)
 ;All Work & No Training, Makes Me a Dull Dude!
"RTN","PRSLIB00",135,0)
 ;Well Trained Employees, Put Veterans First!
"RTN","PRSLIB00",136,0)
 ;You Bet, Train a Vet!
"RTN","PRSLIB00",137,0)
 ;By failing to prepare we prepare to fail.
"RTN","PRSLIB00",138,0)
 ;Ideas won't work unless you do.
"RTN","PRSLIB00",139,0)
 ;The future is purchased by the present.
"RTN","PRSLIB00",140,0)
 ;A smooth sea never made a skillful sailor.
"RTN","PRSLIB00",141,0)
 ;Don't learn safety rules simply by accident.
"RTN","PRSLIB00",142,0)
 ;
"RTN","PRSLIB00",143,0)
 Q
"RTN","PRSLIB00",144,0)
 ;
"RTN","PRSLIB00",145,0)
CVTDATE(X,PRSDATE) ;
"RTN","PRSLIB00",146,0)
 ;  Called by the input transform of File 458.1 (LEAVE REQUEST) field 
"RTN","PRSLIB00",147,0)
 ;  # 2 From Date and field # 4 To Date.
"RTN","PRSLIB00",148,0)
 ;      
"RTN","PRSLIB00",149,0)
 ;  INPUT:  X - is set to the external representation of the date 
"RTN","PRSLIB00",150,0)
 ;           selected by the user.
"RTN","PRSLIB00",151,0)
 ;
"RTN","PRSLIB00",152,0)
 ;          PRSDATE - The variable Z1 is created by Form PRSA LV REQ and
"RTN","PRSLIB00",153,0)
 ;           is passed by the input transform to CVTDATE. This variable
"RTN","PRSLIB00",154,0)
 ;           may not be defined if this field is edited by another
"RTN","PRSLIB00",155,0)
 ;           method.  If defined PRSDATE will be the internal FileMan
"RTN","PRSLIB00",156,0)
 ;           representation of the date entered by the user for the
"RTN","PRSLIB00",157,0)
 ;           From Date field.  During the To Date field validation,
"RTN","PRSLIB00",158,0)
 ;           PRSDATE will represent the earliest date allowed.
"RTN","PRSLIB00",159,0)
 ;
"RTN","PRSLIB00",160,0)
 ; OUTPUT:  X - is returned by the function.  X will contain either the
"RTN","PRSLIB00",161,0)
 ;           internal FileMan format for the valid date selected by
"RTN","PRSLIB00",162,0)
 ;           the user or the value -1 if an invalid date was selected.
"RTN","PRSLIB00",163,0)
 ;
"RTN","PRSLIB00",164,0)
 N FUTYR,PASYR,%DT,BEGINDT,X1,X2,Y
"RTN","PRSLIB00",165,0)
 ;
"RTN","PRSLIB00",166,0)
 ; Set %DT to not allow TODATE earlier than FROMDATE.  Z1 contains
"RTN","PRSLIB00",167,0)
 ; the date stored in FROMDATE in the FileMan internal date format.
"RTN","PRSLIB00",168,0)
 ;
"RTN","PRSLIB00",169,0)
 I +$P($G(PRSDATE),"^")?7N S %DT(0)=$P(PRSDATE,"^")
"RTN","PRSLIB00",170,0)
 ;
"RTN","PRSLIB00",171,0)
 ; Convert user input based on assumed past date lookup.
"RTN","PRSLIB00",172,0)
 ; Y will contain the user selected date in internal FileMan format.
"RTN","PRSLIB00",173,0)
 ;
"RTN","PRSLIB00",174,0)
 S %DT="XP" D ^%DT
"RTN","PRSLIB00",175,0)
 S PASYR=Y
"RTN","PRSLIB00",176,0)
 ;
"RTN","PRSLIB00",177,0)
 ; Convert user input based on assumed future date lookup
"RTN","PRSLIB00",178,0)
 ; Y will contain the user selected date in internal FileMan format.
"RTN","PRSLIB00",179,0)
 ;
"RTN","PRSLIB00",180,0)
 S %DT="XF" D ^%DT
"RTN","PRSLIB00",181,0)
 S FUTYR=Y
"RTN","PRSLIB00",182,0)
 ;
"RTN","PRSLIB00",183,0)
 ; If these two lookups match the user specified a four digit
"RTN","PRSLIB00",184,0)
 ; year and no extra processing is necessary.
"RTN","PRSLIB00",185,0)
 ;
"RTN","PRSLIB00",186,0)
 I PASYR=FUTYR S X=PASYR
"RTN","PRSLIB00",187,0)
 ;
"RTN","PRSLIB00",188,0)
 ; If these two lookups don't match then the user did not
"RTN","PRSLIB00",189,0)
 ; enter a four digit year. That's o.k. but we need to assume that 
"RTN","PRSLIB00",190,0)
 ; they meant either 60 days ago or in the future.
"RTN","PRSLIB00",191,0)
 ;
"RTN","PRSLIB00",192,0)
 ; Subtract 60 days from today and test to see if the date the user
"RTN","PRSLIB00",193,0)
 ; entered falls within this range.
"RTN","PRSLIB00",194,0)
 ;
"RTN","PRSLIB00",195,0)
 I PASYR'=FUTYR D
"RTN","PRSLIB00",196,0)
 .S X1=DT,X2=-60
"RTN","PRSLIB00",197,0)
 .D C^%DTC
"RTN","PRSLIB00",198,0)
 .S BEGINDT=X
"RTN","PRSLIB00",199,0)
 .; Default the date to the past year lookup and begin testing
"RTN","PRSLIB00",200,0)
 .S X=PASYR
"RTN","PRSLIB00",201,0)
 .; Perform two checks:
"RTN","PRSLIB00",202,0)
 .; #1 Does the user entered date fall within that last 60 days?
"RTN","PRSLIB00",203,0)
 .;    If it doesn't execute check #2.
"RTN","PRSLIB00",204,0)
 .; #2 Does the date falls within the standard +20 year
"RTN","PRSLIB00",205,0)
 .; time window?  If so then default to a future year.
"RTN","PRSLIB00",206,0)
 .I BEGINDT>PASYR,($E(DT,1,3)+20'<$E(FUTYR,1,3)) S X=FUTYR
"RTN","PRSLIB00",207,0)
 ;
"RTN","PRSLIB00",208,0)
 Q X ; Return the user selected date in the FileMan internal date format.
"RTN","PRSLIB01")
0^52^B52516097^B30994647
"RTN","PRSLIB01",1,0)
PRSLIB01 ;JAH/WCIOFO-PAID UTILITIES AND LIBRARY 01 ;Mar 25, 2005
"RTN","PRSLIB01",2,0)
 ;;4.0;PAID;**45,93**;Sep 21, 1995;Build 7
"RTN","PRSLIB01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSLIB01",4,0)
 Q
"RTN","PRSLIB01",5,0)
MAIN ;DISPLAY MONTHLY CALENDAR FOR ANY DATE
"RTN","PRSLIB01",6,0)
 N OUT
"RTN","PRSLIB01",7,0)
 F  D CALENDAR(.OUT) Q:OUT
"RTN","PRSLIB01",8,0)
 Q
"RTN","PRSLIB01",9,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSLIB01",10,0)
CALENDAR(OUT) ;
"RTN","PRSLIB01",11,0)
 ;  Ask user for a date and quit if not a valid date.
"RTN","PRSLIB01",12,0)
 ;  Get # of days in the month the user has selected.
"RTN","PRSLIB01",13,0)
 ;  Get the weekday for the 1st day of the selected month.
"RTN","PRSLIB01",14,0)
 ;  If necessary get days elapsed from jan 1 to 1st day of selected mo.
"RTN","PRSLIB01",15,0)
 ;  Display the month.
"RTN","PRSLIB01",16,0)
 ;
"RTN","PRSLIB01",17,0)
 S OUT=1
"RTN","PRSLIB01",18,0)
 N ZFMDATE,%DT,DAY1,Y,MONTH,DAYS,YEAR,FIRSTDAY,LASTDAY,SHOWJULI,HIGHLITE
"RTN","PRSLIB01",19,0)
 N COUNT,HDR
"RTN","PRSLIB01",20,0)
 ;
"RTN","PRSLIB01",21,0)
 S %DT="AE" D ^%DT S ZFMDATE=Y ;          Ask date.
"RTN","PRSLIB01",22,0)
 Q:Y<1
"RTN","PRSLIB01",23,0)
 ; if picked month has today-highlight
"RTN","PRSLIB01",24,0)
 S HIGHLITE=0
"RTN","PRSLIB01",25,0)
 I $E(Y,1,5)=$E(DT,1,5) S HIGHLITE=+$E(DT,6,7)
"RTN","PRSLIB01",26,0)
 ;
"RTN","PRSLIB01",27,0)
 ; Ask if they want to see the elapsed days calendar.
"RTN","PRSLIB01",28,0)
 S SHOWJULI=$$ASKJULIA()
"RTN","PRSLIB01",29,0)
 Q:Y<0
"RTN","PRSLIB01",30,0)
 ;
"RTN","PRSLIB01",31,0)
 ;                                        Days in the month.
"RTN","PRSLIB01",32,0)
 S MONTH=$E(ZFMDATE,4,5),YEAR=$E(ZFMDATE,1,3)+1700
"RTN","PRSLIB01",33,0)
 S DAYS=$$DAYSINMO(YEAR,MONTH)
"RTN","PRSLIB01",34,0)
 ;
"RTN","PRSLIB01",35,0)
 S FIRSTDAY=$E(ZFMDATE,1,5)_"01",LASTDAY=$E(ZFMDATE,1,5)_DAYS
"RTN","PRSLIB01",36,0)
 ;
"RTN","PRSLIB01",37,0)
 ;Get the day #s of pay periods in this month
"RTN","PRSLIB01",38,0)
 N PPS
"RTN","PRSLIB01",39,0)
 I FIRSTDAY<3130000 D GETPPS(FIRSTDAY,LASTDAY)
"RTN","PRSLIB01",40,0)
 ;
"RTN","PRSLIB01",41,0)
 S DAY1=$$WEEKDAY1(ZFMDATE) ;             Weekday of the 1st.
"RTN","PRSLIB01",42,0)
 ;
"RTN","PRSLIB01",43,0)
 ;
"RTN","PRSLIB01",44,0)
 S HDR=$$GETHEAD(Y)
"RTN","PRSLIB01",45,0)
 W @IOF,!
"RTN","PRSLIB01",46,0)
 W "---------------",HDR,"------------"
"RTN","PRSLIB01",47,0)
 D DISPMO(DAY1,DAYS,HIGHLITE) ;                    Display month.
"RTN","PRSLIB01",48,0)
 I SHOWJULI D
"RTN","PRSLIB01",49,0)
 .   N JULID1
"RTN","PRSLIB01",50,0)
 .   S JULID1=$$GETJULI(FIRSTDAY,YEAR)
"RTN","PRSLIB01",51,0)
 .   W !!,"-------Elapsed Days Calendar---------"
"RTN","PRSLIB01",52,0)
 .   D DISPJULI(DAY1,DAYS,JULID1)
"RTN","PRSLIB01",53,0)
 W !,"---------------Holidays------------",!
"RTN","PRSLIB01",54,0)
 ;
"RTN","PRSLIB01",55,0)
 ;DISPLAY HOLIDAYS
"RTN","PRSLIB01",56,0)
 ;
"RTN","PRSLIB01",57,0)
 N HO,HD,PRS8D,HOLIDAY
"RTN","PRSLIB01",58,0)
 S PRS8D=$E(ZFMDATE,2,3) D EN^PRS8HD
"RTN","PRSLIB01",59,0)
 S FIRSTDAY=$E(FIRSTDAY,1,5)_"00"
"RTN","PRSLIB01",60,0)
 S HOLIDAY=FIRSTDAY
"RTN","PRSLIB01",61,0)
 S COUNT=0
"RTN","PRSLIB01",62,0)
 I FIRSTDAY<3140000 D
"RTN","PRSLIB01",63,0)
 .F  S HOLIDAY=$O(HD(HOLIDAY)) Q:HOLIDAY>LASTDAY!(HOLIDAY="")  D
"RTN","PRSLIB01",64,0)
 .. W !,?2,$P(HD(HOLIDAY),"^",2)," ",+$E(HOLIDAY,6,7),?15,$P(HD(HOLIDAY),"^")
"RTN","PRSLIB01",65,0)
 .. S COUNT=COUNT+1
"RTN","PRSLIB01",66,0)
 E  W "  Sorry, Can't find holidays past 2013." S COUNT=COUNT+1
"RTN","PRSLIB01",67,0)
 I COUNT<1 W !,"  No Holidays this month."
"RTN","PRSLIB01",68,0)
 W !,"-----------------------------------",!
"RTN","PRSLIB01",69,0)
 S OUT=0
"RTN","PRSLIB01",70,0)
 Q
"RTN","PRSLIB01",71,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",72,0)
 ;
"RTN","PRSLIB01",73,0)
SILMO(PRSDT) ;SILENT CALL TO DISPLAY MONTH
"RTN","PRSLIB01",74,0)
 ;  INPUT: PRSDT - must be fileman date
"RTN","PRSLIB01",75,0)
 ;
"RTN","PRSLIB01",76,0)
 N X,Y,%DT,DAY1,Y,MONTH,DAYS,YEAR,FIRSTDAY,LASTDAY,HIGHLITE,COUNT,HDR
"RTN","PRSLIB01",77,0)
 S X=PRSDT D ^%DT Q:Y<0
"RTN","PRSLIB01",78,0)
 ; if month has today-highlight
"RTN","PRSLIB01",79,0)
 S HIGHLITE=0
"RTN","PRSLIB01",80,0)
 I $E(Y,1,5)=$E(DT,1,5) S HIGHLITE=+$E(DT,6,7)
"RTN","PRSLIB01",81,0)
 S MONTH=$E(PRSDT,4,5),YEAR=$E(PRSDT,1,3)+1700
"RTN","PRSLIB01",82,0)
 S DAYS=$$DAYSINMO(YEAR,MONTH)
"RTN","PRSLIB01",83,0)
 S FIRSTDAY=$E(PRSDT,1,5)_"01",LASTDAY=$E(PRSDT,1,5)_DAYS
"RTN","PRSLIB01",84,0)
 ;
"RTN","PRSLIB01",85,0)
 ;Get day #s of pps in month
"RTN","PRSLIB01",86,0)
 N PPS
"RTN","PRSLIB01",87,0)
 I FIRSTDAY<3130000 D GETPPS(FIRSTDAY,LASTDAY)
"RTN","PRSLIB01",88,0)
 S DAY1=$$WEEKDAY1(PRSDT)
"RTN","PRSLIB01",89,0)
 S HDR=$$GETHEAD(Y)
"RTN","PRSLIB01",90,0)
 W @IOF,!,"---------------",HDR,"------------"
"RTN","PRSLIB01",91,0)
 D DISPMO(DAY1,DAYS,HIGHLITE)
"RTN","PRSLIB01",92,0)
 W !,"---------------Holidays------------",!
"RTN","PRSLIB01",93,0)
 ;
"RTN","PRSLIB01",94,0)
 ;holidays
"RTN","PRSLIB01",95,0)
 N HO,HD,PRS8D,HOLIDAY
"RTN","PRSLIB01",96,0)
 S PRS8D=$E(PRSDT,2,3) D EN^PRS8HD
"RTN","PRSLIB01",97,0)
 S FIRSTDAY=$E(FIRSTDAY,1,5)_"00"
"RTN","PRSLIB01",98,0)
 S HOLIDAY=FIRSTDAY
"RTN","PRSLIB01",99,0)
 S COUNT=0
"RTN","PRSLIB01",100,0)
 I FIRSTDAY<3140000 D
"RTN","PRSLIB01",101,0)
 .F  S HOLIDAY=$O(HD(HOLIDAY)) Q:HOLIDAY>LASTDAY!(HOLIDAY="")  D
"RTN","PRSLIB01",102,0)
 .. W !,?2,$P(HD(HOLIDAY),"^",2)," ",+$E(HOLIDAY,6,7),?15,$P(HD(HOLIDAY),"^")
"RTN","PRSLIB01",103,0)
 .. S COUNT=COUNT+1
"RTN","PRSLIB01",104,0)
 E  W "  Sorry, Can't find holidays past 2013." S COUNT=COUNT+1
"RTN","PRSLIB01",105,0)
 I COUNT<1 W !,"  No Holidays this month."
"RTN","PRSLIB01",106,0)
 W !,"-----------------------------------",!
"RTN","PRSLIB01",107,0)
 Q
"RTN","PRSLIB01",108,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",109,0)
 ;
"RTN","PRSLIB01",110,0)
GETPPS(FIRSTDAY,LASTDAY) ;
"RTN","PRSLIB01",111,0)
 N D1,PPE,PPDAY,PPI,PP4Y
"RTN","PRSLIB01",112,0)
 S D1=FIRSTDAY D PP^PRSAPPU
"RTN","PRSLIB01",113,0)
 D NX^PRSAPPU
"RTN","PRSLIB01",114,0)
 I D1<FIRSTDAY S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSLIB01",115,0)
 S PPDAY=+$E(D1,6,7)
"RTN","PRSLIB01",116,0)
 S PPS(PPDAY)=PPE
"RTN","PRSLIB01",117,0)
 F  D  Q:D1>LASTDAY
"RTN","PRSLIB01",118,0)
 .  S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSLIB01",119,0)
 .  Q:D1>LASTDAY
"RTN","PRSLIB01",120,0)
 .  S PPDAY=+$E(D1,6,7)
"RTN","PRSLIB01",121,0)
 .  S PPS(PPDAY)=PPE
"RTN","PRSLIB01",122,0)
 Q
"RTN","PRSLIB01",123,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",124,0)
 ;
"RTN","PRSLIB01",125,0)
GETHEAD(Y) ;
"RTN","PRSLIB01",126,0)
 N YEAR,MONTH,HDR,LENOFDT
"RTN","PRSLIB01",127,0)
 S HDR=$$FMTE^XLFDT(Y,"1D")
"RTN","PRSLIB01",128,0)
 S MONTH=$P(HDR," ")
"RTN","PRSLIB01",129,0)
 S LENOFDT=$L(HDR," ")
"RTN","PRSLIB01",130,0)
 S YEAR=$P(HDR," ",LENOFDT)
"RTN","PRSLIB01",131,0)
 Q MONTH_" "_YEAR
"RTN","PRSLIB01",132,0)
 ;
"RTN","PRSLIB01",133,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",134,0)
 ;
"RTN","PRSLIB01",135,0)
WEEKDAY1(ZDATE) ;get the weekday of the 1st day of the month
"RTN","PRSLIB01",136,0)
 ; INPUT:   ZDATE   - FileMan date, used as the month to display
"RTN","PRSLIB01",137,0)
 ; OUTPUT:  return - Integer corresponding to day of week 
"RTN","PRSLIB01",138,0)
 ;                   (i.e. Sunday[1], Monday[2]) for the 1st day of
"RTN","PRSLIB01",139,0)
 ;                   the month
"RTN","PRSLIB01",140,0)
 S ZDATE=$E(ZDATE,1,5)_"01"
"RTN","PRSLIB01",141,0)
 Q $$DOW^XLFDT(ZDATE,1)
"RTN","PRSLIB01",142,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",143,0)
 ;
"RTN","PRSLIB01",144,0)
DISPMO(DAYNO,NODAYS,HL) ;DISPLAY ENTIRE MONTH
"RTN","PRSLIB01",145,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",146,0)
 ;                                 beginning on Wednesday.
"RTN","PRSLIB01",147,0)
 ;
"RTN","PRSLIB01",148,0)
 ;Set up reverse video ON & OFF for today highlight
"RTN","PRSLIB01",149,0)
 I $G(HL)>0 N IORVOFF,IORVON S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","PRSLIB01",150,0)
 ;
"RTN","PRSLIB01",151,0)
 N DAYS,DAYPOS,I,PPOFFSET,CNTDWN,BLDTAB
"RTN","PRSLIB01",152,0)
 S PPOFFSET=6,(BLDTAB,CNTDWN)=0
"RTN","PRSLIB01",153,0)
 S DAYS="SUN MON TUE WED THU FRI SAT"
"RTN","PRSLIB01",154,0)
 W !,?PPOFFSET,"  ",DAYS,!
"RTN","PRSLIB01",155,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",156,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",157,0)
 . I DAYPOS=0 W ! I $G(PPS(I))'="" W PPS(I)
"RTN","PRSLIB01",158,0)
 . I ($G(HL)=I)!($G(CNTDWN)>0) D
"RTN","PRSLIB01",159,0)
 ..  I $G(HL)=I D
"RTN","PRSLIB01",160,0)
 ...   S BLDTAB=(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)))
"RTN","PRSLIB01",161,0)
 ...   W ?BLDTAB,IORVON,I,IORVOFF
"RTN","PRSLIB01",162,0)
 ...   S BLDTAB=($X-BLDTAB)-$L(I)
"RTN","PRSLIB01",163,0)
 ...;   S BLDTAB=($X-BLDTAB)-1
"RTN","PRSLIB01",164,0)
 ...   S CNTDWN=6-DAYPOS
"RTN","PRSLIB01",165,0)
 ..  E  D
"RTN","PRSLIB01",166,0)
 ...   W ?(BLDTAB+(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)))),I
"RTN","PRSLIB01",167,0)
 ...   S CNTDWN=CNTDWN-1
"RTN","PRSLIB01",168,0)
 . E  D
"RTN","PRSLIB01",169,0)
 ..  W ?(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0))),I
"RTN","PRSLIB01",170,0)
 Q
"RTN","PRSLIB01",171,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",172,0)
 ;=======================
"RTN","PRSLIB01",173,0)
 ;
"RTN","PRSLIB01",174,0)
ASKJULIA() ;RETURN RESPONSE--DO YOU WANT A CALENDAR A with dates
"RTN","PRSLIB01",175,0)
 ; expressed as the number of days elapsed since January 1?
"RTN","PRSLIB01",176,0)
 N DIR,DIRUT,Y
"RTN","PRSLIB01",177,0)
 W !!
"RTN","PRSLIB01",178,0)
 S DIR("A")="Include Calendar with elapsed days since Jan 1."
"RTN","PRSLIB01",179,0)
 S DIR(0)="Y"
"RTN","PRSLIB01",180,0)
 S DIR("B")="Y"
"RTN","PRSLIB01",181,0)
 S DIR("?",1)="Hit return to display a calendar with dates expressed as"
"RTN","PRSLIB01",182,0)
 S DIR("?",2)="the number of days elapsed since January 1."
"RTN","PRSLIB01",183,0)
 S DIR("?",3)="Days are numbered sequentially from 1 to 365 or 366 in a"
"RTN","PRSLIB01",184,0)
 S DIR("?",4)="leap year.  January 1st is day number 1 and December 31st"
"RTN","PRSLIB01",185,0)
 S DIR("?",5)="is day 365 in a non leap year.  This calendar is often"
"RTN","PRSLIB01",186,0)
 S DIR("?",6)="(but incorrectly), called a Julian Calendar."
"RTN","PRSLIB01",187,0)
 S DIR("?",7)="------------------------------------------------------"
"RTN","PRSLIB01",188,0)
 S DIR("?",8)="Julian Calendar"
"RTN","PRSLIB01",189,0)
 S DIR("?",9)="==============="
"RTN","PRSLIB01",190,0)
 S DIR("?",10)="  The solar calendar introduced by Julius Caesar in Rome "
"RTN","PRSLIB01",191,0)
 S DIR("?",11)="  in 46 B.C., having a year of 12 months and 365 days and"
"RTN","PRSLIB01",192,0)
 S DIR("?",12)="  a leap year of 366 days every fourth year. It was"
"RTN","PRSLIB01",193,0)
 S DIR("?",13)="  eventually replaced by the Gregorian calendar."
"RTN","PRSLIB01",194,0)
 S DIR("?",14)="------------------------------------------------------"
"RTN","PRSLIB01",195,0)
 S DIR("?")=" Hit return to include the elapsed days calendar."
"RTN","PRSLIB01",196,0)
 D ^DIR
"RTN","PRSLIB01",197,0)
 Q Y
"RTN","PRSLIB01",198,0)
 ;=======================
"RTN","PRSLIB01",199,0)
DISPJULI(DAYNO,NODAYS,JULIAND1) ;
"RTN","PRSLIB01",200,0)
 ; DISPLAY GREGORIAN AND JULIAN CALENDAR SIDE BY SIDE
"RTN","PRSLIB01",201,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",202,0)
 ;                                 beginning on Wednesday.
"RTN","PRSLIB01",203,0)
 ;
"RTN","PRSLIB01",204,0)
 N DAYS,DAYPOS,I,PPOFFSET
"RTN","PRSLIB01",205,0)
 S PPOFFSET=6
"RTN","PRSLIB01",206,0)
 W !
"RTN","PRSLIB01",207,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",208,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",209,0)
 . I DAYPOS=0 W ! I $G(PPS(I))'="" W PPS(I)
"RTN","PRSLIB01",210,0)
 . W ?(PPOFFSET+((DAYPOS+1)*4-($L(I+JULIAND1)-1))),I+JULIAND1
"RTN","PRSLIB01",211,0)
 Q
"RTN","PRSLIB01",212,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",213,0)
 ;
"RTN","PRSLIB01",214,0)
PAYROLMO(DAYNO,NODAYS) ;PAYROLL STYLE DISPLAY OF ENTIRE MONTH
"RTN","PRSLIB01",215,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",216,0)
 ;                                 beginning on Wednessday.
"RTN","PRSLIB01",217,0)
 ;
"RTN","PRSLIB01",218,0)
 N DAYS,DAYPOS,I
"RTN","PRSLIB01",219,0)
 S DAYS="SUN MON TUE WED THU FRI SAT"
"RTN","PRSLIB01",220,0)
 W !,"  ",DAYS,!
"RTN","PRSLIB01",221,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",222,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",223,0)
 . I DAYPOS=0 W !
"RTN","PRSLIB01",224,0)
 . W ?((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)),I
"RTN","PRSLIB01",225,0)
 Q
"RTN","PRSLIB01",226,0)
DAYSINMO(Y,M) ; Return number of days in month based on year and month
"RTN","PRSLIB01",227,0)
 ;  Input:  Y = year in 4 digit format between 1700 and 3000
"RTN","PRSLIB01",228,0)
 ;          M = month expressed as an integer from 1 to 12 (Jan - Dec)
"RTN","PRSLIB01",229,0)
 ;
"RTN","PRSLIB01",230,0)
 N GOODY,GOODM S (GOODY,GOODM)=0
"RTN","PRSLIB01",231,0)
 I Y<2700,Y>1700 S GOODY=1
"RTN","PRSLIB01",232,0)
 I M>0,M<13 S GOODM=1
"RTN","PRSLIB01",233,0)
 Q:'(GOODM&GOODY) 0
"RTN","PRSLIB01",234,0)
 Q $P("31^"_(28+$$LEAPYR^PRSLIB00(YEAR))_"^31^30^31^30^31^31^30^31^30^31",U,MONTH)
"RTN","PRSLIB01",235,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",236,0)
GETJULI(ZFMDATE,YEAR) ;
"RTN","PRSLIB01",237,0)
 N X1,X2
"RTN","PRSLIB01",238,0)
 S X2=YEAR-1700_"0101"
"RTN","PRSLIB01",239,0)
 S X1=ZFMDATE
"RTN","PRSLIB01",240,0)
 D ^%DTC
"RTN","PRSLIB01",241,0)
 Q X
"RTN","PRSPAPU")
0^25^B19966403^n/a
"RTN","PRSPAPU",1,0)
PRSPAPU ;WOIFO/SAB-WOIFO/SAB - AUTO POST UTILITIES FOR EA & LV ;10/30/2004
"RTN","PRSPAPU",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPAPU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPAPU",4,0)
 Q
"RTN","PRSPAPU",5,0)
 ;
"RTN","PRSPAPU",6,0)
TCLCK(PRSIEN,S1,E1,S2,E2,PPLCK,PPLCKE) ; Time Card Lock for Date Range Change
"RTN","PRSPAPU",7,0)
 ; This API attempts to lock employee timecards for pay periods that
"RTN","PRSPAPU",8,0)
 ; are impacted by a change to a date range.  Only existing pay periods
"RTN","PRSPAPU",9,0)
 ; that are covered by a PTP memo will be locked.
"RTN","PRSPAPU",10,0)
 ;
"RTN","PRSPAPU",11,0)
 ; Input
"RTN","PRSPAPU",12,0)
 ;   PRSIEN   - Employee IEN (file 450)
"RTN","PRSPAPU",13,0)
 ;   S1       - Old Start Date (FileMan internal)
"RTN","PRSPAPU",14,0)
 ;   E1       - Old End Date (Fileman internal)
"RTN","PRSPAPU",15,0)
 ;   S2       - New Start Date (FileMan internal)
"RTN","PRSPAPU",16,0)
 ;   E2       - New End Date (Fileman internal)
"RTN","PRSPAPU",17,0)
 ;   PPLCK()  - Array of Locked Pay Periods passed by reference
"RTN","PRSPAPU",18,0)
 ;   PPLCKE() - Array of Pay Periods with Lock Error passed by reference
"RTN","PRSPAPU",19,0)
 ;   Note that both these arrays are initialized by this API.
"RTN","PRSPAPU",20,0)
 ; Output
"RTN","PRSPAPU",21,0)
 ;   PPLCK()  - Array of Locked Pay Periods may be updated
"RTN","PRSPAPU",22,0)
 ;              format PPLCK(pay period IEN file 458)=""
"RTN","PRSPAPU",23,0)
 ;   PPLCKE() - Array of Pay Periods with Lock Error may be updated
"RTN","PRSPAPU",24,0)
 ;              format PPLCKE(pay period IEN file 458)=""
"RTN","PRSPAPU",25,0)
 ;
"RTN","PRSPAPU",26,0)
 K PPLCK,PPLCKE
"RTN","PRSPAPU",27,0)
 ;
"RTN","PRSPAPU",28,0)
 ;if S1 and E1 have values and S2 and E2 are null then lock from S1 to E1
"RTN","PRSPAPU",29,0)
 I S1,E1,'S2,'E2 D LCK(PRSIEN,S1,E1,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",30,0)
 ;
"RTN","PRSPAPU",31,0)
 ;if S1 and E1 are null and S2 and E2 have values then lock from S2 to E2
"RTN","PRSPAPU",32,0)
 I 'S1,'E1,S2,E2 D LCK(PRSIEN,S2,E2,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",33,0)
 ;
"RTN","PRSPAPU",34,0)
 ;if S1, E1, S2, and E2 have values then lock impacted ranges
"RTN","PRSPAPU",35,0)
 I S1,E1,S2,E2 D
"RTN","PRSPAPU",36,0)
 . N X1,X2
"RTN","PRSPAPU",37,0)
 . ; if new start is less than old start then days from new start to
"RTN","PRSPAPU",38,0)
 . ; lesser of new end and old start-1 were changed from not covered to
"RTN","PRSPAPU",39,0)
 . ;  covered.
"RTN","PRSPAPU",40,0)
 . I S2<S1 D
"RTN","PRSPAPU",41,0)
 . . S X1=S2
"RTN","PRSPAPU",42,0)
 . . S X2=$S(E2<(S1-1):E2,1:S1-1)
"RTN","PRSPAPU",43,0)
 . . D LCK(PRSIEN,X1,X2,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",44,0)
 . ;
"RTN","PRSPAPU",45,0)
 . ; if new start is greater than old start then days from old start to
"RTN","PRSPAPU",46,0)
 . ; lesser of old end and new start-1 were changed from covered to not
"RTN","PRSPAPU",47,0)
 . ; covered.
"RTN","PRSPAPU",48,0)
 . I S2>S1 D
"RTN","PRSPAPU",49,0)
 . . S X1=S1
"RTN","PRSPAPU",50,0)
 . . S X2=$S(E1<(S2-1):E1,1:S2-1)
"RTN","PRSPAPU",51,0)
 . . D LCK(PRSIEN,X1,X2,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",52,0)
 . ;
"RTN","PRSPAPU",53,0)
 . ; if new end is greater than old end then days from greater of old
"RTN","PRSPAPU",54,0)
 . ; end+1 and new start to new end were changed from not covered to
"RTN","PRSPAPU",55,0)
 . ; covered.
"RTN","PRSPAPU",56,0)
 . I E2>E1 D
"RTN","PRSPAPU",57,0)
 . . S X1=$S(E1+1>S2:E1+1,1:S2)
"RTN","PRSPAPU",58,0)
 . . S X2=E2
"RTN","PRSPAPU",59,0)
 . . D LCK(PRSIEN,X1,X2,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",60,0)
 . ;
"RTN","PRSPAPU",61,0)
 . ; if new end is less than old end then days from greater of new end+1
"RTN","PRSPAPU",62,0)
 . ; and old start to old end were changed from covered to not covered.
"RTN","PRSPAPU",63,0)
 . I E2<E1 D
"RTN","PRSPAPU",64,0)
 . . S X1=$S(E2+1>S1:E2+1,1:S1)
"RTN","PRSPAPU",65,0)
 . . S X2=E1
"RTN","PRSPAPU",66,0)
 . . D LCK(PRSIEN,X1,X2,.PPLCK,.PPLCKE)
"RTN","PRSPAPU",67,0)
 ;
"RTN","PRSPAPU",68,0)
 Q
"RTN","PRSPAPU",69,0)
 ;
"RTN","PRSPAPU",70,0)
LCK(PRSIEN,PERSTR,PEREND,PPLCK,PPLCKE) ; Lock Time Cards for a Date Range 
"RTN","PRSPAPU",71,0)
 ; This API attempts to lock the employee timecards for a date range.
"RTN","PRSPAPU",72,0)
 ; Only existing pay periods that are covered by a PTP memo are locked.
"RTN","PRSPAPU",73,0)
 ;
"RTN","PRSPAPU",74,0)
 ; Input
"RTN","PRSPAPU",75,0)
 ;   PRSIEN   - Employee IEN (file 450)
"RTN","PRSPAPU",76,0)
 ;   PERSTR   - Period Start (FileMan internal)
"RTN","PRSPAPU",77,0)
 ;   PEREND   - Period End (Fileman internal)
"RTN","PRSPAPU",78,0)
 ;   PPLCK()  - Array of Locked Pay Periods passed by reference
"RTN","PRSPAPU",79,0)
 ;              format PPLCK(pay period IEN file 458)=""
"RTN","PRSPAPU",80,0)
 ;   PPLCKE() - Array of Pay Periods with Lock Error passed by reference
"RTN","PRSPAPU",81,0)
 ;              format PPLCKE(pay period IEN file 458)=""
"RTN","PRSPAPU",82,0)
 ;   Note that these arrays are not initialized by this API and may
"RTN","PRSPAPU",83,0)
 ;   contain information about already locked timecards.
"RTN","PRSPAPU",84,0)
 ; Output
"RTN","PRSPAPU",85,0)
 ;   PPLCK()  - Array of Locked Pay Periods may be updated
"RTN","PRSPAPU",86,0)
 ;   PPLCKE() - Array of Pay Periods with Lock Error may be updated
"RTN","PRSPAPU",87,0)
 ;
"RTN","PRSPAPU",88,0)
 Q:('$G(PRSIEN))!($G(PERSTR)'?7N)!($G(PEREND)'?7N)  ; required inputs
"RTN","PRSPAPU",89,0)
 ;
"RTN","PRSPAPU",90,0)
 N D1,DAY,EPP4Y,PP4Y,PPE,PPI,SPP4Y,Y
"RTN","PRSPAPU",91,0)
 ;
"RTN","PRSPAPU",92,0)
 ; determine starting and ending pay periods
"RTN","PRSPAPU",93,0)
 S D1=PERSTR D PP^PRSAPPU S SPP4Y=PP4Y
"RTN","PRSPAPU",94,0)
 S D1=PEREND D PP^PRSAPPU S EPP4Y=PP4Y
"RTN","PRSPAPU",95,0)
 Q:SPP4Y=""
"RTN","PRSPAPU",96,0)
 Q:EPP4Y=""
"RTN","PRSPAPU",97,0)
 ;
"RTN","PRSPAPU",98,0)
 ; loop thru pay periods
"RTN","PRSPAPU",99,0)
 S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPAPU",100,0)
 F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D
"RTN","PRSPAPU",101,0)
 . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPAPU",102,0)
 . ; quit if pay period not covered by memo
"RTN","PRSPAPU",103,0)
 . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPAPU",104,0)
 . Q:$$MIEN^PRSPUT1(PRSIEN,D1)'>0
"RTN","PRSPAPU",105,0)
 . ;
"RTN","PRSPAPU",106,0)
 . Q:$D(PPLCK(PPI))  ; already in lock array
"RTN","PRSPAPU",107,0)
 . Q:$D(PPLCKE(PPI))  ; already in lock error array
"RTN","PRSPAPU",108,0)
 . ;
"RTN","PRSPAPU",109,0)
 . ; lock timecard
"RTN","PRSPAPU",110,0)
 . L +^PRST(458,PPI,"E",PRSIEN):2
"RTN","PRSPAPU",111,0)
 . S:'$T PPLCKE(PPI)=""
"RTN","PRSPAPU",112,0)
 . S:$T PPLCK(PPI)=""
"RTN","PRSPAPU",113,0)
 ;
"RTN","PRSPAPU",114,0)
 Q
"RTN","PRSPAPU",115,0)
 ;
"RTN","PRSPAPU",116,0)
 ;
"RTN","PRSPAPU",117,0)
TCULCK(PRSIEN,PPLCK) ; Time Card Unlock
"RTN","PRSPAPU",118,0)
 ; This API unlocks a list of employee timecards.
"RTN","PRSPAPU",119,0)
 ;
"RTN","PRSPAPU",120,0)
 ; Input
"RTN","PRSPAPU",121,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPAPU",122,0)
 ;   PPLCK( - Array of Locked Pay Periods passed by reference
"RTN","PRSPAPU",123,0)
 ;            format PPLCK(pay period IEN file 458)=""
"RTN","PRSPAPU",124,0)
 ; Output
"RTN","PRSPAPU",125,0)
 ;   PPLCK( - Input array is killed since pay periods are unlocked
"RTN","PRSPAPU",126,0)
 ;
"RTN","PRSPAPU",127,0)
 Q:'$G(PRSIEN)  ; required input
"RTN","PRSPAPU",128,0)
 ;
"RTN","PRSPAPU",129,0)
 N PPI
"RTN","PRSPAPU",130,0)
 ;
"RTN","PRSPAPU",131,0)
 ; loop thru pay periods and unlock time card
"RTN","PRSPAPU",132,0)
 S PPI="" F  S PPI=$O(PPLCK(PPI)) Q:'PPI  L -^PRST(458,PPI,"E",PRSIEN)
"RTN","PRSPAPU",133,0)
 ;
"RTN","PRSPAPU",134,0)
 ; init lock array
"RTN","PRSPAPU",135,0)
 K PPLCK
"RTN","PRSPAPU",136,0)
 ;
"RTN","PRSPAPU",137,0)
 Q
"RTN","PRSPAPU",138,0)
 ;
"RTN","PRSPAPU",139,0)
RLCKE(PPLCKE,WRITE,PRSARRN) ; Report Lock Errors
"RTN","PRSPAPU",140,0)
 ; This API writes a list of timecards that could not be locked.
"RTN","PRSPAPU",141,0)
 ;
"RTN","PRSPAPU",142,0)
 ; Input
"RTN","PRSPAPU",143,0)
 ;   PPLCKE( - Array of Pay Periods with Lock Error passed by reference
"RTN","PRSPAPU",144,0)
 ;             format PPLCKE(pay period IEN file 458)=""
"RTN","PRSPAPU",145,0)
 ;   WRITE   - (optional) true (=1) if text should be written (default)
"RTN","PRSPAPU",146,0)
 ;                        false (=0) if array should be returned instead
"RTN","PRSPAPU",147,0)
 ;   PRSARRN - (optional) array name, default value is "PRSARR"
"RTN","PRSPAPU",148,0)
 ; output
"RTN","PRSPAPU",149,0)
 ;   If WRITE is True, the input array name (or "PRSARR" if not
"RTN","PRSPAPU",150,0)
 ;     specified) will be killed.
"RTN","PRSPAPU",151,0)
 ;   If WRITE is False, the input array name will contain the text
"RTN","PRSPAPU",152,0)
 ;
"RTN","PRSPAPU",153,0)
 N LN,PPI
"RTN","PRSPAPU",154,0)
 ;
"RTN","PRSPAPU",155,0)
 S PRSARRN=$G(PRSARRN,"PRSARR")
"RTN","PRSPAPU",156,0)
 S WRITE=$G(WRITE,1)
"RTN","PRSPAPU",157,0)
 ;
"RTN","PRSPAPU",158,0)
 S @PRSARRN@(1)="Unable to make changes because the time card for the following"
"RTN","PRSPAPU",159,0)
 S @PRSARRN@(2)="pay period(s) are being edited by another user!"
"RTN","PRSPAPU",160,0)
 S LN=2
"RTN","PRSPAPU",161,0)
 ; loop thru pay periods
"RTN","PRSPAPU",162,0)
 S PPI="" F  S PPI=$O(PPLCKE(PPI)) Q:'PPI  D
"RTN","PRSPAPU",163,0)
 . S LN=LN+1
"RTN","PRSPAPU",164,0)
 . S @PRSARRN@(LN)="  Pay Period: "_$P($G(^PRST(458,PPI,0)),U)
"RTN","PRSPAPU",165,0)
 ;
"RTN","PRSPAPU",166,0)
 ; if not WRITE then quit (returns text in array to caller)
"RTN","PRSPAPU",167,0)
 Q:'WRITE
"RTN","PRSPAPU",168,0)
 ;
"RTN","PRSPAPU",169,0)
 ; otherwise write text to current device and then kill array of text
"RTN","PRSPAPU",170,0)
 S LN=0 F  S LN=$O(@PRSARRN@(LN)) Q:'LN  D
"RTN","PRSPAPU",171,0)
 . W !,@PRSARRN@(LN)
"RTN","PRSPAPU",172,0)
 K @PRSARRN
"RTN","PRSPAPU",173,0)
 ;
"RTN","PRSPAPU",174,0)
 Q
"RTN","PRSPAPU",175,0)
 ;
"RTN","PRSPAPU",176,0)
 ;PRSPAPU
"RTN","PRSPBRP")
0^16^B69250787^n/a
"RTN","PRSPBRP",1,0)
PRSPBRP ;WOIFO/MGD - PTP BEGIN RECONCILIATION OF MEMORANDUM ;01/29/07
"RTN","PRSPBRP",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPBRP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPBRP",4,0)
 ;
"RTN","PRSPBRP",5,0)
 ; The following routine will allow HR to begin the reconciliation
"RTN","PRSPBRP",6,0)
 ; process for a memorandum that has expired or been terminated.  
"RTN","PRSPBRP",7,0)
 ; After the PT Physician is selected a summary screen will be
"RTN","PRSPBRP",8,0)
 ; displayed to verify that the correct memo is selected.
"RTN","PRSPBRP",9,0)
 ; Then a list of the reconciliation choices will be displayed and HR
"RTN","PRSPBRP",10,0)
 ; will either print the reconciliation process or they will e-mail it
"RTN","PRSPBRP",11,0)
 ; to the PT Physician.
"RTN","PRSPBRP",12,0)
 ;
"RTN","PRSPBRP",13,0)
 Q
"RTN","PRSPBRP",14,0)
 ;
"RTN","PRSPBRP",15,0)
MAIN ; Prompt for Part Time Physician
"RTN","PRSPBRP",16,0)
 S QUIT=0
"RTN","PRSPBRP",17,0)
 F  D  I QUIT D KILL Q
"RTN","PRSPBRP",18,0)
 . S PRSIEN=""
"RTN","PRSPBRP",19,0)
 . D PTP^PRSPRM
"RTN","PRSPBRP",20,0)
 . I PRSIEN<1 S QUIT=1 Q
"RTN","PRSPBRP",21,0)
 . D DRIVER
"RTN","PRSPBRP",22,0)
 . K ^TMP($J,"PRSPBRP")
"RTN","PRSPBRP",23,0)
 Q
"RTN","PRSPBRP",24,0)
 ;
"RTN","PRSPBRP",25,0)
DRIVER ; Main Driver
"RTN","PRSPBRP",26,0)
 ;
"RTN","PRSPBRP",27,0)
 ; Find any memorandums that meet the begin reconciliation qualifications
"RTN","PRSPBRP",28,0)
 D MEM
"RTN","PRSPBRP",29,0)
 Q:'MIEN
"RTN","PRSPBRP",30,0)
 ; Display employee and memorandum information
"RTN","PRSPBRP",31,0)
 D DISPLAY
"RTN","PRSPBRP",32,0)
 Q:$D(DIRUT)
"RTN","PRSPBRP",33,0)
 ; Display any outstanding PP ESRs
"RTN","PRSPBRP",34,0)
 D ESRCHK^PRSPRM
"RTN","PRSPBRP",35,0)
 ; Display Summary information
"RTN","PRSPBRP",36,0)
 D SUM
"RTN","PRSPBRP",37,0)
 Q:$D(DIRUT)
"RTN","PRSPBRP",38,0)
 ; Reconciliation Options
"RTN","PRSPBRP",39,0)
 D ROPT
"RTN","PRSPBRP",40,0)
 ; Prompt for Print or E-mail
"RTN","PRSPBRP",41,0)
 D ASK2
"RTN","PRSPBRP",42,0)
 Q:ASK2="^"!($G(POP))
"RTN","PRSPBRP",43,0)
 ; Prompt for E-sig and update file
"RTN","PRSPBRP",44,0)
 D ESIG
"RTN","PRSPBRP",45,0)
 Q
"RTN","PRSPBRP",46,0)
 ;
"RTN","PRSPBRP",47,0)
MEM ; Find any memorandums that meet the begin reconciliation qualifications
"RTN","PRSPBRP",48,0)
 ;
"RTN","PRSPBRP",49,0)
 N ENDAT,INDX,MEM,STDAT
"RTN","PRSPBRP",50,0)
 S MEM=0,INDX=1
"RTN","PRSPBRP",51,0)
 F  S MEM=$O(^PRST(458.7,"B",PRSIEN,MEM)) Q:'MEM  D
"RTN","PRSPBRP",52,0)
 . S DATA0=$G(^PRST(458.7,MEM,0))  ; Memo info
"RTN","PRSPBRP",53,0)
 . S DATA4=$G(^PRST(458.7,MEM,4)) ; Termination info
"RTN","PRSPBRP",54,0)
 . Q:DATA0=""
"RTN","PRSPBRP",55,0)
 . S STATUS=$P(DATA0,U,6)
"RTN","PRSPBRP",56,0)
 . Q:STATUS'=2  ; Recently ended memos would still be in status of 2
"RTN","PRSPBRP",57,0)
 . S STDAT=$P(DATA0,U,2)
"RTN","PRSPBRP",58,0)
 . S ENDAT=$P(DATA0,U,3)
"RTN","PRSPBRP",59,0)
 . S TDAT=$P(DATA4,U,1)
"RTN","PRSPBRP",60,0)
 . I TDAT,TDAT>DT Q  ; Termination Date has yet to occur
"RTN","PRSPBRP",61,0)
 . I TDAT S ENDAT=TDAT ; Set ENDAT to Termination Date
"RTN","PRSPBRP",62,0)
 . Q:TDAT=""&(ENDAT>DT)  ; Not Terminated and End Date has yet to occur
"RTN","PRSPBRP",63,0)
 . S MEM(INDX)=MEM_"^"_STDAT_"^"_ENDAT_"^ACTIVE"
"RTN","PRSPBRP",64,0)
 . S INDX=INDX+1
"RTN","PRSPBRP",65,0)
 ; If no memos meet the reconciliation qualifications
"RTN","PRSPBRP",66,0)
 I '$D(MEM(1)) D  Q
"RTN","PRSPBRP",67,0)
 . W !!,"No memorandums meet the reconciliation qualifications for the "
"RTN","PRSPBRP",68,0)
 . W "selected employee."
"RTN","PRSPBRP",69,0)
 . S MIEN=0
"RTN","PRSPBRP",70,0)
 ; If only one memo
"RTN","PRSPBRP",71,0)
 I '$D(MEM(2)) S MIEN=$P(MEM(1),U,1) Q
"RTN","PRSPBRP",72,0)
 ; Display list if more than one
"RTN","PRSPBRP",73,0)
 I $D(MEM(2)) D
"RTN","PRSPBRP",74,0)
 . W !!,"# ",?5,"STARTS          ENDS"
"RTN","PRSPBRP",75,0)
 . F MEM=1:1 Q:'$D(MEM(MEM))  D
"RTN","PRSPBRP",76,0)
 . . S DATA=MEM(MEM)
"RTN","PRSPBRP",77,0)
 . . S Y=$P(DATA,U,2)
"RTN","PRSPBRP",78,0)
 . . D DD^%DT
"RTN","PRSPBRP",79,0)
 . . S START=Y
"RTN","PRSPBRP",80,0)
 . . S Y=$P(DATA,U,3)
"RTN","PRSPBRP",81,0)
 . . D DD^%DT
"RTN","PRSPBRP",82,0)
 . . S END=Y
"RTN","PRSPBRP",83,0)
 . . W !,MEM,?5,START,"    ",END
"RTN","PRSPBRP",84,0)
 . ;
"RTN","PRSPBRP",85,0)
ASK . ; Ask user to select which memorandum they want
"RTN","PRSPBRP",86,0)
 . S END="",END=$O(MEM(END),-1)
"RTN","PRSPBRP",87,0)
 . W !!,"Enter a number between 1 and ",END," :"
"RTN","PRSPBRP",88,0)
 . R ASK:DTIME
"RTN","PRSPBRP",89,0)
 . S ASK=$$UPPER^PRSRUTL(ASK)
"RTN","PRSPBRP",90,0)
 . I ASK=""!(ASK="^") S MIEN=0 Q
"RTN","PRSPBRP",91,0)
 . I '$D(MEM(ASK)) D  G ASK
"RTN","PRSPBRP",92,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPBRP",93,0)
 . S MIEN=$P(MEM(ASK),U,1)
"RTN","PRSPBRP",94,0)
 . S DATA0=$G(^PRST(458.7,MIEN,0))  ; Memo info
"RTN","PRSPBRP",95,0)
 . S DATA4=$G(^PRST(458.7,MIEN,4))  ; Termination info
"RTN","PRSPBRP",96,0)
 Q
"RTN","PRSPBRP",97,0)
 ;
"RTN","PRSPBRP",98,0)
DISPLAY ; Display memorandum info to validate the correct employee was chosen
"RTN","PRSPBRP",99,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPBRP",100,0)
 S SCRTTL=" PT Physician Begin Reconciliation Process",INDX=1
"RTN","PRSPBRP",101,0)
 S ARRAY="^TMP($J,""PRSPBRP"","
"RTN","PRSPBRP",102,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,ARRAY,1)
"RTN","PRSPBRP",103,0)
 D MEM^PRSPUT1(PRSIEN,MIEN,ARRAY)
"RTN","PRSPBRP",104,0)
 D AL^PRSPUT3(PRSIEN,ARRAY)
"RTN","PRSPBRP",105,0)
 D PPSUM^PRSPUT2(PRSIEN,MIEN,ARRAY)
"RTN","PRSPBRP",106,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPBRP",107,0)
 Q
"RTN","PRSPBRP",108,0)
 ;
"RTN","PRSPBRP",109,0)
SUM ; Display Summary information - Screen #2
"RTN","PRSPBRP",110,0)
 D INDEX^PRSPUT1 ; Get last index
"RTN","PRSPBRP",111,0)
 S TEXT=""
"RTN","PRSPBRP",112,0)
 D A1^PRSPUT1
"RTN","PRSPBRP",113,0)
 N AHRS,AMT,COHRS,DATA0,ENDSTA,POMC,PPREM,RATE,SALARY,SPAA
"RTN","PRSPBRP",114,0)
 N THW,TOTNP,TOTWP
"RTN","PRSPBRP",115,0)
 S PPREM=$P($$MEMCPP^PRSPUT3(MIEN),U,2) ; Determine # PP already worked
"RTN","PRSPBRP",116,0)
 S PPREM=26-PPREM               ; Pay Periods REMaining
"RTN","PRSPBRP",117,0)
 S DATA0=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPBRP",118,0)
 S AHRS=$P(DATA0,U,4)   ; Agreed Hours
"RTN","PRSPBRP",119,0)
 S COHRS=$P(DATA0,U,9)  ; Carryover Hours
"RTN","PRSPBRP",120,0)
 S COHRS=$G(COHRS,"0.00")
"RTN","PRSPBRP",121,0)
 S THW=$P(DATA0,U,10)   ; Total Hours Worked
"RTN","PRSPBRP",122,0)
 S TOTNP=$P(DATA0,U,12) ; Total NonPay Hours
"RTN","PRSPBRP",123,0)
 I TOTNP="" S TOTNP="0.00"
"RTN","PRSPBRP",124,0)
 S TOTWP=$P(DATA0,U,13) ; Total Without Pay Hours
"RTN","PRSPBRP",125,0)
 I TOTWP="" S TOTWP="0.00"
"RTN","PRSPBRP",126,0)
 S POMC=+$P(DATA0,U,14)  ; % of Memo Completed
"RTN","PRSPBRP",127,0)
 S POT=+$P(DATA0,U,17)   ; % Off Target
"RTN","PRSPBRP",128,0)
 S TEXT="    Percent Completed: "_$J(POMC,6,2)
"RTN","PRSPBRP",129,0)
 D A1^PRSPUT1 ; Screen 2, Line 3
"RTN","PRSPBRP",130,0)
 S OTHRS=AHRS/26*(26-PPREM)-TOTNP-TOTWP ; Hrs that should've been worked
"RTN","PRSPBRP",131,0)
 S OTHRS=THW+COHRS-OTHRS ; Off Target HouRS
"RTN","PRSPBRP",132,0)
 S TEXT="     Off Target Hours: "_$J(OTHRS,6,2)
"RTN","PRSPBRP",133,0)
 D A1^PRSPUT1 ; Screen 2, Line 4
"RTN","PRSPBRP",134,0)
 S TEXT="Off Target Percentage: "_$J(POT,6,2)
"RTN","PRSPBRP",135,0)
 D A1^PRSPUT1 ; Screen 2, Line 5
"RTN","PRSPBRP",136,0)
 D A1^PRSPUT1 ; Screen 2, Line 6
"RTN","PRSPBRP",137,0)
 S TEXT="        Non Pay Hours: "_$J(TOTNP,6,2)
"RTN","PRSPBRP",138,0)
 D A1^PRSPUT1 ; Screen 2, Line 7
"RTN","PRSPBRP",139,0)
 S TEXT="    Without Pay Hours: "_$J(TOTWP,6,2)
"RTN","PRSPBRP",140,0)
 D A1^PRSPUT1 ; Screen 2, Line 8
"RTN","PRSPBRP",141,0)
 S TEXT="      Carryover Hours: "_$J(COHRS,6,2)
"RTN","PRSPBRP",142,0)
 D A1^PRSPUT1,A1^PRSPUT1 ; Screen 2, Line 9
"RTN","PRSPBRP",143,0)
 ; Calculate amount owed
"RTN","PRSPBRP",144,0)
 S SALARY=$P($G(^PRSPC(PRSIEN,0)),U,29)   ; Salary
"RTN","PRSPBRP",145,0)
 S SPAA=$P($G(^PRSPC(PRSIEN,"T38")),U,24) ; Special Pay Annual Amount
"RTN","PRSPBRP",146,0)
 S RATE=SALARY+SPAA/2080
"RTN","PRSPBRP",147,0)
 S RATE=$J(RATE,0,2)
"RTN","PRSPBRP",148,0)
 S AMT=$J(OTHRS*RATE,6,2)
"RTN","PRSPBRP",149,0)
 S TEXT="Estimated Gross Amount Owed "
"RTN","PRSPBRP",150,0)
 S ENDSTA=$S(OTHRS>0:"Over",OTHRS<0:"Under",1:"Even")
"RTN","PRSPBRP",151,0)
 S TEXT=TEXT_$S(ENDSTA="Over":"PTP",1:"VA")_": "_AMT
"RTN","PRSPBRP",152,0)
 D A1^PRSPUT1 ; Screen 2, Line 10
"RTN","PRSPBRP",153,0)
 S TEXT="                 Ending Status: "_$J(ENDSTA,6)
"RTN","PRSPBRP",154,0)
 D A1^PRSPUT1 ; Screen 2,
"RTN","PRSPBRP",155,0)
 W !
"RTN","PRSPBRP",156,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPBRP",157,0)
 Q
"RTN","PRSPBRP",158,0)
 ;
"RTN","PRSPBRP",159,0)
ROPT ; Reconciliation Options
"RTN","PRSPBRP",160,0)
 ;
"RTN","PRSPBRP",161,0)
 I $E(IOST,1,2)="C-" W @IOF
"RTN","PRSPBRP",162,0)
 W $P(^PRSPC(PRSIEN,0),U,1)_" - Memorandum Summary"
"RTN","PRSPBRP",163,0)
 D A1^PRSPUT1 ; Screen 2, Line 8 - Blank line
"RTN","PRSPBRP",164,0)
 S TEXT="Reconciliation Options:"
"RTN","PRSPBRP",165,0)
 D A1^PRSPUT1 ; Screen 2, Line 9
"RTN","PRSPBRP",166,0)
 ; PTP worked less than Agreed Hours
"RTN","PRSPBRP",167,0)
 ;I POT<-5.00 D  Q
"RTN","PRSPBRP",168,0)
 I POT<0 D  Q
"RTN","PRSPBRP",169,0)
 . S TEXT="Pay VA for negative balance"
"RTN","PRSPBRP",170,0)
 . S MEM(1)=TEXT_U_3
"RTN","PRSPBRP",171,0)
 . S TEXT="1. "_TEXT
"RTN","PRSPBRP",172,0)
 . D A1^PRSPUT1 ; Screen 2, Line 10
"RTN","PRSPBRP",173,0)
 ;
"RTN","PRSPBRP",174,0)
 ; PTP worked more than Agreed Hours
"RTN","PRSPBRP",175,0)
 ; CO policy removed I POT>5.00 D  Q
"RTN","PRSPBRP",176,0)
 I POT>0 D  Q
"RTN","PRSPBRP",177,0)
 . S TEXT="Pay Phy for positive balance"
"RTN","PRSPBRP",178,0)
 . S MEM(1)=TEXT_U_5
"RTN","PRSPBRP",179,0)
 . S TEXT="1. "_TEXT
"RTN","PRSPBRP",180,0)
 . D A1^PRSPUT1 ; Screen 2, Line 10
"RTN","PRSPBRP",181,0)
 ;
"RTN","PRSPBRP",182,0)
 ; PTP worked Agreed Hours exactly
"RTN","PRSPBRP",183,0)
 I POT=0 D  Q
"RTN","PRSPBRP",184,0)
 . S TEXT="No reconciliation needed"
"RTN","PRSPBRP",185,0)
 . S MEM(1)=TEXT_U_1
"RTN","PRSPBRP",186,0)
 . S TEXT="1. "_TEXT
"RTN","PRSPBRP",187,0)
 . D A1^PRSPUT1 ; Screen 2, Line 10
"RTN","PRSPBRP",188,0)
 ;
"RTN","PRSPBRP",189,0)
 ;***************************************************************
"RTN","PRSPBRP",190,0)
 ;PRS*4*93: BEGIN comment out carry over options--during testing
"RTN","PRSPBRP",191,0)
 ;policy was changed to not allow ptp to carry over hours within
"RTN","PRSPBRP",192,0)
 ;5% of agreement.
"RTN","PRSPBRP",193,0)
 ;***************************************************************
"RTN","PRSPBRP",194,0)
 ;; Within 5% of Agreed Hours
"RTN","PRSPBRP",195,0)
 ;; Check for next memorandum
"RTN","PRSPBRP",196,0)
 ;S OLDMIEN=MIEN
"RTN","PRSPBRP",197,0)
 ;S NMIEN=+$$MIEN^PRSPUT1(PRSIEN)
"RTN","PRSPBRP",198,0)
 ;S MIEN=OLDMIEN
"RTN","PRSPBRP",199,0)
 ;I 'NMIEN D
"RTN","PRSPBRP",200,0)
 ;. S TEXT="No current Memorandum on file.  Transfer not possible."
"RTN","PRSPBRP",201,0)
 ;. D A1^PRSPUT1
"RTN","PRSPBRP",202,0)
 ;. S TEXT="If applicable, exit and enter a new memorandum first."
"RTN","PRSPBRP",203,0)
 ;. D A1^PRSPUT1
"RTN","PRSPBRP",204,0)
 ;;
"RTN","PRSPBRP",205,0)
 ;; Negative Balance Options
"RTN","PRSPBRP",206,0)
 ;I POT<0 D
"RTN","PRSPBRP",207,0)
 ;. S TEXT="Pay VA for negative balance"
"RTN","PRSPBRP",208,0)
 ;. S MEM(1)=TEXT_U_3
"RTN","PRSPBRP",209,0)
 ;. S TEXT="1. "_TEXT
"RTN","PRSPBRP",210,0)
 ;. D A1^PRSPUT1 ; Screen 2, Line 12
"RTN","PRSPBRP",211,0)
 ;I NMIEN,POT<0 D
"RTN","PRSPBRP",212,0)
 ;. S TEXT="Transfer negative balance"
"RTN","PRSPBRP",213,0)
 ;. S MEM(2)=TEXT_U_2
"RTN","PRSPBRP",214,0)
 ;. S TEXT="2. "_TEXT
"RTN","PRSPBRP",215,0)
 ;. D A1^PRSPUT1 ; Screen 2, Line 11
"RTN","PRSPBRP",216,0)
 ;;
"RTN","PRSPBRP",217,0)
 ;; Postive Balance Options
"RTN","PRSPBRP",218,0)
 ;I POT>0 D
"RTN","PRSPBRP",219,0)
 ;. S TEXT="Pay PT Phy for positive balance"
"RTN","PRSPBRP",220,0)
 ;. S MEM(1)=TEXT_U_5
"RTN","PRSPBRP",221,0)
 ;. S TEXT="1. "_TEXT
"RTN","PRSPBRP",222,0)
 ;. D A1^PRSPUT1 ; Screen 2, Line 12
"RTN","PRSPBRP",223,0)
 ;I NMIEN,POT>0 D
"RTN","PRSPBRP",224,0)
 ;. S TEXT="Transfer positive balance"
"RTN","PRSPBRP",225,0)
 ;. S MEM(2)=TEXT_U_4
"RTN","PRSPBRP",226,0)
 ;. S TEXT="2. "_TEXT
"RTN","PRSPBRP",227,0)
 ;. D A1^PRSPUT1 ; Screen 2, Line 11
"RTN","PRSPBRP",228,0)
 ;;finish the remainder of the form
"RTN","PRSPBRP",229,0)
 ;D A1^PRSPUT1 ; Blank Line
"RTN","PRSPBRP",230,0)
 ;S TEXT="Enter Reconciliation Option: _____"
"RTN","PRSPBRP",231,0)
 ;D A1^PRSPUT1
"RTN","PRSPBRP",232,0)
 ;D A1^PRSPUT1 ; Blank Line
"RTN","PRSPBRP",233,0)
 ;S $P(DASH,"_",55)="_"
"RTN","PRSPBRP",234,0)
 ;S TEXT="Reconciliation Comments: "_DASH
"RTN","PRSPBRP",235,0)
 ;D A1^PRSPUT1 ; Reconciliation Comments Line #1
"RTN","PRSPBRP",236,0)
 ;D A1^PRSPUT1 ; Blank Line
"RTN","PRSPBRP",237,0)
 ;S DASH="",$P(DASH,"_",80)="_"
"RTN","PRSPBRP",238,0)
 ;S TEXT=DASH
"RTN","PRSPBRP",239,0)
 ;D A1^PRSPUT1 ; Reconciliation Comments Line #2
"RTN","PRSPBRP",240,0)
 ;D A1^PRSPUT1 ; Blank Line
"RTN","PRSPBRP",241,0)
 ;S TEXT=DASH
"RTN","PRSPBRP",242,0)
 ;D A1^PRSPUT1 ; Reconciliation Comments Line #3
"RTN","PRSPBRP",243,0)
 ;D A1^PRSPUT1 ; Blank Line
"RTN","PRSPBRP",244,0)
 ;D A1^PRSPUT1 ; Reconciliation Comments Line #4
"RTN","PRSPBRP",245,0)
 ;S DASH="",$P(DASH,"_",41)="_"
"RTN","PRSPBRP",246,0)
 ;S TEXT="Signature: "_DASH
"RTN","PRSPBRP",247,0)
 ;S DASH="",$P(DASH,"_",20)="_"
"RTN","PRSPBRP",248,0)
 ;S TEXT=TEXT_"  Date: "_DASH
"RTN","PRSPBRP",249,0)
 ;D A1^PRSPUT1
"RTN","PRSPBRP",250,0)
 ;**********************************
"RTN","PRSPBRP",251,0)
 ;END of comment out carry over options
"RTN","PRSPBRP",252,0)
 ;**********************************
"RTN","PRSPBRP",253,0)
 Q
"RTN","PRSPBRP",254,0)
 ;
"RTN","PRSPBRP",255,0)
ASK2 ; Prompt to e-mail or print.
"RTN","PRSPBRP",256,0)
 ;
"RTN","PRSPBRP",257,0)
 W !!,"Would you like to use a (H)ard copy or (E)lectronic reconciliation form: "
"RTN","PRSPBRP",258,0)
 R ASK2:DTIME
"RTN","PRSPBRP",259,0)
 S ASK2=$$UPPER^PRSRUTL(ASK2)
"RTN","PRSPBRP",260,0)
 Q:ASK2="^"
"RTN","PRSPBRP",261,0)
 I "^H^E^"'[("^"_ASK2_"^") D  G ASK2
"RTN","PRSPBRP",262,0)
 . W !!,"Enter H or E or ^ to Quit."
"RTN","PRSPBRP",263,0)
 Q
"RTN","PRSPBRP",264,0)
 ;
"RTN","PRSPBRP",265,0)
ESIG ; Prompt for Electronic Signature and store fields in #458.7
"RTN","PRSPBRP",266,0)
 ;
"RTN","PRSPBRP",267,0)
 N ESOK
"RTN","PRSPBRP",268,0)
 D ^PRSAES
"RTN","PRSPBRP",269,0)
 I 'ESOK K ^TMP($J,"PRSPBRP") Q
"RTN","PRSPBRP",270,0)
 ;
"RTN","PRSPBRP",271,0)
DEV I ASK2="H" D  Q:POP
"RTN","PRSPBRP",272,0)
 . K IOP,%ZIS
"RTN","PRSPBRP",273,0)
 . S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPBRP",274,0)
 . W !
"RTN","PRSPBRP",275,0)
 . D ^%ZIS
"RTN","PRSPBRP",276,0)
 . K %ZIS,IOP
"RTN","PRSPBRP",277,0)
 . I $D(IO("Q")) D  Q   ; Queued
"RTN","PRSPBRP",278,0)
 ..  S ZTDESC="PRS PTP BEGIN RECONCILE PROC"
"RTN","PRSPBRP",279,0)
 ..  S ZTRTN="PRINT^PRSPBRP"
"RTN","PRSPBRP",280,0)
 ..  S ZTSAVE("^TMP($J,""PRSPBRP"",")=""
"RTN","PRSPBRP",281,0)
 ..  D ^%ZTLOAD W !,$S($D(ZTSK):"Request Queued!",1:"Request Canceled!")
"RTN","PRSPBRP",282,0)
 ..  K ZTSK,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","PRSPBRP",283,0)
 ..  D HOME^%ZIS
"RTN","PRSPBRP",284,0)
 . U IO
"RTN","PRSPBRP",285,0)
 . D PRINT,^%ZISC
"RTN","PRSPBRP",286,0)
 . K %ZIS,IOP
"RTN","PRSPBRP",287,0)
 ; Update STATUS or memorandum
"RTN","PRSPBRP",288,0)
 S MIEN=MIEN_",",PRSFDA(458.7,MIEN,5)=3
"RTN","PRSPBRP",289,0)
 D UPDATE^DIE("","PRSFDA","MIEN"),MSG^DIALOG()
"RTN","PRSPBRP",290,0)
 W !!,"Memorandum Status updated to: RECONCILIATION STARTED",!
"RTN","PRSPBRP",291,0)
 K ^TMP($J,"PRSPBRP")
"RTN","PRSPBRP",292,0)
 Q
"RTN","PRSPBRP",293,0)
 ;
"RTN","PRSPBRP",294,0)
PRINT ; Print the paper version of the Reconciliation form
"RTN","PRSPBRP",295,0)
 ;
"RTN","PRSPBRP",296,0)
 S INDEX=""
"RTN","PRSPBRP",297,0)
 F  S INDEX=$O(^TMP($J,"PRSPBRP",INDEX)) Q:'INDEX  D
"RTN","PRSPBRP",298,0)
 . S TEXT=^TMP($J,"PRSPBRP",INDEX)
"RTN","PRSPBRP",299,0)
 . W !,TEXT
"RTN","PRSPBRP",300,0)
 K ^TMP($J),TEXT
"RTN","PRSPBRP",301,0)
 Q
"RTN","PRSPBRP",302,0)
 ;
"RTN","PRSPBRP",303,0)
KILL ; Clean up variables
"RTN","PRSPBRP",304,0)
 ;
"RTN","PRSPBRP",305,0)
 K AMT,ARRAY,ASK,ASK2,COHRS,D1,DASH,DATA,DATA0,DATA4,DAY,DIR,DIRUT
"RTN","PRSPBRP",306,0)
 K END,ENDSTA,INDEX,INDX,MEM,MIEN,NMIEN,NPHRS,OLDMIEN,OTHRS
"RTN","PRSPBRP",307,0)
 K POP,POT,PPI,PPCNT,PPREM,PRSAPGM,PRSIEN,PRSFDA,QUIT,RATE,SALARY
"RTN","PRSPBRP",308,0)
 K SCRTTL,SPAA,START,STATUS,TDAT,TDATE,WPHRS,ZTSAVE,X,Y
"RTN","PRSPBRP",309,0)
 K ^TMP($J,"PRSPBRP")
"RTN","PRSPBRP",310,0)
 Q
"RTN","PRSPCORE")
0^56^B33543498^n/a
"RTN","PRSPCORE",1,0)
PRSPCORE ;WOIFO/JAH - pt phys report on Core Hour Tours ;01/22/05
"RTN","PRSPCORE",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPCORE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPCORE",4,0)
 ;
"RTN","PRSPCORE",5,0)
 ;  Report all tours of duty that currently have a Core Hours 
"RTN","PRSPCORE",6,0)
 ;  designation in the TOUR OF DUTY(#457.1)
"RTN","PRSPCORE",7,0)
 ;
"RTN","PRSPCORE",8,0)
 ; The Payroll Supervisor will need to remove the
"RTN","PRSPCORE",9,0)
 ; designation from the indicated tour.
"RTN","PRSPCORE",10,0)
 ;
"RTN","PRSPCORE",11,0)
 Q
"RTN","PRSPCORE",12,0)
COREHRS ; main driver for the core hours report
"RTN","PRSPCORE",13,0)
 ; Get Station Number
"RTN","PRSPCORE",14,0)
 N Y,%,TSTAMP,%ZIS,POP,INCLUDE,PPI,PPE
"RTN","PRSPCORE",15,0)
 D NOW^%DTC S Y=% D DD^%DT S TSTAMP=Y
"RTN","PRSPCORE",16,0)
 ;
"RTN","PRSPCORE",17,0)
 ; look for core designation in the tours
"RTN","PRSPCORE",18,0)
 ;
"RTN","PRSPCORE",19,0)
 D INTRO
"RTN","PRSPCORE",20,0)
 Q:$$ASK^PRSLIB00(1)
"RTN","PRSPCORE",21,0)
 S INCLUDE=$$INCLEMP^PRSPCORE()
"RTN","PRSPCORE",22,0)
 Q:INCLUDE<0
"RTN","PRSPCORE",23,0)
 S PPI=0
"RTN","PRSPCORE",24,0)
 I INCLUDE S PPI=$$WHICHPP() Q:PPI<0
"RTN","PRSPCORE",25,0)
 I PPI>0 S PPE=$P(^PRST(458,PPI,0),U)
"RTN","PRSPCORE",26,0)
 ; if the pay period is not open then don't try to print employee list
"RTN","PRSPCORE",27,0)
 I PPI=0 S INCLUDE=0
"RTN","PRSPCORE",28,0)
 ;
"RTN","PRSPCORE",29,0)
 S %ZIS="MQ"
"RTN","PRSPCORE",30,0)
 D ^%ZIS
"RTN","PRSPCORE",31,0)
 Q:POP
"RTN","PRSPCORE",32,0)
 I $D(IO("Q")) D
"RTN","PRSPCORE",33,0)
 . K IO("Q")
"RTN","PRSPCORE",34,0)
 . N ZTDESC,ZTRTN,ZTSAVE
"RTN","PRSPCORE",35,0)
 . S ZTDESC="PAID TOURS WITH CORE TIME REPORT",ZTRTN="TOURCHK^PRSPCORE"
"RTN","PRSPCORE",36,0)
 . S ZTSAVE("TSTAMP")="",ZTSAVE("INCLUDE")="",ZTSAVE("PPI")="",ZTSAVE("PPE")=""
"RTN","PRSPCORE",37,0)
 . D ^%ZTLOAD
"RTN","PRSPCORE",38,0)
 .;
"RTN","PRSPCORE",39,0)
 E  D
"RTN","PRSPCORE",40,0)
 .  D TOURCHK
"RTN","PRSPCORE",41,0)
 Q
"RTN","PRSPCORE",42,0)
 ;
"RTN","PRSPCORE",43,0)
INTRO ;always show the option description to the user since this is 
"RTN","PRSPCORE",44,0)
 ; standalone secondary option.
"RTN","PRSPCORE",45,0)
 N X,Y,DIC,PRSHLP,PRSER,OPTIEN,LN
"RTN","PRSPCORE",46,0)
 W @IOF,!
"RTN","PRSPCORE",47,0)
 S X="PRSP PS CORE HRS RPT"
"RTN","PRSPCORE",48,0)
 S DIC="^DIC(19,"
"RTN","PRSPCORE",49,0)
 S DIC(0)="MZ"
"RTN","PRSPCORE",50,0)
 D ^DIC
"RTN","PRSPCORE",51,0)
 Q:$G(Y)'>0
"RTN","PRSPCORE",52,0)
 S OPTIEN=+$G(Y)
"RTN","PRSPCORE",53,0)
 S X=$$GET1^DIQ(19,OPTIEN,3.5,,"PRSHLP","PRSER")
"RTN","PRSPCORE",54,0)
 S LN=0
"RTN","PRSPCORE",55,0)
 F  S LN=$O(PRSHLP(LN)) Q:LN'>0  D
"RTN","PRSPCORE",56,0)
 . W !,PRSHLP(LN)
"RTN","PRSPCORE",57,0)
 S LN=0
"RTN","PRSPCORE",58,0)
 F  S LN=$O(PRSER(LN)) Q:LN'>0  D
"RTN","PRSPCORE",59,0)
 . W !,PRSER(LN)
"RTN","PRSPCORE",60,0)
 Q
"RTN","PRSPCORE",61,0)
HDR(TSTAMP) ;
"RTN","PRSPCORE",62,0)
 N I,L1
"RTN","PRSPCORE",63,0)
 W @IOF,!
"RTN","PRSPCORE",64,0)
 I $G(INCLUDE) W ?2,"Employee search in PP ",PPE," included."
"RTN","PRSPCORE",65,0)
 W ?(IOM-$L(TSTAMP)-1),TSTAMP
"RTN","PRSPCORE",66,0)
 S L1="PAID - TOURS OF DUTY WITH PHYS/DENT CORE HOURS SEGMENTS REPORT"
"RTN","PRSPCORE",67,0)
 W !,?(IOM-$L(L1))/2,L1
"RTN","PRSPCORE",68,0)
 W !," TOUR #",?10,"TOUR NAME",?50,"SEGMENT"
"RTN","PRSPCORE",69,0)
 W !
"RTN","PRSPCORE",70,0)
 F I=1:1:IOM-1 W "-"
"RTN","PRSPCORE",71,0)
 Q
"RTN","PRSPCORE",72,0)
 ;
"RTN","PRSPCORE",73,0)
RET(TSTAMP) ;
"RTN","PRSPCORE",74,0)
 I ($E(IOST,1,2)'="C-")!($D(ZTQUEUED)) D HDR(TSTAMP) Q 0
"RTN","PRSPCORE",75,0)
 ;
"RTN","PRSPCORE",76,0)
 N OUT
"RTN","PRSPCORE",77,0)
 S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSPCORE",78,0)
 I 'OUT D HDR(TSTAMP)
"RTN","PRSPCORE",79,0)
 Q OUT
"RTN","PRSPCORE",80,0)
 ;
"RTN","PRSPCORE",81,0)
TOURCHK ; check tour of duty file for tours with special time Phy/Dent core
"RTN","PRSPCORE",82,0)
 ;
"RTN","PRSPCORE",83,0)
 ; STIEN-SPECIAL TOUR INDICATOR IEN (457.2)
"RTN","PRSPCORE",84,0)
 ; STPTR-POINTER FROM TOUR OF DUTY FILE TO THE SPECIAL TOUR IND FILE
"RTN","PRSPCORE",85,0)
 ;
"RTN","PRSPCORE",86,0)
 U IO
"RTN","PRSPCORE",87,0)
 N I,ZNODE,NODE1,OUT,STPTR,STIEN,STCNT,SEGCNT,HASCORE,NODEX,TOUR
"RTN","PRSPCORE",88,0)
 ; Loop through tours
"RTN","PRSPCORE",89,0)
 ;
"RTN","PRSPCORE",90,0)
 S STIEN=$O(^PRST(457.2,"B","Phy/Den Core Hours",0))
"RTN","PRSPCORE",91,0)
 I STIEN'>0 D  Q
"RTN","PRSPCORE",92,0)
 .  D HDR(TSTAMP)
"RTN","PRSPCORE",93,0)
 .  W !!,"REPORT ABORTED!"
"RTN","PRSPCORE",94,0)
 .  W !,"No Phy/Den Core Hours entry found in file 457.2"
"RTN","PRSPCORE",95,0)
 S (STCNT,TOUR,OUT)=0,NODEX=1
"RTN","PRSPCORE",96,0)
 D HDR(TSTAMP)
"RTN","PRSPCORE",97,0)
 F  S TOUR=$O(^PRST(457.1,TOUR)) Q:TOUR'>0!(OUT)  D
"RTN","PRSPCORE",98,0)
 . S HASCORE=0
"RTN","PRSPCORE",99,0)
 . S ZNODE=$G(^PRST(457.1,TOUR,0))
"RTN","PRSPCORE",100,0)
 . S NODE1=$G(^PRST(457.1,TOUR,1))
"RTN","PRSPCORE",101,0)
 . ;
"RTN","PRSPCORE",102,0)
 . ; Loop through 7 Special Codes looking for code
"RTN","PRSPCORE",103,0)
 . ; #3 Phy/Den Core Hours
"RTN","PRSPCORE",104,0)
 . ; 
"RTN","PRSPCORE",105,0)
 . S SEGCNT=0
"RTN","PRSPCORE",106,0)
 . F I=3:3:21 D
"RTN","PRSPCORE",107,0)
 ..  S STPTR=$P(NODE1,U,I)
"RTN","PRSPCORE",108,0)
 ..  I STPTR=STIEN S SEGCNT=SEGCNT+1 D
"RTN","PRSPCORE",109,0)
 ...   S HASCORE=1
"RTN","PRSPCORE",110,0)
 ...   I SEGCNT=1 D
"RTN","PRSPCORE",111,0)
 ....    S STCNT=STCNT+1
"RTN","PRSPCORE",112,0)
 ....    W !!,$J(TOUR,7),?10,$P(ZNODE,U)
"RTN","PRSPCORE",113,0)
 ...   E  D
"RTN","PRSPCORE",114,0)
 ....    W !
"RTN","PRSPCORE",115,0)
 ...   W ?50,I/3,": ",$P(NODE1,U,I-2)," - ",$P(NODE1,U,I-1)
"RTN","PRSPCORE",116,0)
 .;
"RTN","PRSPCORE",117,0)
 . I $Y>(IOSL-3) S OUT=$$RET(TSTAMP) Q:OUT
"RTN","PRSPCORE",118,0)
 . I HASCORE S OUT=$$TLLIST^PRSPCORE(TOUR,TSTAMP) Q:OUT
"RTN","PRSPCORE",119,0)
 . I INCLUDE,HASCORE S OUT=$$EMPLIST(TSTAMP,TOUR,PPI,TOUR) S HASCORE=0 Q:OUT
"RTN","PRSPCORE",120,0)
 ;
"RTN","PRSPCORE",121,0)
 ;
"RTN","PRSPCORE",122,0)
 I STCNT=0 W !!,?5,"No Tours were found with Special Tour Indicator of Phy/Den Core Hrs"
"RTN","PRSPCORE",123,0)
 D ^%ZISC
"RTN","PRSPCORE",124,0)
 I $D(ZTSK) S ZTREQ="@"
"RTN","PRSPCORE",125,0)
 Q
"RTN","PRSPCORE",126,0)
WHICHPP() ;
"RTN","PRSPCORE",127,0)
 N PPI,SRT,DFN
"RTN","PRSPCORE",128,0)
 S PPI=$P($G(^PRST(458,"AD",DT)),U)
"RTN","PRSPCORE",129,0)
 I PPI'>0 S PPI=$O(^PRST(458,99999),-1)
"RTN","PRSPCORE",130,0)
 Q:PPI'>0
"RTN","PRSPCORE",131,0)
 S DFN=0 D NOL^PRSATE2
"RTN","PRSPCORE",132,0)
 S PPI=$S(SRT="L":PPI-1,SRT="N":PPI+1,SRT="C":PPI,1:-1)
"RTN","PRSPCORE",133,0)
 Q:PPI<0 PPI
"RTN","PRSPCORE",134,0)
 I '$G(^PRST(458,PPI,0)) S PPI=0 W !,"No employee tour data available for the unopened pay period."
"RTN","PRSPCORE",135,0)
 Q PPI
"RTN","PRSPCORE",136,0)
INCLEMP() ;ASK USER IF THEY WANT TO INCLUDE EMPLOYEES WITH THE TOUR
"RTN","PRSPCORE",137,0)
 N DIR,DIRUT,Y,INCLUDE
"RTN","PRSPCORE",138,0)
 S DIR(0)="YA0"
"RTN","PRSPCORE",139,0)
 S DIR("B")="N"
"RTN","PRSPCORE",140,0)
 S DIR("A")="List employees with Phys/Den Core Hours Tours?"
"RTN","PRSPCORE",141,0)
 D ^DIR
"RTN","PRSPCORE",142,0)
 S INCLUDE=+Y
"RTN","PRSPCORE",143,0)
 I $D(DIRUT) S INCLUDE=-1
"RTN","PRSPCORE",144,0)
 Q INCLUDE
"RTN","PRSPCORE",145,0)
EMPLIST(TS,TR,PPI,STIEN) ;LOOP THRU PP TO DISPLAY EMPS W/ PHY/DEN CORE TOURS
"RTN","PRSPCORE",146,0)
 ;
"RTN","PRSPCORE",147,0)
 N PRSIEN,PRSD,TRNODE,TR1,TR2,CORECNT,FOUND,OUT
"RTN","PRSPCORE",148,0)
 S OUT=0
"RTN","PRSPCORE",149,0)
 W !
"RTN","PRSPCORE",150,0)
 S (CORECNT,PRSIEN,OUT)=0
"RTN","PRSPCORE",151,0)
 ; ^PRST(458,236,"E",12717,"D",12,0) = 12^295^0^9^13198^3050114.11 ...
"RTN","PRSPCORE",152,0)
 ;
"RTN","PRSPCORE",153,0)
 F  S PRSIEN=$O(^PRST(458,PPI,"E",PRSIEN)) Q:PRSIEN'>0!(OUT)  D
"RTN","PRSPCORE",154,0)
 .  S (PRSD,FOUND)=0
"RTN","PRSPCORE",155,0)
 .  F PRSD=1:1:14 D
"RTN","PRSPCORE",156,0)
 ..   S TRNODE=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0))
"RTN","PRSPCORE",157,0)
 ..   S TR1=$P(TRNODE,U,2)
"RTN","PRSPCORE",158,0)
 ..   S TR2=$P(TRNODE,U,13)
"RTN","PRSPCORE",159,0)
 ..   I (TR1=STIEN)!(TR2=STIEN) S FOUND=1,CORECNT=CORECNT+1 Q
"RTN","PRSPCORE",160,0)
 .  S ZNODE=$G(^PRSPC(PRSIEN,0))
"RTN","PRSPCORE",161,0)
 .  I FOUND W !,?12,$P(ZNODE,U),?45,"T&L: ",$P(ZNODE,U,8),?67,"nnn-nn-",$E($P(ZNODE,U,9),6,9)
"RTN","PRSPCORE",162,0)
 . I $Y>(IOSL-3) S OUT=$$RET(TSTAMP) Q:OUT
"RTN","PRSPCORE",163,0)
 I CORECNT=0 W !,?12,"No employees with this core hours tour in pp ",PPE
"RTN","PRSPCORE",164,0)
 Q OUT
"RTN","PRSPCORE",165,0)
 ;
"RTN","PRSPCORE",166,0)
TLLIST(TIE,TSTAMP) ;LOOP THRU TOUR TO DISPLAY ASSOCIATED T&Ls
"RTN","PRSPCORE",167,0)
 ; INPUT : Tour Internal Entry number
"RTN","PRSPCORE",168,0)
 ; local vars:
"RTN","PRSPCORE",169,0)
 ;    ATL - Associated T & L unit
"RTN","PRSPCORE",170,0)
 ;    ATLCT - count the assoc tls
"RTN","PRSPCORE",171,0)
 N ATL,ATLCT,OUT
"RTN","PRSPCORE",172,0)
 W !,?12,"Associated T&Ls: "
"RTN","PRSPCORE",173,0)
 I $$GET1^DIQ(457.1,TIE,4,,,)="YES" D  Q 0
"RTN","PRSPCORE",174,0)
 . W "This tour is available to all T&L units."
"RTN","PRSPCORE",175,0)
 ;
"RTN","PRSPCORE",176,0)
 S (OUT,ATLCT,ATL)=0
"RTN","PRSPCORE",177,0)
 F  S ATL=$O(^PRST(457.1,TIE,"T","B",ATL)) Q:ATL'>0!(OUT)  D
"RTN","PRSPCORE",178,0)
 .  I $X>(IOM-10) D
"RTN","PRSPCORE",179,0)
 ..   W ", ",!,?29
"RTN","PRSPCORE",180,0)
 .  E  D
"RTN","PRSPCORE",181,0)
 ..   I ATLCT>0 W ", "
"RTN","PRSPCORE",182,0)
 .  I $Y>(IOSL-3) S OUT=$$RET(TSTAMP) Q:OUT  W !!,?12,"Associated T&Ls: "
"RTN","PRSPCORE",183,0)
 .  S ATLCT=ATLCT+1
"RTN","PRSPCORE",184,0)
 .  W $$GET1^DIQ(455.5,ATL,.01,,,)
"RTN","PRSPCORE",185,0)
 I ATLCT=0 W "No T&L units are associated with this tour."
"RTN","PRSPCORE",186,0)
 Q OUT
"RTN","PRSPCPP1")
0^50^B16625625^n/a
"RTN","PRSPCPP1",1,0)
PRSPCPP1 ; HISC/MGD - DISPLAY CURRENT PP ESR EXCEPTIONS #2 ;05/17/05
"RTN","PRSPCPP1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPCPP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPCPP1",4,0)
LOOP ; Loop through employees
"RTN","PRSPCPP1",5,0)
 N DATA,NAME
"RTN","PRSPCPP1",6,0)
 S NAME="",(PG,QT)=0,DASH="",$P(DASH,"_",80)="_"
"RTN","PRSPCPP1",7,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPCPP1",8,0)
 F  S NAME=$O(^TMP($J,"PRSPCPPE DATA",NAME)) Q:NAME=""  D  Q:QT
"RTN","PRSPCPP1",9,0)
 . S DATA=^TMP($J,"PRSPCPPE DATA",NAME)
"RTN","PRSPCPP1",10,0)
 . S PRSIEN=$P(DATA,U,1),IDAYS=$P(DATA,U,2)
"RTN","PRSPCPP1",11,0)
 . I $E(IOST,1,2)="C-" D  Q:QT
"RTN","PRSPCPP1",12,0)
 . . I PG D PSE Q:QT
"RTN","PRSPCPP1",13,0)
 . . S PG=1
"RTN","PRSPCPP1",14,0)
 . . D HDR1,DIS
"RTN","PRSPCPP1",15,0)
 . I $E(IOST,1,2)'="C-" D  Q:QT
"RTN","PRSPCPP1",16,0)
 . . I $Y'>(IOSL-15),'PG D HDR1 S PG=1 D DIS Q
"RTN","PRSPCPP1",17,0)
 . . I $Y'>(IOSL-15),PG W !! D HDR1,DIS Q
"RTN","PRSPCPP1",18,0)
 . . D PSE Q:QT  S PG=0 D HDR1,DIS Q
"RTN","PRSPCPP1",19,0)
 ;
"RTN","PRSPCPP1",20,0)
 Q:QT
"RTN","PRSPCPP1",21,0)
 I '$D(^TMP($J,"PRSPCPPE DATA")) D
"RTN","PRSPCPP1",22,0)
 . I $E(IOST,1,2)="C-" W @IOF
"RTN","PRSPCPP1",23,0)
 . W "DISPLAY PP ESR EXCEPTIONS",?50,$$FMTE^XLFDT($$NOW^XLFDT()),!!
"RTN","PRSPCPP1",24,0)
 . W "No exceptions were found in the specified T&Ls for pay period ",PPE,!
"RTN","PRSPCPP1",25,0)
 I $E(IOST,1,2)="C-" D PSE W @IOF
"RTN","PRSPCPP1",26,0)
 Q
"RTN","PRSPCPP1",27,0)
 ;
"RTN","PRSPCPP1",28,0)
DIS ; Display 14 days
"RTN","PRSPCPP1",29,0)
 ;
"RTN","PRSPCPP1",30,0)
 S PDT=$G(^PRST(458,PPI,2)),STAT=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),"^",2)
"RTN","PRSPCPP1",31,0)
 S IDAYS=0
"RTN","PRSPCPP1",32,0)
 F DAY=1:1:14 D  Q:QT
"RTN","PRSPCPP1",33,0)
 . S DATA7=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7))
"RTN","PRSPCPP1",34,0)
 . S STAT=$P(DATA7,U,1)    ; ESR Daily Status
"RTN","PRSPCPP1",35,0)
 . I STAT<4 S IDAYS=IDAYS+1
"RTN","PRSPCPP1",36,0)
 ; Check to see if the PTP had a memorandum during this PP.
"RTN","PRSPCPP1",37,0)
 S DAY1=$P($G(^PRST(458,PPI,1)),U,1)
"RTN","PRSPCPP1",38,0)
 I +$$MIEN^PRSPUT1(PRSIEN,DAY1)=0 D  Q:QT
"RTN","PRSPCPP1",39,0)
 . W !!,"This employee did not have an active Memorandum during this Pay Period."
"RTN","PRSPCPP1",40,0)
 . S QT=1
"RTN","PRSPCPP1",41,0)
 F DAY=1:1:14 D  Q:QT
"RTN","PRSPCPP1",42,0)
 . S DATA0=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0))
"RTN","PRSPCPP1",43,0)
 . S DATA5=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))
"RTN","PRSPCPP1",44,0)
 . S DATA6=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,6))
"RTN","PRSPCPP1",45,0)
 . S DATA7=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7))
"RTN","PRSPCPP1",46,0)
 . S T1=$P(DATA0,U,2)      ; Tour #1
"RTN","PRSPCPP1",47,0)
 . S T1EX=$S(T1:$P($G(^PRST(457.1,T1,0)),U,1),1:"") ; Tour #1 External
"RTN","PRSPCPP1",48,0)
 . S STAT=$P(DATA7,U,1)    ; ESR Daily Status
"RTN","PRSPCPP1",49,0)
 . Q:STAT>3  ; Only display exceptions
"RTN","PRSPCPP1",50,0)
 . S STATEX=$$EXTERNAL^DILFD(458.02,146,"",STAT)
"RTN","PRSPCPP1",51,0)
 . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",52,0)
 . W !,$P(PDT,U,DAY),?14,$J(T1,4)," ",T1EX,?68," ",STATEX
"RTN","PRSPCPP1",53,0)
 . S T2=$P(DATA0,U,13)  ; Tour #2
"RTN","PRSPCPP1",54,0)
 . I T2 D  Q:QT
"RTN","PRSPCPP1",55,0)
 . . S T2EX=$S(T2:$P($G(^PRST(457.1,T2,0)),U,1),1:"") ; Tour #2 External
"RTN","PRSPCPP1",56,0)
 . . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",57,0)
 . . W !?14,$J(T2,4)," ",T2EX
"RTN","PRSPCPP1",58,0)
 . S EDLSM=$P(DATA7,U,3)   ; ESR DAY LAST SIGN METHOD
"RTN","PRSPCPP1",59,0)
 . I EDLSM=2 S STATEX=STATEX_" - EA" ; Posted by Extended Absence
"RTN","PRSPCPP1",60,0)
 . S QUIT=0
"RTN","PRSPCPP1",61,0)
 . F SEG=1:5:31 D  Q:QT!(QUIT)
"RTN","PRSPCPP1",62,0)
 . . S START=$P(DATA5,U,SEG)
"RTN","PRSPCPP1",63,0)
 . . I START="",SEG>1 S QUIT=1
"RTN","PRSPCPP1",64,0)
 . . Q:START=""
"RTN","PRSPCPP1",65,0)
 . . S STOP=$P(DATA5,U,SEG+1),TOT=$P(DATA5,U,SEG+2)
"RTN","PRSPCPP1",66,0)
 . . S TOTEX=""
"RTN","PRSPCPP1",67,0)
 . . I TOT'="" D
"RTN","PRSPCPP1",68,0)
 . . . S TOTEX=$O(^PRST(457.3,"B",TOT,0))
"RTN","PRSPCPP1",69,0)
 . . . S TOTEX=$E($P($G(^PRST(457.3,TOTEX,0)),U,2),1,14)
"RTN","PRSPCPP1",70,0)
 . . . S TOTEX=TOT_" "_TOTEX
"RTN","PRSPCPP1",71,0)
 . . S RC=$P(DATA5,U,SEG+3),MT=$P(DATA5,U,SEG+4)
"RTN","PRSPCPP1",72,0)
 . . S HRS=$$ELAPSE^PRSPESR2(MT,START,STOP)
"RTN","PRSPCPP1",73,0)
 . . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",74,0)
 . . W !?21,START,"-",STOP,?36,TOTEX,?56,$J(MT,2),"   ",$J(HRS,5)
"RTN","PRSPCPP1",75,0)
 . . I RC'="" D  Q:QT!(QUIT)
"RTN","PRSPCPP1",76,0)
 . . . S RCEX=$P($G(^PRST(457.4,RC,0)),U,4)
"RTN","PRSPCPP1",77,0)
 . . . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",78,0)
 . . . W !?38,RCEX
"RTN","PRSPCPP1",79,0)
 . . Q:QT!(QUIT)
"RTN","PRSPCPP1",80,0)
 . Q:QT!(QUIT)
"RTN","PRSPCPP1",81,0)
 . ;
"RTN","PRSPCPP1",82,0)
 . ; Display any PTP or Supervisor Remarks
"RTN","PRSPCPP1",83,0)
 . S PTPRMKS=$P(DATA6,U,1) ; PTP Remarks
"RTN","PRSPCPP1",84,0)
 . I PTPRMKS'="" D  Q:QT
"RTN","PRSPCPP1",85,0)
 . . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",86,0)
 . . W !,"  PTP Remarks: ",PTPRMKS
"RTN","PRSPCPP1",87,0)
 . S SUPRMKS=$P(DATA6,U,2) ; Supervisor Remarks
"RTN","PRSPCPP1",88,0)
 . I SUPRMKS'="" D  Q:QT
"RTN","PRSPCPP1",89,0)
 . . I $Y>(IOSL-3) D PSE Q:QT  D HDR1
"RTN","PRSPCPP1",90,0)
 . . W !,"  Sup Remarks: ",SUPRMKS
"RTN","PRSPCPP1",91,0)
 Q
"RTN","PRSPCPP1",92,0)
 ;====================================================================
"RTN","PRSPCPP1",93,0)
HDR1 S SCRTTL="PT PHYSICIAN ESR FOR PP "_PPE
"RTN","PRSPCPP1",94,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,,,PPI)
"RTN","PRSPCPP1",95,0)
 W !?30,"Incomplete Days: "_$J(IDAYS,2)
"RTN","PRSPCPP1",96,0)
 W !,"Day",?14,"Tour Description",?69,"Status"
"RTN","PRSPCPP1",97,0)
 W !?21,"Postings",?36,"Time Code",?55,"Meal  Hours"
"RTN","PRSPCPP1",98,0)
 W !?38,"Remarks Code"
"RTN","PRSPCPP1",99,0)
 W !,DASH
"RTN","PRSPCPP1",100,0)
 Q
"RTN","PRSPCPP1",101,0)
 ;
"RTN","PRSPCPP1",102,0)
PSE I $E(IOST,1,2)="C-" D
"RTN","PRSPCPP1",103,0)
 . W !
"RTN","PRSPCPP1",104,0)
 . S DIR(0)="E",DIR("A")="Press RETURN to continue"
"RTN","PRSPCPP1",105,0)
 . D ^DIR K DIR
"RTN","PRSPCPP1",106,0)
 . I $D(DIRUT) S QT=1
"RTN","PRSPCPP1",107,0)
 Q:QT
"RTN","PRSPCPP1",108,0)
 W @IOF
"RTN","PRSPCPP1",109,0)
 Q
"RTN","PRSPCPPE")
0^31^B15175937^n/a
"RTN","PRSPCPPE",1,0)
PRSPCPPE ; HISC/MGD - DISPLAY PP ESR EXCEPTIONS ;05/18/05
"RTN","PRSPCPPE",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPCPPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPCPPE",4,0)
 Q
"RTN","PRSPCPPE",5,0)
 ;
"RTN","PRSPCPPE",6,0)
TK ; TimeKeeper Entry
"RTN","PRSPCPPE",7,0)
 S PRSTLV=2 D T0 Q
"RTN","PRSPCPPE",8,0)
SUP ; Supervisor Entry
"RTN","PRSPCPPE",9,0)
 S PRSTLV=3
"RTN","PRSPCPPE",10,0)
T0 D TOP ; print header
"RTN","PRSPCPPE",11,0)
 S USR="",SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSPCPPE",12,0)
 I SSN="" D  D EXIT Q
"RTN","PRSPCPPE",13,0)
 . W !!,*7,"Your SSN was not found in the New Person File!"
"RTN","PRSPCPPE",14,0)
 . S TLI=""
"RTN","PRSPCPPE",15,0)
 S USR=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSPCPPE",16,0)
 D TLL ; Loop to prompt for T&Ls
"RTN","PRSPCPPE",17,0)
 K DIC
"RTN","PRSPCPPE",18,0)
 I '$D(PRSTL) D EXIT Q
"RTN","PRSPCPPE",19,0)
 ; Prompt for Pay Period Date
"RTN","PRSPCPPE",20,0)
 S PPI=""
"RTN","PRSPCPPE",21,0)
 D DATE
"RTN","PRSPCPPE",22,0)
 I Y<1!(PPI<1) D EXIT Q
"RTN","PRSPCPPE",23,0)
 D DEVICE I POP D EXIT Q
"RTN","PRSPCPPE",24,0)
 I $D(IO("Q")) D  D EXIT Q
"RTN","PRSPCPPE",25,0)
 . S PRSAPGM="QEN^PRSPCPPE"
"RTN","PRSPCPPE",26,0)
 . S PRSALST="MDAT^PPE^PPI^PRSIEN^PRSTL("
"RTN","PRSPCPPE",27,0)
 . D QUE^PRSAUTL
"RTN","PRSPCPPE",28,0)
 ;
"RTN","PRSPCPPE",29,0)
QEN ; queued entry point
"RTN","PRSPCPPE",30,0)
 ;
"RTN","PRSPCPPE",31,0)
 ; Loop through T&Ls identifying PTP's w/ exceptions
"RTN","PRSPCPPE",32,0)
 D LOOP
"RTN","PRSPCPPE",33,0)
 ; Display Exceptions
"RTN","PRSPCPPE",34,0)
 D DISPLAY
"RTN","PRSPCPPE",35,0)
 D EXIT
"RTN","PRSPCPPE",36,0)
 Q
"RTN","PRSPCPPE",37,0)
 ;
"RTN","PRSPCPPE",38,0)
TLL ; Loop to allow enting more than one T&L unit
"RTN","PRSPCPPE",39,0)
 ; Select T&L from among those allowed
"RTN","PRSPCPPE",40,0)
 K DIC,PRSTL
"RTN","PRSPCPPE",41,0)
 S Z1=$S(PRSTLV="2":"T",PRSTLV="3":"S",1:"*")
"RTN","PRSPCPPE",42,0)
 S TLI=$O(^PRST(455.5,"A"_Z1,DUZ,0))
"RTN","PRSPCPPE",43,0)
 I TLI<1 D  Q
"RTN","PRSPCPPE",44,0)
 . W !!,*7,"No T&L Units have been assigned to you!"
"RTN","PRSPCPPE",45,0)
 . S TLI="^"
"RTN","PRSPCPPE",46,0)
 I $O(^PRST(455.5,"A"_Z1,DUZ,TLI))<1 D  Q
"RTN","PRSPCPPE",47,0)
 . S TLE=$P($G(^PRST(455.5,TLI,0)),"^",1)
"RTN","PRSPCPPE",48,0)
 . S PRSTL(TLE)="",TLI=""
"RTN","PRSPCPPE",49,0)
 S DIC("S")="I $D(^PRST(455.5,+Y,Z1,DUZ))"
"RTN","PRSPCPPE",50,0)
TL S DIC="^PRST(455.5,",DIC(0)="AEQM",DIC("A")="Select T&L Unit: "
"RTN","PRSPCPPE",51,0)
 F  D  Q:TLI=""!(TLI="^")
"RTN","PRSPCPPE",52,0)
 . W !
"RTN","PRSPCPPE",53,0)
 . I $D(PRSTL) S DIC("A")="Select Another T&L Unit: "
"RTN","PRSPCPPE",54,0)
 . D ^DIC
"RTN","PRSPCPPE",55,0)
 . I "^"[X!$D(DTOUT) S TLI="^" Q
"RTN","PRSPCPPE",56,0)
 . S TLI=+Y
"RTN","PRSPCPPE",57,0)
 . Q:'TLI
"RTN","PRSPCPPE",58,0)
 . S TLE=$P($G(^PRST(455.5,TLI,0)),"^",1)
"RTN","PRSPCPPE",59,0)
 . S PRSTL(TLE)=""
"RTN","PRSPCPPE",60,0)
 Q
"RTN","PRSPCPPE",61,0)
 ;
"RTN","PRSPCPPE",62,0)
DATE S %DT="AEPX",%DT("A")="Posting Date: ",%DT(0)=-DT W ! D ^%DT
"RTN","PRSPCPPE",63,0)
 Q:Y<1
"RTN","PRSPCPPE",64,0)
 S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPCPPE",65,0)
 Q:PPI<1
"RTN","PRSPCPPE",66,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPCPPE",67,0)
 S MDAT=$P($G(^PRST(458,PPI,1)),U,1)
"RTN","PRSPCPPE",68,0)
 Q
"RTN","PRSPCPPE",69,0)
 ;
"RTN","PRSPCPPE",70,0)
DEVICE W !
"RTN","PRSPCPPE",71,0)
 S %ZIS("A")="Select DEVICE: ",%ZIS="MQ"
"RTN","PRSPCPPE",72,0)
 D ^%ZIS Q:POP
"RTN","PRSPCPPE",73,0)
 ;
"RTN","PRSPCPPE",74,0)
LOOP ; Loop through T&Ls identifying PTP's w/ exceptions
"RTN","PRSPCPPE",75,0)
 K ^TMP($J,"PRSPCPPE DATA")
"RTN","PRSPCPPE",76,0)
 S TLE="",QT=0
"RTN","PRSPCPPE",77,0)
 F  S TLE=$O(PRSTL(TLE)) Q:TLE=""  D  Q:QT
"RTN","PRSPCPPE",78,0)
 . S TL="ATL"_TLE
"RTN","PRSPCPPE",79,0)
 . S NAME="",DATA1=$G(^PRST(458,PPI,1))
"RTN","PRSPCPPE",80,0)
 . F  S NAME=$O(^PRSPC(TL,NAME)) Q:NAME=""  D  Q:QT
"RTN","PRSPCPPE",81,0)
 . . S PRSIEN=$O(^PRSPC(TL,NAME,0))
"RTN","PRSPCPPE",82,0)
 . . Q:'PRSIEN
"RTN","PRSPCPPE",83,0)
 . . Q:'+$$MIEN^PRSPUT1(PRSIEN,MDAT)  ; Employee is not a PTP w/ Memo
"RTN","PRSPCPPE",84,0)
DAYCHK . . ; Loop through the days in the PP checking the ESR status
"RTN","PRSPCPPE",85,0)
 . . S (DAYCHK,IDAYS)=0
"RTN","PRSPCPPE",86,0)
 . . F DAY=1:1:14 Q:$P(DATA1,U,DAY)>DT  D
"RTN","PRSPCPPE",87,0)
 . . . S DAYCHK=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPCPPE",88,0)
 . . . Q:DAYCHK>3  ; Not an exception
"RTN","PRSPCPPE",89,0)
 . . . S IDAYS=IDAYS+1
"RTN","PRSPCPPE",90,0)
 . . Q:IDAYS=0
"RTN","PRSPCPPE",91,0)
 . . ; Found at least 1 incomplete ESR
"RTN","PRSPCPPE",92,0)
 . . S ^TMP($J,"PRSPCPPE DATA",$P(^PRSPC(PRSIEN,0),U,1))=PRSIEN_"^"_IDAYS
"RTN","PRSPCPPE",93,0)
 Q
"RTN","PRSPCPPE",94,0)
 ;
"RTN","PRSPCPPE",95,0)
DISPLAY ; Display ESR for entire Pay Period.  Sorted alphabetically
"RTN","PRSPCPPE",96,0)
 U IO
"RTN","PRSPCPPE",97,0)
 S QT=0,(NAME,PRSIEN)="",$P(DASH,"_",80)="_"
"RTN","PRSPCPPE",98,0)
 D LOOP^PRSPCPP1
"RTN","PRSPCPPE",99,0)
 D ^%ZISC K %ZIS,IOP
"RTN","PRSPCPPE",100,0)
 Q
"RTN","PRSPCPPE",101,0)
 ;
"RTN","PRSPCPPE",102,0)
 ;====================================================================
"RTN","PRSPCPPE",103,0)
TOP W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPCPPE",104,0)
 W !?27,"DISPLAY PP ESR EXCEPTIONS"
"RTN","PRSPCPPE",105,0)
 Q
"RTN","PRSPCPPE",106,0)
 ;
"RTN","PRSPCPPE",107,0)
 ;====================================================================
"RTN","PRSPCPPE",108,0)
 ;
"RTN","PRSPCPPE",109,0)
EXIT ; Clean up variables
"RTN","PRSPCPPE",110,0)
 K %DT,%ZIS,D1,DASH,DATA,DATA0,DATA1,DATA5,DATA6,DATA7,DAY,DAY1,DAYCHK
"RTN","PRSPCPPE",111,0)
 K DFN,DIR,DIRUT,DTOUT,EDLSM,HRS,IDAYS,MDAT,MIEN,MT,NAME,PDT,PG,POP
"RTN","PRSPCPPE",112,0)
 K PPE,PPI,PRSALST,PRSAPGM,PRSIEN,PRSTL,PRSTLV,PTPRMKS,QT,QUIT,RC,RCEX
"RTN","PRSPCPPE",113,0)
 K SCRTTL,SEG,SSN,START,STAT,STATEX,STOP,SUPRMKS,T1,T1EX,T2,T2EX
"RTN","PRSPCPPE",114,0)
 K TL,TLE,TLI,TLSCREEN,TOT,TOTEX,USR,X,Y,Z1
"RTN","PRSPCPPE",115,0)
 K ^TMP($J,"PRSPCPPE DATA")
"RTN","PRSPCPPE",116,0)
 Q
"RTN","PRSPDEM")
0^35^B36157537^n/a
"RTN","PRSPDEM",1,0)
PRSPDEM ; HISC/MGD - DISPLAY PT PHYSICIAN EXPIRING MEMORANDUMS ;06/28/05
"RTN","PRSPDEM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPDEM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPDEM",4,0)
PAY ; Payroll Entry
"RTN","PRSPDEM",5,0)
 N PPERIOD
"RTN","PRSPDEM",6,0)
 S PRSTLV=7
"RTN","PRSPDEM",7,0)
TOP W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPDEM",8,0)
 S TEXT="MEMORANDA EXPIRING WITHIN THE NEXT 30 DAYS"
"RTN","PRSPDEM",9,0)
 S SCRTTL=TEXT
"RTN","PRSPDEM",10,0)
 W !?19,TEXT
"RTN","PRSPDEM",11,0)
 ; Prompt for Expiration date
"RTN","PRSPDEM",12,0)
 W !!,"This report identifies PT Physician memorandums that will expire"
"RTN","PRSPDEM",13,0)
 W !,"within the next 30 days.  You may specify a date range other "
"RTN","PRSPDEM",14,0)
 W "than 30."
"RTN","PRSPDEM",15,0)
 W !
"RTN","PRSPDEM",16,0)
EDAT ;
"RTN","PRSPDEM",17,0)
 S %DT="AEFX",%DT("A")="Expiration Date: ",%DT("B")="T+30",%DT(0)=DT
"RTN","PRSPDEM",18,0)
 D ^%DT
"RTN","PRSPDEM",19,0)
 S EDAT=Y
"RTN","PRSPDEM",20,0)
 ;
"RTN","PRSPDEM",21,0)
PRCNT ; Prompt for optional off by percentage 
"RTN","PRSPDEM",22,0)
 W !!,"You have the option to enter an Off By Percentage that will only"
"RTN","PRSPDEM",23,0)
 W !,"list memorandums that are expiring within the specified date and"
"RTN","PRSPDEM",24,0)
 W !,"that are only off by more than the percentage you specify."
"RTN","PRSPDEM",25,0)
 W !!
"RTN","PRSPDEM",26,0)
 S DIR("A")="Would you like to specify an Off By Percentage "
"RTN","PRSPDEM",27,0)
 S DIR(0)="YO"
"RTN","PRSPDEM",28,0)
 S PRCNT=""
"RTN","PRSPDEM",29,0)
 D ^DIR K DIR
"RTN","PRSPDEM",30,0)
 I X="Y" D
"RTN","PRSPDEM",31,0)
 . W !
"RTN","PRSPDEM",32,0)
 . S DIR(0)="NO^1:100:0"
"RTN","PRSPDEM",33,0)
 . S DIR("A")="Select Off By Percentage "
"RTN","PRSPDEM",34,0)
 . D ^DIR
"RTN","PRSPDEM",35,0)
 . I X S PRCNT=X
"RTN","PRSPDEM",36,0)
 ;====================================================================
"RTN","PRSPDEM",37,0)
L1 W ! K IOP,%ZIS S %ZIS("A")="Select Device: ",%ZIS="MQ" D ^%ZIS K %ZIS,IOP Q:POP
"RTN","PRSPDEM",38,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPDEM",39,0)
 . S PRSAPGM="DIS^PRSPDEM",PRSALST="DT^EDAT^PRCNT^POT"
"RTN","PRSPDEM",40,0)
 . D QUE^PRSAUTL
"RTN","PRSPDEM",41,0)
 U IO D DIS
"RTN","PRSPDEM",42,0)
 ; pause screen when employee to prevent scroll (other users prompted)
"RTN","PRSPDEM",43,0)
 I $E(IOST,1,2)="C-",'QT,PRSTLV=1 S PG=PG+1 D H1
"RTN","PRSPDEM",44,0)
 D ^%ZISC K %ZIS,IOP Q
"RTN","PRSPDEM",45,0)
 ;
"RTN","PRSPDEM",46,0)
DIS ; Display Memorandum
"RTN","PRSPDEM",47,0)
 ;
"RTN","PRSPDEM",48,0)
 S (CNT,MIEN,PG,QT)=0
"RTN","PRSPDEM",49,0)
 F  S MIEN=$O(^PRST(458.7,MIEN)) Q:'MIEN  D  Q:QT
"RTN","PRSPDEM",50,0)
 . S DATA0=$G(^PRST(458.7,MIEN,0)),DATA4=$G(^PRST(458.7,MIEN,4))
"RTN","PRSPDEM",51,0)
 . S DATA3=$G(^PRST(458.7,MIEN,3))
"RTN","PRSPDEM",52,0)
 . Q:$P(DATA3,U,1)  ; Memo has been reconciled
"RTN","PRSPDEM",53,0)
 . ;
"RTN","PRSPDEM",54,0)
 . ; Check for Termination date beyond user selected expiration date
"RTN","PRSPDEM",55,0)
 . S PRSIEN=$P(DATA0,U,1),POT=$P(DATA0,U,17)
"RTN","PRSPDEM",56,0)
 . S TDAT=$P(DATA4,U,1),ENDAT=$P(DATA0,U,3)
"RTN","PRSPDEM",57,0)
 . Q:TDAT&(TDAT>EDAT)
"RTN","PRSPDEM",58,0)
 . ;
"RTN","PRSPDEM",59,0)
 . ; Check for end date beyond user selected expiration date
"RTN","PRSPDEM",60,0)
 . Q:TDAT=""&(ENDAT>EDAT)
"RTN","PRSPDEM",61,0)
 . ;
"RTN","PRSPDEM",62,0)
 . ; Quit if less that Percent Off Target
"RTN","PRSPDEM",63,0)
 . Q:PRCNT&(+$FN(POT,"T")<PRCNT)
"RTN","PRSPDEM",64,0)
 . ;
"RTN","PRSPDEM",65,0)
 . ; Update counter and display memo
"RTN","PRSPDEM",66,0)
 . S CNT=CNT+1
"RTN","PRSPDEM",67,0)
 . D DISPLAY
"RTN","PRSPDEM",68,0)
 . I $D(DIRUT) S QT=1 Q
"RTN","PRSPDEM",69,0)
 . D PSE
"RTN","PRSPDEM",70,0)
 ;
"RTN","PRSPDEM",71,0)
 Q:$D(DIRUT)
"RTN","PRSPDEM",72,0)
 W !!,"There were "_CNT_" PT Physician Memorandums expiring in the"
"RTN","PRSPDEM",73,0)
 W " date range specified"
"RTN","PRSPDEM",74,0)
 I PRCNT D
"RTN","PRSPDEM",75,0)
 . W !,"who were more than "_PRCNT_"% off target"
"RTN","PRSPDEM",76,0)
 W "."
"RTN","PRSPDEM",77,0)
 Q
"RTN","PRSPDEM",78,0)
 ;
"RTN","PRSPDEM",79,0)
DISPLAY ; Display memorandum information
"RTN","PRSPDEM",80,0)
 W @IOF
"RTN","PRSPDEM",81,0)
 S SCRTTL="DISPLAY PT PHYSICIAN MEMORANDA"
"RTN","PRSPDEM",82,0)
 S ARRAY="^TMP($J,""PRSPDM"",",INDEX=1
"RTN","PRSPDEM",83,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,ARRAY,INDEX)
"RTN","PRSPDEM",84,0)
 D MEM^PRSPUT1(PRSIEN,MIEN,ARRAY)
"RTN","PRSPDEM",85,0)
 D AL^PRSPUT3(PRSIEN,ARRAY)
"RTN","PRSPDEM",86,0)
 D PPSUM^PRSPUT2(PRSIEN,MIEN,ARRAY)
"RTN","PRSPDEM",87,0)
 I $E(IOST,1,2)="C-" D
"RTN","PRSPDEM",88,0)
 . S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPDEM",89,0)
 . I '$D(DIRUT) W @IOF
"RTN","PRSPDEM",90,0)
 Q:$D(DIRUT)
"RTN","PRSPDEM",91,0)
 ;
"RTN","PRSPDEM",92,0)
ESRCHK ; Check for any incomplete ESR within the memoranda.
"RTN","PRSPDEM",93,0)
 ;
"RTN","PRSPDEM",94,0)
 F I=1:1:26 D
"RTN","PRSPDEM",95,0)
 . S PPE=$P($G(^PRST(458.7,MIEN,9,I,0)),U)
"RTN","PRSPDEM",96,0)
 . I PPE="" S ^TMP($J,"INCESR","NO DATA")="" Q
"RTN","PRSPDEM",97,0)
 . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPDEM",98,0)
 . Q:'PPI  ; Pay Period is not opened yet.
"RTN","PRSPDEM",99,0)
 . S QUIT=0
"RTN","PRSPDEM",100,0)
 . F DAY=1:1:14 D  Q:QUIT
"RTN","PRSPDEM",101,0)
 . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPDEM",102,0)
 . . I ESRSTAT<5 S ^TMP($J,"INCESR",PPE)="",QUIT=1
"RTN","PRSPDEM",103,0)
 S INDEX=INDEX+1
"RTN","PRSPDEM",104,0)
 S TEXT=""
"RTN","PRSPDEM",105,0)
 D A1^PRSPUT1,A1^PRSPUT1 ; Blank Lines
"RTN","PRSPDEM",106,0)
 S TEXT="The following Pay Periods have days with incomplete daily ESRs: "
"RTN","PRSPDEM",107,0)
 D A1^PRSPUT1
"RTN","PRSPDEM",108,0)
 S (PPE,PPEX)=""
"RTN","PRSPDEM",109,0)
 F  S PPE=$O(^TMP($J,"INCESR",PPE)) Q:PPE=""  D
"RTN","PRSPDEM",110,0)
 . S PPEX=$S(PPEX="":PPE,1:PPEX_", "_PPE)
"RTN","PRSPDEM",111,0)
 S TEXT="" D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDEM",112,0)
 S TEXT=PPEX
"RTN","PRSPDEM",113,0)
 D A1^PRSPUT1
"RTN","PRSPDEM",114,0)
 K ^TMP($J,"INCESR")
"RTN","PRSPDEM",115,0)
 ;
"RTN","PRSPDEM",116,0)
 ; Load and display any HR Initial comments
"RTN","PRSPDEM",117,0)
 S MESSAGE=$G(^PRST(458.7,MIEN,1))
"RTN","PRSPDEM",118,0)
 I MESSAGE'="" D
"RTN","PRSPDEM",119,0)
 . S TEXT=""
"RTN","PRSPDEM",120,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDEM",121,0)
 . F J=1:1:3 D
"RTN","PRSPDEM",122,0)
 . . S HEADER=$S(J=1:"HR Initial Comments: ",1:"")
"RTN","PRSPDEM",123,0)
 . . D TEXT^PRSPDM(HEADER,.MESSAGE)
"RTN","PRSPDEM",124,0)
 . . D A1^PRSPUT1
"RTN","PRSPDEM",125,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDEM",126,0)
 ;
"RTN","PRSPDEM",127,0)
 ; Load and display Termination information if any
"RTN","PRSPDEM",128,0)
 S DATA4=$G(^PRST(458.7,MIEN,4))
"RTN","PRSPDEM",129,0)
 S TDAT=$P(DATA4,U,1),TERMBY=$P(DATA4,U,2),TERMDT=$P(DATA4,U,3)
"RTN","PRSPDEM",130,0)
 I TDAT'="" D
"RTN","PRSPDEM",131,0)
 . S Y=TDAT
"RTN","PRSPDEM",132,0)
 . D DD^%DT
"RTN","PRSPDEM",133,0)
 . S TDAT=Y
"RTN","PRSPDEM",134,0)
 . I TDAT'="" D
"RTN","PRSPDEM",135,0)
 . . S TEXT=""
"RTN","PRSPDEM",136,0)
 . . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDEM",137,0)
 . . S TEXT="    Termination date: "_TDAT
"RTN","PRSPDEM",138,0)
 . . D A1^PRSPUT1
"RTN","PRSPDEM",139,0)
 ;
"RTN","PRSPDEM",140,0)
 I TERMBY'="" D
"RTN","PRSPDEM",141,0)
 . S TERMBY=$P($G(^VA(200,TERMBY,0)),U,1)
"RTN","PRSPDEM",142,0)
 . S TEXT="       Terminated by: "_TERMBY
"RTN","PRSPDEM",143,0)
 . D A1^PRSPUT1
"RTN","PRSPDEM",144,0)
 ;
"RTN","PRSPDEM",145,0)
 I TERMDT'="" D
"RTN","PRSPDEM",146,0)
 . S Y=TERMDT
"RTN","PRSPDEM",147,0)
 . D DD^%DT
"RTN","PRSPDEM",148,0)
 . S TERMDT=Y
"RTN","PRSPDEM",149,0)
 . I TERMDT'="" D
"RTN","PRSPDEM",150,0)
 . . S TEXT="Date/Time Terminated: "_TERMDT
"RTN","PRSPDEM",151,0)
 . . D A1^PRSPUT1
"RTN","PRSPDEM",152,0)
 I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDEM",153,0)
 ;
"RTN","PRSPDEM",154,0)
 S MESSAGE=$G(^PRST(458.7,MIEN,4.1))
"RTN","PRSPDEM",155,0)
 I MESSAGE'="" D
"RTN","PRSPDEM",156,0)
 . S TEXT=""
"RTN","PRSPDEM",157,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDEM",158,0)
 . F J=1:1:3 D
"RTN","PRSPDEM",159,0)
 . . S HEADER=$S(J=1:"HR's Termination Comments: ",1:"")
"RTN","PRSPDEM",160,0)
 . . D TEXT^PRSPDM(HEADER,.MESSAGE)
"RTN","PRSPDEM",161,0)
 . . D A1^PRSPUT1
"RTN","PRSPDEM",162,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDEM",163,0)
 Q
"RTN","PRSPDEM",164,0)
PSE ; Pause for screen breaks
"RTN","PRSPDEM",165,0)
 Q:$E(IOST,1,2)'="C-"
"RTN","PRSPDEM",166,0)
 W !
"RTN","PRSPDEM",167,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPDEM",168,0)
 I $D(DIRUT) S QT=1
"RTN","PRSPDEM",169,0)
 W @IOF
"RTN","PRSPDEM",170,0)
 Q
"RTN","PRSPDEM",171,0)
 ;
"RTN","PRSPDEM",172,0)
 ;====================================================================
"RTN","PRSPDEM",173,0)
 ;
"RTN","PRSPDEM",174,0)
H1 I PG,$E(IOST,1,2)="C-" R !!,"Press RETURN to Continue.",X:DTIME S:'$T!(X["^") QT=1
"RTN","PRSPDEM",175,0)
 S PG=PG+1
"RTN","PRSPDEM",176,0)
 Q
"RTN","PRSPDEM",177,0)
EX ; Clean up variables
"RTN","PRSPDEM",178,0)
 K ARRAY,CNT,D,D1,DASH,DATA0,DATA2,DATA3,DATA31,DATA4,DATA41,DATA4580
"RTN","PRSPDEM",179,0)
 K DAY,DAY1,DFN,DIRUT,EDAT,ENDAT,ESRSTAT,HEADER,HRS,I,ICOM
"RTN","PRSPDEM",180,0)
 K IDAYS,IEN,INDEX,J,MESSAGE,MIEN,MT,PDT,PG,POP,POT,PPEX,PRCNT,PRSIEN
"RTN","PRSPDEM",181,0)
 K PTPRC,PTPRCOM,RECONBY,RECONDAT,SDAT,TDAT,TERMBY,TERMDT,TEXT,TL
"RTN","PRSPDEM",182,0)
 K PPE,PPI,PRSALST,PRSAPGM,PRSTLV,PTPRMKS,QUIT,QT,RC,RCEX,SCRTTL
"RTN","PRSPDEM",183,0)
 K SEG,SSN,START,STAT,STATEX,STOP,T1,T1EX,TLI,TLSCREEN,TOT,TOTEX
"RTN","PRSPDEM",184,0)
 K X,Y,%DT,%ZIS
"RTN","PRSPDEM",185,0)
 Q
"RTN","PRSPDESR")
0^29^B28832253^n/a
"RTN","PRSPDESR",1,0)
PRSPDESR ; HISC/MGD - Display PT Phy ESR ;05/01/05
"RTN","PRSPDESR",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPDESR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPDESR",4,0)
PAY ; Payroll Entry
"RTN","PRSPDESR",5,0)
 S PRSTLV=7
"RTN","PRSPDESR",6,0)
 D TOP ; print header
"RTN","PRSPDESR",7,0)
P1 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC("
"RTN","PRSPDESR",8,0)
 W ! D ^DIC S PRSIEN=+Y K DIC G:PRSIEN<1 EX
"RTN","PRSPDESR",9,0)
 S TLE=$P($G(^PRSPC(PRSIEN,0)),"^",8)
"RTN","PRSPDESR",10,0)
 S DIC="^PRST(458,",DIC(0)="AEQM",DIC("A")="Select PAY PERIOD: "
"RTN","PRSPDESR",11,0)
 W ! D ^DIC K DIC G:Y<1 EX
"RTN","PRSPDESR",12,0)
 S PPI=+Y
"RTN","PRSPDESR",13,0)
 S PPE=$P(Y,U,2)
"RTN","PRSPDESR",14,0)
 D L1 ;ask device
"RTN","PRSPDESR",15,0)
 G P1 ;ask for employee again
"RTN","PRSPDESR",16,0)
 ;
"RTN","PRSPDESR",17,0)
TK ; TimeKeeper Entry
"RTN","PRSPDESR",18,0)
 S PRSTLV=2 G T0
"RTN","PRSPDESR",19,0)
 ;
"RTN","PRSPDESR",20,0)
SUP ; Supervisor Entry
"RTN","PRSPDESR",21,0)
 S PRSTLV=3
"RTN","PRSPDESR",22,0)
T0 D TOP ; print header
"RTN","PRSPDESR",23,0)
 D ^PRSAUTL G:TLI<1 EX
"RTN","PRSPDESR",24,0)
T1 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC("
"RTN","PRSPDESR",25,0)
 S DIC("S")="I $P(^(0),""^"",8)=TLE" S D="ATL"_TLE W ! D IX^DIC
"RTN","PRSPDESR",26,0)
 S PRSIEN=+Y K DIC G:PRSIEN<1 EX
"RTN","PRSPDESR",27,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT(0)=3041001 W ! D ^%DT
"RTN","PRSPDESR",28,0)
 G:Y<1 EX
"RTN","PRSPDESR",29,0)
 S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPDESR",30,0)
 G EX:PPI<1
"RTN","PRSPDESR",31,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPDESR",32,0)
 D L1 ;ask device
"RTN","PRSPDESR",33,0)
 G T1 ;ask for employee again
"RTN","PRSPDESR",34,0)
 ;
"RTN","PRSPDESR",35,0)
EMP ; Employee Entry
"RTN","PRSPDESR",36,0)
 S PRSTLV=1 D TOP S PRSIEN="",SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSPDESR",37,0)
 I SSN'="" S PRSIEN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSPDESR",38,0)
 I 'PRSIEN W !!,*7,"Your SSN was not found in both the New Person & Employee File!" G EX
"RTN","PRSPDESR",39,0)
 S PRSIEN=PRSIEN
"RTN","PRSPDESR",40,0)
 S TLE=$P($G(^PRSPC(PRSIEN,0)),"^",8)
"RTN","PRSPDESR",41,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT(0)=3040101 W ! D ^%DT
"RTN","PRSPDESR",42,0)
 G:Y<1 EX
"RTN","PRSPDESR",43,0)
 S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPDESR",44,0)
 S MIEN=+$$MIEN^PRSPUT1(PRSIEN,D1)
"RTN","PRSPDESR",45,0)
 G EX:PPI<1
"RTN","PRSPDESR",46,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPDESR",47,0)
 D L1 G EX
"RTN","PRSPDESR",48,0)
 ;
"RTN","PRSPDESR",49,0)
TOP W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPDESR",50,0)
 W !?27,"DISPLAY PT PHYSICIAN ESR" Q
"RTN","PRSPDESR",51,0)
L1 W ! K IOP,%ZIS S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPDESR",52,0)
 D ^%ZIS K %ZIS,IOP
"RTN","PRSPDESR",53,0)
 Q:POP
"RTN","PRSPDESR",54,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPDESR",55,0)
 . S PRSAPGM="DIS^PRSPDESR",PRSALST="PRSIEN^TLE^PPI^PPE^DATA7"
"RTN","PRSPDESR",56,0)
 . D QUE^PRSAUTL
"RTN","PRSPDESR",57,0)
 U IO D DIS
"RTN","PRSPDESR",58,0)
 I $E(IOST,1,2)="C-",'QT D H1
"RTN","PRSPDESR",59,0)
 D ^%ZISC K %ZIS,IOP Q
"RTN","PRSPDESR",60,0)
 ;
"RTN","PRSPDESR",61,0)
DIS ; Display 14 days
"RTN","PRSPDESR",62,0)
 ;
"RTN","PRSPDESR",63,0)
 S PDT=$G(^PRST(458,PPI,2)),STAT=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),"^",2)
"RTN","PRSPDESR",64,0)
 S QT=0,DASH="",$P(DASH,"_",80)="_"
"RTN","PRSPDESR",65,0)
 S IDAYS=0
"RTN","PRSPDESR",66,0)
 F DAY=1:1:14 D  Q:QT
"RTN","PRSPDESR",67,0)
 . S DATA7=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7))
"RTN","PRSPDESR",68,0)
 . S STAT=$P(DATA7,U,1)    ; ESR Daily Status
"RTN","PRSPDESR",69,0)
 . I STAT<4 S IDAYS=IDAYS+1
"RTN","PRSPDESR",70,0)
 D HDR1
"RTN","PRSPDESR",71,0)
 ; Check to see if the PTP had a memorandum during this PP.
"RTN","PRSPDESR",72,0)
 S DAY1=$P($G(^PRST(458,PPI,1)),U,1)
"RTN","PRSPDESR",73,0)
 I +$$MIEN^PRSPUT1(PRSIEN,DAY1)=0 D  Q:QT
"RTN","PRSPDESR",74,0)
 . W !!,"This employee did not have an active Memorandum during this Pay Period."
"RTN","PRSPDESR",75,0)
 . S QT=1
"RTN","PRSPDESR",76,0)
 F DAY=1:1:14 D  Q:QT
"RTN","PRSPDESR",77,0)
 . S DATA0=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0))
"RTN","PRSPDESR",78,0)
 . S DATA5=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))
"RTN","PRSPDESR",79,0)
 . S DATA6=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,6))
"RTN","PRSPDESR",80,0)
 . S DATA7=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7))
"RTN","PRSPDESR",81,0)
 . S T1=$P(DATA0,U,2)      ; Tour #1
"RTN","PRSPDESR",82,0)
 . S T1EX=$S(T1:$P($G(^PRST(457.1,T1,0)),U,1),1:"") ; Tour #1 External
"RTN","PRSPDESR",83,0)
 . S STAT=$P(DATA7,U,1)    ; ESR Daily Status
"RTN","PRSPDESR",84,0)
 . S STATEX=$$EXTERNAL^DILFD(458.02,146,"",STAT)
"RTN","PRSPDESR",85,0)
 . W !,$P(PDT,U,DAY),?14,$J(T1,4)," ",T1EX,?68," ",STATEX
"RTN","PRSPDESR",86,0)
 . S T2=$P(DATA0,U,13)  ; Tour #2
"RTN","PRSPDESR",87,0)
 . I T2 D
"RTN","PRSPDESR",88,0)
 . . S T2EX=$S(T2:$P($G(^PRST(457.1,T2,0)),U,1),1:"") ; Tour #2 External
"RTN","PRSPDESR",89,0)
 . . W !?14,$J(T2,4)," ",T2EX
"RTN","PRSPDESR",90,0)
 . S EDLSM=$P(DATA7,U,3)   ; ESR DAY LAST SIGN METHOD
"RTN","PRSPDESR",91,0)
 . I EDLSM=2 S STATEX=STATEX_" - EA" ; Posted by Extended Absence
"RTN","PRSPDESR",92,0)
 . S QUIT=0
"RTN","PRSPDESR",93,0)
 . F SEG=1:5:31 D:$Y>(IOSL-3) HDR Q:QT!(QUIT)  D  Q:QT!(QUIT)
"RTN","PRSPDESR",94,0)
 . . S START=$P(DATA5,U,SEG)
"RTN","PRSPDESR",95,0)
 . . I START="",SEG>1 S QUIT=1
"RTN","PRSPDESR",96,0)
 . . Q:START=""
"RTN","PRSPDESR",97,0)
 . . S STOP=$P(DATA5,U,SEG+1),TOT=$P(DATA5,U,SEG+2)
"RTN","PRSPDESR",98,0)
 . . S TOTEX=""
"RTN","PRSPDESR",99,0)
 . . I TOT'="" D
"RTN","PRSPDESR",100,0)
 . . . S TOTEX=$O(^PRST(457.3,"B",TOT,0))
"RTN","PRSPDESR",101,0)
 . . . S TOTEX=$E($P($G(^PRST(457.3,TOTEX,0)),U,2),1,14)
"RTN","PRSPDESR",102,0)
 . . . S TOTEX=TOT_" "_TOTEX
"RTN","PRSPDESR",103,0)
 . . S RC=$P(DATA5,U,SEG+3),MT=$P(DATA5,U,SEG+4)
"RTN","PRSPDESR",104,0)
 . . S HRS=$$ELAPSE^PRSPESR2(MT,START,STOP)
"RTN","PRSPDESR",105,0)
 . . W !?21,START,"-",STOP,?36,TOTEX,?56,$J(MT,2),"   ",$J(HRS,5)
"RTN","PRSPDESR",106,0)
 . . D:$Y>(IOSL-3) HDR
"RTN","PRSPDESR",107,0)
 . . Q:QT!(QUIT)
"RTN","PRSPDESR",108,0)
 . . I RC'="" D  Q:QT!(QUIT)
"RTN","PRSPDESR",109,0)
 . . . S RCEX=$P($G(^PRST(457.4,RC,0)),U,4)
"RTN","PRSPDESR",110,0)
 . . . W !?38,RCEX
"RTN","PRSPDESR",111,0)
 . . . D:$Y>(IOSL-3) HDR
"RTN","PRSPDESR",112,0)
 . . Q:QT!(QUIT)
"RTN","PRSPDESR",113,0)
 . Q:QT
"RTN","PRSPDESR",114,0)
 . ;
"RTN","PRSPDESR",115,0)
 . ; Display any PTP or Supervisor Remarks
"RTN","PRSPDESR",116,0)
 . S PTPRMKS=$P(DATA6,U,1) ; PTP Remarks
"RTN","PRSPDESR",117,0)
 . I PTPRMKS'="" D  Q:QT!(QUIT)
"RTN","PRSPDESR",118,0)
 . . W !,"  PTP Remarks: ",PTPRMKS
"RTN","PRSPDESR",119,0)
 . . D:$Y>(IOSL-3) HDR
"RTN","PRSPDESR",120,0)
 . S SUPRMKS=$P(DATA6,U,2) ; Supervisor Remarks
"RTN","PRSPDESR",121,0)
 . I SUPRMKS'="" D  Q:QT!(QUIT)
"RTN","PRSPDESR",122,0)
 . . W !,"  Sup Remarks: ",SUPRMKS
"RTN","PRSPDESR",123,0)
 . . D:$Y>(IOSL-3) HDR
"RTN","PRSPDESR",124,0)
 Q
"RTN","PRSPDESR",125,0)
 ;====================================================================
"RTN","PRSPDESR",126,0)
HDR ; Display Header
"RTN","PRSPDESR",127,0)
 D H1 Q:QT  W @IOF
"RTN","PRSPDESR",128,0)
HDR1 S SCRTTL="PT PHYSICIAN ESR FOR PP "_PPE
"RTN","PRSPDESR",129,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,,,PPI)
"RTN","PRSPDESR",130,0)
 W !?30,"Incomplete Days: "_$J(IDAYS,2)
"RTN","PRSPDESR",131,0)
 W !,"Day",?14,"Tour Description",?69,"Status"
"RTN","PRSPDESR",132,0)
 W !?21,"Postings",?36,"Time Code",?55,"Meal  Hours"
"RTN","PRSPDESR",133,0)
 W !?38,"Remarks Code"
"RTN","PRSPDESR",134,0)
 W !,DASH
"RTN","PRSPDESR",135,0)
 Q
"RTN","PRSPDESR",136,0)
 ;
"RTN","PRSPDESR",137,0)
H1 I $E(IOST,1,2)="C-" D
"RTN","PRSPDESR",138,0)
 . W !
"RTN","PRSPDESR",139,0)
 . S DIR(0)="E",DIR("A")="Press RETURN to continue"
"RTN","PRSPDESR",140,0)
 . D ^DIR K DIR
"RTN","PRSPDESR",141,0)
 . I $D(DIRUT) S QT=1
"RTN","PRSPDESR",142,0)
 Q
"RTN","PRSPDESR",143,0)
EX ; Clean up variables
"RTN","PRSPDESR",144,0)
 K D,D1,DASH,DATA0,DATA5,DATA6,DATA7,DAY,DAY1,DIRUT,EDLSM,HRS,IDAYS
"RTN","PRSPDESR",145,0)
 K MIEN,MT,PDT,POP,PPE,PPI,PRSALST,PRSAPGM,PRSIEN,PRSTLV,PTPRMKS,QUIT
"RTN","PRSPDESR",146,0)
 K QT,RC,RCEX,SCRTTL,SEG,SSN,START,STAT,STATEX,SUPRMKS,STOP,T1,T1EX
"RTN","PRSPDESR",147,0)
 K T2,T2EX,TLE,TLI,TLSCREEN,TOT,TOTEX,X,Y,%DT,%ZIS
"RTN","PRSPDESR",148,0)
 Q
"RTN","PRSPDFM")
0^14^B44603242^n/a
"RTN","PRSPDFM",1,0)
PRSPDFM ;WOIFO/MGD - PTP DELETE FUTURE MEMORANDUM ;04/07/05
"RTN","PRSPDFM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPDFM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPDFM",4,0)
 ;The following routine will allow HR to delete a Part Time
"RTN","PRSPDFM",5,0)
 ; Physician's Memorandum of Service Level Expectations.
"RTN","PRSPDFM",6,0)
 ; For a memorandum to be eligible for deletion it must not have had
"RTN","PRSPDFM",7,0)
 ; any Pay Period processed.
"RTN","PRSPDFM",8,0)
 ;
"RTN","PRSPDFM",9,0)
 Q
"RTN","PRSPDFM",10,0)
MAIN ; Main Driver
"RTN","PRSPDFM",11,0)
 N STDAT,ENDAT,AHRS,ICOM,ESOK
"RTN","PRSPDFM",12,0)
 ; Prompt for Part Time Physician
"RTN","PRSPDFM",13,0)
 D PTP
"RTN","PRSPDFM",14,0)
 I Y'>0 D KILL Q
"RTN","PRSPDFM",15,0)
 S PRSIEN=+Y
"RTN","PRSPDFM",16,0)
 ; Find any memorandums that meet the deletion qualifications
"RTN","PRSPDFM",17,0)
 D MEM
"RTN","PRSPDFM",18,0)
 Q:'MIEN
"RTN","PRSPDFM",19,0)
 ; Display employee and memorandum information
"RTN","PRSPDFM",20,0)
 D DISPLAY
"RTN","PRSPDFM",21,0)
 ; Issue Delete Memorandum prompt
"RTN","PRSPDFM",22,0)
 W !!,"Delete this Memoranda: "
"RTN","PRSPDFM",23,0)
 S %=0 D YN^DICN
"RTN","PRSPDFM",24,0)
 I %'=1 D KILL Q
"RTN","PRSPDFM",25,0)
 ; Prompt for E-sig and update file
"RTN","PRSPDFM",26,0)
 D ESIG
"RTN","PRSPDFM",27,0)
 ;
"RTN","PRSPDFM",28,0)
 Q
"RTN","PRSPDFM",29,0)
 ;
"RTN","PRSPDFM",30,0)
PTP ; Prompt for Part Time Physician
"RTN","PRSPDFM",31,0)
 W !
"RTN","PRSPDFM",32,0)
 S DIC="^PRSPC(",DIC(0)="AEMQZ",DIC("A")="Select EMPLOYEE: "
"RTN","PRSPDFM",33,0)
 D ^DIC K DIC
"RTN","PRSPDFM",34,0)
 S PRSIEN=+Y
"RTN","PRSPDFM",35,0)
 Q
"RTN","PRSPDFM",36,0)
 ;
"RTN","PRSPDFM",37,0)
MEM ; Find any memorandums that meet the deletion qualifications
"RTN","PRSPDFM",38,0)
 N INDX,MEM,PPE,PPI459
"RTN","PRSPDFM",39,0)
 S (MEM,MIEN)=0,INDX=1
"RTN","PRSPDFM",40,0)
 F  S MEM=$O(^PRST(458.7,"B",PRSIEN,MEM)) Q:'MEM  D
"RTN","PRSPDFM",41,0)
 . S DATA=$G(^PRST(458.7,MEM,0))
"RTN","PRSPDFM",42,0)
 . Q:DATA=""
"RTN","PRSPDFM",43,0)
 . S START=$P(DATA,U,2),END=$P(DATA,U,3) ; Start Date, End Date
"RTN","PRSPDFM",44,0)
 . ; If the PP covering the Start Date is not opened no additional checks
"RTN","PRSPDFM",45,0)
 . ; are needed
"RTN","PRSPDFM",46,0)
 . S PPI=$P($G(^PRST(458,"AD",START)),U,1)
"RTN","PRSPDFM",47,0)
 . I PPI="" D  Q
"RTN","PRSPDFM",48,0)
 . . S MIEN=MEM,MEM(1)=MIEN_"^"_START_"^"_END_"^ACTIVE"
"RTN","PRSPDFM",49,0)
 . ; If the 1st PP covered by the memorandum is opened, check to see
"RTN","PRSPDFM",50,0)
 . ; what status it is in.
"RTN","PRSPDFM",51,0)
 . S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPDFM",52,0)
 . Q:PPE=""
"RTN","PRSPDFM",53,0)
 . S PPI459=$O(^PRST(459,"B",PPE,0))
"RTN","PRSPDFM",54,0)
 . ; Check to see if Payroll for the first PP of the memorandum has 
"RTN","PRSPDFM",55,0)
 . ; already been processed.
"RTN","PRSPDFM",56,0)
 . I PPI459 D  Q
"RTN","PRSPDFM",57,0)
 . . W !!,"The payroll for the first Pay Period covered by this Memorandum"
"RTN","PRSPDFM",58,0)
 . . W !,"has already been processed.  This memorandum will have to be"
"RTN","PRSPDFM",59,0)
 . . W !,"terminated and reconciled."
"RTN","PRSPDFM",60,0)
 . . S MIEN=-1
"RTN","PRSPDFM",61,0)
 . ; Checks for Payroll not yet processed.
"RTN","PRSPDFM",62,0)
 . S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)
"RTN","PRSPDFM",63,0)
 . I STATUS="X" D  Q
"RTN","PRSPDFM",64,0)
 . . W !!,"This PT Physician's timecard has already been transmitted."
"RTN","PRSPDFM",65,0)
 . . W !,"If you think there is enough time to retransmit their 8B, you may:"
"RTN","PRSPDFM",66,0)
 . . W !,"1. Have the Payroll Supervisor return the timecard"
"RTN","PRSPDFM",67,0)
 . . W !,"2. Delete the memorandum"
"RTN","PRSPDFM",68,0)
 . . W !,"3. Have the PTP complete a paper Subsidiary Record"
"RTN","PRSPDFM",69,0)
 . . W !,"4. Have the Supervisor review and approve the Subsidiary Record"
"RTN","PRSPDFM",70,0)
 . . W !,"5. Have the Timekeeper post each day in the Pay Period"
"RTN","PRSPDFM",71,0)
 . . W !,"6. Re-certify and re-transmit the timecard"
"RTN","PRSPDFM",72,0)
 . . W !!,"If there isn't enough time, the memorandum will have to be"
"RTN","PRSPDFM",73,0)
 . . W !,"terminated and reconciled."
"RTN","PRSPDFM",74,0)
 . . S MIEN=-1
"RTN","PRSPDFM",75,0)
 . ;
"RTN","PRSPDFM",76,0)
 . I STATUS="P" D  Q
"RTN","PRSPDFM",77,0)
 . . W !!,"This PT Physician's timecard has already been certified."
"RTN","PRSPDFM",78,0)
 . . W !,"If you think there is enough time, you may:"
"RTN","PRSPDFM",79,0)
 . . W !,"1. Have the Payroll Supervisor return the timecard"
"RTN","PRSPDFM",80,0)
 . . W !,"2. Delete the memorandum"
"RTN","PRSPDFM",81,0)
 . . W !,"3. Have the PTP complete a paper Subsidiary Record"
"RTN","PRSPDFM",82,0)
 . . W !,"4. Have the Supervisor review and approve the Subsidiary Record"
"RTN","PRSPDFM",83,0)
 . . W !,"5. Have the Timekeeper post each day in the Pay Period"
"RTN","PRSPDFM",84,0)
 . . W !,"6. Re-certify the timecard."
"RTN","PRSPDFM",85,0)
 . . W !!,"If there isn't enough time, the memorandum will have to be"
"RTN","PRSPDFM",86,0)
 . . W !,"terminated and reconciled."
"RTN","PRSPDFM",87,0)
 . . S MIEN=-1
"RTN","PRSPDFM",88,0)
 . ; The End Date for future memorandums may not be in #458 yet
"RTN","PRSPDFM",89,0)
 . I PPI="" D  Q
"RTN","PRSPDFM",90,0)
 . . S MEM(INDX)=MEM_"^"_START_"^"_END_"^ACTIVE",INDX=INDX+1
"RTN","PRSPDFM",91,0)
 . ; If the End Date is in #458 check the timecard status for that PP
"RTN","PRSPDFM",92,0)
 . ; Quit if Timecard status for the last PP of the mem is not (T)imekeeper
"RTN","PRSPDFM",93,0)
 . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="T"
"RTN","PRSPDFM",94,0)
 . S MEM(INDX)=MEM_"^"_START_"^"_END_"^ACTIVE",INDX=INDX+1
"RTN","PRSPDFM",95,0)
 ; If no memos meet the deletion qualifications
"RTN","PRSPDFM",96,0)
 I '$D(MEM(1)) D  Q
"RTN","PRSPDFM",97,0)
 . W !!,"No memorandums meet the deletion qualifications for the "
"RTN","PRSPDFM",98,0)
 . W "selected employee,"
"RTN","PRSPDFM",99,0)
 . S MIEN=0
"RTN","PRSPDFM",100,0)
 ; If only one memo
"RTN","PRSPDFM",101,0)
 I '$D(MEM(2)) S MIEN=$P(MEM(1),U,1) Q
"RTN","PRSPDFM",102,0)
 ; Display list if more than one
"RTN","PRSPDFM",103,0)
 I $D(MEM(2)) D
"RTN","PRSPDFM",104,0)
 . W !!," # ",?5,"STARTS          ENDS"
"RTN","PRSPDFM",105,0)
 . F MEM=1:1 Q:'$D(MEM(MEM))  D
"RTN","PRSPDFM",106,0)
 . . S DATA=MEM(MEM)
"RTN","PRSPDFM",107,0)
 . . S Y=$P(DATA,U,2)
"RTN","PRSPDFM",108,0)
 . . D DD^%DT
"RTN","PRSPDFM",109,0)
 . . S START=Y
"RTN","PRSPDFM",110,0)
 . . S Y=$P(DATA,U,3)
"RTN","PRSPDFM",111,0)
 . . D DD^%DT
"RTN","PRSPDFM",112,0)
 . . S END=Y
"RTN","PRSPDFM",113,0)
 . . W !!,MEM,?5,START," TO ",END
"RTN","PRSPDFM",114,0)
 . ;
"RTN","PRSPDFM",115,0)
ASK . ; Ask user to select which memorandum they want
"RTN","PRSPDFM",116,0)
 . S END="",END=$O(MEM(END),-1)
"RTN","PRSPDFM",117,0)
 . W !!,"Enter a number between 1 and ",END," :"
"RTN","PRSPDFM",118,0)
 . R ASK:DTIME
"RTN","PRSPDFM",119,0)
 . S ASK=$$UPPER^PRSRUTL(ASK)
"RTN","PRSPDFM",120,0)
 . Q:ASK=""!(ASK="^")
"RTN","PRSPDFM",121,0)
 . I '$D(MEM(ASK)) D  G ASK
"RTN","PRSPDFM",122,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPDFM",123,0)
 . S MIEN=$P(MEM(ASK),U,1)
"RTN","PRSPDFM",124,0)
 Q
"RTN","PRSPDFM",125,0)
 ;
"RTN","PRSPDFM",126,0)
DISPLAY ; Display memorandum info to validate the correct employee was chosen
"RTN","PRSPDFM",127,0)
 S SCRTTL="Delete PT Physician Memoranda"
"RTN","PRSPDFM",128,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL)
"RTN","PRSPDFM",129,0)
 S DATA=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPDFM",130,0)
 S X=$P(DATA,U,2)
"RTN","PRSPDFM",131,0)
 S START=$P(DATA,U,2),END=$P(DATA,U,3),AHRS=$P(DATA,U,4)
"RTN","PRSPDFM",132,0)
 S Y=START
"RTN","PRSPDFM",133,0)
 D DD^%DT
"RTN","PRSPDFM",134,0)
 S START=Y
"RTN","PRSPDFM",135,0)
 S Y=END
"RTN","PRSPDFM",136,0)
 D DD^%DT
"RTN","PRSPDFM",137,0)
 S END=Y
"RTN","PRSPDFM",138,0)
 W !!,"  Start Date: ",START
"RTN","PRSPDFM",139,0)
 W !,"    End Date: ",END
"RTN","PRSPDFM",140,0)
 W !,"Agreed Hours: ",AHRS,!!
"RTN","PRSPDFM",141,0)
 Q
"RTN","PRSPDFM",142,0)
 ;
"RTN","PRSPDFM",143,0)
ESIG ; Prompt for Electronic Signature and store fields in #458.7
"RTN","PRSPDFM",144,0)
 ;
"RTN","PRSPDFM",145,0)
 N ESOK,PPE
"RTN","PRSPDFM",146,0)
 D ^PRSAES
"RTN","PRSPDFM",147,0)
 I ESOK D
"RTN","PRSPDFM",148,0)
 . ; obtain first PP covered by the this memo
"RTN","PRSPDFM",149,0)
 . S PPE=$P($G(^PRST(458.7,MIEN,9,1,0)),U)
"RTN","PRSPDFM",150,0)
 . ;
"RTN","PRSPDFM",151,0)
 . ; Update #458.7 to delete the memo
"RTN","PRSPDFM",152,0)
 . S DA=MIEN,DIK="^PRST(458.7,"
"RTN","PRSPDFM",153,0)
 . D ^DIK
"RTN","PRSPDFM",154,0)
 . W !!,"Memorandum Deleted."
"RTN","PRSPDFM",155,0)
 . ;
"RTN","PRSPDFM",156,0)
 . ; loop thru PP to clear ESR and (if necesary) time card
"RTN","PRSPDFM",157,0)
 . Q:PPE=""
"RTN","PRSPDFM",158,0)
 . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPDFM",159,0)
 . Q:'PPI
"RTN","PRSPDFM",160,0)
 . S PPI=PPI-.01 ; init PPI to include 1st PP in loop
"RTN","PRSPDFM",161,0)
 . F  S PPI=$O(^PRST(458,PPI)) Q:'PPI  D
"RTN","PRSPDFM",162,0)
 . . F DAY=1:1:14 D
"RTN","PRSPDFM",163,0)
 . . . ; Check if Daily ESR with a status of APPROVED
"RTN","PRSPDFM",164,0)
 . . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPDFM",165,0)
 . . . I ESRSTAT=5 D  ; Clear Time Card posting information
"RTN","PRSPDFM",166,0)
 . . . . K ^PRST(458,PPI,"E",PRSIEN,"D",DAY,2),^(3),^(10)
"RTN","PRSPDFM",167,0)
 . . . ;
"RTN","PRSPDFM",168,0)
 . . . ; delete any ESR data
"RTN","PRSPDFM",169,0)
 . . . ; use fileman to delete ESR DAILY STATUS so x-ref will get updated
"RTN","PRSPDFM",170,0)
 . . . S PRSFDA(458.02,DAY_","_PRSIEN_","_PPI_",",146)="@"
"RTN","PRSPDFM",171,0)
 . . . D FILE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSPDFM",172,0)
 . . . ; delete ESR related fields
"RTN","PRSPDFM",173,0)
 . . . K ^PRST(458,PPI,"E",PRSIEN,"D",DAY,5),^(6),^(7)
"RTN","PRSPDFM",174,0)
 ;
"RTN","PRSPDFM",175,0)
KILL ; Clean up variables
"RTN","PRSPDFM",176,0)
 ;
"RTN","PRSPDFM",177,0)
 K ASK,D1,DA,DATA,DAY,DIK,DIR,DIRUT,END,ESRSTAT,INDX,MEM,MIEN
"RTN","PRSPDFM",178,0)
 K PPI,PRSIEN,PRSFDA,TDATE,TCOM,SCRTTL,START,STATUS,STOP,X,Y,%,%DT
"RTN","PRSPDFM",179,0)
 Q
"RTN","PRSPDM")
0^18^B55955782^n/a
"RTN","PRSPDM",1,0)
PRSPDM ; HISC/MGD - DISPLAY PT PHYSICIAN MEMORANDUM ;06/28/05
"RTN","PRSPDM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPDM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPDM",4,0)
PAY ; Payroll Entry
"RTN","PRSPDM",5,0)
 S PRSTLV=7
"RTN","PRSPDM",6,0)
 D TOP ; print header
"RTN","PRSPDM",7,0)
P1 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC("
"RTN","PRSPDM",8,0)
 W ! D ^DIC S (DFN,PRSIEN)=+Y K DIC G:DFN<1 EX
"RTN","PRSPDM",9,0)
 S TLE=$P($G(^PRSPC(DFN,0)),"^",8)
"RTN","PRSPDM",10,0)
 S DIC="^PRST(458,",DIC(0)="AEQM",DIC("A")="Select PAY PERIOD: "
"RTN","PRSPDM",11,0)
 W ! D ^DIC K DIC G:Y<1 EX
"RTN","PRSPDM",12,0)
 S PPI=+Y
"RTN","PRSPDM",13,0)
 S PPE=$P(Y,U,2)
"RTN","PRSPDM",14,0)
 D L1 ;ask device
"RTN","PRSPDM",15,0)
 G P1 ;ask for employee again
"RTN","PRSPDM",16,0)
 ;====================================================================
"RTN","PRSPDM",17,0)
TK ; TimeKeeper Entry
"RTN","PRSPDM",18,0)
 S PRSTLV=2 G T0
"RTN","PRSPDM",19,0)
 ;====================================================================
"RTN","PRSPDM",20,0)
SUP ; Supervisor Entry
"RTN","PRSPDM",21,0)
 S PRSTLV=3
"RTN","PRSPDM",22,0)
T0 D TOP ; print header
"RTN","PRSPDM",23,0)
 D ^PRSAUTL G:TLI<1 EX
"RTN","PRSPDM",24,0)
T1 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC("
"RTN","PRSPDM",25,0)
 S DIC("S")="I $P(^(0),""^"",8)=TLE" S D="ATL"_TLE W ! D IX^DIC
"RTN","PRSPDM",26,0)
 S (DFN,PRSIEN)=+Y K DIC G:DFN<1 EX
"RTN","PRSPDM",27,0)
 S %DT="AEPX",%DT("A")="Posting Date: " W ! D ^%DT
"RTN","PRSPDM",28,0)
 G:Y<1 EX
"RTN","PRSPDM",29,0)
 S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPDM",30,0)
 G EX:PPI<1
"RTN","PRSPDM",31,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPDM",32,0)
 D L1 ;ask device
"RTN","PRSPDM",33,0)
 ; 
"RTN","PRSPDM",34,0)
 G T1 ;ask for employee again
"RTN","PRSPDM",35,0)
 ;====================================================================
"RTN","PRSPDM",36,0)
EMP ; Employee Entry
"RTN","PRSPDM",37,0)
 S PRSTLV=1 D TOP S DFN="",SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSPDM",38,0)
 I SSN'="" S DFN=$O(^PRSPC("SSN",SSN,0)),PRSIEN=DFN
"RTN","PRSPDM",39,0)
 I 'DFN W !!,*7,"Your SSN was not found in both the New Person & Employee File!" G EX
"RTN","PRSPDM",40,0)
 S TLE=$P($G(^PRSPC(DFN,0)),"^",8)
"RTN","PRSPDM",41,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT(0)=3040101 W ! D ^%DT
"RTN","PRSPDM",42,0)
 G:Y<1 EX
"RTN","PRSPDM",43,0)
 S D1=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPDM",44,0)
 G EX:PPI<1
"RTN","PRSPDM",45,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPDM",46,0)
 D L1 G EX
"RTN","PRSPDM",47,0)
 ;====================================================================
"RTN","PRSPDM",48,0)
TOP W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPDM",49,0)
 W !?25,"DISPLAY PT PHYSICIAN MEMORANDA" Q
"RTN","PRSPDM",50,0)
L1 W ! K IOP,%ZIS S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPDM",51,0)
 D ^%ZIS K %ZIS,IOP
"RTN","PRSPDM",52,0)
 Q:POP
"RTN","PRSPDM",53,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPDM",54,0)
 . S PRSAPGM="DIS^PRSPDM",PRSALST="PRSIEN^TLE^PPE^PPI"
"RTN","PRSPDM",55,0)
 . D QUE^PRSAUTL
"RTN","PRSPDM",56,0)
 U IO D DIS
"RTN","PRSPDM",57,0)
 ; pause screen when employee to prevent scroll (other users prompted)
"RTN","PRSPDM",58,0)
 I $E(IOST,1,2)="C-",'QT,PRSTLV=1,'$D(DIRUT) S PG=PG+1 D H1
"RTN","PRSPDM",59,0)
 D ^%ZISC K %ZIS,IOP Q
"RTN","PRSPDM",60,0)
 ;====================================================================
"RTN","PRSPDM",61,0)
DIS ; Display Memorandum
"RTN","PRSPDM",62,0)
 ;
"RTN","PRSPDM",63,0)
 S PDT=$G(^PRST(458,PPI,2)),DAY1=$P($G(^PRST(458,PPI,1)),U,1)
"RTN","PRSPDM",64,0)
 S STAT=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),"^",2)
"RTN","PRSPDM",65,0)
 S MIEN=+$$MIEN^PRSPUT1(PRSIEN,DAY1),(PG,QT)=0
"RTN","PRSPDM",66,0)
 I 'MIEN D  Q
"RTN","PRSPDM",67,0)
 . W !!,"The employee did not have a memorandum during the date specified."
"RTN","PRSPDM",68,0)
 ;
"RTN","PRSPDM",69,0)
DISPLAY ; Display memorandum information
"RTN","PRSPDM",70,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPDM",71,0)
 S SCRTTL="DISPLAY PT PHYSICIAN MEMORANDA"
"RTN","PRSPDM",72,0)
 S ARRAY="^TMP($J,""PRSPDM"",",INDEX=1
"RTN","PRSPDM",73,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,ARRAY,INDEX,PPI)
"RTN","PRSPDM",74,0)
 D MEM^PRSPUT1(PRSIEN,MIEN,ARRAY)
"RTN","PRSPDM",75,0)
 D AL^PRSPUT3(PRSIEN,ARRAY)
"RTN","PRSPDM",76,0)
 D PPSUM^PRSPUT2(PRSIEN,MIEN,ARRAY)
"RTN","PRSPDM",77,0)
 Q:$D(DIRUT)
"RTN","PRSPDM",78,0)
 I $E(IOST,1,2)="C-" D
"RTN","PRSPDM",79,0)
 . S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR K DIR
"RTN","PRSPDM",80,0)
 . I '$D(DIRUT) W @IOF
"RTN","PRSPDM",81,0)
 Q:$D(DIRUT)
"RTN","PRSPDM",82,0)
 ;
"RTN","PRSPDM",83,0)
ESRCHK ; Check for any incomplete ESR within the memoranda.
"RTN","PRSPDM",84,0)
 ;
"RTN","PRSPDM",85,0)
 S QUIT=0
"RTN","PRSPDM",86,0)
 S PPIT=+$G(^PRST(458.7,MIEN,4)),PPIT=+$G(^PRST(458,"AD",PPIT))
"RTN","PRSPDM",87,0)
 F I=1:1:26 D
"RTN","PRSPDM",88,0)
 . S PPE=$P($G(^PRST(458.7,MIEN,9,I,0)),U)
"RTN","PRSPDM",89,0)
 . I PPE="" S ^TMP($J,"INCESR","NO DATA")="" S QUIT=1 Q
"RTN","PRSPDM",90,0)
 . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPDM",91,0)
 . Q:'PPI
"RTN","PRSPDM",92,0)
 . I PPIT,PPIT<PPI Q  ; Don't display PP ESR beyond termination of memo
"RTN","PRSPDM",93,0)
 . F DAY=1:1:14 D  Q:QUIT
"RTN","PRSPDM",94,0)
 . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPDM",95,0)
 . . I ESRSTAT<5 S ^TMP($J,"INCESR",PPE)="",QUIT=1
"RTN","PRSPDM",96,0)
 ;
"RTN","PRSPDM",97,0)
 ; List any PP exceptions
"RTN","PRSPDM",98,0)
 I $D(^TMP($J,"INCESR")) D
"RTN","PRSPDM",99,0)
 . S INDEX=INDEX+1
"RTN","PRSPDM",100,0)
 . S TEXT=""
"RTN","PRSPDM",101,0)
 . D A1^PRSPUT1,A1^PRSPUT1 ; Blank Lines
"RTN","PRSPDM",102,0)
 . S TEXT="The following Pay Periods have days with incomplete daily ESRs: "
"RTN","PRSPDM",103,0)
 . D A1^PRSPUT1
"RTN","PRSPDM",104,0)
 . S (PPE,PPEX)=""
"RTN","PRSPDM",105,0)
 . S TEXT="" D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",106,0)
 . F  S PPE=$O(^TMP($J,"INCESR",PPE)) Q:PPE=""  D
"RTN","PRSPDM",107,0)
 . . S PPEX=$S(PPEX="":PPE,1:PPEX_", "_PPE)
"RTN","PRSPDM",108,0)
 . S TEXT=PPEX
"RTN","PRSPDM",109,0)
 I '$D(^TMP($J,"INCESR")) D
"RTN","PRSPDM",110,0)
 . S TEXT="  There are no pay periods with incomplete daily ESRs."
"RTN","PRSPDM",111,0)
 D A1^PRSPUT1
"RTN","PRSPDM",112,0)
 K ^TMP($J,"INCESR")
"RTN","PRSPDM",113,0)
 ;
"RTN","PRSPDM",114,0)
 ; Load and display any HR Initial comments
"RTN","PRSPDM",115,0)
 I PRSTLV'=1 D
"RTN","PRSPDM",116,0)
 . S MESSAGE=$G(^PRST(458.7,MIEN,1))
"RTN","PRSPDM",117,0)
 . Q:MESSAGE=""
"RTN","PRSPDM",118,0)
 . S TEXT=""
"RTN","PRSPDM",119,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",120,0)
 . F J=1:1:3 D
"RTN","PRSPDM",121,0)
 . . S HEADER=$S(J=1:"HR Initial Comments: ",1:"")
"RTN","PRSPDM",122,0)
 . . D TEXT(HEADER,.MESSAGE)
"RTN","PRSPDM",123,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",124,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",125,0)
 ;
"RTN","PRSPDM",126,0)
 ; Load and display Termination information if any
"RTN","PRSPDM",127,0)
 I PRSTLV'=1 D
"RTN","PRSPDM",128,0)
 . S DATA4=$G(^PRST(458.7,MIEN,4))
"RTN","PRSPDM",129,0)
 . S TDAT=$P(DATA4,U,1),TERMBY=$P(DATA4,U,2),TERMDT=$P(DATA4,U,3)
"RTN","PRSPDM",130,0)
 . I TDAT'="" D
"RTN","PRSPDM",131,0)
 . . S Y=TDAT
"RTN","PRSPDM",132,0)
 . . D DD^%DT
"RTN","PRSPDM",133,0)
 . . S TDAT=Y
"RTN","PRSPDM",134,0)
 . . I TDAT'="" D
"RTN","PRSPDM",135,0)
 . . . S TEXT=""
"RTN","PRSPDM",136,0)
 . . . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",137,0)
 . . . S TEXT="    Termination date: "_TDAT
"RTN","PRSPDM",138,0)
 . . . D A1^PRSPUT1
"RTN","PRSPDM",139,0)
 . ;
"RTN","PRSPDM",140,0)
 . I TERMBY'="" D
"RTN","PRSPDM",141,0)
 . . S TERMBY=$P($G(^VA(200,TERMBY,0)),U,1)
"RTN","PRSPDM",142,0)
 . . S TEXT="       Terminated by: "_TERMBY
"RTN","PRSPDM",143,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",144,0)
 . ;
"RTN","PRSPDM",145,0)
 . I TERMDT'="" D
"RTN","PRSPDM",146,0)
 . . S Y=TERMDT
"RTN","PRSPDM",147,0)
 . . D DD^%DT
"RTN","PRSPDM",148,0)
 . . S TERMDT=Y
"RTN","PRSPDM",149,0)
 . . I TERMDT'="" D
"RTN","PRSPDM",150,0)
 . . . S TEXT="Date/Time Terminated: "_TERMDT
"RTN","PRSPDM",151,0)
 . . . D A1^PRSPUT1
"RTN","PRSPDM",152,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",153,0)
 . ;
"RTN","PRSPDM",154,0)
 . S MESSAGE=$G(^PRST(458.7,MIEN,4.1))
"RTN","PRSPDM",155,0)
 . Q:MESSAGE=""
"RTN","PRSPDM",156,0)
 . S TEXT=""
"RTN","PRSPDM",157,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",158,0)
 . F J=1:1:3 D
"RTN","PRSPDM",159,0)
 . . S HEADER=$S(J=1:"HR's Termination Comments: ",1:"")
"RTN","PRSPDM",160,0)
 . . D TEXT(HEADER,.MESSAGE)
"RTN","PRSPDM",161,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",162,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",163,0)
 ;
"RTN","PRSPDM",164,0)
 ; Load and display PTP's reconciliation choice and comments
"RTN","PRSPDM",165,0)
 S DATA2=$G(^PRST(458.7,MIEN,2))
"RTN","PRSPDM",166,0)
 S PTPRC=$P(DATA2,U,1),MESSAGE=$P(DATA2,U,2)
"RTN","PRSPDM",167,0)
 I PTPRC'="" D
"RTN","PRSPDM",168,0)
 . S TEXT=""
"RTN","PRSPDM",169,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",170,0)
 . S TEXT=$$EXTERNAL^DILFD(458.7,17,"",PTPRC)
"RTN","PRSPDM",171,0)
 . S TEXT="  PTP's Reconciliation Choice: "_TEXT
"RTN","PRSPDM",172,0)
 . D A1^PRSPUT1
"RTN","PRSPDM",173,0)
 I MESSAGE'="" D
"RTN","PRSPDM",174,0)
 . F J=1:1:3 D
"RTN","PRSPDM",175,0)
 . . S HEADER=$S(J=1:"PTP's Reconciliation Comments: ",1:"")
"RTN","PRSPDM",176,0)
 . . D TEXT(HEADER,.MESSAGE)
"RTN","PRSPDM",177,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",178,0)
 ;
"RTN","PRSPDM",179,0)
 ; Load and display HR's reconciliation info and comments
"RTN","PRSPDM",180,0)
 I PRSTLV'=1 D
"RTN","PRSPDM",181,0)
 . I $Y>(IOSL-7) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",182,0)
 . S DATA3=$G(^PRST(458.7,MIEN,3))
"RTN","PRSPDM",183,0)
 . S RECONBY=$P(DATA3,U,1),RECONDAT=$P(DATA3,U,2)
"RTN","PRSPDM",184,0)
 . I RECONBY'="" D
"RTN","PRSPDM",185,0)
 . . S TEXT=""
"RTN","PRSPDM",186,0)
 . . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",187,0)
 . . S RECONBY=$P($G(^VA(200,RECONBY,0)),U,1)
"RTN","PRSPDM",188,0)
 . . S TEXT="Reconciled by: "_RECONBY
"RTN","PRSPDM",189,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",190,0)
 . I $Y>(IOSL-5) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",191,0)
 . I RECONDAT'="" D
"RTN","PRSPDM",192,0)
 . . S Y=RECONDAT
"RTN","PRSPDM",193,0)
 . . D DD^%DT
"RTN","PRSPDM",194,0)
 . . S RECONDAT=Y
"RTN","PRSPDM",195,0)
 . . I RECONDAT'="" D
"RTN","PRSPDM",196,0)
 . . . S TEXT="Reconciled on: "_RECONDAT
"RTN","PRSPDM",197,0)
 . . . D A1^PRSPUT1
"RTN","PRSPDM",198,0)
 . I $Y>(IOSL-7) D PSE Q:$D(DIRUT)
"RTN","PRSPDM",199,0)
 ;
"RTN","PRSPDM",200,0)
 ; HR Reconciliation Comments
"RTN","PRSPDM",201,0)
 I PRSTLV'=1 D
"RTN","PRSPDM",202,0)
 . S MESSAGE=$G(^PRST(458.7,MIEN,3.1))
"RTN","PRSPDM",203,0)
 . Q:MESSAGE=""
"RTN","PRSPDM",204,0)
 . S TEXT=""
"RTN","PRSPDM",205,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPDM",206,0)
 . F J=1:1:3 D
"RTN","PRSPDM",207,0)
 . . S HEADER=$S(J=1:"HR's Reconciliation Comments: ",1:"")
"RTN","PRSPDM",208,0)
 . . D TEXT(HEADER,.MESSAGE)
"RTN","PRSPDM",209,0)
 . . D A1^PRSPUT1
"RTN","PRSPDM",210,0)
 Q
"RTN","PRSPDM",211,0)
 ;
"RTN","PRSPDM",212,0)
PSE ; Pause for screen breaks
"RTN","PRSPDM",213,0)
 Q:$E(IOST,1,2)'="C-"
"RTN","PRSPDM",214,0)
 W !
"RTN","PRSPDM",215,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR K DIR
"RTN","PRSPDM",216,0)
 W @IOF
"RTN","PRSPDM",217,0)
 Q
"RTN","PRSPDM",218,0)
 ;
"RTN","PRSPDM",219,0)
H1 I PG,$E(IOST,1,2)="C-" R !!,"Press RETURN to Continue.",X:DTIME S:'$T!(X["^") QT=1
"RTN","PRSPDM",220,0)
 S PG=PG+1
"RTN","PRSPDM",221,0)
 Q
"RTN","PRSPDM",222,0)
 ;
"RTN","PRSPDM",223,0)
TEXT(HEADER,MESSAGE) ;
"RTN","PRSPDM",224,0)
 N BREAK
"RTN","PRSPDM",225,0)
 S BREAK=0
"RTN","PRSPDM",226,0)
 I $L(HEADER)+$L(MESSAGE)<80 D  Q
"RTN","PRSPDM",227,0)
 . S TEXT=HEADER_MESSAGE
"RTN","PRSPDM",228,0)
 . S MESSAGE=""
"RTN","PRSPDM",229,0)
 F I=(80-$L(HEADER)):-1:0 D  Q:BREAK
"RTN","PRSPDM",230,0)
 . Q:$E(MESSAGE,I)'=" "
"RTN","PRSPDM",231,0)
 . S TEXT=HEADER_$E(MESSAGE,1,I)
"RTN","PRSPDM",232,0)
 . S MESSAGE=$E(MESSAGE,I+1,999)
"RTN","PRSPDM",233,0)
 . S BREAK=1
"RTN","PRSPDM",234,0)
 Q
"RTN","PRSPDM",235,0)
 ;
"RTN","PRSPDM",236,0)
EX ; Clean up variables
"RTN","PRSPDM",237,0)
 K ARRAY,D,D1,DASH,DATA0,DATA2,DATA3,DATA4,DAY
"RTN","PRSPDM",238,0)
 K DAY1,DFN,DIRUT,ESRSTAT,HRS,I,ICOM,IDAYS,INDEX,J,HEADER,MESSAGE
"RTN","PRSPDM",239,0)
 K MIEN,MT,PDT,PG,POP,PPE,PPEX,PPI,PPIT,PRSALST,PRSAPGM,PRSIEN,PRSTLV
"RTN","PRSPDM",240,0)
 K PTPRC,PTPRCOM,PTPRMKS,QUIT,QT,RC,RCEX,RECONBY,RECONDAT,SCRTTL,SEG
"RTN","PRSPDM",241,0)
 K SSN,START,STAT,STATEX,STOP,T1,T1EX,TDAT,TERMBY,TERMDT,TEXT,TLI,TLE
"RTN","PRSPDM",242,0)
 K TLSCREEN,TOT,TOTEX,X,Y,%DT,%ZIS
"RTN","PRSPDM",243,0)
 Q
"RTN","PRSPEAA")
0^5^B69144897^n/a
"RTN","PRSPEAA",1,0)
PRSPEAA ;WOIFO/SAB - Ext. Absence Autopost for PT Physician ;4/6/2005
"RTN","PRSPEAA",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAA",4,0)
 Q
"RTN","PRSPEAA",5,0)
 ;
"RTN","PRSPEAA",6,0)
PEAPP(PRSIEN,PPI,DAYN) ; Post Extended Absences for a Pay Period (or day)
"RTN","PRSPEAA",7,0)
 ; This API auto posts all extended absences for a specific employee
"RTN","PRSPEAA",8,0)
 ; and pay period.  It is called during the creation of an employee time
"RTN","PRSPEAA",9,0)
 ; card when a new pay period is opened or when an employee timecard is
"RTN","PRSPEAA",10,0)
 ; added to an existing pay period.
"RTN","PRSPEAA",11,0)
 ;
"RTN","PRSPEAA",12,0)
 ; Input
"RTN","PRSPEAA",13,0)
 ;   PRSIEN - Employee IEN (file 450), should be PTP with active memo
"RTN","PRSPEAA",14,0)
 ;   PPI    - Pay Period IEN (file 458)
"RTN","PRSPEAA",15,0)
 ;   DAYN   - (optional) Day # within PPI to only post that day
"RTN","PRSPEAA",16,0)
 ;
"RTN","PRSPEAA",17,0)
 ; Note: Timecard is assumed to be locked prior to calling this API.
"RTN","PRSPEAA",18,0)
 ;
"RTN","PRSPEAA",19,0)
 N EAIEN,EAY0,PEREND,PERSTR,PPD1,PPD14,PRSX,TDT,Y
"RTN","PRSPEAA",20,0)
 S DAYN=$G(DAYN)
"RTN","PRSPEAA",21,0)
 ;
"RTN","PRSPEAA",22,0)
 ; Determine pay period dates
"RTN","PRSPEAA",23,0)
 S Y=$G(^PRST(458,PPI,1))
"RTN","PRSPEAA",24,0)
 S PRSX=$S(DAYN:DAYN,1:1) ; if passed use day# instead of 1st day in PP
"RTN","PRSPEAA",25,0)
 S PPD1=$P(Y,U,PRSX) ; 1st day of PP
"RTN","PRSPEAA",26,0)
 S PRSX=$S(DAYN:DAYN,1:14) ; if passed use day# instead of last day in PP
"RTN","PRSPEAA",27,0)
 S PPD14=$P(Y,U,PRSX) ; Last day of PP
"RTN","PRSPEAA",28,0)
 K PRSX
"RTN","PRSPEAA",29,0)
 Q:PPD1=""
"RTN","PRSPEAA",30,0)
 ;Q:PPD14<DT  ; EA only autoposted from curent date and forward
"RTN","PRSPEAA",31,0)
 ;
"RTN","PRSPEAA",32,0)
 ; loop thru extended absences for employee by reverse end date until
"RTN","PRSPEAA",33,0)
 ; end date is before the pay period or no more end dates
"RTN","PRSPEAA",34,0)
 S TDT=9999999 ; initial to date for loop
"RTN","PRSPEAA",35,0)
 F  S TDT=$O(^PRST(458.4,"AEE",PRSIEN,TDT),-1) Q:'TDT!(TDT<PPD1)  D
"RTN","PRSPEAA",36,0)
 . ; loop thru extended absences
"RTN","PRSPEAA",37,0)
 . S EAIEN=0
"RTN","PRSPEAA",38,0)
 . S EAIEN=$O(^PRST(458.4,"AEE",PRSIEN,TDT,EAIEN)) Q:'EAIEN  D
"RTN","PRSPEAA",39,0)
 . . S EAY0=$G(^PRST(458.4,EAIEN,0)) ; extended absense 0 node
"RTN","PRSPEAA",40,0)
 . . Q:$P(EAY0,U)>PPD14  ; skip if start date after pay period
"RTN","PRSPEAA",41,0)
 . . Q:$P(EAY0,U,6)'="A"  ; skip if status not active
"RTN","PRSPEAA",42,0)
 . . ;
"RTN","PRSPEAA",43,0)
 . . ; extended absence overlaps the pay period
"RTN","PRSPEAA",44,0)
 . . ; determine start and end dates to post as absence
"RTN","PRSPEAA",45,0)
 . . ;   period end is lesser of absence to date and PP end
"RTN","PRSPEAA",46,0)
 . . S PEREND=$S($P(EAY0,U,2)<PPD14:$P(EAY0,U,2),1:PPD14)
"RTN","PRSPEAA",47,0)
 . . ;Q:PEREND<DT  ; period ended before current day so can't auto post
"RTN","PRSPEAA",48,0)
 . . ;   period start is greater of absence from date and PP start
"RTN","PRSPEAA",49,0)
 . . S PERSTR=$S($P(EAY0,U)>PPD1:$P(EAY0,U),1:PPD1)
"RTN","PRSPEAA",50,0)
 . . ;I PERSTR<DT S PERSTR=DT ; don't auto post EA to days before current
"RTN","PRSPEAA",51,0)
 . . ;
"RTN","PRSPEAA",52,0)
 . . ; call API to post absence to appropriate ESR days
"RTN","PRSPEAA",53,0)
 . . D PEA(PRSIEN,PERSTR,PEREND)
"RTN","PRSPEAA",54,0)
 Q
"RTN","PRSPEAA",55,0)
 ;
"RTN","PRSPEAA",56,0)
CEA(PRSIEN,S1,E1,S2,E2) ; Update ESR when Extended Absence is changed
"RTN","PRSPEAA",57,0)
 ; This API updates the ESRs when the date range of an extended
"RTN","PRSPEAA",58,0)
 ; absence is changed.
"RTN","PRSPEAA",59,0)
 ;
"RTN","PRSPEAA",60,0)
 ; input
"RTN","PRSPEAA",61,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAA",62,0)
 ;   S1     - old Start Date (FileMan internal)
"RTN","PRSPEAA",63,0)
 ;   E1     - old End Date (FileMan internal)
"RTN","PRSPEAA",64,0)
 ;   S2     - new Start Date (FileMan internal)
"RTN","PRSPEAA",65,0)
 ;   E2     - new End Date (FileMan internal)
"RTN","PRSPEAA",66,0)
 ;
"RTN","PRSPEAA",67,0)
 Q:'$G(PRSIEN)
"RTN","PRSPEAA",68,0)
 Q:'$G(S1)
"RTN","PRSPEAA",69,0)
 Q:'$G(E1)
"RTN","PRSPEAA",70,0)
 Q:'$G(S2)
"RTN","PRSPEAA",71,0)
 Q:'$G(E2)
"RTN","PRSPEAA",72,0)
 ;
"RTN","PRSPEAA",73,0)
 N X1,X2
"RTN","PRSPEAA",74,0)
 ;
"RTN","PRSPEAA",75,0)
 ; post/unpost impacted ranges
"RTN","PRSPEAA",76,0)
 ;
"RTN","PRSPEAA",77,0)
 ; if new start is less than old start then days from new start to
"RTN","PRSPEAA",78,0)
 ; lesser of new end and old start-1 were changed from not covered to
"RTN","PRSPEAA",79,0)
 ;  covered.
"RTN","PRSPEAA",80,0)
 I S2<S1 D
"RTN","PRSPEAA",81,0)
 . S X1=S2
"RTN","PRSPEAA",82,0)
 . S X2=$S(E2<(S1-1):E2,1:S1-1)
"RTN","PRSPEAA",83,0)
 . D PEA(PRSIEN,X1,X2)
"RTN","PRSPEAA",84,0)
 ;
"RTN","PRSPEAA",85,0)
 ; if new start is greater than old start then days from old start to
"RTN","PRSPEAA",86,0)
 ; lesser of old end and new start-1 were changed from covered to not
"RTN","PRSPEAA",87,0)
 ; covered.
"RTN","PRSPEAA",88,0)
 I S2>S1 D
"RTN","PRSPEAA",89,0)
 . S X1=S1
"RTN","PRSPEAA",90,0)
 . S X2=$S(E1<(S2-1):E1,1:S2-1)
"RTN","PRSPEAA",91,0)
 . D UEA(PRSIEN,X1,X2)
"RTN","PRSPEAA",92,0)
 ;
"RTN","PRSPEAA",93,0)
 ; if new end is greater than old end then days from greater of old
"RTN","PRSPEAA",94,0)
 ; end+1 and new start to new end were changed from not covered to
"RTN","PRSPEAA",95,0)
 ; covered.
"RTN","PRSPEAA",96,0)
 I E2>E1 D
"RTN","PRSPEAA",97,0)
 . S X1=$S(E1+1>S2:E1+1,1:S2)
"RTN","PRSPEAA",98,0)
 . S X2=E2
"RTN","PRSPEAA",99,0)
 . D PEA(PRSIEN,X1,X2)
"RTN","PRSPEAA",100,0)
 ;
"RTN","PRSPEAA",101,0)
 ; if new end is less than old end then days from greater of new end+1
"RTN","PRSPEAA",102,0)
 ; and old start to old end were changed from covered to not covered.
"RTN","PRSPEAA",103,0)
 I E2<E1 D
"RTN","PRSPEAA",104,0)
 . S X1=$S(E2+1>S1:E2+1,1:S1)
"RTN","PRSPEAA",105,0)
 . S X2=E1
"RTN","PRSPEAA",106,0)
 . D UEA(PRSIEN,X1,X2)
"RTN","PRSPEAA",107,0)
 ;
"RTN","PRSPEAA",108,0)
 Q
"RTN","PRSPEAA",109,0)
 ;
"RTN","PRSPEAA",110,0)
PEA(PRSIEN,PERSTR,PEREND) ; Post Extended Absence
"RTN","PRSPEAA",111,0)
 ; Called during open next pay period process (by PEAPP above) to post
"RTN","PRSPEAA",112,0)
 ;   one extended absence to a single pay period.
"RTN","PRSPEAA",113,0)
 ; Called by Enter option to post one new extended absence to all
"RTN","PRSPEAA",114,0)
 ;   opened pay periods.
"RTN","PRSPEAA",115,0)
 ; Called by Edit option (by CEA above) to post one extended
"RTN","PRSPEAA",116,0)
 ;   absence to all opened pay periods when an extended absence is
"RTN","PRSPEAA",117,0)
 ;   edited such that some days originally not covered by the absence
"RTN","PRSPEAA",118,0)
 ;   are now covered.
"RTN","PRSPEAA",119,0)
 ; Input
"RTN","PRSPEAA",120,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAA",121,0)
 ;   PERSTR - Start of absence period to post (FileMan date)
"RTN","PRSPEAA",122,0)
 ;   PEREND - End of absence period to post (FileMan date)
"RTN","PRSPEAA",123,0)
 ; Output
"RTN","PRSPEAA",124,0)
 ;   None
"RTN","PRSPEAA",125,0)
 ;
"RTN","PRSPEAA",126,0)
 ; Note: All applicable timecards are assumed to be locked prior to
"RTN","PRSPEAA",127,0)
 ;       calling this API.
"RTN","PRSPEAA",128,0)
 ;
"RTN","PRSPEAA",129,0)
 Q:('$G(PRSIEN))!($G(PERSTR)'?7N)!($G(PEREND)'?7N)  ; required inputs
"RTN","PRSPEAA",130,0)
 N D1,DAY,EPP4Y,PP4Y,PPDN,PPDNB,PPDTB,PPDNE,PPDTE,PPE,PPI,PRSFDA,SPP4Y,Y
"RTN","PRSPEAA",131,0)
 ;
"RTN","PRSPEAA",132,0)
 ; determine starting and ending pay periods
"RTN","PRSPEAA",133,0)
 S D1=PERSTR D PP^PRSAPPU S SPP4Y=PP4Y
"RTN","PRSPEAA",134,0)
 S D1=PEREND D PP^PRSAPPU S EPP4Y=PP4Y
"RTN","PRSPEAA",135,0)
 Q:SPP4Y=""
"RTN","PRSPEAA",136,0)
 Q:EPP4Y=""
"RTN","PRSPEAA",137,0)
 ;
"RTN","PRSPEAA",138,0)
 ; loop thru pay periods
"RTN","PRSPEAA",139,0)
 S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPEAA",140,0)
 F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D
"RTN","PRSPEAA",141,0)
 . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPEAA",142,0)
 . ; quit if pay period not covered by memo
"RTN","PRSPEAA",143,0)
 . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPEAA",144,0)
 . Q:$$MIEN^PRSPUT1(PRSIEN,D1)'>0
"RTN","PRSPEAA",145,0)
 . ;
"RTN","PRSPEAA",146,0)
 . ; determine begin and end day numbers within pay period
"RTN","PRSPEAA",147,0)
 . S Y=$G(^PRST(458,PPI,1))
"RTN","PRSPEAA",148,0)
 . ; begin day is greater of period start date and 1st PP day
"RTN","PRSPEAA",149,0)
 . S PPDTB=$S($P(Y,U,1)>PERSTR:$P(Y,U,1),1:PERSTR)
"RTN","PRSPEAA",150,0)
 . S PPDNB=$P($G(^PRST(458,"AD",PPDTB)),U,2) ; begin day number in PP
"RTN","PRSPEAA",151,0)
 . ; end day is lesser of period end date and last PP day
"RTN","PRSPEAA",152,0)
 . S PPDTE=$S(PEREND>$P(Y,U,14):$P(Y,U,14),1:PEREND)
"RTN","PRSPEAA",153,0)
 . S PPDNE=$P($G(^PRST(458,"AD",PPDTE)),U,2) ; end day number in PP
"RTN","PRSPEAA",154,0)
 . ;
"RTN","PRSPEAA",155,0)
 . ; loop thru applicable days in PP
"RTN","PRSPEAA",156,0)
 . S PPDN=PPDNB-1 ; initial PP day number for loop
"RTN","PRSPEAA",157,0)
 . F  S PPDN=$O(^PRST(458,PPI,"E",PRSIEN,"D",PPDN)) Q:'PPDN!(PPDN>PPDNE)  D
"RTN","PRSPEAA",158,0)
 . . ; skip day if not a scheduled tour
"RTN","PRSPEAA",159,0)
 . . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,1)),U)=""
"RTN","PRSPEAA",160,0)
 . . ; skip day if regular time already posted to ESR
"RTN","PRSPEAA",161,0)
 . . Q:$G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))["RG"
"RTN","PRSPEAA",162,0)
 . . ; skip day if ESR already signed or approved
"RTN","PRSPEAA",163,0)
 . . Q:"^4^5^"[(U_$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U)_U)
"RTN","PRSPEAA",164,0)
 . . ;
"RTN","PRSPEAA",165,0)
 . . ; mark ESR day as signed
"RTN","PRSPEAA",166,0)
 . . K PRSFDA
"RTN","PRSPEAA",167,0)
 . . S IENS=PPDN_","_PRSIEN_","_PPI_","
"RTN","PRSPEAA",168,0)
 . . S PRSFDA(458.02,IENS,146)="4" ; status = signed
"RTN","PRSPEAA",169,0)
 . . S PRSFDA(458.02,IENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPEAA",170,0)
 . . S PRSFDA(458.02,IENS,149)="2" ; signed method = extended absence
"RTN","PRSPEAA",171,0)
 . . D FILE^DIE("","PRSFDA") D MSG^DIALOG()
"RTN","PRSPEAA",172,0)
 ;
"RTN","PRSPEAA",173,0)
 Q
"RTN","PRSPEAA",174,0)
 ;
"RTN","PRSPEAA",175,0)
UEA(PRSIEN,PERSTR,PEREND) ; Unpost Extended Absence
"RTN","PRSPEAA",176,0)
 ; Called by Cancel option to unpost one new extended absence from
"RTN","PRSPEAA",177,0)
 ;   opened pay periods.
"RTN","PRSPEAA",178,0)
 ; Called by Edit option (by CEA above) to unpost one extended
"RTN","PRSPEAA",179,0)
 ;   absence to all opened pay periods when an extended absence is
"RTN","PRSPEAA",180,0)
 ;   edited such that some days originally covered by the absence
"RTN","PRSPEAA",181,0)
 ;   are now not covered.
"RTN","PRSPEAA",182,0)
 ; Input
"RTN","PRSPEAA",183,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAA",184,0)
 ;   PERSTR - Start of absence period (FileMan date)
"RTN","PRSPEAA",185,0)
 ;   PEREND - End of absence period (FileMan date)
"RTN","PRSPEAA",186,0)
 ; Output
"RTN","PRSPEAA",187,0)
 ; 
"RTN","PRSPEAA",188,0)
 ; Note: All applicable timecards are assumed to be locked prior to
"RTN","PRSPEAA",189,0)
 ;       calling this API.
"RTN","PRSPEAA",190,0)
 ;
"RTN","PRSPEAA",191,0)
 Q:('$G(PRSIEN))!($G(PERSTR)'?7N)!($G(PEREND)'?7N)  ; required inputs
"RTN","PRSPEAA",192,0)
 N D1,DAY,EPP4Y,PP4Y,PPDN,PPDNB,PPDTB,PPDNE,PPDTE,PPE,PPI,PRSFDA,SPP4Y,Y
"RTN","PRSPEAA",193,0)
 ;
"RTN","PRSPEAA",194,0)
 ; determine starting and ending pay periods
"RTN","PRSPEAA",195,0)
 S D1=PERSTR D PP^PRSAPPU S SPP4Y=PP4Y
"RTN","PRSPEAA",196,0)
 S D1=PEREND D PP^PRSAPPU S EPP4Y=PP4Y
"RTN","PRSPEAA",197,0)
 Q:SPP4Y=""
"RTN","PRSPEAA",198,0)
 Q:EPP4Y=""
"RTN","PRSPEAA",199,0)
 ;
"RTN","PRSPEAA",200,0)
 ; loop thru pay periods
"RTN","PRSPEAA",201,0)
 S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPEAA",202,0)
 F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D
"RTN","PRSPEAA",203,0)
 . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPEAA",204,0)
 . ; quit if pay period not covered by memo
"RTN","PRSPEAA",205,0)
 . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPEAA",206,0)
 . Q:$$MIEN^PRSPUT1(PRSIEN,D1)'>0
"RTN","PRSPEAA",207,0)
 . ;
"RTN","PRSPEAA",208,0)
 . ; determine begin and end day numbers within pay period
"RTN","PRSPEAA",209,0)
 . S Y=$G(^PRST(458,PPI,1))
"RTN","PRSPEAA",210,0)
 . ; begin day is greater of period start date and 1st PP day
"RTN","PRSPEAA",211,0)
 . S PPDTB=$S($P(Y,U,1)>PERSTR:$P(Y,U,1),1:PERSTR)
"RTN","PRSPEAA",212,0)
 . S PPDNB=$P($G(^PRST(458,"AD",PPDTB)),U,2) ; begin day number in PP
"RTN","PRSPEAA",213,0)
 . ; end day is lesser of period end date and last PP day
"RTN","PRSPEAA",214,0)
 . S PPDTE=$S(PEREND>$P(Y,U,14):$P(Y,U,14),1:PEREND)
"RTN","PRSPEAA",215,0)
 . S PPDNE=$P($G(^PRST(458,"AD",PPDTE)),U,2) ; end day number in PP
"RTN","PRSPEAA",216,0)
 . ;
"RTN","PRSPEAA",217,0)
 . ; loop thru applicable days in PP
"RTN","PRSPEAA",218,0)
 . S PPDN=PPDNB-1 ; initial PP day number for loop
"RTN","PRSPEAA",219,0)
 . F  S PPDN=$O(^PRST(458,PPI,"E",PRSIEN,"D",PPDN)) Q:'PPDN!(PPDN>PPDNE)  D
"RTN","PRSPEAA",220,0)
 . . ; skip day if not a scheduled tour
"RTN","PRSPEAA",221,0)
 . . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,1)),U)=""
"RTN","PRSPEAA",222,0)
 . . ; skip day if regular time already posted to ESR
"RTN","PRSPEAA",223,0)
 . . Q:$G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))["RG"
"RTN","PRSPEAA",224,0)
 . . ; skip day if ESR not signed or approved
"RTN","PRSPEAA",225,0)
 . . Q:"^4^5^"'[(U_$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U)_U)
"RTN","PRSPEAA",226,0)
 . . ; skip day if ESR was not auto signed by extended absence
"RTN","PRSPEAA",227,0)
 . . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U,3)'=2
"RTN","PRSPEAA",228,0)
 . . ;
"RTN","PRSPEAA",229,0)
 . . ; if ESR status was approved then remove the time card day posting
"RTN","PRSPEAA",230,0)
 . . I $P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U)=5 S X=$$CLRTCDY^PRSPSAPU(PPI,PRSIEN,PPDN) K X
"RTN","PRSPEAA",231,0)
 . . ;
"RTN","PRSPEAA",232,0)
 . . ; update ESR day
"RTN","PRSPEAA",233,0)
 . . K PRSFDA
"RTN","PRSPEAA",234,0)
 . . S IENS=PPDN_","_PRSIEN_","_PPI_","
"RTN","PRSPEAA",235,0)
 . . S PRSFDA(458.02,IENS,146)=$S($TR($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5)),"^")'="":2,1:1) ; status = pending (if time posted) or not started
"RTN","PRSPEAA",236,0)
 . . S PRSFDA(458.02,IENS,147)="@" ; remove signed d/t stamp
"RTN","PRSPEAA",237,0)
 . . S PRSFDA(458.02,IENS,149)="@" ; remove last signed method
"RTN","PRSPEAA",238,0)
 . . D FILE^DIE("","PRSFDA") D MSG^DIALOG()
"RTN","PRSPEAA",239,0)
 ;
"RTN","PRSPEAA",240,0)
 Q
"RTN","PRSPEAA",241,0)
 ;
"RTN","PRSPEAA",242,0)
 ;PRSPEAA
"RTN","PRSPEAD")
0^10^B2441712^n/a
"RTN","PRSPEAD",1,0)
PRSPEAD ;WOIFO/SAB - DISPLAY EXTENDED ABSENCE ;10/20/2004
"RTN","PRSPEAD",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAD",4,0)
 ; Display List of Extended Absences
"RTN","PRSPEAD",5,0)
 ;
"RTN","PRSPEAD",6,0)
 N CNT,DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,EAIEN,OUT,PG,PRSIEN,TDT,X,Y
"RTN","PRSPEAD",7,0)
 ;
"RTN","PRSPEAD",8,0)
 ; determine Employee IEN
"RTN","PRSPEAD",9,0)
 S PRSIEN=$$PRSIEN^PRSPUT2(1)
"RTN","PRSPEAD",10,0)
 I 'PRSIEN G EXIT
"RTN","PRSPEAD",11,0)
 ;
"RTN","PRSPEAD",12,0)
 S (CNT,OUT,PG)=0
"RTN","PRSPEAD",13,0)
 D HD
"RTN","PRSPEAD",14,0)
 ;
"RTN","PRSPEAD",15,0)
 W !?24,"VA TIME & ATTENDANCE SYSTEM",!?26,"DISPLAY EXTENDED ABSENCE",!
"RTN","PRSPEAD",16,0)
 ;
"RTN","PRSPEAD",17,0)
 ; ask date
"RTN","PRSPEAD",18,0)
 S DIR(0)="D^::EX",DIR("A")="Begin with Date",DIR("B")="T"
"RTN","PRSPEAD",19,0)
 D ^DIR K DIR G:$D(DIRUT) EXIT
"RTN","PRSPEAD",20,0)
 ;
"RTN","PRSPEAD",21,0)
 ; loop thru employee extended absences by to date
"RTN","PRSPEAD",22,0)
 S TDT=Y-.01
"RTN","PRSPEAD",23,0)
 F  S TDT=$O(^PRST(458.4,"AEE",PRSIEN,TDT)) Q:TDT=""  D  Q:OUT
"RTN","PRSPEAD",24,0)
 . S EAIEN=0
"RTN","PRSPEAD",25,0)
 . F  S EAIEN=$O(^PRST(458.4,"AEE",PRSIEN,TDT,EAIEN)) Q:'EAIEN  D  Q:OUT
"RTN","PRSPEAD",26,0)
 . . I $Y+6>IOSL D HD Q:OUT
"RTN","PRSPEAD",27,0)
 . . D DISEA^PRSPEAU(EAIEN)
"RTN","PRSPEAD",28,0)
 . . S CNT=CNT+1
"RTN","PRSPEAD",29,0)
 ;
"RTN","PRSPEAD",30,0)
 I 'OUT,CNT=0 W !!,"No extended absence records on file."
"RTN","PRSPEAD",31,0)
 I 'OUT S DIR(0)="E" D ^DIR K DIR
"RTN","PRSPEAD",32,0)
 ;
"RTN","PRSPEAD",33,0)
EXIT ; exit point
"RTN","PRSPEAD",34,0)
 Q
"RTN","PRSPEAD",35,0)
 ;
"RTN","PRSPEAD",36,0)
HD ; header
"RTN","PRSPEAD",37,0)
 I $E(IOST,1,2)="C-",PG S DIR(0)="E" D ^DIR K DIR I 'Y S OUT=1 Q
"RTN","PRSPEAD",38,0)
 I $E(IOST,1,2)="C-"!PG W @IOF
"RTN","PRSPEAD",39,0)
 S PG=PG+1
"RTN","PRSPEAD",40,0)
 Q
"RTN","PRSPEAD",41,0)
 ;
"RTN","PRSPEAD",42,0)
 ;PRSPEAD
"RTN","PRSPEAE")
0^8^B2407382^n/a
"RTN","PRSPEAE",1,0)
PRSPEAE ;WOIFO/SAB - EDIT EXTENDED ABSENCE ;1/4/2005
"RTN","PRSPEAE",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAE",4,0)
 ; Edit Existing Extended Absence
"RTN","PRSPEAE",5,0)
 ;
"RTN","PRSPEAE",6,0)
 N DA,DDSFILE,DIR,DIROUT,DIRUT,DR,DTOUT,DUOUT
"RTN","PRSPEAE",7,0)
 N EAIEN,EALIST,PRSIEN,X,Y
"RTN","PRSPEAE",8,0)
 ;
"RTN","PRSPEAE",9,0)
 ; determine Employee IEN
"RTN","PRSPEAE",10,0)
 S PRSIEN=$$PRSIEN^PRSPUT2(1)
"RTN","PRSPEAE",11,0)
 I 'PRSIEN G EXIT
"RTN","PRSPEAE",12,0)
 ;
"RTN","PRSPEAE",13,0)
 ; verify that user has electronic signature code
"RTN","PRSPEAE",14,0)
 I '$$ESIGC^PRSPUT2(1) G EXIT
"RTN","PRSPEAE",15,0)
 ;
"RTN","PRSPEAE",16,0)
SEL ; select extended absence
"RTN","PRSPEAE",17,0)
 W @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPEAE",18,0)
 W !?29,"EDIT EXTENDED ABSENCE",!
"RTN","PRSPEAE",19,0)
 ;
"RTN","PRSPEAE",20,0)
 ; build list in EALIST( array
"RTN","PRSPEAE",21,0)
 D BLDLST^PRSPEAU(PRSIEN,DT,"^A^")
"RTN","PRSPEAE",22,0)
 ;
"RTN","PRSPEAE",23,0)
 ; display list (exit if ^ or time-out during list display)
"RTN","PRSPEAE",24,0)
 G:$$DISLST^PRSPEAU() EXIT
"RTN","PRSPEAE",25,0)
 ;
"RTN","PRSPEAE",26,0)
 I EALIST(0)=0 G EXIT ; nothing to select
"RTN","PRSPEAE",27,0)
 ;
"RTN","PRSPEAE",28,0)
 ; select item from list
"RTN","PRSPEAE",29,0)
 W !
"RTN","PRSPEAE",30,0)
 S DIR(0)="NO^1:"_EALIST(0)
"RTN","PRSPEAE",31,0)
 S DIR("A")="Edit which extended absence #?"
"RTN","PRSPEAE",32,0)
 D ^DIR K DIR G:Y'>0!$D(DIRUT) EXIT
"RTN","PRSPEAE",33,0)
 S EAIEN=EALIST(+Y)
"RTN","PRSPEAE",34,0)
 ;
"RTN","PRSPEAE",35,0)
 ; lock record
"RTN","PRSPEAE",36,0)
 L +^PRST(458.4,EAIEN):2
"RTN","PRSPEAE",37,0)
 I '$T D  G:$D(DIRUT) EXIT G AGAIN
"RTN","PRSPEAE",38,0)
 . W $C(7),!,"Another user is editing this extended absence!"
"RTN","PRSPEAE",39,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","PRSPEAE",40,0)
 ;
"RTN","PRSPEAE",41,0)
 ; call form
"RTN","PRSPEAE",42,0)
 S DDSFILE=458.4,DA=EAIEN,DR="[PRSP EXT ABSENCE]"
"RTN","PRSPEAE",43,0)
 D ^DDS
"RTN","PRSPEAE",44,0)
 ;
"RTN","PRSPEAE",45,0)
 ; unlock record
"RTN","PRSPEAE",46,0)
 L -^PRST(458.4,EAIEN)
"RTN","PRSPEAE",47,0)
 ;
"RTN","PRSPEAE",48,0)
 ; Repeat
"RTN","PRSPEAE",49,0)
AGAIN G SEL
"RTN","PRSPEAE",50,0)
 ;
"RTN","PRSPEAE",51,0)
EXIT ; exit point
"RTN","PRSPEAE",52,0)
 Q
"RTN","PRSPEAE",53,0)
 ;
"RTN","PRSPEAE",54,0)
 ;PRSPEAE
"RTN","PRSPEAF")
0^6^B26618366^n/a
"RTN","PRSPEAF",1,0)
PRSPEAF ;WOIFO/SAB - Ext. Absence Form ;10/27/2004
"RTN","PRSPEAF",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAF",4,0)
 Q
"RTN","PRSPEAF",5,0)
 ; This routine is called by the PRSP EXT ABSENCE form (file 458.4)
"RTN","PRSPEAF",6,0)
 ; within both the enter option and edit option for extended absences.
"RTN","PRSPEAF",7,0)
 ;
"RTN","PRSPEAF",8,0)
FRMDOC ; Form PRSP EXT ABSENCE documentation
"RTN","PRSPEAF",9,0)
 ; input
"RTN","PRSPEAF",10,0)
 ;   PRSEANEW  - (optional) true (=1) when extended absence entry is new
"RTN","PRSPEAF",11,0)
 ;   PRSIEN    - Employee IEN (file 450)
"RTN","PRSPEAF",12,0)
 ;   DA        - Extended Absence IEN (file 458.4)
"RTN","PRSPEAF",13,0)
 ;   DDSPARM   - (optional) used by enter option to ask for output
"RTN","PRSPEAF",14,0)
 ; output
"RTN","PRSPEAF",15,0)
 ;   DDSCHANGE - (optional) used by enter option to determine if signed 
"RTN","PRSPEAF",16,0)
 ;
"RTN","PRSPEAF",17,0)
FRMPRE ; Form Pre-Action
"RTN","PRSPEAF",18,0)
 ; input
"RTN","PRSPEAF",19,0)
 ;   PRSEANEW
"RTN","PRSPEAF",20,0)
 ; output
"RTN","PRSPEAF",21,0)
 ;   PRSFDT(0) - last E-sig From Date
"RTN","PRSPEAF",22,0)
 ;   PRSTDT(0) - last E-sig To Date
"RTN","PRSPEAF",23,0)
 ;   PRSRMK(0) - last E-sig Remarks
"RTN","PRSPEAF",24,0)
 ;
"RTN","PRSPEAF",25,0)
 ; load field values that were last E-signed
"RTN","PRSPEAF",26,0)
 I $G(PRSEANEW) S (PRSFDT(0),PRSTDT(0),PRSRMK(0))=""
"RTN","PRSPEAF",27,0)
 E  D
"RTN","PRSPEAF",28,0)
 . S PRSFDT(0)=$$GET^DDSVAL(458.4,DA,.01)
"RTN","PRSPEAF",29,0)
 . S PRSTDT(0)=$$GET^DDSVAL(458.4,DA,1)
"RTN","PRSPEAF",30,0)
 . S PRSRMK(0)=$$GET^DDSVAL(458.4,DA,6)
"RTN","PRSPEAF",31,0)
 ;
"RTN","PRSPEAF",32,0)
 ; if From Date prior to Today, disable edit of From Date
"RTN","PRSPEAF",33,0)
 I '$G(PRSEANEW),PRSFDT(0)<DT D
"RTN","PRSPEAF",34,0)
 . D UNED^DDSUTL("FROM DATE",1,1,1,DA_",")
"RTN","PRSPEAF",35,0)
 . D HLP^DDSUTL("From Date can't be edited because it's prior to Today.")
"RTN","PRSPEAF",36,0)
 Q
"RTN","PRSPEAF",37,0)
 ;
"RTN","PRSPEAF",38,0)
FVAL01 ; Field Validation for From Date (#1) field
"RTN","PRSPEAF",39,0)
 ; input
"RTN","PRSPEAF",40,0)
 ;   X      - current internal value of field
"RTN","PRSPEAF",41,0)
 ;   DDSEXT - current external value of field
"RTN","PRSPEAF",42,0)
 ;   DDSOLD - previous internal value of field
"RTN","PRSPEAF",43,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAF",44,0)
 ; output
"RTN","PRSPEAF",45,0)
 ;   DDSERROR - (optional) set on error to prevent field change
"RTN","PRSPEAF",46,0)
 ;
"RTN","PRSPEAF",47,0)
 I X<DT D  Q
"RTN","PRSPEAF",48,0)
 . S DDSERROR=1
"RTN","PRSPEAF",49,0)
 . D HLP^DDSUTL("From Date must not be prior to Today!")
"RTN","PRSPEAF",50,0)
 ;
"RTN","PRSPEAF",51,0)
 I X>$$FMADD^XLFDT(DT,365) D  Q
"RTN","PRSPEAF",52,0)
 . S DDSERROR=1
"RTN","PRSPEAF",53,0)
 . D HLP^DDSUTL("From Date must not be more than 365 days in Future!")
"RTN","PRSPEAF",54,0)
 ;
"RTN","PRSPEAF",55,0)
 I X=DT,$$CHKRG^PRSPEAU(PRSIEN) D  Q
"RTN","PRSPEAF",56,0)
 . S DDSERROR=1
"RTN","PRSPEAF",57,0)
 . D HLP^DDSUTL("From Date can't be Today because RG already posted on the ESR!")
"RTN","PRSPEAF",58,0)
 ;
"RTN","PRSPEAF",59,0)
 ; perform date comparison validation
"RTN","PRSPEAF",60,0)
 D DTCV(X,$$GET^DDSVAL(458.4,DA,1)) Q:$G(DDSERROR)
"RTN","PRSPEAF",61,0)
 ;
"RTN","PRSPEAF",62,0)
 ; if date changed and new date not under memo then warn user
"RTN","PRSPEAF",63,0)
 I X'=DDSOLD,$$MIEN^PRSPUT1(PRSIEN,X)'>0 D HLP^DDSUTL("Note: New From Date is not covered by a memo.")
"RTN","PRSPEAF",64,0)
 ;
"RTN","PRSPEAF",65,0)
 Q
"RTN","PRSPEAF",66,0)
 ;
"RTN","PRSPEAF",67,0)
FVAL1 ; Field Validation for To Date (#1) field
"RTN","PRSPEAF",68,0)
 ; input
"RTN","PRSPEAF",69,0)
 ;   X      - current internal value of field
"RTN","PRSPEAF",70,0)
 ;   DDSEXT - current external value of field
"RTN","PRSPEAF",71,0)
 ;   DDSOLD - previous internal value of field
"RTN","PRSPEAF",72,0)
 ; output
"RTN","PRSPEAF",73,0)
 ;   DDSERROR - (optional) set on error to prevent field change
"RTN","PRSPEAF",74,0)
 ;
"RTN","PRSPEAF",75,0)
 ; perform date comparison validation
"RTN","PRSPEAF",76,0)
 D DTCV($$GET^DDSVAL(458.4,DA,.01),X) Q:$G(DDSERROR)
"RTN","PRSPEAF",77,0)
 ;
"RTN","PRSPEAF",78,0)
 I X<DT D  Q
"RTN","PRSPEAF",79,0)
 . S DDSERROR=1
"RTN","PRSPEAF",80,0)
 . D HLP^DDSUTL("To Date must not be prior to Today!")
"RTN","PRSPEAF",81,0)
 ;
"RTN","PRSPEAF",82,0)
 I X=DT,$$CHKRG^PRSPEAU(PRSIEN) D  Q
"RTN","PRSPEAF",83,0)
 . S DDSERROR=1
"RTN","PRSPEAF",84,0)
 . D HLP^DDSUTL("To Date can't be Today because RG already posted on the ESR!")
"RTN","PRSPEAF",85,0)
 ;
"RTN","PRSPEAF",86,0)
 ; if date changed and new date not under memo then warn user
"RTN","PRSPEAF",87,0)
 I X'=DDSOLD,$$MIEN^PRSPUT1(PRSIEN,X)'>0 D HLP^DDSUTL("Note: New To Date is not covered by a memo.")
"RTN","PRSPEAF",88,0)
 ;
"RTN","PRSPEAF",89,0)
 Q
"RTN","PRSPEAF",90,0)
 ;
"RTN","PRSPEAF",91,0)
FRMVAL ; Form Validation
"RTN","PRSPEAF",92,0)
 ; input
"RTN","PRSPEAF",93,0)
 ;   PRSFDT(0) - last E-sig From Date
"RTN","PRSPEAF",94,0)
 ;   PRSTDT(0) - last E-sig To Date
"RTN","PRSPEAF",95,0)
 ;   PRSRMK(0) - last E-sig Remarks
"RTN","PRSPEAF",96,0)
 ; output
"RTN","PRSPEAF",97,0)
 ;   PRSFDT(1) - current From Date
"RTN","PRSPEAF",98,0)
 ;   PRSTDT(1) - current To Date
"RTN","PRSPEAF",99,0)
 ;   PRSRMK(1) - current Remarks
"RTN","PRSPEAF",100,0)
 ;   PRSLCK(   - array of locked pay periods
"RTN","PRSPEAF",101,0)
 ;   DDSERROR  - (optional) set on error to prevent save
"RTN","PRSPEAF",102,0)
 ;
"RTN","PRSPEAF",103,0)
 ; get current values of fields
"RTN","PRSPEAF",104,0)
 S PRSFDT(1)=$$GET^DDSVAL(458.4,DA,.01) ; From Date
"RTN","PRSPEAF",105,0)
 S PRSTDT(1)=$$GET^DDSVAL(458.4,DA,1) ; To Date
"RTN","PRSPEAF",106,0)
 S PRSRMK(1)=$$GET^DDSVAL(458.4,DA,6) ; Remarks
"RTN","PRSPEAF",107,0)
 ;
"RTN","PRSPEAF",108,0)
 ; Skip validation if no changes since last E-Sig
"RTN","PRSPEAF",109,0)
 Q:(PRSFDT(1)=PRSFDT(0))&(PRSTDT(1)=PRSTDT(0))&(PRSRMK(1)=PRSRMK(0))
"RTN","PRSPEAF",110,0)
 ;
"RTN","PRSPEAF",111,0)
 ; ask for electronic signature
"RTN","PRSPEAF",112,0)
 D  Q:$G(DDSERROR)
"RTN","PRSPEAF",113,0)
 . N X1
"RTN","PRSPEAF",114,0)
 . D SIG^XUSESIG
"RTN","PRSPEAF",115,0)
 . S:X1="" DDSERROR=1
"RTN","PRSPEAF",116,0)
 ;
"RTN","PRSPEAF",117,0)
 ; skip remaining step if dates did not change (i.e. only remarks edited)
"RTN","PRSPEAF",118,0)
 Q:(PRSFDT(1)=PRSFDT(0))&(PRSTDT(1)=PRSTDT(0))
"RTN","PRSPEAF",119,0)
 ;
"RTN","PRSPEAF",120,0)
 ; lock timecards for applicable opened pay periods
"RTN","PRSPEAF",121,0)
 D TCLCK^PRSPAPU(PRSIEN,PRSFDT(0),PRSTDT(0),PRSFDT(1),PRSTDT(1),.PRSLCK,.PRSLCKE)
"RTN","PRSPEAF",122,0)
 ;
"RTN","PRSPEAF",123,0)
 ; if some time cards couldn't be locked then don't accept changes
"RTN","PRSPEAF",124,0)
 I $D(PRSLCKE) D
"RTN","PRSPEAF",125,0)
 . N PRSTXT
"RTN","PRSPEAF",126,0)
 . S DDSERROR=1
"RTN","PRSPEAF",127,0)
 . D TCULCK^PRSPAPU(PRSIEN,.PRSLCK) ; remove any locks
"RTN","PRSPEAF",128,0)
 . D RLCKE^PRSPAPU(.PRSLCKE,0,"PRSTXT")
"RTN","PRSPEAF",129,0)
 . D HLP^DDSUTL(.PRSTXT)
"RTN","PRSPEAF",130,0)
 . K PRSLCKE
"RTN","PRSPEAF",131,0)
 ;
"RTN","PRSPEAF",132,0)
 Q
"RTN","PRSPEAF",133,0)
 ;
"RTN","PRSPEAF",134,0)
FRMPSV ; Form Post Save
"RTN","PRSPEAF",135,0)
 ; input
"RTN","PRSPEAF",136,0)
 ;   - previous signed values x(0) and new signed values x(1)
"RTN","PRSPEAF",137,0)
 ;   - array of locked pay periods
"RTN","PRSPEAF",138,0)
 ;
"RTN","PRSPEAF",139,0)
 ; Skip post save if no changes
"RTN","PRSPEAF",140,0)
 Q:(PRSFDT(1)=PRSFDT(0))&(PRSTDT(1)=PRSTDT(0))&(PRSRMK(1)=PRSRMK(0))
"RTN","PRSPEAF",141,0)
 ;
"RTN","PRSPEAF",142,0)
 N PRSFDA
"RTN","PRSPEAF",143,0)
 ;
"RTN","PRSPEAF",144,0)
 ; Update Extended Absence
"RTN","PRSPEAF",145,0)
 I PRSFDT(0)="" D
"RTN","PRSPEAF",146,0)
 . S PRSFDA(458.4,DA_",",3)=$$NOW^XLFDT() ; d/t entered
"RTN","PRSPEAF",147,0)
 . S PRSFDA(458.4,DA_",",5)="A" ; status = active
"RTN","PRSPEAF",148,0)
 E  S PRSFDA(458.4,DA_",",4)=$$NOW^XLFDT() ; d/t updated
"RTN","PRSPEAF",149,0)
 D FILE^DIE("","PRSFDA") D MSG^DIALOG()
"RTN","PRSPEAF",150,0)
 ;
"RTN","PRSPEAF",151,0)
 ; Update signed remark value
"RTN","PRSPEAF",152,0)
 S PRSRMK(0)=PRSRMK(1)
"RTN","PRSPEAF",153,0)
 ;
"RTN","PRSPEAF",154,0)
 ; skip remaining step if dates did not change (i.e. only remarks edited)
"RTN","PRSPEAF",155,0)
 Q:(PRSFDT(1)=PRSFDT(0))&(PRSTDT(1)=PRSTDT(0))
"RTN","PRSPEAF",156,0)
 ;
"RTN","PRSPEAF",157,0)
 ; Update ESRs for new date range
"RTN","PRSPEAF",158,0)
 D:'PRSFDT(0) PEA^PRSPEAA(PRSIEN,PRSFDT(1),PRSTDT(1))
"RTN","PRSPEAF",159,0)
 ; Update ESRs for changed date range
"RTN","PRSPEAF",160,0)
 D:PRSFDT(0) CEA^PRSPEAA(PRSIEN,PRSFDT(0),PRSTDT(0),PRSFDT(1),PRSTDT(1))
"RTN","PRSPEAF",161,0)
 ;
"RTN","PRSPEAF",162,0)
 ; remove time card locks
"RTN","PRSPEAF",163,0)
 D TCULCK^PRSPAPU(PRSIEN,.PRSLCK)
"RTN","PRSPEAF",164,0)
 ;
"RTN","PRSPEAF",165,0)
 ; Update signed date values
"RTN","PRSPEAF",166,0)
 S PRSFDT(0)=PRSFDT(1)
"RTN","PRSPEAF",167,0)
 S PRSTDT(0)=PRSTDT(1)
"RTN","PRSPEAF",168,0)
 Q
"RTN","PRSPEAF",169,0)
 ;
"RTN","PRSPEAF",170,0)
FRMPST ; Form Post-Action
"RTN","PRSPEAF",171,0)
 K PRSFDT(0),PRSFDT(1),PRSRMK(0),PRSRMK(1),PRSTDT(0),PRSTDT(1)
"RTN","PRSPEAF",172,0)
 Q
"RTN","PRSPEAF",173,0)
 ;
"RTN","PRSPEAF",174,0)
DTCV(FDT,TDT) ; Date Compare Validation on FROM DATE and TO DATE fields
"RTN","PRSPEAF",175,0)
 Q:FDT=""!(TDT="")
"RTN","PRSPEAF",176,0)
 ;
"RTN","PRSPEAF",177,0)
 N PRSX
"RTN","PRSPEAF",178,0)
 ;
"RTN","PRSPEAF",179,0)
 I FDT>TDT D  Q
"RTN","PRSPEAF",180,0)
 . S DDSERROR=1
"RTN","PRSPEAF",181,0)
 . D HLP^DDSUTL("From Date must not be later than To Date!")
"RTN","PRSPEAF",182,0)
 ;
"RTN","PRSPEAF",183,0)
 I $$FMDIFF^XLFDT(TDT,FDT)>180 D  Q
"RTN","PRSPEAF",184,0)
 . S DDSERROR=1
"RTN","PRSPEAF",185,0)
 . D HLP^DDSUTL("Difference between From Date and To Date must not exceed 180 days!")
"RTN","PRSPEAF",186,0)
 ;
"RTN","PRSPEAF",187,0)
 ; check period for conflict with other EAs
"RTN","PRSPEAF",188,0)
 S PRSX=$$CONFLICT^PRSPEAU(PRSIEN,FDT,TDT,DA)
"RTN","PRSPEAF",189,0)
 I PRSX'="" D  Q
"RTN","PRSPEAF",190,0)
 . N PRSTXT
"RTN","PRSPEAF",191,0)
 . S DDSERROR=1
"RTN","PRSPEAF",192,0)
 . D RCON^PRSPEAU(PRSX,0,"PRSTXT")
"RTN","PRSPEAF",193,0)
 . D HLP^DDSUTL(.PRSTXT)
"RTN","PRSPEAF",194,0)
 ;
"RTN","PRSPEAF",195,0)
 Q
"RTN","PRSPEAF",196,0)
 ;
"RTN","PRSPEAF",197,0)
 ;PRSPEAF
"RTN","PRSPEAN")
0^7^B5183365^n/a
"RTN","PRSPEAN",1,0)
PRSPEAN ;WOIFO/SAB - NEW EXTENDED ABSENCE ;10/20/2004
"RTN","PRSPEAN",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAN",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAN",4,0)
 ; Enter New Extended Absence
"RTN","PRSPEAN",5,0)
 ;
"RTN","PRSPEAN",6,0)
 N DA,DDSFILE,DDSCHANG,DDSPARM,DIC,DIK,DIR,DIROUT,DIRUT,DO,DR,DTOUT,DUOUT
"RTN","PRSPEAN",7,0)
 N EAIEN,PRSEANEW,PRSFDT,PRSIEN,PRSX,X,Y
"RTN","PRSPEAN",8,0)
 ;
"RTN","PRSPEAN",9,0)
 ; determine Employee IEN
"RTN","PRSPEAN",10,0)
 S PRSIEN=$$PRSIEN^PRSPUT2(1)
"RTN","PRSPEAN",11,0)
 I 'PRSIEN G EXIT
"RTN","PRSPEAN",12,0)
 ;
"RTN","PRSPEAN",13,0)
 ; verify that user has electronic signature code
"RTN","PRSPEAN",14,0)
 I '$$ESIGC^PRSPUT2(1) G EXIT
"RTN","PRSPEAN",15,0)
 ;
"RTN","PRSPEAN",16,0)
FDT ; ask new from date
"RTN","PRSPEAN",17,0)
 S DIR(0)="D^DT:"_$$FMADD^XLFDT(DT,365)_":EX",DIR("A")="FROM DATE"
"RTN","PRSPEAN",18,0)
 S DIR("?")="Enter the beginning date for a new period of extended absence"
"RTN","PRSPEAN",19,0)
 D ^DIR K DIR G:$D(DIRUT) EXIT
"RTN","PRSPEAN",20,0)
 S PRSFDT=$P(Y,U)
"RTN","PRSPEAN",21,0)
 ;
"RTN","PRSPEAN",22,0)
 ; If From Date = Today make sure ESR not already posted with RG time.
"RTN","PRSPEAN",23,0)
 I PRSFDT=DT,$$CHKRG^PRSPEAU(PRSIEN) D  G FDT
"RTN","PRSPEAN",24,0)
 . W $C(7),!,"From Date can't be Today because RG time already posted on the ESR!"
"RTN","PRSPEAN",25,0)
 ;
"RTN","PRSPEAN",26,0)
 ; check for conflicts with from date
"RTN","PRSPEAN",27,0)
 S PRSX=$$CONFLICT^PRSPEAU(PRSIEN,PRSFDT)
"RTN","PRSPEAN",28,0)
 I PRSX'="" D RCON^PRSPEAU(PRSX) G FDT
"RTN","PRSPEAN",29,0)
 ;
"RTN","PRSPEAN",30,0)
 ; if date changed and new date not under memo then warn user
"RTN","PRSPEAN",31,0)
 I $$MIEN^PRSPUT1(PRSIEN,PRSFDT)'>0 W $C(7),!!,"Note: From Date is not covered by a memo." S DIR(0)="E" D ^DIR K DIK G:$D(DIRUT) EXIT
"RTN","PRSPEAN",32,0)
 ;
"RTN","PRSPEAN",33,0)
 ; create new entry in file
"RTN","PRSPEAN",34,0)
 K DO S DIC="^PRST(458.4,",DIC(0)="",X=PRSFDT
"RTN","PRSPEAN",35,0)
 S DIC("DR")="2////^S X=PRSIEN"
"RTN","PRSPEAN",36,0)
 D FILE^DICN
"RTN","PRSPEAN",37,0)
 I Y<0 W $C(7),!,"Unable to add an extended absence to the file." G EXIT
"RTN","PRSPEAN",38,0)
 S EAIEN=+Y
"RTN","PRSPEAN",39,0)
 ;
"RTN","PRSPEAN",40,0)
 ; lock record
"RTN","PRSPEAN",41,0)
 L +^PRST(458.4,EAIEN):2
"RTN","PRSPEAN",42,0)
 I '$T D  G EXIT
"RTN","PRSPEAN",43,0)
 . W $C(7),!,"ERROR: Unable to lock the new entry!"
"RTN","PRSPEAN",44,0)
 . S DIK="^PRST(458.4,",DA=EAIEN D ^DIK K DIK
"RTN","PRSPEAN",45,0)
 ;
"RTN","PRSPEAN",46,0)
 ; call form to edit entry
"RTN","PRSPEAN",47,0)
 S PRSEANEW=1
"RTN","PRSPEAN",48,0)
 S DDSFILE=458.4,DA=EAIEN,DR="[PRSP EXT ABSENCE]",DDSPARM="C"
"RTN","PRSPEAN",49,0)
 D ^DDS
"RTN","PRSPEAN",50,0)
 ;
"RTN","PRSPEAN",51,0)
 ; delete new entry if not saved
"RTN","PRSPEAN",52,0)
 I $G(DDSCHANG)'=1 S DIK="^PRST(458.4,",DA=EAIEN D ^DIK K DIK
"RTN","PRSPEAN",53,0)
 ;
"RTN","PRSPEAN",54,0)
 ; unlock record
"RTN","PRSPEAN",55,0)
 L -^PRST(458.4,EAIEN)
"RTN","PRSPEAN",56,0)
 ;
"RTN","PRSPEAN",57,0)
EXIT ; exit point
"RTN","PRSPEAN",58,0)
 Q
"RTN","PRSPEAN",59,0)
 ;
"RTN","PRSPEAN",60,0)
 ;PRSPEAN
"RTN","PRSPEAU")
0^11^B26159765^n/a
"RTN","PRSPEAU",1,0)
PRSPEAU ;WOIFO/SAB - EXTENDED ABSENCE UTILITIES ;10/19/2004
"RTN","PRSPEAU",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAU",4,0)
 Q
"RTN","PRSPEAU",5,0)
 ;
"RTN","PRSPEAU",6,0)
 ;
"RTN","PRSPEAU",7,0)
CONFLICT(PRSIEN,NFDT,NTDT,XEAIEN) ; check for conflict with existing EAs
"RTN","PRSPEAU",8,0)
 ; input
"RTN","PRSPEAU",9,0)
 ;   PRSIEN - employee ien (file 450)
"RTN","PRSPEAU",10,0)
 ;   NFDT   - new from date in fileman format
"RTN","PRSPEAU",11,0)
 ;   NTDT   - (optional) new to date in fileman format
"RTN","PRSPEAU",12,0)
 ;   XEAIEN - (optional) existing extended absense ien, passed if dates
"RTN","PRSPEAU",13,0)
 ;            for an existing record are being checked so that entry does
"RTN","PRSPEAU",14,0)
 ;            not conflict with itself.
"RTN","PRSPEAU",15,0)
 ; returns string with value =
"RTN","PRSPEAU",16,0)
 ;   list of Extended Absence iens (delimited by ^) that conflict OR
"RTN","PRSPEAU",17,0)
 ;   null when no conflict found
"RTN","PRSPEAU",18,0)
 ;
"RTN","PRSPEAU",19,0)
 ; A conflict exists if the date range (New From-New To) overlaps the
"RTN","PRSPEAU",20,0)
 ; date range of a different, active (does not include cancelled)
"RTN","PRSPEAU",21,0)
 ; extended absence.  If the To Date is not passed, then the software
"RTN","PRSPEAU",22,0)
 ; will just check the From Date to issue that it does not conflict with
"RTN","PRSPEAU",23,0)
 ; another extended absence.
"RTN","PRSPEAU",24,0)
 ;
"RTN","PRSPEAU",25,0)
 N EAIEN,EAY0,PRSRET,PRSY,TDT
"RTN","PRSPEAU",26,0)
 S PRSRET=""
"RTN","PRSPEAU",27,0)
 S NTDT=$G(NTDT,NFDT) ; if To Date not passed then set equal to From Date
"RTN","PRSPEAU",28,0)
 ;
"RTN","PRSPEAU",29,0)
 ; loop thru extended absences for employee by reverse To Date until
"RTN","PRSPEAU",30,0)
 ; the To Date is before the New From Date or no more To Dates
"RTN","PRSPEAU",31,0)
 S TDT=9999999 ; initial To Date for loop
"RTN","PRSPEAU",32,0)
 F  S TDT=$O(^PRST(458.4,"AEE",PRSIEN,TDT),-1) Q:'TDT!(TDT<NFDT)  D
"RTN","PRSPEAU",33,0)
 . ; loop thru extended absences with To Date
"RTN","PRSPEAU",34,0)
 . S EAIEN=0
"RTN","PRSPEAU",35,0)
 . S EAIEN=$O(^PRST(458.4,"AEE",PRSIEN,TDT,EAIEN)) Q:'EAIEN  D
"RTN","PRSPEAU",36,0)
 . . Q:EAIEN=$G(XEAIEN)  ; skip if entry is the one being checked
"RTN","PRSPEAU",37,0)
 . . S EAY0=$G(^PRST(458.4,EAIEN,0)) ; extended absense 0 node
"RTN","PRSPEAU",38,0)
 . . Q:$P(EAY0,U)=""!($P(EAY0,U,2)="")  ; dates missing - invalid
"RTN","PRSPEAU",39,0)
 . . Q:$P(EAY0,U)>NTDT  ; skip if From Date after New To Date
"RTN","PRSPEAU",40,0)
 . . Q:$P(EAY0,U,6)'="A"  ; skip if Status not active
"RTN","PRSPEAU",41,0)
 . . ;
"RTN","PRSPEAU",42,0)
 . . ; extended absence overlaps the pay period
"RTN","PRSPEAU",43,0)
 . . S PRSRET=PRSRET_EAIEN_U  ; conflict
"RTN","PRSPEAU",44,0)
 ;
"RTN","PRSPEAU",45,0)
 Q PRSRET
"RTN","PRSPEAU",46,0)
 ;
"RTN","PRSPEAU",47,0)
RCON(LIST,WRITE,PRSARRN) ; Report Conflicts
"RTN","PRSPEAU",48,0)
 ; input
"RTN","PRSPEAU",49,0)
 ;   LIST    - string of conflicting Ext Absence IENs delimited by ^
"RTN","PRSPEAU",50,0)
 ;   WRITE   - (optional) true (=1) if text should be written (default)
"RTN","PRSPEAU",51,0)
 ;                        false (=0) if array should be returned instead
"RTN","PRSPEAU",52,0)
 ;   PRSARRN - (optional) array name, default value is "PRSARR"
"RTN","PRSPEAU",53,0)
 ; output
"RTN","PRSPEAU",54,0)
 ;   If WRITE is True, the input array name (or "PRSARR" if not
"RTN","PRSPEAU",55,0)
 ;     specified) will be killed.
"RTN","PRSPEAU",56,0)
 ;   If WRITE is False, the input array name will contain the text
"RTN","PRSPEAU",57,0)
 ;
"RTN","PRSPEAU",58,0)
 Q:$G(LIST)=""
"RTN","PRSPEAU",59,0)
 ;
"RTN","PRSPEAU",60,0)
 N EAIEN,LN,PC
"RTN","PRSPEAU",61,0)
 ;
"RTN","PRSPEAU",62,0)
 S PRSARRN=$G(PRSARRN,"PRSARR")
"RTN","PRSPEAU",63,0)
 S WRITE=$G(WRITE,1)
"RTN","PRSPEAU",64,0)
 ;
"RTN","PRSPEAU",65,0)
 S @PRSARRN@(1)="The specified dates conflict with other extended absence(s)."
"RTN","PRSPEAU",66,0)
 S @PRSARRN@(2)="Please specify different dates for this extended absence or"
"RTN","PRSPEAU",67,0)
 S @PRSARRN@(3)="remove the conflict by first editing the other extended absence(s)."
"RTN","PRSPEAU",68,0)
 S LN=3
"RTN","PRSPEAU",69,0)
 F PC=1:1 S EAIEN=$P(LIST,U,PC) Q:EAIEN=""  D
"RTN","PRSPEAU",70,0)
 . S LN=LN+1
"RTN","PRSPEAU",71,0)
 . S @PRSARRN@(LN)="  Conflicts with Absence: "_$$GET1^DIQ(458.4,EAIEN_",",.01)_" to "_$$GET1^DIQ(458.4,EAIEN_",",1)
"RTN","PRSPEAU",72,0)
 ;
"RTN","PRSPEAU",73,0)
 ; if not WRITE then quit (return text in array to caller)
"RTN","PRSPEAU",74,0)
 Q:'WRITE
"RTN","PRSPEAU",75,0)
 ;
"RTN","PRSPEAU",76,0)
 ; otherwise write text to current device and then kill array of text
"RTN","PRSPEAU",77,0)
 S LN=0 F  S LN=$O(@PRSARRN@(LN)) Q:'LN  D
"RTN","PRSPEAU",78,0)
 . W !,@PRSARRN@(LN)
"RTN","PRSPEAU",79,0)
 K @PRSARRN
"RTN","PRSPEAU",80,0)
 ;
"RTN","PRSPEAU",81,0)
 Q
"RTN","PRSPEAU",82,0)
 ;
"RTN","PRSPEAU",83,0)
CHKRG(PRSIEN) ; Check for RG Posted to Today's ESR
"RTN","PRSPEAU",84,0)
 ; Input
"RTN","PRSPEAU",85,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAU",86,0)
 ; Returns
"RTN","PRSPEAU",87,0)
 ;   boolean value, true (=1) if RG already posted on ESR for Today
"RTN","PRSPEAU",88,0)
 ;
"RTN","PRSPEAU",89,0)
 N D1,DAY,PP4Y,PPE,PPI,PRSRET
"RTN","PRSPEAU",90,0)
 ;
"RTN","PRSPEAU",91,0)
 S PRSRET=0 ; init return value
"RTN","PRSPEAU",92,0)
 ;
"RTN","PRSPEAU",93,0)
 I $G(PRSIEN) D
"RTN","PRSPEAU",94,0)
 . S D1=DT
"RTN","PRSPEAU",95,0)
 . D PP^PRSAPPU
"RTN","PRSPEAU",96,0)
 . Q:'$G(PPI)
"RTN","PRSPEAU",97,0)
 . Q:'$G(DAY)
"RTN","PRSPEAU",98,0)
 . I $G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))["RG" S PRSRET=1
"RTN","PRSPEAU",99,0)
 ;
"RTN","PRSPEAU",100,0)
 Q PRSRET
"RTN","PRSPEAU",101,0)
 ;
"RTN","PRSPEAU",102,0)
DISEA(EAIEN,IC) ; Display EA
"RTN","PRSPEAU",103,0)
 ; input
"RTN","PRSPEAU",104,0)
 ;   EAIEN - Extended Absence IEN (file 458.4)
"RTN","PRSPEAU",105,0)
 ;   IC    - (optional) item count, number to be included in display
"RTN","PRSPEAU",106,0)
 ; result
"RTN","PRSPEAU",107,0)
 ;   Writes information to current device (2-4 lines)
"RTN","PRSPEAU",108,0)
 Q:'$G(EAIEN)  ; IEN required
"RTN","PRSPEAU",109,0)
 S IC=$G(IC)
"RTN","PRSPEAU",110,0)
 ;
"RTN","PRSPEAU",111,0)
 N PRSE,PRSIENS,PRSV
"RTN","PRSPEAU",112,0)
 S PRSIENS=EAIEN_","
"RTN","PRSPEAU",113,0)
 ;
"RTN","PRSPEAU",114,0)
 D GETS^DIQ(458.4,PRSIENS,".01;1;3;4;5;6","","PRSV","PRSE")
"RTN","PRSPEAU",115,0)
 ;
"RTN","PRSPEAU",116,0)
 ; display info if no error
"RTN","PRSPEAU",117,0)
 I '$D(PRSE) D
"RTN","PRSPEAU",118,0)
 . W !
"RTN","PRSPEAU",119,0)
 . I IC W $$RJ^XLFSTR(IC_") ",4)
"RTN","PRSPEAU",120,0)
 . W PRSV(458.4,PRSIENS,.01)_" to "_PRSV(458.4,PRSIENS,1)
"RTN","PRSPEAU",121,0)
 . W ?33,"Status: ",PRSV(458.4,PRSIENS,5)
"RTN","PRSPEAU",122,0)
 . I PRSV(458.4,PRSIENS,6)]"" W !,?4,PRSV(458.4,PRSIENS,6) ; remarks
"RTN","PRSPEAU",123,0)
 . W !,?33,"Entered: ",PRSV(458.4,PRSIENS,3)
"RTN","PRSPEAU",124,0)
 . I PRSV(458.4,PRSIENS,4)]"" W !,?33,"Updated: ",PRSV(458.4,PRSIENS,4)
"RTN","PRSPEAU",125,0)
 ;
"RTN","PRSPEAU",126,0)
 I $D(PRSE) D MSG^DIALOG(,,,,"PRSE") ; display error
"RTN","PRSPEAU",127,0)
 ;
"RTN","PRSPEAU",128,0)
 Q
"RTN","PRSPEAU",129,0)
 ;
"RTN","PRSPEAU",130,0)
BLDLST(PRSIEN,MINTDT,OKSTAT) ; Build List of Extended Absence Entries
"RTN","PRSPEAU",131,0)
 ; input
"RTN","PRSPEAU",132,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSPEAU",133,0)
 ;   MINTDT - Minumum To Date (FileMan Internal)
"RTN","PRSPEAU",134,0)
 ;   OKSTAT - String of acceptable EA status values to place in list
"RTN","PRSPEAU",135,0)
 ;            delimited by ^ (e.g. "A" or "^A^" or "A^X"...)
"RTN","PRSPEAU",136,0)
 ;   ARRN   - (optional) name of an array that will contain the list
"RTN","PRSPEAU",137,0)
 ;            default value is "EALIST"
"RTN","PRSPEAU",138,0)
 ; output
"RTN","PRSPEAU",139,0)
 ;   local array EALIST with format
"RTN","PRSPEAU",140,0)
 ;   EALIST(0)=count of items in list
"RTN","PRSPEAU",141,0)
 ;   EALIST(1)=1st extended absence IEN in list
"RTN","PRSPEAU",142,0)
 ;   EALIST(n)=nth extended absence IEN in list
"RTN","PRSPEAU",143,0)
 ;
"RTN","PRSPEAU",144,0)
 ; initialize the list
"RTN","PRSPEAU",145,0)
 K EALIST
"RTN","PRSPEAU",146,0)
 ;
"RTN","PRSPEAU",147,0)
 Q:'$G(PRSIEN)
"RTN","PRSPEAU",148,0)
 Q:$G(MINTDT)'?7N
"RTN","PRSPEAU",149,0)
 Q:$G(OKSTAT)=""
"RTN","PRSPEAU",150,0)
 ;
"RTN","PRSPEAU",151,0)
 I $E(OKSTAT)'="^" S OKSTAT="^"_OKSTAT
"RTN","PRSPEAU",152,0)
 I $E(OKSTAT,$L(OKSTAT))'="^" S OKSTAT=OKSTAT_"^"
"RTN","PRSPEAU",153,0)
 ;
"RTN","PRSPEAU",154,0)
 ;
"RTN","PRSPEAU",155,0)
 N CNT,EAIEN,PRSX,TDT
"RTN","PRSPEAU",156,0)
 ;
"RTN","PRSPEAU",157,0)
 ; loop thru extended absences by to date - build sorted temp list
"RTN","PRSPEAU",158,0)
 S TDT=MINTDT-.01
"RTN","PRSPEAU",159,0)
 F  S TDT=$O(^PRST(458.4,"AEE",PRSIEN,TDT)) Q:'TDT  D
"RTN","PRSPEAU",160,0)
 . S EAIEN=0
"RTN","PRSPEAU",161,0)
 . F  S EAIEN=$O(^PRST(458.4,"AEE",PRSIEN,TDT,EAIEN)) Q:'EAIEN  D
"RTN","PRSPEAU",162,0)
 . . Q:OKSTAT'[(U_$P($G(^PRST(458.4,EAIEN,0)),U,6)_U)
"RTN","PRSPEAU",163,0)
 . . S EALIST("T",TDT_"^"_EAIEN)=""
"RTN","PRSPEAU",164,0)
 ;
"RTN","PRSPEAU",165,0)
 ; build output list by number based on order in temp list 
"RTN","PRSPEAU",166,0)
 S CNT=0,PRSX=""
"RTN","PRSPEAU",167,0)
 F  S PRSX=$O(EALIST("T",PRSX)) Q:PRSX=""  D
"RTN","PRSPEAU",168,0)
 . S CNT=CNT+1
"RTN","PRSPEAU",169,0)
 . S EALIST(CNT)=$P(PRSX,U,2)
"RTN","PRSPEAU",170,0)
 S EALIST(0)=CNT ; set header node with count
"RTN","PRSPEAU",171,0)
 ;
"RTN","PRSPEAU",172,0)
 K EALIST("T") ; delete temp list
"RTN","PRSPEAU",173,0)
 ;
"RTN","PRSPEAU",174,0)
 Q
"RTN","PRSPEAU",175,0)
 ;
"RTN","PRSPEAU",176,0)
DISLST() ; Display List of Extended Absences
"RTN","PRSPEAU",177,0)
 ; input
"RTN","PRSPEAU",178,0)
 ;   local array EALIST with format
"RTN","PRSPEAU",179,0)
 ;   EALIST(0)=count of items in list
"RTN","PRSPEAU",180,0)
 ;   EALIST(1)=1st extended absence IEN in list
"RTN","PRSPEAU",181,0)
 ;   EALIST(n)=nth extended absence IEN in list
"RTN","PRSPEAU",182,0)
 ; returns 1 if user entered an up-arrow or time-out
"RTN","PRSPEAU",183,0)
 ;
"RTN","PRSPEAU",184,0)
 N DIR,DIRUT,DIROUT,DTOUT,DUOUT,PRSI,PRSRET,X,Y
"RTN","PRSPEAU",185,0)
 ;
"RTN","PRSPEAU",186,0)
 S PRSRET=0
"RTN","PRSPEAU",187,0)
 ;
"RTN","PRSPEAU",188,0)
 I EALIST(0)=0 W !,"No extended absences were found."
"RTN","PRSPEAU",189,0)
 ;
"RTN","PRSPEAU",190,0)
 S PRSI=0 F  S PRSI=$O(EALIST(PRSI)) Q:'PRSI  D  Q:PRSRET
"RTN","PRSPEAU",191,0)
 . I $Y+6>IOSL S DIR(0)="E" D ^DIR K DIR S:'Y PRSRET=1 Q:'Y  W @IOF
"RTN","PRSPEAU",192,0)
 . S EAIEN=EALIST(PRSI)
"RTN","PRSPEAU",193,0)
 . D DISEA(EAIEN,PRSI)
"RTN","PRSPEAU",194,0)
 ;
"RTN","PRSPEAU",195,0)
 Q PRSRET
"RTN","PRSPEAU",196,0)
 ;
"RTN","PRSPEAU",197,0)
 ;PRSPEAU
"RTN","PRSPEAX")
0^9^B11554289^n/a
"RTN","PRSPEAX",1,0)
PRSPEAX ;WOIFO/SAB - CANCEL EXTENDED ABSENCE ;1/4/2005
"RTN","PRSPEAX",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEAX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEAX",4,0)
 ;
"RTN","PRSPEAX",5,0)
 ; Cancel Existing Extended Absence
"RTN","PRSPEAX",6,0)
 ;
"RTN","PRSPEAX",7,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,EAIEN,EALIST,EAY0,ESRU
"RTN","PRSPEAX",8,0)
 N PERSTR,PEREND,PRSFDA,PRSIEN,PRSLCK,PRSLCKE,X,X1,Y
"RTN","PRSPEAX",9,0)
 ;
"RTN","PRSPEAX",10,0)
 ; determine Employee IEN
"RTN","PRSPEAX",11,0)
 S PRSIEN=$$PRSIEN^PRSPUT2(1)
"RTN","PRSPEAX",12,0)
 I 'PRSIEN G EXIT
"RTN","PRSPEAX",13,0)
 ;
"RTN","PRSPEAX",14,0)
 ; verify that user has electronic signature code
"RTN","PRSPEAX",15,0)
 I '$$ESIGC^PRSPUT2(1) G EXIT
"RTN","PRSPEAX",16,0)
 ;
"RTN","PRSPEAX",17,0)
SEL ; select extended absence
"RTN","PRSPEAX",18,0)
 W @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPEAX",19,0)
 W !?28,"CANCEL EXTENDED ABSENCE",!
"RTN","PRSPEAX",20,0)
 ;
"RTN","PRSPEAX",21,0)
 ; build list in EALIST( array
"RTN","PRSPEAX",22,0)
 D BLDLST^PRSPEAU(PRSIEN,DT,"^A^")
"RTN","PRSPEAX",23,0)
 ;
"RTN","PRSPEAX",24,0)
 ; display list (exit if ^ or time-out during list display)
"RTN","PRSPEAX",25,0)
 G:$$DISLST^PRSPEAU() EXIT
"RTN","PRSPEAX",26,0)
 ;
"RTN","PRSPEAX",27,0)
 I EALIST(0)=0 G EXIT ; nothing to select
"RTN","PRSPEAX",28,0)
 ;
"RTN","PRSPEAX",29,0)
 ; select item from list
"RTN","PRSPEAX",30,0)
 W !
"RTN","PRSPEAX",31,0)
 S DIR(0)="NO^1:"_EALIST(0)
"RTN","PRSPEAX",32,0)
 S DIR("A")="Cancel which extended absence #?"
"RTN","PRSPEAX",33,0)
 D ^DIR K DIR G:Y'>0!$D(DIRUT) EXIT
"RTN","PRSPEAX",34,0)
 S EAIEN=EALIST(+Y)
"RTN","PRSPEAX",35,0)
 S EAY0=$G(^PRST(458.4,EAIEN,0))
"RTN","PRSPEAX",36,0)
 ;
"RTN","PRSPEAX",37,0)
 ; Lock EA
"RTN","PRSPEAX",38,0)
 L +^PRST(458.4,EAIEN):2
"RTN","PRSPEAX",39,0)
 I '$T D  G AGAIN
"RTN","PRSPEAX",40,0)
 . W $C(7),!,"Another user is editing this extended absence!"
"RTN","PRSPEAX",41,0)
 ;
"RTN","PRSPEAX",42,0)
 ; Display EA
"RTN","PRSPEAX",43,0)
 W @IOF D DISEA^PRSPEAU(EAIEN) W !
"RTN","PRSPEAX",44,0)
 ;
"RTN","PRSPEAX",45,0)
 ; set ESRU to indicate any restruction for ESR updates upon EA cancel.
"RTN","PRSPEAX",46,0)
 ;   if absence includes prior days then they will not be updated on ESR
"RTN","PRSPEAX",47,0)
 ;   if absence includes Today and RG posted then Today can't be updated
"RTN","PRSPEAX",48,0)
 ;   restruction: 0 = none,  1 = prior to Today,  2 = Today and prior
"RTN","PRSPEAX",49,0)
 S ESRU=0 ; init with no restriction
"RTN","PRSPEAX",50,0)
 ; check if EA includes Today and if RG already posted to Today
"RTN","PRSPEAX",51,0)
 I $P(EAY0,U)'>DT,$$CHKRG^PRSPEAU(PRSIEN) S ESRU=2
"RTN","PRSPEAX",52,0)
 ; if Today OK then check if EA includes any prior days
"RTN","PRSPEAX",53,0)
 I 'ESRU,$P(EAY0,U)<DT S ESRU=1
"RTN","PRSPEAX",54,0)
 ;
"RTN","PRSPEAX",55,0)
 ; Determine ESR period to update
"RTN","PRSPEAX",56,0)
 S PERSTR=$S(ESRU=2:$$FMADD^XLFDT(DT,1),ESRU=1:DT,1:$P(EAY0,U))
"RTN","PRSPEAX",57,0)
 S PEREND=$P(EAY0,U,2)
"RTN","PRSPEAX",58,0)
 ;
"RTN","PRSPEAX",59,0)
 ; Warn User if any restrictions
"RTN","PRSPEAX",60,0)
 I ESRU D
"RTN","PRSPEAX",61,0)
 . W !!,"This extended absence includes some ESR days that can't be"
"RTN","PRSPEAX",62,0)
 . W !,"automatically updated if the absence is cancelled.  Note that"
"RTN","PRSPEAX",63,0)
 . W !,"ESR days before "_$$FMTE^XLFDT(PERSTR)_" won't be automatically modified."
"RTN","PRSPEAX",64,0)
 . W !,"If appropriate, please manually update those earlier ESR days.",!
"RTN","PRSPEAX",65,0)
 ;
"RTN","PRSPEAX",66,0)
 ; Confirm Cancel
"RTN","PRSPEAX",67,0)
 S DIR(0)="Y",DIR("A")="Do you want to cancel this extended absence" D ^DIR K DIR I 'Y L -^PRST(458.4,EAIEN) G:$D(DIRUT) EXIT G:'Y SEL
"RTN","PRSPEAX",68,0)
 ;
"RTN","PRSPEAX",69,0)
 ; e-sig
"RTN","PRSPEAX",70,0)
 D SIG^XUSESIG
"RTN","PRSPEAX",71,0)
 I X1="" L -^PRST(458.4,EAIEN) G AGAIN
"RTN","PRSPEAX",72,0)
 ;
"RTN","PRSPEAX",73,0)
 ; lock timecards for applicable opened pay periods
"RTN","PRSPEAX",74,0)
 D LCK^PRSPAPU(PRSIEN,PERSTR,PEREND,.PRSLCK,.PRSLCKE)
"RTN","PRSPEAX",75,0)
 ;
"RTN","PRSPEAX",76,0)
 ; if some time cards couldn't be locked then report error and quit
"RTN","PRSPEAX",77,0)
 I $D(PRSLCKE) D  G AGAIN
"RTN","PRSPEAX",78,0)
 . D TCULCK^PRSPAPU(PRSIEN,.PRSLCK) ; remove any TC locks
"RTN","PRSPEAX",79,0)
 . D RLCKE^PRSPAPU(.PRSLCKE,1) ; report failed locks
"RTN","PRSPEAX",80,0)
 . K PRSLCKE
"RTN","PRSPEAX",81,0)
 ;
"RTN","PRSPEAX",82,0)
 ; Update EA
"RTN","PRSPEAX",83,0)
 S PRSFDA(458.4,EAIEN_",",4)=$$NOW^XLFDT() ; d/t updated
"RTN","PRSPEAX",84,0)
 S PRSFDA(458.4,EAIEN_",",5)="X" ; status = cancelled
"RTN","PRSPEAX",85,0)
 D FILE^DIE("","PRSFDA") D MSG^DIALOG()
"RTN","PRSPEAX",86,0)
 ;
"RTN","PRSPEAX",87,0)
 ; Update ESRs
"RTN","PRSPEAX",88,0)
 D UEA^PRSPEAA(PRSIEN,PERSTR,PEREND)
"RTN","PRSPEAX",89,0)
 ;
"RTN","PRSPEAX",90,0)
 W !,"The extended absence has been cancelled."
"RTN","PRSPEAX",91,0)
 ;
"RTN","PRSPEAX",92,0)
 ; Unlock time cards
"RTN","PRSPEAX",93,0)
 D TCULCK^PRSPAPU(PRSIEN,.PRSLCK)
"RTN","PRSPEAX",94,0)
 ;
"RTN","PRSPEAX",95,0)
 ; unlock EA
"RTN","PRSPEAX",96,0)
 L -^PRST(458.4,EAIEN)
"RTN","PRSPEAX",97,0)
 ;
"RTN","PRSPEAX",98,0)
 ; Pause and repeat
"RTN","PRSPEAX",99,0)
AGAIN S DIR(0)="E" D ^DIR K DIR G:$D(DIRUT) EXIT
"RTN","PRSPEAX",100,0)
 G SEL
"RTN","PRSPEAX",101,0)
 ;
"RTN","PRSPEAX",102,0)
EXIT ; exit point
"RTN","PRSPEAX",103,0)
 Q
"RTN","PRSPEAX",104,0)
 ;
"RTN","PRSPEAX",105,0)
 ;PRSPEAX
"RTN","PRSPEEM")
0^32^B86830064^n/a
"RTN","PRSPEEM",1,0)
PRSPEEM ;HISC/MGD - ESR EXCEPTIONS FOR ENTIRE MEMORANDA ;06/15/05
"RTN","PRSPEEM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEEM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEEM",4,0)
 Q
"RTN","PRSPEEM",5,0)
PAY ; Payroll Entry
"RTN","PRSPEEM",6,0)
 S PRSTLV=7,QUITX=0
"RTN","PRSPEEM",7,0)
 D T0
"RTN","PRSPEEM",8,0)
 Q
"RTN","PRSPEEM",9,0)
 ;
"RTN","PRSPEEM",10,0)
SUP ; Supervisor Entry
"RTN","PRSPEEM",11,0)
 ;
"RTN","PRSPEEM",12,0)
 S PRSTLV=3,QUITX=0
"RTN","PRSPEEM",13,0)
T0 K DIR,^TMP($J,"PRSPEEM"),^TMP($J,"PRSPEEM EMP")
"RTN","PRSPEEM",14,0)
 D TOP ; print header
"RTN","PRSPEEM",15,0)
 D OMIT ; Prompt to omit current Pay Period
"RTN","PRSPEEM",16,0)
 I X="^" D EX Q
"RTN","PRSPEEM",17,0)
 D TLCHK ; Check for Supervisor of just 1 or mult T&L
"RTN","PRSPEEM",18,0)
 I MULT>1 D TL
"RTN","PRSPEEM",19,0)
 I MULT=1 D
"RTN","PRSPEEM",20,0)
 . S TL="ATL"_TLE
"RTN","PRSPEEM",21,0)
 . D EMP
"RTN","PRSPEEM",22,0)
 I '$D(^TMP($J,"PRSPEEM")) W !,"No exceptions found for input criteria." Q
"RTN","PRSPEEM",23,0)
 D SCRN1
"RTN","PRSPEEM",24,0)
 D EX
"RTN","PRSPEEM",25,0)
 ;
"RTN","PRSPEEM",26,0)
 Q
"RTN","PRSPEEM",27,0)
OMIT ; Prompt for Omit current pay period
"RTN","PRSPEEM",28,0)
 S DIR(0)="Y"
"RTN","PRSPEEM",29,0)
 S DIR("A")="Would you like to omit the current pay period from this report"
"RTN","PRSPEEM",30,0)
 D ^DIR K DIR
"RTN","PRSPEEM",31,0)
 S OMIT=Y
"RTN","PRSPEEM",32,0)
 Q
"RTN","PRSPEEM",33,0)
 ;
"RTN","PRSPEEM",34,0)
TLCHK ; Check for Supervisor of just 1 or mult T&L
"RTN","PRSPEEM",35,0)
 S MULT=0,I=""
"RTN","PRSPEEM",36,0)
 F  S I=$O(^PRST(455.5,"AS",DUZ,I)) Q:'I  D
"RTN","PRSPEEM",37,0)
 . S MULT=MULT+1,TLI=I,TLE=$P(^PRST(455.5,I,0),U,1)
"RTN","PRSPEEM",38,0)
 Q
"RTN","PRSPEEM",39,0)
 ;
"RTN","PRSPEEM",40,0)
TL ; Loop to enter T&Ls and employees
"RTN","PRSPEEM",41,0)
 N SEL ; local array to hold selected t&ls and employees
"RTN","PRSPEEM",42,0)
 S QUIT1=0
"RTN","PRSPEEM",43,0)
 F  D  Q:QUIT1
"RTN","PRSPEEM",44,0)
 . D ^PRSAUTL
"RTN","PRSPEEM",45,0)
 . I 'TLI S QUIT1=1 Q
"RTN","PRSPEEM",46,0)
 . I $D(SEL(TLI,"A")) D  Q
"RTN","PRSPEEM",47,0)
 ..  W !!,?5,"You have already selected all the employees in T&L unit ",$G(TLE),"."
"RTN","PRSPEEM",48,0)
 ..  W !,?5,"Select another T&L OR enter <return> to begin report."
"RTN","PRSPEEM",49,0)
 . D EMP
"RTN","PRSPEEM",50,0)
 Q
"RTN","PRSPEEM",51,0)
 ;
"RTN","PRSPEEM",52,0)
 ; Loop for individual employees in a T&L
"RTN","PRSPEEM",53,0)
EMP S QUIT2=0
"RTN","PRSPEEM",54,0)
 S DIR(0)="SM^A:All PT Physicians in the T&L;I:Individual PT Physicians"
"RTN","PRSPEEM",55,0)
 S DIR("A")="Enter Choice"
"RTN","PRSPEEM",56,0)
 D ^DIR K DIR
"RTN","PRSPEEM",57,0)
 ; Loop for All employee in a T&L
"RTN","PRSPEEM",58,0)
 I Y="A" D  Q
"RTN","PRSPEEM",59,0)
 . K SEL(TLI) S SEL(TLI,"A")=""
"RTN","PRSPEEM",60,0)
 . K ^TMP($J,"PRSPEEM",TLI)
"RTN","PRSPEEM",61,0)
 . S EMP="",TL="ATL"_TLE
"RTN","PRSPEEM",62,0)
 . F  S EMP=$O(^PRSPC(TL,EMP)) Q:EMP=""  D
"RTN","PRSPEEM",63,0)
 . . S PRSIEN=$O(^PRSPC(TL,EMP,0))
"RTN","PRSPEEM",64,0)
 . . Q:'PRSIEN
"RTN","PRSPEEM",65,0)
 . . D MEM ; Check for memos w/ status = ACTIVE or RECONCILIATION STARTED
"RTN","PRSPEEM",66,0)
 . . S QUIT2=1
"RTN","PRSPEEM",67,0)
 Q:QUIT2
"RTN","PRSPEEM",68,0)
 ;
"RTN","PRSPEEM",69,0)
 S PPI=+$G(^PRST(458,"AD",DT)),PRSDT=DT,PTPF=1
"RTN","PRSPEEM",70,0)
 F  D  Q:QUIT2
"RTN","PRSPEEM",71,0)
 . K DIC
"RTN","PRSPEEM",72,0)
 . S DIC("A")=$S('$D(SEL(TLI)):"Select EMPLOYEE: ",1:"Select Another EMPLOYEE: ")
"RTN","PRSPEEM",73,0)
 . S DIC(0)="AEQM",DIC="^PRSPC(",D="ATL"_TLE
"RTN","PRSPEEM",74,0)
 . S DIC("S")="I $P(^(0),""^"",8)=TLE,$D(^PRST(458.7,""B"",+Y)),'$D(SEL(TLI,+Y))"
"RTN","PRSPEEM",75,0)
 . W !
"RTN","PRSPEEM",76,0)
 . D IX^DIC S PRSIEN=+Y
"RTN","PRSPEEM",77,0)
 . I X=""!(X="^") S QUIT2=1 Q
"RTN","PRSPEEM",78,0)
 . S SEL(TLI,PRSIEN)=""
"RTN","PRSPEEM",79,0)
 . D MEM
"RTN","PRSPEEM",80,0)
 Q
"RTN","PRSPEEM",81,0)
 ;
"RTN","PRSPEEM",82,0)
MEM ; Check for memos w/ status of ACTIVE (2) or RECONCILIATION STARTED (3)
"RTN","PRSPEEM",83,0)
 N PPI
"RTN","PRSPEEM",84,0)
 S MIEN=""
"RTN","PRSPEEM",85,0)
 F  S MIEN=$O(^PRST(458.7,"B",PRSIEN,MIEN)) Q:'MIEN  D
"RTN","PRSPEEM",86,0)
 . S DATA0=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPEEM",87,0)
 . S STATUS=$P(DATA0,U,6)
"RTN","PRSPEEM",88,0)
 . Q:STATUS'=2&(STATUS'=3)
"RTN","PRSPEEM",89,0)
 . S TDAT=$P($G(^PRST(458.7,MIEN,4)),U,1)
"RTN","PRSPEEM",90,0)
 . I TDAT S TDAT=+$G(^PRST(458,"AD",TDAT)) ; IEN of termination PP 
"RTN","PRSPEEM",91,0)
 . ; Loop to check for any incomplete days in any PP of the memo
"RTN","PRSPEEM",92,0)
 . S PP=0
"RTN","PRSPEEM",93,0)
 . F I=1:1:26 S PPE=$P($G(^PRST(458.7,MIEN,9,I,0)),U) Q:PPE=""  D
"RTN","PRSPEEM",94,0)
 . . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPEEM",95,0)
 . . Q:'PPI
"RTN","PRSPEEM",96,0)
 . . ; If the memo was terminated, only check ESRs up to and
"RTN","PRSPEEM",97,0)
 . . ; including the Termination Date
"RTN","PRSPEEM",98,0)
 . . Q:TDAT&(PPI>TDAT)  ; Don't look past termination PP
"RTN","PRSPEEM",99,0)
 . . S PP=PP+1
"RTN","PRSPEEM",100,0)
 . . S DATA1=$G(^PRST(458,PPI,1)) ; FileMan Dates
"RTN","PRSPEEM",101,0)
 . . Q:'+$$MIEN^PRSPUT1(PRSIEN,$P(DATA1,U,I))
"RTN","PRSPEEM",102,0)
 . . F DAY=1:1:14 D
"RTN","PRSPEEM",103,0)
 . . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPEEM",104,0)
 . . . Q:ESRSTAT>3
"RTN","PRSPEEM",105,0)
 . . . S ESRSTATX=$$EXTERNAL^DILFD(458.02,146,"",ESRSTAT)
"RTN","PRSPEEM",106,0)
 . . . I ESRSTATX="" S ESRSTATX="UNKNOWN"
"RTN","PRSPEEM",107,0)
 . . . S Y=$P(DATA1,U,DAY)
"RTN","PRSPEEM",108,0)
 . . . D DD^%DT
"RTN","PRSPEEM",109,0)
 . . . S ^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP,DAY)=Y_U_ESRSTATX
"RTN","PRSPEEM",110,0)
 . . I $D(^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP)) D
"RTN","PRSPEEM",111,0)
 . . . S ^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP)=PPI_U_PPE
"RTN","PRSPEEM",112,0)
 . ; if no exceptions found set up first pay pereiod with no data message
"RTN","PRSPEEM",113,0)
 .   I '$D(^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN)) D
"RTN","PRSPEEM",114,0)
 ..     S PPE=$P($G(^PRST(458.7,MIEN,9,1,0)),U)
"RTN","PRSPEEM",115,0)
 ..     S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPEEM",116,0)
 ..     S ^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,1)=PPI_U_PPE_U_"*"
"RTN","PRSPEEM",117,0)
 ..     S ^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,1,0)="no exceptions found fo r entire memo"
"RTN","PRSPEEM",118,0)
 Q
"RTN","PRSPEEM",119,0)
 ;
"RTN","PRSPEEM",120,0)
TOP W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPEEM",121,0)
 W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPEEM",122,0)
 W !?22,"ESR EXCEPTIONS FOR ENTIRE MEMORANDA",!!
"RTN","PRSPEEM",123,0)
 Q
"RTN","PRSPEEM",124,0)
 ;
"RTN","PRSPEEM",125,0)
TOP1 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPEEM",126,0)
 S SCRTTLX="ESR EXCEPTIONS FOR ENTIRE MEMORANDA"
"RTN","PRSPEEM",127,0)
 I OMIT S SCRTTLX=SCRTTLX_" - CURRENT PP OMITTED"
"RTN","PRSPEEM",128,0)
 S $E(SCRTTL,$S(OMIT:12,1:22))=""
"RTN","PRSPEEM",129,0)
 S SCRTTL=SCRTTL_SCRTTLX
"RTN","PRSPEEM",130,0)
 W !,SCRTTL
"RTN","PRSPEEM",131,0)
 Q
"RTN","PRSPEEM",132,0)
 ;
"RTN","PRSPEEM",133,0)
SCRN1 ; Loop through employees and display data
"RTN","PRSPEEM",134,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPEEM",135,0)
 S TLI="",QUITX=0
"RTN","PRSPEEM",136,0)
 F  S TLI=$O(^TMP($J,"PRSPEEM",TLI)) Q:'TLI  D  Q:QUITX
"RTN","PRSPEEM",137,0)
 . S PRSIEN="",INDEX=1
"RTN","PRSPEEM",138,0)
 . F  S PRSIEN=$O(^TMP($J,"PRSPEEM",TLI,PRSIEN)) Q:'PRSIEN  D  Q:QUITX
"RTN","PRSPEEM",139,0)
 . . K ^TMP($J,"PRSPEEM EMP") ; Kill temporary employee array
"RTN","PRSPEEM",140,0)
 . . S MIEN="",(EMPQT,LIST)=0
"RTN","PRSPEEM",141,0)
 . . F  S MIEN=$O(^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN)) Q:'MIEN  D  Q:QUITX
"RTN","PRSPEEM",142,0)
 . . . S PP="",DAYCNT=0
"RTN","PRSPEEM",143,0)
 . . . F  S PP=$O(^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP)) Q:'PP  D  Q:QUITX
"RTN","PRSPEEM",144,0)
 . . . . S DATA=^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP),LIST=LIST+1
"RTN","PRSPEEM",145,0)
 . . . . S PPI=$P(DATA,U,1),PPE=$P(DATA,U,2)
"RTN","PRSPEEM",146,0)
 . . . . S ITEM(LIST)=DATA
"RTN","PRSPEEM",147,0)
 . . . . I DAYCNT=0 D  ; Display header prior to 1st PP in a memo
"RTN","PRSPEEM",148,0)
 . . . . . S ARRAY="^TMP($J,""PRSPEEM EMP"","
"RTN","PRSPEEM",149,0)
 . . . . . S SCRTTL="ESR EXCEPTIONS FOR ENTIRE MEMORANDA"
"RTN","PRSPEEM",150,0)
 . . . . . D HDR^PRSPUT1(PRSIEN,SCRTTL,ARRAY,INDEX,PPI)
"RTN","PRSPEEM",151,0)
 . . . . . D MEM^PRSPUT1(PRSIEN,MIEN,ARRAY)
"RTN","PRSPEEM",152,0)
 . . . . . D AL^PRSPUT3(PRSIEN,ARRAY)
"RTN","PRSPEEM",153,0)
 . . . . . S INDEX="",INDEX=$O(^TMP($J,"PRSPEEM EMP",INDEX),-1)
"RTN","PRSPEEM",154,0)
 . . . . . S TEXT="",INDEX=INDEX+1
"RTN","PRSPEEM",155,0)
 . . . . . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPEEM",156,0)
 . . . . . S TEXT=" #  Pay Period  Date          Status"
"RTN","PRSPEEM",157,0)
 . . . . . D A1^PRSPUT1
"RTN","PRSPEEM",158,0)
 . . . . . S TEXT="------------------------------------"
"RTN","PRSPEEM",159,0)
 . . . . . D A1^PRSPUT1
"RTN","PRSPEEM",160,0)
 . . . . I $P(DATA,U,3)="*" S TEXT="No exceptions found for entire memo" D A1^PRSPUT1 Q
"RTN","PRSPEEM",161,0)
 . . . . S TEXT=$J(PP,2),$E(TEXT,5)="",TEXT=TEXT_PPE
"RTN","PRSPEEM",162,0)
 . . . . F DAY=1:1:14 D  Q:QUITX
"RTN","PRSPEEM",163,0)
 . . . . . Q:'$D(^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP,DAY))
"RTN","PRSPEEM",164,0)
 . . . . . S DATA=^TMP($J,"PRSPEEM",TLI,PRSIEN,MIEN,PP,DAY)
"RTN","PRSPEEM",165,0)
 . . . . . S $E(TEXT,17)="",TEXT=TEXT_$P(DATA,U,1) ; External Date
"RTN","PRSPEEM",166,0)
 . . . . . S $E(TEXT,31)="",TEXT=TEXT_$P(DATA,U,2) ; External Status
"RTN","PRSPEEM",167,0)
 . . . . . S DAYCNT=DAYCNT+1
"RTN","PRSPEEM",168,0)
 . . . . . D A1^PRSPUT1
"RTN","PRSPEEM",169,0)
 . . . . . I $Y>(IOSL-3) D PSE
"RTN","PRSPEEM",170,0)
 . . . Q:QUITX
"RTN","PRSPEEM",171,0)
 . . . S $E(TEXT,31,36)="------",INDEX=INDEX+1
"RTN","PRSPEEM",172,0)
 . . . D A1^PRSPUT1
"RTN","PRSPEEM",173,0)
 . . . S $E(TEXT,20)="",TEXT=TEXT_"Total Days: "_DAYCNT
"RTN","PRSPEEM",174,0)
 . . . D A1^PRSPUT1
"RTN","PRSPEEM",175,0)
 . . . I $P(DATA,U,3)="*" D
"RTN","PRSPEEM",176,0)
 . . . .  S QUITX=$$ASK^PRSLIB00(1)
"RTN","PRSPEEM",177,0)
 . . . E  D
"RTN","PRSPEEM",178,0)
 . . . .  D ACTION
"RTN","PRSPEEM",179,0)
 . . . I $E(IOST,1,2)="C-" W @IOF
"RTN","PRSPEEM",180,0)
 Q
"RTN","PRSPEEM",181,0)
 ;
"RTN","PRSPEEM",182,0)
ACTION ; Prompt for action
"RTN","PRSPEEM",183,0)
 S EMPQT=0
"RTN","PRSPEEM",184,0)
 F  D  Q:QUITX!(EMPQT)
"RTN","PRSPEEM",185,0)
 . S TEXT="(P)rint list, (S)elect Item or press Enter to "
"RTN","PRSPEEM",186,0)
 . S TEXT=TEXT_"continue to next employee"
"RTN","PRSPEEM",187,0)
 . W !!,TEXT
"RTN","PRSPEEM",188,0)
 . W !!,"Enter Choice: "
"RTN","PRSPEEM",189,0)
 . R CHOICE:DT
"RTN","PRSPEEM",190,0)
 . S CHOICE=$$UPPER^PRSRUTL(CHOICE)
"RTN","PRSPEEM",191,0)
 . I CHOICE="" S EMPQT=1 Q   ; Go to next employee
"RTN","PRSPEEM",192,0)
 . I CHOICE="^" S QUITX=1 Q  ; Terminate report
"RTN","PRSPEEM",193,0)
 . I CHOICE'="P"&(CHOICE'="S") D  Q
"RTN","PRSPEEM",194,0)
 . . W !!,"Enter P, S or ^ to Quit or press Enter to continue to next employee."
"RTN","PRSPEEM",195,0)
 . I CHOICE="P" D  Q:EMPQT
"RTN","PRSPEEM",196,0)
 . . D DVC1
"RTN","PRSPEEM",197,0)
 . . I POP S EMPQT=1
"RTN","PRSPEEM",198,0)
 . I CHOICE="S" D
"RTN","PRSPEEM",199,0)
 . . F  D  Q:EMPQT!(QUITX)
"RTN","PRSPEEM",200,0)
 . . . I $E(IOST,1,2)="C-" W @IOF
"RTN","PRSPEEM",201,0)
 . . . F I=1:1 Q:'$D(ITEM(I))  W !,I,?5,$P(ITEM(I),U,2)
"RTN","PRSPEEM",202,0)
 . . . W !!,"Select a number between 1 and ",LIST_" : "
"RTN","PRSPEEM",203,0)
 . . . R ITEM:DT
"RTN","PRSPEEM",204,0)
 . . . S ITEM=$$UPPER^PRSRUTL(ITEM)
"RTN","PRSPEEM",205,0)
 . . . I ITEM="" S EMPQT=1 Q   ; Go to next employee
"RTN","PRSPEEM",206,0)
 . . . I ITEM="^" S QUITX=1 Q  ; Terminate report
"RTN","PRSPEEM",207,0)
 . . . Q:'$D(ITEM(ITEM))
"RTN","PRSPEEM",208,0)
 . . . S PPI=+ITEM(ITEM)
"RTN","PRSPEEM",209,0)
 . . . D DVC2
"RTN","PRSPEEM",210,0)
 ;
"RTN","PRSPEEM",211,0)
 Q
"RTN","PRSPEEM",212,0)
 ;
"RTN","PRSPEEM",213,0)
LOOP1 ; Loop to display Summary Screen with list of outstanding ESRs
"RTN","PRSPEEM",214,0)
 I '$D(^TMP($J,"PRSPEEM EMP")) W !,"No part-time physician ESR Exceptions found for selected criteria." Q
"RTN","PRSPEEM",215,0)
 S INDX=""
"RTN","PRSPEEM",216,0)
 F  S INDX=$O(^TMP($J,"PRSPEEM EMP",INDX)) Q:'INDX  D
"RTN","PRSPEEM",217,0)
 . S TEXT=^TMP($J,"PRSPEEM EMP",INDX)
"RTN","PRSPEEM",218,0)
 . W !,TEXT
"RTN","PRSPEEM",219,0)
 Q
"RTN","PRSPEEM",220,0)
 ;
"RTN","PRSPEEM",221,0)
DVC1 ; Display Summary Screen with list of outstanding ESRs
"RTN","PRSPEEM",222,0)
 W !
"RTN","PRSPEEM",223,0)
 K IOP,%ZIS
"RTN","PRSPEEM",224,0)
 S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPEEM",225,0)
 D ^%ZIS K %ZIS,IOP
"RTN","PRSPEEM",226,0)
 Q:POP
"RTN","PRSPEEM",227,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPEEM",228,0)
 .  S ZTRTN="LOOP1^PRSPEEM"
"RTN","PRSPEEM",229,0)
 .  S ZTSAVE("^TMP($J,""PRSPEEM EMP"",")=""
"RTN","PRSPEEM",230,0)
 .  S ZTDESC="PRS PTP EXCEPTS"
"RTN","PRSPEEM",231,0)
 .  D ^%ZTLOAD W !,$S($D(ZTSK):"Request Queued!",1:"Request Canceled!")
"RTN","PRSPEEM",232,0)
 .  K ZTSK,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","PRSPEEM",233,0)
 .  D HOME^%ZIS
"RTN","PRSPEEM",234,0)
 U IO D LOOP1
"RTN","PRSPEEM",235,0)
 D ^%ZISC K %ZIS,IOP
"RTN","PRSPEEM",236,0)
 D H1 ; pause screen
"RTN","PRSPEEM",237,0)
 Q
"RTN","PRSPEEM",238,0)
 ;
"RTN","PRSPEEM",239,0)
DVC2 ; Display PP ESR
"RTN","PRSPEEM",240,0)
 W !
"RTN","PRSPEEM",241,0)
 K IOP,%ZIS
"RTN","PRSPEEM",242,0)
 S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPEEM",243,0)
 D ^%ZIS K %ZIS,IOP
"RTN","PRSPEEM",244,0)
 Q:POP
"RTN","PRSPEEM",245,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPEEM",246,0)
 .  S ZTRTN="DIS^PRSPDESR"
"RTN","PRSPEEM",247,0)
 .  S ZTSAVE("PRSIEN")="",ZTSAVE("PPI")="",ZTSAVE("PPE")=""
"RTN","PRSPEEM",248,0)
 .  S ZTDESC="PRS PTP DISPLAY ESR"
"RTN","PRSPEEM",249,0)
 .  D ^%ZTLOAD W !,$S($D(ZTSK):"Request Queued!",1:"Request Canceled!")
"RTN","PRSPEEM",250,0)
 .  K ZTSK,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","PRSPEEM",251,0)
 .  D HOME^%ZIS
"RTN","PRSPEEM",252,0)
 .  N HOLD S HOLD=$$ASK^PRSLIB00(1)
"RTN","PRSPEEM",253,0)
 U IO D DIS^PRSPDESR
"RTN","PRSPEEM",254,0)
 D ^%ZISC K %ZIS,IOP
"RTN","PRSPEEM",255,0)
 D H1 ; pause screen
"RTN","PRSPEEM",256,0)
 Q
"RTN","PRSPEEM",257,0)
 ;
"RTN","PRSPEEM",258,0)
 ;====================================================================
"RTN","PRSPEEM",259,0)
 ;
"RTN","PRSPEEM",260,0)
PSE ; Pause for screen breaks
"RTN","PRSPEEM",261,0)
 W !
"RTN","PRSPEEM",262,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue"
"RTN","PRSPEEM",263,0)
 D ^DIR
"RTN","PRSPEEM",264,0)
 I X="^" S QUITX=1 Q
"RTN","PRSPEEM",265,0)
 W @IOF
"RTN","PRSPEEM",266,0)
 Q
"RTN","PRSPEEM",267,0)
 ; 
"RTN","PRSPEEM",268,0)
H1 I $E(IOST,1,2)="C-" R !!,"Press RETURN to Continue.",X:DTIME S:'$T!(X["^") QT=1
"RTN","PRSPEEM",269,0)
 Q
"RTN","PRSPEEM",270,0)
EX ; Clean up variables
"RTN","PRSPEEM",271,0)
 K ARRAY,CHOICE,D,DASH,DATA,DATA0,DATA1,DAY,DAYCNT,DFN
"RTN","PRSPEEM",272,0)
 K EMP,EMPQT,ESRSTAT,ESRSTATX,I,IDAYS,INDEX,INDX,ITEM,LIST,MIEN
"RTN","PRSPEEM",273,0)
 K MULT,OMIT,POP,PP,PPE,PPI,PRSAPGM,PRSDT,PRSIEN,PRSTLV,PTPF
"RTN","PRSPEEM",274,0)
 K QT,QUIT1,QUIT2,QUITX,SCRTTL,SCRTTLX,STATUS,TDAT,TEXT,TL,TLE,TLI,X,Y
"RTN","PRSPEEM",275,0)
 Q
"RTN","PRSPEM")
0^12^B63374576^n/a
"RTN","PRSPEM",1,0)
PRSPEM ;WOIFO/MGD - PTP ENTER MEMORANDUM ;06/01/05
"RTN","PRSPEM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPEM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPEM",4,0)
 ;
"RTN","PRSPEM",5,0)
 ;The following routine will allow HR to enter a Part Time Physician's
"RTN","PRSPEM",6,0)
 ;Memorandum of Service Level Expectations.  Memorandums will cover 364
"RTN","PRSPEM",7,0)
 ;days (26 full Pay Periods) and the Agreed Hours must be equally
"RTN","PRSPEM",8,0)
 ;divisible by 26.
"RTN","PRSPEM",9,0)
 ;
"RTN","PRSPEM",10,0)
 Q
"RTN","PRSPEM",11,0)
MAIN ; Main Driver
"RTN","PRSPEM",12,0)
 N DFN,STDAT,ENDAT,AHRS,ICOM,ESOK
"RTN","PRSPEM",13,0)
 ; Prompt for Part Time Physician
"RTN","PRSPEM",14,0)
 D PTP
"RTN","PRSPEM",15,0)
 I PRSIEN'>0 D KILL Q
"RTN","PRSPEM",16,0)
 ; Display Header info to validate the correct employee was chosen
"RTN","PRSPEM",17,0)
 D HDR
"RTN","PRSPEM",18,0)
 ; Prompt and validate Start Date. Calculate and display End Date
"RTN","PRSPEM",19,0)
 S QUIT=0
"RTN","PRSPEM",20,0)
 F  D  Q:QUIT!('OVERLAP)
"RTN","PRSPEM",21,0)
 . S OVERLAP=0
"RTN","PRSPEM",22,0)
 . D START
"RTN","PRSPEM",23,0)
 . Q:QUIT
"RTN","PRSPEM",24,0)
 . D END
"RTN","PRSPEM",25,0)
 I QUIT D KILL Q
"RTN","PRSPEM",26,0)
 ;
"RTN","PRSPEM",27,0)
 ; Prompt and validate Agreed Hours
"RTN","PRSPEM",28,0)
 D AHRS
"RTN","PRSPEM",29,0)
 I Y'>0 D KILL Q
"RTN","PRSPEM",30,0)
 ; Prompt for Initial Comments
"RTN","PRSPEM",31,0)
 D ICOM
"RTN","PRSPEM",32,0)
 I Y="^" D KILL Q
"RTN","PRSPEM",33,0)
 ; Prompt for E-Sig and save if confirmed
"RTN","PRSPEM",34,0)
 D ESIG
"RTN","PRSPEM",35,0)
 Q
"RTN","PRSPEM",36,0)
 ;
"RTN","PRSPEM",37,0)
PTP ; Prompt for Part Time Physician
"RTN","PRSPEM",38,0)
 N SSN
"RTN","PRSPEM",39,0)
 W !
"RTN","PRSPEM",40,0)
 S DIC="^PRSPC(",DIC(0)="AEMQZ",DIC("A")="Select EMPLOYEE: "
"RTN","PRSPEM",41,0)
 D ^DIC K DIC
"RTN","PRSPEM",42,0)
 S PRSIEN=+Y
"RTN","PRSPEM",43,0)
 Q:PRSIEN<1
"RTN","PRSPEM",44,0)
 ;
"RTN","PRSPEM",45,0)
 ; determine associated NEW PERSON entry
"RTN","PRSPEM",46,0)
 S SSN=$$GET1^DIQ(450,PRSIEN_",",8,"I")
"RTN","PRSPEM",47,0)
 S IEN200=$S(SSN="":"",1:$O(^VA(200,"SSN",SSN,0)))
"RTN","PRSPEM",48,0)
 I 'IEN200 D
"RTN","PRSPEM",49,0)
 . W $C(7),!!,"Can't find an entry in the NEW PERSON file for this employee."
"RTN","PRSPEM",50,0)
 . W !,"They must be added as a user before the memorandum is created."
"RTN","PRSPEM",51,0)
 . S PRSIEN=-1
"RTN","PRSPEM",52,0)
 Q
"RTN","PRSPEM",53,0)
 ;
"RTN","PRSPEM",54,0)
HDR ; Display PTP info
"RTN","PRSPEM",55,0)
 S SCRTTL="Enter PT Physician Memoranda"
"RTN","PRSPEM",56,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL)
"RTN","PRSPEM",57,0)
 W !
"RTN","PRSPEM",58,0)
 Q
"RTN","PRSPEM",59,0)
 ;
"RTN","PRSPEM",60,0)
START ; Prompt for Start Date
"RTN","PRSPEM",61,0)
 ; This subroutine prompts for the date then goes through several
"RTN","PRSPEM",62,0)
 ; checks if any check fails we give an explanation message and
"RTN","PRSPEM",63,0)
 ; reprompt for the date.  If no checks fail we set valid to
"RTN","PRSPEM",64,0)
 ; quit.  The user must ^ or timeout to quit.
"RTN","PRSPEM",65,0)
 ;
"RTN","PRSPEM",66,0)
 N VALID S VALID=0
"RTN","PRSPEM",67,0)
 F  D  Q:QUIT!(VALID)
"RTN","PRSPEM",68,0)
 . N Y,DIR,DIRUT S DIR(0)="458.7,1A0",DIR("A")="Start Date: " D ^DIR
"RTN","PRSPEM",69,0)
 .; Validate that the Start Date is the first day of a Pay Period.
"RTN","PRSPEM",70,0)
 . I $D(DIRUT) S QUIT=1 Q
"RTN","PRSPEM",71,0)
 . S D1=+Y
"RTN","PRSPEM",72,0)
 . D PP^PRSAPPU
"RTN","PRSPEM",73,0)
 . I DAY'=1 D  Q
"RTN","PRSPEM",74,0)
 . . D SILMO^PRSLIB01(D1)
"RTN","PRSPEM",75,0)
 . . W !,"You entered ",$$EXTERNAL^DILFD(458.7,1,,D1)
"RTN","PRSPEM",76,0)
 . . W !!,"The Start Date must be the first day of a Pay Period."
"RTN","PRSPEM",77,0)
 . . W !,"Please re-enter.",!
"RTN","PRSPEM",78,0)
 . S STDAT=D1
"RTN","PRSPEM",79,0)
 .; Check to see if this employee's timecard for this PP is
"RTN","PRSPEM",80,0)
 .; in a status other than Timekeeper
"RTN","PRSPEM",81,0)
 . S PPI=$P($G(^PRST(458,"AD",D1)),U)
"RTN","PRSPEM",82,0)
 . I (D1<DT),($G(PPI)'>0) D  Q
"RTN","PRSPEM",83,0)
 . .  W !!,?3,"There is no pay period on file for that past date."
"RTN","PRSPEM",84,0)
 .;
"RTN","PRSPEM",85,0)
 .; for all past dates the employee must have a timecard in a
"RTN","PRSPEM",86,0)
 .; a status of 'T"
"RTN","PRSPEM",87,0)
 .;
"RTN","PRSPEM",88,0)
 . I (D1<DT),($P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="T") D  Q
"RTN","PRSPEM",89,0)
 ..  W !!,?3,"To enter memos for past dates, the employee must have a"
"RTN","PRSPEM",90,0)
 ..  W !,?3,"timecard in Timekeeper status."
"RTN","PRSPEM",91,0)
 .;
"RTN","PRSPEM",92,0)
 .; for future dates when there is a timecard we must also be in
"RTN","PRSPEM",93,0)
 .; timekeeper status
"RTN","PRSPEM",94,0)
 .; 
"RTN","PRSPEM",95,0)
 . I (D1'<DT),($G(PPI)>0),$D(^PRST(458,PPI,"E",PRSIEN,0)),($P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="T") D  Q
"RTN","PRSPEM",96,0)
 . . W !!,?3,"This employee's timecard has a status other than "
"RTN","PRSPEM",97,0)
 . . W !,?3,"Timekeeper.  It will have to be returned to the Timekeeper "
"RTN","PRSPEM",98,0)
 . . W !,?3,"before a memo covering this pay period can be entered."
"RTN","PRSPEM",99,0)
 .;
"RTN","PRSPEM",100,0)
 .; If we make it through all the checks set valid and QUIT only gets
"RTN","PRSPEM",101,0)
 .; set when we abort or timeout
"RTN","PRSPEM",102,0)
 . S VALID=1
"RTN","PRSPEM",103,0)
 Q
"RTN","PRSPEM",104,0)
 ;
"RTN","PRSPEM",105,0)
END ; Calculate and display End Date
"RTN","PRSPEM",106,0)
 N X1,X2,X,Y
"RTN","PRSPEM",107,0)
 S X1=D1,X2=363
"RTN","PRSPEM",108,0)
 D C^%DTC
"RTN","PRSPEM",109,0)
 S ENDDAT=X,Y=X
"RTN","PRSPEM",110,0)
 D DD^%DT
"RTN","PRSPEM",111,0)
 W !,"  End Date: ",Y
"RTN","PRSPEM",112,0)
 K D1
"RTN","PRSPEM",113,0)
 ; Verify that there are no other Memorandums covering this same time
"RTN","PRSPEM",114,0)
 S IEN=""
"RTN","PRSPEM",115,0)
 F  S IEN=$O(^PRST(458.7,"B",PRSIEN,IEN)) Q:IEN=""  D  Q:QUIT
"RTN","PRSPEM",116,0)
 . S DATA=$G(^PRST(458.7,IEN,0))
"RTN","PRSPEM",117,0)
 . Q:DATA=""
"RTN","PRSPEM",118,0)
 . S START=$P(DATA,U,2),END=$P(DATA,U,3),STATUS=$P(DATA,U,6)
"RTN","PRSPEM",119,0)
 . S TDAT=$P($G(^PRST(458.7,IEN,4)),U,1) ; Termination Date
"RTN","PRSPEM",120,0)
 . S END=$S(TDAT:TDAT,1:END)
"RTN","PRSPEM",121,0)
 . I STDAT'>START,ENDDAT'<START D OVRLAP
"RTN","PRSPEM",122,0)
 . I STDAT'>END,ENDDAT'<END D OVRLAP
"RTN","PRSPEM",123,0)
 ; If all checks have passed, calculate the PPs covered by the Memo
"RTN","PRSPEM",124,0)
 I $G(PPE)?2N1"-"2N D CALPP
"RTN","PRSPEM",125,0)
 Q
"RTN","PRSPEM",126,0)
 ;
"RTN","PRSPEM",127,0)
OVRLAP ; Display warning when dates cover an existing memo
"RTN","PRSPEM",128,0)
 ;
"RTN","PRSPEM",129,0)
 S Y=START ;       START DATE
"RTN","PRSPEM",130,0)
 D DD^%DT
"RTN","PRSPEM",131,0)
 S START=Y
"RTN","PRSPEM",132,0)
 S Y=END ;       END DATE
"RTN","PRSPEM",133,0)
 D DD^%DT
"RTN","PRSPEM",134,0)
 S END=Y
"RTN","PRSPEM",135,0)
 W !!,"These dates overlap the following memorandum:"
"RTN","PRSPEM",136,0)
 W !,"Start Date: ",START," - "
"RTN","PRSPEM",137,0)
 W $S(TDAT:"Termination Date: ",1:"End Date: "),END
"RTN","PRSPEM",138,0)
 S OVERLAP=1
"RTN","PRSPEM",139,0)
 Q
"RTN","PRSPEM",140,0)
 ;
"RTN","PRSPEM",141,0)
AHRS ; Display list of Agreed Hours
"RTN","PRSPEM",142,0)
 W !!,"Agreed Hours must be equally divisible by 26 Pay Periods."
"RTN","PRSPEM",143,0)
 W !!,"1/8 = 260, 1/4 = 520, 3/8 = 780, 1/2 = 1040, 5/8 = 1300, "
"RTN","PRSPEM",144,0)
 W "3/4 = 1560, 7/8 = 1820",!
"RTN","PRSPEM",145,0)
 S DIR(0)="NO",DIR("A")="Agreed Hours"
"RTN","PRSPEM",146,0)
 D ^DIR
"RTN","PRSPEM",147,0)
 ; Verify that Agreed Hours is divisible by 26.
"RTN","PRSPEM",148,0)
 I Y#26 G AHRS
"RTN","PRSPEM",149,0)
 S AHRS=Y
"RTN","PRSPEM",150,0)
 Q
"RTN","PRSPEM",151,0)
 ;
"RTN","PRSPEM",152,0)
ICOM ; Prompt for Initial Comments
"RTN","PRSPEM",153,0)
 W !
"RTN","PRSPEM",154,0)
 S DIR(0)="FO^1:240^^O",DIR("A")="Initial Comments" D ^DIR
"RTN","PRSPEM",155,0)
 S ICOM=Y
"RTN","PRSPEM",156,0)
 Q
"RTN","PRSPEM",157,0)
 ;
"RTN","PRSPEM",158,0)
ESIG ; Prompt for Electronic Signature and store fields in #458.7
"RTN","PRSPEM",159,0)
 ;
"RTN","PRSPEM",160,0)
 N ESOK,HOL
"RTN","PRSPEM",161,0)
 K PRSFDA,IEN4587
"RTN","PRSPEM",162,0)
 D ^PRSAES
"RTN","PRSPEM",163,0)
 I ESOK D
"RTN","PRSPEM",164,0)
 . ; Create entry in #458.7
"RTN","PRSPEM",165,0)
 . S PRSFDA(458.7,"+1,",.01)=PRSIEN ;   EMPLOYEE
"RTN","PRSPEM",166,0)
 . D UPDATE^DIE("","PRSFDA","IEN4587"),MSG^DIALOG()
"RTN","PRSPEM",167,0)
 . S IEN4587=IEN4587(1)_","
"RTN","PRSPEM",168,0)
 . S PRSFDA(458.7,IEN4587,1)=STDAT ;  START DATE
"RTN","PRSPEM",169,0)
 . S PRSFDA(458.7,IEN4587,2)=ENDDAT ; END DATE
"RTN","PRSPEM",170,0)
 . S PRSFDA(458.7,IEN4587,3)=AHRS ;   AGREED HOURS
"RTN","PRSPEM",171,0)
 . S PRSFDA(458.7,IEN4587,4)=ICOM ;   INITIAL COMMENTS
"RTN","PRSPEM",172,0)
 . ;
"RTN","PRSPEM",173,0)
 . ; Check to see if 1st pay period covered by memo is opened
"RTN","PRSPEM",174,0)
 . ; 1 = NOT STARTED  2 = ACTIVE
"RTN","PRSPEM",175,0)
 . S PRSFDA(458.7,IEN4587,5)=$S($D(^PRST(458,"AD",STDAT)):2,1:1)
"RTN","PRSPEM",176,0)
 . S PRSFDA(458.7,IEN4587,6)=DUZ  ;   ENTERED BY
"RTN","PRSPEM",177,0)
 . D NOW^%DTC
"RTN","PRSPEM",178,0)
 . S PRSFDA(458.7,IEN4587,7)=% ;      DATE/TIME ENTERED
"RTN","PRSPEM",179,0)
 . D FILE^DIE("","PRSFDA",),MSG^DIALOG()  ; Set fields into 0 node
"RTN","PRSPEM",180,0)
 . ;
"RTN","PRSPEM",181,0)
 . ; Initialize the PPs within the Memo (#458.701 multiple)
"RTN","PRSPEM",182,0)
 . F I=1:1:26 D
"RTN","PRSPEM",183,0)
 . . S PRSFDA(458.701,"+"_I_","_IEN4587,.01)=$P(PPESTR,U,I)
"RTN","PRSPEM",184,0)
 . D UPDATE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSPEM",185,0)
 . ;
"RTN","PRSPEM",186,0)
 . ; Allocate the security key to the PTP if they don't already hold it
"RTN","PRSPEM",187,0)
 . I '$D(^XUSEC("PRSP EMP",IEN200)) D
"RTN","PRSPEM",188,0)
 . . N KEYIEN
"RTN","PRSPEM",189,0)
 . . S KEYIEN=$$FIND1^DIC(19.1,,"X","PRSP EMP")
"RTN","PRSPEM",190,0)
 . . I 'KEYIEN D  Q
"RTN","PRSPEM",191,0)
 . . . W !!,"PRSP EMP key was not found in the 19.1 file."
"RTN","PRSPEM",192,0)
 . . S PRSFDA(200.051,"?+1,"_IEN200_",",.01)=KEYIEN
"RTN","PRSPEM",193,0)
 . . S PRSIENS(1)=KEYIEN
"RTN","PRSPEM",194,0)
 . . D UPDATE^DIE("","PRSFDA","PRSIENS"),MSG^DIALOG()
"RTN","PRSPEM",195,0)
 ;
"RTN","PRSPEM",196,0)
 ; Check to see if PPs covered by the memo are already opened
"RTN","PRSPEM",197,0)
 Q:'$$MIEN^PRSPUT1(PRSIEN,STDAT)
"RTN","PRSPEM",198,0)
 S PPI=+$G(^PRST(458,"AD",STDAT))
"RTN","PRSPEM",199,0)
 Q:'PPI
"RTN","PRSPEM",200,0)
 ; Loop thru pay periods in file 458
"RTN","PRSPEM",201,0)
 S PPI=PPI-.001 ; init PPI so loop will include 1st PP covered by memo
"RTN","PRSPEM",202,0)
 F  S PPI=$O(^PRST(458,PPI)) Q:'PPI  D
"RTN","PRSPEM",203,0)
 . N PRSD
"RTN","PRSPEM",204,0)
 . ; Quit if the employee doesn't have a timecard for this PP yet.
"RTN","PRSPEM",205,0)
 . ; When the Timekeeper creates the timecard it will update the ESR as
"RTN","PRSPEM",206,0)
 . ; needed
"RTN","PRSPEM",207,0)
 . Q:'$D(^PRST(458,PPI,"E",PRSIEN,0))
"RTN","PRSPEM",208,0)
 . ; Quit if timecard does not have status = Timekeeper
"RTN","PRSPEM",209,0)
 . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="T"
"RTN","PRSPEM",210,0)
 . ;
"RTN","PRSPEM",211,0)
 . ; clear any Timecard exceptions, remarks, and posting status
"RTN","PRSPEM",212,0)
 . F PRSD=1:1:14 K ^PRST(458,PPI,"E",PRSIEN,"D",PRSD,2),^(3),^(10)
"RTN","PRSPEM",213,0)
 . ; Call to initialize ESR
"RTN","PRSPEM",214,0)
 . D ^PRSAPPH ; Set up HOL and PDT
"RTN","PRSPEM",215,0)
 . D ESRUPDT^PRSPUT3(PPI,PRSIEN)
"RTN","PRSPEM",216,0)
 . ; Call to Autopost PT Phy Leave
"RTN","PRSPEM",217,0)
 . D PLPP^PRSPLVA(PRSIEN,PPI)
"RTN","PRSPEM",218,0)
 . ; Call to Autopost PT Phy Extended Absence
"RTN","PRSPEM",219,0)
 . D PEAPP^PRSPEAA(PRSIEN,PPI)
"RTN","PRSPEM",220,0)
 ;
"RTN","PRSPEM",221,0)
 Q
"RTN","PRSPEM",222,0)
 ;
"RTN","PRSPEM",223,0)
CALPP ; Calculate the PPs covered by the memorandum
"RTN","PRSPEM",224,0)
 S PPESTR=""
"RTN","PRSPEM",225,0)
 S (STDATX,D1)=STDAT
"RTN","PRSPEM",226,0)
 D PP^PRSAPPU
"RTN","PRSPEM",227,0)
 S PPESTR=PPESTR_PPE_U
"RTN","PRSPEM",228,0)
 F I=1:1:25 D
"RTN","PRSPEM",229,0)
 . S X1=STDATX,X2=14
"RTN","PRSPEM",230,0)
 . D C^%DTC
"RTN","PRSPEM",231,0)
 . S (D1,STDATX)=X
"RTN","PRSPEM",232,0)
 . D PP^PRSAPPU
"RTN","PRSPEM",233,0)
 . S PPESTR=PPESTR_PPE_$S(I=25:"",1:"^")
"RTN","PRSPEM",234,0)
 Q
"RTN","PRSPEM",235,0)
 ;
"RTN","PRSPEM",236,0)
KILL ; Clean up variables
"RTN","PRSPEM",237,0)
 ;
"RTN","PRSPEM",238,0)
 K AHRS,DATA,DAY,DIR,END,ENDDAT,I,ICOM,IEN,IEN200,IEN4587,OVERLAP
"RTN","PRSPEM",239,0)
 K PPE,PPI,PPESTR,PRSFDA,PRSIEN,PRSIENS,QUIT,SCRTTL,START,STATUS
"RTN","PRSPEM",240,0)
 K STDAT,STDATX,TDAT,X,Y,%,%DT
"RTN","PRSPEM",241,0)
 Q
"RTN","PRSPESR")
0^1^B47968851^n/a
"RTN","PRSPESR",1,0)
PRSPESR ;WOIFO/JAH - part-time physicians ESR Edit ;11/16/04
"RTN","PRSPESR",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPESR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPESR",4,0)
 ;
"RTN","PRSPESR",5,0)
 ;Allow PTP employee w/ a memorandum to review memo status
"RTN","PRSPESR",6,0)
 ;then edit, update, and sign daily ESRs.
"RTN","PRSPESR",7,0)
 ;call from option-"Electronic Subsidiary Record".   
"RTN","PRSPESR",8,0)
 Q
"RTN","PRSPESR",9,0)
 ;
"RTN","PRSPESR",10,0)
MAIN ; main entry point called from ESR edit option
"RTN","PRSPESR",11,0)
 N PICKLIST,PRSIEN,OUT,PLIST,PICK
"RTN","PRSPESR",12,0)
 ;
"RTN","PRSPESR",13,0)
 ;get users PRSIEN
"RTN","PRSPESR",14,0)
 S PRSIEN=$$PRSIEN^PRSPUT2(1)
"RTN","PRSPESR",15,0)
 Q:PRSIEN'>0
"RTN","PRSPESR",16,0)
 ;
"RTN","PRSPESR",17,0)
 ;While PTP is not done continue 
"RTN","PRSPESR",18,0)
 ;
"RTN","PRSPESR",19,0)
 S OUT=0
"RTN","PRSPESR",20,0)
 F  D  Q:OUT
"RTN","PRSPESR",21,0)
 .; BUILD OPTION PICK LIST--MEMO ACTIONS, PRIOR, CURRENT AND NEXT PP ESRs
"RTN","PRSPESR",22,0)
 .;
"RTN","PRSPESR",23,0)
 .;
"RTN","PRSPESR",24,0)
 .  K PLIST
"RTN","PRSPESR",25,0)
 .  D BLDPICK(.PLIST,PRSIEN)
"RTN","PRSPESR",26,0)
 .;
"RTN","PRSPESR",27,0)
 .  W @IOF,!
"RTN","PRSPESR",28,0)
 .; get out if there's nothing in the list.
"RTN","PRSPESR",29,0)
 .  I '$D(PLIST) D  Q
"RTN","PRSPESR",30,0)
 ..    W !,"No ESR records available.",!!!
"RTN","PRSPESR",31,0)
 ..    S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSPESR",32,0)
 ..    S OUT=1
"RTN","PRSPESR",33,0)
 .; get users choice of action
"RTN","PRSPESR",34,0)
 .  S PICK=$$CHOICE(.PLIST)
"RTN","PRSPESR",35,0)
 .  I PICK=0 S OUT=1 Q
"RTN","PRSPESR",36,0)
 .  I $P(PLIST(PICK),U)="M" D MEMO(PRSIEN,PLIST(PICK)) ;### CALL MEMO OPTION
"RTN","PRSPESR",37,0)
 .  I "NCP"[$P(PLIST(PICK),U) D 
"RTN","PRSPESR",38,0)
 ..   ;Make sure we have a signature code before continuing
"RTN","PRSPESR",39,0)
 ..   I '$$ESIGC^PRSPUT2(1) W !! S OUT=$$ASK^PRSLIB00(1) Q
"RTN","PRSPESR",40,0)
 ..   ;
"RTN","PRSPESR",41,0)
 ..   D ESR(PRSIEN,$P(PLIST(PICK),U,2),$P(PLIST(PICK),U,3),.OUT)
"RTN","PRSPESR",42,0)
 ;
"RTN","PRSPESR",43,0)
 Q
"RTN","PRSPESR",44,0)
BLDPICK(PL,PRSIEN) ; Build option pick list with memo, prior ESR,
"RTN","PRSPESR",45,0)
 ; current ESR and next ESR actions in the PL array
"RTN","PRSPESR",46,0)
 ;PPE,I - current Pay period  (E)xternal (I)nternal entry #
"RTN","PRSPESR",47,0)
 ;NXPPE
"RTN","PRSPESR",48,0)
 ;PI - picklist counter/array subscript
"RTN","PRSPESR",49,0)
 ;MAI - memo action counter
"RTN","PRSPESR",50,0)
 ;AMIEN - active memo ien for a prior pay period
"RTN","PRSPESR",51,0)
 ;Get any actions required for Memorandum.
"RTN","PRSPESR",52,0)
 N PI,PPE,NXPPE,MIEN,MAI,PPDT1,AMIEN,MTXT,RANGE,FR,TO,PRTXT
"RTN","PRSPESR",53,0)
 S PI=0
"RTN","PRSPESR",54,0)
 ; get array of memos with status reconcile started
"RTN","PRSPESR",55,0)
 ; this may need to be replaced with API call ###
"RTN","PRSPESR",56,0)
 D GETMEMOS(.MIEN,PRSIEN,3)
"RTN","PRSPESR",57,0)
 I $G(MIEN(0))>0 D
"RTN","PRSPESR",58,0)
 .  S MAI=0
"RTN","PRSPESR",59,0)
 .  F  S MAI=$O(MIEN(MAI)) Q:MAI'>0  D
"RTN","PRSPESR",60,0)
 ..   Q:$P($G(^PRST(458.7,MAI,2)),U)>0
"RTN","PRSPESR",61,0)
 ..   S PI=PI+1,PL(PI)=$$BLDMACT(MAI,MIEN(MAI))
"RTN","PRSPESR",62,0)
 ;
"RTN","PRSPESR",63,0)
 ;Travel ESR status xref (<4) )for incomplete ESR days
"RTN","PRSPESR",64,0)
 ;
"RTN","PRSPESR",65,0)
 S PRTXT="Edit ESR for PRIOR pay period "
"RTN","PRSPESR",66,0)
 S PPE=""
"RTN","PRSPESR",67,0)
 F  S PPE=$O(^PRST(458,"AEA",PRSIEN,PPE)) Q:PPE=""  D
"RTN","PRSPESR",68,0)
 . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPESR",69,0)
 . Q:PPI'>0
"RTN","PRSPESR",70,0)
 .;### call to active memo API to determine if pp should be edited
"RTN","PRSPESR",71,0)
 .;  Get 1st day of pp
"RTN","PRSPESR",72,0)
 .  D NX^PRSAPPU S PPDT1=D1
"RTN","PRSPESR",73,0)
 .  S AMIEN=+$$MIEN^PRSPUT1(PRSIEN,PPDT1)
"RTN","PRSPESR",74,0)
 .  I AMIEN>0 D
"RTN","PRSPESR",75,0)
 ..    S PI=PI+1
"RTN","PRSPESR",76,0)
 ..    S RANGE=$G(^PRST(458,PPI,2))
"RTN","PRSPESR",77,0)
 ..    S FR=$P(RANGE,U,1),TO=$P(RANGE,U,14)
"RTN","PRSPESR",78,0)
 ..    S MTXT=PRTXT_PPE_" ["_FR_" - "_TO_"]"
"RTN","PRSPESR",79,0)
 ..    S PL(PI)="P^"_PPI_"^"_AMIEN_U_MTXT
"RTN","PRSPESR",80,0)
 ;
"RTN","PRSPESR",81,0)
 ;  current pay period to list, overwrite PI array if current
"RTN","PRSPESR",82,0)
 ; pay period is also a prior pay period selection already
"RTN","PRSPESR",83,0)
 N PPE,PPI,PP4Y,DAY,D1,PPDT1,AMIEN,OVRITE
"RTN","PRSPESR",84,0)
 S (PPDT1,D1)=DT D PP^PRSAPPU
"RTN","PRSPESR",85,0)
 I PPI'="" D
"RTN","PRSPESR",86,0)
 .  S OVRITE=$$PPICHK(.PL,PPI)
"RTN","PRSPESR",87,0)
 .  I OVRITE>0 S PI=OVRITE
"RTN","PRSPESR",88,0)
 .  E  S PI=PI+1
"RTN","PRSPESR",89,0)
 .  S AMIEN=+$$MIEN^PRSPUT1(PRSIEN,PPDT1)
"RTN","PRSPESR",90,0)
 .  I AMIEN>0 D
"RTN","PRSPESR",91,0)
 ..    S RANGE=$G(^PRST(458,PPI,2))
"RTN","PRSPESR",92,0)
 ..    S FR=$P(RANGE,U,1),TO=$P(RANGE,U,14)
"RTN","PRSPESR",93,0)
 ..    S MTXT="Edit ESR for CURRENT pay period "_PPE_" ["_FR_" - "_TO_"]"
"RTN","PRSPESR",94,0)
 ..    S PL(PI)="C^"_PPI_U_AMIEN_U_MTXT
"RTN","PRSPESR",95,0)
 ;
"RTN","PRSPESR",96,0)
 ; add next pay period to list if open and covered by memo
"RTN","PRSPESR",97,0)
 S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7)
"RTN","PRSPESR",98,0)
 D NX^PRSAPPU S PPDT1=D1
"RTN","PRSPESR",99,0)
 I $D(^PRST(458,"B",PPE)) D 
"RTN","PRSPESR",100,0)
 .  S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPESR",101,0)
 .  S AMIEN=+$$MIEN^PRSPUT1(PRSIEN,PPDT1)
"RTN","PRSPESR",102,0)
 .  I AMIEN>0 D
"RTN","PRSPESR",103,0)
 ..   S OVRITE=$$PPICHK(.PL,PPI)
"RTN","PRSPESR",104,0)
 ..   I OVRITE>0 S PI=OVRITE
"RTN","PRSPESR",105,0)
 ..   E  S PI=PI+1
"RTN","PRSPESR",106,0)
 ..   S RANGE=$G(^PRST(458,PPI,2))
"RTN","PRSPESR",107,0)
 ..   S FR=$P(RANGE,U,1),TO=$P(RANGE,U,14)
"RTN","PRSPESR",108,0)
 ..   S MTXT="Edit ESR for NEXT pay period "_PPE_" ["_FR_" - "_TO_"]"
"RTN","PRSPESR",109,0)
 ..   S PL(PI)="N^"_PPI_"^"_AMIEN_U_MTXT
"RTN","PRSPESR",110,0)
 ;
"RTN","PRSPESR",111,0)
 Q
"RTN","PRSPESR",112,0)
 ;
"RTN","PRSPESR",113,0)
PPICHK(PRIARY,PPCH) ; Check if Current or next is already in prior array
"RTN","PRSPESR",114,0)
 ;  RETURN PPI IF FOUND
"RTN","PRSPESR",115,0)
 N FOUND,PRNODE
"RTN","PRSPESR",116,0)
 S FOUND=0,PRNODE=99
"RTN","PRSPESR",117,0)
 F  S PRNODE=$O(PRIARY(PRNODE),-1) Q:(PRNODE'>0)!(FOUND>0)  D
"RTN","PRSPESR",118,0)
 .  I PPCH=$P($G(PRIARY(PRNODE)),U,2) S FOUND=PRNODE
"RTN","PRSPESR",119,0)
 Q FOUND
"RTN","PRSPESR",120,0)
 ;
"RTN","PRSPESR",121,0)
BLDMACT(MIEN,ZNODE) ;with zero node of memo build the item screen
"RTN","PRSPESR",122,0)
 ; Sample appearance for menu item
"RTN","PRSPESR",123,0)
 N SDT,EDT,TDT,Y,MENUTXT
"RTN","PRSPESR",124,0)
 S MENUTXT="M^"_MIEN_"^^Reconcile Prior Memorandum from "
"RTN","PRSPESR",125,0)
 ; Reconcile Prior Memorandum from JUL 2004 TO JUL 2005
"RTN","PRSPESR",126,0)
 S SDT=$P(ZNODE,U),EDT=$P(ZNODE,U,2),TDT=$P(ZNODE,U,3)
"RTN","PRSPESR",127,0)
 I $G(TDT)>0,($G(TDT)<$G(EDT)) S EDT=TDT
"RTN","PRSPESR",128,0)
 S Y=SDT D DD^%DT S SDT=Y
"RTN","PRSPESR",129,0)
 S Y=EDT D DD^%DT S EDT=Y
"RTN","PRSPESR",130,0)
 S MENUTXT=MENUTXT_SDT_" TO "_EDT
"RTN","PRSPESR",131,0)
 Q MENUTXT
"RTN","PRSPESR",132,0)
CHOICE(PL,DEF) ; return users choice from array of items in PL
"RTN","PRSPESR",133,0)
 ; return 0 for abort
"RTN","PRSPESR",134,0)
 N ITEM,ICNT,DIR,DIRUT
"RTN","PRSPESR",135,0)
 S ICNT=0
"RTN","PRSPESR",136,0)
 I $G(DEF)>0,($G(PL(DEF))'="") D
"RTN","PRSPESR",137,0)
 .  S DIR("B")=DEF
"RTN","PRSPESR",138,0)
 S ITEM=0
"RTN","PRSPESR",139,0)
 F  S ITEM=$O(PL(ITEM)) Q:ITEM'>0  D
"RTN","PRSPESR",140,0)
 .  S DIR("A",ITEM)=ITEM_". "_$P($G(PL(ITEM)),U,4)
"RTN","PRSPESR",141,0)
 .  S ICNT=ICNT+1
"RTN","PRSPESR",142,0)
 S DIR(0)="NO^1:"_ICNT_":0"
"RTN","PRSPESR",143,0)
 S DIR("A")="Select an Item "
"RTN","PRSPESR",144,0)
 D ^DIR
"RTN","PRSPESR",145,0)
 S PICK=+$G(Y)
"RTN","PRSPESR",146,0)
 I $G(DIRUT) S PICK=0
"RTN","PRSPESR",147,0)
 Q PICK
"RTN","PRSPESR",148,0)
 ;
"RTN","PRSPESR",149,0)
GETMEMOS(MIEN,PRSIEN,MSTAT) ; Return IEN subscripted array of
"RTN","PRSPESR",150,0)
 ;  memorandums in a single status (MSTAT)
"RTN","PRSPESR",151,0)
 ;  INPUT:  EMPLOYEE IEN (PRSIEN)
"RTN","PRSPESR",152,0)
 ;          STATUS OF MEMORANDUM desired (MSTAT)
"RTN","PRSPESR",153,0)
 ;          1:NOT STARTED; 2:ACTIVE; 3:RECONCILIATION STARTED;
"RTN","PRSPESR",154,0)
 ;          4:RECONCILED;
"RTN","PRSPESR",155,0)
 ;  OUTPUT: returns MIEN array as follows:
"RTN","PRSPESR",156,0)
 ;          MIEN(0) = 0 when no reconcile actions: 
"RTN","PRSPESR",157,0)
 ;            OR
"RTN","PRSPESR",158,0)
 ;          MIEN(0) = integer # of memos that requires reconcile action: 
"RTN","PRSPESR",159,0)
 ;          MIEN(IEN 1)=start date^end date^termination date
"RTN","PRSPESR",160,0)
 ;          MIEN(IEN n)=start date n ^end date n ^termination date n
"RTN","PRSPESR",161,0)
 N ZNODE,TDT,TMPMIEN
"RTN","PRSPESR",162,0)
 S MIEN(0)=0
"RTN","PRSPESR",163,0)
 Q:$G(MSTAT)'>0!($G(PRSIEN)'>0)
"RTN","PRSPESR",164,0)
 S TMPMIEN=0
"RTN","PRSPESR",165,0)
 F  S TMPMIEN=$O(^PRST(458.7,"AST",PRSIEN,MSTAT,TMPMIEN)) Q:TMPMIEN'>0  D
"RTN","PRSPESR",166,0)
 .  S ZNODE=$G(^PRST(458.7,TMPMIEN,0))
"RTN","PRSPESR",167,0)
 .  S TDT=$P($G(^PRST(458.7,TMPMIEN,4)),U)
"RTN","PRSPESR",168,0)
 .  S MIEN(TMPMIEN)=$P(ZNODE,U,2)_"^"_$P(ZNODE,U,3)_"^"_TDT
"RTN","PRSPESR",169,0)
 .  S MIEN(0)=MIEN(0)+1
"RTN","PRSPESR",170,0)
 Q
"RTN","PRSPESR",171,0)
 ;
"RTN","PRSPESR",172,0)
MEMO(PRSIEN,LIST) ; CALL OPTION TO RECONCILE A MEMO
"RTN","PRSPESR",173,0)
 ;INPUT : PRSIEN-user 450 ien,  LIST-pick list array item for memo
"RTN","PRSPESR",174,0)
 N OUT,MIEN
"RTN","PRSPESR",175,0)
 S MIEN=$P(LIST,U,2)
"RTN","PRSPESR",176,0)
 D MAIN^PRSPSRC(PRSIEN,MIEN)
"RTN","PRSPESR",177,0)
 S OUT=$$ASK^PRSLIB00()
"RTN","PRSPESR",178,0)
 Q
"RTN","PRSPESR",179,0)
ESR(PRSIEN,PPI,MIEN,OUT) ; DISPLAY PAY PERIOD AND ASK USER TO PICK A DAY
"RTN","PRSPESR",180,0)
 ;  WHEN THEY PICK A DAY CALL code to start up a ScreenMan
"RTN","PRSPESR",181,0)
 ;  form for the day record
"RTN","PRSPESR",182,0)
 N ESRDAY
"RTN","PRSPESR",183,0)
 S OUT=0
"RTN","PRSPESR",184,0)
 F  D  Q:(ESRDAY'>0)
"RTN","PRSPESR",185,0)
 . W @IOF
"RTN","PRSPESR",186,0)
 . D WSS(PRSIEN,PPI,MIEN)
"RTN","PRSPESR",187,0)
 . S ESRDAY=$$WHICHDAY(PPI,PRSIEN)
"RTN","PRSPESR",188,0)
 . I $$CANPOST(PPI,PRSIEN,ESRDAY,1) D ESRFRM^PRSPESR1(PRSIEN,PPI,ESRDAY)
"RTN","PRSPESR",189,0)
 I ESRDAY<0 S OUT=1
"RTN","PRSPESR",190,0)
 Q
"RTN","PRSPESR",191,0)
CANPOST(PPI,PRSIEN,PRSD,SHMSG) ; Can this day be posted by a PTP?
"RTN","PRSPESR",192,0)
 ; i show message set to 1 then show message on can't post
"RTN","PRSPESR",193,0)
 N CANPOST
"RTN","PRSPESR",194,0)
 S CANPOST=0
"RTN","PRSPESR",195,0)
 Q:$G(PRSD)'>0 CANPOST
"RTN","PRSPESR",196,0)
 N TCSTAT,DUM,ESRSTAT,TCSTAT,TOUR
"RTN","PRSPESR",197,0)
 S CANPOST=1
"RTN","PRSPESR",198,0)
 ;
"RTN","PRSPESR",199,0)
 S TOUR=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,2)
"RTN","PRSPESR",200,0)
 I TOUR'>0 S CANPOST=0 D  Q CANPOST
"RTN","PRSPESR",201,0)
 .  I 'CANPOST&($G(SHMSG)>0) D
"RTN","PRSPESR",202,0)
 ..   W @IOF,!!!,"A Tour of Duty must be entered first.  Please contact your timekeeper.",!!
"RTN","PRSPESR",203,0)
 ..   S DUM=$$ASK^PRSLIB00(1)
"RTN","PRSPESR",204,0)
 ;
"RTN","PRSPESR",205,0)
 S ESRSTAT=$$GETSTAT^PRSPESR1(PRSIEN,PPI,PRSD)
"RTN","PRSPESR",206,0)
 S TCSTAT=$$TCSTAT^PRSPSAP2(PPI,PRSIEN)
"RTN","PRSPESR",207,0)
 I TCSTAT'="T" S CANPOST=(ESRSTAT<5) D
"RTN","PRSPESR",208,0)
 .  I 'CANPOST&($G(SHMSG)>0) D
"RTN","PRSPESR",209,0)
 ..   W @IOF,!!!,"Only select days with status 'Not Started, 'Pending', 'Signed', or 'Resubmit'."
"RTN","PRSPESR",210,0)
 ..   W !,"To edit approved days or days off, contact your Time and Leave Supervisor.",!!
"RTN","PRSPESR",211,0)
 ..   S DUM=$$ASK^PRSLIB00(1)
"RTN","PRSPESR",212,0)
 Q CANPOST
"RTN","PRSPESR",213,0)
 ;
"RTN","PRSPESR",214,0)
WSS(PRSIEN,PPI,MIEN) ; WORK SUMMARY SCREEN
"RTN","PRSPESR",215,0)
 N SCRTTL
"RTN","PRSPESR",216,0)
 S SCRTTL="Work Summary Screen for Part Time VA Physician "
"RTN","PRSPESR",217,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,,,PPI)
"RTN","PRSPESR",218,0)
 D MEM^PRSPUT1(PRSIEN,MIEN)
"RTN","PRSPESR",219,0)
 D AL^PRSPUT3(PRSIEN,)
"RTN","PRSPESR",220,0)
 D ESRSTAT^PRSPUT2(PRSIEN,PPI)
"RTN","PRSPESR",221,0)
 Q
"RTN","PRSPESR",222,0)
WHICHDAY(PPI,PRSIEN,DEF) ; ASK USER TO SELECT A PAY PERIOD DAY
"RTN","PRSPESR",223,0)
 ; return 0 for abort OR -1 for double abort "^^"
"RTN","PRSPESR",224,0)
 N DIR,DIRUT,TCSTAT,I
"RTN","PRSPESR",225,0)
 S DIR(0)="NO^1:14:0"
"RTN","PRSPESR",226,0)
 I $G(DEF)>0 S DIR("B")=DEF
"RTN","PRSPESR",227,0)
 S DIR("A")="Select day "
"RTN","PRSPESR",228,0)
 D ^DIR
"RTN","PRSPESR",229,0)
 I $G(DIRUT) D
"RTN","PRSPESR",230,0)
 .  S PICK=$S($G(Y)["^^":-1,1:0)
"RTN","PRSPESR",231,0)
 E  D
"RTN","PRSPESR",232,0)
 .  S PICK=$G(Y)
"RTN","PRSPESR",233,0)
 Q PICK
"RTN","PRSPESR",234,0)
 Q
"RTN","PRSPESR1")
0^2^B74187836^n/a
"RTN","PRSPESR1",1,0)
PRSPESR1 ;WOIFO/JAH - part time physicians ESR Edit ;11/04/04
"RTN","PRSPESR1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPESR1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPESR1",4,0)
 ;
"RTN","PRSPESR1",5,0)
ESRFRM(PRSIEN,PPI,PRSD) ;Run ScreenMan Form PRSA ESR EDIT on file 458
"RTN","PRSPESR1",6,0)
 ;
"RTN","PRSPESR1",7,0)
 N TOD,TOD2,TOUR,STAT,GLOB,PRSN1,PRSN2,PRSN4,PRSN5,PRSN6,Y31,PRSDTE
"RTN","PRSPESR1",8,0)
 N MLALLOW,PRSML,PRSML2,DFN,Z,ZENT,DIE,DA,DDSFILE,STOP,Z
"RTN","PRSPESR1",9,0)
 ;
"RTN","PRSPESR1",10,0)
 S STAT=$$GETSTAT(PRSIEN,PPI,PRSD)
"RTN","PRSPESR1",11,0)
 S TOD=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,2)
"RTN","PRSPESR1",12,0)
 S TOD2=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,13)
"RTN","PRSPESR1",13,0)
 ; NODES THAT WE MAY EDIT IN THE FORM
"RTN","PRSPESR1",14,0)
 S PRSN1=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,1)) ; tour segmts
"RTN","PRSPESR1",15,0)
 S PRSN4=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,4)) ; 2nd tour
"RTN","PRSPESR1",16,0)
 S PRSN5=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5)) ; esr wrk
"RTN","PRSPESR1",17,0)
 S PRSN6=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,6)) ; daily esr remrks
"RTN","PRSPESR1",18,0)
 ;
"RTN","PRSPESR1",19,0)
 ; get ALL TOUR SGMNTS + meal for display
"RTN","PRSPESR1",20,0)
 ;
"RTN","PRSPESR1",21,0)
 S Y31=$$GETTOUR^PRSPESR3(PRSIEN,PRSD,TOD,PRSN1,PRSN4)
"RTN","PRSPESR1",22,0)
 S PRSML=$P($G(^PRST(457.1,TOD,0)),U,3)
"RTN","PRSPESR1",23,0)
 S MLALLOW=60
"RTN","PRSPESR1",24,0)
 ;
"RTN","PRSPESR1",25,0)
 ; If second tour, have meal time handy
"RTN","PRSPESR1",26,0)
 I $G(TOD2)>0 D
"RTN","PRSPESR1",27,0)
 .  S PRSML2=$P($G(^PRST(457.1,TOD2,0)),U,3)
"RTN","PRSPESR1",28,0)
 .  S MLALLOW=120
"RTN","PRSPESR1",29,0)
 ;
"RTN","PRSPESR1",30,0)
 S PRSDTE=$P($G(^PRST(458,PPI,2)),U,PRSD)
"RTN","PRSPESR1",31,0)
 ;
"RTN","PRSPESR1",32,0)
 ; DFN needed for old call to lock record.
"RTN","PRSPESR1",33,0)
 S DFN=PRSIEN I '$$AVAILREC^PRSLIB00("TK",.GLOB,.STOP) Q
"RTN","PRSPESR1",34,0)
 ; ScreenMan
"RTN","PRSPESR1",35,0)
 S DDSFILE=458,DDSFILE(1)=458.02,DA(2)=PPI,DA(1)=PRSIEN,DA=PRSD
"RTN","PRSPESR1",36,0)
 S Z=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5))
"RTN","PRSPESR1",37,0)
 ;
"RTN","PRSPESR1",38,0)
 ; allowed types of time for ESR 
"RTN","PRSPESR1",39,0)
 ; days off only allow RG
"RTN","PRSPESR1",40,0)
 S ZENT=$S(Y31="Day Off":"RG",1:"RG AL AA DL ML HX CP RL SL CB AD WP TV TR")
"RTN","PRSPESR1",41,0)
 S DR="[PRSP ESR POST]" D ^DDS
"RTN","PRSPESR1",42,0)
 ;
"RTN","PRSPESR1",43,0)
 ; remove blank rows from ESR
"RTN","PRSPESR1",44,0)
 S Z=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5))
"RTN","PRSPESR1",45,0)
 S ^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5)=$$BURP^PRSPESR2(Z)
"RTN","PRSPESR1",46,0)
 D:GLOB]"" UNLOCK^PRSLIB00(GLOB)
"RTN","PRSPESR1",47,0)
 Q
"RTN","PRSPESR1",48,0)
 ;
"RTN","PRSPESR1",49,0)
GETSTAT(PRSIEN,PPI,PRSD) ; func return status
"RTN","PRSPESR1",50,0)
 ; esr daily status (#146) 1:NOT STARTED;2:PENDING;3:RESUBMIT;
"RTN","PRSPESR1",51,0)
 ; 4:SIGNED;5:APPROVED;6:DAY OFF
"RTN","PRSPESR1",52,0)
 Q $P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,7)),"^",1)
"RTN","PRSPESR1",53,0)
 ;
"RTN","PRSPESR1",54,0)
ESRVALID ; Validate Daily ESR data
"RTN","PRSPESR1",55,0)
 ; called when PTP attempts to save ScrMn form PRSP ESR POST (F458)
"RTN","PRSPESR1",56,0)
 ; DDSERROR set to prevent save.
"RTN","PRSPESR1",57,0)
 ; DDSBR set takes user field
"RTN","PRSPESR1",58,0)
 ;
"RTN","PRSPESR1",59,0)
 ;  Z - combo: global time segs + form edits.
"RTN","PRSPESR1",60,0)
 ;
"RTN","PRSPESR1",61,0)
 ;  If data unchanged, skip validation and esig
"RTN","PRSPESR1",62,0)
 ;  But if status = Pend OR Resub, PTP may sign even if data unchanged.
"RTN","PRSPESR1",63,0)
 N STR,WARNING
"RTN","PRSPESR1",64,0)
 I $G(Z)'="",$G(Z)=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5)),STAT'=2,STAT'=3 D  Q
"RTN","PRSPESR1",65,0)
 .  D MSG^DDSUTL("...No edits to save")
"RTN","PRSPESR1",66,0)
 ;
"RTN","PRSPESR1",67,0)
 ; If DDSERROR (bad user data), return to ScreenMan
"RTN","PRSPESR1",68,0)
 D CHKDATA
"RTN","PRSPESR1",69,0)
 Q:$G(DDSERROR)
"RTN","PRSPESR1",70,0)
 ;
"RTN","PRSPESR1",71,0)
 ; display warning if any are found but don't stop user from signing
"RTN","PRSPESR1",72,0)
 I $G(WARNING) D WARNMSG^PRSPESR3(STR)
"RTN","PRSPESR1",73,0)
 ;
"RTN","PRSPESR1",74,0)
 ; If user hits return at sign prompt, save as pending
"RTN","PRSPESR1",75,0)
 ; If user types "^" don't save changes
"RTN","PRSPESR1",76,0)
 ; If user signs, save.
"RTN","PRSPESR1",77,0)
 ;
"RTN","PRSPESR1",78,0)
 N X1
"RTN","PRSPESR1",79,0)
 D SIG^XUSESIG
"RTN","PRSPESR1",80,0)
 I X1="" D
"RTN","PRSPESR1",81,0)
 . N PRSMSG
"RTN","PRSPESR1",82,0)
 . S PRSMSG="CANCEL: ESR day changes were not saved."
"RTN","PRSPESR1",83,0)
 .  I $G(X)="^" D
"RTN","PRSPESR1",84,0)
 ..    S DDSERROR=1
"RTN","PRSPESR1",85,0)
 ..    D MSG^DDSUTL(PRSMSG)
"RTN","PRSPESR1",86,0)
 .  E  D
"RTN","PRSPESR1",87,0)
 ..    N DIE,DR,DA
"RTN","PRSPESR1",88,0)
 ..    S DA(2)=$G(PPI),DA(1)=$G(PRSIEN),DA=$G(PRSD)
"RTN","PRSPESR1",89,0)
 ..;  if status is resubmit and they didn't sign then leave it resubmit
"RTN","PRSPESR1",90,0)
 ..    I STAT=3 D
"RTN","PRSPESR1",91,0)
 ...     S DR="146///RESUBMIT;149///MANUAL POST"
"RTN","PRSPESR1",92,0)
 ...     S PRSMSG="RESUBMIT: changes saved w/out signature, but status remains Resubmit."
"RTN","PRSPESR1",93,0)
 ..    E  D
"RTN","PRSPESR1",94,0)
 ...     S DR="146///PENDING;149///MANUAL POST"
"RTN","PRSPESR1",95,0)
 ...     S PRSMSG="PENDING: ESR day changes saved w/out signature."
"RTN","PRSPESR1",96,0)
 ...     S STAT=2 ; form global var ESR DAILY STATUS gets PENDING
"RTN","PRSPESR1",97,0)
 ..    S DIE="^PRST(458,"_DA(2)_",""E"","_DA(1)_",""D"","
"RTN","PRSPESR1",98,0)
 ..    D ^DIE
"RTN","PRSPESR1",99,0)
 ..    K X ; reset X since it's saved to dataBse.
"RTN","PRSPESR1",100,0)
 ..    D MSG^DDSUTL(PRSMSG)
"RTN","PRSPESR1",101,0)
 E  D
"RTN","PRSPESR1",102,0)
 .; update ESR DAILY STATUS and ESR LAST SIGN METHOD
"RTN","PRSPESR1",103,0)
 .  N PRSFDA,IENS,STAMP
"RTN","PRSPESR1",104,0)
 .  S STAMP=$$NOW^XLFDT()
"RTN","PRSPESR1",105,0)
 .;
"RTN","PRSPESR1",106,0)
 .  S IENS=PRSD_","_PRSIEN_","_PPI_","
"RTN","PRSPESR1",107,0)
 .  S PRSFDA(458.02,IENS,146)=4
"RTN","PRSPESR1",108,0)
 .  S PRSFDA(458.02,IENS,147)=STAMP
"RTN","PRSPESR1",109,0)
 .  S PRSFDA(458.02,IENS,149)=1
"RTN","PRSPESR1",110,0)
 .  D FILE^DIE("","PRSFDA")
"RTN","PRSPESR1",111,0)
 .  D MSG^DIALOG()
"RTN","PRSPESR1",112,0)
 .;
"RTN","PRSPESR1",113,0)
 .  K X ; reset X, it's saved to database.
"RTN","PRSPESR1",114,0)
 .  S STAT=4 ; form global var ESR DAILY STATUS gets SIGNED
"RTN","PRSPESR1",115,0)
 .  D MSG^DDSUTL("SIGNED:  ESR data saved with signature.")
"RTN","PRSPESR1",116,0)
 Q
"RTN","PRSPESR1",117,0)
 ;
"RTN","PRSPESR1",118,0)
CHKDATA ; called to validate screenman posting on ESR daily
"RTN","PRSPESR1",119,0)
 ;
"RTN","PRSPESR1",120,0)
 ; Z initialized to data that appears on the unedited form.
"RTN","PRSPESR1",121,0)
 ; when a field on ScreenMan form changes the appropriate piece
"RTN","PRSPESR1",122,0)
 ; of Z is updated in the post action change field in ScreenMan.
"RTN","PRSPESR1",123,0)
 ; so Z contains the original data for a day plus any changes that
"RTN","PRSPESR1",124,0)
 ; the user is trying to save.
"RTN","PRSPESR1",125,0)
 ;  each 5 pieces of z hold START, STOP, TYPE OF TIME, REMARKS, MEAL
"RTN","PRSPESR1",126,0)
 ;
"RTN","PRSPESR1",127,0)
 N T,K,ZS,NOTHING,MLP,DY2,MTOT,TWO,Z1,Z2,Y
"RTN","PRSPESR1",128,0)
 S ZS=""
"RTN","PRSPESR1",129,0)
 ;
"RTN","PRSPESR1",130,0)
 ; 2 day tour?
"RTN","PRSPESR1",131,0)
 S TWO=$P($G(^PRST(457.1,+TOD,0)),U,5)
"RTN","PRSPESR1",132,0)
 S DY2=TWO="Y"
"RTN","PRSPESR1",133,0)
 I TOD2,'DY2 S TWO=$P($G(^PRST(457.1,+TOD2,0)),U,5),DY2=TWO="Y"
"RTN","PRSPESR1",134,0)
 ;
"RTN","PRSPESR1",135,0)
 ;loop thru 5 columns, 7 time segments
"RTN","PRSPESR1",136,0)
 ; quit if we encounter an error
"RTN","PRSPESR1",137,0)
 F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",138,0)
 .;
"RTN","PRSPESR1",139,0)
 .; if absolutely nothing on any segments in the row or just a zero
"RTN","PRSPESR1",140,0)
 .; in meal column then skip row.
"RTN","PRSPESR1",141,0)
 .;
"RTN","PRSPESR1",142,0)
 .  S NOTHING=(($P(Z,U,K)="")&($P(Z,U,K+1)="")&($P(Z,U,K+2)="")&($P(Z,U,K+3)="")&(($P(Z,U,K+4)="")!($P(Z,U,K+4)=0)))
"RTN","PRSPESR1",143,0)
 .  Q:NOTHING
"RTN","PRSPESR1",144,0)
 .;
"RTN","PRSPESR1",145,0)
 .;  missing start or stop
"RTN","PRSPESR1",146,0)
 .  I $P(Z,U,K)=""!($P(Z,U,K+1)="") D E8 S DDSERROR=1 Q
"RTN","PRSPESR1",147,0)
 .;
"RTN","PRSPESR1",148,0)
 .; 2nd day posting on 1 day tour (ALLOW RG POSTING ACROSS MID)
"RTN","PRSPESR1",149,0)
 .  S X=$P(Z,U,K)_U_$P(Z,U,K+1)
"RTN","PRSPESR1",150,0)
 .  D CNV^PRSATIM S Z1=$P(Y,U,1),Z2=$P(Y,U,2)
"RTN","PRSPESR1",151,0)
 .  D V0^PRSATP1
"RTN","PRSPESR1",152,0)
 .  I Z2>1440,TWO'="Y","RG OT CT SB ON UA"'[$P(Z,U,K+2) D  Q
"RTN","PRSPESR1",153,0)
 ..    D E4
"RTN","PRSPESR1",154,0)
 ..    S DDSERROR=1
"RTN","PRSPESR1",155,0)
 .;
"RTN","PRSPESR1",156,0)
 .; posted more than 48 hrs (2880 min)
"RTN","PRSPESR1",157,0)
 .  I Z2>2880 D E5 S DDSERROR=1 Q
"RTN","PRSPESR1",158,0)
 .;
"RTN","PRSPESR1",159,0)
 .; no type of time
"RTN","PRSPESR1",160,0)
 .  I $P(Z,U,K+2)="" D E9 S DDSERROR=1 Q
"RTN","PRSPESR1",161,0)
 .;
"RTN","PRSPESR1",162,0)
 .   I '(Z["HX"&("ON HW"[$P(Z,U,K+2))),'(Z["^ON"&(Z["OT")),'(Z["^ON"&(Z["CT")),$D(T(Z1)) S DDSERROR=1 D E3 Q
"RTN","PRSPESR1",163,0)
 .   I $P(Z,U,K+2)="HW",Z'["HX",'$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,12) S DDSERROR=1 D E7 Q
"RTN","PRSPESR1",164,0)
 .  I $P(Z,U,K+2)'="" S T(Z1,K)=Z2_U_$P(Z,U,K,K+3)
"RTN","PRSPESR1",165,0)
 ;
"RTN","PRSPESR1",166,0)
 ;  T: 1st subscript is start time (minutes from midnight)
"RTN","PRSPESR1",167,0)
 ;     2nd subsc is segment number on form (or in Z var)
"RTN","PRSPESR1",168,0)
 ;     piece 1 stop time in minutes from midnight. 
"RTN","PRSPESR1",169,0)
 ;   for 3 segment postings will look like the following:
"RTN","PRSPESR1",170,0)
 ;        T(945,1)=1140^03:45P^07:00P^RG^
"RTN","PRSPESR1",171,0)
 ;        T(1140,6)=1305^07:00P^09:45P^RG^
"RTN","PRSPESR1",172,0)
 ;        T(1320,11)=1380^10:00P^11:00P^RG
"RTN","PRSPESR1",173,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",174,0)
 I '$D(T) Q
"RTN","PRSPESR1",175,0)
 ;
"RTN","PRSPESR1",176,0)
 ; segment overlap
"RTN","PRSPESR1",177,0)
 I Z'["HX",'(Z["^ON"&(Z["OT")),'(Z["^ON"&(Z["CT")) D
"RTN","PRSPESR1",178,0)
 .  S Z1=""
"RTN","PRSPESR1",179,0)
 .  F  S Z1=$O(T(Z1)) Q:Z1=""!($G(DDSERROR))  D
"RTN","PRSPESR1",180,0)
 ..   I Z1'<T(Z1,$O(T(Z1,0))) D
"RTN","PRSPESR1",181,0)
 ...     D E1
"RTN","PRSPESR1",182,0)
 ...     S DDSERROR=1
"RTN","PRSPESR1",183,0)
 ..   E  D
"RTN","PRSPESR1",184,0)
 ...    S Y=$O(T(Z1))
"RTN","PRSPESR1",185,0)
 ...    I Y,T(Z1,$O(T(Z1,0)))>Y S DDSERROR=1 D E2
"RTN","PRSPESR1",186,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",187,0)
 ;
"RTN","PRSPESR1",188,0)
 ; leave outside time segments
"RTN","PRSPESR1",189,0)
 I $$VALIDLV^PRSPESR2(PRSN1,.T),$$VALIDLV^PRSPESR2(PRSN4,.T) S DDSERROR=1 D E14,HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",190,0)
 ;
"RTN","PRSPESR1",191,0)
 S Z1=$$GET^DDSVAL(DIE,.DA,145)
"RTN","PRSPESR1",192,0)
 ;
"RTN","PRSPESR1",193,0)
 ; make sure we have some txt in remarks field when required
"RTN","PRSPESR1",194,0)
 I Z1="" D
"RTN","PRSPESR1",195,0)
 .  F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",196,0)
 ..   I $P(Z,U,K+2)="AA" D E6 S DDSERROR=1 Q
"RTN","PRSPESR1",197,0)
 ..   I $P(Z,U,K+2)="WP",$P(Z,U,K+3)=3 D E10 S DDSERROR=1 Q
"RTN","PRSPESR1",198,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",199,0)
 ;
"RTN","PRSPESR1",200,0)
 ; check for too much total meal for whole day
"RTN","PRSPESR1",201,0)
 S MTOT=0
"RTN","PRSPESR1",202,0)
 F K=1:5:31 S MTOT=MTOT+$P(Z,U,K+4)
"RTN","PRSPESR1",203,0)
 I MTOT>MLALLOW D E15 S DDSERROR=1 D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",204,0)
 ;
"RTN","PRSPESR1",205,0)
 ; check for too much meal on any segment
"RTN","PRSPESR1",206,0)
 F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",207,0)
 .  S MLP=$P(Z,U,K+4)
"RTN","PRSPESR1",208,0)
 .  I MLP>0 D
"RTN","PRSPESR1",209,0)
 ..    N WORK S WORK=$$ELAPSE^PRSPESR2(MLP,$P(Z,U,K),$P(Z,U,K+1))
"RTN","PRSPESR1",210,0)
 ..    I $E(WORK,1,1)="-"!(WORK="00:00")!(WORK=0) D E17 S DDSERROR=1
"RTN","PRSPESR1",211,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",212,0)
 ;
"RTN","PRSPESR1",213,0)
 ; check for comptime earned and used w/out remarks
"RTN","PRSPESR1",214,0)
 F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",215,0)
 . I ($P(Z,U,K+2)="CT")&($P(Z,U,K+3)="") D E11 S DDSERROR=1
"RTN","PRSPESR1",216,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",217,0)
 ;
"RTN","PRSPESR1",218,0)
 F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",219,0)
 . I ($P(Z,U,K+2)="CU")&($P(Z,U,K+3)="") D E12 S DDSERROR=1
"RTN","PRSPESR1",220,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",221,0)
 ;
"RTN","PRSPESR1",222,0)
 ;make sure compressed tours don't post credit hrs remarks.
"RTN","PRSPESR1",223,0)
 I $$COMPR^PRSATP1(PPI,DFN) D
"RTN","PRSPESR1",224,0)
 .  F K=1:5:31 Q:$G(DDSERROR)  D
"RTN","PRSPESR1",225,0)
 ..    I $$CTCH^PRSATP1(Z,K) D E13 S DDSERROR=1
"RTN","PRSPESR1",226,0)
 I $G(DDSERROR) D HLP^DDSUTL(.STR) Q
"RTN","PRSPESR1",227,0)
 Q
"RTN","PRSPESR1",228,0)
E1 S STR="A start time is not less than a stop time." Q
"RTN","PRSPESR1",229,0)
E2 S STR="End of one segment must not be greater than start of next." Q
"RTN","PRSPESR1",230,0)
E3 S STR="Duplicate start times encountered." Q
"RTN","PRSPESR1",231,0)
E4 S STR="Segment of second day encountered; no two-day tour specified." Q
"RTN","PRSPESR1",232,0)
E5 S STR="Segment of third day encountered." Q
"RTN","PRSPESR1",233,0)
E6 S STR="Remarks must be entered when AA is posted." Q
"RTN","PRSPESR1",234,0)
E7 S STR="HW can only be posted with HX or on a Holiday." Q
"RTN","PRSPESR1",235,0)
E8 S STR="Start or Stop Time not entered for a segment." Q
"RTN","PRSPESR1",236,0)
E9 S STR="Type of Time not entered for a segment." Q
"RTN","PRSPESR1",237,0)
E10 S STR="Remarks must be entered for WP due to AWOL." Q
"RTN","PRSPESR1",238,0)
E11 S STR="REMARKS CODE must be entered when CT is posted." Q
"RTN","PRSPESR1",239,0)
E12 S STR="REMARKS CODE must be entered when CU is posted." Q
"RTN","PRSPESR1",240,0)
E13 S STR="REMARKS CODE:  Compressed tours can't earn credit hours." Q
"RTN","PRSPESR1",241,0)
E14 S STR="Leave cannot be posted outside tour." Q
"RTN","PRSPESR1",242,0)
E15 S STR="Meal time cannot exceed "_MLALLOW_" minutes." Q
"RTN","PRSPESR1",243,0)
E16 S STR="Warning: A segment crosses midnight and a subsequent segment appears to be earlier in the day.  This is o.k. as long as all start times begin on the selected ESR day."
"RTN","PRSPESR1",244,0)
E17 S STR="Meal time must be less than time on the segment it is posted with." Q
"RTN","PRSPESR1",245,0)
 Q
"RTN","PRSPESR2")
0^3^B38293354^n/a
"RTN","PRSPESR2",1,0)
PRSPESR2 ;WOIFO/JAH - PTP ESR Edit-Calls from ScreenMan Form ;07/28/05
"RTN","PRSPESR2",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPESR2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPESR2",4,0)
 Q
"RTN","PRSPESR2",5,0)
ELAPSE(MEAL,START,STOP) ; CALCULATE THE HOURS BETWEEN 2 TIMES
"RTN","PRSPESR2",6,0)
 ;this function is called from ScreenMan Form Computed fields
"RTN","PRSPESR2",7,0)
 ;  file 458 PRSA ESR EDIT form.
"RTN","PRSPESR2",8,0)
 N ELAPSE
"RTN","PRSPESR2",9,0)
 S ELAPSE=0
"RTN","PRSPESR2",10,0)
 Q:($G(START)="")!($G(STOP)="") ELAPSE
"RTN","PRSPESR2",11,0)
 S START=$$TWENTY4(START)
"RTN","PRSPESR2",12,0)
 ;
"RTN","PRSPESR2",13,0)
 S STOP=$$TWENTY4(STOP)
"RTN","PRSPESR2",14,0)
 ; if stop time is next day add a day
"RTN","PRSPESR2",15,0)
 I STOP<START!(STOP=START) D
"RTN","PRSPESR2",16,0)
 .  S STOP=$$FMADD^XLFDT(DT,1,0,0,0)_"."_STOP
"RTN","PRSPESR2",17,0)
 E  D
"RTN","PRSPESR2",18,0)
 .  S STOP=DT_"."_STOP
"RTN","PRSPESR2",19,0)
 S START=DT_"."_START
"RTN","PRSPESR2",20,0)
 S ELAPSE=$$FMDIFF^XLFDT(STOP,START,3)
"RTN","PRSPESR2",21,0)
 ;for special case of a 24 hour segment
"RTN","PRSPESR2",22,0)
 I ELAPSE="1" S ELAPSE="24:00"
"RTN","PRSPESR2",23,0)
 ;
"RTN","PRSPESR2",24,0)
 ;Remove any blanks
"RTN","PRSPESR2",25,0)
 S ELAPSE=$TR(ELAPSE," ","")
"RTN","PRSPESR2",26,0)
 I $G(MEAL)>0 S ELAPSE=$$MEALESS(ELAPSE,MEAL)
"RTN","PRSPESR2",27,0)
 S ELAPSE=$$FIVE(ELAPSE)
"RTN","PRSPESR2",28,0)
 Q ELAPSE
"RTN","PRSPESR2",29,0)
FIVE(TIME) ;ENSURE ELAPSE IS A FIVE CHAR STRING--04:15 OR 02:00
"RTN","PRSPESR2",30,0)
 N FIVE,HH,MM
"RTN","PRSPESR2",31,0)
 I $E(TIME,1,1)="-" Q "-00:00"
"RTN","PRSPESR2",32,0)
 S HH="00"_$P(TIME,":"),MM="00"_$P(TIME,":",2)
"RTN","PRSPESR2",33,0)
 S HH=$E(HH,$L(HH)-1,$L(HH))
"RTN","PRSPESR2",34,0)
 S MM=$E(MM,$L(MM)-1,$L(MM))
"RTN","PRSPESR2",35,0)
 S MM=$P(TIME,":",2)_"0"
"RTN","PRSPESR2",36,0)
 S MM=$E(MM,1,2)
"RTN","PRSPESR2",37,0)
 S FIVE=HH_":"_MM
"RTN","PRSPESR2",38,0)
 Q FIVE
"RTN","PRSPESR2",39,0)
TWENTY4(TIME) ;CONVERT TIME TO TWENTY FOUR HOUR TIME
"RTN","PRSPESR2",40,0)
 ;
"RTN","PRSPESR2",41,0)
 ; TIME Y: 0=Mid=0,1=Mid=2400 Output: Y=time in 2400
"RTN","PRSPESR2",42,0)
 S Y=0
"RTN","PRSPESR2",43,0)
 I TIME="MID"!(TIME="NOON") D
"RTN","PRSPESR2",44,0)
 .   S Y=$S(TIME="NOON":1200,TIME="MID":2400,1:0)
"RTN","PRSPESR2",45,0)
 E  D
"RTN","PRSPESR2",46,0)
 .  S Y=$P(TIME,":",1)_$P(TIME,":",2),Y=+Y
"RTN","PRSPESR2",47,0)
 I TIME["P" D
"RTN","PRSPESR2",48,0)
 .  S:Y<1200 Y=Y+1200
"RTN","PRSPESR2",49,0)
 ;
"RTN","PRSPESR2",50,0)
 ; pad time with leading zeros so we always have 4 digits
"RTN","PRSPESR2",51,0)
 ; for cases like start times of 15 past midnight 0015
"RTN","PRSPESR2",52,0)
 ;
"RTN","PRSPESR2",53,0)
 S Y="000"_Y
"RTN","PRSPESR2",54,0)
 S Y=$E(Y,$L(Y)-3,$L(Y))
"RTN","PRSPESR2",55,0)
 Q Y
"RTN","PRSPESR2",56,0)
MEALESS(HHMM,MEAL) ;Remove meal time from hours total
"RTN","PRSPESR2",57,0)
 ; (subtract a 15 minute increment from length of time
"RTN","PRSPESR2",58,0)
 ; in hh:mm format, i.e. hh:mm - mm
"RTN","PRSPESR2",59,0)
 ;
"RTN","PRSPESR2",60,0)
 N X,Y,DECR,OBJ,I
"RTN","PRSPESR2",61,0)
 S MM=$P(HHMM,":",2) ; get minutes
"RTN","PRSPESR2",62,0)
 ; quit minutes or meal not quarter hours
"RTN","PRSPESR2",63,0)
 Q:(MM#15'=0&(+MM)!((MEAL#15)'=0&(+MEAL))) HHMM
"RTN","PRSPESR2",64,0)
 ; get hours
"RTN","PRSPESR2",65,0)
 S HH=$P(HHMM,":")
"RTN","PRSPESR2",66,0)
 ;
"RTN","PRSPESR2",67,0)
 ; convert segment minutes and meal to a digit.
"RTN","PRSPESR2",68,0)
 ;
"RTN","PRSPESR2",69,0)
 S X=MM D MEALIN S OBJ=X
"RTN","PRSPESR2",70,0)
 S X=$G(MEAL) D MEALIN S DECR=X
"RTN","PRSPESR2",71,0)
 I OBJ=0 S OBJ=4
"RTN","PRSPESR2",72,0)
 F I=1:1:DECR D
"RTN","PRSPESR2",73,0)
 . I OBJ=4 S HH="0"_(+HH-1) S HH=$E(HH,$L(HH)-1,$L(HH))
"RTN","PRSPESR2",74,0)
 . S OBJ=$S(OBJ=4:3,OBJ=3:2,OBJ=2:1,OBJ=1:4)
"RTN","PRSPESR2",75,0)
 S MM=$S(OBJ=1:15,OBJ=2:30,OBJ=3:45,1:"00")
"RTN","PRSPESR2",76,0)
 Q $$FIVE(HH_":"_MM)
"RTN","PRSPESR2",77,0)
 ;
"RTN","PRSPESR2",78,0)
MEALIN ;convert 15 minute meal to a digit
"RTN","PRSPESR2",79,0)
 I +X#15=0 S X=X\15 Q
"RTN","PRSPESR2",80,0)
 I "^0^00^15^30^45^60^75^90^105^120^"[("^"_$G(X)_"^") D
"RTN","PRSPESR2",81,0)
 .  S X=$S(+X=0:0,X=60:4,X=30:2,X=15:1,X=45:3,1:0)
"RTN","PRSPESR2",82,0)
 E  D
"RTN","PRSPESR2",83,0)
 . K X
"RTN","PRSPESR2",84,0)
 Q
"RTN","PRSPESR2",85,0)
MEALOUT ; convert meal digit to minutes
"RTN","PRSPESR2",86,0)
 S Y=$S(Y=1:15,Y=2:30,Y=3:45,Y=4:60,1:"00")
"RTN","PRSPESR2",87,0)
 Q
"RTN","PRSPESR2",88,0)
 ;
"RTN","PRSPESR2",89,0)
VALIDTT ; Set DDSERROR if not a valid type of time.
"RTN","PRSPESR2",90,0)
 ;This procedure is called from ScreenMan form PRSA ESR EDIT (file 458)
"RTN","PRSPESR2",91,0)
 ;with the validate field of the Type Of Time.
"RTN","PRSPESR2",92,0)
 ; set DDSERROR to reject user input, then ring bell and 
"RTN","PRSPESR2",93,0)
 ; display a message reject explanation
"RTN","PRSPESR2",94,0)
 Q:X=""!($G(PPI)'>0)!($G(PRSIEN)'>0)!($G(PRSD)'>0)
"RTN","PRSPESR2",95,0)
 I "^RG^AL^AA^DL^ML^RL^CP^SL^HX^CB^AD^WP^TR^TV^"'[(U_X_U) D
"RTN","PRSPESR2",96,0)
 . S DDSERROR=1
"RTN","PRSPESR2",97,0)
 . D HLP^DDSUTL("Invalid type of time.")
"RTN","PRSPESR2",98,0)
 I "^HX^"[(U_X_U) D
"RTN","PRSPESR2",99,0)
 . I $P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),"^",12)'>0 S DDSERROR=1 D HLP^DDSUTL("Holiday Excused is only allowed on a Holiday Benefit Day.  See Payroll to set this day as a holiday.")
"RTN","PRSPESR2",100,0)
 I $G(PPI),$G(PRSD),$P(^PRST(458,PPI,1),U,PRSD)>$G(DT) D
"RTN","PRSPESR2",101,0)
 . I "^AL^AA^DL^ML^RL^CP^SL^HX^CB^AD^WP^TR^TV^"'[(U_X_U) D
"RTN","PRSPESR2",102,0)
 ..   S DDSERROR=1
"RTN","PRSPESR2",103,0)
 ..   D HLP^DDSUTL("Invalid type of time. Only leave may be entered on future days")
"RTN","PRSPESR2",104,0)
 Q
"RTN","PRSPESR2",105,0)
VALIDLV(SSCH,SPST) ; Set DDSERROR if any posting is outside the
"RTN","PRSPESR2",106,0)
 ; tour time segements inappropriately
"RTN","PRSPESR2",107,0)
 ;
"RTN","PRSPESR2",108,0)
 ;INPUT:
"RTN","PRSPESR2",109,0)
 ;  SSCH : tour segments as scheduled from node 1 of the day multiple
"RTN","PRSPESR2",110,0)
 ;  SPST : tour segments as posted by ptp in T array format
"RTN","PRSPESR2",111,0)
 N OK,P1,P2,S1,S2,LV,I,I2,J,MSA,VALIDLV
"RTN","PRSPESR2",112,0)
 S (LV,OK,I)=0
"RTN","PRSPESR2",113,0)
 S VALIDLV=""
"RTN","PRSPESR2",114,0)
 ; put tour in similar format as posting
"RTN","PRSPESR2",115,0)
 D MARRAY(.MSA,SSCH)
"RTN","PRSPESR2",116,0)
 F  S I=$O(SPST(I)) Q:I'>0!(LV&'OK)  D
"RTN","PRSPESR2",117,0)
 .  S P1=I,I2=$O(SPST(I,0)),P2=$P(SPST(I,I2),U)
"RTN","PRSPESR2",118,0)
 .  Q:"^AL^AA^DL^CU^ML^RL^HX^SL^CB^AD^WP^TV^TR^"'[$P(SPST(I,I2),U,4)
"RTN","PRSPESR2",119,0)
 .  S LV=1,OK=0
"RTN","PRSPESR2",120,0)
 .  S J=0
"RTN","PRSPESR2",121,0)
 .  F  S J=$O(MSA(J)) Q:J'>0!OK  D
"RTN","PRSPESR2",122,0)
 ..    S S1=J,S2=$O(MSA(J,0)),S2=$P(MSA(J,S2),U)
"RTN","PRSPESR2",123,0)
 ..    I P1=S1!(P1>S1)&((P2=S2)!(P2<S2)) S OK=1
"RTN","PRSPESR2",124,0)
 ;
"RTN","PRSPESR2",125,0)
 I LV,('OK) S VALIDLV=1
"RTN","PRSPESR2",126,0)
 Q VALIDLV
"RTN","PRSPESR2",127,0)
 ;
"RTN","PRSPESR2",128,0)
MARRAY(MARRAY,SEGS) ; BUILD MINUTE ARRAY
"RTN","PRSPESR2",129,0)
 ; INPUT : SEGS--tour of duty segments in global format
"RTN","PRSPESR2",130,0)
 ; OUTPUT: MARRAY--array by reference of tour segments in minutes 
"RTN","PRSPESR2",131,0)
 ;          from midnight format
"RTN","PRSPESR2",132,0)
 ;          EXAMPLE:  
"RTN","PRSPESR2",133,0)
 ;   2 segment tour will look like the following:
"RTN","PRSPESR2",134,0)
 ;        MARRAY(945,1)=1140^03:45P^07:00P
"RTN","PRSPESR2",135,0)
 ;        MARRAY(1140,6)=1305^07:00P^09:45P
"RTN","PRSPESR2",136,0)
 ;        MARRAY(1320,11)=1380^10:00P^11:00P
"RTN","PRSPESR2",137,0)
 ;loop thru the 5 columns of the 7 time segments on ESR
"RTN","PRSPESR2",138,0)
 ; quit if we encounter an error
"RTN","PRSPESR2",139,0)
 ;
"RTN","PRSPESR2",140,0)
 N I,ANY,Z1,Z2,X,Y
"RTN","PRSPESR2",141,0)
 S ANY=1
"RTN","PRSPESR2",142,0)
 F I=1:3:21 Q:('ANY)  D
"RTN","PRSPESR2",143,0)
 . ;
"RTN","PRSPESR2",144,0)
 . ;if absolutely nothing on the segment then we're done
"RTN","PRSPESR2",145,0)
 .  S ANY=$L($P(SEGS,U,I)_$P(SEGS,U,I+1)_$P(SEGS,U,I+2))
"RTN","PRSPESR2",146,0)
 .  Q:'ANY
"RTN","PRSPESR2",147,0)
 .  S X=$P(SEGS,U,I)_U_$P(SEGS,U,I+1)
"RTN","PRSPESR2",148,0)
 .  D CNV^PRSATIM S Z1=$P(Y,U,1),Z2=$P(Y,U,2)
"RTN","PRSPESR2",149,0)
 .  D V0^PRSATP1
"RTN","PRSPESR2",150,0)
 .  S MARRAY(Z1,I)=Z2_U_$P(SEGS,U,I,I+2)
"RTN","PRSPESR2",151,0)
 Q
"RTN","PRSPESR2",152,0)
PSTML(ROW) ; AUTO POST MEAL TIME
"RTN","PRSPESR2",153,0)
 ; if the time segment row that we are on in a form covers
"RTN","PRSPESR2",154,0)
 ; the tour then post a meal.
"RTN","PRSPESR2",155,0)
 ; ROW - is passed as the 
"RTN","PRSPESR2",156,0)
 ; Z is in the form of NODE 5 in the 458.02 day mult
"RTN","PRSPESR2",157,0)
 ;  it changes with edits on the form
"RTN","PRSPESR2",158,0)
 ;  like Z=09:00A^NOON^RG^^30^NOON^08:00P^RG^^^08:00P^MID^CU^15
"RTN","PRSPESR2",159,0)
 ;
"RTN","PRSPESR2",160,0)
 N RNG,ST2SP,FLDNUM,BASE
"RTN","PRSPESR2",161,0)
 Q:$G(PRSML)=""!($G(PRSML)=0)
"RTN","PRSPESR2",162,0)
 ;
"RTN","PRSPESR2",163,0)
 S BASE=ROW-1*5
"RTN","PRSPESR2",164,0)
 ; quit if something is already in mealtime on the form
"RTN","PRSPESR2",165,0)
 Q:$P(Z,U,BASE+5)'=""
"RTN","PRSPESR2",166,0)
 ; compute the field number of the meal time for this row
"RTN","PRSPESR2",167,0)
 S FLDNUM=BASE+114
"RTN","PRSPESR2",168,0)
 ; get the start TO stop segments for this row of the form
"RTN","PRSPESR2",169,0)
 ; if it's an exact match then auto post the meal
"RTN","PRSPESR2",170,0)
 S ST2SP=$P(Z,U,BASE+1,BASE+2)
"RTN","PRSPESR2",171,0)
 I ST2SP=$P($G(PRSN1),U,1,2) D  Q
"RTN","PRSPESR2",172,0)
 .  D PUT^DDSVAL(DIE,.DA,FLDNUM,PRSML)
"RTN","PRSPESR2",173,0)
 .  D REFRESH^DDSUTL
"RTN","PRSPESR2",174,0)
 ; get the start TO stop segments for this row of the form
"RTN","PRSPESR2",175,0)
 ; if it covers the meal and then some autopost the meal
"RTN","PRSPESR2",176,0)
 N DY2,TWO,SCHED,POST,SCH,P1,P2,S1,S2
"RTN","PRSPESR2",177,0)
 ; TOD is a global set up in form start up in ESRFRM^PRSPESR1
"RTN","PRSPESR2",178,0)
 S ST2SP=$P(Z,U,BASE+1,BASE+3)
"RTN","PRSPESR2",179,0)
 S SCHED=$P($G(PRSN1),U,1,3)
"RTN","PRSPESR2",180,0)
 ; is this a two day tour? need to check before calling the
"RTN","PRSPESR2",181,0)
 ; code to set up the minutes array in MARRAY
"RTN","PRSPESR2",182,0)
 S TWO=$P($G(^PRST(457.1,+TOD,0)),U,5)
"RTN","PRSPESR2",183,0)
 S DY2=TWO="Y"
"RTN","PRSPESR2",184,0)
 D MARRAY(.POST,ST2SP)
"RTN","PRSPESR2",185,0)
 D MARRAY(.SCH,$P($G(PRSN1),U,1,3))
"RTN","PRSPESR2",186,0)
 ;get start and stop time minutes form midnight for both
"RTN","PRSPESR2",187,0)
 ; schedule and posting to determine if meal should be autoposted
"RTN","PRSPESR2",188,0)
 S P1=$O(POST(0))
"RTN","PRSPESR2",189,0)
 Q:P1'>0
"RTN","PRSPESR2",190,0)
 S P2=$P(POST(P1,1),U)
"RTN","PRSPESR2",191,0)
 Q:P2'>0
"RTN","PRSPESR2",192,0)
 S S1=$O(SCH(0))
"RTN","PRSPESR2",193,0)
 Q:S1'>0
"RTN","PRSPESR2",194,0)
 S S2=$P(SCH(S1,1),U)
"RTN","PRSPESR2",195,0)
 Q:22'>0
"RTN","PRSPESR2",196,0)
 I P1'>S1&(P2'<S2) D
"RTN","PRSPESR2",197,0)
 .  D PUT^DDSVAL(DIE,.DA,FLDNUM,PRSML)
"RTN","PRSPESR2",198,0)
 .  D REFRESH^DDSUTL
"RTN","PRSPESR2",199,0)
 .  S $P(Z,U,BASE+5)=PRSML
"RTN","PRSPESR2",200,0)
 Q
"RTN","PRSPESR2",201,0)
 ;
"RTN","PRSPESR2",202,0)
OVEREAT(ROW) ; Display warning on POST ACTION ON CHANGE for the 
"RTN","PRSPESR2",203,0)
 ; meal field on the form if lunch more than allotted for tour
"RTN","PRSPESR2",204,0)
 N MTOT,K,BASE,WORK,STR,PRSZ
"RTN","PRSPESR2",205,0)
 ; When X is null they are trying to delete and that's always ok
"RTN","PRSPESR2",206,0)
 Q:$G(Z)=""!($G(ROW)'>0)!($G(X)="")
"RTN","PRSPESR2",207,0)
 S BASE=ROW-1*5
"RTN","PRSPESR2",208,0)
 ;
"RTN","PRSPESR2",209,0)
 S WORK=$$ELAPSE^PRSPESR2(X,$P(Z,U,BASE+1),$P(Z,U,BASE+2))
"RTN","PRSPESR2",210,0)
 I $E(WORK,1,1)="-"!(WORK="00:00")!(WORK=0) D  Q
"RTN","PRSPESR2",211,0)
 .  S DDSERROR=1
"RTN","PRSPESR2",212,0)
 .  S STR="Meal time greater than or equal to time segment."
"RTN","PRSPESR2",213,0)
 .  I X=0 S STR=STR_"  Type @ to remove meal time."
"RTN","PRSPESR2",214,0)
 .  D HLP^DDSUTL(STR)
"RTN","PRSPESR2",215,0)
 S MTOT=0
"RTN","PRSPESR2",216,0)
 S PRSZ=Z S $P(PRSZ,U,BASE+5)=X
"RTN","PRSPESR2",217,0)
 F K=1:5:31 S MTOT=MTOT+$P(PRSZ,U,K+4)
"RTN","PRSPESR2",218,0)
 I MTOT>($G(PRSML)+$G(PRSML2)) D 
"RTN","PRSPESR2",219,0)
 .  S STR="Warning: More meal time than allotted with tour."
"RTN","PRSPESR2",220,0)
 .  D HLP^DDSUTL(.STR)
"RTN","PRSPESR2",221,0)
 Q
"RTN","PRSPESR2",222,0)
BURP(PRSN5) ; return ESR WORK NODE with no blank pieces
"RTN","PRSPESR2",223,0)
 ; PRSN5--esr work node $G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5)
"RTN","PRSPESR2",224,0)
 ; if there's only a meal with a zero then skip that too.
"RTN","PRSPESR2",225,0)
 ;^^^^^NOON^08:00P^RG^^^08:00P^MID^CU^15
"RTN","PRSPESR2",226,0)
 ;
"RTN","PRSPESR2",227,0)
 N SN,I,TSEG
"RTN","PRSPESR2",228,0)
 S SN=""
"RTN","PRSPESR2",229,0)
 F I=1:5:31 D
"RTN","PRSPESR2",230,0)
 .  S TSEG=$P(PRSN5,U,I,I+4)
"RTN","PRSPESR2",231,0)
 .;  W !,I,": ",TSEG
"RTN","PRSPESR2",232,0)
 .  Q:TSEG="^^^^"!(TSEG="")!(TSEG="^^^^0")
"RTN","PRSPESR2",233,0)
 .  S SN=SN_TSEG_"^"
"RTN","PRSPESR2",234,0)
 Q SN
"RTN","PRSPESR3")
0^36^B4084305^n/a
"RTN","PRSPESR3",1,0)
PRSPESR3 ;WOIFO/JAH - Part-time physicians ESR Edit;11/04/04
"RTN","PRSPESR3",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPESR3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPESR3",4,0)
 Q
"RTN","PRSPESR3",5,0)
GETTOUR(PRSIEN,PRSD,TC,Y1,Y4) ; Return all segments of tour with special
"RTN","PRSPESR3",6,0)
 ; tour indicators if any
"RTN","PRSPESR3",7,0)
 N L1,A1,L3,L4,PRSTR
"RTN","PRSPESR3",8,0)
 I Y1="" S Y1=$S(TC=1:"Day Off",TC=2:"Day Tour",TC=3!(TC=4):"Intermittent",1:"")
"RTN","PRSPESR3",9,0)
 ;
"RTN","PRSPESR3",10,0)
 S PRSTR=""
"RTN","PRSPESR3",11,0)
 S (L3,L4)=0
"RTN","PRSPESR3",12,0)
 ;
"RTN","PRSPESR3",13,0)
 F L1=1:3:19 S A1=$P(Y1,"^",L1) Q:A1=""  D
"RTN","PRSPESR3",14,0)
 . S L3=L3+1,Y1(L3)=A1
"RTN","PRSPESR3",15,0)
 . S:$P(Y1,"^",L1+1)'="" Y1(L3)=Y1(L3)_"-"_$P(Y1,"^",L1+1)
"RTN","PRSPESR3",16,0)
 . S:PRSTR'="" PRSTR=PRSTR_", " S PRSTR=PRSTR_Y1(L3)
"RTN","PRSPESR3",17,0)
 . I $P(Y1,"^",L1+2)'="" D
"RTN","PRSPESR3",18,0)
 ..  S L3=L3+1
"RTN","PRSPESR3",19,0)
 ..  S Y1(L3)="  "_$P($G(^PRST(457.2,+$P(Y1,"^",L1+2),0)),"^",1)
"RTN","PRSPESR3",20,0)
 ..  S PRSTR=PRSTR_" "_$P($G(^PRST(457.2,+$P(Y1,"^",L1+2),0)),"^",6)
"RTN","PRSPESR3",21,0)
 ;
"RTN","PRSPESR3",22,0)
 ; add all segments of second tour if any
"RTN","PRSPESR3",23,0)
 ;
"RTN","PRSPESR3",24,0)
 I Y4'="" D
"RTN","PRSPESR3",25,0)
 .F L1=1:3:19 S A1=$P(Y4,"^",L1) Q:A1=""  D
"RTN","PRSPESR3",26,0)
 .. S L3=L3+1,Y1(L3)=A1
"RTN","PRSPESR3",27,0)
 .. S:$P(Y4,"^",L1+1)'="" Y1(L3)=Y1(L3)_"-"_$P(Y4,"^",L1+1)
"RTN","PRSPESR3",28,0)
 .. S:PRSTR'="" PRSTR=PRSTR_", " S PRSTR=PRSTR_Y1(L3)
"RTN","PRSPESR3",29,0)
 .. I $P(Y4,"^",L1+2)'="" D
"RTN","PRSPESR3",30,0)
 ...  S L3=L3+1
"RTN","PRSPESR3",31,0)
 ...  S Y1(L3)="  "_$P($G(^PRST(457.2,+$P(Y4,"^",L1+2),0)),"^",1)
"RTN","PRSPESR3",32,0)
 ...  S PRSTR=PRSTR_" "_$P($G(^PRST(457.2,+$P(Y1,"^",L1+2),0)),"^",6)
"RTN","PRSPESR3",33,0)
 ;
"RTN","PRSPESR3",34,0)
 Q PRSTR
"RTN","PRSPESR3",35,0)
INCESRS(PRSIEN,PPI) ;function returns count of incomplete ESR 
"RTN","PRSPESR3",36,0)
 ;                days (ESR status xref)
"RTN","PRSPESR3",37,0)
 ; effectively a count of the ptp's unsigned esr days (status < 4).
"RTN","PRSPESR3",38,0)
 ; days off don't get added to total
"RTN","PRSPESR3",39,0)
 ; 
"RTN","PRSPESR3",40,0)
 ;
"RTN","PRSPESR3",41,0)
 N INCS
"RTN","PRSPESR3",42,0)
 S INCS=0
"RTN","PRSPESR3",43,0)
 Q:(($G(PRSIEN)'>0)!($G(PPI)'>0)) INCS
"RTN","PRSPESR3",44,0)
 N PPE,STAT,I
"RTN","PRSPESR3",45,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U)
"RTN","PRSPESR3",46,0)
 Q:PPE="" INCS
"RTN","PRSPESR3",47,0)
 S I=0
"RTN","PRSPESR3",48,0)
 F  S I=$O(^PRST(458,"AEA",PRSIEN,PPE,I)) Q:I=""  D
"RTN","PRSPESR3",49,0)
 .  S STAT=$$GETSTAT^PRSPESR1(PRSIEN,PPI,I)
"RTN","PRSPESR3",50,0)
 .  I STAT<4 S INCS=INCS+1
"RTN","PRSPESR3",51,0)
 Q INCS
"RTN","PRSPESR3",52,0)
WARNMSG(STR) ; write string to 80 column output
"RTN","PRSPESR3",53,0)
 ; format a long message string to break lines at words
"RTN","PRSPESR3",54,0)
 N WORD,I
"RTN","PRSPESR3",55,0)
 S WORD=""
"RTN","PRSPESR3",56,0)
 F I=1:1:$L(STR," ") D
"RTN","PRSPESR3",57,0)
 .  S WORD=$P(STR," ",I)
"RTN","PRSPESR3",58,0)
 .  Q:WORD=""
"RTN","PRSPESR3",59,0)
 .  I ($X+$L(WORD)+10)>IOM W !
"RTN","PRSPESR3",60,0)
 .  W WORD," "
"RTN","PRSPESR3",61,0)
 Q
"RTN","PRSPLVA")
0^38^B56019414^n/a
"RTN","PRSPLVA",1,0)
PRSPLVA ;WOIFO/SAB - AUTOPOST LEAVE FOR PART-TIME PHY. WITH MEMO ;4/6/2005
"RTN","PRSPLVA",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPLVA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPLVA",4,0)
 Q
"RTN","PRSPLVA",5,0)
 ;
"RTN","PRSPLVA",6,0)
PLPP(PRSIEN,PPI,DAYN) ; Post Leave for a Pay Period (or day)
"RTN","PRSPLVA",7,0)
 ; Called by the open next PP option to post leave to one new pay period
"RTN","PRSPLVA",8,0)
 ; for one part-time physician.
"RTN","PRSPLVA",9,0)
 ; Called by the enter/edit tour option to re-post leave to one
"RTN","PRSPLVA",10,0)
 ; pay period when a tour is changed.
"RTN","PRSPLVA",11,0)
 ; Input
"RTN","PRSPLVA",12,0)
 ;   PRSIEN - Employee IEN (file 450), should be PTP with active memo
"RTN","PRSPLVA",13,0)
 ;   PPI    - Pay Period IEN (file 458)
"RTN","PRSPLVA",14,0)
 ;   DAYN   - (optional) day # within pay period to only post that day
"RTN","PRSPLVA",15,0)
 ;
"RTN","PRSPLVA",16,0)
 N LVIEN,LVY0,PPD1,PPD15,PRSX,RPPD1,RTDT,Y
"RTN","PRSPLVA",17,0)
 S DAYN=$G(DAYN)
"RTN","PRSPLVA",18,0)
 ;
"RTN","PRSPLVA",19,0)
 ; Determine pay period dates
"RTN","PRSPLVA",20,0)
 S Y=$G(^PRST(458,PPI,1))
"RTN","PRSPLVA",21,0)
 S PRSX=$S(DAYN:DAYN,1:1) ; if passed use day # instead of 1st PP day
"RTN","PRSPLVA",22,0)
 S PPD1=$P(Y,U,PRSX) ; 1st day of PP
"RTN","PRSPLVA",23,0)
 S RPPD1=9999999-PPD1 ; reverse 1st day of PP
"RTN","PRSPLVA",24,0)
 S PRSX=$S(DAYN:DAYN,1:14) ; if passed use day # instead of last PP day
"RTN","PRSPLVA",25,0)
 S PPD15=$$FMADD^XLFDT($P(Y,U,PRSX),1) ; Last day of PP+1
"RTN","PRSPLVA",26,0)
 ; (use day 15 to include leave that starts on 2nd day of 2-day tour and
"RTN","PRSPLVA",27,0)
 ;  would be posted on the prior day)
"RTN","PRSPLVA",28,0)
 K PRSX
"RTN","PRSPLVA",29,0)
 Q:PPD1=""
"RTN","PRSPLVA",30,0)
 ;
"RTN","PRSPLVA",31,0)
 ; loop thru leave requests for employee by reverse to date until
"RTN","PRSPLVA",32,0)
 ; to date is before the pay period or no more to dates
"RTN","PRSPLVA",33,0)
 S RTDT=""
"RTN","PRSPLVA",34,0)
 F  S RTDT=$O(^PRST(458.1,"AD",PRSIEN,RTDT)) Q:'RTDT!(RTDT>RPPD1)  D
"RTN","PRSPLVA",35,0)
 . ; loop thru requests
"RTN","PRSPLVA",36,0)
 . S LVIEN=0
"RTN","PRSPLVA",37,0)
 . S LVIEN=$O(^PRST(458.1,"AD",PRSIEN,RTDT,LVIEN)) Q:'LVIEN  D
"RTN","PRSPLVA",38,0)
 . . S LVY0=$G(^PRST(458.1,LVIEN,0)) ; leave request 0 node
"RTN","PRSPLVA",39,0)
 . . Q:$P(LVY0,U,3)>PPD15  ; skip if from date after pay period+1
"RTN","PRSPLVA",40,0)
 . . Q:$P(LVY0,U,9)'="A"  ; skip if status not approved
"RTN","PRSPLVA",41,0)
 . . ;
"RTN","PRSPLVA",42,0)
 . . ; approved request may overlap PP so post the leave request
"RTN","PRSPLVA",43,0)
 . . D PLR(LVIEN,PPI,DAYN)
"RTN","PRSPLVA",44,0)
 Q
"RTN","PRSPLVA",45,0)
 ;
"RTN","PRSPLVA",46,0)
PLR(LVIEN,SPPI,DAYN,PRSEX) ; Post Leave Request
"RTN","PRSPLVA",47,0)
 ; Called during open next pay period process (by PLPP above) to post
"RTN","PRSPLVA",48,0)
 ;   one leave request to a single pay period.
"RTN","PRSPLVA",49,0)
 ; Called during Supervisory Approvals process to post one leave request
"RTN","PRSPLVA",50,0)
 ;   to all opened pay periods.
"RTN","PRSPLVA",51,0)
 ; Input
"RTN","PRSPLVA",52,0)
 ;   LVIEN  - Leave Request IEN (file 458.1)
"RTN","PRSPLVA",53,0)
 ;   SPPI   - Pay Period IEN (file 458) or Null Value if for all.
"RTN","PRSPLVA",54,0)
 ;   DAYN   - (optional) day # within SPPI or null value
"RTN","PRSPLVA",55,0)
 ;   PRSEX - Passed by reference, will be initialized (killed)
"RTN","PRSPLVA",56,0)
 ; Output
"RTN","PRSPLVA",57,0)
 ;   PRSEX - passed by reference, only defined if the leave was not
"RTN","PRSPLVA",58,0)
 ;           posted to the ESR and should not be approved because the
"RTN","PRSPLVA",59,0)
 ;           leave is not currently on the time card and it has a status
"RTN","PRSPLVA",60,0)
 ;           of Payroll.  This exception should only be applicable when
"RTN","PRSPLVA",61,0)
 ;           auto post is called by the supervisory approval of leave.
"RTN","PRSPLVA",62,0)
 ;
"RTN","PRSPLVA",63,0)
 ;
"RTN","PRSPLVA",64,0)
 ; Note: All applicable time cards are assumed to be locked prior to
"RTN","PRSPLVA",65,0)
 ;       calling this API.
"RTN","PRSPLVA",66,0)
 ;
"RTN","PRSPLVA",67,0)
 Q:'$G(LVIEN)  ; required input
"RTN","PRSPLVA",68,0)
 S SPPI=$G(SPPI)
"RTN","PRSPLVA",69,0)
 ;
"RTN","PRSPLVA",70,0)
 N D1,DAY,EDN,EPP4Y,FATAL,LVDTE,LVDTS,LVY0,PP4Y,PPDN,PPDNB
"RTN","PRSPLVA",71,0)
 N PPDTB,PPDNE,PPDTE,PPE,PPI,PRSFDA,PRSIEN,PRSX,SDN,SPP4Y,TCST,TCUNPOST,Y
"RTN","PRSPLVA",72,0)
 ;
"RTN","PRSPLVA",73,0)
 K PRSEX
"RTN","PRSPLVA",74,0)
 ;
"RTN","PRSPLVA",75,0)
 S DAYN=$G(DAYN)
"RTN","PRSPLVA",76,0)
 S LVY0=$G(^PRST(458.1,LVIEN,0)) ; leave request 0 node
"RTN","PRSPLVA",77,0)
 S PRSIEN=$P(LVY0,U,2) ; employee IEN
"RTN","PRSPLVA",78,0)
 D
"RTN","PRSPLVA",79,0)
 . N CNX,PRSM,X,Y
"RTN","PRSPLVA",80,0)
 . S X=$P(LVY0,U,4)_U_$P(LVY0,U,6)
"RTN","PRSPLVA",81,0)
 . D CNV^PRSATIM
"RTN","PRSPLVA",82,0)
 . S PRSM=Y
"RTN","PRSPLVA",83,0)
 . S LVDTS=$$FMADD^XLFDT($P(LVY0,U,3),,,$P(PRSM,U,1)) ; leave d/t start
"RTN","PRSPLVA",84,0)
 . S LVDTE=$$FMADD^XLFDT($P(LVY0,U,5),,,$P(PRSM,U,2)) ; leave d/t end
"RTN","PRSPLVA",85,0)
 ;
"RTN","PRSPLVA",86,0)
 ; determine starting and ending pay periods
"RTN","PRSPLVA",87,0)
 ;   if single pay period specified
"RTN","PRSPLVA",88,0)
 I $G(SPPI) D
"RTN","PRSPLVA",89,0)
 . S D1=$P(^PRST(458,SPPI,1),U) D PP^PRSAPPU S (SPP4Y,EPP4Y)=PP4Y
"RTN","PRSPLVA",90,0)
 ;   if no pay period specified
"RTN","PRSPLVA",91,0)
 I '$G(SPPI) D
"RTN","PRSPLVA",92,0)
 . S D1=$$FMADD^XLFDT($P(LVY0,U,3),-1) D PP^PRSAPPU S SPP4Y=PP4Y ; based on leave from -1 (use -1 in case of 2-day tour)
"RTN","PRSPLVA",93,0)
 . S D1=$P(LVY0,U,5) D PP^PRSAPPU S EPP4Y=PP4Y ; based on leave to
"RTN","PRSPLVA",94,0)
 ;
"RTN","PRSPLVA",95,0)
 ; loop thru pay periods
"RTN","PRSPLVA",96,0)
 S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPLVA",97,0)
 F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D
"RTN","PRSPLVA",98,0)
 . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPLVA",99,0)
 . ;
"RTN","PRSPLVA",100,0)
 . ; check status of memo
"RTN","PRSPLVA",101,0)
 . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPLVA",102,0)
 . S PRSX=$$MIEN^PRSPUT1(PRSIEN,D1)
"RTN","PRSPLVA",103,0)
 . Q:PRSX'>0  ; skip if pay period is not covered by memo
"RTN","PRSPLVA",104,0)
 . Q:$P(PRSX,U,2)=4  ; skip if memo is reconciled
"RTN","PRSPLVA",105,0)
 . K PRSX
"RTN","PRSPLVA",106,0)
 . ;
"RTN","PRSPLVA",107,0)
 . ; obtain time card status
"RTN","PRSPLVA",108,0)
 . S TCST=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)
"RTN","PRSPLVA",109,0)
 . ;
"RTN","PRSPLVA",110,0)
 . ; determine begin and end day numbers within pay period
"RTN","PRSPLVA",111,0)
 . S PPY1=$G(^PRST(458,PPI,1))
"RTN","PRSPLVA",112,0)
 . ; begin day is greater of leave from date-1 and 1st PP day
"RTN","PRSPLVA",113,0)
 . S PRSX=$S(DAYN:DAYN,1:1) ; if passed use day # instead of 1st PP day
"RTN","PRSPLVA",114,0)
 . S SDT=$S($P(PPY1,U,PRSX)>$$FMADD^XLFDT($P(LVY0,U,3),-1):$P(PPY1,U,PRSX),1:$$FMADD^XLFDT($P(LVY0,U,3),-1))
"RTN","PRSPLVA",115,0)
 . S SDN=$P($G(^PRST(458,"AD",SDT)),U,2) ; start day number
"RTN","PRSPLVA",116,0)
 . ; end day is lesser of leave request to date and last PP day
"RTN","PRSPLVA",117,0)
 . S PRSX=$S(DAYN:DAYN,1:14) ; if passed use day # instead of last PP day
"RTN","PRSPLVA",118,0)
 . S EDT=$S($P(LVY0,U,5)>$P(PPY1,U,PRSX):$P(PPY1,U,PRSX),1:$P(LVY0,U,5))
"RTN","PRSPLVA",119,0)
 . S EDN=$P($G(^PRST(458,"AD",EDT)),U,2) ; end day number
"RTN","PRSPLVA",120,0)
 . K PPY1,PRSX,SDT,EDT
"RTN","PRSPLVA",121,0)
 . ;
"RTN","PRSPLVA",122,0)
 . ; loop thru applicable days in PP
"RTN","PRSPLVA",123,0)
 . S PPDN=SDN-1 ; initial PP day number for loop
"RTN","PRSPLVA",124,0)
 . F  S PPDN=$O(^PRST(458,PPI,"E",PRSIEN,"D",PPDN)) Q:'PPDN!(PPDN>EDN)  D PDAY^PRSPLVA1
"RTN","PRSPLVA",125,0)
 ;
"RTN","PRSPLVA",126,0)
 ; handle fatal exception and quit without updating file 458
"RTN","PRSPLVA",127,0)
 I $G(FATAL) S PRSEX=$P(FATAL,U,2) Q
"RTN","PRSPLVA",128,0)
 ;
"RTN","PRSPLVA",129,0)
 ; clear appropriate time card days
"RTN","PRSPLVA",130,0)
 S PPI="" F  S PPI=$O(TCUNPOST(PPI)) Q:'PPI  D
"RTN","PRSPLVA",131,0)
 . S PPDN="" F  S PPDN=$O(TCUNPOST(PPI,PPDN)) Q:'PPDN  D
"RTN","PRSPLVA",132,0)
 . . N X
"RTN","PRSPLVA",133,0)
 . . S X=$$CLRTCDY^PRSPSAPU(PPI,PRSIEN,PPDN)
"RTN","PRSPLVA",134,0)
 ;
"RTN","PRSPLVA",135,0)
 ; update the ESR
"RTN","PRSPLVA",136,0)
 I $D(PRSFDA) D FILE^DIE("","PRSFDA") D MSG^DIALOG()
"RTN","PRSPLVA",137,0)
 ;
"RTN","PRSPLVA",138,0)
 Q
"RTN","PRSPLVA",139,0)
 ;
"RTN","PRSPLVA",140,0)
ULR(LVY0) ; Unpost Leave Request
"RTN","PRSPLVA",141,0)
 ; Called by the Edit Leave Request and Cancel Leave Request options
"RTN","PRSPLVA",142,0)
 ;   to unpost one leave request from all opened pay periods.
"RTN","PRSPLVA",143,0)
 ; Input
"RTN","PRSPLVA",144,0)
 ;   LVIEN  - Leave Request 0 Node (before edit) (see file 458.1)
"RTN","PRSPLVA",145,0)
 ; 
"RTN","PRSPLVA",146,0)
 ; Note: All applicable time cards are assumed to be locked prior to
"RTN","PRSPLVA",147,0)
 ;       calling this API.
"RTN","PRSPLVA",148,0)
 ;
"RTN","PRSPLVA",149,0)
 Q:$G(LVY0)=""  ; required input
"RTN","PRSPLVA",150,0)
 ;
"RTN","PRSPLVA",151,0)
 N D1,DAY,EDN,EPP4Y,LVDTE,LVDTS,PP4Y,PPDN,PPDNB
"RTN","PRSPLVA",152,0)
 N PPDTB,PPDNE,PPDTE,PPE,PPI,PRSFDA,PRSIEN,SDN,SPP4Y,Y
"RTN","PRSPLVA",153,0)
 ;
"RTN","PRSPLVA",154,0)
 S PRSIEN=$P(LVY0,U,2) ; employee IEN
"RTN","PRSPLVA",155,0)
 D
"RTN","PRSPLVA",156,0)
 . N CNX,PRSM,X,Y
"RTN","PRSPLVA",157,0)
 . S X=$P(LVY0,U,4)_U_$P(LVY0,U,6)
"RTN","PRSPLVA",158,0)
 . D CNV^PRSATIM
"RTN","PRSPLVA",159,0)
 . S PRSM=Y
"RTN","PRSPLVA",160,0)
 . S LVDTS=$$FMADD^XLFDT($P(LVY0,U,3),,,$P(PRSM,U,1)) ; leave d/t start
"RTN","PRSPLVA",161,0)
 . S LVDTE=$$FMADD^XLFDT($P(LVY0,U,5),,,$P(PRSM,U,2)) ; leave d/t end
"RTN","PRSPLVA",162,0)
 ;
"RTN","PRSPLVA",163,0)
 ; determine starting and ending pay periods
"RTN","PRSPLVA",164,0)
 S D1=$$FMADD^XLFDT($P(LVY0,U,3),-1) D PP^PRSAPPU S SPP4Y=PP4Y ; based on leave from -1 (use -1 in case of 2-day tour)
"RTN","PRSPLVA",165,0)
 S D1=$P(LVY0,U,5) D PP^PRSAPPU S EPP4Y=PP4Y ; based on leave to
"RTN","PRSPLVA",166,0)
 ;
"RTN","PRSPLVA",167,0)
 ; loop thru pay periods
"RTN","PRSPLVA",168,0)
 S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPLVA",169,0)
 F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D
"RTN","PRSPLVA",170,0)
 . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPLVA",171,0)
 . ;
"RTN","PRSPLVA",172,0)
 . ; check status of memo
"RTN","PRSPLVA",173,0)
 . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPLVA",174,0)
 . S PRSX=$$MIEN^PRSPUT1(PRSIEN,D1)
"RTN","PRSPLVA",175,0)
 . Q:PRSX'>0  ; skip if pay period is not covered by memo
"RTN","PRSPLVA",176,0)
 . Q:$P(PRSX,U,2)=4  ; skip if memo is reconciled
"RTN","PRSPLVA",177,0)
 . K PRSX
"RTN","PRSPLVA",178,0)
 . ;
"RTN","PRSPLVA",179,0)
 . ; determine begin and end day numbers within pay period
"RTN","PRSPLVA",180,0)
 . S PPY1=$G(^PRST(458,PPI,1))
"RTN","PRSPLVA",181,0)
 . ; begin day is greater of leave from date-1 and 1st PP day
"RTN","PRSPLVA",182,0)
 . S SDT=$S($P(PPY1,U,1)>$$FMADD^XLFDT($P(LVY0,U,3),-1):$P(PPY1,U,1),1:$$FMADD^XLFDT($P(LVY0,U,3),-1))
"RTN","PRSPLVA",183,0)
 . S SDN=$P($G(^PRST(458,"AD",SDT)),U,2) ; start day number
"RTN","PRSPLVA",184,0)
 . ; end day is lesser of leave request to date and last PP day
"RTN","PRSPLVA",185,0)
 . S EDT=$S($P(LVY0,U,5)>$P(PPY1,U,14):$P(PPY1,U,14),1:$P(LVY0,U,5))
"RTN","PRSPLVA",186,0)
 . S EDN=$P($G(^PRST(458,"AD",EDT)),U,2) ; end day number
"RTN","PRSPLVA",187,0)
 . K PPY1,SDT,EDT
"RTN","PRSPLVA",188,0)
 . ;
"RTN","PRSPLVA",189,0)
 . ; loop thru applicable days in PP
"RTN","PRSPLVA",190,0)
 . S PPDN=SDN-1 ; initial PP day number for loop
"RTN","PRSPLVA",191,0)
 . F  S PPDN=$O(^PRST(458,PPI,"E",PRSIEN,"D",PPDN)) Q:'PPDN!(PPDN>EDN)  D PDAY^PRSPLVA2
"RTN","PRSPLVA",192,0)
 ;
"RTN","PRSPLVA",193,0)
 ; update the ESR
"RTN","PRSPLVA",194,0)
 I $D(PRSFDA) D FILE^DIE("S","PRSFDA") D MSG^DIALOG()
"RTN","PRSPLVA",195,0)
 ;
"RTN","PRSPLVA",196,0)
 ; Call API BURP^PRSPESR2 to 'burp' the ESR for any unposted days.
"RTN","PRSPLVA",197,0)
 ; loop thru iens in PRSFDA(), get node 5, use burp, if result different
"RTN","PRSPLVA",198,0)
 ; then save result back in node 5
"RTN","PRSPLVA",199,0)
 I $D(PRSFDA) D
"RTN","PRSPLVA",200,0)
 . N PPDIENS,PPDN,PPI,PRSIEN,PRSX,PRSY
"RTN","PRSPLVA",201,0)
 . ; loop thru iens (days)
"RTN","PRSPLVA",202,0)
 . S PPDIENS="" F  S PPDIENS=$O(PRSFDA(458.02,PPDIENS)) Q:PPDIENS=""  D
"RTN","PRSPLVA",203,0)
 . . S PPDN=$P(PPDIENS,",",1)
"RTN","PRSPLVA",204,0)
 . . S PRSIEN=$P(PPDIENS,",",2)
"RTN","PRSPLVA",205,0)
 . . S PPI=$P(PPDIENS,",",3)
"RTN","PRSPLVA",206,0)
 . . S PRSX=$G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))
"RTN","PRSPLVA",207,0)
 . . S PRSY=$$BURP^PRSPESR2(PRSX)
"RTN","PRSPLVA",208,0)
 . . I PRSX'=PRSY S ^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5)=PRSY
"RTN","PRSPLVA",209,0)
 ;
"RTN","PRSPLVA",210,0)
 Q
"RTN","PRSPLVA",211,0)
 ;
"RTN","PRSPLVA",212,0)
 ;PRSPLVA
"RTN","PRSPLVA1")
0^39^B61516932^n/a
"RTN","PRSPLVA1",1,0)
PRSPLVA1 ;WOIFO/SAB - AUTOPOST LEAVE FOR PTP (CONT) ;03/30/2005
"RTN","PRSPLVA1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPLVA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPLVA1",4,0)
 Q
"RTN","PRSPLVA1",5,0)
 ;
"RTN","PRSPLVA1",6,0)
PDAY ; Process Day (within Pay Period loop)
"RTN","PRSPLVA1",7,0)
 ; called from PRSPLVA
"RTN","PRSPLVA1",8,0)
 ; input variables LVDTE,LVDTS,LVY0,PPDN,PPI,PRSIEN,PRSFDA(),
"RTN","PRSPLVA1",9,0)
 ;   TCST,TCUNPOST()
"RTN","PRSPLVA1",10,0)
 ; output variable
"RTN","PRSPLVA1",11,0)
 ;   FATAL  = 1^PPI, only defined if fatal exception occurred
"RTN","PRSPLVA1",12,0)
 ;   PRSFDA() may be updated with additional data to post to ESR
"RTN","PRSPLVA1",13,0)
 ;   TCUNPOST() may be updated with another day to unpost from timecard
"RTN","PRSPLVA1",14,0)
 ;
"RTN","PRSPLVA1",15,0)
 N ESR,ESRRG,ESRLVM,ESRST,FOUND,OVERLAP,PPDIENS,PRSDT,PRSX
"RTN","PRSPLVA1",16,0)
 N PSTDTE,PSTDTS,PSTMEAL,PSTSEG,PSTTYP,SEGI,TC,TOD,TODD,TODL,TOURLV
"RTN","PRSPLVA1",17,0)
 N TSE,TSID,TSS,TSY
"RTN","PRSPLVA1",18,0)
 ;
"RTN","PRSPLVA1",19,0)
 ; skip day if not a scheduled tour
"RTN","PRSPLVA1",20,0)
 Q:$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,1)),U)=""
"RTN","PRSPLVA1",21,0)
 ;
"RTN","PRSPLVA1",22,0)
 S PPDIENS=PPDN_","_PRSIEN_","_PPI_","
"RTN","PRSPLVA1",23,0)
 ;
"RTN","PRSPLVA1",24,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,PPDN) ; FileMan date of day number
"RTN","PRSPLVA1",25,0)
 ;
"RTN","PRSPLVA1",26,0)
 ; load tour segments from both tours into arrays TOD() and TODD()
"RTN","PRSPLVA1",27,0)
 D LOADTOD^PRSPLVU(PPI,PRSIEN,PPDN,.TOD,.TODD)
"RTN","PRSPLVA1",28,0)
 ;
"RTN","PRSPLVA1",29,0)
 ; load ESR segments into array ESR()
"RTN","PRSPLVA1",30,0)
 D LOADESR^PRSPLVU(PPI,PRSIEN,PPDN,.ESR)
"RTN","PRSPLVA1",31,0)
 ;
"RTN","PRSPLVA1",32,0)
 ; load time card segments into array TC()
"RTN","PRSPLVA1",33,0)
 D LOADTC^PRSPLVU(PPI,PRSIEN,PPDN,.TC)
"RTN","PRSPLVA1",34,0)
 ;
"RTN","PRSPLVA1",35,0)
 ; determine leave postings
"RTN","PRSPLVA1",36,0)
 ; loop thru tour segments
"RTN","PRSPLVA1",37,0)
 S TSID="" F  S TSID=$O(TOD(TSID)) Q:TSID=""  D  Q:$G(FATAL)
"RTN","PRSPLVA1",38,0)
 . S TSY=TOD(TSID)
"RTN","PRSPLVA1",39,0)
 . S TSS=$P(TSY,U)
"RTN","PRSPLVA1",40,0)
 . S TSE=$P(TSY,U,2)
"RTN","PRSPLVA1",41,0)
 . ; skip if tour seg. end < OR = to leave start
"RTN","PRSPLVA1",42,0)
 . Q:TSE'>LVDTS
"RTN","PRSPLVA1",43,0)
 . ; skip if tour seg. start > OR = to leave end
"RTN","PRSPLVA1",44,0)
 . Q:TSS'<LVDTE
"RTN","PRSPLVA1",45,0)
 . ;
"RTN","PRSPLVA1",46,0)
 . ; leave overlaps tour segment
"RTN","PRSPLVA1",47,0)
 . ;
"RTN","PRSPLVA1",48,0)
 . ; determine posting times
"RTN","PRSPLVA1",49,0)
 . ; posting start is greater of leave start and tour seg. start
"RTN","PRSPLVA1",50,0)
 . S PSTDTS=$S(LVDTS>TSS:LVDTS,1:TSS)
"RTN","PRSPLVA1",51,0)
 . ; posting end is lesser of leave end and tour seg. end
"RTN","PRSPLVA1",52,0)
 . S PSTDTE=$S(LVDTE<TSE:LVDTE,1:TSE)
"RTN","PRSPLVA1",53,0)
 . ;
"RTN","PRSPLVA1",54,0)
 . ; determine type of time to post
"RTN","PRSPLVA1",55,0)
 . S PSTTYP=$P(LVY0,U,7)
"RTN","PRSPLVA1",56,0)
 . I $P(TSY,U,3)'="RG","TR TV"'[PSTTYP S PSTTYP="UN"
"RTN","PRSPLVA1",57,0)
 . ;
"RTN","PRSPLVA1",58,0)
 . S PSTMEAL=0 ; init meal time
"RTN","PRSPLVA1",59,0)
 . ;
"RTN","PRSPLVA1",60,0)
 . ; if leave is within or equal to the tour segment then calculate
"RTN","PRSPLVA1",61,0)
 . ; a meal based on the user-specified leave request hours
"RTN","PRSPLVA1",62,0)
 . I LVDTS'<TSS,LVDTE'>TSE D
"RTN","PRSPLVA1",63,0)
 . . N CLM,FLD,TODI,TODN
"RTN","PRSPLVA1",64,0)
 . . Q:$P(TSY,U,3)'="RG"
"RTN","PRSPLVA1",65,0)
 . . S CLM=($$FMDIFF^XLFDT(LVDTE,LVDTS,2))/60 ; calc lv length min
"RTN","PRSPLVA1",66,0)
 . . S PSTMEAL=CLM-($P(LVY0,U,15)*60)
"RTN","PRSPLVA1",67,0)
 . . I PSTMEAL<0 S PSTMEAL=0 Q  ; must be positive or zero
"RTN","PRSPLVA1",68,0)
 . . I PSTMEAL#15 S PSTMEAL=0 Q  ; must be multiple of 15
"RTN","PRSPLVA1",69,0)
 . . ; must not exceed meal time for TOD
"RTN","PRSPLVA1",70,0)
 . . S TODN=$P(TSID,"-",1) ; determine tour # (1 or 2) for segment
"RTN","PRSPLVA1",71,0)
 . . I PSTMEAL>$P($G(TODD(TODN)),U,3) S PSTMEAL=$P($G(TODD(TODN)),U,3)
"RTN","PRSPLVA1",72,0)
 . ;
"RTN","PRSPLVA1",73,0)
 . ; if meal was not set based on leave request hours then check if it
"RTN","PRSPLVA1",74,0)
 . ; can be set based on tour info
"RTN","PRSPLVA1",75,0)
 . I PSTMEAL=0 D
"RTN","PRSPLVA1",76,0)
 . . N TODN
"RTN","PRSPLVA1",77,0)
 . . S TODN=$P(TSID,"-",1) ; tour # (1 or 2)
"RTN","PRSPLVA1",78,0)
 . . ; quit if tour does not have a meal
"RTN","PRSPLVA1",79,0)
 . . Q:$P($G(TODD(TODN)),U,3)'>0
"RTN","PRSPLVA1",80,0)
 . . ; quit if segment # currently being processed is not the longest
"RTN","PRSPLVA1",81,0)
 . . ; (better to place meal in the longest segment when more than one)
"RTN","PRSPLVA1",82,0)
 . . Q:$P($G(TODD(TODN)),U,4)'=$P(TSID,"-",2)
"RTN","PRSPLVA1",83,0)
 . . ; quit if leave started after tour began
"RTN","PRSPLVA1",84,0)
 . . Q:LVDTS>$P($G(TODD(TODN)),U,1)
"RTN","PRSPLVA1",85,0)
 . . ; quit if leave ended before tour ended
"RTN","PRSPLVA1",86,0)
 . . Q:LVDTE<$P($G(TODD(TODN)),U,2)
"RTN","PRSPLVA1",87,0)
 . . ; since leave covers the entire tour - set meal time based on tour
"RTN","PRSPLVA1",88,0)
 . . S PSTMEAL=$P($G(TODD(TODN)),U,3)
"RTN","PRSPLVA1",89,0)
 . ;
"RTN","PRSPLVA1",90,0)
 . ; skip if proposed posting covered by holiday excused on ESR
"RTN","PRSPLVA1",91,0)
 . S FOUND=0
"RTN","PRSPLVA1",92,0)
 . ;   loop thru ESR segments
"RTN","PRSPLVA1",93,0)
 . S SEGI="" F  S SEGI=$O(ESR(SEGI)) Q:SEGI=""  D  Q:FOUND
"RTN","PRSPLVA1",94,0)
 . . N ESRY
"RTN","PRSPLVA1",95,0)
 . . S ESRY=ESR(SEGI)
"RTN","PRSPLVA1",96,0)
 . . Q:$P(ESRY,U,3)'="HX"  ; quit if not holiday ex
"RTN","PRSPLVA1",97,0)
 . . I PSTDTS'<$P(ESRY,U),PSTDTE'>$P(ESRY,U,2) S FOUND=1
"RTN","PRSPLVA1",98,0)
 . Q:FOUND  ; skip because posting is within HX (holiday excused)
"RTN","PRSPLVA1",99,0)
 . ;
"RTN","PRSPLVA1",100,0)
 . ; skip if proposed posting is already on the ESR
"RTN","PRSPLVA1",101,0)
 . S FOUND=0
"RTN","PRSPLVA1",102,0)
 . ;   loop thru ESR segments
"RTN","PRSPLVA1",103,0)
 . S SEGI="" F  S SEGI=$O(ESR(SEGI)) Q:SEGI=""  D  Q:FOUND
"RTN","PRSPLVA1",104,0)
 . . N ESRY
"RTN","PRSPLVA1",105,0)
 . . S ESRY=ESR(SEGI)
"RTN","PRSPLVA1",106,0)
 . . Q:$P(ESRY,U,3)'=PSTTYP  ; quit if same type
"RTN","PRSPLVA1",107,0)
 . . I PSTDTS'<$P(ESRY,U),PSTDTE'>$P(ESRY,U,2) S FOUND=1
"RTN","PRSPLVA1",108,0)
 . Q:FOUND  ; skip because posting is already covered on ESR
"RTN","PRSPLVA1",109,0)
 . ;
"RTN","PRSPLVA1",110,0)
 . ; if time card status = "P" and proposed posting in not on the
"RTN","PRSPLVA1",111,0)
 . ; current time card then record a fatal exception and quit
"RTN","PRSPLVA1",112,0)
 . ;   loop thru time card exception segments
"RTN","PRSPLVA1",113,0)
 . I TCST="P" D  I 'FOUND S FATAL="1^"_PPI Q 
"RTN","PRSPLVA1",114,0)
 . . S FOUND=0
"RTN","PRSPLVA1",115,0)
 . . S SEGI="" F  S SEGI=$O(TC(SEGI)) Q:SEGI=""  D  Q:FOUND
"RTN","PRSPLVA1",116,0)
 . . . N TCY
"RTN","PRSPLVA1",117,0)
 . . . S TCY=TC(SEGI)
"RTN","PRSPLVA1",118,0)
 . . . Q:$P(TCY,U,3)'=PSTTYP  ; quit if not same type
"RTN","PRSPLVA1",119,0)
 . . . I PSTDTS'<$P(TCY,U),PSTDTE'>$P(TCY,U,2) S FOUND=1
"RTN","PRSPLVA1",120,0)
 . ;
"RTN","PRSPLVA1",121,0)
 . ; OK to add posting to FDA array
"RTN","PRSPLVA1",122,0)
 . ;
"RTN","PRSPLVA1",123,0)
 . ;   review ESR and FDA to determine next open segment
"RTN","PRSPLVA1",124,0)
 . S PSTSEG=0 F SEGI=1:1:7 I '$D(ESR(SEGI)) S PSTSEG=SEGI Q
"RTN","PRSPLVA1",125,0)
 . ;
"RTN","PRSPLVA1",126,0)
 . ; if segment not available then report exception and skip?
"RTN","PRSPLVA1",127,0)
 . Q:'PSTSEG
"RTN","PRSPLVA1",128,0)
 . ;
"RTN","PRSPLVA1",129,0)
 . ; add posting to FDA() array and ESR() array
"RTN","PRSPLVA1",130,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+110)=$$FMETA^PRSPLVU($P(PSTDTS,".",2)) ; start time
"RTN","PRSPLVA1",131,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+111)=$$FMETA^PRSPLVU($P(PSTDTE,".",2)) ; stop time
"RTN","PRSPLVA1",132,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+112)=PSTTYP ; type time
"RTN","PRSPLVA1",133,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+114)=PSTMEAL ; meal
"RTN","PRSPLVA1",134,0)
 . S ESR(PSTSEG)=PSTDTS_U_PSTDTE_U_PSTTYP_U_PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+110)_U_PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+111)_U_PSTMEAL
"RTN","PRSPLVA1",135,0)
 ;
"RTN","PRSPLVA1",136,0)
 ; quit if fatal exception
"RTN","PRSPLVA1",137,0)
 Q:$G(FATAL)
"RTN","PRSPLVA1",138,0)
 ;
"RTN","PRSPLVA1",139,0)
 ; quit if nothing will be posted to ESR day
"RTN","PRSPLVA1",140,0)
 Q:'$D(PRSFDA(458.02,PPDIENS))
"RTN","PRSPLVA1",141,0)
 ;
"RTN","PRSPLVA1",142,0)
 ; obtain current ESR daily status
"RTN","PRSPLVA1",143,0)
 S ESRST=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U)
"RTN","PRSPLVA1",144,0)
 ; 
"RTN","PRSPLVA1",145,0)
 ; determine proposed new status of ESR day
"RTN","PRSPLVA1",146,0)
 ;
"RTN","PRSPLVA1",147,0)
 ;   determine if any ESR time segments overlap
"RTN","PRSPLVA1",148,0)
 ;     (some types of time are excluded from check)
"RTN","PRSPLVA1",149,0)
 S OVERLAP=0
"RTN","PRSPLVA1",150,0)
 S SEGI=0 F  S SEGI=$O(ESR(SEGI)) Q:'SEGI  D
"RTN","PRSPLVA1",151,0)
 . N SEGJ,SEGX,SEGY
"RTN","PRSPLVA1",152,0)
 . S SEGX=ESR(SEGI)
"RTN","PRSPLVA1",153,0)
 . Q:"ON SB UN"[$P(SEGX,U,3)
"RTN","PRSPLVA1",154,0)
 . S SEGJ=SEGI F  S SEGJ=$O(ESR(SEGJ)) Q:'SEGJ  D
"RTN","PRSPLVA1",155,0)
 . . S SEGY=ESR(SEGJ)
"RTN","PRSPLVA1",156,0)
 . . Q:"ON SB UN"[$P(SEGY,U,3)
"RTN","PRSPLVA1",157,0)
 . . Q:$P(SEGX,U,2)'>$P(SEGY,U,1)
"RTN","PRSPLVA1",158,0)
 . . Q:$P(SEGX,U,1)'<$P(SEGY,U,2)
"RTN","PRSPLVA1",159,0)
 . . S OVERLAP=1
"RTN","PRSPLVA1",160,0)
 ;
"RTN","PRSPLVA1",161,0)
 ;   determine if entire tour covered by leave
"RTN","PRSPLVA1",162,0)
 S PRSX=$G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,0))
"RTN","PRSPLVA1",163,0)
 S TODL=$P(PRSX,U,8)+$P(PRSX,U,14) ; tour of duty length in hours
"RTN","PRSPLVA1",164,0)
 ;     loop thru ESR segments to add up leave
"RTN","PRSPLVA1",165,0)
 S ESRLVM=0 ; leave in minutes
"RTN","PRSPLVA1",166,0)
 S SEGI="" F  S SEGI=$O(ESR(SEGI)) Q:SEGI=""  D
"RTN","PRSPLVA1",167,0)
 . N ESRY,SEGLVM
"RTN","PRSPLVA1",168,0)
 . S ESRY=ESR(SEGI)
"RTN","PRSPLVA1",169,0)
 . Q:"AL SL WP CU AA ML RL NL CB AD DL"'[$P(ESRY,U,3)
"RTN","PRSPLVA1",170,0)
 . S SEGLVM=($$FMDIFF^XLFDT($P(ESRY,U,2),$P(ESRY,U,1),2)/60)-$P(ESRY,U,6)
"RTN","PRSPLVA1",171,0)
 . S ESRLVM=ESRLVM+SEGLVM
"RTN","PRSPLVA1",172,0)
 S TOURLV=$S((ESRLVM/60)'<TODL:1,1:0) ; true if tour covered by leave
"RTN","PRSPLVA1",173,0)
 ;
"RTN","PRSPLVA1",174,0)
 ;   determine if any RG time on ESR
"RTN","PRSPLVA1",175,0)
 S ESRRG=$S($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))["RG":1,1:0)
"RTN","PRSPLVA1",176,0)
 ;
"RTN","PRSPLVA1",177,0)
 ;   if not started/pending/resubmit and no RG, no overlaps, and
"RTN","PRSPLVA1",178,0)
 ;   tour covered by leave then auto sign based on leave. Otherwise,
"RTN","PRSPLVA1",179,0)
 ;   if not started then change to pending
"RTN","PRSPLVA1",180,0)
 I "^1^2^3^"[(U_ESRST_U) D
"RTN","PRSPLVA1",181,0)
 . N SIGNED
"RTN","PRSPLVA1",182,0)
 . S SIGNED=0
"RTN","PRSPLVA1",183,0)
 . I 'ESRRG,'OVERLAP,TOURLV D
"RTN","PRSPLVA1",184,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA1",185,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA1",186,0)
 . . S PRSFDA(458.02,PPDIENS,149)="3" ; signed method = leave request
"RTN","PRSPLVA1",187,0)
 . . S SIGNED=1
"RTN","PRSPLVA1",188,0)
 . I 'SIGNED,ESRST=1 S PRSFDA(458.02,PPDIENS,146)="2" ; status = pending
"RTN","PRSPLVA1",189,0)
 ;
"RTN","PRSPLVA1",190,0)
 ;   if signed or approved and no overlap then re-sign.  Otherwise
"RTN","PRSPLVA1",191,0)
 ;   change to pending.
"RTN","PRSPLVA1",192,0)
 I "^4^5^"[(U_ESRST_U) D
"RTN","PRSPLVA1",193,0)
 . ;
"RTN","PRSPLVA1",194,0)
 . I 'OVERLAP D
"RTN","PRSPLVA1",195,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA1",196,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA1",197,0)
 . . ; if tour covered by leave and method is extended absence then
"RTN","PRSPLVA1",198,0)
 . . ; change signed method to leave
"RTN","PRSPLVA1",199,0)
 . . I TOURLV,$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U,3)=2 S PRSFDA(458.02,PPDIENS,149)="3"
"RTN","PRSPLVA1",200,0)
 . ;
"RTN","PRSPLVA1",201,0)
 . I OVERLAP D
"RTN","PRSPLVA1",202,0)
 . . S PRSFDA(458.02,PPDIENS,146)="2" ; status = pending
"RTN","PRSPLVA1",203,0)
 . . S PRSFDA(458.02,PPDIENS,147)="@" ; delete signed d/t
"RTN","PRSPLVA1",204,0)
 . . S PRSFDA(458.02,PPDIENS,149)="@" ; delete signed method
"RTN","PRSPLVA1",205,0)
 . ;
"RTN","PRSPLVA1",206,0)
 . ; if day was approved and time card status = T then add to unpost list
"RTN","PRSPLVA1",207,0)
 . I ESRST=5,TCST="T" S TCUNPOST(PPI,PPDN)=""
"RTN","PRSPLVA1",208,0)
 ;
"RTN","PRSPLVA1",209,0)
 Q
"RTN","PRSPLVA1",210,0)
 ;
"RTN","PRSPLVA1",211,0)
 ;PRSPLVA1
"RTN","PRSPLVA2")
0^51^B52382378^n/a
"RTN","PRSPLVA2",1,0)
PRSPLVA2 ;WOIFO/SAB - AUTOPOST LEAVE FOR PTP (CONT) ;3/30/2005
"RTN","PRSPLVA2",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPLVA2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPLVA2",4,0)
 Q
"RTN","PRSPLVA2",5,0)
 ;
"RTN","PRSPLVA2",6,0)
PDAY ; Process Day (within Pay Period loop of Unpost feature)
"RTN","PRSPLVA2",7,0)
 ; called from PRSPLVA
"RTN","PRSPLVA2",8,0)
 ; input variables LVDTE,LVDTS,LVY0,PPDN,PPI,PRSIEN,PRSFDA(),
"RTN","PRSPLVA2",9,0)
 ; output variable
"RTN","PRSPLVA2",10,0)
 ;   PRSFDA() may be updated with additional data to post to ESR
"RTN","PRSPLVA2",11,0)
 ;
"RTN","PRSPLVA2",12,0)
 N ESR,ESRHX,ESRRG,ESRLVM,ESRST,FOUND,OVERLAP,PPDIENS,PRSDT,PRSX
"RTN","PRSPLVA2",13,0)
 N PSTDTE,PSTDTS,PSTMEAL,PSTSEG,PSTTYP,SEGI,TOD,TODD,TODL,TOURLV
"RTN","PRSPLVA2",14,0)
 N TSE,TSID,TSS,TSY
"RTN","PRSPLVA2",15,0)
 ;
"RTN","PRSPLVA2",16,0)
 ; skip day if not a scheduled tour
"RTN","PRSPLVA2",17,0)
 Q:$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,1)),U)=""
"RTN","PRSPLVA2",18,0)
 ;
"RTN","PRSPLVA2",19,0)
 S PPDIENS=PPDN_","_PRSIEN_","_PPI_","
"RTN","PRSPLVA2",20,0)
 ;
"RTN","PRSPLVA2",21,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,PPDN) ; FileMan date of day number
"RTN","PRSPLVA2",22,0)
 ;
"RTN","PRSPLVA2",23,0)
 ; load tour segments from both tours into arrays TOD() and TODD()
"RTN","PRSPLVA2",24,0)
 D LOADTOD^PRSPLVU(PPI,PRSIEN,PPDN,.TOD,.TODD)
"RTN","PRSPLVA2",25,0)
 ;
"RTN","PRSPLVA2",26,0)
 ; load ESR segments into array ESR()
"RTN","PRSPLVA2",27,0)
 D LOADESR^PRSPLVU(PPI,PRSIEN,PPDN,.ESR)
"RTN","PRSPLVA2",28,0)
 ;
"RTN","PRSPLVA2",29,0)
 ; determine leave postings
"RTN","PRSPLVA2",30,0)
 ; loop thru tour segments
"RTN","PRSPLVA2",31,0)
 S TSID="" F  S TSID=$O(TOD(TSID)) Q:TSID=""  D
"RTN","PRSPLVA2",32,0)
 . S TSY=TOD(TSID)
"RTN","PRSPLVA2",33,0)
 . S TSS=$P(TSY,U)
"RTN","PRSPLVA2",34,0)
 . S TSE=$P(TSY,U,2)
"RTN","PRSPLVA2",35,0)
 . ; skip if tour seg. end < leave start
"RTN","PRSPLVA2",36,0)
 . Q:TSE<LVDTS
"RTN","PRSPLVA2",37,0)
 . ; skip if tour seg. start > leave end
"RTN","PRSPLVA2",38,0)
 . Q:TSS>LVDTE
"RTN","PRSPLVA2",39,0)
 . ;
"RTN","PRSPLVA2",40,0)
 . ; leave overlaps tour segment
"RTN","PRSPLVA2",41,0)
 . ;
"RTN","PRSPLVA2",42,0)
 . ; determine posting times
"RTN","PRSPLVA2",43,0)
 . ; posting start is greater of leave start and tour seg. start
"RTN","PRSPLVA2",44,0)
 . S PSTDTS=$S(LVDTS>TSS:LVDTS,1:TSS)
"RTN","PRSPLVA2",45,0)
 . ; posting end is lesser of leave end and tour seg. end
"RTN","PRSPLVA2",46,0)
 . S PSTDTE=$S(LVDTE<TSE:LVDTE,1:TSE)
"RTN","PRSPLVA2",47,0)
 . ;
"RTN","PRSPLVA2",48,0)
 . ; determine type of time to post
"RTN","PRSPLVA2",49,0)
 . S PSTTYP=$P(LVY0,U,7)
"RTN","PRSPLVA2",50,0)
 . I $P(TSY,U,3)'="RG","TR TV"'[PSTTYP S PSTTYP="UN"
"RTN","PRSPLVA2",51,0)
 . ;
"RTN","PRSPLVA2",52,0)
 . S PSTMEAL=0 ; init
"RTN","PRSPLVA2",53,0)
 . ;
"RTN","PRSPLVA2",54,0)
 . ; if leave is within or equal to the tour segment then calculate
"RTN","PRSPLVA2",55,0)
 . ; a meal based on the leave request hours
"RTN","PRSPLVA2",56,0)
 . I LVDTS'<TSS,LVDTE'>TSE D
"RTN","PRSPLVA2",57,0)
 . . N CLM,FLD,TODI,TODN
"RTN","PRSPLVA2",58,0)
 . . Q:$P(TSY,U,3)'="RG"
"RTN","PRSPLVA2",59,0)
 . . S CLM=($$FMDIFF^XLFDT(LVDTE,LVDTS,2))/60 ; calc lv length min
"RTN","PRSPLVA2",60,0)
 . . S PSTMEAL=CLM-($P(LVY0,U,15)*60)
"RTN","PRSPLVA2",61,0)
 . . I PSTMEAL<0 S PSTMEAL=0 Q  ; must be positive or zero
"RTN","PRSPLVA2",62,0)
 . . I PSTMEAL#15 S PSTMEAL=0 Q  ; must be multiple of 15
"RTN","PRSPLVA2",63,0)
 . . ; must not exceed meal time for TOD
"RTN","PRSPLVA2",64,0)
 . . S TODN=$P(TSID,"-",1) ; determine tour # (1 or 2) for segment
"RTN","PRSPLVA2",65,0)
 . . I PSTMEAL>$P($G(TODD(TODN)),U,3) S PSTMEAL=$P($G(TODD(TODN)),U,3)
"RTN","PRSPLVA2",66,0)
 . ;
"RTN","PRSPLVA2",67,0)
 . ; if meal was not set based on leave request hours then check if it
"RTN","PRSPLVA2",68,0)
 . ; can be set based on tour info
"RTN","PRSPLVA2",69,0)
 . I PSTMEAL=0 D
"RTN","PRSPLVA2",70,0)
 . . N TODN
"RTN","PRSPLVA2",71,0)
 . . S TODN=$P(TSID,"-",1) ; tour # (1 or 2)
"RTN","PRSPLVA2",72,0)
 . . ; quit if tour does not have a meal
"RTN","PRSPLVA2",73,0)
 . . Q:$P($G(TODD(TODN)),U,3)'>0
"RTN","PRSPLVA2",74,0)
 . . ; quit if segment # currently being processed is not the longest
"RTN","PRSPLVA2",75,0)
 . . ; (better to place meal in the longest segment when more than one)
"RTN","PRSPLVA2",76,0)
 . . Q:$P($G(TODD(TODN)),U,4)'=$P(TSID,"-",2)
"RTN","PRSPLVA2",77,0)
 . . ; quit if leave started after tour began
"RTN","PRSPLVA2",78,0)
 . . Q:LVDTS>$P($G(TODD(TODN)),U,1)
"RTN","PRSPLVA2",79,0)
 . . ; quit if leave ended before tour ended
"RTN","PRSPLVA2",80,0)
 . . Q:LVDTE<$P($G(TODD(TODN)),U,2)
"RTN","PRSPLVA2",81,0)
 . . ; since leave covers the entire tour - set meal time based on tour
"RTN","PRSPLVA2",82,0)
 . . S PSTMEAL=$P($G(TODD(TODN)),U,3)
"RTN","PRSPLVA2",83,0)
 . ;
"RTN","PRSPLVA2",84,0)
 . ; find current leave posting on the ESR
"RTN","PRSPLVA2",85,0)
 . S FOUND=0
"RTN","PRSPLVA2",86,0)
 . ;   loop thru ESR segments
"RTN","PRSPLVA2",87,0)
 . S SEGI="" F  S SEGI=$O(ESR(SEGI)) Q:SEGI=""  D  Q:FOUND
"RTN","PRSPLVA2",88,0)
 . . N ESRY
"RTN","PRSPLVA2",89,0)
 . . S ESRY=ESR(SEGI)
"RTN","PRSPLVA2",90,0)
 . . Q:$P(ESRY,U,3)'=PSTTYP  ; quit if not same type
"RTN","PRSPLVA2",91,0)
 . . I PSTDTS=$P(ESRY,U),PSTDTE=$P(ESRY,U,2) S FOUND=1
"RTN","PRSPLVA2",92,0)
 . Q:'FOUND  ; skip because posting is not on the ESR
"RTN","PRSPLVA2",93,0)
 . S PSTSEG=SEGI
"RTN","PRSPLVA2",94,0)
 . ;
"RTN","PRSPLVA2",95,0)
 . ; OK to add unposting to FDA array
"RTN","PRSPLVA2",96,0)
 . ;
"RTN","PRSPLVA2",97,0)
 . ; add unposting to FDA() array and ESR() array
"RTN","PRSPLVA2",98,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+110)="@" ; start time
"RTN","PRSPLVA2",99,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+111)="@" ; stop time
"RTN","PRSPLVA2",100,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+112)="@" ; type time
"RTN","PRSPLVA2",101,0)
 . S PRSFDA(458.02,PPDIENS,(PSTSEG-1)*5+114)="@" ; meal
"RTN","PRSPLVA2",102,0)
 . K ESR(PSTSEG)
"RTN","PRSPLVA2",103,0)
 ;
"RTN","PRSPLVA2",104,0)
 ; quit if nothing will be unposted from the ESR day
"RTN","PRSPLVA2",105,0)
 Q:'$D(PRSFDA(458.02,PPDIENS))
"RTN","PRSPLVA2",106,0)
 ;
"RTN","PRSPLVA2",107,0)
 ; obtain current ESR daily status
"RTN","PRSPLVA2",108,0)
 S ESRST=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U)
"RTN","PRSPLVA2",109,0)
 ; 
"RTN","PRSPLVA2",110,0)
 ; determine proposed new status of ESR day
"RTN","PRSPLVA2",111,0)
 ;
"RTN","PRSPLVA2",112,0)
 ;   determine if any ESR time segments overlap
"RTN","PRSPLVA2",113,0)
 ;     (some types of time are excluded from check)
"RTN","PRSPLVA2",114,0)
 S OVERLAP=0
"RTN","PRSPLVA2",115,0)
 S SEGI=0 F  S SEGI=$O(ESR(SEGI)) Q:'SEGI  D
"RTN","PRSPLVA2",116,0)
 . N SEGJ,SEGX,SEGY
"RTN","PRSPLVA2",117,0)
 . S SEGX=ESR(SEGI)
"RTN","PRSPLVA2",118,0)
 . Q:"ON SB UN"[$P(SEGX,U,3)
"RTN","PRSPLVA2",119,0)
 . S SEGJ=SEGI F  S SEGJ=$O(ESR(SEGJ)) Q:'SEGJ  D
"RTN","PRSPLVA2",120,0)
 . . S SEGY=ESR(SEGJ)
"RTN","PRSPLVA2",121,0)
 . . Q:"ON SB UN"[$P(SEGY,U,3)
"RTN","PRSPLVA2",122,0)
 . . Q:$P(SEGX,U,2)'>$P(SEGY,U,1)
"RTN","PRSPLVA2",123,0)
 . . Q:$P(SEGX,U,1)'<$P(SEGY,U,2)
"RTN","PRSPLVA2",124,0)
 . . S OVERLAP=1
"RTN","PRSPLVA2",125,0)
 ;
"RTN","PRSPLVA2",126,0)
 ;   determine if entire tour covered by leave
"RTN","PRSPLVA2",127,0)
 S PRSX=$G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,0))
"RTN","PRSPLVA2",128,0)
 S TODL=$P(PRSX,U,8)+$P(PRSX,U,14) ; tour of duty length in hours
"RTN","PRSPLVA2",129,0)
 ;     loop thru ESR segments to add up leave
"RTN","PRSPLVA2",130,0)
 S ESRLVM=0 ; leave in minutes
"RTN","PRSPLVA2",131,0)
 S SEGI="" F  S SEGI=$O(ESR(SEGI)) Q:SEGI=""  D
"RTN","PRSPLVA2",132,0)
 . N ESRY,SEGLVM
"RTN","PRSPLVA2",133,0)
 . S ESRY=ESR(SEGI)
"RTN","PRSPLVA2",134,0)
 . Q:"AL SL WP CU AA ML RL NL CB AD DL"'[$P(ESRY,U,3)
"RTN","PRSPLVA2",135,0)
 . S SEGLVM=($$FMDIFF^XLFDT($P(ESRY,U,2),$P(ESRY,U,1),2)/60)-$P(ESRY,U,6)
"RTN","PRSPLVA2",136,0)
 . S ESRLVM=ESRLVM+SEGLVM
"RTN","PRSPLVA2",137,0)
 S TOURLV=$S((ESRLVM/60)'<TODL:1,1:0) ; true if tour covered by leave
"RTN","PRSPLVA2",138,0)
 ;
"RTN","PRSPLVA2",139,0)
 ;   determine if any RG time on ESR
"RTN","PRSPLVA2",140,0)
 S ESRRG=$S($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))["RG":1,1:0)
"RTN","PRSPLVA2",141,0)
 ;
"RTN","PRSPLVA2",142,0)
 ;   determine if any HX time on ESR
"RTN","PRSPLVA2",143,0)
 S ESRHX=$S($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,5))["HX":1,1:0)
"RTN","PRSPLVA2",144,0)
 ;
"RTN","PRSPLVA2",145,0)
 ; determine appropriate status for day
"RTN","PRSPLVA2",146,0)
 D
"RTN","PRSPLVA2",147,0)
 . ; if current status = signed and current method = manual then re-sign
"RTN","PRSPLVA2",148,0)
 . ; by manual and quit block
"RTN","PRSPLVA2",149,0)
 . I ESRST=4,$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PPDN,7)),U,3)=1 D  Q
"RTN","PRSPLVA2",150,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA2",151,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA2",152,0)
 . . S PRSFDA(458.02,PPDIENS,149)="1" ; signed method = manual
"RTN","PRSPLVA2",153,0)
 . ;
"RTN","PRSPLVA2",154,0)
 . ; if day covered by holiday, no RG, no overlap then re-sign by holiday
"RTN","PRSPLVA2",155,0)
 . ; and quit block
"RTN","PRSPLVA2",156,0)
 . I ESRHX,'ESRRG,'OVERLAP D  Q
"RTN","PRSPLVA2",157,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA2",158,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA2",159,0)
 . . S PRSFDA(458.02,PPDIENS,149)="4" ; signed method = holiday
"RTN","PRSPLVA2",160,0)
 . ;
"RTN","PRSPLVA2",161,0)
 . ; if tour covered by leave, no RG, no overlap, then re-sign by leave
"RTN","PRSPLVA2",162,0)
 . ; and quit block
"RTN","PRSPLVA2",163,0)
 . I TOURLV,'ESRRG,'OVERLAP D  Q
"RTN","PRSPLVA2",164,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA2",165,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA2",166,0)
 . . S PRSFDA(458.02,PPDIENS,149)="3" ; signed method = leave
"RTN","PRSPLVA2",167,0)
 . ;
"RTN","PRSPLVA2",168,0)
 . ; if day covered by extended absence, no RG, no overlap, then re-sign
"RTN","PRSPLVA2",169,0)
 . ; by EA and quit block
"RTN","PRSPLVA2",170,0)
 . I $$CONFLICT^PRSPEAU(PRSIEN,PRSDT),'ESRRG,'OVERLAP D  Q
"RTN","PRSPLVA2",171,0)
 . . S PRSFDA(458.02,PPDIENS,146)="4" ; status = signed
"RTN","PRSPLVA2",172,0)
 . . S PRSFDA(458.02,PPDIENS,147)=$$NOW^XLFDT() ; signed d/t
"RTN","PRSPLVA2",173,0)
 . . S PRSFDA(458.02,PPDIENS,149)="2" ; signed method = EA
"RTN","PRSPLVA2",174,0)
 . ;
"RTN","PRSPLVA2",175,0)
 . ; day will not be signed
"RTN","PRSPLVA2",176,0)
 . ;
"RTN","PRSPLVA2",177,0)
 . ; if day previously signed then clear out signed fields
"RTN","PRSPLVA2",178,0)
 . I ESRST="4" D
"RTN","PRSPLVA2",179,0)
 . . S PRSFDA(458.02,PPDIENS,147)="@" ; delete signed d/t
"RTN","PRSPLVA2",180,0)
 . . S PRSFDA(458.02,PPDIENS,149)="@" ; delete signed method
"RTN","PRSPLVA2",181,0)
 . ;
"RTN","PRSPLVA2",182,0)
 . ; set status = resubmit (if that was current) or pending (if segment)
"RTN","PRSPLVA2",183,0)
 . ; or not started
"RTN","PRSPLVA2",184,0)
 . S PRSFDA(458.02,PPDIENS,146)=$S(ESRST="3":"3",$O(ESR(0)):"2",1:"1")
"RTN","PRSPLVA2",185,0)
 Q
"RTN","PRSPLVA2",186,0)
 ;
"RTN","PRSPLVA2",187,0)
 ;PRSPLVA2
"RTN","PRSPLVU")
0^37^B47621313^n/a
"RTN","PRSPLVU",1,0)
PRSPLVU ;WOIFO/SAB - LEAVE UTILITIES ;3/31/2005
"RTN","PRSPLVU",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPLVU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPLVU",4,0)
 Q
"RTN","PRSPLVU",5,0)
 ;
"RTN","PRSPLVU",6,0)
LOADTOD(PPI,PRSIEN,DAY,TOD,TODD) ; Load Tour of Duty into TOD() Array
"RTN","PRSPLVU",7,0)
 ; input
"RTN","PRSPLVU",8,0)
 ;   PPI     - pay period IEN, file 458
"RTN","PRSPLVU",9,0)
 ;   PRSIEN  - employee IEN, file 450
"RTN","PRSPLVU",10,0)
 ;   DAY     - day number in PP
"RTN","PRSPLVU",11,0)
 ;   TOD     - array, passed by reference, will be initialized
"RTN","PRSPLVU",12,0)
 ;   TODD    - array, passed by reference, will be initialized
"RTN","PRSPLVU",13,0)
 ; output
"RTN","PRSPLVU",14,0)
 ;   TOD     - array updated with tour segments in following format
"RTN","PRSPLVU",15,0)
 ;             TOD(tour#-segment#)=
"RTN","PRSPLVU",16,0)
 ; start d/t (FM)^end d/t (FM)^type of time^start time(ETA)^end time(ETA)
"RTN","PRSPLVU",17,0)
 ; ^special code
"RTN","PRSPLVU",18,0)
 ;   TODD    - array updated with tour data in the following format
"RTN","PRSPLVU",19,0)
 ;             TODD(tour#)=
"RTN","PRSPLVU",20,0)
 ; earliest regular start d/t (FM)^latest regular end d/t (FM)^
"RTN","PRSPLVU",21,0)
 ; tour meal length (minutes)^segment # of longest regular tour segment 
"RTN","PRSPLVU",22,0)
 ;
"RTN","PRSPLVU",23,0)
 N FLD,NODE,PRSDT,PRSX,TN,TODI,TODY,TSC,TSE,TSI,TSLS,TSS,TST
"RTN","PRSPLVU",24,0)
 ;
"RTN","PRSPLVU",25,0)
 K TOD,TODD ; initialize array
"RTN","PRSPLVU",26,0)
 ;
"RTN","PRSPLVU",27,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSPLVU",28,0)
 Q:'PRSDT
"RTN","PRSPLVU",29,0)
 ;
"RTN","PRSPLVU",30,0)
 ; loop thru both tours (#1 and #2) for the day
"RTN","PRSPLVU",31,0)
 F TN=1,2 D
"RTN","PRSPLVU",32,0)
 . S NODE=$S(TN=1:1,TN=2:4,1:"")
"RTN","PRSPLVU",33,0)
 . Q:NODE=""
"RTN","PRSPLVU",34,0)
 . S TODY=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,NODE))
"RTN","PRSPLVU",35,0)
 . S TSLS(0)=0 ; init longest regular segment length (seconds)
"RTN","PRSPLVU",36,0)
 . ;
"RTN","PRSPLVU",37,0)
 . ; obtain the tour meal time
"RTN","PRSPLVU",38,0)
 . S FLD=$S(TN=1:2,1:10.3) ; field number corresponding to tour #1 or #2
"RTN","PRSPLVU",39,0)
 . S TODI=$$GET1^DIQ(458.02,DAY_","_PRSIEN_","_PPI_",",FLD,"I") ; tour of duty IEN
"RTN","PRSPLVU",40,0)
 . S:TODI $P(TODD(TN),U,3)=$$GET1^DIQ(457.1,TODI,2) ; tour meal (minutes)
"RTN","PRSPLVU",41,0)
 . ;
"RTN","PRSPLVU",42,0)
 . ; loop thru seven time segments of tour
"RTN","PRSPLVU",43,0)
 . F TSI=1:1:7 D
"RTN","PRSPLVU",44,0)
 . . S TSS=$P(TODY,U,(TSI-1)*3+1) ; time segment start
"RTN","PRSPLVU",45,0)
 . . Q:TSS=""
"RTN","PRSPLVU",46,0)
 . . S TSE=$P(TODY,U,(TSI-1)*3+2) ; time segment end
"RTN","PRSPLVU",47,0)
 . . Q:TSE=""
"RTN","PRSPLVU",48,0)
 . . S TSC=$P(TODY,U,(TSI-1)*3+3) ; time segment special code
"RTN","PRSPLVU",49,0)
 . . ; derive type of time
"RTN","PRSPLVU",50,0)
 . . S TST=$S(TSC:$P($G(^PRST(457.2,TSC,0)),U,2),1:"RG")
"RTN","PRSPLVU",51,0)
 . . ; convert times to FileMan date/time format
"RTN","PRSPLVU",52,0)
 . . S PRSX=$$CNVTS(PRSDT,TSS,TSE)
"RTN","PRSPLVU",53,0)
 . . Q:$P(PRSX,U)=""
"RTN","PRSPLVU",54,0)
 . . S TOD(TN_"-"_TSI)=$P(PRSX,U)_U_$P(PRSX,U,2)_U_TST_U_TSS_U_TSE_U_TSC
"RTN","PRSPLVU",55,0)
 . . ;
"RTN","PRSPLVU",56,0)
 . . ; skip remaining steps if segment is not regular time
"RTN","PRSPLVU",57,0)
 . . Q:TST'="RG"
"RTN","PRSPLVU",58,0)
 . . ;
"RTN","PRSPLVU",59,0)
 . . ; if earliest start time of tour is null, set it from current seg.
"RTN","PRSPLVU",60,0)
 . . S:$P($G(TODD(TN)),U)="" $P(TODD(TN),U)=$P(PRSX,U)
"RTN","PRSPLVU",61,0)
 . . ;
"RTN","PRSPLVU",62,0)
 . . ; if latest end time of tour is null, set it from current seg.
"RTN","PRSPLVU",63,0)
 . . S:$P($G(TODD(TN)),U,2)="" $P(TODD(TN),U,2)=$P(PRSX,U,2)
"RTN","PRSPLVU",64,0)
 . . ;
"RTN","PRSPLVU",65,0)
 . . ; if this segments start time is earlier, update the tour start
"RTN","PRSPLVU",66,0)
 . . I $P(PRSX,U)<$P(TODD(TN),U) S $P(TODD(TN),U)=$P(PRSX,U)
"RTN","PRSPLVU",67,0)
 . . ;
"RTN","PRSPLVU",68,0)
 . . ; if this segments end time is later, update the tour end
"RTN","PRSPLVU",69,0)
 . . I $P(PRSX,U,2)>$P(TODD(TN),U,2) S $P(TODD(TN),U,2)=$P(PRSX,U,2)
"RTN","PRSPLVU",70,0)
 . . ;
"RTN","PRSPLVU",71,0)
 . . ; compute length of the tour segment (seconds)
"RTN","PRSPLVU",72,0)
 . . S TSLS=$$FMDIFF^XLFDT($P(PRSX,U,2),$P(PRSX,U,1),2)
"RTN","PRSPLVU",73,0)
 . . ; if segment length more than longest found use it as longest found
"RTN","PRSPLVU",74,0)
 . . I TSLS>TSLS(0) S TSLS(0)=TSLS,$P(TODD(TN),U,4)=TSI
"RTN","PRSPLVU",75,0)
 Q
"RTN","PRSPLVU",76,0)
 ;
"RTN","PRSPLVU",77,0)
LOADESR(PPI,PRSIEN,DAY,ESR) ; Load ESR into ESR() Array
"RTN","PRSPLVU",78,0)
 ; input
"RTN","PRSPLVU",79,0)
 ;   PPI     - pay period IEN, file 458
"RTN","PRSPLVU",80,0)
 ;   PRSIEN  - employee IEN, file 450
"RTN","PRSPLVU",81,0)
 ;   DAY     - day number in PP
"RTN","PRSPLVU",82,0)
 ;   ESR     - array, passed by reference, will be initialized
"RTN","PRSPLVU",83,0)
 ; output
"RTN","PRSPLVU",84,0)
 ;   ESR     - array updated with tour segments in following format
"RTN","PRSPLVU",85,0)
 ;             ESR(segment #)=
"RTN","PRSPLVU",86,0)
 ; start d/t (FM)^end d/t (FM)^type of time^start time(ETA)^end time(ETA)
"RTN","PRSPLVU",87,0)
 ; ^meal (min)
"RTN","PRSPLVU",88,0)
 ;
"RTN","PRSPLVU",89,0)
 N ESRY,PRSDT,PRSX,TSE,TSI,TSM,TSS,TST
"RTN","PRSPLVU",90,0)
 ;
"RTN","PRSPLVU",91,0)
 K ESR ; initialize array
"RTN","PRSPLVU",92,0)
 ;
"RTN","PRSPLVU",93,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSPLVU",94,0)
 Q:'PRSDT
"RTN","PRSPLVU",95,0)
 ;
"RTN","PRSPLVU",96,0)
 S ESRY=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))
"RTN","PRSPLVU",97,0)
 ;
"RTN","PRSPLVU",98,0)
 ; loop thru seven time segments
"RTN","PRSPLVU",99,0)
 F TSI=1:1:7 D
"RTN","PRSPLVU",100,0)
 . S TSS=$P(ESRY,U,(TSI-1)*5+1) ; time segment start
"RTN","PRSPLVU",101,0)
 . Q:TSS=""
"RTN","PRSPLVU",102,0)
 . S TSE=$P(ESRY,U,(TSI-1)*5+2) ; time segment end
"RTN","PRSPLVU",103,0)
 . Q:TSE=""
"RTN","PRSPLVU",104,0)
 . S TST=$P(ESRY,U,(TSI-1)*5+3) ; time segment type of time
"RTN","PRSPLVU",105,0)
 . Q:TST=""
"RTN","PRSPLVU",106,0)
 . ; convert times to FileMan date/time format
"RTN","PRSPLVU",107,0)
 . S PRSX=$$CNVTS(PRSDT,TSS,TSE)
"RTN","PRSPLVU",108,0)
 . Q:$P(PRSX,U)=""
"RTN","PRSPLVU",109,0)
 . S TSM=$P(ESRY,U,(TSI-1)*5+5) ; time segment meal (min)
"RTN","PRSPLVU",110,0)
 . S ESR(TSI)=$P(PRSX,U)_U_$P(PRSX,U,2)_U_TST_U_TSS_U_TSE_U_TSM
"RTN","PRSPLVU",111,0)
 Q
"RTN","PRSPLVU",112,0)
 ;
"RTN","PRSPLVU",113,0)
LOADTC(PPI,PRSIEN,DAY,TC) ; Load Time Card into TC() Array
"RTN","PRSPLVU",114,0)
 ; input
"RTN","PRSPLVU",115,0)
 ;   PPI     - pay period IEN, file 458
"RTN","PRSPLVU",116,0)
 ;   PRSIEN  - employee IEN, file 450
"RTN","PRSPLVU",117,0)
 ;   DAY     - day number in PP
"RTN","PRSPLVU",118,0)
 ;   TC      - array, passed by reference, may contain data
"RTN","PRSPLVU",119,0)
 ; output
"RTN","PRSPLVU",120,0)
 ;   TC      - array updated with tour segments in following format
"RTN","PRSPLVU",121,0)
 ;             TC(segment #)=
"RTN","PRSPLVU",122,0)
 ; start d/t (FM)^end d/t (FM)^type of time^start time(ETA)^end time(ETA)
"RTN","PRSPLVU",123,0)
 ;
"RTN","PRSPLVU",124,0)
 N PRSDT,PRSX,TCY,TSE,TSI,TSS
"RTN","PRSPLVU",125,0)
 ;
"RTN","PRSPLVU",126,0)
 K TC ; initialize array
"RTN","PRSPLVU",127,0)
 ;
"RTN","PRSPLVU",128,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSPLVU",129,0)
 Q:'PRSDT
"RTN","PRSPLVU",130,0)
 ;
"RTN","PRSPLVU",131,0)
 S TCY=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,2))
"RTN","PRSPLVU",132,0)
 ;
"RTN","PRSPLVU",133,0)
 ; loop thru seven tour segments
"RTN","PRSPLVU",134,0)
 F TSI=1:1:7 D
"RTN","PRSPLVU",135,0)
 . S TSS=$P(TCY,U,(TSI-1)*3+1) ; time segment start
"RTN","PRSPLVU",136,0)
 . Q:TSS=""
"RTN","PRSPLVU",137,0)
 . S TSE=$P(TCY,U,(TSI-1)*3+2) ; time segment end
"RTN","PRSPLVU",138,0)
 . Q:TSE=""
"RTN","PRSPLVU",139,0)
 . S TST=$P(TCY,U,(TSI-1)*3+3) ; time segment type of time
"RTN","PRSPLVU",140,0)
 . Q:TST=""
"RTN","PRSPLVU",141,0)
 . ; convert times to FileMan date/time format
"RTN","PRSPLVU",142,0)
 . S PRSX=$$CNVTS(PRSDT,TSS,TSE)
"RTN","PRSPLVU",143,0)
 . Q:$P(PRSX,U)=""
"RTN","PRSPLVU",144,0)
 . S TC(TSI)=$P(PRSX,U)_U_$P(PRSX,U,2)_U_TST_U_TSS_U_TSE
"RTN","PRSPLVU",145,0)
 Q
"RTN","PRSPLVU",146,0)
 ;
"RTN","PRSPLVU",147,0)
OKALVR(LVIEN) ; OK Approve Leave Request
"RTN","PRSPLVU",148,0)
 ; Called by Supervisory Approvals to see if it is OK to approve a
"RTN","PRSPLVU",149,0)
 ; leave request
"RTN","PRSPLVU",150,0)
 ; Input
"RTN","PRSPLVU",151,0)
 ;   LVIEN  - Leave Request IEN (file 458.1)
"RTN","PRSPLVU",152,0)
 ; Result
"RTN","PRSPLVU",153,0)
 ;   string value
"RTN","PRSPLVU",154,0)
 ;     = 1 if OK to approve leave request
"RTN","PRSPLVU",155,0)
 ;     = 0 or 0^PPI if not OK to approve leave request
"RTN","PRSPLVU",156,0)
 ;       where PPI is the Pay Period ien (file 458)
"RTN","PRSPLVU",157,0)
 ;
"RTN","PRSPLVU",158,0)
 N D1,DAY,EPP4Y,LVY0,PP4Y,PPE,PPI,PRSIEN,PRSRET,SPP4Y,Y
"RTN","PRSPLVU",159,0)
 ;
"RTN","PRSPLVU",160,0)
 S PRSRET=1 ; initialize as OK
"RTN","PRSPLVU",161,0)
 ;
"RTN","PRSPLVU",162,0)
 I '$G(LVIEN) S PRSRET=0 Q PRSRET ; required input
"RTN","PRSPLVU",163,0)
 ;
"RTN","PRSPLVU",164,0)
 S LVY0=$G(^PRST(458.1,LVIEN,0)) ; leave request 0 node
"RTN","PRSPLVU",165,0)
 S PRSIEN=$P(LVY0,U,2) ; employee IEN
"RTN","PRSPLVU",166,0)
 ;
"RTN","PRSPLVU",167,0)
 ; if employee has any memos
"RTN","PRSPLVU",168,0)
 I $$PTP^PRSPUT3(PRSIEN) D
"RTN","PRSPLVU",169,0)
 . ; determine starting and ending pay periods
"RTN","PRSPLVU",170,0)
 . S D1=$$FMADD^XLFDT($P(LVY0,U,3),-1) D PP^PRSAPPU S SPP4Y=PP4Y ; based on leave from -1 (use -1 in case of 2-day tour)
"RTN","PRSPLVU",171,0)
 . S D1=$P(LVY0,U,5) D PP^PRSAPPU S EPP4Y=PP4Y ; based on leave to
"RTN","PRSPLVU",172,0)
 . ;
"RTN","PRSPLVU",173,0)
 . ; loop thru pay periods
"RTN","PRSPLVU",174,0)
 . S PP4Y=$O(^PRST(458,"AB",SPP4Y),-1) ; set initial value to previous PP
"RTN","PRSPLVU",175,0)
 . F  S PP4Y=$O(^PRST(458,"AB",PP4Y)) Q:PP4Y=""!(PP4Y]EPP4Y)  D  Q:'PRSRET
"RTN","PRSPLVU",176,0)
 . . S PPI=$O(^PRST(458,"AB",PP4Y,0))
"RTN","PRSPLVU",177,0)
 . . ;
"RTN","PRSPLVU",178,0)
 . . ; skip PP if not covered by memo
"RTN","PRSPLVU",179,0)
 . . S D1=$P($G(^PRST(458,PPI,1)),U)
"RTN","PRSPLVU",180,0)
 . . Q:$$MIEN^PRSPUT1(PRSIEN,D1)'>0  ; PP not covered by memo
"RTN","PRSPLVU",181,0)
 . . ;
"RTN","PRSPLVU",182,0)
 . . ; skip PP if time card status not = payroll
"RTN","PRSPLVU",183,0)
 . . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="P"
"RTN","PRSPLVU",184,0)
 . . ;
"RTN","PRSPLVU",185,0)
 . . ; can't approve this leave request until time card status changes
"RTN","PRSPLVU",186,0)
 . . S PRSRET=0_U_PPI
"RTN","PRSPLVU",187,0)
 ;
"RTN","PRSPLVU",188,0)
 Q PRSRET
"RTN","PRSPLVU",189,0)
 ;
"RTN","PRSPLVU",190,0)
CNVTS(DATE,START,END) ; Convert Time Segment
"RTN","PRSPLVU",191,0)
 ; input
"RTN","PRSPLVU",192,0)
 ; returns string with value =
"RTN","PRSPLVU",193,0)
 ;   Start Date/Time (FileMan internal)^End Date/Time (FileMan internal)
"RTN","PRSPLVU",194,0)
 ;
"RTN","PRSPLVU",195,0)
 N CNX,FMEND,FMSTR,PRSM,PRSRET,X,XMID,Y
"RTN","PRSPLVU",196,0)
 S X=START_U_END
"RTN","PRSPLVU",197,0)
 D CNV^PRSATIM
"RTN","PRSPLVU",198,0)
 S PRSM=Y
"RTN","PRSPLVU",199,0)
 S XMID=$S($P(PRSM,U,2)'>$P(PRSM,U):1,1:0)
"RTN","PRSPLVU",200,0)
 S FMSTR=$$FMADD^XLFDT(DATE,,,$P(PRSM,U))
"RTN","PRSPLVU",201,0)
 S FMEND=$$FMADD^XLFDT(DATE,XMID,,$P(PRSM,U,2))
"RTN","PRSPLVU",202,0)
 S PRSRET=FMSTR_"^"_FMEND
"RTN","PRSPLVU",203,0)
 ;
"RTN","PRSPLVU",204,0)
 Q PRSRET
"RTN","PRSPLVU",205,0)
 ;
"RTN","PRSPLVU",206,0)
FMETA(TIME) ; FileMan to ETA time
"RTN","PRSPLVU",207,0)
 N HRS,MIN,PM,PRSRET
"RTN","PRSPLVU",208,0)
 S PRSRET=""
"RTN","PRSPLVU",209,0)
 S TIME=$$LJ^XLFSTR(TIME,4,"0") ; add trailing 0s to fileman time
"RTN","PRSPLVU",210,0)
 I TIME=1200 S PRSRET="NOON"
"RTN","PRSPLVU",211,0)
 I TIME=2400 S PRSRET="MID"
"RTN","PRSPLVU",212,0)
 I PRSRET="" D
"RTN","PRSPLVU",213,0)
 . S PM=0
"RTN","PRSPLVU",214,0)
 . S HRS=$E(TIME,1,2)
"RTN","PRSPLVU",215,0)
 . S MIN=$E(TIME,3,4)
"RTN","PRSPLVU",216,0)
 . I HRS>12 S HRS=HRS-12,PM=1
"RTN","PRSPLVU",217,0)
 . S PRSRET=$$RJ^XLFSTR(HRS,2,"0")_":"_$$RJ^XLFSTR(MIN,2,"0")_$S(PM:"P",1:"A")
"RTN","PRSPLVU",218,0)
 Q PRSRET
"RTN","PRSPLVU",219,0)
 ;PRSPLVU
"RTN","PRSPRM")
0^15^B43555737^n/a
"RTN","PRSPRM",1,0)
PRSPRM ;WOIFO/MGD - PTP RECONCILE MEMORANDUM ;04/20/05
"RTN","PRSPRM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPRM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPRM",4,0)
 ;
"RTN","PRSPRM",5,0)
 ; The following routine will allow HR to complete the reconciliation
"RTN","PRSPRM",6,0)
 ; process for a memorandum that has expired or been terminated.
"RTN","PRSPRM",7,0)
 ;
"RTN","PRSPRM",8,0)
 Q
"RTN","PRSPRM",9,0)
 ;
"RTN","PRSPRM",10,0)
MAIN ; Main Driver
"RTN","PRSPRM",11,0)
 ;
"RTN","PRSPRM",12,0)
 K ^TMP($J,"PRSPRM")
"RTN","PRSPRM",13,0)
 ; Prompt for Part Time Physician
"RTN","PRSPRM",14,0)
 D PTP
"RTN","PRSPRM",15,0)
 I Y'>0 D KILL^PRSPRM1 Q
"RTN","PRSPRM",16,0)
 S PRSIEN=+Y
"RTN","PRSPRM",17,0)
 ; Find any memorandums that meet the reconciliation qualifications
"RTN","PRSPRM",18,0)
 S QUIT=""
"RTN","PRSPRM",19,0)
 D MEM
"RTN","PRSPRM",20,0)
 I 'MIEN D KILL^PRSPRM1 Q
"RTN","PRSPRM",21,0)
 I QUIT D KILL^PRSPRM1 Q
"RTN","PRSPRM",22,0)
 ; Display employee and memorandum information
"RTN","PRSPRM",23,0)
 D DISPLAY
"RTN","PRSPRM",24,0)
 I $D(DIRUT) D KILL^PRSPRM1 Q
"RTN","PRSPRM",25,0)
 ; Verify that all daily ESRs are completed
"RTN","PRSPRM",26,0)
 D ESRCHK
"RTN","PRSPRM",27,0)
 I QUIT D KILL^PRSPRM1 Q
"RTN","PRSPRM",28,0)
 ; Display Summary information
"RTN","PRSPRM",29,0)
 D SUM^PRSPBRP
"RTN","PRSPRM",30,0)
 I $D(DIRUT) D KILL^PRSPRM1 Q
"RTN","PRSPRM",31,0)
 ; Display Reconciliation Options
"RTN","PRSPRM",32,0)
 D ROPT^PRSPBRP
"RTN","PRSPRM",33,0)
 ; Check for Reconciliation choice entered electronically
"RTN","PRSPRM",34,0)
 D PTPCHK^PRSPRM1
"RTN","PRSPRM",35,0)
 ; Prompt HR for Reconciliation Choice
"RTN","PRSPRM",36,0)
 D HRRC^PRSPRM1
"RTN","PRSPRM",37,0)
 I RO="^" D KILL^PRSPRM1 Q
"RTN","PRSPRM",38,0)
 ; Prompt for PTP Reconciliation Comments if Paper form was used
"RTN","PRSPRM",39,0)
 D PTPRCOM^PRSPRM1
"RTN","PRSPRM",40,0)
 I X="^" D KILL^PRSPRM1 Q
"RTN","PRSPRM",41,0)
 ; Prompt to transfer balance to current memorandum
"RTN","PRSPRM",42,0)
 D TRNS^PRSPRM1
"RTN","PRSPRM",43,0)
 I QUIT D KILL^PRSPRM1 Q
"RTN","PRSPRM",44,0)
 ; Prompt HR for any final reconciliation comments
"RTN","PRSPRM",45,0)
 D HRCOM^PRSPRM1
"RTN","PRSPRM",46,0)
 I X="^" D KILL^PRSPRM1 Q
"RTN","PRSPRM",47,0)
 ; Prompt HR is they want to print the form for the Chief of Staff
"RTN","PRSPRM",48,0)
 S QUIT=0
"RTN","PRSPRM",49,0)
 D PRT^PRSPRM1
"RTN","PRSPRM",50,0)
 I QUIT D KILL^PRSPRM1 Q
"RTN","PRSPRM",51,0)
 ; Prompt for E-sig and update file
"RTN","PRSPRM",52,0)
 D ESIG^PRSPRM1,KILL^PRSPRM1
"RTN","PRSPRM",53,0)
 Q
"RTN","PRSPRM",54,0)
 ;
"RTN","PRSPRM",55,0)
PTP ; Prompt for Part Time Physician
"RTN","PRSPRM",56,0)
 ;
"RTN","PRSPRM",57,0)
 W !
"RTN","PRSPRM",58,0)
 S DIC="^PRSPC(",DIC(0)="AEMQZ",DIC("A")="Select EMPLOYEE: "
"RTN","PRSPRM",59,0)
 S DIC("S")="I $D(^PRST(458.7,""B"",+Y))"
"RTN","PRSPRM",60,0)
 D ^DIC K DIC
"RTN","PRSPRM",61,0)
 S PRSIEN=+Y
"RTN","PRSPRM",62,0)
 Q
"RTN","PRSPRM",63,0)
 ;
"RTN","PRSPRM",64,0)
MEM ; Find any memorandums that meet the reconciliation qualifications
"RTN","PRSPRM",65,0)
 ;
"RTN","PRSPRM",66,0)
 N ENDAT,MEM,STDAT
"RTN","PRSPRM",67,0)
 S MEM=0,INDX=1
"RTN","PRSPRM",68,0)
 F  S MEM=$O(^PRST(458.7,"B",PRSIEN,MEM)) Q:'MEM  D
"RTN","PRSPRM",69,0)
 . D MEMDAT(MEM,.STATUS,.STDAT,.ENDAT,.TDAT)
"RTN","PRSPRM",70,0)
 . Q:STATUS'=3  ; Memos that have begun reconciliation have status = 3
"RTN","PRSPRM",71,0)
 . I $G(TDAT)>DT Q  ; Termination Date has yet to occur
"RTN","PRSPRM",72,0)
 . Q:TDAT<1&(ENDAT>DT)  ; Not Terminated and End Date has yet to occur
"RTN","PRSPRM",73,0)
 . S MEM(INDX)=MEM_"^"_STDAT_"^"_ENDAT_"^"_TDAT_"^"_"Reconciliation Started"
"RTN","PRSPRM",74,0)
 . S INDX=INDX+1
"RTN","PRSPRM",75,0)
 ; If no memos meet the reconciliation qualifications
"RTN","PRSPRM",76,0)
 I '$D(MEM(1)) D  Q
"RTN","PRSPRM",77,0)
 . W !!,"No memorandums meet the reconciliation qualifications for the "
"RTN","PRSPRM",78,0)
 . W "selected employee."
"RTN","PRSPRM",79,0)
 . S MIEN=0
"RTN","PRSPRM",80,0)
 ; If only one memo
"RTN","PRSPRM",81,0)
 I '$D(MEM(2)) S MIEN=$P(MEM(1),U,1) Q
"RTN","PRSPRM",82,0)
 ; Display list if more than one
"RTN","PRSPRM",83,0)
 I $D(MEM(2)) D
"RTN","PRSPRM",84,0)
 . S MIEN=0
"RTN","PRSPRM",85,0)
 . W !!," # ",?5,"STARTS",?20,"ENDS",?35,"TERMINATION DATE"
"RTN","PRSPRM",86,0)
 . F MEM=1:1 Q:'$D(MEM(MEM))  D
"RTN","PRSPRM",87,0)
 . . S DATA=MEM(MEM)
"RTN","PRSPRM",88,0)
 . . S Y=$P(DATA,U,2)
"RTN","PRSPRM",89,0)
 . . D DD^%DT
"RTN","PRSPRM",90,0)
 . . S START=Y
"RTN","PRSPRM",91,0)
 . . S Y=$P(DATA,U,3)
"RTN","PRSPRM",92,0)
 . . D DD^%DT
"RTN","PRSPRM",93,0)
 . . S END=Y
"RTN","PRSPRM",94,0)
 . . S Y=$P(DATA,U,4)
"RTN","PRSPRM",95,0)
 . . I Y'="" D
"RTN","PRSPRM",96,0)
 . . . D DD^%DT
"RTN","PRSPRM",97,0)
 . . . S TDAT=Y
"RTN","PRSPRM",98,0)
 . . W !,MEM,?5,START,?20,END,?35,TDAT
"RTN","PRSPRM",99,0)
 . ;
"RTN","PRSPRM",100,0)
ASK . ; Ask user to select which memorandum they want
"RTN","PRSPRM",101,0)
 . S END="",END=$O(MEM(END),-1)
"RTN","PRSPRM",102,0)
 . W !!,"Enter a number between 1 and ",END," :"
"RTN","PRSPRM",103,0)
 . R ASK:DTIME
"RTN","PRSPRM",104,0)
 . S ASK=$$UPPER^PRSRUTL(ASK)
"RTN","PRSPRM",105,0)
 . Q:ASK=""!(ASK="^")
"RTN","PRSPRM",106,0)
 . I '$D(MEM(ASK)) D  G ASK
"RTN","PRSPRM",107,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPRM",108,0)
 . S MIEN=$P(MEM(ASK),U,1)
"RTN","PRSPRM",109,0)
 . S DATA0=$G(^PRST(458.7,MIEN,0))  ; Memo info
"RTN","PRSPRM",110,0)
 . S DATA4=$G(^PRST(458.7,MIEN,4))  ; Termination info
"RTN","PRSPRM",111,0)
 Q
"RTN","PRSPRM",112,0)
 ;
"RTN","PRSPRM",113,0)
MEMDAT(MEM,MST,MSD,MED,MTD) ;
"RTN","PRSPRM",114,0)
 ;RETURN MST- memo start date
"RTN","PRSPRM",115,0)
 ;       MSD- memo stop date
"RTN","PRSPRM",116,0)
 ;       MED- memo termination date
"RTN","PRSPRM",117,0)
 N DATA0,DATA4
"RTN","PRSPRM",118,0)
 S DATA0=$G(^PRST(458.7,MEM,0))  ; Memo info
"RTN","PRSPRM",119,0)
 S DATA4=$G(^PRST(458.7,MEM,4)) ; Termination info
"RTN","PRSPRM",120,0)
 S MST=$P(DATA0,U,6)
"RTN","PRSPRM",121,0)
 S MSD=$P(DATA0,U,2)
"RTN","PRSPRM",122,0)
 S MED=$P(DATA0,U,3)
"RTN","PRSPRM",123,0)
 S MTD=$P(DATA4,U,1)
"RTN","PRSPRM",124,0)
 Q
"RTN","PRSPRM",125,0)
DISPLAY ; Display memorandum info to validate the correct employee was chosen
"RTN","PRSPRM",126,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPRM",127,0)
 S SCRTTL=" PT Physician Reconcile Memorandum"
"RTN","PRSPRM",128,0)
 S ARRAY="^TMP($J,""PRSPRM"","
"RTN","PRSPRM",129,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL,ARRAY,1)
"RTN","PRSPRM",130,0)
 D MEM^PRSPUT1(PRSIEN,MIEN,ARRAY)
"RTN","PRSPRM",131,0)
 D AL^PRSPUT3(PRSIEN,ARRAY)
"RTN","PRSPRM",132,0)
 D PPSUM^PRSPUT2(PRSIEN,MIEN,ARRAY)
"RTN","PRSPRM",133,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPRM",134,0)
 Q
"RTN","PRSPRM",135,0)
 ;
"RTN","PRSPRM",136,0)
ESRCHK ; Check for any incomplete ESR within the memoranda.
"RTN","PRSPRM",137,0)
 ;
"RTN","PRSPRM",138,0)
 N PPDATA,TPPI
"RTN","PRSPRM",139,0)
 D INDEX^PRSPUT1 ; Get last index
"RTN","PRSPRM",140,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPRM",141,0)
 W $P(^PRSPC(PRSIEN,0),U,1)_" - Memorandum Summary"
"RTN","PRSPRM",142,0)
 S QUIT=0
"RTN","PRSPRM",143,0)
 S TPPI=""
"RTN","PRSPRM",144,0)
 I TDAT'="" D
"RTN","PRSPRM",145,0)
 . S DATA4=$G(^PRST(458.7,MIEN,4))
"RTN","PRSPRM",146,0)
 . Q:'+DATA4
"RTN","PRSPRM",147,0)
 . S TPPI=+$G(^PRST(458,"AD",$P(DATA4,U,1)))
"RTN","PRSPRM",148,0)
 F I=1:1:26 D
"RTN","PRSPRM",149,0)
 . S PPDATA=$G(^PRST(458.7,MIEN,9,I,0))
"RTN","PRSPRM",150,0)
 . S PPE=$P(PPDATA,U,1)
"RTN","PRSPRM",151,0)
 . Q:PPE=""
"RTN","PRSPRM",152,0)
 . S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPRM",153,0)
 . Q:'PPI
"RTN","PRSPRM",154,0)
 . Q:PPI>TPPI  ; Quit if PP is after termination PP
"RTN","PRSPRM",155,0)
 . F DAY=1:1:14 D  Q:QUIT
"RTN","PRSPRM",156,0)
 . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPRM",157,0)
 . . I ESRSTAT<5 S ^TMP($J,"RG",PPE)=""
"RTN","PRSPRM",158,0)
 . ; Check for NP in Pay Period
"RTN","PRSPRM",159,0)
 . I $P(PPDATA,U,3) S ^TMP($J,"NP",PPE)=$P(PPDATA,U,3)
"RTN","PRSPRM",160,0)
 . ; Check for WP in Pay Period
"RTN","PRSPRM",161,0)
 . I $P(PPDATA,U,4) S ^TMP($J,"WP",PPE)=$P(PPDATA,U,4)
"RTN","PRSPRM",162,0)
 I $D(^TMP($J,"RG"))=10 D
"RTN","PRSPRM",163,0)
 . S TEXT="The following Pay Periods have days with incomplete daily ESRs: "
"RTN","PRSPRM",164,0)
 . D A1^PRSPUT1
"RTN","PRSPRM",165,0)
 . S (PPE,PPEX)="",PPCNT=0
"RTN","PRSPRM",166,0)
 . F  S PPE=$O(^TMP($J,"RG",PPE)) Q:PPE=""  D
"RTN","PRSPRM",167,0)
 . . S PPEX=$S(PPEX="":PPE,1:PPEX_", "_PPE)
"RTN","PRSPRM",168,0)
 . . S PPCNT=PPCNT+1
"RTN","PRSPRM",169,0)
 . . I PPCNT>10 D
"RTN","PRSPRM",170,0)
 . . . S TEXT=PPEX,PPCNT=0,PPEX=""
"RTN","PRSPRM",171,0)
 . . . D A1^PRSPUT1
"RTN","PRSPRM",172,0)
 . I PPCNT>0 D
"RTN","PRSPRM",173,0)
 . . S TEXT=PPEX
"RTN","PRSPRM",174,0)
 . . D A1^PRSPUT1
"RTN","PRSPRM",175,0)
 . S TEXT=""
"RTN","PRSPRM",176,0)
 . D A1^PRSPUT1
"RTN","PRSPRM",177,0)
 . S TEXT="These will have to be completed before the memorandum can be reconciled."
"RTN","PRSPRM",178,0)
 . D A1^PRSPUT1,A1^PRSPUT1
"RTN","PRSPRM",179,0)
 ;
"RTN","PRSPRM",180,0)
NP ; Check for Non-Pay hours
"RTN","PRSPRM",181,0)
 I $D(^TMP($J,"NP"))=10 D
"RTN","PRSPRM",182,0)
 . S TEXT="The following Pay Periods have Non-Pay hours:"
"RTN","PRSPRM",183,0)
 . D A1^PRSPUT1
"RTN","PRSPRM",184,0)
 . S PPE="",PPCNT=0,PPEX=""
"RTN","PRSPRM",185,0)
 . F  S PPE=$O(^TMP($J,"NP",PPE)) Q:'PPE  D
"RTN","PRSPRM",186,0)
 . . S PPEX1=PPE_" - "_^TMP($J,"NP",PPE),$E(PPEX1,15)=""
"RTN","PRSPRM",187,0)
 . . S PPEX=PPEX_PPEX1
"RTN","PRSPRM",188,0)
 . . S PPCNT=PPCNT+1
"RTN","PRSPRM",189,0)
 . . I PPCNT>4 D
"RTN","PRSPRM",190,0)
 . . . S TEXT=PPEX,PPCNT=0,PPEX=""
"RTN","PRSPRM",191,0)
 . . . D A1^PRSPUT1
"RTN","PRSPRM",192,0)
 . I PPCNT>0 D
"RTN","PRSPRM",193,0)
 . . S TEXT=PPEX
"RTN","PRSPRM",194,0)
 . . D A1^PRSPUT1
"RTN","PRSPRM",195,0)
 ;
"RTN","PRSPRM",196,0)
 ; Check for Without-Pay hours
"RTN","PRSPRM",197,0)
WP I $D(^TMP($J,"WP"))=10 D
"RTN","PRSPRM",198,0)
 . S TEXT="The following Pay Periods have Without-Pay hours:"
"RTN","PRSPRM",199,0)
 . D A1^PRSPUT1
"RTN","PRSPRM",200,0)
 . S PPE="",PPCNT=0,PPEX=""
"RTN","PRSPRM",201,0)
 . F  S PPE=$O(^TMP($J,"WP",PPE)) Q:'PPE  D
"RTN","PRSPRM",202,0)
 . . S PPEX1=PPE_" - "_^TMP($J,"WP",PPE),$E(PPEX1,15)=""
"RTN","PRSPRM",203,0)
 . . S PPEX=PPEX_PPEX1
"RTN","PRSPRM",204,0)
 . . S PPCNT=PPCNT+1
"RTN","PRSPRM",205,0)
 . . I PPCNT>4 D
"RTN","PRSPRM",206,0)
 . . . S TEXT=PPEX,PPCNT=0,PPEX=""
"RTN","PRSPRM",207,0)
 . . . D A1^PRSPUT1
"RTN","PRSPRM",208,0)
 . I PPCNT>0 D
"RTN","PRSPRM",209,0)
 . . S TEXT=PPEX
"RTN","PRSPRM",210,0)
 . . D A1^PRSPUT1
"RTN","PRSPRM",211,0)
 K ^TMP($J,"RG"),^TMP($J,"NP"),^TMP($J,"WP")
"RTN","PRSPRM",212,0)
 Q
"RTN","PRSPRM1")
0^27^B63409102^n/a
"RTN","PRSPRM1",1,0)
PRSPRM1 ;WOIFO/MGD - PTP RECONCILE MEMORANDUM - 1 ;01/29/07
"RTN","PRSPRM1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPRM1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPRM1",4,0)
 ;
"RTN","PRSPRM1",5,0)
 ; The following routine will allow HR to complete the reconciliation
"RTN","PRSPRM1",6,0)
 ; process for a memorandum that has expired or been terminated.
"RTN","PRSPRM1",7,0)
 ;
"RTN","PRSPRM1",8,0)
 Q
"RTN","PRSPRM1",9,0)
 ;
"RTN","PRSPRM1",10,0)
PTPCHK ; Check for Reconciliation info entered by PTP on electronic form
"RTN","PRSPRM1",11,0)
 ;
"RTN","PRSPRM1",12,0)
 S DATA2=$G(^PRST(458.7,MIEN,2))
"RTN","PRSPRM1",13,0)
 S PTPRC=$P(DATA2,U,1),PTPRCOM=$P(DATA2,U,2)
"RTN","PRSPRM1",14,0)
 I PTPRC="" S PTPRCE="" Q
"RTN","PRSPRM1",15,0)
 S PTPRCE=$$RCE(PTPRC)
"RTN","PRSPRM1",16,0)
 S END="",END=$O(MEM(END),-1) ; Find range on options
"RTN","PRSPRM1",17,0)
 F I=1:1:END D  Q:ACTRC=PTPRC
"RTN","PRSPRM1",18,0)
 . S ACTRC=$P($G(MEM(I)),U,2) ; Numerical choice entered by PTP
"RTN","PRSPRM1",19,0)
 S TEXT=""
"RTN","PRSPRM1",20,0)
 D A1^PRSPUT1
"RTN","PRSPRM1",21,0)
 S TEXT="PTP's Reconciliation Choice: "_I_"  "_PTPRCE
"RTN","PRSPRM1",22,0)
 D A1^PRSPUT1
"RTN","PRSPRM1",23,0)
 ; Set this into ^TMP for long messages
"RTN","PRSPRM1",24,0)
 S TEXT="PTP's Reconciliation Comments: "_$E(PTPRCOM,1,48)
"RTN","PRSPRM1",25,0)
 S INDEX=INDEX+1,^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",26,0)
 W !,TEXT
"RTN","PRSPRM1",27,0)
 S TEXT=$E(PTPRCOM,49,128),INDEX=INDEX+1
"RTN","PRSPRM1",28,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT W !,TEXT
"RTN","PRSPRM1",29,0)
 S TEXT=$E(PTPRCOM,129,208),INDEX=INDEX+1
"RTN","PRSPRM1",30,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT W !,TEXT
"RTN","PRSPRM1",31,0)
 S TEXT=$E(PTPRCOM,209,240),INDEX=INDEX+1
"RTN","PRSPRM1",32,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT W !,TEXT
"RTN","PRSPRM1",33,0)
 S TEXT=""
"RTN","PRSPRM1",34,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",35,0)
 Q
"RTN","PRSPRM1",36,0)
 ;
"RTN","PRSPRM1",37,0)
HRRC ; HR Reconciliation Choice
"RTN","PRSPRM1",38,0)
 S END="",END=$O(MEM(END),-1) ; Find range on options
"RTN","PRSPRM1",39,0)
 ; Prompt for Reconciliation Option
"RTN","PRSPRM1",40,0)
RO W !!,"Enter Reconciliation Option: "
"RTN","PRSPRM1",41,0)
 R RO:DTIME
"RTN","PRSPRM1",42,0)
 S RO=$$UPPER^PRSRUTL(RO)
"RTN","PRSPRM1",43,0)
 I RO="" S RO="^"
"RTN","PRSPRM1",44,0)
 Q:RO="^"
"RTN","PRSPRM1",45,0)
 I '$D(MEM(RO)) D  G RO
"RTN","PRSPRM1",46,0)
 . I END>1 D
"RTN","PRSPRM1",47,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPRM1",48,0)
 . I END'>1 D
"RTN","PRSPRM1",49,0)
 . . W !!,"Enter 1 or ^ to exit"
"RTN","PRSPRM1",50,0)
 S PTPRCE=$P(MEM(RO),U,1),PTPRC=$P(MEM(RO),U,2)
"RTN","PRSPRM1",51,0)
 W "  "_PTPRCE
"RTN","PRSPRM1",52,0)
 S TEXT="Enter Reconciliation Option: "_RO
"RTN","PRSPRM1",53,0)
 S INDEX=INDEX+1
"RTN","PRSPRM1",54,0)
 S ^TMP($J,"PRSPRM",INDEX)=TEXT,TEXT=""
"RTN","PRSPRM1",55,0)
 S INDEX=INDEX+1
"RTN","PRSPRM1",56,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",57,0)
 Q
"RTN","PRSPRM1",58,0)
 ;
"RTN","PRSPRM1",59,0)
PTPRCOM ; Prompt for PTP's Reconciliation Comments if paper form was used
"RTN","PRSPRM1",60,0)
 ;
"RTN","PRSPRM1",61,0)
 Q:PTPRCOM'=""&(PTPRC)  ; PTP didn't enter any reconciliation comments
"RTN","PRSPRM1",62,0)
 W !
"RTN","PRSPRM1",63,0)
 S DIR(0)="FO^1:240^^",DIR("A")="PTP's Reconciliation Comments"
"RTN","PRSPRM1",64,0)
 D ^DIR K DIR
"RTN","PRSPRM1",65,0)
 I PTPRCOM="",(X'=""&(X'="^")) D
"RTN","PRSPRM1",66,0)
 . S PTPHRCOM="PTP/hr: "_X
"RTN","PRSPRM1",67,0)
 . S TEXT="Reconciliation Comments: "_$E(PTPHRCOM,1,48)
"RTN","PRSPRM1",68,0)
 . S INDEX=INDEX+1,^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",69,0)
 . S TEXT="",TEXT=$E(PTPHRCOM,49,128),INDEX=INDEX+1
"RTN","PRSPRM1",70,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",71,0)
 . S TEXT="",TEXT=$E(PTPHRCOM,129,208),INDEX=INDEX+1
"RTN","PRSPRM1",72,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",73,0)
 . S TEXT="",TEXT=$E(PTPHRCOM,209,240),INDEX=INDEX+1
"RTN","PRSPRM1",74,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",75,0)
 . S TEXT="",INDEX=INDEX+1
"RTN","PRSPRM1",76,0)
 . D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",77,0)
 Q
"RTN","PRSPRM1",78,0)
 ;
"RTN","PRSPRM1",79,0)
TRNS ; Transfer hours to current memorandum
"RTN","PRSPRM1",80,0)
 ;
"RTN","PRSPRM1",81,0)
 Q:PTPRC'=2&(PTPRC'=4)
"RTN","PRSPRM1",82,0)
 Q:'NMIEN
"RTN","PRSPRM1",83,0)
 ;
"RTN","PRSPRM1",84,0)
 D MEM^PRSPUT1(PRSIEN,NMIEN)
"RTN","PRSPRM1",85,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",86,0)
 ;
"RTN","PRSPRM1",87,0)
 ; Transfer Prompt
"RTN","PRSPRM1",88,0)
 S TPROMPT="Transfer "_$S(OTHRS>0:"+",1:"")_OTHRS_" hours: "
"RTN","PRSPRM1",89,0)
 S DIR(0)="Y"
"RTN","PRSPRM1",90,0)
 S DIR("A")=TPROMPT
"RTN","PRSPRM1",91,0)
 D ^DIR K DIR
"RTN","PRSPRM1",92,0)
 I X="^" D  Q
"RTN","PRSPRM1",93,0)
 . S QUIT=1
"RTN","PRSPRM1",94,0)
 . W !!,"Memorandum will have to be reconciled at a future date."
"RTN","PRSPRM1",95,0)
 S TEXT=TPROMPT_" "_X
"RTN","PRSPRM1",96,0)
 S INDEX=INDEX+1
"RTN","PRSPRM1",97,0)
 S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",98,0)
 S INDEX=INDEX+1,TEXT=""
"RTN","PRSPRM1",99,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",100,0)
 ;
"RTN","PRSPRM1",101,0)
CAL ; Calculate results after transfer
"RTN","PRSPRM1",102,0)
 S DATA=$G(^PRST(458.7,NMIEN,0))
"RTN","PRSPRM1",103,0)
 S AHRS=$P(DATA,U,4) ;     AGREED HOURS
"RTN","PRSPRM1",104,0)
 S THRSWK=$P(DATA,U,10) ;  TOTAL HOURS WORKED
"RTN","PRSPRM1",105,0)
 S NPAYHRS=$P(DATA,U,12) ; NONPAY HOURS
"RTN","PRSPRM1",106,0)
 S WPAYHRS=$P(DATA,U,13) ; WITHOUT PAY HOURS
"RTN","PRSPRM1",107,0)
 S POMC=$P(DATA,U,14) ;   PERCENTAGE OF MEMORANDUM COMPLETED
"RTN","PRSPRM1",108,0)
 S POHC=$P(DATA,U,15) ;   PERCENTAGE OF HOURS COMPLETED
"RTN","PRSPRM1",109,0)
 S AHTCM=$P(DATA,U,16) ;  AVERAGE HOURS TO COMPLETE MEMORANDUM
"RTN","PRSPRM1",110,0)
 S POT=$P(DATA,U,17) ;    % OFF TARGET
"RTN","PRSPRM1",111,0)
 ;
"RTN","PRSPRM1",112,0)
 S AAHRS=AHRS-NPAYHRS-WPAYHRS ; AGREED HOURS adjusted for NP and WP
"RTN","PRSPRM1",113,0)
 S I=$P($$MEMCPP^PRSPUT3(NMIEN),U,2) ; Determine # PP already worked
"RTN","PRSPRM1",114,0)
 S PPREM=26-I ; Pay Periods REMaining
"RTN","PRSPRM1",115,0)
 S NTHRSWK=THRSWK+OTHRS   ; New Total Hours Worked
"RTN","PRSPRM1",116,0)
 S NPOHC=$FN(THRSWK/AAHRS,"",2) ; New % Of Hours Completed
"RTN","PRSPRM1",117,0)
 S NAHTCM=(AAHRS-THRSWK)/PPREM ; Average Hours/PP To Complete Memorandum
"RTN","PRSPRM1",118,0)
 S NAHTCM=$FN(NAHTCM,"",2)
"RTN","PRSPRM1",119,0)
 I I>0 D
"RTN","PRSPRM1",120,0)
 . S NPOT=(AHRS/26*I)-NPAYHRS-WPAYHRS
"RTN","PRSPRM1",121,0)
 . S NPOT=THRSWK-NPOT/NPOT,NPOT=NPOT*100,NPOT=$FN(NPOT,"",2)
"RTN","PRSPRM1",122,0)
 I I=0 S NPOT=0
"RTN","PRSPRM1",123,0)
 ;
"RTN","PRSPRM1",124,0)
 ; Display updated Memorandum info
"RTN","PRSPRM1",125,0)
 D MEM^PRSPUT1(PRSIEN,NMIEN,,,OTHRS)
"RTN","PRSPRM1",126,0)
 Q
"RTN","PRSPRM1",127,0)
 ;
"RTN","PRSPRM1",128,0)
HRCOM ; Prompt for HR's final reconciliation comments
"RTN","PRSPRM1",129,0)
 W !
"RTN","PRSPRM1",130,0)
 S DIR(0)="FO^1:240^^",DIR("A")="Enter Final Reconciliation Comments"
"RTN","PRSPRM1",131,0)
 D ^DIR K DIR
"RTN","PRSPRM1",132,0)
 S HRCOM=X
"RTN","PRSPRM1",133,0)
 I HRCOM'=""&(HRCOM'="^") D
"RTN","PRSPRM1",134,0)
 . S TEXT="Enter Final Reconciliation Comments: "_$E(HRCOM,1,44)
"RTN","PRSPRM1",135,0)
 . S INDEX=INDEX+1,^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",136,0)
 . S TEXT="",TEXT=$E(HRCOM,44,123),INDEX=INDEX+1
"RTN","PRSPRM1",137,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",138,0)
 . S TEXT="",TEXT=$E(HRCOM,124,203),INDEX=INDEX+1
"RTN","PRSPRM1",139,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",140,0)
 . S TEXT="",TEXT=$E(HRCOM,204,240),INDEX=INDEX+1
"RTN","PRSPRM1",141,0)
 . I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPRM1",142,0)
 S TEXT="",INDEX=INDEX+1
"RTN","PRSPRM1",143,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPRM1",144,0)
 Q
"RTN","PRSPRM1",145,0)
 ;
"RTN","PRSPRM1",146,0)
PRT ; Print form for Chief of Staff approval
"RTN","PRSPRM1",147,0)
 ;
"RTN","PRSPRM1",148,0)
 S DIR(0)="Y"
"RTN","PRSPRM1",149,0)
 S DIR("A")="Print reconciliation for Chief of Staff approval "
"RTN","PRSPRM1",150,0)
 D ^DIR K DIR
"RTN","PRSPRM1",151,0)
 I X="^" S QUIT=1 Q
"RTN","PRSPRM1",152,0)
 Q:X="N"!(X="n")  ; Quit on 2nd pass
"RTN","PRSPRM1",153,0)
 S INDX="",INDX=$O(^TMP($J,"PRSPRM",INDX),-1),INDX=INDX+1
"RTN","PRSPRM1",154,0)
 S ^TMP($J,"PRSPRM",INDX)="",INDX=INDX+1 ; Blank Line
"RTN","PRSPRM1",155,0)
 S $P(DASH,"_",34)="_"
"RTN","PRSPRM1",156,0)
 S TEXT="Chief of Staff signature "_DASH_"  Date "
"RTN","PRSPRM1",157,0)
 S DASH="",$P(DASH,"_",14)="_",TEXT=TEXT_DASH
"RTN","PRSPRM1",158,0)
 S ^TMP($J,"PRSPRM",INDX)=TEXT
"RTN","PRSPRM1",159,0)
 ;
"RTN","PRSPRM1",160,0)
 W !
"RTN","PRSPRM1",161,0)
 K IOP,%ZIS
"RTN","PRSPRM1",162,0)
 S %ZIS("A")="Select Device: ",%ZIS="MQ"
"RTN","PRSPRM1",163,0)
 D ^%ZIS
"RTN","PRSPRM1",164,0)
 I POP D  Q
"RTN","PRSPRM1",165,0)
 . S QUIT=1
"RTN","PRSPRM1",166,0)
 . K %ZIS,IOP
"RTN","PRSPRM1",167,0)
 I $D(IO("Q")) D  Q
"RTN","PRSPRM1",168,0)
 .  S ZTDESC="PRS PTP COMPLETE RECONCILE"
"RTN","PRSPRM1",169,0)
 .  S ZTRTN="PRINT^PRSPRM1"
"RTN","PRSPRM1",170,0)
 .  S ZTSAVE("^TMP($J,""PRSPRM"",")=""
"RTN","PRSPRM1",171,0)
 .  D ^%ZTLOAD W !,$S($D(ZTSK):"Request Queued!",1:"Request Canceled!")
"RTN","PRSPRM1",172,0)
 .  K ZTSK,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","PRSPRM1",173,0)
 .  D HOME^%ZIS
"RTN","PRSPRM1",174,0)
 U IO
"RTN","PRSPRM1",175,0)
 D PRINT^PRSPRM1,^%ZISC
"RTN","PRSPRM1",176,0)
 K %ZIS,IOP
"RTN","PRSPRM1",177,0)
 Q
"RTN","PRSPRM1",178,0)
 ;
"RTN","PRSPRM1",179,0)
ESIG ; Prompt for Electronic Signature and store fields in #458.7
"RTN","PRSPRM1",180,0)
 ;
"RTN","PRSPRM1",181,0)
 N ESOK
"RTN","PRSPRM1",182,0)
 D ^PRSAES
"RTN","PRSPRM1",183,0)
 Q:'ESOK
"RTN","PRSPRM1",184,0)
 ; Set fields when transferring + or - balance
"RTN","PRSPRM1",185,0)
 I PTPRC=2!(PTPRC=4) D
"RTN","PRSPRM1",186,0)
 . S IEN4587=NMIEN_","
"RTN","PRSPRM1",187,0)
 . S PRSFDA(458.7,IEN4587,8)=OTHRS   ; CARRYOVER HOURS
"RTN","PRSPRM1",188,0)
 . S PRSFDA(458.7,IEN4587,14)=+NPOHC  ; % OF HOURS COMPLETED
"RTN","PRSPRM1",189,0)
 . S PRSFDA(458.7,IEN4587,15)=+NAHTCM ; AVE HRS/PP TO COMPLETE MEM
"RTN","PRSPRM1",190,0)
 . S PRSFDA(458.7,IEN4587,16)=+NPOT   ; % OFF TARGET
"RTN","PRSPRM1",191,0)
 . D UPDATE^DIE("","PRSFDA","IEN4587"),MSG^DIALOG()
"RTN","PRSPRM1",192,0)
 ; Update the status of the old memorandum
"RTN","PRSPRM1",193,0)
 S IEN4587=MIEN_","
"RTN","PRSPRM1",194,0)
 I PTPRCOM=""&($G(PTPHRCOM)'="") D   ; PTP Reconciliation Comm from paper
"RTN","PRSPRM1",195,0)
 . S PRSFDA(458.7,IEN4587,18)=PTPHRCOM
"RTN","PRSPRM1",196,0)
 S PRSFDA(458.7,IEN4587,19)=DUZ   ; RECONCILED BY
"RTN","PRSPRM1",197,0)
 D NOW^%DTC
"RTN","PRSPRM1",198,0)
 S PRSFDA(458.7,IEN4587,20)=%     ; DATE/TIME RECONCILED
"RTN","PRSPRM1",199,0)
 S PRSFDA(458.7,IEN4587,21)=HRCOM ; HR RECONCILIATION COMMENTS
"RTN","PRSPRM1",200,0)
 S PRSFDA(458.7,IEN4587,5)=4      ; STATUS = RECONCILED
"RTN","PRSPRM1",201,0)
 D UPDATE^DIE("","PRSFDA","IEN4587"),MSG^DIALOG()
"RTN","PRSPRM1",202,0)
 Q
"RTN","PRSPRM1",203,0)
 ;
"RTN","PRSPRM1",204,0)
PRINT ; Print the paper version of the Reconciliation form
"RTN","PRSPRM1",205,0)
 ;
"RTN","PRSPRM1",206,0)
 S INDEX=""
"RTN","PRSPRM1",207,0)
 F  S INDEX=$O(^TMP($J,"PRSPRM",INDEX)) Q:'INDEX  D
"RTN","PRSPRM1",208,0)
 . S TEXT=^TMP($J,"PRSPRM",INDEX)
"RTN","PRSPRM1",209,0)
 . W !,TEXT
"RTN","PRSPRM1",210,0)
 Q
"RTN","PRSPRM1",211,0)
 ;
"RTN","PRSPRM1",212,0)
RCE(PTPRC) ;
"RTN","PRSPRM1",213,0)
 I PTPRC=1 S PTPRCE="No reconciliation needed"
"RTN","PRSPRM1",214,0)
 I PTPRC=2 S PTPRCE="Transfer negative balance"
"RTN","PRSPRM1",215,0)
 I PTPRC=3 S PTPRCE="Pay VA for negative balance"
"RTN","PRSPRM1",216,0)
 I PTPRC=4 S PTPRCE="Transfer positive balance"
"RTN","PRSPRM1",217,0)
 I PTPRC=5 S PTPRCE="Pay Phy for positive balance"
"RTN","PRSPRM1",218,0)
 Q PTPRCE
"RTN","PRSPRM1",219,0)
 ;
"RTN","PRSPRM1",220,0)
KILL ; Clean up variables
"RTN","PRSPRM1",221,0)
 ;
"RTN","PRSPRM1",222,0)
 K ACTRC,AHRCOM,AHRS,AAHRS,AHTCM,AMT,ARRAY,ASK,ASK2,D1,DASH
"RTN","PRSPRM1",223,0)
 K DATA,DATA0,DATA2,DATA4,DATA5,DAY,DIR,DIRUT,END,ENDDAT,ENDSTA
"RTN","PRSPRM1",224,0)
 K ESRSTAT,HRCOM,I,IEN4587,INDEX,INDX,MEM,MIEN,NAHTCM,NMIEN,NPAYHRS
"RTN","PRSPRM1",225,0)
 K NPHRS,NPOHC,NPOMC,NPOT,NTHRSWK,OLDMIEN,OTHRS,OTP,POP,POHC,POMC
"RTN","PRSPRM1",226,0)
 K POT,PPE,PPI,PPEX,PPEX1,PPCNT,PPREM,PRPRCE,PRSAPGM,PRSIEN,PRSFDA
"RTN","PRSPRM1",227,0)
 K PTPHRCOM,PTPRC,PTPRCE,PTPRCOM,QUIT,RATE,RO,SALARY,SCRTTL,SHRCOM
"RTN","PRSPRM1",228,0)
 K SPAA,START,STATUS,STDAT,SSN,TDAT,TDATE,TEXT,THRSWK
"RTN","PRSPRM1",229,0)
 K TPROMPT,WPAYHRS,WPHRS,ZTSAVE,X,Y,%
"RTN","PRSPRM1",230,0)
 K ^TMP($J,"PRSPRM")
"RTN","PRSPRM1",231,0)
 Q
"RTN","PRSPSAP")
0^22^B45637052^n/a
"RTN","PRSPSAP",1,0)
PRSPSAP ;WOIFO/JAH - part time physician, supervisory approvals ;10/22/04
"RTN","PRSPSAP",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSAP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSAP",4,0)
 Q
"RTN","PRSPSAP",5,0)
 ; T&A supervisor of PTP employee is required to review and take
"RTN","PRSPSAP",6,0)
 ; one of the following actions on each signed day of the PTP's ESR:
"RTN","PRSPSAP",7,0)
 ; 1. approve, 2. request resubmission or 3. bypass.
"RTN","PRSPSAP",8,0)
 ; When the T&A Supervisor approves a signed day we attempt to
"RTN","PRSPSAP",9,0)
 ; update the PTP's timecard for that day.  Updates to the
"RTN","PRSPSAP",10,0)
 ; timecard will be screened based on the status of the timecard
"RTN","PRSPSAP",11,0)
 ; and the effect of any potential update.
"RTN","PRSPSAP",12,0)
 ;
"RTN","PRSPSAP",13,0)
 ; MAIN entry point called from option Approve Signed ESRs. 
"RTN","PRSPSAP",14,0)
 ;
"RTN","PRSPSAP",15,0)
MAIN ;
"RTN","PRSPSAP",16,0)
 K ^TMP($J,"PRSPSAP")
"RTN","PRSPSAP",17,0)
 N PRSTLV,TLI,TLE,PRSIEN,ANYACT,AVAIL,OUT,DCNT,APRWHO
"RTN","PRSPSAP",18,0)
 ; Make sure we have a signature code before continuing
"RTN","PRSPSAP",19,0)
 I '$$ESIGC^PRSPUT2(1) W !! S OUT=$$ASK^PRSLIB00(1) Q
"RTN","PRSPSAP",20,0)
 D HDROPT^PRSPSAP1
"RTN","PRSPSAP",21,0)
 ; Prompt supervisor to pick one T&L unit for which they are assigned.
"RTN","PRSPSAP",22,0)
 S PRSTLV=3
"RTN","PRSPSAP",23,0)
 D ^PRSAUTL
"RTN","PRSPSAP",24,0)
 Q:TLI<1
"RTN","PRSPSAP",25,0)
 ;
"RTN","PRSPSAP",26,0)
 ; Check if they only want to look at one employee
"RTN","PRSPSAP",27,0)
 S APRWHO=$$ONEPTP^PRSPSAPU(TLE)
"RTN","PRSPSAP",28,0)
 Q:APRWHO<0
"RTN","PRSPSAP",29,0)
 ;     ---------------------------------------------------
"RTN","PRSPSAP",30,0)
 I APRWHO>0 D
"RTN","PRSPSAP",31,0)
 .  S NN=$P($G(^PRSPC(APRWHO,0)),U)
"RTN","PRSPSAP",32,0)
 .  D BLDLST(.OUT,TLE,NN)
"RTN","PRSPSAP",33,0)
 E  D
"RTN","PRSPSAP",34,0)
 .;   Loop thru supervisor's selected T&L
"RTN","PRSPSAP",35,0)
 .  S NN=""
"RTN","PRSPSAP",36,0)
 .  F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""!($G(OUT)>0)  D
"RTN","PRSPSAP",37,0)
 ..   D BLDLST(.OUT,TLE,NN)
"RTN","PRSPSAP",38,0)
 ;
"RTN","PRSPSAP",39,0)
 ; display all the ASA records for action.
"RTN","PRSPSAP",40,0)
 S OUT=0
"RTN","PRSPSAP",41,0)
 D ASALIST^PRSPSAP1(.OUT)
"RTN","PRSPSAP",42,0)
 ; check if there are any updates and then prompt for signature
"RTN","PRSPSAP",43,0)
 ;
"RTN","PRSPSAP",44,0)
 D ANYACT^PRSPSAP1(.ANYACT)
"RTN","PRSPSAP",45,0)
 I ANYACT>0 D
"RTN","PRSPSAP",46,0)
 . D SUMMARY(.ANYACT)
"RTN","PRSPSAP",47,0)
 . D SIG^XUSESIG
"RTN","PRSPSAP",48,0)
 .; update the timecard and ESR status for all actions when
"RTN","PRSPSAP",49,0)
 .; a valid signature is applied
"RTN","PRSPSAP",50,0)
 . I X1="" D
"RTN","PRSPSAP",51,0)
 ..   W @IOF,!!!,?10,"TIMECARD AND ESR WERE NOT UPDATED."
"RTN","PRSPSAP",52,0)
 .E  D
"RTN","PRSPSAP",53,0)
 ..   D TRANSACT^PRSPSAP2
"RTN","PRSPSAP",54,0)
 ; remove any remaining PTP timecard locks held in this option
"RTN","PRSPSAP",55,0)
 ; D EX^PRSASR
"RTN","PRSPSAP",56,0)
 K ^TMP($J,"PRSPSAP")
"RTN","PRSPSAP",57,0)
 Q
"RTN","PRSPSAP",58,0)
 ;
"RTN","PRSPSAP",59,0)
BLDLST(OUT,TLE,NN) ; BUILD LIST OF ALL APPROVAL ACTIONS FOR SINGLE EMPLOYEE
"RTN","PRSPSAP",60,0)
 N PRSIEN,PPE,PPI,AVAIL,DCNT,PRSD,GLOB,DFN
"RTN","PRSPSAP",61,0)
 S PRSIEN=0
"RTN","PRSPSAP",62,0)
 S PRSIEN=$O(^PRSPC("ATL"_TLE,NN,PRSIEN)) Q:PRSIEN<1!($G(OUT)>0)  D
"RTN","PRSPSAP",63,0)
 .    S PPE=""
"RTN","PRSPSAP",64,0)
 .    F  S PPE=$O(^PRST(458,"ASA",PRSIEN,PPE)) Q:PPE=""!($G(OUT)>0)  D
"RTN","PRSPSAP",65,0)
 ..     S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSPSAP",66,0)
 ..; get lock for PTP's entire PP, then add record (PUSH) that 
"RTN","PRSPSAP",67,0)
 ..; requires supervisor action to the list
"RTN","PRSPSAP",68,0)
 ..    S DFN=PRSIEN
"RTN","PRSPSAP",69,0)
 ..;
"RTN","PRSPSAP",70,0)
 ..; $$availrec() locks PTP ESR node.
"RTN","PRSPSAP",71,0)
 ..;  unlock if supervisor bybasses unlock otherwise they 
"RTN","PRSPSAP",72,0)
 ..;  are not unlocked until they are processed thru temp global
"RTN","PRSPSAP",73,0)
 ..;  & their status' are updated.
"RTN","PRSPSAP",74,0)
 ..    S AVAIL=$$AVAILREC^PRSLIB00("",.GLOB,.OUT)
"RTN","PRSPSAP",75,0)
 ..    Q:'AVAIL
"RTN","PRSPSAP",76,0)
 ..    ;
"RTN","PRSPSAP",77,0)
 ..;  add item to list and set up a day cross ref with count of days
"RTN","PRSPSAP",78,0)
 ..     S (DCNT,PRSD)=0
"RTN","PRSPSAP",79,0)
 ..     F  S PRSD=$O(^PRST(458,"ASA",PRSIEN,PPE,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAP",80,0)
 ...       S DCNT=DCNT+1
"RTN","PRSPSAP",81,0)
 ...       D PUSH^PRSPSAP1(PPI,PRSIEN,PRSD,DCNT)
"RTN","PRSPSAP",82,0)
 ;
"RTN","PRSPSAP",83,0)
 Q
"RTN","PRSPSAP",84,0)
 ;
"RTN","PRSPSAP",85,0)
SUMMARY(AA) ;
"RTN","PRSPSAP",86,0)
 W @IOF,!!!,"Supervisory Action Summary"
"RTN","PRSPSAP",87,0)
 W !!,$J(AA,6)," actions require your electronic signature before being"
"RTN","PRSPSAP",88,0)
 W !,?(6-$L(AA)),"  committed to the database."
"RTN","PRSPSAP",89,0)
 I AA("A")>0 W !,$J(AA("A"),6)," ESR record marked for approval. (signature required)"
"RTN","PRSPSAP",90,0)
 I AA("R")>0 W !,$J(AA("R"),6)," ESR records marked for resubmission. (signature required)"
"RTN","PRSPSAP",91,0)
 I AA("B")>0 W !,$J(AA("B"),6)," ESR records explicitly bypassed."
"RTN","PRSPSAP",92,0)
 I AA("N")>0 W !,$J(AA("N"),6)," ESR records with no action."
"RTN","PRSPSAP",93,0)
 Q
"RTN","PRSPSAP",94,0)
GETACT(ESRDTS,PRSIEN,PPI) ; return user choice of # (1-ACTCNT) or action
"RTN","PRSPSAP",95,0)
 ; return 0 for ^ at first action prompt
"RTN","PRSPSAP",96,0)
 ; return null for no response (user hit return)
"RTN","PRSPSAP",97,0)
 ; return -1 if ^ at 2nd prompt (action on single day prompt)
"RTN","PRSPSAP",98,0)
 N DIR,DIRUT,ACT,CT,NUMS
"RTN","PRSPSAP",99,0)
 ;
"RTN","PRSPSAP",100,0)
 ; get total items + marked items CT CT(1)
"RTN","PRSPSAP",101,0)
 D MARKCNT^PRSPSAP1(.CT,PRSIEN,PPI)
"RTN","PRSPSAP",102,0)
 I CT>1 D
"RTN","PRSPSAP",103,0)
 .  S NUMS=";"
"RTN","PRSPSAP",104,0)
 .  F I=1:1:CT D
"RTN","PRSPSAP",105,0)
 ..    S NUMS=NUMS_I_":"_$P(ESRDTS(I),U,2)_";"
"RTN","PRSPSAP",106,0)
 ;
"RTN","PRSPSAP",107,0)
 ; status already marked on all days
"RTN","PRSPSAP",108,0)
 I (CT>1)&(CT=CT(1)) D
"RTN","PRSPSAP",109,0)
 .  S DIR(0)="SAO^"_NUMS
"RTN","PRSPSAP",110,0)
 .  S DIR("A")="Select an item #: "
"RTN","PRSPSAP",111,0)
 .  S DIR("?",1)="Enter an item from the left column to change status for that day"
"RTN","PRSPSAP",112,0)
 E  D
"RTN","PRSPSAP",113,0)
 .; if all days don't have a superV action (marked) then prompt for
"RTN","PRSPSAP",114,0)
 .; action on remaining days or pick a day (item)
"RTN","PRSPSAP",115,0)
 .  I CT>1 D
"RTN","PRSPSAP",116,0)
 ..  S DIR(0)="SAO^A:Approve;B:Bypass;R:Resubmit"_NUMS
"RTN","PRSPSAP",117,0)
 ..  S DIR("A")="(A)pprove, (B)ypass, (R)esubmit or enter an item #: "
"RTN","PRSPSAP",118,0)
 ..  S DIR("?",1)="Enter an action for all records without a status or enter an item #"
"RTN","PRSPSAP",119,0)
 ..  S DIR("?",2)="to then pick an action for that day."
"RTN","PRSPSAP",120,0)
 ..  S DIR("?",3)="  Type R for Resubmit when the part-time physician needs to correct an ESR day."
"RTN","PRSPSAP",121,0)
 ..  S DIR("?",4)="  Type B for Bypass to skip the day(s) for now and approve at a later time."
"RTN","PRSPSAP",122,0)
 ..  S DIR("?",5)="  Type A for Approve when the ESR day(s) appears correct."
"RTN","PRSPSAP",123,0)
 .E  D
"RTN","PRSPSAP",124,0)
 ..; if only one item to pick, don't ask for item #
"RTN","PRSPSAP",125,0)
 ..  S DIR(0)="SAO^A:Approve;B:Bypass;R:Resubmit"
"RTN","PRSPSAP",126,0)
 ..  S DIR("A")="(A)pprove, (B)ypass, (R)esubmit: "
"RTN","PRSPSAP",127,0)
 ..  S DIR("?",1)="Enter an action for all records without a status"
"RTN","PRSPSAP",128,0)
 ..  S DIR("?",2)="  Type R for Resubmit when the part-time physician needs to correct an ESR day."
"RTN","PRSPSAP",129,0)
 ..  S DIR("?",3)="  Type B for Bypass to skip the day(s) for now and approve at a later time."
"RTN","PRSPSAP",130,0)
 ..  S DIR("?",4)="  Type A for Approve when the ESR day(s) appears correct."
"RTN","PRSPSAP",131,0)
 ;
"RTN","PRSPSAP",132,0)
 S DIR("?")="  Press [enter] to move to the next part time physician."
"RTN","PRSPSAP",133,0)
 D ^DIR
"RTN","PRSPSAP",134,0)
 S PICK=$G(Y)
"RTN","PRSPSAP",135,0)
 I $G(Y)="" Q ""
"RTN","PRSPSAP",136,0)
 ; if there was only one item then set pick to 1 plus action
"RTN","PRSPSAP",137,0)
 I CT=1 S PICK=PICK_"^1"
"RTN","PRSPSAP",138,0)
 I $G(DIRUT) S PICK=0
"RTN","PRSPSAP",139,0)
 ;
"RTN","PRSPSAP",140,0)
 ; item was picked
"RTN","PRSPSAP",141,0)
 I PICK>0,(PICK<(CT+1)) D
"RTN","PRSPSAP",142,0)
 .  N DAYLNS,DIR,DIRUT,ESR,HPL
"RTN","PRSPSAP",143,0)
 .  D GETESR^PRSPSAP1(.ESR,PPI,PRSIEN,+ESRDTS(PICK))
"RTN","PRSPSAP",144,0)
 .  N COUNT S COUNT=PICK,COUNT(1)=0
"RTN","PRSPSAP",145,0)
 .  W ! D DAY^PRSPSAPU(.DAYLNS,ESRDTS(COUNT),.ESR,PRSIEN,PPI)
"RTN","PRSPSAP",146,0)
 .  S ACT=PICK
"RTN","PRSPSAP",147,0)
 .  S DIR(0)="SA^A:Approve;B:Bypass;R:Resubmit"
"RTN","PRSPSAP",148,0)
 .  S DIR("A")="(A)pprove, (B)ypass, (R)esubmit: "
"RTN","PRSPSAP",149,0)
 .  S DIR("?")="Select an action for the ESR day above."
"RTN","PRSPSAP",150,0)
 .  S DIR("?",1)="  Type R for Resubmit when the part-time physician needs to correct an ESR day."
"RTN","PRSPSAP",151,0)
 .  S DIR("?",2)="  Type B for Bypass to skip the day(s) for now and approve at a later time."
"RTN","PRSPSAP",152,0)
 .  S DIR("?",3)="  Type A for Approve when the ESR day(s) appears correct."
"RTN","PRSPSAP",153,0)
 .  S DIR("?",4)="  Type ^ to redisplay the current part time physician."
"RTN","PRSPSAP",154,0)
 .  D GETDAY^PRSPSAPU(.DAYLNS,.ESRDTS,.ESR,PICK,PRSIEN,PPI)
"RTN","PRSPSAP",155,0)
 .  S HPL=0
"RTN","PRSPSAP",156,0)
 .  F  S HPL=$O(DAYLNS(HPL)) Q:HPL'>0  D
"RTN","PRSPSAP",157,0)
 ..    S DIR("?",HPL+4)=$G(DAYLNS(HPL))
"RTN","PRSPSAP",158,0)
 .  D ^DIR
"RTN","PRSPSAP",159,0)
 .  S PICK=$G(Y)_"^"_ACT
"RTN","PRSPSAP",160,0)
 .  I $G(DIRUT) S PICK=-1
"RTN","PRSPSAP",161,0)
 Q PICK
"RTN","PRSPSAP",162,0)
 ;
"RTN","PRSPSAP1")
0^23^B29868650^n/a
"RTN","PRSPSAP1",1,0)
PRSPSAP1 ;WOIFO/JAH - part time physician, supervisory approvals ;10/22/04
"RTN","PRSPSAP1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSAP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSAP1",4,0)
 Q
"RTN","PRSPSAP1",5,0)
HDRESR(PRSIEN,PPI,LINES) ; Display a Supervisor Header
"RTN","PRSPSAP1",6,0)
 ; PRSIEN - users 450 number
"RTN","PRSPSAP1",7,0)
 ; PPI - what pay period
"RTN","PRSPSAP1",8,0)
 N CO,NM,SSN,TL,PPE,PPTXT,INCD
"RTN","PRSPSAP1",9,0)
 Q:(PRSIEN'>0)
"RTN","PRSPSAP1",10,0)
 S C0=^PRSPC(PRSIEN,0)
"RTN","PRSPSAP1",11,0)
 S NM=$P(C0,U,1)
"RTN","PRSPSAP1",12,0)
 S SSN=$P(C0,U,9),SSN="XXX-XX-"_$E(SSN,6,9)
"RTN","PRSPSAP1",13,0)
 S TL=$P(C0,"^",8),TL="T&L: "_TL
"RTN","PRSPSAP1",14,0)
 I $G(PPI)>0 S PPE=$P($G(^PRST(458,PPI,0)),U)
"RTN","PRSPSAP1",15,0)
 I $G(PPE)="" S PPE="?????"
"RTN","PRSPSAP1",16,0)
 S PPTXT="Pay Per: "_PPE
"RTN","PRSPSAP1",17,0)
 S INCD=$$INCESRS^PRSPESR3(PRSIEN,PPI)
"RTN","PRSPSAP1",18,0)
 S INCD="Incomplete Days: "_INCD
"RTN","PRSPSAP1",19,0)
 W @IOF,"                           VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPSAP1",20,0)
 W !,PPTXT,?20,"Supervisory Review for Part Time Physicians in "_TL
"RTN","PRSPSAP1",21,0)
 W !,$E(NM,1,30),?32,SSN,?56,INCD
"RTN","PRSPSAP1",22,0)
 W ! D COLHDRS
"RTN","PRSPSAP1",23,0)
 W ! F I=1:1:(IOM-1) W "-"
"RTN","PRSPSAP1",24,0)
 S LINES=7
"RTN","PRSPSAP1",25,0)
 Q
"RTN","PRSPSAP1",26,0)
COLHDRS ; JUST THE COLUMN HEADERS
"RTN","PRSPSAP1",27,0)
 W !,"Item",?8,"Date",?17,"Scheduled Tour",?36,"Work/Leave Posted"
"RTN","PRSPSAP1",28,0)
 W ?61,"Hours",?67,"Meal",?73,"Status"
"RTN","PRSPSAP1",29,0)
 Q
"RTN","PRSPSAP1",30,0)
PUSH(PPI,PRSIEN,PRSD,CNT) ; ADD record to approval list
"RTN","PRSPSAP1",31,0)
 ; set up a xref on the day.  This enables quick access to the
"RTN","PRSPSAP1",32,0)
 ; day number when the pick list has 4 items spread over the
"RTN","PRSPSAP1",33,0)
 ; pay period.  (e.g. the first item is day 4, the 2nd item
"RTN","PRSPSAP1",34,0)
 ; is day 12, etc.)
"RTN","PRSPSAP1",35,0)
 ;
"RTN","PRSPSAP1",36,0)
 N NM
"RTN","PRSPSAP1",37,0)
 ; Set up name x-ref for alphabetical review
"RTN","PRSPSAP1",38,0)
 S NM=$P($G(^PRSPC(PRSIEN,0)),U)
"RTN","PRSPSAP1",39,0)
 S ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,0)=""
"RTN","PRSPSAP1",40,0)
 S ^TMP($J,"PRSPSAP","B",NM,PRSIEN)=""
"RTN","PRSPSAP1",41,0)
 S ^TMP($J,"PRSPSAP",PRSIEN,PPI,"B",CNT)=PRSD
"RTN","PRSPSAP1",42,0)
 Q
"RTN","PRSPSAP1",43,0)
GETESR(ESR,PPI,PRSIEN,PRSD) ; GET ESR RELATED DATA
"RTN","PRSPSAP1",44,0)
 ; RETURN DATA IN ESR ARRAY BY REFERENCE
"RTN","PRSPSAP1",45,0)
 ;
"RTN","PRSPSAP1",46,0)
 N PRSN1,TOD,LSGN,METHOD,PRSN4
"RTN","PRSPSAP1",47,0)
 S PRSN1=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,1)) ; tour segmts node
"RTN","PRSPSAP1",48,0)
 S PRSN4=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,4)) ; 2ND tour segmts node
"RTN","PRSPSAP1",49,0)
 S TOD=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,2)
"RTN","PRSPSAP1",50,0)
 S ESR("TOD")=TOD
"RTN","PRSPSAP1",51,0)
 S ESR("TODEXT")=$$GETTOUR^PRSPESR3(PRSIEN,PRSD,TOD,PRSN1,PRSN4)
"RTN","PRSPSAP1",52,0)
 S ESR("TOD2")=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),U,13)
"RTN","PRSPSAP1",53,0)
 S ESR("WORK")=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5))
"RTN","PRSPSAP1",54,0)
 I $P(ESR("WORK"),U)="" D
"RTN","PRSPSAP1",55,0)
 .; get ESR DAY LAST SIGN METHOD
"RTN","PRSPSAP1",56,0)
 . S LSGN=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,7)),U,3)
"RTN","PRSPSAP1",57,0)
 . I LSGN'>0 S LSGN=1
"RTN","PRSPSAP1",58,0)
 . S METHOD=$$EXTERNAL^DILFD(458.02,149,"",LSGN,)
"RTN","PRSPSAP1",59,0)
 . S ESR("WORK")="No work:signed-"_METHOD
"RTN","PRSPSAP1",60,0)
 S ESR("RMK")=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,6)),U)
"RTN","PRSPSAP1",61,0)
 S ESR("ML")=$P($G(^PRST(457.1,TOD,0)),U,3)
"RTN","PRSPSAP1",62,0)
 ; esr status must be SIGNED initially to appear in this option
"RTN","PRSPSAP1",63,0)
 S ESR("STAT")=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,7)),"^",1)
"RTN","PRSPSAP1",64,0)
 Q
"RTN","PRSPSAP1",65,0)
 ;
"RTN","PRSPSAP1",66,0)
ASALIST(OUT) ; ADD record to approval list
"RTN","PRSPSAP1",67,0)
 ;
"RTN","PRSPSAP1",68,0)
 N PRSIEN,PPI,PRSD,MOVEON,OUT,ACT,ESRDTS,NM
"RTN","PRSPSAP1",69,0)
 ;
"RTN","PRSPSAP1",70,0)
 ; MOVEON : flag to indicate superV is done with this PTP's pp ESR.
"RTN","PRSPSAP1",71,0)
 ;
"RTN","PRSPSAP1",72,0)
 S OUT=0
"RTN","PRSPSAP1",73,0)
 S (ACT,NM)=""
"RTN","PRSPSAP1",74,0)
 F  S NM=$O(^TMP($J,"PRSPSAP","B",NM)) Q:NM=""!OUT  D
"RTN","PRSPSAP1",75,0)
 .  S PRSIEN=$O(^TMP($J,"PRSPSAP","B",NM,0))
"RTN","PRSPSAP1",76,0)
 .  I PRSIEN'>0 S OUT=1 Q
"RTN","PRSPSAP1",77,0)
 .  S PPI=0
"RTN","PRSPSAP1",78,0)
 .  F  S PPI=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI)) Q:PPI'>0!OUT  D
"RTN","PRSPSAP1",79,0)
 ..;
"RTN","PRSPSAP1",80,0)
 ..;  REWORK THIS EMPLOYEE UNTIL WE'RE DONE
"RTN","PRSPSAP1",81,0)
 ..;
"RTN","PRSPSAP1",82,0)
 ..    S MOVEON=0
"RTN","PRSPSAP1",83,0)
 ..    F  D  Q:MOVEON
"RTN","PRSPSAP1",84,0)
 ...     D DISPLAY^PRSPSAPU(PRSIEN,PPI)
"RTN","PRSPSAP1",85,0)
 ...     D ESRDTS^PRSPSAPU(.ESRDTS,PRSIEN,PPI)
"RTN","PRSPSAP1",86,0)
 ...     S ACT=$$GETACT^PRSPSAP(.ESRDTS,PRSIEN,PPI)
"RTN","PRSPSAP1",87,0)
 ...; if user hit return and all days are marked w/status then moveon
"RTN","PRSPSAP1",88,0)
 ...     I ACT="" S MOVEON=$$MOVEON(PRSIEN,PPI) Q
"RTN","PRSPSAP1",89,0)
 ...;   did user type a caret to abort?
"RTN","PRSPSAP1",90,0)
 ...     I ACT=0 S (OUT,MOVEON)=1 Q
"RTN","PRSPSAP1",91,0)
 ...;   either mark a single day or mark remaining unmarked
"RTN","PRSPSAP1",92,0)
 ...;   days depending on ACT
"RTN","PRSPSAP1",93,0)
 ... ; ^ at second prompt should redisplay esr period
"RTN","PRSPSAP1",94,0)
 ...     Q:ACT<0
"RTN","PRSPSAP1",95,0)
 ...;    mark the action on the day
"RTN","PRSPSAP1",96,0)
 ...     D MARK^PRSPSAP3(ACT,PRSIEN,PPI)
"RTN","PRSPSAP1",97,0)
 Q
"RTN","PRSPSAP1",98,0)
HDROPT ; MAIN OPTION HEADING
"RTN","PRSPSAP1",99,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSPSAP1",100,0)
 N TAB,TITLE
"RTN","PRSPSAP1",101,0)
 S TITLE="SUPERVISOR'S APPROVAL FOR PT PHYSICIAN'S ELECTRONIC SUBSIDIARY RECORDS"
"RTN","PRSPSAP1",102,0)
 S TAB=IOM-$L(TITLE)/2
"RTN","PRSPSAP1",103,0)
 W !?26,"VA TIME & ATTENDANCE SYSTEM",!?TAB,TITLE
"RTN","PRSPSAP1",104,0)
 Q
"RTN","PRSPSAP1",105,0)
ANYACT(ACTCNT) ; RETURN NUMBER OF ESR DAILY ACTIONS TO UPDATE
"RTN","PRSPSAP1",106,0)
 ;  THIS IS A COUNT OF ALL THE RESUBMITS AND APPROVES
"RTN","PRSPSAP1",107,0)
 ;
"RTN","PRSPSAP1",108,0)
 N PRSIEN,PPI,PRSD,ACT
"RTN","PRSPSAP1",109,0)
 S (ACTCNT,ACTCNT("R"),ACTCNT("A"),ACTCNT("B"),ACTCNT("N"))=0
"RTN","PRSPSAP1",110,0)
 S PRSIEN=0
"RTN","PRSPSAP1",111,0)
 F  S PRSIEN=$O(^TMP($J,"PRSPSAP",PRSIEN)) Q:PRSIEN'>0  D
"RTN","PRSPSAP1",112,0)
 .  S PPI=0
"RTN","PRSPSAP1",113,0)
 .  F  S PPI=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI)) Q:PPI'>0  D
"RTN","PRSPSAP1",114,0)
 ..   S PRSD=0
"RTN","PRSPSAP1",115,0)
 ..  F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAP1",116,0)
 ...   S ACT=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1))
"RTN","PRSPSAP1",117,0)
 ...   I ACT="A" S ACTCNT=ACTCNT+1,ACTCNT("A")=ACTCNT("A")+1 Q
"RTN","PRSPSAP1",118,0)
 ...   I ACT="R" S ACTCNT=ACTCNT+1,ACTCNT("R")=ACTCNT("R")+1 Q
"RTN","PRSPSAP1",119,0)
 ...   I ACT="B" S ACTCNT("B")=ACTCNT("B")+1 Q
"RTN","PRSPSAP1",120,0)
 ...   S ACTCNT("N")=ACTCNT("N")+1
"RTN","PRSPSAP1",121,0)
 Q
"RTN","PRSPSAP1",122,0)
MARKCNT(MC,PRSIEN,PPI) ; return items marked AND total items in MC array
"RTN","PRSPSAP1",123,0)
 ;  MC = items marked with any status
"RTN","PRSPSAP1",124,0)
 ;  MC(1) = available items to mark count
"RTN","PRSPSAP1",125,0)
 ;
"RTN","PRSPSAP1",126,0)
 N ACT,PRSD
"RTN","PRSPSAP1",127,0)
 S (MC,MC(1))=0
"RTN","PRSPSAP1",128,0)
 Q:(PRSIEN'>0)!(PPI'>0)
"RTN","PRSPSAP1",129,0)
 S PRSD=0
"RTN","PRSPSAP1",130,0)
 F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAP1",131,0)
 .   S ACT=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1))
"RTN","PRSPSAP1",132,0)
 . ; increment the counter for days marked by the supervisor already
"RTN","PRSPSAP1",133,0)
 .   I "^A^B^R^"[(U_ACT_U) S MC(1)=MC(1)+1
"RTN","PRSPSAP1",134,0)
 .   S MC=MC+1
"RTN","PRSPSAP1",135,0)
 Q
"RTN","PRSPSAP1",136,0)
 ;
"RTN","PRSPSAP1",137,0)
MOVEON(PRSIEN,PPI) ; return users choice (MOVE ON OR REDISPLAY CURR PTP)
"RTN","PRSPSAP1",138,0)
 ; return 0 for abort
"RTN","PRSPSAP1",139,0)
 ; if the number of days available for approval matches the number
"RTN","PRSPSAP1",140,0)
 ; of days that have some status marked then we will not ask the
"RTN","PRSPSAP1",141,0)
 ; user whether they want to move on or not.
"RTN","PRSPSAP1",142,0)
 ;
"RTN","PRSPSAP1",143,0)
 N CT,MOVEON
"RTN","PRSPSAP1",144,0)
 S MOVEON=1
"RTN","PRSPSAP1",145,0)
 D MARKCNT^PRSPSAP1(.CT,PRSIEN,PPI)
"RTN","PRSPSAP1",146,0)
 Q:$G(CT)=$G(CT(1)) MOVEON
"RTN","PRSPSAP1",147,0)
 N DIR,DIRUT
"RTN","PRSPSAP1",148,0)
 S MOVEON=0
"RTN","PRSPSAP1",149,0)
 S DIR(0)="Y"
"RTN","PRSPSAP1",150,0)
 S DIR("?")="Enter NO to continue editing this part-time physician."
"RTN","PRSPSAP1",151,0)
 S DIR("?",1)="Not all days are marked with a status.  Answer YES to"
"RTN","PRSPSAP1",152,0)
 S DIR("?",2)="ignore these days and move past this part-time physician."
"RTN","PRSPSAP1",153,0)
 S DIR("A")="Are you done with this employee"
"RTN","PRSPSAP1",154,0)
 D ^DIR
"RTN","PRSPSAP1",155,0)
 S MOVEON=$G(Y)
"RTN","PRSPSAP1",156,0)
 I $G(DIRUT) S MOVEON=1
"RTN","PRSPSAP1",157,0)
 Q MOVEON
"RTN","PRSPSAP2")
0^49^B50229463^n/a
"RTN","PRSPSAP2",1,0)
PRSPSAP2 ;WOIFO/JAH - Supervisor Approve-update pt phys timecard ;7/26/05
"RTN","PRSPSAP2",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSAP2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSAP2",4,0)
 Q
"RTN","PRSPSAP2",5,0)
TRANSACT ; TRANSfer ACTions to the database
"RTN","PRSPSAP2",6,0)
 ;  loop thru temp and update the time card and the ESR day stats
"RTN","PRSPSAP2",7,0)
 N ACT,PRSIEN,PPI,PRSD
"RTN","PRSPSAP2",8,0)
 S PRSIEN=""
"RTN","PRSPSAP2",9,0)
 F  S PRSIEN=$O(^TMP($J,"PRSPSAP",PRSIEN)) Q:PRSIEN'>0  D
"RTN","PRSPSAP2",10,0)
 .  S PPI=0
"RTN","PRSPSAP2",11,0)
 .  F  S PPI=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI)) Q:PPI'>0  D
"RTN","PRSPSAP2",12,0)
 ..     S PRSD=0
"RTN","PRSPSAP2",13,0)
 ..     F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAP2",14,0)
 ...       S ACT=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1))
"RTN","PRSPSAP2",15,0)
 ...;      Ignore ESR days that the superV skipped or bypassed.
"RTN","PRSPSAP2",16,0)
 ...       Q:(ACT="")!(ACT="B")
"RTN","PRSPSAP2",17,0)
 ...;
"RTN","PRSPSAP2",18,0)
 ...;      set ESR day status to resubmit and add remarks
"RTN","PRSPSAP2",19,0)
 ...       I ACT="R" D
"RTN","PRSPSAP2",20,0)
 ....          S REM=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,2))
"RTN","PRSPSAP2",21,0)
 ....          D UPESR(PRSIEN,PPI,PRSD,ACT,REM)
"RTN","PRSPSAP2",22,0)
 ...       E  D
"RTN","PRSPSAP2",23,0)
 ....; try to update the timecard and the ESR
"RTN","PRSPSAP2",24,0)
 ....          N CAN S (CAN("CB"),CAN("AE"))=0
"RTN","PRSPSAP2",25,0)
 ....          D UPTCARD(.CAN,PRSIEN,PPI,PRSD)
"RTN","PRSPSAP2",26,0)
 ....          I CAN("AE") D UPESR(PRSIEN,PPI,PRSD,ACT,"")
"RTN","PRSPSAP2",27,0)
 ....          I CAN("CB") D PTP^PRSASR1(PRSIEN,PPI)
"RTN","PRSPSAP2",28,0)
 Q
"RTN","PRSPSAP2",29,0)
UPESR(PRSIEN,PPI,PRSD,ACT,REM) ; update ESR with either Resubmit OR Approve
"RTN","PRSPSAP2",30,0)
 N PRSFDA,IENS
"RTN","PRSPSAP2",31,0)
 ;
"RTN","PRSPSAP2",32,0)
 ; update ESR status and display any filing errors
"RTN","PRSPSAP2",33,0)
 ;
"RTN","PRSPSAP2",34,0)
 S IENS=PRSD_","_PRSIEN_","_PPI_","
"RTN","PRSPSAP2",35,0)
 S PRSFDA(458.02,IENS,146)=$S(ACT="A":"APPROVED",1:"RESUBMIT")
"RTN","PRSPSAP2",36,0)
 I $G(REM)'="" S PRSFDA(458.02,IENS,148)=REM
"RTN","PRSPSAP2",37,0)
 D FILE^DIE("E","PRSFDA")
"RTN","PRSPSAP2",38,0)
 D MSG^DIALOG()
"RTN","PRSPSAP2",39,0)
 Q
"RTN","PRSPSAP2",40,0)
 ;
"RTN","PRSPSAP2",41,0)
UPTCARD(CAN,PRSIEN,PPI,PRSD) ; UPDATE A TIME CARD 
"RTN","PRSPSAP2",42,0)
 ;               WITH ESR LEAVE EXCEPTIONS AND HOLIDAY X
"RTN","PRSPSAP2",43,0)
 ; Return CAN by reference.
"RTN","PRSPSAP2",44,0)
 ;   CAN("AE") "CAN APPROVE ESR" is set to true if the ESR can be 
"RTN","PRSPSAP2",45,0)
 ;             approved.  i.e. timecard status is T-timekeep or there's
"RTN","PRSPSAP2",46,0)
 ;             no affect on the timecard
"RTN","PRSPSAP2",47,0)
 ;   CAN("CB") "CAN CALL BANK" is set to true when a call should be 
"RTN","PRSPSAP2",48,0)
 ;             made to the hours bank API (PTP^PRSASR1).
"RTN","PRSPSAP2",49,0)
 ;             Calling routines must consider the order in which
"RTN","PRSPSAP2",50,0)
 ;             to APPROVE ESR and CALL HOURS BANK since the API 
"RTN","PRSPSAP2",51,0)
 ;             PTP^PRSASR, will only count hrs with an approved status.
"RTN","PRSPSAP2",52,0)
 ;
"RTN","PRSPSAP2",53,0)
 ;458.02 (DAY MULTIPLE)
"RTN","PRSPSAP2",54,0)
 ; FIELD:   10  TOUR LAST POSTED BY^P200
"RTN","PRSPSAP2",55,0)
 ;                identifies last person to post a tour for employee
"RTN","PRSPSAP2",56,0)
 ;          101  POSTING STATUS^S^T:TIMEKEEPER POSTED;
"RTN","PRSPSAP2",57,0)
 ;               P:PAYROLL REVIEWED;X:TRANSMITTED;
"RTN","PRSPSAP2",58,0)
 ;          102  TIMEKEEPER POSTING^P200'^VA(200,
"RTN","PRSPSAP2",59,0)
 ;          103  TK DATE/TIME ENTERED^DATE
"RTN","PRSPSAP2",60,0)
 ;          104  POSTING TYPE^S^1:WORKED ENTIRE TOUR;
"RTN","PRSPSAP2",61,0)
 ;               2:ABSENT ENTIRE TOUR;3:IRREGULAR TOUR;
"RTN","PRSPSAP2",62,0)
 N TCN,ESRN,POST,PSTDT,POSTER,PTYPE
"RTN","PRSPSAP2",63,0)
 N TCSTAT,DYSTAT,DUMB,POSTYPE,TOD,EARY,ERRORS
"RTN","PRSPSAP2",64,0)
 S (CAN("CB"),CAN("AE"))=0
"RTN","PRSPSAP2",65,0)
 ;get the raw posting from the ESR
"RTN","PRSPSAP2",66,0)
 S ESRN=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5))
"RTN","PRSPSAP2",67,0)
 ; day signed on ESR with no work OR get the work segments
"RTN","PRSPSAP2",68,0)
 I $P(ESRN,U)'="" S ESRN=$$GETAPTM(ESRN)
"RTN","PRSPSAP2",69,0)
 ;get the timecard node
"RTN","PRSPSAP2",70,0)
 S TCN=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,2))
"RTN","PRSPSAP2",71,0)
 S POST=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,10))
"RTN","PRSPSAP2",72,0)
 S PSTDT=$P(POST,U)
"RTN","PRSPSAP2",73,0)
 S DYSTAT=$P(POST,U,2)
"RTN","PRSPSAP2",74,0)
 S POSTER=$P(POST,U,3)
"RTN","PRSPSAP2",75,0)
 S POSTYPE=$P(POST,U,4)
"RTN","PRSPSAP2",76,0)
 ; if the timecard is still with timekeep it can be updated.
"RTN","PRSPSAP2",77,0)
 S TCSTAT=$$TCSTAT(PPI,PRSIEN)
"RTN","PRSPSAP2",78,0)
 I TCSTAT="T" D
"RTN","PRSPSAP2",79,0)
 .   S CAN("AE")=1,CAN("CB")=0
"RTN","PRSPSAP2",80,0)
 .   D EDTCARD(PPI,PRSIEN,PRSD,ESRN)
"RTN","PRSPSAP2",81,0)
 E  D
"RTN","PRSPSAP2",82,0)
 . ;if timecard is in a payroll or transmit we can check
"RTN","PRSPSAP2",83,0)
 . ; for any affect to TimeCard from the ESR.  If none
"RTN","PRSPSAP2",84,0)
 .;  we can update the ESR to approved and we should make a
"RTN","PRSPSAP2",85,0)
 .; a call to the hours bank after ESR is set to apporved
"RTN","PRSPSAP2",86,0)
 .; the hours bank and quit
"RTN","PRSPSAP2",87,0)
 .; otherwise we have to either return timecard or do corrcted timecard
"RTN","PRSPSAP2",88,0)
 .;  
"RTN","PRSPSAP2",89,0)
 .;  If timecard has no postings and ESR has no exceptions
"RTN","PRSPSAP2",90,0)
 .;  the ESR can be approved since no change to timecard is necessary
"RTN","PRSPSAP2",91,0)
 .  I ESRN=""&(TCN="") S (CAN("AE"),CAN("CB"))=1 Q
"RTN","PRSPSAP2",92,0)
 .;
"RTN","PRSPSAP2",93,0)
 .; if ESR matches Timecard, update ESR no Timecard update necessary
"RTN","PRSPSAP2",94,0)
 .  D CMPESRTC^PRSPSAP3(.ERRORS,.EARY,"","",PPI,PRSIEN,PRSD)
"RTN","PRSPSAP2",95,0)
 .  I ERRORS=0 S (CAN("AE"),CAN("CB"))=1 Q
"RTN","PRSPSAP2",96,0)
 .  I "^P^X^"["^"_TCSTAT_"^" S (CAN("AE"),CAN("CB"))=0 D  Q
"RTN","PRSPSAP2",97,0)
 ..    D CANTPOST^PRSPSAP3(.EARY,TCSTAT,PPI,PRSIEN,PRSD,ESRN)
"RTN","PRSPSAP2",98,0)
 ..    S DUMB=$$ASK^PRSLIB00(1)
"RTN","PRSPSAP2",99,0)
 Q
"RTN","PRSPSAP2",100,0)
EDTCARD(PPI,PRSIEN,PRSD,ESRN) ; edit the timecard
"RTN","PRSPSAP2",101,0)
 ;
"RTN","PRSPSAP2",102,0)
 N EDTSTR,CLEAR,POSTTIME,PRSFDA,IENS
"RTN","PRSPSAP2",103,0)
 ;
"RTN","PRSPSAP2",104,0)
 ; if there's no work, no leave or only RG then ptp gets credit for
"RTN","PRSPSAP2",105,0)
 ; entire day, otherwise we have some exceptions.  If the physician
"RTN","PRSPSAP2",106,0)
 ; used leave the entire day then don't post meal and set ptype=2
"RTN","PRSPSAP2",107,0)
 ;
"RTN","PRSPSAP2",108,0)
 S CLEAR=$$CLRTCDY^PRSPSAPU(PPI,PRSIEN,PRSD,5)
"RTN","PRSPSAP2",109,0)
 S PTYPE=$S($P(ESRN,U)="":1,1:3)
"RTN","PRSPSAP2",110,0)
 I PTYPE=3 D
"RTN","PRSPSAP2",111,0)
 .  I $$ABSENT(ESRN,PPI,PRSIEN,PRSD) S PTYPE=2
"RTN","PRSPSAP2",112,0)
 .  S TCN=$$ESR2TC(ESRN,PTYPE)
"RTN","PRSPSAP2",113,0)
 .; update the timecard with a global set
"RTN","PRSPSAP2",114,0)
 .  S ^PRST(458,PPI,"E",PRSIEN,"D",PRSD,2)=TCN
"RTN","PRSPSAP2",115,0)
 ;
"RTN","PRSPSAP2",116,0)
 ; update timecard status
"RTN","PRSPSAP2",117,0)
 N %,X,%I,%H D NOW^%DTC S POSTTIME=%
"RTN","PRSPSAP2",118,0)
 ;
"RTN","PRSPSAP2",119,0)
 ; update timecard status and display any filing errors
"RTN","PRSPSAP2",120,0)
 ;
"RTN","PRSPSAP2",121,0)
 S IENS=PRSD_","_PRSIEN_","_PPI_","
"RTN","PRSPSAP2",122,0)
 S PRSFDA(458.02,IENS,101)="T"
"RTN","PRSPSAP2",123,0)
 S PRSFDA(458.02,IENS,102)=DUZ
"RTN","PRSPSAP2",124,0)
 S PRSFDA(458.02,IENS,103)=POSTTIME
"RTN","PRSPSAP2",125,0)
 S PRSFDA(458.02,IENS,104)=PTYPE
"RTN","PRSPSAP2",126,0)
 D FILE^DIE("","PRSFDA")
"RTN","PRSPSAP2",127,0)
 D MSG^DIALOG()
"RTN","PRSPSAP2",128,0)
 Q
"RTN","PRSPSAP2",129,0)
 ;
"RTN","PRSPSAP2",130,0)
ESR2TC(ESRN,PT) ;CONVERT ESR DATA TO TIMECARD FORMAT
"RTN","PRSPSAP2",131,0)
 ;
"RTN","PRSPSAP2",132,0)
 N ESR2TC,TCS,I,TSEG,ST,EN,TT,RE,ML,TCN
"RTN","PRSPSAP2",133,0)
 ;
"RTN","PRSPSAP2",134,0)
 S TCN=""
"RTN","PRSPSAP2",135,0)
 F I=1:5:31 D
"RTN","PRSPSAP2",136,0)
 .  S TSEG=$P(ESRN,U,I,I+4)
"RTN","PRSPSAP2",137,0)
 .    S ST=$P(TSEG,U)
"RTN","PRSPSAP2",138,0)
 .    Q:ST=""
"RTN","PRSPSAP2",139,0)
 .    S EN=$P(TSEG,U,2)
"RTN","PRSPSAP2",140,0)
 .    S TT=$P(TSEG,U,3)
"RTN","PRSPSAP2",141,0)
 .    S RE=$P(TSEG,U,4)
"RTN","PRSPSAP2",142,0)
 .    S ML=$P(TSEG,U,5)
"RTN","PRSPSAP2",143,0)
 .;   if meal posted remove it from leave end time
"RTN","PRSPSAP2",144,0)
 .    I (PT=3)&(ML>0) S EN=$$ENDML(EN,ML)
"RTN","PRSPSAP2",145,0)
 .    S:$G(TCN)'="" TCN=TCN_"^"
"RTN","PRSPSAP2",146,0)
 .    S TCS=ST_U_EN_U_TT_U_RE
"RTN","PRSPSAP2",147,0)
 .    S TCN=TCN_TCS
"RTN","PRSPSAP2",148,0)
 ; REMOVE A TRAILING UPARROW GENERATED BY NULL REMARKS CODE
"RTN","PRSPSAP2",149,0)
 I $E(TCN,$L(TCN))=U S TCN=$E(TCN,1,$L(TCN)-1)
"RTN","PRSPSAP2",150,0)
 Q TCN
"RTN","PRSPSAP2",151,0)
 ;
"RTN","PRSPSAP2",152,0)
 ;
"RTN","PRSPSAP2",153,0)
ABSENT(ESRN,PPI,PRSIEN,PRSD) ;return true if the ESR posting matches all
"RTN","PRSPSAP2",154,0)
 ; the tour start and stop times and uses only one type of leave and
"RTN","PRSPSAP2",155,0)
 ; the meal matches the tours meal.
"RTN","PRSPSAP2",156,0)
 ; i.e. ESR posting equivalent to absent entire tour question.
"RTN","PRSPSAP2",157,0)
 ;
"RTN","PRSPSAP2",158,0)
 N TR1,TR2,TR1ML,TR2ML,TRMEAL,LASTTT,MULTITT,NODE0,RETURN,TCT
"RTN","PRSPSAP2",159,0)
 N TCS,I,TSEG,ST,EN,TT,ML,TCTOUR,ESRTOUR
"RTN","PRSPSAP2",160,0)
 ;
"RTN","PRSPSAP2",161,0)
 S (ESRTOUR,LASTTT)="",(MULTITT,ML,RETURN)=0
"RTN","PRSPSAP2",162,0)
 F I=1:5:31 D
"RTN","PRSPSAP2",163,0)
 .  S TSEG=$P(ESRN,U,I,I+4)
"RTN","PRSPSAP2",164,0)
 .    S ST=$P(TSEG,U)
"RTN","PRSPSAP2",165,0)
 .    Q:ST=""
"RTN","PRSPSAP2",166,0)
 .    S EN=$P(TSEG,U,2)
"RTN","PRSPSAP2",167,0)
 .    S TT=$P(TSEG,U,3)
"RTN","PRSPSAP2",168,0)
 .    I LASTTT="" D
"RTN","PRSPSAP2",169,0)
 ..      S LASTTT=TT
"RTN","PRSPSAP2",170,0)
 .    E  D
"RTN","PRSPSAP2",171,0)
 ..      I LASTTT'=TT S MULTITT=1
"RTN","PRSPSAP2",172,0)
 .    S ML=ML+$P(TSEG,U,5)
"RTN","PRSPSAP2",173,0)
 .    S:$G(ESRTOUR)'="" ESRTOUR=ESRTOUR_"^"
"RTN","PRSPSAP2",174,0)
 .    S TCS=ST_U_EN
"RTN","PRSPSAP2",175,0)
 .    S ESRTOUR=ESRTOUR_TCS
"RTN","PRSPSAP2",176,0)
 ; REMOVE A TRAILING UPARROW GENERATED BY NULL REMARKS CODE
"RTN","PRSPSAP2",177,0)
 I $E(ESRTOUR,$L(ESRTOUR))=U S ESRTOUR=$E(ESRTOUR,1,$L(ESRTOUR)-1)
"RTN","PRSPSAP2",178,0)
 ;
"RTN","PRSPSAP2",179,0)
 ;
"RTN","PRSPSAP2",180,0)
 S TCT=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,1))
"RTN","PRSPSAP2",181,0)
 S NODE0=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0))
"RTN","PRSPSAP2",182,0)
 S (TR1ML,TR2ML)=0
"RTN","PRSPSAP2",183,0)
 S TR1=$P(NODE0,U,2) I TR1>0 S TR1ML=$P($G(^PRST(457.1,TR1,0)),U,3)
"RTN","PRSPSAP2",184,0)
 S TR2=$P(NODE0,U,15) I TR2>0 S TR2ML=$P($G(^PRST(457.1,TR2,0)),U,3)
"RTN","PRSPSAP2",185,0)
 S TRMEAL=TR1ML+TR2ML
"RTN","PRSPSAP2",186,0)
 S TCTOUR=""
"RTN","PRSPSAP2",187,0)
 F I=1:3:31 D
"RTN","PRSPSAP2",188,0)
 .  S TSEG=$P(TCT,U,I,I+4)
"RTN","PRSPSAP2",189,0)
 .    S ST=$P(TSEG,U)
"RTN","PRSPSAP2",190,0)
 .    Q:ST=""
"RTN","PRSPSAP2",191,0)
 .    S EN=$P(TSEG,U,2)
"RTN","PRSPSAP2",192,0)
 .    S:$G(TCTOUR)'="" TCTOUR=TCTOUR_"^"
"RTN","PRSPSAP2",193,0)
 .    S TCS=ST_U_EN
"RTN","PRSPSAP2",194,0)
 .    S TCTOUR=TCTOUR_TCS
"RTN","PRSPSAP2",195,0)
 I (TCTOUR=ESRTOUR)&('MULTITT)&(TRMEAL=ML) S RETURN=1
"RTN","PRSPSAP2",196,0)
 Q RETURN
"RTN","PRSPSAP2",197,0)
 ;
"RTN","PRSPSAP2",198,0)
ENDML(END,MEAL) ;GET AN END TIME AND DEDUCT THE MEAL FROM IT
"RTN","PRSPSAP2",199,0)
 ;
"RTN","PRSPSAP2",200,0)
 N X
"RTN","PRSPSAP2",201,0)
 ; quit if we aint gots a good enought end time.
"RTN","PRSPSAP2",202,0)
 Q:($G(END)'?2N.P.2N.A)&(END'="MID")&(END'="NOON") $G(END)
"RTN","PRSPSAP2",203,0)
 S END=$$TWENTY4^PRSPESR2(END)
"RTN","PRSPSAP2",204,0)
 S END=$E(END,1,2)_":"_$E(END,3,4)
"RTN","PRSPSAP2",205,0)
 S END=$$MEALCUT(END,MEAL)
"RTN","PRSPSAP2",206,0)
 ; Convert back to form stored in 458 start stop times
"RTN","PRSPSAP2",207,0)
 S X=END D ^PRSATIM S END=X
"RTN","PRSPSAP2",208,0)
 Q END
"RTN","PRSPSAP2",209,0)
 ;
"RTN","PRSPSAP2",210,0)
MEALCUT(HHMM,MEAL) ;Subtract meal time from the end time
"RTN","PRSPSAP2",211,0)
 ; (subtract a 15 minute increment from length of time
"RTN","PRSPSAP2",212,0)
 ; in hh:mm format, i.e. hh:mm - mm
"RTN","PRSPSAP2",213,0)
 ;
"RTN","PRSPSAP2",214,0)
 N X,Y,DECR,OBJ,I,HH,MM
"RTN","PRSPSAP2",215,0)
 S MM=$P(HHMM,":",2) ; get minutes
"RTN","PRSPSAP2",216,0)
 ; quit minutes or meal not quarter hours
"RTN","PRSPSAP2",217,0)
 Q:(MM#15'=0&(+MM)!((MEAL#15)'=0&(+MEAL))) HHMM
"RTN","PRSPSAP2",218,0)
 ; get hours
"RTN","PRSPSAP2",219,0)
 S HH=$P(HHMM,":")
"RTN","PRSPSAP2",220,0)
 ;
"RTN","PRSPSAP2",221,0)
 ; convert segment minutes and meal to a digit.
"RTN","PRSPSAP2",222,0)
 ;
"RTN","PRSPSAP2",223,0)
 S X=MM D MEALIN^PRSPESR2 S OBJ=X
"RTN","PRSPSAP2",224,0)
 S X=$G(MEAL) D MEALIN^PRSPESR2 S DECR=X
"RTN","PRSPSAP2",225,0)
 I OBJ=0 S OBJ=4
"RTN","PRSPSAP2",226,0)
 F I=1:1:DECR D
"RTN","PRSPSAP2",227,0)
 .  I OBJ=4 D
"RTN","PRSPSAP2",228,0)
 ..    I +HH=0 D
"RTN","PRSPSAP2",229,0)
 ...     S HH=23
"RTN","PRSPSAP2",230,0)
 ..    E  D
"RTN","PRSPSAP2",231,0)
 ...     S HH="0"_(+HH-1) S HH=$E(HH,$L(HH)-1,$L(HH))
"RTN","PRSPSAP2",232,0)
 . S OBJ=$S(OBJ=4:3,OBJ=3:2,OBJ=2:1,OBJ=1:4)
"RTN","PRSPSAP2",233,0)
 S MM=$S(OBJ=1:15,OBJ=2:30,OBJ=3:45,1:"00")
"RTN","PRSPSAP2",234,0)
 ;
"RTN","PRSPSAP2",235,0)
 Q HH_MM
"RTN","PRSPSAP2",236,0)
 ;
"RTN","PRSPSAP2",237,0)
TCSTAT(PPI,PRSIEN) ; get timecard status
"RTN","PRSPSAP2",238,0)
 Q:(PPI'>0)!(PRSIEN'>0) 0
"RTN","PRSPSAP2",239,0)
 Q $P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)
"RTN","PRSPSAP2",240,0)
 ;
"RTN","PRSPSAP2",241,0)
GETAPTM(WORK) ; return the work node with only the time that should
"RTN","PRSPSAP2",242,0)
 ; be posted to a PTP's timecard
"RTN","PRSPSAP2",243,0)
 ; INPUT: WORK : ESR work node
"RTN","PRSPSAP2",244,0)
 ; RETURN ESRN : ESR node with only time applicable to PTP's 
"RTN","PRSPSAP2",245,0)
 ; 
"RTN","PRSPSAP2",246,0)
 N I,TSEG
"RTN","PRSPSAP2",247,0)
 S TCN=""
"RTN","PRSPSAP2",248,0)
 F I=1:5:31 D
"RTN","PRSPSAP2",249,0)
 .  S TSEG=$P(WORK,U,I,I+4)
"RTN","PRSPSAP2",250,0)
 .  S TT=$P(TSEG,U,3)
"RTN","PRSPSAP2",251,0)
 .  Q:TSEG="^^^^"!("^HX^AL^AA^DL^ML^RL^SL^CB^AD^WP^TR^TV^"'[(U_TT_U))
"RTN","PRSPSAP2",252,0)
 .  S TCN=TCN_TSEG_"^"
"RTN","PRSPSAP2",253,0)
 Q TCN
"RTN","PRSPSAP2",254,0)
 ;
"RTN","PRSPSAP2",255,0)
 ;
"RTN","PRSPSAP3")
0^55^B49966570^n/a
"RTN","PRSPSAP3",1,0)
PRSPSAP3 ;WOIFO/JAH - Supervisor Approve-update pt phys timecard ;01/05/05
"RTN","PRSPSAP3",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSAP3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSAP3",4,0)
 Q
"RTN","PRSPSAP3",5,0)
MARK(ACT,PRSIEN,PPI) ; mark supervisors action on temp global
"RTN","PRSPSAP3",6,0)
 ; ESR STATUS
"RTN","PRSPSAP3",7,0)
 ; when updating a single record we overwrite.  When updating
"RTN","PRSPSAP3",8,0)
 ; multiple records we will only update ones with no status.
"RTN","PRSPSAP3",9,0)
 N ITEM,OLDACT,REM,OLDREM
"RTN","PRSPSAP3",10,0)
 S ITEM=$P($G(ACT),U,2)
"RTN","PRSPSAP3",11,0)
 S ACT=$P($G(ACT),U)
"RTN","PRSPSAP3",12,0)
 I ITEM>0 D
"RTN","PRSPSAP3",13,0)
 .  S PRSD=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,"B",ITEM))
"RTN","PRSPSAP3",14,0)
 .  S ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1)=ACT
"RTN","PRSPSAP3",15,0)
 .;  add remarks to the resubmit action, otherwise remove old remarks
"RTN","PRSPSAP3",16,0)
 .  I ACT="R" D
"RTN","PRSPSAP3",17,0)
 ..    S OLDREM=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,2))
"RTN","PRSPSAP3",18,0)
 ..    S REM=$$GETREM(OLDREM)
"RTN","PRSPSAP3",19,0)
 ..    I REM'="^" S ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,2)=$G(REM)
"RTN","PRSPSAP3",20,0)
 .  E  D
"RTN","PRSPSAP3",21,0)
 ..    K ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,2)
"RTN","PRSPSAP3",22,0)
 E  D
"RTN","PRSPSAP3",23,0)
 .  I ACT="R" S REM=$$GETREM()
"RTN","PRSPSAP3",24,0)
 .  S PRSD=0
"RTN","PRSPSAP3",25,0)
 .  F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAP3",26,0)
 ..   S OLDACT=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1))
"RTN","PRSPSAP3",27,0)
 ..   I OLDACT="" D
"RTN","PRSPSAP3",28,0)
 ...     S ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,1)=ACT
"RTN","PRSPSAP3",29,0)
 ...     I $G(ACT)="R" S ^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD,2)=$G(REM)
"RTN","PRSPSAP3",30,0)
 Q
"RTN","PRSPSAP3",31,0)
GETREM(SNIDE) ; return supervisor remark for a resubmit request
"RTN","PRSPSAP3",32,0)
 ; WE CAN'T EDIT THE FIELD DIRECTLY BECAUSE THIS IS A TRANSACTION
"RTN","PRSPSAP3",33,0)
 ; AND NOTHING IS COMMITED TO THE DB UNTIL THEY SIGN
"RTN","PRSPSAP3",34,0)
 N DIR,DIRUT,REM,DTOUT,DUOUT,X,Y
"RTN","PRSPSAP3",35,0)
 S REM=""
"RTN","PRSPSAP3",36,0)
 S DIR(0)="458.02,148^O"
"RTN","PRSPSAP3",37,0)
 I $G(SNIDE)'="" S DIR("B")=SNIDE
"RTN","PRSPSAP3",38,0)
 S DIR("A")="Enter Remarks"
"RTN","PRSPSAP3",39,0)
 D ^DIR
"RTN","PRSPSAP3",40,0)
 S REM=$G(Y)
"RTN","PRSPSAP3",41,0)
 I $D(DTOUT)!$D(DUOUT) S REM="^"
"RTN","PRSPSAP3",42,0)
 Q REM
"RTN","PRSPSAP3",43,0)
 ;
"RTN","PRSPSAP3",44,0)
CANTPOST(ER,TCS,PPI,PRSIEN,PRSD,ESRN) ; GIVE SUPERVISOR CAN'T POST INFORMATION
"RTN","PRSPSAP3",45,0)
 ;
"RTN","PRSPSAP3",46,0)
 N I,LNCNT
"RTN","PRSPSAP3",47,0)
 D HDR(PRSIEN,PPI,PRSD)
"RTN","PRSPSAP3",48,0)
 W !!,"Time Discrepancies must be resolved.    Timecard Status: "
"RTN","PRSPSAP3",49,0)
 W $S(TCS="P":"RELEASED TO PAYROLL",1:"TRANSMITTED TO AUSTIN")
"RTN","PRSPSAP3",50,0)
 W !,"Payroll must "
"RTN","PRSPSAP3",51,0)
 W $S(TCS="P":"return ",1:"initiate corrected ")
"RTN","PRSPSAP3",52,0)
 W "timecard or physician must resubmit ESR."
"RTN","PRSPSAP3",53,0)
 ;
"RTN","PRSPSAP3",54,0)
 W !!!,$$ASK^PRSLIB00(1)
"RTN","PRSPSAP3",55,0)
 D HDR(PRSIEN,PPI,PRSD)
"RTN","PRSPSAP3",56,0)
 ;
"RTN","PRSPSAP3",57,0)
 ;
"RTN","PRSPSAP3",58,0)
 W !!,?15,"TIME DISCREPANCIES BETWEEN TIMECARD AND ESR"
"RTN","PRSPSAP3",59,0)
 ;W !,?15,"-------------------------------------------"
"RTN","PRSPSAP3",60,0)
 W !,?6,"Error",?21,"Type of Time",?39,"Timecard Hrs",?57,"ESR Hrs"
"RTN","PRSPSAP3",61,0)
 W !,?2,"--------------------------------------------------------------"
"RTN","PRSPSAP3",62,0)
 S I=0 F  S I=$O(ER(I)) Q:I'>0  D
"RTN","PRSPSAP3",63,0)
 . W !,?2,$P(ER(I),U,2),?26,$P(ER(I),U),?44,$P(ER(I),U,3),?60,$P(ER(I),U,4)
"RTN","PRSPSAP3",64,0)
 ;
"RTN","PRSPSAP3",65,0)
 W !!,?32,"ESR POSTING"
"RTN","PRSPSAP3",66,0)
 ;W !,?32,"-----------"
"RTN","PRSPSAP3",67,0)
 N ESR,DAYLNS,DTE,PDT,DAY
"RTN","PRSPSAP3",68,0)
 S PDT=$G(^PRST(458,PPI,2))
"RTN","PRSPSAP3",69,0)
 S DTE=$P(PDT,U,PRSD)
"RTN","PRSPSAP3",70,0)
 D GETESR^PRSPSAP1(.ESR,PPI,PRSIEN,PRSD)
"RTN","PRSPSAP3",71,0)
 D COLHDRS^PRSPSAP1
"RTN","PRSPSAP3",72,0)
 W ! F I=1:1:(IOM-1) W "-"
"RTN","PRSPSAP3",73,0)
 W ! D DAY^PRSPSAPU(.DAYLNS,PRSD_"^"_DTE,.ESR,PRSIEN,PPI)
"RTN","PRSPSAP3",74,0)
 W !!,?30,"TIMECARD POSTING"
"RTN","PRSPSAP3",75,0)
 ;W !,?30,"----------------"
"RTN","PRSPSAP3",76,0)
 W !,?7,"Date",?21,"Scheduled Tour",?46,"Tour Exceptions"
"RTN","PRSPSAP3",77,0)
 W !,?2,"------------------------------------------------------------"
"RTN","PRSPSAP3",78,0)
 N DFN S DAY=PRSD,DFN=PRSIEN D F0^PRSADP1
"RTN","PRSPSAP3",79,0)
 W !
"RTN","PRSPSAP3",80,0)
 Q
"RTN","PRSPSAP3",81,0)
 ;
"RTN","PRSPSAP3",82,0)
HDR(PRSIEN,PPI,PRSD) ;
"RTN","PRSPSAP3",83,0)
 W @IOF,!!,"ESR approval REJECTED for "
"RTN","PRSPSAP3",84,0)
 W $P($G(^PRSPC(PRSIEN,0)),"^")," on day ",PRSD," in PP "
"RTN","PRSPSAP3",85,0)
 W $P($G(^PRST(458,PPI,0)),U),"."
"RTN","PRSPSAP3",86,0)
 Q
"RTN","PRSPSAP3",87,0)
 ;
"RTN","PRSPSAP3",88,0)
 ;===================================================================
"RTN","PRSPSAP3",89,0)
 ;
"RTN","PRSPSAP3",90,0)
CMPESRTC(ERCNT,ERMSG,ESRN,TCN,PPI,PRSIEN,PRSD) ;compare the ESR to the timecard
"RTN","PRSPSAP3",91,0)
 ;
"RTN","PRSPSAP3",92,0)
 ; OUTPUT VARIABLE
"RTN","PRSPSAP3",93,0)
 ;
"RTN","PRSPSAP3",94,0)
 ;  ERMSG: Array of mismatches in a 4 piece ^ message format
"RTN","PRSPSAP3",95,0)
 ;          type of time ^ message ^ timecard total ^ ESR total
"RTN","PRSPSAP3",96,0)
 ;
"RTN","PRSPSAP3",97,0)
 ; LOCAL VARS
"RTN","PRSPSAP3",98,0)
 ;   TT : Type of time code from type of time file (2 exceptions for
"RTN","PRSPSAP3",99,0)
 ;        WP on timecard with remark 3, awol is "WPAWOL" OR
"RTN","PRSPSAP3",100,0)
 ;        remarks 4, on suspension is "WPSUSP")
"RTN","PRSPSAP3",101,0)
 ;   ERFND : flag that some mismatch was found
"RTN","PRSPSAP3",102,0)
 ;   ESRT
"RTN","PRSPSAP3",103,0)
 ;   TCT   : total time 
"RTN","PRSPSAP3",104,0)
 ;
"RTN","PRSPSAP3",105,0)
 N TT,ERFND,ESRT,TCT,PRSTA
"RTN","PRSPSAP3",106,0)
 ;
"RTN","PRSPSAP3",107,0)
 S (ERFND,ERMSG,ERCNT)=0
"RTN","PRSPSAP3",108,0)
 I ($G(PPI)'>0)!($G(PRSIEN)'>0)!($G(PRSD)'>0) D  Q
"RTN","PRSPSAP3",109,0)
 .  S ERMSG=U_"FATAL ERROR: Missing internal lookup parameters."_U_U
"RTN","PRSPSAP3",110,0)
 I $G(ESRN)="" S ESRN=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,5))
"RTN","PRSPSAP3",111,0)
 I $G(TCN)="" S TCN=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,2))
"RTN","PRSPSAP3",112,0)
 D ESRTCAR(.PRSTA,ESRN,TCN,PPI,PRSIEN,PRSD)
"RTN","PRSPSAP3",113,0)
 ;
"RTN","PRSPSAP3",114,0)
 ;
"RTN","PRSPSAP3",115,0)
 ; Check for any leave posting mismatch (IGNORE WPAWOL, WPSUSP, RG)
"RTN","PRSPSAP3",116,0)
 S TT=""
"RTN","PRSPSAP3",117,0)
 F  S TT=$O(PRSTA(TT)) Q:TT=""  D
"RTN","PRSPSAP3",118,0)
 . Q:"^HX^AL^AA^DL^ML^RL^SL^CB^AD^WP^TR^TV^"'[(U_TT_U)
"RTN","PRSPSAP3",119,0)
 . S TCT=+$P(PRSTA(TT),U),ESRT=+$P(PRSTA(TT),U,2)
"RTN","PRSPSAP3",120,0)
 . I TCT'=ESRT D
"RTN","PRSPSAP3",121,0)
 ..   S ERCNT=ERCNT+1
"RTN","PRSPSAP3",122,0)
 ..   S ERMSG(ERCNT)=TT_U_"LEAVE mismatch"_U_TCT_U_ESRT,ERFND=1
"RTN","PRSPSAP3",123,0)
 ;
"RTN","PRSPSAP3",124,0)
 ; Check for problems with NON PAY.  If non pay is on the timecard
"RTN","PRSPSAP3",125,0)
 ; then only NO WORK is accepatable on the ESR.
"RTN","PRSPSAP3",126,0)
 ; 
"RTN","PRSPSAP3",127,0)
 I $P($G(PRSTA("NP")),U)>0 D
"RTN","PRSPSAP3",128,0)
 .  S TT=""
"RTN","PRSPSAP3",129,0)
 .  F  S TT=$O(PRSTA(TT)) Q:TT=""!(ERFND)  D
"RTN","PRSPSAP3",130,0)
 ..   S ESRT=+$P(PRSTA(TT),U,2)
"RTN","PRSPSAP3",131,0)
 ..   I +ESRT>0 D
"RTN","PRSPSAP3",132,0)
 ...  S ERCNT=ERCNT+1
"RTN","PRSPSAP3",133,0)
 ...  S ERMSG(ERCNT)=TT_U_"NON PAY mismatch"_U_U_ESRT
"RTN","PRSPSAP3",134,0)
 Q
"RTN","PRSPSAP3",135,0)
 ; 
"RTN","PRSPSAP3",136,0)
 ;===================================================================
"RTN","PRSPSAP3",137,0)
 ;
"RTN","PRSPSAP3",138,0)
ESRTCAR(PRSTA,ESRN,TCN,PPI,PRSIEN,PRSD) ;
"RTN","PRSPSAP3",139,0)
 ; return an array subscripted by types of time (TT) for each TT
"RTN","PRSPSAP3",140,0)
 ; found in either the ESR or timecard.  Piece 1 of each TT subscript
"RTN","PRSPSAP3",141,0)
 ; represents the timcard and piece 2 represents the ESR.
"RTN","PRSPSAP3",142,0)
 ; Both pieces contain the total hours in decimal format of that TT.
"RTN","PRSPSAP3",143,0)
 ;
"RTN","PRSPSAP3",144,0)
 ;
"RTN","PRSPSAP3",145,0)
 ; loop through the timecard and the ESR totaling the various types of
"RTN","PRSPSAP3",146,0)
 ; time for each.  Exceptions are as follows:
"RTN","PRSPSAP3",147,0)
 ;   1. when timecard has WP with remarks AWOL or On Suspension then
"RTN","PRSPSAP3",148,0)
 ;      don't add to WP total, since this can never be recorded on 
"RTN","PRSPSAP3",149,0)
 ;      the ESR, instead store on special node ("WPAWOL") or ("WPSUSP")
"RTN","PRSPSAP3",150,0)
 ;
"RTN","PRSPSAP3",151,0)
 ; INPUT VARIABLES
"RTN","PRSPSAP3",152,0)
 ;
"RTN","PRSPSAP3",153,0)
 ; ESRN : electronic subsidiary record posting node
"RTN","PRSPSAP3",154,0)
 ; TCN  : timecard posting node
"RTN","PRSPSAP3",155,0)
 ; PPI, PRSIEN, PRSD : package standard
"RTN","PRSPSAP3",156,0)
 ;
"RTN","PRSPSAP3",157,0)
 ; 
"RTN","PRSPSAP3",158,0)
 ;LOCAL variables
"RTN","PRSPSAP3",159,0)
 ;  TCPT  : timecard posting type (worked or absent all day or except) 
"RTN","PRSPSAP3",160,0)
 ;  TOD   : Tour of duty pointer
"RTN","PRSPSAP3",161,0)
 ;  PRSML : Length of meal in minutes
"RTN","PRSPSAP3",162,0)
 ;  PRSTA : Time Array subscripted by type of time code (piece one is
"RTN","PRSPSAP3",163,0)
 ;            the timecard total time and piece 2 is esr total time
"RTN","PRSPSAP3",164,0)
 ;  MTT   : Type of time associated with the meal
"RTN","PRSPSAP3",165,0)
 ;  ZNODE : zero node from timecard for tour pointers and lengths
"RTN","PRSPSAP3",166,0)
 ;  
"RTN","PRSPSAP3",167,0)
 ;
"RTN","PRSPSAP3",168,0)
 N TCPT,TOD,PRSML,ZNODE,T1LEN,T2LEN,NETRG,TCEXAMT
"RTN","PRSPSAP3",169,0)
 N TSEG,TT,BEG,END,MEAL,HRS,SEGHRS,TRC
"RTN","PRSPSAP3",170,0)
 K PRSTA
"RTN","PRSPSAP3",171,0)
 ;
"RTN","PRSPSAP3",172,0)
 S ZNODE=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0))
"RTN","PRSPSAP3",173,0)
 ;
"RTN","PRSPSAP3",174,0)
 ; get tour length in case we need to determine amount of time
"RTN","PRSPSAP3",175,0)
 ; for the tour when we don't have exceptions on the timecard or
"RTN","PRSPSAP3",176,0)
 ; we need the implied RG
"RTN","PRSPSAP3",177,0)
 ;
"RTN","PRSPSAP3",178,0)
 S T1LEN=$P(ZNODE,U,8)
"RTN","PRSPSAP3",179,0)
 S T2LEN=$P(ZNODE,U,14)
"RTN","PRSPSAP3",180,0)
 ;
"RTN","PRSPSAP3",181,0)
 ;
"RTN","PRSPSAP3",182,0)
 ;ESR
"RTN","PRSPSAP3",183,0)
 ;
"RTN","PRSPSAP3",184,0)
 ;
"RTN","PRSPSAP3",185,0)
 F I=1:5:31 D
"RTN","PRSPSAP3",186,0)
 .  S TSEG=$P(ESRN,U,I,I+4)
"RTN","PRSPSAP3",187,0)
 .  S TT=$P(TSEG,U,3)
"RTN","PRSPSAP3",188,0)
 .;
"RTN","PRSPSAP3",189,0)
 .;this line may need to be removed since we are simply looking
"RTN","PRSPSAP3",190,0)
 .; at all types of time at this stage (also would make this call
"RTN","PRSPSAP3",191,0)
 .; more useful as an API to get all types of time)
"RTN","PRSPSAP3",192,0)
 .; 
"RTN","PRSPSAP3",193,0)
 .  Q:"^RG^HX^AL^AA^DL^ML^RL^SL^CB^AD^WP^TR^TV^"'[(U_TT_U)
"RTN","PRSPSAP3",194,0)
 .  S HRS=$P($G(PRSTA(TT)),U,2)
"RTN","PRSPSAP3",195,0)
 .  S BEG=$P(TSEG,U)
"RTN","PRSPSAP3",196,0)
 .  S END=$P(TSEG,U,2)
"RTN","PRSPSAP3",197,0)
 .  S MEAL=$P(TSEG,U,5)
"RTN","PRSPSAP3",198,0)
 .  S SEGHRS=$$AMT^PRSPSAPU(BEG,END,MEAL)
"RTN","PRSPSAP3",199,0)
 .  S $P(PRSTA(TT),U,2)=SEGHRS+HRS
"RTN","PRSPSAP3",200,0)
 ;
"RTN","PRSPSAP3",201,0)
 ; if timecard isn't posted there's no point in going on
"RTN","PRSPSAP3",202,0)
 Q:(+$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,10)),U,2)'>0)
"RTN","PRSPSAP3",203,0)
 ;
"RTN","PRSPSAP3",204,0)
 ;Timecard with exceptions (no full day work or leave)
"RTN","PRSPSAP3",205,0)
 ;
"RTN","PRSPSAP3",206,0)
 S TCPT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,10)),U,4)
"RTN","PRSPSAP3",207,0)
 I '((TCPT=1)!(TCPT=2)) D
"RTN","PRSPSAP3",208,0)
 .  F I=1:4:24 D
"RTN","PRSPSAP3",209,0)
 ..   S TSEG=$P(TCN,U,I,I+3)
"RTN","PRSPSAP3",210,0)
 ..   S TT=$P(TSEG,U,3)
"RTN","PRSPSAP3",211,0)
 ..   S TRC=$P(TSEG,U,4)
"RTN","PRSPSAP3",212,0)
 ..;  check for awol and store separate from other WP
"RTN","PRSPSAP3",213,0)
 ..   I TT="WP" S TT=$S(TRC=3:"WPAWOL",TRC=4:"WPSUSP",1:TT)
"RTN","PRSPSAP3",214,0)
 ..   Q:"^HX^AL^AA^DL^ML^RL^SL^CB^AD^WP^TR^TV^"'[(U_TT_U)
"RTN","PRSPSAP3",215,0)
 ..   S HRS=$P($G(PRSTA(TT)),U)
"RTN","PRSPSAP3",216,0)
 ..   S BEG=$P(TSEG,U)
"RTN","PRSPSAP3",217,0)
 ..   S END=$P(TSEG,U,2)
"RTN","PRSPSAP3",218,0)
 ..   S SEGHRS=$$AMT^PRSPSAPU(BEG,END,0)
"RTN","PRSPSAP3",219,0)
 ..   S $P(PRSTA(TT),U)=SEGHRS+HRS
"RTN","PRSPSAP3",220,0)
 E  D
"RTN","PRSPSAP3",221,0)
 .;
"RTN","PRSPSAP3",222,0)
 .;  if timecard is posted w/exception or work for the full day
"RTN","PRSPSAP3",223,0)
 .;  then use the tour 1 and 2 lengths to record hours
"RTN","PRSPSAP3",224,0)
 .;
"RTN","PRSPSAP3",225,0)
 .  I TCPT=2 D
"RTN","PRSPSAP3",226,0)
 ..;  full day exception posted: get type of time and remarks
"RTN","PRSPSAP3",227,0)
 ..    S TT="" F I=1:4:24 Q:TT'=""  S TT=$P(TCN,U,I+2),TRC=$P(TCN,U,I+3)
"RTN","PRSPSAP3",228,0)
 ..    I TT="WP" S TT=$S(TRC=3:"WPAWOL",TRC=4:"WPSUSP",1:TT)
"RTN","PRSPSAP3",229,0)
 .  ;
"RTN","PRSPSAP3",230,0)
 .  ; full day work
"RTN","PRSPSAP3",231,0)
 .  I TCPT=1 S TT="RG"
"RTN","PRSPSAP3",232,0)
 .;
"RTN","PRSPSAP3",233,0)
 .  S $P(PRSTA(TT),U)=T1LEN+T2LEN
"RTN","PRSPSAP3",234,0)
 ;
"RTN","PRSPSAP3",235,0)
 ; RG should not be coded on the PTP's timecard but we will tabulate
"RTN","PRSPSAP3",236,0)
 ; the implied RG by reducing the tour length by any exceptions totals
"RTN","PRSPSAP3",237,0)
 ;
"RTN","PRSPSAP3",238,0)
 I $P($G(PRSTA("RG")),U)="" D
"RTN","PRSPSAP3",239,0)
 .  S NETRG=T1LEN+T2LEN
"RTN","PRSPSAP3",240,0)
 .  S TT=""
"RTN","PRSPSAP3",241,0)
 .  F  S TT=$O(PRSTA(TT)) Q:TT=""  D
"RTN","PRSPSAP3",242,0)
 ..;  only times that reduce RG are included
"RTN","PRSPSAP3",243,0)
 ..;    (WP, WPAWOL, WPSUSP & NP) reduce RG
"RTN","PRSPSAP3",244,0)
 ..   Q:"^HX^AL^AA^DL^ML^RL^SL^CB^AD^TR^TV^"[(U_TT_U)
"RTN","PRSPSAP3",245,0)
 ..   Q:TT="RG"
"RTN","PRSPSAP3",246,0)
 ..   S TCEXAMT=$P(PRSTA(TT),U)
"RTN","PRSPSAP3",247,0)
 ..   S NETRG=NETRG-TCEXAMT
"RTN","PRSPSAP3",248,0)
 .  S $P(PRSTA("RG"),U)=NETRG
"RTN","PRSPSAP3",249,0)
 ;
"RTN","PRSPSAP3",250,0)
 Q
"RTN","PRSPSAPU")
0^24^B39830658^n/a
"RTN","PRSPSAPU",1,0)
PRSPSAPU ;WOIFO/JAH - PT Physician, supervisor approval utils ;01/22/05
"RTN","PRSPSAPU",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSAPU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSAPU",4,0)
 Q
"RTN","PRSPSAPU",5,0)
ONEPTP(TLE) ; get one or all ptp's from a TLE
"RTN","PRSPSAPU",6,0)
 ; if the selection hasn't a memo or hasn't an ESR to be approved
"RTN","PRSPSAPU",7,0)
 ; then inform and re-ask
"RTN","PRSPSAPU",8,0)
 ; 
"RTN","PRSPSAPU",9,0)
 ; return PRSIEN for successful PTP selection
"RTN","PRSPSAPU",10,0)
 ; return 0 for all PTP's in T&L
"RTN","PRSPSAPU",11,0)
 ; return -1 for abort/timeout
"RTN","PRSPSAPU",12,0)
 ;
"RTN","PRSPSAPU",13,0)
 N ALL,PTP,OUT
"RTN","PRSPSAPU",14,0)
 S (PTP,ALL,OUT)=0
"RTN","PRSPSAPU",15,0)
 F  D  Q:(OUT!(PTP>0)!(ALL))
"RTN","PRSPSAPU",16,0)
 .  S PTP=$$ALL1PTP(TLE)
"RTN","PRSPSAPU",17,0)
 .  I PTP=0 S ALL=1 Q  ; all ptp's were selected
"RTN","PRSPSAPU",18,0)
 .  I PTP<0 S OUT=1 Q  ; user uparrow or timeout
"RTN","PRSPSAPU",19,0)
 .  I PTP>0,'$D(^PRST(458.7,"B",PTP)) W !!,"There are no Service Level Memoranda on file for ",$P(^PRSPC(PTP,0),U) S PTP=0
"RTN","PRSPSAPU",20,0)
 .  I PTP>0,'$D(^PRST(458,"ASA",PTP)) W !!,"There are no daily ESR's pending approval for ",$P(^PRSPC(PTP,0),U) S PTP=0
"RTN","PRSPSAPU",21,0)
 I ALL S PTP=0
"RTN","PRSPSAPU",22,0)
 I OUT S PTP=-1
"RTN","PRSPSAPU",23,0)
 Q PTP
"RTN","PRSPSAPU",24,0)
 ;
"RTN","PRSPSAPU",25,0)
ALL1PTP(TLE) ; ask for one part time physician from a TLE or ALL
"RTN","PRSPSAPU",26,0)
 Q:TLE'>0
"RTN","PRSPSAPU",27,0)
 N DIC,PRSIEN,D,Y,DUOUT,DTOUT
"RTN","PRSPSAPU",28,0)
 S PRSIEN=""
"RTN","PRSPSAPU",29,0)
 S DIC("A")="Select an EMPLOYEE or press RETURN for ALL: "
"RTN","PRSPSAPU",30,0)
 S DIC(0)="AEQM"
"RTN","PRSPSAPU",31,0)
 S DIC="^PRSPC("
"RTN","PRSPSAPU",32,0)
 S DIC("S")="I $P(^(0),""^"",8)=TLE"
"RTN","PRSPSAPU",33,0)
 ; start look up with ATL xref
"RTN","PRSPSAPU",34,0)
 S D="ATL"_TLE
"RTN","PRSPSAPU",35,0)
 W !
"RTN","PRSPSAPU",36,0)
 D IX^DIC
"RTN","PRSPSAPU",37,0)
 ;
"RTN","PRSPSAPU",38,0)
 ; user hit return for all (return 0)
"RTN","PRSPSAPU",39,0)
 I Y=-1,'($D(DUOUT)!$D(DTOUT)) D
"RTN","PRSPSAPU",40,0)
 .  S PRSIEN=0
"RTN","PRSPSAPU",41,0)
 E  D
"RTN","PRSPSAPU",42,0)
 .  S PRSIEN=+Y
"RTN","PRSPSAPU",43,0)
 Q PRSIEN
"RTN","PRSPSAPU",44,0)
 ;
"RTN","PRSPSAPU",45,0)
UPESRST(PPI,PRSIEN,PRSD) ;update ESR DAILY STATUS
"RTN","PRSPSAPU",46,0)
 N DIE,DR,DA
"RTN","PRSPSAPU",47,0)
 S DA(2)=$G(PPI),DA(1)=$G(PRSIEN),DA=$G(PRSD)
"RTN","PRSPSAPU",48,0)
 S DR="146///SIGNED;149///MANUAL POST"
"RTN","PRSPSAPU",49,0)
 S DIE="^PRST(458,"_DA(2)_",""E"","_DA(1)_",""D"","
"RTN","PRSPSAPU",50,0)
 D ^DIE
"RTN","PRSPSAPU",51,0)
 Q
"RTN","PRSPSAPU",52,0)
ESRDTS(ESRDTS,PRSIEN,PPI) ; Return signed dates from PTP's ESR
"RTN","PRSPSAPU",53,0)
 ; return array ESRDTS subscripted sequentially from 1
"RTN","PRSPSAPU",54,0)
 ;    ESRDTS(1) = Tue 2-NOV-04
"RTN","PRSPSAPU",55,0)
 ;    ESRDTS(2) = Fri 5-NOV-04
"RTN","PRSPSAPU",56,0)
 N PRSD,ITEMS,PRSDTS
"RTN","PRSPSAPU",57,0)
 S PRSDTS=$G(^PRST(458,PPI,2))
"RTN","PRSPSAPU",58,0)
 S (PRSD,ITEMS)=0
"RTN","PRSPSAPU",59,0)
 F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0  D
"RTN","PRSPSAPU",60,0)
 .  S ITEMS=ITEMS+1
"RTN","PRSPSAPU",61,0)
 .  S ESRDTS(ITEMS)=PRSD_U_$P(PRSDTS,U,PRSD)
"RTN","PRSPSAPU",62,0)
 Q
"RTN","PRSPSAPU",63,0)
DISPLAY(PRSIEN,PPI,CNT) ;display PPI signed esr days for super review/action
"RTN","PRSPSAPU",64,0)
 ; RETURN array CNT
"RTN","PRSPSAPU",65,0)
 ; CNT = count of days
"RTN","PRSPSAPU",66,0)
 ; CNT(1)= days w/status from supervisor during this option
"RTN","PRSPSAPU",67,0)
 ; PGLNS = lines on current page
"RTN","PRSPSAPU",68,0)
 ; DYLNS = lines in a day
"RTN","PRSPSAPU",69,0)
 ; 
"RTN","PRSPSAPU",70,0)
 N I,PRSD,ESRDTS,ESEG,ESR,PGLNS,DAYLNS,OUT
"RTN","PRSPSAPU",71,0)
 D HDRESR^PRSPSAP1(PRSIEN,PPI,.PGLNS)
"RTN","PRSPSAPU",72,0)
 ;
"RTN","PRSPSAPU",73,0)
 D ESRDTS^PRSPSAPU(.ESRDTS,PRSIEN,PPI)
"RTN","PRSPSAPU",74,0)
 S (PRSD,CNT,CNT(1),OUT)=0
"RTN","PRSPSAPU",75,0)
 F  S PRSD=$O(^TMP($J,"PRSPSAP",PRSIEN,PPI,PRSD)) Q:PRSD'>0!(OUT)  D
"RTN","PRSPSAPU",76,0)
 .  I $Y>(IOSL-6) S OUT=$$ASK^PRSLIB00() D HDRESR^PRSPSAP1(PRSIEN,PPI,.PGLNS)
"RTN","PRSPSAPU",77,0)
 .  Q:OUT
"RTN","PRSPSAPU",78,0)
 .  D GETESR^PRSPSAP1(.ESR,PPI,PRSIEN,PRSD)
"RTN","PRSPSAPU",79,0)
 .  S CNT=CNT+1
"RTN","PRSPSAPU",80,0)
 .  W !,CNT
"RTN","PRSPSAPU",81,0)
 .  D DAY(.DAYLNS,ESRDTS(CNT),.ESR,PRSIEN,PPI)
"RTN","PRSPSAPU",82,0)
 .  S PGLNS=PGLNS+DAYLNS
"RTN","PRSPSAPU",83,0)
 Q
"RTN","PRSPSAPU",84,0)
 ;
"RTN","PRSPSAPU",85,0)
DAY(LN,EXTDAY,ESR,PRSIEN,PPI) ; write a day, return # of lines.
"RTN","PRSPSAPU",86,0)
 N STE,ESEG,REMARKS,START,STOP,MEAL,HOURS,STATUSI,LCNT
"RTN","PRSPSAPU",87,0)
 S LN=0
"RTN","PRSPSAPU",88,0)
 S HOURS=""
"RTN","PRSPSAPU",89,0)
 W ?3,$P(EXTDAY,U,2)
"RTN","PRSPSAPU",90,0)
 W ?17,ESR("TODEXT")
"RTN","PRSPSAPU",91,0)
 ; if tour is too wide for column move down a line
"RTN","PRSPSAPU",92,0)
 I $L(ESR("TODEXT"))>16 W ! S LN=LN+1
"RTN","PRSPSAPU",93,0)
 ;
"RTN","PRSPSAPU",94,0)
 F ESEG=1:5:31 Q:($P(ESR("WORK"),U,ESEG)="")  D
"RTN","PRSPSAPU",95,0)
 .   I ESEG>1 W !
"RTN","PRSPSAPU",96,0)
 .;   start
"RTN","PRSPSAPU",97,0)
 .   S START=$P(ESR("WORK"),U,ESEG)
"RTN","PRSPSAPU",98,0)
 .   S STOP=$P(ESR("WORK"),U,ESEG+1)
"RTN","PRSPSAPU",99,0)
 .   S MEAL=$P(ESR("WORK"),U,ESEG+4)
"RTN","PRSPSAPU",100,0)
 .   W ?33,START
"RTN","PRSPSAPU",101,0)
 .   I START'["No work:" D
"RTN","PRSPSAPU",102,0)
 ..    W "-"
"RTN","PRSPSAPU",103,0)
 ..    S HOURS=$$ELAPSE^PRSPESR2(MEAL,START,STOP)
"RTN","PRSPSAPU",104,0)
 .;   stop
"RTN","PRSPSAPU",105,0)
 .   W STOP
"RTN","PRSPSAPU",106,0)
 .;  type of time
"RTN","PRSPSAPU",107,0)
 .   W ?49,$$TTE($P(ESR("WORK"),U,ESEG+2))
"RTN","PRSPSAPU",108,0)
 .;   remarks - use 458.02 to convert to external
"RTN","PRSPSAPU",109,0)
 .   S REMARKS=$P(ESR("WORK"),U,ESEG+3)
"RTN","PRSPSAPU",110,0)
 .   I REMARKS>0 D
"RTN","PRSPSAPU",111,0)
 ..     S LN=LN+1
"RTN","PRSPSAPU",112,0)
 ..     W !,?34,"Remarks: ",$$EXTERNAL^DILFD(458.02,44,"",REMARKS)
"RTN","PRSPSAPU",113,0)
 .;   hours and meal
"RTN","PRSPSAPU",114,0)
 .   W ?61,HOURS,?68,MEAL
"RTN","PRSPSAPU",115,0)
 ;   display PTP remarks (if any)
"RTN","PRSPSAPU",116,0)
    I ESR("RMK")]"" D
"RTN","PRSPSAPU",117,0)
 .     W !,?2,"Physician Remarks: "
"RTN","PRSPSAPU",118,0)
 .     D WRAP(.LCNT,ESR("RMK"),21,66)
"RTN","PRSPSAPU",119,0)
 .     S LN=LN+LCNT
"RTN","PRSPSAPU",120,0)
 S STATUSI=$G(^TMP($J,"PRSPSAP",PRSIEN,PPI,+EXTDAY,1))
"RTN","PRSPSAPU",121,0)
 W ?72,$$STATUSE(STATUSI)
"RTN","PRSPSAPU",122,0)
 Q
"RTN","PRSPSAPU",123,0)
GETDAY(ESRDY,ESRDTS,ESR,CNT,PRSIEN,PPI) ; RETURN write a day IN ESRDY ARRAY
"RTN","PRSPSAPU",124,0)
 N BLANKS,LN,ESEG,START
"RTN","PRSPSAPU",125,0)
 S LN=1
"RTN","PRSPSAPU",126,0)
 S BLANKS="                                       "
"RTN","PRSPSAPU",127,0)
 S ESRDY(LN)="   "_$P(ESRDTS(CNT),U,2)
"RTN","PRSPSAPU",128,0)
 S ESRDY(LN)=$E(ESRDY(LN)_BLANKS,1,18)_ESR("TODEXT")
"RTN","PRSPSAPU",129,0)
 ; if tour is too wide for the column move down a line for the work
"RTN","PRSPSAPU",130,0)
 I $L(ESR("TODEXT"))>16 S LN=LN+1,ESRDY(LN)=""
"RTN","PRSPSAPU",131,0)
 ;
"RTN","PRSPSAPU",132,0)
 F ESEG=1:5:31 Q:($P(ESR("WORK"),U,ESEG)="")  D
"RTN","PRSPSAPU",133,0)
 .   I ESEG>1 W !
"RTN","PRSPSAPU",134,0)
 .;   start
"RTN","PRSPSAPU",135,0)
 .   S START=$P(ESR("WORK"),U,ESEG)
"RTN","PRSPSAPU",136,0)
 .   S ESRDY(LN)=$E(ESRDY(LN)_BLANKS,1,35)_START
"RTN","PRSPSAPU",137,0)
 .   I START'["No work-signed by" S ESRDY(LN)=ESRDY(LN)_"-"
"RTN","PRSPSAPU",138,0)
 .;   stop
"RTN","PRSPSAPU",139,0)
 .   S ESRDY(LN)=ESRDY(LN)_$P(ESR("WORK"),U,ESEG+1)
"RTN","PRSPSAPU",140,0)
 .;  type of time
"RTN","PRSPSAPU",141,0)
 .   S ESRDY(LN)=$E(ESRDY(LN)_BLANKS,1,51)_$$TTE($P(ESR("WORK"),U,ESEG+2))
"RTN","PRSPSAPU",142,0)
 .;   remarks
"RTN","PRSPSAPU",143,0)
 .   S ESRDY(LN)=$E(ESRDY(LN)_BLANKS,1,54)_$P(ESR("WORK"),U,ESEG+3)
"RTN","PRSPSAPU",144,0)
 .;   meal
"RTN","PRSPSAPU",145,0)
 .   S ESRDY(LN)=$E(ESRDY(LN)_BLANKS,1,68)_$P(ESR("WORK"),U,ESEG+4)
"RTN","PRSPSAPU",146,0)
 .   S ST=$$STATUSE($G(^TMP($J,"PRSPSAP",PRSIEN,PPI,+ESRDTS(CNT),1)))
"RTN","PRSPSAPU",147,0)
 .   S ESRDY(LN)=$E(ESRDY(LN),1,71)_ST
"RTN","PRSPSAPU",148,0)
 .   S LN=LN+1,ESRDY(LN)=""
"RTN","PRSPSAPU",149,0)
 Q
"RTN","PRSPSAPU",150,0)
 ;
"RTN","PRSPSAPU",151,0)
TTE(CODE) ; return external type of time
"RTN","PRSPSAPU",152,0)
 N K
"RTN","PRSPSAPU",153,0)
 Q:$G(CODE)="" CODE
"RTN","PRSPSAPU",154,0)
 S K=$O(^PRST(457.3,"B",CODE,0))
"RTN","PRSPSAPU",155,0)
 Q $P($G(^PRST(457.3,+K,0)),"^",2)
"RTN","PRSPSAPU",156,0)
 ;
"RTN","PRSPSAPU",157,0)
STATUSE(ST) ; return external form of supervisor action status
"RTN","PRSPSAPU",158,0)
 S ST=$G(ST)
"RTN","PRSPSAPU",159,0)
 Q $S(ST="B":"Bypass",ST="R":"Resubmit",ST="A":"Approved",1:"")
"RTN","PRSPSAPU",160,0)
 ;
"RTN","PRSPSAPU",161,0)
CLRTCDY(PPI,PRSIEN,PRSD,EST) ;function true (1) for success otherwise 0
"RTN","PRSPSAPU",162,0)
 ;  clear a timecard day (2,3,10 nodes) if status is (T) timekeeper
"RTN","PRSPSAPU",163,0)
 ;  clear work, posting status and remove approved status from ESR day.
"RTN","PRSPSAPU",164,0)
 ; INPUT: PPI,PRSIEN,PRSD: package standard
"RTN","PRSPSAPU",165,0)
 ;        EST : optional, valid ESR DAILY STATUS internal value
"RTN","PRSPSAPU",166,0)
 ;
"RTN","PRSPSAPU",167,0)
 Q:($G(PPI)'>0)!($G(PRSIEN)'>0)!($G(PRSD)'>0) 0
"RTN","PRSPSAPU",168,0)
 Q:'$D(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)) 0
"RTN","PRSPSAPU",169,0)
 N TCSTAT
"RTN","PRSPSAPU",170,0)
 S TCSTAT=$$TCSTAT^PRSPSAP2(PPI,PRSIEN)
"RTN","PRSPSAPU",171,0)
 Q:$G(TCSTAT)'="T" 0
"RTN","PRSPSAPU",172,0)
 ;
"RTN","PRSPSAPU",173,0)
 ; kill the timecard work nodes
"RTN","PRSPSAPU",174,0)
 K ^PRST(458,PPI,"E",PRSIEN,"D",PRSD,2),^(3),^(10)
"RTN","PRSPSAPU",175,0)
 ;
"RTN","PRSPSAPU",176,0)
 ; ONLY if a valid ESR daily status is passed then set it
"RTN","PRSPSAPU",177,0)
 N VALID
"RTN","PRSPSAPU",178,0)
 D CHK^DIE(458.02,146,"",$G(EST),.VALID)
"RTN","PRSPSAPU",179,0)
 Q:VALID["^" 1
"RTN","PRSPSAPU",180,0)
 ;
"RTN","PRSPSAPU",181,0)
 N IENS,PRSFDA
"RTN","PRSPSAPU",182,0)
 S IENS=PRSD_","_PRSIEN_","_PPI_","
"RTN","PRSPSAPU",183,0)
 S PRSFDA(458.02,IENS,146)=EST
"RTN","PRSPSAPU",184,0)
 D FILE^DIE("","PRSFDA")
"RTN","PRSPSAPU",185,0)
 D MSG^DIALOG()
"RTN","PRSPSAPU",186,0)
 Q 1
"RTN","PRSPSAPU",187,0)
 ;
"RTN","PRSPSAPU",188,0)
WRAP(LNS,STR,TAB,WID) ; format a long message string to break lines at words
"RTN","PRSPSAPU",189,0)
 ; TAB is left margin
"RTN","PRSPSAPU",190,0)
 ; WID is right margin
"RTN","PRSPSAPU",191,0)
 ; return LNS number of lines it took to write
"RTN","PRSPSAPU",192,0)
 N WORD,I,WC,COLW,W1,W2
"RTN","PRSPSAPU",193,0)
 S WC=0,WORD=""
"RTN","PRSPSAPU",194,0)
 S COLW=WID-TAB+1
"RTN","PRSPSAPU",195,0)
 W ?$G(TAB)
"RTN","PRSPSAPU",196,0)
 S LNS=1
"RTN","PRSPSAPU",197,0)
 F I=1:1:$L(STR," ") D
"RTN","PRSPSAPU",198,0)
 .  S WORD=$P(STR," ",I)
"RTN","PRSPSAPU",199,0)
 .  Q:WORD=""
"RTN","PRSPSAPU",200,0)
 .;   break words longer than the width of the column
"RTN","PRSPSAPU",201,0)
 .  F  Q:($L(WORD)<(COLW+1))  D
"RTN","PRSPSAPU",202,0)
 ..    S W1=$E(WORD,1,COLW-1)_"-"
"RTN","PRSPSAPU",203,0)
 ..    S W2=$E(WORD,COLW,$L(WORD))
"RTN","PRSPSAPU",204,0)
 ..    S WORD=W1 D WW
"RTN","PRSPSAPU",205,0)
 ..    S WORD=W2
"RTN","PRSPSAPU",206,0)
 .  D WW
"RTN","PRSPSAPU",207,0)
 Q
"RTN","PRSPSAPU",208,0)
WW ; Write Word
"RTN","PRSPSAPU",209,0)
 I ($X+$L(WORD))>WID D
"RTN","PRSPSAPU",210,0)
 .   I WC>0 W !,?$G(TAB) S LNS=LNS+1,WC=0
"RTN","PRSPSAPU",211,0)
 W WORD," " S WC=WC+1
"RTN","PRSPSAPU",212,0)
 Q
"RTN","PRSPSAPU",213,0)
 ;
"RTN","PRSPSAPU",214,0)
 ;
"RTN","PRSPSAPU",215,0)
 ;===============================================================
"RTN","PRSPSAPU",216,0)
 ;
"RTN","PRSPSAPU",217,0)
AMT(START,STOP,MEAL) ; return decimal hours between times
"RTN","PRSPSAPU",218,0)
 ; times are in PAID timecard work node format. (e.g. 04:30P )
"RTN","PRSPSAPU",219,0)
 N AMT,X
"RTN","PRSPSAPU",220,0)
 S AMT=$$ELAPSE^PRSPESR2(MEAL,START,STOP)
"RTN","PRSPSAPU",221,0)
 S X=$P(AMT,":",2) S X=$S(X=30:5,X=15:25,X=45:75,1:0)
"RTN","PRSPSAPU",222,0)
 S AMT=+$P(AMT,":",1)_"."_X
"RTN","PRSPSAPU",223,0)
 Q AMT
"RTN","PRSPSRC")
0^30^B13584533^n/a
"RTN","PRSPSRC",1,0)
PRSPSRC ;WOIFO/MGD - PTP SELECT RECONCILIATION CHOICE ;04/22/05
"RTN","PRSPSRC",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPSRC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPSRC",4,0)
 ;
"RTN","PRSPSRC",5,0)
 ; The following routine will allow HR to complete the reconciliation
"RTN","PRSPSRC",6,0)
 ; process for a memorandum that has expired or been terminated.
"RTN","PRSPSRC",7,0)
 ;
"RTN","PRSPSRC",8,0)
 Q
"RTN","PRSPSRC",9,0)
 ;
"RTN","PRSPSRC",10,0)
MAIN(PRSIEN,MIEN) ; Main Driver
"RTN","PRSPSRC",11,0)
 ; PRSIEN optional parameter-employee file 450 ien
"RTN","PRSPSRC",12,0)
 ; MIEN optional parameter-ien of memo that needs ptps reconcile choice
"RTN","PRSPSRC",13,0)
 ;
"RTN","PRSPSRC",14,0)
 Q:'DUZ
"RTN","PRSPSRC",15,0)
 I $G(PRSIEN)'>0 D
"RTN","PRSPSRC",16,0)
 . S SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSPSRC",17,0)
 . I SSN'="" S PRSIEN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSPSRC",18,0)
 Q:$G(PRSIEN)'>0
"RTN","PRSPSRC",19,0)
 ;
"RTN","PRSPSRC",20,0)
 ;if MIEN passed make sure it qualifies
"RTN","PRSPSRC",21,0)
 I $G(MIEN)>0,'$D(^PRST(458.7,"AST",PRSIEN,3,MIEN)) D  Q
"RTN","PRSPSRC",22,0)
 . W @IOF
"RTN","PRSPSRC",23,0)
 . W !!,"Memorandum status is not Reconciliation Started."
"RTN","PRSPSRC",24,0)
 ;if MIEN not passed then Find memos that qualify for reconcile
"RTN","PRSPSRC",25,0)
 K ^TMP($J,"PRSPRM")
"RTN","PRSPSRC",26,0)
 I $G(MIEN)'>0 D 
"RTN","PRSPSRC",27,0)
 .  D MEM^PRSPRM
"RTN","PRSPSRC",28,0)
 E  D
"RTN","PRSPSRC",29,0)
 .  D MEMDAT^PRSPRM(MIEN,.STATUS,.STDAT,.ENDAT,.TDAT)
"RTN","PRSPSRC",30,0)
 I $G(MIEN)'>0 D KILL^PRSPRM1 Q
"RTN","PRSPSRC",31,0)
 ;
"RTN","PRSPSRC",32,0)
 S DATA2=$G(^PRST(458.7,MIEN,2))
"RTN","PRSPSRC",33,0)
 I +DATA2 D  D KILL^PRSPRM1 Q
"RTN","PRSPSRC",34,0)
 . W !!,"You have already selected the following reconciliation option:"
"RTN","PRSPSRC",35,0)
 . W !!,"Reconciliation Option: ",$$EXTERNAL^DILFD(458.7,17,"",+DATA2)
"RTN","PRSPSRC",36,0)
 . W !,"Reconciliation Comments: ",$P(DATA2,U,2)
"RTN","PRSPSRC",37,0)
 ; Display employee and memorandum information
"RTN","PRSPSRC",38,0)
 D DISPLAY^PRSPRM
"RTN","PRSPSRC",39,0)
 I $D(DIRUT) D KILL^PRSPRM1 Q
"RTN","PRSPSRC",40,0)
 ; Verify that all daily ESR are completed
"RTN","PRSPSRC",41,0)
 S QUIT=0
"RTN","PRSPSRC",42,0)
 D ESRCHK^PRSPRM
"RTN","PRSPSRC",43,0)
 I QUIT D KILL^PRSPRM1 Q
"RTN","PRSPSRC",44,0)
 ; Display Summary information
"RTN","PRSPSRC",45,0)
 D SUM^PRSPBRP
"RTN","PRSPSRC",46,0)
 ; Display Reconciliation Choices
"RTN","PRSPSRC",47,0)
 D ROPT^PRSPBRP
"RTN","PRSPSRC",48,0)
 ; Prompt PTP for Reconciliation Choice
"RTN","PRSPSRC",49,0)
 D PTPRC
"RTN","PRSPSRC",50,0)
 I RO="^" D KILL^PRSPRM1 Q
"RTN","PRSPSRC",51,0)
 S PTPRC=$P(MEM(RO),U,2)
"RTN","PRSPSRC",52,0)
 ; Prompt for PTP Reconciliation Comments
"RTN","PRSPSRC",53,0)
 D PTPRCOM
"RTN","PRSPSRC",54,0)
 I X="^" D KILL^PRSPRM1 Q
"RTN","PRSPSRC",55,0)
 D SAVE
"RTN","PRSPSRC",56,0)
 D KILL^PRSPRM1
"RTN","PRSPSRC",57,0)
 Q
"RTN","PRSPSRC",58,0)
 ;
"RTN","PRSPSRC",59,0)
 ;
"RTN","PRSPSRC",60,0)
PTPRC ; PTP Reconciliation Choice
"RTN","PRSPSRC",61,0)
 S END="",END=$O(MEM(END),-1) ; Find range on options
"RTN","PRSPSRC",62,0)
 ; Prompt for Reconciliation Choice
"RTN","PRSPSRC",63,0)
RO W !!,"Enter Reconciliation Choice: "
"RTN","PRSPSRC",64,0)
 R RO:DTIME
"RTN","PRSPSRC",65,0)
 I RO="" S RO="^"
"RTN","PRSPSRC",66,0)
 Q:RO="^"
"RTN","PRSPSRC",67,0)
 I '$D(MEM(RO)) D  G RO
"RTN","PRSPSRC",68,0)
 . I END>1 D
"RTN","PRSPSRC",69,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPSRC",70,0)
 . I END'>1 D
"RTN","PRSPSRC",71,0)
 . . W !!,"Enter 1 or ^ to exit"
"RTN","PRSPSRC",72,0)
 S PTPRCE=$P(MEM(RO),U,1),PTPRC=$P(MEM(RO),U,2)
"RTN","PRSPSRC",73,0)
 W "  "_PTPRCE
"RTN","PRSPSRC",74,0)
 S TEXT="Enter Reconciliation Choice: "_RO
"RTN","PRSPSRC",75,0)
 S INDEX=INDEX+1
"RTN","PRSPSRC",76,0)
 S ^TMP($J,"PRSPRM",INDEX)=TEXT,TEXT=""
"RTN","PRSPSRC",77,0)
 S INDEX=INDEX+1
"RTN","PRSPSRC",78,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPSRC",79,0)
 Q
"RTN","PRSPSRC",80,0)
 ;
"RTN","PRSPSRC",81,0)
PTPRCOM ; Prompt for PTP's Reconciliation Comments if paper form was used
"RTN","PRSPSRC",82,0)
 ;
"RTN","PRSPSRC",83,0)
 S DIR(0)="FO^1:240^^",DIR("A")="PTP's Reconciliation Comments"
"RTN","PRSPSRC",84,0)
 D ^DIR
"RTN","PRSPSRC",85,0)
 I X="^" Q
"RTN","PRSPSRC",86,0)
 S PTPRCOM=X
"RTN","PRSPSRC",87,0)
 S TEXT="Reconciliation Comments: "_$E(PTPRCOM,1,48)
"RTN","PRSPSRC",88,0)
 S INDEX=INDEX+1,^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPSRC",89,0)
 S TEXT="",TEXT=$E(PTPRCOM,49,128),INDEX=INDEX+1
"RTN","PRSPSRC",90,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPSRC",91,0)
 S TEXT="",TEXT=$E(PTPRCOM,129,208),INDEX=INDEX+1
"RTN","PRSPSRC",92,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPSRC",93,0)
 S TEXT="",TEXT=$E(PTPRCOM,209,240),INDEX=INDEX+1
"RTN","PRSPSRC",94,0)
 I TEXT'="" S ^TMP($J,"PRSPRM",INDEX)=TEXT
"RTN","PRSPSRC",95,0)
 S TEXT="",INDEX=INDEX+1
"RTN","PRSPSRC",96,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPSRC",97,0)
 Q
"RTN","PRSPSRC",98,0)
 ;
"RTN","PRSPSRC",99,0)
SAVE ; Save PTP info into #458.7
"RTN","PRSPSRC",100,0)
 ;
"RTN","PRSPSRC",101,0)
 N ESOK,HOL
"RTN","PRSPSRC",102,0)
 K PRSFDA,IEN4587
"RTN","PRSPSRC",103,0)
 D ^PRSAES
"RTN","PRSPSRC",104,0)
 I 'ESOK D  Q
"RTN","PRSPSRC",105,0)
 . W !!,"Your Reconciliation Choice was not saved."
"RTN","PRSPSRC",106,0)
 I ESOK D
"RTN","PRSPSRC",107,0)
 . S IEN4587=MIEN_","
"RTN","PRSPSRC",108,0)
 . S PRSFDA(458.7,IEN4587,17)=PTPRC
"RTN","PRSPSRC",109,0)
 . S PRSFDA(458.7,IEN4587,18)=PTPRCOM
"RTN","PRSPSRC",110,0)
 . D UPDATE^DIE("","PRSFDA","IEN4587"),MSG^DIALOG()
"RTN","PRSPSRC",111,0)
 ;
"RTN","PRSPSRC",112,0)
 K DATA,DATA2,DIR,DIRUT,END,ENDAT,INDEX,MEM,PTPRC,PTPRCE,PTPRCOM,QUIT
"RTN","PRSPSRC",113,0)
 K RO,SSN,STATUS,STDAT,TDAT,TEXT,X
"RTN","PRSPSRC",114,0)
 Q
"RTN","PRSPTM")
0^13^B69411806^n/a
"RTN","PRSPTM",1,0)
PRSPTM ;WOIFO/MGD - PTP TERMINATE MEMORANDUM ;06/15/05
"RTN","PRSPTM",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPTM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPTM",4,0)
 ;
"RTN","PRSPTM",5,0)
 ; The following routine will allow HR to terminate a Part Time
"RTN","PRSPTM",6,0)
 ; Physician's Memorandum of Service Level Expectations.  Once
"RTN","PRSPTM",7,0)
 ; terminated the memorandum will need to be reconciled.
"RTN","PRSPTM",8,0)
 ; For a memorandum to be eligible for termination it must have already
"RTN","PRSPTM",9,0)
 ; had had at least one Pay Period processed and it must be prior to
"RTN","PRSPTM",10,0)
 ; the processing of the last Pay Period covered by the memorandum.
"RTN","PRSPTM",11,0)
 ;
"RTN","PRSPTM",12,0)
 Q
"RTN","PRSPTM",13,0)
MAIN ; Main Driver
"RTN","PRSPTM",14,0)
 N STDAT,ENDAT,AHRS,ICOM,ESOK
"RTN","PRSPTM",15,0)
 ; Prompt for Part Time Physician
"RTN","PRSPTM",16,0)
 D PTP
"RTN","PRSPTM",17,0)
 I Y'>0 D KILL Q
"RTN","PRSPTM",18,0)
 S PRSIEN=+Y
"RTN","PRSPTM",19,0)
 ; Find any memorandums that meet the termination qualifications
"RTN","PRSPTM",20,0)
 D MEM
"RTN","PRSPTM",21,0)
 Q:'$G(MIEN)
"RTN","PRSPTM",22,0)
 ; Display employee and memorandum information
"RTN","PRSPTM",23,0)
 D DISPLAY
"RTN","PRSPTM",24,0)
 Q:$D(DIRUT)
"RTN","PRSPTM",25,0)
TERM ; Issue Terminate Memorandum prompt
"RTN","PRSPTM",26,0)
 W !
"RTN","PRSPTM",27,0)
 S DIR(0)="YO",DIR("A")="Terminate Memoranda Y/N: "
"RTN","PRSPTM",28,0)
 D ^DIR K DIR
"RTN","PRSPTM",29,0)
 Q:Y'=1
"RTN","PRSPTM",30,0)
 ; Prompt for Termination Date
"RTN","PRSPTM",31,0)
 D TDATE
"RTN","PRSPTM",32,0)
 Q:X=""!(X="^")
"RTN","PRSPTM",33,0)
 ; Prompt for Termination Comments
"RTN","PRSPTM",34,0)
 D TCOM
"RTN","PRSPTM",35,0)
 Q:TCOM="^"
"RTN","PRSPTM",36,0)
 ; Prompt for E-sig and update file
"RTN","PRSPTM",37,0)
 D ESIG
"RTN","PRSPTM",38,0)
 Q
"RTN","PRSPTM",39,0)
 ;
"RTN","PRSPTM",40,0)
PTP ; Prompt for Part Time Physician
"RTN","PRSPTM",41,0)
 W !
"RTN","PRSPTM",42,0)
 S DIC="^PRSPC(",DIC(0)="AEMQZ",DIC("A")="Select EMPLOYEE: "
"RTN","PRSPTM",43,0)
 D ^DIC K DIC
"RTN","PRSPTM",44,0)
 S PRSIEN=+Y
"RTN","PRSPTM",45,0)
 Q
"RTN","PRSPTM",46,0)
 ;
"RTN","PRSPTM",47,0)
MEM ; Find any memorandums that meet the termination qualifications
"RTN","PRSPTM",48,0)
 N MEM,INDX
"RTN","PRSPTM",49,0)
 S MEM=0,INDX=1
"RTN","PRSPTM",50,0)
 F  S MEM=$O(^PRST(458.7,"B",PRSIEN,MEM)) Q:'MEM  D
"RTN","PRSPTM",51,0)
 . S DATA=$G(^PRST(458.7,MEM,0))
"RTN","PRSPTM",52,0)
 . Q:DATA=""
"RTN","PRSPTM",53,0)
 . S STATUS=$P(DATA,U,6)
"RTN","PRSPTM",54,0)
 . Q:STATUS>2  ; Memorandum = 3:RECONCILIATION STARTED or 4:RECONCILED
"RTN","PRSPTM",55,0)
 . S START=$P(DATA,U,2),END=$P(DATA,U,3) ; Start Date, End Date
"RTN","PRSPTM",56,0)
 . ; Don't include future memoradums.  The Delete Future Memorandum
"RTN","PRSPTM",57,0)
 . ; option must be used to to remove future memorandums.
"RTN","PRSPTM",58,0)
 . Q:START>DT
"RTN","PRSPTM",59,0)
 . ; Check for a memorandum that has already been terminated but the
"RTN","PRSPTM",60,0)
 . ; Begin Reconciliation Process option has not been run yet.
"RTN","PRSPTM",61,0)
 . Q:+$G(^PRST(458.7,MEM,4))
"RTN","PRSPTM",62,0)
 . S PPI=$P($G(^PRST(458,"AD",END)),U,1)
"RTN","PRSPTM",63,0)
 . ; The End Date for future memorandums may not be in #458 yet
"RTN","PRSPTM",64,0)
 . I PPI="" D  Q
"RTN","PRSPTM",65,0)
 . . S MEM(INDX)=MEM_"^"_START_"^"_END_"^ACTIVE",INDX=INDX+1
"RTN","PRSPTM",66,0)
 . ; If the End Date is in #458 check the timecard status for that PP
"RTN","PRSPTM",67,0)
 . ; Quit if Timecard status for the last PP of the mem is not (T)imekeeper
"RTN","PRSPTM",68,0)
 . Q:$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)'="T"
"RTN","PRSPTM",69,0)
 . S MEM(INDX)=MEM_"^"_START_"^"_END_"^ACTIVE",INDX=INDX+1
"RTN","PRSPTM",70,0)
 ; If no memos meet the termination qualifications
"RTN","PRSPTM",71,0)
 I '$D(MEM(1)) D  Q
"RTN","PRSPTM",72,0)
 . W !!,"No memorandums meet the termination qualifications for the "
"RTN","PRSPTM",73,0)
 . W "selected employee."
"RTN","PRSPTM",74,0)
 . S MIEN=0
"RTN","PRSPTM",75,0)
 ; If only one memo
"RTN","PRSPTM",76,0)
 I '$D(MEM(2)) S MIEN=$P($G(MEM(1)),U,1) Q
"RTN","PRSPTM",77,0)
 ; Display list if more than one
"RTN","PRSPTM",78,0)
 I $D(MEM(2)) D
"RTN","PRSPTM",79,0)
 . W !!," # ",?5,"STARTS          ENDS"
"RTN","PRSPTM",80,0)
 . F MEM=1:1 Q:'$D(MEM(MEM))  D
"RTN","PRSPTM",81,0)
 . . S DATA=MEM(MEM)
"RTN","PRSPTM",82,0)
 . . S START=$$FMTE^XLFDT($P(DATA,U,2))
"RTN","PRSPTM",83,0)
 . . S END=$$FMTE^XLFDT($P(DATA,U,3))
"RTN","PRSPTM",84,0)
 . . W !!,MEM,?5,START," TO ",END
"RTN","PRSPTM",85,0)
 . ;
"RTN","PRSPTM",86,0)
ASK . ; Ask user to select which memorandum they want
"RTN","PRSPTM",87,0)
 . S END="",END=$O(MEM(END),-1)
"RTN","PRSPTM",88,0)
 . W !!,"Enter a number between 1 and ",END,": "
"RTN","PRSPTM",89,0)
 . R ASK:DTIME
"RTN","PRSPTM",90,0)
 . S ASK=$$UPPER^PRSRUTL(ASK)
"RTN","PRSPTM",91,0)
 . I ASK=""!(ASK="^") S MIEN=0 Q
"RTN","PRSPTM",92,0)
 . I '$D(MEM(ASK)) D  G ASK
"RTN","PRSPTM",93,0)
 . . W !!,"Enter a number between 1 and ",END," or ^ to exit"
"RTN","PRSPTM",94,0)
 . S MIEN=$P(MEM(ASK),U,1)
"RTN","PRSPTM",95,0)
 Q
"RTN","PRSPTM",96,0)
 ;
"RTN","PRSPTM",97,0)
DISPLAY ; Display memorandum info to validate the correct employee was chosen
"RTN","PRSPTM",98,0)
 S SCRTTL="Terminate PT Physician Memoranda"
"RTN","PRSPTM",99,0)
 D HDR^PRSPUT1(PRSIEN,SCRTTL)
"RTN","PRSPTM",100,0)
 D MEM^PRSPUT1(PRSIEN,MIEN)
"RTN","PRSPTM",101,0)
 D AL^PRSPUT3(PRSIEN,)
"RTN","PRSPTM",102,0)
 D PPSUM^PRSPUT2(PRSIEN,MIEN)
"RTN","PRSPTM",103,0)
 S DIR(0)="E",DIR("A")="Press RETURN to continue" D ^DIR
"RTN","PRSPTM",104,0)
 Q
"RTN","PRSPTM",105,0)
 ;
"RTN","PRSPTM",106,0)
TDATE ; Prompt for Termination Date
"RTN","PRSPTM",107,0)
 S DATA0=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPTM",108,0)
 S (STDAT,STDATI)=$P(DATA0,U,2),(ENDAT,ENDATI)=$P(DATA0,U,3)
"RTN","PRSPTM",109,0)
 S Y=STDAT
"RTN","PRSPTM",110,0)
 D DD^%DT
"RTN","PRSPTM",111,0)
 S STDAT=Y
"RTN","PRSPTM",112,0)
 S Y=ENDAT
"RTN","PRSPTM",113,0)
 D DD^%DT
"RTN","PRSPTM",114,0)
 S ENDAT=Y
"RTN","PRSPTM",115,0)
 S TDAT=0
"RTN","PRSPTM",116,0)
 W !!,"Termination date must be the last day of a pay period."
"RTN","PRSPTM",117,0)
 W !,"Start Date: ",STDAT,"     End Date: ",ENDAT,!
"RTN","PRSPTM",118,0)
 S %DT="AEX",%DT("A")="Termination Date: ",QUIT=0
"RTN","PRSPTM",119,0)
 F  D  Q:QUIT
"RTN","PRSPTM",120,0)
 . N DAY14,TPPI
"RTN","PRSPTM",121,0)
 . D ^%DT
"RTN","PRSPTM",122,0)
 . I X=""!(X="^") S QUIT=1 Q
"RTN","PRSPTM",123,0)
 . ; Validate that the Termination Date is the last day of a Pay Period.
"RTN","PRSPTM",124,0)
 . S TDATE=+Y
"RTN","PRSPTM",125,0)
 . Q:TDATE="^"
"RTN","PRSPTM",126,0)
 . S D1=TDATE
"RTN","PRSPTM",127,0)
 . D PP^PRSAPPU ; PPI and Day are set here
"RTN","PRSPTM",128,0)
 . S TPPI=$G(PPI) ; termination pay period IEN (if open)
"RTN","PRSPTM",129,0)
 . I DAY'=14 D  Q
"RTN","PRSPTM",130,0)
 . . W !!,"The Termination Date must be the last day of a Pay Period."
"RTN","PRSPTM",131,0)
 . . W !,"Please re-enter.",!
"RTN","PRSPTM",132,0)
 . I TDATE<STDATI D  Q
"RTN","PRSPTM",133,0)
 . . W !!,"The Termination Date can not be prior to the Start Date: ",STDAT
"RTN","PRSPTM",134,0)
 . . W !,"Please re-enter.",!
"RTN","PRSPTM",135,0)
 . I TDATE'<ENDATI D  Q
"RTN","PRSPTM",136,0)
 . . W !!,"The Termination Date must be prior to the End Date: ",ENDAT
"RTN","PRSPTM",137,0)
 . . W !,"Please re-enter.",!
"RTN","PRSPTM",138,0)
 . ;
"RTN","PRSPTM",139,0)
 . ; Check to make sure that no Timecards for PPs after the termination
"RTN","PRSPTM",140,0)
 . ; date have a status of Payroll or Transmitted.
"RTN","PRSPTM",141,0)
 . I 'TPPI S QUIT=1 Q  ; PP containing termination date is not open
"RTN","PRSPTM",142,0)
 . ; loop thru PPs after the PP of terminatio and check their status
"RTN","PRSPTM",143,0)
 . S FPPESR=0 ; init # of PPs that have status which prevents termination
"RTN","PRSPTM",144,0)
 . S PPI=TPPI F  S PPI=$O(^PRST(458,PPI)) Q:'PPI  D  Q:DAY14>ENDATI
"RTN","PRSPTM",145,0)
 . . S DAY14=$P($G(^PRST(458,PPI,1)),U,14) ; last day of PPI
"RTN","PRSPTM",146,0)
 . . Q:DAY14>ENDATI  ; pay period is after end of memo
"RTN","PRSPTM",147,0)
 . . S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,2)
"RTN","PRSPTM",148,0)
 . . Q:"^P^X^"'[(U_STATUS_U)  ; quit if status not P or X
"RTN","PRSPTM",149,0)
 . . ; timecard has a status that prevents termination
"RTN","PRSPTM",150,0)
 . . S FPPESR=FPPESR+1
"RTN","PRSPTM",151,0)
 . . S STATEX=$$EXTERNAL^DILFD(458.01,1,"",STATUS)
"RTN","PRSPTM",152,0)
 . . W !,$P($G(^PRST(458,PPI,0)),U),?10,STATEX
"RTN","PRSPTM",153,0)
 . ;
"RTN","PRSPTM",154,0)
 . I FPPESR=0 S QUIT=1 Q  ; All tests passed. Termination date is OK
"RTN","PRSPTM",155,0)
 . ;
"RTN","PRSPTM",156,0)
 . W !!,"You cannot select this Pay Period because there "
"RTN","PRSPTM",157,0)
 . W $S(FPPESR=1:"is ",1:"are "),FPPESR," Pay Period"
"RTN","PRSPTM",158,0)
 . W $S(FPPESR>1:"s ",1:" "),"after this"
"RTN","PRSPTM",159,0)
 . W !,"Pay Period where the timecard",$S(FPPESR=1:" has ",1:"s have ")
"RTN","PRSPTM",160,0)
 . W "a status other than Timekeeper.",!!
"RTN","PRSPTM",161,0)
 Q
"RTN","PRSPTM",162,0)
 ;
"RTN","PRSPTM",163,0)
TCOM ; Termination Comments
"RTN","PRSPTM",164,0)
 W !
"RTN","PRSPTM",165,0)
 S DIR(0)="FO^1:240^^O",DIR("A")="Termination Comments" D ^DIR
"RTN","PRSPTM",166,0)
 S TCOM=Y
"RTN","PRSPTM",167,0)
 Q
"RTN","PRSPTM",168,0)
 ;
"RTN","PRSPTM",169,0)
ESIG ; Prompt for Electronic Signature and store fields in #458.7
"RTN","PRSPTM",170,0)
 ;
"RTN","PRSPTM",171,0)
 N ESOK,PPE,PPNUM,RCALFLG
"RTN","PRSPTM",172,0)
 D ^PRSAES
"RTN","PRSPTM",173,0)
 I ESOK D
"RTN","PRSPTM",174,0)
 . ; Update #458.7
"RTN","PRSPTM",175,0)
 . S MIEN=MIEN_","
"RTN","PRSPTM",176,0)
 . S PRSFDA(458.7,MIEN,22)=TDATE ; TERMINATION DATE
"RTN","PRSPTM",177,0)
 . S PRSFDA(458.7,MIEN,23)=DUZ   ; TERMINATED BY
"RTN","PRSPTM",178,0)
 . D NOW^%DTC
"RTN","PRSPTM",179,0)
 . S PRSFDA(458.7,MIEN,24)=%     ; TERMINATED DATE/TIME
"RTN","PRSPTM",180,0)
 . S PRSFDA(458.7,MIEN,25)=TCOM  ; TERMINATION COMMENTS
"RTN","PRSPTM",181,0)
 . D UPDATE^DIE("","PRSFDA","MIEN"),MSG^DIALOG()
"RTN","PRSPTM",182,0)
 . S MIEN=+MIEN ; Remove comma from end
"RTN","PRSPTM",183,0)
 . ;
"RTN","PRSPTM",184,0)
 . ; Check for PP that need to have their ESR's deleted
"RTN","PRSPTM",185,0)
 . S X1=TDATE,X2=1
"RTN","PRSPTM",186,0)
 . D C^%DTC
"RTN","PRSPTM",187,0)
 . S PPI=+$G(^PRST(458,"AD",X))
"RTN","PRSPTM",188,0)
 . Q:'PPI  ; There aren't any pay periods opened after the termination date
"RTN","PRSPTM",189,0)
 . ;
"RTN","PRSPTM",190,0)
 . S PPI=PPI-.01 ; init PPI to include 1st PP in loop
"RTN","PRSPTM",191,0)
 . F  S PPI=$O(^PRST(458,PPI)) Q:'PPI  D
"RTN","PRSPTM",192,0)
 . . Q:'$D(^PRST(458,PPI,"E",PRSIEN,0))  ; skip PP if no timecard/ESR
"RTN","PRSPTM",193,0)
 . . ;
"RTN","PRSPTM",194,0)
 . . ; Check for previously saved hours for this PP
"RTN","PRSPTM",195,0)
 . . S RCALFLG=0
"RTN","PRSPTM",196,0)
 . . S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPTM",197,0)
 . . S PPNUM=$O(^PRST(458.7,MIEN,9,"B",PPE,0))
"RTN","PRSPTM",198,0)
 . . Q:PPNUM'>0
"RTN","PRSPTM",199,0)
 . . S RCALFLG=$S($P($G(^PRST(458.7,MIEN,9,PPNUM,0)),U,1)'="":1,1:0)
"RTN","PRSPTM",200,0)
 . . ;
"RTN","PRSPTM",201,0)
 . . F DAY=1:1:14 D
"RTN","PRSPTM",202,0)
 . . . S ESRSTAT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,7)),U,1)
"RTN","PRSPTM",203,0)
 . . . I ESRSTAT=5 D  ; Clear Time Card posting information
"RTN","PRSPTM",204,0)
 . . . . K ^PRST(458,PPI,"E",PRSIEN,"D",DAY,2),^(3),^(10)
"RTN","PRSPTM",205,0)
 . . . ;
"RTN","PRSPTM",206,0)
 . . . ; delete any ESR data
"RTN","PRSPTM",207,0)
 . . . ; use fileman to delete ESR DAILY STATUS so x-ref will get updated
"RTN","PRSPTM",208,0)
 . . . S PRSFDA(458.02,DAY_","_PRSIEN_","_PPI_",",146)="@"
"RTN","PRSPTM",209,0)
 . . . D FILE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSPTM",210,0)
 . . . ; delete ESR related fields
"RTN","PRSPTM",211,0)
 . . . K ^PRST(458,PPI,"E",PRSIEN,"D",DAY,5),^(6),^(7)
"RTN","PRSPTM",212,0)
 . . ;
"RTN","PRSPTM",213,0)
 . . ; If the PP had been certified before, re-calculate totals
"RTN","PRSPTM",214,0)
 . . I RCALFLG D PTP^PRSASR1(PRSIEN,PPI)
"RTN","PRSPTM",215,0)
 Q
"RTN","PRSPTM",216,0)
 ;
"RTN","PRSPTM",217,0)
KILL ; Clean up variables
"RTN","PRSPTM",218,0)
 ;
"RTN","PRSPTM",219,0)
 K ASK,D1,DA,DATA,DATA0,DAY,DIR,DIRUT,END,ENDAT,ENDATI,ESRSTAT
"RTN","PRSPTM",220,0)
 K FPPESR,I,INDX,MEM,MIEN,PPE,PPI,PRSIEN,PRSFDA,QUIT,QUIT1
"RTN","PRSPTM",221,0)
 K SCRTTL,START,STATEX,STATUS,STDAT,STDATI,TCOM
"RTN","PRSPTM",222,0)
 K TDAT,TDATE,TDATI,X,X1,X2,Y,%,%DT
"RTN","PRSPTM",223,0)
 K ^TMP($J,"PRSPTM")
"RTN","PRSPTM",224,0)
 Q
"RTN","PRSPUE")
0^33^B6810675^n/a
"RTN","PRSPUE",1,0)
PRSPUE ;HISC/MGD - UNLOCK PRIOR PP ESR ;07/21/05
"RTN","PRSPUE",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPUE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPUE",4,0)
 ;====================================================================
"RTN","PRSPUE",5,0)
SUP ; Supervisor Entry
"RTN","PRSPUE",6,0)
 S PRSTLV=3
"RTN","PRSPUE",7,0)
T0 D TOP ; print header
"RTN","PRSPUE",8,0)
 D ^PRSAUTL G:TLI<1 EX
"RTN","PRSPUE",9,0)
 N DATEX,PRSIEN
"RTN","PRSPUE",10,0)
T1 K DIC S DIC("A")="Select EMPLOYEE: ",DIC(0)="AEQM",DIC="^PRSPC("
"RTN","PRSPUE",11,0)
 S DIC("S")="I $P(^(0),""^"",8)=TLE" S D="ATL"_TLE W ! D IX^DIC
"RTN","PRSPUE",12,0)
 S (DFN,PRSIEN)=+Y K DIC G:DFN<1 EX
"RTN","PRSPUE",13,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT(0)=-DT W ! D ^%DT
"RTN","PRSPUE",14,0)
 G:Y<1 EX
"RTN","PRSPUE",15,0)
 S (DATEX,D1)=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1)
"RTN","PRSPUE",16,0)
 G EX:PPI<1
"RTN","PRSPUE",17,0)
 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPUE",18,0)
 W @IOF
"RTN","PRSPUE",19,0)
 D DIS^PRSPDESR
"RTN","PRSPUE",20,0)
 I 'QT D PROMPT
"RTN","PRSPUE",21,0)
 ; 
"RTN","PRSPUE",22,0)
 G T1 ;ask for employee again
"RTN","PRSPUE",23,0)
 Q
"RTN","PRSPUE",24,0)
 ;
"RTN","PRSPUE",25,0)
TOP W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPUE",26,0)
 W !?32,"UNLOCK DAILY ESR"
"RTN","PRSPUE",27,0)
 Q
"RTN","PRSPUE",28,0)
 ;
"RTN","PRSPUE",29,0)
DIS ; Display Memorandum
"RTN","PRSPUE",30,0)
 ;
"RTN","PRSPUE",31,0)
 D DIS^PRSPDESR
"RTN","PRSPUE",32,0)
 Q
"RTN","PRSPUE",33,0)
 ;
"RTN","PRSPUE",34,0)
PROMPT ;
"RTN","PRSPUE",35,0)
 ; Determine current status of ESR
"RTN","PRSPUE",36,0)
 ;
"RTN","PRSPUE",37,0)
 K IENS,PRSFDA
"RTN","PRSPUE",38,0)
 N IENS,PRSFDA,STATUS,REMARK
"RTN","PRSPUE",39,0)
 S Y=DATEX
"RTN","PRSPUE",40,0)
 S PRSD=$P($G(^PRST(458,"AD",Y)),U,2)
"RTN","PRSPUE",41,0)
 D DD^%DT
"RTN","PRSPUE",42,0)
 S DATEX=Y
"RTN","PRSPUE",43,0)
 S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,7)),U,1)
"RTN","PRSPUE",44,0)
 I STATUS<4 D  Q
"RTN","PRSPUE",45,0)
 . W !!,"The date must be SIGNED, APPROVED or a DAY OFF to be eligible for unlocking."
"RTN","PRSPUE",46,0)
 ;
"RTN","PRSPUE",47,0)
 S DIR(0)="YAO"
"RTN","PRSPUE",48,0)
 S DIR("A")="Confirm Unlock of "_DATEX_" (Y/N): "
"RTN","PRSPUE",49,0)
 W !!
"RTN","PRSPUE",50,0)
 D ^DIR K DIR
"RTN","PRSPUE",51,0)
 Q:'Y
"RTN","PRSPUE",52,0)
 ;
"RTN","PRSPUE",53,0)
 S REMARK=$$GETREM^PRSPSAP3()
"RTN","PRSPUE",54,0)
 Q:REMARK="^"
"RTN","PRSPUE",55,0)
 S IENS=PRSD_","_PRSIEN_","_PPI_","
"RTN","PRSPUE",56,0)
 S PRSFDA(458.02,IENS,148)=$G(REMARK) ; remarks
"RTN","PRSPUE",57,0)
 S PRSFDA(458.02,IENS,146)=3 ; RESUBMIT
"RTN","PRSPUE",58,0)
 S PRSFDA(458.02,IENS,147)="@" ; Delete PT PHYSICIAN DATE/TIME STAMP
"RTN","PRSPUE",59,0)
 D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSPUE",60,0)
 ; if timecard has timekeeper status then clean out TC post otherwise
"RTN","PRSPUE",61,0)
 ; reapproval may require payroll to return the timecard or do 
"RTN","PRSPUE",62,0)
 ; a corrected timecard first.
"RTN","PRSPUE",63,0)
 N RETURN S RETURN=$$CLRTCDY^PRSPSAPU(PPI,PRSIEN,PRSD,)
"RTN","PRSPUE",64,0)
 ;
"RTN","PRSPUE",65,0)
 ;
"RTN","PRSPUE",66,0)
 W @IOF
"RTN","PRSPUE",67,0)
 D DIS^PRSPDESR
"RTN","PRSPUE",68,0)
 Q
"RTN","PRSPUE",69,0)
 ;
"RTN","PRSPUE",70,0)
EX ; Clean up variables
"RTN","PRSPUE",71,0)
 K D,D1,DASH,DATA0,DATA5,DATA6,DATA7,PRSD,DAY1,DFN,HRS,MT,PDT,PG,POP
"RTN","PRSPUE",72,0)
 K PPE,PPI,PRSALST,PRSAPGM,PRSTLV,PTPRMKS,QUIT,QT,RC,RCEX,SCRTTL
"RTN","PRSPUE",73,0)
 K SEG,SSN,START,STAT,STATEX,STOP,T1,T1EX,TLE,TLI,TLSCREEN,TOT,TOTEX
"RTN","PRSPUE",74,0)
 K X,Y,%DT,%ZIS
"RTN","PRSPUE",75,0)
 Q
"RTN","PRSPUT1")
0^21^B56311974^n/a
"RTN","PRSPUT1",1,0)
PRSPUT1 ;WOIFO/MGD - PART TIME PHYSICIAN UTILITIES #1 ;05/17/05
"RTN","PRSPUT1",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPUT1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPUT1",4,0)
 ;
"RTN","PRSPUT1",5,0)
 ;The following routine contains various utilities for the  Part Time
"RTN","PRSPUT1",6,0)
 ;Physician functionality that was added as part of patch PRS*4.0*93.
"RTN","PRSPUT1",7,0)
 ;
"RTN","PRSPUT1",8,0)
 ;----------------------------------------------------------------------
"RTN","PRSPUT1",9,0)
 ; Determine the IEN of the PT Physician's memorandum if any for the
"RTN","PRSPUT1",10,0)
 ; current date or the date specified in the MDAT parameter.
"RTN","PRSPUT1",11,0)
 ; Input: PTPIEN - IEN of the PT Physician
"RTN","PRSPUT1",12,0)
 ;          MDAT - Optional - date within memorandum in FileMan format
"RTN","PRSPUT1",13,0)
 ;
"RTN","PRSPUT1",14,0)
 ; Output: IEN^STATUS
"RTN","PRSPUT1",15,0)
 ;         IEN - of the PT Phy's memorandum in the #458.7 file or 0
"RTN","PRSPUT1",16,0)
 ;      STATUS - of the memorandum
"RTN","PRSPUT1",17,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT1",18,0)
MIEN(PRSIEN,MDAT) ;
"RTN","PRSPUT1",19,0)
 Q:'PRSIEN 0_"^"
"RTN","PRSPUT1",20,0)
 N ENDAT,MDATA,QUIT,STATUS,STDAT,TDAT,MIEN
"RTN","PRSPUT1",21,0)
 S MDAT=$G(MDAT,DT)
"RTN","PRSPUT1",22,0)
 S (MIEN,QUIT)=0
"RTN","PRSPUT1",23,0)
 F  S MIEN=$O(^PRST(458.7,"B",PRSIEN,MIEN)) Q:'MIEN  D  Q:QUIT
"RTN","PRSPUT1",24,0)
 . S MDATA=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPUT1",25,0)
 . S STDAT=$P(MDATA,U,2)                  ; START DATE OF MEMORANDUM
"RTN","PRSPUT1",26,0)
 . S ENDAT=$P(MDATA,U,3)                  ; END DATE OF MEMORANDUM
"RTN","PRSPUT1",27,0)
 . S STATUS=$P(MDATA,U,6)                 ; STATUS OF MEMORANDUM
"RTN","PRSPUT1",28,0)
 . S TDAT=$P($G(^PRST(458.7,MIEN,4)),U,1) ; TERMINATION DATE
"RTN","PRSPUT1",29,0)
 . I TDAT D
"RTN","PRSPUT1",30,0)
 . . I TDAT<ENDAT S ENDAT=TDAT
"RTN","PRSPUT1",31,0)
 . I MDAT'<STDAT,MDAT'>ENDAT S QUIT=1
"RTN","PRSPUT1",32,0)
 I MIEN="" S MIEN=0,STATUS=0
"RTN","PRSPUT1",33,0)
 Q MIEN_"^"_STATUS
"RTN","PRSPUT1",34,0)
 ;
"RTN","PRSPUT1",35,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT1",36,0)
 ;Display information on a PT Physician's memoranda
"RTN","PRSPUT1",37,0)
 ; Input: PRSIEN - IEN of the PT Physician.
"RTN","PRSPUT1",38,0)
 ;        SCRTTL - Title for the screen.
"RTN","PRSPUT1",39,0)
 ;         ARRAY - The array where the message to be printed will be
"RTN","PRSPUT1",40,0)
 ;                 stored. (optional) If not specified, no array will
"RTN","PRSPUT1",41,0)
 ;                 be created.
"RTN","PRSPUT1",42,0)
 ;         INDEX - The index where the array will start. (optional) This
"RTN","PRSPUT1",43,0)
 ;                 will be set to 1 if no index is passed.
"RTN","PRSPUT1",44,0)
 ;           PPI - Optional: IEN of the desired PP.  If supplied, the
"RTN","PRSPUT1",45,0)
 ;                 external format will be displayed on line 
"RTN","PRSPUT1",46,0)
 ;
"RTN","PRSPUT1",47,0)
 ; Output: VA header, screen title and 10 fields to identify the PT Phy
"RTN","PRSPUT1",48,0)
 ;         Array with the same data if the ARRAY parameter is passed.
"RTN","PRSPUT1",49,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT1",50,0)
HDR(PRSIEN,SCRTTL,ARRAY,INDEX,PPI) ;
"RTN","PRSPUT1",51,0)
 Q:'PRSIEN
"RTN","PRSPUT1",52,0)
 S SCRTTL=$G(SCRTTL,"")
"RTN","PRSPUT1",53,0)
 S ARRAY=$G(ARRAY,"")
"RTN","PRSPUT1",54,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX
"RTN","PRSPUT1",55,0)
 N C0,DATE,PPE,SSN,TAB,TEXT,X,YR
"RTN","PRSPUT1",56,0)
 I $G(PPI)="" D  ; If no PPI passed in get last PP in #459
"RTN","PRSPUT1",57,0)
 . S PPE="A",PPE=$O(^PRST(459,PPE),-1)
"RTN","PRSPUT1",58,0)
 . S PPE=$P($G(^PRST(459,PPE,0)),U,1)
"RTN","PRSPUT1",59,0)
 I $G(PPI)>0 S PPE=$P($G(^PRST(458,PPI,0)),U,1)
"RTN","PRSPUT1",60,0)
 S TEXT="PP:"_PPE,$E(TEXT,26)="",TEXT=TEXT_"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSPUT1",61,0)
 D NOW^%DTC
"RTN","PRSPUT1",62,0)
 S YR=%I(3)+1700,YR=$E(YR,3,4)
"RTN","PRSPUT1",63,0)
 S DATE=%I(1)_"/"_%I(2)_"/"_YR
"RTN","PRSPUT1",64,0)
 S $E(TEXT,73)="",TEXT=TEXT_DATE
"RTN","PRSPUT1",65,0)
 D A1 ; Line #1
"RTN","PRSPUT1",66,0)
 S TAB=39-($L(SCRTTL)\2)
"RTN","PRSPUT1",67,0)
 S $E(TEXT,TAB)="",TEXT=TEXT_SCRTTL
"RTN","PRSPUT1",68,0)
 D A1 ; Line #2
"RTN","PRSPUT1",69,0)
 S C0=^PRSPC(PRSIEN,0)
"RTN","PRSPUT1",70,0)
 S TEXT=$P(C0,U,1),$E(TEXT,70)=""
"RTN","PRSPUT1",71,0)
 S SSN=$P(C0,U,9)
"RTN","PRSPUT1",72,0)
 S SSN="XXX-XX-"_$E(SSN,6,9)
"RTN","PRSPUT1",73,0)
 S TEXT=TEXT_SSN
"RTN","PRSPUT1",74,0)
 D A1 ; Line #3
"RTN","PRSPUT1",75,0)
 S TEXT="Pay Plan: "_$P(C0,"^",21)_"     Duty Basis: "_$P(C0,"^",10)
"RTN","PRSPUT1",76,0)
 S TEXT=TEXT_"     FLSA: "_$P(C0,"^",12)_"     Normal Hours: "
"RTN","PRSPUT1",77,0)
 S TEXT=TEXT_$J($P(C0,"^",16),3)_"     Comp/Flex: "
"RTN","PRSPUT1",78,0)
 S TEXT=TEXT_$P($G(^PRSPC(PRSIEN,1)),"^",7)
"RTN","PRSPUT1",79,0)
 D A1 ; Line #4
"RTN","PRSPUT1",80,0)
 S TEXT="T&L: "_$P(C0,"^",8),$E(TEXT,69)=""
"RTN","PRSPUT1",81,0)
 S TEXT=TEXT_"Station: "_$P(C0,"^",7)
"RTN","PRSPUT1",82,0)
 D A1 ; Line #5
"RTN","PRSPUT1",83,0)
 K INDEX,%I
"RTN","PRSPUT1",84,0)
 Q
"RTN","PRSPUT1",85,0)
 ;
"RTN","PRSPUT1",86,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT1",87,0)
 ; Display information on a PT Physician's memoranda
"RTN","PRSPUT1",88,0)
 ; Input: PRSIEN - IEN of the PT Physician
"RTN","PRSPUT1",89,0)
 ;          MIEN - IEN of the PT Phy's memorandum in #458.7
"RTN","PRSPUT1",90,0)
 ;         ARRAY - The array where the message to be printed will be
"RTN","PRSPUT1",91,0)
 ;                 stored. (Optional) If not specified, no array will
"RTN","PRSPUT1",92,0)
 ;                 be created.
"RTN","PRSPUT1",93,0)
 ;         INDEX - The index where the array will start. (optional) This
"RTN","PRSPUT1",94,0)
 ;                 will be set to 1 if no index is passed.
"RTN","PRSPUT1",95,0)
 ;         HRSCO - Carrryover Hours from a prior memorandum. (optional)
"RTN","PRSPUT1",96,0)
 ;
"RTN","PRSPUT1",97,0)
 ; Output: 4 line summary of the PT Phy's current memorandum
"RTN","PRSPUT1",98,0)
 ;         Array with the same data if the ARRAY parameter is passed.
"RTN","PRSPUT1",99,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT1",100,0)
MEM(PRSIEN,MIEN,ARRAY,INDEX,HRSCO) ;
"RTN","PRSPUT1",101,0)
 Q:'PRSIEN&('MIEN)
"RTN","PRSPUT1",102,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX
"RTN","PRSPUT1",103,0)
 N AHRS,AHTCM,COHRS,DATA,EDAT,ENDDAT,HRSWK,HTSHBW,I,IEN458,LASTDAY,LASTPP
"RTN","PRSPUT1",104,0)
 N LASTPPE,LPPP,NPHRS,OTHRS,POHC,POMC,POT,PPP,QUIT,TAB,TDAT,TDATEX,TEXT
"RTN","PRSPUT1",105,0)
 N THRSWK,TTEXT,WPHRS
"RTN","PRSPUT1",106,0)
 ; Load 0 node from #458.7.  Quit if it doesn't exist
"RTN","PRSPUT1",107,0)
 S DATA=$G(^PRST(458.7,MIEN,0))
"RTN","PRSPUT1",108,0)
 Q:DATA=""
"RTN","PRSPUT1",109,0)
 ; Determine last PP processed
"RTN","PRSPUT1",110,0)
 S LASTPP="A"
"RTN","PRSPUT1",111,0)
 S LASTPP=$O(^PRST(459,LASTPP),-1)
"RTN","PRSPUT1",112,0)
 Q:'LASTPP
"RTN","PRSPUT1",113,0)
 S LASTPPE=$P(^PRST(459,LASTPP,0),U,1)
"RTN","PRSPUT1",114,0)
 S IEN458="",IEN458=$O(^PRST(458,"B",LASTPPE,IEN458))
"RTN","PRSPUT1",115,0)
 Q:'IEN458
"RTN","PRSPUT1",116,0)
 S LASTDAY=$P($G(^PRST(458,IEN458,2)),U,14)
"RTN","PRSPUT1",117,0)
 S TTEXT="Memorandum & Leave Status thru PP "_LASTPPE_" Ending "_LASTDAY
"RTN","PRSPUT1",118,0)
 S TAB=40-($L(TTEXT)\2)
"RTN","PRSPUT1",119,0)
 S $E(TEXT,TAB)="",TEXT=TEXT_TTEXT
"RTN","PRSPUT1",120,0)
 D A1 ; Line #1
"RTN","PRSPUT1",121,0)
 S Y=$P(DATA,U,2) ;       START DATE
"RTN","PRSPUT1",122,0)
 D DD^%DT
"RTN","PRSPUT1",123,0)
 S STDAT=Y
"RTN","PRSPUT1",124,0)
 S (EDAT,Y)=$P(DATA,U,3) ;       END DATE
"RTN","PRSPUT1",125,0)
 D DD^%DT
"RTN","PRSPUT1",126,0)
 S ENDDAT=Y
"RTN","PRSPUT1",127,0)
 ; Check for Termination
"RTN","PRSPUT1",128,0)
 S (TDAT,Y)=+$G(^PRST(458.7,MIEN,4))
"RTN","PRSPUT1",129,0)
 D DD^%DT
"RTN","PRSPUT1",130,0)
 S TDATEX=Y ; Termination Date External
"RTN","PRSPUT1",131,0)
 S AHRS=$P(DATA,U,4)   ; AGREED HOURS
"RTN","PRSPUT1",132,0)
 S COHRS=$P(DATA,U,9)  ; CARRYOVER HOURS
"RTN","PRSPUT1",133,0)
 S HRSCO=$G(HRSCO,0)   ; HRS CARRIED OVER FROM PRIOR MEMO
"RTN","PRSPUT1",134,0)
 S NPHRS=$P(DATA,U,12) ; NON-PAY HOURS
"RTN","PRSPUT1",135,0)
 S WPHRS=$P(DATA,U,13) ; WITHOUT PAY HOURS
"RTN","PRSPUT1",136,0)
 S THRSWK=0.00 ; TOTAL HOURS WORKED
"RTN","PRSPUT1",137,0)
 S POMC=0.00  ;   PERCENTAGE OF MEMORANDA COMPLETED
"RTN","PRSPUT1",138,0)
 S POHC=0.00  ;   PERCENTAGE OF HOURS COMPLETED
"RTN","PRSPUT1",139,0)
 S AHTCM=0.00 ;  AVERAGE HOURS TO COMPLETE MEMORANDUM
"RTN","PRSPUT1",140,0)
 S POT=0.00   ;    % OFF TARGET
"RTN","PRSPUT1",141,0)
 S OTHRS=0.00 ;  OFF TARGET HOURS
"RTN","PRSPUT1",142,0)
 S HRSWK=0.00 ;  HRS TOTAL FROM WORKED PAY PERIODS
"RTN","PRSPUT1",143,0)
 ;
"RTN","PRSPUT1",144,0)
 S $E(TEXT,2)="",TEXT=TEXT_"Start Date: "_STDAT
"RTN","PRSPUT1",145,0)
 S $E(TEXT,29,31)="|  ",TEXT=TEXT_"Agreed Hours: "_$J(AHRS,7,2)
"RTN","PRSPUT1",146,0)
 S $E(TEXT,55,57)="|  ",TEXT=TEXT_"      LWOP Hrs: "_$J(WPHRS,7,2)
"RTN","PRSPUT1",147,0)
 D A1 ; Line #2
"RTN","PRSPUT1",148,0)
 ;
"RTN","PRSPUT1",149,0)
 S LPPP=$$MEMCPP^PRSPUT3(MIEN)
"RTN","PRSPUT1",150,0)
 S PPP=$P(LPPP,U,2),LPPP=$P(LPPP,U,1)
"RTN","PRSPUT1",151,0)
 ; Check to see if last PP certified in #458 is in #459
"RTN","PRSPUT1",152,0)
 I LPPP'="",'$D(^PRST(459,"B",LPPP)) S PPP=PPP-1
"RTN","PRSPUT1",153,0)
 ; Loop to determine the total hours worked from multiple
"RTN","PRSPUT1",154,0)
 F I=1:1:PPP D
"RTN","PRSPUT1",155,0)
 . S HRSWK=HRSWK+$$GET1^DIQ(458.701,I_","_MIEN_",",1)
"RTN","PRSPUT1",156,0)
 S THRSWK=HRSWK+COHRS+HRSCO ; Adjust for carryover hours
"RTN","PRSPUT1",157,0)
 ; Hrs That Should Have Been Worked - has any NP and WP included
"RTN","PRSPUT1",158,0)
 S HTSHBW=((AHRS/26)*PPP)-NPHRS-WPHRS
"RTN","PRSPUT1",159,0)
 S OTHRS=THRSWK-HTSHBW
"RTN","PRSPUT1",160,0)
 S POHC=THRSWK/(AHRS-NPHRS-WPHRS)*100 ; Adjust % or Hrs Completed
"RTN","PRSPUT1",161,0)
 ; Only calculate the following if memo has started and not ended
"RTN","PRSPUT1",162,0)
 I PPP,PPP<26 D
"RTN","PRSPUT1",163,0)
 . I HTSHBW'=THRSWK D  ; PTP has worked more or less than Ave Hrs/PP
"RTN","PRSPUT1",164,0)
 . . I THRSWK'<(AHRS-NPHRS-WPHRS) S AHTCM=0
"RTN","PRSPUT1",165,0)
 . . I THRSWK<(AHRS-NPHRS-WPHRS) S AHTCM=AHRS-THRSWK-NPHRS-WPHRS/(26-PPP)
"RTN","PRSPUT1",166,0)
 . . S POT=(AHRS/26*PPP)-WPHRS-NPHRS
"RTN","PRSPUT1",167,0)
 . . S POT=THRSWK-POT/POT,POT=POT*100
"RTN","PRSPUT1",168,0)
 . I HTSHBW=THRSWK D  ; PTP has worked exactly Ave Hrs/PP
"RTN","PRSPUT1",169,0)
 . . S AHTCM=AHRS-THRSWK-WPHRS-NPHRS/(26-PPP)
"RTN","PRSPUT1",170,0)
 . . S POT=0
"RTN","PRSPUT1",171,0)
 I PPP=26 D  ; Memo has ended
"RTN","PRSPUT1",172,0)
 . S AHTCM=0
"RTN","PRSPUT1",173,0)
 . S POT=(AHRS/26*PPP)-WPHRS-NPHRS
"RTN","PRSPUT1",174,0)
 . S POT=THRSWK-POT/POT,POT=POT*100
"RTN","PRSPUT1",175,0)
 I PPP=0 D  ; 1st PP hasn't been processed
"RTN","PRSPUT1",176,0)
 . S AHTCM=AHRS-COHRS/26
"RTN","PRSPUT1",177,0)
 . S POT=0
"RTN","PRSPUT1",178,0)
 I TDAT D
"RTN","PRSPUT1",179,0)
 . S $E(TEXT,2)="",TEXT=TEXT_"TERMINATED: "_TDATEX
"RTN","PRSPUT1",180,0)
 I TDAT=0 S $E(TEXT,4)="",TEXT=TEXT_"End Date: "_ENDDAT
"RTN","PRSPUT1",181,0)
 S $E(TEXT,29,31)="|  ",TEXT=TEXT_"Hours Worked: "_$J(HRSWK,7,2)
"RTN","PRSPUT1",182,0)
 S $E(TEXT,55,57)="|  ",TEXT=TEXT_"   Non Pay Hrs: "_$J(NPHRS,7,2)
"RTN","PRSPUT1",183,0)
 D A1 ; Line #3
"RTN","PRSPUT1",184,0)
 ;
"RTN","PRSPUT1",185,0)
 S POMC=PPP_" of 26 PP = "_$J(100*(PPP/26),6,2)_"%"
"RTN","PRSPUT1",186,0)
 I PPP<10 S $E(TEXT,6)="",TEXT=TEXT_POMC
"RTN","PRSPUT1",187,0)
 I PPP>9 S $E(TEXT,5)="",TEXT=TEXT_POMC
"RTN","PRSPUT1",188,0)
 S $E(TEXT,29,30)="| "
"RTN","PRSPUT1",189,0)
 S TEXT=TEXT_"Carryover Hrs: "_$J($S(HRSCO:HRSCO,1:COHRS),7,2)
"RTN","PRSPUT1",190,0)
 S $E(TEXT,55,57)="|  ",TEXT=TEXT_"Off Target Hrs: "_$J(OTHRS,7,2)
"RTN","PRSPUT1",191,0)
 D A1 ; Line #4
"RTN","PRSPUT1",192,0)
 ;
"RTN","PRSPUT1",193,0)
 S TEXT="% Hrs Completed = "_$J(POHC,6,2)_"%"
"RTN","PRSPUT1",194,0)
 S $E(TEXT,29,31)="|  ",TEXT=TEXT_"   Total Hrs: "
"RTN","PRSPUT1",195,0)
 S TEXT=TEXT_$J(THRSWK,7,2)
"RTN","PRSPUT1",196,0)
 S $E(TEXT,55,57)="|  ",TEXT=TEXT_"  Off Target %: "_$J(POT,7,2)
"RTN","PRSPUT1",197,0)
 D A1 ; Line #5
"RTN","PRSPUT1",198,0)
 ;
"RTN","PRSPUT1",199,0)
 I PPP<26 D
"RTN","PRSPUT1",200,0)
 . S TEXT=(AHRS-NPHRS-WPHRS)-THRSWK,TEXT=TEXT/(26-PPP)
"RTN","PRSPUT1",201,0)
 . S TEXT=$FN(TEXT,"",2)
"RTN","PRSPUT1",202,0)
 . S TEXT="   Agreement will be met by averaging "_TEXT
"RTN","PRSPUT1",203,0)
 . S TEXT=TEXT_" Hrs/PP during remainder of memo."
"RTN","PRSPUT1",204,0)
 ;
"RTN","PRSPUT1",205,0)
 I PPP=26 D
"RTN","PRSPUT1",206,0)
 . S $E(TEXT,30)="",TEXT=TEXT_"This memorandum has ended"
"RTN","PRSPUT1",207,0)
 ;
"RTN","PRSPUT1",208,0)
 I TDAT D
"RTN","PRSPUT1",209,0)
 . I LPPP'="" D
"RTN","PRSPUT1",210,0)
 . . S LPPP=$O(^PRST(458,"B",LPPP,0))
"RTN","PRSPUT1",211,0)
 . . S LPPP=$P($G(^PRST(458,LPPP,1)),U,14)
"RTN","PRSPUT1",212,0)
 . . I TDAT'>LPPP D  Q
"RTN","PRSPUT1",213,0)
 . . . S TEXT="",$E(TEXT,30)="",TEXT=TEXT_"This memorandum has ended"
"RTN","PRSPUT1",214,0)
 ;
"RTN","PRSPUT1",215,0)
 D A1 ; Line #6
"RTN","PRSPUT1",216,0)
 K INDEX,Y
"RTN","PRSPUT1",217,0)
 Q
"RTN","PRSPUT1",218,0)
 ;
"RTN","PRSPUT1",219,0)
A1 ; Set TEXT into the array
"RTN","PRSPUT1",220,0)
 ;
"RTN","PRSPUT1",221,0)
 N A1
"RTN","PRSPUT1",222,0)
 W !,TEXT
"RTN","PRSPUT1",223,0)
 I $G(ARRAY)'="" D
"RTN","PRSPUT1",224,0)
 . S A1="S "_ARRAY_INDEX_")="_""""_TEXT_""""
"RTN","PRSPUT1",225,0)
 . X A1
"RTN","PRSPUT1",226,0)
 . S INDEX=INDEX+1
"RTN","PRSPUT1",227,0)
 S TEXT=""
"RTN","PRSPUT1",228,0)
 Q
"RTN","PRSPUT1",229,0)
 ;
"RTN","PRSPUT1",230,0)
INDEX ; Get last index in array if not passed in
"RTN","PRSPUT1",231,0)
 ;
"RTN","PRSPUT1",232,0)
 S INDEX="S INDEX=$O("_ARRAY_"""A""),-1)"
"RTN","PRSPUT1",233,0)
 X INDEX
"RTN","PRSPUT1",234,0)
 I 'INDEX S INDEX=1 Q
"RTN","PRSPUT1",235,0)
 I INDEX S INDEX=INDEX+1
"RTN","PRSPUT1",236,0)
 Q
"RTN","PRSPUT2")
0^20^B17270700^n/a
"RTN","PRSPUT2",1,0)
PRSPUT2 ;WOIFO/MGD - PART TIME PHYSICIAN UTILITIES #2 ;07/08/2005
"RTN","PRSPUT2",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPUT2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPUT2",4,0)
 ;
"RTN","PRSPUT2",5,0)
 ;The following routine contains various utilities for the  Part Time
"RTN","PRSPUT2",6,0)
 ;Physician functionality that was added as part of patch PRS*4.0*93.
"RTN","PRSPUT2",7,0)
 ;
"RTN","PRSPUT2",8,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT2",9,0)
 ; Display information on the hours worked by the PT Physician per PP
"RTN","PRSPUT2",10,0)
 ; Input: PRSIEN - IEN of the PT Physician
"RTN","PRSPUT2",11,0)
 ;          MIEN - IEN of the PT Phy's memorandum in #458.7
"RTN","PRSPUT2",12,0)
 ;         ARRAY - The array where the message to be printed will be
"RTN","PRSPUT2",13,0)
 ;                 stored. (Optional) If not specified, no array will
"RTN","PRSPUT2",14,0)
 ;                 be created.
"RTN","PRSPUT2",15,0)
 ;         INDEX - The index where the array will start. (optional) This
"RTN","PRSPUT2",16,0)
 ;                 will be set to 1 if no index is passed.
"RTN","PRSPUT2",17,0)
 ;
"RTN","PRSPUT2",18,0)
 ; Output: 6 line summary of the Pay Periods covered by the PT Phy's
"RTN","PRSPUT2",19,0)
 ;         memorandum and the hours worked during each of them.
"RTN","PRSPUT2",20,0)
 ;         Array with the same data if the ARRAY parameter is passed.
"RTN","PRSPUT2",21,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT2",22,0)
PPSUM(PRSIEN,MIEN,ARRAY,INDEX) ;
"RTN","PRSPUT2",23,0)
 ;
"RTN","PRSPUT2",24,0)
 Q:'PRSIEN&('MIEN)
"RTN","PRSPUT2",25,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX^PRSPUT1
"RTN","PRSPUT2",26,0)
 N I,J,PPHRS,PPNUM,TEXT
"RTN","PRSPUT2",27,0)
 S TEXT=""
"RTN","PRSPUT2",28,0)
 D A1^PRSPUT1 ; Blank Line
"RTN","PRSPUT2",29,0)
 F I=1:1:6 D
"RTN","PRSPUT2",30,0)
 . S TEXT=" "
"RTN","PRSPUT2",31,0)
 . F J=I:6:26 D
"RTN","PRSPUT2",32,0)
 . . S PPNUM=$$GET1^DIQ(458.701,J_","_MIEN_",",.01)_": "
"RTN","PRSPUT2",33,0)
 . . S TEXT=TEXT_PPNUM
"RTN","PRSPUT2",34,0)
 . . S PPHRS=$$GET1^DIQ(458.701,J_","_MIEN_",",1)
"RTN","PRSPUT2",35,0)
 . . S TEXT=TEXT_$S(PPHRS'="":$J(PPHRS,6,2),1:"      ")
"RTN","PRSPUT2",36,0)
 . . S TEXT=TEXT_$S(J'<25:"",1:"   ")
"RTN","PRSPUT2",37,0)
 . D A1^PRSPUT1
"RTN","PRSPUT2",38,0)
 D A1^PRSPUT1,A1^PRSPUT1 ; 2 Blank lines
"RTN","PRSPUT2",39,0)
 Q
"RTN","PRSPUT2",40,0)
 ;
"RTN","PRSPUT2",41,0)
 ;----------------------------------------------------------------------
"RTN","PRSPUT2",42,0)
 ; Retrieve and display the current status of each daily ESR within
"RTN","PRSPUT2",43,0)
 ; the specified PP
"RTN","PRSPUT2",44,0)
 ; Input: PRSIEN - IEN of the PT Physician
"RTN","PRSPUT2",45,0)
 ;           PPI - IEN of the Pay Period
"RTN","PRSPUT2",46,0)
 ;
"RTN","PRSPUT2",47,0)
 ; Output: 8 lines with the summary of the daily ESRs within the PP
"RTN","PRSPUT2",48,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT2",49,0)
ESRSTAT(PRSIEN,PPI) ;
"RTN","PRSPUT2",50,0)
 Q:'PRSIEN&('PPI)
"RTN","PRSPUT2",51,0)
 N ATOT,DATA,DAY,DAY2CHK,DAYE,DTEXT,ESRHRS,HRS,I,INDX,J,MEAL,SEG,START
"RTN","PRSPUT2",52,0)
 N STATEX,STATUS,STOP,TEXT,TOT
"RTN","PRSPUT2",53,0)
 S DAYE=$G(^PRST(458,PPI,2)),(ESRHRS(1),ESRHRS(2))=0
"RTN","PRSPUT2",54,0)
 F DAY=1:1:14 D
"RTN","PRSPUT2",55,0)
 . S INDX=$S(DAY<8:1,1:2)
"RTN","PRSPUT2",56,0)
 . S DATA=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,5))
"RTN","PRSPUT2",57,0)
 . F SEG=1:5:31 D
"RTN","PRSPUT2",58,0)
 . . S START=$P(DATA,U,SEG),STOP=$P(DATA,U,SEG+1),TOT=$P(DATA,U,SEG+2)
"RTN","PRSPUT2",59,0)
 . . Q:START=""
"RTN","PRSPUT2",60,0)
 . . Q:TOT="WP"  ; Don't count Without Pay
"RTN","PRSPUT2",61,0)
 . . S MEAL=$P(DATA,U,SEG+4)
"RTN","PRSPUT2",62,0)
 . . S HRS=$$AMT^PRSPSAPU(START,STOP,MEAL)
"RTN","PRSPUT2",63,0)
 . . S ESRHRS(INDX)=ESRHRS(INDX)+HRS
"RTN","PRSPUT2",64,0)
 S TEXT="          ESR Hours Week 1: "_$J(ESRHRS(1),6,2)
"RTN","PRSPUT2",65,0)
 S TEXT=TEXT_"     Week 2: "_$J(ESRHRS(2),6,2)
"RTN","PRSPUT2",66,0)
 S TEXT=TEXT_"     Total: "_$J(ESRHRS(1)+ESRHRS(2),6,2)
"RTN","PRSPUT2",67,0)
 W !,TEXT
"RTN","PRSPUT2",68,0)
 W !,"Day Week 1 - ",$P(DAYE,U,1),?41,"Day Week 2 - ",$P(DAYE,U,8)
"RTN","PRSPUT2",69,0)
 ; Loop through each daily ESR record
"RTN","PRSPUT2",70,0)
 F DAY=1:1:7 D
"RTN","PRSPUT2",71,0)
 . S DAY2CHK=DAY D ATOT
"RTN","PRSPUT2",72,0)
 . S $E(DTEXT,42)=""
"RTN","PRSPUT2",73,0)
 . S TEXT=DTEXT
"RTN","PRSPUT2",74,0)
 . S DAY2CHK=DAY2CHK+7 D ATOT
"RTN","PRSPUT2",75,0)
 . S TEXT=TEXT_DTEXT
"RTN","PRSPUT2",76,0)
 . W !,TEXT
"RTN","PRSPUT2",77,0)
 Q
"RTN","PRSPUT2",78,0)
 ;
"RTN","PRSPUT2",79,0)
ATOT ; Convert STATUS to external and determine Types of Time posted
"RTN","PRSPUT2",80,0)
 S ATOT="" ; All Types Of Time posted on the day
"RTN","PRSPUT2",81,0)
 S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY2CHK,7)),U,1)
"RTN","PRSPUT2",82,0)
 S STATEX=$$EXTERNAL^DILFD(458.02,146,"",STATUS)
"RTN","PRSPUT2",83,0)
 S DATA=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY2CHK,5))
"RTN","PRSPUT2",84,0)
 S DTEXT=$S(DAY2CHK<10:" "_DAY2CHK,1:DAY2CHK)
"RTN","PRSPUT2",85,0)
 S DTEXT=DTEXT_"  "_$E($P(DAYE,U,DAY),1,3)_"  "_STATEX
"RTN","PRSPUT2",86,0)
 I DATA'="" D
"RTN","PRSPUT2",87,0)
 . F SEG=0:1:6 Q:$P(DATA,U,5*SEG+1)=""  D
"RTN","PRSPUT2",88,0)
 . . S TOT=$P(DATA,U,5*SEG+3)
"RTN","PRSPUT2",89,0)
 . . I TOT'=""&(ATOT'[TOT) S ATOT=$S(ATOT="":TOT,1:ATOT_", "_TOT)
"RTN","PRSPUT2",90,0)
 ; If status is RESUBMIT check for Supervisor text
"RTN","PRSPUT2",91,0)
 N SUPCOM
"RTN","PRSPUT2",92,0)
 S SUPCOM=""
"RTN","PRSPUT2",93,0)
 I STATUS=3 D
"RTN","PRSPUT2",94,0)
 . S SUPCOM=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY2CHK,6)),U,2)
"RTN","PRSPUT2",95,0)
 . I SUPCOM'="" S ATOT=" "_SUPCOM
"RTN","PRSPUT2",96,0)
 I "^2^4^5^"[("^"_STATUS_"^") S $E(DTEXT,19,20)="- "
"RTN","PRSPUT2",97,0)
 I STATUS=3,SUPCOM="" S $E(DTEXT,19,20)="- "
"RTN","PRSPUT2",98,0)
 S DTEXT=DTEXT_ATOT
"RTN","PRSPUT2",99,0)
 Q
"RTN","PRSPUT2",100,0)
 ;
"RTN","PRSPUT2",101,0)
PRSIEN(MSGF) ; Employee IEN Extrinsic Function
"RTN","PRSPUT2",102,0)
 ; input
"RTN","PRSPUT2",103,0)
 ;   MSGF - (optional) message flag, true (=1) to write error message
"RTN","PRSPUT2",104,0)
 ;   DUZ  - must be defined in symbol table
"RTN","PRSPUT2",105,0)
 ; returns IEN in file 450 or null
"RTN","PRSPUT2",106,0)
 N PRSIEN,SSN
"RTN","PRSPUT2",107,0)
 S PRSIEN=""
"RTN","PRSPUT2",108,0)
 S SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSPUT2",109,0)
 S:SSN'="" PRSIEN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSPUT2",110,0)
 I 'PRSIEN,$G(MSGF) W $C(7),!!,"Your SSN was not found in both the New Person & Employee File!"
"RTN","PRSPUT2",111,0)
 Q PRSIEN
"RTN","PRSPUT2",112,0)
 ;
"RTN","PRSPUT2",113,0)
ESIGC(MSGF) ; Electronic Signature Code Extrinsic Function
"RTN","PRSPUT2",114,0)
 ; input
"RTN","PRSPUT2",115,0)
 ;   MSGF - (optional) message flag, true (=1) to write error message
"RTN","PRSPUT2",116,0)
 ;   DUZ  - must be defined in symbol table
"RTN","PRSPUT2",117,0)
 ; returns true  (=1) if the user has an electronic signature code
"RTN","PRSPUT2",118,0)
 ;         false (=0) if the user does not
"RTN","PRSPUT2",119,0)
 N PRSRET
"RTN","PRSPUT2",120,0)
 S PRSRET=($$GET1^DIQ(200,DUZ_",",20.4)'="")
"RTN","PRSPUT2",121,0)
 I 'PRSRET,$G(MSGF) W $C(7),!!,"You must establish an electronic signature code before using this option!",!,"This can be done with the 'Electronic Signature code Edit' option."
"RTN","PRSPUT2",122,0)
 Q PRSRET
"RTN","PRSPUT3")
0^48^B60317538^n/a
"RTN","PRSPUT3",1,0)
PRSPUT3 ;WOIFO/MGD,JAH - PART TIME PHYSICIAN UTILITIES #1 ;06/15/05
"RTN","PRSPUT3",2,0)
 ;;4.0;PAID;**93**;Sep 21, 1995;Build 7
"RTN","PRSPUT3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPUT3",4,0)
 ;
"RTN","PRSPUT3",5,0)
 ;Utilities for Part Time Physician patch PRS*4.0*93.
"RTN","PRSPUT3",6,0)
 ;
"RTN","PRSPUT3",7,0)
PTP(PRSIEN) ;Check for potential PTP (has a memo on file)
"RTN","PRSPUT3",8,0)
 ; input PRSIEN = employee IEN (file 450)
"RTN","PRSPUT3",9,0)
 ; result = 1 or 0, true (1) if employee has any memos on file
"RTN","PRSPUT3",10,0)
 Q $S($O(^PRST(458.7,"B",PRSIEN,0)):1,1:0)
"RTN","PRSPUT3",11,0)
 ;
"RTN","PRSPUT3",12,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",13,0)
 ; Display PTP AL info
"RTN","PRSPUT3",14,0)
 ; Input: PRSIEN - IEN of PT Physician
"RTN","PRSPUT3",15,0)
 ;         ARRAY - Array where leave info is stored. (Optional) If not 
"RTN","PRSPUT3",16,0)
 ;                 specified, no array is created.
"RTN","PRSPUT3",17,0)
 ;         INDEX - Index to start array. (optional) set to 1 if not spec
"RTN","PRSPUT3",18,0)
 ; Output: 2 line summary-current AL bal, fut reqs and potential loss.
"RTN","PRSPUT3",19,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",20,0)
AL(PRSIEN,ARRAY,INDEX) ;
"RTN","PRSPUT3",21,0)
 Q:'PRSIEN
"RTN","PRSPUT3",22,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX^PRSPUT1
"RTN","PRSPUT3",23,0)
 N AINC,ALBAL,ALTBL,APALHRS,EOLYD,LVG,TEXT,X,X1,X2,Y,MAYLOSE,LDPINV
"RTN","PRSPUT3",24,0)
 ;
"RTN","PRSPUT3",25,0)
 ; Max Carryover
"RTN","PRSPUT3",26,0)
 S MAXOVER=240
"RTN","PRSPUT3",27,0)
 ;
"RTN","PRSPUT3",28,0)
 ; current AL bal
"RTN","PRSPUT3",29,0)
 S ALBAL=$P($G(^PRSPC(PRSIEN,"ANNUAL")),U,3)
"RTN","PRSPUT3",30,0)
 ;
"RTN","PRSPUT3",31,0)
 ; last day of curr leave yr
"RTN","PRSPUT3",32,0)
 S EOLYD=$$GETLDOYR()
"RTN","PRSPUT3",33,0)
 ;
"RTN","PRSPUT3",34,0)
 ; last day proc from 459 & inverse
"RTN","PRSPUT3",35,0)
 S LDP=$P($G(^PRST(458,$O(^PRST(458,"AB",$O(^PRST(459,"AB",""),-1),0)),1)),U,14)
"RTN","PRSPUT3",36,0)
 S LDPINV=9999999-LDP
"RTN","PRSPUT3",37,0)
 ;
"RTN","PRSPUT3",38,0)
 ; future al approved (ranges from LastDayProcessed459-EndOfLeaveYear)
"RTN","PRSPUT3",39,0)
 ; This is an estimate since we count all hrs for reqs that begin in 
"RTN","PRSPUT3",40,0)
 ; the current yr but cross into next
"RTN","PRSPUT3",41,0)
 S APALHRS=$$GETAPALH(PRSIEN,LDPINV,EOLYD)
"RTN","PRSPUT3",42,0)
 ;
"RTN","PRSPUT3",43,0)
 ; accrual from last pp proc to EOY
"RTN","PRSPUT3",44,0)
 S ACCRUAL=$$GETACCRU(PRSIEN,EOLYD,LDP)
"RTN","PRSPUT3",45,0)
 ;
"RTN","PRSPUT3",46,0)
 ; potential loss
"RTN","PRSPUT3",47,0)
 S MAYLOSE=$$GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER)
"RTN","PRSPUT3",48,0)
 ;
"RTN","PRSPUT3",49,0)
 ; Display
"RTN","PRSPUT3",50,0)
 S TEXT=""
"RTN","PRSPUT3",51,0)
 D A1^PRSPUT1 ; Blank line
"RTN","PRSPUT3",52,0)
 S TEXT="AL Bal: "_$J(ALBAL,6,2)
"RTN","PRSPUT3",53,0)
 S $E(TEXT,17)="",TEXT=TEXT_"Approved future AL thru Leave Year: "
"RTN","PRSPUT3",54,0)
 S TEXT=TEXT_$J(APALHRS,6,2)
"RTN","PRSPUT3",55,0)
 S $E(TEXT,60)="",TEXT=TEXT_"Max carryover: "_MAXOVER
"RTN","PRSPUT3",56,0)
 D A1^PRSPUT1 ; Line #1
"RTN","PRSPUT3",57,0)
 S Y=EOLYD
"RTN","PRSPUT3",58,0)
 D DD^%DT
"RTN","PRSPUT3",59,0)
 S TEXT="Potential AL hours to be lost by "_Y_" excluding Approved AL: "
"RTN","PRSPUT3",60,0)
 S TEXT=TEXT_MAYLOSE
"RTN","PRSPUT3",61,0)
 D A1^PRSPUT1 ; Line #2
"RTN","PRSPUT3",62,0)
 K INDEX
"RTN","PRSPUT3",63,0)
 Q
"RTN","PRSPUT3",64,0)
 ;
"RTN","PRSPUT3",65,0)
GETACCRU(PRSIEN,EOLYD,LDP) ; Calculate AL accrucal from last day of 
"RTN","PRSPUT3",66,0)
 ; pp processed in 459 (LDP) to end of leave year (EOLYD)
"RTN","PRSPUT3",67,0)
 ;
"RTN","PRSPUT3",68,0)
 N CO,LVG,NH,DB,AINC,X1,X2,INC
"RTN","PRSPUT3",69,0)
 ;
"RTN","PRSPUT3",70,0)
 S C0=$G(^PRSPC(PRSIEN,0)),LVG=$P(C0,"^",15),NH=+$P(C0,"^",16)
"RTN","PRSPUT3",71,0)
 S DB=$P(C0,"^",10),AINC=""
"RTN","PRSPUT3",72,0)
 Q:LVG'?1N!("123"'[LVG) 0
"RTN","PRSPUT3",73,0)
 I LVG=1 D  ; Leave Group 1
"RTN","PRSPUT3",74,0)
 . S AINC=$S(DB=1:4,1:NH+AINC/20\1)
"RTN","PRSPUT3",75,0)
 I LVG=2 D  ; Leave Group 2
"RTN","PRSPUT3",76,0)
 . S AINC=$S(DB=1:6,1:NH+AINC/13\1)
"RTN","PRSPUT3",77,0)
 I LVG=3 D  ; Leave Group 3
"RTN","PRSPUT3",78,0)
 . S AINC=$S(DB=1:8,1:NH+AINC/10\1)
"RTN","PRSPUT3",79,0)
 S X1=EOLYD,X2=LDP
"RTN","PRSPUT3",80,0)
 D ^%DTC
"RTN","PRSPUT3",81,0)
 S INC=X+13\14*AINC
"RTN","PRSPUT3",82,0)
 Q INC
"RTN","PRSPUT3",83,0)
 ;
"RTN","PRSPUT3",84,0)
GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER) ; Calculate potential hours to be lost
"RTN","PRSPUT3",85,0)
 N ALTBL
"RTN","PRSPUT3",86,0)
 S ALTBL=ALBAL+ACCRUAL-MAXOVER-APALHRS
"RTN","PRSPUT3",87,0)
 Q $S(ALTBL<0:0,1:ALTBL)
"RTN","PRSPUT3",88,0)
 ;
"RTN","PRSPUT3",89,0)
GETLDOYR() ; Calculate last day of the last pp of current year (EOLY)
"RTN","PRSPUT3",90,0)
 N X,I,X1,X2,NEXTYR,PRSYRDT
"RTN","PRSPUT3",91,0)
 S PRSYRDT=$P($T(DAT^PRSAPPU),";;",2)
"RTN","PRSPUT3",92,0)
 F I=1:1 S NEXTYR=$P(PRSYRDT,",",I) Q:NEXTYR>DT!(NEXTYR="")
"RTN","PRSPUT3",93,0)
 I NEXTYR="" Q DT
"RTN","PRSPUT3",94,0)
 S X1=NEXTYR,X2=-1
"RTN","PRSPUT3",95,0)
 D C^%DTC
"RTN","PRSPUT3",96,0)
 Q X
"RTN","PRSPUT3",97,0)
 ;
"RTN","PRSPUT3",98,0)
GETAPALH(PRSIEN,PPPIN,EOLYD) ; Approved AL hrs
"RTN","PRSPUT3",99,0)
 ;
"RTN","PRSPUT3",100,0)
 N APALHRS,EOLYDINV,LREND,LRIEN,LRSTRT,LRDATA
"RTN","PRSPUT3",101,0)
 ;
"RTN","PRSPUT3",102,0)
 S APALHRS=0 ; COUNTER-APproved Annual Leave HouR
"RTN","PRSPUT3",103,0)
 S EOLYDINV=9999999-EOLYD
"RTN","PRSPUT3",104,0)
 ;
"RTN","PRSPUT3",105,0)
 ; use inverse dt to loop chrono from future requests to recent ones
"RTN","PRSPUT3",106,0)
 ; Quit when end date hits last proc pp. Don't include canceled & other
"RTN","PRSPUT3",107,0)
 ; leave type reqs from AD index.
"RTN","PRSPUT3",108,0)
 ;
"RTN","PRSPUT3",109,0)
 S LREND=0
"RTN","PRSPUT3",110,0)
 F  S LREND=$O(^PRST(458.1,"AD",PRSIEN,LREND)) Q:(LREND'>0)!(LREND>PPPIN)  D
"RTN","PRSPUT3",111,0)
 . S LRIEN=0
"RTN","PRSPUT3",112,0)
 . F  S LRIEN=$O(^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)) Q:LRIEN'>0  D
"RTN","PRSPUT3",113,0)
 . . S LRSTRT=^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)
"RTN","PRSPUT3",114,0)
 . . S LRSTRT=9999999-LRSTRT
"RTN","PRSPUT3",115,0)
 . . ;
"RTN","PRSPUT3",116,0)
 . . ; skip if lv doesn't start in range-last pp proc to EOLY
"RTN","PRSPUT3",117,0)
 . . Q:LRSTRT'<PPPIN!(LRSTRT'>EOLYDINV)
"RTN","PRSPUT3",118,0)
 . . ; skip if not AL or App
"RTN","PRSPUT3",119,0)
 . . S LRDATA=$G(^PRST(458.1,LRIEN,0))
"RTN","PRSPUT3",120,0)
 . . Q:$P(LRDATA,U,7)'="AL"!($P(LRDATA,U,9)'="A")
"RTN","PRSPUT3",121,0)
 . . S APALHRS=APALHRS+$P(LRDATA,U,15)
"RTN","PRSPUT3",122,0)
 Q APALHRS
"RTN","PRSPUT3",123,0)
 ;
"RTN","PRSPUT3",124,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",125,0)
 ; Utility updates ESR Status and autopost any holidays
"RTN","PRSPUT3",126,0)
 ;
"RTN","PRSPUT3",127,0)
 ; Input:
"RTN","PRSPUT3",128,0)
 ;       PPI - The internal entry number of the PP
"RTN","PRSPUT3",129,0)
 ;    PRSIEN - The internal entry number of the PT Phy
"RTN","PRSPUT3",130,0)
 ;       DAY - (optional) If passed in the specific date (1-14) that
"RTN","PRSPUT3",131,0)
 ;               needs to be updated.  If a specific date is not
"RTN","PRSPUT3",132,0)
 ;               passed in all 14 days will be reviewed and updated
"RTN","PRSPUT3",133,0)
 ;               as necessary.
"RTN","PRSPUT3",134,0)
 ;
"RTN","PRSPUT3",135,0)
 ; HOL and PDT need to be set by calling ^PRSAPPH prior to making this
"RTN","PRSPUT3",136,0)
 ; call.
"RTN","PRSPUT3",137,0)
 ;
"RTN","PRSPUT3",138,0)
ESRUPDT(PPI,PRSIEN,DAY) ;
"RTN","PRSPUT3",139,0)
 ;
"RTN","PRSPUT3",140,0)
 N END,HTOUR,IENS,MT,PRSFDA,START,STATUS,STOP,TOUR
"RTN","PRSPUT3",141,0)
 S DAY=$G(DAY,"")
"RTN","PRSPUT3",142,0)
 S START=$S(DAY:DAY,1:1)
"RTN","PRSPUT3",143,0)
 S END=$S(DAY:DAY,1:14)
"RTN","PRSPUT3",144,0)
 F DAY=START:1:END D
"RTN","PRSPUT3",145,0)
 . S TOUR=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",146,0)
 . S STATUS=$S(TOUR>1:1,1:6)
"RTN","PRSPUT3",147,0)
 . S IENS=DAY_","_PRSIEN_","_PPI_","
"RTN","PRSPUT3",148,0)
 . K PRSFDA
"RTN","PRSPUT3",149,0)
 . S PRSFDA(458.02,IENS,146)=STATUS
"RTN","PRSPUT3",150,0)
 . I $D(HOL($P(PDT,U,DAY))) D
"RTN","PRSPUT3",151,0)
 . . S HTOUR=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,1))
"RTN","PRSPUT3",152,0)
 . . Q:HTOUR=""
"RTN","PRSPUT3",153,0)
 . . S MT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",154,0)
 . . S MT=$P($G(^PRST(457.1,MT,0)),U,3)
"RTN","PRSPUT3",155,0)
 . . F I=0:1:6 Q:$P(HTOUR,U,(3*I)+1)=""  D
"RTN","PRSPUT3",156,0)
 . . . S START=$P(HTOUR,U,(3*I)+1),STOP=$P(HTOUR,U,(3*I)+2)
"RTN","PRSPUT3",157,0)
 . . . S PRSFDA(458.02,IENS,110+(5*I))=START
"RTN","PRSPUT3",158,0)
 . . . S PRSFDA(458.02,IENS,111+(5*I))=STOP
"RTN","PRSPUT3",159,0)
 . . . S PRSFDA(458.02,IENS,112+(5*I))="HX"
"RTN","PRSPUT3",160,0)
 . . S PRSFDA(458.02,IENS,146)=4 ; ESR DAILY STATUS = SIGNED
"RTN","PRSPUT3",161,0)
 . . S PRSFDA(458.02,IENS,101)="" ; Reset timecard status to unposted.
"RTN","PRSPUT3",162,0)
 . . S PRSFDA(458.02,IENS,114)=MT ; Meal time for 1st segment
"RTN","PRSPUT3",163,0)
 . . S PRSFDA(458.02,IENS,147)=$$NOW^XLFDT() ; Date/Time stamp
"RTN","PRSPUT3",164,0)
 . . S PRSFDA(458.02,IENS,149)=4 ; ESR Signed by Holiday
"RTN","PRSPUT3",165,0)
 . D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSPUT3",166,0)
 Q
"RTN","PRSPUT3",167,0)
 ;
"RTN","PRSPUT3",168,0)
MEMCPP(MIEN) ; Memo Certified PP
"RTN","PRSPUT3",169,0)
 ; This utility determine the last certified PP and the number of
"RTN","PRSPUT3",170,0)
 ; certified PPs for a given memo.
"RTN","PRSPUT3",171,0)
 ; input
"RTN","PRSPUT3",172,0)
 ;   MIEN - internal entry number of a memo in file 458.7
"RTN","PRSPUT3",173,0)
 ; returns a string value
"RTN","PRSPUT3",174,0)
 ;   = last certified PP (external value)^number of certified PPs
"RTN","PRSPUT3",175,0)
 ;   example "05-01^3"
"RTN","PRSPUT3",176,0)
 ;
"RTN","PRSPUT3",177,0)
 N LASTPP,MPPIEN,PPC,PRSX
"RTN","PRSPUT3",178,0)
 I '$G(MIEN) Q "^"
"RTN","PRSPUT3",179,0)
 ;
"RTN","PRSPUT3",180,0)
 S LASTPP="" ; last PP
"RTN","PRSPUT3",181,0)
 S PPC=0 ; pp counter
"RTN","PRSPUT3",182,0)
 ; loop thru PPs in memo
"RTN","PRSPUT3",183,0)
 S MPPIEN=0 F  S MPPIEN=$O(^PRST(458.7,MIEN,9,MPPIEN)) Q:'MPPIEN  D
"RTN","PRSPUT3",184,0)
 . S PRSX=$G(^PRST(458.7,MIEN,9,MPPIEN,0))
"RTN","PRSPUT3",185,0)
 . Q:$P(PRSX,U,2)=""  ; REG HOURS is null so PP never certified
"RTN","PRSPUT3",186,0)
 . S LASTPP=$P(PRSX,U,1)
"RTN","PRSPUT3",187,0)
 . S PPC=PPC+1
"RTN","PRSPUT3",188,0)
 ;
"RTN","PRSPUT3",189,0)
 Q LASTPP_"^"_PPC
"RTN","PRSPUT3",190,0)
 ;
"RTN","PRSPUT3",191,0)
PP8BAMT(PPAMT,PPI,PRSIEN) ; array TIMEAMTS passed by reference
"RTN","PRSPUT3",192,0)
 ; subscripted w/ types of time CODE and type of time activity 
"RTN","PRSPUT3",193,0)
 ; from PRS8VW2 table.  This routine sets each node of TIMEAMTS array
"RTN","PRSPUT3",194,0)
 ; to the total hours (week one and two) in the pp 
"RTN","PRSPUT3",195,0)
 ; for that type of time activity.
"RTN","PRSPUT3",196,0)
 ;
"RTN","PRSPUT3",197,0)
 ; SAMPLE CALL:
"RTN","PRSPUT3",198,0)
 ; S TAMTS("WP","Leave Without Pay")="" D PP8BTOT(.TAMTS,PPI,PRSIEN)
"RTN","PRSPUT3",199,0)
 ;
"RTN","PRSPUT3",200,0)
 ; SAMPLE RETURN ARRAY
"RTN","PRSPUT3",201,0)
 ; TAMTS("WP","Leave Without Pay")=12.5
"RTN","PRSPUT3",202,0)
 ;
"RTN","PRSPUT3",203,0)
 N TT,STR8B,TC,TA,WK1CD,WK2CD,AMT1,AMT2
"RTN","PRSPUT3",204,0)
 S STR8B=$$GET8B(PPI,PRSIEN)
"RTN","PRSPUT3",205,0)
 S TC=""
"RTN","PRSPUT3",206,0)
 F  S TC=$O(PPAMT(TC)) Q:TC=""  D
"RTN","PRSPUT3",207,0)
 .  S TA=""
"RTN","PRSPUT3",208,0)
 .  F  S TA=$O(PPAMT(TC,TA)) Q:TA=""  D
"RTN","PRSPUT3",209,0)
 ..    S WK1CD=$$WKTT(TC,TA,1)
"RTN","PRSPUT3",210,0)
 ..    S WK2CD=$$WKTT(TC,TA,2)
"RTN","PRSPUT3",211,0)
 ..    S AMT1=$$EXTR8BT(STR8B,WK1CD)
"RTN","PRSPUT3",212,0)
 ..    S AMT2=$$EXTR8BT(STR8B,WK2CD)
"RTN","PRSPUT3",213,0)
 ..    S PPAMT(TC,TA)=AMT1+AMT2
"RTN","PRSPUT3",214,0)
 Q
"RTN","PRSPUT3",215,0)
GET8B(PPI,PRSIEN) ; get 8b from 5 node unless corrected timecard 
"RTN","PRSPUT3",216,0)
 ;                 has been done then we need to recompute 8B
"RTN","PRSPUT3",217,0)
 N S8B
"RTN","PRSPUT3",218,0)
 I $$CORRECT(PPI,PRSIEN) D
"RTN","PRSPUT3",219,0)
 .  N DFN,PY,VAL
"RTN","PRSPUT3",220,0)
 .; new variables used BY callers to this API because the decomp
"RTN","PRSPUT3",221,0)
 .;  kills everything in its path.
"RTN","PRSPUT3",222,0)
 .  N QT,PP,%,C0,CNT,CT,D,DAY,HDR,I,K,MEAL,SSN,ST,TT,TYP,X,X1,Y,Y1,Z,ML,Z0,Z1
"RTN","PRSPUT3",223,0)
 .  S DFN=PRSIEN
"RTN","PRSPUT3",224,0)
 .  S PY=PPI
"RTN","PRSPUT3",225,0)
 .  D ONE^PRS8
"RTN","PRSPUT3",226,0)
 .  S S8B=$E($G(VAL),33,999)
"RTN","PRSPUT3",227,0)
 E  D
"RTN","PRSPUT3",228,0)
 .  S S8B=$E($G(^PRST(458,PPI,"E",PRSIEN,5)),33,999)
"RTN","PRSPUT3",229,0)
 Q S8B
"RTN","PRSPUT3",230,0)
CORRECT(PPI,PRSIEN) ; return true if any corrected timecards exist for 
"RTN","PRSPUT3",231,0)
 ;this emp's pp that were approved by the final level supr apprl
"RTN","PRSPUT3",232,0)
 N CORRECT,STATUS,TCD
"RTN","PRSPUT3",233,0)
 S CORRECT=0
"RTN","PRSPUT3",234,0)
 Q:($G(PPI)'>0)!($G(PRSIEN)'>0)
"RTN","PRSPUT3",235,0)
 S TCD=0
"RTN","PRSPUT3",236,0)
 F  S TCD=$O(^PRST(458,PPI,"E",PRSIEN,"X",TCD)) Q:TCD'>0!(CORRECT)  D
"RTN","PRSPUT3",237,0)
 .  S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,"X",TCD,0)),U,5)
"RTN","PRSPUT3",238,0)
 .  I STATUS="P"!(STATUS="S") S CORRECT=1
"RTN","PRSPUT3",239,0)
 Q CORRECT
"RTN","PRSPUT3",240,0)
EXTR8BT(S,T) ; EXTRACT THE 8B TYPE OF TIME FROM THE STUB AND RETURN THE 
"RTN","PRSPUT3",241,0)
 ; AMOUNT OF TIME FROM WEEK ONE AND TWO FOR THIS TYPE OF TIME
"RTN","PRSPUT3",242,0)
 ; INPUT: S-8B STUB
"RTN","PRSPUT3",243,0)
 ;        T-TYPE OF TIME TO FIND ^ LENGTH OF DATA IN 8B
"RTN","PRSPUT3",244,0)
 N AMT,LEN,POS,QH,HRS
"RTN","PRSPUT3",245,0)
 S AMT="0.0"
"RTN","PRSPUT3",246,0)
 S POS=$F(S,$P(T,U))
"RTN","PRSPUT3",247,0)
 I POS D
"RTN","PRSPUT3",248,0)
 .  S LEN=$P(T,U,2)
"RTN","PRSPUT3",249,0)
 .  S AMT=$E(S,POS,POS-1+LEN)
"RTN","PRSPUT3",250,0)
 .  S HRS=+$E(AMT,1,LEN-1)
"RTN","PRSPUT3",251,0)
 .  S QH=+$E(AMT,LEN,LEN)
"RTN","PRSPUT3",252,0)
 .  S QH=$S(QH=1:".25",QH=2:".5",QH=3:".75",1:".0")
"RTN","PRSPUT3",253,0)
 .  S AMT=HRS_QH
"RTN","PRSPUT3",254,0)
 Q AMT
"RTN","PRSPUT3",255,0)
 ;
"RTN","PRSPUT3",256,0)
WKTT(T,TA,WK) ; GET 8B STRING TIMECODE FOR WEEK ONE OR TWO AND LENGTH OF 
"RTN","PRSPUT3",257,0)
 ; THE DATA IN THE 8B STRING
"RTN","PRSPUT3",258,0)
 ;  Input:
"RTN","PRSPUT3",259,0)
 ;    T- type of time code from file 457.3
"RTN","PRSPUT3",260,0)
 ;    TA-time activity from the table in PRS8VW2 (e.g. Leave Without Pay)
"RTN","PRSPUT3",261,0)
 ;    WK-1 or 2 for the desired timecode week
"RTN","PRSPUT3",262,0)
 ;
"RTN","PRSPUT3",263,0)
 S WK=$S($G(WK)=2:2,1:1)
"RTN","PRSPUT3",264,0)
 Q:$G(T)=""
"RTN","PRSPUT3",265,0)
 N TCH1,TTEXT,CHKLN,I,FOUND,E,TTABLE,CHUNK,TABLEI,WKTTCODE
"RTN","PRSPUT3",266,0)
 S FOUND=0
"RTN","PRSPUT3",267,0)
 ;
"RTN","PRSPUT3",268,0)
 S TCH1=$E(T,1,1)
"RTN","PRSPUT3",269,0)
 D E2^PRS8VW
"RTN","PRSPUT3",270,0)
 S CHKLN=$P($T(@(TCH1)+0^PRS8VW1),";;",2)
"RTN","PRSPUT3",271,0)
 F I=1:1:$L(CHKLN,"^") D  Q:FOUND
"RTN","PRSPUT3",272,0)
 .  S CHUNK=$P(CHKLN,U,I)
"RTN","PRSPUT3",273,0)
 .  S TABLEI=$P(CHUNK,":",2)
"RTN","PRSPUT3",274,0)
 .  S WKTTCODE=TCH1_$P(CHUNK,":")
"RTN","PRSPUT3",275,0)
 .  S TTABLE=$P($T(TYP+TABLEI^PRS8VW2),";;",2)
"RTN","PRSPUT3",276,0)
 .  I TTABLE=TA,$F(E(WK),WKTTCODE) D
"RTN","PRSPUT3",277,0)
 ..   S FOUND=1
"RTN","PRSPUT3",278,0)
 ..;  When found in PRS8VW2 table return code and length
"RTN","PRSPUT3",279,0)
 ..   S WKTTCODE=WKTTCODE_U_$P(CHUNK,":",3)
"RTN","PRSPUT3",280,0)
 I 'FOUND S WKTTCODE=0
"RTN","PRSPUT3",281,0)
 Q WKTTCODE
"SEC","^DIC",458.4,458.4,0,"AUDIT")
@
"SEC","^DIC",458.4,458.4,0,"DD")
@
"SEC","^DIC",458.4,458.4,0,"DEL")
@
"SEC","^DIC",458.4,458.4,0,"LAYGO")
@
"SEC","^DIC",458.4,458.4,0,"RD")
@
"SEC","^DIC",458.4,458.4,0,"WR")
@
"SEC","^DIC",458.7,458.7,0,"AUDIT")
@
"SEC","^DIC",458.7,458.7,0,"DD")
@
"SEC","^DIC",458.7,458.7,0,"DEL")
@
"SEC","^DIC",458.7,458.7,0,"LAYGO")
@
"SEC","^DIC",458.7,458.7,0,"RD")
@
"SEC","^DIC",458.7,458.7,0,"WR")
@
"UP",458,458.02,-2)
458^E
"UP",458,458.02,-1)
458.01^D
"UP",458,458.02,0)
458.02
"VER")
8.0^22.0
"^DD",458,458.02,110,0)
ESR START TIME-1^FX^^5;1^D:$D(X) ^PRSATIM
"^DD",458,458.02,110,3)
The start time for the 1st segment of work.
"^DD",458,458.02,110,4)
D HLP^PRSATIM
"^DD",458,458.02,110,21,0)
^.001^2^2^3050122^^^
"^DD",458,458.02,110,21,1,0)
The time the Part Time Physician actually began work/leave for the
"^DD",458,458.02,110,21,2,0)
first time segment of the work day.
"^DD",458,458.02,110,"DT")
3050122
"^DD",458,458.02,111,0)
ESR STOP TIME-1^FX^^5;2^D:$D(X) ^PRSATIM
"^DD",458,458.02,111,3)
The end time for the 1st segment of work.
"^DD",458,458.02,111,4)
D HLP^PRSATIM
"^DD",458,458.02,111,21,0)
^^1^1^3040910^^
"^DD",458,458.02,111,21,1,0)
The time the Part Time Physician actually stopped work/leave for the first time segment of the work day.
"^DD",458,458.02,111,"DT")
3050122
"^DD",458,458.02,112,0)
ESR TYPE OF TIME-1^FX^^5;3^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,112,3)
The type of work performed during the 1st segment of work.
"^DD",458,458.02,112,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,112,21,0)
^.001^1^1^3041118^^^
"^DD",458,458.02,112,21,1,0)
The type of time worked or leave taken for the first segment of the work day.
"^DD",458,458.02,112,"DT")
3050122
"^DD",458,458.02,113,0)
ESR SPECIAL CODE-1^*P457.4'^PRST(457.4,^5;4^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,113,3)
The remarks code, if any, for the 1st segment of work.
"^DD",458,458.02,113,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,113,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,113,21,0)
^^1^1^3040910^
"^DD",458,458.02,113,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the first segment of the work day.
"^DD",458,458.02,113,"DT")
3050122
"^DD",458,458.02,114,0)
ESR MEAL TIME-1^FX^^5;5^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,114,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,114,4)

"^DD",458,458.02,114,21,0)
^.001^9^9^3050728^^^^
"^DD",458,458.02,114,21,1,0)
Enter the best approximation of time for the meal during this 
"^DD",458,458.02,114,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,114,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30, 
"^DD",458,458.02,114,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,114,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,114,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,114,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,114,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,114,21,9,0)
meal from the total creditable hours in the work segment. 
"^DD",458,458.02,114,"DT")
3050728
"^DD",458,458.02,115,0)
ESR START TIME-2^FX^^5;6^D:$D(X) ^PRSATIM
"^DD",458,458.02,115,3)
The start time for the 2nd segment of work.
"^DD",458,458.02,115,4)
D HLP^PRSATIM
"^DD",458,458.02,115,21,0)
^^1^1^3040910^
"^DD",458,458.02,115,21,1,0)
The time the Part Time Physician actually began work/leave for the second time segment of the work day.
"^DD",458,458.02,115,"DT")
3050122
"^DD",458,458.02,116,0)
ESR STOP TIME-2^FX^^5;7^D:$D(X) ^PRSATIM
"^DD",458,458.02,116,3)
The end time for the 2nd segment of work.
"^DD",458,458.02,116,4)
D HLP^PRSATIM
"^DD",458,458.02,116,21,0)
^^1^1^3040910^
"^DD",458,458.02,116,21,1,0)
The time the Part Time Physician actually began work/leave for the second time segment of the work day.
"^DD",458,458.02,116,"DT")
3050122
"^DD",458,458.02,117,0)
ESR TYPE OF TIME-2^FX^^5;8^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,117,3)
The type of work performed during the 2nd segment of work.
"^DD",458,458.02,117,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,117,21,0)
^^1^1^3040910^
"^DD",458,458.02,117,21,1,0)
The type of time worked or leave taken for the second segment of the work day.
"^DD",458,458.02,117,"DT")
3050122
"^DD",458,458.02,118,0)
ESR SPECIAL CODE-2^*P457.4'^PRST(457.4,^5;9^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,118,3)
The remarks code, if any, for the 2nd segment of work.
"^DD",458,458.02,118,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,118,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,118,21,0)
^^1^1^3040910^
"^DD",458,458.02,118,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the second segment of the work day.
"^DD",458,458.02,118,"DT")
3050122
"^DD",458,458.02,119,0)
ESR MEAL TIME-2^FX^^5;10^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,119,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,119,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,119,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,119,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,119,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,119,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,119,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,119,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,119,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,119,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,119,21,9,0)
meal from the total creditable hours in the work segment. 
"^DD",458,458.02,119,"DT")
3050128
"^DD",458,458.02,120,0)
ESR START TIME-3^FX^^5;11^D:$D(X) ^PRSATIM
"^DD",458,458.02,120,3)
The start time for the 3rd segment of work.
"^DD",458,458.02,120,4)
D HLP^PRSATIM
"^DD",458,458.02,120,21,0)
^^1^1^3040910^
"^DD",458,458.02,120,21,1,0)
The time the Part Time Physician actually began work/leave for the third time segment of the work day.
"^DD",458,458.02,120,"DT")
3050122
"^DD",458,458.02,121,0)
ESR STOP TIME-3^FX^^5;12^D:$D(X) ^PRSATIM
"^DD",458,458.02,121,3)
The end time for the 3rd segment of work.
"^DD",458,458.02,121,4)
D HLP^PRSATIM
"^DD",458,458.02,121,21,0)
^^1^1^3040910^
"^DD",458,458.02,121,21,1,0)
The time the Part Time Physician actually began work/leave for the third time segment of the work day.
"^DD",458,458.02,121,"DT")
3050122
"^DD",458,458.02,122,0)
ESR TYPE OF TIME-3^FX^^5;13^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,122,3)
The type of work performed during the 3rd segment of work.
"^DD",458,458.02,122,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,122,21,0)
^^1^1^3040910^
"^DD",458,458.02,122,21,1,0)
The type of time worked or leave taken for the third segment of the work day.
"^DD",458,458.02,122,"DT")
3050122
"^DD",458,458.02,123,0)
ESR SPECIAL CODE-3^*P457.4'^PRST(457.4,^5;14^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,123,3)
The remarks code, if any, for the 3rd segment of work.
"^DD",458,458.02,123,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,123,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,123,21,0)
^^1^1^3050331^
"^DD",458,458.02,123,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the third segment of the work day.
"^DD",458,458.02,123,"DT")
3050122
"^DD",458,458.02,124,0)
ESR MEAL TIME-3^FX^^5;15^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,124,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,124,4)

"^DD",458,458.02,124,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,124,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,124,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,124,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,124,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,124,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,124,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,124,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,124,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,124,21,9,0)
meal from the total creditable hours in the work segment.
"^DD",458,458.02,124,"DT")
3050128
"^DD",458,458.02,125,0)
ESR START TIME-4^FX^^5;16^D:$D(X) ^PRSATIM
"^DD",458,458.02,125,3)
The start time for the 4th segment of work.
"^DD",458,458.02,125,4)
D HLP^PRSATIM
"^DD",458,458.02,125,21,0)
^^1^1^3040910^
"^DD",458,458.02,125,21,1,0)
The time the Part Time Physician actually began work/leave for the fourth time segment of the work day.
"^DD",458,458.02,125,"DT")
3050122
"^DD",458,458.02,126,0)
ESR STOP TIME-4^FX^^5;17^D:$D(X) ^PRSATIM
"^DD",458,458.02,126,3)
The end time for the 4th segment of work.
"^DD",458,458.02,126,4)
D HLP^PRSATIM
"^DD",458,458.02,126,21,0)
^^1^1^3040910^
"^DD",458,458.02,126,21,1,0)
The time the Part Time Physician actually began work/leave for the fourth time segment of the work day.
"^DD",458,458.02,126,"DT")
3050122
"^DD",458,458.02,127,0)
ESR TYPE OF TIME-4^FX^^5;18^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,127,3)
The type of work performed during the 4th segment of work.
"^DD",458,458.02,127,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,127,21,0)
^^1^1^3040910^
"^DD",458,458.02,127,21,1,0)
The type of time worked or leave taken for the fourth segment of the work day.
"^DD",458,458.02,127,"DT")
3050122
"^DD",458,458.02,128,0)
ESR SPECIAL CODE-4^*P457.4'^PRST(457.4,^5;19^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,128,3)
The remarks code, if any, for the 4th segment of work.
"^DD",458,458.02,128,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,128,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,128,21,0)
^.001^1^1^3041026^^^
"^DD",458,458.02,128,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the fourth segment of the work day.
"^DD",458,458.02,128,"DT")
3050122
"^DD",458,458.02,129,0)
ESR MEAL TIME-4^FX^^5;20^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,129,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,129,4)

"^DD",458,458.02,129,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,129,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,129,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,129,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,129,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,129,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,129,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,129,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,129,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,129,21,9,0)
meal from the total creditable hours in the work segment. 
"^DD",458,458.02,129,"DT")
3050128
"^DD",458,458.02,130,0)
ESR START TIME-5^FX^^5;21^D:$D(X) ^PRSATIM
"^DD",458,458.02,130,3)
The start time for the 5th segment of work.
"^DD",458,458.02,130,4)
D HLP^PRSATIM
"^DD",458,458.02,130,21,0)
^^1^1^3040910^
"^DD",458,458.02,130,21,1,0)
The time the Part Time Physician actually began work/leave for the fifth time segment of the work day.
"^DD",458,458.02,130,"DT")
3050122
"^DD",458,458.02,131,0)
ESR STOP TIME-5^FX^^5;22^D:$D(X) ^PRSATIM
"^DD",458,458.02,131,3)
The end time for the 5th segment of work.
"^DD",458,458.02,131,4)
D HLP^PRSATIM
"^DD",458,458.02,131,21,0)
^^1^1^3040910^
"^DD",458,458.02,131,21,1,0)
The time the Part Time Physician actually began work/leave for the fifth time segment of the work day.
"^DD",458,458.02,131,"DT")
3050122
"^DD",458,458.02,132,0)
ESR TYPE OF TIME-5^FX^^5;23^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,132,3)
The type of work performed during the 5th segment of work.
"^DD",458,458.02,132,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,132,21,0)
^^1^1^3040910^
"^DD",458,458.02,132,21,1,0)
The type of time worked or leave taken for the fifth segment of the work day.
"^DD",458,458.02,132,"DT")
3050122
"^DD",458,458.02,133,0)
ESR SPECIAL CODE-5^*P457.4'^PRST(457.4,^5;24^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,133,3)
The remarks code, if any, for the 5th segment of work.
"^DD",458,458.02,133,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,133,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,133,21,0)
^.001^1^1^3041026^^^
"^DD",458,458.02,133,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the fifth segment of the work day.
"^DD",458,458.02,133,"DT")
3050122
"^DD",458,458.02,134,0)
ESR MEAL TIME-5^FX^^5;25^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,134,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,134,4)

"^DD",458,458.02,134,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,134,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,134,21,2,0)
work segment in increments of 15 minutes.  Meals may not be
"^DD",458,458.02,134,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,134,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate
"^DD",458,458.02,134,21,5,0)
that no meal was taken.  When meals are taken, they must be
"^DD",458,458.02,134,21,6,0)
entered, even when they are not scheduled for that tour. Meals
"^DD",458,458.02,134,21,7,0)
may be entered for periods of both regular hours and leave. 
"^DD",458,458.02,134,21,8,0)
Entering the meal time will automatically deduct the meal from
"^DD",458,458.02,134,21,9,0)
the total creditable hours in the work segment. 
"^DD",458,458.02,134,"DT")
3050128
"^DD",458,458.02,135,0)
ESR START TIME-6^FX^^5;26^D:$D(X) ^PRSATIM
"^DD",458,458.02,135,3)
The start time for the 6th segment of work.
"^DD",458,458.02,135,4)
D HLP^PRSATIM
"^DD",458,458.02,135,21,0)
^^1^1^3040910^
"^DD",458,458.02,135,21,1,0)
The time the Part Time Physician actually began work/leave for the sixth time segment of the work day.
"^DD",458,458.02,135,"DT")
3050122
"^DD",458,458.02,136,0)
ESR STOP TIME-6^FX^^5;27^D:$D(X) ^PRSATIM
"^DD",458,458.02,136,3)
The end time for the 6th segment of work.
"^DD",458,458.02,136,4)
D HLP^PRSATIM
"^DD",458,458.02,136,21,0)
^^1^1^3040910^
"^DD",458,458.02,136,21,1,0)
The time the Part Time Physician actually began work/leave for the sixth time segment of the work day.
"^DD",458,458.02,136,"DT")
3050122
"^DD",458,458.02,137,0)
ESR TYPE OF TIME-6^FX^^5;28^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,137,3)
The type of work performed during the 6th segment of work.
"^DD",458,458.02,137,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,137,21,0)
^^1^1^3040910^
"^DD",458,458.02,137,21,1,0)
The type of time worked or leave taken for the sixth segment of the work day.
"^DD",458,458.02,137,"DT")
3050122
"^DD",458,458.02,138,0)
ESR SPECIAL CODE-6^*P457.4'^PRST(457.4,^5;29^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,138,3)
The remarks code, if any, for the 6th segment of work.
"^DD",458,458.02,138,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,138,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,138,21,0)
^^1^1^3040910^
"^DD",458,458.02,138,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the sixth segment of the work day.
"^DD",458,458.02,138,"DT")
3050122
"^DD",458,458.02,139,0)
ESR MEAL TIME-6^FX^^5;30^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,139,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,139,4)

"^DD",458,458.02,139,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,139,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,139,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,139,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,139,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,139,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,139,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,139,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,139,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,139,21,9,0)
meal from the total creditable hours in the work segment. 
"^DD",458,458.02,139,"DT")
3050128
"^DD",458,458.02,140,0)
ESR START TIME-7^FX^^5;31^D:$D(X) ^PRSATIM
"^DD",458,458.02,140,3)
The start time for the 7th segment of work.
"^DD",458,458.02,140,4)
D HLP^PRSATIM
"^DD",458,458.02,140,21,0)
^^1^1^3040910^
"^DD",458,458.02,140,21,1,0)
The time the Part Time Physician actually began work/leave for the seventh time segment of the work day.
"^DD",458,458.02,140,"DT")
3050122
"^DD",458,458.02,141,0)
ESR STOP TIME-7^FX^^5;32^D:$D(X) ^PRSATIM
"^DD",458,458.02,141,3)
The end time for the 7th segment of work.
"^DD",458,458.02,141,4)
D HLP^PRSATIM
"^DD",458,458.02,141,21,0)
^^1^1^3040910^
"^DD",458,458.02,141,21,1,0)
The time the Part Time Physician actually began work/leave for the seventh time segment of the work day.
"^DD",458,458.02,141,"DT")
3050122
"^DD",458,458.02,142,0)
ESR TYPE OF TIME-7^FX^^5;33^S DIC=457.3,DIC(0)="EMQ",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))" D ^DIC K DIC S X=$P(Y,"^",2) K:Y'>0 X
"^DD",458,458.02,142,3)
The type of work performed during the 7th segment of work.
"^DD",458,458.02,142,4)
N D,X,DIC,DO S DIC="^PRST(457.3,",DIC(0)="Q",DIC("S")="I $S('$D(ZENT):1,1:ZENT[$P(^(0),U,1))",D="B" D DQ^DICQ Q
"^DD",458,458.02,142,21,0)
^^1^1^3040910^
"^DD",458,458.02,142,21,1,0)
The type of time worked or leave taken for the seventh segment of the work day.
"^DD",458,458.02,142,"DT")
3050122
"^DD",458,458.02,143,0)
ESR SPECIAL CODE-7^*P457.4'^PRST(457.4,^5;34^S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",458,458.02,143,3)
The remarks code, if any, for the 7th segment of work.
"^DD",458,458.02,143,12)
Select only valid time remarks for Type of Time.
"^DD",458,458.02,143,12.1)
S DIC("S")="I $S('$D(TT):1,1:$P(^(0),U,3)[TT)"
"^DD",458,458.02,143,21,0)
^.001^1^1^3041026^^
"^DD",458,458.02,143,21,1,0)
A pointer to the TIME REMARKS file (#457.4) which identifies a time remark with the type of time worked or leave taken for the seventh segment of the work day.
"^DD",458,458.02,143,"DT")
3050122
"^DD",458,458.02,144,0)
ESR MEAL TIME-7^FX^^5;35^K:+X'=X!(X>60)!(X<0)!(X?.E1"."1N.N) X I $D(X) K:X#15 X
"^DD",458,458.02,144,3)
Enter 0, 15, 30, 45, or 60 as the best approximation of the actual meal time in minutes.
"^DD",458,458.02,144,4)

"^DD",458,458.02,144,21,0)
^.001^9^9^3050211^^^
"^DD",458,458.02,144,21,1,0)
Enter the best approximation of time for the meal during this
"^DD",458,458.02,144,21,2,0)
work segment in increments of 15 minutes.  Meals may not be 
"^DD",458,458.02,144,21,3,0)
longer than 60 minutes, so appropriate meal times are 15, 30,
"^DD",458,458.02,144,21,4,0)
45, and 60.  Enter a 0 or leave the field blank to indicate 
"^DD",458,458.02,144,21,5,0)
that no meal was taken.  When meals are taken, they must be 
"^DD",458,458.02,144,21,6,0)
entered, even when they are not scheduled for that tour.  
"^DD",458,458.02,144,21,7,0)
Meals may be entered for periods of both regular hours and 
"^DD",458,458.02,144,21,8,0)
leave.  Entering the meal time will automatically deduct the 
"^DD",458,458.02,144,21,9,0)
meal from the total creditable hours in the work segment. 
"^DD",458,458.02,144,"DT")
3050128
"^DD",458,458.02,145,0)
DAILY ESR REMARKS^F^^6;1^K:$L(X)>70!($L(X)<1) X
"^DD",458,458.02,145,3)
Answer must be 1-70 characters in length
"^DD",458,458.02,145,21,0)
^^1^1^3041001^^
"^DD",458,458.02,145,21,1,0)
Any comments entered by the Part Time Physician.
"^DD",458,458.02,145,"DT")
3041001
"^DD",458,458.02,146,0)
ESR DAILY STATUS^S^1:NOT STARTED;2:PENDING;3:RESUBMIT;4:SIGNED;5:APPROVED;6:DAY OFF;^7;1^Q
"^DD",458,458.02,146,3)
Answer must be 1 character in length
"^DD",458,458.02,146,21,0)
^^1^1^3040920^
"^DD",458,458.02,146,21,1,0)
The status of the Part Time Physician's daily Electronic Subsidiary Record (ESR).
"^DD",458,458.02,146,"DT")
3050426
"^DD",458,458.02,147,0)
PT PHYSICIAN DATE/TIME STAMP^D^^7;2^S %DT="EST" D ^%DT S X=Y K:X<1 X
"^DD",458,458.02,147,3)
(No range limit on date)
"^DD",458,458.02,147,21,0)
^^2^2^3040920^
"^DD",458,458.02,147,21,1,0)
The Date and Time the Part Time Physician electronically signed their daily
"^DD",458,458.02,147,21,2,0)
ESR record.
"^DD",458,458.02,147,"DT")
3050225
"^DD",458,458.02,148,0)
ESR SUPERVISOR REMARKS^F^^6;2^K:$L(X)>21!($L(X)<1) X
"^DD",458,458.02,148,3)
Answer must be 1-21 characters in length
"^DD",458,458.02,148,21,0)
^.001^3^3^3050428^^^^
"^DD",458,458.02,148,21,1,0)
Enter a brief comment that will be displayed to the part-time physician when
"^DD",458,458.02,148,21,2,0)
they resubmit the daily ESR. 
"^DD",458,458.02,148,21,3,0)

"^DD",458,458.02,148,"DT")
3050428
"^DD",458,458.02,149,0)
ESR DAY LAST SIGN METHOD^S^1:MANUAL POST;2:EXTENDED ABSENCE;3:LEAVE REQUEST;4:HOLIDAY;^7;3^Q
"^DD",458,458.02,149,3)
How the signature for the current ESR data was obtained.
"^DD",458,458.02,149,21,0)
^.001^10^10^3050122^^^^
"^DD",458,458.02,149,21,1,0)
This field indicates how the current ESR record was signed.
"^DD",458,458.02,149,21,2,0)

"^DD",458,458.02,149,21,3,0)
When the employee signs an ESR day, this field is set with code 1 for
"^DD",458,458.02,149,21,4,0)
employee manual post. If the auto posting of either an extended
"^DD",458,458.02,149,21,5,0)
absence or a leave request changes field 146--ESR DAILY STATUS--to
"^DD",458,458.02,149,21,6,0)
signed, then the field is update with code 2 or 3 respectively. 
"^DD",458,458.02,149,21,7,0)

"^DD",458,458.02,149,21,8,0)
If the employee signature is removed via supervisor rework request,
"^DD",458,458.02,149,21,9,0)
employee edit, cancellation of extended absence, or cancellation of
"^DD",458,458.02,149,21,10,0)
leave, the value in the field will be deleted.
"^DD",458,458.02,149,"DT")
3050128
"^DD",458.4,458.4,0)
FIELD^^6^7
"^DD",458.4,458.4,0,"DT")
3041012
"^DD",458.4,458.4,0,"IX","B",458.4,.01)

"^DD",458.4,458.4,0,"NM","PT PHYSICIAN EXTENDED ABSENCE")

"^DD",458.4,458.4,0,"VRPK")
PRS
"^DD",458.4,458.4,.01,0)
FROM DATE^RD^^0;1^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",458.4,458.4,.01,1,0)
^.1
"^DD",458.4,458.4,.01,1,1,0)
458.4^B
"^DD",458.4,458.4,.01,1,1,1)
S ^PRST(458.4,"B",$E(X,1,30),DA)=""
"^DD",458.4,458.4,.01,1,1,2)
K ^PRST(458.4,"B",$E(X,1,30),DA)
"^DD",458.4,458.4,.01,3)
(No range limit on date)
"^DD",458.4,458.4,.01,21,0)
^.001^2^2^3050122^^^^
"^DD",458.4,458.4,.01,21,1,0)
The beginning date of a period of extended absence when the Part
"^DD",458.4,458.4,.01,21,2,0)
Time Physician will not be performing any duty for the VA.
"^DD",458.4,458.4,.01,"DT")
3050122
"^DD",458.4,458.4,1,0)
TO DATE^RD^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",458.4,458.4,1,3)
(No range limit on date)
"^DD",458.4,458.4,1,21,0)
^.001^2^2^3050122^^^^
"^DD",458.4,458.4,1,21,1,0)
The ending date of a period of extended absence when the Part Time
"^DD",458.4,458.4,1,21,2,0)
Physician will not be performing any duty for the VA.
"^DD",458.4,458.4,1,"DT")
3050122
"^DD",458.4,458.4,2,0)
EMPLOYEE^P450'^PRSPC(^0;3^Q
"^DD",458.4,458.4,2,21,0)
^^2^2^3050122^^
"^DD",458.4,458.4,2,21,1,0)
A pointer to the PAID EMPLOYEE file (#450) which identifies the employee who
"^DD",458.4,458.4,2,21,2,0)
is creating the Extended Absence entry.
"^DD",458.4,458.4,2,"DT")
3050122
"^DD",458.4,458.4,3,0)
DATE/TIME ENTERED^D^^0;4^S %DT="EST" D ^%DT S X=Y K:X<1 X
"^DD",458.4,458.4,3,3)
(No range limit on date)
"^DD",458.4,458.4,3,21,0)
^^1^1^3040910^
"^DD",458.4,458.4,3,21,1,0)
The date and time the Extended Absence was originally entered.
"^DD",458.4,458.4,3,"DT")
3040910
"^DD",458.4,458.4,4,0)
DATE/TIME UPDATED^D^^0;5^S %DT="EST" D ^%DT S X=Y K:X<1 X
"^DD",458.4,458.4,4,3)
(No range limit on date)
"^DD",458.4,458.4,4,21,0)
^^1^1^3040910^
"^DD",458.4,458.4,4,21,1,0)
The date and time the Extended Absence was last updated.
"^DD",458.4,458.4,4,"DT")
3040910
"^DD",458.4,458.4,5,0)
STATUS^RS^A:ACTIVE;X:CANCELLED;^0;6^Q
"^DD",458.4,458.4,5,21,0)
^.001^1^1^3050122^^^
"^DD",458.4,458.4,5,21,1,0)
The status of the Extended Absence.  Possible values: Active or Cancelled.
"^DD",458.4,458.4,5,"DT")
3050122
"^DD",458.4,458.4,6,0)
REMARKS^F^^0;7^K:$L(X)>60!($L(X)<1) X
"^DD",458.4,458.4,6,3)
Answer must be 1-60 characters in length
"^DD",458.4,458.4,6,21,0)
^^1^1^3050331^
"^DD",458.4,458.4,6,21,1,0)
This field contains optional remarks that can be entered by the employee.
"^DD",458.4,458.4,6,"DT")
3040910
"^DD",458.7,458.7,0)
FIELD^^200^27
"^DD",458.7,458.7,0,"DDA")
N
"^DD",458.7,458.7,0,"DT")
3050314
"^DD",458.7,458.7,0,"IX","B",458.7,.01)

"^DD",458.7,458.7,0,"IX","ED",458.7,2)

"^DD",458.7,458.7,0,"IX","SD",458.7,1)

"^DD",458.7,458.7,0,"NM","PT PHYSICIAN MEMORANDUM")

"^DD",458.7,458.7,0,"VRPK")
PRS
"^DD",458.7,458.7,.01,0)
EMPLOYEE^RP450'^PRSPC(^0;1^Q
"^DD",458.7,458.7,.01,1,0)
^.1
"^DD",458.7,458.7,.01,1,1,0)
458.7^B
"^DD",458.7,458.7,.01,1,1,1)
S ^PRST(458.7,"B",$E(X,1,30),DA)=""
"^DD",458.7,458.7,.01,1,1,2)
K ^PRST(458.7,"B",$E(X,1,30),DA)
"^DD",458.7,458.7,.01,3)
Type a number between 1 and 999999999, 0 Decimal Digits
"^DD",458.7,458.7,.01,21,0)
^^1^1^3040924^^
"^DD",458.7,458.7,.01,21,1,0)
A pointer to the PAID EMPLOYEE file (#450) which identifies the name of the Part Time Physician employee.
"^DD",458.7,458.7,.01,"DT")
3040924
"^DD",458.7,458.7,1,0)
START DATE^RDX^^0;2^N PRSX S PRSX=X S X1=DT,X2=180 D C^%DTC S %DT(0)=-X,X=PRSX,%DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",458.7,458.7,1,1,0)
^.1
"^DD",458.7,458.7,1,1,1,0)
458.7^SD
"^DD",458.7,458.7,1,1,1,1)
S ^PRST(458.7,"SD",$E(X,1,30),DA)=""
"^DD",458.7,458.7,1,1,1,2)
K ^PRST(458.7,"SD",$E(X,1,30),DA)
"^DD",458.7,458.7,1,1,1,"%D",0)
^^1^1^3041006^
"^DD",458.7,458.7,1,1,1,"%D",1,0)
Cross reference based on the Start Date of the memorandum.
"^DD",458.7,458.7,1,1,1,"DT")
3041006
"^DD",458.7,458.7,1,3)
Enter the 1st day of the physician's memorandum.
"^DD",458.7,458.7,1,21,0)
^.001^5^5^3050314^^^^
"^DD",458.7,458.7,1,21,1,0)
This is the first day of the part-time physician's Memorandum of Service 
"^DD",458.7,458.7,1,21,2,0)
Level Expectation.  This date must also be the first day of a pay period 
"^DD",458.7,458.7,1,21,3,0)
and must be within 6 months of today.  The memorandum covers 26 
"^DD",458.7,458.7,1,21,4,0)
full pay periods and will automatically expire on the last day of the 26th 
"^DD",458.7,458.7,1,21,5,0)
pay period.
"^DD",458.7,458.7,1,"DT")
3050314
"^DD",458.7,458.7,2,0)
END DATE^RD^^0;3^S %DT="EX" D ^%DT S X=Y K:3041001>X X
"^DD",458.7,458.7,2,1,0)
^.1
"^DD",458.7,458.7,2,1,1,0)
458.7^ED
"^DD",458.7,458.7,2,1,1,1)
S ^PRST(458.7,"ED",$E(X,1,30),DA)=""
"^DD",458.7,458.7,2,1,1,2)
K ^PRST(458.7,"ED",$E(X,1,30),DA)
"^DD",458.7,458.7,2,1,1,"%D",0)
^^1^1^3041006^
"^DD",458.7,458.7,2,1,1,"%D",1,0)
Cross reference based on the End Date of the memorandum.
"^DD",458.7,458.7,2,1,1,"DT")
3041006
"^DD",458.7,458.7,2,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2004
"^DD",458.7,458.7,2,21,0)
^^4^4^3050104^^^
"^DD",458.7,458.7,2,21,1,0)
The End Date of the Part Time Physician's 364 day Memorandum of
"^DD",458.7,458.7,2,21,2,0)
Service Level Expectation.  The End Date will always be the last
"^DD",458.7,458.7,2,21,3,0)
day of a Pay Period.
"^DD",458.7,458.7,2,21,4,0)

"^DD",458.7,458.7,2,"DT")
3050104
"^DD",458.7,458.7,3,0)
AGREED # OF HOURS^NJ7,2^^0;4^K:+X'=X!(X>2000)!(X<1)!(X?.E1"."3.N) X
"^DD",458.7,458.7,3,3)
Type a number between 1 and 2000, 2 Decimal Digits
"^DD",458.7,458.7,3,21,0)
^^2^2^3050122^^^
"^DD",458.7,458.7,3,21,1,0)
The number of hours that the Part Time Physician agreed to work during
"^DD",458.7,458.7,3,21,2,0)
their 364 day memorandum.  This number must be equally divisible by 26.
"^DD",458.7,458.7,3,"DT")
3050122
"^DD",458.7,458.7,4,0)
INITIAL COMMENTS^F^^1;1^K:$L(X)>240!($L(X)<1) X
"^DD",458.7,458.7,4,3)
Answer must be 1-240 characters in length
"^DD",458.7,458.7,4,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,4,21,1,0)
The initial comments entered by Human Resources as the memorandum was entered.
"^DD",458.7,458.7,4,"DT")
3040924
"^DD",458.7,458.7,5,0)
STATUS OF MEMORANDUM^RS^1:NOT STARTED;2:ACTIVE;3:RECONCILIATION STARTED;4:RECONCILED;^0;6^Q
"^DD",458.7,458.7,5,3)
The current status of the part-time physician's memorandum.
"^DD",458.7,458.7,5,21,0)
^^2^2^3050331^
"^DD",458.7,458.7,5,21,1,0)
The status of the Part Time Physician's memorandum.  Possible values are:
"^DD",458.7,458.7,5,21,2,0)
1:NOT STARTED, 2:ACTIVE, 3:RECONCILIATION STARTED, 4:RECONCILED
"^DD",458.7,458.7,5,"DT")
3050122
"^DD",458.7,458.7,6,0)
ENTERED BY^P200'^VA(200,^0;7^Q
"^DD",458.7,458.7,6,21,0)
^^2^2^3050331^
"^DD",458.7,458.7,6,21,1,0)
The Human Resource staff member who entered the Part Time Physician's
"^DD",458.7,458.7,6,21,2,0)
Memorandum.
"^DD",458.7,458.7,6,"DT")
3050122
"^DD",458.7,458.7,7,0)
DATE/TIME ENTERED^D^^0;8^S %DT="EST" D ^%DT S X=Y K:3041001>X X
"^DD",458.7,458.7,7,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2004
"^DD",458.7,458.7,7,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,7,21,1,0)
The date and time that the memorandum was entered.
"^DD",458.7,458.7,7,"DT")
3040922
"^DD",458.7,458.7,8,0)
CARRYOVER HOURS^NJ6,2^^0;9^K:+X'=X!(X>200)!(X<-200)!(X?.E1"."3.N) X
"^DD",458.7,458.7,8,3)
Type a number between -200 and 200, 2 Decimal Digits
"^DD",458.7,458.7,8,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,8,21,1,0)
The amount of hours carried over from the Part Time Physician's last memorandum.  Maximum carryover is +/- 5%.
"^DD",458.7,458.7,8,"DT")
3040922
"^DD",458.7,458.7,9,0)
TOTAL HOURS WORKED^NJ7,2^^0;10^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,9,3)
Type a number between 0 and 9999, 2 Decimal Digits
"^DD",458.7,458.7,9,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,9,21,1,0)
The total hours worked by the Part Time Physician since the beginning of their memorandum.  This includes both scheduled tour hours and extra hours worked.
"^DD",458.7,458.7,9,"DT")
3041204
"^DD",458.7,458.7,10,0)
TOTAL HOURS PAID^NJ7,2^^0;11^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,10,3)
Type a number between 0 and 9999, 2 Decimal Digits
"^DD",458.7,458.7,10,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,10,21,1,0)
The number of scheduled tour hours paid since the memorandum began.
"^DD",458.7,458.7,10,"DT")
3041204
"^DD",458.7,458.7,11,0)
NONPAY HOURS^NJ7,2^^0;12^K:+X'=X!(X>2000)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,11,3)
Type a number between 0 and 2000, 2 Decimal Digits
"^DD",458.7,458.7,11,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,11,21,1,0)
The number of scheduled tour hours reported as Non Pay since the memorandum began.
"^DD",458.7,458.7,11,"DT")
3041204
"^DD",458.7,458.7,12,0)
WITHOUT PAY HOURS^NJ7,2^^0;13^K:+X'=X!(X>2000)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,12,3)
Type a number between 0 and 2000, 2 Decimal Digits
"^DD",458.7,458.7,12,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,12,21,1,0)
The number of scheduled hours that were recorded as Leave With Out Pay (LWOP).
"^DD",458.7,458.7,12,"DT")
3041204
"^DD",458.7,458.7,13,0)
% OF MEMORANDUM COMPLETED^NJ6,2^^0;14^K:+X'=X!(X>100)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,13,3)
Type a number between 0 and 100, 2 Decimal Digits
"^DD",458.7,458.7,13,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,13,21,1,0)
The percentage of the memorandum that has been completed.  This percentage is based on the Start Date and the last Pay Period processed.
"^DD",458.7,458.7,13,"DT")
3041204
"^DD",458.7,458.7,14,0)
% OF HOURS COMPLETED^NJ6,2^^0;15^K:+X'=X!(X>200)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,14,3)
Type a number between 0 and 200, 2 Decimal Digits
"^DD",458.7,458.7,14,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,14,21,1,0)
The percentage of scheduled hours completed since the beginning of the memorandum.  This percentage reflects any AWOL that may have occurred during the memorandum.
"^DD",458.7,458.7,14,"DT")
3041204
"^DD",458.7,458.7,15,0)
AVE HRS/PP TO COMPLETE MEM^NJ6,2^^0;16^K:+X'=X!(X>999)!(X<0)!(X?.E1"."3.N) X
"^DD",458.7,458.7,15,3)
Type a number between 0 and 999, 2 Decimal Digits
"^DD",458.7,458.7,15,21,0)
^^1^1^3050331^
"^DD",458.7,458.7,15,21,1,0)
The average number of hours that the Part Time Physician will have to work to meet the Agreed Hours in their Memorandum of Service Level Expectation.
"^DD",458.7,458.7,15,"DT")
3041204
"^DD",458.7,458.7,16,0)
% OFF TARGET^NJ6,2^^0;17^K:+X'=X!(X>999.99)!(X<-999.99)!(X?.E1"."3.N) X
"^DD",458.7,458.7,16,3)
Type a number between -999.99 and 999.99, 2 Decimal Digits
"^DD",458.7,458.7,16,21,0)
^^3^3^3050331^
"^DD",458.7,458.7,16,21,1,0)
The percentage that the Part Time Physician is either ahead or
"^DD",458.7,458.7,16,21,2,0)
behind on meeting their Agreed Hours.  This percentage is based on 
"^DD",458.7,458.7,16,21,3,0)
the Part Time Physician's Normal Hours per Pay Period.
"^DD",458.7,458.7,16,"DT")
3050201
"^DD",458.7,458.7,17,0)
PT PHY'S RECONCILIATION CHOICE^S^1:No reconciliation needed;2:Transfer negative balance;3:Pay VA for negative balance;4:Transfer positive balance;5:Pay Phy for positive balance;^2;1^Q
"^DD",458.7,458.7,17,21,0)
^^1^1^3050122^^^
"^DD",458.7,458.7,17,21,1,0)
The PT Physician's choice on how to reconcile their last memorandum.
"^DD",458.7,458.7,17,"DT")
3050122
"^DD",458.7,458.7,18,0)
PT PHY'S RECONCILIATION NOTES^F^^2;2^K:$L(X)>240!($L(X)<1) X
"^DD",458.7,458.7,18,3)
Answer must be 1-240 characters in length
"^DD",458.7,458.7,18,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,18,21,1,0)
Comments entered by the PT Physician when they chose their reconciliation option.
"^DD",458.7,458.7,18,"DT")
3040924
"^DD",458.7,458.7,19,0)
RECONCILED BY^P200'^VA(200,^3;1^Q
"^DD",458.7,458.7,19,21,0)
^^1^1^3050104^^
"^DD",458.7,458.7,19,21,1,0)
The Human Resource staff member who completed the reconciliation process.
"^DD",458.7,458.7,19,"DT")
3050308
"^DD",458.7,458.7,20,0)
DATE/TIME RECONCILED^D^^3;2^S %DT="E" D ^%DT S X=Y K:3041001>X X
"^DD",458.7,458.7,20,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2004
"^DD",458.7,458.7,20,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,20,21,1,0)
The date and time that Human Resources completed the reconciliation process.
"^DD",458.7,458.7,20,"DT")
3040924
"^DD",458.7,458.7,21,0)
HR RECONCILIATION COMMENTS^F^^3.1;1^K:$L(X)>240!($L(X)<1) X
"^DD",458.7,458.7,21,3)
Answer must be 1-240 characters in length
"^DD",458.7,458.7,21,21,0)
^^1^1^3050122^^
"^DD",458.7,458.7,21,21,1,0)
Any final comments entered by Human Resources during the reconciliation process.
"^DD",458.7,458.7,21,"DT")
3050122
"^DD",458.7,458.7,22,0)
TERMINATION DATE^D^^4;1^S %DT="E" D ^%DT S X=Y K:3041001>X X
"^DD",458.7,458.7,22,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2004
"^DD",458.7,458.7,22,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,22,21,1,0)
The date specified by Human Resources in which the PT Physician's current memorandum will expire so that the reconciliation process can begin.
"^DD",458.7,458.7,22,"DT")
3040924
"^DD",458.7,458.7,23,0)
TERMINATED BY^P200'^VA(200,^4;2^Q
"^DD",458.7,458.7,23,21,0)
^^2^2^3050104^^
"^DD",458.7,458.7,23,21,1,0)
The Human Resources personnel who terminated the PT Physician's
"^DD",458.7,458.7,23,21,2,0)
memorandum.
"^DD",458.7,458.7,23,"DT")
3050104
"^DD",458.7,458.7,24,0)
DATE/TIME TERMINATED^D^^4;3^S %DT="E" D ^%DT S X=Y K:3041001>X X
"^DD",458.7,458.7,24,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2004
"^DD",458.7,458.7,24,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,24,21,1,0)
The date and time that the PT Physician's memorandum was terminated.
"^DD",458.7,458.7,24,"DT")
3040924
"^DD",458.7,458.7,25,0)
TERMINATION COMMENTS^F^^4.1;1^K:$L(X)>240!($L(X)<1) X
"^DD",458.7,458.7,25,3)
Answer must be 1-240 characters in length
"^DD",458.7,458.7,25,21,0)
^^1^1^3040924^
"^DD",458.7,458.7,25,21,1,0)
Comments entered by Human Resources when they terminated the PT Physician's memorandum.
"^DD",458.7,458.7,25,"DT")
3040924
"^DD",458.7,458.7,200,0)
PAY PERIOD^458.701^^9;0
"^DD",458.7,458.701,0)
PAY PERIOD SUB-FIELD^^3^4
"^DD",458.7,458.701,0,"DT")
3050124
"^DD",458.7,458.701,0,"IX","B",458.701,.01)

"^DD",458.7,458.701,0,"NM","PAY PERIOD")

"^DD",458.7,458.701,0,"UP")
458.7
"^DD",458.7,458.701,.01,0)
PAY PERIOD^MF^^0;1^K:$L(X)>5!($L(X)<5) X
"^DD",458.7,458.701,.01,1,0)
^.1
"^DD",458.7,458.701,.01,1,1,0)
458.701^B
"^DD",458.7,458.701,.01,1,1,1)
S ^PRST(458.7,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",458.7,458.701,.01,1,1,2)
K ^PRST(458.7,DA(1),9,"B",$E(X,1,30),DA)
"^DD",458.7,458.701,.01,3)
Answer must be 5 characters in length.
"^DD",458.7,458.701,.01,21,0)
^^1^1^3050124^
"^DD",458.7,458.701,.01,21,1,0)
A Pay Period covered by the Part Time Physician's memorandum.
"^DD",458.7,458.701,.01,"DT")
3050124
"^DD",458.7,458.701,1,0)
REG HOURS^NJ6,2^^0;2^K:+X'=X!(X>100)!(X<0)!(X?.E1"."3N.N) X
"^DD",458.7,458.701,1,3)
Type a Number between 0 and 100, 2 Decimal Digits
"^DD",458.7,458.701,1,21,0)
^^2^2^3050124^
"^DD",458.7,458.701,1,21,1,0)
The regular hours credited to the part-time physician's memorandum during
"^DD",458.7,458.701,1,21,2,0)
this Pay Period.
"^DD",458.7,458.701,1,"DT")
3050124
"^DD",458.7,458.701,2,0)
NP HOURS^NJ6,2^^0;3^K:+X'=X!(X>100)!(X<0)!(X?.E1"."3N.N) X
"^DD",458.7,458.701,2,3)
Type a Number between 0 and 100, 2 Decimal Digits
"^DD",458.7,458.701,2,21,0)
^^2^2^3050124^
"^DD",458.7,458.701,2,21,1,0)
The Non Pay hours posted on the part-time physician's time card during
"^DD",458.7,458.701,2,21,2,0)
this Pay Period.
"^DD",458.7,458.701,2,"DT")
3050124
"^DD",458.7,458.701,3,0)
WP HOURS^NJ6,2^^0;4^K:+X'=X!(X>100)!(X<0)!(X?.E1"."3N.N) X
"^DD",458.7,458.701,3,3)
Type a Number between 0 and 100, 2 Decimal Digits
"^DD",458.7,458.701,3,21,0)
^^2^2^3050124^
"^DD",458.7,458.701,3,21,1,0)
The Without Pay hours posted on the part-time physician's time card during
"^DD",458.7,458.701,3,21,2,0)
this Pay Period.
"^DD",458.7,458.701,3,"DT")
3050124
"^DIC",458.4,458.4,0)
PT PHYSICIAN EXTENDED ABSENCE^458.4
"^DIC",458.4,458.4,0,"GL")
^PRST(458.4,
"^DIC",458.4,458.4,"%D",0)
^^11^11^3050119^
"^DIC",458.4,458.4,"%D",1,0)
This file contains extended absence records for part-time physicians that 
"^DIC",458.4,458.4,"%D",2,0)
work adjustable hours and have a memorandum of service level expectations.
"^DIC",458.4,458.4,"%D",3,0)
Such employees must maintain an electronic subsidiary record (ESR) that
"^DIC",458.4,458.4,"%D",4,0)
records their actual work.
"^DIC",458.4,458.4,"%D",5,0)
 
"^DIC",458.4,458.4,"%D",6,0)
The part-time physician can enter an extended absence record to indicate a
"^DIC",458.4,458.4,"%D",7,0)
future period when they will not be performing work for the VA.  The
"^DIC",458.4,458.4,"%D",8,0)
software will automatically change the status of ESR days with a scheduled
"^DIC",458.4,458.4,"%D",9,0)
tour of duty to signed if those days are covered by the period of extended
"^DIC",458.4,458.4,"%D",10,0)
absence.  Therefore the physician will not need to manually update their
"^DIC",458.4,458.4,"%D",11,0)
ESR during the absence.
"^DIC",458.4,"B","PT PHYSICIAN EXTENDED ABSENCE",458.4)

"^DIC",458.7,458.7,0)
PT PHYSICIAN MEMORANDUM^458.7
"^DIC",458.7,458.7,0,"GL")
^PRST(458.7,
"^DIC",458.7,458.7,"%",0)
^1.005^^0
"^DIC",458.7,458.7,"%D",0)
^^9^9^3050120^^^^
"^DIC",458.7,458.7,"%D",1,0)
This file contains all of the information related to the part-time physician's
"^DIC",458.7,458.7,"%D",2,0)
Memoranda of Service Level Expectation.  Memorandum will only be applicable for
"^DIC",458.7,458.7,"%D",3,0)
part-time physicians who work adjustable hours.  A memorandum will cover 26 pay
"^DIC",458.7,458.7,"%D",4,0)
periods.
"^DIC",458.7,458.7,"%D",5,0)

"^DIC",458.7,458.7,"%D",6,0)
The file will contain all of the information related to the part-time
"^DIC",458.7,458.7,"%D",7,0)
physician's memoranda including a per pay period breakdown of hours worked
"^DIC",458.7,458.7,"%D",8,0)
and various comments fields that will assist Human Resources as the reconcile
"^DIC",458.7,458.7,"%D",9,0)
the memoranda after its completion or termination.
"^DIC",458.7,"B","PT PHYSICIAN MEMORANDUM",458.7)

"BLD",5796,6)
^98
**END**
**END**
