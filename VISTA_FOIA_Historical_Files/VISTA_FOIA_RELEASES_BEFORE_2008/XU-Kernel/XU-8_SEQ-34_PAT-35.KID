Released XU*8*35 SEQ #34
Extracted from mail message
**KIDS**:XU*8.0*35^

**INSTALL NAME**
XU*8.0*35
"BLD",50,0)
XU*8.0*35^KERNEL^0^2960731^n
"BLD",50,1,0)
^^26^26^2960731^
"BLD",50,1,1,0)
This is an update to %ZOSV2 for VAX/ALPHA sites only. It supports updates
"BLD",50,1,2,0)
to VPM (Kernel Toolkit's VMS Performance Monitor) and must be installed
"BLD",50,1,3,0)
prior to installing Kernel Toolkit patch XT*7.3*17.
"BLD",50,1,4,0)
 
"BLD",50,1,5,0)
ROUTINE        CHECKSUM
"BLD",50,1,6,0)
-------       ----------
"BLD",50,1,7,0)
ZOSV2VXD  value = 9513833 
"BLD",50,1,8,0)
 
"BLD",50,1,9,0)
Installation:
"BLD",50,1,10,0)
  1. Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This 
"BLD",50,1,11,0)
     option will load the KIDS package in this message onto your system.  
"BLD",50,1,12,0)
  2. Answer NO to the question: 
"BLD",50,1,13,0)
     'Shall I preserve what is on disk in a separate back-up message ?' 
"BLD",50,1,14,0)
  3. From the 'Installation Menu' of the KIDS menu, run the option 
"BLD",50,1,15,0)
     'Verify Checksums in Transport Global' and verify that all routines 
"BLD",50,1,16,0)
     have the correct checksum.  
"BLD",50,1,17,0)
  4. From the 'Installation Menu' of the KIDS menu, run the option
"BLD",50,1,18,0)
'Install Package(s).' Select the package and proceed with install.
"BLD",50,1,19,0)
 
"BLD",50,1,20,0)
  5. After installing this patch, you need to move the routine from 
"BLD",50,1,21,0)
     your production account to the manager account: 
"BLD",50,1,22,0)
 
"BLD",50,1,23,0)
     ZOSV2VXD
"BLD",50,1,24,0)
 
"BLD",50,1,25,0)
  6. Rename the routine to, "%ZOSV2." If this routine is mapped, be sure
"BLD",50,1,26,0)
to disable mapping of this routine.
"BLD",50,4,0)
^9.64PA^^
"BLD",50,"ABPKG")
n
"BLD",50,"KRN",0)
^9.67PA^8994^15
"BLD",50,"KRN",.4,0)
.4
"BLD",50,"KRN",.401,0)
.401
"BLD",50,"KRN",.402,0)
.402
"BLD",50,"KRN",.403,0)
.403
"BLD",50,"KRN",.5,0)
.5
"BLD",50,"KRN",.84,0)
.84
"BLD",50,"KRN",3.6,0)
3.6
"BLD",50,"KRN",9.2,0)
9.2
"BLD",50,"KRN",9.8,0)
9.8
"BLD",50,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",50,"KRN",9.8,"NM",1,0)
ZOSV2VXD^^0^B29943908
"BLD",50,"KRN",9.8,"NM","B","ZOSV2VXD",1)

"BLD",50,"KRN",19,0)
19
"BLD",50,"KRN",19.1,0)
19.1
"BLD",50,"KRN",101,0)
101
"BLD",50,"KRN",409.61,0)
409.61
"BLD",50,"KRN",8994,0)
8994
"BLD",50,"KRN",8995,0)
8995
"BLD",50,"KRN","B",.4,.4)

"BLD",50,"KRN","B",.401,.401)

"BLD",50,"KRN","B",.402,.402)

"BLD",50,"KRN","B",.403,.403)

"BLD",50,"KRN","B",.5,.5)

"BLD",50,"KRN","B",.84,.84)

"BLD",50,"KRN","B",3.6,3.6)

"BLD",50,"KRN","B",9.2,9.2)

"BLD",50,"KRN","B",9.8,9.8)

"BLD",50,"KRN","B",19,19)

"BLD",50,"KRN","B",19.1,19.1)

"BLD",50,"KRN","B",101,101)

"BLD",50,"KRN","B",409.61,409.61)

"BLD",50,"KRN","B",8994,8994)

"BLD",50,"KRN","B",8995,8995)

"BLD",50,"QUES",0)
^9.62^^
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^XUDOCV7 NEW FEATURES
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^2950703^2951018^4
"PKG",3,22,1,"PAH",1,0)
35^2960731
"PKG",3,22,1,"PAH",1,1,0)
^^26^26^2960731
"PKG",3,22,1,"PAH",1,1,1,0)
This is an update to %ZOSV2 for VAX/ALPHA sites only. It supports updates
"PKG",3,22,1,"PAH",1,1,2,0)
to VPM (Kernel Toolkit's VMS Performance Monitor) and must be installed
"PKG",3,22,1,"PAH",1,1,3,0)
prior to installing Kernel Toolkit patch XT*7.3*17.
"PKG",3,22,1,"PAH",1,1,4,0)
 
"PKG",3,22,1,"PAH",1,1,5,0)
ROUTINE        CHECKSUM
"PKG",3,22,1,"PAH",1,1,6,0)
-------       ----------
"PKG",3,22,1,"PAH",1,1,7,0)
ZOSV2VXD  value = 9513833 
"PKG",3,22,1,"PAH",1,1,8,0)
 
"PKG",3,22,1,"PAH",1,1,9,0)
Installation:
"PKG",3,22,1,"PAH",1,1,10,0)
  1. Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This 
"PKG",3,22,1,"PAH",1,1,11,0)
     option will load the KIDS package in this message onto your system.  
"PKG",3,22,1,"PAH",1,1,12,0)
  2. Answer NO to the question: 
"PKG",3,22,1,"PAH",1,1,13,0)
     'Shall I preserve what is on disk in a separate back-up message ?' 
"PKG",3,22,1,"PAH",1,1,14,0)
  3. From the 'Installation Menu' of the KIDS menu, run the option 
"PKG",3,22,1,"PAH",1,1,15,0)
     'Verify Checksums in Transport Global' and verify that all routines 
"PKG",3,22,1,"PAH",1,1,16,0)
     have the correct checksum.  
"PKG",3,22,1,"PAH",1,1,17,0)
  4. From the 'Installation Menu' of the KIDS menu, run the option
"PKG",3,22,1,"PAH",1,1,18,0)
'Install Package(s).' Select the package and proceed with install.
"PKG",3,22,1,"PAH",1,1,19,0)
 
"PKG",3,22,1,"PAH",1,1,20,0)
  5. After installing this patch, you need to move the routine from 
"PKG",3,22,1,"PAH",1,1,21,0)
     your production account to the manager account: 
"PKG",3,22,1,"PAH",1,1,22,0)
 
"PKG",3,22,1,"PAH",1,1,23,0)
     ZOSV2VXD
"PKG",3,22,1,"PAH",1,1,24,0)
 
"PKG",3,22,1,"PAH",1,1,25,0)
  6. Rename the routine to, "%ZOSV2." If this routine is mapped, be sure
"PKG",3,22,1,"PAH",1,1,26,0)
to disable mapping of this routine.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","ZOSV2VXD")
0^1^B29943908
"RTN","ZOSV2VXD",1,0)
%ZOSV2 ; SFISC/JC - Capacity Mgmt - Performance Data ;06/27/96  10:17
"RTN","ZOSV2VXD",2,0)
 ;;8.0;KERNEL;**35**;JUL 03, 1995
"RTN","ZOSV2VXD",3,0)
DB ;Collect volume set information for this environment
"RTN","ZOSV2VXD",4,0)
START D VSET^%VOLDEF I '%SMSTART G DONE
"RTN","ZOSV2VXD",5,0)
S0 S ALL=1,ANS="Y"
"RTN","ZOSV2VXD",6,0)
 S A=$ZC(%VIEWBUFFER,1)
"RTN","ZOSV2VXD",7,0)
 S VSNUM="",VOLNUM="",GRTOT=0
"RTN","ZOSV2VXD",8,0)
S1 S VSNUM=$O(%VOL(VSNUM)),BLK0=0 G:VSNUM="" S3
"RTN","ZOSV2VXD",9,0)
S2 S VOLNUM=$O(%VOL(VSNUM,VOLNUM)) G:VOLNUM="" S1
"RTN","ZOSV2VXD",10,0)
 I VOLNUM="BIJ" G S2
"RTN","ZOSV2VXD",11,0)
 S DDU=$P(%VOL(VSNUM,VOLNUM),"^"),MPS=$P(%VOL(VSNUM,VOLNUM),"^",2),STRNO="S"_VSNUM
"RTN","ZOSV2VXD",12,0)
 D DISK S BLK0=BLK0+(MPS*400) G S2
"RTN","ZOSV2VXD",13,0)
 ;
"RTN","ZOSV2VXD",14,0)
S3 ;
"RTN","ZOSV2VXD",15,0)
DONE K QUES,DTAB,D,TYY,UU,DDU,YES,ALL,Y,BLK0,GRTOT
"RTN","ZOSV2VXD",16,0)
 K PREV,MPS,M0,MP0,CT,MBLK,AVAIL,TYP,USE,OLDAVAIL,OLDUSE
"RTN","ZOSV2VXD",17,0)
 K %ISAV,%NULL,TAV,TYPES
"RTN","ZOSV2VXD",18,0)
EXIT Q
"RTN","ZOSV2VXD",19,0)
 ;
"RTN","ZOSV2VXD",20,0)
DISK ; Set up XUCM ARRAY
"RTN","ZOSV2VXD",21,0)
 S TAV=0,CNT=1+$G(CNT)
"RTN","ZOSV2VXD",22,0)
 S XUCM(CNT)=VOLNUM_"^"_DDU_"^"
"RTN","ZOSV2VXD",23,0)
 D GETSTAT^%VOLTAB I '%RDACC Q
"RTN","ZOSV2VXD",24,0)
 S PREV=100 F M0=0:1:MPS S MBLK=M0*400+399+BLK0 D MAPGET
"RTN","ZOSV2VXD",25,0)
 S XUCM(CNT)=XUCM(CNT)_TAV_"^"_(MPS*400)
"RTN","ZOSV2VXD",26,0)
 ;
"RTN","ZOSV2VXD",27,0)
MAPGET ;
"RTN","ZOSV2VXD",28,0)
 I M0=MPS Q
"RTN","ZOSV2VXD",29,0)
 S AVAIL=0,$ZE="ERR" V MBLK:STRNO S $ZE="" G NOERR
"RTN","ZOSV2VXD",30,0)
ERR S $ZE="",TYP=100 G TYPCHK
"RTN","ZOSV2VXD",31,0)
NOERR I $V(1006,0,2)=65535&($V(1012,0,2)=32769) G OK
"RTN","ZOSV2VXD",32,0)
NOTOK S TYP=100 G TYPCHK
"RTN","ZOSV2VXD",33,0)
OK I $V(1008,0,2)=56173 S USE="* SPOOL *",TYP=4 G TYPCHK
"RTN","ZOSV2VXD",34,0)
 I $V(1008,0,2)+$V(1010,0,2)'=65535 G NOTOK
"RTN","ZOSV2VXD",35,0)
 S AVAIL=$V(1022,0,2) G SPECL:$V(1008,0,2)'=21845
"RTN","ZOSV2VXD",36,0)
 I AVAIL=399 S TYP=1 G TYPCHK
"RTN","ZOSV2VXD",37,0)
 I AVAIL=398,M0=0 S TYP=100 G TYPCHK
"RTN","ZOSV2VXD",38,0)
 S TYP=100 S:AVAIL=0 TYP=5 G TYPCHK
"RTN","ZOSV2VXD",39,0)
SPECL I AVAIL S AVAIL=0,TYP=100 G TYPCHK
"RTN","ZOSV2VXD",40,0)
 I $V(1008,0,2)=13107 S TYP=3 G TYPCHK
"RTN","ZOSV2VXD",41,0)
 I $V(1008,0,2)=43690 S TYP=2 G TYPCHK
"RTN","ZOSV2VXD",42,0)
 G NOTOK
"RTN","ZOSV2VXD",43,0)
 ;
"RTN","ZOSV2VXD",44,0)
TYPCHK S TAV=TAV+AVAIL I TYP=100 G NEWTYP
"RTN","ZOSV2VXD",45,0)
 I TYP=PREV S CT=CT+1 Q
"RTN","ZOSV2VXD",46,0)
 S MP0=M0,CT=0,OLDAVAIL=AVAIL
"RTN","ZOSV2VXD",47,0)
NEWTYP S PREV=TYP
"RTN","ZOSV2VXD",48,0)
 Q
"RTN","ZOSV2VXD",49,0)
RTHSTOP ;(TASKMAN-RUN IN MGR@0001) STOP RTHIST/MOVE OUT DATA/PURGE RTH
"RTN","ZOSV2VXD",50,0)
 Q:$$OS<6.1
"RTN","ZOSV2VXD",51,0)
 N I,J,K,L,M,N,O,P,Q,R,X,C,S D INIT^%VOLDEF,GETGRP^%SYSROU
"RTN","ZOSV2VXD",52,0)
 ;I '$D(^["MGR"]RTH(SCSNODE)),$V(%SMSTART)\32#2'=1 G RTH
"RTN","ZOSV2VXD",53,0)
 S RTNODE="" F  S RTNODE=$O(^["MGR"]RTH(RTNODE)) Q:RTNODE=""  D
"RTN","ZOSV2VXD",54,0)
 .S ^["MGR"]RTH(RTNODE)=0
"RTN","ZOSV2VXD",55,0)
 .S ^%ZRTL("RTH",RTNODE)=0,C=0
"RTN","ZOSV2VXD",56,0)
 .S SUB=0,U="^" F  S SUB=$O(^["MGR"]RTH(RTNODE,SUB)) Q:SUB<1  D
"RTN","ZOSV2VXD",57,0)
 ..Q:$G(^["MGR"]RTH(RTNODE,SUB,"LABEL"))'["VPM"
"RTN","ZOSV2VXD",58,0)
 ..Q:'$D(^["MGR"]RTH(RTNODE,SUB,"STIME"))  S %H=^("STIME") D YX^%DTC S S=$P(^["MGR"]RTH(RTNODE,SUB,"ETIME"),",",1)-$P(^("STIME"),",",1)*86400+$P(^("ETIME"),",",2)-$P(^("STIME"),",",2)
"RTN","ZOSV2VXD",59,0)
 ..S I=$G(^["MGR"]RTH(RTNODE,SUB,"ROUREF")) I I S I=I*10/S+.5\1/10
"RTN","ZOSV2VXD",60,0)
 ..S J=$G(^["MGR"]RTH(RTNODE,SUB,"MAPROU")) I J S J=J*10/S+.5\1/10
"RTN","ZOSV2VXD",61,0)
 ..S K=$G(^["MGR"]RTH(RTNODE,SUB,"Global Gets")) I K S K=K*10/S+.5\1/10
"RTN","ZOSV2VXD",62,0)
 ..S L=$G(^["MGR"]RTH(RTNODE,SUB,"Global Sets")) I L S L=L*10/S+.5\1/10
"RTN","ZOSV2VXD",63,0)
 ..S M=$G(^["MGR"]RTH(RTNODE,SUB,"Global Kills")) I M S M=M*10/S+.5\1/10
"RTN","ZOSV2VXD",64,0)
 ..S N=$G(^["MGR"]RTH(RTNODE,SUB,"Logical Reads")) I N S N=N*10/S+.5\1/10
"RTN","ZOSV2VXD",65,0)
 ..S O=$G(^["MGR"]RTH(RTNODE,SUB,"Logical Writes")) I O S O=O*10/S+.5\1/10
"RTN","ZOSV2VXD",66,0)
 ..S P=$G(^["MGR"]RTH(RTNODE,SUB,"Physical Reads")) I P S P=P*10/S+.5\1/10
"RTN","ZOSV2VXD",67,0)
 ..S Q=$G(^["MGR"]RTH(RTNODE,SUB,"Physical Writes")) I Q S Q=Q*10/S+.5\1/10
"RTN","ZOSV2VXD",68,0)
 ..S Z="",R=0 F  S Z=$O(^["MGR"]RTH(RTNODE,SUB,"DDP",Z)) Q:Z=""  S R=R+$G(^(Z,"XMTS"))
"RTN","ZOSV2VXD",69,0)
 ..I R S R=R*10/S+.5\1/10
"RTN","ZOSV2VXD",70,0)
 ..S C=1+C,^%ZRTL("RTH",RTNODE,C)=RTNODE_U_SUB_U_$TR(Y,":")_U_S_U_I_U_J_U_K_U_L_U_M_U_N_U_O_U_P_U_Q_U_R
"RTN","ZOSV2VXD",71,0)
 ..I $D(^["MGR"]RTH(RTNODE,SUB,"PMF-R","TTYGLOREF")) D
"RTN","ZOSV2VXD",72,0)
 ...S ^%ZRTL("RTH",RTNODE,"RT",SUB,0)=^["MGR"]RTH(RTNODE,SUB,"STIME")
"RTN","ZOSV2VXD",73,0)
 ...S X=0 F  S X=$O(^["MGR"]RTH(RTNODE,SUB,"PMF-R","TTYGLOREF",X)) Q:X<1  S Y=^(X),^%ZRTL("RTH",RTNODE,"RT",SUB,X)=Y
"RTN","ZOSV2VXD",74,0)
 .S ^%ZRTL("RTH",RTNODE)=1
"RTN","ZOSV2VXD",75,0)
 Q
"RTN","ZOSV2VXD",76,0)
RTH ;(TASKMAN) INITIATE NEW RTHIST DATA COLLECTIONS FOR THE DAY
"RTN","ZOSV2VXD",77,0)
 Q:$$OS<6.1
"RTN","ZOSV2VXD",78,0)
 D INIT^%VOLDEF,GETGRP^%SYSROU
"RTN","ZOSV2VXD",79,0)
 S LOOP=0
"RTN","ZOSV2VXD",80,0)
LOOP ;WAIT UNTIL LAST SESSION COMPLETES
"RTN","ZOSV2VXD",81,0)
 I LOOP>90 S $ZE="Timed Out Starting RTHIST" D ^%ZTER Q
"RTN","ZOSV2VXD",82,0)
 I $V(%SMSTART)\32#2=1 S LOOP=LOOP+1 H 60 G LOOP
"RTN","ZOSV2VXD",83,0)
 K ^["MGR"]RTH(SCSNODE) S ^["MGR"]RTH(SCSNODE)=0
"RTN","ZOSV2VXD",84,0)
 S TIMS=24,TIM=10,TIMI=50
"RTN","ZOSV2VXD",85,0)
 S X="NOW",%DT="T" D ^%DT D DD^%DT S NOW=Y
"RTN","ZOSV2VXD",86,0)
 S SUB=0 F I=1:1 Q:$O(^["MGR"]RTH(SCSNODE,SUB))=""  S SUB=$O(^(SUB))
"RTN","ZOSV2VXD",87,0)
 S WHEN=$P($ZH,",",3),LAB="VPM SESSION-"_NOW
"RTN","ZOSV2VXD",88,0)
 I $$OS>6.1 S CONF=$ZC(%VERSION,"INTERNAL")
"RTN","ZOSV2VXD",89,0)
 E  S CONF=$ZV
"RTN","ZOSV2VXD",90,0)
 S CONF=CONF_","_^[LIB]SYS(-1,SCSNODE,"RUNNING")
"RTN","ZOSV2VXD",91,0)
 S SZ=^[LIB]SYS(^("RUNNING"),"RTHIST","BUFFERS")*512
"RTN","ZOSV2VXD",92,0)
 S RTHOPT="/MANAGER/UCI=MGR/NORMS_ROU/NORMS_LIB/SYM=50000/SOU=20000"
"RTN","ZOSV2VXD",93,0)
 S X=$$CVDAT^RTHIST(WHEN),$ZT="TRAP^%ZOSV2"
"RTN","ZOSV2VXD",94,0)
 J START^RTHIST1(SZ,TIM,TIMS,TIMI,X,SUB,CONF,LAB,SCSNODE):(ERROR="VPM$RTHIST.LOG":OPTIONS=RTHOPT:NAME="VPM_RTHIST_"_GRP)
"RTN","ZOSV2VXD",95,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","ZOSV2VXD",96,0)
 Q
"RTN","ZOSV2VXD",97,0)
TRAP ;Give process time to die off
"RTN","ZOSV2VXD",98,0)
 I $ZE["SYSTEM-F-DUPLNAM" S RETRY=$G(RETRY)+1
"RTN","ZOSV2VXD",99,0)
 I RETRY'>90 H 60 G RTH
"RTN","ZOSV2VXD",100,0)
 K RETRY
"RTN","ZOSV2VXD",101,0)
 Q
"RTN","ZOSV2VXD",102,0)
RT ;
"RTN","ZOSV2VXD",103,0)
 N NODE,RUN,ET,CNT,ZCT,STIM,X
"RTN","ZOSV2VXD",104,0)
 Q:^%ZOSF("OS")'["DSM"
"RTN","ZOSV2VXD",105,0)
 W " Node",?7,"Run",?24,"Label",?48,"Start",?57,"ET",?61,"Count",?70,"RT",!
"RTN","ZOSV2VXD",106,0)
 S (NODE,RUN)=0 F  S NODE=$O(^["MGR"]RTH(NODE)) Q:NODE=""  D
"RTN","ZOSV2VXD",107,0)
 . F  S RUN=$O(^["MGR"]RTH(NODE,RUN)) Q:RUN=""  D
"RTN","ZOSV2VXD",108,0)
 . . S (ET,CNT,ZCT)=0
"RTN","ZOSV2VXD",109,0)
 . . F I=1:1:34 S X=^["MGR"]RTH(NODE,RUN,"PMF-R","TTYGLOREF",I) D
"RTN","ZOSV2VXD",110,0)
 . . . S ET=ET+$P(X,";",2),Y=$P(X,";",3),ZCT=ZCT+Y
"RTN","ZOSV2VXD",111,0)
 . . . F J=1:1:12 S CNT=CNT+$P(Y,",",J)
"RTN","ZOSV2VXD",112,0)
 . . I $$OS<6.5 S ET=ET+(.3*ZCT)+(.5*(CNT-ZCT))
"RTN","ZOSV2VXD",113,0)
 . . I $$OS'<6.5 S ET=ET/100+(.005*CNT)
"RTN","ZOSV2VXD",114,0)
 . . S X=$P(^["MGR"]RTH(NODE,RUN,"STIME"),",",2)
"RTN","ZOSV2VXD",115,0)
 . . S H=X\3600,M=X#3600\60,S=X#3600#60
"RTN","ZOSV2VXD",116,0)
 . . S STIM=$J(H,2)_":"_$S($L(M)<2:0_M,1:M)_":"_$S($L(S)<2:0_S,1:S)
"RTN","ZOSV2VXD",117,0)
 . . W NODE,?7,$J(RUN,3),?13,$E(^["MGR"]RTH(NODE,RUN,"LABEL"),1,30),?45,STIM,?55,$J($P(^("ETIME"),",",2)-$P(^("STIME"),",",2),4),?60,$J(CNT,6),?69 W:CNT $J(ET/CNT,4,2)
"RTN","ZOSV2VXD",118,0)
 . . W !
"RTN","ZOSV2VXD",119,0)
 Q
"RTN","ZOSV2VXD",120,0)
TRNLNM(%) ;TRANSLATE A VAX LOGICAL
"RTN","ZOSV2VXD",121,0)
 I ^%ZOSF("OS")'["VAX" Q ""
"RTN","ZOSV2VXD",122,0)
 I $$OS>6.1 Q $ZC(%TRNLNM,%)
"RTN","ZOSV2VXD",123,0)
 E  Q $ZC(%TRNLOG,%)
"RTN","ZOSV2VXD",124,0)
OS() ;
"RTN","ZOSV2VXD",125,0)
 Q $P($ZV," V",2)
"RTN","ZOSV2VXD",126,0)
PRV() ;current privs
"RTN","ZOSV2VXD",127,0)
 Q $&ZLIB.%GETJPI("","CURPRIV")
"VER")
8.0^21.0
**END**
**END**
