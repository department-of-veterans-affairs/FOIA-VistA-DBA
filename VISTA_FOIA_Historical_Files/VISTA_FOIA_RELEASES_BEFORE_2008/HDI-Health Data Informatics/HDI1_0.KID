KIDS Distribution saved on Apr 26, 2005@16:45:10
HEALTH DATA & INFORMATICS V1.0 PLUS TOOLKIT PATCH XT*7.3*93
**KIDS**:DATA STANDARDIZATION 1.0^XT*7.3*93^HEALTH DATA & INFORMATICS 1.0^

**INSTALL NAME**
DATA STANDARDIZATION 1.0
"BLD",5494,0)
DATA STANDARDIZATION 1.0^^1^3050426^n
"BLD",5494,1,0)
^^2^2^3050224^
"BLD",5494,1,1,0)
Combined build containing Toolkit patch XT*7.3*93 and the Health Data & 
"BLD",5494,1,2,0)
Informatics v1.0 package release.
"BLD",5494,10,0)
^9.63^2^2
"BLD",5494,10,1,0)
XT*7.3*93^1
"BLD",5494,10,2,0)
HEALTH DATA & INFORMATICS 1.0^1
"BLD",5494,10,"B","HEALTH DATA & INFORMATICS 1.0",2)

"BLD",5494,10,"B","XT*7.3*93",1)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
XT*7.3*93
"BLD",5475,0)
XT*7.3*93^TOOLKIT^0^3050426^y
"BLD",5475,1,0)
^^1^1^3050422^^^
"BLD",5475,1,1,0)
Please see the patch description on Forum, in the National Patch Module.
"BLD",5475,4,0)
^9.64PA^8985.1^1
"BLD",5475,4,8985.1,0)
8985.1
"BLD",5475,4,8985.1,222)
y^y^f^^^^n
"BLD",5475,4,"B",8985.1,8985.1)

"BLD",5475,"ABPKG")
n
"BLD",5475,"KRN",0)
^9.67PA^8989.52^19
"BLD",5475,"KRN",.4,0)
.4
"BLD",5475,"KRN",.401,0)
.401
"BLD",5475,"KRN",.402,0)
.402
"BLD",5475,"KRN",.403,0)
.403
"BLD",5475,"KRN",.5,0)
.5
"BLD",5475,"KRN",.84,0)
.84
"BLD",5475,"KRN",3.6,0)
3.6
"BLD",5475,"KRN",3.8,0)
3.8
"BLD",5475,"KRN",9.2,0)
9.2
"BLD",5475,"KRN",9.8,0)
9.8
"BLD",5475,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",5475,"KRN",9.8,"NM",1,0)
XTID^^0^B3782395
"BLD",5475,"KRN",9.8,"NM",2,0)
XTID1^^0^B27860493
"BLD",5475,"KRN",9.8,"NM",3,0)
XTIDCTX^^0^B18329767
"BLD",5475,"KRN",9.8,"NM",4,0)
XTIDSET^^0^B12683051
"BLD",5475,"KRN",9.8,"NM",5,0)
XTIDTBL^^0^B7276687
"BLD",5475,"KRN",9.8,"NM",6,0)
XTIDTERM^^0^B20599072
"BLD",5475,"KRN",9.8,"NM","B","XTID",1)

"BLD",5475,"KRN",9.8,"NM","B","XTID1",2)

"BLD",5475,"KRN",9.8,"NM","B","XTIDCTX",3)

"BLD",5475,"KRN",9.8,"NM","B","XTIDSET",4)

"BLD",5475,"KRN",9.8,"NM","B","XTIDTBL",5)

"BLD",5475,"KRN",9.8,"NM","B","XTIDTERM",6)

"BLD",5475,"KRN",19,0)
19
"BLD",5475,"KRN",19.1,0)
19.1
"BLD",5475,"KRN",101,0)
101
"BLD",5475,"KRN",409.61,0)
409.61
"BLD",5475,"KRN",771,0)
771
"BLD",5475,"KRN",870,0)
870
"BLD",5475,"KRN",8989.51,0)
8989.51
"BLD",5475,"KRN",8989.52,0)
8989.52
"BLD",5475,"KRN",8994,0)
8994
"BLD",5475,"KRN","B",.4,.4)

"BLD",5475,"KRN","B",.401,.401)

"BLD",5475,"KRN","B",.402,.402)

"BLD",5475,"KRN","B",.403,.403)

"BLD",5475,"KRN","B",.5,.5)

"BLD",5475,"KRN","B",.84,.84)

"BLD",5475,"KRN","B",3.6,3.6)

"BLD",5475,"KRN","B",3.8,3.8)

"BLD",5475,"KRN","B",9.2,9.2)

"BLD",5475,"KRN","B",9.8,9.8)

"BLD",5475,"KRN","B",19,19)

"BLD",5475,"KRN","B",19.1,19.1)

"BLD",5475,"KRN","B",101,101)

"BLD",5475,"KRN","B",409.61,409.61)

"BLD",5475,"KRN","B",771,771)

"BLD",5475,"KRN","B",870,870)

"BLD",5475,"KRN","B",8989.51,8989.51)

"BLD",5475,"KRN","B",8989.52,8989.52)

"BLD",5475,"KRN","B",8994,8994)

"BLD",5475,"QUES",0)
^9.62^^
"BLD",5475,"REQB",0)
^9.611^^
"FIA",8985.1)
XTID VUID FOR SET OF CODES
"FIA",8985.1,0)
^XTID(8985.1,
"FIA",8985.1,0,0)
8985.1
"FIA",8985.1,0,1)
y^y^f^^^^n
"FIA",8985.1,0,10)

"FIA",8985.1,0,11)

"FIA",8985.1,0,"RLRO")

"FIA",8985.1,0,"VR")
7.3^XT
"FIA",8985.1,8985.1)
0
"FIA",8985.1,8985.11)
0
"IX",8985.1,8985.1,"B",0)
8985.1^B^Used to ensure uniqueness of reference terms for set of codes^R^^R^IR^I^8985.1^^^^^LS
"IX",8985.1,8985.1,"B",1)
S ^XTID(8985.1,"B",X(1),X(2),X(3),DA)=""
"IX",8985.1,8985.1,"B",2)
K ^XTID(8985.1,"B",X(1),X(2),X(3),DA)
"IX",8985.1,8985.1,"B",2.5)
K ^XTID(8985.1,"B")
"IX",8985.1,8985.1,"B",11.1,0)
^.114IA^3^3
"IX",8985.1,8985.1,"B",11.1,1,0)
1^F^8985.1^.01^^1
"IX",8985.1,8985.1,"B",11.1,2,0)
2^F^8985.1^.02^^2
"IX",8985.1,8985.1,"B",11.1,3,0)
3^F^8985.1^.03^^3
"IX",8985.1,8985.1,"C",0)
8985.1^C^Used for locating reference terms by VUID and can indicate the master entry^R^^R^IR^I^8985.1^^^^^LS
"IX",8985.1,8985.1,"C",1)
S ^XTID(8985.1,"C",$E(X(1),1,20),$E(X(2),1,30),$E(X(3),1,30),$E(X(4),1,1),DA)=""
"IX",8985.1,8985.1,"C",2)
K ^XTID(8985.1,"C",$E(X(1),1,20),$E(X(2),1,30),$E(X(3),1,30),$E(X(4),1,1),DA)
"IX",8985.1,8985.1,"C",2.5)
K ^XTID(8985.1,"C")
"IX",8985.1,8985.1,"C",11.1,0)
^.114IA^4^4
"IX",8985.1,8985.1,"C",11.1,1,0)
1^F^8985.1^99.99^20^1^F
"IX",8985.1,8985.1,"C",11.1,2,0)
2^F^8985.1^.01^30^2^F
"IX",8985.1,8985.1,"C",11.1,3,0)
3^F^8985.1^.02^30^3^F
"IX",8985.1,8985.1,"C",11.1,4,0)
4^F^8985.1^99.98^1^4^F
"IX",8985.1,8985.11,"B",0)
8985.11^B^Uniqueness Index for Key 'A' of Subfile #8985.11^R^^F^IR^I^8985.11^^^^^LS
"IX",8985.1,8985.11,"B",1)
S ^XTID(8985.1,DA(1),"TERMSTATUS","B",X,DA)=""
"IX",8985.1,8985.11,"B",2)
K ^XTID(8985.1,DA(1),"TERMSTATUS","B",X,DA)
"IX",8985.1,8985.11,"B",2.5)
K ^XTID(8985.1,DA(1),"TERMSTATUS","B")
"IX",8985.1,8985.11,"B",11.1,0)
^.114IA^1^1
"IX",8985.1,8985.11,"B",11.1,1,0)
1^F^8985.11^.01^^1
"KEY",8985.1,8985.1,"A",0)
8985.1^A^P^558
"KEY",8985.1,8985.1,"A",2,0)
^.312IA^3^3
"KEY",8985.1,8985.1,"A",2,1,0)
.01^8985.1^1
"KEY",8985.1,8985.1,"A",2,2,0)
.02^8985.1^2
"KEY",8985.1,8985.1,"A",2,3,0)
.03^8985.1^3
"KEY",8985.1,8985.11,"A",0)
8985.11^A^P^560
"KEY",8985.1,8985.11,"A",2,0)
^.312IA^1^1
"KEY",8985.1,8985.11,"A",2,1,0)
.01^8985.11^1
"KEYPTR",8985.1,8985.1,"A")
8985.1^B
"KEYPTR",8985.1,8985.11,"A")
8985.11^B
"MBREQ")
1
"PKG",332,-1)
1^1
"PKG",332,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP
"PKG",332,20,0)
^9.402P
"PKG",332,22,0)
^9.49I^1^1
"PKG",332,22,1,0)
7.3^2950403^2960330
"PKG",332,22,1,"PAH",1,0)
93^3050426^15346
"PKG",332,22,1,"PAH",1,1,0)
^^1^1^3050426
"PKG",332,22,1,"PAH",1,1,1,0)
Please see the patch description on Forum, in the National Patch Module.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","XTID")
0^1^B3782395
"RTN","XTID",1,0)
XTID    ;OAKCIOFO/JLG - API set for VUID-Term/Concepts in VistA ;04/22/2005 15:12
"RTN","XTID",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTID",3,0)
 Q
"RTN","XTID",4,0)
 ;  API set for VUID Term/Concepts in VistA
"RTN","XTID",5,0)
 ; supported by IA # 4631
"RTN","XTID",6,0)
 ; official definition of API set can be viewed online
"RTN","XTID",7,0)
 ; in the VistA Document Library website
"RTN","XTID",8,0)
GETVUID(TFILE,TFIELD,TIREF) ;
"RTN","XTID",9,0)
 ;Function: Returns the VHA unique id (VUID) for a given term 
"RTN","XTID",10,0)
 ;  reference, TIREF.  TIREF is represented differently based 
"RTN","XTID",11,0)
 ;  in its context--the combined value of TFILE and TFIELD
"RTN","XTID",12,0)
 ; 
"RTN","XTID",13,0)
 ;Input:
"RTN","XTID",14,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",15,0)
 ; (req)
"RTN","XTID",16,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",17,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",18,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",19,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",20,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",21,0)
 ;          internal value used in the set of codes.
"RTN","XTID",22,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",23,0)
 ;          in TFILE.
"RTN","XTID",24,0)
 ; 
"RTN","XTID",25,0)
 ;Returns:  Returns the VHA unique id (VUID) as a number for
"RTN","XTID",26,0)
 ;  a given term reference.  On error, it returns  
"RTN","XTID",27,0)
 ;  "0^<error message>" 
"RTN","XTID",28,0)
 ;  
"RTN","XTID",29,0)
 G GETVUID^XTID1
"RTN","XTID",30,0)
 ;
"RTN","XTID",31,0)
SETVUID(TFILE,TFIELD,TIREF,TVUID) ;
"RTN","XTID",32,0)
 ;Function: Assigns (stores) a VHA unique id (VUID) to a given term
"RTN","XTID",33,0)
 ;  reference, TIREF.  TIREF is represented differently based in its 
"RTN","XTID",34,0)
 ;  context--the combined value of TFILE and TFIELD.
"RTN","XTID",35,0)
 ;  
"RTN","XTID",36,0)
 ;Input:
"RTN","XTID",37,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",38,0)
 ; (req)
"RTN","XTID",39,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",40,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",41,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",42,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",43,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",44,0)
 ;          internal value used in the set of codes.
"RTN","XTID",45,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",46,0)
 ;          in TFILE.
"RTN","XTID",47,0)
 ; TVUID =  The VUID number to assign to term reference.
"RTN","XTID",48,0)
 ; (req)
"RTN","XTID",49,0)
 ; 
"RTN","XTID",50,0)
 ;Returns:  Returns indication of operation as
"RTN","XTID",51,0)
 ;  1 for successful; or 
"RTN","XTID",52,0)
 ;  "0^<error message>" for unsuccessful
"RTN","XTID",53,0)
 ;           
"RTN","XTID",54,0)
 ;Modifies: updates or creates new entry in file 8985.1 or 
"RTN","XTID",55,0)
 ;          updates TFILE file
"RTN","XTID",56,0)
 ;  
"RTN","XTID",57,0)
 G SETVUID^XTID1
"RTN","XTID",58,0)
 ;
"RTN","XTID",59,0)
GETSTAT(TFILE,TFIELD,TIREF,TDATE) ;
"RTN","XTID",60,0)
 ;Function: Returns the status information for the given term (TIREF)
"RTN","XTID",61,0)
 ;  and date (TDATE). TIREF is represented differently based in its 
"RTN","XTID",62,0)
 ;  context--the combined value of TFILE and TFIELD
"RTN","XTID",63,0)
 ;  
"RTN","XTID",64,0)
 ;Input:
"RTN","XTID",65,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",66,0)
 ; (req)
"RTN","XTID",67,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",68,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",69,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",70,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",71,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",72,0)
 ;          internal value used in the set of codes.
"RTN","XTID",73,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",74,0)
 ;          in TFILE.
"RTN","XTID",75,0)
 ; TDATE =  FileMan date/time, defaults to NOW.
"RTN","XTID",76,0)
 ; (opt)
"RTN","XTID",77,0)
 ; 
"RTN","XTID",78,0)
 ;Returns:  Returns the status representation for a given 
"RTN","XTID",79,0)
 ;  term reference as
"RTN","XTID",80,0)
 ;  "<internal value>^<FileMan effective date/time>^<external value>"
"RTN","XTID",81,0)
 ;          where value is a set of codes (0:INACTIVE,1:ACTIVE).  
"RTN","XTID",82,0)
 ;          On error, it returns  
"RTN","XTID",83,0)
 ;  "^<error message>" 
"RTN","XTID",84,0)
 ;  
"RTN","XTID",85,0)
 G GETSTAT^XTID1
"RTN","XTID",86,0)
 ;
"RTN","XTID",87,0)
SETSTAT(TFILE,TFIELD,TIREF,TSTAT,TDATE) ;
"RTN","XTID",88,0)
 ;Function: Assigns (stores) status information (TSTAT and TDATE) 
"RTN","XTID",89,0)
 ;  to the given term reference, TIREF. TIREF is represented 
"RTN","XTID",90,0)
 ;  differently based in its context--the combined value of 
"RTN","XTID",91,0)
 ;  TFILE and TFIELD.
"RTN","XTID",92,0)
 ;  
"RTN","XTID",93,0)
 ;Input:
"RTN","XTID",94,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",95,0)
 ; (req)
"RTN","XTID",96,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",97,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",98,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",99,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",100,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",101,0)
 ;          internal value used in the set of codes.
"RTN","XTID",102,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",103,0)
 ;          in TFILE.
"RTN","XTID",104,0)
 ; TSTAT =  The status to assign (0 or 1).
"RTN","XTID",105,0)
 ; (req)    TSTAT is a set of codes (0:INACTIVE, 1:ACTIVE)
"RTN","XTID",106,0)
 ; 
"RTN","XTID",107,0)
 ; TDATE =  FileMan date/time, defaults to NOW.
"RTN","XTID",108,0)
 ; (opt)
"RTN","XTID",109,0)
 ;
"RTN","XTID",110,0)
 ;Returns:  Returns indication of operation
"RTN","XTID",111,0)
 ;  1:successful or or 
"RTN","XTID",112,0)
 ;  "0^<error message>" for unsuccessful
"RTN","XTID",113,0)
 ; 
"RTN","XTID",114,0)
 ;Modifies: updates entry in file 8985.1 or TFILE file
"RTN","XTID",115,0)
 ;  
"RTN","XTID",116,0)
 G SETSTAT^XTID1
"RTN","XTID",117,0)
 ;
"RTN","XTID",118,0)
GETMASTR(TFILE,TFIELD,TIREF) ;
"RTN","XTID",119,0)
 ;Function: Returns the MASTER VUID flag for a given term 
"RTN","XTID",120,0)
 ;  reference, TIREF.  TIREF is represented differently based 
"RTN","XTID",121,0)
 ;  in its context--the combined value of TFILE and TFIELD
"RTN","XTID",122,0)
 ; 
"RTN","XTID",123,0)
 ;Input:
"RTN","XTID",124,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",125,0)
 ; (req)
"RTN","XTID",126,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",127,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",128,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",129,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",130,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",131,0)
 ;          internal value used in the set of codes.
"RTN","XTID",132,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",133,0)
 ;          in TFILE.
"RTN","XTID",134,0)
 ; 
"RTN","XTID",135,0)
 ;Returns:  Returns the MASTER VUID value (set of codes: 0,1)
"RTN","XTID",136,0)
 ;          On error, it returns  
"RTN","XTID",137,0)
 ;  "^<error message>" 
"RTN","XTID",138,0)
 ;  
"RTN","XTID",139,0)
 G GETMASTR^XTID1
"RTN","XTID",140,0)
 ;
"RTN","XTID",141,0)
SETMASTR(TFILE,TFIELD,TIREF,TMASTER) ;
"RTN","XTID",142,0)
 ;Function: Assigns the MASTER VUID flag to a given term
"RTN","XTID",143,0)
 ;  reference, TIREF.  TIREF is represented differently based in its 
"RTN","XTID",144,0)
 ;  context--the combined value of TFILE and TFIELD.
"RTN","XTID",145,0)
 ;  
"RTN","XTID",146,0)
 ;Input:
"RTN","XTID",147,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",148,0)
 ; (req)
"RTN","XTID",149,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",150,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",151,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",152,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",153,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",154,0)
 ;          internal value used in the set of codes.
"RTN","XTID",155,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",156,0)
 ;          in TFILE.
"RTN","XTID",157,0)
 ; TMASTER =  The MASTER VUID flag value to assign to term reference.
"RTN","XTID",158,0)
 ; (req)
"RTN","XTID",159,0)
 ; 
"RTN","XTID",160,0)
 ;Returns:  Returns indication of operation as
"RTN","XTID",161,0)
 ;  1 for successful; or 
"RTN","XTID",162,0)
 ;  "0^<error message>" for unsuccessful
"RTN","XTID",163,0)
 ;           
"RTN","XTID",164,0)
 ;Modifies: updates entry in file 8985.1 or TFILE file
"RTN","XTID",165,0)
 ;  
"RTN","XTID",166,0)
 G SETMASTR^XTID1
"RTN","XTID",167,0)
 ;
"RTN","XTID",168,0)
GETIREF(TFILE,TFIELD,TVUID,TARRAY,TMASTER) ;
"RTN","XTID",169,0)
 ;Function: Returns a list of Terms' internal references (IREF) for 
"RTN","XTID",170,0)
 ;  a given  VUID (TVUID).  A term's file (TFILE) and field limit 
"RTN","XTID",171,0)
 ;  the size of the list to those terms found in a given file/field.  
"RTN","XTID",172,0)
 ;  TIREF is represented differently based in its context--the 
"RTN","XTID",173,0)
 ;  combined value of TFILE and TFIELD.
"RTN","XTID",174,0)
 ;  
"RTN","XTID",175,0)
 ;Input:
"RTN","XTID",176,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",177,0)
 ; (opt)
"RTN","XTID",178,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",179,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",180,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",181,0)
 ; TVUID =  term's VHA unique id.
"RTN","XTID",182,0)
 ; (req)    
"RTN","XTID",183,0)
 ; 
"RTN","XTID",184,0)
 ;Output:
"RTN","XTID",185,0)
 ; TARRAY =  name of local or global array that will contain the 
"RTN","XTID",186,0)
 ; (opt)    list of terms as
"RTN","XTID",187,0)
 ; 
"RTN","XTID",188,0)
 ;       ARRAY(TFILE,TFIELD,TIREF)= status
"RTN","XTID",189,0)
 ;           on error it returns
"RTN","XTID",190,0)
 ;       ARRAY("ERROR")="<error message>"
"RTN","XTID",191,0)
 ;          
"RTN","XTID",192,0)
 G GETIREF^XTID1
"RTN","XTID",193,0)
 ;
"RTN","XTID",194,0)
SCREEN(TFILE,TFIELD,TIREF,TDATE) ;
"RTN","XTID",195,0)
 ;Function: Returns the screening condition for the given term (TIREF) 
"RTN","XTID",196,0)
 ;  and date (TDATE).  TIREF is represented differently based in its 
"RTN","XTID",197,0)
 ;  context--the combined value of TFILE and TFIELD.
"RTN","XTID",198,0)
 ;  
"RTN","XTID",199,0)
 ;Input:
"RTN","XTID",200,0)
 ; TFILE =  VistA file # where term is defined.
"RTN","XTID",201,0)
 ; (req)
"RTN","XTID",202,0)
 ; TFIELD = field #, in TFILE where term is defined.
"RTN","XTID",203,0)
 ; (opt)    When defined, it must be of type SET OF CODES.
"RTN","XTID",204,0)
 ;          When not defined, TFILE represents a "table" of terms
"RTN","XTID",205,0)
 ; TIREF =  term reference, as internal reference value.
"RTN","XTID",206,0)
 ; (req)    When TFIELD is defined (SET OF CODES), TIREF is the 
"RTN","XTID",207,0)
 ;          internal value used in the set of codes.
"RTN","XTID",208,0)
 ;          When TFIELD is not defined, TIREF is the IEN of the term
"RTN","XTID",209,0)
 ;          in TFILE.
"RTN","XTID",210,0)
 ; TDATE =  FileMan date/time, defaults to NOW.
"RTN","XTID",211,0)
 ; (opt)
"RTN","XTID",212,0)
 ; 
"RTN","XTID",213,0)
 ;Returns:  0 (i.e. don't screen) if the term is/was active or 
"RTN","XTID",214,0)
 ;          1 if the term is/was inactive (i.e. screen).
"RTN","XTID",215,0)
 ;          
"RTN","XTID",216,0)
 G SCREEN^XTID1
"RTN","XTID",217,0)
 ;
"RTN","XTID1")
0^2^B27860493
"RTN","XTID1",1,0)
XTID1 ;OAKCIOFO/JLG - Implementation of API set in XTID ;04/20/2005 15:12
"RTN","XTID1",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTID1",3,0)
 ; Reference to $$SCREEN^HDISVF01 supported by IA #4640
"RTN","XTID1",4,0)
 Q
"RTN","XTID1",5,0)
GETVUID ;
"RTN","XTID1",6,0)
 ; called from GETVUID^XTID(TFILE,TFIELD,TIREF)
"RTN","XTID1",7,0)
 N CTX,TERM,VUID
"RTN","XTID1",8,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF)
"RTN","XTID1",9,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",10,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",11,0)
 Q:'$D(CTX) "0^invalid combination of FILE/FIELD"
"RTN","XTID1",12,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",13,0)
 Q:'$D(TERM) "0^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",14,0)
 S VUID=$$GETVUID^XTIDTERM(.TERM)
"RTN","XTID1",15,0)
 Q:'$G(VUID) "0^TERM index did not contain VUID value"
"RTN","XTID1",16,0)
 Q VUID
"RTN","XTID1",17,0)
 ;
"RTN","XTID1",18,0)
GETSTAT ;
"RTN","XTID1",19,0)
 ; called from GETSTAT^XTID(TFILE,TFIELD,TIREF,TDATE)
"RTN","XTID1",20,0)
 N CTX,STATUS,TERM
"RTN","XTID1",21,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF)
"RTN","XTID1",22,0)
 S:'$G(TDATE) TDATE=$$NOW^XLFDT
"RTN","XTID1",23,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",24,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",25,0)
 Q:'$D(CTX) "^invalid combination of FILE/FIELD"
"RTN","XTID1",26,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",27,0)
 Q:'$D(TERM) "^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",28,0)
 S STATUS=""
"RTN","XTID1",29,0)
 S STATUS=$$GETSTAT^XTIDTERM(.TERM,TDATE)
"RTN","XTID1",30,0)
 Q:STATUS']"" ""
"RTN","XTID1",31,0)
 Q STATUS
"RTN","XTID1",32,0)
 ;
"RTN","XTID1",33,0)
GETMASTR ;
"RTN","XTID1",34,0)
 ; called from GETMASTR^XTID(TFILE,TFIELD,TIREF)
"RTN","XTID1",35,0)
 N CTX,TERM,MASTR
"RTN","XTID1",36,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF)
"RTN","XTID1",37,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",38,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",39,0)
 Q:'$D(CTX) "0^invalid combination of FILE/FIELD"
"RTN","XTID1",40,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",41,0)
 Q:'$D(TERM) "0^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",42,0)
 S MASTR=""
"RTN","XTID1",43,0)
 S MASTR=$$GETMASTR^XTIDTERM(.TERM)
"RTN","XTID1",44,0)
 Q:MASTR']"" ""
"RTN","XTID1",45,0)
 Q MASTR
"RTN","XTID1",46,0)
 ;
"RTN","XTID1",47,0)
SETVUID ;
"RTN","XTID1",48,0)
 ; called from SETVUID^XTID(TFILE,TFIELD,TIREF,TVUID)
"RTN","XTID1",49,0)
 N CTX,TERM,SUCCESS,OLDVUID
"RTN","XTID1",50,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF),TVUID=$G(TVUID)
"RTN","XTID1",51,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",52,0)
 S SUCCESS=0
"RTN","XTID1",53,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",54,0)
 Q:'$D(CTX) "0^invalid combination of FILE/FIELD"
"RTN","XTID1",55,0)
 Q:'$$VALIDREF^XTIDCTX(.CTX,TIREF) "0^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",56,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",57,0)
 ;
"RTN","XTID1",58,0)
 ; create new term index entry in "set of codes" not in "tables"
"RTN","XTID1",59,0)
 I '$D(TERM) S SUCCESS=$$NEWTERM^XTIDCTX(.CTX,TIREF,TVUID) Q SUCCESS
"RTN","XTID1",60,0)
 ;
"RTN","XTID1",61,0)
 ; TERM exists
"RTN","XTID1",62,0)
 ; existing entries with empty VUID-related data
"RTN","XTID1",63,0)
 ; determine existing value of VUID
"RTN","XTID1",64,0)
 S OLDVUID=$$GETVUID^XTIDTERM(.TERM)
"RTN","XTID1",65,0)
 I OLDVUID S SUCCESS=$$RPLVUID(OLDVUID,TVUID) Q SUCCESS
"RTN","XTID1",66,0)
 ; 'OLDVUID
"RTN","XTID1",67,0)
 ; set VUID for the first time for existing entry
"RTN","XTID1",68,0)
 S SUCCESS=$$NEWVUID()
"RTN","XTID1",69,0)
 Q SUCCESS
"RTN","XTID1",70,0)
 ;
"RTN","XTID1",71,0)
SETSTAT ;
"RTN","XTID1",72,0)
 ; called from SETSTAT^XTID(TFILE,TFIELD,TIREF,TSTAT,TDATE)
"RTN","XTID1",73,0)
 N CTX,TERM
"RTN","XTID1",74,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF),TSTAT=+$G(TSTAT)
"RTN","XTID1",75,0)
 S:'$G(TDATE) TDATE=$$NOW^XLFDT
"RTN","XTID1",76,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",77,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",78,0)
 Q:'$D(CTX) "0^invalid combination of FILE/FIELD"
"RTN","XTID1",79,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",80,0)
 Q:'$D(TERM) "0^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",81,0)
 Q:'$$GETVUID^XTIDTERM(.TERM) "0^VUID value must exist before setting STATUS info"
"RTN","XTID1",82,0)
 Q:'$$SETSTAT^XTIDTERM(.TERM,TSTAT,TDATE) "0^unable to set status for the term index"
"RTN","XTID1",83,0)
 Q 1
"RTN","XTID1",84,0)
 ;
"RTN","XTID1",85,0)
SETMASTR ;
"RTN","XTID1",86,0)
 ; called from SETMASTR^XTID(TFILE,TFIELD,TIREF,TMASTER)
"RTN","XTID1",87,0)
 ; constraint: only one entry could be master for given
"RTN","XTID1",88,0)
 ; reference term, must check success after setting master
"RTN","XTID1",89,0)
 N CTX,TERM,NEWMASTR
"RTN","XTID1",90,0)
 S TFILE=+$G(TFILE),TFIELD=+$G(TFIELD),TIREF=$G(TIREF)
"RTN","XTID1",91,0)
 S TMASTER=+$G(TMASTER)
"RTN","XTID1",92,0)
 S:'TFIELD TFIELD=.01
"RTN","XTID1",93,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",94,0)
 Q:'$D(CTX) "0^invalid combination of FILE/FIELD"
"RTN","XTID1",95,0)
 D FINDTERM^XTIDCTX(.CTX,TIREF,.TERM)
"RTN","XTID1",96,0)
 Q:'$D(TERM) "0^TERM IREF doesn't exist in this FILE/FIELD context"
"RTN","XTID1",97,0)
 Q:'$$GETVUID^XTIDTERM(.TERM) "0^VUID value must exist before setting master flag"
"RTN","XTID1",98,0)
 Q:'$$SETMASTR^XTIDTERM(.TERM,TMASTER) "0^unable to set master flag for the term index"
"RTN","XTID1",99,0)
 ; check success based on constraint
"RTN","XTID1",100,0)
 S NEWMASTR=$$GETMASTR^XTID(TFILE,TFIELD,TIREF)
"RTN","XTID1",101,0)
 Q:NEWMASTR'=TMASTER "0^pre-existing master entry"
"RTN","XTID1",102,0)
 Q 1
"RTN","XTID1",103,0)
 ;
"RTN","XTID1",104,0)
GETIREF ; 
"RTN","XTID1",105,0)
 ; called from GETIREF^XTID(TFILE,TFIELD,TVUID,TARRAY,TMASTER)
"RTN","XTID1",106,0)
 N CTX,TERM
"RTN","XTID1",107,0)
 S TFILE=+$G(TFILE),TFIELD=$G(TFIELD),TVUID=$G(TVUID)
"RTN","XTID1",108,0)
 S TMASTER=+$G(TMASTER)
"RTN","XTID1",109,0)
 Q:$G(TARRAY)']""
"RTN","XTID1",110,0)
 D CONTEXT^XTIDCTX(TFILE,TFIELD,.CTX)
"RTN","XTID1",111,0)
 I '$D(CTX) S @TARRAY@("ERROR")="invalid FILE/FIELD combination" Q
"RTN","XTID1",112,0)
 S @TARRAY=0
"RTN","XTID1",113,0)
 D SRCHTRMS^XTIDCTX(.CTX,TVUID,TARRAY,TMASTER)
"RTN","XTID1",114,0)
 Q
"RTN","XTID1",115,0)
 ;
"RTN","XTID1",116,0)
SCREEN ;
"RTN","XTID1",117,0)
 ; called from SCREEN^XTID(TFILE,TFIELD,TIREF,TDATE)
"RTN","XTID1",118,0)
 N SCREEN,STATUS,ACTIVE
"RTN","XTID1",119,0)
 S SCREEN=1
"RTN","XTID1",120,0)
 S:'$G(TDATE) TDATE=$$NOW^XLFDT
"RTN","XTID1",121,0)
 S SCREEN=$$SCREEN^HDISVF01(+$G(TFILE),+$G(TFIELD),+$G(TDATE))
"RTN","XTID1",122,0)
 Q:'SCREEN SCREEN
"RTN","XTID1",123,0)
 S STATUS=$$GETSTAT^XTID(+$G(TFILE),+$G(TFIELD),$G(TIREF),+$G(TDATE))
"RTN","XTID1",124,0)
 S ACTIVE=$P(STATUS,"^",1)
"RTN","XTID1",125,0)
 S SCREEN=$S(ACTIVE:0,1:1)
"RTN","XTID1",126,0)
 Q SCREEN
"RTN","XTID1",127,0)
 ;
"RTN","XTID1",128,0)
RPLVUID(OLDV,NEWV) ;
"RTN","XTID1",129,0)
 ; called from SETVUID(TFILE,TFIELD,TIREF,TVUID)
"RTN","XTID1",130,0)
 ; existing TERM index entry with VUID value
"RTN","XTID1",131,0)
 N SUCCESS S SUCCESS=1
"RTN","XTID1",132,0)
 I OLDV=NEWV Q SUCCESS
"RTN","XTID1",133,0)
 ; replace existing VUID value
"RTN","XTID1",134,0)
 I '$$SETVUID^XTIDTERM(.TERM,NEWV) D  Q SUCCESS
"RTN","XTID1",135,0)
 . S SUCCESS="0^unable to replace VUID value to existing term entry" Q
"RTN","XTID1",136,0)
 ;
"RTN","XTID1",137,0)
 Q SUCCESS
"RTN","XTID1",138,0)
 ;
"RTN","XTID1",139,0)
NEWVUID() ;
"RTN","XTID1",140,0)
 ; called from SETVUID(TFILE,TFIELD,TIREF,TVUID)
"RTN","XTID1",141,0)
 ; set VUID value to existing TERM entry
"RTN","XTID1",142,0)
 ; for the first time
"RTN","XTID1",143,0)
 N MASTER,SUCCESS
"RTN","XTID1",144,0)
 S SUCCESS=1,MASTER=1
"RTN","XTID1",145,0)
 I '$$SETVUID^XTIDTERM(.TERM,TVUID) D  Q SUCCESS
"RTN","XTID1",146,0)
 . S SUCCESS="0^unable to add VUID value to existing term entry"
"RTN","XTID1",147,0)
 ;
"RTN","XTID1",148,0)
 ; set master=1 default, will be overridden if duplicate master
"RTN","XTID1",149,0)
 I '$$SETMASTR^XTIDTERM(.TERM,MASTER) D  Q SUCCESS
"RTN","XTID1",150,0)
 . S SUCCESS="0^unable to add MASTER VUID value to existing term entry"
"RTN","XTID1",151,0)
 ;
"RTN","XTID1",152,0)
 Q SUCCESS
"RTN","XTID1",153,0)
 ;
"RTN","XTIDCTX")
0^3^B18329767
"RTN","XTIDCTX",1,0)
XTIDCTX ;OAKCIOFO/JLG - TERM/CONCEPT CONTEXT directories ;04/20/2005  15:12
"RTN","XTIDCTX",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTIDCTX",3,0)
 ; Reference to global "^DD" supported by IA #4634
"RTN","XTIDCTX",4,0)
 Q
"RTN","XTIDCTX",5,0)
 ; encapsulates the location (directory) of term/concept
"RTN","XTIDCTX",6,0)
 ; references based on FILE/FIELD.  
"RTN","XTIDCTX",7,0)
 ; It eventually encapsulates the retrieval of
"RTN","XTIDCTX",8,0)
 ; specific term/concept references (TERM defined in XTIDTERM) based 
"RTN","XTIDCTX",9,0)
 ; on the internal reference (IREF).
"RTN","XTIDCTX",10,0)
 ; There are two current implementations: one for terms defined
"RTN","XTIDCTX",11,0)
 ; as "set of codes"; the other defined in VistA files that have
"RTN","XTIDCTX",12,0)
 ; been updated to contain VUID-related data in their DD.
"RTN","XTIDCTX",13,0)
 ; CTX and TERM are passed by reference in all the subroutines
"RTN","XTIDCTX",14,0)
 ; 
"RTN","XTIDCTX",15,0)
CONTEXT(TFILE,TFIELD,CTX) ;  determine and create context impl
"RTN","XTIDCTX",16,0)
 ; returns new CTX array
"RTN","XTIDCTX",17,0)
 ; CTX("TYPE")=<"SET" or "TABLE" or "ROOT">
"RTN","XTIDCTX",18,0)
 ; CTX("TERM FILE#")=<TFILE or "">
"RTN","XTIDCTX",19,0)
 ; CTX("TERM FIELD#")=<TFIELD or "">
"RTN","XTIDCTX",20,0)
 ; CTX("SOURCE FILE#")=<8985.1 or TFILE or "">
"RTN","XTIDCTX",21,0)
 ; CTX("TERMSTATUS SUBFILE#")=
"RTN","XTIDCTX",22,0)
 ;       <subfile for the multi-valued field 
"RTN","XTIDCTX",23,0)
 ;        99.991, EFFECTIVE DATE/TIME or "">
"RTN","XTIDCTX",24,0)
 N TTYPE
"RTN","XTIDCTX",25,0)
 Q:$D(CTX)
"RTN","XTIDCTX",26,0)
 S TFILE=$G(TFILE),TFIELD=$G(TFIELD)
"RTN","XTIDCTX",27,0)
 S TTYPE=$$GETTYPE(TFILE,TFIELD)
"RTN","XTIDCTX",28,0)
 Q:TTYPE=""
"RTN","XTIDCTX",29,0)
 I TTYPE="SET" D CONTEXT^XTIDSET(TFILE,TFIELD,.CTX) Q
"RTN","XTIDCTX",30,0)
 I TTYPE="TABLE" D CONTEXT^XTIDTBL(TFILE,.01,.CTX) Q
"RTN","XTIDCTX",31,0)
 I TTYPE="ROOT" D ROOTCTX(.CTX) Q
"RTN","XTIDCTX",32,0)
 Q
"RTN","XTIDCTX",33,0)
 ;
"RTN","XTIDCTX",34,0)
VALIDREF(CTX,TIREF) ; validate IREF
"RTN","XTIDCTX",35,0)
 ; validate internal reference against given CTX
"RTN","XTIDCTX",36,0)
 N VALID S VALID=1
"RTN","XTIDCTX",37,0)
 Q:'$D(CTX) 'VALID
"RTN","XTIDCTX",38,0)
 I CTX("TYPE")="SET" D  Q VALID
"RTN","XTIDCTX",39,0)
 . S VALID=$$VALIDREF^XTIDSET(.CTX,$G(TIREF))
"RTN","XTIDCTX",40,0)
 ;
"RTN","XTIDCTX",41,0)
 I CTX("TYPE")="TABLE" D  Q VALID
"RTN","XTIDCTX",42,0)
 . S VALID=$$VALIDREF^XTIDTBL(.CTX,$G(TIREF))
"RTN","XTIDCTX",43,0)
 ;
"RTN","XTIDCTX",44,0)
 Q 'VALID
"RTN","XTIDCTX",45,0)
FINDTERM(CTX,TIREF,TERM) ; find term 
"RTN","XTIDCTX",46,0)
 ; find the single term reference for given term IREF
"RTN","XTIDCTX",47,0)
 ; return TERM data as new TERM array
"RTN","XTIDCTX",48,0)
 ; IREF is unique within a given CTX, except for "RO0T" context
"RTN","XTIDCTX",49,0)
 ; on success, attach CTX to TERM array
"RTN","XTIDCTX",50,0)
 Q:'$D(CTX)!($D(TERM))
"RTN","XTIDCTX",51,0)
 I CTX("TYPE")="SET" D FINDTERM^XTIDSET(.CTX,$G(TIREF),.TERM)
"RTN","XTIDCTX",52,0)
 I CTX("TYPE")="TABLE" D FINDTERM^XTIDTBL(.CTX,$G(TIREF),.TERM)
"RTN","XTIDCTX",53,0)
 ; don't find term reference for "ROOT" type, where IREF is not unique
"RTN","XTIDCTX",54,0)
 ; on success, attach CTX to TERM
"RTN","XTIDCTX",55,0)
 I $D(TERM) M TERM("CTX")=CTX
"RTN","XTIDCTX",56,0)
 Q
"RTN","XTIDCTX",57,0)
 ;
"RTN","XTIDCTX",58,0)
NEWTERM(CTX,TIREF,VUID) ; create a new term reference with given VUID
"RTN","XTIDCTX",59,0)
 ; only for "set of codes"
"RTN","XTIDCTX",60,0)
 ; on success (term entry), new TERM array is returned
"RTN","XTIDCTX",61,0)
 ; create a new entry in the Kernel (8985.1) file only (set of codes)
"RTN","XTIDCTX",62,0)
 N SUCCESS
"RTN","XTIDCTX",63,0)
 S TIREF=$G(TIREF),VUID=+$G(VUID)
"RTN","XTIDCTX",64,0)
 Q:'$D(CTX)!('VUID) 0
"RTN","XTIDCTX",65,0)
 ; create new term reference entry only for "set of codes"
"RTN","XTIDCTX",66,0)
 Q:CTX("TYPE")'="SET" 0
"RTN","XTIDCTX",67,0)
 Q $$NEWTERM^XTIDSET(.CTX,TIREF,VUID)
"RTN","XTIDCTX",68,0)
 ;
"RTN","XTIDCTX",69,0)
GETTERM(CTX,FILE,IENS,TERM) ; get term
"RTN","XTIDCTX",70,0)
 ; return TERM data as new TERM array
"RTN","XTIDCTX",71,0)
 ; called from CTX implementations only
"RTN","XTIDCTX",72,0)
 ; subroutine might be moved to XTIDTERM
"RTN","XTIDCTX",73,0)
 ; D GETS^DIQ(FILE,IENS,FIELD,FLAGS,TARGET_ROOT,MSG_ROOT)
"RTN","XTIDCTX",74,0)
 N DIERR,MSG
"RTN","XTIDCTX",75,0)
 S FILE=+$G(FILE),IENS=$G(IENS)
"RTN","XTIDCTX",76,0)
 ; ensure only CTX implementations use this for callback
"RTN","XTIDCTX",77,0)
 Q:'$D(CTX)!($D(TERM))!('FILE)!(IENS']"")
"RTN","XTIDCTX",78,0)
 D GETS^DIQ(FILE,IENS,"**","IR","TERM","MSG")
"RTN","XTIDCTX",79,0)
 Q:$D(MSG("DIERR"))
"RTN","XTIDCTX",80,0)
 Q
"RTN","XTIDCTX",81,0)
 ;
"RTN","XTIDCTX",82,0)
SRCHTRMS(CTX,VUID,XTCARR,MASTER) ; search term reference entries
"RTN","XTIDCTX",83,0)
 ; search term reference entries based on VUID and its context
"RTN","XTIDCTX",84,0)
 S VUID=$G(VUID),XTCARR=$G(XTCARR),MASTER=+$G(MASTER)
"RTN","XTIDCTX",85,0)
 ; CTX must be defined
"RTN","XTIDCTX",86,0)
 Q:'$D(CTX)!(XTCARR']"")!('VUID)
"RTN","XTIDCTX",87,0)
 I CTX("TYPE")="SET" D SRCHTRMS^XTIDSET(.CTX,VUID,XTCARR,MASTER) Q
"RTN","XTIDCTX",88,0)
 I CTX("TYPE")="TABLE" D SRCHTRMS^XTIDTBL(.CTX,VUID,XTCARR,MASTER) Q
"RTN","XTIDCTX",89,0)
 I CTX("TYPE")="ROOT" D  Q
"RTN","XTIDCTX",90,0)
 . ; each CTX implementation should contribute to XTCARR array
"RTN","XTIDCTX",91,0)
 . N FL
"RTN","XTIDCTX",92,0)
 . ; search "set of codes" first
"RTN","XTIDCTX",93,0)
 . ; temporarily set context info
"RTN","XTIDCTX",94,0)
 . S CTX("TYPE")="SET"
"RTN","XTIDCTX",95,0)
 . S CTX("SOURCE FILE#")=8985.1
"RTN","XTIDCTX",96,0)
 . D SRCHTRMS^XTIDSET(.CTX,VUID,XTCARR,MASTER)
"RTN","XTIDCTX",97,0)
 . ; search all "table" files
"RTN","XTIDCTX",98,0)
 . ; temporarily set context info
"RTN","XTIDCTX",99,0)
 . S CTX("TYPE")="TABLE"
"RTN","XTIDCTX",100,0)
 . S FL=0
"RTN","XTIDCTX",101,0)
 . F  S FL=$O(^DIC(FL)) Q:'FL  D
"RTN","XTIDCTX",102,0)
 . . Q:'$D(^DD(FL,99.991))
"RTN","XTIDCTX",103,0)
 . . Q:FL=8985.1
"RTN","XTIDCTX",104,0)
 . . S CTX("SOURCE FILE#")=FL
"RTN","XTIDCTX",105,0)
 . . S CTX("TERM FILE#")=FL
"RTN","XTIDCTX",106,0)
 . . S CTX("TERM FIELD#")=.01
"RTN","XTIDCTX",107,0)
 . . D SRCHTRMS^XTIDTBL(.CTX,VUID,XTCARR,MASTER)
"RTN","XTIDCTX",108,0)
 . ;
"RTN","XTIDCTX",109,0)
 . ; reset context info
"RTN","XTIDCTX",110,0)
 . S CTX("TYPE")="ROOT"
"RTN","XTIDCTX",111,0)
 . S CTX("SOURCE FILE#")=""
"RTN","XTIDCTX",112,0)
 . S CTX("TERM FILE#")=""
"RTN","XTIDCTX",113,0)
 . S CTX("TERM FIELD#")=""
"RTN","XTIDCTX",114,0)
 ;
"RTN","XTIDCTX",115,0)
 Q
"RTN","XTIDCTX",116,0)
 ;
"RTN","XTIDCTX",117,0)
ADDTARRY(XTC2ARR,FILE,FIELD,IREF,VALUE) ;
"RTN","XTIDCTX",118,0)
 ; adds element and value to XTC2ARR array (by name)
"RTN","XTIDCTX",119,0)
 ; called by CTX implementations of SRCHTRMS()
"RTN","XTIDCTX",120,0)
 ; increased count 
"RTN","XTIDCTX",121,0)
 N COUNT
"RTN","XTIDCTX",122,0)
 S COUNT=$G(@XTC2ARR)
"RTN","XTIDCTX",123,0)
 S @XTC2ARR@(+$G(FILE),+$G(FIELD),$G(IREF))=$G(VALUE)
"RTN","XTIDCTX",124,0)
 S @XTC2ARR=COUNT+1
"RTN","XTIDCTX",125,0)
 Q
"RTN","XTIDCTX",126,0)
 ;
"RTN","XTIDCTX",127,0)
GETTYPE(FILE,FIELD) ; determine type of context
"RTN","XTIDCTX",128,0)
 ; based on FILE and FIELD combination
"RTN","XTIDCTX",129,0)
 ; D FIELD^DID(FILE,FIELD,FLAGS,ATTRIBUTES,TARGET_ROOT,MSG_ROOT)
"RTN","XTIDCTX",130,0)
 N DIERR,ATTR,MSG,TYPE
"RTN","XTIDCTX",131,0)
 S FILE=+$G(FILE),FIELD=$G(FIELD)
"RTN","XTIDCTX",132,0)
 S TYPE=""
"RTN","XTIDCTX",133,0)
 ; file may be empty in GETIREF^XTID use-case
"RTN","XTIDCTX",134,0)
 I 'FILE S TYPE="ROOT" Q TYPE
"RTN","XTIDCTX",135,0)
 ; determine if "table" type, by checking VUID DD
"RTN","XTIDCTX",136,0)
 I FIELD=""!(FIELD=.01) D
"RTN","XTIDCTX",137,0)
 . N VFIELD
"RTN","XTIDCTX",138,0)
 . S VFIELD=99.99 ; test existence of VUID field
"RTN","XTIDCTX",139,0)
 . D FIELD^DID(FILE,VFIELD,"","LABEL","ATTR","MSG")
"RTN","XTIDCTX",140,0)
 . ;Q:$D(MSG("DIERR"))  ; INVALID type returned
"RTN","XTIDCTX",141,0)
 . I $G(ATTR("LABEL"))="VUID" S TYPE="TABLE"
"RTN","XTIDCTX",142,0)
 ;
"RTN","XTIDCTX",143,0)
 Q:TYPE'="" TYPE
"RTN","XTIDCTX",144,0)
 ; determine if FIELD is a SET OF CODES
"RTN","XTIDCTX",145,0)
 ; D FIELD^DID(FILE,FIELD,"","TYPE","ATTR","MSG")
"RTN","XTIDCTX",146,0)
 ; Q:$D(MSG("DIERR")) TYPE
"RTN","XTIDCTX",147,0)
 ; I $G(ATTR("TYPE"))="SET" S TYPE="SET" Q TYPE
"RTN","XTIDCTX",148,0)
 ; DS requested to assume "SET"
"RTN","XTIDCTX",149,0)
 S TYPE="SET"
"RTN","XTIDCTX",150,0)
 Q TYPE
"RTN","XTIDCTX",151,0)
 ;
"RTN","XTIDCTX",152,0)
ROOTCTX(CTX) ; set up Context for "ROOT" type
"RTN","XTIDCTX",153,0)
 ; called from CONTEXT^XTIDCTX(TFILE,TFIELD,CTX)
"RTN","XTIDCTX",154,0)
 ; called only when TFILE is not defined
"RTN","XTIDCTX",155,0)
 S CTX("TYPE")="ROOT"
"RTN","XTIDCTX",156,0)
 S CTX("TERM FILE#")=""
"RTN","XTIDCTX",157,0)
 S CTX("TERM FIELD#")=""
"RTN","XTIDCTX",158,0)
 ; the default source file 
"RTN","XTIDCTX",159,0)
 S CTX("SOURCE FILE#")=""
"RTN","XTIDCTX",160,0)
 ; TERMSTATUS 99.991, EFFECTIVE DATE/TIME subfile
"RTN","XTIDCTX",161,0)
 S CTX("TERMSTATUS SUBFILE#")=""
"RTN","XTIDCTX",162,0)
 Q
"RTN","XTIDCTX",163,0)
 ;
"RTN","XTIDSET")
0^4^B12683051
"RTN","XTIDSET",1,0)
XTIDSET ;OAKCIOFO/JLG - SET OF CODES CONTEXT ;04/25/2005  15:12
"RTN","XTIDSET",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTIDSET",3,0)
 Q
"RTN","XTIDSET",4,0)
 ; Context implementation for "set of codes"
"RTN","XTIDSET",5,0)
 ; CTX and TERM are passed by ref in all calls
"RTN","XTIDSET",6,0)
CONTEXT(TFILE,TFIELD,CTX) ; set up Context for "set of codes" type
"RTN","XTIDSET",7,0)
 ; called from CONTEXT^XTIDCTX(TFILE,TFIELD,CTX)
"RTN","XTIDSET",8,0)
 ; returns a valid new CTX array
"RTN","XTIDSET",9,0)
 S TFILE=+$G(TFILE),TFIELD=$G(TFIELD)
"RTN","XTIDSET",10,0)
 Q:'TFILE!($D(CTX))
"RTN","XTIDSET",11,0)
 S CTX("TYPE")="SET"
"RTN","XTIDSET",12,0)
 S CTX("TERM FILE#")=TFILE
"RTN","XTIDSET",13,0)
 S CTX("TERM FIELD#")=TFIELD
"RTN","XTIDSET",14,0)
 ; the default source file 
"RTN","XTIDSET",15,0)
 S CTX("SOURCE FILE#")=8985.1
"RTN","XTIDSET",16,0)
 ; TERMSTATUS 99.991, EFFECTIVE DATE/TIME subfile
"RTN","XTIDSET",17,0)
 S CTX("TERMSTATUS SUBFILE#")=8985.11
"RTN","XTIDSET",18,0)
 Q
"RTN","XTIDSET",19,0)
 ;
"RTN","XTIDSET",20,0)
VALIDREF(CTX,TIREF) ; validate the term, internal ref
"RTN","XTIDSET",21,0)
 ; test TIREF is a valid value in set of codes
"RTN","XTIDSET",22,0)
 Q:'$D(CTX)!($G(TIREF)']"") 0
"RTN","XTIDSET",23,0)
 ; as requested by DS, no need for this restrictive validation 
"RTN","XTIDSET",24,0)
 ; as some terms to be filed in "set of codes" kernel file
"RTN","XTIDSET",25,0)
 ; may not yet exist in their original file.
"RTN","XTIDSET",26,0)
 ;Q $$MEMBER(CTX("TERM FILE#"),CTX("TERM FIELD#"),TIREF)
"RTN","XTIDSET",27,0)
 Q 1
"RTN","XTIDSET",28,0)
 ;
"RTN","XTIDSET",29,0)
FINDTERM(CTX,TIREF,TERM) ; find term in given context
"RTN","XTIDSET",30,0)
 ; called from FINDTERM^XTIDCTX(CTX,TIREF,TERM)
"RTN","XTIDSET",31,0)
 ; return TERM data as new TERM array
"RTN","XTIDSET",32,0)
 N IENS
"RTN","XTIDSET",33,0)
 Q:'$D(CTX)!($D(TERM))
"RTN","XTIDSET",34,0)
 Q:'$$VALIDREF(.CTX,$G(TIREF))
"RTN","XTIDSET",35,0)
 S IENS=$$GETIENS($G(TIREF))
"RTN","XTIDSET",36,0)
 Q:IENS']""
"RTN","XTIDSET",37,0)
 D GETTERM^XTIDCTX(.CTX,CTX("SOURCE FILE#"),IENS,.TERM)
"RTN","XTIDSET",38,0)
 Q
"RTN","XTIDSET",39,0)
 ;
"RTN","XTIDSET",40,0)
NEWTERM(CTX,TIREF,VUID) ; create new term index entry
"RTN","XTIDSET",41,0)
 ; called from NEWTERM^XTIDCTX(CTX,TIREF,VUID,TERM)
"RTN","XTIDSET",42,0)
 ; D UPDATE^DIE(FLAGS,FDA_ROOT,IEN_ROOT,MSG_ROOT)
"RTN","XTIDSET",43,0)
 N DIERR,FILE,SFILE,FLAGS,MASTER,MSG,MYFDA,MYIEN,SUCCESS
"RTN","XTIDSET",44,0)
 S TIREF=$G(TIREF),VUID=+$G(VUID)
"RTN","XTIDSET",45,0)
 Q:'$D(CTX)!($D(TERM))!('VUID) 0
"RTN","XTIDSET",46,0)
 Q:'$$VALIDREF(.CTX,TIREF) 0
"RTN","XTIDSET",47,0)
 S SUCCESS=0,FLAGS="KS"
"RTN","XTIDSET",48,0)
 S MASTER=1
"RTN","XTIDSET",49,0)
 I $$DUPLMSTR^XTIDTERM(CTX("TERM FILE#"),CTX("TERM FIELD#"),VUID) D
"RTN","XTIDSET",50,0)
 . S MASTER=0
"RTN","XTIDSET",51,0)
 S FILE=CTX("SOURCE FILE#")
"RTN","XTIDSET",52,0)
 S SFILE=CTX("TERMSTATUS SUBFILE#")
"RTN","XTIDSET",53,0)
 S MYFDA(FILE,"+1,",.01)=CTX("TERM FILE#")
"RTN","XTIDSET",54,0)
 S MYFDA(FILE,"+1,",.02)=CTX("TERM FIELD#")
"RTN","XTIDSET",55,0)
 S MYFDA(FILE,"+1,",.03)=TIREF
"RTN","XTIDSET",56,0)
 S MYFDA(FILE,"+1,",99.99)=VUID
"RTN","XTIDSET",57,0)
 S MYFDA(FILE,"+1,",99.98)=MASTER
"RTN","XTIDSET",58,0)
 D UPDATE^DIE(FLAGS,"MYFDA","MYIEN","MSG")
"RTN","XTIDSET",59,0)
 S:'$D(MSG("DIERR")) SUCCESS=1
"RTN","XTIDSET",60,0)
 ; success, build TERM and return
"RTN","XTIDSET",61,0)
 Q SUCCESS
"RTN","XTIDSET",62,0)
 ;
"RTN","XTIDSET",63,0)
SRCHTRMS(CTX,VUID,XTSARR,MASTER) ; search term index entries
"RTN","XTIDSET",64,0)
 ; called from SEARCH^XTIDCTX(CTX,VUID,XTCARR,MASTER)
"RTN","XTIDSET",65,0)
 N DIERR,FILE,XTC,FIELD
"RTN","XTIDSET",66,0)
 S VUID=$G(VUID),MASTER=+$G(MASTER)
"RTN","XTIDSET",67,0)
 Q:$G(CTX("TYPE"))'="SET"!('VUID)
"RTN","XTIDSET",68,0)
 S FILE=$G(CTX("TERM FILE#"))
"RTN","XTIDSET",69,0)
 S FIELD=$G(CTX("TERM FIELD#"))
"RTN","XTIDSET",70,0)
 ; search in ^XTID(8985.1,"C",VUID,FILE,FIELD,FLAG,IEN)=""
"RTN","XTIDSET",71,0)
 Q:'$D(^XTID(8985.1,"C",VUID))
"RTN","XTIDSET",72,0)
 M XTC=^XTID(8985.1,"C",VUID)
"RTN","XTIDSET",73,0)
 ; search everywhere
"RTN","XTIDSET",74,0)
 I FILE="" D  Q
"RTN","XTIDSET",75,0)
 . F  S FILE=$O(XTC(FILE)) Q:'FILE  D L1
"RTN","XTIDSET",76,0)
 ;
"RTN","XTIDSET",77,0)
 I FILE,FIELD="" D L1 Q
"RTN","XTIDSET",78,0)
 I FILE,FIELD D L2 Q
"RTN","XTIDSET",79,0)
 ;
"RTN","XTIDSET",80,0)
 Q
"RTN","XTIDSET",81,0)
 ;
"RTN","XTIDSET",82,0)
L1 ;
"RTN","XTIDSET",83,0)
 N FIELD
"RTN","XTIDSET",84,0)
 S FIELD="" F  S FIELD=$O(XTC(FILE,FIELD)) Q:'FIELD  D L2
"RTN","XTIDSET",85,0)
 Q
"RTN","XTIDSET",86,0)
 ;
"RTN","XTIDSET",87,0)
L2 ;
"RTN","XTIDSET",88,0)
 N IEN,MSTR,IREF,STATUS
"RTN","XTIDSET",89,0)
 S MSTR="" F  S MSTR=$O(XTC(FILE,FIELD,MSTR)) Q:MSTR=""  D
"RTN","XTIDSET",90,0)
 . S IEN=0 F  S IEN=$O(XTC(FILE,FIELD,MSTR,IEN)) Q:'IEN  D
"RTN","XTIDSET",91,0)
 . . I MASTER,MSTR=0 Q
"RTN","XTIDSET",92,0)
 . . S IREF=$P($G(^XTID(8985.1,IEN,0)),"^",3)
"RTN","XTIDSET",93,0)
 . . S STATUS=$$GETSTAT^XTID(FILE,FIELD,IREF,"")
"RTN","XTIDSET",94,0)
 . . S STATUS=STATUS_"^"_MSTR
"RTN","XTIDSET",95,0)
 . . D ADDTARRY^XTIDCTX(XTSARR,FILE,FIELD,IREF,STATUS)
"RTN","XTIDSET",96,0)
 . ;
"RTN","XTIDSET",97,0)
 ;
"RTN","XTIDSET",98,0)
 Q
"RTN","XTIDSET",99,0)
 ;
"RTN","XTIDSET",100,0)
GETIENS(TIREF) ; find term's ien/IENS
"RTN","XTIDSET",101,0)
 ; find term entry and return IENS
"RTN","XTIDSET",102,0)
 ; $$FIND1^DIC(FILE,IENS,FLAGS,[.]VALUE,[.]INDEXES,.SCREEN,MSG_ROOT)
"RTN","XTIDSET",103,0)
 N DIERR,FILE,FLAGS,INDEXES,MSG,RIEN,VALUE
"RTN","XTIDSET",104,0)
 S FILE=CTX("SOURCE FILE#"),FLAGS="KQX",INDEXES="",RIEN=""
"RTN","XTIDSET",105,0)
 S VALUE(1)=CTX("TERM FILE#")
"RTN","XTIDSET",106,0)
 S VALUE(2)=CTX("TERM FIELD#")
"RTN","XTIDSET",107,0)
 S VALUE(3)=TIREF
"RTN","XTIDSET",108,0)
 ; get record IEN
"RTN","XTIDSET",109,0)
 ;S RIEN=$$FIND1^DIC(FILE,"",FLAGS,.VALUE,INDEXES,"","MSG")
"RTN","XTIDSET",110,0)
 S RIEN=$O(^XTID(FILE,"B",VALUE(1),VALUE(2),VALUE(3),0))
"RTN","XTIDSET",111,0)
 Q:RIEN RIEN_","
"RTN","XTIDSET",112,0)
 Q RIEN
"RTN","XTIDSET",113,0)
 ;
"RTN","XTIDSET",114,0)
MEMBER(FILE,FIELD,VALUE) ; valid member in "set of codes"?
"RTN","XTIDSET",115,0)
 ; validate VALUE for this FIELD
"RTN","XTIDSET",116,0)
 ; for validation purposes only, RESULT not used
"RTN","XTIDSET",117,0)
 ; D VAL^DIE(FILE,IENS,FIELD,FLAGS,VALUE,.RESULT,FDA_ROOT,MSG_ROOT)
"RTN","XTIDSET",118,0)
 N DIERR,FLAGS,IENS,MSG,RESULT,SUCCESS
"RTN","XTIDSET",119,0)
 S SUCCESS=0
"RTN","XTIDSET",120,0)
 S FLAGS="U",IENS="+1,"
"RTN","XTIDSET",121,0)
 D VAL^DIE(CTX("TERM FILE#"),IENS,CTX("TERM FIELD#"),FLAGS,VALUE,.RESULT,"","MSG")
"RTN","XTIDSET",122,0)
 S:'$D(MSG("DIERR")) SUCCESS=1
"RTN","XTIDSET",123,0)
 Q SUCCESS
"RTN","XTIDSET",124,0)
 ;
"RTN","XTIDTBL")
0^5^B7276687
"RTN","XTIDTBL",1,0)
XTIDTBL ;OAKCIOFO/JLG - TABLE CONTEXT ;04/21/2005  15:12
"RTN","XTIDTBL",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTIDTBL",3,0)
 Q
"RTN","XTIDTBL",4,0)
 ; Context implementation for "table"
"RTN","XTIDTBL",5,0)
 ; CTX and TERM are passed by ref in all calls
"RTN","XTIDTBL",6,0)
CONTEXT(TFILE,TFIELD,CTX) ; set up Context for "table" type
"RTN","XTIDTBL",7,0)
 ; called from CONTEXT^XTIDCTX(TFILE,TFIELD,CTX)
"RTN","XTIDTBL",8,0)
 ; returns a valid new CTX array
"RTN","XTIDTBL",9,0)
 N SUBFILE
"RTN","XTIDTBL",10,0)
 S TFILE=+$G(TFILE)
"RTN","XTIDTBL",11,0)
 Q:'TFILE!($D(CTX))
"RTN","XTIDTBL",12,0)
 ; determine the subfile for the multi-valued field 
"RTN","XTIDTBL",13,0)
 ; 99.991, EFFECTIVE DATE/TIME
"RTN","XTIDTBL",14,0)
 S SUBFILE=$$GETSUBF(TFILE,99.991)
"RTN","XTIDTBL",15,0)
 Q:'SUBFILE
"RTN","XTIDTBL",16,0)
 S CTX("TYPE")="TABLE"
"RTN","XTIDTBL",17,0)
 S CTX("TERM FILE#")=TFILE
"RTN","XTIDTBL",18,0)
 S CTX("TERM FIELD#")=.01
"RTN","XTIDTBL",19,0)
 S CTX("SOURCE FILE#")=TFILE
"RTN","XTIDTBL",20,0)
 S CTX("TERMSTATUS SUBFILE#")=SUBFILE
"RTN","XTIDTBL",21,0)
 Q
"RTN","XTIDTBL",22,0)
 ;
"RTN","XTIDTBL",23,0)
VALIDREF(CTX,TIREF) ; validate the term, internal ref
"RTN","XTIDTBL",24,0)
 ; test TIREF is a valid value in given context (table)
"RTN","XTIDTBL",25,0)
 ; TIREF must be in IENS form, but will be checked
"RTN","XTIDTBL",26,0)
 ; later as VDUI related data is retrieved
"RTN","XTIDTBL",27,0)
 ; would be nice if we can do an earlier check
"RTN","XTIDTBL",28,0)
 ; based on IENS and the CTX("SOURCE FILE#")
"RTN","XTIDTBL",29,0)
 N VALID
"RTN","XTIDTBL",30,0)
 Q:'$D(CTX)!($G(TIREF)']"") 0
"RTN","XTIDTBL",31,0)
 S VALID=TIREF?.(.N1",")
"RTN","XTIDTBL",32,0)
 Q VALID
"RTN","XTIDTBL",33,0)
 ;
"RTN","XTIDTBL",34,0)
FINDTERM(CTX,TIREF,TERM) ; find term 
"RTN","XTIDTBL",35,0)
 ; called from FINDTERM^XTIDCTX(CTX,TIREF,TERM)
"RTN","XTIDTBL",36,0)
 ; find term for given term IREF
"RTN","XTIDTBL",37,0)
 ; return TERM data as new TERM array
"RTN","XTIDTBL",38,0)
 N IENS
"RTN","XTIDTBL",39,0)
 Q:'$D(CTX)!($D(TERM))
"RTN","XTIDTBL",40,0)
 Q:'$$VALIDREF(.CTX,$G(TIREF))
"RTN","XTIDTBL",41,0)
 S IENS=$G(TIREF)
"RTN","XTIDTBL",42,0)
 Q:IENS']""
"RTN","XTIDTBL",43,0)
 D GETTERM^XTIDCTX(.CTX,CTX("SOURCE FILE#"),IENS,.TERM)
"RTN","XTIDTBL",44,0)
 Q
"RTN","XTIDTBL",45,0)
 ;
"RTN","XTIDTBL",46,0)
SRCHTRMS(CTX,VUID,XTTBARR,MASTER) ; search term index entries
"RTN","XTIDTBL",47,0)
 ; called from SEARCH^XTIDCTX(CTX,VUID,ARRAY,MASTER)
"RTN","XTIDTBL",48,0)
 ; FIND^DIC(FILE,IENS,FIELDS,FLAGS,[.]VALUE,NUMBER,[.]INDEXES,
"RTN","XTIDTBL",49,0)
 ;          [.]SCREEN,IDENTIFIER,TARGET_ROOT,MSG_ROOT)
"RTN","XTIDTBL",50,0)
 N DIERR,FILE,TFILE,INDEXES,MSG,RIEN,VALUE,FLAGS,TARG,MSG,NUMFND
"RTN","XTIDTBL",51,0)
 N FIELDS,SCREEN
"RTN","XTIDTBL",52,0)
 S VUID=$G(VUID),MASTER=+$G(MASTER)
"RTN","XTIDTBL",53,0)
 Q:$G(CTX("TYPE"))'="TABLE"!('VUID)
"RTN","XTIDTBL",54,0)
 S FILE=CTX("SOURCE FILE#"),INDEXES="AVUID",FLAGS="QX"
"RTN","XTIDTBL",55,0)
 S FIELDS="@;99.98I"
"RTN","XTIDTBL",56,0)
 S VALUE(1)=VUID
"RTN","XTIDTBL",57,0)
 S SCREEN="" I MASTER S SCREEN="I $P(^(""VUID""),""^"",2)"
"RTN","XTIDTBL",58,0)
 ; get entries
"RTN","XTIDTBL",59,0)
 D FIND^DIC(FILE,"",FIELDS,FLAGS,.VALUE,"",INDEXES,SCREEN,"","TARG","MSG")
"RTN","XTIDTBL",60,0)
 Q:$D(MSG("DIERR"))
"RTN","XTIDTBL",61,0)
 S NUMFND=+$G(TARG("DILIST",0))
"RTN","XTIDTBL",62,0)
 I NUMFND D  ;  found entries
"RTN","XTIDTBL",63,0)
 . N ITM,TEMP
"RTN","XTIDTBL",64,0)
 . M TEMP=TARG("DILIST",2)
"RTN","XTIDTBL",65,0)
 . M TEMP=TARG("DILIST","ID")
"RTN","XTIDTBL",66,0)
 . F ITM=1:1:NUMFND  D
"RTN","XTIDTBL",67,0)
 . . N STATUS,IENS
"RTN","XTIDTBL",68,0)
 . . S IENS=TEMP(ITM)_","
"RTN","XTIDTBL",69,0)
 . . S STATUS=$$GETSTAT^XTID(CTX("TERM FILE#"),CTX("TERM FIELD#"),IENS,"")
"RTN","XTIDTBL",70,0)
 . . S STATUS=STATUS_"^"_TEMP(ITM,99.98)
"RTN","XTIDTBL",71,0)
 . . D ADDTARRY^XTIDCTX(XTTBARR,CTX("TERM FILE#"),CTX("TERM FIELD#"),IENS,STATUS)
"RTN","XTIDTBL",72,0)
 . ;
"RTN","XTIDTBL",73,0)
 ;
"RTN","XTIDTBL",74,0)
 Q
"RTN","XTIDTBL",75,0)
 ; 
"RTN","XTIDTBL",76,0)
GETSUBF(FILE,MFIELD) ; get subfile #
"RTN","XTIDTBL",77,0)
 ; get subfile for the given file and multiple-valued field
"RTN","XTIDTBL",78,0)
 N DIERR,ATTR,SUBFILE
"RTN","XTIDTBL",79,0)
 S SUBFILE=""
"RTN","XTIDTBL",80,0)
 D FIELD^DID(FILE,MFIELD,"","MULTIPLE-VALUED;SPECIFIER;TYPE","ATTR")
"RTN","XTIDTBL",81,0)
 I ATTR("MULTIPLE-VALUED")=1,ATTR("TYPE")'="WORD-PROCESSING" D
"RTN","XTIDTBL",82,0)
 . S SUBFILE=+$G(ATTR("SPECIFIER"))
"RTN","XTIDTBL",83,0)
 ;
"RTN","XTIDTBL",84,0)
 Q SUBFILE
"RTN","XTIDTBL",85,0)
 ;
"RTN","XTIDTERM")
0^6^B20599072
"RTN","XTIDTERM",1,0)
XTIDTERM ;OAKCIOFO/JLG - TERM/CONCEPT index entry ;03/18/2005  15:12
"RTN","XTIDTERM",2,0)
 ;;7.3;TOOLKIT;**93**;Apr 25, 1995
"RTN","XTIDTERM",3,0)
 Q
"RTN","XTIDTERM",4,0)
 ; encapsulates a term/concept index entry for both
"RTN","XTIDTERM",5,0)
 ; "set of codes" and "table" indexes
"RTN","XTIDTERM",6,0)
 ; it interfaces through FileMan
"RTN","XTIDTERM",7,0)
 ; TERM is by reference and is in FDA format + CTX data
"RTN","XTIDTERM",8,0)
 ; only exceptions are $$GETSTAT and $$SETSTAT
"RTN","XTIDTERM",9,0)
 ; FDA format is left for convenience but future
"RTN","XTIDTERM",10,0)
 ; implementations might customize it.
"RTN","XTIDTERM",11,0)
 ; TERM is passed by ref in all calls
"RTN","XTIDTERM",12,0)
GETVUID(TERM) ; return VUID value
"RTN","XTIDTERM",13,0)
 ;
"RTN","XTIDTERM",14,0)
 N FILE,IENS
"RTN","XTIDTERM",15,0)
 Q:'$D(TERM)
"RTN","XTIDTERM",16,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",17,0)
 S IENS=$O(TERM(FILE,""))
"RTN","XTIDTERM",18,0)
 Q $G(TERM(FILE,IENS,"VUID","I"))
"RTN","XTIDTERM",19,0)
 ;
"RTN","XTIDTERM",20,0)
GETMASTR(TERM) ; return MASTER VUID value
"RTN","XTIDTERM",21,0)
 ; 
"RTN","XTIDTERM",22,0)
 N FILE,IENS
"RTN","XTIDTERM",23,0)
 Q:'$D(TERM)
"RTN","XTIDTERM",24,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",25,0)
 S IENS=$O(TERM(FILE,""))
"RTN","XTIDTERM",26,0)
 Q $G(TERM(FILE,IENS,"MASTER ENTRY FOR VUID","I"))
"RTN","XTIDTERM",27,0)
 ;
"RTN","XTIDTERM",28,0)
GETSTAT(TERM,DATE) ; return MASTER VUID value
"RTN","XTIDTERM",29,0)
 ; 
"RTN","XTIDTERM",30,0)
 N FILE,SFILE,IENS,STATUS
"RTN","XTIDTERM",31,0)
 Q:'$D(TERM)
"RTN","XTIDTERM",32,0)
 S:'$G(DATE) DATE=$$NOW^XLFDT
"RTN","XTIDTERM",33,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",34,0)
 S SFILE=TERM("CTX","TERMSTATUS SUBFILE#")
"RTN","XTIDTERM",35,0)
 S IENS=","_$O(TERM(FILE,""))
"RTN","XTIDTERM",36,0)
 S STATUS=$$FINDSTAT(SFILE,IENS,DATE)
"RTN","XTIDTERM",37,0)
 ;I 'STATUS Q "^status not found for given date/time"
"RTN","XTIDTERM",38,0)
 Q $P(STATUS,"^",2,4)
"RTN","XTIDTERM",39,0)
 ;
"RTN","XTIDTERM",40,0)
SETVUID(TERM,VUID) ; set new VUID to existing TERM
"RTN","XTIDTERM",41,0)
 ;
"RTN","XTIDTERM",42,0)
 N DIERR,FLAGS,FILE,IENS,MSG,MYFDA,SUCCESS
"RTN","XTIDTERM",43,0)
 S VUID=$G(VUID)
"RTN","XTIDTERM",44,0)
 Q:'$D(TERM)!('VUID) 0
"RTN","XTIDTERM",45,0)
 ; check constraints first
"RTN","XTIDTERM",46,0)
 Q:$$CNSTR1() 0
"RTN","XTIDTERM",47,0)
 S SUCCESS=0,FLAGS="KS"
"RTN","XTIDTERM",48,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",49,0)
 S IENS=$O(TERM(+FILE,""))
"RTN","XTIDTERM",50,0)
 Q:IENS']"" SUCCESS
"RTN","XTIDTERM",51,0)
 S MYFDA(FILE,IENS,99.99)=VUID
"RTN","XTIDTERM",52,0)
 D FILE^DIE(FLAGS,"MYFDA","MSG")
"RTN","XTIDTERM",53,0)
 I '$D(MSG("DIERR")) D
"RTN","XTIDTERM",54,0)
 . S SUCCESS=1
"RTN","XTIDTERM",55,0)
 . ; update the cached TERM array
"RTN","XTIDTERM",56,0)
 . S TERM(FILE,IENS,"VUID","I")=VUID
"RTN","XTIDTERM",57,0)
 ;
"RTN","XTIDTERM",58,0)
 Q SUCCESS
"RTN","XTIDTERM",59,0)
 ;
"RTN","XTIDTERM",60,0)
SETMASTR(TERM,MVUID) ; set MASTER ENTRY flag to existing TERM
"RTN","XTIDTERM",61,0)
 ;
"RTN","XTIDTERM",62,0)
 N DIERR,FLAGS,FILE,IENS,MSG,MYFDA,SUCCESS
"RTN","XTIDTERM",63,0)
 S MVUID=+$G(MVUID)
"RTN","XTIDTERM",64,0)
 Q:'$D(TERM) 0
"RTN","XTIDTERM",65,0)
 ; check constraints first and override VUID flag
"RTN","XTIDTERM",66,0)
 I MVUID,$$CNSTR2() S MVUID=0
"RTN","XTIDTERM",67,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",68,0)
 S IENS=$O(TERM(+FILE,""))
"RTN","XTIDTERM",69,0)
 Q:IENS']"" 0
"RTN","XTIDTERM",70,0)
 S SUCCESS=0,FLAGS="KS"
"RTN","XTIDTERM",71,0)
 S MYFDA(FILE,IENS,99.98)=MVUID
"RTN","XTIDTERM",72,0)
 D FILE^DIE(FLAGS,"MYFDA","MSG")
"RTN","XTIDTERM",73,0)
 I '$D(MSG("DIERR")) D
"RTN","XTIDTERM",74,0)
 . S SUCCESS=1
"RTN","XTIDTERM",75,0)
 . ; update the cached TERM array
"RTN","XTIDTERM",76,0)
 . S TERM(FILE,IENS,"MASTER ENTRY FOR VUID","I")=MVUID
"RTN","XTIDTERM",77,0)
 ;
"RTN","XTIDTERM",78,0)
 Q SUCCESS
"RTN","XTIDTERM",79,0)
 ;
"RTN","XTIDTERM",80,0)
SETSTAT(TERM,STATUS,DATE) ; set status
"RTN","XTIDTERM",81,0)
 ; set status and date for the given term 
"RTN","XTIDTERM",82,0)
 N DIERR,FLAGS,FILE,SFILE,MYFDA,MSG,SUCCESS,IENS
"RTN","XTIDTERM",83,0)
 S STATUS=$G(STATUS),DATE=$G(DATE)
"RTN","XTIDTERM",84,0)
 Q:'$D(TERM)!(STATUS']"") 0
"RTN","XTIDTERM",85,0)
 S SUCCESS=0,FLAGS="KS"
"RTN","XTIDTERM",86,0)
 S STATUS=+$G(STATUS)
"RTN","XTIDTERM",87,0)
 S:'$G(DATE) DATE=$$NOW^XLFDT
"RTN","XTIDTERM",88,0)
 S FILE=TERM("CTX","SOURCE FILE#")
"RTN","XTIDTERM",89,0)
 S SFILE=TERM("CTX","TERMSTATUS SUBFILE#")
"RTN","XTIDTERM",90,0)
 S IENS="?+1,"_$O(TERM(FILE,""))
"RTN","XTIDTERM",91,0)
 S MYFDA(SFILE,IENS,.01)=DATE
"RTN","XTIDTERM",92,0)
 S MYFDA(SFILE,IENS,.02)=STATUS
"RTN","XTIDTERM",93,0)
 D UPDATE^DIE(FLAGS,"MYFDA","","MSG")
"RTN","XTIDTERM",94,0)
 S:'$D(MSG("DIERR")) SUCCESS=1
"RTN","XTIDTERM",95,0)
 Q SUCCESS
"RTN","XTIDTERM",96,0)
 ;
"RTN","XTIDTERM",97,0)
FINDSTAT(FILE,IENS,DATE) ; find status info 
"RTN","XTIDTERM",98,0)
 ; find status of term for given DATE
"RTN","XTIDTERM",99,0)
 ; D LIST^DIC(FILE,IENS,FIELDS,FLAGS,NUMBER,[.]FROM,[.]PART,INDEX,[.]SCREEN,IDENTIFIER,TARGET_ROOT,MSG_ROOT)
"RTN","XTIDTERM",100,0)
 N DIERR,FIELDS,FLAGS,FROM,MSG,MYSTAT,NUMBER,STATUS
"RTN","XTIDTERM",101,0)
 S STATUS="^^^"
"RTN","XTIDTERM",102,0)
 S:'$G(DATE) DATE=$$NOW^XLFDT
"RTN","XTIDTERM",103,0)
 S FROM=DATE+.000001
"RTN","XTIDTERM",104,0)
 S FIELDS="@;.01IE;.02IE",FLAGS="B",NUMBER=1
"RTN","XTIDTERM",105,0)
 D LIST^DIC(FILE,IENS,FIELDS,FLAGS,NUMBER,FROM,"","","","","MYSTAT","MSG")
"RTN","XTIDTERM",106,0)
 Q:$D(MSG("DIERR")) STATUS
"RTN","XTIDTERM",107,0)
 I $D(MYSTAT("DILIST","ID",1)) D
"RTN","XTIDTERM",108,0)
 . N ESTAT,IDATE,IENSTAT,ISTAT
"RTN","XTIDTERM",109,0)
 . S IENSTAT=$G(MYSTAT("DILIST",2,1))
"RTN","XTIDTERM",110,0)
 . S ISTAT=$G(MYSTAT("DILIST","ID",1,.02,"I"))
"RTN","XTIDTERM",111,0)
 . S ESTAT=$G(MYSTAT("DILIST","ID",1,.02,"E"))
"RTN","XTIDTERM",112,0)
 . S IDATE=$G(MYSTAT("DILIST","ID",1,.01,"I"))
"RTN","XTIDTERM",113,0)
 . S STATUS=IENSTAT_"^"_ISTAT_"^"_IDATE_"^"_ESTAT
"RTN","XTIDTERM",114,0)
 ;
"RTN","XTIDTERM",115,0)
 Q STATUS
"RTN","XTIDTERM",116,0)
 ;
"RTN","XTIDTERM",117,0)
DUPLMSTR(FILE,FIELD,TVUID) ; check duplicates
"RTN","XTIDTERM",118,0)
 ; used to determine existence of duplicate
"RTN","XTIDTERM",119,0)
 ; entries with the same VUID and master flag
"RTN","XTIDTERM",120,0)
 ; can potentially use this from DD trigger
"RTN","XTIDTERM",121,0)
 N XTTARR,DUPL
"RTN","XTIDTERM",122,0)
 S DUPL=0
"RTN","XTIDTERM",123,0)
 D GETIREF^XTID(FILE,FIELD,TVUID,"XTTARR",1)
"RTN","XTIDTERM",124,0)
 I +$G(XTTARR) S DUPL=1
"RTN","XTIDTERM",125,0)
 Q DUPL
"RTN","XTIDTERM",126,0)
 ;
"RTN","XTIDTERM",127,0)
CNSTR1() ; check constraints when setting VUID
"RTN","XTIDTERM",128,0)
 ; called from SETVUID()
"RTN","XTIDTERM",129,0)
 ; only one MASTER ENTRY FOR VUID can exist
"RTN","XTIDTERM",130,0)
 N CONSTR,DUPL,MFLAG,TFILE,TFIELD
"RTN","XTIDTERM",131,0)
 S CONSTR=1
"RTN","XTIDTERM",132,0)
 S MFLAG=$$GETMASTR(.TERM)
"RTN","XTIDTERM",133,0)
 Q:'MFLAG 'CONSTR ; no constraint
"RTN","XTIDTERM",134,0)
 S TFILE=TERM("CTX","TERM FILE#")
"RTN","XTIDTERM",135,0)
 S TFIELD=TERM("CTX","TERM FIELD#")
"RTN","XTIDTERM",136,0)
 S DUPL=$$DUPLMSTR(TFILE,TFIELD,VUID)
"RTN","XTIDTERM",137,0)
 Q:'DUPL 'CONSTR ; no constraint
"RTN","XTIDTERM",138,0)
 Q CONSTR ; constrained
"RTN","XTIDTERM",139,0)
 ;
"RTN","XTIDTERM",140,0)
CNSTR2() ; check constraints when setting MASTER ENTRY flag
"RTN","XTIDTERM",141,0)
 ; called from SETMASTR()
"RTN","XTIDTERM",142,0)
 ; only one MASTER ENTRY FOR VUID can exist
"RTN","XTIDTERM",143,0)
 N CONSTR,DUPL,MFLAG,TFILE,TFIELD,TVUID
"RTN","XTIDTERM",144,0)
 S CONSTR=1
"RTN","XTIDTERM",145,0)
 S MFLAG=$$GETMASTR(.TERM)
"RTN","XTIDTERM",146,0)
 Q:MFLAG 'CONSTR ; TERM is already MASTER
"RTN","XTIDTERM",147,0)
 S TFILE=TERM("CTX","TERM FILE#")
"RTN","XTIDTERM",148,0)
 S TFIELD=TERM("CTX","TERM FIELD#")
"RTN","XTIDTERM",149,0)
 S TVUID=$$GETVUID(.TERM)
"RTN","XTIDTERM",150,0)
 S DUPL=$$DUPLMSTR(TFILE,TFIELD,TVUID)
"RTN","XTIDTERM",151,0)
 Q:'DUPL 'CONSTR ; no constraint
"RTN","XTIDTERM",152,0)
 Q CONSTR ; constrained
"RTN","XTIDTERM",153,0)
 ;
"SEC","^DD",8985.1,8985.1,.01,8)

"SEC","^DD",8985.1,8985.1,.01,8.5)

"SEC","^DD",8985.1,8985.1,.01,9)

"SEC","^DIC",8985.1,8985.1,0,"AUDIT")
@
"SEC","^DIC",8985.1,8985.1,0,"DD")
@
"SEC","^DIC",8985.1,8985.1,0,"DEL")
@
"SEC","^DIC",8985.1,8985.1,0,"LAYGO")
@
"SEC","^DIC",8985.1,8985.1,0,"RD")
@
"SEC","^DIC",8985.1,8985.1,0,"WR")
@
"VER")
8.0^22.0
"^DD",8985.1,8985.1,0)
FIELD^^99.991^6
"^DD",8985.1,8985.1,0,"DDA")
N
"^DD",8985.1,8985.1,0,"DT")
3050217
"^DD",8985.1,8985.1,0,"NM","XTID VUID FOR SET OF CODES")

"^DD",8985.1,8985.1,0,"VRPK")
XT
"^DD",8985.1,8985.1,.01,0)
FILE NUMBER^RFXI^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",8985.1,8985.1,.01,1,0)
^.1^^0
"^DD",8985.1,8985.1,.01,3)
Answer must be a valid VistA file number or subfile number.
"^DD",8985.1,8985.1,.01,7.5)
I $G(DUZ(0))'="@" K X
"^DD",8985.1,8985.1,.01,10)

"^DD",8985.1,8985.1,.01,21,0)
^.001^2^2^3050217^^^
"^DD",8985.1,8985.1,.01,21,1,0)
The file number or subfile number assigned in VistA where the Set of 
"^DD",8985.1,8985.1,.01,21,2,0)
Codes exists.
"^DD",8985.1,8985.1,.01,23,0)
^.001^2^2^3050217^^^^
"^DD",8985.1,8985.1,.01,23,1,0)
The number of the file or subfile that contains a field of type SET OF 
"^DD",8985.1,8985.1,.01,23,2,0)
CODES.
"^DD",8985.1,8985.1,.01,"DT")
3050217
"^DD",8985.1,8985.1,.02,0)
FIELD NUMBER^RFXI^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",8985.1,8985.1,.02,3)
Answer must be a valid field number in the VistA file/subfile.
"^DD",8985.1,8985.1,.02,7.5)
I $G(DUZ(0))'="@" K X
"^DD",8985.1,8985.1,.02,21,0)
^.001^2^2^3050217^^^^
"^DD",8985.1,8985.1,.02,21,1,0)
The field number assigned to a field in a VistA file or subfile that 
"^DD",8985.1,8985.1,.02,21,2,0)
contains a Set of Codes.
"^DD",8985.1,8985.1,.02,23,0)
^.001^1^1^3050217^^^^
"^DD",8985.1,8985.1,.02,23,1,0)
A field with a SET OF CODES as its type.
"^DD",8985.1,8985.1,.02,"DT")
3050217
"^DD",8985.1,8985.1,.03,0)
INTERNAL REFERENCE^RFXI^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",8985.1,8985.1,.03,3)
Answer must be a valid internal value in the Set of Codes for this field.
"^DD",8985.1,8985.1,.03,7.5)
I $G(DUZ(0))'="@" K X
"^DD",8985.1,8985.1,.03,21,0)
^^1^1^3050217^
"^DD",8985.1,8985.1,.03,21,1,0)
An internal value used by the Set of Codes.
"^DD",8985.1,8985.1,.03,23,0)
^^2^2^3050217^
"^DD",8985.1,8985.1,.03,23,1,0)
The internal value used by the set of codes for the field indicated in 
"^DD",8985.1,8985.1,.03,23,2,0)
the FIELD NUMBER field.
"^DD",8985.1,8985.1,.03,"DT")
3050217
"^DD",8985.1,8985.1,99.98,0)
MASTER ENTRY FOR VUID^RSI^0:NO;1:YES;^VUID;2^Q
"^DD",8985.1,8985.1,99.98,21,0)
^^2^2^3050217^
"^DD",8985.1,8985.1,99.98,21,1,0)
This field identifies the Master entry for a VUID associated with a 
"^DD",8985.1,8985.1,99.98,21,2,0)
Term/Concept.
"^DD",8985.1,8985.1,99.98,"DT")
3050217
"^DD",8985.1,8985.1,99.99,0)
VUID^RFXI^^VUID;1^S X=+X K:$L(X)>20!($L(X)<1)!'(X?1.18N) X
"^DD",8985.1,8985.1,99.99,1,0)
^.1^^0
"^DD",8985.1,8985.1,99.99,3)
Answer must be 1-20 characters in length.
"^DD",8985.1,8985.1,99.99,21,0)
^.001^2^2^3050217^^
"^DD",8985.1,8985.1,99.99,21,1,0)
VHA Unique ID (VUID).  A unique meaningless integer assigned to reference 
"^DD",8985.1,8985.1,99.99,21,2,0)
terms VHA wide.
"^DD",8985.1,8985.1,99.99,"DT")
3050217
"^DD",8985.1,8985.1,99.991,0)
EFFECTIVE DATE/TIME^8985.11DA^^TERMSTATUS;0
"^DD",8985.1,8985.1,99.991,21,0)
^.001^1^1^3050217^^
"^DD",8985.1,8985.1,99.991,21,1,0)
Describes the pair Status and Effective Date/Time for each reference term.
"^DD",8985.1,8985.11,0)
EFFECTIVE DATE/TIME SUB-FIELD^^.02^2
"^DD",8985.1,8985.11,0,"DT")
3050217
"^DD",8985.1,8985.11,0,"NM","EFFECTIVE DATE/TIME")

"^DD",8985.1,8985.11,0,"UP")
8985.1
"^DD",8985.1,8985.11,.01,0)
EFFECTIVE DATE/TIME^RDI^^0;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",8985.1,8985.11,.01,1,0)
^.1^^0
"^DD",8985.1,8985.11,.01,21,0)
^.001^2^2^3050217^^^^
"^DD",8985.1,8985.11,.01,21,1,0)
This is the date/time when the Status of the reference term was 
"^DD",8985.1,8985.11,.01,21,2,0)
established.
"^DD",8985.1,8985.11,.01,"DT")
3050217
"^DD",8985.1,8985.11,.02,0)
STATUS^RSI^0:INACTIVE;1:ACTIVE;^0;2^Q
"^DD",8985.1,8985.11,.02,21,0)
^^4^4^3050217^
"^DD",8985.1,8985.11,.02,21,1,0)
The Status of a reference term is either 'ACTIVE' or 'INACTIVE'.  If 
"^DD",8985.1,8985.11,.02,21,2,0)
'ACTIVE', then the term will be accessible by end-users to document a 
"^DD",8985.1,8985.11,.02,21,3,0)
particular patient event.  If 'INACTIVE', then the term will only be 
"^DD",8985.1,8985.11,.02,21,4,0)
accessible by the application to display legacy data.
"^DD",8985.1,8985.11,.02,"DT")
3050127
"^DIC",8985.1,8985.1,0)
XTID VUID FOR SET OF CODES^8985.1
"^DIC",8985.1,8985.1,0,"GL")
^XTID(8985.1,
"^DIC",8985.1,8985.1,"%",0)
^1.005^^0
"^DIC",8985.1,8985.1,"%D",0)
^1.001^3^3^3050217^^^^
"^DIC",8985.1,8985.1,"%D",1,0)
This file is used to associate a VHA Unique ID (VUID) to each of the 
"^DIC",8985.1,8985.1,"%D",2,0)
elements in a Set of Codes, effectively associating a standard reference 
"^DIC",8985.1,8985.1,"%D",3,0)
term with a non-standard reference term.
"^DIC",8985.1,"B","XTID VUID FOR SET OF CODES",8985.1)

**INSTALL NAME**
HEALTH DATA & INFORMATICS 1.0
"BLD",5474,0)
HEALTH DATA & INFORMATICS 1.0^HEALTH DATA & INFORMATICS^0^3050426^y
"BLD",5474,1,0)
^^1^1^3050224^
"BLD",5474,1,1,0)
Health Data & Informatics V1.0 package release.
"BLD",5474,4,0)
^9.64PA^7115.3^9
"BLD",5474,4,7115.1,0)
7115.1
"BLD",5474,4,7115.1,222)
y^y^f^^n^^y^o^n
"BLD",5474,4,7115.3,0)
7115.3
"BLD",5474,4,7115.3,222)
y^y^f^^n^^y^o^n
"BLD",5474,4,7115.5,0)
7115.5
"BLD",5474,4,7115.5,222)
y^y^f^^n^^y^o^n
"BLD",5474,4,7115.6,0)
7115.6
"BLD",5474,4,7115.6,222)
y^y^f^^n^^y^o^n
"BLD",5474,4,7118.11,0)
7118.11
"BLD",5474,4,7118.11,222)
y^y^f^^^^n
"BLD",5474,4,7118.21,0)
7118.21
"BLD",5474,4,7118.21,222)
y^y^f^^^^n
"BLD",5474,4,7118.22,0)
7118.22
"BLD",5474,4,7118.22,222)
y^y^f^^^^n
"BLD",5474,4,7118.25,0)
7118.25
"BLD",5474,4,7118.25,222)
y^y^f^^^^n
"BLD",5474,4,7118.29,0)
7118.29
"BLD",5474,4,7118.29,222)
y^y^f^^^^n
"BLD",5474,4,"B",7115.1,7115.1)

"BLD",5474,4,"B",7115.3,7115.3)

"BLD",5474,4,"B",7115.5,7115.5)

"BLD",5474,4,"B",7115.6,7115.6)

"BLD",5474,4,"B",7118.11,7118.11)

"BLD",5474,4,"B",7118.21,7118.21)

"BLD",5474,4,"B",7118.22,7118.22)

"BLD",5474,4,"B",7118.25,7118.25)

"BLD",5474,4,"B",7118.29,7118.29)

"BLD",5474,"ABPKG")
n
"BLD",5474,"INID")
^n
"BLD",5474,"INIT")
POST^HDI1000A
"BLD",5474,"KRN",0)
^9.67PA^8989.52^19
"BLD",5474,"KRN",.4,0)
.4
"BLD",5474,"KRN",.401,0)
.401
"BLD",5474,"KRN",.402,0)
.402
"BLD",5474,"KRN",.403,0)
.403
"BLD",5474,"KRN",.5,0)
.5
"BLD",5474,"KRN",.84,0)
.84
"BLD",5474,"KRN",3.6,0)
3.6
"BLD",5474,"KRN",3.6,"NM",0)
^9.68A^4^4
"BLD",5474,"KRN",3.6,"NM",1,0)
HDIS ERRORS^^0
"BLD",5474,"KRN",3.6,"NM",2,0)
HDIS XML MSG PROCESS ERROR^^0
"BLD",5474,"KRN",3.6,"NM",3,0)
HDIS NOTIFY ERT^^0
"BLD",5474,"KRN",3.6,"NM",4,0)
HDIS NOTIFY HDR^^0
"BLD",5474,"KRN",3.6,"NM","B","HDIS ERRORS",1)

"BLD",5474,"KRN",3.6,"NM","B","HDIS NOTIFY ERT",3)

"BLD",5474,"KRN",3.6,"NM","B","HDIS NOTIFY HDR",4)

"BLD",5474,"KRN",3.6,"NM","B","HDIS XML MSG PROCESS ERROR",2)

"BLD",5474,"KRN",3.8,0)
3.8
"BLD",5474,"KRN",3.8,"NM",0)
^9.68A^3^3
"BLD",5474,"KRN",3.8,"NM",1,0)
HDIS ERRORS^^0
"BLD",5474,"KRN",3.8,"NM",2,0)
HDIS ERT NOTIFICATION^^0
"BLD",5474,"KRN",3.8,"NM",3,0)
HDIS HDR NOTIFICATION^^0
"BLD",5474,"KRN",3.8,"NM","B","HDIS ERRORS",1)

"BLD",5474,"KRN",3.8,"NM","B","HDIS ERT NOTIFICATION",2)

"BLD",5474,"KRN",3.8,"NM","B","HDIS HDR NOTIFICATION",3)

"BLD",5474,"KRN",9.2,0)
9.2
"BLD",5474,"KRN",9.8,0)
9.8
"BLD",5474,"KRN",9.8,"NM",0)
^9.68A^36^34
"BLD",5474,"KRN",9.8,"NM",2,0)
HDISVC00^^0^B5174699
"BLD",5474,"KRN",9.8,"NM",3,0)
HDISVC01^^0^B45121782
"BLD",5474,"KRN",9.8,"NM",4,0)
HDISVC02^^0^B19591362
"BLD",5474,"KRN",9.8,"NM",5,0)
HDISVCFX^^0^B4562200
"BLD",5474,"KRN",9.8,"NM",6,0)
HDISVCMR^^0^B7849381
"BLD",5474,"KRN",9.8,"NM",7,0)
HDISVCUT^^0^B6418022
"BLD",5474,"KRN",9.8,"NM",8,0)
HDISVF01^^0^B21250558
"BLD",5474,"KRN",9.8,"NM",9,0)
HDISVF02^^0^B13448096
"BLD",5474,"KRN",9.8,"NM",10,0)
HDISVF03^^0^B12569792
"BLD",5474,"KRN",9.8,"NM",11,0)
HDISVF04^^0^B24038663
"BLD",5474,"KRN",9.8,"NM",12,0)
HDISVF05^^0^B4450327
"BLD",5474,"KRN",9.8,"NM",13,0)
HDISVF06^^0^B963550
"BLD",5474,"KRN",9.8,"NM",14,0)
HDISVF07^^0^B14585322
"BLD",5474,"KRN",9.8,"NM",15,0)
HDISVF08^^0^B6873461
"BLD",5474,"KRN",9.8,"NM",16,0)
HDISVF09^^0^B25236145
"BLD",5474,"KRN",9.8,"NM",17,0)
HDISVM00^^0^B3587426
"BLD",5474,"KRN",9.8,"NM",18,0)
HDISVM01^^0^B14612946
"BLD",5474,"KRN",9.8,"NM",19,0)
HDISVM02^^0^B6106835
"BLD",5474,"KRN",9.8,"NM",20,0)
HDISVS00^^0^B5629288
"BLD",5474,"KRN",9.8,"NM",21,0)
HDISVS01^^0^B49593050
"BLD",5474,"KRN",9.8,"NM",22,0)
HDISVS02^^0^B14125593
"BLD",5474,"KRN",9.8,"NM",23,0)
HDISVS03^^0^B26135546
"BLD",5474,"KRN",9.8,"NM",24,0)
HDISVSFX^^0^B6363234
"BLD",5474,"KRN",9.8,"NM",25,0)
HDISVU01^^0^B1879599
"BLD",5474,"KRN",9.8,"NM",27,0)
HDISVF10^^0^B5695858
"BLD",5474,"KRN",9.8,"NM",28,0)
HDISVAP^^0^B2851385
"BLD",5474,"KRN",9.8,"NM",29,0)
HDISXML^^0^B8757304
"BLD",5474,"KRN",9.8,"NM",30,0)
HDI1000A^^0^B33390472
"BLD",5474,"KRN",9.8,"NM",31,0)
HDI1000B^^0^B44404844
"BLD",5474,"KRN",9.8,"NM",32,0)
HDI1000C^^0^B1203100
"BLD",5474,"KRN",9.8,"NM",33,0)
HDI1000D^^0^B49241106
"BLD",5474,"KRN",9.8,"NM",34,0)
HDI1000E^^0^B57999521
"BLD",5474,"KRN",9.8,"NM",35,0)
HDI1000F^^0^B76782914
"BLD",5474,"KRN",9.8,"NM",36,0)
HDI1000G^^0^B75386862
"BLD",5474,"KRN",9.8,"NM","B","HDI1000A",30)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000B",31)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000C",32)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000D",33)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000E",34)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000F",35)

"BLD",5474,"KRN",9.8,"NM","B","HDI1000G",36)

"BLD",5474,"KRN",9.8,"NM","B","HDISVAP",28)

"BLD",5474,"KRN",9.8,"NM","B","HDISVC00",2)

"BLD",5474,"KRN",9.8,"NM","B","HDISVC01",3)

"BLD",5474,"KRN",9.8,"NM","B","HDISVC02",4)

"BLD",5474,"KRN",9.8,"NM","B","HDISVCFX",5)

"BLD",5474,"KRN",9.8,"NM","B","HDISVCMR",6)

"BLD",5474,"KRN",9.8,"NM","B","HDISVCUT",7)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF01",8)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF02",9)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF03",10)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF04",11)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF05",12)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF06",13)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF07",14)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF08",15)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF09",16)

"BLD",5474,"KRN",9.8,"NM","B","HDISVF10",27)

"BLD",5474,"KRN",9.8,"NM","B","HDISVM00",17)

"BLD",5474,"KRN",9.8,"NM","B","HDISVM01",18)

"BLD",5474,"KRN",9.8,"NM","B","HDISVM02",19)

"BLD",5474,"KRN",9.8,"NM","B","HDISVS00",20)

"BLD",5474,"KRN",9.8,"NM","B","HDISVS01",21)

"BLD",5474,"KRN",9.8,"NM","B","HDISVS02",22)

"BLD",5474,"KRN",9.8,"NM","B","HDISVS03",23)

"BLD",5474,"KRN",9.8,"NM","B","HDISVSFX",24)

"BLD",5474,"KRN",9.8,"NM","B","HDISVU01",25)

"BLD",5474,"KRN",9.8,"NM","B","HDISXML",29)

"BLD",5474,"KRN",19,0)
19
"BLD",5474,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",5474,"KRN",19,"NM",1,0)
HDIS-FACILITY-DATA-SERVER^^0
"BLD",5474,"KRN",19,"NM",2,0)
HDIS-STATUS-UPDATE-SERVER^^0
"BLD",5474,"KRN",19,"NM","B","HDIS-FACILITY-DATA-SERVER",1)

"BLD",5474,"KRN",19,"NM","B","HDIS-STATUS-UPDATE-SERVER",2)

"BLD",5474,"KRN",19.1,0)
19.1
"BLD",5474,"KRN",101,0)
101
"BLD",5474,"KRN",409.61,0)
409.61
"BLD",5474,"KRN",771,0)
771
"BLD",5474,"KRN",870,0)
870
"BLD",5474,"KRN",8989.51,0)
8989.51
"BLD",5474,"KRN",8989.52,0)
8989.52
"BLD",5474,"KRN",8994,0)
8994
"BLD",5474,"KRN","B",.4,.4)

"BLD",5474,"KRN","B",.401,.401)

"BLD",5474,"KRN","B",.402,.402)

"BLD",5474,"KRN","B",.403,.403)

"BLD",5474,"KRN","B",.5,.5)

"BLD",5474,"KRN","B",.84,.84)

"BLD",5474,"KRN","B",3.6,3.6)

"BLD",5474,"KRN","B",3.8,3.8)

"BLD",5474,"KRN","B",9.2,9.2)

"BLD",5474,"KRN","B",9.8,9.8)

"BLD",5474,"KRN","B",19,19)

"BLD",5474,"KRN","B",19.1,19.1)

"BLD",5474,"KRN","B",101,101)

"BLD",5474,"KRN","B",409.61,409.61)

"BLD",5474,"KRN","B",771,771)

"BLD",5474,"KRN","B",870,870)

"BLD",5474,"KRN","B",8989.51,8989.51)

"BLD",5474,"KRN","B",8989.52,8989.52)

"BLD",5474,"KRN","B",8994,8994)

"BLD",5474,"QUES",0)
^9.62^^
"BLD",5474,"REQB",0)
^9.611^1^1
"BLD",5474,"REQB",1,0)
XU*8.0*299^2
"BLD",5474,"REQB","B","XU*8.0*299",1)

"DATA",7115.1,1,0)
VITALS
"DATA",7115.1,1,"FILE",0)
^7115.11PA^3^3
"DATA",7115.1,1,"FILE",1,0)
2
"DATA",7115.1,1,"FILE",2,0)
1
"DATA",7115.1,1,"FILE",3,0)
3
"DATA",7115.1,2,0)
ALLERGIES
"DATA",7115.1,2,"FILE",0)
^7115.11PA^2^2
"DATA",7115.1,2,"FILE",1,0)
4
"DATA",7115.1,2,"FILE",2,0)
5
"DATA",7115.1,3,0)
LABORATORY
"DATA",7115.1,3,"FILE",0)
^7115.11PA^1^1
"DATA",7115.1,3,"FILE",1,0)
6
"DATA",7115.1,4,0)
OUTPATIENT PHARMACY
"DATA",7115.1,4,"FILE",0)
^7115.11PA^4^4
"DATA",7115.1,4,"FILE",1,0)
7
"DATA",7115.1,4,"FILE",2,0)
8
"DATA",7115.1,4,"FILE",3,0)
9
"DATA",7115.1,4,"FILE",4,0)
10
"DATA",7115.3,1,0)
MDR IMPORT^1^UTF-8^Domain^3
"DATA",7115.3,1,"SEQ",0)
^7115.34^60^59
"DATA",7115.3,1,"SEQ",1,0)
10^Name^1^^2
"DATA",7115.3,1,"SEQ",3,0)
30^File^1^^2^1
"DATA",7115.3,1,"SEQ",4,0)
40^Number^1^^3
"DATA",7115.3,1,"SEQ",5,0)
50^Name^1^^3
"DATA",7115.3,1,"SEQ",6,0)
60^Access^1^^3^1
"DATA",7115.3,1,"SEQ",7,0)
70^AuditAccess^1^^4
"DATA",7115.3,1,"SEQ",8,0)
80^DDAccess^1^^4
"DATA",7115.3,1,"SEQ",9,0)
90^DeleteAccess^1^^4
"DATA",7115.3,1,"SEQ",10,0)
100^LaygoAccess^1^^4
"DATA",7115.3,1,"SEQ",11,0)
110^ReadAccess^1^^4
"DATA",7115.3,1,"SEQ",12,0)
120^WriteAccess^1^^4
"DATA",7115.3,1,"SEQ",13,0)
130^GlobalReference^1^^3
"DATA",7115.3,1,"SEQ",14,0)
140^Description^1^^3^1
"DATA",7115.3,1,"SEQ",15,0)
150^FD^1^^4^^1
"DATA",7115.3,1,"SEQ",16,0)
160^Field^1^^3^1
"DATA",7115.3,1,"SEQ",17,0)
170^Number^1^^4
"DATA",7115.3,1,"SEQ",18,0)
180^Name^1^^4
"DATA",7115.3,1,"SEQ",19,0)
190^Title^^^4
"DATA",7115.3,1,"SEQ",20,0)
200^IsMultiple^^^4
"DATA",7115.3,1,"SEQ",21,0)
210^IsIdentifier^^^4
"DATA",7115.3,1,"SEQ",22,0)
220^IsRequired^^^4
"DATA",7115.3,1,"SEQ",23,0)
230^IsAudited^^^4
"DATA",7115.3,1,"SEQ",24,0)
240^Sub-fileNumber^^^4
"DATA",7115.3,1,"SEQ",25,0)
250^DataType^^^4
"DATA",7115.3,1,"SEQ",26,0)
260^GlobalNode^1^^4
"DATA",7115.3,1,"SEQ",27,0)
270^PiecePosition^1^^4
"DATA",7115.3,1,"SEQ",28,0)
280^PointedToFile^^^4
"DATA",7115.3,1,"SEQ",29,0)
290^MinimumLength^^^4
"DATA",7115.3,1,"SEQ",30,0)
300^MaximumLength^^^4
"DATA",7115.3,1,"SEQ",31,0)
310^ListOfValues^^^4^1
"DATA",7115.3,1,"SEQ",32,0)
320^PermissibleValue^1^^5
"DATA",7115.3,1,"SEQ",33,0)
330^InputTransform^^^4
"DATA",7115.3,1,"SEQ",34,0)
340^OutputTransform^^^4
"DATA",7115.3,1,"SEQ",35,0)
350^ScreeningLogic^^^4
"DATA",7115.3,1,"SEQ",36,0)
360^SourceOfData^^^4
"DATA",7115.3,1,"SEQ",37,0)
370^DestinationOfData^^^4
"DATA",7115.3,1,"SEQ",38,0)
380^IndexesAndDescriptions^^^4^1
"DATA",7115.3,1,"SEQ",39,0)
390^ID^1^^6^^1
"DATA",7115.3,1,"SEQ",40,0)
400^GeneralDescription^^^4^1
"DATA",7115.3,1,"SEQ",41,0)
410^GD^^^5^^1
"DATA",7115.3,1,"SEQ",42,0)
420^TechnicalDescription^^^4^1
"DATA",7115.3,1,"SEQ",43,0)
430^TD^^^5^^1
"DATA",7115.3,1,"SEQ",44,0)
375^HelpText^^^4
"DATA",7115.3,1,"SEQ",45,0)
5^Domain^1^^1^1
"DATA",7115.3,1,"SEQ",46,0)
135^SpecialLookup^^^3
"DATA",7115.3,1,"SEQ",47,0)
136^PostSelectionAction^^^3
"DATA",7115.3,1,"SEQ",48,0)
355^DeleteLogic^^^4^1
"DATA",7115.3,1,"SEQ",49,0)
356^DL^^^5^^1
"DATA",7115.3,1,"SEQ",50,0)
155^FileIndex^1^^3^1
"DATA",7115.3,1,"SEQ",51,0)
156^FID^1^^5^^1
"DATA",7115.3,1,"SEQ",52,0)
325^ValueMeaning^1^^5
"DATA",7115.3,1,"SEQ",53,0)
383^IndexName^1^^5
"DATA",7115.3,1,"SEQ",54,0)
384^SetLogic^1^^5
"DATA",7115.3,1,"SEQ",55,0)
385^KillLogic^1^^5
"DATA",7115.3,1,"SEQ",56,0)
386^IndexDescription^1^^5^1
"DATA",7115.3,1,"SEQ",57,0)
155.2^FIndexName^1^^4
"DATA",7115.3,1,"SEQ",58,0)
155.4^FISetLogic^1^^4
"DATA",7115.3,1,"SEQ",59,0)
155.6^FIKillLogic^1^^4
"DATA",7115.3,1,"SEQ",60,0)
155.8^FIDescription^1^^4^1
"DATA",7115.3,2,0)
VUID^1^UTF-8^Domain^0
"DATA",7115.3,2,"SEQ",0)
^7115.34^14^13
"DATA",7115.3,2,"SEQ",1,0)
10^DomainName^1^^2
"DATA",7115.3,2,"SEQ",2,0)
20^Source^1^^2
"DATA",7115.3,2,"SEQ",3,0)
30^File^1^^2^1
"DATA",7115.3,2,"SEQ",4,0)
40^FileNumber^1^^3
"DATA",7115.3,2,"SEQ",5,0)
50^Term^1^^3^1
"DATA",7115.3,2,"SEQ",6,0)
60^TermName^1^^4
"DATA",7115.3,2,"SEQ",7,0)
70^VUID^1^^4
"DATA",7115.3,2,"SEQ",8,0)
80^NationalTerm^^^4
"DATA",7115.3,2,"SEQ",10,0)
100^FacilityInternalReference^1^^4
"DATA",7115.3,2,"SEQ",11,0)
25^MailManDomain^^^2
"DATA",7115.3,2,"SEQ",12,0)
45^FieldNumber^1^^3
"DATA",7115.3,2,"SEQ",13,0)
5^Domain^1^^0
"DATA",7115.3,2,"SEQ",14,0)
22^SourceType^1^^2
"DATA",7115.3,3,0)
DOMAIN STATUS UPDATE^1^UTF-8^HDISParameters^0
"DATA",7115.3,3,"SEQ",0)
^7115.34^10^10
"DATA",7115.3,3,"SEQ",1,0)
10^HDISParameters^1^^1^1
"DATA",7115.3,3,"SEQ",2,0)
20^Source^1^^1
"DATA",7115.3,3,"SEQ",3,0)
30^MailManDomain^1^^1
"DATA",7115.3,3,"SEQ",4,0)
40^Domain^1^^1^1
"DATA",7115.3,3,"SEQ",5,0)
50^DomainName^1^^2
"DATA",7115.3,3,"SEQ",6,0)
60^FileNumber^1^^2
"DATA",7115.3,3,"SEQ",7,0)
70^FieldNumber^1^^2
"DATA",7115.3,3,"SEQ",8,0)
80^StatusCode^1^^2
"DATA",7115.3,3,"SEQ",9,0)
90^StatusDateTime^1^^2
"DATA",7115.3,3,"SEQ",10,0)
22^SourceType^1^^1
"DATA",7115.5,1,0)
NOT STARTED^0^1
"DATA",7115.5,1,1,0)
^^1^1^3050310^
"DATA",7115.5,1,1,1,0)
This status reflects that VUID implementation has not started.
"DATA",7115.5,2,0)
EXTRACTION OF DATA STARTED^1^1
"DATA",7115.5,2,1,0)
^^2^2^3050310^
"DATA",7115.5,2,1,1,0)
This status denotes that the data requiring VUID assignments is being
"DATA",7115.5,2,1,2,0)
prepared for transmission to the centralized VUID Server.
"DATA",7115.5,3,0)
DATA SENT TO SERVER^2^1
"DATA",7115.5,3,1,0)
^^2^2^3050310^
"DATA",7115.5,3,1,1,0)
This status denotes that the data requiring VUID assignments has been 
"DATA",7115.5,3,1,2,0)
transmitted to the centralized VUID Server for processing.
"DATA",7115.5,4,0)
VUID DATA RECEIVED FROM SERVER^3^1
"DATA",7115.5,4,1,0)
^7115.51^2^2^3050310^^
"DATA",7115.5,4,1,1,0)
This status denotes that the VUIDs assigned by the centralized VUID 
"DATA",7115.5,4,1,2,0)
Server have been received.
"DATA",7115.5,5,0)
AWAITING ERT UPDATE^4^1
"DATA",7115.5,5,1,0)
^^3^3^3050310^
"DATA",7115.5,5,1,1,0)
This status denotes that the VUIDs received from the centralized VUID 
"DATA",7115.5,5,1,2,0)
Server have been stored in VistA and that a complete update of the file
"DATA",7115.5,5,1,3,0)
has been requested from the VistA Enterprise Terminology Server.
"DATA",7115.5,6,0)
NOT STARTED BY FACILITY^0^2
"DATA",7115.5,6,1,0)
^^2^2^3050310^
"DATA",7115.5,6,1,1,0)
This status reflects that VUID implementation has not started at the 
"DATA",7115.5,6,1,2,0)
facilty.
"DATA",7115.5,7,0)
EXTRACTION OF DATA STARTED AT FACILITY^1^2
"DATA",7115.5,7,1,0)
^^2^2^3050310^
"DATA",7115.5,7,1,1,0)
This status denotes that data requiring VUID assignments is being prepared
"DATA",7115.5,7,1,2,0)
for transmission to the centralized VUID Server by the facility.
"DATA",7115.5,8,0)
DATA RECEIVED FROM FACILITY^100^2
"DATA",7115.5,8,1,0)
^7115.51^2^2^3050310^^
"DATA",7115.5,8,1,1,0)
This status denotes that a facility's request for VUIDs has been received
"DATA",7115.5,8,1,2,0)
by the centralized VUID Server.
"DATA",7115.5,9,0)
ASSIGNING VUIDS TO FACILITY DATA^101^2
"DATA",7115.5,9,1,0)
^7115.51^2^2^3050310^^
"DATA",7115.5,9,1,1,0)
This status denotes that the centralized VUID Server is currently 
"DATA",7115.5,9,1,2,0)
assigning and/or calculating VUIDs for the facility's data.
"DATA",7115.5,10,0)
VUID DATA SENT TO FACILITY^103^2
"DATA",7115.5,10,1,0)
^^4^4^3050310^
"DATA",7115.5,10,1,1,0)
This status denotes that the centralized VUID Server has transmitted the 
"DATA",7115.5,10,1,2,0)
VUIDs for the facility's data to the facility.  Ultimately, this means 
"DATA",7115.5,10,1,3,0)
that the centralized VUID Server has honored the facility's request for 
"DATA",7115.5,10,1,4,0)
VUIDs.
"DATA",7115.5,11,0)
VUID DATA RECEIVED BY FACILITY^3^2
"DATA",7115.5,11,1,0)
^7115.51^2^2^3050310^^
"DATA",7115.5,11,1,1,0)
This status denotes that the VUIDs assigned by the centralized VUID 
"DATA",7115.5,11,1,2,0)
Server have been received by the facility.
"DATA",7115.5,13,0)
FACILITY SENT DATA TO SERVER^2^2
"DATA",7115.5,13,1,0)
^^3^3^3050310^
"DATA",7115.5,13,1,1,0)
This status denotes that data requiring VUID assignments has been
"DATA",7115.5,13,1,2,0)
transmitted from the facility to the centralized VUID Server for
"DATA",7115.5,13,1,3,0)
processing.
"DATA",7115.5,14,0)
COMPILING VUID DATA FOR FACILITY^102^2
"DATA",7115.5,14,1,0)
^^3^3^3050310^
"DATA",7115.5,14,1,1,0)
This status denotes that the centralized VUID Server has assigned and/or 
"DATA",7115.5,14,1,2,0)
calculated VUIDs for the facility's data and is now preparing it for
"DATA",7115.5,14,1,3,0)
transmission to the facility.
"DATA",7115.5,15,0)
ERROR^5^1
"DATA",7115.5,15,1,0)
^7115.51^3^3^3050311^^
"DATA",7115.5,15,1,1,0)
This status denotes that an error occurred sometime during the VUID 
"DATA",7115.5,15,1,2,0)
Implementation process.  A bulletin listing the error(s) will be 
"DATA",7115.5,15,1,3,0)
sent.
"DATA",7115.5,16,0)
ERROR OCCURRED AT FACILITY^5^2
"DATA",7115.5,16,1,0)
^^3^3^3050310^
"DATA",7115.5,16,1,1,0)
This status denotes that an error occurred at the facility sometime during
"DATA",7115.5,16,1,2,0)
the VUID Implementation process.  A bulletin listing the error(s) is
"DATA",7115.5,16,1,3,0)
generated at the facility.
"DATA",7115.5,17,0)
ERROR^104^2
"DATA",7115.5,17,1,0)
^^3^3^3050310^
"DATA",7115.5,17,1,1,0)
This status denotes that the centralized VUID Server encountered an error
"DATA",7115.5,17,1,2,0)
while honoring the facility's request for VUIDs.  A bulletin listing the
"DATA",7115.5,17,1,3,0)
error(s) will be sent.
"DATA",7115.5,18,0)
VUID IMPLEMENTATION COMPLETED^6^1
"DATA",7115.5,18,1,0)
^^2^2^3050314^
"DATA",7115.5,18,1,1,0)
This status denotes that the VUID Implementation process has been 
"DATA",7115.5,18,1,2,0)
completed.
"DATA",7115.5,19,0)
FACILITY AWAITING UPDATE FROM ERT^4^2
"DATA",7115.5,19,1,0)
^^3^3^3050310^
"DATA",7115.5,19,1,1,0)
This status denotes that the facility has received it's VUIDs from the
"DATA",7115.5,19,1,2,0)
centralized VUID Server, stored them in VistA, and has requested a
"DATA",7115.5,19,1,3,0)
complete update of the file from the VistA Enterprise Terminology Server.
"DATA",7115.5,21,0)
VUID IMPLEMENTATION COMPLETED AT FACILITY^6^2
"DATA",7115.5,21,1,0)
^^2^2^3050314^
"DATA",7115.5,21,1,1,0)
This status denotes that the VUID Implementation process for the facility
"DATA",7115.5,21,1,2,0)
has been completed.
"DATA",7115.6,1,0)
120.52~.01^120.52^^.01^^
"DATA",7115.6,2,0)
120.51~.01^120.51^^.01^^
"DATA",7115.6,3,0)
120.53~.01^120.53^^.01^^
"DATA",7115.6,4,0)
120.82~.01^120.82^^.01
"DATA",7115.6,5,0)
120.83~.01^120.83^^.01
"DATA",7115.6,6,0)
95.3~.01^95.3^^.01
"DATA",7115.6,7,0)
50.68~.01^50.68^^.01
"DATA",7115.6,8,0)
50.6~.01^50.6^^.01
"DATA",7115.6,9,0)
50.416~.01^50.416^^.01
"DATA",7115.6,10,0)
50.605~.01^50.605^^.01
"FIA",7115.1)
HDIS DOMAIN
"FIA",7115.1,0)
^HDIS(7115.1,
"FIA",7115.1,0,0)
7115.1
"FIA",7115.1,0,1)
y^y^f^^n^^y^o^n
"FIA",7115.1,0,10)

"FIA",7115.1,0,11)

"FIA",7115.1,0,"RLRO")

"FIA",7115.1,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7115.1,7115.1)
0
"FIA",7115.1,7115.11)
0
"FIA",7115.3)
HDIS XML TEMPLATE
"FIA",7115.3,0)
^HDIS(7115.3,
"FIA",7115.3,0,0)
7115.3
"FIA",7115.3,0,1)
y^y^f^^n^^y^o^n
"FIA",7115.3,0,10)

"FIA",7115.3,0,11)

"FIA",7115.3,0,"RLRO")

"FIA",7115.3,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7115.3,7115.3)
0
"FIA",7115.3,7115.34)
0
"FIA",7115.5)
HDIS STATUS
"FIA",7115.5,0)
^HDIS(7115.5,
"FIA",7115.5,0,0)
7115.5I
"FIA",7115.5,0,1)
y^y^f^^n^^y^o^n
"FIA",7115.5,0,10)

"FIA",7115.5,0,11)

"FIA",7115.5,0,"RLRO")

"FIA",7115.5,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7115.5,7115.5)
0
"FIA",7115.5,7115.51)
0
"FIA",7115.6)
HDIS FILE/FIELD
"FIA",7115.6,0)
^HDIS(7115.6,
"FIA",7115.6,0,0)
7115.6
"FIA",7115.6,0,1)
y^y^f^^n^^y^o^n
"FIA",7115.6,0,10)

"FIA",7115.6,0,11)

"FIA",7115.6,0,"RLRO")

"FIA",7115.6,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7115.6,7115.6)
0
"FIA",7118.11)
HDIS TERM/CONCEPT VUID ASSOCIATION
"FIA",7118.11,0)
^HDISV(7118.11,
"FIA",7118.11,0,0)
7118.11
"FIA",7118.11,0,1)
y^y^f^^^^n
"FIA",7118.11,0,10)

"FIA",7118.11,0,11)

"FIA",7118.11,0,"RLRO")

"FIA",7118.11,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7118.11,7118.11)
0
"FIA",7118.11,7118.12)
0
"FIA",7118.11,7118.13)
0
"FIA",7118.21)
HDIS SYSTEM
"FIA",7118.21,0)
^HDISF(7118.21,
"FIA",7118.21,0,0)
7118.21PI
"FIA",7118.21,0,1)
y^y^f^^^^n
"FIA",7118.21,0,10)

"FIA",7118.21,0,11)

"FIA",7118.21,0,"RLRO")

"FIA",7118.21,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7118.21,7118.21)
0
"FIA",7118.22)
HDIS FACILITY TERM/CONCEPT ASSOCIATION
"FIA",7118.22,0)
^HDISF(7118.22,
"FIA",7118.22,0,0)
7118.22P
"FIA",7118.22,0,1)
y^y^f^^^^n
"FIA",7118.22,0,10)

"FIA",7118.22,0,11)

"FIA",7118.22,0,"RLRO")

"FIA",7118.22,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7118.22,7118.22)
0
"FIA",7118.25)
HDIS VUID IMPLEMENTATION STATUS
"FIA",7118.25,0)
^HDISF(7118.25,
"FIA",7118.25,0,0)
7118.25P
"FIA",7118.25,0,1)
y^y^f^^^^n
"FIA",7118.25,0,10)

"FIA",7118.25,0,11)

"FIA",7118.25,0,"RLRO")

"FIA",7118.25,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7118.25,7118.25)
0
"FIA",7118.29)
HDIS PARAMETER
"FIA",7118.29,0)
^HDISF(7118.29,
"FIA",7118.29,0,0)
7118.29P
"FIA",7118.29,0,1)
y^y^f^^^^n
"FIA",7118.29,0,10)

"FIA",7118.29,0,11)

"FIA",7118.29,0,"RLRO")

"FIA",7118.29,0,"VR")
1.0^HEALTH DATA & INFORMATICS
"FIA",7118.29,7118.29)
0
"INIT")
POST^HDI1000A
"IX",7115.5,7115.5,"AC",0)
7115.5^AC^This cross-reference is by Status Type and Status Code.^R^^R^IR^I^7115.5^^^^^S
"IX",7115.5,7115.5,"AC",1)
S ^HDIS(7115.5,"AC",X(1),$E(X(2),1,30),DA)=""
"IX",7115.5,7115.5,"AC",2)
K ^HDIS(7115.5,"AC",X(1),$E(X(2),1,30),DA)
"IX",7115.5,7115.5,"AC",2.5)
K ^HDIS(7115.5,"AC")
"IX",7115.5,7115.5,"AC",11.1,0)
^.114IA^2^2
"IX",7115.5,7115.5,"AC",11.1,1,0)
1^F^7115.5^.03^^1^F
"IX",7115.5,7115.5,"AC",11.1,2,0)
2^F^7115.5^.02^30^2^F
"IX",7115.6,7115.6,"AFIL",0)
7115.6^AFIL^This cross-reference is by File Number and Field Number.^R^^R^IR^I^7115.6^^^^^S
"IX",7115.6,7115.6,"AFIL",1)
S ^HDIS(7115.6,"AFIL",$E(X(1),1,30),$E(X(2),1,30),DA)=""
"IX",7115.6,7115.6,"AFIL",2)
K ^HDIS(7115.6,"AFIL",$E(X(1),1,30),$E(X(2),1,30),DA)
"IX",7115.6,7115.6,"AFIL",2.5)
K ^HDIS(7115.6,"AFIL")
"IX",7115.6,7115.6,"AFIL",11.1,0)
^.114IA^2^2
"IX",7115.6,7115.6,"AFIL",11.1,1,0)
1^F^7115.6^.02^30^1^F
"IX",7115.6,7115.6,"AFIL",11.1,1,3)

"IX",7115.6,7115.6,"AFIL",11.1,2,0)
2^F^7115.6^.04^30^2^F
"IX",7115.6,7115.6,"AFIL",11.1,2,3)

"IX",7118.11,7118.11,"AC",0)
7118.11^AC^Whole file x-ref on File/Field^R^^F^IR^W^7118.13^^^^^S
"IX",7118.11,7118.11,"AC",.1,0)
^^11^11^3050118^
"IX",7118.11,7118.11,"AC",.1,1,0)
Resulting node is
"IX",7118.11,7118.11,"AC",.1,2,0)
 
"IX",7118.11,7118.11,"AC",.1,3,0)
  ^HDISV(7118.11,"AC",FileField,DA(1),DA)=""
"IX",7118.11,7118.11,"AC",.1,4,0)
 
"IX",7118.11,7118.11,"AC",.1,5,0)
where
"IX",7118.11,7118.11,"AC",.1,6,0)
 
"IX",7118.11,7118.11,"AC",.1,7,0)
  * FileField is a pointer to HDIS FILE/FIELD file (#7115.6)
"IX",7118.11,7118.11,"AC",.1,8,0)
  * DA(1) is the entry number in HDIS TERM/CONCEPT VUID
"IX",7118.11,7118.11,"AC",.1,9,0)
    ASSOCIATION (#7118.11)
"IX",7118.11,7118.11,"AC",.1,10,0)
  * DA is the entry number in FILE/FIELD multiple (subfile
"IX",7118.11,7118.11,"AC",.1,11,0)
    #7118.13)
"IX",7118.11,7118.11,"AC",1)
S ^HDISV(7118.11,"AC",X,DA(1),DA)=""
"IX",7118.11,7118.11,"AC",2)
K ^HDISV(7118.11,"AC",X,DA(1),DA)
"IX",7118.11,7118.11,"AC",2.5)
K ^HDISV(7118.11,"AC")
"IX",7118.11,7118.11,"AC",11.1,0)
^.114IA^1^1
"IX",7118.11,7118.11,"AC",11.1,1,0)
1^F^7118.13^.01^^1^F
"IX",7118.11,7118.11,"AC",11.1,1,3)

"IX",7118.21,7118.21,"ATYP",0)
7118.21^ATYP^This cross-reference is by Type and Facility.^R^^R^IR^I^7118.21^^^^^S
"IX",7118.21,7118.21,"ATYP",1)
S ^HDISF(7118.21,"ATYP",X(1),X(2),DA)=""
"IX",7118.21,7118.21,"ATYP",2)
K ^HDISF(7118.21,"ATYP",X(1),X(2),DA)
"IX",7118.21,7118.21,"ATYP",2.5)
K ^HDISF(7118.21,"ATYP")
"IX",7118.21,7118.21,"ATYP",11.1,0)
^.114IA^2^2
"IX",7118.21,7118.21,"ATYP",11.1,1,0)
1^F^7118.21^.03^^1^F
"IX",7118.21,7118.21,"ATYP",11.1,1,3)

"IX",7118.21,7118.21,"ATYP",11.1,2,0)
2^F^7118.21^.01^^2^F
"IX",7118.21,7118.21,"ATYP",11.1,2,3)

"IX",7118.22,7118.22,"AC",0)
7118.22^AC^Facility and File/Field record index^R^^R^IR^I^7118.22^^^^^S
"IX",7118.22,7118.22,"AC",1)
S ^HDISF(7118.22,"AC",$E(X(1),1,20),$E(X(2),1,20),DA)=""
"IX",7118.22,7118.22,"AC",2)
K ^HDISF(7118.22,"AC",$E(X(1),1,20),$E(X(2),1,20),DA)
"IX",7118.22,7118.22,"AC",2.5)
K ^HDISF(7118.22,"AC")
"IX",7118.22,7118.22,"AC",11.1,0)
^.114IA^2^2
"IX",7118.22,7118.22,"AC",11.1,1,0)
1^F^7118.22^.01^20^1^F
"IX",7118.22,7118.22,"AC",11.1,1,3)

"IX",7118.22,7118.22,"AC",11.1,2,0)
2^F^7118.22^.02^20^2^F
"IX",7118.22,7118.22,"AC",11.1,2,3)

"IX",7118.22,7118.22,"AS",0)
7118.22^AS^This cross-reference is by System,File/Field and Term/Concept.^R^^R^IR^I^7118.22^^^^^S
"IX",7118.22,7118.22,"AS",1)
S ^HDISF(7118.22,"AS",X(1),X(2),X(3),DA)=""
"IX",7118.22,7118.22,"AS",2)
K ^HDISF(7118.22,"AS",X(1),X(2),X(3),DA)
"IX",7118.22,7118.22,"AS",2.5)
K ^HDISF(7118.22,"AS")
"IX",7118.22,7118.22,"AS",11.1,0)
^.114IA^3^3
"IX",7118.22,7118.22,"AS",11.1,1,0)
1^F^7118.22^.01^^1^F
"IX",7118.22,7118.22,"AS",11.1,2,0)
2^F^7118.22^.02^^2^F
"IX",7118.22,7118.22,"AS",11.1,3,0)
3^F^7118.22^.04^^3^F
"IX",7118.25,7118.25,"AFAC",0)
7118.25^AFAC^This cross-reference is by Facility, File/Field, Status Date/Time and Status.^R^^R^IR^I^7118.25^^^^^S
"IX",7118.25,7118.25,"AFAC",1)
S ^HDISF(7118.25,"AFAC",X(1),X(2),X(4),X(3),DA)=""
"IX",7118.25,7118.25,"AFAC",2)
K ^HDISF(7118.25,"AFAC",X(1),X(2),X(4),X(3),DA)
"IX",7118.25,7118.25,"AFAC",2.5)
K ^HDISF(7118.25,"AFAC")
"IX",7118.25,7118.25,"AFAC",11.1,0)
^.114IA^4^4
"IX",7118.25,7118.25,"AFAC",11.1,1,0)
1^F^7118.25^.01^^1^F
"IX",7118.25,7118.25,"AFAC",11.1,2,0)
2^F^7118.25^.02^^2^F
"IX",7118.25,7118.25,"AFAC",11.1,3,0)
3^F^7118.25^.03^^4^F
"IX",7118.25,7118.25,"AFAC",11.1,4,0)
4^F^7118.25^.04^^3^F
"KRN",3.6,235,-1)
0^2
"KRN",3.6,235,0)
HDIS XML MSG PROCESS ERROR^ERROR(S) DURING MESSAGE PROCESSING
"KRN",3.6,235,1,0)
^3.61A^11^11^3050308^^^^
"KRN",3.6,235,1,1,0)
An error occurred when attempting to process an XML message that was sent
"KRN",3.6,235,1,2,0)
to an HDIS MailMan Server.  The message was not deleted and left in the 
"KRN",3.6,235,1,3,0)
server basket.
"KRN",3.6,235,1,4,0)
 
"KRN",3.6,235,1,5,0)
Message Number : |1|
"KRN",3.6,235,1,6,0)
Message Sender : |2|
"KRN",3.6,235,1,7,0)
Server Option  : |3|
"KRN",3.6,235,1,8,0)
 
"KRN",3.6,235,1,9,0)
 
"KRN",3.6,235,1,10,0)
Error(s)
"KRN",3.6,235,1,11,0)
========
"KRN",3.6,235,3,0)
^3.63^2^2^3050308^^^^
"KRN",3.6,235,3,1,0)
Bulletin is generated when a problem processing a received XML encoded 
"KRN",3.6,235,3,2,0)
message occurs.
"KRN",3.6,235,4,0)
^3.64A^3^3
"KRN",3.6,235,4,1,0)
1
"KRN",3.6,235,4,1,1,0)
^^1^1^3050105^
"KRN",3.6,235,4,1,1,1,0)
Message number (XMZ) of problem message
"KRN",3.6,235,4,2,0)
2
"KRN",3.6,235,4,2,1,0)
^^1^1^3050105^
"KRN",3.6,235,4,2,1,1,0)
Sender (XMFROM) of problem message
"KRN",3.6,235,4,3,0)
3
"KRN",3.6,235,4,3,1,0)
^3.65^1^1^3050308^^^^
"KRN",3.6,235,4,3,1,1,0)
Server option problem message was sent to
"KRN",3.6,236,-1)
0^1
"KRN",3.6,236,0)
HDIS ERRORS^HDIS Error has occurred^10^0
"KRN",3.6,236,1,0)
^3.61A^3^3^3050228^^^^
"KRN",3.6,236,1,1,0)
An error has occurred at |1|
"KRN",3.6,236,1,2,0)
On |2|
"KRN",3.6,236,1,3,0)
Error message: |3|
"KRN",3.6,236,3,0)
^3.63^1^1^3050228^^^^
"KRN",3.6,236,3,1,0)
Notification of an error occurring during HDIS VUID processing.
"KRN",3.6,236,4,0)
^3.64A^3^3
"KRN",3.6,236,4,1,0)
1
"KRN",3.6,236,4,1,1,0)
^^1^1^3050111^
"KRN",3.6,236,4,1,1,1,0)
Station Name and number.
"KRN",3.6,236,4,2,0)
2
"KRN",3.6,236,4,2,1,0)
^^1^1^3050111^
"KRN",3.6,236,4,2,1,1,0)
Date/time error occurred.
"KRN",3.6,236,4,3,0)
3
"KRN",3.6,236,4,3,1,0)
^3.65^1^1^3050228^
"KRN",3.6,236,4,3,1,1,0)
An Error has occurred at |1| On |2|. Error Message: |3|
"KRN",3.6,237,-1)
0^3
"KRN",3.6,237,0)
HDIS NOTIFY ERT^Site: |5|  File: |6| in |4| ready for ERT Update^10^1
"KRN",3.6,237,1,0)
^^3^3^3050311^
"KRN",3.6,237,1,1,0)
Data Standardization VUID processing at |1| (in the |4| account) for file |2| was completed on |3|.
"KRN",3.6,237,1,2,0)
 
"KRN",3.6,237,1,3,0)
Site needs full file update as soon as possible.
"KRN",3.6,237,3,0)
^3.63^1^1^3050311^^^^
"KRN",3.6,237,3,1,0)
Notifies ERT mailgroup that site needs file update for specific domain.
"KRN",3.6,237,4,0)
^3.64A^6^6
"KRN",3.6,237,4,1,0)
1
"KRN",3.6,237,4,1,1,0)
^3.65^1^1^3050302^^
"KRN",3.6,237,4,1,1,1,0)
Name of facility.
"KRN",3.6,237,4,2,0)
2
"KRN",3.6,237,4,2,1,0)
^3.65^1^1^3050302^^
"KRN",3.6,237,4,2,1,1,0)
File name and number being implemented.
"KRN",3.6,237,4,3,0)
3
"KRN",3.6,237,4,3,1,0)
^^1^1^3050228^
"KRN",3.6,237,4,3,1,1,0)
Date/time of VUID processing completion.
"KRN",3.6,237,4,4,0)
4
"KRN",3.6,237,4,4,1,0)
^^1^1^3050310^
"KRN",3.6,237,4,4,1,1,0)
Describes Test or Production account.
"KRN",3.6,237,4,5,0)
5
"KRN",3.6,237,4,5,1,0)
^^1^1^3050310^
"KRN",3.6,237,4,5,1,1,0)
Site number.
"KRN",3.6,237,4,6,0)
6
"KRN",3.6,237,4,6,1,0)
^3.65^1^1^3050311^^^
"KRN",3.6,237,4,6,1,1,0)
File Number
"KRN",3.6,238,-1)
0^4
"KRN",3.6,238,0)
HDIS NOTIFY HDR^Site: |5|, File: |6| in |4| ready for HDR Triggers^10^1
"KRN",3.6,238,1,0)
^^4^4^3050311^
"KRN",3.6,238,1,1,0)
Data Standardization VUID processing at |1| (in the |4| account) for file |2| was
"KRN",3.6,238,1,2,0)
completed on |3|. 
"KRN",3.6,238,1,3,0)
 
"KRN",3.6,238,1,4,0)
File is ready for activation of HDR Triggers.
"KRN",3.6,238,3,0)
^3.63^2^2^3050311^^^^
"KRN",3.6,238,3,1,0)
Used to notify HDR personnel that a file at a specific site is ready
"KRN",3.6,238,3,2,0)
for activation of the HDR Triggers.
"KRN",3.6,238,4,0)
^3.64A^6^6
"KRN",3.6,238,4,1,0)
1
"KRN",3.6,238,4,1,1,0)
^^1^1^3050310^
"KRN",3.6,238,4,1,1,1,0)
Name of facility as well as Mailman Domain.
"KRN",3.6,238,4,2,0)
2
"KRN",3.6,238,4,2,1,0)
^^1^1^3050310^
"KRN",3.6,238,4,2,1,1,0)
File name and number completed.
"KRN",3.6,238,4,3,0)
3
"KRN",3.6,238,4,3,1,0)
^3.65^1^1^3050310^^
"KRN",3.6,238,4,3,1,1,0)
Date and time of completion.
"KRN",3.6,238,4,4,0)
4
"KRN",3.6,238,4,4,1,0)
^3.65^1^1^3050311^^^^
"KRN",3.6,238,4,4,1,1,0)
Production or Test account.
"KRN",3.6,238,4,5,0)
5
"KRN",3.6,238,4,5,1,0)
^^1^1^3050311^
"KRN",3.6,238,4,5,1,1,0)
Site Number.
"KRN",3.6,238,4,6,0)
6
"KRN",3.6,238,4,6,1,0)
^^1^1^3050311^
"KRN",3.6,238,4,6,1,1,0)
File Number.
"KRN",3.8,2809,-1)
0^1
"KRN",3.8,2809,0)
HDIS ERRORS^PU^^^^0^
"KRN",3.8,2809,3)

"KRN",3.8,2809,6,0)
^3.812^1^1
"KRN",3.8,2809,6,1,0)
G.HDIS ERRORS@FORUM.VA.GOV
"KRN",3.8,2809,6,"B","G.HDIS ERRORS@FORUM.VA.GOV",1)

"KRN",3.8,2812,-1)
0^2
"KRN",3.8,2812,0)
HDIS ERT NOTIFICATION^PU^n^^^^
"KRN",3.8,2812,2,0)
^3.801^2^2^3050310^^^^
"KRN",3.8,2812,2,1,0)
Exchange mailgroup which will receive the ERT bulletins identifying 
"KRN",3.8,2812,2,2,0)
site ready for ERT file update.
"KRN",3.8,2812,3)

"KRN",3.8,2812,5,0)
^3.811P
"KRN",3.8,2812,6,0)
^3.812^1^1
"KRN",3.8,2812,6,1,0)
G.HDIS ERRORS@FORUM.VA.GOV
"KRN",3.8,2812,6,"B","G.HDIS ERRORS@FORUM.VA.GOV",1)

"KRN",3.8,2813,-1)
0^3
"KRN",3.8,2813,0)
HDIS HDR NOTIFICATION^PU^^^^^
"KRN",3.8,2813,2,0)
^^2^2^3050310^
"KRN",3.8,2813,2,1,0)
Used to notify HDR personnel that a file at a facility is ready to
"KRN",3.8,2813,2,2,0)
have the HDR Triggers turned on.
"KRN",3.8,2813,3)

"KRN",3.8,2813,6,0)
^3.812^^0
"KRN",19,14236,-1)
0^1
"KRN",19,14236,0)
HDIS-FACILITY-DATA-SERVER^HDIS Facility Data Server^^S^^^^^^^^HEALTH DATA & INFORMATICS
"KRN",19,14236,1,0)
^19.06^2^2^3050214^^^
"KRN",19,14236,1,1,0)
Server type option which will executed when Facility Data requiring VUID
"KRN",19,14236,1,2,0)
assignment is received.  Data will be contained in an XML document.
"KRN",19,14236,25)
XML^HDISVM00
"KRN",19,14236,220)
^Q^^^Y^N^^855
"KRN",19,14236,"U")
HDIS FACILITY DATA SERVER
"KRN",19,14237,-1)
0^2
"KRN",19,14237,0)
HDIS-STATUS-UPDATE-SERVER^HDIS Status Update Server^^S^^^^^^^^HEALTH DATA & INFORMATICS
"KRN",19,14237,1,0)
^19.06^7^7^3050214^^
"KRN",19,14237,1,1,0)
Server type option which will process the HDIS Status Updates sent by the
"KRN",19,14237,1,2,0)
facility whenever an action is done which results in the need to update
"KRN",19,14237,1,3,0)
the status.  For example, when HDIS receives a notification from the
"KRN",19,14237,1,4,0)
application developer patch that a specific file is ready for 
"KRN",19,14237,1,5,0)
standardization, HDIS prepares the file for transport and assignes a
"KRN",19,14237,1,6,0)
status to "Started".  That status would be sent to the central HDIS
"KRN",19,14237,1,7,0)
Server.
"KRN",19,14237,25)
XML^HDISVM00
"KRN",19,14237,220)
^Q^^^Y^N^^856
"KRN",19,14237,"U")
HDIS STATUS UPDATE SERVER
"MBREQ")
1
"ORD",2,3.6)
3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"ORD",2,3.6,0)
BULLETIN
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",556,-1)
1^1
"PKG",556,0)
HEALTH DATA & INFORMATICS^HDI^Data Standardization
"PKG",556,20,0)
^9.402P^^
"PKG",556,22,0)
^9.49I^1^1
"PKG",556,22,1,0)
1.0^3050426
"PKG",556,22,1,1,0)
^^1^1^3050426
"PKG",556,22,1,1,1,0)
Health Data & Informatics V1.0 package release.
"PKG",556,22,1,"PAH",0)
^9.4901^1^1
"PKG",556,22,1,"PAH",1,0)
1^3050311
"PKG",556,22,1,"PAH",1,1,0)
^^1^1^3050311
"PKG",556,22,1,"PAH",1,1,1,0)
Routine to import data to MDR.
"PKG",556,22,1,"PAH","B",1,1)

"PKG",556,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
34
"RTN","HDI1000A")
0^30^B33390472
"RTN","HDI1000A",1,0)
HDI1000A ;BPFO/JRP - HDI v1.0 POST-INSTALL ROUTINE;2/17/2005
"RTN","HDI1000A",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000A",3,0)
 ;
"RTN","HDI1000A",4,0)
POST ;Main entry point for post-install routine
"RTN","HDI1000A",5,0)
 ; Input: None
"RTN","HDI1000A",6,0)
 ;        All variables set by Kernel for KIDS post-installs
"RTN","HDI1000A",7,0)
 ;Output: None
"RTN","HDI1000A",8,0)
 N HDIMSG
"RTN","HDI1000A",9,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",10,0)
 S HDIMSG(2)="~~~~~~~~~~~~~~~~~~~~"
"RTN","HDI1000A",11,0)
 S HDIMSG(3)="Post-Installation (POST^HDI1000A) will now be run"
"RTN","HDI1000A",12,0)
 S HDIMSG(4)=" "
"RTN","HDI1000A",13,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",14,0)
 I '$$SERVERS^HDI1000B() D PSTHALT Q
"RTN","HDI1000A",15,0)
 I '$$ATTBUL^HDI1000B() D PSTHALT Q
"RTN","HDI1000A",16,0)
 I '$$ATTREM^HDI1000B() D PSTHALT Q
"RTN","HDI1000A",17,0)
 I '$$SYSPAR() D PSTHALT Q
"RTN","HDI1000A",18,0)
 I '$$VUID() D PSTHALT Q
"RTN","HDI1000A",19,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",20,0)
 S HDIMSG(2)="Post-Installation ran to completion"
"RTN","HDI1000A",21,0)
 S HDIMSG(3)="~~~~~~~~~~~~~~~~~~~~"
"RTN","HDI1000A",22,0)
 S HDIMSG(4)=" "
"RTN","HDI1000A",23,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",24,0)
 Q
"RTN","HDI1000A",25,0)
 ;
"RTN","HDI1000A",26,0)
PSTHALT ;Print post-install halted text
"RTN","HDI1000A",27,0)
 N HDIMSG
"RTN","HDI1000A",28,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",29,0)
 S HDIMSG(2)="*****"
"RTN","HDI1000A",30,0)
 S HDIMSG(3)="***** Post-installation has been halted"
"RTN","HDI1000A",31,0)
 S HDIMSG(4)="***** Please contact Enterprise VistA Support"
"RTN","HDI1000A",32,0)
 S HDIMSG(5)="*****"
"RTN","HDI1000A",33,0)
 S HDIMSG(6)=" "
"RTN","HDI1000A",34,0)
 D MES^XPDUTL(.HDIMSG)
"RTN","HDI1000A",35,0)
 Q
"RTN","HDI1000A",36,0)
 ;
"RTN","HDI1000A",37,0)
SYSPAR() ;Initialize HDIS System and HDIS Parameter files
"RTN","HDI1000A",38,0)
 ; Input: None
"RTN","HDI1000A",39,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDI1000A",40,0)
 ;        1 = Continue with post-install
"RTN","HDI1000A",41,0)
 N FACNUM,DOMAIN,SYSTYPE,X,SYSPTR,HDIMSG,PRAMPTR
"RTN","HDI1000A",42,0)
 ;Determine system information
"RTN","HDI1000A",43,0)
 S FACNUM=$$FACNUM^HDISVF01()
"RTN","HDI1000A",44,0)
 S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDI1000A",45,0)
 S SYSTYPE=$$PROD^XUPROD()
"RTN","HDI1000A",46,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",47,0)
 S HDIMSG(2)="The following information concerning this system has been"
"RTN","HDI1000A",48,0)
 S HDIMSG(3)="determined and will be used to initialize the HDIS SYSTEM"
"RTN","HDI1000A",49,0)
 S HDIMSG(4)="(#7118.21) and HDIS PARAMETER (#7118.29) files"
"RTN","HDI1000A",50,0)
 S HDIMSG(5)=" "
"RTN","HDI1000A",51,0)
 S HDIMSG(6)="  Facility Number: "_FACNUM
"RTN","HDI1000A",52,0)
 S HDIMSG(7)="   MailMan Domain: "_DOMAIN
"RTN","HDI1000A",53,0)
 S HDIMSG(8)="      System Type: "_$S(SYSTYPE:"Production",1:"Test")
"RTN","HDI1000A",54,0)
 S HDIMSG(9)=" "
"RTN","HDI1000A",55,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",56,0)
 ;Create entry in HDIS System file
"RTN","HDI1000A",57,0)
 D BMES^XPDUTL("Creating entry in HDIS SYSTEM file")
"RTN","HDI1000A",58,0)
 I '$$FINDSYS^HDISVF07(DOMAIN,FACNUM,SYSTYPE,1,.SYSPTR) D  Q 0
"RTN","HDI1000A",59,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000A",60,0)
 .S HDIMSG(2)="** Unable to create entry"
"RTN","HDI1000A",61,0)
 .S HDIMSG(3)="** Post-installation will be halted"
"RTN","HDI1000A",62,0)
 .S HDIMSG(4)="**"
"RTN","HDI1000A",63,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",64,0)
 D MES^XPDUTL("Entry number "_SYSPTR_" created")
"RTN","HDI1000A",65,0)
 ;Create entry in HDIS Parameter file
"RTN","HDI1000A",66,0)
 D BMES^XPDUTL("Creating entry in HDIS PARAMETER file")
"RTN","HDI1000A",67,0)
 S PRAMPTR=$$PARAMINI^HDISVF10(SYSPTR)
"RTN","HDI1000A",68,0)
 I 'PRAMPTR D  Q 0
"RTN","HDI1000A",69,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000A",70,0)
 .S HDIMSG(2)="** Unable to create entry"
"RTN","HDI1000A",71,0)
 .S HDIMSG(3)="** Post-installation will be halted"
"RTN","HDI1000A",72,0)
 .S HDIMSG(4)="**"
"RTN","HDI1000A",73,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",74,0)
 D MES^XPDUTL("Entry number "_PRAMPTR_" created")
"RTN","HDI1000A",75,0)
 ;Done if this is not FORUM
"RTN","HDI1000A",76,0)
 I DOMAIN'="FORUM.VA.GOV" Q 1
"RTN","HDI1000A",77,0)
 ;This is FORUM - make it a server
"RTN","HDI1000A",78,0)
 D BMES^XPDUTL("Making FORUM a server")
"RTN","HDI1000A",79,0)
 D SETTYPE^HDISVF02(2,SYSPTR)
"RTN","HDI1000A",80,0)
 I (+$$GETTYPE^HDISVF02(SYSPTR))'=2 D
"RTN","HDI1000A",81,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000A",82,0)
 .S HDIMSG(2)="** Unable to change system type to SERVER"
"RTN","HDI1000A",83,0)
 .S HDIMSG(3)="**"
"RTN","HDI1000A",84,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",85,0)
 ;Set Last Non-Standard VUID field
"RTN","HDI1000A",86,0)
 I '$$GETNSVL^HDISVF03(SYSPTR) S X=$$SET^HDISVF02(7118.29,51,PRAMPTR_",",4536403,1)
"RTN","HDI1000A",87,0)
 I '$$GETNSVL^HDISVF03(SYSPTR) D
"RTN","HDI1000A",88,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000A",89,0)
 .S HDIMSG(2)="** Unable to set LAST NON-STANDARD VUID field to 4536403"
"RTN","HDI1000A",90,0)
 .S HDIMSG(3)="**"
"RTN","HDI1000A",91,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",92,0)
 ;Set Ending Non-Standard VUID field
"RTN","HDI1000A",93,0)
 I '$$GETNSVE^HDISVF03(SYSPTR) S X=$$SET^HDISVF02(7118.29,52,PRAMPTR_",",4636403,1)
"RTN","HDI1000A",94,0)
 I '$$GETNSVE^HDISVF03(SYSPTR) D
"RTN","HDI1000A",95,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000A",96,0)
 .S HDIMSG(2)="** Unable to set ENDING NON-STANDARD VUID field to 4636403"
"RTN","HDI1000A",97,0)
 .S HDIMSG(3)="**"
"RTN","HDI1000A",98,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",99,0)
 ;Done
"RTN","HDI1000A",100,0)
 Q 1
"RTN","HDI1000A",101,0)
 ;
"RTN","HDI1000A",102,0)
VUID() ;Instantiate VUIDs for set of code fields in Vitals domain
"RTN","HDI1000A",103,0)
 ; Input: None
"RTN","HDI1000A",104,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDI1000A",105,0)
 ;        1 = Continue with post-install
"RTN","HDI1000A",106,0)
 N HDIMSG
"RTN","HDI1000A",107,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",108,0)
 S HDIMSG(2)="Seeding XTID VUID FOR SET OF CODES file (#8985.1) with Vitals data"
"RTN","HDI1000A",109,0)
 S HDIMSG(3)=" "
"RTN","HDI1000A",110,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",111,0)
 I '$$VUIDL("VITALS","HDI1000C") Q 0
"RTN","HDI1000A",112,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",113,0)
 S HDIMSG(2)="Seeding XTID VUID FOR SET OF CODES file (8985.1) with Allergy data"
"RTN","HDI1000A",114,0)
 S HDIMSG(3)=" "
"RTN","HDI1000A",115,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",116,0)
 I '$$VUIDL("ALLERGY","HDI1000C") Q 0
"RTN","HDI1000A",117,0)
 S HDIMSG(1)=" "
"RTN","HDI1000A",118,0)
 S HDIMSG(2)="Seeding XTID VUID FOR SET OF CODES file (8985.1) with Lab & Pharmacy data"
"RTN","HDI1000A",119,0)
 S HDIMSG(3)=" "
"RTN","HDI1000A",120,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",121,0)
 I '$$VUIDL("LABPHAR","HDI1000D") Q 0
"RTN","HDI1000A",122,0)
 I '$$VUIDL("LABPHAR","HDI1000E") Q 0
"RTN","HDI1000A",123,0)
 I '$$VUIDL("LABPHAR","HDI1000F") Q 0
"RTN","HDI1000A",124,0)
 I '$$VUIDL("LABPHAR","HDI1000G") Q 0
"RTN","HDI1000A",125,0)
 Q 1
"RTN","HDI1000A",126,0)
 ;
"RTN","HDI1000A",127,0)
VUIDL(TAG,ROUTINE) ;Instantiate VUIDs for set of code fields
"RTN","HDI1000A",128,0)
 ; Input: TAG - Line tag under which VUID data has been placed
"RTN","HDI1000A",129,0)
 ;        ROUTINE - Routine line tag is in
"RTN","HDI1000A",130,0)
 ;                  Leave blank if in this routine
"RTN","HDI1000A",131,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDI1000A",132,0)
 ;        1 = Continue with post-install
"RTN","HDI1000A",133,0)
 ; Notes: Data lines must be in the format
"RTN","HDI1000A",134,0)
 ;          File~Field~Code~VUID~Status~EffectiveDateTime
"RTN","HDI1000A",135,0)
 ;          (Status and EffectiveDateTime must be in internal format)
"RTN","HDI1000A",136,0)
 ;          (Default value for Status is 0 - Inactive)
"RTN","HDI1000A",137,0)
 ;          (Default value for EffectiveDateTime is NOW)
"RTN","HDI1000A",138,0)
 ;      : Call assumes that all input (TAG & ROUTINE) is valid
"RTN","HDI1000A",139,0)
 ;      : Call assumes that data lines are valid
"RTN","HDI1000A",140,0)
 ;        (i.e. no missing/bad data)
"RTN","HDI1000A",141,0)
 N OFFSET,DATA,FILE,FIELD,IREF,VUID,STAT,STDT,DONE,RESULT,HDIMSG
"RTN","HDI1000A",142,0)
 S ROUTINE=$G(ROUTINE)
"RTN","HDI1000A",143,0)
 S RESULT=1
"RTN","HDI1000A",144,0)
 S DONE=0
"RTN","HDI1000A",145,0)
 F OFFSET=1:1 D  Q:DONE
"RTN","HDI1000A",146,0)
 .S DATA=$S(ROUTINE="":$T(@TAG+OFFSET),1:$T(@TAG+OFFSET^@ROUTINE))
"RTN","HDI1000A",147,0)
 .S DATA=$P(DATA,";;",2)
"RTN","HDI1000A",148,0)
 .I DATA="" S DONE=1 Q
"RTN","HDI1000A",149,0)
 .S FILE=$P(DATA,"~",1)
"RTN","HDI1000A",150,0)
 .S FIELD=$P(DATA,"~",2)
"RTN","HDI1000A",151,0)
 .S IREF=$P(DATA,"~",3)
"RTN","HDI1000A",152,0)
 .S VUID=$P(DATA,"~",4)
"RTN","HDI1000A",153,0)
 .S STAT=$P(DATA,"~",5)
"RTN","HDI1000A",154,0)
 .I STAT="" S STAT=0
"RTN","HDI1000A",155,0)
 .S STDT=$P(DATA,"~",6)
"RTN","HDI1000A",156,0)
 .I STDT="" S STDT=$$NOW^XLFDT()
"RTN","HDI1000A",157,0)
 .I '$$STOREIT(FILE,FIELD,IREF,VUID,STAT,STDT) D
"RTN","HDI1000A",158,0)
 ..S HDIMSG(1)="**"
"RTN","HDI1000A",159,0)
 ..S HDIMSG(2)="** Unable to store VUID and/or status information for file"
"RTN","HDI1000A",160,0)
 ..S HDIMSG(3)="** "_FILE_", field "_FIELD_", and internal value "_IREF
"RTN","HDI1000A",161,0)
 ..S HDIMSG(4)="**"
"RTN","HDI1000A",162,0)
 ..D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000A",163,0)
 ..S RESULT=0
"RTN","HDI1000A",164,0)
 Q RESULT
"RTN","HDI1000A",165,0)
 ;
"RTN","HDI1000A",166,0)
STOREIT(FILE,FIELD,IREF,VUID,STAT,STDT) ;Store VUID info
"RTN","HDI1000A",167,0)
 ; Input : FILE - File number
"RTN","HDI1000A",168,0)
 ;         FIELD - Field number
"RTN","HDI1000A",169,0)
 ;         IREF - Internal reference
"RTN","HDI1000A",170,0)
 ;         VUID - VUID
"RTN","HDI1000A",171,0)
 ;         STAT - Status
"RTN","HDI1000A",172,0)
 ;                0 = Inacive (default)     1 = Active
"RTN","HDI1000A",173,0)
 ;         STDT - Status Date/Time (FileMan)
"RTN","HDI1000A",174,0)
 ;                (Defaults to NOW)
"RTN","HDI1000A",175,0)
 ;Output : 1 = Success
"RTN","HDI1000A",176,0)
 ;         0 = Failure
"RTN","HDI1000A",177,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDI1000A",178,0)
 ;       : Call will automatically inactivate terms when appropriate
"RTN","HDI1000A",179,0)
 ;
"RTN","HDI1000A",180,0)
 N TMP,MASTER
"RTN","HDI1000A",181,0)
 S STAT=+$G(STAT)
"RTN","HDI1000A",182,0)
 S STDT=+$G(STDT)
"RTN","HDI1000A",183,0)
 I 'STDT S STDT=$$NOW^XLFDT()
"RTN","HDI1000A",184,0)
 ;Store VUID (also sets master entry flag, if appropriate)
"RTN","HDI1000A",185,0)
 I '$$SETVUID^XTID(FILE,FIELD,IREF,VUID) Q 0
"RTN","HDI1000A",186,0)
 ;Inactivate non-master entries
"RTN","HDI1000A",187,0)
 I '$$GETMASTR^XTID(FILE,FIELD,IREF) D
"RTN","HDI1000A",188,0)
 .S STAT=0
"RTN","HDI1000A",189,0)
 .S STDT=$$NOW^XLFDT()
"RTN","HDI1000A",190,0)
 ;Store status
"RTN","HDI1000A",191,0)
 Q $$SETSTAT^XTID(FILE,FIELD,IREF,STAT,STDT)
"RTN","HDI1000B")
0^31^B44404844
"RTN","HDI1000B",1,0)
HDI1000B ;BPFO/JRP - HDI v1.0 POST-INSTALL ROUTINE (CONT);2/23/2005
"RTN","HDI1000B",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000B",3,0)
 ;
"RTN","HDI1000B",4,0)
SERVERS() ;Fix server options (they need resource devices)
"RTN","HDI1000B",5,0)
 ; Input: None
"RTN","HDI1000B",6,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDI1000B",7,0)
 ;        1 = Continue with post-install
"RTN","HDI1000B",8,0)
 N SRVR,RSRC,HDIMSG
"RTN","HDI1000B",9,0)
 ;Fix VUID Server option
"RTN","HDI1000B",10,0)
 S SRVR="HDIS-FACILITY-DATA-SERVER"
"RTN","HDI1000B",11,0)
 S RSRC="HDIS VUID RESOURCE DEVICE"
"RTN","HDI1000B",12,0)
 S HDIMSG(1)=" "
"RTN","HDI1000B",13,0)
 S HDIMSG(2)="Making "_RSRC_" the resource device"
"RTN","HDI1000B",14,0)
 S HDIMSG(3)="for "_SRVR
"RTN","HDI1000B",15,0)
 S HDIMSG(4)=" "
"RTN","HDI1000B",16,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",17,0)
 I '$$FIXSRVR(SRVR,RSRC) Q 0
"RTN","HDI1000B",18,0)
 ;Fix Status Server option
"RTN","HDI1000B",19,0)
 S SRVR="HDIS-STATUS-UPDATE-SERVER"
"RTN","HDI1000B",20,0)
 S RSRC="HDIS STATUS RESOURCE DEVICE"
"RTN","HDI1000B",21,0)
 S HDIMSG(1)=" "
"RTN","HDI1000B",22,0)
 S HDIMSG(2)="Making "_RSRC_" the resource device"
"RTN","HDI1000B",23,0)
 S HDIMSG(3)="for "_SRVR
"RTN","HDI1000B",24,0)
 S HDIMSG(4)=" "
"RTN","HDI1000B",25,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",26,0)
 I '$$FIXSRVR(SRVR,RSRC) Q 0
"RTN","HDI1000B",27,0)
 ;Done
"RTN","HDI1000B",28,0)
 Q 1
"RTN","HDI1000B",29,0)
 ;
"RTN","HDI1000B",30,0)
FIXSRVR(SRVR,RSRC) ;Fix server option
"RTN","HDI1000B",31,0)
 ; Input: SRVR - Name of server option
"RTN","HDI1000B",32,0)
 ;        RSRC - Name of resource device
"RTN","HDI1000B",33,0)
 ;Output: 1 = Success     0 = Error/bad input
"RTN","HDI1000B",34,0)
 ; Notes: Call assumes that all input have values
"RTN","HDI1000B",35,0)
 N HDIMSG,PTRSRVR,PTRRSRC
"RTN","HDI1000B",36,0)
 S SRVR=$G(SRVR)
"RTN","HDI1000B",37,0)
 S RSRC=$G(RSRC)
"RTN","HDI1000B",38,0)
 ;Find option
"RTN","HDI1000B",39,0)
 S PTRSRVR=$$PTROPT(SRVR)
"RTN","HDI1000B",40,0)
 I 'PTRSRVR D  Q 0
"RTN","HDI1000B",41,0)
 .I SRVR="" S SRVR="<null>"
"RTN","HDI1000B",42,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000B",43,0)
 .S HDIMSG(2)="** Unable to find "_SRVR_" in the OPTION file (#19)"
"RTN","HDI1000B",44,0)
 .S HDIMSG(3)="** Post-installation will be halted"
"RTN","HDI1000B",45,0)
 .S HDIMSG(4)="**"
"RTN","HDI1000B",46,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",47,0)
 ;Create/find resource device
"RTN","HDI1000B",48,0)
 S PTRRSRC=$$CR8RD(RSRC,1)
"RTN","HDI1000B",49,0)
 I 'PTRRSRC D  Q 0
"RTN","HDI1000B",50,0)
 .I RSRC="" S RSRC="<null>"
"RTN","HDI1000B",51,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000B",52,0)
 .S HDIMSG(2)="** Unable to find/create "_RSRC_" in the DEVICE file (#3.5)"
"RTN","HDI1000B",53,0)
 .S HDIMSG(3)="** Post-installation will be halted"
"RTN","HDI1000B",54,0)
 .S HDIMSG(4)="**"
"RTN","HDI1000B",55,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",56,0)
 ;Attach resource device to server
"RTN","HDI1000B",57,0)
 I '$$RD4OPT(PTRRSRC,PTRSRVR) D  Q 0
"RTN","HDI1000B",58,0)
 .S HDIMSG(1)="**"
"RTN","HDI1000B",59,0)
 .S HDIMSG(2)="** Unable to add "_RSRC_" as the resource"
"RTN","HDI1000B",60,0)
 .S HDIMSG(3)="** device for server option "_SRVR
"RTN","HDI1000B",61,0)
 .S HDIMSG(4)="** Post-installation will be halted"
"RTN","HDI1000B",62,0)
 .S HDIMSG(5)="**"
"RTN","HDI1000B",63,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",64,0)
 Q 1
"RTN","HDI1000B",65,0)
 ;
"RTN","HDI1000B",66,0)
CR8RD(NAME,SLOTS) ;Create resource device
"RTN","HDI1000B",67,0)
 ; Input: NAME - Name of resource device to create
"RTN","HDI1000B",68,0)
 ;        SLOTS - Number of resource slots (defaults to 1)
"RTN","HDI1000B",69,0)
 ;Output: Pointer to resource device (DEVICE file)
"RTN","HDI1000B",70,0)
 ;        0 will be returned on error/bad input
"RTN","HDI1000B",71,0)
 ; Notes: If the device NAME already exists, the pointer to that device
"RTN","HDI1000B",72,0)
 ;        will be returned.  The definition of the device will not be
"RTN","HDI1000B",73,0)
 ;        checked and/or modified.
"RTN","HDI1000B",74,0)
 S NAME=$G(NAME)
"RTN","HDI1000B",75,0)
 I NAME="" Q 0
"RTN","HDI1000B",76,0)
 S SLOTS=+$G(SLOTS)
"RTN","HDI1000B",77,0)
 I SLOTS<1 S SLOTS=1
"RTN","HDI1000B",78,0)
 N PTRDVC,HDIMSG
"RTN","HDI1000B",79,0)
 ;Device alread exist - return pointer to it
"RTN","HDI1000B",80,0)
 S PTRDVC=$$FIND1^DIC(3.5,"","X",NAME,"B","","HDIMSG")
"RTN","HDI1000B",81,0)
 I PTRDVC Q PTRDVC
"RTN","HDI1000B",82,0)
 ;Create resource device
"RTN","HDI1000B",83,0)
 S PTRDVC=+$$RES^XUDHSET(NAME,NAME,SLOTS)
"RTN","HDI1000B",84,0)
 I PTRDVC<1 S PTRDVC=0
"RTN","HDI1000B",85,0)
 Q PTRDVC
"RTN","HDI1000B",86,0)
 ;
"RTN","HDI1000B",87,0)
PTROPT(NAME) ;Get pointer to option
"RTN","HDI1000B",88,0)
 ; Input: NAME - Option name
"RTN","HDI1000B",89,0)
 ;Output: Pointer to OPTION file (#19)
"RTN","HDI1000B",90,0)
 ; Notes: 0 returned when option not found
"RTN","HDI1000B",91,0)
 N PTROPT,HDIMSG
"RTN","HDI1000B",92,0)
 S PTROPT=$$FIND1^DIC(19,"","X",$G(NAME),"B","","HDIMSG")
"RTN","HDI1000B",93,0)
 I $D(HDIMSG) Q 0
"RTN","HDI1000B",94,0)
 Q PTROPT
"RTN","HDI1000B",95,0)
 ;
"RTN","HDI1000B",96,0)
RD4OPT(PTRDVC,PTROPT) ;Attach resource device to option
"RTN","HDI1000B",97,0)
 ; Input: PTRDVC - Pointer to DEVICE file (#3.5)
"RTN","HDI1000B",98,0)
 ;        PTROPT - Pointer to OPTION file (#19)
"RTN","HDI1000B",99,0)
 ;Output: 1 = Success     0 = Error/Bad input
"RTN","HDI1000B",100,0)
 ; Notes: Call assumes all input exists and is valid
"RTN","HDI1000B",101,0)
 N HDIFDA,HDIMSG
"RTN","HDI1000B",102,0)
 S PTRDVC=+$G(PTRDVC)
"RTN","HDI1000B",103,0)
 I 'PTRDVC Q 0
"RTN","HDI1000B",104,0)
 S PTROPT=+$G(PTROPT)
"RTN","HDI1000B",105,0)
 I 'PTROPT Q 0
"RTN","HDI1000B",106,0)
 S HDIFDA(19,PTROPT_",",227)=PTRDVC
"RTN","HDI1000B",107,0)
 D FILE^DIE("","HDIFDA","HDIMSG")
"RTN","HDI1000B",108,0)
 I $D(HDIMSG) Q 0
"RTN","HDI1000B",109,0)
 Q 1
"RTN","HDI1000B",110,0)
 ;
"RTN","HDI1000B",111,0)
ATTBUL() ;Attach HDIS Mail Groups to HDIS Bulletins
"RTN","HDI1000B",112,0)
 N HDISBIEN,HDISBNM,HDISERRF,HDISFDA,HDISGIEN,HDISGNM,HDISLNE,HDISMSG,HDISTXT
"RTN","HDI1000B",113,0)
 K HDIMSG
"RTN","HDI1000B",114,0)
 D BMES^XPDUTL("Attaching HDIS Mail Groups to HDIS Bulletins")
"RTN","HDI1000B",115,0)
 F HDISLNE=1:1 S HDISTXT=$P($T(BULGRP+HDISLNE),";;",2) Q:HDISTXT="END"!($G(HDISERRF))  D
"RTN","HDI1000B",116,0)
 . S HDISBNM=$P(HDISTXT,"^",1)
"RTN","HDI1000B",117,0)
 . S HDISBIEN=$$FIND1^DIC(3.6,"","X",HDISBNM,"","","")
"RTN","HDI1000B",118,0)
 . S HDISGNM=$P(HDISTXT,"^",2)
"RTN","HDI1000B",119,0)
 . S HDISGIEN=$$FIND1^DIC(3.8,"","X",HDISGNM,"","","")
"RTN","HDI1000B",120,0)
 . ;If Bulletin or Mail Group not found, error
"RTN","HDI1000B",121,0)
 . I HDISBIEN'>0!(HDISGIEN'>0) D
"RTN","HDI1000B",122,0)
 . . S HDIMSG(1)="**"
"RTN","HDI1000B",123,0)
 . . S HDIMSG(2)="** Bulletin "_HDISBNM_" or Mail Group "_HDISGNM_" not found"
"RTN","HDI1000B",124,0)
 . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",125,0)
 . . S HDISERRF=1
"RTN","HDI1000B",126,0)
 . ELSE  D
"RTN","HDI1000B",127,0)
 . . ;Attach Mail Group to Bulletin
"RTN","HDI1000B",128,0)
 . . N HDISFDA,HDISIEN,HDISMSG
"RTN","HDI1000B",129,0)
 . . S HDISFDA(3.62,"?+2,"_HDISBIEN_",",.01)=HDISGIEN
"RTN","HDI1000B",130,0)
 . . D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDI1000B",131,0)
 . . ;Check for error
"RTN","HDI1000B",132,0)
 . . I $D(HDISMSG("DIERR")) D
"RTN","HDI1000B",133,0)
 . . . S HDIMSG(1)="**"
"RTN","HDI1000B",134,0)
 . . . S HDIMSG(2)="** Unable to attach "_HDISGNM_" to "_HDISBNM
"RTN","HDI1000B",135,0)
 . . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",136,0)
 . . . S HDISERRF=1
"RTN","HDI1000B",137,0)
 . . ELSE  D
"RTN","HDI1000B",138,0)
 . . . S HDIMSG(1)=" "
"RTN","HDI1000B",139,0)
 . . . S HDIMSG(2)=".."_HDISGNM_" Mail Group"_$S($G(HDISIEN(2,0))="?":" already",1:"")_" attached to "_HDISBNM_" Bulletin"
"RTN","HDI1000B",140,0)
 . . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",141,0)
 ;Check for error
"RTN","HDI1000B",142,0)
 I $G(HDISERRF) D
"RTN","HDI1000B",143,0)
 . S HDIMSG(1)="** Post-installation will be halted"
"RTN","HDI1000B",144,0)
 . S HDIMSG(2)="**"
"RTN","HDI1000B",145,0)
 . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",146,0)
 Q +$S($G(HDISERRF):0,1:1)
"RTN","HDI1000B",147,0)
 ;
"RTN","HDI1000B",148,0)
BULGRP ;Bulletin Name^Mail Group Name
"RTN","HDI1000B",149,0)
 ;;HDIS ERRORS^HDIS ERRORS
"RTN","HDI1000B",150,0)
 ;;HDIS NOTIFY ERT^HDIS ERT NOTIFICATION
"RTN","HDI1000B",151,0)
 ;;HDIS NOTIFY HDR^HDIS HDR NOTIFICATION
"RTN","HDI1000B",152,0)
 ;;HDIS XML MSG PROCESS ERROR^HDIS ERRORS
"RTN","HDI1000B",153,0)
 ;;END
"RTN","HDI1000B",154,0)
 ;
"RTN","HDI1000B",155,0)
ATTREM() ;Attach HDIS Remote Members to HDIS Mail Groups
"RTN","HDI1000B",156,0)
 N HDISERRF,HDISFDA,HDISGIEN,HDISGNM,HDISLNE,HDISMSG,HDISRNM,HDISTXT
"RTN","HDI1000B",157,0)
 K HDIMSG
"RTN","HDI1000B",158,0)
 D BMES^XPDUTL("Attaching HDIS Remote Members to HDIS Mail Groups")
"RTN","HDI1000B",159,0)
 F HDISLNE=1:1 S HDISTXT=$P($T(REMMEM+HDISLNE),";;",2) Q:HDISTXT="END"!($G(HDISERRF))  D
"RTN","HDI1000B",160,0)
 . S HDISGNM=$P(HDISTXT,"^",1)
"RTN","HDI1000B",161,0)
 . S HDISGIEN=$$FIND1^DIC(3.8,"","X",HDISGNM,"","","")
"RTN","HDI1000B",162,0)
 . S HDISRNM=$P(HDISTXT,"^",2)
"RTN","HDI1000B",163,0)
 . ;If Mail Group not found, error
"RTN","HDI1000B",164,0)
 . I HDISGIEN'>0 D
"RTN","HDI1000B",165,0)
 . . S HDIMSG(1)="**"
"RTN","HDI1000B",166,0)
 . . S HDIMSG(2)="** Mail Group "_HDISGNM_" not found"
"RTN","HDI1000B",167,0)
 . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",168,0)
 . . S HDISERRF=1
"RTN","HDI1000B",169,0)
 . ELSE  D
"RTN","HDI1000B",170,0)
 . . ;Attach Remote Member to Mail Group
"RTN","HDI1000B",171,0)
 . . N HDISFDA,HDISIEN,HDISMSG
"RTN","HDI1000B",172,0)
 . . S HDISFDA(3.812,"?+2,"_HDISGIEN_",",.01)=HDISRNM
"RTN","HDI1000B",173,0)
 . . D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDI1000B",174,0)
 . . ;Check for error
"RTN","HDI1000B",175,0)
 . . I $D(HDISMSG("DIERR")) D
"RTN","HDI1000B",176,0)
 . . . S HDIMSG(1)="**"
"RTN","HDI1000B",177,0)
 . . . S HDIMSG(2)="** Unable to attach "_HDISRNM_" to "_HDISGNM
"RTN","HDI1000B",178,0)
 . . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",179,0)
 . . . S HDISERRF=1
"RTN","HDI1000B",180,0)
 . . ELSE  D
"RTN","HDI1000B",181,0)
 . . . S HDIMSG(1)=" "
"RTN","HDI1000B",182,0)
 . . . S HDIMSG(2)=".."_HDISRNM_$S($G(HDISIEN(2,0))="?":" already",1:"")_" attached to "_HDISGNM
"RTN","HDI1000B",183,0)
 . . . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",184,0)
 ;Check for error
"RTN","HDI1000B",185,0)
 I $G(HDISERRF) D
"RTN","HDI1000B",186,0)
 . S HDIMSG(1)="** Post-installation will be halted"
"RTN","HDI1000B",187,0)
 . S HDIMSG(2)="**"
"RTN","HDI1000B",188,0)
 . D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1000B",189,0)
 Q +$S($G(HDISERRF):0,1:1)
"RTN","HDI1000B",190,0)
 ;
"RTN","HDI1000B",191,0)
REMMEM ;Mail Group Name^Remote Member
"RTN","HDI1000B",192,0)
 ;;HDIS ERRORS^G.HDIS ERRORS@FORUM.VA.GOV
"RTN","HDI1000B",193,0)
 ;;HDIS ERT NOTIFICATION^G.HDIS ERRORS@FORUM.VA.GOV
"RTN","HDI1000B",194,0)
 ;;HDIS ERT NOTIFICATION^G.HDIS ERT NOTIFICATION@FORUM.VA.GOV
"RTN","HDI1000B",195,0)
 ;;HDIS HDR NOTIFICATION^G.HDIS HDR NOTIFICATION@FORUM.VA.GOV
"RTN","HDI1000B",196,0)
 ;;END
"RTN","HDI1000C")
0^32^B1203100
"RTN","HDI1000C",1,0)
HDI1000C ;BPFO/JRP - HDI v1.0 POST-INSTALL DATA;4/19/2005
"RTN","HDI1000C",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000C",3,0)
 ;
"RTN","HDI1000C",4,0)
VITALS ;VUIDs for Vitals domain
"RTN","HDI1000C",5,0)
 ;;120.5~2~1~4500633~1~
"RTN","HDI1000C",6,0)
 ;;120.506~.01~1~4500625~1~
"RTN","HDI1000C",7,0)
 ;;120.506~.01~2~4500627~1~
"RTN","HDI1000C",8,0)
 ;;120.506~.01~3~4500626~1~
"RTN","HDI1000C",9,0)
 ;;120.506~.01~4~4500628~1~
"RTN","HDI1000C",10,0)
 ;;120.51~3~0~4500630~1~
"RTN","HDI1000C",11,0)
 ;;120.51~3~1~4500633~1~
"RTN","HDI1000C",12,0)
 ;;
"RTN","HDI1000C",13,0)
ALLERGY ;VUIDs for Allergies domain
"RTN","HDI1000C",14,0)
 ;;120.8~6~h~4500975~1~
"RTN","HDI1000C",15,0)
 ;;120.8~6~o~4500978~1~
"RTN","HDI1000C",16,0)
 ;;120.8~7~n~4500630~1~
"RTN","HDI1000C",17,0)
 ;;120.8~7~y~4500633~1~
"RTN","HDI1000C",18,0)
 ;;120.8~15~0~4500630~1~
"RTN","HDI1000C",19,0)
 ;;120.8~15~1~4500633~1~
"RTN","HDI1000C",20,0)
 ;;120.8~17~P~4500979~1~
"RTN","HDI1000C",21,0)
 ;;120.8~17~U~4500980~1~
"RTN","HDI1000C",22,0)
 ;;120.8~19~0~4500630~1~
"RTN","HDI1000C",23,0)
 ;;120.8~19~1~4500633~1~
"RTN","HDI1000C",24,0)
 ;;120.8~22~1~4500633~1~
"RTN","HDI1000C",25,0)
 ;;120.82~2~1~4500976~1~
"RTN","HDI1000C",26,0)
 ;;120.826~1.5~E~4500974~1~
"RTN","HDI1000C",27,0)
 ;;120.826~1.5~O~4500978~1~
"RTN","HDI1000C",28,0)
 ;;120.826~1.5~V~4500981~1~
"RTN","HDI1000C",29,0)
 ;;120.83~1~1~4500977~1~
"RTN","HDI1000C",30,0)
 ;;
"RTN","HDI1000D")
0^33^B49241106
"RTN","HDI1000D",1,0)
HDI1000D ;BPFO/JRP - HDI v1.0 POST-INSTALL DATA;4/19/2005
"RTN","HDI1000D",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000D",3,0)
 ;
"RTN","HDI1000D",4,0)
LABPHAR ;VUIDs for Lab & Pharmacy domain
"RTN","HDI1000D",5,0)
 ;;63.04~699~Y~4500984~1
"RTN","HDI1000D",6,0)
 ;;50~17.6~1~4500633~1
"RTN","HDI1000D",7,0)
 ;;50~28~0~4500630~1
"RTN","HDI1000D",8,0)
 ;;50~28~1~4500633~1
"RTN","HDI1000D",9,0)
 ;;50~29~0~4500630~1
"RTN","HDI1000D",10,0)
 ;;50~29~1~4500633~1
"RTN","HDI1000D",11,0)
 ;;50~51~1~4500796~1
"RTN","HDI1000D",12,0)
 ;;50~52~1~4500932~1
"RTN","HDI1000D",13,0)
 ;;50~62.03~R~4500737~1
"RTN","HDI1000D",14,0)
 ;;50~62.03~OC~4500828~1
"RTN","HDI1000D",15,0)
 ;;50~62.03~O~4500829~1
"RTN","HDI1000D",16,0)
 ;;50~62.03~P~4500859~1
"RTN","HDI1000D",17,0)
 ;;50~200~0~4500630~1
"RTN","HDI1000D",18,0)
 ;;50~200~1~4500633~1
"RTN","HDI1000D",19,0)
 ;;50~200.1~5~4500744~1
"RTN","HDI1000D",20,0)
 ;;50~200.1~7~4500767~1
"RTN","HDI1000D",21,0)
 ;;50~200.1~2~4500774~1
"RTN","HDI1000D",22,0)
 ;;50~200.1~3~4500780~1
"RTN","HDI1000D",23,0)
 ;;50~200.1~8~4500782~1
"RTN","HDI1000D",24,0)
 ;;50~200.1~4~4500783~1
"RTN","HDI1000D",25,0)
 ;;50~200.1~1~4500788~1
"RTN","HDI1000D",26,0)
 ;;50~200.1~9~4500789~1
"RTN","HDI1000D",27,0)
 ;;50~200.1~6~4500927~1
"RTN","HDI1000D",28,0)
 ;;50~201~0~4500630~1
"RTN","HDI1000D",29,0)
 ;;50~201~1~4500633~1
"RTN","HDI1000D",30,0)
 ;;50~213~0~4500630~1
"RTN","HDI1000D",31,0)
 ;;50~213~1~4500633~1
"RTN","HDI1000D",32,0)
 ;;50~301~0~4500731~1
"RTN","HDI1000D",33,0)
 ;;50~301~1~4500732~1
"RTN","HDI1000D",34,0)
 ;;50~301~2~4500733~1
"RTN","HDI1000D",35,0)
 ;;50~301~3~4500734~1
"RTN","HDI1000D",36,0)
 ;;50.02~3~2~4500666~1
"RTN","HDI1000D",37,0)
 ;;50.02~3~1~4500934~1
"RTN","HDI1000D",38,0)
 ;;50.0214~1~E~4500940~1
"RTN","HDI1000D",39,0)
 ;;50.03~0.06~0~4500630~1
"RTN","HDI1000D",40,0)
 ;;50.03~0.06~1~4500633~1
"RTN","HDI1000D",41,0)
 ;;50.0904~1~IO~4500677~1
"RTN","HDI1000D",42,0)
 ;;50.0904~1~OI~4500677~1
"RTN","HDI1000D",43,0)
 ;;50.0904~1~I~4500760~1
"RTN","HDI1000D",44,0)
 ;;50.0904~1~O~4500836~1
"RTN","HDI1000D",45,0)
 ;;50.1~1~C~4500691~1
"RTN","HDI1000D",46,0)
 ;;50.1~1~D~4500712~1
"RTN","HDI1000D",47,0)
 ;;50.1~1~1~4500863~1
"RTN","HDI1000D",48,0)
 ;;50.1~1~0~4500918~1
"RTN","HDI1000D",49,0)
 ;;50.605~3~0~4500777~1
"RTN","HDI1000D",50,0)
 ;;50.605~3~1~4500787~1
"RTN","HDI1000D",51,0)
 ;;50.605~3~2~4500910~1
"RTN","HDI1000D",52,0)
 ;;50.67~10~O~4500838~1
"RTN","HDI1000D",53,0)
 ;;50.67~10~R~4500857~1
"RTN","HDI1000D",54,0)
 ;;50.68~7~0~4500630~1
"RTN","HDI1000D",55,0)
 ;;50.68~7~1~4500633~1
"RTN","HDI1000D",56,0)
 ;;50.68~17~0~4500630~1
"RTN","HDI1000D",57,0)
 ;;50.68~17~1~4500633~1
"RTN","HDI1000D",58,0)
 ;;50.68~19~1~4500890~1
"RTN","HDI1000D",59,0)
 ;;50.68~19~2~4500891~1
"RTN","HDI1000D",60,0)
 ;;50.68~19~2n~4500892~1
"RTN","HDI1000D",61,0)
 ;;50.68~19~3~4500893~1
"RTN","HDI1000D",62,0)
 ;;50.68~19~3n~4500894~1
"RTN","HDI1000D",63,0)
 ;;50.68~19~4~4500895~1
"RTN","HDI1000D",64,0)
 ;;50.68~19~5~4500896~1
"RTN","HDI1000D",65,0)
 ;;50.68~19~0~4500929~1
"RTN","HDI1000D",66,0)
 ;;50.68~20~M~4500794~1
"RTN","HDI1000D",67,0)
 ;;50.68~20~S~4500906~1
"RTN","HDI1000D",68,0)
 ;;50.68~23~1~4500633~1
"RTN","HDI1000D",69,0)
 ;;52~10.1~0~4500630~1
"RTN","HDI1000D",70,0)
 ;;52~10.1~1~4500633~1
"RTN","HDI1000D",71,0)
 ;;52~10.3~2~4500724~1
"RTN","HDI1000D",72,0)
 ;;52~10.3~1~4500831~1
"RTN","HDI1000D",73,0)
 ;;52~11~M~4500776~1
"RTN","HDI1000D",74,0)
 ;;52~11~W~4500936~1
"RTN","HDI1000D",75,0)
 ;;52~32.2~1~4500875~1
"RTN","HDI1000D",76,0)
 ;;52~34.1~1~4500633~1
"RTN","HDI1000D",77,0)
 ;;52~36~1~4500670~1
"RTN","HDI1000D",78,0)
 ;;52~41~0~4500630~1
"RTN","HDI1000D",79,0)
 ;;52~41~1~4500633~1
"RTN","HDI1000D",80,0)
 ;;52~42~0~4500630~1
"RTN","HDI1000D",81,0)
 ;;52~42~1~4500633~1
"RTN","HDI1000D",82,0)
 ;;52~99~5~4500664~1
"RTN","HDI1000D",83,0)
 ;;52~99~6~4500717~1
"RTN","HDI1000D",84,0)
 ;;52~99~2~4500718~1
"RTN","HDI1000D",85,0)
 ;;52~99~1~4500762~1
"RTN","HDI1000D",86,0)
 ;;52~99~99~4500835~1
"RTN","HDI1000D",87,0)
 ;;52~99~3~4500843~1
"RTN","HDI1000D",88,0)
 ;;52~99~4~4500846~1
"RTN","HDI1000D",89,0)
 ;;52~100~0~4500659~1
"RTN","HDI1000D",90,0)
 ;;52~100~13~4500698~1
"RTN","HDI1000D",91,0)
 ;;52~100~12~4500704~1
"RTN","HDI1000D",92,0)
 ;;52~100~15~4500705~1
"RTN","HDI1000D",93,0)
 ;;52~100~14~4500706~1
"RTN","HDI1000D",94,0)
 ;;52~100~10~4500710~1
"RTN","HDI1000D",95,0)
 ;;52~100~4~4500716~1
"RTN","HDI1000D",96,0)
 ;;52~100~11~4500725~1
"RTN","HDI1000D",97,0)
 ;;52~100~3~4500752~1
"RTN","HDI1000D",98,0)
 ;;52~100~1~4500817~1
"RTN","HDI1000D",99,0)
 ;;52~100~16~4500861~1
"RTN","HDI1000D",100,0)
 ;;52~100~2~4500869~1
"RTN","HDI1000D",101,0)
 ;;52~100~5~4500913~1
"RTN","HDI1000D",102,0)
 ;;52~111~1~4500633~1
"RTN","HDI1000D",103,0)
 ;;52~116~0~4500630~1
"RTN","HDI1000D",104,0)
 ;;52~116~1~4500633~1
"RTN","HDI1000D",105,0)
 ;;52~117~0~4500630~1
"RTN","HDI1000D",106,0)
 ;;52~117~1~4500633~1
"RTN","HDI1000D",107,0)
 ;;52~118~0~4500630~1
"RTN","HDI1000D",108,0)
 ;;52~118~1~4500633~1
"RTN","HDI1000D",109,0)
 ;;52~119~0~4500630~1
"RTN","HDI1000D",110,0)
 ;;52~119~1~4500633~1
"RTN","HDI1000D",111,0)
 ;;52~120~0~4500630~1
"RTN","HDI1000D",112,0)
 ;;52~120~1~4500633~1
"RTN","HDI1000D",113,0)
 ;;52~121~0~4500630~1
"RTN","HDI1000D",114,0)
 ;;52~121~1~4500633~1
"RTN","HDI1000D",115,0)
 ;;52~122~0~4500630~1
"RTN","HDI1000D",116,0)
 ;;52~122~1~4500633~1
"RTN","HDI1000D",117,0)
 ;;52~201~0~4500630~1
"RTN","HDI1000D",118,0)
 ;;52~201~1~4500633~1
"RTN","HDI1000D",119,0)
 ;;52~310~0~4500630~1
"RTN","HDI1000D",120,0)
 ;;52~310~1~4500633~1
"RTN","HDI1000D",121,0)
 ;;52.01~3~1~4500707~1
"RTN","HDI1000D",122,0)
 ;;52.01~3~3~4500821~1
"RTN","HDI1000D",123,0)
 ;;52.01~3~2~4500880~1
"RTN","HDI1000D",124,0)
 ;;52.01~3~0~4500919~1
"RTN","HDI1000D",125,0)
 ;;52.01~6~N~4500630~1
"RTN","HDI1000D",126,0)
 ;;52.01~6~Y~4500633~1
"RTN","HDI1000D",127,0)
 ;;52.0107~1~A~4500668~1
"RTN","HDI1000D",128,0)
 ;;52.0107~1~I~4500753~1
"RTN","HDI1000D",129,0)
 ;;52.0107~1~C~4500872~1
"RTN","HDI1000D",130,0)
 ;;52.0107~1~R~4500876~1
"RTN","HDI1000D",131,0)
 ;;52.0107~1~E~4500888~1
"RTN","HDI1000D",132,0)
 ;;52.0113~5~A~4500667~1
"RTN","HDI1000D",133,0)
 ;;52.0113~5~E~4500723~1
"RTN","HDI1000D",134,0)
 ;;52.0113~5~T~4500916~1
"RTN","HDI1000D",135,0)
 ;;52.032~4~2~4500713~1
"RTN","HDI1000D",136,0)
 ;;52.032~4~1~4500714~1
"RTN","HDI1000D",137,0)
 ;;52.1~2~M~4500776~1
"RTN","HDI1000D",138,0)
 ;;52.1~2~W~4500936~1
"RTN","HDI1000D",139,0)
 ;;52.2~0.02~M~4500776~1
"RTN","HDI1000D",140,0)
 ;;52.2~0.02~W~4500936~1
"RTN","HDI1000D",141,0)
 ;;52.3~0.02~D~4500698~1
"RTN","HDI1000D",142,0)
 ;;52.3~0.02~C~4500704~1
"RTN","HDI1000D",143,0)
 ;;52.3~0.02~A~4500715~1
"RTN","HDI1000D",144,0)
 ;;52.3~0.02~E~4500940~1
"RTN","HDI1000D",145,0)
 ;;52.3~0.02~H~4500752~1
"RTN","HDI1000D",146,0)
 ;;52.3~0.02~X~4500763~1
"RTN","HDI1000D",147,0)
 ;;52.3~0.02~V~4500765~1
"RTN","HDI1000D",148,0)
 ;;52.3~0.02~P~4500841~1
"RTN","HDI1000D",149,0)
 ;;52.3~0.02~G~4500842~1
"RTN","HDI1000D",150,0)
 ;;52.3~0.02~K~4500847~1
"RTN","HDI1000D",151,0)
 ;;52.3~0.02~B~4500860~1
"RTN","HDI1000D",152,0)
 ;;52.3~0.02~R~4500871~1
"RTN","HDI1000D",153,0)
 ;;52.3~0.02~L~4500873~1
"RTN","HDI1000D",154,0)
 ;;52.3~0.02~W~4500874~1
"RTN","HDI1000D",155,0)
 ;;52.3~0.02~I~4500881~1
"RTN","HDI1000D",156,0)
 ;;52.3~0.02~S~4500913~1
"RTN","HDI1000D",157,0)
 ;;52.3~0.02~U~4500926~1
"RTN","HDI1000D",158,0)
 ;;60~3~B~4500679~1
"RTN","HDI1000D",159,0)
 ;;60~3~I~4500761~1
"RTN","HDI1000D",160,0)
 ;;60~3~N~4500803~1
"RTN","HDI1000D",161,0)
 ;;60~3~O~4500837~1
"RTN","HDI1000D",162,0)
 ;;60~4~AU~4500672~1
"RTN","HDI1000D",163,0)
 ;;60~4~BB~4500676~1
"RTN","HDI1000D",164,0)
 ;;60~4~CH~4500680~1
"RTN","HDI1000D",165,0)
 ;;60~4~CY~4500695~1
"RTN","HDI1000D",166,0)
 ;;60~4~EM~4500720~1
"RTN","HDI1000D",167,0)
 ;;60~4~MI~4500784~1
"RTN","HDI1000D",168,0)
 ;;60~4~SP~4500912~1
"RTN","HDI1000D",169,0)
 ;;60~4~WK~4500938~1
"RTN","HDI1000D",170,0)
 ;;60~7~0~4500630~1
"RTN","HDI1000D",171,0)
 ;;60~7~1~4500633~1
"RTN","HDI1000D",172,0)
 ;;60~8~0~4500630~1
"RTN","HDI1000D",173,0)
 ;;60~8~1~4500633~1
"RTN","HDI1000D",174,0)
 ;;60~10~0~4500630~1
"RTN","HDI1000D",175,0)
 ;;60~10~1~4500633~1
"RTN","HDI1000D",176,0)
 ;;60~15~1~4500633~1
"RTN","HDI1000D",177,0)
 ;;60~64.2~0~4500630~1
"RTN","HDI1000D",178,0)
 ;;60~64.2~1~4500633~1
"RTN","HDI1000D",179,0)
 ;;60~501~1~4500633~1
"RTN","HDI1000D",180,0)
 ;;60~503~1~4500630~1
"RTN","HDI1000D",181,0)
 ;;60~503~0~4500633~1
"RTN","HDI1000D",182,0)
 ;;60.12~3~1~4500633~1
"RTN","HDI1000D",183,0)
 ;;60.2~2~0~4500630~1
"RTN","HDI1000D",184,0)
 ;;60.2~2~1~4500633~1
"RTN","HDI1000D",185,0)
 ;;61.2~3~N~4500745~1
"RTN","HDI1000D",186,0)
 ;;61.2~3~P~4500746~1
"RTN","HDI1000D",187,0)
 ;;61.2~3~I~4500759~1
"RTN","HDI1000D",188,0)
 ;;61.2~4~B~4500674~1
"RTN","HDI1000D",189,0)
 ;;61.2~4~C~4500681~1
"RTN","HDI1000D",190,0)
 ;;61.2~4~D~4500711~1
"RTN","HDI1000D",191,0)
 ;;61.2~4~F~4500742~1
"RTN","HDI1000D",192,0)
 ;;61.2~4~M~4500795~1
"RTN","HDI1000D",193,0)
 ;;61.2~4~P~4500840~1
"RTN","HDI1000D",194,0)
 ;;61.2~4~R~4500885~1
"RTN","HDI1000D",195,0)
 ;;61.2~4~V~4500931~1
"RTN","HDI1000D",196,0)
 ;;61.2~10~1~4500633~1
"RTN","HDI1000D",197,0)
 ;;61.21~6~0~4500630~1
"RTN","HDI1000D",198,0)
 ;;61.21~6~1~4500633~1
"RTN","HDI1000D",199,0)
 ;;62.06~7~A~4500665~1
"RTN","HDI1000D",200,0)
 ;;62.06~7~N~4500805~1
"RTN","HDI1000D",201,0)
 ;;62.06~7~R~4500877~1
"RTN","HDI1000D",202,0)
 ;;62.08~0.01~A~4500665~1
"RTN","HDI1000D",203,0)
 ;;62.08~0.01~N~4500805~1
"RTN","HDI1000D",204,0)
 ;;62.08~0.01~R~4500877~1
"RTN","HDI1000D",205,0)
 ;;63~0.04~1~4500708~1
"RTN","HDI1000D",206,0)
 ;;63~0.04~0~4500827~1
"RTN","HDI1000D",207,0)
 ;;63~0.05~A~4500653~1
"RTN","HDI1000D",208,0)
 ;;63~0.05~AB~4500654~1
"RTN","HDI1000D",209,0)
 ;;63~0.05~B~4500673~1
"RTN","HDI1000D",210,0)
 ;;63~0.05~O~4500824~1
"RTN","HDI1000D",211,0)
 ;;63~0.092~C~4500684~1
"RTN","HDI1000D",212,0)
 ;;63~0.092~F~4500736~1
"RTN","HDI1000D",213,0)
 ;;63~0.092~I~4500755~1
"RTN","HDI1000D",214,0)
 ;;63~0.092~M~4500792~1
"RTN","HDI1000D",215,0)
 ;;63~0.092~N~4500810~1
"RTN","HDI1000D",216,0)
 ;;63~0.092~OR~4500830~1
"RTN","HDI1000D",217,0)
 ;;63~0.092~Z~4500834~1
"RTN","HDI1000D",218,0)
 ;;63~0.092~W~4500933~1
"RTN","HDI1000D",219,0)
 ;;63~13.7~A~4500655~1
"RTN","HDI1000D",220,0)
 ;;63~13.7~C~4500682~1
"RTN","HDI1000D",221,0)
 ;;63~13.7~F~4500741~1
"RTN","HDI1000D",222,0)
 ;;63~13.7~H~4500748~1
"RTN","HDI1000D",223,0)
 ;;63~13.7~O~4500833~1
"RTN","HDI1000D",224,0)
 ;;63~13.7~T~4500922~1
"RTN","HDI1000D",225,0)
 ;;63~14.5~B~4500675~1
"RTN","HDI1000D",226,0)
 ;;63~14.5~D~4500709~1
"RTN","HDI1000D",227,0)
 ;;63~14.5~I~4500764~1
"RTN","HDI1000D",228,0)
 ;;63~14.5~M~4500781~1
"RTN","HDI1000D",229,0)
 ;;63~14.5~NE~4500804~1
"RTN","HDI1000D",230,0)
 ;;63~14.5~NH~4500806~1
"RTN","HDI1000D",231,0)
 ;;63~14.5~P~4500862~1
"RTN","HDI1000D",232,0)
 ;;63~14.5~R~4500870~1
"RTN","HDI1000D",233,0)
 ;;63~14.5~SCI~4500909~1
"RTN","HDI1000D",234,0)
 ;;63~14.5~S~4500911~1
"RTN","HDI1000D",235,0)
 ;;63~83.1~0~4500630~1
"RTN","HDI1000D",236,0)
 ;;63~83.1~1~4500633~1
"RTN","HDI1000D",237,0)
 ;;63~83.2~2~4500688~1
"RTN","HDI1000D",238,0)
 ;;63~83.2~0~4500630~1
"RTN","HDI1000D",239,0)
 ;;63~83.2~1~4500633~1
"RTN","HDI1000D",240,0)
 ;;63~102.2~0~4500630~1
"RTN","HDI1000D",241,0)
 ;;63~102.2~1~4500633~1
"RTN","HDI1000D",242,0)
 ;;63.01~2.9~I~4500766~1
"RTN","HDI1000D",243,0)
 ;;63.01~2.9~N~4500801~1
"RTN","HDI1000D",244,0)
 ;;63.01~2.9~P~4500849~1
"RTN","HDI1000D",245,0)
 ;;63.01~6~N~4500797~1
"RTN","HDI1000D",246,0)
 ;;63.01~6~P~4500848~1
"RTN","HDI1000D",247,0)
 ;;63.01~10~A~4500653~1
"RTN","HDI1000D",248,0)
 ;;63.01~10~AB~4500654~1
"RTN","HDI1000D",249,0)
 ;;63.01~10~B~4500673~1
"RTN","HDI1000D",250,0)
 ;;63.01~10~ND~4500822~1
"RTN","HDI1000D",251,0)
 ;;
"RTN","HDI1000E")
0^34^B57999521
"RTN","HDI1000E",1,0)
HDI1000E ;BPFO/JRP - HDI v1.0 POST-INSTALL DATA;4/19/2005
"RTN","HDI1000E",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000E",3,0)
 ;
"RTN","HDI1000E",4,0)
LABPHAR ;VUIDs for Lab & Pharmacy domain (cont)
"RTN","HDI1000E",5,0)
 ;;63.01~10~O~4500824~1
"RTN","HDI1000E",6,0)
 ;;63.01~11~NEG~4500797~1
"RTN","HDI1000E",7,0)
 ;;63.01~11~ND~4500822~1
"RTN","HDI1000E",8,0)
 ;;63.01~11~POS~4500848~1
"RTN","HDI1000E",9,0)
 ;;63.01~127~P~4500662~1
"RTN","HDI1000E",10,0)
 ;;63.01~127~N~4500807~1
"RTN","HDI1000E",11,0)
 ;;63.01~129.12~P~4500662~1
"RTN","HDI1000E",12,0)
 ;;63.01~129.12~N~4500807~1
"RTN","HDI1000E",13,0)
 ;;63.01~131~NEG~4500797~1
"RTN","HDI1000E",14,0)
 ;;63.01~131~POS~4500848~1
"RTN","HDI1000E",15,0)
 ;;63.01~131~NDU~4500882~1
"RTN","HDI1000E",16,0)
 ;;63.01~131~PDU~4500883~1
"RTN","HDI1000E",17,0)
 ;;63.01~143~P~4500662~1
"RTN","HDI1000E",18,0)
 ;;63.01~143~N~4500807~1
"RTN","HDI1000E",19,0)
 ;;63.01~146~P~4500662~1
"RTN","HDI1000E",20,0)
 ;;63.01~146~N~4500807~1
"RTN","HDI1000E",21,0)
 ;;63.01~149.11~P~4500662~1
"RTN","HDI1000E",22,0)
 ;;63.01~149.11~N~4500807~1
"RTN","HDI1000E",23,0)
 ;;63.01~151~A~4500653~1
"RTN","HDI1000E",24,0)
 ;;63.01~151~AB~4500654~1
"RTN","HDI1000E",25,0)
 ;;63.01~151~B~4500673~1
"RTN","HDI1000E",26,0)
 ;;63.01~151~O~4500824~1
"RTN","HDI1000E",27,0)
 ;;63.01~153~A~4500653~1
"RTN","HDI1000E",28,0)
 ;;63.01~153~AB~4500654~1
"RTN","HDI1000E",29,0)
 ;;63.01~153~B~4500673~1
"RTN","HDI1000E",30,0)
 ;;63.01~153~O~4500824~1
"RTN","HDI1000E",31,0)
 ;;63.01~154~A~4500653~1
"RTN","HDI1000E",32,0)
 ;;63.01~154~AB~4500654~1
"RTN","HDI1000E",33,0)
 ;;63.01~154~B~4500673~1
"RTN","HDI1000E",34,0)
 ;;63.01~154~O~4500824~1
"RTN","HDI1000E",35,0)
 ;;63.014~0.01~A~4500663~1
"RTN","HDI1000E",36,0)
 ;;63.014~0.01~F~4500730~1
"RTN","HDI1000E",37,0)
 ;;63.014~0.01~H~4500772~1
"RTN","HDI1000E",38,0)
 ;;63.014~0.01~L~4500773~1
"RTN","HDI1000E",39,0)
 ;;63.014~0.01~P~4500839~1
"RTN","HDI1000E",40,0)
 ;;63.014~0.01~S~4500889~1
"RTN","HDI1000E",41,0)
 ;;63.014~0.02~A~4500671~1
"RTN","HDI1000E",42,0)
 ;;63.014~0.02~M~4500786~1
"RTN","HDI1000E",43,0)
 ;;63.014~0.02~T~4500923~1
"RTN","HDI1000E",44,0)
 ;;63.015~0.01~1~4500971~1
"RTN","HDI1000E",45,0)
 ;;63.015~0.01~2~4500972~1
"RTN","HDI1000E",46,0)
 ;;63.015~0.01~3~4500678~1
"RTN","HDI1000E",47,0)
 ;;63.015~0.03~N~4500801~1
"RTN","HDI1000E",48,0)
 ;;63.015~0.03~P~4500849~1
"RTN","HDI1000E",49,0)
 ;;63.017~0.05~A~4500653~1
"RTN","HDI1000E",50,0)
 ;;63.017~0.05~AB~4500654~1
"RTN","HDI1000E",51,0)
 ;;63.017~0.05~B~4500673~1
"RTN","HDI1000E",52,0)
 ;;63.017~0.05~O~4500824~1
"RTN","HDI1000E",53,0)
 ;;63.017~0.06~NEG~4500801~1
"RTN","HDI1000E",54,0)
 ;;63.017~0.06~POS~4500849~1
"RTN","HDI1000E",55,0)
 ;;63.017~0.08~0~4500630~1
"RTN","HDI1000E",56,0)
 ;;63.017~0.08~1~4500633~1
"RTN","HDI1000E",57,0)
 ;;63.017~0.09~1~4500633~1
"RTN","HDI1000E",58,0)
 ;;63.018~0.01~S~4500889~1
"RTN","HDI1000E",59,0)
 ;;63.018~0.01~M~4500905~1
"RTN","HDI1000E",60,0)
 ;;63.018~0.02~A~4500671~1
"RTN","HDI1000E",61,0)
 ;;63.018~0.02~M~4500786~1
"RTN","HDI1000E",62,0)
 ;;63.018~0.02~S~4500907~1
"RTN","HDI1000E",63,0)
 ;;63.018~0.02~T~4500923~1
"RTN","HDI1000E",64,0)
 ;;63.019~0.03~N~4500801~1
"RTN","HDI1000E",65,0)
 ;;63.019~0.03~P~4500849~1
"RTN","HDI1000E",66,0)
 ;;63.019~0.03~U~4500924~1
"RTN","HDI1000E",67,0)
 ;;63.02~0.14~0~4500951~1
"RTN","HDI1000E",68,0)
 ;;63.02~0.14~1~4500952~1
"RTN","HDI1000E",69,0)
 ;;63.02~0.14~2~4500953~1
"RTN","HDI1000E",70,0)
 ;;63.02~0.14~3~4500954~1
"RTN","HDI1000E",71,0)
 ;;63.02~0.14~4~4500955~1
"RTN","HDI1000E",72,0)
 ;;63.02~0.14~5~4500956~1
"RTN","HDI1000E",73,0)
 ;;63.02~0.14~6~4500957~1
"RTN","HDI1000E",74,0)
 ;;63.02~0.14~7~4500958~1
"RTN","HDI1000E",75,0)
 ;;63.02~0.14~8~4500959~1
"RTN","HDI1000E",76,0)
 ;;63.02~0.14~9~4500960~1
"RTN","HDI1000E",77,0)
 ;;63.02~0.172~0~4500630~1
"RTN","HDI1000E",78,0)
 ;;63.02~0.172~1~4500633~1
"RTN","HDI1000E",79,0)
 ;;63.04~0.02~0~4500630~1
"RTN","HDI1000E",80,0)
 ;;63.04~0.02~1~4500633~1
"RTN","HDI1000E",81,0)
 ;;63.04~0.12~1~4500939~1
"RTN","HDI1000E",82,0)
 ;;63.04~176~NEGATIVE~4500801~1
"RTN","HDI1000E",83,0)
 ;;63.04~176~POSITIVE~4500849~1
"RTN","HDI1000E",84,0)
 ;;63.04~405~Adeq.~4500660~1
"RTN","HDI1000E",85,0)
 ;;63.04~405~Hi Adq~4500751~1
"RTN","HDI1000E",86,0)
 ;;63.04~405~Inc.~4500758~1
"RTN","HDI1000E",87,0)
 ;;63.04~405~Lo Adq~4500775~1
"RTN","HDI1000E",88,0)
 ;;63.04~405~Reduced~4500868~1
"RTN","HDI1000E",89,0)
 ;;63.04~406~No~4500630~1
"RTN","HDI1000E",90,0)
 ;;63.04~406~Yes~4500633~1
"RTN","HDI1000E",91,0)
 ;;63.04~407~No~4500630~1
"RTN","HDI1000E",92,0)
 ;;63.04~407~Yes~4500633~1
"RTN","HDI1000E",93,0)
 ;;63.04~408~1+~4500644~1
"RTN","HDI1000E",94,0)
 ;;63.04~408~2+~4500645~1
"RTN","HDI1000E",95,0)
 ;;63.04~408~3+~4500646~1
"RTN","HDI1000E",96,0)
 ;;63.04~408~4+~4500647~1
"RTN","HDI1000E",97,0)
 ;;63.04~409~1+~4500644~1
"RTN","HDI1000E",98,0)
 ;;63.04~409~2+~4500645~1
"RTN","HDI1000E",99,0)
 ;;63.04~409~3+~4500646~1
"RTN","HDI1000E",100,0)
 ;;63.04~409~4+~4500647~1
"RTN","HDI1000E",101,0)
 ;;63.04~410~1+~4500644~1
"RTN","HDI1000E",102,0)
 ;;63.04~410~2+~4500645~1
"RTN","HDI1000E",103,0)
 ;;63.04~410~3+~4500646~1
"RTN","HDI1000E",104,0)
 ;;63.04~410~4+~4500647~1
"RTN","HDI1000E",105,0)
 ;;63.04~411~1+~4500644~1
"RTN","HDI1000E",106,0)
 ;;63.04~411~2+~4500645~1
"RTN","HDI1000E",107,0)
 ;;63.04~411~3+~4500646~1
"RTN","HDI1000E",108,0)
 ;;63.04~411~4+~4500647~1
"RTN","HDI1000E",109,0)
 ;;63.04~412~1+~4500644~1
"RTN","HDI1000E",110,0)
 ;;63.04~412~2+~4500645~1
"RTN","HDI1000E",111,0)
 ;;63.04~412~3+~4500646~1
"RTN","HDI1000E",112,0)
 ;;63.04~412~4+~4500647~1
"RTN","HDI1000E",113,0)
 ;;63.04~413~1+~4500644~1
"RTN","HDI1000E",114,0)
 ;;63.04~413~2+~4500645~1
"RTN","HDI1000E",115,0)
 ;;63.04~413~3+~4500646~1
"RTN","HDI1000E",116,0)
 ;;63.04~413~4+~4500647~1
"RTN","HDI1000E",117,0)
 ;;63.04~413~Few~4500727~1
"RTN","HDI1000E",118,0)
 ;;63.04~414~1+~4500644~1
"RTN","HDI1000E",119,0)
 ;;63.04~414~2+~4500645~1
"RTN","HDI1000E",120,0)
 ;;63.04~414~3+~4500646~1
"RTN","HDI1000E",121,0)
 ;;63.04~414~4+~4500647~1
"RTN","HDI1000E",122,0)
 ;;63.04~415~1+~4500644~1
"RTN","HDI1000E",123,0)
 ;;63.04~415~2+~4500645~1
"RTN","HDI1000E",124,0)
 ;;63.04~415~3+~4500646~1
"RTN","HDI1000E",125,0)
 ;;63.04~415~4+~4500647~1
"RTN","HDI1000E",126,0)
 ;;63.04~415~Few~4500727~1
"RTN","HDI1000E",127,0)
 ;;63.04~416~1+~4500644~1
"RTN","HDI1000E",128,0)
 ;;63.04~416~2+~4500645~1
"RTN","HDI1000E",129,0)
 ;;63.04~416~3+~4500646~1
"RTN","HDI1000E",130,0)
 ;;63.04~416~4+~4500647~1
"RTN","HDI1000E",131,0)
 ;;63.04~416~Few~4500727~1
"RTN","HDI1000E",132,0)
 ;;63.04~417~1+~4500644~1
"RTN","HDI1000E",133,0)
 ;;63.04~417~2+~4500645~1
"RTN","HDI1000E",134,0)
 ;;63.04~417~3+~4500646~1
"RTN","HDI1000E",135,0)
 ;;63.04~417~4+~4500647~1
"RTN","HDI1000E",136,0)
 ;;63.04~417~Few~4500727~1
"RTN","HDI1000E",137,0)
 ;;63.04~418~1+~4500644~1
"RTN","HDI1000E",138,0)
 ;;63.04~418~2+~4500645~1
"RTN","HDI1000E",139,0)
 ;;63.04~418~3+~4500646~1
"RTN","HDI1000E",140,0)
 ;;63.04~418~4+~4500647~1
"RTN","HDI1000E",141,0)
 ;;63.04~418~Few~4500727~1
"RTN","HDI1000E",142,0)
 ;;63.04~419~1+~4500644~1
"RTN","HDI1000E",143,0)
 ;;63.04~419~2+~4500645~1
"RTN","HDI1000E",144,0)
 ;;63.04~419~3+~4500646~1
"RTN","HDI1000E",145,0)
 ;;63.04~419~4+~4500647~1
"RTN","HDI1000E",146,0)
 ;;63.04~419~Few~4500727~1
"RTN","HDI1000E",147,0)
 ;;63.04~420~1+~4500644~1
"RTN","HDI1000E",148,0)
 ;;63.04~420~2+~4500645~1
"RTN","HDI1000E",149,0)
 ;;63.04~420~3+~4500646~1
"RTN","HDI1000E",150,0)
 ;;63.04~420~4+~4500647~1
"RTN","HDI1000E",151,0)
 ;;63.04~420~Few~4500727~1
"RTN","HDI1000E",152,0)
 ;;63.04~421~1+~4500644~1
"RTN","HDI1000E",153,0)
 ;;63.04~421~2+~4500645~1
"RTN","HDI1000E",154,0)
 ;;63.04~421~3+~4500646~1
"RTN","HDI1000E",155,0)
 ;;63.04~421~4+~4500647~1
"RTN","HDI1000E",156,0)
 ;;63.04~421~Few~4500727~1
"RTN","HDI1000E",157,0)
 ;;63.04~422~1+~4500644~1
"RTN","HDI1000E",158,0)
 ;;63.04~422~2+~4500645~1
"RTN","HDI1000E",159,0)
 ;;63.04~422~3+~4500646~1
"RTN","HDI1000E",160,0)
 ;;63.04~422~4+~4500647~1
"RTN","HDI1000E",161,0)
 ;;63.04~422~Few~4500727~1
"RTN","HDI1000E",162,0)
 ;;63.04~423~1+~4500644~1
"RTN","HDI1000E",163,0)
 ;;63.04~423~2+~4500645~1
"RTN","HDI1000E",164,0)
 ;;63.04~423~3+~4500646~1
"RTN","HDI1000E",165,0)
 ;;63.04~423~4+~4500647~1
"RTN","HDI1000E",166,0)
 ;;63.04~423~Few~4500727~1
"RTN","HDI1000E",167,0)
 ;;63.04~424~1+~4500644~1
"RTN","HDI1000E",168,0)
 ;;63.04~424~2+~4500645~1
"RTN","HDI1000E",169,0)
 ;;63.04~424~3+~4500646~1
"RTN","HDI1000E",170,0)
 ;;63.04~424~4+~4500647~1
"RTN","HDI1000E",171,0)
 ;;63.04~424~Few~4500727~1
"RTN","HDI1000E",172,0)
 ;;63.04~425~1+~4500644~1
"RTN","HDI1000E",173,0)
 ;;63.04~425~2+~4500645~1
"RTN","HDI1000E",174,0)
 ;;63.04~425~3+~4500646~1
"RTN","HDI1000E",175,0)
 ;;63.04~425~4+~4500647~1
"RTN","HDI1000E",176,0)
 ;;63.04~425~Few~4500727~1
"RTN","HDI1000E",177,0)
 ;;63.04~426~1+~4500644~1
"RTN","HDI1000E",178,0)
 ;;63.04~426~2+~4500645~1
"RTN","HDI1000E",179,0)
 ;;63.04~426~3+~4500646~1
"RTN","HDI1000E",180,0)
 ;;63.04~426~4+~4500647~1
"RTN","HDI1000E",181,0)
 ;;63.04~426~Few~4500727~1
"RTN","HDI1000E",182,0)
 ;;63.04~473~1+~4500644~1
"RTN","HDI1000E",183,0)
 ;;63.04~473~2+~4500645~1
"RTN","HDI1000E",184,0)
 ;;63.04~473~3+~4500646~1
"RTN","HDI1000E",185,0)
 ;;63.04~473~4+~4500647~1
"RTN","HDI1000E",186,0)
 ;;63.04~473~Few~4500727~1
"RTN","HDI1000E",187,0)
 ;;63.04~473~Neg.~4500797~1
"RTN","HDI1000E",188,0)
 ;;63.04~473~Occ~4500825~1
"RTN","HDI1000E",189,0)
 ;;63.04~474~1+~4500644~1
"RTN","HDI1000E",190,0)
 ;;63.04~474~2+~4500645~1
"RTN","HDI1000E",191,0)
 ;;63.04~474~3+~4500646~1
"RTN","HDI1000E",192,0)
 ;;63.04~474~4+~4500647~1
"RTN","HDI1000E",193,0)
 ;;63.04~474~Few~4500727~1
"RTN","HDI1000E",194,0)
 ;;63.04~474~Neg.~4500797~1
"RTN","HDI1000E",195,0)
 ;;63.04~474~Occ~4500825~1
"RTN","HDI1000E",196,0)
 ;;63.04~475~1+~4500644~1
"RTN","HDI1000E",197,0)
 ;;63.04~475~2+~4500645~1
"RTN","HDI1000E",198,0)
 ;;63.04~475~3+~4500646~1
"RTN","HDI1000E",199,0)
 ;;63.04~475~4+~4500647~1
"RTN","HDI1000E",200,0)
 ;;63.04~475~Few~4500727~1
"RTN","HDI1000E",201,0)
 ;;63.04~475~Neg.~4500797~1
"RTN","HDI1000E",202,0)
 ;;63.04~475~Occ~4500825~1
"RTN","HDI1000E",203,0)
 ;;63.04~476~1+~4500644~1
"RTN","HDI1000E",204,0)
 ;;63.04~476~2+~4500645~1
"RTN","HDI1000E",205,0)
 ;;63.04~476~3+~4500646~1
"RTN","HDI1000E",206,0)
 ;;63.04~476~4+~4500647~1
"RTN","HDI1000E",207,0)
 ;;63.04~476~Few~4500727~1
"RTN","HDI1000E",208,0)
 ;;63.04~476~Neg.~4500797~1
"RTN","HDI1000E",209,0)
 ;;63.04~476~Occ~4500825~1
"RTN","HDI1000E",210,0)
 ;;63.04~477~1+~4500644~1
"RTN","HDI1000E",211,0)
 ;;63.04~477~2+~4500645~1
"RTN","HDI1000E",212,0)
 ;;63.04~477~3+~4500646~1
"RTN","HDI1000E",213,0)
 ;;63.04~477~4+~4500647~1
"RTN","HDI1000E",214,0)
 ;;63.04~477~Few~4500727~1
"RTN","HDI1000E",215,0)
 ;;63.04~477~Neg.~4500797~1
"RTN","HDI1000E",216,0)
 ;;63.04~477~Occ~4500825~1
"RTN","HDI1000E",217,0)
 ;;63.04~542~N~4500802~1
"RTN","HDI1000E",218,0)
 ;;63.04~542~P~4500850~1
"RTN","HDI1000E",219,0)
 ;;63.04~542~H~4500851~1
"RTN","HDI1000E",220,0)
 ;;63.04~542~M~4500852~1
"RTN","HDI1000E",221,0)
 ;;63.04~542~PP~4500853~1
"RTN","HDI1000E",222,0)
 ;;63.04~542~S~4500854~1
"RTN","HDI1000E",223,0)
 ;;63.04~551~N~4500815~1
"RTN","HDI1000E",224,0)
 ;;63.04~551~R~4500867~1
"RTN","HDI1000E",225,0)
 ;;63.04~551~WR~4500935~1
"RTN","HDI1000E",226,0)
 ;;63.04~581~NEGATIVE~4500801~1
"RTN","HDI1000E",227,0)
 ;;63.04~581~POSITIVE~4500849~1
"RTN","HDI1000E",228,0)
 ;;63.04~583~NEGATIVE~4500801~1
"RTN","HDI1000E",229,0)
 ;;63.04~583~POSITIVE~4500849~1
"RTN","HDI1000E",230,0)
 ;;63.04~696~1+~4500649~1
"RTN","HDI1000E",231,0)
 ;;63.04~696~2+~4500650~1
"RTN","HDI1000E",232,0)
 ;;63.04~696~3+~4500651~1
"RTN","HDI1000E",233,0)
 ;;63.04~696~4+~4500652~1
"RTN","HDI1000E",234,0)
 ;;63.04~696~TRACE~4500917~1
"RTN","HDI1000E",235,0)
 ;;63.04~697~0~4500648~1
"RTN","HDI1000E",236,0)
 ;;63.04~697~1+~4500649~1
"RTN","HDI1000E",237,0)
 ;;63.04~697~2+~4500650~1
"RTN","HDI1000E",238,0)
 ;;63.04~697~3+~4500651~1
"RTN","HDI1000E",239,0)
 ;;63.04~697~4+~4500652~1
"RTN","HDI1000E",240,0)
 ;;63.04~699~NoneObs~4500813~1
"RTN","HDI1000E",241,0)
 ;;63.04~699~Unexamd~4500925~1
"RTN","HDI1000E",242,0)
 ;;63.04~706~Abundnt~4500657~1
"RTN","HDI1000E",243,0)
 ;;63.04~706~Few~4500729~1
"RTN","HDI1000E",244,0)
 ;;63.04~706~Moderat~4500790~1
"RTN","HDI1000E",245,0)
 ;;63.04~706~NoneObs~4500813~1
"RTN","HDI1000E",246,0)
 ;;63.04~706~Occ~4500826~1
"RTN","HDI1000E",247,0)
 ;;63.04~706~Rare~4500865~1
"RTN","HDI1000E",248,0)
 ;;63.04~710~PRESENT~4500858~1
"RTN","HDI1000E",249,0)
 ;;63.04~711~Abundnt~4500657~1
"RTN","HDI1000E",250,0)
 ;;63.04~711~Few~4500729~1
"RTN","HDI1000E",251,0)
 ;;
"RTN","HDI1000F")
0^35^B76782914
"RTN","HDI1000F",1,0)
HDI1000F ;BPFO/JRP - HDI v1.0 POST-INSTALL DATA;4/19/2005
"RTN","HDI1000F",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000F",3,0)
 ;
"RTN","HDI1000F",4,0)
LABPHAR ;VUIDs for Lab & Pharmacy domain (cont)
"RTN","HDI1000F",5,0)
 ;;63.04~711~Moderat~4500790~1
"RTN","HDI1000F",6,0)
 ;;63.04~711~Rare~4500865~1
"RTN","HDI1000F",7,0)
 ;;63.04~712~Abundnt~4500657~1
"RTN","HDI1000F",8,0)
 ;;63.04~712~Few~4500729~1
"RTN","HDI1000F",9,0)
 ;;63.04~712~Moderat~4500790~1
"RTN","HDI1000F",10,0)
 ;;63.04~712~Rare~4500865~1
"RTN","HDI1000F",11,0)
 ;;63.04~713~Abundnt~4500657~1
"RTN","HDI1000F",12,0)
 ;;63.04~713~Few~4500729~1
"RTN","HDI1000F",13,0)
 ;;63.04~713~Moderat~4500790~1
"RTN","HDI1000F",14,0)
 ;;63.04~713~Rare~4500865~1
"RTN","HDI1000F",15,0)
 ;;63.04~714~Abundnt~4500657~1
"RTN","HDI1000F",16,0)
 ;;63.04~714~Few~4500729~1
"RTN","HDI1000F",17,0)
 ;;63.04~714~Moderat~4500790~1
"RTN","HDI1000F",18,0)
 ;;63.04~714~Rare~4500865~1
"RTN","HDI1000F",19,0)
 ;;63.04~715~Abundnt~4500657~1
"RTN","HDI1000F",20,0)
 ;;63.04~715~Few~4500729~1
"RTN","HDI1000F",21,0)
 ;;63.04~715~Moderat~4500790~1
"RTN","HDI1000F",22,0)
 ;;63.04~715~Rare~4500865~1
"RTN","HDI1000F",23,0)
 ;;63.04~716~Abundnt~4500657~1
"RTN","HDI1000F",24,0)
 ;;63.04~716~Few~4500729~1
"RTN","HDI1000F",25,0)
 ;;63.04~716~Moderat~4500790~1
"RTN","HDI1000F",26,0)
 ;;63.04~716~Rare~4500865~1
"RTN","HDI1000F",27,0)
 ;;63.04~717~Abundnt~4500657~1
"RTN","HDI1000F",28,0)
 ;;63.04~717~Few~4500729~1
"RTN","HDI1000F",29,0)
 ;;63.04~717~Moderat~4500790~1
"RTN","HDI1000F",30,0)
 ;;63.04~717~Rare~4500865~1
"RTN","HDI1000F",31,0)
 ;;63.04~718~Abundnt~4500657~1
"RTN","HDI1000F",32,0)
 ;;63.04~718~Few~4500729~1
"RTN","HDI1000F",33,0)
 ;;63.04~718~Moderat~4500790~1
"RTN","HDI1000F",34,0)
 ;;63.04~718~Rare~4500865~1
"RTN","HDI1000F",35,0)
 ;;63.04~719~Abundnt~4500657~1
"RTN","HDI1000F",36,0)
 ;;63.04~719~Few~4500729~1
"RTN","HDI1000F",37,0)
 ;;63.04~719~Moderat~4500790~1
"RTN","HDI1000F",38,0)
 ;;63.04~719~Rare~4500865~1
"RTN","HDI1000F",39,0)
 ;;63.04~721~1+~4500644~1
"RTN","HDI1000F",40,0)
 ;;63.04~721~2+~4500645~1
"RTN","HDI1000F",41,0)
 ;;63.04~721~3+~4500646~1
"RTN","HDI1000F",42,0)
 ;;63.04~721~4+~4500647~1
"RTN","HDI1000F",43,0)
 ;;63.04~721~Neg.~4500797~1
"RTN","HDI1000F",44,0)
 ;;63.04~721~Trace~4500914~1
"RTN","HDI1000F",45,0)
 ;;63.04~722~1+~4500644~1
"RTN","HDI1000F",46,0)
 ;;63.04~722~2+~4500645~1
"RTN","HDI1000F",47,0)
 ;;63.04~722~3+~4500646~1
"RTN","HDI1000F",48,0)
 ;;63.04~722~4+~4500647~1
"RTN","HDI1000F",49,0)
 ;;63.04~722~Neg.~4500797~1
"RTN","HDI1000F",50,0)
 ;;63.04~722~Trace~4500914~1
"RTN","HDI1000F",51,0)
 ;;63.04~723~1+~4500644~1
"RTN","HDI1000F",52,0)
 ;;63.04~723~2+~4500645~1
"RTN","HDI1000F",53,0)
 ;;63.04~723~3+~4500646~1
"RTN","HDI1000F",54,0)
 ;;63.04~723~4+~4500647~1
"RTN","HDI1000F",55,0)
 ;;63.04~723~Neg.~4500797~1
"RTN","HDI1000F",56,0)
 ;;63.04~723~Trace~4500914~1
"RTN","HDI1000F",57,0)
 ;;63.04~724~1+~4500644~1
"RTN","HDI1000F",58,0)
 ;;63.04~724~2+~4500645~1
"RTN","HDI1000F",59,0)
 ;;63.04~724~3+~4500646~1
"RTN","HDI1000F",60,0)
 ;;63.04~724~4+~4500647~1
"RTN","HDI1000F",61,0)
 ;;63.04~724~Neg.~4500797~1
"RTN","HDI1000F",62,0)
 ;;63.04~724~Trace~4500914~1
"RTN","HDI1000F",63,0)
 ;;63.04~725~1+~4500644~1
"RTN","HDI1000F",64,0)
 ;;63.04~725~2+~4500645~1
"RTN","HDI1000F",65,0)
 ;;63.04~725~3+~4500646~1
"RTN","HDI1000F",66,0)
 ;;63.04~725~4+~4500647~1
"RTN","HDI1000F",67,0)
 ;;63.04~725~Neg.~4500797~1
"RTN","HDI1000F",68,0)
 ;;63.04~725~Trace~4500914~1
"RTN","HDI1000F",69,0)
 ;;63.04~726~1+~4500644~1
"RTN","HDI1000F",70,0)
 ;;63.04~726~2+~4500645~1
"RTN","HDI1000F",71,0)
 ;;63.04~726~3+~4500646~1
"RTN","HDI1000F",72,0)
 ;;63.04~726~4+~4500647~1
"RTN","HDI1000F",73,0)
 ;;63.04~726~Neg.~4500797~1
"RTN","HDI1000F",74,0)
 ;;63.04~726~Trace~4500914~1
"RTN","HDI1000F",75,0)
 ;;63.04~727~1+~4500644~1
"RTN","HDI1000F",76,0)
 ;;63.04~727~2+~4500645~1
"RTN","HDI1000F",77,0)
 ;;63.04~727~3+~4500646~1
"RTN","HDI1000F",78,0)
 ;;63.04~727~4+~4500647~1
"RTN","HDI1000F",79,0)
 ;;63.04~727~Neg.~4500797~1
"RTN","HDI1000F",80,0)
 ;;63.04~727~Trace~4500914~1
"RTN","HDI1000F",81,0)
 ;;63.04~728~1+~4500644~1
"RTN","HDI1000F",82,0)
 ;;63.04~728~2+~4500645~1
"RTN","HDI1000F",83,0)
 ;;63.04~728~3+~4500646~1
"RTN","HDI1000F",84,0)
 ;;63.04~728~4+~4500647~1
"RTN","HDI1000F",85,0)
 ;;63.04~728~Neg.~4500797~1
"RTN","HDI1000F",86,0)
 ;;63.04~728~Trace~4500914~1
"RTN","HDI1000F",87,0)
 ;;63.04~798~5~4500669~1
"RTN","HDI1000F",88,0)
 ;;63.04~798~2~4500692~1
"RTN","HDI1000F",89,0)
 ;;63.04~798~3~4500749~1
"RTN","HDI1000F",90,0)
 ;;63.04~798~1~4500750~1
"RTN","HDI1000F",91,0)
 ;;63.04~798~4~4500808~1
"RTN","HDI1000F",92,0)
 ;;63.04~363037~DETECTED~4500699~1
"RTN","HDI1000F",93,0)
 ;;63.04~363037~NONE DETECTED~4500811~1
"RTN","HDI1000F",94,0)
 ;;63.04~363037~NON-REACTIVE~4500816~1
"RTN","HDI1000F",95,0)
 ;;63.04~363037~REACTIVE~4500866~1
"RTN","HDI1000F",96,0)
 ;;63.04~363043~ABNORMAL~4500656~1
"RTN","HDI1000F",97,0)
 ;;63.04~363043~RESULTS LIMITED BY . . .~4500879~1
"RTN","HDI1000F",98,0)
 ;;63.04~363043~UNSATISFACTORY~4500928~1
"RTN","HDI1000F",99,0)
 ;;63.04~363043~WITHIN NORMAL LIMITS~4500937~1
"RTN","HDI1000F",100,0)
 ;;63.04~363076~Negative - Direct Test Negative for Group A Strep~4500702~1
"RTN","HDI1000F",101,0)
 ;;63.04~363076~POSITIVE - DIRECT TEST POSITIVE FOR GROUP A STREP~4500703~1
"RTN","HDI1000F",102,0)
 ;;63.04~363079~NONE GIVEN~4500812~1
"RTN","HDI1000F",103,0)
 ;;63.04~363079~NORMAL~4500818~1
"RTN","HDI1000F",104,0)
 ;;63.04~363079~SEE COMMENT~4500899~1
"RTN","HDI1000F",105,0)
 ;;63.04~363080~463~4500902~1
"RTN","HDI1000F",106,0)
 ;;63.04~363080~464~4500904~1
"RTN","HDI1000F",107,0)
 ;;63.04~363080~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",108,0)
 ;;63.04~363086~POSITIVE~4500699~1
"RTN","HDI1000F",109,0)
 ;;63.04~363086~NEGATIVE~4500820~1
"RTN","HDI1000F",110,0)
 ;;63.04~363105~INDETERMINATE~4500759~1
"RTN","HDI1000F",111,0)
 ;;63.04~363105~NEGATIVE~4500801~1
"RTN","HDI1000F",112,0)
 ;;63.04~363105~POSITIVE~4500849~1
"RTN","HDI1000F",113,0)
 ;;63.04~363139~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",114,0)
 ;;63.04~363158~N~4500801~1
"RTN","HDI1000F",115,0)
 ;;63.04~363158~P~4500849~1
"RTN","HDI1000F",116,0)
 ;;63.04~463001~463~4500901~1
"RTN","HDI1000F",117,0)
 ;;63.04~463001~464~4500904~1
"RTN","HDI1000F",118,0)
 ;;63.04~463039~NEGATIVE~4500801~1
"RTN","HDI1000F",119,0)
 ;;63.04~463039~POSITIVE~4500849~1
"RTN","HDI1000F",120,0)
 ;;63.04~463060~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",121,0)
 ;;63.04~463061~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",122,0)
 ;;63.04~463066~NO MYCOBACTERIUM TUBERCULOSIS ISOLATED~4500809~1
"RTN","HDI1000F",123,0)
 ;;63.04~463066~POSITIVE~4500849~1
"RTN","HDI1000F",124,0)
 ;;63.04~463067~ACID FAST BACILLI NOT SEEN~4500658~1
"RTN","HDI1000F",125,0)
 ;;63.04~463073~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",126,0)
 ;;63.04~463079~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",127,0)
 ;;63.04~6017001~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",128,0)
 ;;63.04~6017005~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",129,0)
 ;;63.04~6017010~NON-REACTIVE~4500816~1
"RTN","HDI1000F",130,0)
 ;;63.04~6017010~REACTIVE~4500866~1
"RTN","HDI1000F",131,0)
 ;;63.04~6017012~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",132,0)
 ;;63.04~6017021~NEG~4500797~1
"RTN","HDI1000F",133,0)
 ;;63.04~6017021~POS~4500848~1
"RTN","HDI1000F",134,0)
 ;;63.04~6017047~ABNORMAL~4500656~1
"RTN","HDI1000F",135,0)
 ;;63.04~6017047~NEG FOR INTRAEPITHELIAN LESION OR MALIGNANCY~4500798~1
"RTN","HDI1000F",136,0)
 ;;63.04~6017047~RESULTS LIMITED BY~4500878~1
"RTN","HDI1000F",137,0)
 ;;63.04~6017047~UNSATISFACTORY~4500928~1
"RTN","HDI1000F",138,0)
 ;;63.04~6017051~Negative~4500802~1
"RTN","HDI1000F",139,0)
 ;;63.04~6017051~POSITIVE~4500849~1
"RTN","HDI1000F",140,0)
 ;;63.04~6017052~Negative~4500802~1
"RTN","HDI1000F",141,0)
 ;;63.04~6017052~POSITIVE~4500849~1
"RTN","HDI1000F",142,0)
 ;;63.04~6017053~Negative~4500802~1
"RTN","HDI1000F",143,0)
 ;;63.04~6017053~POSITIVE~4500849~1
"RTN","HDI1000F",144,0)
 ;;63.04~6017055~Negative~4500802~1
"RTN","HDI1000F",145,0)
 ;;63.04~6017055~POSITIVE~4500849~1
"RTN","HDI1000F",146,0)
 ;;63.04~6017056~Negative~4500802~1
"RTN","HDI1000F",147,0)
 ;;63.04~6017056~POSITIVE~4500849~1
"RTN","HDI1000F",148,0)
 ;;63.04~6017057~Negative~4500802~1
"RTN","HDI1000F",149,0)
 ;;63.04~6017057~POSITIVE~4500849~1
"RTN","HDI1000F",150,0)
 ;;63.04~6017058~Negative~4500802~1
"RTN","HDI1000F",151,0)
 ;;63.04~6017058~POSITIVE~4500849~1
"RTN","HDI1000F",152,0)
 ;;63.04~6017077~463~4500900~1
"RTN","HDI1000F",153,0)
 ;;63.04~6017129~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",154,0)
 ;;63.04~6017147~NEGATIVE~4500801~1
"RTN","HDI1000F",155,0)
 ;;63.04~6017147~POSITIVE~4500849~1
"RTN","HDI1000F",156,0)
 ;;63.04~6017176~ABNORMAL~4500656~1
"RTN","HDI1000F",157,0)
 ;;63.04~6017176~NORMAL~4500818~1
"RTN","HDI1000F",158,0)
 ;;63.04~6017179~NEGATIVE~4500801~1
"RTN","HDI1000F",159,0)
 ;;63.04~6017179~POSITIVE~4500849~1
"RTN","HDI1000F",160,0)
 ;;63.04~6017180~NEGATIVE~4500801~1
"RTN","HDI1000F",161,0)
 ;;63.04~6017180~POSITIVE~4500849~1
"RTN","HDI1000F",162,0)
 ;;63.04~6017220~SEE SEPARATE REPORT~4500903~1
"RTN","HDI1000F",163,0)
 ;;63.04~6017220~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",164,0)
 ;;63.04~6017224~NEGATIVE~4500801~1
"RTN","HDI1000F",165,0)
 ;;63.04~6017224~POSITIVE~4500849~1
"RTN","HDI1000F",166,0)
 ;;63.04~6017225~NEGATIVE~4500801~1
"RTN","HDI1000F",167,0)
 ;;63.04~6017225~POSITIVE~4500849~1
"RTN","HDI1000F",168,0)
 ;;63.04~6017226~NEGATIVE~4500801~1
"RTN","HDI1000F",169,0)
 ;;63.04~6017226~POSITIVE~4500849~1
"RTN","HDI1000F",170,0)
 ;;63.04~6017238~SEE CHART COPY~4500898~1
"RTN","HDI1000F",171,0)
 ;;63.04~6017238~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",172,0)
 ;;63.04~6017279~NONREACTIVE~4500814~1
"RTN","HDI1000F",173,0)
 ;;63.04~6017279~REACTIVE~4500866~1
"RTN","HDI1000F",174,0)
 ;;63.04~6017280~NONREACTIVE~4500814~1
"RTN","HDI1000F",175,0)
 ;;63.04~6017280~REACTIVE~4500866~1
"RTN","HDI1000F",176,0)
 ;;63.04~6017281~NONREACTIVE~4500814~1
"RTN","HDI1000F",177,0)
 ;;63.04~6017281~REACTIVE~4500866~1
"RTN","HDI1000F",178,0)
 ;;63.04~6017282~NONREACTIVE~4500814~1
"RTN","HDI1000F",179,0)
 ;;63.04~6017282~REACTIVE~4500866~1
"RTN","HDI1000F",180,0)
 ;;63.04~6017283~NONREACTIVE~4500814~1
"RTN","HDI1000F",181,0)
 ;;63.04~6017283~REACTIVE~4500866~1
"RTN","HDI1000F",182,0)
 ;;63.04~6017284~PRESENT~4500858~1
"RTN","HDI1000F",183,0)
 ;;63.04~6017285~PRESENT~4500858~1
"RTN","HDI1000F",184,0)
 ;;63.04~6017286~FEW~4500729~1
"RTN","HDI1000F",185,0)
 ;;63.04~6017286~MANY~4500779~1
"RTN","HDI1000F",186,0)
 ;;63.04~6017286~MODERATE~4500791~1
"RTN","HDI1000F",187,0)
 ;;63.04~6017286~RARE~4500865~1
"RTN","HDI1000F",188,0)
 ;;63.04~6017287~FEW~4500729~1
"RTN","HDI1000F",189,0)
 ;;63.04~6017287~MANY~4500779~1
"RTN","HDI1000F",190,0)
 ;;63.04~6017287~MODERATE~4500791~1
"RTN","HDI1000F",191,0)
 ;;63.04~6017287~RARE~4500865~1
"RTN","HDI1000F",192,0)
 ;;63.04~6017288~FEW~4500729~1
"RTN","HDI1000F",193,0)
 ;;63.04~6017288~MANY~4500779~1
"RTN","HDI1000F",194,0)
 ;;63.04~6017288~MODERATE~4500791~1
"RTN","HDI1000F",195,0)
 ;;63.04~6017288~RARE~4500865~1
"RTN","HDI1000F",196,0)
 ;;63.04~6017299~NEGATIVE~4500801~1
"RTN","HDI1000F",197,0)
 ;;63.04~6017299~POSITIVE~4500849~1
"RTN","HDI1000F",198,0)
 ;;63.04~6017300~POSITIVE~4500699~1
"RTN","HDI1000F",199,0)
 ;;63.04~6017300~NEGATIVE~4500820~1
"RTN","HDI1000F",200,0)
 ;;63.04~6017301~A~4500653~1
"RTN","HDI1000F",201,0)
 ;;63.04~6017301~AB~4500654~1
"RTN","HDI1000F",202,0)
 ;;63.04~6017301~B~4500673~1
"RTN","HDI1000F",203,0)
 ;;63.04~6017301~O~4500824~1
"RTN","HDI1000F",204,0)
 ;;63.04~6017302~NEG~4500797~1
"RTN","HDI1000F",205,0)
 ;;63.04~6017302~NEG, Du-NEG~4500799~1
"RTN","HDI1000F",206,0)
 ;;63.04~6017302~NEG, Du-POS~4500800~1
"RTN","HDI1000F",207,0)
 ;;63.04~6017302~POS~4500848~1
"RTN","HDI1000F",208,0)
 ;;63.04~6017308~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",209,0)
 ;;63.04~6017316~NO~4500630~1
"RTN","HDI1000F",210,0)
 ;;63.04~6017316~YES~4500633~1
"RTN","HDI1000F",211,0)
 ;;63.04~6017326~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",212,0)
 ;;63.04~6017330~NEG~4500797~1
"RTN","HDI1000F",213,0)
 ;;63.04~6017330~POS~4500848~1
"RTN","HDI1000F",214,0)
 ;;63.04~6017332~NEG~4500797~1
"RTN","HDI1000F",215,0)
 ;;63.04~6017332~POS~4500848~1
"RTN","HDI1000F",216,0)
 ;;63.04~6017334~SEE VISTA IMAGING FOR SCANNED REPORT~4500904~1
"RTN","HDI1000F",217,0)
 ;;63.05~0.02~0~4500630~1
"RTN","HDI1000F",218,0)
 ;;63.05~0.02~1~4500633~1
"RTN","HDI1000F",219,0)
 ;;63.05~0.09~1~4500633~1
"RTN","HDI1000F",220,0)
 ;;63.05~11.5~F~4500739~1
"RTN","HDI1000F",221,0)
 ;;63.05~11.5~P~4500856~1
"RTN","HDI1000F",222,0)
 ;;63.05~11.51~N~4500801~1
"RTN","HDI1000F",223,0)
 ;;63.05~11.51~P~4500849~1
"RTN","HDI1000F",224,0)
 ;;63.05~11.57~N~4500801~1
"RTN","HDI1000F",225,0)
 ;;63.05~11.57~P~4500849~1
"RTN","HDI1000F",226,0)
 ;;63.05~15~F~4500739~1
"RTN","HDI1000F",227,0)
 ;;63.05~15~P~4500856~1
"RTN","HDI1000F",228,0)
 ;;63.05~19~F~4500739~1
"RTN","HDI1000F",229,0)
 ;;63.05~19~P~4500856~1
"RTN","HDI1000F",230,0)
 ;;63.05~23~F~4500739~1
"RTN","HDI1000F",231,0)
 ;;63.05~23~P~4500856~1
"RTN","HDI1000F",232,0)
 ;;63.05~24~CN~4500686~1
"RTN","HDI1000F",233,0)
 ;;63.05~24~CP~4500687~1
"RTN","HDI1000F",234,0)
 ;;63.05~24~DN~4500700~1
"RTN","HDI1000F",235,0)
 ;;63.05~24~DP~4500701~1
"RTN","HDI1000F",236,0)
 ;;63.05~34~F~4500738~1
"RTN","HDI1000F",237,0)
 ;;63.05~34~P~4500855~1
"RTN","HDI1000F",238,0)
 ;;63.05~38~1~4500633~1
"RTN","HDI1000F",239,0)
 ;;63.08~0.14~0~4500941~1
"RTN","HDI1000F",240,0)
 ;;63.08~0.14~1~4500942~1
"RTN","HDI1000F",241,0)
 ;;63.08~0.14~2~4500943~1
"RTN","HDI1000F",242,0)
 ;;63.08~0.14~3~4500944~1
"RTN","HDI1000F",243,0)
 ;;63.08~0.14~4~4500945~1
"RTN","HDI1000F",244,0)
 ;;63.08~0.14~5~4500946~1
"RTN","HDI1000F",245,0)
 ;;63.08~0.14~6~4500947~1
"RTN","HDI1000F",246,0)
 ;;63.08~0.14~7~4500948~1
"RTN","HDI1000F",247,0)
 ;;63.08~0.14~8~4500949~1
"RTN","HDI1000F",248,0)
 ;;63.08~0.14~9~4500950~1
"RTN","HDI1000F",249,0)
 ;;63.08~0.172~0~4500630~1
"RTN","HDI1000F",250,0)
 ;;63.08~0.172~1~4500633~1
"RTN","HDI1000F",251,0)
 ;;
"RTN","HDI1000G")
0^36^B75386862
"RTN","HDI1000G",1,0)
HDI1000G ;BPFO/JRP - HDI v1.0 POST-INSTALL DATA;4/19/2005
"RTN","HDI1000G",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDI1000G",3,0)
 ;
"RTN","HDI1000G",4,0)
LABPHAR ;VUIDs for Lab & Pharmacy domain (cont)
"RTN","HDI1000G",5,0)
 ;;63.084~0.02~0~4500630~1
"RTN","HDI1000G",6,0)
 ;;63.084~0.02~1~4500633~1
"RTN","HDI1000G",7,0)
 ;;63.084~0.06~0~4500630~1
"RTN","HDI1000G",8,0)
 ;;63.084~0.06~1~4500633~1
"RTN","HDI1000G",9,0)
 ;;63.084~0.07~0~4500630~1
"RTN","HDI1000G",10,0)
 ;;63.084~0.07~1~4500633~1
"RTN","HDI1000G",11,0)
 ;;63.09~0.101~0~4500630~1
"RTN","HDI1000G",12,0)
 ;;63.09~0.101~0~4500630~1
"RTN","HDI1000G",13,0)
 ;;63.09~0.101~1~4500633~1
"RTN","HDI1000G",14,0)
 ;;63.09~0.101~1~4500633~1
"RTN","HDI1000G",15,0)
 ;;63.09~0.14~0~4500961~1
"RTN","HDI1000G",16,0)
 ;;63.09~0.14~1~4500962~1
"RTN","HDI1000G",17,0)
 ;;63.09~0.14~2~4500963~1
"RTN","HDI1000G",18,0)
 ;;63.09~0.14~3~4500964~1
"RTN","HDI1000G",19,0)
 ;;63.09~0.14~4~4500965~1
"RTN","HDI1000G",20,0)
 ;;63.09~0.14~5~4500966~1
"RTN","HDI1000G",21,0)
 ;;63.09~0.14~6~4500967~1
"RTN","HDI1000G",22,0)
 ;;63.09~0.14~7~4500968~1
"RTN","HDI1000G",23,0)
 ;;63.09~0.14~8~4500969~1
"RTN","HDI1000G",24,0)
 ;;63.09~0.14~9~4500970~1
"RTN","HDI1000G",25,0)
 ;;63.09~0.172~0~4500630~1
"RTN","HDI1000G",26,0)
 ;;63.09~0.172~1~4500633~1
"RTN","HDI1000G",27,0)
 ;;63.2021~0.03~0~4500630~1
"RTN","HDI1000G",28,0)
 ;;63.2021~0.03~1~4500633~1
"RTN","HDI1000G",29,0)
 ;;63.207~0.02~0~4500630~1
"RTN","HDI1000G",30,0)
 ;;63.207~0.02~0~4500630~1
"RTN","HDI1000G",31,0)
 ;;63.207~0.02~1~4500633~1
"RTN","HDI1000G",32,0)
 ;;63.207~0.02~1~4500633~1
"RTN","HDI1000G",33,0)
 ;;63.219~0.01~C~4500689~1
"RTN","HDI1000G",34,0)
 ;;63.219~0.01~I~4500756~1
"RTN","HDI1000G",35,0)
 ;;63.219~0.01~IP~4500757~1
"RTN","HDI1000G",36,0)
 ;;63.219~0.01~L~4500771~1
"RTN","HDI1000G",37,0)
 ;;63.219~0.01~P~4500845~1
"RTN","HDI1000G",38,0)
 ;;63.24~0.02~0~4500797~1
"RTN","HDI1000G",39,0)
 ;;63.24~0.02~0~4500848~1
"RTN","HDI1000G",40,0)
 ;;63.26~0.01~C~4500689~1
"RTN","HDI1000G",41,0)
 ;;63.26~0.01~E~4500721~1
"RTN","HDI1000G",42,0)
 ;;63.26~0.01~F~4500740~1
"RTN","HDI1000G",43,0)
 ;;63.26~0.01~I~4500756~1
"RTN","HDI1000G",44,0)
 ;;63.26~0.01~IP~4500757~1
"RTN","HDI1000G",45,0)
 ;;63.26~0.01~P~4500845~1
"RTN","HDI1000G",46,0)
 ;;63.282~0.02~0~4500797~1
"RTN","HDI1000G",47,0)
 ;;63.282~0.02~1~4500848~1
"RTN","HDI1000G",48,0)
 ;;63.292~0.01~N~4500801~1
"RTN","HDI1000G",49,0)
 ;;63.292~0.01~P~4500849~1
"RTN","HDI1000G",50,0)
 ;;63.3~1.5~P~4500844~1
"RTN","HDI1000G",51,0)
 ;;63.3~1.5~T~4500921~1
"RTN","HDI1000G",52,0)
 ;;63.3~1.8~P~4500844~1
"RTN","HDI1000G",53,0)
 ;;63.3~1.8~T~4500921~1
"RTN","HDI1000G",54,0)
 ;;63.3~2.006017001~A~4500665~1
"RTN","HDI1000G",55,0)
 ;;63.3~2.006017001~N~4500805~1
"RTN","HDI1000G",56,0)
 ;;63.3~2.006017001~R~4500877~1
"RTN","HDI1000G",57,0)
 ;;63.3~2.006017002~A~4500665~1
"RTN","HDI1000G",58,0)
 ;;63.3~2.006017002~N~4500805~1
"RTN","HDI1000G",59,0)
 ;;63.3~2.006017002~R~4500877~1
"RTN","HDI1000G",60,0)
 ;;63.3~2.006017003~A~4500665~1
"RTN","HDI1000G",61,0)
 ;;63.3~2.006017003~N~4500805~1
"RTN","HDI1000G",62,0)
 ;;63.3~2.006017003~R~4500877~1
"RTN","HDI1000G",63,0)
 ;;63.3~2.006017004~A~4500665~1
"RTN","HDI1000G",64,0)
 ;;63.3~2.006017004~N~4500805~1
"RTN","HDI1000G",65,0)
 ;;63.3~2.006017004~R~4500877~1
"RTN","HDI1000G",66,0)
 ;;63.3~2.006017005~A~4500665~1
"RTN","HDI1000G",67,0)
 ;;63.3~2.006017005~N~4500805~1
"RTN","HDI1000G",68,0)
 ;;63.3~2.006017005~R~4500877~1
"RTN","HDI1000G",69,0)
 ;;63.3~2.006017006~A~4500665~1
"RTN","HDI1000G",70,0)
 ;;63.3~2.006017006~N~4500805~1
"RTN","HDI1000G",71,0)
 ;;63.3~2.006017006~R~4500877~1
"RTN","HDI1000G",72,0)
 ;;63.3~2.006017007~A~4500665~1
"RTN","HDI1000G",73,0)
 ;;63.3~2.006017007~N~4500805~1
"RTN","HDI1000G",74,0)
 ;;63.3~2.006017007~R~4500877~1
"RTN","HDI1000G",75,0)
 ;;63.3~2.006017008~A~4500665~1
"RTN","HDI1000G",76,0)
 ;;63.3~2.006017008~N~4500805~1
"RTN","HDI1000G",77,0)
 ;;63.3~2.006017008~R~4500877~1
"RTN","HDI1000G",78,0)
 ;;63.3~2.006017009~A~4500665~1
"RTN","HDI1000G",79,0)
 ;;63.3~2.006017009~N~4500805~1
"RTN","HDI1000G",80,0)
 ;;63.3~2.006017009~R~4500877~1
"RTN","HDI1000G",81,0)
 ;;63.3~2.00601701~A~4500665~1
"RTN","HDI1000G",82,0)
 ;;63.3~2.00601701~N~4500805~1
"RTN","HDI1000G",83,0)
 ;;63.3~2.00601701~R~4500877~1
"RTN","HDI1000G",84,0)
 ;;63.3~2.006017011~A~4500665~1
"RTN","HDI1000G",85,0)
 ;;63.3~2.006017011~N~4500805~1
"RTN","HDI1000G",86,0)
 ;;63.3~2.006017011~R~4500877~1
"RTN","HDI1000G",87,0)
 ;;63.3~5.2~A~4500665~1
"RTN","HDI1000G",88,0)
 ;;63.3~5.2~N~4500805~1
"RTN","HDI1000G",89,0)
 ;;63.3~5.2~R~4500877~1
"RTN","HDI1000G",90,0)
 ;;63.3~10.2~A~4500665~1
"RTN","HDI1000G",91,0)
 ;;63.3~10.2~N~4500805~1
"RTN","HDI1000G",92,0)
 ;;63.3~10.2~R~4500877~1
"RTN","HDI1000G",93,0)
 ;;63.3~15.2~A~4500665~1
"RTN","HDI1000G",94,0)
 ;;63.3~15.2~N~4500805~1
"RTN","HDI1000G",95,0)
 ;;63.3~15.2~R~4500877~1
"RTN","HDI1000G",96,0)
 ;;63.3~20.2~A~4500665~1
"RTN","HDI1000G",97,0)
 ;;63.3~20.2~N~4500805~1
"RTN","HDI1000G",98,0)
 ;;63.3~20.2~R~4500877~1
"RTN","HDI1000G",99,0)
 ;;63.3~25.2~A~4500665~1
"RTN","HDI1000G",100,0)
 ;;63.3~25.2~N~4500805~1
"RTN","HDI1000G",101,0)
 ;;63.3~25.2~R~4500877~1
"RTN","HDI1000G",102,0)
 ;;63.3~30.2~A~4500665~1
"RTN","HDI1000G",103,0)
 ;;63.3~30.2~N~4500805~1
"RTN","HDI1000G",104,0)
 ;;63.3~30.2~R~4500877~1
"RTN","HDI1000G",105,0)
 ;;63.3~35.2~A~4500665~1
"RTN","HDI1000G",106,0)
 ;;63.3~35.2~N~4500805~1
"RTN","HDI1000G",107,0)
 ;;63.3~35.2~R~4500877~1
"RTN","HDI1000G",108,0)
 ;;63.3~40.2~A~4500665~1
"RTN","HDI1000G",109,0)
 ;;63.3~40.2~N~4500805~1
"RTN","HDI1000G",110,0)
 ;;63.3~40.2~R~4500877~1
"RTN","HDI1000G",111,0)
 ;;63.3~45.2~A~4500665~1
"RTN","HDI1000G",112,0)
 ;;63.3~45.2~N~4500805~1
"RTN","HDI1000G",113,0)
 ;;63.3~45.2~R~4500877~1
"RTN","HDI1000G",114,0)
 ;;63.3~50.2~A~4500665~1
"RTN","HDI1000G",115,0)
 ;;63.3~50.2~N~4500805~1
"RTN","HDI1000G",116,0)
 ;;63.3~50.2~R~4500877~1
"RTN","HDI1000G",117,0)
 ;;63.3~55.2~A~4500665~1
"RTN","HDI1000G",118,0)
 ;;63.3~55.2~N~4500805~1
"RTN","HDI1000G",119,0)
 ;;63.3~55.2~R~4500877~1
"RTN","HDI1000G",120,0)
 ;;63.3~60.2~A~4500665~1
"RTN","HDI1000G",121,0)
 ;;63.3~60.2~N~4500805~1
"RTN","HDI1000G",122,0)
 ;;63.3~60.2~R~4500877~1
"RTN","HDI1000G",123,0)
 ;;63.3~65.2~A~4500665~1
"RTN","HDI1000G",124,0)
 ;;63.3~65.2~N~4500805~1
"RTN","HDI1000G",125,0)
 ;;63.3~65.2~R~4500877~1
"RTN","HDI1000G",126,0)
 ;;63.3~70.2~A~4500665~1
"RTN","HDI1000G",127,0)
 ;;63.3~70.2~N~4500805~1
"RTN","HDI1000G",128,0)
 ;;63.3~70.2~R~4500877~1
"RTN","HDI1000G",129,0)
 ;;63.3~75.2~A~4500665~1
"RTN","HDI1000G",130,0)
 ;;63.3~75.2~N~4500805~1
"RTN","HDI1000G",131,0)
 ;;63.3~75.2~R~4500877~1
"RTN","HDI1000G",132,0)
 ;;63.3~80.2~A~4500665~1
"RTN","HDI1000G",133,0)
 ;;63.3~80.2~N~4500805~1
"RTN","HDI1000G",134,0)
 ;;63.3~80.2~R~4500877~1
"RTN","HDI1000G",135,0)
 ;;63.3~85.2~A~4500665~1
"RTN","HDI1000G",136,0)
 ;;63.3~85.2~N~4500805~1
"RTN","HDI1000G",137,0)
 ;;63.3~85.2~R~4500877~1
"RTN","HDI1000G",138,0)
 ;;63.3~90.2~A~4500665~1
"RTN","HDI1000G",139,0)
 ;;63.3~90.2~N~4500805~1
"RTN","HDI1000G",140,0)
 ;;63.3~90.2~R~4500877~1
"RTN","HDI1000G",141,0)
 ;;63.3~95.2~A~4500665~1
"RTN","HDI1000G",142,0)
 ;;63.3~95.2~N~4500805~1
"RTN","HDI1000G",143,0)
 ;;63.3~95.2~R~4500877~1
"RTN","HDI1000G",144,0)
 ;;63.3~100.2~A~4500665~1
"RTN","HDI1000G",145,0)
 ;;63.3~100.2~N~4500805~1
"RTN","HDI1000G",146,0)
 ;;63.3~100.2~R~4500877~1
"RTN","HDI1000G",147,0)
 ;;63.3~105.2~A~4500665~1
"RTN","HDI1000G",148,0)
 ;;63.3~105.2~N~4500805~1
"RTN","HDI1000G",149,0)
 ;;63.3~105.2~R~4500877~1
"RTN","HDI1000G",150,0)
 ;;63.3~110.2~A~4500665~1
"RTN","HDI1000G",151,0)
 ;;63.3~110.2~N~4500805~1
"RTN","HDI1000G",152,0)
 ;;63.3~110.2~R~4500877~1
"RTN","HDI1000G",153,0)
 ;;63.3~115.2~A~4500665~1
"RTN","HDI1000G",154,0)
 ;;63.3~115.2~N~4500805~1
"RTN","HDI1000G",155,0)
 ;;63.3~115.2~R~4500877~1
"RTN","HDI1000G",156,0)
 ;;63.3~120.2~A~4500665~1
"RTN","HDI1000G",157,0)
 ;;63.3~120.2~N~4500805~1
"RTN","HDI1000G",158,0)
 ;;63.3~120.2~R~4500877~1
"RTN","HDI1000G",159,0)
 ;;63.3~125.2~A~4500665~1
"RTN","HDI1000G",160,0)
 ;;63.3~125.2~N~4500805~1
"RTN","HDI1000G",161,0)
 ;;63.3~125.2~R~4500877~1
"RTN","HDI1000G",162,0)
 ;;63.3~130.2~A~4500665~1
"RTN","HDI1000G",163,0)
 ;;63.3~130.2~N~4500805~1
"RTN","HDI1000G",164,0)
 ;;63.3~130.2~R~4500877~1
"RTN","HDI1000G",165,0)
 ;;63.3~135.2~A~4500665~1
"RTN","HDI1000G",166,0)
 ;;63.3~135.2~N~4500805~1
"RTN","HDI1000G",167,0)
 ;;63.3~135.2~R~4500877~1
"RTN","HDI1000G",168,0)
 ;;63.3~140.2~A~4500665~1
"RTN","HDI1000G",169,0)
 ;;63.3~140.2~N~4500805~1
"RTN","HDI1000G",170,0)
 ;;63.3~140.2~R~4500877~1
"RTN","HDI1000G",171,0)
 ;;63.3~145.2~A~4500665~1
"RTN","HDI1000G",172,0)
 ;;63.3~145.2~N~4500805~1
"RTN","HDI1000G",173,0)
 ;;63.3~145.2~R~4500877~1
"RTN","HDI1000G",174,0)
 ;;63.3~150.2~A~4500665~1
"RTN","HDI1000G",175,0)
 ;;63.3~150.2~N~4500805~1
"RTN","HDI1000G",176,0)
 ;;63.3~150.2~R~4500877~1
"RTN","HDI1000G",177,0)
 ;;63.3~151.2~A~4500665~1
"RTN","HDI1000G",178,0)
 ;;63.3~151.2~N~4500805~1
"RTN","HDI1000G",179,0)
 ;;63.3~151.2~R~4500877~1
"RTN","HDI1000G",180,0)
 ;;63.3~152.2~A~4500665~1
"RTN","HDI1000G",181,0)
 ;;63.3~152.2~N~4500805~1
"RTN","HDI1000G",182,0)
 ;;63.3~152.2~R~4500877~1
"RTN","HDI1000G",183,0)
 ;;63.3~153.2~A~4500665~1
"RTN","HDI1000G",184,0)
 ;;63.3~153.2~N~4500805~1
"RTN","HDI1000G",185,0)
 ;;63.3~153.2~R~4500877~1
"RTN","HDI1000G",186,0)
 ;;63.3~154.2~A~4500665~1
"RTN","HDI1000G",187,0)
 ;;63.3~154.2~N~4500805~1
"RTN","HDI1000G",188,0)
 ;;63.3~154.2~R~4500877~1
"RTN","HDI1000G",189,0)
 ;;63.3~155.2~A~4500665~1
"RTN","HDI1000G",190,0)
 ;;63.3~155.2~N~4500805~1
"RTN","HDI1000G",191,0)
 ;;63.3~155.2~R~4500877~1
"RTN","HDI1000G",192,0)
 ;;63.3~156.2~A~4500665~1
"RTN","HDI1000G",193,0)
 ;;63.3~156.2~N~4500805~1
"RTN","HDI1000G",194,0)
 ;;63.3~156.2~R~4500877~1
"RTN","HDI1000G",195,0)
 ;;63.3~157.2~A~4500665~1
"RTN","HDI1000G",196,0)
 ;;63.3~157.2~N~4500805~1
"RTN","HDI1000G",197,0)
 ;;63.3~157.2~R~4500877~1
"RTN","HDI1000G",198,0)
 ;;63.3~158.2~A~4500665~1
"RTN","HDI1000G",199,0)
 ;;63.3~158.2~N~4500805~1
"RTN","HDI1000G",200,0)
 ;;63.3~158.2~R~4500877~1
"RTN","HDI1000G",201,0)
 ;;63.3~159.2~A~4500665~1
"RTN","HDI1000G",202,0)
 ;;63.3~159.2~N~4500805~1
"RTN","HDI1000G",203,0)
 ;;63.3~159.2~R~4500877~1
"RTN","HDI1000G",204,0)
 ;;63.3~160.2~A~4500665~1
"RTN","HDI1000G",205,0)
 ;;63.3~160.2~N~4500805~1
"RTN","HDI1000G",206,0)
 ;;63.3~160.2~R~4500877~1
"RTN","HDI1000G",207,0)
 ;;63.324~0.02~0~4500630~1
"RTN","HDI1000G",208,0)
 ;;63.324~0.02~0~4500630~1
"RTN","HDI1000G",209,0)
 ;;63.324~0.02~1~4500633~1
"RTN","HDI1000G",210,0)
 ;;63.324~0.02~1~4500633~1
"RTN","HDI1000G",211,0)
 ;;63.331~0.03~0~4500630~1
"RTN","HDI1000G",212,0)
 ;;63.331~0.03~1~4500633~1
"RTN","HDI1000G",213,0)
 ;;63.35~0.01~A~4500661~1
"RTN","HDI1000G",214,0)
 ;;63.35~0.01~C~4500694~1
"RTN","HDI1000G",215,0)
 ;;63.35~0.01~E~4500719~1
"RTN","HDI1000G",216,0)
 ;;63.35~0.01~F~4500735~1
"RTN","HDI1000G",217,0)
 ;;63.35~0.01~G~4500743~1
"RTN","HDI1000G",218,0)
 ;;63.35~0.01~L~4500769~1
"RTN","HDI1000G",219,0)
 ;;63.35~0.01~M~4500785~1
"RTN","HDI1000G",220,0)
 ;;63.35~0.01~R~4500884~1
"RTN","HDI1000G",221,0)
 ;;63.35~0.01~S~4500897~1
"RTN","HDI1000G",222,0)
 ;;63.35~0.01~T~4500920~1
"RTN","HDI1000G",223,0)
 ;;63.42~1~P~4500844~1
"RTN","HDI1000G",224,0)
 ;;63.42~1~R~4500864~1
"RTN","HDI1000G",225,0)
 ;;63.42~1~T~4500921~1
"RTN","HDI1000G",226,0)
 ;;63.812~0.04~2~4500726~1
"RTN","HDI1000G",227,0)
 ;;63.812~0.04~1~4500886~1
"RTN","HDI1000G",228,0)
 ;;63.812~0.04~3~4500915~1
"RTN","HDI1000G",229,0)
 ;;63.812~0.05~0~4500630~1
"RTN","HDI1000G",230,0)
 ;;63.812~0.05~1~4500633~1
"RTN","HDI1000G",231,0)
 ;;63.8121~0.03~0~4500630~1
"RTN","HDI1000G",232,0)
 ;;63.8121~0.03~1~4500633~1
"RTN","HDI1000G",233,0)
 ;;63.817~0.02~0~4500630~1
"RTN","HDI1000G",234,0)
 ;;63.817~0.02~0~4500630~1
"RTN","HDI1000G",235,0)
 ;;63.817~0.02~1~4500633~1
"RTN","HDI1000G",236,0)
 ;;63.817~0.02~1~4500633~1
"RTN","HDI1000G",237,0)
 ;;63.819~0.01~C~4500689~1
"RTN","HDI1000G",238,0)
 ;;63.819~0.01~E~4500720~1
"RTN","HDI1000G",239,0)
 ;;63.819~0.01~F~4500740~1
"RTN","HDI1000G",240,0)
 ;;63.819~0.01~I~4500756~1
"RTN","HDI1000G",241,0)
 ;;63.819~0.01~IP~4500757~1
"RTN","HDI1000G",242,0)
 ;;63.819~0.01~P~4500845~1
"RTN","HDI1000G",243,0)
 ;;63.82~0.02~0~4500797~1
"RTN","HDI1000G",244,0)
 ;;63.82~0.02~1~4500848~1
"RTN","HDI1000G",245,0)
 ;;63.822~0.03~0~4500630~1
"RTN","HDI1000G",246,0)
 ;;63.822~0.03~1~4500633~1
"RTN","HDI1000G",247,0)
 ;;63.824~0.03~0~4500630~1
"RTN","HDI1000G",248,0)
 ;;63.824~0.03~1~4500633~1
"RTN","HDI1000G",249,0)
 ;;63.824~0.04~0~4500823~1
"RTN","HDI1000G",250,0)
 ;;63.824~0.04~1~4500887~1
"RTN","HDI1000G",251,0)
 ;;63.907~0.02~0~4500630~1
"RTN","HDI1000G",252,0)
 ;;63.907~0.02~0~4500630~1
"RTN","HDI1000G",253,0)
 ;;63.907~0.02~1~4500633~1
"RTN","HDI1000G",254,0)
 ;;63.907~0.02~1~4500633~1
"RTN","HDI1000G",255,0)
 ;;63.919~0.01~C~4500689~1
"RTN","HDI1000G",256,0)
 ;;63.919~0.01~E~4500721~1
"RTN","HDI1000G",257,0)
 ;;63.919~0.01~I~4500756~1
"RTN","HDI1000G",258,0)
 ;;63.919~0.01~IP~4500757~1
"RTN","HDI1000G",259,0)
 ;;63.919~0.01~P~4500845~1
"RTN","HDI1000G",260,0)
 ;;63.982~0.02~0~4500797~1
"RTN","HDI1000G",261,0)
 ;;63.982~0.02~1~4500848~1
"RTN","HDI1000G",262,0)
 ;;64~4~0~4500630~1
"RTN","HDI1000G",263,0)
 ;;64~4~1~4500633~1
"RTN","HDI1000G",264,0)
 ;;64~11~1~4500633~1
"RTN","HDI1000G",265,0)
 ;;64~14~1~4500633~1
"RTN","HDI1000G",266,0)
 ;;64~15~1~4500633~1
"RTN","HDI1000G",267,0)
 ;;64~16~1~4500633~1
"RTN","HDI1000G",268,0)
 ;;64.018~5~CPT~4500693~1
"RTN","HDI1000G",269,0)
 ;;64.018~5~ICD~4500754~1
"RTN","HDI1000G",270,0)
 ;;64.018~5~NOS~4500819~1
"RTN","HDI1000G",271,0)
 ;;64.018~5~SNO~4500908~1
"RTN","HDI1000G",272,0)
 ;;69.5~1~0~4500630~1
"RTN","HDI1000G",273,0)
 ;;69.5~1~1~4500633~1
"RTN","HDI1000G",274,0)
 ;;69.5~10~D~4500696~1
"RTN","HDI1000G",275,0)
 ;;69.5~10~M~4500793~1
"RTN","HDI1000G",276,0)
 ;;69.5~11~0~4500630~1
"RTN","HDI1000G",277,0)
 ;;69.5~11~1~4500633~1
"RTN","HDI1000G",278,0)
 ;;69.5~13~0~4500630~1
"RTN","HDI1000G",279,0)
 ;;69.5~13~1~4500633~1
"RTN","HDI1000G",280,0)
 ;;69.5~16~F~4500728~1
"RTN","HDI1000G",281,0)
 ;;69.5~16~M~4500778~1
"RTN","HDI1000G",282,0)
 ;;69.5~16~O~4500832~1
"RTN","HDI1000G",283,0)
 ;;69.52~1~2~4500690~1
"RTN","HDI1000G",284,0)
 ;;69.52~1~5~4500722~1
"RTN","HDI1000G",285,0)
 ;;69.52~1~3~4500747~1
"RTN","HDI1000G",286,0)
 ;;69.52~1~4~4500770~1
"RTN","HDI1000G",287,0)
 ;;69.52~1~1~4500930~1
"RTN","HDI1000G",288,0)
 ;;69.55~1~2~4500690~1
"RTN","HDI1000G",289,0)
 ;;69.55~1~5~4500722~1
"RTN","HDI1000G",290,0)
 ;;69.55~1~3~4500747~1
"RTN","HDI1000G",291,0)
 ;;69.55~1~4~4500770~1
"RTN","HDI1000G",292,0)
 ;;69.55~1~1~4500930~1
"RTN","HDI1000G",293,0)
 ;;95.3~20~1~4500697~1
"RTN","HDI1000G",294,0)
 ;;95.3~41~3~4500683~1
"RTN","HDI1000G",295,0)
 ;;95.3~41~2~4500685~1
"RTN","HDI1000G",296,0)
 ;;95.3~41~1~4500768~1
"RTN","HDI1000G",297,0)
 ;;
"RTN","HDISVAP")
0^28^B2851385
"RTN","HDISVAP",1,0)
HDISVAP ;ALB/RMO - Application Programmer API(s); 2/11/05@9:10:00
"RTN","HDISVAP",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVAP",3,0)
 ;
"RTN","HDISVAP",4,0)
NTRTMSG(HDISARYF,HDISARY) ;New Term Rapid Turnaround (NTRT) Message
"RTN","HDISVAP",5,0)
 ; Input  -- HDISARYF Return Text in an Array Flag  (Optional- Default 0)
"RTN","HDISVAP",6,0)
 ;                    1=Yes and 0=No
"RTN","HDISVAP",7,0)
 ; Output -- HDISARY  If requested, an array containing the NTRT Message is returned otherwise
"RTN","HDISVAP",8,0)
 ;                    the message is diplayed on the screen.  The Output variable is assumed
"RTN","HDISVAP",9,0)
 ;                    to be Null when the API is invoked.
"RTN","HDISVAP",10,0)
 N HDISLNE,HDISTXT
"RTN","HDISVAP",11,0)
 F HDISLNE=1:1 S HDISTXT=$P($T(MSG+HDISLNE),";;",2) Q:HDISTXT="END"  D
"RTN","HDISVAP",12,0)
 . I $G(HDISARYF) D
"RTN","HDISVAP",13,0)
 . . S HDISARY(HDISLNE)=HDISTXT
"RTN","HDISVAP",14,0)
 . ELSE  D
"RTN","HDISVAP",15,0)
 . . W !?3,HDISTXT
"RTN","HDISVAP",16,0)
 Q
"RTN","HDISVAP",17,0)
 ;
"RTN","HDISVAP",18,0)
MSG ;NTRT message text
"RTN","HDISVAP",19,0)
 ;;
"RTN","HDISVAP",20,0)
 ;;In support of national standardization of the contents of this file,
"RTN","HDISVAP",21,0)
 ;;local site addition and modification functions are no longer available.
"RTN","HDISVAP",22,0)
 ;;If you wish to request a new term or modify an existing term, please
"RTN","HDISVAP",23,0)
 ;;refer to the New Term Rapid Turnaround (NTRT) web site located at
"RTN","HDISVAP",24,0)
 ;;http://vista.med.va.gov/ntrt/.  If you have any questions regarding this 
"RTN","HDISVAP",25,0)
 ;;new term request process, please contact the ERT NTRT Coordinator 
"RTN","HDISVAP",26,0)
 ;;via e-mail at VHA OI SDD HDS NTRT.
"RTN","HDISVAP",27,0)
 ;;
"RTN","HDISVAP",28,0)
 ;;END
"RTN","HDISVC00")
0^2^B5174699
"RTN","HDISVC00",1,0)
HDISVC00 ;BPFO/JRP - PROCESS XML DOCS ON VISTA SYSTEM;1/4/2005
"RTN","HDISVC00",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVC00",3,0)
 ;
"RTN","HDISVC00",4,0)
MAIN(PRSARR,ERRARR) ;Main entry point for processing XML document
"RTN","HDISVC00",5,0)
 ; Input : PRSARR - Array containing parsed XML document (closed root)
"RTN","HDISVC00",6,0)
 ;                  This is the output of SAX^HDISVM01
"RTN","HDISVC00",7,0)
 ;         ERRARR - Array to output errors in (closed root)
"RTN","HDISVC00",8,0)
 ;Output : None
"RTN","HDISVC00",9,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVC00",10,0)
 ; Notes : ERRARR is initialized (KILLed) on input
"RTN","HDISVC00",11,0)
 N ROOT,TMP,OOPS,CODE,DESC
"RTN","HDISVC00",12,0)
 ;Check input
"RTN","HDISVC00",13,0)
 I $G(PRSARR)="" D  Q
"RTN","HDISVC00",14,0)
 .S TMP="MAIN^HDISVC00: Input parameter PRSARR was not passed"
"RTN","HDISVC00",15,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",16,0)
 I '$D(@PRSARR) D  Q
"RTN","HDISVC00",17,0)
 .S TMP="MAIN^HDISVC00: Input array "_PRSARR_" (PRSARR) does not exist"
"RTN","HDISVC00",18,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",19,0)
 ;Make sure data structure of parsed document exists
"RTN","HDISVC00",20,0)
 S OOPS=0
"RTN","HDISVC00",21,0)
 F X=1:1 S TMP=$P($T(SUBS+X),";;",2) Q:TMP=""  D
"RTN","HDISVC00",22,0)
 .I $D(@PRSARR@(TMP)) Q
"RTN","HDISVC00",23,0)
 .S TMP="MAIN^HDISVC00: Subscript "_TMP_" missing from input array "_PRSARR_" (PRSARR)"
"RTN","HDISVC00",24,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",25,0)
 .S OOPS=1
"RTN","HDISVC00",26,0)
 I OOPS Q
"RTN","HDISVC00",27,0)
 ;Get root element name
"RTN","HDISVC00",28,0)
 S ROOT=$G(@PRSARR@("ESUBS",1))
"RTN","HDISVC00",29,0)
 I ROOT="" D  Q
"RTN","HDISVC00",30,0)
 .S TMP="Root element of XML document could not be determined"
"RTN","HDISVC00",31,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",32,0)
 ;Check for supported root element
"RTN","HDISVC00",33,0)
 S OOPS=1
"RTN","HDISVC00",34,0)
 F X=1:1 S TMP=$P($T(ROOTS+X),";;",2) Q:TMP=""  D  Q:'OOPS
"RTN","HDISVC00",35,0)
 .I $P(TMP,"~",1)'=ROOT Q
"RTN","HDISVC00",36,0)
 .S CODE=$P(TMP,"~",2)
"RTN","HDISVC00",37,0)
 .S DESC=$P(TMP,"~",3)
"RTN","HDISVC00",38,0)
 .S OOPS=0
"RTN","HDISVC00",39,0)
 ;Unsupported root element
"RTN","HDISVC00",40,0)
 I OOPS D  Q
"RTN","HDISVC00",41,0)
 .S TMP="'"_ROOT_"' is not a supported root element (don't know how to process it)"
"RTN","HDISVC00",42,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",43,0)
 ;Code to process document not set
"RTN","HDISVC00",44,0)
 I CODE="" D  Q
"RTN","HDISVC00",45,0)
 .S TMP="Code to process root element '"_ROOT_"' has not been established"
"RTN","HDISVC00",46,0)
 .D ADDERR(TMP,ERRARR)
"RTN","HDISVC00",47,0)
 ;Process XML document
"RTN","HDISVC00",48,0)
 X CODE
"RTN","HDISVC00",49,0)
 ;Done
"RTN","HDISVC00",50,0)
 Q
"RTN","HDISVC00",51,0)
 ;
"RTN","HDISVC00",52,0)
ADDERR(TXT,ERRARR) ;Add to list of errors
"RTN","HDISVC00",53,0)
 ; Input : TXT - Error text
"RTN","HDISVC00",54,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVC00",55,0)
 ;Output : None
"RTN","HDISVC00",56,0)
 ;         @ERRARR@(x) = Error text
"RTN","HDISVC00",57,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC00",58,0)
 N X
"RTN","HDISVC00",59,0)
 I $G(ERRARR)="" Q
"RTN","HDISVC00",60,0)
 S X=1+$O(@ERRARR@(""),-1)
"RTN","HDISVC00",61,0)
 S @ERRARR@(X)=$G(TXT)
"RTN","HDISVC00",62,0)
 Q
"RTN","HDISVC00",63,0)
 ;
"RTN","HDISVC00",64,0)
SUBS ;Required subscripts in parse array (attributes aren't required)
"RTN","HDISVC00",65,0)
 ;;EINDX
"RTN","HDISVC00",66,0)
 ;;ESUBS
"RTN","HDISVC00",67,0)
 ;;DATA
"RTN","HDISVC00",68,0)
 ;;
"RTN","HDISVC00",69,0)
 ;
"RTN","HDISVC00",70,0)
ROOTS ;Root element name~Processing code for root element~Description
"RTN","HDISVC00",71,0)
 ;;Domain~D DOMAIN^HDISVC01(PRSARR,ERRARR)~VUID data from centralized VUID Server
"RTN","HDISVC00",72,0)
 ;;
"RTN","HDISVC01")
0^3^B45121782
"RTN","HDISVC01",1,0)
HDISVC01 ;BPFO/JRP - PROCESS RECEIVED XML DATA;12/20/2004 ; 10 Mar 2005  11:23 AM
"RTN","HDISVC01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVC01",3,0)
 ;
"RTN","HDISVC01",4,0)
DOMAIN(PRSARR,ERRARR) ;Process XML data from VUID Server
"RTN","HDISVC01",5,0)
 ; Input : PRSARR - Array containing parsed XML document (closed root)
"RTN","HDISVC01",6,0)
 ;                  This is the output of SAX^HDISVM01
"RTN","HDISVC01",7,0)
 ;         ERRARR - Array to output errors in (closed root)
"RTN","HDISVC01",8,0)
 ;Output : None
"RTN","HDISVC01",9,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVC01",10,0)
 ; Notes : ERRARR is initialized (KILLed) on input
"RTN","HDISVC01",11,0)
 ;
"RTN","HDISVC01",12,0)
 ;Processing of VUID data disabled - throw error and quit
"RTN","HDISVC01",13,0)
 I $$GETVFAIL^HDISVF02() D  Q
"RTN","HDISVC01",14,0)
 .N TMP
"RTN","HDISVC01",15,0)
 .S TMP="DOMAIN^HDISVC01: Processing of VUID data from central server"
"RTN","HDISVC01",16,0)
 .S TMP=TMP_" is currently disabled"
"RTN","HDISVC01",17,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",18,0)
 N EINDX,ESUBS,AINDX,ASUBS,DATA,TMP,X,Y
"RTN","HDISVC01",19,0)
 N DOMAIN,SOURCE,MAILMAN,INDX,OOPS
"RTN","HDISVC01",20,0)
 S EINDX=$NA(@PRSARR@("EINDX"))
"RTN","HDISVC01",21,0)
 S ESUBS=$NA(@PRSARR@("ESUBS"))
"RTN","HDISVC01",22,0)
 S AINDX=$NA(@PRSARR@("AINDX"))
"RTN","HDISVC01",23,0)
 S ASUBS=$NA(@PRSARR@("ASUBS"))
"RTN","HDISVC01",24,0)
 S DATA=$NA(@PRSARR@("DATA"))
"RTN","HDISVC01",25,0)
 S OOPS=0
"RTN","HDISVC01",26,0)
 S ERRARR=$G(ERRARR)
"RTN","HDISVC01",27,0)
 I ERRARR'="" K @ERRARR
"RTN","HDISVC01",28,0)
 S PRSARR=$G(PRSARR)
"RTN","HDISVC01",29,0)
 I PRSARR="" D  Q
"RTN","HDISVC01",30,0)
 .S TMP="DOMAIN^HDISVC01: Input parameter PRSARR was not passed"
"RTN","HDISVC01",31,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",32,0)
 .S OOPS=1
"RTN","HDISVC01",33,0)
 I '$D(@PRSARR) D  Q
"RTN","HDISVC01",34,0)
 .S TMP="DOMAIN^HDISVC01: Input array "_PRSARR_" (PRSARR) does not exist"
"RTN","HDISVC01",35,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",36,0)
 .S OOPS=1
"RTN","HDISVC01",37,0)
 ;Ensure all elements are indexed
"RTN","HDISVC01",38,0)
 F X=1:1 S TMP=$P($T(ELEMENTS+X),";;",2) Q:TMP=""  D
"RTN","HDISVC01",39,0)
 .I '$D(@EINDX@(TMP)) D
"RTN","HDISVC01",40,0)
 ..S TMP="XML element '"_TMP_"' was not found in the XML document"
"RTN","HDISVC01",41,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",42,0)
 ..S OOPS=1
"RTN","HDISVC01",43,0)
 ;Ensure that 'Domain' is the root element
"RTN","HDISVC01",44,0)
 I $G(@ESUBS@(1))'="Domain" D
"RTN","HDISVC01",45,0)
 .S TMP="'Domain' was not the root element in the XML document"
"RTN","HDISVC01",46,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",47,0)
 .S OOPS=1
"RTN","HDISVC01",48,0)
 ;Errors found - quit
"RTN","HDISVC01",49,0)
 I OOPS Q
"RTN","HDISVC01",50,0)
 ;Process 'Domain' portion of XML doc
"RTN","HDISVC01",51,0)
 S INDX=@EINDX@("Domain")
"RTN","HDISVC01",52,0)
 ;Get elements
"RTN","HDISVC01",53,0)
 S DOMAIN=$G(@DATA@(INDX,1,@EINDX@("DomainName"),1,"V"))
"RTN","HDISVC01",54,0)
 S SOURCE=$G(@DATA@(INDX,1,@EINDX@("Source"),1,"V"))
"RTN","HDISVC01",55,0)
 S MAILMAN=$G(@DATA@(INDX,1,@EINDX@("MailManDomain"),1,"V"))
"RTN","HDISVC01",56,0)
 ;Validate elements
"RTN","HDISVC01",57,0)
 F TMP="DOMAIN","SOURCE","MAILMAN" I $G(@TMP)="" D
"RTN","HDISVC01",58,0)
 .S Y="DomainName"
"RTN","HDISVC01",59,0)
 .I TMP="SOURCE" S Y="Source"
"RTN","HDISVC01",60,0)
 .I TMP="MAILMAN" S Y="MailManDomain"
"RTN","HDISVC01",61,0)
 .S X="XML element '"_TMP_"' did not have a value"
"RTN","HDISVC01",62,0)
 .D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVC01",63,0)
 .S OOPS=1
"RTN","HDISVC01",64,0)
 ;Ensure that 'Source' matches local number
"RTN","HDISVC01",65,0)
 I SOURCE'="" I SOURCE'=$$FACNUM^HDISVF01() D
"RTN","HDISVC01",66,0)
 .S TMP="Value of XML element 'Source' ("_SOURCE
"RTN","HDISVC01",67,0)
 .S TMP=TMP_") does not match local facility number"
"RTN","HDISVC01",68,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",69,0)
 .S OOPS=1
"RTN","HDISVC01",70,0)
 ;Ensure that 'MailManDomain' matches local domain
"RTN","HDISVC01",71,0)
 I MAILMAN'="" I MAILMAN'=$G(^XMB("NETNAME")) D
"RTN","HDISVC01",72,0)
 .S TMP="Value of XML element 'MailManDomain' ("_MAILMAN
"RTN","HDISVC01",73,0)
 .S TMP=TMP_") does not match local domain"
"RTN","HDISVC01",74,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",75,0)
 .S OOPS=1
"RTN","HDISVC01",76,0)
 ;Errors found - quit
"RTN","HDISVC01",77,0)
 I OOPS Q
"RTN","HDISVC01",78,0)
 ;Process 'File' portion
"RTN","HDISVC01",79,0)
 D FILE($NA(@DATA@(INDX,1)),EINDX,AINDX,ERRARR,DOMAIN)
"RTN","HDISVC01",80,0)
 Q
"RTN","HDISVC01",81,0)
 ;
"RTN","HDISVC01",82,0)
FILE(DATA,EINDX,AINDX,ERRARR,DOMAIN) ;Process 'File' portion of XML document
"RTN","HDISVC01",83,0)
 ; Input : DATA - Array reference from which the 'File' element
"RTN","HDISVC01",84,0)
 ;                begins (closed root)
"RTN","HDISVC01",85,0)
 ;         EINDX - Element index array (closed root)
"RTN","HDISVC01",86,0)
 ;         AINDX - Attribute index array (closed root)
"RTN","HDISVC01",87,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVC01",88,0)
 ;         DOMAIN - Value of 'DomainName' element
"RTN","HDISVC01",89,0)
 ;Output : None
"RTN","HDISVC01",90,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVC01",91,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC01",92,0)
 N INDX,REP,FILE,FIELD,OOPS,EXIST,LASTERR,X,Y,TMP
"RTN","HDISVC01",93,0)
 N FACPTR,FACNAME,FACNUM,IPADD,SYSTYPE,FILENAME
"RTN","HDISVC01",94,0)
 S INDX=@EINDX@("File")
"RTN","HDISVC01",95,0)
 S REP=0
"RTN","HDISVC01",96,0)
 F  S REP=+$O(@DATA@(INDX,REP)) Q:'REP  D
"RTN","HDISVC01",97,0)
 .S OOPS=0
"RTN","HDISVC01",98,0)
 .;Get elements
"RTN","HDISVC01",99,0)
 .S FILE=$G(@DATA@(INDX,REP,@EINDX@("FileNumber"),1,"V"))
"RTN","HDISVC01",100,0)
 .S FIELD=$G(@DATA@(INDX,REP,@EINDX@("FieldNumber"),1,"V"))
"RTN","HDISVC01",101,0)
 .;Validate elements
"RTN","HDISVC01",102,0)
 .F TMP="FILE","FIELD" I $G(@TMP)="" D
"RTN","HDISVC01",103,0)
 ..S Y="FileNumber"
"RTN","HDISVC01",104,0)
 ..I TMP="FIELD" S Y="FieldNumber"
"RTN","HDISVC01",105,0)
 ..S X="XML element '"_TMP_"' did not have a value"
"RTN","HDISVC01",106,0)
 ..D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVC01",107,0)
 ..S OOPS=1
"RTN","HDISVC01",108,0)
 .;Errors found - quit
"RTN","HDISVC01",109,0)
 .I OOPS Q
"RTN","HDISVC01",110,0)
 .I '$$VFILE^DILFD(FILE) D
"RTN","HDISVC01",111,0)
 ..S TMP="Repetition number "_REP_" of XML element 'FileNumber' "
"RTN","HDISVC01",112,0)
 ..S TMP=TMP_"is not a valid file number"
"RTN","HDISVC01",113,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",114,0)
 ..S OOPS=1
"RTN","HDISVC01",115,0)
 .I 'OOPS I '$$VFIELD^DILFD(FILE,FIELD) D
"RTN","HDISVC01",116,0)
 ..S TMP="Repetition number "_REP_" of XML element 'FieldNumber' "
"RTN","HDISVC01",117,0)
 ..S TMP=TMP_"is not a valid field number"
"RTN","HDISVC01",118,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC01",119,0)
 ..S OOPS=1
"RTN","HDISVC01",120,0)
 .;Errors found - quit
"RTN","HDISVC01",121,0)
 .I OOPS Q
"RTN","HDISVC01",122,0)
 .;Status update - VUIDs received
"RTN","HDISVC01",123,0)
 .S TMP=$$STATUPD^HDISVCUT(FILE,FIELD,3)
"RTN","HDISVC01",124,0)
 .;Make sure VUID and status fields are defined
"RTN","HDISVC01",125,0)
 .I '$$SETCODE^HDISVC02(FILE,FIELD) S EXIST=$$FLDXST(FILE) I 'EXIST D
"RTN","HDISVC01",126,0)
 ..F TMP=2:1:4 I '$P(EXIST,"^",TMP) D
"RTN","HDISVC01",127,0)
 ...S X="File number "_FILE_" is missing field number "
"RTN","HDISVC01",128,0)
 ...I TMP=2 S X=X_"99.99 (VUID)"
"RTN","HDISVC01",129,0)
 ...I TMP=3 S X=X_"99.991 (EFFECTIVE DATE multiple)"
"RTN","HDISVC01",130,0)
 ...I TMP=4 S X=X_".02 (STATUS) of EFFECTIVE DATE multiple (99.991)"
"RTN","HDISVC01",131,0)
 ...D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVC01",132,0)
 ...I TMP=3 S TMP=4
"RTN","HDISVC01",133,0)
 ..S OOPS=1
"RTN","HDISVC01",134,0)
 .;Problem(s) found - don't continue
"RTN","HDISVC01",135,0)
 .I OOPS D  Q
"RTN","HDISVC01",136,0)
 ..;Status update (error)
"RTN","HDISVC01",137,0)
 ..S TMP=$$STATUPD^HDISVCUT(FILE,FIELD,5)
"RTN","HDISVC01",138,0)
 .;Remember last error number
"RTN","HDISVC01",139,0)
 .S LASTERR=+$O(@ERRARR@(""),-1)
"RTN","HDISVC01",140,0)
 .;Process 'Term' portion
"RTN","HDISVC01",141,0)
 .D TERM^HDISVC02($NA(@DATA@(INDX,REP)),EINDX,AINDX,ERRARR,FILE,FIELD)
"RTN","HDISVC01",142,0)
 .;Error(s) added - status update (error)
"RTN","HDISVC01",143,0)
 .I LASTERR'=+$O(@ERRARR@(""),-1) S TMP=$$STATUPD^HDISVCUT(FILE,FIELD,5) Q
"RTN","HDISVC01",144,0)
 .;Status update (VUIDs assigned)
"RTN","HDISVC01",145,0)
 .S TMP=$$STATUPD^HDISVCUT(FILE,FIELD,4)
"RTN","HDISVC01",146,0)
 .;Notify ERT that VUID's have been stored
"RTN","HDISVC01",147,0)
 .K FACPTR,IPADD,SYSTYPE
"RTN","HDISVC01",148,0)
 .I '$$GETFAC^HDISVF07(,.FACPTR) S FACPTR=$$FACPTR^HDISVF01()
"RTN","HDISVC01",149,0)
 .I '$$GETDIP^HDISVF07(,.IPADD) S IPADD=$G(^XMB("NETNAME"))
"RTN","HDISVC01",150,0)
 .I '$$GETTYPE^HDISVF07(,,.SYSTYPE) D
"RTN","HDISVC01",151,0)
 ..S SYSTYPE=$$PROD^XUPROD()
"RTN","HDISVC01",152,0)
 ..S SYSTYPE=$S(SYSTYPE:"PRODUCTION",1:"TEST")
"RTN","HDISVC01",153,0)
 .S TMP=$$NS^XUAF4(FACPTR)
"RTN","HDISVC01",154,0)
 .S FACNAME=$P(TMP,"^",1)
"RTN","HDISVC01",155,0)
 .S FACNUM=$P(TMP,"^",2)
"RTN","HDISVC01",156,0)
 .I (FACNAME="")!(FACNUM="") D
"RTN","HDISVC01",157,0)
 ..S TMP=$$SITE^VASITE()
"RTN","HDISVC01",158,0)
 ..S FACNAME=$P(TMP,"^",2)
"RTN","HDISVC01",159,0)
 ..S FACNUM=$P(TMP,"^",3)
"RTN","HDISVC01",160,0)
 .S FACNAME=FACNAME_" (#"_FACNUM_") with Domain/IP Address "_IPADD
"RTN","HDISVC01",161,0)
 .S FILENAME=$$GET1^DID(FILE,,,"NAME")
"RTN","HDISVC01",162,0)
 .S FILENAME=FILENAME_" (#"_FILE_")"
"RTN","HDISVC01",163,0)
 .D ERTBULL^HDISVF09(FACNAME,FILENAME,$$NOW^XLFDT(),SYSTYPE,FACNUM,FILE)
"RTN","HDISVC01",164,0)
 Q
"RTN","HDISVC01",165,0)
 ;
"RTN","HDISVC01",166,0)
FLDXST(FILE) ;Check for existance of VUID and status fields
"RTN","HDISVC01",167,0)
 ; Input : FILE - File number
"RTN","HDISVC01",168,0)
 ;Output : 1 = Required VUID and status fields exist
"RTN","HDISVC01",169,0)
 ;         0^VUID^Status^StatusDate = One or more fields missing
"RTN","HDISVC01",170,0)
 ;                                    0 put in piece of missing field
"RTN","HDISVC01",171,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC01",172,0)
 N VUID,STAT,STDT,OUTPUT,SUBFILE
"RTN","HDISVC01",173,0)
 S (OUTPUT,VUID,STAT,STDT)=1
"RTN","HDISVC01",174,0)
 ;VUID field
"RTN","HDISVC01",175,0)
 I '$$VFIELD^DILFD(FILE,99.99) D
"RTN","HDISVC01",176,0)
 .S OUTPUT=0
"RTN","HDISVC01",177,0)
 .S VUID=0
"RTN","HDISVC01",178,0)
 ;EFFECTIVE DATE multiple
"RTN","HDISVC01",179,0)
 I '$$VFIELD^DILFD(FILE,99.991) D
"RTN","HDISVC01",180,0)
 .S OUTPUT=0
"RTN","HDISVC01",181,0)
 .S (STAT,STDT)=0
"RTN","HDISVC01",182,0)
 S SUBFILE=+$$GET1^DID(FILE,99.991,"","SPECIFIER")
"RTN","HDISVC01",183,0)
 I 'SUBFILE D
"RTN","HDISVC01",184,0)
 .S OUTPUT=0
"RTN","HDISVC01",185,0)
 .S (STAT,STDT)=0
"RTN","HDISVC01",186,0)
 ;STATUS sub-field
"RTN","HDISVC01",187,0)
 I SUBFILE I '$$VFIELD^DILFD(SUBFILE,.02) D
"RTN","HDISVC01",188,0)
 .S OUTPUT=0
"RTN","HDISVC01",189,0)
 .S STDT=0
"RTN","HDISVC01",190,0)
 I 'OUTPUT S OUTPUT=OUTPUT_"^"_VUID_"^"_STAT_"^"_STDT
"RTN","HDISVC01",191,0)
 Q OUTPUT
"RTN","HDISVC01",192,0)
 ;
"RTN","HDISVC01",193,0)
ELEMENTS ;List of required elements in XML document
"RTN","HDISVC01",194,0)
 ;;Domain
"RTN","HDISVC01",195,0)
 ;;DomainName
"RTN","HDISVC01",196,0)
 ;;Source
"RTN","HDISVC01",197,0)
 ;;MailManDomain
"RTN","HDISVC01",198,0)
 ;;File
"RTN","HDISVC01",199,0)
 ;;FileNumber
"RTN","HDISVC01",200,0)
 ;;FieldNumber
"RTN","HDISVC01",201,0)
 ;;Term
"RTN","HDISVC01",202,0)
 ;;TermName
"RTN","HDISVC01",203,0)
 ;;VUID
"RTN","HDISVC01",204,0)
 ;;NationalTerm
"RTN","HDISVC01",205,0)
 ;;FacilityInternalReference
"RTN","HDISVC01",206,0)
 ;;
"RTN","HDISVC02")
0^4^B19591362
"RTN","HDISVC02",1,0)
HDISVC02 ;BPFO/JRP - PROCESS RECEIVED XML DATA;12/20/2004
"RTN","HDISVC02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVC02",3,0)
 ;
"RTN","HDISVC02",4,0)
TERM(DATA,EINDX,AINDX,ERRARR,FILE,FIELD) ;Process 'Term' portion of XML document
"RTN","HDISVC02",5,0)
 ; Input : DATA - Array reference from which the 'File' element
"RTN","HDISVC02",6,0)
 ;                begins (closed root)
"RTN","HDISVC02",7,0)
 ;         EINDX - Element index array (closed root)
"RTN","HDISVC02",8,0)
 ;         AINDX - Attribute index array (closed root)
"RTN","HDISVC02",9,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVC02",10,0)
 ;         FILE - Value of 'FileNumber' element
"RTN","HDISVC02",11,0)
 ;         FIELD - Value of 'FieldNumber' element
"RTN","HDISVC02",12,0)
 ;Output : None
"RTN","HDISVC02",13,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVC02",14,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC02",15,0)
 N INDX,REP,TERM,IREF,VUID,TMP,OOPS,DATE,NTNL
"RTN","HDISVC02",16,0)
 S INDX=@EINDX@("Term")
"RTN","HDISVC02",17,0)
 S REP=0
"RTN","HDISVC02",18,0)
 F  S REP=+$O(@DATA@(INDX,REP)) Q:'REP  D
"RTN","HDISVC02",19,0)
 .S OOPS=0
"RTN","HDISVC02",20,0)
 .;Get elements
"RTN","HDISVC02",21,0)
 .S TERM=$G(@DATA@(INDX,REP,@EINDX@("TermName"),1,"V"))
"RTN","HDISVC02",22,0)
 .S IREF=$G(@DATA@(INDX,REP,@EINDX@("FacilityInternalReference"),1,"V"))
"RTN","HDISVC02",23,0)
 .S VUID=$G(@DATA@(INDX,REP,@EINDX@("VUID"),1,"V"))
"RTN","HDISVC02",24,0)
 .S NTNL=$G(@DATA@(INDX,REP,@EINDX@("NationalTerm"),1,"V"))
"RTN","HDISVC02",25,0)
 .;Validate elements
"RTN","HDISVC02",26,0)
 .F TMP="TERM","VUID","IREF","NTNL" I $G(@TMP)="" D
"RTN","HDISVC02",27,0)
 ..S Y="TermName"
"RTN","HDISVC02",28,0)
 ..I TMP="VUID" S Y="VUID"
"RTN","HDISVC02",29,0)
 ..I TMP="IREF" S Y="FacilityInternalReference"
"RTN","HDISVC02",30,0)
 ..I TMP="NTNL" S Y="NationalTerm"
"RTN","HDISVC02",31,0)
 ..S X="XML element '"_Y_"' for repetition number "_REP_" of 'Term' "
"RTN","HDISVC02",32,0)
 ..I TMP="TERM" S X="Repetition number "_REP_" of XML element 'Term' "
"RTN","HDISVC02",33,0)
 ..I TMP'="TERM" S X=X_"("_TERM_") "
"RTN","HDISVC02",34,0)
 ..S X=X_"did not have a value"
"RTN","HDISVC02",35,0)
 ..D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVC02",36,0)
 ..S OOPS=1
"RTN","HDISVC02",37,0)
 .;Problem found - quit
"RTN","HDISVC02",38,0)
 .I OOPS Q
"RTN","HDISVC02",39,0)
 .;Does entry exist
"RTN","HDISVC02",40,0)
 .I '$$EXISTS(FILE,FIELD,IREF) D
"RTN","HDISVC02",41,0)
 ..S TMP="Value for 'FacilityInternalReference' ("_IREF_") not valid "
"RTN","HDISVC02",42,0)
 ..S TMP=TMP_"for repetition number "_REP_" of 'Term' ("_TERM_")"
"RTN","HDISVC02",43,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC02",44,0)
 ..S OOPS=1
"RTN","HDISVC02",45,0)
 .;Does received term match stored term
"RTN","HDISVC02",46,0)
 .I 'OOPS I '$$VALMATCH(FILE,FIELD,IREF,TERM) D
"RTN","HDISVC02",47,0)
 ..S TMP="Local value does not match received value for repetition "
"RTN","HDISVC02",48,0)
 ..S TMP=TMP_"number "_REP_" of 'Term' ("_TERM_")"
"RTN","HDISVC02",49,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC02",50,0)
 ..S OOPS=1
"RTN","HDISVC02",51,0)
 .;Is 'NationalTerm; valid value
"RTN","HDISVC02",52,0)
 .I NTNL'=0 I NTNL'=1 D
"RTN","HDISVC02",53,0)
 ..S TMP="Value for 'NationalTerm' ("_NTNL_") not valid for "
"RTN","HDISVC02",54,0)
 ..S TMP=TMP_"repetition number "_REP_" of 'Term' ("_TERM_")"
"RTN","HDISVC02",55,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC02",56,0)
 ..S OOPS=1
"RTN","HDISVC02",57,0)
 .;Problem found - don't continue
"RTN","HDISVC02",58,0)
 .I OOPS Q
"RTN","HDISVC02",59,0)
 .;Store/update VUID (inactivates term when appropriate)
"RTN","HDISVC02",60,0)
 .D STOREIT(FILE,FIELD,IREF,VUID,NTNL,ERRARR)
"RTN","HDISVC02",61,0)
 Q
"RTN","HDISVC02",62,0)
 ;
"RTN","HDISVC02",63,0)
EXISTS(FILE,FIELD,IREF) ;Does entry exist
"RTN","HDISVC02",64,0)
 ; Input : FILE - File number
"RTN","HDISVC02",65,0)
 ;         FIELD - Field number
"RTN","HDISVC02",66,0)
 ;         IREF - Internal reference
"RTN","HDISVC02",67,0)
 ;Output : 1 if entry exists
"RTN","HDISVC02",68,0)
 ;         0 if entry doesn't exist
"RTN","HDISVC02",69,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC02",70,0)
 N EXIST,CODES
"RTN","HDISVC02",71,0)
 S EXIST=0
"RTN","HDISVC02",72,0)
 S CODES=$$SETCODE(FILE,FIELD)
"RTN","HDISVC02",73,0)
 ;Set of codes
"RTN","HDISVC02",74,0)
 I CODES I $$EXTERNAL^DILFD(FILE,FIELD,"",IREF) S EXIST=1
"RTN","HDISVC02",75,0)
 ;Entry in file
"RTN","HDISVC02",76,0)
 I 'CODES D
"RTN","HDISVC02",77,0)
 .S IREF="`"_(+IREF)
"RTN","HDISVC02",78,0)
 .I $$FIND1^DIC(FILE,"","",IREF) S EXIST=1
"RTN","HDISVC02",79,0)
 D CLEAN^DILF
"RTN","HDISVC02",80,0)
 Q EXIST
"RTN","HDISVC02",81,0)
 ;
"RTN","HDISVC02",82,0)
VALMATCH(FILE,FIELD,IREF,VALUE) ;Check input value against stored value
"RTN","HDISVC02",83,0)
 ; Input : FILE - File number
"RTN","HDISVC02",84,0)
 ;         FIELD - Field number
"RTN","HDISVC02",85,0)
 ;         IREF - Internal reference
"RTN","HDISVC02",86,0)
 ;         VALUE - Value to verify
"RTN","HDISVC02",87,0)
 ;Output : 1 if stored value equals input VALUE
"RTN","HDISVC02",88,0)
 ;         0 if stored value does not equal input VALUE
"RTN","HDISVC02",89,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC02",90,0)
 N MATCH,CODES,LOCVAL
"RTN","HDISVC02",91,0)
 S MATCH=0
"RTN","HDISVC02",92,0)
 S CODES=$$SETCODE(FILE,FIELD)
"RTN","HDISVC02",93,0)
 ;Set of codes
"RTN","HDISVC02",94,0)
 I CODES S LOCVAL=$$EXTERNAL^DILFD(FILE,FIELD,"",IREF)
"RTN","HDISVC02",95,0)
 ;Entry in file
"RTN","HDISVC02",96,0)
 I 'CODES S LOCVAL=$$GET1^DIQ(FILE,IREF,FIELD)
"RTN","HDISVC02",97,0)
 ;Case insensitive compare
"RTN","HDISVC02",98,0)
 I $$UP^XLFSTR(LOCVAL)=$$UP^XLFSTR(VALUE) S MATCH=1
"RTN","HDISVC02",99,0)
 D CLEAN^DILF
"RTN","HDISVC02",100,0)
 Q MATCH
"RTN","HDISVC02",101,0)
 ;
"RTN","HDISVC02",102,0)
SETCODE(FILE,FIELD) ;Is field a set of codes
"RTN","HDISVC02",103,0)
 ; Input : FILE - File number
"RTN","HDISVC02",104,0)
 ;         FIELD - Field number
"RTN","HDISVC02",105,0)
 ;Output : 1 if field is a set of codes
"RTN","HDISVC02",106,0)
 ;         0 if field is not a set of codes
"RTN","HDISVC02",107,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC02",108,0)
 N CODES
"RTN","HDISVC02",109,0)
 S CODES=0
"RTN","HDISVC02",110,0)
 I $$GET1^DID(FILE,FIELD,"","TYPE")="SET" S CODES=1
"RTN","HDISVC02",111,0)
 Q CODES
"RTN","HDISVC02",112,0)
 ;
"RTN","HDISVC02",113,0)
STOREIT(FILE,FIELD,IREF,VUID,NTNL,ERRARR) ;Store VUID
"RTN","HDISVC02",114,0)
 ; Input : FILE - File number
"RTN","HDISVC02",115,0)
 ;         FIELD - Field number
"RTN","HDISVC02",116,0)
 ;         IREF - Internal reference
"RTN","HDISVC02",117,0)
 ;         VUID - VUID
"RTN","HDISVC02",118,0)
 ;         NTNL - National term
"RTN","HDISVC02",119,0)
 ;                0 = No (default)     1 = Yes
"RTN","HDISVC02",120,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVC02",121,0)
 ;Output : None
"RTN","HDISVC02",122,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVC02",123,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVC02",124,0)
 ;       : Call will automatically inactivate terms when appropriate
"RTN","HDISVC02",125,0)
 ;
"RTN","HDISVC02",126,0)
 N TMP,MASTER
"RTN","HDISVC02",127,0)
 S NTNL=+$G(NTNL)
"RTN","HDISVC02",128,0)
 ;Store VUID (also sets master entry flag, if appropriate)
"RTN","HDISVC02",129,0)
 I '$$SETVUID^XTID(FILE,FIELD,IREF,VUID) D  Q
"RTN","HDISVC02",130,0)
 .S TMP="Unable to store "_VUID_" as the VUID for internal reference '"
"RTN","HDISVC02",131,0)
 .S TMP=TMP_IREF_"' of field number "_FIELD_" in file number "_FILE
"RTN","HDISVC02",132,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC02",133,0)
 ;Get master entry flag
"RTN","HDISVC02",134,0)
 S MASTER=$$GETMASTR^XTID(FILE,FIELD,IREF)
"RTN","HDISVC02",135,0)
 ;Don't inactivate national terms that are the master entry
"RTN","HDISVC02",136,0)
 I NTNL I MASTER Q
"RTN","HDISVC02",137,0)
 ;Inactivate
"RTN","HDISVC02",138,0)
 I '$$SETSTAT^XTID(FILE,FIELD,IREF,0,$$NOW^XLFDT()) D  Q
"RTN","HDISVC02",139,0)
 .S TMP="Unable to inactivate internal reference "_IREF_" of field "
"RTN","HDISVC02",140,0)
 .S TMP=TMP_"number "_FIELD_" in file number "_FILE_".  VUID for the"
"RTN","HDISVC02",141,0)
 .S TMP=TMP_" "_$S(NTNL:"",1:"non-")_"standard term was "_VUID_"."
"RTN","HDISVC02",142,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVC02",143,0)
 Q
"RTN","HDISVCFX")
0^5^B4562200
"RTN","HDISVCFX",1,0)
HDISVCFX ;CT/GRR ; 24 Jan 2005  10:26 AM
"RTN","HDISVCFX",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVCFX",3,0)
FILE(HDISDOM,HDISFILE,HDISFN,HDISARRY) ;
"RTN","HDISVCFX",4,0)
 N HDISQQ,HDISGL,HDISNODE,HDISPIC,Y
"RTN","HDISVCFX",5,0)
 N HDISOUT
"RTN","HDISVCFX",6,0)
 I HDISDOM=""!(HDISFILE="")!(HDISFN="")!(HDISARRY="") S HDISOUT=0_"^Parameter Missing" G QUIT
"RTN","HDISVCFX",7,0)
 K @HDISARRY
"RTN","HDISVCFX",8,0)
 ;Lookup VUID XML template to build XML document
"RTN","HDISVCFX",9,0)
 S DIC=7115.3,DIC(0)="Z",X="VUID" D ^DIC K DIC
"RTN","HDISVCFX",10,0)
 I Y<0 S HDISOUT=0_"^VUID Template Missing" G QUIT
"RTN","HDISVCFX",11,0)
 S HDIST=+Y,HDISY=Y,HDISY(0)=Y(0)
"RTN","HDISVCFX",12,0)
 ;
"RTN","HDISVCFX",13,0)
 ;Get Domain name
"RTN","HDISVCFX",14,0)
 S HDISDOMN=$P($G(^HDIS(7115.1,HDISDOM,0)),"^")
"RTN","HDISVCFX",15,0)
 ;
"RTN","HDISVCFX",16,0)
 ;Get Facility Number, MailMan Parameters, and mailMan Domain name
"RTN","HDISVCFX",17,0)
 S HDISSRC=$P($$SITE^VASITE(),"^",3)
"RTN","HDISVCFX",18,0)
 S HDISMD=$G(^XMB("NETNAME"))
"RTN","HDISVCFX",19,0)
 S HDISPROD=$$PROD^XUPROD()
"RTN","HDISVCFX",20,0)
 ;
"RTN","HDISVCFX",21,0)
 ;Set XML header in output array
"RTN","HDISVCFX",22,0)
 S @HDISARRY@(1)="<?xml version=""1.0"" encoding=""utf-8"" ?>"
"RTN","HDISVCFX",23,0)
 ;S @HDISARRY@(1)=$$XMLHDR^XOBVLIB()
"RTN","HDISVCFX",24,0)
 S @HDISARRY@(1)="<"_$P(HDISY(0),"^",4)_" "_$G(^HDIS(7115.3,HDIST,1))_">"
"RTN","HDISVCFX",25,0)
 ;
"RTN","HDISVCFX",26,0)
 ;Initialize Z array which will contain input data for XML routine
"RTN","HDISVCFX",27,0)
 N Z K Z D ZINIT
"RTN","HDISVCFX",28,0)
 ;
"RTN","HDISVCFX",29,0)
 ;Store Domain Name, Facility Number, MailMan Domain, File, and Field Number
"RTN","HDISVCFX",30,0)
 ;in output array
"RTN","HDISVCFX",31,0)
 S Z(10)=HDISDOMN
"RTN","HDISVCFX",32,0)
 S Z(20)=HDISSRC
"RTN","HDISVCFX",33,0)
 S Z(22)=HDISPROD
"RTN","HDISVCFX",34,0)
 S Z(25)=HDISMD
"RTN","HDISVCFX",35,0)
 S Z(40)=HDISFILE
"RTN","HDISVCFX",36,0)
 S Z(45)=HDISFN
"RTN","HDISVCFX",37,0)
 ;
"RTN","HDISVCFX",38,0)
 ;Get global root of file
"RTN","HDISVCFX",39,0)
 S HDISGL=$$ROOT^DILFD(HDISFILE,"",1) D CLEAN^DILF
"RTN","HDISVCFX",40,0)
 ;
"RTN","HDISVCFX",41,0)
 ;Write out first 5 xml elements to output array
"RTN","HDISVCFX",42,0)
 D XMLOUT^HDISXML(HDIST,"10,20,22,25,30,40,45,","Z",HDISARRY,.HDERR)
"RTN","HDISVCFX",43,0)
 ;
"RTN","HDISVCFX",44,0)
 ;Get the node and piece position of term to be standardized
"RTN","HDISVCFX",45,0)
 ;(In most cases it is the .01 field)
"RTN","HDISVCFX",46,0)
 S HDISNODE=$P($P(^DD(HDISFILE,HDISFN,0),"^",4),";",1)
"RTN","HDISVCFX",47,0)
 S HDISPIC=$P($P(^DD(HDISFILE,HDISFN,0),"^",4),";",2)
"RTN","HDISVCFX",48,0)
 ;
"RTN","HDISVCFX",49,0)
 ;Loop through all file entries, create xml entry for each
"RTN","HDISVCFX",50,0)
 N HDISDA S HDISDA=0 F  S HDISDA=$O(@HDISGL@(HDISDA)) Q:HDISDA'>0  D
"RTN","HDISVCFX",51,0)
 .S Z(60)=$P(@HDISGL@(HDISDA,HDISNODE),"^",HDISPIC)
"RTN","HDISVCFX",52,0)
 .S Z(70)=""
"RTN","HDISVCFX",53,0)
 .S Z(80)=""
"RTN","HDISVCFX",54,0)
 .S Z(100)=HDISDA_","
"RTN","HDISVCFX",55,0)
 .D XMLOUT^HDISXML(HDIST,"50,60,70,100,50/,","Z",HDISARRY,.HDERR)
"RTN","HDISVCFX",56,0)
 ;
"RTN","HDISVCFX",57,0)
 ;Set final XML closing elements
"RTN","HDISVCFX",58,0)
 D XMLOUT^HDISXML(HDIST,"30/,5/,","Z",HDISARRY,.HDERR)
"RTN","HDISVCFX",59,0)
 S HDISOUT=1
"RTN","HDISVCFX",60,0)
 ;
"RTN","HDISVCFX",61,0)
QUIT Q HDISOUT
"RTN","HDISVCFX",62,0)
 ;
"RTN","HDISVCFX",63,0)
 ;
"RTN","HDISVCFX",64,0)
ZINIT ;
"RTN","HDISVCFX",65,0)
 S Z(22)="" F Z=5:5:100 S Z(Z)=""
"RTN","HDISVCFX",66,0)
 Q
"RTN","HDISVCFX",67,0)
 ;
"RTN","HDISVCMR")
0^6^B7849381
"RTN","HDISVCMR",1,0)
HDISVCMR ;CT/GRR Data Standardization ; 08 Mar 2005  12:30 PM
"RTN","HDISVCMR",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVCMR",3,0)
 ;
"RTN","HDISVCMR",4,0)
EN(HDISDOM,HDISFILE) ;
"RTN","HDISVCMR",5,0)
 ;Input parameter:
"RTN","HDISVCMR",6,0)
 ;       HDISDOM - IEN to the HDIS Domain file (Required)
"RTN","HDISVCMR",7,0)
 ;       HDISFILE - Specific file # to be seeded (if not all domain files) (Optional)
"RTN","HDISVCMR",8,0)
 N HDISNM,HDISDT,HDERR,HDISFILS,HDISOK,HDISFLIS
"RTN","HDISVCMR",9,0)
 S HDISFLIS=""
"RTN","HDISVCMR",10,0)
 S HDISFN=.01
"RTN","HDISVCMR",11,0)
 S HDISNM=$G(^XMB("NETNAME"))
"RTN","HDISVCMR",12,0)
 S HDISDT=$$NOW^XLFDT(),HDISSDT=$$FMTXML^HDISVU01(HDISDT)
"RTN","HDISVCMR",13,0)
 I $G(HDISDOM)="" S HDISMESS="Required parameter (Domain) empty, File: "_HDISFILE_", Field: "_HDISFN D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",14,0)
 I '$D(^HDIS(7115.1,HDISDOM)) S HDISMESS="Domain ("_HDISDOM_") does not exist.  File: "_HDISFILE_", Field: "_HDISFN D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",15,0)
 I $$GETVFAIL^HDISVF02() S HDISMESS="VUID DS processer called but is in failsafe mode" D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",16,0)
 S HDISOK=$$GETFILS^HDISVF09(HDISDOM,0,.HDISFILS)
"RTN","HDISVCMR",17,0)
 I 'HDISOK S HDISMESS="No files are pending VUID processing in Domain "_HDISDOM D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",18,0)
 I $G(HDISFILE)]"" D  Q
"RTN","HDISVCMR",19,0)
 .I $D(HDISFILS(HDISFILE)) D CREATE(HDISDOM,HDISFILE,HDISFN)
"RTN","HDISVCMR",20,0)
 .E  D ERR^HDISVF09(HDISNM,HDISDT,"File: "_HDISFILE_" is not awaiting processing")
"RTN","HDISVCMR",21,0)
 S HDISDA=0 F  S HDISDA=$O(HDISFILS(HDISDA)) Q:HDISDA'>0  D CREATE(HDISDOM,HDISDA,.01)
"RTN","HDISVCMR",22,0)
 Q
"RTN","HDISVCMR",23,0)
 ;
"RTN","HDISVCMR",24,0)
CREATE(HDISDOM,HDISFILE,HDISFN) ;
"RTN","HDISVCMR",25,0)
 N HDISARRY,HDISMESS
"RTN","HDISVCMR",26,0)
 ;Update local status
"RTN","HDISVCMR",27,0)
 S HDISOUT=$$STATUPD^HDISVCUT(HDISFILE,HDISFN,1)
"RTN","HDISVCMR",28,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",29,0)
 ;
"RTN","HDISVCMR",30,0)
 ;Create XML doc containing facility data
"RTN","HDISVCMR",31,0)
 S HDISARRY=$NA(^TMP("HDIS",$J))
"RTN","HDISVCMR",32,0)
 S HDISOUT=$$FILE^HDISVCFX(HDISDOM,HDISFILE,HDISFN,HDISARRY)
"RTN","HDISVCMR",33,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",34,0)
 ;
"RTN","HDISVCMR",35,0)
 ; Send XML doc to Central Server
"RTN","HDISVCMR",36,0)
 S HDISOUT=$$SNDXML^HDISVM02(HDISARRY,1,"",1)
"RTN","HDISVCMR",37,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",38,0)
 ;
"RTN","HDISVCMR",39,0)
 ;Update local status file
"RTN","HDISVCMR",40,0)
 S HDISOUT=$$STATUPD^HDISVCUT(HDISFILE,HDISFN,2)
"RTN","HDISVCMR",41,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",42,0)
 ;
"RTN","HDISVCMR",43,0)
CR8OUT K @HDISARRY
"RTN","HDISVCMR",44,0)
 Q
"RTN","HDISVCUT")
0^7^B6418022
"RTN","HDISVCUT",1,0)
HDISVCUT ;CT/GRR ; 31 Jan 2005  8:43 AM
"RTN","HDISVCUT",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVCUT",3,0)
BLDSTAT(HDISFILE,HDISFN,HDISSC,HDISSDT,HDISARRY) ;
"RTN","HDISVCUT",4,0)
 N HDISOUT,CODE,HDISTDTX,Y
"RTN","HDISVCUT",5,0)
 I HDISFILE=""!(HDISFN="")!(HDISARRY="") S HDISOUT=0_"^Parameter Missing" G QUIT
"RTN","HDISVCUT",6,0)
 K @HDISARRY
"RTN","HDISVCUT",7,0)
 S DIC=7115.3,DIC(0)="Z",X="DOMAIN STATUS UPDATE" D ^DIC K DIC
"RTN","HDISVCUT",8,0)
 I Y<0 S HDISOUT=0_"^DOMAIN STATUS UPDATE Template Missing" G QUIT
"RTN","HDISVCUT",9,0)
 S HDIST=+Y,HDISY=Y,HDISY(0)=Y(0)
"RTN","HDISVCUT",10,0)
 S HDISSRC=$P($$SITE^VASITE(),"^",3)
"RTN","HDISVCUT",11,0)
 S HDISPROD=$$PROD^XUPROD()
"RTN","HDISVCUT",12,0)
 S HDISTDTX=$$FMTXML^HDISVU01(HDISSDT,"","")
"RTN","HDISVCUT",13,0)
 S HDISMD=$G(^XMB("NETNAME"))
"RTN","HDISVCUT",14,0)
 S @HDISARRY@(1)="<?xml version=""1.0"" encoding=""utf-8"" ?>"
"RTN","HDISVCUT",15,0)
 ;S @HDISARRY@(1)=$$XMLHDR^XOBVLIB()
"RTN","HDISVCUT",16,0)
 S @HDISARRY@(2)="<"_$P(HDISY(0),"^",4)_" "_$G(^HDIS(7115.3,HDIST,1))_">"
"RTN","HDISVCUT",17,0)
 N Z K Z D ZINIT
"RTN","HDISVCUT",18,0)
 S Z(20)=HDISSRC
"RTN","HDISVCUT",19,0)
 S Z(22)=HDISPROD
"RTN","HDISVCUT",20,0)
 S Z(30)=HDISMD
"RTN","HDISVCUT",21,0)
 S Z(60)=HDISFILE
"RTN","HDISVCUT",22,0)
 S Z(70)=HDISFN
"RTN","HDISVCUT",23,0)
 S Z(80)=HDISSC
"RTN","HDISVCUT",24,0)
 S Z(90)=HDISTDTX
"RTN","HDISVCUT",25,0)
 D XMLOUT^HDISXML(HDIST,"20,22,30,60,70,80,90,10/","Z",HDISARRY,.HDERR)
"RTN","HDISVCUT",26,0)
 S HDISOUT=1
"RTN","HDISVCUT",27,0)
QUIT Q HDISOUT
"RTN","HDISVCUT",28,0)
 ;
"RTN","HDISVCUT",29,0)
ZINIT S Z(22)="" F Z=10:10:100 S Z(Z)=""
"RTN","HDISVCUT",30,0)
 Q
"RTN","HDISVCUT",31,0)
 ;
"RTN","HDISVCUT",32,0)
 ;
"RTN","HDISVCUT",33,0)
BLDSND(HDISFILE,HDISFN,HDISSTCD,HDISSDT,HDISARRY,HDISINP) ;
"RTN","HDISVCUT",34,0)
 ;Updating of central server disabled (return success)
"RTN","HDISVCUT",35,0)
 I $$GETSDIS^HDISVF03() Q 1
"RTN","HDISVCUT",36,0)
 N HDISOUT
"RTN","HDISVCUT",37,0)
 S:HDISSDT="" HDISSDT=DT
"RTN","HDISVCUT",38,0)
 S:HDISARRY="" HDISARRY=$NA(^TMP("HDISSBUILD",$J))
"RTN","HDISVCUT",39,0)
 S HDISOUT=$$BLDSTAT(HDISFILE,HDISFN,HDISSTCD,HDISSDT,HDISARRY)
"RTN","HDISVCUT",40,0)
 I 'HDISOUT Q HDISOUT
"RTN","HDISVCUT",41,0)
 S HDISOUT=$$SNDXML^HDISVM02(HDISARRY,2,HDISINP)
"RTN","HDISVCUT",42,0)
 Q HDISOUT
"RTN","HDISVCUT",43,0)
 ;
"RTN","HDISVCUT",44,0)
STATUPD(FILE,FIELD,CODE,DATE) ;Encompassing local status update call
"RTN","HDISVCUT",45,0)
 ; Input : FILE - File number
"RTN","HDISVCUT",46,0)
 ;         FIELD - Field number (defaults to .01)
"RTN","HDISVCUT",47,0)
 ;         CODE - Status code to set (defaults to "not started")
"RTN","HDISVCUT",48,0)
 ;         DATE - FileMan date/time to return status for (optional)
"RTN","HDISVCUT",49,0)
 ;                (defaults to NOW)
"RTN","HDISVCUT",50,0)
 ;Output : 1 = Success     0^Text = Failure
"RTN","HDISVCUT",51,0)
 ; Notes : This call will update the local status, build the Status
"RTN","HDISVCUT",52,0)
 ;         Update XML document, and forward the Status Update XML
"RTN","HDISVCUT",53,0)
 ;         document to the centralized server
"RTN","HDISVCUT",54,0)
 ;       : If time is not included with the date, 1 second past
"RTN","HDISVCUT",55,0)
 ;         midnight will be used as the time
"RTN","HDISVCUT",56,0)
 ;       : If an entry for the given file/field and date/time already
"RTN","HDISVCUT",57,0)
 ;         exists, the existing entry will be updated to reflect the
"RTN","HDISVCUT",58,0)
 ;         given status
"RTN","HDISVCUT",59,0)
 N XMLARR,TMPARR,OUTPUT
"RTN","HDISVCUT",60,0)
 ;Check input
"RTN","HDISVCUT",61,0)
 S FILE=+$G(FILE)
"RTN","HDISVCUT",62,0)
 I 'FILE Q "0^Parameter FILE was not passed"
"RTN","HDISVCUT",63,0)
 S FIELD=+$G(FIELD)
"RTN","HDISVCUT",64,0)
 I 'FIELD S FIELD=.01
"RTN","HDISVCUT",65,0)
 S CODE=+$G(CODE)
"RTN","HDISVCUT",66,0)
 S DATE=+$G(DATE)
"RTN","HDISVCUT",67,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVCUT",68,0)
 I '$P(DATE,".",2) S $P(DATE,".",2)="000001"
"RTN","HDISVCUT",69,0)
 ;Update local status
"RTN","HDISVCUT",70,0)
 D SETSTAT^HDISVF01(FILE,FIELD,CODE,DATE,1)
"RTN","HDISVCUT",71,0)
 ;Updating of central server disabled (return success)
"RTN","HDISVCUT",72,0)
 I $$GETSDIS^HDISVF03() Q 1
"RTN","HDISVCUT",73,0)
 ;Create status update xml doc and send to central server
"RTN","HDISVCUT",74,0)
 S XMLARR=$NA(^TMP("HDISVCUT",$J,"XML"))
"RTN","HDISVCUT",75,0)
 S TMPARR=$NA(^TMP("HDISVCUT",$J,"HDISINP"))
"RTN","HDISVCUT",76,0)
 K @XMLARR,@TMPARR
"RTN","HDISVCUT",77,0)
 S OUTPUT=$$BLDSND^HDISVCUT(FILE,FIELD,CODE,DATE,XMLARR,TMPARR)
"RTN","HDISVCUT",78,0)
 K @XMLARR,@TMPARR
"RTN","HDISVCUT",79,0)
 Q OUTPUT
"RTN","HDISVF01")
0^8^B21250558
"RTN","HDISVF01",1,0)
HDISVF01 ;BPFO/JRP - FILE UTILITIES/API;12/20/2004 ; 07 Mar 2005  9:53 AM
"RTN","HDISVF01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF01",3,0)
 ;
"RTN","HDISVF01",4,0)
 ;---- Begin HDIS VUID IMPLEMENTATION STATUS file (#7118.25) APIs ----
"RTN","HDISVF01",5,0)
 ;
"RTN","HDISVF01",6,0)
GETSTAT(FILE,FIELD,DATE,FAC,DOMAIN,TYPE) ;Get file/field implementation status
"RTN","HDISVF01",7,0)
 ; Input : FILE - File number
"RTN","HDISVF01",8,0)
 ;         FIELD - Field number (defaults to .01)
"RTN","HDISVF01",9,0)
 ;         DATE - FileMan date/time to return status for (optional)
"RTN","HDISVF01",10,0)
 ;                (defaults to NOW)
"RTN","HDISVF01",11,0)
 ;         FAC - Facility number (optional) (defaults to current)
"RTN","HDISVF01",12,0)
 ;         DOMAIN - Domain/IP address (optional) (defaults to current)
"RTN","HDISVF01",13,0)
 ;         TYPE - Type of system (optional) (defaults to current)
"RTN","HDISVF01",14,0)
 ;                0 = Test     1 = Production
"RTN","HDISVF01",15,0)
 ;Output : StatusCode ^ StatusPointer ^ StatusDate
"RTN","HDISVF01",16,0)
 ; Notes : Values for "not started" status and no date are returned
"RTN","HDISVF01",17,0)
 ;         on bad input or if no entry is found
"RTN","HDISVF01",18,0)
 ;       : If time is not included with the date, the last status
"RTN","HDISVF01",19,0)
 ;         for the given day is returned
"RTN","HDISVF01",20,0)
 ;       : If more than one entry for the same date/time is found, the
"RTN","HDISVF01",21,0)
 ;         higher entry number is returned
"RTN","HDISVF01",22,0)
 N IEN,STATCODE,STATPTR,STATDT,NOTYET,FFPTR,SYSPTR,X
"RTN","HDISVF01",23,0)
 ;Calculate output for bad input
"RTN","HDISVF01",24,0)
 S STATCODE=0
"RTN","HDISVF01",25,0)
 S X=$$GETIEN^HDISVF06(STATCODE,$$GETTYPE^HDISVF02(),.STATPTR)
"RTN","HDISVF01",26,0)
 S NOTYET=STATCODE_"^"_STATPTR_"^"
"RTN","HDISVF01",27,0)
 ;Check input
"RTN","HDISVF01",28,0)
 S FILE=+$G(FILE)
"RTN","HDISVF01",29,0)
 I 'FILE Q NOTYET
"RTN","HDISVF01",30,0)
 S FIELD=+$G(FIELD)
"RTN","HDISVF01",31,0)
 I 'FIELD S FIELD=.01
"RTN","HDISVF01",32,0)
 S DATE=+$G(DATE)
"RTN","HDISVF01",33,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVF01",34,0)
 I '$P(DATE,".",2) S $P(DATE,".",2)=24
"RTN","HDISVF01",35,0)
 S FAC=+$G(FAC)
"RTN","HDISVF01",36,0)
 I 'FAC S FAC=$$FACNUM()
"RTN","HDISVF01",37,0)
 S DOMAIN=$G(DOMAIN)
"RTN","HDISVF01",38,0)
 I DOMAIN="" S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDISVF01",39,0)
 S TYPE=$G(TYPE)
"RTN","HDISVF01",40,0)
 I TYPE="" S TYPE=$$PROD^XUPROD()
"RTN","HDISVF01",41,0)
 I ('FAC)!(DOMAIN="")!(TYPE="") Q NOTYET
"RTN","HDISVF01",42,0)
 ;Get pointers
"RTN","HDISVF01",43,0)
 I '$$FINDSYS^HDISVF07(DOMAIN,FAC,TYPE,1,.SYSPTR) Q NOTYET
"RTN","HDISVF01",44,0)
 I '$$GETIEN^HDISVF05(FILE,FIELD,.FFPTR) Q NOTYET
"RTN","HDISVF01",45,0)
 ;Get status date/time closest to input date/time
"RTN","HDISVF01",46,0)
 S DATE=DATE+.0000001
"RTN","HDISVF01",47,0)
 S STATDT=+$O(^HDISF(7118.25,"AFAC",SYSPTR,FFPTR,DATE),-1)
"RTN","HDISVF01",48,0)
 I 'STATDT Q NOTYET
"RTN","HDISVF01",49,0)
 ;Build list of entry numbers with found status date/time
"RTN","HDISVF01",50,0)
 K IEN
"RTN","HDISVF01",51,0)
 S STATPTR=0
"RTN","HDISVF01",52,0)
 F  S STATPTR=+$O(^HDISF(7118.25,"AFAC",SYSPTR,FFPTR,STATDT,STATPTR)) Q:'STATPTR  D
"RTN","HDISVF01",53,0)
 .S IEN=0
"RTN","HDISVF01",54,0)
 .F  S IEN=+$O(^HDISF(7118.25,"AFAC",SYSPTR,FFPTR,STATDT,STATPTR,IEN)) Q:'IEN  D
"RTN","HDISVF01",55,0)
 ..S IEN(IEN)=STATPTR
"RTN","HDISVF01",56,0)
 ;Get last entry number
"RTN","HDISVF01",57,0)
 S IEN=+$O(IEN(""),-1)
"RTN","HDISVF01",58,0)
 I 'IEN Q NOTYET
"RTN","HDISVF01",59,0)
 ;Build output
"RTN","HDISVF01",60,0)
 S STATPTR=IEN(IEN)
"RTN","HDISVF01",61,0)
 S X=$$GETCODE^HDISVF06(STATPTR,.STATCODE)
"RTN","HDISVF01",62,0)
 Q STATCODE_"^"_STATPTR_"^"_STATDT
"RTN","HDISVF01",63,0)
 ;
"RTN","HDISVF01",64,0)
SETSTAT(FILE,FIELD,CODE,DATE,STTYPE,FAC,DOMAIN,SYTYPE) ;Set file/field implementation status
"RTN","HDISVF01",65,0)
 ; Input : FILE - File number
"RTN","HDISVF01",66,0)
 ;         FIELD - Field number (defaults to .01)
"RTN","HDISVF01",67,0)
 ;         CODE - Status code to set (defaults to "not started")
"RTN","HDISVF01",68,0)
 ;         DATE - FileMan date/time to return status for (optional)
"RTN","HDISVF01",69,0)
 ;                (defaults to NOW)
"RTN","HDISVF01",70,0)
 ;         STTYPE - Type of status code being used (optional)
"RTN","HDISVF01",71,0)
 ;                  1 = Client (default)     2 = Server
"RTN","HDISVF01",72,0)
 ;         FAC - Facility number (optional) (defaults to current)
"RTN","HDISVF01",73,0)
 ;         DOMAIN - Domain/IP address (optional) (defaults to current)
"RTN","HDISVF01",74,0)
 ;         SYTYPE - Type of system (optional) (defaults to current)
"RTN","HDISVF01",75,0)
 ;                  0 = Test     1 = Production
"RTN","HDISVF01",76,0)
 ;Output : None
"RTN","HDISVF01",77,0)
 ; Notes : If time is not included with the date, 1 second past
"RTN","HDISVF01",78,0)
 ;         midnight will be used as the time
"RTN","HDISVF01",79,0)
 ;       : If an entry for the given file/field and date/time already
"RTN","HDISVF01",80,0)
 ;         exists, a new entry will still be added
"RTN","HDISVF01",81,0)
 N FFPTR,SYSPTR
"RTN","HDISVF01",82,0)
 ;Check input
"RTN","HDISVF01",83,0)
 S FILE=+$G(FILE)
"RTN","HDISVF01",84,0)
 I 'FILE Q
"RTN","HDISVF01",85,0)
 S FIELD=+$G(FIELD)
"RTN","HDISVF01",86,0)
 I 'FIELD S FIELD=.01
"RTN","HDISVF01",87,0)
 S CODE=+$G(CODE)
"RTN","HDISVF01",88,0)
 S DATE=+$G(DATE)
"RTN","HDISVF01",89,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVF01",90,0)
 I '$P(DATE,".",2) S $P(DATE,".",2)="000001"
"RTN","HDISVF01",91,0)
 S STTYPE=+$G(STTYPE)
"RTN","HDISVF01",92,0)
 I ('STTYPE)!(STTYPE<1)!(STTYPE>2) S STTYPE=1
"RTN","HDISVF01",93,0)
 S FAC=+$G(FAC)
"RTN","HDISVF01",94,0)
 I 'FAC S FAC=$$FACNUM()
"RTN","HDISVF01",95,0)
 S DOMAIN=$G(DOMAIN)
"RTN","HDISVF01",96,0)
 I DOMAIN="" S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDISVF01",97,0)
 S SYTYPE=$G(SYTYPE)
"RTN","HDISVF01",98,0)
 I SYTYPE="" S SYTYPE=$$PROD^XUPROD()
"RTN","HDISVF01",99,0)
 I ('FAC)!(DOMAIN="")!(SYTYPE="") Q
"RTN","HDISVF01",100,0)
 ;Get pointers
"RTN","HDISVF01",101,0)
 I '$$FINDSYS^HDISVF07(DOMAIN,FAC,SYTYPE,1,.SYSPTR) Q
"RTN","HDISVF01",102,0)
 I '$$GETIEN^HDISVF05(FILE,FIELD,.FFPTR) Q
"RTN","HDISVF01",103,0)
 ;Create entry
"RTN","HDISVF01",104,0)
 D ADDSTAT(FFPTR,SYSPTR,CODE,STTYPE,DATE)
"RTN","HDISVF01",105,0)
 Q
"RTN","HDISVF01",106,0)
 ;
"RTN","HDISVF01",107,0)
SCREEN(FILE,FIELD,DATE) ;Apply screening logic to file/field ?
"RTN","HDISVF01",108,0)
 ; Input : FILE - File number
"RTN","HDISVF01",109,0)
 ;         FIELD - Field number (defaults to .01)
"RTN","HDISVF01",110,0)
 ;         DATE - FileMan date/time to check against (optional)
"RTN","HDISVF01",111,0)
 ;                (defaults to NOW)
"RTN","HDISVF01",112,0)
 ;Output : Flag indicating if screening logic should be applied
"RTN","HDISVF01",113,0)
 ;         0 = Don't screen entries during selection
"RTN","HDISVF01",114,0)
 ;         1 = Screen entries during selection
"RTN","HDISVF01",115,0)
 ; Notes : 0 (don't screen) is returned on bad input
"RTN","HDISVF01",116,0)
 ;       : If time is not included with the date, the last status
"RTN","HDISVF01",117,0)
 ;         for the given day is returned
"RTN","HDISVF01",118,0)
 N SCREEN,STAT
"RTN","HDISVF01",119,0)
 S SCREEN=0
"RTN","HDISVF01",120,0)
 S FILE=+$G(FILE)
"RTN","HDISVF01",121,0)
 I 'FILE Q SCREEN
"RTN","HDISVF01",122,0)
 S FIELD=+$G(FIELD)
"RTN","HDISVF01",123,0)
 I 'FIELD S FIELD=.01
"RTN","HDISVF01",124,0)
 S DATE=+$G(DATE)
"RTN","HDISVF01",125,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVF01",126,0)
 S STAT=$$GETSTAT(FILE,FIELD,DATE)
"RTN","HDISVF01",127,0)
 I +STAT=6 S SCREEN=1
"RTN","HDISVF01",128,0)
 Q SCREEN
"RTN","HDISVF01",129,0)
 ;
"RTN","HDISVF01",130,0)
ADDSTAT(FFPTR,SYSPTR,CODE,TYPE,DATE) ;Set file/field implementation status
"RTN","HDISVF01",131,0)
 ; Input : FFPTR - Pointer to HDIS FILE/FIELD file (#7115.6)
"RTN","HDISVF01",132,0)
 ;         SYSPTR - Pointer to HDIS SYSTEM file (#7118.21)
"RTN","HDISVF01",133,0)
 ;         CODE - Status code to set (defaults to "not started")
"RTN","HDISVF01",134,0)
 ;         TYPE - Type of status code being used (optional)
"RTN","HDISVF01",135,0)
 ;                1 = Client (default)     2 = Server
"RTN","HDISVF01",136,0)
 ;         DATE - FileMan date/time to return status for (optional)
"RTN","HDISVF01",137,0)
 ;                (defaults to NOW)
"RTN","HDISVF01",138,0)
 ;Ouput : None
"RTN","HDISVF01",139,0)
 ; Notes : If time is not included with the date, 1 second past
"RTN","HDISVF01",140,0)
 ;         midnight will be used as the time
"RTN","HDISVF01",141,0)
 ;       : If an entry for the given file/field and date/time already
"RTN","HDISVF01",142,0)
 ;         exists, a new entry will still be added
"RTN","HDISVF01",143,0)
 ;       : Call assumes that FFPTR and SYSPTR are valid
"RTN","HDISVF01",144,0)
 N STATPTR,HDISFDA,HDISIEN,HDISMSG,IENS
"RTN","HDISVF01",145,0)
 ;Check input
"RTN","HDISVF01",146,0)
 S FFPTR=+$G(FFPTR)
"RTN","HDISVF01",147,0)
 I 'FFPTR Q
"RTN","HDISVF01",148,0)
 S SYSPTR=+$G(SYSPTR)
"RTN","HDISVF01",149,0)
 I 'SYSPTR Q
"RTN","HDISVF01",150,0)
 S CODE=+$G(CODE)
"RTN","HDISVF01",151,0)
 S DATE=+$G(DATE)
"RTN","HDISVF01",152,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVF01",153,0)
 I '$P(DATE,".",2) S $P(DATE,".",2)="000001"
"RTN","HDISVF01",154,0)
 S TYPE=+$G(TYPE)
"RTN","HDISVF01",155,0)
 I ('TYPE)!(TYPE<1)!(TYPE>2) S TYPE=1
"RTN","HDISVF01",156,0)
 ;Get pointer to status
"RTN","HDISVF01",157,0)
 I '$$GETIEN^HDISVF06(CODE,TYPE,.STATPTR) Q
"RTN","HDISVF01",158,0)
 ;Create entry
"RTN","HDISVF01",159,0)
 S IENS="+1,"
"RTN","HDISVF01",160,0)
 S HDISFDA(7118.25,IENS,.01)=SYSPTR
"RTN","HDISVF01",161,0)
 S HDISFDA(7118.25,IENS,.02)=FFPTR
"RTN","HDISVF01",162,0)
 S HDISFDA(7118.25,IENS,.03)=STATPTR
"RTN","HDISVF01",163,0)
 S HDISFDA(7118.25,IENS,.04)=DATE
"RTN","HDISVF01",164,0)
 D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF01",165,0)
 Q
"RTN","HDISVF01",166,0)
 ;
"RTN","HDISVF01",167,0)
 ;---- End HDIS VUID IMPLEMENTATION STATUS file (#7118.25) APIs ----
"RTN","HDISVF01",168,0)
 ;
"RTN","HDISVF01",169,0)
FACPTR(FACNUM) ;Return pointer to INSTITUTION file (#4) for facility number
"RTN","HDISVF01",170,0)
 ; Input : FACNUM - Facility number (optional) (defaults to current)
"RTN","HDISVF01",171,0)
 ;Output : Pointer to INSTITUTION file (#4)
"RTN","HDISVF01",172,0)
 ; Notes : NULL ("") is returned if an entry can not be found
"RTN","HDISVF01",173,0)
 N FACPTR
"RTN","HDISVF01",174,0)
 S FACNUM=$G(FACNUM)
"RTN","HDISVF01",175,0)
 I 'FACNUM D  Q FACPTR
"RTN","HDISVF01",176,0)
 .S FACPTR=+$$SITE^VASITE()
"RTN","HDISVF01",177,0)
 .I FACPTR<1 S FACPTR=""
"RTN","HDISVF01",178,0)
 S FACPTR=$$LKUP^XUAF4(FACNUM)
"RTN","HDISVF01",179,0)
 I 'FACPTR S FACPTR=""
"RTN","HDISVF01",180,0)
 Q FACPTR
"RTN","HDISVF01",181,0)
 ;
"RTN","HDISVF01",182,0)
FACNUM(FACPTR) ;Return facility number
"RTN","HDISVF01",183,0)
 ; Input : FACPTR - Pointer to INSTITUTION file (#4) (optional)
"RTN","HDISVF01",184,0)
 ;                  (default to current location)
"RTN","HDISVF01",185,0)
 ;Output : Facility number
"RTN","HDISVF01",186,0)
 ;         Null ("") returned if facility number couldn't be determined
"RTN","HDISVF01",187,0)
 N FACNUM
"RTN","HDISVF01",188,0)
 S FACPTR=$G(FACPTR)
"RTN","HDISVF01",189,0)
 I 'FACPTR D  Q FACNUM
"RTN","HDISVF01",190,0)
 .S FACNUM=$P($$SITE^VASITE(),"^",3)
"RTN","HDISVF01",191,0)
 .I FACNUM<1 S FACNUM=""
"RTN","HDISVF01",192,0)
 S FACNUM=$P($$NS^XUAF4(FACPTR),"^",2)
"RTN","HDISVF01",193,0)
 I FACNUM<1 S FACNUM=""
"RTN","HDISVF01",194,0)
 Q FACNUM
"RTN","HDISVF02")
0^9^B13448096
"RTN","HDISVF02",1,0)
HDISVF02 ;BPFO/JRP - FILE UTILITIES/API;12/20/2004
"RTN","HDISVF02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF02",3,0)
 ;
"RTN","HDISVF02",4,0)
 ;---------- Begin HDIS PARAMETER file (#7118.29) APIs ----------
"RTN","HDISVF02",5,0)
 ;
"RTN","HDISVF02",6,0)
GETTYPE(SYSPTR) ;Get value of SYSTEM TYPE field (#.02)
"RTN","HDISVF02",7,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",8,0)
 ;                  (default to current system)
"RTN","HDISVF02",9,0)
 ;Output : Internal Value ^ External Value
"RTN","HDISVF02",10,0)
 ; Notes : If no value found, values for client system type returned
"RTN","HDISVF02",11,0)
 N FAC,ARR,NTRNL,XTRNL
"RTN","HDISVF02",12,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",13,0)
 I 'FAC Q "1^CLIENT"
"RTN","HDISVF02",14,0)
 S XTRNL=$$GET(7118.29,.02,(FAC_","),"B",.ARR)
"RTN","HDISVF02",15,0)
 I XTRNL="" Q "1^CLIENT"
"RTN","HDISVF02",16,0)
 Q ARR("I")_"^"_XTRNL
"RTN","HDISVF02",17,0)
 ;
"RTN","HDISVF02",18,0)
SETTYPE(VALUE,SYSPTR) ;Set value of SYSTEM TYPE field (#.02)
"RTN","HDISVF02",19,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF02",20,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",21,0)
 ;                  (default to current system)
"RTN","HDISVF02",22,0)
 ;Output : None
"RTN","HDISVF02",23,0)
 N FAC,X,HDIVAL,HDIERR
"RTN","HDISVF02",24,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",25,0)
 I 'FAC Q
"RTN","HDISVF02",26,0)
 ;Convert VALUE to internal - allows changing of uneditable field
"RTN","HDISVF02",27,0)
 D CHK^DIE(7118.29,.02,"",$G(VALUE),.HDIVAL,"HDIERR")
"RTN","HDISVF02",28,0)
 I HDIVAL="^" Q
"RTN","HDISVF02",29,0)
 S X=$$SET(7118.29,.02,(FAC_","),HDIVAL,0)
"RTN","HDISVF02",30,0)
 Q
"RTN","HDISVF02",31,0)
 ;
"RTN","HDISVF02",32,0)
GETVFAIL(SYSPTR) ;Get value of DISABLE VUID ACTIVITY field (#11)
"RTN","HDISVF02",33,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",34,0)
 ;                  (default to current system)
"RTN","HDISVF02",35,0)
 ;Output : Internal Value ^ External Value
"RTN","HDISVF02",36,0)
 ; Notes : If no value found, values for OFF are returned
"RTN","HDISVF02",37,0)
 N FAC,ARR,NTRNL,XTRNL
"RTN","HDISVF02",38,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",39,0)
 I 'FAC Q "0^OFF"
"RTN","HDISVF02",40,0)
 S XTRNL=$$GET(7118.29,11,(FAC_","),"B",.ARR)
"RTN","HDISVF02",41,0)
 I XTRNL="" Q "0^OFF"
"RTN","HDISVF02",42,0)
 Q ARR("I")_"^"_XTRNL
"RTN","HDISVF02",43,0)
 ;
"RTN","HDISVF02",44,0)
SETVFAIL(VALUE,SYSPTR) ;Set value of DISABLE VUID ACTIVITY field (#11)
"RTN","HDISVF02",45,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF02",46,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",47,0)
 ;                  (default to current system)
"RTN","HDISVF02",48,0)
 ;Output : None
"RTN","HDISVF02",49,0)
 N FAC,X
"RTN","HDISVF02",50,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",51,0)
 I 'FAC Q
"RTN","HDISVF02",52,0)
 S X=$$SET(7118.29,11,(FAC_","),$G(VALUE),1)
"RTN","HDISVF02",53,0)
 Q
"RTN","HDISVF02",54,0)
 ;
"RTN","HDISVF02",55,0)
GETVLOC(SYSPTR) ;Get value of VUID SERVER LOCATION field (#12)
"RTN","HDISVF02",56,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",57,0)
 ;                  (default to current system)
"RTN","HDISVF02",58,0)
 ;Output : Value of field
"RTN","HDISVF02",59,0)
 ; Notes : If no value found, domain for FORUM returned
"RTN","HDISVF02",60,0)
 N FAC,XTRNL
"RTN","HDISVF02",61,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",62,0)
 I 'FAC Q "FORUM.VA.GOV"
"RTN","HDISVF02",63,0)
 S XTRNL=$$GET(7118.29,12,(FAC_","),"E")
"RTN","HDISVF02",64,0)
 I XTRNL="" Q "FORUM.VA.GOV"
"RTN","HDISVF02",65,0)
 Q XTRNL
"RTN","HDISVF02",66,0)
 ;
"RTN","HDISVF02",67,0)
SETVLOC(VALUE,SYSPTR) ;Set value of VUID SERVER LOCATION field (#12)
"RTN","HDISVF02",68,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF02",69,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",70,0)
 ;                  (default to current system)
"RTN","HDISVF02",71,0)
 ;Output : None
"RTN","HDISVF02",72,0)
 N FAC,X
"RTN","HDISVF02",73,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",74,0)
 I 'FAC Q
"RTN","HDISVF02",75,0)
 S X=$$SET(7118.29,12,(FAC_","),$G(VALUE),1)
"RTN","HDISVF02",76,0)
 Q
"RTN","HDISVF02",77,0)
 ;
"RTN","HDISVF02",78,0)
GETVCON(SYSPTR) ;Get value of VUID SERVER CONNECTION TYPE field (#13)
"RTN","HDISVF02",79,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",80,0)
 ;                  (default to current system)
"RTN","HDISVF02",81,0)
 ;Output : Internal Value ^ External Value
"RTN","HDISVF02",82,0)
 ; Notes : If no value found, values for MailMan connection returned
"RTN","HDISVF02",83,0)
 N FAC,ARR,NTRNL,XTRNL
"RTN","HDISVF02",84,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",85,0)
 I 'FAC Q "1^MAILMAN"
"RTN","HDISVF02",86,0)
 S XTRNL=$$GET(7118.29,13,(FAC_","),"B",.ARR)
"RTN","HDISVF02",87,0)
 I XTRNL="" Q "1^MAILMAN"
"RTN","HDISVF02",88,0)
 Q ARR("I")_"^"_XTRNL
"RTN","HDISVF02",89,0)
 ;
"RTN","HDISVF02",90,0)
SETVCON(VALUE,SYSPTR) ;Set value of VUID SERVER CONNECTION TYPE field (#13)
"RTN","HDISVF02",91,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF02",92,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",93,0)
 ;                  (default to current system)
"RTN","HDISVF02",94,0)
 ;Output : None
"RTN","HDISVF02",95,0)
 N FAC,X
"RTN","HDISVF02",96,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",97,0)
 I 'FAC Q
"RTN","HDISVF02",98,0)
 S X=$$SET(7118.29,13,(FAC_","),$G(VALUE),1)
"RTN","HDISVF02",99,0)
 Q
"RTN","HDISVF02",100,0)
 ;
"RTN","HDISVF02",101,0)
GETVSRV(SYSPTR) ;Get value of VUID SERVER OPTION field (#21)
"RTN","HDISVF02",102,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",103,0)
 ;                  (default to current system)
"RTN","HDISVF02",104,0)
 ;Output : Value of field
"RTN","HDISVF02",105,0)
 ; Notes : If no value found, HDIS-FACILITY-DATA-SERVER returned
"RTN","HDISVF02",106,0)
 N FAC,XTRNL
"RTN","HDISVF02",107,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",108,0)
 I 'FAC Q "HDIS-FACILITY-DATA-SERVER"
"RTN","HDISVF02",109,0)
 S XTRNL=$$GET(7118.29,21,(FAC_","),"E")
"RTN","HDISVF02",110,0)
 I XTRNL="" Q "HDIS-FACILITY-DATA-SERVER"
"RTN","HDISVF02",111,0)
 Q XTRNL
"RTN","HDISVF02",112,0)
 ;
"RTN","HDISVF02",113,0)
SETVSRV(VALUE,SYSPTR) ;Set value of VUID SERVER OPTION field (#21)
"RTN","HDISVF02",114,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF02",115,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF02",116,0)
 ;                  (default to current system)
"RTN","HDISVF02",117,0)
 ;Output : None
"RTN","HDISVF02",118,0)
 N FAC,X
"RTN","HDISVF02",119,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF02",120,0)
 I 'FAC Q
"RTN","HDISVF02",121,0)
 S X=$$SET(7118.29,21,(FAC_","),$G(VALUE),1)
"RTN","HDISVF02",122,0)
 Q
"RTN","HDISVF02",123,0)
 ;
"RTN","HDISVF02",124,0)
 ;---------- End HDIS PARAMETER file APIs ----------
"RTN","HDISVF02",125,0)
 ;
"RTN","HDISVF02",126,0)
SET(FILE,FIELD,IENS,VALUE,XTRNL) ;Store value into a field
"RTN","HDISVF02",127,0)
 ; Input : FILE - File number
"RTN","HDISVF02",128,0)
 ;         FIELD - Field number
"RTN","HDISVF02",129,0)
 ;         IENS - IENS of entry
"RTN","HDISVF02",130,0)
 ;         VALUE - Value to store
"RTN","HDISVF02",131,0)
 ;         XTRNL - Flag indicating if VALUE is in external format
"RTN","HDISVF02",132,0)
 ;                 1 = Yes (external)     0 = No (internal) (default)
"RTN","HDISVF02",133,0)
 ;Output : Flag indicating if storing of value was done
"RTN","HDISVF02",134,0)
 ;         1 = OK     0 = Error
"RTN","HDISVF02",135,0)
 ; Notes : Assumes input values are valid and exist
"RTN","HDISVF02",136,0)
 ;       : Does not support word processing fields
"RTN","HDISVF02",137,0)
 N HDISFDA,HDISMSG,FLAGS
"RTN","HDISVF02",138,0)
 S HDISFDA(FILE,IENS,FIELD)=VALUE
"RTN","HDISVF02",139,0)
 S FLAGS=$S(XTRNL:"E",1:"")
"RTN","HDISVF02",140,0)
 D FILE^DIE(FLAGS,"HDISFDA","HDISMSG")
"RTN","HDISVF02",141,0)
 Q $D(HDISMSG)
"RTN","HDISVF02",142,0)
 ;
"RTN","HDISVF02",143,0)
GET(FILE,FIELD,IENS,HOW,OUTPUT) ;Get value for a field
"RTN","HDISVF02",144,0)
 ; Input : FILE - File number
"RTN","HDISVF02",145,0)
 ;         FIELD - Field number
"RTN","HDISVF02",146,0)
 ;         IENS - IENS of entry
"RTN","HDISVF02",147,0)
 ;         HOW - Flag indicating how value should be returned
"RTN","HDISVF02",148,0)
 ;               I - Return internal value
"RTN","HDISVF02",149,0)
 ;               E - Return external value
"RTN","HDISVF02",150,0)
 ;               B - Return internal and external value
"RTN","HDISVF02",151,0)
 ;         OUTPUT - Output array (pass by reference - dot notation)
"RTN","HDISVF02",152,0)
 ;                  Only set if HOW = B (both)
"RTN","HDISVF02",153,0)
 ;                  OUTPUT("I") = Internal value
"RTN","HDISVF02",154,0)
 ;                  OUTPUT("E") = External value
"RTN","HDISVF02",155,0)
 ;Output : If HOW = I, internal value
"RTN","HDISVF02",156,0)
 ;         If HOW = E, external value
"RTN","HDISVF02",157,0)
 ;         If HOW = B, external value
"RTN","HDISVF02",158,0)
 ; Notes : Assumes input values are valid and exist
"RTN","HDISVF02",159,0)
 ;       : Does not support word processing fields
"RTN","HDISVF02",160,0)
 ;       : Null ("") returned on error
"RTN","HDISVF02",161,0)
 N FLAGS,HDISTRG,HDISMSG
"RTN","HDISVF02",162,0)
 S FLAGS=$S(HOW="I":"I",HOW="E":"E",1:"IE")
"RTN","HDISVF02",163,0)
 D GETS^DIQ(FILE,IENS,FIELD,FLAGS,"HDISTRG","HDISMSG")
"RTN","HDISVF02",164,0)
 I $D(HDISMSG) K OUTPUT Q ""
"RTN","HDISVF02",165,0)
 I HOW'="B" Q $G(HDISTRG(FILE,IENS,FIELD,HOW))
"RTN","HDISVF02",166,0)
 S OUTPUT("I")=$G(HDISTRG(FILE,IENS,FIELD,"I"))
"RTN","HDISVF02",167,0)
 S OUTPUT("E")=$G(HDISTRG(FILE,IENS,FIELD,"E"))
"RTN","HDISVF02",168,0)
 Q OUTPUT("E")
"RTN","HDISVF03")
0^10^B12569792
"RTN","HDISVF03",1,0)
HDISVF03 ;BPFO/JRP - FILE UTILITIES/API;12/20/2004
"RTN","HDISVF03",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF03",3,0)
 ;
"RTN","HDISVF03",4,0)
 ;---------- Begin HDIS PARAMETER file (#7118.29) APIs ----------
"RTN","HDISVF03",5,0)
 ;
"RTN","HDISVF03",6,0)
GETSDIS(SYSPTR) ;Get value of DISABLE STATUS UPDATES field (#31)
"RTN","HDISVF03",7,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",8,0)
 ;                  (default to current system)
"RTN","HDISVF03",9,0)
 ;Output : Internal Value ^ External Value
"RTN","HDISVF03",10,0)
 ; Notes : If no value found, values for OFF are returned
"RTN","HDISVF03",11,0)
 N FAC,ARR,NTRNL,XTRNL
"RTN","HDISVF03",12,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",13,0)
 I 'FAC Q "0^OFF"
"RTN","HDISVF03",14,0)
 S XTRNL=$$GET^HDISVF02(7118.29,31,(FAC_","),"B",.ARR)
"RTN","HDISVF03",15,0)
 I XTRNL="" Q "0^NO"
"RTN","HDISVF03",16,0)
 Q ARR("I")_"^"_XTRNL
"RTN","HDISVF03",17,0)
 ;
"RTN","HDISVF03",18,0)
SETSDIS(VALUE,SYSPTR) ;Set value of DISABLE STATUS UPDATES field (#31)
"RTN","HDISVF03",19,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF03",20,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",21,0)
 ;                  (default to current system)
"RTN","HDISVF03",22,0)
 ;Output : None
"RTN","HDISVF03",23,0)
 N FAC,X
"RTN","HDISVF03",24,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",25,0)
 I 'FAC Q
"RTN","HDISVF03",26,0)
 S X=$$SET^HDISVF02(7118.29,31,(FAC_","),$G(VALUE),1)
"RTN","HDISVF03",27,0)
 Q
"RTN","HDISVF03",28,0)
 ;
"RTN","HDISVF03",29,0)
GETSLOC(SYSPTR) ;Get value of STATUS SERVER LOCATION field (#32)
"RTN","HDISVF03",30,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",31,0)
 ;                  (default to current system)
"RTN","HDISVF03",32,0)
 ;Output : Value of field
"RTN","HDISVF03",33,0)
 ; Notes : If no value found, domain for FORUM returned
"RTN","HDISVF03",34,0)
 N FAC,XTRNL
"RTN","HDISVF03",35,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",36,0)
 I 'FAC Q "FORUM.VA.GOV"
"RTN","HDISVF03",37,0)
 S XTRNL=$$GET^HDISVF02(7118.29,32,(FAC_","),"E")
"RTN","HDISVF03",38,0)
 I XTRNL="" Q "FORUM.VA.GOV"
"RTN","HDISVF03",39,0)
 Q XTRNL
"RTN","HDISVF03",40,0)
 ;
"RTN","HDISVF03",41,0)
SETSLOC(VALUE,SYSPTR) ;Set value of STATUS SERVER LOCATION field (#32)
"RTN","HDISVF03",42,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF03",43,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",44,0)
 ;                  (default to current system)
"RTN","HDISVF03",45,0)
 ;Output : None
"RTN","HDISVF03",46,0)
 N FAC,X
"RTN","HDISVF03",47,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",48,0)
 I 'FAC Q
"RTN","HDISVF03",49,0)
 S X=$$SET^HDISVF02(7118.29,32,(FAC_","),$G(VALUE),1)
"RTN","HDISVF03",50,0)
 Q
"RTN","HDISVF03",51,0)
 ;
"RTN","HDISVF03",52,0)
GETSCON(SYSPTR) ;Get value of STATUS SERVER CONNECTION TYPE field (#33)
"RTN","HDISVF03",53,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",54,0)
 ;                  (default to current system)
"RTN","HDISVF03",55,0)
 ;Output : Internal Value ^ External Value
"RTN","HDISVF03",56,0)
 ; Notes : If no value found, values for MailMan connection returned
"RTN","HDISVF03",57,0)
 N FAC,ARR,NTRNL,XTRNL
"RTN","HDISVF03",58,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",59,0)
 I 'FAC Q "1^MAILMAN"
"RTN","HDISVF03",60,0)
 S XTRNL=$$GET^HDISVF02(7118.29,33,(FAC_","),"B",.ARR)
"RTN","HDISVF03",61,0)
 I XTRNL="" Q "1^MAILMAN"
"RTN","HDISVF03",62,0)
 Q ARR("I")_"^"_XTRNL
"RTN","HDISVF03",63,0)
 ;
"RTN","HDISVF03",64,0)
SETSCON(VALUE,SYSPTR) ;Set value of STATUS SERVER CONNECTION TYPE field (#33)
"RTN","HDISVF03",65,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF03",66,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",67,0)
 ;                  (default to current system)
"RTN","HDISVF03",68,0)
 ;Output : None
"RTN","HDISVF03",69,0)
 N FAC,X
"RTN","HDISVF03",70,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",71,0)
 I 'FAC Q
"RTN","HDISVF03",72,0)
 S X=$$SET^HDISVF02(7118.29,33,(FAC_","),$G(VALUE),1)
"RTN","HDISVF03",73,0)
 Q
"RTN","HDISVF03",74,0)
 ;
"RTN","HDISVF03",75,0)
GETSSRV(SYSPTR) ;Get value of STATUS SERVER OPTION field (#41)
"RTN","HDISVF03",76,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",77,0)
 ;                  (default to current system)
"RTN","HDISVF03",78,0)
 ;Output : Value of field
"RTN","HDISVF03",79,0)
 ; Notes : If no value found, HDIS-STATUS-UPDATE-SERVER returned
"RTN","HDISVF03",80,0)
 N FAC,XTRNL
"RTN","HDISVF03",81,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",82,0)
 I 'FAC Q "HDIS-STATUS-UPDATE-SERVER"
"RTN","HDISVF03",83,0)
 S XTRNL=$$GET^HDISVF02(7118.29,41,(FAC_","),"E")
"RTN","HDISVF03",84,0)
 I XTRNL="" Q "HDIS-STATUS-UPDATE-SERVER"
"RTN","HDISVF03",85,0)
 Q XTRNL
"RTN","HDISVF03",86,0)
 ;
"RTN","HDISVF03",87,0)
SETSSRV(VALUE,SYSPTR) ;Set value of STATUS SERVER OPTION field (#41)
"RTN","HDISVF03",88,0)
 ; Input : VALUE - New value (internal or external)
"RTN","HDISVF03",89,0)
 ;       : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",90,0)
 ;                  (default to current system)
"RTN","HDISVF03",91,0)
 ;Output : None
"RTN","HDISVF03",92,0)
 N FAC,X
"RTN","HDISVF03",93,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",94,0)
 I 'FAC Q
"RTN","HDISVF03",95,0)
 S X=$$SET^HDISVF02(7118.29,41,(FAC_","),$G(VALUE),1)
"RTN","HDISVF03",96,0)
 Q
"RTN","HDISVF03",97,0)
 ;
"RTN","HDISVF03",98,0)
GETNSVL(SYSPTR) ;Get value of LAST NON-STANDARD VUID field (#51)
"RTN","HDISVF03",99,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",100,0)
 ;                  (default to current system)
"RTN","HDISVF03",101,0)
 ;Output : Value of field
"RTN","HDISVF03",102,0)
 ; Notes : If no value found, null ("") returned
"RTN","HDISVF03",103,0)
 N FAC,XTRNL
"RTN","HDISVF03",104,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",105,0)
 I 'FAC Q ""
"RTN","HDISVF03",106,0)
 S XTRNL=$$GET^HDISVF02(7118.29,51,(FAC_","),"E")
"RTN","HDISVF03",107,0)
 Q XTRNL
"RTN","HDISVF03",108,0)
 ;
"RTN","HDISVF03",109,0)
GETNSVE(SYSPTR) ;Get value of ENDING NON-STANDARD VUID field (#52)
"RTN","HDISVF03",110,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",111,0)
 ;                  (default to current system)
"RTN","HDISVF03",112,0)
 ;Output : Value of field
"RTN","HDISVF03",113,0)
 ; Notes : If no value found, null ("") returned
"RTN","HDISVF03",114,0)
 N FAC,XTRNL
"RTN","HDISVF03",115,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",116,0)
 I 'FAC Q ""
"RTN","HDISVF03",117,0)
 S XTRNL=$$GET^HDISVF02(7118.29,52,(FAC_","),"E")
"RTN","HDISVF03",118,0)
 Q XTRNL
"RTN","HDISVF03",119,0)
 ;
"RTN","HDISVF03",120,0)
CALCNSV(SYSPTR) ;Calculate next non-standard VUID
"RTN","HDISVF03",121,0)
 ; Input : SYSPTR - Pointer to HDIS System file
"RTN","HDISVF03",122,0)
 ;                  (default to current system)
"RTN","HDISVF03",123,0)
 ;Output : Next non-standard VUID centralized VUID server should
"RTN","HDISVF03",124,0)
 ;         use when assigning non-standard VUIDs.
"RTN","HDISVF03",125,0)
 ; Notes : LAST NON-STANDARD VUID field (#51) updated with
"RTN","HDISVF03",126,0)
 ;         calculated value
"RTN","HDISVF03",127,0)
 ;       : Locking implemented to prevent simultaneous calculations
"RTN","HDISVF03",128,0)
 ;       : Null ("") returned on error OR if calculated value exceeds
"RTN","HDISVF03",129,0)
 ;         allowed ending value (ENDING NON-STANDARD VUID field, #52)
"RTN","HDISVF03",130,0)
 N FAC,CVUID,NVUID,EVUID,OK,X
"RTN","HDISVF03",131,0)
 S FAC=$$GETPTR^HDISVF10($G(SYSPTR))
"RTN","HDISVF03",132,0)
 I 'FAC Q ""
"RTN","HDISVF03",133,0)
 S OK=0
"RTN","HDISVF03",134,0)
 F X=1:1:10 Q:OK  L +^HDISF(7118.29,"CALCULATE NEXT VUID"):1 S:$T OK=1 I 'OK H 1
"RTN","HDISVF03",135,0)
 I 'OK Q ""
"RTN","HDISVF03",136,0)
 S CVUID=$$GETNSVL($G(SYSPTR))
"RTN","HDISVF03",137,0)
 S EVUID=$$GETNSVE($G(SYSPTR))
"RTN","HDISVF03",138,0)
 I (CVUID="")!(EVUID="") L -^HDISF(7118.29,"CALCULATE NEXT VUID") Q ""
"RTN","HDISVF03",139,0)
 S NVUID=CVUID+1
"RTN","HDISVF03",140,0)
 I NVUID>EVUID L -^HDISF(7118.29,"CALCULATE NEXT VUID") Q ""
"RTN","HDISVF03",141,0)
 S X=$$SET^HDISVF02(7118.29,51,(FAC_","),NVUID,1)
"RTN","HDISVF03",142,0)
 L -^HDISF(7118.29,"CALCULATE NEXT VUID")
"RTN","HDISVF03",143,0)
 Q NVUID
"RTN","HDISVF03",144,0)
 ;
"RTN","HDISVF03",145,0)
 ;---------- End HDIS PARAMETER file APIs ----------
"RTN","HDISVF04")
0^11^B24038663
"RTN","HDISVF04",1,0)
HDISVF04 ;ALB/RMO - 7118.11 File Utilities/API Cont.; 1/10/05@11:37:00
"RTN","HDISVF04",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF04",3,0)
 ;
"RTN","HDISVF04",4,0)
 ;---- Begin HDIS Term/Concept VUID Association file (#7118.11) API(s) ----
"RTN","HDISVF04",5,0)
 ;
"RTN","HDISVF04",6,0)
GETTERM(HDISTERM,HDISFARY,HDISTIEN) ;Get a Term/Concept Entry by Term/Concept and File/Field
"RTN","HDISVF04",7,0)
 ; Input  -- HDISTERM Term/Concept Text
"RTN","HDISVF04",8,0)
 ;           HDISFARY File/Field Array - Pass by HDISFARY(HDIS File/Field file #7115.6 IEN)=""
"RTN","HDISVF04",9,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",10,0)
 ;           If Successful:
"RTN","HDISVF04",11,0)
 ;           HDISTIEN HDIS Term/Concept VUID Association file IEN
"RTN","HDISVF04",12,0)
 N HDISFIEN,HDISI
"RTN","HDISVF04",13,0)
 ;Initialize output
"RTN","HDISVF04",14,0)
 S HDISTIEN=""
"RTN","HDISVF04",15,0)
 ;Check for missing variables, exit if not defined
"RTN","HDISVF04",16,0)
 I '$D(HDISTERM)!('$D(HDISFARY)) G GETTERMQ
"RTN","HDISVF04",17,0)
 ;Check for existing Term/Concept and File/Field
"RTN","HDISVF04",18,0)
 S HDISFIEN=0
"RTN","HDISVF04",19,0)
 F  S HDISFIEN=$O(HDISFARY(HDISFIEN)) Q:'HDISFIEN  D
"RTN","HDISVF04",20,0)
 . I $D(^HDISV(7118.11,"AC",HDISFIEN)) D
"RTN","HDISVF04",21,0)
 . S HDISI=0
"RTN","HDISVF04",22,0)
 . F  S HDISI=$O(^HDISV(7118.11,"AC",HDISFIEN,HDISI)) Q:'HDISI!($G(HDISTIEN))  D
"RTN","HDISVF04",23,0)
 . . I $D(^HDISV(7118.11,HDISI,0)),$P(^(0),"^",1)=HDISTERM D
"RTN","HDISVF04",24,0)
 . . . S HDISTIEN=HDISI
"RTN","HDISVF04",25,0)
GETTERMQ Q +$S($G(HDISTIEN)>0:1,1:0)
"RTN","HDISVF04",26,0)
 ;
"RTN","HDISVF04",27,0)
ADDTERM(HDISTERM,HDISVUID,HDISFARY,HDISNTLF,HDISCKTF,HDISEDTM,HDISSTAT,HDISTIEN,HDISERRM) ;Add a New Term/Concept Entry
"RTN","HDISVF04",28,0)
 ; Input  -- HDISTERM Term/Concept Text
"RTN","HDISVF04",29,0)
 ;           HDISVUID VUID
"RTN","HDISVF04",30,0)
 ;           HDISFARY File/Field Array - Pass by HDISFARY(HDIS File/Field file #7115.6 IEN)=""
"RTN","HDISVF04",31,0)
 ;           HDISNTLF National Standard Flag  (Optional- Default 0)
"RTN","HDISVF04",32,0)
 ;                    1=Yes and 0=No
"RTN","HDISVF04",33,0)
 ;           HDISCKTF Check for Existing Term/Concept Flag  (Optional- Default 1)
"RTN","HDISVF04",34,0)
 ;                    1=Yes and 0=No
"RTN","HDISVF04",35,0)
 ;           HDISEDTM Effective Date/Time  (Optional- Default NOW)
"RTN","HDISVF04",36,0)
 ;           HDISSTAT Status  (Optional- Default 0)
"RTN","HDISVF04",37,0)
 ;                    1=Active and 0=Inactive
"RTN","HDISVF04",38,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",39,0)
 ;           If Successful:
"RTN","HDISVF04",40,0)
 ;           HDISTIEN HDIS Term/Concept VUID Association file IEN
"RTN","HDISVF04",41,0)
 ;           If Failure:
"RTN","HDISVF04",42,0)
 ;           HDISERRM Error Message  (Optional)
"RTN","HDISVF04",43,0)
 N HDISCNT,HDISERRF,HDISFDA,HDISFFNM,HDISFIEN,HDISI,HDISIEN,HDISIENS,HDISMSG,HDISNDTF,HDISOKF
"RTN","HDISVF04",44,0)
 ;Initialize output
"RTN","HDISVF04",45,0)
 S (HDISTIEN,HDISERRM)=""
"RTN","HDISVF04",46,0)
 ;Check for missing variables, exit if not defined
"RTN","HDISVF04",47,0)
 I '$D(HDISTERM)!($G(HDISVUID)'>0)!('$D(HDISFARY)) D  G ADDTERMQ
"RTN","HDISVF04",48,0)
 . S HDISERRM="Required Variable Missing."
"RTN","HDISVF04",49,0)
 ;Set National Standard Flag to default of 0, if needed
"RTN","HDISVF04",50,0)
 S HDISNTLF=$S('$D(HDISNTLF):0,1:HDISNTLF)
"RTN","HDISVF04",51,0)
 ;Set No Effective Date/Time Flag to 1 if there is no Effective Date/Time and no Status
"RTN","HDISVF04",52,0)
 I '$G(HDISEDTM),'$G(HDISSTAT) D
"RTN","HDISVF04",53,0)
 . S HDISNDTF=1
"RTN","HDISVF04",54,0)
 ;If No Effective Date/Time Flag is set to 1, Effective Date/Time Multiple should not be created
"RTN","HDISVF04",55,0)
 I '$G(HDISNDTF) D
"RTN","HDISVF04",56,0)
 . ;Set Effective Date/Time to default of NOW, if needed
"RTN","HDISVF04",57,0)
 . S HDISEDTM=$S('$D(HDISEDTM):$$NOW^XLFDT,1:HDISEDTM)
"RTN","HDISVF04",58,0)
 . ;Set Status to default of 0, if needed
"RTN","HDISVF04",59,0)
 . S HDISSTAT=$S('$D(HDISSTAT):0,1:HDISSTAT)
"RTN","HDISVF04",60,0)
 ;Set Check for Existing Term/Concept Flag to default of 1, if needed
"RTN","HDISVF04",61,0)
 S HDISCKTF=$S('$D(HDISCKTF):1,1:HDISCKTF)
"RTN","HDISVF04",62,0)
 ;Check for existing Term/Concept and File/Field, return error and exit if it exists
"RTN","HDISVF04",63,0)
 I $G(HDISCKTF),$$GETTERM(HDISTERM,.HDISFARY) D  G ADDTERMQ
"RTN","HDISVF04",64,0)
 . S HDISERRM="Term/Concept and File/Field already exists."
"RTN","HDISVF04",65,0)
 ;Check for existing Term/Concept and VUID, return error and exit if it exists
"RTN","HDISVF04",66,0)
 I $$GETIENS(HDISVUID,.HDISIENS) D  G ADDTERMQ:$G(HDISERRF)
"RTN","HDISVF04",67,0)
 . S HDISI=0
"RTN","HDISVF04",68,0)
 . F  S HDISI=$O(HDISIENS(HDISI)) Q:'HDISI!($G(HDISERRF))  I $G(HDISIENS(HDISI))=HDISTERM D
"RTN","HDISVF04",69,0)
 . . S HDISERRF=1
"RTN","HDISVF04",70,0)
 . . S HDISERRM="Term/Concept and VUID already exists."
"RTN","HDISVF04",71,0)
 ;Set array for Term/Concept and VUID
"RTN","HDISVF04",72,0)
 S HDISFDA(7118.11,"+1,",.01)=$G(HDISTERM)
"RTN","HDISVF04",73,0)
 S HDISFDA(7118.11,"+1,",99.99)=$G(HDISVUID)
"RTN","HDISVF04",74,0)
 ;Set array for National Standard Flag to Yes
"RTN","HDISVF04",75,0)
 I $G(HDISNTLF) D
"RTN","HDISVF04",76,0)
 . S HDISFDA(7118.11,"+1,",1.02)=1
"RTN","HDISVF04",77,0)
 ELSE  D
"RTN","HDISVF04",78,0)
 . ;Set array for Date/Time Created and National Standard Flag to No
"RTN","HDISVF04",79,0)
 . S HDISFDA(7118.11,"+1,",1.01)=$$NOW^XLFDT
"RTN","HDISVF04",80,0)
 . S HDISFDA(7118.11,"+1,",1.02)=0
"RTN","HDISVF04",81,0)
 ;If No Effective Date/Time Flag is set to 1, Effective Date/Time Multiple should not be created
"RTN","HDISVF04",82,0)
 I '$G(HDISNDTF) D
"RTN","HDISVF04",83,0)
 . ;Set array for Effective Date/Time and Status
"RTN","HDISVF04",84,0)
 . S HDISFDA(7118.12,"+2,+1,",.01)=$G(HDISEDTM)
"RTN","HDISVF04",85,0)
 . S HDISFDA(7118.12,"+2,+1,",.02)=$G(HDISSTAT)
"RTN","HDISVF04",86,0)
 ;Set array for File/Field
"RTN","HDISVF04",87,0)
 S HDISFIEN=0
"RTN","HDISVF04",88,0)
 S HDISCNT=2
"RTN","HDISVF04",89,0)
 F  S HDISFIEN=$O(HDISFARY(HDISFIEN)) Q:'HDISFIEN  I $D(^HDIS(7115.6,HDISFIEN,0)) S HDISFFNM=$P(^(0),"^",1) D
"RTN","HDISVF04",90,0)
 . S HDISCNT=HDISCNT+1
"RTN","HDISVF04",91,0)
 . S HDISFDA(7118.13,"+"_HDISCNT_",+1,",.01)=HDISFFNM
"RTN","HDISVF04",92,0)
 D UPDATE^DIE("E","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF04",93,0)
 ;Check for error
"RTN","HDISVF04",94,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF04",95,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF04",96,0)
 ELSE  D
"RTN","HDISVF04",97,0)
 . S HDISTIEN=+$G(HDISIEN(1))
"RTN","HDISVF04",98,0)
 . S HDISOKF=1
"RTN","HDISVF04",99,0)
 D CLEAN^DILF
"RTN","HDISVF04",100,0)
ADDTERMQ Q +$G(HDISOKF)
"RTN","HDISVF04",101,0)
 ;
"RTN","HDISVF04",102,0)
GETIENS(HDISVUID,HDISIENS) ;Get IENS for a Term/Concept by VUID
"RTN","HDISVF04",103,0)
 ; Input  -- HDISVUID VUID
"RTN","HDISVF04",104,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",105,0)
 ;           If Successful:
"RTN","HDISVF04",106,0)
 ;           HDISIENS Array where HDISIENS(IEN)=Term/Concept field (#.01)
"RTN","HDISVF04",107,0)
 N HDISI
"RTN","HDISVF04",108,0)
 ;Initialize output
"RTN","HDISVF04",109,0)
 K HDISIENS
"RTN","HDISVF04",110,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF04",111,0)
 I $G(HDISVUID)'>0 G GETIENSQ
"RTN","HDISVF04",112,0)
 ;Check for entries by VUID
"RTN","HDISVF04",113,0)
 S HDISI=0
"RTN","HDISVF04",114,0)
 F  S HDISI=$O(^HDISV(7118.11,"AVUID",HDISVUID,HDISI)) Q:'HDISI  D
"RTN","HDISVF04",115,0)
 . I $D(^HDISV(7118.11,HDISI,0)) S HDISIENS(HDISI)=$P($G(^(0)),"^",1)
"RTN","HDISVF04",116,0)
GETIENSQ Q +$S($D(HDISIENS):1,1:0)
"RTN","HDISVF04",117,0)
 ;
"RTN","HDISVF04",118,0)
GETVUID(HDISTIEN,HDISVUID) ;Get VUID for a Term/Concept by IEN
"RTN","HDISVF04",119,0)
 ; Input  -- HDISTIEN HDIS Term/Concept VUID Association file IEN
"RTN","HDISVF04",120,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",121,0)
 ;           If Successful:
"RTN","HDISVF04",122,0)
 ;           HDISVUID VUID
"RTN","HDISVF04",123,0)
 ;Initialize output
"RTN","HDISVF04",124,0)
 S HDISVUID=""
"RTN","HDISVF04",125,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF04",126,0)
 I $G(HDISTIEN)'>0 G GETVUIDQ
"RTN","HDISVF04",127,0)
 ;Check for VUID by IEN
"RTN","HDISVF04",128,0)
 I $D(^HDISV(7118.11,HDISTIEN,"VUID")) S HDISVUID=$P($G(^("VUID")),"^",1)
"RTN","HDISVF04",129,0)
GETVUIDQ Q +$S($G(HDISVUID)>0:1,1:0)
"RTN","HDISVF04",130,0)
 ;
"RTN","HDISVF04",131,0)
GETNTLF(HDISTIEN,HDISNTLF) ;Get National Standard Flag for a Term/Concept by IEN
"RTN","HDISVF04",132,0)
 ; Input  -- HDISTIEN HDIS Term/Concept VUID Association file IEN
"RTN","HDISVF04",133,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",134,0)
 ;           If Successful:
"RTN","HDISVF04",135,0)
 ;           HDISNTLF National Standard Flag
"RTN","HDISVF04",136,0)
 ;Initialize output
"RTN","HDISVF04",137,0)
 S HDISNTLF=""
"RTN","HDISVF04",138,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF04",139,0)
 I $G(HDISTIEN)'>0 G GETNTLFQ
"RTN","HDISVF04",140,0)
 ;Check for National Standard Flag by IEN
"RTN","HDISVF04",141,0)
 I $D(^HDISV(7118.11,HDISTIEN,1)) S HDISNTLF=$P($G(^(1)),"^",2)
"RTN","HDISVF04",142,0)
GETNTLFQ Q +$S($G(HDISNTLF)]"":1,1:0)
"RTN","HDISVF04",143,0)
 ;
"RTN","HDISVF04",144,0)
GETSTAT(HDISTIEN,HDISDTM,HDISEDTM,HDISSTAT) ;Get Effective Date and Status for a Term/Concept by IEN and Date/Time
"RTN","HDISVF04",145,0)
 ; Input  -- HDISTIEN HDIS Term/Concept VUID Association file IEN
"RTN","HDISVF04",146,0)
 ;           HDISDTM  Date/Time  (Optional- Default NOW for Current)
"RTN","HDISVF04",147,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF04",148,0)
 ;           If Successful:
"RTN","HDISVF04",149,0)
 ;           HDISEDTM Effective Date/Time
"RTN","HDISVF04",150,0)
 ;           HDISSTAT Status
"RTN","HDISVF04",151,0)
 N HDIS0,HDISII
"RTN","HDISVF04",152,0)
 ;Initialize output
"RTN","HDISVF04",153,0)
 S (HDISEDTM,HDISSTAT)=""
"RTN","HDISVF04",154,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF04",155,0)
 I $G(HDISTIEN)'>0 G GETSTATQ
"RTN","HDISVF04",156,0)
 ;Set Date/Time to default of NOW for Current, if needed
"RTN","HDISVF04",157,0)
 S HDISDTM=$S('$D(HDISDTM):$$NOW^XLFDT,1:HDISDTM)
"RTN","HDISVF04",158,0)
 S:'$P(HDISDTM,".",2) HDISDTM=HDISDTM_.235959
"RTN","HDISVF04",159,0)
 ;Get Effective Date/Time Multiple IEN by IEN and Date/Time
"RTN","HDISVF04",160,0)
 S HDISII=+$O(^(+$O(^HDISV(7118.11,HDISTIEN,"TERMSTATUS","B",HDISDTM),-1),0))
"RTN","HDISVF04",161,0)
 ;Check for Effective Date/Time and Status
"RTN","HDISVF04",162,0)
 I $D(^HDISV(7118.11,HDISTIEN,"TERMSTATUS",HDISII,0)) S HDIS0=$G(^(0)) D
"RTN","HDISVF04",163,0)
 . S HDISEDTM=$P(HDIS0,"^",1)
"RTN","HDISVF04",164,0)
 . S HDISSTAT=$P(HDIS0,"^",2)
"RTN","HDISVF04",165,0)
GETSTATQ Q +$S($G(HDISEDTM)'=""&($G(HDISSTAT)'=""):1,1:0)
"RTN","HDISVF04",166,0)
 ;          
"RTN","HDISVF04",167,0)
 ;---- End HDIS Term/Concept VUID Association file (#7118.11) API(s) ----
"RTN","HDISVF05")
0^12^B4450327
"RTN","HDISVF05",1,0)
HDISVF05 ;ALB/RMO - 7115.6 File Utilities/API Cont.; 1/11/05@2:37:00
"RTN","HDISVF05",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF05",3,0)
 ;
"RTN","HDISVF05",4,0)
 ;---- Begin HDIS File/Field file (#7115.6) API(s) ----
"RTN","HDISVF05",5,0)
 ;
"RTN","HDISVF05",6,0)
ADDFFNM(HDISFILN,HDISFLDN,HDISFIEN,HDISERRM) ;Add a New File/Field Entry
"RTN","HDISVF05",7,0)
 ; Input  -- HDISFILN File Number
"RTN","HDISVF05",8,0)
 ;           HDISFLDN Field Number  (Optional- Default .01)
"RTN","HDISVF05",9,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF05",10,0)
 ;           If Successful:
"RTN","HDISVF05",11,0)
 ;           HDISFIEN  HDIS File/Field file IEN
"RTN","HDISVF05",12,0)
 ;           If Failure:
"RTN","HDISVF05",13,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF05",14,0)
 N HDISFDA,HDISFFNM,HDISIEN,HDISMSG,HDISOKF
"RTN","HDISVF05",15,0)
 ;Initialize output
"RTN","HDISVF05",16,0)
 S (HDISFIEN,HDISERRM)=""
"RTN","HDISVF05",17,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF05",18,0)
 I $G(HDISFILN)'>0 D  G ADDFFNMQ
"RTN","HDISVF05",19,0)
 . S HDISERRM="Required Variable Missing."
"RTN","HDISVF05",20,0)
 ;Set Field Number to default of .01, if needed
"RTN","HDISVF05",21,0)
 S HDISFLDN=$S('$D(HDISFLDN):.01,1:HDISFLDN)
"RTN","HDISVF05",22,0)
 ;Set File/Field Name to file#~field# (i.e. 10.3~.01)
"RTN","HDISVF05",23,0)
 S HDISFFNM=HDISFILN_"~"_HDISFLDN
"RTN","HDISVF05",24,0)
 ;Check for existing File Number and Field Number, return error and exit if it exists
"RTN","HDISVF05",25,0)
 I $D(^HDIS(7115.6,"AFIL",HDISFILN,HDISFLDN)) D  G ADDFFNMQ
"RTN","HDISVF05",26,0)
 . S HDISERRM="File Number and Field Number already exists."
"RTN","HDISVF05",27,0)
 ;Set array for File/Field Name, File Number and Field Number
"RTN","HDISVF05",28,0)
 S HDISFDA(7115.6,"+1,",.01)=$G(HDISFFNM)
"RTN","HDISVF05",29,0)
 S HDISFDA(7115.6,"+1,",.02)=$G(HDISFILN)
"RTN","HDISVF05",30,0)
 S HDISFDA(7115.6,"+1,",.04)=$G(HDISFLDN)
"RTN","HDISVF05",31,0)
 D UPDATE^DIE("E","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF05",32,0)
 ;Check for error
"RTN","HDISVF05",33,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF05",34,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF05",35,0)
 ELSE  D
"RTN","HDISVF05",36,0)
 . S HDISFIEN=+$G(HDISIEN(1))
"RTN","HDISVF05",37,0)
 . S HDISOKF=1
"RTN","HDISVF05",38,0)
 D CLEAN^DILF
"RTN","HDISVF05",39,0)
ADDFFNMQ Q +$G(HDISOKF)
"RTN","HDISVF05",40,0)
 ;
"RTN","HDISVF05",41,0)
GETIEN(HDISFILN,HDISFLDN,HDISFIEN) ;Get IEN for a File/Field by File Number and Field Number
"RTN","HDISVF05",42,0)
 ; Input  -- HDISFILN File Number
"RTN","HDISVF05",43,0)
 ;           HDISFLDN Field Number  (Optional- Default .01)
"RTN","HDISVF05",44,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF05",45,0)
 ;           If Successful:
"RTN","HDISVF05",46,0)
 ;           HDISFIEN  HDIS File/Field file IEN
"RTN","HDISVF05",47,0)
 ;Initialize output
"RTN","HDISVF05",48,0)
 S HDISFIEN=""
"RTN","HDISVF05",49,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF05",50,0)
 I $G(HDISFILN)'>0 G GETIENQ
"RTN","HDISVF05",51,0)
 ;Set Field Number to .01 default if needed
"RTN","HDISVF05",52,0)
 S HDISFLDN=$S('$D(HDISFLDN):.01,1:HDISFLDN)
"RTN","HDISVF05",53,0)
 ;Check for entry by File Number and Field Number
"RTN","HDISVF05",54,0)
 S HDISFIEN=$O(^HDIS(7115.6,"AFIL",HDISFILN,HDISFLDN,0))
"RTN","HDISVF05",55,0)
GETIENQ Q +$S($G(HDISFIEN)>0:1,1:0)
"RTN","HDISVF05",56,0)
 ;
"RTN","HDISVF05",57,0)
GETFF(HDISFIEN,HDISFILN,HDISFLDN) ;Get File Number and Field Number for a File/Field by IEN
"RTN","HDISVF05",58,0)
 ; Input  -- HDISFIEN  HDIS File/Field file IEN
"RTN","HDISVF05",59,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF05",60,0)
 ;           If Successful:
"RTN","HDISVF05",61,0)
 ;           HDISFILN File Number
"RTN","HDISVF05",62,0)
 ;           HDISFLDN Field Number
"RTN","HDISVF05",63,0)
 N HDIS0
"RTN","HDISVF05",64,0)
 ;Initialize output
"RTN","HDISVF05",65,0)
 S (HDISFILN,HDISFLDN)=""
"RTN","HDISVF05",66,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF05",67,0)
 I $G(HDISFIEN)'>0 G GETFFQ
"RTN","HDISVF05",68,0)
 ;Check for File Number and Field Number by IEN
"RTN","HDISVF05",69,0)
 I $D(^HDIS(7115.6,HDISFIEN,0)) S HDIS0=$G(^(0)) D
"RTN","HDISVF05",70,0)
 . S HDISFILN=$P(HDIS0,"^",2)
"RTN","HDISVF05",71,0)
 . S HDISFLDN=$P(HDIS0,"^",4)
"RTN","HDISVF05",72,0)
GETFFQ Q +$S($G(HDISFILN)'=""&($G(HDISFLDN)'=""):1,1:0)
"RTN","HDISVF05",73,0)
 ;
"RTN","HDISVF05",74,0)
 ;---- End HDIS File/Field file (#7115.6) API(s) ----
"RTN","HDISVF06")
0^13^B963550
"RTN","HDISVF06",1,0)
HDISVF06 ;ALB/RMO - 7115.5 File Utilities/API Cont.; 1/11/05@7:04:00
"RTN","HDISVF06",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF06",3,0)
 ;
"RTN","HDISVF06",4,0)
 ;---- Begin HDIS Status file (#7115.5) API(s) ----
"RTN","HDISVF06",5,0)
 ;
"RTN","HDISVF06",6,0)
GETIEN(HDISCODE,HDISTYPE,HDISSIEN) ;Get IEN for the Status by Status Type and Status Code
"RTN","HDISVF06",7,0)
 ; Input  -- HDISCODE Status Code
"RTN","HDISVF06",8,0)
 ;           HDISTYPE Status Type  (Optional- Default 1=Client)
"RTN","HDISVF06",9,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF06",10,0)
 ;           If Successful:
"RTN","HDISVF06",11,0)
 ;           HDISSIEN  HDIS Status file IEN
"RTN","HDISVF06",12,0)
 ;Initialize output
"RTN","HDISVF06",13,0)
 S HDISSIEN=""
"RTN","HDISVF06",14,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF06",15,0)
 I $G(HDISCODE)="" G GETIENQ
"RTN","HDISVF06",16,0)
 ;Set Status Type to default of 1=Client, if needed
"RTN","HDISVF06",17,0)
 S HDISTYPE=$S('$D(HDISTYPE):1,1:HDISTYPE)
"RTN","HDISVF06",18,0)
 ;Check for entry by Status Type and Status Code
"RTN","HDISVF06",19,0)
 S HDISSIEN=$O(^HDIS(7115.5,"AC",HDISTYPE,HDISCODE,0))
"RTN","HDISVF06",20,0)
GETIENQ Q +$S($G(HDISSIEN)>0:1,1:0)
"RTN","HDISVF06",21,0)
 ;
"RTN","HDISVF06",22,0)
GETCODE(HDISSIEN,HDISCODE) ;Get Status Code for the Status by IEN
"RTN","HDISVF06",23,0)
 ; Input  -- HDISSIEN  HDIS Status file IEN
"RTN","HDISVF06",24,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF06",25,0)
 ;           If Successful:
"RTN","HDISVF06",26,0)
 ;           HDISCODE Status Code
"RTN","HDISVF06",27,0)
 ;Initialize output
"RTN","HDISVF06",28,0)
 S HDISCODE=""
"RTN","HDISVF06",29,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF06",30,0)
 I $G(HDISSIEN)'>0 G GETCODEQ
"RTN","HDISVF06",31,0)
 ;Check for Status Code by IEN
"RTN","HDISVF06",32,0)
 I $D(^HDIS(7115.5,HDISSIEN,0)) S HDISCODE=$P(^(0),"^",2)
"RTN","HDISVF06",33,0)
GETCODEQ Q +$S($G(HDISCODE)'="":1,1:0)
"RTN","HDISVF06",34,0)
 ;
"RTN","HDISVF06",35,0)
 ;---- End HDIS Status file (#7115.5) API(s) ----
"RTN","HDISVF07")
0^14^B14585322
"RTN","HDISVF07",1,0)
HDISVF07 ;ALB/RMO - 7118.21 File Utilities/API Cont.; 1/13/05@1:22:00
"RTN","HDISVF07",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF07",3,0)
 ;
"RTN","HDISVF07",4,0)
 ;---- Begin HDIS System file (#7118.21) API(s) ----
"RTN","HDISVF07",5,0)
 ;
"RTN","HDISVF07",6,0)
FINDSYS(HDISDIPA,HDISFACN,HDISTYPE,HDISADDF,HDISYIEN,HDISERRM) ;Find or Add a System Entry
"RTN","HDISVF07",7,0)
 ; Input  -- HDISDIPA Domain/IP Address
"RTN","HDISVF07",8,0)
 ;           HDISFACN Facility Number  (Optional- Default current facility number)
"RTN","HDISVF07",9,0)
 ;           HDISTYPE Type  (Optional- Default current system)
"RTN","HDISVF07",10,0)
 ;           HDISADDF Add a New Entry Flag (Optional- Default 0)
"RTN","HDISVF07",11,0)
 ;                    1=Yes and 0=No
"RTN","HDISVF07",12,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",13,0)
 ;           If Successful:
"RTN","HDISVF07",14,0)
 ;           HDISYIEN  HDIS System file IEN
"RTN","HDISVF07",15,0)
 ;           If Failure:
"RTN","HDISVF07",16,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF07",17,0)
 N HDISI,HDISIPTR,HDISOKF,HDISRSLT
"RTN","HDISVF07",18,0)
 ;Initialize output
"RTN","HDISVF07",19,0)
 S (HDISYIEN,HDISERRM)=""
"RTN","HDISVF07",20,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF07",21,0)
 I $G(HDISDIPA)="" D  G FINDSYSQ
"RTN","HDISVF07",22,0)
 . S HDISERRM="Required Variable Missing."
"RTN","HDISVF07",23,0)
 ;Set Facility Number to default of current facility number, if needed
"RTN","HDISVF07",24,0)
 S HDISFACN=$S('$D(HDISFACN):$$FACNUM^HDISVF01,1:HDISFACN)
"RTN","HDISVF07",25,0)
 ;Check Facility Number, return error and exit if no value
"RTN","HDISVF07",26,0)
 I $G(HDISFACN)="" D  G FINDSYSQ
"RTN","HDISVF07",27,0)
 . S HDISERRM="Unable to determine Facility Number."
"RTN","HDISVF07",28,0)
 ;Set Institution file (#4) IEN 
"RTN","HDISVF07",29,0)
 S HDISIPTR=$$FACPTR^HDISVF01(HDISFACN)
"RTN","HDISVF07",30,0)
 ;Check Institution file (#4) IEN, return error and exit if no value
"RTN","HDISVF07",31,0)
 I $G(HDISIPTR)'>0 D  G FINDSYSQ
"RTN","HDISVF07",32,0)
 . S HDISERRM="Unable to determine Institution file (#4) IEN."
"RTN","HDISVF07",33,0)
 ;Set Type to default of current system, if needed
"RTN","HDISVF07",34,0)
 S HDISTYPE=$S('$D(HDISTYPE):$$PROD^XUPROD,1:HDISTYPE)
"RTN","HDISVF07",35,0)
 ;Convert HDISTYPE to internal value
"RTN","HDISVF07",36,0)
 D CHK^DIE(7118.21,.03,"",HDISTYPE,.HDISRSLT)
"RTN","HDISVF07",37,0)
 S HDISTYPE=HDISRSLT
"RTN","HDISVF07",38,0)
 ;Check for existing Institution file (#4) IEN and Domain/IP Address, return entry and exit if it exists
"RTN","HDISVF07",39,0)
 I $D(^HDISF(7118.21,"B",HDISIPTR)) D  G FINDSYSQ:$G(HDISYIEN)
"RTN","HDISVF07",40,0)
 . S HDISI=0
"RTN","HDISVF07",41,0)
 . F  S HDISI=$O(^HDISF(7118.21,"B",HDISIPTR,HDISI)) Q:'HDISI!($G(HDISYIEN))  D
"RTN","HDISVF07",42,0)
 . . I $D(^HDISF(7118.21,HDISI,0)),$P(^(0),"^",2)=HDISDIPA D
"RTN","HDISVF07",43,0)
 . . . S HDISYIEN=HDISI
"RTN","HDISVF07",44,0)
 . . . S HDISOKF=1
"RTN","HDISVF07",45,0)
 ;If flag is set, Add a New System Entry
"RTN","HDISVF07",46,0)
 I $G(HDISADDF) S HDISOKF=$$ADDSYS(HDISIPTR,HDISDIPA,HDISTYPE,.HDISYIEN,.HDISERRM)
"RTN","HDISVF07",47,0)
 ; 
"RTN","HDISVF07",48,0)
FINDSYSQ Q +$G(HDISOKF)
"RTN","HDISVF07",49,0)
 ;
"RTN","HDISVF07",50,0)
ADDSYS(HDISIPTR,HDISDIPA,HDISTYPE,HDISYIEN,HDISERRM) ;Add a New System Entry
"RTN","HDISVF07",51,0)
 ; Input  -- HDISIPTR Institution file (#4) IEN
"RTN","HDISVF07",52,0)
 ;           HDISDIPA Domain/IP Address
"RTN","HDISVF07",53,0)
 ;           HDISTYPE Type (Internal Value)
"RTN","HDISVF07",54,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",55,0)
 ;           If Successful:
"RTN","HDISVF07",56,0)
 ;           HDISYIEN HDIS System file IEN
"RTN","HDISVF07",57,0)
 ;           If Failure:
"RTN","HDISVF07",58,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF07",59,0)
 N HDISFDA,HDISIEN,HDISMSG,HDISOKF
"RTN","HDISVF07",60,0)
 ;Initialize output
"RTN","HDISVF07",61,0)
 S (HDISYIEN,HDISERRM)=""
"RTN","HDISVF07",62,0)
 ;Set array for Institution, Domain/IP Address and Type
"RTN","HDISVF07",63,0)
 S HDISFDA(7118.21,"+1,",.01)=$G(HDISIPTR)
"RTN","HDISVF07",64,0)
 S HDISFDA(7118.21,"+1,",.02)=$G(HDISDIPA)
"RTN","HDISVF07",65,0)
 S HDISFDA(7118.21,"+1,",.03)=$G(HDISTYPE)
"RTN","HDISVF07",66,0)
 D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF07",67,0)
 ;Check for error
"RTN","HDISVF07",68,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF07",69,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF07",70,0)
 ELSE  D
"RTN","HDISVF07",71,0)
 . S HDISYIEN=+$G(HDISIEN(1))
"RTN","HDISVF07",72,0)
 . S HDISOKF=1
"RTN","HDISVF07",73,0)
 D CLEAN^DILF
"RTN","HDISVF07",74,0)
ADDSYSQ Q +$G(HDISOKF)
"RTN","HDISVF07",75,0)
 ;
"RTN","HDISVF07",76,0)
CURSYS(HDISYIEN) ;Current System's HDIS System file IEN
"RTN","HDISVF07",77,0)
 ; Input  -- None
"RTN","HDISVF07",78,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",79,0)
 ;           If Successful:
"RTN","HDISVF07",80,0)
 ;           HDISYIEN HDIS System file IEN
"RTN","HDISVF07",81,0)
 N HDISFACN,HDISIPTR,HDISTYPE
"RTN","HDISVF07",82,0)
 ;Initialize output
"RTN","HDISVF07",83,0)
 S HDISYIEN=""
"RTN","HDISVF07",84,0)
 ;Set Facility Number, Institution file (#4) IEN and Type
"RTN","HDISVF07",85,0)
 S HDISFACN=$$FACNUM^HDISVF01
"RTN","HDISVF07",86,0)
 S HDISIPTR=$$FACPTR^HDISVF01(HDISFACN)
"RTN","HDISVF07",87,0)
 S HDISTYPE=$$PROD^XUPROD
"RTN","HDISVF07",88,0)
 ;Check for entry by Type and Institution file (#4) IEN
"RTN","HDISVF07",89,0)
 S HDISYIEN=$O(^HDISF(7118.21,"ATYP",+HDISTYPE,+HDISIPTR,0))
"RTN","HDISVF07",90,0)
CURSYSQ Q +$S($G(HDISYIEN)>0:1,1:0)
"RTN","HDISVF07",91,0)
 ;
"RTN","HDISVF07",92,0)
GETFAC(HDISYIEN,HDISIPTR,HDISFACN) ;Get Institution file (#4) IEN and Facility Number by IEN
"RTN","HDISVF07",93,0)
 ; Input  -- HDISYIEN HDIS System file IEN  (Optional- Default current system)
"RTN","HDISVF07",94,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",95,0)
 ;           If Successful:
"RTN","HDISVF07",96,0)
 ;           HDISIPTR Institution file (#4) IEN
"RTN","HDISVF07",97,0)
 ;           HDISFACN Facility Number
"RTN","HDISVF07",98,0)
 ;Initialize output
"RTN","HDISVF07",99,0)
 S (HDISIPTR,HDISFACN)=""
"RTN","HDISVF07",100,0)
 ;Set HDIS System file IEN to current system, if needed
"RTN","HDISVF07",101,0)
 I '$D(HDISYIEN),$$CURSYS(.HDISYIEN)
"RTN","HDISVF07",102,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF07",103,0)
 I $G(HDISYIEN)'>0 G GETFACQ
"RTN","HDISVF07",104,0)
 ;Check for Institution file (#4) IEN and Facility Number by IEN
"RTN","HDISVF07",105,0)
 I $D(^HDISF(7118.21,HDISYIEN,0)) S HDISIPTR=$P($G(^(0)),"^",1) D
"RTN","HDISVF07",106,0)
 . S HDISFACN=$$FACNUM^HDISVF01(HDISIPTR)
"RTN","HDISVF07",107,0)
GETFACQ Q +$S($G(HDISIPTR)'=""&($G(HDISFACN)'=""):1,1:0)
"RTN","HDISVF07",108,0)
 ;
"RTN","HDISVF07",109,0)
GETDIP(HDISYIEN,HDISDIPA) ;Get Domain/IP Address by IEN
"RTN","HDISVF07",110,0)
 ; Input  -- HDISYIEN HDIS System file IEN  (Optional- Default current system)
"RTN","HDISVF07",111,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",112,0)
 ;           If Successful:
"RTN","HDISVF07",113,0)
 ;           HDISDIPA Domain/IP Address
"RTN","HDISVF07",114,0)
 ;Initialize output
"RTN","HDISVF07",115,0)
 S HDISDIPA=""
"RTN","HDISVF07",116,0)
 ;Set HDIS System file IEN to current system, if needed
"RTN","HDISVF07",117,0)
 I '$D(HDISYIEN),$$CURSYS(.HDISYIEN)
"RTN","HDISVF07",118,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF07",119,0)
 I $G(HDISYIEN)'>0 G GETDIPQ
"RTN","HDISVF07",120,0)
 ;Check for Domain/IP Address by IEN
"RTN","HDISVF07",121,0)
 I $D(^HDISF(7118.21,HDISYIEN,0)) S HDISDIPA=$P($G(^(0)),"^",2)
"RTN","HDISVF07",122,0)
GETDIPQ Q +$S($G(HDISDIPA)'="":1,1:0)
"RTN","HDISVF07",123,0)
 ;
"RTN","HDISVF07",124,0)
 ;
"RTN","HDISVF07",125,0)
GETTYPE(HDISYIEN,HDISTYPE,HDISTYPX) ;Get Type (Internal and External Value) by IEN
"RTN","HDISVF07",126,0)
 ; Input  -- HDISYIEN HDIS System file IEN  (Optional- Default current system)
"RTN","HDISVF07",127,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF07",128,0)
 ;           If Successful:
"RTN","HDISVF07",129,0)
 ;           HDISTYPE Type (Internal Value)
"RTN","HDISVF07",130,0)
 ;           HDISTYPX Type (External Value)
"RTN","HDISVF07",131,0)
 ;Initialize output
"RTN","HDISVF07",132,0)
 S (HDISTYPE,HDISTYPX)=""
"RTN","HDISVF07",133,0)
 ;Set HDIS System file IEN to current system, if needed
"RTN","HDISVF07",134,0)
 I '$D(HDISYIEN),$$CURSYS(.HDISYIEN)
"RTN","HDISVF07",135,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF07",136,0)
 I $G(HDISYIEN)'>0 G GETTYPEQ
"RTN","HDISVF07",137,0)
 ;Check for Domain/IP Address by IEN
"RTN","HDISVF07",138,0)
 I $D(^HDISF(7118.21,HDISYIEN,0)) S HDISTYPE=$P($G(^(0)),"^",3) D
"RTN","HDISVF07",139,0)
 . S HDISTYPX=$$GET1^DIQ(7118.21,HDISYIEN,.03)
"RTN","HDISVF07",140,0)
GETTYPEQ Q +$S($G(HDISTYPE)'=""&($G(HDISTYPX)'=""):1,1:0)
"RTN","HDISVF07",141,0)
 ;
"RTN","HDISVF07",142,0)
 ;---- End HDIS System file (#7118.21) API(s) ----
"RTN","HDISVF08")
0^15^B6873461
"RTN","HDISVF08",1,0)
HDISVF08 ;ALB/RMO - 7118.22 File Utilities/API Cont.; 1/18/05@1:57:00
"RTN","HDISVF08",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF08",3,0)
 ;
"RTN","HDISVF08",4,0)
 ;---- Begin HDIS Facility Term/Concept Association file (#7118.22) API(s) ----
"RTN","HDISVF08",5,0)
 ;
"RTN","HDISVF08",6,0)
FINDFAC(HDISYIEN,HDISFIEN,HDISTIEN,HDISIREF,HDISADDF,HDISAIEN,HDISERRM) ;Find or Add a New Facility Term/Concept Entry
"RTN","HDISVF08",7,0)
 ; Input  -- HDISYIEN HDIS System file (#7118.21) IEN
"RTN","HDISVF08",8,0)
 ;           HDISFIEN HDIS File/Field file (#7115.6) IEN
"RTN","HDISVF08",9,0)
 ;           HDISTIEN HDIS Term/Concept VUID Association file (#7118.11) IEN
"RTN","HDISVF08",10,0)
 ;           HDISIREF Internal Reference  (Optional)
"RTN","HDISVF08",11,0)
 ;           HDISADDF Add a New Entry Flag  (Optional- Default 0)
"RTN","HDISVF08",12,0)
 ;                    1=Yes and 0=No
"RTN","HDISVF08",13,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF08",14,0)
 ;           If Successful:
"RTN","HDISVF08",15,0)
 ;           HDISAIEN  HDIS Facility Term/Concept Association file IEN
"RTN","HDISVF08",16,0)
 ;           If Failure:
"RTN","HDISVF08",17,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF08",18,0)
 N HDISI,HDISOKF
"RTN","HDISVF08",19,0)
 ;Initialize ouput
"RTN","HDISVF08",20,0)
 S (HDISAIEN,HDISERRM)=""
"RTN","HDISVF08",21,0)
 ;Check for missing variables, exit if not defined
"RTN","HDISVF08",22,0)
 I $G(HDISYIEN)'>0!($G(HDISFIEN)'>0)!($G(HDISTIEN)'>0) D  G FINDFACQ
"RTN","HDISVF08",23,0)
 . S HDISERRM="Required Variable Missing."
"RTN","HDISVF08",24,0)
 ;Check for existing System, File/Field, Term/Concept and Internal Reference, return entry and exit if it exists
"RTN","HDISVF08",25,0)
 I $D(^HDISF(7118.22,"AS",HDISYIEN,HDISFIEN,HDISTIEN)) D  G ADDFACQ:$G(HDISAIEN)
"RTN","HDISVF08",26,0)
 . S HDISI=0
"RTN","HDISVF08",27,0)
 . F  S HDISI=$O(^HDISF(7118.22,"AS",HDISYIEN,HDISFIEN,HDISTIEN,HDISI))  Q:'HDISI!($G(HDISAIEN))  D
"RTN","HDISVF08",28,0)
 . . I $D(^HDISF(7118.22,HDISI,0)),$P(^(0),"^",3)=$G(HDISIREF) D
"RTN","HDISVF08",29,0)
 . . . S HDISAIEN=HDISI
"RTN","HDISVF08",30,0)
 . . . S HDISOKF=1
"RTN","HDISVF08",31,0)
 ;If flag set, Add a New Facility Term/Concept Entry
"RTN","HDISVF08",32,0)
 I $G(HDISADDF) S HDISOKF=$$ADDFAC(HDISYIEN,HDISFIEN,HDISTIEN,$G(HDISIREF),.HDISAIEN,.HDISERRM)
"RTN","HDISVF08",33,0)
FINDFACQ Q +$G(HDISOKF)
"RTN","HDISVF08",34,0)
 ;
"RTN","HDISVF08",35,0)
ADDFAC(HDISYIEN,HDISFIEN,HDISTIEN,HDISIREF,HDISAIEN,HDISERRM) ;Find or Add a New Facility Term/Concept Entry
"RTN","HDISVF08",36,0)
 ; Input  -- HDISYIEN HDIS System file (#7118.21) IEN
"RTN","HDISVF08",37,0)
 ;           HDISFIEN HDIS File/Field file (#7115.6) IEN
"RTN","HDISVF08",38,0)
 ;           HDISTIEN HDIS Term/Concept VUID Association file (#7118.11) IEN
"RTN","HDISVF08",39,0)
 ;           HDISIREF Internal Reference  (Optional)
"RTN","HDISVF08",40,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF08",41,0)
 ;           If Successful:
"RTN","HDISVF08",42,0)
 ;           HDISAIEN  HDIS Facility Term/Concept Association file IEN
"RTN","HDISVF08",43,0)
 ;           If Failure:
"RTN","HDISVF08",44,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF08",45,0)
 N HDISFDA,HDISIEN,HDISMSG,HDISOKF
"RTN","HDISVF08",46,0)
 ;Initialize ouput
"RTN","HDISVF08",47,0)
 S (HDISAIEN,HDISERRM)=""
"RTN","HDISVF08",48,0)
 ;Set array for System, File/Field, Internal Reference, Term/Concept and Date/Time Term/Concept Associated
"RTN","HDISVF08",49,0)
 S HDISFDA(7118.22,"+1,",.01)=$G(HDISYIEN)
"RTN","HDISVF08",50,0)
 S HDISFDA(7118.22,"+1,",.02)=$G(HDISFIEN)
"RTN","HDISVF08",51,0)
 I $D(HDISIREF) S HDISFDA(7118.22,"+1,",.03)=$G(HDISIREF)
"RTN","HDISVF08",52,0)
 S HDISFDA(7118.22,"+1,",.04)=$G(HDISTIEN)
"RTN","HDISVF08",53,0)
 S HDISFDA(7118.22,"+1,",.05)=$$NOW^XLFDT
"RTN","HDISVF08",54,0)
 D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF08",55,0)
 ;Check for error
"RTN","HDISVF08",56,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF08",57,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF08",58,0)
 ELSE  D
"RTN","HDISVF08",59,0)
 . S HDISAIEN=+$G(HDISIEN(1))
"RTN","HDISVF08",60,0)
 . S HDISOKF=1
"RTN","HDISVF08",61,0)
 D CLEAN^DILF
"RTN","HDISVF08",62,0)
ADDFACQ Q +$G(HDISOKF)
"RTN","HDISVF08",63,0)
 ;
"RTN","HDISVF08",64,0)
GETIENS(HDISYIEN,HDISFIEN,HDISTIEN,HDISIENS) ;Get IENS for Facility Term/Concept by System, File/Field and Term/Concept
"RTN","HDISVF08",65,0)
 ; Input  -- HDISYIEN HDIS System file (#7118.21) IEN
"RTN","HDISVF08",66,0)
 ;           HDISFIEN HDIS File/Field file (#7115.6) IEN
"RTN","HDISVF08",67,0)
 ;           HDISTIEN HDIS Term/Concept VUID Association file (#7118.11) IEN
"RTN","HDISVF08",68,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF08",69,0)
 ;           If Successful:
"RTN","HDISVF08",70,0)
 ;           HDISIENS Array where HDISIENS(IEN)=Internal Reference field (#.03)
"RTN","HDISVF08",71,0)
 N HDISI
"RTN","HDISVF08",72,0)
 ;Initialize ouput
"RTN","HDISVF08",73,0)
 K HDISIENS
"RTN","HDISVF08",74,0)
 ;Check for missing variables, exit if not defined
"RTN","HDISVF08",75,0)
 I $G(HDISYIEN)'>0!($G(HDISFIEN)'>0)!($G(HDISTIEN)'>0) G GETIENSQ
"RTN","HDISVF08",76,0)
 S HDISI=0
"RTN","HDISVF08",77,0)
 F  S HDISI=$O(^HDISF(7118.22,"AS",HDISYIEN,HDISFIEN,HDISTIEN,HDISI))  Q:'HDISI  D
"RTN","HDISVF08",78,0)
 . I $D(^HDISF(7118.22,HDISI,0)) S HDISIENS(HDISI)=$P(^(0),"^",3)
"RTN","HDISVF08",79,0)
GETIENSQ Q +$S($D(HDISIENS):1,1:0)
"RTN","HDISVF08",80,0)
 ;
"RTN","HDISVF08",81,0)
 ;---- End HDIS Facility Term/Concept Association file (#7118.22) ----
"RTN","HDISVF09")
0^16^B25236145
"RTN","HDISVF09",1,0)
HDISVF09 ;ALB/RMO - 7115.1 File Utilities/API Cont.; 1/13/05@10:03:00 ; 26 Apr 2005  1:11 PM
"RTN","HDISVF09",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF09",3,0)
 ;
"RTN","HDISVF09",4,0)
 ;---- Begin HDIS Domain file (#7115.1) API(s) ----
"RTN","HDISVF09",5,0)
 ;
"RTN","HDISVF09",6,0)
GETFILS(HDISDIEN,HDISCODE,HDISFILS) ;Get an Array of Files by Domain and Client Status Code
"RTN","HDISVF09",7,0)
 ; Input  -- HDISDIEN HDIS Domain file (#7115.1) IEN
"RTN","HDISVF09",8,0)
 ;           HDISCODE Client Status Code  (Optional- Default 0=Not Started for Client)
"RTN","HDISVF09",9,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",10,0)
 ;           If Successful:
"RTN","HDISVF09",11,0)
 ;           HDISFILS Array Subscripted by File # (i.e. HDISFILS(120.8)="")
"RTN","HDISVF09",12,0)
 N HDISFIEN,HDISFILN,HDISFLDN
"RTN","HDISVF09",13,0)
 ;Initialize ouput
"RTN","HDISVF09",14,0)
 K HDISFILS
"RTN","HDISVF09",15,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",16,0)
 I $G(HDISDIEN)'>0 G GETFILSQ
"RTN","HDISVF09",17,0)
 ;Set Status Code to default of 0=Not Started for Client, if needed
"RTN","HDISVF09",18,0)
 S HDISCODE=$S('$D(HDISCODE):0,1:HDISCODE)
"RTN","HDISVF09",19,0)
 ;Check Status of File/Fields and build array
"RTN","HDISVF09",20,0)
 S HDISFIEN=0
"RTN","HDISVF09",21,0)
 F  S HDISFIEN=$O(^HDIS(7115.1,HDISDIEN,"FILE","B",HDISFIEN)) Q:'HDISFIEN  D
"RTN","HDISVF09",22,0)
 . I $$GETFF^HDISVF05(HDISFIEN,.HDISFILN,.HDISFLDN),$P($$GETSTAT^HDISVF01(HDISFILN,HDISFLDN),"^",1)=HDISCODE D
"RTN","HDISVF09",23,0)
 . . S HDISFILS(HDISFILN)=""
"RTN","HDISVF09",24,0)
GETFILSQ Q +$S($D(HDISFILS):1,1:0)
"RTN","HDISVF09",25,0)
 ;
"RTN","HDISVF09",26,0)
GETIEN(HDISDOM,HDISDIEN) ;Get IEN for a Domain by Domain
"RTN","HDISVF09",27,0)
 ; Input  -- HDISDOM  Domain
"RTN","HDISVF09",28,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",29,0)
 ;           If Successful:
"RTN","HDISVF09",30,0)
 ;           HDISDIEN HDIS Domain file IEN
"RTN","HDISVF09",31,0)
 ;Initialize ouput
"RTN","HDISVF09",32,0)
 S HDISDIEN=""
"RTN","HDISVF09",33,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",34,0)
 I $G(HDISDOM)="" G GETIENQ
"RTN","HDISVF09",35,0)
 ;Check for entry by Domain
"RTN","HDISVF09",36,0)
 S HDISDIEN=$O(^HDIS(7115.1,"B",HDISDOM,0))
"RTN","HDISVF09",37,0)
GETIENQ Q +$S($G(HDISDIEN)>0:1,1:0)
"RTN","HDISVF09",38,0)
 ;
"RTN","HDISVF09",39,0)
 ;---- End HDIS Domain file (#7115.1) API(s) ----
"RTN","HDISVF09",40,0)
 ;
"RTN","HDISVF09",41,0)
 ;Error processing utility
"RTN","HDISVF09",42,0)
 ;
"RTN","HDISVF09",43,0)
ERR(HDISP1,HDISP2,HDISP3) ;
"RTN","HDISVF09",44,0)
 ;;Input: HDISP1 - Network Name (parameter 1 of bulletin)
"RTN","HDISVF09",45,0)
 ;;       HDISP2 - Date/Time (parameter 2 of bulletin)
"RTN","HDISVF09",46,0)
 ;;       HDISP3 - Error Message (parameter 3 of bulletin)
"RTN","HDISVF09",47,0)
 ;;Output: None
"RTN","HDISVF09",48,0)
 ;;
"RTN","HDISVF09",49,0)
 N HDISP,HDISTASK,NAME,ERRARR
"RTN","HDISVF09",50,0)
 S HDISE="" S ERRARR="HDISE",HDISE(1)=""
"RTN","HDISVF09",51,0)
 S HDISP(1)=HDISP1
"RTN","HDISVF09",52,0)
 S Y=HDISP2 D DD^%DT S HDISP(2)=Y
"RTN","HDISVF09",53,0)
 S HDISP(3)=HDISP3
"RTN","HDISVF09",54,0)
 S NAME="HDIS ERRORS"
"RTN","HDISVF09",55,0)
 S HDISFLAG("FROM")="HDIS DS Client"
"RTN","HDISVF09",56,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",57,0)
 Q
"RTN","HDISVF09",58,0)
 ;
"RTN","HDISVF09",59,0)
ERTBULL(HDISP1,HDISP2,HDISP3,HDISP4,HDISP5,HDISP6) ;
"RTN","HDISVF09",60,0)
 N ERRARR,HDISP,NAME,HDISFLAG,HDISTASK
"RTN","HDISVF09",61,0)
 S ERRARR=$NA(^TMP("HDIS ERRORS",$J)),^TMP("HDIS ERRORS",$J,1)=""
"RTN","HDISVF09",62,0)
 S HDISP(1)=HDISP1
"RTN","HDISVF09",63,0)
 S HDISP(2)=HDISP2
"RTN","HDISVF09",64,0)
 N Y S Y=HDISP3 D DD^%DT
"RTN","HDISVF09",65,0)
 S HDISP(3)=Y
"RTN","HDISVF09",66,0)
 S HDISP(4)=HDISP4
"RTN","HDISVF09",67,0)
 S HDISP(5)=HDISP5
"RTN","HDISVF09",68,0)
 S HDISP(6)=HDISP6
"RTN","HDISVF09",69,0)
 S NAME="HDIS NOTIFY ERT"
"RTN","HDISVF09",70,0)
 S HDISFLAG("FROM")="HDIS Data Standardization Server"
"RTN","HDISVF09",71,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",72,0)
 Q
"RTN","HDISVF09",73,0)
 ;
"RTN","HDISVF09",74,0)
MFSUP(HDISFILE,HDISERR,HDISFN) ; Update status to complete and send HDR Bulletin
"RTN","HDISVF09",75,0)
 ;;Input: HDISFILE - File Number of file just updated  (Required)
"RTN","HDISVF09",76,0)
 ;;       HDISERR - Error indicator from MFS (1 or 0) (Required)
"RTN","HDISVF09",77,0)
 ;;       HDISFN - Field number (Optional)
"RTN","HDISVF09",78,0)
 ;;       
"RTN","HDISVF09",79,0)
 ;;Output: None
"RTN","HDISVF09",80,0)
 N HDISCODE,HDISARRY,HDISOUT,HDISNM,HDISMESS,FILE,HDISTASK,NAME,OOPS,SYSTYPE,TMP
"RTN","HDISVF09",81,0)
 S HDISCODE=$$GETSTAT^HDISVF01(HDISFILE)
"RTN","HDISVF09",82,0)
 S FILE=HDISFILE
"RTN","HDISVF09",83,0)
 Q:$P(HDISCODE,"^",1)'=4&($P(HDISCODE,"^",1)'=5)
"RTN","HDISVF09",84,0)
 S HDISARRY=$NA(^TMP("HDIS STATUS",$J))
"RTN","HDISVF09",85,0)
 I $G(HDISERR) S HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),"Error from MFS") S HDISOUT=$$BLDSND^HDISVCUT(HDISFILE,.01,5,$$NOW^XLFDT(),HDISARRY,"") D SETSTAT^HDISVF01(HDISFILE,.01,5,$$NOW^XLFDT()) Q
"RTN","HDISVF09",86,0)
 S HDISOUT=$$BLDSND^HDISVCUT(HDISFILE,.01,6,$$NOW^XLFDT(),HDISARRY,"")
"RTN","HDISVF09",87,0)
 I HDISOUT=0 S HDISMESS="Staus update to complete failed",HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),HDISMESS) Q
"RTN","HDISVF09",88,0)
 D SETSTAT^HDISVF01(HDISFILE,.01,6,$$NOW^XLFDT())
"RTN","HDISVF09",89,0)
 I HDISOUT=0 S HDISMESS="Staus update to complete failed",HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),HDISMESS) Q
"RTN","HDISVF09",90,0)
 ;Notify HDR that triggers should be turned on
"RTN","HDISVF09",91,0)
 N FACPTR,FACNAME,FACNUM,DOMAIN,SYSTYP,FILENAME,HDISBDT
"RTN","HDISVF09",92,0)
 S OOPS=0
"RTN","HDISVF09",93,0)
 I '$$GETFAC^HDISVF07(,.FACPTR) S OOPS=1
"RTN","HDISVF09",94,0)
 I '$$GETDIP^HDISVF07(,.DOMAIN) S OOPS=1
"RTN","HDISVF09",95,0)
 I '$$GETTYPE^HDISVF07(,,.SYSTYPE) S OOPS=1
"RTN","HDISVF09",96,0)
 I OOPS=1 D
"RTN","HDISVF09",97,0)
 .S FACPTR=$$FACPTR^HDISVF01()
"RTN","HDISVF09",98,0)
 .S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDISVF09",99,0)
 .S SYSTYPE=$$PROD^XUPROD()
"RTN","HDISVF09",100,0)
 .S SYSTYPE=$S(SYSTYPE:"PRODUCTION",1:"TEST")
"RTN","HDISVF09",101,0)
 S TMP=$$NS^XUAF4(FACPTR)
"RTN","HDISVF09",102,0)
 S FACNAME=$P(TMP,"^",1)
"RTN","HDISVF09",103,0)
 S FACNUM=$P(TMP,"^",2)
"RTN","HDISVF09",104,0)
 I (FACNAME="")!(FACNUM="") D
"RTN","HDISVF09",105,0)
 .S TMP=$$SITE^VASITE()
"RTN","HDISVF09",106,0)
 .S FACNAME=$P(TMP,"^",2)
"RTN","HDISVF09",107,0)
 .S FACNUM=$P(TMP,"^",3)
"RTN","HDISVF09",108,0)
 S FACNAME=FACNAME_" (#"_FACNUM_") with Domain/IP Address "_DOMAIN
"RTN","HDISVF09",109,0)
 S FILENAME=$$GET1^DID(FILE,,,"NAME")
"RTN","HDISVF09",110,0)
 S FILENAME=FILENAME_" (#"_FILE_")"
"RTN","HDISVF09",111,0)
 S HDISBDT=$$NOW^XLFDT()
"RTN","HDISVF09",112,0)
 S ERRARR=$NA(^TMP("HDIS ERRORS",$J)),^TMP("HDIS ERRORS",$J,1)=""
"RTN","HDISVF09",113,0)
 N HDISP
"RTN","HDISVF09",114,0)
 S HDISP(1)=FACNAME
"RTN","HDISVF09",115,0)
 S HDISP(2)=FILENAME
"RTN","HDISVF09",116,0)
 N Y S Y=$$NOW^XLFDT() D DD^%DT
"RTN","HDISVF09",117,0)
 S HDISP(3)=Y
"RTN","HDISVF09",118,0)
 S HDISP(4)=SYSTYPE
"RTN","HDISVF09",119,0)
 S HDISP(5)=FACNUM
"RTN","HDISVF09",120,0)
 S HDISP(6)=FILE
"RTN","HDISVF09",121,0)
 S NAME="HDIS NOTIFY HDR"
"RTN","HDISVF09",122,0)
 S HDISFLAG("FROM")="HDIS Data Standardization Server"
"RTN","HDISVF09",123,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",124,0)
 Q
"RTN","HDISVF10")
0^27^B5695858
"RTN","HDISVF10",1,0)
HDISVF10 ;BPFO/JRP -  FILE UTILITIES/API;2/3/2005
"RTN","HDISVF10",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVF10",3,0)
 ;
"RTN","HDISVF10",4,0)
 ;---------- Begin HDIS PARAMETER file (#7118.29) APIs ----------
"RTN","HDISVF10",5,0)
 ;
"RTN","HDISVF10",6,0)
PARAMINI(SYSPTR,FACNUM,DOMAIN,SYSTYPE,USESYS) ;Initialize parameters for system
"RTN","HDISVF10",7,0)
 ; Input : SYSPTR - Pointer to HDIS System file (optional)
"RTN","HDISVF10",8,0)
 ;         FACNUM - Facility number (defaults to local number)
"RTN","HDISVF10",9,0)
 ;         DOMAIN - Domain/IP address (defaults to local system)
"RTN","HDISVF10",10,0)
 ;         SYSTYPE - Flag indicating type of system
"RTN","HDISVF10",11,0)
 ;                   1 = Production    0 = Test
"RTN","HDISVF10",12,0)
 ;                   Defaults to current system type
"RTN","HDISVF10",13,0)
 ;         USESYS - Flag indicating if information from HDIS System
"RTN","HDISVF10",14,0)
 ;                  file should be used instead of default values
"RTN","HDISVF10",15,0)
 ;                  0 = No (default)     1 = Yes
"RTN","HDISVF10",16,0)
 ;Output : Pointer to HDIS Parameter file
"RTN","HDISVF10",17,0)
 ; Notes : 0 is returned if an entry can not be initialized
"RTN","HDISVF10",18,0)
 N FAC,HDISFDA,HDISMSG,IENS,PRMDOM,OK
"RTN","HDISVF10",19,0)
 S SYSPTR=$G(SYSPTR)
"RTN","HDISVF10",20,0)
 S FAC=$$GETPTR(.SYSPTR,$G(FACNUM),$G(DOMAIN),$G(SYSTYPE),1)
"RTN","HDISVF10",21,0)
 I 'FAC Q 0
"RTN","HDISVF10",22,0)
 S PRMDOM="FORUM.VA.GOV"
"RTN","HDISVF10",23,0)
 ;Get info from system
"RTN","HDISVF10",24,0)
 S OK=1
"RTN","HDISVF10",25,0)
 I $G(USESYS) D
"RTN","HDISVF10",26,0)
 .K PRMDOM
"RTN","HDISVF10",27,0)
 .S OK=$$GETDIP^HDISVF07(SYSPTR,.PRMDOM)
"RTN","HDISVF10",28,0)
 ;Problem pulling from system
"RTN","HDISVF10",29,0)
 I 'OK Q 0
"RTN","HDISVF10",30,0)
 S IENS=FAC_","
"RTN","HDISVF10",31,0)
 K HDISFDA,HDISMSG
"RTN","HDISVF10",32,0)
 S HDISFDA(7118.29,IENS,.02)="CLIENT"
"RTN","HDISVF10",33,0)
 S HDISFDA(7118.29,IENS,11)="NO"
"RTN","HDISVF10",34,0)
 S HDISFDA(7118.29,IENS,12)=PRMDOM
"RTN","HDISVF10",35,0)
 S HDISFDA(7118.29,IENS,13)="MAILMAN"
"RTN","HDISVF10",36,0)
 S HDISFDA(7118.29,IENS,21)="HDIS-FACILITY-DATA-SERVER"
"RTN","HDISVF10",37,0)
 S HDISFDA(7118.29,IENS,31)="NO"
"RTN","HDISVF10",38,0)
 S HDISFDA(7118.29,IENS,32)=PRMDOM
"RTN","HDISVF10",39,0)
 S HDISFDA(7118.29,IENS,33)="MAILMAN"
"RTN","HDISVF10",40,0)
 S HDISFDA(7118.29,IENS,41)="HDIS-STATUS-UPDATE-SERVER"
"RTN","HDISVF10",41,0)
 D FILE^DIE("E","HDISFDA","HDISMSG")
"RTN","HDISVF10",42,0)
 Q FAC
"RTN","HDISVF10",43,0)
 ;
"RTN","HDISVF10",44,0)
GETPTR(SYSPTR,FACNUM,DOMAIN,SYSTYPE,LAYGO) ;Get pointer to HDIS Parameter file
"RTN","HDISVF10",45,0)
 ; Input : SYSPTR - Pointer to HDIS System file (optional)
"RTN","HDISVF10",46,0)
 ;         FACNUM - Facility number (defaults to local number)
"RTN","HDISVF10",47,0)
 ;         DOMAIN - Domain/IP address (defaults to local system)
"RTN","HDISVF10",48,0)
 ;         SYSTYPE - Flag indicating type of system
"RTN","HDISVF10",49,0)
 ;                   1 = Production    0 = Test
"RTN","HDISVF10",50,0)
 ;                   Defaults to current system type
"RTN","HDISVF10",51,0)
 ;         LAYGO - Flag indicating if an entry for the system should
"RTN","HDISVF10",52,0)
 ;                 be created if one is not found
"RTN","HDISVF10",53,0)
 ;                 0 = No (don't create) (default)     1 = Yes
"RTN","HDISVF10",54,0)
 ;Output : Pointer to HDIS PARAMETER file
"RTN","HDISVF10",55,0)
 ; Notes : 0 is returned if an entry is not found
"RTN","HDISVF10",56,0)
 ;       : If SYSPTR is not passed, then FACNUM, DOMAIN, and TESTSYS
"RTN","HDISVF10",57,0)
 ;         will be used to find the HDIS System file entry
"RTN","HDISVF10",58,0)
 N X,PTR,HDISMSG,HDISIEN,HDISFDA
"RTN","HDISVF10",59,0)
 S SYSPTR=+$G(SYSPTR)
"RTN","HDISVF10",60,0)
 S LAYGO=+$G(LAYGO)
"RTN","HDISVF10",61,0)
 ;Find entry in HDIS System file
"RTN","HDISVF10",62,0)
 I 'SYSPTR D
"RTN","HDISVF10",63,0)
 .K SYSPTR
"RTN","HDISVF10",64,0)
 .S FACNUM=$G(FACNUM)
"RTN","HDISVF10",65,0)
 .I 'FACNUM S FACNUM=$$FACNUM^HDISVF01()
"RTN","HDISVF10",66,0)
 .S DOMAIN=$G(DOMAIN)
"RTN","HDISVF10",67,0)
 .I DOMAIN="" S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDISVF10",68,0)
 .S SYSTYPE=$G(SYSTYPE)
"RTN","HDISVF10",69,0)
 .I SYSTYPE="" S SYSTYPE=$$PROD^XUPROD()
"RTN","HDISVF10",70,0)
 .S X=$$FINDSYS^HDISVF07(DOMAIN,FACNUM,SYSTYPE,LAYGO,.SYSPTR)
"RTN","HDISVF10",71,0)
 I '$G(SYSPTR) Q 0
"RTN","HDISVF10",72,0)
 ;Find entry in HDIS Parameter file
"RTN","HDISVF10",73,0)
 S PTR=$$FIND1^DIC(7118.29,,"QX",SYSPTR,"B",,"HDISMSG")
"RTN","HDISVF10",74,0)
 I PTR Q PTR
"RTN","HDISVF10",75,0)
 I 'LAYGO Q 0
"RTN","HDISVF10",76,0)
 ;Create entry
"RTN","HDISVF10",77,0)
 S HDISFDA(7118.29,"+1,",.01)=SYSPTR
"RTN","HDISVF10",78,0)
 S HDISIEN(1)=SYSPTR
"RTN","HDISVF10",79,0)
 D UPDATE^DIE("","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF10",80,0)
 I $D(HDISMSG) Q 0
"RTN","HDISVF10",81,0)
 S PTR=HDISIEN(1)
"RTN","HDISVF10",82,0)
 Q PTR
"RTN","HDISVF10",83,0)
 ;
"RTN","HDISVF10",84,0)
 ;---------- End HDIS PARAMETER file APIs ----------
"RTN","HDISVM00")
0^17^B3587426
"RTN","HDISVM00",1,0)
HDISVM00 ;BPFO/JRP - SERVER TO RECEIVE XML MESSAGE;1/4/2005
"RTN","HDISVM00",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVM00",3,0)
 ;
"RTN","HDISVM00",4,0)
XML ;Main entry point for XML server options
"RTN","HDISVM00",5,0)
 ; Input: (As defined by MailMan and Kernel)
"RTN","HDISVM00",6,0)
 ;        XMREC - Executable code to "read" next line of message
"RTN","HDISVM00",7,0)
 ;        XQSUB - Subject of received message
"RTN","HDISVM00",8,0)
 ;        XQSOP - Server option name
"RTN","HDISVM00",9,0)
 ;        XQMSG,XMZ - Msg IEN in file 3.9
"RTN","HDISVM00",10,0)
 ;        XQSND,XMFROM - Msg sender
"RTN","HDISVM00",11,0)
 ;Output: None
"RTN","HDISVM00",12,0)
 ;  Note: Input is not checked (assumes existence)
"RTN","HDISVM00",13,0)
 ;
"RTN","HDISVM00",14,0)
 N XMLARR,PRSARR,ERRARR,STOP,LINE,TYPE
"RTN","HDISVM00",15,0)
 ;Establish temporary globals
"RTN","HDISVM00",16,0)
 S XMLARR=$NA(^TMP(XQSOP,$J,"XML"))
"RTN","HDISVM00",17,0)
 S PRSARR=$NA(^TMP(XQSOP,$J,"PARSED"))
"RTN","HDISVM00",18,0)
 S ERRARR=$NA(^TMP(XQSOP,$J,"ERROR"))
"RTN","HDISVM00",19,0)
 K @XMLARR,@PRSARR,@ERRARR
"RTN","HDISVM00",20,0)
 ;Copy message to temporary global
"RTN","HDISVM00",21,0)
 S STOP=0
"RTN","HDISVM00",22,0)
 F LINE=1:1 D  Q:STOP
"RTN","HDISVM00",23,0)
 .X XMREC
"RTN","HDISVM00",24,0)
 .I $D(XMER) I (XMER<0) S STOP=1 Q
"RTN","HDISVM00",25,0)
 .S @XMLARR@(LINE)=XMRG
"RTN","HDISVM00",26,0)
 ;Parse message
"RTN","HDISVM00",27,0)
 D SAX^HDISVM01(XMLARR,PRSARR)
"RTN","HDISVM00",28,0)
 ;Get type of system out of parameter file
"RTN","HDISVM00",29,0)
 S TYPE=+$$GETTYPE^HDISVF02()
"RTN","HDISVM00",30,0)
 ;Process messages on centralized server
"RTN","HDISVM00",31,0)
 I TYPE=2 D MAIN^HDISVS00(PRSARR,ERRARR)
"RTN","HDISVM00",32,0)
 ;Process messages on VistA (client) system
"RTN","HDISVM00",33,0)
 I TYPE=1 D MAIN^HDISVC00(PRSARR,ERRARR)
"RTN","HDISVM00",34,0)
 ;Error(s) occurred
"RTN","HDISVM00",35,0)
 I $D(@ERRARR) D
"RTN","HDISVM00",36,0)
 .;Send error message
"RTN","HDISVM00",37,0)
 .D ERROR(ERRARR,XQMSG,XQSOP,XMFROM)
"RTN","HDISVM00",38,0)
 .;Set message status
"RTN","HDISVM00",39,0)
 .S X=$$SRVTIME^XMS1(XQMSG,"S."_XQSOP,"ERROR FOUND DURING PROCESSING")
"RTN","HDISVM00",40,0)
 ;Delete message (don't delete if errors found)
"RTN","HDISVM00",41,0)
 I '$D(@ERRARR) D ZAPSERV^XMXAPI("S."_XQSOP,XQMSG)
"RTN","HDISVM00",42,0)
 ;Done
"RTN","HDISVM00",43,0)
 K @XMLARR,@PRSARR,@ERRARR
"RTN","HDISVM00",44,0)
 Q
"RTN","HDISVM00",45,0)
 ;
"RTN","HDISVM00",46,0)
ERROR(ERRARR,MSGNUM,SRVR,SNDR) ;Send error message
"RTN","HDISVM00",47,0)
 ; Input : ERRARR - Error array (closed root)
"RTN","HDISVM00",48,0)
 ;         MSGNUM - Message number of received message (XMZ)
"RTN","HDISVM00",49,0)
 ;         SRVR - Name of server option (XQSOP)
"RTN","HDISVM00",50,0)
 ;         SNDR - Sender of message (XMFROM)
"RTN","HDISVM00",51,0)
 ;Output : None
"RTN","HDISVM00",52,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVM00",53,0)
 N NAME,HDISPRAM,HDISFLAG,HDISTASK
"RTN","HDISVM00",54,0)
 ;Set bulletin parameters
"RTN","HDISVM00",55,0)
 S HDISPRAM(1)=MSGNUM
"RTN","HDISVM00",56,0)
 S HDISPRAM(2)=SNDR
"RTN","HDISVM00",57,0)
 S HDISPRAM(3)=SRVR
"RTN","HDISVM00",58,0)
 ;Send bulletin
"RTN","HDISVM00",59,0)
 S NAME="HDIS XML MSG PROCESS ERROR"
"RTN","HDISVM00",60,0)
 S HDISFLAG("FROM")="HDIS XML MESSAGE SERVER"
"RTN","HDISVM00",61,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISPRAM,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVM00",62,0)
 Q
"RTN","HDISVM01")
0^18^B14612946
"RTN","HDISVM01",1,0)
HDISVM01 ;BPFO/JRP - PARSE XML DOCUMENT USING SAX;12/20/2004
"RTN","HDISVM01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVM01",3,0)
 ;
"RTN","HDISVM01",4,0)
SAX(XMLARR,PRSARR) ;Parse XML document using SAX interface
"RTN","HDISVM01",5,0)
 ; Input: XMLARR - Global array containing XML document (closed root)
"RTN","HDISVM01",6,0)
 ;        PRSARR - Array to output parsed XML document (closed root)
"RTN","HDISVM01",7,0)
 ;Output: None
"RTN","HDISVM01",8,0)
 ;        @PRSARR@("ESUBS",ESN) = Element name
"RTN","HDISVM01",9,0)
 ;        @PRSARR@("EINDX",ElementName) = Subscript number (ESN)
"RTN","HDISVM01",10,0)
 ;        @PRSARR@("ASUBS",ESN,ASN) = Attribute name
"RTN","HDISVM01",11,0)
 ;        @PRSARR@("AINDX",ESN,AttributeName) = Subscript number (ASN)
"RTN","HDISVM01",12,0)
 ;        @PRSARR@("DATA",ESN,Repetition,"V") = Value of element
"RTN","HDISVM01",13,0)
 ;        @PRSARR@("DATA",ESN,Repetition,"A",ASN) = Value of attribute
"RTN","HDISVM01",14,0)
 ;        @PRSARR@("DATA",ESN1,Rep1,ESN2,Rep2,"V") = Value of child
"RTN","HDISVM01",15,0)
 ;                                                   element
"RTN","HDISVM01",16,0)
 ;        @PRSARR@("DATA",ESN1,Rep1,ESN2,Rep2,"A",ASN) = Value of child
"RTN","HDISVM01",17,0)
 ;                                                       attribute
"RTN","HDISVM01",18,0)
 ; Notes : XMLARR must be a global array (i.e. no local arrays)
"RTN","HDISVM01",19,0)
 ;       : PRSARR is initialized (i.e KILLed) on input
"RTN","HDISVM01",20,0)
 Q:$G(XMLARR)=""
"RTN","HDISVM01",21,0)
 Q:'$D(@XMLARR)
"RTN","HDISVM01",22,0)
 Q:$G(PRSARR)=""
"RTN","HDISVM01",23,0)
 N HDICBK,SUBNUM,TAGNAME
"RTN","HDISVM01",24,0)
 N ESUBS,EINDX,ASUBS,AINDX,DATA
"RTN","HDISVM01",25,0)
 S ESUBS=$NA(@PRSARR@("ESUBS"))
"RTN","HDISVM01",26,0)
 S EINDX=$NA(@PRSARR@("EINDX"))
"RTN","HDISVM01",27,0)
 S ASUBS=$NA(@PRSARR@("ASUBS"))
"RTN","HDISVM01",28,0)
 S AINDX=$NA(@PRSARR@("AINDX"))
"RTN","HDISVM01",29,0)
 S DATA=$NA(@PRSARR@("DATA"))
"RTN","HDISVM01",30,0)
 ;Set callbacks
"RTN","HDISVM01",31,0)
 S HDICBK("STARTDOCUMENT")="STRTDOC^HDISVM01"
"RTN","HDISVM01",32,0)
 S HDICBK("ENDDOCUMENT")="ENDDOC^HDISVM01"
"RTN","HDISVM01",33,0)
 S HDICBK("DOCTYPE")="DOCTYPE^HDISVM01"
"RTN","HDISVM01",34,0)
 S HDICBK("STARTELEMENT")="STRTLMNT^HDISVM01"
"RTN","HDISVM01",35,0)
 S HDICBK("ENDELEMENT")="ENDLMNT^HDISVM01"
"RTN","HDISVM01",36,0)
 S HDICBK("CHARACTERS")="CHARS^HDISVM01"
"RTN","HDISVM01",37,0)
 S HDICBK("PI")="PI^HDISVM01"
"RTN","HDISVM01",38,0)
 S HDICBK("EXTERNAL")="EXTERN^HDISVM01"
"RTN","HDISVM01",39,0)
 S HDICBK("NOTATION")="NOTATION^HDISVM01"
"RTN","HDISVM01",40,0)
 S HDICBK("COMMENT")="COMMENT^HDISVM01"
"RTN","HDISVM01",41,0)
 S HDICBK("ERROR")="ERROR^HDISVM01"
"RTN","HDISVM01",42,0)
 ;Parse XML document using SAX
"RTN","HDISVM01",43,0)
 K @PRSARR
"RTN","HDISVM01",44,0)
 D EN^MXMLPRSE(XMLARR,.HDICBK,"")
"RTN","HDISVM01",45,0)
 Q
"RTN","HDISVM01",46,0)
 ;
"RTN","HDISVM01",47,0)
STRTDOC ;Start document
"RTN","HDISVM01",48,0)
 Q
"RTN","HDISVM01",49,0)
 ;
"RTN","HDISVM01",50,0)
ENDDOC ;End document
"RTN","HDISVM01",51,0)
 Q
"RTN","HDISVM01",52,0)
 ;
"RTN","HDISVM01",53,0)
DOCTYPE(ROOT,PUBID,SYSID) ;DOCTYPE declaration
"RTN","HDISVM01",54,0)
 Q
"RTN","HDISVM01",55,0)
 ;
"RTN","HDISVM01",56,0)
STRTLMNT(NAME,ATTRLIST) ;Start element
"RTN","HDISVM01",57,0)
 N ESN,REP,ATTR,ASN,TMPREF
"RTN","HDISVM01",58,0)
 ;Determine element subscript number
"RTN","HDISVM01",59,0)
 S ESN=+$G(@EINDX@(NAME))
"RTN","HDISVM01",60,0)
 I 'ESN D
"RTN","HDISVM01",61,0)
 .S ESN=1+$O(@ESUBS@(""),-1)
"RTN","HDISVM01",62,0)
 .S @ESUBS@(ESN)=NAME
"RTN","HDISVM01",63,0)
 .S @EINDX@(NAME)=ESN
"RTN","HDISVM01",64,0)
 ;Determine repetition number
"RTN","HDISVM01",65,0)
 S REP=1+$O(@DATA@(ESN,""),-1)
"RTN","HDISVM01",66,0)
 ;Add element subscript number and repetition number to output array
"RTN","HDISVM01",67,0)
 S TMPREF=$$OREF^DILF(DATA)
"RTN","HDISVM01",68,0)
 S TMPREF=TMPREF_ESN_","_REP_","
"RTN","HDISVM01",69,0)
 S DATA=$$CREF^DILF(TMPREF)
"RTN","HDISVM01",70,0)
 ;Store attributes
"RTN","HDISVM01",71,0)
 S ATTR=""
"RTN","HDISVM01",72,0)
 F  S ATTR=$O(ATTRLIST(ATTR)) Q:ATTR=""  D
"RTN","HDISVM01",73,0)
 .;Get attribute subscript number
"RTN","HDISVM01",74,0)
 .S ASN=+$G(@AINDX@(ESN,ATTR))
"RTN","HDISVM01",75,0)
 .I 'ASN D
"RTN","HDISVM01",76,0)
 ..S ASN=1+$O(@ASUBS@(""),-1)
"RTN","HDISVM01",77,0)
 ..S @ASUBS@(ESN,ASN)=ATTR
"RTN","HDISVM01",78,0)
 ..S @AINDX@(ESN,ATTR)=ASN
"RTN","HDISVM01",79,0)
 .;Store value
"RTN","HDISVM01",80,0)
 .S @DATA@("A",ASN)=ATTRLIST(ATTR)
"RTN","HDISVM01",81,0)
 Q
"RTN","HDISVM01",82,0)
 ;
"RTN","HDISVM01",83,0)
ENDLMNT(NAME) ;End element
"RTN","HDISVM01",84,0)
 N TMPREF,SUBCNT,SUBCHK
"RTN","HDISVM01",85,0)
 ;Remove element subscript number and repition number from output array
"RTN","HDISVM01",86,0)
 S TMPREF=$$OREF^DILF(DATA)
"RTN","HDISVM01",87,0)
 S SUBCNT=$L(TMPREF,",")
"RTN","HDISVM01",88,0)
 S SUBCHK=SUBCNT-3
"RTN","HDISVM01",89,0)
 I SUBCHK>0 S TMPREF=$P(TMPREF,",",1,SUBCHK)_","
"RTN","HDISVM01",90,0)
 I SUBCHK<1 S TMPREF=$P(TMPREF,"(",1)_"("
"RTN","HDISVM01",91,0)
 S DATA=$$CREF^DILF(TMPREF)
"RTN","HDISVM01",92,0)
 Q
"RTN","HDISVM01",93,0)
 ;
"RTN","HDISVM01",94,0)
CHARS(TEXT) ;Non-markup content
"RTN","HDISVM01",95,0)
 ;Store element value
"RTN","HDISVM01",96,0)
 S @DATA@("V")=TEXT
"RTN","HDISVM01",97,0)
 Q
"RTN","HDISVM01",98,0)
 ;
"RTN","HDISVM01",99,0)
PI(TARGET,TEXT) ;Processing instruction
"RTN","HDISVM01",100,0)
 Q
"RTN","HDISVM01",101,0)
 ;
"RTN","HDISVM01",102,0)
EXTERN(SYSID,PUBID,GLOBAL) ;External entity reference
"RTN","HDISVM01",103,0)
 Q
"RTN","HDISVM01",104,0)
 ;
"RTN","HDISVM01",105,0)
NOTATION(NAME,SYSID,PUBID) ;Notation declaration
"RTN","HDISVM01",106,0)
 Q
"RTN","HDISVM01",107,0)
 ;
"RTN","HDISVM01",108,0)
COMMENT(TEXT) ;Comment
"RTN","HDISVM01",109,0)
 Q
"RTN","HDISVM01",110,0)
 ;
"RTN","HDISVM01",111,0)
ERROR(ERR) ;Error
"RTN","HDISVM01",112,0)
 Q
"RTN","HDISVM01",113,0)
 ;
"RTN","HDISVM01",114,0)
UNESC(TEXT) ;Convert escaped characters
"RTN","HDISVM01",115,0)
 ;Assumes TEXT is not corrupt
"RTN","HDISVM01",116,0)
 N ESCBEG,ESCEND,ESCTXT,ESCCHAR,OUTPUT
"RTN","HDISVM01",117,0)
 S TEXT=$G(TEXT)
"RTN","HDISVM01",118,0)
 I TEXT="" Q TEXT
"RTN","HDISVM01",119,0)
 I TEXT'["&" Q TEXT
"RTN","HDISVM01",120,0)
 ;Do conversion
"RTN","HDISVM01",121,0)
 S OUTPUT=""
"RTN","HDISVM01",122,0)
 F  Q:TEXT'["&"  D
"RTN","HDISVM01",123,0)
 .;Find escaped character
"RTN","HDISVM01",124,0)
 .S ESCBEG=$F(TEXT,"&")
"RTN","HDISVM01",125,0)
 .S ESCEND=$F(TEXT,";",ESCBEG)
"RTN","HDISVM01",126,0)
 .S ESCTXT=$E(TEXT,ESCBEG,ESCEND-2)
"RTN","HDISVM01",127,0)
 .;Convert escaped character
"RTN","HDISVM01",128,0)
 .S ESCCHAR=""
"RTN","HDISVM01",129,0)
 .I ESCTXT="amp" S ESCCHAR="&"
"RTN","HDISVM01",130,0)
 .I ESCTXT="lt" S ESCCHAR="<"
"RTN","HDISVM01",131,0)
 .I ESCTXT="gt" S ESCCHAR=">"
"RTN","HDISVM01",132,0)
 .I ESCTXT="apos" S ESCCHAR="'"
"RTN","HDISVM01",133,0)
 .I ESCTXT="quot" S ESCCHAR=$C(34)
"RTN","HDISVM01",134,0)
 .;Replace escaped character with actual character
"RTN","HDISVM01",135,0)
 .S OUTPUT=OUTPUT_$E(TEXT,1,ESCBEG-2)_ESCCHAR
"RTN","HDISVM01",136,0)
 .;Continue processing rest of string
"RTN","HDISVM01",137,0)
 .S TEXT=$E(TEXT,ESCEND,$L(TEXT))
"RTN","HDISVM01",138,0)
 ;Add on remainder of text
"RTN","HDISVM01",139,0)
 S OUTPUT=OUTPUT_TEXT
"RTN","HDISVM01",140,0)
 Q OUTPUT
"RTN","HDISVM02")
0^19^B6106835
"RTN","HDISVM02",1,0)
HDISVM02 ;;CT/GRR SEND MESSAGE ; 02 Mar 2005  4:25 PM
"RTN","HDISVM02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVM02",3,0)
 ;
"RTN","HDISVM02",4,0)
SNDXML(ARRY,SRVR,HDISINP,SYSPTR) ;Send XML document to server
"RTN","HDISVM02",5,0)
 ; Input: ARRY - Array containing XML document (closed root)
"RTN","HDISVM02",6,0)
 ;        SRVR - 1 = VUID Server, 2 = Status Update Server
"RTN","HDISVM02",7,0)
 ;        HDISINP - Array containing additional info (closed root) (optional)
"RTN","HDISVM02",8,0)
 ;                  @HDISINP@(variable) = Value
"RTN","HDISVM02",9,0)
 ;                  @HDISINP@(array,subscript) = Value
"RTN","HDISVM02",10,0)
 ;                  @HDISINP@(array,subscript_1,subscript_2,...) = Value
"RTN","HDISVM02",11,0)
 ;                  
"RTN","HDISVM02",12,0)
 ;                  Example:
"RTN","HDISVM02",13,0)
 ;                    @HDISINP@("TEST1")=1
"RTN","HDISVM02",14,0)
 ;                    @HDISINP@("TEST2")=2
"RTN","HDISVM02",15,0)
 ;                    @HDISINP@("TEST2","SUB1")="2A"
"RTN","HDISVM02",16,0)
 ;                    @HDISINP@("TEST3","SUB1","SUB2")="3B"
"RTN","HDISVM02",17,0)
 ;                  
"RTN","HDISVM02",18,0)
 ;                  Results in the following variables/arrays being set:
"RTN","HDISVM02",19,0)
 ;                    TEST1=1
"RTN","HDISVM02",20,0)
 ;                    TEST2=2
"RTN","HDISVM02",21,0)
 ;                    TEST2("SUB1")="2A"
"RTN","HDISVM02",22,0)
 ;                    TEST3("SUB1","SUB2")="3B"
"RTN","HDISVM02",23,0)
 ;        SYSPTR - Pointer to HDIS System file (optional)
"RTN","HDISVM02",24,0)
 ;                 If passed, the destination information is obtained
"RTN","HDISVM02",25,0)
 ;                 from the HDIS Parameter file entry for the referenced
"RTN","HDISVM02",26,0)
 ;                 system.  By default, the destination information is
"RTN","HDISVM02",27,0)
 ;                 pulled from the HDIS Parameter entry for the current
"RTN","HDISVM02",28,0)
 ;                 system (which contains the destination information for
"RTN","HDISVM02",29,0)
 ;                 the centrally located server)
"RTN","HDISVM02",30,0)
 ;Output: None
"RTN","HDISVM02",31,0)
 ;        XML document sent to Data Standardization server option
"RTN","HDISVM02",32,0)
 ;        at given MailMan domain
"RTN","HDISVM02",33,0)
 ;
"RTN","HDISVM02",34,0)
 I ARRY=""!(SRVR="") Q "0^Required parameter missing"
"RTN","HDISVM02",35,0)
 I SRVR'=1&(SRVR'=2) Q "0^SRVR Parameter invalid"
"RTN","HDISVM02",36,0)
 N SUBJECT,HDITO,HDINSTR,HDIXMZ,SERVER,SRVTYP,MAXLIN,SRVROPT
"RTN","HDISVM02",37,0)
 S SYSPTR=+$G(SYSPTR)
"RTN","HDISVM02",38,0)
 I 'SYSPTR K SYSPTR I '$$CURSYS^HDISVF07(.SYSPTR) Q "0^Unable to determine current system"
"RTN","HDISVM02",39,0)
 ;Get location information for VUID Server
"RTN","HDISVM02",40,0)
 I SRVR=1 D
"RTN","HDISVM02",41,0)
 .S SERVER=$$GETVLOC^HDISVF02(SYSPTR)
"RTN","HDISVM02",42,0)
 .S SRVTYP=$$GETVCON^HDISVF02(SYSPTR)
"RTN","HDISVM02",43,0)
 .S SRVROPT=$$GETVSRV^HDISVF02(SYSPTR)
"RTN","HDISVM02",44,0)
 ;Get location information for Status Server
"RTN","HDISVM02",45,0)
 I SRVR=2 D
"RTN","HDISVM02",46,0)
 .S SERVER=$$GETSLOC^HDISVF03(SYSPTR)
"RTN","HDISVM02",47,0)
 .S SRVTYP=$$GETSCON^HDISVF03(SYSPTR)
"RTN","HDISVM02",48,0)
 .S SRVROPT=$$GETSSRV^HDISVF03(SYSPTR)
"RTN","HDISVM02",49,0)
 ;Instantiate variables included in input array
"RTN","HDISVM02",50,0)
 I $G(HDISINP)]"" D
"RTN","HDISVM02",51,0)
 .N ROOT,RSCNT,NODE,NSCNT,TROOT
"RTN","HDISVM02",52,0)
 .S ROOT=$$OREF^DILF(HDISINP)
"RTN","HDISVM02",53,0)
 .S RSCNT=$QL(HDISINP)
"RTN","HDISVM02",54,0)
 .S NODE=HDISINP
"RTN","HDISVM02",55,0)
 .F  S NODE=$Q(@NODE) Q:(NODE="")!(NODE'[ROOT)  I $D(@NODE)#2 D
"RTN","HDISVM02",56,0)
 ..S NSCNT=$QL(NODE)
"RTN","HDISVM02",57,0)
 ..I (NSCNT-RSCNT)=1 S @$QS(NODE,NSCNT)=$G(@NODE) Q
"RTN","HDISVM02",58,0)
 ..S TROOT=$QS(NODE,RSCNT+1)_"("_$P(NODE,",",RSCNT+2,NSCNT)
"RTN","HDISVM02",59,0)
 ..S @TROOT=$G(@NODE)
"RTN","HDISVM02",60,0)
 ;Set message subject
"RTN","HDISVM02",61,0)
 I $G(SUBJECT)="" S SUBJECT="XML FORMATTED DATA FROM "_$P($$SITE^VASITE(),"^",2)
"RTN","HDISVM02",62,0)
 ;Set message sender
"RTN","HDISVM02",63,0)
 S HDINSTR("FROM")="Data Standardization Toolset"
"RTN","HDISVM02",64,0)
 ;Set recipient list (includes server option on target server)
"RTN","HDISVM02",65,0)
 N HDITO
"RTN","HDISVM02",66,0)
 I SERVER="" S HDITO("S."_SRVROPT)=""
"RTN","HDISVM02",67,0)
 I SERVER'="" S HDITO("S."_SRVROPT_"@"_SERVER)=""
"RTN","HDISVM02",68,0)
 ;Send message to target server
"RTN","HDISVM02",69,0)
 D SENDMSG^XMXAPI(DUZ,SUBJECT,ARRY,.HDITO,.HDINSTR,.HDIXMZ)
"RTN","HDISVM02",70,0)
 Q 1
"RTN","HDISVM02",71,0)
 ;
"RTN","HDISVS00")
0^20^B5629288
"RTN","HDISVS00",1,0)
HDISVS00 ;BPFO/JRP - PROCESS XML DOCS ON CENTRAL SERVER;1/4/2005
"RTN","HDISVS00",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVS00",3,0)
 ;
"RTN","HDISVS00",4,0)
MAIN(PRSARR,ERRARR) ;Main entry point for processing XML document
"RTN","HDISVS00",5,0)
 ; Input : PRSARR - Array containing parsed XML document (closed root)
"RTN","HDISVS00",6,0)
 ;                  This is the output of SAX^HDISVM01
"RTN","HDISVS00",7,0)
 ;         ERRARR - Array to output errors in (closed root)
"RTN","HDISVS00",8,0)
 ;Output : None
"RTN","HDISVS00",9,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVS00",10,0)
 ; Notes : ERRARR is initialized (KILLed) on input
"RTN","HDISVS00",11,0)
 N ROOT,TMP,OOPS,CODE,DESC
"RTN","HDISVS00",12,0)
 ;Check input
"RTN","HDISVS00",13,0)
 I $G(PRSARR)="" D  Q
"RTN","HDISVS00",14,0)
 .S TMP="MAIN^HDISVS00: Input parameter PRSARR was not passed"
"RTN","HDISVS00",15,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",16,0)
 I '$D(@PRSARR) D  Q
"RTN","HDISVS00",17,0)
 .S TMP="MAIN^HDISVS00: Input array "_PRSARR_" (PRSARR) does not exist"
"RTN","HDISVS00",18,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",19,0)
 ;Make sure data structure of parsed document exists
"RTN","HDISVS00",20,0)
 S OOPS=0
"RTN","HDISVS00",21,0)
 F X=1:1 S TMP=$P($T(SUBS+X),";;",2) Q:TMP=""  D
"RTN","HDISVS00",22,0)
 .I $D(@PRSARR@(TMP)) Q
"RTN","HDISVS00",23,0)
 .S TMP="MAIN^HDISVS00: Subscript "_TMP_" missing from input array "_PRSARR_" (PRSARR)"
"RTN","HDISVS00",24,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",25,0)
 .S OOPS=1
"RTN","HDISVS00",26,0)
 I OOPS Q
"RTN","HDISVS00",27,0)
 ;Get root element name
"RTN","HDISVS00",28,0)
 S ROOT=$G(@PRSARR@("ESUBS",1))
"RTN","HDISVS00",29,0)
 I ROOT="" D  Q
"RTN","HDISVS00",30,0)
 .S TMP="Root element of XML document could not be determined"
"RTN","HDISVS00",31,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",32,0)
 ;Check for supported root element
"RTN","HDISVS00",33,0)
 S OOPS=1
"RTN","HDISVS00",34,0)
 F X=1:1 S TMP=$P($T(ROOTS+X),";;",2) Q:TMP=""  D  Q:'OOPS
"RTN","HDISVS00",35,0)
 .I $P(TMP,"~",1)'=ROOT Q
"RTN","HDISVS00",36,0)
 .S CODE=$P(TMP,"~",2)
"RTN","HDISVS00",37,0)
 .S DESC=$P(TMP,"~",3)
"RTN","HDISVS00",38,0)
 .S OOPS=0
"RTN","HDISVS00",39,0)
 ;Unsupported root element
"RTN","HDISVS00",40,0)
 I OOPS D  Q
"RTN","HDISVS00",41,0)
 .S TMP="'"_ROOT_"' is not a supported root element (don't know how to process it)"
"RTN","HDISVS00",42,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",43,0)
 ;Code to process document not set
"RTN","HDISVS00",44,0)
 I CODE="" D  Q
"RTN","HDISVS00",45,0)
 .S TMP="Code to process root element '"_ROOT_"' has not been established"
"RTN","HDISVS00",46,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS00",47,0)
 ;Process XML document
"RTN","HDISVS00",48,0)
 X CODE
"RTN","HDISVS00",49,0)
 ;Done
"RTN","HDISVS00",50,0)
 Q
"RTN","HDISVS00",51,0)
 ;
"RTN","HDISVS00",52,0)
SUBS ;Required subscripts in parse array (attributes aren't required)
"RTN","HDISVS00",53,0)
 ;;EINDX
"RTN","HDISVS00",54,0)
 ;;ESUBS
"RTN","HDISVS00",55,0)
 ;;DATA
"RTN","HDISVS00",56,0)
 ;;
"RTN","HDISVS00",57,0)
 ;
"RTN","HDISVS00",58,0)
ROOTS ;Root element name~Processing code for root element~Description
"RTN","HDISVS00",59,0)
 ;;Domain~D VUID^HDISVS01(PRSARR,ERRARR)~Request for VUID data from VistA system
"RTN","HDISVS00",60,0)
 ;;HDISParameters~D STATUS^HDISVS03(PRSARR,ERRARR)~Status update from VistA system
"RTN","HDISVS00",61,0)
 ;;
"RTN","HDISVS01")
0^21^B49593050
"RTN","HDISVS01",1,0)
HDISVS01 ;BPFO/JRP - PROCESS RECEIVED XML DATA;12/20/2004
"RTN","HDISVS01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVS01",3,0)
 ;
"RTN","HDISVS01",4,0)
VUID(PRSARR,ERRARR) ;Process XML data from VistA system
"RTN","HDISVS01",5,0)
 ; Input : PRSARR - Array containing parsed XML document (closed root)
"RTN","HDISVS01",6,0)
 ;                  This is the output of SAX^HDISVM01
"RTN","HDISVS01",7,0)
 ;         ERRARR - Array to output errors in (closed root)
"RTN","HDISVS01",8,0)
 ;Output : None
"RTN","HDISVS01",9,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVS01",10,0)
 ; Notes : ERRARR is initialized (KILLed) on input
"RTN","HDISVS01",11,0)
 ;
"RTN","HDISVS01",12,0)
 ;Processing of all VUID requests disabled - throw error and quit
"RTN","HDISVS01",13,0)
 I $$GETVFAIL^HDISVF02() D  Q
"RTN","HDISVS01",14,0)
 .N TMP
"RTN","HDISVS01",15,0)
 .S TMP="VUID^HDISVS01: Processing of VUID requests by central server"
"RTN","HDISVS01",16,0)
 .S TMP=TMP_" is currently disabled"
"RTN","HDISVS01",17,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",18,0)
 N EINDX,ESUBS,AINDX,ASUBS,DATA,TMP,FFPTR,DOMPTR,XMLDOC
"RTN","HDISVS01",19,0)
 N DOMAIN,SOURCE,MAILMAN,INDX,OOPS,SYSPTR,SRCTYPE,FILE,FIELD
"RTN","HDISVS01",20,0)
 S EINDX=$NA(@PRSARR@("EINDX"))
"RTN","HDISVS01",21,0)
 S ESUBS=$NA(@PRSARR@("ESUBS"))
"RTN","HDISVS01",22,0)
 S AINDX=$NA(@PRSARR@("AINDX"))
"RTN","HDISVS01",23,0)
 S ASUBS=$NA(@PRSARR@("ASUBS"))
"RTN","HDISVS01",24,0)
 S DATA=$NA(@PRSARR@("DATA"))
"RTN","HDISVS01",25,0)
 S FFARR=$NA(^TMP("HDISVS01",$J,"FFARR"))
"RTN","HDISVS01",26,0)
 S XMLDOC=$NA(^TMP("HDISVS01",$J,"XMLDOC"))
"RTN","HDISVS01",27,0)
 K @FFARR,@XMLDOC
"RTN","HDISVS01",28,0)
 S OOPS=0
"RTN","HDISVS01",29,0)
 S ERRARR=$G(ERRARR)
"RTN","HDISVS01",30,0)
 I ERRARR'="" K @ERRARR
"RTN","HDISVS01",31,0)
 S PRSARR=$G(PRSARR)
"RTN","HDISVS01",32,0)
 I PRSARR="" D  Q
"RTN","HDISVS01",33,0)
 .S TMP="VUID^HDISVS01: Input parameter PRSARR was not passed"
"RTN","HDISVS01",34,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",35,0)
 .S OOPS=1
"RTN","HDISVS01",36,0)
 I '$D(@PRSARR) D  Q
"RTN","HDISVS01",37,0)
 .S TMP="VUID^HDISVS01: Input array "_PRSARR_" (PRSARR) does not exist"
"RTN","HDISVS01",38,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",39,0)
 .S OOPS=1
"RTN","HDISVS01",40,0)
 ;Ensure all elements are indexed
"RTN","HDISVS01",41,0)
 F X=1:1 S TMP=$P($T(ELEMENTS+X),";;",2) Q:TMP=""  D
"RTN","HDISVS01",42,0)
 .I '$D(@EINDX@(TMP)) D
"RTN","HDISVS01",43,0)
 ..S TMP="XML element '"_TMP_"' was not found in the XML document"
"RTN","HDISVS01",44,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",45,0)
 ..S OOPS=1
"RTN","HDISVS01",46,0)
 ;Ensure that 'Domain' is the root element
"RTN","HDISVS01",47,0)
 I $G(@ESUBS@(1))'="Domain" D
"RTN","HDISVS01",48,0)
 .S TMP="'Domain' was not the root element in the XML document"
"RTN","HDISVS01",49,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",50,0)
 .S OOPS=1
"RTN","HDISVS01",51,0)
 ;Errors found - quit
"RTN","HDISVS01",52,0)
 I OOPS Q
"RTN","HDISVS01",53,0)
 ;Process 'Domain' portion of XML doc
"RTN","HDISVS01",54,0)
 S INDX=@EINDX@("Domain")
"RTN","HDISVS01",55,0)
 ;Get elements
"RTN","HDISVS01",56,0)
 S DOMAIN=$G(@DATA@(INDX,1,@EINDX@("DomainName"),1,"V"))
"RTN","HDISVS01",57,0)
 S SOURCE=$G(@DATA@(INDX,1,@EINDX@("Source"),1,"V"))
"RTN","HDISVS01",58,0)
 S SRCTYPE=$G(@DATA@(INDX,1,@EINDX@("SourceType"),1,"V"))
"RTN","HDISVS01",59,0)
 S MAILMAN=$G(@DATA@(INDX,1,@EINDX@("MailManDomain"),1,"V"))
"RTN","HDISVS01",60,0)
 ;Validate elements
"RTN","HDISVS01",61,0)
 F TMP="DOMAIN","SOURCE","MAILMAN","SRCTYPE" I $G(@TMP)="" D
"RTN","HDISVS01",62,0)
 .S Y="DomainName"
"RTN","HDISVS01",63,0)
 .I TMP="SOURCE" S Y="Source"
"RTN","HDISVS01",64,0)
 .I TMP="SRCTYPE" S Y="SourceType"
"RTN","HDISVS01",65,0)
 .I TMP="MAILMAN" S Y="MailManDomain"
"RTN","HDISVS01",66,0)
 .S X="XML element '"_TMP_"' did not have a value"
"RTN","HDISVS01",67,0)
 .D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVS01",68,0)
 .S OOPS=1
"RTN","HDISVS01",69,0)
 ;Validate facility number
"RTN","HDISVS01",70,0)
 I SOURCE'="" I '$$FACPTR^HDISVF01(SOURCE) D
"RTN","HDISVS01",71,0)
 .S TMP="Value of XML element 'Source' ("_SOURCE
"RTN","HDISVS01",72,0)
 .S TMP=TMP_") is not a valid facility number"
"RTN","HDISVS01",73,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",74,0)
 .S OOPS=1
"RTN","HDISVS01",75,0)
 ;Errors found - quit
"RTN","HDISVS01",76,0)
 I OOPS Q
"RTN","HDISVS01",77,0)
 ;Get pointers
"RTN","HDISVS01",78,0)
 I '$$GETIEN^HDISVF09(DOMAIN,.DOMPTR) D
"RTN","HDISVS01",79,0)
 .S TMP="Entry for XML element 'DomainName' ("_DOMAIN_") could not be "
"RTN","HDISVS01",80,0)
 .S TMP=TMP_"found in HDIS DOMAIN file (#7115.1)"
"RTN","HDISVS01",81,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",82,0)
 .S OOPS=1
"RTN","HDISVS01",83,0)
 I '$$FINDSYS^HDISVF07(MAILMAN,SOURCE,SRCTYPE,1,.SYSPTR) D
"RTN","HDISVS01",84,0)
 .S TMP="Entry for XML elements 'Source' ("_SOURCE_"), MailManDomain "
"RTN","HDISVS01",85,0)
 .S TMP=TMP_"("_MAILMAN_"), and 'SourceType' ("_SRCTYPE_") could not "
"RTN","HDISVS01",86,0)
 .S TMP="be found/created in HDIS SYSTEM file (#7718.21)"
"RTN","HDISVS01",87,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",88,0)
 .S OOPS=1
"RTN","HDISVS01",89,0)
 ;Make sure entry in HDIS Parameter file exists for system
"RTN","HDISVS01",90,0)
 I 'OOPS I '$$GETPTR^HDISVF10(SYSPTR) I '$$PARAMINI^HDISVF10(SYSPTR,"","","",1) D
"RTN","HDISVS01",91,0)
 .S TMP="Entry for XML elements 'Source' ("_SOURCE_"), 'MailManDomain' "
"RTN","HDISVS01",92,0)
 .S TMP=TMP_"("_MAILMAN_"), and 'SourceType' ("_SRCTYPE_") could not "
"RTN","HDISVS01",93,0)
 .S TMP="be found/created in HDIS PARAMETER file (#7718.29)"
"RTN","HDISVS01",94,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",95,0)
 .S OOPS=1
"RTN","HDISVS01",96,0)
 ;Processing of VUID requests from specific system disabled
"RTN","HDISVS01",97,0)
 I 'OOPS I $$GETVFAIL^HDISVF02(SYSPTR) D
"RTN","HDISVS01",98,0)
 .S TMP="Processing of VUID requests from 'Source' ("_SOURCE_"), "
"RTN","HDISVS01",99,0)
 .S TMP=TMP_"'MailManDomain' ("_MAILMAN_"), and 'SourceType' ("
"RTN","HDISVS01",100,0)
 .S TMP=TMP_SRCTYPE_") currently disabled"
"RTN","HDISVS01",101,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",102,0)
 .S OOPS=1
"RTN","HDISVS01",103,0)
 ;Errors found - quit
"RTN","HDISVS01",104,0)
 I OOPS Q
"RTN","HDISVS01",105,0)
 ;Process 'File' portion
"RTN","HDISVS01",106,0)
 D FILE($NA(@DATA@(INDX,1)),EINDX,AINDX,SYSPTR,FFARR,ERRARR)
"RTN","HDISVS01",107,0)
 ;Error - don't continue
"RTN","HDISVS01",108,0)
 I +$O(@ERRARR@(0)) K @FFARR Q
"RTN","HDISVS01",109,0)
 ;Build/send return XML document(s)
"RTN","HDISVS01",110,0)
 S FFPTR=""
"RTN","HDISVS01",111,0)
 F  S FFPTR=+$O(@FFARR@(FFPTR)) Q:'FFPTR  D
"RTN","HDISVS01",112,0)
 .S TMP=$$GETFF^HDISVF05(FFPTR,.FILE,.FIELD)
"RTN","HDISVS01",113,0)
 .K @XMLDOC
"RTN","HDISVS01",114,0)
 .;Status update (building msg)
"RTN","HDISVS01",115,0)
 .D ADDSTAT^HDISVF01(FFPTR,SYSPTR,102,2)
"RTN","HDISVS01",116,0)
 .;Build XML document
"RTN","HDISVS01",117,0)
 .I $$FILE^HDISVSFX(DOMPTR,SYSPTR,FFPTR,XMLDOC)<1 D  Q
"RTN","HDISVS01",118,0)
 ..;Error
"RTN","HDISVS01",119,0)
 ..S TMP="Unable to build XML document containing VUID information for"
"RTN","HDISVS01",120,0)
 ..S TMP=TMP_" file "_FILE_" (field "_FIELD_") in the "_DOMAIN
"RTN","HDISVS01",121,0)
 ..S TMP=TMP_" domain to facility "_SOURCE_" ("_MAILMAN_")"
"RTN","HDISVS01",122,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",123,0)
 ..;Status update (error)
"RTN","HDISVS01",124,0)
 ..D ADDSTAT^HDISVF01(FFPTR,SYSPTR,104,2)
"RTN","HDISVS01",125,0)
 .;Send XML document
"RTN","HDISVS01",126,0)
 .I $$SNDXML^HDISVM02(XMLDOC,1,,SYSPTR)<1 D  Q
"RTN","HDISVS01",127,0)
 ..;Error
"RTN","HDISVS01",128,0)
 ..S TMP="Unable to send XML document containing VUID information for"
"RTN","HDISVS01",129,0)
 ..S TMP=TMP_" file "_FILE_" (field "_FIELD_") in the "_DOMAIN
"RTN","HDISVS01",130,0)
 ..S TMP=TMP_" domain to facility "_SOURCE_" ("_MAILMAN_")"
"RTN","HDISVS01",131,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",132,0)
 ..;Status update (error)
"RTN","HDISVS01",133,0)
 ..D ADDSTAT^HDISVF01(FFPTR,SYSPTR,104,2)
"RTN","HDISVS01",134,0)
 .;Status update (msg sent)
"RTN","HDISVS01",135,0)
 .D ADDSTAT^HDISVF01(FFPTR,SYSPTR,103,2)
"RTN","HDISVS01",136,0)
 K @FFARR,@XMLDOC
"RTN","HDISVS01",137,0)
 Q
"RTN","HDISVS01",138,0)
 ;
"RTN","HDISVS01",139,0)
FILE(DATA,EINDX,AINDX,SYSPTR,FFARR,ERRARR) ;Process 'File' portion of XML document
"RTN","HDISVS01",140,0)
 ; Input : DATA - Array reference from which the 'File' element
"RTN","HDISVS01",141,0)
 ;                begins (closed root)
"RTN","HDISVS01",142,0)
 ;         EINDX - Element index array (closed root)
"RTN","HDISVS01",143,0)
 ;         AINDX - Attribute index array (closed root)
"RTN","HDISVS01",144,0)
 ;         SYSPTR - Pointer to HDIS SYSTEM file (#7118.21)
"RTN","HDISVS01",145,0)
 ;         FFARR - Array to output File/Field values (closed root)
"RTN","HDISVS01",146,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVS01",147,0)
 ;Output : None
"RTN","HDISVS01",148,0)
 ;         @FFARR@(Ptr) = ""
"RTN","HDISVS01",149,0)
 ;            Ptr - Pointer to HDIS FILE/FIELD file (#7115.6)
"RTN","HDISVS01",150,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVS01",151,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVS01",152,0)
 N INDX,REP,FILE,FIELD,OOPS,FFPTR,LASTERR
"RTN","HDISVS01",153,0)
 S INDX=@EINDX@("File")
"RTN","HDISVS01",154,0)
 S REP=0
"RTN","HDISVS01",155,0)
 F  S REP=+$O(@DATA@(INDX,REP)) Q:'REP  D
"RTN","HDISVS01",156,0)
 .S OOPS=0
"RTN","HDISVS01",157,0)
 .;Get elements
"RTN","HDISVS01",158,0)
 .S FILE=$G(@DATA@(INDX,REP,@EINDX@("FileNumber"),1,"V"))
"RTN","HDISVS01",159,0)
 .S FIELD=$G(@DATA@(INDX,REP,@EINDX@("FieldNumber"),1,"V"))
"RTN","HDISVS01",160,0)
 .;Validate elements
"RTN","HDISVS01",161,0)
 .F TMP="FILE","FIELD" I $G(@TMP)="" D
"RTN","HDISVS01",162,0)
 ..S Y="FileNumber"
"RTN","HDISVS01",163,0)
 ..I TMP="FIELD" S Y="FieldNumber"
"RTN","HDISVS01",164,0)
 ..S X="XML element '"_TMP_"' did not have a value"
"RTN","HDISVS01",165,0)
 ..D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVS01",166,0)
 ..S OOPS=1
"RTN","HDISVS01",167,0)
 .;Convert file & field to pointer
"RTN","HDISVS01",168,0)
 .I FILE I FIELD I '$$GETIEN^HDISVF05(FILE,FIELD,.FFPTR) D
"RTN","HDISVS01",169,0)
 ..S TMP="Values of XML elements 'FileNumber' ("_FILE
"RTN","HDISVS01",170,0)
 ..S TMP=TMP_") and 'FieldNumber ("_FIELD_") not found in HDIS"
"RTN","HDISVS01",171,0)
 ..S TMP=TMP_" FILE/FIELD file (#7115.6)"
"RTN","HDISVS01",172,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS01",173,0)
 ..S OOPS=1
"RTN","HDISVS01",174,0)
 .;Problem(s) found - don't continue
"RTN","HDISVS01",175,0)
 .I OOPS Q
"RTN","HDISVS01",176,0)
 .;Add File/Field to output array
"RTN","HDISVS01",177,0)
 .S @FFARR@(FFPTR)=""
"RTN","HDISVS01",178,0)
 .;Status update (start VUID assign)
"RTN","HDISVS01",179,0)
 .D ADDSTAT^HDISVF01(FFPTR,SYSPTR,101,2)
"RTN","HDISVS01",180,0)
 .;Remember last error number
"RTN","HDISVS01",181,0)
 .S LASTERR=+$O(@ERRARR@(""),-1)
"RTN","HDISVS01",182,0)
 .;Process 'Term' portion
"RTN","HDISVS01",183,0)
 .D TERM^HDISVS02($NA(@DATA@(INDX,REP)),EINDX,AINDX,SYSPTR,FFPTR,ERRARR)
"RTN","HDISVS01",184,0)
 .;Error(s) added - status update (error)
"RTN","HDISVS01",185,0)
 .I LASTERR'=+$O(@ERRARR@(""),-1) D ADDSTAT^HDISVF01(FFPTR,SYSPTR,104,2)
"RTN","HDISVS01",186,0)
 Q
"RTN","HDISVS01",187,0)
 ;
"RTN","HDISVS01",188,0)
ELEMENTS ;List of required elements in XML document
"RTN","HDISVS01",189,0)
 ;;Domain
"RTN","HDISVS01",190,0)
 ;;DomainName
"RTN","HDISVS01",191,0)
 ;;Source
"RTN","HDISVS01",192,0)
 ;;SourceType
"RTN","HDISVS01",193,0)
 ;;MailManDomain
"RTN","HDISVS01",194,0)
 ;;File
"RTN","HDISVS01",195,0)
 ;;FileNumber
"RTN","HDISVS01",196,0)
 ;;FieldNumber
"RTN","HDISVS01",197,0)
 ;;Term
"RTN","HDISVS01",198,0)
 ;;TermName
"RTN","HDISVS01",199,0)
 ;;VUID
"RTN","HDISVS01",200,0)
 ;;FacilityInternalReference
"RTN","HDISVS01",201,0)
 ;;
"RTN","HDISVS02")
0^22^B14125593
"RTN","HDISVS02",1,0)
HDISVS02 ;BPFO/JRP - PROCESS RECEIVED XML DATA;12/20/2004
"RTN","HDISVS02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVS02",3,0)
 ;
"RTN","HDISVS02",4,0)
TERM(DATA,EINDX,AINDX,SYSPTR,FFPTR,ERRARR) ;Process 'Term' portion of XML document
"RTN","HDISVS02",5,0)
 ; Input : DATA - Array reference from which the 'File' element
"RTN","HDISVS02",6,0)
 ;                begins (closed root)
"RTN","HDISVS02",7,0)
 ;         EINDX - Element index array (closed root)
"RTN","HDISVS02",8,0)
 ;         AINDX - Attribute index array (closed root)
"RTN","HDISVS02",9,0)
 ;         SYSPTR - Pointer to HDIS SYSTEM file (#7118.21)
"RTN","HDISVS02",10,0)
 ;         FFPTR - Pointer to HDIS FILE/FIELD file (#7115.6)
"RTN","HDISVS02",11,0)
 ;                 Derived from 'FileNumber' & 'FieldNumber' element
"RTN","HDISVS02",12,0)
 ;         ERRARR - Error array (closed root)
"RTN","HDISVS02",13,0)
 ;Output : None
"RTN","HDISVS02",14,0)
 ;         @ERRARR@(x) = Error text (if applicable)
"RTN","HDISVS02",15,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVS02",16,0)
 N INDX,REP,TERM,IREF,VUID,TMP,OOPS,TERMPTR,FILEARR,X
"RTN","HDISVS02",17,0)
 S INDX=@EINDX@("Term")
"RTN","HDISVS02",18,0)
 S REP=0
"RTN","HDISVS02",19,0)
 F  S REP=+$O(@DATA@(INDX,REP)) Q:'REP  D
"RTN","HDISVS02",20,0)
 .S OOPS=0
"RTN","HDISVS02",21,0)
 .S TERMPTR=0
"RTN","HDISVS02",22,0)
 .;Get elements
"RTN","HDISVS02",23,0)
 .S TERM=$G(@DATA@(INDX,REP,@EINDX@("TermName"),1,"V"))
"RTN","HDISVS02",24,0)
 .S IREF=$G(@DATA@(INDX,REP,@EINDX@("FacilityInternalReference"),1,"V"))
"RTN","HDISVS02",25,0)
 .S VUID=$G(@DATA@(INDX,REP,@EINDX@("VUID"),1,"V"))
"RTN","HDISVS02",26,0)
 .;Validate elements
"RTN","HDISVS02",27,0)
 .;VUID allowed to be null (in most cases they are)
"RTN","HDISVS02",28,0)
 .F TMP="TERM","IREF" I $G(@TMP)="" D
"RTN","HDISVS02",29,0)
 ..S Y="TermName"
"RTN","HDISVS02",30,0)
 ..I TMP="IREF" S Y="FacilityInternalReference"
"RTN","HDISVS02",31,0)
 ..S X="XML element '"_Y_"' for repetition number "_REP_" of 'Term' "
"RTN","HDISVS02",32,0)
 ..I TMP="TERM" S X="Repetition number "_REP_" of XML element 'Term' "
"RTN","HDISVS02",33,0)
 ..I TMP'="TERM" S X=X_"("_TERM_") "
"RTN","HDISVS02",34,0)
 ..S X=X_"did not have a value"
"RTN","HDISVS02",35,0)
 ..D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVS02",36,0)
 ..S OOPS=1
"RTN","HDISVS02",37,0)
 .;Problem found - quit
"RTN","HDISVS02",38,0)
 .I OOPS Q
"RTN","HDISVS02",39,0)
 .;VUID passed - ignore
"RTN","HDISVS02",40,0)
 .I VUID'="" Q
"RTN","HDISVS02",41,0)
 .;Convert term to upper case
"RTN","HDISVS02",42,0)
 .S TERM=$$UP^XLFSTR(TERM)
"RTN","HDISVS02",43,0)
 .;Known term/concept
"RTN","HDISVS02",44,0)
 .K FILEARR
"RTN","HDISVS02",45,0)
 .S FILEARR(FFPTR)=""
"RTN","HDISVS02",46,0)
 .K TERMPTR
"RTN","HDISVS02",47,0)
 .I $$GETTERM^HDISVF04(TERM,.FILEARR,.TERMPTR) D
"RTN","HDISVS02",48,0)
 ..;Get VUID
"RTN","HDISVS02",49,0)
 ..S VUID=""
"RTN","HDISVS02",50,0)
 ..S X=$$GETVUID^HDISVF04(TERMPTR,.VUID)
"RTN","HDISVS02",51,0)
 ..;Make sure VUID has a value
"RTN","HDISVS02",52,0)
 ..I VUID="" D
"RTN","HDISVS02",53,0)
 ...S X="Entry number "_TERMPTR_" in HDIS TERM/CONCEPT VUID "
"RTN","HDISVS02",54,0)
 ...S X=X_"ASSOCIATION file (#7118.11) does not have a VUID."
"RTN","HDISVS02",55,0)
 ...S X=X_"  Repetition "_REP_" of 'Term' ("_TERM_")."
"RTN","HDISVS02",56,0)
 ...D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVS02",57,0)
 ...S OOPS=1
"RTN","HDISVS02",58,0)
 .;Problem found - quit
"RTN","HDISVS02",59,0)
 .I OOPS Q
"RTN","HDISVS02",60,0)
 .;Assign non-standard VUID
"RTN","HDISVS02",61,0)
 .I VUID="" D
"RTN","HDISVS02",62,0)
 ..;Calculate non-standard VUID
"RTN","HDISVS02",63,0)
 ..S VUID=$$CALCNSV^HDISVF03()
"RTN","HDISVS02",64,0)
 ..I VUID="" D  Q
"RTN","HDISVS02",65,0)
 ...S TMP="Unable to calculate non-standard VUID for repetition number "
"RTN","HDISVS02",66,0)
 ...S TMP=TMP_REP_" of 'Term' ("_TERM_")"
"RTN","HDISVS02",67,0)
 ...D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS02",68,0)
 ...S OOPS=1
"RTN","HDISVS02",69,0)
 ..;Create entry in Term/Concept file
"RTN","HDISVS02",70,0)
 ..K FILEARR
"RTN","HDISVS02",71,0)
 ..S FILEARR(FFPTR)=""
"RTN","HDISVS02",72,0)
 ..K TERMPTR
"RTN","HDISVS02",73,0)
 ..I '$$ADDTERM^HDISVF04(TERM,VUID,.FILEARR,0,1,$$NOW^XLFDT(),0,.TERMPTR) D
"RTN","HDISVS02",74,0)
 ...S TMP="Unable to create entry in HDIS TERM/CONCEPT VUID "
"RTN","HDISVS02",75,0)
 ...S TMP=TMP_"ASSOCIATION file (#7118.11) for repetition number "
"RTN","HDISVS02",76,0)
 ...S TMP=TMP_REP_" of 'Term' ("_TERM_").  VUID was "_VUID_"."
"RTN","HDISVS02",77,0)
 ...D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS02",78,0)
 ...S OOPS=1
"RTN","HDISVS02",79,0)
 ..;Wait 1 second - resolve global cache problem
"RTN","HDISVS02",80,0)
 ..H 1
"RTN","HDISVS02",81,0)
 .;Problem found - quit
"RTN","HDISVS02",82,0)
 .I OOPS Q
"RTN","HDISVS02",83,0)
 .;Create entry in Facility Term/Concept file
"RTN","HDISVS02",84,0)
 .I '$$FINDFAC^HDISVF08(SYSPTR,FFPTR,TERMPTR,IREF,1) D
"RTN","HDISVS02",85,0)
 ..S TMP="Unable to create entry in HDIS FACILITY TERM/CONCEPT "
"RTN","HDISVS02",86,0)
 ..S TMP="ASSOCIATION file (#7118.22) for repetition number "_REP
"RTN","HDISVS02",87,0)
 ..S TMP=TMP_" of 'Term' ("_TERM_").  VUID was "_VUID_"."
"RTN","HDISVS02",88,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS02",89,0)
 ..S OOPS=1
"RTN","HDISVS02",90,0)
 .;Problem found - quit
"RTN","HDISVS02",91,0)
 .I OOPS Q
"RTN","HDISVS02",92,0)
 Q
"RTN","HDISVS03")
0^23^B26135546
"RTN","HDISVS03",1,0)
HDISVS03 ;BPFO/JRP - PROCESS RECEIVED XML DATA;1/6/2005 ; 08 Mar 2005  9:10 AM
"RTN","HDISVS03",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVS03",3,0)
STATUS(PRSARR,ERRARR) ;Process status update from VistA system
"RTN","HDISVS03",4,0)
 ; Input : PRSARR - Array containing parsed XML document (closed root)
"RTN","HDISVS03",5,0)
 ;                  This is the output of SAX^HDISVM01
"RTN","HDISVS03",6,0)
 ;         ERRARR - Array to output errors in (closed root)
"RTN","HDISVS03",7,0)
 ;Output : None
"RTN","HDISVS03",8,0)
 ;         ERRARR(x) = Error text (if applicable)
"RTN","HDISVS03",9,0)
 ; Notes : ERRARR is initialized (KILLed) on input
"RTN","HDISVS03",10,0)
 ;
"RTN","HDISVS03",11,0)
 ;Processing of all status updates disabled - throw error and quit
"RTN","HDISVS03",12,0)
 I $$GETSDIS^HDISVF03() D  Q
"RTN","HDISVS03",13,0)
 .N TMP
"RTN","HDISVS03",14,0)
 .S TMP="STATUS^HDISVS03: Processing of status updates by central "
"RTN","HDISVS03",15,0)
 .S TMP=TMP_"server is currently disabled"
"RTN","HDISVS03",16,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",17,0)
 N EINDX,ESUBS,AINDX,ASUBS,DATA,TMP,DATE,STATPTR,SRCTYPE,SYSPTR
"RTN","HDISVS03",18,0)
 N SOURCE,MAILMAN,FILE,FIELD,STAT,STATDT,INDX,OOPS,CODE,CODEPTR
"RTN","HDISVS03",19,0)
 S EINDX=$NA(@PRSARR@("EINDX"))
"RTN","HDISVS03",20,0)
 S ESUBS=$NA(@PRSARR@("ESUBS"))
"RTN","HDISVS03",21,0)
 S AINDX=$NA(@PRSARR@("AINDX"))
"RTN","HDISVS03",22,0)
 S ASUBS=$NA(@PRSARR@("ASUBS"))
"RTN","HDISVS03",23,0)
 S DATA=$NA(@PRSARR@("DATA"))
"RTN","HDISVS03",24,0)
 S OOPS=0
"RTN","HDISVS03",25,0)
 S ERRARR=$G(ERRARR)
"RTN","HDISVS03",26,0)
 I ERRARR'="" K @ERRARR
"RTN","HDISVS03",27,0)
 S PRSARR=$G(PRSARR)
"RTN","HDISVS03",28,0)
 I PRSARR="" D  Q
"RTN","HDISVS03",29,0)
 .S TMP="SATUS^HDISVS03: Input parameter PRSARR was not passed"
"RTN","HDISVS03",30,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",31,0)
 .S OOPS=1
"RTN","HDISVS03",32,0)
 I '$D(@PRSARR) D  Q
"RTN","HDISVS03",33,0)
 .S TMP="STATUS^HDISVS0S: Input array "_PRSARR_" (PRSARR) does not exist"
"RTN","HDISVS03",34,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",35,0)
 .S OOPS=1
"RTN","HDISVS03",36,0)
 ;Ensure all elements are indexed
"RTN","HDISVS03",37,0)
 F X=1:1 S TMP=$P($T(ELEMENTS+X),";;",2) Q:TMP=""  D
"RTN","HDISVS03",38,0)
 .I '$D(@EINDX@(TMP)) D
"RTN","HDISVS03",39,0)
 ..S TMP="XML element '"_TMP_"' was not found in the XML document"
"RTN","HDISVS03",40,0)
 ..D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",41,0)
 ..S OOPS=1
"RTN","HDISVS03",42,0)
 ;Ensure that 'HDISParameters' is the root element
"RTN","HDISVS03",43,0)
 I $G(@ESUBS@(1))'="HDISParameters" D
"RTN","HDISVS03",44,0)
 .S TMP="'HDISParameters' was not the root element in the XML document"
"RTN","HDISVS03",45,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",46,0)
 .S OOPS=1
"RTN","HDISVS03",47,0)
 ;Errors found - quit
"RTN","HDISVS03",48,0)
 I OOPS Q
"RTN","HDISVS03",49,0)
 ;Process 'HDISParameters' portion of XML doc
"RTN","HDISVS03",50,0)
 S INDX=@EINDX@("HDISParameters")
"RTN","HDISVS03",51,0)
 ;Get elements
"RTN","HDISVS03",52,0)
 S SOURCE=$G(@DATA@(INDX,1,@EINDX@("Source"),1,"V"))
"RTN","HDISVS03",53,0)
 S SRCTYPE=$G(@DATA@(INDX,1,@EINDX@("SourceType"),1,"V"))
"RTN","HDISVS03",54,0)
 S MAILMAN=$G(@DATA@(INDX,1,@EINDX@("MailManDomain"),1,"V"))
"RTN","HDISVS03",55,0)
 S FILE=$G(@DATA@(INDX,1,@EINDX@("FileNumber"),1,"V"))
"RTN","HDISVS03",56,0)
 S FIELD=$G(@DATA@(INDX,1,@EINDX@("FieldNumber"),1,"V"))
"RTN","HDISVS03",57,0)
 S STAT=$G(@DATA@(INDX,1,@EINDX@("StatusCode"),1,"V"))
"RTN","HDISVS03",58,0)
 S STATDT=$G(@DATA@(INDX,1,@EINDX@("StatusDateTime"),1,"V"))
"RTN","HDISVS03",59,0)
 ;Validate elements
"RTN","HDISVS03",60,0)
 F TMP="SOURCE","MAILMAN","FILE","FIELD","STAT","STATDT","SRCTYPE" I $G(@TMP)="" D
"RTN","HDISVS03",61,0)
 .S Y="Source"
"RTN","HDISVS03",62,0)
 .I TMP="SRCTYPE" S Y="SourceType"
"RTN","HDISVS03",63,0)
 .I TMP="MAILMAN" S Y="MailManDomain"
"RTN","HDISVS03",64,0)
 .I TMP="FILE" S Y="FileNumber"
"RTN","HDISVS03",65,0)
 .I TMP="FIELD" S Y="FieldNumber"
"RTN","HDISVS03",66,0)
 .I TMP="STAT" S Y="StatusCode"
"RTN","HDISVS03",67,0)
 .I TMP="STATDT" S Y="StatusDateTime"
"RTN","HDISVS03",68,0)
 .S X="XML element '"_TMP_"' did not have a value"
"RTN","HDISVS03",69,0)
 .D ADDERR^HDISVC00(X,ERRARR)
"RTN","HDISVS03",70,0)
 .S OOPS=1
"RTN","HDISVS03",71,0)
 ;Validate facility number
"RTN","HDISVS03",72,0)
 I SOURCE'="" I '$$FACPTR^HDISVF01(SOURCE) D
"RTN","HDISVS03",73,0)
 .S TMP="Value of XML element 'Source' ("_SOURCE
"RTN","HDISVS03",74,0)
 .S TMP=TMP_") is not a valid facility number"
"RTN","HDISVS03",75,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",76,0)
 .S OOPS=1
"RTN","HDISVS03",77,0)
 ;Get pointer to system
"RTN","HDISVS03",78,0)
 I 'OOPS I '$$FINDSYS^HDISVF07(MAILMAN,SOURCE,SRCTYPE,1,.SYSPTR) D
"RTN","HDISVS03",79,0)
 .S TMP="Entry for XML elements 'Source' ("_SOURCE_"), MailManDomain "
"RTN","HDISVS03",80,0)
 .S TMP=TMP_"("_MAILMAN_"), and 'SourceType' ("_SRCTYPE_") could not "
"RTN","HDISVS03",81,0)
 .S TMP="be found/created in HDIS SYSTEM file (#7718.21)"
"RTN","HDISVS03",82,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",83,0)
 .S OOPS=1
"RTN","HDISVS03",84,0)
 ;Make sure entry in HDIS Parameter file exists for system
"RTN","HDISVS03",85,0)
 I 'OOPS I '$$GETPTR^HDISVF10(SYSPTR) I '$$PARAMINI^HDISVF10(SYSPTR,"","","",1) D
"RTN","HDISVS03",86,0)
 .S TMP="Entry for XML elements 'Source' ("_SOURCE_"), 'MailManDomain' "
"RTN","HDISVS03",87,0)
 .S TMP=TMP_"("_MAILMAN_"), and 'SourceType' ("_SRCTYPE_") could not "
"RTN","HDISVS03",88,0)
 .S TMP="be found/created in HDIS PARAMETER file (#7718.29)"
"RTN","HDISVS03",89,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",90,0)
 .S OOPS=1
"RTN","HDISVS03",91,0)
 ;Processing of status updates from specific system disabled
"RTN","HDISVS03",92,0)
 I 'OOPS I $$GETSDIS^HDISVF03(SYSPTR) D
"RTN","HDISVS03",93,0)
 .S TMP="Processing of status udpates from 'Source' ("_SOURCE_"), "
"RTN","HDISVS03",94,0)
 .S TMP=TMP_"'MailManDomain' ("_MAILMAN_"), and 'SourceType' ("
"RTN","HDISVS03",95,0)
 .S TMP=TMP_SRCTYPE_") currently disabled"
"RTN","HDISVS03",96,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",97,0)
 .S OOPS=1
"RTN","HDISVS03",98,0)
 ;Errors found - quit
"RTN","HDISVS03",99,0)
 I OOPS Q
"RTN","HDISVS03",100,0)
 ;Translate client's status code to a server status code
"RTN","HDISVS03",101,0)
 ;  Server status codes currently mirror the client status codes
"RTN","HDISVS03",102,0)
 S CODEPTR=0
"RTN","HDISVS03",103,0)
 I STAT'="" I '$$GETIEN^HDISVF06(STAT,2,.CODEPTR) D
"RTN","HDISVS03",104,0)
 .S TMP="Unable to convert value of 'StatusCode' ("_STAT
"RTN","HDISVS03",105,0)
 .S TMP=TMP_") to it's server side equivalent"
"RTN","HDISVS03",106,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",107,0)
 .S OOPS=1
"RTN","HDISVS03",108,0)
 .S CODEPTR=0
"RTN","HDISVS03",109,0)
 I CODEPTR I '$$GETCODE^HDISVF06(CODEPTR,.CODE) D
"RTN","HDISVS03",110,0)
 .S TMP="Unable to convert value of 'StatusCode' ("_STAT
"RTN","HDISVS03",111,0)
 .S TMP=TMP_") to it's server side equivalent"
"RTN","HDISVS03",112,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",113,0)
 .S OOPS=1
"RTN","HDISVS03",114,0)
 ;Convert status date/time to FileMan format
"RTN","HDISVS03",115,0)
 I STATDT'="" S DATE=$$XMLTFM^HDISVU01(STATDT,1) I DATE="" D
"RTN","HDISVS03",116,0)
 .S TMP="Unable to convert value of 'StatusDateTime' ("_STATDT
"RTN","HDISVS03",117,0)
 .S TMP=TMP_") to FileMan format"
"RTN","HDISVS03",118,0)
 .D ADDERR^HDISVC00(TMP,ERRARR)
"RTN","HDISVS03",119,0)
 .S OOPS=1
"RTN","HDISVS03",120,0)
 ;Errors found - quit
"RTN","HDISVS03",121,0)
 I OOPS Q
"RTN","HDISVS03",122,0)
 ;Store status
"RTN","HDISVS03",123,0)
 D SETSTAT^HDISVF01(FILE,FIELD,CODE,DATE,2,SOURCE,MAILMAN,SRCTYPE)
"RTN","HDISVS03",124,0)
 Q
"RTN","HDISVS03",125,0)
 ;
"RTN","HDISVS03",126,0)
ELEMENTS ;List of required elements in XML document
"RTN","HDISVS03",127,0)
 ;;HDISParameters
"RTN","HDISVS03",128,0)
 ;;Source
"RTN","HDISVS03",129,0)
 ;;SourceType
"RTN","HDISVS03",130,0)
 ;;MailManDomain
"RTN","HDISVS03",131,0)
 ;;FileNumber
"RTN","HDISVS03",132,0)
 ;;FieldNumber
"RTN","HDISVS03",133,0)
 ;;StatusCode
"RTN","HDISVS03",134,0)
 ;;StatusDateTime
"RTN","HDISVS03",135,0)
 ;;
"RTN","HDISVSFX")
0^24^B6363234
"RTN","HDISVSFX",1,0)
HDISVSFX ;CT/GRR ; 24 Jan 2005  10:28 AM
"RTN","HDISVSFX",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVSFX",3,0)
FILE(HDISDOM,HDISFAC,HDISFLFN,HDISARRY) ;
"RTN","HDISVSFX",4,0)
 N HDISQQ,HDISOUT,X,HDIST,HDISY,HDISMD,HDISPROD,HDISFILE,HDISFN,HDISDOMN,HDISSRC,HDERR
"RTN","HDISVSFX",5,0)
 N HDISDA,HDISFIR,HDISTERM,HDISTSD,HDISSTAT,HDISTSDX,HDISVUID,HDISNST,HDISNTLF,HDISTP,Y
"RTN","HDISVSFX",6,0)
 I HDISDOM=""!(HDISFAC="")!(HDISFLFN="")!(HDISARRY="") S HDISOUT=0_"^Parameter Missing" G QUIT
"RTN","HDISVSFX",7,0)
 K @HDISARRY
"RTN","HDISVSFX",8,0)
 ;Lookup VUID XML template to build XML document
"RTN","HDISVSFX",9,0)
 S DIC=7115.3,DIC(0)="Z",X="VUID" D ^DIC K DIC
"RTN","HDISVSFX",10,0)
 I Y<0 S HDISOUT=0_"^VUID Template Missing" G QUIT
"RTN","HDISVSFX",11,0)
 S HDIST=+Y,HDISY=Y,HDISY(0)=Y(0)
"RTN","HDISVSFX",12,0)
 ;
"RTN","HDISVSFX",13,0)
 ;Get Domain name
"RTN","HDISVSFX",14,0)
 S HDISDOMN=$P($G(^HDIS(7115.1,HDISDOM,0)),"^")
"RTN","HDISVSFX",15,0)
 ;
"RTN","HDISVSFX",16,0)
 ;Get Facility Number, MailMan Parameters, and mailMan Domain name
"RTN","HDISVSFX",17,0)
 S X=$$GETFAC^HDISVF07(HDISFAC,,.HDISSRC)
"RTN","HDISVSFX",18,0)
 S HDISMD=$P($G(^HDISF(7118.21,HDISFAC,0)),"^",2)
"RTN","HDISVSFX",19,0)
 S HDISPROD=$P($G(^HDISF(7118.21,HDISFAC,0)),"^",3)
"RTN","HDISVSFX",20,0)
 S HDISFILE=$P($G(^HDIS(7115.6,HDISFLFN,0)),"^",2)
"RTN","HDISVSFX",21,0)
 S HDISFN=$P($G(^HDIS(7115.6,HDISFLFN,0)),"^",4)
"RTN","HDISVSFX",22,0)
 ;
"RTN","HDISVSFX",23,0)
 ;Set XML header in output array
"RTN","HDISVSFX",24,0)
 S @HDISARRY@(1)="<?xml version=""1.0"" encoding=""utf-8"" ?>"
"RTN","HDISVSFX",25,0)
 ;S @HDISARRY@(1)=$$XMLHDR^XOBVLIB()
"RTN","HDISVSFX",26,0)
 S @HDISARRY@(2)="<"_$P(HDISY(0),"^",4)_" "_$G(^HDIS(7115.3,HDIST,1))_">"
"RTN","HDISVSFX",27,0)
 ;
"RTN","HDISVSFX",28,0)
 ;Initialize Z array which will contain input data for XML routine
"RTN","HDISVSFX",29,0)
 N Z K Z D ZINIT
"RTN","HDISVSFX",30,0)
 ;
"RTN","HDISVSFX",31,0)
 ;Store Domain Name, Facility Number, MailMan Domain, File, and Field Number
"RTN","HDISVSFX",32,0)
 ;in output array
"RTN","HDISVSFX",33,0)
 S Z(10)=HDISDOMN
"RTN","HDISVSFX",34,0)
 S Z(20)=HDISSRC
"RTN","HDISVSFX",35,0)
 S Z(22)=HDISPROD
"RTN","HDISVSFX",36,0)
 S Z(25)=HDISMD
"RTN","HDISVSFX",37,0)
 S Z(40)=HDISFILE
"RTN","HDISVSFX",38,0)
 S Z(45)=HDISFN
"RTN","HDISVSFX",39,0)
 ;
"RTN","HDISVSFX",40,0)
 ;
"RTN","HDISVSFX",41,0)
 ;Write out first 5 xml elements to output array
"RTN","HDISVSFX",42,0)
 ;
"RTN","HDISVSFX",43,0)
 D XMLOUT^HDISXML(HDIST,"10,20,22,25,30,40,45,","Z",HDISARRY,.HDERR)
"RTN","HDISVSFX",44,0)
 ;
"RTN","HDISVSFX",45,0)
 ;Get the node and piece position of term to be standardized
"RTN","HDISVSFX",46,0)
 ;(In most cases it is the .01 field)
"RTN","HDISVSFX",47,0)
 ;
"RTN","HDISVSFX",48,0)
 ;Loop through all file entries, create xml entry for each
"RTN","HDISVSFX",49,0)
 N HDISDA S HDISDA=0 F  S HDISDA=$O(^HDISF(7118.22,"AC",HDISFAC,HDISFLFN,HDISDA)) Q:HDISDA'>0  D
"RTN","HDISVSFX",50,0)
 .S HDISY=^HDISF(7118.22,HDISDA,0)
"RTN","HDISVSFX",51,0)
 .S HDISFIR=$P(HDISY,"^",3),HDISTP=$P(HDISY,"^",4)
"RTN","HDISVSFX",52,0)
 .S HDISTERM=$P($G(^HDISV(7118.11,HDISTP,0)),"^")
"RTN","HDISVSFX",53,0)
 .S HDISNTLF=""
"RTN","HDISVSFX",54,0)
 .S HDISNST=$$GETNTLF^HDISVF04(HDISTP,.HDISNTLF)
"RTN","HDISVSFX",55,0)
 .S HDISTSDX=""
"RTN","HDISVSFX",56,0)
 .S HDISVUID=$P($G(^HDISV(7118.11,HDISTP,"VUID")),"^")
"RTN","HDISVSFX",57,0)
 .S Z(60)=HDISTERM
"RTN","HDISVSFX",58,0)
 .S Z(70)=HDISVUID
"RTN","HDISVSFX",59,0)
 .S Z(80)=HDISNTLF
"RTN","HDISVSFX",60,0)
 .S Z(100)=HDISFIR
"RTN","HDISVSFX",61,0)
 .D XMLOUT^HDISXML(HDIST,"50,60,70,80,100,50/,","Z",HDISARRY,.HDERR)
"RTN","HDISVSFX",62,0)
 ;
"RTN","HDISVSFX",63,0)
 ;Set final XML closing elements
"RTN","HDISVSFX",64,0)
 D XMLOUT^HDISXML(HDIST,"30/,5/,","Z",HDISARRY,.HDERR)
"RTN","HDISVSFX",65,0)
 S HDISOUT=1
"RTN","HDISVSFX",66,0)
 ;
"RTN","HDISVSFX",67,0)
QUIT Q HDISOUT
"RTN","HDISVSFX",68,0)
 ;
"RTN","HDISVSFX",69,0)
 ;
"RTN","HDISVSFX",70,0)
ZINIT ;
"RTN","HDISVSFX",71,0)
 S Z(22)="" F Z=5:5:100 S Z(Z)=""
"RTN","HDISVSFX",72,0)
 Q
"RTN","HDISVSFX",73,0)
 ;
"RTN","HDISVU01")
0^25^B1879599
"RTN","HDISVU01",1,0)
HDISVU01 ;BPFO/JRP - UTILITY CALLS;12/21/2004
"RTN","HDISVU01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISVU01",3,0)
 ;
"RTN","HDISVU01",4,0)
XMLTFM(XMLDT,LTZ) ;Convert XML date/time to FM date/time
"RTN","HDISVU01",5,0)
 ; Input : XMLDT - XML date/time
"RTN","HDISVU01",6,0)
 ;         LTZ - Flag indicating if time should be converted to local
"RTN","HDISVU01",7,0)
 ;               time (XML d/t contains time zone designation)
"RTN","HDISVU01",8,0)
 ;               0 = No (default)     1 = Yes
"RTN","HDISVU01",9,0)
 ;Output : Date/time in FileMan format
"RTN","HDISVU01",10,0)
 ; Notes : Null ("") returned on error
"RTN","HDISVU01",11,0)
 N HL7DT,FMDT
"RTN","HDISVU01",12,0)
 S XMLDT=$G(XMLDT)
"RTN","HDISVU01",13,0)
 I XMLDT="" Q ""
"RTN","HDISVU01",14,0)
 S LTZ=+$G(LTZ)
"RTN","HDISVU01",15,0)
 S LTZ=$S(LTZ:"L",1:"U")
"RTN","HDISVU01",16,0)
 ;Convert to HL7 format
"RTN","HDISVU01",17,0)
 S HL7DT=$TR($P(XMLDT,"T",1),"-")_$TR($P(XMLDT,"T",2),":")
"RTN","HDISVU01",18,0)
 ;Convert HL7 format to FileMan format
"RTN","HDISVU01",19,0)
 S FMDT=$$HL7TFM^XLFDT(HL7DT,LTZ)
"RTN","HDISVU01",20,0)
 I FMDT=-1 S FMDT=""
"RTN","HDISVU01",21,0)
 Q FMDT
"RTN","HDISVU01",22,0)
 ;
"RTN","HDISVU01",23,0)
FMTXML(FMDT,NOTIME,MIDNIGHT) ;Convert FM date/time to XML date/time
"RTN","HDISVU01",24,0)
 ; Input : FMDT - FileMan date/time
"RTN","HDISVU01",25,0)
 ;         NOTIME - Flag indicating if time shouldn't be included
"RTN","HDISVU01",26,0)
 ;                  0 = No (include time)(default)   1 = Yes (no time)
"RTN","HDISVU01",27,0)
 ;         MIDNIGHT - Flag indicating if midnight should be used when
"RTN","HDISVU01",28,0)
 ;                    no time is passed in
"RTN","HDISVU01",29,0)
 ;                    0 = No (leave as is)(default)     1 = Yes
"RTN","HDISVU01",30,0)
 ;Output : Date/time in XML format
"RTN","HDISVU01",31,0)
 ; Notes : Null ("") returned on error
"RTN","HDISVU01",32,0)
 N XTRNDT,XMLDT,FLAG
"RTN","HDISVU01",33,0)
 S NOTIME=+$G(NOTIME)
"RTN","HDISVU01",34,0)
 S MIDNIGHT=+$G(MIDNIGHT)
"RTN","HDISVU01",35,0)
 I $P(FMDT,".",2)="" I 'MIDNIGHT S NOTIME=1
"RTN","HDISVU01",36,0)
 I $P(FMDT,".",2)?1."0" I 'NOTIME S MIDNIGHT=1
"RTN","HDISVU01",37,0)
 ;No time overrides midnight addition
"RTN","HDISVU01",38,0)
 I NOTIME S MIDNIGHT=0
"RTN","HDISVU01",39,0)
 ;Drop time
"RTN","HDISVU01",40,0)
 S FLAG=$S(NOTIME:"7FD",1:"7FS")
"RTN","HDISVU01",41,0)
 ;Convert
"RTN","HDISVU01",42,0)
 S XTRNDT=$$FMTE^XLFDT(FMDT,FLAG)
"RTN","HDISVU01",43,0)
 ;Append midnight
"RTN","HDISVU01",44,0)
 I MIDNIGHT I $P(XTRNDT,"@",2)="" S $P(XTRNDT,"@",2)="00:00:00"
"RTN","HDISVU01",45,0)
 S XMLDT=$TR(XTRNDT,"@ /","T0-")
"RTN","HDISVU01",46,0)
 I 'NOTIME S XMLDT=XMLDT_$$TZ^XLFDT()
"RTN","HDISVU01",47,0)
 Q XMLDT
"RTN","HDISXML")
0^29^B8757304
"RTN","HDISXML",1,0)
HDISXML ; CT/GRR - XML UTILITY ROUTINE; 16-FEB-2004 ; 02 Mar 2005  4:17 PM
"RTN","HDISXML",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;;Feb 22, 2005
"RTN","HDISXML",3,0)
 ;
"RTN","HDISXML",4,0)
XMLOUT(HDISTEMP,HDISE,HDISF,HDIST,HDISERR) ;
"RTN","HDISXML",5,0)
 ;;Input Parameters (all required)
"RTN","HDISXML",6,0)
 ;;
"RTN","HDISXML",7,0)
 ;;HDISTEMP - IEN of XML Template
"RTN","HDISXML",8,0)
 ;;
"RTN","HDISXML",9,0)
 ;;HDISE - Element Number(s), separated by a comma, to be formatted
"RTN","HDISXML",10,0)
 ;;        and moved to the output array
"RTN","HDISXML",11,0)
 ;;
"RTN","HDISXML",12,0)
 ;;HDISF - Reference of the input array
"RTN","HDISXML",13,0)
 ;;
"RTN","HDISXML",14,0)
 ;;HDIST - Reference of the target array
"RTN","HDISXML",15,0)
 ;;
"RTN","HDISXML",16,0)
 ;;HDISERR - reference of error variable
"RTN","HDISXML",17,0)
 ;;
"RTN","HDISXML",18,0)
 ;;
"RTN","HDISXML",19,0)
 I HDISTEMP=""!(HDISE="")!(HDISF="")!(HDIST="") S @HDISERR="Missing Input Parameter",HDISOK=0 G XMLOUTQ
"RTN","HDISXML",20,0)
 N BLANK,CLOSE,DA,ELEV,HASKID,HDENT,HDISFE,HDISFO,HDISFT,HDISOK,IEN,IND,ISMULTI,LASTIEN,LINE,OPEN,QUOTE,REQ,TEXTIN,TRANSTXT,Y,ENAME
"RTN","HDISXML",21,0)
 S:HDISE'["," HDISE=HDISE_","
"RTN","HDISXML",22,0)
 D INIT
"RTN","HDISXML",23,0)
 F I=1:1 S E=$P(HDISE,",",I) Q:E=""  D
"RTN","HDISXML",24,0)
 .S (HDISFT,HDISFE)=$NA(@HDISF@(E))
"RTN","HDISXML",25,0)
 .I E["/" S E=$P(E,"/",1) D CLOSE(HDISTEMP,E,HDISF,HDIST,.HDERR) Q
"RTN","HDISXML",26,0)
 .D PROCESS(E)
"RTN","HDISXML",27,0)
XMLOUTQ Q
"RTN","HDISXML",28,0)
 ;
"RTN","HDISXML",29,0)
GETED(E) ;
"RTN","HDISXML",30,0)
 S IEN=$O(^HDIS(7115.3,HDISTEMP,"SEQ","B",E,0))
"RTN","HDISXML",31,0)
 S Y(0)=$G(^HDIS(7115.3,HDISTEMP,"SEQ",IEN,0))
"RTN","HDISXML",32,0)
 S REQ=$P(Y(0),"^",3),ENAME=$P(Y(0),"^",2),ELEV=$P(Y(0),"^",5),HASKID=$P(Y(0),"^",6),ISMULTI=$P(Y(0),"^",7)
"RTN","HDISXML",33,0)
 Q
"RTN","HDISXML",34,0)
 ;
"RTN","HDISXML",35,0)
PROCESS(E) ;
"RTN","HDISXML",36,0)
 D GETED(E)
"RTN","HDISXML",37,0)
 I 'ISMULTI D FORMAT Q
"RTN","HDISXML",38,0)
 S DA=0 F  S DA=$O(@HDISFE@(DA)) Q:DA'>0  S HDISF=$NA(@HDISFE@(DA)) D FORMAT
"RTN","HDISXML",39,0)
 Q
"RTN","HDISXML",40,0)
INIT ;
"RTN","HDISXML",41,0)
 ;N OPEN,CLOSE,QUOTE,IND,REQ,BLANK
"RTN","HDISXML",42,0)
 S OPEN="<",CLOSE=">",QUOTE="""",BLANK=" ",$P(BLANK," ",100)=" "
"RTN","HDISXML",43,0)
 S IND=$P(^HDIS(7115.3,HDISTEMP,0),"^",5)
"RTN","HDISXML",44,0)
 S LASTIEN=$O(@HDIST@(9999999),-1)
"RTN","HDISXML",45,0)
 S HDISOK=1,HDISFO=HDISF
"RTN","HDISXML",46,0)
 Q
"RTN","HDISXML",47,0)
 ;
"RTN","HDISXML",48,0)
FORMAT ;
"RTN","HDISXML",49,0)
 I 'HASKID S TEXTIN=@HDISFE Q:TEXTIN=""&'(REQ)  S TRANSTXT=$$TRANSLAT(TEXTIN)
"RTN","HDISXML",50,0)
 S LINE=""
"RTN","HDISXML",51,0)
 S LINE=$E(BLANK,1,(IND*ELEV))_OPEN_ENAME_CLOSE
"RTN","HDISXML",52,0)
 I 'HASKID S LINE=LINE_TRANSTXT_OPEN_"/"_ENAME_CLOSE
"RTN","HDISXML",53,0)
 S LASTIEN=LASTIEN+1
"RTN","HDISXML",54,0)
 S @HDIST@(LASTIEN)=LINE
"RTN","HDISXML",55,0)
 Q
"RTN","HDISXML",56,0)
 ;
"RTN","HDISXML",57,0)
CLOSE(HDISTEMP,HDISE,HDISF,HDIST,HDERR) ;
"RTN","HDISXML",58,0)
 D INIT
"RTN","HDISXML",59,0)
 D GETED(HDISE)
"RTN","HDISXML",60,0)
 S LINE=""
"RTN","HDISXML",61,0)
 S LINE=$E(BLANK,1,(IND*ELEV))_OPEN_"/"_ENAME_CLOSE
"RTN","HDISXML",62,0)
 S LASTIEN=LASTIEN+1
"RTN","HDISXML",63,0)
 S @HDIST@(LASTIEN)=LINE
"RTN","HDISXML",64,0)
 Q
"RTN","HDISXML",65,0)
 ;
"RTN","HDISXML",66,0)
TRANSLAT(X) ;
"RTN","HDISXML",67,0)
 N HDPAT,I
"RTN","HDISXML",68,0)
 I X["&" F I=1:1 Q:I=$L(X)  I $E(X,I)="&" S X=$E(X,1,(I-1))_"&amp;"_$E(X,I+1,$L(X))
"RTN","HDISXML",69,0)
 F HDPAT="'","""",">","<" F  Q:X'[HDPAT  D
"RTN","HDISXML",70,0)
 .S HDENT=""
"RTN","HDISXML",71,0)
 .I HDPAT="'" S HDENT="&apos;"
"RTN","HDISXML",72,0)
 .I HDPAT="""" S HDENT="&quot;"
"RTN","HDISXML",73,0)
 .I HDPAT=">" S HDENT="&gt;"
"RTN","HDISXML",74,0)
 .I HDPAT="<" S HDENT="&lt;"
"RTN","HDISXML",75,0)
 .Q:HDENT=""
"RTN","HDISXML",76,0)
 .S X=$P(X,HDPAT,1)_HDENT_$P(X,HDPAT,2,99)
"RTN","HDISXML",77,0)
 Q X
"RTN","HDISXML",78,0)
 ;
"SEC","^DIC",7115.1,7115.1,0,"AUDIT")
@
"SEC","^DIC",7115.1,7115.1,0,"DD")
@
"SEC","^DIC",7115.1,7115.1,0,"DEL")
@
"SEC","^DIC",7115.1,7115.1,0,"LAYGO")
@
"SEC","^DIC",7115.1,7115.1,0,"RD")
@
"SEC","^DIC",7115.1,7115.1,0,"WR")
@
"SEC","^DIC",7115.3,7115.3,0,"AUDIT")
@
"SEC","^DIC",7115.3,7115.3,0,"DD")
@
"SEC","^DIC",7115.3,7115.3,0,"DEL")
@
"SEC","^DIC",7115.3,7115.3,0,"LAYGO")
@
"SEC","^DIC",7115.3,7115.3,0,"RD")
@
"SEC","^DIC",7115.3,7115.3,0,"WR")
@
"SEC","^DIC",7115.5,7115.5,0,"AUDIT")
@
"SEC","^DIC",7115.5,7115.5,0,"DD")
@
"SEC","^DIC",7115.5,7115.5,0,"DEL")
@
"SEC","^DIC",7115.5,7115.5,0,"LAYGO")
@
"SEC","^DIC",7115.5,7115.5,0,"RD")
@
"SEC","^DIC",7115.5,7115.5,0,"WR")
@
"SEC","^DIC",7115.6,7115.6,0,"AUDIT")
@
"SEC","^DIC",7115.6,7115.6,0,"DD")
@
"SEC","^DIC",7115.6,7115.6,0,"DEL")
@
"SEC","^DIC",7115.6,7115.6,0,"LAYGO")
@
"SEC","^DIC",7115.6,7115.6,0,"RD")
@
"SEC","^DIC",7115.6,7115.6,0,"WR")
@
"SEC","^DIC",7118.11,7118.11,0,"AUDIT")
@
"SEC","^DIC",7118.11,7118.11,0,"DD")
@
"SEC","^DIC",7118.11,7118.11,0,"DEL")
@
"SEC","^DIC",7118.11,7118.11,0,"LAYGO")
@
"SEC","^DIC",7118.11,7118.11,0,"RD")
@
"SEC","^DIC",7118.11,7118.11,0,"WR")
@
"SEC","^DIC",7118.21,7118.21,0,"AUDIT")
@
"SEC","^DIC",7118.21,7118.21,0,"DD")
@
"SEC","^DIC",7118.21,7118.21,0,"DEL")
@
"SEC","^DIC",7118.21,7118.21,0,"LAYGO")
@
"SEC","^DIC",7118.21,7118.21,0,"RD")
@
"SEC","^DIC",7118.21,7118.21,0,"WR")
@
"SEC","^DIC",7118.22,7118.22,0,"AUDIT")
@
"SEC","^DIC",7118.22,7118.22,0,"DD")
@
"SEC","^DIC",7118.22,7118.22,0,"DEL")
@
"SEC","^DIC",7118.22,7118.22,0,"LAYGO")
@
"SEC","^DIC",7118.22,7118.22,0,"RD")
@
"SEC","^DIC",7118.22,7118.22,0,"WR")
@
"SEC","^DIC",7118.25,7118.25,0,"AUDIT")
@
"SEC","^DIC",7118.25,7118.25,0,"DD")
@
"SEC","^DIC",7118.25,7118.25,0,"DEL")
@
"SEC","^DIC",7118.25,7118.25,0,"LAYGO")
@
"SEC","^DIC",7118.25,7118.25,0,"RD")
@
"SEC","^DIC",7118.25,7118.25,0,"WR")
@
"SEC","^DIC",7118.29,7118.29,0,"AUDIT")
@
"SEC","^DIC",7118.29,7118.29,0,"DD")
@
"SEC","^DIC",7118.29,7118.29,0,"DEL")
@
"SEC","^DIC",7118.29,7118.29,0,"LAYGO")
@
"SEC","^DIC",7118.29,7118.29,0,"RD")
@
"SEC","^DIC",7118.29,7118.29,0,"WR")
@
"VER")
8.0^22.0
"^DD",7115.1,7115.1,0)
FIELD^^10^2
"^DD",7115.1,7115.1,0,"DT")
3041227
"^DD",7115.1,7115.1,0,"IX","B",7115.1,.01)

"^DD",7115.1,7115.1,0,"NM","HDIS DOMAIN")

"^DD",7115.1,7115.1,0,"VRPK")
HDIS
"^DD",7115.1,7115.1,.01,0)
DOMAIN^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",7115.1,7115.1,.01,1,0)
^.1
"^DD",7115.1,7115.1,.01,1,1,0)
7115.1^B
"^DD",7115.1,7115.1,.01,1,1,1)
S ^HDIS(7115.1,"B",$E(X,1,30),DA)=""
"^DD",7115.1,7115.1,.01,1,1,2)
K ^HDIS(7115.1,"B",$E(X,1,30),DA)
"^DD",7115.1,7115.1,.01,1,1,"%D",0)
^.101^1^1^3050105^^
"^DD",7115.1,7115.1,.01,1,1,"%D",1,0)
This cross-reference is by Domain.
"^DD",7115.1,7115.1,.01,3)
Answer must be 3-30 characters in length.
"^DD",7115.1,7115.1,.01,21,0)
^^2^2^3050105^
"^DD",7115.1,7115.1,.01,21,1,0)
A subset of medicine, a natural grouping of clinical acts (e.g., demographics, vital signs, laboratory,
"^DD",7115.1,7115.1,.01,21,2,0)
pharmacy).
"^DD",7115.1,7115.1,.01,"DT")
3050105
"^DD",7115.1,7115.1,10,0)
FILE/FIELD^7115.11PA^^FILE;0
"^DD",7115.1,7115.1,10,21,0)
^^1^1^3041227^
"^DD",7115.1,7115.1,10,21,1,0)
The File/Field associated with the record.
"^DD",7115.1,7115.1,10,"DT")
3041227
"^DD",7115.1,7115.11,0)
FILE/FIELD SUB-FIELD^^.01^1
"^DD",7115.1,7115.11,0,"DT")
3041227
"^DD",7115.1,7115.11,0,"IX","B",7115.11,.01)

"^DD",7115.1,7115.11,0,"NM","FILE/FIELD")

"^DD",7115.1,7115.11,0,"UP")
7115.1
"^DD",7115.1,7115.11,.01,0)
FILE/FIELD^RP7115.6'^HDIS(7115.6,^0;1^Q
"^DD",7115.1,7115.11,.01,1,0)
^.1
"^DD",7115.1,7115.11,.01,1,1,0)
7115.11^B
"^DD",7115.1,7115.11,.01,1,1,1)
S ^HDIS(7115.1,DA(1),"FILE","B",$E(X,1,30),DA)=""
"^DD",7115.1,7115.11,.01,1,1,2)
K ^HDIS(7115.1,DA(1),"FILE","B",$E(X,1,30),DA)
"^DD",7115.1,7115.11,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7115.1,7115.11,.01,1,1,"%D",1,0)
This cross-reference is by File/Field.
"^DD",7115.1,7115.11,.01,21,0)
^^1^1^3050105^
"^DD",7115.1,7115.11,.01,21,1,0)
The File/Field associated with the record.
"^DD",7115.1,7115.11,.01,"DT")
3050105
"^DD",7115.3,7115.3,0)
FIELD^^5^6
"^DD",7115.3,7115.3,0,"DDA")
N
"^DD",7115.3,7115.3,0,"DT")
3050228
"^DD",7115.3,7115.3,0,"IX","B",7115.3,.01)

"^DD",7115.3,7115.3,0,"NM","HDIS XML TEMPLATE")

"^DD",7115.3,7115.3,0,"VRPK")
HDIS
"^DD",7115.3,7115.3,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",7115.3,7115.3,.01,1,0)
^.1
"^DD",7115.3,7115.3,.01,1,1,0)
7115.3^B
"^DD",7115.3,7115.3,.01,1,1,1)
S ^HDIS(7115.3,"B",$E(X,1,30),DA)=""
"^DD",7115.3,7115.3,.01,1,1,2)
K ^HDIS(7115.3,"B",$E(X,1,30),DA)
"^DD",7115.3,7115.3,.01,3)
Answer must be 3-30 characters in length.
"^DD",7115.3,7115.3,.01,21,0)
^.001^2^2^3050228^^^
"^DD",7115.3,7115.3,.01,21,1,0)
This is the name of the XML Template.  Identifies which XML
"^DD",7115.3,7115.3,.01,21,2,0)
schema the template relates too.
"^DD",7115.3,7115.3,.01,"DT")
3050228
"^DD",7115.3,7115.3,1,0)
XML VERSION^RNJ7,4^^0;2^K:+X'=X!(X>99)!(X<1)!(X?.E1"."5N.N) X
"^DD",7115.3,7115.3,1,3)
Type a Number between 1 and 99, 4 Decimal Digits
"^DD",7115.3,7115.3,1,21,0)
^^1^1^3050228^
"^DD",7115.3,7115.3,1,21,1,0)
Identifies what version of XML this XML message will be used.
"^DD",7115.3,7115.3,1,"DT")
3040920
"^DD",7115.3,7115.3,2,0)
ENCODING^RF^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",7115.3,7115.3,2,3)
Answer must be 1-20 characters in length.
"^DD",7115.3,7115.3,2,21,0)
^^2^2^3050228^
"^DD",7115.3,7115.3,2,21,1,0)
Defines the encoding which will be used when creating this XML message.
"^DD",7115.3,7115.3,2,21,2,0)
Normally set to "UTF-8".
"^DD",7115.3,7115.3,2,"DT")
3040920
"^DD",7115.3,7115.3,3,0)
PRIMARY ELEMENT^RF^^0;4^K:$L(X)>30!($L(X)<3) X
"^DD",7115.3,7115.3,3,3)
Answer must be 3-30 characters in length.
"^DD",7115.3,7115.3,3,21,0)
^^1^1^3050228^
"^DD",7115.3,7115.3,3,21,1,0)
Identifies the Primary Element in the XML schema.  
"^DD",7115.3,7115.3,3,"DT")
3040920
"^DD",7115.3,7115.3,4,0)
ELEMENT NUMBER^7115.34^^SEQ;0
"^DD",7115.3,7115.3,4,21,0)
^^3^3^3050228^
"^DD",7115.3,7115.3,4,21,1,0)
Each element (line) in the XML message is assigned an element number.
"^DD",7115.3,7115.3,4,21,2,0)
The elements are processed by this number, so this data determines
"^DD",7115.3,7115.3,4,21,3,0)
the sequence of data for the XML message.
"^DD",7115.3,7115.3,5,0)
INDENTATION^RNJ2,0^^0;5^K:+X'=X!(X>10)!(X<0)!(X?.E1"."1N.N) X
"^DD",7115.3,7115.3,5,3)
Type a Number between 0 and 10, 0 Decimal Digits
"^DD",7115.3,7115.3,5,21,0)
^^3^3^3050228^
"^DD",7115.3,7115.3,5,21,1,0)
Used to define the number of spaces for each element indentation.  The 
"^DD",7115.3,7115.3,5,21,2,0)
level indicator is multiplied by the indentation field.  This field can be
"^DD",7115.3,7115.3,5,21,3,0)
set to zero, so that no indentation occurs.
"^DD",7115.3,7115.3,5,"DT")
3041208
"^DD",7115.3,7115.34,0)
ELEMENT NUMBER SUB-FIELD^^.07^6
"^DD",7115.3,7115.34,0,"DT")
3041129
"^DD",7115.3,7115.34,0,"IX","B",7115.34,.01)

"^DD",7115.3,7115.34,0,"NM","ELEMENT NUMBER")

"^DD",7115.3,7115.34,0,"UP")
7115.3
"^DD",7115.3,7115.34,.01,0)
ELEMENT NUMBER^MRNJ8,3^^0;1^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."4N.N) X
"^DD",7115.3,7115.34,.01,1,0)
^.1
"^DD",7115.3,7115.34,.01,1,1,0)
7115.34^B
"^DD",7115.3,7115.34,.01,1,1,1)
S ^HDIS(7115.3,DA(1),"SEQ","B",$E(X,1,30),DA)=""
"^DD",7115.3,7115.34,.01,1,1,2)
K ^HDIS(7115.3,DA(1),"SEQ","B",$E(X,1,30),DA)
"^DD",7115.3,7115.34,.01,3)
Type a Number between 1 and 9999, 3 Decimal Digits
"^DD",7115.3,7115.34,.01,21,0)
^^2^2^3050228^
"^DD",7115.3,7115.34,.01,21,1,0)
This field contains a numerical number which is used to determine the
"^DD",7115.3,7115.34,.01,21,2,0)
sequence of data for the output xml document.
"^DD",7115.3,7115.34,.01,"DT")
3040923
"^DD",7115.3,7115.34,.02,0)
ELEMENT NAME^RF^^0;2^K:$L(X)>30!($L(X)<2) X
"^DD",7115.3,7115.34,.02,3)
Answer must be 2-30 characters in length.
"^DD",7115.3,7115.34,.02,21,0)
^^2^2^3050228^
"^DD",7115.3,7115.34,.02,21,1,0)
This data is the name of the element which will be included in the
"^DD",7115.3,7115.34,.02,21,2,0)
xml document when created.
"^DD",7115.3,7115.34,.02,"DT")
3040920
"^DD",7115.3,7115.34,.03,0)
ELEMENT REQUIRED^S^1:REQUIRED;^0;3^Q
"^DD",7115.3,7115.34,.03,21,0)
^^5^5^3050228^
"^DD",7115.3,7115.34,.03,21,1,0)
This field is used to define whether this element is required for the
"^DD",7115.3,7115.34,.03,21,2,0)
output xml document.  If set to required, the element is included
"^DD",7115.3,7115.34,.03,21,3,0)
whether or not data exists for that element.  If set to not required,
"^DD",7115.3,7115.34,.03,21,4,0)
the element will not be included in the xml document if there is no
"^DD",7115.3,7115.34,.03,21,5,0)
data related to the element.
"^DD",7115.3,7115.34,.03,"DT")
3040921
"^DD",7115.3,7115.34,.05,0)
LEVEL^RNJ2,0^^0;5^K:+X'=X!(X>20)!(X<0)!(X?.E1"."1N.N) X
"^DD",7115.3,7115.34,.05,3)
Type a Number between 0 and 20, 0 Decimal Digits
"^DD",7115.3,7115.34,.05,21,0)
^^2^2^3050228^
"^DD",7115.3,7115.34,.05,21,1,0)
This field defines what level the element is.  This field is used 
"^DD",7115.3,7115.34,.05,21,2,0)
when determining indentation of element names for ease of reading.
"^DD",7115.3,7115.34,.05,"DT")
3041129
"^DD",7115.3,7115.34,.06,0)
HAS CHILDREN^S^1:HAS CHILDREN;^0;6^Q
"^DD",7115.3,7115.34,.06,21,0)
^^5^5^3050228^
"^DD",7115.3,7115.34,.06,21,1,0)
If this field is set to Has Children, then the program logic knows
"^DD",7115.3,7115.34,.06,21,2,0)
that there is no data realting specifically to this element, and that
"^DD",7115.3,7115.34,.06,21,3,0)
only the element name needs to be formatted.  If Has Children is set
"^DD",7115.3,7115.34,.06,21,4,0)
to No, then the program knows that data is expected for this element,
"^DD",7115.3,7115.34,.06,21,5,0)
even though it can be null.
"^DD",7115.3,7115.34,.06,"DT")
3040921
"^DD",7115.3,7115.34,.07,0)
IS MULTIPLE^S^1:IS MULTIPLE;^0;7^Q
"^DD",7115.3,7115.34,.07,21,0)
^^3^3^3050228^
"^DD",7115.3,7115.34,.07,21,1,0)
This field indicates whether the element can have multiple entries or is
"^DD",7115.3,7115.34,.07,21,2,0)
a single value.  For example, the SSN Element would not be a multiple,
"^DD",7115.3,7115.34,.07,21,3,0)
However an element such as "Description" would have multiple lines.
"^DD",7115.3,7115.34,.07,"DT")
3040922
"^DD",7115.5,7115.5,0)
FIELD^^1^4
"^DD",7115.5,7115.5,0,"DT")
3041227
"^DD",7115.5,7115.5,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",7115.5,7115.5,0,"ID",.03)
W "   ",@("$P($P($C(59)_$S($D(^DD(7115.5,.03,0)):$P(^(0),U,3),1:0)_$E("_DIC_"Y,0),0),$C(59)_$P(^(0),U,3)_"":"",2),$C(59),1)")
"^DD",7115.5,7115.5,0,"IX","B",7115.5,.01)

"^DD",7115.5,7115.5,0,"IX","C",7115.5,.02)

"^DD",7115.5,7115.5,0,"NM","HDIS STATUS")

"^DD",7115.5,7115.5,0,"PT",7118.25,.03)

"^DD",7115.5,7115.5,.01,0)
STATUS^RF^^0;1^K:$L(X)>80!($L(X)<1)!'(X'?1P.E) X
"^DD",7115.5,7115.5,.01,1,0)
^.1
"^DD",7115.5,7115.5,.01,1,1,0)
7115.5^B
"^DD",7115.5,7115.5,.01,1,1,1)
S ^HDIS(7115.5,"B",$E(X,1,30),DA)=""
"^DD",7115.5,7115.5,.01,1,1,2)
K ^HDIS(7115.5,"B",$E(X,1,30),DA)
"^DD",7115.5,7115.5,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7115.5,7115.5,.01,1,1,"%D",1,0)
This cross-reference is by Status.
"^DD",7115.5,7115.5,.01,3)
Answer must be 1-80 characters in length.
"^DD",7115.5,7115.5,.01,21,0)
^^1^1^3041227^
"^DD",7115.5,7115.5,.01,21,1,0)
Status name/text.
"^DD",7115.5,7115.5,.01,"DT")
3041227
"^DD",7115.5,7115.5,.02,0)
STATUS CODE^RFI^^0;2^K:$L(X)>4!($L(X)<1) X
"^DD",7115.5,7115.5,.02,1,0)
^.1
"^DD",7115.5,7115.5,.02,1,1,0)
7115.5^C
"^DD",7115.5,7115.5,.02,1,1,1)
S ^HDIS(7115.5,"C",$E(X,1,30),DA)=""
"^DD",7115.5,7115.5,.02,1,1,2)
K ^HDIS(7115.5,"C",$E(X,1,30),DA)
"^DD",7115.5,7115.5,.02,1,1,"%D",0)
^^1^1^3041227^
"^DD",7115.5,7115.5,.02,1,1,"%D",1,0)
This cross-reference is by Status Code.
"^DD",7115.5,7115.5,.02,1,1,"DT")
3041227
"^DD",7115.5,7115.5,.02,3)
Answer must be 1-4 characters in length.
"^DD",7115.5,7115.5,.02,21,0)
^^1^1^3041227^
"^DD",7115.5,7115.5,.02,21,1,0)
Code representing the status.
"^DD",7115.5,7115.5,.02,"DT")
3041227
"^DD",7115.5,7115.5,.03,0)
STATUS TYPE^RSI^1:CLIENT;2:SERVER;^0;3^Q
"^DD",7115.5,7115.5,.03,21,0)
^^1^1^3041227^
"^DD",7115.5,7115.5,.03,21,1,0)
Denotes where/how the status is used.
"^DD",7115.5,7115.5,.03,"DT")
3041227
"^DD",7115.5,7115.5,1,0)
STATUS DESCRIPTION^7115.51^^1;0
"^DD",7115.5,7115.5,1,21,0)
^^1^1^3050105^
"^DD",7115.5,7115.5,1,21,1,0)
Description of the status and/or it's use.
"^DD",7115.5,7115.51,0)
STATUS DESCRIPTION SUB-FIELD^^.01^1
"^DD",7115.5,7115.51,0,"DT")
3041227
"^DD",7115.5,7115.51,0,"NM","STATUS DESCRIPTION")

"^DD",7115.5,7115.51,0,"UP")
7115.5
"^DD",7115.5,7115.51,.01,0)
STATUS DESCRIPTION^W^^0;1
"^DD",7115.5,7115.51,.01,21,0)
^^1^1^3041227^
"^DD",7115.5,7115.51,.01,21,1,0)
Description of the status and/or it's use.
"^DD",7115.5,7115.51,.01,"DT")
3041227
"^DD",7115.6,7115.6,0)
FIELD^^.04^3
"^DD",7115.6,7115.6,0,"DT")
3050112
"^DD",7115.6,7115.6,0,"IX","B",7115.6,.01)

"^DD",7115.6,7115.6,0,"NM","HDIS FILE/FIELD")

"^DD",7115.6,7115.6,0,"PT",7115.11,.01)

"^DD",7115.6,7115.6,0,"PT",7118.13,.01)

"^DD",7115.6,7115.6,0,"PT",7118.22,.02)

"^DD",7115.6,7115.6,0,"PT",7118.25,.02)

"^DD",7115.6,7115.6,.01,0)
FILE/FIELD NAME^RFI^^0;1^K:$L(X)>100!($L(X)<1)!'(X'?1P.E) X
"^DD",7115.6,7115.6,.01,1,0)
^.1
"^DD",7115.6,7115.6,.01,1,1,0)
7115.6^B
"^DD",7115.6,7115.6,.01,1,1,1)
S ^HDIS(7115.6,"B",$E(X,1,30),DA)=""
"^DD",7115.6,7115.6,.01,1,1,2)
K ^HDIS(7115.6,"B",$E(X,1,30),DA)
"^DD",7115.6,7115.6,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7115.6,7115.6,.01,1,1,"%D",1,0)
This cross-reference is by File/Field Name.
"^DD",7115.6,7115.6,.01,3)
Answer must be 1-100 characters in length.
"^DD",7115.6,7115.6,.01,21,0)
^^1^1^3041227^
"^DD",7115.6,7115.6,.01,21,1,0)
The File/Field Name associated with a VistA File/Field combination.
"^DD",7115.6,7115.6,.01,"DT")
3050407
"^DD",7115.6,7115.6,.02,0)
FILE NUMBER^RFI^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",7115.6,7115.6,.02,3)
Answer must be 1-30 characters in length.
"^DD",7115.6,7115.6,.02,21,0)
^.001^1^1^3041227^^
"^DD",7115.6,7115.6,.02,21,1,0)
The File Number assigned to the file in VistA.
"^DD",7115.6,7115.6,.02,"DT")
3050111
"^DD",7115.6,7115.6,.04,0)
FIELD NUMBER^RFI^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",7115.6,7115.6,.04,3)
Answer must be 1-30 characters in length.
"^DD",7115.6,7115.6,.04,21,0)
^.001^1^1^3050105^^^
"^DD",7115.6,7115.6,.04,21,1,0)
The Field Number assigned to the field in VistA.
"^DD",7115.6,7115.6,.04,23,0)
^.001^1^1^3050105^^^
"^DD",7115.6,7115.6,.04,23,1,0)
The Field Number is used if the Field level is needed for a file.
"^DD",7115.6,7115.6,.04,"DT")
3050112
"^DD",7118.11,7118.11,0)
FIELD^^1.02^6
"^DD",7118.11,7118.11,0,"DT")
3050120
"^DD",7118.11,7118.11,0,"IX","AVUID",7118.11,99.99)

"^DD",7118.11,7118.11,0,"IX","B",7118.11,.01)

"^DD",7118.11,7118.11,0,"NM","HDIS TERM/CONCEPT VUID ASSOCIATION")

"^DD",7118.11,7118.11,0,"PT",7118.22,.04)

"^DD",7118.11,7118.11,.01,0)
TERM/CONCEPT^RF^^0;1^K:$L(X)>245!($L(X)<1)!'(X'?1P.E) X
"^DD",7118.11,7118.11,.01,1,0)
^.1
"^DD",7118.11,7118.11,.01,1,1,0)
7118.11^B
"^DD",7118.11,7118.11,.01,1,1,1)
S ^HDISV(7118.11,"B",$E(X,1,30),DA)=""
"^DD",7118.11,7118.11,.01,1,1,2)
K ^HDISV(7118.11,"B",$E(X,1,30),DA)
"^DD",7118.11,7118.11,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7118.11,7118.11,.01,1,1,"%D",1,0)
This cross-reference is by Term/Concept.
"^DD",7118.11,7118.11,.01,3)
Answer must be 1-245 characters in length.
"^DD",7118.11,7118.11,.01,21,0)
^^2^2^3041227^
"^DD",7118.11,7118.11,.01,21,1,0)
A Term is any string.  A Concept is an abstract expression of a meaning.  A concept may have multiple
"^DD",7118.11,7118.11,.01,21,2,0)
expressions.  For instance, the concept of blood pressure can be expressed as hypertension or high blood pressure.
"^DD",7118.11,7118.11,.01,"DT")
3041227
"^DD",7118.11,7118.11,1.01,0)
DATE/TIME CREATED^D^^1;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",7118.11,7118.11,1.01,21,0)
^^3^3^3041227^
"^DD",7118.11,7118.11,1.01,21,1,0)
The date and timethe record is created by HDIS during VUID Implementation.
"^DD",7118.11,7118.11,1.01,21,2,0)
 
"^DD",7118.11,7118.11,1.01,21,3,0)
It will not be set if the VUID is assigned by Enterprise Reference Terminology (ERT).
"^DD",7118.11,7118.11,1.01,"DT")
3041227
"^DD",7118.11,7118.11,1.02,0)
NATIONAL STANDARD FLAG^RSI^1:YES;0:NO;^1;2^Q
"^DD",7118.11,7118.11,1.02,21,0)
^^1^1^3050120^
"^DD",7118.11,7118.11,1.02,21,1,0)
The Term/Concept is part of the national standard.
"^DD",7118.11,7118.11,1.02,"DT")
3050120
"^DD",7118.11,7118.11,10,0)
FILE/FIELD^7118.13PA^^FILE;0
"^DD",7118.11,7118.11,10,21,0)
^^1^1^3050113^
"^DD",7118.11,7118.11,10,21,1,0)
The File/Field associated with the record.
"^DD",7118.11,7118.11,99.99,0)
VUID^RFXI^^VUID;1^S X=+X K:$L(X)>20!($L(X)<1)!'(X?1.20N) X
"^DD",7118.11,7118.11,99.99,1,0)
^.1
"^DD",7118.11,7118.11,99.99,1,1,0)
7118.11^AVUID
"^DD",7118.11,7118.11,99.99,1,1,1)
S ^HDISV(7118.11,"AVUID",$E(X,1,30),DA)=""
"^DD",7118.11,7118.11,99.99,1,1,2)
K ^HDISV(7118.11,"AVUID",$E(X,1,30),DA)
"^DD",7118.11,7118.11,99.99,1,1,"%D",0)
^^1^1^3050111^
"^DD",7118.11,7118.11,99.99,1,1,"%D",1,0)
This cross-reference is by VUID.
"^DD",7118.11,7118.11,99.99,1,1,"DT")
3050111
"^DD",7118.11,7118.11,99.99,3)
Answer must be 1-20 characters in length.
"^DD",7118.11,7118.11,99.99,21,0)
^.001^1^1^3050210^^
"^DD",7118.11,7118.11,99.99,21,1,0)
VHA Unique ID (VUID).  A unique meaningless integer assigned to reference terms VHA wide.
"^DD",7118.11,7118.11,99.99,"DT")
3050210
"^DD",7118.11,7118.11,99.991,0)
EFFECTIVE DATE/TIME^7118.12DA^^TERMSTATUS;0
"^DD",7118.11,7118.11,99.991,21,0)
^^2^2^3050106^
"^DD",7118.11,7118.11,99.991,21,1,0)
Describes the pair Status and Effective Date/Time for each
"^DD",7118.11,7118.11,99.991,21,2,0)
reference term.
"^DD",7118.11,7118.12,0)
EFFECTIVE DATE/TIME SUB-FIELD^^.02^2
"^DD",7118.11,7118.12,0,"DT")
3050113
"^DD",7118.11,7118.12,0,"IX","B",7118.12,.01)

"^DD",7118.11,7118.12,0,"NM","EFFECTIVE DATE/TIME")

"^DD",7118.11,7118.12,0,"UP")
7118.11
"^DD",7118.11,7118.12,.01,0)
EFFECTIVE DATE/TIME^RDI^^0;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",7118.11,7118.12,.01,1,0)
^.1
"^DD",7118.11,7118.12,.01,1,1,0)
7118.12^B
"^DD",7118.11,7118.12,.01,1,1,1)
S ^HDISV(7118.11,DA(1),"TERMSTATUS","B",$E(X,1,30),DA)=""
"^DD",7118.11,7118.12,.01,1,1,2)
K ^HDISV(7118.11,DA(1),"TERMSTATUS","B",$E(X,1,30),DA)
"^DD",7118.11,7118.12,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7118.11,7118.12,.01,1,1,"%D",1,0)
This cross-reference is by Effective Date/Time.
"^DD",7118.11,7118.12,.01,21,0)
^.001^2^2^3050113^^^^
"^DD",7118.11,7118.12,.01,21,1,0)
This is the date/time when the Status of the reference term was
"^DD",7118.11,7118.12,.01,21,2,0)
established.
"^DD",7118.11,7118.12,.01,"DT")
3050113
"^DD",7118.11,7118.12,.02,0)
STATUS^RSI^1:ACTIVE;0:INACTIVE;^0;2^Q
"^DD",7118.11,7118.12,.02,21,0)
^^3^3^3041227^
"^DD",7118.11,7118.12,.02,21,1,0)
The Status of a reference term is either 'active' or 'inactive'.  If 'active', then the term will be
"^DD",7118.11,7118.12,.02,21,2,0)
accessible by end-users to document a particular patient event.  If 'inactive', then the term will only be
"^DD",7118.11,7118.12,.02,21,3,0)
accessible by the application to display legacy data.
"^DD",7118.11,7118.12,.02,"DT")
3041227
"^DD",7118.11,7118.13,0)
FILE/FIELD SUB-FIELD^^.01^1
"^DD",7118.11,7118.13,0,"DT")
3050113
"^DD",7118.11,7118.13,0,"IX","B",7118.13,.01)

"^DD",7118.11,7118.13,0,"NM","FILE/FIELD")

"^DD",7118.11,7118.13,0,"UP")
7118.11
"^DD",7118.11,7118.13,.01,0)
FILE/FIELD^P7115.6'^HDIS(7115.6,^0;1^Q
"^DD",7118.11,7118.13,.01,1,0)
^.1
"^DD",7118.11,7118.13,.01,1,1,0)
7118.13^B
"^DD",7118.11,7118.13,.01,1,1,1)
S ^HDISV(7118.11,DA(1),"FILE","B",$E(X,1,30),DA)=""
"^DD",7118.11,7118.13,.01,1,1,2)
K ^HDISV(7118.11,DA(1),"FILE","B",$E(X,1,30),DA)
"^DD",7118.11,7118.13,.01,1,1,"%D",0)
^^1^1^3050113^
"^DD",7118.11,7118.13,.01,1,1,"%D",1,0)
This cross-reference is by File/Field.
"^DD",7118.11,7118.13,.01,21,0)
^^1^1^3050113^
"^DD",7118.11,7118.13,.01,21,1,0)
The File/Field associated with the record.
"^DD",7118.11,7118.13,.01,"DT")
3050118
"^DD",7118.21,7118.21,0)
FIELD^^.03^3
"^DD",7118.21,7118.21,0,"DT")
3041227
"^DD",7118.21,7118.21,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",7118.21,7118.21,0,"IX","B",7118.21,.01)

"^DD",7118.21,7118.21,0,"NM","HDIS SYSTEM")

"^DD",7118.21,7118.21,0,"PT",7118.22,.01)

"^DD",7118.21,7118.21,0,"PT",7118.25,.01)

"^DD",7118.21,7118.21,.01,0)
FACILITY^RP4'^DIC(4,^0;1^Q
"^DD",7118.21,7118.21,.01,1,0)
^.1
"^DD",7118.21,7118.21,.01,1,1,0)
7118.21^B
"^DD",7118.21,7118.21,.01,1,1,1)
S ^HDISF(7118.21,"B",$E(X,1,30),DA)=""
"^DD",7118.21,7118.21,.01,1,1,2)
K ^HDISF(7118.21,"B",$E(X,1,30),DA)
"^DD",7118.21,7118.21,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7118.21,7118.21,.01,1,1,"%D",1,0)
This cross-reference is by Facility.
"^DD",7118.21,7118.21,.01,3)

"^DD",7118.21,7118.21,.01,21,0)
^^1^1^3041227^
"^DD",7118.21,7118.21,.01,21,1,0)
The VA Medical Center (VAMC) associated with the system.
"^DD",7118.21,7118.21,.01,"DT")
3050124
"^DD",7118.21,7118.21,.02,0)
DOMAIN/IP ADDRESS^RF^^0;2^K:$L(X)>70!($L(X)<1) X
"^DD",7118.21,7118.21,.02,3)
Answer must be 1-70 characters in length.
"^DD",7118.21,7118.21,.02,21,0)
^^1^1^3041227^
"^DD",7118.21,7118.21,.02,21,1,0)
The Domain/IP Address associated with the system.
"^DD",7118.21,7118.21,.02,"DT")
3050114
"^DD",7118.21,7118.21,.03,0)
TYPE^RS^0:TEST;1:PRODUCTION;^0;3^Q
"^DD",7118.21,7118.21,.03,21,0)
^.001^1^1^3041227^^
"^DD",7118.21,7118.21,.03,21,1,0)
The Type of system.
"^DD",7118.21,7118.21,.03,"DT")
3050124
"^DD",7118.22,7118.22,0)
FIELD^^.05^5
"^DD",7118.22,7118.22,0,"DT")
3041227
"^DD",7118.22,7118.22,0,"IX","B",7118.22,.01)

"^DD",7118.22,7118.22,0,"NM","HDIS FACILITY TERM/CONCEPT ASSOCIATION")

"^DD",7118.22,7118.22,.01,0)
SYSTEM^RP7118.21'^HDISF(7118.21,^0;1^Q
"^DD",7118.22,7118.22,.01,1,0)
^.1
"^DD",7118.22,7118.22,.01,1,1,0)
7118.22^B
"^DD",7118.22,7118.22,.01,1,1,1)
S ^HDISF(7118.22,"B",$E(X,1,30),DA)=""
"^DD",7118.22,7118.22,.01,1,1,2)
K ^HDISF(7118.22,"B",$E(X,1,30),DA)
"^DD",7118.22,7118.22,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7118.22,7118.22,.01,1,1,"%D",1,0)
This cross-reference is by System.
"^DD",7118.22,7118.22,.01,3)

"^DD",7118.22,7118.22,.01,21,0)
^^1^1^3041227^
"^DD",7118.22,7118.22,.01,21,1,0)
The system that sent the record.
"^DD",7118.22,7118.22,.01,"DT")
3050119
"^DD",7118.22,7118.22,.02,0)
FILE/FIELD^RP7115.6'I^HDIS(7115.6,^0;2^Q
"^DD",7118.22,7118.22,.02,21,0)
^^1^1^3041227^
"^DD",7118.22,7118.22,.02,21,1,0)
The File/Field associated with the record.
"^DD",7118.22,7118.22,.02,"DT")
3050119
"^DD",7118.22,7118.22,.03,0)
INTERNAL REFERENCE^RFI^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",7118.22,7118.22,.03,3)
Answer must be 1-50 characters in length.
"^DD",7118.22,7118.22,.03,21,0)
^^2^2^3041227^
"^DD",7118.22,7118.22,.03,21,1,0)
The Internal Reference at the VAMC tht sent the record.  Could be an Internal Entry Numbers (IENS) or
"^DD",7118.22,7118.22,.03,21,2,0)
the internal value for a set of codes.
"^DD",7118.22,7118.22,.03,"DT")
3050119
"^DD",7118.22,7118.22,.04,0)
TERM/CONCEPT^RP7118.11'I^HDISV(7118.11,^0;4^Q
"^DD",7118.22,7118.22,.04,21,0)
^^2^2^3041227^
"^DD",7118.22,7118.22,.04,21,1,0)
A Term is any string.  A Concept is an abstract expression of a meaning.  A concept may have multiple
"^DD",7118.22,7118.22,.04,21,2,0)
expressions.  For instance, the concept of blood pressure can be expressed as hypertension or high blood pressure.
"^DD",7118.22,7118.22,.04,"DT")
3050119
"^DD",7118.22,7118.22,.05,0)
DATE/TIME ASSOCIATED^RDI^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",7118.22,7118.22,.05,.1)
DATE/TIME TERM/CONCEPT ASSOCIATED
"^DD",7118.22,7118.22,.05,21,0)
^^1^1^3041227^
"^DD",7118.22,7118.22,.05,21,1,0)
The date and time the record is assigned to the Term/Concept.
"^DD",7118.22,7118.22,.05,"DT")
3041227
"^DD",7118.25,7118.25,0)
FIELD^^.04^4
"^DD",7118.25,7118.25,0,"DDA")
N
"^DD",7118.25,7118.25,0,"DT")
3050110
"^DD",7118.25,7118.25,0,"IX","B",7118.25,.01)

"^DD",7118.25,7118.25,0,"NM","HDIS VUID IMPLEMENTATION STATUS")

"^DD",7118.25,7118.25,.01,0)
SYSTEM^RP7118.21'^HDISF(7118.21,^0;1^Q
"^DD",7118.25,7118.25,.01,1,0)
^.1
"^DD",7118.25,7118.25,.01,1,1,0)
7118.25^B
"^DD",7118.25,7118.25,.01,1,1,1)
S ^HDISF(7118.25,"B",$E(X,1,30),DA)=""
"^DD",7118.25,7118.25,.01,1,1,2)
K ^HDISF(7118.25,"B",$E(X,1,30),DA)
"^DD",7118.25,7118.25,.01,1,1,"%D",0)
^^1^1^3041227^
"^DD",7118.25,7118.25,.01,1,1,"%D",1,0)
The cross-reference is by Facility.
"^DD",7118.25,7118.25,.01,3)
Select the system this status data is for
"^DD",7118.25,7118.25,.01,21,0)
^^1^1^3050110^
"^DD",7118.25,7118.25,.01,21,1,0)
The VAMC system being processed.
"^DD",7118.25,7118.25,.01,"DT")
3050110
"^DD",7118.25,7118.25,.02,0)
FILE/FIELD^RP7115.6'I^HDIS(7115.6,^0;2^Q
"^DD",7118.25,7118.25,.02,21,0)
^^1^1^3041227^
"^DD",7118.25,7118.25,.02,21,1,0)
The File/Field associated with the record.
"^DD",7118.25,7118.25,.02,"DT")
3050105
"^DD",7118.25,7118.25,.03,0)
STATUS^RP7115.5'I^HDIS(7115.5,^0;3^Q
"^DD",7118.25,7118.25,.03,21,0)
^^1^1^3041227^
"^DD",7118.25,7118.25,.03,21,1,0)
This indicates the status of the VUID implementation process for the facility, domain and file/field.
"^DD",7118.25,7118.25,.03,"DT")
3050105
"^DD",7118.25,7118.25,.04,0)
STATUS DATE/TIME^RDI^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",7118.25,7118.25,.04,21,0)
^^1^1^3041227^
"^DD",7118.25,7118.25,.04,21,1,0)
The Date/Time that this status was entered.
"^DD",7118.25,7118.25,.04,"DT")
3050105
"^DD",7118.29,7118.29,0)
FIELD^^52^12
"^DD",7118.29,7118.29,0,"DDA")
N
"^DD",7118.29,7118.29,0,"DT")
3050314
"^DD",7118.29,7118.29,0,"IX","B",7118.29,.01)

"^DD",7118.29,7118.29,0,"NM","HDIS PARAMETER")

"^DD",7118.29,7118.29,.01,0)
SYSTEM^RP7118.21'^HDISF(7118.21,^0;1^Q
"^DD",7118.29,7118.29,.01,1,0)
^.1
"^DD",7118.29,7118.29,.01,1,1,0)
7118.29^B
"^DD",7118.29,7118.29,.01,1,1,1)
S ^HDISF(7118.29,"B",$E(X,1,30),DA)=""
"^DD",7118.29,7118.29,.01,1,1,2)
K ^HDISF(7118.29,"B",$E(X,1,30),DA)
"^DD",7118.29,7118.29,.01,3)
Enter your facility number
"^DD",7118.29,7118.29,.01,21,0)
^^1^1^3050110^
"^DD",7118.29,7118.29,.01,21,1,0)
The VAMC system that the parameter values are for
"^DD",7118.29,7118.29,.01,"DT")
3050110
"^DD",7118.29,7118.29,.02,0)
SYSTEM TYPE^SI^1:CLIENT;2:SERVER;^0;2^Q
"^DD",7118.29,7118.29,.02,3)
Enter type of HDIS system this location is
"^DD",7118.29,7118.29,.02,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,.02,21,1,0)
Denotes type of system
"^DD",7118.29,7118.29,.02,"DT")
3050322
"^DD",7118.29,7118.29,11,0)
DISABLE VUID ACTIVITY^S^0:NO;1:YES;^1;1^Q
"^DD",7118.29,7118.29,11,3)
Enter 'YES' to disable all VUID activity, else enter 'NO'
"^DD",7118.29,7118.29,11,21,0)
^^1^1^3050314^^
"^DD",7118.29,7118.29,11,21,1,0)
Flag denoting if all VUID related activity should be disabled
"^DD",7118.29,7118.29,11,"DT")
3050314
"^DD",7118.29,7118.29,12,0)
VUID SERVER LOCATION^F^^1;2^K:$L(X)>100!($L(X)<1) X
"^DD",7118.29,7118.29,12,3)
Enter the location of the VUID Server
"^DD",7118.29,7118.29,12,21,0)
^^2^2^3041220^
"^DD",7118.29,7118.29,12,21,1,0)
Where the VUID Server is located.  This could be a MailMan domain (ex: 
"^DD",7118.29,7118.29,12,21,2,0)
FORUM.VA.GOV) or a TCP/IP address (ex: 127.0.0.1).
"^DD",7118.29,7118.29,12,"DT")
3041220
"^DD",7118.29,7118.29,13,0)
VUID SERVER CONNECTION TYPE^S^1:MAILMAN;^1;3^Q
"^DD",7118.29,7118.29,13,3)
Select the type of connection to use when communicating with the VUID Server
"^DD",7118.29,7118.29,13,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,13,21,1,0)
Type of connection to use when communicating with the VUID Server
"^DD",7118.29,7118.29,13,"DT")
3041220
"^DD",7118.29,7118.29,21,0)
VUID SERVER OPTION^F^^2;1^K:$L(X)>30!($L(X)<1) X
"^DD",7118.29,7118.29,21,3)
Enter the MailMan server option name for the VUID Server
"^DD",7118.29,7118.29,21,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,21,21,1,0)
Name of MailMan server type option that message should be forwarded to
"^DD",7118.29,7118.29,21,"DT")
3041220
"^DD",7118.29,7118.29,31,0)
DISABLE STATUS UPDATES^S^0:NO;1:YES;^3;1^Q
"^DD",7118.29,7118.29,31,3)
Enter 'YES' to stop sending status updates to the Status Server
"^DD",7118.29,7118.29,31,21,0)
^^2^2^3041220^
"^DD",7118.29,7118.29,31,21,1,0)
Flag denoting if sending of status update messages to the Status Server 
"^DD",7118.29,7118.29,31,21,2,0)
should be disabled
"^DD",7118.29,7118.29,31,"DT")
3041220
"^DD",7118.29,7118.29,32,0)
STATUS SERVER LOCATION^F^^3;2^K:$L(X)>100!($L(X)<1) X
"^DD",7118.29,7118.29,32,3)
Enter the location of the Status Server
"^DD",7118.29,7118.29,32,21,0)
^^2^2^3041220^
"^DD",7118.29,7118.29,32,21,1,0)
Where the Status Server is located.  This could be a MailMan domain (ex: 
"^DD",7118.29,7118.29,32,21,2,0)
FORUM.VA.GOV) or a TCP/IP address (ex: 127.0.0.1).
"^DD",7118.29,7118.29,32,"DT")
3041220
"^DD",7118.29,7118.29,33,0)
STATUS SERVER CONNECTION TYPE^S^1:MAILMAN;^3;3^Q
"^DD",7118.29,7118.29,33,3)
Enter the type of connection to use when communicating with the Status Server
"^DD",7118.29,7118.29,33,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,33,21,1,0)
Type of connection to use when communicating with the Status Server
"^DD",7118.29,7118.29,33,"DT")
3041220
"^DD",7118.29,7118.29,41,0)
STATUS SERVER OPTION^F^^4;1^K:$L(X)>30!($L(X)<1) X
"^DD",7118.29,7118.29,41,3)
Enter MailMan server option for Status Server
"^DD",7118.29,7118.29,41,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,41,21,1,0)
Name of MailMan server type option that message should be forwarded to
"^DD",7118.29,7118.29,41,"DT")
3041220
"^DD",7118.29,7118.29,51,0)
LAST NON-STANDARD VUID^F^^5;1^K:$L(X)>18!($L(X)<1) X
"^DD",7118.29,7118.29,51,3)
Enter last non-standard VUID assigned by server
"^DD",7118.29,7118.29,51,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,51,21,1,0)
Last non-standard VUID assigned by centralized VUID Server
"^DD",7118.29,7118.29,51,"DT")
3041220
"^DD",7118.29,7118.29,52,0)
ENDING NON-STANDARD VUID^F^^5;2^K:$L(X)>18!($L(X)<1) X
"^DD",7118.29,7118.29,52,3)
Enter last non-standard VUID that can be assigned by server
"^DD",7118.29,7118.29,52,21,0)
^^1^1^3041220^
"^DD",7118.29,7118.29,52,21,1,0)
Last non-standard VUID that can be assigned by centralized VUID Server
"^DD",7118.29,7118.29,52,"DT")
3041220
"^DIC",7115.1,7115.1,0)
HDIS DOMAIN^7115.1
"^DIC",7115.1,7115.1,0,"GL")
^HDIS(7115.1,
"^DIC",7115.1,7115.1,"%D",0)
^1.001^5^5^3050310^^^^
"^DIC",7115.1,7115.1,"%D",1,0)
This file contains the Domains, which are a subset of medicine, a natural 
"^DIC",7115.1,7115.1,"%D",2,0)
grouping of clinical acts (e.g., demographics,  vital signs, laboratory,
"^DIC",7115.1,7115.1,"%D",3,0)
pharmacy) and the VistA File/Fields associated with the Domain.
"^DIC",7115.1,7115.1,"%D",4,0)
 
"^DIC",7115.1,7115.1,"%D",5,0)
This file is used on the Central Server and Facility for VUID Implementation.
"^DIC",7115.1,"B","HDIS DOMAIN",7115.1)

"^DIC",7115.3,7115.3,0)
HDIS XML TEMPLATE^7115.3
"^DIC",7115.3,7115.3,0,"GL")
^HDIS(7115.3,
"^DIC",7115.3,7115.3,"%",0)
^1.005^^0
"^DIC",7115.3,7115.3,"%D",0)
^^3^3^3050310^
"^DIC",7115.3,7115.3,"%D",1,0)
This file contains the schema for XML documents.  It maintains every
"^DIC",7115.3,7115.3,"%D",2,0)
XML element, it's sequence and whether the element has sub-elements
"^DIC",7115.3,7115.3,"%D",3,0)
and whether the element is a multiple.
"^DIC",7115.3,"B","HDIS XML TEMPLATE",7115.3)

"^DIC",7115.5,7115.5,0)
HDIS STATUS^7115.5
"^DIC",7115.5,7115.5,0,"GL")
^HDIS(7115.5,
"^DIC",7115.5,7115.5,"%D",0)
^1.001^4^4^3050105^^^^
"^DIC",7115.5,7115.5,"%D",1,0)
This file contains the different status codes used by Data Standardization
"^DIC",7115.5,7115.5,"%D",2,0)
processes.
"^DIC",7115.5,7115.5,"%D",3,0)
 
"^DIC",7115.5,7115.5,"%D",4,0)
This file is used on the Central Server and Facility for VUID Implementation.
"^DIC",7115.5,"B","HDIS STATUS",7115.5)

"^DIC",7115.6,7115.6,0)
HDIS FILE/FIELD^7115.6
"^DIC",7115.6,7115.6,0,"GL")
^HDIS(7115.6,
"^DIC",7115.6,7115.6,"%D",0)
^1.001^3^3^3050105^^^^
"^DIC",7115.6,7115.6,"%D",1,0)
This file contains the File/Fields in VistA.
"^DIC",7115.6,7115.6,"%D",2,0)
 
"^DIC",7115.6,7115.6,"%D",3,0)
This file is used on the Central Server and Facility for VUID Implementation
"^DIC",7115.6,"B","HDIS FILE/FIELD",7115.6)

"^DIC",7118.11,7118.11,0)
HDIS TERM/CONCEPT VUID ASSOCIATION^7118.11
"^DIC",7118.11,7118.11,0,"GL")
^HDISV(7118.11,
"^DIC",7118.11,7118.11,"%D",0)
^1.001^5^5^3050105^^
"^DIC",7118.11,7118.11,"%D",1,0)
This file contains the association of a Term/Concept
"^DIC",7118.11,7118.11,"%D",2,0)
and its VUID and Activation Status as defined by
"^DIC",7118.11,7118.11,"%D",3,0)
Enterprise Reference Terminology (ERT).
"^DIC",7118.11,7118.11,"%D",4,0)
 
"^DIC",7118.11,7118.11,"%D",5,0)
This file is used on the Central Server for VUID Implementation.
"^DIC",7118.11,"B","HDIS TERM/CONCEPT VUID ASSOCIATION",7118.11)

"^DIC",7118.21,7118.21,0)
HDIS SYSTEM^7118.21
"^DIC",7118.21,7118.21,0,"GL")
^HDISF(7118.21,
"^DIC",7118.21,7118.21,"%D",0)
^1.001^3^3^3041227^^
"^DIC",7118.21,7118.21,"%D",1,0)
This file contains the system related information for a facility.
"^DIC",7118.21,7118.21,"%D",2,0)
 
"^DIC",7118.21,7118.21,"%D",3,0)
This file is used on the Central Server for VUID Implementation.
"^DIC",7118.21,"B","HDIS SYSTEM",7118.21)

"^DIC",7118.22,7118.22,0)
HDIS FACILITY TERM/CONCEPT ASSOCIATION^7118.22
"^DIC",7118.22,7118.22,0,"GL")
^HDISF(7118.22,
"^DIC",7118.22,7118.22,"%D",0)
^1.001^5^5^3041227^^
"^DIC",7118.22,7118.22,"%D",1,0)
This file contains the Term/Concept assigned to a VistA File/Field Internal
"^DIC",7118.22,7118.22,"%D",2,0)
Entry Number (IEN) at a Facility (VAMC) by the Data Standardization VUID
"^DIC",7118.22,7118.22,"%D",3,0)
Implementation Process.
"^DIC",7118.22,7118.22,"%D",4,0)
 
"^DIC",7118.22,7118.22,"%D",5,0)
This file is used on the Central Server for VUID Implementation.
"^DIC",7118.22,"B","HDIS FACILITY TERM/CONCEPT ASSOCIATION",7118.22)

"^DIC",7118.25,7118.25,0)
HDIS VUID IMPLEMENTATION STATUS^7118.25
"^DIC",7118.25,7118.25,0,"GL")
^HDISF(7118.25,
"^DIC",7118.25,7118.25,"%D",0)
^1.001^4^4^3041227^^^
"^DIC",7118.25,7118.25,"%D",1,0)
This file contains the Status of the VUID Implementation Process for a VistA
"^DIC",7118.25,7118.25,"%D",2,0)
File/Field at a Facility (VAMC).
"^DIC",7118.25,7118.25,"%D",3,0)
 
"^DIC",7118.25,7118.25,"%D",4,0)
This file is used on the Central Server and Facility for VUID Implementation.
"^DIC",7118.25,"B","HDIS VUID IMPLEMENTATION STATUS",7118.25)

"^DIC",7118.29,7118.29,0)
HDIS PARAMETER^7118.29
"^DIC",7118.29,7118.29,0,"GL")
^HDISF(7118.29,
"^DIC",7118.29,7118.29,"%",0)
^1.005^^
"^DIC",7118.29,7118.29,"%D",0)
^^6^6^3050322^
"^DIC",7118.29,7118.29,"%D",1,0)
This file contains system specific data.  On the central server(s) this 
"^DIC",7118.29,7118.29,"%D",2,0)
file contains data specific to the systems communicating to it/them and 
"^DIC",7118.29,7118.29,"%D",3,0)
variable information required when processing facility data.  On VistA
"^DIC",7118.29,7118.29,"%D",4,0)
systems this file contains data specific to the facility, such as the
"^DIC",7118.29,7118.29,"%D",5,0)
location(s) of the central server(s).  The local system is typically the
"^DIC",7118.29,7118.29,"%D",6,0)
first entry in the file but there is no requirement for this to be true.
"^DIC",7118.29,"B","HDIS PARAMETER",7118.29)

**END**
**END**
