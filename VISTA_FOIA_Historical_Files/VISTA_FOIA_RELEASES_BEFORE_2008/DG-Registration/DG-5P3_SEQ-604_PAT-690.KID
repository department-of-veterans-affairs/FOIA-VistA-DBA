Released DG*5.3*690 SEQ #604
Extracted from mail message
**KIDS**:DG*5.3*690^

**INSTALL NAME**
DG*5.3*690
"BLD",5680,0)
DG*5.3*690^REGISTRATION^0^3060306^y
"BLD",5680,1,0)
^^5^5^3051129^^^^
"BLD",5680,1,1,0)
Add cross-references to support OEF/OIF data extraction; see the
"BLD",5680,1,2,0)
National Patch Module for a complete description.
"BLD",5680,1,3,0)

"BLD",5680,1,4,0)

"BLD",5680,1,5,0)

"BLD",5680,4,0)
^9.64PA^^
"BLD",5680,"ABPKG")
n
"BLD",5680,"INIT")
POST^DG53690I
"BLD",5680,"KRN",0)
^9.67PA^8989.52^19
"BLD",5680,"KRN",.4,0)
.4
"BLD",5680,"KRN",.401,0)
.401
"BLD",5680,"KRN",.402,0)
.402
"BLD",5680,"KRN",.403,0)
.403
"BLD",5680,"KRN",.5,0)
.5
"BLD",5680,"KRN",.84,0)
.84
"BLD",5680,"KRN",3.6,0)
3.6
"BLD",5680,"KRN",3.8,0)
3.8
"BLD",5680,"KRN",9.2,0)
9.2
"BLD",5680,"KRN",9.8,0)
9.8
"BLD",5680,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",5680,"KRN",9.8,"NM",1,0)
DG53690I^^0^B18353842
"BLD",5680,"KRN",9.8,"NM",2,0)
DGSRVICE^^0^B22073599
"BLD",5680,"KRN",9.8,"NM","B","DG53690I",1)

"BLD",5680,"KRN",9.8,"NM","B","DGSRVICE",2)

"BLD",5680,"KRN",19,0)
19
"BLD",5680,"KRN",19.1,0)
19.1
"BLD",5680,"KRN",101,0)
101
"BLD",5680,"KRN",409.61,0)
409.61
"BLD",5680,"KRN",771,0)
771
"BLD",5680,"KRN",870,0)
870
"BLD",5680,"KRN",8989.51,0)
8989.51
"BLD",5680,"KRN",8989.52,0)
8989.52
"BLD",5680,"KRN",8994,0)
8994
"BLD",5680,"KRN","B",.4,.4)

"BLD",5680,"KRN","B",.401,.401)

"BLD",5680,"KRN","B",.402,.402)

"BLD",5680,"KRN","B",.403,.403)

"BLD",5680,"KRN","B",.5,.5)

"BLD",5680,"KRN","B",.84,.84)

"BLD",5680,"KRN","B",3.6,3.6)

"BLD",5680,"KRN","B",3.8,3.8)

"BLD",5680,"KRN","B",9.2,9.2)

"BLD",5680,"KRN","B",9.8,9.8)

"BLD",5680,"KRN","B",19,19)

"BLD",5680,"KRN","B",19.1,19.1)

"BLD",5680,"KRN","B",101,101)

"BLD",5680,"KRN","B",409.61,409.61)

"BLD",5680,"KRN","B",771,771)

"BLD",5680,"KRN","B",870,870)

"BLD",5680,"KRN","B",8989.51,8989.51)

"BLD",5680,"KRN","B",8989.52,8989.52)

"BLD",5680,"KRN","B",8994,8994)

"BLD",5680,"QUES",0)
^9.62^^
"BLD",5680,"REQB",0)
^9.611^1^1
"BLD",5680,"REQB",1,0)
DI*22.0*146^2
"BLD",5680,"REQB","B","DI*22.0*146",1)

"INIT")
POST^DG53690I
"MBREQ")
0
"PKG",6,-1)
1^1
"PKG",6,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",6,20,0)
^9.402P^^
"PKG",6,22,0)
^9.49I^1^1
"PKG",6,22,1,0)
5.3^2930813^2931021
"PKG",6,22,1,"PAH",1,0)
690^3060306
"PKG",6,22,1,"PAH",1,1,0)
^^5^5^3060306
"PKG",6,22,1,"PAH",1,1,1,0)
Add cross-references to support OEF/OIF data extraction; see the
"PKG",6,22,1,"PAH",1,1,2,0)
National Patch Module for a complete description.
"PKG",6,22,1,"PAH",1,1,3,0)

"PKG",6,22,1,"PAH",1,1,4,0)

"PKG",6,22,1,"PAH",1,1,5,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","DG53690I")
0^1^B18353842
"RTN","DG53690I",1,0)
DG53690I ;SLC/PKR - Init for patch 690. ;02/17/2006
"RTN","DG53690I",2,0)
 ;;5.3;Registration;**690**;Aug 13, 1993
"RTN","DG53690I",3,0)
 ;===============================================================
"RTN","DG53690I",4,0)
CXREFS ;Create the cross-references.
"RTN","DG53690I",5,0)
 N DGRESULT,DGXREF,MSG,TEXT
"RTN","DG53690I",6,0)
 S TEXT=$$FMTE^XLFDT($$NOW^XLFDT,"5Z")_" Creating cross-references."
"RTN","DG53690I",7,0)
 D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",8,0)
 ;Parameters common to all the service cross-references.
"RTN","DG53690I",9,0)
 S DGXREF("FILE")=2,DGXREF("TYPE")="MUMPS",DGXREF("ROOT FILE")=2
"RTN","DG53690I",10,0)
 S DGXREF("USE")="ACTION",DGXREF("EXECUTION")="RECORD",DGXREF("ACTIVITY")="R"
"RTN","DG53690I",11,0)
 ;Cross-reference for LAST
"RTN","DG53690I",12,0)
 S DGXREF("NAME")="ASERLAST"
"RTN","DG53690I",13,0)
 S DGXREF("SHORT DESCR")="Index LAST ENTRY and SEPARATION dates"
"RTN","DG53690I",14,0)
 S DGXREF("DESCR",1)="This cross-reference indexes the LAST ENTRY and SEPARATION dates."
"RTN","DG53690I",15,0)
 S DGXREF("DESCR",2)="The form of the index is:"
"RTN","DG53690I",16,0)
 S DGXREF("DESCR",3)="  ^DPT(""ASERVICE"",SEPARATION DATE,ENTRY DATE,DA,""LAST"")"
"RTN","DG53690I",17,0)
 S DGXREF("DESCR",4)=""
"RTN","DG53690I",18,0)
 S DGXREF("DESCR",5)="If one of the dates is missing the corresponding subscript is replaced by U_DA."
"RTN","DG53690I",19,0)
 S DGXREF("SET")="D SSERV^DGSRVICE(.X,.DA,""LAST"")"
"RTN","DG53690I",20,0)
 S DGXREF("KILL")="D KSERV^DGSRVICE(.X,.DA,""LAST"")"
"RTN","DG53690I",21,0)
 S DGXREF("WHOLE KILL")="K ^DPT(""ASERVICE"")"
"RTN","DG53690I",22,0)
 S DGXREF("VAL",1)=.326
"RTN","DG53690I",23,0)
 S DGXREF("VAL",2)=.327
"RTN","DG53690I",24,0)
 D CREIXN^DDMOD(.DGXREF,"S",.DGRESULT,"","MSG")
"RTN","DG53690I",25,0)
 I DGRESULT="" D
"RTN","DG53690I",26,0)
 . S TEXT="Could not create ASERLAST cross-reference"
"RTN","DG53690I",27,0)
 . D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",28,0)
 ;Cross-reference for NTL.
"RTN","DG53690I",29,0)
 K DGRESULT,MSG
"RTN","DG53690I",30,0)
 S DGXREF("NAME")="ASERNTL"
"RTN","DG53690I",31,0)
 S DGXREF("SHORT DESCR")="Index NTL ENTRY and SEPARATION dates"
"RTN","DG53690I",32,0)
 S DGXREF("DESCR",1)="This cross-reference indexes the NTL ENTRY and SEPARATION dates."
"RTN","DG53690I",33,0)
 S DGXREF("DESCR",2)="The form of the index is:"
"RTN","DG53690I",34,0)
 S DGXREF("DESCR",3)="  ^DPT(""ASERVICE"",SEPARATION DATE,ENTRY DATE,DA,""NTL"")"
"RTN","DG53690I",35,0)
 S DGXREF("DESCR",4)=""
"RTN","DG53690I",36,0)
 S DGXREF("DESCR",5)="If one of the dates is missing the corresponding subscript is replaced by U_DA."
"RTN","DG53690I",37,0)
 S DGXREF("SET")="D SSERV^DGSRVICE(.X,.DA,""NTL"")"
"RTN","DG53690I",38,0)
 S DGXREF("KILL")="D KSERV^DGSRVICE(.X,.DA,""NTL"")"
"RTN","DG53690I",39,0)
 S DGXREF("WHOLE KILL")="K ^DPT(""ASERVICE"")"
"RTN","DG53690I",40,0)
 S DGXREF("VAL",1)=.3292
"RTN","DG53690I",41,0)
 S DGXREF("VAL",2)=.3293
"RTN","DG53690I",42,0)
 D CREIXN^DDMOD(.DGXREF,"S",.DGRESULT,"","MSG")
"RTN","DG53690I",43,0)
 I DGRESULT="" D
"RTN","DG53690I",44,0)
 . S TEXT="Could not create ASERNTL cross-reference"
"RTN","DG53690I",45,0)
 . D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",46,0)
 ;Cross-reference for NNTL.
"RTN","DG53690I",47,0)
 K DGRESULT,MSG
"RTN","DG53690I",48,0)
 S DGXREF("NAME")="ASERNNTL"
"RTN","DG53690I",49,0)
 S DGXREF("SHORT DESCR")="Index NNTL ENTRY and SEPARATION dates"
"RTN","DG53690I",50,0)
 S DGXREF("DESCR",1)="This cross-reference indexes the NNTL ENTRY and SEPARATION dates."
"RTN","DG53690I",51,0)
 S DGXREF("DESCR",2)="The form of the index is:"
"RTN","DG53690I",52,0)
 S DGXREF("DESCR",3)="  ^DPT(""ASERVICE"",SEPARATION DATE,ENTRY DATE,DA,""NNTL"")"
"RTN","DG53690I",53,0)
 S DGXREF("DESCR",4)=""
"RTN","DG53690I",54,0)
 S DGXREF("DESCR",5)="If one of the dates is missing the corresponding subscript is replaced by U_DA."
"RTN","DG53690I",55,0)
 S DGXREF("SET")="D SSERV^DGSRVICE(.X,.DA,""NNTL"")"
"RTN","DG53690I",56,0)
 S DGXREF("KILL")="D KSERV^DGSRVICE(.X,.DA,""NNTL"")"
"RTN","DG53690I",57,0)
 S DGXREF("WHOLE KILL")="K ^DPT(""ASERVICE"")"
"RTN","DG53690I",58,0)
 S DGXREF("VAL",1)=.3297
"RTN","DG53690I",59,0)
 S DGXREF("VAL",2)=.3298
"RTN","DG53690I",60,0)
 D CREIXN^DDMOD(.DGXREF,"S",.DGRESULT,"","MSG")
"RTN","DG53690I",61,0)
 I DGRESULT="" D
"RTN","DG53690I",62,0)
 . S TEXT="Could not create ASERNNTL cross-reference"
"RTN","DG53690I",63,0)
 . D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",64,0)
 ;Cross-reference TYPE OF PATIENT
"RTN","DG53690I",65,0)
 ;For test sites
"RTN","DG53690I",66,0)
 D DELIXN^DDMOD(2,"PTYPE","K","","MSG")
"RTN","DG53690I",67,0)
 K ^DPT("PTYPE")
"RTN","DG53690I",68,0)
 K DGRESULT,DGXREF,MSG
"RTN","DG53690I",69,0)
 S DGXREF("FILE")=2,DGXREF("TYPE")="R",DGXREF("ROOT FILE")=2
"RTN","DG53690I",70,0)
 S DGXREF("USE")="S",DGXREF("EXECUTION")="FIELD",DGXREF("ACTIVITY")="R"
"RTN","DG53690I",71,0)
 S DGXREF("NAME")="APTYPE"
"RTN","DG53690I",72,0)
 S DGXREF("SHORT DESCR")="Index TYPE OF PATIENT"
"RTN","DG53690I",73,0)
 S DGXREF("SET")="S ^DPT(""APTYPE"",X,DA)="""""
"RTN","DG53690I",74,0)
 S DGXREF("KILL")="K ^DPT(""APTYPE"",X,DA)"
"RTN","DG53690I",75,0)
 S DGXREF("WHOLE KILL")="K ^DPT(""APTYPE"")"
"RTN","DG53690I",76,0)
 S DGXREF("VAL",1)=391
"RTN","DG53690I",77,0)
 S DGXREF("VAL",1,"SUBSCRIPT")=1
"RTN","DG53690I",78,0)
 D CREIXN^DDMOD(.DGXREF,"S",.DGRESULT,"","MSG")
"RTN","DG53690I",79,0)
 I DGRESULT="" D
"RTN","DG53690I",80,0)
 . S TEXT="Could not create TYPE cross-reference"
"RTN","DG53690I",81,0)
 . D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",82,0)
 S TEXT=$$FMTE^XLFDT($$NOW^XLFDT,"5Z")_" Cross-references have been created and indexes populated."
"RTN","DG53690I",83,0)
 D BMES^XPDUTL(.TEXT)
"RTN","DG53690I",84,0)
 Q
"RTN","DG53690I",85,0)
 ;
"RTN","DG53690I",86,0)
 ;===============================================================
"RTN","DG53690I",87,0)
DXREFS ;Delete the cross-references.
"RTN","DG53690I",88,0)
 N MSG
"RTN","DG53690I",89,0)
 D DELIXN^DDMOD(2,"ASERLAST","K","","MSG")
"RTN","DG53690I",90,0)
 D DELIXN^DDMOD(2,"ASERNTL","K","","MSG")
"RTN","DG53690I",91,0)
 D DELIXN^DDMOD(2,"ASERNNTL","K","","MSG")
"RTN","DG53690I",92,0)
 D DELIXN^DDMOD(2,"APTYPE","K","","MSG")
"RTN","DG53690I",93,0)
 Q
"RTN","DG53690I",94,0)
 ;
"RTN","DG53690I",95,0)
 ;===============================================================
"RTN","DG53690I",96,0)
POST ;Post-inits
"RTN","DG53690I",97,0)
 D CXREFS^DG53690I
"RTN","DG53690I",98,0)
 Q
"RTN","DG53690I",99,0)
 ;
"RTN","DGSRVICE")
0^2^B22073599
"RTN","DGSRVICE",1,0)
DGSRVICE ;SLC/PKR - Routines for setting service indexes. ;01/13/2006
"RTN","DGSRVICE",2,0)
 ;;5.3;Registration;**690**;Aug 13, 1993
"RTN","DGSRVICE",3,0)
 ;===============================================================
"RTN","DGSRVICE",4,0)
CSERVDI(DFN,EDATE,SEPDATE,TYPE) ;
"RTN","DGSRVICE",5,0)
 I EDATE="",SEPDATE="" Q
"RTN","DGSRVICE",6,0)
 I EDATE="" S EDATE="U"_DFN
"RTN","DGSRVICE",7,0)
 I SEPDATE="" S SEPDATE="U"_DFN
"RTN","DGSRVICE",8,0)
 I '$D(^DPT("ASERVICE",SEPDATE,EDATE,DFN,TYPE)) S ^TMP($J,"ASERVICE",DFN,TYPE)=EDATE_U_SEPDATE
"RTN","DGSRVICE",9,0)
 Q
"RTN","DGSRVICE",10,0)
 ;
"RTN","DGSRVICE",11,0)
 ;===============================================================
"RTN","DGSRVICE",12,0)
CSERVDG(DFN,EDATE,SEPDATE,TYPE) ;
"RTN","DGSRVICE",13,0)
 N NOMATCH,TEMP
"RTN","DGSRVICE",14,0)
 S TEMP=$G(^DPT(DFN,.32))
"RTN","DGSRVICE",15,0)
 S NOMATCH=0
"RTN","DGSRVICE",16,0)
 I EDATE["U" S EDATE=""
"RTN","DGSRVICE",17,0)
 I SEPDATE["U" S SEPDATE=""
"RTN","DGSRVICE",18,0)
 I TYPE="LAST" S NOMATCH=$S(EDATE'=$P(TEMP,U,6):1,SEPDATE'=$P(TEMP,U,7):1,1:0)
"RTN","DGSRVICE",19,0)
 I TYPE="NTL" S NOMATCH=$S(EDATE'=$P(TEMP,U,11):1,SEPDATE'=$P(TEMP,U,12):1,1:0)
"RTN","DGSRVICE",20,0)
 I TYPE="NNTL" S NOMATCH=$S(EDATE'=$P(TEMP,U,16):1,SEPDATE'=$P(TEMP,U,17):1,1:0)
"RTN","DGSRVICE",21,0)
 I NOMATCH S ^TMP($J,"ASERVICE",DFN,TYPE)=EDATE_U_SEPDATE
"RTN","DGSRVICE",22,0)
 Q
"RTN","DGSRVICE",23,0)
 ;
"RTN","DGSRVICE",24,0)
 ;===============================================================
"RTN","DGSRVICE",25,0)
KSERV(X,DA,TYPE) ;Delete index for service data.
"RTN","DGSRVICE",26,0)
 I X(1)="",X(2)="" Q
"RTN","DGSRVICE",27,0)
 N ENTRY,SEP
"RTN","DGSRVICE",28,0)
 S ENTRY=$S(X(1)'="":X(1),1:"U"_DA)
"RTN","DGSRVICE",29,0)
 S SEP=$S(X(2)'="":X(2),1:"U"_DA)
"RTN","DGSRVICE",30,0)
 K ^DPT("ASERVICE",SEP,ENTRY,DA,TYPE)
"RTN","DGSRVICE",31,0)
 Q
"RTN","DGSRVICE",32,0)
 ;
"RTN","DGSRVICE",33,0)
 ;===============================================================
"RTN","DGSRVICE",34,0)
PPTYPEM ;Print the patient type index mismatches
"RTN","DGSRVICE",35,0)
 N DFN,PTYPE
"RTN","DGSRVICE",36,0)
 S DFN=0
"RTN","DGSRVICE",37,0)
 F  S DFN=$O(^TMP($J,"PTYPE",DFN)) Q:DFN=""  D
"RTN","DGSRVICE",38,0)
 . S PTYPE=^TMP($J,"PTYPE",DFN)
"RTN","DGSRVICE",39,0)
 . W !,"DFN=",DFN," PATIENT TYPE=",PTYPE
"RTN","DGSRVICE",40,0)
 Q
"RTN","DGSRVICE",41,0)
 ;
"RTN","DGSRVICE",42,0)
 ;===============================================================
"RTN","DGSRVICE",43,0)
PSERVM ;Print the service date index mismatches
"RTN","DGSRVICE",44,0)
 N DFN,TEMP,TYPE
"RTN","DGSRVICE",45,0)
 S DFN=0
"RTN","DGSRVICE",46,0)
 F  S DFN=$O(^TMP($J,"ASERVICE",DFN)) Q:DFN=""  D
"RTN","DGSRVICE",47,0)
 . S TYPE=""
"RTN","DGSRVICE",48,0)
 . F  S TYPE=$O(^TMP($J,"ASERVICE",DFN,TYPE)) Q:TYPE=""  D
"RTN","DGSRVICE",49,0)
 .. S TEMP=^TMP($J,"ASERVICE",DFN,TYPE)
"RTN","DGSRVICE",50,0)
 .. W !,"DFN=",DFN," TYPE=",TYPE," Entry date=",$P(TEMP,U,1)," Separation date=",$P(TEMP,U,2)
"RTN","DGSRVICE",51,0)
 Q
"RTN","DGSRVICE",52,0)
 ;
"RTN","DGSRVICE",53,0)
 ;===============================================================
"RTN","DGSRVICE",54,0)
SSERV(X,DA,TYPE) ;Set index for service data.
"RTN","DGSRVICE",55,0)
 ;X(1)=SERVICE ENTRY DATE
"RTN","DGSRVICE",56,0)
 ;X(2)=SERVICE SEPARATION DATE
"RTN","DGSRVICE",57,0)
 I X(1)="",X(2)="" Q
"RTN","DGSRVICE",58,0)
 N ENTRY,SEP
"RTN","DGSRVICE",59,0)
 S ENTRY=$S(X(1)'="":X(1),1:"U"_DA)
"RTN","DGSRVICE",60,0)
 S SEP=$S(X(2)'="":X(2),1:"U"_DA)
"RTN","DGSRVICE",61,0)
 S ^DPT("ASERVICE",SEP,ENTRY,DA,TYPE)=""
"RTN","DGSRVICE",62,0)
 Q
"RTN","DGSRVICE",63,0)
 ;
"RTN","DGSRVICE",64,0)
 ;===============================================================
"RTN","DGSRVICE",65,0)
VERIFY ;Check to make sure the indexes and global are in agreement.
"RTN","DGSRVICE",66,0)
 N DFN,EDATE,NOPROB,PTYPE,SEPDATE,TEMP,TYPE
"RTN","DGSRVICE",67,0)
 W !,$$FMTE^XLFDT($$NOW^XLFDT,"5Z")," Starting index verification.",!
"RTN","DGSRVICE",68,0)
 S NOPROB=1
"RTN","DGSRVICE",69,0)
 K ^TMP($J,"ASERVICE"),^TMP($J,"PTYPE")
"RTN","DGSRVICE",70,0)
 ;Go through the global.
"RTN","DGSRVICE",71,0)
 S DFN=0
"RTN","DGSRVICE",72,0)
 F  S DFN=+$O(^DPT(DFN)) Q:DFN=0  D
"RTN","DGSRVICE",73,0)
 . S PTYPE=$G(^DPT(DFN,"TYPE"))
"RTN","DGSRVICE",74,0)
 . I PTYPE'="",'$D(^DPT("APTYPE",PTYPE,DFN)) S ^TMP($J,"PTYPE",DFN)=PTYPE
"RTN","DGSRVICE",75,0)
 . S TEMP=$G(^DPT(DFN,.32))
"RTN","DGSRVICE",76,0)
 . I TEMP="" Q
"RTN","DGSRVICE",77,0)
 . S EDATE=$P(TEMP,U,6),SEPDATE=$P(TEMP,U,7) D CSERVDI(DFN,EDATE,SEPDATE,"LAST")
"RTN","DGSRVICE",78,0)
 . S EDATE=$P(TEMP,U,11),SEPDATE=$P(TEMP,U,12) D CSERVDI(DFN,EDATE,SEPDATE,"NTL")
"RTN","DGSRVICE",79,0)
 . S EDATE=$P(TEMP,U,16),SEPDATE=$P(TEMP,U,17) D CSERVDI(DFN,EDATE,SEPDATE,"NNTL")
"RTN","DGSRVICE",80,0)
 I $D(^TMP($J,"ASERVICE")) D
"RTN","DGSRVICE",81,0)
 . S NOPROB=0
"RTN","DGSRVICE",82,0)
 . W !,"The following global entries do not have a matching service date index entry:"
"RTN","DGSRVICE",83,0)
 . D PSERVM
"RTN","DGSRVICE",84,0)
 ;Go through the index.
"RTN","DGSRVICE",85,0)
 K ^TMP($J,"ASERVICE")
"RTN","DGSRVICE",86,0)
 S SEPDATE=0
"RTN","DGSRVICE",87,0)
 F  S SEPDATE=$O(^DPT("ASERVICE",SEPDATE)) Q:SEPDATE=""  D
"RTN","DGSRVICE",88,0)
 . S EDATE=0
"RTN","DGSRVICE",89,0)
 . F  S EDATE=$O(^DPT("ASERVICE",SEPDATE,EDATE)) Q:EDATE=""  D
"RTN","DGSRVICE",90,0)
 .. S DFN=0
"RTN","DGSRVICE",91,0)
 .. F  S DFN=$O(^DPT("ASERVICE",SEPDATE,EDATE,DFN)) Q:DFN=""  D
"RTN","DGSRVICE",92,0)
 ... S TYPE=""
"RTN","DGSRVICE",93,0)
 ... F  S TYPE=$O(^DPT("ASERVICE",SEPDATE,EDATE,DFN,TYPE)) Q:TYPE=""  D
"RTN","DGSRVICE",94,0)
 .... D CSERVDG(DFN,EDATE,SEPDATE,TYPE)
"RTN","DGSRVICE",95,0)
 I $D(^TMP($J,"ASERVICE")) D
"RTN","DGSRVICE",96,0)
 . S NOPROB=0
"RTN","DGSRVICE",97,0)
 . W !!,"The following service date index entries do not have a corresponding global entry:"
"RTN","DGSRVICE",98,0)
 . D PSERVM
"RTN","DGSRVICE",99,0)
 K ^TMP($J,"ASERVICE")
"RTN","DGSRVICE",100,0)
 I NOPROB W !,"No problems were found with the service dates index."
"RTN","DGSRVICE",101,0)
 ;
"RTN","DGSRVICE",102,0)
 ;Check the patient type index.
"RTN","DGSRVICE",103,0)
 S NOPROB=1
"RTN","DGSRVICE",104,0)
 I $D(^TMP($J,"PTYPE")) D
"RTN","DGSRVICE",105,0)
 . S NOPROB=0
"RTN","DGSRVICE",106,0)
 . W !!,"The following global entries do not have a matching patient type index entry:"
"RTN","DGSRVICE",107,0)
 . D PPTYPEM
"RTN","DGSRVICE",108,0)
 K ^TMP($J,"PTYPE")
"RTN","DGSRVICE",109,0)
 ;Go through the patient type index.
"RTN","DGSRVICE",110,0)
 S TYPE=""
"RTN","DGSRVICE",111,0)
 F  S TYPE=$O(^DPT("APTYPE",TYPE)) Q:TYPE=""  D
"RTN","DGSRVICE",112,0)
 . S DFN=0
"RTN","DGSRVICE",113,0)
 . F  S DFN=$O(^DPT("APTYPE",TYPE,DFN)) Q:DFN=""  D
"RTN","DGSRVICE",114,0)
 .. I TYPE'=$G(^DPT(DFN,"TYPE")) S ^TMP($J,"PTYPE",DFN)=TYPE
"RTN","DGSRVICE",115,0)
 I $D(^TMP($J,"PTYPE")) D
"RTN","DGSRVICE",116,0)
 . S NOPROB=0
"RTN","DGSRVICE",117,0)
 . W !!,"The following patient type index entries do not have a corresponding"
"RTN","DGSRVICE",118,0)
 . W !,"global entry:"
"RTN","DGSRVICE",119,0)
 . D PPTYPEM
"RTN","DGSRVICE",120,0)
 K ^TMP($J,"PTYPE")
"RTN","DGSRVICE",121,0)
 I NOPROB W !,"No problems were found with the patient type index."
"RTN","DGSRVICE",122,0)
 W !!,$$FMTE^XLFDT($$NOW^XLFDT,"5Z")," Index verification complete."
"RTN","DGSRVICE",123,0)
 Q
"RTN","DGSRVICE",124,0)
 ;
"VER")
8.0^22.0
**END**
**END**
