Released HDI*1*2 SEQ #2
Extracted from mail message
**KIDS**:HDI*1.0*2^

**INSTALL NAME**
HDI*1.0*2
"BLD",5515,0)
HDI*1.0*2^HEALTH DATA & INFORMATICS^0^3051007^y
"BLD",5515,1,0)
^^1^1^3050831^
"BLD",5515,1,1,0)
See National Patch Module for details
"BLD",5515,4,0)
^9.64PA^^
"BLD",5515,"ABPKG")
n
"BLD",5515,"INID")
^n
"BLD",5515,"INIT")
POST^HDI1002A
"BLD",5515,"KRN",0)
^9.67PA^8989.52^19
"BLD",5515,"KRN",.4,0)
.4
"BLD",5515,"KRN",.401,0)
.401
"BLD",5515,"KRN",.402,0)
.402
"BLD",5515,"KRN",.403,0)
.403
"BLD",5515,"KRN",.5,0)
.5
"BLD",5515,"KRN",.84,0)
.84
"BLD",5515,"KRN",3.6,0)
3.6
"BLD",5515,"KRN",3.8,0)
3.8
"BLD",5515,"KRN",9.2,0)
9.2
"BLD",5515,"KRN",9.8,0)
9.8
"BLD",5515,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",5515,"KRN",9.8,"NM",1,0)
HDISVAP^^0^B4892248
"BLD",5515,"KRN",9.8,"NM",2,0)
HDISVCMR^^0^B8749465
"BLD",5515,"KRN",9.8,"NM",3,0)
HDISVU02^^0^B4727312
"BLD",5515,"KRN",9.8,"NM","B","HDISVAP",1)

"BLD",5515,"KRN",9.8,"NM","B","HDISVCMR",2)

"BLD",5515,"KRN",9.8,"NM","B","HDISVU02",3)

"BLD",5515,"KRN",19,0)
19
"BLD",5515,"KRN",19.1,0)
19.1
"BLD",5515,"KRN",101,0)
101
"BLD",5515,"KRN",409.61,0)
409.61
"BLD",5515,"KRN",771,0)
771
"BLD",5515,"KRN",870,0)
870
"BLD",5515,"KRN",8989.51,0)
8989.51
"BLD",5515,"KRN",8989.52,0)
8989.52
"BLD",5515,"KRN",8994,0)
8994
"BLD",5515,"KRN","B",.4,.4)

"BLD",5515,"KRN","B",.401,.401)

"BLD",5515,"KRN","B",.402,.402)

"BLD",5515,"KRN","B",.403,.403)

"BLD",5515,"KRN","B",.5,.5)

"BLD",5515,"KRN","B",.84,.84)

"BLD",5515,"KRN","B",3.6,3.6)

"BLD",5515,"KRN","B",3.8,3.8)

"BLD",5515,"KRN","B",9.2,9.2)

"BLD",5515,"KRN","B",9.8,9.8)

"BLD",5515,"KRN","B",19,19)

"BLD",5515,"KRN","B",19.1,19.1)

"BLD",5515,"KRN","B",101,101)

"BLD",5515,"KRN","B",409.61,409.61)

"BLD",5515,"KRN","B",771,771)

"BLD",5515,"KRN","B",870,870)

"BLD",5515,"KRN","B",8989.51,8989.51)

"BLD",5515,"KRN","B",8989.52,8989.52)

"BLD",5515,"KRN","B",8994,8994)

"BLD",5515,"QUES",0)
^9.62^^
"BLD",5515,"REQB",0)
^9.611^1^1
"BLD",5515,"REQB",1,0)
HDI*1.0*1^2
"BLD",5515,"REQB","B","HDI*1.0*1",1)

"INIT")
POST^HDI1002A
"MBREQ")
0
"PKG",556,-1)
1^1
"PKG",556,0)
HEALTH DATA & INFORMATICS^HDI^Data Standardization
"PKG",556,20,0)
^9.402P^^
"PKG",556,22,0)
^9.49I^1^1
"PKG",556,22,1,0)
1.0^3050426
"PKG",556,22,1,"PAH",1,0)
2^3051007
"PKG",556,22,1,"PAH",1,1,0)
^^1^1^3051007
"PKG",556,22,1,"PAH",1,1,1,0)
See National Patch Module for details
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","HDI1002A")
0^^B8553789
"RTN","HDI1002A",1,0)
HDI1002A ;BPFO/JRP,ALB/RMO - PATCH 2 POST INSTALL;9/27/2005
"RTN","HDI1002A",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**2**;Feb 22, 2005
"RTN","HDI1002A",3,0)
 ;
"RTN","HDI1002A",4,0)
POST ;Main entry point for post-install routine
"RTN","HDI1002A",5,0)
 ; Input: None
"RTN","HDI1002A",6,0)
 ;        All variables set by Kernel for KIDS post-installs
"RTN","HDI1002A",7,0)
 ;Output: None
"RTN","HDI1002A",8,0)
 N HDIMSG
"RTN","HDI1002A",9,0)
 S HDIMSG(1)=" "
"RTN","HDI1002A",10,0)
 S HDIMSG(2)="~~~~~~~~~~~~~~~~~~~~"
"RTN","HDI1002A",11,0)
 S HDIMSG(3)="Post-Installation (POST^HDI1002A) will now be run"
"RTN","HDI1002A",12,0)
 S HDIMSG(4)=" "
"RTN","HDI1002A",13,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1002A",14,0)
 D SCAN
"RTN","HDI1002A",15,0)
 S HDIMSG(1)=" "
"RTN","HDI1002A",16,0)
 S HDIMSG(2)="Post-Installation ran to completion"
"RTN","HDI1002A",17,0)
 S HDIMSG(3)="~~~~~~~~~~~~~~~~~~~~"
"RTN","HDI1002A",18,0)
 S HDIMSG(4)=" "
"RTN","HDI1002A",19,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDI1002A",20,0)
 Q
"RTN","HDI1002A",21,0)
 ;
"RTN","HDI1002A",22,0)
SCAN ;Scan XTID VUID FOR SET OF CODES file for duplicate statuses
"RTN","HDI1002A",23,0)
 ; Input: None
"RTN","HDI1002A",24,0)
 ;Output: None
"RTN","HDI1002A",25,0)
 ; Notes: Call assumes it is being run within the context of KIDS
"RTN","HDI1002A",26,0)
 N COUNT,PTRXTID,XPDIDTOT,TEXT
"RTN","HDI1002A",27,0)
 S TEXT(1)=" "
"RTN","HDI1002A",28,0)
 S TEXT(2)="Scanning EFFECTIVE DATE/TIME multiple (subfile #8985.11)"
"RTN","HDI1002A",29,0)
 S TEXT(3)="of the XTID VUID FOR SET OF CODES file (#8985.1) for"
"RTN","HDI1002A",30,0)
 S TEXT(4)="consecutive storage of the same status"
"RTN","HDI1002A",31,0)
 S TEXT(5)=" "
"RTN","HDI1002A",32,0)
 D MES^XPDUTL(.TEXT)
"RTN","HDI1002A",33,0)
 S XPDIDTOT=+$O(^XTID(8985.1,"A"),-1)
"RTN","HDI1002A",34,0)
 ;Traverse file
"RTN","HDI1002A",35,0)
 S PTRXTID=0
"RTN","HDI1002A",36,0)
 F COUNT=1:1 S PTRXTID=+$O(^XTID(8985.1,PTRXTID)) Q:'PTRXTID  D
"RTN","HDI1002A",37,0)
 .;Show progress through KIDS status bar
"RTN","HDI1002A",38,0)
 .I '(COUNT#10) D UPDATE^XPDID(PTRXTID)
"RTN","HDI1002A",39,0)
 .;Execute check
"RTN","HDI1002A",40,0)
 .D CHECK(PTRXTID)
"RTN","HDI1002A",41,0)
 D UPDATE^XPDID(XPDIDTOT)
"RTN","HDI1002A",42,0)
 Q
"RTN","HDI1002A",43,0)
 ;
"RTN","HDI1002A",44,0)
CHECK(PTRXTID) ;Check entry for duplicate statuses
"RTN","HDI1002A",45,0)
 ; Input: PTRXTID - Pointer to XTID VUID FOR SET OF CODES file
"RTN","HDI1002A",46,0)
 ;Output: None
"RTN","HDI1002A",47,0)
 ; Notes: Assumes validity of PTRXTID (internal call)
"RTN","HDI1002A",48,0)
 S PTRXTID=+$G(PTRXTID) Q:'PTRXTID
"RTN","HDI1002A",49,0)
 N MLTIEN,STAT,STDT,PRVSTAT,PRVSTDT,NODE
"RTN","HDI1002A",50,0)
 S (PRVSTAT,PRVSTDT)=""
"RTN","HDI1002A",51,0)
 ;Traverse date x-ref of multiple
"RTN","HDI1002A",52,0)
 S STDT=0
"RTN","HDI1002A",53,0)
 F  S STDT=+$O(^XTID(8985.1,PTRXTID,"TERMSTATUS","B",STDT)) Q:'STDT  D
"RTN","HDI1002A",54,0)
 .S MLTIEN=0
"RTN","HDI1002A",55,0)
 .F  S MLTIEN=+$O(^XTID(8985.1,PTRXTID,"TERMSTATUS","B",STDT,MLTIEN)) Q:'MLTIEN  D
"RTN","HDI1002A",56,0)
 ..;Get node/status
"RTN","HDI1002A",57,0)
 ..S NODE=$G(^XTID(8985.1,PTRXTID,"TERMSTATUS",MLTIEN,0))
"RTN","HDI1002A",58,0)
 ..S STAT=$P(NODE,"^",2)
"RTN","HDI1002A",59,0)
 ..;Bad node/status - delete and quit
"RTN","HDI1002A",60,0)
 ..I (NODE="")!(NODE="^")!(STAT="") D  Q
"RTN","HDI1002A",61,0)
 ...D DELETE(PTRXTID,MLTIEN)
"RTN","HDI1002A",62,0)
 ..;First status entry - set as previous status and quit
"RTN","HDI1002A",63,0)
 ..I PRVSTAT="" D SETPRV Q
"RTN","HDI1002A",64,0)
 ..;Same as previous status - delete
"RTN","HDI1002A",65,0)
 ..I STAT=PRVSTAT D DELETE(PTRXTID,MLTIEN) Q
"RTN","HDI1002A",66,0)
 ..;Different status - keep and remember status change
"RTN","HDI1002A",67,0)
 ..D SETPRV
"RTN","HDI1002A",68,0)
 Q
"RTN","HDI1002A",69,0)
 ;
"RTN","HDI1002A",70,0)
DELETE(PTRXTID,MLTIEN) ;Delete entry from EFFECTIVE DATE/TIME multiple
"RTN","HDI1002A",71,0)
 ; Input: PTRXTID - Pointer to XTID XTID VUID FOR SET OF CODES file
"RTN","HDI1002A",72,0)
 ;        MLTIEN - Pointer to entry in EFFECTIVE DATE/TIME multiple
"RTN","HDI1002A",73,0)
 ;Output: None
"RTN","HDI1002A",74,0)
 ; Notes: Assumes validity of PTRXTID & MLTIEN (internal call)
"RTN","HDI1002A",75,0)
 S PTRXTID=+$G(PTRXTID) Q:'PTRXTID
"RTN","HDI1002A",76,0)
 S MLTIEN=+$G(MLTIEN) Q:'MLTIEN
"RTN","HDI1002A",77,0)
 N DA,DIK
"RTN","HDI1002A",78,0)
 S DA=MLTIEN
"RTN","HDI1002A",79,0)
 S DA(1)=PTRXTID
"RTN","HDI1002A",80,0)
 S DIK="^XTID(8985.1,"_DA(1)_",""TERMSTATUS"","
"RTN","HDI1002A",81,0)
 D ^DIK
"RTN","HDI1002A",82,0)
 Q
"RTN","HDI1002A",83,0)
 ;
"RTN","HDI1002A",84,0)
SETPRV ;Set previous values
"RTN","HDI1002A",85,0)
 ; Input: STAT
"RTN","HDI1002A",86,0)
 ;        STDT
"RTN","HDI1002A",87,0)
 ;Output: PRVSTAT
"RTN","HDI1002A",88,0)
 ;        PRVSTDT
"RTN","HDI1002A",89,0)
 S PRVSTAT=$G(STAT)
"RTN","HDI1002A",90,0)
 S PRVSTDT=$G(STDT)
"RTN","HDI1002A",91,0)
 Q
"RTN","HDISVAP")
0^1^B4892248
"RTN","HDISVAP",1,0)
HDISVAP ;ALB/RMO,BPFO/JRM - Application Programmer API(s); 2/11/05@9:10:00
"RTN","HDISVAP",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**2**;Feb 22, 2005
"RTN","HDISVAP",3,0)
 ;
"RTN","HDISVAP",4,0)
NTRTMSG(HDISARYF,HDISARY) ;New Term Rapid Turnaround (NTRT) Message
"RTN","HDISVAP",5,0)
 ; Input  -- HDISARYF Return Text in an Array Flag  (Optional- Default 0)
"RTN","HDISVAP",6,0)
 ;                    1=Yes and 0=No
"RTN","HDISVAP",7,0)
 ; Output -- HDISARY  If requested, an array containing the NTRT Message is returned otherwise
"RTN","HDISVAP",8,0)
 ;                    the message is diplayed on the screen.  The Output variable is assumed
"RTN","HDISVAP",9,0)
 ;                    to be Null when the API is invoked.
"RTN","HDISVAP",10,0)
 N HDISLNE,HDISTXT
"RTN","HDISVAP",11,0)
 F HDISLNE=1:1 S HDISTXT=$P($T(MSG+HDISLNE),";;",2) Q:HDISTXT="END"  D
"RTN","HDISVAP",12,0)
 . I $G(HDISARYF) D
"RTN","HDISVAP",13,0)
 . . S HDISARY(HDISLNE)=HDISTXT
"RTN","HDISVAP",14,0)
 . ELSE  D
"RTN","HDISVAP",15,0)
 . . W !?3,HDISTXT
"RTN","HDISVAP",16,0)
 Q
"RTN","HDISVAP",17,0)
 ;
"RTN","HDISVAP",18,0)
LOSVUID(CODE) ;Convert Lab's Organism Screen set of codes to VUID
"RTN","HDISVAP",19,0)
 ; Input: Code - Code representing organism screen
"RTN","HDISVAP",20,0)
 ;Output: VUID - VUID for input code
"RTN","HDISVAP",21,0)
 ;        NULL returned on bad input
"RTN","HDISVAP",22,0)
 ; Notes: This API is only to be used to determine the VUID for the
"RTN","HDISVAP",23,0)
 ;        Organism Screen fields that a site may add to the Organism
"RTN","HDISVAP",24,0)
 ;        multiple (subfile #63.3) in the Microbiology multiple
"RTN","HDISVAP",25,0)
 ;        (subfile #63.05) of the Lab Data file (#63) via the option
"RTN","HDISVAP",26,0)
 ;        LRWU7 [Add a new internal name for an antibiotic]
"RTN","HDISVAP",27,0)
 ;
"RTN","HDISVAP",28,0)
 N RSLT
"RTN","HDISVAP",29,0)
 S CODE=$G(CODE)
"RTN","HDISVAP",30,0)
 S RSLT=$S(CODE="A":4500665,CODE="N":4500805,CODE="R":4500877,1:"")
"RTN","HDISVAP",31,0)
 Q RSLT
"RTN","HDISVAP",32,0)
 ;
"RTN","HDISVAP",33,0)
LOSCODE(VUID) ;Convert Lab's Organism Screen VUID to set of codes
"RTN","HDISVAP",34,0)
 ;Input: VUID - VUID representing organism screen
"RTN","HDISVAP",35,0)
 ;Output: Code - Code for input VUID
"RTN","HDISVAP",36,0)
 ;        NULL returned on bad input
"RTN","HDISVAP",37,0)
 ; Notes: This API is only to be used to determine the code for the
"RTN","HDISVAP",38,0)
 ;        Organism Screen fields that a site may add to the Organism
"RTN","HDISVAP",39,0)
 ;        multiple (subfile #63.3) in the Microbiology multiple
"RTN","HDISVAP",40,0)
 ;        (subfile #63.05) of the Lab Data file (#63) via the option
"RTN","HDISVAP",41,0)
 ;        LRWU7 [Add a new internal name for an antibiotic]
"RTN","HDISVAP",42,0)
 ;
"RTN","HDISVAP",43,0)
 N RSLT
"RTN","HDISVAP",44,0)
 S VUID=$G(VUID)
"RTN","HDISVAP",45,0)
 S RSLT=$S(VUID=4500665:"A",VUID=4500805:"N",VUID=4500877:"R",1:"")
"RTN","HDISVAP",46,0)
 Q RSLT
"RTN","HDISVAP",47,0)
 ;
"RTN","HDISVAP",48,0)
MSG ;NTRT message text
"RTN","HDISVAP",49,0)
 ;;
"RTN","HDISVAP",50,0)
 ;;In support of national standardization of the contents of this file,
"RTN","HDISVAP",51,0)
 ;;local site addition and modification functions are no longer available.
"RTN","HDISVAP",52,0)
 ;;If you wish to request a new term or modify an existing term, please
"RTN","HDISVAP",53,0)
 ;;refer to the New Term Rapid Turnaround (NTRT) web site located at
"RTN","HDISVAP",54,0)
 ;;http://vista.med.va.gov/ntrt/.  If you have any questions regarding this 
"RTN","HDISVAP",55,0)
 ;;new term request process, please contact the ERT NTRT Coordinator 
"RTN","HDISVAP",56,0)
 ;;via e-mail at VHA OI SDD HDS NTRT.
"RTN","HDISVAP",57,0)
 ;;
"RTN","HDISVAP",58,0)
 ;;END
"RTN","HDISVCMR")
0^2^B8749465
"RTN","HDISVCMR",1,0)
HDISVCMR ;CT/GRR Data Standardization ; 06 Oct 2005  2:12 PM
"RTN","HDISVCMR",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**1,2**;Feb 22, 2005
"RTN","HDISVCMR",3,0)
 ;
"RTN","HDISVCMR",4,0)
EN(HDISDOM,HDISFILE) ;
"RTN","HDISVCMR",5,0)
 ;Input parameter:
"RTN","HDISVCMR",6,0)
 ;       HDISDOM - IEN to the HDIS Domain file (Required)
"RTN","HDISVCMR",7,0)
 ;       HDISFILE - Specific file # to be seeded (if not all domain files) (Optional)
"RTN","HDISVCMR",8,0)
 N HDISNM,HDISDT,HDERR,HDISFILS,HDISOK,HDISFLIS,HDISDA,HDISOUT,HDISSDT
"RTN","HDISVCMR",9,0)
 S HDISFLIS=""
"RTN","HDISVCMR",10,0)
 S HDISFN=.01
"RTN","HDISVCMR",11,0)
 S HDISNM=$G(^XMB("NETNAME"))
"RTN","HDISVCMR",12,0)
 S HDISDT=$$NOW^XLFDT(),HDISSDT=$$FMTXML^HDISVU01(HDISDT)
"RTN","HDISVCMR",13,0)
 I $G(HDISDOM)="" S HDISMESS="Required parameter (Domain) empty, File: "_HDISFILE_", Field: "_HDISFN D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",14,0)
 I '$D(^HDIS(7115.1,HDISDOM)) S HDISMESS="Domain ("_HDISDOM_") does not exist.  File: "_HDISFILE_", Field: "_HDISFN D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",15,0)
 I $$GETVFAIL^HDISVF02() S HDISMESS="VUID DS processer called but is in failsafe mode" D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q
"RTN","HDISVCMR",16,0)
 S HDISOK=$$GETFILS^HDISVF09(HDISDOM,0,.HDISFILS)
"RTN","HDISVCMR",17,0)
 I 'HDISOK S HDISMESS="No files are pending VUID processing in Domain "_$P(^HDIS(7115.1,HDISDOM,0),"^",1) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) Q  ;modified 5/16/05 p-1
"RTN","HDISVCMR",18,0)
 I $G(HDISFILE)]"" D  Q
"RTN","HDISVCMR",19,0)
 .I $D(HDISFILS(HDISFILE)) D CREATE(HDISDOM,HDISFILE,HDISFN) I 1
"RTN","HDISVCMR",20,0)
 .E  D ERR^HDISVF09(HDISNM,HDISDT,"File: "_HDISFILE_" is not awaiting processing")
"RTN","HDISVCMR",21,0)
 S HDISDA=0 F  S HDISDA=$O(HDISFILS(HDISDA)) Q:HDISDA'>0  D CREATE(HDISDOM,HDISDA,.01)
"RTN","HDISVCMR",22,0)
 Q
"RTN","HDISVCMR",23,0)
 ;
"RTN","HDISVCMR",24,0)
CREATE(HDISDOM,HDISFILE,HDISFN) ;
"RTN","HDISVCMR",25,0)
 N HDISARRY,HDISMESS
"RTN","HDISVCMR",26,0)
 ;Update local status
"RTN","HDISVCMR",27,0)
 S HDISOUT=$$STATUPD^HDISVCUT(HDISFILE,HDISFN,1)
"RTN","HDISVCMR",28,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",29,0)
 ;
"RTN","HDISVCMR",30,0)
 ;Create XML doc containing facility data
"RTN","HDISVCMR",31,0)
 S HDISARRY=$NA(^TMP("HDIS",$J))
"RTN","HDISVCMR",32,0)
 S HDISOUT=$$FILE^HDISVCFX(HDISDOM,HDISFILE,HDISFN,HDISARRY)
"RTN","HDISVCMR",33,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",34,0)
 ;
"RTN","HDISVCMR",35,0)
 ; Send XML doc to Central Server
"RTN","HDISVCMR",36,0)
 S HDISOUT=$$SNDXML^HDISVM02(HDISARRY,1,"") ;removed last parameter 8/10/05 p-2
"RTN","HDISVCMR",37,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",38,0)
 ;
"RTN","HDISVCMR",39,0)
 ;Update local status file
"RTN","HDISVCMR",40,0)
 S HDISOUT=$$STATUPD^HDISVCUT(HDISFILE,HDISFN,2)
"RTN","HDISVCMR",41,0)
 I 'HDISOUT S HDISMESS=$P(HDISOUT,"^",2) D ERR^HDISVF09(HDISNM,HDISDT,HDISMESS) G CR8OUT
"RTN","HDISVCMR",42,0)
 ;
"RTN","HDISVCMR",43,0)
CR8OUT K @HDISARRY
"RTN","HDISVCMR",44,0)
 Q
"RTN","HDISVU02")
0^3^B4727312
"RTN","HDISVU02",1,0)
HDISVU02 ;BPFO/JRP - STORE VUIDS FOR SET OF CODES;5/12/2005
"RTN","HDISVU02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**1,2**;Feb 22, 2005
"RTN","HDISVU02",3,0)
 ;
"RTN","HDISVU02",4,0)
VUIDL(TAG,ROUTINE) ;Instantiate VUIDs for set of code fields
"RTN","HDISVU02",5,0)
 ; Input: TAG - Line tag under which VUID data has been placed
"RTN","HDISVU02",6,0)
 ;        ROUTINE - Routine line tag is in
"RTN","HDISVU02",7,0)
 ;                  Leave blank if in this routine
"RTN","HDISVU02",8,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDISVU02",9,0)
 ;        1 = Continue with post-install
"RTN","HDISVU02",10,0)
 ; Notes: Data lines must be in the format
"RTN","HDISVU02",11,0)
 ;          File~Field~Code~VUID~Status~EffectiveDateTime
"RTN","HDISVU02",12,0)
 ;          (Status and EffectiveDateTime must be in internal format)
"RTN","HDISVU02",13,0)
 ;          (Default value for Status is 0 - Inactive)
"RTN","HDISVU02",14,0)
 ;          (Default value for EffectiveDateTime is NOW)
"RTN","HDISVU02",15,0)
 ;      : Call assumes that all input (TAG & ROUTINE) is valid
"RTN","HDISVU02",16,0)
 ;      : Call assumes that data lines are valid
"RTN","HDISVU02",17,0)
 ;        (i.e. no missing/bad data)
"RTN","HDISVU02",18,0)
 ;      : The incoming status/date will not be stored in an existing
"RTN","HDISVU02",19,0)
 ;        entry for the VUID if the currently stored status is the
"RTN","HDISVU02",20,0)
 ;        same as the input status.
"RTN","HDISVU02",21,0)
 ;
"RTN","HDISVU02",22,0)
 N OFFSET,DATA,FILE,FIELD,IREF,VUID,STAT,STDT,DONE,RESULT,HDIMSG
"RTN","HDISVU02",23,0)
 S ROUTINE=$G(ROUTINE)
"RTN","HDISVU02",24,0)
 S RESULT=1
"RTN","HDISVU02",25,0)
 S DONE=0
"RTN","HDISVU02",26,0)
 F OFFSET=1:1 D  Q:DONE
"RTN","HDISVU02",27,0)
 .S DATA=$S(ROUTINE="":$T(@TAG+OFFSET),1:$T(@TAG+OFFSET^@ROUTINE))
"RTN","HDISVU02",28,0)
 .S DATA=$P(DATA,";;",2)
"RTN","HDISVU02",29,0)
 .I DATA="" S DONE=1 Q
"RTN","HDISVU02",30,0)
 .S FILE=$P(DATA,"~",1)
"RTN","HDISVU02",31,0)
 .S FIELD=$P(DATA,"~",2)
"RTN","HDISVU02",32,0)
 .S IREF=$P(DATA,"~",3)
"RTN","HDISVU02",33,0)
 .S VUID=$P(DATA,"~",4)
"RTN","HDISVU02",34,0)
 .S STAT=$P(DATA,"~",5)
"RTN","HDISVU02",35,0)
 .I STAT="" S STAT=0
"RTN","HDISVU02",36,0)
 .S STDT=$P(DATA,"~",6)
"RTN","HDISVU02",37,0)
 .I STDT="" S STDT=$$NOW^XLFDT()
"RTN","HDISVU02",38,0)
 .I '$$STOREIT(FILE,FIELD,IREF,VUID,STAT,STDT) D
"RTN","HDISVU02",39,0)
 ..S HDIMSG(1)="**"
"RTN","HDISVU02",40,0)
 ..S HDIMSG(2)="** Unable to store VUID and/or status information for file"
"RTN","HDISVU02",41,0)
 ..S HDIMSG(3)="** "_FILE_", field "_FIELD_", and internal value "_IREF
"RTN","HDISVU02",42,0)
 ..S HDIMSG(4)="**"
"RTN","HDISVU02",43,0)
 ..D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDISVU02",44,0)
 ..S RESULT=0
"RTN","HDISVU02",45,0)
 Q RESULT
"RTN","HDISVU02",46,0)
 ;
"RTN","HDISVU02",47,0)
STOREIT(FILE,FIELD,IREF,VUID,STAT,STDT) ;Store VUID info
"RTN","HDISVU02",48,0)
 ; Input: FILE - File number
"RTN","HDISVU02",49,0)
 ;        FIELD - Field number
"RTN","HDISVU02",50,0)
 ;        IREF - Internal reference
"RTN","HDISVU02",51,0)
 ;        VUID - VUID
"RTN","HDISVU02",52,0)
 ;        STAT - Status
"RTN","HDISVU02",53,0)
 ;               0 = Inacive (default)     1 = Active
"RTN","HDISVU02",54,0)
 ;        STDT - Status Date/Time (FileMan)
"RTN","HDISVU02",55,0)
 ;               (Defaults to NOW)
"RTN","HDISVU02",56,0)
 ;Output: 1 = Success
"RTN","HDISVU02",57,0)
 ;        0 = Failure
"RTN","HDISVU02",58,0)
 ; Notes: Existance/validity of input assumed (internal call)
"RTN","HDISVU02",59,0)
 ;      : Call will automatically inactivate terms when appropriate
"RTN","HDISVU02",60,0)
 ;      : The input status/date will not be stored in an existing
"RTN","HDISVU02",61,0)
 ;        entry for the VUID if the currently stored status is the
"RTN","HDISVU02",62,0)
 ;        same as the input status.  Success (1) will be returned.
"RTN","HDISVU02",63,0)
 ;
"RTN","HDISVU02",64,0)
 N MASTER,CURSTAT
"RTN","HDISVU02",65,0)
 S STAT=+$G(STAT)
"RTN","HDISVU02",66,0)
 S STDT=+$G(STDT)
"RTN","HDISVU02",67,0)
 I 'STDT S STDT=$$NOW^XLFDT()
"RTN","HDISVU02",68,0)
 ;Is VUID already on file
"RTN","HDISVU02",69,0)
 S CURSTAT=$$GETSTAT^XTID(FILE,FIELD,IREF)
"RTN","HDISVU02",70,0)
 ;Don't store new date for same status (return SUCCESS)
"RTN","HDISVU02",71,0)
 I $P(CURSTAT,"^",1)=STAT Q 1
"RTN","HDISVU02",72,0)
 ;Store VUID (also sets master entry flag, if appropriate)
"RTN","HDISVU02",73,0)
 I '$$SETVUID^XTID(FILE,FIELD,IREF,VUID) Q 0
"RTN","HDISVU02",74,0)
 ;Inactivate non-master entries
"RTN","HDISVU02",75,0)
 I '$$GETMASTR^XTID(FILE,FIELD,IREF) D
"RTN","HDISVU02",76,0)
 .S STAT=0
"RTN","HDISVU02",77,0)
 .S STDT=$$NOW^XLFDT()
"RTN","HDISVU02",78,0)
 ;Store status
"RTN","HDISVU02",79,0)
 Q $$SETSTAT^XTID(FILE,FIELD,IREF,STAT,STDT)
"VER")
8.0^22.0
"BLD",5515,6)
^2
**END**
**END**
