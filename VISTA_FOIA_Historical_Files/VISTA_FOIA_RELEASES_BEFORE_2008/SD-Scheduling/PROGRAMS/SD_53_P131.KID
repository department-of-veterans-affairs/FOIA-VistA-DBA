KIDS Distribution saved on Jan 20, 1998@10:22:41
ACRP Interface Toolkit (AIT)
**KIDS**:SD*5.3*131^PX*1.0*39^

**INSTALL NAME**
SD*5.3*131
"BLD",721,0)
SD*5.3*131^SCHEDULING^0^2971017^y
"BLD",721,1,0)
^^14^14^2980120^^^^
"BLD",721,1,1,0)
                     **** ACRP Interface Toolkit ****
"BLD",721,1,2,0)
 
"BLD",721,1,3,0)
 This build contains the ACRP Interface Toolkit (AIT) supported by scheduling
"BLD",721,1,4,0)
 that provides access to ACRP encounter data. Use of the AIT does not
"BLD",721,1,5,0)
 require an integration agreement. 
"BLD",721,1,6,0)

"BLD",721,1,7,0)
 National and local developers should use the AIT to obtain the following
"BLD",721,1,8,0)
 ACRP encounter related data:
"BLD",721,1,9,0)
            - procedures
"BLD",721,1,10,0)
            - diagnoses
"BLD",721,1,11,0)
            - provider
"BLD",721,1,12,0)
            - general administrative 
"BLD",721,1,13,0)

"BLD",721,1,14,0)
Refer to National Patch Module for more details on patch SD*5.3*131.
"BLD",721,4,0)
^9.64PA^409.64^1
"BLD",721,4,409.64,0)
409.64
"BLD",721,4,409.64,222)
y^y^f^^n^^y^o^n
"BLD",721,4,"B",409.64,409.64)

"BLD",721,"ABNS",0)
^9.66A^^
"BLD",721,"ABPKG")
n^n^
"BLD",721,"KRN",0)
^9.67PA^19^18
"BLD",721,"KRN",.4,0)
.4
"BLD",721,"KRN",.4,"NM",0)
^9.68A^^
"BLD",721,"KRN",.401,0)
.401
"BLD",721,"KRN",.402,0)
.402
"BLD",721,"KRN",.403,0)
.403
"BLD",721,"KRN",.5,0)
.5
"BLD",721,"KRN",.84,0)
.84
"BLD",721,"KRN",.84,"NM",0)
^9.68A^25^24
"BLD",721,"KRN",.84,"NM",1,0)
4096800.001^^0
"BLD",721,"KRN",.84,"NM",2,0)
4096800.002^^0
"BLD",721,"KRN",.84,"NM",3,0)
4096800.003^^0
"BLD",721,"KRN",.84,"NM",4,0)
4096800.004^^0
"BLD",721,"KRN",.84,"NM",5,0)
4096800.005^^0
"BLD",721,"KRN",.84,"NM",6,0)
4096800.006^^0
"BLD",721,"KRN",.84,"NM",7,0)
4096800.021^^0
"BLD",721,"KRN",.84,"NM",8,0)
4096800.022^^0
"BLD",721,"KRN",.84,"NM",9,0)
4096800.023^^0
"BLD",721,"KRN",.84,"NM",10,0)
4096800.024^^0
"BLD",721,"KRN",.84,"NM",11,0)
4096800.025^^0
"BLD",721,"KRN",.84,"NM",12,0)
4096800.101^^0
"BLD",721,"KRN",.84,"NM",13,0)
4096800.102^^0
"BLD",721,"KRN",.84,"NM",14,0)
4096800.103^^0
"BLD",721,"KRN",.84,"NM",15,0)
4096800.104^^0
"BLD",721,"KRN",.84,"NM",16,0)
4096800.105^^0
"BLD",721,"KRN",.84,"NM",17,0)
4096800.106^^0
"BLD",721,"KRN",.84,"NM",18,0)
4096800.108^^0
"BLD",721,"KRN",.84,"NM",19,0)
4096800.109^^0
"BLD",721,"KRN",.84,"NM",20,0)
4096800.11^^0
"BLD",721,"KRN",.84,"NM",21,0)
4096800.111^^0
"BLD",721,"KRN",.84,"NM",22,0)
4096800.112^^0
"BLD",721,"KRN",.84,"NM",23,0)
4096800.113^^0
"BLD",721,"KRN",.84,"NM",25,0)
4096400.001^^0
"BLD",721,"KRN",.84,"NM","B",4096400.001,25)

"BLD",721,"KRN",.84,"NM","B",4096800.001,1)

"BLD",721,"KRN",.84,"NM","B",4096800.002,2)

"BLD",721,"KRN",.84,"NM","B",4096800.003,3)

"BLD",721,"KRN",.84,"NM","B",4096800.004,4)

"BLD",721,"KRN",.84,"NM","B",4096800.005,5)

"BLD",721,"KRN",.84,"NM","B",4096800.006,6)

"BLD",721,"KRN",.84,"NM","B",4096800.021,7)

"BLD",721,"KRN",.84,"NM","B",4096800.022,8)

"BLD",721,"KRN",.84,"NM","B",4096800.023,9)

"BLD",721,"KRN",.84,"NM","B",4096800.024,10)

"BLD",721,"KRN",.84,"NM","B",4096800.025,11)

"BLD",721,"KRN",.84,"NM","B",4096800.101,12)

"BLD",721,"KRN",.84,"NM","B",4096800.102,13)

"BLD",721,"KRN",.84,"NM","B",4096800.103,14)

"BLD",721,"KRN",.84,"NM","B",4096800.104,15)

"BLD",721,"KRN",.84,"NM","B",4096800.105,16)

"BLD",721,"KRN",.84,"NM","B",4096800.106,17)

"BLD",721,"KRN",.84,"NM","B",4096800.108,18)

"BLD",721,"KRN",.84,"NM","B",4096800.109,19)

"BLD",721,"KRN",.84,"NM","B",4096800.11,20)

"BLD",721,"KRN",.84,"NM","B",4096800.111,21)

"BLD",721,"KRN",.84,"NM","B",4096800.112,22)

"BLD",721,"KRN",.84,"NM","B",4096800.113,23)

"BLD",721,"KRN",3.6,0)
3.6
"BLD",721,"KRN",3.8,0)
3.8
"BLD",721,"KRN",9.2,0)
9.2
"BLD",721,"KRN",9.8,0)
9.8
"BLD",721,"KRN",9.8,"NM",0)
^9.68A^13^13
"BLD",721,"KRN",9.8,"NM",1,0)
SDQ^^0^B24365238
"BLD",721,"KRN",9.8,"NM",2,0)
SDQNAV^^0^B25689578
"BLD",721,"KRN",9.8,"NM",3,0)
SDQPROP^^0^B24214736
"BLD",721,"KRN",9.8,"NM",4,0)
SDQUT^^0^B6255686
"BLD",721,"KRN",9.8,"NM",5,0)
SDQVAL^^0^B20271030
"BLD",721,"KRN",9.8,"NM",6,0)
SDOE^^0^B4776263
"BLD",721,"KRN",9.8,"NM",7,0)
SDOECPT^^0^B9100723
"BLD",721,"KRN",9.8,"NM",8,0)
SDOEDX^^0^B9561426
"BLD",721,"KRN",9.8,"NM",9,0)
SDOEOE^^0^B22940393
"BLD",721,"KRN",9.8,"NM",10,0)
SDOEPRV^^0^B4624612
"BLD",721,"KRN",9.8,"NM",11,0)
SDOEQ^^0^B20922547
"BLD",721,"KRN",9.8,"NM",12,0)
SDOEUT^^0^B180845
"BLD",721,"KRN",9.8,"NM",13,0)
SDOERPC^^0^B13786096
"BLD",721,"KRN",9.8,"NM","B","SDOE",6)

"BLD",721,"KRN",9.8,"NM","B","SDOECPT",7)

"BLD",721,"KRN",9.8,"NM","B","SDOEDX",8)

"BLD",721,"KRN",9.8,"NM","B","SDOEOE",9)

"BLD",721,"KRN",9.8,"NM","B","SDOEPRV",10)

"BLD",721,"KRN",9.8,"NM","B","SDOEQ",11)

"BLD",721,"KRN",9.8,"NM","B","SDOERPC",13)

"BLD",721,"KRN",9.8,"NM","B","SDOEUT",12)

"BLD",721,"KRN",9.8,"NM","B","SDQ",1)

"BLD",721,"KRN",9.8,"NM","B","SDQNAV",2)

"BLD",721,"KRN",9.8,"NM","B","SDQPROP",3)

"BLD",721,"KRN",9.8,"NM","B","SDQUT",4)

"BLD",721,"KRN",9.8,"NM","B","SDQVAL",5)

"BLD",721,"KRN",19,0)
19
"BLD",721,"KRN",19,"NM",0)
^9.68A^^0
"BLD",721,"KRN",19.1,0)
19.1
"BLD",721,"KRN",101,0)
101
"BLD",721,"KRN",101,"NM",0)
^9.68A^^0
"BLD",721,"KRN",409.61,0)
409.61
"BLD",721,"KRN",771,0)
771
"BLD",721,"KRN",869.2,0)
869.2
"BLD",721,"KRN",870,0)
870
"BLD",721,"KRN",8994,0)
8994
"BLD",721,"KRN",8994,"NM",0)
^9.68A^19^19
"BLD",721,"KRN",8994,"NM",1,0)
SDOE ASSIGNED A DIAGNOSIS^^0
"BLD",721,"KRN",8994,"NM",2,0)
SDOE ASSIGNED A PROCEDURE^^0
"BLD",721,"KRN",8994,"NM",3,0)
SDOE ASSIGNED A PROVIDER^^0
"BLD",721,"KRN",8994,"NM",4,0)
SDOE FIND DIAGNOSIS^^0
"BLD",721,"KRN",8994,"NM",5,0)
SDOE FIND FIRST ENCOUNTER^^0
"BLD",721,"KRN",8994,"NM",6,0)
SDOE FIND FIRST STANDALONE^^0
"BLD",721,"KRN",8994,"NM",7,0)
SDOE FIND LAST STANDALONE^^0
"BLD",721,"KRN",8994,"NM",8,0)
SDOE FIND PROCEDURE^^0
"BLD",721,"KRN",8994,"NM",9,0)
SDOE FIND PROVIDER^^0
"BLD",721,"KRN",8994,"NM",10,0)
SDOE GET DIAGNOSES^^0
"BLD",721,"KRN",8994,"NM",11,0)
SDOE GET GENERAL DATA^^0
"BLD",721,"KRN",8994,"NM",12,0)
SDOE GET PRIMARY DIAGNOSIS^^0
"BLD",721,"KRN",8994,"NM",13,0)
SDOE GET PROCEDURES^^0
"BLD",721,"KRN",8994,"NM",14,0)
SDOE GET PROVIDERS^^0
"BLD",721,"KRN",8994,"NM",15,0)
SDOE GET ZERO NODE^^0
"BLD",721,"KRN",8994,"NM",16,0)
SDOE LIST ENCOUNTERS FOR DATES^^0
"BLD",721,"KRN",8994,"NM",17,0)
SDOE LIST ENCOUNTERS FOR PAT^^0
"BLD",721,"KRN",8994,"NM",18,0)
SDOE LIST ENCOUNTERS FOR VISIT^^0
"BLD",721,"KRN",8994,"NM",19,0)
SDOE PARSE GENERAL DATA^^0
"BLD",721,"KRN",8994,"NM","B","SDOE ASSIGNED A DIAGNOSIS",1)

"BLD",721,"KRN",8994,"NM","B","SDOE ASSIGNED A PROCEDURE",2)

"BLD",721,"KRN",8994,"NM","B","SDOE ASSIGNED A PROVIDER",3)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND DIAGNOSIS",4)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND FIRST ENCOUNTER",5)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND FIRST STANDALONE",6)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND LAST STANDALONE",7)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND PROCEDURE",8)

"BLD",721,"KRN",8994,"NM","B","SDOE FIND PROVIDER",9)

"BLD",721,"KRN",8994,"NM","B","SDOE GET DIAGNOSES",10)

"BLD",721,"KRN",8994,"NM","B","SDOE GET GENERAL DATA",11)

"BLD",721,"KRN",8994,"NM","B","SDOE GET PRIMARY DIAGNOSIS",12)

"BLD",721,"KRN",8994,"NM","B","SDOE GET PROCEDURES",13)

"BLD",721,"KRN",8994,"NM","B","SDOE GET PROVIDERS",14)

"BLD",721,"KRN",8994,"NM","B","SDOE GET ZERO NODE",15)

"BLD",721,"KRN",8994,"NM","B","SDOE LIST ENCOUNTERS FOR DATES",16)

"BLD",721,"KRN",8994,"NM","B","SDOE LIST ENCOUNTERS FOR PAT",17)

"BLD",721,"KRN",8994,"NM","B","SDOE LIST ENCOUNTERS FOR VISIT",18)

"BLD",721,"KRN",8994,"NM","B","SDOE PARSE GENERAL DATA",19)

"BLD",721,"KRN","B",.4,.4)

"BLD",721,"KRN","B",.401,.401)

"BLD",721,"KRN","B",.402,.402)

"BLD",721,"KRN","B",.403,.403)

"BLD",721,"KRN","B",.5,.5)

"BLD",721,"KRN","B",.84,.84)

"BLD",721,"KRN","B",3.6,3.6)

"BLD",721,"KRN","B",3.8,3.8)

"BLD",721,"KRN","B",9.2,9.2)

"BLD",721,"KRN","B",9.8,9.8)

"BLD",721,"KRN","B",19,19)

"BLD",721,"KRN","B",19.1,19.1)

"BLD",721,"KRN","B",101,101)

"BLD",721,"KRN","B",409.61,409.61)

"BLD",721,"KRN","B",771,771)

"BLD",721,"KRN","B",869.2,869.2)

"BLD",721,"KRN","B",870,870)

"BLD",721,"KRN","B",8994,8994)

"BLD",721,"QUES",0)
^9.62^^
"BLD",721,"REQB",0)
^9.611^1^1
"BLD",721,"REQB",1,0)
SD*5.3*44^2
"BLD",721,"REQB","B","SD*5.3*44",1)

"DATA",409.64,1,0)
SD STANDARD ENCOUNTER QUERY^409.68^0^5000^^^1
"DATA",409.64,1,"INDEX",0)
^409.641^4^4
"DATA",409.64,1,"INDEX",1,0)
DATE/TIME^B^2
"DATA",409.64,1,"INDEX",2,0)
PATIENT^C^1
"DATA",409.64,1,"INDEX",3,0)
PATIENT/DATE^ADFN^4
"DATA",409.64,1,"INDEX",4,0)
VISIT^AVSIT^1
"DATA",409.64,1,"SCAN")
D SCAN^SDOEQ(.SDQ,.SDIR,$G(SDERR))
"DATA",409.64,1,"ZERO")
S Y0=$$OE0^SDOEQ(Y)
"FIA",409.64)
QUERY OBJECT
"FIA",409.64,0)
^SD(409.64,
"FIA",409.64,0,0)
409.64
"FIA",409.64,0,1)
y^y^f^^n^^y^o^n
"FIA",409.64,0,10)

"FIA",409.64,0,11)

"FIA",409.64,0,"RLRO")

"FIA",409.64,0,"VR")
5.3^SD
"FIA",409.64,409.64)
0
"FIA",409.64,409.641)
0
"KRN",.84,4096400.001,-1)
0^25
"KRN",.84,4096400.001,0)
4096400.001^1^y^SCHEDULING^Invalid Query Class ID
"KRN",.84,4096400.001,1,0)
^^2^2^2970722^^^
"KRN",.84,4096400.001,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096400.001,1,2,0)
call, is invalid.
"KRN",.84,4096400.001,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096400.001,2,1,0)
Error Number: 4096400.001
"KRN",.84,4096400.001,2,2,0)

"KRN",.84,4096400.001,2,3,0)
  Outpatient Enconter ID number is not valid.
"KRN",.84,4096400.001,2,4,0)

"KRN",.84,4096400.001,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096400.001,2,6,0)
_________________________________________________________________
"KRN",.84,4096400.001,3,0)
^.845^1^1
"KRN",.84,4096400.001,3,1,0)
ID^ID of Query Class Definition
"KRN",.84,4096400.001,6)
D POST^SDQUT
"KRN",.84,4096800.001,-1)
0^1
"KRN",.84,4096800.001,0)
4096800.001^1^y^SCHEDULING^Invalid Outpatient Encounter ID
"KRN",.84,4096800.001,1,0)
^^2^2^2971120^^^^
"KRN",.84,4096800.001,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.001,1,2,0)
call, is invalid.
"KRN",.84,4096800.001,2,0)
^^6^6^2971120^^^^
"KRN",.84,4096800.001,2,1,0)
Error Number: 4096800.001
"KRN",.84,4096800.001,2,2,0)

"KRN",.84,4096800.001,2,3,0)
  Outpatient Enconter ID number is not valid.
"KRN",.84,4096800.001,2,4,0)

"KRN",.84,4096800.001,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.001,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.001,3,0)
^.845^1^1
"KRN",.84,4096800.001,3,1,0)
ID^ID of Outpatient Encounter file entry
"KRN",.84,4096800.001,6)
D POST^SDOEUT
"KRN",.84,4096800.002,-1)
0^2
"KRN",.84,4096800.002,0)
4096800.002^1^y^SCHEDULING^Invalid Patient ID
"KRN",.84,4096800.002,1,0)
^^3^3^2970716^^
"KRN",.84,4096800.002,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.002,1,2,0)
call, is invalid.
"KRN",.84,4096800.002,1,3,0)

"KRN",.84,4096800.002,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.002,2,1,0)
Error Number: 4096800.002
"KRN",.84,4096800.002,2,2,0)

"KRN",.84,4096800.002,2,3,0)
  Patient ID number is not valid.
"KRN",.84,4096800.002,2,4,0)

"KRN",.84,4096800.002,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.002,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.002,3,0)
^.845^1^1
"KRN",.84,4096800.002,3,1,0)
ID^ID of Patient file entry
"KRN",.84,4096800.002,6)
D POST^SDQUT
"KRN",.84,4096800.003,-1)
0^3
"KRN",.84,4096800.003,0)
4096800.003^1^y^SCHEDULING^Invalid Provider ID
"KRN",.84,4096800.003,1,0)
^^3^3^2970716^
"KRN",.84,4096800.003,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.003,1,2,0)
call, is invalid.
"KRN",.84,4096800.003,1,3,0)

"KRN",.84,4096800.003,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.003,2,1,0)
Error Number: 4096800.003
"KRN",.84,4096800.003,2,2,0)

"KRN",.84,4096800.003,2,3,0)
  Provider ID number is not valid.
"KRN",.84,4096800.003,2,4,0)

"KRN",.84,4096800.003,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.003,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.003,3,0)
^.845^1^1
"KRN",.84,4096800.003,3,1,0)
ID^ID of New Person file entry
"KRN",.84,4096800.003,6)
D POST^SDOEUT
"KRN",.84,4096800.004,-1)
0^4
"KRN",.84,4096800.004,0)
4096800.004^1^y^SCHEDULING^Invalid Diagnosis ID
"KRN",.84,4096800.004,1,0)
^^4^4^2970716^^
"KRN",.84,4096800.004,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.004,1,2,0)
call, is invalid.
"KRN",.84,4096800.004,1,3,0)

"KRN",.84,4096800.004,1,4,0)
Note: This is the internal entry ID number, not the diagnosis code.
"KRN",.84,4096800.004,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.004,2,1,0)
Error Number: 4096800.004
"KRN",.84,4096800.004,2,2,0)

"KRN",.84,4096800.004,2,3,0)
  Diagnosis ID number is not valid.
"KRN",.84,4096800.004,2,4,0)

"KRN",.84,4096800.004,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.004,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.004,3,0)
^.845^1^1
"KRN",.84,4096800.004,3,1,0)
ID^ID of Diagnisis file entry
"KRN",.84,4096800.004,6)
D POST^SDOEUT
"KRN",.84,4096800.005,-1)
0^5
"KRN",.84,4096800.005,0)
4096800.005^1^y^SCHEDULING^Invalid CPT ID
"KRN",.84,4096800.005,1,0)
^^4^4^2970716^^^
"KRN",.84,4096800.005,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.005,1,2,0)
call, is invalid.
"KRN",.84,4096800.005,1,3,0)

"KRN",.84,4096800.005,1,4,0)
Note: This is the internal entry ID number, not the CPT code.
"KRN",.84,4096800.005,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.005,2,1,0)
Error Number: 4096800.005
"KRN",.84,4096800.005,2,2,0)

"KRN",.84,4096800.005,2,3,0)
  CPT ID is not valid.
"KRN",.84,4096800.005,2,4,0)

"KRN",.84,4096800.005,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.005,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.005,3,0)
^.845^1^1
"KRN",.84,4096800.005,3,1,0)
ID^ID of CPT file entry
"KRN",.84,4096800.005,6)
D POST^SDOEUT
"KRN",.84,4096800.006,-1)
0^6
"KRN",.84,4096800.006,0)
4096800.006^1^y^SCHEDULING^Invalid User ID
"KRN",.84,4096800.006,1,0)
^^3^3^2970716^
"KRN",.84,4096800.006,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,4096800.006,1,2,0)
call, is invalid.
"KRN",.84,4096800.006,1,3,0)

"KRN",.84,4096800.006,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.006,2,1,0)
Error Number: 4096800.006
"KRN",.84,4096800.006,2,2,0)

"KRN",.84,4096800.006,2,3,0)
  User ID number is not valid.
"KRN",.84,4096800.006,2,4,0)

"KRN",.84,4096800.006,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,4096800.006,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.006,3,0)
^.845^1^1
"KRN",.84,4096800.006,3,1,0)
ID^ID of New Person file entry
"KRN",.84,4096800.006,6)
D POST^SDOEUT
"KRN",.84,4096800.021,-1)
0^7
"KRN",.84,4096800.021,0)
4096800.021^1^y^SCHEDULING^Invalid Date/Time
"KRN",.84,4096800.021,1,0)
^^3^3^2970716^
"KRN",.84,4096800.021,1,1,0)
Used to indicate the date and time passed, usually as part of an API
"KRN",.84,4096800.021,1,2,0)
call, is invalid.
"KRN",.84,4096800.021,1,3,0)

"KRN",.84,4096800.021,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.021,2,1,0)
Error Number: 4096800.021
"KRN",.84,4096800.021,2,2,0)

"KRN",.84,4096800.021,2,3,0)
  Date/Time is not valid.
"KRN",.84,4096800.021,2,4,0)

"KRN",.84,4096800.021,2,5,0)
  Date/Time: '|DATE|'.
"KRN",.84,4096800.021,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.021,3,0)
^.845^1^1
"KRN",.84,4096800.021,3,1,0)
DATE^Date and time specification
"KRN",.84,4096800.021,6)
D POST^SDQUT
"KRN",.84,4096800.022,-1)
0^8
"KRN",.84,4096800.022,0)
4096800.022^1^y^SCHEDULING^Invalid Date Range
"KRN",.84,4096800.022,1,0)
^^3^3^2970716^^
"KRN",.84,4096800.022,1,1,0)
Used to indicate the date range passed, usually as part of an API
"KRN",.84,4096800.022,1,2,0)
call, is invalid.
"KRN",.84,4096800.022,1,3,0)

"KRN",.84,4096800.022,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.022,2,1,0)
Error Number: 4096800.022
"KRN",.84,4096800.022,2,2,0)

"KRN",.84,4096800.022,2,3,0)
  Date range is not valid.
"KRN",.84,4096800.022,2,4,0)

"KRN",.84,4096800.022,2,5,0)
  Date Range: '|BEGIN|' to '|END|'.
"KRN",.84,4096800.022,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.022,3,0)
^.845^2^2
"KRN",.84,4096800.022,3,1,0)
BEGIN^Begin date of date range
"KRN",.84,4096800.022,3,2,0)
END^End date of date range
"KRN",.84,4096800.022,6)
D POST^SDQUT
"KRN",.84,4096800.023,-1)
0^9
"KRN",.84,4096800.023,0)
4096800.023^1^y^SCHEDULING^Invalid Parse Format
"KRN",.84,4096800.023,1,0)
^^3^3^2970716^^^
"KRN",.84,4096800.023,1,1,0)
Used to notify the developer that the parse format indicator passed, usually
"KRN",.84,4096800.023,1,2,0)
as part of an API call, is invalid.
"KRN",.84,4096800.023,1,3,0)

"KRN",.84,4096800.023,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.023,2,1,0)
Error Number: 4096800.023
"KRN",.84,4096800.023,2,2,0)

"KRN",.84,4096800.023,2,3,0)
  Parse format indicator is not valid.
"KRN",.84,4096800.023,2,4,0)

"KRN",.84,4096800.023,2,5,0)
  Parse Format: '|FORMAT|'.
"KRN",.84,4096800.023,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.023,3,0)
^.845^1^1
"KRN",.84,4096800.023,3,1,0)
FORMAT^Parse Format Indicator
"KRN",.84,4096800.023,6)
D POST^SDOEUT
"KRN",.84,4096800.024,-1)
0^10
"KRN",.84,4096800.024,0)
4096800.024^1^y^SCHEDULING^No Data To Parse
"KRN",.84,4096800.024,1,0)
^^3^3^2970716^^
"KRN",.84,4096800.024,1,1,0)
Used to indicate that no data was passed as part of the call to API that parses
"KRN",.84,4096800.024,1,2,0)
the outpatient data.
"KRN",.84,4096800.024,1,3,0)

"KRN",.84,4096800.024,2,0)
^^4^4^2970728^^^^
"KRN",.84,4096800.024,2,1,0)
Error Number: 4096800.024
"KRN",.84,4096800.024,2,2,0)

"KRN",.84,4096800.024,2,3,0)
  No Outpatient Encounter data was passed to be parsed.
"KRN",.84,4096800.024,2,4,0)
_________________________________________________________________
"KRN",.84,4096800.024,3,0)
^.845^^0
"KRN",.84,4096800.024,6)
D POST^SDOEUT
"KRN",.84,4096800.025,-1)
0^11
"KRN",.84,4096800.025,0)
4096800.025^1^y^SCHEDULING^Duplicate Primary Diagnosis
"KRN",.84,4096800.025,1,0)
^^2^2^2970717^^^^
"KRN",.84,4096800.025,1,1,0)
Used to notify developer that multiple diagnose codes have the 'primary'
"KRN",.84,4096800.025,1,2,0)
indicator selected for an encounter.
"KRN",.84,4096800.025,2,0)
^^10^10^2970728^^^^
"KRN",.84,4096800.025,2,1,0)
Error Number: 4096800.025
"KRN",.84,4096800.025,2,2,0)

"KRN",.84,4096800.025,2,3,0)
  Multiple primary diagnosis codes have been indicated for
"KRN",.84,4096800.025,2,4,0)
  an encounter.
"KRN",.84,4096800.025,2,5,0)
 
"KRN",.84,4096800.025,2,6,0)
     Encounter ID: '|ID|'
"KRN",.84,4096800.025,2,7,0)
       Patient ID: '|DFN|' - |PATNAME| (|PID|)
"KRN",.84,4096800.025,2,8,0)

"KRN",.84,4096800.025,2,9,0)
  Diagnosis Codes: '|CODES|'
"KRN",.84,4096800.025,2,10,0)
_________________________________________________________________
"KRN",.84,4096800.025,3,0)
^.845^5^5
"KRN",.84,4096800.025,3,1,0)
ID^ID of Outpatient Encounter file entry
"KRN",.84,4096800.025,3,2,0)
DFN^ID of Patient file entry
"KRN",.84,4096800.025,3,3,0)
PID^Primary Patient ID
"KRN",.84,4096800.025,3,4,0)
PATNAME^Name of Patient
"KRN",.84,4096800.025,3,5,0)
CODES^Primary Diagnosis Codes
"KRN",.84,4096800.025,6)
D POST^SDOEUT
"KRN",.84,4096800.101,-1)
0^12
"KRN",.84,4096800.101,0)
4096800.101^1^y^SCHEDULING^Invalid Query Object Handle
"KRN",.84,4096800.101,1,0)
^^2^2^2970716^^^
"KRN",.84,4096800.101,1,1,0)
The Query Object Handle passed as part of an API call is not valid for this
"KRN",.84,4096800.101,1,2,0)
user process.
"KRN",.84,4096800.101,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.101,2,1,0)
Error Number: 4096800.101
"KRN",.84,4096800.101,2,2,0)

"KRN",.84,4096800.101,2,3,0)
  Query Object Handle is not valid.
"KRN",.84,4096800.101,2,4,0)

"KRN",.84,4096800.101,2,5,0)
  Query Handle: '|QUERY|'.
"KRN",.84,4096800.101,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.101,3,0)
^.845^1^1
"KRN",.84,4096800.101,3,1,0)
QUERY^Query Object Handle
"KRN",.84,4096800.101,6)
D POST^SDQUT
"KRN",.84,4096800.102,-1)
0^13
"KRN",.84,4096800.102,0)
4096800.102^1^y^SCHEDULING^Inactive Query
"KRN",.84,4096800.102,1,0)
^^2^2^2970716^^
"KRN",.84,4096800.102,1,1,0)
Used to indicate the query object is currently inactive and as a result various
"KRN",.84,4096800.102,1,2,0)
methods and properties are currently unavailable.
"KRN",.84,4096800.102,2,0)
^^8^8^2970728^^^^
"KRN",.84,4096800.102,2,1,0)
Error Number: 4096800.102
"KRN",.84,4096800.102,2,2,0)

"KRN",.84,4096800.102,2,3,0)
  The query object is currently inactive. This API call is not
"KRN",.84,4096800.102,2,4,0)
  allowed for an inactive query.
"KRN",.84,4096800.102,2,5,0)

"KRN",.84,4096800.102,2,6,0)
  Query Object Handle: '|QUERY|'.
"KRN",.84,4096800.102,2,7,0)
_________________________________________________________________
"KRN",.84,4096800.102,2,8,0)

"KRN",.84,4096800.102,3,0)
^.845^1^1
"KRN",.84,4096800.102,3,1,0)
QUERY^Query Object Handle
"KRN",.84,4096800.102,6)
D POST^SDQUT
"KRN",.84,4096800.103,-1)
0^14
"KRN",.84,4096800.103,0)
4096800.103^1^y^SCHEDULING^Invalid Active Status
"KRN",.84,4096800.103,1,0)
^^3^3^2970716^^^^
"KRN",.84,4096800.103,1,1,0)
Used to notify developer that the active status indicator passed, usually
"KRN",.84,4096800.103,1,2,0)
as part of an API call, is invalid.
"KRN",.84,4096800.103,1,3,0)

"KRN",.84,4096800.103,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.103,2,1,0)
Error Number: 4096800.103
"KRN",.84,4096800.103,2,2,0)

"KRN",.84,4096800.103,2,3,0)
  Active status indicator is not valid.
"KRN",.84,4096800.103,2,4,0)

"KRN",.84,4096800.103,2,5,0)
  Active Status Indicator: '|STATUS|'.
"KRN",.84,4096800.103,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.103,3,0)
^.845^1^1
"KRN",.84,4096800.103,3,1,0)
STATUS^Active Status Indicator
"KRN",.84,4096800.103,6)
D POST^SDQUT
"KRN",.84,4096800.104,-1)
0^15
"KRN",.84,4096800.104,0)
4096800.104^1^y^SCHEDULING^Invalid Filter
"KRN",.84,4096800.104,1,0)
^^1^1^2970801^^
"KRN",.84,4096800.104,1,1,0)
Used to indicate that the filter passed as part of an API call is invalid.
"KRN",.84,4096800.104,2,0)
^^6^6^2970801^^^^
"KRN",.84,4096800.104,2,1,0)
Error Number: 4096800.104
"KRN",.84,4096800.104,2,2,0)

"KRN",.84,4096800.104,2,3,0)
  Filter logic is not valid.
"KRN",.84,4096800.104,2,4,0)

"KRN",.84,4096800.104,2,5,0)
  Logic: '|FILTER|'.
"KRN",.84,4096800.104,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.104,3,0)
^.845^1^1
"KRN",.84,4096800.104,3,1,0)
FILTER^Query Filter Logic
"KRN",.84,4096800.104,6)
D POST^SDQUT
"KRN",.84,4096800.105,-1)
0^16
"KRN",.84,4096800.105,0)
4096800.105^1^y^SCHEDULING^Invalid Index
"KRN",.84,4096800.105,1,0)
^^1^1^2970716^^^^
"KRN",.84,4096800.105,1,1,0)
Used to indicate the index passed, usually as part of an API call, is invalid.
"KRN",.84,4096800.105,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.105,2,1,0)
Error Number: 4096800.105
"KRN",.84,4096800.105,2,2,0)

"KRN",.84,4096800.105,2,3,0)
  Index is not valid.
"KRN",.84,4096800.105,2,4,0)

"KRN",.84,4096800.105,2,5,0)
  Index: '|INDEX|'.
"KRN",.84,4096800.105,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.105,3,0)
^.845^1^1
"KRN",.84,4096800.105,3,1,0)
INDEX^Query Index
"KRN",.84,4096800.105,6)
D POST^SDQUT
"KRN",.84,4096800.106,-1)
0^17
"KRN",.84,4096800.106,0)
4096800.106^1^y^SCHEDULING^Active Query
"KRN",.84,4096800.106,1,0)
^^4^4^2970722^^^
"KRN",.84,4096800.106,1,1,0)
Used to indicate the query object is currently active and as a result various
"KRN",.84,4096800.106,1,2,0)
methods and properties are currently unavailable.
"KRN",.84,4096800.106,1,3,0)

"KRN",.84,4096800.106,1,4,0)
For example, the developer cannot set properties if query is active.
"KRN",.84,4096800.106,2,0)
^^7^7^2970728^^^^
"KRN",.84,4096800.106,2,1,0)
Error Number: 4096800.106
"KRN",.84,4096800.106,2,2,0)

"KRN",.84,4096800.106,2,3,0)
  The query object is currently inactive. This API call is not
"KRN",.84,4096800.106,2,4,0)
  allowed for an inactive query.
"KRN",.84,4096800.106,2,5,0)

"KRN",.84,4096800.106,2,6,0)
  Query Object Handle: '|QUERY|'.
"KRN",.84,4096800.106,2,7,0)
_________________________________________________________________
"KRN",.84,4096800.106,3,0)
^.845^1^1
"KRN",.84,4096800.106,3,1,0)
QUERY^Query Object Handle
"KRN",.84,4096800.106,6)
D POST^SDQUT
"KRN",.84,4096800.108,-1)
0^18
"KRN",.84,4096800.108,0)
4096800.108^1^y^SCHEDULING^Invalid Property Action
"KRN",.84,4096800.108,1,0)
^^3^3^2970716^^^^
"KRN",.84,4096800.108,1,1,0)
Used to notify developer that the property action passed, usually
"KRN",.84,4096800.108,1,2,0)
as part of an API call, is invalid.
"KRN",.84,4096800.108,1,3,0)

"KRN",.84,4096800.108,2,0)
^^6^6^2970728^^^^
"KRN",.84,4096800.108,2,1,0)
Error Number: 4096800.108
"KRN",.84,4096800.108,2,2,0)

"KRN",.84,4096800.108,2,3,0)
  Property Action specified is not valid.
"KRN",.84,4096800.108,2,4,0)

"KRN",.84,4096800.108,2,5,0)
  Property Action: '|ACTION|'.
"KRN",.84,4096800.108,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.108,3,0)
^.845^1^1
"KRN",.84,4096800.108,3,1,0)
ACTION^Property Action
"KRN",.84,4096800.108,6)
D POST^SDQUT
"KRN",.84,4096800.109,-1)
0^19
"KRN",.84,4096800.109,0)
4096800.109^1^y^SCHEDULING^Invalid Query Property
"KRN",.84,4096800.109,1,0)
^^2^2^2970728^^^^
"KRN",.84,4096800.109,1,1,0)
Used to notify developer that the query property is invalid.
"KRN",.84,4096800.109,1,2,0)

"KRN",.84,4096800.109,2,0)
^^9^9^2970728^^^^
"KRN",.84,4096800.109,2,1,0)
Error Number: 4096800.109
"KRN",.84,4096800.109,2,2,0)

"KRN",.84,4096800.109,2,3,0)
  At least one query property is not valid.
"KRN",.84,4096800.109,2,4,0)
  As a result, the query cannot be placed in an 'active' status.
"KRN",.84,4096800.109,2,5,0)

"KRN",.84,4096800.109,2,6,0)
  Query Properties: '|PROPERTIES|'
"KRN",.84,4096800.109,2,7,0)

"KRN",.84,4096800.109,2,8,0)
  (Note: Each invalid property is separated by '/'.)
"KRN",.84,4096800.109,2,9,0)
_________________________________________________________________
"KRN",.84,4096800.109,3,0)
^.845^1^1
"KRN",.84,4096800.109,3,1,0)
PROPERTIES^Query Property
"KRN",.84,4096800.109,6)
D POST^SDQUT
"KRN",.84,4096800.11,-1)
0^20
"KRN",.84,4096800.11,0)
4096800.11^1^^SCHEDULING^Beginning of File
"KRN",.84,4096800.11,1,0)
^^2^2^2970728^^^^
"KRN",.84,4096800.11,1,1,0)
Used to notify developer that cursor is already at the beginning
"KRN",.84,4096800.11,1,2,0)
of the file (BOF).
"KRN",.84,4096800.11,2,0)
^^8^8^2970728^^^^
"KRN",.84,4096800.11,2,1,0)
Error Number: 4096800.11
"KRN",.84,4096800.11,2,2,0)

"KRN",.84,4096800.11,2,3,0)
  Query cursor is already at the beginning of the file (BOF).
"KRN",.84,4096800.11,2,4,0)

"KRN",.84,4096800.11,2,5,0)
  (Note: This error typically occurs when a call to PRIOR is made.
"KRN",.84,4096800.11,2,6,0)
         Use the $$BOF extrinic method before calling PRIOR.)
"KRN",.84,4096800.11,2,7,0)
         
"KRN",.84,4096800.11,2,8,0)
_________________________________________________________________
"KRN",.84,4096800.11,3,0)
^.845^^0
"KRN",.84,4096800.11,6)
D POST^SDQUT
"KRN",.84,4096800.111,-1)
0^21
"KRN",.84,4096800.111,0)
4096800.111^1^^SCHEDULING^End of File
"KRN",.84,4096800.111,1,0)
^^2^2^2971103^^^^
"KRN",.84,4096800.111,1,1,0)
Used to notify developer that cursor is already at the end
"KRN",.84,4096800.111,1,2,0)
of the file (EOF).
"KRN",.84,4096800.111,2,0)
^^8^8^2971103^^^^
"KRN",.84,4096800.111,2,1,0)
Error Number: 4096800.111
"KRN",.84,4096800.111,2,2,0)

"KRN",.84,4096800.111,2,3,0)
  Query cursor is already at the end of the file (EOF).
"KRN",.84,4096800.111,2,4,0)

"KRN",.84,4096800.111,2,5,0)
  (Note: This error typically occurs when a call to SDQ NEXT is made.
"KRN",.84,4096800.111,2,6,0)
         Use the SDQ EOF extrinic method before calling SDQ NEXT.)
"KRN",.84,4096800.111,2,7,0)
         
"KRN",.84,4096800.111,2,8,0)
_________________________________________________________________
"KRN",.84,4096800.111,3,0)
^.845^^0
"KRN",.84,4096800.111,6)
D POST^SDQUT
"KRN",.84,4096800.112,-1)
0^22
"KRN",.84,4096800.112,0)
4096800.112^1^^SCHEDULING^No Scan Callback Property
"KRN",.84,4096800.112,1,0)
^^1^1^2971103^^^^
"KRN",.84,4096800.112,1,1,0)
Used to notify the developer that the callback logic has not been defined.
"KRN",.84,4096800.112,2,0)
^^5^5^2971103^^
"KRN",.84,4096800.112,2,1,0)
Error Number: 4096800.112
"KRN",.84,4096800.112,2,2,0)

"KRN",.84,4096800.112,2,3,0)
  The Scan Callback property is set to null. This property must
"KRN",.84,4096800.112,2,4,0)
  be defined in order to execute the SDQ SCAN method.
"KRN",.84,4096800.112,2,5,0)
_________________________________________________________________
"KRN",.84,4096800.112,6)
D POST^SDQUT
"KRN",.84,4096800.113,-1)
0^23
"KRN",.84,4096800.113,0)
4096800.113^1^y^SCHEDULING^Invalid Scan Callback
"KRN",.84,4096800.113,1,0)
^^2^2^2971103^^^^
"KRN",.84,4096800.113,1,1,0)
Used to indicate that the scan callback passed as part of an API call
"KRN",.84,4096800.113,1,2,0)
is invalid.
"KRN",.84,4096800.113,2,0)
^^6^6^2971103^^^^
"KRN",.84,4096800.113,2,1,0)
Error Number: 4096800.113
"KRN",.84,4096800.113,2,2,0)

"KRN",.84,4096800.113,2,3,0)
  SDQ SCAN CALLBACK logic is not valid.
"KRN",.84,4096800.113,2,4,0)

"KRN",.84,4096800.113,2,5,0)
  Logic: '|CALLBACK|'.
"KRN",.84,4096800.113,2,6,0)
_________________________________________________________________
"KRN",.84,4096800.113,3,0)
^.845^1^1
"KRN",.84,4096800.113,3,1,0)
CALLBACK^Scan Callback Logic
"KRN",.84,4096800.113,6)
D POST^SDQUT
"KRN",8994,106,-1)
0^10
"KRN",8994,106,0)
SDOE GET DIAGNOSES^GETDX^SDOERPC^2^P^^^1
"KRN",8994,106,1,0)
^^13^13^2980113^^^^
"KRN",8994,106,1,1,0)
This Remote Procedure Call (RPC) returns an array of diagnoses
"KRN",8994,106,1,2,0)
for an encounter.
"KRN",8994,106,1,3,0)

"KRN",8994,106,1,4,0)
Note:
"KRN",8994,106,1,5,0)
For encounters before 10/1/96, only scheduling data in the
"KRN",8994,106,1,6,0)
OUTPATIENT DIAGNOSIS (#409.43) file may exist. It will only
"KRN",8994,106,1,7,0)
exist if the site required diagnoses as part of the check
"KRN",8994,106,1,8,0)
out process.
"KRN",8994,106,1,9,0)

"KRN",8994,106,1,10,0)
This RPC will attempt to find this 'old' data, reformat the data
"KRN",8994,106,1,11,0)
to meet the V POV structure and return the list of diagnoses as
"KRN",8994,106,1,12,0)
described above.  (Only the diagnosis code internal entry number
"KRN",8994,106,1,13,0)
is available for 'old' encounters.)
"KRN",8994,106,2,0)
^8994.02A^1^1
"KRN",8994,106,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,106,2,1,1,0)
^^2^2^2980113^^^^
"KRN",8994,106,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,106,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,106,2,"B","ENCOUNTER IEN",1)

"KRN",8994,106,2,"PARAMSEQ",1,1)

"KRN",8994,106,3,0)
^^6^6^2980120^^^^
"KRN",8994,106,3,1,0)
The 0th node of a record in the V POV file.
"KRN",8994,106,3,2,0)

"KRN",8994,106,3,3,0)
Example Array Item: 97^101^459^192^^^^^^^^P
"KRN",8994,106,3,4,0)
  
"KRN",8994,106,3,5,0)
  
"KRN",8994,106,3,6,0)
  
"KRN",8994,107,-1)
0^14
"KRN",8994,107,0)
SDOE GET PROVIDERS^GETPRV^SDOERPC^2^P^^^1
"KRN",8994,107,1,0)
^^12^12^2980113^^^^
"KRN",8994,107,1,1,0)
This Remote Procedure Call (RPC) returns a subscripted array of providers
"KRN",8994,107,1,2,0)
for an encounter.
"KRN",8994,107,1,3,0)

"KRN",8994,107,1,4,0)
Note:
"KRN",8994,107,1,5,0)
For encounters before 10/1/96, only scheduling data in the
"KRN",8994,107,1,6,0)
OUTPATIENT PROVIDER (#409.44) file may exist. It will only
"KRN",8994,107,1,7,0)
exist if the site required provider as part of the check out process. 
"KRN",8994,107,1,8,0)

"KRN",8994,107,1,9,0)
This RPC will attempt to find this 'old' data, reformat the
"KRN",8994,107,1,10,0)
data to meet the V PROVIDER structure and return the list of
"KRN",8994,107,1,11,0)
providers as described above. (Only the provider internal entry
"KRN",8994,107,1,12,0)
number is available for 'old' encounters.)
"KRN",8994,107,2,0)
^8994.02A^1^1
"KRN",8994,107,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,107,2,1,1,0)
^^2^2^2980113^^^^
"KRN",8994,107,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,107,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,107,2,"B","ENCOUNTER IEN",1)

"KRN",8994,107,2,"PARAMSEQ",1,1)

"KRN",8994,107,3,0)
^^6^6^2980120^^^^
"KRN",8994,107,3,1,0)
The 0th node of a record in the V PROVIDER file.
"KRN",8994,107,3,2,0)

"KRN",8994,107,3,3,0)
Example Array Item: 11344^706^407^P^^11
"KRN",8994,107,3,4,0)
  
"KRN",8994,107,3,5,0)
  
"KRN",8994,107,3,6,0)
  
"KRN",8994,108,-1)
0^13
"KRN",8994,108,0)
SDOE GET PROCEDURES^GETCPT^SDOERPC^2^P^^^1
"KRN",8994,108,1,0)
^^13^13^2980113^^^^
"KRN",8994,108,1,1,0)
This Remote Procedure Call (RPC) returns a subscripted array of CPTs
"KRN",8994,108,1,2,0)
for an encounter.
"KRN",8994,108,1,3,0)

"KRN",8994,108,1,4,0)
Note:
"KRN",8994,108,1,5,0)
For encounters before 10/1/96, only scheduling data in the
"KRN",8994,108,1,6,0)
SCHEDULING VISITS  (#409.5) file may exist. It will only
"KRN",8994,108,1,7,0)
exist if the site required procedures as part of the check
"KRN",8994,108,1,8,0)
out process. 
"KRN",8994,108,1,9,0)

"KRN",8994,108,1,10,0)
This RPC will attempt to find this 'old' data, reformat the
"KRN",8994,108,1,11,0)
data to meet the V CPT structure and return the list of procedures
"KRN",8994,108,1,12,0)
as described above.  (Only the CPT code internal entry number and
"KRN",8994,108,1,13,0)
count are available for 'old' encounters.)
"KRN",8994,108,2,0)
^8994.02A^1^1
"KRN",8994,108,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,108,2,1,1,0)
^^2^2^2980113^^^^
"KRN",8994,108,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,108,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,108,2,"B","ENCOUNTER IEN",1)

"KRN",8994,108,2,"PARAMSEQ",1,1)

"KRN",8994,108,3,0)
^^6^6^2980120^^^^
"KRN",8994,108,3,1,0)
The 0th node of a record in the V CPT file.
"KRN",8994,108,3,2,0)

"KRN",8994,108,3,3,0)
Example Array Item: 10060^706^407^69^^^^^^^^^^^^1
"KRN",8994,108,3,4,0)
  
"KRN",8994,108,3,5,0)
  
"KRN",8994,108,3,6,0)
  
"KRN",8994,109,-1)
0^3
"KRN",8994,109,0)
SDOE ASSIGNED A PROVIDER^PRV^SDOERPC^1^P
"KRN",8994,109,1,0)
^^2^2^2971014^^^^
"KRN",8994,109,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator on whether at
"KRN",8994,109,1,2,0)
least one provider has been associated with an encounter.
"KRN",8994,109,2,0)
^8994.02A^1^1
"KRN",8994,109,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,109,2,1,1,0)
^^2^2^2971014^^
"KRN",8994,109,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,109,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,109,2,"B","ENCOUNTER IEN",1)

"KRN",8994,109,2,"PARAMSEQ",1,1)

"KRN",8994,109,3,0)
^^3^3^2971014^^^
"KRN",8994,109,3,1,0)
1 - Yes, at least one provider is assoicated encounter
"KRN",8994,109,3,2,0)

"KRN",8994,109,3,3,0)
0 - No, no providers are associated encounter
"KRN",8994,110,-1)
0^1
"KRN",8994,110,0)
SDOE ASSIGNED A DIAGNOSIS^DX^SDOERPC^1^P
"KRN",8994,110,1,0)
^^2^2^2971014^^^^
"KRN",8994,110,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator on
"KRN",8994,110,1,2,0)
whether at least one diagnoses has been associated with an encounter.
"KRN",8994,110,2,0)
^8994.02A^1^1
"KRN",8994,110,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,110,2,1,1,0)
^^2^2^2971014^^^
"KRN",8994,110,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,110,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,110,2,"B","ENCOUNTER IEN",1)

"KRN",8994,110,2,"PARAMSEQ",1,1)

"KRN",8994,110,3,0)
^^3^3^2971014^^^^
"KRN",8994,110,3,1,0)
1 - Yes, at least one diagnosis is associated with encounter
"KRN",8994,110,3,2,0)

"KRN",8994,110,3,3,0)
0 - No, no diagnoses are associated with encounter
"KRN",8994,111,-1)
0^2
"KRN",8994,111,0)
SDOE ASSIGNED A PROCEDURE^CPT^SDOERPC^1^P
"KRN",8994,111,1,0)
^^2^2^2971014^^^^
"KRN",8994,111,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator on whether at
"KRN",8994,111,1,2,0)
least one procedure has been associated with an encounter.
"KRN",8994,111,2,0)
^8994.02A^1^1
"KRN",8994,111,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,111,2,1,1,0)
^^2^2^2971014^^
"KRN",8994,111,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,111,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,111,2,"B","ENCOUNTER IEN",1)

"KRN",8994,111,2,"PARAMSEQ",1,1)

"KRN",8994,111,3,0)
^^3^3^2971014^^^
"KRN",8994,111,3,1,0)
1 - Yes, at least one procedure is assoicated with encounter
"KRN",8994,111,3,2,0)

"KRN",8994,111,3,3,0)
0 - No, no procedures are associated with encounter
"KRN",8994,112,-1)
0^9
"KRN",8994,112,0)
SDOE FIND PROVIDER^FINDPRV^SDOERPC^1^P
"KRN",8994,112,1,0)
^^2^2^2971014^^^^
"KRN",8994,112,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator
"KRN",8994,112,1,2,0)
on whether a specific provider is associated with an encounter.
"KRN",8994,112,2,0)
^8994.02A^2^2
"KRN",8994,112,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,112,2,1,1,0)
^^2^2^2971014^
"KRN",8994,112,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,112,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,112,2,2,0)
PRACTITIONER ID^1^^1^2
"KRN",8994,112,2,2,1,0)
^^2^2^2971014^
"KRN",8994,112,2,2,1,1,0)
This is the internal entry number of an entry in the NEW PERSON
"KRN",8994,112,2,2,1,2,0)
[#200 - ^VA(200)] file for a practitioner.
"KRN",8994,112,2,"B","ENCOUNTER IEN",1)

"KRN",8994,112,2,"B","PRACTITIONER ID",2)

"KRN",8994,112,2,"PARAMSEQ",1,1)

"KRN",8994,112,2,"PARAMSEQ",2,2)

"KRN",8994,112,3,0)
^^3^3^2971014^^^
"KRN",8994,112,3,1,0)
1 - yes, specific provider is associated with encounter
"KRN",8994,112,3,2,0)

"KRN",8994,112,3,3,0)
0 - no, provider is not associated with encounter
"KRN",8994,113,-1)
0^4
"KRN",8994,113,0)
SDOE FIND DIAGNOSIS^FINDDX^SDOERPC^1^P
"KRN",8994,113,1,0)
^^2^2^2971014^^^^
"KRN",8994,113,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator on
"KRN",8994,113,1,2,0)
whether a specific diagnosis is associated with an encounter.
"KRN",8994,113,2,0)
^8994.02A^2^2
"KRN",8994,113,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,113,2,1,1,0)
^^2^2^2971014^
"KRN",8994,113,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,113,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,113,2,2,0)
DIAGNOSIS IEN^1^^1^2
"KRN",8994,113,2,2,1,0)
^^2^2^2971014^
"KRN",8994,113,2,2,1,1,0)
This is the internal entry number of an entry in the ICD
"KRN",8994,113,2,2,1,2,0)
DIAGNOSIS [#80 - ^ICD9] file.
"KRN",8994,113,2,"B","DIAGNOSIS IEN",2)

"KRN",8994,113,2,"B","ENCOUNTER IEN",1)

"KRN",8994,113,2,"PARAMSEQ",1,1)

"KRN",8994,113,2,"PARAMSEQ",2,2)

"KRN",8994,113,3,0)
^^3^3^2971014^^^
"KRN",8994,113,3,1,0)
1 - yes, specific diagnosis is associated with encounter
"KRN",8994,113,3,2,0)

"KRN",8994,113,3,3,0)
0 - no, diagnosis is not associated with encounter
"KRN",8994,114,-1)
0^8
"KRN",8994,114,0)
SDOE FIND PROCEDURE^FINDCPT^SDOERPC^1^P
"KRN",8994,114,1,0)
^^2^2^2971014^^^
"KRN",8994,114,1,1,0)
This Remote Procedure Call (RPC) returns a boolean indicator on
"KRN",8994,114,1,2,0)
whether a specific procedure is associated with an encounter.
"KRN",8994,114,2,0)
^8994.02A^2^2
"KRN",8994,114,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,114,2,1,1,0)
^^2^2^2971014^
"KRN",8994,114,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,114,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,114,2,2,0)
CPT IEN^1^^1^2
"KRN",8994,114,2,2,1,0)
^^1^1^2971014^
"KRN",8994,114,2,2,1,1,0)
This is the internal entry number of an entry in the CPT [#81 - ^ICPT] file.
"KRN",8994,114,2,"B","CPT IEN",2)

"KRN",8994,114,2,"B","ENCOUNTER IEN",1)

"KRN",8994,114,2,"PARAMSEQ",1,1)

"KRN",8994,114,2,"PARAMSEQ",2,2)

"KRN",8994,114,3,0)
^^3^3^2971014^^
"KRN",8994,114,3,1,0)
1 - yes, specific procedure is associated with encounter
"KRN",8994,114,3,2,0)

"KRN",8994,114,3,3,0)
0 - no, procedure is not associated with encounter
"KRN",8994,115,-1)
0^6
"KRN",8994,115,0)
SDOE FIND FIRST STANDALONE^EXAE^SDOERPC^1^P
"KRN",8994,115,1,0)
^^8^8^2971024^^^^
"KRN",8994,115,1,1,0)
This Remote Procedure Call (RPC) returns the internal entry
"KRN",8994,115,1,2,0)
number of an OUTPATIENT ENCOUNTER file (#409.68) entry for the
"KRN",8994,115,1,3,0)
first the first standalone add/edit for a patient in a specified date range.
"KRN",8994,115,1,4,0)

"KRN",8994,115,1,5,0)
Use same date for begin and end dates for specific (single) date check.
"KRN",8994,115,1,6,0)

"KRN",8994,115,1,7,0)
Standalone encounter is an encounter with no parent and the originating
"KRN",8994,115,1,8,0)
process is 'Stop Code Addition'.
"KRN",8994,115,2,0)
^8994.02A^4^4
"KRN",8994,115,2,1,0)
PATIENT ID^1^^1^1
"KRN",8994,115,2,1,1,0)
^^1^1^2971014^
"KRN",8994,115,2,1,1,1,0)
This is the internal entry number of an entry in the PATIENT [#2 - ^DPT] file.
"KRN",8994,115,2,2,0)
BEGIN DATE/TIME^1^^1^2
"KRN",8994,115,2,2,1,0)
^^3^3^2971024^^^
"KRN",8994,115,2,2,1,1,0)
Beginning date and time in VA FileMan format.
"KRN",8994,115,2,2,1,2,0)

"KRN",8994,115,2,2,1,3,0)
Time is optional.
"KRN",8994,115,2,3,0)
END DATE/TIME^1^^1^3
"KRN",8994,115,2,3,1,0)
^^4^4^2971024^^
"KRN",8994,115,2,3,1,1,0)
Ending date and time in VA FileMan format.
"KRN",8994,115,2,3,1,2,0)

"KRN",8994,115,2,3,1,3,0)
Time is optional.
"KRN",8994,115,2,3,1,4,0)

"KRN",8994,115,2,4,0)
SEARCH FLAGS^1^^1^4
"KRN",8994,115,2,4,1,0)
^^7^7^2971020^^
"KRN",8994,115,2,4,1,1,0)
This parameter allows developers to set specific flags that are
"KRN",8994,115,2,4,1,2,0)
used as an API searches encounter records. The flags indicate how
"KRN",8994,115,2,4,1,3,0)
the API should function.
"KRN",8994,115,2,4,1,4,0)

"KRN",8994,115,2,4,1,5,0)
 Character  Description
"KRN",8994,115,2,4,1,6,0)
 ---------  -----------
"KRN",8994,115,2,4,1,7,0)
     C      Use only completed encounters
"KRN",8994,115,2,"B","BEGIN DATE/TIME",2)

"KRN",8994,115,2,"B","END DATE/TIME",3)

"KRN",8994,115,2,"B","PATIENT ID",1)

"KRN",8994,115,2,"B","SEARCH FLAGS",4)

"KRN",8994,115,2,"PARAMSEQ",1,1)

"KRN",8994,115,2,"PARAMSEQ",2,2)

"KRN",8994,115,2,"PARAMSEQ",3,3)

"KRN",8994,115,2,"PARAMSEQ",4,4)

"KRN",8994,115,3,0)
^^4^4^2971024^^^
"KRN",8994,115,3,1,0)
<pointer> - Outpatient Encounter ien for first standalone encounter found
"KRN",8994,115,3,2,0)
            in date range
"KRN",8994,115,3,3,0)

"KRN",8994,115,3,4,0)
 <null>   - if no encounter exists
"KRN",8994,116,-1)
0^12
"KRN",8994,116,0)
SDOE GET PRIMARY DIAGNOSIS^GETPDX^SDOERPC^1^P
"KRN",8994,116,1,0)
^^6^6^2971024^^^^
"KRN",8994,116,1,1,0)
This Remote Procedure Call (RPC) returns the internal entry number
"KRN",8994,116,1,2,0)
of the primary diagnosis code (ICD9) for an encounter.
"KRN",8994,116,1,3,0)

"KRN",8994,116,1,4,0)
Note: For encounters before 10/1/96, this RPC will always return 0.
"KRN",8994,116,1,5,0)
This primary diagnosis was not retrieved nor stored by the system
"KRN",8994,116,1,6,0)
for these 'old' encounters.
"KRN",8994,116,2,0)
^8994.02A^1^1
"KRN",8994,116,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,116,2,1,1,0)
^^2^2^2971014^
"KRN",8994,116,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,116,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,116,2,"B","ENCOUNTER IEN",1)

"KRN",8994,116,2,"PARAMSEQ",1,1)

"KRN",8994,116,3,0)
^^3^3^2971024^^^
"KRN",8994,116,3,1,0)
<pointer> - ien to ^ICD9 for primary dx.
"KRN",8994,116,3,2,0)

"KRN",8994,116,3,3,0)
   0      - no primary dx found for encounter
"KRN",8994,117,-1)
0^5
"KRN",8994,117,0)
SDOE FIND FIRST ENCOUNTER^EXOE^SDOERPC^1^P
"KRN",8994,117,1,0)
^^3^3^2971024^^^^
"KRN",8994,117,1,1,0)
This Remote Procedure Call (RPC) returns the internal entry number
"KRN",8994,117,1,2,0)
of an OUTPATIENT ENCOUNTER file (#409.68) entry for the first encounter
"KRN",8994,117,1,3,0)
for a patient in a specified date range.
"KRN",8994,117,2,0)
^8994.02A^4^4
"KRN",8994,117,2,1,0)
PATIENT ID^1^^1^1
"KRN",8994,117,2,1,1,0)
^^1^1^2971014^
"KRN",8994,117,2,1,1,1,0)
This is the internal entry number of an entry in the PATIENT [#2 - ^DPT] file.
"KRN",8994,117,2,2,0)
BEGIN DATE/TIME^1^^1^2
"KRN",8994,117,2,2,1,0)
^^3^3^2971024^^
"KRN",8994,117,2,2,1,1,0)
Beginning date and time in VA FileMan format.
"KRN",8994,117,2,2,1,2,0)

"KRN",8994,117,2,2,1,3,0)
Time is optional.
"KRN",8994,117,2,3,0)
END DATE/TIME^1^^1^3
"KRN",8994,117,2,3,1,0)
^^4^4^2971024^^
"KRN",8994,117,2,3,1,1,0)
End date and time in VA FileMan format.
"KRN",8994,117,2,3,1,2,0)

"KRN",8994,117,2,3,1,3,0)
Time is optional.
"KRN",8994,117,2,3,1,4,0)

"KRN",8994,117,2,4,0)
SEARCH FLAGS^1^^1^4
"KRN",8994,117,2,4,1,0)
^^7^7^2971020^^
"KRN",8994,117,2,4,1,1,0)
This parameter allows developers to set specific flags that are
"KRN",8994,117,2,4,1,2,0)
used as an API searches encounter records. The flags indicate how
"KRN",8994,117,2,4,1,3,0)
the API should function.
"KRN",8994,117,2,4,1,4,0)

"KRN",8994,117,2,4,1,5,0)
 Character  Description
"KRN",8994,117,2,4,1,6,0)
 ---------  -----------
"KRN",8994,117,2,4,1,7,0)
     C      Use only completed encounters
"KRN",8994,117,2,"B","BEGIN DATE/TIME",2)

"KRN",8994,117,2,"B","END DATE/TIME",3)

"KRN",8994,117,2,"B","PATIENT ID",1)

"KRN",8994,117,2,"B","SEARCH FLAGS",4)

"KRN",8994,117,2,"PARAMSEQ",1,1)

"KRN",8994,117,2,"PARAMSEQ",2,2)

"KRN",8994,117,2,"PARAMSEQ",3,3)

"KRN",8994,117,2,"PARAMSEQ",4,4)

"KRN",8994,117,3,0)
^^4^4^2971024^^^
"KRN",8994,117,3,1,0)
<pointer> - Outpatient Encounter ID for first encounter found in date range
"KRN",8994,117,3,2,0)

"KRN",8994,117,3,3,0)
 <null>   - if no encounter exists
"KRN",8994,117,3,4,0)

"KRN",8994,118,-1)
0^7
"KRN",8994,118,0)
SDOE FIND LAST STANDALONE^GETLAST^SDOERPC^1^P
"KRN",8994,118,1,0)
^^6^6^2971024^^^^
"KRN",8994,118,1,1,0)
This Remote Procedure Call (RPC) returns the internal entry
"KRN",8994,118,1,2,0)
number of an OUTPATIENT ENCOUNTER file (#409.68) entry for the
"KRN",8994,118,1,3,0)
last standalone add/edit for a patient in a specified date range.
"KRN",8994,118,1,4,0)

"KRN",8994,118,1,5,0)
Standalone encounter is an encounter with no parent and the
"KRN",8994,118,1,6,0)
originating process is 'Stop Code Addition'.
"KRN",8994,118,2,0)
^8994.02A^3^3
"KRN",8994,118,2,1,0)
PATIENT ID^1^^1^1
"KRN",8994,118,2,1,1,0)
^^1^1^2971024^^
"KRN",8994,118,2,1,1,1,0)
This is the internal entry number of an entry in the PATIENT [#2 - ^DPT] file.
"KRN",8994,118,2,2,0)
BEGIN DATE/TIME^1^^1^2
"KRN",8994,118,2,2,1,0)
^^4^4^2971024^^
"KRN",8994,118,2,2,1,1,0)
Beginning date and time in VA FileMan format.
"KRN",8994,118,2,2,1,2,0)

"KRN",8994,118,2,2,1,3,0)
Time is optional.
"KRN",8994,118,2,2,1,4,0)

"KRN",8994,118,2,3,0)
SEARCH FLAGS^1^^1^3
"KRN",8994,118,2,3,1,0)
^^8^8^2971020^
"KRN",8994,118,2,3,1,1,0)
This parameter allows developers to set specific flags that are
"KRN",8994,118,2,3,1,2,0)
used as an API searches encounter records. The flags indicate how
"KRN",8994,118,2,3,1,3,0)
the API should function.
"KRN",8994,118,2,3,1,4,0)

"KRN",8994,118,2,3,1,5,0)
 Character  Description
"KRN",8994,118,2,3,1,6,0)
 ---------  -----------
"KRN",8994,118,2,3,1,7,0)
     C      Use only completed encounters
"KRN",8994,118,2,3,1,8,0)

"KRN",8994,118,2,"B","BEGIN DATE/TIME",2)

"KRN",8994,118,2,"B","PATIENT ID",1)

"KRN",8994,118,2,"B","SEARCH FLAGS",3)

"KRN",8994,118,2,"PARAMSEQ",1,1)

"KRN",8994,118,2,"PARAMSEQ",2,2)

"KRN",8994,118,2,"PARAMSEQ",3,3)

"KRN",8994,118,3,0)
^^4^4^2971024^^^
"KRN",8994,118,3,1,0)
<pointer> - Outpatient Encounter ID for last standalone encounter found
"KRN",8994,118,3,2,0)
            after date
"KRN",8994,118,3,3,0)

"KRN",8994,118,3,4,0)
 <null>   - if no encounter exists
"KRN",8994,119,-1)
0^11
"KRN",8994,119,0)
SDOE GET GENERAL DATA^GETGEN^SDOERPC^2^P^^^1
"KRN",8994,119,1,0)
^^2^2^2971024^^^^
"KRN",8994,119,1,1,0)
This Remote Procedure Call (RPC) returns the Oth and other nodes of
"KRN",8994,119,1,2,0)
an Outpatient Encounter entry.
"KRN",8994,119,2,0)
^8994.02A^1^1
"KRN",8994,119,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,119,2,1,1,0)
^^2^2^2971014^
"KRN",8994,119,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,119,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,119,2,"B","ENCOUNTER IEN",1)

"KRN",8994,119,2,"PARAMSEQ",1,1)

"KRN",8994,119,3,0)
^^11^11^2971024^^^^
"KRN",8994,119,3,1,0)
The first piece of ';;' of each array item is the node.
"KRN",8994,119,3,2,0)
The second piece of ';;' of each array item is the node value.
"KRN",8994,119,3,3,0)

"KRN",8994,119,3,4,0)
Example Array Item: 0;;2970602.08^706^144^62^407^^2970805.1107^1^^9^1^2^10
"KRN",8994,119,3,5,0)

"KRN",8994,119,3,6,0)
Note:
"KRN",8994,119,3,7,0)
Currently(7/97), only fields .01 thru .08 and .1 thru .13 of the zeroth
"KRN",8994,119,3,8,0)
are returned. Other nodes and fields are not supported.
"KRN",8994,119,3,9,0)

"KRN",8994,119,3,10,0)
For detail information regarding the fields, see data dictionary for
"KRN",8994,119,3,11,0)
the Outpatient Encounter file (#409.68).
"KRN",8994,120,-1)
0^19
"KRN",8994,120,0)
SDOE PARSE GENERAL DATA^PARSE^SDOERPC^2^P^^^1
"KRN",8994,120,1,0)
^^2^2^2971120^^^^
"KRN",8994,120,1,1,0)
This Remote Procedure Call (RPC) will parse the data returned by
"KRN",8994,120,1,2,0)
the 'SDOE GET GENERAL DATA' RPC into individual field nodes. 
"KRN",8994,120,2,0)
^8994.02A^2^2
"KRN",8994,120,2,1,0)
ENCOUNTER DATA^2^^1^1
"KRN",8994,120,2,1,1,0)
^^9^9^2971120^^^^
"KRN",8994,120,2,1,1,1,0)
This array contains subscripts that correspond to each node of data for
"KRN",8994,120,2,1,1,2,0)
an Outpatient Encounter entry.
"KRN",8994,120,2,1,1,3,0)

"KRN",8994,120,2,1,1,4,0)
Note: Currently (7/97) only the zeroth node is returned. Also, only
"KRN",8994,120,2,1,1,5,0)
fields .01 thru .08 and .1 thru .13 of the zeroth are returned.
"KRN",8994,120,2,1,1,6,0)
Other nodes and fields are not supported.
"KRN",8994,120,2,1,1,7,0)

"KRN",8994,120,2,1,1,8,0)
For detail information regarding the fields, see data dictionary for
"KRN",8994,120,2,1,1,9,0)
the Outpatient Encounter file (#409.68).
"KRN",8994,120,2,2,0)
ENCOUNTER PARSE FORMAT^1^^1^2
"KRN",8994,120,2,2,1,0)
^^6^6^2971120^^^
"KRN",8994,120,2,2,1,1,0)
Defines format for parsed data.
"KRN",8994,120,2,2,1,2,0)

"KRN",8994,120,2,2,1,3,0)
Valid Values:
"KRN",8994,120,2,2,1,4,0)
-------------
"KRN",8994,120,2,2,1,5,0)
      INTERNAL - use internal format 
"KRN",8994,120,2,2,1,6,0)
      EXTERNAL - external/display format.
"KRN",8994,120,2,"B","ENCOUNTER DATA",1)

"KRN",8994,120,2,"B","ENCOUNTER PARSE FORMAT",2)

"KRN",8994,120,2,"PARAMSEQ",1,1)

"KRN",8994,120,2,"PARAMSEQ",2,2)

"KRN",8994,120,3,0)
^^20^20^2971120^^^^
"KRN",8994,120,3,1,0)
The first piece of ';;' of each array item is the field number.        
"KRN",8994,120,3,2,0)
The second piece of ';;' of each array item is the field value.
"KRN",8994,120,3,3,0)

"KRN",8994,120,3,4,0)
The parser will either use internal or external values for the
"KRN",8994,120,3,5,0)
field node values. The developer specifies internal/external via a parameter.
"KRN",8994,120,3,6,0)

"KRN",8994,120,3,7,0)
Example of external parsing:
"KRN",8994,120,3,8,0)
   .01;;Sep 04, 1997@11:00
"KRN",8994,120,3,9,0)
   .02;;ARDALINO,J
"KRN",8994,120,3,10,0)
   .03;;DERMATOLOGY
"KRN",8994,120,3,11,0)
   .04;;DERMATOLOGY
"KRN",8994,120,3,12,0)
   .05;;Sep 04, 1997@11:00
"KRN",8994,120,3,13,0)
   .06;;
"KRN",8994,120,3,14,0)
   .07;;Sep 22, 1997@21:25
"KRN",8994,120,3,15,0)
   .08;;STOP CODE ADDITION
"KRN",8994,120,3,16,0)
   .1;;REGULAR
"KRN",8994,120,3,17,0)
   .11;;TROY
"KRN",8994,120,3,18,0)
   .12;;CHECKED OUT
"KRN",8994,120,3,19,0)
   .13;;NSC
"KRN",8994,120,3,20,0)

"KRN",8994,121,-1)
0^15
"KRN",8994,121,0)
SDOE GET ZERO NODE^GETOE^SDOERPC^1^P
"KRN",8994,121,1,0)
^^2^2^2971014^^^^
"KRN",8994,121,1,1,0)
This Remote Procedure Call (RPC) returns the zeroth node of an
"KRN",8994,121,1,2,0)
Outpatient Encounter.
"KRN",8994,121,2,0)
^8994.02A^1^1
"KRN",8994,121,2,1,0)
ENCOUNTER IEN^1^^1^1
"KRN",8994,121,2,1,1,0)
^^2^2^2971014^
"KRN",8994,121,2,1,1,1,0)
This is the internal entry number of an entry in the OUTPATIENT
"KRN",8994,121,2,1,1,2,0)
ENCOUNTER [#409.68 - ^SCE] file.
"KRN",8994,121,2,"B","ENCOUNTER IEN",1)

"KRN",8994,121,2,"PARAMSEQ",1,1)

"KRN",8994,121,3,0)
^^12^12^2971014^^^^
"KRN",8994,121,3,1,0)
Zeroth node of Outpatient Encounter or Null.
"KRN",8994,121,3,2,0)

"KRN",8994,121,3,3,0)
Note:
"KRN",8994,121,3,4,0)
Only supported fields are returned. Those fields not supported/returned
"KRN",8994,121,3,5,0)
are null.
"KRN",8994,121,3,6,0)

"KRN",8994,121,3,7,0)
Currently(7/97), only fields .01 thru .08 and .1 thru .13 of the zeroth
"KRN",8994,121,3,8,0)
are returned. Other nodes and fields are not supported.
"KRN",8994,121,3,9,0)

"KRN",8994,121,3,10,0)
For detail information regarding the fields, see data dictionary for
"KRN",8994,121,3,11,0)
the Outpatient Encounter file (#409.68).
"KRN",8994,121,3,12,0)

"KRN",8994,125,-1)
0^16
"KRN",8994,125,0)
SDOE LIST ENCOUNTERS FOR DATES^LIST^SDOERPC^4^P^^^1
"KRN",8994,125,1,0)
^^2^2^2971014^^^^
"KRN",8994,125,1,1,0)
This Remote Procedure Call (RPC) returns a list of Outpatient
"KRN",8994,125,1,2,0)
Encounters for a specified date range.
"KRN",8994,125,2,0)
^8994.02A^2^2
"KRN",8994,125,2,1,0)
BEGIN DATE/TIME^1^^1^1
"KRN",8994,125,2,1,1,0)
^^3^3^2971014^
"KRN",8994,125,2,1,1,1,0)
Beginning date and time in VA FileMan format.
"KRN",8994,125,2,1,1,2,0)

"KRN",8994,125,2,1,1,3,0)
Time is optional.
"KRN",8994,125,2,2,0)
END DATE/TIME^1^^1^2
"KRN",8994,125,2,2,1,0)
^^4^4^2971014^
"KRN",8994,125,2,2,1,1,0)
End date and time in VA FileMan format.
"KRN",8994,125,2,2,1,2,0)

"KRN",8994,125,2,2,1,3,0)
Time is optional.
"KRN",8994,125,2,2,1,4,0)

"KRN",8994,125,2,"B","BEGIN DATE/TIME",1)

"KRN",8994,125,2,"B","END DATE/TIME",2)

"KRN",8994,125,2,"PARAMSEQ",1,1)

"KRN",8994,125,2,"PARAMSEQ",2,2)

"KRN",8994,125,3,0)
^^13^13^2971014^^^^
"KRN",8994,125,3,1,0)
The first piece of ';;' of each array item is the internal entry number.
"KRN",8994,125,3,2,0)
The second piece of ';;' of each array item is the value of the zeroth node.
"KRN",8994,125,3,3,0)

"KRN",8994,125,3,4,0)
Example Array Item: 1232;;2970602.08^706^144^62^407^^2970805.1107^1^^9^1^2^10
"KRN",8994,125,3,5,0)

"KRN",8994,125,3,6,0)

"KRN",8994,125,3,7,0)
Note:
"KRN",8994,125,3,8,0)
Currently(7/97) only the zeroth node is returned. Also,
"KRN",8994,125,3,9,0)
only fields .01 thru .08 and .1 thru .13 of the zeroth are
"KRN",8994,125,3,10,0)
returned. Other nodes and fields are not supported.
"KRN",8994,125,3,11,0)

"KRN",8994,125,3,12,0)
For detail information regarding the fields, see data dictionary
"KRN",8994,125,3,13,0)
for the Outpatient Encounter file (#409.68).
"KRN",8994,126,-1)
0^17
"KRN",8994,126,0)
SDOE LIST ENCOUNTERS FOR PAT^LISTPAT^SDOERPC^4^P^^^1
"KRN",8994,126,1,0)
^^2^2^2971120^^^^
"KRN",8994,126,1,1,0)
This Remote Procedure Call (RPC) returns a list of Outpatient
"KRN",8994,126,1,2,0)
Encounters for a specified patient and specified date range.
"KRN",8994,126,2,0)
^8994.02A^3^3
"KRN",8994,126,2,1,0)
BEGIN DATE/TIME^1^^1^2
"KRN",8994,126,2,1,1,0)
^^3^3^2971014^^
"KRN",8994,126,2,1,1,1,0)
Beginning date and time in VA FileMan format.
"KRN",8994,126,2,1,1,2,0)

"KRN",8994,126,2,1,1,3,0)
Time is optional.
"KRN",8994,126,2,2,0)
END DATE/TIME^1^^1^3
"KRN",8994,126,2,2,1,0)
^^4^4^2971014^
"KRN",8994,126,2,2,1,1,0)
End date and time in VA FileMan format.
"KRN",8994,126,2,2,1,2,0)

"KRN",8994,126,2,2,1,3,0)
Time is optional.
"KRN",8994,126,2,2,1,4,0)

"KRN",8994,126,2,3,0)
PATIENT ID^1^^1^1
"KRN",8994,126,2,3,1,0)
^^1^1^2971120^^
"KRN",8994,126,2,3,1,1,0)
This is the internal entry number of an entry in the PATIENT [#2 - ^DPT] file.
"KRN",8994,126,2,"B","BEGIN DATE/TIME",1)

"KRN",8994,126,2,"B","END DATE/TIME",2)

"KRN",8994,126,2,"B","PATIENT ID",3)

"KRN",8994,126,2,"PARAMSEQ",1,3)

"KRN",8994,126,2,"PARAMSEQ",2,1)

"KRN",8994,126,2,"PARAMSEQ",3,2)

"KRN",8994,126,3,0)
^^13^13^2971120^^^^
"KRN",8994,126,3,1,0)
The first piece of ';;' of each array item is the internal entry number.
"KRN",8994,126,3,2,0)
The second piece of ';;' of each array item is the value of the zeroth node.
"KRN",8994,126,3,3,0)

"KRN",8994,126,3,4,0)
Example Array Item: 1232;;2970602.08^706^144^62^407^^2970805.1107^1^^9^1^2^10
"KRN",8994,126,3,5,0)

"KRN",8994,126,3,6,0)

"KRN",8994,126,3,7,0)
Note:
"KRN",8994,126,3,8,0)
Currently(7/97) only the zeroth node is returned. Also,
"KRN",8994,126,3,9,0)
only fields .01 thru .08 and .1 thru .13 of the zeroth are
"KRN",8994,126,3,10,0)
returned. Other nodes and fields are not supported.
"KRN",8994,126,3,11,0)

"KRN",8994,126,3,12,0)
For detail information regarding the fields, see data dictionary
"KRN",8994,126,3,13,0)
for the Outpatient Encounter file (#409.68).
"KRN",8994,127,-1)
0^18
"KRN",8994,127,0)
SDOE LIST ENCOUNTERS FOR VISIT^LISTVST^SDOERPC^4^P^^^1
"KRN",8994,127,1,0)
^^2^2^2971014^^
"KRN",8994,127,1,1,0)
This Remote Procedure Call (RPC) returns a list of Outpatient
"KRN",8994,127,1,2,0)
Encounters for a specified visit.
"KRN",8994,127,2,0)
^8994.02A^1^1
"KRN",8994,127,2,1,0)
VISIT IEN^1^^1^1
"KRN",8994,127,2,1,1,0)
^^2^2^2971014^
"KRN",8994,127,2,1,1,1,0)
This is the internal entry number of an entry in the
"KRN",8994,127,2,1,1,2,0)
VISIT [#9000010 - ^AUPNVSIT] file.
"KRN",8994,127,2,"B","VISIT IEN",1)

"KRN",8994,127,2,"PARAMSEQ",1,1)

"KRN",8994,127,3,0)
^^12^12^2971014^^^
"KRN",8994,127,3,1,0)
The first piece of ';;' of each array item is the internal entry number.
"KRN",8994,127,3,2,0)
The second piece of ';;' of each array item is the value of the zeroth node.
"KRN",8994,127,3,3,0)

"KRN",8994,127,3,4,0)
Example Array Item: 1232;;2970602.08^706^144^62^407^^2970805.1107^1^^9^1^2^10
"KRN",8994,127,3,5,0)

"KRN",8994,127,3,6,0)
Note:
"KRN",8994,127,3,7,0)
Currently(7/97) only the zeroth node is returned. Also,
"KRN",8994,127,3,8,0)
only fields .01 thru .08 and .1 thru .13 of the zeroth are
"KRN",8994,127,3,9,0)
returned. Other nodes and fields are not supported.
"KRN",8994,127,3,10,0)

"KRN",8994,127,3,11,0)
For detail information regarding the fields, see data dictionary
"KRN",8994,127,3,12,0)
for the Outpatient Encounter file (#409.68).
"OER",16,0)
16^SD^^M.A.S.^
"OER",16,1,0)
^100.9951PA^2^2
"OER",16,1,1,0)
103
"OER",16,1,1,1,0)
^100.99511PA^1^1
"OER",16,1,1,1,1,0)
101
"OER",16,1,2,0)
645
"OER",16,1,2,1,0)
^100.99511PA^1^1
"OER",16,1,2,1,1,0)
121
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,22,0)
^9.49I^1^1
"PKG",16,22,1,0)
5.3^2930813^2930824
"PKG",16,22,1,"PAH",1,0)
131^2971017
"PKG",16,22,1,"PAH",1,1,0)
^^14^14^2980120
"PKG",16,22,1,"PAH",1,1,1,0)
                     **** ACRP Interface Toolkit ****
"PKG",16,22,1,"PAH",1,1,2,0)
 
"PKG",16,22,1,"PAH",1,1,3,0)
 This build contains the ACRP Interface Toolkit (AIT) supported by scheduling
"PKG",16,22,1,"PAH",1,1,4,0)
 that provides access to ACRP encounter data. Use of the AIT does not
"PKG",16,22,1,"PAH",1,1,5,0)
 require an integration agreement. 
"PKG",16,22,1,"PAH",1,1,6,0)

"PKG",16,22,1,"PAH",1,1,7,0)
 National and local developers should use the AIT to obtain the following
"PKG",16,22,1,"PAH",1,1,8,0)
 ACRP encounter related data:
"PKG",16,22,1,"PAH",1,1,9,0)
            - procedures
"PKG",16,22,1,"PAH",1,1,10,0)
            - diagnoses
"PKG",16,22,1,"PAH",1,1,11,0)
            - provider
"PKG",16,22,1,"PAH",1,1,12,0)
            - general administrative 
"PKG",16,22,1,"PAH",1,1,13,0)

"PKG",16,22,1,"PAH",1,1,14,0)
Refer to National Patch Module for more details on patch SD*5.3*131.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","SDOE")
0^6^B4776263
"RTN","SDOE",1,0)
SDOE ;ALB/MJK - ACRP APIs For An Encounter ;8/12/96
"RTN","SDOE",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOE",3,0)
 ;
"RTN","SDOE",4,0)
 ; ------------------------- cpt api's --------------------------
"RTN","SDOE",5,0)
 ;
"RTN","SDOE",6,0)
CPT(SDOE,SDERR) ; -- SDOE ASSIGNED A PROCEDURE                     [API ID: 65]
"RTN","SDOE",7,0)
 D PREP^SDQUT
"RTN","SDOE",8,0)
 Q $$CPT^SDOECPT(.SDOE,$G(SDERR))
"RTN","SDOE",9,0)
 ;
"RTN","SDOE",10,0)
GETCPT(SDOE,SDCPT,SDERR) ; -- SDOE GET PROCEDURES           [API ID: 61]
"RTN","SDOE",11,0)
 D PREP^SDQUT
"RTN","SDOE",12,0)
 G GETCPTG^SDOECPT
"RTN","SDOE",13,0)
 ;
"RTN","SDOE",14,0)
FINDCPT(SDOE,SDCPTID,SDERR) ; -- SDOE FIND PROCEDURE           [API ID: 71]
"RTN","SDOE",15,0)
 D PREP^SDQUT
"RTN","SDOE",16,0)
 Q $$FINDCPT^SDOECPT(.SDOE,.SDCPTID,$G(SDERR))
"RTN","SDOE",17,0)
 ;
"RTN","SDOE",18,0)
 ; ------------------------- dx api's --------------------------
"RTN","SDOE",19,0)
 ;
"RTN","SDOE",20,0)
DX(SDOE,SDERR) ; -- SDOE ASSIGNED A DIAGNOSIS                     [API ID: 64]
"RTN","SDOE",21,0)
 D PREP^SDQUT
"RTN","SDOE",22,0)
 Q $$DX^SDOEDX(.SDOE,$G(SDERR))
"RTN","SDOE",23,0)
 ;
"RTN","SDOE",24,0)
GETDX(SDOE,SDDX,SDERR) ; -- SDOE GET DIAGNOSES                    [API ID: 56]
"RTN","SDOE",25,0)
 D PREP^SDQUT
"RTN","SDOE",26,0)
 G GETDXG^SDOEDX
"RTN","SDOE",27,0)
 ;
"RTN","SDOE",28,0)
FINDDX(SDOE,SDDXID,SDERR) ; -- SDOE FIND DIAGNOSIS           [API ID: 70]
"RTN","SDOE",29,0)
 D PREP^SDQUT
"RTN","SDOE",30,0)
 Q $$FINDDX^SDOEDX(.SDOE,.SDDXID,$G(SDERR))
"RTN","SDOE",31,0)
 ;
"RTN","SDOE",32,0)
GETPDX(SDOE,SDERR) ; -- SDOE GET PRIMARY DIAGNOSIS            [API ID: 73]
"RTN","SDOE",33,0)
 D PREP^SDQUT
"RTN","SDOE",34,0)
 Q $$GETPDX^SDOEDX(.SDOE,$G(SDERR))
"RTN","SDOE",35,0)
 ;
"RTN","SDOE",36,0)
 ; ------------------------- provider api's --------------------------
"RTN","SDOE",37,0)
 ;
"RTN","SDOE",38,0)
PRV(SDOE,SDERR) ; -- SDOE ASSIGNED A PROVIDER                      [API ID: 63]
"RTN","SDOE",39,0)
 D PREP^SDQUT
"RTN","SDOE",40,0)
 Q $$PRV^SDOEPRV(.SDOE,$G(SDERR))
"RTN","SDOE",41,0)
 ;
"RTN","SDOE",42,0)
GETPRV(SDOE,SDPRV,SDERR) ; -- SDOE GET PROVIDERS            [API ID: 58]
"RTN","SDOE",43,0)
 D PREP^SDQUT
"RTN","SDOE",44,0)
 G GETPRVG^SDOEPRV
"RTN","SDOE",45,0)
 ;
"RTN","SDOE",46,0)
FINDPRV(SDOE,SDPRVID,SDERR) ; -- SDOE FIND PROVIDER            [API ID: 69]
"RTN","SDOE",47,0)
 D PREP^SDQUT
"RTN","SDOE",48,0)
 Q $$FINDPRV^SDOEPRV(.SDOE,.SDPRVID,$G(SDERR))
"RTN","SDOE",49,0)
 ;
"RTN","SDOE",50,0)
 ; --------------------------------oe api's--------------------------
"RTN","SDOE",51,0)
 ;
"RTN","SDOE",52,0)
GETOE(SDOE,SDERR) ; -- SDOE GET ZERO NODE                    [API ID: 98]
"RTN","SDOE",53,0)
 D PREP^SDQUT
"RTN","SDOE",54,0)
 Q $$GETOE^SDOEOE(.SDOE,$G(SDERR))
"RTN","SDOE",55,0)
 ;
"RTN","SDOE",56,0)
GETGEN(SDOE,SDAT,SDERR) ; -- SDOE GET GENERAL DATA                 [API ID: 76]
"RTN","SDOE",57,0)
 D PREP^SDQUT
"RTN","SDOE",58,0)
 G GETGENG^SDOEOE
"RTN","SDOE",59,0)
 ;
"RTN","SDOE",60,0)
PARSE(SDATA,SDFMT,SDY,SDERR) ; -- SDOE PARSE GENERAL DATA       [API ID: 78]
"RTN","SDOE",61,0)
 D PREP^SDQUT
"RTN","SDOE",62,0)
 G PARSEG^SDOEOE
"RTN","SDOE",63,0)
 ;
"RTN","SDOE",64,0)
EXAE(DFN,SDBEG,SDEND,SDFLAGS,SDERR) ; -- SDOE FIND FIRST STANDALONE [API ID: 72]
"RTN","SDOE",65,0)
 D PREP^SDQUT
"RTN","SDOE",66,0)
 Q $$EXAE^SDOEOE(.DFN,.SDBEG,.SDEND,$G(SDFLAGS),$G(SDERR))
"RTN","SDOE",67,0)
 ;
"RTN","SDOE",68,0)
GETLAST(DFN,SDBEG,SDFLAGS,SDERR) ; -- SDOE FIND LAST STANDALONE  [API ID: 75]
"RTN","SDOE",69,0)
 D PREP^SDQUT
"RTN","SDOE",70,0)
 Q $$GETLAST^SDOEOE(.DFN,.SDBEG,$G(SDFLAGS),$G(SDERR))
"RTN","SDOE",71,0)
 ;
"RTN","SDOE",72,0)
EXOE(DFN,SDBEG,SDEND,SDFLAGS,SDERR) ; -- SDOE FIND FIRST ENCOUNTER  [API ID: 74]
"RTN","SDOE",73,0)
 D PREP^SDQUT
"RTN","SDOE",74,0)
 Q $$EXOE^SDOEOE(.DFN,.SDBEG,.SDEND,$G(SDFLAGS),$G(SDERR))
"RTN","SDOE",75,0)
 ;
"RTN","SDOE",76,0)
ER(SDOE) ; -- api retrieves Extended Reference field
"RTN","SDOE",77,0)
 ;              - not supported generically
"RTN","SDOE",78,0)
 ;              - will be removed in the future
"RTN","SDOE",79,0)
 ;              - you need IA to use!
"RTN","SDOE",80,0)
 ;
"RTN","SDOE",81,0)
 Q $P($G(^SCE(SDOE,0)),U,9)
"RTN","SDOE",82,0)
 ;
"RTN","SDOECPT")
0^7^B9100723
"RTN","SDOECPT",1,0)
SDOECPT ;ALB/MJK - ACRP CPT APIs For An Encounter ;8/12/96
"RTN","SDOECPT",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOECPT",3,0)
 ;
"RTN","SDOECPT",4,0)
CPT(SDOE,SDERR) ; -- SDOE ASSIGNED A PROCEDURE
"RTN","SDOECPT",5,0)
 ;   API ID: 65
"RTN","SDOECPT",6,0)
 ;
"RTN","SDOECPT",7,0)
 ;
"RTN","SDOECPT",8,0)
 N SDOK
"RTN","SDOECPT",9,0)
 S SDOK=0
"RTN","SDOECPT",10,0)
 ;
"RTN","SDOECPT",11,0)
 ; -- do validation checks
"RTN","SDOECPT",12,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G CPTQ
"RTN","SDOECPT",13,0)
 IF $$OLD^SDOEUT(SDOE) S SDOK=$$OLDCPT(SDOE) G CPTQ
"RTN","SDOECPT",14,0)
 ;
"RTN","SDOECPT",15,0)
 S SDOK=$$CPT^PXAPIOE($$VIEN^SDOEUT(.SDOE),$G(SDERR))
"RTN","SDOECPT",16,0)
CPTQ Q SDOK
"RTN","SDOECPT",17,0)
 ;
"RTN","SDOECPT",18,0)
 ;
"RTN","SDOECPT",19,0)
GETCPT(SDOE,SDCPT,SDERR) ; -- SDOE GET PROCEDURES
"RTN","SDOECPT",20,0)
 ;   API ID: 61
"RTN","SDOECPT",21,0)
 ;
"RTN","SDOECPT",22,0)
 ;
"RTN","SDOECPT",23,0)
GETCPTG ; -- goto entry point
"RTN","SDOECPT",24,0)
 ; -- do validation checks
"RTN","SDOECPT",25,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G GETCPTQ
"RTN","SDOECPT",26,0)
 IF $$OLD^SDOEUT(SDOE) D OLDCPTS(SDOE,.SDCPT) G GETCPTQ
"RTN","SDOECPT",27,0)
 ;
"RTN","SDOECPT",28,0)
 D GETCPT^PXAPIOE($$VIEN^SDOEUT(.SDOE),.SDCPT,$G(SDERR))
"RTN","SDOECPT",29,0)
GETCPTQ Q
"RTN","SDOECPT",30,0)
 ;
"RTN","SDOECPT",31,0)
 ;
"RTN","SDOECPT",32,0)
FINDCPT(SDOE,SDCPTID,SDERR) ; -- SDOE FIND PROCEDURE
"RTN","SDOECPT",33,0)
 ;   API ID: 71
"RTN","SDOECPT",34,0)
 ;
"RTN","SDOECPT",35,0)
 ;
"RTN","SDOECPT",36,0)
 N SDCPTS,SDOK,I
"RTN","SDOECPT",37,0)
 S SDCPTS="SDCPTS"
"RTN","SDOECPT",38,0)
 ;
"RTN","SDOECPT",39,0)
 ; -- do validation checks
"RTN","SDOECPT",40,0)
 IF '$$VALCPT(.SDCPTID,$G(SDERR)) S SDOK=0 G FINDCPTQ
"RTN","SDOECPT",41,0)
 ;
"RTN","SDOECPT",42,0)
 D GETCPT(.SDOE,.SDCPTS,$G(SDERR))
"RTN","SDOECPT",43,0)
 S (I,SDOK)=0
"RTN","SDOECPT",44,0)
 F  S I=$O(SDCPTS(I)) Q:'I  S SDOK=(+SDCPTS(I)=SDCPTID) Q:SDOK
"RTN","SDOECPT",45,0)
FINDCPTQ Q SDOK
"RTN","SDOECPT",46,0)
 ;
"RTN","SDOECPT",47,0)
 ;
"RTN","SDOECPT",48,0)
VALCPT(SDCPTID,SDERR) ; -- validate CPT input
"RTN","SDOECPT",49,0)
 ;
"RTN","SDOECPT",50,0)
 ; -- do checks
"RTN","SDOECPT",51,0)
 IF SDCPTID,$D(^ICPT(SDCPTID,0)) Q 1
"RTN","SDOECPT",52,0)
 ;
"RTN","SDOECPT",53,0)
 ; -- build error msg
"RTN","SDOECPT",54,0)
 N SDIN,SDOUT
"RTN","SDOECPT",55,0)
 S SDIN("ID")=SDCPTID
"RTN","SDOECPT",56,0)
 S SDOUT("ID")=SDCPTID
"RTN","SDOECPT",57,0)
 D BLD^SDQVAL(4096800.005,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOECPT",58,0)
 Q 0
"RTN","SDOECPT",59,0)
 ;
"RTN","SDOECPT",60,0)
 ;
"RTN","SDOECPT",61,0)
OLDCPT(SDOE) ; -- at least one cpt for OLD encounter?
"RTN","SDOECPT",62,0)
 N SDXARY
"RTN","SDOECPT",63,0)
 D OLDCPTS(SDOE,"SDXARY")
"RTN","SDOECPT",64,0)
 Q (+$G(SDXARY)>0)
"RTN","SDOECPT",65,0)
 ;
"RTN","SDOECPT",66,0)
OLDCPTS(SDOE,SDARY) ; -- get cpt's for OLD encounter
"RTN","SDOECPT",67,0)
 N SDIEN,SDCNT,Y,X,SDYARY
"RTN","SDOECPT",68,0)
 D COUNT(.SDOE,"SDYARY")
"RTN","SDOECPT",69,0)
 S (SDIEN,SDCNT)=0
"RTN","SDOECPT",70,0)
 F  S SDIEN=$O(SDYARY(SDIEN)) Q:'SDIEN  D
"RTN","SDOECPT",71,0)
 . S SDCNT=SDCNT+1,X=$G(SDYARY(SDIEN))
"RTN","SDOECPT",72,0)
 . S $P(Y,U,1)=SDIEN       ; -- cpt ien
"RTN","SDOECPT",73,0)
 . S $P(Y,U,16)=+X         ; -- quantity
"RTN","SDOECPT",74,0)
 . S @SDARY@(SDIEN)=Y
"RTN","SDOECPT",75,0)
 S @SDARY=SDCNT
"RTN","SDOECPT",76,0)
 Q
"RTN","SDOECPT",77,0)
 ;
"RTN","SDOECPT",78,0)
COUNT(SDOE,SDZARY) ; -- count/find cpt's for OLD encounter
"RTN","SDOECPT",79,0)
 N SDFN,SDATE,SDCL,SDT,SDSC,SDSC0,SDPR,SDPROC,I,SDOE0
"RTN","SDOECPT",80,0)
 S SDOE0=$G(^SCE(SDOE,0))
"RTN","SDOECPT",81,0)
 S SDFN=+$P(SDOE0,U,2)
"RTN","SDOECPT",82,0)
 S SDATE=+SDOE0
"RTN","SDOECPT",83,0)
 S SDCL=+$P(SDOE0,U,4)
"RTN","SDOECPT",84,0)
 S SDT=+$G(^SDV("ADT",SDFN,$P(SDATE,".")))
"RTN","SDOECPT",85,0)
 ;
"RTN","SDOECPT",86,0)
 S SDSC=0 F  S SDSC=$O(^SDV(SDT,"CS",SDSC)) Q:'SDSC  D
"RTN","SDOECPT",87,0)
 . S SDSC0=$G(^SDV(SDT,"CS",SDSC,0))
"RTN","SDOECPT",88,0)
 . S SDPR=$G(^SDV(SDT,"CS",SDSC,"PR"))
"RTN","SDOECPT",89,0)
 .; 
"RTN","SDOECPT",90,0)
 .; -- only for clinic assoicated with encounter
"RTN","SDOECPT",91,0)
 .;    ('old' data lumped all cpts together for day)
"RTN","SDOECPT",92,0)
 .;
"RTN","SDOECPT",93,0)
 . IF $P($G(^DIC(40.7,+SDSC0,0)),U,2)=900,$P(SDSC0,U,3)=SDCL D
"RTN","SDOECPT",94,0)
 .. F I=1:1:5 S SDPROC=+$P(SDPR,U,I) IF $D(^ICPT(SDPROC,0)) S @SDZARY@(SDPROC)=$G(@SDZARY@(SDPROC))+1
"RTN","SDOECPT",95,0)
 Q
"RTN","SDOECPT",96,0)
 ;
"RTN","SDOEDX")
0^8^B9561426
"RTN","SDOEDX",1,0)
SDOEDX ;ALB/MJK - ACRP DX APIs For An Encounter ;8/12/96
"RTN","SDOEDX",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOEDX",3,0)
 ;
"RTN","SDOEDX",4,0)
DX(SDOE,SDERR) ; -- SDOE ASSIGNED A DIAGNOSIS
"RTN","SDOEDX",5,0)
 ;   API ID: 64
"RTN","SDOEDX",6,0)
 ;
"RTN","SDOEDX",7,0)
 ;
"RTN","SDOEDX",8,0)
 N SDOK
"RTN","SDOEDX",9,0)
 S SDOK=0
"RTN","SDOEDX",10,0)
 ;
"RTN","SDOEDX",11,0)
 ; -- do validation checks
"RTN","SDOEDX",12,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G DXQ
"RTN","SDOEDX",13,0)
 IF $$OLD^SDOEUT(SDOE) S SDOK=$$OLDDX(SDOE) G DXQ
"RTN","SDOEDX",14,0)
 ;
"RTN","SDOEDX",15,0)
 S SDOK=$$DX^PXAPIOE($$VIEN^SDOEUT(.SDOE),$G(SDERR))
"RTN","SDOEDX",16,0)
DXQ Q SDOK
"RTN","SDOEDX",17,0)
 ;
"RTN","SDOEDX",18,0)
 ;
"RTN","SDOEDX",19,0)
GETDX(SDOE,SDDX,SDERR) ; -- SDOE GET DIAGNOSES
"RTN","SDOEDX",20,0)
 ;   API ID: 56
"RTN","SDOEDX",21,0)
 ;
"RTN","SDOEDX",22,0)
 ;
"RTN","SDOEDX",23,0)
GETDXG ; -- goto entry point
"RTN","SDOEDX",24,0)
 ;
"RTN","SDOEDX",25,0)
 ; -- do validation checks
"RTN","SDOEDX",26,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G GETDXQ
"RTN","SDOEDX",27,0)
 IF $$OLD^SDOEUT(SDOE) D OLDDXS(SDOE,.SDDX) G GETDXQ
"RTN","SDOEDX",28,0)
 ;
"RTN","SDOEDX",29,0)
 D GETDX^PXAPIOE($$VIEN^SDOEUT(.SDOE),.SDDX,$G(SDERR))
"RTN","SDOEDX",30,0)
GETDXQ Q
"RTN","SDOEDX",31,0)
 ;
"RTN","SDOEDX",32,0)
 ;
"RTN","SDOEDX",33,0)
FINDDX(SDOE,SDDXID,SDERR) ; -- SDOE FIND DIAGNOSIS
"RTN","SDOEDX",34,0)
 ;   API ID: 70
"RTN","SDOEDX",35,0)
 ;
"RTN","SDOEDX",36,0)
 ;
"RTN","SDOEDX",37,0)
 N SDDXS,SDOK,I
"RTN","SDOEDX",38,0)
 S SDDXS="SDDXS"
"RTN","SDOEDX",39,0)
 ;
"RTN","SDOEDX",40,0)
 ; -- do validation checks
"RTN","SDOEDX",41,0)
 IF '$$VALDX(.SDDXID,$G(SDERR)) S SDOK=0 G FINDDXQ
"RTN","SDOEDX",42,0)
 ;
"RTN","SDOEDX",43,0)
 D GETDX(.SDOE,.SDDXS,$G(SDERR))
"RTN","SDOEDX",44,0)
 S (I,SDOK)=0
"RTN","SDOEDX",45,0)
 F  S I=$O(SDDXS(I)) Q:'I  S SDOK=(+SDDXS(I)=SDDXID) Q:SDOK
"RTN","SDOEDX",46,0)
FINDDXQ Q SDOK
"RTN","SDOEDX",47,0)
 ;
"RTN","SDOEDX",48,0)
 ;
"RTN","SDOEDX",49,0)
GETPDX(SDOE,SDERR) ; -- SDOE GET PRIMARY DIAGNOSIS
"RTN","SDOEDX",50,0)
 ;   API ID: 73
"RTN","SDOEDX",51,0)
 ;
"RTN","SDOEDX",52,0)
 ;
"RTN","SDOEDX",53,0)
 N SDDXS,I,SDPDX,CNT
"RTN","SDOEDX",54,0)
 S SDDXS="SDDXS"
"RTN","SDOEDX",55,0)
 D GETDX(.SDOE,.SDDXS,$G(SDERR))
"RTN","SDOEDX",56,0)
 ;
"RTN","SDOEDX",57,0)
 ; -- how many are primaries / kill secondaries from array
"RTN","SDOEDX",58,0)
 S (CNT,I)=0
"RTN","SDOEDX",59,0)
 F  S I=$O(SDDXS(I)) Q:'I  S X=$P(SDDXS(I),"^",12) S:X="P" CNT=CNT+1 K:X'="P" SDDXS(I)
"RTN","SDOEDX",60,0)
 S SDPDX=+$G(SDDXS(+$O(SDDXS(0))))
"RTN","SDOEDX",61,0)
 ;
"RTN","SDOEDX",62,0)
 ; -- check for too many primaries & build error msg
"RTN","SDOEDX",63,0)
 IF CNT>1 D
"RTN","SDOEDX",64,0)
 . N DFN,DFN0,SDIN,SDOUT,Y,I,VA
"RTN","SDOEDX",65,0)
 . ;
"RTN","SDOEDX",66,0)
 . S SDPDX=0
"RTN","SDOEDX",67,0)
 . S DFN=+$P($G(^SCE(+SDOE,0)),"^",2)
"RTN","SDOEDX",68,0)
 . S DFN0=$G(^DPT(DFN,0))
"RTN","SDOEDX",69,0)
 . D PID^VADPT6
"RTN","SDOEDX",70,0)
 . ;
"RTN","SDOEDX",71,0)
 . S SDIN("ID")=SDOE,SDOUT("ID")=SDOE
"RTN","SDOEDX",72,0)
 . S SDIN("DFN")=DFN,SDOUT("DFN")=DFN
"RTN","SDOEDX",73,0)
 . S SDIN("PATNAME")=$P(DFN0,"^"),SDOUT("PATNAME")=$P(DFN0,"^")
"RTN","SDOEDX",74,0)
 . S SDIN("PID")=VA("PID"),SDOUT("PID")=VA("PID")
"RTN","SDOEDX",75,0)
 . ;
"RTN","SDOEDX",76,0)
 . S I=0,Y=""
"RTN","SDOEDX",77,0)
 . F  S I=$O(SDDX(I)) Q:'I  S Y=$P($G(^ICD9(+SDDXS,0)),"^")_"  "
"RTN","SDOEDX",78,0)
 . S SDIN("CODES")=Y,SDOUT("CODES")=Y
"RTN","SDOEDX",79,0)
 . ;
"RTN","SDOEDX",80,0)
 . D BLD^SDQVAL(4096800.025,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOEDX",81,0)
 ;
"RTN","SDOEDX",82,0)
GETPDXQ Q SDPDX
"RTN","SDOEDX",83,0)
 ;
"RTN","SDOEDX",84,0)
 ;
"RTN","SDOEDX",85,0)
VALDX(SDDXID,SDERR) ; -- validate dx input
"RTN","SDOEDX",86,0)
 ;
"RTN","SDOEDX",87,0)
 ; -- do checks
"RTN","SDOEDX",88,0)
 IF SDDXID,$D(^ICD9(SDDXID,0)) Q 1
"RTN","SDOEDX",89,0)
 ;
"RTN","SDOEDX",90,0)
 ; -- build error msg
"RTN","SDOEDX",91,0)
 N SDIN,SDOUT
"RTN","SDOEDX",92,0)
 S SDIN("ID")=SDDXID
"RTN","SDOEDX",93,0)
 S SDOUT("ID")=SDDXID
"RTN","SDOEDX",94,0)
 D BLD^SDQVAL(4096800.004,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOEDX",95,0)
 Q 0
"RTN","SDOEDX",96,0)
 ;
"RTN","SDOEDX",97,0)
 ;
"RTN","SDOEDX",98,0)
OLDDX(SDOE) ; -- at least one dx for OLD encounter?
"RTN","SDOEDX",99,0)
 Q ($O(^SDD(409.43,"OE",+SDOE,0))>0)
"RTN","SDOEDX",100,0)
 ;
"RTN","SDOEDX",101,0)
OLDDXS(SDOE,SDARY) ; -- get DX's for OLD encounter
"RTN","SDOEDX",102,0)
 N SDIEN,SDCNT,Y,X
"RTN","SDOEDX",103,0)
 S (SDIEN,SDCNT)=0
"RTN","SDOEDX",104,0)
 F  S SDIEN=$O(^SDD(409.43,"OE",SDOE,SDIEN)) Q:'SDIEN  D
"RTN","SDOEDX",105,0)
 . S SDCNT=SDCNT+1,X=$G(^SDD(409.43,SDIEN,0))
"RTN","SDOEDX",106,0)
 . S $P(Y,U,1)=+X                           ; -- dx ien
"RTN","SDOEDX",107,0)
 . S $P(Y,U,12)=$S($P(X,"^",3)=1:"P",1:"S") ; -- primary dx?
"RTN","SDOEDX",108,0)
 . S @SDARY@(SDIEN)=Y
"RTN","SDOEDX",109,0)
 S @SDARY=SDCNT
"RTN","SDOEDX",110,0)
 Q
"RTN","SDOEDX",111,0)
 ;
"RTN","SDOEOE")
0^9^B22940393
"RTN","SDOEOE",1,0)
SDOEOE ;ALB/MJK - ACRP APIs For An Encounter ;8/12/96
"RTN","SDOEOE",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOEOE",3,0)
 ;
"RTN","SDOEOE",4,0)
OE0(SDOE) ; -- get only supported 0th node fields
"RTN","SDOEOE",5,0)
 Q $$OE0^SDOEQ(.SDOE)  ; -- in SDOEQ for SCAN speed reasons
"RTN","SDOEOE",6,0)
 ;
"RTN","SDOEOE",7,0)
 ;
"RTN","SDOEOE",8,0)
GETOE(SDOE,SDERR) ; -- SDOE GET ZERO NODE
"RTN","SDOEOE",9,0)
 ;   API ID: 98
"RTN","SDOEOE",10,0)
 ;
"RTN","SDOEOE",11,0)
 ;
"RTN","SDOEOE",12,0)
 Q $S($$VALOE(.SDOE,$G(SDERR)):$$OE0^SDOEQ(.SDOE),1:"")
"RTN","SDOEOE",13,0)
 ;
"RTN","SDOEOE",14,0)
 ;
"RTN","SDOEOE",15,0)
GETGEN(SDOE,SDAT,SDERR) ; -- SDOE GET GENERAL DATA
"RTN","SDOEOE",16,0)
 ;   API ID: 76
"RTN","SDOEOE",17,0)
 ;
"RTN","SDOEOE",18,0)
 ;
"RTN","SDOEOE",19,0)
GETGENG ; -- goto entry point
"RTN","SDOEOE",20,0)
 ; -- do validation checks
"RTN","SDOEOE",21,0)
 IF '$$VALOE(.SDOE,$G(SDERR)) G GETGENQ
"RTN","SDOEOE",22,0)
 ;
"RTN","SDOEOE",23,0)
 S @SDAT=SDOE
"RTN","SDOEOE",24,0)
 S @SDAT@(0)=$$OE0^SDOEQ(.SDOE)
"RTN","SDOEOE",25,0)
GETGENQ Q
"RTN","SDOEOE",26,0)
 ;
"RTN","SDOEOE",27,0)
 ;
"RTN","SDOEOE",28,0)
PARSE(SDATA,SDFMT,SDY,SDERR) ; -- SDOE PARSE GENERAL DATA
"RTN","SDOEOE",29,0)
 ;   API ID: 78
"RTN","SDOEOE",30,0)
 ;
"RTN","SDOEOE",31,0)
 ;
"RTN","SDOEOE",32,0)
PARSEG ; -- goto entry point
"RTN","SDOEOE",33,0)
 ; -- do validation checks
"RTN","SDOEOE",34,0)
 ; -- invalid format check
"RTN","SDOEOE",35,0)
 IF '$$VALFMT(SDFMT,$G(SDERR)) G PARSEQ
"RTN","SDOEOE",36,0)
 ;
"RTN","SDOEOE",37,0)
 ; -- no data check
"RTN","SDOEOE",38,0)
 IF $G(SDATA(0))="" D  G PARSEQ
"RTN","SDOEOE",39,0)
 . D BLD^SDQVAL(4096800.024,"","",$G(SDERR))
"RTN","SDOEOE",40,0)
 ;
"RTN","SDOEOE",41,0)
 IF SDFMT="EXTERNAL" D  G PARSEQ
"RTN","SDOEOE",42,0)
 . N SDX S SDX=$G(SDATA(0))
"RTN","SDOEOE",43,0)
 . S @SDY@(.01)=$$FMTE^XLFDT($P(SDX,"^",1))
"RTN","SDOEOE",44,0)
 . S @SDY@(.02)=$P($G(^DPT(+$P(SDX,"^",2),0)),"^")
"RTN","SDOEOE",45,0)
 . S @SDY@(.03)=$P($G(^DIC(40.7,+$P(SDX,"^",3),0)),"^")
"RTN","SDOEOE",46,0)
 . S @SDY@(.04)=$P($G(^SC(+$P(SDX,"^",4),0)),"^")
"RTN","SDOEOE",47,0)
 . S @SDY@(.05)=$$FMTE^XLFDT($P($G(^AUPNVSIT(+$P(SDX,"^",5),0)),"^"))
"RTN","SDOEOE",48,0)
 . S @SDY@(.06)=$$FMTE^XLFDT($P($G(^SCE(+$P(SDX,"^",6),0)),"^"))
"RTN","SDOEOE",49,0)
 . S @SDY@(.07)=$$FMTE^XLFDT($P(SDX,"^",7))
"RTN","SDOEOE",50,0)
 . ;
"RTN","SDOEOE",51,0)
 . S X=$P(SDX,"^",8)
"RTN","SDOEOE",52,0)
 . S @SDY@(.08)=$S(X=1:"APPOINTMENT",X=2:"STOP CODE ADDITION",X=3:"DISPOSITION",X=4:"CREDIT STOP CODE",1:"")
"RTN","SDOEOE",53,0)
 . ;
"RTN","SDOEOE",54,0)
 . ; S @SDY@(.09)=$P(SDX,"^",9) ; -- extended reference not supported
"RTN","SDOEOE",55,0)
 . S @SDY@(.1)=$P($G(^SD(409.1,+$P(SDX,"^",10),0)),"^")
"RTN","SDOEOE",56,0)
 . S @SDY@(.11)=$P($G(^DG(40.8,+$P(SDX,"^",11),0)),"^")
"RTN","SDOEOE",57,0)
 . S @SDY@(.12)=$P($G(^SD(409.63,+$P(SDX,"^",12),0)),"^")
"RTN","SDOEOE",58,0)
 . S @SDY@(.13)=$P($G(^DIC(8,+$P(SDX,"^",13),0)),"^")
"RTN","SDOEOE",59,0)
 ;
"RTN","SDOEOE",60,0)
 ;
"RTN","SDOEOE",61,0)
 IF SDFMT="INTERNAL" D  G PARSEQ
"RTN","SDOEOE",62,0)
 . N SDX S SDX=$G(SDATA(0))
"RTN","SDOEOE",63,0)
 . S @SDY@(.01)=$P(SDX,"^",1)
"RTN","SDOEOE",64,0)
 . S @SDY@(.02)=$P(SDX,"^",2)
"RTN","SDOEOE",65,0)
 . S @SDY@(.03)=$P(SDX,"^",3)
"RTN","SDOEOE",66,0)
 . S @SDY@(.04)=$P(SDX,"^",4)
"RTN","SDOEOE",67,0)
 . S @SDY@(.05)=$P(SDX,"^",5)
"RTN","SDOEOE",68,0)
 . S @SDY@(.06)=$P(SDX,"^",6)
"RTN","SDOEOE",69,0)
 . S @SDY@(.07)=$P(SDX,"^",7)
"RTN","SDOEOE",70,0)
 . S @SDY@(.08)=$P(SDX,"^",8)
"RTN","SDOEOE",71,0)
 . ;S @SDY@(.09)=$P(SDX,"^",9) ; -- extended reference not supported
"RTN","SDOEOE",72,0)
 . S @SDY@(.1)=$P(SDX,"^",10)
"RTN","SDOEOE",73,0)
 . S @SDY@(.11)=$P(SDX,"^",11)
"RTN","SDOEOE",74,0)
 . S @SDY@(.12)=$P(SDX,"^",12)
"RTN","SDOEOE",75,0)
 . S @SDY@(.13)=$P(SDX,"^",13)
"RTN","SDOEOE",76,0)
 ;
"RTN","SDOEOE",77,0)
PARSEQ Q
"RTN","SDOEOE",78,0)
 ;
"RTN","SDOEOE",79,0)
 ;
"RTN","SDOEOE",80,0)
GETOES(DFN,SDBEG,SDEND,SDOES,SDFLAGS,SDERR) ; -- quick build of CO encounters for patient
"RTN","SDOEOE",81,0)
 ;
"RTN","SDOEOE",82,0)
 ; -- do validation checks
"RTN","SDOEOE",83,0)
 IF '$$PAT^SDQVAL(.DFN,$G(SDERR)) G GETOESQ
"RTN","SDOEOE",84,0)
 IF '$$RANGE^SDQVAL(.SDBEG,.SDEND,$G(SDERR)) G GETOESQ
"RTN","SDOEOE",85,0)
 ;
"RTN","SDOEOE",86,0)
 N SDOE,SDE,X,SDT
"RTN","SDOEOE",87,0)
 S SDT=SDBEG-.000001,SDE=SDEND+$S($P(SDEND,".",2)="":.235959,1:"")
"RTN","SDOEOE",88,0)
 F  S SDT=$O(^SCE("ADFN",DFN,SDT)) Q:'SDT!(SDT>SDE)  D
"RTN","SDOEOE",89,0)
 . S SDOE=0 F  S SDOE=$O(^SCE("ADFN",DFN,SDT,SDOE)) Q:'SDOE  D
"RTN","SDOEOE",90,0)
 . . S X=$$OE0^SDOEQ(.SDOE)
"RTN","SDOEOE",91,0)
 . . IF $G(SDFLAGS)["C",'$P(X,"^",7) Q  ; -- quit if not "C"ompleted
"RTN","SDOEOE",92,0)
 . . S SDOES(SDT,SDOE)=X
"RTN","SDOEOE",93,0)
 ;
"RTN","SDOEOE",94,0)
GETOESQ Q
"RTN","SDOEOE",95,0)
 ;
"RTN","SDOEOE",96,0)
 ;
"RTN","SDOEOE",97,0)
EXAE(DFN,SDBEG,SDEND,SDFLAGS,SDERR) ; -- SDOE FIND FIRST STANDALONE
"RTN","SDOEOE",98,0)
 ;   API ID: 72
"RTN","SDOEOE",99,0)
 ;
"RTN","SDOEOE",100,0)
 ;
"RTN","SDOEOE",101,0)
 N SDOE,SDHIT,X,SDOES,SDT
"RTN","SDOEOE",102,0)
 D GETOES(.DFN,.SDBEG,.SDEND,.SDOES,$G(SDFLAGS),$G(SDERR))
"RTN","SDOEOE",103,0)
 S SDHIT=""
"RTN","SDOEOE",104,0)
 S SDT="" F  S SDT=$O(SDOES(SDT)) Q:'SDT  D  Q:SDHIT
"RTN","SDOEOE",105,0)
 . S SDOE=0 F  S SDOE=$O(SDOES(SDT,SDOE)) Q:'SDOE  D  Q:SDHIT
"RTN","SDOEOE",106,0)
 . . S X=SDOES(SDT,SDOE)
"RTN","SDOEOE",107,0)
 . . IF $P(X,"^",6) Q     ; parent exists
"RTN","SDOEOE",108,0)
 . . IF $P(X,"^",8)'=2 Q  ; stop code addition
"RTN","SDOEOE",109,0)
 . . S SDHIT=SDOE
"RTN","SDOEOE",110,0)
 ;
"RTN","SDOEOE",111,0)
 Q SDHIT
"RTN","SDOEOE",112,0)
 ;
"RTN","SDOEOE",113,0)
 ;
"RTN","SDOEOE",114,0)
GETLAST(DFN,SDBEG,SDFLAGS,SDERR) ; -- SDOE FIND LAST STANDALONE
"RTN","SDOEOE",115,0)
 ;   API ID: 75
"RTN","SDOEOE",116,0)
 ;
"RTN","SDOEOE",117,0)
 ;
"RTN","SDOEOE",118,0)
 N SDOE,X,SDOES,SDEND,SDT
"RTN","SDOEOE",119,0)
 S SDEND=9999999
"RTN","SDOEOE",120,0)
 D GETOES(.DFN,.SDBEG,.SDEND,.SDOES,$G(SDFLAGS),$G(SDERR))
"RTN","SDOEOE",121,0)
 S SDT="" F  S SDT=$O(SDOES(SDT)) Q:'SDT  D
"RTN","SDOEOE",122,0)
 . S SDOE=0 F  S SDOE=$O(SDOES(SDT,SDOE)) Q:'SDOE  D
"RTN","SDOEOE",123,0)
 . . S X=SDOES(SDT,SDOE)
"RTN","SDOEOE",124,0)
 . . IF $P(X,"^",6) K SDOES(SDT,SDOE) Q     ; parent exists
"RTN","SDOEOE",125,0)
 . . IF $P(X,"^",8)'=2 K SDOES(SDT,SDOE) Q  ; stop code addition
"RTN","SDOEOE",126,0)
 ;
"RTN","SDOEOE",127,0)
 S SDT=+$O(SDOES(""),-1)
"RTN","SDOEOE",128,0)
 Q $O(SDOES(SDT,""),-1)
"RTN","SDOEOE",129,0)
 ;
"RTN","SDOEOE",130,0)
 ;
"RTN","SDOEOE",131,0)
EXOE(DFN,SDBEG,SDEND,SDFLAGS,SDERR) ; -- SDOE FIND FIRST ENCOUNTER
"RTN","SDOEOE",132,0)
 ;   API ID: 74
"RTN","SDOEOE",133,0)
 ;
"RTN","SDOEOE",134,0)
 ;
"RTN","SDOEOE",135,0)
 N SDOES,SDT
"RTN","SDOEOE",136,0)
 D GETOES(.DFN,.SDBEG,.SDEND,.SDOES,$G(SDFLAGS),$G(SDERR))
"RTN","SDOEOE",137,0)
 S SDT=+$O(SDOES(""))
"RTN","SDOEOE",138,0)
 Q $O(SDOES(SDT,""))
"RTN","SDOEOE",139,0)
 ;
"RTN","SDOEOE",140,0)
 ;
"RTN","SDOEOE",141,0)
VALOE(SDOE,SDERR) ; -- validate sdoe input
"RTN","SDOEOE",142,0)
 ;
"RTN","SDOEOE",143,0)
 ; -- do checks
"RTN","SDOEOE",144,0)
 IF SDOE,$D(^SCE(SDOE,0)) Q 1
"RTN","SDOEOE",145,0)
 ;
"RTN","SDOEOE",146,0)
 ; -- build error msg
"RTN","SDOEOE",147,0)
 N SDIN,SDOUT
"RTN","SDOEOE",148,0)
 S SDIN("ID")=SDOE
"RTN","SDOEOE",149,0)
 S SDOUT("ID")=SDOE
"RTN","SDOEOE",150,0)
 D BLD^SDQVAL(4096800.001,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOEOE",151,0)
 Q 0
"RTN","SDOEOE",152,0)
 ;
"RTN","SDOEOE",153,0)
 ;
"RTN","SDOEOE",154,0)
VALFMT(SDFMT,SDERR) ; -- validate return format
"RTN","SDOEOE",155,0)
 ;
"RTN","SDOEOE",156,0)
 ; -- do checks
"RTN","SDOEOE",157,0)
 IF SDFMT="EXTERNAL"!(SDFMT="INTERNAL") Q 1
"RTN","SDOEOE",158,0)
 ;
"RTN","SDOEOE",159,0)
 ; -- build error msg
"RTN","SDOEOE",160,0)
 N SDIN,SDOUT
"RTN","SDOEOE",161,0)
 S SDIN("FORMAT")=SDFMT
"RTN","SDOEOE",162,0)
 S SDOUT("FORMAT")=SDFMT
"RTN","SDOEOE",163,0)
 D BLD^SDQVAL(4096800.023,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOEOE",164,0)
 Q 0
"RTN","SDOEOE",165,0)
 ;
"RTN","SDOEPRV")
0^10^B4624612
"RTN","SDOEPRV",1,0)
SDOEPRV ;ALB/MJK - ACRP Provider APIs For An Encounter ;8/12/96
"RTN","SDOEPRV",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOEPRV",3,0)
 ;
"RTN","SDOEPRV",4,0)
PRV(SDOE,SDERR) ; -- SDOE ASSIGNED A PROVIDER
"RTN","SDOEPRV",5,0)
 ;   API ID: 63
"RTN","SDOEPRV",6,0)
 ;
"RTN","SDOEPRV",7,0)
 ;
"RTN","SDOEPRV",8,0)
 N SDOK
"RTN","SDOEPRV",9,0)
 S SDOK=0
"RTN","SDOEPRV",10,0)
 ;
"RTN","SDOEPRV",11,0)
 ; -- do validation checks
"RTN","SDOEPRV",12,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G PRVQ
"RTN","SDOEPRV",13,0)
 IF $$OLD^SDOEUT(SDOE) S SDOK=$$OLDPRV(SDOE) G PRVQ
"RTN","SDOEPRV",14,0)
 ;
"RTN","SDOEPRV",15,0)
 S SDOK=$$PRV^PXAPIOE($$VIEN^SDOEUT(.SDOE),$G(SDERR))
"RTN","SDOEPRV",16,0)
PRVQ Q SDOK
"RTN","SDOEPRV",17,0)
 ;
"RTN","SDOEPRV",18,0)
 ;
"RTN","SDOEPRV",19,0)
GETPRV(SDOE,SDPRV,SDERR) ; -- SDOE GET PROVIDERS
"RTN","SDOEPRV",20,0)
 ;   API ID: 58
"RTN","SDOEPRV",21,0)
 ;
"RTN","SDOEPRV",22,0)
 ;
"RTN","SDOEPRV",23,0)
GETPRVG ;; -- goto entry point
"RTN","SDOEPRV",24,0)
 ; -- do validation checks
"RTN","SDOEPRV",25,0)
 IF '$$VALOE^SDOEOE(.SDOE,$G(SDERR)) G GETPRVQ
"RTN","SDOEPRV",26,0)
 IF $$OLD^SDOEUT(SDOE) D OLDPRVS(SDOE,.SDPRV) G GETPRVQ
"RTN","SDOEPRV",27,0)
 ;
"RTN","SDOEPRV",28,0)
 D GETPRV^PXAPIOE($$VIEN^SDOEUT(.SDOE),.SDPRV,$G(SDERR))
"RTN","SDOEPRV",29,0)
GETPRVQ Q
"RTN","SDOEPRV",30,0)
 ;
"RTN","SDOEPRV",31,0)
 ;
"RTN","SDOEPRV",32,0)
FINDPRV(SDOE,SDPRVID,SDERR) ; -- SDOE FIND PROVIDER
"RTN","SDOEPRV",33,0)
 ;   API ID: 69
"RTN","SDOEPRV",34,0)
 ;
"RTN","SDOEPRV",35,0)
 ;
"RTN","SDOEPRV",36,0)
 N SDPRVS,SDOK,I
"RTN","SDOEPRV",37,0)
 S SDPRVS="SDPRVS"
"RTN","SDOEPRV",38,0)
 ;
"RTN","SDOEPRV",39,0)
 ; -- do validation checks
"RTN","SDOEPRV",40,0)
 IF '$$VALPRV(.SDPRVID,$G(SDERR)) S SDOK=0 G FINDPRVQ
"RTN","SDOEPRV",41,0)
 ;
"RTN","SDOEPRV",42,0)
 D GETPRV(.SDOE,.SDPRVS,$G(SDERR))
"RTN","SDOEPRV",43,0)
 S (I,SDOK)=0
"RTN","SDOEPRV",44,0)
 F  S I=$O(SDPRVS(I)) Q:'I  S SDOK=(+SDPRVS(I)=SDPRVID) Q:SDOK
"RTN","SDOEPRV",45,0)
FINDPRVQ Q SDOK
"RTN","SDOEPRV",46,0)
 ;
"RTN","SDOEPRV",47,0)
 ;
"RTN","SDOEPRV",48,0)
VALPRV(SDPRVID,SDERR) ; -- validate provider input
"RTN","SDOEPRV",49,0)
 ;
"RTN","SDOEPRV",50,0)
 ; -- do checks
"RTN","SDOEPRV",51,0)
 IF SDPRVID,$D(^VA(200,SDPRVID,0)) Q 1
"RTN","SDOEPRV",52,0)
 ;
"RTN","SDOEPRV",53,0)
 ; -- build error msg
"RTN","SDOEPRV",54,0)
 N SDIN,SDOUT
"RTN","SDOEPRV",55,0)
 S SDIN("ID")=SDPRVID
"RTN","SDOEPRV",56,0)
 S SDOUT("ID")=SDPRVID
"RTN","SDOEPRV",57,0)
 D BLD^SDQVAL(4096800.003,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDOEPRV",58,0)
 Q 0
"RTN","SDOEPRV",59,0)
 ;
"RTN","SDOEPRV",60,0)
 ;
"RTN","SDOEPRV",61,0)
OLDPRV(SDOE) ; -- at least one provider for OLD encounter?
"RTN","SDOEPRV",62,0)
 Q ($O(^SDD(409.44,"OE",+SDOE,0))>0)
"RTN","SDOEPRV",63,0)
 ;
"RTN","SDOEPRV",64,0)
OLDPRVS(SDOE,SDARY) ; -- get provider's for OLD encounter
"RTN","SDOEPRV",65,0)
 N SDIEN,SDCNT,Y,X
"RTN","SDOEPRV",66,0)
 S (SDIEN,SDCNT)=0
"RTN","SDOEPRV",67,0)
 F  S SDIEN=$O(^SDD(409.44,"OE",SDOE,SDIEN)) Q:'SDIEN  D
"RTN","SDOEPRV",68,0)
 . S SDCNT=SDCNT+1,X=$G(^SDD(409.44,SDIEN,0))
"RTN","SDOEPRV",69,0)
 . S $P(Y,U,1)=+X          ; -- person ien
"RTN","SDOEPRV",70,0)
 . S $P(Y,U,6)=$P(X,"^",3) ; -- person class
"RTN","SDOEPRV",71,0)
 . S @SDARY@(SDIEN)=Y
"RTN","SDOEPRV",72,0)
 S @SDARY=SDCNT
"RTN","SDOEPRV",73,0)
 Q
"RTN","SDOEPRV",74,0)
 ;
"RTN","SDOEQ")
0^11^B20922547
"RTN","SDOEQ",1,0)
SDOEQ ;ALB/MJK - Encounter Query Object Methods ;8/12/96
"RTN","SDOEQ",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOEQ",3,0)
 ;
"RTN","SDOEQ",4,0)
 ;
"RTN","SDOEQ",5,0)
OE0(SDOE) ; -- get only supported 0th node fields
"RTN","SDOEQ",6,0)
 N X
"RTN","SDOEQ",7,0)
 S X=$G(^SCE(SDOE,0))
"RTN","SDOEQ",8,0)
 ; -- null EXTENDED REFERENCE field (piece 9)
"RTN","SDOEQ",9,0)
 Q $P(X,"^",1,8)_"^^"_$P(X,"^",10,13)
"RTN","SDOEQ",10,0)
 ;
"RTN","SDOEQ",11,0)
SDOE(SDOE,SDFIL,SDCB,SDSTOP) ; -- do filter and callback
"RTN","SDOEQ",12,0)
 N Y,Y0,SDOE0
"RTN","SDOEQ",13,0)
 S SDOE0=$$OE0(.SDOE)
"RTN","SDOEQ",14,0)
 S Y=SDOE,Y0=SDOE0
"RTN","SDOEQ",15,0)
 X:SDFIL]"" SDFIL
"RTN","SDOEQ",16,0)
 S Y=SDOE,Y0=SDOE0
"RTN","SDOEQ",17,0)
 IF $T X SDCB
"RTN","SDOEQ",18,0)
 Q
"RTN","SDOEQ",19,0)
 ;
"RTN","SDOEQ",20,0)
SCAN(SDQ,SDIR,SDERR) ; -- full scan of all needed records
"RTN","SDOEQ",21,0)
 N SDCB,SDSTOP,SDIDX,SDFIL,X,SDQDIR
"RTN","SDOEQ",22,0)
 S SDSTOP=0
"RTN","SDOEQ",23,0)
 S X=$G(SDIR),SDQDIR=$S(X="":"FORWARD",1:X)
"RTN","SDOEQ",24,0)
 D INDEX^SDQ(.SDQ,.SDIDX,"GET",$G(SDERR))
"RTN","SDOEQ",25,0)
 IF '$$ERRCHK^SDQUT($G(SDERR)) D SCANCB^SDQ(.SDQ,.SDCB,"GET",$G(SDERR))
"RTN","SDOEQ",26,0)
 IF '$$ERRCHK^SDQUT($G(SDERR)) D FILTER^SDQ(.SDQ,.SDFIL,"GET",$G(SDERR))
"RTN","SDOEQ",27,0)
 IF $$ERRCHK^SDQUT($G(SDERR)) G SCANQ
"RTN","SDOEQ",28,0)
 ;
"RTN","SDOEQ",29,0)
 IF SDIDX="PATIENT/DATE" D SCANPDT
"RTN","SDOEQ",30,0)
 IF SDIDX="VISIT" D SCANVST
"RTN","SDOEQ",31,0)
 IF SDIDX="PATIENT" D SCANPAT
"RTN","SDOEQ",32,0)
 IF SDIDX="DATE/TIME" D SCANDT
"RTN","SDOEQ",33,0)
 ;
"RTN","SDOEQ",34,0)
SCANQ Q
"RTN","SDOEQ",35,0)
 ;
"RTN","SDOEQ",36,0)
SCANPDT ; -- scan by patient and date
"RTN","SDOEQ",37,0)
 N SDFN,SDBEG,SDEND,SDDT,SDOE
"RTN","SDOEQ",38,0)
 D PAT^SDQ(.SDQ,.SDFN,"GET",$G(SDERR))
"RTN","SDOEQ",39,0)
 IF '$$ERRCHK^SDQUT($G(SDERR)) D DATE^SDQ(.SDQ,.SDBEG,.SDEND,"GET",$G(SDERR))
"RTN","SDOEQ",40,0)
 IF $$ERRCHK^SDQUT($G(SDERR)) G SCANPDTQ
"RTN","SDOEQ",41,0)
 ;
"RTN","SDOEQ",42,0)
 IF SDQDIR="FORWARD" D
"RTN","SDOEQ",43,0)
 . S SDDT=SDBEG-.000001
"RTN","SDOEQ",44,0)
 . F  S SDDT=$O(^SCE("ADFN",SDFN,SDDT)) Q:'SDDT!(SDDT>SDEND)  D  Q:SDSTOP
"RTN","SDOEQ",45,0)
 . . S SDOE=""
"RTN","SDOEQ",46,0)
 . . F  S SDOE=$O(^SCE("ADFN",SDFN,SDDT,SDOE)) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",47,0)
 . ;
"RTN","SDOEQ",48,0)
 ELSE  D
"RTN","SDOEQ",49,0)
 . S SDDT=SDEND+.000001
"RTN","SDOEQ",50,0)
 . F  S SDDT=$O(^SCE("ADFN",SDFN,SDDT),-1) Q:'SDDT!(SDDT<SDBEG)  D  Q:SDSTOP
"RTN","SDOEQ",51,0)
 . . S SDOE=""
"RTN","SDOEQ",52,0)
 . . F  S SDOE=$O(^SCE("ADFN",SDFN,SDDT,SDOE),-1) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",53,0)
 ;
"RTN","SDOEQ",54,0)
SCANPDTQ Q
"RTN","SDOEQ",55,0)
 ;
"RTN","SDOEQ",56,0)
SCANVST ; -- scan by visit
"RTN","SDOEQ",57,0)
 N SDVSIT,SDOE
"RTN","SDOEQ",58,0)
 S SDSTOP=0
"RTN","SDOEQ",59,0)
 D VISIT^SDQ(.SDQ,.SDVSIT,"GET",$G(SDERR))
"RTN","SDOEQ",60,0)
 IF $$ERRCHK^SDQUT($G(SDERR)) G SCANVSTQ
"RTN","SDOEQ",61,0)
 ;
"RTN","SDOEQ",62,0)
 IF SDQDIR="FORWARD" D
"RTN","SDOEQ",63,0)
 . S SDOE=""
"RTN","SDOEQ",64,0)
 . F  S SDOE=$O(^SCE("AVSIT",SDVSIT,SDOE)) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",65,0)
 . ;
"RTN","SDOEQ",66,0)
 ELSE  D
"RTN","SDOEQ",67,0)
 . S SDOE=""
"RTN","SDOEQ",68,0)
 . F  S SDOE=$O(^SCE("AVSIT",SDVSIT,SDOE),-1) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",69,0)
 ;
"RTN","SDOEQ",70,0)
SCANVSTQ Q
"RTN","SDOEQ",71,0)
 ;
"RTN","SDOEQ",72,0)
SCANDT ; -- date only scan
"RTN","SDOEQ",73,0)
 N SDDT,SDBEG,SDEND,SDOE
"RTN","SDOEQ",74,0)
 D DATE^SDQ(.SDQ,.SDBEG,.SDEND,"GET",$G(SDERR))
"RTN","SDOEQ",75,0)
 IF $$ERRCHK^SDQUT($G(SDERR)) G SCANDTQ
"RTN","SDOEQ",76,0)
 ;
"RTN","SDOEQ",77,0)
 IF SDQDIR="FORWARD" D
"RTN","SDOEQ",78,0)
 . S SDDT=SDBEG-.000001
"RTN","SDOEQ",79,0)
 . F  S SDDT=$O(^SCE("B",SDDT)) Q:SDDT=""!(SDDT>SDEND)  D  Q:SDSTOP
"RTN","SDOEQ",80,0)
 . . S SDOE=""
"RTN","SDOEQ",81,0)
 . . F  S SDOE=$O(^SCE("B",SDDT,SDOE)) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",82,0)
 ;
"RTN","SDOEQ",83,0)
 ELSE  D
"RTN","SDOEQ",84,0)
 . S SDDT=SDEND+.000001
"RTN","SDOEQ",85,0)
 . F  S SDDT=$O(^SCE("B",SDDT),-1) Q:SDDT=""!(SDDT<SDBEG)  D  Q:SDSTOP
"RTN","SDOEQ",86,0)
 . . S SDOE=""
"RTN","SDOEQ",87,0)
 . . F  S SDOE=$O(^SCE("B",SDDT,SDOE),-1) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",88,0)
 ;
"RTN","SDOEQ",89,0)
SCANDTQ Q
"RTN","SDOEQ",90,0)
 ;
"RTN","SDOEQ",91,0)
SCANPAT ; -- patient only scan
"RTN","SDOEQ",92,0)
 N SDFN,SDOE
"RTN","SDOEQ",93,0)
 S SDSTOP=0
"RTN","SDOEQ",94,0)
 D PAT^SDQ(.SDQ,.SDFN,"GET",$G(SDERR))
"RTN","SDOEQ",95,0)
 IF $$ERRCHK^SDQUT($G(SDERR)) G SCANPATQ
"RTN","SDOEQ",96,0)
 ;
"RTN","SDOEQ",97,0)
 IF SDQDIR="FORWARD" D
"RTN","SDOEQ",98,0)
 . S SDOE=""
"RTN","SDOEQ",99,0)
 . F  S SDOE=$O(^SCE("C",SDFN,SDOE)) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",100,0)
 . ;
"RTN","SDOEQ",101,0)
 ELSE  D
"RTN","SDOEQ",102,0)
 . S SDOE=""
"RTN","SDOEQ",103,0)
 . F  S SDOE=$O(^SCE("C",SDFN,SDOE),-1) Q:SDOE=""  D SDOE(.SDOE,.SDFIL,.SDCB,.SDSTOP) Q:SDSTOP
"RTN","SDOEQ",104,0)
 ;
"RTN","SDOEQ",105,0)
SCANPATQ Q
"RTN","SDOEQ",106,0)
 ;
"RTN","SDOEQ",107,0)
PAT(SDQ,SDFN,SDACT,SDERR) ; -- SDQ PATIENT
"RTN","SDOEQ",108,0)
 ;   API ID: 81
"RTN","SDOEQ",109,0)
 ;
"RTN","SDOEQ",110,0)
 ;
"RTN","SDOEQ",111,0)
PATG ; -- goto entry point
"RTN","SDOEQ",112,0)
 ; -- do validation checks
"RTN","SDOEQ",113,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G PATQ
"RTN","SDOEQ",114,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G PATQ
"RTN","SDOEQ",115,0)
 IF SDACT="SET",'$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) G PATQ
"RTN","SDOEQ",116,0)
 IF SDACT="SET",'$$PAT^SDQVAL(.SDFN,$G(SDERR)) G PATQ
"RTN","SDOEQ",117,0)
 ;
"RTN","SDOEQ",118,0)
 IF SDACT="SET" S @SDQUERY@(SDQ,"MASTER VALUE")=SDFN
"RTN","SDOEQ",119,0)
 IF SDACT="GET" S SDFN=$G(@SDQUERY@(SDQ,"MASTER VALUE"))
"RTN","SDOEQ",120,0)
PATQ Q
"RTN","SDOEQ",121,0)
 ;
"RTN","SDOEQ",122,0)
VISIT(SDQ,SDVST,SDACT,SDERR) ; -- SDQ VISIT
"RTN","SDOEQ",123,0)
 ;   API ID: 84
"RTN","SDOEQ",124,0)
 ;
"RTN","SDOEQ",125,0)
 ;
"RTN","SDOEQ",126,0)
VISITG ; -- goto entry point
"RTN","SDOEQ",127,0)
 ; -- do validation checks
"RTN","SDOEQ",128,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G VISITQ
"RTN","SDOEQ",129,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G VISITQ
"RTN","SDOEQ",130,0)
 IF SDACT="SET",'$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) G VISITQ
"RTN","SDOEQ",131,0)
 IF SDACT="SET",'$$VALVST^PXAPIOE(.SDVST,$G(SDERR)) G VISITQ
"RTN","SDOEQ",132,0)
 ;
"RTN","SDOEQ",133,0)
 IF SDACT="SET" S @SDQUERY@(SDQ,"MASTER VALUE")=SDVST
"RTN","SDOEQ",134,0)
 IF SDACT="GET" S SDVST=$G(@SDQUERY@(SDQ,"MASTER VALUE"))
"RTN","SDOEQ",135,0)
 ;
"RTN","SDOEQ",136,0)
VISITQ Q
"RTN","SDOEQ",137,0)
 ;
"RTN","SDOERPC")
0^13^B13786096
"RTN","SDOERPC",1,0)
SDOERPC ;ALB/MJK - ACRP RPCs For An Encounter ;8/12/96
"RTN","SDOERPC",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOERPC",3,0)
 ;
"RTN","SDOERPC",4,0)
 ; ------------------------- cpt rpcs --------------------------
"RTN","SDOERPC",5,0)
 ;
"RTN","SDOERPC",6,0)
CPT(SDOEY,SDOE) ; -- SDOE ASSIGNED A PROCEDURE             [API ID: 65]
"RTN","SDOERPC",7,0)
 S SDOEY=$$CPT^SDOECPT(SDOE)
"RTN","SDOERPC",8,0)
 Q
"RTN","SDOERPC",9,0)
 ;
"RTN","SDOERPC",10,0)
GETCPT(SDOEY,SDOE) ; -- SDOE GET PROCEDURES           [API ID: 61]
"RTN","SDOERPC",11,0)
 D GETCPT^SDOECPT(.SDOE,"SDOEY")
"RTN","SDOERPC",12,0)
 Q
"RTN","SDOERPC",13,0)
 ;
"RTN","SDOERPC",14,0)
FINDCPT(SDOEY,SDOE,SDCPTID) ; -- SDOE FIND PROCEDURE   [API ID: 71]
"RTN","SDOERPC",15,0)
 S SDOEY=$$FINDCPT^SDOECPT(SDOE,SDCPTID)
"RTN","SDOERPC",16,0)
 Q
"RTN","SDOERPC",17,0)
 ;
"RTN","SDOERPC",18,0)
 ; ------------------------- dx rpcs --------------------------
"RTN","SDOERPC",19,0)
 ;
"RTN","SDOERPC",20,0)
DX(SDOEY,SDOE) ; -- SDOE ASSIGNED A DIAGNOSIS             [API ID: 64]
"RTN","SDOERPC",21,0)
 S SDOEY=$$DX^SDOEDX(SDOE)
"RTN","SDOERPC",22,0)
 Q
"RTN","SDOERPC",23,0)
 ;
"RTN","SDOERPC",24,0)
GETDX(SDOEY,SDOE) ; -- SDOE GET DIAGNOSES                    [API ID: 56]
"RTN","SDOERPC",25,0)
 D GETDX^SDOEDX(.SDOE,"SDOEY")
"RTN","SDOERPC",26,0)
 Q
"RTN","SDOERPC",27,0)
 ;
"RTN","SDOERPC",28,0)
FINDDX(SDOEY,SDOE,SDDXID) ; -- SDOE FIND DIAGNOSIS           [API ID: 70]
"RTN","SDOERPC",29,0)
 S SDOEY=$$FINDDX^SDOEDX(SDOE,SDDXID)
"RTN","SDOERPC",30,0)
 Q
"RTN","SDOERPC",31,0)
 ;
"RTN","SDOERPC",32,0)
GETPDX(SDOEY,SDOE) ; -- SDOE GET PRIMARY DIAGNOSIS    [API ID: 73]
"RTN","SDOERPC",33,0)
 S SDOEY=$$GETPDX^SDOEDX(SDOE)
"RTN","SDOERPC",34,0)
 Q
"RTN","SDOERPC",35,0)
 ;
"RTN","SDOERPC",36,0)
 ; ------------------------- provider rpcs --------------------------
"RTN","SDOERPC",37,0)
 ;
"RTN","SDOERPC",38,0)
PRV(SDOEY,SDOE) ; -- SDOE ASSIGNED A PROVIDER              [API ID: 63]
"RTN","SDOERPC",39,0)
 S SDOEY=$$PRV^SDOEPRV(SDOE)
"RTN","SDOERPC",40,0)
 Q
"RTN","SDOERPC",41,0)
 ;
"RTN","SDOERPC",42,0)
GETPRV(SDOEY,SDOE) ; -- SDOE GET PROVIDERS            [API ID: 58]
"RTN","SDOERPC",43,0)
 D GETPRV^SDOEPRV(.SDOE,"SDOEY")
"RTN","SDOERPC",44,0)
 Q
"RTN","SDOERPC",45,0)
 ;
"RTN","SDOERPC",46,0)
FINDPRV(SDOEY,SDOE,SDPRVID) ; -- SDOE FIND PROVIDER    [API ID: 69]
"RTN","SDOERPC",47,0)
 S SDOEY=$$FINDPRV^SDOEPRV(SDOE,SDPRVID)
"RTN","SDOERPC",48,0)
 Q
"RTN","SDOERPC",49,0)
 ;
"RTN","SDOERPC",50,0)
 ; --------------------------------oe rpcs--------------------------
"RTN","SDOERPC",51,0)
 ;
"RTN","SDOERPC",52,0)
GETOE(SDOEY,SDOE) ; -- SDOE GET ZERO NODE                    [API ID: 98]
"RTN","SDOERPC",53,0)
 S SDOEY=$$GETOE^SDOEOE(SDOE)
"RTN","SDOERPC",54,0)
 Q
"RTN","SDOERPC",55,0)
 ;
"RTN","SDOERPC",56,0)
GETGEN(SDOEY,SDOE) ; -- SDOE GET GENERAL DATA         [API ID: 76]
"RTN","SDOERPC",57,0)
 N SDAT,SDATAOE
"RTN","SDOERPC",58,0)
 S SDAT="SDATAOE"
"RTN","SDOERPC",59,0)
 D GETGEN^SDOEOE(.SDOE,.SDAT)
"RTN","SDOERPC",60,0)
 D BUILD(.SDATAOE,.SDOEY)
"RTN","SDOERPC",61,0)
 Q
"RTN","SDOERPC",62,0)
 ;
"RTN","SDOERPC",63,0)
PARSE(SDOEY,SDATA,SDFMT) ; -- SDOE PARSE GENERAL DATA       [API ID: 78]
"RTN","SDOERPC",64,0)
 N SDY
"RTN","SDOERPC",65,0)
 S SDY="SDATAOE"
"RTN","SDOERPC",66,0)
 D PARSE^SDOEOE(.SDATA,.SDFMT,.SDY)
"RTN","SDOERPC",67,0)
 D BUILD(.SDATAOE,.SDOEY)
"RTN","SDOERPC",68,0)
 Q
"RTN","SDOERPC",69,0)
 ;
"RTN","SDOERPC",70,0)
EXAE(SDOEY,DFN,SDBEG,SDEND,SDFLAGS) ; -- SDOE FIND FIRST STANDALONE [API ID: 72]
"RTN","SDOERPC",71,0)
 S SDOEY=$$EXAE^SDOEOE(.DFN,.SDBEG,.SDEND,$G(SDFLAGS))
"RTN","SDOERPC",72,0)
 Q
"RTN","SDOERPC",73,0)
 ;
"RTN","SDOERPC",74,0)
GETLAST(SDOEY,DFN,SDBEG,SDFLAGS) ; -- SDOE FIND LAST STANDALONE          [API ID: 75]
"RTN","SDOERPC",75,0)
 S SDOEY=$$GETLAST^SDOEOE(.DFN,.SDBEG,$G(SDFLAGS))
"RTN","SDOERPC",76,0)
 Q
"RTN","SDOERPC",77,0)
 ;
"RTN","SDOERPC",78,0)
EXOE(SDOEY,DFN,SDBEG,SDEND,SDFLAGS) ; -- SDOE FIND FIRST ENCOUNTER  [API ID: 74]
"RTN","SDOERPC",79,0)
 S SDOEY=$$EXOE^SDOEOE(.DFN,.SDBEG,.SDEND,$G(SDFLAGS))
"RTN","SDOERPC",80,0)
 Q
"RTN","SDOERPC",81,0)
 ;
"RTN","SDOERPC",82,0)
 ;
"RTN","SDOERPC",83,0)
LIST(SDOEY,SDBEG,SDEND) ; -- RPC: SDOE LIST ENCOUNTERS FOR DATES
"RTN","SDOERPC",84,0)
 N SDQID
"RTN","SDOERPC",85,0)
 D OPEN(.SDOEY,.SDQID)
"RTN","SDOERPC",86,0)
 IF '$$ERRCHK^SDQUT() D INDEX^SDQ(.SDQID,"DATE/TIME","SET")
"RTN","SDOERPC",87,0)
 IF '$$ERRCHK^SDQUT() D DATE^SDQ(.SDQID,SDBEG,SDEND,"SET")
"RTN","SDOERPC",88,0)
 D CLOSE(.SDQID)
"RTN","SDOERPC",89,0)
LISTQ Q
"RTN","SDOERPC",90,0)
 ;
"RTN","SDOERPC",91,0)
LISTPAT(SDOEY,SDFN,SDBEG,SDEND) ; -- RPC: SDOE LIST ENCOUNTERS FOR PAT
"RTN","SDOERPC",92,0)
 N SDQID
"RTN","SDOERPC",93,0)
 D OPEN(.SDOEY,.SDQID)
"RTN","SDOERPC",94,0)
 IF '$$ERRCHK^SDQUT() D INDEX^SDQ(.SDQID,"PATIENT/DATE","SET")
"RTN","SDOERPC",95,0)
 IF '$$ERRCHK^SDQUT() D PAT^SDQ(.SDQID,SDFN,"SET")
"RTN","SDOERPC",96,0)
 IF '$$ERRCHK^SDQUT() D DATE^SDQ(.SDQID,SDBEG,SDEND,"SET")
"RTN","SDOERPC",97,0)
 D CLOSE(.SDQID)
"RTN","SDOERPC",98,0)
LISTPATQ Q
"RTN","SDOERPC",99,0)
 ;
"RTN","SDOERPC",100,0)
LISTVST(SDOEY,SDVST) ; -- RPC: SDOE LIST ENCOUNTERS FOR VISIT
"RTN","SDOERPC",101,0)
 N SDQID
"RTN","SDOERPC",102,0)
 D OPEN(.SDOEY,.SDQID)
"RTN","SDOERPC",103,0)
 IF '$$ERRCHK^SDQUT() D INDEX^SDQ(.SDQID,"VISIT","SET")
"RTN","SDOERPC",104,0)
 IF '$$ERRCHK^SDQUT() D VISIT^SDQ(.SDQID,SDVST,"SET")
"RTN","SDOERPC",105,0)
 D CLOSE(.SDQID)
"RTN","SDOERPC",106,0)
LISTVSTQ Q
"RTN","SDOERPC",107,0)
 ;
"RTN","SDOERPC",108,0)
OPEN(SDOEY,SDQID) ; -- initialize query
"RTN","SDOERPC",109,0)
 S SDOEY=$NA(^TMP("SD ENCOUNTER LIST",$J))
"RTN","SDOERPC",110,0)
 K ^TMP("SD ENCOUNTER LIST",$J)
"RTN","SDOERPC",111,0)
 D OPEN^SDQ(.SDQID)
"RTN","SDOERPC",112,0)
OPENQ Q
"RTN","SDOERPC",113,0)
 ;
"RTN","SDOERPC",114,0)
CLOSE(SDQID) ; -- finalize query + scan + close
"RTN","SDOERPC",115,0)
 IF '$$ERRCHK^SDQUT() D SCANCB^SDQ(.SDQID,"D CB^SDOERPC(Y,Y0,.SDSTOP)","SET")
"RTN","SDOERPC",116,0)
 IF '$$ERRCHK^SDQUT() D ACTIVE^SDQ(.SDQID,"TRUE","SET")
"RTN","SDOERPC",117,0)
 IF '$$ERRCHK^SDQUT() D SCAN^SDQ(.SDQID)
"RTN","SDOERPC",118,0)
 D CLOSE^SDQ(.SDQID)
"RTN","SDOERPC",119,0)
CLOSEQ Q
"RTN","SDOERPC",120,0)
 ;
"RTN","SDOERPC",121,0)
CB(SDOE,SDOE0,SDSTOP) ; -- callback for LIST* tags
"RTN","SDOERPC",122,0)
 S ^TMP("SD ENCOUNTER LIST",$J,SDOE)=SDOE_";;"_SDOE0
"RTN","SDOERPC",123,0)
 Q
"RTN","SDOERPC",124,0)
 ;
"RTN","SDOERPC",125,0)
BUILD(IN,OUT) ; -- build array for rpc lists
"RTN","SDOERPC",126,0)
 N IEN
"RTN","SDOERPC",127,0)
 S IEN=""
"RTN","SDOERPC",128,0)
 F  S IEN=$O(IN(IEN)) Q:IEN=""  S OUT(IEN)=IEN_";;"_IN(IEN)
"RTN","SDOERPC",129,0)
 Q
"RTN","SDOERPC",130,0)
 ;
"RTN","SDOEUT")
0^12^B180845
"RTN","SDOEUT",1,0)
SDOEUT ;ALB/MJK - ACRP Misc APIs For An Encounter ;8/12/96
"RTN","SDOEUT",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDOEUT",3,0)
 ;
"RTN","SDOEUT",4,0)
VIEN(SDOE) ; -- get visit ien from valid encounter
"RTN","SDOEUT",5,0)
 Q +$P($G(^SCE(SDOE,0)),U,5)
"RTN","SDOEUT",6,0)
 ;
"RTN","SDOEUT",7,0)
OLD(SDOE) ; -- check #1 to see if its an old encounter(before PCE)
"RTN","SDOEUT",8,0)
 ; -- check #2 to see if old data has been purged
"RTN","SDOEUT",9,0)
 Q $S($$DATE^SCDXUTL(+$G(^SCE(+SDOE,0))):0,1:'$$PURGE)
"RTN","SDOEUT",10,0)
 ;
"RTN","SDOEUT",11,0)
PURGE() ; -- is database and purge completed
"RTN","SDOEUT",12,0)
 Q 0
"RTN","SDOEUT",13,0)
 ;
"RTN","SDOEUT",14,0)
POST ; -- post error action logic
"RTN","SDOEUT",15,0)
 ;W !,"Error:",!
"RTN","SDOEUT",16,0)
 ;ZW DIPI ZW DIPE
"RTN","SDOEUT",17,0)
 Q
"RTN","SDOEUT",18,0)
 ;
"RTN","SDQ")
0^1^B24365238
"RTN","SDQ",1,0)
SDQ ;ALB/MJK - Query Object Methods ;8/12/96
"RTN","SDQ",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDQ",3,0)
 ;
"RTN","SDQ",4,0)
OPEN(SDQ,SDERR) ; -- SDQ OPEN                                     [API ID: 79]
"RTN","SDQ",5,0)
 D PREP^SDQUT
"RTN","SDQ",6,0)
 ;
"RTN","SDQ",7,0)
 ; -- get query object instance and set up query class info
"RTN","SDQ",8,0)
 IF '$$CREATE(.SDQ,"SD STANDARD ENCOUNTER QUERY",$G(SDERR)) G OPENQ
"RTN","SDQ",9,0)
 ;
"RTN","SDQ",10,0)
 ; -- do query object instance kills and sets
"RTN","SDQ",11,0)
 K @SDQUERY@(SDQ)
"RTN","SDQ",12,0)
 S @SDQUERY@(SDQ)=""
"RTN","SDQ",13,0)
 F X="SCAN" M @SDQUERY@(SDQ,X)=^TMP("SDQUERY CLASS",$J,SDQ,X)
"RTN","SDQ",14,0)
 D STOP^SDQPROP(.SDQ)
"RTN","SDQ",15,0)
 ;
"RTN","SDQ",16,0)
 ; -- do open actions
"RTN","SDQ",17,0)
 N SDOPEN
"RTN","SDQ",18,0)
 S SDOPEN=$G(^TMP("SDQUERY CLASS",$J,SDQ,"OPEN"))
"RTN","SDQ",19,0)
 IF SDOPEN]"" X SDOPEN
"RTN","SDQ",20,0)
OPENQ Q
"RTN","SDQ",21,0)
 ;
"RTN","SDQ",22,0)
CLOSE(SDQ,SDERR) ; -- SDQ CLOSE                            [API ID: 80]
"RTN","SDQ",23,0)
 D PREP^SDQUT
"RTN","SDQ",24,0)
 ;
"RTN","SDQ",25,0)
 ; -- do validation checks
"RTN","SDQ",26,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G CLOSEQ
"RTN","SDQ",27,0)
 ;
"RTN","SDQ",28,0)
 ; -- do close actions
"RTN","SDQ",29,0)
 N SDCLOSE
"RTN","SDQ",30,0)
 S SDCLOSE=$G(^TMP("SDQUERY CLASS",$J,SDQ,"CLOSE"))
"RTN","SDQ",31,0)
 IF SDCLOSE]"" X SDCLOSE
"RTN","SDQ",32,0)
 ;
"RTN","SDQ",33,0)
 ; -- do query object instance kills
"RTN","SDQ",34,0)
 K @SDQUERY@(SDQ)
"RTN","SDQ",35,0)
 ;
"RTN","SDQ",36,0)
 ; -- do query class kills
"RTN","SDQ",37,0)
 IF '$$DESTROY(.SDQ) G CLOSEQ
"RTN","SDQ",38,0)
 S SDQ=""
"RTN","SDQ",39,0)
CLOSEQ Q
"RTN","SDQ",40,0)
 ;
"RTN","SDQ",41,0)
CREATE(SDQ,SDQNAME,SDERR) ; -- query class level method for CREATE
"RTN","SDQ",42,0)
 N SDCLS,SDCLS0,SDOK,SDSTORE
"RTN","SDQ",43,0)
 S SDCLS=+$O(^SD(409.64,"B",SDQNAME,0))
"RTN","SDQ",44,0)
 IF SDCLS D
"RTN","SDQ",45,0)
 . S SDCLS0=$G(^SD(409.64,SDCLS,0))
"RTN","SDQ",46,0)
 . S SDSTORE=$S($P(SDCLS0,U,4):$P(SDCLS0,U,4),1:5000)
"RTN","SDQ",47,0)
 . IF $G(SDQUERY)="" S SDQUERY="SDQDATA"
"RTN","SDQ",48,0)
 . D STORE(.SDQUERY,SDSTORE)
"RTN","SDQ",49,0)
 . IF '$O(@SDQUERY@(0)) D KILL
"RTN","SDQ",50,0)
 . ;
"RTN","SDQ",51,0)
 . ; -- set query id
"RTN","SDQ",52,0)
 . S (SDQ,@SDQUERY)=$G(@SDQUERY)+1
"RTN","SDQ",53,0)
 . ; -- set up tmp class info
"RTN","SDQ",54,0)
 . K ^TMP("SDQUERY CLASS",$J,SDQ)
"RTN","SDQ",55,0)
 . M ^TMP("SDQUERY CLASS",$J,SDQ)=^SD(409.64,SDCLS)
"RTN","SDQ",56,0)
 . S ^TMP("SDQUERY CLASS",$J,SDQ)=SDCLS
"RTN","SDQ",57,0)
 . S ^TMP("SDQUERY CLASS",$J,SDQ,"GL")=$G(^DIC(+$P(SDCLS0,"^",2),0,"GL"))
"RTN","SDQ",58,0)
 . ; -- subscript level of files root ; ex:^SCE = 0 ; ex:^SD(404.42, = 1
"RTN","SDQ",59,0)
 . S ^TMP("SDQUERY CLASS",$J,SDQ,"GL SUBSCRIPTS")=+$P(SDCLS0,"^",3)
"RTN","SDQ",60,0)
 . ;
"RTN","SDQ",61,0)
 . S SDOK=1
"RTN","SDQ",62,0)
 ELSE  D
"RTN","SDQ",63,0)
 . ; -- build error msg
"RTN","SDQ",64,0)
 . N SDIN,SDOUT
"RTN","SDQ",65,0)
 . S SDIN("CLASS")=SDQNAME
"RTN","SDQ",66,0)
 . S SDOUT("CLASS")=SDQNAME
"RTN","SDQ",67,0)
 . D BLD^SDQVAL(4096400.001,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQ",68,0)
 . S SDOK=0
"RTN","SDQ",69,0)
 ;
"RTN","SDQ",70,0)
 Q SDOK
"RTN","SDQ",71,0)
 ;
"RTN","SDQ",72,0)
STORE(SDQUERY,SDSTORE) ; -- decide whether to use a local or global
"RTN","SDQ",73,0)
 N SDOLD
"RTN","SDQ",74,0)
 IF $S<SDSTORE,SDQUERY'["^TMP" D
"RTN","SDQ",75,0)
 . S SDOLD=SDQUERY
"RTN","SDQ",76,0)
 . S SDQUERY=$NA(^TMP("SDQDATA",$J))
"RTN","SDQ",77,0)
 . K @SDQUERY
"RTN","SDQ",78,0)
 . M @SDQUERY=@SDOLD
"RTN","SDQ",79,0)
 . K @SDOLD
"RTN","SDQ",80,0)
 Q
"RTN","SDQ",81,0)
 ;
"RTN","SDQ",82,0)
DESTROY(SDQ) ; -- query class level method for DESTROY
"RTN","SDQ",83,0)
 K ^TMP("SDQUERY CLASS",$J,SDQ)
"RTN","SDQ",84,0)
 IF '$O(@SDQUERY@(0)) D KILL K SDQUERY
"RTN","SDQ",85,0)
 Q 1
"RTN","SDQ",86,0)
 ;
"RTN","SDQ",87,0)
KILL ; -- kill class and ien list globals
"RTN","SDQ",88,0)
 K ^TMP("SDQUERY CLASS",$J)
"RTN","SDQ",89,0)
 K ^TMP("SDQUERY LIST",$J)
"RTN","SDQ",90,0)
 K @SDQUERY
"RTN","SDQ",91,0)
 Q
"RTN","SDQ",92,0)
 ;
"RTN","SDQ",93,0)
 ;
"RTN","SDQ",94,0)
PAT(SDQ,SDFN,SDACT,SDERR) ; -- SDQ PATIENT                  [API ID: 81]
"RTN","SDQ",95,0)
 D PREP^SDQUT
"RTN","SDQ",96,0)
 G PATG^SDOEQ
"RTN","SDQ",97,0)
 ;
"RTN","SDQ",98,0)
GETPAT(SDQ,SDERR) ; -- get patient property             [API ID: 1xx]
"RTN","SDQ",99,0)
 ; -- not supported
"RTN","SDQ",100,0)
 D PREP^SDQUT
"RTN","SDQ",101,0)
 N SDFN
"RTN","SDQ",102,0)
 D PAT^SDOEQ(.SDQ,.SDFN,"GET",$G(SDERR))
"RTN","SDQ",103,0)
 Q $G(SDFN)
"RTN","SDQ",104,0)
 ;
"RTN","SDQ",105,0)
DATE(SDQ,SDBEG,SDEND,SDACT,SDERR) ; -- SDQ DATE RANGE       [API ID: 82]
"RTN","SDQ",106,0)
 D PREP^SDQUT
"RTN","SDQ",107,0)
 G DATEG^SDQPROP
"RTN","SDQ",108,0)
 ;
"RTN","SDQ",109,0)
GETDATE(SDQ,SDERR) ; -- get date range property          [API ID: 1xx]
"RTN","SDQ",110,0)
 ; -- not supported
"RTN","SDQ",111,0)
 D PREP^SDQUT
"RTN","SDQ",112,0)
 N SDBEG,SDEND
"RTN","SDQ",113,0)
 D DATE^SDQPROP(.SDQ,.SDBEG,.SDEND,"GET",$G(SDERR))
"RTN","SDQ",114,0)
 Q $G(SDBEG)_"^"_$G(SDEND)
"RTN","SDQ",115,0)
 ;
"RTN","SDQ",116,0)
FILTER(SDQ,SDFIL,SDACT,SDERR) ; -- SDQ FILTER                   [API ID: 83]
"RTN","SDQ",117,0)
 D PREP^SDQUT
"RTN","SDQ",118,0)
 G FILTERG^SDQPROP
"RTN","SDQ",119,0)
 ;
"RTN","SDQ",120,0)
GETFIL(SDQ,SDERR) ; -- get filter property              [API ID: 1xx]
"RTN","SDQ",121,0)
 ; -- not supported
"RTN","SDQ",122,0)
 D PREP^SDQUT
"RTN","SDQ",123,0)
 N SDFIL
"RTN","SDQ",124,0)
 D FILTER^SDQPROP(.SDQ,.SDFIL,"GET",$G(SDERR))
"RTN","SDQ",125,0)
 Q $G(SDFIL)
"RTN","SDQ",126,0)
 ;
"RTN","SDQ",127,0)
VISIT(SDQ,SDVST,SDACT,SDERR) ; -- SDQ VISIT                   [API ID: 84]
"RTN","SDQ",128,0)
 D PREP^SDQUT
"RTN","SDQ",129,0)
 G VISITG^SDOEQ
"RTN","SDQ",130,0)
 ;
"RTN","SDQ",131,0)
GETVISIT(SDQ,SDERR) ; -- get visit property              [API ID: 1xx]
"RTN","SDQ",132,0)
 ; -- not supported
"RTN","SDQ",133,0)
 D PREP^SDQUT
"RTN","SDQ",134,0)
 N SDVST
"RTN","SDQ",135,0)
 D VISIT^SDOEQ(.SDQ,.SDVST,.SDACT,$G(SDERR))
"RTN","SDQ",136,0)
 Q $G(SDVST)
"RTN","SDQ",137,0)
 ;
"RTN","SDQ",138,0)
INDEX(SDQ,SDIDX,SDACT,SDERR) ; -- SDQ INDEX NAME              [API ID: 85]
"RTN","SDQ",139,0)
 D PREP^SDQUT
"RTN","SDQ",140,0)
 G INDEXG^SDQPROP
"RTN","SDQ",141,0)
 ;
"RTN","SDQ",142,0)
GETINDEX(SDQ,SDERR) ; -- get index property              [API ID: 1xx]
"RTN","SDQ",143,0)
 ; -- not supported
"RTN","SDQ",144,0)
 D PREP^SDQUT
"RTN","SDQ",145,0)
 N SDIDX
"RTN","SDQ",146,0)
 D INDEX^SDQPROP(.SDQ,.SDIDX,"GET",$G(SDERR))
"RTN","SDQ",147,0)
 Q $G(SDIDX)
"RTN","SDQ",148,0)
 ;
"RTN","SDQ",149,0)
ACTIVE(SDQ,SDSTAT,SDACT,SDERR) ; -- SDQ ACTIVE STATUS           [API ID: 88]
"RTN","SDQ",150,0)
 D PREP^SDQUT
"RTN","SDQ",151,0)
 G ACTIVEG^SDQPROP
"RTN","SDQ",152,0)
 ;
"RTN","SDQ",153,0)
GETACT(SDQ,SDERR) ; -- activate query                      [API ID: 1xx]
"RTN","SDQ",154,0)
 ; -- not supported
"RTN","SDQ",155,0)
 D PREP^SDQUT
"RTN","SDQ",156,0)
 N SDSTAT
"RTN","SDQ",157,0)
 D ACTIVE^SDQPROP(.SDQ,.SDSTAT,.SDACT,$G(SDERR))
"RTN","SDQ",158,0)
 Q $G(SDSTAT)
"RTN","SDQ",159,0)
 ;
"RTN","SDQ",160,0)
REFRESH(SDQ,SDERR) ; -- SDQ REFRESH                         [API ID: 94]
"RTN","SDQ",161,0)
 D PREP^SDQUT
"RTN","SDQ",162,0)
 G REFRESHG^SDQUT
"RTN","SDQ",163,0)
 ;
"RTN","SDQ",164,0)
SCAN(SDQ,SDIR,SDERR) ; -- SDQ SCAN                            [API ID: 99]
"RTN","SDQ",165,0)
 D PREP^SDQUT
"RTN","SDQ",166,0)
 G SCANG^SDQNAV
"RTN","SDQ",167,0)
 ;
"RTN","SDQ",168,0)
SCANCB(SDQ,SDCB,SDACT,SDERR) ; -- SDQ SCAN CALLBACK           [API ID: 100]
"RTN","SDQ",169,0)
 D PREP^SDQUT
"RTN","SDQ",170,0)
 G SCANCBG^SDQNAV
"RTN","SDQ",171,0)
 ;
"RTN","SDQ",172,0)
NEXT(SDQ,SDERR) ; -- SDQ NEXT                                    [API ID: 92]
"RTN","SDQ",173,0)
 D PREP^SDQUT
"RTN","SDQ",174,0)
 G NEXTG^SDQNAV
"RTN","SDQ",175,0)
 ;
"RTN","SDQ",176,0)
PRIOR(SDQ,SDERR) ; -- SDQ PRIOR                           [API ID: 93]
"RTN","SDQ",177,0)
 D PREP^SDQUT
"RTN","SDQ",178,0)
 G PRIORG^SDQNAV
"RTN","SDQ",179,0)
 ;
"RTN","SDQ",180,0)
FIRST(SDQ,SDERR) ; -- SDQ FIRST                           [API ID: 90]
"RTN","SDQ",181,0)
 D PREP^SDQUT
"RTN","SDQ",182,0)
 G FIRSTG^SDQNAV
"RTN","SDQ",183,0)
 ;
"RTN","SDQ",184,0)
LAST(SDQ,SDERR) ; -- SDQ LAST                                    [API ID: 91]
"RTN","SDQ",185,0)
 D PREP^SDQUT
"RTN","SDQ",186,0)
 G LASTG^SDQNAV
"RTN","SDQ",187,0)
 ;
"RTN","SDQ",188,0)
EOF(SDQ,SDERR) ; -- SDQ EOF                                     [API ID: 86]
"RTN","SDQ",189,0)
 D PREP^SDQUT
"RTN","SDQ",190,0)
 Q $$EOF^SDQNAV(.SDQ,$G(SDERR))
"RTN","SDQ",191,0)
 ;
"RTN","SDQ",192,0)
BOF(SDQ,SDERR) ; -- SDQ BOF                                     [API ID: 87]
"RTN","SDQ",193,0)
 D PREP^SDQUT
"RTN","SDQ",194,0)
 Q $$BOF^SDQNAV(.SDQ,$G(SDERR))
"RTN","SDQ",195,0)
 ;
"RTN","SDQ",196,0)
COUNT(SDQ,SDERR) ; -- SDQ COUNT                           [API ID: 89]
"RTN","SDQ",197,0)
 D PREP^SDQUT
"RTN","SDQ",198,0)
 Q $$COUNT^SDQNAV(.SDQ,$G(SDERR))
"RTN","SDQ",199,0)
 ;
"RTN","SDQ",200,0)
GETENTRY(SDQ,SDERR) ; -- SDQ GET CURRENT ENTRY ID            [API ID: 95]
"RTN","SDQ",201,0)
 D PREP^SDQUT
"RTN","SDQ",202,0)
 Q $$GETENTRY^SDQUT(.SDQ,$G(SDERR))
"RTN","SDQ",203,0)
 ;
"RTN","SDQNAV")
0^2^B25689578
"RTN","SDQNAV",1,0)
SDQNAV ;ALB/MJK - Query Object Navigation Methods ;8/12/96
"RTN","SDQNAV",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDQNAV",3,0)
 ;
"RTN","SDQNAV",4,0)
SCAN(SDQ,SDIR,SDERR) ; -- scan all records
"RTN","SDQNAV",5,0)
 ;   API ID: 99
"RTN","SDQNAV",6,0)
 ; API NAME: SDQ SCAN
"RTN","SDQNAV",7,0)
 ;
"RTN","SDQNAV",8,0)
SCANG ; -- goto entry point
"RTN","SDQNAV",9,0)
 ; -- do validation checks
"RTN","SDQNAV",10,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G SCANQ
"RTN","SDQNAV",11,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G SCANQ
"RTN","SDQNAV",12,0)
 IF '$$SCAN^SDQVAL(.SDQ,$G(SDERR)) G SCANQ
"RTN","SDQNAV",13,0)
 ;
"RTN","SDQNAV",14,0)
 N SDSCAN
"RTN","SDQNAV",15,0)
 S SDSCAN=$G(@SDQUERY@(SDQ,"SCAN"))
"RTN","SDQNAV",16,0)
 IF SDSCAN]"" X SDSCAN
"RTN","SDQNAV",17,0)
SCANQ Q
"RTN","SDQNAV",18,0)
 ;
"RTN","SDQNAV",19,0)
 ;
"RTN","SDQNAV",20,0)
SCANCB(SDQ,SDCB,SDACT,SDERR) ; -- set/get scan callback method
"RTN","SDQNAV",21,0)
 ;   API ID: 100
"RTN","SDQNAV",22,0)
 ; API NAME: SDQ SCAN CALLBACK
"RTN","SDQNAV",23,0)
 ;
"RTN","SDQNAV",24,0)
SCANCBG ; -- goto entry point
"RTN","SDQNAV",25,0)
 ; -- do validation checks
"RTN","SDQNAV",26,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G SCANCBQ
"RTN","SDQNAV",27,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G SCANCBQ
"RTN","SDQNAV",28,0)
 ;
"RTN","SDQNAV",29,0)
 IF SDACT="SET" D
"RTN","SDQNAV",30,0)
 . IF '$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) Q
"RTN","SDQNAV",31,0)
 . IF '$$SCANCB^SDQVAL(.SDCB,$G(SDERR)) Q
"RTN","SDQNAV",32,0)
 . S @SDQUERY@(SDQ,"SCAN APP CALLBACK")=SDCB
"RTN","SDQNAV",33,0)
 ;
"RTN","SDQNAV",34,0)
 IF SDACT="GET" S SDCB=$G(@SDQUERY@(SDQ,"SCAN APP CALLBACK"),"QUIT")
"RTN","SDQNAV",35,0)
SCANCBQ Q
"RTN","SDQNAV",36,0)
 ;
"RTN","SDQNAV",37,0)
 ;
"RTN","SDQNAV",38,0)
NEXT(SDQ,SDERR) ; -- get next global ref
"RTN","SDQNAV",39,0)
 ;   API ID: 92
"RTN","SDQNAV",40,0)
 ; API NAME: SDQ NEXT
"RTN","SDQNAV",41,0)
 ;
"RTN","SDQNAV",42,0)
NEXTG ; -- goto entry point
"RTN","SDQNAV",43,0)
 ; -- do validation checks
"RTN","SDQNAV",44,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G NEXTQ
"RTN","SDQNAV",45,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G NEXTQ
"RTN","SDQNAV",46,0)
 IF $G(@SDQUERY@(SDQ,"EOF")) D BLD^SDQVAL(4096800.111,"","",$G(SDERR)) G NEXTQ
"RTN","SDQNAV",47,0)
 ;
"RTN","SDQNAV",48,0)
 N SDNEXT
"RTN","SDQNAV",49,0)
 S SDNEXT=$O(^TMP("SDQUERY LIST",$J,SDQ,+$G(@SDQUERY@(SDQ,"CURSOR"))),1)
"RTN","SDQNAV",50,0)
 ;
"RTN","SDQNAV",51,0)
 IF SDNEXT D  G NEXTQ
"RTN","SDQNAV",52,0)
 . S @SDQUERY@(SDQ,"CURSOR")=SDNEXT
"RTN","SDQNAV",53,0)
 . S @SDQUERY@(SDQ,"BOF")=0
"RTN","SDQNAV",54,0)
 . S @SDQUERY@(SDQ,"EOF")=0
"RTN","SDQNAV",55,0)
 ;
"RTN","SDQNAV",56,0)
 ; -- get initial ref value and also save for compares
"RTN","SDQNAV",57,0)
 N SDGREF,SDSAVE
"RTN","SDQNAV",58,0)
 S (SDGREF,SDSAVE)=$G(@SDQUERY@(SDQ,"GLOBAL REF"))
"RTN","SDQNAV",59,0)
 D CHECK(.SDQ,.SDGREF,.SDSAVE)
"RTN","SDQNAV",60,0)
 ;
"RTN","SDQNAV",61,0)
 IF SDGREF'="" D  G NEXTQ
"RTN","SDQNAV",62,0)
 . S @SDQUERY@(SDQ,"GLOBAL REF")=SDGREF
"RTN","SDQNAV",63,0)
 . S SDCNT=+$G(@SDQUERY@(SDQ,"COUNT"))
"RTN","SDQNAV",64,0)
 . S SDCNT=SDCNT+1
"RTN","SDQNAV",65,0)
 . S @SDQUERY@(SDQ,"COUNT")=SDCNT
"RTN","SDQNAV",66,0)
 . S @SDQUERY@(SDQ,"CURSOR")=SDCNT
"RTN","SDQNAV",67,0)
 . S ^TMP("SDQUERY LIST",$J,SDQ,SDCNT)=SDGREF
"RTN","SDQNAV",68,0)
 . S @SDQUERY@(SDQ,"MORE")=1
"RTN","SDQNAV",69,0)
 . S @SDQUERY@(SDQ,"BOF")=0
"RTN","SDQNAV",70,0)
 . S @SDQUERY@(SDQ,"EOF")=0
"RTN","SDQNAV",71,0)
 ELSE  D
"RTN","SDQNAV",72,0)
 . S @SDQUERY@(SDQ,"MORE")=0
"RTN","SDQNAV",73,0)
 . S @SDQUERY@(SDQ,"EOF")=1
"RTN","SDQNAV",74,0)
NEXTQ Q
"RTN","SDQNAV",75,0)
 ;
"RTN","SDQNAV",76,0)
 ;
"RTN","SDQNAV",77,0)
CHECK(SDQ,SDGREF,SDSAVE) ; -- check if ok
"RTN","SDQNAV",78,0)
 N SDFIL,SDVAL
"RTN","SDQNAV",79,0)
 S SDFIL=$G(@SDQUERY@(SDQ,"FILTER"))
"RTN","SDQNAV",80,0)
 S SDVAL=$G(@SDQUERY@(SDQ,"VALIDATOR"))
"RTN","SDQNAV",81,0)
 ;
"RTN","SDQNAV",82,0)
 F  S SDGREF=$Q(@SDSAVE) Q:SDGREF=""  X SDVAL Q:SDGREF=""  D  Q:SDGREF'=""
"RTN","SDQNAV",83,0)
 . S SDSAVE=SDGREF
"RTN","SDQNAV",84,0)
 . IF SDFIL="" Q
"RTN","SDQNAV",85,0)
 . IF '$$FILTER(.SDQ,.SDGREF,.SDFIL) S SDGREF=""
"RTN","SDQNAV",86,0)
 Q
"RTN","SDQNAV",87,0)
 ;
"RTN","SDQNAV",88,0)
FILTER(SDQ,SDGREF,SDFIL) ; -- perform filter logic
"RTN","SDQNAV",89,0)
 N Y,Y0,SDNODE,SDSUB,SDZERO
"RTN","SDQNAV",90,0)
 S SDSUB=+$G(@SDQUERY@(SDQ,"IEN SUBSCRIPT"))
"RTN","SDQNAV",91,0)
 S SDZERO=$G(^TMP("SDQUERY CLASS",$J,SDQ,"ZERO"))
"RTN","SDQNAV",92,0)
 S Y=$QS(SDGREF,SDSUB)
"RTN","SDQNAV",93,0)
 IF SDZERO]"" D
"RTN","SDQNAV",94,0)
 . X SDZERO
"RTN","SDQNAV",95,0)
 ELSE  D
"RTN","SDQNAV",96,0)
 . S SDNODE=$G(^TMP("SDQUERY CLASS",$J,SDQ,"GL"))_Y_",0)"
"RTN","SDQNAV",97,0)
 . S Y0=$G(@SDNODE)
"RTN","SDQNAV",98,0)
 X SDFIL
"RTN","SDQNAV",99,0)
 Q $T
"RTN","SDQNAV",100,0)
 ;
"RTN","SDQNAV",101,0)
 ;
"RTN","SDQNAV",102,0)
PRIOR(SDQ,SDERR) ; -- get prior global ref
"RTN","SDQNAV",103,0)
 ;   API ID: 93
"RTN","SDQNAV",104,0)
 ; API NAME: SDQ PRIOR
"RTN","SDQNAV",105,0)
 ;
"RTN","SDQNAV",106,0)
PRIORG ; -- goto entry point
"RTN","SDQNAV",107,0)
 ; -- do validation checks
"RTN","SDQNAV",108,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G PRIORQ
"RTN","SDQNAV",109,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G PRIORQ
"RTN","SDQNAV",110,0)
 IF $G(@SDQUERY@(SDQ,"BOF")) D BLD^SDQVAL(4096800.11,"","",$G(SDERR)) G PRIORQ
"RTN","SDQNAV",111,0)
 ;
"RTN","SDQNAV",112,0)
 N SDCUR,SDPRIOR
"RTN","SDQNAV",113,0)
 S SDCUR=+$G(@SDQUERY@(SDQ,"CURSOR"))
"RTN","SDQNAV",114,0)
 S SDPRIOR=$O(^TMP("SDQUERY LIST",$J,SDQ,SDCUR),-1)
"RTN","SDQNAV",115,0)
 ;
"RTN","SDQNAV",116,0)
 IF SDPRIOR D  G PRIORQ
"RTN","SDQNAV",117,0)
 . S @SDQUERY@(SDQ,"CURSOR")=SDPRIOR
"RTN","SDQNAV",118,0)
 . S @SDQUERY@(SDQ,"BOF")=0
"RTN","SDQNAV",119,0)
 . S @SDQUERY@(SDQ,"EOF")=0
"RTN","SDQNAV",120,0)
 ELSE  D
"RTN","SDQNAV",121,0)
 . S @SDQUERY@(SDQ,"BOF")=1
"RTN","SDQNAV",122,0)
PRIORQ Q
"RTN","SDQNAV",123,0)
 ;
"RTN","SDQNAV",124,0)
 ;
"RTN","SDQNAV",125,0)
FIRST(SDQ,SDERR) ; -- get first entry
"RTN","SDQNAV",126,0)
 ;   API ID: 90
"RTN","SDQNAV",127,0)
 ; API NAME: SDQ FIRST
"RTN","SDQNAV",128,0)
 ;
"RTN","SDQNAV",129,0)
FIRSTG ; -- goto entry point
"RTN","SDQNAV",130,0)
 ; -- do validation checks
"RTN","SDQNAV",131,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G FIRSTQ
"RTN","SDQNAV",132,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G FIRSTQ
"RTN","SDQNAV",133,0)
 ;
"RTN","SDQNAV",134,0)
 S @SDQUERY@(SDQ,"CURSOR")=+$O(^TMP("SDQUERY LIST",$J,SDQ,0),1)
"RTN","SDQNAV",135,0)
 S @SDQUERY@(SDQ,"BOF")=1
"RTN","SDQNAV",136,0)
 S @SDQUERY@(SDQ,"EOF")=(@SDQUERY@(SDQ,"CURSOR")=0)
"RTN","SDQNAV",137,0)
FIRSTQ Q
"RTN","SDQNAV",138,0)
 ;
"RTN","SDQNAV",139,0)
 ;
"RTN","SDQNAV",140,0)
LAST(SDQ,SDERR) ; -- get last entry
"RTN","SDQNAV",141,0)
 ;   API ID: 91
"RTN","SDQNAV",142,0)
 ; API NAME: SDQ LAST
"RTN","SDQNAV",143,0)
 ;
"RTN","SDQNAV",144,0)
LASTG ; -- goto entry point
"RTN","SDQNAV",145,0)
 ; -- do validation checks
"RTN","SDQNAV",146,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G LASTQ
"RTN","SDQNAV",147,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G LASTQ
"RTN","SDQNAV",148,0)
 ;
"RTN","SDQNAV",149,0)
 IF $G(@SDQUERY@(SDQ,"MORE")) D GETREST(.SDQ,$G(SDERR))
"RTN","SDQNAV",150,0)
 S @SDQUERY@(SDQ,"CURSOR")=+$O(^TMP("SDQUERY LIST",$J,SDQ,""),-1)
"RTN","SDQNAV",151,0)
 S @SDQUERY@(SDQ,"BOF")=(@SDQUERY@(SDQ,"CURSOR")=0)
"RTN","SDQNAV",152,0)
 S @SDQUERY@(SDQ,"EOF")=1
"RTN","SDQNAV",153,0)
LASTQ Q
"RTN","SDQNAV",154,0)
 ;
"RTN","SDQNAV",155,0)
 ;
"RTN","SDQNAV",156,0)
EOF(SDQ,SDERR) ; -- at end of file
"RTN","SDQNAV",157,0)
 ;   API ID: 86
"RTN","SDQNAV",158,0)
 ; API NAME: SDQ EOF
"RTN","SDQNAV",159,0)
 ;
"RTN","SDQNAV",160,0)
 ; -- do validation checks
"RTN","SDQNAV",161,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) Q 0
"RTN","SDQNAV",162,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) Q 0
"RTN","SDQNAV",163,0)
 ;
"RTN","SDQNAV",164,0)
EOFQ Q $G(@SDQUERY@(SDQ,"EOF"))
"RTN","SDQNAV",165,0)
 ;
"RTN","SDQNAV",166,0)
 ;
"RTN","SDQNAV",167,0)
BOF(SDQ,SDERR) ; -- at beginning of file
"RTN","SDQNAV",168,0)
 ;   API ID: 87
"RTN","SDQNAV",169,0)
 ; API NAME: SDQ BOF
"RTN","SDQNAV",170,0)
 ;
"RTN","SDQNAV",171,0)
 ; -- do validation checks
"RTN","SDQNAV",172,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) Q 0
"RTN","SDQNAV",173,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) Q 0
"RTN","SDQNAV",174,0)
 ;
"RTN","SDQNAV",175,0)
BOFQ Q $G(@SDQUERY@(SDQ,"BOF"))
"RTN","SDQNAV",176,0)
 ;
"RTN","SDQNAV",177,0)
 ;
"RTN","SDQNAV",178,0)
COUNT(SDQ,SDERR) ; -- get entries count
"RTN","SDQNAV",179,0)
 ;   API ID: 89
"RTN","SDQNAV",180,0)
 ; API NAME: SDQ COUNT
"RTN","SDQNAV",181,0)
 ;
"RTN","SDQNAV",182,0)
 ; -- do validation checks
"RTN","SDQNAV",183,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) Q ""
"RTN","SDQNAV",184,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) Q ""
"RTN","SDQNAV",185,0)
 ;
"RTN","SDQNAV",186,0)
 IF $G(@SDQUERY@(SDQ,"MORE")) D GETREST(.SDQ,$G(SDERR))
"RTN","SDQNAV",187,0)
 Q +$G(@SDQUERY@(SDQ,"COUNT"))
"RTN","SDQNAV",188,0)
 ;
"RTN","SDQNAV",189,0)
 ;
"RTN","SDQNAV",190,0)
GETREST(SDQ,SDERR) ; -- get rest of entries
"RTN","SDQNAV",191,0)
 ;
"RTN","SDQNAV",192,0)
 F  Q:'$G(@SDQUERY@(SDQ,"MORE"))  D NEXT(.SDQ,$G(SDERR))
"RTN","SDQNAV",193,0)
 Q
"RTN","SDQNAV",194,0)
 ;
"RTN","SDQPROP")
0^3^B24214736
"RTN","SDQPROP",1,0)
SDQPROP ;ALB/MJK - Query Object Property Methods ;8/12/96
"RTN","SDQPROP",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDQPROP",3,0)
 ;
"RTN","SDQPROP",4,0)
DATE(SDQ,SDBEG,SDEND,SDACT,SDERR) ; -- set/get date range property
"RTN","SDQPROP",5,0)
 ;   API ID: 82
"RTN","SDQPROP",6,0)
 ; API NAME: SDQ DATE RANGE
"RTN","SDQPROP",7,0)
 ;
"RTN","SDQPROP",8,0)
DATEG ; -- goto entry point
"RTN","SDQPROP",9,0)
 ; -- do validation checks
"RTN","SDQPROP",10,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G DATEQ
"RTN","SDQPROP",11,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G DATEQ
"RTN","SDQPROP",12,0)
 IF SDACT="SET",'$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) G DATEQ
"RTN","SDQPROP",13,0)
 IF SDACT="SET",SDBEG=0 S SDBEG=2900101
"RTN","SDQPROP",14,0)
 IF SDACT="SET",'$$RANGE^SDQVAL(.SDBEG,.SDEND,$G(SDERR)) G DATEQ
"RTN","SDQPROP",15,0)
 ;
"RTN","SDQPROP",16,0)
 IF SDACT="SET" D
"RTN","SDQPROP",17,0)
 . S @SDQUERY@(SDQ,"BEGIN DATE")=SDBEG
"RTN","SDQPROP",18,0)
 . S @SDQUERY@(SDQ,"END DATE")=SDEND
"RTN","SDQPROP",19,0)
 IF SDACT="GET" D
"RTN","SDQPROP",20,0)
 . S SDBEG=$G(@SDQUERY@(SDQ,"BEGIN DATE"))
"RTN","SDQPROP",21,0)
 . S SDEND=$G(@SDQUERY@(SDQ,"END DATE"))
"RTN","SDQPROP",22,0)
 ;
"RTN","SDQPROP",23,0)
DATEQ Q
"RTN","SDQPROP",24,0)
 ;
"RTN","SDQPROP",25,0)
 ;
"RTN","SDQPROP",26,0)
FILTER(SDQ,SDFIL,SDACT,SDERR) ; -- set/get filter property
"RTN","SDQPROP",27,0)
 ;   API ID: 83
"RTN","SDQPROP",28,0)
 ; API NAME: SDQ FILTER
"RTN","SDQPROP",29,0)
 ;
"RTN","SDQPROP",30,0)
FILTERG ; -- goto entry point
"RTN","SDQPROP",31,0)
 ; -- do validation checks
"RTN","SDQPROP",32,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G FILTERQ
"RTN","SDQPROP",33,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G FILTERQ
"RTN","SDQPROP",34,0)
 IF SDACT="SET",'$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) G FILTERQ
"RTN","SDQPROP",35,0)
 IF SDACT="SET",'$$FILTER^SDQVAL(.SDFIL,$G(SDERR)) G FILTERQ
"RTN","SDQPROP",36,0)
 ;
"RTN","SDQPROP",37,0)
 IF SDACT="SET" S @SDQUERY@(SDQ,"FILTER")=SDFIL
"RTN","SDQPROP",38,0)
 IF SDACT="GET" S SDFIL=$G(@SDQUERY@(SDQ,"FILTER"),"IF 1")
"RTN","SDQPROP",39,0)
 ;
"RTN","SDQPROP",40,0)
FILTERQ Q
"RTN","SDQPROP",41,0)
 ;
"RTN","SDQPROP",42,0)
 ;
"RTN","SDQPROP",43,0)
INDEX(SDQ,SDIDX,SDACT,SDERR) ; -- set/get index property
"RTN","SDQPROP",44,0)
 ;   API ID: 85
"RTN","SDQPROP",45,0)
 ; API NAME: SDQ INDEX NAME
"RTN","SDQPROP",46,0)
 ;
"RTN","SDQPROP",47,0)
INDEXG ; -- goto entry point
"RTN","SDQPROP",48,0)
 ; -- do validation checks
"RTN","SDQPROP",49,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G INDEXQ
"RTN","SDQPROP",50,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G INDEXQ
"RTN","SDQPROP",51,0)
 IF SDACT="SET",'$$QRYINACT^SDQVAL(.SDQ,$G(SDERR)) G INDEXQ
"RTN","SDQPROP",52,0)
 IF SDACT="SET",'$$INDEX^SDQVAL(.SDQ,.SDIDX,$G(SDERR)) G INDEXQ
"RTN","SDQPROP",53,0)
 ;
"RTN","SDQPROP",54,0)
 IF SDACT="SET" D SETIDX(.SDQ,.SDIDX)
"RTN","SDQPROP",55,0)
 IF SDACT="GET" S SDIDX=$G(@SDQUERY@(SDQ,"INDEX EXTERNAL"))
"RTN","SDQPROP",56,0)
 ;
"RTN","SDQPROP",57,0)
INDEXQ Q
"RTN","SDQPROP",58,0)
 ;
"RTN","SDQPROP",59,0)
 ;
"RTN","SDQPROP",60,0)
SETIDX(SDQ,SDIDX) ; -- set index related info
"RTN","SDQPROP",61,0)
 N SDIDXI,SDTYPE,SDVAL
"RTN","SDQPROP",62,0)
 S SDIDXI=$O(^TMP("SDQUERY CLASS",$J,SDQ,"INDEX","B",SDIDX,0))
"RTN","SDQPROP",63,0)
 S X=$G(^TMP("SDQUERY CLASS",$J,SDQ,"INDEX",SDIDXI,0))
"RTN","SDQPROP",64,0)
 S @SDQUERY@(SDQ,"INDEX EXTERNAL")=$P(X,"^",1)
"RTN","SDQPROP",65,0)
 S @SDQUERY@(SDQ,"INDEX INTERNAL")=$P(X,"^",2)
"RTN","SDQPROP",66,0)
 S (SDTYPE,@SDQUERY@(SDQ,"INDEX TYPE"))=$P(X,"^",3)
"RTN","SDQPROP",67,0)
 ;
"RTN","SDQPROP",68,0)
 ; -- at which subscript is ien located + subscripts in global root
"RTN","SDQPROP",69,0)
 S @SDQUERY@(SDQ,"IEN SUBSCRIPT")=$S(SDTYPE=1:3,SDTYPE=2:3,SDTYPE=4:4,1:999)+$P($G(^TMP("SDQUERY CLASS",$J,SDQ,"GL SUBSCRIPTS")),"^",3)
"RTN","SDQPROP",70,0)
 ;
"RTN","SDQPROP",71,0)
 ; -- get override entry validator if defined, otherwise use default
"RTN","SDQPROP",72,0)
 S SDVAL=$G(^TMP("SDQUERY CLASS",$J,SDQ,"INDEX",SDIDXI,"VALIDATOR"))
"RTN","SDQPROP",73,0)
 IF SDVAL="" D
"RTN","SDQPROP",74,0)
 . IF SDTYPE=1 S SDVAL="D REG^SDQUT(.SDQ,.SDGREF)"     ; regular
"RTN","SDQPROP",75,0)
 . IF SDTYPE=2 S SDVAL="D REGDT^SDQUT(.SDQ,.SDGREF)"   ; regular date range
"RTN","SDQPROP",76,0)
 . ; IF SDTYPE=3 S SDVAL="D COM^SDQUT(.SDQ,.SDGREF)"     ; composite
"RTN","SDQPROP",77,0)
 . IF SDTYPE=4 S SDVAL="D COMDT^SDQUT(.SDQ,.SDGREF)"   ; composite date range
"RTN","SDQPROP",78,0)
 ;
"RTN","SDQPROP",79,0)
 S @SDQUERY@(SDQ,"VALIDATOR")=SDVAL
"RTN","SDQPROP",80,0)
 Q
"RTN","SDQPROP",81,0)
 ;
"RTN","SDQPROP",82,0)
 ;
"RTN","SDQPROP",83,0)
ACTIVE(SDQ,SDSTAT,SDACT,SDERR) ; -- activate query
"RTN","SDQPROP",84,0)
 ;  API ID: 88
"RTN","SDQPROP",85,0)
 ; API NAME: SDQ ACTIVE STATUS
"RTN","SDQPROP",86,0)
 ;
"RTN","SDQPROP",87,0)
ACTIVEG ; -- goto entry point
"RTN","SDQPROP",88,0)
 ; -- do validation checks
"RTN","SDQPROP",89,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G ACTIVEQ
"RTN","SDQPROP",90,0)
 IF '$$ACTION^SDQVAL(.SDACT,$G(SDERR)) G ACTIVEQ
"RTN","SDQPROP",91,0)
 ;
"RTN","SDQPROP",92,0)
 ; -- did above produce errors?
"RTN","SDQPROP",93,0)
 ; -- if so, it's important to stop processing to prevent other errors
"RTN","SDQPROP",94,0)
 IF $G(SDERR)="",$O(^TMP("DIERR",$J,0)) G ACTIVEQ
"RTN","SDQPROP",95,0)
 IF $G(SDERR)]"",$O(@SDERR@("DIERR",0)) G ACTIVEQ
"RTN","SDQPROP",96,0)
 ;
"RTN","SDQPROP",97,0)
 IF SDACT="SET" D  G ACTIVEQ
"RTN","SDQPROP",98,0)
 . IF '$$STATUS^SDQVAL(.SDSTAT,$G(SDERR)) Q
"RTN","SDQPROP",99,0)
 . IF SDSTAT="TRUE",'$$PROP^SDQVAL(.SDQ,$G(SDERR)) Q
"RTN","SDQPROP",100,0)
 . IF SDSTAT="TRUE",'$G(@SDQUERY@(SDQ,"ACTIVE")) D START(.SDQ)
"RTN","SDQPROP",101,0)
 . IF SDSTAT="FALSE",$G(@SDQUERY@(SDQ,"ACTIVE")) D STOP(.SDQ)
"RTN","SDQPROP",102,0)
 ;
"RTN","SDQPROP",103,0)
 IF SDACT="GET" D  G ACTIVEQ
"RTN","SDQPROP",104,0)
 . S SDSTAT=$S(@SDQUERY@(SDQ,"ACTIVE"):"TRUE",1:"FALSE")
"RTN","SDQPROP",105,0)
 ;
"RTN","SDQPROP",106,0)
ACTIVEQ Q
"RTN","SDQPROP",107,0)
 ;
"RTN","SDQPROP",108,0)
 ;
"RTN","SDQPROP",109,0)
START(SDQ) ; -- set up active query
"RTN","SDQPROP",110,0)
 N Y,SDTYPE,SDIDX,SDGL,SDMST,SDBEG
"RTN","SDQPROP",111,0)
 S SDTYPE=$G(@SDQUERY@(SDQ,"INDEX TYPE"))
"RTN","SDQPROP",112,0)
 S SDIDX=$G(@SDQUERY@(SDQ,"INDEX INTERNAL"))
"RTN","SDQPROP",113,0)
 S SDMST=$G(@SDQUERY@(SDQ,"MASTER VALUE"))
"RTN","SDQPROP",114,0)
 S SDBEG=$G(@SDQUERY@(SDQ,"BEGIN DATE"))
"RTN","SDQPROP",115,0)
 S SDGL=$G(^TMP("SDQUERY CLASS",$J,SDQ,"GL"))
"RTN","SDQPROP",116,0)
 S Y=""
"RTN","SDQPROP",117,0)
 ;
"RTN","SDQPROP",118,0)
 IF SDTYPE=1 S Y=SDGL_""""_SDIDX_""","""_SDMST_""")"     ; regular
"RTN","SDQPROP",119,0)
 IF SDTYPE=2 S Y=SDGL_""""_SDIDX_""","_(SDBEG-.000001)_")" ; regular d/t
"RTN","SDQPROP",120,0)
 IF SDTYPE=3 S Y=SDGL_""""_SDIDX_""","""_SDMST_""")"     ; composite
"RTN","SDQPROP",121,0)
 IF SDTYPE=4 S Y=SDGL_""""_SDIDX_""","""_SDMST_""","_(SDBEG-.000001)_")"  ; composite d/t
"RTN","SDQPROP",122,0)
 ;
"RTN","SDQPROP",123,0)
 S @SDQUERY@(SDQ,"GLOBAL REF")=Y
"RTN","SDQPROP",124,0)
 S @SDQUERY@(SDQ,"CURSOR")=0
"RTN","SDQPROP",125,0)
 S @SDQUERY@(SDQ,"ACTIVE")=1
"RTN","SDQPROP",126,0)
 S @SDQUERY@(SDQ,"MORE")=1
"RTN","SDQPROP",127,0)
 S @SDQUERY@(SDQ,"BOF")=1
"RTN","SDQPROP",128,0)
 S @SDQUERY@(SDQ,"EOF")=0
"RTN","SDQPROP",129,0)
 S @SDQUERY@(SDQ,"COUNT")=0
"RTN","SDQPROP",130,0)
 K ^TMP("SDQUERY LIST",$J,SDQ)
"RTN","SDQPROP",131,0)
 D NEXT^SDQNAV(.SDQ,$G(SDERR))
"RTN","SDQPROP",132,0)
STARTQ Q
"RTN","SDQPROP",133,0)
 ;
"RTN","SDQPROP",134,0)
 ;
"RTN","SDQPROP",135,0)
STOP(SDQRY) ; -- stop query / also called from CREATE^SDQ to set up query
"RTN","SDQPROP",136,0)
 ;
"RTN","SDQPROP",137,0)
 S @SDQUERY@(SDQ,"GLOBAL REF")=""
"RTN","SDQPROP",138,0)
 S @SDQUERY@(SDQ,"CURSOR")=0
"RTN","SDQPROP",139,0)
 S @SDQUERY@(SDQ,"ACTIVE")=0
"RTN","SDQPROP",140,0)
 S @SDQUERY@(SDQ,"MORE")=0
"RTN","SDQPROP",141,0)
 S @SDQUERY@(SDQ,"BOF")=0
"RTN","SDQPROP",142,0)
 S @SDQUERY@(SDQ,"COUNT")=0
"RTN","SDQPROP",143,0)
 K ^TMP("SDQUERY LIST",$J,SDQ)
"RTN","SDQPROP",144,0)
 Q
"RTN","SDQPROP",145,0)
 ;
"RTN","SDQUT")
0^4^B6255686
"RTN","SDQUT",1,0)
SDQUT ;ALB/MJK - Query Object Utility Methods ;8/12/96
"RTN","SDQUT",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDQUT",3,0)
 ;
"RTN","SDQUT",4,0)
REG(SDQ,SDGREF) ; -- regular xref validator
"RTN","SDQUT",5,0)
 N SDSUB
"RTN","SDQUT",6,0)
 S SDSUB=$G(^TMP("SDQUERY CLASS",$J,SDQ,"GL SUBSCRIPTS"))+1
"RTN","SDQUT",7,0)
 IF $QS(SDGREF,SDSUB)'=$G(@SDQUERY@(SDQ,"INDEX INTERNAL")) S SDGREF="" G REGQ
"RTN","SDQUT",8,0)
 IF $QS(SDGREF,SDSUB+1)'=$G(@SDQUERY@(SDQ,"MASTER VALUE")) S SDGREF="" G REGQ
"RTN","SDQUT",9,0)
REGQ Q
"RTN","SDQUT",10,0)
 ;
"RTN","SDQUT",11,0)
 ;
"RTN","SDQUT",12,0)
REGDT(SDQ,SDGREF) ;-- regular date/time xref validator
"RTN","SDQUT",13,0)
 N SDSUB,SDT,SDBEG,SDEND
"RTN","SDQUT",14,0)
 S SDSUB=$G(^TMP("SDQUERY CLASS",$J,SDQ,"GL SUBSCRIPTS"))+1
"RTN","SDQUT",15,0)
 S SDBEG=$G(@SDQUERY@(SDQ,"BEGIN DATE"))
"RTN","SDQUT",16,0)
 S SDEND=$G(@SDQUERY@(SDQ,"END DATE"))
"RTN","SDQUT",17,0)
 ;
"RTN","SDQUT",18,0)
 IF $QS(SDGREF,SDSUB)'=$G(@SDQUERY@(SDQ,"INDEX INTERNAL")) S SDGREF="" G REGDTQ
"RTN","SDQUT",19,0)
 S SDT=$QS(SDGREF,SDSUB+1)
"RTN","SDQUT",20,0)
 IF SDT>SDEND!(SDT<SDBEG) S SDGREF="" G REGDTQ
"RTN","SDQUT",21,0)
REGDTQ Q
"RTN","SDQUT",22,0)
 ;
"RTN","SDQUT",23,0)
 ;
"RTN","SDQUT",24,0)
COM(SDQ,SDGREF) ; -- composite xref validator
"RTN","SDQUT",25,0)
COMQ Q
"RTN","SDQUT",26,0)
 ;
"RTN","SDQUT",27,0)
 ;
"RTN","SDQUT",28,0)
COMDT(SDQ,SDGREF) ;-- composite xref with date/time validator
"RTN","SDQUT",29,0)
 N SDSUB,SDT,SDBEG,SDEND
"RTN","SDQUT",30,0)
 S SDSUB=$G(^TMP("SDQUERY CLASS",$J,SDQ,"GL SUBSCRIPTS"))+1
"RTN","SDQUT",31,0)
 S SDBEG=$G(@SDQUERY@(SDQ,"BEGIN DATE"))
"RTN","SDQUT",32,0)
 S SDEND=$G(@SDQUERY@(SDQ,"END DATE"))
"RTN","SDQUT",33,0)
 IF $QS(SDGREF,SDSUB)'=$G(@SDQUERY@(SDQ,"INDEX INTERNAL")) S SDGREF="" G COMDTQ
"RTN","SDQUT",34,0)
 IF $QS(SDGREF,SDSUB+1)'=$G(@SDQUERY@(SDQ,"MASTER VALUE")) S SDGREF="" G COMDTQ
"RTN","SDQUT",35,0)
 S SDT=$QS(SDGREF,SDSUB+2)
"RTN","SDQUT",36,0)
 IF SDT>SDEND!(SDT<SDBEG) S SDGREF="" G COMDTQ
"RTN","SDQUT",37,0)
COMDTQ Q
"RTN","SDQUT",38,0)
 ;
"RTN","SDQUT",39,0)
 ;
"RTN","SDQUT",40,0)
REFRESH(SDQ,SDERR) ; -- refresh query
"RTN","SDQUT",41,0)
 ;  API ID: 94
"RTN","SDQUT",42,0)
 ; API NAME: SDQ REFRESH
"RTN","SDQUT",43,0)
 ;
"RTN","SDQUT",44,0)
REFRESHG ; -- goto entry point
"RTN","SDQUT",45,0)
 ; -- do validation checks
"RTN","SDQUT",46,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) G REFRESHQ
"RTN","SDQUT",47,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) G REFRESHQ
"RTN","SDQUT",48,0)
 ;
"RTN","SDQUT",49,0)
 D ACTIVE^SDQPROP(.SDQ,"FALSE","SET",$G(SDERR))
"RTN","SDQUT",50,0)
 D ACTIVE^SDQPROP(.SDQ,"TRUE","SET",$G(SDERR))
"RTN","SDQUT",51,0)
REFRESHQ Q
"RTN","SDQUT",52,0)
 ;
"RTN","SDQUT",53,0)
 ;
"RTN","SDQUT",54,0)
GETENTRY(SDQ,SDERR) ; -- get ID/IEN number for cursor entry
"RTN","SDQUT",55,0)
 ;   API ID: 95
"RTN","SDQUT",56,0)
 ; API NAME: SDQ GET CURRENT ENCOUNTER ID
"RTN","SDQUT",57,0)
 ;
"RTN","SDQUT",58,0)
 ; -- do validation checks
"RTN","SDQUT",59,0)
 IF '$$QRY^SDQVAL(.SDQ,$G(SDERR)) Q ""
"RTN","SDQUT",60,0)
 IF '$$QRYACT^SDQVAL(.SDQ,$G(SDERR)) Q ""
"RTN","SDQUT",61,0)
 ;
"RTN","SDQUT",62,0)
 N SDID,SDGREF,SDSUB
"RTN","SDQUT",63,0)
 S SDGREF=$G(^TMP("SDQUERY LIST",$J,SDQ,+$G(@SDQUERY@(SDQ,"CURSOR"))))
"RTN","SDQUT",64,0)
 S SDSUB=+$G(@SDQUERY@(SDQ,"IEN SUBSCRIPT"))
"RTN","SDQUT",65,0)
 S SDID=$QS(SDGREF,SDSUB)
"RTN","SDQUT",66,0)
 Q SDID
"RTN","SDQUT",67,0)
 ;
"RTN","SDQUT",68,0)
 ;
"RTN","SDQUT",69,0)
POST ; -- post error action logic
"RTN","SDQUT",70,0)
 ;W !,"Error: ",!
"RTN","SDQUT",71,0)
 ;ZW DIPI ZW DIPE
"RTN","SDQUT",72,0)
 Q
"RTN","SDQUT",73,0)
 ;
"RTN","SDQUT",74,0)
 ;
"RTN","SDQUT",75,0)
PREP ; -- Prepare environment / clean up generic error arrays
"RTN","SDQUT",76,0)
 D CLEAN^DILF
"RTN","SDQUT",77,0)
 Q
"RTN","SDQUT",78,0)
 ;
"RTN","SDQUT",79,0)
 ;
"RTN","SDQUT",80,0)
ERRCHK(SDQERRS) ; -- is an error present in error array?
"RTN","SDQUT",81,0)
 IF $G(SDQERRS)]"" Q $O(@SDQERRS@("DIERR",0))>0
"RTN","SDQUT",82,0)
 Q $O(^TMP("DIERR",$J,0))>0
"RTN","SDQUT",83,0)
 ;
"RTN","SDQVAL")
0^5^B20271030
"RTN","SDQVAL",1,0)
SDQVAL ;ALB/MJK - Query Object Validation Methods ;8/12/96
"RTN","SDQVAL",2,0)
 ;;5.3;Scheduling;**131**;Aug 13, 1993
"RTN","SDQVAL",3,0)
 ;
"RTN","SDQVAL",4,0)
QRY(SDQ,SDERR) ; -- validate query input
"RTN","SDQVAL",5,0)
 ;
"RTN","SDQVAL",6,0)
 ; -- do checks
"RTN","SDQVAL",7,0)
 IF SDQ,$D(@SDQUERY@(SDQ)) Q 1
"RTN","SDQVAL",8,0)
 ;
"RTN","SDQVAL",9,0)
 ; -- build error msg
"RTN","SDQVAL",10,0)
 N SDIN,SDOUT
"RTN","SDQVAL",11,0)
 S SDIN("QUERY")=SDQ
"RTN","SDQVAL",12,0)
 S SDOUT("QUERY")=SDQ
"RTN","SDQVAL",13,0)
 D BLD(4096800.101,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",14,0)
 Q 0
"RTN","SDQVAL",15,0)
 ;
"RTN","SDQVAL",16,0)
 ;
"RTN","SDQVAL",17,0)
QRYINACT(SDQ,SDMSG,SDERR) ; -- is query inactive?
"RTN","SDQVAL",18,0)
 ;
"RTN","SDQVAL",19,0)
 ; -- do checks
"RTN","SDQVAL",20,0)
 IF '$G(@SDQUERY@(SDQ,"ACTIVE")) Q 1
"RTN","SDQVAL",21,0)
 ;
"RTN","SDQVAL",22,0)
 ; -- build error msg indicating that query is active
"RTN","SDQVAL",23,0)
 N SDIN,SDOUT
"RTN","SDQVAL",24,0)
 S SDIN("QUERY")=SDQ
"RTN","SDQVAL",25,0)
 S SDOUT("QUERY")=SDQ
"RTN","SDQVAL",26,0)
 D BLD(4096800.106,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",27,0)
 Q 0
"RTN","SDQVAL",28,0)
 ;
"RTN","SDQVAL",29,0)
 ;
"RTN","SDQVAL",30,0)
QRYACT(SDQ,SDMSG,SDERR) ; -- is query active?
"RTN","SDQVAL",31,0)
 ;
"RTN","SDQVAL",32,0)
 ; -- do checks
"RTN","SDQVAL",33,0)
 IF $G(@SDQUERY@(SDQ,"ACTIVE")) Q 1
"RTN","SDQVAL",34,0)
 ;
"RTN","SDQVAL",35,0)
 ; -- build error msg indicating that query is inactive
"RTN","SDQVAL",36,0)
 N SDIN,SDOUT
"RTN","SDQVAL",37,0)
 S SDIN("QUERY")=SDQ
"RTN","SDQVAL",38,0)
 S SDOUT("QUERY")=SDQ
"RTN","SDQVAL",39,0)
 D BLD(4096800.102,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",40,0)
 Q 0
"RTN","SDQVAL",41,0)
 ;
"RTN","SDQVAL",42,0)
 ;
"RTN","SDQVAL",43,0)
ACTION(SDACT,SDERR) ; -- validate action input
"RTN","SDQVAL",44,0)
 ;
"RTN","SDQVAL",45,0)
 ; -- do checks
"RTN","SDQVAL",46,0)
 IF SDACT="SET"!(SDACT="GET") Q 1
"RTN","SDQVAL",47,0)
 ;
"RTN","SDQVAL",48,0)
 ; -- build error msg
"RTN","SDQVAL",49,0)
 N SDIN,SDOUT
"RTN","SDQVAL",50,0)
 S SDIN("ACTION")=SDACT
"RTN","SDQVAL",51,0)
 S SDOUT("ACTION")=SDACT
"RTN","SDQVAL",52,0)
 D BLD(4096800.108,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",53,0)
 Q 0
"RTN","SDQVAL",54,0)
 ;
"RTN","SDQVAL",55,0)
 ;
"RTN","SDQVAL",56,0)
FILTER(SDFIL,SDERR) ; -- validate filter input
"RTN","SDQVAL",57,0)
 N X
"RTN","SDQVAL",58,0)
 ;
"RTN","SDQVAL",59,0)
 ; -- do checks
"RTN","SDQVAL",60,0)
 ; S X=SDFIL D ^DIM IF $D(X) Q 1   ; -- bug in DIR/DIM combo
"RTN","SDQVAL",61,0)
 Q 1
"RTN","SDQVAL",62,0)
 ;
"RTN","SDQVAL",63,0)
 ; -- build error msg
"RTN","SDQVAL",64,0)
 N SDIN,SDOUT
"RTN","SDQVAL",65,0)
 S SDIN("FILTER")=SDFIL
"RTN","SDQVAL",66,0)
 S SDOUT("FILTER")=SDFIL
"RTN","SDQVAL",67,0)
 D BLD(4096800.104,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",68,0)
 Q 0
"RTN","SDQVAL",69,0)
 ;
"RTN","SDQVAL",70,0)
 ;
"RTN","SDQVAL",71,0)
INDEX(SDQ,SDIDX,SDERR) ; -- validate index input
"RTN","SDQVAL",72,0)
 ;
"RTN","SDQVAL",73,0)
 ; -- do checks
"RTN","SDQVAL",74,0)
 IF $O(^TMP("SDQUERY CLASS",$J,SDQ,"INDEX","B",SDIDX,0)) Q 1
"RTN","SDQVAL",75,0)
 ;
"RTN","SDQVAL",76,0)
 ; -- build error msg
"RTN","SDQVAL",77,0)
 N SDIN,SDOUT
"RTN","SDQVAL",78,0)
 S SDIN("INDEX")=SDIDX
"RTN","SDQVAL",79,0)
 S SDOUT("INDEX")=SDIDX
"RTN","SDQVAL",80,0)
 D BLD(4096800.105,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",81,0)
 Q 0
"RTN","SDQVAL",82,0)
 ;
"RTN","SDQVAL",83,0)
 ;
"RTN","SDQVAL",84,0)
STATUS(SDSTA,SDERR) ; -- validate active status
"RTN","SDQVAL",85,0)
 ;
"RTN","SDQVAL",86,0)
 ; -- do checks
"RTN","SDQVAL",87,0)
 IF SDSTA="TRUE"!(SDSTA="FALSE") Q 1
"RTN","SDQVAL",88,0)
 ;
"RTN","SDQVAL",89,0)
 ; -- build error msg
"RTN","SDQVAL",90,0)
 N SDIN,SDOUT
"RTN","SDQVAL",91,0)
 S SDIN("STATUS")=SDSTA
"RTN","SDQVAL",92,0)
 S SDOUT("STATUS")=SDSTA
"RTN","SDQVAL",93,0)
 D BLD(4096800.103,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",94,0)
 Q 0
"RTN","SDQVAL",95,0)
 ;
"RTN","SDQVAL",96,0)
 ;
"RTN","SDQVAL",97,0)
PAT(DFN,SDERR) ; -- validate DFN input
"RTN","SDQVAL",98,0)
 ;
"RTN","SDQVAL",99,0)
 ; -- do checks
"RTN","SDQVAL",100,0)
 IF DFN,$D(^DPT(DFN,0)) Q 1
"RTN","SDQVAL",101,0)
 ;
"RTN","SDQVAL",102,0)
 ; -- build error msg
"RTN","SDQVAL",103,0)
 N SDIN,SDOUT
"RTN","SDQVAL",104,0)
 S SDIN("ID")=DFN
"RTN","SDQVAL",105,0)
 S SDOUT("ID")=DFN
"RTN","SDQVAL",106,0)
 D BLD(4096800.002,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",107,0)
 Q 0
"RTN","SDQVAL",108,0)
 ;
"RTN","SDQVAL",109,0)
 ;
"RTN","SDQVAL",110,0)
RANGE(SDBEG,SDEND,SDERR) ; -- validate date range
"RTN","SDQVAL",111,0)
 ;
"RTN","SDQVAL",112,0)
 ; -- do checks
"RTN","SDQVAL",113,0)
 ; **** ADD MORE CHECKS HERE! ****
"RTN","SDQVAL",114,0)
 IF SDBEG,SDEND,SDBEG'>SDEND Q 1
"RTN","SDQVAL",115,0)
 ;
"RTN","SDQVAL",116,0)
 ; -- build error msg
"RTN","SDQVAL",117,0)
 N SDIN,SDOUT
"RTN","SDQVAL",118,0)
 S SDIN("BEGIN")=SDBEG
"RTN","SDQVAL",119,0)
 S SDIN("END")=SDEND
"RTN","SDQVAL",120,0)
 S SDOUT("BEGIN")=SDBEG
"RTN","SDQVAL",121,0)
 S SDOUT("END")=SDEND
"RTN","SDQVAL",122,0)
 D BLD(4096800.022,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",123,0)
 Q 0
"RTN","SDQVAL",124,0)
 ;
"RTN","SDQVAL",125,0)
 ;
"RTN","SDQVAL",126,0)
PROP(SDQ,SDERR) ; -- are properties set for execution
"RTN","SDQVAL",127,0)
 N SDTYPE,SDOK,SDPROP
"RTN","SDQVAL",128,0)
 S SDOK=1,SDPROP=""
"RTN","SDQVAL",129,0)
 S SDTYPE=+$G(@SDQUERY@(SDQ,"INDEX TYPE"))
"RTN","SDQVAL",130,0)
 ;
"RTN","SDQVAL",131,0)
 ; -- do checks
"RTN","SDQVAL",132,0)
 ; -- check if type is invalid
"RTN","SDQVAL",133,0)
 IF SDTYPE=0!(SDTYPE>4) D
"RTN","SDQVAL",134,0)
 . S SDOK=0
"RTN","SDQVAL",135,0)
 . S SDPROP=SDPROP_"INDEX / "
"RTN","SDQVAL",136,0)
 ;
"RTN","SDQVAL",137,0)
 ; -- if type is regular or composite date range
"RTN","SDQVAL",138,0)
 IF SDTYPE=1!(SDTYPE=4),$G(@SDQUERY@(SDQ,"MASTER VALUE"))="" D
"RTN","SDQVAL",139,0)
 . S SDOK=0
"RTN","SDQVAL",140,0)
 . S SDPROP=SDPROP_$G(@SDQUERY@(SDQ,"INDEX EXTERNAL"))_" / "
"RTN","SDQVAL",141,0)
 ;
"RTN","SDQVAL",142,0)
 ;
"RTN","SDQVAL",143,0)
 ; -- if type is regular date range or composite date range
"RTN","SDQVAL",144,0)
 IF SDTYPE=2!(SDTYPE=4) D
"RTN","SDQVAL",145,0)
 . IF $G(@SDQUERY@(SDQ,"BEGIN DATE"))="" D  Q
"RTN","SDQVAL",146,0)
 . . S SDOK=0
"RTN","SDQVAL",147,0)
 . . S SDPROP=SDPROP_"BEGIN DATE / "
"RTN","SDQVAL",148,0)
 . ;
"RTN","SDQVAL",149,0)
 . IF $G(@SDQUERY@(SDQ,"END DATE"))="" D  Q
"RTN","SDQVAL",150,0)
 . . S SDOK=0
"RTN","SDQVAL",151,0)
 . . S SDPROP=SDPROP_"END DATE / "
"RTN","SDQVAL",152,0)
 ;
"RTN","SDQVAL",153,0)
 ;
"RTN","SDQVAL",154,0)
 ; -- if type is composite (currently not supported [10/97])
"RTN","SDQVAL",155,0)
 IF SDTYPE=3 D
"RTN","SDQVAL",156,0)
 . S SDOK=0
"RTN","SDQVAL",157,0)
 . S SDPROP=SDPROP_"NO SUPPORTED / "
"RTN","SDQVAL",158,0)
 ;
"RTN","SDQVAL",159,0)
 ;
"RTN","SDQVAL",160,0)
 ; -- build error msg
"RTN","SDQVAL",161,0)
 IF 'SDOK D
"RTN","SDQVAL",162,0)
 . N SDIN,SDOUT
"RTN","SDQVAL",163,0)
 . S SDIN("PROPERTIES")=SDPROP
"RTN","SDQVAL",164,0)
 . S SDOUT("PROPERTIES")=SDPROP
"RTN","SDQVAL",165,0)
 . D BLD(4096800.109,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",166,0)
 ;
"RTN","SDQVAL",167,0)
PROPQ Q SDOK
"RTN","SDQVAL",168,0)
 ;
"RTN","SDQVAL",169,0)
 ;
"RTN","SDQVAL",170,0)
SCAN(SDQ,SDERR) ; -- is everything set up for SCAN to proceed?
"RTN","SDQVAL",171,0)
 ;
"RTN","SDQVAL",172,0)
 ; -- do checks
"RTN","SDQVAL",173,0)
 ; -- is callback defined
"RTN","SDQVAL",174,0)
 IF $G(@SDQUERY@(SDQ,"SCAN APP CALLBACK"))]"" Q 1
"RTN","SDQVAL",175,0)
 ;
"RTN","SDQVAL",176,0)
 ; -- build error msg
"RTN","SDQVAL",177,0)
 D BLD(4096800.112,"","",$G(SDERR))
"RTN","SDQVAL",178,0)
 Q 0
"RTN","SDQVAL",179,0)
 ;
"RTN","SDQVAL",180,0)
 ;
"RTN","SDQVAL",181,0)
SCANCB(SDCB,SDERR) ; -- is scan callback valid M code?
"RTN","SDQVAL",182,0)
 N X
"RTN","SDQVAL",183,0)
 ;
"RTN","SDQVAL",184,0)
 ; -- do checks
"RTN","SDQVAL",185,0)
 ;S X=SDCB D ^DIM IF $D(X) Q 1   ; -- bug in DIR/DIM combo
"RTN","SDQVAL",186,0)
 Q 1
"RTN","SDQVAL",187,0)
 ;
"RTN","SDQVAL",188,0)
 ; -- build error msg
"RTN","SDQVAL",189,0)
 N SDIN,SDOUT
"RTN","SDQVAL",190,0)
 S SDIN("CALLBACK")=SDCB
"RTN","SDQVAL",191,0)
 S SDOUT("CALLBACK")=SDCB
"RTN","SDQVAL",192,0)
 D BLD(4096800.113,.SDIN,.SDOUT,$G(SDERR))
"RTN","SDQVAL",193,0)
 Q 0
"RTN","SDQVAL",194,0)
 ;
"RTN","SDQVAL",195,0)
 ;
"RTN","SDQVAL",196,0)
BLD(SDMSG,SDIN,SDOUT,SDERR) ; -- build message
"RTN","SDQVAL",197,0)
 D BLD^DIALOG(SDMSG,.SDIN,.SDOUT,$G(SDERR),"F")
"RTN","SDQVAL",198,0)
 IF $G(SDEBUG) D
"RTN","SDQVAL",199,0)
 . D MSG^DIALOG("WES","","",5,$G(SDERR))
"RTN","SDQVAL",200,0)
 . N DIR
"RTN","SDQVAL",201,0)
 . S DIR(0)="E",DIR("A")="Press RETURN to continue"
"RTN","SDQVAL",202,0)
 . W ! D ^DIR
"RTN","SDQVAL",203,0)
 Q
"RTN","SDQVAL",204,0)
 ;
"SEC","^DIC",409.64,409.64,0,"AUDIT")
@
"SEC","^DIC",409.64,409.64,0,"DD")
@
"SEC","^DIC",409.64,409.64,0,"DEL")
@
"SEC","^DIC",409.64,409.64,0,"LAYGO")
@
"SEC","^DIC",409.64,409.64,0,"RD")
@
"SEC","^DIC",409.64,409.64,0,"WR")
@
"VER")
8.0^21.0
"^DD",409.64,409.64,0)
FIELD^^.04^10
"^DD",409.64,409.64,0,"DDA")
N
"^DD",409.64,409.64,0,"DT")
2970925
"^DD",409.64,409.64,0,"IX","B",409.64,.01)

"^DD",409.64,409.64,0,"NM","QUERY OBJECT")

"^DD",409.64,409.64,.01,0)
NAME^RF^^0;1^K:$L(X)>40!($L(X)<3)!'(X'?1P.E) X
"^DD",409.64,409.64,.01,1,0)
^.1
"^DD",409.64,409.64,.01,1,1,0)
409.64^B
"^DD",409.64,409.64,.01,1,1,1)
S ^SD(409.64,"B",$E(X,1,30),DA)=""
"^DD",409.64,409.64,.01,1,1,2)
K ^SD(409.64,"B",$E(X,1,30),DA)
"^DD",409.64,409.64,.01,3)
Answer must be 3-40 characters in length.
"^DD",409.64,409.64,.01,21,0)
^^3^3^2970814^^^
"^DD",409.64,409.64,.01,21,1,0)
 This property contains the name of the query object being defined.
"^DD",409.64,409.64,.01,21,2,0)
 
"^DD",409.64,409.64,.01,21,3,0)
 The name should be namespaced.
"^DD",409.64,409.64,.01,"DT")
2970721
"^DD",409.64,409.64,.02,0)
FILE^P1'^DIC(^0;2^Q
"^DD",409.64,409.64,.02,21,0)
^^5^5^2970814^^^
"^DD",409.64,409.64,.02,21,1,0)
 This property contains the name of the file associated with this query object
"^DD",409.64,409.64,.02,21,2,0)
 definition.
"^DD",409.64,409.64,.02,21,3,0)
 
"^DD",409.64,409.64,.02,21,4,0)
 (Note: It is possible to have a file associated with more than
"^DD",409.64,409.64,.02,21,5,0)
        one query object definition.) 
"^DD",409.64,409.64,.02,"DT")
2970814
"^DD",409.64,409.64,.03,0)
SUBSCRIPTS IN GLOBAL ROOT^NJ1,0^^0;3^K:+X'=X!(X>9)!(X<0)!(X?.E1"."1N.N) X
"^DD",409.64,409.64,.03,3)
Type a Number between 0 and 9, 0 Decimal Digits
"^DD",409.64,409.64,.03,21,0)
^^13^13^2970924^^^^
"^DD",409.64,409.64,.03,21,1,0)
 This property contains the number of subscripts in the global root for
"^DD",409.64,409.64,.03,21,2,0)
 the file associated with this query object definition.
"^DD",409.64,409.64,.03,21,3,0)
 
"^DD",409.64,409.64,.03,21,4,0)
 Examples:   
"^DD",409.64,409.64,.03,21,5,0)
   
"^DD",409.64,409.64,.03,21,6,0)
    Global Root            Level
"^DD",409.64,409.64,.03,21,7,0)
    -----------            -----
"^DD",409.64,409.64,.03,21,8,0)
     ^SCE                   0
"^DD",409.64,409.64,.03,21,9,0)
     ^SCPT(404.42)          1
"^DD",409.64,409.64,.03,21,10,0)
             
"^DD",409.64,409.64,.03,21,11,0)
 
"^DD",409.64,409.64,.03,21,12,0)
 This property is needed by some methods when the intrinic $QSUBCRIPT
"^DD",409.64,409.64,.03,21,13,0)
 function is executed.
"^DD",409.64,409.64,.03,"DT")
2970804
"^DD",409.64,409.64,.04,0)
$STORAGE LIMIT^NJ6,0^^0;4^K:+X'=X!(X>300000)!(X<5000)!(X?.E1"."1N.N) X
"^DD",409.64,409.64,.04,3)
Type a Number between 5000 and 300000, 0 Decimal Digits
"^DD",409.64,409.64,.04,21,0)
^^13^13^2970925^^^
"^DD",409.64,409.64,.04,21,1,0)
 This property indicates the trigger value of $STORAGE that causes
"^DD",409.64,409.64,.04,21,2,0)
 the query object data to be stored in ^TMP global instead of a local array.
"^DD",409.64,409.64,.04,21,3,0)
 (The local variable is the default.)
"^DD",409.64,409.64,.04,21,4,0)
 
"^DD",409.64,409.64,.04,21,5,0)
 If the $STORAGE is less than the Property value then store in global.
"^DD",409.64,409.64,.04,21,6,0)
 
"^DD",409.64,409.64,.04,21,7,0)
 Examples:
"^DD",409.64,409.64,.04,21,8,0)
           $Storage Value     Property Value     Query Stored in...
"^DD",409.64,409.64,.04,21,9,0)
           ==============     ==============     ==================
"^DD",409.64,409.64,.04,21,10,0)
                30000             10000               local
"^DD",409.64,409.64,.04,21,11,0)
                 5000             10000               global
"^DD",409.64,409.64,.04,21,12,0)

"^DD",409.64,409.64,.04,21,13,0)

"^DD",409.64,409.64,.04,23,0)
^^1^1^2970925^^^
"^DD",409.64,409.64,.04,23,1,0)
See DESCRIPTION field.
"^DD",409.64,409.64,.04,"DT")
2970925
"^DD",409.64,409.64,.07,0)
OK TO TRANSPORT?^S^0:NOT OK;1:OK;^0;7^Q
"^DD",409.64,409.64,.07,21,0)
^^3^3^2970814^^
"^DD",409.64,409.64,.07,21,1,0)
 This field indicates to the transport utility if this
"^DD",409.64,409.64,.07,21,2,0)
 query template should be distributed.
"^DD",409.64,409.64,.07,21,3,0)

"^DD",409.64,409.64,.07,"DT")
2970721
"^DD",409.64,409.64,101,0)
OPEN METHOD^K^^OPEN;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.64,409.64,101,3)
This is Standard MUMPS code.
"^DD",409.64,409.64,101,9)
@
"^DD",409.64,409.64,101,21,0)
^^3^3^2970814^^^^
"^DD",409.64,409.64,101,21,1,0)
 This property contains any query specific open logic that the 
"^DD",409.64,409.64,101,21,2,0)
 custodial pacakge needs performed. This logic is executed
"^DD",409.64,409.64,101,21,3,0)
 after the generic open logic is performed.
"^DD",409.64,409.64,101,"DT")
2970721
"^DD",409.64,409.64,102,0)
CLOSE METHOD^K^^CLOSE;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.64,409.64,102,3)
This is Standard MUMPS code.
"^DD",409.64,409.64,102,9)
@
"^DD",409.64,409.64,102,21,0)
^^4^4^2970814^^^
"^DD",409.64,409.64,102,21,1,0)
 This property contains any query specific close logic that the 
"^DD",409.64,409.64,102,21,2,0)
 custodial pacakge needs performed. This logic is executed
"^DD",409.64,409.64,102,21,3,0)
 before the generic close logic is performed.
"^DD",409.64,409.64,102,21,4,0)

"^DD",409.64,409.64,102,"DT")
2970721
"^DD",409.64,409.64,103,0)
SCAN METHOD^RK^^SCAN;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.64,409.64,103,3)
This is Standard MUMPS code.
"^DD",409.64,409.64,103,9)
@
"^DD",409.64,409.64,103,21,0)
^^17^17^2970814^^
"^DD",409.64,409.64,103,21,1,0)
 This property contains query object specific logic that the custodial
"^DD",409.64,409.64,103,21,2,0)
 package must specify that allows the use of the Scan method by
"^DD",409.64,409.64,103,21,3,0)
 developers.
"^DD",409.64,409.64,103,21,4,0)
 
"^DD",409.64,409.64,103,21,5,0)
 This scan logic typically hard codes references to supported indexes.
"^DD",409.64,409.64,103,21,6,0)
 There is a significant performance reasons for the custidial packages
"^DD",409.64,409.64,103,21,7,0)
 to develop this logic. The Next/Eof scanning approach is much slower then
"^DD",409.64,409.64,103,21,8,0)
 using Scan/Scan Callback approach.
"^DD",409.64,409.64,103,21,9,0)
 
"^DD",409.64,409.64,103,21,10,0)
 
"^DD",409.64,409.64,103,21,11,0)
 For more information, see API definitions for the following: 
"^DD",409.64,409.64,103,21,12,0)
    Scan
"^DD",409.64,409.64,103,21,13,0)
    Scan Callback
"^DD",409.64,409.64,103,21,14,0)
    Next
"^DD",409.64,409.64,103,21,15,0)
    EOF
"^DD",409.64,409.64,103,21,16,0)
    Prior
"^DD",409.64,409.64,103,21,17,0)
    BOF
"^DD",409.64,409.64,103,"DT")
2970724
"^DD",409.64,409.64,104,0)
ZERO NODE METHOD^K^^ZERO;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.64,409.64,104,3)
This is Standard MUMPS code.
"^DD",409.64,409.64,104,9)
@
"^DD",409.64,409.64,104,21,0)
^^15^15^2970814^^^^
"^DD",409.64,409.64,104,21,1,0)
 This property contains any query specific logic that the 
"^DD",409.64,409.64,104,21,2,0)
 custodial pacakge needs performed to screen out unsupported
"^DD",409.64,409.64,104,21,3,0)
 fields on the zero node.
"^DD",409.64,409.64,104,21,4,0)
 
"^DD",409.64,409.64,104,21,5,0)
 Various methods of the query object need to make available to
"^DD",409.64,409.64,104,21,6,0)
 developers the zero node of an entry. For example, during the execution
"^DD",409.64,409.64,104,21,7,0)
 of the filters and scan callbacks, the zero node is made available
"^DD",409.64,409.64,104,21,8,0)
 to developers in the variable Y0.
"^DD",409.64,409.64,104,21,9,0)
 
"^DD",409.64,409.64,104,21,10,0)
 If the custodial package does not support all fields on the zero
"^DD",409.64,409.64,104,21,11,0)
 node, then logic similar to the following needs to be specified
"^DD",409.64,409.64,104,21,12,0)
 in this property:
"^DD",409.64,409.64,104,21,13,0)
 
"^DD",409.64,409.64,104,21,14,0)
         S Y0=$$Y0^XXUTL(Y)
"^DD",409.64,409.64,104,21,15,0)
                           ...where Y is the internal entry number
"^DD",409.64,409.64,104,"DT")
2970730
"^DD",409.64,409.64,200,0)
SUPPORTED INDEXES^409.641^^INDEX;0
"^DD",409.64,409.64,200,21,0)
^^3^3^2970814^^^
"^DD",409.64,409.64,200,21,1,0)
 This multiple contains index definitions that are supported
"^DD",409.64,409.64,200,21,2,0)
 by the custodial package when the developer uses this query object
"^DD",409.64,409.64,200,21,3,0)
 definition.
"^DD",409.64,409.641,0)
SUPPORTED INDEXES SUB-FIELD^^101^4
"^DD",409.64,409.641,0,"DT")
2970721
"^DD",409.64,409.641,0,"IX","B",409.641,.01)

"^DD",409.64,409.641,0,"NM","SUPPORTED INDEXES")

"^DD",409.64,409.641,0,"UP")
409.64
"^DD",409.64,409.641,.01,0)
INDEX^MF^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",409.64,409.641,.01,1,0)
^.1
"^DD",409.64,409.641,.01,1,1,0)
409.641^B
"^DD",409.64,409.641,.01,1,1,1)
S ^SD(409.64,DA(1),"INDEX","B",$E(X,1,30),DA)=""
"^DD",409.64,409.641,.01,1,1,2)
K ^SD(409.64,DA(1),"INDEX","B",$E(X,1,30),DA)
"^DD",409.64,409.641,.01,3)
Answer must be 3-30 characters in length.
"^DD",409.64,409.641,.01,21,0)
^^12^12^2970814^^
"^DD",409.64,409.641,.01,21,1,0)
 This property is the name on the index supported by the custodial
"^DD",409.64,409.641,.01,21,2,0)
 package.
"^DD",409.64,409.641,.01,21,3,0)
 
"^DD",409.64,409.641,.01,21,4,0)
 
"^DD",409.64,409.641,.01,21,5,0)
 Note: This is not the name of the cross reference being used
"^DD",409.64,409.641,.01,21,6,0)
       internally. This is a easy to understand text that
"^DD",409.64,409.641,.01,21,7,0)
       describes the content of the cross reference.
"^DD",409.64,409.641,.01,21,8,0)
 
"^DD",409.64,409.641,.01,21,9,0)
       For example:
"^DD",409.64,409.641,.01,21,10,0)
                    File: Patient
"^DD",409.64,409.641,.01,21,11,0)
         Cross Reference: B
"^DD",409.64,409.641,.01,21,12,0)
                   Index: PATIENT NAME
"^DD",409.64,409.641,.01,"DT")
2970721
"^DD",409.64,409.641,.02,0)
CROSS REFERENCE^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",409.64,409.641,.02,3)
Answer must be 1-30 characters in length.
"^DD",409.64,409.641,.02,21,0)
^^2^2^2970814^^
"^DD",409.64,409.641,.02,21,1,0)
 This property indicates the specific internal VA FileMan cross reference
"^DD",409.64,409.641,.02,21,2,0)
 associated with the index being defined.
"^DD",409.64,409.641,.02,"DT")
2970721
"^DD",409.64,409.641,.03,0)
TYPE^S^1:REGULAR;2:REGULAR DATE/TIME;3:COMPOSITE;4:COMPOSITE DATE/TIME;^0;3^Q
"^DD",409.64,409.641,.03,21,0)
^^14^14^2970814^^
"^DD",409.64,409.641,.03,21,1,0)
 This property indicates the type of index being defined. Based
"^DD",409.64,409.641,.03,21,2,0)
 on this type, various query object method will execute generic
"^DD",409.64,409.641,.03,21,3,0)
 logic that applies to all indexes of the specified type.
"^DD",409.64,409.641,.03,21,4,0)
 
"^DD",409.64,409.641,.03,21,5,0)
 Note: Currently, 8/97, the 'COMPOSITE' type is not supported.
"^DD",409.64,409.641,.03,21,6,0)
 
"^DD",409.64,409.641,.03,21,7,0)
 
"^DD",409.64,409.641,.03,21,8,0)
 Examples:
"^DD",409.64,409.641,.03,21,9,0)
 
"^DD",409.64,409.641,.03,21,10,0)
      Index                           Type
"^DD",409.64,409.641,.03,21,11,0)
      -----                           ----
"^DD",409.64,409.641,.03,21,12,0)
      ^SCE("C",DFN,DA)                REGULAR
"^DD",409.64,409.641,.03,21,13,0)
      ^SCE("B",DATETIME,DA)           REGULAR DATE/TIME
"^DD",409.64,409.641,.03,21,14,0)
      ^SCE("ADFN",DFN,DATETIME,DA)    COMPOSITE DATE/TIME
"^DD",409.64,409.641,.03,"DT")
2970721
"^DD",409.64,409.641,101,0)
CUSTOM NODE VALIDATOR^K^^VALIDATOR;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.64,409.641,101,3)
This is Standard MUMPS code.
"^DD",409.64,409.641,101,9)
@
"^DD",409.64,409.641,101,21,0)
^^10^10^2970814^^^
"^DD",409.64,409.641,101,21,1,0)
 This property contains any query specific validator logic that the 
"^DD",409.64,409.641,101,21,2,0)
 custodial pacakge needs performed. This logic is executed
"^DD",409.64,409.641,101,21,3,0)
 after the various methods execute the intrinic $QUERY function.
"^DD",409.64,409.641,101,21,4,0)
 Normally, the generic validator associated with the index type is
"^DD",409.64,409.641,101,21,5,0)
 sufficient and no custom logic is required.
"^DD",409.64,409.641,101,21,6,0)
 
"^DD",409.64,409.641,101,21,7,0)
 The validator checks to see if $QUERY returns a value that is
"^DD",409.64,409.641,101,21,8,0)
 beyond the scope of the query object's properties. For example,
"^DD",409.64,409.641,101,21,9,0)
 if your query is for a specific patient, the validator will
"^DD",409.64,409.641,101,21,10,0)
 check if a new patient has been reached by $QUERY.
"^DD",409.64,409.641,101,"DT")
2970721
"^DIC",409.64,409.64,0)
QUERY OBJECT^409.64
"^DIC",409.64,409.64,0,"GL")
^SD(409.64,
"^DIC",409.64,409.64,"%D",0)
^^9^9^2970814^^^^
"^DIC",409.64,409.64,"%D",1,0)
 This table contains the query object definition for a specific database
"^DIC",409.64,409.64,"%D",2,0)
 file supported by a custodial package. This definition specifies any specific
"^DIC",409.64,409.64,"%D",3,0)
 mehtods and properties that are needed beyond the generic methods and
"^DIC",409.64,409.64,"%D",4,0)
 properties available.
"^DIC",409.64,409.64,"%D",5,0)
 
"^DIC",409.64,409.64,"%D",6,0)
 Using this query object interface, custodial packages can allow access
"^DIC",409.64,409.64,"%D",7,0)
 to internal data entries to other packages without direct global access
"^DIC",409.64,409.64,"%D",8,0)
 and integration agreements.
"^DIC",409.64,409.64,"%D",9,0)
 
"^DIC",409.64,"B","QUERY OBJECT",409.64)

**INSTALL NAME**
PX*1.0*39
"BLD",805,0)
PX*1.0*39^PCE PATIENT CARE ENCOUNTER^0^2971017^n
"BLD",805,1,0)
^^8^8^2971017^^^
"BLD",805,1,1,0)
This build contains the PCE APIs required by the ACRP Interface Toolkit
"BLD",805,1,2,0)
(Build SD*5.3*131).
"BLD",805,1,3,0)

"BLD",805,1,4,0)
This build provides ACRP access to procedure, diagnosis and provider
"BLD",805,1,5,0)
information for an outpatient encounter.
"BLD",805,1,6,0)

"BLD",805,1,7,0)
Refer to National Patch Module for more details on patch SD*5.3*131.
"BLD",805,1,8,0)

"BLD",805,4,0)
^9.64PA^^
"BLD",805,"ABPKG")
n
"BLD",805,"KRN",0)
^9.67PA^19^18
"BLD",805,"KRN",.4,0)
.4
"BLD",805,"KRN",.4,"NM",0)
^9.68A^^
"BLD",805,"KRN",.401,0)
.401
"BLD",805,"KRN",.402,0)
.402
"BLD",805,"KRN",.403,0)
.403
"BLD",805,"KRN",.5,0)
.5
"BLD",805,"KRN",.84,0)
.84
"BLD",805,"KRN",.84,"NM",0)
^9.68A^1^1
"BLD",805,"KRN",.84,"NM",1,0)
1509000.001^^0
"BLD",805,"KRN",.84,"NM","B",1509000.001,1)

"BLD",805,"KRN",3.6,0)
3.6
"BLD",805,"KRN",3.8,0)
3.8
"BLD",805,"KRN",9.2,0)
9.2
"BLD",805,"KRN",9.8,0)
9.8
"BLD",805,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",805,"KRN",9.8,"NM",1,0)
PXAPIOE^^0^B17841150
"BLD",805,"KRN",9.8,"NM","B","PXAPIOE",1)

"BLD",805,"KRN",19,0)
19
"BLD",805,"KRN",19,"NM",0)
^9.68A^^
"BLD",805,"KRN",19.1,0)
19.1
"BLD",805,"KRN",101,0)
101
"BLD",805,"KRN",409.61,0)
409.61
"BLD",805,"KRN",771,0)
771
"BLD",805,"KRN",869.2,0)
869.2
"BLD",805,"KRN",870,0)
870
"BLD",805,"KRN",8994,0)
8994
"BLD",805,"KRN","B",.4,.4)

"BLD",805,"KRN","B",.401,.401)

"BLD",805,"KRN","B",.402,.402)

"BLD",805,"KRN","B",.403,.403)

"BLD",805,"KRN","B",.5,.5)

"BLD",805,"KRN","B",.84,.84)

"BLD",805,"KRN","B",3.6,3.6)

"BLD",805,"KRN","B",3.8,3.8)

"BLD",805,"KRN","B",9.2,9.2)

"BLD",805,"KRN","B",9.8,9.8)

"BLD",805,"KRN","B",19,19)

"BLD",805,"KRN","B",19.1,19.1)

"BLD",805,"KRN","B",101,101)

"BLD",805,"KRN","B",409.61,409.61)

"BLD",805,"KRN","B",771,771)

"BLD",805,"KRN","B",869.2,869.2)

"BLD",805,"KRN","B",870,870)

"BLD",805,"KRN","B",8994,8994)

"BLD",805,"QUES",0)
^9.62^^
"BLD",805,"REQB",0)
^9.611^^
"KRN",.84,1509000.001,-1)
0^1
"KRN",.84,1509000.001,0)
1509000.001^1^y^VISIT TRACKING^Invalid Visit ID Number
"KRN",.84,1509000.001,1,0)
^^2^2^2970808^^^^
"KRN",.84,1509000.001,1,1,0)
Used to indicate the ID number passed, usually as part of an API
"KRN",.84,1509000.001,1,2,0)
call, is invalid.
"KRN",.84,1509000.001,2,0)
^^6^6^2970808^^^^
"KRN",.84,1509000.001,2,1,0)
Error Number: 1509000.001
"KRN",.84,1509000.001,2,2,0)

"KRN",.84,1509000.001,2,3,0)
  Visit ID number is not valid.
"KRN",.84,1509000.001,2,4,0)

"KRN",.84,1509000.001,2,5,0)
  ID Number: '|ID|'.
"KRN",.84,1509000.001,2,6,0)
_________________________________________________________________
"KRN",.84,1509000.001,3,0)
^.845^1^1
"KRN",.84,1509000.001,3,1,0)
ID^ID of Visit file entry
"KRN",.84,1509000.001,6)
D POST^PXAPIOE
"OER",507,0)
507^
"OER",507,1,0)
^100.9951PA^45^45
"OER",507,1,1,0)
3155
"OER",507,1,1,1,0)
^100.99511PA^1^1
"OER",507,1,1,1,1,0)
3
"OER",507,1,2,0)
3156
"OER",507,1,3,0)
3157
"OER",507,1,4,0)
3158
"OER",507,1,5,0)
3159
"OER",507,1,6,0)
3160
"OER",507,1,7,0)
3161
"OER",507,1,8,0)
3162
"OER",507,1,9,0)
3163
"OER",507,1,10,0)
3164
"OER",507,1,11,0)
3165
"OER",507,1,12,0)
3166
"OER",507,1,13,0)
3167
"OER",507,1,14,0)
3168
"OER",507,1,15,0)
3169
"OER",507,1,16,0)
3170
"OER",507,1,17,0)
3171
"OER",507,1,18,0)
3172
"OER",507,1,19,0)
3173
"OER",507,1,20,0)
3174
"OER",507,1,21,0)
3175
"OER",507,1,22,0)
3176
"OER",507,1,23,0)
3177
"OER",507,1,24,0)
3178
"OER",507,1,25,0)
3179
"OER",507,1,26,0)
3180
"OER",507,1,27,0)
3181
"OER",507,1,28,0)
3182
"OER",507,1,29,0)
3183
"OER",507,1,30,0)
3184
"OER",507,1,31,0)
3185
"OER",507,1,32,0)
3186
"OER",507,1,33,0)
3187
"OER",507,1,34,0)
3188
"OER",507,1,35,0)
3189
"OER",507,1,36,0)
3190
"OER",507,1,37,0)
3191
"OER",507,1,38,0)
3192
"OER",507,1,39,0)
3193
"OER",507,1,40,0)
3194
"OER",507,1,41,0)
3195
"OER",507,1,42,0)
3196
"OER",507,1,43,0)
3197
"OER",507,1,44,0)
3198
"OER",507,1,45,0)
3199
"OER",507,1,45,1,0)
^100.99511PA^1^1
"OER",507,1,45,1,1,0)
3200
"OER",507,5,0)
^100.9955^^0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PKG",507,-1)
1^1
"PKG",507,0)
PCE PATIENT CARE ENCOUNTER^PX^Patient Care Encounter
"PKG",507,22,0)
^9.49I^1^1
"PKG",507,22,1,0)
1.0^2960812^2960912^10958
"PKG",507,22,1,"PAH",1,0)
39^2971017
"PKG",507,22,1,"PAH",1,1,0)
^^8^8^2980120
"PKG",507,22,1,"PAH",1,1,1,0)
This build contains the PCE APIs required by the ACRP Interface Toolkit
"PKG",507,22,1,"PAH",1,1,2,0)
(Build SD*5.3*131).
"PKG",507,22,1,"PAH",1,1,3,0)

"PKG",507,22,1,"PAH",1,1,4,0)
This build provides ACRP access to procedure, diagnosis and provider
"PKG",507,22,1,"PAH",1,1,5,0)
information for an outpatient encounter.
"PKG",507,22,1,"PAH",1,1,6,0)

"PKG",507,22,1,"PAH",1,1,7,0)
Refer to National Patch Module for more details on patch SD*5.3*131.
"PKG",507,22,1,"PAH",1,1,8,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","PXAPIOE")
0^1^B17841150
"RTN","PXAPIOE",1,0)
PXAPIOE ;ALB/MJK - Supported References for ACRP ;8/12/96
"RTN","PXAPIOE",2,0)
 ;;1.0;PCE PATIENT CARE ENCOUNTER;**39**;Aug 12, 1996
"RTN","PXAPIOE",3,0)
 ;
"RTN","PXAPIOE",4,0)
CPT(PXVIEN,PXERR) ; -- at least one cpt for visit??
"RTN","PXAPIOE",5,0)
 ;
"RTN","PXAPIOE",6,0)
 N PXOK
"RTN","PXAPIOE",7,0)
 S PXOK=0
"RTN","PXAPIOE",8,0)
 ;
"RTN","PXAPIOE",9,0)
 ; -- do validation checks
"RTN","PXAPIOE",10,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G CPTQ
"RTN","PXAPIOE",11,0)
 ;
"RTN","PXAPIOE",12,0)
 S PXOK=($O(^AUPNVCPT("AD",PXVIEN,0))>0)
"RTN","PXAPIOE",13,0)
CPTQ Q PXOK
"RTN","PXAPIOE",14,0)
 ;
"RTN","PXAPIOE",15,0)
 ;
"RTN","PXAPIOE",16,0)
GETCPT(PXVIEN,PXCPT,PXERR) ; -- get cpt's for visit
"RTN","PXAPIOE",17,0)
 ;
"RTN","PXAPIOE",18,0)
 ; -- do validation checks
"RTN","PXAPIOE",19,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G GETCPTQ
"RTN","PXAPIOE",20,0)
 ;
"RTN","PXAPIOE",21,0)
 N I,CNT S (I,CNT)=0 F  S I=$O(^AUPNVCPT("AD",PXVIEN,I)) Q:'I  D
"RTN","PXAPIOE",22,0)
 . IF $D(^AUPNVCPT(I,0)) S @PXCPT@(I)=^(0),CNT=CNT+1
"RTN","PXAPIOE",23,0)
 S @PXCPT=CNT
"RTN","PXAPIOE",24,0)
GETCPTQ Q
"RTN","PXAPIOE",25,0)
 ;
"RTN","PXAPIOE",26,0)
 ;
"RTN","PXAPIOE",27,0)
DX(PXVIEN,PXERR) ; -- at least one dx for visit??
"RTN","PXAPIOE",28,0)
 ;
"RTN","PXAPIOE",29,0)
 N PXOK
"RTN","PXAPIOE",30,0)
 S PXOK=0
"RTN","PXAPIOE",31,0)
 ;
"RTN","PXAPIOE",32,0)
 ; -- do validation checks
"RTN","PXAPIOE",33,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G DXQ
"RTN","PXAPIOE",34,0)
 ;
"RTN","PXAPIOE",35,0)
 S PXOK=($O(^AUPNVPOV("AD",PXVIEN,0))>0)
"RTN","PXAPIOE",36,0)
DXQ Q PXOK
"RTN","PXAPIOE",37,0)
 ;
"RTN","PXAPIOE",38,0)
 ;
"RTN","PXAPIOE",39,0)
GETDX(PXVIEN,PXDX,PXERR) ; -- get dx's for visit
"RTN","PXAPIOE",40,0)
 ;
"RTN","PXAPIOE",41,0)
 ; -- do validation checks
"RTN","PXAPIOE",42,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G GETDXQ
"RTN","PXAPIOE",43,0)
 ;
"RTN","PXAPIOE",44,0)
 N I,CNT S (I,CNT)=0 F  S I=$O(^AUPNVPOV("AD",PXVIEN,I)) Q:'I  D
"RTN","PXAPIOE",45,0)
 . IF $D(^AUPNVPOV(I,0)) S @PXDX@(I)=^(0),CNT=CNT+1
"RTN","PXAPIOE",46,0)
 S @PXDX=CNT
"RTN","PXAPIOE",47,0)
GETDXQ Q
"RTN","PXAPIOE",48,0)
 ;
"RTN","PXAPIOE",49,0)
 ;
"RTN","PXAPIOE",50,0)
PRV(PXVIEN,PXERR) ; -- at least one provider for visit?
"RTN","PXAPIOE",51,0)
 ;
"RTN","PXAPIOE",52,0)
 N PXOK
"RTN","PXAPIOE",53,0)
 S PXOK=0
"RTN","PXAPIOE",54,0)
 ;
"RTN","PXAPIOE",55,0)
 ; -- do validation checks
"RTN","PXAPIOE",56,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G PRVQ
"RTN","PXAPIOE",57,0)
 S PXOK=($O(^AUPNVPRV("AD",PXVIEN,0))>0)
"RTN","PXAPIOE",58,0)
PRVQ Q PXOK
"RTN","PXAPIOE",59,0)
 ;
"RTN","PXAPIOE",60,0)
 ;
"RTN","PXAPIOE",61,0)
GETPRV(PXVIEN,PXPRV,PXERR) ; -- get provider's for visit
"RTN","PXAPIOE",62,0)
 ;
"RTN","PXAPIOE",63,0)
 ; -- do validation checks
"RTN","PXAPIOE",64,0)
 IF '$$VALVST(PXVIEN,$G(PXERR)) G GETPRVQ
"RTN","PXAPIOE",65,0)
 ;
"RTN","PXAPIOE",66,0)
 N I,CNT S (I,CNT)=0 F  S I=$O(^AUPNVPRV("AD",PXVIEN,I)) Q:'I  D
"RTN","PXAPIOE",67,0)
 . IF $D(^AUPNVPRV(I,0)) S @PXPRV@(I)=^(0),CNT=CNT+1
"RTN","PXAPIOE",68,0)
 S @PXPRV=CNT
"RTN","PXAPIOE",69,0)
GETPRVQ Q
"RTN","PXAPIOE",70,0)
 ;
"RTN","PXAPIOE",71,0)
 ;
"RTN","PXAPIOE",72,0)
VALVST(PXVIEN,PXERR) ; -- validate visit ien input
"RTN","PXAPIOE",73,0)
 ;
"RTN","PXAPIOE",74,0)
 ; -- do checks
"RTN","PXAPIOE",75,0)
 IF PXVIEN,$D(^AUPNVSIT(PXVIEN,0)) Q 1
"RTN","PXAPIOE",76,0)
 ;
"RTN","PXAPIOE",77,0)
 ; -- build error msg
"RTN","PXAPIOE",78,0)
 N PXIN,PXOUT
"RTN","PXAPIOE",79,0)
 S PXIN("ID")=PXVIEN
"RTN","PXAPIOE",80,0)
 S PXOUT("ID")=PXVIEN
"RTN","PXAPIOE",81,0)
 D BLD^DIALOG(1509000.001,.PXIN,.PXOUT,$G(PXERR),"F")
"RTN","PXAPIOE",82,0)
 Q 0
"RTN","PXAPIOE",83,0)
 ;
"RTN","PXAPIOE",84,0)
 ;
"RTN","PXAPIOE",85,0)
POST ; -- post error action logic
"RTN","PXAPIOE",86,0)
 ;ZW DO
"RTN","PXAPIOE",87,0)
 ;ZW DIPI
"RTN","PXAPIOE",88,0)
 ;ZW DIPE
"RTN","PXAPIOE",89,0)
 Q
"RTN","PXAPIOE",90,0)
 ;
"RTN","PXAPIOE",91,0)
 ;
"RTN","PXAPIOE",92,0)
PDX(VSTPOV,RANK) ; -- set primary dx for V POV entry
"RTN","PXAPIOE",93,0)
 ;
"RTN","PXAPIOE",94,0)
 N VSTRT,VSTSEQ
"RTN","PXAPIOE",95,0)
 N VSTIEN,X
"RTN","PXAPIOE",96,0)
 ;
"RTN","PXAPIOE",97,0)
 ; -- set up structures
"RTN","PXAPIOE",98,0)
 D INIT(.VSTRT,.VSTSEQ)
"RTN","PXAPIOE",99,0)
 ;
"RTN","PXAPIOE",100,0)
 ; -- set up visit
"RTN","PXAPIOE",101,0)
 S X=$G(^AUPNVPOV(VSTPOV,0))
"RTN","PXAPIOE",102,0)
 S VSTIEN=+$P(X,U,3)
"RTN","PXAPIOE",103,0)
 D VNODES(VSTIEN,VSTRT,VSTSEQ)
"RTN","PXAPIOE",104,0)
 ;
"RTN","PXAPIOE",105,0)
 ; -- set up dx
"RTN","PXAPIOE",106,0)
 D DXNODES(VSTPOV,VSTRT,VSTSEQ)
"RTN","PXAPIOE",107,0)
 S $P(@VSTRT@("POV",1,0,"AFTER"),U,12)=RANK
"RTN","PXAPIOE",108,0)
 ;
"RTN","PXAPIOE",109,0)
 ; -- file change and kill
"RTN","PXAPIOE",110,0)
 D FINAL(VSTRT)
"RTN","PXAPIOE",111,0)
 Q
"RTN","PXAPIOE",112,0)
 ;
"RTN","PXAPIOE",113,0)
 ;
"RTN","PXAPIOE",114,0)
PCLASS(VSTPRV) ; -- set provider class for V PRV entry
"RTN","PXAPIOE",115,0)
 ;
"RTN","PXAPIOE",116,0)
 N VSTRT,VSTSEQ
"RTN","PXAPIOE",117,0)
 N VSTIEN,X
"RTN","PXAPIOE",118,0)
 ;
"RTN","PXAPIOE",119,0)
 ; -- set up structures
"RTN","PXAPIOE",120,0)
 D INIT(.VSTRT,.VSTSEQ)
"RTN","PXAPIOE",121,0)
 ;
"RTN","PXAPIOE",122,0)
 ; -- set up visit
"RTN","PXAPIOE",123,0)
 S X=$G(^AUPNVPRV(VSTPRV,0))
"RTN","PXAPIOE",124,0)
 S VSTIEN=+$P(X,U,3)
"RTN","PXAPIOE",125,0)
 D VNODES(VSTIEN,VSTRT,VSTSEQ)
"RTN","PXAPIOE",126,0)
 ;
"RTN","PXAPIOE",127,0)
 ; -- set up provider ; pxkmain will automatically set class
"RTN","PXAPIOE",128,0)
 D PRVNODES(VSTPRV,VSTRT,VSTSEQ)
"RTN","PXAPIOE",129,0)
 ;
"RTN","PXAPIOE",130,0)
 ; -- file change and kill
"RTN","PXAPIOE",131,0)
 D FINAL(VSTRT)
"RTN","PXAPIOE",132,0)
 Q
"RTN","PXAPIOE",133,0)
 ;
"RTN","PXAPIOE",134,0)
 ;
"RTN","PXAPIOE",135,0)
INIT(VSTRT,VSTSEQ) ; -- set up strutures
"RTN","PXAPIOE",136,0)
 S VSTRT=$NA(^TMP("PXK",$J))
"RTN","PXAPIOE",137,0)
 S VSTSEQ=1
"RTN","PXAPIOE",138,0)
 K @VSTRT
"RTN","PXAPIOE",139,0)
 S @VSTRT@("SOR")=$O(^PX(839.7,"B","PIMS",0))
"RTN","PXAPIOE",140,0)
 Q
"RTN","PXAPIOE",141,0)
 ;
"RTN","PXAPIOE",142,0)
 ;
"RTN","PXAPIOE",143,0)
FINAL(VSTRT) ; -- file data and clean up
"RTN","PXAPIOE",144,0)
 N PXKNOEVT
"RTN","PXAPIOE",145,0)
 S PXKNOEVT=1
"RTN","PXAPIOE",146,0)
 D EN1^PXKMAIN
"RTN","PXAPIOE",147,0)
 K @VSTRT
"RTN","PXAPIOE",148,0)
 Q
"RTN","PXAPIOE",149,0)
 ;
"RTN","PXAPIOE",150,0)
 ;
"RTN","PXAPIOE",151,0)
VNODES(VSTIEN,VSTRT,VSTSEQ) ; -- get visit nodes
"RTN","PXAPIOE",152,0)
 N NODE,X
"RTN","PXAPIOE",153,0)
 S @VSTRT@("VST",VSTSEQ,"IEN")=VSTIEN
"RTN","PXAPIOE",154,0)
 F NODE=0,21,150,800,811,812 D
"RTN","PXAPIOE",155,0)
 . S X=$G(^AUPNVSIT(VSTIEN,NODE))
"RTN","PXAPIOE",156,0)
 . S @VSTRT@("VST",VSTSEQ,NODE,"BEFORE")=X
"RTN","PXAPIOE",157,0)
 . S @VSTRT@("VST",VSTSEQ,NODE,"AFTER")=X
"RTN","PXAPIOE",158,0)
 Q
"RTN","PXAPIOE",159,0)
 ;
"RTN","PXAPIOE",160,0)
 ;
"RTN","PXAPIOE",161,0)
DXNODES(VSTPOV,VSTRT,VSTSEQ) ; -- get dx nodes
"RTN","PXAPIOE",162,0)
 N NODE,X
"RTN","PXAPIOE",163,0)
 S @VSTRT@("POV",VSTSEQ,"IEN")=VSTPOV
"RTN","PXAPIOE",164,0)
 F NODE=0,12,812 D
"RTN","PXAPIOE",165,0)
 . S X=$G(^AUPNVPOV(VSTPOV,NODE))
"RTN","PXAPIOE",166,0)
 . S @VSTRT@("POV",VSTSEQ,NODE,"BEFORE")=X
"RTN","PXAPIOE",167,0)
 . S @VSTRT@("POV",VSTSEQ,NODE,"AFTER")=X
"RTN","PXAPIOE",168,0)
 Q
"RTN","PXAPIOE",169,0)
 ;
"RTN","PXAPIOE",170,0)
 ;
"RTN","PXAPIOE",171,0)
PRVNODES(VSTPRV,VSTRT,VSTSEQ) ; -- get provider nodes
"RTN","PXAPIOE",172,0)
 N NODE,X
"RTN","PXAPIOE",173,0)
 S @VSTRT@("PRV",VSTSEQ,"IEN")=VSTPRV
"RTN","PXAPIOE",174,0)
 F NODE=0,12,812 D
"RTN","PXAPIOE",175,0)
 . S X=$G(^AUPNVPRV(VSTPRV,NODE))
"RTN","PXAPIOE",176,0)
 . S @VSTRT@("PRV",VSTSEQ,NODE,"BEFORE")=X
"RTN","PXAPIOE",177,0)
 . S @VSTRT@("PRV",VSTSEQ,NODE,"AFTER")=X
"RTN","PXAPIOE",178,0)
 Q
"RTN","PXAPIOE",179,0)
 ;
"VER")
8.0^21.0
**END**
**END**
