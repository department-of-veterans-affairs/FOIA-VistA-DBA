Released XU*8*383 SEQ #317
Extracted from mail message
**KIDS**:XU*8.0*383^

**INSTALL NAME**
XU*8.0*383
"BLD",6165,0)
XU*8.0*383^KERNEL^0^3051012^y
"BLD",6165,4,0)
^9.64PA^4.001^3
"BLD",6165,4,4.001,0)
4.001
"BLD",6165,4,4.001,222)
n^n^f^^y^^y^o^n
"BLD",6165,4,4.005,0)
4.005
"BLD",6165,4,4.005,222)
y^y^f^^n^^y^o^n
"BLD",6165,4,4.009,0)
4.009
"BLD",6165,4,4.009,222)
y^y^f^^^^n
"BLD",6165,4,"B",4.001,4.001)

"BLD",6165,4,"B",4.005,4.005)

"BLD",6165,4,"B",4.009,4.009)

"BLD",6165,6)
2^
"BLD",6165,"ABPKG")
n
"BLD",6165,"KRN",0)
^9.67PA^8989.52^19
"BLD",6165,"KRN",.4,0)
.4
"BLD",6165,"KRN",.401,0)
.401
"BLD",6165,"KRN",.402,0)
.402
"BLD",6165,"KRN",.403,0)
.403
"BLD",6165,"KRN",.5,0)
.5
"BLD",6165,"KRN",.84,0)
.84
"BLD",6165,"KRN",3.6,0)
3.6
"BLD",6165,"KRN",3.8,0)
3.8
"BLD",6165,"KRN",9.2,0)
9.2
"BLD",6165,"KRN",9.8,0)
9.8
"BLD",6165,"KRN",9.8,"NM",0)
^9.68A^8^7
"BLD",6165,"KRN",9.8,"NM",1,0)
XUMFX^^0^B20928800
"BLD",6165,"KRN",9.8,"NM",2,0)
XUMFXH^^0^B73209889
"BLD",6165,"KRN",9.8,"NM",4,0)
XUMF5AT^^0^B48045848
"BLD",6165,"KRN",9.8,"NM",5,0)
XUMF5AU^^0^B74020195
"BLD",6165,"KRN",9.8,"NM",6,0)
XUMF5I^^0^B83618831
"BLD",6165,"KRN",9.8,"NM",7,0)
XUMF5BYT^^0^B4678090
"BLD",6165,"KRN",9.8,"NM",8,0)
XUMFR^^0^B8391013
"BLD",6165,"KRN",9.8,"NM","B","XUMF5AT",4)

"BLD",6165,"KRN",9.8,"NM","B","XUMF5AU",5)

"BLD",6165,"KRN",9.8,"NM","B","XUMF5BYT",7)

"BLD",6165,"KRN",9.8,"NM","B","XUMF5I",6)

"BLD",6165,"KRN",9.8,"NM","B","XUMFR",8)

"BLD",6165,"KRN",9.8,"NM","B","XUMFX",1)

"BLD",6165,"KRN",9.8,"NM","B","XUMFXH",2)

"BLD",6165,"KRN",19,0)
19
"BLD",6165,"KRN",19,"NM",0)
^9.68A^^
"BLD",6165,"KRN",19.1,0)
19.1
"BLD",6165,"KRN",101,0)
101
"BLD",6165,"KRN",409.61,0)
409.61
"BLD",6165,"KRN",771,0)
771
"BLD",6165,"KRN",870,0)
870
"BLD",6165,"KRN",8989.51,0)
8989.51
"BLD",6165,"KRN",8989.52,0)
8989.52
"BLD",6165,"KRN",8994,0)
8994
"BLD",6165,"KRN","B",.4,.4)

"BLD",6165,"KRN","B",.401,.401)

"BLD",6165,"KRN","B",.402,.402)

"BLD",6165,"KRN","B",.403,.403)

"BLD",6165,"KRN","B",.5,.5)

"BLD",6165,"KRN","B",.84,.84)

"BLD",6165,"KRN","B",3.6,3.6)

"BLD",6165,"KRN","B",3.8,3.8)

"BLD",6165,"KRN","B",9.2,9.2)

"BLD",6165,"KRN","B",9.8,9.8)

"BLD",6165,"KRN","B",19,19)

"BLD",6165,"KRN","B",19.1,19.1)

"BLD",6165,"KRN","B",101,101)

"BLD",6165,"KRN","B",409.61,409.61)

"BLD",6165,"KRN","B",771,771)

"BLD",6165,"KRN","B",870,870)

"BLD",6165,"KRN","B",8989.51,8989.51)

"BLD",6165,"KRN","B",8989.52,8989.52)

"BLD",6165,"KRN","B",8994,8994)

"BLD",6165,"QUES",0)
^9.62^^
"BLD",6165,"REQB",0)
^9.611^^
"DATA",4.001,4.001,0)
4.001^ZZZ^ZMF^NULL^NULL^1863
"DATA",4.001,4.001,1,0)
^4.011^20^20
"DATA",4.001,4.001,1,1,0)
masterFile^.01^4
"DATA",4.001,4.001,1,2,0)
segmentName^.02^1
"DATA",4.001,4.001,1,3,0)
mfiCode^.03^1
"DATA",4.001,4.001,1,4,0)
preUpdateRoutine^.04^1
"DATA",4.001,4.001,1,5,0)
postUpdateRoutine^.05^1
"DATA",4.001,4.001,1,6,0)
mfeIdField^4.1^4
"DATA",4.001,4.001,1,7,0)
mfeTextField^4.2^4
"DATA",4.001,4.001,1,8,0)
mfeCodSys^4.3^1
"DATA",4.001,4.001,1,9,0)
mfeAltIdField^4.4^4
"DATA",4.001,4.001,1,10,0)
mfeAltTextField^4.5^4
"DATA",4.001,4.001,1,11,0)
mfeAltCodSys^4.6^1
"DATA",4.001,4.001,1,12,0)
mfePkvType^4.7^1
"DATA",4.001,4.001,1,13,0)
mfePkvXref^4.8^1
"DATA",4.001,4.001,1,14,0)
assigningAuthority^4.9^1
"DATA",4.001,4.001,1,15,0)
mfeIdType^4.11^1
"DATA",4.001,4.001,1,16,0)
mfeTextType^4.12^1
"DATA",4.001,4.001,1,17,0)
mfeAltIdType^4.14^1
"DATA",4.001,4.001,1,18,0)
mfeAltTextType^4.15^1
"DATA",4.001,4.001,1,19,0)
mfePreUpdateRoutine^4.16^1
"DATA",4.001,4.001,1,20,0)
mfePostUpdateRoutine^4.17^1
"DATA",4.001,4.001,"MFE")
.01^.02^B^.01^.02^VA^16^B^ISS^^1^1^^1^1^NULL^MFP
"DATA",4.001,4.005,0)
4.005^RDT^MD5 Signature^PRE^MD5^2351
"DATA",4.001,4.005,1,0)
^4.011^1^1
"DATA",4.001,4.005,1,1,0)
debugLevel^6^4^^^^^^1
"DATA",4.001,4.005,"MFE")
.01^.01^ERT^.01^.01^VA^16^B^VA^^2^1^^1^1^NULL^POST
"DATA",4.001,4.009,0)
4.009^RDT^STANDARD TERMINOLOGY VERSION^PRE^^2351
"DATA",4.001,4.009,1,0)
^4.011^2^2
"DATA",4.001,4.009,1,1,0)
versionName^.01^1^^^^^^50
"DATA",4.001,4.009,1,2,0)
version^1^1^^^^^^7
"DATA",4.001,4.009,"MFE")
.01^.01^ERT^.01^.01^VA^16^B^VA^^2^1^^1^1^NULL^POST
"DATA",4.001,120.51,0)
120.51^RDT^GMRV Vital Type^PRE^POST^2114
"DATA",4.001,120.51,1,0)
^4.011^9^8
"DATA",4.001,120.51,1,2,0)
name^.01^1^^^^^^50
"DATA",4.001,120.51,1,3,0)
abbreviation^1^1^^^^^^5
"DATA",4.001,120.51,1,4,0)
rate^3^4^^^^^^1
"DATA",4.001,120.51,1,5,0)
rateInputTransform^4^1^^^^^^99
"DATA",4.001,120.51,1,6,0)
rateHelp^5^1^^^^^^30
"DATA",4.001,120.51,1,7,0)
pceAbbreviation^7^1^^^^^^10
"DATA",4.001,120.51,1,8,0)
effectiveDate^.01^5^120.5199^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.51,1,9,0)
status^.02^4^120.5199^^effectiveDate^^^1
"DATA",4.001,120.51,2)
D MFSUP^HDISVF09(120.51,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.51,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.52,0)
120.52^RDT^GMRV Vital Qualifier^PRE^POST^2114
"DATA",4.001,120.52,1,0)
^4.011^7^6
"DATA",4.001,120.52,1,2,0)
qualifier^.01^1^^^^^^50
"DATA",4.001,120.52,1,3,0)
synonym^.02^1^^^^^^3
"DATA",4.001,120.52,1,4,0)
vitalType^.01^1^120.521^^vitalType^^^50^^0^1^VUID
"DATA",4.001,120.52,1,5,0)
category^.02^1^120.521^^vitalType^^^40^^^^VUID
"DATA",4.001,120.52,1,6,0)
effectiveDate^.01^5^120.5299^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.52,1,7,0)
status^.02^4^120.5299^^effectiveDate^^^1
"DATA",4.001,120.52,2)
D MFSUP^HDISVF09(120.52,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.52,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.53,0)
120.53^RDT^GMRV Vital Category^PRE^POST
"DATA",4.001,120.53,1,0)
^4.011^9^8
"DATA",4.001,120.53,1,2,0)
category^.01^1^^^^^^40
"DATA",4.001,120.53,1,3,0)
vitalType^.01^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,4,0)
maximumEntries^.03^4^120.531^^vitalType^^^2
"DATA",4.001,120.53,1,5,0)
printOrder^.05^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,6,0)
editOrder^.06^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,7,0)
defaultQualifier^.07^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,8,0)
effectiveDate^.01^5^120.5399^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.53,1,9,0)
status^.02^4^120.5399^^effectiveDate^^^1
"DATA",4.001,120.53,2)
D MFSUP^HDISVF09(120.53,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.53,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.82,0)
120.82^RDT^GMR Allergies^PRE^POST
"DATA",4.001,120.82,1,0)
^4.011^9^8
"DATA",4.001,120.82,1,2,0)
name^.01^1^^^^^^30
"DATA",4.001,120.82,1,3,0)
allergyType^1^1^^^^^^20
"DATA",4.001,120.82,1,4,0)
synonym^.01^1^120.823^^synonym^^^30^^^1
"DATA",4.001,120.82,1,5,0)
drugIngredients^.01^1^120.824^^drugIngredients^^^64^^^1^VUID
"DATA",4.001,120.82,1,6,0)
vaDrugClasses^.01^1^120.8205^^vaDrugClasses^^^5^^^1^VUID
"DATA",4.001,120.82,1,7,0)
effectiveDate^.01^5^120.8299^^effectiveDate^^^8
"DATA",4.001,120.82,1,8,0)
status^.02^4^120.8299^^effectiveDate^^^1
"DATA",4.001,120.82,1,9,0)
nationalAllergy^2^1^^^^^^1
"DATA",4.001,120.82,2)
D MFSUP^HDISVF09(120.82,$G(ERROR))
"DATA",4.001,120.82,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.83,0)
120.83^RDT^Sign/Symptoms^PRE^POST
"DATA",4.001,120.83,1,0)
^4.011^8^5
"DATA",4.001,120.83,1,2,0)
name^.01^1^^^^^^30
"DATA",4.001,120.83,1,3,0)
synonym^.01^1^120.832^^synonym^^^30^^^1
"DATA",4.001,120.83,1,6,0)
nationalSignSymptom^1^1^^^^^^1
"DATA",4.001,120.83,1,7,0)
effectiveDate^.01^5^120.8399^^effectiveDate^^^8
"DATA",4.001,120.83,1,8,0)
status^.02^4^120.8399^^effectiveDate^^^1
"DATA",4.001,120.83,2)
D MFSUP^HDISVF09(120.83,$G(ERROR)),TOP10^GMRAUTL2
"DATA",4.001,120.83,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.005,1,0)
ALLERGY CODESYSTEM^0
"DATA",4.005,1,1,0)
^4.0051^120.8399^8
"DATA",4.005,1,1,120.82,0)
120.82
"DATA",4.005,1,1,120.82,1,0)
^4.00511^99.99^3
"DATA",4.005,1,1,120.82,1,.01,0)
.01^20
"DATA",4.005,1,1,120.82,1,1,0)
1^30^I
"DATA",4.005,1,1,120.82,1,99.99,0)
99.99^10
"DATA",4.005,1,1,120.8205,0)
120.8205
"DATA",4.005,1,1,120.8205,1,0)
^4.00511^.01^1
"DATA",4.005,1,1,120.8205,1,.01,0)
.01^70
"DATA",4.005,1,1,120.823,0)
120.823
"DATA",4.005,1,1,120.823,1,0)
^4.00511^.01^1
"DATA",4.005,1,1,120.823,1,.01,0)
.01^50
"DATA",4.005,1,1,120.824,0)
120.824
"DATA",4.005,1,1,120.824,1,0)
^4.00511^.01^1
"DATA",4.005,1,1,120.824,1,.01,0)
.01^60
"DATA",4.005,1,1,120.8299,0)
120.8299
"DATA",4.005,1,1,120.8299,1,0)
^4.00511^.02^1
"DATA",4.005,1,1,120.8299,1,.02,0)
.02^90
"DATA",4.005,1,1,120.83,0)
120.83
"DATA",4.005,1,1,120.83,1,0)
^4.00511^99.99^2
"DATA",4.005,1,1,120.83,1,.01,0)
.01^110
"DATA",4.005,1,1,120.83,1,99.99,0)
99.99^100
"DATA",4.005,1,1,120.832,0)
120.832
"DATA",4.005,1,1,120.832,1,0)
^4.00511^.01^1
"DATA",4.005,1,1,120.832,1,.01,0)
.01^130
"DATA",4.005,1,1,120.8399,0)
120.8399
"DATA",4.005,1,1,120.8399,1,0)
^4.00511^.02^1
"DATA",4.005,1,1,120.8399,1,.02,0)
.02^150
"DATA",4.005,3,0)
VITALS CODESYSTEM^0
"DATA",4.005,3,1,0)
^4.0051^120.5399^7
"DATA",4.005,3,1,120.51,0)
120.51
"DATA",4.005,3,1,120.51,1,0)
^4.00511^99.99^7
"DATA",4.005,3,1,120.51,1,.01,0)
.01^20
"DATA",4.005,3,1,120.51,1,1,0)
1^30
"DATA",4.005,3,1,120.51,1,3,0)
3^40
"DATA",4.005,3,1,120.51,1,4,0)
4^50
"DATA",4.005,3,1,120.51,1,5,0)
5^60
"DATA",4.005,3,1,120.51,1,7,0)
7^70
"DATA",4.005,3,1,120.51,1,99.99,0)
99.99^10
"DATA",4.005,3,1,120.5199,0)
120.5199
"DATA",4.005,3,1,120.5199,1,0)
^4.00511^.02^1
"DATA",4.005,3,1,120.5199,1,.02,0)
.02^80
"DATA",4.005,3,1,120.52,0)
120.52
"DATA",4.005,3,1,120.52,1,0)
^4.00511^99.99^3
"DATA",4.005,3,1,120.52,1,.01,0)
.01^130
"DATA",4.005,3,1,120.52,1,.02,0)
.02^140
"DATA",4.005,3,1,120.52,1,99.99,0)
99.99^120
"DATA",4.005,3,1,120.521,0)
120.521
"DATA",4.005,3,1,120.521,1,0)
^4.00511^.02^2
"DATA",4.005,3,1,120.521,1,.01,0)
.01^150
"DATA",4.005,3,1,120.521,1,.02,0)
.02^160
"DATA",4.005,3,1,120.5299,0)
120.5299
"DATA",4.005,3,1,120.5299,1,0)
^4.00511^.02^1
"DATA",4.005,3,1,120.5299,1,.02,0)
.02^170
"DATA",4.005,3,1,120.53,0)
120.53
"DATA",4.005,3,1,120.53,1,0)
^4.00511^99.99^2
"DATA",4.005,3,1,120.53,1,.01,0)
.01^100
"DATA",4.005,3,1,120.53,1,99.99,0)
99.99^90
"DATA",4.005,3,1,120.5399,0)
120.5399
"DATA",4.005,3,1,120.5399,1,0)
^4.00511^.02^1
"DATA",4.005,3,1,120.5399,1,.02,0)
.02^110
"DATA",4.005,3,2)
^^3050914.153805^c910bfb6d2272c3e86d67116366e9705
"FIA",4.001)
MASTER FILE PARAMETERS
"FIA",4.001,0)
^DIC(4.001,
"FIA",4.001,0,0)
4.001P
"FIA",4.001,0,1)
n^n^f^^y^^y^o^n
"FIA",4.001,0,10)

"FIA",4.001,0,11)

"FIA",4.001,0,"RLRO")

"FIA",4.001,0,"VR")
8.0^XU
"FIA",4.001,4.001)
0
"FIA",4.001,4.011)
0
"FIA",4.005)
MD5 Signature
"FIA",4.005,0)
^DIC(4.005,
"FIA",4.005,0,0)
4.005
"FIA",4.005,0,1)
y^y^f^^n^^y^o^n
"FIA",4.005,0,10)

"FIA",4.005,0,11)

"FIA",4.005,0,"RLRO")

"FIA",4.005,0,"VR")
8.0^XU
"FIA",4.005,4.005)
0
"FIA",4.005,4.0051)
0
"FIA",4.005,4.00511)
0
"FIA",4.009)
STANDARD TERMINOLOGY VERSION FILE
"FIA",4.009,0)
^DIC(4.009,
"FIA",4.009,0,0)
4.009
"FIA",4.009,0,1)
y^y^f^^^^n
"FIA",4.009,0,10)

"FIA",4.009,0,11)

"FIA",4.009,0,"RLRO")

"FIA",4.009,0,"VR")
8.0^XU
"FIA",4.009,4.009)
0
"FIA",4.009,4.00999)
0
"FRV1",4.001,"120.51,""MFE""",7)
CE
"FRV1",4.001,"120.51,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",11)
NM
"FRV1",4.001,"120.51,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",12)
ST
"FRV1",4.001,"120.51,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",14)
ST
"FRV1",4.001,"120.51,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.51,""MFE""",15)
ST
"FRV1",4.001,"120.51,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.51,0",6)
XUMF SERVER
"FRV1",4.001,"120.51,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.51,1,2,0",3)
ST
"FRV1",4.001,"120.51,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,3,0",3)
ST
"FRV1",4.001,"120.51,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,4,0",3)
NM
"FRV1",4.001,"120.51,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,5,0",3)
ST
"FRV1",4.001,"120.51,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,6,0",3)
ST
"FRV1",4.001,"120.51,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,7,0",3)
ST
"FRV1",4.001,"120.51,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,8,0",3)
DT
"FRV1",4.001,"120.51,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.51,1,9,0",3)
NM
"FRV1",4.001,"120.51,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",7)
CE
"FRV1",4.001,"120.52,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",11)
NM
"FRV1",4.001,"120.52,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",12)
ST
"FRV1",4.001,"120.52,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",14)
ST
"FRV1",4.001,"120.52,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.52,""MFE""",15)
ST
"FRV1",4.001,"120.52,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.52,0",6)
XUMF SERVER
"FRV1",4.001,"120.52,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"120.52,1,2,0",3)
ST
"FRV1",4.001,"120.52,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,3,0",3)
ST
"FRV1",4.001,"120.52,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,4,0",3)
ST
"FRV1",4.001,"120.52,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,5,0",3)
ST
"FRV1",4.001,"120.52,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,6,0",3)
DT
"FRV1",4.001,"120.52,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.52,1,7,0",3)
NM
"FRV1",4.001,"120.52,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",7)
CE
"FRV1",4.001,"120.53,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",11)
NM
"FRV1",4.001,"120.53,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",12)
ST
"FRV1",4.001,"120.53,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",14)
ST
"FRV1",4.001,"120.53,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.53,""MFE""",15)
ST
"FRV1",4.001,"120.53,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,2,0",3)
ST
"FRV1",4.001,"120.53,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,3,0",3)
ST
"FRV1",4.001,"120.53,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,4,0",3)
NM
"FRV1",4.001,"120.53,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,5,0",3)
NM
"FRV1",4.001,"120.53,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,6,0",3)
NM
"FRV1",4.001,"120.53,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,7,0",3)
ST
"FRV1",4.001,"120.53,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,8,0",3)
DT
"FRV1",4.001,"120.53,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.53,1,9,0",3)
NM
"FRV1",4.001,"120.53,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",7)
CE
"FRV1",4.001,"120.82,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",11)
NM
"FRV1",4.001,"120.82,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",12)
ST
"FRV1",4.001,"120.82,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",14)
ST
"FRV1",4.001,"120.82,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.82,""MFE""",15)
ST
"FRV1",4.001,"120.82,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,2,0",3)
ST
"FRV1",4.001,"120.82,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,3,0",3)
ST
"FRV1",4.001,"120.82,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,4,0",3)
ST
"FRV1",4.001,"120.82,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,5,0",3)
ST
"FRV1",4.001,"120.82,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,6,0",3)
ST
"FRV1",4.001,"120.82,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,7,0",3)
DT
"FRV1",4.001,"120.82,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,8,0",3)
NM
"FRV1",4.001,"120.82,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.82,1,9,0",3)
ST
"FRV1",4.001,"120.82,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",7)
CE
"FRV1",4.001,"120.83,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",11)
NM
"FRV1",4.001,"120.83,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",12)
ST
"FRV1",4.001,"120.83,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",14)
ST
"FRV1",4.001,"120.83,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"120.83,""MFE""",15)
ST
"FRV1",4.001,"120.83,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,2,0",3)
ST
"FRV1",4.001,"120.83,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,3,0",3)
ST
"FRV1",4.001,"120.83,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,6,0",3)
ST
"FRV1",4.001,"120.83,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,7,0",3)
DT
"FRV1",4.001,"120.83,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"120.83,1,8,0",3)
NM
"FRV1",4.001,"120.83,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,""MFE""",7)
CE
"FRV1",4.001,"4.001,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"4.001,""MFE""",11)
ST
"FRV1",4.001,"4.001,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"4.001,""MFE""",12)
ST
"FRV1",4.001,"4.001,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"4.001,""MFE""",14)
ST
"FRV1",4.001,"4.001,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"4.001,""MFE""",15)
ST
"FRV1",4.001,"4.001,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"4.001,0",6)
MPIF CMOR REQUEST
"FRV1",4.001,"4.001,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"4.001,1,1,0",3)
NM
"FRV1",4.001,"4.001,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,10,0",3)
NM
"FRV1",4.001,"4.001,1,10,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,11,0",3)
ST
"FRV1",4.001,"4.001,1,11,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,12,0",3)
ST
"FRV1",4.001,"4.001,1,12,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,13,0",3)
ST
"FRV1",4.001,"4.001,1,13,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,14,0",3)
ST
"FRV1",4.001,"4.001,1,14,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,15,0",3)
ST
"FRV1",4.001,"4.001,1,15,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,16,0",3)
ST
"FRV1",4.001,"4.001,1,16,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,17,0",3)
ST
"FRV1",4.001,"4.001,1,17,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,18,0",3)
ST
"FRV1",4.001,"4.001,1,18,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,19,0",3)
ST
"FRV1",4.001,"4.001,1,19,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,2,0",3)
ST
"FRV1",4.001,"4.001,1,2,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,20,0",3)
ST
"FRV1",4.001,"4.001,1,20,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,3,0",3)
ST
"FRV1",4.001,"4.001,1,3,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,4,0",3)
ST
"FRV1",4.001,"4.001,1,4,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,5,0",3)
ST
"FRV1",4.001,"4.001,1,5,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,6,0",3)
NM
"FRV1",4.001,"4.001,1,6,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,7,0",3)
NM
"FRV1",4.001,"4.001,1,7,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,8,0",3)
ST
"FRV1",4.001,"4.001,1,8,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.001,1,9,0",3)
NM
"FRV1",4.001,"4.001,1,9,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",7)
CE
"FRV1",4.001,"4.005,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",11)
TX
"FRV1",4.001,"4.005,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",12)
ST
"FRV1",4.001,"4.005,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",14)
ST
"FRV1",4.001,"4.005,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"4.005,""MFE""",15)
ST
"FRV1",4.001,"4.005,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"4.005,0",6)
XUMF ERROR
"FRV1",4.001,"4.005,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"4.005,1,1,0",3)
NM
"FRV1",4.001,"4.005,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",7)
CE
"FRV1",4.001,"4.009,""MFE""",7,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",11)
TX
"FRV1",4.001,"4.009,""MFE""",11,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",12)
ST
"FRV1",4.001,"4.009,""MFE""",12,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",14)
ST
"FRV1",4.001,"4.009,""MFE""",14,"F")
;HL(771.4,
"FRV1",4.001,"4.009,""MFE""",15)
ST
"FRV1",4.001,"4.009,""MFE""",15,"F")
;HL(771.4,
"FRV1",4.001,"4.009,0",6)
XUMF ERROR
"FRV1",4.001,"4.009,0",6,"F")
;XMB(3.8,
"FRV1",4.001,"4.009,1,1,0",3)
ST
"FRV1",4.001,"4.009,1,1,0",3,"F")
;HL(771.4,
"FRV1",4.001,"4.009,1,2,0",3)
ST
"FRV1",4.001,"4.009,1,2,0",3,"F")
;HL(771.4,
"IX",4.005,4.005,"AC",0)
4.005^AC^Sequence for XUMF5I routine^R^^R^IR^W^4.00511^^^^^S
"IX",4.005,4.005,"AC",1)
S ^DIC(4.005,"AC",X(1),$E(X(2),1,5),DA(2),DA(1),DA)=""
"IX",4.005,4.005,"AC",2)
K ^DIC(4.005,"AC",X(1),$E(X(2),1,5),DA(2),DA(1),DA)
"IX",4.005,4.005,"AC",2.5)
K ^DIC(4.005,"AC")
"IX",4.005,4.005,"AC",11.1,0)
^.114IA^2^2
"IX",4.005,4.005,"AC",11.1,1,0)
1^C^^^^1
"IX",4.005,4.005,"AC",11.1,1,1.5)
S X=DA(2)
"IX",4.005,4.005,"AC",11.1,2,0)
2^F^4.00511^1^5^2^F
"IX",4.005,4.005,"AC",11.1,2,3)

"IX",4.009,4.009,"AMASTERVUID",0)
4.009^AMASTERVUID^Identifies Master entry for a VUID^R^^R^IR^I^4.009^^^^^S
"IX",4.009,4.009,"AMASTERVUID",1)
S ^DIC(4.009,"AMASTERVUID",$E(X(1),1,30),X(2),DA)=""
"IX",4.009,4.009,"AMASTERVUID",2)
K ^DIC(4.009,"AMASTERVUID",$E(X(1),1,30),X(2),DA)
"IX",4.009,4.009,"AMASTERVUID",2.5)
K ^DIC(4.009,"AMASTERVUID")
"IX",4.009,4.009,"AMASTERVUID",11.1,0)
^.114IA^2^2
"IX",4.009,4.009,"AMASTERVUID",11.1,1,0)
1^F^4.009^99.98^30^1^F
"IX",4.009,4.009,"AMASTERVUID",11.1,1,3)

"IX",4.009,4.009,"AMASTERVUID",11.1,2,0)
2^F^4.009^99.99^^2^F
"IX",4.009,4.009,"AMASTERVUID",11.1,2,3)

"MBREQ")
0
"PGL",4.001,0,6,.06)
MAIL GROUP^P3.8X^XMB(3.8,^0;6^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",7,4.7)
MFE PKV TYPE^RP771.4'X^HL(771.4,^MFE;7^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",11,4.11)
MFE ID TYPE^RP771.4'X^HL(771.4,^MFE;11^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",12,4.12)
MFE TEXT TYPE^RP771.4'X^HL(771.4,^MFE;12^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",14,4.14)
MFE ALT ID TYPE^RP771.4'X^HL(771.4,^MFE;14^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.001,"""MFE""",15,4.15)
MFE ALT TEXT TYPE^RP771.4'X^HL(771.4,^MFE;15^K:'$$F^XUMF(+$G(XUMF)) X
"PGL",4.011,0,3,.03)
HL7 DATA TYPE^RP771.4'X^HL(771.4,^0;3^;K:'$$F^XUMF(+$G(XUMF)) X
"PKG",142,-1)
1^1
"PKG",142,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",142,22,0)
^9.49I^1^1
"PKG",142,22,1,0)
8.0^2950703^2951015^12
"PKG",142,22,1,"PAH",1,0)
383^3051012^59279
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","XUMF5AT")
0^4^B48045848
"RTN","XUMF5AT",1,0)
XUMF5AT  ;ISS/PAVEL - XUMF5 MD5 Hash Testing API ;06/17/05
"RTN","XUMF5AT",2,0)
 ;;8.0;KERNEL;**383**;July 10, 1995
"RTN","XUMF5AT",3,0)
 ;
"RTN","XUMF5AT",4,0)
 ;;original name was 'VESOUHSH' ; Secure hash functions
"RTN","XUMF5AT",5,0)
 ;;(c) Copyright 1994 - 2004, ESI Technology Corp, Natick MA
"RTN","XUMF5AT",6,0)
 ;; This source code contains the intellectual property of its copyright holder(s),
"RTN","XUMF5AT",7,0)
 ;; and is made available under a license. If you are not familiar with the terms
"RTN","XUMF5AT",8,0)
 ;; of the license, please refer to the license.txt file that is a part of the
"RTN","XUMF5AT",9,0)
 ;; distribution kit.
"RTN","XUMF5AT",10,0)
 ;  THIS IS TESTING VERSION
"RTN","XUMF5AT",11,0)
 Q
"RTN","XUMF5AT",12,0)
 ;;**************************************************
"RTN","XUMF5AT",13,0)
 ;;MD5 'R'egular portion of the code. This will handle
"RTN","XUMF5AT",14,0)
 ;; one string at a time.
"RTN","XUMF5AT",15,0)
 ;;**************************************************
"RTN","XUMF5AT",16,0)
 ;
"RTN","XUMF5AT",17,0)
TESTR ; Run Regular test suite and verify values
"RTN","XUMF5AT",18,0)
 N OK
"RTN","XUMF5AT",19,0)
 S OK=1
"RTN","XUMF5AT",20,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU(""))'="d98c1dd404b2008f980980e97e42f8ec" OK=0
"RTN","XUMF5AT",21,0)
 W !,"MD5 for """" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU(""))
"RTN","XUMF5AT",22,0)
 W !,"MD5 reversed for """" =",$$MAIN^XUMF5BYT($$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU(""))))
"RTN","XUMF5AT",23,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("a"))'="b975c10ca8b6f1c0e299c33161267769" OK=0
"RTN","XUMF5AT",24,0)
 W !,"MD5 for ""a"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("a"))
"RTN","XUMF5AT",25,0)
 W !,"MD5 reversed for ""a"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("a")))
"RTN","XUMF5AT",26,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("abc"))'="98500190b04fd23c7d3f96d6727fe128" OK=0
"RTN","XUMF5AT",27,0)
 W !,"MD5 for ""abc"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("abc"))
"RTN","XUMF5AT",28,0)
 W !,"MD5 reversed for ""abc"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("abc")))
"RTN","XUMF5AT",29,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("message digest"))'="7d696bf98d93b77c312f5a52d061f1aa" OK=0
"RTN","XUMF5AT",30,0)
 W !,"MD5 for ""message digest"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("message digest"))
"RTN","XUMF5AT",31,0)
 W !,"MD5 reversed for ""message digest"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("message digest")))
"RTN","XUMF5AT",32,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("abcdefghijklmnopqrstuvwxyz"))'="d7d3fcc300e492616c49fb7d3be167ca" OK=0
"RTN","XUMF5AT",33,0)
 W !,"MD5 for ""abcdefghijklmnopqrstuvwxyz"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("abcdefghijklmnopqrstuvwxyz"))
"RTN","XUMF5AT",34,0)
 W !,"MD5 reversed for ""abcdefghijklmnopqrstuvwxyz"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("abcdefghijklmnopqrstuvwxyz")))
"RTN","XUMF5AT",35,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"))'="98ab74d1f5d977d22c1c61a59f9d419f" OK=0
"RTN","XUMF5AT",36,0)
 W !,"MD5 for ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"))
"RTN","XUMF5AT",37,0)
 W !,"MD5 reversed for ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")))
"RTN","XUMF5AT",38,0)
 S:$$HEX^XUMF5AU($$MD5R^XUMF5AU("12345678901234567890123456789012345678901234567890123456789012345678901234567890"))'="a2f4ed5755c9e32b2eda49ac7ab60721" OK=0
"RTN","XUMF5AT",39,0)
 W !,"MD5 for ""12345678901234567890123456789012345678901234567890123456789012345678901234567890"" =",$$HEX^XUMF5AU($$MD5R^XUMF5AU("12345678901234567890123456789012345678901234567890123456789012345678901234567890"))
"RTN","XUMF5AT",40,0)
 W !,"MD5 reversed for ""12345678901234567890123456789012345678901234567890123456789012345678901234567890"" =",$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5R^XUMF5AU("12345678901234567890123456789012345678901234567890123456789012345678901234567890")))
"RTN","XUMF5AT",41,0)
 I OK=1 W !,"Tests passed." Q
"RTN","XUMF5AT",42,0)
 W !,"Tests failed."
"RTN","XUMF5AT",43,0)
 Q
"RTN","XUMF5AT",44,0)
TESTE ; Run Enhanced test suite and verify values
"RTN","XUMF5AT",45,0)
 N OK,MYABCD
"RTN","XUMF5AT",46,0)
 S OK=1
"RTN","XUMF5AT",47,0)
 S MYA=$C(1,35,69,103)
"RTN","XUMF5AT",48,0)
 S MYB=$C(137,171,205,239)
"RTN","XUMF5AT",49,0)
 S MYC=$C(254,220,186,152)
"RTN","XUMF5AT",50,0)
 S MYD=$C(118,84,50,16)
"RTN","XUMF5AT",51,0)
 S MYABCD=MYA_MYB_MYC_MYD
"RTN","XUMF5AT",52,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,""))'="d98c1dd404b2008f980980e97e42f8ec" OK=0
"RTN","XUMF5AT",53,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"a"))'="b975c10ca8b6f1c0e299c33161267769" OK=0
"RTN","XUMF5AT",54,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"abc"))'="98500190b04fd23c7d3f96d6727fe128" OK=0
"RTN","XUMF5AT",55,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"message digest"))'="7d696bf98d93b77c312f5a52d061f1aa" OK=0
"RTN","XUMF5AT",56,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"abcdefghijklmnopqrstuvwxyz"))'="d7d3fcc300e492616c49fb7d3be167ca" OK=0
"RTN","XUMF5AT",57,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"))'="98ab74d1f5d977d22c1c61a59f9d419f" OK=0
"RTN","XUMF5AT",58,0)
 S:$$HEX^XUMF5AU($$MD5E^XUMF5AU(MYABCD,"12345678901234567890123456789012345678901234567890123456789012345678901234567890"))'="a2f4ed5755c9e32b2eda49ac7ab60721" OK=0
"RTN","XUMF5AT",59,0)
 I OK=1 W !,"Tests passed." Q
"RTN","XUMF5AT",60,0)
 W !,"Tests failed."
"RTN","XUMF5AT",61,0)
 Q
"RTN","XUMF5AT",62,0)
 ;Pavel's testing stuff
"RTN","XUMF5AT",63,0)
 ;FIND DEPENDENCY for loaded packages... 
"RTN","XUMF5AT",64,0)
 ;Scann whole environment for discrepances...
"RTN","XUMF5AT",65,0)
FDEP N DIC,Y,X,IEN,TMP,ERR,X0,START,RR
"RTN","XUMF5AT",66,0)
 S X0=0,START=1
"RTN","XUMF5AT",67,0)
 K ^TMP("LIST",$J)
"RTN","XUMF5AT",68,0)
 F  K ^TMP("DEP",$J),^TMP("DEPX",$J) S X0=$O(^XPD(9.6,"B",X0)) Q:'$L(X0)  S IEN=$O(^XPD(9.6,"B",X0,0)) Q:'IEN  D
"RTN","XUMF5AT",69,0)
 .I START W !!,?5,"****** Builds, for which not all required packages have been installed ******",! S START=0
"RTN","XUMF5AT",70,0)
 .I $$GETDEP(IEN,1) W !,"IEN: ",IEN,?10,X0 S ^TMP("LIST",$J,X0)=IEN
"RTN","XUMF5AT",71,0)
 K ^TMP("DEP",$J),^TMP("DEPX",$J)
"RTN","XUMF5AT",72,0)
 R !!,"Do you want detail list tree for each one ?? N// ",RR:60
"RTN","XUMF5AT",73,0)
 Q:'$L(RR)!(RR["^")  Q:$E($TR(RR,"y","Y"))'="Y"
"RTN","XUMF5AT",74,0)
 S X0=""
"RTN","XUMF5AT",75,0)
 F  S X0=$O(^TMP("LIST",$J,X0)) Q:'$L(X0)  S IEN=^(X0) D
"RTN","XUMF5AT",76,0)
 .K ^TMP("DEP",$J),^TMP("DEPX",$J)
"RTN","XUMF5AT",77,0)
 .S LEV=1 I '$$GETDEP(IEN,LEV) W !,"No dependency for: ",$P(Y,U,2) Q
"RTN","XUMF5AT",78,0)
 .S OK=0 F  Q:$$LOOP(LEV)  S LEV=LEV+1
"RTN","XUMF5AT",79,0)
 .S $P(II,"-",79)="-"
"RTN","XUMF5AT",80,0)
 .W !!!,"******  Required builds of ",X0," NOT installed on system ******",!,II
"RTN","XUMF5AT",81,0)
 .S LEV=0 F  S LEV=$O(^TMP("DEP",$J,LEV)) Q:'LEV  S II=0 F  S II=$O(^TMP("DEP",$J,LEV,II)) Q:'II  W !,"LEV: ",LEV,?8,II,?20,$P(^(II),U),?45,$P(^(II),U,2)
"RTN","XUMF5AT",82,0)
 W !!!,"DONE",!
"RTN","XUMF5AT",83,0)
 Q
"RTN","XUMF5AT",84,0)
BUILD ;ENTRY FOR CHECKING OF DEPENDENCY TREE
"RTN","XUMF5AT",85,0)
 N DIC,Y,X,IEN,TMP,ERR
"RTN","XUMF5AT",86,0)
1 K ^TMP("DEP",$J),^TMP("DEPX",$J)
"RTN","XUMF5AT",87,0)
 S DIC=9.6,DIC(0)="AZEQZ" D ^DIC Q:Y=-1  S IEN=+Y_","
"RTN","XUMF5AT",88,0)
 S LEV=1
"RTN","XUMF5AT",89,0)
 I '$$GETDEP(IEN,LEV) W !,"No dependency for: ",$P(Y,U,2) G 1
"RTN","XUMF5AT",90,0)
 ;Recursive loop for dependencies
"RTN","XUMF5AT",91,0)
 ;Loop and delete entry which is loaded.
"RTN","XUMF5AT",92,0)
 S OK=0
"RTN","XUMF5AT",93,0)
 F  Q:$$LOOP(LEV)  S LEV=LEV+1
"RTN","XUMF5AT",94,0)
 S $P(II,"-",75)="-"
"RTN","XUMF5AT",95,0)
 W !!,?4,"******  Required builds of ",$P(Y,U,2)," NOT installed on system ******",!,II
"RTN","XUMF5AT",96,0)
 S LEV=0 F  S LEV=$O(^TMP("DEP",$J,LEV)) Q:'LEV  S II=0 F  S II=$O(^TMP("DEP",$J,LEV,II)) Q:'II  W !,"LEV: ",LEV,?8,II,?20,$P(^(II),U),?45,$P(^(II),U,2)
"RTN","XUMF5AT",97,0)
Q W ! G 1
"RTN","XUMF5AT",98,0)
 ;
"RTN","XUMF5AT",99,0)
 Q
"RTN","XUMF5AT",100,0)
LOOP(LEV)       ;LOOP and Kill if not dependencess
"RTN","XUMF5AT",101,0)
 N II,OK,X1,Y,DIC,X,IEN,TMP
"RTN","XUMF5AT",102,0)
 S II=0
"RTN","XUMF5AT",103,0)
 F  S II=$O(^TMP("DEP",LEV,II)) Q:'$L(II)  D
"RTN","XUMF5AT",104,0)
 .I '$$REQB(II,$P(^TMP("DEP",LEV,II),U)) K ^TMP("DEP",$J,LEV,II) Q
"RTN","XUMF5AT",105,0)
 ;Now we have deleted all entries/packages already installed.. and set level + 1 depencencees...
"RTN","XUMF5AT",106,0)
 S II=0,OK=1
"RTN","XUMF5AT",107,0)
 F  S II=$O(^TMP("DEP",$J,LEV,II)) Q:'$L(II)  D
"RTN","XUMF5AT",108,0)
 .Q:'$$GETDEP(II_",",LEV+1)
"RTN","XUMF5AT",109,0)
 .S OK=0
"RTN","XUMF5AT",110,0)
 Q OK
"RTN","XUMF5AT",111,0)
GETDEP(IEN,LEV) ;
"RTN","XUMF5AT",112,0)
 N TMP1,X1,DIC,Y,X
"RTN","XUMF5AT",113,0)
 D GETS^DIQ(9.6,IEN,"11*",,"TMP1","ERR")
"RTN","XUMF5AT",114,0)
 I $D(ERR) D  Q
"RTN","XUMF5AT",115,0)
 .W !,"Error in subfile # 9.611",!
"RTN","XUMF5AT",116,0)
 S X1=0 F  S X1=$O(TMP1(9.611,X1)) Q:'$L(X1)  D
"RTN","XUMF5AT",117,0)
 .S X=TMP1(9.611,X1,.01),DIC=9.6,DIC(0)="XZ" D ^DIC Q:Y=-1
"RTN","XUMF5AT",118,0)
 .Q:'$$REQB(+Y,$G(TMP1(9.611,X1,.01)))
"RTN","XUMF5AT",119,0)
 .S:'$D(^TMP("DEPX",$J,+Y)) ^TMP("DEP",$J,LEV,+Y)=TMP1(9.611,X1,.01)_U_TMP1(9.611,X1,1)
"RTN","XUMF5AT",120,0)
 .S ^TMP("DEPX",$J,+Y,LEV)=""
"RTN","XUMF5AT",121,0)
 Q $S($D(^TMP("DEP",$J,LEV)):1,1:0)
"RTN","XUMF5AT",122,0)
REQB(IEN,XPDX)  ;check for Required Builds
"RTN","XUMF5AT",123,0)
 ;returns 0=ok, 1=failed kill global, 2=failed leave global
"RTN","XUMF5AT",124,0)
 Q:'$L($G(XPDX)) 0
"RTN","XUMF5AT",125,0)
 N XPDACT,XPDBLD,XPDI,XPDQ,XPDQUIT,XPDX0,X,Y,Z
"RTN","XUMF5AT",126,0)
 S XPDQUIT=0,XPDI=0
"RTN","XUMF5AT",127,0)
 S XPDQ=0,X=$$PKG^XPDUTL(XPDX),Y=$$VER^XPDUTL(XPDX),Z=$$VERSION^XPDUTL(X) D
"RTN","XUMF5AT",128,0)
 .Q:Z>Y
"RTN","XUMF5AT",129,0)
 .I XPDX'["*" S:Z<Y XPDQ=2
"RTN","XUMF5AT",130,0)
 .E  S:'$$PATCH^XPDUTL(XPDX) XPDQ=1
"RTN","XUMF5AT",131,0)
 .;quit if patch is already on system
"RTN","XUMF5AT",132,0)
 .Q:'XPDQ
"RTN","XUMF5AT",133,0)
 .;quit if patch is sequenced prior within this build
"RTN","XUMF5AT",134,0)
 .I $D(XPDT("NM",XPDX)),(XPDT("NM",XPDX)<XPDT("NM",XPDNM)) S XPDQ=0 Q
"RTN","XUMF5AT",135,0)
 .S XPDQUIT=1
"RTN","XUMF5AT",136,0)
 Q XPDQUIT
"RTN","XUMF5AU")
0^5^B74020195
"RTN","XUMF5AU",1,0)
XUMF5AU  ;ISS/PAVEL - XUMF5 MD5 Hash API ;06/17/05
"RTN","XUMF5AU",2,0)
 ;;8.0;KERNEL;**383**;July 10, 1995
"RTN","XUMF5AU",3,0)
 ;
"RTN","XUMF5AU",4,0)
 ;MD5 based on info from 4.005 SORT BY VUID;;original name was 'VESOUHSH' ; Secure hash functions
"RTN","XUMF5AU",5,0)
 ;;(c) Copyright 1994 - 2004, ESI Technology Corp, Natick MA
"RTN","XUMF5AU",6,0)
 ;; This source code contains the intellectual property of its copyright holder(s),
"RTN","XUMF5AU",7,0)
 ;; and is made available under a license. If you are not familiar with the terms
"RTN","XUMF5AU",8,0)
 ;; of the license, please refer to the license.txt file that is a part of the
"RTN","XUMF5AU",9,0)
 ;; distribution kit.
"RTN","XUMF5AU",10,0)
 ;; This is a routine version where Variables and Commands set to be Upercase.  Pavel
"RTN","XUMF5AU",11,0)
 ;
"RTN","XUMF5AU",12,0)
 Q
"RTN","XUMF5AU",13,0)
 ;;**************************************************
"RTN","XUMF5AU",14,0)
 ;;MD5 'R'egular portion of the code. This will handle
"RTN","XUMF5AU",15,0)
 ;; one string at a time.
"RTN","XUMF5AU",16,0)
 ;;**************************************************
"RTN","XUMF5AU",17,0)
MD5R(STR) ; Construct a 128-bit MD5 hash of the input.
"RTN","XUMF5AU",18,0)
 N TWOTO
"RTN","XUMF5AU",19,0)
 N A,B,C,D
"RTN","XUMF5AU",20,0)
 N AA,BB,CC,DD
"RTN","XUMF5AU",21,0)
 D INITR
"RTN","XUMF5AU",22,0)
PAD1R  ; Pad str out to 56 bytes mod 64
"RTN","XUMF5AU",23,0)
 ; Padding is a 1 bit followed by all zero bits
"RTN","XUMF5AU",24,0)
 N LEN,MOD,NPAD,PAD
"RTN","XUMF5AU",25,0)
 S LEN=$L(STR),MOD=LEN#64
"RTN","XUMF5AU",26,0)
 S NPAD=$S(MOD<56:56-MOD,1:120-MOD)
"RTN","XUMF5AU",27,0)
 S PAD=$C(128)
"RTN","XUMF5AU",28,0)
 S:NPAD>1 $P(PAD,$C(0),NPAD)=""
"RTN","XUMF5AU",29,0)
 S STR=STR_PAD
"RTN","XUMF5AU",30,0)
PAD2R  ; Append length in bits as 64-bit integer, little endian
"RTN","XUMF5AU",31,0)
 S LEN=LEN*8
"RTN","XUMF5AU",32,0)
 S STR=STR_$$UI64BIT(LEN)
"RTN","XUMF5AU",33,0)
PROCESSR ; Main processing and transformation loop
"RTN","XUMF5AU",34,0)
 N J,POS,N,I
"RTN","XUMF5AU",35,0)
 N X ; X(J) is a 4-byte word from a 64-byte block
"RTN","XUMF5AU",36,0)
 S N=$L(STR)/64 ; Number of 64-byte blocks
"RTN","XUMF5AU",37,0)
 F I=0:1:N-1 D
"RTN","XUMF5AU",38,0)
 . F J=0:1:15 S POS=(64*I)+(4*J),X(J)=$E(STR,POS+1,POS+4)
"RTN","XUMF5AU",39,0)
 . D SAVE
"RTN","XUMF5AU",40,0)
 . D ROUND1
"RTN","XUMF5AU",41,0)
 . D ROUND2
"RTN","XUMF5AU",42,0)
 . D ROUND3
"RTN","XUMF5AU",43,0)
 . D ROUND4
"RTN","XUMF5AU",44,0)
 . D INCR
"RTN","XUMF5AU",45,0)
 K X
"RTN","XUMF5AU",46,0)
 Q A_B_C_D
"RTN","XUMF5AU",47,0)
 ;
"RTN","XUMF5AU",48,0)
INITR  ; Initialization
"RTN","XUMF5AU",49,0)
 ; Set up array of powers of two for rotation
"RTN","XUMF5AU",50,0)
 N I,N
"RTN","XUMF5AU",51,0)
 S N=1
"RTN","XUMF5AU",52,0)
 F I=0:1:31 S TWOTO(I)=N,N=N+N
"RTN","XUMF5AU",53,0)
 ; Initialize 4-byte buffers A,B,C,D
"RTN","XUMF5AU",54,0)
 S A=$C(1,35,69,103)
"RTN","XUMF5AU",55,0)
 S B=$C(137,171,205,239)
"RTN","XUMF5AU",56,0)
 S C=$C(254,220,186,152)
"RTN","XUMF5AU",57,0)
 S D=$C(118,84,50,16)
"RTN","XUMF5AU",58,0)
 Q
"RTN","XUMF5AU",59,0)
 ;
"RTN","XUMF5AU",60,0)
 ;;**************************************************
"RTN","XUMF5AU",61,0)
 ;;MD5 'E'nhanced portion of the code. This will handle
"RTN","XUMF5AU",62,0)
 ;; multiple strings and produce a value for them all
"RTN","XUMF5AU",63,0)
 ;; as if they were submitted as one long string.
"RTN","XUMF5AU",64,0)
 ;;**************************************************
"RTN","XUMF5AU",65,0)
MD5E(ABCD,STR,PP,LL) ; Construct a 128-bit MD5 hash of the input.
"RTN","XUMF5AU",66,0)
 N TWOTO
"RTN","XUMF5AU",67,0)
 N A,B,C,D
"RTN","XUMF5AU",68,0)
 N AA,BB,CC,DD
"RTN","XUMF5AU",69,0)
 D INITE(ABCD)
"RTN","XUMF5AU",70,0)
PAD1E  ; Pad str out to 56 bytes mod 64
"RTN","XUMF5AU",71,0)
 ; Padding is a 1 bit followed by all zero bits
"RTN","XUMF5AU",72,0)
 ; PP = 1  Don't pad with $C(128)  !!!  Pavel    Set to 1 if this is not last string !!
"RTN","XUMF5AU",73,0)
 ;                                               Set to 0 if this is last string !!
"RTN","XUMF5AU",74,0)
 ; LL = Lenght passed form outside for pading of little endian  Pavel !!! - 
"RTN","XUMF5AU",75,0)
 ;                                               Seting lenght if this is last value othervise computed lenght used...
"RTN","XUMF5AU",76,0)
 N LEN,MOD,NPAD,PAD
"RTN","XUMF5AU",77,0)
 S LEN=$L(STR),MOD=LEN#64
"RTN","XUMF5AU",78,0)
 S:$G(LL) LEN=LL ;Pavel
"RTN","XUMF5AU",79,0)
 S NPAD=$S(MOD<56:56-MOD,1:120-MOD)
"RTN","XUMF5AU",80,0)
 S PAD=$C(128)
"RTN","XUMF5AU",81,0)
 S:NPAD>1 $P(PAD,$C(0),NPAD)=""
"RTN","XUMF5AU",82,0)
 S:'$G(PP) STR=STR_PAD ;Pavel
"RTN","XUMF5AU",83,0)
 ;S STR=STR_PAD
"RTN","XUMF5AU",84,0)
PAD2E  ; Append length in bits as 64-bit integer, little endian
"RTN","XUMF5AU",85,0)
 S LEN=LEN*8
"RTN","XUMF5AU",86,0)
 S STR=STR_$$UI64BIT(LEN)
"RTN","XUMF5AU",87,0)
PROCESSE ; Main processing and transformation loop
"RTN","XUMF5AU",88,0)
 N J,POS,N,I
"RTN","XUMF5AU",89,0)
 N X ; X(J) is a 4-byte word from a 64-byte block
"RTN","XUMF5AU",90,0)
 ;S N=$L(STR)/64 ; Number of 64-byte blocks
"RTN","XUMF5AU",91,0)
 S N=$L(STR)\64 ; Number of 64-byte blocks
"RTN","XUMF5AU",92,0)
 F I=0:1:N-1 D
"RTN","XUMF5AU",93,0)
 . F J=0:1:15 S POS=(64*I)+(4*J),X(J)=$E(STR,POS+1,POS+4)
"RTN","XUMF5AU",94,0)
 . D SAVE
"RTN","XUMF5AU",95,0)
 . D ROUND1
"RTN","XUMF5AU",96,0)
 . D ROUND2
"RTN","XUMF5AU",97,0)
 . D ROUND3
"RTN","XUMF5AU",98,0)
 . D ROUND4
"RTN","XUMF5AU",99,0)
 . D INCR
"RTN","XUMF5AU",100,0)
 . ;W !,I," ABCD=",$$MAIN^XUMF5BYT($$HEX(A_B_C_D)),!
"RTN","XUMF5AU",101,0)
 K X
"RTN","XUMF5AU",102,0)
 Q A_B_C_D
"RTN","XUMF5AU",103,0)
 ;
"RTN","XUMF5AU",104,0)
INITE(LASTABCD)    ; Initialization
"RTN","XUMF5AU",105,0)
 ; Set up array of powers of two for rotation
"RTN","XUMF5AU",106,0)
 N I,N,L
"RTN","XUMF5AU",107,0)
 S N=1
"RTN","XUMF5AU",108,0)
 F I=0:1:31 S TWOTO(I)=N,N=N+N
"RTN","XUMF5AU",109,0)
 ; Initialize 4-byte buffers A,B,C,D
"RTN","XUMF5AU",110,0)
 S A=$E(LASTABCD,1,4)
"RTN","XUMF5AU",111,0)
 S B=$E(LASTABCD,5,8)
"RTN","XUMF5AU",112,0)
 S C=$E(LASTABCD,9,12)
"RTN","XUMF5AU",113,0)
 S D=$E(LASTABCD,13,16)
"RTN","XUMF5AU",114,0)
 Q
"RTN","XUMF5AU",115,0)
 ;
"RTN","XUMF5AU",116,0)
 ;;**************************************************
"RTN","XUMF5AU",117,0)
 ;;This is where common code starts, used by both
"RTN","XUMF5AU",118,0)
 ;; Regular and Enhanced portions of this routine.
"RTN","XUMF5AU",119,0)
 ;;**************************************************
"RTN","XUMF5AU",120,0)
SAVE ; Save buffers
"RTN","XUMF5AU",121,0)
 S AA=A,BB=B,CC=C,DD=D
"RTN","XUMF5AU",122,0)
 Q
"RTN","XUMF5AU",123,0)
 ;
"RTN","XUMF5AU",124,0)
ROUND1 ; First round of transformation
"RTN","XUMF5AU",125,0)
 D SUB(.A,B,C,D,X(0),7,3614090360,1)
"RTN","XUMF5AU",126,0)
 D SUB(.D,A,B,C,X(1),12,3905402710,1)
"RTN","XUMF5AU",127,0)
 D SUB(.C,D,A,B,X(2),17,606105819,1)
"RTN","XUMF5AU",128,0)
 D SUB(.B,C,D,A,X(3),22,3250441966,1)
"RTN","XUMF5AU",129,0)
 D SUB(.A,B,C,D,X(4),7,4118548399,1)
"RTN","XUMF5AU",130,0)
 D SUB(.D,A,B,C,X(5),12,1200080426,1)
"RTN","XUMF5AU",131,0)
 D SUB(.C,D,A,B,X(6),17,2821735955,1)
"RTN","XUMF5AU",132,0)
 D SUB(.B,C,D,A,X(7),22,4249261313,1)
"RTN","XUMF5AU",133,0)
 D SUB(.A,B,C,D,X(8),7,1770035416,1)
"RTN","XUMF5AU",134,0)
 D SUB(.D,A,B,C,X(9),12,2336552879,1)
"RTN","XUMF5AU",135,0)
 D SUB(.C,D,A,B,X(10),17,4294925233,1)
"RTN","XUMF5AU",136,0)
 D SUB(.B,C,D,A,X(11),22,2304563134,1)
"RTN","XUMF5AU",137,0)
 D SUB(.A,B,C,D,X(12),7,1804603682,1)
"RTN","XUMF5AU",138,0)
 D SUB(.D,A,B,C,X(13),12,4254626195,1)
"RTN","XUMF5AU",139,0)
 D SUB(.C,D,A,B,X(14),17,2792965006,1)
"RTN","XUMF5AU",140,0)
 D SUB(.B,C,D,A,X(15),22,1236535329,1)
"RTN","XUMF5AU",141,0)
 Q
"RTN","XUMF5AU",142,0)
 ;
"RTN","XUMF5AU",143,0)
ROUND2 ; Second round of transformation
"RTN","XUMF5AU",144,0)
 D SUB(.A,B,C,D,X(1),5,4129170786,2)
"RTN","XUMF5AU",145,0)
 D SUB(.D,A,B,C,X(6),9,3225465664,2)
"RTN","XUMF5AU",146,0)
 D SUB(.C,D,A,B,X(11),14,643717713,2)
"RTN","XUMF5AU",147,0)
 D SUB(.B,C,D,A,X(0),20,3921069994,2)
"RTN","XUMF5AU",148,0)
 D SUB(.A,B,C,D,X(5),5,3593408605,2)
"RTN","XUMF5AU",149,0)
 D SUB(.D,A,B,C,X(10),9,38016083,2)
"RTN","XUMF5AU",150,0)
 D SUB(.C,D,A,B,X(15),14,3634488961,2)
"RTN","XUMF5AU",151,0)
 D SUB(.B,C,D,A,X(4),20,3889429448,2)
"RTN","XUMF5AU",152,0)
 D SUB(.A,B,C,D,X(9),5,568446438,2)
"RTN","XUMF5AU",153,0)
 D SUB(.D,A,B,C,X(14),9,3275163606,2)
"RTN","XUMF5AU",154,0)
 D SUB(.C,D,A,B,X(3),14,4107603335,2)
"RTN","XUMF5AU",155,0)
 D SUB(.B,C,D,A,X(8),20,1163531501,2)
"RTN","XUMF5AU",156,0)
 D SUB(.A,B,C,D,X(13),5,2850285829,2)
"RTN","XUMF5AU",157,0)
 D SUB(.D,A,B,C,X(2),9,4243563512,2)
"RTN","XUMF5AU",158,0)
 D SUB(.C,D,A,B,X(7),14,1735328473,2)
"RTN","XUMF5AU",159,0)
 D SUB(.B,C,D,A,X(12),20,2368359562,2)
"RTN","XUMF5AU",160,0)
 Q
"RTN","XUMF5AU",161,0)
 ;
"RTN","XUMF5AU",162,0)
ROUND3 ; Third round of transformation
"RTN","XUMF5AU",163,0)
 D SUB(.A,B,C,D,X(5),4,4294588738,3)
"RTN","XUMF5AU",164,0)
 D SUB(.D,A,B,C,X(8),11,2272392833,3)
"RTN","XUMF5AU",165,0)
 D SUB(.C,D,A,B,X(11),16,1839030562,3)
"RTN","XUMF5AU",166,0)
 D SUB(.B,C,D,A,X(14),23,4259657740,3)
"RTN","XUMF5AU",167,0)
 D SUB(.A,B,C,D,X(1),4,2763975236,3)
"RTN","XUMF5AU",168,0)
 D SUB(.D,A,B,C,X(4),11,1272893353,3)
"RTN","XUMF5AU",169,0)
 D SUB(.C,D,A,B,X(7),16,4139469664,3)
"RTN","XUMF5AU",170,0)
 D SUB(.B,C,D,A,X(10),23,3200236656,3)
"RTN","XUMF5AU",171,0)
 D SUB(.A,B,C,D,X(13),4,681279174,3)
"RTN","XUMF5AU",172,0)
 D SUB(.D,A,B,C,X(0),11,3936430074,3)
"RTN","XUMF5AU",173,0)
 D SUB(.C,D,A,B,X(3),16,3572445317,3)
"RTN","XUMF5AU",174,0)
 D SUB(.B,C,D,A,X(6),23,76029189,3)
"RTN","XUMF5AU",175,0)
 D SUB(.A,B,C,D,X(9),4,3654602809,3)
"RTN","XUMF5AU",176,0)
 D SUB(.D,A,B,C,X(12),11,3873151461,3)
"RTN","XUMF5AU",177,0)
 D SUB(.C,D,A,B,X(15),16,530742520,3)
"RTN","XUMF5AU",178,0)
 D SUB(.B,C,D,A,X(2),23,3299628645,3)
"RTN","XUMF5AU",179,0)
 Q
"RTN","XUMF5AU",180,0)
 ;
"RTN","XUMF5AU",181,0)
ROUND4 ; Fourth round of transformation
"RTN","XUMF5AU",182,0)
 D SUB(.A,B,C,D,X(0),6,4096336452,4)
"RTN","XUMF5AU",183,0)
 D SUB(.D,A,B,C,X(7),10,1126891415,4)
"RTN","XUMF5AU",184,0)
 D SUB(.C,D,A,B,X(14),15,2878612391,4)
"RTN","XUMF5AU",185,0)
 D SUB(.B,C,D,A,X(5),21,4237533241,4)
"RTN","XUMF5AU",186,0)
 D SUB(.A,B,C,D,X(12),6,1700485571,4)
"RTN","XUMF5AU",187,0)
 D SUB(.D,A,B,C,X(3),10,2399980690,4)
"RTN","XUMF5AU",188,0)
 D SUB(.C,D,A,B,X(10),15,4293915773,4)
"RTN","XUMF5AU",189,0)
 D SUB(.B,C,D,A,X(1),21,2240044497,4)
"RTN","XUMF5AU",190,0)
 D SUB(.A,B,C,D,X(8),6,1873313359,4)
"RTN","XUMF5AU",191,0)
 D SUB(.D,A,B,C,X(15),10,4264355552,4)
"RTN","XUMF5AU",192,0)
 D SUB(.C,D,A,B,X(6),15,2734768916,4)
"RTN","XUMF5AU",193,0)
 D SUB(.B,C,D,A,X(13),21,1309151649,4)
"RTN","XUMF5AU",194,0)
 D SUB(.A,B,C,D,X(4),6,4149444226,4)
"RTN","XUMF5AU",195,0)
 D SUB(.D,A,B,C,X(11),10,3174756917,4)
"RTN","XUMF5AU",196,0)
 D SUB(.C,D,A,B,X(2),15,718787259,4)
"RTN","XUMF5AU",197,0)
 D SUB(.B,C,D,A,X(9),21,3951481745,4)
"RTN","XUMF5AU",198,0)
 Q
"RTN","XUMF5AU",199,0)
INCR ;
"RTN","XUMF5AU",200,0)
 S A=$$ADD(A,AA)
"RTN","XUMF5AU",201,0)
 S B=$$ADD(B,BB)
"RTN","XUMF5AU",202,0)
 S C=$$ADD(C,CC)
"RTN","XUMF5AU",203,0)
 S D=$$ADD(D,DD)
"RTN","XUMF5AU",204,0)
 Q
"RTN","XUMF5AU",205,0)
 ;
"RTN","XUMF5AU",206,0)
 ; Auxiliary functions
"RTN","XUMF5AU",207,0)
 ;
"RTN","XUMF5AU",208,0)
SUB(A,B,C,D,X,S,AC,FN) ; FN is 1 (F), 2 (G), 3 (H) or 4 (I)
"RTN","XUMF5AU",209,0)
 N INT,COMB,CMD,DO
"RTN","XUMF5AU",210,0)
 S INT=$$UINT32(A)
"RTN","XUMF5AU",211,0)
 S DO="COMB"_FN
"RTN","XUMF5AU",212,0)
 D @DO
"RTN","XUMF5AU",213,0)
 S INT=$$ADDIW(INT,COMB)
"RTN","XUMF5AU",214,0)
 S INT=$$ADDIW(INT,X)
"RTN","XUMF5AU",215,0)
 S INT=$$ADDII(INT,AC)
"RTN","XUMF5AU",216,0)
 S INT=$$ROTLI(INT,S)
"RTN","XUMF5AU",217,0)
 S INT=$$ADDIW(INT,B)
"RTN","XUMF5AU",218,0)
 S A=$$UI32BIT(INT)
"RTN","XUMF5AU",219,0)
 Q
"RTN","XUMF5AU",220,0)
COMB ; Choose F, G, H or I
"RTN","XUMF5AU",221,0)
COMB1 S COMB=$$OR($$AND(B,C),$$AND($$NOT(B),D)) Q  ; F
"RTN","XUMF5AU",222,0)
COMB2 S COMB=$$OR($$AND(B,D),$$AND(C,$$NOT(D))) Q  ; G
"RTN","XUMF5AU",223,0)
COMB3 S COMB=$$XOR($$XOR(B,C),D) Q  ; H
"RTN","XUMF5AU",224,0)
COMB4 S COMB=$$XOR(C,$$OR(B,$$NOT(D))) Q  ; I
"RTN","XUMF5AU",225,0)
 Q
"RTN","XUMF5AU",226,0)
 ;
"RTN","XUMF5AU",227,0)
 ; Boolean functions assume args are 4-character strings
"RTN","XUMF5AU",228,0)
 ;
"RTN","XUMF5AU",229,0)
AND(X,Y) ;
"RTN","XUMF5AU",230,0)
 Q $ZBOOLEAN(X,Y,1)  ;;EOCONDCD;CACHE
"RTN","XUMF5AU",231,0)
 Q X  ; Placeholder for other M implementations
"RTN","XUMF5AU",232,0)
 ;
"RTN","XUMF5AU",233,0)
OR(X,Y) ;
"RTN","XUMF5AU",234,0)
 Q $ZBOOLEAN(X,Y,7)  ;;EOCONDCD;CACHE
"RTN","XUMF5AU",235,0)
 Q X  ; Placeholder for other M implementations
"RTN","XUMF5AU",236,0)
 ;
"RTN","XUMF5AU",237,0)
XOR(X,Y) ;
"RTN","XUMF5AU",238,0)
 Q $ZBOOLEAN(X,Y,6)  ;;EOCONDCD;CACHE
"RTN","XUMF5AU",239,0)
 Q X  ; Placeholder for other M implementations
"RTN","XUMF5AU",240,0)
 ;
"RTN","XUMF5AU",241,0)
NOT(X) ;
"RTN","XUMF5AU",242,0)
 Q $ZBOOLEAN(X,X,12)  ;;EOCONDCD;CACHE
"RTN","XUMF5AU",243,0)
 Q X  ; Placeholder for other M implementations
"RTN","XUMF5AU",244,0)
 ;
"RTN","XUMF5AU",245,0)
 ; Functions to add and rotate 32-bit words
"RTN","XUMF5AU",246,0)
 ; X and Y are 4-character strings
"RTN","XUMF5AU",247,0)
 ; m, n and s are integers
"RTN","XUMF5AU",248,0)
 ; ADD and ROTL return 4-character strings
"RTN","XUMF5AU",249,0)
 ; ADDIW, ADDII and ROTLI return integers
"RTN","XUMF5AU",250,0)
 ;
"RTN","XUMF5AU",251,0)
ADD(X,Y) ; modulo 2**32
"RTN","XUMF5AU",252,0)
 Q $$UI32BIT($$UINT32(X)+$$UINT32(Y)#4294967296)
"RTN","XUMF5AU",253,0)
 ;
"RTN","XUMF5AU",254,0)
ADDIW(M,Y) ; modulo 2**32
"RTN","XUMF5AU",255,0)
 Q M+$$UINT32(Y)#4294967296
"RTN","XUMF5AU",256,0)
 ;
"RTN","XUMF5AU",257,0)
ADDII(M,N) ; modulo 2**32
"RTN","XUMF5AU",258,0)
 Q M+N#4294967296
"RTN","XUMF5AU",259,0)
 ;
"RTN","XUMF5AU",260,0)
ROTL(X,S) ; rotate left by s bits
"RTN","XUMF5AU",261,0)
 N INT,RIGHT,SWAP
"RTN","XUMF5AU",262,0)
 S INT=$$UINT32(X)
"RTN","XUMF5AU",263,0)
 S RIGHT=INT#TWOTO(32-S)
"RTN","XUMF5AU",264,0)
 S SWAP=RIGHT*TWOTO(S)+(INT\TWOTO(32-S))
"RTN","XUMF5AU",265,0)
 Q $$UI32BIT(SWAP)
"RTN","XUMF5AU",266,0)
 ;
"RTN","XUMF5AU",267,0)
ROTLI(N,S) ; rotate left by s bits
"RTN","XUMF5AU",268,0)
 N RIGHT,SWAP
"RTN","XUMF5AU",269,0)
 S RIGHT=N#TWOTO(32-S)
"RTN","XUMF5AU",270,0)
 S SWAP=RIGHT*TWOTO(S)+(N\TWOTO(32-S))
"RTN","XUMF5AU",271,0)
 Q SWAP
"RTN","XUMF5AU",272,0)
 ; 
"RTN","XUMF5AU",273,0)
 ; Utility functions
"RTN","XUMF5AU",274,0)
 ;
"RTN","XUMF5AU",275,0)
UI64BIT(N) ; Convert unsigned integer to 64-bit form, little endian
"RTN","XUMF5AU",276,0)
 ; code from CORBA ULONGLONG marshaling
"RTN","XUMF5AU",277,0)
 N D,X,I
"RTN","XUMF5AU",278,0)
 S D=""
"RTN","XUMF5AU",279,0)
 F I=7:-1:1 D
"RTN","XUMF5AU",280,0)
 . S X=0
"RTN","XUMF5AU",281,0)
 . F  Q:(N<(256**I))  S X=X+1,N=N-(256**I)
"RTN","XUMF5AU",282,0)
 . S X(I)=X
"RTN","XUMF5AU",283,0)
 S D=D_$C(N)
"RTN","XUMF5AU",284,0)
 F I=1:1:7 S D=D_$C(X(I))
"RTN","XUMF5AU",285,0)
 Q D
"RTN","XUMF5AU",286,0)
 ;
"RTN","XUMF5AU",287,0)
UI32BIT(N) ; Convert unsigned integer to 32-bit form, little endian
"RTN","XUMF5AU",288,0)
 ; code from CORBA ULONG marshaling
"RTN","XUMF5AU",289,0)
 Q $C(N#256,(N\256#256),(N\(65536)#256),(N\(16777216)#256))
"RTN","XUMF5AU",290,0)
 ;
"RTN","XUMF5AU",291,0)
UINT32(STR) ; Get integer value from bits of 4-character string
"RTN","XUMF5AU",292,0)
 ; code from CORBA ULONG unmarshaling
"RTN","XUMF5AU",293,0)
 Q $A(STR,1)+(256*$A(STR,2))+(65536*$A(STR,3))+(16777216*$A(STR,4))
"RTN","XUMF5AU",294,0)
 ;
"RTN","XUMF5AU",295,0)
HEX(STR) ; Printable hex representation of characters in string
"RTN","XUMF5AU",296,0)
 N DIGITS,RET,I,J,BYTE,OFFSET
"RTN","XUMF5AU",297,0)
 S DIGITS="0123456789abcdef"
"RTN","XUMF5AU",298,0)
 S RET=""
"RTN","XUMF5AU",299,0)
 S OFFSET=$L(STR)#4
"RTN","XUMF5AU",300,0)
 S:OFFSET STR=STR_$E($C(0,0,0),1,4-OFFSET) ; PAD
"RTN","XUMF5AU",301,0)
 F I=0:4:$L(STR)-4 F J=4:-1:1 D  ; Reverse byte order in each word
"RTN","XUMF5AU",302,0)
 . S BYTE=$A(STR,I+J)
"RTN","XUMF5AU",303,0)
 . S RET=RET_$E(DIGITS,1+(BYTE\16)) ; High nibble
"RTN","XUMF5AU",304,0)
 . S RET=RET_$E(DIGITS,1+(BYTE#16)) ; Low nibble
"RTN","XUMF5AU",305,0)
 Q RET
"RTN","XUMF5AU",306,0)
 ;
"RTN","XUMF5AU",307,0)
CHR2OCT(STR) ; convert hex string to decimal byte values
"RTN","XUMF5AU",308,0)
 N RET,I,BYTE,HIGH,LOW
"RTN","XUMF5AU",309,0)
 S RET=""
"RTN","XUMF5AU",310,0)
 F I=1:2:$L(STR) D
"RTN","XUMF5AU",311,0)
 . S BYTE=$E(STR,I,I+1)
"RTN","XUMF5AU",312,0)
 . Q:BYTE'?2NL
"RTN","XUMF5AU",313,0)
 . S HIGH=$$CHAR1($E(BYTE,1))
"RTN","XUMF5AU",314,0)
 . S LOW=$$CHAR1($E(BYTE,2))
"RTN","XUMF5AU",315,0)
 . S RET=RET_(16*HIGH+LOW)_" "
"RTN","XUMF5AU",316,0)
 Q RET
"RTN","XUMF5AU",317,0)
 ;
"RTN","XUMF5AU",318,0)
CHAR1(DIGIT) ; convert one char to its hex value
"RTN","XUMF5AU",319,0)
 N X
"RTN","XUMF5AU",320,0)
 S X=$F("0123456789abcdef",DIGIT)
"RTN","XUMF5AU",321,0)
 Q:X=0 0
"RTN","XUMF5AU",322,0)
 Q X-2
"RTN","XUMF5BYT")
0^7^B4678090
"RTN","XUMF5BYT",1,0)
XUMF5BYT        ;ISS/DAVID Empey- XUMF5 MD5 Hash Utility ;06/17/05
"RTN","XUMF5BYT",2,0)
 ;;8.0;KERNEL;**383**;July 10, 1995
"RTN","XUMF5BYT",3,0)
 ;
"RTN","XUMF5BYT",4,0)
 ;Reverses bytes in each hash string 'word' from the MD5 routine
"RTN","XUMF5BYT",5,0)
 ;This is required because the MD5 routine
"RTN","XUMF5BYT",6,0)
 ;presents a hashcode with each word byte-reversed
"RTN","XUMF5BYT",7,0)
 ;
"RTN","XUMF5BYT",8,0)
MAIN(HASHIN)    ;
"RTN","XUMF5BYT",9,0)
 N WORD1,WORD2,WORD3,WORD4,HASHOUT
"RTN","XUMF5BYT",10,0)
 ;
"RTN","XUMF5BYT",11,0)
 S WORD1=$E(HASHIN,1,8)
"RTN","XUMF5BYT",12,0)
 S WORD2=$E(HASHIN,9,16)
"RTN","XUMF5BYT",13,0)
 S WORD3=$E(HASHIN,17,24)
"RTN","XUMF5BYT",14,0)
 S WORD4=$E(HASHIN,25,32)
"RTN","XUMF5BYT",15,0)
 ;
"RTN","XUMF5BYT",16,0)
 S HASHOUT=$$BYTSWTCH(WORD1)_$$BYTSWTCH(WORD2)_$$BYTSWTCH(WORD3)_$$BYTSWTCH(WORD4)
"RTN","XUMF5BYT",17,0)
 ;
"RTN","XUMF5BYT",18,0)
 Q HASHOUT
"RTN","XUMF5BYT",19,0)
 ;
"RTN","XUMF5BYT",20,0)
BYTSWTCH(WORD)  ;
"RTN","XUMF5BYT",21,0)
 N PIECE1,PIECE2,PIECE3,PIECE4,RESULT
"RTN","XUMF5BYT",22,0)
 ;
"RTN","XUMF5BYT",23,0)
 S PIECE1=$E(WORD,1,2)
"RTN","XUMF5BYT",24,0)
 S PIECE2=$E(WORD,3,4)
"RTN","XUMF5BYT",25,0)
 S PIECE3=$E(WORD,5,6)
"RTN","XUMF5BYT",26,0)
 S PIECE4=$E(WORD,7,8)
"RTN","XUMF5BYT",27,0)
 ;
"RTN","XUMF5BYT",28,0)
 S RESULT=PIECE4_PIECE3_PIECE2_PIECE1
"RTN","XUMF5BYT",29,0)
 ;
"RTN","XUMF5BYT",30,0)
 Q RESULT
"RTN","XUMF5BYT",31,0)
 ;
"RTN","XUMF5BYT",32,0)
TEST ;
"RTN","XUMF5BYT",33,0)
 N OK
"RTN","XUMF5BYT",34,0)
 S OK=1
"RTN","XUMF5BYT",35,0)
 S:$$MAIN("d98c1dd404b2008f980980e97e42f8ec")'="d41d8cd98f00b204e9800998ecf8427e" OK=0
"RTN","XUMF5BYT",36,0)
 S:$$MAIN("b975c10ca8b6f1c0e299c33161267769")'="0cc175b9c0f1b6a831c399e269772661" OK=0
"RTN","XUMF5BYT",37,0)
 S:$$MAIN("98500190b04fd23c7d3f96d6727fe128")'="900150983cd24fb0d6963f7d28e17f72" OK=0
"RTN","XUMF5BYT",38,0)
 S:$$MAIN("7d696bf98d93b77c312f5a52d061f1aa")'="f96b697d7cb7938d525a2f31aaf161d0" OK=0
"RTN","XUMF5BYT",39,0)
 S:$$MAIN("d7d3fcc300e492616c49fb7d3be167ca")'="c3fcd3d76192e4007dfb496cca67e13b" OK=0
"RTN","XUMF5BYT",40,0)
 S:$$MAIN("98ab74d1f5d977d22c1c61a59f9d419f")'="d174ab98d277d9f5a5611c2c9f419d9f" OK=0
"RTN","XUMF5BYT",41,0)
 S:$$MAIN("a2f4ed5755c9e32b2eda49ac7ab60721")'="57edf4a22be3c955ac49da2e2107b67a" OK=0
"RTN","XUMF5BYT",42,0)
 I OK=1 W !,"Tests passed." Q
"RTN","XUMF5BYT",43,0)
 W !,"Tests failed."
"RTN","XUMF5BYT",44,0)
 K HASHOUT
"RTN","XUMF5BYT",45,0)
 Q
"RTN","XUMF5I")
0^6^B83618831
"RTN","XUMF5I",1,0)
XUMF5I ;ISS/PAVEL - XUMF5 MD5 Hash Entry point ;06/17/05
"RTN","XUMF5I",2,0)
 ;;8.0;KERNEL;**383**;July 10, 1995
"RTN","XUMF5I",3,0)
 ;
"RTN","XUMF5I",4,0)
 ;MD5 based on info from 4.005 SORT BY VUID
"RTN","XUMF5I",5,0)
 ;
"RTN","XUMF5I",6,0)
 Q
"RTN","XUMF5I",7,0)
EN(X0,MODE,IENCOUNT)  ;entry point to get MD5 algorithm
"RTN","XUMF5I",8,0)
 ; Lookup uses AMASTERVUID for files and B x-ref for subfiles....
"RTN","XUMF5I",9,0)
 ;
"RTN","XUMF5I",10,0)
 ; X0 = IEN or name of entry from 4.005 file
"RTN","XUMF5I",11,0)
 ; MODE = 0 regular mode.. last HASH value returned in Apl. ACK.
"RTN","XUMF5I",12,0)
 ;        1 debugging mode.. all values + hash codess returned in Apl ACK
"RTN","XUMF5I",13,0)
 ;        1.1 debugging mode.. all values (no hash codes) returned in Apl ACK
"RTN","XUMF5I",14,0)
 ;        2 debugging mode.. all fields values, all hash values, all hash codes returned in Apl. ACK.
"RTN","XUMF5I",15,0)
 ; IENCOUNT  = maximum entries for MD5 hash.. if NULL.. all entries counted...        
"RTN","XUMF5I",16,0)
 ;
"RTN","XUMF5I",17,0)
 K ^TMP("PROOT",$J) ;ROOT of file in the case of pointer...
"RTN","XUMF5I",18,0)
 N X,Y,X1,X2,X3,X20,X201,X1NEW,X2NEW,X2OLD,X0NAME,XP,H,CNT,CNTT,CNHT,XMD5,XDATE
"RTN","XUMF5I",19,0)
 N DIC,ERR,ROOT,ROOTB,ROOTB0,POINTER,JUMP,START,TMP,TMP1,TMP2,FDA,VERSION
"RTN","XUMF5I",20,0)
 N SLEV,LEV,IENS,VAL,VALUE,SORT,SORT1,EXITMD5
"RTN","XUMF5I",21,0)
 N A,B,C,D,ABCD
"RTN","XUMF5I",22,0)
 ; TMP(sequence, def entry IEN, file/subfile #, field #)=""
"RTN","XUMF5I",23,0)
 ; TMP1(,"1,120.82,2,",2)="INTERNAL"
"RTN","XUMF5I",24,0)
 ; TMP2(FILE #,FIELD #)=""  if internal value requested...
"RTN","XUMF5I",25,0)
 S DIC=4.005,X=$S(X0:"`",1:"")_X0,DIC(0)="Z",U="^" D ^DIC
"RTN","XUMF5I",26,0)
 I Y=-1 S ERROR="1^Unknown entry of 4.005 File: "_X0 Q "Unknown entry of 4.005 File"
"RTN","XUMF5I",27,0)
 S X0=+Y,X0NAME=$P(Y(0),U) S:'$G(MODE) MODE=+$P(Y(0),U,2) K TMP M TMP=@($$ROOT^DILFD(4.005,,0)_"""AC"",X0)")
"RTN","XUMF5I",28,0)
 D GETS^DIQ(4.005,X0_",","**","","TMP1")
"RTN","XUMF5I",29,0)
 S A="" F  S A=$O(TMP1(4.00511,A)) Q:'$L(A)  S:TMP1(4.00511,A,2)="INTERNAL" TMP2($P(A,",",2),$P(A,",",1))=""
"RTN","XUMF5I",30,0)
 ;MODE set from input parameter or from file.
"RTN","XUMF5I",31,0)
 S A=$C(1,35,69,103)
"RTN","XUMF5I",32,0)
 S B=$C(137,171,205,239)
"RTN","XUMF5I",33,0)
 S C=$C(254,220,186,152)
"RTN","XUMF5I",34,0)
 S D=$C(118,84,50,16)
"RTN","XUMF5I",35,0)
 S ABCD=A_B_C_D
"RTN","XUMF5I",36,0)
 S (CNT,CNTT,CNHT)=0
"RTN","XUMF5I",37,0)
 S VALUE=""
"RTN","XUMF5I",38,0)
 ;X1 = SEQUENCE
"RTN","XUMF5I",39,0)
 ;X2 = FILE/SUBFILE #
"RTN","XUMF5I",40,0)
 ;X3 = Field #
"RTN","XUMF5I",41,0)
 ;TMP = SEQUENCE OF ENTRIES TO BE PROCEEDED....
"RTN","XUMF5I",42,0)
 ;TMP1 = FILE # ALL ENTRIES
"RTN","XUMF5I",43,0)
 S START=1,X1=0,LEV=0,X2OLD=0,XMD5=$O(^TMP("XUMF ERROR",$J,9999999999999),-1)+1,EXITMD5=0
"RTN","XUMF5I",44,0)
2 F  S X1=$O(TMP(X1)) Q:'X1&'$$NEXTB1(LEV)!EXITMD5  S:'X1 X1=SLEV(LEV),X2OLD=0  S X2=$O(TMP(X1,X0,0)) Q:'X2  D
"RTN","XUMF5I",45,0)
 .S (XP,JUMP)=0
"RTN","XUMF5I",46,0)
 .;************ File/subfile has changed ************
"RTN","XUMF5I",47,0)
 .D:X2'=X2OLD
"RTN","XUMF5I",48,0)
 ..;
"RTN","XUMF5I",49,0)
 ..;************ File Level & Start ************
"RTN","XUMF5I",50,0)
 ..I $D(^DIC(X2)),START D  Q
"RTN","XUMF5I",51,0)
 ...S START=0,SLEV(1)=X1,X2OLD(1)=X2
"RTN","XUMF5I",52,0)
 ...K ROOT,ROOTB,ROOTB0,X02,X021,TMP1
"RTN","XUMF5I",53,0)
 ...S LEV=1,IENS=""
"RTN","XUMF5I",54,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",55,0)
 ..;
"RTN","XUMF5I",56,0)
 ..;************ Going Up ************
"RTN","XUMF5I",57,0)
 ..I $G(^DD(X2OLD,0,"UP"))=X2 D  Q
"RTN","XUMF5I",58,0)
 ...I $$NEXTB(LEV,X2OLD) S JUMP=2 Q
"RTN","XUMF5I",59,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",60,0)
 ...S LEV=LEV-1,IENS=$P(IENS,",",$L(IENS,",")-LEV,9999),X2=X2OLD(LEV)
"RTN","XUMF5I",61,0)
 ..Q:JUMP
"RTN","XUMF5I",62,0)
 ..;
"RTN","XUMF5I",63,0)
 ..;************ Going DOWN ************
"RTN","XUMF5I",64,0)
 ..I $G(^DD(X2,0,"UP"))=X2OLD D  Q
"RTN","XUMF5I",65,0)
 ...S LEV=LEV+1,SLEV(LEV)=X1,X2OLD(LEV)=X2
"RTN","XUMF5I",66,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",67,0)
 ..;
"RTN","XUMF5I",68,0)
 ..;************ Same Level other multiple... ************
"RTN","XUMF5I",69,0)
 ..I $G(^DD(X2,0,"UP"))=$G(^DD(X2OLD,0,"UP")),+$G(^DD(X2OLD,0,"UP")),+$G(^DD(X2,0,"UP")) D  Q
"RTN","XUMF5I",70,0)
 ...I $$NEXTB(LEV,X2OLD) S JUMP=2 Q
"RTN","XUMF5I",71,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",72,0)
 ...S IENS=$P(IENS,",",$L(IENS,",")-LEV+1,9999) ;B:'$L(IENS)
"RTN","XUMF5I",73,0)
 ...S SLEV(LEV)=X1
"RTN","XUMF5I",74,0)
 ...S X2OLD(LEV)=X2
"RTN","XUMF5I",75,0)
 ...;S X2=X2OLD
"RTN","XUMF5I",76,0)
 ...D GETONE(LEV,X2)
"RTN","XUMF5I",77,0)
 ..Q:JUMP
"RTN","XUMF5I",78,0)
 ..;
"RTN","XUMF5I",79,0)
 ..;************ New File not start... ************
"RTN","XUMF5I",80,0)
 ..I $D(^DIC(X2)) D  Q
"RTN","XUMF5I",81,0)
 ...S:'$D(X2NEW) X2NEW=X2,X1NEW=X1
"RTN","XUMF5I",82,0)
 ...I $$NEXTB(LEV,X2OLD(LEV)) S JUMP=2 Q
"RTN","XUMF5I",83,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),SLEV(LEV),X2OLD(LEV)
"RTN","XUMF5I",84,0)
 ...S IENS=$P(IENS,",",$L(IENS,",")-LEV+1,9999) ;B:'$L(IENS)
"RTN","XUMF5I",85,0)
 ...I LEV=1 S (X1,SLEV(1))=X1NEW,(X2,X2OLD(1))=X2NEW K X1NEW,X2NEW D GETONE(LEV,X2) Q  ;;;;;;;;GET TO THE BOTTOM LEVEL = 1 NOT ANY OTHRER'S B X-REF
"RTN","XUMF5I",86,0)
 ...S LEV=LEV-1,X1=SLEV(LEV)-1,X2=+$G(X2OLD(LEV-1)),XP=1
"RTN","XUMF5I",87,0)
 ..;
"RTN","XUMF5I",88,0)
 ..;************ Last sequence number ************
"RTN","XUMF5I",89,0)
 ..I X2OLD=0 D  Q
"RTN","XUMF5I",90,0)
21 ...I $$NEXTB(LEV,X2) S JUMP=2 Q
"RTN","XUMF5I",91,0)
 ...K ROOT(LEV),ROOTB(LEV),ROOTB0(LEV),X20(LEV),X201(LEV),TMP1(LEV),X2OLD(LEV)
"RTN","XUMF5I",92,0)
 ...Q:LEV=1
"RTN","XUMF5I",93,0)
 ...S LEV=LEV-1,IENS=$P(IENS,",",$L(IENS,",")-LEV,9999),X2=X2OLD(LEV) ;,X1=SLEV(LEV)-1,XP=1
"RTN","XUMF5I",94,0)
 ...G 21
"RTN","XUMF5I",95,0)
 ..Q
"RTN","XUMF5I",96,0)
 ..;
"RTN","XUMF5I",97,0)
 .S X2OLD=X2
"RTN","XUMF5I",98,0)
 .Q:JUMP
"RTN","XUMF5I",99,0)
 .;************ Get value & MD5 ************
"RTN","XUMF5I",100,0)
 .S X3=$O(TMP(X1+XP,X0,X2,0)) Q:'X3
"RTN","XUMF5I",101,0)
 .S VAL=$S($L(IENS):$$UP($G(TMP1(LEV,X2,IENS,X3))),1:"") D:$L(VAL)
"RTN","XUMF5I",102,0)
 ..N X,TMP,I
"RTN","XUMF5I",103,0)
 ..I X3=99.99,$D(^DIC(X2)) S CNTT=CNTT+1 I $G(IENCOUNT),CNTT>IENCOUNT S EXITMD5=1,CNTT=CNTT-1 Q
"RTN","XUMF5I",104,0)
 ..D:MODE>1.99 SETACK("File #: "_X2_" Field #: "_X3_" Value: "_VAL_" IENS: "_IENS)
"RTN","XUMF5I",105,0)
 ..S CNT=$G(CNT)+1
"RTN","XUMF5I",106,0)
 ..S VALUE=VALUE_VAL
"RTN","XUMF5I",107,0)
 ..Q:$L(VALUE)<65
"RTN","XUMF5I",108,0)
 ..S X=$E(VALUE,65,$L(VALUE)),VALUE=$E(VALUE,1,64)
"RTN","XUMF5I",109,0)
 ..D:MODE
"RTN","XUMF5I",110,0)
 ...D SETACK($S(MODE=1.1:"",1:"Value: ")_VALUE)
"RTN","XUMF5I",111,0)
 ...D:MODE'=1.1 SETACK("HASH:  "_$$MAIN^XUMF5BYT($$HEX^XUMF5AU($$MD5E^XUMF5AU(ABCD,VALUE,0,CNHT+1*64))))
"RTN","XUMF5I",112,0)
 ..S ABCD=$$MD5E^XUMF5AU(ABCD,VALUE,1)
"RTN","XUMF5I",113,0)
 ..S VALUE=X,CNHT=CNHT+1
"RTN","XUMF5I",114,0)
 .Q
"RTN","XUMF5I",115,0)
 ;************ So get the final ABCD value... ************
"RTN","XUMF5I",116,0)
 S ABCD=$$MD5E^XUMF5AU(ABCD,VALUE,0,CNHT*64+$L(VALUE))
"RTN","XUMF5I",117,0)
 D:MODE
"RTN","XUMF5I",118,0)
 .W ! D SETACK($S(MODE=1.1:"",1:"Last value: ")_VALUE)
"RTN","XUMF5I",119,0)
 .D SETACK("LAST HASH:  "_$$MAIN^XUMF5BYT($$HEX^XUMF5AU(ABCD))) W !
"RTN","XUMF5I",120,0)
 .D SETACK("Total number of Characters included in Hash : "_(CNHT*64+$L(VALUE)))
"RTN","XUMF5I",121,0)
 .D SETACK("Length of last value: "_$L(VALUE))
"RTN","XUMF5I",122,0)
 .D SETACK("Number of file entries: "_CNTT)
"RTN","XUMF5I",123,0)
 .D SETACK("Number of hash entries: "_(CNHT+1))
"RTN","XUMF5I",124,0)
 .D SETACK("Number of values: "_CNT)
"RTN","XUMF5I",125,0)
 .W !
"RTN","XUMF5I",126,0)
 ;************ Hex conversion + storage of the final ABCD value ************
"RTN","XUMF5I",127,0)
 S VALUE=$$MAIN^XUMF5BYT($$HEX^XUMF5AU(ABCD))
"RTN","XUMF5I",128,0)
 K FDA
"RTN","XUMF5I",129,0)
 S FDA(4.005,X0_",",4)=$$NOW^XLFDT
"RTN","XUMF5I",130,0)
 S FDA(4.005,X0_",",5)=VALUE
"RTN","XUMF5I",131,0)
 K ERR D FILE^DIE(,"FDA","ERR")
"RTN","XUMF5I",132,0)
 I $D(ERR) D
"RTN","XUMF5I",133,0)
 .S ERROR="1^MD5 Date updating error"
"RTN","XUMF5I",134,0)
 .D EM^XUMFX("file DIE call error message in RDT",.ERR)
"RTN","XUMF5I",135,0)
 .K ERR
"RTN","XUMF5I",136,0)
 D SETACK("MD5 Signature Entry: "_X0NAME)
"RTN","XUMF5I",137,0)
 D SETACK("Local Hash value: "_VALUE)
"RTN","XUMF5I",138,0)
 S ERROR=$G(ERROR)
"RTN","XUMF5I",139,0)
 S X1=$O(@($$ROOT^DILFD(4.009,,0,"ERR")_"0)"))_","
"RTN","XUMF5I",140,0)
 D GETS^DIQ(4.009,X1,"*",,"TMP3") S VERSION=$G(TMP3(4.009,X1,1))
"RTN","XUMF5I",141,0)
 S $P(ERROR,U,2)=$P(ERROR,U,2)_";CHECKSUM:"_VALUE_";VERSION:"_VERSION_";"
"RTN","XUMF5I",142,0)
 D SETACK("ERROR variable: "_ERROR)
"RTN","XUMF5I",143,0)
 K ^TMP("PROOT",$J)
"RTN","XUMF5I",144,0)
 Q VALUE
"RTN","XUMF5I",145,0)
 Q
"RTN","XUMF5I",146,0)
GETONE(LEV,X2)     ;GET DATA
"RTN","XUMF5I",147,0)
 S ROOT(LEV)=$$ROOT^DILFD(X2,"1,"_IENS,,"ERR")
"RTN","XUMF5I",148,0)
 Q:'$L(ROOT(LEV))
"RTN","XUMF5I",149,0)
 I $D(ERR) D  Q
"RTN","XUMF5I",150,0)
 .S ERROR="1^MD5 ROOT retrieval error, File/Subfile #: "_X2_" IENS: 1,"_IENS,EXITMD5=1,JUMP=2
"RTN","XUMF5I",151,0)
 .D EM^XUMFX("file DIE call error message in RDT",.ERR)
"RTN","XUMF5I",152,0)
 .K ERR
"RTN","XUMF5I",153,0)
 S SORT1="",SORT="B" S:$D(^DIC(X2)) SORT="AMASTERVUID",SORT1="1,"
"RTN","XUMF5I",154,0)
 S ROOTB(LEV)=ROOT(LEV)_""""_SORT_""",X20(LEV))"
"RTN","XUMF5I",155,0)
 S X20(LEV)="",ROOTB0(LEV)=ROOT(LEV)_""""_SORT_""",X20(LEV),"_SORT1_"X201(LEV))"
"RTN","XUMF5I",156,0)
 S:SORT="B" POINTER=$$POINTER(X2) ;Pointer = pointer to file #
"RTN","XUMF5I",157,0)
 I SORT="B",+POINTER D  ;Handle poiter type of subfile...
"RTN","XUMF5I",158,0)
 .N BB S POINTER=$E(POINTER,2,$L(POINTER))
"RTN","XUMF5I",159,0)
 .; ^TMP("PROOT",$J,Subfile #,IEN from up level,"Name sorted",IEN level)=""
"RTN","XUMF5I",160,0)
 .; ^TMP("PROOT",$J,Subfile #,IEN from up level,X20(LEV),X201(LEV))=""
"RTN","XUMF5I",161,0)
 .K ^TMP("PROOT",$J,X2)
"RTN","XUMF5I",162,0)
 .F  S X20(LEV)=$O(@(ROOTB(LEV))) Q:'$L(X20(LEV))  S X201(LEV)=0 F  S X201(LEV)=$O(@(ROOTB0(LEV)))  Q:'X201(LEV)  D
"RTN","XUMF5I",163,0)
 ..S BB=POINTER_X20(LEV)_",0)",BB=$P(@(BB),U) S:$L(BB) ^TMP("PROOT",$J,X2,BB,X201(LEV))=""
"RTN","XUMF5I",164,0)
 .S ROOTB(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV))"
"RTN","XUMF5I",165,0)
 .S ROOTB0(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV),X201(LEV))"
"RTN","XUMF5I",166,0)
 I SORT="B",LEV=2,X2=+$P(^DD(X2OLD(1),99.991,0),U,2) D  ;Handle Effective Date/Status multiple... only last date taken to HASH... TERMSTATUS
"RTN","XUMF5I",167,0)
 .K ^TMP("PROOT",$J,X2)
"RTN","XUMF5I",168,0)
 .S X20(LEV)=$O(@(ROOTB(LEV)),-1) ;Get last date..
"RTN","XUMF5I",169,0)
 .Q:'$L(X20(LEV))  ;No Data in Effective Date Multiple.
"RTN","XUMF5I",170,0)
 .S X201(LEV)=0,X201(LEV)=+$O(@ROOTB0(LEV))
"RTN","XUMF5I",171,0)
 .Q:'X201(LEV)
"RTN","XUMF5I",172,0)
 .S ROOTB(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV))"
"RTN","XUMF5I",173,0)
 .S ROOTB0(LEV)="^TMP(""PROOT"",$J,"_X2_",X20(LEV),X201(LEV))"
"RTN","XUMF5I",174,0)
 .S ^TMP("PROOT",$J,X2,X20(LEV),X201(LEV))=""
"RTN","XUMF5I",175,0)
 S X20(LEV)=""
"RTN","XUMF5I",176,0)
GET1 S X20(LEV)=$O(@(ROOTB(LEV))) Q:'$L(X20(LEV))  S X201(LEV)=0,X201(LEV)=$O(@(ROOTB0(LEV)))
"RTN","XUMF5I",177,0)
 I $D(^DIC(X2)),'$$ACTIVE(X2,X201(LEV)_","_IENS) G GET1 ;If not active entry.. skip it..
"RTN","XUMF5I",178,0)
 S IENS=X201(LEV)_","_IENS
"RTN","XUMF5I",179,0)
 Q:'X201(LEV)
"RTN","XUMF5I",180,0)
 D GETSIE(X2,IENS,LEV)
"RTN","XUMF5I",181,0)
 Q
"RTN","XUMF5I",182,0)
NEXTB(LEV,X2X)      ;Get next IEN from xref on current level.. if exist
"RTN","XUMF5I",183,0)
 ;Is there other entry at current level to be proceeded..  ?? get next "B" x-ref set old X2 = NEW X2 and go to loop
"RTN","XUMF5I",184,0)
 Q:'$D(X20(LEV)) 0
"RTN","XUMF5I",185,0)
N1 Q:'$L(X20(LEV)) 0
"RTN","XUMF5I",186,0)
 Q:'($O(@(ROOTB0(LEV)))!$L($O(@(ROOTB(LEV))))) 0
"RTN","XUMF5I",187,0)
 S:X201(LEV) X201(LEV)=$O(@(ROOTB0(LEV))) ;Try get new IEN fron B-xref
"RTN","XUMF5I",188,0)
 I 'X201(LEV) S X20(LEV)=$O(@(ROOTB(LEV))),X201(LEV)=0 S:$L(X20(LEV)) X201(LEV)=$O(@(ROOTB0(LEV)))
"RTN","XUMF5I",189,0)
 Q:'X201(LEV) 0
"RTN","XUMF5I",190,0)
 I $D(^DIC(X2X)),'$$ACTIVE(X2X,X201(LEV)_","_$P(IENS,",",2,99)) G N1 ;If not active entry.. skip it..
"RTN","XUMF5I",191,0)
 S $P(IENS,",",1)=X201(LEV)
"RTN","XUMF5I",192,0)
 S X2=X2X
"RTN","XUMF5I",193,0)
 D GETSIE(X2,IENS,LEV)
"RTN","XUMF5I",194,0)
 S X1=SLEV(LEV)-1,XP=1
"RTN","XUMF5I",195,0)
 Q 1
"RTN","XUMF5I",196,0)
NEXTB1(LEV)     ;See if some other entries in x-ref at any level exist...  no variable is set.
"RTN","XUMF5I",197,0)
3 ;
"RTN","XUMF5I",198,0)
 Q:LEV=0 0
"RTN","XUMF5I",199,0)
 I LEV>1,'$L($G(X20(LEV))) G 4
"RTN","XUMF5I",200,0)
 I LEV=1,'$L($G(X20(LEV))) Q 0
"RTN","XUMF5I",201,0)
 I LEV=1,'($O(@(ROOTB0(LEV)))!$L($O(@(ROOTB(LEV))))) Q 0
"RTN","XUMF5I",202,0)
 I X201(LEV),$O(@(ROOTB0(LEV))) Q 1
"RTN","XUMF5I",203,0)
 Q:$L($O(@(ROOTB(LEV)))) 1 ;
"RTN","XUMF5I",204,0)
 Q:LEV=1 0
"RTN","XUMF5I",205,0)
4 S LEV=LEV-1 G 3
"RTN","XUMF5I",206,0)
 Q
"RTN","XUMF5I",207,0)
POINTER(X2)     ;GET THE POINTER FILE # IF POITER TYPE OF .01 FIELD
"RTN","XUMF5I",208,0)
 N FTYPE,TT,I
"RTN","XUMF5I",209,0)
 D FIELD^DID(X2,.01,,"POINTER","TT")
"RTN","XUMF5I",210,0)
 Q:'$L(TT("POINTER")) 0
"RTN","XUMF5I",211,0)
 S TT="1^"_TT("POINTER")
"RTN","XUMF5I",212,0)
 Q TT
"RTN","XUMF5I",213,0)
SETACK(X,MODE)      ;SET APPL. Acknowledgment + WRIGHT ?? 
"RTN","XUMF5I",214,0)
 W X,!
"RTN","XUMF5I",215,0)
 S:$G(MODE) ^TMP("XUMF ERROR",$J,XMD5,$O(^TMP("XUMF ERROR",$J,XMD5,9999999999999),-1)+1)=X
"RTN","XUMF5I",216,0)
 Q
"RTN","XUMF5I",217,0)
UP(X) ;Upercase conversion    
"RTN","XUMF5I",218,0)
 Q $TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XUMF5I",219,0)
ACTIVE(FILE,IEN)        ;GET 1 = Active 0 = Inactive
"RTN","XUMF5I",220,0)
 N TMP,BB,X,X1,X2,XT,XX
"RTN","XUMF5I",221,0)
 D GETS^DIQ(FILE,IEN,"99.991*","I","TMP","ERR")
"RTN","XUMF5I",222,0)
 S (XT,XX)=0,X="TMP"
"RTN","XUMF5I",223,0)
 F  S X=$Q(@(X)) Q:'$L(X)  S X1=$G(@(X)),X=$Q(@(X)),X2=$G(@(X)) S:X1>XT XT=X1,XX=+X2
"RTN","XUMF5I",224,0)
 Q XX
"RTN","XUMF5I",225,0)
GETSIE(X2,IENS,LEV)     ;GET Internal/External values
"RTN","XUMF5I",226,0)
 K TMP1(LEV) D GETS^DIQ(X2,IENS,"*","","TMP1(LEV)")
"RTN","XUMF5I",227,0)
 D:$D(TMP2(X2))
"RTN","XUMF5I",228,0)
 .N TMP3,I
"RTN","XUMF5I",229,0)
 .D GETS^DIQ(X2,IENS,"*","I","TMP3")
"RTN","XUMF5I",230,0)
 .S I="" F  S I=$O(TMP2(X2,I)) Q:'I  S:$D(TMP1(LEV,X2,IENS,I)) TMP1(LEV,X2,IENS,I)=TMP3(X2,IENS,I,"I")
"RTN","XUMF5I",231,0)
 Q
"RTN","XUMFR")
0^8^B8391013
"RTN","XUMFR",1,0)
XUMFR ;OIFO-OAK/RAM - pre/post update subroutines;04/15/02 ;10/12/05  12:12
"RTN","XUMFR",2,0)
 ;;8.0;KERNEL;**335,383**;Jul 10, 1995
"RTN","XUMFR",3,0)
 ;
"RTN","XUMFR",4,0)
 Q
"RTN","XUMFR",5,0)
 ;
"RTN","XUMFR",6,0)
NULL ; -- do nothing
"RTN","XUMFR",7,0)
 ;
"RTN","XUMFR",8,0)
 Q
"RTN","XUMFR",9,0)
 ;
"RTN","XUMFR",10,0)
PRE ; -- pre update
"RTN","XUMFR",11,0)
 ;
"RTN","XUMFR",12,0)
 N ARRAY
"RTN","XUMFR",13,0)
 ;
"RTN","XUMFR",14,0)
 K ^TMP("XUMF PRE",$J)
"RTN","XUMFR",15,0)
 ;
"RTN","XUMFR",16,0)
 D DATA(.ARRAY)
"RTN","XUMFR",17,0)
 ;
"RTN","XUMFR",18,0)
 M ^TMP("XUMF PRE",$J)=ARRAY
"RTN","XUMFR",19,0)
 ;
"RTN","XUMFR",20,0)
 Q
"RTN","XUMFR",21,0)
 ;
"RTN","XUMFR",22,0)
POST ; -- post update
"RTN","XUMFR",23,0)
 ;
"RTN","XUMFR",24,0)
 N ARRAY,I,X,FLAG
"RTN","XUMFR",25,0)
 ;
"RTN","XUMFR",26,0)
 D DATA(.ARRAY)
"RTN","XUMFR",27,0)
 ;
"RTN","XUMFR",28,0)
 S (FLAG,I)=0
"RTN","XUMFR",29,0)
 F  S I=$O(ARRAY(I)) Q:'I  D  Q:FLAG
"RTN","XUMFR",30,0)
 .I ARRAY(I)'=^TMP("XUMF PRE",$J,I) S FLAG=1 Q
"RTN","XUMFR",31,0)
 ;
"RTN","XUMFR",32,0)
 I FLAG D
"RTN","XUMFR",33,0)
 .S I=0
"RTN","XUMFR",34,0)
 .F  S I=$O(ARRAY(I)) Q:'I  D
"RTN","XUMFR",35,0)
 ..S X(I+100)=ARRAY(I) K ARRAY(I)
"RTN","XUMFR",36,0)
 .M X=^TMP("XUMF PRE",$J)
"RTN","XUMFR",37,0)
 .D XM(.X,$G(KEY))
"RTN","XUMFR",38,0)
 ;
"RTN","XUMFR",39,0)
 K ^TMP("XUMF PRE",$J)
"RTN","XUMFR",40,0)
 ;
"RTN","XUMFR",41,0)
 Q
"RTN","XUMFR",42,0)
 ;
"RTN","XUMFR",43,0)
DATA(ARRAY) ; -- array(sequence)=fieldLabel_": "_value
"RTN","XUMFR",44,0)
 ;
"RTN","XUMFR",45,0)
 N SEG,SEQ,FLD,FILE,IENS,FIELD,VALUE,LKUP,IDX,ZDTYP
"RTN","XUMFR",46,0)
 ;
"RTN","XUMFR",47,0)
 S SEG="",SEQ=0
"RTN","XUMFR",48,0)
 F  S SEG=$O(^TMP("XUMF MFS",$J,"PARAM","SEG",SEG)) Q:SEG=""  D
"RTN","XUMFR",49,0)
 .F  S SEQ=$O(^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFR",50,0)
 ..;
"RTN","XUMFR",51,0)
 ..S FLD=$O(^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ,0))
"RTN","XUMFR",52,0)
 ..;
"RTN","XUMFR",53,0)
 ..I 'FLD D
"RTN","XUMFR",54,0)
 ...S FILE=^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ,"FILE")
"RTN","XUMFR",55,0)
 ...S IENS=$G(^TMP("XUMF MFS",$J,"PARAM","IENS",SEG,SEQ))
"RTN","XUMFR",56,0)
 ...S FIELD=^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ,"FIELD")
"RTN","XUMFR",57,0)
 ...S LKUP=$G(^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ,"LKUP"))
"RTN","XUMFR",58,0)
 ...I LKUP S FIELD=FIELD_":"_LKUP
"RTN","XUMFR",59,0)
 ...S VALUE=$$GET1^DIQ(FILE,IENS,FIELD)
"RTN","XUMFR",60,0)
 ...S ARRAY(SEQ)=$$FIELD^XUMF(FILE,$P(FIELD,":"),"LABEL")_": "_VALUE
"RTN","XUMFR",61,0)
 ..I FLD D
"RTN","XUMFR",62,0)
 ...S ZDTYP=$G(^TMP("XUMF MFS",$J,"PARAM","SEG",SEG,"SEQ",SEQ,FLD))
"RTN","XUMFR",63,0)
 ...S LKUP=$P(ZDTYP,U,2)
"RTN","XUMFR",64,0)
 ...I LKUP S FLD=FLD_":"_LKUP
"RTN","XUMFR",65,0)
 ...S VALUE=$$GET1^DIQ(IFN,IEN_",",FLD)
"RTN","XUMFR",66,0)
 ...S ARRAY(SEQ)=$$FIELD^XUMF(IFN,$P(FLD,":"),"LABEL")_": "_VALUE
"RTN","XUMFR",67,0)
 ;
"RTN","XUMFR",68,0)
 Q
"RTN","XUMFR",69,0)
 ;
"RTN","XUMFR",70,0)
XM(X,XUMFKEY) ; -- MailMan notification
"RTN","XUMFR",71,0)
 ;
"RTN","XUMFR",72,0)
 N GROUP,XMDUZ
"RTN","XUMFR",73,0)
 ;
"RTN","XUMFR",74,0)
 S HLCS=$G(HLCS) S:HLCS="" HLCS="~"
"RTN","XUMFR",75,0)
 S XUMFKEY=" "_$P($G(XUMFKEY),HLCS)
"RTN","XUMFR",76,0)
 ;
"RTN","XUMFR",77,0)
 S GROUP=$$GET1^DIQ(4.001,IEN_",",.06)
"RTN","XUMFR",78,0)
 S:GROUP'="" GROUP="G."_GROUP
"RTN","XUMFR",79,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID")),X(.2)=""
"RTN","XUMFR",80,0)
 ;S X(.3)="PRE UPDATE VALUES:",X(.4)=""
"RTN","XUMFR",81,0)
 S X(99.1)="",X(99.2)="POST UPDATE VALUES:",X(99.3)=""
"RTN","XUMFR",82,0)
 S XMSUB="MFS UPDATE - "_$$FILE^XUMF(IFN,"NAME")_XUMFKEY
"RTN","XUMFR",83,0)
 S XMY("G.XUMF SERVER")="",XMDUZ=.5
"RTN","XUMFR",84,0)
 S:GROUP'="" XMY(GROUP)=""
"RTN","XUMFR",85,0)
 S XMTEXT="X("
"RTN","XUMFR",86,0)
 ;
"RTN","XUMFR",87,0)
 D ^XMD
"RTN","XUMFR",88,0)
 ;
"RTN","XUMFR",89,0)
 Q
"RTN","XUMFR",90,0)
 ;
"RTN","XUMFR",91,0)
MD5 ;MD5 Hash value
"RTN","XUMFR",92,0)
 D EN^XUMF5I(IEN)
"RTN","XUMFR",93,0)
 Q
"RTN","XUMFX")
0^1^B20928800
"RTN","XUMFX",1,0)
XUMFX ;ISS/RAM - XUMF API's;04/15/02
"RTN","XUMFX",2,0)
 ;;8.0;KERNEL;**299,382,383**;Jul 10, 1995
"RTN","XUMFX",3,0)
 ;
"RTN","XUMFX",4,0)
 Q
"RTN","XUMFX",5,0)
 ;
"RTN","XUMFX",6,0)
 ;
"RTN","XUMFX",7,0)
MFE(IFN,PKV,HLCS,IEN,ERROR) ; -- update
"RTN","XUMFX",8,0)
 ;
"RTN","XUMFX",9,0)
 N IENS,MFE,I,X,ID,XREF,NAME,FLD,FDA,DIC,Y
"RTN","XUMFX",10,0)
 ;
"RTN","XUMFX",11,0)
 S IFN=$G(IFN),IEN=$G(IEN),HLCS=$G(HLCS),ERROR=$G(ERROR)
"RTN","XUMFX",12,0)
 S:HLCS="" HLCS="~"
"RTN","XUMFX",13,0)
 ;
"RTN","XUMFX",14,0)
 Q:ERROR
"RTN","XUMFX",15,0)
 ;
"RTN","XUMFX",16,0)
 I 'IFN S ERROR="1^Error - IFN required HLNODE: "_HLNODE Q
"RTN","XUMFX",17,0)
 ;
"RTN","XUMFX",18,0)
 I $P(PKV,HLCS)=""!($P(PKV,HLCS,2)="")!($P(PKV,HLCS,4)="") D  Q:ERROR
"RTN","XUMFX",19,0)
 .Q:$G(XUMFSDS)="1H"
"RTN","XUMFX",20,0)
 .S ERROR="1^Error - PKV not valid HLNODE: "_HLNODE
"RTN","XUMFX",21,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",22,0)
 ;
"RTN","XUMFX",23,0)
 S MFE=$G(^DIC(4.001,IFN,"MFE")),XREF=$P(MFE,U,8)
"RTN","XUMFX",24,0)
 I XREF="" D  Q
"RTN","XUMFX",25,0)
 .S ERROR="1^Error - MFE parameter XREF missing HLNODE: "_HLNODE
"RTN","XUMFX",26,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",27,0)
 ;
"RTN","XUMFX",28,0)
 ;I IFN=4.001 D  Q
"RTN","XUMFX",29,0)
 ;.S IEN=$$FIND1^DIC(1,,"BX",$P(PKV,HLCS))
"RTN","XUMFX",30,0)
 ;.I 'IEN D  Q
"RTN","XUMFX",31,0)
 ;..S ERROR="1^not a valid IEN in MFE - HLNODE: "_HLNODE
"RTN","XUMFX",32,0)
 ;..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",33,0)
 ;.Q:$D(^DIC(4.001,IEN))
"RTN","XUMFX",34,0)
 ;.S NAME=$P(PKV,HLCS)
"RTN","XUMFX",35,0)
 ;.K FDA
"RTN","XUMFX",36,0)
 ;.S FDA(IFN,"?+1,",.01)=NAME
"RTN","XUMFX",37,0)
 ;.D UPDATE^DIE("E","FDA",,"ERR")
"RTN","XUMFX",38,0)
 ;.I $D(ERR) D  Q
"RTN","XUMFX",39,0)
 ;..S ERROR="1^MFE UPDATE FAILED for .01 File#: "_IFN
"RTN","XUMFX",40,0)
 ;..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",41,0)
 ;
"RTN","XUMFX",42,0)
 ;lookup an active VUID
"RTN","XUMFX",43,0)
 S VUID=$P(PKV,HLCS)
"RTN","XUMFX",44,0)
 I $G(XUMFSDS)="1H" S VUID=$P(PKV,HLCS,4)
"RTN","XUMFX",45,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFX",46,0)
 I '$L(ROOT) D  Q
"RTN","XUMFX",47,0)
 .S ERROR="1^Error - MFE no root file#: "_IFN
"RTN","XUMFX",48,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",49,0)
 S IEN=$O(@ROOT@("AMASTERVUID",VUID,1,0))
"RTN","XUMFX",50,0)
 ;
"RTN","XUMFX",51,0)
 ;reactivate an existing inactive VUID
"RTN","XUMFX",52,0)
 I 'IEN D
"RTN","XUMFX",53,0)
 .S IEN=$O(@ROOT@("AMASTERVUID",VUID,0,0)) Q:'IEN
"RTN","XUMFX",54,0)
 .K FDA,ERR
"RTN","XUMFX",55,0)
 .S IENS=IEN_","
"RTN","XUMFX",56,0)
 .S FDA(IFN,IENS,99.98)=1
"RTN","XUMFX",57,0)
 .D FILE^DIE("E","FDA","ERR")
"RTN","XUMFX",58,0)
 .I $D(ERR) D
"RTN","XUMFX",59,0)
 ..S ERROR="1^flag update error for IFN: "_IFN_" IEN: "_IEN_" PKV: "_PKV
"RTN","XUMFX",60,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",61,0)
 ..K ERR
"RTN","XUMFX",62,0)
 ;
"RTN","XUMFX",63,0)
 Q:IEN
"RTN","XUMFX",64,0)
 ;
"RTN","XUMFX",65,0)
 I $G(XUMFSDS)="1H",'IEN D  Q
"RTN","XUMFX",66,0)
 .S ERROR="1^SDS history could not find owning record PKV: "_PKV
"RTN","XUMFX",67,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",68,0)
 ;
"RTN","XUMFX",69,0)
 I 'IEN D
"RTN","XUMFX",70,0)
 .S KEY=$P(PKV,HLCS,4)
"RTN","XUMFX",71,0)
 .S IEN=$O(@ROOT@(XREF,KEY,0))
"RTN","XUMFX",72,0)
 ;
"RTN","XUMFX",73,0)
 I 'IEN D  Q:ERROR
"RTN","XUMFX",74,0)
 .S NAME=$P(PKV,HLCS,2)
"RTN","XUMFX",75,0)
 .D CHK^DIE(IFN,.01,,NAME,.X)
"RTN","XUMFX",76,0)
 .I X="^" D  Q
"RTN","XUMFX",77,0)
 ..S ERROR="1^Error - PKV .01 is invalid"_" File #: "_IFN_" PKV="_PKV
"RTN","XUMFX",78,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",79,0)
 .K DIC S DIC=IFN,DIC(0)="F" D FILE^DICN K DIC
"RTN","XUMFX",80,0)
 .I Y="-1" D  Q
"RTN","XUMFX",81,0)
 ..S ERROR="1^stub entry for "_PKV_" failed PKV: "_PKV
"RTN","XUMFX",82,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",83,0)
 .S IEN=+Y
"RTN","XUMFX",84,0)
 ;
"RTN","XUMFX",85,0)
 S IENS=IEN_","
"RTN","XUMFX",86,0)
 ;
"RTN","XUMFX",87,0)
 I $L($P(MFE,U)),$P(MFE,U)'=99.99 Q
"RTN","XUMFX",88,0)
 S FDA(IFN,IENS,99.99)=$P(PKV,HLCS,1)
"RTN","XUMFX",89,0)
 S FDA(IFN,IENS,99.98)=1
"RTN","XUMFX",90,0)
 ;
"RTN","XUMFX",91,0)
 K ERR
"RTN","XUMFX",92,0)
 ;
"RTN","XUMFX",93,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","XUMFX",94,0)
 I $D(ERR) D
"RTN","XUMFX",95,0)
 .S ERROR="1^VUID update error for IFN: "_IFN_" IEN: "_IEN_" PKV: "_PKV
"RTN","XUMFX",96,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",97,0)
 .K ERR
"RTN","XUMFX",98,0)
 ;
"RTN","XUMFX",99,0)
 Q
"RTN","XUMFX",100,0)
 ;
"RTN","XUMFX",101,0)
VUID(FILE,FIELD,VUID,X) ; -- If value type pointer and VUID may be used,
"RTN","XUMFX",102,0)
 ; get IEN and set it as internal value
"RTN","XUMFX",103,0)
 N XVUID,X1
"RTN","XUMFX",104,0)
 Q:'$L(FILE)!'FIELD!'$L(VUID) 0
"RTN","XUMFX",105,0)
 Q:$E(X,1,$L(VUID))'=VUID 0
"RTN","XUMFX",106,0)
 S XVUID=$E(X,$L(VUID)+1,$L(X))
"RTN","XUMFX",107,0)
 D FIELD^DID(FILE,FIELD,,"POINTER","X1")
"RTN","XUMFX",108,0)
 S X1=$G(X1("POINTER"))
"RTN","XUMFX",109,0)
 Q:'$L(X1) 0
"RTN","XUMFX",110,0)
 S X1=U_X1_"""AMASTERVUID"",XVUID,1,0)"
"RTN","XUMFX",111,0)
 S X1=$O(@X1)
"RTN","XUMFX",112,0)
 Q +X1
"RTN","XUMFX",113,0)
 ;
"RTN","XUMFX",114,0)
VAL(FILE,FIELD,VUID,VALUE,IENS) ; convert to internal
"RTN","XUMFX",115,0)
 ;
"RTN","XUMFX",116,0)
 N RESULT,ERR
"RTN","XUMFX",117,0)
 ;
"RTN","XUMFX",118,0)
 I $L(VUID) D  Q RESULT
"RTN","XUMFX",119,0)
 .I VUID="SDS" S VALUE=VUID_+VALUE
"RTN","XUMFX",120,0)
 .S RESULT=$$VUID(FILE,FIELD,VUID,VALUE)
"RTN","XUMFX",121,0)
 .I 'RESULT D
"RTN","XUMFX",122,0)
 ..S RESULT="^",ERROR="1^VUID lookup failed on "_VALUE
"RTN","XUMFX",123,0)
 ..D EM("VUID lookup failed on "_VALUE)
"RTN","XUMFX",124,0)
 ;
"RTN","XUMFX",125,0)
 I VALUE["\F\" F  Q:VALUE'["\F\"  D
"RTN","XUMFX",126,0)
 .S VALUE=$P(VALUE,"\F\")_"^"_$P(VALUE,"\F\",2,9999)
"RTN","XUMFX",127,0)
 I VALUE["\T\" F  Q:VALUE'["\T\"  D
"RTN","XUMFX",128,0)
 .S VALUE=$P(VALUE,"\T\")_"&"_$P(VALUE,"\T\",2,9999)
"RTN","XUMFX",129,0)
 ;
"RTN","XUMFX",130,0)
 D VAL^DIE(FILE,IENS,FIELD,,VALUE,.RESULT,,"ERR")
"RTN","XUMFX",131,0)
 I $D(ERR) D EM("validation error",.ERR)
"RTN","XUMFX",132,0)
 I RESULT="^" S ERROR="1^data validation error"
"RTN","XUMFX",133,0)
 ;
"RTN","XUMFX",134,0)
 Q RESULT
"RTN","XUMFX",135,0)
 ;
"RTN","XUMFX",136,0)
EM(ERROR,ERR,XMSUB,XMY) ; -- error message
"RTN","XUMFX",137,0)
 ;
"RTN","XUMFX",138,0)
 N X,XMTEXT,XMDUZ,GROUP
"RTN","XUMFX",139,0)
 ;
"RTN","XUMFX",140,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMFX",141,0)
 ;
"RTN","XUMFX",142,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID"))
"RTN","XUMFX",143,0)
 S X(.2)="",X(.3)=$G(ERROR)
"RTN","XUMFX",144,0)
 S X(.4)="",X(.5)="Key: "_$G(KEY),X(.6)=""
"RTN","XUMFX",145,0)
 S:$G(XMSUB)="" XMSUB="MFS ERROR/WARNING/INFO"
"RTN","XUMFX",146,0)
 S XMY("G.XUMF ERROR")="",XMDUZ=.5
"RTN","XUMFX",147,0)
 S GROUP=$P($G(^DIC(4.001,+IFN,0)),U,6)
"RTN","XUMFX",148,0)
 I GROUP'="" S GROUP="G."_GROUP,XMY(GROUP)=""
"RTN","XUMFX",149,0)
 S XMTEXT="X("
"RTN","XUMFX",150,0)
 ;
"RTN","XUMFX",151,0)
 M ^TMP("XUMF ERROR",$J,$O(^TMP("XUMF ERROR",$J,9999999999999),-1)+1)=X
"RTN","XUMFX",152,0)
 ;
"RTN","XUMFX",153,0)
 D ^XMD
"RTN","XUMFX",154,0)
 ;
"RTN","XUMFX",155,0)
 Q
"RTN","XUMFX",156,0)
 ;
"RTN","XUMFXH")
0^2^B73209889
"RTN","XUMFXH",1,0)
XUMFXH ;ISS/RAM - MFS Handler ;06/28/00
"RTN","XUMFXH",2,0)
 ;;8.0;KERNEL;**299,382,383**;Jul 10, 1995
"RTN","XUMFXH",3,0)
 ;
"RTN","XUMFXH",4,0)
 ; This routine handles Master File HL7 messages.
"RTN","XUMFXH",5,0)
 ;
"RTN","XUMFXH",6,0)
MAIN ; -- entry point
"RTN","XUMFXH",7,0)
 ;
"RTN","XUMFXH",8,0)
 N CNT,ERR,I,X,HLFS,HLCS,ERROR,HLRESLTA,IFN,IEN,MTPE,TYPE,ARRAY
"RTN","XUMFXH",9,0)
 N HDT,KEY,MID,REASON,VALUE,XREF,ALL,GROUP,PARAM,ROOT,SEG,QRD,XUMF
"RTN","XUMFXH",10,0)
 N QID,WHAT,WHO,HLSCS,CDSYS,EXIT,HLREP,NUMBER,Y,XXX,YYY,ERR,XIEN
"RTN","XUMFXH",11,0)
 N XUMFSDS
"RTN","XUMFXH",12,0)
 ;
"RTN","XUMFXH",13,0)
 D INIT,PROCESS,REPLY^XUMFXACK(ERROR),EXIT
"RTN","XUMFXH",14,0)
 ;
"RTN","XUMFXH",15,0)
 Q
"RTN","XUMFXH",16,0)
 ;
"RTN","XUMFXH",17,0)
INIT ; -- initialize
"RTN","XUMFXH",18,0)
 ;
"RTN","XUMFXH",19,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMFXH",20,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXH",21,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J)
"RTN","XUMFXH",22,0)
 ;
"RTN","XUMFXH",23,0)
 S XUMF=1,DUZ(0)="@"
"RTN","XUMFXH",24,0)
 ;
"RTN","XUMFXH",25,0)
 S (ERROR,CNT,TYPE,ARRAY,EXIT)=0
"RTN","XUMFXH",26,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH"))
"RTN","XUMFXH",27,0)
 S HLSCS=$E(HL("ECH"),4),HLREP=$E(HL("ECH"),2)
"RTN","XUMFXH",28,0)
 ;
"RTN","XUMFXH",29,0)
 Q
"RTN","XUMFXH",30,0)
 ;
"RTN","XUMFXH",31,0)
PROCESS ; -- pull message text
"RTN","XUMFXH",32,0)
 ;
"RTN","XUMFXH",33,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFXH",34,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFXH",35,0)
 .Q:"^MSH^MSA^QRD^MFI^MFE^RDF^RDT^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMFXH",36,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFXH",37,0)
 ;
"RTN","XUMFXH",38,0)
 Q
"RTN","XUMFXH",39,0)
 ;
"RTN","XUMFXH",40,0)
MSH ; -- MSH segment
"RTN","XUMFXH",41,0)
 ;
"RTN","XUMFXH",42,0)
 Q
"RTN","XUMFXH",43,0)
 ;
"RTN","XUMFXH",44,0)
MSA ; -- MSA segment
"RTN","XUMFXH",45,0)
 ;
"RTN","XUMFXH",46,0)
 N CODE
"RTN","XUMFXH",47,0)
 ;
"RTN","XUMFXH",48,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMFXH",49,0)
 ;
"RTN","XUMFXH",50,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMFXH",51,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMFXH",52,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",53,0)
 ;
"RTN","XUMFXH",54,0)
 Q
"RTN","XUMFXH",55,0)
 ;
"RTN","XUMFXH",56,0)
MFI ; -- MFI segment
"RTN","XUMFXH",57,0)
 ;
"RTN","XUMFXH",58,0)
 Q:ERROR
"RTN","XUMFXH",59,0)
 Q:EXIT
"RTN","XUMFXH",60,0)
 ;
"RTN","XUMFXH",61,0)
 K IFN,ARRAY,MFI
"RTN","XUMFXH",62,0)
 ;
"RTN","XUMFXH",63,0)
 I $P(HLNODE,HLFS,2)="" D  Q
"RTN","XUMFXH",64,0)
 .S ERROR="1^MFI segment missing Master File Identifier HLNODE: "_HLNODE
"RTN","XUMFXH",65,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",66,0)
 ;
"RTN","XUMFXH",67,0)
 S MFI=$P(HLNODE,HLFS,2),IFN=MFI
"RTN","XUMFXH",68,0)
 S:'IFN IFN=$O(^DIC(4.001,"MFI",$P(MFI,HLCS,2),0))
"RTN","XUMFXH",69,0)
 S IFN=$S(IFN:IFN,MFI="ZMF":4.001,1:0)
"RTN","XUMFXH",70,0)
 I 'IFN D  Q
"RTN","XUMFXH",71,0)
 .S ERROR="1^IFN in MFI could not be resolved HLNODE: "_HLNODE
"RTN","XUMFXH",72,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",73,0)
 ;
"RTN","XUMFXH",74,0)
 ;sds flag=1; 1H is history record (use alt key for owning record)
"RTN","XUMFXH",75,0)
 S XUMFSDS=$S($P(MFI,HLCS,3)="SDS":1,1:0)
"RTN","XUMFXH",76,0)
 I XUMFSDS,MFI["History" S XUMFSDS="1H"
"RTN","XUMFXH",77,0)
 ;
"RTN","XUMFXH",78,0)
 S ARRAY=$S($G(ARRAY):1,$P(HLNODE,HLFS,3)="TEMP":1,1:0)
"RTN","XUMFXH",79,0)
 ;
"RTN","XUMFXH",80,0)
 Q
"RTN","XUMFXH",81,0)
 ;
"RTN","XUMFXH",82,0)
MFE ; -- MFE segment
"RTN","XUMFXH",83,0)
 ;
"RTN","XUMFXH",84,0)
 Q:ERROR
"RTN","XUMFXH",85,0)
 Q:EXIT
"RTN","XUMFXH",86,0)
 ;
"RTN","XUMFXH",87,0)
 K IEN
"RTN","XUMFXH",88,0)
 ;
"RTN","XUMFXH",89,0)
 N PRE,POST
"RTN","XUMFXH",90,0)
 ;
"RTN","XUMFXH",91,0)
 S KEY=$P(HLNODE,HLFS,5) Q:ARRAY
"RTN","XUMFXH",92,0)
 ;
"RTN","XUMFXH",93,0)
 S PRE=$P($G(^DIC(4.001,+IFN,"MFE")),U,16)
"RTN","XUMFXH",94,0)
 I PRE'="" D  Q:$G(EXIT)
"RTN","XUMFXH",95,0)
 .S PRE=PRE_"^XUMFXR"
"RTN","XUMFXH",96,0)
 .D @(PRE)
"RTN","XUMFXH",97,0)
 ;
"RTN","XUMFXH",98,0)
 D MFE^XUMFX(IFN,KEY,HLCS,.IEN,.ERROR) Q:ERROR
"RTN","XUMFXH",99,0)
 ;
"RTN","XUMFXH",100,0)
 S POST=$P($G(^DIC(4.001,+IFN,"MFE")),U,17)
"RTN","XUMFXH",101,0)
 I POST'="" D  Q:$G(EXIT)
"RTN","XUMFXH",102,0)
 .S POST=POST_"^XUMFXR"
"RTN","XUMFXH",103,0)
 .D @(POST)
"RTN","XUMFXH",104,0)
 ;
"RTN","XUMFXH",105,0)
 I 'IEN D  Q
"RTN","XUMFXH",106,0)
 .S ERROR="1^IEN not resolved in MFE File #: "_IFN_" HLNODE: "_HLNODE
"RTN","XUMFXH",107,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",108,0)
 .K ERR
"RTN","XUMFXH",109,0)
 ;
"RTN","XUMFXH",110,0)
 ; clean multiple flag
"RTN","XUMFXH",111,0)
 K:'$D(XIEN(IEN)) XIEN
"RTN","XUMFXH",112,0)
 S XIEN(IEN)=$G(XIEN(IEN))+1
"RTN","XUMFXH",113,0)
 ;
"RTN","XUMFXH",114,0)
 Q
"RTN","XUMFXH",115,0)
 ;
"RTN","XUMFXH",116,0)
RDF ; -- table row definition
"RTN","XUMFXH",117,0)
 ;
"RTN","XUMFXH",118,0)
 Q:ERROR
"RTN","XUMFXH",119,0)
 Q:EXIT
"RTN","XUMFXH",120,0)
 ;
"RTN","XUMFXH",121,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMFXH",122,0)
 ;
"RTN","XUMFXH",123,0)
 N COL,X,Y,Z,DTYP,IDX,SEQ,VUID,DATA,NAME
"RTN","XUMFXH",124,0)
 ;
"RTN","XUMFXH",125,0)
 K ^TMP("XUMF MFS",$J,"PARAM","SEQ")
"RTN","XUMFXH",126,0)
 K ^TMP("XUMF MFS",$J,"PARAM","MULT")
"RTN","XUMFXH",127,0)
 K ^TMP("XUMF MFS",$J,"PARAM","IENS")
"RTN","XUMFXH",128,0)
 ;
"RTN","XUMFXH",129,0)
 K XXX,YYY
"RTN","XUMFXH",130,0)
 ;
"RTN","XUMFXH",131,0)
 D SEGPRSE^XUMFXHL7("HLNODE","XXX")
"RTN","XUMFXH",132,0)
 S NUMBER=XXX(1)
"RTN","XUMFXH",133,0)
 D SEQPRSE^XUMFXHL7("XXX(2)","COL") K XXX
"RTN","XUMFXH",134,0)
 I $O(COL(99999),-1)'=NUMBER D  Q
"RTN","XUMFXH",135,0)
 .S ERROR="1^RDF number of columns error"
"RTN","XUMFXH",136,0)
 .D EM^XUMFX("RDF segment columns don't match number",.ERROR)
"RTN","XUMFXH",137,0)
 ;
"RTN","XUMFXH",138,0)
 ;S NUMBER=$P(HLNODE,HLFS,2)
"RTN","XUMFXH",139,0)
 ;S DATA=$P(HLNODE,HLFS,3)
"RTN","XUMFXH",140,0)
 ;
"RTN","XUMFXH",141,0)
 ;S CNT=0,Y=0
"RTN","XUMFXH",142,0)
 ;F SEQ=1:1:NUMBER D
"RTN","XUMFXH",143,0)
 ;.S Y=Y+1
"RTN","XUMFXH",144,0)
 ;.S Z=$P(DATA,HLREP,Y)
"RTN","XUMFXH",145,0)
 ;.I Y=$L(DATA,HLREP) D
"RTN","XUMFXH",146,0)
 ;..S CNT=$O(HLNODE(CNT))
"RTN","XUMFXH",147,0)
 ;..S DATA=$G(HLNODE(+CNT))
"RTN","XUMFXH",148,0)
 ;..S Z=Z_$P(DATA,HLREP)
"RTN","XUMFXH",149,0)
 ;..S Y=1
"RTN","XUMFXH",150,0)
 ;.S COL(SEQ)=Z
"RTN","XUMFXH",151,0)
 ;
"RTN","XUMFXH",152,0)
 S SEQ=0
"RTN","XUMFXH",153,0)
 F  S SEQ=$O(COL(SEQ)) Q:'SEQ  D
"RTN","XUMFXH",154,0)
 .S NAME=COL(SEQ,1),TYP=COL(SEQ,2) Q:NAME=""
"RTN","XUMFXH",155,0)
 .;S NAME=$P(COL(SEQ),HLCS) Q:NAME=""
"RTN","XUMFXH",156,0)
 .S IDX=$O(^DIC(4.001,+IFN,1,"B",NAME,0)) Q:'IDX
"RTN","XUMFXH",157,0)
 .S DATA=$G(^DIC(4.001,+IFN,1,+IDX,0)) Q:DATA=""
"RTN","XUMFXH",158,0)
 .S YYY(NAME,SEQ)=""
"RTN","XUMFXH",159,0)
 .;
"RTN","XUMFXH",160,0)
 .;N FLD,TYP,SUBFILE,LKUP,REPEAT,CLEAN,TIMEZONE
"RTN","XUMFXH",161,0)
 .;S TYP=$P(DATA,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMFXH",162,0)
 .N FLD,SUBFILE,LKUP,REPEAT,CLEAN,TIMEZONE
"RTN","XUMFXH",163,0)
 .S FLD=$P(DATA,U,2),SUBFILE=$P(DATA,U,4)
"RTN","XUMFXH",164,0)
 .S LKUP=$P(DATA,U,7),TIMEZONE=$P(DATA,U,14)
"RTN","XUMFXH",165,0)
 .S REPEAT=$P(DATA,U,11),CLEAN=$P(DATA,U,12),VUID=$P(DATA,U,13)
"RTN","XUMFXH",166,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"VUID")=VUID
"RTN","XUMFXH",167,0)
 .;
"RTN","XUMFXH",168,0)
 .I 'SUBFILE D  Q
"RTN","XUMFXH",169,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FLD)=TYP_U_LKUP
"RTN","XUMFXH",170,0)
 .;
"RTN","XUMFXH",171,0)
 .; -- multiple field
"RTN","XUMFXH",172,0)
 .;
"RTN","XUMFXH",173,0)
 .I $P(DATA,U,6)'="" D  ;.01 is a field
"RTN","XUMFXH",174,0)
 ..S XXX(SEQ)=$P(DATA,U,6)
"RTN","XUMFXH",175,0)
 .;
"RTN","XUMFXH",176,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")=SUBFILE
"RTN","XUMFXH",177,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")=FLD
"RTN","XUMFXH",178,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")=TYP
"RTN","XUMFXH",179,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"REPEAT")=REPEAT
"RTN","XUMFXH",180,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"CLEAN")=CLEAN
"RTN","XUMFXH",181,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"TIMEZONE")=TIMEZONE
"RTN","XUMFXH",182,0)
 ;
"RTN","XUMFXH",183,0)
 S SEQ=0
"RTN","XUMFXH",184,0)
 F  S SEQ=$O(XXX(SEQ)) Q:'SEQ  D
"RTN","XUMFXH",185,0)
 .S X=XXX(SEQ),Y=$O(YYY(X,0))
"RTN","XUMFXH",186,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=Y
"RTN","XUMFXH",187,0)
 ;
"RTN","XUMFXH",188,0)
 Q
"RTN","XUMFXH",189,0)
 ;
"RTN","XUMFXH",190,0)
RDT ; -- table row data
"RTN","XUMFXH",191,0)
 ;
"RTN","XUMFXH",192,0)
 Q:ERROR
"RTN","XUMFXH",193,0)
 Q:EXIT
"RTN","XUMFXH",194,0)
 ;
"RTN","XUMFXH",195,0)
 K XXX
"RTN","XUMFXH",196,0)
 D SEGPRSE^XUMFXHL7("HLNODE","XXX")
"RTN","XUMFXH",197,0)
 I $O(XXX(99999),-1)'=NUMBER D  Q
"RTN","XUMFXH",198,0)
 .S ERROR="1^RDF/RDT number of columns error"
"RTN","XUMFXH",199,0)
 .D EM^XUMFX("RDF/RDT segment columns don't match number",.ERROR)
"RTN","XUMFXH",200,0)
 ;
"RTN","XUMFXH",201,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMFXH",202,0)
 ;
"RTN","XUMFXH",203,0)
 Q:'IEN
"RTN","XUMFXH",204,0)
 ;
"RTN","XUMFXH",205,0)
 N FDA,IENS,FIELD,ERR,PRE,POST,MULT,FDA1,SEQ,VUID,TIMEZONE
"RTN","XUMFXH",206,0)
 ;
"RTN","XUMFXH",207,0)
 S PRE=$P($G(^DIC(4.001,+IFN,0)),U,4)
"RTN","XUMFXH",208,0)
 I PRE'="" D
"RTN","XUMFXH",209,0)
 .S PRE=PRE_"^XUMFR"
"RTN","XUMFXH",210,0)
 .D @(PRE)
"RTN","XUMFXH",211,0)
 ;
"RTN","XUMFXH",212,0)
 S IENS=IEN_","
"RTN","XUMFXH",213,0)
 S SEQ=0
"RTN","XUMFXH",214,0)
 F  S SEQ=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFXH",215,0)
 .S FIELD=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,0))
"RTN","XUMFXH",216,0)
 .S VUID=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"VUID"))
"RTN","XUMFXH",217,0)
 .S TIMEZONE=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"TIMEZONE"))
"RTN","XUMFXH",218,0)
 .I 'FIELD D SUBFILE Q
"RTN","XUMFXH",219,0)
 .S TYP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FIELD))
"RTN","XUMFXH",220,0)
 .S VALUE=$$VALUE()
"RTN","XUMFXH",221,0)
 .S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMFXH",222,0)
 .S VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,IENS) Q:VALUE="^"
"RTN","XUMFXH",223,0)
 .S FDA(IFN,IENS,FIELD)=VALUE
"RTN","XUMFXH",224,0)
 ;
"RTN","XUMFXH",225,0)
 M FDA=FDA1
"RTN","XUMFXH",226,0)
 ;
"RTN","XUMFXH",227,0)
 D:$D(FDA) FILE^DIE(,"FDA","ERR")
"RTN","XUMFXH",228,0)
 I $D(ERR) D
"RTN","XUMFXH",229,0)
 .S ERROR="1^updating error"
"RTN","XUMFXH",230,0)
 .D EM^XUMFX("file DIE call error message in RDT",.ERR)
"RTN","XUMFXH",231,0)
 .K ERR
"RTN","XUMFXH",232,0)
 ;
"RTN","XUMFXH",233,0)
 S POST=$P($G(^DIC(4.001,+IFN,0)),U,5)
"RTN","XUMFXH",234,0)
 I POST'="" D
"RTN","XUMFXH",235,0)
 .S POST=POST_"^XUMFR"
"RTN","XUMFXH",236,0)
 .D @(POST)
"RTN","XUMFXH",237,0)
 ;
"RTN","XUMFXH",238,0)
 Q
"RTN","XUMFXH",239,0)
 ;
"RTN","XUMFXH",240,0)
SUBFILE ; -- process subfile record
"RTN","XUMFXH",241,0)
 ;
"RTN","XUMFXH",242,0)
 N IFN,IENS1,KEY1,FIELD,TYP,MKEY,ERR,REPEAT,CLEAN
"RTN","XUMFXH",243,0)
 ;
"RTN","XUMFXH",244,0)
 S IFN=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")
"RTN","XUMFXH",245,0)
 S FIELD=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")
"RTN","XUMFXH",246,0)
 S TYP=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")
"RTN","XUMFXH",247,0)
 S REPEAT=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"REPEAT")
"RTN","XUMFXH",248,0)
 S CLEAN=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"CLEAN")
"RTN","XUMFXH",249,0)
 ;
"RTN","XUMFXH",250,0)
 I CLEAN,$G(XIEN(IEN))'>1 D
"RTN","XUMFXH",251,0)
 .N ROOT,IDX
"RTN","XUMFXH",252,0)
 .S ROOT=$$ROOT^DILFD(IFN,","_IENS,1)
"RTN","XUMFXH",253,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMFXH",254,0)
 ..D
"RTN","XUMFXH",255,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMFXH",256,0)
 ;
"RTN","XUMFXH",257,0)
 S VALUE=$$VALUE()
"RTN","XUMFXH",258,0)
 S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMFXH",259,0)
 ;
"RTN","XUMFXH",260,0)
 S MULT=$G(^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ))
"RTN","XUMFXH",261,0)
 ;
"RTN","XUMFXH",262,0)
 I MULT=SEQ Q:VALUE=""  D
"RTN","XUMFXH",263,0)
 .N FDA,IEN
"RTN","XUMFXH",264,0)
 .S VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMFXH",265,0)
 .S FDA(IFN,"?+1,"_IENS,.01)=VALUE
"RTN","XUMFXH",266,0)
 .D UPDATE^DIE(,"FDA","IEN","ERR")
"RTN","XUMFXH",267,0)
 .I $D(ERR) D  Q
"RTN","XUMFXH",268,0)
 ..S ERROR="1^subfile update error SUBFILE#: "_IFN
"RTN","XUMFXH",269,0)
 ..D EM^XUMFX("update DIE call error message in SUBFILE",.ERR)
"RTN","XUMFXH",270,0)
 ..K ERR
"RTN","XUMFXH",271,0)
 .S IENS1=IEN(1)_","_IENS,MULT(SEQ)=IENS1
"RTN","XUMFXH",272,0)
 ;
"RTN","XUMFXH",273,0)
 I MULT,MULT'=SEQ S IENS1=$G(MULT(+MULT)) Q:IENS1=""
"RTN","XUMFXH",274,0)
 S:MULT'=SEQ VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMFXH",275,0)
 S:$D(IENS1) FDA1(IFN,IENS1,FIELD)=VALUE
"RTN","XUMFXH",276,0)
 ;
"RTN","XUMFXH",277,0)
 Q
"RTN","XUMFXH",278,0)
 ;
"RTN","XUMFXH",279,0)
VALUE() ; -- handle HL7 continuation nodes
"RTN","XUMFXH",280,0)
 ;
"RTN","XUMFXH",281,0)
 Q:'$O(HLNODE(0)) $P(HLNODE,HLFS,SEQ+1)
"RTN","XUMFXH",282,0)
 ;
"RTN","XUMFXH",283,0)
 N COL
"RTN","XUMFXH",284,0)
 ;
"RTN","XUMFXH",285,0)
 D SEGPRSE^XUMFXHL7("HLNODE","COL")
"RTN","XUMFXH",286,0)
 ;
"RTN","XUMFXH",287,0)
 Q COL(SEQ)
"RTN","XUMFXH",288,0)
 ;
"RTN","XUMFXH",289,0)
ARRAY ; -- query data stored in array (not filed)
"RTN","XUMFXH",290,0)
 ;
"RTN","XUMFXH",291,0)
 N X S X=KEY S X=$S($P(X,HLCS)'="":$P(X,HLCS),1:$P(X,HLCS,4)) Q:X=""
"RTN","XUMFXH",292,0)
 ;
"RTN","XUMFXH",293,0)
 M ^TMP("XUMF ARRAY",$J,IFN,X)=HLNODE
"RTN","XUMFXH",294,0)
 ;
"RTN","XUMFXH",295,0)
 Q
"RTN","XUMFXH",296,0)
 ;
"RTN","XUMFXH",297,0)
EXIT ; -- cleanup, and quit
"RTN","XUMFXH",298,0)
 ;
"RTN","XUMFXH",299,0)
 ; post processing logic
"RTN","XUMFXH",300,0)
 S X=$G(^DIC(4.001,+IFN,2)) X:X'="" X
"RTN","XUMFXH",301,0)
 ;
"RTN","XUMFXH",302,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J),^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXH",303,0)
 ;
"RTN","XUMFXH",304,0)
 K ^TMP("XUMF MFS",$J),^TMP("XUMF ERROR",$J)
"RTN","XUMFXH",305,0)
 ;
"RTN","XUMFXH",306,0)
 Q
"RTN","XUMFXH",307,0)
 ;
"SEC","^DIC",4.009,4.009,0,"AUDIT")
@
"SEC","^DIC",4.009,4.009,0,"DD")
@
"SEC","^DIC",4.009,4.009,0,"DEL")
@
"SEC","^DIC",4.009,4.009,0,"LAYGO")
@
"SEC","^DIC",4.009,4.009,0,"RD")
@
"SEC","^DIC",4.009,4.009,0,"WR")
@
"VER")
8.0^22.0
"^DD",4.001,4.001,0)
FIELD^^4.9^23
"^DD",4.001,4.001,0,"DDA")
N
"^DD",4.001,4.001,0,"DT")
3050516
"^DD",4.001,4.001,0,"IX","B",4.001,.01)

"^DD",4.001,4.001,0,"IX","MFI",4.001,.03)

"^DD",4.001,4.001,0,"IX","ZZZ",4.001,.02)

"^DD",4.001,4.001,0,"NM","MASTER FILE PARAMETERS")

"^DD",4.001,4.001,0,"VRPK")
XU
"^DD",4.001,4.001,.01,0)
MASTER FILE^RP1X^DIC(^0;1^S DINUM=X
"^DD",4.001,4.001,.01,1,0)
^.1
"^DD",4.001,4.001,.01,1,1,0)
4.001^B
"^DD",4.001,4.001,.01,1,1,1)
S ^DIC(4.001,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.01,1,1,2)
K ^DIC(4.001,"B",$E(X,1,30),DA)
"^DD",4.001,4.001,.01,3)
Select file to be supported by the Master File Server (MFS) mechanism.
"^DD",4.001,4.001,.01,21,0)
^^3^3^3031223^
"^DD",4.001,4.001,.01,21,1,0)
This field is the Internal File Number (IFN) of the
"^DD",4.001,4.001,.01,21,2,0)
Master File table supported by the Master File Server
"^DD",4.001,4.001,.01,21,3,0)
(MFS).
"^DD",4.001,4.001,.01,"DT")
3031226
"^DD",4.001,4.001,.02,0)
SEGMENT NAME^RFX^^0;2^K:$L(X)>3!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.02,1,0)
^.1
"^DD",4.001,4.001,.02,1,1,0)
4.001^ZZZ
"^DD",4.001,4.001,.02,1,1,1)
S ^DIC(4.001,"ZZZ",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.02,1,1,2)
K ^DIC(4.001,"ZZZ",$E(X,1,30),DA)
"^DD",4.001,4.001,.02,1,1,"%D",0)
^^3^3^3031223^
"^DD",4.001,4.001,.02,1,1,"%D",1,0)
This x-ref is the segment name.  The MFS handler
"^DD",4.001,4.001,.02,1,1,"%D",2,0)
checks incoming message data segments against this
"^DD",4.001,4.001,.02,1,1,"%D",3,0)
x-ref to verify the file is supported.
"^DD",4.001,4.001,.02,1,1,"DT")
3031223
"^DD",4.001,4.001,.02,3)
Enter the HL7 data segment or Z segment name.
"^DD",4.001,4.001,.02,21,0)
^^2^2^3031223^
"^DD",4.001,4.001,.02,21,1,0)
This field holds the name of the HL7 data segment
"^DD",4.001,4.001,.02,21,2,0)
that hold the actual table values.
"^DD",4.001,4.001,.02,"DT")
3031226
"^DD",4.001,4.001,.03,0)
MFI CODE^RFX^^0;3^K:$L(X)>60!($L(X)<2) X
"^DD",4.001,4.001,.03,1,0)
^.1
"^DD",4.001,4.001,.03,1,1,0)
4.001^MFI
"^DD",4.001,4.001,.03,1,1,1)
S ^DIC(4.001,"MFI",$E(X,1,60),DA)=""
"^DD",4.001,4.001,.03,1,1,2)
K ^DIC(4.001,"MFI",$E(X,1,60),DA)
"^DD",4.001,4.001,.03,1,1,"%D",0)
^^1^1^3031223^
"^DD",4.001,4.001,.03,1,1,"%D",1,0)
This x-ref is the Master File Identifier (MFI).
"^DD",4.001,4.001,.03,1,1,"DT")
3031223
"^DD",4.001,4.001,.03,3)
Answer must be 2-60 characters in length.
"^DD",4.001,4.001,.03,21,0)
^^1^1^3031224^^
"^DD",4.001,4.001,.03,21,1,0)
This code identifies the master file.
"^DD",4.001,4.001,.03,"DT")
3041220
"^DD",4.001,4.001,.04,0)
PRE-UPDATE ROUTINE^RFX^^0;4^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.04,3)
Enter the label of sub-routine in XUMFR to be executed prior to the MFS update.
"^DD",4.001,4.001,.04,21,0)
^^20^20^3031226^^^
"^DD",4.001,4.001,.04,21,1,0)
This field holds the label of the 
"^DD",4.001,4.001,.04,21,2,0)
sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.04,21,3,0)
before an update by the MFS for a
"^DD",4.001,4.001,.04,21,4,0)
data type segment.  
"^DD",4.001,4.001,.04,21,5,0)
                                 
"^DD",4.001,4.001,.04,21,6,0)
Enter the label without '^XUMFR'.  The
"^DD",4.001,4.001,.04,21,7,0)
sub-routine can assume the presence of the
"^DD",4.001,4.001,.04,21,8,0)
variables IFN and IEN.  All local variables
"^DD",4.001,4.001,.04,21,9,0)
within the sub-routine must be NEW'd 
"^DD",4.001,4.001,.04,21,10,0)
before using them.
"^DD",4.001,4.001,.04,21,11,0)
                                 
"^DD",4.001,4.001,.04,21,12,0)
The default value for this field is 
"^DD",4.001,4.001,.04,21,13,0)
'PRE'.  The PRE sub-routine builds
"^DD",4.001,4.001,.04,21,14,0)
the current values of the entry in
"^DD",4.001,4.001,.04,21,15,0)
question (associated with the IEN)
"^DD",4.001,4.001,.04,21,16,0)
into an array (^TMP("XUMF PRE",$J,SEQ)
"^DD",4.001,4.001,.04,21,17,0)
=fieldLabel_": "_value). 
"^DD",4.001,4.001,.04,21,18,0)

"^DD",4.001,4.001,.04,21,19,0)
This field is required, so if you have
"^DD",4.001,4.001,.04,21,20,0)
no processing use NULL.
"^DD",4.001,4.001,.04,"DT")
3031226
"^DD",4.001,4.001,.05,0)
POST-UPDATE ROUTINE^FX^^0;5^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.05,3)
Enter the label of sub-routine in XUMFR to be executed after MFS updates.
"^DD",4.001,4.001,.05,21,0)
^.001^18^18^3050516^^^^
"^DD",4.001,4.001,.05,21,1,0)
This field holds the label of the sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.05,21,2,0)
after an update by the MFS for a data type segment.
"^DD",4.001,4.001,.05,21,3,0)
 
"^DD",4.001,4.001,.05,21,4,0)
Enter the label without '^XUMFR'.  The sub-routine can assume the presence
"^DD",4.001,4.001,.05,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,.05,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,.05,21,7,0)
 
"^DD",4.001,4.001,.05,21,8,0)
The default value for this field is 'POST'.  The POST sub-routine builds
"^DD",4.001,4.001,.05,21,9,0)
the new values of the entry in question (associated with the IEN) and
"^DD",4.001,4.001,.05,21,10,0)
compares them against the previous values (prior to update) to determine
"^DD",4.001,4.001,.05,21,11,0)
if any values changed.  If the values have changed a MailMan notification
"^DD",4.001,4.001,.05,21,12,0)
is sent to the XUMF SERVER mail group and the group identified by MAIL
"^DD",4.001,4.001,.05,21,13,0)
GROUP of this MASTER FILE PARAMERS entry.
"^DD",4.001,4.001,.05,21,14,0)
 
"^DD",4.001,4.001,.05,21,15,0)
Note: if the post-update routine calls POST^XUMFR then pre-update routine
"^DD",4.001,4.001,.05,21,16,0)
must call PRE^XUMFR.
"^DD",4.001,4.001,.05,21,17,0)

"^DD",4.001,4.001,.05,21,18,0)
This field is required, so if you have no processing use NULL.
"^DD",4.001,4.001,.05,"DT")
3050516
"^DD",4.001,4.001,.06,0)
MAIL GROUP^P3.8X^XMB(3.8,^0;6^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.06,3)
Enter the mail group that will receive update notifications.
"^DD",4.001,4.001,.06,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,.06,21,1,0)
This mail group will be notified when an HL7 unsolicited update
"^DD",4.001,4.001,.06,21,2,0)
message is received from the MFS server.  This group will be notified
"^DD",4.001,4.001,.06,21,3,0)
in addition to the group XUMF SERVER.
"^DD",4.001,4.001,.06,"DT")
3031226
"^DD",4.001,4.001,.07,0)
POST-PROCESSING LOGIC^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,.07,3)
This is Standard MUMPS code that gets executed after message processing.
"^DD",4.001,4.001,.07,9)
@
"^DD",4.001,4.001,.07,21,0)
^.001^1^1^3050225^^
"^DD",4.001,4.001,.07,21,1,0)
This is Standard MUMPS code that gets executed after message processing.
"^DD",4.001,4.001,.07,"DT")
3050225
"^DD",4.001,4.001,1,0)
COLUMN^4.011^^1;0
"^DD",4.001,4.001,1,21,0)
^.001^4^4^3040420^^^^
"^DD",4.001,4.001,1,21,1,0)
The COLUMN DESCRIPTION multiple maps the data type segment fields
"^DD",4.001,4.001,1,21,2,0)
and components to FileMan fields for a standard table.  There are
"^DD",4.001,4.001,1,21,3,0)
additional fields within the sub-file to handle multiple field types
"^DD",4.001,4.001,1,21,4,0)
and extended references.
"^DD",4.001,4.001,1,"DT")
3040420
"^DD",4.001,4.001,4.1,0)
MFE ID FIELD^RRNJ17,7X^^MFE;1^Q
"^DD",4.001,4.001,4.1,3)
Enter the field # that corresponds to the PKV id.
"^DD",4.001,4.001,4.1,21,0)
^^5^5^3031224^
"^DD",4.001,4.001,4.1,21,1,0)
This field holds the field number that corresponds to the ID
"^DD",4.001,4.001,4.1,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.1,21,3,0)
 
"^DD",4.001,4.001,4.1,21,4,0)
This field # is the SDS field added to the file to store the internal
"^DD",4.001,4.001,4.1,21,5,0)
identifier to the SDS database.
"^DD",4.001,4.001,4.1,"DT")
3031230
"^DD",4.001,4.001,4.11,0)
MFE ID TYPE^RP771.4'X^HL(771.4,^MFE;11^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.11,3)
Enter HL7 data type.
"^DD",4.001,4.001,4.11,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.11,21,1,0)
MFE ID HL7 data type.
"^DD",4.001,4.001,4.11,"DT")
3031226
"^DD",4.001,4.001,4.12,0)
MFE TEXT TYPE^RP771.4'X^HL(771.4,^MFE;12^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.12,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.12,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.12,21,1,0)
Enter the MFE TEXT HL7 data type.
"^DD",4.001,4.001,4.12,"DT")
3031226
"^DD",4.001,4.001,4.14,0)
MFE ALT ID TYPE^RP771.4'X^HL(771.4,^MFE;14^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.14,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.14,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.14,21,1,0)
Enter the MFE ID HL7 data type.
"^DD",4.001,4.001,4.14,"DT")
3031226
"^DD",4.001,4.001,4.15,0)
MFE ALT TEXT TYPE^RP771.4'X^HL(771.4,^MFE;15^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.15,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.15,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.15,21,1,0)
Enter the MFE ALT TEXT HL7 data type.
"^DD",4.001,4.001,4.15,"DT")
3031226
"^DD",4.001,4.001,4.16,0)
MFE PRE-UPDATE ROUTINE^RFX^^MFE;16^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.16,3)
Enter the subroutine label that executes prior to MFE.
"^DD",4.001,4.001,4.16,21,0)
^.001^6^6^3050516^^
"^DD",4.001,4.001,4.16,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.16,21,2,0)
before an update by the MFS for an MFE segment.
"^DD",4.001,4.001,4.16,21,3,0)
 
"^DD",4.001,4.001,4.16,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.16,21,5,0)
of the variable IFN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.16,21,6,0)
must be NEW'd before using the.
"^DD",4.001,4.001,4.16,"DT")
3031226
"^DD",4.001,4.001,4.17,0)
MFE POST-UPDATE ROUTINE^RFX^^MFE;17^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.17,3)
Enter the subroutine label that executes after the MFE segment.
"^DD",4.001,4.001,4.17,21,0)
^.001^6^6^3050516^^
"^DD",4.001,4.001,4.17,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.17,21,2,0)
after an update by the MFS for an MFE segment.                             
"^DD",4.001,4.001,4.17,21,3,0)
 
"^DD",4.001,4.001,4.17,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.17,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.17,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,4.17,"DT")
3031226
"^DD",4.001,4.001,4.2,0)
MFE TEXT FIELD^RNJ17,7X^^MFE;2^Q
"^DD",4.001,4.001,4.2,3)
Enter the field # that corresponds to the PKV text.
"^DD",4.001,4.001,4.2,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.2,21,1,0)
This field holds the field number that corresponds to the TEXT
"^DD",4.001,4.001,4.2,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.2,"DT")
3031230
"^DD",4.001,4.001,4.3,0)
MFE CODSYS^RFX^^MFE;3^K:$L(X)>20!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.3,3)
Enter the coding system for the MFE ID.
"^DD",4.001,4.001,4.3,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.3,21,1,0)
This field holds the coding system that corresponds to the ID
"^DD",4.001,4.001,4.3,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.3,"DT")
3031226
"^DD",4.001,4.001,4.4,0)
MFE ALT ID FIELD^RNJ17,7X^^MFE;4^Q
"^DD",4.001,4.001,4.4,3)
Enter the field # that corresponds to the PKV alternate id.
"^DD",4.001,4.001,4.4,21,0)
^^7^7^3031224^
"^DD",4.001,4.001,4.4,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.4,21,2,0)
alternate ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.4,21,3,0)
 
"^DD",4.001,4.001,4.4,21,4,0)
The field # should be a key field to the file (not the SDS identifier
"^DD",4.001,4.001,4.4,21,5,0)
field).  This field will be used by MFS to determine which entry in
"^DD",4.001,4.001,4.4,21,6,0)
the file corresponds to the PKV id if it hasn't been already associated.
"^DD",4.001,4.001,4.4,21,7,0)
Ideally, this field is a unique key to the file.
"^DD",4.001,4.001,4.4,"DT")
3031230
"^DD",4.001,4.001,4.5,0)
MFE ALT TEXT FIELD^RNJ17,7X^^MFE;5^Q
"^DD",4.001,4.001,4.5,3)
Enter the field # that corresponds to the PKV alternate text.
"^DD",4.001,4.001,4.5,21,0)
^^2^2^3031224^
"^DD",4.001,4.001,4.5,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.5,21,2,0)
alternate TEXT of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.5,"DT")
3031230
"^DD",4.001,4.001,4.6,0)
MFE ALT CODSYS^RFX^^MFE;6^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.6,3)
Enter the alternate coding system of the PKV.
"^DD",4.001,4.001,4.6,21,0)
^.001^2^2^3050331^^
"^DD",4.001,4.001,4.6,21,1,0)
This field holds the alternate coding system that corresponds
"^DD",4.001,4.001,4.6,21,2,0)
to the ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.6,"DT")
3031226
"^DD",4.001,4.001,4.7,0)
MFE PKV TYPE^RP771.4'X^HL(771.4,^MFE;7^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.7,3)
Enter the PKV type (i.e., CE or PL) CE or Composite Element.
"^DD",4.001,4.001,4.7,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,4.7,21,1,0)
This field holds the Primary Key Value data
"^DD",4.001,4.001,4.7,21,2,0)
type.  Valid values stored in HL7 Table 0355 -
"^DD",4.001,4.001,4.7,21,3,0)
Primary key value type.
"^DD",4.001,4.001,4.7,"DT")
3031226
"^DD",4.001,4.001,4.8,0)
MFE PKV X-REF^RFX^^MFE;8^K:$L(X)>10!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.8,3)
Enter the FM x-ref of non-SDS key field - MFE.4.4
"^DD",4.001,4.001,4.8,21,0)
^^6^6^3031224^^
"^DD",4.001,4.001,4.8,21,1,0)
This field hold the FileMan cross-reference of
"^DD",4.001,4.001,4.8,21,2,0)
the Primary Key Value (PKV).
"^DD",4.001,4.001,4.8,21,3,0)
 
"^DD",4.001,4.001,4.8,21,4,0)
Since MFE.4.1 is the SDS internal identifier then provide
"^DD",4.001,4.001,4.8,21,5,0)
the alternate ID (MFE.4.4) cross-reference.  The natural
"^DD",4.001,4.001,4.8,21,6,0)
FileMan key x-ref that corresponds to the alt id.
"^DD",4.001,4.001,4.8,"DT")
3031226
"^DD",4.001,4.001,4.9,0)
ASSIGNING AUTHORITY^RFX^^MFE;9^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.9,3)
Enter the entity responsible for assigning IDs for coding system.
"^DD",4.001,4.001,4.9,21,0)
^^11^11^3031226^^^
"^DD",4.001,4.001,4.9,21,1,0)
This field holds the assigning authority responsible for
"^DD",4.001,4.001,4.9,21,2,0)
the code system used in the HL7 MFE PKV segment sequence.
"^DD",4.001,4.001,4.9,21,3,0)
 
"^DD",4.001,4.001,4.9,21,4,0)
See QRD segment.  Who Subject Filter.
"^DD",4.001,4.001,4.9,21,5,0)

"^DD",4.001,4.001,4.9,21,6,0)
This field holds the code that identifies the standards
"^DD",4.001,4.001,4.9,21,7,0)
body, or in the case of VA specific data the routing
"^DD",4.001,4.001,4.9,21,8,0)
symbol (or other identifying code) of the data owner of
"^DD",4.001,4.001,4.9,21,9,0)
steward.
"^DD",4.001,4.001,4.9,21,10,0)

"^DD",4.001,4.001,4.9,21,11,0)
If all else fails, use 'VA' as the code.
"^DD",4.001,4.001,4.9,"DT")
3031226
"^DD",4.001,4.011,0)
COLUMN SUB-FIELD^^.14^12
"^DD",4.001,4.011,0,"DT")
3050317
"^DD",4.001,4.011,0,"IX","B",4.011,.01)

"^DD",4.001,4.011,0,"NM","COLUMN")

"^DD",4.001,4.011,0,"UP")
4.001
"^DD",4.001,4.011,.01,0)
COLUMN DESCRIPTION^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.01,1,0)
^.1
"^DD",4.001,4.011,.01,1,1,0)
4.011^B
"^DD",4.001,4.011,.01,1,1,1)
S ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.011,.01,1,1,2)
K ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.001,4.011,.01,3)
Answer must be 1-40 characters in length.
"^DD",4.001,4.011,.01,21,0)
^.001^21^21^3040420^^^^
"^DD",4.001,4.011,.01,21,1,0)
The column description is the identifier that
"^DD",4.001,4.011,.01,21,2,0)
names the data element that gets mapped to a
"^DD",4.001,4.011,.01,21,3,0)
FileMan field.  The RDF segment (table row 
"^DD",4.001,4.011,.01,21,4,0)
definition) has a field (the 3rd sequence) that
"^DD",4.001,4.011,.01,21,5,0)
is a repeating element.  The 1st component of
"^DD",4.001,4.011,.01,21,6,0)
the element is the column description.  It is
"^DD",4.001,4.011,.01,21,7,0)
the column name in central repository master
"^DD",4.001,4.011,.01,21,8,0)
table.
"^DD",4.001,4.011,.01,21,9,0)

"^DD",4.001,4.011,.01,21,10,0)
(The 2nd component is the HL7 data type.  The
"^DD",4.001,4.011,.01,21,11,0)
3rd component is the length of the field.) 
"^DD",4.001,4.011,.01,21,12,0)
                                
"^DD",4.001,4.011,.01,21,13,0)
The RDF segment defines the format of
"^DD",4.001,4.011,.01,21,14,0)
subsequent RDT segment (table row data).  The
"^DD",4.001,4.011,.01,21,15,0)
sequence of column description fields in the
"^DD",4.001,4.011,.01,21,16,0)
RDF segment maps the sequence of the
"^DD",4.001,4.011,.01,21,17,0)
corresponding data values in the RDT segment.
"^DD",4.001,4.011,.01,21,18,0)

"^DD",4.001,4.011,.01,21,19,0)
(The 2nd field of the RDF segment is the number
"^DD",4.001,4.011,.01,21,20,0)
of columns or data elements passed in the RDF
"^DD",4.001,4.011,.01,21,21,0)
and RDT segments.) 
"^DD",4.001,4.011,.01,"DT")
3040420
"^DD",4.001,4.011,.02,0)
FIELD NUMBER^RNJ17,7X^^0;2^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8N.N) X ;  K:'$$ECHO^XUMF(DA(1),DA,X,+$G(XUMF)) X
"^DD",4.001,4.011,.02,3)
Enter the field number for the data element.
"^DD",4.001,4.011,.02,21,0)
^.001^6^6^3031224^^^
"^DD",4.001,4.011,.02,21,1,0)
This field holds the FileMan field number that corresponds to
"^DD",4.001,4.011,.02,21,2,0)
the segment sequence number in question.
"^DD",4.001,4.011,.02,21,3,0)
 
"^DD",4.001,4.011,.02,21,4,0)
If this sequence component maps to a FileMan sub-file (multiple)
"^DD",4.001,4.011,.02,21,5,0)
then the SUBFILE NUMBER (#.04) is required before FIELD NUMBER to
"^DD",4.001,4.011,.02,21,6,0)
be able to validate (input transform.)
"^DD",4.001,4.011,.02,"DT")
3040420
"^DD",4.001,4.011,.03,0)
HL7 DATA TYPE^RP771.4'X^HL(771.4,^0;3^;K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.03,3)
Enter the HL7 data type.
"^DD",4.001,4.011,.03,21,0)
^^1^1^3031224^
"^DD",4.001,4.011,.03,21,1,0)
This field holds the HL7 data type of the sequence.
"^DD",4.001,4.011,.03,"DT")
3040420
"^DD",4.001,4.011,.04,0)
SUBFILE NUMBER^NJ17,7X^^0;4^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.04,3)
If multiple field, enter sub-file number.
"^DD",4.001,4.011,.04,21,0)
^^2^2^3031224^
"^DD",4.001,4.011,.04,21,1,0)
This field holds the FileMan sub-file number.  ONLY if FIELD NUMBER
"^DD",4.001,4.011,.04,21,2,0)
relates to a field in a multiple.
"^DD",4.001,4.011,.04,"DT")
3031226
"^DD",4.001,4.011,.05,0)
SUBFILE LKUP LITERAL^FX^^0;5^K:$L(X)>30!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.05,3)
If subfile and .01 not in HL7 segment, enter literal value of the .01
"^DD",4.001,4.011,.05,21,0)
^^9^9^3031224^^
"^DD",4.001,4.011,.05,21,1,0)
If this sequence is a field in a subfile and the .01 of the multiple
"^DD",4.001,4.011,.05,21,2,0)
is not included in the HL7 segment but is some literal, then provide
"^DD",4.001,4.011,.05,21,3,0)
the literal string here.
"^DD",4.001,4.011,.05,21,4,0)
 
"^DD",4.001,4.011,.05,21,5,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.05,21,6,0)
be NULL.
"^DD",4.001,4.011,.05,21,7,0)

"^DD",4.001,4.011,.05,21,8,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.05,21,9,0)
be NULL.
"^DD",4.001,4.011,.05,"DT")
3031226
"^DD",4.001,4.011,.06,0)
SUBFILE LKUP COLUMN^F^^0;6^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.06,3)
Enter the COLUMN DESCRIPTION identifier that is the lookup (.01) to this field
"^DD",4.001,4.011,.06,21,0)
^.001^11^11^3050519^^^^
"^DD",4.001,4.011,.06,21,1,0)
If the FIELD NUMBER is associated with a multiple field, then this
"^DD",4.001,4.011,.06,21,2,0)
field holds the COLUMN DESCRIPTION of the .01 field of the multiple. 
"^DD",4.001,4.011,.06,21,3,0)
 
"^DD",4.001,4.011,.06,21,4,0)
If the .01 field is not a sequence, then leave this field blank and
"^DD",4.001,4.011,.06,21,5,0)
provide a value for SUBFILE LKUP LITERAL.
"^DD",4.001,4.011,.06,21,6,0)
 
"^DD",4.001,4.011,.06,21,7,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.06,21,8,0)
be NULL.
"^DD",4.001,4.011,.06,21,9,0)

"^DD",4.001,4.011,.06,21,10,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.06,21,11,0)
be NULL.
"^DD",4.001,4.011,.06,"DT")
3040525
"^DD",4.001,4.011,.07,0)
EXTENDED POINTER LKUP^NJ17,7X^^0;7^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.07,3)
Enter the field number which is the key to the extended reference of FIELD NAME if other than .01
"^DD",4.001,4.011,.07,21,0)
^.001^8^8^3050516^^
"^DD",4.001,4.011,.07,21,1,0)
If FIELD NUMBER is a pointer and you want to look-up
"^DD",4.001,4.011,.07,21,2,0)
the entry by a field other than its .01, then enter
"^DD",4.001,4.011,.07,21,3,0)
that field number.
"^DD",4.001,4.011,.07,21,4,0)

"^DD",4.001,4.011,.07,21,5,0)
Example: Parent facility, in the association multiple
"^DD",4.001,4.011,.07,21,6,0)
of the Institution file points to Institution.  The
"^DD",4.001,4.011,.07,21,7,0)
Institution NAME may not be unique.  It would be more
"^DD",4.001,4.011,.07,21,8,0)
useful to look-up the Institution by STATION NUMBER.
"^DD",4.001,4.011,.07,"DT")
3031226
"^DD",4.001,4.011,.09,0)
COLUMN LENGTH^RNJ2,0^^0;9^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",4.001,4.011,.09,3)
Type the maximum column width
"^DD",4.001,4.011,.09,21,0)
^.001^4^4^3040525^^^^
"^DD",4.001,4.011,.09,21,1,0)
This field holds the maximum column width of the column in question.
"^DD",4.001,4.011,.09,21,2,0)
The column description is the 3rd sequence of the RDF segment.  It
"^DD",4.001,4.011,.09,21,3,0)
is a repeating element.  The maximum column width is the 3rd component
"^DD",4.001,4.011,.09,21,4,0)
of the element.
"^DD",4.001,4.011,.09,"DT")
3040525
"^DD",4.001,4.011,.11,0)
REPEATING FIELD^S^1:YES;0:NO;^0;11^Q
"^DD",4.001,4.011,.11,21,0)
^^5^5^3040817^
"^DD",4.001,4.011,.11,21,1,0)
If this field is repeating - a single valued multiple (a multiple
"^DD",4.001,4.011,.11,21,2,0)
field with only a .01 field) - field, then set the flag to YES.
"^DD",4.001,4.011,.11,21,3,0)

"^DD",4.001,4.011,.11,21,4,0)
If the multiple should be cleaned out first, then also set the CLEAN
"^DD",4.001,4.011,.11,21,5,0)
MULTIPLE flag too.
"^DD",4.001,4.011,.11,"DT")
3040817
"^DD",4.001,4.011,.12,0)
CLEAN MULTIPLE^S^1:YES;0:NO;^0;12^Q
"^DD",4.001,4.011,.12,3)
delete existing values before updating
"^DD",4.001,4.011,.12,21,0)
^^6^6^3040817^
"^DD",4.001,4.011,.12,21,1,0)
If this field is a single valued repeating element (see REPEATING FIELD)
"^DD",4.001,4.011,.12,21,2,0)
and the existing values should be deleted before the update occurs, then
"^DD",4.001,4.011,.12,21,3,0)
set this flag to YES.
"^DD",4.001,4.011,.12,21,4,0)

"^DD",4.001,4.011,.12,21,5,0)
By setting this flag, you indicate all the valid data is contained within
"^DD",4.001,4.011,.12,21,6,0)
the incoming message, so purge existing values and start clean.
"^DD",4.001,4.011,.12,"DT")
3040817
"^DD",4.001,4.011,.13,0)
VUID PREFIX^F^^0;13^K:$L(X)>10!($L(X)<1) X
"^DD",4.001,4.011,.13,3)
Enter string (i.e. "VUID") to indicate VUID value is passed instead of VALUE
"^DD",4.001,4.011,.13,21,0)
^.001^7^7^3050516^^
"^DD",4.001,4.011,.13,21,1,0)
String indicates that the field is a Pointer, and
"^DD",4.001,4.011,.13,21,2,0)
the VUID may be used instead of the value (.01).
"^DD",4.001,4.011,.13,21,3,0)

"^DD",4.001,4.011,.13,21,4,0)
Example:  Instead of Drug Class name, you may be use
"^DD",4.001,4.011,.13,21,5,0)
the VUID of the drug class such as "VUID123456", where
"^DD",4.001,4.011,.13,21,6,0)
123456 is the VUID of the Drug Class and "VUID" is the
"^DD",4.001,4.011,.13,21,7,0)
prefix.
"^DD",4.001,4.011,.13,"DT")
3041019
"^DD",4.001,4.011,.14,0)
TIME ZONE FLAG^S^L:LOCAL;U:UTC;^0;14^Q
"^DD",4.001,4.011,.14,3)
Should the local or UTC time be filed?
"^DD",4.001,4.011,.14,21,0)
^.001^7^7^3050317^^^^
"^DD",4.001,4.011,.14,21,1,0)
If this column/field represents a date data type then MFS
"^DD",4.001,4.011,.14,21,2,0)
needs to know how to handle the time zone.
"^DD",4.001,4.011,.14,21,3,0)
 
"^DD",4.001,4.011,.14,21,4,0)
This field indicates how FileMan should file the HL7 date --
"^DD",4.001,4.011,.14,21,5,0)
local time or UTC time.
"^DD",4.001,4.011,.14,21,6,0)

"^DD",4.001,4.011,.14,21,7,0)
Note: VUID effective date/time should always be flagged LOCAL.
"^DD",4.001,4.011,.14,"DT")
3050317
"^DD",4.005,4.005,0)
FIELD^^6^7
"^DD",4.005,4.005,0,"DDA")
N
"^DD",4.005,4.005,0,"DT")
3050818
"^DD",4.005,4.005,0,"IX","B",4.005,.01)

"^DD",4.005,4.005,0,"NM","MD5 Signature")

"^DD",4.005,4.005,0,"VRPK")
XU
"^DD",4.005,4.005,.01,0)
MD5 CODE SYSTEM^RFX^^0;1^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,.01,.1)
MD5 Code System
"^DD",4.005,4.005,.01,1,0)
^.1
"^DD",4.005,4.005,.01,1,1,0)
4.005^B
"^DD",4.005,4.005,.01,1,1,1)
S ^DIC(4.005,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.005,.01,1,1,2)
K ^DIC(4.005,"B",$E(X,1,30),DA)
"^DD",4.005,4.005,.01,3)
Answer must be 1-32 characters in length.
"^DD",4.005,4.005,.01,21,0)
^^1^1^3050818^
"^DD",4.005,4.005,.01,21,1,0)
This field is the Domain name of SDS for which MD5 will be requested.
"^DD",4.005,4.005,.01,"DT")
3050818
"^DD",4.005,4.005,1,0)
FILE/SUBFILE NUMBER^4.0051^^1;0
"^DD",4.005,4.005,1,21,0)
^^2^2^3050818^
"^DD",4.005,4.005,1,21,1,0)
This field is the Internal File Number (IFN) of the MD5 table supported 
"^DD",4.005,4.005,1,21,2,0)
by the Master File Server (MFS).
"^DD",4.005,4.005,2,0)
Vets Code System Version^NJ16,5^^2;1^K:+X'=X!(X>9999999999)!(X<1)!(X?.E1"."6N.N) X
"^DD",4.005,4.005,2,3)
Type a Number between 1 and 9999999999, 5 Decimal Digits
"^DD",4.005,4.005,2,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,2,21,1,0)
Vets Code System Version
"^DD",4.005,4.005,2,"DT")
3050609
"^DD",4.005,4.005,3,0)
Vets MD5 Hash^F^^2;2^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,3,3)
Answer must be 1-32 characters in length.
"^DD",4.005,4.005,3,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,3,21,1,0)
Vets MD5 Hash ENTRY
"^DD",4.005,4.005,3,"DT")
3050609
"^DD",4.005,4.005,4,0)
Date of MD5 verification^D^^2;3^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",4.005,4.005,4,21,0)
^^1^1^3050609^
"^DD",4.005,4.005,4,21,1,0)
Date of MD5 verification
"^DD",4.005,4.005,4,"DT")
3050609
"^DD",4.005,4.005,5,0)
Computed MD5 value^F^^2;4^K:$L(X)>32!($L(X)<1) X
"^DD",4.005,4.005,5,3)
Don't enter the data.
"^DD",4.005,4.005,5,21,0)
^^1^1^3050818^
"^DD",4.005,4.005,5,21,1,0)
Computed MD5 checksum value, 32 cha long.
"^DD",4.005,4.005,5,"DT")
3050818
"^DD",4.005,4.005,6,0)
Debug Mode^NJ3,1^^0;2^K:+X'=X!(X>9)!(X<0)!(X?.E1"."2.N) X
"^DD",4.005,4.005,6,3)
Type a number between 0 and 9, 1 Decimal Digit
"^DD",4.005,4.005,6,21,0)
^^6^6^3050818^
"^DD",4.005,4.005,6,21,1,0)
Field indicates the level of response.
"^DD",4.005,4.005,6,21,2,0)
MODE = 0 regular mode.. last HASH value returned in Apl. ACK.
"^DD",4.005,4.005,6,21,3,0)
       1 debugging mode.. all values + hash codess returned in Apl ACK
"^DD",4.005,4.005,6,21,4,0)
       1.1 debugging mode.. all values (no hash codes) returned in Apl ACK
"^DD",4.005,4.005,6,21,5,0)
       2 debugging mode.. all fields values, all hash values,all hash 
"^DD",4.005,4.005,6,21,6,0)
         codes returned in Apl. ACK.
"^DD",4.005,4.005,6,"DT")
3050818
"^DD",4.005,4.0051,0)
FILE/SUBFILE NUMBER SUB-FIELD^^1^2
"^DD",4.005,4.0051,0,"DT")
3050818
"^DD",4.005,4.0051,0,"IX","B",4.0051,.01)

"^DD",4.005,4.0051,0,"NM","FILE/SUBFILE NUMBER")

"^DD",4.005,4.0051,0,"UP")
4.005
"^DD",4.005,4.0051,.01,0)
FILE/SUBFILE NUMBER^MFX^^0;1^K:$L(X)>15!($L(X)<1) X X "I $D(X),'$D(^DD(X)) K X" S:$D(X) DINUM=X
"^DD",4.005,4.0051,.01,.1)
File/Subfile Number
"^DD",4.005,4.0051,.01,1,0)
^.1
"^DD",4.005,4.0051,.01,1,1,0)
4.0051^B
"^DD",4.005,4.0051,.01,1,1,1)
S ^DIC(4.005,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.0051,.01,1,1,2)
K ^DIC(4.005,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.005,4.0051,.01,3)
Select file/subfile number to be included in MD5 procedure of the Master File Server (MFS) mechanism
"^DD",4.005,4.0051,.01,21,0)
^^2^2^3050818^
"^DD",4.005,4.0051,.01,21,1,0)
This field is the Internal File Number (IFN) of the MD5 table supported 
"^DD",4.005,4.0051,.01,21,2,0)
by the Master File Server (MFS).
"^DD",4.005,4.0051,.01,"DT")
3050818
"^DD",4.005,4.0051,1,0)
FIELD NUMBER^4.00511^^1;0
"^DD",4.005,4.0051,1,21,0)
^^2^2^3050818^
"^DD",4.005,4.0051,1,21,1,0)
This is the field number of file/subfile to be included in MD5 procedure 
"^DD",4.005,4.0051,1,21,2,0)
of the Master File Server (MFS).
"^DD",4.005,4.00511,0)
FIELD NUMBER SUB-FIELD^^2^3
"^DD",4.005,4.00511,0,"DT")
3050818
"^DD",4.005,4.00511,0,"IX","B",4.00511,.01)

"^DD",4.005,4.00511,0,"NM","FIELD NUMBER")

"^DD",4.005,4.00511,0,"UP")
4.0051
"^DD",4.005,4.00511,.01,0)
FIELD NUMBER^MFX^^0;1^K:+X'=X!(X>999999)!(X<.001) X X "I $D(X),'$D(^DD(DA(1),X)) K X" S:$D(X) DINUM=X
"^DD",4.005,4.00511,.01,1,0)
^.1
"^DD",4.005,4.00511,.01,1,1,0)
4.00511^B
"^DD",4.005,4.00511,.01,1,1,1)
S ^DIC(4.005,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.005,4.00511,.01,1,1,2)
K ^DIC(4.005,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.005,4.00511,.01,3)
Select field of file/subfile to be included in MD5 procedure of the Master File Server (MFS).
"^DD",4.005,4.00511,.01,"DT")
3050818
"^DD",4.005,4.00511,1,0)
SEQUNCE^NJ5,0^^0;2^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",4.005,4.00511,1,3)
Type the sequence # the field will be taken in MD5 hash.
"^DD",4.005,4.00511,1,21,0)
^^1^1^3050818^
"^DD",4.005,4.00511,1,21,1,0)
Order sequence, the field will be taken in MD5 hash.
"^DD",4.005,4.00511,1,"DT")
3050819
"^DD",4.005,4.00511,2,0)
External/Internal^S^I:INTERNAL;E:EXTERNAL;^0;3^Q
"^DD",4.005,4.00511,2,21,0)
^^1^1^3050802^
"^DD",4.005,4.00511,2,21,1,0)
Get External or internal Fileman value.. Default = Internal
"^DD",4.005,4.00511,2,"DT")
3050802
"^DD",4.009,4.009,0)
FIELD^^99.991^5
"^DD",4.009,4.009,0,"DDA")
N
"^DD",4.009,4.009,0,"DT")
3050719
"^DD",4.009,4.009,0,"IX","AVUID",4.009,99.99)

"^DD",4.009,4.009,0,"IX","B",4.009,.01)

"^DD",4.009,4.009,0,"NM","STANDARD TERMINOLOGY VERSION FILE")

"^DD",4.009,4.009,0,"VRPK")
XU
"^DD",4.009,4.009,.01,0)
VERSION NAME^RF^^0;1^K:$L(X)>50!($L(X)<3)!'(X'?1P.E) X
"^DD",4.009,4.009,.01,1,0)
^.1
"^DD",4.009,4.009,.01,1,1,0)
4.009^B
"^DD",4.009,4.009,.01,1,1,1)
S ^DIC(4.009,"B",$E(X,1,30),DA)=""
"^DD",4.009,4.009,.01,1,1,2)
K ^DIC(4.009,"B",$E(X,1,30),DA)
"^DD",4.009,4.009,.01,3)
Answer must be 3-50 characters in length.
"^DD",4.009,4.009,.01,11,0)
^.2LAP
"^DD",4.009,4.009,.01,21,0)
^.001^1^1^3050719^^
"^DD",4.009,4.009,.01,21,1,0)
NAME THAT DESCRIBES THE VERSION
"^DD",4.009,4.009,.01,"DT")
3050719
"^DD",4.009,4.009,1,0)
VERSION^RF^^0;2^K:$L(X)>7!($L(X)<1) X
"^DD",4.009,4.009,1,3)
Answer must be 1-7 characters in length.
"^DD",4.009,4.009,1,21,0)
^^1^1^3050719^
"^DD",4.009,4.009,1,21,1,0)
Version of the terminology
"^DD",4.009,4.009,1,"DT")
3050719
"^DD",4.009,4.009,99.98,0)
MASTER ENTRY FOR VUID^S^1:YES;0:NO;^VUID;2^Q
"^DD",4.009,4.009,99.98,21,0)
^^1^1^3050719^
"^DD",4.009,4.009,99.98,21,1,0)
This field identifies the Master entry for a VUID associated with a Term/Concept.
"^DD",4.009,4.009,99.98,"DT")
3050719
"^DD",4.009,4.009,99.99,0)
VUID^F^^VUID;1^K:$L(X)>20!($L(X)<1) X
"^DD",4.009,4.009,99.99,1,0)
^.1
"^DD",4.009,4.009,99.99,1,1,0)
4.009^AVUID
"^DD",4.009,4.009,99.99,1,1,1)
S ^DIC(4.009,"AVUID",$E(X,1,30),DA)=""
"^DD",4.009,4.009,99.99,1,1,2)
K ^DIC(4.009,"AVUID",$E(X,1,30),DA)
"^DD",4.009,4.009,99.99,1,1,3)
Please don't delete AVUID x-ref
"^DD",4.009,4.009,99.99,1,1,"DT")
3050719
"^DD",4.009,4.009,99.99,3)
Answer must be 1-20 characters in length.
"^DD",4.009,4.009,99.99,21,0)
^^1^1^3050719^
"^DD",4.009,4.009,99.99,21,1,0)
Unique identification from ERT.
"^DD",4.009,4.009,99.99,"DT")
3050719
"^DD",4.009,4.009,99.991,0)
EFFECTIVE DATE/TIME^4.00999DA^^TERMSTATUS;0
"^DD",4.009,4.00999,0)
EFFECTIVE DATE/TIME SUB-FIELD^^.02^2
"^DD",4.009,4.00999,0,"DT")
3050719
"^DD",4.009,4.00999,0,"IX","B",4.00999,.01)

"^DD",4.009,4.00999,0,"NM","EFFECTIVE DATE/TIME")

"^DD",4.009,4.00999,0,"UP")
4.009
"^DD",4.009,4.00999,.01,0)
EFFECTIVE DATE/TIME^D^^0;1^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",4.009,4.00999,.01,1,0)
^.1
"^DD",4.009,4.00999,.01,1,1,0)
4.00999^B
"^DD",4.009,4.00999,.01,1,1,1)
S ^DIC(4.009,DA(1),"TERMSTATUS","B",$E(X,1,30),DA)=""
"^DD",4.009,4.00999,.01,1,1,2)
K ^DIC(4.009,DA(1),"TERMSTATUS","B",$E(X,1,30),DA)
"^DD",4.009,4.00999,.01,21,0)
^^1^1^3050719^
"^DD",4.009,4.00999,.01,21,1,0)
Describes the pair Status and Effective Date/Time for each reference term.
"^DD",4.009,4.00999,.01,"DT")
3050719
"^DD",4.009,4.00999,.02,0)
STATUS^S^1:ACTIVE;2:INACTIVE;^0;2^Q
"^DD",4.009,4.00999,.02,21,0)
^^4^4^3050719^
"^DD",4.009,4.00999,.02,21,1,0)
The Status of a reference term is either 'ACTIVE' or 'INACTIVE'.
"^DD",4.009,4.00999,.02,21,2,0)
If 'ACTIVE', then the term will be accessible by end-users to 
"^DD",4.009,4.00999,.02,21,3,0)
document a particular patient event.  If 'INACTIVE', then the term will only be 
"^DD",4.009,4.00999,.02,21,4,0)
accessible by the application to display legacy data.
"^DD",4.009,4.00999,.02,"DT")
3050719
"^DIC",4.001,4.001,0)
MASTER FILE PARAMETERS^4.001P
"^DIC",4.001,4.001,0,"GL")
^DIC(4.001,
"^DIC",4.001,4.001,"%",0)
^1.005^^0
"^DIC",4.001,4.001,"%D",0)
^^9^9^3031228^^
"^DIC",4.001,4.001,"%D",1,0)
The file holds parameters related to the Master File Server (MFS).
"^DIC",4.001,4.001,"%D",2,0)
 
"^DIC",4.001,4.001,"%D",3,0)
DO NOT EDIT THIS FILE!
"^DIC",4.001,4.001,"%D",4,0)
 
"^DIC",4.001,4.001,"%D",5,0)
The parameters map HL7 segment data to standard
"^DIC",4.001,4.001,"%D",6,0)
FileMan data files.  Local modifications to this
"^DIC",4.001,4.001,"%D",7,0)
file will seriously disrupt standard file updating
"^DIC",4.001,4.001,"%D",8,0)
and have negative consequences to existing VistA
"^DIC",4.001,4.001,"%D",9,0)
applications.
"^DIC",4.001,"B","MASTER FILE PARAMETERS",4.001)

"^DIC",4.005,4.005,0)
MD5 Signature^4.005
"^DIC",4.005,4.005,0,"GL")
^DIC(4.005,
"^DIC",4.005,4.005,"%",0)
^1.005^^0
"^DIC",4.005,4.005,"%D",0)
^^9^9^3050818^
"^DIC",4.005,4.005,"%D",1,0)
The file holds parameters related to the MD5 signature of  the Master 
"^DIC",4.005,4.005,"%D",2,0)
File Server(MFS).
"^DIC",4.005,4.005,"%D",3,0)
 
"^DIC",4.005,4.005,"%D",4,0)
DO NOT EDIT THIS FILE!
"^DIC",4.005,4.005,"%D",5,0)
 
"^DIC",4.005,4.005,"%D",6,0)
For each domain (Allergy, Vitals),  The parameters defines the file's 
"^DIC",4.005,4.005,"%D",7,0)
fields to be included in MD5 hash procedure.  Local modifications to this 
"^DIC",4.005,4.005,"%D",8,0)
file will seriously disrupt standard file updating and have negative 
"^DIC",4.005,4.005,"%D",9,0)
consequences to existing VistA applications.  
"^DIC",4.005,"B","MD5 Signature",4.005)

"^DIC",4.009,4.009,0)
STANDARD TERMINOLOGY VERSION FILE^4.009
"^DIC",4.009,4.009,0,"GL")
^DIC(4.009,
"^DIC",4.009,4.009,"%",0)
^1.005^^0
"^DIC",4.009,4.009,"%D",0)
^^7^7^3050818^
"^DIC",4.009,4.009,"%D",1,0)
The file holds the last Version of Standard Terminology update. 
"^DIC",4.009,4.009,"%D",2,0)
 
"^DIC",4.009,4.009,"%D",3,0)
DO NOT EDIT THIS FILE!
"^DIC",4.009,4.009,"%D",4,0)
 
"^DIC",4.009,4.009,"%D",5,0)
The file entry is set within MFS. Local modifications to this file will 
"^DIC",4.009,4.009,"%D",6,0)
seriously disrupt standard file updating and have negative consequences 
"^DIC",4.009,4.009,"%D",7,0)
to existing VistA applications.
"^DIC",4.009,"B","STANDARD TERMINOLOGY VERSION FILE",4.009)

**END**
**END**
