Released XU*8*39 SEQ #26
Extracted from mail message
**KIDS**:XU*8.0*39^

**INSTALL NAME**
XU*8.0*39
"BLD",111,0)
XU*8.0*39^KERNEL^0^2960719^n
"BLD",111,1,0)
^^46^46^2960719^^^^
"BLD",111,1,1,0)
 This patch contains the following features:
"BLD",111,1,2,0)

"BLD",111,1,3,0)
-Fixes problem when installing new Protocols, they would remain disabled.
"BLD",111,1,4,0)
 Nois CLA-0696-20835.
"BLD",111,1,5,0)
-The function $$PATCH^XPDUTL(patch) will handle patches with sequence
"BLD",111,1,6,0)
 numbers, which were added in patch 30.
"BLD",111,1,7,0)
-Setting XPDABORT=2 wasn't aborting install.
"BLD",111,1,8,0)
-Out of Order message on an option now contains the package name.
"BLD",111,1,9,0)
===========================================================================
"BLD",111,1,10,0)

"BLD",111,1,11,0)
This patch should be installed during off-peak hours. Users can be on the
"BLD",111,1,12,0)
system, but no user should be using KIDS during the install of this patch.
"BLD",111,1,13,0)
===========================================================================
"BLD",111,1,14,0)
  
"BLD",111,1,15,0)
INSTALLATION:
"BLD",111,1,16,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",111,1,17,0)
      so you will need to disable mapping for the effected routines.
"BLD",111,1,18,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",111,1,19,0)
      option will load the KIDS package onto your system.
"BLD",111,1,20,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",111,1,21,0)
      system. You now need to use KIDS to install the Transport global.
"BLD",111,1,22,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",111,1,23,0)
      options:
"BLD",111,1,24,0)
         Print Transport Global
"BLD",111,1,25,0)
         Compare Transport Global to Current System
"BLD",111,1,26,0)
         Verify Checksums in Transport Global
"BLD",111,1,27,0)
         Backup a Transport Global
"BLD",111,1,28,0)
         Install Package(s)
"BLD",111,1,29,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",111,1,30,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",111,1,31,0)
  6.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",111,1,32,0)
 ===========================================================================
"BLD",111,1,33,0)
  
"BLD",111,1,34,0)
 ROUTINES:
"BLD",111,1,35,0)
   The second line of the routine now looks like:
"BLD",111,1,36,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",111,1,37,0)
 
"BLD",111,1,38,0)
 Name           Checksum        Patch List
"BLD",111,1,39,0)
 -----------------------------------------------------------
"BLD",111,1,40,0)
 XPDET          4659158         15,39
"BLD",111,1,41,0)
 XPDI           16016321        10,21,39
"BLD",111,1,42,0)
 XPDIL1         6256689         15,17,39
"BLD",111,1,43,0)
 XPDTC          12678971        10,15,21,39
"BLD",111,1,44,0)
 XPDUTL         2641528         21,28,39
"BLD",111,1,45,0)
 XQOO1          14071629        10,21,39
"BLD",111,1,46,0)
 ============================================================================
"BLD",111,4,0)
^9.64PA^^
"BLD",111,"KRN",0)
^9.67PA^8994^15
"BLD",111,"KRN",.4,0)
.4
"BLD",111,"KRN",.401,0)
.401
"BLD",111,"KRN",.402,0)
.402
"BLD",111,"KRN",.403,0)
.403
"BLD",111,"KRN",.5,0)
.5
"BLD",111,"KRN",.84,0)
.84
"BLD",111,"KRN",3.6,0)
3.6
"BLD",111,"KRN",9.2,0)
9.2
"BLD",111,"KRN",9.8,0)
9.8
"BLD",111,"KRN",9.8,"NM",0)
^9.68A^13^6
"BLD",111,"KRN",9.8,"NM",5,0)
XPDI^^0^B49953100
"BLD",111,"KRN",9.8,"NM",7,0)
XPDIL1^^0^B12892911
"BLD",111,"KRN",9.8,"NM",10,0)
XQOO1^^0^B71322845
"BLD",111,"KRN",9.8,"NM",11,0)
XPDTC^^0^B34360594
"BLD",111,"KRN",9.8,"NM",12,0)
XPDUTL^^0^B11296103
"BLD",111,"KRN",9.8,"NM",13,0)
XPDET^^0^B21904433
"BLD",111,"KRN",9.8,"NM","B","XPDET",13)

"BLD",111,"KRN",9.8,"NM","B","XPDI",5)

"BLD",111,"KRN",9.8,"NM","B","XPDIL1",7)

"BLD",111,"KRN",9.8,"NM","B","XPDTC",11)

"BLD",111,"KRN",9.8,"NM","B","XPDUTL",12)

"BLD",111,"KRN",9.8,"NM","B","XQOO1",10)

"BLD",111,"KRN",19,0)
19
"BLD",111,"KRN",19.1,0)
19.1
"BLD",111,"KRN",101,0)
101
"BLD",111,"KRN",409.61,0)
409.61
"BLD",111,"KRN",8994,0)
8994
"BLD",111,"KRN",8995,0)
8995
"BLD",111,"KRN","B",.4,.4)

"BLD",111,"KRN","B",.401,.401)

"BLD",111,"KRN","B",.402,.402)

"BLD",111,"KRN","B",.403,.403)

"BLD",111,"KRN","B",.5,.5)

"BLD",111,"KRN","B",.84,.84)

"BLD",111,"KRN","B",3.6,3.6)

"BLD",111,"KRN","B",9.2,9.2)

"BLD",111,"KRN","B",9.8,9.8)

"BLD",111,"KRN","B",19,19)

"BLD",111,"KRN","B",19.1,19.1)

"BLD",111,"KRN","B",101,101)

"BLD",111,"KRN","B",409.61,409.61)

"BLD",111,"KRN","B",8994,8994)

"BLD",111,"KRN","B",8995,8995)

"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
39^2960719
"PKG",283,22,1,"PAH",1,1,0)
^^46^46^2960719
"PKG",283,22,1,"PAH",1,1,1,0)
 This patch contains the following features:
"PKG",283,22,1,"PAH",1,1,2,0)

"PKG",283,22,1,"PAH",1,1,3,0)
-Fixes problem when installing new Protocols, they would remain disabled.
"PKG",283,22,1,"PAH",1,1,4,0)
 Nois CLA-0696-20835.
"PKG",283,22,1,"PAH",1,1,5,0)
-The function $$PATCH^XPDUTL(patch) will handle patches with sequence
"PKG",283,22,1,"PAH",1,1,6,0)
 numbers, which were added in patch 30.
"PKG",283,22,1,"PAH",1,1,7,0)
-Setting XPDABORT=2 wasn't aborting install.
"PKG",283,22,1,"PAH",1,1,8,0)
-Out of Order message on an option now contains the package name.
"PKG",283,22,1,"PAH",1,1,9,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,10,0)

"PKG",283,22,1,"PAH",1,1,11,0)
This patch should be installed during off-peak hours. Users can be on the
"PKG",283,22,1,"PAH",1,1,12,0)
system, but no user should be using KIDS during the install of this patch.
"PKG",283,22,1,"PAH",1,1,13,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,14,0)
  
"PKG",283,22,1,"PAH",1,1,15,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,16,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,17,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,18,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,19,0)
      option will load the KIDS package onto your system.
"PKG",283,22,1,"PAH",1,1,20,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,21,0)
      system. You now need to use KIDS to install the Transport global.
"PKG",283,22,1,"PAH",1,1,22,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",283,22,1,"PAH",1,1,23,0)
      options:
"PKG",283,22,1,"PAH",1,1,24,0)
         Print Transport Global
"PKG",283,22,1,"PAH",1,1,25,0)
         Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,26,0)
         Verify Checksums in Transport Global
"PKG",283,22,1,"PAH",1,1,27,0)
         Backup a Transport Global
"PKG",283,22,1,"PAH",1,1,28,0)
         Install Package(s)
"PKG",283,22,1,"PAH",1,1,29,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,30,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",283,22,1,"PAH",1,1,31,0)
  6.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,32,0)
 ===========================================================================
"PKG",283,22,1,"PAH",1,1,33,0)
  
"PKG",283,22,1,"PAH",1,1,34,0)
 ROUTINES:
"PKG",283,22,1,"PAH",1,1,35,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,36,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,37,0)
 
"PKG",283,22,1,"PAH",1,1,38,0)
 Name           Checksum        Patch List
"PKG",283,22,1,"PAH",1,1,39,0)
 -----------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,40,0)
 XPDET          4659158         15,39
"PKG",283,22,1,"PAH",1,1,41,0)
 XPDI           16016321        10,21,39
"PKG",283,22,1,"PAH",1,1,42,0)
 XPDIL1         6256689         15,17,39
"PKG",283,22,1,"PAH",1,1,43,0)
 XPDTC          12678971        10,15,21,39
"PKG",283,22,1,"PAH",1,1,44,0)
 XPDUTL         2641528         21,28,39
"PKG",283,22,1,"PAH",1,1,45,0)
 XQOO1          14071629        10,21,39
"PKG",283,22,1,"PAH",1,1,46,0)
 ============================================================================
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","XPDET")
0^13^B21904433
"RTN","XPDET",1,0)
XPDET ;SFISC/RSD - Input tranforms & help for file 9.6 ;07/19/96  11:54
"RTN","XPDET",2,0)
 ;;8.0;KERNEL;**15,39**;Jul 10, 1995
"RTN","XPDET",3,0)
 Q
"RTN","XPDET",4,0)
INPUTB(X) ;input tranfrom for NAME in BUILD file
"RTN","XPDET",5,0)
 ;X=user input
"RTN","XPDET",6,0)
 ;name must be unique
"RTN","XPDET",7,0)
 I $L(X)>50!($L(X)<3)!$D(^XPD(9.6,"B",X)) K X Q
"RTN","XPDET",8,0)
 I X["*" K:$P(X,"*",2,3)'?1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.3N X Q
"RTN","XPDET",9,0)
 S %=$L(X," ") I %<2 K X Q
"RTN","XPDET",10,0)
 S %=$P(X," ",%) K:%'?1.2N1"."1.2N.1(1"V",1"T").2N X
"RTN","XPDET",11,0)
 Q
"RTN","XPDET",12,0)
INPUTE(X) ;input transform for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",13,0)
 ;X=user input
"RTN","XPDET",14,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,XPDLK,Y
"RTN","XPDET",15,0)
 S XPDLK=$$GR(D1)
"RTN","XPDET",16,0)
 I XPDLK=""!X["*" K X Q
"RTN","XPDET",17,0)
 S DIC(0)="QEMZ",DIC=XPDLK
"RTN","XPDET",18,0)
 S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",19,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",20,0)
 S X=Y(0,0)
"RTN","XPDET",21,0)
 ;check that this doesn't exist already
"RTN","XPDET",22,0)
 I $D(^XPD(9.6,D0,"KRN",D1,"NM","B",X)) K X Q
"RTN","XPDET",23,0)
 ;if fm file, change X to contain file # of template
"RTN","XPDET",24,0)
 I D1<.404 S X=$$TX(X,$P(Y(0),U,$S(D1=.403:8,1:4)))
"RTN","XPDET",25,0)
 Q
"RTN","XPDET",26,0)
GLOBALE(X) ;input transform for GLOBAL multiple .01 field in file 9.6
"RTN","XPDET",27,0)
 I $L(X)>30!($L(X)<2) K X Q
"RTN","XPDET",28,0)
 I X["(",X'[")" K X Q
"RTN","XPDET",29,0)
 ;change ' back to " for subscripts, they were changed in the Pre-Lookup node of the DD, 7.5. This was done to trick FM, which doesn't allow " in .01 fields
"RTN","XPDET",30,0)
 S X=$TR(X,"'","""")
"RTN","XPDET",31,0)
 I '$D(@("^"_X)) K X
"RTN","XPDET",32,0)
 Q
"RTN","XPDET",33,0)
LOOKE(X) ;special lookup for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",34,0)
 Q:X'?1.E1"*"
"RTN","XPDET",35,0)
 N %,XPD,XPDI,XPDIC,XPDF,XPDLK,XPDX,Y
"RTN","XPDET",36,0)
 S XPDLK=$$GR(D1),XPDIC=DIC,XPDF=D1
"RTN","XPDET",37,0)
 I XPDLK="" K X Q
"RTN","XPDET",38,0)
 G:$E(X)="-" DEL
"RTN","XPDET",39,0)
 S XPDX=$P(X,"*"),XPDI("IEN")=0
"RTN","XPDET",40,0)
 D LIST^DIC(D1,"","","","*",.XPDI,XPDX,"","I $$SCR^XPDET(Y)")
"RTN","XPDET",41,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",42,0)
 K ^TMP("XPDX",$J)
"RTN","XPDET",43,0)
 ;loop thru list from lister and file using UPDATE^DIE
"RTN","XPDET",44,0)
 F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDET",45,0)
 .S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX(X,$$GET1^DIQ(D1,%,$$TF(D1),"I"))
"RTN","XPDET",46,0)
 .S Y="+"_XPDI_","_D1_","_D0_",",^TMP("XPDX",$J,9.68,Y,.01)=X,^(.03)=0
"RTN","XPDET",47,0)
 I $D(^TMP("XPDX",$J)) D UPDATE^DIE("","^TMP(""XPDX"",$J)","^TMP(""XPD"",$J)")
"RTN","XPDET",48,0)
 ;if in Screenman then call MLOAD to update screen
"RTN","XPDET",49,0)
 I $D(DDS),$D(^TMP("XPD",$J)) D MLOAD^DDSUTL("^TMP(""XPD"",$J)")
"RTN","XPDET",50,0)
 S X=""
"RTN","XPDET",51,0)
 K ^TMP("XPDX",$J),^TMP("XPD",$J)
"RTN","XPDET",52,0)
 Q
"RTN","XPDET",53,0)
DEL ;delete using wild card
"RTN","XPDET",54,0)
 I X'?1"-"1.E1"*" K X Q
"RTN","XPDET",55,0)
 S X=$E(X,2,$L(X)-1),XPDX=X S:$L(X) XPDI("IEN")=0
"RTN","XPDET",56,0)
 D LIST^DIC(9.68,","_D1_","_D0_",","","","*",.XPDI,XPDX)
"RTN","XPDET",57,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",58,0)
 N DIK,DA,D2
"RTN","XPDET",59,0)
 S DIK=XPDIC,DA(1)=D1,DA(2)=D0
"RTN","XPDET",60,0)
 F XPDI=1:1 S (DA,D2)=$G(^TMP("DILIST",$J,2,XPDI)) Q:'DA  D
"RTN","XPDET",61,0)
 .D ^DIK
"RTN","XPDET",62,0)
 I $D(DDS) D MDEL^DDSUTL("^TMP(""DILIST"",$J,2)")
"RTN","XPDET",63,0)
 S X=""
"RTN","XPDET",64,0)
 K ^TMP("DILIST",$J)
"RTN","XPDET",65,0)
 Q
"RTN","XPDET",66,0)
HELP ;executable help of ENTRIES in KERNEL FILE multiple
"RTN","XPDET",67,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",68,0)
 ;file 9.8 is routine file, check that routine exists
"RTN","XPDET",69,0)
 S DIC=$$GR(D1),DIC(0)="M",X="??" Q:DIC=""  S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",70,0)
 D ^DIC Q
"RTN","XPDET",71,0)
HELPO ;executable help of INSTALL ORDER in KERNEL FILES multiple
"RTN","XPDET",72,0)
 N Y
"RTN","XPDET",73,0)
 W !,"Numbers in use:  ORDER     FILE#" S Y=0
"RTN","XPDET",74,0)
 F  S Y=$O(^XPD(9.6,D0,"KRN","AC",Y)) Q:'Y  W !,?18,$J(Y,2),?28,$O(^(Y,0))
"RTN","XPDET",75,0)
 W ! Q
"RTN","XPDET",76,0)
 ;
"RTN","XPDET",77,0)
SCRA(Y) ;screen of ACTION field in ENTRIES multiple in KERNEL FILES multiple, Y=action
"RTN","XPDET",78,0)
 ;Y=0 - send, 1 - delete, 2 - link, 3 - merge
"RTN","XPDET",79,0)
 ;all files can send to site
"RTN","XPDET",80,0)
 Q:'Y 1
"RTN","XPDET",81,0)
 ;.5=function file, can't delete, all others can
"RTN","XPDET",82,0)
 I Y=1 Q (D1'=.5)
"RTN","XPDET",83,0)
 ;then rest of code check if it is a Option or Protocal and can have MENU ITEMS
"RTN","XPDET",84,0)
 Q:D1'=19&(D1'=101) 0
"RTN","XPDET",85,0)
 N FGR,X
"RTN","XPDET",86,0)
 S X=$P(^XPD(9.6,D0,"KRN",D1,"NM",D2,0),U),FGR=$$FILE^XPDV(D1)
"RTN","XPDET",87,0)
 Q:X="" 0
"RTN","XPDET",88,0)
 S X=+$O(@FGR@("B",X,0))
"RTN","XPDET",89,0)
 ;if it has ITEMs, node 10 then ok
"RTN","XPDET",90,0)
 I $O(@FGR@(X,10,0)) Q 1
"RTN","XPDET",91,0)
 ;if type is menu,potocol,protocol menu,limited,extended,window suite
"RTN","XPDET",92,0)
 I "MOQLXZ"[$P($G(@FGR@(X,0)),U,4) Q 1
"RTN","XPDET",93,0)
 Q 0
"RTN","XPDET",94,0)
 ;
"RTN","XPDET",95,0)
 ;only Fileman templates need to know what file they are associated with.
"RTN","XPDET",96,0)
 ;this value is also triggered to field .02 in the DD.
"RTN","XPDET",97,0)
TX(X,Y) ;X=template name, Y=file #
"RTN","XPDET",98,0)
 Q X_"    FILE #"_Y
"RTN","XPDET",99,0)
 ;
"RTN","XPDET",100,0)
TF(F) ;F=file, return field of file# for templates
"RTN","XPDET",101,0)
 Q $S(F>.403:"",F<.403:4,1:7)
"RTN","XPDET",102,0)
 ;
"RTN","XPDET",103,0)
GR(X) Q $G(^DIC(X,0,"GL"))
"RTN","XPDET",104,0)
 ;
"RTN","XPDET",105,0)
 ;screens checks that X is not already in the ENTRIES multiple
"RTN","XPDET",106,0)
SCR(Y) ;screen logic for ENTRIES multiple in file 9.6
"RTN","XPDET",107,0)
 N %,X,Z
"RTN","XPDET",108,0)
 S Z=^(0),X=$P(Z,U)
"RTN","XPDET",109,0)
 ;FM files are less than .44
"RTN","XPDET",110,0)
 I XPDF<.44 D  Q:X="" 0
"RTN","XPDET",111,0)
 .S %=$S(XPDF=.403:$P(Z,U,8),1:$P(Z,U,4)),X=X_"    FILE #"_%
"RTN","XPDET",112,0)
 .S:XPDF'=.403&($P(Z,U,8)>2) %=0 S:'% X=""
"RTN","XPDET",113,0)
 ;routine must exist and must be type 'R'
"RTN","XPDET",114,0)
 I XPDF=9.8 Q:$T(^@X)=""!($P(Z,U,2)'="R") 0
"RTN","XPDET",115,0)
 Q '$D(@(XPDIC_"""B"",X)"))
"RTN","XPDET",116,0)
 ;
"RTN","XPDET",117,0)
 ;screen checks that X is not in the exclude list, XPDN(0)
"RTN","XPDET",118,0)
SCR1(Y) ;screen logic for exclude list
"RTN","XPDET",119,0)
 N %,X
"RTN","XPDET",120,0)
 ;if name X is in the exclude list, XPDN(0,X), then fail
"RTN","XPDET",121,0)
 S Y(0)=^(0),X=$P(Y(0),U) Q:$D(XPDN(0,X)) 0
"RTN","XPDET",122,0)
 ;check if X is refered in the namespace by check the subscript
"RTN","XPDET",123,0)
 ;before X, if sub exist and $P(X,sub)="" then it is part of the
"RTN","XPDET",124,0)
 ;namespace, fail and return 0
"RTN","XPDET",125,0)
 S %=$O(XPDN(0,X),-1) I $L(%) Q:$P(X,%)="" 0
"RTN","XPDET",126,0)
 Q $$SCR(.Y)
"RTN","XPDET",127,0)
 ;
"RTN","XPDET",128,0)
 ;screen on PACKAGE LINK field in file 9.6,
"RTN","XPDET",129,0)
PCK(Y) ;check Package File name, Y=ien in package file
"RTN","XPDET",130,0)
 ;DA is undef when you are adding a new Build without a version number
"RTN","XPDET",131,0)
 Q:'$D(DA) 1
"RTN","XPDET",132,0)
 N %,Y,Z
"RTN","XPDET",133,0)
 S Z=^(0),Y=$L($P(Z,U)),%=$P(^XPD(9.6,DA,0),U),%=$$PKG^XPDUTL(%)
"RTN","XPDET",134,0)
 Q $P(Z,U)=$E(%,1,Y)!($P(Z,U,2)=%)
"RTN","XPDET",135,0)
VOLE(X) ;input transform for VOLUME SET multiple in INSTALL file
"RTN","XPDET",136,0)
 ;X=user input
"RTN","XPDET",137,0)
 N D,DD,DIC,DICR,DIX,DIY,DO,DS,XPD,Y,%
"RTN","XPDET",138,0)
 S DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I ""CP""[$P(^(0),U,10)"
"RTN","XPDET",139,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",140,0)
 S X=Y(0,0)
"RTN","XPDET",141,0)
 Q
"RTN","XPDET",142,0)
VOLH ;executable help for VOLUME SET multiple in INSTALL file
"RTN","XPDET",143,0)
 N D,DD,DIC,DIE,DIX,DIY,DO,DS,DZ,X,Y,%
"RTN","XPDET",144,0)
 S X="??",DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I ""CP""[$P(^(0),U,10)"
"RTN","XPDET",145,0)
 D ^DIC
"RTN","XPDET",146,0)
 Q
"RTN","XPDET",147,0)
ID97 ;identifier for Install file
"RTN","XPDET",148,0)
 N XPDET,XPD,XPD0,XPD1,XPD2,XPD9
"RTN","XPDET",149,0)
 S XPD0=$G(^(0)),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD9=$P(XPD0,U,9),XPD="" Q:XPD9=""
"RTN","XPDET",150,0)
 D
"RTN","XPDET",151,0)
 .;Loaded, get DATE LOADED
"RTN","XPDET",152,0)
 .I 'XPD9 S XPD=$$FMTE^XLFDT($P(XPD0,U,3),2) Q
"RTN","XPDET",153,0)
 .Q:XPD9>3
"RTN","XPDET",154,0)
 .;Started, get INSTALL START TIME
"RTN","XPDET",155,0)
 .I XPD9=2 S XPD=$$FMTE^XLFDT($P(XPD1,U),2) Q
"RTN","XPDET",156,0)
 .;Completed, get INSTALL COMPLETE TIME
"RTN","XPDET",157,0)
 .I XPD9=3 S XPD=$$FMTE^XLFDT($P(XPD1,U,3),2) Q
"RTN","XPDET",158,0)
 .;Queued, get QUEUED TASK NUMBER
"RTN","XPDET",159,0)
 .I XPD9=1 S XPD="#"_$P(XPD0,U,6) Q
"RTN","XPDET",160,0)
 S XPDET(1)="   "_$$EXTERNAL^DILFD(9.7,.02,"",XPD9)_"  "_XPD,XPDET(1,"F")="?0"
"RTN","XPDET",161,0)
 S:XPD2]"" XPDET(2)="=> "_$E(XPD2,1,70),XPDET(2,"F")="!?5"
"RTN","XPDET",162,0)
 D EN^DDIOL(.XPDET)
"RTN","XPDET",163,0)
 Q
"RTN","XPDI")
0^5^B49953100
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;07/17/96  14:13
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21,39**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)  S XPDT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U)
"RTN","XPDI",7,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDT)<11!$D(XPDQUIT)
"RTN","XPDI",8,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",9,0)
 .;run enviroment check routine
"RTN","XPDI",10,0)
 .Q:$$ENV^XPDIL1(1)
"RTN","XPDI",11,0)
 .D QUES(XPDA) Q:'$D(XPDT(+XPDT))!$D(XPDQUIT)
"RTN","XPDI",12,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",13,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",14,0)
 .D XQSET(XPDA)
"RTN","XPDI",15,0)
 ;NONE = no Build to install
"RTN","XPDI",16,0)
 G NONE^XPDIL:'$O(XPDT(""))!$D(XPDQUIT)
"RTN","XPDI",17,0)
 W ! S XPDA=XPDST,XPDNM=XPDSET
"RTN","XPDI",18,0)
 ;disable options question
"RTN","XPDI",19,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",20,0)
 ;XPDSET=set name,also build name, of options that will be disabled
"RTN","XPDI",21,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",22,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",23,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",24,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",25,0)
 .S ^XTMP("XQOO",XPDSET,0)=^TMP($J,"XQOO",XPDSET,0)
"RTN","XPDI",26,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",27,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",28,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",29,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",30,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",31,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",32,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",33,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",34,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",35,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",36,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",37,0)
 ;check if they want to update other CPUs
"RTN","XPDI",38,0)
 I $G(XPDQUES("XPZ2")) D
"RTN","XPDI",39,0)
 .N DA,DIE,DR,Y
"RTN","XPDI",40,0)
 .S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",41,0)
 .W !!,"Please enter the VOLUME SETS you want me to update.",!
"RTN","XPDI",42,0)
 .D ^DIE I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",43,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",44,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",45,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",46,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",47,0)
 ;check if home device is defined
"RTN","XPDI",48,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",49,0)
 ;Kernel Virgin Install
"RTN","XPDI",50,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",51,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",52,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",53,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",54,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",55,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",56,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",57,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",58,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",59,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",60,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0,XPDIJ:$G(XPDIJ) Q
"RTN","XPDI",61,0)
 .N %DT
"RTN","XPDI",62,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",63,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",64,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",65,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",66,0)
 ..S Y=-1
"RTN","XPDI",67,0)
 .Q:$D(DTOUT)
"RTN","XPDI",68,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",69,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",70,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",71,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",72,0)
 .;save task into first Build
"RTN","XPDI",73,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDT=0
"RTN","XPDI",74,0)
 .F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPD(9.7,+XPDT(XPDT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",75,0)
 ;run install
"RTN","XPDI",76,0)
 U IO D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",77,0)
 Q
"RTN","XPDI",78,0)
QUES(XPDA) ;install questions; XPDA=ien in file 9.7
"RTN","XPDI",79,0)
 N XPDANS,XPDFIL,XPDFILN,XPDFILO,XPDNM,XPDQUES,X,Y
"RTN","XPDI",80,0)
 S XPDNM=$P(^XPD(9.7,XPDA,0),U) W !!,"Install Questions for ",XPDNM,!
"RTN","XPDI",81,0)
 ;pre-init questions
"RTN","XPDI",82,0)
 D DIR^XPDIQ("PRE") I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",83,0)
 ;file install questions
"RTN","XPDI",84,0)
 S XPDFIL=0
"RTN","XPDI",85,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL),X(0)=^(XPDFIL,0),X(1)=^(XPDFIL),XPDFILO=^(0,1) D  I $D(XPDQUIT) Q
"RTN","XPDI",86,0)
 .;check for DD screening logic
"RTN","XPDI",87,0)
 .I $G(^(10))]"" N XPDSCR S XPDSCR=^(10) ;^(10) is ref to ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,10) from prev line
"RTN","XPDI",88,0)
 .;XPDFILN=file name^global ref^partial DD
"RTN","XPDI",89,0)
 .;XPDANS=new file^DD screen failed^Data exists^update file name^user
"RTN","XPDI",90,0)
 .;doesn't want to update data  1=yes,0=no
"RTN","XPDI",91,0)
 .S XPDFILN=X_X(0)_U_X(1),XPDANS='($D(^DIC(XPDFIL,0))#2)_"^^"_''$O(@(X(0)_"0)"))
"RTN","XPDI",92,0)
 .W ! D DIR^XPDIQ("XPF",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI",93,0)
 .S:$G(XPDQUES("XPF"_XPDFIL_"#2"))=0 $P(XPDANS,U,5)=1
"RTN","XPDI",94,0)
 .S ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,2)=XPDANS
"RTN","XPDI",95,0)
 .F I=1:1:2 K XPDQUES("XPF"_XPDFIL_"#"_I)
"RTN","XPDI",96,0)
 ;XPDQUIT is by file questions in previous do loop, set in XPDIQ
"RTN","XPDI",97,0)
 I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",98,0)
 ;post-init questions
"RTN","XPDI",99,0)
 W ! D DIR^XPDIQ("POS") I $D(DIRUT)!$D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",100,0)
 Q
"RTN","XPDI",101,0)
 ;lookup into file 9.7, XPDS=DIC("S") for lookup, return 0-fail or ien
"RTN","XPDI",102,0)
LOOK(XPDS) ;lookup Install
"RTN","XPDI",103,0)
 N DIC,Y,XPD,%
"RTN","XPDI",104,0)
 K XPDT
"RTN","XPDI",105,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDI",106,0)
 S:$L($G(XPDS)) DIC("S")=XPDS
"RTN","XPDI",107,0)
 D ^DIC Q:Y<0 0
"RTN","XPDI",108,0)
 S XPD=+Y,XPDT=0
"RTN","XPDI",109,0)
 W !!,"This Distribution was loaded on ",$$FMTE^XLFDT($P(Y(0),U,3))," with header of ",!,$G(^XPD(9.7,XPD,2)),!,"It consisted of the following Install(s):",!
"RTN","XPDI",110,0)
 ;build XPDT array
"RTN","XPDI",111,0)
 F  S XPDT=$O(^XPD(9.7,"ASP",XPD,XPDT)) Q:'XPDT  S Y=+$O(^(XPDT,0)) D
"RTN","XPDI",112,0)
 .S %=$P($G(^XPD(9.7,Y,0)),U)
"RTN","XPDI",113,0)
 .I %="" W "**ERROR in Install, You need to remove the Distribution and reload it**",!  S XPDQUIT=1 Q
"RTN","XPDI",114,0)
 .S XPDT(XPDT)=Y_U_%,(XPDT("DA",Y),XPDT("NM",%))=XPDT W %,!
"RTN","XPDI",115,0)
 S:'$O(XPDT(0)) XPDQUIT=1
"RTN","XPDI",116,0)
 Q XPD
"RTN","XPDI",117,0)
 ;
"RTN","XPDI",118,0)
XQSET(XPDA) ;get options & protocols to disable
"RTN","XPDI",119,0)
 ;put in ^TMP($J,"XQOO",starting build name)
"RTN","XPDI",120,0)
 N A,I,X,Y K ^TMP($J)
"RTN","XPDI",121,0)
 S ^TMP($J,"XQOO",XPDSET,0)=XPDNM_" being installed^"_DT_U_DUZ
"RTN","XPDI",122,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",19,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",123,0)
 .S Y=$O(^DIC(19,"B",$P(X,U),0))
"RTN","XPDI",124,0)
 .;check that option exist and the Action is send or merge (0 or 3)
"RTN","XPDI",125,0)
 .I Y,$D(^DIC(19,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,19,Y)=$P(^(0),U,1,2)
"RTN","XPDI",126,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",101,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",127,0)
 .S Y=$O(^ORD(101,"B",$P(X,U),0))
"RTN","XPDI",128,0)
 .I Y,$D(^ORD(101,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,101,Y)=$P(^(0),U,1,2)
"RTN","XPDI",129,0)
 Q
"RTN","XPDI",130,0)
 ;XPDIJ need to install XPDIJ now & set routine flag to skip
"RTN","XPDI",131,0)
XPDIJ N DIE,XPDA,XCM,XCN,XCS,X
"RTN","XPDI",132,0)
 S XPDA=XPDIJ,DIE="^XTMP(""XPDI"",XPDIJ,""RTN"",""XPDIJ"",",XCN=0,X="XPDIJ"
"RTN","XPDI",133,0)
 X ^%ZOSF("SAVE")
"RTN","XPDI",134,0)
 S XCN=$$RTNUP^XPDUTL("XPDIJ",2)
"RTN","XPDI",135,0)
 Q
"RTN","XPDI",136,0)
 ;
"RTN","XPDI",137,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",138,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",139,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",140,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",141,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),! Q:XPDK=2
"RTN","XPDI",142,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",143,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP"),^XTMP("XPDI",XPDA)
"RTN","XPDI",144,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",145,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",146,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",147,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",148,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",149,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",150,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",151,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",152,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",153,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",154,0)
 D ^DIK
"RTN","XPDI",155,0)
 Q
"RTN","XPDI",156,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",157,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",158,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",159,0)
 W ! D ^DIR I Y D ABRTALL(1)
"RTN","XPDI",160,0)
 Q
"RTN","XPDI",161,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",162,0)
 N XPDA
"RTN","XPDI",163,0)
 S XPDT=0
"RTN","XPDI",164,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",165,0)
 Q
"RTN","XPDIL1")
0^7^B12892911
"RTN","XPDIL1",1,0)
XPDIL1 ;SFISC/RSD - cont. of load Distribution Global; 5 Apr 96 08:09 ;07/17/96  14:13
"RTN","XPDIL1",2,0)
 ;;8.0;KERNEL;**15,17,39**;Jul 10, 1995
"RTN","XPDIL1",3,0)
 ;
"RTN","XPDIL1",4,0)
PKG(XPDA) ;check Package file
"RTN","XPDIL1",5,0)
 N D,DIC,XPD,XPDCP,XPDNM,XPDNOQUE,XPDPKG,X,Y,%
"RTN","XPDIL1",6,0)
 S XPDNM=$P(XPDT(XPDIT),U,2)
"RTN","XPDIL1",7,0)
 I $$PKG^XPDUTL(XPDNM)'["KERNEL" D  I $D(XPDQUIT) D ABORT^XPDI(XPDA,1)
"RTN","XPDIL1",8,0)
 .Q:$O(XPDT("NM","KERNEL"))["KERNEL"
"RTN","XPDIL1",9,0)
 .S Y=$G(^XTMP("XPDI",XPDA,"VER"))
"RTN","XPDIL1",10,0)
 .I $$VERSION^XPDUTL("XU")<Y W !!,"BUT I NEED VERSION ",+Y," OF KERNEL!"  S XPDQUIT=1
"RTN","XPDIL1",11,0)
 .I $$VERSION^XPDUTL("VA FILEMAN")<$P(Y,U,2) W !,"BUT I NEED VERSION ",+$P(Y,U,2)," OF VA FILEMAN!" S XPDQUIT=1
"RTN","XPDIL1",12,0)
 S %=$O(^XTMP("XPDI",XPDA,"PKG",0)),XPDPKG(0)=$G(^(+%,0)),XPDPKG=%
"RTN","XPDIL1",13,0)
 I XPDPKG S DIC="^DIC(9.4," D  S XPDPKG=+Y_U_XPDPKG
"RTN","XPDIL1",14,0)
 .S DIC(0)="X",X=$P(XPDPKG(0),U) D ^DIC Q:Y>0
"RTN","XPDIL1",15,0)
 .S X=$P(XPDPKG(0),U,2),D="C" D IX^DIC
"RTN","XPDIL1",16,0)
 I XPDPKG>0 S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIL1",17,0)
 I '$G(XPDSKPE),$$ENV(0)=1 Q
"RTN","XPDIL1",18,0)
 Q:$D(XPDGP)
"RTN","XPDIL1",19,0)
 S XPDCP="INI" I '$$NEWCP^XPDUTL("XPD PREINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",20,0)
 S %=$$INRTN("INI")
"RTN","XPDIL1",21,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD PREINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",22,0)
 S XPDCP="INIT" I '$$NEWCP^XPDUTL("XPD POSTINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",23,0)
 S %=$$INRTN("INIT")
"RTN","XPDIL1",24,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD POSTINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",25,0)
 D XPCK^XPDIK("FIA"),XPCK^XPDIK("KRN")
"RTN","XPDIL1",26,0)
 Q
"RTN","XPDIL1",27,0)
INST(XPDNM) ;add to Install file
"RTN","XPDIL1",28,0)
 N DIC,DIR,DIRUT,DLAYGO,X,XPD,XPDA,XPDIE,XPDDIQ,Y
"RTN","XPDIL1",29,0)
 I $D(^XPD(9.7,"B",XPDNM)) S Y=0 D  Q:$D(XPD) XPD
"RTN","XPDIL1",30,0)
 .W !,"The following Entries already exist in the INSTALL file: ",!
"RTN","XPDIL1",31,0)
 .F  S Y=$O(^XPD(9.7,"B",XPDNM,Y)) Q:'Y  D
"RTN","XPDIL1",32,0)
 ..Q:'$D(^XPD(9.7,Y,0))  S %=^(0)
"RTN","XPDIL1",33,0)
 ..W !,$P(%,U),"   "
"RTN","XPDIL1",34,0)
 ..I $P(%,U,9)<3,$D(^XTMP("XPDI",Y)) W "**Transport Global already exists**",*7 S XPD=0 Q
"RTN","XPDIL1",35,0)
 ..W $$EXTERNAL^DILFD(9.7,.02,"",$P(%,U,9)),!,"was loaded on ",$$FMTE^XLFDT($P($G(^XPD(9.7,Y,1)),U))
"RTN","XPDIL1",36,0)
 .Q:$D(XPD)
"RTN","XPDIL1",37,0)
 .S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO"
"RTN","XPDIL1",38,0)
 .D ^DIR I $D(DIRUT)!'Y S XPD=0 Q
"RTN","XPDIL1",39,0)
 S DIC="^XPD(9.7,",DIC(0)="XL",DLAYGO=9.7,X=""""_XPDNM_""""
"RTN","XPDIL1",40,0)
 D ^DIC
"RTN","XPDIL1",41,0)
 I Y<0 W !,"Can't add Build ",XPDNM," to Install File" Q 0
"RTN","XPDIL1",42,0)
 S:'XPDST XPDST=+Y
"RTN","XPDIL1",43,0)
 S XPDA=+Y,XPDT(XPDIT)=XPDA_U_XPDNM,(XPDT("DA",XPDA),XPDT("NM",XPDNM))=XPDIT
"RTN","XPDIL1",44,0)
 S %="XPDIE(9.7,"""_XPDA_","")",@%@(.02)=0,@%@(2)=$$NOW^XLFDT,@%@(3)=XPDST,@%@(4)=XPDIT,@%@(5)="",@%@(6)=XPDST("H1")
"RTN","XPDIL1",45,0)
 D FILE^DIE("","XPDIE")
"RTN","XPDIL1",46,0)
 Q XPDA
"RTN","XPDIL1",47,0)
 ;
"RTN","XPDIL1",48,0)
ENV(XPDENV) ;enviroment check & version check
"RTN","XPDIL1",49,0)
 N %,XPDI,XPDABORT
"RTN","XPDIL1",50,0)
 I XPDPKG>0 S %=$$VER^XPDUTL(XPDNM) I %<$G(^DIC(9.4,+XPDPKG,"VERSION")) W !,"You have a Version greater than mine!",! D ABORT^XPDI(XPDA,1) Q 1
"RTN","XPDIL1",51,0)
 S %=$G(^XTMP("XPDI",XPDA,"PRE")) D:%]""
"RTN","XPDIL1",52,0)
 .W !,"Will first run the Environment Check Routine, ",%,!
"RTN","XPDIL1",53,0)
 .D SAVE^XPDIJ(%),@("^"_%)
"RTN","XPDIL1",54,0)
 I XPDENV S %=$G(^XTMP("XPDI",XPDA,"PATCH")) D:%]""
"RTN","XPDIL1",55,0)
 .N X S X=% X ^%ZOSF("TEST") E  Q
"RTN","XPDIL1",56,0)
 .W !,"Will run Patch Routine, ",X,!
"RTN","XPDIL1",57,0)
 .D @("^"_X)
"RTN","XPDIL1",58,0)
 I $G(XPDABORT) D  Q XPDQUIT
"RTN","XPDIL1",59,0)
 .I XPDABORT=2&'XPDENV S XPDQUIT=0
"RTN","XPDIL1",60,0)
 .D ABRTALL^XPDI(XPDABORT) S XPDQUIT=1
"RTN","XPDIL1",61,0)
 Q:'$D(XPDQUIT) 0
"RTN","XPDIL1",62,0)
 I $G(XPDQUIT) D:'(XPDQUIT=2&'XPDENV) ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",63,0)
 S XPDI=""
"RTN","XPDIL1",64,0)
 F  S XPDI=$O(XPDQUIT(XPDI)) Q:XPDI=""  D:'(XPDQUIT(XPDI)=2&'XPDENV)
"RTN","XPDIL1",65,0)
 .S %=$G(XPDT("NM",XPDI)) D:% ABORT^XPDI(+XPDT(%),XPDQUIT(XPDI))
"RTN","XPDIL1",66,0)
 S XPDQUIT=$S('$D(XPDT("NM",XPDNM)):1,$G(XPDQUIT):XPDQUIT,1:0)
"RTN","XPDIL1",67,0)
 Q XPDQUIT
"RTN","XPDIL1",68,0)
 ;
"RTN","XPDIL1",69,0)
INRTN(X) N Y
"RTN","XPDIL1",70,0)
 S Y=$G(^XTMP("XPDI",XPDA,X)) Q:Y="" ""
"RTN","XPDIL1",71,0)
 S Y=$S(Y["^":Y,1:"^"_Y)
"RTN","XPDIL1",72,0)
 Q Y
"RTN","XPDTC")
0^11^B34360594
"RTN","XPDTC",1,0)
XPDTC ;SFISC/RSD - Transport calls ;07/17/96  14:12
"RTN","XPDTC",2,0)
 ;;8.0;KERNEL;**10,15,21,39**;Jul 10, 1995
"RTN","XPDTC",3,0)
 Q
"RTN","XPDTC",4,0)
 ;^XTMP("XPDT",XPDA,data type,file #,
"RTN","XPDTC",5,0)
 ;XPDA=ien of File 9.6, XPDNM=.01 field
"RTN","XPDTC",6,0)
DD ;build DD
"RTN","XPDTC",7,0)
 N FILE,FGR,FNAM,Z2,Z3,Z4
"RTN","XPDTC",8,0)
 S FILE=0,FGR="^XTMP(""XPDT"",XPDA)",FNAM=$NA(^XPD(9.6,XPDA,4,"APDD"))
"RTN","XPDTC",9,0)
 F  S FILE=$O(^XPD(9.6,XPDA,4,FILE)) Q:'FILE  D
"RTN","XPDTC",10,0)
 .S Z2=$G(^XPD(9.6,XPDA,4,FILE,222)),Z3=$G(^(223)),Z4=$G(^(224))
"RTN","XPDTC",11,0)
 .Q:$$DATA^XPDV(FILE,Z2)
"RTN","XPDTC",12,0)
 .D FIA^DIFROMSU(FILE,"",FNAM,FGR,Z2,Z3,Z4,XPDVER),DIERR:$D(DIERR)
"RTN","XPDTC",13,0)
 Q:'$D(^XTMP("XPDT",XPDA,"FIA"))
"RTN","XPDTC",14,0)
 ;send DD and Data
"RTN","XPDTC",15,0)
 D DDOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR),DATAOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR)
"RTN","XPDTC",16,0)
 Q
"RTN","XPDTC",17,0)
 ;XPDERR is checked in XPDT and will abort transport
"RTN","XPDTC",18,0)
DIERR ;record error
"RTN","XPDTC",19,0)
 D MSG^DIALOG("EW",.XPD) S XPDERR=1
"RTN","XPDTC",20,0)
 Q
"RTN","XPDTC",21,0)
KRN ;build Kernel Files
"RTN","XPDTC",22,0)
 ;XPDFILE=file #, XPDOLDA=ien in Build file
"RTN","XPDTC",23,0)
 N %,%1,%2,DA,EACT,FACT,FGR,XPDFILE,XPDOLDA,XPDI,Y0
"RTN","XPDTC",24,0)
 F XPDFILE=1:1 S Y0=$P($T(FILES+XPDFILE^XPDE),";;",2,99) Q:Y0=""  S XPDI(+Y0)=Y0
"RTN","XPDTC",25,0)
 ;XPDI(XPDFILE)=file;order;x-ref;fact;eact;fpre;epre;fpos;epos;fdel
"RTN","XPDTC",26,0)
 S XPDFILE=0
"RTN","XPDTC",27,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  S XPDI=$G(XPDI(XPDFILE)),FACT=$P(XPDI,";",4),EACT=$P(XPDI,";",5) D  Q:$D(XPDERR)  D:FACT]"" ACT(FACT)
"RTN","XPDTC",28,0)
 .;need to add code to check if File and data is already being sent in the File
"RTN","XPDTC",29,0)
 .;mult. If it is, don't bother sending it again.  DTL(XPDFILE)
"RTN","XPDTC",30,0)
 .S XPDOLDA=0,FGR=$$FILE^XPDV(XPDFILE) I FGR="" S XPDERR=1 Q
"RTN","XPDTC",31,0)
 .K ^TMP($J,"XPD")
"RTN","XPDTC",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDTC",33,0)
 ..;If deleting at site get an unused DA
"RTN","XPDTC",34,0)
 ..I $P(Y0,U,3)=1 S DA=$O(@FGR@(" "),-1)+1 F DA=DA:1 Q:'$D(^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA))
"RTN","XPDTC",35,0)
 ..;$P(Y0,U,2) is file # for this template, reset Y0 before getting DA
"RTN","XPDTC",36,0)
 ..E  S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY^XPDV(Y0)
"RTN","XPDTC",37,0)
 ..I 'DA S XPDERR=1 Q
"RTN","XPDTC",38,0)
 ..;(-1)=action flag: 1-delete,2-link,3-merge menus '^' ien in Build file
"RTN","XPDTC",39,0)
 ..S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,-1)=+$P(Y0,U,3)_"^"_XPDOLDA
"RTN","XPDTC",40,0)
 ..;if action is 1-delete then only send .01 field and set checksum to ""
"RTN","XPDTC",41,0)
 ..I $P(Y0,U,3)=1 S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,0)=$P(Y0,U),$P(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA),U,4)="" Q
"RTN","XPDTC",42,0)
 ..M ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)=@FGR@(DA)
"RTN","XPDTC",43,0)
 ..;execute entry build action
"RTN","XPDTC",44,0)
 ..D:EACT]"" ACT(EACT)
"RTN","XPDTC",45,0)
 .;quit if no entries were saved
"RTN","XPDTC",46,0)
 .Q:'$O(^XTMP("XPDT",XPDA,"KRN",XPDFILE,0))
"RTN","XPDTC",47,0)
 .;XPDI=XPDI(XPDFILE), build x-ref of order to install
"RTN","XPDTC",48,0)
 .S %=$P(^DIC(XPDFILE,0),U),^XTMP("XPDT",XPDA,"ORD",+$P(XPDI,";",2),XPDFILE)=XPDI,^(XPDFILE,0)=%
"RTN","XPDTC",49,0)
 .Q
"RTN","XPDTC",50,0)
 Q
"RTN","XPDTC",51,0)
QUES ;build from Install Questions multiple
"RTN","XPDTC",52,0)
 N I,J,X,%
"RTN","XPDTC",53,0)
 S X=""
"RTN","XPDTC",54,0)
 ;the "B" x-ref will give me the order of the questions
"RTN","XPDTC",55,0)
 F  S X=$O(^XPD(9.6,XPDA,"QUES","B",X)) Q:X=""  S I=$$QUES^XPDV(X) S:'I XPDERR=1 D:I
"RTN","XPDTC",56,0)
 .S J=0 F  S J=$O(^XPD(9.6,XPDA,"QUES",I,J)) Q:J=""  D
"RTN","XPDTC",57,0)
 ..;tranform J to DIR subscripts
"RTN","XPDTC",58,0)
 ..I $L(J)=1!(J="QQ") S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"1ABQ","0AB?"))=^(J) Q  ;^(J) ref to ^XPD(9.6,XPDA,"QUES",I,J)
"RTN","XPDTC",59,0)
 ..;set the word processing fields into DIR("?",#) structure
"RTN","XPDTC",60,0)
 ..F %=1:1 Q:'$D(^XPD(9.6,XPDA,"QUES",I,J,%,0))  S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"AQ10","A?"),%)=^(0)
"RTN","XPDTC",61,0)
 ;send the File questions
"RTN","XPDTC",62,0)
 F I=1:2 S X=$P($T(QUESTION+I),";;",2) Q:X=""  S Y=$P($T(QUESTION+I+1),";;",2) D
"RTN","XPDTC",63,0)
 .S ^XTMP("XPDT",XPDA,"QUES",$P(X,";"),0)=$P(X,";",2),^("A")=$P(X,";",3),^("B")=$P(X,";",4),^("??")=$P(X,";",5) S:Y]"" ^("M")=Y
"RTN","XPDTC",64,0)
 Q
"RTN","XPDTC",65,0)
INT ;build pre,post, & enviroment init routines
"RTN","XPDTC",66,0)
 N %,I,X
"RTN","XPDTC",67,0)
 F I="PRE","INI","INIT" I $G(^XPD(9.6,XPDA,I))]"" S X=^(I) D
"RTN","XPDTC",68,0)
 .S ^XTMP("XPDT",XPDA,I)=X,X=$P(X,U,$L(X,U)) Q:$D(^("RTN",X))
"RTN","XPDTC",69,0)
 .I '$$RTN^XPDV(X) W !,"Routine ",X," **NOT FOUND**" S XPDERR=1 Q
"RTN","XPDTC",70,0)
 .S %=$$LOAD^XPDTA(X,"0^")
"RTN","XPDTC",71,0)
 Q
"RTN","XPDTC",72,0)
BLD ;build Build file, Package file and Order Parameter file
"RTN","XPDTC",73,0)
 N %,DIC,X,XPD,XPDI,XPDV,Y
"RTN","XPDTC",74,0)
 ;save version of kernel and fm
"RTN","XPDTC",75,0)
 S ^XTMP("XPDT",XPDA,"VER")=$$VERSION^XPDUTL("XU")_U_$$VERSION^XPDUTL("VA FILEMAN")
"RTN","XPDTC",76,0)
 M ^XTMP("XPDT",XPDA,"BLD",XPDA)=^XPD(9.6,XPDA)
"RTN","XPDTC",77,0)
 ;check national package file pointer
"RTN","XPDTC",78,0)
 S XPDI=+$P(^XPD(9.6,XPDA,0),U,2) Q:'XPDI
"RTN","XPDTC",79,0)
 S $P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,2)=$$PT^XPDTA("^DIC(9.4)",XPDI)
"RTN","XPDTC",80,0)
 ;quit if no pointer to package file
"RTN","XPDTC",81,0)
 Q:'$D(^DIC(9.4,XPDI))
"RTN","XPDTC",82,0)
 ;update version multiple in package file,XPD=version^date distributed
"RTN","XPDTC",83,0)
 S XPD=$$VER^XPDUTL(XPDNM)_U_$P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,4)
"RTN","XPDTC",84,0)
 ;XPD(1)=root of description field
"RTN","XPDTC",85,0)
 S:$D(^XTMP("XPDT",XPDA,"BLD",XPDA,1)) XPD(1)=$NA(^(1))
"RTN","XPDTC",86,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,0)=^DIC(9.4,XPDI,0),^XTMP("XPDT",XPDA,"PKG",XPDI,22,0)=$P(^DIC(9.4,XPDI,22,0),"^",1,2)_"^1^1"
"RTN","XPDTC",87,0)
 ;XPDNM'["*" is a version release
"RTN","XPDTC",88,0)
 I XPDNM'["*" D
"RTN","XPDTC",89,0)
 .S XPDV=$$PKGVER^XPDIP(XPDI,.XPD)
"RTN","XPDTC",90,0)
 .;Merge is used to set single nodes and merge multiples
"RTN","XPDTC",91,0)
 .F %=1,5,7,20,"DEV","VERSION" M ^XTMP("XPDT",XPDA,"PKG",XPDI,%)=^DIC(9.4,XPDI,%)
"RTN","XPDTC",92,0)
 .;XPDV=ien of Version Multiple
"RTN","XPDTC",93,0)
 .I $D(^DIC(9.4,XPDI,22,XPDV))'>9 W !!,"**Version multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",94,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1)=^DIC(9.4,XPDI,22,XPDV)
"RTN","XPDTC",95,0)
 ;this is a patch, %=version number, $P(XPD,U)=patch number
"RTN","XPDTC",96,0)
 E  D
"RTN","XPDTC",97,0)
 .S %=$P(XPD,U),$P(XPD,U)=$P(XPDNM,"*",3),XPDV=$$PKGPAT^XPDIP(XPDI,%,.XPD)
"RTN","XPDTC",98,0)
 .S ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,0)=^DIC(9.4,XPDI,22,+XPDV,0)
"RTN","XPDTC",99,0)
 .I $D(^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2)))'>9 W !!,"**Patch multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",100,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,"PAH",1)=^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2))
"RTN","XPDTC",101,0)
 ;M ^XTMP("XPDT",XPDA,"PKG",XPDI)=^DIC(9.4,XPDI)
"RTN","XPDTC",102,0)
 ;save the version ien^patch ien on -1 node
"RTN","XPDTC",103,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,-1)="1^1"
"RTN","XPDTC",104,0)
 ;resolve Primary Help Frame (0;4)
"RTN","XPDTC",105,0)
 S %=+$P(^DIC(9.4,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"PKG",XPDI,0),U,4)=$$PT^XPDTA("^DIC(9.2)",%)
"RTN","XPDTC",106,0)
 ;transport the PACKAGE PARAMETER multiple under file 100.99
"RTN","XPDTC",107,0)
 ;quit of GLOBAL PACKAGE
"RTN","XPDTC",108,0)
 Q:'$D(^ORD(100.99,1,5,XPDI,0))!$D(XPDGP)
"RTN","XPDTC",109,0)
 M ^XTMP("XPDT",XPDA,"OER",XPDI)=^ORD(100.99,1,5,XPDI)
"RTN","XPDTC",110,0)
 ;resolve Display Group Default (0;4)
"RTN","XPDTC",111,0)
 S %=+$P(^ORD(100.99,1,5,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"OER",XPDI,0),U,4)=$$PT^XPDTA("^ORD(100.98)",%)
"RTN","XPDTC",112,0)
 Q
"RTN","XPDTC",113,0)
 ;
"RTN","XPDTC",114,0)
ACT(%) ;execute action
"RTN","XPDTC",115,0)
 ;user can count on DA,XPDFILE,XPDNM,XPDOLDA being around
"RTN","XPDTC",116,0)
 ;DA=ien in ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)
"RTN","XPDTC",117,0)
 ;XPDOLDA=ien in ^XPD(9.6,XPDA,"KRN",XPDIFLE,"NM",XPDOLDA)
"RTN","XPDTC",118,0)
 N EACT,FACT,FGR,K0,Y0
"RTN","XPDTC",119,0)
 S:%'["^" %="^"_%
"RTN","XPDTC",120,0)
 D @% Q
"RTN","XPDTC",121,0)
 ;
"RTN","XPDTC",122,0)
 ;the following are the default questions for the INSTALL QUESTIONS
"RTN","XPDTC",123,0)
 ;in file 9.6, the format is:
"RTN","XPDTC",124,0)
 ;;field .01;field 1;field 2;field 4;field 7
"RTN","XPDTC",125,0)
 ;;field 10
"RTN","XPDTC",126,0)
QUESTION ;package install questions
"RTN","XPDTC",127,0)
 ;;XPF1;Y;Shall I write over your |FLAG| File;YES;^D REP^XPDH
"RTN","XPDTC",128,0)
 ;;D XPF1^XPDIQ
"RTN","XPDTC",129,0)
 ;;XPF2;Y;Want my data |FLAG| yours;YES;^D DTA^XPDH
"RTN","XPDTC",130,0)
 ;;D XPF2^XPDIQ
"RTN","XPDTC",131,0)
 ;;XPZ1;Y;Want to DISABLE Scheduled Options, Menu Options, and Protocols;YES;^D OPT^XPDH
"RTN","XPDTC",132,0)
 ;;D XPZ1^XPDIQ
"RTN","XPDTC",133,0)
 ;;XPZ2;Y;Want to MOVE routines to other CPUs;NO;^D RTN^XPDH
"RTN","XPDTC",134,0)
 ;;D XPZ2^XPDIQ
"RTN","XPDUTL")
0^12^B11296103
"RTN","XPDUTL",1,0)
XPDUTL ;SFISC/RSD - KIDS utilities ;07/17/96  14:12
"RTN","XPDUTL",2,0)
 ;;8.0;KERNEL;**21,28,39**;Jul 10, 1995
"RTN","XPDUTL",3,0)
 Q
"RTN","XPDUTL",4,0)
VERSION(X) ;Get current version from Package file, X=package name or
"RTN","XPDUTL",5,0)
 ;package namespace
"RTN","XPDUTL",6,0)
 N I
"RTN","XPDUTL",7,0)
 S I=$O(^DIC(9.4,"C",X,0)) S:I'>0 I=$O(^DIC(9.4,"B",X,0))
"RTN","XPDUTL",8,0)
 Q $P($G(^DIC(9.4,+I,"VERSION")),"^")
"RTN","XPDUTL",9,0)
 ;
"RTN","XPDUTL",10,0)
VER(X) ;returns version number from Build file, X=build name
"RTN","XPDUTL",11,0)
 Q:X["*" $P(X,"*",2)
"RTN","XPDUTL",12,0)
 Q $P(X," ",$L(X," "))
"RTN","XPDUTL",13,0)
 ;
"RTN","XPDUTL",14,0)
PKG(X) ;returns package name from Build file, X=build name
"RTN","XPDUTL",15,0)
 Q $S(X["*":$P(X,"*"),1:$P(X," ",1,$L(X," ")-1))
"RTN","XPDUTL",16,0)
 ;
"RTN","XPDUTL",17,0)
PATCH(X) ;return 1 if patch X was installed, X=aaaa*nn.nn*nnn
"RTN","XPDUTL",18,0)
 Q:X'?1.4U1"*"1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.3N 0
"RTN","XPDUTL",19,0)
 N %,I,J
"RTN","XPDUTL",20,0)
 S I=$O(^DIC(9.4,"C",$P(X,"*"),0)) Q:'I 0
"RTN","XPDUTL",21,0)
 S J=$O(^DIC(9.4,I,22,"B",$P(X,"*",2),0)),X=$P(X,"*",3) Q:'J 0
"RTN","XPDUTL",22,0)
 ;check if patch is just a number
"RTN","XPDUTL",23,0)
 Q:$O(^DIC(9.4,I,22,J,"PAH","B",X,0)) 1
"RTN","XPDUTL",24,0)
 S %=$O(^DIC(9.4,I,22,J,"PAH","B",X_" SEQ"))
"RTN","XPDUTL",25,0)
 Q (X=+%)
"RTN","XPDUTL",26,0)
 ;
"RTN","XPDUTL",27,0)
NEWCP(XPD,XPDC,XPDP) ;create new check point, returns 0=error or ien
"RTN","XPDUTL",28,0)
 ;XPD=name, XPDC=call back, XPDP=parameters
"RTN","XPDUTL",29,0)
 Q:$G(XPD)="" 0
"RTN","XPDUTL",30,0)
 N %,XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",31,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",32,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713)
"RTN","XPDUTL",33,0)
 S %=$$FIND1^DIC(XPDI,","_XPDA_",","X",XPD) Q:% %
"RTN","XPDUTL",34,0)
 S XPDF="+1,"_XPDA_",",XPDJ(XPDI,XPDF,.01)=XPD
"RTN","XPDUTL",35,0)
 S:$D(XPDC) XPDJ(XPDI,XPDF,2)=XPDC
"RTN","XPDUTL",36,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",37,0)
 D UPDATE^DIE("","XPDJ","XPDY")
"RTN","XPDUTL",38,0)
 Q $G(XPDY(1))
"RTN","XPDUTL",39,0)
 ;
"RTN","XPDUTL",40,0)
UPCP(XPD,XPDP) ;update check point, returns 0=error or ien
"RTN","XPDUTL",41,0)
 ;XPD=name, XPDP=parameters
"RTN","XPDUTL",42,0)
 N XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",43,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",44,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",45,0)
 Q:'XPDY 0
"RTN","XPDUTL",46,0)
 S XPDF=XPDY_","_XPDA_","
"RTN","XPDUTL",47,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",48,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",49,0)
 Q XPDY
"RTN","XPDUTL",50,0)
 ;
"RTN","XPDUTL",51,0)
COMCP(XPD) ;complete check point, returns 0=error or date/time
"RTN","XPDUTL",52,0)
 ;XPD=name
"RTN","XPDUTL",53,0)
 N XPDD,XPDI,XPDJ,XPDY
"RTN","XPDUTL",54,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",55,0)
 Q:'XPDY 0
"RTN","XPDUTL",56,0)
 S XPDD=$$NOW^XLFDT,XPDJ(XPDI,XPDY_","_XPDA_",",1)=XPDD
"RTN","XPDUTL",57,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",58,0)
 Q XPDD
"RTN","XPDUTL",59,0)
 ;
"RTN","XPDUTL",60,0)
VERCP(XPD) ;verify check point, returns 1=completed, 0=not
"RTN","XPDUTL",61,0)
 ;-1=doesn't exist
"RTN","XPDUTL",62,0)
 ;XPD=name
"RTN","XPDUTL",63,0)
 N XPDI,XPDY
"RTN","XPDUTL",64,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",65,0)
 Q:'XPDY -1
"RTN","XPDUTL",66,0)
 Q ''$$GET1^DIQ(XPDI,XPDY_","_XPDA_",",1,"I")
"RTN","XPDUTL",67,0)
 ;
"RTN","XPDUTL",68,0)
PARCP(XPD,XPDF) ;returns parameters of check point
"RTN","XPDUTL",69,0)
 ;XPD=name, XPDF="PRE"
"RTN","XPDUTL",70,0)
 N XPDI,XPDY
"RTN","XPDUTL",71,0)
 I $G(XPDF)="PRE" N XPDCP S XPDCP="INI"
"RTN","XPDUTL",72,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",73,0)
 Q:'XPDY 0
"RTN","XPDUTL",74,0)
 Q $$GET1^DIQ(XPDI,XPDY_","_XPDA_",",3,"I")
"RTN","XPDUTL",75,0)
 ;
"RTN","XPDUTL",76,0)
CURCP(XPDF) ;returns current check point
"RTN","XPDUTL",77,0)
 ;XPDF flag - 0=externel, 1=internal
"RTN","XPDUTL",78,0)
 Q $S($G(XPDF):XPDCHECK,1:XPDCHECK(0))
"RTN","XPDUTL",79,0)
 ;
"RTN","XPDUTL",80,0)
WP(X) ;X=global ref
"RTN","XPDUTL",81,0)
 N %
"RTN","XPDUTL",82,0)
 Q:'$D(@X)
"RTN","XPDUTL",83,0)
 F %=1:1 Q:'$D(@X@(%))  W !,@X@(%)
"RTN","XPDUTL",84,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A",X)
"RTN","XPDUTL",85,0)
 Q
"RTN","XPDUTL",86,0)
MES(X) ;record message, X=message or an array passed by reference
"RTN","XPDUTL",87,0)
 N %
"RTN","XPDUTL",88,0)
 I $D(X)#2 S %=X K X S X(1)=%
"RTN","XPDUTL",89,0)
 ;write message
"RTN","XPDUTL",90,0)
 F %=1:1 Q:'$D(X(%))  W !,X(%)
"RTN","XPDUTL",91,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A","X")
"RTN","XPDUTL",92,0)
 Q
"RTN","XPDUTL",93,0)
BMES(X) ;add blank line before message
"RTN","XPDUTL",94,0)
 N %
"RTN","XPDUTL",95,0)
 I $D(X)#2 S %=X K X S X(1)=" ",X(2)=%
"RTN","XPDUTL",96,0)
 D MES(.X)
"RTN","XPDUTL",97,0)
 Q
"RTN","XPDUTL",98,0)
RTNUP(X,Y) ;update routine action, X=routine, Y=action
"RTN","XPDUTL",99,0)
 ;actions:  1=delete, 2=skip
"RTN","XPDUTL",100,0)
 N %
"RTN","XPDUTL",101,0)
 ;set action to Y
"RTN","XPDUTL",102,0)
 Q:'$G(Y)!'$D(^XTMP("XPDI",$G(XPDA),"RTN",X)) 0 S $P(^(X),U)=+Y
"RTN","XPDUTL",103,0)
 Q 1
"RTN","XPDUTL",104,0)
 ;get Build ien
"RTN","XPDUTL",105,0)
 S Y=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDUTL",106,0)
 ;remove checksum when updating action, since action can only be
"RTN","XPDUTL",107,0)
 ;delete or skip, not sure if we want to do this
"RTN","XPDUTL",108,0)
 S:$P(%,U,2) $P(^XTMP("XPDI",XPDA,"BLD",Y,"KRN",9.8,"NM",$P(%,U,2),0),U,4)=""
"RTN","XPDUTL",109,0)
 Q 1
"RTN","XPDUTL",110,0)
DICCP(X) ;lookup check point, returns ien or 0
"RTN","XPDUTL",111,0)
 Q:$G(X)="" 0
"RTN","XPDUTL",112,0)
 ;if they pass ien, fail if can't find
"RTN","XPDUTL",113,0)
 I X=+X S Y=X Q:'$D(^XPD(9.7,XPDA,XPDCP,Y,0)) 0
"RTN","XPDUTL",114,0)
 E  S Y=$$FIND1^DIC(XPDI,","_XPDA_",","X",X)
"RTN","XPDUTL",115,0)
 Q Y
"RTN","XPDUTL",116,0)
 ;
"RTN","XPDUTL",117,0)
PRODE(XPDN,XPD) ;enable/disable protocols, return 1 for success
"RTN","XPDUTL",118,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",119,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",120,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",121,0)
 D KIDS^XQOO1(XPDSET,101,XPDN,.XPD)
"RTN","XPDUTL",122,0)
 Q $S(XPD<0:0,1:1)
"RTN","XPDUTL",123,0)
 ;
"RTN","XPDUTL",124,0)
OPTDE(XPDN,XPD) ;enable/disable options, return 1 for success
"RTN","XPDUTL",125,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",126,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",127,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",128,0)
 D KIDS^XQOO1(XPDSET,19,XPDN,.XPD)
"RTN","XPDUTL",129,0)
 Q $S(XPD<0:0,1:1)
"RTN","XQOO1")
0^10^B71322845
"RTN","XQOO1",1,0)
XQOO1 ;Luke/SEA - Out-of-order set calls ;07/17/96  14:31
"RTN","XQOO1",2,0)
 ;;8.0;KERNEL;**10,21,39**;Jul 10, 1995
"RTN","XQOO1",3,0)
 ;
"RTN","XQOO1",4,0)
OFF(XQSET) ;Mark options and protocols Out Of Order
"RTN","XQOO1",5,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",6,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",7,0)
 ;
"RTN","XQOO1",8,0)
 S XQN=0
"RTN","XQOO1",9,0)
 I $D(^XTMP("XQOO",XQSET,19)) F  Q:XQN=""  D
"RTN","XQOO1",10,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,19,XQN))
"RTN","XQOO1",11,0)
 .Q:XQN=""
"RTN","XQOO1",12,0)
 .I $D(^DIC(19,XQN,0))#2,$P(^(0),U,3)]"" S $P(^XTMP("XQOO",XQSET,19,0),U,3)=$P(^DIC(19,XQN,0),U,3) ;Save off current OOO message
"RTN","XQOO1",13,0)
 .I $D(^DIC(19,XQN,0))#2 S $P(^(0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",14,0)
 .Q
"RTN","XQOO1",15,0)
 ;
"RTN","XQOO1",16,0)
 S XQN=0
"RTN","XQOO1",17,0)
 I $D(^XTMP("XQOO",XQSET,101)) F  Q:XQN=""  D
"RTN","XQOO1",18,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,101,XQN))
"RTN","XQOO1",19,0)
 .Q:XQN=""
"RTN","XQOO1",20,0)
 .I $D(^ORD(101,XQN,0))#2,$P(^(0),U,3)]"" S $P(^XTMP("XQOO",XQSET,101,XQN),U,3)=$P(^ORD(101,XQN,0),U,3)
"RTN","XQOO1",21,0)
 .I $D(^ORD(101,XQN,0))#2 S $P(^(0),U,3)=XQMESS
"RTN","XQOO1",22,0)
 .Q
"RTN","XQOO1",23,0)
 D OUT
"RTN","XQOO1",24,0)
 D KICK^XQ7
"RTN","XQOO1",25,0)
 Q
"RTN","XQOO1",26,0)
 ;
"RTN","XQOO1",27,0)
ON(XQSET) ;Remove Out Of Order messages from the set XQSET
"RTN","XQOO1",28,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",29,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",30,0)
 ;
"RTN","XQOO1",31,0)
 S XQN=0
"RTN","XQOO1",32,0)
 I $D(^XTMP("XQOO",XQSET,19)) F  Q:XQN=""  D
"RTN","XQOO1",33,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,19,XQN))
"RTN","XQOO1",34,0)
 .Q:XQN=""
"RTN","XQOO1",35,0)
 .I $D(^DIC(19,XQN,0))#2,$P(^(0),U,3)=XQMESS S $P(^(0),U,3)="",DA=XQN D REDO^XQ7
"RTN","XQOO1",36,0)
 .I $P(^XTMP("XQOO",XQSET,19,XQN),U,3)]"" S $P(^DIC(19,XQN,0),U,3)=$P(^XTMP("XQOO",XQSET,19,XQN),U,3)
"RTN","XQOO1",37,0)
 .Q
"RTN","XQOO1",38,0)
 ;
"RTN","XQOO1",39,0)
 S XQN=0
"RTN","XQOO1",40,0)
 I $D(^XTMP("XQOO",XQSET,101)) F  Q:XQN=""  D
"RTN","XQOO1",41,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,101,XQN))
"RTN","XQOO1",42,0)
 .Q:XQN=""
"RTN","XQOO1",43,0)
 .I $D(^ORD(101,XQN,0))#2,$P(^(0),U,3)=XQMESS S $P(^(0),U,3)=""
"RTN","XQOO1",44,0)
 .I $P(^XTMP("XQOO",XQSET,101,XQN),U,3)]"" S $P(^ORD(101,XQN,0),U,3)=$P(^XTMP("XQOO",XQSET,101,XQN),U,3)
"RTN","XQOO1",45,0)
 .Q
"RTN","XQOO1",46,0)
 ;
"RTN","XQOO1",47,0)
 I '$D(XPDSET) D
"RTN","XQOO1",48,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",49,0)
 .S DIR("A")="Should I remove the option set "_XQSET_" from ^XTMP?"
"RTN","XQOO1",50,0)
 .S DIR("?")=XQSET_" is the list of options and/or protocols you just turned on."
"RTN","XQOO1",51,0)
 .D ^DIR
"RTN","XQOO1",52,0)
 .I Y K ^XTMP("XQOO",XQSET)
"RTN","XQOO1",53,0)
 .K DIR,Y
"RTN","XQOO1",54,0)
 .Q
"RTN","XQOO1",55,0)
 D OUT
"RTN","XQOO1",56,0)
 D KICK^XQ7
"RTN","XQOO1",57,0)
 Q
"RTN","XQOO1",58,0)
 ;
"RTN","XQOO1",59,0)
ADD(XQSET,XQFIL,XQN) ;New option/protocol - add to set and mark it OOO
"RTN","XQOO1",60,0)
 ;Called by KIDS during a build
"RTN","XQOO1",61,0)
 I '$D(^XTMP("XQOO",XQSET,0)) S XQSET="^" D OUT Q
"RTN","XQOO1",62,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",63,0)
 S XQGL=$S(XQFIL=19:"^DIC(",1:"^ORD(")
"RTN","XQOO1",64,0)
 S %=@(XQGL_XQFIL_","_XQN_",0)"),^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(%,U)_"^"_$P(%,U,2)
"RTN","XQOO1",65,0)
 S %=XQGL_XQFIL_","_XQN_",0)",$P(@%,U,3)=XQMESS
"RTN","XQOO1",66,0)
 D OUT
"RTN","XQOO1",67,0)
 Q
"RTN","XQOO1",68,0)
 ;
"RTN","XQOO1",69,0)
KIDS(XQSET,XQFIL,XQNAME,XQFLAG) ;Turn on/off an option or protocol
"RTN","XQOO1",70,0)
 ;Called only from KIDS during an install so OERR would work
"RTN","XQOO1",71,0)
 ;XQFLAG is set to 0 to put an option or protocol out of order,
"RTN","XQOO1",72,0)
 ;1 to turn it on, and I return it as -1 if the request 
"RTN","XQOO1",73,0)
 ;fails.
"RTN","XQOO1",74,0)
 ;
"RTN","XQOO1",75,0)
 N XQGL,XQMESS,XQMES2,XQN
"RTN","XQOO1",76,0)
 I '$D(^XTMP("XQOO",XQSET)) S XQFLAG=-1 Q
"RTN","XQOO1",77,0)
 S XQGL=$S(XQFIL=19:"^DIC(19)",XQFIL=101:"^ORD(101)",1:"")
"RTN","XQOO1",78,0)
 I XQGL="" S XQFLAG=-1 Q
"RTN","XQOO1",79,0)
 I XQNAME=+XQNAME S XQN=XQNAME
"RTN","XQOO1",80,0)
 E  D  I XQFLAG<0 Q
"RTN","XQOO1",81,0)
 .S XQN=$O(@XQGL@("B",XQNAME,0)) I XQN'>0 S XQFLAG=-1
"RTN","XQOO1",82,0)
 .Q
"RTN","XQOO1",83,0)
 S %=@XQGL@(XQN,0) S XQMES2=$S($P(%,U,3)]"":$P(%,U,3),1:"")
"RTN","XQOO1",84,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",85,0)
 I XQMESS=XQMES2 S XQMES2=""
"RTN","XQOO1",86,0)
        I '$D(^XTMP("XQOO",XQSET,XQFIL,XQN)) S ^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(@XQGL@(XQN,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",87,0)
 ;
"RTN","XQOO1",88,0)
 I 'XQFLAG D
"RTN","XQOO1",89,0)
 .I XQMES2]"" S $P(^XTMP("XQOO",XQSET,XQFIL,XQN),U,3)=XQMES2
"RTN","XQOO1",90,0)
 .S $P(@XQGL@(XQN,0),U,3)=XQMESS
"RTN","XQOO1",91,0)
 .Q
"RTN","XQOO1",92,0)
 I XQFLAG D
"RTN","XQOO1",93,0)
 .S $P(@XQGL@(XQN,0),U,3)=""
"RTN","XQOO1",94,0)
 .Q
"RTN","XQOO1",95,0)
 ;
"RTN","XQOO1",96,0)
OUT ;Exit point
"RTN","XQOO1",97,0)
 K %,XQFIL,XQGL,XQMESS,XQN,XQS
"RTN","XQOO1",98,0)
 Q
"RTN","XQOO1",99,0)
 ;
"RTN","XQOO1",100,0)
OFFOP ;Option entry for turning off options
"RTN","XQOO1",101,0)
 W !
"RTN","XQOO1",102,0)
 S XQSET=""
"RTN","XQOO1",103,0)
 D GETSET(.XQSET)
"RTN","XQOO1",104,0)
 I XQSET]"" D
"RTN","XQOO1",105,0)
 .S DIR(0)="Y",DIR("B")="N"
"RTN","XQOO1",106,0)
 .S DIR("A")="Mark the options in "_XQSET_" Out-Of Order now"
"RTN","XQOO1",107,0)
 .S DIR("?")="If you answer ""Yes"" you will mark all the options in the set "_XQSET_" Out Of Order."
"RTN","XQOO1",108,0)
 .D ^DIR
"RTN","XQOO1",109,0)
 .I Y D OFF(XQSET)
"RTN","XQOO1",110,0)
 .K DIR,X,Y
"RTN","XQOO1",111,0)
 .Q
"RTN","XQOO1",112,0)
 Q
"RTN","XQOO1",113,0)
 ;
"RTN","XQOO1",114,0)
 ;
"RTN","XQOO1",115,0)
ONOP ;Option entry for turning on options
"RTN","XQOO1",116,0)
 S XQSET=""
"RTN","XQOO1",117,0)
 D GETSET(.XQSET)
"RTN","XQOO1",118,0)
 I XQSET]"" D
"RTN","XQOO1",119,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",120,0)
 .S DIR("A")="Return options in "_XQSET_" to general use"
"RTN","XQOO1",121,0)
 .S DIR("?")="If you answer ""Yes"" you will remove the Out-Of-Order message from the options in the set "_XQSET
"RTN","XQOO1",122,0)
 .D ^DIR
"RTN","XQOO1",123,0)
 .I Y D ON(XQSET)
"RTN","XQOO1",124,0)
 .K DIR,X,Y
"RTN","XQOO1",125,0)
 .Q
"RTN","XQOO1",126,0)
 D KICK^XQ7
"RTN","XQOO1",127,0)
 Q
"RTN","XQOO1",128,0)
 ;
"RTN","XQOO1",129,0)
GETSET(XQSET) ;Get the name of the option set in question
"RTN","XQOO1",130,0)
 I '$D(^XTMP("XQOO")) W !!,"There are currently no option sets definded in ^XTMP." Q
"RTN","XQOO1",131,0)
 S XQI=0
"RTN","XQOO1",132,0)
 D SETS^XQOO2(.XQI)
"RTN","XQOO1",133,0)
 I XQI=1 S XQSET=0,XQSET=$O(^XTMP("XQOO",XQSET)) Q
"RTN","XQOO1",134,0)
 I XQI>1 D
"RTN","XQOO1",135,0)
 .S DIR(0)="NO^1:"_XQI,DIR("B")=XQI
"RTN","XQOO1",136,0)
 .S DIR("A")=" Please enter the number of the option set you want"
"RTN","XQOO1",137,0)
 .S DIR("?")=" Which option set do you want to work with? 1, "_XQI_" etc."
"RTN","XQOO1",138,0)
 .W !
"RTN","XQOO1",139,0)
 .D ^DIR
"RTN","XQOO1",140,0)
 .S XQSET=0 F XQI=1:1:+Y S XQSET=$O(^XTMP("XQOO",XQSET))
"RTN","XQOO1",141,0)
 .Q
"RTN","XQOO1",142,0)
 K XQI
"RTN","XQOO1",143,0)
 Q
"RTN","XQOO1",144,0)
 ;
"RTN","XQOO1",145,0)
 ;
"RTN","XQOO1",146,0)
REBLD ;Rebuild a "lost" set of options and protocols
"RTN","XQOO1",147,0)
 N XQ,XQMESS,XQOP,XQPROT,XQSET
"RTN","XQOO1",148,0)
 S (XQOP,XQPROT)=0
"RTN","XQOO1",149,0)
 ;
"RTN","XQOO1",150,0)
 S DIR(0)="F^3:30"
"RTN","XQOO1",151,0)
 S DIR("A")=" Please enter the exact Out-Of-Order message"
"RTN","XQOO1",152,0)
 S DIR("?")=" All options/protocols with this message are reclaimed into a set in ^XTMP"
"RTN","XQOO1",153,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",154,0)
 S XQMESS=X K DIR
"RTN","XQOO1",155,0)
 ;
"RTN","XQOO1",156,0)
RE1 S DIR(0)="F^1:20"
"RTN","XQOO1",157,0)
 S DIR("A")=" What do you want to name the recovered set? "
"RTN","XQOO1",158,0)
 S DIR("?")=" Enter any name of up to 20 characters"
"RTN","XQOO1",159,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",160,0)
 S XQSET=X K DIR
"RTN","XQOO1",161,0)
 I $D(^XTMP("XQOO",XQSET,0)) D  G RE1
"RTN","XQOO1",162,0)
 .W !,"Sorry, that set already exists.  Use the Create/Modify option to"
"RTN","XQOO1",163,0)
 .W !?3,"modify it, or choose another name."
"RTN","XQOO1",164,0)
 .Q
"RTN","XQOO1",165,0)
 ;
"RTN","XQOO1",166,0)
REFIND ;Find options and protocols with the message XQMESS
"RTN","XQOO1",167,0)
 S XQ=0 F  S XQ=$O(^DIC(19,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",168,0)
 .Q:$P(^DIC(19,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",169,0)
 .S ^XTMP("XQOO",XQSET,19,XQ)=$P(^DIC(19,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",170,0)
 .S XQOP=XQOP+1
"RTN","XQOO1",171,0)
 .Q
"RTN","XQOO1",172,0)
 ;
"RTN","XQOO1",173,0)
 S XQ=0 F  S XQ=$O(^ORD(101,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",174,0)
 .Q:$P(^ORD(101,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",175,0)
 .S ^XTMP("XQOO",XQSET,101,XQ)=$P(^ORD(101,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",176,0)
 .S XQPROT=XQPROT+1
"RTN","XQOO1",177,0)
 .Q
"RTN","XQOO1",178,0)
 ;
"RTN","XQOO1",179,0)
 I XQOP>0!(XQPROT>0) D  G OUTRE
"RTN","XQOO1",180,0)
 .D ^XQDATE
"RTN","XQOO1",181,0)
 .S %=$P(^VA(200,DUZ,0),U),%=$P(%,",")
"RTN","XQOO1",182,0)
 .S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_%
"RTN","XQOO1",183,0)
 .S ^XTMP("XQOO",0)=DT+7
"RTN","XQOO1",184,0)
 .W !!,"Set named ",XQSET," recovered with ",XQOP," options and ",XQPROT," protocols."
"RTN","XQOO1",185,0)
 .Q
"RTN","XQOO1",186,0)
 E  W !!,"No options or protocols with the message ",XQMESS," were found." G OUTRE
"RTN","XQOO1",187,0)
 Q
"RTN","XQOO1",188,0)
 ;
"RTN","XQOO1",189,0)
OUTRE ;Exit point for REBLD
"RTN","XQOO1",190,0)
 K %,%Y,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,XQ,XQMESS,XQOP,XQPROT,XQSET,Y
"RTN","XQOO1",191,0)
 Q
"RTN","XQOO1",192,0)
 ;
"RTN","XQOO1",193,0)
TOG ;Toggle options and protocols on and off. (XQOOTOG option)
"RTN","XQOO1",194,0)
 N XQ
"RTN","XQOO1",195,0)
 D T1,OUTT,T2,KICK^XQ7
"RTN","XQOO1",196,0)
 ;
"RTN","XQOO1",197,0)
OUTT ;Exit for XQOOTOG
"RTN","XQOO1",198,0)
 K DIC,DTOUT,DUOUT,X,Y
"RTN","XQOO1",199,0)
 Q
"RTN","XQOO1",200,0)
 ;
"RTN","XQOO1",201,0)
T1 ;Toggle options
"RTN","XQOO1",202,0)
 S DIC=19,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of an option: "
"RTN","XQOO1",203,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",204,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",205,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",206,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",207,0)
 ..W !!,"Option ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",208,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",209,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",210,0)
 ..D ^DIR
"RTN","XQOO1",211,0)
 ..I Y S $P(^DIC(19,XQ,0),U,3)="",DA=XQ D REDO^XQ7
"RTN","XQOO1",212,0)
 ..K DIR,X,Y
"RTN","XQOO1",213,0)
 ..Q
"RTN","XQOO1",214,0)
 .E  W ! D
"RTN","XQOO1",215,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this option out of order: "
"RTN","XQOO1",216,0)
 ..S DIR("?")="This option is in service.  Enter a string to remove it from use."
"RTN","XQOO1",217,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",218,0)
 ..I '$D(DIRUT) S $P(^DIC(19,XQ,0),U,3)=Y,DA=XQ D REDO^XQ7
"RTN","XQOO1",219,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",220,0)
 ..Q
"RTN","XQOO1",221,0)
 .Q
"RTN","XQOO1",222,0)
 Q
"RTN","XQOO1",223,0)
 ;
"RTN","XQOO1",224,0)
T2 ;Toggle protocols
"RTN","XQOO1",225,0)
 S DIC=101,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of a protocol: "
"RTN","XQOO1",226,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",227,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",228,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",229,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",230,0)
 ..W !!,"Protocol ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",231,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",232,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",233,0)
 ..D ^DIR
"RTN","XQOO1",234,0)
 ..I Y S $P(^ORD(101,XQ,0),U,3)=""
"RTN","XQOO1",235,0)
 ..K DA,DIR,X,Y
"RTN","XQOO1",236,0)
 ..Q
"RTN","XQOO1",237,0)
 .E  W ! D
"RTN","XQOO1",238,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this protocol out of order: "
"RTN","XQOO1",239,0)
 ..S DIR("?")="This protocol is in service.  Enter a string to remove it from use."
"RTN","XQOO1",240,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",241,0)
 ..I '$D(DIRUT) S $P(^ORD(101,XQ,0),U,3)=Y
"RTN","XQOO1",242,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",243,0)
 ..Q
"RTN","XQOO1",244,0)
 .Q
"RTN","XQOO1",245,0)
 Q
"VER")
8.0^21.0
**END**
**END**
