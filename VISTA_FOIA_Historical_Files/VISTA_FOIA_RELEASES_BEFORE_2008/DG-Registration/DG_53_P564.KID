KIDS Distribution saved on Sep 22, 2004@09:23:30
HVE PHASE III
**KIDS**:DG*5.3*564^IVM*2.0*97^SD*5.3*395^

**INSTALL NAME**
DG*5.3*564
"BLD",4997,0)
DG*5.3*564^REGISTRATION^0^3040922^y
"BLD",4997,4,0)
^9.64PA^2^2
"BLD",4997,4,2,0)
2
"BLD",4997,4,2,2,0)
^9.641^2^1
"BLD",4997,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",4997,4,2,2,2,1,0)
^9.6411^.305^49
"BLD",4997,4,2,2,2,1,.305,0)
UNEMPLOYABLE
"BLD",4997,4,2,2,2,1,.32101,0)
VIETNAM SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.32104,0)
VIETNAM FROM DATE
"BLD",4997,4,2,2,2,1,.32105,0)
VIETNAM TO DATE
"BLD",4997,4,2,2,2,1,.3212,0)
RADIATION EXPOSURE METHOD
"BLD",4997,4,2,2,2,1,.3213,0)
AGENT ORANGE EXPOSURE LOCATION
"BLD",4997,4,2,2,2,1,.3214,0)
FILIPINO VETERAN PROOF
"BLD",4997,4,2,2,2,1,.32201,0)
PERSIAN GULF SERVICE?
"BLD",4997,4,2,2,2,1,.322011,0)
PERSIAN GULF FROM DATE
"BLD",4997,4,2,2,2,1,.322012,0)
PERSIAN GULF TO DATE
"BLD",4997,4,2,2,2,1,.322016,0)
SOMALIA SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.322017,0)
SOMALIA FROM DATE
"BLD",4997,4,2,2,2,1,.322018,0)
SOMALIA TO DATE
"BLD",4997,4,2,2,2,1,.322019,0)
YUGOSLAVIA SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.32202,0)
YUGOSLAVIA FROM DATE
"BLD",4997,4,2,2,2,1,.322021,0)
YUGOSLAVIA TO DATE
"BLD",4997,4,2,2,2,1,.3221,0)
LEBANON SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.3222,0)
LEBANON FROM DATE
"BLD",4997,4,2,2,2,1,.3223,0)
LEBANON TO DATE
"BLD",4997,4,2,2,2,1,.3224,0)
GRENADA SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.3225,0)
GRENADA FROM DATE
"BLD",4997,4,2,2,2,1,.3226,0)
GRENADA TO DATE
"BLD",4997,4,2,2,2,1,.3227,0)
PANAMA SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.3228,0)
PANAMA FROM DATE
"BLD",4997,4,2,2,2,1,.3229,0)
PANAMA TO DATE
"BLD",4997,4,2,2,2,1,.324,0)
SERVICE DISCHARGE TYPE [LAST]
"BLD",4997,4,2,2,2,1,.325,0)
SERVICE BRANCH [LAST]
"BLD",4997,4,2,2,2,1,.326,0)
SERVICE ENTRY DATE [LAST]
"BLD",4997,4,2,2,2,1,.327,0)
SERVICE SEPARATION DATE [LAST]
"BLD",4997,4,2,2,2,1,.328,0)
SERVICE NUMBER [LAST]
"BLD",4997,4,2,2,2,1,.329,0)
SERVICE DISCHARGE TYPE [NTL]
"BLD",4997,4,2,2,2,1,.3291,0)
SERVICE BRANCH [NTL]
"BLD",4997,4,2,2,2,1,.3292,0)
SERVICE ENTRY DATE [NTL]
"BLD",4997,4,2,2,2,1,.3293,0)
SERVICE SEPARATION DATE [NTL]
"BLD",4997,4,2,2,2,1,.3294,0)
SERVICE NUMBER [NTL]
"BLD",4997,4,2,2,2,1,.3295,0)
SERVICE DISCHARGE TYPE [NNTL]
"BLD",4997,4,2,2,2,1,.3296,0)
SERVICE BRANCH [NNTL]
"BLD",4997,4,2,2,2,1,.3297,0)
SERVICE ENTRY DATE [NNTL]
"BLD",4997,4,2,2,2,1,.3298,0)
SERVICE SEPARATION DATE [NNTL]
"BLD",4997,4,2,2,2,1,.3299,0)
SERVICE NUMBER [NNTL]
"BLD",4997,4,2,2,2,1,.525,0)
POW STATUS INDICATED?
"BLD",4997,4,2,2,2,1,.526,0)
POW CONFINEMENT LOCATION
"BLD",4997,4,2,2,2,1,.527,0)
POW FROM DATE
"BLD",4997,4,2,2,2,1,.528,0)
POW TO DATE
"BLD",4997,4,2,2,2,1,.5291,0)
COMBAT SERVICE INDICATED?
"BLD",4997,4,2,2,2,1,.5292,0)
COMBAT SERVICE LOCATION
"BLD",4997,4,2,2,2,1,.5293,0)
COMBAT FROM DATE
"BLD",4997,4,2,2,2,1,.5294,0)
COMBAT TO DATE
"BLD",4997,4,2,2,2,1,.5295,0)
COMBAT VETERAN END DATE
"BLD",4997,4,2,222)
y^y^p^^^^n^^n
"BLD",4997,4,2,224)

"BLD",4997,4,27.11,0)
27.11
"BLD",4997,4,27.11,2,0)
^9.641^27.11^1
"BLD",4997,4,27.11,2,27.11,0)
PATIENT ENROLLMENT  (File-top level)
"BLD",4997,4,27.11,2,27.11,1,0)
^9.6411^50.18^2
"BLD",4997,4,27.11,2,27.11,1,50.17,0)
UNEMPLOYABLE
"BLD",4997,4,27.11,2,27.11,1,50.18,0)
COMBAT VETERAN END DATE
"BLD",4997,4,27.11,222)
y^y^p^^^^n^^n
"BLD",4997,4,27.11,224)

"BLD",4997,4,"APDD",2,2)

"BLD",4997,4,"APDD",2,2,.305)

"BLD",4997,4,"APDD",2,2,.32101)

"BLD",4997,4,"APDD",2,2,.32104)

"BLD",4997,4,"APDD",2,2,.32105)

"BLD",4997,4,"APDD",2,2,.3212)

"BLD",4997,4,"APDD",2,2,.3213)

"BLD",4997,4,"APDD",2,2,.3214)

"BLD",4997,4,"APDD",2,2,.32201)

"BLD",4997,4,"APDD",2,2,.322011)

"BLD",4997,4,"APDD",2,2,.322012)

"BLD",4997,4,"APDD",2,2,.322016)

"BLD",4997,4,"APDD",2,2,.322017)

"BLD",4997,4,"APDD",2,2,.322018)

"BLD",4997,4,"APDD",2,2,.322019)

"BLD",4997,4,"APDD",2,2,.32202)

"BLD",4997,4,"APDD",2,2,.322021)

"BLD",4997,4,"APDD",2,2,.3221)

"BLD",4997,4,"APDD",2,2,.3222)

"BLD",4997,4,"APDD",2,2,.3223)

"BLD",4997,4,"APDD",2,2,.3224)

"BLD",4997,4,"APDD",2,2,.3225)

"BLD",4997,4,"APDD",2,2,.3226)

"BLD",4997,4,"APDD",2,2,.3227)

"BLD",4997,4,"APDD",2,2,.3228)

"BLD",4997,4,"APDD",2,2,.3229)

"BLD",4997,4,"APDD",2,2,.324)

"BLD",4997,4,"APDD",2,2,.325)

"BLD",4997,4,"APDD",2,2,.326)

"BLD",4997,4,"APDD",2,2,.327)

"BLD",4997,4,"APDD",2,2,.328)

"BLD",4997,4,"APDD",2,2,.329)

"BLD",4997,4,"APDD",2,2,.3291)

"BLD",4997,4,"APDD",2,2,.3292)

"BLD",4997,4,"APDD",2,2,.3293)

"BLD",4997,4,"APDD",2,2,.3294)

"BLD",4997,4,"APDD",2,2,.3295)

"BLD",4997,4,"APDD",2,2,.3296)

"BLD",4997,4,"APDD",2,2,.3297)

"BLD",4997,4,"APDD",2,2,.3298)

"BLD",4997,4,"APDD",2,2,.3299)

"BLD",4997,4,"APDD",2,2,.525)

"BLD",4997,4,"APDD",2,2,.526)

"BLD",4997,4,"APDD",2,2,.527)

"BLD",4997,4,"APDD",2,2,.528)

"BLD",4997,4,"APDD",2,2,.5291)

"BLD",4997,4,"APDD",2,2,.5292)

"BLD",4997,4,"APDD",2,2,.5293)

"BLD",4997,4,"APDD",2,2,.5294)

"BLD",4997,4,"APDD",2,2,.5295)

"BLD",4997,4,"APDD",27.11,27.11)

"BLD",4997,4,"APDD",27.11,27.11,50.17)

"BLD",4997,4,"APDD",27.11,27.11,50.18)

"BLD",4997,4,"B",2,2)

"BLD",4997,4,"B",27.11,27.11)

"BLD",4997,"INID")
^n
"BLD",4997,"INIT")
EP^DG53A564
"BLD",4997,"KRN",0)
^9.67PA^8989.52^19
"BLD",4997,"KRN",.4,0)
.4
"BLD",4997,"KRN",.401,0)
.401
"BLD",4997,"KRN",.402,0)
.402
"BLD",4997,"KRN",.403,0)
.403
"BLD",4997,"KRN",.5,0)
.5
"BLD",4997,"KRN",.84,0)
.84
"BLD",4997,"KRN",3.6,0)
3.6
"BLD",4997,"KRN",3.8,0)
3.8
"BLD",4997,"KRN",9.2,0)
9.2
"BLD",4997,"KRN",9.8,0)
9.8
"BLD",4997,"KRN",9.8,"NM",0)
^9.68A^30^20
"BLD",4997,"KRN",9.8,"NM",10,0)
VAFHLZPD^^0^B52916822
"BLD",4997,"KRN",9.8,"NM",11,0)
DGCV^^0^B29768290
"BLD",4997,"KRN",9.8,"NM",12,0)
DGENA1A^^0^B12112347
"BLD",4997,"KRN",9.8,"NM",13,0)
DGENELA^^0^B20987690
"BLD",4997,"KRN",9.8,"NM",14,0)
DGENELA1^^0^B73404914
"BLD",4997,"KRN",9.8,"NM",15,0)
DGENELA4^^0^B42750638
"BLD",4997,"KRN",9.8,"NM",16,0)
DGENL1^^0^B74641169
"BLD",4997,"KRN",9.8,"NM",17,0)
DGENU^^0^B33930935
"BLD",4997,"KRN",9.8,"NM",19,0)
DGMTA^^0^B35275824
"BLD",4997,"KRN",9.8,"NM",20,0)
DGMTCOR^^0^B28396316
"BLD",4997,"KRN",9.8,"NM",21,0)
DGMTCOU1^^0^B12937265
"BLD",4997,"KRN",9.8,"NM",22,0)
DGMTR1^^0^B29713005
"BLD",4997,"KRN",9.8,"NM",23,0)
DGRPC1^^0^B12680132
"BLD",4997,"KRN",9.8,"NM",24,0)
DGRPC2^^0^B59686456
"BLD",4997,"KRN",9.8,"NM",25,0)
DGENUPL^^0^B28512973
"BLD",4997,"KRN",9.8,"NM",26,0)
DGENUPLA^^0^B29297682
"BLD",4997,"KRN",9.8,"NM",27,0)
DGENA^^0^B17015161
"BLD",4997,"KRN",9.8,"NM",28,0)
DGCVRPT^^0^B20362364
"BLD",4997,"KRN",9.8,"NM",29,0)
DGENEGT1^^0^B44849273
"BLD",4997,"KRN",9.8,"NM",30,0)
DGENUPL9^^0^B7307554
"BLD",4997,"KRN",9.8,"NM","B","DGCV",11)

"BLD",4997,"KRN",9.8,"NM","B","DGCVRPT",28)

"BLD",4997,"KRN",9.8,"NM","B","DGENA",27)

"BLD",4997,"KRN",9.8,"NM","B","DGENA1A",12)

"BLD",4997,"KRN",9.8,"NM","B","DGENEGT1",29)

"BLD",4997,"KRN",9.8,"NM","B","DGENELA",13)

"BLD",4997,"KRN",9.8,"NM","B","DGENELA1",14)

"BLD",4997,"KRN",9.8,"NM","B","DGENELA4",15)

"BLD",4997,"KRN",9.8,"NM","B","DGENL1",16)

"BLD",4997,"KRN",9.8,"NM","B","DGENU",17)

"BLD",4997,"KRN",9.8,"NM","B","DGENUPL",25)

"BLD",4997,"KRN",9.8,"NM","B","DGENUPL9",30)

"BLD",4997,"KRN",9.8,"NM","B","DGENUPLA",26)

"BLD",4997,"KRN",9.8,"NM","B","DGMTA",19)

"BLD",4997,"KRN",9.8,"NM","B","DGMTCOR",20)

"BLD",4997,"KRN",9.8,"NM","B","DGMTCOU1",21)

"BLD",4997,"KRN",9.8,"NM","B","DGMTR1",22)

"BLD",4997,"KRN",9.8,"NM","B","DGRPC1",23)

"BLD",4997,"KRN",9.8,"NM","B","DGRPC2",24)

"BLD",4997,"KRN",9.8,"NM","B","VAFHLZPD",10)

"BLD",4997,"KRN",19,0)
19
"BLD",4997,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",4997,"KRN",19,"NM",1,0)
DG UNSUPPORTED CV END DATE RPT^^0
"BLD",4997,"KRN",19,"NM",2,0)
DG REGISTRATION MENU^^2
"BLD",4997,"KRN",19,"NM",3,0)
DG SUPERVISOR MENU^^2
"BLD",4997,"KRN",19,"NM","B","DG REGISTRATION MENU",2)

"BLD",4997,"KRN",19,"NM","B","DG SUPERVISOR MENU",3)

"BLD",4997,"KRN",19,"NM","B","DG UNSUPPORTED CV END DATE RPT",1)

"BLD",4997,"KRN",19.1,0)
19.1
"BLD",4997,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",4997,"KRN",101,0)
101
"BLD",4997,"KRN",101,"NM",0)
^9.68A^^
"BLD",4997,"KRN",409.61,0)
409.61
"BLD",4997,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",4997,"KRN",771,0)
771
"BLD",4997,"KRN",771,"NM",0)
^9.68A^^
"BLD",4997,"KRN",870,0)
870
"BLD",4997,"KRN",870,"NM",0)
^9.68A^^
"BLD",4997,"KRN",8989.51,0)
8989.51
"BLD",4997,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",4997,"KRN",8989.52,0)
8989.52
"BLD",4997,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",4997,"KRN",8994,0)
8994
"BLD",4997,"KRN",8994,"NM",0)
^9.68A^^
"BLD",4997,"KRN","B",.4,.4)

"BLD",4997,"KRN","B",.401,.401)

"BLD",4997,"KRN","B",.402,.402)

"BLD",4997,"KRN","B",.403,.403)

"BLD",4997,"KRN","B",.5,.5)

"BLD",4997,"KRN","B",.84,.84)

"BLD",4997,"KRN","B",3.6,3.6)

"BLD",4997,"KRN","B",3.8,3.8)

"BLD",4997,"KRN","B",9.2,9.2)

"BLD",4997,"KRN","B",9.8,9.8)

"BLD",4997,"KRN","B",19,19)

"BLD",4997,"KRN","B",19.1,19.1)

"BLD",4997,"KRN","B",101,101)

"BLD",4997,"KRN","B",409.61,409.61)

"BLD",4997,"KRN","B",771,771)

"BLD",4997,"KRN","B",870,870)

"BLD",4997,"KRN","B",8989.51,8989.51)

"BLD",4997,"KRN","B",8989.52,8989.52)

"BLD",4997,"KRN","B",8994,8994)

"BLD",4997,"QUES",0)
^9.62^^
"BLD",4997,"REQB",0)
^9.611^11^11
"BLD",4997,"REQB",1,0)
DG*5.3*576^2
"BLD",4997,"REQB",2,0)
DG*5.3*314^2
"BLD",4997,"REQB",3,0)
DG*5.3*451^2
"BLD",4997,"REQB",4,0)
DG*5.3*491^2
"BLD",4997,"REQB",5,0)
DG*5.3*343^2
"BLD",4997,"REQB",6,0)
DG*5.3*497^2
"BLD",4997,"REQB",7,0)
DG*5.3*535^2
"BLD",4997,"REQB",8,0)
DG*5.3*495^2
"BLD",4997,"REQB",9,0)
DG*5.3*445^2
"BLD",4997,"REQB",10,0)
DG*5.3*456^2
"BLD",4997,"REQB",11,0)
DG*5.3*545^2
"BLD",4997,"REQB","B","DG*5.3*314",2)

"BLD",4997,"REQB","B","DG*5.3*343",5)

"BLD",4997,"REQB","B","DG*5.3*445",9)

"BLD",4997,"REQB","B","DG*5.3*451",3)

"BLD",4997,"REQB","B","DG*5.3*456",10)

"BLD",4997,"REQB","B","DG*5.3*491",4)

"BLD",4997,"REQB","B","DG*5.3*495",8)

"BLD",4997,"REQB","B","DG*5.3*497",6)

"BLD",4997,"REQB","B","DG*5.3*535",7)

"BLD",4997,"REQB","B","DG*5.3*545",11)

"BLD",4997,"REQB","B","DG*5.3*576",1)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.305)

"FIA",2,2,.32101)

"FIA",2,2,.32104)

"FIA",2,2,.32105)

"FIA",2,2,.3212)

"FIA",2,2,.3213)

"FIA",2,2,.3214)

"FIA",2,2,.32201)

"FIA",2,2,.322011)

"FIA",2,2,.322012)

"FIA",2,2,.322016)

"FIA",2,2,.322017)

"FIA",2,2,.322018)

"FIA",2,2,.322019)

"FIA",2,2,.32202)

"FIA",2,2,.322021)

"FIA",2,2,.3221)

"FIA",2,2,.3222)

"FIA",2,2,.3223)

"FIA",2,2,.3224)

"FIA",2,2,.3225)

"FIA",2,2,.3226)

"FIA",2,2,.3227)

"FIA",2,2,.3228)

"FIA",2,2,.3229)

"FIA",2,2,.324)

"FIA",2,2,.325)

"FIA",2,2,.326)

"FIA",2,2,.327)

"FIA",2,2,.328)

"FIA",2,2,.329)

"FIA",2,2,.3291)

"FIA",2,2,.3292)

"FIA",2,2,.3293)

"FIA",2,2,.3294)

"FIA",2,2,.3295)

"FIA",2,2,.3296)

"FIA",2,2,.3297)

"FIA",2,2,.3298)

"FIA",2,2,.3299)

"FIA",2,2,.525)

"FIA",2,2,.526)

"FIA",2,2,.527)

"FIA",2,2,.528)

"FIA",2,2,.5291)

"FIA",2,2,.5292)

"FIA",2,2,.5293)

"FIA",2,2,.5294)

"FIA",2,2,.5295)

"FIA",27.11)
PATIENT ENROLLMENT
"FIA",27.11,0)
^DGEN(27.11,
"FIA",27.11,0,0)
27.11OID
"FIA",27.11,0,1)
y^y^p^^^^n^^n
"FIA",27.11,0,10)

"FIA",27.11,0,11)

"FIA",27.11,0,"RLRO")

"FIA",27.11,0,"VR")
5.3^DG
"FIA",27.11,27.11)
1
"FIA",27.11,27.11,50.17)

"FIA",27.11,27.11,50.18)

"INIT")
EP^DG53A564
"IX",2,2,"ACVCOM",0)
2^ACVCOM^Update Combat Vet Eligibility End Date^MU^^R^^I^2^^^^^A
"IX",2,2,"ACVCOM",.1,0)
^^11^11^3030613^
"IX",2,2,"ACVCOM",.1,1,0)
This multi-level MUMPS x-ref will trigger an update to the Combat Vet 
"IX",2,2,"ACVCOM",.1,2,0)
Eligibility End Date field under the following conditions:
"IX",2,2,"ACVCOM",.1,3,0)
  1) Service Separation Date [Last] is precise and > 2981111 AND EITHER
"IX",2,2,"ACVCOM",.1,4,0)
  2) Combat To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,5,0)
     Persian Gulf To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,6,0)
     Somalia To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,7,0)
     Yugoslavia To Date is after 11/11/98
"IX",2,2,"ACVCOM",.1,8,0)
 
"IX",2,2,"ACVCOM",.1,9,0)
The Combat vet field will be set to the Service Separation Date + 2 
"IX",2,2,"ACVCOM",.1,10,0)
years, and will only be updated if information in these fields has 
"IX",2,2,"ACVCOM",.1,11,0)
changed.
"IX",2,2,"ACVCOM",1)
D SETCV^DGCV(DA,X2(1))
"IX",2,2,"ACVCOM",1.4)
I '$P($G(^DPT(DA,.52)),"^",15) S X=$$CVELIG^DGCV(DA)
"IX",2,2,"ACVCOM",2)
Q
"IX",2,2,"ACVCOM",2.4)
Q
"IX",2,2,"ACVCOM",11.1,0)
^.114IA^9^9
"IX",2,2,"ACVCOM",11.1,1,0)
1^F^2^.327^^^F
"IX",2,2,"ACVCOM",11.1,2,0)
2^F^2^.5294^^^F
"IX",2,2,"ACVCOM",11.1,3,0)
3^F^2^.322021^^^F
"IX",2,2,"ACVCOM",11.1,4,0)
4^F^2^.322018^^^F
"IX",2,2,"ACVCOM",11.1,5,0)
5^F^2^.322012^^^F
"IX",2,2,"ACVCOM",11.1,6,0)
6^F^2^.5291^^^F
"IX",2,2,"ACVCOM",11.1,7,0)
7^F^2^.322019^^^F
"IX",2,2,"ACVCOM",11.1,8,0)
8^F^2^.322016^^^F
"IX",2,2,"ACVCOM",11.1,9,0)
9^F^2^.32201^^^F
"IX",2,2,"AMSEL",0)
2^AMSEL^DELETE MSE (LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSEL",1)
Q
"IX",2,2,"AMSEL",2)
D DELMSE^DGRPMS(DFN,1)
"IX",2,2,"AMSEL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSEL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSEL",11.1,1,0)
1^F^2^.325^^^F
"IX",2,2,"AMSENL",0)
2^AMSENL^DELETE MSE (NEXT TO LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSENL",1)
Q
"IX",2,2,"AMSENL",2)
D DELMSE^DGRPMS(DFN,2)
"IX",2,2,"AMSENL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSENL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSENL",11.1,1,0)
1^F^2^.3291^^^F
"IX",2,2,"AMSENNL",0)
2^AMSENNL^DELETE MSE (NEXT TO NEXT TO LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSENNL",1)
Q
"IX",2,2,"AMSENNL",2)
D DELMSE^DGRPMS(DFN,3)
"IX",2,2,"AMSENNL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSENNL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSENNL",11.1,1,0)
1^F^2^.3296^^^F
"KRN",19,176,-1)
2^3
"KRN",19,176,0)
DG SUPERVISOR MENU^Supervisor ADT Menu^^M^.5^DG SUPERVISOR^^^^^^5^y
"KRN",19,176,10,0)
^19.01IP^32^32
"KRN",19,176,10,32,0)
11905
"KRN",19,176,10,32,"^")
DG UNSUPPORTED CV END DATE RPT
"KRN",19,176,"U")
SUPERVISOR ADT MENU
"KRN",19,185,-1)
2^2
"KRN",19,185,0)
DG REGISTRATION MENU^Registration Menu^^M^.5^^^^^^^5^y
"KRN",19,185,10,0)
^19.01IP^35^35
"KRN",19,185,10,35,0)
11905
"KRN",19,185,10,35,"^")
DG UNSUPPORTED CV END DATE RPT
"KRN",19,185,"U")
REGISTRATION MENU
"KRN",19,11905,-1)
0^1
"KRN",19,11905,0)
DG UNSUPPORTED CV END DATE RPT^Unsupported CV End Dates Report^^R^^^^^^^^REGISTRATION^y
"KRN",19,11905,1,0)
^19.06^14^14^3040528^^
"KRN",19,11905,1,1,0)
This option will produce a list of veterans with CV End Dates
"KRN",19,11905,1,2,0)
that are not supported by Military Service Data.
"KRN",19,11905,1,3,0)
There are two parts to this option:
"KRN",19,11905,1,4,0)
 
"KRN",19,11905,1,5,0)
Extract Unsupported CV End Dates - this process will scan the
"KRN",19,11905,1,6,0)
veterans' records in the Patient File and find records with CV
"KRN",19,11905,1,7,0)
End Dates that are not supported by Military Service Data. At the
"KRN",19,11905,1,8,0)
completion of this process a mail message will be sent
"KRN",19,11905,1,9,0)
indicating that the extract is complete and the number of records
"KRN",19,11905,1,10,0)
to print.  This process must be run before the list can be printed.
"KRN",19,11905,1,11,0)
 
"KRN",19,11905,1,12,0)
Print Veterans with Unsupported CV End Dates Report - this process
"KRN",19,11905,1,13,0)
will produce a list of veterans with unsupported CV End Dates.
"KRN",19,11905,1,14,0)
The report can be sorted by veteran name or SSN (terminal digits).
"KRN",19,11905,25)
EN^DGCVRPT
"KRN",19,11905,"U")
UNSUPPORTED CV END DATES REPOR
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
564^3040922^123456800
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
21
"RTN","DG53A564")
0^^B16382609
"RTN","DG53A564",1,0)
DG53A564 ;ALB/PJR;POST INIT FOR PATCH 564 ; 6/9/04 3:51pm
"RTN","DG53A564",2,0)
 ;;5.3;Registration;**564**;Aug 13, 1993
"RTN","DG53A564",3,0)
 ;
"RTN","DG53A564",4,0)
EP ;Main entry point of post init routine
"RTN","DG53A564",5,0)
EN1 ;Queue seeding of new field
"RTN","DG53A564",6,0)
 ; Queue time is post install question POS1 (use NOW if not defined)
"RTN","DG53A564",7,0)
 ; If queued using entry point QUEUE, queue time will be prompted for
"RTN","DG53A564",8,0)
 N ZTSK,ZTRTN,ZTIO,ZTDESC,ZTDTH,Y9
"RTN","DG53A564",9,0)
 S X(1)=" "
"RTN","DG53A564",10,0)
 S X(2)=" "
"RTN","DG53A564",11,0)
 S X(3)="Routine to populate AGENT ORANGE EXPOSURE LOCATION field"
"RTN","DG53A564",12,0)
 S X(4)="(#.3213) with VIETNAM for all patients claiming exposure"
"RTN","DG53A564",13,0)
 S X(5)="to agent orange (AGENT ORANGE EXPOS. INDICATED? equals"
"RTN","DG53A564",14,0)
 S X(6)="YES) and Exposure Location equals NULL will now be queued"
"RTN","DG53A564",15,0)
 S X(7)=" "
"RTN","DG53A564",16,0)
 D MES^XPDUTL(.X) K X
"RTN","DG53A564",17,0)
 I $D(^XTMP("DG53A564",2)) D  Q
"RTN","DG53A564",18,0)
 .S X(1)=" "
"RTN","DG53A564",19,0)
 .S X(2)="*****"
"RTN","DG53A564",20,0)
 .S X(3)="Post init appears to be running.  If it is not, delete the"
"RTN","DG53A564",21,0)
 .S X(4)="node ^XTMP(""DG53A564"",2) and use line tag QUEUE^DG53A564"
"RTN","DG53A564",22,0)
 .S X(5)="to [re]start the process."
"RTN","DG53A564",23,0)
 .S X(6)="*****"
"RTN","DG53A564",24,0)
 .S X(7)=" "
"RTN","DG53A564",25,0)
 .D MES^XPDUTL(.X) K X
"RTN","DG53A564",26,0)
 I $D(^XTMP("DG53A564",3)) D  Q
"RTN","DG53A564",27,0)
 .S X(1)=" "
"RTN","DG53A564",28,0)
 .S X(2)="*****"
"RTN","DG53A564",29,0)
 .S X(3)="Post init appears to have run to completion on "_$$FMTE^XLFDT(^XTMP("DG53A564",3))_"."
"RTN","DG53A564",30,0)
 .S X(4)="If it did not, delete the node ^XTMP(""DG53A564"",3) and use"
"RTN","DG53A564",31,0)
 .S X(5)="line tag QUEUE^DG53A564 to [re]start the process."
"RTN","DG53A564",32,0)
 .S X(6)="*****"
"RTN","DG53A564",33,0)
 .S X(7)=" "
"RTN","DG53A564",34,0)
 .D MES^XPDUTL(.X) K X
"RTN","DG53A564",35,0)
 S ZTRTN="SET^DG53A564",ZTIO=""
"RTN","DG53A564",36,0)
 S ZTDTH=$H S X=+$G(XPDQUES("POS1")) S:(X) ZTDTH=$$FMTH^XLFDT(X) K:$G(DG53A564) ZTDTH
"RTN","DG53A564",37,0)
 S ZTDESC="Initial seeding of AGENT ORANGE EXPOSURE LOCATION field"
"RTN","DG53A564",38,0)
 D ^%ZTLOAD
"RTN","DG53A564",39,0)
 I $G(ZTSK) D MES^XPDUTL("Task #"_ZTSK_" queued to start "_$$HTE^XLFDT($G(ZTSK("D")))) I 1
"RTN","DG53A564",40,0)
 E  D MES^XPDUTL("***** UNABLE TO QUEUE INITIAL SEEDING *****")
"RTN","DG53A564",41,0)
 Q
"RTN","DG53A564",42,0)
 ;
"RTN","DG53A564",43,0)
SET ; This is the post-init to make sure all patients claiming
"RTN","DG53A564",44,0)
 ; exposure to agent orange have a selected location for the
"RTN","DG53A564",45,0)
 ; exposure.  The initial setting is Vietnam.
"RTN","DG53A564",46,0)
 N AOCNT,DFNCNT,DATIM,DFN,QFLG,Y,XMSUB,XMDUZ,XMTEXT,XMY,LASTDFN
"RTN","DG53A564",47,0)
 S DATIM=$$DT^XLFDT()
"RTN","DG53A564",48,0)
 S ^XTMP("DG53A564",0)=$$FMADD^XLFDT(DATIM,30)_"^"_DATIM
"RTN","DG53A564",49,0)
 S ^XTMP("DG53A564",2)=1
"RTN","DG53A564",50,0)
 S QFLG=0
"RTN","DG53A564",51,0)
 S Y=$G(^XTMP("DG53A564",1))
"RTN","DG53A564",52,0)
 S (DFN,LASTDFN)=+Y,DFNCNT=+$P(Y,"^",2),AOCNT=+$P(Y,"^",3)
"RTN","DG53A564",53,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D  Q:QFLG
"RTN","DG53A564",54,0)
 .S DFNCNT=DFNCNT+1
"RTN","DG53A564",55,0)
 .S LASTDFN=DFN
"RTN","DG53A564",56,0)
 .S Y9=$G(^DPT(DFN,.321)) I $P(Y9,U,2)="Y",$P(Y9,U,13)="" D
"RTN","DG53A564",57,0)
 ..S (DA,Y)=DFN,DIE="^DPT(",DR=".3213///VIETNAM" D ^DIE S AOCNT=AOCNT+1
"RTN","DG53A564",58,0)
 .I '(DFNCNT#1000) S QFLG=$$S^%ZTLOAD("DFN: "_DFN) H 1
"RTN","DG53A564",59,0)
 S ^XTMP("DG53A564",1)=LASTDFN_"^"_DFNCNT_"^"_AOCNT
"RTN","DG53A564",60,0)
 K ^XTMP("DG53A564",2)
"RTN","DG53A564",61,0)
 S DATIM=$$NOW^XLFDT()
"RTN","DG53A564",62,0)
 I QFLG D  I 1
"RTN","DG53A564",63,0)
 .S ZTSTOP=1
"RTN","DG53A564",64,0)
 .S Y=$$S^%ZTLOAD("STOPPED PROCESSING AT DFN "_LASTDFN)
"RTN","DG53A564",65,0)
 E  D
"RTN","DG53A564",66,0)
 .S ^XTMP("DG53A564",3)=DATIM
"RTN","DG53A564",67,0)
 .S ZTREQ="@"
"RTN","DG53A564",68,0)
 S XMSUB="DG*5.3*564A post init has run to completion."
"RTN","DG53A564",69,0)
 S:(QFLG) XMSUB="DG*5.3*564A post init was asked to stop."
"RTN","DG53A564",70,0)
 K ^TMP($J,"DG53A564")
"RTN","DG53A564",71,0)
 S ^TMP($J,"DG53A564",1,0)="Routine to populate AGENT ORANGE EXPOSURE LOCATION field"
"RTN","DG53A564",72,0)
 S ^TMP($J,"DG53A564",2,0)="(#.3213) with VIETNAM for all patients claiming exposure"
"RTN","DG53A564",73,0)
 S ^TMP($J,"DG53A564",3,0)="to agent orange (AGENT ORANGE EXPOS. INDICATED? equals"
"RTN","DG53A564",74,0)
 S ^TMP($J,"DG53A564",4,0)="YES) and Exposure Location equals NULL"
"RTN","DG53A564",75,0)
 S ^TMP($J,"DG53A564",5,0)="ran to completion on "_$$FMTE^XLFDT(DATIM)_"."
"RTN","DG53A564",76,0)
 S ^TMP($J,"DG53A564",6,0)=" "
"RTN","DG53A564",77,0)
 S ^TMP($J,"DG53A564",7,0)="Post init routine DG53A564 can be deleted."
"RTN","DG53A564",78,0)
 I QFLG D
"RTN","DG53A564",79,0)
 .S ^TMP($J,"DG53A564",4,0)="YES) was asked to stop on "_$$FMTE^XLFDT(DATIM)_"."
"RTN","DG53A564",80,0)
 .S ^TMP($J,"DG53A564",5,0)=" "
"RTN","DG53A564",81,0)
 .S ^TMP($J,"DG53A564",6,0)="Use the entry point QUEUE^DG53A564 to resume seeding."
"RTN","DG53A564",82,0)
 S XMDUZ="Patch DG*5.3*564A"
"RTN","DG53A564",83,0)
 S XMTEXT="^TMP($J,""DG53A564"","
"RTN","DG53A564",84,0)
 S XMY(DUZ)=""
"RTN","DG53A564",85,0)
 D ^XMD
"RTN","DG53A564",86,0)
 K ^TMP($J,"DG53A564")
"RTN","DG53A564",87,0)
 S ZTREQ="@"
"RTN","DG53A564",88,0)
 Q
"RTN","DG53A564",89,0)
 ;
"RTN","DG53A564",90,0)
QUEUE ;Line tag for field to use to requeue seeding
"RTN","DG53A564",91,0)
 N X,DG53A564
"RTN","DG53A564",92,0)
 S DG53A564=1
"RTN","DG53A564",93,0)
 D EN1
"RTN","DG53A564",94,0)
 Q
"RTN","DGCV")
0^11^B29768290
"RTN","DGCV",1,0)
DGCV ;ALB/DW,ERC,BRM - COMBAT VET ELIGIBILTY; 06/05/2003 ; 6/14/04 1:03pm
"RTN","DGCV",2,0)
 ;;5.3;Registration;**528,576,564**; Aug 13, 1993
"RTN","DGCV",3,0)
 ;
"RTN","DGCV",4,0)
CVELIG(DFN) ;
"RTN","DGCV",5,0)
 ;API will determine whether or not this vetern needs to have CV End
"RTN","DGCV",6,0)
 ;Date set.  If this determination cannot be done due to imprecise
"RTN","DGCV",7,0)
 ;or missing dates, it returns which dates need editing.
"RTN","DGCV",8,0)
 ;Input:
"RTN","DGCV",9,0)
 ;  DFN - Patient file IEN
"RTN","DGCV",10,0)
 ;Output
"RTN","DGCV",11,0)
 ;  RESULT
"RTN","DGCV",12,0)
 ;    0 - CV End Date should not be updated
"RTN","DGCV",13,0)
 ;    1 - CV End Date should be updated
"RTN","DGCV",14,0)
 ;  If critical dates are imprecise return the following
"RTN","DGCV",15,0)
 ;    A - CV End Date should not be updated, imprecise Service Sep date
"RTN","DGCV",16,0)
 ;    B - CV End Date should not be updated, imprecise Combat To date
"RTN","DGCV",17,0)
 ;    C - CV End Date should not be updated, imprecise Yugoslavia To date
"RTN","DGCV",18,0)
 ;    D - CV End Date should not be updated, imprecise Somalia To date
"RTN","DGCV",19,0)
 ;    E - CV End Date should not be updated, imprecise Pers Gulf To date
"RTN","DGCV",20,0)
 ;  If the Service Sep Date is missing, return the following so that it 
"RTN","DGCV",21,0)
 ;  will appear on the Imprecise/Missing Date Report
"RTN","DGCV",22,0)
 ;    F - missing Service Sep Date
"RTN","DGCV",23,0)
 ;  If critical dates are missing but the corresponding indicator fields
"RTN","DGCV",24,0)
 ;  are set to 'YES' return the following
"RTN","DGCV",25,0)
 ;    G - missing Combat To Date, but Combat Indicated? = 'Yes'
"RTN","DGCV",26,0)
 ;    H - missing PG To Date, but PG Indicated? = 'Yes'
"RTN","DGCV",27,0)
 ;    I - missing Somalia To Date, but Somalia Indicator = 'Yes'
"RTN","DGCV",28,0)
 ;    J - missing Yugoslavia To Date, but Yugoslavia Indicator = 'Yes'
"RTN","DGCV",29,0)
 ;
"RTN","DGCV",30,0)
 N DG1,DG2,I,RESULT
"RTN","DGCV",31,0)
 N DGCOM,DGCVDT,DGCVFLG,DGGULF,DGSOM,DGSRV,DGYUG
"RTN","DGCV",32,0)
 S (DG1,DG2,RESULT)=0
"RTN","DGCV",33,0)
 I $G(DFN)']"" Q RESULT
"RTN","DGCV",34,0)
 I '$D(^DPT(DFN)) Q RESULT
"RTN","DGCV",35,0)
 ;
"RTN","DGCV",36,0)
 ;get combat related data from VistA
"RTN","DGCV",37,0)
 N DGARR,DGERR
"RTN","DGCV",38,0)
 D GETS^DIQ(2,DFN_",",".327;.322012;.322018;.322021;.5294;.5295","I","DGARR","DGERR")
"RTN","DGCV",39,0)
 D PARSE
"RTN","DGCV",40,0)
 ;
"RTN","DGCV",41,0)
 S DG1=$$CHKSSD(DFN) ;check SSD for imprecise or missing
"RTN","DGCV",42,0)
 ;
"RTN","DGCV",43,0)
 S DGDATE=$G(DGCOM)_"^"_$G(DGYUG)_"^"_$G(DGSOM)_"^"_$G(DGGULF)
"RTN","DGCV",44,0)
 S DG2=$$CHKREST(DGDATE) ;check other "TO" dates for imprecise or missing
"RTN","DGCV",45,0)
 S RESULT=$$RES(DG1,$G(DG2))
"RTN","DGCV",46,0)
 Q RESULT
"RTN","DGCV",47,0)
 ;
"RTN","DGCV",48,0)
RES(DG1,DG2) ;determine the final RESULT code from DGRES1 & DGRES2
"RTN","DGCV",49,0)
 ;if SSD evaluates to earlier than 11/11/98, can't set CV End Date
"RTN","DGCV",50,0)
 I DG1=0!($G(DG2)=0) Q 0
"RTN","DGCV",51,0)
 ;if SSD is 1
"RTN","DGCV",52,0)
 I DG1=1,($G(DG2)=1!($G(DG2)']"")) Q 1
"RTN","DGCV",53,0)
 I DG1=1,($G(DG2)=0) Q 0
"RTN","DGCV",54,0)
 I DG1=1 Q DG2
"RTN","DGCV",55,0)
 ;if SSD is imprecise or missing
"RTN","DGCV",56,0)
 I DG1'=1,($G(DG2)=1) S DG2=""
"RTN","DGCV",57,0)
 Q DG1_DG2
"RTN","DGCV",58,0)
 ;
"RTN","DGCV",59,0)
CHKDATE(DGDATE,I) ;check to see if date is imprecise or missing
"RTN","DGCV",60,0)
 ;if imprecise check to see if the imprecision prevents CV evaluation
"RTN","DGCV",61,0)
 ;if not imprecise check to see if after 11/11/98
"RTN","DGCV",62,0)
 N RES
"RTN","DGCV",63,0)
 S RES=0
"RTN","DGCV",64,0)
 I $G(DGDATE)']"" D  Q RES
"RTN","DGCV",65,0)
 . S RES=$S(I=0:"F",I=1:"G",I=2:"H",I=3:"I",I=4:"J",1:"")
"RTN","DGCV",66,0)
 I $E(DGDATE,6,7)="00" D
"RTN","DGCV",67,0)
 . I I=0 I DGDATE>2981111 S RES="A" Q
"RTN","DGCV",68,0)
 . I DGDATE=2980000!(DGDATE=2981100) D  Q
"RTN","DGCV",69,0)
 . . S RES=$S(I=0:"A",I=1:"B",I=2:"C",I=3:"D",I=4:"E",1:"")
"RTN","DGCV",70,0)
 Q:RES="A" RES
"RTN","DGCV",71,0)
 I DGDATE>2981111 S RES=1
"RTN","DGCV",72,0)
 Q RES
"RTN","DGCV",73,0)
 ;
"RTN","DGCV",74,0)
SETCV(DFN,DGSRV) ;calculate CV end date
"RTN","DGCV",75,0)
 K DGCVEDT
"RTN","DGCV",76,0)
 N DGFDA
"RTN","DGCV",77,0)
 I $G(DFN)']""!($G(DGSRV)']"") Q
"RTN","DGCV",78,0)
 I '$D(^DPT(DFN)) Q
"RTN","DGCV",79,0)
 S DGCVEDT=$P($$SCH^XLFDT("24M",DGSRV),".")
"RTN","DGCV",80,0)
 I DGCVEDT=$G(DGCVDT) Q
"RTN","DGCV",81,0)
 I $$GET1^DIQ(2,DFN_",",.5295,"I") Q
"RTN","DGCV",82,0)
 S DGFDA(2,DFN_",",.5295)=DGCVEDT
"RTN","DGCV",83,0)
 D FILE^DIE(,"DGFDA")
"RTN","DGCV",84,0)
 Q
"RTN","DGCV",85,0)
 ;
"RTN","DGCV",86,0)
CVEDT(DFN,DGDT) ;Provide Combat Vet Eligibility End Date, if eligible
"RTN","DGCV",87,0)
 ;Supported DBIA #4156
"RTN","DGCV",88,0)
 ;Input:  DFN - Patient file IEN
"RTN","DGCV",89,0)
 ;        DGDT - Treatment date (optional), 
"RTN","DGCV",90,0)
 ;               DT is default
"RTN","DGCV",91,0)
 ;Output :RESULT=(1,0,-1)^End Date (if populated, otherwise null)^CV
"RTN","DGCV",92,0)
 ;               Eligible on DGDT(1,0)^is patient eligible on input date?
"RTN","DGCV",93,0)
 ;      (piece 1)  1 - qualifies as a CV
"RTN","DGCV",94,0)
 ;                 0 - does not qualify as a CV
"RTN","DGCV",95,0)
 ;                -1 - bad DFN or date
"RTN","DGCV",96,0)
 ;      (piece 3)  1 - vet was eligible on date specified (or DT)      
"RTN","DGCV",97,0)
 ;                 0 - vet was not eligible on date specified (or DT)
"RTN","DGCV",98,0)
 ;
"RTN","DGCV",99,0)
 N RESULT
"RTN","DGCV",100,0)
 S RESULT=""
"RTN","DGCV",101,0)
 I $G(DFN)="" Q -1
"RTN","DGCV",102,0)
 I '$D(^DPT(DFN)) Q -1
"RTN","DGCV",103,0)
 ;if time sent in, drop time
"RTN","DGCV",104,0)
 I $G(DGDT)']"" S DGDT=DT
"RTN","DGCV",105,0)
 I DGDT?7N1"."1.6N S DGDT=$E(DGDT,1,7)
"RTN","DGCV",106,0)
 I DGDT'?7N Q -1
"RTN","DGCV",107,0)
 S RESULT=$$GET1^DIQ(2,DFN_",",.5295,"I")
"RTN","DGCV",108,0)
 I $G(RESULT)']"" Q 0
"RTN","DGCV",109,0)
 S RESULT=$S(DGDT'>RESULT:RESULT_"^1",1:RESULT_"^0") ; if treatment date is earlier or equal to end date, veteran is eligible
"RTN","DGCV",110,0)
 S RESULT=$S($G(RESULT):1_"^"_RESULT,1:0)
"RTN","DGCV",111,0)
 Q RESULT
"RTN","DGCV",112,0)
 ;
"RTN","DGCV",113,0)
PARSE ;GETS^DIQ called in CVELIG - in this subroutine stuff results into array
"RTN","DGCV",114,0)
 S DGSRV=$G(DGARR(2,DFN_",",.327,"I"))
"RTN","DGCV",115,0)
 S DGCOM=$G(DGARR(2,DFN_",",.5294,"I")) ;Combat To Date
"RTN","DGCV",116,0)
 S DGGULF=$G(DGARR(2,DFN_",",.322012,"I")) ;Persian Gulf To Date
"RTN","DGCV",117,0)
 S DGSOM=$G(DGARR(2,DFN_",",.322018,"I")) ;Somalia To Date
"RTN","DGCV",118,0)
 S DGYUG=$G(DGARR(2,DFN_",",.322021,"I")) ;Yugoslavia To Date
"RTN","DGCV",119,0)
 S DGCVDT=$G(DGARR(2,DFN_",",.5295,"I")) ;CV End Date
"RTN","DGCV",120,0)
 Q
"RTN","DGCV",121,0)
 ;
"RTN","DGCV",122,0)
CHKSSD(DFN) ;check the Serv Sep Date [Last]
"RTN","DGCV",123,0)
 ;
"RTN","DGCV",124,0)
 ;  Output - RESULT
"RTN","DGCV",125,0)
 ;    1 - Date is present and after 11/11/1998
"RTN","DGCV",126,0)
 ;    0 - Date is present but before 11/11/1998
"RTN","DGCV",127,0)
 ;    A - Date is imprecise & either is or potentially is after 11/11/98
"RTN","DGCV",128,0)
 ;    F - Date is missing
"RTN","DGCV",129,0)
 N DG1
"RTN","DGCV",130,0)
 I $G(DGSRV)']"" Q "F"
"RTN","DGCV",131,0)
 S DG1=$$CHKDATE(DGSRV,0)
"RTN","DGCV",132,0)
 I $G(DG1)']"" S DG1=0
"RTN","DGCV",133,0)
 Q DG1
"RTN","DGCV",134,0)
 ;
"RTN","DGCV",135,0)
CHKREST(DGDATE) ;
"RTN","DGCV",136,0)
 N DG3,DG4,DGDT,DGFLG,DGLEN,DGQ,DGR,DGRES,DGX
"RTN","DGCV",137,0)
 S (DG3,DG4,DGR,DGRES)=""
"RTN","DGCV",138,0)
 S DGQ=0 ;loop terminator
"RTN","DGCV",139,0)
 S DGFLG=0 ;flag to indicate that one of the dates is missing
"RTN","DGCV",140,0)
 F DGX=1:1:4 D
"RTN","DGCV",141,0)
 . S DGDT=$P(DGDATE,U,DGX) D
"RTN","DGCV",142,0)
 . . I $G(DGDT)']"" S DGFLG=1 ;Q
"RTN","DGCV",143,0)
 . . S DG4=$$CHKDATE(DGDT,DGX)
"RTN","DGCV",144,0)
 . . I $G(DG4)'=0 S DG3=$G(DG3)_$G(DG4)
"RTN","DGCV",145,0)
 S DGLEN=$L(DG3)
"RTN","DGCV",146,0)
 S DGQ=0
"RTN","DGCV",147,0)
 F DGX=1:1:DGLEN S DGCHAR=$E(DG3,DGX) D  Q:DGQ=1
"RTN","DGCV",148,0)
 . I DGCHAR=1 S DG3=DGCHAR,DGQ=1 Q
"RTN","DGCV",149,0)
 . I "BCDE"[DGCHAR S DGR=DGR_DGCHAR,DGQ=2
"RTN","DGCV",150,0)
 I DGQ=1 Q 1
"RTN","DGCV",151,0)
 I DGQ=2 Q $E(DGR)
"RTN","DGCV",152,0)
 I DGFLG=1 S DGRES=$$MISS(DFN,DGLEN,DG3)
"RTN","DGCV",153,0)
 Q DGRES
"RTN","DGCV",154,0)
 ;
"RTN","DGCV",155,0)
MISS(DFN,DGLEN,DGRES) ;there is at least one missing date, and in order to 
"RTN","DGCV",156,0)
 ;return a RESULT of a missing date, need to check to see if the 
"RTN","DGCV",157,0)
 ;corresponding indicator field is set to 'YES'
"RTN","DGCV",158,0)
 N DGARR,DGCHAR,DGERR,DGQ,DGR,DGX
"RTN","DGCV",159,0)
 N DGCIND,DGPGIND,DGSIND,DGYIND
"RTN","DGCV",160,0)
 S (DGCHAR,DGQ,DGR)=0
"RTN","DGCV",161,0)
 D GETS^DIQ(2,DFN_",",".32201;.322019;.322016;.5291","I","DGARR","DGERR")
"RTN","DGCV",162,0)
 S DGCIND=$G(DGARR(2,DFN_",",.5291,"I")) ;Combat Service Indicated
"RTN","DGCV",163,0)
 S DGYIND=$G(DGARR(2,DFN_",",.322019,"I")) ;Yugo service indicated
"RTN","DGCV",164,0)
 S DGSIND=$G(DGARR(2,DFN_",",.322016,"I")) ;Somalia service indicated
"RTN","DGCV",165,0)
 S DGPGIND=$G(DGARR(2,DFN_",",.32201,"I")) ;Pers Gulf service indicated
"RTN","DGCV",166,0)
 F DGX=1:1:DGLEN S DGCHAR=$E(DGRES,DGX) D  Q:DGQ=1
"RTN","DGCV",167,0)
 . I DGCHAR="G",($G(DGCIND)="Y") S DGR="G",DGQ=1 Q
"RTN","DGCV",168,0)
 . I DGCHAR="H",($G(DGYIND)="Y") S DGR="H",DGQ=1 Q
"RTN","DGCV",169,0)
 . I DGCHAR="I",($G(DGSIND)="Y") S DGR="I",DGQ=1 Q
"RTN","DGCV",170,0)
 . I DGCHAR="J",($G(DGPGIND)="Y") S DGR="J"
"RTN","DGCV",171,0)
 Q DGR
"RTN","DGCV",172,0)
DELCV(DFN) ;called by the Kill logic of the ACVCOM cross reference
"RTN","DGCV",173,0)
 ;if $$CVELIG^DGCV returns a 0 the CV End Date should be deleted
"RTN","DGCV",174,0)
 ;because this would indicate that fields have been changed and
"RTN","DGCV",175,0)
 ;CV eligibility is no longer appropriate
"RTN","DGCV",176,0)
 ;
"RTN","DGCV",177,0)
 N DGCV,DGFDA
"RTN","DGCV",178,0)
 K DGCVFLG
"RTN","DGCV",179,0)
 S DGCVFLG=0
"RTN","DGCV",180,0)
 I $G(DFN)']"" Q
"RTN","DGCV",181,0)
 I '$D(^DPT(DFN)) Q
"RTN","DGCV",182,0)
 S DGCV=$$GET1^DIQ(2,DFN_",",.5295,"I")
"RTN","DGCV",183,0)
 I $G(DGCV)']"" Q
"RTN","DGCV",184,0)
 S DGCVFLG=1
"RTN","DGCV",185,0)
 S DGFDA(2,DFN_",",.5295)="@"
"RTN","DGCV",186,0)
 D FILE^DIE(,"DGFDA")
"RTN","DGCV",187,0)
 Q
"RTN","DGCVRPT")
0^28^B20362364
"RTN","DGCVRPT",1,0)
DGCVRPT ;ALB/PJR - Unsupported CV End Dates Report;  ; 6/10/04 12:15pm
"RTN","DGCVRPT",2,0)
 ;;5.3;Registration;**564**; Aug 13,1993
"RTN","DGCVRPT",3,0)
 ;
"RTN","DGCVRPT",4,0)
EN ; Called from DG UNSUPPORTED CV END DATES RPT option
"RTN","DGCVRPT",5,0)
 N DGSRT
"RTN","DGCVRPT",6,0)
 S DGSRT=$$SRT I DGSRT="" Q
"RTN","DGCVRPT",7,0)
 D RPTQUE Q
"RTN","DGCVRPT",8,0)
SRT() ; Get sort order
"RTN","DGCVRPT",9,0)
 ; OUPUT: Y - Sort (N=Name; D=DFN)
"RTN","DGCVRPT",10,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DGCVRPT",11,0)
 S DIR(0)="SA^N:Name;D:DFN (Internal ID)"
"RTN","DGCVRPT",12,0)
 S DIR("A")="Sort report by Name or DFN (Internal ID): ",DIR("B")="NAME"
"RTN","DGCVRPT",13,0)
 S DIR("?",1)="Indicate whether the report should be sorted by the"
"RTN","DGCVRPT",14,0)
 S DIR("?")="Veteran's Name or the Internal ID (DFN) of the Veteran"
"RTN","DGCVRPT",15,0)
 D ^DIR I $D(DTOUT)!($D(DUOUT)) Q ""
"RTN","DGCVRPT",16,0)
 Q Y
"RTN","DGCVRPT",17,0)
 ;
"RTN","DGCVRPT",18,0)
RPTQUE ; Get report device. Queue report if requested.
"RTN","DGCVRPT",19,0)
 N POP,ZTRTN,ZTDESC,ZTSAVE,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DGCVRPT",20,0)
 K IOP,%ZIS
"RTN","DGCVRPT",21,0)
 S %ZIS="MQ"
"RTN","DGCVRPT",22,0)
 W !
"RTN","DGCVRPT",23,0)
 D ^%ZIS I POP W !!,*7,"Report Cancelled!",! S DIR(0)="E" D ^DIR Q
"RTN","DGCVRPT",24,0)
 I $D(IO("Q")) D  Q
"RTN","DGCVRPT",25,0)
 .S ZTRTN="RPT^DGCVRPT(DGSRT)"
"RTN","DGCVRPT",26,0)
 .S ZTDESC="Print Unsupported CV End Dates Report"
"RTN","DGCVRPT",27,0)
 .S ZTSAVE("DGSRT")=""
"RTN","DGCVRPT",28,0)
 .D ^%ZTLOAD
"RTN","DGCVRPT",29,0)
 .W !!,"Report "_$S($D(ZTSK):"Queued!",1:"Cancelled!")
"RTN","DGCVRPT",30,0)
 .W ! S DIR(0)="E" D ^DIR
"RTN","DGCVRPT",31,0)
 .D HOME^%ZIS
"RTN","DGCVRPT",32,0)
 D RPT(DGSRT)
"RTN","DGCVRPT",33,0)
 D ^%ZISC
"RTN","DGCVRPT",34,0)
 Q
"RTN","DGCVRPT",35,0)
 ;
"RTN","DGCVRPT",36,0)
RPT(DGSRT) ; Entry point to produce report
"RTN","DGCVRPT",37,0)
 D EN1,EN2(DGSRT) Q
"RTN","DGCVRPT",38,0)
EN1 ; Extract
"RTN","DGCVRPT",39,0)
 N RNAME,DFN,RECCOUNT,SELCOUNT,DGXTMP,RES,CEN,CALC,EDITED
"RTN","DGCVRPT",40,0)
 ; Initialize ^XTMP global and set start date
"RTN","DGCVRPT",41,0)
 K ^XTMP("DGCVRPT")
"RTN","DGCVRPT",42,0)
 S RNAME="DG UNSUPPORTED CV END DATE REPORT"
"RTN","DGCVRPT",43,0)
 S ^XTMP("DGCVRPT",0)=$$FMADD^XLFDT(DT,60)_U_DT_U_RNAME
"RTN","DGCVRPT",44,0)
 S $P(^XTMP("DGCVRPT","DATE"),U,1)=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","DGCVRPT",45,0)
 S:$G(ZTSK) ZTREQ="@"
"RTN","DGCVRPT",46,0)
 ; Set variables and initialize array for counts
"RTN","DGCVRPT",47,0)
 S (DFN,RECCOUNT,SELCOUNT,EDITED)=0
"RTN","DGCVRPT",48,0)
 S DGXTMP="^XTMP(""DGCVRPT"",""NOSUP"")"
"RTN","DGCVRPT",49,0)
 ; Loop through cross-reference "E"
"RTN","DGCVRPT",50,0)
 ; If patient meets report criteria, put on list
"RTN","DGCVRPT",51,0)
 F  S EDITED=$O(^DPT("E",EDITED)) Q:'EDITED  S DFN=0 D
"RTN","DGCVRPT",52,0)
 .F  S DFN=$O(^DPT("E",EDITED,DFN)) Q:'DFN  D CHK I CEN,CEN'=CALC D PUT
"RTN","DGCVRPT",53,0)
 S $P(^XTMP("DGCVRPT","DATE"),U,2)=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","DGCVRPT",54,0)
 K ^XTMP("DGCVRPT","RUNNING"),DGXTMP
"RTN","DGCVRPT",55,0)
 Q
"RTN","DGCVRPT",56,0)
 ;
"RTN","DGCVRPT",57,0)
CHK ; Calculate CV End Date
"RTN","DGCVRPT",58,0)
 ; INPUT: DFN - Patient file IEN
"RTN","DGCVRPT",59,0)
 ; OUTPUT: CEN  = CV End Date on file
"RTN","DGCVRPT",60,0)
 ;         CALC = Calculated CV End Date
"RTN","DGCVRPT",61,0)
 N SSD,N322,I99
"RTN","DGCVRPT",62,0)
 S RECCOUNT=RECCOUNT+1 D CNT
"RTN","DGCVRPT",63,0)
 S CALC="",CEN=$P($G(^DPT(DFN,.52)),U,15) I 'CEN Q
"RTN","DGCVRPT",64,0)
 N SSD,N322,I99
"RTN","DGCVRPT",65,0)
 S SSD=$P($G(^DPT(DFN,.32)),U,7) I 'SSD Q
"RTN","DGCVRPT",66,0)
 I $E(SSD,6,7)="00" Q
"RTN","DGCVRPT",67,0)
 I SSD'>2981111 Q
"RTN","DGCVRPT",68,0)
 I ($P($G(^DPT(DFN,.52)),U,14))>2981111 D SCH Q
"RTN","DGCVRPT",69,0)
 S N322=$G(^DPT(DFN,.322))
"RTN","DGCVRPT",70,0)
 F I99=12,18,21 I $P(N322,U,I99)>2981111 D SCH Q
"RTN","DGCVRPT",71,0)
 Q
"RTN","DGCVRPT",72,0)
 ;
"RTN","DGCVRPT",73,0)
SCH S CALC=$P($$SCH^XLFDT("24M",SSD),".",1) Q
"RTN","DGCVRPT",74,0)
 ;
"RTN","DGCVRPT",75,0)
PUT ; Put record on list
"RTN","DGCVRPT",76,0)
 N NAM,SSN,NZERO
"RTN","DGCVRPT",77,0)
 S SELCOUNT=SELCOUNT+1 D CNT
"RTN","DGCVRPT",78,0)
 S NZERO=$G(^DPT(DFN,0)),NAM=$P(NZERO,U,1),SSN=$P(NZERO,U,9)
"RTN","DGCVRPT",79,0)
 S @DGXTMP@("DFN",DFN,0)=NAM_U_SSN_U_CEN
"RTN","DGCVRPT",80,0)
 I NAM'="" S @DGXTMP@("NAM",NAM,DFN)=""
"RTN","DGCVRPT",81,0)
 Q
"RTN","DGCVRPT",82,0)
 ;
"RTN","DGCVRPT",83,0)
CNT S @DGXTMP@("CNT","VET")=SELCOUNT_U_RECCOUNT Q
"RTN","DGCVRPT",84,0)
 ;
"RTN","DGCVRPT",85,0)
EN2(DGSRT) ; Print
"RTN","DGCVRPT",86,0)
 ; INPUT    DGSRT - Sort order for report (Name or DFN)
"RTN","DGCVRPT",87,0)
 N PG,LINE,RPTDT,CRT,OUT,DSH,CNT,MXLNE,DGXTMP,DGTOT,LOOP
"RTN","DGCVRPT",88,0)
 S:$G(ZTSK) ZTREQ="@"
"RTN","DGCVRPT",89,0)
 D PRTVAR
"RTN","DGCVRPT",90,0)
 U IO D HDR
"RTN","DGCVRPT",91,0)
 ;;
"RTN","DGCVRPT",92,0)
 S LOOP="LOOP"_DGSRT
"RTN","DGCVRPT",93,0)
 D @LOOP Q:OUT
"RTN","DGCVRPT",94,0)
 D TOT Q:OUT
"RTN","DGCVRPT",95,0)
 W ! S OUT=$$PAUSE
"RTN","DGCVRPT",96,0)
 Q
"RTN","DGCVRPT",97,0)
LOOPN ; Sort by name. Loop through ^XTMP("DGCVRPT","NOSUP","NAM", x-ref
"RTN","DGCVRPT",98,0)
 N NM,DFN
"RTN","DGCVRPT",99,0)
 S (NM,DFN)=""
"RTN","DGCVRPT",100,0)
 F  S NM=$O(@DGXTMP@("NAM",NM)) Q:NM=""!OUT  D
"RTN","DGCVRPT",101,0)
 .F  S DFN=$O(@DGXTMP@("NAM",NM,DFN)) Q:DFN=""!OUT  D PRINT
"RTN","DGCVRPT",102,0)
 Q
"RTN","DGCVRPT",103,0)
LOOPD ; Sort by DFN. Loop through ^XTMP("DGCVRPT","NOSUP","DFN", x-ref
"RTN","DGCVRPT",104,0)
 N DFN S DFN=0
"RTN","DGCVRPT",105,0)
 F  S DFN=$O(@DGXTMP@("DFN",DFN)) Q:'DFN!OUT  D PRINT
"RTN","DGCVRPT",106,0)
 Q
"RTN","DGCVRPT",107,0)
PRINT ; Print veteran
"RTN","DGCVRPT",108,0)
 N VET
"RTN","DGCVRPT",109,0)
 Q:'$D(@DGXTMP@("DFN",DFN))
"RTN","DGCVRPT",110,0)
 S VET=$G(@DGXTMP@("DFN",DFN,0))
"RTN","DGCVRPT",111,0)
 I LINE>MXLNE S OUT=$$PAUSE Q:OUT  D HDR
"RTN","DGCVRPT",112,0)
 W !,DFN,?12,$P(VET,U,2),?24,$E($P(VET,U,1),1,39),?64,$$FMTE^XLFDT($P(VET,U,3))
"RTN","DGCVRPT",113,0)
 S LINE=LINE+1 Q
"RTN","DGCVRPT",114,0)
TOT ; Print total records at the end of the report
"RTN","DGCVRPT",115,0)
 I LINE+4>MXLNE S OUT=$$PAUSE Q:OUT  D HDR
"RTN","DGCVRPT",116,0)
 W !!,"Total Records Printed:          ",$$RJ^XLFSTR($P(DGTOT,U,1),7)
"RTN","DGCVRPT",117,0)
 W !!,"Total Records with CV End Dates:",$$RJ^XLFSTR($P(DGTOT,U,2),7)
"RTN","DGCVRPT",118,0)
 Q
"RTN","DGCVRPT",119,0)
PRTVAR ; Set up variables needed to print report
"RTN","DGCVRPT",120,0)
 S CRT=$S($E(IOST,1,2)="C-":1,1:0)
"RTN","DGCVRPT",121,0)
 S DGXTMP="^XTMP(""DGCVRPT"",""NOSUP"")"
"RTN","DGCVRPT",122,0)
 S DGTOT=$G(@DGXTMP@("CNT","VET"))
"RTN","DGCVRPT",123,0)
 S:$G(DGSRT)="" DGSRT="N"
"RTN","DGCVRPT",124,0)
 S (PG,CNT,OUT)=0,RPTDT=$$FMTE^XLFDT(DT),MXLNE=$S(CRT:15,1:52)
"RTN","DGCVRPT",125,0)
 S DSH="",$P(DSH,"=",80)=""
"RTN","DGCVRPT",126,0)
 Q
"RTN","DGCVRPT",127,0)
HDR ; Print report header
"RTN","DGCVRPT",128,0)
 S PG=PG+1,LINE=0
"RTN","DGCVRPT",129,0)
 W @IOF
"RTN","DGCVRPT",130,0)
 W ?0,"Report Date: ",RPTDT,?68,"Page: ",$$RJ^XLFSTR(PG,4)
"RTN","DGCVRPT",131,0)
 W !,"Sorted By: "_$S(DGSRT="N":"Name",1:"DFN")
"RTN","DGCVRPT",132,0)
 W !!,$$CJ^XLFSTR("CV END DATES WITH NO SUPPORTING MS DATA REPORT",80)
"RTN","DGCVRPT",133,0)
 W !!,"DFN",?12,"SSN",?24,"Veteran's Name",?64,"CV End Date"
"RTN","DGCVRPT",134,0)
 W !,DSH
"RTN","DGCVRPT",135,0)
 Q
"RTN","DGCVRPT",136,0)
PAUSE() ; If report is sent to screen, prompt for next page or quit
"RTN","DGCVRPT",137,0)
 N DIR,DIRUT,DUOUT,DTOUT,X,Y
"RTN","DGCVRPT",138,0)
 I 'CRT Q 0
"RTN","DGCVRPT",139,0)
 S DIR(0)="E"
"RTN","DGCVRPT",140,0)
 D ^DIR I 'Y Q 1
"RTN","DGCVRPT",141,0)
 Q 0
"RTN","DGENA")
0^27^B17015161
"RTN","DGENA",1,0)
DGENA ;ALB/CJM,ISA/KWP,Zoltan,LBD - Enrollment API - Retrieve Data; 12/11/00 4:19pm ; 12/11/00 9:36pm
"RTN","DGENA",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564**;Aug 13, 1993
"RTN","DGENA",3,0)
 ;
"RTN","DGENA",4,0)
FINDCUR(DFN) ;
"RTN","DGENA",5,0)
 ;Description: Used to find a patients current enrollment.
"RTN","DGENA",6,0)
 ;Input :
"RTN","DGENA",7,0)
 ;  DFN - Patient IEN
"RTN","DGENA",8,0)
 ;Output:
"RTN","DGENA",9,0)
 ;  Function Value - returns the internal entry number of the patient's
"RTN","DGENA",10,0)
 ;     current enrollment if there is one, NULL otherwise. Checks that
"RTN","DGENA",11,0)
 ;     current enrollment actually belongs to the patient.
"RTN","DGENA",12,0)
 ;
"RTN","DGENA",13,0)
 Q:'$G(DFN) ""
"RTN","DGENA",14,0)
 ;
"RTN","DGENA",15,0)
 N CUR
"RTN","DGENA",16,0)
 S CUR=$P($G(^DPT(DFN,"ENR")),"^")
"RTN","DGENA",17,0)
 I CUR,$P($G(^DGEN(27.11,CUR,0)),"^",2)'=DFN S CUR=""
"RTN","DGENA",18,0)
 Q CUR
"RTN","DGENA",19,0)
 ;
"RTN","DGENA",20,0)
FINDPRI(DGENRIEN) ;
"RTN","DGENA",21,0)
 ;Description: Used to obtain a patient's  enrollment record that was
"RTN","DGENA",22,0)
 ;     prior to the enrollment identified by DGENRIEN.
"RTN","DGENA",23,0)
 ;Input :
"RTN","DGENA",24,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT
"RTN","DGENA",25,0)
 ;     record
"RTN","DGENA",26,0)
 ;Output:
"RTN","DGENA",27,0)
 ;  Function Value - returns the internal entry number of the prior
"RTN","DGENA",28,0)
 ;     enrollment for the patient if there is one, NULL otherwise.
"RTN","DGENA",29,0)
 ;
"RTN","DGENA",30,0)
 Q:'$G(DGENRIEN) ""
"RTN","DGENA",31,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",9)
"RTN","DGENA",32,0)
 ;
"RTN","DGENA",33,0)
ENROLLED(DFN) ;
"RTN","DGENA",34,0)
 ;Description: Returns whether the patient is currently enrolled.
"RTN","DGENA",35,0)
 ;Input:
"RTN","DGENA",36,0)
 ;  DFN - Patient IEN
"RTN","DGENA",37,0)
 ;Output:
"RTN","DGENA",38,0)
 ;  Function Value - returns 1 if the patient is currently enrolled with
"RTN","DGENA",39,0)
 ;     a status of VERIFIED, 0 otherwise
"RTN","DGENA",40,0)
 ;
"RTN","DGENA",41,0)
 N STATUS
"RTN","DGENA",42,0)
 S STATUS=$$STATUS($G(DFN))
"RTN","DGENA",43,0)
 I (STATUS=2) Q 1
"RTN","DGENA",44,0)
 Q 0
"RTN","DGENA",45,0)
 ;
"RTN","DGENA",46,0)
STATUS(DFN) ;
"RTN","DGENA",47,0)
 ;Description: Returns ENROLLMENT STATUS from the patient's current
"RTN","DGENA",48,0)
 ;     enrollment.
"RTN","DGENA",49,0)
 ;Input:
"RTN","DGENA",50,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",51,0)
 ;Output:
"RTN","DGENA",52,0)
 ;  Function Value - If the patient has a current ENROLLMENT STATUS this
"RTN","DGENA",53,0)
 ;     function will return its value, otherwise it returns NULL.
"RTN","DGENA",54,0)
 N DGENRIEN
"RTN","DGENA",55,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",56,0)
 Q:'DGENRIEN ""
"RTN","DGENA",57,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",4)
"RTN","DGENA",58,0)
 ;
"RTN","DGENA",59,0)
PRIORITY(DFN) ;
"RTN","DGENA",60,0)
 ;Description: Returns ENROLLMENT PRIORITY from the patient's current
"RTN","DGENA",61,0)
 ;     enrollment.
"RTN","DGENA",62,0)
 ;Input:
"RTN","DGENA",63,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",64,0)
 ;Output:
"RTN","DGENA",65,0)
 ;  Function Value - If the patient has a current ENROLLMENT PRIORITY
"RTN","DGENA",66,0)
 ;     this function will return its value, otherwise it returns NULL.
"RTN","DGENA",67,0)
 N DGENRIEN
"RTN","DGENA",68,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",69,0)
 Q:'DGENRIEN ""
"RTN","DGENA",70,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",7)
"RTN","DGENA",71,0)
 ;
"RTN","DGENA",72,0)
SOURCE(DFN) ;
"RTN","DGENA",73,0)
 ;Description: Returns SOURCE OF ENROLLMENT from the patient's current
"RTN","DGENA",74,0)
 ;     enrollment.
"RTN","DGENA",75,0)
 ;Input:
"RTN","DGENA",76,0)
 ;  DFN -  Patient IEN
"RTN","DGENA",77,0)
 ;Output:
"RTN","DGENA",78,0)
 ;  Function Value - If the patient has a current ENROLLMENT 
"RTN","DGENA",79,0)
 ;     this function will return the SOURCE OF ENROLLMENT, otherwise
"RTN","DGENA",80,0)
 ;     it returns NULL.
"RTN","DGENA",81,0)
 ;
"RTN","DGENA",82,0)
 N DGENRIEN
"RTN","DGENA",83,0)
 S DGENRIEN=$$FINDCUR($G(DFN))
"RTN","DGENA",84,0)
 Q:'DGENRIEN ""
"RTN","DGENA",85,0)
 Q $P($G(^DGEN(27.11,DGENRIEN,0)),"^",3)
"RTN","DGENA",86,0)
 ;
"RTN","DGENA",87,0)
GET(DGENRIEN,DGENR) ;
"RTN","DGENA",88,0)
 ;Description: Used to obtain a record from the Patient Enrollment file
"RTN","DGENA",89,0)
 ;     into the local DGENR array.
"RTN","DGENA",90,0)
 ;Input :
"RTN","DGENA",91,0)
 ;  DGENRIEN - this is the internal entry number of a PATIENT ENROLLMENT record
"RTN","DGENA",92,0)
 ;Output:
"RTN","DGENA",93,0)
 ;  Function  Value - returns 1 on success, 0 on failure.
"RTN","DGENA",94,0)
 ;  DGENR - this is the name of  a local array, it should be passed by
"RTN","DGENA",95,0)
 ;     reference. If the function is successful this array will
"RTN","DGENA",96,0)
 ;     contain the enrollment.
"RTN","DGENA",97,0)
 ;
"RTN","DGENA",98,0)
 ;      subscript      field name
"RTN","DGENA",99,0)
 ;     "APP"           Enrollment Applicaiton Date
"RTN","DGENA",100,0)
 ;     "DATE"          Enrollment Date
"RTN","DGENA",101,0)
 ;     "END"          Enrollment End Date
"RTN","DGENA",102,0)
 ;     "DFN"           Patient IEN
"RTN","DGENA",103,0)
 ;     "SOURCE"        Enrollment Source
"RTN","DGENA",104,0)
 ;     "STATUS"        Enrollment Status
"RTN","DGENA",105,0)
 ;     "REASON"        Reason Canceled/Declined
"RTN","DGENA",106,0)
 ;     "REMARKS"       Canceled/Declined Remarks
"RTN","DGENA",107,0)
 ;     "FACREC"        Facility Received
"RTN","DGENA",108,0)
 ;     "PRIORITY"      Enrollment Priority
"RTN","DGENA",109,0)
 ;     "SUBGRP"        Enrollment Sub-Group
"RTN","DGENA",110,0)
 ;     "EFFDATE"       Effective Date
"RTN","DGENA",111,0)
 ;     "PRIORREC"      Prior Enrollment Record
"RTN","DGENA",112,0)
 ;     "ELIG","CODE"            Primary Eligibility Code
"RTN","DGENA",113,0)
 ;     "ELIG","CODE",<code ien> Eligibility Codes
"RTN","DGENA",114,0)
 ;     "ELIG","SC"              Service Connected
"RTN","DGENA",115,0)
 ;     "ELIG","SCPER"           Service Connected Percentage
"RTN","DGENA",116,0)
 ;     "ELIG","POW"             POW Status Indicated
"RTN","DGENA",117,0)
 ;     "ELIG","A&A"             Receiving A&A Benefits
"RTN","DGENA",118,0)
 ;     "ELIG","HB"              Receiving Housebound Benefits
"RTN","DGENA",119,0)
 ;     "ELIG","VAPEN"           Receiving a VA Pension
"RTN","DGENA",120,0)
 ;     "ELIG","VACKAMT"         Total Annual VA Check Amount
"RTN","DGENA",121,0)
 ;     "ELIG","DISRET"          Disability Ret. From Military
"RTN","DGENA",122,0)
 ;     "ELIG","MEDICAID"        Medicaid
"RTN","DGENA",123,0)
 ;     "ELIG","AO"              Exposed to Agent Orange
"RTN","DGENA",124,0)
 ;     "ELIG","IR"              Radiation Exposure Indicated
"RTN","DGENA",125,0)
 ;     "ELIG","EC"              Environmental Contaminants
"RTN","DGENA",126,0)
 ;     "ELIG","MTSTA"           Means Test Status
"RTN","DGENA",127,0)
 ;     "ELIG","VCD"             Veteran Catastrophically Disabled?
"RTN","DGENA",128,0)
 ;     "ELIG","PH"              Purple Heart Indicated?
"RTN","DGENA",129,0)
 ;     "ELIG","UNEMPLOY"        Unemployable
"RTN","DGENA",130,0)
 ;     "ELIG","CVELEDT"         Combat Veteran End Date
"RTN","DGENA",131,0)
 ;     "DATETIME"      Date/Time Entered
"RTN","DGENA",132,0)
 ;     "USER"          Entered By
"RTN","DGENA",133,0)
 ;    
"RTN","DGENA",134,0)
 N SUB,NODE
"RTN","DGENA",135,0)
 I '$G(DGENRIEN) Q 0
"RTN","DGENA",136,0)
 I '$D(^DGEN(27.11,DGENRIEN,0)) Q 0
"RTN","DGENA",137,0)
 K DGENR
"RTN","DGENA",138,0)
 S DGENR=""
"RTN","DGENA",139,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,0))
"RTN","DGENA",140,0)
 S DGENR("APP")=$P(NODE,"^")
"RTN","DGENA",141,0)
 S DGENR("DATE")=$P(NODE,"^",10)
"RTN","DGENA",142,0)
 S DGENR("END")=$P(NODE,"^",11)
"RTN","DGENA",143,0)
 S DGENR("DFN")=$P(NODE,"^",2)
"RTN","DGENA",144,0)
 S DGENR("SOURCE")=$P(NODE,"^",3)
"RTN","DGENA",145,0)
 S DGENR("STATUS")=$P(NODE,"^",4)
"RTN","DGENA",146,0)
 S DGENR("REASON")=$P(NODE,"^",5)
"RTN","DGENA",147,0)
 S DGENR("FACREC")=$P(NODE,"^",6)
"RTN","DGENA",148,0)
 S DGENR("PRIORITY")=$P(NODE,"^",7)
"RTN","DGENA",149,0)
 S DGENR("EFFDATE")=$P(NODE,"^",8)
"RTN","DGENA",150,0)
 S DGENR("PRIORREC")=$P(NODE,"^",9)
"RTN","DGENA",151,0)
 ;Phase II Get enrollment sub-grp (SRS 6.4)
"RTN","DGENA",152,0)
 S DGENR("SUBGRP")=$P(NODE,"^",12)
"RTN","DGENA",153,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"R"))
"RTN","DGENA",154,0)
 S DGENR("REMARKS")=$P(NODE,"^")
"RTN","DGENA",155,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"E"))
"RTN","DGENA",156,0)
 S DGENR("ELIG","CODE")=$P(NODE,"^")
"RTN","DGENA",157,0)
 S DGENR("ELIG","SC")=$P(NODE,"^",2)
"RTN","DGENA",158,0)
 S DGENR("ELIG","SCPER")=$P(NODE,"^",3)
"RTN","DGENA",159,0)
 S DGENR("ELIG","POW")=$P(NODE,"^",4)
"RTN","DGENA",160,0)
 S DGENR("ELIG","A&A")=$P(NODE,"^",5)
"RTN","DGENA",161,0)
 S DGENR("ELIG","HB")=$P(NODE,"^",6)
"RTN","DGENA",162,0)
 S DGENR("ELIG","VAPEN")=$P(NODE,"^",7)
"RTN","DGENA",163,0)
 S DGENR("ELIG","VACKAMT")=$P(NODE,"^",8)
"RTN","DGENA",164,0)
 S DGENR("ELIG","DISRET")=$P(NODE,"^",9)
"RTN","DGENA",165,0)
 S DGENR("ELIG","MEDICAID")=$P(NODE,"^",10)
"RTN","DGENA",166,0)
 S DGENR("ELIG","AO")=$P(NODE,"^",11)
"RTN","DGENA",167,0)
 S DGENR("ELIG","IR")=$P(NODE,"^",12)
"RTN","DGENA",168,0)
 S DGENR("ELIG","EC")=$P(NODE,"^",13)
"RTN","DGENA",169,0)
 S DGENR("ELIG","MTSTA")=$P(NODE,"^",14)
"RTN","DGENA",170,0)
 S DGENR("ELIG","VCD")=$P(NODE,"^",15)
"RTN","DGENA",171,0)
 S DGENR("ELIG","PH")=$P(NODE,"^",16)
"RTN","DGENA",172,0)
 S DGENR("ELIG","UNEMPLOY")=$P(NODE,"^",17)
"RTN","DGENA",173,0)
 S DGENR("ELIG","CVELEDT")=$P(NODE,"^",18)
"RTN","DGENA",174,0)
 ;S DGENCDZZ=1 ; for CD Testing (disabled).
"RTN","DGENA",175,0)
 S NODE=$G(^DGEN(27.11,DGENRIEN,"U"))
"RTN","DGENA",176,0)
 S DGENR("DATETIME")=$P(NODE,"^")
"RTN","DGENA",177,0)
 S DGENR("USER")=$P(NODE,"^",2)
"RTN","DGENA",178,0)
 Q 1
"RTN","DGENA",179,0)
 ;
"RTN","DGENA1A")
0^12^B12112347
"RTN","DGENA1A",1,0)
DGENA1A ;ALB/CJM,ISA/KWP,Zoltan,LBD - Enrollment API - File Data Continued; 12/11/00 3:47pm ; 12/11/00 9:14pm
"RTN","DGENA1A",2,0)
 ;;5.3;Registration;**121,147,232,314,564**;Aug 13,1993
"RTN","DGENA1A",3,0)
 ;
"RTN","DGENA1A",4,0)
KILLALL(DGENRIEN) ;
"RTN","DGENA1A",5,0)
 ;kills all x-refs on the record in the Patient Enrollment file
"RTN","DGENA1A",6,0)
 ;pointed to by DGENRIEN
"RTN","DGENA1A",7,0)
 ;
"RTN","DGENA1A",8,0)
 N DGENR,SUB,VALUE
"RTN","DGENA1A",9,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",10,0)
 Q:'$$GET^DGENA(DGENRIEN,.DGENR)
"RTN","DGENA1A",11,0)
 S SUB=""
"RTN","DGENA1A",12,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",13,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",14,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",15,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",16,0)
 S SUB=""
"RTN","DGENA1A",17,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",18,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",19,0)
 .D KILL(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",20,0)
 Q
"RTN","DGENA1A",21,0)
 ;
"RTN","DGENA1A",22,0)
SETALL(DGENRIEN,DGENR) ;
"RTN","DGENA1A",23,0)
 ;Sets all x-refs on the record in the Patient Enrollment file.
"RTN","DGENA1A",24,0)
 ;Inputs:
"RTN","DGENA1A",25,0)
 ;  DGENRIEN - ptr to PATIENT ENROLLMENT file
"RTN","DGENA1A",26,0)
 ;  DGENR - array containing the record, pass by reference
"RTN","DGENA1A",27,0)
 ;
"RTN","DGENA1A",28,0)
 N SUB,VALUE
"RTN","DGENA1A",29,0)
 Q:'$G(DGENRIEN)
"RTN","DGENA1A",30,0)
 Q:'$D(DGENR)
"RTN","DGENA1A",31,0)
 ;
"RTN","DGENA1A",32,0)
 S SUB=""
"RTN","DGENA1A",33,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  D
"RTN","DGENA1A",34,0)
 .Q:(SUB="ELIG")
"RTN","DGENA1A",35,0)
 .Q:DGENR(SUB)=""
"RTN","DGENA1A",36,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR(SUB))
"RTN","DGENA1A",37,0)
 S SUB=""
"RTN","DGENA1A",38,0)
 F  S SUB=$O(DGENR("ELIG",SUB)) Q:SUB=""  D
"RTN","DGENA1A",39,0)
 .Q:DGENR("ELIG",SUB)=""
"RTN","DGENA1A",40,0)
 .D SET(27.11,DGENRIEN,$$FIELD^DGENU(SUB),DGENR("ELIG",SUB))
"RTN","DGENA1A",41,0)
 Q
"RTN","DGENA1A",42,0)
 ;
"RTN","DGENA1A",43,0)
KILL(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",44,0)
 ;executes all the kill logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",45,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",46,0)
 ;
"RTN","DGENA1A",47,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",48,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",49,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,2) S X=VALUE
"RTN","DGENA1A",50,0)
 Q
"RTN","DGENA1A",51,0)
 ;
"RTN","DGENA1A",52,0)
SET(FILE,IEN,FIELD,VALUE) ;
"RTN","DGENA1A",53,0)
 ;executes all the set logic for x-refs on the field=FIELD for the
"RTN","DGENA1A",54,0)
 ;record=DGENRIEN for the file=FILE for the field value=VALUE
"RTN","DGENA1A",55,0)
 ;
"RTN","DGENA1A",56,0)
 N D0,DA,DIV,DGIX,X
"RTN","DGENA1A",57,0)
 S DA=IEN,X=VALUE,DGIX=0
"RTN","DGENA1A",58,0)
 F  S DGIX=$O(^DD(FILE,FIELD,1,DGIX)) Q:'DGIX  X ^(DGIX,1)
"RTN","DGENA1A",59,0)
 Q
"RTN","DGENA1A",60,0)
 ;
"RTN","DGENA1A",61,0)
EDIT(DA,DGENR) ;
"RTN","DGENA1A",62,0)
 ;Description: Overlays a currently existing record, ien=DA, with values
"RTN","DGENA1A",63,0)
 ;     from DGENR array
"RTN","DGENA1A",64,0)
 ;Input -
"RTN","DGENA1A",65,0)
 ;  DA - ien of record in Patient Enrollment file
"RTN","DGENA1A",66,0)
 ;  DGENR - array containing an enrollment, pass by reference
"RTN","DGENA1A",67,0)
 ;Output - 1 on success, 0 on failure
"RTN","DGENA1A",68,0)
 ;
"RTN","DGENA1A",69,0)
 ; *** NOTE: This is called from within FM.  There is a problem in ***
"RTN","DGENA1A",70,0)
 ; *** that ^DIE can not be used.  Instead, the fields             ***
"RTN","DGENA1A",71,0)
 ; *** are hard-set and cross-referenced.                          ***
"RTN","DGENA1A",72,0)
 ;
"RTN","DGENA1A",73,0)
 N NODE
"RTN","DGENA1A",74,0)
 Q:'$G(DA) 0
"RTN","DGENA1A",75,0)
 S NODE=$G(^DGEN(27.11,$G(DA),0))
"RTN","DGENA1A",76,0)
 Q:NODE="" 0
"RTN","DGENA1A",77,0)
 ;
"RTN","DGENA1A",78,0)
 ;kill off all the cross-references (FM doesn't have an API to do this)
"RTN","DGENA1A",79,0)
 D KILLALL(DA)
"RTN","DGENA1A",80,0)
 ;
"RTN","DGENA1A",81,0)
 ;now hand-set all the fields
"RTN","DGENA1A",82,0)
 ;Phase II Add subgroup to the 12 piece (SRS 6.4)
"RTN","DGENA1A",83,0)
 S NODE=DGENR("APP")_U_DGENR("DFN")_U_DGENR("SOURCE")_U_DGENR("STATUS")_U_DGENR("REASON")_U_DGENR("FACREC")_U_DGENR("PRIORITY")_U_DGENR("EFFDATE")_U_DGENR("PRIORREC")_U_DGENR("DATE")_U_DGENR("END")_U_DGENR("SUBGRP")
"RTN","DGENA1A",84,0)
 S ^DGEN(27.11,DA,0)=NODE
"RTN","DGENA1A",85,0)
 S ^DGEN(27.11,DA,"R")=DGENR("REMARKS")
"RTN","DGENA1A",86,0)
 S NODE=DGENR("ELIG","CODE")
"RTN","DGENA1A",87,0)
 S NODE=NODE_U_DGENR("ELIG","SC")
"RTN","DGENA1A",88,0)
 S NODE=NODE_U_DGENR("ELIG","SCPER")
"RTN","DGENA1A",89,0)
 S NODE=NODE_U_DGENR("ELIG","POW")
"RTN","DGENA1A",90,0)
 S NODE=NODE_U_DGENR("ELIG","A&A")
"RTN","DGENA1A",91,0)
 S NODE=NODE_U_DGENR("ELIG","HB")
"RTN","DGENA1A",92,0)
 S NODE=NODE_U_DGENR("ELIG","VAPEN")
"RTN","DGENA1A",93,0)
 S NODE=NODE_U_DGENR("ELIG","VACKAMT")
"RTN","DGENA1A",94,0)
 S NODE=NODE_U_DGENR("ELIG","DISRET")
"RTN","DGENA1A",95,0)
 S NODE=NODE_U_DGENR("ELIG","MEDICAID")
"RTN","DGENA1A",96,0)
 S NODE=NODE_U_DGENR("ELIG","AO")
"RTN","DGENA1A",97,0)
 S NODE=NODE_U_DGENR("ELIG","IR")
"RTN","DGENA1A",98,0)
 S NODE=NODE_U_DGENR("ELIG","EC")
"RTN","DGENA1A",99,0)
 S NODE=NODE_U_DGENR("ELIG","MTSTA")
"RTN","DGENA1A",100,0)
 S NODE=NODE_U_DGENR("ELIG","VCD")
"RTN","DGENA1A",101,0)
 S NODE=NODE_U_DGENR("ELIG","PH")
"RTN","DGENA1A",102,0)
 S NODE=NODE_U_DGENR("ELIG","UNEMPLOY")
"RTN","DGENA1A",103,0)
 S NODE=NODE_U_DGENR("ELIG","CVELEDT")
"RTN","DGENA1A",104,0)
 S ^DGEN(27.11,DA,"E")=NODE
"RTN","DGENA1A",105,0)
 S ^DGEN(27.11,DA,"U")=DGENR("DATETIME")_U_DGENR("USER")
"RTN","DGENA1A",106,0)
 ;
"RTN","DGENA1A",107,0)
 ;set the x-refs
"RTN","DGENA1A",108,0)
 D SETALL(DA,.DGENR)
"RTN","DGENA1A",109,0)
 Q 1
"RTN","DGENEGT1")
0^29^B44849273
"RTN","DGENEGT1",1,0)
DGENEGT1 ;ALB/KCL,ISA/KWP,LBD,RGL,BRM - Enrollment Group Threshold API's ; 7/28/04 12:54pm
"RTN","DGENEGT1",2,0)
 ;;5.3;Registration;**232,417,454,491,513,451,564**;Aug 13, 1993
"RTN","DGENEGT1",3,0)
 ;
"RTN","DGENEGT1",4,0)
 ;
"RTN","DGENEGT1",5,0)
NOTIFY(DGEGT,OLDEGT) ;
"RTN","DGENEGT1",6,0)
 ; Description: This is used to send a message to local mail group.
"RTN","DGENEGT1",7,0)
 ; The notification is used to communicate changes in the Enrollment
"RTN","DGENEGT1",8,0)
 ; Group Threshold (EGT) setting to users at the local site.
"RTN","DGENEGT1",9,0)
 ;
"RTN","DGENEGT1",10,0)
 ;  Input:
"RTN","DGENEGT1",11,0)
 ;    DGEGT - the new Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",12,0)
 ;   OLDEGT - the previous Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",13,0)
 ;
"RTN","DGENEGT1",14,0)
 ; Output: None
"RTN","DGENEGT1",15,0)
 ;
"RTN","DGENEGT1",16,0)
 N TEXT,XMDUN,XMDUZ,XMTEXT,XMROU,XMSTRIP,XMSUB,XMY,XMZ,OLDPRI
"RTN","DGENEGT1",17,0)
 ;
"RTN","DGENEGT1",18,0)
 ; init subject and sender
"RTN","DGENEGT1",19,0)
 S XMSUB="Enrollment Group Threshold (EGT) Changed"
"RTN","DGENEGT1",20,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENEGT1",21,0)
 ;
"RTN","DGENEGT1",22,0)
 ; recipient
"RTN","DGENEGT1",23,0)
 S XMY("G.DGEN EGT UPDATES")=""
"RTN","DGENEGT1",24,0)
 ;
"RTN","DGENEGT1",25,0)
 ; get old EGT priority
"RTN","DGENEGT1",26,0)
 S OLDPRI=$G(OLDEGT("PRIORITY"))
"RTN","DGENEGT1",27,0)
 ;
"RTN","DGENEGT1",28,0)
 S XMTEXT="TEXT("
"RTN","DGENEGT1",29,0)
 S TEXT(1)="The Secretary of the VA has officially changed the enrollment priority"
"RTN","DGENEGT1",30,0)
 S TEXT(2)="grouping of veterans who shall receive care.  This change may place"
"RTN","DGENEGT1",31,0)
 S TEXT(3)="veterans under your facilities care into a 'Not Enrolled' category."
"RTN","DGENEGT1",32,0)
 S TEXT(4)=""
"RTN","DGENEGT1",33,0)
 S TEXT(5)=""
"RTN","DGENEGT1",34,0)
 S TEXT(6)="           Prior EGT Priority:  "_$S($G(OLDPRI):$$EXTERNAL^DILFD(27.16,.02,"F",OLDPRI),1:"N/A")_$S($G(OLDEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",OLDEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",35,0)
 S TEXT(7)=""
"RTN","DGENEGT1",36,0)
 S TEXT(8)=""
"RTN","DGENEGT1",37,0)
 S TEXT(9)="  New Enrollment Group Threshold (EGT) Settings:"
"RTN","DGENEGT1",38,0)
 S TEXT(10)=""
"RTN","DGENEGT1",39,0)
 S TEXT(11)="                 EGT Priority:  "_$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY"))_$S($G(DGEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",40,0)
 S TEXT(12)="                     EGT Type:  "_$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE"))
"RTN","DGENEGT1",41,0)
 S TEXT(13)="           EGT Effective Date:  "_$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("EFFDATE"))
"RTN","DGENEGT1",42,0)
 ;
"RTN","DGENEGT1",43,0)
 ; mailman deliverey
"RTN","DGENEGT1",44,0)
 D ^XMD
"RTN","DGENEGT1",45,0)
 ;
"RTN","DGENEGT1",46,0)
 Q
"RTN","DGENEGT1",47,0)
 ;
"RTN","DGENEGT1",48,0)
 ;
"RTN","DGENEGT1",49,0)
DISPLAY() ;
"RTN","DGENEGT1",50,0)
 ; Description: Display Enrollment Group Threshold (EGT) settings.
"RTN","DGENEGT1",51,0)
 ;
"RTN","DGENEGT1",52,0)
 ;  Input: None
"RTN","DGENEGT1",53,0)
 ;
"RTN","DGENEGT1",54,0)
 ; Output: None
"RTN","DGENEGT1",55,0)
 ;
"RTN","DGENEGT1",56,0)
 N DGEGT
"RTN","DGENEGT1",57,0)
 ;
"RTN","DGENEGT1",58,0)
 W !
"RTN","DGENEGT1",59,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT) W !,"Enrollment Group Threshold (EGT) settings not found."
"RTN","DGENEGT1",60,0)
 E  D
"RTN","DGENEGT1",61,0)
 .W !,?3,"Enrollment Group Threshold (EGT) Settings"
"RTN","DGENEGT1",62,0)
 .W !,?3,"========================================="
"RTN","DGENEGT1",63,0)
 .W !
"RTN","DGENEGT1",64,0)
 .W !?5,"Date Entered",?25,": ",$S('$G(DGEGT("ENTERED")):"-none-",1:$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("ENTERED")))
"RTN","DGENEGT1",65,0)
 .W !?5,"EGT Priority",?25,": ",$S('$G(DGEGT("PRIORITY")):"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY")))_$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")))
"RTN","DGENEGT1",66,0)
 .W !?5,"EGT Type",?25,": ",$S($G(DGEGT("TYPE"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE")))
"RTN","DGENEGT1",67,0)
 .W !?5,"EGT Effective Date",?25,": ",$S('$G(DGEGT("EFFDATE")):"-none-",1:$$EXTERNAL^DILFD(27.16,.05,"F",DGEGT("EFFDATE")))
"RTN","DGENEGT1",68,0)
 ;
"RTN","DGENEGT1",69,0)
 Q
"RTN","DGENEGT1",70,0)
 ;
"RTN","DGENEGT1",71,0)
ABOVE(DPTDFN,ENRPRI,ENRGRP,EGTPRI,EGTGRP,EGTFLG) ;
"RTN","DGENEGT1",72,0)
 ; Description: This function will determine if the enrollment is above
"RTN","DGENEGT1",73,0)
 ; the threshold.
"RTN","DGENEGT1",74,0)
 ;
"RTN","DGENEGT1",75,0)
 ;Input:
"RTN","DGENEGT1",76,0)
 ; DPTDFN - Patient File IEN
"RTN","DGENEGT1",77,0)
 ; ENRPRI - Enrollment Priority
"RTN","DGENEGT1",78,0)
 ; ENRGRP - Enrollment Sub-Group
"RTN","DGENEGT1",79,0)
 ; EGTPRI - EGT Priority (optional) - not used
"RTN","DGENEGT1",80,0)
 ; EGTGRP - EGT Sub-Group (optional) - not used
"RTN","DGENEGT1",81,0)
 ; EGTFLG - Flag to bypass additional EGT type 2 check (optional)
"RTN","DGENEGT1",82,0)
 ;          It is used by $$ABOVE2 to prevent re-entering the
"RTN","DGENEGT1",83,0)
 ;          sub-priority API ($$SUBPRI^DGENELA4)
"RTN","DGENEGT1",84,0)
 ; Output:
"RTN","DGENEGT1",85,0)
 ; Returns 1 if above 0 below. 
"RTN","DGENEGT1",86,0)
 ;
"RTN","DGENEGT1",87,0)
 I $G(ENRGRP)="" S ENRGRP=""
"RTN","DGENEGT1",88,0)
 I $G(ENRPRI)="" S ENRPRI=""
"RTN","DGENEGT1",89,0)
 N ABOVE,EGT,TODAY,X
"RTN","DGENEGT1",90,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) Q 1
"RTN","DGENEGT1",91,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",92,0)
 I TODAY<EGT("EFFDATE") Q 1
"RTN","DGENEGT1",93,0)
 ;
"RTN","DGENEGT1",94,0)
 ;EGT type 2 - Stop New Enrollments
"RTN","DGENEGT1",95,0)
 ; or EGT type 4 - Enrollment Decision (ESP DG*5.3*491)
"RTN","DGENEGT1",96,0)
 I EGT("TYPE")=2!(EGT("TYPE")=4) D  Q ABOVE
"RTN","DGENEGT1",97,0)
 .S ABOVE=0
"RTN","DGENEGT1",98,0)
 .;check previous enrollment record for EGT Override
"RTN","DGENEGT1",99,0)
 .I $$OVRRIDE(.DPTDFN,.EGT) S ABOVE=1 Q
"RTN","DGENEGT1",100,0)
 .;do check for priorities 7 and 8
"RTN","DGENEGT1",101,0)
 .I ENRPRI>6&(ENRPRI=EGT("PRIORITY")) D  Q
"RTN","DGENEGT1",102,0)
 ..I ENRGRP'>EGT("SUBGRP") S ABOVE=1
"RTN","DGENEGT1",103,0)
 ..Q:$G(EGTFLG)
"RTN","DGENEGT1",104,0)
 ..I EGT("TYPE")=4,ENRPRI=EGT("PRIORITY"),ENRGRP'=$$SUBPRI^DGENELA4(DPTDFN,ENRPRI,ENRGRP) S ABOVE=0 Q
"RTN","DGENEGT1",105,0)
 ..I ENRGRP=EGT("SUBGRP"),ENRGRP'=$$SUBPRI^DGENELA4(DPTDFN,ENRPRI,ENRGRP) S ABOVE=0
"RTN","DGENEGT1",106,0)
 .I ENRPRI'>EGT("PRIORITY") S ABOVE=1 Q
"RTN","DGENEGT1",107,0)
 ;
"RTN","DGENEGT1",108,0)
 ;EGT types 1 & 3
"RTN","DGENEGT1",109,0)
 ;do check for priorities 7 and 8
"RTN","DGENEGT1",110,0)
 I ENRPRI>6&(ENRPRI=EGT("PRIORITY")) S ABOVE=0 D  Q ABOVE
"RTN","DGENEGT1",111,0)
 .I ENRGRP'>(EGT("SUBGRP")) S ABOVE=1
"RTN","DGENEGT1",112,0)
 I ENRPRI'>(EGT("PRIORITY")) Q 1
"RTN","DGENEGT1",113,0)
 Q 0
"RTN","DGENEGT1",114,0)
 ;
"RTN","DGENEGT1",115,0)
ABOVE2(DPTDFN,ENRDT,PRIORITY,SUBGRP) ;
"RTN","DGENEGT1",116,0)
 ;
"RTN","DGENEGT1",117,0)
 ; Input: DPTDFN    - Patient File IEN
"RTN","DGENEGT1",118,0)
 ;        ENRDT     - enrollment effective date
"RTN","DGENEGT1",119,0)
 ;        PRIORITY  - enrollment priority
"RTN","DGENEGT1",120,0)
 ;        SUBGRP    - enrollment sub-priority (internal numeric value)
"RTN","DGENEGT1",121,0)
 ;
"RTN","DGENEGT1",122,0)
 ; Output: 1 or 0 for above or below EGT threshold
"RTN","DGENEGT1",123,0)
 ;
"RTN","DGENEGT1",124,0)
 N ABOVE,TODAY,X,EGT
"RTN","DGENEGT1",125,0)
 S ABOVE=1
"RTN","DGENEGT1",126,0)
 S:'$G(SUBGRP) SUBGRP=""
"RTN","DGENEGT1",127,0)
 S:'$G(PRIORITY) PRIORITY=""
"RTN","DGENEGT1",128,0)
 S:'$G(ENRDT) ENRDT=""
"RTN","DGENEGT1",129,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",130,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(ENRDT),.EGT) 1
"RTN","DGENEGT1",131,0)
 Q:'$G(EGT("EFFDATE")) 1
"RTN","DGENEGT1",132,0)
 Q:TODAY<EGT("EFFDATE") 1
"RTN","DGENEGT1",133,0)
 Q:EGT("TYPE")#2 $$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1)  ;If EGT type 1 or 3
"RTN","DGENEGT1",134,0)
 I '$$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1) Q 0
"RTN","DGENEGT1",135,0)
 I PRIORITY=EGT("PRIORITY"),ENRDT,ENRDT'<EGT("EFFDATE") D
"RTN","DGENEGT1",136,0)
 .I $$OVRRIDE(.DPTDFN,.EGT) S ABOVE=1 Q
"RTN","DGENEGT1",137,0)
 .I EGT("TYPE")=4 S ABOVE=0 Q
"RTN","DGENEGT1",138,0)
 .I SUBGRP=EGT("SUBGRP") S ABOVE=0
"RTN","DGENEGT1",139,0)
 Q ABOVE
"RTN","DGENEGT1",140,0)
 ;
"RTN","DGENEGT1",141,0)
OVRRIDE(DPTDFN,EGT) ;check for previous EGT override by HEC and new rules
"RTN","DGENEGT1",142,0)
 N CVDT,ENRCAT,ENRDT,EGTENR,ENRIEN,RTN
"RTN","DGENEGT1",143,0)
 S RTN=0
"RTN","DGENEGT1",144,0)
 S ENRIEN=$$FINDCUR^DGENA(.DPTDFN)
"RTN","DGENEGT1",145,0)
 F  Q:RTN  D
"RTN","DGENEGT1",146,0)
 .I 'ENRIEN S RTN=-1 Q  ;cannot check if no current enrollment
"RTN","DGENEGT1",147,0)
 .I '$$GET^DGENA(ENRIEN,.EGTENR) S RTN=-1 Q  ;need enr info to proceed
"RTN","DGENEGT1",148,0)
 .S ENRIEN=$$FINDPRI^DGENA(ENRIEN)
"RTN","DGENEGT1",149,0)
 .S ENRDT=$G(EGTENR("APP")) S:'ENRDT ENRDT=$G(EGTENR("EFFDATE"))
"RTN","DGENEGT1",150,0)
 .S ENRCAT=$P($G(^DGEN(27.15,+EGTENR("STATUS"),0)),"^",2)
"RTN","DGENEGT1",151,0)
 .I EGTENR("SOURCE")=2,ENRDT'<EGT("EFFDATE"),ENRCAT="E" S RTN=1 Q
"RTN","DGENEGT1",152,0)
 .I $$RULES(DPTDFN,.EGTENR,.EGT,ENRCAT) S RTN=1 Q
"RTN","DGENEGT1",153,0)
 Q RTN>0
"RTN","DGENEGT1",154,0)
 ;
"RTN","DGENEGT1",155,0)
RULES(DPTDFN,EGTENR,EGT,ENRCAT) ;check for new cont enrollment rules
"RTN","DGENEGT1",156,0)
 N CVDT,RTN,ENRIEN,ENRVER,NODE0,NODEE
"RTN","DGENEGT1",157,0)
 S RTN=0
"RTN","DGENEGT1",158,0)
 D  Q:RTN>0 RTN
"RTN","DGENEGT1",159,0)
 .Q:ENRCAT'="E"
"RTN","DGENEGT1",160,0)
 .I (EGTENR("ELIG","POW")="Y")!(EGTENR("ELIG","A&A")="Y")!(EGTENR("ELIG","HB")="Y")!(EGTENR("ELIG","VAPEN")="Y")!EGTENR("ELIG","VACKAMT") Q
"RTN","DGENEGT1",161,0)
 .I EGTENR("ELIG","DISRET")!EGTENR("ELIG","MEDICAID")!EGTENR("ELIG","SCPER")!(EGTENR("ELIG","AO")="Y")!(EGTENR("ELIG","IR")="Y")!(EGTENR("ELIG","EC")="Y") Q
"RTN","DGENEGT1",162,0)
 .I "^3^5^"'[("^"_EGTENR("ELIG","CODE")_"^") Q
"RTN","DGENEGT1",163,0)
 .I EGTENR("ELIG","PH")="Y" Q
"RTN","DGENEGT1",164,0)
 .S RTN=1
"RTN","DGENEGT1",165,0)
 S RTN=0
"RTN","DGENEGT1",166,0)
 D  Q RTN>0
"RTN","DGENEGT1",167,0)
 .S ENRIEN="",ENRVER=$O(^DGEN(27.15,"B","VERIFIED",""))
"RTN","DGENEGT1",168,0)
 .F  S ENRIEN=$O(^DGEN(27.11,"C",DPTDFN,ENRIEN)) Q:'ENRIEN!(RTN'=0)  D
"RTN","DGENEGT1",169,0)
 ..Q:'$D(^DGEN(27.11,ENRIEN))  S NODE0=$G(^DGEN(27.11,ENRIEN,0))
"RTN","DGENEGT1",170,0)
 ..Q:$P(NODE0,"^",4)'=ENRVER  S RTN=-1
"RTN","DGENEGT1",171,0)
 ..S NODEE=$G(^DGEN(27.11,ENRIEN,"E"))
"RTN","DGENEGT1",172,0)
 ..I $P(NODEE,"^",3)!($P(NODEE,"^",5)="Y")!($P(NODEE,"^",6)="Y")!($P(NODEE,"^",7)="Y")!$P(NODEE,"^",10) S RTN=1 Q  ;sc 10-100%,a&a,hb,va pen,medicaid
"RTN","DGENEGT1",173,0)
 ..I ($P(NODEE,"^",11)="Y")!($P(NODEE,"^",13)="Y") S RTN=1 Q  ;AO or EC
"RTN","DGENEGT1",174,0)
 S CVDT=$$GET1^DIQ(2,DPTDFN_",",.5295,"I")
"RTN","DGENEGT1",175,0)
 I CVDT,CVDT'<ENRDT S RTN=1
"RTN","DGENEGT1",176,0)
 Q RTN>0
"RTN","DGENEGT1",177,0)
 ;
"RTN","DGENELA")
0^13^B20987690
"RTN","DGENELA",1,0)
DGENELA ;ALB/CJM,KCL,Zoltan/PJR,RGL,LBD - Patient Eligibility API ; 2/20/04 1:15pm
"RTN","DGENELA",2,0)
 ;;5.3;Registration;**121,147,232,314,451,564**;Aug 13,1993
"RTN","DGENELA",3,0)
 ;
"RTN","DGENELA",4,0)
GET(DFN,DGELG) ;
"RTN","DGENELA",5,0)
 ;Description: Used to obtain the patient eligibility data.
"RTN","DGENELA",6,0)
 ;  The data is placed in the local DGELG array.
"RTN","DGENELA",7,0)
 ;Input:
"RTN","DGENELA",8,0)
 ;  DFN - internal entry number of a record in the PATIENT file
"RTN","DGENELA",9,0)
 ;Output:
"RTN","DGENELA",10,0)
 ;  Function Value - returns 1 on success, 0 on failure
"RTN","DGENELA",11,0)
 ;  DGELG - this is  a local array that will be used to return patient eligibility data. The array subscripts and the fields mapped to are defined below. (pass by reference)
"RTN","DGENELA",12,0)
 ;
"RTN","DGENELA",13,0)
 ;subscript             field name
"RTN","DGENELA",14,0)
 ;"DFN"                ien Patient record
"RTN","DGENELA",15,0)
 ;"ELIG","CODE"        Primary Eligibility Code
"RTN","DGENELA",16,0)
 ;"ELIG","CODE",<ien>  Patient Eligibilities
"RTN","DGENELA",17,0)
 ;"SC"                 Service Connected
"RTN","DGENELA",18,0)
 ;"SCPER"              Service Connected Percentage
"RTN","DGENELA",19,0)
 ;"POW"                POW Status Indicated
"RTN","DGENELA",20,0)
 ;"A&A"                Receiving A&A Benefits
"RTN","DGENELA",21,0)
 ;"HB"                 Receiving Housebound Benefits
"RTN","DGENELA",22,0)
 ;"VAPEN"              Receiving a VA Pension
"RTN","DGENELA",23,0)
 ;"VACKAMT"            Total Annual VA Check Amount
"RTN","DGENELA",24,0)
 ;"DISRET"             Disability Ret. From Military
"RTN","DGENELA",25,0)
 ;"MEDICAID"           Medicaid
"RTN","DGENELA",26,0)
 ;"AO"                 Exposed to Agent Orange
"RTN","DGENELA",27,0)
 ;"IR"                 Radiation Exposure Indicated
"RTN","DGENELA",28,0)
 ;"EC"                 Environmental Contaminants
"RTN","DGENELA",29,0)
 ;"MTSTA"              Means Test Status
"RTN","DGENELA",30,0)
 ;P&T                  P&T
"RTN","DGENELA",31,0)
 ;POS                  PERIOD OF SERVICE
"RTN","DGENELA",32,0)
 ;UNEMPLOY             UNEMPLOYABLE
"RTN","DGENELA",33,0)
 ;SCAWDATE             SC AWARD DATE
"RTN","DGENELA",34,0)
 ;RATEINC              RATED INCOMPETENT
"RTN","DGENELA",35,0)
 ;CLAIMNUM             CLAIM NUMBER
"RTN","DGENELA",36,0)
 ;** removed ***     CLAIMLOC             *CLAIM FOLDER LOCATION
"RTN","DGENELA",37,0)
 ;VADISAB              RECEIVING VA DISABILITY?
"RTN","DGENELA",38,0)
 ;ELIGSTA              ELIGIBILITY STATUS
"RTN","DGENELA",39,0)
 ;ELIGSTADATE          ELIGIBILITY STATUS DATE
"RTN","DGENELA",40,0)
 ;ELIGVERIF            ELIGIBILITY VERIF. METHOD
"RTN","DGENELA",41,0)
 ;ELIGVSITE            ELIGIBILITY VERIFICATION SITE
"RTN","DGENELA",42,0)
 ;ELIGENTBY            ELIGIBILITY STATUS ENTERED BY
"RTN","DGENELA",43,0)
 ;RATEDIS
"RTN","DGENELA",44,0)
 ;  <COUNT>,"RD"      RATED DISABILITY
"RTN","DGENELA",45,0)
 ;  <COUNT>,"PER"      DISABILITY %
"RTN","DGENELA",46,0)
 ;  <COUNT>,"RDSC"     SERVICE CONNECTED
"RTN","DGENELA",47,0)
 ;"VCD"               Veteran Catastrophically Disabled? (#.39)
"RTN","DGENELA",48,0)
 ;"PH"                PURPLE HEART INDICATED
"RTN","DGENELA",49,0)
 ;"AOEXPLOC"          AGENT ORANGE EXPOSURE LOCATION
"RTN","DGENELA",50,0)
 ;"CVELEDT"           COMBAT VETERAN END DATE
"RTN","DGENELA",51,0)
 ;
"RTN","DGENELA",52,0)
 K DGELG
"RTN","DGENELA",53,0)
 S DGELG=""
"RTN","DGENELA",54,0)
 Q:'$D(^DPT(DFN)) 0
"RTN","DGENELA",55,0)
 N NODE,SUBREC,COUNT,CODE,IEN
"RTN","DGENELA",56,0)
 ;
"RTN","DGENELA",57,0)
 S DGELG("DFN")=DFN
"RTN","DGENELA",58,0)
 S DGELG("VCD")=$$VCD^DGENA5(DFN)
"RTN","DGENELA",59,0)
 ;
"RTN","DGENELA",60,0)
 ;
"RTN","DGENELA",61,0)
 S NODE=$G(^DPT(DFN,.29))
"RTN","DGENELA",62,0)
 S DGELG("RATEINC")=$P(NODE,"^",12)
"RTN","DGENELA",63,0)
 ;
"RTN","DGENELA",64,0)
 S NODE=$G(^DPT(DFN,.3))
"RTN","DGENELA",65,0)
 S DGELG("SC")=$P(NODE,"^")
"RTN","DGENELA",66,0)
 S DGELG("SCPER")=$P(NODE,"^",2)
"RTN","DGENELA",67,0)
 S DGELG("P&T")=$P(NODE,"^",4)
"RTN","DGENELA",68,0)
 S DGELG("UNEMPLOY")=$P(NODE,"^",5)
"RTN","DGENELA",69,0)
 S DGELG("SCAWDATE")=$P(NODE,"^",12)
"RTN","DGENELA",70,0)
 S DGELG("VADISAB")=$P(NODE,"^",11)
"RTN","DGENELA",71,0)
 ;
"RTN","DGENELA",72,0)
 S NODE=$G(^DPT(DFN,.31))
"RTN","DGENELA",73,0)
 S DGELG("CLAIMNUM")=$P(NODE,"^",3)
"RTN","DGENELA",74,0)
 ;S DGELG("CLAIMLOC")=$P(NODE,"^",2) ;removed
"RTN","DGENELA",75,0)
 ;
"RTN","DGENELA",76,0)
 S NODE=$G(^DPT(DFN,.32))
"RTN","DGENELA",77,0)
 S DGELG("POS")=$P(NODE,"^",3)
"RTN","DGENELA",78,0)
 ;
"RTN","DGENELA",79,0)
 S NODE=$G(^DPT(DFN,.36))
"RTN","DGENELA",80,0)
 S DGELG("ELIG","CODE")=$P(NODE,"^") ;primary eligibility
"RTN","DGENELA",81,0)
 S DGELG("DISRET")=$P(NODE,"^",2)
"RTN","DGENELA",82,0)
 ;
"RTN","DGENELA",83,0)
 S NODE=$G(^DPT(DFN,.38))
"RTN","DGENELA",84,0)
 S DGELG("MEDICAID")=$P(NODE,"^")
"RTN","DGENELA",85,0)
 ;
"RTN","DGENELA",86,0)
 S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",87,0)
 S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",88,0)
 S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",89,0)
 S DGELG("ELIGVERIF")=$P(NODE,"^",5)
"RTN","DGENELA",90,0)
 S DGELG("ELIGENTBY")=$P(NODE,"^",6)
"RTN","DGENELA",91,0)
 ;
"RTN","DGENELA",92,0)
 S NODE=$G(^DPT(DFN,.362))
"RTN","DGENELA",93,0)
 S DGELG("VACKAMT")=$P(NODE,"^",20)
"RTN","DGENELA",94,0)
 S DGELG("VAPEN")=$P(NODE,"^",14)
"RTN","DGENELA",95,0)
 S DGELG("A&A")=$P(NODE,"^",12)
"RTN","DGENELA",96,0)
 S DGELG("HB")=$P(NODE,"^",13)
"RTN","DGENELA",97,0)
 ;
"RTN","DGENELA",98,0)
 ;
"RTN","DGENELA",99,0)
 S NODE=$G(^DPT(DFN,.321))
"RTN","DGENELA",100,0)
 S DGELG("AO")=$P(NODE,"^",2)
"RTN","DGENELA",101,0)
 S DGELG("IR")=$P(NODE,"^",3)
"RTN","DGENELA",102,0)
 S DGELG("AOEXPLOC")=$P(NODE,"^",13)
"RTN","DGENELA",103,0)
 ;
"RTN","DGENELA",104,0)
 S NODE=$G(^DPT(DFN,.322))
"RTN","DGENELA",105,0)
 S DGELG("EC")=$P(NODE,"^",13)
"RTN","DGENELA",106,0)
 ;
"RTN","DGENELA",107,0)
 S NODE=$G(^DPT(DFN,.52))
"RTN","DGENELA",108,0)
 S DGELG("POW")=$P(NODE,"^",5)
"RTN","DGENELA",109,0)
 S DGELG("CVELEDT")=$P(NODE,"^",15)
"RTN","DGENELA",110,0)
 ;
"RTN","DGENELA",111,0)
 ; Purple Heart Indicator
"RTN","DGENELA",112,0)
 S NODE=$G(^DPT(DFN,.53))
"RTN","DGENELA",113,0)
 S DGELG("PH")=$P(NODE,"^")
"RTN","DGENELA",114,0)
 ;
"RTN","DGENELA",115,0)
 ;means test category
"RTN","DGENELA",116,0)
 S DGELG("MTSTA")=""
"RTN","DGENELA",117,0)
 S IEN=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA",118,0)
 I IEN S DGELG("MTSTA")=$P($G(^DGMT(408.31,IEN,0)),"^",3)
"RTN","DGENELA",119,0)
 ;
"RTN","DGENELA",120,0)
 ;get the other eligibilities multiple
"RTN","DGENELA",121,0)
 S SUBREC=0
"RTN","DGENELA",122,0)
 F  S SUBREC=$O(^DPT(DFN,"E",SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",123,0)
 .S CODE=+$G(^DPT(DFN,"E",SUBREC,0))
"RTN","DGENELA",124,0)
 .;
"RTN","DGENELA",125,0)
 .;need to check the "B" x-ref, because when a code is deleted from the multiple, the kill logic is executed BEFORE the data is actually removed - but the "B" x-ref has been deleted at this point
"RTN","DGENELA",126,0)
 .I CODE,$D(^DPT(DFN,"E","B",CODE)) S DGELG("ELIG","CODE",CODE)=SUBREC
"RTN","DGENELA",127,0)
 ;
"RTN","DGENELA",128,0)
 ;rated disability multiple
"RTN","DGENELA",129,0)
 S SUBREC=0,COUNT=0
"RTN","DGENELA",130,0)
 F  S SUBREC=$O(^DPT(DFN,.372,SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",131,0)
 .S NODE=$G(^DPT(DFN,.372,SUBREC,0))
"RTN","DGENELA",132,0)
 .Q:'$P(NODE,"^")
"RTN","DGENELA",133,0)
 .S COUNT=COUNT+1
"RTN","DGENELA",134,0)
 .S DGELG("RATEDIS",COUNT,"RD")=$P(NODE,"^")
"RTN","DGENELA",135,0)
 .S DGELG("RATEDIS",COUNT,"PER")=$P(NODE,"^",2)
"RTN","DGENELA",136,0)
 .S DGELG("RATEDIS",COUNT,"RDSC")=$P(NODE,"^",3)
"RTN","DGENELA",137,0)
 ;
"RTN","DGENELA",138,0)
 Q 1
"RTN","DGENELA",139,0)
 ;
"RTN","DGENELA",140,0)
NATNAME(CODE) ;
"RTN","DGENELA",141,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",142,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file,
"RTN","DGENELA",143,0)
 ;  and returns the name
"RTN","DGENELA",144,0)
 ;Input:
"RTN","DGENELA",145,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",146,0)
 ;Output:
"RTN","DGENELA",147,0)
 ;  Function Value - name of corresponding code in file #8.1
"RTN","DGENELA",148,0)
 ;
"RTN","DGENELA",149,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",150,0)
 Q $$CODENAME($P($G(^DIC(8,CODE,0)),"^",9))
"RTN","DGENELA",151,0)
 ;
"RTN","DGENELA",152,0)
NATCODE(CODE) ;
"RTN","DGENELA",153,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",154,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file
"RTN","DGENELA",155,0)
 ;Input:
"RTN","DGENELA",156,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",157,0)
 ;Output:
"RTN","DGENELA",158,0)
 ;  Function Value - pointer to file #8.1
"RTN","DGENELA",159,0)
 ;
"RTN","DGENELA",160,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",161,0)
 Q $P($G(^DIC(8,CODE,0)),"^",9)
"RTN","DGENELA",162,0)
 ;
"RTN","DGENELA",163,0)
CODENAME(CODE) ;
"RTN","DGENELA",164,0)
 ;Description: Given a pointer to file #8.1, MAS Eligibility Code file,
"RTN","DGENELA",165,0)
 ;  it returns the name of the code 
"RTN","DGENELA",166,0)
 ;Input:
"RTN","DGENELA",167,0)
 ;  CODE - pointer to file #8.1
"RTN","DGENELA",168,0)
 ;Output:
"RTN","DGENELA",169,0)
 ;  Function Value - name of the code pointed to
"RTN","DGENELA",170,0)
 ;
"RTN","DGENELA",171,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",172,0)
 Q $P($G(^DIC(8.1,CODE,0)),"^")
"RTN","DGENELA",173,0)
 ;
"RTN","DGENELA",174,0)
ELIGSTAT(DFN,DGELG) ;
"RTN","DGENELA",175,0)
 ;Description: Used to get the ELIGIBILITY STATUS and the 
"RTN","DGENELA",176,0)
 ;ELIGIBILITY STATUS DATE of the patient.
"RTN","DGENELA",177,0)
 ;
"RTN","DGENELA",178,0)
 ;Input:
"RTN","DGENELA",179,0)
 ;  DFN - ien of patient record
"RTN","DGENELA",180,0)
 ;
"RTN","DGENELA",181,0)
 ;Ouput:
"RTN","DGENELA",182,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","DGENELA",183,0)
 ;  DGELG array (pass by reference)
"RTN","DGENELA",184,0)
 ;    "ELIGSTA" - ELIGIBILITY STATUS
"RTN","DGENELA",185,0)
 ;    "ELIGSTADATE" - ELIGIBILITY STATUS DATE
"RTN","DGENELA",186,0)
 ;
"RTN","DGENELA",187,0)
 N NODE,SUCCESS
"RTN","DGENELA",188,0)
 D
"RTN","DGENELA",189,0)
 .S SUCCESS=1
"RTN","DGENELA",190,0)
 .I '$G(DFN) S SUCCESS=0 Q
"RTN","DGENELA",191,0)
 .S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",192,0)
 .S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",193,0)
 .S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",194,0)
 Q SUCCESS
"RTN","DGENELA1")
0^14^B73404914
"RTN","DGENELA1",1,0)
DGENELA1 ;ALB/CJM,RTK,TDM,PJR,RGL,LBD - Patient Eligibility API ; 2/20/04 1:18pm
"RTN","DGENELA1",2,0)
 ;;5.3;Registration;**147,327,314,367,497,451,564**;Aug 13,1993
"RTN","DGENELA1",3,0)
 ;
"RTN","DGENELA1",4,0)
CHECK(DGELG,DGPAT,DGCDIS,ERRMSG) ;
"RTN","DGENELA1",5,0)
 ;Does validation checks on the eligibility contained in the DGELG array.
"RTN","DGENELA1",6,0)
 ;
"RTN","DGENELA1",7,0)
 ;Input:
"RTN","DGENELA1",8,0)
 ;  DGELG - array containing eligibility data (pass by reference)
"RTN","DGENELA1",9,0)
 ;  DGPAT - array containing patient data (pass by reference)
"RTN","DGENELA1",10,0)
 ;  DGCDIS - array containing catastrophic disability determination (pass by reference)
"RTN","DGENELA1",11,0)
 ;
"RTN","DGENELA1",12,0)
 ;Output:
"RTN","DGENELA1",13,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENELA1",14,0)
 ;  ERRMSG - returns a message if validations fail (pass by reference)
"RTN","DGENELA1",15,0)
 ;
"RTN","DGENELA1",16,0)
 N SUCCESS,NATCODE,BAD,SUB,CODE,DGONV,DGTEXT,INELDATE
"RTN","DGENELA1",17,0)
 S SUCCESS=0
"RTN","DGENELA1",18,0)
 S ERRMSG=""
"RTN","DGENELA1",19,0)
 ;
"RTN","DGENELA1",20,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",21,0)
 .;
"RTN","DGENELA1",22,0)
 .;get optional arrays if not there
"RTN","DGENELA1",23,0)
 .I '$D(DGPAT),'$$GET^DGENPTA(DGELG("DFN"),.DGPAT) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",24,0)
 .I '$D(DGCDIS),'$$GET^DGENCDA(DGELG("DFN"),.DGCDIS) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",25,0)
 .;
"RTN","DGENELA1",26,0)
 .;do field level checks
"RTN","DGENELA1",27,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I SUB'="ELIG",SUB'="RATEDIS",'$$CHKFIELD(SUB,DGELG(SUB)) S ERRMSG="BAD VALUE, FIELD = "_$$GET1^DID(2,$$FIELD(SUB),"","LABEL") Q
"RTN","DGENELA1",28,0)
 .;
"RTN","DGENELA1",29,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",30,0)
 .;
"RTN","DGENELA1",31,0)
 .;also check SC % field of Rated Disabilities
"RTN","DGENELA1",32,0)
 .S SUB="" F  S SUB=$O(DGELG("RATEDIS",SUB)) Q:(SUB="")  I '$$CHKFIELD("PER",DGELG("RATEDIS",SUB,"PER")) S ERRMSG="BAD VALUE, FIELD = DISABILITY % OF THE RATED DISABILITIES MULTIPLE" Q
"RTN","DGENELA1",33,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",34,0)
 .;
"RTN","DGENELA1",35,0)
 .I DGELG("SC")="Y",DGELG("SCPER")="" S ERRMSG="SC% UNSPECIFIED FOR SC VET" Q
"RTN","DGENELA1",36,0)
 .;
"RTN","DGENELA1",37,0)
 .;!! put this check back when POS is added to the Z11 message
"RTN","DGENELA1",38,0)
 .;I DGPAT("VETERAN")="Y",'DGELG("POS") S ERRMSG="POS UNSPECIFIED" Q 
"RTN","DGENELA1",39,0)
 .;
"RTN","DGENELA1",40,0)
 .I 'DGELG("ELIG","CODE") S ERRMSG="PRIMARY ELIGIBILITY IS UNSPECIFIED" Q
"RTN","DGENELA1",41,0)
 .;
"RTN","DGENELA1",42,0)
 .I (DGELG("VACKAMT")>0),(DGELG("A&A")_DGELG("HB")_DGELG("VAPEN")_DGELG("VADISAB")'["Y") S ERRMSG="VA CHECK AMOUNT > 0 BUT INCOME INDICATORS ALL SHOW 'NO'" Q
"RTN","DGENELA1",43,0)
 .;
"RTN","DGENELA1",44,0)
 .;
"RTN","DGENELA1",45,0)
 .;
"RTN","DGENELA1",46,0)
 .I (DGELG("SC")="N"),(DGELG("VADISAB")="Y") S ERRMSG="NSC VETERANS CAN NOT BE RECEIVING VA DISABILITY BENEFITS" Q
"RTN","DGENELA1",47,0)
 .;
"RTN","DGENELA1",48,0)
 .S BAD=1 D  Q:BAD  ;check primary eligibility
"RTN","DGENELA1",49,0)
 ..S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA1",50,0)
 ..Q:'NATCODE
"RTN","DGENELA1",51,0)
 ..;
"RTN","DGENELA1",52,0)
 ..I NATCODE=21 S ERRMSG="CATASTROPHICALLY DISABLED NOT ALLOWED AS PRIMARY ELIGIBILITY" Q
"RTN","DGENELA1",53,0)
 ..;
"RTN","DGENELA1",54,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")<50),(NATCODE'=3) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",55,0)
 ..;
"RTN","DGENELA1",56,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")>49),(NATCODE'=1) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",57,0)
 ..;
"RTN","DGENELA1",58,0)
 ..S DGONV=$O(^DIC(21,"B","OTHER NON-VETERANS","")),INELDATE=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENELA1",59,0)
 ..I INELDATE'="",DGPAT("INELDATE")'>0,DGELG("POS"),DGELG("POS")=DGONV,'$D(^DIC(21,DGELG("POS"),"E",DGELG("ELIG","CODE"))) D
"RTN","DGENELA1",60,0)
 ...S DGTEXT="Patient was previously determined to be ineligible for VA health care.  Upon review, the individual is now determined to be eligible for "
"RTN","DGENELA1",61,0)
 ...S DGTEXT=DGTEXT_"VA care.  Please update period of service and complete a new application for enrollment in VistA."
"RTN","DGENELA1",62,0)
 ...D ADDMSG^DGENUPL3(.MSGS,DGTEXT,0)
"RTN","DGENELA1",63,0)
 ..;
"RTN","DGENELA1",64,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(NATCODE=1)!(NATCODE=3) S BAD=0 Q  ;primary eligibility OK
"RTN","DGENELA1",65,0)
 ..;
"RTN","DGENELA1",66,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE'=18 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PRISONER OF WAR" Q
"RTN","DGENELA1",67,0)
 ..;
"RTN","DGENELA1",68,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE=18 S BAD=0 Q
"RTN","DGENELA1",69,0)
 ..;
"RTN","DGENELA1",70,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE'=22 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PURPLE HEART RECIPIENT" Q
"RTN","DGENELA1",71,0)
 ..;
"RTN","DGENELA1",72,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE=22 S BAD=0 Q
"RTN","DGENELA1",73,0)
 ..;
"RTN","DGENELA1",74,0)
 ..; disabled DG*5.3*367, for Inel
"RTN","DGENELA1",75,0)
 ..;I (DGPAT("VETERAN")'=$P($G(^DIC(8.1,NATCODE,0)),"^",5)) S ERRMSG="PRIMARY ELIGIBILTY NOT CONSISTENT WITH VETERAN STATUS" Q
"RTN","DGENELA1",76,0)
 ..;
"RTN","DGENELA1",77,0)
 ..I DGELG("A&A")'="Y",NATCODE=2 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH A&A INDICATOR" Q
"RTN","DGENELA1",78,0)
 ..;
"RTN","DGENELA1",79,0)
 ..I DGELG("HB")'="Y",NATCODE=15 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH HOUSEBOUND INDICATOR" Q
"RTN","DGENELA1",80,0)
 ..;
"RTN","DGENELA1",81,0)
 ..I DGELG("VAPEN")'="Y",NATCODE=4 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH VA PENSION INDICATOR" Q
"RTN","DGENELA1",82,0)
 ..;
"RTN","DGENELA1",83,0)
 ..I DGELG("SC")="Y",((NATCODE=4)!(NATCODE=5)) S ERRMSG="NSC ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTION INDICATOR" Q
"RTN","DGENELA1",84,0)
 ..;
"RTN","DGENELA1",85,0)
 ..I (DGPAT("DOB")>2061231),(NATCODE=16) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF MEXICAN BORDER WAR" Q
"RTN","DGENELA1",86,0)
 ..;
"RTN","DGENELA1",87,0)
 ..I (DGPAT("DOB")>2071231),(NATCODE=17) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF WORLD WAR I" Q
"RTN","DGENELA1",88,0)
 ..;
"RTN","DGENELA1",89,0)
 ..;primary eligibility is good
"RTN","DGENELA1",90,0)
 ..S BAD=0
"RTN","DGENELA1",91,0)
 .;
"RTN","DGENELA1",92,0)
 .S SUCCESS=1
"RTN","DGENELA1",93,0)
 .;check eligibilities multiple
"RTN","DGENELA1",94,0)
 .S CODE=0 F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:'CODE  D  Q:('SUCCESS)
"RTN","DGENELA1",95,0)
 ..S NATCODE=$$NATCODE^DGENELA(CODE)
"RTN","DGENELA1",96,0)
 ..Q:'NATCODE
"RTN","DGENELA1",97,0)
 ..I NATCODE=21,'DGCDIS("DATE") S SUCCESS=0,ERRMSG="CATASTROPHICALLY DISABLED ELIGIBILITY REQUIRES CATASTROPHICALLY DISABLED DETERMINATION DATE" Q
"RTN","DGENELA1",98,0)
 .;
"RTN","DGENELA1",99,0)
 Q SUCCESS
"RTN","DGENELA1",100,0)
 ;
"RTN","DGENELA1",101,0)
STORE(DGELG,DGPAT,DGCDIS,ERROR,SKIPCHK) ;
"RTN","DGENELA1",102,0)
 ;Stores an eligibility record for a patient. The patient record must
"RTN","DGENELA1",103,0)
 ;already exist. A lock on the Patient record is required, and is
"RTN","DGENELA1",104,0)
 ;released upon completion.
"RTN","DGENELA1",105,0)
 ;
"RTN","DGENELA1",106,0)
 ;Input:
"RTN","DGENELA1",107,0)
 ;  DGELG - eligibility array (pass by reference)
"RTN","DGENELA1",108,0)
 ;  DGPAT - patient array (optional, pass by reference)
"RTN","DGENELA1",109,0)
 ;  DGCDIS - array containing the catastrophic disability determination (optional, pass by reference)
"RTN","DGENELA1",110,0)
 ;  SKIPCHK - flag, set to 1 means that the consistency checks
"RTN","DGENELA1",111,0)
 ;            were already done & should be skipped
"RTN","DGENELA1",112,0)
 ;
"RTN","DGENELA1",113,0)
 ;Output:
"RTN","DGENELA1",114,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENELA1",115,0)
 ;  ERROR - in event of failure returns an error message (pass by reference, optional)
"RTN","DGENELA1",116,0)
 ;
"RTN","DGENELA1",117,0)
 N SUCCESS,DATA,FIELD,DA,DFN,COUNT
"RTN","DGENELA1",118,0)
 S DFN=$G(DGELG("DFN"))
"RTN","DGENELA1",119,0)
 S SUCCESS=0
"RTN","DGENELA1",120,0)
 S ERROR=""
"RTN","DGENELA1",121,0)
 ;
"RTN","DGENELA1",122,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",123,0)
 .I '$$LOCK^DGENPTA1(DFN) S ERROR="UNABLE TO LOCK PATIENT RECORD" Q
"RTN","DGENELA1",124,0)
 .I $G(SKIPCHK)'=1,'$$CHECK(.DGELG,.DGPAT,.DGCDIS,.ERROR) Q
"RTN","DGENELA1",125,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:SUB=""  D
"RTN","DGENELA1",126,0)
 ..I SUB'="ELIG",SUB'="RATEDIS",SUB'="DFN" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=DGELG(SUB)
"RTN","DGENELA1",127,0)
 .;
"RTN","DGENELA1",128,0)
 .;don't add the Primary Eligibility unless different, so as to not
"RTN","DGENELA1",129,0)
 .;fire off x-refs unless necessary
"RTN","DGENELA1",130,0)
 .I $P($G(^DPT(DFN,.36)),"^")'=DGELG("ELIG","CODE") S DATA(.361)=DGELG("ELIG","CODE")
"RTN","DGENELA1",131,0)
 .;
"RTN","DGENELA1",132,0)
 .; Only update User Enrollee fields if the incoming UE status is
"RTN","DGENELA1",133,0)
 .; greater than the USER ENROLLEE VALID THROUGH on file.
"RTN","DGENELA1",134,0)
 .I $G(DATA(.3617))<$P($G(^DPT(DFN,.361)),"^",7) K DATA(.3617),DATA(.3618)
"RTN","DGENELA1",135,0)
 .;
"RTN","DGENELA1",136,0)
 .I '$$UPD^DGENDBS(2,DFN,.DATA) S ERROR="FILEMAN FAILED TO UPDATE THE PATIENT RECORD" Q
"RTN","DGENELA1",137,0)
 .;
"RTN","DGENELA1",138,0)
 .;
"RTN","DGENELA1",139,0)
 .;delete eligibilities that do not belong
"RTN","DGENELA1",140,0)
 .D DELELIG^DGENELA2(DFN,.DGELG)
"RTN","DGENELA1",141,0)
 .;
"RTN","DGENELA1",142,0)
 .;overlay Rated Disabilities
"RTN","DGENELA1",143,0)
 .Q:'$$OVERLAY()
"RTN","DGENELA1",144,0)
 .;
"RTN","DGENELA1",145,0)
 .;Add the new Patient Eligibilities
"RTN","DGENELA1",146,0)
 .;Don't add the an eligibility unless different - so as to not
"RTN","DGENELA1",147,0)
 .;fire off the x-refs unless necessary.
"RTN","DGENELA1",148,0)
 .;Also, try to assign ien = the code (see input tranform of the field).
"RTN","DGENELA1",149,0)
 .K DA,DATA
"RTN","DGENELA1",150,0)
 .S DA(1)=DFN
"RTN","DGENELA1",151,0)
 .S DATA(.01)=0
"RTN","DGENELA1",152,0)
 .F  S DATA(.01)=$O(DGELG("ELIG","CODE",DATA(.01))) Q:'DATA(.01)  I '$D(^DPT(DFN,"E","B",DATA(.01))) I '$$ADD^DGENDBS(2.0361,.DA,.DATA,,$S($D(^DPT(DFN,"E",DATA(.01))):0,1:DATA(.01))) S ERROR="FILEMAN FAILED TO ADD PATIENT ELIGIBILITY" Q
"RTN","DGENELA1",153,0)
 .;
"RTN","DGENELA1",154,0)
 .S SUCCESS=1
"RTN","DGENELA1",155,0)
 ;
"RTN","DGENELA1",156,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGENELA1",157,0)
 Q SUCCESS
"RTN","DGENELA1",158,0)
 ;
"RTN","DGENELA1",159,0)
FIELD(SUB) ;
"RTN","DGENELA1",160,0)
 ;given a subscript from the ELIGIBILITY array, returns the field number
"RTN","DGENELA1",161,0)
 ;
"RTN","DGENELA1",162,0)
 Q:SUB="CODE" .361
"RTN","DGENELA1",163,0)
 Q:SUB="SC" .301
"RTN","DGENELA1",164,0)
 Q:SUB="SCPER" .302
"RTN","DGENELA1",165,0)
 Q:SUB="POW" .525
"RTN","DGENELA1",166,0)
 Q:SUB="PH" .531
"RTN","DGENELA1",167,0)
 Q:SUB="A&A" .36205
"RTN","DGENELA1",168,0)
 Q:SUB="HB" .36215
"RTN","DGENELA1",169,0)
 Q:SUB="VAPEN" .36235
"RTN","DGENELA1",170,0)
 Q:SUB="VACKAMT" .36295
"RTN","DGENELA1",171,0)
 Q:SUB="DISRET" .362
"RTN","DGENELA1",172,0)
 Q:SUB="MEDICAID" .381
"RTN","DGENELA1",173,0)
 Q:SUB="AO" .32102
"RTN","DGENELA1",174,0)
 Q:SUB="IR" .32103
"RTN","DGENELA1",175,0)
 Q:SUB="EC" .322013
"RTN","DGENELA1",176,0)
 Q:SUB="MTSTA" ""  ;don't map Means Test Category
"RTN","DGENELA1",177,0)
 Q:SUB="P&T" .304
"RTN","DGENELA1",178,0)
 Q:SUB="POS" .323
"RTN","DGENELA1",179,0)
 Q:SUB="UNEMPLOY" .305
"RTN","DGENELA1",180,0)
 Q:SUB="SCAWDATE" .3012
"RTN","DGENELA1",181,0)
 Q:SUB="RATEINC" .293
"RTN","DGENELA1",182,0)
 Q:SUB="CLAIMNUM" .313
"RTN","DGENELA1",183,0)
 ;Q:SUB="CLAIMLOC" .312 ; ** removed **
"RTN","DGENELA1",184,0)
 Q:SUB="VADISAB" .3025
"RTN","DGENELA1",185,0)
 Q:SUB="ELIGSTA" .3611
"RTN","DGENELA1",186,0)
 Q:SUB="ELIGSTADATE" .3612
"RTN","DGENELA1",187,0)
 Q:SUB="ELIGVERIF" .3615
"RTN","DGENELA1",188,0)
 Q:SUB="ELIGENTBY" .3616
"RTN","DGENELA1",189,0)
 Q:SUB="RD" .01
"RTN","DGENELA1",190,0)
 Q:SUB="PER" 2
"RTN","DGENELA1",191,0)
 Q:SUB="RDSC" 3
"RTN","DGENELA1",192,0)
 Q:SUB="UEYEAR" .3617
"RTN","DGENELA1",193,0)
 Q:SUB="UESITE" .3618
"RTN","DGENELA1",194,0)
 Q:SUB="AOEXPLOC" .3213
"RTN","DGENELA1",195,0)
 Q:SUB="CVELEDT" .5295
"RTN","DGENELA1",196,0)
 ;
"RTN","DGENELA1",197,0)
 Q ""
"RTN","DGENELA1",198,0)
 ;
"RTN","DGENELA1",199,0)
CHKFIELD(SUB,VAL) ;
"RTN","DGENELA1",200,0)
 ;Description: Does field level validation of the value. Returns 1
"RTN","DGENELA1",201,0)
 ;if the value is good, 0 otherwise.
"RTN","DGENELA1",202,0)
 ;
"RTN","DGENELA1",203,0)
 Q:($G(VAL)="") 1  ;for now, all NULL values assumed okay
"RTN","DGENELA1",204,0)
 ;
"RTN","DGENELA1",205,0)
 N BAD S BAD=0
"RTN","DGENELA1",206,0)
 I (SUB="SCPER")!(SUB="PER"),(+VAL'=VAL)!(VAL>100)!(VAL<0)!(VAL?.E1"."1N.N) S BAD=1
"RTN","DGENELA1",207,0)
 I SUB="VACKAMT",+VAL'=VAL&(VAL'?.N1"."2N)!(VAL>99999)!(VAL<0) S BAD=1
"RTN","DGENELA1",208,0)
 I SUB="DISRET",VAL'=0,VAL'=1,VAL'=2,VAL'=3 S BAD=1
"RTN","DGENELA1",209,0)
 I SUB="MEDICAID",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",210,0)
 I SUB="RATEINC",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",211,0)
 I SUB="CLAIMLOC",(VAL["""")!($A(VAL)=45)!($L(VAL)>40)!($L(VAL)<2) S BAD=1
"RTN","DGENELA1",212,0)
 I SUB="ELIGSTA",VAL'="P",VAL'="R",VAL'="V" S BAD=1
"RTN","DGENELA1",213,0)
 I SUB="POW",VAL'="Y",VAL'="N",VAL'="U" S BAD=1
"RTN","DGENELA1",214,0)
 Q 'BAD
"RTN","DGENELA1",215,0)
 ;
"RTN","DGENELA1",216,0)
 ;
"RTN","DGENELA1",217,0)
OVERLAY() ;
"RTN","DGENELA1",218,0)
 ;Description: Overlay the local Rated Disabilities with whatever HEC
"RTN","DGENELA1",219,0)
 ;sent.
"RTN","DGENELA1",220,0)
 ;
"RTN","DGENELA1",221,0)
 N SUCCESS S SUCCESS=1
"RTN","DGENELA1",222,0)
 ;
"RTN","DGENELA1",223,0)
 ;delete the rated disabilties multiple
"RTN","DGENELA1",224,0)
 D DELRDIS^DGENELA2(DFN)
"RTN","DGENELA1",225,0)
 ;
"RTN","DGENELA1",226,0)
 ;add the rated disabilities
"RTN","DGENELA1",227,0)
 K DATA,DA
"RTN","DGENELA1",228,0)
 S DA(1)=DFN
"RTN","DGENELA1",229,0)
 S COUNT=0
"RTN","DGENELA1",230,0)
 F  S COUNT=$O(DGELG("RATEDIS",COUNT)) Q:'COUNT  D
"RTN","DGENELA1",231,0)
 .S DATA(.01)=DGELG("RATEDIS",COUNT,"RD")
"RTN","DGENELA1",232,0)
 .I DATA(.01) S DATA(2)=DGELG("RATEDIS",COUNT,"PER"),DATA(3)=DGELG("RATEDIS",COUNT,"RDSC") I '$$ADD^DGENDBS(2.04,.DA,.DATA) S ERROR="FILEMAN FAILED TO ADD RATED DISABILTIES",SUCCESS=0
"RTN","DGENELA1",233,0)
 Q SUCCESS
"RTN","DGENELA4")
0^15^B42750638
"RTN","DGENELA4",1,0)
DGENELA4 ;ALB/CJM,KCL,RTK,LBD - Patient Eligibility API ; 2/1/02 10:09am
"RTN","DGENELA4",2,0)
 ;;5.3;Registration;**232,275,306,327,314,367,417,437,456,491,451,564**;Aug 13,1993
"RTN","DGENELA4",3,0)
 ;
"RTN","DGENELA4",4,0)
 ;
"RTN","DGENELA4",5,0)
PRIORITY(DFN,DGELG,DGELGSUB,ENRDATE,APPDATE) ;
"RTN","DGENELA4",6,0)
 ; Description: Used to compute the priority group and subgroup for a
"RTN","DGENELA4",7,0)
 ; patient, also returning the subset of the eligibility data on which 
"RTN","DGENELA4",8,0)
 ; the priority subgroup is based.
"RTN","DGENELA4",9,0)
 ;
"RTN","DGENELA4",10,0)
 ;Input:
"RTN","DGENELA4",11,0)
 ;      DFN - ien of patient
"RTN","DGENELA4",12,0)
 ;    DGELG - ELIGIBILITY object array (optional, pass by reference)
"RTN","DGENELA4",13,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",14,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",15,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",16,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",17,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",18,0)
 ;
"RTN","DGENELA4",19,0)
 ;Output:
"RTN","DGENELA4",20,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",21,0)
 ;    function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",22,0)
 ;  DGELGSUB - this local array will contain the eligibility data on
"RTN","DGENELA4",23,0)
 ;    which the priority determination was based, pass by reference
"RTN","DGENELA4",24,0)
 ;    if needed.
"RTN","DGENELA4",25,0)
 ;
"RTN","DGENELA4",26,0)
 N CODE,HICODE,PRI,HIPRI,PRIORITY,SUBGRP,HISUB,SUB,DGPAT
"RTN","DGENELA4",27,0)
 K DGELGSUB S DGELGSUB=""
"RTN","DGENELA4",28,0)
 S (HICODE,HIPRI,SUBGRP,HISUB)=""
"RTN","DGENELA4",29,0)
 D
"RTN","DGENELA4",30,0)
 .I '$D(DGELG),'$$GET^DGENELA(DFN,.DGELG) Q  ;can not proceed with eligibility
"RTN","DGENELA4",31,0)
 .; can't proceed without an Enrollment Date or Application Date
"RTN","DGENELA4",32,0)
 .I '$G(ENRDATE),'$G(APPDATE) Q
"RTN","DGENELA4",33,0)
 .I $$GET^DGENPTA(DFN,.DGPAT)
"RTN","DGENELA4",34,0)
 .; determine priority/subgroup based on primary eligibility
"RTN","DGENELA4",35,0)
 .S HICODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA4",36,0)
 .S PRIORITY=$$PRI(HICODE,.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",37,0)
 .S HIPRI=$P(PRIORITY,"^"),HISUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",38,0)
 .S CODE=""
"RTN","DGENELA4",39,0)
 .;
"RTN","DGENELA4",40,0)
 .; determine if other eligibilities result in higher priority/subgroup
"RTN","DGENELA4",41,0)
 .F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:('CODE!(HIPRI=1))  D
"RTN","DGENELA4",42,0)
 ..S PRIORITY=$$PRI($$NATCODE^DGENELA(CODE),.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",43,0)
 ..S PRI=$P(PRIORITY,"^"),SUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",44,0)
 ..S:((PRI>0)&((PRI<HIPRI)!(HIPRI=""))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",45,0)
 ..S:((PRI=HIPRI)&((SUB>0)&(SUB<HISUB))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",46,0)
 .;
"RTN","DGENELA4",47,0)
 .;set the DGELGSUB() array with the eligibility information used in the
"RTN","DGENELA4",48,0)
 .;priority determination
"RTN","DGENELA4",49,0)
 .S DGELGSUB("CODE")=HICODE,DGELGSUB("SC")=DGELG("SC"),DGELGSUB("SCPER")=DGELG("SCPER"),DGELGSUB("POW")=DGELG("POW"),DGELGSUB("A&A")=DGELG("A&A"),DGELGSUB("HB")=DGELG("HB")
"RTN","DGENELA4",50,0)
 .S DGELGSUB("VAPEN")=DGELG("VAPEN"),DGELGSUB("VACKAMT")=DGELG("VACKAMT"),DGELGSUB("DISRET")=DGELG("DISRET")
"RTN","DGENELA4",51,0)
 .S DGELGSUB("MEDICAID")=DGELG("MEDICAID"),DGELGSUB("AO")=DGELG("AO"),DGELGSUB("IR")=DGELG("IR"),DGELGSUB("EC")=DGELG("EC"),DGELGSUB("MTSTA")=DGELG("MTSTA")
"RTN","DGENELA4",52,0)
 .;Purple Heart Added to DGELGSUB
"RTN","DGENELA4",53,0)
 .S DGELGSUB("VCD")=DGELG("VCD"),DGELGSUB("PH")=DGELG("PH")
"RTN","DGENELA4",54,0)
 .;Added for HVE Phase III (DG*5.3*564)
"RTN","DGENELA4",55,0)
 .S DGELGSUB("UNEMPLOY")=DGELG("UNEMPLOY"),DGELGSUB("CVELEDT")=DGELG("CVELEDT")
"RTN","DGENELA4",56,0)
 .;
"RTN","DGENELA4",57,0)
 .I $G(DGPAT("INELDATE"))'="" S (HIPRI,HISUB)=""
"RTN","DGENELA4",58,0)
 ;
"RTN","DGENELA4",59,0)
 Q HIPRI_$S(HIPRI:"^"_HISUB,1:"")
"RTN","DGENELA4",60,0)
 ;
"RTN","DGENELA4",61,0)
 ;
"RTN","DGENELA4",62,0)
PRI(CODE,DGELG,ENRDATE,APPDATE) ;
"RTN","DGENELA4",63,0)
 ; Description: Returns the priority group and subgroup based on a
"RTN","DGENELA4",64,0)
 ; single eligibility code.
"RTN","DGENELA4",65,0)
 ;Input -
"RTN","DGENELA4",66,0)
 ;  CODE - pointer to file #8.1, MAS Eligibility Code
"RTN","DGENELA4",67,0)
 ;  DGELG - local array obtained by calling $$GET, pass by reference
"RTN","DGENELA4",68,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",69,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",70,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",71,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",72,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",73,0)
 ;
"RTN","DGENELA4",74,0)
 ;Output -
"RTN","DGENELA4",75,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",76,0)
 ;   function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",77,0)
 ;
"RTN","DGENELA4",78,0)
 N CODENAME,PRIORITY,MTSTA,SUBGRP,DGEGT,PRISUB,DGMTI,MTTHR,GMTTHR
"RTN","DGENELA4",79,0)
 S SUBGRP=""
"RTN","DGENELA4",80,0)
 ;
"RTN","DGENELA4",81,0)
 ; use the Application Date when determining the priority, otherwise use
"RTN","DGENELA4",82,0)
 ; the Enrollment Date (ESP DG*5,3*491)
"RTN","DGENELA4",83,0)
 S ENRDATE=$S($G(APPDATE):APPDATE,1:$G(ENRDATE))
"RTN","DGENELA4",84,0)
 ;
"RTN","DGENELA4",85,0)
 ;get the name of the national eligibility code
"RTN","DGENELA4",86,0)
 S CODENAME=$$CODENAME^DGENELA(CODE)
"RTN","DGENELA4",87,0)
 ;
"RTN","DGENELA4",88,0)
 ;get the means test code
"RTN","DGENELA4",89,0)
 S MTSTA=""
"RTN","DGENELA4",90,0)
 I DGELG("MTSTA") S MTSTA=$P($G(^DG(408.32,DGELG("MTSTA"),0)),"^",2)
"RTN","DGENELA4",91,0)
 ;
"RTN","DGENELA4",92,0)
 ;get MT and GMT thresholds
"RTN","DGENELA4",93,0)
 S DGMTI=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA4",94,0)
 S MTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",12)
"RTN","DGENELA4",95,0)
 S GMTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",27)
"RTN","DGENELA4",96,0)
 ;
"RTN","DGENELA4",97,0)
 ;get the Enrollment Group Threshold (EGT) setting
"RTN","DGENELA4",98,0)
 S DGEGT=""
"RTN","DGENELA4",99,0)
 I $$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT)
"RTN","DGENELA4",100,0)
 ;
"RTN","DGENELA4",101,0)
 D  ;drops out when priority determined
"RTN","DGENELA4",102,0)
 .S PRIORITY=""
"RTN","DGENELA4",103,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>49))!(CODENAME="SERVICE CONNECTED 50% to 100%") S PRIORITY=1 Q
"RTN","DGENELA4",104,0)
 .I (DGELG("SC")="Y")&(DGELG("SCPER")>0)&(DGELG("UNEMPLOY")="Y")&(DGELG("VACKAMT")>0)&(DGELG("VAPEN")'="Y")&(DGELG("A&A")'="Y")&(DGELG("HB")'="Y") S PRIORITY=1 Q
"RTN","DGENELA4",105,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>29)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=2 Q
"RTN","DGENELA4",106,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>9)&(CODENAME="SC LESS THAN 50%"))!(DGELG("POW")="Y")!(CODENAME="PRISONER OF WAR")!(DGELG("DISRET")=2)!(DGELG("DISRET")=1)!(CODENAME="PURPLE HEART RECIPIENT")!(DGELG("PH")="Y") S PRIORITY=3 Q
"RTN","DGENELA4",107,0)
 .I (DGELG("A&A")="Y")!(CODENAME="AID & ATTENDANCE")!(DGELG("HB")="Y")!(CODENAME="HOUSEBOUND")!(DGELG("VCD")="Y") S PRIORITY=4 Q
"RTN","DGENELA4",108,0)
 .I (MTSTA="A")!(DGELG("MEDICAID")=1)!(DGELG("VAPEN")="Y")!(CODENAME="NSC, VA PENSION") S PRIORITY=5 Q
"RTN","DGENELA4",109,0)
 .I (CODENAME="WORLD WAR I")!(CODENAME="MEXICAN BORDER WAR")!(DGELG("AO")="Y")!(DGELG("EC")="Y")!(DGELG("IR")="Y")!(DGELG("VACKAMT")>0)!((DGELG("CVELEDT"))&(DGELG("CVELEDT")'<DT)) S PRIORITY=6 Q
"RTN","DGENELA4",110,0)
 .I (MTSTA="G")!((MTSTA="P")&(GMTTHR>MTTHR)) S PRIORITY=7 D  Q
"RTN","DGENELA4",111,0)
 ..I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",112,0)
 ..S SUBGRP=$$SUBPRI(DFN,.PRIORITY,3)
"RTN","DGENELA4",113,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",114,0)
 .I ((MTSTA="C")!(MTSTA="P")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,PRIORITY,3) Q
"RTN","DGENELA4",115,0)
 ;
"RTN","DGENELA4",116,0)
 Q PRIORITY_$S(PRIORITY:"^"_SUBGRP,1:"")
"RTN","DGENELA4",117,0)
 ;
"RTN","DGENELA4",118,0)
SUBPRI(DFN,PRIORITY,SUBGRP) ;calculate sub-priority if under EGT
"RTN","DGENELA4",119,0)
 ;
"RTN","DGENELA4",120,0)
 N PRVPRI,DONE,PRVENST,ENRDT,DGENRIEN,EGT,DGENRC,TODAY,X
"RTN","DGENELA4",121,0)
 Q:'$G(DFN)
"RTN","DGENELA4",122,0)
 S U="^"
"RTN","DGENELA4",123,0)
 S:$G(PRIORITY)="" PRIORITY=""
"RTN","DGENELA4",124,0)
 S:$G(SUBGRP)="" SUBGRP=""
"RTN","DGENELA4",125,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENELA4",126,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) SUBGRP  ;EGT isn't set
"RTN","DGENELA4",127,0)
 Q:TODAY<EGT("EFFDATE") SUBGRP  ;EGT is not in effect
"RTN","DGENELA4",128,0)
 I "^1^3^"[(U_EGT("TYPE")_U) Q SUBGRP
"RTN","DGENELA4",129,0)
 I EGT("TYPE")=2,(PRIORITY+(SUBGRP*.01))<(EGT("PRIORITY")+(EGT("SUBGRP")*.01)) Q SUBGRP
"RTN","DGENELA4",130,0)
 I EGT("TYPE")=4 Q:(PRIORITY<EGT("PRIORITY")) SUBGRP  Q:(PRIORITY>EGT("PRIORITY")) $$SUBCNV(SUBGRP)
"RTN","DGENELA4",131,0)
 ;I $G(ENRDATE) Q:$$ABOVE2^DGENEGT1(ENRDATE,PRIORITY,SUBGRP) SUBGRP
"RTN","DGENELA4",132,0)
 S DGENRIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENELA4",133,0)
 I 'DGENRIEN,$G(ENRDATE),ENRDATE<EGT("EFFDATE") Q SUBGRP
"RTN","DGENELA4",134,0)
 S DONE=0
"RTN","DGENELA4",135,0)
 F  Q:DONE  D
"RTN","DGENELA4",136,0)
 .I 'DGENRIEN S DONE=2 Q
"RTN","DGENELA4",137,0)
 .I '$$GET^DGENA(DGENRIEN,.DGENRC) S DONE=2 Q
"RTN","DGENELA4",138,0)
 .S DGENRIEN=$$FINDPRI^DGENA(DGENRIEN)
"RTN","DGENELA4",139,0)
 .Q:DGENRC("STATUS")=6   ;deceased
"RTN","DGENELA4",140,0)
 .I $P($G(^DGEN(27.15,+DGENRC("STATUS"),0)),"^",2)="N" S DONE=2 Q
"RTN","DGENELA4",141,0)
 .S ENRDT=$G(DGENRC("APP")) S:'ENRDT ENRDT=$G(DGENRC("EFFDATE"))
"RTN","DGENELA4",142,0)
 .I ENRDT,ENRDT<EGT("EFFDATE") S DONE=1 Q
"RTN","DGENELA4",143,0)
 .; HEC is the authoritative source on continuous enrollment
"RTN","DGENELA4",144,0)
 .I $$OVRRIDE^DGENEGT1(DFN,.EGT) S DONE=1
"RTN","DGENELA4",145,0)
 ;
"RTN","DGENELA4",146,0)
 Q $S(DONE=2:$$SUBCNV(SUBGRP),1:SUBGRP)
"RTN","DGENELA4",147,0)
 ;
"RTN","DGENELA4",148,0)
SUBCNV(SUBGRP) ;return new subgrp
"RTN","DGENELA4",149,0)
 I SUBGRP=1 Q 5
"RTN","DGENELA4",150,0)
 I SUBGRP=3 Q 7
"RTN","DGENELA4",151,0)
 Q SUBGRP
"RTN","DGENL1")
0^16^B74641169
"RTN","DGENL1",1,0)
DGENL1 ;ALB/RMO,ISA/KWP,Zoltan,ALB/BRM,LBD - Patient Enrollment - Build List Area; 10/23/00 9:49am ; 2/27/01 1:25pm
"RTN","DGENL1",2,0)
 ;;5.3;Registration;**121,147,232,266,343,564**;Aug 13,1993
"RTN","DGENL1",3,0)
 ;
"RTN","DGENL1",4,0)
EN(DGARY,DFN,DGENRIEN,DGCNT) ;Entry point to build list area
"RTN","DGENL1",5,0)
 ; for patient enrollment and patient enrollment history
"RTN","DGENL1",6,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",7,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",8,0)
 ;           DGENRIEN Enrollment IEN
"RTN","DGENL1",9,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",10,0)
 N DGENCAT,DGENR,DGLINE
"RTN","DGENL1",11,0)
 I DGENRIEN,$$GET^DGENA(DGENRIEN,.DGENR) ;set-up enrollment array
"RTN","DGENL1",12,0)
 S DGENCAT=$$CATEGORY^DGENA4(,$G(DGENR("STATUS")))  ;enrollment category
"RTN","DGENL1",13,0)
 S DGENCAT=$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)
"RTN","DGENL1",14,0)
 S DGLINE=1,DGCNT=0
"RTN","DGENL1",15,0)
 D ENR(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;enrollment
"RTN","DGENL1",16,0)
 D PF(DGARY,DFN,.DGENR,.DGLINE,.DGCNT) ;priority factors
"RTN","DGENL1",17,0)
 D HIS^DGENL2(DGARY,DFN,DGENRIEN,.DGLINE,.DGCNT) ;history
"RTN","DGENL1",18,0)
 Q
"RTN","DGENL1",19,0)
 ;
"RTN","DGENL1",20,0)
ENR(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Enrollment 
"RTN","DGENL1",21,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",22,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",23,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",24,0)
 ;           DGLINE   Line number
"RTN","DGENL1",25,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",26,0)
 N DGSTART
"RTN","DGENL1",27,0)
 ;
"RTN","DGENL1",28,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",29,0)
 D SET(DGARY,DGLINE,"Enrollment",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",30,0)
 ;
"RTN","DGENL1",31,0)
 ;Enrollment Date
"RTN","DGENL1",32,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",33,0)
 D SET(DGARY,DGLINE,"Enrollment Date: "_$S($G(DGENR("DATE")):$$EXT^DGENU("DATE",DGENR("DATE")),1:""),11,,,,,,.DGCNT)
"RTN","DGENL1",34,0)
 ;
"RTN","DGENL1",35,0)
 ;
"RTN","DGENL1",36,0)
 ;Enrollment End Date
"RTN","DGENL1",37,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",38,0)
 D SET(DGARY,DGLINE,"Enrollment End Date: "_$S($G(DGENR("END")):$$EXT^DGENU("END",DGENR("END")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",39,0)
 ;
"RTN","DGENL1",40,0)
 ;Enrollment Application Date
"RTN","DGENL1",41,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",42,0)
 D SET(DGARY,DGLINE,"Application Date: "_$S($G(DGENR("APP")):$$EXT^DGENU("APP",DGENR("APP")),1:""),10,,,,,,.DGCNT)
"RTN","DGENL1",43,0)
 ;
"RTN","DGENL1",44,0)
 ;Source
"RTN","DGENL1",45,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",46,0)
 D SET(DGARY,DGLINE,"Source of Enrollment: "_$S($G(DGENR("SOURCE")):$$EXT^DGENU("SOURCE",DGENR("SOURCE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",47,0)
 ;
"RTN","DGENL1",48,0)
 ;Category
"RTN","DGENL1",49,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",50,0)
 D SET(DGARY,DGLINE,"Enrollment Category: "_DGENCAT,7,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",51,0)
 ;
"RTN","DGENL1",52,0)
 ;Status
"RTN","DGENL1",53,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",54,0)
 D SET(DGARY,DGLINE,"Enrollment Status: "_$S($G(DGENR("STATUS")):$$EXT^DGENU("STATUS",DGENR("STATUS")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",55,0)
 ;
"RTN","DGENL1",56,0)
 ;Priority
"RTN","DGENL1",57,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",58,0)
 D SET(DGARY,DGLINE,"Enrollment Priority: "_$S($G(DGENR("PRIORITY")):DGENR("PRIORITY"),1:"")_$S($G(DGENR("SUBGRP")):$$EXT^DGENU("SUBGRP",DGENR("SUBGRP")),1:""),7,,,,,,.DGCNT)
"RTN","DGENL1",59,0)
 ;
"RTN","DGENL1",60,0)
 ;
"RTN","DGENL1",61,0)
 ;Effective date
"RTN","DGENL1",62,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",63,0)
 D SET(DGARY,DGLINE,"Effective Date: "_$S($G(DGENR("EFFDATE")):$$EXT^DGENU("EFFDATE",DGENR("EFFDATE")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",64,0)
 ;
"RTN","DGENL1",65,0)
 ;Reason canceled/declined
"RTN","DGENL1",66,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",67,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",68,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",69,0)
 D SET(DGARY,DGLINE,"Reason Canceled/Declined: "_$S($G(DGENR("REASON")):$$EXT^DGENU("REASON",DGENR("REASON")),1:""),2,,,,,,.DGCNT)
"RTN","DGENL1",70,0)
 ;
"RTN","DGENL1",71,0)
 ;Canceled/declined remarks
"RTN","DGENL1",72,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",73,0)
 D SET(DGARY,DGLINE,"Canceled/Declined Remarks: "_$S($G(DGENR("REASON"))'="":$$EXT^DGENU("REMARKS",DGENR("REMARKS")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",74,0)
 ;
"RTN","DGENL1",75,0)
 ;Entered by
"RTN","DGENL1",76,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",77,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",78,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",79,0)
 D SET(DGARY,DGLINE,"Entered By: "_$S($G(DGENR("USER")):$$EXT^DGENU("USER",DGENR("USER")),1:""),16,,,,,,.DGCNT)
"RTN","DGENL1",80,0)
 ;
"RTN","DGENL1",81,0)
 ;Date/time entered
"RTN","DGENL1",82,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",83,0)
 D SET(DGARY,DGLINE,"Date/Time Entered: "_$S($G(DGENR("DATETIME")):$$EXT^DGENU("DATETIME",DGENR("DATETIME")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",84,0)
 ;
"RTN","DGENL1",85,0)
 ;Set line to start on next page
"RTN","DGENL1",86,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",87,0)
 Q
"RTN","DGENL1",88,0)
 ;
"RTN","DGENL1",89,0)
PF(DGARY,DFN,DGENR,DGLINE,DGCNT) ;Priority factors 
"RTN","DGENL1",90,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",91,0)
 ;           DFN      Patient IEN
"RTN","DGENL1",92,0)
 ;           DGENR    Enrollment array
"RTN","DGENL1",93,0)
 ;           DGLINE   Line number
"RTN","DGENL1",94,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",95,0)
 N DGSTART
"RTN","DGENL1",96,0)
 ;
"RTN","DGENL1",97,0)
 S DGSTART=DGLINE ; starting line number
"RTN","DGENL1",98,0)
 D SET(DGARY,DGLINE,"Priority Factors",31,IORVON,IORVOFF,,,,.DGCNT)
"RTN","DGENL1",99,0)
 ;
"RTN","DGENL1",100,0)
 ;POW
"RTN","DGENL1",101,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",102,0)
 D SET(DGARY,DGLINE,"POW: "_$S($G(DGENR("ELIG","POW"))'="":$$EXT^DGENU("POW",DGENR("ELIG","POW")),1:""),19,,,,,,.DGCNT)
"RTN","DGENL1",103,0)
 ;
"RTN","DGENL1",104,0)
 ;Purple Heart - added for patch 343;brm;10/23/00
"RTN","DGENL1",105,0)
 N PHDAT
"RTN","DGENL1",106,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",107,0)
 S PHDAT=$$PHEART(DFN,$G(DGENRIEN),$G(DGENR("DATETIME")))
"RTN","DGENL1",108,0)
 D SET(DGARY,DGLINE,"Purple Hrt: "_$P(PHDAT,U),12,,,,,,.DGCNT)
"RTN","DGENL1",109,0)
 D:$P(PHDAT,U)="YES" SET(DGARY,DGLINE,"Status: "_$P(PHDAT,U,2),32,,,,,,.DGCNT)
"RTN","DGENL1",110,0)
 D:$P(PHDAT,U)="NO" SET(DGARY,DGLINE,"Remarks: "_$P(PHDAT,U,3),31,,,,,,.DGCNT)
"RTN","DGENL1",111,0)
 ;
"RTN","DGENL1",112,0)
 ;Agent orange
"RTN","DGENL1",113,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",114,0)
 D SET(DGARY,DGLINE,"A/O Exp.: "_$S($G(DGENR("ELIG","AO"))'="":$$EXT^DGENU("AO",DGENR("ELIG","AO")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",115,0)
 ;
"RTN","DGENL1",116,0)
 ;Ionizing radiation
"RTN","DGENL1",117,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",118,0)
 D SET(DGARY,DGLINE,"ION Rad.: "_$S($G(DGENR("ELIG","IR"))'="":$$EXT^DGENU("IR",DGENR("ELIG","IR")),1:""),14,,,,,,.DGCNT)
"RTN","DGENL1",119,0)
 ;
"RTN","DGENL1",120,0)
 ;Environmental contaminants
"RTN","DGENL1",121,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",122,0)
 D SET(DGARY,DGLINE,"Env Contam: "_$S($G(DGENR("ELIG","EC"))'="":$$EXT^DGENU("EC",DGENR("ELIG","EC")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",123,0)
 ;
"RTN","DGENL1",124,0)
 ;Military disability
"RTN","DGENL1",125,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",126,0)
 D SET(DGARY,DGLINE,"Mil Disab: "_$S($G(DGENR("ELIG","DISRET"))'="":$$EXT^DGENU("DISRET",DGENR("ELIG","DISRET")),1:""),13,,,,,,.DGCNT)
"RTN","DGENL1",127,0)
 ;
"RTN","DGENL1",128,0)
 ;Combat Vet End Date (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",129,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",130,0)
 D SET(DGARY,DGLINE,"Combat Vet End Date: "_$S($G(DGENR("ELIG","CVELEDT"))'="":$$EXT^DGENU("CVELEDT",DGENR("ELIG","CVELEDT")),1:""),3,,,,,,.DGCNT)
"RTN","DGENL1",131,0)
 ;
"RTN","DGENL1",132,0)
 ;Eligible for medicaid
"RTN","DGENL1",133,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",134,0)
 D SET(DGARY,DGLINE,"Eligible for MEDICAID: "_$S($G(DGENR("ELIG","MEDICAID"))'="":$$EXT^DGENU("MEDICAID",DGENR("ELIG","MEDICAID")),1:""),1,,,,,,.DGCNT)
"RTN","DGENL1",135,0)
 ;
"RTN","DGENL1",136,0)
 ;Service connected and percentage
"RTN","DGENL1",137,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",138,0)
 D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",139,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",140,0)
 D SET(DGARY,DGLINE,"Svc Connected: "_$S($G(DGENR("ELIG","SC"))'="":$$EXT^DGENU("SC",DGENR("ELIG","SC")),1:""),9,,,,,,.DGCNT)
"RTN","DGENL1",141,0)
 D SET(DGARY,DGLINE,"SC Percent: "_$S($G(DGENR("ELIG","SCPER"))'="":$$EXT^DGENU("SCPER",DGENR("ELIG","SCPER"))_"%",1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",142,0)
 ;
"RTN","DGENL1",143,0)
 ;Aid & attendance and housebound
"RTN","DGENL1",144,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",145,0)
 D SET(DGARY,DGLINE,"Aid & Attendance: "_$S($G(DGENR("ELIG","A&A"))'="":$$EXT^DGENU("A&A",DGENR("ELIG","A&A")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",146,0)
 D SET(DGARY,DGLINE,"Housebound: "_$S($G(DGENR("ELIG","HB"))'="":$$EXT^DGENU("HB",DGENR("ELIG","HB")),1:""),52,,,,,,.DGCNT)
"RTN","DGENL1",147,0)
 ;
"RTN","DGENL1",148,0)
 ;VA Pension
"RTN","DGENL1",149,0)
 ;Unemployable (added for DG*5.3*564 - HVE Phase III)
"RTN","DGENL1",150,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",151,0)
 D SET(DGARY,DGLINE,"VA Pension: "_$S($G(DGENR("ELIG","VAPEN"))'="":$$EXT^DGENU("VAPEN",DGENR("ELIG","VAPEN")),1:""),12,,,,,,.DGCNT)
"RTN","DGENL1",152,0)
 D SET(DGARY,DGLINE,"Unemployable: "_$S($G(DGENR("ELIG","UNEMPLOY"))'="":$$EXT^DGENU("UNEMPLOY",DGENR("ELIG","UNEMPLOY")),1:""),50,,,,,,.DGCNT)
"RTN","DGENL1",153,0)
 ;
"RTN","DGENL1",154,0)
 ;Total check amount
"RTN","DGENL1",155,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",156,0)
 D SET(DGARY,DGLINE,"Total Check Amount: "_$S($G(DGENR("ELIG","VACKAMT"))'="":$$EXT^DGENU("VACKAMT",DGENR("ELIG","VACKAMT")),1:""),4,,,,,,.DGCNT)
"RTN","DGENL1",157,0)
 ;
"RTN","DGENL1",158,0)
 ;Eligibility code
"RTN","DGENL1",159,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",160,0)
 D SET(DGARY,DGLINE,"Eligibility Code: "_$S($G(DGENR("ELIG","CODE"))'="":$$EXT^DGENU("CODE",DGENR("ELIG","CODE")),1:""),6,,,,,,.DGCNT)
"RTN","DGENL1",161,0)
 ;
"RTN","DGENL1",162,0)
 ;Means test
"RTN","DGENL1",163,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",164,0)
 D SET(DGARY,DGLINE,"Means Test Status: "_$S($G(DGENR("ELIG","MTSTA"))'="":$$EXT^DGENU("MTSTA",DGENR("ELIG","MTSTA")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",165,0)
 ;
"RTN","DGENL1",166,0)
 ;Veteran Catastrophically Disabled
"RTN","DGENL1",167,0)
 S DGLINE=DGLINE+1
"RTN","DGENL1",168,0)
 D SET(DGARY,DGLINE,"Veteran CD Status: "_$S($G(DGENR("ELIG","VCD"))'="":$$EXT^DGENU("VCD",DGENR("ELIG","VCD")),1:""),5,,,,,,.DGCNT)
"RTN","DGENL1",169,0)
 ;
"RTN","DGENL1",170,0)
 ;Set line to start on next page
"RTN","DGENL1",171,0)
 F DGLINE=DGLINE+1:1:DGSTART+VALM("LINES") D SET(DGARY,DGLINE,"",1,,,,,,.DGCNT)
"RTN","DGENL1",172,0)
 Q
"RTN","DGENL1",173,0)
 ;
"RTN","DGENL1",174,0)
SET(DGARY,DGLINE,DGTEXT,DGCOL,DGON,DGOFF,DGSUB,DGNUM,DGDATA,DGCNT) ; -- set display array
"RTN","DGENL1",175,0)
 ; Input  -- DGARY    Global array subscript
"RTN","DGENL1",176,0)
 ;           DGLINE   Line number
"RTN","DGENL1",177,0)
 ;           DGTEXT   Text
"RTN","DGENL1",178,0)
 ;           DGCOL    Column to start at              (optional)
"RTN","DGENL1",179,0)
 ;           DGON     Highlighting on                 (optional)
"RTN","DGENL1",180,0)
 ;           DGOFF    Highlighting off                (optional)
"RTN","DGENL1",181,0)
 ;           DGSUB    Secondary list subscript        (optional)
"RTN","DGENL1",182,0)
 ;           DGNUM    Selection number                (optional)
"RTN","DGENL1",183,0)
 ;           DGDATA   Data associated with selection  (optional)
"RTN","DGENL1",184,0)
 ; Output -- DGCNT    Number of lines in the list
"RTN","DGENL1",185,0)
 N X
"RTN","DGENL1",186,0)
 S:DGLINE>DGCNT DGCNT=DGLINE
"RTN","DGENL1",187,0)
 S X=$S($D(^TMP(DGARY,$J,DGLINE,0)):^(0),1:"")
"RTN","DGENL1",188,0)
 S ^TMP(DGARY,$J,DGLINE,0)=$$SETSTR^VALM1(DGTEXT,X,DGCOL,$L(DGTEXT))
"RTN","DGENL1",189,0)
 D:$G(DGON)]""!($G(DGOFF)]"") CNTRL^VALM10(DGLINE,DGCOL,$L(DGTEXT),$G(DGON),$G(DGOFF))
"RTN","DGENL1",190,0)
 ;Set-up special index for secondary selection list
"RTN","DGENL1",191,0)
 S:$G(DGSUB)]"" ^TMP(DGARY_"IDX",$J,DGSUB,DGNUM,DGLINE)=DGDATA,^TMP(DGARY_"IDX",$J,DGSUB,0)=DGNUM
"RTN","DGENL1",192,0)
 Q
"RTN","DGENL1",193,0)
PHEART(DFN,DGENRIEN,PHENRDT) ;find Purple Heart information based on enrollment date
"RTN","DGENL1",194,0)
 N NXTENR,NXTENDT,PRVENR,PRVENDT,PHARY,PHI,PHST,PHRR,PHDIERR
"RTN","DGENL1",195,0)
 N NXTDIF,NXTENTM,NXTPHDT,NXTPHTM,PHENTM,PHREC,PRVDIF,PRVPHDT
"RTN","DGENL1",196,0)
 S U="^",(PRVDIF,NXTDIF)=""
"RTN","DGENL1",197,0)
 Q:'(PHENRDT&DGENRIEN) ""
"RTN","DGENL1",198,0)
 S PRVENDT=0,NXTENDT=9999999
"RTN","DGENL1",199,0)
 S PRVENR=$O(^DGEN(27.11,"C",DFN,DGENRIEN),-1)
"RTN","DGENL1",200,0)
 S:PRVENR PRVENDT=$P($G(^DGEN(27.11,PRVENR,"U")),U)
"RTN","DGENL1",201,0)
 S PRVPHDT=$O(^DPT(DFN,"PH","B",PHENRDT),-1)
"RTN","DGENL1",202,0)
 S NXTENR=$O(^DGEN(27.11,"C",DFN,DGENRIEN))
"RTN","DGENL1",203,0)
 S:NXTENR NXTENDT=$P($G(^DGEN(27.11,NXTENR,"U")),U)
"RTN","DGENL1",204,0)
 S NXTPHDT=$O(^DPT(DFN,"PH","B",PHENRDT-.0000001))
"RTN","DGENL1",205,0)
 I NXTPHDT<NXTENDT,$P(PHENRDT,".")=$P(NXTPHDT,".")  D
"RTN","DGENL1",206,0)
 .I $P(NXTENDT,".")=$P(NXTPHDT,".")  D
"RTN","DGENL1",207,0)
 ..S NXTPHTM=$P(NXTPHDT,".",2),NXTENTM=$P(NXTENDT,".",2),PHENTM=$P(PHENRDT,".",2)
"RTN","DGENL1",208,0)
 ..S NXTDIF=NXTENTM-NXTPHTM,PRVDIF=NXTPHTM-PHENTM
"RTN","DGENL1",209,0)
 ..S:PRVDIF<NXTDIF PHREC=$O(^DPT(DFN,"PH","B",NXTPHDT,""))
"RTN","DGENL1",210,0)
 .E  S PHREC=$O(^DPT(DFN,"PH","B",NXTPHDT,""))
"RTN","DGENL1",211,0)
 Q:'$D(PHREC)&('PRVPHDT) ""
"RTN","DGENL1",212,0)
 S:'$D(PHREC) PHREC=$O(^DPT(DFN,"PH","B",PRVPHDT,""))
"RTN","DGENL1",213,0)
 Q:'$D(PHREC) ""
"RTN","DGENL1",214,0)
 S PHARY=$G(^DPT(DFN,"PH",PHREC,0))
"RTN","DGENL1",215,0)
 S PHI=$$EXTERNAL^DILFD(2,.531,,$P(PHARY,U,2),.PHDIERR)
"RTN","DGENL1",216,0)
 S PHST=$$EXTERNAL^DILFD(2,.532,,$P(PHARY,U,3),.PHDIERR)
"RTN","DGENL1",217,0)
 S PHRR=$$EXTERNAL^DILFD(2,.533,,$P(PHARY,U,4),.PHDIERR)
"RTN","DGENL1",218,0)
 Q PHI_"^"_PHST_"^"_PHRR
"RTN","DGENU")
0^17^B33930935
"RTN","DGENU",1,0)
DGENU ;ALB/CJM,ISA/KWP,Zoltan,LBD - Enrollment Utilities; 12/11/00 4:33pm ; 12/11/00 9:21pm
"RTN","DGENU",2,0)
 ;;5.3;Registration;**121,122,147,232,314,564**;Aug 13,1993
"RTN","DGENU",3,0)
 ;
"RTN","DGENU",4,0)
DISPLAY(DFN) ;
"RTN","DGENU",5,0)
 ;Description: Display status message, current enrollment and
"RTN","DGENU",6,0)
 ;     preferred facility information
"RTN","DGENU",7,0)
 ;Input:
"RTN","DGENU",8,0)
 ;  DFN - Patient IEN
"RTN","DGENU",9,0)
 ;  Output:     none
"RTN","DGENU",10,0)
 ;
"RTN","DGENU",11,0)
 N STATUS
"RTN","DGENU",12,0)
 S STATUS=$$STATUS^DGENA(DFN)
"RTN","DGENU",13,0)
 I 'STATUS W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",14,0)
 E  I STATUS=2 D
"RTN","DGENU",15,0)
 .W !!,"Patient is enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",16,0)
 ; Purple Heart added status 21
"RTN","DGENU",17,0)
 E  I (STATUS=9)!(STATUS=1)!(STATUS=15)!(STATUS=16)!(STATUS=17)!(STATUS=18)!(STATUS=21) D
"RTN","DGENU",18,0)
 .W !!,"Application is pending for enrollment in the VA Patient Enrollment System..."
"RTN","DGENU",19,0)
 E  D
"RTN","DGENU",20,0)
 .W !!,"Patient is NOT enrolled in the VA Patient Enrollment System..."
"RTN","DGENU",21,0)
 D CUR(DFN)
"RTN","DGENU",22,0)
 Q
"RTN","DGENU",23,0)
 ;
"RTN","DGENU",24,0)
CUR(DFN) ;
"RTN","DGENU",25,0)
 ;Description - displays current enrollment, category, enrollment group threshold, and preferred facility
"RTN","DGENU",26,0)
 ;
"RTN","DGENU",27,0)
 N FACNAME,PREFAC,DGEGT,DGEGTIEN,DGENCAT,DGENR,IORVON,IORVOFF
"RTN","DGENU",28,0)
 I $$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR)
"RTN","DGENU",29,0)
 ;Get enrollment category
"RTN","DGENU",30,0)
 S DGENCAT=$$CATEGORY^DGENA4(DFN)
"RTN","DGENU",31,0)
 ;Display Category in reverse video
"RTN","DGENU",32,0)
 D REV
"RTN","DGENU",33,0)
 ;Get enrollment group threshold
"RTN","DGENU",34,0)
 S DGEGTIEN=$$FINDCUR^DGENEGT
"RTN","DGENU",35,0)
 S DGEGT=$$GET^DGENEGT(DGEGTIEN,.DGEGT)
"RTN","DGENU",36,0)
 ;Preferred facility
"RTN","DGENU",37,0)
 S PREFAC=$$PREF^DGENPTA(DFN,.FACNAME)
"RTN","DGENU",38,0)
 W !?3,"Enrollment Date",?35,": ",$S('$G(DGENR("DATE")):"-none-",1:$$EXT^DGENU("DATE",DGENR("DATE")))
"RTN","DGENU",39,0)
 W !?3,"Enrollment Application Date",?35,": ",$S('$G(DGENR("APP")):"-none-",1:$$EXT^DGENU("DATE",DGENR("APP")))
"RTN","DGENU",40,0)
 W !?3,IORVON,"Enrollment Category             : ",$S($G(DGENCAT)="":"-none-",1:$$EXTERNAL^DILFD(27.15,.02,"",DGENCAT)),IORVOFF
"RTN","DGENU",41,0)
 W !?3,"Enrollment Status",?35,": ",$S($G(DGENR("STATUS"))="":"-none-",1:$$EXT^DGENU("STATUS",DGENR("STATUS")))
"RTN","DGENU",42,0)
 W !?3,"Enrollment Priority",?35,": ",$S($G(DGENR("PRIORITY"))="":"-none-",1:DGENR("PRIORITY")),$S($G(DGENR("SUBGRP"))="":"",1:$$EXT("SUBGRP",DGENR("SUBGRP")))
"RTN","DGENU",43,0)
 W !?3,"Preferred Facility",?35,": ",$S($G(FACNAME)'="":FACNAME,1:"-none-")
"RTN","DGENU",44,0)
 W !?3,"Enrollment Group Threshold",?35,": ",$S($G(DGEGT("PRIORITY"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"",$G(DGEGT("PRIORITY")))),$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"",$G(DGEGT("SUBGRP"))))
"RTN","DGENU",45,0)
 W !
"RTN","DGENU",46,0)
 Q
"RTN","DGENU",47,0)
REV ;Get variables to display text in reverse video
"RTN","DGENU",48,0)
 N X
"RTN","DGENU",49,0)
 S X="IORVON;IORVOFF"
"RTN","DGENU",50,0)
 D ENDR^%ZISS
"RTN","DGENU",51,0)
 Q
"RTN","DGENU",52,0)
PATID(DFN) ;
"RTN","DGENU",53,0)
 ;Description - Called by FileMan as an identifier for the Patient file.
"RTN","DGENU",54,0)
 ;Displays current enrollment status, priority, and preferred facility.
"RTN","DGENU",55,0)
 ;
"RTN","DGENU",56,0)
 ;Input:
"RTN","DGENU",57,0)
 ;  DFN - ien to Patient file
"RTN","DGENU",58,0)
 ;
"RTN","DGENU",59,0)
 N PREFAC,DGENR,OUTPUT
"RTN","DGENU",60,0)
 I '$$GET^DGENA($$FINDCUR^DGENA(DFN),.DGENR) D
"RTN","DGENU",61,0)
 .S OUTPUT="NO ENROLLMENT APPLICATION ON FILE "
"RTN","DGENU",62,0)
 E  D
"RTN","DGENU",63,0)
 .S OUTPUT=$E("PRIORITY:"_DGENR("PRIORITY")_"   ",1,12)_$E("STATUS:"_$$EXT^DGENU("STATUS",DGENR("STATUS"))_"         ",1,26)
"RTN","DGENU",64,0)
 S PREFAC=$$PREF^DGENPTA(DFN)
"RTN","DGENU",65,0)
 S:PREFAC OUTPUT=OUTPUT_"PREFERRED FACILITY:"_$P($G(^DIC(4,PREFAC,99)),"^")
"RTN","DGENU",66,0)
 I $G(IOM) I ($X#$G(IOM))<6 D
"RTN","DGENU",67,0)
 .D EN^DDIOL(OUTPUT,,"?($X+(10-($X#IOM)))")
"RTN","DGENU",68,0)
 E  D
"RTN","DGENU",69,0)
 .D EN^DDIOL(OUTPUT,,"!?10")
"RTN","DGENU",70,0)
 Q
"RTN","DGENU",71,0)
 ;
"RTN","DGENU",72,0)
EXT(SUB,VAL) ;
"RTN","DGENU",73,0)
 ;Description: Given the subscript used in the PATIENT ENROLLMENT array,
"RTN","DGENU",74,0)
 ;     and a field value, returns the external representation of the
"RTN","DGENU",75,0)
 ;     value, as defined in the fields output transform of the PATIENT
"RTN","DGENU",76,0)
 ;     ENROLLMENT file.
"RTN","DGENU",77,0)
 ;Input: 
"RTN","DGENU",78,0)
 ;  SUB - subscript in the array defined by the PATIENT ENROLLMENT object
"RTN","DGENU",79,0)
 ;  VAL - value of the PATIENT ENROLLMENT object attribute named by SUB
"RTN","DGENU",80,0)
 ;Output:
"RTN","DGENU",81,0)
 ;  Function Value - returns the external value of the attribute as
"RTN","DGENU",82,0)
 ;     defined by the PATIENT ENROLLMENT file
"RTN","DGENU",83,0)
 ;
"RTN","DGENU",84,0)
 Q:(($G(SUB)="")!($G(VAL)="")) ""
"RTN","DGENU",85,0)
 ;
"RTN","DGENU",86,0)
 N FLD
"RTN","DGENU",87,0)
 S FLD=$$FIELD(SUB)
"RTN","DGENU",88,0)
 ;
"RTN","DGENU",89,0)
 Q:(FLD="") ""
"RTN","DGENU",90,0)
 Q $$EXTERNAL^DILFD(27.11,FLD,"F",VAL)
"RTN","DGENU",91,0)
 ;
"RTN","DGENU",92,0)
FIELD(SUB) ;
"RTN","DGENU",93,0)
 ;Description: given a subscript in the enrollment array, returns the
"RTN","DGENU",94,0)
 ;     corresponding field number
"RTN","DGENU",95,0)
 N FLD S FLD=""
"RTN","DGENU",96,0)
 D  ;drops out of block once SUB is determined
"RTN","DGENU",97,0)
 .I SUB="APP" S FLD=.01 Q
"RTN","DGENU",98,0)
 .I SUB="DATE" S FLD=.1 Q
"RTN","DGENU",99,0)
 .I SUB="END" S FLD=.11 Q
"RTN","DGENU",100,0)
 .I SUB="DFN" S FLD=.02 Q
"RTN","DGENU",101,0)
 .I SUB="SOURCE" S FLD=.03 Q
"RTN","DGENU",102,0)
 .I SUB="STATUS" S FLD=.04 Q
"RTN","DGENU",103,0)
 .I SUB="REASON" S FLD=.05 Q
"RTN","DGENU",104,0)
 .I SUB="REMARKS" S FLD=25 Q
"RTN","DGENU",105,0)
 .I SUB="FACREC" S FLD=.06 Q
"RTN","DGENU",106,0)
 .I SUB="PRIORITY" S FLD=.07 Q
"RTN","DGENU",107,0)
 .I SUB="EFFDATE" S FLD=.08 Q
"RTN","DGENU",108,0)
 .I SUB="PRIORREC" S FLD=.09 Q
"RTN","DGENU",109,0)
 .I SUB="SUBGRP" S FLD=.12 Q
"RTN","DGENU",110,0)
 .I SUB="CODE" S FLD=50.01 Q
"RTN","DGENU",111,0)
 .I SUB="SC" S FLD=50.02 Q
"RTN","DGENU",112,0)
 .I SUB="SCPER" S FLD=50.03 Q
"RTN","DGENU",113,0)
 .I SUB="POW" S FLD=50.04 Q
"RTN","DGENU",114,0)
 .I SUB="A&A" S FLD=50.05 Q
"RTN","DGENU",115,0)
 .I SUB="HB" S FLD=50.06 Q
"RTN","DGENU",116,0)
 .I SUB="VAPEN" S FLD=50.07 Q
"RTN","DGENU",117,0)
 .I SUB="VACKAMT" S FLD=50.08 Q
"RTN","DGENU",118,0)
 .I SUB="DISRET" S FLD=50.09 Q
"RTN","DGENU",119,0)
 .I SUB="MEDICAID" S FLD=50.1 Q
"RTN","DGENU",120,0)
 .I SUB="AO" S FLD=50.11 Q
"RTN","DGENU",121,0)
 .I SUB="IR" S FLD=50.12 Q
"RTN","DGENU",122,0)
 .I SUB="EC" S FLD=50.13 Q
"RTN","DGENU",123,0)
 .I SUB="MTSTA" S FLD=50.14 Q
"RTN","DGENU",124,0)
 .I SUB="VCD" S FLD=50.15 Q
"RTN","DGENU",125,0)
 .I SUB="PH" S FLD=50.16 Q
"RTN","DGENU",126,0)
 .I SUB="UNEMPLOY" S FLD=50.17 Q
"RTN","DGENU",127,0)
 .I SUB="CVELEDT" S FLD=50.18 Q
"RTN","DGENU",128,0)
 .I SUB="DATETIME" S FLD=75.01 Q
"RTN","DGENU",129,0)
 .I SUB="USER" S FLD=75.02 Q
"RTN","DGENU",130,0)
 Q FLD
"RTN","DGENU",131,0)
 ;
"RTN","DGENU",132,0)
PROMPT(FILE,FIELD,DEFAULT,RESPONSE,REQUIRE) ;
"RTN","DGENU",133,0)
 ;Description: requests user to enter a single field value.
"RTN","DGENU",134,0)
 ;Input:
"RTN","DGENU",135,0)
 ;  FILE - the file #
"RTN","DGENU",136,0)
 ;  FIELD - the field #
"RTN","DGENU",137,0)
 ;  DEFAULT - default value, internal form
"RTN","DGENU",138,0)
 ;  REQUIRE - a flag, (+value)'=0 means to require a value to be
"RTN","DGENU",139,0)
 ;            entered and to return failure otherwise (optional)
"RTN","DGENU",140,0)
 ;Output:
"RTN","DGENU",141,0)
 ;  Function Value - 0 on failure, 1 on success
"RTN","DGENU",142,0)
 ;  RESPONSE - value entered by user, pass by reference
"RTN","DGENU",143,0)
 ;
"RTN","DGENU",144,0)
 Q:(('$G(FILE))!('$G(FIELD))) 0
"RTN","DGENU",145,0)
 S REQUIRE=$G(REQUIRE)
"RTN","DGENU",146,0)
 N DIR,DA,QUIT,AGAIN
"RTN","DGENU",147,0)
 ;
"RTN","DGENU",148,0)
 S DIR(0)=FILE_","_FIELD_$S($G(REQUIRE):"",1:"O")_"AO"
"RTN","DGENU",149,0)
 S:$G(DEFAULT)'="" DIR("A")=$$GET1^DID(FILE,FIELD,"","LABEL")_": "_$$EXTERNAL^DILFD(FILE,FIELD,"F",DEFAULT)_"// "
"RTN","DGENU",150,0)
 S QUIT=0
"RTN","DGENU",151,0)
 F  D  Q:QUIT
"RTN","DGENU",152,0)
 . D ^DIR
"RTN","DGENU",153,0)
 . I $D(DTOUT)!$D(DUOUT) S QUIT=1 Q
"RTN","DGENU",154,0)
 . I X="@" D  Q:AGAIN
"RTN","DGENU",155,0)
 . . S AGAIN=0
"RTN","DGENU",156,0)
 . . I 'REQUIRE,"Yy"'[$E($$YN^DGENCD1("  Are you sure")_"X") S AGAIN=1 Q
"RTN","DGENU",157,0)
 . . S RESPONSE="" ; This might trigger the "required" message below.
"RTN","DGENU",158,0)
 . E  I X="" S RESPONSE=$G(DEFAULT)
"RTN","DGENU",159,0)
 . E  S RESPONSE=$P(Y,"^")
"RTN","DGENU",160,0)
 . ;
"RTN","DGENU",161,0)
 . ; quit this loop if the user entered value OR value not required
"RTN","DGENU",162,0)
 . I RESPONSE'="" S QUIT=1 Q
"RTN","DGENU",163,0)
 . I 'REQUIRE S QUIT=1 Q
"RTN","DGENU",164,0)
 . W !,"This is a required response. Enter '^' to exit"
"RTN","DGENU",165,0)
 I $D(DTOUT)!$D(DUOUT) Q 0
"RTN","DGENU",166,0)
 Q 1
"RTN","DGENU",167,0)
 ;
"RTN","DGENU",168,0)
INST() ;
"RTN","DGENU",169,0)
 ; Description: Determine the institution affiliation associated with a user.
"RTN","DGENU",170,0)
 ;
"RTN","DGENU",171,0)
 ;  Input:
"RTN","DGENU",172,0)
 ;     DUZ(2) - Pointer to the INSTITUTION (#4) file (institution
"RTN","DGENU",173,0)
 ;              affiliated with user, propmted at Kernel sign-on)
"RTN","DGENU",174,0)
 ;
"RTN","DGENU",175,0)
 ; Output:
"RTN","DGENU",176,0)
 ;   Function Value - Returns pointer to the INSTITUTION (#4) file
"RTN","DGENU",177,0)
 ;    entry that is associated with the user, otherwise the pointer
"RTN","DGENU",178,0)
 ;    to the INSTITUTION (#4) file entry of the primary VA Medical
"RTN","DGENU",179,0)
 ;    Center division is returned.
"RTN","DGENU",180,0)
 ;
"RTN","DGENU",181,0)
 Q $S($G(DUZ(2)):DUZ(2),1:$P($$SITE^VASITE(),"^"))
"RTN","DGENU",182,0)
 ;
"RTN","DGENU",183,0)
GETINST(DGPREFAC,DGINST) ;Get Institution file data
"RTN","DGENU",184,0)
 ; Input  -- DGPREFAC Instution file IEN
"RTN","DGENU",185,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","DGENU",186,0)
 ;           DGINST - Institution file Array
"RTN","DGENU",187,0)
 N DGINST0,DGINST99,DGOKF
"RTN","DGENU",188,0)
 S DGINST0=$G(^DIC(4,DGPREFAC,0)) G GETQ:DGINST0=""
"RTN","DGENU",189,0)
 S DGINST("NAME")=$P(DGINST0,U)
"RTN","DGENU",190,0)
 S DGINST99=$G(^DIC(4,DGPREFAC,99))
"RTN","DGENU",191,0)
 S DGINST("STANUM")=$P(DGINST99,U)
"RTN","DGENU",192,0)
 S DGOKF=1
"RTN","DGENU",193,0)
GETQ Q +$G(DGOKF)
"RTN","DGENUPL")
0^25^B28512973
"RTN","DGENUPL",1,0)
DGENUPL ;ALB/CJM,ISA/KWP,TDM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 6/10/04 4:44pm
"RTN","DGENUPL",2,0)
 ;;5.3;REGISTRATION;**147,222,232,363,472,497,564**;Aug 13,1993
"RTN","DGENUPL",3,0)
 ;Phase II Moved Z11 to DGENUPL7
"RTN","DGENUPL",4,0)
ORUZ11(MSGIEN,ERRCOUNT) ;
"RTN","DGENUPL",5,0)
 ;Description:  This procedure is used to process a batch of ORU~Z11
"RTN","DGENUPL",6,0)
 ;messages or a single ORU~Z11 message.The processing consists of
"RTN","DGENUPL",7,0)
 ;uploading the patient enrollment and eligibility data.
"RTN","DGENUPL",8,0)
 ;
"RTN","DGENUPL",9,0)
 ;Input:
"RTN","DGENUPL",10,0)
 ;  MSGIEN - the ien of the HL7 message in the HL7 MESSAGE TEXT file
"RTN","DGENUPL",11,0)
 ;Output:
"RTN","DGENUPL",12,0)
 ;  ERRCOUNT - count of messages that were not processed due to
"RTN","DGENUPL",13,0)
 ;    errors encountered  (pass by reference)
"RTN","DGENUPL",14,0)
 ;
"RTN","DGENUPL",15,0)
 N CURLINE,SSN,DOB,SEX,SEG,MSGID,SSN,DFN,ERRMSG,SEG
"RTN","DGENUPL",16,0)
 ;
"RTN","DGENUPL",17,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",18,0)
 ;
"RTN","DGENUPL",19,0)
 ;initialize HL7 variable
"RTN","DGENUPL",20,0)
 S HLSDT="IVMQ" ;location of error message
"RTN","DGENUPL",21,0)
 ;
"RTN","DGENUPL",22,0)
 S CURLINE=1
"RTN","DGENUPL",23,0)
 D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",24,0)
 Q:'CURLINE
"RTN","DGENUPL",25,0)
 F  Q:'CURLINE  D  D ADVANCE(MSGIEN,.CURLINE)
"RTN","DGENUPL",26,0)
 .D GETSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",27,0)
 .S MSGID=SEG(10)
"RTN","DGENUPL",28,0)
 .D NXTSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",29,0)
 .I SEG("TYPE")'="PID" D ADDERROR(MSGID,,"PID SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",30,0)
 .S DFN=$$LOOKUP^DGENPTA(SEG(19),$$FMDATE^HLFNC(SEG(7)),SEG(8),.ERRMSG)
"RTN","DGENUPL",31,0)
 .I 'DFN D ADDERROR(MSGID,SEG(19),ERRMSG,.ERRCOUNT) Q
"RTN","DGENUPL",32,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",33,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",34,0)
 M ^TMP("HLS",$J)=^TMP("IVM","HLS",$J)                     ;DG*5.3*472
"RTN","DGENUPL",35,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",36,0)
 Q
"RTN","DGENUPL",37,0)
 ;
"RTN","DGENUPL",38,0)
ORFZ11(MSGIEN,MSGID) ;
"RTN","DGENUPL",39,0)
 ;Description:  This procedure is used to process an ORF~Z11 message
"RTN","DGENUPL",40,0)
 ;It uploads the patient enrollment and eligibility data.
"RTN","DGENUPL",41,0)
 ;An acknowledgment is returned.
"RTN","DGENUPL",42,0)
 ;
"RTN","DGENUPL",43,0)
 ;Input:
"RTN","DGENUPL",44,0)
 ;  MSGIEN - the internal entry number of the HL7 message in the HL7 MESSAGE TEXT file (772)
"RTN","DGENUPL",45,0)
 ;  MSGID - the message control id from the MSH segment
"RTN","DGENUPL",46,0)
 ;
"RTN","DGENUPL",47,0)
 ;Output: none
"RTN","DGENUPL",48,0)
 ;
"RTN","DGENUPL",49,0)
 N CURLINE,DFN,QUERYIEN,QARRAY,QRYMSGID,ERRCOUNT,HECERROR,SEG,DGRESENT
"RTN","DGENUPL",50,0)
 ;CURLINE tracks current line in the message
"RTN","DGENUPL",51,0)
 ;QUERYIEN  the ien of query in the ENROLLMENT QUERY LOG
"RTN","DGENUPL",52,0)
 ;QRYMSGID  the Message Controll ID of the query
"RTN","DGENUPL",53,0)
 ;QARRAY  array containing the ENROLLMENT QUERY LOG record
"RTN","DGENUPL",54,0)
 ;HECERROR  error message returned by HEC in response to query
"RTN","DGENUPL",55,0)
 ;DGRESENT  flag=1 if query was resent
"RTN","DGENUPL",56,0)
 ;
"RTN","DGENUPL",57,0)
 S (QUERYIEN,ERRCOUNT)=0
"RTN","DGENUPL",58,0)
 ;
"RTN","DGENUPL",59,0)
 ;initialize HL7 variable
"RTN","DGENUPL",60,0)
 S HLSDT="IVMQ" ;subscript in ^TMP( global for ACK message
"RTN","DGENUPL",61,0)
 ;
"RTN","DGENUPL",62,0)
 K ^TMP("IVM","HLS",$J)
"RTN","DGENUPL",63,0)
 ;
"RTN","DGENUPL",64,0)
 S CURLINE=1
"RTN","DGENUPL",65,0)
 S HECERROR=""
"RTN","DGENUPL",66,0)
 ;
"RTN","DGENUPL",67,0)
 D  ;drops out on error
"RTN","DGENUPL",68,0)
 .D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",69,0)
 .I SEG("TYPE")'="MSA" D ADDERROR(MSGID,,"MISSING MSA SEGMENT",.ERRCOUNT) Q
"RTN","DGENUPL",70,0)
 .;trace the reply back to the query
"RTN","DGENUPL",71,0)
 .S QRYMSGID=SEG(2)
"RTN","DGENUPL",72,0)
 .S QUERYIEN=$$FINDMSG^DGENQRY(QRYMSGID)
"RTN","DGENUPL",73,0)
 .I 'QUERYIEN D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",74,0)
 .I QUERYIEN,'$$GET^DGENQRY(QUERYIEN,.QARRAY) D ADDERROR(MSGID,,"NO RECORD OF QUERY",.ERRCOUNT) Q
"RTN","DGENUPL",75,0)
 .S DFN=QARRAY("DFN")
"RTN","DGENUPL",76,0)
 .I (SEG(1)="AR")!(SEG(1)="AE") D  Q
"RTN","DGENUPL",77,0)
 ..;HEC was unable to reply to the query. If due to incorrect patient
"RTN","DGENUPL",78,0)
 ..;info, then resend the query, otherwise just log it as unsuccessful
"RTN","DGENUPL",79,0)
 ..N SSN,DOB,SEX,DGPAT,HECMSG
"RTN","DGENUPL",80,0)
 ..S HECMSG=SEG(3)
"RTN","DGENUPL",81,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",82,0)
 ..Q:(SEG("TYPE")'="QRD")
"RTN","DGENUPL",83,0)
 ..S SSN=SEG(8)
"RTN","DGENUPL",84,0)
 ..D NXTSEG(MSGIEN,.CURLINE,.SEG)
"RTN","DGENUPL",85,0)
 ..Q:(SEG("TYPE")'="QRF")
"RTN","DGENUPL",86,0)
 ..S DOB=$$FMDATE^HLFNC(SEG(4))
"RTN","DGENUPL",87,0)
 ..S SEX=SEG(5)
"RTN","DGENUPL",88,0)
 ..;if patient id info incorrect, resend the query
"RTN","DGENUPL",89,0)
 ..I $$GET^DGENPTA(DFN,.DGPAT),((DOB'=DGPAT("DOB"))!(SEX'=DGPAT("SEX"))!(SSN'=DGPAT("SSN"))) I $$RESEND^DGENQRY1(QUERYIEN) S DGRESENT=1 Q
"RTN","DGENUPL",90,0)
 ..S HECERROR="HEC UNABLE TO RESPOND TO QUERY- "_HECMSG Q
"RTN","DGENUPL",91,0)
 .;
"RTN","DGENUPL",92,0)
 .F SEG="QRD","QRF","PID" D NXTSEG(MSGIEN,.CURLINE,.SEG) I SEG("TYPE")'=SEG D ADDERROR(MSGID,,SEG_" SEGMENT MISSING",.ERRCOUNT) Q
"RTN","DGENUPL",93,0)
 .S CURLINE=CURLINE-1 ;should point to line before PID
"RTN","DGENUPL",94,0)
 .I $$SSN^DGENPTA(DFN)'=SEG(19) D ADDERROR(MSGID,,"SSN DOES NOT MATCH",.ERRCOUNT) Q
"RTN","DGENUPL",95,0)
 .D Z11^DGENUPL7(MSGIEN,MSGID,.CURLINE,DFN,.ERRCOUNT)
"RTN","DGENUPL",96,0)
 ;
"RTN","DGENUPL",97,0)
 ;update the query log
"RTN","DGENUPL",98,0)
 I $G(HECERROR)="",ERRCOUNT S HECERROR="UPLOAD FAILED DUE TO CONSISTENCY CHECKS"
"RTN","DGENUPL",99,0)
 I '$G(DGRESENT),$$RECEIVE^DGENQRY1(QUERYIEN,HECERROR,MSGID)
"RTN","DGENUPL",100,0)
 ;
"RTN","DGENUPL",101,0)
 S HLEVN=+$G(ERRCOUNT) ;# of events included in the reply
"RTN","DGENUPL",102,0)
 ;
"RTN","DGENUPL",103,0)
 ;if there was no error, create an 'AA' ack
"RTN","DGENUPL",104,0)
 ;I 'ERRCOUNT D ACCEPT^DGENUPL1(MSGID)                  ;DG*5.3*472
"RTN","DGENUPL",105,0)
 ;D MVERRORS^DGENUPL1                                   ;DG*5.3*472
"RTN","DGENUPL",106,0)
 ;transmit the ack
"RTN","DGENUPL",107,0)
 ;********************************************************
"RTN","DGENUPL",108,0)
 ;7.12.01;KSD; COMMENTED OUT. DON'T SEND ACK TO ORF
"RTN","DGENUPL",109,0)
 ;I $D(HLTRANS) S HLARYTYP="GB",HLFORMAT=1 D GENACK^HLMA1(HLEID,HLMTIENS,HLEIDS,HLARYTYP,HLFORMAT,.HLRESLTA,HLMTIEN)
"RTN","DGENUPL",110,0)
 ;
"RTN","DGENUPL",111,0)
 Q
"RTN","DGENUPL",112,0)
 ;
"RTN","DGENUPL",113,0)
ADDERROR(MSGID,SSN,ERRMSG,ERRCOUNT) ;
"RTN","DGENUPL",114,0)
 ;Description - writes an error message to a global. It will be
"RTN","DGENUPL",115,0)
 ;transmitted in the ack later.
"RTN","DGENUPL",116,0)
 ;
"RTN","DGENUPL",117,0)
 ;Inputs:
"RTN","DGENUPL",118,0)
 ;  MSGID -message control id of HL7 msg in the MSH segment
"RTN","DGENUPL",119,0)
 ;  SSN - patient social security number
"RTN","DGENUPL",120,0)
 ;  ERRMSG - the error message
"RTN","DGENUPL",121,0)
 ;  ERRCOUNT - count of errors written so far
"RTN","DGENUPL",122,0)
 ;
"RTN","DGENUPL",123,0)
 ;Outputs: none
"RTN","DGENUPL",124,0)
 ;
"RTN","DGENUPL",125,0)
 S ERRCOUNT=+$G(ERRCOUNT)
"RTN","DGENUPL",126,0)
 ;
"RTN","DGENUPL",127,0)
 I (ERRCOUNT*2)+1=1 D
"RTN","DGENUPL",128,0)
 . K HL,HLMID,HLMTIEN,HLDT,HLDT1
"RTN","DGENUPL",129,0)
 . D INIT^HLFNC2(HLEID,.HL)
"RTN","DGENUPL",130,0)
 . D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","DGENUPL",131,0)
 K HLRES
"RTN","DGENUPL",132,0)
 S MID=HLMID_"-"_((ERRCOUNT*2)+1)
"RTN","DGENUPL",133,0)
 D MSH^HLFNC2(.HL,MID,.HLRES)
"RTN","DGENUPL",134,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+1)=HLRES
"RTN","DGENUPL",135,0)
 S ^TMP("IVM","HLS",$J,(ERRCOUNT*2)+2)="MSA"_HLFS_"AE"_HLFS_MSGID_HLFS_ERRMSG_" - SSN "_$S($L($G(SSN)):SSN,1:"NOT FOUND")
"RTN","DGENUPL",136,0)
 S ERRCOUNT=ERRCOUNT+1
"RTN","DGENUPL",137,0)
 ;Put in error message in HECERROR to be included in the NOTIFY message for a solicited query
"RTN","DGENUPL",138,0)
 I $D(HECERROR) S HECERROR=ERRMSG
"RTN","DGENUPL",139,0)
 Q
"RTN","DGENUPL",140,0)
 ;
"RTN","DGENUPL",141,0)
NXTSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",142,0)
 ;Description: Returns the next segment
"RTN","DGENUPL",143,0)
 ;
"RTN","DGENUPL",144,0)
 ;Input:
"RTN","DGENUPL",145,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",146,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",147,0)
 ;
"RTN","DGENUPL",148,0)
 ;Output:
"RTN","DGENUPL",149,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",150,0)
 ;  CURLINE - upon exiting, will be the subscript of the next segment
"RTN","DGENUPL",151,0)
 ;
"RTN","DGENUPL",152,0)
 S CURLINE=CURLINE+1
"RTN","DGENUPL",153,0)
 D GETSEG(MSGIEN,CURLINE,.SEG)
"RTN","DGENUPL",154,0)
 Q
"RTN","DGENUPL",155,0)
 ;
"RTN","DGENUPL",156,0)
GETSEG(MSGIEN,CURLINE,SEG) ;
"RTN","DGENUPL",157,0)
 ;returns the current segment
"RTN","DGENUPL",158,0)
 ;
"RTN","DGENUPL",159,0)
 ;Input:
"RTN","DGENUPL",160,0)
 ;  MSGIEN - ien in HL7 MESSAGE TEXT file
"RTN","DGENUPL",161,0)
 ;  CURLINE - subscript of the current segment
"RTN","DGENUPL",162,0)
 ;
"RTN","DGENUPL",163,0)
 ;Output:
"RTN","DGENUPL",164,0)
 ;  SEG - an array with the fields of the segment (pass by reference)
"RTN","DGENUPL",165,0)
 ;
"RTN","DGENUPL",166,0)
 N SEGMENT,I
"RTN","DGENUPL",167,0)
 S:$G(HLFS)="" HLFS=$G(HL("FS")) S:HLFS="" HLFS="^"
"RTN","DGENUPL",168,0)
 S SEGMENT=$G(^TMP($J,IVMRTN,CURLINE,0))
"RTN","DGENUPL",169,0)
 S SEG("TYPE")=$E(SEGMENT,1,3)
"RTN","DGENUPL",170,0)
 ;
"RTN","DGENUPL",171,0)
 ;the MSH & BHS segs contain as their first piece the field separator, which makes breaKing the seqment into fields a bit different
"RTN","DGENUPL",172,0)
 I (SEG("TYPE")="MSH")!(SEG("TYPE")="BHS") D
"RTN","DGENUPL",173,0)
 .S SEG(1)=$E(SEGMENT,4)
"RTN","DGENUPL",174,0)
 .F I=2:1:30 S SEG(I)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",175,0)
 E  D
"RTN","DGENUPL",176,0)
 .F I=2:1:39 S SEG(I-1)=$P(SEGMENT,HLFS,I)
"RTN","DGENUPL",177,0)
 Q
"RTN","DGENUPL",178,0)
 ;
"RTN","DGENUPL",179,0)
ADVANCE(MSGIEN,CURLINE) ;
"RTN","DGENUPL",180,0)
 ;Description: Used to find the begining of the next message in the batch.
"RTN","DGENUPL",181,0)
 ;
"RTN","DGENUPL",182,0)
 ;Input:
"RTN","DGENUPL",183,0)
 ;  MSGIEN - ien of message in the HL7 MESSAGE TEXT file.
"RTN","DGENUPL",184,0)
 ;  CURLINE - current position in the message
"RTN","DGENUPL",185,0)
 ;Output:
"RTN","DGENUPL",186,0)
 ;  CURLINE - starting position of next message in the batch, or 0 if 
"RTN","DGENUPL",187,0)
 ;    the end of the message is reached
"RTN","DGENUPL",188,0)
 ;
"RTN","DGENUPL",189,0)
 Q:'CURLINE
"RTN","DGENUPL",190,0)
 F  S CURLINE=$O(^TMP($J,IVMRTN,CURLINE)) Q:'CURLINE  Q:$E($G(^TMP($J,IVMRTN,CURLINE,0)),1,3)="MSH"
"RTN","DGENUPL",191,0)
 S CURLINE=+CURLINE
"RTN","DGENUPL",192,0)
 Q
"RTN","DGENUPL9")
0^30^B7307554
"RTN","DGENUPL9",1,0)
DGENUPL9 ;ISA/KWP,JAN,BRM,PJR,LBD - CD CONSISTENCY CHECKS ; 9/16/03 2:54pm
"RTN","DGENUPL9",2,0)
 ;;5.3;REGISTRATION;**232,378,451,564**;Aug 13,1993
"RTN","DGENUPL9",3,0)
 ;
"RTN","DGENUPL9",4,0)
CDCHECK() ;
"RTN","DGENUPL9",5,0)
 ;Description: Does the consistency checks on the CATASTROPHIC DISABILITY objects.
"RTN","DGENUPL9",6,0)
 ;Input:
"RTN","DGENUPL9",7,0)
 ;  MSGS -Error messages
"RTN","DGENUPL9",8,0)
 ;  DGPAT -Patient array
"RTN","DGENUPL9",9,0)
 ;  MSGID -HL7 Message ID
"RTN","DGENUPL9",10,0)
 ;  OLDCDIS -CD array with data from file
"RTN","DGENUPL9",11,0)
 ;  DGCDIS -CD Array
"RTN","DGENUPL9",12,0)
 ;  ERRCOUNT -number of errors
"RTN","DGENUPL9",13,0)
 ;Output:
"RTN","DGENUPL9",14,0)
 ;  1 if consistency checks passed, 0 otherwise
"RTN","DGENUPL9",15,0)
 ;
"RTN","DGENUPL9",16,0)
 ; VistA Changes (DG*5.3*451) added CCs listed below in place of the
"RTN","DGENUPL9",17,0)
 ; previous Consistency Checks based on new business rules.
"RTN","DGENUPL9",18,0)
 ;
"RTN","DGENUPL9",19,0)
 N CDERR
"RTN","DGENUPL9",20,0)
 ; Reject CD update if required fields are missing
"RTN","DGENUPL9",21,0)
 I DGCDIS("VCD")="Y",'$$CHECK^DGENCDA1(.DGCDIS,.CDERR) D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: "_CDERR,.ERRCOUNT) Q 0
"RTN","DGENUPL9",22,0)
 ;
"RTN","DGENUPL9",23,0)
 ; If CD is Yes on VISTA and update is Yes and the current Date of
"RTN","DGENUPL9",24,0)
 ; Decision is more recent than the incoming one, reject update.
"RTN","DGENUPL9",25,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="Y",DGCDIS("DATE")<OLDCDIS("DATE") D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: Date of Decision is more recent at site",.ERRCOUNT) Q 0
"RTN","DGENUPL9",26,0)
 ;
"RTN","DGENUPL9",27,0)
 ; CD evaluation of 'NO' shall not overwrite a CD evaluation of
"RTN","DGENUPL9",28,0)
 ; 'YES' unless it is from the originating site.
"RTN","DGENUPL9",29,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="N",OLDCDIS("FACDET")'=DGCDIS("FACDET") Q 0  ;no error message when this occurs per bus. rules
"RTN","DGENUPL9",30,0)
 ;
"RTN","DGENUPL9",31,0)
 Q 1
"RTN","DGENUPL9",32,0)
AO ;Agent Orange Exp. Location - overflow code from MERGE^DGENUPL4
"RTN","DGENUPL9",33,0)
 I DGELG("AO")'="" D
"RTN","DGENUPL9",34,0)
 . I DGELG("AO")="Y",OLDELG("AOEXPLOC")="" D
"RTN","DGENUPL9",35,0)
 . . S DGELG3("AOEXPLOC")="V" D BULLETIN
"RTN","DGENUPL9",36,0)
 . I DGELG("AO")="N",OLDELG("AOEXPLOC")'="" D
"RTN","DGENUPL9",37,0)
 . . S DGELG3("AOEXPLOC")="@" D BULLETIN
"RTN","DGENUPL9",38,0)
 Q
"RTN","DGENUPL9",39,0)
BULLETIN ;Agent Orange Exposure Location Change
"RTN","DGENUPL9",40,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGENUPL9",41,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGENUPL9",42,0)
 Q:'DGMGRP
"RTN","DGENUPL9",43,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGENUPL9",44,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGENUPL9",45,0)
 S XMTEXT="DGBULL("
"RTN","DGENUPL9",46,0)
 S XMSUB="AGENT ORANGE EXPOSURE LOCATION CHANGE"
"RTN","DGENUPL9",47,0)
 S DGLINE=0
"RTN","DGENUPL9",48,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGENUPL9",49,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGENUPL9",50,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENUPL9",51,0)
 D LINE^DGEN("This veteran's Agent Orange Exposure Location has been changed.",.DGLINE)
"RTN","DGENUPL9",52,0)
 D LINE^DGEN("Contact the HEC by phone if you have questions or believe",.DGLINE)
"RTN","DGENUPL9",53,0)
 D LINE^DGEN("this information to be incorrect.",.DGLINE)
"RTN","DGENUPL9",54,0)
 D ^XMD
"RTN","DGENUPL9",55,0)
 Q
"RTN","DGENUPLA")
0^26^B29297682
"RTN","DGENUPLA",1,0)
DGENUPLA ;ALB/CKN,TDM,PJR,RGL - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 6/10/04 5:05pm
"RTN","DGENUPLA",2,0)
 ;;5.3;REGISTRATION;**397,379,497,451,564**;Aug 13,1993
"RTN","DGENUPLA",3,0)
 ;
"RTN","DGENUPLA",4,0)
 ;***************************************************************
"RTN","DGENUPLA",5,0)
 ; This routine was created because DGENUPL2 had reached it's
"RTN","DGENUPLA",6,0)
 ; maximum size, therefore no new code could not be added.  All
"RTN","DGENUPLA",7,0)
 ; code that existed in the ZEL and OBX tags of DGENUPL2 has
"RTN","DGENUPLA",8,0)
 ; been moved to the ZEL and OBX tags of DGENUPLA.  A line of code
"RTN","DGENUPLA",9,0)
 ; was placed in ZEL^DGENUPL2 to call ZEL^DGENUPLA.  A line of
"RTN","DGENUPLA",10,0)
 ; code was placed in OBX^DGENUPL2 to call OBX^DGENUPLA.
"RTN","DGENUPLA",11,0)
 ; Any routine that calls ZEL^DGENUPL2 or OBX^DGENUPL2 will not
"RTN","DGENUPLA",12,0)
 ; be affected by this change.
"RTN","DGENUPLA",13,0)
 ;***************************************************************
"RTN","DGENUPLA",14,0)
 ;
"RTN","DGENUPLA",15,0)
 ;***************************************************************
"RTN","DGENUPLA",16,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPLA",17,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPLA",18,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGNTR(),DGMST(),ERROR
"RTN","DGENUPLA",19,0)
 ;***************************************************************
"RTN","DGENUPLA",20,0)
 ;
"RTN","DGENUPLA",21,0)
 ;
"RTN","DGENUPLA",22,0)
ZEL(COUNT) ;
"RTN","DGENUPLA",23,0)
 N CODE
"RTN","DGENUPLA",24,0)
 S CODE=$$CONVERT^DGENUPL1(SEG(2),"ELIGIBILITY",.ERROR)
"RTN","DGENUPLA",25,0)
 I ERROR D  Q
"RTN","DGENUPLA",26,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ELIGIBILITY CODE "_SEG(2)_" NOT FOUND IN ELIGIBILTIY CODE FILE",.ERRCOUNT)
"RTN","DGENUPLA",27,0)
 I COUNT=1 D
"RTN","DGENUPLA",28,0)
 .S DGELG("ELIG","CODE")=CODE
"RTN","DGENUPLA",29,0)
 .S DGELG("DISRET")=$$CONVERT^DGENUPL1(SEG(5))
"RTN","DGENUPLA",30,0)
 .S DGELG("CLAIMNUM")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPLA",31,0)
 .;
"RTN","DGENUPLA",32,0)
 .;** removed **
"RTN","DGENUPLA",33,0)
 .;S DGELG("CLAIMLOC")=$$CONVERT^DGENUPL1(SEG(7))
"RTN","DGENUPLA",34,0)
 .;
"RTN","DGENUPLA",35,0)
 .S DGPAT("VETERAN")=$$CONVERT^DGENUPL1(SEG(8),"Y/N",.ERROR)
"RTN","DGENUPLA",36,0)
 .I ERROR D  Q
"RTN","DGENUPLA",37,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPLA",38,0)
 .S DGELG("ELIGSTA")=$$CONVERT^DGENUPL1(SEG(10))
"RTN","DGENUPLA",39,0)
 .S DGELG("ELIGSTADATE")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPLA",40,0)
 .I ERROR D  Q
"RTN","DGENUPLA",41,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPLA",42,0)
 .S DGELG("ELIGVERIF")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPLA",43,0)
 .S DGELG("A&A")=$$CONVERT^DGENUPL1(SEG(14),"Y/N",.ERROR)
"RTN","DGENUPLA",44,0)
 .I ERROR D  Q
"RTN","DGENUPLA",45,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 14",.ERRCOUNT)
"RTN","DGENUPLA",46,0)
 .S DGELG("HB")=$$CONVERT^DGENUPL1(SEG(15),"Y/N",.ERROR)
"RTN","DGENUPLA",47,0)
 .I ERROR D  Q
"RTN","DGENUPLA",48,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 15",.ERRCOUNT)
"RTN","DGENUPLA",49,0)
 .S DGELG("VAPEN")=$$CONVERT^DGENUPL1(SEG(16),"Y/N",.ERROR)
"RTN","DGENUPLA",50,0)
 .I ERROR D  Q
"RTN","DGENUPLA",51,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 16",.ERRCOUNT)
"RTN","DGENUPLA",52,0)
 .S DGELG("VADISAB")=$$CONVERT^DGENUPL1(SEG(17),"Y/N",.ERROR)
"RTN","DGENUPLA",53,0)
 .I ERROR D  Q
"RTN","DGENUPLA",54,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 17",.ERRCOUNT)
"RTN","DGENUPLA",55,0)
 .S DGELG("AO")=$$CONVERT^DGENUPL1(SEG(18),"Y/N",.ERROR)
"RTN","DGENUPLA",56,0)
 .N AOERR S AOERR=ERROR            ;  See SEG(29) below.
"RTN","DGENUPLA",57,0)
 .I ERROR D  Q
"RTN","DGENUPLA",58,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 18",.ERRCOUNT)
"RTN","DGENUPLA",59,0)
 .S DGELG("IR")=$$CONVERT^DGENUPL1(SEG(19),"Y/N",.ERROR)
"RTN","DGENUPLA",60,0)
 .I ERROR D  Q
"RTN","DGENUPLA",61,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 19",.ERRCOUNT)
"RTN","DGENUPLA",62,0)
 .S DGELG("EC")=$$CONVERT^DGENUPL1(SEG(20),"Y/N",.ERROR)
"RTN","DGENUPLA",63,0)
 .I ERROR D  Q
"RTN","DGENUPLA",64,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 20",.ERROR)
"RTN","DGENUPLA",65,0)
 .;
"RTN","DGENUPLA",66,0)
 .S DGELG("VACKAMT")=$$CONVERT^DGENUPL1(SEG(21))
"RTN","DGENUPLA",67,0)
 .;
"RTN","DGENUPLA",68,0)
 .;Parse MST data into DGMST array from sequences 23, 24, 25 of ZEL segment
"RTN","DGENUPLA",69,0)
 . S DGMST("MSTSTAT")=SEG(23)
"RTN","DGENUPLA",70,0)
 . S DGMST("MSTDT")=$$CONVERT^DGENUPL1(SEG(24),"TS",.ERROR)
"RTN","DGENUPLA",71,0)
 . I ERROR D  Q
"RTN","DGENUPLA",72,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 24",.ERROR)
"RTN","DGENUPLA",73,0)
 . S DGMST("MSTST")=$$CONVERT^DGENUPL1(SEG(25),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",74,0)
 . I ERROR D  Q
"RTN","DGENUPLA",75,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 25",.ERROR)
"RTN","DGENUPLA",76,0)
 .;
"RTN","DGENUPLA",77,0)
 . S DGELG("AOEXPLOC")=SEG(29)
"RTN","DGENUPLA",78,0)
 .; Logic enhanced during SQA of patch 451.  AOERR from SEG(18) above.
"RTN","DGENUPLA",79,0)
 . I 'AOERR,DGELG("AO")'="Y",DGELG("AOEXPLOC")="" S DGELG("AOEXPLOC")="@"
"RTN","DGENUPLA",80,0)
 . S DGELG("UEYEAR")=$$CONVERT^DGENUPL1(SEG(34),"DATE",.ERROR)
"RTN","DGENUPLA",81,0)
 . I ERROR D  Q
"RTN","DGENUPLA",82,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 34",.ERRCOUNT)
"RTN","DGENUPLA",83,0)
 . S DGELG("UESITE")=$$CONVERT^DGENUPL1(SEG(35),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",84,0)
 . I ERROR D  Q
"RTN","DGENUPLA",85,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 35",.ERRCOUNT)
"RTN","DGENUPLA",86,0)
 . S DGELG("CVELEDT")=$$CONVERT^DGENUPL1(SEG(38),"DATE",.ERROR)
"RTN","DGENUPLA",87,0)
 . I ERROR D  Q
"RTN","DGENUPLA",88,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 38",.ERRCOUNT)
"RTN","DGENUPLA",89,0)
 ;
"RTN","DGENUPLA",90,0)
 I COUNT>1 D
"RTN","DGENUPLA",91,0)
 .S DGELG("ELIG","CODE",CODE)=""
"RTN","DGENUPLA",92,0)
 Q
"RTN","DGENUPLA",93,0)
 ;
"RTN","DGENUPLA",94,0)
OBX ;
"RTN","DGENUPLA",95,0)
 N OBXPCE,OBXVAL,OBXTBL,I,CS,SS,RS
"RTN","DGENUPLA",96,0)
 I $G(HLECH)'="~|\&" N HLECH S HLECH="~|\&"
"RTN","DGENUPLA",97,0)
 I $G(HLFS)="" N HLFS S HLFS="^"
"RTN","DGENUPLA",98,0)
 S CS=$E(HLECH,1),SS=$E(HLECH,4),RS=$E(HLECH,2)
"RTN","DGENUPLA",99,0)
 I $G(SEG(3))=("38.1"_$E(HLECH)_"SECURITY LOG") D
"RTN","DGENUPLA",100,0)
 . N LEVEL
"RTN","DGENUPLA",101,0)
 . S LEVEL=$P(SEG(5),$E(HLECH))
"RTN","DGENUPLA",102,0)
 . S DGSEC("LEVEL")=$$CONVERT^DGENUPL1(LEVEL,"1/0",.ERROR)
"RTN","DGENUPLA",103,0)
 . I ERROR D  Q
"RTN","DGENUPLA",104,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, OBX SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPLA",105,0)
 . S DGSEC("SOURCE")=$$CONVERT^DGENUPL1(SEG(16))
"RTN","DGENUPLA",106,0)
 ;
"RTN","DGENUPLA",107,0)
 I $G(SEG(3))=("VISTA"_CS_"28.11") D
"RTN","DGENUPLA",108,0)
 . S OBXTBL(1)="NTR^Y",OBXTBL(2)="AVI^Y",OBXTBL(3)="SUB^Y"
"RTN","DGENUPLA",109,0)
 . S OBXTBL(4)="HNC^Y",OBXTBL(5)="NTR^N",OBXTBL(6)="AVI^N"
"RTN","DGENUPLA",110,0)
 . S OBXTBL(7)="SUB^N",OBXTBL(8)="HNC^N",OBXTBL(9)="NTR^U"
"RTN","DGENUPLA",111,0)
 . F I=1:1:$L($G(SEG(5)),RS) D
"RTN","DGENUPLA",112,0)
 . . S OBXPCE=$P($G(SEG(5)),RS,I),OBXVAL=$P($G(OBXPCE),CS)
"RTN","DGENUPLA",113,0)
 . . S DGNTR($P($G(OBXTBL(OBXVAL)),"^"))=$P($G(OBXTBL(OBXVAL)),"^",2)
"RTN","DGENUPLA",114,0)
 . I $G(SEG(12))'="" S DGNTR("HDT")=$$CONVERT^DGENUPL1(SEG(12),"TS",.ERROR)
"RTN","DGENUPLA",115,0)
 . S DGNTR("VDT")=$$CONVERT^DGENUPL1(SEG(14),"TS",.ERROR)
"RTN","DGENUPLA",116,0)
 . S DGNTR("VSIT")=$$CONVERT^DGENUPL1(SEG(15),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",117,0)
 . S DGNTR("HSIT")=$P($P($G(SEG(16)),CS,14),SS,2)
"RTN","DGENUPLA",118,0)
 . I DGNTR("HSIT")'="" S DGNTR("HSIT")=$$CONVERT^DGENUPL1($G(DGNTR("HSIT")),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",119,0)
 . S DGNTR("VER")=$P($G(SEG(17)),CS)
"RTN","DGENUPLA",120,0)
 Q
"RTN","DGMTA")
0^19^B35275824
"RTN","DGMTA",1,0)
DGMTA ;ALB/RMO/CAW/LD/SCG/AEG/PHH - Add a New Means Test ; 07/06/2004
"RTN","DGMTA",2,0)
 ;;5.3;Registration;**33,45,137,166,177,182,290,344,332,433,458,535,612,564**;Aug 13, 1993
"RTN","DGMTA",3,0)
 ;
"RTN","DGMTA",4,0)
EN ;Entry point to add a new means test
"RTN","DGMTA",5,0)
 N DGMDOD S DGMDOD=""
"RTN","DGMTA",6,0)
 S DGADDF=1
"RTN","DGMTA",7,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",8,0)
 S DIC="^DPT(",DIC(0)="AEMQ" W ! D ^DIC K DIC G Q:Y<0 S (DFN,DGMTDFN)=+Y
"RTN","DGMTA",9,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S DGMDOD=$P(^DPT(DFN,.35),U)
"RTN","DGMTA",10,0)
 I $G(DGMDOD) W !,"Patient died on: ",$$FMTE^XLFDT(DGMDOD,"1D") Q
"RTN","DGMTA",11,0)
 ;
"RTN","DGMTA",12,0)
 ; check if income test in progress
"RTN","DGMTA",13,0)
 D CKUPLOAD^IVMCUPL(DFN)
"RTN","DGMTA",14,0)
 ;
"RTN","DGMTA",15,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",16,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTA",17,0)
 ;
"RTN","DGMTA",18,0)
 I DGMTYPT=1 N DGDOM1 D EN^DGMTR I 'DGREQF,'$G(DGDOM1) W !,*7,"A means test can only be added for patients who require one.",! K DGDOM1 G EN
"RTN","DGMTA",19,0)
 ;
"RTN","DGMTA",20,0)
 N FUTMT S FUTMT=$$FUT^DGMTU(DFN,"",DGMTYPT) I FUTMT D FTST G EN
"RTN","DGMTA",21,0)
 ;
"RTN","DGMTA",22,0)
 ;if a test was auto-completed, DGADDF gets set to 0
"RTN","DGMTA",23,0)
 I 'DGADDF W !!,*7,"A means test already exists and is in effect" G EN
"RTN","DGMTA",24,0)
 ;
"RTN","DGMTA",25,0)
 K:DGMTYPT=1 DGDOM1
"RTN","DGMTA",26,0)
 I DGMTYPT=2 D EN^DGMTCOR I 'DGMTCOR S I=$P($T(WHY+DGWRT),";",3,99) W !!,*7,"A copay exemption test can only be added for applicable veterans.",!,I G EN
"RTN","DGMTA",27,0)
 S DGLDT=$$LST^DGMTU(DFN,"",DGMTYPT),DGLD=$P(DGLDT,U,2),DGLDYR=$E(DGLD,1,3)_"1231"
"RTN","DGMTA",28,0)
 ;
"RTN","DGMTA",29,0)
DT S %DT("A")="DATE OF TEST: ",%DT="AEX",%DT(0)="-NOW",%DT("B")="NOW" W ! D ^%DT K %DT G Q:Y<0 S DGMTDT=Y
"RTN","DGMTA",30,0)
 I DGMTDT<$S(DGMTYPT=1:2860701,1:2921029) W !?3,*7,"The date of test cannot be before "_$S(DGMTYPT=1:"7/1/1986.",1:"10/29/1992.") G DT
"RTN","DGMTA",31,0)
 I DGLD,DGMTDT<DGLD W !?3,*7,"The date of test cannot be before the last date of test on " S Y=DGLD X ^DD("DD") W Y,"." G DT
"RTN","DGMTA",32,0)
 I DGLD S X1=DGMTDT,X2=DGLD D ^%DTC I X<365,DGMTDT'>DGLDYR D  G EN
"RTN","DGMTA",33,0)
 .W !?3,*7,"An annual date of test already exists on " S Y=DGLD X ^DD("DD") W Y,"."
"RTN","DGMTA",34,0)
 .S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",35,0)
 .W !,$S($P($G(^DG(408.34,+$P($G(^DGMT(408.31,+DGLDT,0)),U,23),0)),U)="VAMC":"   Use the 'Edit an Existing "_DGTTYP_"Test' Option.",1:"   Use the 'View a Past Means Test' Option.")
"RTN","DGMTA",36,0)
 ;
"RTN","DGMTA",37,0)
 ;Means Test cannot be added for patient on a DOM ward on date of test
"RTN","DGMTA",38,0)
 I DGMTYPT=2 G PRINT
"RTN","DGMTA",39,0)
 N VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",40,0)
 S VAINDT=DGMTDT
"RTN","DGMTA",41,0)
 D DOM1^DGMTR I $G(DGDOM1) D  K VAINDT,VADMVT,DGDOM,DGDOM1 G EN
"RTN","DGMTA",42,0)
 .W !,*7,"A Means Test cannot be added for patients on a DOM ward on date of test.",!
"RTN","DGMTA",43,0)
 K VAINDT,VADMVT,DGDOM,DGDOM1
"RTN","DGMTA",44,0)
 ;
"RTN","DGMTA",45,0)
 ;A warning message is displayed if last means test for patient is
"RTN","DGMTA",46,0)
 ;from a prior year and has a status of required.  The user is given
"RTN","DGMTA",47,0)
 ;the option to continue or stop adding a new means test.
"RTN","DGMTA",48,0)
 N %
"RTN","DGMTA",49,0)
 I DGLD,DGMTDT>DGLDYR,$P(DGLDT,"^",4)="R" D  Q:%=-1  I %=2 K % G EN
"RTN","DGMTA",50,0)
 .W !?3,*7,"WARNING - last means test on " S Y=DGLD X ^DD("DD") W Y," has a status of required."
"RTN","DGMTA",51,0)
DT2 .W !?3,"Do you still want to continue adding new test"
"RTN","DGMTA",52,0)
 .S %=2 D YN^DICN
"RTN","DGMTA",53,0)
 .I %=0 W !?3,"Answer 'Y'es to continue adding new test." G DT2
"RTN","DGMTA",54,0)
 .Q 
"RTN","DGMTA",55,0)
 K %
"RTN","DGMTA",56,0)
 ;
"RTN","DGMTA",57,0)
PRINT I "^P^A^C^G^"[(U_$P(DGLDT,U,4)_U) S %=1 W !,"Do you wish to print the prior means test" D YN^DICN G:%=-1 Q I %Y["?" W !!,"This will print the prior means test information.",! G PRINT
"RTN","DGMTA",58,0)
 I $G(%)=1 S DGX=DGMTDT,DGMTDT=DGLD,DGMTI=+DGLDT,DGOPT="" D DEV^DGMTP,CLOSE^DGUTQ S DGMTDT=DGX K DGX
"RTN","DGMTA",59,0)
 D ADD G EN:DGMTI<0
"RTN","DGMTA",60,0)
 S DGMTACT="ADD",DGMTROU="EN^DGMTA" G EN^DGMTSC
"RTN","DGMTA",61,0)
 ;
"RTN","DGMTA",62,0)
Q K DA,DFN,DGADDF,DGBL,DGFL,DGFLD,DGIRO,DGLD,DGLDT,DGLDYR,DGMTACT,DGMTCOR,DGMTDT,DGMTI,DGMTROU,DGREQF,DGTTYP,DGMTYPT,DGVI,DGVO,X,X1,X2,Y
"RTN","DGMTA",63,0)
 ;
"RTN","DGMTA",64,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",65,0)
 I $D(DGMTDFN)#2 D UNLOCK^DGMTUTL(DGMTDFN) K DGMTDFN
"RTN","DGMTA",66,0)
 Q
"RTN","DGMTA",67,0)
 ;
"RTN","DGMTA",68,0)
ADD ;Add means test
"RTN","DGMTA",69,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTA",70,0)
 ;           DGMTDT  Date
"RTN","DGMTA",71,0)
 ;           DGMTYPT Type of Test 1=MT 2=COPAY 4=LTC
"RTN","DGMTA",72,0)
 ; Output -- DGMTI   Annual Means/Copay/LTC Test IEN
"RTN","DGMTA",73,0)
 N DA,DD,DIC,DIK,DINUM,DLAYGO,DO,DS,X,D0,DGSITE
"RTN","DGMTA",74,0)
 ;
"RTN","DGMTA",75,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",76,0)
 I $$LOCK^DGMTUTL(DFN) E  Q
"RTN","DGMTA",77,0)
 ;
"RTN","DGMTA",78,0)
 ; Check for Linked test and don't loose the link.
"RTN","DGMTA",79,0)
 S LINK="",CURIEN=+$$LST^DGMTU(DFN,DGMTDT,DGMTYPT)
"RTN","DGMTA",80,0)
 I CURIEN S LINK=$P($G(^DGMT(408.31,CURIEN,2)),U,6)
"RTN","DGMTA",81,0)
 ;
"RTN","DGMTA",82,0)
 S DGSITE=$$GETSITE^DGMTU4(.DUZ)
"RTN","DGMTA",83,0)
 S X=DGMTDT,(DIC,DIK)="^DGMT(408.31,",DIC(0)="L",DLAYGO=408.31
"RTN","DGMTA",84,0)
 ;
"RTN","DGMTA",85,0)
 ; The DIC("DR") string is built in this specific order so that
"RTN","DGMTA",86,0)
 ; all triggers and "M" x-refs fire correctly.  Should not be
"RTN","DGMTA",87,0)
 ; modified without an in-depth review of DD of file #408.31.
"RTN","DGMTA",88,0)
 ;
"RTN","DGMTA",89,0)
 I DGMTYPT=2 D
"RTN","DGMTA",90,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",91,0)
 .S DIC("DR")=DIC("DR")_";.02////"_DFN_";.019////"_DGMTYPT_";.23////1"
"RTN","DGMTA",92,0)
 E  D
"RTN","DGMTA",93,0)
 .S DIC("DR")="2////"_(DGMTYPT'=4)_";2.05////"_DGSITE_";2.06////"_LINK
"RTN","DGMTA",94,0)
 .S DIC("DR")=DIC("DR")_";.019////"_DGMTYPT_";.02////"_DFN_";.23////1"
"RTN","DGMTA",95,0)
 K DD,DO
"RTN","DGMTA",96,0)
 D FILE^DICN S DGMTI=+Y
"RTN","DGMTA",97,0)
 ;
"RTN","DGMTA",98,0)
 ; release lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTA",99,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTA",100,0)
 ;
"RTN","DGMTA",101,0)
ADDQ Q
"RTN","DGMTA",102,0)
 ;
"RTN","DGMTA",103,0)
FTST ; Build message for future tests that are added to the system, but
"RTN","DGMTA",104,0)
 ; were not performed by the VAMC trying to add a new MT.
"RTN","DGMTA",105,0)
 N SITE,DGMTYPT,DGTTYP,SRC,SCT
"RTN","DGMTA",106,0)
 S SCT=$P(^DGMT(408.31,+FUTMT,2),U,5),SITE=$$INST^DGENU()
"RTN","DGMTA",107,0)
 S DGMTYPT=$P(^DGMT(408.31,+FUTMT,0),U,19)
"RTN","DGMTA",108,0)
 S DGTTYP=$S(DGMTYPT=1:"Means ",1:"Copay Exemption ")
"RTN","DGMTA",109,0)
 W !?3,*7,"A future test already exists on "
"RTN","DGMTA",110,0)
 S Y=$P(FUTMT,U,2) X ^DD("DD") W Y,"."
"RTN","DGMTA",111,0)
 ; This site performed the MT
"RTN","DGMTA",112,0)
 I SITE=SCT D
"RTN","DGMTA",113,0)
 .W !?3,"Use the 'Edit an Existing "_DGTTYP_"Test' Option."
"RTN","DGMTA",114,0)
 ;
"RTN","DGMTA",115,0)
 ; The MT was added by another VAMC
"RTN","DGMTA",116,0)
 I SITE'=SCT D
"RTN","DGMTA",117,0)
 .S SRC=$P(FUTMT,U,5)
"RTN","DGMTA",118,0)
 .I SCT W !?3,"The "_DGTTYP_"Test was conducted at Site: ",SCT
"RTN","DGMTA",119,0)
 .W !?3,"Please contact "
"RTN","DGMTA",120,0)
 .W $S($D(^DIC(4,+SCT,0)):$P(^DIC(4,+SCT,0),U),SRC=2:"IVM",SRC=3:"the HEC",1:"the site")
"RTN","DGMTA",121,0)
 .W ",",!?3,"if it is necessary to edit the test."
"RTN","DGMTA",122,0)
 Q
"RTN","DGMTA",123,0)
WHY ;Why Copay Test cannot be added
"RTN","DGMTA",124,0)
 ;;Patient is not a veteran.
"RTN","DGMTA",125,0)
 ;;Patient does not have a Primary Eligibility Code.
"RTN","DGMTA",126,0)
 ;;Patient is Service Connected 50-100%.
"RTN","DGMTA",127,0)
 ;;Means Test options must be used instead of Copay options.
"RTN","DGMTA",128,0)
 ;;Patient is receiving Aid and Attendance, automatically exempted.
"RTN","DGMTA",129,0)
 ;;Patient is receiving Housebound Benefits, automatically exempted.
"RTN","DGMTA",130,0)
 ;;Patient is receiving a VA Pension, automatically exempted.
"RTN","DGMTA",131,0)
 ;;Patient is in a DOM ward, automatically exempted.
"RTN","DGMTA",132,0)
 ;;Patient is an inpatient, automatically exempted.
"RTN","DGMTA",133,0)
 ;;Patient was a POW, automatically exempted.
"RTN","DGMTA",134,0)
 ;;Patient is Unemployable, automatically exempted.
"RTN","DGMTCOR")
0^20^B28396316
"RTN","DGMTCOR",1,0)
DGMTCOR ;ALB/CAW,SCG,LBD - Check Copay Test Requirements ; 03/03/03 8:15am
"RTN","DGMTCOR",2,0)
 ;;5.3;Registration;**21,45,182,290,305,330,344,495,564**;Aug 13, 1993
"RTN","DGMTCOR",3,0)
 ;
"RTN","DGMTCOR",4,0)
 ;A patient may apply for a copay test under the following conditions:
"RTN","DGMTCOR",5,0)
 ;  - Applicant is a veteran
"RTN","DGMTCOR",6,0)
 ;  - Applicant's primary or other eligibility does NOT contain
"RTN","DGMTCOR",7,0)
 ;    - Service Connected 50% to 100% or
"RTN","DGMTCOR",8,0)
 ;    - Aid and Attendance or
"RTN","DGMTCOR",9,0)
 ;    - Housebound or
"RTN","DGMTCOR",10,0)
 ;    - VA Pension
"RTN","DGMTCOR",11,0)
 ;  - Primary Eligibility is NSC
"RTN","DGMTCOR",12,0)
 ;    - who has NOT been means tested
"RTN","DGMTCOR",13,0)
 ;    - who claims exposure to agent orange or ionizing radiation
"RTN","DGMTCOR",14,0)
 ;    - who is eligible for medicaid
"RTN","DGMTCOR",15,0)
 ;  - Applicants who have answered 'no' to Receiving A&A, HB, or Pension
"RTN","DGMTCOR",16,0)
 ;  - Applicants who have previously qualified and applied for a copay 
"RTN","DGMTCOR",17,0)
 ;      exemption, still qualify and have NOT been copay tested in the
"RTN","DGMTCOR",18,0)
 ;      past year
"RTN","DGMTCOR",19,0)
 ;  - Applicants who are not currently a DOM patient or inpatient
"RTN","DGMTCOR",20,0)
 ;      (they are temporarily exempt from copay testing) DG*5.3*290
"RTN","DGMTCOR",21,0)
 ;  - Applicants who do not have POW eligibility (DG*5.3*564 - HVE III)
"RTN","DGMTCOR",22,0)
 ;  - Applicants who do not meet criteria for Unemployable: 
"RTN","DGMTCOR",23,0)
 ;      Unemployable="Y", SC%>0, not receiving A&A, HB or Pension, and
"RTN","DGMTCOR",24,0)
 ;      Total VA Check Amount>0  (DG*5.3*564 - HVE III) 
"RTN","DGMTCOR",25,0)
 ;
"RTN","DGMTCOR",26,0)
 ; Input  -- DFN     Patient IEN
"RTN","DGMTCOR",27,0)
 ;           DGADDF  Means Test Add Flag (optional)
"RTN","DGMTCOR",28,0)
 ; Output -- DGMTCOR  Copay Test Flag
"RTN","DGMTCOR",29,0)
 ;                   (1 if eligible and 0 if not eligible)
"RTN","DGMTCOR",30,0)
 ;
"RTN","DGMTCOR",31,0)
 ;
"RTN","DGMTCOR",32,0)
EN ;
"RTN","DGMTCOR",33,0)
 Q:$G(VAFCA08)=1
"RTN","DGMTCOR",34,0)
 N DGMTI,DGMTYPT,DGMDOD
"RTN","DGMTCOR",35,0)
 D ON^DGMTCOU G:'Y ENQ
"RTN","DGMTCOR",36,0)
 S DGRGAUTO=1 ;possible change in cp status w/o call to cp event driver
"RTN","DGMTCOR",37,0)
 D CHK
"RTN","DGMTCOR",38,0)
 ;
"RTN","DGMTCOR",39,0)
 Q:($G(DGWRT)=8)!($G(DGWRT)=9)   ;brm;quit if inpatient or dom;DG*5.3*290
"RTN","DGMTCOR",40,0)
 S IVMZ10F=+$G(IVMZ10F)
"RTN","DGMTCOR",41,0)
 I 'DGMTCOR,'$G(DGADDF),'$G(DGMDOD),'IVMZ10F D NLA
"RTN","DGMTCOR",42,0)
 I DGMTCOR,'$G(DGADDF),'$G(DGMDOD) D INC
"RTN","DGMTCOR",43,0)
 I DGRGAUTO&'$G(DGADDF) D QREGAUTO ;if cp event driver not fired off & NOT a new means test
"RTN","DGMTCOR",44,0)
 ;
"RTN","DGMTCOR",45,0)
ENQ Q
"RTN","DGMTCOR",46,0)
 ;
"RTN","DGMTCOR",47,0)
CHK N STATUS,DGELIG,DGE,DGI,DGNODE,DGMDOD,DGMTDT,DGMTI,DGMTL
"RTN","DGMTCOR",48,0)
 S DGMTCOR=1,DGMT="",DGMTYPT=2
"RTN","DGMTCOR",49,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S DGMTCOR=0,DGWRT=1 G CHKQ ;NON-VET
"RTN","DGMTCOR",50,0)
 ;Added with DG*5.3*344
"RTN","DGMTCOR",51,0)
 S DGMTL=$$LST^DGMTU(DFN),DGMTI=+DGMTL,DGMTDT=$P(DGMTL,U,2)
"RTN","DGMTCOR",52,0)
 S DGMDOD=$P($G(^DPT(DFN,.35)),U)
"RTN","DGMTCOR",53,0)
 I 'DGMTI,$G(DGMDOD) S DGMTCOR=0 Q
"RTN","DGMTCOR",54,0)
 I DGMDOD,(DGMTCOR),(DGMTDT>(DGMDOD-1)) S DGMTCOR=0 G CHKQ
"RTN","DGMTCOR",55,0)
 ;
"RTN","DGMTCOR",56,0)
 I '$P($G(^DPT(DFN,.36)),U) S DGMTCOR=0,DGWRT=2 G CHKQ  ;NO PRIM ELIG
"RTN","DGMTCOR",57,0)
 I +$G(DGMDOD) S DGNOCOPF=1
"RTN","DGMTCOR",58,0)
 ;
"RTN","DGMTCOR",59,0)
 ;This doesn't work! The "AEL" x-ref not there when changing the primary
"RTN","DGMTCOR",60,0)
 ;eligibility! Problem with order that the cross-references are called
"RTN","DGMTCOR",61,0)
 ;in, DGMTR is called before the "AEL" x-ref is set!
"RTN","DGMTCOR",62,0)
 ;F  S DGMTI=$O(^DPT("AEL",DFN,DGMTI)) Q:'DGMTI  S DGMTE=$P($G(^DIC(8,DGMTI,0)),U,9) I "^1^2^4^15^"[("^"_DGMTE_"^") S DGMTCOR=0,DGWRT=3 G CHKQ
"RTN","DGMTCOR",63,0)
 ;
"RTN","DGMTCOR",64,0)
 ;
"RTN","DGMTCOR",65,0)
 S DGI=$P($G(^DPT(DFN,.36)),"^"),DGELIG=U_$P($G(^DIC(8,+DGI,0)),U,9)_U
"RTN","DGMTCOR",66,0)
 S DGI=0 F  S DGI=$O(^DPT(DFN,"E",DGI)) Q:'DGI  S DGE=$P($G(^DPT(DFN,"E",DGI,0)),U),DGELIG=DGELIG_$P($G(^DIC(8,+DGE,0)),U,9)_U
"RTN","DGMTCOR",67,0)
 I (DGELIG["^1^") S DGMTCOR=0,DGWRT=3 G CHKQ  ;SC 50-100%
"RTN","DGMTCOR",68,0)
 F DGI=.3,.362,.52 S DGNODE(DGI)=$G(^DPT(DFN,DGI))
"RTN","DGMTCOR",69,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGELIG["^2^") S DGMTCOR=0,DGWRT=5 G CHKQ ;A&A
"RTN","DGMTCOR",70,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGELIG["^15^") S DGMTCOR=0,DGWRT=6 G CHKQ ;HB
"RTN","DGMTCOR",71,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGELIG["^4^") S DGMTCOR=0,DGWRT=7 G CHKQ ;PENSION
"RTN","DGMTCOR",72,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGELIG["^18^") S DGMTCOR=0,DGWRT=10 G CHKQ ;POW (DG*5.3*564)
"RTN","DGMTCOR",73,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S DGMTCOR=0,DGWRT=11 G CHKQ ;UNEMPLOYABLE (DG*5.3*564)
"RTN","DGMTCOR",74,0)
 ;brm added next 3 lines for DG*5.3*290
"RTN","DGMTCOR",75,0)
 N DGDOM,DGDOM1,VAHOW,VAROOT,VAINDT,VAIP,VAERR,NOW
"RTN","DGMTCOR",76,0)
 D DOM^DGMTR I $G(DGDOM) S DGMTCOR=0,DGRGAUTO=0,DGWRT=8 Q        ;DOM
"RTN","DGMTCOR",77,0)
 D IN5^VADPT I $G(VAIP(1))'="" S DGMTCOR=0,DGRGAUTO=0,DGWRT=9 Q  ;INP
"RTN","DGMTCOR",78,0)
 I DGMTI,'$$OLD^DGMTU4(DGMTDT) S STATUS=$P($G(^DGMT(408.31,+DGMTI,0)),U,3) I STATUS'="3" S DGMTCOR=0,DGWRT=4 G CHKQ
"RTN","DGMTCOR",79,0)
CHKQ Q
"RTN","DGMTCOR",80,0)
 ;
"RTN","DGMTCOR",81,0)
NLA ; Change Status to NO LONGER APPLICABLE - if appropriate
"RTN","DGMTCOR",82,0)
 ;
"RTN","DGMTCOR",83,0)
 N DGCS,DGMTI,DGMT0,DGINI,DGINR,DGVAL,DGFL,DGFLD,DGIEN,DGMTACT,TDATE
"RTN","DGMTCOR",84,0)
 S DGMTI=+$$LST^DGMTU(DFN,"",2) Q:'DGMTI!($P($G(^DGMT(408.31,DGMTI,0)),U,3)=10)
"RTN","DGMTCOR",85,0)
 S DGMT0=$G(^DGMT(408.31,DGMTI,0)) Q:'DGMT0
"RTN","DGMTCOR",86,0)
 S DGCS=$P(DGMT0,U,3)
"RTN","DGMTCOR",87,0)
 S TDATE=+DGMT0
"RTN","DGMTCOR",88,0)
 S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTCOR",89,0)
 ;
"RTN","DGMTCOR",90,0)
 D SAVESTAT^DGMTU4(DGMTI)
"RTN","DGMTCOR",91,0)
 ;
"RTN","DGMTCOR",92,0)
 S DGFL=408.31,DGIEN=DGMTI
"RTN","DGMTCOR",93,0)
 S DGFLD=.03 I DGCS]"" S DGVAL=DGCS D KILL^DGMTR
"RTN","DGMTCOR",94,0)
 S DGVAL=10,$P(^DGMT(408.31,DGMTI,0),"^",3)=DGVAL D SET^DGMTR
"RTN","DGMTCOR",95,0)
 S DGFLD=.17,DGVAL=DT,$P(^DGMT(408.31,DGMTI,0),"^",17)=DT D SET^DGMTR
"RTN","DGMTCOR",96,0)
 W:'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY TEST NO LONGER APPLICABLE"
"RTN","DGMTCOR",97,0)
 D GETINCOM^DGMTU4(DFN,TDATE)
"RTN","DGMTCOR",98,0)
 S DGMTYPT=2 D QUE^DGMTR
"RTN","DGMTCOR",99,0)
 S DGRGAUTO=0
"RTN","DGMTCOR",100,0)
NLAQ Q
"RTN","DGMTCOR",101,0)
 ;
"RTN","DGMTCOR",102,0)
INC ;Update copay status to 'INCOMPLETE' if applicable OR restore completed test
"RTN","DGMTCOR",103,0)
 N DGMTACT,DGMTI,DGFL,DGFLD,DGIEN,DGMTP,DGVAL,DGMT0,AUTOCOMP,ERROR
"RTN","DGMTCOR",104,0)
 S AUTOCOMP=0
"RTN","DGMTCOR",105,0)
 S DGMTI=+$$LST^DGMTU(DFN,"",2)
"RTN","DGMTCOR",106,0)
 D
"RTN","DGMTCOR",107,0)
 .Q:'DGMTI
"RTN","DGMTCOR",108,0)
 .I ($P($G(^DGMT(408.31,DGMTI,0)),U,3)'=10) S AUTOCOMP=1 Q
"RTN","DGMTCOR",109,0)
 .S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGCS=$P(DGMT0,U,3)
"RTN","DGMTCOR",110,0)
 .Q:'DGMT0
"RTN","DGMTCOR",111,0)
 .S DGMTACT="STA" D PRIOR^DGMTEVT
"RTN","DGMTCOR",112,0)
 .S AUTOCOMP=$$AUTOCOMP^DGMTR(DGMTI)
"RTN","DGMTCOR",113,0)
 .W:'AUTOCOMP&'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY EXEMPTION TEST UPDATED TO INCOMPLETE"
"RTN","DGMTCOR",114,0)
 .W:AUTOCOMP&'$G(DGMTMSG)&'$D(ZTQUEUED) !,"COPAY EXEMPTION TEST UPDATED TO ",$$GETNAME^DGMTH($P($G(^DGMT(408.31,DGMTI,0)),"^",3))
"RTN","DGMTCOR",115,0)
 .S DGMTYPT=2 D QUE^DGMTR
"RTN","DGMTCOR",116,0)
 .S DGRGAUTO=0
"RTN","DGMTCOR",117,0)
 ;
"RTN","DGMTCOR",118,0)
 I $G(IVMZ10)'="UPLOAD IN PROGRESS",$G(DGQSENT)'=1,'AUTOCOMP,'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN) D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1 I '$D(ZTQUEUED),'$G(DGMSGF) W !!,"Financial query queued to be sent to HEC..."
"RTN","DGMTCOR",119,0)
 ;
"RTN","DGMTCOR",120,0)
INCQ Q
"RTN","DGMTCOR",121,0)
 ;
"RTN","DGMTCOR",122,0)
QREGAUTO ;Queues off test done by IB recalculating CP status
"RTN","DGMTCOR",123,0)
 ;  Input: DFN
"RTN","DGMTCOR",124,0)
 ;  Action: Possible update of Copay Status
"RTN","DGMTCOR",125,0)
 ;
"RTN","DGMTCOR",126,0)
 Q:'$D(^IBA(354.1,"APIDT",DFN,1))  ;No action if no status on file
"RTN","DGMTCOR",127,0)
 S ZTDESC="CHECK PATIENT FILE CHANGES VS CP STATUS",ZTDTH=$H,ZTRTN="REGAUTO^IBARXEU5",ZTSAVE("DFN")="",ZTIO=""
"RTN","DGMTCOR",128,0)
 D ^%ZTLOAD
"RTN","DGMTCOR",129,0)
 K ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTCOR",130,0)
 Q
"RTN","DGMTCOU1")
0^21^B12937265
"RTN","DGMTCOU1",1,0)
DGMTCOU1 ;ALB/REW,LD,JAN,AEG,LBD - COPAY UTILITIES ; 8/13/04 8:31am
"RTN","DGMTCOU1",2,0)
 ;;5.3;Registration;**33,45,54,335,358,401,436,445,564**;Aug 13, 1993
"RTN","DGMTCOU1",3,0)
AUTO(DFN,AUTOEX) ;
"RTN","DGMTCOU1",4,0)
 ; Returns 1 if Exempt from CP w/o needing MT/CP information
"RTN","DGMTCOU1",5,0)
 ;  INPUT: DFN     [Required]
"RTN","DGMTCOU1",6,0)
 ;         AUTOEX  [Optional]
"RTN","DGMTCOU1",7,0)
 ;  RETURNS 1=Exempt 0=Not Exempt
"RTN","DGMTCOU1",8,0)
 ;
"RTN","DGMTCOU1",9,0)
 ; Hold the Auto exclusion information for later use
"RTN","DGMTCOU1",10,0)
 S AUTOEX=$$AUTOINFO(DFN)
"RTN","DGMTCOU1",11,0)
 ;
"RTN","DGMTCOU1",12,0)
 Q AUTOEX["1"
"RTN","DGMTCOU1",13,0)
AUTOINFO(DFN) ;
"RTN","DGMTCOU1",14,0)
 ; This returns info needed to IB to see if MT information needs to be
"RTN","DGMTCOU1",15,0)
 ; looked at to determine Copay Exemption Status
"RTN","DGMTCOU1",16,0)
 ;
"RTN","DGMTCOU1",17,0)
 ;  INPUT: DFN - IEN of Patient File (Required)
"RTN","DGMTCOU1",18,0)
 ; OUTPUT: (SC>50%^REC.A&A^REC.HB^REC.PEN^DOM PT^NON.VET^INPT^POW^UNEMP)
"RTN","DGMTCOU1",19,0)
 ;  Piece: (   1  ^   2   ^   3  ^   4   ^   5  ^   6   ^  7 ^ 8 ^  9  )
"RTN","DGMTCOU1",20,0)
 ;  PIECES =1 IF TRUE
"RTN","DGMTCOU1",21,0)
 ;
"RTN","DGMTCOU1",22,0)
 N DGALLEL,DGDOM,DGEL,DGNODE,DGX,DGYR,VADMVT,DGI
"RTN","DGMTCOU1",23,0)
 S DGX=""
"RTN","DGMTCOU1",24,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S $P(DGX,U,6)=1 G QTAUTO ;NON-VET
"RTN","DGMTCOU1",25,0)
 S DGEL=0,DGALLEL=U
"RTN","DGMTCOU1",26,0)
 F  S DGEL=$O(^DPT("AEL",DFN,DGEL)) Q:'DGEL  S DGALLEL=DGALLEL_$P($G(^DIC(8,DGEL,0)),U,9)_U
"RTN","DGMTCOU1",27,0)
 F DGI=.3,.362,.52 S DGNODE(DGI)=$G(^DPT(DFN,DGI))
"RTN","DGMTCOU1",28,0)
 I (DGALLEL["^1^") S $P(DGX,U,1)=1 G QTAUTO ;SC>50
"RTN","DGMTCOU1",29,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGALLEL["^2^") S $P(DGX,U,2)=1 G QTAUTO ;A&A
"RTN","DGMTCOU1",30,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGALLEL["^15^") S $P(DGX,U,3)=1 G QTAUTO ;HB
"RTN","DGMTCOU1",31,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGALLEL["^4^") S $P(DGX,U,4)=1 G QTAUTO ;PENSION
"RTN","DGMTCOU1",32,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGALLEL["^18^") S $P(DGX,U,8)=1 G QTAUTO ;POW
"RTN","DGMTCOU1",33,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S $P(DGX,U,9)=1 G QTAUTO ;UNEMPLOYABLE
"RTN","DGMTCOU1",34,0)
 N DGDOM,DGDOM1,VAHOW,VAROOT,VAINDT,VAIP,VAERR
"RTN","DGMTCOU1",35,0)
 D DOM^DGMTR I $G(DGDOM) S $P(DGX,U,5)=1 G QTAUTO ;DOM
"RTN","DGMTCOU1",36,0)
 D IN5^VADPT I $G(VAIP(1))'="" S $P(DGX,U,7)=1 G QTAUTO ;INPAT
"RTN","DGMTCOU1",37,0)
QTAUTO Q DGX
"RTN","DGMTCOU1",38,0)
 ;
"RTN","DGMTCOU1",39,0)
LST(DFN,DGDT,DGMTYPT1) ;Last Copay Exemption or Means Test for a patient
"RTN","DGMTCOU1",40,0)
 ;   Input  -- DFN   Patient IEN
"RTN","DGMTCOU1",41,0)
 ;             DGDT  Date/Time  (Optional- default today@2359)
"RTN","DGMTCOU1",42,0)
 ;             DGMTYPT1 (Optional (1:MT, 2:CP, Null/Default or 3:Either)
"RTN","DGMTCOU1",43,0)
 ;   Output -- MT IEN^Date of Test ^Status Name^Status Code^Type of Test
"RTN","DGMTCOU1",44,0)
 ;      Piece:   1   ^     2              3         4            5
"RTN","DGMTCOU1",45,0)
 ;
"RTN","DGMTCOU1",46,0)
 N DGCPDT,DGIDT,DGIDT,DGMTDT,DGMTI,Y
"RTN","DGMTCOU1",47,0)
 S DGIDT=$S($G(DGDT)>0:-DGDT,1:-DT) S:'$P(DGIDT,".",2) DGIDT=DGIDT_.2359
"RTN","DGMTCOU1",48,0)
 I '$D(DGMTYPT1) S DGMTYPT1=3
"RTN","DGMTCOU1",49,0)
 I DGMTYPT1=3 D  ;EITHER
"RTN","DGMTCOU1",50,0)
 .S DGMTDT=+$O(^DGMT(408.31,"AID",1,DFN,DGIDT))
"RTN","DGMTCOU1",51,0)
 .S DGCPDT=+$O(^DGMT(408.31,"AID",2,DFN,DGIDT))
"RTN","DGMTCOU1",52,0)
 .S DGMTYPT1=$S(DGCPDT<DGMTDT:2,(DGCPDT>DGMTDT):1,$D(^DGMT(408.31,"AS",1,3,+DGMTDT,DFN)):2,1:1)
"RTN","DGMTCOU1",53,0)
 S DGMTI=+$$LST^DGMTU(DFN,$P(DGIDT,"-",2),DGMTYPT1)
"RTN","DGMTCOU1",54,0)
 I $D(^DGMT(408.31,DGMTI,0)) S Y=DGMTI_"^"_$P(^(0),"^")_"^"_$$MTS^DGMTU(DFN,+$P(^(0),"^",3))_"^"_DGMTYPT1
"RTN","DGMTCOU1",55,0)
 Q $G(Y)
"RTN","DGMTCOU1",56,0)
THRESH(DGDT) ;PRINTS THE YEAR'S COPAY THRESHOLDS
"RTN","DGMTCOU1",57,0)
 ;UPDATE 11/15/00 TO REFLECT YEAR'S COPAY THRESHOLDS PER VHA DIRECTIVE
"RTN","DGMTCOU1",58,0)
 ;99-064
"RTN","DGMTCOU1",59,0)
 N DGCPLEV,DGDEP,DGNODE,DGTYPE,Y
"RTN","DGMTCOU1",60,0)
 I '$D(DGDT) S DGDT=DT
"RTN","DGMTCOU1",61,0)
 S DGDT=DGDT\1
"RTN","DGMTCOU1",62,0)
 S Y=DGDT X ^DD("DD") W !,?2,"Net Annual Income Thresholds on ",Y,":"
"RTN","DGMTCOU1",63,0)
 S DGTYPE=$S(DGDT<2961201:2,1:1)
"RTN","DGMTCOU1",64,0)
 S DGCPLEV=$$THRES^IBARXEU1(DGDT,DGTYPE,0)
"RTN","DGMTCOU1",65,0)
 I DGCPLEV']"" W !,"None for this date..." G THRESHQT
"RTN","DGMTCOU1",66,0)
 W !,?5,"Num. Dependents: ",?25,"0 (Self)",?42,1,?52,2,?62,3,?72,4
"RTN","DGMTCOU1",67,0)
 W !,?5,"Net Income:"
"RTN","DGMTCOU1",68,0)
 F DGDEP=0:1:4 W ?(23+(DGDEP*10)),$J(+$$THRES^IBARXEU1(DGDT,DGTYPE,DGDEP),10)
"RTN","DGMTCOU1",69,0)
THRESHQT Q
"RTN","DGMTCOU1",70,0)
DISPMAS(DFN) ; Displays Co
"RTN","DGMTCOU1",71,0)
 N DGCPS,DGEX,Y,AUTOEX
"RTN","DGMTCOU1",72,0)
 S DGEX=$$AUTO(DFN,.AUTOEX)
"RTN","DGMTCOU1",73,0)
 I $P($G(AUTOEX),U,5)!($P($G(AUTOEX),U,7)) Q
"RTN","DGMTCOU1",74,0)
 I DGEX W !,"Patient is exempt from Copay."
"RTN","DGMTCOU1",75,0)
 I 'DGEX D
"RTN","DGMTCOU1",76,0)
 .S DGCPS=$$LST365(DFN,DT,2),Y=$P(DGCPS,U,2)
"RTN","DGMTCOU1",77,0)
 .I DGCPS]"" D
"RTN","DGMTCOU1",78,0)
 ..X ^DD("DD")
"RTN","DGMTCOU1",79,0)
 ..W !,"Patient's Copay Status is ",$P(DGCPS,U,3)
"RTN","DGMTCOU1",80,0)
 ..W ".  Last Test Date: ",Y,"."
"RTN","DGMTCOU1",81,0)
 Q
"RTN","DGMTCOU1",82,0)
LST365(DFN,DGDT,DGMTYPT1) ;RETURNS CURRENT MT/CP  (WITHIN 365 DAYS)
"RTN","DGMTCOU1",83,0)
 ;  Input:   DGDT - IB DATE
"RTN","DGMTCOU1",84,0)
 ;           DGMTYPT1 (Optional (1:MT, 2:CP, Null/Default or 3:Either)
"RTN","DGMTCOU1",85,0)
 ;  Output -- MT IEN^Date of Test ^Status Name^Status Code^Type of Test
"RTN","DGMTCOU1",86,0)
 ;     Piece:   1   ^     2              3         4            5
"RTN","DGMTCOU1",87,0)
 N DGLST
"RTN","DGMTCOU1",88,0)
 S DGDT=$G(DGDT)
"RTN","DGMTCOU1",89,0)
 I '$D(DGMTYPT1) S DGMTYPT1=3
"RTN","DGMTCOU1",90,0)
 S DGLST=$$LST(DFN,DGDT,DGMTYPT1)
"RTN","DGMTCOU1",91,0)
 S:$P(DGLST,U,4)="N" DGLST=$$LST(DFN,DGDT,2)
"RTN","DGMTCOU1",92,0)
 S:$$365($P(DGLST,U,2),DGDT) DGLST="" ;RETURN NULL IF LAST >365
"RTN","DGMTCOU1",93,0)
 Q DGLST
"RTN","DGMTCOU1",94,0)
365(X1,DGDT) ; RETURNS 1 IF X1 IS MORE THAN 1 YEAR BEFORE DGDT
"RTN","DGMTCOU1",95,0)
 Q X1+10000'>DGDT
"RTN","DGMTR1")
0^22^B29713005
"RTN","DGMTR1",1,0)
DGMTR1 ;ALB/CJM,SCG,LBD - Check Means Test Requirements Cont'd;3/25/92  09:51
"RTN","DGMTR1",2,0)
 ;;5.3;Registration;**182,344,433,456,564**;Aug 13, 1993
"RTN","DGMTR1",3,0)
 ;
"RTN","DGMTR1",4,0)
COPYRX(DFN,MTIEN) ;
"RTN","DGMTR1",5,0)
 ;Creates a Pharmacy Copay test based on the means test if the vet is
"RTN","DGMTR1",6,0)
 ;subject to the Rx copayment and the income screening was already
"RTN","DGMTR1",7,0)
 ;completed
"RTN","DGMTR1",8,0)
 ;1/16/2002 - Changes added for LTC Copay Phase II (DG*5.3*433)
"RTN","DGMTR1",9,0)
 ;Creates a Pharmacy Copay test based on a LTC copay exemption test
"RTN","DGMTR1",10,0)
 ;(type 4) if the veteran is exempt from means test
"RTN","DGMTR1",11,0)
 ;
"RTN","DGMTR1",12,0)
 N NODE0,RXSTATUS,Y,DGMT,DGMTYPT,DGNODE,DATA,SUB,COMMENTS,RXIEN,DGMTACT,DGMTI,DGMTP,DGMTA,NODE2,CODE,QUIT,TRIES,ERROR,TYPE
"RTN","DGMTR1",13,0)
 ;
"RTN","DGMTR1",14,0)
 S DGMTP="",DGMTACT="ADD"
"RTN","DGMTR1",15,0)
 D ON^DGMTCOU G:'Y COPYRXQ
"RTN","DGMTR1",16,0)
 I $$CHK(DFN) D
"RTN","DGMTR1",17,0)
 .S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",18,0)
 .Q:NODE0=""
"RTN","DGMTR1",19,0)
 .S NODE2=$G(^DGMT(408.31,MTIEN,2))
"RTN","DGMTR1",20,0)
 .;
"RTN","DGMTR1",21,0)
 .;get type of test (1=means test; 4=LTC copay exemption test)
"RTN","DGMTR1",22,0)
 .S TYPE=$P(NODE0,"^",19)
"RTN","DGMTR1",23,0)
 .;
"RTN","DGMTR1",24,0)
 .;must have been completed
"RTN","DGMTR1",25,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE0,"^",3))
"RTN","DGMTR1",26,0)
 .S QUIT=1
"RTN","DGMTR1",27,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",28,0)
 .S CODE=$$GETCODE^DGMTH($P(NODE2,"^",3))
"RTN","DGMTR1",29,0)
 .I (CODE'=""),("ACGP01"[CODE) S QUIT=0
"RTN","DGMTR1",30,0)
 .Q:QUIT
"RTN","DGMTR1",31,0)
 .;
"RTN","DGMTR1",32,0)
 .;must still be effective
"RTN","DGMTR1",33,0)
 .Q:($$FMDIFF^XLFDT(DT,$P(NODE0,"^"))>365)
"RTN","DGMTR1",34,0)
 .Q:$$OLD^DGMTU4($P(NODE0,"^"))
"RTN","DGMTR1",35,0)
 .Q:($P(NODE0,"^",14))  ;declined to provide income information
"RTN","DGMTR1",36,0)
 .Q:($P(NODE0,"^",26))  ;refused to sign the test
"RTN","DGMTR1",37,0)
 .F TRIES=1:1 D  Q:(TRIES>3)
"RTN","DGMTR1",38,0)
 ..S DGNODE=$$LST^DGMTU(DFN,$S((DT>$P(NODE0,"^",2)):DT,1:$P(NODE0,"^",2)),2),RXIEN=+DGNODE
"RTN","DGMTR1",39,0)
 ..;
"RTN","DGMTR1",40,0)
 ..;mark existing test as non-primary
"RTN","DGMTR1",41,0)
 ..I RXIEN,($E($P(DGNODE,"^",2),1,3)=$E($P(NODE0,"^"),1,3)) D
"RTN","DGMTR1",42,0)
 ...S DATA(2)=0 I $$UPD^DGENDBS(408.31,RXIEN,.DATA)
"RTN","DGMTR1",43,0)
 ..E  S TRIES=4
"RTN","DGMTR1",44,0)
 .;
"RTN","DGMTR1",45,0)
 .S RXIEN=$P(NODE2,"^",6)
"RTN","DGMTR1",46,0)
 .;if already copied, reuse the same record
"RTN","DGMTR1",47,0)
 .I RXIEN,$P($G(^DGMT(408.31,RXIEN,2)),"^",6)=MTIEN D
"RTN","DGMTR1",48,0)
 ..S DGMTI=RXIEN
"RTN","DGMTR1",49,0)
 .E  D  Q:'DGMTI
"RTN","DGMTR1",50,0)
 ..;This call works. Adding via the ADD^DGENDBS encountered an error
"RTN","DGMTR1",51,0)
 ..S DGMTDT=$P(NODE0,"^") S DGMTYPT=2 D ADD^DGMTA
"RTN","DGMTR1",52,0)
 .;
"RTN","DGMTR1",53,0)
 .S DATA(.019)=2
"RTN","DGMTR1",54,0)
 .S DATA(.03)=""
"RTN","DGMTR1",55,0)
 .F SUB=.01,.02,.04,.05,.06,.07,.14,.15,.18,.23,.24,.25 S DATA(SUB)=$P(NODE0,"^",(SUB/.01))
"RTN","DGMTR1",56,0)
 .S DATA(2)=1
"RTN","DGMTR1",57,0)
 .S DATA(2.02)=$P(NODE2,"^",2)
"RTN","DGMTR1",58,0)
 .S DATA(2.05)=$P(NODE2,"^",5)
"RTN","DGMTR1",59,0)
 .I TYPE=1 D
"RTN","DGMTR1",60,0)
 ..S DATA(2.06)=MTIEN
"RTN","DGMTR1",61,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed means test"
"RTN","DGMTR1",62,0)
 ..S COMMENTS("LINES",2,0)="which was changed to NO LONGER REQUIRED. All data including income"
"RTN","DGMTR1",63,0)
 ..S COMMENTS("LINES",3,0)="screening was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",64,0)
 .I TYPE=4 D
"RTN","DGMTR1",65,0)
 ..S COMMENTS("LINES",1,0)="This Rx Copay Test was automatically created based on a completed"
"RTN","DGMTR1",66,0)
 ..S COMMENTS("LINES",2,0)="LTC copay exemption test. All data including income screening"
"RTN","DGMTR1",67,0)
 ..S COMMENTS("LINES",3,0)="was copied from the test on "_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","DGMTR1",68,0)
 .S DATA(50)="COMMENTS(""LINES"")"
"RTN","DGMTR1",69,0)
 .S (DATA(.03),DATA(2.03))=$$RXSTATUS(MTIEN)
"RTN","DGMTR1",70,0)
 .I $$UPD^DGENDBS(408.31,DGMTI,.DATA,.ERROR)
"RTN","DGMTR1",71,0)
 .K DATA
"RTN","DGMTR1",72,0)
 .S:TYPE=1 DATA(2.06)=DGMTI
"RTN","DGMTR1",73,0)
 .S:TYPE=4 DATA(2.08)=DGMTI
"RTN","DGMTR1",74,0)
 .I $$UPD^DGENDBS(408.31,MTIEN,.DATA,.ERROR)
"RTN","DGMTR1",75,0)
 .D TRANSFER^DGMTU4(DFN,MTIEN,DGMTI)
"RTN","DGMTR1",76,0)
 .D QUE^DGMTR
"RTN","DGMTR1",77,0)
COPYRXQ ;
"RTN","DGMTR1",78,0)
 K ERROR
"RTN","DGMTR1",79,0)
 Q
"RTN","DGMTR1",80,0)
 ;
"RTN","DGMTR1",81,0)
RXSTATUS(MTIEN) ;
"RTN","DGMTR1",82,0)
 ;Determins RX Copay Status based on the means test
"RTN","DGMTR1",83,0)
 ;
"RTN","DGMTR1",84,0)
 Q:('$G(MTIEN)) ""
"RTN","DGMTR1",85,0)
 N NODE0,NODE,PIECE,IBSTATUS,MTSTATUS
"RTN","DGMTR1",86,0)
 S NODE0=$G(^DGMT(408.31,MTIEN,0))
"RTN","DGMTR1",87,0)
 Q:(NODE0="") ""
"RTN","DGMTR1",88,0)
 F PIECE=1,2,4,5,14,15,18 S $P(NODE,"^",PIECE)=$P(NODE0,"^",PIECE)
"RTN","DGMTR1",89,0)
 S $P(NODE,"^",19)=2
"RTN","DGMTR1",90,0)
 S IBSTATUS=+$$INCDT^IBARXEU1(NODE)
"RTN","DGMTR1",91,0)
 S MTSTATUS=$S(IBSTATUS=1:"E",IBSTATUS=2:"M",1:"")
"RTN","DGMTR1",92,0)
 Q:(MTSTATUS="") ""
"RTN","DGMTR1",93,0)
 Q $O(^DG(408.32,"AC",2,MTSTATUS,0))
"RTN","DGMTR1",94,0)
 ;
"RTN","DGMTR1",95,0)
CHK(DFN) ;
"RTN","DGMTR1",96,0)
 ;can the veteran take a RX copay test?
"RTN","DGMTR1",97,0)
 N DGMTI,DGMTCOR,DGNODE,DGELIG,DGI,DGE
"RTN","DGMTR1",98,0)
 S DGMTCOR=1
"RTN","DGMTR1",99,0)
 ;
"RTN","DGMTR1",100,0)
 I $P($G(^DPT(DFN,"VET")),U,1)'="Y" S DGMTCOR=0 G CHKQ ;NON-VET
"RTN","DGMTR1",101,0)
 S DGI=$P($G(^DPT(DFN,.36)),U) I 'DGI S DGMTCOR=0 G CHKQ ;NO PRIM ELIG
"RTN","DGMTR1",102,0)
 S DGELIG=U_$P($G(^DIC(8,+DGI,0)),U,9)_U
"RTN","DGMTR1",103,0)
 S DGI=0 F  S DGI=$O(^DPT(DFN,"E",DGI)) Q:'DGI  S DGE=$P($G(^DPT(DFN,"E",DGI,0)),U),DGELIG=DGELIG_$P($G(^DIC(8,+DGE,0)),U,9)_U
"RTN","DGMTR1",104,0)
 I (DGELIG["^1^") S DGMTCOR=0 G CHKQ  ;SC 50-100%
"RTN","DGMTR1",105,0)
 F DGI=.3,.362,.52 S DGNODE(DGI)=$G(^DPT(DFN,DGI))
"RTN","DGMTR1",106,0)
 I $P(DGNODE(.362),U,12)["Y"!(DGELIG["^2^") S DGMTCOR=0 G CHKQ ;A&A
"RTN","DGMTR1",107,0)
 I $P(DGNODE(.362),U,13)["Y"!(DGELIG["^15^") S DGMTCOR=0 G CHKQ ;HB
"RTN","DGMTR1",108,0)
 I $P(DGNODE(.362),U,14)["Y"!(DGELIG["^4^") S DGMTCOR=0 G CHKQ ;PENSION
"RTN","DGMTR1",109,0)
 I $P(DGNODE(.52),U,5)["Y"!(DGELIG["^18^") S DGMTCOR=0 G CHKQ ;POW
"RTN","DGMTR1",110,0)
 I $P(DGNODE(.3),U,5)["Y"&($P(DGNODE(.3),U,2)>0)&($P(DGNODE(.362),U,20)>0) S DGMTCOR=0 G CHKQ ;UNEMPLOYABLE
"RTN","DGMTR1",111,0)
CHKQ ;
"RTN","DGMTR1",112,0)
 Q DGMTCOR
"RTN","DGMTR1",113,0)
MAIL ; Send a mailman msg to user/ INCONSISTENCY EDIT GROUP with results
"RTN","DGMTR1",114,0)
 N %,DGB,I,VA,VADM,VAERR,Y,XMDUZ,XMSUB,XMTEXT,XMY,XMZ
"RTN","DGMTR1",115,0)
 D DEM^VADPT
"RTN","DGMTR1",116,0)
 S XMSUB="Patient "_VADM(1)_" has an invalid secondary eligibility"
"RTN","DGMTR1",117,0)
 S XMDUZ="PIMS PACKAGE",XMY(DUZ)="",XMY(.5)=""
"RTN","DGMTR1",118,0)
 S DGB=+$P($G(^DG(43,1,"NOT")),"^",6)
"RTN","DGMTR1",119,0)
 I $D(^XMB(3.8,DGB,0)) S XMY("G."_$P($G(^XMB(3.8,DGB,0)),"^"))=""
"RTN","DGMTR1",120,0)
 S XMTEXT="DGTXT("
"RTN","DGMTR1",121,0)
 D NOW^%DTC S Y=% D DD^%DT
"RTN","DGMTR1",122,0)
 S DGTXT(1)="On "_Y_"  "_VADM(1)_" ("_VA("BID")_")"
"RTN","DGMTR1",123,0)
 S DGTXT(2)="has an invalid secondary eligibility"
"RTN","DGMTR1",124,0)
 S DGTXT(3)="  "
"RTN","DGMTR1",125,0)
 ;que mailman message
"RTN","DGMTR1",126,0)
 N DIFROM,I,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","DGMTR1",127,0)
 F I="DGTXT(","XMDUZ","XMSUB","XMTEXT","XMY(" S ZTSAVE(I)=""
"RTN","DGMTR1",128,0)
 S ZTDESC="MAILMAN MSG FOR INVALID ELIGIBILITY CODE FILE ENTRIES"
"RTN","DGMTR1",129,0)
 S ZTDTH=$$NOW^XLFDT(),ZTIO="",ZTRTN="^XMD"
"RTN","DGMTR1",130,0)
 D ^%ZTLOAD
"RTN","DGMTR1",131,0)
 Q
"RTN","DGRPC1")
0^23^B12680132
"RTN","DGRPC1",1,0)
DGRPC1 ;ALB/MRL/PJR - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 5/28/04 8:51am
"RTN","DGRPC1",2,0)
 ;;5.3;Registration;**314,342,451,564**;Aug 13, 1993
"RTN","DGRPC1",3,0)
18 ;
"RTN","DGRPC1",4,0)
19 S X=$S($P(DGCD,"^",5)="Y":1,1:0) I $S(X=DGVT:0,DGVT=2&('X):0,1:1) S X=$S(DGVT:18,1:19) I DGCHK[(","_X_",") D COMB
"RTN","DGRPC1",5,0)
 S:'DGVT DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&'DGVT FIND^DGRPC2 D NEXT I DGLST>20!('DGLST) G @DGLST
"RTN","DGRPC1",6,0)
20 I DGVT,DGSC S DGD=$S(+$P(DGP(.3),"^",2)>49:1,1:3) I $P(DGCD,"^",4)'=DGD!($P(DGCD,"^",5)="N") S X=20 D COMB
"RTN","DGRPC1",7,0)
 S:DGSC DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&DGSC FIND^DGRPC2 D NEXT I +DGLST'=21 G @DGLST
"RTN","DGRPC1",8,0)
21 ; off
"RTN","DGRPC1",9,0)
 D NEXT I +DGLST'=22 G @DGLST
"RTN","DGRPC1",10,0)
22 I $P(DGP("VET"),"^",1)'="Y" G 221
"RTN","DGRPC1",11,0)
 S DGSTR="^"
"RTN","DGRPC1",12,0)
 I DGSC S DGSTR=DGSTR_$S($P(DGP(.3),"^",2)<50:3,1:1)_"^" G 220 ;only appropriate sc type
"RTN","DGRPC1",13,0)
 I $P(DGP(.52),"^",5)="Y" S DGSTR=DGSTR_"18^" G 220 ;pow only
"RTN","DGRPC1",14,0)
 I $P(DGP(.53),"^",1)="Y" S DGSTR=DGSTR_"22^" G 220 ;Purple Heart
"RTN","DGRPC1",15,0)
 I $P(DGP(0),"^",3)'>2061231 S DGSTR=DGSTR_"16^" ;mex border
"RTN","DGRPC1",16,0)
 I $P(DGP(0),"^",3)'>2071231 S DGSTR=DGSTR_"17^" ;allow WWI
"RTN","DGRPC1",17,0)
 S DGFL=0 I $P(DGP(.362),"^",12)="Y" S DGSTR=DGSTR_"2^",DGFL=1 ; a&a
"RTN","DGRPC1",18,0)
 I $P(DGP(.362),"^",13)="Y" S DGSTR=DGSTR_"15^",DGFL=1 ; hb
"RTN","DGRPC1",19,0)
 I DGFL=1 G 220
"RTN","DGRPC1",20,0)
 I $P(DGP(.362),"^",14)="Y" S DGSTR=DGSTR_"4^" G 220 ;nsc, va pen
"RTN","DGRPC1",21,0)
 S DGSTR=DGSTR_"5^" ;nsc
"RTN","DGRPC1",22,0)
220 I DGSTR'[("^"_$P(DGCD,"^",9)_"^") S X=22 D COMB
"RTN","DGRPC1",23,0)
 K DGSTR
"RTN","DGRPC1",24,0)
221 D NEXT I +DGLST'=23 G @DGLST
"RTN","DGRPC1",25,0)
23 S DGD=$G(^DPT(DFN,.361)) I $P(DGD,"^",1)="V",$P(DGD,"^",2)="" S X=23 D COMB
"RTN","DGRPC1",26,0)
 D NEXT I +DGLST'=24 G @DGLST
"RTN","DGRPC1",27,0)
24 I '$D(^DIC(21,+$P(DGP(.32),"^",3),"E",+$P(DGP(.36),"^",1))) S X=24 D COMB
"RTN","DGRPC1",28,0)
 D NEXT I +DGLST'=25 G @DGLST
"RTN","DGRPC1",29,0)
25 ;off
"RTN","DGRPC1",30,0)
 S:DGVT DGLST=35 G:DGCHK'[",35,"&DGVT FIND^DGRPC2 D NEXT I +DGLST'=26 G @DGLST
"RTN","DGRPC1",31,0)
26 ;off
"RTN","DGRPC1",32,0)
27 ;off
"RTN","DGRPC1",33,0)
28 ;off
"RTN","DGRPC1",34,0)
 D NEXT I +DGLST>32!('DGLST) G @DGLST
"RTN","DGRPC1",35,0)
29 ;
"RTN","DGRPC1",36,0)
30 ;
"RTN","DGRPC1",37,0)
31 ;
"RTN","DGRPC1",38,0)
 ;
"RTN","DGRPC1",39,0)
32 I 'DGVT S DGD=DGP(.362),X=28 F I=12,13,14,16 S X=X+1 I $P(DGD,"^",I)="Y",(DGCHK[(","_X_",")) D COMB
"RTN","DGRPC1",40,0)
 S DGLST=32 G:DGCHK'[",32," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",41,0)
33 ;off
"RTN","DGRPC1",42,0)
 S DGLST=33 G:DGCHK'[",33," FIND^DGRPC2 D NEXT I +DGLST>35!('DGLST) G @DGLST
"RTN","DGRPC1",43,0)
 ;
"RTN","DGRPC1",44,0)
34 I 'DGVT,$P(DGP(.52),"^",5)="Y",DGCHK[(","_34_",") D COMB S DGLST=34 G:DGCHK'[",34," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",45,0)
35 ;off
"RTN","DGRPC1",46,0)
 S DGLST=35 G:DGCHK'[",35," FIND^DGRPC2 D NEXT I +DGLST'=36 G @DGLST
"RTN","DGRPC1",47,0)
36 I '$D(^DG(391,+DGP("TYPE"),0)) S X=36 D COMB
"RTN","DGRPC1",48,0)
 ;;S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",49,0)
 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",50,0)
37 ;
"RTN","DGRPC1",51,0)
38 ;
"RTN","DGRPC1",52,0)
39 ;
"RTN","DGRPC1",53,0)
40 F I=5,11 S I2=0,X=$S(I=5:37,1:39) I $P(DGP(.52),"^",I)="Y" D PC
"RTN","DGRPC1",54,0)
 ;;
"RTN","DGRPC1",55,0)
41 ;; Inconsistencies 41 and 42 are superseded by 72 through 82
"RTN","DGRPC1",56,0)
42 ;;
"RTN","DGRPC1",57,0)
 ;;
"RTN","DGRPC1",58,0)
 S DGLST=42 S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",59,0)
 ;
"RTN","DGRPC1",60,0)
PC I DGCHK[(","_X_",") F I1=I+1:1:I+3 I $P(DGP(.52),"^",I1)="",'I2 D COMB S I2=1
"RTN","DGRPC1",61,0)
 I DGCHK[(","_X_",") F I1=I+2:1:I+3 I $E($P(DGP(.52),"^",I1),4,7)="0000",'I2 D COMB S I2=1
"RTN","DGRPC1",62,0)
 S X=X+1 I DGCHK[(","_X_","),$P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),'$$B4^DGRPDT($P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),1) D COMB
"RTN","DGRPC1",63,0)
 Q
"RTN","DGRPC1",64,0)
 ;
"RTN","DGRPC1",65,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC1",66,0)
 Q
"RTN","DGRPC1",67,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<41 Q
"RTN","DGRPC1",68,0)
 I +DGLST,+DGLST<79 S DGLST=DGLST_"^DGRPC2" Q
"RTN","DGRPC1",69,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC1",70,0)
 Q
"RTN","DGRPC2")
0^24^B59686456
"RTN","DGRPC2",1,0)
DGRPC2 ;ALB/MRL/SCK/PJR - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 5/28/04 8:52am
"RTN","DGRPC2",2,0)
 ;;5.3;Registration;**45,69,108,121,205,218,342,387,470,467,489,505,507,528,451,564**;Aug 13, 1993
"RTN","DGRPC2",3,0)
 ;
"RTN","DGRPC2",4,0)
43 ;off
"RTN","DGRPC2",5,0)
44 ;off
"RTN","DGRPC2",6,0)
45 ;off
"RTN","DGRPC2",7,0)
46 ;off
"RTN","DGRPC2",8,0)
47 ;off
"RTN","DGRPC2",9,0)
 S DGLST=$S(DGCHK[",47,":47,DGCHK[",46,":46,DGCHK[",45,":45,DGCHK[",44,":44,1:DGLST)
"RTN","DGRPC2",10,0)
 D NEXT G @DGLST
"RTN","DGRPC2",11,0)
48 I DGVT S DGD=DGP(.362) I DGCHK[(",48,"),($P(DGD,"^",17)="Y"),($P(DGD,"^",6)="") S X=48 D COMB
"RTN","DGRPC2",12,0)
 D NEXT G @DGLST
"RTN","DGRPC2",13,0)
49 ;
"RTN","DGRPC2",14,0)
50 ; insurance checks
"RTN","DGRPC2",15,0)
 I DGCHK[",49,"!(DGCHK[",50,") D  S DGLST=$S(DGCHK["50":50,1:49)
"RTN","DGRPC2",16,0)
 . N COV,INS,X
"RTN","DGRPC2",17,0)
 . S X=0,COV=$S($P(DGP(.31),"^",11)="Y":1,1:0)
"RTN","DGRPC2",18,0)
 . D ALL^IBCNS1(DFN,"INS",2,DT)
"RTN","DGRPC2",19,0)
 . I COV,'$G(INS(0)) S X=49 ; yes, but none
"RTN","DGRPC2",20,0)
 . I 'COV,$G(INS(0)) S X=50 ; not yes, but some
"RTN","DGRPC2",21,0)
 . I DGCHK[(","_X_",") D COMB
"RTN","DGRPC2",22,0)
 D NEXT G @DGLST
"RTN","DGRPC2",23,0)
51 D NEXT G @DGLST ; 51 disabled
"RTN","DGRPC2",24,0)
 S X=$S($D(^DIC(21,+$P(DGP(.32),"^",3),0)):$P(^(0),"^",3),1:"")
"RTN","DGRPC2",25,0)
 I X="Z"&($P(DGP(.32),"^",5)'=7)&($P(DGP(.32),"^",10)'=7)&($P(DGP(.32),"^",15)'=7)!($P(DGP(.32),"^",5)=7&(X'="Z")) S X=51 D COMB
"RTN","DGRPC2",26,0)
 ;
"RTN","DGRPC2",27,0)
52 I $P(DGP(.31),"^",11)']"" S X=52 D COMB ;automatically on
"RTN","DGRPC2",28,0)
 D NEXT G @DGLST
"RTN","DGRPC2",29,0)
53 I $P(DGP(.311),"^",15)']"" S X=53 D COMB ;automatically on
"RTN","DGRPC2",30,0)
 D NEXT G @DGLST
"RTN","DGRPC2",31,0)
54 ;
"RTN","DGRPC2",32,0)
55 ;BELOW IS USED BY BOTH 54 & 55
"RTN","DGRPC2",33,0)
 S DGLST=$S(DGCHK["55":55,1:54)
"RTN","DGRPC2",34,0)
 I $G(^DPT(DFN,.35)),(^(.35)<+($E(DT,1,3)_"0000")) D NEXT G @DGLST ; patient died before current year
"RTN","DGRPC2",35,0)
 N DGE S DGE=+$O(^DIC(8.1,"B","SERVICE CONNECTED 50% to 100%",0))
"RTN","DGRPC2",36,0)
 I $P($G(^DPT(DFN,.3)),U,2)'<50!($P($G(^DIC(8,+$G(^DPT(DFN,.36)),0)),U,9)=DGE) D NEXT G @DGLST ;50-100% SC
"RTN","DGRPC2",37,0)
 S DGPTYP=$G(^DG(391,+DGP("TYPE"),"S")),DGISYR=$E(DT,1,3)-1_"0000" I '$P(DGPTYP,"^",8)&('$P(DGPTYP,"^",9)) K DGPTYP,DGISYR D NEXT G @DGLST ; screens 8 and 9 off
"RTN","DGRPC2",38,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IP")
"RTN","DGRPC2",39,0)
 I '$P(DGPTYP,"^",8)!(DGCHK'["54") G JUST55 ; screen 8 off OR JUST 55 IN CHK
"RTN","DGRPC2",40,0)
 S DGFL=0 I $D(DGREL("S")),($$SSN^DGMTU1(+DGREL("S"))']"") S DGFL=1
"RTN","DGRPC2",41,0)
 I 'DGFL F I=0:0 S I=$O(DGREL("D",I)) Q:'I  I $$SSN^DGMTU1(+DGREL("D",I))']"" S DGFL=1 Q
"RTN","DGRPC2",42,0)
 I DGFL S X=54 D COMB
"RTN","DGRPC2",43,0)
JUST55 I DGCHK'["55" D NEXT G @DGLST
"RTN","DGRPC2",44,0)
 S DGLST=55
"RTN","DGRPC2",45,0)
 I '$P(DGPTYP,"^",9) D NEXT G @DGLST ; screen 9 off
"RTN","DGRPC2",46,0)
 D TOT^DGRP9(.DGINC) S DGFL=0
"RTN","DGRPC2",47,0)
 F DGD="V","S","D" I $D(DGTOT(DGD)) F I=8:1:17 I $P(DGTOT(DGD),"^",I)]"" S DGFL=1 Q
"RTN","DGRPC2",48,0)
 I 'DGFL N DGAPD,DG55 D  I 'DGAPD&('DG55)  S X=55 D COMB
"RTN","DGRPC2",49,0)
 . S DGAPD=+$$LST^DGMTU(DFN),DGAPD=+$P($G(^DGMT(408.31,+DGAPD,0)),U,11)
"RTN","DGRPC2",50,0)
 . S DG55=$$CHECK55(DFN) ; **507, Additional Income Checks
"RTN","DGRPC2",51,0)
 D NEXT G @DGLST
"RTN","DGRPC2",52,0)
56 I DGVT S DGD=DGP(.3) I DGCHK[(",56,"),($P(DGD,"^",11)="Y"),($P(DGP(.362),"^",20)="") S X=56 D COMB
"RTN","DGRPC2",53,0)
 D NEXT G END^DGRPC3:$S('+DGLST:1,+DGLST=99:1,1:0) G @DGLST
"RTN","DGRPC2",54,0)
57 I $P(DGP(.38),U,1) D
"RTN","DGRPC2",55,0)
 .N X1,X2
"RTN","DGRPC2",56,0)
 .S X1=$P(DGP(.38),U,2)
"RTN","DGRPC2",57,0)
 .S X=$P($G(^DG(43,1,0)),U,46) S X2=$S(X:X,1:365) D C^%DTC
"RTN","DGRPC2",58,0)
 .I X<DT S X=57 D COMB
"RTN","DGRPC2",59,0)
 D NEXT G @DGLST
"RTN","DGRPC2",60,0)
58 ;58 - EC Claim - No Gulf/Som Svc
"RTN","DGRPC2",61,0)
 ;off
"RTN","DGRPC2",62,0)
 D NEXT G @DGLST
"RTN","DGRPC2",63,0)
59 ;59 - incomplete Catastrophic Disability info
"RTN","DGRPC2",64,0)
 I $$HASCAT^DGENCDA(DFN) D
"RTN","DGRPC2",65,0)
 .I '$P(DGP(.39),"^",2) S X=59 D COMB
"RTN","DGRPC2",66,0)
 D NEXT G @DGLST
"RTN","DGRPC2",67,0)
60 ;60 - Location of agent orange exposure unanswered
"RTN","DGRPC2",68,0)
 I DGVT,$P(DGP(.321),"^",2)="Y",$P(DGP(.321),"^",13)="" S X=60 D COMB
"RTN","DGRPC2",69,0)
 D NEXT G @DGLST
"RTN","DGRPC2",70,0)
61 ;61 - Incomplete Phone Number
"RTN","DGRPC2",71,0)
 I $P(DGP(.13),"^")=""!($P(DGP(.13),"^",2)="") S X=61 D COMB
"RTN","DGRPC2",72,0)
 D NEXT G @DGLST
"RTN","DGRPC2",73,0)
62 ;62 - Missing Emergency Contact Name
"RTN","DGRPC2",74,0)
 I $P(DGP(.33),"^")="" S X=62 D COMB
"RTN","DGRPC2",75,0)
 D NEXT G @DGLST
"RTN","DGRPC2",76,0)
63 ;Confidential Address check
"RTN","DGRPC2",77,0)
 I $P($$CAACT^DGRPCADD(DFN),U) D
"RTN","DGRPC2",78,0)
 .N DGI,DGERR
"RTN","DGRPC2",79,0)
 .S DGERR=0
"RTN","DGRPC2",80,0)
 .F DGI=1,4,5,6 Q:DGERR  I $P(DGP(.141),U,DGI)="" S DGERR=1
"RTN","DGRPC2",81,0)
 .I DGERR S X=63 D COMB
"RTN","DGRPC2",82,0)
 D NEXT G @DGLST
"RTN","DGRPC2",83,0)
64 ;64 - Place of Birth City/State Missing ;**505
"RTN","DGRPC2",84,0)
 I $P(DGP(0),"^",11)=""!($P(DGP(0),"^",12)="") S X=64 D COMB
"RTN","DGRPC2",85,0)
 D NEXT G @DGLST
"RTN","DGRPC2",86,0)
65 ;65 - Mother's Maiden Name Missing ;**505
"RTN","DGRPC2",87,0)
 I $P(DGP(.24),"^",3)="" S X=65 D COMB
"RTN","DGRPC2",88,0)
 D NEXT G @DGLST
"RTN","DGRPC2",89,0)
66 ;66 - Pseudo SSN in use ;**505
"RTN","DGRPC2",90,0)
 I $P(DGP(0),"^",9)["P" S X=66 D COMB
"RTN","DGRPC2",91,0)
 D NEXT G @DGLST
"RTN","DGRPC2",92,0)
67 ;67 - Serv Sep Date [Last] missing or imprecise, patch 528
"RTN","DGRPC2",93,0)
 N DGG
"RTN","DGRPC2",94,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",95,0)
 I $G(DGG)["A"!($G(DGG)["F") S X=67 D COMB
"RTN","DGRPC2",96,0)
 D NEXT G @DGLST
"RTN","DGRPC2",97,0)
68 ;used for 68-71, for Combat Vet, DG*5.3*528
"RTN","DGRPC2",98,0)
69 ;
"RTN","DGRPC2",99,0)
70 ;
"RTN","DGRPC2",100,0)
71 ;
"RTN","DGRPC2",101,0)
 ;68 - Combat To Date missing or imprecise, patch 528
"RTN","DGRPC2",102,0)
 ;69 - Yugoslavia To Date missing or imprecise, patch 528
"RTN","DGRPC2",103,0)
 ;70 - Somalia To Date missing or imprecise, patch 528
"RTN","DGRPC2",104,0)
 ;71 - Persian Gulf To Date missing or imprecise, patch 528
"RTN","DGRPC2",105,0)
 N DGG
"RTN","DGRPC2",106,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",107,0)
 I DGG["B"!(DGG["G") S X=68 D COMB
"RTN","DGRPC2",108,0)
 I DGG["C"!(DGG["H") S X=69 D COMB
"RTN","DGRPC2",109,0)
 I DGG["D"!(DGG["I") S X=70 D COMB
"RTN","DGRPC2",110,0)
 I DGG["E"!(DGG["J") S X=71 D COMB
"RTN","DGRPC2",111,0)
 S DGLST=71
"RTN","DGRPC2",112,0)
 D NEXT G @DGLST
"RTN","DGRPC2",113,0)
72 ;; MSE - Required Fields
"RTN","DGRPC2",114,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSERR S X=72 D COMB
"RTN","DGRPC2",115,0)
 D NEXT G @DGLST
"RTN","DGRPC2",116,0)
73 ;; An MSE FROM date precedes an MSE TO date
"RTN","DGRPC2",117,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSDATERR D NEXT G @DGLST
"RTN","DGRPC2",118,0)
 F I1=6,11,16 I '$$B4^DGRPDT($P(DGP(.32),"^",I1),$P(DGP(.32),"^",I1+1),1) S X=73 D COMB S (MSERR,MSDATERR)=1 Q
"RTN","DGRPC2",119,0)
 D NEXT G @DGLST
"RTN","DGRPC2",120,0)
74 ;; Conflict Date Missing or Incomplete
"RTN","DGRPC2",121,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK I CONERR S X=74 D COMB
"RTN","DGRPC2",122,0)
 D NEXT G @DGLST
"RTN","DGRPC2",123,0)
75 ;; Conflict TO date precedes FROM date
"RTN","DGRPC2",124,0)
76 ;; Conflict Date out of range for conflict
"RTN","DGRPC2",125,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK
"RTN","DGRPC2",126,0)
 S LOC="",(I5,I6)=0 F I1=1:1 S LOC=$O(CONSPEC(LOC)) Q:LOC=""  I CONARR(LOC)=1 D
"RTN","DGRPC2",127,0)
 .N FROMDAT,FROMPC,TODAT,TOPC,NODE,DATA
"RTN","DGRPC2",128,0)
 .S DATA=CONSPEC(LOC)
"RTN","DGRPC2",129,0)
 .S NODE=$P(DATA,",",1),FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGRPC2",130,0)
 .S FROMDAT=$P(DGP(NODE),"^",FROMPC),TODAT=$P(DGP(NODE),"^",TOPC)
"RTN","DGRPC2",131,0)
 .I '$$B4^DGRPDT(FROMDAT,TODAT,1) S X=75 D COMB:'I5&(DGCHK[(",75,")) S CONARR(LOC)=2,I5=1 Q
"RTN","DGRPC2",132,0)
 .I DGCHK'[(",76,") Q
"RTN","DGRPC2",133,0)
 .S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",134,0)
 .I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),FROMDAT,TODAT) S X=76 D COMB:'I6 S CONARR(LOC)=2,I6=1
"RTN","DGRPC2",135,0)
 .Q
"RTN","DGRPC2",136,0)
 S DGLST=76 D NEXT G @DGLST
"RTN","DGRPC2",137,0)
77 ;; Date out of range for POW Location
"RTN","DGRPC2",138,0)
 S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",139,0)
 ;; Don't check if POW Data Incomplete or if POW TO precedes FROM
"RTN","DGRPC2",140,0)
 I ((","_DGER_",")[(",37,"))!((","_DGER_",")[(",38,")) D NEXT G @DGLST
"RTN","DGRPC2",141,0)
 I $P(DGP(.52),"^",5)'="Y" D NEXT G @DGLST ;; Don't check if no POW
"RTN","DGRPC2",142,0)
 S LOC=$$COMPOW^DGRPMS($P(DGP(.52),"^",6)) I LOC="" D NEXT G @DGLST
"RTN","DGRPC2",143,0)
 I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),$P(DGP(.52),"^",7),$P(DGP(.52),"^",8)) S X=77 D COMB
"RTN","DGRPC2",144,0)
 D NEXT G @DGLST
"RTN","DGRPC2",145,0)
78 ;; Date out of range for Combat Location
"RTN","DGRPC2",146,0)
 S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",147,0)
 ;; Don't check if Combat Data Incomplete or if Combat TO precedes FROM
"RTN","DGRPC2",148,0)
 I ((","_DGER_",")[(",39,"))!((","_DGER_",")[(",40,")) D NEXT G @DGLST
"RTN","DGRPC2",149,0)
 I $P(DGP(.52),"^",11)'="Y" D NEXT G @DGLST ;; Don't check if no COMBAT
"RTN","DGRPC2",150,0)
 S LOC=$$COMPOW^DGRPMS($P(DGP(.52),"^",12)) I LOC="" D NEXT G @DGLST
"RTN","DGRPC2",151,0)
 I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),$P(DGP(.52),"^",13),$P(DGP(.52),"^",14)) S X=78 D COMB
"RTN","DGRPC2",152,0)
 D NEXT G @DGLST
"RTN","DGRPC2",153,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC2",154,0)
 ;
"RTN","DGRPC2",155,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<79 Q
"RTN","DGRPC2",156,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC2",157,0)
 Q
"RTN","DGRPC2",158,0)
FIND F I=DGLST:1:99 I DGCHK[(","_I_",") Q
"RTN","DGRPC2",159,0)
 I DGNCK,(I>17),(I<36) S DGLST=36 G FIND
"RTN","DGRPC2",160,0)
 I I,I<99 S DGLST=I G @(DGLST_$S(DGLST>78:"^DGRPC3",DGLST>42:"",DGLST>17:"^DGRPC1",1:"^DGRPC"))
"RTN","DGRPC2",161,0)
 G END^DGRPC3
"RTN","DGRPC2",162,0)
 ;
"RTN","DGRPC2",163,0)
CHECK55(DFN) ;Buisness rules for additional 55-INCOME DATA MISSING checks
"RTN","DGRPC2",164,0)
 ;  Modeled from DGMTR checks.
"RTN","DGRPC2",165,0)
 ;  Input  DFN - IEN from PATIENT File #2
"RTN","DGRPC2",166,0)
 ;
"RTN","DGRPC2",167,0)
 ;  Output 1 - If Income check passes additional buisness rules
"RTN","DGRPC2",168,0)
 ;         0 - If Income check fails additional buisness rules
"RTN","DGRPC2",169,0)
 ;
"RTN","DGRPC2",170,0)
 N VAMB,VASV,VA,VADMVT,VAEL,VAINDT,DGRTN,DGMED,DG,DG1,DGWARD,DGSRVC
"RTN","DGRPC2",171,0)
 ;
"RTN","DGRPC2",172,0)
 S DGRTN=0
"RTN","DGRPC2",173,0)
 D MB^VADPT I +VAMB(7) S DGRTN=1 G Q55  ; Check if receiving VA Disability
"RTN","DGRPC2",174,0)
 D SVC^VADPT I +VASV(4) S DGRTN=1 G Q55  ; check if POW status indicated
"RTN","DGRPC2",175,0)
 I +VASV(9),(+VASV(9,1)=3) S DGRTN=1 G Q55  ; Check if Purple Heart Status is Confirmed
"RTN","DGRPC2",176,0)
 D GETS^DIQ(2,DFN_",",".381:.383","I","DGMED")
"RTN","DGRPC2",177,0)
 I $G(DGMED(2,DFN_",",.381,"I")) S DGRTN=1 G Q55  ; Check if eligible for Medicaid
"RTN","DGRPC2",178,0)
 D ADM^VADPT2 ; Check for current admission to DOM ward 
"RTN","DGRPC2",179,0)
 I +$G(VADMVT) D  G:DGRTN Q55
"RTN","DGRPC2",180,0)
 . Q:'$$GET1^DIQ(43,1,16,"I")  ; Has Dom wards?
"RTN","DGRPC2",181,0)
 . S DGWARD=$$GET1^DIQ(405,VADMVT,.06,"I") ; Get ward location
"RTN","DGRPC2",182,0)
 . S DGSRVC=$$GET1^DIQ(42,DGWARD,.03,"I") ; Get ward service
"RTN","DGRPC2",183,0)
 . S:DGSRVC="D" DGRTN=1 ; If ward service is 'D', then return 1
"RTN","DGRPC2",184,0)
 ;
"RTN","DGRPC2",185,0)
 ; Additional checks for 0% SC
"RTN","DGRPC2",186,0)
 D ELIG^VADPT
"RTN","DGRPC2",187,0)
 I +VAEL(3),'$P(VAEL(3),U,2) D  ; Check if service connected with % of zero
"RTN","DGRPC2",188,0)
 . I +VAMB(4) S DGRTN=1 Q  ; Check if receiving a VA pension
"RTN","DGRPC2",189,0)
 . S DG=0 ; Check for secondary eligibilities
"RTN","DGRPC2",190,0)
 . F  S DG=$O(VAEL(1,DG)) Q:'DG  D  Q:DGRTN
"RTN","DGRPC2",191,0)
 . . F DG1=2,4,15,16,17,18 I DG=DG1 S DGRTN=1 Q
"RTN","DGRPC2",192,0)
 ;
"RTN","DGRPC2",193,0)
Q55 D KVAR^VADPT
"RTN","DGRPC2",194,0)
 Q $G(DGRTN)
"RTN","VAFHLZPD")
0^10^B52916822
"RTN","VAFHLZPD",1,0)
VAFHLZPD ;ALB/KCL - Create generic HL7 ZPD segment ; 5/21/04 11:56am
"RTN","VAFHLZPD",2,0)
 ;;5.3;Registration;**94,122,160,220,247,545,564**;Aug 13, 1993
"RTN","VAFHLZPD",3,0)
 ;
"RTN","VAFHLZPD",4,0)
 ;
"RTN","VAFHLZPD",5,0)
EN(DFN,VAFSTR) ; This generic extrinsic function was designed to return
"RTN","VAFHLZPD",6,0)
 ;  sequences 1 throught 21 of the HL7 ZPD segment.  This segment
"RTN","VAFHLZPD",7,0)
 ;  contains VA-specific patient information that is not contained in
"RTN","VAFHLZPD",8,0)
 ;  the HL7 PID segment.  This call does not accomodate a segment
"RTN","VAFHLZPD",9,0)
 ;  length greater than 245 and has been superceeded by EN1^VAFHLZPD.
"RTN","VAFHLZPD",10,0)
 ;  This line tag has been left for backwards compatability.
"RTN","VAFHLZPD",11,0)
 ;
"RTN","VAFHLZPD",12,0)
 ;Input - DFN as internal entry number of the PATIENT file
"RTN","VAFHLZPD",13,0)
 ;      - VAFSTR as the string of fields requested seperated by commas
"RTN","VAFHLZPD",14,0)
 ;        (Defaults to all fields)
"RTN","VAFHLZPD",15,0)
 ;
"RTN","VAFHLZPD",16,0)
 ;     *****Also assumes all HL7 variables returned from*****
"RTN","VAFHLZPD",17,0)
 ;          INIT^HLTRANS are defined.
"RTN","VAFHLZPD",18,0)
 ;
"RTN","VAFHLZPD",19,0)
 ;Output - String of data forming the ZPD segment.
"RTN","VAFHLZPD",20,0)
 ;
"RTN","VAFHLZPD",21,0)
 ;
"RTN","VAFHLZPD",22,0)
 N VAFY,VAFZPD,REMARKS
"RTN","VAFHLZPD",23,0)
 S VAFY=$$EN1($G(DFN),$G(VAFSTR))
"RTN","VAFHLZPD",24,0)
 ;Segment less than 245 characters
"RTN","VAFHLZPD",25,0)
 I ('$D(VAFZPD(1))) D
"RTN","VAFHLZPD",26,0)
 .;Remove sequences 22 and higher
"RTN","VAFHLZPD",27,0)
 .S VAFY=$P(VAFY,HLFS,1,22)
"RTN","VAFHLZPD",28,0)
 ;Segment greater than 245 characters
"RTN","VAFHLZPD",29,0)
 I ($D(VAFZPD(1))) D
"RTN","VAFHLZPD",30,0)
 .;Strip out REMARKS (seq 2)
"RTN","VAFHLZPD",31,0)
 .S REMARKS=$P(VAFY,HLFS,3)
"RTN","VAFHLZPD",32,0)
 .S $P(VAFY,HLFS,3)=""
"RTN","VAFHLZPD",33,0)
 .;Append up to sequence 21 (PRIMARY CARE TEAM)
"RTN","VAFHLZPD",34,0)
 .S VAFY=VAFY_$P(VAFZPD(1),HLFS,1,((21-$L(VAFY,HLFS))+2))
"RTN","VAFHLZPD",35,0)
 .;Place REMARKS back into segment, truncating if needed
"RTN","VAFHLZPD",36,0)
 .S $P(VAFY,HLFS,3)=$E(REMARKS,1,(245-$L(VAFY)))
"RTN","VAFHLZPD",37,0)
 ;Done
"RTN","VAFHLZPD",38,0)
 Q VAFY
"RTN","VAFHLZPD",39,0)
 ;
"RTN","VAFHLZPD",40,0)
EN1(DFN,VAFSTR) ; This generic extrinsic function was designed to return the
"RTN","VAFHLZPD",41,0)
 ;  HL7 ZPD segment.  This segment contains VA-specific patient
"RTN","VAFHLZPD",42,0)
 ;  information that is not contained in the HL7 PID segment.  This
"RTN","VAFHLZPD",43,0)
 ;  call superceeds EN^VAFHLZPD because it accomodates a segment
"RTN","VAFHLZPD",44,0)
 ;  length greater than 245.
"RTN","VAFHLZPD",45,0)
 ; 
"RTN","VAFHLZPD",46,0)
 ;
"RTN","VAFHLZPD",47,0)
 ;Input  : DFN - Pointer to PATIENT file (#2)
"RTN","VAFHLZPD",48,0)
 ;         VAFSTR - List of data elements to retrieve seperated
"RTN","VAFHLZPD",49,0)
 ;                  by commas (ex: 1,2,3)
"RTN","VAFHLZPD",50,0)
 ;                - Defaults to all data elements
"RTN","VAFHLZPD",51,0)
 ;         Existance of HL7 encoding variables is assumed
"RTN","VAFHLZPD",52,0)
 ;         (HLFS, HLENC, HLQ)
"RTN","VAFHLZPD",53,0)
 ;Output : ZPD segment
"RTN","VAFHLZPD",54,0)
 ;       : If the ZPD segment becomes longer than 245 characters,
"RTN","VAFHLZPD",55,0)
 ;         remaining fields will be placed in VAFZPD(1)
"RTN","VAFHLZPD",56,0)
 ;Notes  : Sequence 1 (Set ID) will always have a value of '1'
"RTN","VAFHLZPD",57,0)
 ;       : A ZPD segment with sequence one set to '1' will be returned
"RTN","VAFHLZPD",58,0)
 ;         if DFN is not valid
"RTN","VAFHLZPD",59,0)
 ;       : Variable VAFZPD is initialized on entry
"RTN","VAFHLZPD",60,0)
 ;
"RTN","VAFHLZPD",61,0)
 ;Declare variables
"RTN","VAFHLZPD",62,0)
 N VAFHLZPD,VAFY,SEQ,SPILL,SPILLON,SPOT,LASTSEQ,MAXLEN
"RTN","VAFHLZPD",63,0)
 K VAFZPD
"RTN","VAFHLZPD",64,0)
 S MAXLEN=245
"RTN","VAFHLZPD",65,0)
 ;Get data
"RTN","VAFHLZPD",66,0)
 D GETDATA($G(DFN),$G(VAFSTR),"VAFHLZPD")
"RTN","VAFHLZPD",67,0)
 ;Build segment
"RTN","VAFHLZPD",68,0)
 S VAFY="VAFHLZPD"
"RTN","VAFHLZPD",69,0)
 S SPILL=0
"RTN","VAFHLZPD",70,0)
 S SPILLON=0
"RTN","VAFHLZPD",71,0)
 S @VAFY="ZPD"
"RTN","VAFHLZPD",72,0)
 S LASTSEQ=+$O(VAFHLZPD(""),-1)
"RTN","VAFHLZPD",73,0)
 F SEQ=1:1:LASTSEQ D
"RTN","VAFHLZPD",74,0)
 .;Make sure maximum length won't be exceeded
"RTN","VAFHLZPD",75,0)
 .I ($L(@VAFY)+$L($G(VAFHLZPD(SEQ)))+1)>MAXLEN D
"RTN","VAFHLZPD",76,0)
 ..;Max length exceeded - start putting data on next node
"RTN","VAFHLZPD",77,0)
 ..S SPILL=SPILL+1
"RTN","VAFHLZPD",78,0)
 ..S SPILLON=SEQ-1
"RTN","VAFHLZPD",79,0)
 ..S VAFY=$NA(VAFZPD(SPILL))
"RTN","VAFHLZPD",80,0)
 .;Add to string
"RTN","VAFHLZPD",81,0)
 .S SPOT=(SEQ+1)-SPILLON
"RTN","VAFHLZPD",82,0)
 .S $P(@VAFY,HLFS,SPOT)=$G(VAFHLZPD(SEQ))
"RTN","VAFHLZPD",83,0)
 ;Return segment
"RTN","VAFHLZPD",84,0)
 Q VAFHLZPD
"RTN","VAFHLZPD",85,0)
 ;
"RTN","VAFHLZPD",86,0)
GETDATA(DFN,VAFSTR,ARRAY) ;Get info needed to build segment
"RTN","VAFHLZPD",87,0)
 ;Input  : DFN - Pointer to PATIENT file (#2)
"RTN","VAFHLZPD",88,0)
 ;         VAFSTR - List of data elements to retrieve seperated
"RTN","VAFHLZPD",89,0)
 ;                  by commas (ex: 1,2,3)
"RTN","VAFHLZPD",90,0)
 ;                - Defaults to all data elements
"RTN","VAFHLZPD",91,0)
 ;         ARRAY - Array to return data in (full global reference)
"RTN","VAFHLZPD",92,0)
 ;                 Defaults to ^TMP($J,"VAFHLZPD")
"RTN","VAFHLZPD",93,0)
 ;         Existance of HL7 encoding variables is assumed
"RTN","VAFHLZPD",94,0)
 ;         (HLFS, HLENC, HLQ)
"RTN","VAFHLZPD",95,0)
 ;Output : Nothing
"RTN","VAFHLZPD",96,0)
 ;           ARRAY(SeqNum) = Value
"RTN","VAFHLZPD",97,0)
 ;Notes  : ARRAY is initialized (KILLed) on entry
"RTN","VAFHLZPD",98,0)
 ;       : Sequence 1 (Set ID) will always have a value of '1'
"RTN","VAFHLZPD",99,0)
 ;
"RTN","VAFHLZPD",100,0)
 ;Check input
"RTN","VAFHLZPD",101,0)
 S ARRAY=$G(ARRAY)
"RTN","VAFHLZPD",102,0)
 S:(ARRAY="") ARRAY=$NA(^TMP($J,"VAFHLZPD"))
"RTN","VAFHLZPD",103,0)
 K @ARRAY
"RTN","VAFHLZPD",104,0)
 ;Sequence 1 - Set ID
"RTN","VAFHLZPD",105,0)
 ;  value is always '1'
"RTN","VAFHLZPD",106,0)
 S @ARRAY@(1)=1
"RTN","VAFHLZPD",107,0)
 S DFN=+$G(DFN)
"RTN","VAFHLZPD",108,0)
 S VAFSTR=$G(VAFSTR)
"RTN","VAFHLZPD",109,0)
 S:(VAFSTR="") VAFSTR=$$COMMANUM(1,33)
"RTN","VAFHLZPD",110,0)
 S VAFSTR=","_VAFSTR_","
"RTN","VAFHLZPD",111,0)
 ;Declare variables
"RTN","VAFHLZPD",112,0)
 N VAFNODE,VAPD,X1,X
"RTN","VAFHLZPD",113,0)
 ;Get zero node
"RTN","VAFHLZPD",114,0)
 S VAFNODE=$G(^DPT(DFN,0))
"RTN","VAFHLZPD",115,0)
 ;Get other patient data from VADPT
"RTN","VAFHLZPD",116,0)
 D OPD^VADPT
"RTN","VAFHLZPD",117,0)
 ;Sequence 2 - Remarks (truncate to 60 characters)
"RTN","VAFHLZPD",118,0)
 I VAFSTR[",2," S X=$P(VAFNODE,"^",10),@ARRAY@(2)=$S(X="":HLQ,1:$E(X,1,60))
"RTN","VAFHLZPD",119,0)
 ;Sequence 3 - Place of birth (city)
"RTN","VAFHLZPD",120,0)
 I VAFSTR[",3," S @ARRAY@(3)=$S(VAPD(1)]"":VAPD(1),1:HLQ)
"RTN","VAFHLZPD",121,0)
 ;Sequence 4 - Place of birth (State abbrv.)
"RTN","VAFHLZPD",122,0)
 I VAFSTR[",4," S X1=$P($G(^DIC(5,$P(+VAPD(2),"^",1),0)),"^",2),@ARRAY@(4)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",123,0)
 ;Sequence 5 - Current means test status
"RTN","VAFHLZPD",124,0)
 I VAFSTR[",5," S X=$P(VAFNODE,"^",14),X1=$P($G(^DG(408.32,+X,0)),"^",2),@ARRAY@(5)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",125,0)
 ;Sequence 6 - Fathers name
"RTN","VAFHLZPD",126,0)
 I VAFSTR[",6," S @ARRAY@(6)=$S(VAPD(3)]"":VAPD(3),1:HLQ)
"RTN","VAFHLZPD",127,0)
 ;Sequence 7 - Mothers name
"RTN","VAFHLZPD",128,0)
 I VAFSTR[",7," S @ARRAY@(7)=$S(VAPD(4)]"":VAPD(4),1:HLQ)
"RTN","VAFHLZPD",129,0)
 ;Sequence 8 - Rated incompetent
"RTN","VAFHLZPD",130,0)
 I VAFSTR[",8," S X1=$$YN^VAFHLFNC($P($G(^DPT(DFN,.29)),"^",12)),@ARRAY@(8)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",131,0)
 ;Sequence 9 - Date of Death
"RTN","VAFHLZPD",132,0)
 I VAFSTR[",9," S X=$P($G(^DPT(DFN,.35)),"^",1),X1=$$HLDATE^HLFNC(X),@ARRAY@(9)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",133,0)
 ;Sequence 10 - Collateral sponser name
"RTN","VAFHLZPD",134,0)
 I VAFSTR[10 D
"RTN","VAFHLZPD",135,0)
 .S X=$P($G(^DPT(DFN,.36)),"^",11)
"RTN","VAFHLZPD",136,0)
 .S X1=$P($G(^DPT(+X,0)),"^",1)
"RTN","VAFHLZPD",137,0)
 .S @ARRAY@(10)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",138,0)
 ;Sequence 11 - Active Health Insurance?
"RTN","VAFHLZPD",139,0)
 I VAFSTR[11 S X=$$INS^VAFHLFNC(DFN),X1=$$YN^VAFHLFNC(X),@ARRAY@(11)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",140,0)
 ;Sequences 12 & 13
"RTN","VAFHLZPD",141,0)
 I VAFSTR[12!(VAFSTR[13) D
"RTN","VAFHLZPD",142,0)
 .S X=$G(^DPT(DFN,.38))
"RTN","VAFHLZPD",143,0)
 .;Sequence 12 - Eligible for Medicaid
"RTN","VAFHLZPD",144,0)
 .I VAFSTR[12 S X1=$$YN^VAFHLFNC($P(X,"^",1)),@ARRAY@(12)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",145,0)
 .;Sequence 13 - Date Medicaid last asked
"RTN","VAFHLZPD",146,0)
 .I VAFSTR[13 S X1=$$HLDATE^HLFNC($P(X,"^",2)),@ARRAY@(13)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",147,0)
 ;Sequence 14 - Race
"RTN","VAFHLZPD",148,0)
 I VAFSTR[14 S X=$P(VAFNODE,"^",6) S X1=$P($G(^DIC(10,+X,0)),"^",2),@ARRAY@(14)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",149,0)
 ;Sequence 15 - Religious Preference
"RTN","VAFHLZPD",150,0)
 I VAFSTR[15 S X=$P(VAFNODE,"^",8) S X1=$P($G(^DIC(13,+X,0)),"^",4),@ARRAY@(15)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",151,0)
 ;Sequence 16 - Homeless Indicator
"RTN","VAFHLZPD",152,0)
 I VAFSTR[16 S X=$T(HOMELESS^SOWKHIRM) S @ARRAY@(16)=$S(X]"":$$HOMELESS^SOWKHIRM(DFN),1:HLQ)
"RTN","VAFHLZPD",153,0)
 ;Sequences 17 & 20
"RTN","VAFHLZPD",154,0)
 I ((VAFSTR[17)!(VAFSTR[20)) D
"RTN","VAFHLZPD",155,0)
 .;POW Status & Location
"RTN","VAFHLZPD",156,0)
 .N VAF52,POW,LOC
"RTN","VAFHLZPD",157,0)
 .S VAF52=$G(^DPT(DFN,.52))
"RTN","VAFHLZPD",158,0)
 .;POW Status Indicated?
"RTN","VAFHLZPD",159,0)
 .S POW=$P(VAF52,"^",5)
"RTN","VAFHLZPD",160,0)
 .S:(POW="") POW=HLQ
"RTN","VAFHLZPD",161,0)
 .;POW Confinement Location (translates pointer to coded value)
"RTN","VAFHLZPD",162,0)
 .S LOC=$P(VAF52,"^",6)
"RTN","VAFHLZPD",163,0)
 .S:(LOC="") LOC=HLQ
"RTN","VAFHLZPD",164,0)
 .I (LOC'=HLQ) S LOC=$S(LOC>0&(LOC<7):LOC+3,LOC>6&(LOC<9):$C(LOC+58),1:"")
"RTN","VAFHLZPD",165,0)
 .;Add to output array
"RTN","VAFHLZPD",166,0)
 .;Sequence 17 - POW Status
"RTN","VAFHLZPD",167,0)
 .S:(VAFSTR[17) @ARRAY@(17)=POW
"RTN","VAFHLZPD",168,0)
 .;Sequence 20 - POW Confinement Location
"RTN","VAFHLZPD",169,0)
 .S:(VAFSTR[20) @ARRAY@(20)=LOC
"RTN","VAFHLZPD",170,0)
 ;Sequence 18 - Insurance Type
"RTN","VAFHLZPD",171,0)
 I VAFSTR[18 S X=+$$INSTYP^IBCNS1(DFN),@ARRAY@(18)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",172,0)
 ;Sequence 19 - RX Copay Exemption Status
"RTN","VAFHLZPD",173,0)
 I VAFSTR[19 S X=+$$RXST^IBARXEU(DFN),@ARRAY@(19)=$S(X'<0:X,1:HLQ)
"RTN","VAFHLZPD",174,0)
 ;Sequence 21 - Primary Care Team
"RTN","VAFHLZPD",175,0)
 I (VAFSTR[21) D
"RTN","VAFHLZPD",176,0)
 .;Get Primary Care Team  (as defined in PCMM)
"RTN","VAFHLZPD",177,0)
 .S X=$$OUTPTTM^SDUTL3(DFN)
"RTN","VAFHLZPD",178,0)
 .S X=$P(X,"^",2)
"RTN","VAFHLZPD",179,0)
 .S:(X="") X=HLQ
"RTN","VAFHLZPD",180,0)
 .;Put into output array
"RTN","VAFHLZPD",181,0)
 .S @ARRAY@(21)=X
"RTN","VAFHLZPD",182,0)
 ; 
"RTN","VAFHLZPD",183,0)
 ; Sequences 22 thru 30 added by DG*5.3*264 (Smart Card)
"RTN","VAFHLZPD",184,0)
 ;
"RTN","VAFHLZPD",185,0)
 ; Sequences 22 & 23
"RTN","VAFHLZPD",186,0)
 I VAFSTR[22!(VAFSTR[23) D
"RTN","VAFHLZPD",187,0)
 .; GI Insurance
"RTN","VAFHLZPD",188,0)
 .S X=$G(^DPT(DFN,.362))
"RTN","VAFHLZPD",189,0)
 .I VAFSTR[22 S X1=$P(X,U,17),@ARRAY@(22)=$S(X1="U":"N",X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",190,0)
 .I VAFSTR[23 S X1=$P(X,U,6),@ARRAY@(23)=$S(X1:$E(X1,1,6),1:HLQ)
"RTN","VAFHLZPD",191,0)
 ; Sequences 24 through 27
"RTN","VAFHLZPD",192,0)
 I VAFSTR[24!(VAFSTR[25)!(VAFSTR[26)!(VAFSTR[27) D
"RTN","VAFHLZPD",193,0)
 .; Most recent care dates & locations
"RTN","VAFHLZPD",194,0)
 .S X=$G(^DPT(DFN,1010.15))
"RTN","VAFHLZPD",195,0)
 .I VAFSTR[24 S X1=$$HLDATE^HLFNC($P(X,U)),@ARRAY@(24)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",196,0)
 .I VAFSTR[25 S X1=$P(X,U,2),X1=$P($G(^DIC(4,+X1,0)),U),@ARRAY@(25)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",197,0)
 .I VAFSTR[26 S X1=$$HLDATE^HLFNC($P(X,U,3)),@ARRAY@(26)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",198,0)
 .I VAFSTR[27 S X1=$P(X,U,4),X1=$P($G(^DIC(4,+X1,0)),U),@ARRAY@(27)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",199,0)
 ; Sequences 28 & 29
"RTN","VAFHLZPD",200,0)
 I VAFSTR[28!(VAFSTR[29) D
"RTN","VAFHLZPD",201,0)
 .; dates ruled incompetent (civil and VA)
"RTN","VAFHLZPD",202,0)
 .S X=$G(^DPT(DFN,.29))
"RTN","VAFHLZPD",203,0)
 .I VAFSTR[28 S X1=$$HLDATE^HLFNC($P(X,U,2)),@ARRAY@(28)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",204,0)
 .I VAFSTR[29 S X1=$$HLDATE^HLFNC($P(X,U)),@ARRAY@(29)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",205,0)
 ; Sequence 30 - Spinal cord injury
"RTN","VAFHLZPD",206,0)
 I VAFSTR[30 S X=$P($G(^DPT(DFN,57)),U,4),@ARRAY@(30)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",207,0)
 ; Sequence 31 - Source of Notification
"RTN","VAFHLZPD",208,0)
 I VAFSTR[9&(VAFSTR[31) S X=$P($G(^DPT(DFN,.35)),U,3),@ARRAY@(31)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",209,0)
 ; Sequence 32 - Date/Time Last Updated
"RTN","VAFHLZPD",210,0)
 I VAFSTR[9&(VAFSTR[32) S X=$P($G(^DPT(DFN,.35)),U,4),X1=$$HLDATE^HLFNC(X),@ARRAY@(32)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLZPD",211,0)
 ; Sequence 33 - Filipino Veteran Proof
"RTN","VAFHLZPD",212,0)
 I VAFSTR[33 S X=$P($G(^DPT(DFN,.321)),U,14),@ARRAY@(33)=$S(X]"":X,1:HLQ)
"RTN","VAFHLZPD",213,0)
 ;Done - cleanup & quit
"RTN","VAFHLZPD",214,0)
 D KVA^VADPT
"RTN","VAFHLZPD",215,0)
 Q
"RTN","VAFHLZPD",216,0)
 ;
"RTN","VAFHLZPD",217,0)
COMMANUM(FROM,TO) ;Build comma seperated list of numbers
"RTN","VAFHLZPD",218,0)
 ;Input  : FROM - Starting number (default = 1)
"RTN","VAFHLZPD",219,0)
 ;         TO - Ending number (default = FROM)
"RTN","VAFHLZPD",220,0)
 ;Output : Comma seperated list of numbers between FROM and TO
"RTN","VAFHLZPD",221,0)
 ;         (Ex: 1,2,3)
"RTN","VAFHLZPD",222,0)
 ;Notes  : Call assumes FROM <= TO
"RTN","VAFHLZPD",223,0)
 ;
"RTN","VAFHLZPD",224,0)
 S FROM=$G(FROM) S:(FROM="") FROM=1
"RTN","VAFHLZPD",225,0)
 S TO=$G(TO) S:(TO="") TO=FROM
"RTN","VAFHLZPD",226,0)
 N OUTPUT,X
"RTN","VAFHLZPD",227,0)
 S OUTPUT=FROM
"RTN","VAFHLZPD",228,0)
 F X=(FROM+1):1:TO S OUTPUT=(OUTPUT_","_X)
"RTN","VAFHLZPD",229,0)
 Q OUTPUT
"VER")
8.0^22
"^DD",2,2,.305,0)
UNEMPLOYABLE^S^Y:YES;N:NO;^.3;5^Q
"^DD",2,2,.305,1,0)
^.1
"^DD",2,2,.305,1,1,0)
2^AENR305^MUMPS
"^DD",2,2,.305,1,1,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.305,1,1,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.305,1,1,3)
DO NOT DELETE
"^DD",2,2,.305,1,1,"%D",0)
^^2^2^3040722^
"^DD",2,2,.305,1,1,"%D",1,0)
This cross-reference is used to update the patient's current
"^DD",2,2,.305,1,1,"%D",2,0)
Patient Enrollment record.
"^DD",2,2,.305,1,1,"DT")
3040722
"^DD",2,2,.305,3)
Is this patient unemployable due to an SC condition as rated by VARO?
"^DD",2,2,.305,21,0)
^^2^2^2911203^^
"^DD",2,2,.305,21,1,0)
Is this patient rated unemployable by the VARO due to a service connected
"^DD",2,2,.305,21,2,0)
condition?
"^DD",2,2,.305,"DT")
3040722
"^DD",2,2,.32101,0)
VIETNAM SERVICE INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.321;1^S DFN=DA D SV^DGLOCK
"^DD",2,2,.32101,.1)
DID YOU SERVE IN VIET NAM
"^DD",2,2,.32101,1,0)
^.1
"^DD",2,2,.32101,1,1,0)
^^TRIGGER^2^.32104
"^DD",2,2,.32101,1,1,1)
X ^DD(2,.32101,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,4) S DIU=X K Y S X=DIV S X="" X ^DD(2,.32101,1,1,1.4)
"^DD",2,2,.32101,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.32101,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.32101,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.321)):^(.321),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,3,99))  S DIH=DIH_U" S %=$P(DIH,U,5,999),DIU=$P(DIH,U,4),^(.321)=$P(DIH,U,1,3)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.32104 D ^DICR
"^DD",2,2,.32101,1,1,2)
Q
"^DD",2,2,.32101,1,1,"CREATE CONDITION")
#.32101="NO"
"^DD",2,2,.32101,1,1,"CREATE VALUE")
@
"^DD",2,2,.32101,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32101,1,1,"FIELD")
#.32104
"^DD",2,2,.32101,1,2,0)
^^TRIGGER^2^.32105
"^DD",2,2,.32101,1,2,1)
X ^DD(2,.32101,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.321)):^(.321),1:"") S X=$P(Y(1),U,5) S DIU=X K Y S X=DIV S X="" X ^DD(2,.32101,1,2,1.4)
"^DD",2,2,.32101,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.32101,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.32101,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.321)):^(.321),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,4,99))  S DIH=DIH_U" S %=$P(DIH,U,6,999),DIU=$P(DIH,U,5),^(.321)=$P(DIH,U,1,4)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.32105 D ^DICR
"^DD",2,2,.32101,1,2,2)
Q
"^DD",2,2,.32101,1,2,"CREATE CONDITION")
#.32101="NO"
"^DD",2,2,.32101,1,2,"CREATE VALUE")
@
"^DD",2,2,.32101,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32101,1,2,"FIELD")
#.32105
"^DD",2,2,.32101,1,3,0)
2^AENR32101^MUMPS
"^DD",2,2,.32101,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32101,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32101,1,3,"%D",0)
^^2^2^3040614^
"^DD",2,2,.32101,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.32101,1,3,"%D",2,0)
VIETNAM SERVICE INDICATED? field.
"^DD",2,2,.32101,1,3,"DT")
3040614
"^DD",2,2,.32101,3)
Enter 'Y' if this patient served in Vietnam, 'N' if not, 'U' if unknown.
"^DD",2,2,.32101,20,0)
^.3LA^1^1
"^DD",2,2,.32101,20,1,0)
VN
"^DD",2,2,.32101,21,0)
^^4^4^2930629^^^
"^DD",2,2,.32101,21,1,0)
For this veteran applicant enter 'Y' if s/he actually served in the
"^DD",2,2,.32101,21,2,0)
Republic of Vietnam, 'N' if not, or 'U' if unknown.  Once the service
"^DD",2,2,.32101,21,3,0)
record has been verified only users who hold the designated security
"^DD",2,2,.32101,21,4,0)
key may enter/edit this field.
"^DD",2,2,.32101,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.32101,"DT")
3040614
"^DD",2,2,.32104,0)
VIETNAM FROM DATE^RDX^^.321;4^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"VIET",X,0) X I $D(X) S DFN=DA D VN^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.32104,.1)

"^DD",2,2,.32104,1,0)
^.1
"^DD",2,2,.32104,1,1,0)
2^AENR32104^MUMPS
"^DD",2,2,.32104,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32104,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32104,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.32104,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.32104,1,1,"%D",2,0)
VIETNAM FROM DATE field.
"^DD",2,2,.32104,1,1,"DT")
3040614
"^DD",2,2,.32104,3)
Enter the date this patient commenced service in the Republic of Vietnam.
"^DD",2,2,.32104,5,1,0)
2^.32101^1
"^DD",2,2,.32104,20,0)
^.3LA^1^1
"^DD",2,2,.32104,20,1,0)
VN
"^DD",2,2,.32104,21,0)
^^6^6^3040402^
"^DD",2,2,.32104,21,1,0)
For this veteran applicant who served in the Republic of Vietnam (DID
"^DD",2,2,.32104,21,2,0)
YOU SERVE IN VIETNAM prompt must be answered YES) enter the date on which
"^DD",2,2,.32104,21,3,0)
service in vietnam commenced [between February 28, 1961 and May 7, 1975].
"^DD",2,2,.32104,21,4,0)
Once the service record is verified only users who hold the designated
"^DD",2,2,.32104,21,5,0)
security key may enter/edit this field.  As long as Vietnam service is
"^DD",2,2,.32104,21,6,0)
indicated this date may not be deleted.                                
"^DD",2,2,.32104,"DEL",1,0)
S DFN=DA D VND^DGLOCK1 I '$D(X)
"^DD",2,2,.32104,"DT")
3040722
"^DD",2,2,.32105,0)
VIETNAM TO DATE^RDX^^.321;5^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"VIET",X,1) X I $D(X) S DFN=DA D VN^DGLOCK
"^DD",2,2,.32105,.1)

"^DD",2,2,.32105,1,0)
^.1
"^DD",2,2,.32105,1,1,0)
2^AENR32105^MUMPS
"^DD",2,2,.32105,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32105,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32105,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.32105,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.32105,1,1,"%D",2,0)
VIETNAM TO DATE field.
"^DD",2,2,.32105,1,1,"DT")
3040614
"^DD",2,2,.32105,3)
Enter the date this patient ended service in the Republic of Vietnam.
"^DD",2,2,.32105,5,1,0)
2^.32101^2
"^DD",2,2,.32105,20,0)
^.3LA^1^1
"^DD",2,2,.32105,20,1,0)
VN
"^DD",2,2,.32105,21,0)
^^6^6^3040407^
"^DD",2,2,.32105,21,1,0)
For this veteran applicant who served in the Republic of Vietnam (DID
"^DD",2,2,.32105,21,2,0)
YOU SERVE IN VIETNAM prompt must be answered YES) enter the date on which
"^DD",2,2,.32105,21,3,0)
service in Vietnam ended [between February 28, 1961 and May 7, 1975]. Once
"^DD",2,2,.32105,21,4,0)
the service record is verified only user who hold the designated security
"^DD",2,2,.32105,21,5,0)
key may enter/edit this field.  As long as Vietnam service is indicated
"^DD",2,2,.32105,21,6,0)
this date may not be deleted.
"^DD",2,2,.32105,"DEL",1,0)
S DFN=DA D VND^DGLOCK1 I '$D(X)
"^DD",2,2,.32105,"DT")
3040614
"^DD",2,2,.3212,0)
RADIATION EXPOSURE METHOD^SX^N:NAGASAKI/HIROSHIMA;T:NUCLEAR TESTING;B:BOTH;^.321;12^S DFN=DA D IR^DGLOCK Q
"^DD",2,2,.3212,.1)

"^DD",2,2,.3212,1,0)
^.1
"^DD",2,2,.3212,1,1,0)
2^AENR3212^MUMPS
"^DD",2,2,.3212,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3212,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3212,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3212,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3212,1,1,"%D",2,0)
RADIATION EXPOSURE METHOD field.
"^DD",2,2,.3212,1,1,"DT")
3040614
"^DD",2,2,.3212,3)
Select from the listing available the method by which this patient was exposed to ionizing radiation.
"^DD",2,2,.3212,5,1,0)
2^.32103^1
"^DD",2,2,.3212,20,0)
^.3LA^1^1
"^DD",2,2,.3212,20,1,0)
IRD
"^DD",2,2,.3212,21,0)
^^6^6^2861007^^^
"^DD",2,2,.3212,21,1,0)
For this veteran applicant who was exposed to ionizing radiation
"^DD",2,2,.3212,21,2,0)
(WERE YOU EXPOSED TO RADIATION prompt must be answered YES) select
"^DD",2,2,.3212,21,3,0)
from the following list the method of exposure.  Once the service
"^DD",2,2,.3212,21,4,0)
record is verified only those users who hold the designated
"^DD",2,2,.3212,21,5,0)
security key may enter/edit this field.  This field cannot be
"^DD",2,2,.3212,21,6,0)
deleted as long as ionizing radiation exposure is indicated.
"^DD",2,2,.3212,"DEL",1,0)
S DFN=DA D IRD^DGLOCK1 I '$D(X)
"^DD",2,2,.3212,"DT")
3040614
"^DD",2,2,.3213,0)
AGENT ORANGE EXPOSURE LOCATION^RSX^K:KOREAN DMZ;V:VIETNAM;^.321;13^S DFN=DA D AO^DGLOCK
"^DD",2,2,.3213,.1)
Agent Orange Exposure Location
"^DD",2,2,.3213,1,0)
^.1
"^DD",2,2,.3213,1,1,0)
2^AENR3213^MUMPS
"^DD",2,2,.3213,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3213,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3213,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3213,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3213,1,1,"%D",2,0)
AGENT ORANGE EXPOSURE LOCATION field.
"^DD",2,2,.3213,1,1,"DT")
3040614
"^DD",2,2,.3213,3)
Enter where the patient was exposed to agent orange
"^DD",2,2,.3213,5,1,0)
2^.32102^5
"^DD",2,2,.3213,21,0)
^.001^5^5^3040526^^^^
"^DD",2,2,.3213,21,1,0)
For this veteran applicant who was exposed to agent orange (EXPOSED TO
"^DD",2,2,.3213,21,2,0)
AGENT ORANGE prompt must be answered YES) enter the location where the
"^DD",2,2,.3213,21,3,0)
exposure occurred.  Once the service record has been verified only users
"^DD",2,2,.3213,21,4,0)
who hold the designated security key may enter/edit this field.  This
"^DD",2,2,.3213,21,5,0)
field cannot be deleted as long as agent orange exposure is indicated.
"^DD",2,2,.3213,"DEL",1,0)
S DFN=DA D AOD^DGLOCK1 I '$D(X)
"^DD",2,2,.3213,"DT")
3040614
"^DD",2,2,.3214,0)
FILIPINO VETERAN PROOF^S^PP:US PASSPORT;BC:US BIRTH CERTIFICATE;BA:REPORT OF BIRTH ABROAD OF US CITIZEN;NA:VERIFICATION OF NATURALIZATION;PR:VERIFICATION OF PERMANENT RESIDENCY;VA:VA COMPENSATION AT FULL DOLLAR RATE;NO:NO PROOF;^.321;14^Q
"^DD",2,2,.3214,1,0)
^.1
"^DD",2,2,.3214,1,1,0)
2^AENR3214^MUMPS
"^DD",2,2,.3214,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3214,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3214,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3214,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3214,1,1,"%D",2,0)
FILIPINO VETERAN PROOF field.
"^DD",2,2,.3214,1,1,"DT")
3040614
"^DD",2,2,.3214,21,0)
^.001^5^5^3040303^^^^
"^DD",2,2,.3214,21,1,0)
Enter in this field the documentation that was provided in order to
"^DD",2,2,.3214,21,2,0)
establish US citizenship, lawful permanent US residency, and/or VA
"^DD",2,2,.3214,21,3,0)
Compensation at full-dollar rate for a Filipino Veteran (i.e., a 
"^DD",2,2,.3214,21,4,0)
veteran whose Branch of Service is F. Commonwealth, F. Guerilla, or F.
"^DD",2,2,.3214,21,5,0)
Scouts New)
"^DD",2,2,.3214,"DT")
3040614
"^DD",2,2,.32201,0)
PERSIAN GULF SERVICE?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;10^S DFN=DA S DGX=10 D SV^DGLOCK
"^DD",2,2,.32201,.1)
DID YOU SERVE IN THE PERSIAN GULF WAR?
"^DD",2,2,.32201,1,0)
^.1
"^DD",2,2,.32201,1,1,0)
^^TRIGGER^2^.322011
"^DD",2,2,.32201,1,1,1)
X ^DD(2,.32201,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" X ^DD(2,.32201,1,1,1.4)
"^DD",2,2,.32201,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.32201,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,11)=DIV,DIH=2,DIG=.322011 D ^DICR
"^DD",2,2,.32201,1,1,2)
Q
"^DD",2,2,.32201,1,1,"%D",0)
^^2^2^2920116^
"^DD",2,2,.32201,1,1,"%D",1,0)
If service in the Persian Gulf is no longer indicated, remove the PERSIAN
"^DD",2,2,.32201,1,1,"%D",2,0)
GULF FROM DATE.
"^DD",2,2,.32201,1,1,"CREATE CONDITION")
#.32201="NO"
"^DD",2,2,.32201,1,1,"CREATE VALUE")
@
"^DD",2,2,.32201,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32201,1,1,"FIELD")
PERSIAN GULF FROM DATE
"^DD",2,2,.32201,1,2,0)
^^TRIGGER^2^.322012
"^DD",2,2,.32201,1,2,1)
X ^DD(2,.32201,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" X ^DD(2,.32201,1,2,1.4)
"^DD",2,2,.32201,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.32201,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,12)=DIV,DIH=2,DIG=.322012 D ^DICR
"^DD",2,2,.32201,1,2,2)
Q
"^DD",2,2,.32201,1,2,"%D",0)
^^2^2^2920116^
"^DD",2,2,.32201,1,2,"%D",1,0)
If service in the Persian Gulf is no longer indicated, remove the PERSIAN
"^DD",2,2,.32201,1,2,"%D",2,0)
GULF TO DATE.
"^DD",2,2,.32201,1,2,"CREATE CONDITION")
#.32201="NO"
"^DD",2,2,.32201,1,2,"CREATE VALUE")
@
"^DD",2,2,.32201,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.32201,1,2,"DT")
2920116
"^DD",2,2,.32201,1,2,"FIELD")
PERSIAN GULF TO DATE
"^DD",2,2,.32201,1,3,0)
^^TRIGGER^2^.322013
"^DD",2,2,.32201,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(2,.32201,1,3,69.3) S X=X&Y I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" X ^DD(2,.32201,1,3,1.4)
"^DD",2,2,.32201,1,3,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,13)=DIV,DIH=2,DIG=.322013 D ^DICR
"^DD",2,2,.32201,1,3,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(2,.32201,1,3,79.3) S Y=X,X=Y(3),X=X&Y I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" X ^DD(2,.32201,1,3,2.4)
"^DD",2,2,.32201,1,3,2.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,13)=DIV,DIH=2,DIG=.322013 D ^DICR
"^DD",2,2,.32201,1,3,69.2)
S Y(1)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:""),Y(4)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:""),Y(3)=$S($D(^DPT(D0,.322)):^(.322),1:"")
"^DD",2,2,.32201,1,3,69.3)
X ^DD(2,.32201,1,3,69.2) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO",Y(2)=X S X=$P($P(Y(4),$C(59)_$P(Y(3),U,16)_":",2),$C(59),1)'="YES",Y=X,X=Y(2),X=X
"^DD",2,2,.32201,1,3,79.2)
S Y(2)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:""),Y(4)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"")
"^DD",2,2,.32201,1,3,79.3)
X ^DD(2,.32201,1,3,79.2) S X=$P($P(Y(2),$C(59)_$P(Y(1),U,10)_":",2),$C(59),1)="NO",Y(3)=X S X=$P($P(Y(4),$C(59)_$P(Y(1),U,16)_":",2),$C(59),1)'="YES"
"^DD",2,2,.32201,1,3,"%D",0)
^^3^3^2930604^
"^DD",2,2,.32201,1,3,"%D",1,0)
If neither of the two fields (Persian Gulf Service? and Somalia Service
"^DD",2,2,.32201,1,3,"%D",2,0)
Indicated?) are 'YES', the Environmental Contaminants? field will be
"^DD",2,2,.32201,1,3,"%D",3,0)
deleted.
"^DD",2,2,.32201,1,3,"CREATE CONDITION")
#.32201="NO"&(#.322016'="YES")
"^DD",2,2,.32201,1,3,"CREATE VALUE")
@
"^DD",2,2,.32201,1,3,"DELETE CONDITION")
#.32201="NO"&(#.322016'="YES")
"^DD",2,2,.32201,1,3,"DELETE VALUE")
@
"^DD",2,2,.32201,1,3,"DT")
2930604
"^DD",2,2,.32201,1,3,"FIELD")
#.322013
"^DD",2,2,.32201,1,4,0)
2^AENR32201^MUMPS
"^DD",2,2,.32201,1,4,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32201,1,4,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32201,1,4,"%D",0)
^^2^2^3040614^
"^DD",2,2,.32201,1,4,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.32201,1,4,"%D",2,0)
PERSIAN GULF SERVICE? field.
"^DD",2,2,.32201,1,4,"DT")
3040614
"^DD",2,2,.32201,3)
Did this patient serve in the Persian Gulf War?  Answer yes, no, or unknown.
"^DD",2,2,.32201,21,0)
^^4^4^2930629^^^^
"^DD",2,2,.32201,21,1,0)
If this patient served in the Persian Gulf during the war (anytime after
"^DD",2,2,.32201,21,2,0)
August 2, 1990), enter yes here.  If the patient did not serve in the
"^DD",2,2,.32201,21,3,0)
Persian Gulf during this timeframe, enter no.  Enter unknown if this
"^DD",2,2,.32201,21,4,0)
information could not be obtained from the patient.
"^DD",2,2,.32201,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.32201,"DT")
3040628
"^DD",2,2,.322011,0)
PERSIAN GULF FROM DATE^RDX^^.322;11^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GULF",X) X I $D(X) S DFN=DA,DGX=10 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.322011,1,0)
^.1
"^DD",2,2,.322011,1,1,0)
2^AENR322011^MUMPS
"^DD",2,2,.322011,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322011,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322011,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322011,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322011,1,1,"%D",2,0)
PERSIAN GULF FROM DATE field.
"^DD",2,2,.322011,1,1,"DT")
3040614
"^DD",2,2,.322011,3)
TYPE A DATE BETWEEN 8/2/1990 AND TODAY INDICATING THE DATE THIS PATIENT BEGAN SERVING IN THE PERSIAN GULF.
"^DD",2,2,.322011,5,1,0)
2^.32201^1
"^DD",2,2,.322011,21,0)
^^3^3^2930302^^^
"^DD",2,2,.322011,21,1,0)
If this patient served in the Persian Gulf during the war (PERSIAN
"^DD",2,2,.322011,21,2,0)
GULF SERVICE? is answered YES), respond with the date the patient
"^DD",2,2,.322011,21,3,0)
began serving there.  The date must be on or after August 2, 1990.
"^DD",2,2,.322011,"DEL",1,0)
S DFN=DA,DGX=10 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.322011,"DT")
3040722
"^DD",2,2,.322012,0)
PERSIAN GULF TO DATE^RDX^^.322;12^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GULF",X,1) X I $D(X) S DFN=DA,DGX=10 D SVED^DGLOCK
"^DD",2,2,.322012,1,0)
^.1
"^DD",2,2,.322012,1,1,0)
2^AENR322012^MUMPS
"^DD",2,2,.322012,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322012,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322012,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322012,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322012,1,1,"%D",2,0)
PERSIAN GULF TO DATE field.
"^DD",2,2,.322012,1,1,"DT")
3040614
"^DD",2,2,.322012,3)
Enter the date this patient's service in the Persian Gulf ended.  Date must either be null or in the past.
"^DD",2,2,.322012,5,1,0)
2^.32201^2
"^DD",2,2,.322012,21,0)
^^4^4^2920417^^
"^DD",2,2,.322012,21,1,0)
If this patient served in the Persian Gulf during the war, enter the date
"^DD",2,2,.322012,21,2,0)
the patient's service in that region ended.  The date must be after the
"^DD",2,2,.322012,21,3,0)
date selected as PERSIAN GULF FROM DATE which must be on or after August
"^DD",2,2,.322012,21,4,0)
2, 1990.
"^DD",2,2,.322012,"DEL",1,0)
S DFN=DA,DGX=10 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.322012,"DT")
3040628
"^DD",2,2,.322016,0)
SOMALIA SERVICE INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;16^S DFN=DA D SV^DGLOCK
"^DD",2,2,.322016,1,0)
^.1
"^DD",2,2,.322016,1,1,0)
^^TRIGGER^2^.322017
"^DD",2,2,.322016,1,1,1)
X ^DD(2,.322016,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,17),X=X S DIU=X K Y S X="" X ^DD(2,.322016,1,1,1.4)
"^DD",2,2,.322016,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.322016,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,17)=DIV,DIH=2,DIG=.322017 D ^DICR
"^DD",2,2,.322016,1,1,2)
Q
"^DD",2,2,.322016,1,1,"%D",0)
^^1^1^2990802^^
"^DD",2,2,.322016,1,1,"%D",1,0)
If Somalia Indicated is NO, FROM DATE is deleted.
"^DD",2,2,.322016,1,1,"CREATE CONDITION")
#.322016="NO"
"^DD",2,2,.322016,1,1,"CREATE VALUE")
@
"^DD",2,2,.322016,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.322016,1,1,"DT")
2930415
"^DD",2,2,.322016,1,1,"FIELD")
#.322017
"^DD",2,2,.322016,1,2,0)
^^TRIGGER^2^.322018
"^DD",2,2,.322016,1,2,1)
X ^DD(2,.322016,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,18),X=X S DIU=X K Y S X="" X ^DD(2,.322016,1,2,1.4)
"^DD",2,2,.322016,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.322016,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,18)=DIV,DIH=2,DIG=.322018 D ^DICR
"^DD",2,2,.322016,1,2,2)
Q
"^DD",2,2,.322016,1,2,"%D",0)
^^1^1^2930415^
"^DD",2,2,.322016,1,2,"%D",1,0)
If Somalia Indicated is NO, TO DATE is deleted.
"^DD",2,2,.322016,1,2,"CREATE CONDITION")
#.322016="NO"
"^DD",2,2,.322016,1,2,"CREATE VALUE")
@
"^DD",2,2,.322016,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.322016,1,2,"DT")
2930415
"^DD",2,2,.322016,1,2,"FIELD")
#.322018
"^DD",2,2,.322016,1,3,0)
^^TRIGGER^2^.322013
"^DD",2,2,.322016,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(2,.322016,1,3,69.3) S Y=X,X=Y(2),X=X&Y I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" X ^DD(2,.322016,1,3,1.4)
"^DD",2,2,.322016,1,3,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,13)=DIV,DIH=2,DIG=.322013 D ^DICR
"^DD",2,2,.322016,1,3,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(2,.322016,1,3,79.3) S Y=X,X=Y(3),X=X&Y I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" X ^DD(2,.322016,1,3,2.4)
"^DD",2,2,.322016,1,3,2.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,13)=DIV,DIH=2,DIG=.322013 D ^DICR
"^DD",2,2,.322016,1,3,69.2)
S Y(1)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:""),Y(4)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:""),Y(3)=$S($D(^DPT(D0,.322)):^(.322),1:"")
"^DD",2,2,.322016,1,3,69.3)
X ^DD(2,.322016,1,3,69.2) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)'="YES",Y(2)=X S X=$P($P(Y(4),$C(59)_$P(Y(3),U,10)_":",2),$C(59),1)'="YES"
"^DD",2,2,.322016,1,3,79.2)
S Y(2)=$C(59)_$S($D(^DD(2,.322016,0)):$P(^(0),U,3),1:""),Y(4)=$C(59)_$S($D(^DD(2,.32201,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"")
"^DD",2,2,.322016,1,3,79.3)
X ^DD(2,.322016,1,3,79.2) S X=$P($P(Y(2),$C(59)_$P(Y(1),U,16)_":",2),$C(59),1)'="YES",Y(3)=X S X=$P($P(Y(4),$C(59)_$P(Y(1),U,10)_":",2),$C(59),1)'="YES"
"^DD",2,2,.322016,1,3,"%D",0)
^^3^3^2930604^
"^DD",2,2,.322016,1,3,"%D",1,0)
This trigger deletes the 'ENVIRONMENTAL CONTAMINANTS?' field when
"^DD",2,2,.322016,1,3,"%D",2,0)
neither the SOMALIA SERVICE INDICATED? nor the PERSIAN GULF SERVICE?
"^DD",2,2,.322016,1,3,"%D",3,0)
fields are YES.
"^DD",2,2,.322016,1,3,"CREATE CONDITION")
#.322016'="YES"&(#.32201'="YES")
"^DD",2,2,.322016,1,3,"CREATE VALUE")
@
"^DD",2,2,.322016,1,3,"DELETE CONDITION")
#.322016'="YES"&(#.32201'="YES")
"^DD",2,2,.322016,1,3,"DELETE VALUE")
@
"^DD",2,2,.322016,1,3,"DT")
2930604
"^DD",2,2,.322016,1,3,"FIELD")
#.322013
"^DD",2,2,.322016,1,4,0)
2^AENR322016^MUMPS
"^DD",2,2,.322016,1,4,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322016,1,4,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322016,1,4,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322016,1,4,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322016,1,4,"%D",2,0)
SOMALIA SERVICE INDICATED? field.
"^DD",2,2,.322016,1,4,"DT")
3040614
"^DD",2,2,.322016,3)
Did this patient serve in Somalia?
"^DD",2,2,.322016,21,0)
^^3^3^2990902^^^^
"^DD",2,2,.322016,21,1,0)
If this patient served in the Somalia, enter yes here.  If the patient 
"^DD",2,2,.322016,21,2,0)
did not serve in Somalia, enter no. Enter unknown if this information 
"^DD",2,2,.322016,21,3,0)
could not be obtained from the patient.
"^DD",2,2,.322016,"DT")
3040628
"^DD",2,2,.322017,0)
SOMALIA FROM DATE^RDX^^.322;17^S %DT="E" D ^%DT S X=Y K:Y<1 X I $D(X) K:'$$VALCON^DGRPMS(DA,"SOM",X) X I $D(X) S DFN=DA,DGX=16 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.322017,1,0)
^.1
"^DD",2,2,.322017,1,1,0)
2^AENR322017^MUMPS
"^DD",2,2,.322017,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322017,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322017,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322017,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322017,1,1,"%D",2,0)
SOMALIA FROM DATE field.
"^DD",2,2,.322017,1,1,"DT")
3040614
"^DD",2,2,.322017,3)
Enter the date veteran's service in Somalia began.
"^DD",2,2,.322017,5,1,0)
2^.322016^1
"^DD",2,2,.322017,21,0)
^^3^3^3040402^
"^DD",2,2,.322017,21,1,0)
If this patient served in Somalia (SOMALIA SERVICE INDICATED? is 
"^DD",2,2,.322017,21,2,0)
answered YES), enter the date this patient's service in Somalia
"^DD",2,2,.322017,21,3,0)
began.  This date must be on or after September 28, 1992.
"^DD",2,2,.322017,23,0)
^^1^1^2990802^^^^
"^DD",2,2,.322017,23,1,0)
This is the date Somalia service began.
"^DD",2,2,.322017,"DT")
3040722
"^DD",2,2,.322018,0)
SOMALIA TO DATE^RDX^^.322;18^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"SOM",X,1) X I $D(X) S DFN=DA,DGX=16 D SVED^DGLOCK
"^DD",2,2,.322018,1,0)
^.1
"^DD",2,2,.322018,1,1,0)
2^AENR322018^MUMPS
"^DD",2,2,.322018,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322018,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322018,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322018,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322018,1,1,"%D",2,0)
SOMALIA TO DATE field.
"^DD",2,2,.322018,1,1,"DT")
3040614
"^DD",2,2,.322018,3)
Enter the date veteran's service in Somalia ended.
"^DD",2,2,.322018,5,1,0)
2^.322016^2
"^DD",2,2,.322018,21,0)
^^2^2^3040402^
"^DD",2,2,.322018,21,1,0)
This is the last date of service in Somalia.  This date must be on or 
"^DD",2,2,.322018,21,2,0)
after September 28, 1992.
"^DD",2,2,.322018,"DT")
3040628
"^DD",2,2,.322019,0)
YUGOSLAVIA SERVICE INDICATED?^SX^Y:YES;N:NO;U:UNKNOWN;^.322;19^S DFN=DA D SV^DGLOCK
"^DD",2,2,.322019,1,0)
^.1
"^DD",2,2,.322019,1,1,0)
^^TRIGGER^2^.32202
"^DD",2,2,.322019,1,1,1)
X ^DD(2,.322019,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,20),X=X S DIU=X K Y S X="" X ^DD(2,.322019,1,1,1.4)
"^DD",2,2,.322019,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.322019,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)["N"
"^DD",2,2,.322019,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,20)=DIV,DIH=2,DIG=.32202 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",2,2,.322019,1,1,2)
Q
"^DD",2,2,.322019,1,1,"%D",0)
^^1^1^2990818^
"^DD",2,2,.322019,1,1,"%D",1,0)
If KOSOVO SERVICE is not indicated, delete the KOSOVO FROM DATE.
"^DD",2,2,.322019,1,1,"CREATE CONDITION")
KOSOVO SERVICE INDICATED?["N"
"^DD",2,2,.322019,1,1,"CREATE VALUE")
@
"^DD",2,2,.322019,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.322019,1,1,"FIELD")
#.32202
"^DD",2,2,.322019,1,2,0)
^^TRIGGER^2^.322021
"^DD",2,2,.322019,1,2,1)
X ^DD(2,.322019,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,21),X=X S DIU=X K Y S X="" X ^DD(2,.322019,1,2,1.4)
"^DD",2,2,.322019,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.322019,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)["N"
"^DD",2,2,.322019,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,21)=DIV,DIH=2,DIG=.322021 D ^DICR
"^DD",2,2,.322019,1,2,2)
Q
"^DD",2,2,.322019,1,2,"%D",0)
^^1^1^2990818^
"^DD",2,2,.322019,1,2,"%D",1,0)
This cross-reference will delete KOSOVO TO DATE if the KOSOVO SERVICE INDICATED? field is deleted.
"^DD",2,2,.322019,1,2,"CREATE CONDITION")
KOSOVO SERVICE INDICATED?["N"
"^DD",2,2,.322019,1,2,"CREATE VALUE")
@
"^DD",2,2,.322019,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.322019,1,2,"DT")
2990818
"^DD",2,2,.322019,1,2,"FIELD")
#.322021
"^DD",2,2,.322019,1,3,0)
2^AENR322019^MUMPS
"^DD",2,2,.322019,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322019,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322019,1,3,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322019,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322019,1,3,"%D",2,0)
YUGOSLAVIA SERVICE INDICATED? field.
"^DD",2,2,.322019,1,3,"DT")
3040614
"^DD",2,2,.322019,3)
Respond yes if patient served in the Kosovo Conflict (the airspace above and the adjacent waters of the Republic of Yugoslavia (Serbia/Montenegro), the Adriatic Sea & Ionian Sea n. of 39th parallel).
"^DD",2,2,.322019,21,0)
^^1^1^2990924^^^
"^DD",2,2,.322019,21,1,0)
Field stores code indicating if patient served in the Yugolslavia Conflict.
"^DD",2,2,.322019,"DT")
3040628
"^DD",2,2,.32202,0)
YUGOSLAVIA FROM DATE^RDX^^.322;20^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"YUG",X) X I $D(X) S DFN=DA,DGX=19 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.32202,1,0)
^.1
"^DD",2,2,.32202,1,1,0)
2^AENR32202^MUMPS
"^DD",2,2,.32202,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32202,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.32202,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.32202,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.32202,1,1,"%D",2,0)
YUGOSLAVIA FROM DATE field.
"^DD",2,2,.32202,1,1,"DT")
3040614
"^DD",2,2,.32202,3)
Type a date between June 22, 1992 and today indicating the date this patient began serving in the Yugoslavia Conflict.
"^DD",2,2,.32202,5,1,0)
2^.322019^1
"^DD",2,2,.32202,21,0)
^^2^2^3040402^
"^DD",2,2,.32202,21,1,0)
Enter the date that service in the Yugoslavia Conflict began for this
"^DD",2,2,.32202,21,2,0)
patient.  Earliest possible date is 6/22/1992.
"^DD",2,2,.32202,"DT")
3040722
"^DD",2,2,.322021,0)
YUGOSLAVIA TO DATE^RDX^^.322;21^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"YUG",X,1) X I $D(X) S DFN=DA,DGX=19 D SVED^DGLOCK
"^DD",2,2,.322021,1,0)
^.1
"^DD",2,2,.322021,1,1,0)
2^AENR322021^MUMPS
"^DD",2,2,.322021,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322021,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.322021,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.322021,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.322021,1,1,"%D",2,0)
YUGOSLAVIA TO DATE field.
"^DD",2,2,.322021,1,1,"DT")
3040614
"^DD",2,2,.322021,3)
Enter the date this patient's service in the Yugoslavia Conflict ended.  Date must be after June 22, 1992.
"^DD",2,2,.322021,5,1,0)
2^.322019^2
"^DD",2,2,.322021,21,0)
^^1^1^3040402^
"^DD",2,2,.322021,21,1,0)
The date service in the Yugoslavia Conflict ended for this patient.
"^DD",2,2,.322021,"DT")
3040628
"^DD",2,2,.3221,0)
LEBANON SERVICE INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;1^S DFN=DA D SV^DGLOCK
"^DD",2,2,.3221,.1)
DID YOU SERVE IN LEBANON?
"^DD",2,2,.3221,1,0)
^.1
"^DD",2,2,.3221,1,1,0)
^^TRIGGER^2^.3222
"^DD",2,2,.3221,1,1,1)
X ^DD(2,.3221,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(2,.3221,1,1,1.4)
"^DD",2,2,.3221,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3221,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3221,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,2)=DIV,DIH=2,DIG=.3222 D ^DICR
"^DD",2,2,.3221,1,1,2)
Q
"^DD",2,2,.3221,1,1,"%D",0)
^^1^1^2990803^^
"^DD",2,2,.3221,1,1,"%D",1,0)
If Lebanon service not indicated, remove the LEBANON FROM DATE.
"^DD",2,2,.3221,1,1,"CREATE CONDITION")
#.3221="NO"
"^DD",2,2,.3221,1,1,"CREATE VALUE")
@
"^DD",2,2,.3221,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3221,1,1,"DT")
2920615
"^DD",2,2,.3221,1,1,"FIELD")
LEBANON FROM DATE
"^DD",2,2,.3221,1,2,0)
^^TRIGGER^2^.3223
"^DD",2,2,.3221,1,2,1)
X ^DD(2,.3221,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(2,.3221,1,2,1.4)
"^DD",2,2,.3221,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3221,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3221,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,3)=DIV,DIH=2,DIG=.3223 D ^DICR
"^DD",2,2,.3221,1,2,2)
Q
"^DD",2,2,.3221,1,2,"%D",0)
^^1^1^2920116^
"^DD",2,2,.3221,1,2,"%D",1,0)
If Lebanon service not indicated, remove the to date.
"^DD",2,2,.3221,1,2,"CREATE CONDITION")
#.3221="NO"
"^DD",2,2,.3221,1,2,"CREATE VALUE")
@
"^DD",2,2,.3221,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3221,1,2,"DT")
2920116
"^DD",2,2,.3221,1,2,"FIELD")
LEBANON TO DATE
"^DD",2,2,.3221,1,3,0)
2^AENR3221^MUMPS
"^DD",2,2,.3221,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3221,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3221,1,3,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3221,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3221,1,3,"%D",2,0)
LEBANON SERVICE INDICATED? field.
"^DD",2,2,.3221,1,3,"DT")
3040614
"^DD",2,2,.3221,3)
Did this veteran serve in Lebanon during the conflict there?
"^DD",2,2,.3221,21,0)
^^2^2^2930629^^
"^DD",2,2,.3221,21,1,0)
Did this patient serve in Lebanon between the dates of August 23, 1982
"^DD",2,2,.3221,21,2,0)
and February 26, 1984?
"^DD",2,2,.3221,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3221,"DT")
3040614
"^DD",2,2,.3222,0)
LEBANON FROM DATE^RDX^^.322;2^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"LEB",X) X I $D(X) S DFN=DA,DGX=1 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3222,1,0)
^.1
"^DD",2,2,.3222,1,1,0)
2^AENR3222^MUMPS
"^DD",2,2,.3222,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3222,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3222,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3222,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3222,1,1,"%D",2,0)
LEBANON FROM DATE field.
"^DD",2,2,.3222,1,1,"DT")
3040614
"^DD",2,2,.3222,3)
TYPE A DATE AFTER OCTOBER 1, 1983 TO INDICATE THE DATE THIS PATIENT BEGAN HIS SERVICE IN LEBANON
"^DD",2,2,.3222,5,1,0)
2^.3221^1
"^DD",2,2,.3222,21,0)
^^4^4^3040402^
"^DD",2,2,.3222,21,1,0)
For this veteran applicant who served in Lebanon, enter the date which
"^DD",2,2,.3222,21,2,0)
the applicant's service in Lebanon began.  The date must be on or after
"^DD",2,2,.3222,21,3,0)
October 1, 1983.
"^DD",2,2,.3222,21,4,0)
.
"^DD",2,2,.3222,"DEL",1,0)
S DFN=DA,DGX=1 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3222,"DT")
3040722
"^DD",2,2,.3223,0)
LEBANON TO DATE^RDX^^.322;3^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"LEB",X,1) X I $D(X) S DFN=DA,DGX=1 D SVED^DGLOCK
"^DD",2,2,.3223,1,0)
^.1
"^DD",2,2,.3223,1,1,0)
2^AENR3223^MUMPS
"^DD",2,2,.3223,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3223,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3223,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3223,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3223,1,1,"%D",2,0)
LEBANON TO DATE field.
"^DD",2,2,.3223,1,1,"DT")
3040614
"^DD",2,2,.3223,3)
TYPE A DATE AFTER OCTOBER 1, 1983 INDICATING THE DATE THIS PATIENT'S SERVICE IN LEBANON ENDED.
"^DD",2,2,.3223,5,1,0)
2^.3221^2
"^DD",2,2,.3223,21,0)
^^3^3^3040407^
"^DD",2,2,.3223,21,1,0)
For this patient, enter the date the patient's service in Lebanon ended.
"^DD",2,2,.3223,21,2,0)
The 'LEBANON SERVICE INDICATED?' field must be answered yes and the date
"^DD",2,2,.3223,21,3,0)
in this field must be after October 1, 1983.
"^DD",2,2,.3223,"DEL",1,0)
S DFN=DA,DGX=1 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3223,"DT")
3040614
"^DD",2,2,.3224,0)
GRENADA SERVICE INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;4^S DFN=DA D SV^DGLOCK
"^DD",2,2,.3224,1,0)
^.1
"^DD",2,2,.3224,1,1,0)
^^TRIGGER^2^.3225
"^DD",2,2,.3224,1,1,1)
X ^DD(2,.3224,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(2,.3224,1,1,1.4)
"^DD",2,2,.3224,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3224,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3224,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,5)=DIV,DIH=2,DIG=.3225 D ^DICR
"^DD",2,2,.3224,1,1,2)
Q
"^DD",2,2,.3224,1,1,"%D",0)
^^1^1^2920116^
"^DD",2,2,.3224,1,1,"%D",1,0)
If service in Grenada is not indicated, remove the GRENADA FROM DATE.
"^DD",2,2,.3224,1,1,"CREATE CONDITION")
#.3224="NO"
"^DD",2,2,.3224,1,1,"CREATE VALUE")
@
"^DD",2,2,.3224,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3224,1,1,"FIELD")
GRENADA FROM DATE
"^DD",2,2,.3224,1,2,0)
^^TRIGGER^2^.3226
"^DD",2,2,.3224,1,2,1)
X ^DD(2,.3224,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(2,.3224,1,2,1.4)
"^DD",2,2,.3224,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3224,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3224,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,6)=DIV,DIH=2,DIG=.3226 D ^DICR
"^DD",2,2,.3224,1,2,2)
Q
"^DD",2,2,.3224,1,2,"%D",0)
^^1^1^2920116^
"^DD",2,2,.3224,1,2,"%D",1,0)
If service in Grenada is not indicated, delete the GRENADA TO DATE.
"^DD",2,2,.3224,1,2,"CREATE CONDITION")
#.3224="NO"
"^DD",2,2,.3224,1,2,"CREATE VALUE")
@
"^DD",2,2,.3224,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3224,1,2,"DT")
2920116
"^DD",2,2,.3224,1,2,"FIELD")
GRENADA TO DATE
"^DD",2,2,.3224,1,3,0)
2^AENR3224^MUMPS
"^DD",2,2,.3224,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3224,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3224,1,3,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3224,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3224,1,3,"%D",2,0)
GRENADA SERVICE INDICATED? field.
"^DD",2,2,.3224,1,3,"DT")
3040614
"^DD",2,2,.3224,3)
If this patient served during the conflict in Grenada, enter YES here.  Enter NO if the patient did not serve in Grenada, or UNKNOWN if this can not be determined.
"^DD",2,2,.3224,21,0)
^^2^2^2930629^^
"^DD",2,2,.3224,21,1,0)
Enter yes if this patient served in Grenada between the dates of October
"^DD",2,2,.3224,21,2,0)
23, 1983 and November 21, 1983.
"^DD",2,2,.3224,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3224,"DT")
3040614
"^DD",2,2,.3225,0)
GRENADA FROM DATE^RDX^^.322;5^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GREN",X) X I $D(X) S DFN=DA,DGX=4 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3225,1,0)
^.1
"^DD",2,2,.3225,1,1,0)
2^AENR3225^MUMPS
"^DD",2,2,.3225,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3225,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3225,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3225,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3225,1,1,"%D",2,0)
GRENADA FROM DATE field.
"^DD",2,2,.3225,1,1,"DT")
3040614
"^DD",2,2,.3225,3)
TYPE A DATE BETWEEN 10/23/1983 AND 11/21/1983 INDICATING THE DATE THIS PATIENT'S SERVICE IN GRENADA BEGAN.
"^DD",2,2,.3225,5,1,0)
2^.3224^1
"^DD",2,2,.3225,21,0)
^^3^3^2920115^
"^DD",2,2,.3225,21,1,0)
Enter the date which this patient began service in Grenada.  The
"^DD",2,2,.3225,21,2,0)
'GRENADA SERVICE INDICATED?' field must be answered YES and the date
"^DD",2,2,.3225,21,3,0)
entered here must be between October 23, 1983 and November 21, 1983.
"^DD",2,2,.3225,"DEL",1,0)
S DFN=DA,DGX=4 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3225,"DT")
3040722
"^DD",2,2,.3226,0)
GRENADA TO DATE^RDX^^.322;6^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GREN",X,1) X I $D(X) S DFN=DA,DGX=4 D SVED^DGLOCK
"^DD",2,2,.3226,1,0)
^.1
"^DD",2,2,.3226,1,1,0)
2^AENR3226^MUMPS
"^DD",2,2,.3226,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3226,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3226,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3226,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3226,1,1,"%D",2,0)
GRENADA TO DATE field.
"^DD",2,2,.3226,1,1,"DT")
3040614
"^DD",2,2,.3226,3)
TYPE A DATE BETWEEN 10/23/1983 AND 11/21/1983 INDICATING THE DATE THE PATIENT'S SERVICE IN GRENADA ENDED.
"^DD",2,2,.3226,5,1,0)
2^.3224^2
"^DD",2,2,.3226,21,0)
^^3^3^2920115^
"^DD",2,2,.3226,21,1,0)
Enter the date which this patient's service in Grenada ended.  The
"^DD",2,2,.3226,21,2,0)
'GRENADA SERVICE INDICATED?' field must be yes and this date must be
"^DD",2,2,.3226,21,3,0)
between October 23, 1983 and November 21, 1983.
"^DD",2,2,.3226,"DEL",1,0)
S DFN=DA,DGX=4 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3226,"DT")
3040614
"^DD",2,2,.3227,0)
PANAMA SERVICE INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.322;7^S DFN=DA D SV^DGLOCK
"^DD",2,2,.3227,1,0)
^.1
"^DD",2,2,.3227,1,1,0)
^^TRIGGER^2^.3228
"^DD",2,2,.3227,1,1,1)
X ^DD(2,.3227,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(2,.3227,1,1,1.4)
"^DD",2,2,.3227,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3227,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3227,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,8)=DIV,DIH=2,DIG=.3228 D ^DICR
"^DD",2,2,.3227,1,1,2)
Q
"^DD",2,2,.3227,1,1,"%D",0)
^^1^1^2920116^
"^DD",2,2,.3227,1,1,"%D",1,0)
If service in Panama is not indicated, remove the PANAMA FROM DATE.
"^DD",2,2,.3227,1,1,"CREATE CONDITION")
#.3227="NO"
"^DD",2,2,.3227,1,1,"CREATE VALUE")
@
"^DD",2,2,.3227,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3227,1,1,"FIELD")
PANAMA FROM DATE
"^DD",2,2,.3227,1,2,0)
^^TRIGGER^2^.3229
"^DD",2,2,.3227,1,2,1)
X ^DD(2,.3227,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.322)):^(.322),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(2,.3227,1,2,1.4)
"^DD",2,2,.3227,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3227,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.3227,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.322)):^(.322),1:""),DIV=X S $P(^(.322),U,9)=DIV,DIH=2,DIG=.3229 D ^DICR
"^DD",2,2,.3227,1,2,2)
Q
"^DD",2,2,.3227,1,2,"%D",0)
^^1^1^2920116^
"^DD",2,2,.3227,1,2,"%D",1,0)
If Panama service is no longer indicated, remove the PANAMA TO DATE.
"^DD",2,2,.3227,1,2,"CREATE CONDITION")
#.3227="NO"
"^DD",2,2,.3227,1,2,"CREATE VALUE")
@
"^DD",2,2,.3227,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3227,1,2,"DT")
2920116
"^DD",2,2,.3227,1,2,"FIELD")
PANAMA TO DATE
"^DD",2,2,.3227,1,3,0)
2^AENR3227^MUMPS
"^DD",2,2,.3227,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3227,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3227,1,3,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3227,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3227,1,3,"%D",2,0)
PANAMA SERVICE INDICATED? field.
"^DD",2,2,.3227,1,3,"DT")
3040614
"^DD",2,2,.3227,3)
Did this patient serve in the conflict in Panama?  Answer YES, NO, or UNKNOWN.
"^DD",2,2,.3227,21,0)
^^4^4^2930629^^
"^DD",2,2,.3227,21,1,0)
Respond yes if this patient served in Panama between the dates of
"^DD",2,2,.3227,21,2,0)
December 20, 1989 and January 31, 1990.  Enter no if the patient did not
"^DD",2,2,.3227,21,3,0)
serve in Panama during this timeframe.  Otherwise, enter unknown if this
"^DD",2,2,.3227,21,4,0)
information could not be obtained from the patient.
"^DD",2,2,.3227,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3227,"DT")
3040614
"^DD",2,2,.3228,0)
PANAMA FROM DATE^RDX^^.322;8^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"PAN",X) X I $D(X) S DFN=DA,DGX=7 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3228,1,0)
^.1
"^DD",2,2,.3228,1,1,0)
2^AENR3228^MUMPS
"^DD",2,2,.3228,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3228,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3228,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3228,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3228,1,1,"%D",2,0)
PANAMA FROM DATE field.
"^DD",2,2,.3228,1,1,"DT")
3040614
"^DD",2,2,.3228,3)
TYPE A DATE BETWEEN 12/20/1989 AND 1/31/1990 INDICATING THE DATE THIS PATIENT BEGAN SERVICE IN PANAMA.
"^DD",2,2,.3228,5,1,0)
2^.3227^1
"^DD",2,2,.3228,21,0)
^^3^3^2920115^
"^DD",2,2,.3228,21,1,0)
If this patient served in Panama (PANAMA SERVICE INDICATED? is answered
"^DD",2,2,.3228,21,2,0)
YES), enter the date this patient's service in Panama began.  The date
"^DD",2,2,.3228,21,3,0)
must be between December 20, 1989 and January 31, 1990.
"^DD",2,2,.3228,"DEL",1,0)
S DFN=DA,DGX=7 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3228,"DT")
3040722
"^DD",2,2,.3229,0)
PANAMA TO DATE^RDX^^.322;9^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"PAN",X,1) X I $D(X) S DFN=DA,DGX=7 D SVED^DGLOCK
"^DD",2,2,.3229,1,0)
^.1
"^DD",2,2,.3229,1,1,0)
2^AENR3229^MUMPS
"^DD",2,2,.3229,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3229,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3229,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.3229,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3229,1,1,"%D",2,0)
PANAMA TO DATE field.
"^DD",2,2,.3229,1,1,"DT")
3040614
"^DD",2,2,.3229,3)
TYPE A DATE BETWEEN 12/20/1989 AND 1/31/1990 INDICATING THE DATE THIS PATIENT'S SERVICE IN PANAMA ENDED.
"^DD",2,2,.3229,5,1,0)
2^.3227^2
"^DD",2,2,.3229,21,0)
^^3^3^2920115^
"^DD",2,2,.3229,21,1,0)
If this patient served during the conflict in Panama (PANAMA SERVICE
"^DD",2,2,.3229,21,2,0)
INDICATED? is YES), enter the date the patient's service there ended.
"^DD",2,2,.3229,21,3,0)
The date must be between December 20, 1989 and January 31, 1990.
"^DD",2,2,.3229,"DEL",1,0)
S DFN=DA,DGX=7 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3229,"DT")
3040614
"^DD",2,2,.324,0)
SERVICE DISCHARGE TYPE [LAST]^RP25'X^DIC(25,^.32;4^S DFN=DA I $D(X) D SV^DGLOCK Q
"^DD",2,2,.324,.1)
DISCHARGE TYPE-SERVICE [LAST]
"^DD",2,2,.324,1,0)
^.1
"^DD",2,2,.324,1,1,0)
2^AENR324^MUMPS
"^DD",2,2,.324,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.324,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.324,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.324,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.324,1,1,"%D",2,0)
SERVICE DISCHARGE TYPE [LAST] field.
"^DD",2,2,.324,1,1,"DT")
3040610
"^DD",2,2,.324,3)
Select from the listing the discharge type from this patient's last episode of military service.
"^DD",2,2,.324,20,0)
^.3LA^1^1
"^DD",2,2,.324,20,1,0)
SVC
"^DD",2,2,.324,21,0)
^^5^5^2920604^^^^
"^DD",2,2,.324,21,1,0)
For this veteran applicant select from the available listing
"^DD",2,2,.324,21,2,0)
the discharge type which s/he received for his/her most recent
"^DD",2,2,.324,21,3,0)
episode of military service.  Once the service record is verified
"^DD",2,2,.324,21,4,0)
only those users who hold the designated security key may enter/edit
"^DD",2,2,.324,21,5,0)
this field.
"^DD",2,2,.324,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.324,"DT")
3040610
"^DD",2,2,.325,0)
SERVICE BRANCH [LAST]^P23'X^DIC(23,^.32;5^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SV^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.325,.1)
BRANCH OF SERVICE, LAST
"^DD",2,2,.325,1,0)
^.1
"^DD",2,2,.325,1,1,0)
2^AODS4^MUMPS
"^DD",2,2,.325,1,1,1)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.325,1,1,2)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.325,1,2,0)
2^AFV1^MUMPS
"^DD",2,2,.325,1,2,1)
Q
"^DD",2,2,.325,1,2,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.325,1,2,"%D",0)
^.101^4^4^3040325^^^^
"^DD",2,2,.325,1,2,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.325,1,2,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.325,1,2,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.325,1,2,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.325,1,2,"DT")
3040325
"^DD",2,2,.325,1,3,0)
2^AENR325^MUMPS
"^DD",2,2,.325,1,3,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.325,1,3,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.325,1,3,"%D",0)
^^2^2^3040610^
"^DD",2,2,.325,1,3,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.325,1,3,"%D",2,0)
SERVICE BRANCH [LAST] field.
"^DD",2,2,.325,1,3,"DT")
3040610
"^DD",2,2,.325,3)
Select from the listing the branch in which this patient served during his last episode of military service.
"^DD",2,2,.325,20,0)
^.3LA^1^1
"^DD",2,2,.325,20,1,0)
SVC
"^DD",2,2,.325,21,0)
^^5^5^2861007^
"^DD",2,2,.325,21,1,0)
For this veteran applicant select from the available listing
"^DD",2,2,.325,21,2,0)
the branch of service served in during his/her most recent
"^DD",2,2,.325,21,3,0)
episode of military service.  Once the service record is verified
"^DD",2,2,.325,21,4,0)
only those users who hold the designated security key may
"^DD",2,2,.325,21,5,0)
enter/edit this field.
"^DD",2,2,.325,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.325,"DT")
3040610
"^DD",2,2,.326,0)
SERVICE ENTRY DATE [LAST]^RDX^^.32;6^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SV^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=1 D POS^DGINP
"^DD",2,2,.326,.1)
ENTRY DATE-SERVICE [LAST]
"^DD",2,2,.326,1,0)
^.1
"^DD",2,2,.326,1,1,0)
2^AE^MUMPS
"^DD",2,2,.326,1,1,1)
Q
"^DD",2,2,.326,1,1,2)
Q
"^DD",2,2,.326,1,2,0)
2^AENR326^MUMPS
"^DD",2,2,.326,1,2,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.326,1,2,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.326,1,2,"%D",0)
^^2^2^3040610^
"^DD",2,2,.326,1,2,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of any changes to the
"^DD",2,2,.326,1,2,"%D",2,0)
SERVICE ENTRY DATE [LAST] field.
"^DD",2,2,.326,1,2,"DT")
3040610
"^DD",2,2,.326,1,992,0)
2^ADGRU326^MUMPS
"^DD",2,2,.326,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.326,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.326,1,992,"%D",0)
^^9^9^2990921^
"^DD",2,2,.326,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.326,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.326,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.326,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.326,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.326,1,992,"%D",6,0)
interface.
"^DD",2,2,.326,1,992,"%D",7,0)
 
"^DD",2,2,.326,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.326,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.326,1,992,"DT")
2990921
"^DD",2,2,.326,3)
Enter the date the patient entered his last episode of military service.
"^DD",2,2,.326,20,0)
^.3LA^1^1
"^DD",2,2,.326,20,1,0)
SVC
"^DD",2,2,.326,21,0)
^^4^4^2861007^^
"^DD",2,2,.326,21,1,0)
For this veteran applicant enter the date s/he commenced his/her
"^DD",2,2,.326,21,2,0)
most recent episode of military service.  Once the service
"^DD",2,2,.326,21,3,0)
record is verified only those users who hold the designated
"^DD",2,2,.326,21,4,0)
security key may enter/edit this field.
"^DD",2,2,.326,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.326,"DT")
3040722
"^DD",2,2,.327,0)
SERVICE SEPARATION DATE [LAST]^RDX^^.32;7^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SV^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSL") X I $D(X),$D(^DG(43,1)) S SD1=1 D PS^DGINP
"^DD",2,2,.327,.1)
SEPARATION DATE-SERVICE [LAST]
"^DD",2,2,.327,1,0)
^.1
"^DD",2,2,.327,1,1,0)
2^AENR327^MUMPS
"^DD",2,2,.327,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.327,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.327,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.327,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.327,1,1,"%D",2,0)
SERVICE SEPARATION DATE [LAST] field.
"^DD",2,2,.327,1,1,"DT")
3040610
"^DD",2,2,.327,1,992,0)
2^ADGRU327^MUMPS
"^DD",2,2,.327,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.327,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.327,1,992,"%D",0)
^^9^9^2990921^
"^DD",2,2,.327,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.327,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.327,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.327,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.327,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.327,1,992,"%D",6,0)
interface.
"^DD",2,2,.327,1,992,"%D",7,0)
 
"^DD",2,2,.327,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.327,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.327,1,992,"DT")
2990921
"^DD",2,2,.327,3)
Enter the date on which this patient was separated from his last episode of military service.
"^DD",2,2,.327,20,0)
^.3LA^1^1
"^DD",2,2,.327,20,1,0)
SVC
"^DD",2,2,.327,21,0)
^^4^4^2861007^
"^DD",2,2,.327,21,1,0)
For this veteran applicant enter the date s/he ended his/her
"^DD",2,2,.327,21,2,0)
most recent episode of military service.  Once the service
"^DD",2,2,.327,21,3,0)
record is verified only those users who hold the designated
"^DD",2,2,.327,21,4,0)
security key may enter/edit this field.
"^DD",2,2,.327,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.327,"DT")
3040628
"^DD",2,2,.328,0)
SERVICE NUMBER [LAST]^FX^^.32;8^S DFN=DA D SV^DGLOCK I $D(X) S:X?1"SS".E L=$S($D(^DPT(DA,0)):$P(^(0),U,9),1:X) W:X?1"SS".E "  ",L S:X?1"SS".E X=L K:$L(X)>15!($L(X)<1)!'(X?.N) X
"^DD",2,2,.328,.1)
NUMBER-SERVICE [LAST]
"^DD",2,2,.328,1,0)
^.1
"^DD",2,2,.328,1,1,0)
2^AENR328^MUMPS
"^DD",2,2,.328,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.328,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.328,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.328,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.328,1,1,"%D",2,0)
SERVICE NUMBER [LAST] field.
"^DD",2,2,.328,1,1,"DT")
3040610
"^DD",2,2,.328,3)
Enter the service number assigned to this patient during his last episode of military service or 'SS' if it's the same as his SSN.
"^DD",2,2,.328,20,0)
^.3LA^1^1
"^DD",2,2,.328,20,1,0)
SVC
"^DD",2,2,.328,21,0)
^^6^6^2920604^^^
"^DD",2,2,.328,21,1,0)
For this veteran applicant enter the service number assigned during
"^DD",2,2,.328,21,2,0)
his/her most recent episode of military service as either 1-15
"^DD",2,2,.328,21,3,0)
characters or enter 'SS' if the social security number and service
"^DD",2,2,.328,21,4,0)
number are the same.  Once the service record has been verified only
"^DD",2,2,.328,21,5,0)
those users who hold the designated security key may enter/edit this
"^DD",2,2,.328,21,6,0)
field.
"^DD",2,2,.328,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.328,"DT")
3040610
"^DD",2,2,.329,0)
SERVICE DISCHARGE TYPE [NTL]^RP25'X^DIC(25,^.32;9^S DFN=DA D SER1^DGLOCK
"^DD",2,2,.329,.1)
DISCHARGE TYPE-SERVICE [NTL]
"^DD",2,2,.329,1,0)
^.1
"^DD",2,2,.329,1,1,0)
2^AENR329^MUMPS
"^DD",2,2,.329,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.329,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.329,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.329,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.329,1,1,"%D",2,0)
SERVICE DISCHARGE TYPE [NTL] field.
"^DD",2,2,.329,1,1,"DT")
3040610
"^DD",2,2,.329,3)
Enter the type of discharge given this patient from his next-to-last episode of military service.
"^DD",2,2,.329,20,0)
^.3LA^1^1
"^DD",2,2,.329,20,1,0)
SVC
"^DD",2,2,.329,21,0)
^^7^7^2920604^^^^
"^DD",2,2,.329,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.329,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.329,21,3,0)
select from the available listing the type of discharge received from
"^DD",2,2,.329,21,4,0)
his/her next to last episode of military service.  Once the service
"^DD",2,2,.329,21,5,0)
record is verified only those users who hold the designated security
"^DD",2,2,.329,21,6,0)
key may enter/edit this field.  This field cannot be deleted as long
"^DD",2,2,.329,21,7,0)
as more than one episode of military service is indicated.
"^DD",2,2,.329,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.329,"DT")
3040610
"^DD",2,2,.3291,0)
SERVICE BRANCH [NTL]^P23'X^DIC(23,^.32;10^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SER1^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.3291,.1)
BRANCH OF SERVICE, NTL
"^DD",2,2,.3291,1,0)
^.1
"^DD",2,2,.3291,1,1,0)
2^AFV2^MUMPS
"^DD",2,2,.3291,1,1,1)
Q
"^DD",2,2,.3291,1,1,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.3291,1,1,"%D",0)
^.101^4^4^3040331^^
"^DD",2,2,.3291,1,1,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.3291,1,1,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.3291,1,1,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.3291,1,1,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.3291,1,1,"DT")
3040325
"^DD",2,2,.3291,1,2,0)
2^AENR3291^MUMPS
"^DD",2,2,.3291,1,2,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3291,1,2,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3291,1,2,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3291,1,2,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3291,1,2,"%D",2,0)
SERVICE BRANCH [NTL] field.
"^DD",2,2,.3291,1,2,"DT")
3040610
"^DD",2,2,.3291,3)
Enter the branch of service in which the patient served in his next-to-last episode of military service.
"^DD",2,2,.3291,5,1,0)
2^.3285^3
"^DD",2,2,.3291,20,0)
^.3LA^1^1
"^DD",2,2,.3291,20,1,0)
SVC
"^DD",2,2,.3291,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3291,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3291,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3291,21,3,0)
select from the available listing the branch of service s/he served
"^DD",2,2,.3291,21,4,0)
in during his/her next to last episode of military service.  Once the
"^DD",2,2,.3291,21,5,0)
service record is verified only those users who hold the designated
"^DD",2,2,.3291,21,6,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3291,21,7,0)
as long as more than one episode of military service is indicated.
"^DD",2,2,.3291,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3291,"DT")
3040610
"^DD",2,2,.3292,0)
SERVICE ENTRY DATE [NTL]^RDX^^.32;11^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER1^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSNTL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=2 D POS^DGINP
"^DD",2,2,.3292,.1)
ENTRY DATE-SERVICE [NTL]
"^DD",2,2,.3292,1,0)
^.1
"^DD",2,2,.3292,1,1,0)
2^AF^MUMPS
"^DD",2,2,.3292,1,1,1)
Q
"^DD",2,2,.3292,1,1,2)
Q
"^DD",2,2,.3292,1,2,0)
2^AENR3292^MUMPS
"^DD",2,2,.3292,1,2,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3292,1,2,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3292,1,2,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3292,1,2,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3292,1,2,"%D",2,0)
SERVICE ENTRY DATE [NTL] field.
"^DD",2,2,.3292,1,2,"DT")
3040610
"^DD",2,2,.3292,3)
Enter the date this patient commenced his next-to-last episode of military service.
"^DD",2,2,.3292,20,0)
^.3LA^1^1
"^DD",2,2,.3292,20,1,0)
SVC
"^DD",2,2,.3292,21,0)
^^7^7^2880927^^^^
"^DD",2,2,.3292,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3292,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3292,21,3,0)
enter the date on which the next to last episode of service commenced.
"^DD",2,2,.3292,21,4,0)
Once the service record is verified only those users who hold the
"^DD",2,2,.3292,21,5,0)
designated security key may enter/edit this field.  This field cannot
"^DD",2,2,.3292,21,6,0)
be deleted as long as more than one episode of military service is
"^DD",2,2,.3292,21,7,0)
indicated.
"^DD",2,2,.3292,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3292,"DT")
3040722
"^DD",2,2,.3293,0)
SERVICE SEPARATION DATE [NTL]^RDX^^.32;12^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER1^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSNTL") X I $D(X),$D(^DG(43,1)) S SD1=2 D PS^DGINP
"^DD",2,2,.3293,.1)
SEPARATION DATE-SERVICE [NTL]
"^DD",2,2,.3293,1,0)
^.1
"^DD",2,2,.3293,1,1,0)
2^AENR3293^MUMPS
"^DD",2,2,.3293,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3293,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3293,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3293,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3293,1,1,"%D",2,0)
SERVICE SEPARATION DATE [NTL] field.
"^DD",2,2,.3293,1,1,"DT")
3040610
"^DD",2,2,.3293,3)
Enter the date this patient ended his next-to-last episode of military service.
"^DD",2,2,.3293,20,0)
^.3LA^1^1
"^DD",2,2,.3293,20,1,0)
SVC
"^DD",2,2,.3293,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3293,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3293,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3293,21,3,0)
enter the date on which the next to last episode of service ended.
"^DD",2,2,.3293,21,4,0)
Once the service record is verified only those users who hold the
"^DD",2,2,.3293,21,5,0)
designated security key may enter/edit this field.  This field cannot
"^DD",2,2,.3293,21,6,0)
be deleted as long as more than one episode of military service is
"^DD",2,2,.3293,21,7,0)
indicated.
"^DD",2,2,.3293,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3293,"DT")
3040610
"^DD",2,2,.3294,0)
SERVICE NUMBER [NTL]^FX^^.32;13^S DFN=DA D SER1^DGLOCK I $D(X) S:X?1"SS".E L=$S($D(^DPT(DA,0)):$P(^(0),U,9),1:X) W:X?1"SS".E "  ",L S:X?1"SS".E X=L K:$L(X)>15!($L(X)<1)!'(X?.N) X
"^DD",2,2,.3294,.1)
NUMBER-SERVICE [NTL]
"^DD",2,2,.3294,1,0)
^.1
"^DD",2,2,.3294,1,1,0)
2^AENR3294^MUMPS
"^DD",2,2,.3294,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3294,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3294,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3294,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3294,1,1,"%D",2,0)
SERVICE NUMBER [NTL] field.
"^DD",2,2,.3294,1,1,"DT")
3040610
"^DD",2,2,.3294,3)
Enter the service number assigned to this patient during his next-to-last episode of military service or 'SS' if it's the same as his SSN.
"^DD",2,2,.3294,20,0)
^.3LA^1^1
"^DD",2,2,.3294,20,1,0)
SVC
"^DD",2,2,.3294,21,0)
^^7^7^2930721^^^^
"^DD",2,2,.3294,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3294,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3294,21,3,0)
enter the service number assigned to that next to last episode of
"^DD",2,2,.3294,21,4,0)
service [1-15 characters].  Once the service record is verified only
"^DD",2,2,.3294,21,5,0)
those users who hold the designated security key may enter/edit this
"^DD",2,2,.3294,21,6,0)
field.  This field cannot be deleted as long as more than one episode
"^DD",2,2,.3294,21,7,0)
of military service is indicated.
"^DD",2,2,.3294,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3294,"DT")
3040610
"^DD",2,2,.3295,0)
SERVICE DISCHARGE TYPE [NNTL]^RP25'X^DIC(25,^.32;14^S DFN=DA D SER2^DGLOCK
"^DD",2,2,.3295,.1)
DISCHARGE TYPE-SERVICE [NNTL]
"^DD",2,2,.3295,1,0)
^.1
"^DD",2,2,.3295,1,1,0)
2^AENR3295^MUMPS
"^DD",2,2,.3295,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3295,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3295,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3295,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3295,1,1,"%D",2,0)
SERVICE DISCHARGE TYPE [NNTL] field.
"^DD",2,2,.3295,1,1,"DT")
3040610
"^DD",2,2,.3295,3)
For this third episode of military service enter the discharge type given this patient.
"^DD",2,2,.3295,5,1,0)
2^.32945^1
"^DD",2,2,.3295,20,0)
^.3LA^1^1
"^DD",2,2,.3295,20,1,0)
SVC
"^DD",2,2,.3295,21,0)
^^7^7^2920604^^^^
"^DD",2,2,.3295,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3295,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) select
"^DD",2,2,.3295,21,3,0)
from the available listing the discharge type received from the third most
"^DD",2,2,.3295,21,4,0)
recent episode of military service.  Once the service record is verified
"^DD",2,2,.3295,21,5,0)
only those users who hold the designated security key may enter/edit
"^DD",2,2,.3295,21,6,0)
this field.  This field cannot be deleted as long as more than two
"^DD",2,2,.3295,21,7,0)
episodes of military service are indicated.
"^DD",2,2,.3295,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3295,"DT")
3040610
"^DD",2,2,.3296,0)
SERVICE BRANCH [NNTL]^P23'X^DIC(23,^.32;15^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SER2^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.3296,.1)
BRANCH OF SERVICE, NNTL
"^DD",2,2,.3296,1,0)
^.1
"^DD",2,2,.3296,1,1,0)
2^AFV3^MUMPS
"^DD",2,2,.3296,1,1,1)
Q
"^DD",2,2,.3296,1,1,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.3296,1,1,"%D",0)
^^4^4^3040325^
"^DD",2,2,.3296,1,1,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.3296,1,1,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.3296,1,1,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.3296,1,1,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.3296,1,1,"DT")
3040325
"^DD",2,2,.3296,1,2,0)
2^AENR3296^MUMPS
"^DD",2,2,.3296,1,2,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3296,1,2,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3296,1,2,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3296,1,2,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3296,1,2,"%D",2,0)
SERVICE BRANCH [NNTL] field.
"^DD",2,2,.3296,1,2,"DT")
3040610
"^DD",2,2,.3296,3)
For this third episode of military service enter the branch in which this patient served.
"^DD",2,2,.3296,5,1,0)
2^.32945^2
"^DD",2,2,.3296,20,0)
^.3LA^1^1
"^DD",2,2,.3296,20,1,0)
SVC
"^DD",2,2,.3296,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3296,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3296,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) select
"^DD",2,2,.3296,21,3,0)
from the available listing the service branch served in during his/her
"^DD",2,2,.3296,21,4,0)
third most recent episode of service.  Once the service record is
"^DD",2,2,.3296,21,5,0)
verified only those users who hold the designated security key may
"^DD",2,2,.3296,21,6,0)
enter/edit this field.  This field cannot be deleted as long as more
"^DD",2,2,.3296,21,7,0)
than two episodes of military service are indicated.
"^DD",2,2,.3296,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3296,"DT")
3040610
"^DD",2,2,.3297,0)
SERVICE ENTRY DATE [NNTL]^RDX^^.32;16^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER2^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSNNTL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=3 D POS^DGINP
"^DD",2,2,.3297,.1)
ENTRY DATE-SERVICE [NNTL]
"^DD",2,2,.3297,1,0)
^.1
"^DD",2,2,.3297,1,1,0)
2^AENR3297^MUMPS
"^DD",2,2,.3297,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3297,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3297,1,1,"%D",0)
^.101^2^2^3040702^^
"^DD",2,2,.3297,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3297,1,1,"%D",2,0)
SERVICE ENTRY DATE [NNTL] field.
"^DD",2,2,.3297,1,1,"DT")
3040702
"^DD",2,2,.3297,3)
For this third episode of military service enter the date on which the patient commenced serving.
"^DD",2,2,.3297,20,0)
^.3LA^1^1
"^DD",2,2,.3297,20,1,0)
SVC
"^DD",2,2,.3297,21,0)
^.001^6^6^3040702^^^^
"^DD",2,2,.3297,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3297,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) enter
"^DD",2,2,.3297,21,3,0)
the date on which the third most recent episode of service commenced.  Once
"^DD",2,2,.3297,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.3297,21,5,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3297,21,6,0)
as long as more than two episodes of military service are indicated.
"^DD",2,2,.3297,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3297,"DT")
3040722
"^DD",2,2,.3298,0)
SERVICE SEPARATION DATE [NNTL]^RDX^^.32;17^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER2^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSNNTL") X I $D(X),$D(^DG(43,1)) S SD1=3 D PS^DGINP
"^DD",2,2,.3298,.1)
SEPARATION DATE-SERVICE [NNTL]
"^DD",2,2,.3298,1,0)
^.1
"^DD",2,2,.3298,1,1,0)
2^AENR3298^MUMPS
"^DD",2,2,.3298,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3298,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3298,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3298,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3298,1,1,"%D",2,0)
SERVICE SEPARATION DATE [NNTL] field.
"^DD",2,2,.3298,1,1,"DT")
3040610
"^DD",2,2,.3298,3)
For this third episode of military service enter the date on which the service terminated.
"^DD",2,2,.3298,20,0)
^.3LA^1^1
"^DD",2,2,.3298,20,1,0)
SVC
"^DD",2,2,.3298,21,0)
^^6^6^2861008^^
"^DD",2,2,.3298,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3298,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) enter
"^DD",2,2,.3298,21,3,0)
the date on which the third most recent episode of service ended.  Once
"^DD",2,2,.3298,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.3298,21,5,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3298,21,6,0)
as long as more than two episodes of military service are indicated.
"^DD",2,2,.3298,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3298,"DT")
3040610
"^DD",2,2,.3299,0)
SERVICE NUMBER [NNTL]^FX^^.32;18^S DFN=DA D SER2^DGLOCK I $D(X) S:X?1"SS".E L=$S($D(^DPT(DA,0)):$P(^(0),U,9),1:X) W:X?1"SS".E "  ",L S:X?1"SS".E X=L K:$L(X)>15!($L(X)<1)!'(X?.N) X
"^DD",2,2,.3299,.1)
NUMBER-SERVICE [NNTL]
"^DD",2,2,.3299,1,0)
^.1
"^DD",2,2,.3299,1,1,0)
2^AENR3299^MUMPS
"^DD",2,2,.3299,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3299,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.3299,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.3299,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.3299,1,1,"%D",2,0)
SERVICE NUMBER [NNTL] field.
"^DD",2,2,.3299,1,1,"DT")
3040610
"^DD",2,2,.3299,3)
For this third episode of military service enter the service number assigned or 'SS' if it's the same as the SSN.
"^DD",2,2,.3299,20,0)
^.3LA^1^1
"^DD",2,2,.3299,20,1,0)
SVC
"^DD",2,2,.3299,21,0)
^^7^7^2861008^^^
"^DD",2,2,.3299,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3299,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) enter
"^DD",2,2,.3299,21,3,0)
the service number assigned for the third most recent episode of service
"^DD",2,2,.3299,21,4,0)
[1-15 characters].  Once the service record is verified only those users
"^DD",2,2,.3299,21,5,0)
who hold the designated security key may enter/edit this field.  This
"^DD",2,2,.3299,21,6,0)
field cannot be deleted as long as more than two episodes of military
"^DD",2,2,.3299,21,7,0)
service are indicated.
"^DD",2,2,.3299,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3299,"DT")
3040610
"^DD",2,2,.525,0)
POW STATUS INDICATED?^RSX^Y:YES;N:NO;U:UNKNOWN;^.52;5^S DFN=DA D SV^DGLOCK
"^DD",2,2,.525,.1)
WERE YOU A PRISONER OF WAR
"^DD",2,2,.525,1,0)
^.1
"^DD",2,2,.525,1,1,0)
^^TRIGGER^2^.526
"^DD",2,2,.525,1,1,1)
X ^DD(2,.525,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$S('$D(^DIC(22,+$P(Y(1),U,6),0)):"",1:$P(^(0),U,1)) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,1,1.4)
"^DD",2,2,.525,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,5,99))  S DIH=DIH_U" S %=$P(DIH,U,7,999),DIU=$P(DIH,U,6),^(.52)=$P(DIH,U,1,5)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.526 D ^DICR
"^DD",2,2,.525,1,1,2)
Q
"^DD",2,2,.525,1,1,"CREATE CONDITION")
WERE YOU A PRISONER OF WAR="NO"
"^DD",2,2,.525,1,1,"CREATE VALUE")
@
"^DD",2,2,.525,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,1,"FIELD")
POW WAR
"^DD",2,2,.525,1,2,0)
^^TRIGGER^2^.527
"^DD",2,2,.525,1,2,1)
X ^DD(2,.525,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,7) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,2,1.4)
"^DD",2,2,.525,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,6,99))  S DIH=DIH_U" S %=$P(DIH,U,8,999),DIU=$P(DIH,U,7),^(.52)=$P(DIH,U,1,6)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.527 D ^DICR
"^DD",2,2,.525,1,2,2)
Q
"^DD",2,2,.525,1,2,"CREATE CONDITION")
#.525="NO"
"^DD",2,2,.525,1,2,"CREATE VALUE")
@
"^DD",2,2,.525,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,2,"FIELD")
POW FROM DATE
"^DD",2,2,.525,1,3,0)
^^TRIGGER^2^.528
"^DD",2,2,.525,1,3,1)
X ^DD(2,.525,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,8) S DIU=X K Y S X=DIV S X="" X ^DD(2,.525,1,3,1.4)
"^DD",2,2,.525,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.525,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.525,1,3,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,7,99))  S DIH=DIH_U" S %=$P(DIH,U,9,999),DIU=$P(DIH,U,8),^(.52)=$P(DIH,U,1,7)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.528 D ^DICR
"^DD",2,2,.525,1,3,2)
Q
"^DD",2,2,.525,1,3,"CREATE CONDITION")
#.525="NO"
"^DD",2,2,.525,1,3,"CREATE VALUE")
@
"^DD",2,2,.525,1,3,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.525,1,3,"FIELD")
#.528
"^DD",2,2,.525,1,4,0)
2^AENR525^MUMPS
"^DD",2,2,.525,1,4,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.525,1,4,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.525,1,4,3)
DO NOT DELETE
"^DD",2,2,.525,1,4,"%D",0)
^.101^2^2^3040708^^^
"^DD",2,2,.525,1,4,"%D",1,0)
This cross-reference is used to update the patient's current Patient Enrollment 
"^DD",2,2,.525,1,4,"%D",2,0)
record.
"^DD",2,2,.525,1,4,"DT")
2970630
"^DD",2,2,.525,1,5,0)
2^AMTR^MUMPS
"^DD",2,2,.525,1,5,1)
S DFN=DA D EN^DGMTR K DGREQF
"^DD",2,2,.525,1,5,2)
S DFN=DA D EN^DGMTR K DGREQF
"^DD",2,2,.525,1,5,"%D",0)
^^2^2^2970927^
"^DD",2,2,.525,1,5,"%D",1,0)
This cross-reference is used to determine whether or not a means test is
"^DD",2,2,.525,1,5,"%D",2,0)
required.
"^DD",2,2,.525,1,5,"DT")
2970927
"^DD",2,2,.525,1,6,0)
2^AENRL525^MUMPS
"^DD",2,2,.525,1,6,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.525,1,6,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.525,1,6,"%D",0)
^^2^2^3040708^
"^DD",2,2,.525,1,6,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.525,1,6,"%D",2,0)
POW STATUS INDICATED? field.
"^DD",2,2,.525,1,6,"DT")
3040708
"^DD",2,2,.525,3)
Was this patient a Prisoner of War?
"^DD",2,2,.525,20,0)
^.3LA^1^1
"^DD",2,2,.525,20,1,0)
PW
"^DD",2,2,.525,21,0)
^^4^4^2920721^^^^
"^DD",2,2,.525,21,1,0)
For this veteran applicant enter 'Y' if s/he was confined as a prisoner
"^DD",2,2,.525,21,2,0)
of war, 'N' if not, or 'U' if unknown.  Once the service record is
"^DD",2,2,.525,21,3,0)
verified only users who hold the designated security key may enter/edit
"^DD",2,2,.525,21,4,0)
this field.
"^DD",2,2,.525,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.525,"DT")
3040708
"^DD",2,2,.526,0)
POW CONFINEMENT LOCATION^RP22'X^DIC(22,^.52;6^S DFN=DA,DGCOMLOC=X D POW^DGLOCK
"^DD",2,2,.526,.1)
POW WAR
"^DD",2,2,.526,1,0)
^.1
"^DD",2,2,.526,1,1,0)
2^AENR526^MUMPS
"^DD",2,2,.526,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.526,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.526,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.526,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.526,1,1,"%D",2,0)
POW CONFINEMENT LOCATION field.
"^DD",2,2,.526,1,1,"DT")
3040614
"^DD",2,2,.526,3)
For this former POW enter the war in which confined.
"^DD",2,2,.526,5,1,0)
2^.525^1
"^DD",2,2,.526,20,0)
^.3LA^1^1
"^DD",2,2,.526,20,1,0)
PW
"^DD",2,2,.526,21,0)
^^6^6^2981123^^^^
"^DD",2,2,.526,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.526,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.526,21,3,0)
war during which confined.  Once the service record is verified only
"^DD",2,2,.526,21,4,0)
those users who hold the designated security key may enter/edit this
"^DD",2,2,.526,21,5,0)
field.  This field cannot be deleted as long as applicant is
"^DD",2,2,.526,21,6,0)
identified as a former POW.
"^DD",2,2,.526,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.526,"DT")
3040614
"^DD",2,2,.527,0)
POW FROM DATE^RDX^^.52;7^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"POW",X) X I $D(X) S DFN=DA D POW^DGLOCK I $D(X) S DGFRDT=X D DOB^DGHELP
"^DD",2,2,.527,.1)

"^DD",2,2,.527,1,0)
^.1
"^DD",2,2,.527,1,1,0)
2^AENR527^MUMPS
"^DD",2,2,.527,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.527,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.527,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.527,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.527,1,1,"%D",2,0)
POW FROM DATE field.
"^DD",2,2,.527,1,1,"DT")
3040614
"^DD",2,2,.527,3)
For this former POW enter the date confinement commenced.
"^DD",2,2,.527,5,1,0)
2^.525^2
"^DD",2,2,.527,20,0)
^.3LA^1^1
"^DD",2,2,.527,20,1,0)
PW
"^DD",2,2,.527,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.527,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.527,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.527,21,3,0)
date on which confinement commenced.  Once
"^DD",2,2,.527,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.527,21,5,0)
security key may enter/edit this field.  This field cannot be
"^DD",2,2,.527,21,6,0)
deleted as long as applicant is identified as a former POW.
"^DD",2,2,.527,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.527,"DT")
3040722
"^DD",2,2,.528,0)
POW TO DATE^RDX^^.52;8^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"POW",X,1) X I $D(X) S DFN=DA D POW^DGLOCK I $D(X) D DOB^DGHELP
"^DD",2,2,.528,.1)

"^DD",2,2,.528,1,0)
^.1
"^DD",2,2,.528,1,1,0)
2^AENR528^MUMPS
"^DD",2,2,.528,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.528,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.528,1,1,"%D",0)
^^2^2^3040614^
"^DD",2,2,.528,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.528,1,1,"%D",2,0)
POW TO DATE field.
"^DD",2,2,.528,1,1,"DT")
3040614
"^DD",2,2,.528,3)
For this former POW enter the date confinement ended.
"^DD",2,2,.528,5,1,0)
2^.525^3
"^DD",2,2,.528,20,0)
^.3LA^1^1
"^DD",2,2,.528,20,1,0)
PW
"^DD",2,2,.528,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.528,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.528,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.528,21,3,0)
date on which confinement ended.  Once the
"^DD",2,2,.528,21,4,0)
service record is verified only those users who hold the designated
"^DD",2,2,.528,21,5,0)
security key may enter/edit this field.  This field cannot be
"^DD",2,2,.528,21,6,0)
deleted as long as applicant is identified as a former POW.
"^DD",2,2,.528,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.528,"DT")
3040614
"^DD",2,2,.5291,0)
COMBAT SERVICE INDICATED?^RSX^Y:YES;N:NO;^.52;11^S DFN=DA D SV^DGLOCK
"^DD",2,2,.5291,.1)
IN COMBAT (Y/N)
"^DD",2,2,.5291,1,0)
^.1
"^DD",2,2,.5291,1,1,0)
^^TRIGGER^2^.5292
"^DD",2,2,.5291,1,1,1)
X ^DD(2,.5291,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$S('$D(^DIC(22,+$P(Y(1),U,12),0)):"",1:$P(^(0),U,1)) S DIU=X K Y S X=DIV S X="" X ^DD(2,.5291,1,1,1.4)
"^DD",2,2,.5291,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.5291,1,1,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,11,99))  S DIH=DIH_U" S %=$P(DIH,U,13,999),DIU=$P(DIH,U,12),^(.52)=$P(DIH,U,1,11)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5292 D ^DICR
"^DD",2,2,.5291,1,1,2)
Q
"^DD",2,2,.5291,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,11)_":",2),$C(59),1)=""
"^DD",2,2,.5291,1,1,2.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,11,99))  S DIH=DIH_U" S %=$P(DIH,U,13,999),DIU=$P(DIH,U,12),^(.52)=$P(DIH,U,1,11)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5292 D ^DICR
"^DD",2,2,.5291,1,1,"CREATE CONDITION")
IN COMBAT="NO"
"^DD",2,2,.5291,1,1,"CREATE VALUE")
@
"^DD",2,2,.5291,1,1,"DELETE CONDITION")
IN COMBAT=""
"^DD",2,2,.5291,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.5291,1,1,"FIELD")
COMBAT WHERE
"^DD",2,2,.5291,1,2,0)
^^TRIGGER^2^.5293
"^DD",2,2,.5291,1,2,1)
X ^DD(2,.5291,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,13) S DIU=X K Y S X=DIV S X="" X ^DD(2,.5291,1,2,1.4)
"^DD",2,2,.5291,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.5291,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,12,99))  S DIH=DIH_U" S %=$P(DIH,U,14,999),DIU=$P(DIH,U,13),^(.52)=$P(DIH,U,1,12)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5293 D ^DICR
"^DD",2,2,.5291,1,2,2)
Q
"^DD",2,2,.5291,1,2,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,11)_":",2),$C(59),1)=""
"^DD",2,2,.5291,1,2,2.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,12,99))  S DIH=DIH_U" S %=$P(DIH,U,14,999),DIU=$P(DIH,U,13),^(.52)=$P(DIH,U,1,12)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5293 D ^DICR
"^DD",2,2,.5291,1,2,"CREATE CONDITION")
IN COMBAT="NO"
"^DD",2,2,.5291,1,2,"CREATE VALUE")
@
"^DD",2,2,.5291,1,2,"DELETE CONDITION")
IN COMBAT=""
"^DD",2,2,.5291,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.5291,1,2,"FIELD")
COMBAT FRO
"^DD",2,2,.5291,1,3,0)
^^TRIGGER^2^.5294
"^DD",2,2,.5291,1,3,1)
X ^DD(2,.5291,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,14) S DIU=X K Y S X=DIV S X="" X ^DD(2,.5291,1,3,1.4)
"^DD",2,2,.5291,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="NO"
"^DD",2,2,.5291,1,3,1.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,13,99))  S DIH=DIH_U" S %=$P(DIH,U,15,999),DIU=$P(DIH,U,14),^(.52)=$P(DIH,U,1,13)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5294 D ^DICR
"^DD",2,2,.5291,1,3,2)
Q
"^DD",2,2,.5291,1,3,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$S($D(^DD(2,.5291,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,11)_":",2),$C(59),1)=""
"^DD",2,2,.5291,1,3,2.4)
S DIH=$S($D(^DPT(DIV(0),.52)):^(.52),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,13,99))  S DIH=DIH_U" S %=$P(DIH,U,15,999),DIU=$P(DIH,U,14),^(.52)=$P(DIH,U,1,13)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.5294 D ^DICR
"^DD",2,2,.5291,1,3,"CREATE CONDITION")
IN COMBAT="NO"
"^DD",2,2,.5291,1,3,"CREATE VALUE")
@
"^DD",2,2,.5291,1,3,"DELETE CONDITION")
IN COMBAT=""
"^DD",2,2,.5291,1,3,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.5291,1,3,"FIELD")
COMBAT TO DATE
"^DD",2,2,.5291,1,4,0)
2^AENR5291^MUMPS
"^DD",2,2,.5291,1,4,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5291,1,4,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5291,1,4,"%D",0)
^^2^2^3040614^
"^DD",2,2,.5291,1,4,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.5291,1,4,"%D",2,0)
COMBAT SERVICE INDICATED? field.
"^DD",2,2,.5291,1,4,"DT")
3040614
"^DD",2,2,.5291,3)
Did this patient serve in combat?
"^DD",2,2,.5291,20,0)
^.3LA^1^1
"^DD",2,2,.5291,20,1,0)
CS
"^DD",2,2,.5291,21,0)
^^4^4^2861006^
"^DD",2,2,.5291,21,1,0)
For this veteran applicant enter 'Y' if s/he served in a combat
"^DD",2,2,.5291,21,2,0)
zone, or 'N' if not.  Once the service record is verified only
"^DD",2,2,.5291,21,3,0)
users who hold the designated security key may enter/edit this
"^DD",2,2,.5291,21,4,0)
field.
"^DD",2,2,.5291,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.5291,"DT")
3040628
"^DD",2,2,.5292,0)
COMBAT SERVICE LOCATION^RP22'X^DIC(22,^.52;12^S DFN=DA S DGCOMLOC=X D COM^DGLOCK
"^DD",2,2,.5292,.1)
COMBAT WHERE
"^DD",2,2,.5292,1,0)
^.1
"^DD",2,2,.5292,1,1,0)
2^AENR5292^MUMPS
"^DD",2,2,.5292,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5292,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5292,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.5292,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.5292,1,1,"%D",2,0)
COMBAT SERVICE LOCATION field.
"^DD",2,2,.5292,1,1,"DT")
3040610
"^DD",2,2,.5292,3)
For this combat veteran enter the war in which combat service was incurred.
"^DD",2,2,.5292,5,1,0)
2^.5291^1
"^DD",2,2,.5292,20,0)
^.3LA^1^1
"^DD",2,2,.5292,20,1,0)
CS
"^DD",2,2,.5292,21,0)
^^6^6^2861007^^^
"^DD",2,2,.5292,21,1,0)
For this veteran applicant who served in a combat zone (IN COMBAT
"^DD",2,2,.5292,21,2,0)
prompt must be answered YES) enter the zone in which s/he
"^DD",2,2,.5292,21,3,0)
served.  Once the service record is verified only those users
"^DD",2,2,.5292,21,4,0)
who hold the designated security key may enter/edit this field.
"^DD",2,2,.5292,21,5,0)
This field cannot be deleted as long as combat service is
"^DD",2,2,.5292,21,6,0)
indicated.
"^DD",2,2,.5292,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5292,"DT")
3040610
"^DD",2,2,.5293,0)
COMBAT FROM DATE^RDX^^.52;13^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"COMB",X) X I $D(X) S DFN=DA D COM^DGLOCK I $D(X) S DGFRDT=X D DOB^DGHELP
"^DD",2,2,.5293,.1)

"^DD",2,2,.5293,1,0)
^.1
"^DD",2,2,.5293,1,1,0)
2^AENR5293^MUMPS
"^DD",2,2,.5293,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5293,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5293,1,1,"%D",0)
^^2^2^3040610^
"^DD",2,2,.5293,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.5293,1,1,"%D",2,0)
COMBAT FROM DATE field.
"^DD",2,2,.5293,1,1,"DT")
3040610
"^DD",2,2,.5293,3)
For this combat veteran enter the date combat service commenced.
"^DD",2,2,.5293,5,1,0)
2^.5291^2
"^DD",2,2,.5293,20,0)
^.3LA^1^1
"^DD",2,2,.5293,20,1,0)
CS
"^DD",2,2,.5293,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.5293,21,1,0)
For this veteran who served in a combat zone (IN COMBAT prompt
"^DD",2,2,.5293,21,2,0)
must be answered YES) enter the date on which combat service
"^DD",2,2,.5293,21,3,0)
commenced.  Once the service record is
"^DD",2,2,.5293,21,4,0)
verified only those users who hold the designated security key
"^DD",2,2,.5293,21,5,0)
may enter/edit this field.  This field cannot be deleted as long
"^DD",2,2,.5293,21,6,0)
as combat service is indicated.
"^DD",2,2,.5293,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5293,"DT")
3040722
"^DD",2,2,.5294,0)
COMBAT TO DATE^RDX^^.52;14^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"COMB",X,1) X I $D(X) S DFN=DA D COM^DGLOCK I $D(X) D DOB^DGHELP
"^DD",2,2,.5294,.1)

"^DD",2,2,.5294,1,0)
^.1
"^DD",2,2,.5294,1,1,0)
2^AENR5294^MUMPS
"^DD",2,2,.5294,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5294,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5294,1,1,"%D",0)
^.101^2^2^3040708^^
"^DD",2,2,.5294,1,1,"%D",1,0)
This MUMPS cross-reference is used to notify HEC of changes to the
"^DD",2,2,.5294,1,1,"%D",2,0)
COMBAT TO DATE field.
"^DD",2,2,.5294,1,1,"DT")
3040610
"^DD",2,2,.5294,3)
For this combat veteran enter the date combat service ended.
"^DD",2,2,.5294,5,1,0)
2^.5291^3
"^DD",2,2,.5294,20,0)
^.3LA^1^1
"^DD",2,2,.5294,20,1,0)
CS
"^DD",2,2,.5294,21,0)
^^6^6^2910116^^^
"^DD",2,2,.5294,21,1,0)
For this veteran who served in a combat zone (IN COMBAT prompt must
"^DD",2,2,.5294,21,2,0)
be answered YES) enter the date on which combat service ended.
"^DD",2,2,.5294,21,3,0)
Once the service record is verified
"^DD",2,2,.5294,21,4,0)
only those users who hold the designated security key may
"^DD",2,2,.5294,21,5,0)
enter/edit this field.  This field cannot be deleted as long as
"^DD",2,2,.5294,21,6,0)
combat service is indicated.
"^DD",2,2,.5294,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5294,"DT")
3040628
"^DD",2,2,.5295,0)
COMBAT VETERAN END DATE^D^^.52;15^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",2,2,.5295,1,0)
^.1
"^DD",2,2,.5295,1,1,0)
2^AENR5295^MUMPS
"^DD",2,2,.5295,1,1,1)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5295,1,1,2)
D EVENT^IVMPLOG(DA)
"^DD",2,2,.5295,1,1,3)
DO NOT DELETE
"^DD",2,2,.5295,1,1,"%D",0)
^^2^2^3040420^
"^DD",2,2,.5295,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes
"^DD",2,2,.5295,1,1,"%D",2,0)
to the COMBAT VETERAN END DATE field.
"^DD",2,2,.5295,1,1,"DT")
3040420
"^DD",2,2,.5295,1,2,0)
^^TRIGGER^2^.5296
"^DD",2,2,.5295,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=DT S DIH=$G(^DPT(DIV(0),.52)),DIV=X S $P(^(.52),U,16)=DIV,DIH=2,DIG=.5296 D ^DICR
"^DD",2,2,.5295,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.52)):^(.52),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=DT S DIH=$G(^DPT(DIV(0),.52)),DIV=X S $P(^(.52),U,16)=DIV,DIH=2,DIG=.5296 D ^DICR
"^DD",2,2,.5295,1,2,"%D",0)
^.101^2^2^3040628^^
"^DD",2,2,.5295,1,2,"%D",1,0)
This trigger x-ref is used to update the date stamp when the CV 
"^DD",2,2,.5295,1,2,"%D",2,0)
Eligibility End date is edited.
"^DD",2,2,.5295,1,2,"CREATE VALUE")
S X=DT
"^DD",2,2,.5295,1,2,"DELETE VALUE")
S X=DT
"^DD",2,2,.5295,1,2,"DT")
3040614
"^DD",2,2,.5295,1,2,"FIELD")
CV
"^DD",2,2,.5295,1,3,0)
2^AENR52951^MUMPS
"^DD",2,2,.5295,1,3,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.5295,1,3,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.5295,1,3,3)
DO NOT DELETE
"^DD",2,2,.5295,1,3,"%D",0)
^^1^1^3040708^
"^DD",2,2,.5295,1,3,"%D",1,0)
This cross-reference is used to update the patient's current Patient Enrollment record.  
"^DD",2,2,.5295,1,3,"DT")
3040708
"^DD",2,2,.5295,20,0)
^.3LA^1^1
"^DD",2,2,.5295,20,1,0)
CS
"^DD",2,2,.5295,21,0)
^.001^4^4^3040420^^^^
"^DD",2,2,.5295,21,1,0)
This field represents the last day for combat vet eligibility. This field 
"^DD",2,2,.5295,21,2,0)
will only be populated by cross-reference when the veteran's combat vet 
"^DD",2,2,.5295,21,3,0)
eligibility has been determined. This value will remain after the combat 
"^DD",2,2,.5295,21,4,0)
vet eligibility period has expired.
"^DD",2,2,.5295,"AUDIT")

"^DD",2,2,.5295,"AX")

"^DD",2,2,.5295,"DT")
3040708
"^DD",27.11,27.11,50.17,0)
UNEMPLOYABLE^S^Y:YES;N:NO;^E;17^Q
"^DD",27.11,27.11,50.17,21,0)
^^1^1^3040519^
"^DD",27.11,27.11,50.17,21,1,0)
Is this patient unemployable due to an SC condition as rated by VARO?
"^DD",27.11,27.11,50.17,"DT")
3040519
"^DD",27.11,27.11,50.18,0)
COMBAT VETERAN END DATE^D^^E;18^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",27.11,27.11,50.18,3)
(No range limit on date)
"^DD",27.11,27.11,50.18,21,0)
^^1^1^3040519^
"^DD",27.11,27.11,50.18,21,1,0)
For veterans who have combat vet eligibility, this field represents the date when that eligibility ends.
"^DD",27.11,27.11,50.18,"DT")
3040519
**INSTALL NAME**
IVM*2.0*97
"BLD",5112,0)
IVM*2.0*97^INCOME VERIFICATION MATCH^0^3040922^y
"BLD",5112,4,0)
^9.64PA^^
"BLD",5112,"ABPKG")
n
"BLD",5112,"KRN",0)
^9.67PA^8989.52^19
"BLD",5112,"KRN",.4,0)
.4
"BLD",5112,"KRN",.401,0)
.401
"BLD",5112,"KRN",.402,0)
.402
"BLD",5112,"KRN",.403,0)
.403
"BLD",5112,"KRN",.5,0)
.5
"BLD",5112,"KRN",.84,0)
.84
"BLD",5112,"KRN",3.6,0)
3.6
"BLD",5112,"KRN",3.8,0)
3.8
"BLD",5112,"KRN",9.2,0)
9.2
"BLD",5112,"KRN",9.8,0)
9.8
"BLD",5112,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",5112,"KRN",9.8,"NM",1,0)
IVMPTRN8^^0^B53574409
"BLD",5112,"KRN",9.8,"NM","B","IVMPTRN8",1)

"BLD",5112,"KRN",19,0)
19
"BLD",5112,"KRN",19.1,0)
19.1
"BLD",5112,"KRN",101,0)
101
"BLD",5112,"KRN",409.61,0)
409.61
"BLD",5112,"KRN",771,0)
771
"BLD",5112,"KRN",870,0)
870
"BLD",5112,"KRN",8989.51,0)
8989.51
"BLD",5112,"KRN",8989.52,0)
8989.52
"BLD",5112,"KRN",8994,0)
8994
"BLD",5112,"KRN","B",.4,.4)

"BLD",5112,"KRN","B",.401,.401)

"BLD",5112,"KRN","B",.402,.402)

"BLD",5112,"KRN","B",.403,.403)

"BLD",5112,"KRN","B",.5,.5)

"BLD",5112,"KRN","B",.84,.84)

"BLD",5112,"KRN","B",3.6,3.6)

"BLD",5112,"KRN","B",3.8,3.8)

"BLD",5112,"KRN","B",9.2,9.2)

"BLD",5112,"KRN","B",9.8,9.8)

"BLD",5112,"KRN","B",19,19)

"BLD",5112,"KRN","B",19.1,19.1)

"BLD",5112,"KRN","B",101,101)

"BLD",5112,"KRN","B",409.61,409.61)

"BLD",5112,"KRN","B",771,771)

"BLD",5112,"KRN","B",870,870)

"BLD",5112,"KRN","B",8989.51,8989.51)

"BLD",5112,"KRN","B",8989.52,8989.52)

"BLD",5112,"KRN","B",8994,8994)

"BLD",5112,"QUES",0)
^9.62^^
"BLD",5112,"REQB",0)
^9.611^1^1
"BLD",5112,"REQB",1,0)
IVM*2.0*56^2
"BLD",5112,"REQB","B","IVM*2.0*56",1)

"MBREQ")
0
"PKG",220,-1)
1^1
"PKG",220,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
2.0^2941021
"PKG",220,22,1,"PAH",1,0)
97^3040922^123456800
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","IVMPTRN8")
0^1^B53574409
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ/BRM/TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 6/22/04 3:34pm
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77,76,75,79,85,89,98,56,97**; 21-OCT-94
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH,IVMSEQ
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06,ZMHSQ,SETID
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 S IVMSEQ="3,5,7,8,11,12,13,14,19"
"RTN","IVMPTRN8",54,0)
 ; do not transmit seq 11 and 12 if the Bad Address Indicator is set
"RTN","IVMPTRN8",55,0)
 ; or other address filters do not pass
"RTN","IVMPTRN8",56,0)
 S:$$FILTER^IVMPTRN9(DFN) IVMSEQ="3,5,7,8,13,14,19"
"RTN","IVMPTRN8",57,0)
 S IVMPID=$$EN^VAFHLPID(DFN,"1,"_IVMSEQ)        ;add SEQ 1 for PID
"RTN","IVMPTRN8",58,0)
 ;
"RTN","IVMPTRN8",59,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",60,0)
 S IVMCMOR="1,2"
"RTN","IVMPTRN8",61,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",62,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",63,0)
 .I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMPID=$$EN^VAFCPID(DFN,"1,2,"_IVMSEQ),IVMCMOR="1,2,3"  ;add SEQ 1 and 2 for PID
"RTN","IVMPTRN8",64,0)
 ;
"RTN","IVMPTRN8",65,0)
 I $D(VAFPID(1)) S IVMPID(1)=VAFPID(1)
"RTN","IVMPTRN8",66,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",67,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",68,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID
"RTN","IVMPTRN8",69,0)
 I $D(IVMPID(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(1)
"RTN","IVMPTRN8",70,0)
 ;
"RTN","IVMPTRN8",71,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",72,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",73,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",74,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",75,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",76,0)
 ;
"RTN","IVMPTRN8",77,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",78,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN1^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19,31,32,33"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",79,0)
 ;
"RTN","IVMPTRN8",80,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",81,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",82,0)
 ;
"RTN","IVMPTRN8",83,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",84,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",85,0)
 ;
"RTN","IVMPTRN8",86,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",87,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",88,0)
 D EN1^VAFHLZEL(DFN,"1,2,5,6,7,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,29,34,35,37,38",2,.VAFZEL)
"RTN","IVMPTRN8",89,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1))  ; Primary Eligibility
"RTN","IVMPTRN8",90,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",91,0)
 F IVMSUB=1:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",92,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",93,0)
 ;
"RTN","IVMPTRN8",94,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",95,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",96,0)
 ;
"RTN","IVMPTRN8",97,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",98,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",99,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",100,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",101,0)
 ;
"RTN","IVMPTRN8",102,0)
 ; Optionally create (ZMH) Military History segments
"RTN","IVMPTRN8",103,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH")
"RTN","IVMPTRN8",104,0)
 S (ZMHSQ,SETID)=0
"RTN","IVMPTRN8",105,0)
 I $D(IVMZMH) F  S ZMHSQ=$O(IVMZMH(ZMHSQ)) Q:ZMHSQ=""  D
"RTN","IVMPTRN8",106,0)
 .Q:$TR($P(IVMZMH(ZMHSQ,0),HLFS,4,5),"""^~")=""
"RTN","IVMPTRN8",107,0)
 .S SETID=SETID+1,IVMCT=IVMCT+1
"RTN","IVMPTRN8",108,0)
 .S ^TMP("HLS",$J,IVMCT)="ZMH"_HLFS_SETID_HLFS_$P(IVMZMH(ZMHSQ,0),HLFS,3,5)
"RTN","IVMPTRN8",109,0)
 ;
"RTN","IVMPTRN8",110,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",111,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",112,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",113,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",114,0)
 ;
"RTN","IVMPTRN8",115,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",116,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",117,0)
 ;
"RTN","IVMPTRN8",118,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",119,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",120,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",121,0)
 ;
"RTN","IVMPTRN8",122,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",123,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",124,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",125,0)
 ;
"RTN","IVMPTRN8",126,0)
 ; Income Year requiring transmission from IVM Patient File (301.5)
"RTN","IVMPTRN8",127,0)
 S IVMIY=$S($D(IVMIY):IVMIY,1:(IVMMTDT-10000))
"RTN","IVMPTRN8",128,0)
 N MTINFO S MTINFO=$$FUT^DGMTU(DFN)
"RTN","IVMPTRN8",129,0)
 I ($E(IVMIY,1,3)+1)=$E($P(MTINFO,U,2),1,3) S IVMMTDT=$P(MTINFO,U,2)
"RTN","IVMPTRN8",130,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",131,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",132,0)
 ;
"RTN","IVMPTRN8",133,0)
 ; The following function call returns:
"RTN","IVMPTRN8",134,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",135,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",136,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",137,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",138,0)
 ;
"RTN","IVMPTRN8",139,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",140,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",141,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",142,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",143,0)
 I $P(^TMP("HLS",$J,IVMCT),"^",3)=HLQ S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC($E(IVMMTDT,1,3)-1_"0000")
"RTN","IVMPTRN8",144,0)
 ;
"RTN","IVMPTRN8",145,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",146,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",147,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",148,0)
 ;
"RTN","IVMPTRN8",149,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",150,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9")
"RTN","IVMPTRN8",151,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",152,0)
 .; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",153,0)
 .S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",154,0)
 ;
"RTN","IVMPTRN8",155,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",156,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",157,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",158,0)
 ;
"RTN","IVMPTRN8",159,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",160,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",161,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",162,0)
 ;
"RTN","IVMPTRN8",163,0)
 ;
"RTN","IVMPTRN8",164,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",165,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",166,0)
 .;
"RTN","IVMPTRN8",167,0)
 .; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",168,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9")
"RTN","IVMPTRN8",169,0)
 .I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",170,0)
 ..; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",171,0)
 ..S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",172,0)
 .;
"RTN","IVMPTRN8",173,0)
 .; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",174,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",175,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",176,0)
 .;
"RTN","IVMPTRN8",177,0)
 .; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",178,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9")
"RTN","IVMPTRN8",179,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",180,0)
 .; 
"RTN","IVMPTRN8",181,0)
 ;
"RTN","IVMPTRN8",182,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN8",183,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)
"RTN","IVMPTRN8",184,0)
 ;
"RTN","IVMPTRN8",185,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN8",186,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN8",187,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN8",188,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN8",189,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN8",190,0)
 .; - get notes and comments
"RTN","IVMPTRN8",191,0)
 .F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",192,0)
 ..S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN8",193,0)
 ;
"RTN","IVMPTRN8",194,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN8",195,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN8",196,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN8",197,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",198,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN8",199,0)
 ;
"RTN","IVMPTRN8",200,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",201,0)
 Q
"VER")
8.0^22
**INSTALL NAME**
SD*5.3*395
"BLD",5238,0)
SD*5.3*395^SCHEDULING^0^3040922^y
"BLD",5238,4,0)
^9.64PA^^
"BLD",5238,"ABPKG")
n
"BLD",5238,"KRN",0)
^9.67PA^8989.52^19
"BLD",5238,"KRN",.4,0)
.4
"BLD",5238,"KRN",.401,0)
.401
"BLD",5238,"KRN",.402,0)
.402
"BLD",5238,"KRN",.403,0)
.403
"BLD",5238,"KRN",.5,0)
.5
"BLD",5238,"KRN",.84,0)
.84
"BLD",5238,"KRN",3.6,0)
3.6
"BLD",5238,"KRN",3.8,0)
3.8
"BLD",5238,"KRN",9.2,0)
9.2
"BLD",5238,"KRN",9.8,0)
9.8
"BLD",5238,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",5238,"KRN",9.8,"NM",1,0)
SCMSVUT3^^0^B20807179
"BLD",5238,"KRN",9.8,"NM","B","SCMSVUT3",1)

"BLD",5238,"KRN",19,0)
19
"BLD",5238,"KRN",19.1,0)
19.1
"BLD",5238,"KRN",101,0)
101
"BLD",5238,"KRN",409.61,0)
409.61
"BLD",5238,"KRN",771,0)
771
"BLD",5238,"KRN",870,0)
870
"BLD",5238,"KRN",8989.51,0)
8989.51
"BLD",5238,"KRN",8989.52,0)
8989.52
"BLD",5238,"KRN",8994,0)
8994
"BLD",5238,"KRN","B",.4,.4)

"BLD",5238,"KRN","B",.401,.401)

"BLD",5238,"KRN","B",.402,.402)

"BLD",5238,"KRN","B",.403,.403)

"BLD",5238,"KRN","B",.5,.5)

"BLD",5238,"KRN","B",.84,.84)

"BLD",5238,"KRN","B",3.6,3.6)

"BLD",5238,"KRN","B",3.8,3.8)

"BLD",5238,"KRN","B",9.2,9.2)

"BLD",5238,"KRN","B",9.8,9.8)

"BLD",5238,"KRN","B",19,19)

"BLD",5238,"KRN","B",19.1,19.1)

"BLD",5238,"KRN","B",101,101)

"BLD",5238,"KRN","B",409.61,409.61)

"BLD",5238,"KRN","B",771,771)

"BLD",5238,"KRN","B",870,870)

"BLD",5238,"KRN","B",8989.51,8989.51)

"BLD",5238,"KRN","B",8989.52,8989.52)

"BLD",5238,"KRN","B",8994,8994)

"BLD",5238,"QUES",0)
^9.62^^
"BLD",5238,"REQB",0)
^9.611^1^1
"BLD",5238,"REQB",1,0)
SD*5.3*239^2
"BLD",5238,"REQB","B","SD*5.3*239",1)

"MBREQ")
0
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,20,0)
^9.402P^^
"PKG",16,22,0)
^9.49I^1^1
"PKG",16,22,1,0)
5.3^2930813
"PKG",16,22,1,"PAH",1,0)
395^3040922^123456800
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","SCMSVUT3")
0^1^B20807179
"RTN","SCMSVUT3",1,0)
SCMSVUT3   ;BP/JRP - HL7 segment & field validation utilities ;8/11/99 9:54am
"RTN","SCMSVUT3",2,0)
 ;;5.3;Scheduling;**142,180,208,239,395**;AUG 13, 1993
"RTN","SCMSVUT3",3,0)
 ;
"RTN","SCMSVUT3",4,0)
 ;Standard input parameters
"RTN","SCMSVUT3",5,0)
 ;   DATA  - Value to validate
"RTN","SCMSVUT3",6,0)
 ;   DFN   - Point to PATIENT file (#2)
"RTN","SCMSVUT3",7,0)
 ;   ENCDT - Date/time of encounter (FileMan format)
"RTN","SCMSVUT3",8,0)
 ;   HLFS  - HL7 field seperator
"RTN","SCMSVUT3",9,0)
 ;   HLECH - HL7 encoding characters
"RTN","SCMSVUT3",10,0)
 ;   HLQ   - HL7 null designation
"RTN","SCMSVUT3",11,0)
 ;
"RTN","SCMSVUT3",12,0)
 ;Standard output
"RTN","SCMSVUT3",13,0)
 ;   1 - Valid
"RTN","SCMSVUT3",14,0)
 ;   0 - Invalid
"RTN","SCMSVUT3",15,0)
 ;
"RTN","SCMSVUT3",16,0)
 ;
"RTN","SCMSVUT3",17,0)
POWLOC(DATA,DFN) ;Prisoner of war location
"RTN","SCMSVUT3",18,0)
 ;Note: Use of DFN is optional.  Use of the DFN will validate the POW
"RTN","SCMSVUT3",19,0)
 ;      location and also verify that it is consistant with patient's
"RTN","SCMSVUT3",20,0)
 ;      POW status (i.e. must also have been a POW).  Non-use of DFN
"RTN","SCMSVUT3",21,0)
 ;      will only validate the POW location.
"RTN","SCMSVUT3",22,0)
 ;
"RTN","SCMSVUT3",23,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",24,0)
 N POW,NODE
"RTN","SCMSVUT3",25,0)
 S DFN=+$G(DFN)
"RTN","SCMSVUT3",26,0)
 ;Patient a POW ?
"RTN","SCMSVUT3",27,0)
 S POW=1
"RTN","SCMSVUT3",28,0)
 I (DFN) D
"RTN","SCMSVUT3",29,0)
 .S NODE=$G(^DPT(DFN,.52))
"RTN","SCMSVUT3",30,0)
 .S POW=$TR($P(NODE,"^",5),"YNU","100")
"RTN","SCMSVUT3",31,0)
 ;Invalid location code
"RTN","SCMSVUT3",32,0)
 I (DATA'="")&("456789AB"'[DATA) Q 0
"RTN","SCMSVUT3",33,0)
 ;Location code not consistant with POW status
"RTN","SCMSVUT3",34,0)
 I (DATA) Q:('POW) 0
"RTN","SCMSVUT3",35,0)
 I (DATA="") Q:((DFN)&(POW)) 0
"RTN","SCMSVUT3",36,0)
 ;Valid location code
"RTN","SCMSVUT3",37,0)
 Q 1
"RTN","SCMSVUT3",38,0)
RADMTHD(DATA,DFN) ;Radiation exposure method
"RTN","SCMSVUT3",39,0)
 ;Note: Use of DFN is optional.  Use of the DFN will validate the
"RTN","SCMSVUT3",40,0)
 ;      radiation method and also verify that it is consistant with
"RTN","SCMSVUT3",41,0)
 ;      patient's radiation exposure (i.e. must also have claimed
"RTN","SCMSVUT3",42,0)
 ;      exposure).  Non-use of DFN will only validate the radiation
"RTN","SCMSVUT3",43,0)
 ;      method.
"RTN","SCMSVUT3",44,0)
 ;
"RTN","SCMSVUT3",45,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",46,0)
 N RAD,NODE
"RTN","SCMSVUT3",47,0)
 S DFN=+$G(DFN)
"RTN","SCMSVUT3",48,0)
 ;Patient claim exposure ?
"RTN","SCMSVUT3",49,0)
 S RAD=1
"RTN","SCMSVUT3",50,0)
 I (DFN) D
"RTN","SCMSVUT3",51,0)
 .S NODE=$G(^DPT(DFN,.321))
"RTN","SCMSVUT3",52,0)
 .S RAD=$TR($P(NODE,"^",3),"YNU","100")
"RTN","SCMSVUT3",53,0)
 ;Invalid method code
"RTN","SCMSVUT3",54,0)
 I (DATA'="") Q:((DATA'?1N)!(DATA<2)!(DATA>4)) 0
"RTN","SCMSVUT3",55,0)
 ;Method code not consistant with exposure status
"RTN","SCMSVUT3",56,0)
 I (DATA) Q:('RAD) 0
"RTN","SCMSVUT3",57,0)
 I (DATA="") Q:((DFN)&(RAD)) 0
"RTN","SCMSVUT3",58,0)
 ;Valid method code
"RTN","SCMSVUT3",59,0)
 Q 1
"RTN","SCMSVUT3",60,0)
NUMRANK(DATA,MINVAL,MAXVAL,DECCNT) ;Numeric ranking validation
"RTN","SCMSVUT3",61,0)
 ;Input  : MINVAL - Minimum value (defaults to no lower limit)
"RTN","SCMSVUT3",62,0)
 ;         MAXVAL - Maximum value (defaults to no upper limit)
"RTN","SCMSVUT3",63,0)
 ;         DECCNT - Decimal places allowed (defaults to no limit)
"RTN","SCMSVUT3",64,0)
 ;Note   : DATA considered invalid if NULL
"RTN","SCMSVUT3",65,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",66,0)
 Q:(DATA="") 0
"RTN","SCMSVUT3",67,0)
 Q:(DATA=".") 0
"RTN","SCMSVUT3",68,0)
 N INVALID
"RTN","SCMSVUT3",69,0)
 S INVALID=0
"RTN","SCMSVUT3",70,0)
 ;General numeric check
"RTN","SCMSVUT3",71,0)
 Q:(DATA'?.1"-".N.1".".N) 0
"RTN","SCMSVUT3",72,0)
 ;Min value check
"RTN","SCMSVUT3",73,0)
 I ($G(MINVAL)'="") D
"RTN","SCMSVUT3",74,0)
 .S INVALID=(DATA<MINVAL)
"RTN","SCMSVUT3",75,0)
 Q:(INVALID) 0
"RTN","SCMSVUT3",76,0)
 ;Max value check
"RTN","SCMSVUT3",77,0)
 I ($G(MAXVAL)'="") D
"RTN","SCMSVUT3",78,0)
 .S INVALID=(DATA>MAXVAL)
"RTN","SCMSVUT3",79,0)
 Q:(INVALID) 0
"RTN","SCMSVUT3",80,0)
 ;Decimal check
"RTN","SCMSVUT3",81,0)
 I ($G(DECCNT)'="") D
"RTN","SCMSVUT3",82,0)
 .X "S INVALID=DATA'?.1""-"".N.1"".""."_DECCNT_"N"
"RTN","SCMSVUT3",83,0)
 Q:(INVALID) 0
"RTN","SCMSVUT3",84,0)
 ;Valid
"RTN","SCMSVUT3",85,0)
 Q 1
"RTN","SCMSVUT3",86,0)
VALFAC(DATA) ;Determine if given facility number is valid
"RTN","SCMSVUT3",87,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",88,0)
 Q:(DATA="") 0
"RTN","SCMSVUT3",89,0)
 ;Invalid
"RTN","SCMSVUT3",90,0)
 Q:('$D(^DIC(4,"D",DATA))) 0
"RTN","SCMSVUT3",91,0)
 ;Valid
"RTN","SCMSVUT3",92,0)
 Q 1
"RTN","SCMSVUT3",93,0)
ACTFAC(DATA) ;Determine if given facility number is active
"RTN","SCMSVUT3",94,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",95,0)
 Q:(DATA="") 0
"RTN","SCMSVUT3",96,0)
 N PTR4,ACTIVE,NODE
"RTN","SCMSVUT3",97,0)
 ;Check all entries in INSTITUTION file (#4) with given facility number
"RTN","SCMSVUT3",98,0)
 ; (quits when first active entry is found)
"RTN","SCMSVUT3",99,0)
 S ACTIVE=0
"RTN","SCMSVUT3",100,0)
 S PTR4=0
"RTN","SCMSVUT3",101,0)
 F  S PTR4=+$O(^DIC(4,"D",DATA,PTR4)) Q:('PTR4)  D  Q:(ACTIVE)
"RTN","SCMSVUT3",102,0)
 .;Get node with inactive flag
"RTN","SCMSVUT3",103,0)
 .S NODE=$G(^DIC(4,PTR4,99))
"RTN","SCMSVUT3",104,0)
 .;Inactive
"RTN","SCMSVUT3",105,0)
 .Q:($P(NODE,"^",4)="y")
"RTN","SCMSVUT3",106,0)
 .;Active
"RTN","SCMSVUT3",107,0)
 .S ACTIVE=1
"RTN","SCMSVUT3",108,0)
 ;Done
"RTN","SCMSVUT3",109,0)
 Q ACTIVE
"RTN","SCMSVUT3",110,0)
PROVID(DATA,HLECH) ;External Provider ID
"RTN","SCMSVUT3",111,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",112,0)
 Q:(DATA="") 0
"RTN","SCMSVUT3",113,0)
 N PRVDUZ,PRVFAC,SUBSEP,VALID
"RTN","SCMSVUT3",114,0)
 S SUBSEP=$E(HLECH,4)
"RTN","SCMSVUT3",115,0)
 S PRVDUZ=$P(DATA,SUBSEP,1)
"RTN","SCMSVUT3",116,0)
 S PRVFAC=$P(DATA,SUBSEP,2)
"RTN","SCMSVUT3",117,0)
 S VALID=0
"RTN","SCMSVUT3",118,0)
 I $$NUMRANK(PRVDUZ,1,,0),$$VALFAC(PRVFAC),$$ACTFAC(PRVFAC) S VALID=1
"RTN","SCMSVUT3",119,0)
 Q VALID
"RTN","SCMSVUT3",120,0)
ROLEID(DATA) ;Role Instance ID
"RTN","SCMSVUT3",121,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",122,0)
 Q:(DATA="") 0
"RTN","SCMSVUT3",123,0)
 N ROLEID,SEQID,VALID
"RTN","SCMSVUT3",124,0)
 S ROLEID=$P(DATA,"*",1)
"RTN","SCMSVUT3",125,0)
 S SEQID=$P(DATA,"*",2)
"RTN","SCMSVUT3",126,0)
 S VALID=0
"RTN","SCMSVUT3",127,0)
 I ROLEID'="" I $$NUMRANK(SEQID,1,,0) S VALID=1
"RTN","SCMSVUT3",128,0)
 Q VALID
"RTN","SCMSVUT3",129,0)
VA01(DATA) ;VA Table 1 (Yes/No/Unknown)
"RTN","SCMSVUT3",130,0)
 ;Notes: Table VA01 allows values of Y,N,U,1,0
"RTN","SCMSVUT3",131,0)
 ;     : NULL is an accepted value
"RTN","SCMSVUT3",132,0)
 Q:('$D(DATA)) 0
"RTN","SCMSVUT3",133,0)
 Q:(DATA="") 1
"RTN","SCMSVUT3",134,0)
 Q:($L(DATA)'=1) 0
"RTN","SCMSVUT3",135,0)
 N TMP
"RTN","SCMSVUT3",136,0)
 S TMP=$TR(DATA,"YNU0","1111")
"RTN","SCMSVUT3",137,0)
 Q:(TMP'=1) 0
"RTN","SCMSVUT3",138,0)
 Q 1
"RTN","SCMSVUT3",139,0)
CLAMST(VALUE,DFN) ;
"RTN","SCMSVUT3",140,0)
 ;Error code 9030
"RTN","SCMSVUT3",141,0)
 ;Validating whether or not the visit is related to MST
"RTN","SCMSVUT3",142,0)
 ;
"RTN","SCMSVUT3",143,0)
 ;INPUT
"RTN","SCMSVUT3",144,0)
 ;   ENCDT -  Date of encounter
"RTN","SCMSVUT3",145,0)
 ;   DFN   -  IEN pointer from the Outpatient Encounter (#409.68) file
"RTN","SCMSVUT3",146,0)
 ;   VALUE -  Is encounter related (1=Yes,0=No)
"RTN","SCMSVUT3",147,0)
 ;
"RTN","SCMSVUT3",148,0)
 ;OUTPUT
"RTN","SCMSVUT3",149,0)
 ;   1 = Visit is related to MST
"RTN","SCMSVUT3",150,0)
 ;   0 = Visit Not related to MST
"RTN","SCMSVUT3",151,0)
 ;
"RTN","SCMSVUT3",152,0)
 ;
"RTN","SCMSVUT3",153,0)
 N MSTSTAT
"RTN","SCMSVUT3",154,0)
 I '$D(VALUE) Q 0
"RTN","SCMSVUT3",155,0)
 S MSTSTAT=$$GETSTAT^DGMSTAPI(DFN)
"RTN","SCMSVUT3",156,0)
 S MSTSTAT=$P(MSTSTAT,"^",2)
"RTN","SCMSVUT3",157,0)
 S MSTSTAT=$S(MSTSTAT="Y":1,1:0)
"RTN","SCMSVUT3",158,0)
 Q $S(MSTSTAT=0&(VALUE=1):0,1:1)
"RTN","SCMSVUT3",159,0)
MSTSTAT(DATA) ;
"RTN","SCMSVUT3",160,0)
 ;Error code 7040
"RTN","SCMSVUT3",161,0)
 ;Check for valid MST status codes Y,N,D,U
"RTN","SCMSVUT3",162,0)
 ;
"RTN","SCMSVUT3",163,0)
 ;INPUT
"RTN","SCMSVUT3",164,0)
 ;   DATA - the MST Status passed in by routine SCMSVZEL 
"RTN","SCMSVUT3",165,0)
 ;
"RTN","SCMSVUT3",166,0)
 ;OUTPUT
"RTN","SCMSVUT3",167,0)
 ;   1 - Valid MST Status
"RTN","SCMSVUT3",168,0)
 ;   0 - Invalid MST Status
"RTN","SCMSVUT3",169,0)
 ;
"RTN","SCMSVUT3",170,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT3",171,0)
 I ("Y,N,U,D"[DATA)!(DATA="") Q 1
"RTN","SCMSVUT3",172,0)
 Q 0
"RTN","SCMSVUT3",173,0)
MSTDATE(DATA) ;
"RTN","SCMSVUT3",174,0)
 ;Error code 7060
"RTN","SCMSVUT3",175,0)
 ;Check for valid date and that MST status is either Y,N,D or U
"RTN","SCMSVUT3",176,0)
 ; Variable X must be passed to ^%DT for date verification
"RTN","SCMSVUT3",177,0)
 ; Variable Y is returned from ^%DT
"RTN","SCMSVUT3",178,0)
 ;
"RTN","SCMSVUT3",179,0)
 ;INPUT
"RTN","SCMSVUT3",180,0)
 ;  DATA - MST Date Status Changed^MST Status from SCMSVZEL
"RTN","SCMSVUT3",181,0)
 ;
"RTN","SCMSVUT3",182,0)
 ;OUTPUT
"RTN","SCMSVUT3",183,0)
 ;   1 - Valid MST Status and date in a valid format
"RTN","SCMSVUT3",184,0)
 ;   0 - Invalid MST Status or date in an invalid format
"RTN","SCMSVUT3",185,0)
 ;
"RTN","SCMSVUT3",186,0)
 N X,MSTSTAT
"RTN","SCMSVUT3",187,0)
 S X=$P(DATA,"^",2)
"RTN","SCMSVUT3",188,0)
 S MSTSTAT=$P(DATA,"^",1)
"RTN","SCMSVUT3",189,0)
 I X=""&("Y,N,D"'[MSTSTAT!(MSTSTAT="")) Q 1
"RTN","SCMSVUT3",190,0)
 S X=$$FMDATE^HLFNC(X),%DT="T"
"RTN","SCMSVUT3",191,0)
 D ^%DT
"RTN","SCMSVUT3",192,0)
 Q $S(Y>0&("U,Y,N,D"[MSTSTAT):1,1:0)
"RTN","SCMSVUT3",193,0)
 ;
"RTN","SCMSVUT3",194,0)
AO(DATA,DFN) ;Validate Agent Orange expos. (error 7120)
"RTN","SCMSVUT3",195,0)
 ;INPUT  : DATA - Value to validate
"RTN","SCMSVUT3",196,0)
 ;         DFN - Pointer to PATIENT file (#2)
"RTN","SCMSVUT3",197,0)
 ;OUTPUT : 1 - Valid claim of exposure to Agent Orange
"RTN","SCMSVUT3",198,0)
 ;         0 - Invalid claim of exposure to Agent Orange
"RTN","SCMSVUT3",199,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT3",200,0)
 I '$D(DFN) Q 0
"RTN","SCMSVUT3",201,0)
 I DATA=1 Q 1 ;$$CANBEAO(DFN)  SD*5.3*395 rem check for period of service
"RTN","SCMSVUT3",202,0)
 I (DATA=0)!(DATA="") Q 1
"RTN","SCMSVUT3",203,0)
 Q 0
"RTN","SCMSVUT3",204,0)
CANBEAO(DFN) ;Check to determine if patient can claim Agent Orange expos.
"RTN","SCMSVUT3",205,0)
 ;INPUT  : DFN - Pointer to PATIENT file (#2)
"RTN","SCMSVUT3",206,0)
 ;OUTPUT : 1 - Valid claim of exposure to Agent Orange
"RTN","SCMSVUT3",207,0)
 ;         0 - Invalid claim of exposure to Agent Orange
"RTN","SCMSVUT3",208,0)
 ;
"RTN","SCMSVUT3",209,0)
 N VAEL
"RTN","SCMSVUT3",210,0)
 I '$G(DFN) Q 0
"RTN","SCMSVUT3",211,0)
 I '$D(^DPT(DFN,0)) Q 0
"RTN","SCMSVUT3",212,0)
 ;Get data needed to perform check
"RTN","SCMSVUT3",213,0)
 D ELIG^VADPT
"RTN","SCMSVUT3",214,0)
 ;Must be a veteran
"RTN","SCMSVUT3",215,0)
 I 'VAEL(4) Q 0
"RTN","SCMSVUT3",216,0)
 ;Must have POS 7
"RTN","SCMSVUT3",217,0)
 I $P($G(^DIC(21,+VAEL(2),0)),"^",3)=7 Q 1
"RTN","SCMSVUT3",218,0)
 ;Can't claim AO
"RTN","SCMSVUT3",219,0)
 Q 0
"RTN","SCMSVUT3",220,0)
AOLOC(DATA,DFN) ;Validate Agent Orange exposure location (error 7130)
"RTN","SCMSVUT3",221,0)
 ;INPUT  : DATA - Value to validate
"RTN","SCMSVUT3",222,0)
 ;         DFN - Pointer to PATIENT file (#2)
"RTN","SCMSVUT3",223,0)
 ;OUTPUT : 1 - Valid Agent Orange exposure location
"RTN","SCMSVUT3",224,0)
 ;         0 - Invalid/missing Agent Orange exposure location
"RTN","SCMSVUT3",225,0)
 ;NOTES  : Patient's claiming exposure must have an exposure location
"RTN","SCMSVUT3",226,0)
 N VASV
"RTN","SCMSVUT3",227,0)
 I '$G(DFN) Q 0
"RTN","SCMSVUT3",228,0)
 I '$D(^DPT(DFN,0)) Q 0
"RTN","SCMSVUT3",229,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT3",230,0)
 ;Get data needed to perform check
"RTN","SCMSVUT3",231,0)
 D SVC^VADPT
"RTN","SCMSVUT3",232,0)
 ;No claim - shouldn't have a location
"RTN","SCMSVUT3",233,0)
 I 'VASV(2) Q $S(DATA="":1,1:0)
"RTN","SCMSVUT3",234,0)
 ;Claims exposure - must have a valid location
"RTN","SCMSVUT3",235,0)
 Q $S(DATA="":0,"VK"[DATA:1,1:0)
"VER")
8.0^22
**END**
**END**
