Released XU*8*393 SEQ #347
Extracted from mail message
**KIDS**:XU*8.0*393^

**INSTALL NAME**
XU*8.0*393
"BLD",900,0)
XU*8.0*393^KERNEL^0^3060905^y
"BLD",900,1,0)
^^2^2^3051101^
"BLD",900,1,1,0)
XU*8*393  KIDS HFS checksums to FORUM.
"BLD",900,1,2,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",900,4,0)
^9.64PA^9.4^3
"BLD",900,4,9.4,0)
9.4
"BLD",900,4,9.4,2,0)
^9.641^9.4901^1
"BLD",900,4,9.4,2,9.4901,0)
PATCH APPLICATION HISTORY  (sub-file)
"BLD",900,4,9.4,2,9.4901,1,0)
^9.6411^.02^1
"BLD",900,4,9.4,2,9.4901,1,.02,0)
DATE APPLIED
"BLD",900,4,9.4,222)
y^n^p^^^^n^^n
"BLD",900,4,9.4,224)

"BLD",900,4,9.6,0)
9.6
"BLD",900,4,9.6,2,0)
^9.641^9.6^1
"BLD",900,4,9.6,2,9.6,0)
BUILD  (File-top level)
"BLD",900,4,9.6,2,9.6,1,0)
^9.6411^63^1
"BLD",900,4,9.6,2,9.6,1,63,0)
Transport Build Number
"BLD",900,4,9.6,222)
y^y^p^^^^n^^n
"BLD",900,4,9.6,224)

"BLD",900,4,9.8,0)
9.8
"BLD",900,4,9.8,2,0)
^9.641^9.818^3
"BLD",900,4,9.8,2,9.8,0)
ROUTINE  (File-top level)
"BLD",900,4,9.8,2,9.8,1,0)
^9.6411^7.2^4
"BLD",900,4,9.8,2,9.8,1,6,0)
CHECKSUM REPORT
"BLD",900,4,9.8,2,9.8,1,6.1,0)
LOCALLY MODIFIED
"BLD",900,4,9.8,2,9.8,1,6.2,0)
DELETED BY PATCH
"BLD",900,4,9.8,2,9.8,1,7.2,0)
CHECKSUM VALUE
"BLD",900,4,9.8,2,9.818,0)
PATCH  (sub-file)
"BLD",900,4,9.8,2,9.818,1,0)
^9.6411^^
"BLD",900,4,9.8,2,9.819,0)
DEV PATCH  (sub-file)
"BLD",900,4,9.8,2,9.819,1,0)
^9.6411^^
"BLD",900,4,9.8,222)
y^y^p^^^^n^^n
"BLD",900,4,9.8,224)

"BLD",900,4,"APDD",9.4,9.4901)

"BLD",900,4,"APDD",9.4,9.4901,.02)

"BLD",900,4,"APDD",9.6,9.6)

"BLD",900,4,"APDD",9.6,9.6,63)

"BLD",900,4,"APDD",9.8,9.8)

"BLD",900,4,"APDD",9.8,9.8,6)

"BLD",900,4,"APDD",9.8,9.8,6.1)

"BLD",900,4,"APDD",9.8,9.8,6.2)

"BLD",900,4,"APDD",9.8,9.8,7.2)

"BLD",900,4,"APDD",9.8,9.818)

"BLD",900,4,"APDD",9.8,9.819)

"BLD",900,4,"B",9.4,9.4)

"BLD",900,4,"B",9.6,9.6)

"BLD",900,4,"B",9.8,9.8)

"BLD",900,6.3)
12
"BLD",900,"KRN",0)
^9.67PA^8989.52^19
"BLD",900,"KRN",.4,0)
.4
"BLD",900,"KRN",.401,0)
.401
"BLD",900,"KRN",.402,0)
.402
"BLD",900,"KRN",.403,0)
.403
"BLD",900,"KRN",.5,0)
.5
"BLD",900,"KRN",.84,0)
.84
"BLD",900,"KRN",3.6,0)
3.6
"BLD",900,"KRN",3.8,0)
3.8
"BLD",900,"KRN",9.2,0)
9.2
"BLD",900,"KRN",9.8,0)
9.8
"BLD",900,"KRN",9.8,"NM",0)
^9.68A^10^10
"BLD",900,"KRN",9.8,"NM",1,0)
XPDT^^0^B73091341
"BLD",900,"KRN",9.8,"NM",2,0)
XPDET^^0^B32583280
"BLD",900,"KRN",9.8,"NM",3,0)
XPDIR^^0^B4848673
"BLD",900,"KRN",9.8,"NM",4,0)
XPDTA^^0^B28341432
"BLD",900,"KRN",9.8,"NM",5,0)
XPDCOM^^0^B12902115
"BLD",900,"KRN",9.8,"NM",6,0)
XPDIP^^0^B39786511
"BLD",900,"KRN",9.8,"NM",7,0)
XPDDCS^^0^B17950481
"BLD",900,"KRN",9.8,"NM",8,0)
XPDR^^0^B50211509
"BLD",900,"KRN",9.8,"NM",9,0)
XPDIST^^0^B15585220
"BLD",900,"KRN",9.8,"NM",10,0)
XPDIA3^^0^B8738323
"BLD",900,"KRN",9.8,"NM","B","XPDCOM",5)

"BLD",900,"KRN",9.8,"NM","B","XPDDCS",7)

"BLD",900,"KRN",9.8,"NM","B","XPDET",2)

"BLD",900,"KRN",9.8,"NM","B","XPDIA3",10)

"BLD",900,"KRN",9.8,"NM","B","XPDIP",6)

"BLD",900,"KRN",9.8,"NM","B","XPDIR",3)

"BLD",900,"KRN",9.8,"NM","B","XPDIST",9)

"BLD",900,"KRN",9.8,"NM","B","XPDR",8)

"BLD",900,"KRN",9.8,"NM","B","XPDT",1)

"BLD",900,"KRN",9.8,"NM","B","XPDTA",4)

"BLD",900,"KRN",19,0)
19
"BLD",900,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",900,"KRN",19,"NM",1,0)
XPD ROUTINE UPDATE^^0
"BLD",900,"KRN",19,"NM","B","XPD ROUTINE UPDATE",1)

"BLD",900,"KRN",19.1,0)
19.1
"BLD",900,"KRN",101,0)
101
"BLD",900,"KRN",409.61,0)
409.61
"BLD",900,"KRN",771,0)
771
"BLD",900,"KRN",870,0)
870
"BLD",900,"KRN",8989.51,0)
8989.51
"BLD",900,"KRN",8989.51,"NM",0)
^9.68A^1^1
"BLD",900,"KRN",8989.51,"NM",1,0)
XPD PATCH HFS SERVER^^0
"BLD",900,"KRN",8989.51,"NM","B","XPD PATCH HFS SERVER",1)

"BLD",900,"KRN",8989.52,0)
8989.52
"BLD",900,"KRN",8994,0)
8994
"BLD",900,"KRN","B",.4,.4)

"BLD",900,"KRN","B",.401,.401)

"BLD",900,"KRN","B",.402,.402)

"BLD",900,"KRN","B",.403,.403)

"BLD",900,"KRN","B",.5,.5)

"BLD",900,"KRN","B",.84,.84)

"BLD",900,"KRN","B",3.6,3.6)

"BLD",900,"KRN","B",3.8,3.8)

"BLD",900,"KRN","B",9.2,9.2)

"BLD",900,"KRN","B",9.8,9.8)

"BLD",900,"KRN","B",19,19)

"BLD",900,"KRN","B",19.1,19.1)

"BLD",900,"KRN","B",101,101)

"BLD",900,"KRN","B",409.61,409.61)

"BLD",900,"KRN","B",771,771)

"BLD",900,"KRN","B",870,870)

"BLD",900,"KRN","B",8989.51,8989.51)

"BLD",900,"KRN","B",8989.52,8989.52)

"BLD",900,"KRN","B",8994,8994)

"BLD",900,"QUES",0)
^9.62^^
"BLD",900,"REQB",0)
^9.611^4^4
"BLD",900,"REQB",1,0)
XU*8.0*124^2
"BLD",900,"REQB",2,0)
XU*8.0*229^2
"BLD",900,"REQB",3,0)
XU*8.0*202^2
"BLD",900,"REQB",4,0)
XU*8.0*302^2
"BLD",900,"REQB","B","XU*8.0*124",1)

"BLD",900,"REQB","B","XU*8.0*202",3)

"BLD",900,"REQB","B","XU*8.0*229",2)

"BLD",900,"REQB","B","XU*8.0*302",4)

"FIA",9.4)
PACKAGE
"FIA",9.4,0)
^DIC(9.4,
"FIA",9.4,0,0)
9.4I
"FIA",9.4,0,1)
y^n^p^^^^n^^n
"FIA",9.4,0,10)

"FIA",9.4,0,11)

"FIA",9.4,0,"RLRO")

"FIA",9.4,0,"VR")
8.0^XU
"FIA",9.4,9.4)
1
"FIA",9.4,9.4901)
1
"FIA",9.4,9.4901,.02)

"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^y^p^^^^n^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.6,63)

"FIA",9.8)
ROUTINE
"FIA",9.8,0)
^DIC(9.8,
"FIA",9.8,0,0)
9.8
"FIA",9.8,0,1)
y^y^p^^^^n^^n
"FIA",9.8,0,10)

"FIA",9.8,0,11)

"FIA",9.8,0,"RLRO")

"FIA",9.8,0,"VR")
8.0^XU
"FIA",9.8,9.8)
1
"FIA",9.8,9.8,6)

"FIA",9.8,9.8,6.1)

"FIA",9.8,9.8,6.2)

"FIA",9.8,9.8,7.2)

"FIA",9.8,9.8,8)

"FIA",9.8,9.8,9)

"FIA",9.8,9.818)
0
"FIA",9.8,9.819)
0
"KRN",19,238,-1)
0^1
"KRN",19,238,0)
XPD ROUTINE UPDATE^Update Routine File^^R^^^^^^^^
"KRN",19,238,1,0)
^^6^6^3060509^
"KRN",19,238,1,1,0)
This option lets you update the Routine File by adding existing routine
"KRN",19,238,1,2,0)
names from the current system.  You enter the namespaces of routines to
"KRN",19,238,1,3,0)
update the routine file with, and namespaces to exclude from the updating. 
"KRN",19,238,1,4,0)
In addition, if you ask it to, this option goes through the Routine File
"KRN",19,238,1,5,0)
and deletes any local routine names that no longer exist on the system.
"KRN",19,238,1,6,0)
Any routine listed as national will not be removed from the file.
"KRN",19,238,25)
UPDT^XPDR
"KRN",19,238,"U")
UPDATE ROUTINE FILE
"KRN",8989.51,238,-1)
0^1
"KRN",8989.51,238,0)
XPD PATCH HFS SERVER^Patch module HFS server^0^^DHCP patch module server name
"KRN",8989.51,238,1)
F^3:70^The Domain name of the Patch Module server
"KRN",8989.51,238,20,0)
^8989.512^2^2^3051012^^^
"KRN",8989.51,238,20,1,0)
This field holds the name of the server to send e-mail to when a KIDS HFS 
"KRN",8989.51,238,20,2,0)
file is made.
"KRN",8989.51,238,30,0)
^8989.513I^1^1
"KRN",8989.51,238,30,1,0)
1^9.4
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3051215^2970507^.5
"PKG",3,22,1,"PAH",1,0)
393^3060905^2
"PKG",3,22,1,"PAH",1,1,0)
^^2^2^3060905
"PKG",3,22,1,"PAH",1,1,1,0)
XU*8*393  KIDS HFS checksums to FORUM.
"PKG",3,22,1,"PAH",1,1,2,0)
Please refer to the Description in the FORUM Patch Module for details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
10
"RTN","XPDCOM")
0^5^B12902115^B12356442
"RTN","XPDCOM",1,0)
XPDCOM ;SFISC/RSD - Compare Transport Global ;09/22/2005  574322.260552
"RTN","XPDCOM",2,0)
 ;;8.0;KERNEL;**21,58,108,124,393**;Jul 10, 1995;Build 12
"RTN","XPDCOM",3,0)
EN1 ;compare to current system
"RTN","XPDCOM",4,0)
 N DIC,DIR,DIRUT,POP,XPD,XPDA,XPDC,XPDNM,XPDT,XPDST,Y,Z,%ZIS
"RTN","XPDCOM",5,0)
 ;S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I '$P(^(0),U,9),$D(^XTMP(""XPDI"",Y))"
"RTN","XPDCOM",6,0)
 ;D ^DIC Q:Y<0  S XPDA=+Y,XPDNM=Y(0,0)
"RTN","XPDCOM",7,0)
 S XPDST=$$LOOK^XPDI1("I '$P(^(0),U,9),$D(^XTMP(""XPDI"",Y))",1) Q:XPDST'>0
"RTN","XPDCOM",8,0)
 S DIR(0)="S^1:Full Comparison;2:Second line of Routines only;3:Routines only;4:Columnar Routine compare",DIR("A")="Type of Compare",DIR("?")="Enter the type of comparison." ;rwf
"RTN","XPDCOM",9,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","XPDCOM",10,0)
 S XPDC=Y,Y="JOB^XPDCOM",Z="Transport Global Compare",XPD("XPDNM")="",XPD("XPDC")="",XPD("XPDT(")=""
"RTN","XPDCOM",11,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDCOM",12,0)
 Q
"RTN","XPDCOM",13,0)
JOB ;Loop thru XPDT
"RTN","XPDCOM",14,0)
 N XPDIT
"RTN","XPDCOM",15,0)
 F XPDIT=0:0 S XPDIT=$O(XPDT(XPDIT)) Q:XPDIT'>0  D COM(+XPDT(XPDIT))
"RTN","XPDCOM",16,0)
 Q
"RTN","XPDCOM",17,0)
 ;
"RTN","XPDCOM",18,0)
COM(XPDA) ;XPDA=ien of package in ^XTMP("XPDI"
"RTN","XPDCOM",19,0)
 Q:'$D(^XTMP("XPDI",$G(XPDA)))
"RTN","XPDCOM",20,0)
 S:$D(XPDT("DA",XPDA)) XPDNM=$P(XPDT(+XPDT("DA",XPDA)),U,2)
"RTN","XPDCOM",21,0)
 D HDR,COMR(5):XPDC<4,XPDDO^XTRCMP(XPDA):XPDC=4,EN^XPDCOMG:XPDC=1 ;rwf
"RTN","XPDCOM",22,0)
 Q
"RTN","XPDCOM",23,0)
 ;compare routines
"RTN","XPDCOM",24,0)
COMR(NL) ;NL=number of lines to check ahead
"RTN","XPDCOM",25,0)
 N DL,XL,XPDI,X,XL,Y,YL
"RTN","XPDCOM",26,0)
 S:'$G(NL) NL=5 S XPDI=""
"RTN","XPDCOM",27,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S X=$G(^(XPDI)) D
"RTN","XPDCOM",28,0)
 .I X W:X=1 !!,"DELETE Routine: ",XPDI,! Q
"RTN","XPDCOM",29,0)
 .S X=XPDI X ^%ZOSF("TEST") E  W !!,"ADD Routine: ",XPDI,! Q
"RTN","XPDCOM",30,0)
 .W !!," Routine: ",XPDI
"RTN","XPDCOM",31,0)
 .;check 2nd line only
"RTN","XPDCOM",32,0)
 .I XPDC=2 D  Q
"RTN","XPDCOM",33,0)
 ..S X=$G(^XTMP("XPDI",XPDA,"RTN",XPDI,2,0)),Y=$T(+2^@XPDI)
"RTN","XPDCOM",34,0)
 ..W !,"<TG> ",X,!,"<SYS>",Y Q:X=Y!(X'["**")
"RTN","XPDCOM",35,0)
 ..;check patch string
"RTN","XPDCOM",36,0)
 ..S X=$P(X,"**",2),XL=$L(X,","),Y=$P(Y,"**",2),YL=$L(Y,",")
"RTN","XPDCOM",37,0)
 ..Q:X=Y
"RTN","XPDCOM",38,0)
 ..;incoming has more patches than system, check for missing patches
"RTN","XPDCOM",39,0)
 ..I XL>YL W:$P(X,",",1,(XL-1))'=Y !,"*** WARNING, you are missing one or more Patches ***" Q
"RTN","XPDCOM",40,0)
 ..I YL>XL W !,"*** WARNING, your routine has more patches than the incoming routine ***" Q
"RTN","XPDCOM",41,0)
 .F %=1:1 Q:'$D(^XTMP("XPDI",XPDA,"RTN",XPDI,%))
"RTN","XPDCOM",42,0)
 .;XL=lines in routine in XTMP, DL=line in routine on disk
"RTN","XPDCOM",43,0)
 .S XL=%-1,DL=$$LD(XPDI)
"RTN","XPDCOM",44,0)
 .D COMP K ^TMP($J,XPDI)
"RTN","XPDCOM",45,0)
 Q
"RTN","XPDCOM",46,0)
COMP ;taken from XMPC routine
"RTN","XPDCOM",47,0)
 N D1,DI,I,J,K,X1,XI,Y1
"RTN","XPDCOM",48,0)
 S (XI,DI)=0
"RTN","XPDCOM",49,0)
 ;check each line in the incoming routine,X1, against the routine on disk,D1
"RTN","XPDCOM",50,0)
 F  S XI=XI+1,DI=DI+1 Q:XI>XL!(DI>DL)  D:^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0)'=^TMP($J,XPDI,DI,0)
"RTN","XPDCOM",51,0)
 .S X1=^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0),Y1=0
"RTN","XPDCOM",52,0)
 .;if lines are not the same, look ahead five lines in D1
"RTN","XPDCOM",53,0)
 .F I=DI:1:$S(DI+NL<DL:DI+NL,1:DL) S D1=^TMP($J,XPDI,I,0) D  Q:Y1
"RTN","XPDCOM",54,0)
 ..F K=1:5:26 Q:$L($E(D1,K,K+10))<7  I $F(X1,$E(D1,K,K+10))  D  Q
"RTN","XPDCOM",55,0)
 ...;print the lines upto the line that are the same
"RTN","XPDCOM",56,0)
 ...F J=DI:1:I-1 D WP(^TMP($J,XPDI,J,0),2)
"RTN","XPDCOM",57,0)
 ...;quit if the lines are equal
"RTN","XPDCOM",58,0)
 ...S DI=I,Y1=1 Q:D1=X1
"RTN","XPDCOM",59,0)
 ...;if lines are equal, print old and new
"RTN","XPDCOM",60,0)
 ...D WP(D1,3),WP(X1,4)
"RTN","XPDCOM",61,0)
 .Q:Y1  D WP(X1,1) S DI=DI-1
"RTN","XPDCOM",62,0)
 ;check remaining lines in routines
"RTN","XPDCOM",63,0)
 I XI>XL&(DI<(DL+1)) F I=DI:1:DL D WP(^TMP($J,XPDI,I,0),2)
"RTN","XPDCOM",64,0)
 I DI>DL&(XI<(XL+1)) F I=XI:1:XL D WP(^XTMP("XPDI",XPDA,"RTN",XPDI,I,0),1)
"RTN","XPDCOM",65,0)
 Q
"RTN","XPDCOM",66,0)
WP(X,Y) W !,"* "_$P("ADD^DEL^OLD^NEW",U,Y)_" *  ",X
"RTN","XPDCOM",67,0)
 Q
"RTN","XPDCOM",68,0)
 ;load system routine into TMP global
"RTN","XPDCOM",69,0)
LD(X) N %N,DIF,XCNP
"RTN","XPDCOM",70,0)
 K ^TMP($J,X)
"RTN","XPDCOM",71,0)
 S DIF="^TMP($J,X,",XCNP=0
"RTN","XPDCOM",72,0)
 X ^%ZOSF("LOAD")
"RTN","XPDCOM",73,0)
 Q XCNP-1
"RTN","XPDCOM",74,0)
 ;
"RTN","XPDCOM",75,0)
HDR S $P(XPDUL,"-",80)=""
"RTN","XPDCOM",76,0)
 W @IOF,"Compare ",XPDNM," to current site",!
"RTN","XPDCOM",77,0)
 I XPDC>1 W:XPDC=2 "2nd Line of " W "Routines Only",!
"RTN","XPDCOM",78,0)
 W XPDUL,!
"RTN","XPDCOM",79,0)
 Q
"RTN","XPDDCS")
0^7^B17950481^B10451575
"RTN","XPDDCS",1,0)
XPDDCS ;SFISC/RSD - Display Checksum for a package ;06/05/2006
"RTN","XPDDCS",2,0)
 ;;8.0;KERNEL;**2,44,108,202,393**;Jul 10, 1995;Build 12
"RTN","XPDDCS",3,0)
EN1 ;Verify checksums in Transport Global
"RTN","XPDDCS",4,0)
 N D0,DIC,X,XPD,XPDS,XPDST,XPDT,Y,Z
"RTN","XPDDCS",5,0)
 ;S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDCS",6,0)
 ;D ^DIC Q:Y<0
"RTN","XPDDCS",7,0)
 S XPDS="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDCS",8,0)
 S XPDST=$$LOOK^XPDI1(XPDS) Q:XPDST'>0
"RTN","XPDDCS",9,0)
 S XPDSHW=$$ASK Q:$D(DIRUT)
"RTN","XPDDCS",10,0)
 S XPD("XPDT(")="",XPD("XPDST")="",XPD("XPDSHW")="",X="XUTMDEVQ"
"RTN","XPDDCS",11,0)
 ;during Virgin install, XUTMDEVQ might not exists
"RTN","XPDDCS",12,0)
 X ^%ZOSF("TEST") E  D  Q
"RTN","XPDDCS",13,0)
 .S IOSL=99999,IOM=80,IOF="#",IOST="",$Y=0 D LST1(9.7)
"RTN","XPDDCS",14,0)
 S Y="LST1^XPDDCS(9.7)",Z="Checksum Print"
"RTN","XPDDCS",15,0)
 ;p345-rename AND* to XPD*
"RTN","XPDDCS",16,0)
 I '$G(XPDAUTO) D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",17,0)
 I $G(XPDAUTO) S IO=XPDDEV U XPDDEV D LST1^XPDDCS(9.7)
"RTN","XPDDCS",18,0)
 Q
"RTN","XPDDCS",19,0)
 ;
"RTN","XPDDCS",20,0)
ASK() ;Ask if want each routine listed
"RTN","XPDDCS",21,0)
 N DIR
"RTN","XPDDCS",22,0)
 I $D(XPDAUTO) Q 1
"RTN","XPDDCS",23,0)
 S DIR(0)="YAO",DIR("A")="Want each Routine Listed with Checksums: ",DIR("A",1)="",DIR("B")="Yes"
"RTN","XPDDCS",24,0)
 D ^DIR
"RTN","XPDDCS",25,0)
 Q Y
"RTN","XPDDCS",26,0)
 ;
"RTN","XPDDCS",27,0)
EN2 ;print from build (system)
"RTN","XPDDCS",28,0)
 N D0,DIC,XPD,XPDT,XPDST,Y,Z
"RTN","XPDDCS",29,0)
 ;S DIC="^XPD(9.6,",DIC(0)="AEQMZ"
"RTN","XPDDCS",30,0)
 ;D ^DIC Q:Y<0
"RTN","XPDDCS",31,0)
 S XPDST=$$LOOK^XPDB1() Q:XPDST'>0
"RTN","XPDDCS",32,0)
 S XPDSHW=$$ASK Q:$D(DIRUT)
"RTN","XPDDCS",33,0)
 S XPD("XPDT(")="",XPD("XPDSHW")="",Y="LST1^XPDDCS(9.6)",Z="Checksum Print"
"RTN","XPDDCS",34,0)
 ;p345-rename AND* to XPD*
"RTN","XPDDCS",35,0)
 I '$G(XPDAUTO) D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",36,0)
 I $G(XPDAUTO) S:'$D(XPDDEV) XPDDEV=0 U XPDDEV D LST1^XPDDCS(9.6)
"RTN","XPDDCS",37,0)
 Q
"RTN","XPDDCS",38,0)
 ;
"RTN","XPDDCS",39,0)
LST1(FILE) ;Print group
"RTN","XPDDCS",40,0)
 N XPDI S XPDI=0
"RTN","XPDDCS",41,0)
 F  S XPDI=$O(XPDT(XPDI)) Q:XPDI'>0  S D0=+XPDT(XPDI) D PNT(FILE)
"RTN","XPDDCS",42,0)
 Q
"RTN","XPDDCS",43,0)
 ;
"RTN","XPDDCS",44,0)
PNT(XPDFIL) ;print
"RTN","XPDDCS",45,0)
 N XPD0,XPDC,XPDDT,XPDE,XPDI,XPDJ,XPDPG,XPDQ,XPDUL,X
"RTN","XPDDCS",46,0)
 Q:'$D(^XPD(XPDFIL,D0,0))  S XPD0=^(0),XPDPG=1,$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDCS",47,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR
"RTN","XPDDCS",48,0)
 W !
"RTN","XPDDCS",49,0)
 S XPDI="",(XPDQ,XPDE)=0
"RTN","XPDDCS",50,0)
 ;XPDFIL=9.7  use transport global exists
"RTN","XPDDCS",51,0)
 I XPDFIL=9.7 D
"RTN","XPDDCS",52,0)
 .I '$D(^XTMP("XPDI",D0)) W !!," ** Transport Global doesn't exist **" S XPDQ=1 Q
"RTN","XPDDCS",53,0)
 .;check for missing nodes in transport global
"RTN","XPDDCS",54,0)
 .I '$D(^XTMP("XPDI",D0,"BLD"))="" W !!," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",55,0)
 .F XPDC=0:1 S XPDI=$O(^XTMP("XPDI",D0,"RTN",XPDI)) Q:XPDI=""  S XPDJ=$G(^(XPDI)) D  Q:XPDQ
"RTN","XPDDCS",56,0)
 ..I XPDJ="" W !," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",57,0)
 ..;if deleting at site, there is no checksum
"RTN","XPDDCS",58,0)
 ..I +XPDJ=1 S XPDC=XPDC-1 Q
"RTN","XPDDCS",59,0)
 ..D SUM(XPDI,$NA(^XTMP("XPDI",D0,"RTN",XPDI)),$P(XPDJ,U,3),$P(XPDJ,U,4))
"RTN","XPDDCS",60,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",61,0)
 ;check build file
"RTN","XPDDCS",62,0)
 E  D
"RTN","XPDDCS",63,0)
 .F XPDC=0:1 S XPDI=$O(^XPD(9.6,D0,"KRN",9.8,"NM","B",XPDI)) Q:XPDI=""  S XPDJ=$O(^(XPDI,0)) D  Q:XPDQ
"RTN","XPDDCS",64,0)
 ..Q:'$D(^XPD(9.6,D0,"KRN",9.8,"NM",+XPDJ,0))  S XPDJ=$P(^(0),U,4)
"RTN","XPDDCS",65,0)
 ..;quit if no checksum, routine wasn't loaded
"RTN","XPDDCS",66,0)
 ..I XPDJ="" S XPDC=XPDC-1 Q
"RTN","XPDDCS",67,0)
 ..N DIF,XCNP,%N
"RTN","XPDDCS",68,0)
 ..S X=XPDI,DIF="^TMP($J,""RTN"",XPDI,",XCNP=0
"RTN","XPDDCS",69,0)
 ..X ^%ZOSF("TEST") E  W !,XPDI,?10,"Doesn't Exist" Q
"RTN","XPDDCS",70,0)
 ..X ^%ZOSF("LOAD")
"RTN","XPDDCS",71,0)
 ..D SUM(XPDI,$NA(^TMP($J,"RTN",XPDI)),XPDJ,"")
"RTN","XPDDCS",72,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",73,0)
 Q:XPDQ
"RTN","XPDDCS",74,0)
 W !!?3,XPDC," Routine"_$S(XPDC>1:"s",1:"")_" checked, ",XPDE," failed.",!
"RTN","XPDDCS",75,0)
 ;p345-rename AND* to XPD*
"RTN","XPDDCS",76,0)
 I $G(XPDAUTO) S XPDCHKSM=XPDE
"RTN","XPDDCS",77,0)
 Q
"RTN","XPDDCS",78,0)
 ;
"RTN","XPDDCS",79,0)
 ;XPDR=routine name, Z=global root, XPD=check sum, XPDBS=before Checksum from FORUM
"RTN","XPDDCS",80,0)
SUM(XPDR,Z,XPD,XPDBS) ;check checksum
"RTN","XPDDCS",81,0)
 N Y
"RTN","XPDDCS",82,0)
 ;See if we have a before checksum and compare.
"RTN","XPDDCS",83,0)
 I $L(XPDBS) D BEFORE(XPDR,XPDBS)
"RTN","XPDDCS",84,0)
 ;first char. is the sum tag used in XPDRSUM
"RTN","XPDDCS",85,0)
 I XPD'?1U1.N W !,XPDR,?10,"ERROR in Checksum" S XPDE=XPDE+1 Q
"RTN","XPDDCS",86,0)
 S @("Y=$$SUM"_$E(XPD)_"^XPDRSUM(Z)"),XPD=$E(XPD,2,255)
"RTN","XPDDCS",87,0)
 I Y=XPD,XPDSHW W !,XPDR,?10,"Calculated "_$J(XPD,10)
"RTN","XPDDCS",88,0)
 I Y'=XPD W !,XPDR,?10,"Calculated "_$C(7)_$J(Y,10)_", expected value "_XPD S XPDE=XPDE+1
"RTN","XPDDCS",89,0)
 Q
"RTN","XPDDCS",90,0)
 ;
"RTN","XPDDCS",91,0)
BEFORE(RN,SUM) ;Check a before Checksum
"RTN","XPDDCS",92,0)
 N DIF,XCNP,%N,X
"RTN","XPDDCS",93,0)
 I SUM'?1U1.N Q
"RTN","XPDDCS",94,0)
 S X=RN,DIF="^TMP($J,""XPDDCS"",RN,",XCNP=0
"RTN","XPDDCS",95,0)
 X ^%ZOSF("TEST") E  W !,RN,?10,"Not on current system." Q
"RTN","XPDDCS",96,0)
 X ^%ZOSF("LOAD")
"RTN","XPDDCS",97,0)
 S DIF=$NA(^TMP($J,"XPDDCS",RN))
"RTN","XPDDCS",98,0)
 S @("Y=$$SUM"_$E(SUM)_"^XPDRSUM(DIF)"),SUM=$E(SUM,2,255)
"RTN","XPDDCS",99,0)
 I Y'=SUM W !,RN,?10,"Before Checksum Calculated "_Y_" expected value "_SUM
"RTN","XPDDCS",100,0)
 Q
"RTN","XPDDCS",101,0)
 ;
"RTN","XPDDCS",102,0)
CHK(Y) ;Y=excess lines, return 1 to exit
"RTN","XPDDCS",103,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDCS",104,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDCS",105,0)
 .N DIR,I,J,K,X
"RTN","XPDDCS",106,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDCS",107,0)
 S XPDPG=XPDPG+1
"RTN","XPDDCS",108,0)
 W @IOF D HDR
"RTN","XPDDCS",109,0)
 Q 0
"RTN","XPDDCS",110,0)
 ;
"RTN","XPDDCS",111,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDDCS",112,0)
 Q
"RTN","XPDET")
0^2^B32583280^B32568215
"RTN","XPDET",1,0)
XPDET ;SFISC/RSD - Input tranforms & help for file 9.6 & 9.7 ;10/19/2002  15:43
"RTN","XPDET",2,0)
 ;;8.0;KERNEL;**15,39,41,44,51,58,66,137,229,393**;Jul 10, 1995;Build 12
"RTN","XPDET",3,0)
 Q
"RTN","XPDET",4,0)
INPUTB(X) ;input tranfrom for NAME in BUILD file
"RTN","XPDET",5,0)
 ;X=user input
"RTN","XPDET",6,0)
 ;name must be unique
"RTN","XPDET",7,0)
 I $L(X)>50!($L(X)<3)!$D(^XPD(9.6,"B",X)) K X Q
"RTN","XPDET",8,0)
 I X["*" K:$P(X,"*",2,3)'?1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.6N X Q
"RTN","XPDET",9,0)
 S %=$L(X," ") I %<2 K X Q
"RTN","XPDET",10,0)
 S %=$P(X," ",%) K:%'?1.2N1"."1.2N.1(1"V",1"T",1"B").2N X
"RTN","XPDET",11,0)
 Q
"RTN","XPDET",12,0)
INPUTE(X) ;input transform for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",13,0)
 ;X=user input
"RTN","XPDET",14,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,XPDLK,Y
"RTN","XPDET",15,0)
 S XPDLK=$$GR(D1)
"RTN","XPDET",16,0)
 I XPDLK=""!X["*" K X Q
"RTN","XPDET",17,0)
 S DIC(0)="QEMZ",DIC=XPDLK
"RTN","XPDET",18,0)
 S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",19,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",20,0)
 S X=Y(0,0)
"RTN","XPDET",21,0)
 ;check that this doesn't exist already
"RTN","XPDET",22,0)
 I $D(^XPD(9.6,D0,"KRN",D1,"NM","B",X)) K X Q
"RTN","XPDET",23,0)
 ;if fm file, change X to contain file # of template
"RTN","XPDET",24,0)
 I D1<.404 S X=$$TX(X,$P(Y(0),U,$S(D1=.403:8,1:4)))
"RTN","XPDET",25,0)
 Q
"RTN","XPDET",26,0)
GLOBALE(X) ;input transform for GLOBAL multiple .01 field in file 9.6
"RTN","XPDET",27,0)
 I $L(X)>30!($L(X)<2) K X Q
"RTN","XPDET",28,0)
 I X["(",X'[")" K X Q
"RTN","XPDET",29,0)
 ;change ' back to " for subscripts, they were changed in the Pre-Lookup node of the DD, 7.5. This was done to trick FM, which doesn't allow " in .01 fields
"RTN","XPDET",30,0)
 S X=$TR(X,"'","""")
"RTN","XPDET",31,0)
 I '$D(@("^"_X)) K X
"RTN","XPDET",32,0)
 Q
"RTN","XPDET",33,0)
INPUTMB(X) ;input transform for field 10 and 11 in file 9.6
"RTN","XPDET",34,0)
 ;X=user input
"RTN","XPDET",35,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,Y
"RTN","XPDET",36,0)
 ;can't select a global or multi package or itself (D0)
"RTN","XPDET",37,0)
 S DIC(0)="QEMZ",DIC="^XPD(9.6,",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",38,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",39,0)
 S X=Y(0,0)
"RTN","XPDET",40,0)
 Q
"RTN","XPDET",41,0)
LOOKE(X) ;special lookup for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",42,0)
 Q:X'?1.E1"*"
"RTN","XPDET",43,0)
 N %,XPD,XPDI,XPDIC,XPDF,XPDLK,XPDX,Y
"RTN","XPDET",44,0)
 S XPDLK=$$GR(D1),XPDIC=DIC,XPDF=D1
"RTN","XPDET",45,0)
 I XPDLK="" K X Q
"RTN","XPDET",46,0)
 G:$E(X)="-" DEL
"RTN","XPDET",47,0)
 S XPDX=$P(X,"*"),XPDI("IEN")=0
"RTN","XPDET",48,0)
 D LIST^DIC(D1,"","","","*",.XPDI,XPDX,"","I $$SCR^XPDET(Y)")
"RTN","XPDET",49,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",50,0)
 K ^TMP("XPDX",$J)
"RTN","XPDET",51,0)
 ;loop thru list from lister and file using UPDATE^DIE
"RTN","XPDET",52,0)
 F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDET",53,0)
 .S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX(X,$$GET1^DIQ(D1,%,$$TF(D1),"I"))
"RTN","XPDET",54,0)
 .S Y="+"_XPDI_","_D1_","_D0_",",^TMP("XPDX",$J,9.68,Y,.01)=X,^(.03)=0
"RTN","XPDET",55,0)
 I $D(^TMP("XPDX",$J)) D UPDATE^DIE("","^TMP(""XPDX"",$J)","^TMP(""XPD"",$J)")
"RTN","XPDET",56,0)
 ;if in Screenman then call MLOAD to update screen
"RTN","XPDET",57,0)
 I $D(DDS),$D(^TMP("XPD",$J)) D MLOAD^DDSUTL("^TMP(""XPD"",$J)")
"RTN","XPDET",58,0)
 S X=""
"RTN","XPDET",59,0)
 K ^TMP("XPDX",$J),^TMP("XPD",$J)
"RTN","XPDET",60,0)
 Q
"RTN","XPDET",61,0)
DEL ;delete using wild card
"RTN","XPDET",62,0)
 I X'?1"-"1.E1"*" K X Q
"RTN","XPDET",63,0)
 S X=$E(X,2,$L(X)-1),XPDX=X S:$L(X) XPDI("IEN")=0
"RTN","XPDET",64,0)
 D LIST^DIC(9.68,","_D1_","_D0_",","","","*",.XPDI,XPDX)
"RTN","XPDET",65,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",66,0)
 N DIK,DA,D2
"RTN","XPDET",67,0)
 S DIK=XPDIC,DA(1)=D1,DA(2)=D0
"RTN","XPDET",68,0)
 F XPDI=1:1 S (DA,D2)=$G(^TMP("DILIST",$J,2,XPDI)) Q:'DA  D
"RTN","XPDET",69,0)
 .D ^DIK
"RTN","XPDET",70,0)
 I $D(DDS) D MDEL^DDSUTL("^TMP(""DILIST"",$J,2)")
"RTN","XPDET",71,0)
 S X=""
"RTN","XPDET",72,0)
 K ^TMP("DILIST",$J)
"RTN","XPDET",73,0)
 Q
"RTN","XPDET",74,0)
HELP ;executable help of ENTRIES in KERNEL FILE multiple
"RTN","XPDET",75,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",76,0)
 ;file 9.8 is routine file, check that routine exists
"RTN","XPDET",77,0)
 S DIC=$$GR(D1),DIC(0)="M",X="??" Q:DIC=""  S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",78,0)
 D ^DIC Q
"RTN","XPDET",79,0)
 ;
"RTN","XPDET",80,0)
HELPO ;executable help of INSTALL ORDER in KERNEL FILES multiple
"RTN","XPDET",81,0)
 N Y
"RTN","XPDET",82,0)
 W !,"Numbers in use:  ORDER     FILE#" S Y=0
"RTN","XPDET",83,0)
 F  S Y=$O(^XPD(9.6,D0,"KRN","AC",Y)) Q:'Y  W !,?18,$J(Y,2),?28,$O(^(Y,0))
"RTN","XPDET",84,0)
 W ! Q
"RTN","XPDET",85,0)
 ;
"RTN","XPDET",86,0)
HELPMB ;executable help of fields 10 & 11 in file 9.6
"RTN","XPDET",87,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",88,0)
 S DIC="^XPD(9.6,",DIC(0)="M",X="??",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",89,0)
 D ^DIC Q
"RTN","XPDET",90,0)
 ;
"RTN","XPDET",91,0)
SCRA(Y) ;screen of ACTION field in ENTRIES multiple in KERNEL FILES multiple, Y=action
"RTN","XPDET",92,0)
 ;Y=0 - send, 1 - delete, 2 - link, 3 - merge, 4 - attach, 5 - disable
"RTN","XPDET",93,0)
 ;all entries can send to site
"RTN","XPDET",94,0)
 Q:'Y 1
"RTN","XPDET",95,0)
 ;.5=function file, can't delete, all others can
"RTN","XPDET",96,0)
 I Y=1 Q (D1'=.5)
"RTN","XPDET",97,0)
 ;then rest of code check if it is a Option or Protocal and can have MENU ITEMS
"RTN","XPDET",98,0)
 Q:D1'=19&(D1'=101) 0
"RTN","XPDET",99,0)
 ;only Options and Protocol can disable
"RTN","XPDET",100,0)
 Q:Y=5 1
"RTN","XPDET",101,0)
 N FGR,X,XPDF,XPDT,XPDZ
"RTN","XPDET",102,0)
 ;get X=name, FGR=global reference, XPDF=file #
"RTN","XPDET",103,0)
 S XPDY=Y,XPDF=D1,X=$P(^XPD(9.6,D0,"KRN",D1,"NM",D2,0),U),FGR=$$FILE^XPDV(D1)
"RTN","XPDET",104,0)
 Q:X="" 0
"RTN","XPDET",105,0)
 ;X=ien of protocol or option
"RTN","XPDET",106,0)
 S X=+$O(@FGR@("B",X,0)) Q:'X 0
"RTN","XPDET",107,0)
 ;get type
"RTN","XPDET",108,0)
 S XPDT=$P($G(@FGR@(X,0)),U,4)
"RTN","XPDET",109,0)
 ;all Options and Protocols, except Event Drivers, can be attached
"RTN","XPDET",110,0)
 I XPDY=4 Q '(XPDF=101&(XPDT="E"))
"RTN","XPDET",111,0)
 ;Protocol and Type is Subscriber can't do anything else
"RTN","XPDET",112,0)
 I XPDF=101,XPDT="S" Q 0
"RTN","XPDET",113,0)
 ;if it has SUBSCRIBERS, node 775 then ok
"RTN","XPDET",114,0)
 I $O(@FGR@(X,775,0)) Q 1
"RTN","XPDET",115,0)
 ;if type is menu,potocol,protocol menu,limited,extended,window suite
"RTN","XPDET",116,0)
 I "MOQLXZ"[$P($G(@FGR@(X,0)),U,4) Q 1
"RTN","XPDET",117,0)
 ;if it has ITEMs, node 10 then ok
"RTN","XPDET",118,0)
 I $O(@FGR@(X,10,0)) Q 1
"RTN","XPDET",119,0)
 Q 0
"RTN","XPDET",120,0)
 ;
"RTN","XPDET",121,0)
 ;only Fileman templates need to know what file they are associated with.
"RTN","XPDET",122,0)
 ;this value is also triggered to field .02 in the DD.
"RTN","XPDET",123,0)
TX(X,Y) ;X=template name, Y=file #
"RTN","XPDET",124,0)
 Q X_"    FILE #"_Y
"RTN","XPDET",125,0)
 ;
"RTN","XPDET",126,0)
TF(F) ;F=file, return field of file# for templates
"RTN","XPDET",127,0)
 Q $S(F>.403:"",F<.403:4,1:7)
"RTN","XPDET",128,0)
 ;
"RTN","XPDET",129,0)
GR(X) Q $G(^DIC(X,0,"GL"))
"RTN","XPDET",130,0)
 ;
"RTN","XPDET",131,0)
 ;screens checks that X is not already in the ENTRIES multiple
"RTN","XPDET",132,0)
SCR(Y) ;screen logic for ENTRIES multiple in file 9.6
"RTN","XPDET",133,0)
 N %,X,Z
"RTN","XPDET",134,0)
 S Z=^(0),X=$P(Z,U)
"RTN","XPDET",135,0)
 ;FM files are less than .44
"RTN","XPDET",136,0)
 I XPDF<.44 D  Q:X="" 0
"RTN","XPDET",137,0)
 .S %=$S(XPDF=.403:$P(Z,U,8),1:$P(Z,U,4)),X=X_"    FILE #"_%
"RTN","XPDET",138,0)
 .S:XPDF'=.403&($P(Z,U,8)>2) %=0 S:'% X=""
"RTN","XPDET",139,0)
 ;routine must exist and must be type 'R'
"RTN","XPDET",140,0)
 I XPDF=9.8 Q:$T(^@X)=""!($P(Z,U,2)'="R") 0
"RTN","XPDET",141,0)
 Q '$D(@(XPDIC_"""B"",X)"))
"RTN","XPDET",142,0)
 ;
"RTN","XPDET",143,0)
 ;screen checks that X is not in the exclude list, XPDN(0)
"RTN","XPDET",144,0)
SCR1(Y) ;screen logic for exclude list
"RTN","XPDET",145,0)
 N %,X
"RTN","XPDET",146,0)
 ;if name X is in the exclude list, XPDN(0,X), then fail
"RTN","XPDET",147,0)
 S Y(0)=^(0),X=$P(Y(0),U) Q:$D(XPDN(0,X)) 0
"RTN","XPDET",148,0)
 ;check if X is refered in the namespace by check the subscript
"RTN","XPDET",149,0)
 ;before X, if sub exist and $P(X,sub)="" then it is part of the
"RTN","XPDET",150,0)
 ;namespace, fail and return 0
"RTN","XPDET",151,0)
 S %=$O(XPDN(0,X),-1) I $L(%) Q:$P(X,%)="" 0
"RTN","XPDET",152,0)
 Q $$SCR(.Y)
"RTN","XPDET",153,0)
 ;
"RTN","XPDET",154,0)
 ;screen on PACKAGE LINK field in file 9.6,
"RTN","XPDET",155,0)
PCK(Y) ;check Package File name, Y=ien in package file
"RTN","XPDET",156,0)
 N %,Y,Z
"RTN","XPDET",157,0)
 S Z=^(0)
"RTN","XPDET",158,0)
 ;DA is undef when you are adding a new Build without a version number
"RTN","XPDET",159,0)
 Q:'$D(^XPD(9.6,+$G(DA),0)) 1
"RTN","XPDET",160,0)
 S Y=$L($P(Z,U)),%=$P(^XPD(9.6,DA,0),U),%=$$PKG^XPDUTL(%)
"RTN","XPDET",161,0)
 Q $P(Z,U)=$E(%,1,Y)!($P(Z,U,2)=%)
"RTN","XPDET",162,0)
VOLE(X) ;input transform for VOLUME SET multiple in INSTALL file
"RTN","XPDET",163,0)
 ;X=user input
"RTN","XPDET",164,0)
 N D,DD,DIC,DICR,DIX,DIY,DO,DS,XPD,Y,%
"RTN","XPDET",165,0)
 ;(0;11)=SIGNON/PRODUCTION
"RTN","XPDET",166,0)
 S DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",167,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",168,0)
 S X=Y(0,0)
"RTN","XPDET",169,0)
 Q
"RTN","XPDET",170,0)
VOLH ;executable help for VOLUME SET multiple in INSTALL file
"RTN","XPDET",171,0)
 N D,DD,DIC,DIE,DIX,DIY,DO,DS,DZ,X,Y,%
"RTN","XPDET",172,0)
 S X="??",DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",173,0)
 D ^DIC
"RTN","XPDET",174,0)
 Q
"RTN","XPDET",175,0)
ID97 ;identifier for Install file
"RTN","XPDET",176,0)
 N XPDET,XPD,XPD0,XPD1,XPD2,XPD9
"RTN","XPDET",177,0)
 S XPD0=$G(^(0)),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD9=$P(XPD0,U,9),XPD="" Q:XPD9=""
"RTN","XPDET",178,0)
 D
"RTN","XPDET",179,0)
 .;Loaded, get DATE LOADED
"RTN","XPDET",180,0)
 .I 'XPD9 S XPD=$$FMTE^XLFDT($P(XPD0,U,3),2) Q
"RTN","XPDET",181,0)
 .Q:XPD9>3
"RTN","XPDET",182,0)
 .;Started, get INSTALL START TIME
"RTN","XPDET",183,0)
 .I XPD9=2 S XPD=$$FMTE^XLFDT($P(XPD1,U),2) Q
"RTN","XPDET",184,0)
 .;Completed, get INSTALL COMPLETE TIME
"RTN","XPDET",185,0)
 .I XPD9=3 S XPD=$$FMTE^XLFDT($P(XPD1,U,3),2) Q
"RTN","XPDET",186,0)
 .;Queued, get QUEUED TASK NUMBER
"RTN","XPDET",187,0)
 .I XPD9=1 S XPD="#"_$P(XPD0,U,6) Q
"RTN","XPDET",188,0)
 S XPDET(1)="   "_$$EXTERNAL^DILFD(9.7,.02,"",XPD9)_"  "_XPD,XPDET(1,"F")="?0"
"RTN","XPDET",189,0)
 S:XPD2]"" XPDET(2)="=> "_$E(XPD2,1,70),XPDET(2,"F")="!?5"
"RTN","XPDET",190,0)
 D EN^DDIOL(.XPDET)
"RTN","XPDET",191,0)
 Q
"RTN","XPDET",192,0)
 ;not being used right now,
"RTN","XPDET",193,0)
DEL97(Y) ;delete access to file 9.7, 0-can't delete, 1-can
"RTN","XPDET",194,0)
 N %
"RTN","XPDET",195,0)
 S %=$P(^XPD(9.7,Y,0),U,9)
"RTN","XPDET",196,0)
 Q $S(%=3:1,%=2:0,$D(^XPD(9.7,"ASP",Y,1,Y)):1,1:0)
"RTN","XPDET",197,0)
 ;
"RTN","XPDET",198,0)
PAR964 ;Clear other fields if file is partial.  Called from within form
"RTN","XPDET",199,0)
 D PUT^DDSVAL(DIE,.DA,222.7,"n","","I") ;Send data NO
"RTN","XPDET",200,0)
 D PUT^DDSVAL(DIE,.DA,222.5,"","","I") ;Resolve pointer
"RTN","XPDET",201,0)
 D PUT^DDSVAL(DIE,.DA,222.8,"","","I") ;Sites Data
"RTN","XPDET",202,0)
 D PUT^DDSVAL(DIE,.DA,222.9,"n","","I") ;User Override
"RTN","XPDET",203,0)
 D PUT^DDSVAL(DIE,.DA,224,"","","I") ;Data Screen
"RTN","XPDET",204,0)
 Q
"RTN","XPDIA3")
0^10^B8738323^B8649739
"RTN","XPDIA3",1,0)
XPDIA3 ;SFISC/RWF - Install Pre/Post Actions for Kernel files cont. ;6/22/06  09:13
"RTN","XPDIA3",2,0)
 ;;8.0;KERNEL;**201,302,393**;Jul 10, 1995;Build 12
"RTN","XPDIA3",3,0)
 Q
"RTN","XPDIA3",4,0)
 ;^XTMP("XPDI",,XPDA,"KRN",XPDFILE,OLDA) is the global root
"RTN","XPDIA3",5,0)
 ;XPDNM=package name, XPDA=ien in ^XPD(9.6,
"RTN","XPDIA3",6,0)
 ;DA=ien in file, OLDA= ien in ^XTMP
"RTN","XPDIA3",7,0)
 ;
"RTN","XPDIA3",8,0)
PAR0F2 ;PARAMETER file 8989.5: post.  This is a fake entry called from the post of file 8989.51
"RTN","XPDIA3",9,0)
 ;Now load any entries from 8989.5
"RTN","XPDIA3",10,0)
 N XP1,XP2,DIK,OLDA,DA,ERR,PN,PE,ROOT
"RTN","XPDIA3",11,0)
 S XP1=$O(^XTMP("XPDI",XPDA,"PKG",0)) ;Get the package
"RTN","XPDIA3",12,0)
 Q:'XP1  S PN=$G(^XTMP("XPDI",XPDA,"PKG",XP1,0))
"RTN","XPDIA3",13,0)
 S PE=$$FIND1^DIC(9.4,,"MX",$P(PN,U,2)) ;Get the IEN of the package
"RTN","XPDIA3",14,0)
 S OLDA=0,ROOT=$NA(^XTMP("XPDI",XPDA,"KRN",8989.5))
"RTN","XPDIA3",15,0)
 F  S OLDA=$O(@ROOT@(OLDA)) Q:'OLDA  D
"RTN","XPDIA3",16,0)
 . S XP1=@ROOT@(OLDA,0)
"RTN","XPDIA3",17,0)
 . S $P(XP1,U,1)=PE_";DIC(9.4," ;entity
"RTN","XPDIA3",18,0)
 . S $P(XP1,U,2)=$$LK^XPDIA($NA(^XTV(8989.51)),$P(XP1,U,2))
"RTN","XPDIA3",19,0)
 . S DA=$$LKPAR($P(XP1,U),$P(XP1,U,2),$P(XP1,U,3))
"RTN","XPDIA3",20,0)
 . ;Remove the current entry if we have one
"RTN","XPDIA3",21,0)
 . I DA>0 S DIK="^XTV(8989.5," D ^DIK
"RTN","XPDIA3",22,0)
 . ;Otherwise Add the zero node, See that we have a IEN
"RTN","XPDIA3",23,0)
 . I DA'>0 D ADDPAR($P(XP1,U),$P(XP1,U,2),$P(XP1,U,3)) S DA=$$LKPAR($P(XP1,U),$P(XP1,U,2),$P(XP1,U,3))
"RTN","XPDIA3",24,0)
 . Q:'DA  ;don't have a entry
"RTN","XPDIA3",25,0)
 . ;Merge the date ;with IHS fix
"RTN","XPDIA3",26,0)
 . M ^XTV(8989.5,DA)=^XTMP("XPDI",XPDA,"KRN",8989.5,OLDA)
"RTN","XPDIA3",27,0)
 . S ^XTV(8989.5,DA,0)=XP1 ;zero node with new pointers
"RTN","XPDIA3",28,0)
 . ;X-ref it
"RTN","XPDIA3",29,0)
 . S DIK="^XTV(8989.5," D IX1^DIK
"RTN","XPDIA3",30,0)
 Q
"RTN","XPDIA3",31,0)
 ;
"RTN","XPDIA3",32,0)
LKPAR(ENT,PAR,INST) ;Lookup an entry
"RTN","XPDIA3",33,0)
 Q $O(^XTV(8989.5,"AC",PAR,ENT,INST,0))
"RTN","XPDIA3",34,0)
 ;
"RTN","XPDIA3",35,0)
ADDPAR(ENT,PAR,INST) ;Add a parameter instance
"RTN","XPDIA3",36,0)
 N FDA,FDAIEN,DIERR
"RTN","XPDIA3",37,0)
 S FDA(8989.5,"+1,",.01)=ENT
"RTN","XPDIA3",38,0)
 S FDA(8989.5,"+1,",.02)=PAR
"RTN","XPDIA3",39,0)
 S FDA(8989.5,"+1,",.03)=INST
"RTN","XPDIA3",40,0)
 D UPDATE^DIE("","FDA","FDAIEN","DIERR")
"RTN","XPDIA3",41,0)
 Q
"RTN","XPDIA3",42,0)
 ;
"RTN","XPDIA3",43,0)
PAR1F1 ;PARAMETER File 8989.51: file Pre
"RTN","XPDIA3",44,0)
 Q
"RTN","XPDIA3",45,0)
PAR1E1 ;PARAMETER file 8989.51: entry pre
"RTN","XPDIA3",46,0)
 N XP1,XP2,XP3
"RTN","XPDIA3",47,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA3",48,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA3",49,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",8989.51,OLDA,20,0)) ^XTV(8989.51,DA,20)
"RTN","XPDIA3",50,0)
 ;Kill any old Allowable entries
"RTN","XPDIA3",51,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",8989.51,OLDA,30,0)) ^XTV(8989.51,DA,30)
"RTN","XPDIA3",52,0)
 Q
"RTN","XPDIA3",53,0)
PAR1F2 ;PARAMETER file 8989.51: file post
"RTN","XPDIA3",54,0)
 N XPD,DIK,DA
"RTN","XPDIA3",55,0)
 S DA=0
"RTN","XPDIA3",56,0)
 F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA3",57,0)
 . S DIK="^XTV(8989.51," D IX1^DIK
"RTN","XPDIA3",58,0)
 D PAR0F2 ;Go load the entries from 8989.5
"RTN","XPDIA3",59,0)
 Q
"RTN","XPDIA3",60,0)
PAR1DEL(RT) ;Delete Parameter Def entries
"RTN","XPDIA3",61,0)
 D DELPTR^XPDUTL1(8989.51,RT) ;Cleanup pointers
"RTN","XPDIA3",62,0)
 D DELIEN^XPDUTL1(8989.51,RT) ;Cleanup entries
"RTN","XPDIA3",63,0)
 Q
"RTN","XPDIA3",64,0)
 ;
"RTN","XPDIA3",65,0)
PAR2F1 ;PARAMETER File 8989.52: file Pre
"RTN","XPDIA3",66,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA3",67,0)
 Q
"RTN","XPDIA3",68,0)
PAR2E1 ;PARAMETER file 8989.52: entry Pre
"RTN","XPDIA3",69,0)
 N XP1,XP2,ROOT
"RTN","XPDIA3",70,0)
 S ROOT=$NA(^XTMP("XPDI",XPDA,"KRN",8989.52))
"RTN","XPDIA3",71,0)
 S XP2=$P(@ROOT@(OLDA,0),U,4) ;Use instance of
"RTN","XPDIA3",72,0)
 ;Because we change the transport global see that a restart will work
"RTN","XPDIA3",73,0)
 I $L(XP2),XP2?1A.E S $P(@ROOT@(OLDA,0),U,4)=$$LK^XPDIA($NA(^XTV(8989.51)),XP2)
"RTN","XPDIA3",74,0)
 S XP1=0
"RTN","XPDIA3",75,0)
 F  S XP1=$O(@ROOT@(OLDA,10,XP1)),XP2="" Q:'XP1  D
"RTN","XPDIA3",76,0)
 . S XP2=$P(@ROOT@(OLDA,10,XP1,0),U,2) ;Parameter
"RTN","XPDIA3",77,0)
 . I $L(XP2),XP2?1A.E S $P(@ROOT@(OLDA,10,XP1,0),U,2)=$$LK^XPDIA($NA(^XTV(8989.51)),XP2)
"RTN","XPDIA3",78,0)
 . Q
"RTN","XPDIA3",79,0)
 Q
"RTN","XPDIA3",80,0)
PAR2F2 ;PARAMETER file 8989.52: file Post
"RTN","XPDIA3",81,0)
 Q
"RTN","XPDIA3",82,0)
PAR2DEL(RT) ;Delete Parameter Templates
"RTN","XPDIA3",83,0)
 D DELIEN^XPDUTL1(8989.52,RT)
"RTN","XPDIA3",84,0)
 Q
"RTN","XPDIP")
0^6^B39786511^B39673736
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;03/08/2006
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21,28,30,41,44,51,58,83,92,100,108,137,229,350,393**;Jul 10, 1995;Build 12
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file, OLDA=old Package ien
"RTN","XPDIP",9,0)
 S Y=$$PKGADD,XPDPKG=$P(Y,U),OLDA=$P(Y,U,2)
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'XPDPKG PKGEND
"RTN","XPDIP",12,0)
 ;update version multiple
"RTN","XPDIP",13,0)
 S DA=XPDPKG D PKGV
"RTN","XPDIP",14,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",15,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",16,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",17,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",18,0)
 ;update node 20 for Patient Merge
"RTN","XPDIP",19,0)
 N REC,IEN
"RTN","XPDIP",20,0)
 S REC=0
"RTN","XPDIP",21,0)
 F  S REC=$O(^XTMP("XPDI",XPDA,"PKG",OLDA,20,REC)) Q:'REC  D
"RTN","XPDIP",22,0)
 . ;;Only install if have a routine defined
"RTN","XPDIP",23,0)
 . K IEN I '$L($P($G(^XTMP("XPDI",XPDA,"PKG",OLDA,20,REC,0)),U,3)) Q
"RTN","XPDIP",24,0)
 . S IEN(9.402,"?+1,"_XPDPKG_",",.01)=$P($G(^XTMP("XPDI",XPDA,"PKG",OLDA,20,REC,0)),U,1)
"RTN","XPDIP",25,0)
 . S IEN(9.402,"?+1,"_XPDPKG_",",3)=$P($G(^XTMP("XPDI",XPDA,"PKG",OLDA,20,REC,0)),U,3)
"RTN","XPDIP",26,0)
 . S IEN(9.402,"?+1,"_XPDPKG_",",4)=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,20,REC,1))
"RTN","XPDIP",27,0)
 . D UPDATE^DIE("","IEN")
"RTN","XPDIP",28,0)
 . Q
"RTN","XPDIP",29,0)
 ;
"RTN","XPDIP",30,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",31,0)
 ;Move the Test/SEQ number from build to Install file.
"RTN","XPDIP",32,0)
 S ^XPD(9.7,XPDA,6)=$G(^XPD(9.6,XPDBLDA,6))
"RTN","XPDIP",33,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",34,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D
"RTN","XPDIP",35,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",36,0)
 .I $P(%,U)="y",$P(%,U,2)="y",$L($P(%,U,3)) S $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",37,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",38,0)
 Q
"RTN","XPDIP",39,0)
PKGADD() ;check Package file, add if not there
"RTN","XPDIP",40,0)
 ;return new Package file ien^old ien
"RTN","XPDIP",41,0)
 N DA,DIK,XPD,XPDFIL,XPDO,X,Y
"RTN","XPDIP",42,0)
 S DA=+$P(^XPD(9.7,XPDA,0),U,2),XPDO=+$O(^XTMP("XPDI",XPDA,"PKG",0)),X=$P($G(^(XPDO,0)),U)
"RTN","XPDIP",43,0)
 I DA,$D(^DIC(9.4,DA,0)) Q DA_U_XPDO
"RTN","XPDIP",44,0)
 ;quit if there was no package entry sent
"RTN","XPDIP",45,0)
 Q:'XPDO "0^0"
"RTN","XPDIP",46,0)
 S XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,X) Q:'Y "0^0"
"RTN","XPDIP",47,0)
 S DA=+Y
"RTN","XPDIP",48,0)
 ;if new entry in package file, bring in everything
"RTN","XPDIP",49,0)
 I $P(Y,U,3) D
"RTN","XPDIP",50,0)
 .M ^DIC(9.4,DA)=^XTMP("XPDI",XPDA,"PKG",XPDO)
"RTN","XPDIP",51,0)
 .;kill the -1 flag node first
"RTN","XPDIP",52,0)
 .K ^DIC(9.4,DA,-1)
"RTN","XPDIP",53,0)
 .;re-cross ref after adding a new package
"RTN","XPDIP",54,0)
 .S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",55,0)
 ;add package to file 9.7
"RTN","XPDIP",56,0)
 S XPD(9.7,XPDA_",",1)=DA D FILE^DIE("","XPD")
"RTN","XPDIP",57,0)
 Q DA_U_XPDO
"RTN","XPDIP",58,0)
 ;
"RTN","XPDIP",59,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",60,0)
 N %,DA,DIK,XPDFIL,Y
"RTN","XPDIP",61,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",62,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",63,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",64,0)
 S DA=+Y
"RTN","XPDIP",65,0)
 ;Build entry not new, remove old data
"RTN","XPDIP",66,0)
 I '$P(Y,U,3) S %=$P(^XPD(9.6,DA,0),U,2) K ^XPD(9.6,DA) K:% ^XPD(9.6,"C",%,DA)
"RTN","XPDIP",67,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",68,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",69,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",70,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",71,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",72,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",73,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",74,0)
 Q DA
"RTN","XPDIP",75,0)
 ;
"RTN","XPDIP",76,0)
 ;update the version multiple in the package file
"RTN","XPDIP",77,0)
PKGV N %
"RTN","XPDIP",78,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",79,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",80,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",81,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",82,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",83,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",84,0)
 ;update patch history multiple
"RTN","XPDIP",85,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=$P(^(0),U) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",86,0)
 ;check File Comment, %=patch number
"RTN","XPDIP",87,0)
 S:^XPD(9.7,XPDA,2)[" SEQ #" %=$P(^(2),"*",3)
"RTN","XPDIP",88,0)
 S $P(%,U,2,3)=$$NOW^XLFDT()_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",89,0)
 Q
"RTN","XPDIP",90,0)
 ;
"RTN","XPDIP",91,0)
PKGVER(XPDPDA,XPDI) ;update version in package file, XPDPDA=Package file ien, return ien
"RTN","XPDIP",92,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",93,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",94,0)
 N I,X,XPD,XPDIEN,XPDJ,XPDV
"RTN","XPDIP",95,0)
 S XPDIEN=","_XPDPDA_",",XPDV=$$MDIC(9.49,XPDIEN,$P(XPDI,U)) Q:'XPDV 0
"RTN","XPDIP",96,0)
 S XPD(9.4,XPDPDA_",",13)=$P(XPDI,U),X="XPD(9.49,"""_XPDV_XPDIEN_""")"
"RTN","XPDIP",97,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",98,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",99,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",100,0)
 Q XPDV
"RTN","XPDIP",101,0)
 ;
"RTN","XPDIP",102,0)
PKGPAT(XPDPDA,XPDV,XPDI) ;update patch history
"RTN","XPDIP",103,0)
 ;INPUT: XPDPDA=Package file ien, XPDV=version
"RTN","XPDIP",104,0)
 ;XPDI=patch^date installed^install by,   returns version ien^patch ien
"RTN","XPDIP",105,0)
 N I,X,XPD,XPDP,XPDIEN
"RTN","XPDIP",106,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",107,0)
 S XPDIEN=","_XPDPDA_",",XPDV=$$MDIC(9.49,XPDIEN,XPDV) Q:'XPDV 0
"RTN","XPDIP",108,0)
 S XPDIEN=","_XPDV_XPDIEN,XPDP=$$MDIC(9.4901,XPDIEN,$P(XPDI,U)) Q:'XPDP 0
"RTN","XPDIP",109,0)
 S X="XPD(9.4901,"""_XPDP_XPDIEN_""")"
"RTN","XPDIP",110,0)
 F I=.02,.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",111,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",112,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",113,0)
 Q XPDV_U_XPDP
"RTN","XPDIP",114,0)
 ;
"RTN","XPDIP",115,0)
 ;XPDF=subfile #,XPDIEN=ien string, X=input
"RTN","XPDIP",116,0)
MDIC(XPDF,XPDIEN,XPDX) ;
"RTN","XPDIP",117,0)
 N DIERR,XPD,XPDN
"RTN","XPDIP",118,0)
 D FIND^DIC(XPDF,XPDIEN,"","XQf",XPDX,5,"","","","XPD")
"RTN","XPDIP",119,0)
 ;one or more matches, just return first one
"RTN","XPDIP",120,0)
 I $G(XPD(0)) D:XPD(0)>1  Q XPD(1)
"RTN","XPDIP",121,0)
 .N %
"RTN","XPDIP",122,0)
 .S %(1)=$P(^DD(XPDF,.01,0),U)_"  "_XPDX_"  is Duplicated,",%(2)=" only ien #"_XPD(1)_" was updated."
"RTN","XPDIP",123,0)
 .D MES^XPDUTL(.%)
"RTN","XPDIP",124,0)
 ;add a new entry
"RTN","XPDIP",125,0)
 S XPDN(XPDF,"+1"_XPDIEN,.01)=XPDX K XPD
"RTN","XPDIP",126,0)
 D UPDATE^DIE("","XPDN","XPD")
"RTN","XPDIP",127,0)
 I '$G(XPD(1)) D BMES^XPDUTL(" "_$P(^DD(XPDF,.01,0),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIP",128,0)
 Q XPD(1)
"RTN","XPDIP",129,0)
 ;
"RTN","XPDIP",130,0)
RTN ;move rtns to install file
"RTN","XPDIP",131,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X,NOW
"RTN","XPDIP",132,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",133,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ="",NOW=$$NOW^XLFDT()
"RTN","XPDIP",134,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",135,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",136,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",137,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",138,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",139,0)
 .;XPDR, build array to update ROUTINE file, Set install date
"RTN","XPDIP",140,0)
 .;S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",141,0)
 .S XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R",^(7.4)=NOW ;**229
"RTN","XPDIP",142,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",143,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",144,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",145,0)
 .S XPDI=0
"RTN","XPDIP",146,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",147,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",148,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",149,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",150,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",151,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",152,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",153,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",154,0)
 ;compile template routines
"RTN","XPDIP",155,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",156,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",157,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",158,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",159,0)
 ;update Routine file
"RTN","XPDIP",160,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",161,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",162,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",163,0)
 Q
"RTN","XPDIR")
0^3^B4848673^B4714175
"RTN","XPDIR",1,0)
XPDIR ;SFISC/RSD - Install Restart ; 09/29/2005
"RTN","XPDIR",2,0)
 ;;8.0;KERNEL;**30,58,393**;Jul 10, 1995;Build 12
"RTN","XPDIR",3,0)
EN ;restart install
"RTN","XPDIR",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDIR",5,0)
 S %="I $P(^(0),U,9)#3,$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK^XPDI1(%)
"RTN","XPDIR",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDIR",7,0)
 S ZTSK=$P(^XPD(9.7,XPDST,0),U,6) D:ZTSK
"RTN","XPDIR",8,0)
 .;check if task exist or is queued
"RTN","XPDIR",9,0)
 .D ISQED^%ZTLOAD
"RTN","XPDIR",10,0)
 .;task is queued to run
"RTN","XPDIR",11,0)
 .Q:ZTSK(0)
"RTN","XPDIR",12,0)
 .;task doesn't exist, k ZTSK so it can be re-scheduled
"RTN","XPDIR",13,0)
 .I ZTSK(0)="" K ZTSK Q
"RTN","XPDIR",14,0)
 .D STAT^%ZTLOAD
"RTN","XPDIR",15,0)
 .;task is not define
"RTN","XPDIR",16,0)
 .I 'ZTSK(1) K ZTSK Q
"RTN","XPDIR",17,0)
 .;task is queued to run
"RTN","XPDIR",18,0)
 .Q:ZTSK(1)=1
"RTN","XPDIR",19,0)
 .;task is running, set quit flag
"RTN","XPDIR",20,0)
 .I ZTSK(1)=2 S XPDQUIT=1 W !,"Install is currently running, cannot re-install!" Q
"RTN","XPDIR",21,0)
 .;task finished or was interrupted, kill it so it can be rescheduled
"RTN","XPDIR",22,0)
 .D KILL^%ZTLOAD K ZTSK Q
"RTN","XPDIR",23,0)
 ;abort if there is nothing to install or they '^'
"RTN","XPDIR",24,0)
 G:'$O(XPDT(0))!$D(XPDQUIT) ABORT
"RTN","XPDIR",25,0)
 ;clean out old task, so they can reinstall
"RTN","XPDIR",26,0)
 I '$D(ZTSK) D
"RTN","XPDIR",27,0)
 .N XPD
"RTN","XPDIR",28,0)
 .S XPD(9.7,XPDST_",",5)=""  D FILE^DIE("","XPD")
"RTN","XPDIR",29,0)
 I $G(ZTSK) W !!,"This install is already queued as task #",ZTSK,!,"Please use the Taskman Menu if you want to reschedule." G ABORT
"RTN","XPDIR",30,0)
 ;kill XPDT array so that while in XPDI and ABORT is called, nothing is deleted
"RTN","XPDIR",31,0)
 S XPDIJ=0,XPDA=XPDST,XPDNM=$P(^XPD(9.7,XPDA,0),U) K XPDT
"RTN","XPDIR",32,0)
 ;restore environment check variables
"RTN","XPDIR",33,0)
 I $D(^XTMP("XPDI",XPDA,"ENVVAR")) D
"RTN","XPDIR",34,0)
 .S:$D(^XTMP("XPDI",XPDA,"ENVVAR","XPDNOQUE")) XPDNOQUE=^("XPDNOQUE")
"RTN","XPDIR",35,0)
 .I $D(^XTMP("XPDI",XPDA,"ENVVAR","XPDDIQ")) M XPDDIQ=^("XPDDIQ")
"RTN","XPDIR",36,0)
 G DEV^XPDI
"RTN","XPDIR",37,0)
 ;
"RTN","XPDIR",38,0)
ABORT W !!,"**RESTART ABORTED**",!
"RTN","XPDIR",39,0)
 L -XPD(9.7,XPDST)
"RTN","XPDIR",40,0)
 Q
"RTN","XPDIST")
0^9^B15585220^B15492727
"RTN","XPDIST",1,0)
XPDIST ;SFISC/RSD - site tracking; 06/01/2006
"RTN","XPDIST",2,0)
 ;;8.0;KERNEL;**66,108,185,233,350,393**;Jul 10, 1995;Build 12
"RTN","XPDIST",3,0)
 ;Returns ""=failed, XMZ=sent
"RTN","XPDIST",4,0)
 ;D0=ien in file 9.7, XPY=national site tracking^address(optional)
"RTN","XPDIST",5,0)
EN(D0,XPY) ;send message
"RTN","XPDIST",6,0)
 N %,DIFROM,XPD,XPD0,XPD1,XPD2,XPDV,XPDTEXT,XPZ,XMDUZ,XMSUB,XMTEXT,XMY,XMZ,X,X1,Z,Y,XPD6
"RTN","XPDIST",7,0)
 ;Get data needed
"RTN","XPDIST",8,0)
 I '$D(^XPD(9.7,$G(D0),0)) D BMES^XPDUTL(" INSTALL file entry missing") Q ""
"RTN","XPDIST",9,0)
 ;p350 -add node 6 for the Test# and Seq#. -REM
"RTN","XPDIST",10,0)
 S XPD0=^XPD(9.7,D0,0),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD6=$G(^(6))
"RTN","XPDIST",11,0)
 I '$P(XPD0,U,2) D BMES^XPDUTL(" No link to PACKAGE file") Q ""
"RTN","XPDIST",12,0)
 S XPD=$P($G(^DIC(9.4,+$P(XPD0,U,2),0)),U),XPDV=$$VER^XPDUTL($P(XPD0,U))
"RTN","XPDIST",13,0)
 I XPD="" D BMES^XPDUTL(" PACKAGE file entry missing") Q ""
"RTN","XPDIST",14,0)
 ;XPZ(1)=start, XPZ(2)=completion date/time, XPZ(3)=run time
"RTN","XPDIST",15,0)
 S XPZ(1)=$P(XPD1,U),XPZ(2)=$P(XPD1,U,3),XPZ(3)=$$FMDIFF^XLFDT(XPZ(2),XPZ(1),3),XPZ(1)=$$FMTE^XLFDT(XPZ(1)),XPZ(2)=$$FMTE^XLFDT(XPZ(2))
"RTN","XPDIST",16,0)
 D LOCAL
"RTN","XPDIST",17,0)
 D REMEDY ;p350 -REM
"RTN","XPDIST",18,0)
 Q $$FORUM()
"RTN","XPDIST",19,0)
 ;
"RTN","XPDIST",20,0)
 ;
"RTN","XPDIST",21,0)
FORUM() ;send to Server on FORUM
"RTN","XPDIST",22,0)
 K XMY,XPDTEXT ;393
"RTN","XPDIST",23,0)
 Q:$G(XPY)="" ""
"RTN","XPDIST",24,0)
 S:XPY XMY("S.A5CSTS@FORUM.VA.GOV")="" ;,XMY("ESSRESOURCE@MED.VA.GOV")=""
"RTN","XPDIST",25,0)
 S:$L($P(XPY,U,2)) XMY($P(XPY,U,2))=""
"RTN","XPDIST",26,0)
 K ^TMP($J)
"RTN","XPDIST",27,0)
 ;Quit if not VA production primary domain
"RTN","XPDIST",28,0)
 I $G(^XMB("NETNAME"))'[".VA.GOV" D BMES^XPDUTL(" Not a VA primary domain") Q ""
"RTN","XPDIST",29,0)
 X ^%ZOSF("UCI") S %=^%ZOSF("PROD")
"RTN","XPDIST",30,0)
 S:%'["," Y=$P(Y,",")
"RTN","XPDIST",31,0)
 I Y'=% D BMES^XPDUTL(" Not a production UCI") Q ""
"RTN","XPDIST",32,0)
 ;Message for server
"RTN","XPDIST",33,0)
 S XPDTEXT(1,0)="PACKAGE INSTALL"
"RTN","XPDIST",34,0)
 S XPDTEXT(2,0)="SITE: "_$G(^XMB("NETNAME"))
"RTN","XPDIST",35,0)
 S XPDTEXT(3,0)="PACKAGE: "_XPD
"RTN","XPDIST",36,0)
 S XPDTEXT(4,0)="VERSION: "_XPDV
"RTN","XPDIST",37,0)
 S XPDTEXT(5,0)="Start time: "_XPZ(1)
"RTN","XPDIST",38,0)
 S XPDTEXT(6,0)="Completion time: "_XPZ(2)
"RTN","XPDIST",39,0)
 S XPDTEXT(7,0)="Run time: "_XPZ(3)
"RTN","XPDIST",40,0)
 S XPDTEXT(8,0)="DATE: "_DT
"RTN","XPDIST",41,0)
 S XPDTEXT(9,0)="Installed by: "_$P($G(^VA(200,+$P(XPD0,U,11),0)),U)
"RTN","XPDIST",42,0)
 S XPDTEXT(10,0)="Install Name: "_$P(XPD0,U)
"RTN","XPDIST",43,0)
 S XPDTEXT(11,0)="Distribution Date: "_$P(XPD1,U,4)
"RTN","XPDIST",44,0)
 S XPDTEXT(12,0)=XPD2
"RTN","XPDIST",45,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB=$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",46,0)
 D ^XMD
"RTN","XPDIST",47,0)
 Q "#"_$G(XMZ)
"RTN","XPDIST",48,0)
 ;
"RTN","XPDIST",49,0)
LOCAL ;Send a message to local mail group
"RTN","XPDIST",50,0)
 K ^TMP($J),XMY,XPDTEXT,XMTEXT
"RTN","XPDIST",51,0)
 S X=$$MAILGRP^XPDUTL(XPD) Q:X=""
"RTN","XPDIST",52,0)
 S XMY(X)="" D GETENV^%ZOSV
"RTN","XPDIST",53,0)
 ;Message for users
"RTN","XPDIST",54,0)
 S XPDTEXT(1,0)="PACKAGE INSTALL"
"RTN","XPDIST",55,0)
 S XPDTEXT(2,0)="SITE: "_$G(^XMB("NETNAME"))
"RTN","XPDIST",56,0)
 S XPDTEXT(3,0)="PACKAGE: "_XPD
"RTN","XPDIST",57,0)
 S XPDTEXT(4,0)="VERSION: "_XPDV
"RTN","XPDIST",58,0)
 S XPDTEXT(5,0)="Start time: "_XPZ(1)
"RTN","XPDIST",59,0)
 S XPDTEXT(6,0)="Completion time: "_XPZ(2)
"RTN","XPDIST",60,0)
 S XPDTEXT(7,0)="Environment: "_Y
"RTN","XPDIST",61,0)
 S XPDTEXT(8,0)="Installed by: "_$P($G(^VA(200,+$P(XPD0,U,11),0)),U)
"RTN","XPDIST",62,0)
 S XPDTEXT(9,0)="Install Name: "_$P(XPD0,U)
"RTN","XPDIST",63,0)
 S XPDTEXT(10,0)="Distribution Date: "_$$FMTE^XLFDT($P(XPD1,U,4))
"RTN","XPDIST",64,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB=$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",65,0)
 D ^XMD
"RTN","XPDIST",66,0)
 Q
"RTN","XPDIST",67,0)
 ;
"RTN","XPDIST",68,0)
REMEDY ;Send to Remedy Server - ESSRESOURCE@MED.VA.GOV *p350 -REM
"RTN","XPDIST",69,0)
 K ^TMP($J),XMY,XPDTEXT,XMTEXT ;393
"RTN","XPDIST",70,0)
 Q:$G(XPY)=""
"RTN","XPDIST",71,0)
 S:XPY XMY("ESSRESOURCE@MED.VA.GOV")=""
"RTN","XPDIST",72,0)
 S:$L($P(XPY,U,2)) XMY($P(XPY,U,2))=""
"RTN","XPDIST",73,0)
 ;Quit if not VA production primary domain
"RTN","XPDIST",74,0)
 I $G(^XMB("NETNAME"))'[".VA.GOV" D BMES^XPDUTL(" Not a VA primary domain") Q
"RTN","XPDIST",75,0)
 X ^%ZOSF("UCI") S %=^%ZOSF("PROD")
"RTN","XPDIST",76,0)
 S:%'["," Y=$P(Y,",")
"RTN","XPDIST",77,0)
 I Y'=% D BMES^XPDUTL(" Not a production UCI") Q
"RTN","XPDIST",78,0)
 ;Message for server (all in one string)
"RTN","XPDIST",79,0)
 ;XMTEXT=Type(1),Domain(2-65),Pkg(66-95),Version(96-125),
"RTN","XPDIST",80,0)
 ;       StartTime(126-147),CompleteTime(148-169),RunTime(170-177),
"RTN","XPDIST",81,0)
 ;       Date(178-199),InstalledBy(200-229),InstallName(230-259),
"RTN","XPDIST",82,0)
 ;       DistributionDate(260-281),Seq#(282-286),
"RTN","XPDIST",83,0)
 ;       PatchTestVersion(287-317)
"RTN","XPDIST",84,0)
 ;
"RTN","XPDIST",85,0)
 S X1=1_$G(^XMB("NETNAME")) ;Type is always "1"(1=patch,0=pkg).
"RTN","XPDIST",86,0)
 S $E(X1,66,95)=XPD,$E(X1,96,125)=XPDV,$E(X1,126,147)=XPZ(1),$E(X1,148,169)=XPZ(2),$E(X1,170,177)=XPZ(3),$E(X1,178,199)=DT
"RTN","XPDIST",87,0)
 S $E(X1,200,229)=$P($G(^VA(200,+$P(XPD0,U,11),0)),U),$E(X1,230,259)=$P(XPD0,U),$E(X1,260,281)=$P(XPD1,U,4),$E(X1,282,286)=$P(XPD6,U,2),$E(X1,287,317)=$P(XPD6,U)
"RTN","XPDIST",88,0)
 S XPDTEXT(1,0)=X1
"RTN","XPDIST",89,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB="KIDS-"_$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",90,0)
 D ^XMD
"RTN","XPDIST",91,0)
 Q
"RTN","XPDR")
0^8^B50211509^B49327107
"RTN","XPDR",1,0)
XPDR ;SFISC/RSD - Routine File Edit ;09/17/96  10:05
"RTN","XPDR",2,0)
 ;;8.0;KERNEL;**1,2,44,393**;Jul 10, 1995;Build 12
"RTN","XPDR",3,0)
 Q
"RTN","XPDR",4,0)
UPDT ;update routine file
"RTN","XPDR",5,0)
 N DIR,DIRUT,XPD,XPDI,XPDJ,XPDN,X,X1,Y,Y1,% W !
"RTN","XPDR",6,0)
 W ! S DIR(0)="FO^1:9^K:X'?.1""-""1U.7UNP X",DIR("A")="Routine Namespace",DIR("?")="Enter 1 to 8 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDR",7,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDR",8,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDR",9,0)
 Q:'$D(XPDN)!$D(DTOUT)!$D(DUOUT)
"RTN","XPDR",10,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDR",11,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDR",12,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDR",13,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDR",14,0)
 K DIR S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",15,0)
 Q:'Y!$D(DIRUT)  W !
"RTN","XPDR",16,0)
 S DIR(0)="Y",DIR("A")="Want me to clean up the Routine File before updating",DIR("?")="YES means you want to go throught the Routine file and delete any routine name that no longer exists on the system."
"RTN","XPDR",17,0)
 D ^DIR
"RTN","XPDR",18,0)
 Q:$D(DIRUT)  D WAIT^DICD,DELRTN:Y
"RTN","XPDR",19,0)
 ;loop thru include list XPDN(1,XPDI)
"RTN","XPDR",20,0)
 S XPDI="" F  S XPDI=$O(XPDN(1,XPDI)) Q:XPDI=""  D
"RTN","XPDR",21,0)
 .S XPDJ=XPDI D:$D(^$R(XPDJ))  F  S XPDJ=$O(^$R(XPDJ)) Q:XPDJ=""!($P(XPDJ,XPDI)]"")  D
"RTN","XPDR",22,0)
 ..;if name XPDJ is in the exclude list, XPDN(0,XPDJ) or in Routine file, quit
"RTN","XPDR",23,0)
 ..Q:$D(XPDN(0,XPDJ))!$O(^DIC(9.8,"B",XPDJ,0))
"RTN","XPDR",24,0)
 ..;check if XPDJ is refered in the namespace by checking the subscript
"RTN","XPDR",25,0)
 ..;before XPDJ, if sub exist and $P(XPDJ,sub)="" then it is part of the
"RTN","XPDR",26,0)
 ..;namespace, quit
"RTN","XPDR",27,0)
 ..S %=$O(XPDN(0,XPDJ),-1) I $L(%),$P(XPDJ,%)="" Q
"RTN","XPDR",28,0)
 ..N XPD S XPD(9.8,"+1,",.01)=XPDJ,XPD(9.8,"+1,",1)="R"
"RTN","XPDR",29,0)
 ..D ADD^DICA("","XPD")
"RTN","XPDR",30,0)
 W "    ...Done.",!
"RTN","XPDR",31,0)
 Q
"RTN","XPDR",32,0)
VER ;verify Routine file
"RTN","XPDR",33,0)
 N DIR,DIRUT,X,Y
"RTN","XPDR",34,0)
 W !,"I will delete all local entries in the Routine File in which",!,"the Routine no longer exist on this system!",!
"RTN","XPDR",35,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",36,0)
 Q:'Y!$D(DIRUT)  D DELRTN
"RTN","XPDR",37,0)
 W "    ...Done.",!
"RTN","XPDR",38,0)
 Q
"RTN","XPDR",39,0)
DELRTN ;delete routine file entries
"RTN","XPDR",40,0)
 N DA,DIK,Y
"RTN","XPDR",41,0)
 W !,"Routines listed as National will not be deleted!"
"RTN","XPDR",42,0)
 S DIK="^DIC(9.8,",DA=0
"RTN","XPDR",43,0)
 F  S DA=$O(^DIC(9.8,DA)) Q:'DA  S Y=$G(^(DA,0)) I "R"=$P(Y,U,2),$G(^DIC(9.8,DA,6))<2,$T(^@$P(Y,U))="" D ^DIK
"RTN","XPDR",44,0)
 Q
"RTN","XPDR",45,0)
PURGE ;purge file
"RTN","XPDR",46,0)
 N DA,DIK,DIR,DIRUT,X,XPD,XPDF,XPDI,XPDJ,XPDL,XPDN,XPDPG,XPDS,XPDUL,Y,Z
"RTN","XPDR",47,0)
 S DIR("?")="Enter the file you want to purge the data from.",DIR(0)="SM^B:Build;I:Install;ALL:Build & Install",DIR("A")="Purge from what file(s)"
"RTN","XPDR",48,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDR",49,0)
 S XPDF=$S(Y="I":9.7,1:9.6) S:Y="ALL" XPDF(1)=9.7
"RTN","XPDR",50,0)
 K DIR S DIR("?")="Enter the number of Versions to keep in the file, for each package",DIR(0)="N^0:100:0",DIR("A")="Versions to Retain",DIR("B")=1
"RTN","XPDR",51,0)
 D ^DIR Q:$D(DIRUT)  S XPDN=Y
"RTN","XPDR",52,0)
 K DIR
"RTN","XPDR",53,0)
 S DIR(0)="FO^3:30",DIR("?")="^D PURGEH^XPDR",DIR("A")="Package Name",DIR("B")="ALL"
"RTN","XPDR",54,0)
 F  D ^DIR Q:$D(DIRUT)  S XPD(X)="" Q:X="ALL"  K DIR("B") S DIR("A")="Another Package Name"
"RTN","XPDR",55,0)
 Q:'$D(XPD)
"RTN","XPDR",56,0)
 ;if they want all, make sure all is the only one
"RTN","XPDR",57,0)
 I $D(XPD("ALL")) K XPD S XPD("ALL")=""
"RTN","XPDR",58,0)
 ;XPDF(1) is defined if doing both files, do purge twice
"RTN","XPDR",59,0)
 K ^TMP($J) D PURGE1(XPDF),PURGE1($G(XPDF(1))):$D(XPDF(1))
"RTN","XPDR",60,0)
 I '$D(^TMP($J)) W !!,"No match found" Q
"RTN","XPDR",61,0)
 K XPD,DIR
"RTN","XPDR",62,0)
 S DIR(0)="E",$P(XPDUL,"-",IOM)=""
"RTN","XPDR",63,0)
 ;if ALL, reset XPDF to next file and Do, then reset back to 9.6
"RTN","XPDR",64,0)
 D  I $D(XPDF(1)) D ^DIR I Y S XPDF=XPDF(1) D  S XPDF=9.6
"RTN","XPDR",65,0)
 .S XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS),XPDPG=1,Y=1
"RTN","XPDR",66,0)
 .W @IOF D HDR
"RTN","XPDR",67,0)
 .;loop thru ^TMP($J,file,package) & show list, quit if user "^"
"RTN","XPDR",68,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D  Q:'Y
"RTN","XPDR",69,0)
 ..S Z=@XPD W $P(Z,"^"),$S($P(Z,"^",3):"  (duplicates)",1:""),! Q:$Y<(IOSL-4)
"RTN","XPDR",70,0)
 ..D ^DIR Q:'Y
"RTN","XPDR",71,0)
 ..S XPDPG=XPDPG+1 W @IOF D HDR
"RTN","XPDR",72,0)
 S DIR(0)="Y",DIR("A")="OK to DELETE these entries",DIR("B")="NO"
"RTN","XPDR",73,0)
 W !! D ^DIR
"RTN","XPDR",74,0)
 I $D(DIRUT)!'Y W !!,"Nothing Purged" Q
"RTN","XPDR",75,0)
 ;loop thru and delete
"RTN","XPDR",76,0)
 D  I $D(XPDF(1)) S XPDF=XPDF(1) D
"RTN","XPDR",77,0)
 .S DIK="^XPD("_XPDF_",",XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS)
"RTN","XPDR",78,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D
"RTN","XPDR",79,0)
 ..S XPDI=@XPD F XPDJ=2:1 S DA=$P(XPDI,"^",XPDJ) Q:'DA  D ^DIK
"RTN","XPDR",80,0)
 Q
"RTN","XPDR",81,0)
 ;
"RTN","XPDR",82,0)
PURGE1(XPDF) ;XPDF=file #
"RTN","XPDR",83,0)
 N XPDFL,XPDI,XPDJ,XPDP,XPDV,Y,Z
"RTN","XPDR",84,0)
 W "."
"RTN","XPDR",85,0)
 ;if All, loop thru B x-ref
"RTN","XPDR",86,0)
 I $D(XPD("ALL")) D
"RTN","XPDR",87,0)
 .S XPDI=""
"RTN","XPDR",88,0)
 .F  S XPDI=$O(^XPD(XPDF,"B",XPDI)) Q:XPDI=""  D
"RTN","XPDR",89,0)
 ..S X=$$PKG^XPDUTL(XPDI) D PURGE2(X)
"RTN","XPDR",90,0)
 ..W "."
"RTN","XPDR",91,0)
 E  S XPDI="" F  S XPDI=$O(XPD(XPDI)) Q:XPDI=""  D
"RTN","XPDR",92,0)
 .D PURGE2(XPDI)
"RTN","XPDR",93,0)
 .W "."
"RTN","XPDR",94,0)
 ;loop thru each package, XPDP=package name
"RTN","XPDR",95,0)
 S XPDP="" F  S XPDP=$O(^TMP($J,XPDF,XPDP)) Q:XPDP=""  D
"RTN","XPDR",96,0)
 .S XPDV="",XPDL=XPDN
"RTN","XPDR",97,0)
 .;the last is the most recent, XPDN = number to retain, XPDV=version
"RTN","XPDR",98,0)
 .;XPDS=type (T/V/Z)
"RTN","XPDR",99,0)
 .F  S XPDV=$O(^TMP($J,XPDF,XPDP,XPDV),-1),XPDS="" Q:'XPDV!'XPDL  F  S XPDS=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS),-1) Q:XPDS=""!'XPDL  D
"RTN","XPDR",100,0)
 ..S Y="" F  S Y=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y),-1) Q:Y=""!'XPDL  D
"RTN","XPDR",101,0)
 ...I $D(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y))#2 K ^(Y) S XPDL=XPDL-1 Q
"RTN","XPDR",102,0)
 ...S Z="" F  S Z=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y,Z),-1) Q:Z=""!'XPDL  K ^(Z) S XPDL=XPDL-1
"RTN","XPDR",103,0)
 Q
"RTN","XPDR",104,0)
 ;
"RTN","XPDR",105,0)
PURGE2(XPDX) ;XPDX=package name
"RTN","XPDR",106,0)
 ;XPDFL=1 this is not a patch, quit when we find a patch during loop
"RTN","XPDR",107,0)
 S XPDS=XPDX,XPDL=$L(XPDX),XPDFL=XPDX'["*"
"RTN","XPDR",108,0)
 ;loop and find matches
"RTN","XPDR",109,0)
 D  F  S XPDS=$O(^XPD(XPDF,"B",XPDS)) Q:XPDS=""!($E(XPDS,1,XPDL)'=XPDX)!($S(XPDFL:XPDS["*",1:0))  D
"RTN","XPDR",110,0)
 .S Y=$O(^XPD(XPDF,"B",XPDS,0)) Q:'Y
"RTN","XPDR",111,0)
 .Q:'$D(^XPD(XPDF,Y,0))  S Z=^(0),Y=XPDS_"^"_Y
"RTN","XPDR",112,0)
 .;can't delete Installs that status isn't 'Install Completed'
"RTN","XPDR",113,0)
 .I XPDF=9.7 Q:$P(Z,U,9)<3
"RTN","XPDR",114,0)
 .S XPDV=$$VER^XPDUTL(XPDS)
"RTN","XPDR",115,0)
 .;TMP($J,file,package name,version,"*","T/V/Z",num,patch)=NAME^DA^duplicat DAs
"RTN","XPDR",116,0)
 .I XPDS["*" D  Q
"RTN","XPDR",117,0)
 ..I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*Z",0,+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",118,0)
 ..I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*T",+$P(XPDV,"T",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",119,0)
 ..I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*V",+$P(XPDV,"V",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",120,0)
 ..S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*",+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2))
"RTN","XPDR",121,0)
 .;TMP($J,file,package name,version,"Z",0)=NAME^DA^duplicate DAs
"RTN","XPDR",122,0)
 .I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"Z",0)=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",123,0)
 .;TMP($J,file,package name,version,"T/V",num)=NAME^DA^dup DAs
"RTN","XPDR",124,0)
 .I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"T",+$P(XPDV,"T",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",125,0)
 .I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"V",+$P(XPDV,"V",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",126,0)
 Q
"RTN","XPDR",127,0)
PURGEH ;executable help from DIR call at PURGE+8
"RTN","XPDR",128,0)
 W:$E(DIR("A"),1)="P" !,"Enter 'ALL' to purge all packages, or"
"RTN","XPDR",129,0)
 W !,"Enter the name of the Package you want to Purge.",!," i.e. KERNEL 8.0  will purge version 8.0Tx and 8.0Vx",!,"      XU*8.0 will purge all patches for 8.0",!
"RTN","XPDR",130,0)
 N DIR,X,Y
"RTN","XPDR",131,0)
 S DIR(0)="Y",DIR("A")="Want to see the "_$S(XPDF=9.7:"Install File",$D(XPDF(1)):"Build & Install Files",1:"Build File")_" List",DIR("B")="Y"
"RTN","XPDR",132,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDR",133,0)
 D PURGEH1("^XPD(9.6,"):XPDF=9.6,PURGEH1("^XPD(9.7,"):XPDF=9.7!$D(XPDF(1))
"RTN","XPDR",134,0)
 Q
"RTN","XPDR",135,0)
 ;
"RTN","XPDR",136,0)
DUP(Z,Z1) ;find duplicate, Z=NAME, Z1=last ien
"RTN","XPDR",137,0)
 ;returns Y=DA^dup DA^dup DA...
"RTN","XPDR",138,0)
 N Y S Y=""
"RTN","XPDR",139,0)
 F  S Z1=$O(^XPD(XPDF,"B",Z,Z1)) Q:'Z1  S Y=Y_"^"_Z1
"RTN","XPDR",140,0)
 Q Y
"RTN","XPDR",141,0)
 ;
"RTN","XPDR",142,0)
PURGEH1(DIC) ;
"RTN","XPDR",143,0)
 W !!,$S(DIC[9.6:"BUILD ",1:"INSTALL ")_"File"
"RTN","XPDR",144,0)
 S DIC(0)="QE",X="??" D ^DIC
"RTN","XPDR",145,0)
 Q
"RTN","XPDR",146,0)
 ;
"RTN","XPDR",147,0)
HDR W !,"Package(s) in ",$S(XPDF=9.7:"INSTALL",1:"BUILD")," File, "
"RTN","XPDR",148,0)
 I XPDN W "Retain last ",$S(XPDN=1:"version",1:XPDN_" versions")
"RTN","XPDR",149,0)
 E  W "Don't retain any versions"
"RTN","XPDR",150,0)
 W ?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDR",151,0)
 Q
"RTN","XPDT")
0^1^B73091341^B60483119
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package ;06/21/2006
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41,44,51,58,66,68,85,100,108,393**;Jul 10, 1995;Build 12
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDH1,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER
"RTN","XPDT",9,0)
 N XPDFMSG,X,Y,Z
"RTN","XPDT",10,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",11,0)
 S XPD="First Package Name: ",DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one.",XPDT=0
"RTN","XPDT",12,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",13,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",14,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",15,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",16,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",17,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",18,0)
 .;if type is Global Package, set DIRUT if there is other packages
"RTN","XPDT",19,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q
"RTN","XPDT",20,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",21,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",22,0)
 ..I $D(^XTMP("XPDT",XPDA)) W "  **Cannot have a pre-existing Transport Global**" S DIRUT=1 Q
"RTN","XPDT",23,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",24,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",25,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",26,0)
 ..S XPDERR=1,XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",27,0)
 .Q:$D(XPDERR)
"RTN","XPDT",28,0)
 .D PCK(XPDA,XPDI)
"RTN","XPDT",29,0)
 .;multi-package
"RTN","XPDT",30,0)
 .Q:$P(Y(0),U,3)'=1
"RTN","XPDT",31,0)
 .W "   (Multi-Package)" S X=0
"RTN","XPDT",32,0)
 .I XPDT>1 S DIRUT=1 W !,"A Master Build must be the first/only package in a transport" Q
"RTN","XPDT",33,0)
 .F  S X=$O(^XPD(9.6,XPDA,10,X)) Q:'X  S Z=$P($G(^(X,0)),U),Z1=$P($G(^(0)),U,2) D:Z]""
"RTN","XPDT",34,0)
 ..N XPDA,X
"RTN","XPDT",35,0)
 ..W !?3,Z S XPDA=$O(^XPD(9.6,"B",Z,0))
"RTN","XPDT",36,0)
 ..I 'XPDA W "  **Can't find definition in Build file**" Q
"RTN","XPDT",37,0)
 ..I $D(XPDT("DA",XPDA)) W "  already listed" Q
"RTN","XPDT",38,0)
 ..D PCK(XPDA,Z,Z1)
"RTN","XPDT",39,0)
 .S XPDERR=1 ;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",40,0)
 .Q
"RTN","XPDT",41,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",42,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",43,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",44,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",45,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",46,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",47,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan."
"RTN","XPDT",48,0)
 S DIR(0)="SAO^HF:Host File"_$S(XPDT=1:";PM:PackMan",1:"")
"RTN","XPDT",49,0)
 S DIR("A")="Transport through (HF)Host File"_$S(XPDT=1:" or (PM)PackMan: ",1:": ")
"RTN","XPDT",50,0)
 S DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",51,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",52,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",53,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",54,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",55,0)
 I $D(XPDGP),Y'="HF" W !,"**Global Package can only be sent with a Host File, Transport ABORTED**" Q
"RTN","XPDT",56,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",57,0)
 W !!
"RTN","XPDT",58,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",59,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",60,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",61,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",62,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",63,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",64,0)
 .;Inc the Build number
"RTN","XPDT",65,0)
 .S $P(^XPD(9.6,XPDA,6.3),U)=$G(^XPD(9.6,XPDA,6.3))+1
"RTN","XPDT",66,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",67,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",68,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",69,0)
 ..;can't send global package in packman message
"RTN","XPDT",70,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",71,0)
 ..;verify global package
"RTN","XPDT",72,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",73,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",74,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",75,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",76,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",77,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",78,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",79,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",80,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",81,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",82,0)
 ;if no device then just create transport global
"RTN","XPDT",83,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",84,0)
 Q
"RTN","XPDT",85,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",86,0)
 D HOME^%ZIS
"RTN","XPDT",87,0)
 S DIR(0)="F^3:245",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",88,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",89,0)
 ;if no file, then quit
"RTN","XPDT",90,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",91,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment",DIR("?")="Enter a comment between 3 and 80 charaters."
"RTN","XPDT",92,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",93,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",94,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",95,0)
 ;write date and comment header
"RTN","XPDT",96,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",97,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",98,0)
 S XPDFMSG=1 ;Send mail to forum of routines in HFS.
"RTN","XPDT",99,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",100,0)
 U IO(0) Q
"RTN","XPDT",101,0)
 ;
"RTN","XPDT",102,0)
GO S I=1,Y="",XPDH1="**KIDS**:" U IO
"RTN","XPDT",103,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",104,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",105,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",106,0)
 F  D  W $$SUM(XPDH1_Y),! Q:I=XPDT  S Y="",I=I+1,XPDH1="**KIDS**"
"RTN","XPDT",107,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",108,0)
 ;after the package list write an extra line feed
"RTN","XPDT",109,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",110,0)
 N XMSUB,XMY,XMTEXT
"RTN","XPDT",111,0)
 ;loop thru & write global, don't kill if set to permanent, set in XPDIU
"RTN","XPDT",112,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW,XM K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDT",113,0)
 W "**END**",!
"RTN","XPDT",114,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",115,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",116,0)
 ;we're done with device, close it
"RTN","XPDT",117,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",118,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",119,0)
 Q
"RTN","XPDT",120,0)
GW ;global write
"RTN","XPDT",121,0)
 N GR,GCK,GL
"RTN","XPDT",122,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",123,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",124,0)
 ;the next INSTALL NAME
"RTN","XPDT",125,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",126,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",127,0)
 Q
"RTN","XPDT",128,0)
XM ;Send HFS checksum message
"RTN","XPDT",129,0)
 Q:'$G(XPDFMSG)
"RTN","XPDT",130,0)
 N XMTEXT,C,RN,X,X2
"RTN","XPDT",131,0)
 K ^TMP($J)
"RTN","XPDT",132,0)
 S XMSUB="**KIDS** Checksum for "_XPDNM,XMTEXT="^TMP($J)"
"RTN","XPDT",133,0)
 I $G(^XMB("NETNAME"))["VA.GOV" S XMY("S.A1AE HFS CHKSUM SVR@FORUM.VA.GOV")=""
"RTN","XPDT",134,0)
 E  S X=$$GET^XPAR("PKG","XPD PATCH HFS SERVER",1,"Q") S:$L(X) XMY(X)=""
"RTN","XPDT",135,0)
 I '$D(XMY) Q  ;No one to send it to.
"RTN","XPDT",136,0)
 S C=1,@XMTEXT@(1,0)="~~1:"_XPDNM
"RTN","XPDT",137,0)
 I XPDT=1,$O(XPDT(1)) D
"RTN","XPDT",138,0)
 . S RN=1 F  S RN=$O(XPDT(RN)) Q:'RN  S C=C+1,@XMTEXT@(C,0)="~~2:"_$P(XPDT(RN),"^",2)
"RTN","XPDT",139,0)
 S RN="" ;Send full RTN node
"RTN","XPDT",140,0)
 F  S RN=$O(^XTMP("XPDT",XPDA,"RTN",RN)) Q:'$L(RN)  S X=^(RN),X2=$G(^(RN,2,0)),C=C+1,@XMTEXT@(C,0)="~~3:"_RN_"^"_X_"^"_$P(X2,";",5)
"RTN","XPDT",141,0)
 S C=C+1,@XMTEXT@(C,0)="~~8:"_$G(^XMB("NETNAME"))
"RTN","XPDT",142,0)
 S C=C+1,@XMTEXT@(C,0)="~~9:Save"
"RTN","XPDT",143,0)
 S XMTEXT="^TMP($J,"
"RTN","XPDT",144,0)
 D ^XMD
"RTN","XPDT",145,0)
 Q
"RTN","XPDT",146,0)
GPW ;global package write
"RTN","XPDT",147,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",148,0)
 W !
"RTN","XPDT",149,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",150,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",151,0)
 .;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",152,0)
 .;the next GLOBAL
"RTN","XPDT",153,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",154,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",155,0)
 Q
"RTN","XPDT",156,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",157,0)
 Q
"RTN","XPDT",158,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",159,0)
 D QUIT
"RTN","XPDT",160,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",161,0)
 D ^%ZISC
"RTN","XPDT",162,0)
 Q
"RTN","XPDT",163,0)
 ;
"RTN","XPDT",164,0)
PCK(XPDA,XPDNM,XPDREQ) ;XPDA=Build ien, XPDNM=Build name, XPDREQ=Required
"RTN","XPDT",165,0)
 N Y
"RTN","XPDT",166,0)
 S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDNM,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",167,0)
 S:'$G(XPDREQ) XPDREQ=0
"RTN","XPDT",168,0)
 S $P(XPDT(XPDT),U,4)=XPDREQ
"RTN","XPDT",169,0)
 Q:'$D(^XTMP("XPDT",XPDA))  S Y=$G(^(XPDA))
"RTN","XPDT",170,0)
 W "     **Transport Global exists**"
"RTN","XPDT",171,0)
 ;Y=1 if TG is permanet
"RTN","XPDT",172,0)
 I Y S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",173,0)
 ;ask if they want to use TG
"RTN","XPDT",174,0)
 D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",175,0)
 Q
"RTN","XPDT",176,0)
 ;
"RTN","XPDT",177,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",178,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",179,0)
 Q X
"RTN","XPDT",180,0)
 ;
"RTN","XPDT",181,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",182,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",183,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",184,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",185,0)
 D @Y Q
"RTN","XPDT",186,0)
 ;
"RTN","XPDT",187,0)
 ;
"RTN","XPDT",188,0)
 ;FROM DEV
"RTN","XPDT",189,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",190,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",191,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",192,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",193,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",194,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",195,0)
 ;FROM SUM
"RTN","XPDT",196,0)
 ;ask for next disk
"RTN","XPDT",197,0)
 ;this code is for MSM system only
"RTN","XPDT",198,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",199,0)
 .;write continue flag at end of this file
"RTN","XPDT",200,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",201,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",202,0)
 .X "C IO" U IO(0)
"RTN","XPDT",203,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",204,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",205,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",206,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",207,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",208,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",209,0)
 .;MSM specific code to open HFS
"RTN","XPDT",210,0)
 .X "O IO:IOPAR" U IO
"RTN","XPDT",211,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",212,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDTA")
0^4^B28341432^B26161584
"RTN","XPDTA",1,0)
XPDTA ;SFISC/RSD - Build Actions for Kernel Files ;02/14/2006
"RTN","XPDTA",2,0)
 ;;8.0;KERNEL;**15,44,58,131,229,393**;Jul 10, 1995;Build 12
"RTN","XPDTA",3,0)
 Q
"RTN","XPDTA",4,0)
 ;^XTMP("XPDT",XPDA,"KRN",FILE,DA) is the global root
"RTN","XPDTA",5,0)
 ;DA=ien in ^XTMP,XPDNM=package name, XPDA=package ien in ^XPD(9.6,
"RTN","XPDTA",6,0)
OPT ;options
"RTN","XPDTA",7,0)
 N %,%1,%2
"RTN","XPDTA",8,0)
 ;if link, kill everything and just process the menu items
"RTN","XPDTA",9,0)
 I XPDFL=2 D  G OPTT
"RTN","XPDTA",10,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,%)) Q:'%  K:%'=10 ^(%)
"RTN","XPDTA",11,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",12,0)
 S %=^XTMP("XPDT",XPDA,"KRN",19,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",13,0)
 ;resolve Help Frame (0;7), kill Permitted Devices (3.96;0) & queue node (200)
"RTN","XPDTA",14,0)
 S $P(%,U,7)=$$PT("^DIC(9.2)",$P(%,U,7)),^XTMP("XPDT",XPDA,"KRN",19,DA,0)=% K ^(3.96),^(200)
"RTN","XPDTA",15,0)
 ;resolve Server Bulletin (220;1), Server Mailgroup (220;3)
"RTN","XPDTA",16,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,220)) S %=^(220),$P(%,U)=$$PT("^XMB(3.6)",+%),$P(%,U,3)=$$PT("^XMB(3.8)",$P(%,U,3)),^XTMP("XPDT",XPDA,"KRN",19,DA,220)=%
"RTN","XPDTA",17,0)
 ;resolve RPC (RPC;0), must be type Broker
"RTN","XPDTA",18,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC")) K:$P(^(0),U,4)'="B" ^("RPC") D
"RTN","XPDTA",19,0)
 .;kill  "B"=name x-ref, it will be re-indexed when installed
"RTN","XPDTA",20,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC","B")
"RTN","XPDTA",21,0)
 .;loop thru RPCs and resolve (RPC;1)
"RTN","XPDTA",22,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",23,0)
 ..S %2=$$PT("^XWB(8994)",+%1)
"RTN","XPDTA",24,0)
 ..;if can't resolve then delete
"RTN","XPDTA",25,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0) Q
"RTN","XPDTA",26,0)
 ..;save the RPC name
"RTN","XPDTA",27,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0),U)=%2
"RTN","XPDTA",28,0)
 .Q
"RTN","XPDTA",29,0)
OPTT ;Menus can only exist for options of type: menu,protocol,protocol menu,
"RTN","XPDTA",30,0)
 ;extended action, limited, window suite
"RTN","XPDTA",31,0)
 I "LMOQXZ"'[$P(^XTMP("XPDT",XPDA,"KRN",19,DA,0),U,4) K ^(10) Q
"RTN","XPDTA",32,0)
 ;kill  "B"=name, "C"=synonyms x-ref, it will be re-indexed when installed
"RTN","XPDTA",33,0)
 K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,"B"),^("C")
"RTN","XPDTA",34,0)
 ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",35,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",36,0)
 .S %2=$$PT("^DIC(19)",+%1)
"RTN","XPDTA",37,0)
 .;items must be sent by themselves, check "B" x-ref
"RTN","XPDTA",38,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",19,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%,U)=%2 Q
"RTN","XPDTA",39,0)
 .;if I couldn't resolve this option, then kill it
"RTN","XPDTA",40,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)
"RTN","XPDTA",41,0)
 Q
"RTN","XPDTA",42,0)
PRO ;protocols
"RTN","XPDTA",43,0)
 N %,%1,%2
"RTN","XPDTA",44,0)
 ;if link, kill everything and just process the menu items
"RTN","XPDTA",45,0)
 I XPDFL=2 D  G PROT
"RTN","XPDTA",46,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,%)) Q:'%  K:%'=10 ^(%)
"RTN","XPDTA",47,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",48,0)
 S %=^XTMP("XPDT",XPDA,"KRN",101,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",49,0)
 ;kill under Menus (10), "B"=name, "C"=synonyms
"RTN","XPDTA",50,0)
 S ^XTMP("XPDT",XPDA,"KRN",101,DA,0)=%
"RTN","XPDTA",51,0)
 ;resolve File Link (5;1), its a variable pointer
"RTN","XPDTA",52,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",101,DA,5)),U),%1=$P(%,";",2)
"RTN","XPDTA",53,0)
 I %,$D(@("^"_%1_+%_",0)")) S $P(^XTMP("XPDT",XPDA,"KRN",101,DA,5),U)=$P(^(0),U)_";"_%1
"RTN","XPDTA",54,0)
 ;resolve HL7 fields, node 770
"RTN","XPDTA",55,0)
 S %=$G(^XTMP("XPDT",XPDA,"KRN",101,DA,770)) I $L(%) D  S ^XTMP("XPDT",XPDA,"KRN",101,DA,770)=%
"RTN","XPDTA",56,0)
 .S $P(%,U)=$$PT("^HL(771)",$P(%,U)),$P(%,U,2)=$$PT("^HL(771)",$P(%,U,2))
"RTN","XPDTA",57,0)
 .S $P(%,U,3)=$$PT("^HL(771.2)",$P(%,U,3)),$P(%,U,11)=$$PT("^HL(771.2)",$P(%,U,11))
"RTN","XPDTA",58,0)
 .S $P(%,U,4)=$$PT("^HL(779.001)",$P(%,U,4)),$P(%,U,7)=$$PT("^HLCS(870)",$P(%,U,7))
"RTN","XPDTA",59,0)
 .S $P(%,U,8)=$$PT("^HL(779.003)",$P(%,U,8)),$P(%,U,9)=$$PT("^HL(779.003)",$P(%,U,9))
"RTN","XPDTA",60,0)
 .S $P(%,U,10)=$$PT("^HL(771.5)",$P(%,U,10))
"RTN","XPDTA",61,0)
PROT ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",62,0)
 ;kill under Menus (10), "B"=name, "C"=synonyms
"RTN","XPDTA",63,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",101,DA,10,0)) K ^("B"),^("C")
"RTN","XPDTA",64,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",65,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",66,0)
 .S %2=$$PT("^ORD(101)",+%1)
"RTN","XPDTA",67,0)
 .;Menu must also be sent by itself, check "B" x-ref
"RTN","XPDTA",68,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",101,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,U)=%2,$P(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,0),U,4)=$$PT("^ORD(101)",$P(%1,U,4)) Q
"RTN","XPDTA",69,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)
"RTN","XPDTA",70,0)
 ;If type is Event Driver and sending Subscribers (775)
"RTN","XPDTA",71,0)
 I $P(^XTMP("XPDT",XPDA,"KRN",101,DA,0),U,4)="E" D
"RTN","XPDTA",72,0)
 . ;kill Menu multiple and Subscriber x-ref "B"=name
"RTN","XPDTA",73,0)
 . K ^XTMP("XPDT",XPDA,"KRN",101,DA,10),^(775,"B")
"RTN","XPDTA",74,0)
 . ;loop thru 775=Subscribers and resolve pointer (775;1)
"RTN","XPDTA",75,0)
 . S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,775,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",76,0)
 .. ;%2=.01 of subscriber(protocol)
"RTN","XPDTA",77,0)
 .. S %2=$$PT("^ORD(101)",+%1)
"RTN","XPDTA",78,0)
 .. ;protocol must also be sent by itself, check "B" x-ref
"RTN","XPDTA",79,0)
 .. I $L(%2),$D(^XPD(9.6,XPDA,"KRN",101,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",101,DA,775,%,U)=%2 Q
"RTN","XPDTA",80,0)
 .. K ^XTMP("XPDT",XPDA,"KRN",101,DA,775,%)
"RTN","XPDTA",81,0)
 ;quit if no Access multiple
"RTN","XPDTA",82,0)
 Q:'$D(^XTMP("XPDT",XPDA,"KRN",101,DA,3,0))  K ^("B")
"RTN","XPDTA",83,0)
 ;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDTA",84,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",85,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",86,0)
 .S %2=$$PT("^DIC(19.1)",+%1)
"RTN","XPDTA",87,0)
 .I $L(%2) S ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%,0)=%2 Q
"RTN","XPDTA",88,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)
"RTN","XPDTA",89,0)
 Q
"RTN","XPDTA",90,0)
RTNE ;routine entry build action
"RTN","XPDTA",91,0)
 N %,X,XPD
"RTN","XPDTA",92,0)
 ;move routine to ^XTMP("XPDT",DPK1,"RTN",routine name
"RTN","XPDTA",93,0)
 ;routines will have the checksum in XTMP("XPDT",XPDA,"RTN",X) & in
"RTN","XPDTA",94,0)
 ;Build file
"RTN","XPDTA",95,0)
 S X=$P(^XTMP("XPDT",XPDA,"KRN",9.8,DA,0),U),XPD=^(-1)
"RTN","XPDTA",96,0)
 Q:X=""  S %=$$LOAD(X,XPD),$P(^XPD(9.6,XPDA,"KRN",9.8,"NM",+$P(XPD,U,2),0),U,4)=%
"RTN","XPDTA",97,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8,DA)
"RTN","XPDTA",98,0)
 Q
"RTN","XPDTA",99,0)
RTNF ;routine file build action
"RTN","XPDTA",100,0)
 N X,Y,% S Y=0
"RTN","XPDTA",101,0)
 ;the routines that are left in XTMP("XPDT",XPDA,"KRN",9.8) are to be
"RTN","XPDTA",102,0)
 ;deleted at site, move name field to RTN node
"RTN","XPDTA",103,0)
 F  S Y=$O(^XTMP("XPDT",XPDA,"KRN",9.8,Y)) Q:'Y  S %=^(Y,-1),X=^(0) D
"RTN","XPDTA",104,0)
 .I +%=1 S ^XTMP("XPDT",XPDA,"RTN",X)=%,^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",105,0)
 ;kill everything
"RTN","XPDTA",106,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8)
"RTN","XPDTA",107,0)
 Q
"RTN","XPDTA",108,0)
PT(GR,DA) ;GR=file global ref, DA=ien, return .01 value
"RTN","XPDTA",109,0)
 Q:'DA ""
"RTN","XPDTA",110,0)
 I $D(@GR@(+DA,0))#2 Q $P(^(0),U)
"RTN","XPDTA",111,0)
 Q ""
"RTN","XPDTA",112,0)
 ;
"RTN","XPDTA",113,0)
LOAD(X,XPD) ;load routine X, XPD=action^ien in Build file
"RTN","XPDTA",114,0)
 ;XPD = 0-load, 1-delete, 2-skip, returns checksum
"RTN","XPDTA",115,0)
 ;quit if routine is already saved
"RTN","XPDTA",116,0)
 Q:$D(^XTMP("XPDT",XPDA,"RTN",X)) $P(^(X),U,3)
"RTN","XPDTA",117,0)
 N DIF,XCNP,%N,%A,FDA,IEN,LN2
"RTN","XPDTA",118,0)
 S DIF="^XTMP(""XPDT"",XPDA,""RTN"",X,",XCNP=0
"RTN","XPDTA",119,0)
 X ^%ZOSF("LOAD")
"RTN","XPDTA",120,0)
 S $P(^XTMP("XPDT",XPDA,"RTN",X,2,0),";",7)="Build "_(+^XPD(9.6,XPDA,6.3)),LN2=^XTMP("XPDT",XPDA,"RTN",X,2,0)
"RTN","XPDTA",121,0)
 S IEN=$$FIND1^DIC(9.8,"","X",X)
"RTN","XPDTA",122,0)
 ;^XTMP("XPDT",XPDA,"RTN",X)=action^ien in Build^checksum
"RTN","XPDTA",123,0)
 S %N="B"_$$SUMB^XPDRSUM($NA(^XTMP("XPDT",XPDA,"RTN",X)))
"RTN","XPDTA",124,0)
 S $P(XPD,"^",3)=%N ;Make sure the Checksum is in the 3rd piece
"RTN","XPDTA",125,0)
 S ^XTMP("XPDT",XPDA,"RTN",X)=XPD
"RTN","XPDTA",126,0)
 ;update count node
"RTN","XPDTA",127,0)
 S ^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",128,0)
 N XUA,XUB S (XUA,XUB)=""
"RTN","XPDTA",129,0)
 ;Update Dev Patch field in Routine file
"RTN","XPDTA",130,0)
 I IEN D
"RTN","XPDTA",131,0)
 . S XUB=$P(XPDT(XPDT),U,2) S:XUB["*" $P(XUB,"*",2)=+$P(XUB,"*",2)
"RTN","XPDTA",132,0)
 . S IEN="?+2,"_IEN_",",FDA(9.819,IEN,.01)=XUB
"RTN","XPDTA",133,0)
 . S FDA(9.819,IEN,2)=%N,FDA(9.819,IEN,3)=$P(LN2,";",5)
"RTN","XPDTA",134,0)
 . D UPDATE^DIE("","FDA","IEN")
"RTN","XPDTA",135,0)
 Q %N
"UP",9.4,9.4901,-2)
9.4^22
"UP",9.4,9.4901,-1)
9.49^PAH
"UP",9.4,9.4901,0)
9.4901
"UP",9.8,9.818,-1)
9.8^8
"UP",9.8,9.818,0)
9.818
"UP",9.8,9.819,-1)
9.8^9
"UP",9.8,9.819,0)
9.819
"VER")
8.0^22.0
"^DD",9.4,9.4901,.02,0)
DATE APPLIED^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",9.4,9.4901,.02,3)
(No range limit on date)
"^DD",9.4,9.4901,.02,"DT")
3060905
"^DD",9.6,9.6,63,0)
TRANSPORT BUILD NUMBER^NJ3,0^^6.3;1^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1.N) X
"^DD",9.6,9.6,63,.1)
Transport Build Number
"^DD",9.6,9.6,63,3)
Type a number between 0 and 999, 0 Decimal Digits
"^DD",9.6,9.6,63,21,0)
^^6^6^3051206^
"^DD",9.6,9.6,63,21,1,0)
This field holds the Transport Build Number for this package or patch. It
"^DD",9.6,9.6,63,21,2,0)
is incremented by one every time there is a KIDS transport done. It should
"^DD",9.6,9.6,63,21,3,0)
not be edited. During the KIDS transport this build number will be 
"^DD",9.6,9.6,63,21,4,0)
inserted into the 7th piece of the second line. During the testing of a 
"^DD",9.6,9.6,63,21,5,0)
package or patch this gives a way for support to know if the most 
"^DD",9.6,9.6,63,21,6,0)
current routines are loaded.
"^DD",9.6,9.6,63,"DT")
3060619
"^DD",9.8,9.8,6,0)
CHECKSUM REPORT^S^0:Local - don't report;1:Local - report;2:National - report;^6;1^Q
"^DD",9.8,9.8,6,21,0)
^.001^3^3^3041028^^
"^DD",9.8,9.8,6,21,1,0)
Entries flaged with "National - report" should not be changed.
"^DD",9.8,9.8,6,21,2,0)
Sites may determine if they want reports on checksum differences for 
"^DD",9.8,9.8,6,21,3,0)
local routines by selecting "Local - report".
"^DD",9.8,9.8,6,"DT")
3041028
"^DD",9.8,9.8,6.1,0)
LOCALLY MODIFIED^S^1:YES;^6;2^Q
"^DD",9.8,9.8,6.1,3)
Enter ?? to read field description.
"^DD",9.8,9.8,6.1,21,0)
^^4^4^3050824^
"^DD",9.8,9.8,6.1,21,1,0)
This field was introduced by the VISTA Auto-patch Utility v2.0 for the 
"^DD",9.8,9.8,6.1,21,2,0)
purpose of not installing patches that contain routines with local mods. 
"^DD",9.8,9.8,6.1,21,3,0)
If the value is set to YES for a given routine VAPU will not install a 
"^DD",9.8,9.8,6.1,21,4,0)
patch or any of the routines contained in the patch.
"^DD",9.8,9.8,6.1,"DT")
3050824
"^DD",9.8,9.8,6.2,0)
DELETED BY PATCH^F^^6;3^K:$L(X)>15!($L(X)<2) X
"^DD",9.8,9.8,6.2,3)
Answer must be 2-15 characters in length.
"^DD",9.8,9.8,6.2,21,0)
^^3^3^3050921^
"^DD",9.8,9.8,6.2,21,1,0)
This field is set by KIDS during an Install when the routine is sent
"^DD",9.8,9.8,6.2,21,2,0)
with the 'delete at site'.
"^DD",9.8,9.8,6.2,21,3,0)
It holds the patch name.
"^DD",9.8,9.8,6.2,"DT")
3050921
"^DD",9.8,9.8,7.2,0)
CHECKSUM VALUE^F^^4;2^K:$L(X)>15!($L(X)<2)!'(X?1A1.N) X
"^DD",9.8,9.8,7.2,3)
Answer must be 1 Alpha 1-14 Numerics in length.
"^DD",9.8,9.8,7.2,21,0)
^^5^5^3050922^
"^DD",9.8,9.8,7.2,21,1,0)
This is the saved Checksum value.
"^DD",9.8,9.8,7.2,21,2,0)
The letter at the front tells us what checksum algorithm was used.
"^DD",9.8,9.8,7.2,21,3,0)
It is loaded from the KIDS build on FORUM and sent to the sites.
"^DD",9.8,9.8,7.2,21,4,0)
The only application that should load date into this field are on FORUM
"^DD",9.8,9.8,7.2,21,5,0)
and the Master File Update routines in the field.
"^DD",9.8,9.8,7.2,"DT")
3050922
"^DD",9.8,9.8,8,0)
PATCH^9.818^^8;0
"^DD",9.8,9.8,9,0)
DEV PATCH^9.819A^^9;0
"^DD",9.8,9.818,0)
PATCH SUB-FIELD^^3^3
"^DD",9.8,9.818,0,"DT")
3060509
"^DD",9.8,9.818,0,"IX","B",9.818,.01)

"^DD",9.8,9.818,0,"NM","PATCH")

"^DD",9.8,9.818,0,"UP")
9.8
"^DD",9.8,9.818,.01,0)
PATCH^F^^0;1^K:$L(X)>50!($L(X)<2) X
"^DD",9.8,9.818,.01,1,0)
^.1
"^DD",9.8,9.818,.01,1,1,0)
9.818^B
"^DD",9.8,9.818,.01,1,1,1)
S ^DIC(9.8,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",9.8,9.818,.01,1,1,2)
K ^DIC(9.8,DA(1),8,"B",$E(X,1,30),DA)
"^DD",9.8,9.818,.01,3)
Answer must be 2-20 characters in length
"^DD",9.8,9.818,.01,21,0)
^^1^1^3060905^
"^DD",9.8,9.818,.01,21,1,0)
This field holds a Package or Patch name that included this routine.
"^DD",9.8,9.818,.01,"DT")
3060509
"^DD",9.8,9.818,2,0)
CHECKSUM^F^^0;2^K:$L(X)>15!($L(X)<2)!'(X?1A1.N) X
"^DD",9.8,9.818,2,.1)
CheckSum
"^DD",9.8,9.818,2,3)
Answer must be 1 Alpha 1-14 Numerics in length.
"^DD",9.8,9.818,2,21,0)
^^2^2^3060905^
"^DD",9.8,9.818,2,21,1,0)
This field holds the checksum (based on $$SUMB^XPDRSUM(routine)) 
"^DD",9.8,9.818,2,21,2,0)
calculated for Class I release loaded by KIDS.
"^DD",9.8,9.818,2,"DT")
3050922
"^DD",9.8,9.818,3,0)
PATCH LIST^F^^0;3^K:$L(X)>200!($L(X)<2) X
"^DD",9.8,9.818,3,3)
Answer must be 2-200 characters in length
"^DD",9.8,9.818,3,21,0)
^^1^1^3060509^
"^DD",9.8,9.818,3,21,1,0)
This field holds the patch list at the time of the patch.
"^DD",9.8,9.818,3,"DT")
3060509
"^DD",9.8,9.819,0)
DEV PATCH SUB-FIELD^^3^3
"^DD",9.8,9.819,0,"DT")
3060504
"^DD",9.8,9.819,0,"IX","B",9.819,.01)

"^DD",9.8,9.819,0,"NM","DEV PATCH")

"^DD",9.8,9.819,0,"UP")
9.8
"^DD",9.8,9.819,.01,0)
Dev Patch^F^^0;1^K:$L(X)>15!($L(X)<2) X
"^DD",9.8,9.819,.01,1,0)
^.1
"^DD",9.8,9.819,.01,1,1,0)
9.819^B
"^DD",9.8,9.819,.01,1,1,1)
S ^DIC(9.8,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",9.8,9.819,.01,1,1,2)
K ^DIC(9.8,DA(1),9,"B",$E(X,1,30),DA)
"^DD",9.8,9.819,.01,3)
Answer must be 2-15 characters in length.
"^DD",9.8,9.819,.01,21,0)
^^4^4^3060504^
"^DD",9.8,9.819,.01,21,1,0)
This field holds the patch number.
"^DD",9.8,9.819,.01,21,2,0)
This is were KIDS will put the Checksum for the routine at the time the 
"^DD",9.8,9.819,.01,21,3,0)
the routine is exported from the account.
"^DD",9.8,9.819,.01,21,4,0)
The PATCH (#8) field is synced with the FORUM gold account.
"^DD",9.8,9.819,.01,"DT")
3060504
"^DD",9.8,9.819,2,0)
Dev Checksum^F^^0;2^K:$L(X)>20!($L(X)<2) X
"^DD",9.8,9.819,2,3)
Answer must be 2-20 characters in length.
"^DD",9.8,9.819,2,21,0)
^^1^1^3060504^
"^DD",9.8,9.819,2,21,1,0)
This is the Checksum value for the routine at the time of export.
"^DD",9.8,9.819,2,"DT")
3060504
"^DD",9.8,9.819,3,0)
Dev Patch List^F^^0;3^K:$L(X)>200!($L(X)<2) X
"^DD",9.8,9.819,3,3)
Answer must be 2-200 characters in length.
"^DD",9.8,9.819,3,21,0)
^^2^2^3060504^
"^DD",9.8,9.819,3,21,1,0)
This is the patch list at the time the patch was exported from this 
"^DD",9.8,9.819,3,21,2,0)
account.
"^DD",9.8,9.819,3,"DT")
3060504
"BLD",900,6)
^347
**END**
**END**
