KIDS Distribution saved on Jun 02, 2003@13:12:22
CAPACITY MANAGEMENT - RUM 2.0
**KIDS**:CAPACITY MANAGEMENT - RUM 2.0^XU*8.0*186^

**INSTALL NAME**
CAPACITY MANAGEMENT - RUM 2.0
"BLD",4860,0)
CAPACITY MANAGEMENT - RUM 2.0^CAPACITY MANAGEMENT - RUM^0^3030602^y
"BLD",4860,1,0)
^^1^1^3030529^
"BLD",4860,1,1,0)
RUM V2.0
"BLD",4860,4,0)
^9.64PA^8971.1^1
"BLD",4860,4,8971.1,0)
8971.1
"BLD",4860,4,8971.1,222)
y^y^f^^^^n
"BLD",4860,4,"B",8971.1,8971.1)

"BLD",4860,"ABPKG")
n
"BLD",4860,"INIT")
KMPRPOST
"BLD",4860,"KRN",0)
^9.67PA^8989.52^19
"BLD",4860,"KRN",.4,0)
.4
"BLD",4860,"KRN",.401,0)
.401
"BLD",4860,"KRN",.402,0)
.402
"BLD",4860,"KRN",.403,0)
.403
"BLD",4860,"KRN",.5,0)
.5
"BLD",4860,"KRN",.84,0)
.84
"BLD",4860,"KRN",3.6,0)
3.6
"BLD",4860,"KRN",3.8,0)
3.8
"BLD",4860,"KRN",9.2,0)
9.2
"BLD",4860,"KRN",9.8,0)
9.8
"BLD",4860,"KRN",9.8,"NM",0)
^9.68A^23^23
"BLD",4860,"KRN",9.8,"NM",1,0)
KMPRBD01^^0^B10261662
"BLD",4860,"KRN",9.8,"NM",2,0)
KMPRBD02^^0^B29338515
"BLD",4860,"KRN",9.8,"NM",3,0)
KMPRBD03^^0^B13057189
"BLD",4860,"KRN",9.8,"NM",4,0)
KMPRENV^^1^
"BLD",4860,"KRN",9.8,"NM",5,0)
KMPRP1^^0^B20246537
"BLD",4860,"KRN",9.8,"NM",6,0)
KMPRPG01^^0^B5597122
"BLD",4860,"KRN",9.8,"NM",7,0)
KMPRPG02^^0^B5598139
"BLD",4860,"KRN",9.8,"NM",8,0)
KMPRPN03^^0^B13271909
"BLD",4860,"KRN",9.8,"NM",9,0)
KMPRPOST^^0^B2097994
"BLD",4860,"KRN",9.8,"NM",10,0)
KMPRSS^^0^B26709533
"BLD",4860,"KRN",9.8,"NM",11,0)
KMPRUTL^^0^B21041564
"BLD",4860,"KRN",9.8,"NM",12,0)
KMPRUTL1^^0^B12571358
"BLD",4860,"KRN",9.8,"NM",13,0)
KMPRUTL2^^0^B24733019
"BLD",4860,"KRN",9.8,"NM",14,0)
KMPRUTL3^^0^B26204608
"BLD",4860,"KRN",9.8,"NM",15,0)
KMPU11^^0^B15230900
"BLD",4860,"KRN",9.8,"NM",16,0)
KMPUG^^0^B10988451
"BLD",4860,"KRN",9.8,"NM",17,0)
KMPUG1^^0^B11831811
"BLD",4860,"KRN",9.8,"NM",18,0)
KMPUG2^^0^B22564003
"BLD",4860,"KRN",9.8,"NM",19,0)
KMPUGV^^0^B6508235
"BLD",4860,"KRN",9.8,"NM",20,0)
KMPUTL^^0^B145461
"BLD",4860,"KRN",9.8,"NM",21,0)
KMPUTL1^^0^B3675081
"BLD",4860,"KRN",9.8,"NM",22,0)
KMPRP2^^0^B42301428
"BLD",4860,"KRN",9.8,"NM",23,0)
KMPRBD04^^0^B32011228
"BLD",4860,"KRN",9.8,"NM","B","KMPRBD01",1)

"BLD",4860,"KRN",9.8,"NM","B","KMPRBD02",2)

"BLD",4860,"KRN",9.8,"NM","B","KMPRBD03",3)

"BLD",4860,"KRN",9.8,"NM","B","KMPRBD04",23)

"BLD",4860,"KRN",9.8,"NM","B","KMPRENV",4)

"BLD",4860,"KRN",9.8,"NM","B","KMPRP1",5)

"BLD",4860,"KRN",9.8,"NM","B","KMPRP2",22)

"BLD",4860,"KRN",9.8,"NM","B","KMPRPG01",6)

"BLD",4860,"KRN",9.8,"NM","B","KMPRPG02",7)

"BLD",4860,"KRN",9.8,"NM","B","KMPRPN03",8)

"BLD",4860,"KRN",9.8,"NM","B","KMPRPOST",9)

"BLD",4860,"KRN",9.8,"NM","B","KMPRSS",10)

"BLD",4860,"KRN",9.8,"NM","B","KMPRUTL",11)

"BLD",4860,"KRN",9.8,"NM","B","KMPRUTL1",12)

"BLD",4860,"KRN",9.8,"NM","B","KMPRUTL2",13)

"BLD",4860,"KRN",9.8,"NM","B","KMPRUTL3",14)

"BLD",4860,"KRN",9.8,"NM","B","KMPU11",15)

"BLD",4860,"KRN",9.8,"NM","B","KMPUG",16)

"BLD",4860,"KRN",9.8,"NM","B","KMPUG1",17)

"BLD",4860,"KRN",9.8,"NM","B","KMPUG2",18)

"BLD",4860,"KRN",9.8,"NM","B","KMPUGV",19)

"BLD",4860,"KRN",9.8,"NM","B","KMPUTL",20)

"BLD",4860,"KRN",9.8,"NM","B","KMPUTL1",21)

"BLD",4860,"KRN",19,0)
19
"BLD",4860,"KRN",19,"NM",0)
^9.68A^11^11
"BLD",4860,"KRN",19,"NM",1,0)
KMPR BACKGROUND DRIVER^^0
"BLD",4860,"KRN",19,"NM",2,0)
KMPR GRAPH ALL NODES^^0
"BLD",4860,"KRN",19,"NM",3,0)
KMPR GRAPH HOURLY SINGLE NODE^^0
"BLD",4860,"KRN",19,"NM",4,0)
KMPR PRINT NODE PERCENT^^0
"BLD",4860,"KRN",19,"NM",5,0)
KMPR PRINT OPTION DATA^^0
"BLD",4860,"KRN",19,"NM",6,0)
KMPR REPORTS MENU^^0
"BLD",4860,"KRN",19,"NM",7,0)
KMPR RUM MANAGER MENU^^0
"BLD",4860,"KRN",19,"NM",8,0)
KMPR START COLLECTION^^0
"BLD",4860,"KRN",19,"NM",9,0)
KMPR STATUS COLLECTION^^0
"BLD",4860,"KRN",19,"NM",10,0)
KMPR STOP COLLECTION^^0
"BLD",4860,"KRN",19,"NM",11,0)
KMPR PRINT HOURLY OCCURRENCE^^0
"BLD",4860,"KRN",19,"NM","B","KMPR BACKGROUND DRIVER",1)

"BLD",4860,"KRN",19,"NM","B","KMPR GRAPH ALL NODES",2)

"BLD",4860,"KRN",19,"NM","B","KMPR GRAPH HOURLY SINGLE NODE",3)

"BLD",4860,"KRN",19,"NM","B","KMPR PRINT HOURLY OCCURRENCE",11)

"BLD",4860,"KRN",19,"NM","B","KMPR PRINT NODE PERCENT",4)

"BLD",4860,"KRN",19,"NM","B","KMPR PRINT OPTION DATA",5)

"BLD",4860,"KRN",19,"NM","B","KMPR REPORTS MENU",6)

"BLD",4860,"KRN",19,"NM","B","KMPR RUM MANAGER MENU",7)

"BLD",4860,"KRN",19,"NM","B","KMPR START COLLECTION",8)

"BLD",4860,"KRN",19,"NM","B","KMPR STATUS COLLECTION",9)

"BLD",4860,"KRN",19,"NM","B","KMPR STOP COLLECTION",10)

"BLD",4860,"KRN",19.1,0)
19.1
"BLD",4860,"KRN",101,0)
101
"BLD",4860,"KRN",409.61,0)
409.61
"BLD",4860,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",4860,"KRN",771,0)
771
"BLD",4860,"KRN",870,0)
870
"BLD",4860,"KRN",8989.51,0)
8989.51
"BLD",4860,"KRN",8989.52,0)
8989.52
"BLD",4860,"KRN",8994,0)
8994
"BLD",4860,"KRN","B",.4,.4)

"BLD",4860,"KRN","B",.401,.401)

"BLD",4860,"KRN","B",.402,.402)

"BLD",4860,"KRN","B",.403,.403)

"BLD",4860,"KRN","B",.5,.5)

"BLD",4860,"KRN","B",.84,.84)

"BLD",4860,"KRN","B",3.6,3.6)

"BLD",4860,"KRN","B",3.8,3.8)

"BLD",4860,"KRN","B",9.2,9.2)

"BLD",4860,"KRN","B",9.8,9.8)

"BLD",4860,"KRN","B",19,19)

"BLD",4860,"KRN","B",19.1,19.1)

"BLD",4860,"KRN","B",101,101)

"BLD",4860,"KRN","B",409.61,409.61)

"BLD",4860,"KRN","B",771,771)

"BLD",4860,"KRN","B",870,870)

"BLD",4860,"KRN","B",8989.51,8989.51)

"BLD",4860,"KRN","B",8989.52,8989.52)

"BLD",4860,"KRN","B",8994,8994)

"BLD",4860,"QUES",0)
^9.62^^
"BLD",4860,"REQB",0)
^9.611^2^1
"BLD",4860,"REQB",2,0)
KMPD*1.0*1^1
"BLD",4860,"REQB","B","KMPD*1.0*1",2)

"FIA",8971.1)
RESOURCE USAGE MONITOR
"FIA",8971.1,0)
^KMPR(8971.1,
"FIA",8971.1,0,0)
8971.1DIAO
"FIA",8971.1,0,1)
y^y^f^^^^n
"FIA",8971.1,0,10)

"FIA",8971.1,0,11)

"FIA",8971.1,0,"RLRO")

"FIA",8971.1,0,"VR")
2.0^CAPACITY MANAGEMENT - RUM
"FIA",8971.1,8971.1)
0
"INIT")
KMPRPOST
"KRN",19,13934,-1)
0^7
"KRN",19,13934,0)
KMPR RUM MANAGER MENU^RUM Manager Menu^^M^^^^^^^^CAPACITY MANAGEMENT - RUM^^1
"KRN",19,13934,1,0)
^^2^2^2981124^^^^
"KRN",19,13934,1,1,0)
This menu will help the site to manage the Resource Usage Monitor (RUM)
"KRN",19,13934,1,2,0)
component of Capacity Management monitoring tools.
"KRN",19,13934,10,0)
^19.01IP^7^7
"KRN",19,13934,10,4,0)
13940^STR^2
"KRN",19,13934,10,4,"^")
KMPR START COLLECTION
"KRN",19,13934,10,5,0)
13939^STP^3
"KRN",19,13934,10,5,"^")
KMPR STOP COLLECTION
"KRN",19,13934,10,6,0)
13941^STA^1
"KRN",19,13934,10,6,"^")
KMPR STATUS COLLECTION
"KRN",19,13934,10,7,0)
16504^RPT^4
"KRN",19,13934,10,7,"^")
KMPR REPORTS MENU
"KRN",19,13934,20)
N IORVOFF,IORVON,Z D ZIS^KMPRUTL W @IOF,!,?25,IORVON,"* Resource Usage Monitor "_$P($$VERSION^KMPRUTL,U)_" *",IORVOFF,!! D ENVCHECK^KMPRUTL1(.Z,1) W:+Z=100 !!?(80-$L(Z)\2),$C(7),IORVON," *** ",$P(Z,U,2)," *** ",IORVOFF
"KRN",19,13934,99)
59318,59679
"KRN",19,13934,99.1)
59321,79425
"KRN",19,13934,"U")
RUM MANAGER MENU
"KRN",19,13936,-1)
0^4
"KRN",19,13936,0)
KMPR PRINT NODE PERCENT^Package Resource Usage^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,13936,1,0)
^^3^3^2981119^^
"KRN",19,13936,1,1,0)
This option will display the package Resource Usage Monitor statistics.
"KRN",19,13936,1,2,0)
The printout summarizes the statistics of the options, protocols and
"KRN",19,13936,1,3,0)
tasks for a selected namespace as percentages.
"KRN",19,13936,25)
KMPRPN03
"KRN",19,13936,"U")
PACKAGE RESOURCE USAGE
"KRN",19,13938,-1)
0^1
"KRN",19,13938,0)
KMPR BACKGROUND DRIVER^RUM Background Driver^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,13938,1,0)
^^3^3^3020904^
"KRN",19,13938,1,1,0)
This option will compress the Resource Usage Monitor statistics located in
"KRN",19,13938,1,2,0)
^KMPTMP("KMPR") into daily stats.  This option must be queued to run each
"KRN",19,13938,1,3,0)
day on off hours (recommended run time at 1 a.m.) .
"KRN",19,13938,25)
KMPRBD01
"KRN",19,13938,200.9)
y^y
"KRN",19,13938,"U")
RUM BACKGROUND DRIVER
"KRN",19,13939,-1)
0^10
"KRN",19,13939,0)
KMPR STOP COLLECTION^Stop RUM Collection^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,13939,1,0)
^^1^1^2970819^^^
"KRN",19,13939,1,1,0)
This option will stop Resource Usage Monitor (RUM) collection.
"KRN",19,13939,25)
STOP^KMPRSS
"KRN",19,13939,"U")
STOP RUM COLLECTION
"KRN",19,13940,-1)
0^8
"KRN",19,13940,0)
KMPR START COLLECTION^Start RUM Collection^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,13940,1,0)
^^1^1^2970815^
"KRN",19,13940,1,1,0)
This option will start Resource Usage Monitor (RUM) collection.
"KRN",19,13940,25)
START^KMPRSS
"KRN",19,13940,"U")
START RUM COLLECTION
"KRN",19,13941,-1)
0^9
"KRN",19,13941,0)
KMPR STATUS COLLECTION^Status of RUM Collection^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,13941,1,0)
^^2^2^2970819^
"KRN",19,13941,1,1,0)
This option will display the status of Resource Usage Monitor (RUM)
"KRN",19,13941,1,2,0)
collection.
"KRN",19,13941,25)
STAT^KMPRSS
"KRN",19,13941,"U")
STATUS OF RUM COLLECTION
"KRN",19,16499,-1)
0^2
"KRN",19,16499,0)
KMPR GRAPH ALL NODES^RUM Data for All Nodes (Graph)^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,16499,1,0)
^^2^2^2981119^
"KRN",19,16499,1,1,0)
This option will display a graph of the selected RUM Data Element for all
"KRN",19,16499,1,2,0)
nodes.
"KRN",19,16499,25)
EN^KMPRPG01
"KRN",19,16499,"U")
RUM DATA FOR ALL NODES (GRAPH)
"KRN",19,16500,-1)
0^3
"KRN",19,16500,0)
KMPR GRAPH HOURLY SINGLE NODE^RUM Data by Date for Single Node (Graph)^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,16500,1,0)
^^2^2^2981119^
"KRN",19,16500,1,1,0)
This option will display a graph of the selected RUM Data Element for a
"KRN",19,16500,1,2,0)
single node.
"KRN",19,16500,25)
EN^KMPRPG02
"KRN",19,16500,"U")
RUM DATA BY DATE FOR SINGLE NO
"KRN",19,16501,-1)
0^5
"KRN",19,16501,0)
KMPR PRINT OPTION DATA^RUM Data for an Option^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,16501,1,0)
^^3^3^2981119^
"KRN",19,16501,1,1,0)
This option will display all the RUM Data Elements for a selected option.
"KRN",19,16501,1,2,0)
The output shows each Element per Occurrence, as well as the totals of
"KRN",19,16501,1,3,0)
each Element.
"KRN",19,16501,25)
EN^KMPRP1
"KRN",19,16501,"U")
RUM DATA FOR AN OPTION
"KRN",19,16504,-1)
0^6
"KRN",19,16504,0)
KMPR REPORTS MENU^RUM Reports^^M^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,16504,10,0)
^19.01IP^10^10
"KRN",19,16504,10,6,0)
16499^GAN
"KRN",19,16504,10,6,"^")
KMPR GRAPH ALL NODES
"KRN",19,16504,10,7,0)
16500^GSN
"KRN",19,16504,10,7,"^")
KMPR GRAPH HOURLY SINGLE NODE
"KRN",19,16504,10,8,0)
13936^PRU
"KRN",19,16504,10,8,"^")
KMPR PRINT NODE PERCENT
"KRN",19,16504,10,9,0)
16501^PDO
"KRN",19,16504,10,9,"^")
KMPR PRINT OPTION DATA
"KRN",19,16504,10,10,0)
18789^PHO
"KRN",19,16504,10,10,"^")
KMPR PRINT HOURLY OCCURRENCE
"KRN",19,16504,99)
59318,59679
"KRN",19,16504,"U")
RUM REPORTS
"KRN",19,18789,-1)
0^11
"KRN",19,18789,0)
KMPR PRINT HOURLY OCCURRENCE^Print Hourly Occurrence Distribution^^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,18789,1,0)
^^2^2^3030303^
"KRN",19,18789,1,1,0)
This option will display the hourly occurrence distribution for the
"KRN",19,18789,1,2,0)
specified option, protocol or RPC for the selected date.
"KRN",19,18789,25)
KMPRP2
"KRN",19,18789,"U")
PRINT HOURLY OCCURRENCE DISTRI
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",513,-1)
1^1
"PKG",513,0)
CAPACITY MANAGEMENT - RUM^KMPR^Capacity Management - Resource Usage Monitor
"PKG",513,1,0)
^^2^2^2970729^
"PKG",513,1,1,0)
The Resource Usage Monitor (RUM) is a component of Capacity Management's
"PKG",513,1,2,0)
suite of monitoring tools.
"PKG",513,5)
SF CIOFO
"PKG",513,7)
^^I
"PKG",513,20,0)
^9.402P^^
"PKG",513,22,0)
^9.49I^1^1
"PKG",513,22,1,0)
2.0^3030602^3030529^10292
"PKG",513,22,1,1,0)
^^1^1^3030602
"PKG",513,22,1,1,1,0)
RUM V2.0
"PKG",513,"VERSION")
2.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
23
"RTN","KMPRBD01")
0^1^B10261662
"RTN","KMPRBD01",1,0)
KMPRBD01 ;OAK/RAK - RUM Daily/Weekly Compression ;5/28/03  08:33
"RTN","KMPRBD01",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRBD01",3,0)
 ;
"RTN","KMPRBD01",4,0)
EN ;-- entry point for Background Driver.
"RTN","KMPRBD01",5,0)
 ;
"RTN","KMPRBD01",6,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPRBD01",7,0)
 ;
"RTN","KMPRBD01",8,0)
 N ENDT,STDT
"RTN","KMPRBD01",9,0)
 S STDT=$$NOW^XLFDT
"RTN","KMPRBD01",10,0)
 ; store daily stats in file #8971.1 (RESOURCE USAGE MONITOR).
"RTN","KMPRBD01",11,0)
 S ^KMPTMP("KMPR","BACKGROUND","DAILY","TOTAL","START")=STDT,^("STOP")="",^("DELTA")=""
"RTN","KMPRBD01",12,0)
 ;
"RTN","KMPRBD01",13,0)
 D DAILY^KMPRBD02(+$H)
"RTN","KMPRBD01",14,0)
 ;
"RTN","KMPRBD01",15,0)
 ; store start, stop and delta times for daily background job
"RTN","KMPRBD01",16,0)
 S ENDT=$$NOW^XLFDT S:ENDT="" ENDT="00:00:00"
"RTN","KMPRBD01",17,0)
 S ^KMPTMP("KMPR","BACKGROUND","DAILY","TOTAL","STOP")=ENDT
"RTN","KMPRBD01",18,0)
 S ^KMPTMP("KMPR","BACKGROUND","DAILY","TOTAL","DELTA")=$$FMDIFF^XLFDT(ENDT,STDT,3)
"RTN","KMPRBD01",19,0)
 ;
"RTN","KMPRBD01",20,0)
 ; clean up old "job" nodes.
"RTN","KMPRBD01",21,0)
 D CLEAN
"RTN","KMPRBD01",22,0)
 ;
"RTN","KMPRBD01",23,0)
 ; if sunday do weekly compression
"RTN","KMPRBD01",24,0)
 I '$$DOW^XLFDT(DT,1) D 
"RTN","KMPRBD01",25,0)
 .; store weekly start/stop stats.
"RTN","KMPRBD01",26,0)
 .S STDT=$$NOW^XLFDT
"RTN","KMPRBD01",27,0)
 .S ^KMPTMP("KMPR","BACKGROUND","WEEKLY","TOTAL","START")=STDT,^("STOP")="",^("DELTA")=""
"RTN","KMPRBD01",28,0)
 .;
"RTN","KMPRBD01",29,0)
 .D WEEKLY^KMPRBD04(DT)
"RTN","KMPRBD01",30,0)
 .;
"RTN","KMPRBD01",31,0)
 .; store start, stop and delta times for weekly background job
"RTN","KMPRBD01",32,0)
 .S ENDT=$$NOW^XLFDT
"RTN","KMPRBD01",33,0)
 .S ^KMPTMP("KMPR","BACKGROUND","WEEKLY","TOTAL","STOP")=ENDT
"RTN","KMPRBD01",34,0)
 .S ^KMPTMP("KMPR","BACKGROUND","WEEKLY","TOTAL","DELTA")=$$FMDIFF^XLFDT(ENDT,STDT,3)
"RTN","KMPRBD01",35,0)
 ;
"RTN","KMPRBD01",36,0)
 ; check for errors.
"RTN","KMPRBD01",37,0)
 D ERRORS
"RTN","KMPRBD01",38,0)
 ;
"RTN","KMPRBD01",39,0)
 Q
"RTN","KMPRBD01",40,0)
 ;
"RTN","KMPRBD01",41,0)
CLEAN ;-- clean up old "JOB" nodes
"RTN","KMPRBD01",42,0)
 ;
"RTN","KMPRBD01",43,0)
 N JOB,NODE S NODE=""
"RTN","KMPRBD01",44,0)
 F  S NODE=$O(^KMPTMP("KMPR","JOB",NODE)) Q:NODE=""  D
"RTN","KMPRBD01",45,0)
 .S JOB=0 F  S JOB=$O(^XTMP("KMPR","JOB",NODE,JOB)) Q:'+JOB  D
"RTN","KMPRBD01",46,0)
 ..I '$D(^XUTL("XQ",JOB)) K ^KMPTMP("KMPR","JOB",NODE,JOB)
"RTN","KMPRBD01",47,0)
 ;
"RTN","KMPRBD01",48,0)
 ; Store the number of active user jobs into ^XTMP("KMPR","ACTIVE")
"RTN","KMPRBD01",49,0)
 ; D CLUSTER^%ZKMPRC1
"RTN","KMPRBD01",50,0)
 ;
"RTN","KMPRBD01",51,0)
 Q
"RTN","KMPRBD01",52,0)
 ;
"RTN","KMPRBD01",53,0)
ERRORS ; check and process errors.
"RTN","KMPRBD01",54,0)
 ;
"RTN","KMPRBD01",55,0)
 Q:'$D(^XTMP("KMPR","ERR"))
"RTN","KMPRBD01",56,0)
 ;
"RTN","KMPRBD01",57,0)
 N H,I,LN,N,O,SITE,TEXT,XMSUB,X,XMTEXT,XMY,XMZ,Y,Z
"RTN","KMPRBD01",58,0)
 ;
"RTN","KMPRBD01",59,0)
 S SITE=$$SITE^VASITE
"RTN","KMPRBD01",60,0)
 S XMSUB="RUM Error at site "_$P(SITE,U,3)_" on "_$$FMTE^XLFDT($$DT^XLFDT)
"RTN","KMPRBD01",61,0)
 S TEXT(1)="  The following error(s) have been logged at "_$P(SITE,U,2)_" ("_$P(SITE,U,3)_") "
"RTN","KMPRBD01",62,0)
 S TEXT(2)="  while moving data from ^XTMP(""KMPR"",""DLY"") to file 8971.1."
"RTN","KMPRBD01",63,0)
 S H="",LN=3
"RTN","KMPRBD01",64,0)
 ; H = date in $H format (+$H).
"RTN","KMPRBD01",65,0)
 ; N = node name.
"RTN","KMPRBD01",66,0)
 ; O = option.
"RTN","KMPRBD01",67,0)
 F  S H=$O(^XTMP("KMPR","ERR",H)) Q:H=""  S N="" D 
"RTN","KMPRBD01",68,0)
 .F  S N=$O(^XTMP("KMPR","ERR",H,N)) Q:N=""  S O="" D 
"RTN","KMPRBD01",69,0)
 ..F  S O=$O(^XTMP("KMPR","ERR",H,N,O)) Q:O=""  D 
"RTN","KMPRBD01",70,0)
 ...S TEXT(LN)="",LN=LN+1
"RTN","KMPRBD01",71,0)
 ...S TEXT(LN)="Date..: "_H_"    Node: "_N,LN=LN+1
"RTN","KMPRBD01",72,0)
 ...S TEXT(LN)="Option: "_O,LN=LN+1
"RTN","KMPRBD01",73,0)
 ...; prime time.
"RTN","KMPRBD01",74,0)
 ...S TEXT(LN)="Prime Time     = "_$G(^XTMP("KMPR","ERR",H,N,O,0)),LN=LN+1
"RTN","KMPRBD01",75,0)
 ...; non-prime time.
"RTN","KMPRBD01",76,0)
 ...S TEXT(LN)="Non-Prime Time = "_$G(^XTMP("KMPR","ERR",H,N,O,1)),LN=LN+1
"RTN","KMPRBD01",77,0)
 ...; message.
"RTN","KMPRBD01",78,0)
 ...F I=0:0 S I=$O(^XTMP("KMPR","ERR",H,N,O,"MSG",I)) Q:'I  D 
"RTN","KMPRBD01",79,0)
 ....S TEXT(LN)=^XTMP("KMPR","ERR",H,N,O,"MSG",I),LN=LN+1
"RTN","KMPRBD01",80,0)
 S XMTEXT="TEXT("
"RTN","KMPRBD01",81,0)
 S XMY("G.KMP2-RUM@ISC-ALBANY.VA.GOV")=""
"RTN","KMPRBD01",82,0)
 D ^XMD
"RTN","KMPRBD01",83,0)
 ;
"RTN","KMPRBD01",84,0)
 K ^KMPTMP("KMPR","ERR")
"RTN","KMPRBD01",85,0)
 ;
"RTN","KMPRBD01",86,0)
 Q
"RTN","KMPRBD02")
0^2^B29338515
"RTN","KMPRBD02",1,0)
KMPRBD02 ;OAK/RAK - RUM Data Compression ;5/28/03  08:36
"RTN","KMPRBD02",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRBD02",3,0)
 ;
"RTN","KMPRBD02",4,0)
 ; Background Driver (cont.)
"RTN","KMPRBD02",5,0)
 ;
"RTN","KMPRBD02",6,0)
DAILY(KMPRTDAY) ;-- daily data compression and storage
"RTN","KMPRBD02",7,0)
 ;----------------------------------------------------------------------
"RTN","KMPRBD02",8,0)
 ; KMPRTDAY.. Day in $H format (+$H).  This represents the
"RTN","KMPRBD02",9,0)
 ;            ending point for compression.  Only dates LESS than
"RTN","KMPRBD02",10,0)
 ;            KMPRTDAY will be compressed.
"RTN","KMPRBD02",11,0)
 ;
"RTN","KMPRBD02",12,0)
 ; At midnight compress hourly info into daily stats. Daily stats are
"RTN","KMPRBD02",13,0)
 ; stored in file #8971.1.  Hourly data is killed.
"RTN","KMPRBD02",14,0)
 ;----------------------------------------------------------------------
"RTN","KMPRBD02",15,0)
 ;
"RTN","KMPRBD02",16,0)
 Q:'$G(KMPRTDAY)
"RTN","KMPRBD02",17,0)
 ;
"RTN","KMPRBD02",18,0)
 N COUNT,CNT,CNT1,CNT2,DATA,FMHDATE,HDATE,HTIME,I,JOB,MESSAGE
"RTN","KMPRBD02",19,0)
 N NODE,NW,OKAY,OPTION,NP,PT,PTM,X,VAR,USERS,USRDATA,WD,WORKDAY,YSTRDAY
"RTN","KMPRBD02",20,0)
 ;
"RTN","KMPRBD02",21,0)
 K ^TMP($J)
"RTN","KMPRBD02",22,0)
 ;
"RTN","KMPRBD02",23,0)
 ; make sure DT is defined.
"RTN","KMPRBD02",24,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPRBD02",25,0)
 ;
"RTN","KMPRBD02",26,0)
 ; yesterday - this will be the data that is compiled and stored
"RTN","KMPRBD02",27,0)
 S YSTRDAY=$$HADD^XLFDT(KMPRTDAY,-1)
"RTN","KMPRBD02",28,0)
 ;
"RTN","KMPRBD02",29,0)
 S NODE=""
"RTN","KMPRBD02",30,0)
 F  S NODE=$O(^KMPTMP("KMPR","DLY",NODE)) Q:NODE=""  D
"RTN","KMPRBD02",31,0)
 .S HDATE=""
"RTN","KMPRBD02",32,0)
 .F  S HDATE=$O(^KMPTMP("KMPR","DLY",NODE,HDATE)) Q:HDATE=""!(HDATE'<KMPRTDAY)  D 
"RTN","KMPRBD02",33,0)
 ..; if less than 'yesterday' kill - old data
"RTN","KMPRBD02",34,0)
 ..I HDATE<YSTRDAY K ^KMPTMP("KMPR","DLY",NODE,HDATE) Q
"RTN","KMPRBD02",35,0)
 ..;
"RTN","KMPRBD02",36,0)
 ..S FMHDATE=+$$HTFM^XLFDT(HDATE,1)
"RTN","KMPRBD02",37,0)
 ..;
"RTN","KMPRBD02",38,0)
 ..; WORKDAY = 0 : weekend or holiday (non-workday)
"RTN","KMPRBD02",39,0)
 ..;         = 1 : workday
"RTN","KMPRBD02",40,0)
 ..;
"RTN","KMPRBD02",41,0)
 ..S WORKDAY=$$WORKDAY^XUWORKDY(FMHDATE)
"RTN","KMPRBD02",42,0)
 ..;
"RTN","KMPRBD02",43,0)
 ..S OPTION=""
"RTN","KMPRBD02",44,0)
 ..F  S OPTION=$O(^KMPTMP("KMPR","DLY",NODE,HDATE,OPTION)) Q:OPTION=""  D 
"RTN","KMPRBD02",45,0)
 ...K NP,PT
"RTN","KMPRBD02",46,0)
 ...S JOB=0,COUNT=""
"RTN","KMPRBD02",47,0)
 ...F  S JOB=$O(^KMPTMP("KMPR","DLY",NODE,HDATE,OPTION,JOB)) Q:'JOB  D 
"RTN","KMPRBD02",48,0)
 ....S PTM=""
"RTN","KMPRBD02",49,0)
 ....F  S PTM=$O(^KMPTMP("KMPR","DLY",NODE,HDATE,OPTION,JOB,PTM)) Q:PTM=""  D 
"RTN","KMPRBD02",50,0)
 .....; PTM:  non-prime time = 0   prime time = 1
"RTN","KMPRBD02",51,0)
 .....S DATA=^KMPTMP("KMPR","DLY",NODE,HDATE,OPTION,JOB,PTM)
"RTN","KMPRBD02",52,0)
 .....;
"RTN","KMPRBD02",53,0)
 .....; prime time or non-prime time
"RTN","KMPRBD02",54,0)
 .....S VAR=$S((WORKDAY&PTM):"PT",1:"NP") Q:VAR=""
"RTN","KMPRBD02",55,0)
 .....;
"RTN","KMPRBD02",56,0)
 .....; if current data is negative
"RTN","KMPRBD02",57,0)
 .....I $P($G(@VAR@(0)),U,5)<0 D 
"RTN","KMPRBD02",58,0)
 ......S $P(^KMPTMP("KMPR","NEG","DLY",OPTION,"C"),U,5)=$P(@VAR,U,5)
"RTN","KMPRBD02",59,0)
 .....;
"RTN","KMPRBD02",60,0)
 .....; if new data is negative
"RTN","KMPRBD02",61,0)
 .....I ($P(DATA,U,5)<0) D 
"RTN","KMPRBD02",62,0)
 ......S $P(^KMPTMP("KMPR","NEG","DLY",OPTION,"N"),U,5)=$P(DATA,U,5)
"RTN","KMPRBD02",63,0)
 .....;
"RTN","KMPRBD02",64,0)
 .....; if sum of pieces are negative
"RTN","KMPRBD02",65,0)
 .....I ($P($G(@VAR@(0)),U,5)+$P(DATA,U,5))<0 D 
"RTN","KMPRBD02",66,0)
 ......S $P(^KMPTMP("KMPR","NEG","DLY",OPTION,"T"),U,5)=($P(@VAR,U,5))_"+"_($P(DATA,U,5))_"="_($P(@VAR,U,5)+$P(DATA,U,5))
"RTN","KMPRBD02",67,0)
 .....;
"RTN","KMPRBD02",68,0)
 .....; accumulate totals
"RTN","KMPRBD02",69,0)
 .....; data elements - pieces 1 - 8
"RTN","KMPRBD02",70,0)
 .....F I=1:1:8 S $P(@VAR@(1),U,I)=$P($G(@VAR@(1)),U,I)+$P(DATA,U,I)
"RTN","KMPRBD02",71,0)
 .....;
"RTN","KMPRBD02",72,0)
 .....S USERS=$G(^TMP($J,HDATE,NODE,JOB)),USRDATA=0
"RTN","KMPRBD02",73,0)
 .....;
"RTN","KMPRBD02",74,0)
 .....; hour counts - pieces 10 - 33 - offset by -9
"RTN","KMPRBD02",75,0)
 .....; hour 0 = piece 10
"RTN","KMPRBD02",76,0)
 .....; hour 1 = piece 11
"RTN","KMPRBD02",77,0)
 .....; hour 2 = piece 12 ...
"RTN","KMPRBD02",78,0)
 .....F I=10:1:33 S CNT=$P(DATA,U,I) I +CNT D
"RTN","KMPRBD02",79,0)
 ......S CNT1=$P(CNT,"~"),CNT2=$P(CNT,"~",2)
"RTN","KMPRBD02",80,0)
 ......;
"RTN","KMPRBD02",81,0)
 ......; set for every hour that this particular $job ran
"RTN","KMPRBD02",82,0)
 ......I +CNT2 S $P(USERS,U,(I-9))=$P(USERS,U,(I-9))+1,USRDATA=1
"RTN","KMPRBD02",83,0)
 ......;
"RTN","KMPRBD02",84,0)
 ......; if workday capture workday counts
"RTN","KMPRBD02",85,0)
 ......I WORKDAY D
"RTN","KMPRBD02",86,0)
 .......; number of occurrences per hour
"RTN","KMPRBD02",87,0)
 .......S $P(PT(1.1),U,(I-9))=$P($G(PT(1.1)),U,(I-9))+CNT1
"RTN","KMPRBD02",88,0)
 .......; number of users for this particular option/protocol/rpc
"RTN","KMPRBD02",89,0)
 .......S $P(PT(1.2),U,(I-9))=$P($G(PT(1.2)),U,(I-9))+1
"RTN","KMPRBD02",90,0)
 ......;
"RTN","KMPRBD02",91,0)
 ......; else capture non-workday (weekend/holiday) counts
"RTN","KMPRBD02",92,0)
 ......E  D
"RTN","KMPRBD02",93,0)
 .......; number of occurrences per hour
"RTN","KMPRBD02",94,0)
 .......S $P(NP(1.1),U,(I-9))=$P($G(NP(1.1)),U,(I-9))+CNT1
"RTN","KMPRBD02",95,0)
 .......; number of users for this particular option/protocol/rpc
"RTN","KMPRBD02",96,0)
 .......S $P(NP(1.2),U,(I-9))=$P($G(NP(1.2)),U,(I-9))+1
"RTN","KMPRBD02",97,0)
 .....;
"RTN","KMPRBD02",98,0)
 .....; will have every hour that this particular $job ran
"RTN","KMPRBD02",99,0)
 .....I USRDATA S ^TMP($J,HDATE,NODE,JOB)=USERS
"RTN","KMPRBD02",100,0)
 .....;
"RTN","KMPRBD02",101,0)
 .....; piece 1 non-prime time - piece 2 prime time
"RTN","KMPRBD02",102,0)
 .....S $P(COUNT,U,(PTM+1))=$P(COUNT,U,(PTM+1))+1
"RTN","KMPRBD02",103,0)
 .....;
"RTN","KMPRBD02",104,0)
 .....; remove data from array
"RTN","KMPRBD02",105,0)
 .....K ^KMPTMP("KMPR","DLY",NODE,HDATE,OPTION,JOB,PTM)
"RTN","KMPRBD02",106,0)
 ...;
"RTN","KMPRBD02",107,0)
 ...; back to OPTION level
"RTN","KMPRBD02",108,0)
 ...; file data into file #8971.1
"RTN","KMPRBD02",109,0)
 ...D FILE^KMPRBD03(HDATE,NODE,OPTION,.PT,.NP,$P(COUNT,U,2),$P(COUNT,U),.OKAY,.MESSAGE)
"RTN","KMPRBD02",110,0)
 ...;
"RTN","KMPRBD02",111,0)
 ...; if not filed successfully set into 'ERR' node.
"RTN","KMPRBD02",112,0)
 ...I 'OKAY D 
"RTN","KMPRBD02",113,0)
 ....S ^KMPTMP("KMPR","ERR",HDATE,NODE,OPTION,0)=NP_$P(COUNT,U)
"RTN","KMPRBD02",114,0)
 ....S ^KMPTMP("KMPR","ERR",HDATE,NODE,OPTION,1)=PT_$P(COUNT,U,2)
"RTN","KMPRBD02",115,0)
 ....F I=0:0 S I=$O(MESSAGE(I)) Q:'I  D 
"RTN","KMPRBD02",116,0)
 .....S ^KMPTMP("KMPR","ERR",HDATE,NODE,OPTION,"MSG",I)=MESSAGE(I)
"RTN","KMPRBD02",117,0)
 ;
"RTN","KMPRBD02",118,0)
 ; find the total number of jobs that ran first minute of every hour
"RTN","KMPRBD02",119,0)
 S HDATE=""
"RTN","KMPRBD02",120,0)
 F  S HDATE=$O(^TMP($J,HDATE)) Q:HDATE=""!(HDATE'<KMPRTDAY)  D
"RTN","KMPRBD02",121,0)
 .;
"RTN","KMPRBD02",122,0)
 .S FMHDATE=+$$HTFM^XLFDT(HDATE,1)
"RTN","KMPRBD02",123,0)
 .S WORKDAY=$$WORKDAY^XUWORKDY(FMHDATE)
"RTN","KMPRBD02",124,0)
 .;
"RTN","KMPRBD02",125,0)
 .;        WD: workday     NW: non-workday
"RTN","KMPRBD02",126,0)
 .S VAR=$S(WORKDAY:"WD",1:"NW")
"RTN","KMPRBD02",127,0)
 .S NODE=""
"RTN","KMPRBD02",128,0)
 .F  S NODE=$O(^TMP($J,HDATE,NODE)) Q:NODE=""  D
"RTN","KMPRBD02",129,0)
 ..K NW,WD
"RTN","KMPRBD02",130,0)
 ..S JOB=""
"RTN","KMPRBD02",131,0)
 ..F  S JOB=$O(^TMP($J,HDATE,NODE,JOB)) Q:'JOB  D
"RTN","KMPRBD02",132,0)
 ...S DATA=^TMP($J,HDATE,NODE,JOB)
"RTN","KMPRBD02",133,0)
 ...F I=1:1:24 S CNT=$P(DATA,U,I) I +CNT D
"RTN","KMPRBD02",134,0)
 ....S $P(@VAR@(1.1),U,I)=$P($G(@VAR@(1.1)),U,I)+CNT
"RTN","KMPRBD02",135,0)
 ....S $P(@VAR@(1.2),U,I)=$P($G(@VAR@(1.2)),U,I)+1
"RTN","KMPRBD02",136,0)
 ..;
"RTN","KMPRBD02",137,0)
 ..; file number of users information
"RTN","KMPRBD02",138,0)
 ..D FILE^KMPRBD03(HDATE,NODE,"#USERS#",.WD,.NW)
"RTN","KMPRBD02",139,0)
 ;
"RTN","KMPRBD02",140,0)
 K ^TMP($J)
"RTN","KMPRBD02",141,0)
 ;
"RTN","KMPRBD02",142,0)
 Q
"RTN","KMPRBD03")
0^3^B13057189
"RTN","KMPRBD03",1,0)
KMPRBD03 ;OAK/RAK - Resource Usage Monitor Data Compression ;5/28/03  08:38
"RTN","KMPRBD03",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRBD03",3,0)
 ;
"RTN","KMPRBD03",4,0)
 ; Background Driver (cont.)
"RTN","KMPRBD03",5,0)
 ;
"RTN","KMPRBD03",6,0)
FILE(KMPRDATE,KMPRNODE,KMPROPT,KMPRPT,KMPRNP,KMPRPTHR,KMPRNPHR,KMPROK,KMPRMSG) ;
"RTN","KMPRBD03",7,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",8,0)
 ; KMPRDATE.... Date in $H Format
"RTN","KMPRBD03",9,0)
 ; KMPRNODE.... Node Name
"RTN","KMPRBD03",10,0)
 ; KMPROPT..... Option (in 2 pieces with "***" as delimiter)
"RTN","KMPRBD03",11,0)
 ;                piece 1 - option name
"RTN","KMPRBD03",12,0)
 ;                piece 2 - protocol (optional)
"RTN","KMPRBD03",13,0)
 ; KMPRPT().... Array for Prime Time data - passed by reference
"RTN","KMPRBD03",14,0)
 ;       (1)... Prime Time Data (8 elements)
"RTN","KMPRBD03",15,0)
 ;       (1.1). Hour count (24 hours)
"RTN","KMPRBD03",16,0)
 ;       (1.2). User count (24 hours)
"RTN","KMPRBD03",17,0)
 ; KMPRNP().... Array fo Non-Prime data - passed by reference
"RTN","KMPRBD03",18,0)
 ;       (1)... Non-Prime Time Data (8 elements)
"RTN","KMPRBD03",19,0)
 ;       (1.1). Hour count (24 hours)
"RTN","KMPRBD03",20,0)
 ;       (1.2). User count (24 hours)
"RTN","KMPRBD03",21,0)
 ; KMPRPTHR.... Number of Prime Time Hours
"RTN","KMPRBD03",22,0)
 ; KMPRNPHR.... Number of Non Prime Hours
"RTN","KMPRBD03",23,0)
 ; KMPROK...... Returns: 0 - update not successful
"RTN","KMPRBD03",24,0)
 ;                       1 - update successful
"RTN","KMPRBD03",25,0)
 ; KMPRMSG..... If KMPROK = 0 then message text will be returned in this
"RTN","KMPRBD03",26,0)
 ;              array (passed by reference)
"RTN","KMPRBD03",27,0)
 ;
"RTN","KMPRBD03",28,0)
 ; File data in file #8971.1 (RESOUCE USAGE MONITOR)
"RTN","KMPRBD03",29,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",30,0)
 ;
"RTN","KMPRBD03",31,0)
 S KMPROK=0
"RTN","KMPRBD03",32,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRBD03",33,0)
 Q:$G(KMPRNODE)=""
"RTN","KMPRBD03",34,0)
 Q:$G(KMPROPT)=""
"RTN","KMPRBD03",35,0)
 Q:'$D(KMPRPT)&('$D(KMPRNP))
"RTN","KMPRBD03",36,0)
 S KMPRPTHR=+$G(KMPRPTHR),KMPRNPHR=+$G(KMPRNPHR)
"RTN","KMPRBD03",37,0)
 S KMPROK=1
"RTN","KMPRBD03",38,0)
 K KMPRMSG
"RTN","KMPRBD03",39,0)
 ;
"RTN","KMPRBD03",40,0)
 N FDA,FMDATE,I,J,MESSAGE,OPT,WORKDAY,ZIEN
"RTN","KMPRBD03",41,0)
 ;
"RTN","KMPRBD03",42,0)
 S FMDATE=$$HTFM^XLFDT(KMPRDATE),WORKDAY=$$WORKDAY^XUWORKDY(FMDATE)
"RTN","KMPRBD03",43,0)
 ;
"RTN","KMPRBD03",44,0)
 ; date
"RTN","KMPRBD03",45,0)
 S FDA($J,8971.1,"+1,",.01)=FMDATE
"RTN","KMPRBD03",46,0)
 ; sent to cm national database
"RTN","KMPRBD03",47,0)
 S FDA($J,8971.1,"+1,",.02)=0
"RTN","KMPRBD03",48,0)
 ; cpu node
"RTN","KMPRBD03",49,0)
 S FDA($J,8971.1,"+1,",.03)=KMPRNODE
"RTN","KMPRBD03",50,0)
 ; option
"RTN","KMPRBD03",51,0)
 S OPT=$P(KMPROPT,"***")
"RTN","KMPRBD03",52,0)
 ; rum designation
"RTN","KMPRBD03",53,0)
 S FDA($J,8971.1,"+1,",.08)=$$RUMDESIG(OPT)
"RTN","KMPRBD03",54,0)
 ; if the first character of OPT is '`' then this is an RPC
"RTN","KMPRBD03",55,0)
 I $E(OPT)="`" S FDA($J,8971.1,"+1,",.07)=$E(OPT,2,999)
"RTN","KMPRBD03",56,0)
 ; if the first character of OPT is '&' then this is an HL7
"RTN","KMPRBD03",57,0)
 E  I $E(OPT)="&" S FDA($J,8971.1,"+1,",.09)=$E(OPT,2,999)
"RTN","KMPRBD03",58,0)
 ; option
"RTN","KMPRBD03",59,0)
 E  S FDA($J,8971.1,"+1,",.04)=$$OPTION(OPT)
"RTN","KMPRBD03",60,0)
 ; protocol
"RTN","KMPRBD03",61,0)
 S:$P(KMPROPT,"***",2)'="" FDA($J,8971.1,"+1,",.05)=$P(KMPROPT,"***",2)
"RTN","KMPRBD03",62,0)
 ;
"RTN","KMPRBD03",63,0)
 ;--Populate prime time, non-prime time and non-workday fields
"RTN","KMPRBD03",64,0)
 F I=1:1:8 S J=I*.01 D
"RTN","KMPRBD03",65,0)
 .;
"RTN","KMPRBD03",66,0)
 .; subscript 1 - workday prime time (PT)
"RTN","KMPRBD03",67,0)
 .I $P($G(KMPRPT(1)),U,I)'=""&(KMPRPTHR) D 
"RTN","KMPRBD03",68,0)
 ..S FDA($J,8971.1,"+1,",1+J)=$FN($P(KMPRPT(1),U,I),"",2)
"RTN","KMPRBD03",69,0)
 .;
"RTN","KMPRBD03",70,0)
 .I $P($G(KMPRNP(1)),U,I)'=""&(KMPRNPHR) D
"RTN","KMPRBD03",71,0)
 ..; subscript 2 - workday non-prime time (NP)
"RTN","KMPRBD03",72,0)
 ..I WORKDAY S FDA($J,8971.1,"+1,",2+J)=$FN($P(KMPRNP(1),U,I),"",2)
"RTN","KMPRBD03",73,0)
 ..; subscript 3 - entire non-workday time (NW)
"RTN","KMPRBD03",74,0)
 ..E  S FDA($J,8971.1,"+1,",3+J)=$FN($P(KMPRNP(1),U,I),"",2)
"RTN","KMPRBD03",75,0)
 ;
"RTN","KMPRBD03",76,0)
 ;--Populate workday and non-workday hourly occurrence and user counts
"RTN","KMPRBD03",77,0)
 ; non-workday is considered non-prime time
"RTN","KMPRBD03",78,0)
 F I=1:1:24 S J=I*.001 D
"RTN","KMPRBD03",79,0)
 .;
"RTN","KMPRBD03",80,0)
 .; subscript 1.1 - workday (WD) hourly occurrence counts
"RTN","KMPRBD03",81,0)
 .I $P($G(KMPRPT(1.1)),U,I)'="" D 
"RTN","KMPRBD03",82,0)
 ..S FDA($J,8971.1,"+1,",1.1+J)=$P(KMPRPT(1.1),U,I)
"RTN","KMPRBD03",83,0)
 .;
"RTN","KMPRBD03",84,0)
 .; subscript 1.2 - workday (WD) hourly user counts
"RTN","KMPRBD03",85,0)
 .I $P($G(KMPRPT(1.2)),U,I)'="" D
"RTN","KMPRBD03",86,0)
 ..S FDA($J,8971.1,"+1,",1.2+J)=$P(KMPRPT(1.2),U,I)
"RTN","KMPRBD03",87,0)
 .;
"RTN","KMPRBD03",88,0)
 .; subscript 2.1 - non-workday (NW) hourly occurrence counts
"RTN","KMPRBD03",89,0)
 .I $P($G(KMPRNP(1.1)),U,I)'="" D
"RTN","KMPRBD03",90,0)
 ..S FDA($J,8971.1,"+1,",2.1+J)=$P(KMPRNP(1.1),U,I)
"RTN","KMPRBD03",91,0)
 .;
"RTN","KMPRBD03",92,0)
 .; subscript 2.2 - non-workday (NW) hourly user counts
"RTN","KMPRBD03",93,0)
 .I $P($G(KMPRNP(1.2)),U,I)'="" D
"RTN","KMPRBD03",94,0)
 ..S FDA($J,8971.1,"+1,",2.2+J)=$P(KMPRNP(1.2),U,I)
"RTN","KMPRBD03",95,0)
 ;
"RTN","KMPRBD03",96,0)
 ; update file 8971.1
"RTN","KMPRBD03",97,0)
 D UPDATE^DIE("","FDA($J)","ZIEN","MESSAGE")
"RTN","KMPRBD03",98,0)
 ; if error message
"RTN","KMPRBD03",99,0)
 I $D(MESSAGE) S KMPROK=0 D MSG^DIALOG("A",.KMPRMSG,60,10,"MESSAGE")
"RTN","KMPRBD03",100,0)
 ;
"RTN","KMPRBD03",101,0)
 Q
"RTN","KMPRBD03",102,0)
 ;
"RTN","KMPRBD03",103,0)
RUMDESIG(KMPROPT) ;-- extrinsic function - determine rum designation
"RTN","KMPRBD03",104,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",105,0)
 ; KMPROPT... Option name
"RTN","KMPRBD03",106,0)
 ;
"RTN","KMPRBD03",107,0)
 ; Return: RUM Designation (see field #.08 RUM DESIGNATION in file
"RTN","KMPRBD03",108,0)
 ;         #8971.1)
"RTN","KMPRBD03",109,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",110,0)
 ;
"RTN","KMPRBD03",111,0)
 ; 5 = other
"RTN","KMPRBD03",112,0)
 Q:$G(KMPROPT)="" 5
"RTN","KMPRBD03",113,0)
 ; 1 = taskman
"RTN","KMPRBD03",114,0)
 Q:KMPROPT="$AFTR ZTMS$"!(KMPROPT="$STRT ZTMS$")!($E(KMPROPT)="!") 1
"RTN","KMPRBD03",115,0)
 ; 3 = broker
"RTN","KMPRBD03",116,0)
 Q:$E(KMPROPT)="`" 3
"RTN","KMPRBD03",117,0)
 ; 4 = users
"RTN","KMPRBD03",118,0)
 Q:$E(KMPROPT)="#" 4
"RTN","KMPRBD03",119,0)
 ; 2 - option
"RTN","KMPRBD03",120,0)
 Q 2
"RTN","KMPRBD03",121,0)
 ;
"RTN","KMPRBD03",122,0)
OPTION(KMPROPT) ;-- extrinsic function - option name
"RTN","KMPRBD03",123,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",124,0)
 ; KMPROPT... Option name as it appears from ^KMPTMP("KMPR","DLY")
"RTN","KMPRBD03",125,0)
 ;
"RTN","KMPRBD03",126,0)
 ; Return: Option name with extraneous characters removed
"RTN","KMPRBD03",127,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD03",128,0)
 ;
"RTN","KMPRBD03",129,0)
 Q:$G(KMPROPT)="" ""
"RTN","KMPRBD03",130,0)
 Q:$E(KMPROPT)="!" $E(KMPROPT,2,999)
"RTN","KMPRBD03",131,0)
 ; rpc
"RTN","KMPRBD03",132,0)
 Q:$E(KMPROPT)="`" ""
"RTN","KMPRBD03",133,0)
 Q KMPROPT
"RTN","KMPRBD04")
0^23^B32011228
"RTN","KMPRBD04",1,0)
KMPRBD04 ;OAK/RAK - RUM Data Compression ;5/28/03  08:45
"RTN","KMPRBD04",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRBD04",3,0)
 ;
"RTN","KMPRBD04",4,0)
 ; Background Driver (cont.)
"RTN","KMPRBD04",5,0)
 ;
"RTN","KMPRBD04",6,0)
WEEKLY(KMPRDT) ;-- compress daily stats to weekly
"RTN","KMPRBD04",7,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD04",8,0)
 ; KMPRDT... Compression date in internal fileman formt.  This date
"RTN","KMPRBD04",9,0)
 ;           must be a Sunday.  It represents the date from which the
"RTN","KMPRBD04",10,0)
 ;           previous weeks data should be compressed. 
"RTN","KMPRBD04",11,0)
 ;           Example: if KMPRDT = 2981011  then compression will begin
"RTN","KMPRBD04",12,0)
 ;                    on 2981010 (KMPRDT-1)
"RTN","KMPRBD04",13,0)
 ;
"RTN","KMPRBD04",14,0)
 ; Every Sunday compress the daily stats in file #8971.1 into weekly
"RTN","KMPRBD04",15,0)
 ; and upload the data to the CM RUM National Database
"RTN","KMPRBD04",16,0)
 ;
"RTN","KMPRBD04",17,0)
 ; ^TMP($J)............. temporary storage for RUM data
"RTN","KMPRBD04",18,0)
 ; ^TMP("KMPR PROC",$J). entries that have been processed and will be
"RTN","KMPRBD04",19,0)
 ;                        updated as 'send to national dabase'
"RTN","KMPRBD04",20,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRBD04",21,0)
 ;
"RTN","KMPRBD04",22,0)
 Q:'$G(KMPRDT)
"RTN","KMPRBD04",23,0)
 ;
"RTN","KMPRBD04",24,0)
 N DATA,DATE,DELDATE,END,HOURS,I,IEN,J,NODE,OPTION,SITE,START
"RTN","KMPRBD04",25,0)
 ;
"RTN","KMPRBD04",26,0)
 ; quit if not sunday
"RTN","KMPRBD04",27,0)
 Q:$$DOW^XLFDT(KMPRDT,1)
"RTN","KMPRBD04",28,0)
 ;
"RTN","KMPRBD04",29,0)
 K ^TMP($J),^TMP("KMPR PROC",$J)
"RTN","KMPRBD04",30,0)
 ;
"RTN","KMPRBD04",31,0)
 ; site info
"RTN","KMPRBD04",32,0)
 S SITE=$$SITE^VASITE Q:SITE=""
"RTN","KMPRBD04",33,0)
 ;
"RTN","KMPRBD04",34,0)
 S DATE=KMPRDT
"RTN","KMPRBD04",35,0)
 S (START,END)=""
"RTN","KMPRBD04",36,0)
 ;
"RTN","KMPRBD04",37,0)
 ; date to begin deletion
"RTN","KMPRBD04",38,0)
 S DELDATE=$$FMADD^XLFDT(KMPRDT,-14)
"RTN","KMPRBD04",39,0)
 ;
"RTN","KMPRBD04",40,0)
 W:'$D(ZTQUEUED) !,"Compressing data into weekly format..."
"RTN","KMPRBD04",41,0)
 ; reverse $order to get previous dates
"RTN","KMPRBD04",42,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE),-1) Q:'DATE  D 
"RTN","KMPRBD04",43,0)
 .; if DATE is saturday set START and END dates and kill ^TMP($J)
"RTN","KMPRBD04",44,0)
 .I $$DOW^XLFDT(DATE,1)=6 D 
"RTN","KMPRBD04",45,0)
 ..S END=DATE,START=$$FMADD^XLFDT(DATE,-6)
"RTN","KMPRBD04",46,0)
 ..K ^TMP($J)
"RTN","KMPRBD04",47,0)
 .Q:'START
"RTN","KMPRBD04",48,0)
 .S IEN=0
"RTN","KMPRBD04",49,0)
 .F  S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D
"RTN","KMPRBD04",50,0)
 ..;
"RTN","KMPRBD04",51,0)
 ..Q:'$D(^KMPR(8971.1,IEN,0))
"RTN","KMPRBD04",52,0)
 ..;
"RTN","KMPRBD04",53,0)
 ..; data nodes into DATA() array
"RTN","KMPRBD04",54,0)
 ..S DATA(0)=^KMPR(8971.1,IEN,0),DATA(1)=$G(^(1)),DATA(1.1)=$G(^(1.1)),DATA(1.2)=$G(^(1.2)),DATA(2)=$G(^(2)),DATA(2.1)=$G(^(2.1)),DATA(2.2)=$G(^(2.2)),DATA(3)=$G(^(3))
"RTN","KMPRBD04",55,0)
 ..;
"RTN","KMPRBD04",56,0)
 ..; quit if data has already been sent to national database
"RTN","KMPRBD04",57,0)
 ..Q:$P(DATA(0),U,2)
"RTN","KMPRBD04",58,0)
 ..;
"RTN","KMPRBD04",59,0)
 ..; cpu node
"RTN","KMPRBD04",60,0)
 ..S NODE=$P(DATA(0),U,3) Q:NODE=""
"RTN","KMPRBD04",61,0)
 ..;
"RTN","KMPRBD04",62,0)
 ..; option
"RTN","KMPRBD04",63,0)
 ..S OPTION=$P(DATA(0),U,4)
"RTN","KMPRBD04",64,0)
 ..; rpc
"RTN","KMPRBD04",65,0)
 ..S:OPTION="" OPTION=$P(DATA(0),U,7)
"RTN","KMPRBD04",66,0)
 ..; hl7
"RTN","KMPRBD04",67,0)
 ..S:OPTION="" OPTION=$P(DATA(0),U,9)
"RTN","KMPRBD04",68,0)
 ..;
"RTN","KMPRBD04",69,0)
 ..Q:OPTION=""
"RTN","KMPRBD04",70,0)
 ..;
"RTN","KMPRBD04",71,0)
 ..; OPTION = OptionName^ProtocolName
"RTN","KMPRBD04",72,0)
 ..S $P(OPTION,U,2)=$P(DATA(0),U,5)
"RTN","KMPRBD04",73,0)
 ..;
"RTN","KMPRBD04",74,0)
 ..S ^TMP($J,START,NODE,OPTION,0)=DATA(0)
"RTN","KMPRBD04",75,0)
 ..; change first piece to starting date (START)
"RTN","KMPRBD04",76,0)
 ..S $P(^TMP($J,START,NODE,OPTION,0),U)=START
"RTN","KMPRBD04",77,0)
 ..; second piece not applicable to national database
"RTN","KMPRBD04",78,0)
 ..S $P(^TMP($J,START,NODE,OPTION,0),U,2)=""
"RTN","KMPRBD04",79,0)
 ..; EndingDate^SiteName^SiteNumber
"RTN","KMPRBD04",80,0)
 ..S ^TMP($J,START,NODE,OPTION,99)=END_U_$P(SITE,U,2)_U_$P(SITE,U,3)
"RTN","KMPRBD04",81,0)
 ..;
"RTN","KMPRBD04",82,0)
 ..; add data to get weekly totals
"RTN","KMPRBD04",83,0)
 ..F I=1,1.1,1.2,2,2.1,2.2,3 I DATA(I)]"" D 
"RTN","KMPRBD04",84,0)
 ...; if subscript 1 or 2 or 3 ('I#1) add pieces 1 - 8
"RTN","KMPRBD04",85,0)
 ...; else add pieces 1 - 24
"RTN","KMPRBD04",86,0)
 ...F J=1:1:$S('(I#1):8,1:24) D 
"RTN","KMPRBD04",87,0)
 ....S $P(^TMP($J,START,NODE,OPTION,I),U,J)=$P($G(^TMP($J,START,NODE,OPTION,I)),U,J)+$P(DATA(I),U,J)
"RTN","KMPRBD04",88,0)
 ....; update "HOURS" subscript
"RTN","KMPRBD04",89,0)
 ....S:(I#1)&($P(DATA(I),U,J)) $P(^KMPTMP("KMPR","HOURS",DATE,NODE),U,J)=1
"RTN","KMPRBD04",90,0)
 ..;
"RTN","KMPRBD04",91,0)
 ..; back to IEN level
"RTN","KMPRBD04",92,0)
 ..; add to processed array
"RTN","KMPRBD04",93,0)
 ..S ^TMP("KMPR PROC",$J,IEN)=""
"RTN","KMPRBD04",94,0)
 .;
"RTN","KMPRBD04",95,0)
 .; back to DATE level
"RTN","KMPRBD04",96,0)
 .; if START then transmit data
"RTN","KMPRBD04",97,0)
 .I DATE=START I $D(^TMP($J)) D TRANSMIT K ^TMP($J)
"RTN","KMPRBD04",98,0)
 ;
"RTN","KMPRBD04",99,0)
 ; transmit data to national database
"RTN","KMPRBD04",100,0)
 W:'$D(ZTQUEUED) !,"Transmitting data to national database..."
"RTN","KMPRBD04",101,0)
 D:$D(^TMP($J)) TRANSMIT
"RTN","KMPRBD04",102,0)
 K ^TMP($J)
"RTN","KMPRBD04",103,0)
 ;
"RTN","KMPRBD04",104,0)
 ; update field .02 (SENT TO CM NATIONAL DATABASE) to 'YES' for all
"RTN","KMPRBD04",105,0)
 ; processed entries
"RTN","KMPRBD04",106,0)
 W:'$D(ZTQUEUED) !,"Updating records to reflect transmission..."
"RTN","KMPRBD04",107,0)
 S IEN=0
"RTN","KMPRBD04",108,0)
 F  S IEN=$O(^TMP("KMPR PROC",$J,IEN)) Q:'IEN  D 
"RTN","KMPRBD04",109,0)
 .K FDA,ERROR
"RTN","KMPRBD04",110,0)
 .S FDA($J,8971.1,IEN_",",.02)=1
"RTN","KMPRBD04",111,0)
 .D FILE^DIE("","FDA($J)","ERROR")
"RTN","KMPRBD04",112,0)
 K ^TMP("KMPR PROC",$J)
"RTN","KMPRBD04",113,0)
 ;
"RTN","KMPRBD04",114,0)
 ; leave two complete weeks of data in file #8971.1
"RTN","KMPRBD04",115,0)
 D PURGE^KMPRUTL3(DELDATE,1)
"RTN","KMPRBD04",116,0)
 ;
"RTN","KMPRBD04",117,0)
 Q
"RTN","KMPRBD04",118,0)
 ;
"RTN","KMPRBD04",119,0)
TRANSMIT ;-- format ^TMP($J) data, put into e-mail and send to cm.
"RTN","KMPRBD04",120,0)
 ;
"RTN","KMPRBD04",121,0)
 Q:'$D(^TMP($J))
"RTN","KMPRBD04",122,0)
 ;
"RTN","KMPRBD04",123,0)
 N HRSDAYS,I,IEN,LN,N,O,S,XMSUB,X,XMTEXT,XMY,XMZ,Y,Z
"RTN","KMPRBD04",124,0)
 ;
"RTN","KMPRBD04",125,0)
 K ^TMP("KMPRBD04-3",$J)
"RTN","KMPRBD04",126,0)
 ;
"RTN","KMPRBD04",127,0)
 S LN=1
"RTN","KMPRBD04",128,0)
 ; version and patch info and weekly background info
"RTN","KMPRBD04",129,0)
 S Z=$G(^KMPTMP("KMPR","BACKGROUND","WEEKLY","TOTAL","START"))_"^"_$G(^("STOP"))_"^"_$G(^("DELTA"))
"RTN","KMPRBD04",130,0)
 S ^TMP("KMPRBD04-3",$J,LN)="VERSION="_$$VERSION^KMPRUTL_"^"_Z
"RTN","KMPRBD04",131,0)
 ;
"RTN","KMPRBD04",132,0)
 ; get system information
"RTN","KMPRBD04",133,0)
 S LN=LN+1
"RTN","KMPRBD04",134,0)
 S ^TMP("KMPRBD04-3",$J,LN)="SYSINFO="_$$SYSINFO^KMPDUTL1()
"RTN","KMPRBD04",135,0)
 ;
"RTN","KMPRBD04",136,0)
 ; get number of days/hours data for the specified date range
"RTN","KMPRBD04",137,0)
 D HRSDAYS^KMPRUTL3(START,END,1,.HRSDAYS)
"RTN","KMPRBD04",138,0)
 ;
"RTN","KMPRBD04",139,0)
 ; if ^KMPTMP("KMPR","HOURS","START") exists then this is the first time
"RTN","KMPRBD04",140,0)
 ; the "HOURS" subscript is being accessed.  chances are this is only
"RTN","KMPRBD04",141,0)
 ; partial data, so it should be ignored.
"RTN","KMPRBD04",142,0)
 I $G(^KMPTMP("KMPR","HOURS","START"))&($D(HRSDAYS)) D 
"RTN","KMPRBD04",143,0)
 .K HRSDAYS,^KMPTMP("KMPR","HOURS","START")
"RTN","KMPRBD04",144,0)
 ;
"RTN","KMPRBD04",145,0)
 I $D(HRSDAYS) S S=0 D 
"RTN","KMPRBD04",146,0)
 .F  S S=$O(HRSDAYS(S)) Q:'S  S N="" D 
"RTN","KMPRBD04",147,0)
 ..F  S N=$O(HRSDAYS(S,N)) Q:N=""  D 
"RTN","KMPRBD04",148,0)
 ...S LN=LN+1
"RTN","KMPRBD04",149,0)
 ...; StartDate^Node^EndDate^PTDays^PTHours^NPTDays^NPTHours
"RTN","KMPRBD04",150,0)
 ...; ... ^WDDays^WDHours^NWDays^NWHours
"RTN","KMPRBD04",151,0)
 ...S ^TMP("KMPRBD04-3",$J,LN)="HRSDAYS="_START_"^"_N_"^"_END_"^"_HRSDAYS(S,N)
"RTN","KMPRBD04",152,0)
 ;
"RTN","KMPRBD04",153,0)
 ; reformat so that data is in ^TMP("KMPR UPLOAD",$J,LN)= format.
"RTN","KMPRBD04",154,0)
 S IEN=0,S=""
"RTN","KMPRBD04",155,0)
 F  S S=$O(^TMP($J,S)) Q:S=""  S N="" D 
"RTN","KMPRBD04",156,0)
 .F  S N=$O(^TMP($J,S,N)) Q:N=""  S O="" D 
"RTN","KMPRBD04",157,0)
 ..F  S O=$O(^TMP($J,S,N,O)) Q:O=""  S I="",IEN=IEN+1 D 
"RTN","KMPRBD04",158,0)
 ...F  S I=$O(^TMP($J,S,N,O,I)) Q:I=""  D 
"RTN","KMPRBD04",159,0)
 ....S LN=LN+1
"RTN","KMPRBD04",160,0)
 ....S ^TMP("KMPRBD04-3",$J,LN)=IEN_","_I_")="_^TMP($J,S,N,O,I)
"RTN","KMPRBD04",161,0)
 ;
"RTN","KMPRBD04",162,0)
 ; quit if no data to transmit.
"RTN","KMPRBD04",163,0)
 Q:'$D(^TMP("KMPRBD04-3",$J))
"RTN","KMPRBD04",164,0)
 ; send packman message.
"RTN","KMPRBD04",165,0)
 S XMTEXT="^TMP(""KMPRBD04-3"","_$J_","
"RTN","KMPRBD04",166,0)
 S XMSUB="RUM DATA~"_$P(SITE,U,2)_" ("_$P(SITE,U,3)_")~"_$$FMTE^XLFDT(START)_"~"_$P($$VERSION^KMPRUTL,U)
"RTN","KMPRBD04",167,0)
 S XMY("S.KMP2-RUM-SERVER@FO-ALBANY.MED.VA.GOV")=""
"RTN","KMPRBD04",168,0)
 S XMY("CAPACITY,MANAGEMENT@FO-ALBANY.MED.VA.GOV")=""
"RTN","KMPRBD04",169,0)
 D ^XMD
"RTN","KMPRBD04",170,0)
 W:'$D(ZTQUEUED) !,"Message #",$G(XMZ)," sent..."
"RTN","KMPRBD04",171,0)
 K ^TMP("KMPRBD04-3",$J)
"RTN","KMPRBD04",172,0)
 ;
"RTN","KMPRBD04",173,0)
 Q
"RTN","KMPRENV")
1^4
"RTN","KMPRP1")
0^5^B20246537
"RTN","KMPRP1",1,0)
KMPRP1 ;OAK/RAK - RUM Data by Option/Protocol/RPC ;5/28/03  08:47
"RTN","KMPRP1",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRP1",3,0)
EN ;-- entry point.
"RTN","KMPRP1",4,0)
 ;
"RTN","KMPRP1",5,0)
 N %ZIS,CONT,IORVOFF,IORVON,KMPRDATE,KMPROPR,KMPROPT,OUT,POP
"RTN","KMPRP1",6,0)
 N X,Y,ZTDESC,ZTRTN,ZTSAVE,ZTSK
"RTN","KMPRP1",7,0)
 ;
"RTN","KMPRP1",8,0)
 D ZIS^KMPRUTL
"RTN","KMPRP1",9,0)
 S OUT=0
"RTN","KMPRP1",10,0)
 F  D  Q:OUT
"RTN","KMPRP1",11,0)
 .W @IOF,!,?30,IORVON," RUM Data by Option/Protocol/RPC ",IORVOFF,!
"RTN","KMPRP1",12,0)
 .S KMPROPR=$$OPR I 'KMPROPR S OUT=1 Q
"RTN","KMPRP1",13,0)
 .; select option, protocol or rpc entry
"RTN","KMPRP1",14,0)
 .S KMPROPT=$$OPRSEL(KMPROPR) Q:'KMPROPT
"RTN","KMPRP1",15,0)
 .; determine start date from file 8971.1
"RTN","KMPRP1",16,0)
 .D RUMDATES^KMPRUTL(.KMPRDATE) Q:'KMPRDATE
"RTN","KMPRP1",17,0)
 .; select output device.
"RTN","KMPRP1",18,0)
 .S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPRP1",19,0)
 .W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPRP1",20,0)
 .; if queued.
"RTN","KMPRP1",21,0)
 .I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPRP1",22,0)
 ..S ZTDESC="RUM Data by Option for '"_$P(KMPROPT,U,2)_"'."
"RTN","KMPRP1",23,0)
 ..S ZTRTN="EN1^KMPRP1"
"RTN","KMPRP1",24,0)
 ..S ZTSAVE("KMPRDATE")="",ZTSAVE("KMPROPR")="",ZTSAVE("KMPROPT")=""
"RTN","KMPRP1",25,0)
 ..D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPRP1",26,0)
 ..D EXIT
"RTN","KMPRP1",27,0)
 .;
"RTN","KMPRP1",28,0)
 .; if output to terminal display message.
"RTN","KMPRP1",29,0)
 .W:$E(IOST,1,2)="C-" !?3,"...compiling data..."
"RTN","KMPRP1",30,0)
 .D EN1
"RTN","KMPRP1",31,0)
 Q
"RTN","KMPRP1",32,0)
 ;
"RTN","KMPRP1",33,0)
EN1 ;-- entry point from taskman.
"RTN","KMPRP1",34,0)
 ;
"RTN","KMPRP1",35,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRP1",36,0)
 Q:'$G(KMPROPR)
"RTN","KMPRP1",37,0)
 Q:$G(KMPROPT)=""
"RTN","KMPRP1",38,0)
 ;
"RTN","KMPRP1",39,0)
 N ELEMENT,KMPRARRY,KMPRDAYS
"RTN","KMPRP1",40,0)
 ;
"RTN","KMPRP1",41,0)
 ; set elements data into ELEMENT() array.
"RTN","KMPRP1",42,0)
 D ELEARRY^KMPRUTL("ELEMENT") Q:'$D(ELEMENT)
"RTN","KMPRP1",43,0)
 S KMPRARRY=$NA(^TMP("KMPR OPT DATA",$J))
"RTN","KMPRP1",44,0)
 K @KMPRARRY
"RTN","KMPRP1",45,0)
 D DATA,PRINT,EXIT
"RTN","KMPRP1",46,0)
 K @KMPRARRY
"RTN","KMPRP1",47,0)
 ;
"RTN","KMPRP1",48,0)
 Q
"RTN","KMPRP1",49,0)
 ;
"RTN","KMPRP1",50,0)
DATA ;-- set data into KMPRARRY
"RTN","KMPRP1",51,0)
 Q:'$D(ELEMENT)
"RTN","KMPRP1",52,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRP1",53,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRP1",54,0)
 Q:'$G(KMPROPR)
"RTN","KMPRP1",55,0)
 Q:$G(KMPROPT)=""
"RTN","KMPRP1",56,0)
 ;
"RTN","KMPRP1",57,0)
 N DATE,END,I,IEN,OPTION,START
"RTN","KMPRP1",58,0)
 ;
"RTN","KMPRP1",59,0)
 ; start and end dates.
"RTN","KMPRP1",60,0)
 S START=$P(KMPRDATE,U),END=$P(KMPRDATE,U,2)
"RTN","KMPRP1",61,0)
 S DATE=START-.1,KMPRDAYS=0
"RTN","KMPRP1",62,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE)) Q:'DATE!(DATE>END)  D 
"RTN","KMPRP1",63,0)
 .S IEN=0,KMPRDAYS=KMPRDAYS+1
"RTN","KMPRP1",64,0)
 .F  S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D 
"RTN","KMPRP1",65,0)
 ..Q:'$D(^KMPR(8971.1,IEN,0))  S DATA(0)=^(0),DATA(1)=$G(^(1)),DATA(2)=$G(^(2))
"RTN","KMPRP1",66,0)
 ..S OPTION=$$OPRCHK(KMPROPR,KMPROPT,DATA(0)) Q:OPTION=""
"RTN","KMPRP1",67,0)
 ..F I=1:1:8 D 
"RTN","KMPRP1",68,0)
 ...S $P(@KMPRARRY@(OPTION),U,I)=$P($G(@KMPRARRY@(OPTION)),U,I)+$P(DATA(1),U,I)
"RTN","KMPRP1",69,0)
 ...S $P(@KMPRARRY@(OPTION),U,I)=$P($G(@KMPRARRY@(OPTION)),U,I)+$P(DATA(2),U,I)
"RTN","KMPRP1",70,0)
 ;
"RTN","KMPRP1",71,0)
 Q
"RTN","KMPRP1",72,0)
 ;
"RTN","KMPRP1",73,0)
EXIT ;
"RTN","KMPRP1",74,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPRP1",75,0)
 D ^%ZISC
"RTN","KMPRP1",76,0)
 K KMPUDATE,KMPUNAM
"RTN","KMPRP1",77,0)
 ;
"RTN","KMPRP1",78,0)
 Q
"RTN","KMPRP1",79,0)
 ;
"RTN","KMPRP1",80,0)
PRINT ;-- print data from KMPRARRY.
"RTN","KMPRP1",81,0)
 Q:'$D(ELEMENT)
"RTN","KMPRP1",82,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRP1",83,0)
 ;
"RTN","KMPRP1",84,0)
 U IO
"RTN","KMPRP1",85,0)
 ;
"RTN","KMPRP1",86,0)
 N DATA,OCCUR,I,NUMBER,PIECE,SITE
"RTN","KMPRP1",87,0)
 ;
"RTN","KMPRP1",88,0)
 ; facility name.
"RTN","KMPRP1",89,0)
 S SITE=$$SITE^VASITE
"RTN","KMPRP1",90,0)
 S SITE=$P(SITE,U,2)_" ("_$P(SITE,U,3)_")"
"RTN","KMPRP1",91,0)
 ;
"RTN","KMPRP1",92,0)
 I '$D(@KMPRARRY) D  Q
"RTN","KMPRP1",93,0)
 .D HDR
"RTN","KMPRP1",94,0)
 .W !!!?28,"<<<No Data to Report>>>"
"RTN","KMPRP1",95,0)
 .W !! D CONTINUE^KMPRUTL("Press RETURN to continue",.CONT)
"RTN","KMPRP1",96,0)
 ;
"RTN","KMPRP1",97,0)
 S OPTION=""
"RTN","KMPRP1",98,0)
 F  S OPTION=$O(@KMPRARRY@(OPTION)) Q:OPTION=""  D 
"RTN","KMPRP1",99,0)
 .D HDR S DATA=@KMPRARRY@(OPTION),I=0,OCCUR=$P(DATA,U,8)
"RTN","KMPRP1",100,0)
 .F  S I=$O(ELEMENT(I)) Q:'I  D 
"RTN","KMPRP1",101,0)
 ..W !,$P(ELEMENT(I),U) S PIECE=$P(ELEMENT(I),U,2)
"RTN","KMPRP1",102,0)
 ..W $$REPEAT^XLFSTR(".",25-$X)
"RTN","KMPRP1",103,0)
 ..S NUMBER=$P(DATA,U,PIECE)
"RTN","KMPRP1",104,0)
 ..; per occurrence.
"RTN","KMPRP1",105,0)
 ..W:PIECE'=8 ?28,$J($FN(NUMBER/OCCUR,",",$S(I<3:2,1:0)),$S(I<3:14,1:11))
"RTN","KMPRP1",106,0)
 ..W ?50,$J($FN(NUMBER,",",$S(I<3:2,1:0)),$S(I<3:18,1:15))
"RTN","KMPRP1",107,0)
 ;
"RTN","KMPRP1",108,0)
 W !! D CONTINUE^KMPRUTL("Press RETURN to continue",.CONT)
"RTN","KMPRP1",109,0)
 ;
"RTN","KMPRP1",110,0)
 Q
"RTN","KMPRP1",111,0)
 ;
"RTN","KMPRP1",112,0)
HDR ;
"RTN","KMPRP1",113,0)
 N TITLE
"RTN","KMPRP1",114,0)
 W:$Y @IOF
"RTN","KMPRP1",115,0)
 S TITLE="RUM Data for Option: "_$P(KMPROPT,U,2)
"RTN","KMPRP1",116,0)
 W !?(80-$L(TITLE)\2),TITLE
"RTN","KMPRP1",117,0)
 W !?(80-$L($G(SITE))\2),$G(SITE)
"RTN","KMPRP1",118,0)
 W !?23,"For "_$P($G(KMPRDATE),U,3)_" to "_$P($G(KMPRDATE),U,4)
"RTN","KMPRP1",119,0)
 W !
"RTN","KMPRP1",120,0)
 W !?28,"per Occurrence",?50,"         Totals"
"RTN","KMPRP1",121,0)
 W !
"RTN","KMPRP1",122,0)
 ;
"RTN","KMPRP1",123,0)
 Q
"RTN","KMPRP1",124,0)
 ;
"RTN","KMPRP1",125,0)
OPR() ;-- extrinsic function - select option, protocol or rpc
"RTN","KMPRP1",126,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",127,0)
 ; Return: 1 - Option
"RTN","KMPRP1",128,0)
 ;         2 - Protocol
"RTN","KMPRP1",129,0)
 ;         3 - RPC
"RTN","KMPRP1",130,0)
 ;        "" - No selection made
"RTN","KMPRP1",131,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",132,0)
 N DIR,X,Y
"RTN","KMPRP1",133,0)
 S DIR(0)="SO^1:Option;2:Protocol;3:RPC"
"RTN","KMPRP1",134,0)
 D ^DIR
"RTN","KMPRP1",135,0)
 Q $S(Y:Y_"^"_$G(Y(0)),1:"")
"RTN","KMPRP1",136,0)
 ;
"RTN","KMPRP1",137,0)
OPRCHK(OPR,OPT,DATA) ;-- extrinsic function - check to see if option, protocol or rpc matches
"RTN","KMPRP1",138,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",139,0)
 ; OPR.... Results from $$OPR above.
"RTN","KMPRP1",140,0)
 ; OPT.... Option, protocol or rpc name to be matched
"RTN","KMPRP1",141,0)
 ; DATA... Zero node of file 8971.1 (RESOURCE USAGE MONITOR)
"RTN","KMPRP1",142,0)
 ;
"RTN","KMPRP1",143,0)
 ; Return: OptionName - match
"RTN","KMPRP1",144,0)
 ;                 "" - no match
"RTN","KMPRP1",145,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",146,0)
 Q:$G(OPR)="" ""
"RTN","KMPRP1",147,0)
 Q:'OPR!($P(OPR,U,2)="") ""
"RTN","KMPRP1",148,0)
 Q:'$D(DATA) ""
"RTN","KMPRP1",149,0)
 Q:(+OPR)<1!((+OPR)>3) ""
"RTN","KMPRP1",150,0)
 N OPTION
"RTN","KMPRP1",151,0)
 ; option - piece 4, protocol - piece 5, rpc - piece7
"RTN","KMPRP1",152,0)
 S OPTION=$S((+OPR)=1:$P(DATA,U,4),(+OPR)=2:$P(DATA,U,5),1:$P(DATA,U,7))
"RTN","KMPRP1",153,0)
 Q $S(OPTION="":"",OPTION'=$P(OPT,U,2):"",1:OPTION)
"RTN","KMPRP1",154,0)
 ;
"RTN","KMPRP1",155,0)
OPRSEL(OPR) ;-- extrinsic function - select entry
"RTN","KMPRP1",156,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",157,0)
 ; OPT.... Results from $$OPR above.
"RTN","KMPRP1",158,0)
 ;
"RTN","KMPRP1",159,0)
 ; Return: IEN^Name - this will be from the Option file, Protocol file,
"RTN","KMPRP1",160,0)
 ;                    or RPC file, depending on the value of OPR.
"RTN","KMPRP1",161,0)
 ;         "" - no selection made
"RTN","KMPRP1",162,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP1",163,0)
 Q:'$G(OPR) ""
"RTN","KMPRP1",164,0)
 Q:OPR<1!(OPR>3) ""
"RTN","KMPRP1",165,0)
 N DIC,X,Y
"RTN","KMPRP1",166,0)
 ; 1 - option, 2 - protocol, 3 - rpc
"RTN","KMPRP1",167,0)
 S DIC=$S((+OPR)=1:19,(+OPR)=2:101,1:8994)
"RTN","KMPRP1",168,0)
 S DIC(0)="AEMQZ",DIC("A")="Select "_$P(OPR,U,2)_": "
"RTN","KMPRP1",169,0)
 W ! D ^DIC
"RTN","KMPRP1",170,0)
 Q $S(Y<0:"",1:+Y_"^"_Y(0,0))
"RTN","KMPRP2")
0^22^B42301428
"RTN","KMPRP2",1,0)
KMPRP2 ;OAK/KAK - RUM Hourly Occurrences Distribution ;5/28/03  08:57
"RTN","KMPRP2",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRP2",3,0)
 ;
"RTN","KMPRP2",4,0)
EN ;-- entry point
"RTN","KMPRP2",5,0)
 ;
"RTN","KMPRP2",6,0)
 N %ZIS,CONT,DATA,DIR,HR,IORVOFF,IORVON,KMPRDATE,KMPROPR,KMPROPT,OUT,POP
"RTN","KMPRP2",7,0)
 N STRT,USER,X,Y
"RTN","KMPRP2",8,0)
 ;
"RTN","KMPRP2",9,0)
 D ZIS^KMPRUTL
"RTN","KMPRP2",10,0)
 S OUT=0
"RTN","KMPRP2",11,0)
 F  D  Q:OUT
"RTN","KMPRP2",12,0)
 .W @IOF,!,?23,IORVON," Hourly Occurrence Distribution ",IORVOFF,!
"RTN","KMPRP2",13,0)
 .S KMPROPR=$$OPR
"RTN","KMPRP2",14,0)
 .I 'KMPROPR S OUT=1 Q
"RTN","KMPRP2",15,0)
 .;
"RTN","KMPRP2",16,0)
 .; select option, protocol or rpc entry
"RTN","KMPRP2",17,0)
 .S KMPROPT=$$OPRSEL(KMPROPR) Q:'KMPROPT
"RTN","KMPRP2",18,0)
 .;
"RTN","KMPRP2",19,0)
 .; determine date from file 8971.1
"RTN","KMPRP2",20,0)
 .S STRT=$O(^KMPR(8971.1,"B",0))
"RTN","KMPRP2",21,0)
 .S DIR(0)="DO^"_STRT_":"_DT
"RTN","KMPRP2",22,0)
 .S DIR("A")="Select DATE ",DIR("?")=" ",DIR("?",1)="Enter a date."
"RTN","KMPRP2",23,0)
 .W !
"RTN","KMPRP2",24,0)
 .D ^DIR
"RTN","KMPRP2",25,0)
 .I $D(DIRUT) Q
"RTN","KMPRP2",26,0)
 .S KMPRDATE=Y
"RTN","KMPRP2",27,0)
 .S $P(KMPRDATE,U,2)=$$FMTE^XLFDT(Y)
"RTN","KMPRP2",28,0)
 .;
"RTN","KMPRP2",29,0)
 .; select output device
"RTN","KMPRP2",30,0)
 .S %ZIS="Q",%ZIS("A")="Device: "
"RTN","KMPRP2",31,0)
 .W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPRP2",32,0)
 .; if queued
"RTN","KMPRP2",33,0)
 .I $D(IO("Q")) D  Q
"RTN","KMPRP2",34,0)
 ..N ZTDESC,ZTRTN,ZTSAVE
"RTN","KMPRP2",35,0)
 ..K IO("Q")
"RTN","KMPRP2",36,0)
 ..S ZTDESC="RUM Hourly Occurrence Distribution"
"RTN","KMPRP2",37,0)
 ..S ZTRTN="EN1^KMPRP2"
"RTN","KMPRP2",38,0)
 ..S ZTSAVE("KMPRDATE")="",ZTSAVE("KMPROPR")="",ZTSAVE("KMPROPT")=""
"RTN","KMPRP2",39,0)
 ..D ^%ZTLOAD
"RTN","KMPRP2",40,0)
 ..W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPRP2",41,0)
 ..D EXIT
"RTN","KMPRP2",42,0)
 .;
"RTN","KMPRP2",43,0)
 .D EN1
"RTN","KMPRP2",44,0)
 Q
"RTN","KMPRP2",45,0)
 ;
"RTN","KMPRP2",46,0)
EN1 ;-- entry point from taskman
"RTN","KMPRP2",47,0)
 ;
"RTN","KMPRP2",48,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRP2",49,0)
 Q:'$G(KMPROPR)
"RTN","KMPRP2",50,0)
 Q:$G(KMPROPT)=""
"RTN","KMPRP2",51,0)
 ;
"RTN","KMPRP2",52,0)
 D DATA,PRINT,EXIT
"RTN","KMPRP2",53,0)
 ;
"RTN","KMPRP2",54,0)
 Q
"RTN","KMPRP2",55,0)
 ;
"RTN","KMPRP2",56,0)
DATA ;-- set data
"RTN","KMPRP2",57,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRP2",58,0)
 Q:'$G(KMPROPR)
"RTN","KMPRP2",59,0)
 Q:$G(KMPROPT)=""
"RTN","KMPRP2",60,0)
 ;
"RTN","KMPRP2",61,0)
 N DATA,DOT,END,I,IEN,JOB,NODE,OCCUR,OPT,OPT1,OPTION,PT
"RTN","KMPRP2",62,0)
 K ^TMP($J)
"RTN","KMPRP2",63,0)
 ;
"RTN","KMPRP2",64,0)
 S CONT=1,DOT=0
"RTN","KMPRP2",65,0)
 W:$E(IOST,1,2)="C-" !?2,"Compiling data..."
"RTN","KMPRP2",66,0)
 ;
"RTN","KMPRP2",67,0)
 I +KMPRDATE=DT D TODAY,EXIT Q
"RTN","KMPRP2",68,0)
 ;
"RTN","KMPRP2",69,0)
 S IEN=0
"RTN","KMPRP2",70,0)
 F  S IEN=$O(^KMPR(8971.1,"B",+KMPRDATE,IEN)) Q:'IEN  D 
"RTN","KMPRP2",71,0)
 .S DOT=DOT+1
"RTN","KMPRP2",72,0)
 .W:'(DOT#100)&($E(IOST,1,2)="C-") "."
"RTN","KMPRP2",73,0)
 .;
"RTN","KMPRP2",74,0)
 .Q:'$D(^KMPR(8971.1,IEN,0))
"RTN","KMPRP2",75,0)
 .;
"RTN","KMPRP2",76,0)
 .S DATA(0)=^KMPR(8971.1,IEN,0),NODE=$P(DATA(0),U,3)
"RTN","KMPRP2",77,0)
 .;I DATA(0)["SCMC PCMM GUI WORKSTATION" W DATA(0),!
"RTN","KMPRP2",78,0)
 .S OPTION=$$OPRCHK(KMPROPR,KMPROPT,DATA(0))
"RTN","KMPRP2",79,0)
 .Q:OPTION=""
"RTN","KMPRP2",80,0)
 .;
"RTN","KMPRP2",81,0)
 .S DATA(1.1)=$G(^KMPR(8971.1,IEN,1.1)),DATA(1.2)=$G(^(1.2)),DATA(2.1)=$G(^(2.1)),DATA(2.2)=$G(^(2.2))
"RTN","KMPRP2",82,0)
 .;I DATA(0)["SCMC PCMM GUI WORKSTATION" W DATA(0),!
"RTN","KMPRP2",83,0)
 .;
"RTN","KMPRP2",84,0)
 .F I=1:1:24 D
"RTN","KMPRP2",85,0)
 ..S $P(^TMP($J,"HR",NODE),U,I)=$P($G(^TMP($J,"HR",NODE)),U,I)+$P(DATA(1.1),U,I)+$P(DATA(2.1),U,I)
"RTN","KMPRP2",86,0)
 ..S $P(^TMP($J,"HR",NODE,"USER"),U,I)=$P($G(^TMP($J,"HR",NODE,"USER")),U,I)+$P(DATA(1.2),U,I)+$P(DATA(2.2),U,I)
"RTN","KMPRP2",87,0)
 ;
"RTN","KMPRP2",88,0)
 Q
"RTN","KMPRP2",89,0)
 ;
"RTN","KMPRP2",90,0)
TODAY ;
"RTN","KMPRP2",91,0)
 ; 1 - option, 2 - protocol, 3 - rpc
"RTN","KMPRP2",92,0)
 I +KMPROPR=1 S OPT1=$P(KMPROPT,U,2)_"***"
"RTN","KMPRP2",93,0)
 I +KMPROPR=2 S OPT1="***"_$P(KMPROPT,U,2)
"RTN","KMPRP2",94,0)
 I +KMPROPR=3 S OPT1="`"_$P(KMPROPT,U,2)_"***"
"RTN","KMPRP2",95,0)
 ;
"RTN","KMPRP2",96,0)
 S NODE=""
"RTN","KMPRP2",97,0)
 F  S NODE=$O(^KMPTMP("KMPR","DLY",NODE)) Q:NODE=""  D
"RTN","KMPRP2",98,0)
 .S ^TMP($J,"HR",NODE)=""
"RTN","KMPRP2",99,0)
 .S OPT=""
"RTN","KMPRP2",100,0)
 .F  S OPT=$O(^KMPTMP("KMPR","DLY",NODE,+$H,OPT)) Q:OPT=""  D
"RTN","KMPRP2",101,0)
 ..S DOT=DOT+1
"RTN","KMPRP2",102,0)
 ..W:'(DOT#100)&($E(IOST,1,2)="C-") "."
"RTN","KMPRP2",103,0)
 ..;
"RTN","KMPRP2",104,0)
 ..I OPT[OPT1!((+KMPROPR=1)&(OPT[("!"_OPT1))) D
"RTN","KMPRP2",105,0)
 ...;W OPT,!
"RTN","KMPRP2",106,0)
 ...; if searching options do not count option***protocol
"RTN","KMPRP2",107,0)
 ...I (+KMPROPR=1)&($P(OPT,"***",2)'="") Q
"RTN","KMPRP2",108,0)
 ...;
"RTN","KMPRP2",109,0)
 ...S JOB=""
"RTN","KMPRP2",110,0)
 ...F  S JOB=$O(^KMPTMP("KMPR","DLY",NODE,+$H,OPT,JOB)) Q:JOB=""  D
"RTN","KMPRP2",111,0)
 ....S PT=""
"RTN","KMPRP2",112,0)
 ....F  S PT=$O(^KMPTMP("KMPR","DLY",NODE,+$H,OPT,JOB,PT)) Q:PT=""  S DATA=^(PT) D
"RTN","KMPRP2",113,0)
 .....F I=10:1:33 S OCCUR=$P(DATA,U,I) I +OCCUR D
"RTN","KMPRP2",114,0)
 ......S $P(^TMP($J,"HR",NODE),U,I-9)=$P(^TMP($J,"HR",NODE),U,I-9)+OCCUR
"RTN","KMPRP2",115,0)
 ......S $P(^TMP($J,"HR",NODE,"USER"),U,I-9)=$P($G(^TMP($J,"HR",NODE,"USER")),U,I-9)+1
"RTN","KMPRP2",116,0)
 ;
"RTN","KMPRP2",117,0)
 Q
"RTN","KMPRP2",118,0)
 ;
"RTN","KMPRP2",119,0)
EXIT ;
"RTN","KMPRP2",120,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPRP2",121,0)
 D ^%ZISC
"RTN","KMPRP2",122,0)
 K ^TMP($J)
"RTN","KMPRP2",123,0)
 ;
"RTN","KMPRP2",124,0)
 Q
"RTN","KMPRP2",125,0)
 ;
"RTN","KMPRP2",126,0)
PRINT ;-- print data
"RTN","KMPRP2",127,0)
 ;
"RTN","KMPRP2",128,0)
 U IO
"RTN","KMPRP2",129,0)
 ;
"RTN","KMPRP2",130,0)
 N LINE,NODE,NOWFM,NOWHR,OCCUR,SITE,TIME,TOTOCC,TOTUSR,USER
"RTN","KMPRP2",131,0)
 ;
"RTN","KMPRP2",132,0)
 ; facility name
"RTN","KMPRP2",133,0)
 S SITE=$$SITE^VASITE
"RTN","KMPRP2",134,0)
 S SITE=$P(SITE,U,2)_" ("_$P(SITE,U,3)_")"
"RTN","KMPRP2",135,0)
 ;
"RTN","KMPRP2",136,0)
 S $P(LINE,"=",IOM)="="
"RTN","KMPRP2",137,0)
 ;
"RTN","KMPRP2",138,0)
 D HDR
"RTN","KMPRP2",139,0)
 ;
"RTN","KMPRP2",140,0)
 I '$D(^TMP($J,"HR")) D  Q
"RTN","KMPRP2",141,0)
 .W !,?28,"<<<No Data to Report>>>",!!
"RTN","KMPRP2",142,0)
 .D CONTINUE^KMPRUTL("Press RETURN to continue",.CONT)
"RTN","KMPRP2",143,0)
 ;
"RTN","KMPRP2",144,0)
 I +KMPRDATE=DT D
"RTN","KMPRP2",145,0)
 .S NOWFM=$$HTFM^XLFDT($H)
"RTN","KMPRP2",146,0)
 .S NOWHR=+$E($P(NOWFM,".",2),1,2)
"RTN","KMPRP2",147,0)
 F TIME=0:1:23 D  Q:'CONT
"RTN","KMPRP2",148,0)
 .W ?2,$S(TIME<10:"0",1:""),TIME,?7
"RTN","KMPRP2",149,0)
 .I +KMPRDATE=DT I TIME>NOWHR D  Q
"RTN","KMPRP2",150,0)
 ..W ?10,"<<<No Data>>>",!
"RTN","KMPRP2",151,0)
 ..I $Y>(IOSL-3) D
"RTN","KMPRP2",152,0)
 ...D CONTINUE^KMPRUTL("Press RETURN to continue or '^' to exit",.CONT)
"RTN","KMPRP2",153,0)
 ...D:CONT HDR
"RTN","KMPRP2",154,0)
 .S NODE="",(TOTOCC,TOTUSR)=0
"RTN","KMPRP2",155,0)
 .F  S NODE=$O(^TMP($J,"HR",NODE)) Q:NODE=""  D
"RTN","KMPRP2",156,0)
 ..S OCCUR=$P(^TMP($J,"HR",NODE),U,TIME+1),TOTOCC=TOTOCC+OCCUR
"RTN","KMPRP2",157,0)
 ..S USER=$P($G(^TMP($J,"HR",NODE,"USER")),U,TIME+1),TOTUSR=TOTUSR+USER
"RTN","KMPRP2",158,0)
 ..W $J($FN(OCCUR,",",0),9)
"RTN","KMPRP2",159,0)
 .W $J($FN(TOTOCC,",",0),9),$J($FN(TOTUSR,",",0),9)
"RTN","KMPRP2",160,0)
 .I +KMPRDATE=DT I TIME=NOWHR W "  <<<Partial Data>>>"
"RTN","KMPRP2",161,0)
 .W !
"RTN","KMPRP2",162,0)
 .I $Y>(IOSL-3) D
"RTN","KMPRP2",163,0)
 ..D CONTINUE^KMPRUTL("Press RETURN to continue or '^' to exit",.CONT)
"RTN","KMPRP2",164,0)
 ..D:CONT HDR
"RTN","KMPRP2",165,0)
 ;
"RTN","KMPRP2",166,0)
 D:CONT CONTINUE^KMPRUTL("Press RETURN to continue",.CONT)
"RTN","KMPRP2",167,0)
 Q
"RTN","KMPRP2",168,0)
 ;
"RTN","KMPRP2",169,0)
HDR ;
"RTN","KMPRP2",170,0)
 N NODE,TITLE,X
"RTN","KMPRP2",171,0)
 S TITLE="Hourly Occurrence Distribution for "_$P(KMPROPT,U,2)
"RTN","KMPRP2",172,0)
 W:$Y @IOF W !
"RTN","KMPRP2",173,0)
 W ?(80-$L($G(SITE))\2),$G(SITE),!
"RTN","KMPRP2",174,0)
 W ?(80-$L(TITLE)\2),TITLE,!
"RTN","KMPRP2",175,0)
 W ?31,"For "_$P($G(KMPRDATE),U,2),!!
"RTN","KMPRP2",176,0)
 W LINE,!," Hour",?10
"RTN","KMPRP2",177,0)
 S NODE=""
"RTN","KMPRP2",178,0)
 F  S NODE=$O(^TMP($J,"HR",NODE)) Q:NODE=""  D
"RTN","KMPRP2",179,0)
 .W "  ",$S($E(NODE,1,3)=+NODE:" "_$E(NODE,$L(NODE)-2,$L(NODE)),1:$E(NODE,$L(NODE)-3,$L(NODE))),"   "
"RTN","KMPRP2",180,0)
 S X=$X
"RTN","KMPRP2",181,0)
 W " Total    Total",!
"RTN","KMPRP2",182,0)
 W ?X,"  Occ      User",!,LINE,!
"RTN","KMPRP2",183,0)
 ;
"RTN","KMPRP2",184,0)
 Q
"RTN","KMPRP2",185,0)
 ;
"RTN","KMPRP2",186,0)
OPR() ;-- extrinsic function - select option, protocol or rpc
"RTN","KMPRP2",187,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",188,0)
 ; Return: 1 - Option
"RTN","KMPRP2",189,0)
 ;         2 - Protocol
"RTN","KMPRP2",190,0)
 ;         3 - RPC
"RTN","KMPRP2",191,0)
 ;        "" - No selection made
"RTN","KMPRP2",192,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",193,0)
 N DIR,X,Y
"RTN","KMPRP2",194,0)
 ;
"RTN","KMPRP2",195,0)
 S DIR(0)="SO^1:Option/Task;2:Protocol;3:RPC"
"RTN","KMPRP2",196,0)
 D ^DIR
"RTN","KMPRP2",197,0)
 ;
"RTN","KMPRP2",198,0)
 Q $S(Y:Y_"^"_$G(Y(0)),1:"")
"RTN","KMPRP2",199,0)
 ;
"RTN","KMPRP2",200,0)
OPRCHK(OPR,OPT,DATA) ;-- extrinsic function
"RTN","KMPRP2",201,0)
 ;- check to see if option, protocol or rpc matches
"RTN","KMPRP2",202,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",203,0)
 ; OPR.... Results from $$OPR above
"RTN","KMPRP2",204,0)
 ; OPT.... Option, protocol or rpc name to be matched
"RTN","KMPRP2",205,0)
 ; DATA... Zero node of file 8971.1 (RESOURCE USAGE MONITOR)
"RTN","KMPRP2",206,0)
 ;
"RTN","KMPRP2",207,0)
 ; Return: OptionName - match
"RTN","KMPRP2",208,0)
 ;                 "" - no match
"RTN","KMPRP2",209,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",210,0)
 Q:$G(OPR)="" ""
"RTN","KMPRP2",211,0)
 Q:'OPR!($P(OPR,U,2)="") ""
"RTN","KMPRP2",212,0)
 Q:'$D(DATA) ""
"RTN","KMPRP2",213,0)
 Q:(+OPR)<1!((+OPR)>3) ""
"RTN","KMPRP2",214,0)
 ;
"RTN","KMPRP2",215,0)
 N OPTION
"RTN","KMPRP2",216,0)
 ;
"RTN","KMPRP2",217,0)
 ; option - piece 4, protocol - piece 5, rpc - piece 7
"RTN","KMPRP2",218,0)
 S OPTION=$S((+OPR=1):$P(DATA,U,4),(+OPR=2):$P(DATA,U,5),1:$P(DATA,U,7))
"RTN","KMPRP2",219,0)
 ;
"RTN","KMPRP2",220,0)
 Q $S(OPTION="":"",OPTION'=$P(OPT,U,2):"",(+OPR=1)&($P(DATA,U,5)'=""):"",1:OPTION)
"RTN","KMPRP2",221,0)
 ;
"RTN","KMPRP2",222,0)
OPRSEL(OPR) ;-- extrinsic function - select entry
"RTN","KMPRP2",223,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",224,0)
 ; OPT.... Results from $$OPR above
"RTN","KMPRP2",225,0)
 ;
"RTN","KMPRP2",226,0)
 ; Return: IEN^Name - this will be from the Option file, Protocol file,
"RTN","KMPRP2",227,0)
 ;                    or RPC file, depending on the value of OPR
"RTN","KMPRP2",228,0)
 ;         "" - no selection made
"RTN","KMPRP2",229,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRP2",230,0)
 Q:'$G(OPR) ""
"RTN","KMPRP2",231,0)
 Q:OPR<1!(OPR>3) ""
"RTN","KMPRP2",232,0)
 ;
"RTN","KMPRP2",233,0)
 N DIC,X,Y
"RTN","KMPRP2",234,0)
 ;
"RTN","KMPRP2",235,0)
 W !
"RTN","KMPRP2",236,0)
 ; 1 - option, 2 - protocol, 3 - rpc
"RTN","KMPRP2",237,0)
 S DIC=$S((+OPR)=1:19,(+OPR)=2:101,1:8994)
"RTN","KMPRP2",238,0)
 S DIC(0)="AEMQZ",DIC("A")="Select "_$P(OPR,U,2)_": "
"RTN","KMPRP2",239,0)
 D ^DIC
"RTN","KMPRP2",240,0)
 ;
"RTN","KMPRP2",241,0)
 Q $S(Y<0:"",1:+Y_"^"_Y(0,0))
"RTN","KMPRPG01")
0^6^B5597122
"RTN","KMPRPG01",1,0)
KMPRPG01 ;OAK/RAK - RUM Data for All Nodes (Graph) ;5/28/03  08:58
"RTN","KMPRPG01",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRPG01",3,0)
 ;
"RTN","KMPRPG01",4,0)
EN ;-- entry point.
"RTN","KMPRPG01",5,0)
 ;
"RTN","KMPRPG01",6,0)
 N DATES,DIR,ELEMENT,I,IORVOFF,IORVON,LHTIME,OPTIONS,OUT,TMP,X,Y
"RTN","KMPRPG01",7,0)
 ;
"RTN","KMPRPG01",8,0)
 D ZIS^KMPRUTL
"RTN","KMPRPG01",9,0)
 ; temporary global storage for stats.
"RTN","KMPRPG01",10,0)
 S TMP=$NA(^TMP("KMPR HR STATS",$J))
"RTN","KMPRPG01",11,0)
 S OUT=0
"RTN","KMPRPG01",12,0)
 F  D  Q:OUT
"RTN","KMPRPG01",13,0)
 .W @IOF,!?30,IORVON," Data for All Nodes (Graph) ",IORVOFF,!!
"RTN","KMPRPG01",14,0)
 .D GRPHMSG^KMPRUTL
"RTN","KMPRPG01",15,0)
 .; select element for display.
"RTN","KMPRPG01",16,0)
 .D ELEMENT^KMPRUTL(.Y) I 'Y S OUT=1 Q
"RTN","KMPRPG01",17,0)
 .S ELEMENT=Y_"^"_Y(0)
"RTN","KMPRPG01",18,0)
 .; get date range.
"RTN","KMPRPG01",19,0)
 .D RUMDATES^KMPRUTL(.DATES) Q:'DATES
"RTN","KMPRPG01",20,0)
 .; determine number of nodes.
"RTN","KMPRPG01",21,0)
 .S I=0,X=""
"RTN","KMPRPG01",22,0)
 .F  S X=$O(^KMPR(8971.1,"ANODE",X)) Q:X=""  S I=I+1
"RTN","KMPRPG01",23,0)
 .S OPTIONS="G" S:I<8 OPTIONS=OPTIONS_"D"
"RTN","KMPRPG01",24,0)
 .K @TMP
"RTN","KMPRPG01",25,0)
 .W !!?3,"compiling data for: "
"RTN","KMPRPG01",26,0)
 .; get data - display graph - cleanup.
"RTN","KMPRPG01",27,0)
 .D DATA,GRAPH,EXIT
"RTN","KMPRPG01",28,0)
 .K @TMP
"RTN","KMPRPG01",29,0)
 ;
"RTN","KMPRPG01",30,0)
 Q
"RTN","KMPRPG01",31,0)
 ;
"RTN","KMPRPG01",32,0)
DATA ;-- compile rum stats per node for selected element.
"RTN","KMPRPG01",33,0)
 Q:$G(TMP)=""
"RTN","KMPRPG01",34,0)
 Q:'$G(ELEMENT)
"RTN","KMPRPG01",35,0)
 Q:'$G(DATES)
"RTN","KMPRPG01",36,0)
 ;
"RTN","KMPRPG01",37,0)
 N DAYS,DOTS,I,J,KMPRAR,NODES
"RTN","KMPRPG01",38,0)
 ;
"RTN","KMPRPG01",39,0)
 ; determine if dots should be printed to screen while gathering data.
"RTN","KMPRPG01",40,0)
 S DOTS=$S($E(IOST,1,2)="C-":0,1:1)
"RTN","KMPRPG01",41,0)
 ; set nodes into NODES() array.
"RTN","KMPRPG01",42,0)
 D NODEARRY^KMPRUTL("NODES") Q:'$D(NODES)
"RTN","KMPRPG01",43,0)
 ; get RUM data.
"RTN","KMPRPG01",44,0)
 D ELEMDATA^KMPRUTL2(+ELEMENT,$P(DATES,U),$P(DATES,U,2),.NODES,"KMPRAR",DOTS)
"RTN","KMPRPG01",45,0)
 Q:'$D(KMPRAR)
"RTN","KMPRPG01",46,0)
 ;
"RTN","KMPRPG01",47,0)
 ; format data into TMP array.
"RTN","KMPRPG01",48,0)
 S I="",DAYS=$$FMDIFF^XLFDT($P(DATES,U,2),$P(DATES,U))+1
"RTN","KMPRPG01",49,0)
 F  S I=$O(KMPRAR(I)) Q:I=""  S J=0 D 
"RTN","KMPRPG01",50,0)
 .F  S J=$O(KMPRAR(I,J)) Q:J=""  D 
"RTN","KMPRPG01",51,0)
 ..S $P(@TMP@(I,0),U)=I
"RTN","KMPRPG01",52,0)
 ..S $P(@TMP@(I,0),U,2)=$P(@TMP@(I,0),U,2)+KMPRAR(I,J)
"RTN","KMPRPG01",53,0)
 .S $P(@TMP@(I,0),U,2)=$FN($P(@TMP@(I,0),U,2)/DAYS,"",2)
"RTN","KMPRPG01",54,0)
 ;
"RTN","KMPRPG01",55,0)
 Q
"RTN","KMPRPG01",56,0)
 ;
"RTN","KMPRPG01",57,0)
GRAPH ;-- display data in graph.
"RTN","KMPRPG01",58,0)
 Q:$G(TMP)=""
"RTN","KMPRPG01",59,0)
 Q:'$G(ELEMENT)
"RTN","KMPRPG01",60,0)
 ;
"RTN","KMPRPG01",61,0)
 N TITLES
"RTN","KMPRPG01",62,0)
 ; graph titles.
"RTN","KMPRPG01",63,0)
 S $P(TITLES,U)="RUM Data for All Nodes"
"RTN","KMPRPG01",64,0)
 S $P(TITLES,U,2)="From "_$P($G(DATES),U,3)_" to "_$P($G(DATES),U,4)
"RTN","KMPRPG01",65,0)
 S $P(TITLES,U,3)=$P(ELEMENT,U,2)_"/per "_$S(+ELEMENT=1!(+ELEMENT=7):"occurrence",1:"sec")
"RTN","KMPRPG01",66,0)
 S $P(TITLES,U,4)="Node"
"RTN","KMPRPG01",67,0)
 ; call graphics routine.
"RTN","KMPRPG01",68,0)
 D EN^KMPUG(TMP,TITLES,$G(OPTIONS))
"RTN","KMPRPG01",69,0)
 Q
"RTN","KMPRPG01",70,0)
 ;
"RTN","KMPRPG01",71,0)
EXIT ;
"RTN","KMPRPG01",72,0)
 D ^%ZISC
"RTN","KMPRPG01",73,0)
 Q
"RTN","KMPRPG02")
0^7^B5598139
"RTN","KMPRPG02",1,0)
KMPRPG02 ;OAK/RAK - RUM Data by Date for Single Node ;5/28/03  08:59
"RTN","KMPRPG02",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRPG02",3,0)
 ;
"RTN","KMPRPG02",4,0)
EN ;-- entry point.
"RTN","KMPRPG02",5,0)
 ;
"RTN","KMPRPG02",6,0)
 N DATES,DIR,ELEMENT,I,IORVOFF,IORVON,LHTIME,NODE,OPTIONS,OUT,TMP,X,Y
"RTN","KMPRPG02",7,0)
 ;
"RTN","KMPRPG02",8,0)
 D ZIS^KMPRUTL
"RTN","KMPRPG02",9,0)
 ; temporary global storage for stats.
"RTN","KMPRPG02",10,0)
 S TMP=$NA(^TMP("KMPR HR STATS",$J))
"RTN","KMPRPG02",11,0)
 S OUT=0
"RTN","KMPRPG02",12,0)
 F  D  Q:OUT
"RTN","KMPRPG02",13,0)
 .W @IOF,!?23,IORVON," RUM Data by Date for Single Node ",IORVOFF,!!
"RTN","KMPRPG02",14,0)
 .D GRPHMSG^KMPRUTL
"RTN","KMPRPG02",15,0)
 .; select element for display.
"RTN","KMPRPG02",16,0)
 .D ELEMENT^KMPRUTL(.Y) I 'Y S OUT=1 Q
"RTN","KMPRPG02",17,0)
 .S ELEMENT=Y_"^"_Y(0)
"RTN","KMPRPG02",18,0)
 .; get date range.
"RTN","KMPRPG02",19,0)
 .D RUMDATES^KMPRUTL(.DATES) Q:'DATES
"RTN","KMPRPG02",20,0)
 .; set up set-of-codes with nodes.
"RTN","KMPRPG02",21,0)
 .K DIR S DIR(0)="SO^",DIR("A")="Select Node"
"RTN","KMPRPG02",22,0)
 .S I=0,X=""
"RTN","KMPRPG02",23,0)
 .F  S X=$O(^KMPR(8971.1,"ANODE",X)) Q:X=""  D 
"RTN","KMPRPG02",24,0)
 ..S I=I+1,DIR(0)=DIR(0)_I_":"_X_";"
"RTN","KMPRPG02",25,0)
 .D ^DIR I 'Y S OUT=1 Q
"RTN","KMPRPG02",26,0)
 .K NODE S NODE(Y(0))=""
"RTN","KMPRPG02",27,0)
 .S OPTIONS="DGV"
"RTN","KMPRPG02",28,0)
 .K @TMP
"RTN","KMPRPG02",29,0)
 .W !!?3,"compiling data for: "
"RTN","KMPRPG02",30,0)
 .; get data - display graph - cleanup.
"RTN","KMPRPG02",31,0)
 .D DATA,GRAPH,EXIT
"RTN","KMPRPG02",32,0)
 .K @TMP
"RTN","KMPRPG02",33,0)
 ;
"RTN","KMPRPG02",34,0)
 Q
"RTN","KMPRPG02",35,0)
 ;
"RTN","KMPRPG02",36,0)
DATA ;-- compile rum stats per node for selected element.
"RTN","KMPRPG02",37,0)
 Q:$G(TMP)=""
"RTN","KMPRPG02",38,0)
 Q:'$G(ELEMENT)
"RTN","KMPRPG02",39,0)
 Q:'$G(DATES)
"RTN","KMPRPG02",40,0)
 Q:'$D(NODE)=""
"RTN","KMPRPG02",41,0)
 ;
"RTN","KMPRPG02",42,0)
 N DOTS,I,J,KMPRAR
"RTN","KMPRPG02",43,0)
 ;
"RTN","KMPRPG02",44,0)
 ; determine if dots should be printed to screen while gathering data.
"RTN","KMPRPG02",45,0)
 S DOTS=$S($E(IOST,1,2)="C-":0,1:1)
"RTN","KMPRPG02",46,0)
 ; get RUM data.
"RTN","KMPRPG02",47,0)
 D ELEMDATA^KMPRUTL2(+ELEMENT,$P(DATES,U),$P(DATES,U,2),.NODE,"KMPRAR",DOTS)
"RTN","KMPRPG02",48,0)
 Q:'$D(KMPRAR)
"RTN","KMPRPG02",49,0)
 ;
"RTN","KMPRPG02",50,0)
 ; format data into TMP array.
"RTN","KMPRPG02",51,0)
 S I=""
"RTN","KMPRPG02",52,0)
 F  S I=$O(KMPRAR(I)) Q:I=""  S J=0 D 
"RTN","KMPRPG02",53,0)
 .F  S J=$O(KMPRAR(I,J)) Q:J=""  D 
"RTN","KMPRPG02",54,0)
 ..S $P(@TMP@(J,0),U)=$$FMTE^DILIBF(J,2)
"RTN","KMPRPG02",55,0)
 ..S $P(@TMP@(J,0),U,2)=KMPRAR(I,J)
"RTN","KMPRPG02",56,0)
 ;
"RTN","KMPRPG02",57,0)
 Q
"RTN","KMPRPG02",58,0)
 ;
"RTN","KMPRPG02",59,0)
GRAPH ;-- display data in graph.
"RTN","KMPRPG02",60,0)
 Q:$G(TMP)=""
"RTN","KMPRPG02",61,0)
 Q:'$G(ELEMENT)
"RTN","KMPRPG02",62,0)
 ;
"RTN","KMPRPG02",63,0)
 N NODE1,TITLES
"RTN","KMPRPG02",64,0)
 S NODE1=$O(NODE(""))
"RTN","KMPRPG02",65,0)
 ; graph titles.
"RTN","KMPRPG02",66,0)
 S $P(TITLES,U)="RUM Data by Date for Node '"_NODE1_"'"
"RTN","KMPRPG02",67,0)
 S $P(TITLES,U,2)="From "_$P($G(DATES),U,3)_" to "_$P($G(DATES),U,4)
"RTN","KMPRPG02",68,0)
 S $P(TITLES,U,3)=$P(ELEMENT,U,2)_"/per "_$S(+ELEMENT=1!(+ELEMENT=7):"occurrence",1:"sec")
"RTN","KMPRPG02",69,0)
 S $P(TITLES,U,4)="Date"
"RTN","KMPRPG02",70,0)
 ; call graphics routine.
"RTN","KMPRPG02",71,0)
 D EN^KMPUG(TMP,TITLES,$G(OPTIONS))
"RTN","KMPRPG02",72,0)
 Q
"RTN","KMPRPG02",73,0)
 ;
"RTN","KMPRPG02",74,0)
EXIT ;
"RTN","KMPRPG02",75,0)
 D ^%ZISC
"RTN","KMPRPG02",76,0)
 Q
"RTN","KMPRPN03")
0^8^B13271909
"RTN","KMPRPN03",1,0)
KMPRPN03 ;OAK/RAK - Print Package RUM Stats ;5/28/03  09:01
"RTN","KMPRPN03",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRPN03",3,0)
EN ;-- entry point.
"RTN","KMPRPN03",4,0)
 ;
"RTN","KMPRPN03",5,0)
 N %ZIS,CONT,DIR,IORVOFF,IORVON,KMPRDATE,KMPRNAM,MESSAGE,POP
"RTN","KMPRPN03",6,0)
 N X,Y,ZTDESC,ZTRTN,ZTSAVE,ZTSK
"RTN","KMPRPN03",7,0)
 ;
"RTN","KMPRPN03",8,0)
 D ZIS^KMPRUTL
"RTN","KMPRPN03",9,0)
 W @IOF,!?28,IORVON," Package Resource Usage ",IORVOFF,!
"RTN","KMPRPN03",10,0)
 W !,?2,"This option will display the package Resource Usage Monitor statistics.",!
"RTN","KMPRPN03",11,0)
 W ?2,"The printout summarizes the statistics of the options, protocols and",!
"RTN","KMPRPN03",12,0)
 W ?2,"tasks for a selected namespace as percentages.",!!
"RTN","KMPRPN03",13,0)
 ;
"RTN","KMPRPN03",14,0)
 K DIR S DIR(0)="FO^1:999:0^K:X="" "" X"
"RTN","KMPRPN03",15,0)
 S DIR("A")="Select Package Namespace (case sensitive)"
"RTN","KMPRPN03",16,0)
 D ^DIR Q:Y=""!(Y="^")
"RTN","KMPRPN03",17,0)
 S KMPRNAM=Y
"RTN","KMPRPN03",18,0)
 ;
"RTN","KMPRPN03",19,0)
 ; determine start date from file 8970.1
"RTN","KMPRPN03",20,0)
 D RUMDATES^KMPRUTL(.KMPRDATE)
"RTN","KMPRPN03",21,0)
 Q:'KMPRDATE
"RTN","KMPRPN03",22,0)
 ;
"RTN","KMPRPN03",23,0)
 ; select output device.
"RTN","KMPRPN03",24,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPRPN03",25,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPRPN03",26,0)
 ; if queued.
"RTN","KMPRPN03",27,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPRPN03",28,0)
 .S ZTDESC="RUM Package Resource Usage for '"_KMPRNAM_"'."
"RTN","KMPRPN03",29,0)
 .S ZTRTN="EN1^KMPRPN03"
"RTN","KMPRPN03",30,0)
 .S ZTSAVE("KMPRDATE")="",ZTSAVE("KMPRNAM")=""
"RTN","KMPRPN03",31,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPRPN03",32,0)
 .D EXIT
"RTN","KMPRPN03",33,0)
 ;
"RTN","KMPRPN03",34,0)
 ; if output to terminal display message.
"RTN","KMPRPN03",35,0)
 W:$E(IOST,1,2)="C-" !?3,"compiling data for: "
"RTN","KMPRPN03",36,0)
 ;
"RTN","KMPRPN03",37,0)
EN1 ;-- entry point from taskman.
"RTN","KMPRPN03",38,0)
 ;
"RTN","KMPRPN03",39,0)
 Q:'$G(KMPRDATE)
"RTN","KMPRPN03",40,0)
 Q:$G(KMPRNAM)=""
"RTN","KMPRPN03",41,0)
 ;
"RTN","KMPRPN03",42,0)
 N DOTS,ELEMENT,KMPRARRY
"RTN","KMPRPN03",43,0)
 ;
"RTN","KMPRPN03",44,0)
 S DOTS=$S($E(IOST,1,2)="C-":0,1:1)
"RTN","KMPRPN03",45,0)
 D ELEARRY^KMPRUTL("ELEMENT") Q:'$D(ELEMENT)
"RTN","KMPRPN03",46,0)
 S KMPRARRY=$NA(^TMP("KMPR PKG %",$J))
"RTN","KMPRPN03",47,0)
 K @KMPRARRY
"RTN","KMPRPN03",48,0)
 D PKGDATA^KMPRUTL2(KMPRNAM,$P(KMPRDATE,U),$P(KMPRDATE,U,2),KMPRARRY,DOTS)
"RTN","KMPRPN03",49,0)
 D PRINT,EXIT
"RTN","KMPRPN03",50,0)
 K @KMPRARRY
"RTN","KMPRPN03",51,0)
 ;
"RTN","KMPRPN03",52,0)
 Q
"RTN","KMPRPN03",53,0)
 ;
"RTN","KMPRPN03",54,0)
EXIT ;
"RTN","KMPRPN03",55,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPRPN03",56,0)
 D ^%ZISC
"RTN","KMPRPN03",57,0)
 K KMPUDATE,KMPUNAM
"RTN","KMPRPN03",58,0)
 ;
"RTN","KMPRPN03",59,0)
 Q
"RTN","KMPRPN03",60,0)
 ;
"RTN","KMPRPN03",61,0)
PRINT ;-- print data from KMPRARRY.
"RTN","KMPRPN03",62,0)
 ;
"RTN","KMPRPN03",63,0)
 Q:'$D(ELEMENT)
"RTN","KMPRPN03",64,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRPN03",65,0)
 ;
"RTN","KMPRPN03",66,0)
 U IO
"RTN","KMPRPN03",67,0)
 ;
"RTN","KMPRPN03",68,0)
 I '$D(@KMPRARRY) D HDR W !,"<<<No Data to Report>>>" Q
"RTN","KMPRPN03",69,0)
 ;
"RTN","KMPRPN03",70,0)
 N DATA,I,NODE,PIECE,SITE,TOTALS,TYP
"RTN","KMPRPN03",71,0)
 ;
"RTN","KMPRPN03",72,0)
 ; facility name.
"RTN","KMPRPN03",73,0)
 S SITE=$P($$SITE^VASITE,U,2)
"RTN","KMPRPN03",74,0)
 S NODE="",CONT=1
"RTN","KMPRPN03",75,0)
 F  S NODE=$O(@KMPRARRY@(NODE)) Q:NODE=""  D  Q:'CONT
"RTN","KMPRPN03",76,0)
 .D HDR S I=0
"RTN","KMPRPN03",77,0)
 .F  S I=$O(ELEMENT(I)) Q:'I  D  Q:'CONT
"RTN","KMPRPN03",78,0)
 ..W !,$P(ELEMENT(I),U) S PIECE=$P(ELEMENT(I),U,2)
"RTN","KMPRPN03",79,0)
 ..S TOTALS=$P($G(@KMPRARRY@(NODE,"TOTALS")),U,PIECE)
"RTN","KMPRPN03",80,0)
 ..F TYP=KMPRNAM,"PRTCL","RPC","HL7","TASK","OTH" D 
"RTN","KMPRPN03",81,0)
 ...S DATA=$P($G(@KMPRARRY@(NODE,TYP)),U,PIECE)
"RTN","KMPRPN03",82,0)
 ...W ?($S(TYP=KMPRNAM:20,TYP="PRTCL":30,TYP="RPC":40,TYP="HL7":50,TYP="TASK":60,1:70))
"RTN","KMPRPN03",83,0)
 ...W $J($S('TOTALS:"n/a",1:$FN(DATA/TOTALS*100,"",1)),6)
"RTN","KMPRPN03",84,0)
 .;
"RTN","KMPRPN03",85,0)
 .; back to NODE level.
"RTN","KMPRPN03",86,0)
 .; if no more entries send message  else use default.
"RTN","KMPRPN03",87,0)
 .S MESSAGE=""
"RTN","KMPRPN03",88,0)
 .S:$O(@KMPRARRY@(NODE))="" MESSAGE="Press RETURN to continue"
"RTN","KMPRPN03",89,0)
 .W !! D CONTINUE^KMPRUTL(MESSAGE,.CONT)
"RTN","KMPRPN03",90,0)
 ;
"RTN","KMPRPN03",91,0)
 Q
"RTN","KMPRPN03",92,0)
 ;
"RTN","KMPRPN03",93,0)
HDR ;
"RTN","KMPRPN03",94,0)
 W:$Y @IOF
"RTN","KMPRPN03",95,0)
 W !?29,"Package Resource Usage"
"RTN","KMPRPN03",96,0)
 W !?(80-$L($G(SITE))\2),$G(SITE)
"RTN","KMPRPN03",97,0)
 W !?17,"Node ",$G(NODE)," from ",$P(KMPRDATE,U,3)," to ",$P(KMPRDATE,U,4)
"RTN","KMPRPN03",98,0)
 W !?(80-($L(KMPRNAM)+12)\2),"'",KMPRNAM,"' Namespace"
"RTN","KMPRPN03",99,0)
 W !
"RTN","KMPRPN03",100,0)
 W !?20,"   %   ",?30,"    %    ",?40,"    %    ",?50,"    %    ",?60,"   %  ",?70,"All Other"
"RTN","KMPRPN03",101,0)
 W !?20,"Options",?30,"Protocols",?40,"   RPC",?50,"   HL7",?60," Tasks",?70,"Packages"
"RTN","KMPRPN03",102,0)
 W !
"RTN","KMPRPN03",103,0)
 ;
"RTN","KMPRPN03",104,0)
 Q
"RTN","KMPRPOST")
0^9^B2097994
"RTN","KMPRPOST",1,0)
KMPRPOST ;OAK/RAK - RUM Post Install Routine ;5/28/03  09:02
"RTN","KMPRPOST",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRPOST",3,0)
 ;
"RTN","KMPRPOST",4,0)
EN ;-- entry point.
"RTN","KMPRPOST",5,0)
 ;
"RTN","KMPRPOST",6,0)
 N DATE,IEN
"RTN","KMPRPOST",7,0)
 D BMES^XPDUTL(" Begin Post-Install...")
"RTN","KMPRPOST",8,0)
 ; if post install
"RTN","KMPRPOST",9,0)
 I $G(XPDNM)]"" D 
"RTN","KMPRPOST",10,0)
 .D MES^XPDUTL(" Removing data from ^XTMP(""KMPR"")...")
"RTN","KMPRPOST",11,0)
 .K ^XTMP("KMPR")
"RTN","KMPRPOST",12,0)
 .D MES^XPDUTL(" Cleaning up ^KMPTMP(""KMPR"",""BACKGROUND"")...")
"RTN","KMPRPOST",13,0)
 .K ^KMPTMP("KMPR","BACKGROUND")
"RTN","KMPRPOST",14,0)
 ;
"RTN","KMPRPOST",15,0)
 D MES^XPDUTL(" Checking RUM Background Job...")
"RTN","KMPRPOST",16,0)
 ; get ien for backgroung job.
"RTN","KMPRPOST",17,0)
 S IEN=$O(^DIC(19,"B","KMPR BACKGROUND DRIVER",0))
"RTN","KMPRPOST",18,0)
 ; get ien for background driver from 'option scheduling' file.
"RTN","KMPRPOST",19,0)
 S:IEN IEN=$O(^DIC(19.2,"B",+IEN,0))
"RTN","KMPRPOST",20,0)
 ; if not scheduled then queue background job
"RTN","KMPRPOST",21,0)
 D:'IEN QUEBKG^KMPRUTL1
"RTN","KMPRPOST",22,0)
 ; if OptenM/Cache then schedule background driver
"RTN","KMPRPOST",23,0)
 ;D:$P($G(^%ZOSF("OS")),"^")["OpenM" QUEBKG^KMPRUTL1
"RTN","KMPRPOST",24,0)
 ;
"RTN","KMPRPOST",25,0)
 D MES^XPDUTL(" Cleaning up ""B"" xref in RESOURCE USAGE MONITOR file...")
"RTN","KMPRPOST",26,0)
 ; begin with dates 3 weeks old
"RTN","KMPRPOST",27,0)
 S DATE=$$FMADD^XLFDT(DT,-21)
"RTN","KMPRPOST",28,0)
 ; reverse $order
"RTN","KMPRPOST",29,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE),-1) Q:'DATE  S IEN=0 D
"RTN","KMPRPOST",30,0)
 .F  S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D 
"RTN","KMPRPOST",31,0)
 ..K:'$D(^KMPR(8971.1,IEN,0)) ^KMPR(8971.1,"B",DATE,IEN)
"RTN","KMPRPOST",32,0)
 ;
"RTN","KMPRPOST",33,0)
 D MES^XPDUTL(" Post-Install complete!")
"RTN","KMPRPOST",34,0)
 ;
"RTN","KMPRPOST",35,0)
 Q
"RTN","KMPRSS")
0^10^B26709533
"RTN","KMPRSS",1,0)
KMPRSS ;OAK/RAK - Resource Usage Monitor Status ;5/28/03  09:07
"RTN","KMPRSS",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRSS",3,0)
 ;
"RTN","KMPRSS",4,0)
STAT ; Status of Resource Usage Monitor collection
"RTN","KMPRSS",5,0)
 N CHECK,DELTA,DIR,ENDT,HDR,KMPRX,KMPRX1,STDT,X,Y
"RTN","KMPRSS",6,0)
 ; check environment
"RTN","KMPRSS",7,0)
 D ENVCHECK^KMPRUTL1(.CHECK,1)
"RTN","KMPRSS",8,0)
 ; if RUM turned on but background job not queued ask user if they want
"RTN","KMPRSS",9,0)
 ; to queue it at this time.
"RTN","KMPRSS",10,0)
 D:(+CHECK)=200 ENVCHECK^KMPRUTL1(.CHECK)
"RTN","KMPRSS",11,0)
 D HDR(.HDR)
"RTN","KMPRSS",12,0)
 W !,?5,"Status......................: "
"RTN","KMPRSS",13,0)
 I +$G(^%ZTSCH("LOGRSRC")) W "Running"
"RTN","KMPRSS",14,0)
 E  W "STOPPED!"
"RTN","KMPRSS",15,0)
 W !
"RTN","KMPRSS",16,0)
 I '$D(^DIC(19,"B","KMPR BACKGROUND DRIVER")) D 
"RTN","KMPRSS",17,0)
 .W !," The 'RUM Background Driver' option [KMPR BACKGROUND DRIVER] is missing !",*7,!
"RTN","KMPRSS",18,0)
 E  D
"RTN","KMPRSS",19,0)
 .S KMPRX=$O(^DIC(19,"B","KMPR BACKGROUND DRIVER",0))
"RTN","KMPRSS",20,0)
 .S KMPRX=+$O(^DIC(19.2,"B",KMPRX,0))
"RTN","KMPRSS",21,0)
 .I 'KMPRX W !?5,"The 'RUM Background Driver' [KMPR BACKGROUND DRIVER] is not scheduled",!?5,"to run!",! Q
"RTN","KMPRSS",22,0)
 .S KMPRX=$G(^DIC(19.2,KMPRX,0)),KMPRX1=$G(^(1))
"RTN","KMPRSS",23,0)
 .S $P(KMPRX,U,2)=$$FMTE^XLFDT($P(KMPRX,U,2))
"RTN","KMPRSS",24,0)
 .W !?5,"RUM Background Driver.......: KMPR BACKGROUND DRIVER"
"RTN","KMPRSS",25,0)
 .W !?5,"QUEUED TO RUN AT............: ",$P(KMPRX,U,2)
"RTN","KMPRSS",26,0)
 .W !?5,"RESCHEDULING FREQUENCY......: ",$P(KMPRX,U,6)
"RTN","KMPRSS",27,0)
 .W !?5,"TASK ID.....................: ",+KMPRX
"RTN","KMPRSS",28,0)
 .; user info
"RTN","KMPRSS",29,0)
 .S KMPRX1=$G(^%ZTSK(+KMPRX1,0))
"RTN","KMPRSS",30,0)
 .W !?5,"QUEUED BY...................: ",$P($G(^VA(200,+$P(KMPRX1,U,3),0)),U)
"RTN","KMPRSS",31,0)
 .; if user
"RTN","KMPRSS",32,0)
 .I $P(KMPRX1,U,3) D 
"RTN","KMPRSS",33,0)
 ..; user active or terminated
"RTN","KMPRSS",34,0)
 ..S KMPRX1=$$ACTIVE^XUSER(+$P(KMPRX1,U,3))
"RTN","KMPRSS",35,0)
 ..W "  ("
"RTN","KMPRSS",36,0)
 ..I $P(KMPRX1,U,2)["TERMINATED" W "Terminated - ",$$FMTE^XLFDT($P(KMPRX1,U,3),2)
"RTN","KMPRSS",37,0)
 ..E  W "Active"
"RTN","KMPRSS",38,0)
 ..W ")"
"RTN","KMPRSS",39,0)
 ; daily/weekly background job info
"RTN","KMPRSS",40,0)
 S STDT=$G(^KMPTMP("KMPR","BACKGROUND","DAILY","TOTAL","START")),ENDT=$G(^("STOP")),DELTA=$G(^("DELTA"))
"RTN","KMPRSS",41,0)
 S:$E(DELTA)=" " $E(DELTA)="0"
"RTN","KMPRSS",42,0)
 W !
"RTN","KMPRSS",43,0)
 W !?5,"Daily Background last start.: ",$$FMTE^XLFDT(STDT,2)
"RTN","KMPRSS",44,0)
 W !?5,"Daily Background last stop..: ",$$FMTE^XLFDT(ENDT,2)
"RTN","KMPRSS",45,0)
 W !?5,"Daily Background total time.: ",DELTA
"RTN","KMPRSS",46,0)
 ;
"RTN","KMPRSS",47,0)
 S STDT=$G(^KMPTMP("KMPR","BACKGROUND","WEEKLY","TOTAL","START")),ENDT=$G(^("STOP")),DELTA=$G(^("DELTA"))
"RTN","KMPRSS",48,0)
 S:$E(DELTA)=" " $E(DELTA)="0"
"RTN","KMPRSS",49,0)
 W !?5,"Weekly Background last start: ",$$FMTE^XLFDT(STDT,2)
"RTN","KMPRSS",50,0)
 W !?5,"Weekly Background last stop.: ",$$FMTE^XLFDT(ENDT,2)
"RTN","KMPRSS",51,0)
 W !?5,"Weekly Background total time: ",DELTA
"RTN","KMPRSS",52,0)
 ;
"RTN","KMPRSS",53,0)
 W !
"RTN","KMPRSS",54,0)
 W !,?5,"Temporary collection global"
"RTN","KMPRSS",55,0)
 W !?5,"^KMPTMP(""KMPR"").............: ",$S('$D(^KMPTMP("KMPR")):"NOT ",1:""),"Present"
"RTN","KMPRSS",56,0)
 ;
"RTN","KMPRSS",57,0)
 ; page pause
"RTN","KMPRSS",58,0)
 Q:'$$CONT^KMPDUTL1(1)
"RTN","KMPRSS",59,0)
 D HDR(.HDR)
"RTN","KMPRSS",60,0)
 ;
"RTN","KMPRSS",61,0)
 ; file info
"RTN","KMPRSS",62,0)
 W !
"RTN","KMPRSS",63,0)
 W !?45,"  # of",?55,"Oldest",?65,"Recent"
"RTN","KMPRSS",64,0)
 W !?5,"File",?45,"Entries",?55," Date",?65," Date"
"RTN","KMPRSS",65,0)
 W !?5,$$REPEAT^XLFSTR("-",36),?45,"-------",?55,"------",?65,"------"
"RTN","KMPRSS",66,0)
 W !?5,"8971.1 - RESOURCE USAGE MONITOR"
"RTN","KMPRSS",67,0)
 ; number of entries
"RTN","KMPRSS",68,0)
 W ?45,$J($FN($P($G(^KMPR(8971.1,0)),U,4),",",0),7)
"RTN","KMPRSS",69,0)
 ; oldest date
"RTN","KMPRSS",70,0)
 W ?55,$$FMTE^XLFDT($O(^KMPR(8971.1,"B",0)),2)
"RTN","KMPRSS",71,0)
 ; most recent date
"RTN","KMPRSS",72,0)
 W ?65,$$FMTE^XLFDT($O(^KMPR(8971.1,"B","A"),-1),2)
"RTN","KMPRSS",73,0)
 ;
"RTN","KMPRSS",74,0)
 ; display routine data
"RTN","KMPRSS",75,0)
 W !! D VERDSPL^KMPDSS("R")
"RTN","KMPRSS",76,0)
 ;
"RTN","KMPRSS",77,0)
 Q:'$$CONT^KMPDUTL1(0)
"RTN","KMPRSS",78,0)
 ;
"RTN","KMPRSS",79,0)
 Q
"RTN","KMPRSS",80,0)
 ;
"RTN","KMPRSS",81,0)
HDR(KMPRHDR) ;-display header
"RTN","KMPRSS",82,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRSS",83,0)
 ; KMPRHDR.. Array (passed by reference) containing header info to be
"RTN","KMPRSS",84,0)
 ;           displayed.
"RTN","KMPRSS",85,0)
 ;           * If KMPRHDR() is not defined the array will be created *
"RTN","KMPRSS",86,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRSS",87,0)
 N X
"RTN","KMPRSS",88,0)
 I '$D(KMPRHDR) D 
"RTN","KMPRSS",89,0)
 .S KMPRHDR(1)="RUM Environment"
"RTN","KMPRSS",90,0)
 .S KMPRHDR("1","F")="!?32"
"RTN","KMPRSS",91,0)
 .S X="Version "_$P($$VERSION^KMPRUTL,U)
"RTN","KMPRSS",92,0)
 .S KMPRHDR(2)=X
"RTN","KMPRSS",93,0)
 .S KMPRHDR(2,"F")="!?"_(80-$L(X)\2)
"RTN","KMPRSS",94,0)
 .; patches
"RTN","KMPRSS",95,0)
 .S X=$P($$VERSION^KMPRUTL,U,2)
"RTN","KMPRSS",96,0)
 .I X]"" S KMPRHDR(2)=X,KMPRHDR(2,"F")="!?"_(80-$L(X)\2)
"RTN","KMPRSS",97,0)
 .S KMPRHDR(3)="",KMPRHDR(3,"F")="!"
"RTN","KMPRSS",98,0)
 W @IOF D EN^DDIOL(.KMPRHDR)
"RTN","KMPRSS",99,0)
 Q
"RTN","KMPRSS",100,0)
 ;
"RTN","KMPRSS",101,0)
START ; Start Resource Usage Monitor collection
"RTN","KMPRSS",102,0)
 N CHECK,DA,DIE,DIR,DR,X,Y
"RTN","KMPRSS",103,0)
 ; check environment
"RTN","KMPRSS",104,0)
 D ENVCHECK^KMPRUTL1(.CHECK,1)
"RTN","KMPRSS",105,0)
 ; if RUM does not support this operating system then quit.
"RTN","KMPRSS",106,0)
 I (+CHECK)=100 W !! D ENVOUTPT^KMPRUTL1(CHECK,1,1) H 1 Q
"RTN","KMPRSS",107,0)
 I +$G(^%ZTSCH("LOGRSRC")) W !!,?10,"The Resource Usage Monitor is already running.",! H 1 Q
"RTN","KMPRSS",108,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="YES"
"RTN","KMPRSS",109,0)
 S DIR("?")="Answer YES to start collecting Resource Usage Monitor data"
"RTN","KMPRSS",110,0)
 S DIR("A")="Do you want to start Resource Usage Monitor collection"
"RTN","KMPRSS",111,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPRSS",112,0)
 I Y D
"RTN","KMPRSS",113,0)
 .S DIE=8989.3,DA=1,DR="300///YES" D ^DIE
"RTN","KMPRSS",114,0)
 .W !!,?10,"Resource Usage Monitor collection is started.",!
"RTN","KMPRSS",115,0)
 .D ENVCHECK^KMPRUTL1(.CHECK,1)
"RTN","KMPRSS",116,0)
 .; if background driver not scheduled to run then start it up
"RTN","KMPRSS",117,0)
 .D:(+CHECK=200) QUEBKG^KMPRUTL1
"RTN","KMPRSS",118,0)
 E  W !!,?10,"Resource Usage Monitor collection is NOT started.",!
"RTN","KMPRSS",119,0)
 H 1
"RTN","KMPRSS",120,0)
 Q
"RTN","KMPRSS",121,0)
 ;
"RTN","KMPRSS",122,0)
STOP ; Stop Resource Usage Monitor collection
"RTN","KMPRSS",123,0)
 N DA,DIE,DIR,DR,DTOUT,DUOUT,X,Y
"RTN","KMPRSS",124,0)
 I '+$G(^%ZTSCH("LOGRSRC")) W !!,?10,"The Resource Usage Monitor is already stopped.",! H 1 Q
"RTN","KMPRSS",125,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="YES"
"RTN","KMPRSS",126,0)
 S DIR("?")="Answer YES to stop collecting Resource Usage Monitor data"
"RTN","KMPRSS",127,0)
 S DIR("A")="Do you want to stop Resource Usage Monitor collection"
"RTN","KMPRSS",128,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPRSS",129,0)
 I Y D
"RTN","KMPRSS",130,0)
 .S DIE=8989.3,DA=1,DR="300///NO" D ^DIE
"RTN","KMPRSS",131,0)
 .W !!,?10,"Resource Usage Monitor collection is stopped.",!
"RTN","KMPRSS",132,0)
 E  W !!,?10,"Resource Usage Monitor collection is NOT stopped.",!
"RTN","KMPRSS",133,0)
 H 1
"RTN","KMPRSS",134,0)
 Q
"RTN","KMPRUTL")
0^11^B21041564
"RTN","KMPRUTL",1,0)
KMPRUTL ;OAK/KAK/RAK - Resource Usage Monitor Utilities ;5/28/03  09:11
"RTN","KMPRUTL",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRUTL",3,0)
 ;
"RTN","KMPRUTL",4,0)
CONTINUE(KMPRMSSG,KMPRY) ;-- press return to continue
"RTN","KMPRUTL",5,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",6,0)
 ; KMPRMSSG. (optional) Message to display to user (if not defined then
"RTN","KMPRUTL",7,0)
 ;           default message by ^DIR is used).
"RTN","KMPRUTL",8,0)
 ; KMPRY.... Return value: 0 - do not continue.
"RTN","KMPRUTL",9,0)
 ;                         1 - continue.
"RTN","KMPRUTL",10,0)
 ;           Access by reference.
"RTN","KMPRUTL",11,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",12,0)
 ;
"RTN","KMPRUTL",13,0)
 S KMPRMSSG=$G(KMPRMSSG),KMPRY=0
"RTN","KMPRUTL",14,0)
 ;
"RTN","KMPRUTL",15,0)
 ; if not terminal continue without displaying message.
"RTN","KMPRUTL",16,0)
 I $E(IOST,1,2)'="C-" S KMPRY=1 Q
"RTN","KMPRUTL",17,0)
 ;
"RTN","KMPRUTL",18,0)
 N DIR,X,Y
"RTN","KMPRUTL",19,0)
 S DIR(0)="EO"
"RTN","KMPRUTL",20,0)
 S:KMPRMSSG]"" DIR("A")=KMPRMSSG
"RTN","KMPRUTL",21,0)
 D ^DIR
"RTN","KMPRUTL",22,0)
 S KMPRY=+$G(Y)
"RTN","KMPRUTL",23,0)
 ;
"RTN","KMPRUTL",24,0)
 Q
"RTN","KMPRUTL",25,0)
 ;
"RTN","KMPRUTL",26,0)
GRPHMSG ;-- graph message.
"RTN","KMPRUTL",27,0)
 N TXT
"RTN","KMPRUTL",28,0)
 S TXT(1)="This option displays data in a graphical format.  Please make"
"RTN","KMPRUTL",29,0)
 S TXT(2)="note that this output is intended for comparison/trends only,"
"RTN","KMPRUTL",30,0)
 S TXT(3)="and should not be used for detailed analysis."
"RTN","KMPRUTL",31,0)
 S TXT(1,"F")="!?9",TXT(2,"F")="!?9",TXT(3,"F")="!?9"
"RTN","KMPRUTL",32,0)
 D EN^DDIOL(.TXT)
"RTN","KMPRUTL",33,0)
 Q
"RTN","KMPRUTL",34,0)
 ;
"RTN","KMPRUTL",35,0)
HDR ; entry point to print header
"RTN","KMPRUTL",36,0)
 ; Input variables:
"RTN","KMPRUTL",37,0)
 ;   KMPRPG = page number
"RTN","KMPRUTL",38,0)
 ;   KMPRTL = title to print on header
"RTN","KMPRUTL",39,0)
 ;   KMPRRP = reporting period date
"RTN","KMPRUTL",40,0)
 ;          = print today's date (if NOT defined)
"RTN","KMPRUTL",41,0)
 D PRESS Q:KMPROUT
"RTN","KMPRUTL",42,0)
 W:'($E(IOST,1,2)'="C-"&'KMPRPG) @IOF I ($E(IOST,1,2)="P-"&$D(IO("S"))&'KMPRPG) S (DX,DY)=0 X ^%ZOSF("XY")
"RTN","KMPRUTL",43,0)
 I IOT="HFS"!($E(IOST,1,2)="P-") S (IORVOFF,IORVON)=""
"RTN","KMPRUTL",44,0)
 S KMPRPG=KMPRPG+1 W !,?((IOM/2)-(($L(KMPRTL)+4)/2)),IORVON,"* ",KMPRTL," *",IORVOFF
"RTN","KMPRUTL",45,0)
 I $D(KMPRRP) W !,?((IOM/2)-(($L(A1RP)+18)/2)),"Reporting Period: ",KMPRRP
"RTN","KMPRUTL",46,0)
 E  S Y=DT D DD^%DT W !,?((IOM/2)-(($L(Y)+12)/2)),"Printed on: ",Y
"RTN","KMPRUTL",47,0)
 W:$E(IOST,1,2)'="C-" ?(IOM-9),"Page ",$J(KMPRPG,3) W !!
"RTN","KMPRUTL",48,0)
 Q
"RTN","KMPRUTL",49,0)
 ;
"RTN","KMPRUTL",50,0)
ID(KMPRIEN) ;-- display - called from ^DD(8971.1,0,"ID","W")
"RTN","KMPRUTL",51,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",52,0)
 ; KMPRIEN... Ien for file #8971.1 (RESOURCE USAGE MONITOR).
"RTN","KMPRUTL",53,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",54,0)
 Q:'$G(KMPRIEN)
"RTN","KMPRUTL",55,0)
 Q:'$D(^KMPR(8971.1,+KMPRIEN,0))
"RTN","KMPRUTL",56,0)
 N DATA,TXT
"RTN","KMPRUTL",57,0)
 S DATA=$G(^KMPR(8971.1,+KMPRIEN,0))
"RTN","KMPRUTL",58,0)
 ; sent to cm national database.
"RTN","KMPRUTL",59,0)
 S TXT(1)=$S($P(DATA,U,2):"sent",1:"not sent")
"RTN","KMPRUTL",60,0)
 S TXT(1)=TXT(1)_$J(" ",10-$L(TXT(1)))
"RTN","KMPRUTL",61,0)
 ; node.
"RTN","KMPRUTL",62,0)
 S TXT(1)=TXT(1)_$P(DATA,U,3)
"RTN","KMPRUTL",63,0)
 S TXT(1)=TXT(1)_$J(" ",22-$L(TXT(1)))
"RTN","KMPRUTL",64,0)
 ; option.
"RTN","KMPRUTL",65,0)
 I $P(DATA,U,4)]"" S TXT(1)=TXT(1)_"option: "_$P(DATA,U,4)
"RTN","KMPRUTL",66,0)
 ; rpc.
"RTN","KMPRUTL",67,0)
 E  I $P(DATA,U,7)]"" S TXT(1)=TXT(1)_"   rpc: "_$P(DATA,U,7)
"RTN","KMPRUTL",68,0)
 S TXT(1,"F")="?16"
"RTN","KMPRUTL",69,0)
 ; if protocol
"RTN","KMPRUTL",70,0)
 I $P(DATA,U,5)'="" D 
"RTN","KMPRUTL",71,0)
 .S TXT(2)="protocol: "_$E($P(DATA,U,5),1,40) ;_" (protocol)"
"RTN","KMPRUTL",72,0)
 .S TXT(2,"F")="!?"_$S($G(DDSDIW):40,1:42)
"RTN","KMPRUTL",73,0)
 ; display TXT() array.
"RTN","KMPRUTL",74,0)
 D EN^DDIOL(.TXT)
"RTN","KMPRUTL",75,0)
 Q
"RTN","KMPRUTL",76,0)
 ;
"RTN","KMPRUTL",77,0)
PRESS ;
"RTN","KMPRUTL",78,0)
 I KMPRPG,$E(IOST,1,2)="C-" W !,"Press RETURN to continue or '^' to exit: " R X:DTIME S:X="^"!('$T) KMPROUT=1
"RTN","KMPRUTL",79,0)
 Q
"RTN","KMPRUTL",80,0)
 ;
"RTN","KMPRUTL",81,0)
NODEARRY(KMPRARRY) ;-- put nodes into array.
"RTN","KMPRUTL",82,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",83,0)
 ; KMPRARRY.. Array to contain nodes in format:
"RTN","KMPRUTL",84,0)
 ;            KMPRARRY(NODENAME)=""
"RTN","KMPRUTL",85,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",86,0)
 ;
"RTN","KMPRUTL",87,0)
 K @KMPRARRY
"RTN","KMPRUTL",88,0)
 ;
"RTN","KMPRUTL",89,0)
 N NODE S NODE=""
"RTN","KMPRUTL",90,0)
 F  S NODE=$O(^KMPR(8971.1,"ANODE",NODE)) Q:NODE=""  S @KMPRARRY@(NODE)=""
"RTN","KMPRUTL",91,0)
 Q
"RTN","KMPRUTL",92,0)
 ;
"RTN","KMPRUTL",93,0)
RUMDATES(KMPRDATE) ;-- get RUM date ranges from file 8971.1
"RTN","KMPRUTL",94,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",95,0)
 ; KMPRDATE... Return value (access by reference) in format:
"RTN","KMPRUTL",96,0)
 ;             StartDate^EndDate^ExtStartDate^ExtEndDate
"RTN","KMPRUTL",97,0)
 ;             2981101^2981104^Nov 1, 1998^Nov 4, 1998
"RTN","KMPRUTL",98,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",99,0)
 ;
"RTN","KMPRUTL",100,0)
 S KMPRDATE=""
"RTN","KMPRUTL",101,0)
 N END,START
"RTN","KMPRUTL",102,0)
 ; determine start date from file 8971.1
"RTN","KMPRUTL",103,0)
 S START=$O(^KMPR(8971.1,"B",0))
"RTN","KMPRUTL",104,0)
 ; determine end date from file 8971.1
"RTN","KMPRUTL",105,0)
 S END=$O(^KMPR(8971.1,"B","A"),-1)
"RTN","KMPRUTL",106,0)
 D DATERNG^KMPUTL1(.KMPRDATE,START,END)
"RTN","KMPRUTL",107,0)
 ;
"RTN","KMPRUTL",108,0)
 Q
"RTN","KMPRUTL",109,0)
 ;
"RTN","KMPRUTL",110,0)
VERSION() ;-- extrinsic - return current version.
"RTN","KMPRUTL",111,0)
 Q $P($T(+2^KMPRUTL),";",3)_"^"_$P($T(+2^KMPRUTL),";",5)
"RTN","KMPRUTL",112,0)
 ;
"RTN","KMPRUTL",113,0)
ZIS ; entry point to define IORVOFF and IORVON variables
"RTN","KMPRUTL",114,0)
 D HOME^%ZIS S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","KMPRUTL",115,0)
 S:IOT="HFS" (IORVOFF,IORVON)=""
"RTN","KMPRUTL",116,0)
 Q
"RTN","KMPRUTL",117,0)
 ;
"RTN","KMPRUTL",118,0)
 ;
"RTN","KMPRUTL",119,0)
ELEARRY(KMPRARRY) ;-- set elements data into KMPRARRY.
"RTN","KMPRUTL",120,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",121,0)
 ; KMPRARRY... Array to contain elements data.
"RTN","KMPRUTL",122,0)
 ;             Format: ElementName^DataPiece
"RTN","KMPRUTL",123,0)
 ;                     KMPRARRY(1)=CPU Time^1
"RTN","KMPRUTL",124,0)
 ;                     KMPRARRY(2)=Elapsed Time^7
"RTN","KMPRUTL",125,0)
 ;                     KMPRARRY(...)=...
"RTN","KMPRUTL",126,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",127,0)
 ;
"RTN","KMPRUTL",128,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRUTL",129,0)
 ;
"RTN","KMPRUTL",130,0)
 N DATA,I
"RTN","KMPRUTL",131,0)
 F I=1:1 Q:$P($T(ELEMENTS+I),";",3)=""  D 
"RTN","KMPRUTL",132,0)
 .S DATA=$T(ELEMENTS+I)
"RTN","KMPRUTL",133,0)
 .S @KMPRARRY@(I)=$P(DATA,";",3)_"^"_$P(DATA,";",4)
"RTN","KMPRUTL",134,0)
 Q
"RTN","KMPRUTL",135,0)
 ;
"RTN","KMPRUTL",136,0)
ELEMENT(KMPUVAR) ;-- select RUM data element.
"RTN","KMPRUTL",137,0)
 ; Output Variable:
"RTN","KMPRUTL",138,0)
 ;   KMPUVAR    = Number of Data Piece
"RTN","KMPRUTL",139,0)
 ;              = '^' if DTOUT or DUOUT
"RTN","KMPRUTL",140,0)
 ;   KMPUVAR(0) = Set of Code's Verbiage
"RTN","KMPRUTL",141,0)
 ;
"RTN","KMPRUTL",142,0)
 N DIR,DTOUT,DUOUT,I,X,Y
"RTN","KMPRUTL",143,0)
 S KMPUVAR=""
"RTN","KMPRUTL",144,0)
 S DIR(0)="SXO^"
"RTN","KMPRUTL",145,0)
 F I=1:1 Q:$P($T(ELEMENTS+I),";",3)=""  D 
"RTN","KMPRUTL",146,0)
 .S DIR(0)=DIR(0)_I_":"_$P($T(ELEMENTS+I),";",3)_";"
"RTN","KMPRUTL",147,0)
 S DIR("A")="Enter Key Data Element for Searching RUM Data"
"RTN","KMPRUTL",148,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT)!(Y="") S KMPUVAR="^",KMPUVAR(0)="" Q
"RTN","KMPRUTL",149,0)
 S KMPUVAR=$TR(Y,"12345678^","17562348^"),KMPUVAR(0)=Y(0)
"RTN","KMPRUTL",150,0)
 Q
"RTN","KMPRUTL",151,0)
 ;
"RTN","KMPRUTL",152,0)
ELEMENTS ;-- ;;Element Name;data piece in file 8971.1
"RTN","KMPRUTL",153,0)
 ;;CPU Time;1
"RTN","KMPRUTL",154,0)
 ;;Elapsed Time;7
"RTN","KMPRUTL",155,0)
 ;;M Commands;5
"RTN","KMPRUTL",156,0)
 ;;GLO References;6
"RTN","KMPRUTL",157,0)
 ;;DIO References;2
"RTN","KMPRUTL",158,0)
 ;;BIO References;3
"RTN","KMPRUTL",159,0)
 ;;Page Faults;4
"RTN","KMPRUTL",160,0)
 ;;Occurrences;8
"RTN","KMPRUTL",161,0)
 ;;
"RTN","KMPRUTL",162,0)
PTCHINFO ; -- patch information: routine name ^ current version ^ current patch(es)
"RTN","KMPRUTL",163,0)
 ;;KMPRBD01^2.0^
"RTN","KMPRUTL",164,0)
 ;;KMPRBD02^2.0^
"RTN","KMPRUTL",165,0)
 ;;KMPRBD03^2.0^
"RTN","KMPRUTL",166,0)
 ;;KMPRP1^2.0^
"RTN","KMPRUTL",167,0)
 ;;KMPRPG01^2.0^
"RTN","KMPRUTL",168,0)
 ;;KMPRPG02^2.0^
"RTN","KMPRUTL",169,0)
 ;;KMPRPN03^2.0^
"RTN","KMPRUTL",170,0)
 ;;KMPRSS^2.0^
"RTN","KMPRUTL",171,0)
 ;;KMPRUTL^2.0^
"RTN","KMPRUTL",172,0)
 ;;KMPRUTL1^2.0^
"RTN","KMPRUTL",173,0)
 ;;KMPRUTL2^2.0^
"RTN","KMPRUTL",174,0)
 ;;KMPRUTL3^2.0^
"RTN","KMPRUTL",175,0)
 ;;%ZOSVKR^8.0^**90,94,107,122,143,186**
"RTN","KMPRUTL",176,0)
 ;;
"RTN","KMPRUTL1")
0^12^B12571358
"RTN","KMPRUTL1",1,0)
KMPRUTL1 ;OAK/KAK/RAK - Resource Usage Monitor Utility ;5/28/03  09:12
"RTN","KMPRUTL1",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRUTL1",3,0)
 ;
"RTN","KMPRUTL1",4,0)
ENVCHECK(KMPRENV,KMPRQIET) ;-- environment check.
"RTN","KMPRUTL1",5,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL1",6,0)
 ; KMPRENV... Result of environment check in format:
"RTN","KMPRUTL1",7,0)
 ;            KMPRENV=Number^Text
"RTN","KMPRUTL1",8,0)
 ;            1-99: system status (not an error condition).
"RTN","KMPRUTL1",9,0)
 ;                 0 - RUM turned on and background job queued
"RTN","KMPRUTL1",10,0)
 ;                 1 - RUM is not turned on
"RTN","KMPRUTL1",11,0)
 ;                 2 - 'KMPR BACKGROUND' job has been queued to run
"RTN","KMPRUTL1",12,0)
 ;
"RTN","KMPRUTL1",13,0)
 ;            100>: error condition.
"RTN","KMPRUTL1",14,0)
 ;               100 - RUM not available for 'OS' at this time
"RTN","KMPRUTL1",15,0)
 ;               200 - RUM is on but the option 'KMPR BACKGROUND DRIVER'
"RTN","KMPRUTL1",16,0)
 ;                     is not scheduled to run."
"RTN","KMPRUTL1",17,0)
 ;               201 - The RUM background driver option [KMPR BACKGROUND
"RTN","KMPRUTL1",18,0)
 ;                     DRIVER] is missing
"RTN","KMPRUTL1",19,0)
 ;
"RTN","KMPRUTL1",20,0)
 ; KMPRQIET.. Output message: 0 - output message (not quiet).
"RTN","KMPRUTL1",21,0)
 ;                            1 - do not output message (quiet).
"RTN","KMPRUTL1",22,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL1",23,0)
 ;
"RTN","KMPRUTL1",24,0)
 K KMPRENV
"RTN","KMPRUTL1",25,0)
 S KMPRENV="0^RUM turned on and background job queued"
"RTN","KMPRUTL1",26,0)
 S KMPRQIET=+$G(KMPRQIET)
"RTN","KMPRUTL1",27,0)
 ;
"RTN","KMPRUTL1",28,0)
 N IEN,IEN1,TEXT
"RTN","KMPRUTL1",29,0)
 ;
"RTN","KMPRUTL1",30,0)
 ; check for operating system availability.
"RTN","KMPRUTL1",31,0)
 S TEXT=$P($G(^%ZOSF("OS")),U)
"RTN","KMPRUTL1",32,0)
 I TEXT'["DSM"&(TEXT'["OpenM") D  Q
"RTN","KMPRUTL1",33,0)
 .S KMPRENV="100^RUM not available for '"_TEXT_"' at this time"
"RTN","KMPRUTL1",34,0)
 .D:'KMPRQIET ENVOUTPT(KMPRENV,1,1)
"RTN","KMPRUTL1",35,0)
 ;
"RTN","KMPRUTL1",36,0)
 ; if rum not started quit.
"RTN","KMPRUTL1",37,0)
 I '$G(^%ZTSCH("LOGRSRC")) D  Q
"RTN","KMPRUTL1",38,0)
 .S KMPRENV="1^RUM is not turned on"
"RTN","KMPRUTL1",39,0)
 .D:'KMPRQIET ENVOUTPT(KMPRENV,1,1)
"RTN","KMPRUTL1",40,0)
 ;
"RTN","KMPRUTL1",41,0)
 S TEXT="KMPR BACKGROUND DRIVER"
"RTN","KMPRUTL1",42,0)
 S IEN=$O(^DIC(19,"B",TEXT,0))
"RTN","KMPRUTL1",43,0)
 I 'IEN D  Q
"RTN","KMPRUTL1",44,0)
 .S KMPRENV="201^The RUM background driver option [KMPR BACKGROUND DRIVER] is missing"
"RTN","KMPRUTL1",45,0)
 .D:'KMPRQIET ENVOUTPT(KMPRENV,1,1)
"RTN","KMPRUTL1",46,0)
 ;
"RTN","KMPRUTL1",47,0)
 S IEN1=$O(^DIC(19.2,"B",IEN,0))
"RTN","KMPRUTL1",48,0)
 I 'IEN1!($P($G(^DIC(19.2,+IEN1,1)),U)']"") D 
"RTN","KMPRUTL1",49,0)
 .S KMPRENV="200^RUM is on but the option '"_TEXT_"' is not scheduled to run"
"RTN","KMPRUTL1",50,0)
 ;
"RTN","KMPRUTL1",51,0)
 Q:KMPRQIET
"RTN","KMPRUTL1",52,0)
 D ENVOUTPT(KMPRENV,1,1) I +KMPRENV<100 Q
"RTN","KMPRUTL1",53,0)
 ;
"RTN","KMPRUTL1",54,0)
 K DIR S DIR(0)="YO",DIR("B")="YES"
"RTN","KMPRUTL1",55,0)
 S DIR("A")="Do you want me to queue this option to run every night at 1 a.m."
"RTN","KMPRUTL1",56,0)
 W ! D ^DIR Q:'Y
"RTN","KMPRUTL1",57,0)
 ;
"RTN","KMPRUTL1",58,0)
 D QUEBKG
"RTN","KMPRUTL1",59,0)
 ;
"RTN","KMPRUTL1",60,0)
 W !
"RTN","KMPRUTL1",61,0)
 S KMPRENV="0^RUM turned on and background job queued"
"RTN","KMPRUTL1",62,0)
 ;
"RTN","KMPRUTL1",63,0)
 Q
"RTN","KMPRUTL1",64,0)
 ;
"RTN","KMPRUTL1",65,0)
ENVOUTPT(KMPRENV,KMPRHILT,KMPRCNTR) ;-- environment check output.
"RTN","KMPRUTL1",66,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL1",67,0)
 ; KMPRENV... Environment output (see ENVCHECK).
"RTN","KMPRUTL1",68,0)
 ; KMPRHILT.. Highlight text: 0 - do not highlight.
"RTN","KMPRUTL1",69,0)
 ;                            1 - highlight text.
"RTN","KMPRUTL1",70,0)
 ; KMPRCNTR.. Center text:    0 - do not center text.
"RTN","KMPRUTL1",71,0)
 ;                            1 - center text.
"RTN","KMPRUTL1",72,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL1",73,0)
 ;
"RTN","KMPRUTL1",74,0)
 S KMPRENV=$G(KMPRENV),KMPRHILT=+$G(KMPRHILT),KMPRCNTR=+$G(KMPRCNTR)
"RTN","KMPRUTL1",75,0)
 Q:KMPRENV=""
"RTN","KMPRUTL1",76,0)
 ;
"RTN","KMPRUTL1",77,0)
 N INDENT,IORVOFF,IORVON,TEXT
"RTN","KMPRUTL1",78,0)
 S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","KMPRUTL1",79,0)
 S KMPRENV=$P(KMPRENV,U,2)
"RTN","KMPRUTL1",80,0)
 S:KMPRHILT KMPRENV=IORVON_" "_KMPRENV_" "_IORVOFF
"RTN","KMPRUTL1",81,0)
 S TEXT(1)=KMPRENV
"RTN","KMPRUTL1",82,0)
 I KMPRCNTR S INDENT=80-$L(TEXT(1))\2,TEXT(1,"F")="!?"_INDENT
"RTN","KMPRUTL1",83,0)
 D EN^DDIOL(.TEXT)
"RTN","KMPRUTL1",84,0)
 ;
"RTN","KMPRUTL1",85,0)
 Q
"RTN","KMPRUTL1",86,0)
 ;
"RTN","KMPRUTL1",87,0)
PKG(PACKAGE) ; Select Package(s)
"RTN","KMPRUTL1",88,0)
 ; Output Variable:
"RTN","KMPRUTL1",89,0)
 ;   PACKAGE = Contains array of package names
"RTN","KMPRUTL1",90,0)
 ;           = PACKAGE("^") if DTOUT or DUOUT
"RTN","KMPRUTL1",91,0)
 ;
"RTN","KMPRUTL1",92,0)
 N DIR,DTOUT,DUOUT,Y
"RTN","KMPRUTL1",93,0)
 S DIR(0)="FO^1:999:0"
"RTN","KMPRUTL1",94,0)
 F  D  Q:$D(DTOUT)!$D(DUOUT)!(Y="")
"RTN","KMPRUTL1",95,0)
 .S DIR("A")="Select Package Namespace" D ^DIR I Y'="" S PACKAGE(Y)=""
"RTN","KMPRUTL1",96,0)
 .I Y=" " W !,*7,"Please enter a valid package namespace.",!
"RTN","KMPRUTL1",97,0)
 S:$D(DTOUT)!$D(DUOUT)!('$D(PACKAGE)) PACKAGE("^")=""
"RTN","KMPRUTL1",98,0)
 W !
"RTN","KMPRUTL1",99,0)
 Q
"RTN","KMPRUTL1",100,0)
 ;
"RTN","KMPRUTL1",101,0)
QUEBKG ;-- queue background job KMPR BACKGROUND DRIVER
"RTN","KMPRUTL1",102,0)
 N DA,DIK,FDA,ERROR,IEN,IEN1,IENZ,TEXT,X,Y,Z
"RTN","KMPRUTL1",103,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPRUTL1",104,0)
 S TEXT="KMPR BACKGROUND DRIVER"
"RTN","KMPRUTL1",105,0)
 S IEN=$O(^DIC(19,"B",TEXT,0)) Q:'IEN
"RTN","KMPRUTL1",106,0)
 S IEN1=$O(^DIC(19.2,"B",IEN,0))
"RTN","KMPRUTL1",107,0)
 ; if already in file 19.2 then kill.
"RTN","KMPRUTL1",108,0)
 I IEN1 S DIK="^DIC(19.2,",DA=IEN1 D ^DIK
"RTN","KMPRUTL1",109,0)
 ; schedule for tomorrow@1am.
"RTN","KMPRUTL1",110,0)
 S FDA($J,19.2,"+1,",.01)=IEN
"RTN","KMPRUTL1",111,0)
 ; queued to run at what time - set to tomorrow@1am
"RTN","KMPRUTL1",112,0)
 S FDA($J,19.2,"+1,",2)=$$FMADD^XLFDT(DT,1)_".01"
"RTN","KMPRUTL1",113,0)
 ; rescheduling frequency.
"RTN","KMPRUTL1",114,0)
 S FDA($J,19.2,"+1,",6)="1D"
"RTN","KMPRUTL1",115,0)
 D UPDATE^DIE("","FDA($J)",.IENZ,"ERROR")
"RTN","KMPRUTL1",116,0)
 I $D(ERROR) D MSG^DIALOG("W","",60,10,"ERROR")
"RTN","KMPRUTL1",117,0)
 Q
"RTN","KMPRUTL2")
0^13^B24733019
"RTN","KMPRUTL2",1,0)
KMPRUTL2 ;OAK/RAK - RUM Data for All Nodes (Graph) ;5/28/03  09:15
"RTN","KMPRUTL2",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRUTL2",3,0)
 ;
"RTN","KMPRUTL2",4,0)
ELEMDATA(KMPRELMT,KMPRST,KMPREN,KMPRNODE,KMPRARRY,KMPRQIET) ;-- elements
"RTN","KMPRUTL2",5,0)
 ; compile rum element stats.
"RTN","KMPRUTL2",6,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL2",7,0)
 ; KMPRELMT... Element.  This represents the ^piece of where the 
"RTN","KMPRUTL2",8,0)
 ;             element data is located in file 8971.1.
"RTN","KMPRUTL2",9,0)
 ;             Example: 5 would be piece 5 of node 1 - M COMMANDS (PT)
"RTN","KMPRUTL2",10,0)
 ;                              or piece 5 of node 2 - M COMMANDS (NP)
"RTN","KMPRUTL2",11,0)
 ; KMPRST..... Start date in internal fileman format.
"RTN","KMPRUTL2",12,0)
 ; KMPREN..... End date in internal fileman format.
"RTN","KMPRUTL2",13,0)
 ; KMPRNODE... Array (passed by reference) containing name of nodes to
"RTN","KMPRUTL2",14,0)
 ;             process in format:  KMPRNODE("NODENAME")="" 
"RTN","KMPRUTL2",15,0)
 ; KMPRARRY... Array (passed by value) that will contain results of 
"RTN","KMPRUTL2",16,0)
 ;             search in format:
"RTN","KMPRUTL2",17,0)
 ;             KMPRARRY(KMPRNODE,DATE)=element/per second
"RTN","KMPRUTL2",18,0)
 ;             where DATE will be in internal filemat format.
"RTN","KMPRUTL2",19,0)
 ; KMPRQIET... Output date/dots during search.
"RTN","KMPRUTL2",20,0)
 ;             0 - not quiet.
"RTN","KMPRUTL2",21,0)
 ;             1 - quiet.
"RTN","KMPRUTL2",22,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL2",23,0)
 ;
"RTN","KMPRUTL2",24,0)
 Q:'$G(KMPRELMT)
"RTN","KMPRUTL2",25,0)
 Q:'$G(KMPRST)
"RTN","KMPRUTL2",26,0)
 Q:'$G(KMPREN)
"RTN","KMPRUTL2",27,0)
 Q:'$D(KMPRNODE)
"RTN","KMPRUTL2",28,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRUTL2",29,0)
 S KMPRQIET=+$G(KMPRQIET)
"RTN","KMPRUTL2",30,0)
 ;
"RTN","KMPRUTL2",31,0)
 K @KMPRARRY
"RTN","KMPRUTL2",32,0)
 ;
"RTN","KMPRUTL2",33,0)
 N DATE,DATA,DCOUNT,END,IEN,NODE,OCCURR,OPTION,START
"RTN","KMPRUTL2",34,0)
 ;
"RTN","KMPRUTL2",35,0)
 ; DATE.... Current date being processed.
"RTN","KMPRUTL2",36,0)
 ; END..... Ending date.
"RTN","KMPRUTL2",37,0)
 ; NODE.... Computer node.
"RTN","KMPRUTL2",38,0)
 ; OCCURR.. # of Occurrences
"RTN","KMPRUTL2",39,0)
 ; OPTION.. Option name.
"RTN","KMPRUTL2",40,0)
 ; START... Starting date.
"RTN","KMPRUTL2",41,0)
 ;
"RTN","KMPRUTL2",42,0)
 S END=KMPREN,START=KMPRST
"RTN","KMPRUTL2",43,0)
 S DATE=START-.1,OCCURR=0
"RTN","KMPRUTL2",44,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE)) Q:'DATE!(DATE>END)  D 
"RTN","KMPRUTL2",45,0)
 .I 'KMPRQIET W:$X>68 !?23 W $$FMTE^XLFDT(DATE,5),"."
"RTN","KMPRUTL2",46,0)
 .S IEN=0
"RTN","KMPRUTL2",47,0)
 .F  S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D 
"RTN","KMPRUTL2",48,0)
 ..I 'KMPRQIET&('(IEN#1000)) W:$X>78 !?23 W "."
"RTN","KMPRUTL2",49,0)
 ..Q:'$D(^KMPR(8971.1,IEN,0))  S DATA(0)=^(0),DATA(1)=$G(^(1)),DATA(2)=$G(^(2))
"RTN","KMPRUTL2",50,0)
 ..S NODE=$P(DATA(0),U,3) Q:NODE=""
"RTN","KMPRUTL2",51,0)
 ..Q:'$D(KMPRNODE(NODE))
"RTN","KMPRUTL2",52,0)
 ..S @KMPRARRY@(NODE,DATE)=$G(@KMPRARRY@(NODE,DATE))+$P(DATA(1),U,+KMPRELMT)
"RTN","KMPRUTL2",53,0)
 ..S @KMPRARRY@(NODE,DATE)=$G(@KMPRARRY@(NODE,DATE))+$P(DATA(2),U,+KMPRELMT)
"RTN","KMPRUTL2",54,0)
 ..; count occurrences.
"RTN","KMPRUTL2",55,0)
 ..S OCCURR=OCCURR+$P(DATA(1),U,8)+$P(DATA(2),U,8)
"RTN","KMPRUTL2",56,0)
 ;
"RTN","KMPRUTL2",57,0)
 ; calculate element per second or per occurrence.
"RTN","KMPRUTL2",58,0)
 S NODE=""
"RTN","KMPRUTL2",59,0)
 F  S NODE=$O(@KMPRARRY@(NODE)) Q:NODE=""  S DATE="" D 
"RTN","KMPRUTL2",60,0)
 .F  S DATE=$O(@KMPRARRY@(NODE,DATE)) Q:'DATE  D 
"RTN","KMPRUTL2",61,0)
 ..; elements 1 and 7 are per Occurrence.
"RTN","KMPRUTL2",62,0)
 ..I KMPRELMT=1!(KMPRELMT=7) D 
"RTN","KMPRUTL2",63,0)
 ...S @KMPRARRY@(NODE,DATE)=$FN(@KMPRARRY@(NODE,DATE)/(OCCURR),"",2)
"RTN","KMPRUTL2",64,0)
 ..; all other elements are per second.
"RTN","KMPRUTL2",65,0)
 ..E  S @KMPRARRY@(NODE,DATE)=$FN(@KMPRARRY@(NODE,DATE)/(24*3600),"",2)
"RTN","KMPRUTL2",66,0)
 ;
"RTN","KMPRUTL2",67,0)
 Q
"RTN","KMPRUTL2",68,0)
 ;
"RTN","KMPRUTL2",69,0)
PKGDATA(KMPRPKG,KMPRSTR,KMPREND,KMPRARRY,KMPRQIET) ;-- package data.
"RTN","KMPRUTL2",70,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL2",71,0)
 ; KMPRPKG... Package name (case sensitive, free text).
"RTN","KMPRUTL2",72,0)
 ; KMPRSTR... Start date in internal fileman format.
"RTN","KMPRUTL2",73,0)
 ; KMPREND... End date in internal fileman format.
"RTN","KMPRUTL2",74,0)
 ; KMPRARRY.. Array to hold data (by value).
"RTN","KMPRUTL2",75,0)
 ; KMPRQIET.. Output date/dots during search.
"RTN","KMPRUTL2",76,0)
 ;            0 - not quiet.
"RTN","KMPRUTL2",77,0)
 ;            1 - quiet.
"RTN","KMPRUTL2",78,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL2",79,0)
 ;
"RTN","KMPRUTL2",80,0)
 Q:$G(KMPRPKG)=""!($G(KMPRPKG)="^")
"RTN","KMPRUTL2",81,0)
 Q:'$G(KMPRSTR)
"RTN","KMPRUTL2",82,0)
 Q:'$G(KMPREND)
"RTN","KMPRUTL2",83,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRUTL2",84,0)
 S KMPRQIET=+$G(KMPRQIET)
"RTN","KMPRUTL2",85,0)
 ;
"RTN","KMPRUTL2",86,0)
 N DATE,DESIG,HL7,I,IEN,NODE,OPTION,PROTOCOL,RPC,TOTALS,TYP
"RTN","KMPRUTL2",87,0)
 ;
"RTN","KMPRUTL2",88,0)
 S DATE=KMPRSTR-.1
"RTN","KMPRUTL2",89,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE)) Q:'DATE!(DATE>KMPREND)  S IEN=0 D 
"RTN","KMPRUTL2",90,0)
 .I 'KMPRQIET W:$X>68 !?23 W $$FMTE^XLFDT(DATE,5),"."
"RTN","KMPRUTL2",91,0)
 .F  S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D 
"RTN","KMPRUTL2",92,0)
 ..I 'KMPRQIET&('(IEN#1000)) W:$X>78 !?23 W "."
"RTN","KMPRUTL2",93,0)
 ..Q:'$D(^KMPR(8971.1,IEN,0))  S DATA(0)=^(0),DATA(1)=$G(^(1)),DATA(2)=$G(^(2))
"RTN","KMPRUTL2",94,0)
 ..S NODE=$P(DATA(0),U,3) S:NODE="" NODE="N/A"
"RTN","KMPRUTL2",95,0)
 ..S OPTION=$P(DATA(0),U,4) S:OPTION="" OPTION="N/A"
"RTN","KMPRUTL2",96,0)
 ..S PROTOCOL=$P(DATA(0),U,5)
"RTN","KMPRUTL2",97,0)
 ..S RPC=$P(DATA(0),U,7)
"RTN","KMPRUTL2",98,0)
 ..S HL7=$P(DATA(0),U,9)
"RTN","KMPRUTL2",99,0)
 ..; rum designation: 1 - TASKMAN
"RTN","KMPRUTL2",100,0)
 ..;                  2 - USER
"RTN","KMPRUTL2",101,0)
 ..;                  3 - BROKER
"RTN","KMPRUTL2",102,0)
 ..;                  4 - HL7
"RTN","KMPRUTL2",103,0)
 ..;                  5 OTHER
"RTN","KMPRUTL2",104,0)
 ..S DESIG=$P(DATA(0),U,8)
"RTN","KMPRUTL2",105,0)
 ..;
"RTN","KMPRUTL2",106,0)
 ..; TYP: KMPRPKG. options within namespace
"RTN","KMPRUTL2",107,0)
 ..;      HL7..... hl7 within namespace.
"RTN","KMPRUTL2",108,0)
 ..;      RPC..... rpc within namespace
"RTN","KMPRUTL2",109,0)
 ..;      PRTCL... protocol within namespace
"RTN","KMPRUTL2",110,0)
 ..;      TASK.... tasked option within namespace
"RTN","KMPRUTL2",111,0)
 ..;      OTH..... all other options/protocols
"RTN","KMPRUTL2",112,0)
 ..;
"RTN","KMPRUTL2",113,0)
 ..S TYP="OTH"
"RTN","KMPRUTL2",114,0)
 ..; if option is in namespace.
"RTN","KMPRUTL2",115,0)
 ..I $E(OPTION,1,$L(KMPRPKG))=KMPRPKG S TYP=KMPRPKG
"RTN","KMPRUTL2",116,0)
 ..; if option in namespace and protocol was called.
"RTN","KMPRUTL2",117,0)
 ..I TYP=KMPRPKG I PROTOCOL]"" S TYP="PRTCL"
"RTN","KMPRUTL2",118,0)
 ..; if option in namespace and tasked.
"RTN","KMPRUTL2",119,0)
 ..I TYP=KMPRPKG&(DESIG=1)&($E(OPTION,1,$L(KMPRPKG))=KMPRPKG) S TYP="TASK"
"RTN","KMPRUTL2",120,0)
 ..; if broker and in namespace.
"RTN","KMPRUTL2",121,0)
 ..I DESIG=3&($E(RPC,1,$L(KMPRPKG))=KMPRPKG) S TYP="RPC"
"RTN","KMPRUTL2",122,0)
 ..; if hl7 and in namespace.
"RTN","KMPRUTL2",123,0)
 ..I DESIG=4&($E(HL7,1,$L(KMPRPKG))=KMPRPKG) S TYP="HL7"
"RTN","KMPRUTL2",124,0)
 ..; get current totals (if any).
"RTN","KMPRUTL2",125,0)
 ..S TOTALS=$G(@KMPRARRY@(NODE,TYP))
"RTN","KMPRUTL2",126,0)
 ..; add prime time and non-prime time totals
"RTN","KMPRUTL2",127,0)
 ..F I=1:1:8 D 
"RTN","KMPRUTL2",128,0)
 ...S $P(@KMPRARRY@(NODE,TYP),U,I)=$P($G(@KMPRARRY@(NODE,TYP)),U,I)+$P(DATA(1),U,I)
"RTN","KMPRUTL2",129,0)
 ...S $P(@KMPRARRY@(NODE,TYP),U,I)=$P($G(@KMPRARRY@(NODE,TYP)),U,I)+$P(DATA(2),U,I)
"RTN","KMPRUTL2",130,0)
 ...S $P(@KMPRARRY@(NODE,"TOTALS"),U,I)=$P($G(@KMPRARRY@(NODE,"TOTALS")),U,I)+$P(DATA(1),U,I)
"RTN","KMPRUTL2",131,0)
 ...S $P(@KMPRARRY@(NODE,"TOTALS"),U,I)=$P($G(@KMPRARRY@(NODE,"TOTALS")),U,I)+$P(DATA(2),U,I)
"RTN","KMPRUTL2",132,0)
 ;
"RTN","KMPRUTL2",133,0)
 Q
"RTN","KMPRUTL3")
0^14^B26204608
"RTN","KMPRUTL3",1,0)
KMPRUTL3 ;OAK/RAK - Resource Usage Monitor Utilities ;5/28/03  09:16
"RTN","KMPRUTL3",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;;May 28, 2003
"RTN","KMPRUTL3",3,0)
 ;
"RTN","KMPRUTL3",4,0)
HRSDAYS(KMPRSDT,KMPREDT,KMPRKILL,KMPRRES) ;
"RTN","KMPRUTL3",5,0)
 ;-- number of days/hours in the date range
"RTN","KMPRUTL3",6,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",7,0)
 ; KMPRSDT.. Start Date in internal fileman format
"RTN","KMPRUTL3",8,0)
 ; KMPREDT.. End Date in internal fileman format
"RTN","KMPRUTL3",9,0)
 ; KMPRKILL. Kill node after processing: 
"RTN","KMPRUTL3",10,0)
 ;              0 - do not kill
"RTN","KMPRUTL3",11,0)
 ;              1 - kill
"RTN","KMPRUTL3",12,0)
 ; KMPRRES.. Array (passed by reference) containing days/hours info
"RTN","KMPRUTL3",13,0)
 ;           in format: KMPRRES(KMPRSDT,Node)=Data 
"RTN","KMPRUTL3",14,0)
 ;              Where Data equals for the specified date range:
"RTN","KMPRUTL3",15,0)
 ;              '^' Piece 1 - Prime Time Days
"RTN","KMPRUTL3",16,0)
 ;              '^' Piece 2 - Prime Time Hours
"RTN","KMPRUTL3",17,0)
 ;              '^' Piece 3 - Non-Prime Time Days
"RTN","KMPRUTL3",18,0)
 ;              '^' Piece 4 - Non-Prime Time Hours
"RTN","KMPRUTL3",19,0)
 ;              '^' Piece 5 - Workday Days
"RTN","KMPRUTL3",20,0)
 ;              '^' Piece 6 - Workday Hours
"RTN","KMPRUTL3",21,0)
 ;              '^' Piece 7 - Non-Workday Days
"RTN","KMPRUTL3",22,0)
 ;              '^' Piece 8 - Non-Workday Hours
"RTN","KMPRUTL3",23,0)
 ;           Example for the specified date range:
"RTN","KMPRUTL3",24,0)
 ;              KMPRRES(3030418,"999A01")=5^45^7^123^5^120^2^48
"RTN","KMPRUTL3",25,0)
 ;              KMPRRES(3030418,"999A02")=5^40^7^120^5^110^2^45 <=partial
"RTN","KMPRUTL3",26,0)
 ;              KMPRRES(3030418,"999A03")=5^45^7^123^5^120^2^48
"RTN","KMPRUTL3",27,0)
 ;              KMPRRES(  ...  ,   ...  )=...
"RTN","KMPRUTL3",28,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",29,0)
 ;
"RTN","KMPRUTL3",30,0)
 K KMPRRES
"RTN","KMPRUTL3",31,0)
 ;
"RTN","KMPRUTL3",32,0)
 Q:'$G(KMPRSDT)
"RTN","KMPRUTL3",33,0)
 Q:'$G(KMPREDT)
"RTN","KMPRUTL3",34,0)
 S KMPRKILL=+$G(KMPRKILL)
"RTN","KMPRUTL3",35,0)
 ;
"RTN","KMPRUTL3",36,0)
 N DATA,DATE,DAYS,HOURS,I,NODE
"RTN","KMPRUTL3",37,0)
 ;
"RTN","KMPRUTL3",38,0)
 D HOURS(KMPRSDT,KMPREDT,KMPRKILL,.HOURS)
"RTN","KMPRUTL3",39,0)
 Q:'$D(HOURS)
"RTN","KMPRUTL3",40,0)
 ;
"RTN","KMPRUTL3",41,0)
 S NODE=""
"RTN","KMPRUTL3",42,0)
 F  S NODE=$O(HOURS(NODE)) Q:NODE=""  D
"RTN","KMPRUTL3",43,0)
 .S (DATE,DAYS,HOURS)=0
"RTN","KMPRUTL3",44,0)
 .F  S DATE=$O(HOURS(NODE,DATE)) Q:'DATE  D
"RTN","KMPRUTL3",45,0)
 ..;
"RTN","KMPRUTL3",46,0)
 ..; piece 1 - prime time hours per day
"RTN","KMPRUTL3",47,0)
 ..; piece 2 - non-prime time hours per day
"RTN","KMPRUTL3",48,0)
 ..; piece 3 - workday hours per day
"RTN","KMPRUTL3",49,0)
 ..; piece 4 - non-workday hours per day
"RTN","KMPRUTL3",50,0)
 ..S DATA=HOURS(NODE,DATE)
"RTN","KMPRUTL3",51,0)
 ..;
"RTN","KMPRUTL3",52,0)
 ..F I=1:1:4 D
"RTN","KMPRUTL3",53,0)
 ...; total hours for the specified date range
"RTN","KMPRUTL3",54,0)
 ...S $P(HOURS,U,I)=$P(HOURS,U,I)+$P(DATA,U,I)
"RTN","KMPRUTL3",55,0)
 ...; if current day has hours then increment total days for the
"RTN","KMPRUTL3",56,0)
 ...; specified date range
"RTN","KMPRUTL3",57,0)
 ...S:$P(DATA,U,I) $P(DAYS,U,I)=$P(DAYS,U,I)+1
"RTN","KMPRUTL3",58,0)
 .;
"RTN","KMPRUTL3",59,0)
 .; back to NODE level
"RTN","KMPRUTL3",60,0)
 .S KMPRRES(KMPRSDT,NODE)=$P(DAYS,U)_"^"_$P(HOURS,U)_"^"_$P(DAYS,U,2)_"^"_$P(HOURS,U,2)_"^"_$P(DAYS,U,3)_"^"_$P(HOURS,U,3)_"^"_$P(DAYS,U,4)_"^"_$P(HOURS,U,4)
"RTN","KMPRUTL3",61,0)
 ;
"RTN","KMPRUTL3",62,0)
 Q
"RTN","KMPRUTL3",63,0)
 ;
"RTN","KMPRUTL3",64,0)
HOURS(KMPRSDT,KMPREDT,KMPRKILL,KMPRRES) ;
"RTN","KMPRUTL3",65,0)
 ;-- determine prime time & non-prime time hours per day
"RTN","KMPRUTL3",66,0)
 ;-- determine workday & non-workday hours per day
"RTN","KMPRUTL3",67,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",68,0)
 ; KMPRSDT.. Start Date in internal fileman format
"RTN","KMPRUTL3",69,0)
 ; KMPREDT.. End Date in internal fileman format
"RTN","KMPRUTL3",70,0)
 ; KMPRKILL. Kill node after processing: 
"RTN","KMPRUTL3",71,0)
 ;              0 - do not kill
"RTN","KMPRUTL3",72,0)
 ;              1 - kill
"RTN","KMPRUTL3",73,0)
 ; KMPRRES.. Array (passed by reference) containing hours info
"RTN","KMPRUTL3",74,0)
 ;           in format: KMPRRES(Date,Node)=Data 
"RTN","KMPRUTL3",75,0)
 ;              Where Data equals:
"RTN","KMPRUTL3",76,0)
 ;              '^' Piece 1 - Prime Time Hours per day
"RTN","KMPRUTL3",77,0)
 ;              '^' Piece 2 - Non-Prime Time Hours per day
"RTN","KMPRUTL3",78,0)
 ;              '^' Piece 3 - Workday Hours per day
"RTN","KMPRUTL3",79,0)
 ;              '^' Piece 4 - Non-Workday Hours per day
"RTN","KMPRUTL3",80,0)
 ;           Example:
"RTN","KMPRUTL3",81,0)
 ;              KMPRRES(3030418,"999A01")=9^15^24^0  <= Friday
"RTN","KMPRUTL3",82,0)
 ;              KMPRRES(3030418,"999A02")=4^10^14^0  <= Friday (partial)
"RTN","KMPRUTL3",83,0)
 ;              KMPRRES(3030419,"999A01")=0^24^0^24  <= Saturday   
"RTN","KMPRUTL3",84,0)
 ;              KMPRRES(  ...  ,   ...  )= ...
"RTN","KMPRUTL3",85,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",86,0)
 ;
"RTN","KMPRUTL3",87,0)
 K KMPRRES
"RTN","KMPRUTL3",88,0)
 ;
"RTN","KMPRUTL3",89,0)
 Q:'$G(KMPRSDT)
"RTN","KMPRUTL3",90,0)
 Q:'$G(KMPREDT)
"RTN","KMPRUTL3",91,0)
 S KMPRKILL=+$G(KMPRKILL)
"RTN","KMPRUTL3",92,0)
 ;
"RTN","KMPRUTL3",93,0)
 N DATA,DATE,DOW,END,HOURS,HRS,I,NODE,PIECE,WORKDAY
"RTN","KMPRUTL3",94,0)
 ;
"RTN","KMPRUTL3",95,0)
 ; end date
"RTN","KMPRUTL3",96,0)
 S END=KMPREDT
"RTN","KMPRUTL3",97,0)
 S DATE=KMPRSDT-.1,(DAYS,HOURS)=""
"RTN","KMPRUTL3",98,0)
 F  S DATE=$O(^KMPTMP("KMPR","HOURS",DATE)) Q:'DATE!(DATE>END)  D
"RTN","KMPRUTL3",99,0)
 .;
"RTN","KMPRUTL3",100,0)
 .Q:DATE<KMPRSDT!(DATE>END)
"RTN","KMPRUTL3",101,0)
 .;
"RTN","KMPRUTL3",102,0)
 .S NODE="",DOW=$$DOW^XLFDT(DATE,1),WORKDAY=$$WORKDAY^XUWORKDY(DATE)
"RTN","KMPRUTL3",103,0)
 .;
"RTN","KMPRUTL3",104,0)
 .; prime time (8am to 5pm)
"RTN","KMPRUTL3",105,0)
 .; if not saturday or sunday or holiday then prime time (piece 1)
"RTN","KMPRUTL3",106,0)
 .; if saturday or sunday then non-prime time (piece 2)
"RTN","KMPRUTL3",107,0)
 .S PIECE=$S(DOW'=0&(DOW'=6)&('$G(^HOLIDAY(DATE,0))):1,1:2)
"RTN","KMPRUTL3",108,0)
 .;
"RTN","KMPRUTL3",109,0)
 .F  S NODE=$O(^KMPTMP("KMPR","HOURS",DATE,NODE)) Q:NODE=""  D
"RTN","KMPRUTL3",110,0)
 ..S DATA=$G(^KMPTMP("KMPR","HOURS",DATE,NODE)) Q:DATA=""
"RTN","KMPRUTL3",111,0)
 ..S (HOURS,HRS)=0
"RTN","KMPRUTL3",112,0)
 ..;
"RTN","KMPRUTL3",113,0)
 ..;*** times are offset by 1  so zero hour is in piece 1
"RTN","KMPRUTL3",114,0)
 ..;***                            one hour is in piece 2
"RTN","KMPRUTL3",115,0)
 ..;***                            two hour is in piece 3
"RTN","KMPRUTL3",116,0)
 ..;***                            etc.
"RTN","KMPRUTL3",117,0)
 ..;
"RTN","KMPRUTL3",118,0)
 ..; prime time hours
"RTN","KMPRUTL3",119,0)
 ..F I=9:1:17 S HRS=HRS+$P(DATA,U,I)
"RTN","KMPRUTL3",120,0)
 ..S $P(HOURS,U,PIECE)=$P(HOURS,U,PIECE)+HRS
"RTN","KMPRUTL3",121,0)
 ..;
"RTN","KMPRUTL3",122,0)
 ..; non-prime time hours
"RTN","KMPRUTL3",123,0)
 ..S HRS=0
"RTN","KMPRUTL3",124,0)
 ..F I=1:1:8,18:1:24 S HRS=HRS+$P(DATA,U,I)
"RTN","KMPRUTL3",125,0)
 ..S $P(HOURS,U,2)=$P(HOURS,U,2)+HRS
"RTN","KMPRUTL3",126,0)
 ..;
"RTN","KMPRUTL3",127,0)
 ..; workday, non-workday hours
"RTN","KMPRUTL3",128,0)
 ..S HRS=0
"RTN","KMPRUTL3",129,0)
 ..F I=1:1:24 S HRS=HRS+$P(DATA,U,I)
"RTN","KMPRUTL3",130,0)
 ..I WORKDAY S $P(HOURS,U,3)=$P(HOURS,U,3)+HRS
"RTN","KMPRUTL3",131,0)
 ..E  S $P(HOURS,U,4)=$P(HOURS,U,4)+HRS
"RTN","KMPRUTL3",132,0)
 ..;
"RTN","KMPRUTL3",133,0)
 ..S KMPRRES(NODE,DATE)=HOURS
"RTN","KMPRUTL3",134,0)
 ..;
"RTN","KMPRUTL3",135,0)
 ..K:KMPRKILL ^KMPTMP("KMPR","HOURS",DATE,NODE)
"RTN","KMPRUTL3",136,0)
 ;
"RTN","KMPRUTL3",137,0)
 Q
"RTN","KMPRUTL3",138,0)
 ;
"RTN","KMPRUTL3",139,0)
PURGE(KMPRDDT,KMPRHRS) ;-- purge data in file #8971.1
"RTN","KMPRUTL3",140,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",141,0)
 ; KMPRDDT.. Date to begin purge in internal fileman format. Purge will
"RTN","KMPRUTL3",142,0)
 ;           reverse $order and delete entries 'EARLIER' than KMPRDDT.
"RTN","KMPRUTL3",143,0)
 ; KMPRHRS.. Purge Hours/Days data from ^KMPTMP("KMPR","HOURS". Entries
"RTN","KMPRUTL3",144,0)
 ;           'EARLIER' than KMPRDDT will be deleted.
"RTN","KMPRUTL3",145,0)
 ;           0 - do not purge hours/days data.
"RTN","KMPRUTL3",146,0)
 ;           1 - purge hours/days data.
"RTN","KMPRUTL3",147,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL3",148,0)
 ;
"RTN","KMPRUTL3",149,0)
 Q:'$G(KMPRDDT)
"RTN","KMPRUTL3",150,0)
 S KMPRHRS=+$G(KMPRHRS)
"RTN","KMPRUTL3",151,0)
 ;
"RTN","KMPRUTL3",152,0)
 N DA,DATE,DIK,IEN
"RTN","KMPRUTL3",153,0)
 D:'$D(ZTQUEUED) EN^DDIOL("Deleting old records...")
"RTN","KMPRUTL3",154,0)
 S DATE=KMPRDDT
"RTN","KMPRUTL3",155,0)
 F  S DATE=$O(^KMPR(8971.1,"B",DATE),-1) Q:'DATE!(DATE>KMPRDDT)  D 
"RTN","KMPRUTL3",156,0)
 .F IEN=0:0 S IEN=$O(^KMPR(8971.1,"B",DATE,IEN)) Q:'IEN  D 
"RTN","KMPRUTL3",157,0)
 ..; delete if no zero node
"RTN","KMPRUTL3",158,0)
 ..I '$D(^KMPR(8971.1,IEN,0)) K ^KMPR(8971.1,"B",DATE,IEN) Q
"RTN","KMPRUTL3",159,0)
 ..; quit if not 'sent to cm database'.
"RTN","KMPRUTL3",160,0)
 ..Q:$P($G(^KMPR(8971.1,IEN,0)),U,2)=0
"RTN","KMPRUTL3",161,0)
 ..; Delete entry.
"RTN","KMPRUTL3",162,0)
 ..S DA=IEN,DIK="^KMPR(8971.1," D ^DIK
"RTN","KMPRUTL3",163,0)
 ;
"RTN","KMPRUTL3",164,0)
 Q:'KMPRHRS
"RTN","KMPRUTL3",165,0)
 D:'$D(ZTQUEUED) EN^DDIOL("Deleting old entries from ^KMPTMP(""KMPR"",""HOURS""...")
"RTN","KMPRUTL3",166,0)
 S DATE=KMPRDDT
"RTN","KMPRUTL3",167,0)
 F  S DATE=$O(^KMPTMP("KMPR","HOURS",DATE),-1) Q:'DATE!(DATE>KMPRDDT)  D 
"RTN","KMPRUTL3",168,0)
 .K ^KMPTMP("KMPR","HOURS",DATE)
"RTN","KMPRUTL3",169,0)
 ;
"RTN","KMPRUTL3",170,0)
 Q
"RTN","KMPU11")
0^15^B15230900
"RTN","KMPU11",1,0)
KMPU11 ;SFISC/RAK - Capacity Management Text Display ;23 Oct 1998
"RTN","KMPU11",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPU11",3,0)
 ;
"RTN","KMPU11",4,0)
WP(KMPUAR,KMPUTM,KMPUBM,KMPULM,KMPURM,KMPUNW) ;-- word processing display.
"RTN","KMPU11",5,0)
 ;--------------------------------------------------------------------
"RTN","KMPU11",6,0)
 ; KMPUAR...  Array containing word processing text.
"RTN","KMPU11",7,0)
 ;            Example: ^KMPUTMP(1001,1,0)="This is the"
"RTN","KMPU11",8,0)
 ;                     ^KMPUTMP(1001,2,0)="text to display."
"RTN","KMPU11",9,0)
 ;
"RTN","KMPU11",10,0)
 ;  Optional parameters:
"RTN","KMPU11",11,0)
 ;
"RTN","KMPU11",12,0)
 ;    KMPUTM - Top margin of screen area.
"RTN","KMPU11",13,0)
 ;    KMPUBM - Bottom margin of screen area.
"RTN","KMPU11",14,0)
 ;    KMPULM - Left margin.
"RTN","KMPU11",15,0)
 ;    KMPURM - Right margin.
"RTN","KMPU11",16,0)
 ;    KMPUNW - Nowrap:   0 - nowrap (print as entered)
"RTN","KMPU11",17,0)
 ;                       1 - wrap
"RTN","KMPU11",18,0)
 ;
"RTN","KMPU11",19,0)
 ; If more than one page this routine allows the user to scroll back
"RTN","KMPU11",20,0)
 ; and forth between pages. If KMPUTM and KMPUBM are not passed will
"RTN","KMPU11",21,0)
 ; default to full screen (0 to 22).
"RTN","KMPU11",22,0)
 ;--------------------------------------------------------------------
"RTN","KMPU11",23,0)
 ;
"RTN","KMPU11",24,0)
 Q:'$D(KMPUAR)
"RTN","KMPU11",25,0)
 ;
"RTN","KMPU11",26,0)
 N CLRSCR,I,KMPUI,KMPUOUT,LEN,LINES,PAGE,PAGES
"RTN","KMPU11",27,0)
 N DIR,DIW,DIWF,DIWI,DIWL,DIWR,DIWT,DIWTC,DIWX,X,Y,Z
"RTN","KMPU11",28,0)
 N IOBM,IOECH,IOELALL,IOELEOL,IORVON,IORVOFF,IOTM,IOSTBM
"RTN","KMPU11",29,0)
 ;
"RTN","KMPU11",30,0)
 S KMPUTM=+$G(KMPUTM),KMPUBM=$S(+$G(KMPUBM):KMPUBM,1:22)
"RTN","KMPU11",31,0)
 S KMPULM=+$G(KMPULM),KMPURM=+$G(KMPURM),KMPUNW=+$G(KMPUNW)
"RTN","KMPU11",32,0)
 S:KMPUBM>22 KMPUBM=22 S DIWL=KMPULM,DIWR=$S(KMPURM:KMPURM,1:IOM)
"RTN","KMPU11",33,0)
 S KMPUNW=$S(KMPUNW=1:"",1:"N")
"RTN","KMPU11",34,0)
 S X="IOECH;IOELALL;IOELEOL;IORVON;IORVOFF;IOSTKMPUBM" D ENDR^%ZISS
"RTN","KMPU11",35,0)
 ; set CLRSCR (clear screen) 
"RTN","KMPU11",36,0)
 ; clear full screen
"RTN","KMPU11",37,0)
 I DIWL=0,(DIWR=IOM) D 
"RTN","KMPU11",38,0)
 .S CLRSCR="F DY=(KMPUBM-1):-1:KMPUTM X IOXY W IOELALL,!"
"RTN","KMPU11",39,0)
 ; clear left margin to end of screen
"RTN","KMPU11",40,0)
 E  I DIWR=IOM D 
"RTN","KMPU11",41,0)
 .S CLRSCR="S DX=DIWL F DY=(KMPUBM-1):-1:KMPUTM X IOXY W IOELEOL,!"
"RTN","KMPU11",42,0)
 ; clear left margin to right margin
"RTN","KMPU11",43,0)
 E  S CLRSCR="F DY=(KMPUBM-1):-1:KMPUTM F DX=DIWL:1:DIWR X IOXY W IOECH"
"RTN","KMPU11",44,0)
 K ^UTILITY($J,"W") S DIWF=KMPUNW,X=""
"RTN","KMPU11",45,0)
 ; use fileman to format text
"RTN","KMPU11",46,0)
 F KMPUI=0:0 S KMPUI=$O(@KMPUAR@(KMPUI)) Q:'KMPUI  D 
"RTN","KMPU11",47,0)
 .Q:'$D(@KMPUAR@(KMPUI,0))  S X=@KMPUAR@(KMPUI,0) D ^DIWP
"RTN","KMPU11",48,0)
 Q:'$D(^UTILITY($J,"W",DIWL))  S LINES=$G(^(DIWL))
"RTN","KMPU11",49,0)
 ; check for last line equal to null
"RTN","KMPU11",50,0)
 I $G(^UTILITY($J,"W",DIWL,LINES,0))="" S LINES=LINES-1
"RTN","KMPU11",51,0)
 S LEN=KMPUBM-KMPUTM,PAGES=LINES\LEN I LINES#LEN S PAGES=PAGES+1
"RTN","KMPU11",52,0)
 ;
"RTN","KMPU11",53,0)
 ; set up the pages() array -  first piece = starting line
"RTN","KMPU11",54,0)
 ;                            second piece = ending line
"RTN","KMPU11",55,0)
 F I=1:1:PAGES D 
"RTN","KMPU11",56,0)
 .S PAGES(I)=$S(I=1:1,1:(I*LEN-LEN+1))
"RTN","KMPU11",57,0)
 .I I=1 S $P(PAGES(I),U,2)=$S(LINES<LEN:LINES,1:LEN) Q
"RTN","KMPU11",58,0)
 .S $P(PAGES(I),U,2)=(I*LEN)
"RTN","KMPU11",59,0)
 S DY=(KMPUTM-1),PAGE=1,KMPUOUT=0
"RTN","KMPU11",60,0)
 ; main loop
"RTN","KMPU11",61,0)
 F  D  Q:KMPUOUT
"RTN","KMPU11",62,0)
 .F KMPUI=$P(PAGES(PAGE),U):1:$P(PAGES(PAGE),U,2) D 
"RTN","KMPU11",63,0)
 ..Q:'$D(^UTILITY($J,"W",DIWL,KMPUI,0))
"RTN","KMPU11",64,0)
 ..S DX=DIWL,DY=DY+1 X IOXY W ^UTILITY($J,"W",DIWL,KMPUI,0),!
"RTN","KMPU11",65,0)
 .D FTR X CLRSCR Q:KMPUOUT  S DY=DY-1
"RTN","KMPU11",66,0)
 F DY=22,23 X IOXY W IOELALL
"RTN","KMPU11",67,0)
 K ^UTILITY($J,"W")
"RTN","KMPU11",68,0)
 Q
"RTN","KMPU11",69,0)
 ;
"RTN","KMPU11",70,0)
FTR ;-- footer designed for wp subroutine above.
"RTN","KMPU11",71,0)
 N READ,READX S READ=""
"RTN","KMPU11",72,0)
 S DX=0,DY=22 X IOXY W $$REPEAT^XLFSTR("_",IOM)
"RTN","KMPU11",73,0)
 I PAGES=1 S READ="X",READ("A")=$J(" ",28)_"Press <RET> to continue"
"RTN","KMPU11",74,0)
 I PAGES>1 S READ="X",READ("A")="E[x]it" D 
"RTN","KMPU11",75,0)
 .I PAGE<PAGES S READ=READ_"N",READ("A")=READ("A")_", [N]ext Screen"
"RTN","KMPU11",76,0)
 .I PAGE>1 S READ=READ_"P",READ("A")=READ("A")_", [P]revious Screen"
"RTN","KMPU11",77,0)
 S READ("A")=READ("A")_": "
"RTN","KMPU11",78,0)
FTR1 ;-- read
"RTN","KMPU11",79,0)
 S DX=0,DY=23 X IOXY W IOELALL
"RTN","KMPU11",80,0)
 S DX=62 X IOXY W " Page ",PAGE," of ",PAGES," "
"RTN","KMPU11",81,0)
 S DX=0 X IOXY W READ("A")
"RTN","KMPU11",82,0)
 R READX:DTIME S READX=$$UP^XLFSTR(READX)
"RTN","KMPU11",83,0)
 I READX="X"!(READX="^")!(READ="X") S KMPUOUT=1 Q
"RTN","KMPU11",84,0)
 I READX="N",(READ["N") S PAGE=PAGE+1 Q
"RTN","KMPU11",85,0)
 I READX="P",(READ["P") S PAGE=PAGE-1 Q
"RTN","KMPU11",86,0)
 I READX["?" D HELP G FTR1
"RTN","KMPU11",87,0)
 W *7
"RTN","KMPU11",88,0)
 G FTR1
"RTN","KMPU11",89,0)
 ;
"RTN","KMPU11",90,0)
HELP ;-- clear screen, print help text, repaint screen.
"RTN","KMPU11",91,0)
 N I,READX X CLRSCR S DY=KMPUTM,DX=$S(DIWL>7:DIWL,1:7) X IOXY
"RTN","KMPU11",92,0)
 F I=1:1:$L(READ) S DY=DY+1 X IOXY D 
"RTN","KMPU11",93,0)
 .I $E(READ,I)="X" W "Enter 'X' (or '^') to exit.",!
"RTN","KMPU11",94,0)
 .I $E(READ,I)="N" W "Enter 'N' to advance to the next screen.",!
"RTN","KMPU11",95,0)
 .I $E(READ,I)="P" W "Enter 'P' to backup to the previous screen.",!
"RTN","KMPU11",96,0)
 S DY=(KMPUBM-1) X IOXY R "Press <RET> to continue: ",READX:DTIME
"RTN","KMPU11",97,0)
 ; repaint screen.
"RTN","KMPU11",98,0)
 X CLRSCR S DY=(KMPUTM-1)
"RTN","KMPU11",99,0)
 F I=$P(PAGES(PAGE),U):1:$P(PAGES(PAGE),U,2) D 
"RTN","KMPU11",100,0)
 .Q:'$D(^UTILITY($J,"W",DIWL,I,0))
"RTN","KMPU11",101,0)
 .S DX=DIWL,DY=DY+1 X IOXY W ^UTILITY($J,"W",DIWL,I,0),!
"RTN","KMPU11",102,0)
 Q
"RTN","KMPUG")
0^16^B10988451
"RTN","KMPUG",1,0)
KMPUG ;SFISC/RAK - Capacity Management Graphics ; 22 Oct 1998
"RTN","KMPUG",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUG",3,0)
EN(KMPUAR,KMPUTI,KMPUOPT,KMPUSTRT,KMPUTAR) ;entry point
"RTN","KMPUG",4,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG",5,0)
 ; KMPUAR.. Local or global array (passed by value) that contains graph
"RTN","KMPUG",6,0)
 ;          information in the format:
"RTN","KMPUG",7,0)
 ;
"RTN","KMPUG",8,0)
 ;          KMPUAR(...,0)=DataTitle^DataValue
"RTN","KMPUG",9,0)
 ;                        piece 1 - the title of the data
"RTN","KMPUG",10,0)
 ;                        piece 2 - the actual value of the data
"RTN","KMPUG",11,0)
 ;
"RTN","KMPUG",12,0)
 ; KMPUTI.. graph titles in 4 up-arrow pieces
"RTN","KMPUG",13,0)
 ;          piece 1 - title of the graph 
"RTN","KMPUG",14,0)
 ;          piece 2 - second title of graph (if any)
"RTN","KMPUG",15,0)
 ;          piece 3 - x axis title
"RTN","KMPUG",16,0)
 ;          piece 4 - y axis title
"RTN","KMPUG",17,0)
 ;   
"RTN","KMPUG",18,0)
 ; KMPUOPT. (optional) A string of one or more letters representing
"RTN","KMPUG",19,0)
 ;          desired options.
"RTN","KMPUG",20,0)
 ;          "A" - angle titles (only for vertical graph)
"RTN","KMPUG",21,0)
 ;          "D" - double space
"RTN","KMPUG",22,0)
 ;          "G" - print grid across graph
"RTN","KMPUG",23,0)
 ;          "S" - display entries with MAX>9999 in scientific notation
"RTN","KMPUG",24,0)
 ;          "V" - display 'vertical' graph
"RTN","KMPUG",25,0)
 ;
"RTN","KMPUG",26,0)
 ;           the extrinsic function $$KMPUOPTS^ASKGRUTL() is
"RTN","KMPUG",27,0)
 ;           provided as a way of prompting for the above
"RTN","KMPUG",28,0)
 ;           options in interactive mode
"RTN","KMPUG",29,0)
 ;
"RTN","KMPUG",30,0)
 ; KMPUSTRT (optional). Number to start graph.
"RTN","KMPUG",31,0)
 ;          if KMPUSTRT=0 first hash mark of graph will equal 0
"RTN","KMPUG",32,0)
 ;
"RTN","KMPUG",33,0)
 ; KMPUTAR. (optional) Text array. Local or global array that 
"RTN","KMPUG",34,0)
 ;          contains text to be displayed with the graph.
"RTN","KMPUG",35,0)
 ;
"RTN","KMPUG",36,0)
 ;          Example:  KMPUTAR="UTIL($J,"
"RTN","KMPUG",37,0)
 ;                    KMPUTAR="^ASK(999999,23,10,"
"RTN","KMPUG",38,0)
 ;                    KMPUTAR="^TMP($J,""TEXT"","
"RTN","KMPUG",39,0)
 ;
"RTN","KMPUG",40,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG",41,0)
 ;
"RTN","KMPUG",42,0)
 I '$D(KMPUAR) W !!?7,"...no array data...",!! D CONT Q
"RTN","KMPUG",43,0)
 S KMPUSTRT=+$G(KMPUSTRT),KMPUOPT=$$UP^XLFSTR($G(KMPUOPT))
"RTN","KMPUG",44,0)
 K:$G(KMPUTAR)="" KMPUTAR
"RTN","KMPUG",45,0)
 I '$D(@KMPUAR) D  Q
"RTN","KMPUG",46,0)
 .W *7,!!?7,"...no information to graph...",!!
"RTN","KMPUG",47,0)
 .D CONT
"RTN","KMPUG",48,0)
 S DTIME=$S($D(DTIME):DTIME,1:600)
"RTN","KMPUG",49,0)
 ;
"RTN","KMPUG",50,0)
 N BAR,BOTTOM,DATA,DEC,DEC1,DIV,DIVT,DNUM,DX,DY,END,GWIDTH,I,I1,LABEL,MAX
"RTN","KMPUG",51,0)
 N MIN,NUM,OFFSET,SCALE,STEP,TEXT,TITLE,X,XCOORD,XTITLE,YNUM,YTITLE,Z
"RTN","KMPUG",52,0)
 N IOBLC,IOBRC,IOBT,IOG1,IOG0,IOHL,IOLT,IOMT,IORT,IOTLC,IOTRC,IOTT,IOVL
"RTN","KMPUG",53,0)
 N IOINHI,IOINLOW,IORVOFF,IORVON,IOUOFF,IOUON
"RTN","KMPUG",54,0)
 ;
"RTN","KMPUG",55,0)
 D INIT^KMPUG1 I KMPUOPT["D",(KMPUOPT'["V"),(YNUM>8) D  Q
"RTN","KMPUG",56,0)
 .W *7,!!?7,"...too many data elements to double space on a terminal"
"RTN","KMPUG",57,0)
 .W !?7,"   for a Horizontal Graph..."
"RTN","KMPUG",58,0)
 .W !!! D CONT
"RTN","KMPUG",59,0)
 I KMPUOPT["D",(KMPUOPT["V"),(YNUM>34) D  Q
"RTN","KMPUG",60,0)
 .W *7,!!?7,"...too many data elements to double space on a terminal"
"RTN","KMPUG",61,0)
 .W !?7,"   for a Vertical Graph..."
"RTN","KMPUG",62,0)
 .W !!! D CONT
"RTN","KMPUG",63,0)
 ; if not a terminal do printer routine
"RTN","KMPUG",64,0)
 I $E(IOST)'="C" Q  ;D EN^KMPUGP Q
"RTN","KMPUG",65,0)
 I $G(IOG1)']""!($G(IOG0)']"") D  Q
"RTN","KMPUG",66,0)
 .W *7,!!?7,"...unable to place terminal in graphics mode...",!!
"RTN","KMPUG",67,0)
 .D CONT
"RTN","KMPUG",68,0)
 I 'MAX D  Q
"RTN","KMPUG",69,0)
 .W *7,!!?7,"...unable to determine any data to graph or data all zeros...",!!
"RTN","KMPUG",70,0)
 .D CONT
"RTN","KMPUG",71,0)
 ; if 'vertical' graph
"RTN","KMPUG",72,0)
 I KMPUOPT["V" D EN^KMPUGV Q
"RTN","KMPUG",73,0)
 ; draw graph - display titles - display data
"RTN","KMPUG",74,0)
 D DRAW^KMPUG1,TITLES^KMPUG1,DATA
"RTN","KMPUG",75,0)
 ; if text to display.
"RTN","KMPUG",76,0)
 I $D(KMPUTAR) D WP^KMPU11(KMPUTAR,(BOTTOM+5),24) Q
"RTN","KMPUG",77,0)
 D CONT
"RTN","KMPUG",78,0)
 Q
"RTN","KMPUG",79,0)
 ;
"RTN","KMPUG",80,0)
CONT ;-- hold screen
"RTN","KMPUG",81,0)
 S DX=(IOM-23\2),DY=(IOSL-1) X IOXY
"RTN","KMPUG",82,0)
 R "Press <RET> to continue",X:DTIME
"RTN","KMPUG",83,0)
 Q
"RTN","KMPUG",84,0)
 ;
"RTN","KMPUG",85,0)
DATA ;-- display data in graph.
"RTN","KMPUG",86,0)
 W IOG0 S DY=$S(KMPUOPT["D":1,1:2),BAR=0,I=""
"RTN","KMPUG",87,0)
 F  S I=$O(@KMPUAR@(I)) Q:I=""  I $D(@KMPUAR@(I,0)) S DATA=@KMPUAR@(I,0) D 
"RTN","KMPUG",88,0)
 .S XCOORD=$P(DATA,U,2),END=(XCOORD-KMPUSTRT-STEP)
"RTN","KMPUG",89,0)
 .S DX=16,DY=DY+$S(KMPUOPT["D":2,1:1)
"RTN","KMPUG",90,0)
 .;  if no data quit
"RTN","KMPUG",91,0)
 .Q:$P(@KMPUAR@(I,0),U,2)']""
"RTN","KMPUG",92,0)
 .F I1=0:STEP:END X IOXY W @BAR(BAR),! S DX=DX+1 Q:DX=68
"RTN","KMPUG",93,0)
 .;  print value in parenthesis
"RTN","KMPUG",94,0)
 .S DX=69 X IOXY W "<",$J((XCOORD/DIV),$L($FN((MAX/DIV),"",DEC)),DEC),">"
"RTN","KMPUG",95,0)
 .S BAR=$S(BAR=1:0,1:1)
"RTN","KMPUG",96,0)
 Q
"RTN","KMPUG1")
0^17^B11831811
"RTN","KMPUG1",1,0)
KMPUG1 ;SFISC/RAK - Capacity Management Graphics ;23 Oct 1998
"RTN","KMPUG1",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUG1",3,0)
DRAW ;draw graph
"RTN","KMPUG1",4,0)
 W @IOF,!,IOG1 S DY=2
"RTN","KMPUG1",5,0)
 ;  draw top line
"RTN","KMPUG1",6,0)
 F I=1:1:27 S DX=41+I X IOXY W IOHL S DX=43-I X IOXY W IOHL
"RTN","KMPUG1",7,0)
 ;  draw top left and right corners
"RTN","KMPUG1",8,0)
 S DX=15 X IOXY W IOTLC S DX=68 X IOXY W IOTRC,!
"RTN","KMPUG1",9,0)
 ;  draw sides
"RTN","KMPUG1",10,0)
 F DY=(DY+1):1:BOTTOM F DX=15,68 X IOXY W IOVL,!
"RTN","KMPUG1",11,0)
 ;  draw bottom left and right corners
"RTN","KMPUG1",12,0)
 S DY=BOTTOM,DX=15 X IOXY W IOBLC S DX=68 X IOXY W IOBRC,!
"RTN","KMPUG1",13,0)
 ;  draw bottom line
"RTN","KMPUG1",14,0)
 F I=1:1:27 S DX=15+I X IOXY W IOHL S DX=68-I X IOXY W IOHL
"RTN","KMPUG1",15,0)
 ;  draw 'hash marks' on bottom line for relative values
"RTN","KMPUG1",16,0)
 S DX=15 X IOXY W IOLT,!
"RTN","KMPUG1",17,0)
 F DX=20:5:65 X IOXY W IOMT,!
"RTN","KMPUG1",18,0)
 ;  print grid
"RTN","KMPUG1",19,0)
 I KMPUOPT["G" D 
"RTN","KMPUG1",20,0)
 .S DY=2 F DX=20:5:65 X IOXY W IOTT,!
"RTN","KMPUG1",21,0)
 . F DX=20:5:65 F DY=3:1:(BOTTOM-1) X IOXY W IOVL,!
"RTN","KMPUG1",22,0)
 W IOG0
"RTN","KMPUG1",23,0)
 Q
"RTN","KMPUG1",24,0)
INIT ;-- initialize required variables.
"RTN","KMPUG1",25,0)
 D GSET^%ZISS S X="IOECH;IORVOFF;IORVON;IOUOFF;IOUON" D ENDR^%ZISS
"RTN","KMPUG1",26,0)
 ; actual bars representing data
"RTN","KMPUG1",27,0)
 S BAR(0)="IORVON,"" "",IORVOFF"
"RTN","KMPUG1",28,0)
 S BAR(1)="IOG1,""a"",IOG0"
"RTN","KMPUG1",29,0)
 S (DEC,DNUM,MAX,MIN,SCALE,YNUM)=0,GWIDTH=$S(KMPUOPT["V":10,1:50)
"RTN","KMPUG1",30,0)
 S TITLE=$P($G(KMPUTI),U,1,2)
"RTN","KMPUG1",31,0)
 S XTITLE=$P($G(KMPUTI),U,3)
"RTN","KMPUG1",32,0)
 S YTITLE=$P($G(KMPUTI),U,4)
"RTN","KMPUG1",33,0)
 ; determine maximum and minimum number and decimals (if any).
"RTN","KMPUG1",34,0)
 S (I,MAX,MIN)=""
"RTN","KMPUG1",35,0)
 F  S I=$O(@KMPUAR@(I)) Q:I=""  I $D(@KMPUAR@(I,0)) S YNUM=YNUM+1 D 
"RTN","KMPUG1",36,0)
 .I $P(@KMPUAR@(I,0),U,2)>MAX S MAX=$P(@KMPUAR@(I,0),U,2)
"RTN","KMPUG1",37,0)
 .I $P(@KMPUAR@(I,0),U,2)<MIN S MIN=$P(@KMPUAR@(I,0),U,2)
"RTN","KMPUG1",38,0)
 .; determine number of decimal places (if any).
"RTN","KMPUG1",39,0)
 .S DNUM=$P($P(@KMPUAR@(I,0),U,2),".",2) Q:'DNUM
"RTN","KMPUG1",40,0)
 .I $L(DNUM)>DEC S DEC=$L(DNUM)
"RTN","KMPUG1",41,0)
 Q:MAX'>0
"RTN","KMPUG1",42,0)
 ; get maximum number for graph.
"RTN","KMPUG1",43,0)
 D MAX
"RTN","KMPUG1",44,0)
 ; determine if there are decimal places when printed at end of graph
"RTN","KMPUG1",45,0)
 S I="" F  S I=$O(@KMPUAR@(I)) Q:I=""  I $D(@KMPUAR@(I,0)) D 
"RTN","KMPUG1",46,0)
 .S Z=$L($P($P(@KMPUAR@(I,0),U,2)/DIV,".",2)) Q:'Z
"RTN","KMPUG1",47,0)
 .I Z>DEC S DEC=$S(Z>2:2,1:1)
"RTN","KMPUG1",48,0)
 S BOTTOM=$S(KMPUOPT["D":(YNUM*2+2),1:(YNUM+3))
"RTN","KMPUG1",49,0)
 S SCALE=((MAX-KMPUSTRT)/10),STEP=((MAX-KMPUSTRT)/GWIDTH)
"RTN","KMPUG1",50,0)
 S NUM=(SCALE+KMPUSTRT)
"RTN","KMPUG1",51,0)
 ; determine if relative values have decimal
"RTN","KMPUG1",52,0)
 S DEC1=0 F I=20:5:65 I $L($P((NUM/DIV),".",2)) D 
"RTN","KMPUG1",53,0)
 .S DEC1=$S($L($P((NUM/DIV),".",2))>2:2,1:1)
"RTN","KMPUG1",54,0)
 Q
"RTN","KMPUG1",55,0)
 ;
"RTN","KMPUG1",56,0)
MAX ;-- determine 'max' or largest number for graph.
"RTN","KMPUG1",57,0)
 ;
"RTN","KMPUG1",58,0)
 S DIV=1,MAX=$FN(MAX,"",0)
"RTN","KMPUG1",59,0)
 I MAX<2 S MAX=1 Q
"RTN","KMPUG1",60,0)
 S X=1 F I=1:1:$L(MAX)-1 S X=X*10 I MAX=X S X=X/10
"RTN","KMPUG1",61,0)
 S MAX=$E(MAX-1)+1*X
"RTN","KMPUG1",62,0)
 I $L(MAX)>4 D 
"RTN","KMPUG1",63,0)
 .F I=1:1:($L(MAX)-1) S DIV=DIV_"0"
"RTN","KMPUG1",64,0)
 .I $L(DIV)<7 S DIVT=$S(KMPUOPT["S":"10^"_I,1:(DIV/1000)_"k") Q
"RTN","KMPUG1",65,0)
 .S DIVT=$S(KMPUOPT["S":"10^"_I,1:(DIV/1000000)_"m")
"RTN","KMPUG1",66,0)
 Q
"RTN","KMPUG1",67,0)
 ;
"RTN","KMPUG1",68,0)
TITLES ;-- print graph titles.
"RTN","KMPUG1",69,0)
 W IOG0
"RTN","KMPUG1",70,0)
 ; print first and second line of title
"RTN","KMPUG1",71,0)
 S DX=(IOM-$L($P(TITLE,U))\2+1),DY=0 X IOXY W $P(TITLE,U),!
"RTN","KMPUG1",72,0)
 S DX=(IOM-$L($P(TITLE,U,2))\2+1),DY=1 X IOXY W $P(TITLE,U,2),!
"RTN","KMPUG1",73,0)
 ; print y title
"RTN","KMPUG1",74,0)
 S DX=(14-$L(YTITLE)) X IOXY W IOUON,YTITLE,IOUOFF,!
"RTN","KMPUG1",75,0)
 ; print relative values under hash marks
"RTN","KMPUG1",76,0)
 S NUM=(SCALE+KMPUSTRT)
"RTN","KMPUG1",77,0)
 S DY=BOTTOM+1,DX=15-$S($L($FN((KMPUSTRT/DIV),"",DEC1))=1:0,1:$L($FN((KMPUSTRT/DIV),"",DEC1))-2) X IOXY W $FN((KMPUSTRT/DIV),"",DEC1),!
"RTN","KMPUG1",78,0)
 F I=20:5:65 D 
"RTN","KMPUG1",79,0)
 .I $L($FN((NUM/DIV),"",DEC1))=1 S DX=(I-$L($FN((NUM/DIV),"",DEC1))+1)
"RTN","KMPUG1",80,0)
 .E  S DX=(I-($L($FN((NUM/DIV),"",DEC1))-2))
"RTN","KMPUG1",81,0)
 .X IOXY W $FN((NUM/DIV),"",DEC1),! S NUM=NUM+SCALE
"RTN","KMPUG1",82,0)
 ; if div>1 write (x div)
"RTN","KMPUG1",83,0)
 I DIV>1 S DX=69 X IOXY W "<x",DIVT,">",!
"RTN","KMPUG1",84,0)
 ; print x title at bottom
"RTN","KMPUG1",85,0)
 S DX=(IOM-$L(XTITLE)\2+1),DY=BOTTOM+2 X IOXY W IOUON,XTITLE,IOUOFF,!
"RTN","KMPUG1",86,0)
 ; print data titles
"RTN","KMPUG1",87,0)
 S DY=3,I=0 F  S I=$O(@KMPUAR@(I)) Q:'I  I $D(@KMPUAR@(I,0)) D 
"RTN","KMPUG1",88,0)
 .S YTITLE=$E($P(@KMPUAR@(I,0),U),1,14)
"RTN","KMPUG1",89,0)
 .S DX=(14-$L(YTITLE)) X IOXY W YTITLE,!
"RTN","KMPUG1",90,0)
 .S DY=DY+$S(KMPUOPT["D":2,1:1)
"RTN","KMPUG1",91,0)
 Q
"RTN","KMPUG2")
0^18^B22564003
"RTN","KMPUG2",1,0)
KMPUG2 ;SFISC/RAK - Capacity Management Graphics ;23 Oct 1998
"RTN","KMPUG2",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUG2",3,0)
OPTIONS(KMPUOPTS) ;-- select options.
"RTN","KMPUG2",4,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG2",5,0)
 ; KMPUOPTS.. Result of selection.
"RTN","KMPUG2",6,0)
 ;            Exceptions: "" - No options selected.
"RTN","KMPUG2",7,0)
 ;                        ^  - User up-arrowed out.
"RTN","KMPUG2",8,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG2",9,0)
 N I,X,OUT
"RTN","KMPUG2",10,0)
 S KMPUOPTS="",OUT=0
"RTN","KMPUG2",11,0)
 S DTIME=$S($G(DTIME):DTIME,1:300)
"RTN","KMPUG2",12,0)
 F  D  Q:OUT
"RTN","KMPUG2",13,0)
 .W !?5,"The following graph selections are 'optional':"
"RTN","KMPUG2",14,0)
 .D DISPLAY(.KMPUOPTS) I KMPUOPTS="" S OUT=1 Q
"RTN","KMPUG2",15,0)
 .R !!,"Enter one or more option letter(s): ",X:DTIME
"RTN","KMPUG2",16,0)
 .I X="" S OUT=1,KMPUOPTS="" Q
"RTN","KMPUG2",17,0)
 .I X="^" S OUT=1,KMPUOPTS="^" Q
"RTN","KMPUG2",18,0)
 .I X["?" D HELP W @IOF Q
"RTN","KMPUG2",19,0)
 .;
"RTN","KMPUG2",20,0)
 .; remove any commas, dashes or spaces.
"RTN","KMPUG2",21,0)
 .S X=$TR(X,",- ",""),X=$$UP^XLFSTR(X)
"RTN","KMPUG2",22,0)
 .;
"RTN","KMPUG2",23,0)
 .; check for invalid answer.
"RTN","KMPUG2",24,0)
 .D CHECK Q:KMPUOPTS=""
"RTN","KMPUG2",25,0)
 .;
"RTN","KMPUG2",26,0)
 .I X["A",(X'["V") D  Q
"RTN","KMPUG2",27,0)
 ..W *7,!!?10,"Angle Data Titles only available with a Vertical Graph..."
"RTN","KMPUG2",28,0)
 .;
"RTN","KMPUG2",29,0)
 .; if vertical display warning message.
"RTN","KMPUG2",30,0)
 .I X["V" D 
"RTN","KMPUG2",31,0)
 ..W !!?7,"...please be aware that because of screen limitations Vertical"
"RTN","KMPUG2",32,0)
 ..W !?7,"   Graphs are not as accurate as Horizontal Graphs and should be"
"RTN","KMPUG2",33,0)
 ..W !?7,"   used for visual comparison rather than detailed analysis..."
"RTN","KMPUG2",34,0)
 .;
"RTN","KMPUG2",35,0)
 .S KMPUOPTS=X,OUT=1
"RTN","KMPUG2",36,0)
 ;
"RTN","KMPUG2",37,0)
 Q
"RTN","KMPUG2",38,0)
 ;
"RTN","KMPUG2",39,0)
CHECK ;-- check for valid answer.
"RTN","KMPUG2",40,0)
 N I
"RTN","KMPUG2",41,0)
 F I=1:1:$L(X) I KMPUOPTS'[$E(X,I) D  Q
"RTN","KMPUG2",42,0)
 .W *7,!!?10,"'",$E(X,I),"' is not an available option."
"RTN","KMPUG2",43,0)
 .S KMPUOPTS=""
"RTN","KMPUG2",44,0)
 Q
"RTN","KMPUG2",45,0)
 ;
"RTN","KMPUG2",46,0)
DISPLAY(KMPUOPT) ;-- display available options.
"RTN","KMPUG2",47,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG2",48,0)
 ; KMPUOPT... Will be set to available options.
"RTN","KMPUG2",49,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUG2",50,0)
 N I S KMPUOPT="" W !
"RTN","KMPUG2",51,0)
 F I=1:1 Q:$T(OPT+I)']""  D 
"RTN","KMPUG2",52,0)
 .W !?7,$P($T(OPT+I),";",3)," - ",$P($T(OPT+I),";",4)
"RTN","KMPUG2",53,0)
 .S KMPUOPT=KMPUOPT_$P($T(OPT+I),";",3)
"RTN","KMPUG2",54,0)
 Q
"RTN","KMPUG2",55,0)
 ;
"RTN","KMPUG2",56,0)
FTR(FOOTER,VALUE) ;print footer
"RTN","KMPUG2",57,0)
 ;--------------------------------------------------------------------
"RTN","KMPUG2",58,0)
 ;  line feed to IOSL-3 and place message on screen
"RTN","KMPUG2",59,0)
 ;  if IOSL or IOM are not defined routine will quit
"RTN","KMPUG2",60,0)
 ;
"RTN","KMPUG2",61,0)
 ;  FOOTER - text to appear at the bottom of the screen
"RTN","KMPUG2",62,0)
 ;           if footer is not defined then the message
"RTN","KMPUG2",63,0)
 ;           'Press RETURN to continue, '^' to exit'   will appear
"RTN","KMPUG2",64,0)
 ;
"RTN","KMPUG2",65,0)
 ;  footer appears in the middle of the screen
"RTN","KMPUG2",66,0)
 ;
"RTN","KMPUG2",67,0)
 ;  VALUE - value returned:
"RTN","KMPUG2",68,0)
 ;          "" - if IOSL or IOM are not defined
"RTN","KMPUG2",69,0)
 ;           0 - if an uparrow '^' is entered
"RTN","KMPUG2",70,0)
 ;           1 - if return is entered
"RTN","KMPUG2",71,0)
 ;
"RTN","KMPUG2",72,0)
 S VALUE=""
"RTN","KMPUG2",73,0)
 I '$G(IOSL)!('$G(IOM)) Q
"RTN","KMPUG2",74,0)
 N DIR,I,X,Y
"RTN","KMPUG2",75,0)
 I $G(FOOTER)']""  S FOOTER="Press RETURN to continue, '^' to exit"
"RTN","KMPUG2",76,0)
 I $G(IORVON)']""!($G(IORVOFF)']"") N IORVON,IORVOFF,X D 
"RTN","KMPUG2",77,0)
 .S X="IORVON;IORVOFF" D ENDR^%ZISS
"RTN","KMPUG2",78,0)
 S FOOTER=IORVON_" "_FOOTER_" "_IORVOFF
"RTN","KMPUG2",79,0)
 S DIR(0)="EA",DIR("A")=$J(" ",(IOM-$L(FOOTER)/2))_FOOTER
"RTN","KMPUG2",80,0)
 F I=$Y:1:(IOSL-3) W !
"RTN","KMPUG2",81,0)
 D ^DIR S VALUE=Y
"RTN","KMPUG2",82,0)
 Q
"RTN","KMPUG2",83,0)
 ;
"RTN","KMPUG2",84,0)
HELP ;--help display for options.
"RTN","KMPUG2",85,0)
 N KMPUOUT
"RTN","KMPUG2",86,0)
 W @IOF
"RTN","KMPUG2",87,0)
 W !,"A: Angle data titles..:  Angle the titles (for Vertical Graphs only)."
"RTN","KMPUG2",88,0)
 W !,"               Example:    __________"
"RTN","KMPUG2",89,0)
 W !,"                           |        |"
"RTN","KMPUG2",90,0)
 W !,"                           |        |"
"RTN","KMPUG2",91,0)
 W !,"                           |        |"
"RTN","KMPUG2",92,0)
 W !,"                           __________"
"RTN","KMPUG2",93,0)
 W !,"                           J  F  M  A"
"RTN","KMPUG2",94,0)
 W !,"                            a  e  a  p"
"RTN","KMPUG2",95,0)
 W !,"                             n  b  r  r"
"RTN","KMPUG2",96,0)
 W !
"RTN","KMPUG2",97,0)
 W !,"D: Double space data..: Will place an empty column/row between graph bars"
"RTN","KMPUG2",98,0)
 W !,"                        (it is highly recommended that double spacing be used"
"RTN","KMPUG2",99,0)
 W !,"                        with Vertical graphs)."
"RTN","KMPUG2",100,0)
 W !
"RTN","KMPUG2",101,0)
 W !,"G: Grid...............: Print grid lines on graph."
"RTN","KMPUG2",102,0)
 W !,"               example:   ______________________________"
"RTN","KMPUG2",103,0)
 W !,"                     Jan  |    |    |    |    |    |    |"
"RTN","KMPUG2",104,0)
 W !,"                     Feb  |    |    |    |    |    |    |"
"RTN","KMPUG2",105,0)
 W !,"                     Mar  |    |    |    |    |    |    |"
"RTN","KMPUG2",106,0)
 W !,"                     Apr  |    |    |    |    |    |    |"
"RTN","KMPUG2",107,0)
 W !,"                          ______________________________"
"RTN","KMPUG2",108,0)
 D FTR("",.KMPUOUT) Q:'KMPUOUT  W @IOF
"RTN","KMPUG2",109,0)
 W !,"S: Scientific Notation: If values are 1000 or greater the graph will normally"
"RTN","KMPUG2",110,0)
 W !,"                        display a description as...: (x10k),  (x100k), etc."
"RTN","KMPUG2",111,0)
 W !,"                      - Scientific notation will be: (x10^2), (x10^3), etc."
"RTN","KMPUG2",112,0)
 W !
"RTN","KMPUG2",113,0)
 W !,"V: Vertical graph.....: The default is horizontal display."
"RTN","KMPUG2",114,0)
 W !,"                      - Selecting this option will display data vertically"
"RTN","KMPUG2",115,0)
 W !,"                        (graph bars running top to bottom)."
"RTN","KMPUG2",116,0)
 D FTR("Press <RET> to continue: ") W @IOF,!!!
"RTN","KMPUG2",117,0)
 Q
"RTN","KMPUG2",118,0)
 ;
"RTN","KMPUG2",119,0)
OPT ;list of options
"RTN","KMPUG2",120,0)
 ;;A;Angle data titles (vertical graph only).
"RTN","KMPUG2",121,0)
 ;;D;Double space data.
"RTN","KMPUG2",122,0)
 ;;G;Grid.
"RTN","KMPUG2",123,0)
 ;;S;Scientific Notation.
"RTN","KMPUG2",124,0)
 ;;V;Vertical graph.
"RTN","KMPUGV")
0^19^B6508235
"RTN","KMPUGV",1,0)
KMPUGV ;SFISC/RAK - Capacity Management Graphics (Vertical Graphs);23 Oct 1998
"RTN","KMPUGV",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUGV",3,0)
EN ;-- entry point.
"RTN","KMPUGV",4,0)
 D DRAW,TITLES,DATA W IOG0
"RTN","KMPUGV",5,0)
 I $D(KMPUTAR) D  Q
"RTN","KMPUGV",6,0)
 .D WP^KMPU11(KMPUTAR,5,24,(RIGHT+5),IOM,1)
"RTN","KMPUGV",7,0)
 D CONT^KMPUG
"RTN","KMPUGV",8,0)
 Q
"RTN","KMPUGV",9,0)
 ;
"RTN","KMPUGV",10,0)
DATA ;-- display data in graph.
"RTN","KMPUGV",11,0)
 W IOG0 S DX=$S(KMPUOPT["D":9,1:10),BAR=0,I=0
"RTN","KMPUGV",12,0)
 F  S I=$O(@KMPUAR@(I)) Q:I=""  I $D(@KMPUAR@(I,0)) S DATA=@KMPUAR@(I,0) D 
"RTN","KMPUGV",13,0)
 .S XCOORD=$P(DATA,U,2),END=(XCOORD-KMPUSTRT) ;-STEP)
"RTN","KMPUGV",14,0)
 .S DY=14,DX=DX+$S(KMPUOPT["D":2,1:1)
"RTN","KMPUGV",15,0)
 .; if no data quit
"RTN","KMPUGV",16,0)
 .Q:$P(@KMPUAR@(I,0),U,2)']""
"RTN","KMPUGV",17,0)
 .F I1=0:STEP:END X IOXY W @BAR(BAR),! S DY=DY-1 Q:DY=5
"RTN","KMPUGV",18,0)
 .S BAR=$S(BAR=1:0,1:1)
"RTN","KMPUGV",19,0)
 Q
"RTN","KMPUGV",20,0)
 ;
"RTN","KMPUGV",21,0)
DRAW ;-- draw graph.
"RTN","KMPUGV",22,0)
 S RIGHT=$S(KMPUOPT["D":(YNUM*2),1:(YNUM+1))+10
"RTN","KMPUGV",23,0)
 W @IOF,!,IOG1 S DX=10
"RTN","KMPUGV",24,0)
 ; draw left line
"RTN","KMPUGV",25,0)
 F I=1:1:6 S DY=4+I X IOXY W IOVL S DY=15-I X IOXY W IOVL
"RTN","KMPUGV",26,0)
 ; draw left top corner ;and bottom corners
"RTN","KMPUGV",27,0)
 ;S DY=4 X IOXY W IOTLC ;S DY=15 X IOXY W IOBLC,!
"RTN","KMPUGV",28,0)
 ; draw top and bottom lines
"RTN","KMPUGV",29,0)
 ;F DX=(DX+1):1:(RIGHT-1) S DY=5 X IOXY W IOHL,! S DY=15 X IOXY W "s",!
"RTN","KMPUGV",30,0)
 F DX=(DX+1):1:(RIGHT-1) S DY=14 X IOXY W "s",!
"RTN","KMPUGV",31,0)
 ; draw right top corner ;and bottom corners
"RTN","KMPUGV",32,0)
 ;S DX=RIGHT,DY=5 X IOXY W IOTRC ;S DY=15 X IOXY W IOBRC,!
"RTN","KMPUGV",33,0)
 ; draw right line
"RTN","KMPUGV",34,0)
 S DX=RIGHT F I=1:1:6 S DY=4+I X IOXY W IOVL S DY=16-I X IOXY W IOVL
"RTN","KMPUGV",35,0)
 ; draw 'hash marks' on left line for relative values
"RTN","KMPUGV",36,0)
 S DX=9,DY=14 X IOXY W "s",! ;W IOLT,!
"RTN","KMPUGV",37,0)
 F DY=13:-1:4 X IOXY W "s",! ;W IOMT,!
"RTN","KMPUGV",38,0)
 ; print grid
"RTN","KMPUGV",39,0)
 I KMPUOPT["G" F DY=14:-1:4 F DX=11:1:(RIGHT-1) X IOXY W "s",!
"RTN","KMPUGV",40,0)
 W IOG0
"RTN","KMPUGV",41,0)
 Q
"RTN","KMPUGV",42,0)
 ;
"RTN","KMPUGV",43,0)
TITLES ;-- print graph titles.
"RTN","KMPUGV",44,0)
 W IOG0
"RTN","KMPUGV",45,0)
 ; print first and second line of title
"RTN","KMPUGV",46,0)
 S DX=(IOM-$L($P(TITLE,U))\2+1),DY=0 X IOXY W $P(TITLE,U),!
"RTN","KMPUGV",47,0)
 S DX=(IOM-$L($P(TITLE,U,2))\2+1),DY=1 X IOXY W $P(TITLE,U,2),!
"RTN","KMPUGV",48,0)
 ; print x title at bottom
"RTN","KMPUGV",49,0)
 S DX=(10-$L(XTITLE)),DY=3 X IOXY W IOUON,XTITLE,IOUOFF
"RTN","KMPUGV",50,0)
 ; if div>1 write (x div)
"RTN","KMPUGV",51,0)
 W:DIV>1 " <x",DIVT,">"
"RTN","KMPUGV",52,0)
 W !
"RTN","KMPUGV",53,0)
 ; print y title
"RTN","KMPUGV",54,0)
 S DY=15,DX=$S(KMPUOPT["A":1,1:2)
"RTN","KMPUGV",55,0)
 F I=1:1:8 D 
"RTN","KMPUGV",56,0)
 .X IOXY W IOUON,$E(YTITLE,I),IOUOFF,! S DY=DY+1
"RTN","KMPUGV",57,0)
 .I KMPUOPT["A" S DX=DX+1
"RTN","KMPUGV",58,0)
 ; print relative values next to hash marks
"RTN","KMPUGV",59,0)
 S NUM=(SCALE+KMPUSTRT)
"RTN","KMPUGV",60,0)
 S DY=14,DX=9-$L($FN((KMPUSTRT/DIV),"",DEC1))
"RTN","KMPUGV",61,0)
 X IOXY W $FN((KMPUSTRT/DIV),"",DEC1),!
"RTN","KMPUGV",62,0)
 F DY=13:-1:4 D 
"RTN","KMPUGV",63,0)
 .S DX=(9-$L($FN((NUM/DIV),"",DEC1)))
"RTN","KMPUGV",64,0)
 .X IOXY W $FN((NUM/DIV),"",DEC1),! S NUM=NUM+SCALE
"RTN","KMPUGV",65,0)
 ; print data titles
"RTN","KMPUGV",66,0)
 S ZDX=11,I=0
"RTN","KMPUGV",67,0)
 F  S I=$O(@KMPUAR@(I)) Q:'I  I $D(@KMPUAR@(I,0)) D 
"RTN","KMPUGV",68,0)
 .S YTITLE=$E($P(@KMPUAR@(I,0),U),1,14),DX=ZDX
"RTN","KMPUGV",69,0)
 .I KMPUOPT["A" F I1=1:1:8 S DY=14+I1 X IOXY W $E(YTITLE,I1),! S DX=DX+1
"RTN","KMPUGV",70,0)
 .I KMPUOPT'["A" F I1=1:1:8 S DY=14+I1 X IOXY W $E(YTITLE,I1),!
"RTN","KMPUGV",71,0)
 .S ZDX=ZDX+$S(KMPUOPT["D":2,1:1)
"RTN","KMPUGV",72,0)
 Q
"RTN","KMPUTL")
0^20^B145461
"RTN","KMPUTL",1,0)
KMPUTL ;SF/RAK - Capacity Management Utility ; 12/09/99
"RTN","KMPUTL",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUTL",3,0)
 ;
"RTN","KMPUTL",4,0)
VERSION(KMPUAPPL) ;-- extrinsic function - version^patches
"RTN","KMPUTL",5,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUTL",6,0)
 ; KMPUAPPL... CapMan application: 1 - SAGG
"RTN","KMPUTL",7,0)
 ;                                 2 - RUM
"RTN","KMPUTL",8,0)
 ;
"RTN","KMPUTL",9,0)
 ; Return: Version^Patches
"RTN","KMPUTL",10,0)
 ;         null if no application
"RTN","KMPUTL",11,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUTL",12,0)
 ;
"RTN","KMPUTL",13,0)
 Q:'$G(KMPUAPPL) ""
"RTN","KMPUTL",14,0)
 ; sagg
"RTN","KMPUTL",15,0)
 Q:KMPUAPPL=1 ""
"RTN","KMPUTL",16,0)
 ; rum
"RTN","KMPUTL",17,0)
 Q:KMPUAPPL=2 $$VERSION^KMPRUTL
"RTN","KMPUTL",18,0)
 ;
"RTN","KMPUTL",19,0)
 Q ""
"RTN","KMPUTL1")
0^21^B3675081
"RTN","KMPUTL1",1,0)
KMPUTL1 ;SF/RAK - Capacity Management Date Range Utility ; 11/19/98
"RTN","KMPUTL1",2,0)
 ;;2.0T20;CAPACITY MANAGEMENT - RUM;;Feb 06, 2003
"RTN","KMPUTL1",3,0)
DATERNG(KMPUY,KMPUSTR,KMPUEND) ;-- date range
"RTN","KMPUTL1",4,0)
 ;---------------------------------------------------------------------
"RTN","KMPUTL1",5,0)
 ; KMPUY..... Value returned in four pieces:
"RTN","KMPUTL1",6,0)
 ;            fmstartdate^fmenddate^ouputstartdate^outputenddate
"RTN","KMPUTL1",7,0)
 ;
"RTN","KMPUTL1",8,0)
 ;            Piece one and two are the date ranges in fileman format.
"RTN","KMPUTL1",9,0)
 ;            Piece three and four are the same dates in output format:
"RTN","KMPUTL1",10,0)
 ;                             dy-Mon-yr
"RTN","KMPUTL1",11,0)
 ;
"RTN","KMPUTL1",12,0)
 ;                               ********
"RTN","KMPUTL1",13,0)
 ;                               * NOTE *
"RTN","KMPUTL1",14,0)
 ;                               ********
"RTN","KMPUTL1",15,0)
 ;          - The first piece will always be the earliest date entered.
"RTN","KMPUTL1",16,0)
 ;
"RTN","KMPUTL1",17,0)
 ;  Optional Parameters:
"RTN","KMPUTL1",18,0)
 ;
"RTN","KMPUTL1",19,0)
 ; KMPUSTR... If defined, the earliest date that may be selected.
"RTN","KMPUTL1",20,0)
 ;            (must be in fileman format)
"RTN","KMPUTL1",21,0)
 ;
"RTN","KMPUTL1",22,0)
 ; KMPUEND... If defined, the latest date that may be selected.
"RTN","KMPUTL1",23,0)
 ;            (must be in fileman format)
"RTN","KMPUTL1",24,0)
 ;-----------------------------------------------------------------------
"RTN","KMPUTL1",25,0)
 ;
"RTN","KMPUTL1",26,0)
 N DATE1,DATE2,DIR,DIRUT,LINE,X,Y
"RTN","KMPUTL1",27,0)
 ;
"RTN","KMPUTL1",28,0)
 S KMPUY="",KMPUSTR=$G(KMPUSTR),KMPUEND=$G(KMPUEND)
"RTN","KMPUTL1",29,0)
 ;
"RTN","KMPUTL1",30,0)
RANGE ;-- Ask date ranges
"RTN","KMPUTL1",31,0)
 S DIR(0)="DOA^"_$S(KMPUSTR:KMPUSTR,1:"")_":"_$S(KMPUEND:KMPUEND,1:"")_":E)"
"RTN","KMPUTL1",32,0)
 S DIR("A")="Start with Date: "
"RTN","KMPUTL1",33,0)
 S:KMPUSTR DIR("B")=$$FMTE^XLFDT(KMPUSTR,2)
"RTN","KMPUTL1",34,0)
 S DIR("?")=" "
"RTN","KMPUTL1",35,0)
 S DIR("?",1)="Enter the starting date.",LINE=2
"RTN","KMPUTL1",36,0)
 ; if starting date.
"RTN","KMPUTL1",37,0)
 I KMPUSTR D 
"RTN","KMPUTL1",38,0)
 .S DIR("?",LINE)="Date must not precede "_$$FMTE^XLFDT(KMPUSTR)
"RTN","KMPUTL1",39,0)
 .S LINE=LINE+1
"RTN","KMPUTL1",40,0)
 ; if ending date.
"RTN","KMPUTL1",41,0)
 I KMPUEND S DIR("?",LINE)="Date must not follow "_$$FMTE^XLFDT(KMPUEND)
"RTN","KMPUTL1",42,0)
 W ! D ^DIR I $D(DIRUT) S KMPUY="" Q
"RTN","KMPUTL1",43,0)
 S DATE1=Y
"RTN","KMPUTL1",44,0)
 S DIR("A")="  End with Date: "
"RTN","KMPUTL1",45,0)
 S:KMPUEND DIR("B")=$$FMTE^XLFDT(KMPUEND,2)
"RTN","KMPUTL1",46,0)
 S DIR("?",1)="Enter the ending date."
"RTN","KMPUTL1",47,0)
 D ^DIR G:Y="" RANGE I Y="^" S KMPUY="" Q
"RTN","KMPUTL1",48,0)
 S DATE2=Y
"RTN","KMPUTL1",49,0)
 ; Set earliest date into first piece.
"RTN","KMPUTL1",50,0)
 S KMPUY=$S(DATE2<DATE1:DATE2,1:DATE1)_U_$S(DATE2>DATE1:DATE2,1:DATE1)
"RTN","KMPUTL1",51,0)
 S $P(KMPUY,U,3)=$$FMTE^XLFDT($P(KMPUY,U))
"RTN","KMPUTL1",52,0)
 S $P(KMPUY,U,4)=$$FMTE^XLFDT($P(KMPUY,U,2))
"RTN","KMPUTL1",53,0)
 Q
"SEC","^DIC",8971.1,8971.1,0,"AUDIT")
@
"SEC","^DIC",8971.1,8971.1,0,"DD")
@
"SEC","^DIC",8971.1,8971.1,0,"DEL")
@
"SEC","^DIC",8971.1,8971.1,0,"LAYGO")
@
"SEC","^DIC",8971.1,8971.1,0,"RD")
@
"SEC","^DIC",8971.1,8971.1,0,"WR")
@
"VER")
8.0^22.0
"^DD",8971.1,8971.1,0)
FIELD^^3.08^129
"^DD",8971.1,8971.1,0,"DDA")
N
"^DD",8971.1,8971.1,0,"DT")
3030328
"^DD",8971.1,8971.1,0,"ID","W")
D:$G(Y) ID^KMPRUTL(Y)
"^DD",8971.1,8971.1,0,"IX","ANODE",8971.1,.03)

"^DD",8971.1,8971.1,0,"IX","B",8971.1,.01)

"^DD",8971.1,8971.1,0,"NM","RESOURCE USAGE MONITOR")

"^DD",8971.1,8971.1,0,"VRPK")
CAPACITY MANAGEMENT - RUM
"^DD",8971.1,8971.1,.01,0)
DATE^RD^^0;1^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",8971.1,8971.1,.01,1,0)
^.1
"^DD",8971.1,8971.1,.01,1,1,0)
8971.1^B
"^DD",8971.1,8971.1,.01,1,1,1)
S ^KMPR(8971.1,"B",$E(X,1,30),DA)=""
"^DD",8971.1,8971.1,.01,1,1,2)
K ^KMPR(8971.1,"B",$E(X,1,30),DA)
"^DD",8971.1,8971.1,.01,3)
Enter the DATE on which the data was gathered.
"^DD",8971.1,8971.1,.01,21,0)
^^2^2^3030330^
"^DD",8971.1,8971.1,.01,21,1,0)
The DATE on which the data for this option, protocol or RPC was gathered 
"^DD",8971.1,8971.1,.01,21,2,0)
for this computer node.
"^DD",8971.1,8971.1,.01,"DT")
3030330
"^DD",8971.1,8971.1,.02,0)
SENT TO CM NATIONAL DATABASE^S^0:NO;1:YES;^0;2^Q
"^DD",8971.1,8971.1,.02,1,0)
^.1^^0
"^DD",8971.1,8971.1,.02,"DT")
2981013
"^DD",8971.1,8971.1,.03,0)
NODE^F^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",8971.1,8971.1,.03,1,0)
^.1
"^DD",8971.1,8971.1,.03,1,1,0)
8971.1^ANODE
"^DD",8971.1,8971.1,.03,1,1,1)
S ^KMPR(8971.1,"ANODE",$E(X,1,30),DA)=""
"^DD",8971.1,8971.1,.03,1,1,2)
K ^KMPR(8971.1,"ANODE",$E(X,1,30),DA)
"^DD",8971.1,8971.1,.03,1,1,"DT")
2981104
"^DD",8971.1,8971.1,.03,3)
Answer must be 1-30 characters in length.
"^DD",8971.1,8971.1,.03,21,0)
^^2^2^3030330^
"^DD",8971.1,8971.1,.03,21,1,0)
The computer NODE on which the data for this option, protocol or RPC was 
"^DD",8971.1,8971.1,.03,21,2,0)
gathered.
"^DD",8971.1,8971.1,.03,"DT")
3030330
"^DD",8971.1,8971.1,.04,0)
OPTION^F^^0;4^K:$L(X)>32!($L(X)<3) X
"^DD",8971.1,8971.1,.04,1,0)
^.1^^0
"^DD",8971.1,8971.1,.04,3)
Answer must be 3-32 characters in length.
"^DD",8971.1,8971.1,.04,"DT")
2981027
"^DD",8971.1,8971.1,.05,0)
PROTOCOL^F^^0;5^K:$L(X)>63!($L(X)<3) X
"^DD",8971.1,8971.1,.05,3)
Answer must be 3-63 characters in length.
"^DD",8971.1,8971.1,.05,"DT")
2981005
"^DD",8971.1,8971.1,.06,0)
NODE TYPE^S^DS:DISK SERVER;TM:TASKMAN;US:USER;UT:USER + TASKMAN;^0;6^Q
"^DD",8971.1,8971.1,.06,"DT")
2981005
"^DD",8971.1,8971.1,.07,0)
RPC^F^^0;7^K:$L(X)>30!($L(X)<3) X
"^DD",8971.1,8971.1,.07,3)
Answer must be 3-30 characters in length.
"^DD",8971.1,8971.1,.07,"DT")
2981014
"^DD",8971.1,8971.1,.08,0)
RUM DESIGNATION^S^1:TASKMAN;2:OPTION;3:BROKER;4:USERS;5:OTHER;^0;8^Q
"^DD",8971.1,8971.1,.08,"DT")
3030327
"^DD",8971.1,8971.1,.09,0)
HL7^F^^0;9^K:$L(X)>30!($L(X)<1) X
"^DD",8971.1,8971.1,.09,3)
Answer must be 1-30 characters in length.
"^DD",8971.1,8971.1,.09,"DT")
2981105
"^DD",8971.1,8971.1,1.01,0)
CPU TIME (PT)^F^^1;1^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.01,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.01,21,0)
^^2^2^3030330^
"^DD",8971.1,8971.1,1.01,21,1,0)
The amount of cpu time that this option, protocol or RPC generated on this
"^DD",8971.1,8971.1,1.01,21,2,0)
computer node over one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.01,"DT")
3030330
"^DD",8971.1,8971.1,1.02,0)
DIO (PT)^F^^1;2^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.02,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.02,21,0)
^^2^2^3030330^
"^DD",8971.1,8971.1,1.02,21,1,0)
The amount of DIOs that this option, protocol or RPC generated on this
"^DD",8971.1,8971.1,1.02,21,2,0)
computer node over one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.02,"DT")
3030330
"^DD",8971.1,8971.1,1.03,0)
BIO (PT)^F^^1;3^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.03,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.03,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.03,21,1,0)
The amount of BIOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,1.03,21,2,0)
workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.03,"DT")
3030328
"^DD",8971.1,8971.1,1.04,0)
PAGE FAULT (PT)^F^^1;4^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.04,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.04,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.04,21,1,0)
The amount of page faults that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,1.04,21,2,0)
one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.04,"DT")
3030328
"^DD",8971.1,8971.1,1.05,0)
M COMMAND (PT)^F^^1;5^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.05,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.05,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.05,21,1,0)
The amount of M commands that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,1.05,21,2,0)
one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.05,"DT")
3030328
"^DD",8971.1,8971.1,1.06,0)
GLO (PT)^F^^1;6^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.06,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.06,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.06,21,1,0)
The amount of GLOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,1.06,21,2,0)
workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.06,"DT")
3030328
"^DD",8971.1,8971.1,1.07,0)
ELAPSED TIME (PT)^F^^1;7^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.07,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.07,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.07,21,1,0)
The amount of elapsed time that this option, protocol or RPC generated
"^DD",8971.1,8971.1,1.07,21,2,0)
over one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.07,"DT")
3030328
"^DD",8971.1,8971.1,1.08,0)
OCCURRENCES (PT)^F^^1;8^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,1.08,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,1.08,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.08,21,1,0)
The number of occurrences generated by this option, protocol or RPC over
"^DD",8971.1,8971.1,1.08,21,2,0)
one workday during prime-time (PT) hours.
"^DD",8971.1,8971.1,1.08,"DT")
3030329
"^DD",8971.1,8971.1,1.101,0)
HOUR 0 COUNT (WD)^F^^1.1;1^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.101,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.101,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.101,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.101,21,2,0)
(WD) hour 0.
"^DD",8971.1,8971.1,1.101,"DT")
3030329
"^DD",8971.1,8971.1,1.102,0)
HOUR 1 COUNT (WD)^F^^1.1;2^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.102,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.102,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.102,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.102,21,2,0)
(WD) hour 1.
"^DD",8971.1,8971.1,1.102,"DT")
3030329
"^DD",8971.1,8971.1,1.103,0)
HOUR 2 COUNT (WD)^F^^1.1;3^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.103,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.103,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.103,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.103,21,2,0)
(WD) hour 2.
"^DD",8971.1,8971.1,1.103,"DT")
3030329
"^DD",8971.1,8971.1,1.104,0)
HOUR 3 COUNT (WD)^F^^1.1;4^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.104,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.104,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.104,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.104,21,2,0)
(WD) hour 3.
"^DD",8971.1,8971.1,1.104,"DT")
3030329
"^DD",8971.1,8971.1,1.105,0)
HOUR 4 COUNT (WD)^F^^1.1;5^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.105,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.105,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.105,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.105,21,2,0)
(WD) hour 4.
"^DD",8971.1,8971.1,1.105,"DT")
3030329
"^DD",8971.1,8971.1,1.106,0)
HOUR 5 COUNT (WD)^F^^1.1;6^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.106,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.106,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.106,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.106,21,2,0)
(WD) hour 5.
"^DD",8971.1,8971.1,1.106,"DT")
3030329
"^DD",8971.1,8971.1,1.107,0)
HOUR 6 COUNT (WD)^F^^1.1;7^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.107,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.107,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.107,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.107,21,2,0)
(WD) hour 6.
"^DD",8971.1,8971.1,1.107,"DT")
3030329
"^DD",8971.1,8971.1,1.108,0)
HOUR 7 COUNT (WD)^F^^1.1;8^K:$L(X)>12!($L(X)<1) X
"^DD",8971.1,8971.1,1.108,3)
Answer must be 1-12 characters in length
"^DD",8971.1,8971.1,1.108,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.108,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.108,21,2,0)
(WD) hour 7.
"^DD",8971.1,8971.1,1.108,"DT")
3030329
"^DD",8971.1,8971.1,1.109,0)
HOUR 8 COUNT (WD)^F^^1.1;9^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.109,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.109,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.109,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.109,21,2,0)
(WD) hour 8.
"^DD",8971.1,8971.1,1.109,"DT")
3030329
"^DD",8971.1,8971.1,1.11,0)
HOUR 9 COUNT (WD)^F^^1.1;10^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.11,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.11,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.11,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.11,21,2,0)
(WD) hour 9.
"^DD",8971.1,8971.1,1.11,"DT")
3030329
"^DD",8971.1,8971.1,1.111,0)
HOUR 10 COUNT (WD)^F^^1.1;11^K:$L(X)>12!($L(X)<1) X
"^DD",8971.1,8971.1,1.111,3)
Answer must be 1-12 characters in length
"^DD",8971.1,8971.1,1.111,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.111,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.111,21,2,0)
(WD) hour 10.
"^DD",8971.1,8971.1,1.111,"DT")
3030329
"^DD",8971.1,8971.1,1.112,0)
HOUR 11 COUNT (WD)^F^^1.1;12^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.112,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.112,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.112,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.112,21,2,0)
(WD) hour 11.
"^DD",8971.1,8971.1,1.112,"DT")
3030329
"^DD",8971.1,8971.1,1.113,0)
HOUR 12 COUNT (WD)^F^^1.1;13^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.113,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.113,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.113,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.113,21,2,0)
(WD) hour 12.
"^DD",8971.1,8971.1,1.113,"DT")
3030329
"^DD",8971.1,8971.1,1.114,0)
HOUR 13 COUNT (WD)^F^^1.1;14^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.114,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.114,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.114,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.114,21,2,0)
(WD) hour 13.
"^DD",8971.1,8971.1,1.114,"DT")
3030329
"^DD",8971.1,8971.1,1.115,0)
HOUR 14 COUNT (WD)^F^^1.1;15^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.115,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.115,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.115,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.115,21,2,0)
(WD) hour 14.
"^DD",8971.1,8971.1,1.115,"DT")
3030329
"^DD",8971.1,8971.1,1.116,0)
HOUR 15 COUNT (WD)^F^^1.1;16^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.116,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.116,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.116,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.116,21,2,0)
(WD) hour 15.
"^DD",8971.1,8971.1,1.116,"DT")
3030329
"^DD",8971.1,8971.1,1.117,0)
HOUR 16 COUNT (WD)^F^^1.1;17^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.117,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.117,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.117,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.117,21,2,0)
(WD) hour 16.
"^DD",8971.1,8971.1,1.117,"DT")
3030329
"^DD",8971.1,8971.1,1.118,0)
HOUR 17 COUNT (WD)^F^^1.1;18^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.118,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.118,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.118,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.118,21,2,0)
(WD) hour 17.
"^DD",8971.1,8971.1,1.118,"DT")
3030329
"^DD",8971.1,8971.1,1.119,0)
HOUR 18 COUNT (WD)^F^^1.1;19^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.119,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.119,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.119,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.119,21,2,0)
(WD) hour 18.
"^DD",8971.1,8971.1,1.119,"DT")
3030329
"^DD",8971.1,8971.1,1.12,0)
HOUR 19 COUNT (WD)^F^^1.1;20^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.12,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.12,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.12,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.12,21,2,0)
(WD) hour 19.
"^DD",8971.1,8971.1,1.12,"DT")
3030329
"^DD",8971.1,8971.1,1.121,0)
HOUR 20 COUNT (WD)^F^^1.1;21^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.121,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.121,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.121,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.121,21,2,0)
(WD) hour 20.
"^DD",8971.1,8971.1,1.121,"DT")
3030329
"^DD",8971.1,8971.1,1.122,0)
HOUR 21 COUNT (WD)^F^^1.1;22^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.122,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.122,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.122,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.122,21,2,0)
(WD) hour 21.
"^DD",8971.1,8971.1,1.122,"DT")
3030329
"^DD",8971.1,8971.1,1.123,0)
HOUR 22 COUNT (WD)^F^^1.1;23^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.123,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.123,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.123,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.123,21,2,0)
(WD) hour 22.
"^DD",8971.1,8971.1,1.123,"DT")
3030329
"^DD",8971.1,8971.1,1.124,0)
HOUR 23 COUNT (WD)^F^^1.1;24^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.124,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.124,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,1.124,21,1,0)
The number of occurrences for this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.124,21,2,0)
(WD) hour 23.
"^DD",8971.1,8971.1,1.124,"DT")
3030329
"^DD",8971.1,8971.1,1.201,0)
HOUR 0 USERS (WD)^F^^1.2;1^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.201,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.201,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.201,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.201,21,2,0)
(WD) hour 0.
"^DD",8971.1,8971.1,1.201,"DT")
3030328
"^DD",8971.1,8971.1,1.202,0)
HOUR 1 USERS (WD)^F^^1.2;2^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.202,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.202,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.202,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.202,21,2,0)
(WD) hour 1.
"^DD",8971.1,8971.1,1.202,"DT")
3030328
"^DD",8971.1,8971.1,1.203,0)
HOUR 2 USERS (WD)^F^^1.2;3^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.203,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.203,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.203,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.203,21,2,0)
(WD) hour 2.
"^DD",8971.1,8971.1,1.203,"DT")
3030328
"^DD",8971.1,8971.1,1.204,0)
HOUR 3 USERS (WD)^F^^1.2;4^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.204,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.204,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.204,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.204,21,2,0)
(WD) hour 3.
"^DD",8971.1,8971.1,1.204,"DT")
3030328
"^DD",8971.1,8971.1,1.205,0)
HOUR 4 USERS (WD)^F^^1.2;5^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.205,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.205,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.205,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.205,21,2,0)
(WD) hour 4.
"^DD",8971.1,8971.1,1.205,"DT")
3030328
"^DD",8971.1,8971.1,1.206,0)
HOUR 5 USERS (WD)^F^^1.2;6^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.206,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.206,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.206,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.206,21,2,0)
(WD) hour 5.
"^DD",8971.1,8971.1,1.206,"DT")
3030328
"^DD",8971.1,8971.1,1.207,0)
HOUR 6 USERS (WD)^F^^1.2;7^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.207,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.207,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.207,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.207,21,2,0)
(WD) hour 6.
"^DD",8971.1,8971.1,1.207,"DT")
3030328
"^DD",8971.1,8971.1,1.208,0)
HOUR 7 USERS (WD)^F^^1.2;8^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.208,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.208,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.208,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.208,21,2,0)
(WD) hour 7.
"^DD",8971.1,8971.1,1.208,"DT")
3030328
"^DD",8971.1,8971.1,1.209,0)
HOUR 8 USERS (WD)^F^^1.2;9^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.209,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.209,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.209,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.209,21,2,0)
(WD) hour 8.
"^DD",8971.1,8971.1,1.209,"DT")
3030328
"^DD",8971.1,8971.1,1.21,0)
HOUR 9 USERS (WD)^F^^1.2;10^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.21,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.21,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.21,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.21,21,2,0)
(WD) hour 9.
"^DD",8971.1,8971.1,1.21,"DT")
3030328
"^DD",8971.1,8971.1,1.211,0)
HOUR 10 USERS (WD)^F^^1.2;11^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.211,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.211,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.211,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.211,21,2,0)
(WD) hour 10.
"^DD",8971.1,8971.1,1.211,"DT")
3030328
"^DD",8971.1,8971.1,1.212,0)
HOUR 11 USERS (WD)^F^^1.2;12^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.212,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.212,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.212,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.212,21,2,0)
(WD) hour 11.
"^DD",8971.1,8971.1,1.212,"DT")
3030328
"^DD",8971.1,8971.1,1.213,0)
HOUR 12 USERS (WD)^F^^1.2;13^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.213,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.213,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.213,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.213,21,2,0)
(WD) hour 12.
"^DD",8971.1,8971.1,1.213,"DT")
3030328
"^DD",8971.1,8971.1,1.214,0)
HOUR 13 USERS (WD)^F^^1.2;14^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.214,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.214,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.214,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.214,21,2,0)
(WD) hour 13.
"^DD",8971.1,8971.1,1.214,"DT")
3030328
"^DD",8971.1,8971.1,1.215,0)
HOUR 14 USERS (WD)^F^^1.2;15^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.215,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.215,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.215,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.215,21,2,0)
(WD) hour 14.
"^DD",8971.1,8971.1,1.215,"DT")
3030328
"^DD",8971.1,8971.1,1.216,0)
HOUR 15 USERS (WD)^F^^1.2;16^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.216,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.216,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.216,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.216,21,2,0)
(WD) hour 15.
"^DD",8971.1,8971.1,1.216,"DT")
3030328
"^DD",8971.1,8971.1,1.217,0)
HOUR 16 USERS (WD)^F^^1.2;17^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.217,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.217,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.217,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.217,21,2,0)
(WD) hour 16.
"^DD",8971.1,8971.1,1.217,"DT")
3030328
"^DD",8971.1,8971.1,1.218,0)
HOUR 17 USERS (WD)^F^^1.2;18^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.218,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.218,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.218,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.218,21,2,0)
(WD) hour 17.
"^DD",8971.1,8971.1,1.218,"DT")
3030328
"^DD",8971.1,8971.1,1.219,0)
HOUR 18 USERS (WD)^F^^1.2;19^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.219,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.219,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.219,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.219,21,2,0)
(WD) hour 18.
"^DD",8971.1,8971.1,1.219,"DT")
3030328
"^DD",8971.1,8971.1,1.22,0)
HOUR 19 USERS (WD)^F^^1.2;20^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.22,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.22,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.22,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.22,21,2,0)
(WD) hour 19.
"^DD",8971.1,8971.1,1.22,"DT")
3030328
"^DD",8971.1,8971.1,1.221,0)
HOUR 20 USERS (WD)^F^^1.2;21^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.221,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.221,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.221,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.221,21,2,0)
(WD) hour 20.
"^DD",8971.1,8971.1,1.221,"DT")
3030328
"^DD",8971.1,8971.1,1.222,0)
HOUR 21 USERS (WD)^F^^1.2;22^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.222,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.222,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.222,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.222,21,2,0)
(WD) hour 21.
"^DD",8971.1,8971.1,1.222,"DT")
3030328
"^DD",8971.1,8971.1,1.223,0)
HOUR 22 USERS (WD)^F^^1.2;23^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.223,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.223,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.223,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.223,21,2,0)
(WD) hour 22.
"^DD",8971.1,8971.1,1.223,"DT")
3030328
"^DD",8971.1,8971.1,1.224,0)
HOUR 23 USERS (WD)^F^^1.2;24^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,1.224,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,1.224,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,1.224,21,1,0)
The number of users that ran this option, protocol or RPC during workday
"^DD",8971.1,8971.1,1.224,21,2,0)
(WD) hour 23.
"^DD",8971.1,8971.1,1.224,"DT")
3030328
"^DD",8971.1,8971.1,2.01,0)
CPU TIME (NP)^F^^2;1^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.01,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.01,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.01,21,1,0)
The amount of cpu time that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,2.01,21,2,0)
one workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.01,"DT")
3030328
"^DD",8971.1,8971.1,2.02,0)
DIO (NP)^F^^2;2^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.02,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.02,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.02,21,1,0)
The amount of DIOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,2.02,21,2,0)
workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.02,"DT")
3030328
"^DD",8971.1,8971.1,2.03,0)
BIO (NP)^F^^2;3^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.03,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.03,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.03,21,1,0)
The amount of BIOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,2.03,21,2,0)
workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.03,"DT")
3030328
"^DD",8971.1,8971.1,2.04,0)
PAGE FAULT (NP)^F^^2;4^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.04,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.04,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.04,21,1,0)
The amount of page faults that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,2.04,21,2,0)
one workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.04,"DT")
3030328
"^DD",8971.1,8971.1,2.05,0)
M COMMAND (NP)^F^^2;5^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.05,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.05,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.05,21,1,0)
The amount of M commands that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,2.05,21,2,0)
one workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.05,"DT")
3030328
"^DD",8971.1,8971.1,2.06,0)
GLO (NP)^F^^2;6^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.06,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.06,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.06,21,1,0)
The amount of GLOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,2.06,21,2,0)
workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.06,"DT")
3030328
"^DD",8971.1,8971.1,2.07,0)
ELAPSED TIME (NP)^F^^2;7^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.07,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.07,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.07,21,1,0)
The amount of elapsed time that this option, protocol or RPC generated
"^DD",8971.1,8971.1,2.07,21,2,0)
over one workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.07,"DT")
3030328
"^DD",8971.1,8971.1,2.08,0)
OCCURRENCES (NP)^F^^2;8^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,2.08,3)
Answer must be 1-25 characters in length.
"^DD",8971.1,8971.1,2.08,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.08,21,1,0)
The number of occurrences generated by this option, protocol or RPC over
"^DD",8971.1,8971.1,2.08,21,2,0)
one workday during non-primetime (NP) hours.
"^DD",8971.1,8971.1,2.08,"DT")
3030329
"^DD",8971.1,8971.1,2.101,0)
HOUR 0 COUNT (NW)^F^^2.1;1^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.101,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.101,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.101,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.101,21,2,0)
non-workday (NW) hour 0.
"^DD",8971.1,8971.1,2.101,"DT")
3030329
"^DD",8971.1,8971.1,2.102,0)
HOUR 1 COUNT (NW)^F^^2.1;2^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.102,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.102,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.102,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.102,21,2,0)
non-workday (NW) hour 1.
"^DD",8971.1,8971.1,2.102,"DT")
3030329
"^DD",8971.1,8971.1,2.103,0)
HOUR 2 COUNT (NW)^F^^2.1;3^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.103,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.103,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.103,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.103,21,2,0)
non-workday (NW) hour 2.
"^DD",8971.1,8971.1,2.103,"DT")
3030329
"^DD",8971.1,8971.1,2.104,0)
HOUR 3 COUNT (NW)^F^^2.1;4^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.104,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.104,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.104,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.104,21,2,0)
non-workday (NW) hour 3.
"^DD",8971.1,8971.1,2.104,"DT")
3030329
"^DD",8971.1,8971.1,2.105,0)
HOUR 4 COUNT (NW)^F^^2.1;5^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.105,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.105,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.105,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.105,21,2,0)
non-workday (NW) hour 4.
"^DD",8971.1,8971.1,2.105,"DT")
3030329
"^DD",8971.1,8971.1,2.106,0)
HOUR 5 COUNT (NW)^F^^2.1;6^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.106,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.106,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.106,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.106,21,2,0)
non-workday (NW) hour 5.
"^DD",8971.1,8971.1,2.106,"DT")
3030329
"^DD",8971.1,8971.1,2.107,0)
HOUR 6 COUNT (NW)^F^^2.1;7^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.107,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.107,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.107,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.107,21,2,0)
non-workday (NW) hour 6.
"^DD",8971.1,8971.1,2.107,"DT")
3030329
"^DD",8971.1,8971.1,2.108,0)
HOUR 7 COUNT (NW)^F^^2.1;8^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.108,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.108,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.108,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.108,21,2,0)
non-workday (NW) hour 7.
"^DD",8971.1,8971.1,2.108,"DT")
3030329
"^DD",8971.1,8971.1,2.109,0)
HOUR 8 COUNT (NW)^F^^2.1;9^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.109,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.109,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.109,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.109,21,2,0)
non-workday (NW) hour 8.
"^DD",8971.1,8971.1,2.109,"DT")
3030329
"^DD",8971.1,8971.1,2.11,0)
HOUR 9 COUNT (NW)^F^^2.1;10^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.11,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.11,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.11,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.11,21,2,0)
non-workday (NW) hour 9.
"^DD",8971.1,8971.1,2.11,"DT")
3030329
"^DD",8971.1,8971.1,2.111,0)
HOUR 10 COUNT (NW)^F^^2.1;11^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.111,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.111,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.111,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.111,21,2,0)
non-workday (NW) hour 10.
"^DD",8971.1,8971.1,2.111,"DT")
3030329
"^DD",8971.1,8971.1,2.112,0)
HOUR 11 COUNT (NW)^F^^2.1;12^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.112,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.112,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.112,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.112,21,2,0)
non-workday (NW) hour 11.
"^DD",8971.1,8971.1,2.112,"DT")
3030329
"^DD",8971.1,8971.1,2.113,0)
HOUR 12 COUNT (NW)^F^^2.1;13^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.113,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.113,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.113,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.113,21,2,0)
non-workday (NW) hour 12.
"^DD",8971.1,8971.1,2.113,"DT")
3030329
"^DD",8971.1,8971.1,2.114,0)
HOUR 13 COUNT (NW)^F^^2.1;14^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.114,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.114,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.114,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.114,21,2,0)
non-workday (NW) hour 13.
"^DD",8971.1,8971.1,2.114,"DT")
3030329
"^DD",8971.1,8971.1,2.115,0)
HOUR 14 COUNT (NW)^F^^2.1;15^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.115,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.115,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.115,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.115,21,2,0)
non-workday (NW) hour 14.
"^DD",8971.1,8971.1,2.115,"DT")
3030329
"^DD",8971.1,8971.1,2.116,0)
HOUR 15 COUNT (NW)^F^^2.1;16^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.116,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.116,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.116,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.116,21,2,0)
non-workday (NW) hour 15.
"^DD",8971.1,8971.1,2.116,"DT")
3030329
"^DD",8971.1,8971.1,2.117,0)
HOUR 16 COUNT (NW)^F^^2.1;17^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.117,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.117,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.117,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.117,21,2,0)
non-workday (NW) hour 16.
"^DD",8971.1,8971.1,2.117,"DT")
3030329
"^DD",8971.1,8971.1,2.118,0)
HOUR 17 COUNT (NW)^F^^2.1;18^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.118,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.118,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.118,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.118,21,2,0)
non-workday (NW) hour 17.
"^DD",8971.1,8971.1,2.118,"DT")
3030329
"^DD",8971.1,8971.1,2.119,0)
HOUR 18 COUNT (NW)^F^^2.1;19^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.119,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.119,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.119,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.119,21,2,0)
non-workday (NW) hour 18.
"^DD",8971.1,8971.1,2.119,"DT")
3030329
"^DD",8971.1,8971.1,2.12,0)
HOUR 19 COUNT (NW)^F^^2.1;20^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.12,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.12,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.12,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.12,21,2,0)
non-workday (NW) hour 19.
"^DD",8971.1,8971.1,2.12,"DT")
3030329
"^DD",8971.1,8971.1,2.121,0)
HOUR 20 COUNT (NW)^F^^2.1;21^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.121,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.121,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.121,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.121,21,2,0)
non-workday (NW) hour 20.
"^DD",8971.1,8971.1,2.121,"DT")
3030329
"^DD",8971.1,8971.1,2.122,0)
HOUR 21 COUNT (NW)^F^^2.1;22^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.122,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.122,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.122,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.122,21,2,0)
non-workday (NW) hour 21.
"^DD",8971.1,8971.1,2.122,"DT")
3030329
"^DD",8971.1,8971.1,2.123,0)
HOUR 22 COUNT (NW)^F^^2.1;23^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.123,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.123,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.123,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.123,21,2,0)
non-workday (NW) hour 22.
"^DD",8971.1,8971.1,2.123,"DT")
3030329
"^DD",8971.1,8971.1,2.124,0)
HOUR 23 COUNT (NW)^F^^2.1;24^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.124,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.124,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,2.124,21,1,0)
The number of occurrences for this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.124,21,2,0)
non-workday (NW) hour 23.
"^DD",8971.1,8971.1,2.124,"DT")
3030329
"^DD",8971.1,8971.1,2.201,0)
HOUR 0 USERS (NW)^F^^2.2;1^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.201,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.201,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.201,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.201,21,2,0)
non-workday (NW) hour 0.
"^DD",8971.1,8971.1,2.201,"DT")
3030328
"^DD",8971.1,8971.1,2.202,0)
HOUR 1 USERS (NW)^F^^2.2;2^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.202,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.202,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.202,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.202,21,2,0)
non-workday (NW) hour 1.
"^DD",8971.1,8971.1,2.202,"DT")
3030328
"^DD",8971.1,8971.1,2.203,0)
HOUR 2 USERS (NW)^F^^2.2;3^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.203,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.203,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.203,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.203,21,2,0)
non-workday (NW) hour 2.
"^DD",8971.1,8971.1,2.203,"DT")
3030328
"^DD",8971.1,8971.1,2.204,0)
HOUR 3 USERS (NW)^F^^2.2;4^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.204,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.204,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.204,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.204,21,2,0)
non-workday (NW) hour 3.
"^DD",8971.1,8971.1,2.204,"DT")
3030328
"^DD",8971.1,8971.1,2.205,0)
HOUR 4 USERS (NW)^F^^2.2;5^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.205,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.205,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.205,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.205,21,2,0)
non-workday (NW) hour 4.
"^DD",8971.1,8971.1,2.205,"DT")
3030328
"^DD",8971.1,8971.1,2.206,0)
HOUR 5 USERS (NW)^F^^2.2;6^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.206,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.206,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.206,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.206,21,2,0)
non-workday (NW) hour 5.
"^DD",8971.1,8971.1,2.206,"DT")
3030328
"^DD",8971.1,8971.1,2.207,0)
HOUR 6 USERS (NW)^F^^2.2;7^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.207,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.207,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.207,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.207,21,2,0)
non-workday (NW) hour 6.
"^DD",8971.1,8971.1,2.207,"DT")
3030328
"^DD",8971.1,8971.1,2.208,0)
HOUR 7 USERS (NW)^F^^2.2;8^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.208,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.208,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.208,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.208,21,2,0)
non-workday (NW) hour 7.
"^DD",8971.1,8971.1,2.208,"DT")
3030328
"^DD",8971.1,8971.1,2.209,0)
HOUR 8 USERS (NW)^F^^2.2;9^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.209,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.209,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.209,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.209,21,2,0)
non-workday (NW) hour 8.
"^DD",8971.1,8971.1,2.209,"DT")
3030328
"^DD",8971.1,8971.1,2.21,0)
HOUR 9 USERS (NW)^F^^2.2;10^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.21,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.21,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.21,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.21,21,2,0)
non-workday (NW) hour 9.
"^DD",8971.1,8971.1,2.21,"DT")
3030328
"^DD",8971.1,8971.1,2.211,0)
HOUR 10 USERS (NW)^F^^2.2;11^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.211,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.211,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.211,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.211,21,2,0)
non-workday (NW) hour 10.
"^DD",8971.1,8971.1,2.211,"DT")
3030328
"^DD",8971.1,8971.1,2.212,0)
HOUR 11 USERS (NW)^F^^2.2;12^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.212,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.212,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.212,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.212,21,2,0)
non-workday (NW) hour 11.
"^DD",8971.1,8971.1,2.212,"DT")
3030328
"^DD",8971.1,8971.1,2.213,0)
HOUR 12 USERS (NW)^F^^2.2;13^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.213,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.213,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.213,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.213,21,2,0)
non-workday (NW) hour 12.
"^DD",8971.1,8971.1,2.213,"DT")
3030328
"^DD",8971.1,8971.1,2.214,0)
HOUR 13 USERS (NW)^F^^2.2;14^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.214,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.214,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.214,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.214,21,2,0)
non-workday (NW) hour 13.
"^DD",8971.1,8971.1,2.214,"DT")
3030328
"^DD",8971.1,8971.1,2.215,0)
HOUR 14 USERS (NW)^F^^2.2;15^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.215,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.215,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.215,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.215,21,2,0)
non-workday (NW) hour 14.
"^DD",8971.1,8971.1,2.215,"DT")
3030328
"^DD",8971.1,8971.1,2.216,0)
HOUR 15 USERS (NW)^F^^2.2;16^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.216,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.216,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.216,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.216,21,2,0)
non-workday (NW) hour 15.
"^DD",8971.1,8971.1,2.216,"DT")
3030328
"^DD",8971.1,8971.1,2.217,0)
HOUR 16 USERS (NW)^F^^2.2;17^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.217,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.217,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.217,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.217,21,2,0)
non-workday (NW) hour 16.
"^DD",8971.1,8971.1,2.217,"DT")
3030328
"^DD",8971.1,8971.1,2.218,0)
HOUR 17 USERS (NW)^F^^2.2;18^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.218,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.218,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.218,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.218,21,2,0)
non-workday (NW) hour 17.
"^DD",8971.1,8971.1,2.218,"DT")
3030328
"^DD",8971.1,8971.1,2.219,0)
HOUR 18 USERS (NW)^F^^2.2;19^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.219,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.219,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.219,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.219,21,2,0)
non-workday (NW) hour 18.
"^DD",8971.1,8971.1,2.219,"DT")
3030328
"^DD",8971.1,8971.1,2.22,0)
HOUR 19 USERS (NW)^F^^2.2;20^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.22,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.22,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.22,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.22,21,2,0)
non-workday (NW) hour 19.
"^DD",8971.1,8971.1,2.22,"DT")
3030328
"^DD",8971.1,8971.1,2.221,0)
HOUR 20 USERS (NW)^F^^2.2;21^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.221,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.221,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.221,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.221,21,2,0)
non-workday (NW) hour 20.
"^DD",8971.1,8971.1,2.221,"DT")
3030328
"^DD",8971.1,8971.1,2.222,0)
HOUR 21 USERS (NW)^F^^2.2;22^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.222,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.222,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.222,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.222,21,2,0)
non-workday (NW) hour 21.
"^DD",8971.1,8971.1,2.222,"DT")
3030328
"^DD",8971.1,8971.1,2.223,0)
HOUR 22 USERS (NW)^F^^2.2;23^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.223,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.223,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.223,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.223,21,2,0)
non-workday (NW) hour 22.
"^DD",8971.1,8971.1,2.223,"DT")
3030328
"^DD",8971.1,8971.1,2.224,0)
HOUR 23 USERS (NW)^F^^2.2;24^K:$L(X)>8!($L(X)<1) X
"^DD",8971.1,8971.1,2.224,3)
Answer must be 1-8 characters in length
"^DD",8971.1,8971.1,2.224,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,2.224,21,1,0)
The number of users that ran this option, protocol or RPC during 
"^DD",8971.1,8971.1,2.224,21,2,0)
non-workday (NW) hour 23.
"^DD",8971.1,8971.1,2.224,"DT")
3030328
"^DD",8971.1,8971.1,3.01,0)
CPU TIME (NW)^F^^3;1^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.01,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.01,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.01,21,1,0)
The amount of cpu time that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,3.01,21,2,0)
one entire non-workday (NW).
"^DD",8971.1,8971.1,3.01,"DT")
3030328
"^DD",8971.1,8971.1,3.02,0)
DIO (NW)^F^^3;2^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.02,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.02,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.02,21,1,0)
The amount of DIOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,3.02,21,2,0)
entire non-workday (NW).
"^DD",8971.1,8971.1,3.02,"DT")
3030328
"^DD",8971.1,8971.1,3.03,0)
BIO (NW)^F^^3;3^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.03,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.03,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.03,21,1,0)
The amount of BIOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,3.03,21,2,0)
entire non-workday (NW).
"^DD",8971.1,8971.1,3.03,"DT")
3030328
"^DD",8971.1,8971.1,3.04,0)
PAGE FAULT (NW)^F^^3;4^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.04,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.04,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.04,21,1,0)
The amount of page faults that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,3.04,21,2,0)
one entire non-workday (NW).
"^DD",8971.1,8971.1,3.04,"DT")
3030328
"^DD",8971.1,8971.1,3.05,0)
M COMMAND (NW)^F^^3;5^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.05,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.05,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.05,21,1,0)
The amount of M commands that this option, protocol or RPC generated over
"^DD",8971.1,8971.1,3.05,21,2,0)
one entire non-workday (NW).
"^DD",8971.1,8971.1,3.05,"DT")
3030328
"^DD",8971.1,8971.1,3.06,0)
GLO (NW)^F^^3;6^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.06,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.06,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.06,21,1,0)
The amount of GLOs that this option, protocol or RPC generated over one
"^DD",8971.1,8971.1,3.06,21,2,0)
entire non-workday (NW).
"^DD",8971.1,8971.1,3.06,"DT")
3030328
"^DD",8971.1,8971.1,3.07,0)
ELAPSED TIME (NW)^F^^3;7^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.07,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.07,21,0)
^^2^2^3030328^
"^DD",8971.1,8971.1,3.07,21,1,0)
The amount of elpased time that this option, protocol or RPC generated
"^DD",8971.1,8971.1,3.07,21,2,0)
over one entire non-workday (NW).
"^DD",8971.1,8971.1,3.07,"DT")
3030328
"^DD",8971.1,8971.1,3.08,0)
OCCURRENCES (NW)^F^^3;8^K:$L(X)>25!($L(X)<1) X
"^DD",8971.1,8971.1,3.08,3)
Answer must be 1-25 characters in length
"^DD",8971.1,8971.1,3.08,21,0)
^^2^2^3030329^
"^DD",8971.1,8971.1,3.08,21,1,0)
The number of occurrences generated by this option, protocol or RPC over
"^DD",8971.1,8971.1,3.08,21,2,0)
one entire non-workday (NW).
"^DD",8971.1,8971.1,3.08,"DT")
3030329
"^DIC",8971.1,8971.1,0)
RESOURCE USAGE MONITOR^8971.1
"^DIC",8971.1,8971.1,0,"GL")
^KMPR(8971.1,
"^DIC",8971.1,8971.1,"%",0)
^1.005^^0
"^DIC",8971.1,8971.1,"%D",0)
^^24^24^3030404^
"^DIC",8971.1,8971.1,"%D",1,0)
The RESOURCE USAGE MONITOR (RUM) file contains statistical data for
"^DIC",8971.1,8971.1,"%D",2,0)
options, protocols or RPCs that is gathered from the working system. The 
"^DIC",8971.1,8971.1,"%D",3,0)
'RUM Background Driver' [KMPR BACKGROUND DRIVER] compiles data from the
"^DIC",8971.1,8971.1,"%D",4,0)
^KMPTMP("KMPR",DLY") global which is created by the %ZOSVKR routine. The
"^DIC",8971.1,8971.1,"%D",5,0)
'RUM Background Driver', which is scheduled to run every day, consolidates
"^DIC",8971.1,8971.1,"%D",6,0)
this data into this file. 
"^DIC",8971.1,8971.1,"%D",7,0)
 
"^DIC",8971.1,8971.1,"%D",8,0)
NOTE: Data within this file should NOT be edited.
"^DIC",8971.1,8971.1,"%D",9,0)
 
"^DIC",8971.1,8971.1,"%D",10,0)
Legend:
"^DIC",8971.1,8971.1,"%D",11,0)
 
"^DIC",8971.1,8971.1,"%D",12,0)
 PT - Prime Time
"^DIC",8971.1,8971.1,"%D",13,0)
      Workday hours from 8:00 am to 5:00 pm
"^DIC",8971.1,8971.1,"%D",14,0)
 NP - Non-Primetime
"^DIC",8971.1,8971.1,"%D",15,0)
      Workday hours from midnight up to 8:00 am and after 5:00 pm up to 
"^DIC",8971.1,8971.1,"%D",16,0)
      midnight
"^DIC",8971.1,8971.1,"%D",17,0)
 WD - Workday
"^DIC",8971.1,8971.1,"%D",18,0)
      Monday through Friday excluding holidays as listed in the HOLIDAY 
"^DIC",8971.1,8971.1,"%D",19,0)
      file #40.5
"^DIC",8971.1,8971.1,"%D",20,0)
 NW - Non-Workday
"^DIC",8971.1,8971.1,"%D",21,0)
      Saturday and Sunday including holidays as listed in the HOLIDAY
"^DIC",8971.1,8971.1,"%D",22,0)
      file #40.5
"^DIC",8971.1,8971.1,"%D",23,0)
 
"^DIC",8971.1,8971.1,"%D",24,0)
A workday is defined by a call to the $$WORKDAY^XUWORKDY API.
"^DIC",8971.1,"B","RESOURCE USAGE MONITOR",8971.1)

**INSTALL NAME**
XU*8.0*186
"BLD",3291,0)
XU*8.0*186^KERNEL^0^3030602^y
"BLD",3291,1,0)
^^1^1^3020807^
"BLD",3291,1,1,0)
%ZOSVKR update.
"BLD",3291,4,0)
^9.64PA^^
"BLD",3291,"ABPKG")
n
"BLD",3291,"KRN",0)
^9.67PA^19^17
"BLD",3291,"KRN",.4,0)
.4
"BLD",3291,"KRN",.401,0)
.401
"BLD",3291,"KRN",.402,0)
.402
"BLD",3291,"KRN",.403,0)
.403
"BLD",3291,"KRN",.5,0)
.5
"BLD",3291,"KRN",.84,0)
.84
"BLD",3291,"KRN",3.6,0)
3.6
"BLD",3291,"KRN",3.8,0)
3.8
"BLD",3291,"KRN",9.2,0)
9.2
"BLD",3291,"KRN",9.8,0)
9.8
"BLD",3291,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",3291,"KRN",9.8,"NM",1,0)
ZOSVKRM^^1^
"BLD",3291,"KRN",9.8,"NM",2,0)
ZOSVKRO^^0^B26159240
"BLD",3291,"KRN",9.8,"NM",3,0)
ZOSVKRV^^0^B30820169
"BLD",3291,"KRN",9.8,"NM","B","ZOSVKRM",1)

"BLD",3291,"KRN",9.8,"NM","B","ZOSVKRO",2)

"BLD",3291,"KRN",9.8,"NM","B","ZOSVKRV",3)

"BLD",3291,"KRN",19,0)
19
"BLD",3291,"KRN",19.1,0)
19.1
"BLD",3291,"KRN",101,0)
101
"BLD",3291,"KRN",409.61,0)
409.61
"BLD",3291,"KRN",771,0)
771
"BLD",3291,"KRN",870,0)
870
"BLD",3291,"KRN",8994,0)
8994
"BLD",3291,"KRN","B",.4,.4)

"BLD",3291,"KRN","B",.401,.401)

"BLD",3291,"KRN","B",.402,.402)

"BLD",3291,"KRN","B",.403,.403)

"BLD",3291,"KRN","B",.5,.5)

"BLD",3291,"KRN","B",.84,.84)

"BLD",3291,"KRN","B",3.6,3.6)

"BLD",3291,"KRN","B",3.8,3.8)

"BLD",3291,"KRN","B",9.2,9.2)

"BLD",3291,"KRN","B",9.8,9.8)

"BLD",3291,"KRN","B",19,19)

"BLD",3291,"KRN","B",19.1,19.1)

"BLD",3291,"KRN","B",101,101)

"BLD",3291,"KRN","B",409.61,409.61)

"BLD",3291,"KRN","B",771,771)

"BLD",3291,"KRN","B",870,870)

"BLD",3291,"KRN","B",8994,8994)

"BLD",3291,"QUES",0)
^9.62^^
"BLD",3291,"REQB",0)
^9.611^^0
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"PKG",133,-1)
1^1
"PKG",133,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",133,20,0)
^9.402P^^
"PKG",133,22,0)
^9.49I^1^1
"PKG",133,22,1,0)
8.0^2950703^2951029^7606
"PKG",133,22,1,"PAH",1,0)
186^3030602^10292
"PKG",133,22,1,"PAH",1,1,0)
^^1^1^3030602
"PKG",133,22,1,"PAH",1,1,1,0)
%ZOSVKR update.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","ZOSVKRM")
1^1
"RTN","ZOSVKRO")
0^2^B26159240
"RTN","ZOSVKRO",1,0)
%ZOSVKR ;SF/KAK/RAK - Collect RUM Statistics for OpenM/Cache;8/20/99  08:43  ;3/27/00  11:24
"RTN","ZOSVKRO",2,0)
 ;;8.0;KERNEL;**90,94,107,122,143,186**;May 1, 2003 11:49 am
"RTN","ZOSVKRO",3,0)
 ;
"RTN","ZOSVKRO",4,0)
RO(OPT) ; Record option resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",5,0)
 ;
"RTN","ZOSVKRO",6,0)
 N KMPRTYP S KMPRTYP=0  ; option
"RTN","ZOSVKRO",7,0)
 G EN
"RTN","ZOSVKRO",8,0)
 ;
"RTN","ZOSVKRO",9,0)
RP(PRTCL) ; Record protocol resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",10,0)
 ; Variable PRTCL = option_name^protocol_name
"RTN","ZOSVKRO",11,0)
 ;
"RTN","ZOSVKRO",12,0)
 ; quit if rum is turned off
"RTN","ZOSVKRO",13,0)
 Q:'$G(^%ZTSCH("LOGRSRC"))
"RTN","ZOSVKRO",14,0)
 ;
"RTN","ZOSVKRO",15,0)
 N OPT
"RTN","ZOSVKRO",16,0)
 S OPT=$P(PRTCL,"^"),PRTCL=$P(PRTCL,"^",2)
"RTN","ZOSVKRO",17,0)
 Q:PRTCL=""
"RTN","ZOSVKRO",18,0)
 ;
"RTN","ZOSVKRO",19,0)
 N KMPRTYP S KMPRTYP=1  ; protocol
"RTN","ZOSVKRO",20,0)
 G EN
"RTN","ZOSVKRO",21,0)
 ;
"RTN","ZOSVKRO",22,0)
RU(KMPROPT,KMPRTYP,KMPRSTAT) ;-- set resource usage into ^KMPTMP("KMPR"
"RTN","ZOSVKRO",23,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",24,0)
 ; KMPROPT... Option name (may be option, protocol, rpc, etc.)
"RTN","ZOSVKRO",25,0)
 ; KMPRTYP...
"RTN","ZOSVKRO",26,0)
 ;    Type of option:
"RTN","ZOSVKRO",27,0)
 ;                   0 - Option
"RTN","ZOSVKRO",28,0)
 ;                   1 - Protocol
"RTN","ZOSVKRO",29,0)
 ;                   2 - RPC (Remote Procedure Call)
"RTN","ZOSVKRO",30,0)
 ;                   3 - HL7
"RTN","ZOSVKRO",31,0)
 ; KMPRSTAT..
"RTN","ZOSVKRO",32,0)
 ;    Status (for future use):
"RTN","ZOSVKRO",33,0)
 ;                   1 - start
"RTN","ZOSVKRO",34,0)
 ;                   2 - stop
"RTN","ZOSVKRO",35,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",36,0)
 ;
"RTN","ZOSVKRO",37,0)
 Q:$G(KMPROPT)=""
"RTN","ZOSVKRO",38,0)
 ;
"RTN","ZOSVKRO",39,0)
 S KMPRTYP=+$G(KMPRTYP)
"RTN","ZOSVKRO",40,0)
 S KMPRSTAT=$G(KMPRSTAT)
"RTN","ZOSVKRO",41,0)
 ;
"RTN","ZOSVKRO",42,0)
 N OPT,PRTCL
"RTN","ZOSVKRO",43,0)
 ; 
"RTN","ZOSVKRO",44,0)
 ; OPT   = option name
"RTN","ZOSVKRO",45,0)
 ; PRTCL = protocol name (optional)
"RTN","ZOSVKRO",46,0)
 S OPT=$P(KMPROPT,"^"),PRTCL=$P(KMPROPT,"^",2)
"RTN","ZOSVKRO",47,0)
 ;
"RTN","ZOSVKRO",48,0)
EN ;
"RTN","ZOSVKRO",49,0)
 ; CURHDAY... current $H day
"RTN","ZOSVKRO",50,0)
 ; CURHSEC... current $H seconds
"RTN","ZOSVKRO",51,0)
 ; CURSTAT... current stats
"RTN","ZOSVKRO",52,0)
 ; DIFF...... difference (CURSTAT minus PREVSTAT)
"RTN","ZOSVKRO",53,0)
 ; NODE...... current node
"RTN","ZOSVKRO",54,0)
 ; PREVHDAY.. previous $H day
"RTN","ZOSVKRO",55,0)
 ; PREVHSEC.. previous $H seconds
"RTN","ZOSVKRO",56,0)
 ; PREVSTAT.. previous stats
"RTN","ZOSVKRO",57,0)
 ; PRIMETM... prime time (1) or non-prime time (0)
"RTN","ZOSVKRO",58,0)
 ;
"RTN","ZOSVKRO",59,0)
 N ACTV,ARRAY,CURHDAY,CURHSEC,CURSTAT,CURRHR,DIFF
"RTN","ZOSVKRO",60,0)
 N I,NODE,PREVHDAY,PREVHSEC,PREVSTAT,PRIMETM,Y
"RTN","ZOSVKRO",61,0)
 ;
"RTN","ZOSVKRO",62,0)
 ; quit if not in "PROD" uci
"RTN","ZOSVKRO",63,0)
 S Y="" X $G(^%ZOSF("UCI")) Q:Y'[$G(^%ZOSF("PROD"))
"RTN","ZOSVKRO",64,0)
 ;
"RTN","ZOSVKRO",65,0)
 D GETENV^%ZOSV S NODE=$P(Y,"^",3),U="^"
"RTN","ZOSVKRO",66,0)
 I KMPRTYP I OPT="" S:$P($G(KMPR("JOB",NODE,$J)),"^",10)["$LOGIN$" OPT="$LOGIN$"
"RTN","ZOSVKRO",67,0)
 I OPT="" Q:'+$G(^XUTL("XQ",$J,"T"))  S OPT=$P($G(^XUTL("XQ",$J,^XUTL("XQ",$J,"T"))),"^",2) Q:OPT=""
"RTN","ZOSVKRO",68,0)
 ;
"RTN","ZOSVKRO",69,0)
 ; CURSTAT = current stats for this $job
"RTN","ZOSVKRO",70,0)
 ;         = cpu^dio^bio^pg_fault^cmd^glo^$H_day^$H_sec^ascii_time
"RTN","ZOSVKRO",71,0)
 S CURSTAT=$P($$STATS,"^",1,9)
"RTN","ZOSVKRO",72,0)
 Q:CURSTAT=""
"RTN","ZOSVKRO",73,0)
 ;
"RTN","ZOSVKRO",74,0)
 S CURHDAY=$P(CURSTAT,"^",7),CURHSEC=$P(CURSTAT,"^",8)
"RTN","ZOSVKRO",75,0)
 ;
"RTN","ZOSVKRO",76,0)
 ; PREVSTAT = previous stats for this $job
"RTN","ZOSVKRO",77,0)
 S PREVSTAT=$G(KMPR("JOB",NODE,$J))
"RTN","ZOSVKRO",78,0)
 ;
"RTN","ZOSVKRO",79,0)
 ; if previous option was tagged as being run from taskman(!)
"RTN","ZOSVKRO",80,0)
 ; then mark current OPTion as running from taskman(!)
"RTN","ZOSVKRO",81,0)
 I $P($P(PREVSTAT,"^",10),"***")=("!"_OPT) S OPT="!"_OPT
"RTN","ZOSVKRO",82,0)
 ;
"RTN","ZOSVKRO",83,0)
 ; concatenate to CURSTAT: ...^OPTion^option_type
"RTN","ZOSVKRO",84,0)
 S CURSTAT=CURSTAT_"^"_$S(KMPRTYP=2:"`"_OPT,KMPRTYP=3:"&"_OPT,1:OPT)_"***"_$G(PRTCL)_"^"_$G(XQT)
"RTN","ZOSVKRO",85,0)
 S KMPR("JOB",NODE,$J)=CURSTAT
"RTN","ZOSVKRO",86,0)
 ;
"RTN","ZOSVKRO",87,0)
 ; if option and login or taskman
"RTN","ZOSVKRO",88,0)
 I 'KMPRTYP I OPT="$LOGIN$"!(OPT="$STRT ZTMS$") Q
"RTN","ZOSVKRO",89,0)
 ;
"RTN","ZOSVKRO",90,0)
 I OPT="$LOGOUT$"!(OPT="$STOP ZTMS$")!(OPT="XUPROGMODE") K KMPR("JOB",NODE,$J)
"RTN","ZOSVKRO",91,0)
 ;
"RTN","ZOSVKRO",92,0)
 Q:PREVSTAT=""
"RTN","ZOSVKRO",93,0)
 ;
"RTN","ZOSVKRO",94,0)
 ; check for negative numbers for m commands and glo references
"RTN","ZOSVKRO",95,0)
 F I=5,6 I $P(CURSTAT,"^",I)<0 D 
"RTN","ZOSVKRO",96,0)
 .S $P(CURSTAT,"^",I)=$P(CURSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRO",97,0)
 .I $P(PREVSTAT,"^",I)<0 S $P(PREVSTAT,"^",I)=$P(PREVSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRO",98,0)
 ;
"RTN","ZOSVKRO",99,0)
 S PREVHDAY=$P(PREVSTAT,"^",7),$P(PREVSTAT,"^",7)=$P(PREVSTAT,"^",8)
"RTN","ZOSVKRO",100,0)
 ;
"RTN","ZOSVKRO",101,0)
 ; quit if not $h
"RTN","ZOSVKRO",102,0)
 Q:'PREVHDAY
"RTN","ZOSVKRO",103,0)
 ;
"RTN","ZOSVKRO",104,0)
 ; if option has been running more than one day
"RTN","ZOSVKRO",105,0)
 ; add the number of seconds in each day to the current $H seconds
"RTN","ZOSVKRO",106,0)
 S $P(CURSTAT,"^",7)=(CURHDAY-PREVHDAY)*86400+CURHSEC
"RTN","ZOSVKRO",107,0)
 ;
"RTN","ZOSVKRO",108,0)
 ; difference = current stats minus previous stats
"RTN","ZOSVKRO",109,0)
 ; DIFF       = CURSTAT - PREVSTAT
"RTN","ZOSVKRO",110,0)
 ;            = cpu^dio^bio^pg_fault^cmd^glo^elapsed_sec
"RTN","ZOSVKRO",111,0)
 F I=1:1:7 S $P(DIFF,"^",I)=$P(CURSTAT,"^",I)-$P(PREVSTAT,"^",I)
"RTN","ZOSVKRO",112,0)
 ;
"RTN","ZOSVKRO",113,0)
 ; quit if negative m commands or global references
"RTN","ZOSVKRO",114,0)
 Q:$P(DIFF,"^",5)<0
"RTN","ZOSVKRO",115,0)
 Q:$P(DIFF,"^",6)<0
"RTN","ZOSVKRO",116,0)
 ;
"RTN","ZOSVKRO",117,0)
 ; option name
"RTN","ZOSVKRO",118,0)
 S OPT=$P(PREVSTAT,"^",10)
"RTN","ZOSVKRO",119,0)
 ;
"RTN","ZOSVKRO",120,0)
 ; PRIMETM = 0: non-prime time
"RTN","ZOSVKRO",121,0)
 ;           1: prime time
"RTN","ZOSVKRO",122,0)
 S PRIMETM=0
"RTN","ZOSVKRO",123,0)
 ;
"RTN","ZOSVKRO",124,0)
 ; set prime time = 1 if after 8am and before 5pm
"RTN","ZOSVKRO",125,0)
 ; non-workday prime time and non-prime time will be converted
"RTN","ZOSVKRO",126,0)
 ; into non-workday time in nightly background job (KMPRBD02)
"RTN","ZOSVKRO",127,0)
 I CURHSEC>28799&(CURHSEC<61201) S PRIMETM=1
"RTN","ZOSVKRO",128,0)
 ;
"RTN","ZOSVKRO",129,0)
 ; global location for data storage
"RTN","ZOSVKRO",130,0)
 S ARRAY=$G(^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM))
"RTN","ZOSVKRO",131,0)
 ;
"RTN","ZOSVKRO",132,0)
 ; seven elements for this option
"RTN","ZOSVKRO",133,0)
 F I=1:1:7 S $P(ARRAY,"^",I)=$P($G(ARRAY),"^",I)+$P(DIFF,"^",I)
"RTN","ZOSVKRO",134,0)
 ; 8th piece is occurrence counter for this option
"RTN","ZOSVKRO",135,0)
 S $P(ARRAY,"^",8)=$P(ARRAY,"^",8)+1
"RTN","ZOSVKRO",136,0)
 ;
"RTN","ZOSVKRO",137,0)
 ; current hour => 0 - 23
"RTN","ZOSVKRO",138,0)
 S CURRHR=CURHSEC\3600
"RTN","ZOSVKRO",139,0)
 ;
"RTN","ZOSVKRO",140,0)
 ; time starts at zero hour - shift everything by 10 so zero hour
"RTN","ZOSVKRO",141,0)
 ; begins at 10th piece, hour 1 is 11th, ... and hour 23 is 33rd piece
"RTN","ZOSVKRO",142,0)
 ;
"RTN","ZOSVKRO",143,0)
 ; record last hour this option ran - this will be moved to file 8971.1
"RTN","ZOSVKRO",144,0)
 ; hourly stats are only attributed to the current hour
"RTN","ZOSVKRO",145,0)
 ;
"RTN","ZOSVKRO",146,0)
 ; add ~1 if this job runs from top of hour to 60 seconds
"RTN","ZOSVKRO",147,0)
 ; this will give active number of jobs per hour
"RTN","ZOSVKRO",148,0)
 S ACTV=$P(ARRAY,"^",(CURRHR+10)),$P(ACTV,"~")=$P(ACTV,"~")+1
"RTN","ZOSVKRO",149,0)
 I (($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))<60 S $P(ACTV,"~",2)=1
"RTN","ZOSVKRO",150,0)
 S $P(ARRAY,"^",(CURRHR+10))=ACTV
"RTN","ZOSVKRO",151,0)
 ;
"RTN","ZOSVKRO",152,0)
 ; 9th piece: current $h seconds ~ elapsed seconds ~ difference
"RTN","ZOSVKRO",153,0)
 S $P(ARRAY,"^",9)=($P(CURSTAT,"^",8))_"~"_($P(DIFF,"^",7))_"~"_(($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))
"RTN","ZOSVKRO",154,0)
 ;
"RTN","ZOSVKRO",155,0)
 ; set into global
"RTN","ZOSVKRO",156,0)
 S ^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM)=ARRAY
"RTN","ZOSVKRO",157,0)
 ;
"RTN","ZOSVKRO",158,0)
 Q
"RTN","ZOSVKRO",159,0)
 ;
"RTN","ZOSVKRO",160,0)
STATS() ;-- extrinsic - return current stats for this $job
"RTN","ZOSVKRO",161,0)
 ;
"RTN","ZOSVKRO",162,0)
 N H,RETURN,V,VER,ZH,ZT
"RTN","ZOSVKRO",163,0)
 ;
"RTN","ZOSVKRO",164,0)
 S RETURN="",ZT=$P($ZTIMESTAMP,".",2),V=$V(-1,$J),VER=$P($P($P($ZV,") ",2)," "),".",1,2)
"RTN","ZOSVKRO",165,0)
 ;
"RTN","ZOSVKRO",166,0)
 ; if version is less than 4
"RTN","ZOSVKRO",167,0)
 I (+VER)<4 D
"RTN","ZOSVKRO",168,0)
 .; cpu^dio^bio^pg_fault^cmd^glo^$H_date^$H_sec^time in thousands
"RTN","ZOSVKRO",169,0)
 .; -> no cpu^dio^bio^pg_fault information is returned
"RTN","ZOSVKRO",170,0)
 .S RETURN="^^^^"_$P($P(V,"^",7),",")_"^"_$P($P(V,"^",7),",",2)_"^"_+$H_"^"_$P($H,",",2)_"."_ZT_"^"_ZT
"RTN","ZOSVKRO",171,0)
 ;
"RTN","ZOSVKRO",172,0)
 ; if version is 4 or greater
"RTN","ZOSVKRO",173,0)
 E  D
"RTN","ZOSVKRO",174,0)
 .S ZH=$ZU(171),ZT=$P($ZTIMESTAMP,".",2)
"RTN","ZOSVKRO",175,0)
 .S H=$P(ZH,",",3),H=$E(H,13,23),H=+$H_","_($P(H,":")*3600+($P(H,":",2)*60))_"."_ZT
"RTN","ZOSVKRO",176,0)
 .; cpu^dio^bio^pg_fault^cmd^glo^$H_date^$H_sec^ascii_time^$s
"RTN","ZOSVKRO",177,0)
 .S RETURN=$P(ZH,",")_"^"_$P(ZH,",",7)_"^"_$P(ZH,",",8)_"^"_$P(ZH,",",4)_"^"_$P($P(V,"^",7),",")_"^"_$P($P(V,"^",7),",",2)_"^"_$P(H,",")_"^"_$P(H,",",2)_"^"_$P(ZH,",",3)_"^"_$S
"RTN","ZOSVKRO",178,0)
 ;
"RTN","ZOSVKRO",179,0)
 Q RETURN
"RTN","ZOSVKRO",180,0)
 
"RTN","ZOSVKRV")
0^3^B30820169
"RTN","ZOSVKRV",1,0)
%ZOSVKR ;SF/KAK/RAK - Collect RUM Statistics for VAX-DSM;8/20/99  08:44 ;1/10/01  08:06
"RTN","ZOSVKRV",2,0)
 ;;8.0;KERNEL;**90,94,107,122,143,186**;Apr 3, 2003 9:59 am
"RTN","ZOSVKRV",3,0)
 ;
"RTN","ZOSVKRV",4,0)
RO(OPT) ; Record option resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRV",5,0)
 ;
"RTN","ZOSVKRV",6,0)
 N KMPRTYP S KMPRTYP=0  ; option
"RTN","ZOSVKRV",7,0)
 G EN
"RTN","ZOSVKRV",8,0)
 ;
"RTN","ZOSVKRV",9,0)
RP(PRTCL) ; Record protocol resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRV",10,0)
 ; Variable PRTCL = option_name^protocol_name
"RTN","ZOSVKRV",11,0)
 ;
"RTN","ZOSVKRV",12,0)
 ; quit if rum is turned off
"RTN","ZOSVKRV",13,0)
 Q:'$G(^%ZTSCH("LOGRSRC"))
"RTN","ZOSVKRV",14,0)
 ;
"RTN","ZOSVKRV",15,0)
 N OPT
"RTN","ZOSVKRV",16,0)
 S OPT=$P(PRTCL,"^"),PRTCL=$P(PRTCL,"^",2)
"RTN","ZOSVKRV",17,0)
 Q:PRTCL=""
"RTN","ZOSVKRV",18,0)
 ;
"RTN","ZOSVKRV",19,0)
 N KMPRTYP S KMPRTYP=1  ; protocol
"RTN","ZOSVKRV",20,0)
 G EN
"RTN","ZOSVKRV",21,0)
 ;
"RTN","ZOSVKRV",22,0)
RU(KMPROPT,KMPRTYP,KMPRSTAT) ;-- set resource usage into ^KMPTMP("KMPR"
"RTN","ZOSVKRV",23,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRV",24,0)
 ; KMPROPT... Option name (may be option, protocol, rpc, etc.)
"RTN","ZOSVKRV",25,0)
 ; KMPRTYP...
"RTN","ZOSVKRV",26,0)
 ;    Type of option:
"RTN","ZOSVKRV",27,0)
 ;                   0 - Option
"RTN","ZOSVKRV",28,0)
 ;                   1 - Protocol
"RTN","ZOSVKRV",29,0)
 ;                   2 - RPC (Remote Procedure Call)
"RTN","ZOSVKRV",30,0)
 ;                   3 - HL7
"RTN","ZOSVKRV",31,0)
 ; KMPRSTAT..
"RTN","ZOSVKRV",32,0)
 ;    Status (for future use):
"RTN","ZOSVKRV",33,0)
 ;                   1 - start
"RTN","ZOSVKRV",34,0)
 ;                   2 - stop
"RTN","ZOSVKRV",35,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRV",36,0)
 ;
"RTN","ZOSVKRV",37,0)
 Q:$G(KMPROPT)=""
"RTN","ZOSVKRV",38,0)
 ;
"RTN","ZOSVKRV",39,0)
 S KMPRTYP=+$G(KMPRTYP)
"RTN","ZOSVKRV",40,0)
 S KMPRSTAT=$G(KMPRSTAT)
"RTN","ZOSVKRV",41,0)
 ;
"RTN","ZOSVKRV",42,0)
 N OPT,PRTCL
"RTN","ZOSVKRV",43,0)
 ; 
"RTN","ZOSVKRV",44,0)
 ; OPT   = option name
"RTN","ZOSVKRV",45,0)
 ; PRTCL = protocol name (optional)
"RTN","ZOSVKRV",46,0)
 S OPT=$P(KMPROPT,"^"),PRTCL=$P(KMPROPT,"^",2)
"RTN","ZOSVKRV",47,0)
 ;
"RTN","ZOSVKRV",48,0)
EN ;
"RTN","ZOSVKRV",49,0)
 ; CURHDAY... current $H day
"RTN","ZOSVKRV",50,0)
 ; CURHSEC... current $H seconds
"RTN","ZOSVKRV",51,0)
 ; CURSTAT... current stats
"RTN","ZOSVKRV",52,0)
 ; DIFF...... difference (CURSTAT minus PREVSTAT)
"RTN","ZOSVKRV",53,0)
 ; NODE...... current node
"RTN","ZOSVKRV",54,0)
 ; PREVHDAY.. previous $H day
"RTN","ZOSVKRV",55,0)
 ; PREVHSEC.. previous $H seconds
"RTN","ZOSVKRV",56,0)
 ; PREVSTAT.. previous stats
"RTN","ZOSVKRV",57,0)
 ; PRIMETM... prime time (1) or non-prime time (0)
"RTN","ZOSVKRV",58,0)
 ;
"RTN","ZOSVKRV",59,0)
 N ACTV,ARRAY,CURHDAY,CURHSEC,CURSTAT,CURRHR,DIFF
"RTN","ZOSVKRV",60,0)
 N I,NODE,PREVHDAY,PREVHSEC,PREVSTAT,PRIMETM,Y
"RTN","ZOSVKRV",61,0)
 ;
"RTN","ZOSVKRV",62,0)
 ; quit if not in "PROD" uci
"RTN","ZOSVKRV",63,0)
 S Y="" X $G(^%ZOSF("UCI")) Q:Y'[$G(^%ZOSF("PROD"))
"RTN","ZOSVKRV",64,0)
 ;
"RTN","ZOSVKRV",65,0)
 S NODE=$P($ZC(%GETSYI),",",4),U="^"
"RTN","ZOSVKRV",66,0)
 I KMPRTYP I OPT="" S:$P($G(KMPR("JOB",NODE,$J)),"^",10)["$LOGIN$" OPT="$LOGIN$"
"RTN","ZOSVKRV",67,0)
 I OPT="" Q:'+$G(^XUTL("XQ",$J,"T"))  S OPT=$P($G(^XUTL("XQ",$J,^XUTL("XQ",$J,"T"))),"^",2) Q:OPT=""
"RTN","ZOSVKRV",68,0)
 ;
"RTN","ZOSVKRV",69,0)
 ; CURSTAT = current stats for this $job
"RTN","ZOSVKRV",70,0)
 ;         = cpu^dio^bio^pg_fault^cmd^glo^$H_day^$H_sec^ascii_time
"RTN","ZOSVKRV",71,0)
 S CURSTAT=$P($$STATS,"^",1,9)
"RTN","ZOSVKRV",72,0)
 Q:CURSTAT=""
"RTN","ZOSVKRV",73,0)
 ;
"RTN","ZOSVKRV",74,0)
 S CURHDAY=$P(CURSTAT,"^",7),CURHSEC=$P(CURSTAT,"^",8)
"RTN","ZOSVKRV",75,0)
 ;
"RTN","ZOSVKRV",76,0)
 ; PREVSTAT = previous stats for this $job
"RTN","ZOSVKRV",77,0)
 S PREVSTAT=$G(KMPR("JOB",NODE,$J))
"RTN","ZOSVKRV",78,0)
 ;
"RTN","ZOSVKRV",79,0)
 ; if previous option was tagged as being run from taskman(!) then
"RTN","ZOSVKRV",80,0)
 ; then mark current OPTion as running from taskman(!)
"RTN","ZOSVKRV",81,0)
 I $P($P(PREVSTAT,"^",10),"***")=("!"_OPT) S OPT="!"_OPT
"RTN","ZOSVKRV",82,0)
 ;
"RTN","ZOSVKRV",83,0)
 ; concatenate to CURSTAT: ...^OPTion^option_type
"RTN","ZOSVKRV",84,0)
 S CURSTAT=CURSTAT_"^"_$S(KMPRTYP=2:"`"_OPT,KMPRTYP=3:"&"_OPT,1:OPT)_"***"_$G(PRTCL)_"^"_$G(XQT)
"RTN","ZOSVKRV",85,0)
 S KMPR("JOB",NODE,$J)=CURSTAT
"RTN","ZOSVKRV",86,0)
 ;
"RTN","ZOSVKRV",87,0)
 ; if option and login or taskman
"RTN","ZOSVKRV",88,0)
 I 'KMPRTYP I OPT="$LOGIN$"!(OPT="$STRT ZTMS$") Q
"RTN","ZOSVKRV",89,0)
 ;
"RTN","ZOSVKRV",90,0)
 I OPT="$LOGOUT$"!(OPT="$STOP ZTMS$")!(OPT="XUPROGMODE") K KMPR("JOB",NODE,$J)
"RTN","ZOSVKRV",91,0)
 ;
"RTN","ZOSVKRV",92,0)
 Q:PREVSTAT=""
"RTN","ZOSVKRV",93,0)
 ;
"RTN","ZOSVKRV",94,0)
 ; check for negative numbers for m commands and glo references
"RTN","ZOSVKRV",95,0)
 F I=5,6 I $P(CURSTAT,"^",I)<0 D 
"RTN","ZOSVKRV",96,0)
 .S $P(CURSTAT,"^",I)=$P(CURSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRV",97,0)
 .I $P(PREVSTAT,"^",I)<0 S $P(PREVSTAT,"^",I)=$P(PREVSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRV",98,0)
 ;
"RTN","ZOSVKRV",99,0)
 S PREVHDAY=$P(PREVSTAT,"^",7),$P(PREVSTAT,"^",7)=$P(PREVSTAT,"^",8)
"RTN","ZOSVKRV",100,0)
 ;
"RTN","ZOSVKRV",101,0)
 ; quit if not $h
"RTN","ZOSVKRV",102,0)
 Q:'PREVHDAY
"RTN","ZOSVKRV",103,0)
 ;
"RTN","ZOSVKRV",104,0)
 ; if option has been running more than one day
"RTN","ZOSVKRV",105,0)
 ; add the number of seconds in each day to the current $H seconds
"RTN","ZOSVKRV",106,0)
 S $P(CURSTAT,"^",7)=(CURHDAY-PREVHDAY)*86400+CURHSEC
"RTN","ZOSVKRV",107,0)
 ;
"RTN","ZOSVKRV",108,0)
 ; difference = current stats minus previous stats
"RTN","ZOSVKRV",109,0)
 ; DIFF       = CURSTAT - PREVSTAT
"RTN","ZOSVKRV",110,0)
 ;            = cpu^dio^bio^pg_fault^cmd^glo^elapsed_sec
"RTN","ZOSVKRV",111,0)
 F I=1:1:7 S $P(DIFF,"^",I)=$P(CURSTAT,"^",I)-$P(PREVSTAT,"^",I)
"RTN","ZOSVKRV",112,0)
 ;
"RTN","ZOSVKRV",113,0)
 ; quit if negative m commands or global references
"RTN","ZOSVKRV",114,0)
 Q:$P(DIFF,"^",5)<0
"RTN","ZOSVKRV",115,0)
 Q:$P(DIFF,"^",6)<0
"RTN","ZOSVKRV",116,0)
 ;
"RTN","ZOSVKRV",117,0)
 ; option name
"RTN","ZOSVKRV",118,0)
 S OPT=$P(PREVSTAT,"^",10)
"RTN","ZOSVKRV",119,0)
 ;
"RTN","ZOSVKRV",120,0)
 ; PRIMETM = 0: non-prime time
"RTN","ZOSVKRV",121,0)
 ;           1: prime time
"RTN","ZOSVKRV",122,0)
 S PRIMETM=0
"RTN","ZOSVKRV",123,0)
 ;
"RTN","ZOSVKRV",124,0)
 ; set prime time = 1 if after 8am and before 5pm
"RTN","ZOSVKRV",125,0)
 ; non-workday prime time and non-prime time will be converted
"RTN","ZOSVKRV",126,0)
 ; into non-workday time in nightly background job (KMPRBD02)
"RTN","ZOSVKRV",127,0)
 I CURHSEC>28799&(CURHSEC<61201) S PRIMETM=1
"RTN","ZOSVKRV",128,0)
 ;
"RTN","ZOSVKRV",129,0)
 ; global location for data storage
"RTN","ZOSVKRV",130,0)
 S ARRAY=$G(^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM))
"RTN","ZOSVKRV",131,0)
 ;
"RTN","ZOSVKRV",132,0)
 ; seven elements for this option
"RTN","ZOSVKRV",133,0)
 F I=1:1:7 S $P(ARRAY,"^",I)=$P($G(ARRAY),"^",I)+$P(DIFF,"^",I)
"RTN","ZOSVKRV",134,0)
 ; 8th piece is occurrence counter for this option
"RTN","ZOSVKRV",135,0)
 S $P(ARRAY,"^",8)=$P(ARRAY,"^",8)+1
"RTN","ZOSVKRV",136,0)
 ;
"RTN","ZOSVKRV",137,0)
 ; current hour => 0 - 23
"RTN","ZOSVKRV",138,0)
 S CURRHR=CURHSEC\3600
"RTN","ZOSVKRV",139,0)
 ;
"RTN","ZOSVKRV",140,0)
 ; time starts at zero hour - shift everything by 10 so zero hour
"RTN","ZOSVKRV",141,0)
 ; begins at 10th piece, hour 1 is 11th, ... and hour 23 is 33rd piece
"RTN","ZOSVKRV",142,0)
 ;
"RTN","ZOSVKRV",143,0)
 ; record last hour this option ran - this will be moved to file 8971.1
"RTN","ZOSVKRV",144,0)
 ; hourly stats are only attributed to the current hour
"RTN","ZOSVKRV",145,0)
 ;
"RTN","ZOSVKRV",146,0)
 ; add ~1 if this job runs from top of hour to 60 seconds
"RTN","ZOSVKRV",147,0)
 ; this will give active number of jobs per hour
"RTN","ZOSVKRV",148,0)
 S ACTV=$P(ARRAY,"^",(CURRHR+10)),$P(ACTV,"~")=$P(ACTV,"~")+1
"RTN","ZOSVKRV",149,0)
 I (($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))<60 S $P(ACTV,"~",2)=1
"RTN","ZOSVKRV",150,0)
 S $P(ARRAY,"^",(CURRHR+10))=ACTV
"RTN","ZOSVKRV",151,0)
 ;
"RTN","ZOSVKRV",152,0)
 ; 9th piece: current $h seconds ~ elapsed seconds ~ difference
"RTN","ZOSVKRV",153,0)
 S $P(ARRAY,"^",9)=($P(CURSTAT,"^",8))_"~"_($P(DIFF,"^",7))_"~"_(($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))
"RTN","ZOSVKRV",154,0)
 ;
"RTN","ZOSVKRV",155,0)
 ; set into global
"RTN","ZOSVKRV",156,0)
 S ^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM)=ARRAY
"RTN","ZOSVKRV",157,0)
 ;
"RTN","ZOSVKRV",158,0)
 Q
"RTN","ZOSVKRV",159,0)
 ;
"RTN","ZOSVKRV",160,0)
STATS() ;-- extrinsic - return current stats for this $job
"RTN","ZOSVKRV",161,0)
 ;
"RTN","ZOSVKRV",162,0)
 N H,KMPRCMD,KMPRGLO,ZH
"RTN","ZOSVKRV",163,0)
 ;
"RTN","ZOSVKRV",164,0)
 ; S C=",",ZH=$ZH,H=$P(ZH,",",3)
"RTN","ZOSVKRV",165,0)
 ;
"RTN","ZOSVKRV",166,0)
 D JT
"RTN","ZOSVKRV",167,0)
 Q:KMPRCMD="" ""
"RTN","ZOSVKRV",168,0)
 ;
"RTN","ZOSVKRV",169,0)
 S ZH=$ZH,H=$P(ZH,",",3),H=$E(H,13,23),H=$P($H,",")_","_($P(H,":")*3600+($P(H,":",2)*60)+$P(H,":",3))
"RTN","ZOSVKRV",170,0)
 ;
"RTN","ZOSVKRV",171,0)
 ; current stats for this $job
"RTN","ZOSVKRV",172,0)
 ; cpu^dio^bio^pg_fault^cmd^glo^$H_date^$H_sec^ascii_time^$s
"RTN","ZOSVKRV",173,0)
 Q $P(ZH,",")_"^"_$P(ZH,",",7)_"^"_$P(ZH,",",8)_"^"_$P(ZH,",",4)_"^"_KMPRCMD_"^"_KMPRGLO_"^"_$P(H,",")_"^"_$P(H,",",2)_"^"_$P(ZH,",",3)_"^"_$S
"RTN","ZOSVKRV",174,0)
 ;
"RTN","ZOSVKRV",175,0)
JT ; Calculate the Job Table (KMPR("JTAB")) for this job
"RTN","ZOSVKRV",176,0)
 ; KMPR("JTAB") should be made a system wide variable
"RTN","ZOSVKRV",177,0)
 ;
"RTN","ZOSVKRV",178,0)
 N %GLSBASE,%JOB,%JOBSIZ,%JOBTAB,%MAXPROC,%PID,%SMSTART,%TYPE,KMPROUT,X
"RTN","ZOSVKRV",179,0)
 ;
"RTN","ZOSVKRV",180,0)
 ; Return the current number of commands and global references
"RTN","ZOSVKRV",181,0)
 ; KMPRCMD and KMPRGLO equal to null if NOT successful
"RTN","ZOSVKRV",182,0)
 S (KMPRCMD,KMPRGLO)="",KMPROUT=0,U="^"
"RTN","ZOSVKRV",183,0)
 ;
"RTN","ZOSVKRV",184,0)
 ; Check for correct Job Table (KMPR("JTAB")) for this job
"RTN","ZOSVKRV",185,0)
 I $D(KMPR("JTAB")) I $V(KMPR("JTAB")+20)=$J S %TYPE="DSM" D USER G EXIT
"RTN","ZOSVKRV",186,0)
 S %SMSTART=$V($ZK(GLS$SMSTART)) G:'%SMSTART EXIT
"RTN","ZOSVKRV",187,0)
 S %GLSBASE=$V($V(0)+44)
"RTN","ZOSVKRV",188,0)
 S %JOBTAB=%SMSTART+$V(%SMSTART+$V(%GLSBASE+124)),%JOBSIZ=$V(%GLSBASE+128)
"RTN","ZOSVKRV",189,0)
 S %MAXPROC=$V($V(%GLSBASE+84)+%SMSTART)
"RTN","ZOSVKRV",190,0)
 ;
"RTN","ZOSVKRV",191,0)
 ; Go through Job Table looking for this process
"RTN","ZOSVKRV",192,0)
 F %JOB=1:1:%MAXPROC Q:KMPROUT  S KMPR("JTAB")=%JOB*%JOBSIZ+%JOBTAB D
"RTN","ZOSVKRV",193,0)
 .I $V(KMPR("JTAB")+20) S %PID=$V(KMPR("JTAB")+20),%TYPE="DSM" I %PID=$J D USER S KMPROUT=1
"RTN","ZOSVKRV",194,0)
 ;
"RTN","ZOSVKRV",195,0)
EXIT ;
"RTN","ZOSVKRV",196,0)
 S X=^%ZOSF("ERRTN"),@^%ZOSF("TRAP")
"RTN","ZOSVKRV",197,0)
 Q
"RTN","ZOSVKRV",198,0)
 ;
"RTN","ZOSVKRV",199,0)
USER ;
"RTN","ZOSVKRV",200,0)
 ; Watch for NONEXPR process
"RTN","ZOSVKRV",201,0)
 S X="UERR^%ZOSVKR",@^%ZOSF("TRAP")
"RTN","ZOSVKRV",202,0)
 ;
"RTN","ZOSVKRV",203,0)
 ; Process improperly exited DSM
"RTN","ZOSVKRV",204,0)
 I %TYPE="DSM",$V(KMPR("JTAB")+$ZK(JOB_B_FLAGS),-1,1)\$ZK(JOB_M_EXITED)#2 G IMPROP
"RTN","ZOSVKRV",205,0)
 ;
"RTN","ZOSVKRV",206,0)
 ; Get commands and global references from job table
"RTN","ZOSVKRV",207,0)
 S KMPRCMD=$V(KMPR("JTAB")),KMPRGLO=$V(KMPR("JTAB")+12)
"RTN","ZOSVKRV",208,0)
 Q
"RTN","ZOSVKRV",209,0)
UERR ;
"RTN","ZOSVKRV",210,0)
 ; Ignore NONEXPR (improperly exited DSM process) and SUSPENDED process
"RTN","ZOSVKRV",211,0)
 I $ZE["NONEXPR"!($ZE["SUSPENDED") Q
"RTN","ZOSVKRV",212,0)
 ZQ
"RTN","ZOSVKRV",213,0)
IMPROP ;
"RTN","ZOSVKRV",214,0)
 ; Ignore improperly exited DSM process
"RTN","ZOSVKRV",215,0)
 Q
"VER")
8.0^22.0
**END**
**END**
