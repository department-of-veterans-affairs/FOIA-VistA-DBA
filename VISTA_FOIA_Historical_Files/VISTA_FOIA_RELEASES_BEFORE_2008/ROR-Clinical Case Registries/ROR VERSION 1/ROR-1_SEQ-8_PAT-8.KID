Released ROR*1*8 SEQ #8
Extracted from mail message
**KIDS**:ROR*1.0*8^

**INSTALL NAME**
ROR*1.0*8
"BLD",5175,0)
ROR*1.0*8^CLINICAL CASE REGISTRIES^0^3050223^y
"BLD",5175,1,0)
^^2^2^3050107^
"BLD",5175,1,1,0)
Immunology Case (ICR) and Hepatitis C (Hep C) registries historical data
"BLD",5175,1,2,0)
extraction and HL7 context management (CCOW).
"BLD",5175,4,0)
^9.64PA^798.1^4
"BLD",5175,4,798.1,0)
798.1
"BLD",5175,4,798.1,2,0)
^9.641^798.1^1
"BLD",5175,4,798.1,2,798.1,0)
ROR REGISTRY PARAMETERS  (File-top level)
"BLD",5175,4,798.1,2,798.1,1,0)
^9.6411^21.06^1
"BLD",5175,4,798.1,2,798.1,1,21.06,0)
HDT PATIENTS PER BATCH
"BLD",5175,4,798.1,222)
y^n^p^^^^n^^n
"BLD",5175,4,798.1,224)
 
"BLD",5175,4,798.5,0)
798.5
"BLD",5175,4,798.5,2,0)
^9.641^798.5^1
"BLD",5175,4,798.5,2,798.5,0)
ROR HDT TASK  (File-top level)
"BLD",5175,4,798.5,2,798.5,1,0)
^9.6411^1.01^1
"BLD",5175,4,798.5,2,798.5,1,1.01,0)
FILE NAME
"BLD",5175,4,798.5,222)
y^n^p^^^^n^^n
"BLD",5175,4,798.5,224)
 
"BLD",5175,4,798.9,0)
798.9
"BLD",5175,4,798.9,222)
n^n^f^^n^^y^m^n
"BLD",5175,4,798.9,224)
I $E($P($G(^ROR(798.9,Y,0)),U),1,6)="VA ICR"
"BLD",5175,4,799.51,0)
799.51
"BLD",5175,4,799.51,222)
n^n^f^^y^^y^o^n
"BLD",5175,4,799.51,224)
 
"BLD",5175,4,"APDD",798.1,798.1)
 
"BLD",5175,4,"APDD",798.1,798.1,21.06)
 
"BLD",5175,4,"APDD",798.5,798.5)
 
"BLD",5175,4,"APDD",798.5,798.5,1.01)
 
"BLD",5175,4,"B",798.1,798.1)
 
"BLD",5175,4,"B",798.5,798.5)
 
"BLD",5175,4,"B",798.9,798.9)
 
"BLD",5175,4,"B",799.51,799.51)
 
"BLD",5175,"INI")
 
"BLD",5175,"INID")
^
"BLD",5175,"INIT")
POS^RORP008
"BLD",5175,"KRN",0)
^9.67PA^8989.52^19
"BLD",5175,"KRN",.4,0)
.4
"BLD",5175,"KRN",.401,0)
.401
"BLD",5175,"KRN",.402,0)
.402
"BLD",5175,"KRN",.403,0)
.403
"BLD",5175,"KRN",.5,0)
.5
"BLD",5175,"KRN",.84,0)
.84
"BLD",5175,"KRN",.84,"NM",0)
^9.68A^3^3
"BLD",5175,"KRN",.84,"NM",1,0)
7980000.019^^1^
"BLD",5175,"KRN",.84,"NM",2,0)
7980000.013^^1^
"BLD",5175,"KRN",.84,"NM",3,0)
7980000.014^^1^
"BLD",5175,"KRN",.84,"NM","B",7980000.013,2)
 
"BLD",5175,"KRN",.84,"NM","B",7980000.014,3)
 
"BLD",5175,"KRN",.84,"NM","B",7980000.019,1)
 
"BLD",5175,"KRN",3.6,0)
3.6
"BLD",5175,"KRN",3.8,0)
3.8
"BLD",5175,"KRN",9.2,0)
9.2
"BLD",5175,"KRN",9.8,0)
9.8
"BLD",5175,"KRN",9.8,"NM",0)
^9.68A^31^31
"BLD",5175,"KRN",9.8,"NM",1,0)
RORHDT04^^0^B40589941
"BLD",5175,"KRN",9.8,"NM",2,0)
RORHL13^^0^B17929172
"BLD",5175,"KRN",9.8,"NM",3,0)
ROR^^0^B18598975
"BLD",5175,"KRN",9.8,"NM",4,0)
RORRP030^^0^B27555685
"BLD",5175,"KRN",9.8,"NM",5,0)
RORUTL18^^0^B2268863
"BLD",5175,"KRN",9.8,"NM",6,0)
RORTSK01^^0^B46655984
"BLD",5175,"KRN",9.8,"NM",7,0)
RORHL17^^0^B33173796
"BLD",5175,"KRN",9.8,"NM",8,0)
RORX005A^^0^B42244883
"BLD",5175,"KRN",9.8,"NM",9,0)
RORNTEG^^0^B18937424
"BLD",5175,"KRN",9.8,"NM",10,0)
RORNTEG0^^0^B4127660
"BLD",5175,"KRN",9.8,"NM",11,0)
RORX009A^^0^B39794510
"BLD",5175,"KRN",9.8,"NM",12,0)
RORX011^^0^B48831246
"BLD",5175,"KRN",9.8,"NM",13,0)
RORERR20^^0^B59847780
"BLD",5175,"KRN",9.8,"NM",14,0)
RORHL121^^0^B74034597
"BLD",5175,"KRN",9.8,"NM",15,0)
RORHL12^^0^B9327241
"BLD",5175,"KRN",9.8,"NM",16,0)
RORHL11^^0^B42608729
"BLD",5175,"KRN",9.8,"NM",17,0)
RORHL10^^0^B54992755
"BLD",5175,"KRN",9.8,"NM",18,0)
RORSETU2^^0^B11850212
"BLD",5175,"KRN",9.8,"NM",19,0)
RORP006^^1^
"BLD",5175,"KRN",9.8,"NM",20,0)
RORUPD52^^0^B12065730
"BLD",5175,"KRN",9.8,"NM",21,0)
RORRP024^^0^B18900459
"BLD",5175,"KRN",9.8,"NM",22,0)
RORHL7^^0^B47865883
"BLD",5175,"KRN",9.8,"NM",23,0)
RORHL08^^0^B43491320
"BLD",5175,"KRN",9.8,"NM",24,0)
ROR01^^0^B16147
"BLD",5175,"KRN",9.8,"NM",25,0)
ROREXT^^0^B34201963
"BLD",5175,"KRN",9.8,"NM",26,0)
ROREXTUT^^0^B39224729
"BLD",5175,"KRN",9.8,"NM",27,0)
RORHDT02^^0^B7889072
"BLD",5175,"KRN",9.8,"NM",28,0)
RORHDTUT^^0^B26988408
"BLD",5175,"KRN",9.8,"NM",29,0)
RORHL16^^0^B14260810
"BLD",5175,"KRN",9.8,"NM",30,0)
RORHL06^^0^B24855120
"BLD",5175,"KRN",9.8,"NM",31,0)
RORRP035^^0^B5599797
"BLD",5175,"KRN",9.8,"NM","B","ROR",3)
 
"BLD",5175,"KRN",9.8,"NM","B","ROR01",24)
 
"BLD",5175,"KRN",9.8,"NM","B","RORERR20",13)
 
"BLD",5175,"KRN",9.8,"NM","B","ROREXT",25)
 
"BLD",5175,"KRN",9.8,"NM","B","ROREXTUT",26)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHDT02",27)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHDT04",1)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHDTUT",28)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL06",30)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL08",23)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL10",17)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL11",16)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL12",15)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL121",14)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL13",2)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL16",29)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL17",7)
 
"BLD",5175,"KRN",9.8,"NM","B","RORHL7",22)
 
"BLD",5175,"KRN",9.8,"NM","B","RORNTEG",9)
 
"BLD",5175,"KRN",9.8,"NM","B","RORNTEG0",10)
 
"BLD",5175,"KRN",9.8,"NM","B","RORP006",19)
 
"BLD",5175,"KRN",9.8,"NM","B","RORRP024",21)
 
"BLD",5175,"KRN",9.8,"NM","B","RORRP030",4)
 
"BLD",5175,"KRN",9.8,"NM","B","RORRP035",31)
 
"BLD",5175,"KRN",9.8,"NM","B","RORSETU2",18)
 
"BLD",5175,"KRN",9.8,"NM","B","RORTSK01",6)
 
"BLD",5175,"KRN",9.8,"NM","B","RORUPD52",20)
 
"BLD",5175,"KRN",9.8,"NM","B","RORUTL18",5)
 
"BLD",5175,"KRN",9.8,"NM","B","RORX005A",8)
 
"BLD",5175,"KRN",9.8,"NM","B","RORX009A",11)
 
"BLD",5175,"KRN",9.8,"NM","B","RORX011",12)
 
"BLD",5175,"KRN",19,0)
19
"BLD",5175,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",5175,"KRN",19,"NM",1,0)
ROR GUI^^0
"BLD",5175,"KRN",19,"NM","B","ROR GUI",1)
 
"BLD",5175,"KRN",19.1,0)
19.1
"BLD",5175,"KRN",101,0)
101
"BLD",5175,"KRN",409.61,0)
409.61
"BLD",5175,"KRN",771,0)
771
"BLD",5175,"KRN",870,0)
870
"BLD",5175,"KRN",8989.51,0)
8989.51
"BLD",5175,"KRN",8989.52,0)
8989.52
"BLD",5175,"KRN",8994,0)
8994
"BLD",5175,"KRN","B",.4,.4)
 
"BLD",5175,"KRN","B",.401,.401)
 
"BLD",5175,"KRN","B",.402,.402)
 
"BLD",5175,"KRN","B",.403,.403)
 
"BLD",5175,"KRN","B",.5,.5)
 
"BLD",5175,"KRN","B",.84,.84)
 
"BLD",5175,"KRN","B",3.6,3.6)
 
"BLD",5175,"KRN","B",3.8,3.8)
 
"BLD",5175,"KRN","B",9.2,9.2)
 
"BLD",5175,"KRN","B",9.8,9.8)
 
"BLD",5175,"KRN","B",19,19)
 
"BLD",5175,"KRN","B",19.1,19.1)
 
"BLD",5175,"KRN","B",101,101)
 
"BLD",5175,"KRN","B",409.61,409.61)
 
"BLD",5175,"KRN","B",771,771)
 
"BLD",5175,"KRN","B",870,870)
 
"BLD",5175,"KRN","B",8989.51,8989.51)
 
"BLD",5175,"KRN","B",8989.52,8989.52)
 
"BLD",5175,"KRN","B",8994,8994)
 
"BLD",5175,"PRE")
RORP008
"BLD",5175,"QUES",0)
^9.62^^
"BLD",5175,"REQB",0)
^9.611^2^2
"BLD",5175,"REQB",1,0)
ROR*1.0*6^2
"BLD",5175,"REQB",2,0)
ROR*1.0*7^2
"BLD",5175,"REQB","B","ROR*1.0*6",1)
 
"BLD",5175,"REQB","B","ROR*1.0*7",2)
 
"DATA",798.9,4,0)
VA ICR^^1
"DATA",798.9,4,1,0)
^798.92^26^24
"DATA",798.9,4,1,1,0)
29327^^6
"DATA",798.9,4,1,4,0)
31201^^0
"DATA",798.9,4,1,5,0)
32571^^0
"DATA",798.9,4,1,6,0)
32602^^0
"DATA",798.9,4,1,7,0)
33866^^0
"DATA",798.9,4,1,8,0)
5223^^6
"DATA",798.9,4,1,9,0)
5224^^6
"DATA",798.9,4,1,10,0)
5225^^6
"DATA",798.9,4,1,11,0)
5220^^6
"DATA",798.9,4,1,12,0)
5221^^6
"DATA",798.9,4,1,13,0)
7917^^6
"DATA",798.9,4,1,14,0)
7918^^6
"DATA",798.9,4,1,15,0)
7919^^6
"DATA",798.9,4,1,16,0)
29893^^0
"DATA",798.9,4,1,17,0)
14092^^6
"DATA",798.9,4,1,18,0)
16974^^6
"DATA",798.9,4,1,19,0)
21007^^6
"DATA",798.9,4,1,20,0)
22356^^6
"DATA",798.9,4,1,21,0)
22357^^6
"DATA",798.9,4,1,22,0)
22358^^6
"DATA",798.9,4,1,23,0)
30361^^0
"DATA",798.9,4,1,24,0)
16975^^6
"DATA",798.9,4,1,25,0)
13499^^6
"DATA",798.9,4,1,26,0)
21009^^6
"DATA",799.51,1,0)
ABACAVIR^2^20^3535^^^^^1
"DATA",799.51,3,0)
AMPRENAVIR^2^20^3568^^^^^1
"DATA",799.51,4,0)
DELAVIRDINE^2^20^3395^^^^^1
"DATA",799.51,5,0)
DIDANOSINE^2^20^2576^^^^^1
"DATA",799.51,6,0)
EFAVIRENZ^2^20^3528^^^^^1
"DATA",799.51,7,0)
INDINAVIR^2^20^3350^^^^^1
"DATA",799.51,8,0)
LAMIVUDINE^2^20^3315^^^^^1
"DATA",799.51,9,0)
NELFINAVIR^2^20^3394^^^^^1
"DATA",799.51,10,0)
NEVIRAPINE^2^20^3377^^^^^1
"DATA",799.51,11,0)
RITONAVIR^2^20^3349^^^^^1
"DATA",799.51,12,0)
SAQUINAVIR^2^20^3316^^^^^1
"DATA",799.51,13,0)
STAVUDINE (dT4)^2^20^3225^^^^^1
"DATA",799.51,14,0)
ZALCITABINE^2^20^2270^^^^^1
"DATA",799.51,15,0)
ZIDOVUDINE^2^20^2147^^^^^1
"DATA",799.51,16,0)
LAMIVUDINE/ZIDOVUDINE^2^20^3465^^^^^1
"DATA",799.51,17,0)
LOPINAVIR/RITONAVIR^2^20^3660^^^^^1
"DATA",799.51,21,0)
TENOFOVIR^2^20^3724^^^^^1
"DATA",799.51,22,0)
ABACAVIR/LAMIVUDINE/ZIDOVUDINE^2^20^3677^^^^^1
"DATA",799.51,23,0)
ENFUVIRTIDE^2^20^3864
"DATA",799.51,24,0)
ATAZANAVIR^2^20^3890
"DATA",799.51,25,0)
EMTRICITABINE^2^20^3888
"DATA",799.51,26,0)
FOSAMPRENAVIR^2^20^3918^^^^^1
"DATA",799.51,27,0)
EPZICOM^2^20^3994^^^^^1
"DATA",799.51,28,0)
TRUVADA^2^20^3990^^^^^1
"FIA",798.1)
ROR REGISTRY PARAMETERS
"FIA",798.1,0)
^ROR(798.1,
"FIA",798.1,0,0)
798.1Is
"FIA",798.1,0,1)
y^n^p^^^^n^^n
"FIA",798.1,0,10)
 
"FIA",798.1,0,11)
 
"FIA",798.1,0,"RLRO")
 
"FIA",798.1,0,"VR")
1.0^ROR
"FIA",798.1,798.1)
1
"FIA",798.1,798.1,21.06)
 
"FIA",798.5)
ROR HDT TASK
"FIA",798.5,0)
^RORDATA(798.5,
"FIA",798.5,0,0)
798.5
"FIA",798.5,0,1)
y^n^p^^^^n^^n
"FIA",798.5,0,10)
 
"FIA",798.5,0,11)
 
"FIA",798.5,0,"RLRO")
 
"FIA",798.5,0,"VR")
1.0^ROR
"FIA",798.5,798.5)
1
"FIA",798.5,798.5,1.01)
 
"FIA",798.9)
ROR LAB SEARCH
"FIA",798.9,0)
^ROR(798.9,
"FIA",798.9,0,0)
798.9
"FIA",798.9,0,1)
n^n^f^^n^^y^m^n
"FIA",798.9,0,10)
 
"FIA",798.9,0,11)
I $E($P($G(^ROR(798.9,Y,0)),U),1,6)="VA ICR"
"FIA",798.9,0,"RLRO")
 
"FIA",798.9,0,"VR")
1.0^ROR
"FIA",798.9,798.9)
0
"FIA",798.9,798.92)
0
"FIA",799.51)
ROR GENERIC DRUG
"FIA",799.51,0)
^ROR(799.51,
"FIA",799.51,0,0)
799.51
"FIA",799.51,0,1)
n^n^f^^y^^y^o^n
"FIA",799.51,0,10)
 
"FIA",799.51,0,11)
 
"FIA",799.51,0,"RLRO")
 
"FIA",799.51,0,"VR")
1.0^ROR
"FIA",799.51,799.51)
0
"INIT")
POS^RORP008
"IX",798.5,798.5,"DF",0)
798.5^DF^Uniqueness Index for the "B" Key of File #798.5^R^^R^IR^I^798.5^^^^^LS
"IX",798.5,798.5,"DF",1)
S ^RORDATA(798.5,"DF",X(1),X(2),DA)=""
"IX",798.5,798.5,"DF",2)
K ^RORDATA(798.5,"DF",X(1),X(2),DA)
"IX",798.5,798.5,"DF",2.5)
K ^RORDATA(798.5,"DF")
"IX",798.5,798.5,"DF",11.1,0)
^.114IA^2^2
"IX",798.5,798.5,"DF",11.1,1,0)
1^F^798.5^.02^^1
"IX",798.5,798.5,"DF",11.1,2,0)
2^F^798.5^1.01^^2
"IX",798.9,798.9,"B",0)
798.9^B^Uniqueness Index for the "A" Key of File #798.9^R^^F^IR^I^798.9^^^^^LS
"IX",798.9,798.9,"B",1)
S ^ROR(798.9,"B",X,DA)=""
"IX",798.9,798.9,"B",2)
K ^ROR(798.9,"B",X,DA)
"IX",798.9,798.9,"B",2.5)
K ^ROR(798.9,"B")
"IX",798.9,798.9,"B",11.1,0)
^.114IA^1^1
"IX",798.9,798.9,"B",11.1,1,0)
1^F^798.9^.01^^1
"IX",799.51,799.51,"ARDG",0)
799.51^ARDG^Registry & Drug Group^R^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"ARDG",1)
S ^ROR(799.51,"ARDG",X(2),X(3),DA)=""
"IX",799.51,799.51,"ARDG",2)
K ^ROR(799.51,"ARDG",X(2),X(3),DA)
"IX",799.51,799.51,"ARDG",2.5)
K ^ROR(799.51,"ARDG")
"IX",799.51,799.51,"ARDG",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"ARDG",11.1,1,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",11.1,2,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"ARDG",11.1,3,0)
2^C^^^^1
"IX",799.51,799.51,"ARDG",11.1,3,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"KEY",0)
799.51^KEY^Registry, Drug Group, Generic Drug^R^^R^IR^I^799.51^^^^^LS
"IX",799.51,799.51,"KEY",1)
S ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.51,799.51,"KEY",2)
K ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)
"IX",799.51,799.51,"KEY",2.5)
K ^ROR(799.51,"KEY")
"IX",799.51,799.51,"KEY",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"KEY",11.1,1,0)
1^F^799.51^.02^^1
"IX",799.51,799.51,"KEY",11.1,2,0)
2^F^799.51^.03^^2
"IX",799.51,799.51,"KEY",11.1,3,0)
3^F^799.51^.04^^3
"KEY",798.5,798.5,"B",0)
798.5^B^S^145
"KEY",798.5,798.5,"B",2,0)
^.312IA^2^2
"KEY",798.5,798.5,"B",2,1,0)
.02^798.5^1
"KEY",798.5,798.5,"B",2,2,0)
1.01^798.5^2
"KEY",798.9,798.9,"A",0)
798.9^A^P^117
"KEY",798.9,798.9,"A",2,0)
^.312IA^1^1
"KEY",798.9,798.9,"A",2,1,0)
.01^798.9^1
"KEY",799.51,799.51,"A",0)
799.51^A^P^305
"KEY",799.51,799.51,"A",2,0)
^.312IA^3^3
"KEY",799.51,799.51,"A",2,1,0)
.02^799.51^1
"KEY",799.51,799.51,"A",2,2,0)
.03^799.51^2
"KEY",799.51,799.51,"A",2,3,0)
.04^799.51^3
"KEYPTR",798.5,798.5,"B")
798.5^DF
"KEYPTR",798.9,798.9,"A")
798.9^B
"KEYPTR",799.51,799.51,"A")
799.51^KEY
"KRN",.84,99001162,-1)
1^1
"KRN",.84,99001162,0)
7980000.019
"KRN",.84,99001163,-1)
1^2
"KRN",.84,99001163,0)
7980000.013
"KRN",.84,99001164,-1)
1^3
"KRN",.84,99001164,0)
7980000.014
"KRN",19,11616,-1)
0^1
"KRN",19,11616,0)
ROR GUI^Broker Context^^B^^^^^^^^CLINICAL CASE REGISTRIES
"KRN",19,11616,1,0)
^19.06^2^2^3030714^^^^
"KRN",19,11616,1,1,0)
This option holds the references to the package RPC Broker Calls used by
"KRN",19,11616,1,2,0)
the GUI to create an application context (for security purposes).
"KRN",19,11616,99.1)
59458,48458
"KRN",19,11616,200.9)
^y
"KRN",19,11616,"RPC",0)
^19.05P^82^82
"KRN",19,11616,"RPC",1,0)
ROR ACTIVATE INACTIVATE
"KRN",19,11616,"RPC",2,0)
ROR ACTIVATE PATIENT GET
"KRN",19,11616,"RPC",3,0)
ROR EDIT PATIENT GET
"KRN",19,11616,"RPC",4,0)
ROR ENTER EDIT PATIENT
"KRN",19,11616,"RPC",5,0)
ROR IDRUGS PATIENT SET
"KRN",19,11616,"RPC",6,0)
ROR PATIENT SEARCH
"KRN",19,11616,"RPC",7,0)
ROR REG PARAMS GET
"KRN",19,11616,"RPC",8,0)
ROR REPORT
"KRN",19,11616,"RPC",10,0)
XWB GET VARIABLE VALUE
"KRN",19,11616,"RPC",11,0)
ROR ACTIVITY DETAILS
"KRN",19,11616,"RPC",12,0)
ROR ACTIVITY LOG
"KRN",19,11616,"RPC",13,0)
ROR INV DRUGS
"KRN",19,11616,"RPC",14,0)
ROR LOG MESSAGE DETAILS
"KRN",19,11616,"RPC",15,0)
ROR PATIENT CHECKS
"KRN",19,11616,"RPC",16,0)
XUS GET USER INFO
"KRN",19,11616,"RPC",17,0)
XUS KEY CHECK
"KRN",19,11616,"RPC",18,0)
ROR DRUG REPORT
"KRN",19,11616,"RPC",19,0)
XWB DEFERRED RPC
"KRN",19,11616,"RPC",20,0)
XWB DEFERRED CLEAR
"KRN",19,11616,"RPC",21,0)
XWB DEFERRED STATUS
"KRN",19,11616,"RPC",22,0)
XWB DEFERRED GETDATA
"KRN",19,11616,"RPC",23,0)
ROR STORE RPC HANDLE
"KRN",19,11616,"RPC",24,0)
ROR GET RPC HANDLE
"KRN",19,11616,"RPC",25,0)
ROR GET CODE LIST
"KRN",19,11616,"RPC",26,0)
ROR GET GUI PARAMS
"KRN",19,11616,"RPC",27,0)
ROR SET GUI PARAMS
"KRN",19,11616,"RPC",28,0)
ROR CLEAR RPC HANDLE
"KRN",19,11616,"RPC",29,0)
ROR REPORT RETRIEVE
"KRN",19,11616,"RPC",30,0)
ROR GUI ACCESS
"KRN",19,11616,"RPC",31,0)
ROR TASK INFO
"KRN",19,11616,"RPC",32,0)
ROR TASK LIST
"KRN",19,11616,"RPC",33,0)
ROR REPORT SCHEDULE
"KRN",19,11616,"RPC",34,0)
XWB IS RPC AVAILABLE
"KRN",19,11616,"RPC",35,0)
ROR GET REGISTRY INFO
"KRN",19,11616,"RPC",36,0)
ROR LIST REGISTRY USERS
"KRN",19,11616,"RPC",37,0)
ROR GUI PARAMETER GET
"KRN",19,11616,"RPC",38,0)
ROR GUI PARAMETER SET
"KRN",19,11616,"RPC",39,0)
ROR LOG GET ACCESS VIOLATIONS
"KRN",19,11616,"RPC",40,0)
ROR LOG GET LIST
"KRN",19,11616,"RPC",41,0)
ROR LOG GET MESSAGES
"KRN",19,11616,"RPC",42,0)
ROR REPORTS AVAILABLE
"KRN",19,11616,"RPC",43,0)
ROR TASK DELETE
"KRN",19,11616,"RPC",44,0)
ROR REPORT STYLESHEET
"KRN",19,11616,"RPC",45,0)
ROR LIST PATIENTS
"KRN",19,11616,"RPC",46,0)
ROR PATIENT SELECTION RULES
"KRN",19,11616,"RPC",47,0)
ROR LIST DIVISIONS
"KRN",19,11616,"RPC",48,0)
ROR LIST HOSPITAL LOCATIONS
"KRN",19,11616,"RPC",49,0)
ROR LIST ICD-9
"KRN",19,11616,"RPC",50,0)
ROR LIST LABORATORY TESTS
"KRN",19,11616,"RPC",51,0)
ROR LIST VA DRUG CLASSES
"KRN",19,11616,"RPC",52,0)
ROR LIST ITEMS
"KRN",19,11616,"RPC",53,0)
ROR LIST VISTA USERS
"KRN",19,11616,"RPC",54,0)
ROR UPDATE COORDINATORS
"KRN",19,11616,"RPC",55,0)
ROR LIST COORDINATORS
"KRN",19,11616,"RPC",56,0)
ROR LIST STATES
"KRN",19,11616,"RPC",57,0)
RORICR CDC LOAD
"KRN",19,11616,"RPC",58,0)
RORICR CDC SAVE
"KRN",19,11616,"RPC",59,0)
ROR LOG INFO
"KRN",19,11616,"RPC",60,0)
ROR GET USER INFO
"KRN",19,11616,"RPC",61,0)
ROR PATIENT GET DATA
"KRN",19,11616,"RPC",62,0)
ROR PATIENT (IN)ACTIVATE
"KRN",19,11616,"RPC",63,0)
ROR PATIENT DELETE
"KRN",19,11616,"RPC",64,0)
ROR LIST LOCAL LAB TESTS
"KRN",19,11616,"RPC",65,0)
ROR UPDATE LOCAL LAB TESTS
"KRN",19,11616,"RPC",66,0)
ROR UPDATE LOCAL DRUGS
"KRN",19,11616,"RPC",67,0)
ROR LIST LOCAL DRUGS
"KRN",19,11616,"RPC",68,0)
ROR LIST DRUGS
"KRN",19,11616,"RPC",69,0)
RORICR PATIENT LOAD
"KRN",19,11616,"RPC",70,0)
RORICR PATIENT SAVE
"KRN",19,11616,"RPC",71,0)
RORICR PATIENT CANCEL
"KRN",19,11616,"RPC",72,0)
RORICR CDC CANCEL
"KRN",19,11616,"RPC",73,0)
ROR TASK VALIDATE RESCHEDULING
"KRN",19,11616,"RPC",74,0)
ROR LIST GENERIC DRUGS
"KRN",19,11616,"RPC",78,0)
VAFCTFU CONVERT DFN TO ICN
"KRN",19,11616,"RPC",79,0)
VAFCTFU CONVERT ICN TO DFN
"KRN",19,11616,"RPC",82,0)
DDR LISTER
"KRN",19,11616,"U")
BROKER CONTEXT
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",389,-1)
1^1
"PKG",389,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL CASE REGISTRIES
"PKG",389,20,0)
^9.402P^^
"PKG",389,22,0)
^9.49I^1^1
"PKG",389,22,1,0)
1.0^3020515^3020726^222222227
"PKG",389,22,1,"PAH",1,0)
8^3050223^222222227
"PKG",389,22,1,"PAH",1,1,0)
^^2^2^3050223
"PKG",389,22,1,"PAH",1,1,1,0)
Immunology Case (ICR) and Hepatitis C (Hep C) registries historical data
"PKG",389,22,1,"PAH",1,1,2,0)
extraction and HL7 context management (CCOW).
"PRE")
RORP008
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")
 
"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
32
"RTN","ROR")
0^3^B18598975
"RTN","ROR",1,0)
ROR ;HCIOFO/SG - CLINICAL CASE REGISTRIES ; 2/23/05 8:02am
"RTN","ROR",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,3,5,6,8**;May 14, 2002
"RTN","ROR",3,0)
 ;
"RTN","ROR",4,0)
 ; LOCAL VARIABLE ------ DESCRIPTION
"RTN","ROR",5,0)
 ;
"RTN","ROR",6,0)
 ; RORCACHE              In-memory cache
"RTN","ROR",7,0)
 ; RORERRDL              Default error location
"RTN","ROR",8,0)
 ; RORERROR              Error processing data
"RTN","ROR",9,0)
 ; RORPARM               Task-wide constants and variables
"RTN","ROR",10,0)
 ;
"RTN","ROR",11,0)
 ; See the source code of the ^ROR02 routine for more details.
"RTN","ROR",12,0)
 ;
"RTN","ROR",13,0)
 ; ROREXT                Regular data extraction    (See ^ROREXT)
"RTN","ROR",14,0)
 ; RORHDT                Historical data extraction (See ^RORHDT)
"RTN","ROR",15,0)
 ; RORLOG                Log subsystem data         (See ^RORLOG)
"RTN","ROR",16,0)
 ; RORUPD                Registry update parameters (See ^RORUPD)
"RTN","ROR",17,0)
 ;
"RTN","ROR",18,0)
 ; TEMPORARY NODE ------ DESCRIPTION
"RTN","ROR",19,0)
 ;
"RTN","ROR",20,0)
 ; ^TMP("RORACK")        Control data of acknowledgement processing
"RTN","ROR",21,0)
 ; ^TMP("RORHDT")        Control data of historical data extraction
"RTN","ROR",22,0)
 ; ^TMP("RORTMP")        Temporary storage
"RTN","ROR",23,0)
 ; ^TMP("RORUPD")        Registry update temporary data
"RTN","ROR",24,0)
 ;
"RTN","ROR",25,0)
 ; ^TMP(rtn_name)        Temporary storage used by the rtn_name
"RTN","ROR",26,0)
 ;                       routine (mostly, the RPC's)
"RTN","ROR",27,0)
 ;
"RTN","ROR",28,0)
 ; ^XTMP("RORHDT")       Control data of historical data extraction
"RTN","ROR",29,0)
 ; ^XTMP("RORUPDJ")      Registry update temporary data (multitask)
"RTN","ROR",30,0)
 ; ^XTMP("RORUPDR")      Registry update temporary data (installation)
"RTN","ROR",31,0)
 ;
"RTN","ROR",32,0)
 ; See detailed description of the temporary global nodes in
"RTN","ROR",33,0)
 ; the source code of the ^ROR01 routine.
"RTN","ROR",34,0)
 ;
"RTN","ROR",35,0)
 ; NAMESPACE ----------- DESCRIPTION
"RTN","ROR",36,0)
 ;
"RTN","ROR",37,0)
 ; RORACK*               Acknowldgement processing
"RTN","ROR",38,0)
 ; RORAPI*               Supported APIs
"RTN","ROR",39,0)
 ; RORDD*                Routines used by the Data Dictionary
"RTN","ROR",40,0)
 ; RORERR*               Error processing
"RTN","ROR",41,0)
 ; ROREVT*               Event protocols
"RTN","ROR",42,0)
 ; ROREX*                Regular data extraction & transmission
"RTN","ROR",43,0)
 ; RORHDT*               Historical data extraction
"RTN","ROR",44,0)
 ; RORHL*                HL7
"RTN","ROR",45,0)
 ; RORICR*               ICR-specific call-back routines
"RTN","ROR",46,0)
 ; RORKIDS*              Low-level installation utilities (KIDS)
"RTN","ROR",47,0)
 ; RORLOCK*              Locks and transactions
"RTN","ROR",48,0)
 ; RORLOG*               Error recording
"RTN","ROR",49,0)
 ;
"RTN","ROR",50,0)
 ; RORPnnn               Patch installation routines (KIDS)
"RTN","ROR",51,0)
 ;                         nnn - patch number
"RTN","ROR",52,0)
 ; RORPEnnn              Environment check routines (deprecated)
"RTN","ROR",53,0)
 ; RORPOnnn              Post-install routines      (deprecated)
"RTN","ROR",54,0)
 ; RORPRnnn              Pre-install routines       (deprecated)
"RTN","ROR",55,0)
 ; RORPUT*               High-level installation utilities
"RTN","ROR",56,0)
 ;
"RTN","ROR",57,0)
 ; RORREP*               Roll-and-scroll reports
"RTN","ROR",58,0)
 ; RORRP*                Remote procedures
"RTN","ROR",59,0)
 ; RORSET*               Setup routines
"RTN","ROR",60,0)
 ; RORTXT*               Text resource routines
"RTN","ROR",61,0)
 ; RORUP*                Registry update
"RTN","ROR",62,0)
 ; RORUTL*               Utilities
"RTN","ROR",63,0)
 ; RORVM*                Entry points for VistA menu options
"RTN","ROR",64,0)
 ; RORX*                 XML reports
"RTN","ROR",65,0)
 ;
"RTN","ROR",66,0)
 ; MENU OPTION --------- DESCRIPTION
"RTN","ROR",67,0)
 ;
"RTN","ROR",68,0)
 ; [ROR TASK]            Registry update and data extraction option
"RTN","ROR",69,0)
 ;                       (must be scheduled; do not run it directly)
"RTN","ROR",70,0)
 ; [ROR SETUP]           Registry Setup
"RTN","ROR",71,0)
 ; [RORHDT MAIN]         Historical data extraction menu
"RTN","ROR",72,0)
 ; [RORMNT MAIN]         Maintenance menu
"RTN","ROR",73,0)
 ;
"RTN","ROR",74,0)
 ; SPECIAL ENTRY POINT - DESCRIPTION
"RTN","ROR",75,0)
 ;
"RTN","ROR",76,0)
 ;    START^RORTSITE     Prepares test sites for going live
"RTN","ROR",77,0)
 ;         ^RORUTL06     Registry definition validator
"RTN","ROR",78,0)
 ; DISTPREP^RORUTL06     Prepares registry parameters for KIDS distr.
"RTN","ROR",79,0)
 ;   PRTMDE^RORUTL06     Prints the data element metadata
"RTN","ROR",80,0)
 ;
"RTN","ROR",81,0)
 ;  EXTRACT^RORUTL07     Data extraction & transmission in debug mode
"RTN","ROR",82,0)
 ;   UPDATE^RORUTL07     Registry update in debug mode
"RTN","ROR",83,0)
 ;
"RTN","ROR",84,0)
 ; INITIALS ------------ DEVELOPER
"RTN","ROR",85,0)
 ;
"RTN","ROR",86,0)
 ; BH                    Brent Hicks
"RTN","ROR",87,0)
 ; CRT                   Cameron Taylor
"RTN","ROR",88,0)
 ; SG                    Sergey Gavrilov
"RTN","ROR",89,0)
 ;
"RTN","ROR",90,0)
 Q
"RTN","ROR",91,0)
 ;
"RTN","ROR",92,0)
 ;***** RETURNS THE TEST BUILD NUMBER FOR THE DATA EXTRACTION
"RTN","ROR",93,0)
BUILD() ;
"RTN","ROR",94,0)
 Q 6
"RTN","ROR",95,0)
 ;
"RTN","ROR",96,0)
 ;***** REGISTRY UPDATE AND DATA EXTRACTION TASK
"RTN","ROR",97,0)
 ;
"RTN","ROR",98,0)
 ; ZTQPARAM      String that contains a list of registry names
"RTN","ROR",99,0)
 ;               separated by commas. You must define the list as
"RTN","ROR",100,0)
 ;               a value of the TASK PARAMETERS field during
"RTN","ROR",101,0)
 ;               scheduling of the [ROR TASK] option that uses
"RTN","ROR",102,0)
 ;               this entry point.
"RTN","ROR",103,0)
 ;
"RTN","ROR",104,0)
 ; The following task parameters are optional. They can be defined
"RTN","ROR",105,0)
 ; on the second page of the option scheduling form as the pairs of
"RTN","ROR",106,0)
 ; variable names and values. See description of the ROR TASK option
"RTN","ROR",107,0)
 ; for more details regarding these parameters.
"RTN","ROR",108,0)
 ;
"RTN","ROR",109,0)
 ; [RORFLCLR]    Clear flags to control processing.
"RTN","ROR",110,0)
 ; [RORFLSET]    Set flags to control processing.
"RTN","ROR",111,0)
 ;
"RTN","ROR",112,0)
 ;                 D  Run the task(s) in Debug Mode #1
"RTN","ROR",113,0)
 ;
"RTN","ROR",114,0)
 ;                 E  Use the event references (file #798.3)
"RTN","ROR",115,0)
 ;
"RTN","ROR",116,0)
 ;                 X  Suspend the data extraction task in the
"RTN","ROR",117,0)
 ;                    same way as the registry update
"RTN","ROR",118,0)
 ;
"RTN","ROR",119,0)
 ; [RORMNTSK]    Maximum number of the registry update subtasks.
"RTN","ROR",120,0)
 ;               The default value of the parameter is "2-3-AUTO".
"RTN","ROR",121,0)
 ;
"RTN","ROR",122,0)
 ; [RORSUSP]     Suspension parameters of the registry update and
"RTN","ROR",123,0)
 ;               data extraction subtasks. The subtasks are not
"RTN","ROR",124,0)
 ;               suspended by default.
"RTN","ROR",125,0)
 ;
"RTN","ROR",126,0)
 ;               If you want to suspend data extraction subtask(s)
"RTN","ROR",127,0)
 ;               also, the flag "X" should be included in the value
"RTN","ROR",128,0)
 ;               of the RORFLSET parameters.
"RTN","ROR",129,0)
 ;
"RTN","ROR",130,0)
TASK ;
"RTN","ROR",131,0)
 N RORERROR      ; Error processing data
"RTN","ROR",132,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","ROR",133,0)
 N RORPARM       ; Application parameters
"RTN","ROR",134,0)
 ;
"RTN","ROR",135,0)
 N CNT,I,RC,REGLST,REGNAME,RGEXLST,RORERRDL  K ZTREQ
"RTN","ROR",136,0)
 ;--- Initialize constants and variables
"RTN","ROR",137,0)
 D INIT^RORUTL01("ROR",1)
"RTN","ROR",138,0)
 D CLEAR^RORERR("TASK^ROR",1)
"RTN","ROR",139,0)
 ;--- Open a new log
"RTN","ROR",140,0)
 S RC=$$SETUP^RORLOG(),RC=$$OPEN^RORLOG(,,"ROR TASK STARTED")
"RTN","ROR",141,0)
 ;--- Check the task parameters and force the <UNDEF>
"RTN","ROR",142,0)
 ;--- error if any of them has an invalid value
"RTN","ROR",143,0)
 I $$TASKPRMS^ROR10(.REGLST)<0  K ZTQPARAM  S RC=ZTQPARAM
"RTN","ROR",144,0)
 ;--- Associate the log with the registries
"RTN","ROR",145,0)
 S RC=$$SETRGLST^RORLOG(.REGLST)
"RTN","ROR",146,0)
 ;
"RTN","ROR",147,0)
 ;--- Debug mode
"RTN","ROR",148,0)
 S:$G(RORFLSET)["D" RORPARM("DEBUG")=1
"RTN","ROR",149,0)
 ;
"RTN","ROR",150,0)
 ;--- Rebuild the "ACL" cross-reference
"RTN","ROR",151,0)
 S RC=$$RNDXACL^RORUTL11()
"RTN","ROR",152,0)
 ;--- Check the application acknowledgements
"RTN","ROR",153,0)
 S RC=$$CHECKACK^ROR10(.REGLST)
"RTN","ROR",154,0)
 ;
"RTN","ROR",155,0)
 ;--- Update the registries
"RTN","ROR",156,0)
 S RC=$$UPDATE^RORUPD(.REGLST,.RGEXLST,RORMNTSK,RORSUSP,RORFLCLR,RORFLSET)
"RTN","ROR",157,0)
 ;--- Process the errors
"RTN","ROR",158,0)
 I RC<0  D  G:RC<0 ABORT
"RTN","ROR",159,0)
 . ;--- Quit if stop is requested (via the TaskMan User option)
"RTN","ROR",160,0)
 . I RC=-42  D ALERT^RORUTL01(.REGLST,-42)  S ZTSTOP=1  Q
"RTN","ROR",161,0)
 . ;--- Do not send the alert for some warnings
"RTN","ROR",162,0)
 . I RC=-28  S RC=0  Q
"RTN","ROR",163,0)
 . ;--- Send the alert in case of other errors/warnings
"RTN","ROR",164,0)
 . D ALERT^RORUTL01(.REGLST,-43,,,,"registry update")
"RTN","ROR",165,0)
 . S RC=0
"RTN","ROR",166,0)
 ;
"RTN","ROR",167,0)
 ;--- Mark registry records 3 weeks after the installation so that
"RTN","ROR",168,0)
 ;    the local registry data and demographic data will be resent
"RTN","ROR",169,0)
 ;--- to restore the data overwritten with the historical data
"RTN","ROR",170,0)
 S RC=$$REMARK^RORUTL05(.RGEXLST,21)
"RTN","ROR",171,0)
 ;
"RTN","ROR",172,0)
 ;--- Schedule the data extraction task(s)
"RTN","ROR",173,0)
 S REGNAME=""  K ZTSAVE
"RTN","ROR",174,0)
 F CNT=1:1  S REGNAME=$O(RGEXLST(REGNAME))  Q:REGNAME=""  D
"RTN","ROR",175,0)
 . S ZTRTN="TASK^ROREXT",ZTIO=""
"RTN","ROR",176,0)
 . S ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,,(CNT-1)*30)
"RTN","ROR",177,0)
 . S ZTDESC="Data Extraction ("_REGNAME_")"
"RTN","ROR",178,0)
 . S ZTSAVE("RORREG")=REGNAME
"RTN","ROR",179,0)
 . S ZTSAVE("RORFLCLR")="",ZTSAVE("RORFLSET")=""
"RTN","ROR",180,0)
 . S ZTSAVE("RORSUSP")=""
"RTN","ROR",181,0)
 . D ^%ZTLOAD
"RTN","ROR",182,0)
 ;
"RTN","ROR",183,0)
 ;--- Purge the old tasks
"RTN","ROR",184,0)
 S RC=$$PURGE^RORTSK02(14)
"RTN","ROR",185,0)
 ;--- Purge the old logs
"RTN","ROR",186,0)
 S RC=$$PURGE^RORLOG01(14)
"RTN","ROR",187,0)
 ;--- Purge the old event references
"RTN","ROR",188,0)
 S RC=$$EPDATE^RORUTL05()
"RTN","ROR",189,0)
 S:RC>0 RC=$$PURGE^RORUPP02(RC)
"RTN","ROR",190,0)
 ;---
"RTN","ROR",191,0)
 S ZTREQ="@"
"RTN","ROR",192,0)
ABORT ;
"RTN","ROR",193,0)
 S I=$S($G(ZTREQ)="@":"COMPLETED",1:"ABORTED")
"RTN","ROR",194,0)
 D CLOSE^RORLOG("ROR TASK "_I)
"RTN","ROR",195,0)
 Q
"RTN","ROR01")
0^24^B16147
"RTN","ROR01",1,0)
ROR01 ;HCIOFO/SG - CLINICAL CASE REGISTRIES (TEMP. GLOBALS) ; 12/21/04 2:38pm
"RTN","ROR01",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","ROR01",3,0)
 ;
"RTN","ROR01",4,0)
 ; ^TMP("RORACK") ------ CONTROL DATA OF ACKNOWLEDGEMENT PROCESSING
"RTN","ROR01",5,0)
 ;
"RTN","ROR01",6,0)
 ; ^TMP("RORACK",$J,
"RTN","ROR01",7,0)
 ;   "PR",IEN)           List of IENs of registry records that
"RTN","ROR01",8,0)
 ;                       acknowledgements have been processed for.
"RTN","ROR01",9,0)
 ;
"RTN","ROR01",10,0)
 ; ^TMP("RORHDT") ------ CONTROL DATA OF HISTORICAL DATA EXTRACTION
"RTN","ROR01",11,0)
 ;
"RTN","ROR01",12,0)
 ; ^TMP("RORHDT",$J,
"RTN","ROR01",13,0)
 ;   "PR",               List of IENs of registry records processed
"RTN","ROR01",14,0)
 ;                       in the re-extraction section of function
"RTN","ROR01",15,0)
 ;                       $$EXTRACT^RORHDT04.
"RTN","ROR01",16,0)
 ;     IEN)              Return code of the record processing. If this
"RTN","ROR01",17,0)
 ;                       value is less than zero, data extraction was
"RTN","ROR01",18,0)
 ;                       not successful again.
"RTN","ROR01",19,0)
 ;
"RTN","ROR01",20,0)
 ; ^TMP("RORPTF") ------ TEMPOPARY PTF INDEX FOR DATA EXTRACTION
"RTN","ROR01",21,0)
 ;
"RTN","ROR01",22,0)
 ; ^TMP("RORPTF",$J,
"RTN","ROR01",23,0)
 ;   "DTF",              List of already indexed time frames of
"RTN","ROR01",24,0)
 ;                       the PTF CLOSE OUT file (#45.84).
"RTN","ROR01",25,0)
 ;     StartDate)        StartDate^EndDate
"RTN","ROR01",26,0)
 ;   "PDI",              Temporary PTF index itself
"RTN","ROR01",27,0)
 ;     DFN,PTFIEN)       ""
"RTN","ROR01",28,0)
 ;
"RTN","ROR01",29,0)
 ; ^TMP("RORTMP",$J) --- TEMPORARY STORAGE
"RTN","ROR01",30,0)
 ;
"RTN","ROR01",31,0)
 ; ^TMP("RORUPD") ------ REGISTRY UPDATE TEMPORARY DATA
"RTN","ROR01",32,0)
 ;
"RTN","ROR01",33,0)
 ; ^TMP("RORUPD",$J,
"RTN","ROR01",34,0)
 ;
"RTN","ROR01",35,0)
 ;   1,File#,
"RTN","ROR01",36,0)
 ;     "S",Rule Name)    List of selection rules
"RTN","ROR01",37,0)
 ;     "F",DataCode,     List of data elements to load
"RTN","ROR01",38,0)
 ;       "E")            If expression implementing the selection
"RTN","ROR01",39,0)
 ;                       rule references an external value of the
"RTN","ROR01",40,0)
 ;                       element, the "E" sub-node will be defined.
"RTN","ROR01",41,0)
 ;       "I")            If expression implementing the selection
"RTN","ROR01",42,0)
 ;                       rule references an internal value of the
"RTN","ROR01",43,0)
 ;                       element, the "I" sub-node will be defined.
"RTN","ROR01",44,0)
 ;
"RTN","ROR01",45,0)
 ;   2,Registry#)        Registry Name
"RTN","ROR01",46,0)
 ;
"RTN","ROR01",47,0)
 ;   3,Rule Name,        Selection rule descriptor
"RTN","ROR01",48,0)
 ;                         ^1: Rule#
"RTN","ROR01",49,0)
 ;                         ^2: File Number
"RTN","ROR01",50,0)
 ;                         ^3: 1 if already processed, otherwise
"RTN","ROR01",51,0)
 ;                             empty string
"RTN","ROR01",52,0)
 ;                         ^4: 1 if registry should be updated (in
"RTN","ROR01",53,0)
 ;                             case of matched condition, of course)
"RTN","ROR01",54,0)
 ;     1)                MUMPS function entry point
"RTN","ROR01",55,0)
 ;     2,Registry#)      List of affected registries
"RTN","ROR01",56,0)
 ;     3,Rule Name)      List of rules that this rule depend on
"RTN","ROR01",57,0)
 ;
"RTN","ROR01",58,0)
 ;   4,LabSearch#)       List of Lab search IENs
"RTN","ROR01",59,0)
 ;
"RTN","ROR01",60,0)
 ;   "LS",
"RTN","ROR01",61,0)
 ;     Result Code,
"RTN","ROR01",62,0)
 ;       LabSearch#,
"RTN","ROR01",63,0)
 ;         Seq#)         Condition to check the result
"RTN","ROR01",64,0)
 ;                         ^1: Indicator
"RTN","ROR01",65,0)
 ;                         ^2: Indicated Value
"RTN","ROR01",66,0)
 ;
"RTN","ROR01",67,0)
 ;   "U",Patient#,       This node is defined if the patient has been 
"RTN","ROR01",68,0)
 ;                       processed
"RTN","ROR01",69,0)
 ;     2,Registry#,      This node is defined if the registry should
"RTN","ROR01",70,0)
 ;                       be updated
"RTN","ROR01",71,0)
 ;       Rule#)          Trigger date of the rule
"RTN","ROR01",72,0)
 ;
"RTN","ROR01",73,0)
 ; ^XTMP("RORHDT"_) ---- CONTROL DATA OF HISTORICAL DATA EXTRACTION
"RTN","ROR01",74,0)
 ;
"RTN","ROR01",75,0)
 ; ^XTMP("RORHDT"_Registry#,
"RTN","ROR01",76,0)
 ;   0)                  Node descriptor
"RTN","ROR01",77,0)
 ;                         ^1: purge date  (FileMan)
"RTN","ROR01",78,0)
 ;                         ^2: create date (FileMan)
"RTN","ROR01",79,0)
 ;                         ^3: description
"RTN","ROR01",80,0)
 ;
"RTN","ROR01",81,0)
 ;   "T",Task#)          This node is LOCKed by the historical data
"RTN","ROR01",82,0)
 ;                       extraction task while it is running. If a
"RTN","ROR01",83,0)
 ;                       non-zero value is asssigned to this node
"RTN","ROR01",84,0)
 ;                       during task execution, the task will stop.
"RTN","ROR01",85,0)
 ;
"RTN","ROR01",86,0)
 ; ^XTMP("RORUPD"_) ---- REGISTRY UPDATE TEMPORARY DATA (MULTITASK)
"RTN","ROR01",87,0)
 ;
"RTN","ROR01",88,0)
 ;                       If the registry update starts in the
"RTN","ROR01",89,0)
 ;                       multitask mode, all temporary data from the
"RTN","ROR01",90,0)
 ;                       ^TMP("RORUPD",$J) node is merged to this
"RTN","ROR01",91,0)
 ;                       node so that it will be available for all
"RTN","ROR01",92,0)
 ;                       registry update subtasks.
"RTN","ROR01",93,0)
 ;
"RTN","ROR01",94,0)
 ; ^XTMP("RORUPDJ"_$J,
"RTN","ROR01",95,0)
 ;                       If the regular registry update is run in the
"RTN","ROR01",96,0)
 ;                       multitask mode, the ^XTMP("RORUPDJ"_$J) node
"RTN","ROR01",97,0)
 ;                       is used. $J is the job number of the main
"RTN","ROR01",98,0)
 ;                       registry update task.
"RTN","ROR01",99,0)
 ;
"RTN","ROR01",100,0)
 ; ^XTMP("RORUPDR"_Registry#,
"RTN","ROR01",101,0)
 ;                       During the initial registry population
"RTN","ROR01",102,0)
 ;                       (performed by the post-install routines),
"RTN","ROR01",103,0)
 ;                       the ^XTMP("RORUPDR"_Registry#) node is used.
"RTN","ROR01",104,0)
 ;                       The list of processed patients (the "U"
"RTN","ROR01",105,0)
 ;                       subscript) is used to restart the process
"RTN","ROR01",106,0)
 ;                       after an error or a crash.
"RTN","ROR01",107,0)
 ;
"RTN","ROR01",108,0)
 ;   0)                  Node descriptor
"RTN","ROR01",109,0)
 ;                         ^1: purge date  (FileMan)
"RTN","ROR01",110,0)
 ;                         ^2: create date (FileMan)
"RTN","ROR01",111,0)
 ;                         ^3: description
"RTN","ROR01",112,0)
 ;
"RTN","ROR01",113,0)
 ;   "T",Task#)          This node is LOCKed while the (sub)task is
"RTN","ROR01",114,0)
 ;                       running (subscript of the main task is 0).
"RTN","ROR01",115,0)
 ;
"RTN","ROR01",116,0)
 ;                       Otherwise, "S" means that the subtask has
"RTN","ROR01",117,0)
 ;                       been scheduled but not started yet.
"RTN","ROR01",118,0)
 ;
"RTN","ROR01",119,0)
 ;                       A negative value of the non-locked node
"RTN","ROR01",120,0)
 ;                       represents the error code (for example,
"RTN","ROR01",121,0)
 ;                       -60 means that the subtask has crashed).
"RTN","ROR01",122,0)
 ;
"RTN","ROR01",123,0)
 ;                       Non-negative value of the node means that
"RTN","ROR01",124,0)
 ;                       the subtask has been completed. The value
"RTN","ROR01",125,0)
 ;                       has the following structure:
"RTN","ROR01",126,0)
 ;                         ^1: Number of processed patients
"RTN","ROR01",127,0)
 ;                         ^2: Number of patients processed with
"RTN","ROR01",128,0)
 ;                             errors
"RTN","ROR01",129,0)
 ;
"RTN","ROR01",130,0)
 Q
"RTN","RORERR20")
0^13^B59847780
"RTN","RORERR20",1,0)
RORERR20 ;HCIOFO/SG - LIST OF ERROR MESSAGES  ; 10/12/04 9:00am
"RTN","RORERR20",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,3,5,8**;May 14, 2002
"RTN","RORERR20",3,0)
 ;
"RTN","RORERR20",4,0)
 Q
"RTN","RORERR20",5,0)
 ;
"RTN","RORERR20",6,0)
 ;***** RETURNS THE TEXT OF THE MESSAGE
"RTN","RORERR20",7,0)
 ;
"RTN","RORERR20",8,0)
 ; ERRCODE       Error code
"RTN","RORERR20",9,0)
 ; [.TYPE]       Type of the error
"RTN","RORERR20",10,0)
 ; [ARG1-ARG5]   Optional parameters that substitute the |n| "windows"
"RTN","RORERR20",11,0)
 ;               in the text of the message (for example, the |2| will
"RTN","RORERR20",12,0)
 ;               be substituted by the value of the ARG2).
"RTN","RORERR20",13,0)
 ;
"RTN","RORERR20",14,0)
MSG(ERRCODE,TYPE,ARG1,ARG2,ARG3,ARG4,ARG5) ;
"RTN","RORERR20",15,0)
 S TYPE=6  Q:ERRCODE'<0 ""
"RTN","RORERR20",16,0)
 N ARG,I1,I2,MSG
"RTN","RORERR20",17,0)
 ;--- Get a descriptor of the message
"RTN","RORERR20",18,0)
 S I1=-ERRCODE,MSG=$P($T(MSGLIST+I1),";;",2)
"RTN","RORERR20",19,0)
 S I1=+$TR($P(MSG,U,2)," "),MSG=$P(MSG,U,3,999)
"RTN","RORERR20",20,0)
 S:I1>0 TYPE=I1
"RTN","RORERR20",21,0)
 Q:MSG?." " "Unknown error ("_ERRCODE_")"
"RTN","RORERR20",22,0)
 ;--- Substitute parameters
"RTN","RORERR20",23,0)
 S I1=2
"RTN","RORERR20",24,0)
 F  S I1=$F(MSG,"|",I1-1)  Q:'I1  D
"RTN","RORERR20",25,0)
 . S I2=$F(MSG,"|",I1)  Q:'I2
"RTN","RORERR20",26,0)
 . X "S ARG=$G(ARG"_+$TR($E(MSG,I1,I2-2)," ")_")"
"RTN","RORERR20",27,0)
 . S $E(MSG,I1-1,I2-1)=ARG
"RTN","RORERR20",28,0)
 Q $$TRIM^XLFSTR(MSG)
"RTN","RORERR20",29,0)
 ;
"RTN","RORERR20",30,0)
 ;***** RETURNS TYPE OF THE MESSAGE
"RTN","RORERR20",31,0)
 ;
"RTN","RORERR20",32,0)
 ; ERRCODE       Error code
"RTN","RORERR20",33,0)
 ;
"RTN","RORERR20",34,0)
TYPE(ERRCODE) ;
"RTN","RORERR20",35,0)
 Q:ERRCODE'<0 0
"RTN","RORERR20",36,0)
 N I,TYPE  S I=-ERRCODE
"RTN","RORERR20",37,0)
 S I=$P($T(MSGLIST+I),";;",2),TYPE=+$TR($P(I,U,2)," ")
"RTN","RORERR20",38,0)
 Q $S(TYPE>0:TYPE,1:6)
"RTN","RORERR20",39,0)
 ;
"RTN","RORERR20",40,0)
 ;***** LIST OF THE MESSAGES (THERE SHOULD BE NOTHING AFTER THE LIST!)
"RTN","RORERR20",41,0)
 ;
"RTN","RORERR20",42,0)
 ; The error codes are provided in the table only for clarity.
"RTN","RORERR20",43,0)
 ; Text of the messages are extracted using the $TEXT function and
"RTN","RORERR20",44,0)
 ; absolute values of the ERRCODE parameter.
"RTN","RORERR20",45,0)
 ;
"RTN","RORERR20",46,0)
 ; Message Type:
"RTN","RORERR20",47,0)
 ;               1  Debug          4  Warning
"RTN","RORERR20",48,0)
 ;               2  Information    5  Database Error
"RTN","RORERR20",49,0)
 ;               3  Data Quality   6  Error
"RTN","RORERR20",50,0)
 ;
"RTN","RORERR20",51,0)
MSGLIST ; Code Type  Message Text
"RTN","RORERR20",52,0)
 ;;  -1 ^ 6 ^ Cannot find a descriptor of the registry
"RTN","RORERR20",53,0)
 ;;  -2 ^ 6 ^ Duplicate registry names
"RTN","RORERR20",54,0)
 ;;  -3 ^ 6 ^ Cannot find a descriptor of the rule
"RTN","RORERR20",55,0)
 ;;  -4 ^ 6 ^ Duplicate rule names
"RTN","RORERR20",56,0)
 ;;  -5 ^ 6 ^ Circle rule references
"RTN","RORERR20",57,0)
 ;;  -6 ^ 6 ^ Invalid update entry point: |2|
"RTN","RORERR20",58,0)
 ;;  -7 ^ 6 ^ Field '|2|' not found
"RTN","RORERR20",59,0)
 ;;  -8 ^ 6 ^ Duplicate patients in the registry
"RTN","RORERR20",60,0)
 ;;  -9 ^ 5 ^ FileMan DBS call error(s)|2|
"RTN","RORERR20",61,0)
 ;; -10 ^ 6 ^ Bad registry name: '|2|'
"RTN","RORERR20",62,0)
 ;; -11 ^ 6 ^ Cannot lock the record(s) of |2|
"RTN","RORERR20",63,0)
 ;; -12 ^ 6 ^ Cannot load and prepare lab search data
"RTN","RORERR20",64,0)
 ;; -13 ^ 6 ^ Cannot lock the registries
"RTN","RORERR20",65,0)
 ;; -14 ^ 6 ^ Cannot prepare selection rules
"RTN","RORERR20",66,0)
 ;; -15 ^ 6 ^ Error(s) during processing of the patient data
"RTN","RORERR20",67,0)
 ;; -16 ^ 6 ^ Cannot update demographic data
"RTN","RORERR20",68,0)
 ;; -17 ^ 6 ^ Invalid entry point: '|2|'
"RTN","RORERR20",69,0)
 ;; -18 ^ 6 ^ Routine '|2|' does not exist
"RTN","RORERR20",70,0)
 ;; -19 ^ 6 ^ Cannot load the selection rules
"RTN","RORERR20",71,0)
 ;; -20 ^ 6 ^ Cannot sort the selection rules
"RTN","RORERR20",72,0)
 ;; -21 ^ 6 ^ Syntax error in the expression
"RTN","RORERR20",73,0)
 ;; -22 ^ 6 ^ Cannot prepare data extraction definitions
"RTN","RORERR20",74,0)
 ;; -23 ^ 6 ^ Cannot set up HL7 environment variables
"RTN","RORERR20",75,0)
 ;; -24 ^ 6 ^ Cannot send the batch HL7 message
"RTN","RORERR20",76,0)
 ;; -25 ^ 6 ^ No event driver protocol
"RTN","RORERR20",77,0)
 ;; -26 ^ 3 ^ Neither ICN nor SSN is available
"RTN","RORERR20",78,0)
 ;; -27 ^ 5 ^ Cannot obtain results of the Lab tests
"RTN","RORERR20",79,0)
 ;; -28 ^ 4 ^ No active registries to |2|!
"RTN","RORERR20",80,0)
 ;; -29 ^ 6 ^ Non-existent LOINC code |2| in the registry parameters
"RTN","RORERR20",81,0)
 ;; -30 ^ 5 ^ Duplicate records in the file #95.3 for LOINC code |2|
"RTN","RORERR20",82,0)
 ;; -31 ^ 4 ^ Cannot remove the patient #|1| from the pending list
"RTN","RORERR20",83,0)
 ;; -32 ^ 6 ^ Incorrect data extraction period: '|2|-|3|'
"RTN","RORERR20",84,0)
 ;; -33 ^ 6 ^ Cannot de-queue data extraction task
"RTN","RORERR20",85,0)
 ;; -34 ^ 6 ^ Cannot open an output file
"RTN","RORERR20",86,0)
 ;; -35 ^ 6 ^ Device Handler error
"RTN","RORERR20",87,0)
 ;; -36 ^ 6 ^ Cannot retrieve Patient details (DFN:|1|) from File #|2|
"RTN","RORERR20",88,0)
 ;; -37 ^ 6 ^ Cannot retrieve details of medication
"RTN","RORERR20",89,0)
 ;; -38 ^ 6 ^ Cannot retrieve CPT code
"RTN","RORERR20",90,0)
 ;; -39 ^ 6 ^ Duplicate HL7 message ID in the file #798: '|2|'
"RTN","RORERR20",91,0)
 ;; -40 ^ 6 ^ Undefined variable: '|2|'
"RTN","RORERR20",92,0)
 ;; -41 ^ 2 ^ Registry setup has been completed
"RTN","RORERR20",93,0)
 ;; -42 ^ 4 ^ Task has been interrupted by user or by parent task
"RTN","RORERR20",94,0)
 ;; -43 ^ 6 ^ Error during the |2|. See log files.
"RTN","RORERR20",95,0)
 ;; -44 ^ 6 ^ Invalid extraction entry point: '|2|'
"RTN","RORERR20",96,0)
 ;; -45 ^ 6 ^ Invalid or missing IEN of selection rule
"RTN","RORERR20",97,0)
 ;; -46 ^ 5 ^ Cannot load registry parameters
"RTN","RORERR20",98,0)
 ;; -47 ^ 5 ^ Cannot find the '|2|' drug class
"RTN","RORERR20",99,0)
 ;; -48 ^ 2 ^ Registry '|2|' is inactive
"RTN","RORERR20",100,0)
 ;; -49 ^ 4 ^ Registry '|2|' is awaiting ACK
"RTN","RORERR20",101,0)
 ;; -50 ^ 6 ^ Cannot create the '|2|' checkpoint!
"RTN","RORERR20",102,0)
 ;; -51 ^ 6 ^ Cannot complete the '|2|' checkpoint!
"RTN","RORERR20",103,0)
 ;; -52 ^ 6 ^ Cannot find HL7 message ID in the file #798: '|2|'
"RTN","RORERR20",104,0)
 ;; -53 ^ 6 ^ Cannot enable the '|2|' protocol
"RTN","RORERR20",105,0)
 ;; -54 ^ 6 ^ The '|2|' Lab Search is not defined
"RTN","RORERR20",106,0)
 ;; -55 ^ 4 ^ No indicators are defined for the '|2|' Lab Search
"RTN","RORERR20",107,0)
 ;; -56 ^ 6 ^ Error code '|2|' is returned by the '|3|'
"RTN","RORERR20",108,0)
 ;; -57 ^ 4 ^ Error code '|2|' is returned by the '|3|'
"RTN","RORERR20",109,0)
 ;; -58 ^ 6 ^ File '|2|' not found
"RTN","RORERR20",110,0)
 ;; -59 ^ 3 ^ ICN checksum is shorter than 6 digits
"RTN","RORERR20",111,0)
 ;; -60 ^ 6 ^ Subtask #|2| crashed (see TaskMan logs)
"RTN","RORERR20",112,0)
 ;; -61 ^ 6 ^ Cannot start the registry update in multitask mode
"RTN","RORERR20",113,0)
 ;; -62 ^ 2 ^ Registry Update subtask #|2| has been scheduled
"RTN","RORERR20",114,0)
 ;; -63 ^ 6 ^ Data search in file #|2| is not supported
"RTN","RORERR20",115,0)
 ;; -64 ^ 6 ^ Data element #|3| (file #|2|) is not supported
"RTN","RORERR20",116,0)
 ;; -65 ^ 6 ^ |4| value of element #|3| (file #|2|) is not supported
"RTN","RORERR20",117,0)
 ;; -66 ^ 1 ^ Patient was skipped due to counter in the file #798.3
"RTN","RORERR20",118,0)
 ;; -67 ^ 6 ^ No application ACK after |2| attempt(s) to resend message
"RTN","RORERR20",119,0)
 ;; -68 ^ 6 ^ Invalid header of the HL7 message (or no header at all)
"RTN","RORERR20",120,0)
 ;; -69 ^ 6 ^ Cannot find the data element
"RTN","RORERR20",121,0)
 ;; -70 ^ 6 ^ Duplicate names of the data element
"RTN","RORERR20",122,0)
 ;; -71 ^ 1 ^ User entered the "^"
"RTN","RORERR20",123,0)
 ;; -72 ^ 6 ^ Timeout
"RTN","RORERR20",124,0)
 ;; -73 ^ 4 ^ Invalid or expired applic. acknowledgement was received
"RTN","RORERR20",125,0)
 ;; -74 ^ 6 ^ Number of messages in the batch does not match the BTS
"RTN","RORERR20",126,0)
 ;; -75 ^ 6 ^ Not all four HL7 encoding characters are defined
"RTN","RORERR20",127,0)
 ;; -76 ^ 6 ^ The [|2|] option must not be running during installation
"RTN","RORERR20",128,0)
 ;; -77 ^ 6 ^ Cannot create MailMan message stub
"RTN","RORERR20",129,0)
 ;; -78 ^ 6 ^ Scheduled subtasks have not been started by TaskMan
"RTN","RORERR20",130,0)
 ;; -79 ^ 6 ^ Missing or dangling pointer
"RTN","RORERR20",131,0)
 ;; -80 ^ 6 ^ Cannot find a list item (file #799.1)
"RTN","RORERR20",132,0)
 ;; -81 ^ 6 ^ Duplicate item codes (file #799.1)
"RTN","RORERR20",133,0)
 ;; -82 ^ 6 ^ The task '|2|' cannot be scheduled at '|3|'
"RTN","RORERR20",134,0)
 ;; -83 ^ 6 ^ Cannot find the task #|2| in the ROR TASK file
"RTN","RORERR20",135,0)
 ;; -84 ^ 6 ^ The task #|2| has not responded on the stop request yet
"RTN","RORERR20",136,0)
 ;; -85 ^ 6 ^ Invalid task number: '|2|'
"RTN","RORERR20",137,0)
 ;; -86 ^ 6 ^ Cannot find report parameters (file #799.34)
"RTN","RORERR20",138,0)
 ;; -87 ^ 6 ^ Duplicate report parameters (file #799.34)
"RTN","RORERR20",139,0)
 ;; -88 ^ 6 ^ Parameter |2| has an invalid value: '|3|'
"RTN","RORERR20",140,0)
 ;; -89 ^ 2 ^ No output file has been created
"RTN","RORERR20",141,0)
 ;; -90 ^ 6 ^ Application acknowledgement with |2| processing ID
"RTN","RORERR20",142,0)
 ;; -91 ^ 6 ^ Illegal attempt to access the registries from the GUI
"RTN","RORERR20",143,0)
 ;; -92 ^ 4 ^ Expired 'Awaiting Acknowledgement' flag has been cleared
"RTN","RORERR20",144,0)
 ;; -93 ^ 2 ^ The HL7 message #|2| has been re-queued
"RTN","RORERR20",145,0)
 ;; -94 ^ 4 ^ The HL7 message #|2| has been canceled
"RTN","RORERR20",146,0)
 ;; -95 ^ 3 ^ Invalid value. File: #|2|; IENS: "|3|"; Field(s): |4|
"RTN","RORERR20",147,0)
 ;; -96 ^ 1 ^ reserved
"RTN","RORERR20",148,0)
 ;; -97 ^ 6 ^ The patient is not in the |2|
"RTN","RORERR20",149,0)
 ;; -98 ^ 6 ^ Cannot get closed root name of file #|2| (IENS: |3|)
"RTN","RORERR20",150,0)
 ;; -99 ^ 1 ^ FileMan DBS call error(s)|2|
"RTN","RORERR20",151,0)
 ;;-100 ^ 3 ^ |2| was returned by the |3|
"RTN","RORERR20",152,0)
 ;;-101 ^ 2 ^ Your CCR task #|2| has finished (|3|)
"RTN","RORERR20",153,0)
 ;;-102 ^ 5 ^ Invalid or missing record in the |2| file (IEN: |3|)
"RTN","RORERR20",154,0)
 ;;-103 ^ 6 ^ The registry |2| has not been populated yet.
"RTN","RORERR20",155,0)
 ;;-104 ^ 2 ^ |2| record was inactivated.
"RTN","RORERR20",156,0)
 ;;-105 ^ 2 ^ |2| record was (re)activated.
"RTN","ROREXT")
0^25^B34201963
"RTN","ROREXT",1,0)
ROREXT ;HCIOFO/SG - DATA EXTRACT & TRANSMISSION ; 12/21/04 2:54pm
"RTN","ROREXT",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,5,8**;May 14, 2002
"RTN","ROREXT",3,0)
 ;
"RTN","ROREXT",4,0)
 ; ROREXT -------------- DATA EXTRACTION DESCRIPTOR
"RTN","ROREXT",5,0)
 ;
"RTN","ROREXT",6,0)
 ; ROREXT("DXBEG")       Start date of the data extraction (opt'l)
"RTN","ROREXT",7,0)
 ;                       If this node is defined and greater than
"RTN","ROREXT",8,0)
 ;                       zero, data extraction starts from this date
"RTN","ROREXT",9,0)
 ;                       (instead of individual start date for each
"RTN","ROREXT",10,0)
 ;                       patient in the registry).
"RTN","ROREXT",11,0)
 ; ROREXT("DXEND")       End date of the data extraction
"RTN","ROREXT",12,0)
 ;                       (these nodes are set by $$PREPARE^ROREXPR).
"RTN","ROREXT",13,0)
 ;
"RTN","ROREXT",14,0)
 ; ROREXT("EXTRDAYS")    Extraction period for a new patient
"RTN","ROREXT",15,0)
 ;
"RTN","ROREXT",16,0)
 ; ROREXT("FLAGS")       Flags to control processing (see the
"RTN","ROREXT",17,0)
 ;                       TASK^ROR for possible values).
"RTN","ROREXT",18,0)
 ;
"RTN","ROREXT",19,0)
 ; ROREXT("HL7",
"RTN","ROREXT",20,0)
 ;   Data Area,          Data area where the segments are used
"RTN","ROREXT",21,0)
 ;                       (see the field .02 of the multiple 9 in the
"RTN","ROREXT",22,0)
 ;                       file #798.1)
"RTN","ROREXT",23,0)
 ;                          1  Laboratory
"RTN","ROREXT",24,0)
 ;                          2  Outpatient
"RTN","ROREXT",25,0)
 ;                          3  Inpatient
"RTN","ROREXT",26,0)
 ;                          4  Radiology
"RTN","ROREXT",27,0)
 ;                          5  Patient
"RTN","ROREXT",28,0)
 ;                          6  Pharmacy
"RTN","ROREXT",29,0)
 ;                          7  Pathology-Autopsy
"RTN","ROREXT",30,0)
 ;                          8  Pathology-Liver Biopsy
"RTN","ROREXT",31,0)
 ;                          9  Pathology-Surgical
"RTN","ROREXT",32,0)
 ;                         10  Pathology-Cyto
"RTN","ROREXT",33,0)
 ;                         11  Microbiology
"RTN","ROREXT",34,0)
 ;                         12  EKG
"RTN","ROREXT",35,0)
 ;                         13  Allergy
"RTN","ROREXT",36,0)
 ;                         14  IV
"RTN","ROREXT",37,0)
 ;                         15  Vitals
"RTN","ROREXT",38,0)
 ;                         16  Problem List
"RTN","ROREXT",39,0)
 ;     Segment Name)     HL7 segment descriptor
"RTN","ROREXT",40,0)
 ;                         ^1: reserved
"RTN","ROREXT",41,0)
 ;                         ^2: List of fields (separated by commas)
"RTN","ROREXT",42,0)
 ;                             that should be created in the segment.
"RTN","ROREXT",43,0)
 ;
"RTN","ROREXT",44,0)
 ; ROREXT("HL7BUF")      Closed root of the buffer where the HL7
"RTN","ROREXT",45,0)
 ;                       message is constructed. By default, the
"RTN","ROREXT",46,0)
 ;                       ^TMP("HLS",$J) is used.
"RTN","ROREXT",47,0)
 ;
"RTN","ROREXT",48,0)
 ; ROREXT("HL7CNT")      Counter of the messages in the batch
"RTN","ROREXT",49,0)
 ; ROREXT("HL7DT")       Date of the batch message creation (FileMan)
"RTN","ROREXT",50,0)
 ; ROREXT("HL7MID")      Message ID of the "stub" message
"RTN","ROREXT",51,0)
 ; ROREXT("HL7MTIEN")    IEN in the File #772 for the "stub" message
"RTN","ROREXT",52,0)
 ; ROREXT("HL7PROT")     Name of the event driver protocol
"RTN","ROREXT",53,0)
 ;
"RTN","ROREXT",54,0)
 ; ROREXT("HL7PTR")      Subscript of the last occupied sub-node of
"RTN","ROREXT",55,0)
 ;                       the message buffer (see the "HL7BUF").
"RTN","ROREXT",56,0)
 ;                       Value of the variable is incremented before
"RTN","ROREXT",57,0)
 ;                       storing the segment.
"RTN","ROREXT",58,0)
 ;
"RTN","ROREXT",59,0)
 ; ROREXT("HL7SID",
"RTN","ROREXT",60,0)
 ;   SegName)            The next value of the Set ID for this kind
"RTN","ROREXT",61,0)
 ;                       of segments. The $$CREATE^RORHL7 function
"RTN","ROREXT",62,0)
 ;                       resets the Set ID's to 1 for all supported
"RTN","ROREXT",63,0)
 ;                       segments.
"RTN","ROREXT",64,0)
 ;
"RTN","ROREXT",65,0)
 ; ROREXT("HL7SIZE")     Current size of the HL7 batch
"RTN","ROREXT",66,0)
 ;                         ^1: Current size (in bytes)
"RTN","ROREXT",67,0)
 ;                         ^2: 1 if maximum size has been reached
"RTN","ROREXT",68,0)
 ;
"RTN","ROREXT",69,0)
 ; ROREXT("LD",
"RTN","ROREXT",70,0)
 ;   1)                  Number of lag days for the data extraction
"RTN","ROREXT",71,0)
 ;
"RTN","ROREXT",72,0)
 ; ROREXT("MAXHL7SIZE")  Maximum size (in bytes) of an HL7 message
"RTN","ROREXT",73,0)
 ;
"RTN","ROREXT",74,0)
 ; ROREXT("MSGBLD")      Message builder call-back entry point (opt'l)
"RTN","ROREXT",75,0)
 ;
"RTN","ROREXT",76,0)
 ; ROREXT("PATCH",
"RTN","ROREXT",77,0)
 ;   PatchName)          Defined if the patch is installed
"RTN","ROREXT",78,0)
 ;
"RTN","ROREXT",79,0)
 ; ROREXT("SUSPEND")     DATA EXTRACTION SUSPENSION PARAMETERS
"RTN","ROREXT",80,0)
 ;                         ^1: Suspension start time (FileMan)
"RTN","ROREXT",81,0)
 ;                         ^2: Suspension end time (FileMan)
"RTN","ROREXT",82,0)
 ;
"RTN","ROREXT",83,0)
 ;                       For example, to suspend the data extraction
"RTN","ROREXT",84,0)
 ;                       from 7:00 until 18:00 this node should have
"RTN","ROREXT",85,0)
 ;                       the following value: ".07^.18".
"RTN","ROREXT",86,0)
 ;
"RTN","ROREXT",87,0)
 ; ROREXT("VERSION")     ROR version/patch installed at the site
"RTN","ROREXT",88,0)
 ;                         ^1: Version number (e.g. 1.0)
"RTN","ROREXT",89,0)
 ;                         ^2: Latest patch number (e.g. 5)
"RTN","ROREXT",90,0)
 ;                         ^3: Patch installation date (FileMan)
"RTN","ROREXT",91,0)
 ;
"RTN","ROREXT",92,0)
 ; RORHL --------------- HL7 ENVIRONMENT VARIABLES
"RTN","ROREXT",93,0)
 ;
"RTN","ROREXT",94,0)
 ; RORHL                 This local array contains HL7 environment
"RTN","ROREXT",95,0)
 ;                       variables initialized by INIT^HLFNC2 ("FS",
"RTN","ROREXT",96,0)
 ;                       "ECH" and others).
"RTN","ROREXT",97,0)
 ;
"RTN","ROREXT",98,0)
 ; RORLRC -------------- LIST OF EXTRACTED LAB RESULTS
"RTN","ROREXT",99,0)
 ;
"RTN","ROREXT",100,0)
 ; RORLRC(               Either a list of codes of a Lab results to
"RTN","ROREXT",101,0)
 ;                       extract or "*" for all results (see the LA7SC
"RTN","ROREXT",102,0)
 ;                       parameter of the GCPR^LA7QRY entry point)
"RTN","ROREXT",103,0)
 ;   Seq#)               Lab result code
"RTN","ROREXT",104,0)
 ;                         ^1: Result code
"RTN","ROREXT",105,0)
 ;                         ^2: Coding system ("LN" or "NLT")
"RTN","ROREXT",106,0)
 ;
"RTN","ROREXT",107,0)
 Q
"RTN","ROREXT",108,0)
 ;
"RTN","ROREXT",109,0)
 ;***** PRINT SOME DEBUG INFORMATION
"RTN","ROREXT",110,0)
DEBUG1 ;
"RTN","ROREXT",111,0)
 D ZW^RORUTL01("ROREXT","Control Data")
"RTN","ROREXT",112,0)
 D ZW^RORUTL01("RORLRC","Lab Results to extract")
"RTN","ROREXT",113,0)
 W !,"Job number: ",$J,!
"RTN","ROREXT",114,0)
 Q
"RTN","ROREXT",115,0)
 ;
"RTN","ROREXT",116,0)
 ;***** EXTRACTS AND SENDS REGISTRY DATA
"RTN","ROREXT",117,0)
 ;
"RTN","ROREXT",118,0)
 ; REGNAME       Registry name
"RTN","ROREXT",119,0)
 ;
"RTN","ROREXT",120,0)
 ; [DXBEG]       Data extraction start date (individual start
"RTN","ROREXT",121,0)
 ;               date for each patient by default).
"RTN","ROREXT",122,0)
 ;               Time part of the parameter value is ignored.
"RTN","ROREXT",123,0)
 ;
"RTN","ROREXT",124,0)
 ; [SUSPEND]     Subtask suspension parameters:
"RTN","ROREXT",125,0)
 ;               See description of the ROREXT("SUSPEND") node
"RTN","ROREXT",126,0)
 ;               for details.
"RTN","ROREXT",127,0)
 ;
"RTN","ROREXT",128,0)
 ; [CLRFLG]      Clear flags to control processing.
"RTN","ROREXT",129,0)
 ; [SETFLG]      Set flags to control processing.
"RTN","ROREXT",130,0)
 ;               See description of the TASK^ROR for
"RTN","ROREXT",131,0)
 ;               possible values of the flags.
"RTN","ROREXT",132,0)
 ;
"RTN","ROREXT",133,0)
 ; Return Values:
"RTN","ROREXT",134,0)
 ;       <0  Error Code (see MSGLIST^RORERR20)
"RTN","ROREXT",135,0)
 ;        0  Ok
"RTN","ROREXT",136,0)
 ;
"RTN","ROREXT",137,0)
EXTRACT(REGNAME,DXBEG,SUSPEND,CLRFLG,SETFLG) ;
"RTN","ROREXT",138,0)
 N RORERRDL      ; Default error location
"RTN","ROREXT",139,0)
 N ROREXT        ; Data extraction descriptor
"RTN","ROREXT",140,0)
 N RORHL         ; HL7 variables
"RTN","ROREXT",141,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","ROREXT",142,0)
 N RORLRC        ; List of codes of Lab results to be extracted
"RTN","ROREXT",143,0)
 ;
"RTN","ROREXT",144,0)
 N COUNTERS,MID,RC,REGLST,RGLIST,TMP
"RTN","ROREXT",145,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT",146,0)
 D INIT^RORUTL01("ROREXT"),CLEAR^RORERR("EXTRACT^ROREXT")
"RTN","ROREXT",147,0)
 S RGLIST(REGNAME)=""
"RTN","ROREXT",148,0)
 ;--- Open a new log
"RTN","ROREXT",149,0)
 S TMP=$$SETUP^RORLOG(.RGLIST)
"RTN","ROREXT",150,0)
 S TMP=$$OPEN^RORLOG(.RGLIST,2,"DATA EXTRACTION STARTED")
"RTN","ROREXT",151,0)
 D
"RTN","ROREXT",152,0)
 . ;--- Create a list of active registries
"RTN","ROREXT",153,0)
 . S RC=$$ARLST^RORUTL02(.RGLIST,.REGLST)  Q:RC<0
"RTN","ROREXT",154,0)
 . I $D(REGLST)<10  D  Q
"RTN","ROREXT",155,0)
 . . S RC=$$ERROR^RORERR(-28,,,,"extract data")
"RTN","ROREXT",156,0)
 . ;--- Lock parameters of the registries being processed
"RTN","ROREXT",157,0)
 . S RC=$$LOCKREG^RORUTL02(.REGLST,1,,"DATA EXTRACTION")  Q:RC<0
"RTN","ROREXT",158,0)
 . I 'RC  D  Q
"RTN","ROREXT",159,0)
 . . S RC=$$ERROR^RORERR(-11,,,,"registries being processed")
"RTN","ROREXT",160,0)
 . ;--- Prepare data extraction rules
"RTN","ROREXT",161,0)
 . S RC=$$PREPARE^ROREXPR(REGNAME,$G(DXBEG))
"RTN","ROREXT",162,0)
 . I RC<0  S RC=$$ERROR^RORERR(-22)  Q
"RTN","ROREXT",163,0)
 . ;--- Process the flags
"RTN","ROREXT",164,0)
 . S CLRFLG=$$UP^XLFSTR($G(CLRFLG))
"RTN","ROREXT",165,0)
 . S SETFLG=$$UP^XLFSTR($G(SETFLG))
"RTN","ROREXT",166,0)
 . S ROREXT("FLAGS")=$TR($G(ROREXT("FLAGS")),CLRFLG_SETFLG)_SETFLG
"RTN","ROREXT",167,0)
 . ;--- Enable task suspension if requested
"RTN","ROREXT",168,0)
 . I $G(SUSPEND)  S:ROREXT("FLAGS")["X" ROREXT("SUSPEND")=SUSPEND
"RTN","ROREXT",169,0)
 . ;--- Display the debug information
"RTN","ROREXT",170,0)
 . D:$G(RORPARM("DEBUG"))>1 DEBUG1
"RTN","ROREXT",171,0)
 . ;--- Extract registry data
"RTN","ROREXT",172,0)
 . S RC=$$PROCESS^ROREXT01(REGNAME)  Q:RC<0
"RTN","ROREXT",173,0)
 . S COUNTERS=RC,RC=0
"RTN","ROREXT",174,0)
 . ;--- Send the batch HL7 message
"RTN","ROREXT",175,0)
 . W:$G(RORPARM("DEBUG"))>1 !,"HL7 Batch ID:   ",$G(ROREXT("HL7MID"))
"RTN","ROREXT",176,0)
 . S RC=$$SEND^RORHL7(.MID)  Q:RC<0
"RTN","ROREXT",177,0)
 . I $G(MID)'=""  D  D LOG^RORLOG(2,TMP)
"RTN","ROREXT",178,0)
 . . S TMP="HL7 batch message "_MID_" has been generated"
"RTN","ROREXT",179,0)
 . ;--- Update registry parameters
"RTN","ROREXT",180,0)
 . S TMP=$$TMSTMP^ROREXTUT(.REGLST,$S('RC:$G(MID),1:""))
"RTN","ROREXT",181,0)
 ;
"RTN","ROREXT",182,0)
 ;--- Unlock parameters of processed registries
"RTN","ROREXT",183,0)
 S TMP=$$LOCKREG^RORUTL02(.REGLST,0)
"RTN","ROREXT",184,0)
 ;--- Statistics & Cleanup
"RTN","ROREXT",185,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT",186,0)
 S TMP="DATA EXTRACTION "_$S(RC<0:"ABORTED",1:"COMPLETED")
"RTN","ROREXT",187,0)
 D CLOSE^RORLOG(TMP,$G(COUNTERS))
"RTN","ROREXT",188,0)
 D:'$G(RORPARM("DEBUG")) INIT^RORUTL01("ROREXT")
"RTN","ROREXT",189,0)
 Q $S(RC<0:RC,1:0)
"RTN","ROREXT",190,0)
 ;
"RTN","ROREXT",191,0)
 ;***** ENTRY POINT OF DATA EXTRACTION TASK
"RTN","ROREXT",192,0)
 ;
"RTN","ROREXT",193,0)
 ; RORREG        Registry name
"RTN","ROREXT",194,0)
 ;
"RTN","ROREXT",195,0)
 ; [RORFLCLR]    Clear flags to control processing.
"RTN","ROREXT",196,0)
 ; [RORFLSET]    Set flags to control processing.
"RTN","ROREXT",197,0)
 ;               See description of the TASK^ROR for possible
"RTN","ROREXT",198,0)
 ;               values of the flags.
"RTN","ROREXT",199,0)
 ;
"RTN","ROREXT",200,0)
 ; [RORSUSP]     Suspension parameters of the data extraction
"RTN","ROREXT",201,0)
 ;               task. The task is not suspended by default.
"RTN","ROREXT",202,0)
 ;
"RTN","ROREXT",203,0)
TASK ;
"RTN","ROREXT",204,0)
 N RORERROR      ; Error processing data
"RTN","ROREXT",205,0)
 N RORPARM       ; Application parameters
"RTN","ROREXT",206,0)
 ;
"RTN","ROREXT",207,0)
 N RC  K ZTREQ
"RTN","ROREXT",208,0)
 ;--- Force "UNDEF" error if registry name is not defined
"RTN","ROREXT",209,0)
 I $G(RORREG)?." "  K RORREG  S RC=RORREG
"RTN","ROREXT",210,0)
 ;--- Initialize the variables
"RTN","ROREXT",211,0)
 S RORPARM("ERR")=1
"RTN","ROREXT",212,0)
 ;--- Check the task parameters
"RTN","ROREXT",213,0)
 S RORFLCLR=$G(RORFLCLR)
"RTN","ROREXT",214,0)
 S RORFLSET=$G(RORFLSET)
"RTN","ROREXT",215,0)
 S RORSUSP=$S($G(RORSUSP)>0:RORSUSP,1:"")
"RTN","ROREXT",216,0)
 ;--- Debug mode
"RTN","ROREXT",217,0)
 S:RORFLSET["D" RORPARM("DEBUG")=1
"RTN","ROREXT",218,0)
 ;--- Run the data extraction
"RTN","ROREXT",219,0)
 S RC=$$EXTRACT(RORREG,,RORSUSP,RORFLCLR,RORFLSET)
"RTN","ROREXT",220,0)
 S:RC<0 ZTSTOP=1
"RTN","ROREXT",221,0)
 I RC=-42  D ALERT^RORUTL01(RORREG,-42)  Q
"RTN","ROREXT",222,0)
 D:RC<0 ALERT^RORUTL01(RORREG,-43,,,,"data extraction")
"RTN","ROREXT",223,0)
 S ZTREQ="@"
"RTN","ROREXT",224,0)
 Q
"RTN","ROREXTUT")
0^26^B39224729
"RTN","ROREXTUT",1,0)
ROREXTUT ;HCIOFO/SG - DATA EXTRACT UTILITIES  ; 1/28/05 10:04am
"RTN","ROREXTUT",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,5,8**;May 14, 2002
"RTN","ROREXTUT",3,0)
 ;
"RTN","ROREXTUT",4,0)
 Q
"RTN","ROREXTUT",5,0)
 ;
"RTN","ROREXTUT",6,0)
 ;***** CHECKS ACKNOWLEDGEMENT FLAG OF THE REGISTRY
"RTN","ROREXTUT",7,0)
 ;
"RTN","ROREXTUT",8,0)
 ; REGNAME       Registry name
"RTN","ROREXTUT",9,0)
 ;
"RTN","ROREXTUT",10,0)
 ; Return Values:
"RTN","ROREXTUT",11,0)
 ;       <0  Error Code
"RTN","ROREXTUT",12,0)
 ;        0  Ok
"RTN","ROREXTUT",13,0)
 ;        1  The acknowledgement flag is set
"RTN","ROREXTUT",14,0)
 ;
"RTN","ROREXTUT",15,0)
ACKWAIT(REGNAME) ;
"RTN","ROREXTUT",16,0)
 N REGIEN,RC,TMP
"RTN","ROREXTUT",17,0)
 S REGIEN=$$REGIEN^RORUTL02(REGNAME)  Q:REGIEN<0 REGIEN
"RTN","ROREXTUT",18,0)
 S TMP=+$$GET1^DIQ(798.1,REGIEN_",",2.2,"I",,"RORMSG")
"RTN","ROREXTUT",19,0)
 I $G(DIERR)  D  Q RC
"RTN","ROREXTUT",20,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIEN)
"RTN","ROREXTUT",21,0)
 Q TMP
"RTN","ROREXTUT",22,0)
 ;
"RTN","ROREXTUT",23,0)
 ;***** ADDS THE TIME FRAME TO THE LIST
"RTN","ROREXTUT",24,0)
 ;
"RTN","ROREXTUT",25,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXTUT",26,0)
 ;               data extraction time frames are stored.
"RTN","ROREXTUT",27,0)
 ;
"RTN","ROREXTUT",28,0)
 ; STDT          Start date (FileMan)
"RTN","ROREXTUT",29,0)
 ; ENDT          End Date   (FileMan)
"RTN","ROREXTUT",30,0)
 ;
"RTN","ROREXTUT",31,0)
 ; DTAR          Data area code:
"RTN","ROREXTUT",32,0)
 ;                 3  Inpatient
"RTN","ROREXTUT",33,0)
 ;                 6  Pharmacy
"RTN","ROREXTUT",34,0)
 ;
"RTN","ROREXTUT",35,0)
 ; [MAIN]        If this parameter defined and not zero, the time
"RTN","ROREXTUT",36,0)
 ;               frame is considered the main one.
"RTN","ROREXTUT",37,0)
 ;
"RTN","ROREXTUT",38,0)
 ; Variants of positional relationship of the existing time frames
"RTN","ROREXTUT",39,0)
 ; and the one that is being added to the list (STDT-ENDT):
"RTN","ROREXTUT",40,0)
 ;
"RTN","ROREXTUT",41,0)
 ; (1)  +--------TMP                      +----------+
"RTN","ROREXTUT",42,0)
 ;                     STDT--------ENDT
"RTN","ROREXTUT",43,0)
 ;
"RTN","ROREXTUT",44,0)
 ; (2)           +--------TMP
"RTN","ROREXTUT",45,0)
 ;      STDT--------ENDT
"RTN","ROREXTUT",46,0)
 ;
"RTN","ROREXTUT",47,0)
 ; (3)  TMP--------+
"RTN","ROREXTUT",48,0)
 ;           STDT--------ENDT
"RTN","ROREXTUT",49,0)
 ;
"RTN","ROREXTUT",50,0)
 ; (4)         +--------+
"RTN","ROREXTUT",51,0)
 ;      STDT------------------ENDT
"RTN","ROREXTUT",52,0)
 ;
"RTN","ROREXTUT",53,0)
DXADD(DXDTS,STDT,ENDT,DTAR,MAIN) ;
"RTN","ROREXTUT",54,0)
 Q:STDT>ENDT
"RTN","ROREXTUT",55,0)
 S:$G(MAIN) DXDTS=STDT_U_ENDT,DTAR=0
"RTN","ROREXTUT",56,0)
 N DATE,EXIT,TMP
"RTN","ROREXTUT",57,0)
 ;--- Merge the time frames if possible
"RTN","ROREXTUT",58,0)
 S DATE=$O(DXDTS(DTAR,ENDT)),EXIT=0
"RTN","ROREXTUT",59,0)
 F  S DATE=$O(DXDTS(DTAR,DATE),-1)  Q:DATE=""  D  Q:EXIT
"RTN","ROREXTUT",60,0)
 . S TMP=$P(DXDTS(DTAR,DATE),U,2)
"RTN","ROREXTUT",61,0)
 . I TMP<STDT  S EXIT=1  Q          ; (1)
"RTN","ROREXTUT",62,0)
 . S:TMP>ENDT ENDT=TMP              ; (2)
"RTN","ROREXTUT",63,0)
 . S TMP=$P(DXDTS(DTAR,DATE),U)
"RTN","ROREXTUT",64,0)
 . S:TMP<STDT STDT=TMP              ; (3)
"RTN","ROREXTUT",65,0)
 . K DXDTS(DTAR,DATE)
"RTN","ROREXTUT",66,0)
 ;--- Store the new time frame
"RTN","ROREXTUT",67,0)
 S DXDTS(DTAR,STDT)=STDT_U_ENDT
"RTN","ROREXTUT",68,0)
 Q
"RTN","ROREXTUT",69,0)
 ;
"RTN","ROREXTUT",70,0)
 ;***** CALCULATES THE MAIN DATA EXTRACTION TIME FRAME
"RTN","ROREXTUT",71,0)
 ;
"RTN","ROREXTUT",72,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXTUT",73,0)
 ;               data extraction time frames are stored.
"RTN","ROREXTUT",74,0)
 ;
"RTN","ROREXTUT",75,0)
 ; IEN           IEN of the patient's record in the registry
"RTN","ROREXTUT",76,0)
 ;
"RTN","ROREXTUT",77,0)
 ; Return Values:
"RTN","ROREXTUT",78,0)
 ;        <0  Error Code
"RTN","ROREXTUT",79,0)
 ;         0  Ok
"RTN","ROREXTUT",80,0)
 ;        >0  Skip the patient
"RTN","ROREXTUT",81,0)
 ;
"RTN","ROREXTUT",82,0)
 ; If the special extraction start date for all patients is defined
"RTN","ROREXTUT",83,0)
 ; then it is as the start date of the main time frame. Usually,
"RTN","ROREXTUT",84,0)
 ; this mode is not used. ;-)
"RTN","ROREXTUT",85,0)
 ;
"RTN","ROREXTUT",86,0)
 ; If the field #9.1 of the patient record in the registry (#798)
"RTN","ROREXTUT",87,0)
 ; has a value then this value is used as the start date of the
"RTN","ROREXTUT",88,0)
 ; main time frame (data have already been extracted until that
"RTN","ROREXTUT",89,0)
 ; date). Usually, this field should be empty for new patients.
"RTN","ROREXTUT",90,0)
 ;
"RTN","ROREXTUT",91,0)
 ; The function tries to get the earliest date when a selection rule
"RTN","ROREXTUT",92,0)
 ; has been triggered for the newly added patient. If the patient has
"RTN","ROREXTUT",93,0)
 ; been added manually and there are no selection rules in the
"RTN","ROREXTUT",94,0)
 ; SELECTION RULE multiple of the registry record then a date when
"RTN","ROREXTUT",95,0)
 ; the patient was added to the registry is used.
"RTN","ROREXTUT",96,0)
 ;
"RTN","ROREXTUT",97,0)
 ; After that, extract period for new patients (value of the field
"RTN","ROREXTUT",98,0)
 ; #7 of the file #798.1) is subtracted from the date and the result
"RTN","ROREXTUT",99,0)
 ; is used as the start date. If the extract period is not set for
"RTN","ROREXTUT",100,0)
 ; the registry then a default value (365) is used.
"RTN","ROREXTUT",101,0)
 ;
"RTN","ROREXTUT",102,0)
DXMAIN(DXDTS,IEN) ;
"RTN","ROREXTUT",103,0)
 N DTENT,ENDT,IENS,LCH,NEWPAT,RC,RORBUF,RORMSG,STDT,TMP
"RTN","ROREXTUT",104,0)
 S (ENDT,STDT)="",IENS=IEN_",",LCH=0
"RTN","ROREXTUT",105,0)
 ;--- Get the registry record data
"RTN","ROREXTUT",106,0)
 D GETS^DIQ(798,IENS,"1;2;3;4;5;9.1","I","RORBUF","RORMSG")
"RTN","ROREXTUT",107,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","ROREXTUT",108,0)
 S ENDT=$$FMADD^XLFDT(ROREXT("DXEND"),-$G(ROREXT("LD",1)))
"RTN","ROREXTUT",109,0)
 F TMP=3,4,5  S:$G(RORBUF(798,IENS,TMP,"I")) LCH=1
"RTN","ROREXTUT",110,0)
 ;--- Data is not extracted after inactivation date for inactive
"RTN","ROREXTUT",111,0)
 ;    patients. However, after patch ROR*1*8, inactivation date
"RTN","ROREXTUT",112,0)
 ;    is ignored if the patient is dead (there is no inactivation
"RTN","ROREXTUT",113,0)
 ;--- reason in the registry record).
"RTN","ROREXTUT",114,0)
 I '$$ACTIVE^RORDD(IEN,ENDT,.TMP)  D:TMP>0
"RTN","ROREXTUT",115,0)
 . S TMP=$G(RORBUF(798,IENS,2,"I"))\1 ; Inactivation date
"RTN","ROREXTUT",116,0)
 . S:ENDT>TMP ENDT=TMP
"RTN","ROREXTUT",117,0)
 ;--- Special start date for ALL patients (if defined)
"RTN","ROREXTUT",118,0)
 S STDT=$G(ROREXT("DXBEG"))
"RTN","ROREXTUT",119,0)
 I STDT'>0  D
"RTN","ROREXTUT",120,0)
 . ;--- Start date from the patient's record in the registry
"RTN","ROREXTUT",121,0)
 . S STDT=$G(RORBUF(798,IENS,9.1,"I"))\1  Q:STDT>0
"RTN","ROREXTUT",122,0)
 . ;--- Determine the start date for a newly added patient
"RTN","ROREXTUT",123,0)
 . S DTENT=$G(RORBUF(798,IENS,1,"I"))
"RTN","ROREXTUT",124,0)
 . S NEWPAT=+$G(RORBUF(798,IENS,3,"I"))
"RTN","ROREXTUT",125,0)
 . ;--- Usually, data for 'pending' patients (NEWPAT=4) is not
"RTN","ROREXTUT",126,0)
 . ;    sent to the AAC (see the $$PROCREC^ROREXT01 function).
"RTN","ROREXTUT",127,0)
 . ;    However, this function considers a 'pending' patient as
"RTN","ROREXTUT",128,0)
 . ;--- a usual new one.
"RTN","ROREXTUT",129,0)
 . I (NEWPAT=1)!(NEWPAT=2)!(NEWPAT=4)  D
"RTN","ROREXTUT",130,0)
 . . S TMP=$$ROOT^DILFD(798.01,","_IENS,1)  Q:TMP=""
"RTN","ROREXTUT",131,0)
 . . S STDT=$O(@TMP@("AD","")) ; The earliest selection rule
"RTN","ROREXTUT",132,0)
 . . I STDT'>0  S STDT=DTENT  Q:STDT'>0
"RTN","ROREXTUT",133,0)
 . . S TMP=+$G(ROREXT("EXTRDAYS"))
"RTN","ROREXTUT",134,0)
 . . S STDT=$$FMADD^XLFDT(STDT,-$S(TMP>0:TMP,1:365))\1
"RTN","ROREXTUT",135,0)
 . S:STDT'>0 STDT=DTENT\1
"RTN","ROREXTUT",136,0)
 ;--- Check the dates and add the time frame to the list
"RTN","ROREXTUT",137,0)
 I (STDT'>0)!(ENDT'>0)  D  Q RC
"RTN","ROREXTUT",138,0)
 . S TMP=$$GET1^DIQ(798,IENS,.01,"I",,"RORMSG")
"RTN","ROREXTUT",139,0)
 . S RC=$$ERROR^RORERR(-32,,,TMP,STDT,ENDT)
"RTN","ROREXTUT",140,0)
 S RC=0
"RTN","ROREXTUT",141,0)
 I STDT'<ENDT  S RC=1  S:LCH STDT=ENDT,RC=0
"RTN","ROREXTUT",142,0)
 D:'RC DXADD(.DXDTS,STDT,ENDT,0,1)
"RTN","ROREXTUT",143,0)
 Q RC
"RTN","ROREXTUT",144,0)
 ;
"RTN","ROREXTUT",145,0)
 ;***** MERGES THE MAIN TIME FRAME INTO THE 'DATA-SPECIFIC' LISTS
"RTN","ROREXTUT",146,0)
 ;
"RTN","ROREXTUT",147,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXTUT",148,0)
 ;               data extraction time frames are stored.
"RTN","ROREXTUT",149,0)
 ;
"RTN","ROREXTUT",150,0)
DXMERGE(DXDTS) ;
"RTN","ROREXTUT",151,0)
 N DTAR
"RTN","ROREXTUT",152,0)
 F DTAR=2,3,6  D DXADD(.DXDTS,$P(DXDTS,U),$P(DXDTS,U,2),DTAR)
"RTN","ROREXTUT",153,0)
 Q
"RTN","ROREXTUT",154,0)
 ;
"RTN","ROREXTUT",155,0)
 ;***** RETURNS THE LISTS OF DATA EXTRACTION PERIODS FOR THE PATIENT
"RTN","ROREXTUT",156,0)
 ;
"RTN","ROREXTUT",157,0)
 ; .DXDTS        Reference to a local variable where the data
"RTN","ROREXTUT",158,0)
 ;               extraction time frames are returned to. The
"RTN","ROREXTUT",159,0)
 ;               main time frame is returned in the root node:
"RTN","ROREXTUT",160,0)
 ;
"RTN","ROREXTUT",161,0)
 ;  DXDTS(         MainStartDate^MainEndDate  (FileMan)
"RTN","ROREXTUT",162,0)
 ;    DataArea,
"RTN","ROREXTUT",163,0)
 ;      i)         StartDate^EndDate          (FileMan)
"RTN","ROREXTUT",164,0)
 ;
"RTN","ROREXTUT",165,0)
 ; IEN           IEN of the patient record in the registry
"RTN","ROREXTUT",166,0)
 ;
"RTN","ROREXTUT",167,0)
 ; PATIEN        Patient IEN
"RTN","ROREXTUT",168,0)
 ;
"RTN","ROREXTUT",169,0)
 ; Return Values:
"RTN","ROREXTUT",170,0)
 ;        <0  Error Code
"RTN","ROREXTUT",171,0)
 ;         0  Ok
"RTN","ROREXTUT",172,0)
 ;        >0  Skip the patient
"RTN","ROREXTUT",173,0)
 ;
"RTN","ROREXTUT",174,0)
DXPERIOD(DXDTS,IEN,PATIEN) ;
"RTN","ROREXTUT",175,0)
 N AREA,ENDT,EVTDT,EVTIEN,NODE,RC,STDT,TMP
"RTN","ROREXTUT",176,0)
 K DXDTS  S DXDTS=""
"RTN","ROREXTUT",177,0)
 ;
"RTN","ROREXTUT",178,0)
 ;=== Main data extraction time frame
"RTN","ROREXTUT",179,0)
 S RC=$$DXMAIN(.DXDTS,IEN)  Q:RC RC
"RTN","ROREXTUT",180,0)
 ;
"RTN","ROREXTUT",181,0)
 ;=== Data-specific protocols (only Inpatient at present)
"RTN","ROREXTUT",182,0)
 ; The Inpatient protocol is not used anymore because now the
"RTN","ROREXTUT",183,0)
 ; data search is performed on the PTF CLOSE OUT file instead
"RTN","ROREXTUT",184,0)
 ; of the PTF file (after patch ROR*1*8).
"RTN","ROREXTUT",185,0)
 ;S NODE=$NA(^RORDATA(798.3,+PATIEN,2))
"RTN","ROREXTUT",186,0)
 ;F AREA=3  D
"RTN","ROREXTUT",187,0)
 ;. ;--- Browse the events in the main time frame
"RTN","ROREXTUT",188,0)
 ;. S EVTDT=$O(@NODE@("AT",AREA,+DXDTS),-1)
"RTN","ROREXTUT",189,0)
 ;. S ENDT=+$P(DXDTS,U,2)
"RTN","ROREXTUT",190,0)
 ;. F  S EVTDT=$O(@NODE@("AT",AREA,EVTDT))  Q:'EVTDT!(EVTDT'<ENDT)  D
"RTN","ROREXTUT",191,0)
 ;. . S EVTIEN=""
"RTN","ROREXTUT",192,0)
 ;. . F  S EVTIEN=$O(@NODE@("AT",AREA,EVTDT,EVTIEN))  Q:EVTIEN=""  D
"RTN","ROREXTUT",193,0)
 ;. . . S TMP=$P($G(@NODE@(EVTIEN,0)),U,3)\1
"RTN","ROREXTUT",194,0)
 ;. . . D:TMP>0 DXADD(.DXDTS,TMP,$$FMADD^XLFDT(TMP,1),AREA)
"RTN","ROREXTUT",195,0)
 ;
"RTN","ROREXTUT",196,0)
 ;=== Data-specific 'sliding windows'
"RTN","ROREXTUT",197,0)
 ;S STDT=$$FMADD^XLFDT($P(DXDTS,U,1),-30)
"RTN","ROREXTUT",198,0)
 ;S ENDT=$$FMADD^XLFDT($P(DXDTS,U,2),-30)
"RTN","ROREXTUT",199,0)
 ;D DXADD(.DXDTS,STDT,ENDT,6)  ; Pharmacy
"RTN","ROREXTUT",200,0)
 ;
"RTN","ROREXTUT",201,0)
 ;=== Merge the main time frame into the data-specific ones
"RTN","ROREXTUT",202,0)
 D DXMERGE(.DXDTS)
"RTN","ROREXTUT",203,0)
 Q 0
"RTN","ROREXTUT",204,0)
 ;
"RTN","ROREXTUT",205,0)
 ;***** UPDATES DATA EXTRACTION PARAMETERS OF THE REGISTRY
"RTN","ROREXTUT",206,0)
 ;
"RTN","ROREXTUT",207,0)
 ; .REGLST       Reference to a local array containing registry names
"RTN","ROREXTUT",208,0)
 ;               as subscripts and optional registry IENs as values
"RTN","ROREXTUT",209,0)
 ; MID           Batch message ID returned by the GENERATE^HLMA
"RTN","ROREXTUT",210,0)
 ;
"RTN","ROREXTUT",211,0)
 ; Return values:
"RTN","ROREXTUT",212,0)
 ;       <0  Error code
"RTN","ROREXTUT",213,0)
 ;        0  Ok
"RTN","ROREXTUT",214,0)
 ;
"RTN","ROREXTUT",215,0)
TMSTMP(REGLST,MID) ;
"RTN","ROREXTUT",216,0)
 N DATE,RC,REGIEN,REGIENS,REGNAME,RORFDA,RORMSG
"RTN","ROREXTUT",217,0)
 S DATE=ROREXT("DXEND")\1
"RTN","ROREXTUT",218,0)
 S REGNAME="",RC=0
"RTN","ROREXTUT",219,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","ROREXTUT",220,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","ROREXTUT",221,0)
 . I REGIEN'>0  D  I REGIEN'>0  S RC=+REGIEN  Q
"RTN","ROREXTUT",222,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","ROREXTUT",223,0)
 . S REGIENS=REGIEN_","
"RTN","ROREXTUT",224,0)
 . ;--- Check if the new date until that data has been extracted
"RTN","ROREXTUT",225,0)
 . ;    is greater than that stored in the registry parameters
"RTN","ROREXTUT",226,0)
 . S TMP=$$GET1^DIQ(798.1,REGIENS,2,"I",,"RORMSG")
"RTN","ROREXTUT",227,0)
 . I $G(DIERR)  D  Q
"RTN","ROREXTUT",228,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","ROREXTUT",229,0)
 . S:DATE>TMP RORFDA(798.1,REGIENS,2)=DATE
"RTN","ROREXTUT",230,0)
 . ;--- Update the Last Batch info only if something has been sent
"RTN","ROREXTUT",231,0)
 . D:$G(MID)'=""
"RTN","ROREXTUT",232,0)
 . . S RORFDA(798.1,REGIENS,2.1)=$G(ROREXT("HL7MID"))
"RTN","ROREXTUT",233,0)
 . . S RORFDA(798.1,REGIENS,2.2)=$$NOW^XLFDT
"RTN","ROREXTUT",234,0)
 . . S RORFDA(798.1,REGIENS,2.3)=MID
"RTN","ROREXTUT",235,0)
 . . ;--- Increment the number of retransmissions
"RTN","ROREXTUT",236,0)
 . . S TMP=$$GET1^DIQ(798.1,REGIENS,2.5,"I",,"RORMSG")
"RTN","ROREXTUT",237,0)
 . . S RORFDA(798.1,REGIENS,2.5)=TMP+1
"RTN","ROREXTUT",238,0)
 . ;--- Update registry parameters
"RTN","ROREXTUT",239,0)
 . Q:$D(RORFDA)<10
"RTN","ROREXTUT",240,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","ROREXTUT",241,0)
 . I $G(DIERR)  D  Q
"RTN","ROREXTUT",242,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","ROREXTUT",243,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORHDT02")
0^27^B7889072
"RTN","RORHDT02",1,0)
RORHDT02 ;HCIOFO/SG - CREATE EXTRACTION TASK RECORDS ; 2/23/05 8:54am
"RTN","RORHDT02",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,5,8**;May 14, 2002
"RTN","RORHDT02",3,0)
 ;
"RTN","RORHDT02",4,0)
 Q
"RTN","RORHDT02",5,0)
 ;
"RTN","RORHDT02",6,0)
 ;***** (RE)CREATES THE TASK TABLE
"RTN","RORHDT02",7,0)
 ;
"RTN","RORHDT02",8,0)
 ; REGIEN        Registry IEN
"RTN","RORHDT02",9,0)
 ; [NTSK]        Number of tasks to create
"RTN","RORHDT02",10,0)
 ;
"RTN","RORHDT02",11,0)
 ; Return Values:
"RTN","RORHDT02",12,0)
 ;       <0  Error code
"RTN","RORHDT02",13,0)
 ;        0  Ok
"RTN","RORHDT02",14,0)
 ;        1  Timeout or "^"
"RTN","RORHDT02",15,0)
 ;
"RTN","RORHDT02",16,0)
CREATE(REGIEN,NTSK) ;
"RTN","RORHDT02",17,0)
 N FNAME,I,IENS,NRE,RORFDA,RORMSG,RORTBL,UI
"RTN","RORHDT02",18,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","RORHDT02",19,0)
 S UI='$G(NTSK)
"RTN","RORHDT02",20,0)
 ;--- Construct the base file name
"RTN","RORHDT02",21,0)
 S FNAME=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORHDT02",22,0)
 S FNAME=$TR(FNAME," !@#$%^&*-+=[]{}|\;:'"",.<>/?`~")
"RTN","RORHDT02",23,0)
 S FNAME=FNAME_"-"_$E($P($$SITE^VASITE(),U,3),1,3)_"-"
"RTN","RORHDT02",24,0)
 ;--- Count number of records in the registry
"RTN","RORHDT02",25,0)
 W:UI !,"Calculating size of the registry ..."
"RTN","RORHDT02",26,0)
 S NRE=$$REGSIZE^RORUTL02(REGIEN)
"RTN","RORHDT02",27,0)
 W:UI *13,"Number of patients in the registry:   ",NRE,!
"RTN","RORHDT02",28,0)
 ;--- Calculate the number of tasks
"RTN","RORHDT02",29,0)
 S I=+$$GET1^DIQ(798.1,REGIEN_",",21.06,"I",,"RORMSG")
"RTN","RORHDT02",30,0)
 S:I'>0 I=1000
"RTN","RORHDT02",31,0)
 W:UI "Maximum number of patients per batch: ",I,!
"RTN","RORHDT02",32,0)
 S NTSK=NRE\I  S:NRE#I NTSK=NTSK+1
"RTN","RORHDT02",33,0)
 S:NTSK'>0 NTSK=1
"RTN","RORHDT02",34,0)
 W:UI "Number of data extraction tasks:      ",NTSK,!
"RTN","RORHDT02",35,0)
 ;--- Distribute registry records among the tasks
"RTN","RORHDT02",36,0)
 S NTSK=$$TASKTBL(REGIEN,NRE,NTSK,.RORTBL)
"RTN","RORHDT02",37,0)
 ;--- Prepare records in the FDA.
"RTN","RORHDT02",38,0)
 F I=1:1:NTSK  D
"RTN","RORHDT02",39,0)
 . S IENS="+"_I_","
"RTN","RORHDT02",40,0)
 . S RORFDA(798.5,IENS,.01)=+RORTBL(I)
"RTN","RORHDT02",41,0)
 . S RORFDA(798.5,IENS,.02)=REGIEN
"RTN","RORHDT02",42,0)
 . S RORFDA(798.5,IENS,1.01)=FNAME_$TR($J(I,2)," ","0")_".HDT"
"RTN","RORHDT02",43,0)
 ;--- Ask for the final confirmation
"RTN","RORHDT02",44,0)
 I UI  D  Q:$D(DIRUT)!'$G(Y) 1
"RTN","RORHDT02",45,0)
 . S DIR(0)="Y"
"RTN","RORHDT02",46,0)
 . S DIR("A")="Create the new task table"
"RTN","RORHDT02",47,0)
 . S DIR("B")="NO"
"RTN","RORHDT02",48,0)
 . D ^DIR  W !
"RTN","RORHDT02",49,0)
 ;--- Create the new task table
"RTN","RORHDT02",50,0)
 S RC=$$CLRTTBL^RORHDTUT(REGIEN)  Q:RC<0 RC
"RTN","RORHDT02",51,0)
 D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORHDT02",52,0)
 Q $$DBS^RORERR("RORMSG",-9)
"RTN","RORHDT02",53,0)
 ;
"RTN","RORHDT02",54,0)
 ;***** DISTRIBUTES REGISTRY RECORDS AMONG THE DATA EXTRACTION TASKS
"RTN","RORHDT02",55,0)
 ;
"RTN","RORHDT02",56,0)
 ; REGIEN        Registry IEN
"RTN","RORHDT02",57,0)
 ; NRE           Number of records in the regisitry
"RTN","RORHDT02",58,0)
 ; MAXNTSK       Maximum number of tasks to create
"RTN","RORHDT02",59,0)
 ; .RORTBL       Reference to a local array where task
"RTN","RORHDT02",60,0)
 ;               desciptors will be stored
"RTN","RORHDT02",61,0)
 ;
"RTN","RORHDT02",62,0)
 ; Return Values:
"RTN","RORHDT02",63,0)
 ;       <0  Error code
"RTN","RORHDT02",64,0)
 ;       >0  Number of tasks
"RTN","RORHDT02",65,0)
 ;
"RTN","RORHDT02",66,0)
TASKTBL(REGIEN,NRE,MAXNTSK,RORTBL) ;
"RTN","RORHDT02",67,0)
 N HIGHIEN,I,IEN,INC,LOWIEN,NR
"RTN","RORHDT02",68,0)
 K RORTBL,^TMP("RORTMP",$J)
"RTN","RORHDT02",69,0)
 ;--- If 1000 records or less, then create a single task
"RTN","RORHDT02",70,0)
 D:NRE>1000
"RTN","RORHDT02",71,0)
 . ;--- Generate IEN intervals (no more than 1000)
"RTN","RORHDT02",72,0)
 . S INC=NRE\1000,NR=0  S:INC<1 INC=1
"RTN","RORHDT02",73,0)
 . F IEN=0:INC  S IEN=$O(^RORDATA(798,"AC",REGIEN,IEN))  Q:IEN'>0  D
"RTN","RORHDT02",74,0)
 . . S NR=NR+1,^TMP("RORTMP",$J,NR)=IEN
"RTN","RORHDT02",75,0)
 . ;--- Generate the task table
"RTN","RORHDT02",76,0)
 . S IEN=1,INC=NR/MAXNTSK
"RTN","RORHDT02",77,0)
 . F RORTBL=1:1  D  Q:(RORTBL'<MAXNTSK)!(IEN'>0)
"RTN","RORHDT02",78,0)
 . . S RORTBL(RORTBL)=IEN
"RTN","RORHDT02",79,0)
 . . S I=RORTBL*INC\1,IEN=$G(^TMP("RORTMP",$J,I))
"RTN","RORHDT02",80,0)
 . . S $P(RORTBL(RORTBL),U,2)=IEN
"RTN","RORHDT02",81,0)
 ;--- Analize the result
"RTN","RORHDT02",82,0)
 I $G(RORTBL)<2  K RORTBL  S RORTBL=1,RORTBL(1)=1
"RTN","RORHDT02",83,0)
 S $P(RORTBL(RORTBL),U,2)=+$O(^RORDATA(798,"AC",REGIEN,""),-1)
"RTN","RORHDT02",84,0)
 ;--- Cleanup
"RTN","RORHDT02",85,0)
 K ^TMP("RORTMP",$J)
"RTN","RORHDT02",86,0)
 Q +$G(RORTBL)
"RTN","RORHDT04")
0^1^B40589941
"RTN","RORHDT04",1,0)
RORHDT04 ;HCIOFO/SG - HISTORICAL DATA EXTRACTION PROCESS ; 1/31/05 9:59am
"RTN","RORHDT04",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,3,4,5,8**;May 14, 2002
"RTN","RORHDT04",3,0)
 ;
"RTN","RORHDT04",4,0)
 Q
"RTN","RORHDT04",5,0)
 ;
"RTN","RORHDT04",6,0)
 ;***** DATA EXTRACTION PROCESS
"RTN","RORHDT04",7,0)
 ;
"RTN","RORHDT04",8,0)
 ; REGISTRY      Registry to process
"RTN","RORHDT04",9,0)
 ;                 ^1: Registry IEN
"RTN","RORHDT04",10,0)
 ;                 ^2: Registry Name
"RTN","RORHDT04",11,0)
 ; TASKIEN       Task IEN
"RTN","RORHDT04",12,0)
 ; FAM           File Access Mode
"RTN","RORHDT04",13,0)
 ;
"RTN","RORHDT04",14,0)
 ; Return Values:
"RTN","RORHDT04",15,0)
 ;       <0  Error code
"RTN","RORHDT04",16,0)
 ;      >=0  Statistics
"RTN","RORHDT04",17,0)
 ;             ^1: Total number of processed patients
"RTN","RORHDT04",18,0)
 ;             ^2: Number of patients processed with errors
"RTN","RORHDT04",19,0)
 ;
"RTN","RORHDT04",20,0)
EXTRACT(REGISTRY,TASKIEN,FAM) ;
"RTN","RORHDT04",21,0)
 N RORDATE       ; Date/time when the first registry update finished
"RTN","RORHDT04",22,0)
 N ROREXT        ; Data extraction descriptor
"RTN","RORHDT04",23,0)
 N RORHL         ; HL7 variables
"RTN","RORHDT04",24,0)
 N RORLRC        ; List of codes of Lab results to be extracted
"RTN","RORHDT04",25,0)
 ;
"RTN","RORHDT04",26,0)
 N CNT           ; Number of processed registry records
"RTN","RORHDT04",27,0)
 N ECNT          ; Number of records processed with errors
"RTN","RORHDT04",28,0)
 N FILE          ; Name of the output file
"RTN","RORHDT04",29,0)
 N OUTDIR        ; Name of the output directory
"RTN","RORHDT04",30,0)
 ;
"RTN","RORHDT04",31,0)
 N BDT,EDT,NEXT,POP,RC,REGIEN,REGLST,REGNAME,RRBIEN,RREIEN,STOP,TMP
"RTN","RORHDT04",32,0)
 K ^TMP("RORHDT",$J,"PR"),^TMP("HLS",$J),^TMP("RORPTF",$J)
"RTN","RORHDT04",33,0)
 S REGNAME=$P(REGISTRY,U,2),(REGLST(REGNAME),REGIEN)=+REGISTRY
"RTN","RORHDT04",34,0)
 S (CNT,ECNT,STOP)=0,RORHDT("BHS")=1
"RTN","RORHDT04",35,0)
 ;--- Load parameters
"RTN","RORHDT04",36,0)
 S RC=$$REGPARM^RORHDT05(REGIEN,.BDT,.EDT,.OUTDIR,.RORDATE)
"RTN","RORHDT04",37,0)
 Q:RC<0 RC
"RTN","RORHDT04",38,0)
 S RC=$$TASKPARM^RORHDT05(REGIEN,TASKIEN,.RRBIEN,.RREIEN,.FILE)
"RTN","RORHDT04",39,0)
 Q:RC<0 RC
"RTN","RORHDT04",40,0)
 ;--- Prepare data extraction rules
"RTN","RORHDT04",41,0)
 S TMP=$S(REGNAME="VA HEPC":"VA ICR",1:REGNAME)
"RTN","RORHDT04",42,0)
 S RC=$$PREPARE^ROREXPR(TMP,BDT,EDT)
"RTN","RORHDT04",43,0)
 ;---??? Previous 2 lines were required for HepC historical data
"RTN","RORHDT04",44,0)
 ;   ??? extraction performed by the patch ROR*1*8. They should be
"RTN","RORHDT04",45,0)
 ;---??? removed and the following line should be uncommented.
"RTN","RORHDT04",46,0)
 ;S RC=$$PREPARE^ROREXPR(REGNAME,BDT,EDT)
"RTN","RORHDT04",47,0)
 Q:RC<0 $$ERROR^RORERR(-22)
"RTN","RORHDT04",48,0)
 K ROREXT("LD")          ; Do not use lag intervals
"RTN","RORHDT04",49,0)
 K ROREXT("MAXHL7SIZE")  ; Do not limit the size
"RTN","RORHDT04",50,0)
 ;--- Set the special batch message date (BHS-6) to make
"RTN","RORHDT04",51,0)
 ;    sure that timestamps of historical clinical units are
"RTN","RORHDT04",52,0)
 ;--- earlier than those of the regular ones.
"RTN","RORHDT04",53,0)
 S ROREXT("HL7DT")=EDT
"RTN","RORHDT04",54,0)
 ;--- Initialize the HL7 environment
"RTN","RORHDT04",55,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","RORHDT04",56,0)
 ;--- Delete the old output host file(s)
"RTN","RORHDT04",57,0)
 S TMP=$$DELFILES^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",58,0)
 ;--- The output file is created by the $$COMMIT^RORHDT05 function
"RTN","RORHDT04",59,0)
 D
"RTN","RORHDT04",60,0)
 . N COMMIT,IEN,NODE,NRTC,PATIEN
"RTN","RORHDT04",61,0)
 . S NRTC=100 ; Number of records to commit
"RTN","RORHDT04",62,0)
 . ;--- Try to re-extract the erroneous records
"RTN","RORHDT04",63,0)
 . S NODE=$$ROOT^DILFD(798.53,","_TASKIEN_",",1)
"RTN","RORHDT04",64,0)
 . S NODE=$NA(@NODE@("B"))
"RTN","RORHDT04",65,0)
 . S IEN=0,RC=0
"RTN","RORHDT04",66,0)
 . F  D  Q:RC!STOP!(IEN="")
"RTN","RORHDT04",67,0)
 . . K ^TMP("HLS",$J)
"RTN","RORHDT04",68,0)
 . . F  S IEN=$O(@NODE@(IEN))  Q:IEN=""  D  Q:RC!'((CNT-ECNT)#NRTC)
"RTN","RORHDT04",69,0)
 . . . S RC=$$CHKSTOP^RORHDT03(REGIEN,TASKIEN)
"RTN","RORHDT04",70,0)
 . . . I RC  S STOP=1  Q
"RTN","RORHDT04",71,0)
 . . . S RC=$$PROCREC(REGIEN,IEN,.PATIEN),CNT=CNT+1
"RTN","RORHDT04",72,0)
 . . . S ^TMP("RORHDT",$J,"PR",IEN)=RC
"RTN","RORHDT04",73,0)
 . . . I RC'<0  S RC=0  Q
"RTN","RORHDT04",74,0)
 . . . ;--- Proccess the error
"RTN","RORHDT04",75,0)
 . . . S RC=$$ERROR^RORERR(-15,,,$G(PATIEN)),ECNT=ECNT+1
"RTN","RORHDT04",76,0)
 . . . S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORHDT04",77,0)
 . . Q:RC<0
"RTN","RORHDT04",78,0)
 . . ;--- Commit the data
"RTN","RORHDT04",79,0)
 . . S TMP=$$COMMIT^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",80,0)
 . . S:TMP<0 RC=TMP
"RTN","RORHDT04",81,0)
 . Q:STOP
"RTN","RORHDT04",82,0)
 . ;--- Extract the remaining registry data
"RTN","RORHDT04",83,0)
 . S NODE=$$ROOT^DILFD(798,,1)
"RTN","RORHDT04",84,0)
 . S NODE=$NA(@NODE@("AC",REGIEN))
"RTN","RORHDT04",85,0)
 . S IEN=$S(RRBIEN>0:+$O(@NODE@(RRBIEN),-1),1:0)
"RTN","RORHDT04",86,0)
 . S RC=0
"RTN","RORHDT04",87,0)
 . F  D  Q:RC!STOP!(IEN'>0)
"RTN","RORHDT04",88,0)
 . . K ^TMP("HLS",$J)  S COMMIT=0
"RTN","RORHDT04",89,0)
 . . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC!COMMIT
"RTN","RORHDT04",90,0)
 . . . S RC=$$CHKSTOP^RORHDT03(REGIEN,TASKIEN)
"RTN","RORHDT04",91,0)
 . . . I RC  S STOP=1  Q
"RTN","RORHDT04",92,0)
 . . . I RREIEN>0,IEN'<RREIEN  S IEN="",RC=1  Q
"RTN","RORHDT04",93,0)
 . . . Q:$D(^TMP("RORHDT",$J,"PR",IEN))
"RTN","RORHDT04",94,0)
 . . . S RC=$$PROCREC(REGIEN,IEN,.PATIEN),CNT=CNT+1
"RTN","RORHDT04",95,0)
 . . . I RC'<0  S COMMIT='((CNT-ECNT)#NRTC),RC=0  Q
"RTN","RORHDT04",96,0)
 . . . ;--- Proccess the error
"RTN","RORHDT04",97,0)
 . . . S RC=$$ERROR^RORERR(-15,,,$G(PATIEN)),ECNT=ECNT+1
"RTN","RORHDT04",98,0)
 . . . S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORHDT04",99,0)
 . . . S TMP=$$ADDERR^RORHDT05(REGIEN,TASKIEN,IEN)
"RTN","RORHDT04",100,0)
 . . . S:TMP<0 RC=TMP
"RTN","RORHDT04",101,0)
 . . Q:RC<0
"RTN","RORHDT04",102,0)
 . . ;--- Commit the data
"RTN","RORHDT04",103,0)
 . . S NEXT=$S(COMMIT:$O(@NODE@(IEN)),1:IEN)
"RTN","RORHDT04",104,0)
 . . S TMP=$$COMMIT^RORHDT05(OUTDIR,FILE)
"RTN","RORHDT04",105,0)
 . . S:TMP<0 RC=TMP
"RTN","RORHDT04",106,0)
 ;
"RTN","RORHDT04",107,0)
 ;--- Write the batch trailer segment and close the file if
"RTN","RORHDT04",108,0)
 ;--- the batch is not empty. Otherwise, record a warning.
"RTN","RORHDT04",109,0)
 I '$G(RORHDT("BHS"))  D
"RTN","RORHDT04",110,0)
 . S TMP=$S(ECNT!(RC<0):"Completed with errors",STOP:"Stopped",1:"")
"RTN","RORHDT04",111,0)
 . U IO  W $$BTS^RORHL7($$MSGCNT^RORHL7,TMP),$C(13)
"RTN","RORHDT04",112,0)
 . D CLOSE^%ZISH("HL7FILE")
"RTN","RORHDT04",113,0)
 E  D ERROR^RORERR(-89)
"RTN","RORHDT04",114,0)
 ;--- Update the NEXT RECORD IEN field in the task record
"RTN","RORHDT04",115,0)
 D
"RTN","RORHDT04",116,0)
 . N NODE,RORFDA,RORMSG
"RTN","RORHDT04",117,0)
 . I $D(NEXT)  D:NEXT'>0
"RTN","RORHDT04",118,0)
 . . ;--- If the task completed successfuly, the NEXT RECORD IEN
"RTN","RORHDT04",119,0)
 . . ;    field is set to an empty string. If the task is restarted
"RTN","RORHDT04",120,0)
 . . ;--- afterwards, it will re-extract all data again.
"RTN","RORHDT04",121,0)
 . . I 'ECNT  S NEXT=""  Q
"RTN","RORHDT04",122,0)
 . . ;--- If completed with errors, use IEN of the last record
"RTN","RORHDT04",123,0)
 . . ;--- processed by the task incremented by 1.
"RTN","RORHDT04",124,0)
 . . I RREIEN>0  S NEXT=RREIEN+1  Q
"RTN","RORHDT04",125,0)
 . . ;--- Or the IEN of the last registry record incremented by 1
"RTN","RORHDT04",126,0)
 . . ;--- (in case of the last/single task).
"RTN","RORHDT04",127,0)
 . . S NODE=$$ROOT^DILFD(798,,1)
"RTN","RORHDT04",128,0)
 . . S NEXT=$O(@NODE@("AC",REGIEN,""),-1)+1
"RTN","RORHDT04",129,0)
 . . ;--- When the task is restarted, it will try to re-extract only
"RTN","RORHDT04",130,0)
 . . ;    erroneous records and will not process already extracted
"RTN","RORHDT04",131,0)
 . . ;    data (the IEN will not be less than the RREIEN or the
"RTN","RORHDT04",132,0)
 . . ;--- $ORDER function will not return a value greater than zero).
"RTN","RORHDT04",133,0)
 . E  Q:(RC<0)!ECNT!STOP  S NEXT=""
"RTN","RORHDT04",134,0)
 . ;--- Update the task record
"RTN","RORHDT04",135,0)
 . S RORFDA(798.5,TASKIEN_",",4)=NEXT
"RTN","RORHDT04",136,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORHDT04",137,0)
 . S TMP=$$DBS^RORERR("RORMSG",-9,,,798.5,TASKIEN)
"RTN","RORHDT04",138,0)
 ;--- Cleanup
"RTN","RORHDT04",139,0)
 K ^TMP("RORPTF",$J)
"RTN","RORHDT04",140,0)
 S:RC'<0 RC=$$CLRERRS^RORHDT05(REGIEN,TASKIEN)
"RTN","RORHDT04",141,0)
 Q $S(RC<0:RC,1:CNT_U_ECNT)
"RTN","RORHDT04",142,0)
 ;
"RTN","RORHDT04",143,0)
 ;***** PROCESSES A RECORD IN THE REGISTRY
"RTN","RORHDT04",144,0)
 ;
"RTN","RORHDT04",145,0)
 ; REGIEN        Registry IEN
"RTN","RORHDT04",146,0)
 ; IEN           IEN of a record in the registry
"RTN","RORHDT04",147,0)
 ; [.PATIEN]     Patient IEN is returned by this parameter
"RTN","RORHDT04",148,0)
 ;
"RTN","RORHDT04",149,0)
 ; Return Values:
"RTN","RORHDT04",150,0)
 ;       <0  Error code
"RTN","RORHDT04",151,0)
 ;        0  Ok
"RTN","RORHDT04",152,0)
 ;        1  Nothing has been extracted
"RTN","RORHDT04",153,0)
 ;
"RTN","RORHDT04",154,0)
PROCREC(REGIEN,IEN,PATIEN) ;
"RTN","RORHDT04",155,0)
 N RORERRDL      ; Default error location
"RTN","RORHDT04",156,0)
 ;
"RTN","RORHDT04",157,0)
 N BDT,EDT,IENS,INCTVDT,MSHPTR,RC,RORFDA,RORMSG,TMP
"RTN","RORHDT04",158,0)
 D CLEAR^RORERR("PROCREC^RORHDT04")
"RTN","RORHDT04",159,0)
 S IENS=IEN_",",PATIEN=0
"RTN","RORHDT04",160,0)
 ;--- Get the registry record data
"RTN","RORHDT04",161,0)
 D GETS^DIQ(798,IENS,".01;1;2;11","I","RORFDA","RORMSG")
"RTN","RORHDT04",162,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORHDT04",163,0)
 S PATIEN=RORFDA(798,IENS,.01,"I")
"RTN","RORHDT04",164,0)
 S INCTVDT=$G(RORFDA(798,IENS,2,"I"))\1
"RTN","RORHDT04",165,0)
 ;--- Skip a record tagged as "DON'T SEND"
"RTN","RORHDT04",166,0)
 Q:$G(RORFDA(798,IENS,11,"I")) 0
"RTN","RORHDT04",167,0)
 ;--- Skip the record if it was not added by the first update
"RTN","RORHDT04",168,0)
 I RORDATE  Q:$G(RORFDA(798,IENS,1,"I"))>RORDATE 0
"RTN","RORHDT04",169,0)
 ;--- Prepare data extraction dates
"RTN","RORHDT04",170,0)
 S BDT=$G(ROREXT("DXBEG")),EDT=$G(ROREXT("DXEND"))
"RTN","RORHDT04",171,0)
 ;--- Data is not extracted after inactivation date for inactive
"RTN","RORHDT04",172,0)
 ;    patients. However, after patch ROR*1*8, inactivation date
"RTN","RORHDT04",173,0)
 ;    is ignored if the patient is dead (there is no inactivation
"RTN","RORHDT04",174,0)
 ;--- reason in the registry record).
"RTN","RORHDT04",175,0)
 I '$$ACTIVE^RORDD(IEN,EDT,.TMP),TMP>0  D  Q:EDT'>BDT 0
"RTN","RORHDT04",176,0)
 . S:EDT>INCTVDT EDT=INCTVDT
"RTN","RORHDT04",177,0)
 ;--- Create HL7 message for the patient
"RTN","RORHDT04",178,0)
 S MSHPTR=$$CREATE^RORHL7()  Q:MSHPTR<0 MSHPTR
"RTN","RORHDT04",179,0)
 I $G(ROREXT("MSGBLD"))'=""  D
"RTN","RORHDT04",180,0)
 . X "S RC="_ROREXT("MSGBLD")_"(IEN,PATIEN,BDT_U_EDT,1)"
"RTN","RORHDT04",181,0)
 E  S RC=$$MESSAGE^ROREXT02(IEN,PATIEN,BDT_U_EDT,1)
"RTN","RORHDT04",182,0)
 ;--- Rollback incomplete message if necessary
"RTN","RORHDT04",183,0)
 S:RC'<0 RC=($O(^TMP("HLS",$J,""),-1)'>MSHPTR)
"RTN","RORHDT04",184,0)
 D:RC ROLLBACK^RORHL7(MSHPTR)
"RTN","RORHDT04",185,0)
 Q RC
"RTN","RORHDTUT")
0^28^B26988408
"RTN","RORHDTUT",1,0)
RORHDTUT ;HCIOFO/SG - HISTORICAL DATA EXTRACTION UTILITIES ; 1/6/05 3:49pm
"RTN","RORHDTUT",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHDTUT",3,0)
 ;
"RTN","RORHDTUT",4,0)
 Q
"RTN","RORHDTUT",5,0)
 ;
"RTN","RORHDTUT",6,0)
 ;***** DELETES THE REGISTRY TASK RECORDS
"RTN","RORHDTUT",7,0)
 ;
"RTN","RORHDTUT",8,0)
 ; REGIEN        Registry IEN
"RTN","RORHDTUT",9,0)
 ;
"RTN","RORHDTUT",10,0)
 ; Return Values:
"RTN","RORHDTUT",11,0)
 ;       <0  Error code
"RTN","RORHDTUT",12,0)
 ;        0  Ok
"RTN","RORHDTUT",13,0)
 ;
"RTN","RORHDTUT",14,0)
CLRTTBL(REGIEN) ;
"RTN","RORHDTUT",15,0)
 N IENS,IR,RC,RORBUF,RORFDA,RORMSG
"RTN","RORHDTUT",16,0)
 ;--- Load a list of task records
"RTN","RORHDTUT",17,0)
 D FIND^DIC(798.5,,"@","QX",REGIEN,,"AR",,,"RORBUF","RORMSG")
"RTN","RORHDTUT",18,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.5)
"RTN","RORHDTUT",19,0)
 Q:$G(RORBUF("DILIST",0))<1 0
"RTN","RORHDTUT",20,0)
 ;--- Prepare the FDA
"RTN","RORHDTUT",21,0)
 S IR=""
"RTN","RORHDTUT",22,0)
 F  S IR=$O(RORBUF("DILIST",2,IR))  Q:IR=""  D
"RTN","RORHDTUT",23,0)
 . S RORFDA(798.5,RORBUF("DILIST",2,IR)_",",.01)="@"
"RTN","RORHDTUT",24,0)
 ;--- Delete the registry tasks
"RTN","RORHDTUT",25,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORHDTUT",26,0)
 Q $$DBS^RORERR("RORMSG",-9,,,798.5)
"RTN","RORHDTUT",27,0)
 ;
"RTN","RORHDTUT",28,0)
 ;***** GENERATES A NEW UNUSED FILE NAME FOR THE TASK
"RTN","RORHDTUT",29,0)
 ;
"RTN","RORHDTUT",30,0)
 ; REGIEN        Registry IEN
"RTN","RORHDTUT",31,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTUT",32,0)
 ; [.FILE]       New name is returned via this parameter
"RTN","RORHDTUT",33,0)
 ; [GNONLY]      Only generate a new name but do not store it into
"RTN","RORHDTUT",34,0)
 ;               task record
"RTN","RORHDTUT",35,0)
 ;
"RTN","RORHDTUT",36,0)
 ; Return Values:
"RTN","RORHDTUT",37,0)
 ;       <0  Error code
"RTN","RORHDTUT",38,0)
 ;        0  Ok
"RTN","RORHDTUT",39,0)
 ;
"RTN","RORHDTUT",40,0)
NEWFILE(REGIEN,TASKIEN,FILE,GNONLY) ;
"RTN","RORHDTUT",41,0)
 N BASE,EXT,FN,NAME,OUTDIR,RC,RORBUF,RORLST,RORMSG,TMP
"RTN","RORHDTUT",42,0)
 S RC=$$TASKFILE(REGIEN,TASKIEN,.OUTDIR,.FILE)  Q:RC<0 RC
"RTN","RORHDTUT",43,0)
 S BASE=$P($P(FILE,"."),"-",1,3),EXT=$P($P(FILE,".",2),";")
"RTN","RORHDTUT",44,0)
 ;--- Get a list of files in the output directory
"RTN","RORHDTUT",45,0)
 S RORBUF(BASE_"*."_EXT)=""
"RTN","RORHDTUT",46,0)
 Q:'$$LIST^%ZISH(OUTDIR,"RORBUF","RORLST") 0
"RTN","RORHDTUT",47,0)
 Q:$D(RORLST)<10 0
"RTN","RORHDTUT",48,0)
 K RORBUF
"RTN","RORHDTUT",49,0)
 ;--- Generate a new name
"RTN","RORHDTUT",50,0)
 S NAME="",FN=0
"RTN","RORHDTUT",51,0)
 F  S NAME=$O(RORLST(NAME))  Q:NAME=""  D
"RTN","RORHDTUT",52,0)
 . S TMP=+$P(NAME,"-",4)  S:TMP>FN FN=TMP
"RTN","RORHDTUT",53,0)
 S FILE=BASE,$P(FILE,"-",4)=$TR($J(FN+1,2)," ","0")
"RTN","RORHDTUT",54,0)
 S FILE=FILE_"."_EXT
"RTN","RORHDTUT",55,0)
 Q:$G(GNONLY) 0
"RTN","RORHDTUT",56,0)
 K RORLST
"RTN","RORHDTUT",57,0)
 ;--- Store it to the task record
"RTN","RORHDTUT",58,0)
 S RORBUF(798.5,TASKIEN_",",1.01)=FILE
"RTN","RORHDTUT",59,0)
 D FILE^DIE(,"RORBUF","RORMSG")
"RTN","RORHDTUT",60,0)
 Q $$DBS^RORERR("RORMSG",-9,,,798.5,TASKIEN)
"RTN","RORHDTUT",61,0)
 ;
"RTN","RORHDTUT",62,0)
 ;***** WAITS FOR [ENTER] FROM THE KEYBOARD
"RTN","RORHDTUT",63,0)
PAUSE ;
"RTN","RORHDTUT",64,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","RORHDTUT",65,0)
 I IO=IO(0)  D  D ^DIR
"RTN","RORHDTUT",66,0)
 . S DIR(0)="FAO",DIR("A")="Press Enter to continue ..."
"RTN","RORHDTUT",67,0)
 Q
"RTN","RORHDTUT",68,0)
 ;
"RTN","RORHDTUT",69,0)
 ;***** SELECTS A REGISTRY DESCRIPTOR IN THE FILE #798.1
"RTN","RORHDTUT",70,0)
 ;
"RTN","RORHDTUT",71,0)
 ; [.REGNAME]    Registry name is returned via this parameter
"RTN","RORHDTUT",72,0)
 ;
"RTN","RORHDTUT",73,0)
 ; Return Values:
"RTN","RORHDTUT",74,0)
 ;       <0  Error code
"RTN","RORHDTUT",75,0)
 ;       ""  Timeout, "^" entered, or an error in ^DIC
"RTN","RORHDTUT",76,0)
 ;        0  There are no records in the file #798.1
"RTN","RORHDTUT",77,0)
 ;       >0  IEN of the selected registry
"RTN","RORHDTUT",78,0)
 ;
"RTN","RORHDTUT",79,0)
SELREG(REGNAME) ;
"RTN","RORHDTUT",80,0)
 N DA,DIC,DLAYGO,DTOUT,DUOUT,RC,RORBUF,RORMSG,X,Y
"RTN","RORHDTUT",81,0)
 S REGNAME=""
"RTN","RORHDTUT",82,0)
 ;--- If there are less than two records, do not ask a user
"RTN","RORHDTUT",83,0)
 D LIST^DIC(798.1,,"@;.01E",,2,,,"B",,,"RORBUF","RORMSG")
"RTN","RORHDTUT",84,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORHDTUT",85,0)
 I $G(RORBUF("DILIST",0))<2  D  Q +$G(RORBUF("DILIST",2,1))
"RTN","RORHDTUT",86,0)
 . S REGNAME=$G(RORBUF("DILIST","ID",1,.01))
"RTN","RORHDTUT",87,0)
 ;--- Select a registry
"RTN","RORHDTUT",88,0)
 S DIC=798.1,DIC(0)="AENQZ"
"RTN","RORHDTUT",89,0)
 S DIC("A")="Select a Registry: "
"RTN","RORHDTUT",90,0)
 S DIC("B")=$G(RORHDT("DFLT","REG"))
"RTN","RORHDTUT",91,0)
 D ^DIC  W !
"RTN","RORHDTUT",92,0)
 S:Y>0 (RORHDT("DFLT","REG"),REGNAME)=Y(0,0)
"RTN","RORHDTUT",93,0)
 Q $S($D(DTOUT)!$D(DUOUT):"",Y<0:"",1:+Y)
"RTN","RORHDTUT",94,0)
 ;
"RTN","RORHDTUT",95,0)
 ;***** SELECTS A DATA EXTRACTION TASK
"RTN","RORHDTUT",96,0)
 ;
"RTN","RORHDTUT",97,0)
 ; RORREG        Registry IEN
"RTN","RORHDTUT",98,0)
 ;
"RTN","RORHDTUT",99,0)
 ; Return Values:
"RTN","RORHDTUT",100,0)
 ;       <0  Error code
"RTN","RORHDTUT",101,0)
 ;       ""  Timeout, "^" entered, or an error in the ^DIC
"RTN","RORHDTUT",102,0)
 ;        0  There are no tasks defined in the file #798.5
"RTN","RORHDTUT",103,0)
 ;       >0  IEN of the selected task
"RTN","RORHDTUT",104,0)
 ;
"RTN","RORHDTUT",105,0)
SELTASK(RORREG) ;
"RTN","RORHDTUT",106,0)
 N DA,DIC,DLAYGO,DTOUT,DUOUT,RC,RORBUF,RORMSG,X,Y
"RTN","RORHDTUT",107,0)
 ;--- If there are less than two records, do not ask a user
"RTN","RORHDTUT",108,0)
 D FIND^DIC(798.5,,"@","QX",RORREG,2,"AR",,,"RORBUF","RORMSG")
"RTN","RORHDTUT",109,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.5)
"RTN","RORHDTUT",110,0)
 Q:$G(RORBUF("DILIST",0))<2 +$G(RORBUF("DILIST",2,1))
"RTN","RORHDTUT",111,0)
 ;--- Display status of the tasks
"RTN","RORHDTUT",112,0)
 S RC=$$STATUS^RORHDT01(RORREG)  Q:RC<0 RC
"RTN","RORHDTUT",113,0)
 ;--- Select a task
"RTN","RORHDTUT",114,0)
 S DIC=798.5,DIC(0)="AEQS"
"RTN","RORHDTUT",115,0)
 S DIC("A")="Select a Task: "
"RTN","RORHDTUT",116,0)
 S DIC("B")=$G(RORHDT("DFLT","TSK"))
"RTN","RORHDTUT",117,0)
 S DIC("S")="I $P(^(0),U,2)=RORREG"
"RTN","RORHDTUT",118,0)
 D ^DIC  W !
"RTN","RORHDTUT",119,0)
 S:Y>0 RORHDT("DFLT","TSK")=+Y
"RTN","RORHDTUT",120,0)
 Q $S($D(DTOUT)!$D(DUOUT):"",Y<0:"",1:+Y)
"RTN","RORHDTUT",121,0)
 ;
"RTN","RORHDTUT",122,0)
 ;***** RETURNS STATUS OF THE TASK
"RTN","RORHDTUT",123,0)
 ;
"RTN","RORHDTUT",124,0)
 ; REGIEN        Registry IEN
"RTN","RORHDTUT",125,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTUT",126,0)
 ; [LTO]         LOCK timeout
"RTN","RORHDTUT",127,0)
 ;
"RTN","RORHDTUT",128,0)
 ; Return Values:
"RTN","RORHDTUT",129,0)
 ;       <0  Error code
"RTN","RORHDTUT",130,0)
 ;        0  Unknown Status
"RTN","RORHDTUT",131,0)
 ;       >0  Status (Code^Description)
"RTN","RORHDTUT",132,0)
 ;
"RTN","RORHDTUT",133,0)
 ;               1  Active: Pending
"RTN","RORHDTUT",134,0)
 ;               2  Active: Running
"RTN","RORHDTUT",135,0)
 ;               3  Inactive: Finished
"RTN","RORHDTUT",136,0)
 ;               4  Inactive: Available
"RTN","RORHDTUT",137,0)
 ;               5  Inactive: Interrupted
"RTN","RORHDTUT",138,0)
 ;
"RTN","RORHDTUT",139,0)
 ;             100  Completed
"RTN","RORHDTUT",140,0)
 ;             101  Inactive: Crashed
"RTN","RORHDTUT",141,0)
 ;             102  Completed with Errors
"RTN","RORHDTUT",142,0)
 ;
"RTN","RORHDTUT",143,0)
STATUS(REGIEN,TASKIEN,LTO) ;
"RTN","RORHDTUT",144,0)
 N HDTNODE,IENS,RC,RORBUF,RORMSG,STATUS,ZTSK
"RTN","RORHDTUT",145,0)
 S HDTNODE=$NA(^XTMP("RORHDT"_REGIEN))
"RTN","RORHDTUT",146,0)
 ;---Check if the task is running
"RTN","RORHDTUT",147,0)
 L +@HDTNODE@("T",TASKIEN):$G(LTO)
"RTN","RORHDTUT",148,0)
 E  Q "2^Active: Running"
"RTN","RORHDTUT",149,0)
 L -@HDTNODE@("T",TASKIEN)
"RTN","RORHDTUT",150,0)
 ;--- Load some data from the task record
"RTN","RORHDTUT",151,0)
 S IENS=TASKIEN_","
"RTN","RORHDTUT",152,0)
 D GETS^DIQ(798.5,IENS,"2.01;2.02;2.03","EI","RORBUF","RORMSG")
"RTN","RORHDTUT",153,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.5,IENS)
"RTN","RORHDTUT",154,0)
 ;--- Check the JOB NUMBER and COMPLETED fields
"RTN","RORHDTUT",155,0)
 Q:$G(RORBUF(798.5,IENS,2.03,"I")) "100^Completed"
"RTN","RORHDTUT",156,0)
 Q:$G(RORBUF(798.5,IENS,2.02,"I")) "101^Inactive: Crashed"
"RTN","RORHDTUT",157,0)
 S STATUS=0
"RTN","RORHDTUT",158,0)
 ;--- Try to get status from the Taskman
"RTN","RORHDTUT",159,0)
 S ZTSK=$G(RORBUF(798.5,IENS,2.01,"I"))
"RTN","RORHDTUT",160,0)
 I ZTSK  D  Q:STATUS STATUS
"RTN","RORHDTUT",161,0)
 . D STAT^%ZTLOAD  Q:'$G(ZTSK(0))!'$G(ZTSK(1))
"RTN","RORHDTUT",162,0)
 . S:ZTSK(1)'=2 STATUS=ZTSK(1)_U_ZTSK(2) ; Ignore 'Active:Running'
"RTN","RORHDTUT",163,0)
 ;--- Check the ERROR multiple
"RTN","RORHDTUT",164,0)
 D LIST^DIC(798.53,","_IENS,"@",,1,,,"B",,,"RORBUF","RORMSG")
"RTN","RORHDTUT",165,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.53)
"RTN","RORHDTUT",166,0)
 Q $S($G(RORBUF("DILIST",0))>0:"102^Completed with Errors",1:0)
"RTN","RORHDTUT",167,0)
 ;
"RTN","RORHDTUT",168,0)
 ;***** GETS A NAME OF THE TASK OUTPUT FILE
"RTN","RORHDTUT",169,0)
 ;
"RTN","RORHDTUT",170,0)
 ; REGIEN        Registry IEN
"RTN","RORHDTUT",171,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTUT",172,0)
 ; .OUTDIR       Output directory is returned via this parameter
"RTN","RORHDTUT",173,0)
 ; .FILE         File name is returned via the parameter
"RTN","RORHDTUT",174,0)
 ;
"RTN","RORHDTUT",175,0)
 ; Return Values:
"RTN","RORHDTUT",176,0)
 ;       <0  Error code
"RTN","RORHDTUT",177,0)
 ;        0  Ok
"RTN","RORHDTUT",178,0)
 ;
"RTN","RORHDTUT",179,0)
TASKFILE(REGIEN,TASKIEN,OUTDIR,FILE) ;
"RTN","RORHDTUT",180,0)
 N IENS,RC,RORMSG
"RTN","RORHDTUT",181,0)
 S (OUTDIR,FILE)=""
"RTN","RORHDTUT",182,0)
 ;--- Get the output directory
"RTN","RORHDTUT",183,0)
 S IENS=REGIEN_","
"RTN","RORHDTUT",184,0)
 S OUTDIR=$$GET1^DIQ(798.1,IENS,21.03,,,"RORMSG")
"RTN","RORHDTUT",185,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORHDTUT",186,0)
 ;--- Get the file name
"RTN","RORHDTUT",187,0)
 S IENS=TASKIEN_","
"RTN","RORHDTUT",188,0)
 S FILE=$$GET1^DIQ(798.5,IENS,1.01,,,"RORMSG")
"RTN","RORHDTUT",189,0)
 Q $$DBS^RORERR("RORMSG",-9,,,798.5,IENS)
"RTN","RORHDTUT",190,0)
 ;
"RTN","RORHDTUT",191,0)
 ;***** RETURNS TASK JOB NUMBER
"RTN","RORHDTUT",192,0)
 ;
"RTN","RORHDTUT",193,0)
 ; REGIEN        Registry IEN
"RTN","RORHDTUT",194,0)
 ; TASKIEN       Task IEN
"RTN","RORHDTUT",195,0)
 ;
"RTN","RORHDTUT",196,0)
 ; Return Values:
"RTN","RORHDTUT",197,0)
 ;       <0  Error code
"RTN","RORHDTUT",198,0)
 ;        0  Task is not active
"RTN","RORHDTUT",199,0)
 ;       >0  Job number
"RTN","RORHDTUT",200,0)
 ;
"RTN","RORHDTUT",201,0)
TASKJOB(REGIEN,TASKIEN) ;
"RTN","RORHDTUT",202,0)
 N IENS,JOBNUM,RC,RORMSG
"RTN","RORHDTUT",203,0)
 S IENS=TASKIEN_","
"RTN","RORHDTUT",204,0)
 S JOBNUM=+$$GET1^DIQ(798.5,IENS,2.02,"I",,"RORMSG")
"RTN","RORHDTUT",205,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.5,IENS)
"RTN","RORHDTUT",206,0)
 Q JOBNUM
"RTN","RORHL06")
0^30^B24855120
"RTN","RORHL06",1,0)
RORHL06 ;HOIFO/BH,CRT - HL7 LIVER BIOPSY: OBR,OBX ; 1/20/05 1:03pm
"RTN","RORHL06",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,5,8**;May 14, 2002
"RTN","RORHL06",3,0)
 ;
"RTN","RORHL06",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL06",5,0)
 ;
"RTN","RORHL06",6,0)
 ; #1995         $$CPT^ICPTCOD (supported)
"RTN","RORHL06",7,0)
 ; #2503         LRDFN^LR7OR1 (controlled)
"RTN","RORHL06",8,0)
 ; #10035        Read access to the PATIENT file (supported)
"RTN","RORHL06",9,0)
 ;
"RTN","RORHL06",10,0)
 Q
"RTN","RORHL06",11,0)
 ;
"RTN","RORHL06",12,0)
 ;***** SEARCHES FOR LIVER BIOPSY DATA
"RTN","RORHL06",13,0)
 ;
"RTN","RORHL06",14,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL06",15,0)
 ;
"RTN","RORHL06",16,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL06",17,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL06",18,0)
 ;
"RTN","RORHL06",19,0)
 ; Return Values:
"RTN","RORHL06",20,0)
 ;       <0  Error code
"RTN","RORHL06",21,0)
 ;        0  Ok
"RTN","RORHL06",22,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",23,0)
 ;
"RTN","RORHL06",24,0)
 ; The function uses the ^UTILITY($J,"W") global node.
"RTN","RORHL06",25,0)
 ;
"RTN","RORHL06",26,0)
EN1(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL06",27,0)
 N ERRCNT,FLDS,IDT,IENS,K5,LRDFN,QUIT,RC,SPECIMEN
"RTN","RORHL06",28,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",29,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL06",30,0)
 ;
"RTN","RORHL06",31,0)
 ;--- Check if the patient exists
"RTN","RORHL06",32,0)
 S RORDFN=+$G(RORDFN)
"RTN","RORHL06",33,0)
 I '$D(^DPT(RORDFN))  D  Q RC
"RTN","RORHL06",34,0)
 . S RC=$$ERROR^RORERR(-36,,,RORDFN,2)
"RTN","RORHL06",35,0)
 ;
"RTN","RORHL06",36,0)
 S LRDFN=+$$LRDFN^LR7OR1(RORDFN)  Q:'LRDFN 0
"RTN","RORHL06",37,0)
 ;
"RTN","RORHL06",38,0)
 S FLDS="1.1;1.4"
"RTN","RORHL06",39,0)
 S RORENDT=$$INVDATE^RORUTL01(RORENDT)
"RTN","RORHL06",40,0)
 S RORSTDT=$$INVDATE^RORUTL01(RORSTDT)
"RTN","RORHL06",41,0)
 ;
"RTN","RORHL06",42,0)
 S IDT=$O(^LR(LRDFN,"SP",RORSTDT))
"RTN","RORHL06",43,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT),-1)  Q:'IDT!(IDT'>RORENDT)  D  Q:RC<0
"RTN","RORHL06",44,0)
 . S K5=0,QUIT=0
"RTN","RORHL06",45,0)
 . F  S K5=$O(^LR(LRDFN,"SP",IDT,.1,K5))  Q:'K5  D  Q:QUIT!(RC<0)
"RTN","RORHL06",46,0)
 . . S IENS=K5_","_IDT_","_LRDFN_","
"RTN","RORHL06",47,0)
 . . S SPECIMEN=$$GET1^DIQ(63.812,IENS,.01,"E",,"RORMSG")
"RTN","RORHL06",48,0)
 . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL06",49,0)
 . . . D DBS^RORERR("RORMSG",-9,,,63.812,IENS)
"RTN","RORHL06",50,0)
 . . I $$UP^XLFSTR(SPECIMEN)["LIVER"  D
"RTN","RORHL06",51,0)
 . . . S IENS=IDT_","_LRDFN_","
"RTN","RORHL06",52,0)
 . . . S TMP=$$OBR(IENS)
"RTN","RORHL06",53,0)
 . . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL06",54,0)
 . . . S TMP=$$OBX(IENS,FLDS)
"RTN","RORHL06",55,0)
 . . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL06",56,0)
 . . . S QUIT=1
"RTN","RORHL06",57,0)
 ;
"RTN","RORHL06",58,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL06",59,0)
 ;
"RTN","RORHL06",60,0)
 ;***** LIVER BIOPSY OBR SEGMENT BUILDER
"RTN","RORHL06",61,0)
 ;
"RTN","RORHL06",62,0)
 ; RORIENS       IENS of Liver Biopsy Record in File #63.08
"RTN","RORHL06",63,0)
 ;
"RTN","RORHL06",64,0)
 ; Return Values:
"RTN","RORHL06",65,0)
 ;       <0  Error code
"RTN","RORHL06",66,0)
 ;        0  Ok
"RTN","RORHL06",67,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",68,0)
 ;
"RTN","RORHL06",69,0)
OBR(RORIENS) ;
"RTN","RORHL06",70,0)
 N BUF,CS,ERRCNT,FLDS,IEN,RC,RORMSG,ROROUT,RORSEG,TMP
"RTN","RORHL06",71,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",72,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL06",73,0)
 S CS=$E(HLECH,1)
"RTN","RORHL06",74,0)
 ;--- Check the parameters
"RTN","RORHL06",75,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL06",76,0)
 ;
"RTN","RORHL06",77,0)
 ;--- Load the data (with a temporary fix for invalid
"RTN","RORHL06",78,0)
 ;--- output transform of the .01 field - ROR*1*8)
"RTN","RORHL06",79,0)
 D GETS^DIQ(63.08,RORIENS,".01","I","ROROUT","RORMSG")
"RTN","RORHL06",80,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",81,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL06",82,0)
 D GETS^DIQ(63.08,RORIENS,".06;.07;.08","IE","ROROUT","RORMSG")
"RTN","RORHL06",83,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",84,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL06",85,0)
 ;
"RTN","RORHL06",86,0)
 ;--- Initialize the segment
"RTN","RORHL06",87,0)
 S RORSEG="OBR"
"RTN","RORHL06",88,0)
 ;
"RTN","RORHL06",89,0)
 ;--- OBR-3 - Surgical Path Acc #
"RTN","RORHL06",90,0)
 S $P(RORSEG,HLFS,4)=$G(ROROUT(63.08,RORIENS,.06,"E"))
"RTN","RORHL06",91,0)
 ;
"RTN","RORHL06",92,0)
 ;--- OBR-4 - Liver Biopsy CPT Code
"RTN","RORHL06",93,0)
 S BUF=47000,TMP=$$CPT^ICPTCOD(BUF)
"RTN","RORHL06",94,0)
 I TMP<0  D  S ERRCNT=ERRCNT+1,TMP=""
"RTN","RORHL06",95,0)
 . D ERROR^RORERR(-57,,$P(TMP,U,2),,+TMP,"$$CPT^ICPTCOD")
"RTN","RORHL06",96,0)
 S $P(BUF,CS,2)=$$ESCAPE^RORHL7($P(TMP,U,3))
"RTN","RORHL06",97,0)
 S $P(BUF,CS,3)="C4"
"RTN","RORHL06",98,0)
 S $P(RORSEG,HLFS,5)=BUF
"RTN","RORHL06",99,0)
 ;
"RTN","RORHL06",100,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL06",101,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.01,"I"))
"RTN","RORHL06",102,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,63.08,RORIENS,.01)
"RTN","RORHL06",103,0)
 S $P(RORSEG,HLFS,8)=$$FMTHL7^XLFDT(TMP)
"RTN","RORHL06",104,0)
 ;
"RTN","RORHL06",105,0)
 ;--- OBR-16 - Surgeon/Physician
"RTN","RORHL06",106,0)
 S $P(RORSEG,HLFS,17)=$G(ROROUT(63.08,RORIENS,.07,"I"))
"RTN","RORHL06",107,0)
 ;
"RTN","RORHL06",108,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL06",109,0)
 S $P(RORSEG,HLFS,25)="SP"
"RTN","RORHL06",110,0)
 ;
"RTN","RORHL06",111,0)
 ;--- OBR-44 - Division
"RTN","RORHL06",112,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.08,"E"))
"RTN","RORHL06",113,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL06",114,0)
 S $P(RORSEG,HLFS,45)=$$DIV44^RORHLUT1(IEN,1,CS)
"RTN","RORHL06",115,0)
 ;
"RTN","RORHL06",116,0)
 ;--- Store the segment
"RTN","RORHL06",117,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL06",118,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL06",119,0)
 ;
"RTN","RORHL06",120,0)
 ;***** LIVER BIOPSY OBX SEGMENT(S) BUILDER
"RTN","RORHL06",121,0)
 ;
"RTN","RORHL06",122,0)
 ; RORIENS       IENS of Liver Biopsy Record in File #63.08
"RTN","RORHL06",123,0)
 ; RORFLDS       List of WP fields to return as OBX'es
"RTN","RORHL06",124,0)
 ;
"RTN","RORHL06",125,0)
 ; Return Values:
"RTN","RORHL06",126,0)
 ;       <0  Error code
"RTN","RORHL06",127,0)
 ;        0  Ok
"RTN","RORHL06",128,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL06",129,0)
 ;
"RTN","RORHL06",130,0)
OBX(RORIENS,RORFLDS) ;
"RTN","RORHL06",131,0)
 N BUF,CS,DIWF,DIWL,DIWR,ERRCNT,FLD,I,RORII,PZ,RC,RORMSG,ROROUT,RORRES,RORSEG,SCS,TMP,X
"RTN","RORHL06",132,0)
 S (ERRCNT,RC)=0
"RTN","RORHL06",133,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL06",134,0)
 S CS=$E(HLECH),SCS=$E(HLECH,4)
"RTN","RORHL06",135,0)
 ;--- Check the parameters
"RTN","RORHL06",136,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL06",137,0)
 ;
"RTN","RORHL06",138,0)
 ;--- Load the data
"RTN","RORHL06",139,0)
 D GETS^DIQ(63.08,RORIENS,RORFLDS,"EI","ROROUT","RORMSG")
"RTN","RORHL06",140,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL06",141,0)
 . D DBS^RORERR("RORMSG",-99,,,63.08,RORIENS)
"RTN","RORHL06",142,0)
 ;
"RTN","RORHL06",143,0)
 ;--- Initialize the segment
"RTN","RORHL06",144,0)
 S RORSEG="OBX"
"RTN","RORHL06",145,0)
 ;
"RTN","RORHL06",146,0)
 ;--- OBX-2
"RTN","RORHL06",147,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL06",148,0)
 ;
"RTN","RORHL06",149,0)
 ;--- OBX-11
"RTN","RORHL06",150,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL06",151,0)
 ;
"RTN","RORHL06",152,0)
 F PZ=1:1  S FLD=$P(RORFLDS,";",PZ)  Q:FLD=""  D  Q:RC<0
"RTN","RORHL06",153,0)
 . S BUF=47000,TMP=$$CPT^ICPTCOD(BUF)
"RTN","RORHL06",154,0)
 . I TMP<0  D  S ERRCNT=ERRCNT+1,TMP=""
"RTN","RORHL06",155,0)
 . . D ERROR^RORERR(-57,,$P(TMP,U,2),,+TMP,"$$CPT^ICPTCOD")
"RTN","RORHL06",156,0)
 . S $P(BUF,SCS,2)=$$GET1^DID(63.08,FLD,,"LABEL",,"RORMSG")
"RTN","RORHL06",157,0)
 . S $P(BUF,CS,2)=$$ESCAPE^RORHL7($P(TMP,U,3))
"RTN","RORHL06",158,0)
 . S $P(BUF,CS,3)="C4"
"RTN","RORHL06",159,0)
 . S $P(RORSEG,HLFS,4)=BUF
"RTN","RORHL06",160,0)
 . ;---
"RTN","RORHL06",161,0)
 . K ^UTILITY($J,"W")
"RTN","RORHL06",162,0)
 . S DIWL=1,DIWR=72
"RTN","RORHL06",163,0)
 . S RORII=0
"RTN","RORHL06",164,0)
 . F  S RORII=$O(ROROUT(63.08,RORIENS,FLD,RORII))  Q:'RORII  D
"RTN","RORHL06",165,0)
 . . S X=ROROUT(63.08,RORIENS,FLD,RORII)  D ^DIWP
"RTN","RORHL06",166,0)
 . ;---
"RTN","RORHL06",167,0)
 . S I=0
"RTN","RORHL06",168,0)
 . F  S I=$O(^UTILITY($J,"W",DIWL,I))  Q:'I  D
"RTN","RORHL06",169,0)
 . . S $P(RORSEG,HLFS,6)=$G(^UTILITY($J,"W",DIWL,I,0))
"RTN","RORHL06",170,0)
 . . ;--- Store the segment
"RTN","RORHL06",171,0)
 . . D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL06",172,0)
 ;
"RTN","RORHL06",173,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL08")
0^23^B43491320
"RTN","RORHL08",1,0)
RORHL08 ;HOIFO/BH - HL7 INPATIENT DATA: PV1,OBR ; 12/22/04 11:27am
"RTN","RORHL08",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL08",3,0)
 ;
"RTN","RORHL08",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL08",5,0)
 ;
"RTN","RORHL08",6,0)
 ; #92           Read access to the PTF file (controlled)
"RTN","RORHL08",7,0)
 ; #???          Read access to the PTF CLOSE OUT file (???)
"RTN","RORHL08",8,0)
 ;
"RTN","RORHL08",9,0)
 Q
"RTN","RORHL08",10,0)
 ;
"RTN","RORHL08",11,0)
 ;***** INPATIENT DATA SEGMENT BUILDER
"RTN","RORHL08",12,0)
 ;
"RTN","RORHL08",13,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",14,0)
 ;
"RTN","RORHL08",15,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL08",16,0)
 ;               data extraction time frames are stored.
"RTN","RORHL08",17,0)
 ;
"RTN","RORHL08",18,0)
 ; RORTY         Set to either "PV1" or "OBR"
"RTN","RORHL08",19,0)
 ;
"RTN","RORHL08",20,0)
 ; Return Values:
"RTN","RORHL08",21,0)
 ;       <0  Error Code
"RTN","RORHL08",22,0)
 ;        0  Ok
"RTN","RORHL08",23,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",24,0)
 ;
"RTN","RORHL08",25,0)
 ; The function uses the ^TMP("RORHL08",$J) global node.
"RTN","RORHL08",26,0)
 ;
"RTN","RORHL08",27,0)
EN1(RORDFN,DXDTS,RORTY) ;
"RTN","RORHL08",28,0)
 N ERRCNT,IENS,INIEN,PV1CNT,RC,RORMSG,TMP
"RTN","RORHL08",29,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL08",30,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",31,0)
 ;
"RTN","RORHL08",32,0)
 ;--- PV1 Segments
"RTN","RORHL08",33,0)
 I RORTY="PV1"  K ^TMP("RORHL08",$J)  D
"RTN","RORHL08",34,0)
 . N DATE,ENDT,IDX,STDT,TYPE,XREF
"RTN","RORHL08",35,0)
 . S XREF=$NA(^TMP("RORPTF",$J,"PDI",RORDFN))
"RTN","RORHL08",36,0)
 . S (IDX,PV1CNT)=0
"RTN","RORHL08",37,0)
 . F  S IDX=$O(DXDTS(3,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL08",38,0)
 . . S STDT=$P(DXDTS(3,IDX),U),ENDT=$P(DXDTS(3,IDX),U,2)
"RTN","RORHL08",39,0)
 . . S TMP=$$UPDNDX(STDT,ENDT)
"RTN","RORHL08",40,0)
 . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL08",41,0)
 . . ;---
"RTN","RORHL08",42,0)
 . . S DATE=$O(@XREF@(STDT),-1)
"RTN","RORHL08",43,0)
 . . F  S DATE=$O(@XREF@(DATE))  Q:'DATE!(DATE'<ENDT)  D
"RTN","RORHL08",44,0)
 . . . S INIEN=""
"RTN","RORHL08",45,0)
 . . . F  S INIEN=$O(@XREF@(DATE,INIEN))  Q:'INIEN  D
"RTN","RORHL08",46,0)
 . . . . S IENS=INIEN_","
"RTN","RORHL08",47,0)
 . . . . ;--- Skip census records
"RTN","RORHL08",48,0)
 . . . . S TYPE=$$GET1^DIQ(45,IENS,11,"I",,"RORMSG")
"RTN","RORHL08",49,0)
 . . . . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL08",50,0)
 . . . . . D DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",51,0)
 . . . . Q:TYPE'="1"
"RTN","RORHL08",52,0)
 . . . . ;--- Generate the PV1 segment
"RTN","RORHL08",53,0)
 . . . . S TMP=$$PV1(INIEN,RORDFN)
"RTN","RORHL08",54,0)
 . . . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL08",55,0)
 . . . . ;--- Reference for the corresponding OBR and OBX segments
"RTN","RORHL08",56,0)
 . . . . S:TMP'="S" PV1CNT=PV1CNT+1,^TMP("RORHL08",$J,PV1CNT)=INIEN
"RTN","RORHL08",57,0)
 ;
"RTN","RORHL08",58,0)
 ;--- OBR and OBX Segments
"RTN","RORHL08",59,0)
 I RORTY="OBR"  D  K ^TMP("RORHL08",$J)
"RTN","RORHL08",60,0)
 . S PV1CNT=0
"RTN","RORHL08",61,0)
 . F  S PV1CNT=$O(^TMP("RORHL08",$J,PV1CNT))  Q:PV1CNT'>0  D
"RTN","RORHL08",62,0)
 . . S INIEN=+$G(^TMP("RORHL08",$J,PV1CNT))  Q:INIEN'>0
"RTN","RORHL08",63,0)
 . . ;---
"RTN","RORHL08",64,0)
 . . S TMP=$$OBR(INIEN,RORDFN)
"RTN","RORHL08",65,0)
 . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL08",66,0)
 . . ;---
"RTN","RORHL08",67,0)
 . . S TMP=$$OBX^RORHL081(INIEN,RORDFN)
"RTN","RORHL08",68,0)
 . . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL08",69,0)
 ;
"RTN","RORHL08",70,0)
 ;--- Check for errors
"RTN","RORHL08",71,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL08",72,0)
 ;
"RTN","RORHL08",73,0)
 ;***** MERGES THE TIME FRAME INTO THE LIST
"RTN","RORHL08",74,0)
 ;
"RTN","RORHL08",75,0)
 ; .DXDTS        Reference to a local array where the time frames
"RTN","RORHL08",76,0)
 ;               are returned: DXDTS(StartDT)=StartDT^EndDT.
"RTN","RORHL08",77,0)
 ;
"RTN","RORHL08",78,0)
 ; STDT          Start date
"RTN","RORHL08",79,0)
 ; ENDT          End date
"RTN","RORHL08",80,0)
 ;
"RTN","RORHL08",81,0)
 ; This procedure merges the provided time frame [STDT,ENDT[ into
"RTN","RORHL08",82,0)
 ; the list stored in the ^TMP("RORPTF",$J,"DTF") global node and
"RTN","RORHL08",83,0)
 ; returns a list of time frames that should be updated into a
"RTN","RORHL08",84,0)
 ; local array defined by the DXDTS parameter.
"RTN","RORHL08",85,0)
 ;
"RTN","RORHL08",86,0)
 ; Variants of positional relationship of the existing time frames
"RTN","RORHL08",87,0)
 ; and the one that is being added to the list:
"RTN","RORHL08",88,0)
 ;
"RTN","RORHL08",89,0)
 ; (1)  +--------TMP                      +----------+
"RTN","RORHL08",90,0)
 ;                     STDT--------ENDT
"RTN","RORHL08",91,0)
 ;
"RTN","RORHL08",92,0)
 ; (2)           +--------TMP
"RTN","RORHL08",93,0)
 ;      STDT--------ENDT
"RTN","RORHL08",94,0)
 ;
"RTN","RORHL08",95,0)
 ; (3)  TMP--------+
"RTN","RORHL08",96,0)
 ;           STDT--------ENDT
"RTN","RORHL08",97,0)
 ;
"RTN","RORHL08",98,0)
 ; (4)         +--------+
"RTN","RORHL08",99,0)
 ;      STDT------------------ENDT
"RTN","RORHL08",100,0)
 ;
"RTN","RORHL08",101,0)
MERGEDTF(DXDTS,STDT,ENDT) ;
"RTN","RORHL08",102,0)
 N DATE,DXE,DXS,ENDT0,EXIT,STDT0,TMP  K DXDTS
"RTN","RORHL08",103,0)
 Q:STDT>ENDT
"RTN","RORHL08",104,0)
 S STDT0=STDT,(DXE,ENDT0)=ENDT
"RTN","RORHL08",105,0)
 ;--- Merge time frames if possible
"RTN","RORHL08",106,0)
 S DATE=$O(^TMP("RORPTF",$J,"DTF",ENDT)),EXIT=0
"RTN","RORHL08",107,0)
 F  S DATE=$O(^TMP("RORPTF",$J,"DTF",DATE),-1)  Q:DATE=""  D  Q:EXIT
"RTN","RORHL08",108,0)
 . S DXS=$P(^TMP("RORPTF",$J,"DTF",DATE),U,2)
"RTN","RORHL08",109,0)
 . I DXS<STDT  S EXIT=1  Q         ; (1)
"RTN","RORHL08",110,0)
 . S:DXS>ENDT ENDT=DXS,DFLT=0      ; (2)
"RTN","RORHL08",111,0)
 . S:DXS<DXE DXDTS(DXS)=DXS_U_DXE
"RTN","RORHL08",112,0)
 . S DXE=$P(^TMP("RORPTF",$J,"DTF",DATE),U)
"RTN","RORHL08",113,0)
 . S:DXE<STDT STDT=DXE,DFLT=0      ; (3)
"RTN","RORHL08",114,0)
 . K ^TMP("RORPTF",$J,"DTF",DATE)
"RTN","RORHL08",115,0)
 S:DXE>STDT0 DXDTS(STDT0)=STDT0_U_DXE
"RTN","RORHL08",116,0)
 ;--- Store the new time frame
"RTN","RORHL08",117,0)
 S ^TMP("RORPTF",$J,"DTF",STDT)=STDT_U_ENDT
"RTN","RORHL08",118,0)
 Q
"RTN","RORHL08",119,0)
 ;
"RTN","RORHL08",120,0)
 ;***** OBR SEGMENT BUILDER (INPATIENT)
"RTN","RORHL08",121,0)
 ;
"RTN","RORHL08",122,0)
 ; RORIEN        IEN of file #45
"RTN","RORHL08",123,0)
 ;
"RTN","RORHL08",124,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",125,0)
 ;
"RTN","RORHL08",126,0)
 ; Return Values:
"RTN","RORHL08",127,0)
 ;       <0  Error Code
"RTN","RORHL08",128,0)
 ;        0  Ok
"RTN","RORHL08",129,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",130,0)
 ;
"RTN","RORHL08",131,0)
OBR(RORIEN,RORDFN) ;
"RTN","RORHL08",132,0)
 N CS,ERRCNT,IENS,OBDT,RC,RORMSG,RORSEG,TMP
"RTN","RORHL08",133,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",134,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL08",135,0)
 S CS=$E(HLECH,1)
"RTN","RORHL08",136,0)
 ;
"RTN","RORHL08",137,0)
 ;--- Initialize the segment
"RTN","RORHL08",138,0)
 S RORSEG="OBR"
"RTN","RORHL08",139,0)
 ;
"RTN","RORHL08",140,0)
 ;--- OBR-3 - Order Number
"RTN","RORHL08",141,0)
 S $P(RORSEG,HLFS,4)=RORIEN
"RTN","RORHL08",142,0)
 ;
"RTN","RORHL08",143,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL08",144,0)
 S $P(RORSEG,HLFS,5)="IP"_CS_"Inpatient"_CS_"C4"
"RTN","RORHL08",145,0)
 ;
"RTN","RORHL08",146,0)
 ;--- OBR-7 -Observation Date/Time (KEY)
"RTN","RORHL08",147,0)
 S IENS=RORIEN_","
"RTN","RORHL08",148,0)
 S OBDT=$$GET1^DIQ(45,IENS,2,"I",,"RORMSG")
"RTN","RORHL08",149,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",150,0)
 ;---
"RTN","RORHL08",151,0)
 S OBDT=$$FMTHL7^XLFDT(OBDT)
"RTN","RORHL08",152,0)
 Q:OBDT'>0 $$ERROR^RORERR(-95,,,RORDFN,45,IENS,2)
"RTN","RORHL08",153,0)
 S $P(RORSEG,HLFS,8)=OBDT
"RTN","RORHL08",154,0)
 ;
"RTN","RORHL08",155,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL08",156,0)
 S $P(RORSEG,HLFS,25)="PHY"
"RTN","RORHL08",157,0)
 ;
"RTN","RORHL08",158,0)
 ;--- OBR-44 - Division
"RTN","RORHL08",159,0)
 S $P(RORSEG,HLFS,45)=$$SITE1^RORUTL03(CS)
"RTN","RORHL08",160,0)
 ;
"RTN","RORHL08",161,0)
 ;--- Store the segment
"RTN","RORHL08",162,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL08",163,0)
 Q ERRCNT
"RTN","RORHL08",164,0)
 ;
"RTN","RORHL08",165,0)
 ;***** PV1 SEGMENT BUILDER (INPATIENT)
"RTN","RORHL08",166,0)
 ;
"RTN","RORHL08",167,0)
 ; RORIEN        IEN of file #45
"RTN","RORHL08",168,0)
 ;
"RTN","RORHL08",169,0)
 ; RORDFN        DFN of Patient Record in File #2
"RTN","RORHL08",170,0)
 ;
"RTN","RORHL08",171,0)
 ; Return Values:
"RTN","RORHL08",172,0)
 ;       <0  Error Code
"RTN","RORHL08",173,0)
 ;        0  Ok
"RTN","RORHL08",174,0)
 ;      "S"  No inpatient data
"RTN","RORHL08",175,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL08",176,0)
 ;
"RTN","RORHL08",177,0)
PV1(RORIEN,RORDFN) ;
"RTN","RORHL08",178,0)
 N BUF,CS,ERRCNT,IENS,RC,RORBUF,RORMSG,RORSEG,TMP
"RTN","RORHL08",179,0)
 S (ERRCNT,RC)=0
"RTN","RORHL08",180,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL08",181,0)
 S CS=$E(HLECH,1)
"RTN","RORHL08",182,0)
 ;
"RTN","RORHL08",183,0)
 ;--- Load the data
"RTN","RORHL08",184,0)
 S IENS=RORIEN_","
"RTN","RORHL08",185,0)
 D GETS^DIQ(45,IENS,"2;70;71;72","I","RORBUF","RORMSG")
"RTN","RORHL08",186,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL08",187,0)
 . D DBS^RORERR("RORMSG",-9,,RORDFN,45,IENS)
"RTN","RORHL08",188,0)
 ;
"RTN","RORHL08",189,0)
 ;--- Initialize the segment
"RTN","RORHL08",190,0)
 S RORSEG="PV1"
"RTN","RORHL08",191,0)
 ;
"RTN","RORHL08",192,0)
 ;--- PV1-2 - Patient Class
"RTN","RORHL08",193,0)
 S $P(RORSEG,HLFS,3)="I"  ; I - Inpatient
"RTN","RORHL08",194,0)
 ;
"RTN","RORHL08",195,0)
 ;--- PV1-3 - Assigned Patient Location
"RTN","RORHL08",196,0)
 S TMP=$E($P($$SITE^VASITE,U,3),1,3)  ; Strip the suffix
"RTN","RORHL08",197,0)
 Q:TMP'>0 $$ERROR^RORERR(-100,,,,"No station number","$$SITE^VASITE")
"RTN","RORHL08",198,0)
 S $P(RORSEG,HLFS,4)=TMP
"RTN","RORHL08",199,0)
 ;
"RTN","RORHL08",200,0)
 ;--- PV1-6 - Prior Patient Location
"RTN","RORHL08",201,0)
 I $G(RORBUF(45,IENS,71,"I"))>0  D
"RTN","RORHL08",202,0)
 . S BUF=""
"RTN","RORHL08",203,0)
 . S $P(BUF,CS,3)=RORBUF(45,IENS,71,"I")
"RTN","RORHL08",204,0)
 . S TMP=$$EXTERNAL^DILFD(45,71,,$P(BUF,CS,3),"RORMSG")
"RTN","RORHL08",205,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL08",206,0)
 . . D DBS^RORERR("RORMSG",-99,,RORDFN,45,IENS)
"RTN","RORHL08",207,0)
 . S $P(BUF,CS,9)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL08",208,0)
 . S $P(RORSEG,HLFS,7)=BUF
"RTN","RORHL08",209,0)
 ;
"RTN","RORHL08",210,0)
 ;--- PV1-19 - Visit Number (KEY)
"RTN","RORHL08",211,0)
 S $P(RORSEG,HLFS,20)=RORIEN
"RTN","RORHL08",212,0)
 ;
"RTN","RORHL08",213,0)
 ;--- PV1-36 - Discharge Disposition
"RTN","RORHL08",214,0)
 S $P(RORSEG,HLFS,37)=$G(RORBUF(45,IENS,72,"I"))
"RTN","RORHL08",215,0)
 ;
"RTN","RORHL08",216,0)
 ;--- PV1-44 - Admit Date/Time (KEY)
"RTN","RORHL08",217,0)
 S TMP=$$FMTHL7^XLFDT($G(RORBUF(45,IENS,2,"I")))
"RTN","RORHL08",218,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,RORDFN,45,IENS,2)
"RTN","RORHL08",219,0)
 S $P(RORSEG,HLFS,45)=TMP
"RTN","RORHL08",220,0)
 ;
"RTN","RORHL08",221,0)
 ;--- PV1-45 - Discharge Date/Time
"RTN","RORHL08",222,0)
 S $P(RORSEG,HLFS,46)=$$FM2HL^RORHL7($G(RORBUF(45,IENS,70,"I")))
"RTN","RORHL08",223,0)
 ;
"RTN","RORHL08",224,0)
 ;--- Store the segment
"RTN","RORHL08",225,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL08",226,0)
 Q ERRCNT
"RTN","RORHL08",227,0)
 ;
"RTN","RORHL08",228,0)
 ;***** UPDATES TEMPORARY PTF INDEX
"RTN","RORHL08",229,0)
 ;
"RTN","RORHL08",230,0)
 ; STDT          Start date
"RTN","RORHL08",231,0)
 ; ENDT          End date
"RTN","RORHL08",232,0)
 ;
"RTN","RORHL08",233,0)
 ; This function updates the temporary PTF index with records
"RTN","RORHL08",234,0)
 ; closed in the provided time frame.
"RTN","RORHL08",235,0)
 ;
"RTN","RORHL08",236,0)
 ; Return Values:
"RTN","RORHL08",237,0)
 ;       <0  Error Code
"RTN","RORHL08",238,0)
 ;        0  Ok
"RTN","RORHL08",239,0)
 ;
"RTN","RORHL08",240,0)
UPDNDX(STDT,ENDT) ;
"RTN","RORHL08",241,0)
 N DATE,DXDTS,IDX,IEN,PATIEN,RC,RORMSG,TMP
"RTN","RORHL08",242,0)
 ;--- Get time frames that should be processed
"RTN","RORHL08",243,0)
 D MERGEDTF(.DXDTS,STDT,ENDT)  Q:$D(DXDTS)<10 0
"RTN","RORHL08",244,0)
 ;--- Update the index
"RTN","RORHL08",245,0)
 S IDX=0
"RTN","RORHL08",246,0)
 F  S IDX=$O(DXDTS(IDX))  Q:IDX'>0  D
"RTN","RORHL08",247,0)
 . S STDT=$P(DXDTS(IDX),U),ENDT=$P(DXDTS(IDX),U,2)
"RTN","RORHL08",248,0)
 . S DATE=$O(^DGP(45.84,"AC",STDT),-1)
"RTN","RORHL08",249,0)
 . F  S DATE=$O(^DGP(45.84,"AC",DATE))  Q:'DATE!(DATE'<ENDT)  D
"RTN","RORHL08",250,0)
 . . S IEN=0
"RTN","RORHL08",251,0)
 . . F  S IEN=$O(^DGP(45.84,"AC",DATE,IEN))  Q:IEN'>0  D
"RTN","RORHL08",252,0)
 . . . ;--- Patient IEN (entries of file #45.84 are DINUM'ed)
"RTN","RORHL08",253,0)
 . . . S PATIEN=$$GET1^DIQ(45,IEN,.01,"I",,"RORMSG")
"RTN","RORHL08",254,0)
 . . . I $G(DIERR)  D DBS^RORERR("RORMSG",-99,,,45,IEN)  Q
"RTN","RORHL08",255,0)
 . . . ;--- Create index entry
"RTN","RORHL08",256,0)
 . . . S:PATIEN>0 ^TMP("RORPTF",$J,"PDI",PATIEN,DATE,IEN)=""
"RTN","RORHL08",257,0)
 ;---
"RTN","RORHL08",258,0)
 Q 0
"RTN","RORHL10")
0^17^B54992755
"RTN","RORHL10",1,0)
RORHL10 ;HOIFO/BH - HL7 SURGICAL PATHOLOGY DATA: OBR,OBX ; 1/20/05 1:06pm
"RTN","RORHL10",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL10",3,0)
 ;
"RTN","RORHL10",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL10",5,0)
 ;
"RTN","RORHL10",6,0)
 ; #525          Read access to the multiple #63.08 (controlled)
"RTN","RORHL10",7,0)
 ; #2503         LRDFN^LR7OR1 (controlled)
"RTN","RORHL10",8,0)
 ; #4343         $$SPATH^LA7UTL03 (controlled)
"RTN","RORHL10",9,0)
 ;
"RTN","RORHL10",10,0)
 Q
"RTN","RORHL10",11,0)
 ;
"RTN","RORHL10",12,0)
 ;***** SEARCHES FOR SURGICAL PATHOLOGY DATA
"RTN","RORHL10",13,0)
 ;
"RTN","RORHL10",14,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL10",15,0)
 ;
"RTN","RORHL10",16,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL10",17,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL10",18,0)
 ;
"RTN","RORHL10",19,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL10",20,0)
 ;                 0  completion/result date (default)
"RTN","RORHL10",21,0)
 ;                 1  specimen collection date
"RTN","RORHL10",22,0)
 ;
"RTN","RORHL10",23,0)
 ; Return Values:
"RTN","RORHL10",24,0)
 ;       <0  Error code
"RTN","RORHL10",25,0)
 ;        0  Ok
"RTN","RORHL10",26,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",27,0)
 ;
"RTN","RORHL10",28,0)
EN1(RORDFN,RORSTDT,RORENDT,CDSMODE) ;
"RTN","RORHL10",29,0)
 N ERRCNT,LRDFN,RC
"RTN","RORHL10",30,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",31,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL10",32,0)
 ;
"RTN","RORHL10",33,0)
 S LRDFN=+$$LRDFN^LR7OR1(RORDFN)  Q:'LRDFN 0
"RTN","RORHL10",34,0)
 ;
"RTN","RORHL10",35,0)
 S RC=$S($G(CDSMODE):$$CD(),1:$$RAD())
"RTN","RORHL10",36,0)
 S:RC ERRCNT=ERRCNT+1
"RTN","RORHL10",37,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL10",38,0)
 ;
"RTN","RORHL10",39,0)
 ;***** SEARCHES BY SPECIMEN COLLECTION DATE
"RTN","RORHL10",40,0)
CD() ;
"RTN","RORHL10",41,0)
 N ENDT,ERRCNT,IDT,STDT
"RTN","RORHL10",42,0)
 S ERRCNT=0
"RTN","RORHL10",43,0)
 S STDT=9999999-RORSTDT
"RTN","RORHL10",44,0)
 S ENDT=9999999-RORENDT
"RTN","RORHL10",45,0)
 ;---
"RTN","RORHL10",46,0)
 S IDT=$O(^LR(LRDFN,"SP",STDT))
"RTN","RORHL10",47,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT),-1)  Q:'IDT!(IDT'>ENDT)  D
"RTN","RORHL10",48,0)
 . S:$$OBROBX(IDT,LRDFN) ERRCNT=ERRCNT+1
"RTN","RORHL10",49,0)
 Q ERRCNT
"RTN","RORHL10",50,0)
 ;
"RTN","RORHL10",51,0)
 ;***** SEARCHES BY COMPLETION (RESULT) DATE
"RTN","RORHL10",52,0)
RAD() ;
"RTN","RORHL10",53,0)
 N ERRCNT,IDT,RCDT
"RTN","RORHL10",54,0)
 S ERRCNT=0
"RTN","RORHL10",55,0)
 ;---
"RTN","RORHL10",56,0)
 S IDT=0
"RTN","RORHL10",57,0)
 F  S IDT=$O(^LR(LRDFN,"SP",IDT))  Q:IDT'>0  D
"RTN","RORHL10",58,0)
 . S RCDT=$P($G(^LR(LRDFN,"SP",IDT,0)),U,3)
"RTN","RORHL10",59,0)
 . I RCDT'<RORSTDT,RCDT<RORENDT  S:$$OBROBX(IDT,LRDFN) ERRCNT=ERRCNT+1
"RTN","RORHL10",60,0)
 Q ERRCNT
"RTN","RORHL10",61,0)
 ; 
"RTN","RORHL10",62,0)
 ;***** CREATES OBR AND OBX SEGMENTS
"RTN","RORHL10",63,0)
OBROBX(RORIDT,LRDFN) ;
"RTN","RORHL10",64,0)
 N ERRCNT,RC
"RTN","RORHL10",65,0)
 S ERRCNT=0
"RTN","RORHL10",66,0)
 ;---
"RTN","RORHL10",67,0)
 S RC=$$OBR(RORIDT_","_LRDFN_",")
"RTN","RORHL10",68,0)
 I RC  S ERRCNT=ERRCNT+1  Q:RC<0 RC
"RTN","RORHL10",69,0)
 ;---
"RTN","RORHL10",70,0)
 S RC=$$OBX(LRDFN,RORIDT)
"RTN","RORHL10",71,0)
 I RC  S ERRCNT=ERRCNT+1  Q:RC<0 RC
"RTN","RORHL10",72,0)
 ;---
"RTN","RORHL10",73,0)
 Q ERRCNT
"RTN","RORHL10",74,0)
 ;
"RTN","RORHL10",75,0)
 ;***** OBR SEGMENT BUILDER
"RTN","RORHL10",76,0)
 ;
"RTN","RORHL10",77,0)
 ; RORIENS       IENS of SP Entry
"RTN","RORHL10",78,0)
 ;
"RTN","RORHL10",79,0)
 ; Return Values:
"RTN","RORHL10",80,0)
 ;       <0  Error code
"RTN","RORHL10",81,0)
 ;        0  Ok
"RTN","RORHL10",82,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",83,0)
 ;
"RTN","RORHL10",84,0)
OBR(RORIENS) ;
"RTN","RORHL10",85,0)
 N CS,ERRCNT,FLDS,IEN,RC,RORMSG,ROROUT,RORSEG,TMP
"RTN","RORHL10",86,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",87,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL10",88,0)
 S CS=$E(HLECH,1)
"RTN","RORHL10",89,0)
 ;--- Check the parameters
"RTN","RORHL10",90,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL10",91,0)
 ;
"RTN","RORHL10",92,0)
 ;--- Load the data (with a temporary fix for invalid
"RTN","RORHL10",93,0)
 ;--- output transform of the .01 field - ROR*1*8)
"RTN","RORHL10",94,0)
 D GETS^DIQ(63.08,RORIENS,".01","I","ROROUT","RORMSG")
"RTN","RORHL10",95,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL10",96,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL10",97,0)
 D GETS^DIQ(63.08,RORIENS,".03;.06;.07;.08","IE","ROROUT","RORMSG")
"RTN","RORHL10",98,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL10",99,0)
 . D DBS^RORERR("RORMSG",-9,,,63.08,RORIENS)
"RTN","RORHL10",100,0)
 ;
"RTN","RORHL10",101,0)
 ;--- Initialize the segment
"RTN","RORHL10",102,0)
 S RORSEG="OBR"
"RTN","RORHL10",103,0)
 ;
"RTN","RORHL10",104,0)
 ;--- OBR-3 - Surgical Pathology Acc #
"RTN","RORHL10",105,0)
 I $G(ROROUT(63.08,RORIENS,.06,"E"))=""  D  Q RC
"RTN","RORHL10",106,0)
 . S RC=$$ERROR^RORERR(-95,,,,63.08,RORIENS,.06)
"RTN","RORHL10",107,0)
 S $P(RORSEG,HLFS,4)=ROROUT(63.08,RORIENS,.06,"E")
"RTN","RORHL10",108,0)
 ;
"RTN","RORHL10",109,0)
 ;--- OBR-4 - SP CPT Code
"RTN","RORHL10",110,0)
 S $P(RORSEG,HLFS,5)="88300"_CS_"LEVEL I - SURGICAL PAT"_CS_"C4"
"RTN","RORHL10",111,0)
 ;
"RTN","RORHL10",112,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL10",113,0)
 S TMP=$$FMTHL7^XLFDT($G(ROROUT(63.08,RORIENS,.01,"I")))
"RTN","RORHL10",114,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,63.08,RORIENS,.01)
"RTN","RORHL10",115,0)
 S $P(RORSEG,HLFS,8)=TMP
"RTN","RORHL10",116,0)
 ;
"RTN","RORHL10",117,0)
 ;--- OBR-8 - Date Report Completed
"RTN","RORHL10",118,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.03,"I"))
"RTN","RORHL10",119,0)
 S $P(RORSEG,HLFS,9)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL10",120,0)
 ;
"RTN","RORHL10",121,0)
 ;--- OBR-16 - Surgeon/Physican
"RTN","RORHL10",122,0)
 S $P(RORSEG,HLFS,17)=$G(ROROUT(63.08,RORIENS,.07,"I"))
"RTN","RORHL10",123,0)
 ;
"RTN","RORHL10",124,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL10",125,0)
 S $P(RORSEG,HLFS,25)="SP"
"RTN","RORHL10",126,0)
 ;
"RTN","RORHL10",127,0)
 ; OBR-44 - Divsion
"RTN","RORHL10",128,0)
 S TMP=$G(ROROUT(63.08,RORIENS,.08,"I"))
"RTN","RORHL10",129,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL10",130,0)
 S $P(RORSEG,HLFS,45)=$$DIV44^RORHLUT1(IEN,1,CS)
"RTN","RORHL10",131,0)
 ;
"RTN","RORHL10",132,0)
 ;--- Store the segment
"RTN","RORHL10",133,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL10",134,0)
 Q ERRCNT
"RTN","RORHL10",135,0)
 ;
"RTN","RORHL10",136,0)
 ;***** OBX SEGMENT BUILDER
"RTN","RORHL10",137,0)
 ;
"RTN","RORHL10",138,0)
 ; LRDFN         Patient Lab DFN
"RTN","RORHL10",139,0)
 ; RORIENS       IENS of SP Entry
"RTN","RORHL10",140,0)
 ;
"RTN","RORHL10",141,0)
 ; Return Values:
"RTN","RORHL10",142,0)
 ;       <0  Error code
"RTN","RORHL10",143,0)
 ;        0  Ok
"RTN","RORHL10",144,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL10",145,0)
 ;
"RTN","RORHL10",146,0)
OBX(LRDFN,RORIENS) ;
"RTN","RORHL10",147,0)
 N CS,ERRCNT,RC,RORMSG,ROROUT,RORSEG,RORTMP,TMP
"RTN","RORHL10",148,0)
 S (ERRCNT,RC)=0
"RTN","RORHL10",149,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL10",150,0)
 S CS=$E(HLECH)
"RTN","RORHL10",151,0)
 ;---
"RTN","RORHL10",152,0)
 S RORTMP=$NA(^TMP("RORHL10",$J))  K @RORTMP
"RTN","RORHL10",153,0)
 ;---
"RTN","RORHL10",154,0)
 I $$SPATH^LA7UTL03(LRDFN,RORIENS,RORTMP,"RORMSG")  D
"RTN","RORHL10",155,0)
 . D SPECIMEN
"RTN","RORHL10",156,0)
 . D HIST
"RTN","RORHL10",157,0)
 . D PRED
"RTN","RORHL10",158,0)
 . D OPD
"RTN","RORHL10",159,0)
 . D POSTD
"RTN","RORHL10",160,0)
 . D GROSSD
"RTN","RORHL10",161,0)
 . D MICROD
"RTN","RORHL10",162,0)
 . D SURGPATH
"RTN","RORHL10",163,0)
 . D ICD
"RTN","RORHL10",164,0)
 E  D:$D(RORMSG)>1
"RTN","RORHL10",165,0)
 . N I,INFO  S TMP=""
"RTN","RORHL10",166,0)
 . F I=1:1  S TMP=$O(RORMSG(TMP))  Q:TMP=""  S INFO(I)=RORMSG(TMP)
"RTN","RORHL10",167,0)
 . S RC=$$ERROR^RORERR(-56,,.INFO,,0,"$$SPATH^LA7UTL03")
"RTN","RORHL10",168,0)
 ;---
"RTN","RORHL10",169,0)
 K @RORTMP
"RTN","RORHL10",170,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL10",171,0)
 ;
"RTN","RORHL10",172,0)
 ;***** MAKES SPECIMEN OBX
"RTN","RORHL10",173,0)
SPECIMEN ;
"RTN","RORHL10",174,0)
 N INDEX,RORSPEC,SPECID
"RTN","RORHL10",175,0)
 S INDEX="",SPECID=$$SEGID("SPEC","Specimen",CS)
"RTN","RORHL10",176,0)
 F  S INDEX=$O(@RORTMP@("SPEC",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",177,0)
 . S RORSPEC=$G(@RORTMP@("SPEC",INDEX))
"RTN","RORHL10",178,0)
 . D:RORSPEC'="" SETOBX(SPECID,RORSPEC)
"RTN","RORHL10",179,0)
 Q
"RTN","RORHL10",180,0)
 ;
"RTN","RORHL10",181,0)
 ;*****
"RTN","RORHL10",182,0)
HIST ;
"RTN","RORHL10",183,0)
 N HISTID,INDEX,RORHIST
"RTN","RORHL10",184,0)
 S INDEX="",HISTID=$$SEGID("BCH","Brief clinical History",CS)
"RTN","RORHL10",185,0)
 F  S INDEX=$O(@RORTMP@("CHIS",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",186,0)
 . S RORHIST=$G(@RORTMP@("CHIS",INDEX))
"RTN","RORHL10",187,0)
 . D:RORHIST'="" SETOBX(HISTID,RORHIST)
"RTN","RORHL10",188,0)
 Q
"RTN","RORHL10",189,0)
 ;
"RTN","RORHL10",190,0)
 ;*****
"RTN","RORHL10",191,0)
PRED ;
"RTN","RORHL10",192,0)
 N INDEX,PREDID,RORPRED
"RTN","RORHL10",193,0)
 S INDEX="",PREDID=$$SEGID("PDIAG","Preoperative Diagnosis",CS)
"RTN","RORHL10",194,0)
 F  S INDEX=$O(@RORTMP@("PREDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",195,0)
 . S RORPRED=$G(@RORTMP@("PREDX",INDEX))
"RTN","RORHL10",196,0)
 . D:RORPRED'="" SETOBX(PREDID,RORPRED)
"RTN","RORHL10",197,0)
 Q
"RTN","RORHL10",198,0)
 ;*****
"RTN","RORHL10",199,0)
OPD ;
"RTN","RORHL10",200,0)
 N INDEX,OPDID,ROROPD
"RTN","RORHL10",201,0)
 S INDEX="",OPDID=$$SEGID("OF","Operative Findings",CS)
"RTN","RORHL10",202,0)
 F  S INDEX=$O(@RORTMP@("OPERDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",203,0)
 . S ROROPD=$G(@RORTMP@("OPERDX",INDEX))
"RTN","RORHL10",204,0)
 . D:ROROPD'="" SETOBX(OPDID,ROROPD)
"RTN","RORHL10",205,0)
 Q
"RTN","RORHL10",206,0)
 ;
"RTN","RORHL10",207,0)
 ;*****
"RTN","RORHL10",208,0)
POSTD ;
"RTN","RORHL10",209,0)
 N INDEX,POSTID,RORPOST
"RTN","RORHL10",210,0)
 S INDEX="",POSTID=$$SEGID("POPDIAG","Postoperative Diagnosis",CS)
"RTN","RORHL10",211,0)
 F  S INDEX=$O(@RORTMP@("POSTDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",212,0)
 . S RORPOST=$G(@RORTMP@("POSTDX",INDEX))
"RTN","RORHL10",213,0)
 . D:RORPOST'="" SETOBX(POSTID,RORPOST)
"RTN","RORHL10",214,0)
 Q
"RTN","RORHL10",215,0)
 ;***** GROSS DESCRIPTION DATA
"RTN","RORHL10",216,0)
GROSSD ;
"RTN","RORHL10",217,0)
 N GROSSID,INDEX,RORGROSS
"RTN","RORHL10",218,0)
 S INDEX="",GROSSID=$$SEGID("GDESC","Gross Decription",CS)
"RTN","RORHL10",219,0)
 F  S INDEX=$O(@RORTMP@("GROSSD",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",220,0)
 . S RORGROSS=$G(@RORTMP@("GROSSD",INDEX))
"RTN","RORHL10",221,0)
 . D:RORGROSS'="" SETOBX(GROSSID,RORGROSS)
"RTN","RORHL10",222,0)
 Q
"RTN","RORHL10",223,0)
 ;
"RTN","RORHL10",224,0)
 ;***** MICROSCOPIC DESCRIPTION DATA
"RTN","RORHL10",225,0)
MICROD ;
"RTN","RORHL10",226,0)
 N INDEX,MICROID,RORMICRO
"RTN","RORHL10",227,0)
 S INDEX="",MICROID=$$SEGID("MDESC","Microscopic Description",CS)
"RTN","RORHL10",228,0)
 F  S INDEX=$O(@RORTMP@("MICROD",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",229,0)
 . S RORMICRO=$G(@RORTMP@("MICROD",INDEX))
"RTN","RORHL10",230,0)
 . D:RORMICRO'="" SETOBX(MICROID,RORMICRO)
"RTN","RORHL10",231,0)
 Q
"RTN","RORHL10",232,0)
 ;
"RTN","RORHL10",233,0)
 ;***** SURGICAL PATHOLOGY
"RTN","RORHL10",234,0)
SURGPATH ;
"RTN","RORHL10",235,0)
 N INDEX,RORSURGP,SURGPID
"RTN","RORHL10",236,0)
 S INDEX=""
"RTN","RORHL10",237,0)
 S SURGPID=$$SEGID("SPDIAG","Surgical Pathology Diagnosis",CS)
"RTN","RORHL10",238,0)
 F  S INDEX=$O(@RORTMP@("SURGP",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",239,0)
 . S RORSURGP=$G(@RORTMP@("SURGP",INDEX))
"RTN","RORHL10",240,0)
 . D:RORSURGP'="" SETOBX(SURGPID,RORSURGP)
"RTN","RORHL10",241,0)
 Q
"RTN","RORHL10",242,0)
 ;
"RTN","RORHL10",243,0)
 ;***** ICD-9
"RTN","RORHL10",244,0)
ICD ;
"RTN","RORHL10",245,0)
 N ICDID,INDEX,RORICD
"RTN","RORHL10",246,0)
 S INDEX="",ICDID=$$SEGID("ICD9","ICD9",CS)
"RTN","RORHL10",247,0)
 F  S INDEX=$O(@RORTMP@("ICD9",INDEX))  Q:INDEX=""  D
"RTN","RORHL10",248,0)
 . S RORICD=$G(@RORTMP@("ICD9",INDEX))
"RTN","RORHL10",249,0)
 . D:RORICD'="" SETOBX(ICDID,RORICD)
"RTN","RORHL10",250,0)
 Q
"RTN","RORHL10",251,0)
 ;
"RTN","RORHL10",252,0)
 ;***** CONSTRUCTS SEGMENT IDENTIFIER
"RTN","RORHL10",253,0)
SEGID(PONE,PTWO,CS) ;
"RTN","RORHL10",254,0)
 Q PONE_CS_PTWO_CS_"VA080"
"RTN","RORHL10",255,0)
 ;
"RTN","RORHL10",256,0)
 ;***** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL10",257,0)
SETOBX(PIECE3,PIECE5) ;
"RTN","RORHL10",258,0)
 N RORSEG
"RTN","RORHL10",259,0)
 ;--- Initialize the segment
"RTN","RORHL10",260,0)
 S RORSEG="OBX"
"RTN","RORHL10",261,0)
 ;--- OBX-2
"RTN","RORHL10",262,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL10",263,0)
 ;---
"RTN","RORHL10",264,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL10",265,0)
 S $P(RORSEG,HLFS,6)=$$ESCAPE^RORHL7(PIECE5)
"RTN","RORHL10",266,0)
 ;--- OBX-11
"RTN","RORHL10",267,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL10",268,0)
 ;--- Store the segment
"RTN","RORHL10",269,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL10",270,0)
 Q
"RTN","RORHL11")
0^16^B42608729
"RTN","RORHL11",1,0)
RORHL11 ;HOIFO/BH - HL7 CYTOPATHOLOGY DATA: OBR,OBX ; 10/13/04 9:22am
"RTN","RORHL11",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL11",3,0)
 ;
"RTN","RORHL11",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL11",5,0)
 ;
"RTN","RORHL11",6,0)
 ; #2503         LRDFN^LR7OR1 (controlled)
"RTN","RORHL11",7,0)
 ; #4344         $$CYPATH^LA7UTL02 (controlled)
"RTN","RORHL11",8,0)
 ;
"RTN","RORHL11",9,0)
 Q
"RTN","RORHL11",10,0)
 ;
"RTN","RORHL11",11,0)
 ;***** SEARCHES FOR CYTOPATHOLOGY DATA
"RTN","RORHL11",12,0)
 ;
"RTN","RORHL11",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL11",14,0)
 ;
"RTN","RORHL11",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL11",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL11",17,0)
 ;
"RTN","RORHL11",18,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL11",19,0)
 ;                 0  completion/result date (default)
"RTN","RORHL11",20,0)
 ;                 1  specimen collection date
"RTN","RORHL11",21,0)
 ;
"RTN","RORHL11",22,0)
 ; Return Values:
"RTN","RORHL11",23,0)
 ;       <0  Error code
"RTN","RORHL11",24,0)
 ;        0  Ok
"RTN","RORHL11",25,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",26,0)
 ;
"RTN","RORHL11",27,0)
 ; The function uses the ^TMP("RORHL11",$J) global node.
"RTN","RORHL11",28,0)
 ;
"RTN","RORHL11",29,0)
EN1(RORDFN,RORSTDT,RORENDT,CDSMODE,RORPTR,RORFILE,HLFS,HLECH) ;
"RTN","RORHL11",30,0)
 N ERRCNT,LRDFN,RC,RORIEN
"RTN","RORHL11",31,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",32,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL11",33,0)
 ;
"RTN","RORHL11",34,0)
 S LRDFN=+$$LRDFN^LR7OR1(RORDFN)  Q:'LRDFN 0
"RTN","RORHL11",35,0)
 ;
"RTN","RORHL11",36,0)
 S RC=$S($G(CDSMODE):$$CD(),1:$$RAD())
"RTN","RORHL11",37,0)
 S:RC ERRCNT=ERRCNT+1
"RTN","RORHL11",38,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",39,0)
 ;
"RTN","RORHL11",40,0)
 ;***** SEARCHES BY SPECIMEN COLLECTION DATE
"RTN","RORHL11",41,0)
CD() ;
"RTN","RORHL11",42,0)
 N ENDT,ERRCNT,IDT,STDT
"RTN","RORHL11",43,0)
 S ERRCNT=0
"RTN","RORHL11",44,0)
 S STDT=9999999-RORSTDT
"RTN","RORHL11",45,0)
 S ENDT=9999999-RORENDT
"RTN","RORHL11",46,0)
 S IDT=$O(^LR(LRDFN,"CY",STDT))
"RTN","RORHL11",47,0)
 F  S IDT=$O(^LR(LRDFN,"CY",IDT),-1)  Q:'IDT!(IDT'>ENDT)  D
"RTN","RORHL11",48,0)
 . S:$$OBROBX(IDT) ERRCNT=ERRCNT+1
"RTN","RORHL11",49,0)
 Q ERRCNT
"RTN","RORHL11",50,0)
 ;
"RTN","RORHL11",51,0)
 ;***** SEARCHES BY COMPLETION (RESULT) DATE
"RTN","RORHL11",52,0)
RAD() ;
"RTN","RORHL11",53,0)
 N ERRCNT,IDT,RCDT
"RTN","RORHL11",54,0)
 S (ERRCNT,IDT)=0
"RTN","RORHL11",55,0)
 F  S IDT=$O(^LR(LRDFN,"CY",IDT))  Q:'IDT  D
"RTN","RORHL11",56,0)
 . S RCDT=$P($G(^LR(LRDFN,"CY",IDT,0)),U,3)
"RTN","RORHL11",57,0)
 . I RCDT'<STDT,RCDT<ENDT  S:$$OBROBX(IDT) ERRCNT=ERRCNT+1
"RTN","RORHL11",58,0)
 Q ERRCNT
"RTN","RORHL11",59,0)
 ;
"RTN","RORHL11",60,0)
 ;***** CREATES OBR AND OBX SEGMENTS
"RTN","RORHL11",61,0)
OBROBX(RORIDT) ;
"RTN","RORHL11",62,0)
 N ERRCNT,RC,RORMSG,RORTMP,TMP
"RTN","RORHL11",63,0)
 S ERRCNT=0
"RTN","RORHL11",64,0)
 ;---
"RTN","RORHL11",65,0)
 S RORTMP=$NA(^TMP("RORHL11",$J))  K @RORTMP
"RTN","RORHL11",66,0)
 ;---
"RTN","RORHL11",67,0)
 I $$CYPATH^LA7UTL02(LRDFN,RORIDT,RORTMP,"RORMSG")  D
"RTN","RORHL11",68,0)
 . S RC=$$OBR(RORTMP,RORIDT)
"RTN","RORHL11",69,0)
 . I RC  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL11",70,0)
 . ;---
"RTN","RORHL11",71,0)
 . S RC=$$OBX(RORTMP)
"RTN","RORHL11",72,0)
 . I RC  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL11",73,0)
 E  D:$D(RORMSG)>1
"RTN","RORHL11",74,0)
 . N I,INFO  S TMP=""
"RTN","RORHL11",75,0)
 . F I=1:1  S TMP=$O(RORMSG(TMP))  Q:TMP=""  S INFO(I)=RORMSG(TMP)
"RTN","RORHL11",76,0)
 . S RC=$$ERROR^RORERR(-56,,.INFO,,0,"$$CYPATH^LA7UTL02")
"RTN","RORHL11",77,0)
 ;---
"RTN","RORHL11",78,0)
 K @RORTMP
"RTN","RORHL11",79,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",80,0)
 ;
"RTN","RORHL11",81,0)
 ;***** CYTOPATHOLOGY OBR SEGMENT BUILDER
"RTN","RORHL11",82,0)
 ;
"RTN","RORHL11",83,0)
 ; RORTMP        Closed root of the array holding lab data
"RTN","RORHL11",84,0)
 ; RORIEN        IEN of Cyto Visit
"RTN","RORHL11",85,0)
 ;
"RTN","RORHL11",86,0)
 ; Return Values:
"RTN","RORHL11",87,0)
 ;       <0  Error code
"RTN","RORHL11",88,0)
 ;        0  Ok
"RTN","RORHL11",89,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",90,0)
 ;
"RTN","RORHL11",91,0)
OBR(RORTMP,RORIEN) ;
"RTN","RORHL11",92,0)
 N CS,CPA,ERRCNT,RC,RORSEG,TMP
"RTN","RORHL11",93,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",94,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL11",95,0)
 S CS=$E(HLECH,1)
"RTN","RORHL11",96,0)
 ;
"RTN","RORHL11",97,0)
 ;--- Initialize the segment
"RTN","RORHL11",98,0)
 S RORSEG="OBR"
"RTN","RORHL11",99,0)
 ;
"RTN","RORHL11",100,0)
 ;--- OBR-3 - Cyto Path Acc #
"RTN","RORHL11",101,0)
 S CPA=$P($G(@RORTMP@("DEMO",RORIEN)),U,2)  Q:CPA="" 0
"RTN","RORHL11",102,0)
 S $P(RORSEG,HLFS,4)=CPA
"RTN","RORHL11",103,0)
 ;
"RTN","RORHL11",104,0)
 ;--- OBR-4
"RTN","RORHL11",105,0)
 S $P(RORSEG,HLFS,5)="88108"_CS_"CYTOPATHOLOGY, CONCENT"_CS_"C4"
"RTN","RORHL11",106,0)
 ;
"RTN","RORHL11",107,0)
 ;--- OBR-7 - Date/Time Specimen Taken
"RTN","RORHL11",108,0)
 S TMP=$$FMTHL7^XLFDT($P(@RORTMP@("DEMO",RORIEN),U))
"RTN","RORHL11",109,0)
 I TMP'>0  D  Q RC
"RTN","RORHL11",110,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No specimen date","$$CYPATH^LA7UTL02")
"RTN","RORHL11",111,0)
 S $P(RORSEG,HLFS,8)=TMP
"RTN","RORHL11",112,0)
 ;
"RTN","RORHL11",113,0)
 ;--- OBR-24 - Service Section ID
"RTN","RORHL11",114,0)
 S $P(RORSEG,HLFS,25)="CP"
"RTN","RORHL11",115,0)
 ;
"RTN","RORHL11",116,0)
 ;--- OBR-44 - Divsion
"RTN","RORHL11",117,0)
 S $P(RORSEG,HLFS,45)=$$SITE1^RORUTL03(CS)
"RTN","RORHL11",118,0)
 ;
"RTN","RORHL11",119,0)
 ;--- Store the segment
"RTN","RORHL11",120,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL11",121,0)
 Q ERRCNT
"RTN","RORHL11",122,0)
 ;
"RTN","RORHL11",123,0)
 ;***** CYTOPATHOLOGY OBX SEGMENT BUILDER
"RTN","RORHL11",124,0)
 ;
"RTN","RORHL11",125,0)
 ; RORTMP        Closed root of the array holding lab data
"RTN","RORHL11",126,0)
 ;
"RTN","RORHL11",127,0)
 ; Return Values:
"RTN","RORHL11",128,0)
 ;       <0  Error code
"RTN","RORHL11",129,0)
 ;        0  Ok
"RTN","RORHL11",130,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL11",131,0)
 ;
"RTN","RORHL11",132,0)
OBX(RORTMP) ;
"RTN","RORHL11",133,0)
 N CS,ERRCNT,RC,TMP
"RTN","RORHL11",134,0)
 S (ERRCNT,RC)=0
"RTN","RORHL11",135,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL11",136,0)
 S CS=$E(HLECH)
"RTN","RORHL11",137,0)
 ;
"RTN","RORHL11",138,0)
 D:$D(@RORTMP@("SPEC")) SPECIMEN
"RTN","RORHL11",139,0)
 D:$D(@RORTMP@("CHIS")) HIST
"RTN","RORHL11",140,0)
 D:$D(@RORTMP@("PREDX")) PRED
"RTN","RORHL11",141,0)
 D:$D(@RORTMP@("OPERDX")) OPD
"RTN","RORHL11",142,0)
 D:$D(@RORTMP@("POSTDX")) POSTD
"RTN","RORHL11",143,0)
 D:$D(@RORTMP@("MICRO")) MICRO
"RTN","RORHL11",144,0)
 D:$D(@RORTMP@("CYTODX")) CYTOPATH
"RTN","RORHL11",145,0)
 D:$D(@RORTMP@("ICD9")) ICD
"RTN","RORHL11",146,0)
 ;
"RTN","RORHL11",147,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL11",148,0)
 ;
"RTN","RORHL11",149,0)
 ;***** MAKES SPECIMEN OBX
"RTN","RORHL11",150,0)
SPECIMEN ;
"RTN","RORHL11",151,0)
 N INDEX,RORSPEC,SPECID
"RTN","RORHL11",152,0)
 S SPECID=$$SEGID("SPEC","Specimen",CS)
"RTN","RORHL11",153,0)
 S INDEX=""
"RTN","RORHL11",154,0)
 F  S INDEX=$O(@RORTMP@("SPEC",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",155,0)
 . S RORSPEC=$G(@RORTMP@("SPEC",INDEX))
"RTN","RORHL11",156,0)
 . D:RORSPEC'="" SETOBX(SPECID,RORSPEC)
"RTN","RORHL11",157,0)
 Q
"RTN","RORHL11",158,0)
 ;
"RTN","RORHL11",159,0)
 ;*****
"RTN","RORHL11",160,0)
HIST ;
"RTN","RORHL11",161,0)
 N INDEX,HISTID,RORHIST
"RTN","RORHL11",162,0)
 S HISTID=$$SEGID("BCH","Brief clinical History",CS)
"RTN","RORHL11",163,0)
 S INDEX=""
"RTN","RORHL11",164,0)
 F  S INDEX=$O(@RORTMP@("CHIS",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",165,0)
 . S RORHIST=$G(@RORTMP@("CHIS",INDEX))
"RTN","RORHL11",166,0)
 . D:RORHIST'="" SETOBX(HISTID,RORHIST)
"RTN","RORHL11",167,0)
 Q
"RTN","RORHL11",168,0)
 ;
"RTN","RORHL11",169,0)
 ;*****
"RTN","RORHL11",170,0)
PRED ;
"RTN","RORHL11",171,0)
 N INDEX,PREDID,RORPRED
"RTN","RORHL11",172,0)
 S PREDID=$$SEGID("PDIAG","Preoperative Diagnosis",CS)
"RTN","RORHL11",173,0)
 S INDEX=""
"RTN","RORHL11",174,0)
 F  S INDEX=$O(@RORTMP@("PREDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",175,0)
 . S RORPRED=$G(@RORTMP@("PREDX",INDEX))
"RTN","RORHL11",176,0)
 . D:RORPRED'="" SETOBX(PREDID,RORPRED)
"RTN","RORHL11",177,0)
 Q
"RTN","RORHL11",178,0)
 ;
"RTN","RORHL11",179,0)
 ;*****
"RTN","RORHL11",180,0)
OPD ;
"RTN","RORHL11",181,0)
 N INDEX,OPDID,ROROPD
"RTN","RORHL11",182,0)
 S OPDID=$$SEGID("OF","Operative Findings",CS)
"RTN","RORHL11",183,0)
 S INDEX=""
"RTN","RORHL11",184,0)
 F  S INDEX=$O(@RORTMP@("OPERDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",185,0)
 . S ROROPD=$G(@RORTMP@("OPERDX",INDEX))
"RTN","RORHL11",186,0)
 . D:ROROPD'="" SETOBX(OPDID,ROROPD)
"RTN","RORHL11",187,0)
 Q
"RTN","RORHL11",188,0)
 ;
"RTN","RORHL11",189,0)
 ;*****
"RTN","RORHL11",190,0)
POSTD ;
"RTN","RORHL11",191,0)
 N INDEX,POSTID,RORPOST
"RTN","RORHL11",192,0)
 S POSTID=$$SEGID("POPDIAG","Postoperative Diagnosis",CS)
"RTN","RORHL11",193,0)
 S INDEX=""
"RTN","RORHL11",194,0)
 F  S INDEX=$O(@RORTMP@("POSTDX",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",195,0)
 . S RORPOST=$G(@RORTMP@("POSTDX",INDEX))
"RTN","RORHL11",196,0)
 . D:RORPOST'="" SETOBX(POSTID,RORPOST)
"RTN","RORHL11",197,0)
 Q
"RTN","RORHL11",198,0)
 ;
"RTN","RORHL11",199,0)
MICRO ; *****Microscopic Examination  
"RTN","RORHL11",200,0)
 N INDEX,MICROID,RORMIC
"RTN","RORHL11",201,0)
 S MICROID=$$SEGID("MICRO","Microscopic Examination",CS)
"RTN","RORHL11",202,0)
 S INDEX=""
"RTN","RORHL11",203,0)
 F  S INDEX=$O(@RORTMP@("MICRO",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",204,0)
 . S RORMIC=$G(@RORTMP@("MICRO",INDEX))
"RTN","RORHL11",205,0)
 . D:RORMIC'="" SETOBX(MICROID,RORMIC)
"RTN","RORHL11",206,0)
 Q
"RTN","RORHL11",207,0)
 ;
"RTN","RORHL11",208,0)
 ;****** CYTOPATHOLOGY
"RTN","RORHL11",209,0)
CYTOPATH ;
"RTN","RORHL11",210,0)
 N INDEX,RORSURGP,SURGPID
"RTN","RORHL11",211,0)
 S SURGPID=$$SEGID("CDIAG","Cytopathology Diagnosis",CS)
"RTN","RORHL11",212,0)
 S INDEX=""
"RTN","RORHL11",213,0)
 F  S INDEX=$O(@RORTMP@("CYTODX",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",214,0)
 . S RORSURGP=$G(@RORTMP@("CYTODX",INDEX))
"RTN","RORHL11",215,0)
 . D:RORSURGP'="" SETOBX(SURGPID,RORSURGP)
"RTN","RORHL11",216,0)
 Q
"RTN","RORHL11",217,0)
 ;
"RTN","RORHL11",218,0)
 ;*****
"RTN","RORHL11",219,0)
ICD ;
"RTN","RORHL11",220,0)
 N ICDID,INDEX,RORICD
"RTN","RORHL11",221,0)
 S ICDID=$$SEGID("ICD9","ICD9",CS)
"RTN","RORHL11",222,0)
 S INDEX=""
"RTN","RORHL11",223,0)
 F  S INDEX=$O(@RORTMP@("ICD9",INDEX))  Q:INDEX=""  D
"RTN","RORHL11",224,0)
 . S RORICD=$G(@RORTMP@("ICD9",INDEX))
"RTN","RORHL11",225,0)
 . D:RORICD'="" SETOBX(ICDID,RORICD)
"RTN","RORHL11",226,0)
 Q
"RTN","RORHL11",227,0)
 ;
"RTN","RORHL11",228,0)
 ;***** CONSTRUCTS SEGMENT IDENTIFIER
"RTN","RORHL11",229,0)
SEGID(PONE,PTWO,CS) ; Create segment identifier
"RTN","RORHL11",230,0)
 Q PONE_CS_PTWO_CS_"VA080"
"RTN","RORHL11",231,0)
 ;
"RTN","RORHL11",232,0)
 ;***** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL11",233,0)
SETOBX(PIECE3,PIECE5) ;
"RTN","RORHL11",234,0)
 N RORSEG
"RTN","RORHL11",235,0)
 ;--- Initialize the segment
"RTN","RORHL11",236,0)
 S RORSEG="OBX"
"RTN","RORHL11",237,0)
 ;--- OBX-2
"RTN","RORHL11",238,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL11",239,0)
 ;---
"RTN","RORHL11",240,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL11",241,0)
 S $P(RORSEG,HLFS,6)=$$ESCAPE^RORHL7(PIECE5)
"RTN","RORHL11",242,0)
 ;--- OBX-11
"RTN","RORHL11",243,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL11",244,0)
 ;--- Store the segment
"RTN","RORHL11",245,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL11",246,0)
 Q
"RTN","RORHL12")
0^15^B9327241
"RTN","RORHL12",1,0)
RORHL12 ;HOIFO/BH - HL7 MICROBIOLOGY DATA: OBR,OBX ; 10/13/04 9:23am
"RTN","RORHL12",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL12",3,0)
 ;
"RTN","RORHL12",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL12",5,0)
 ;
"RTN","RORHL12",6,0)
 ; #2503         LRDFN^LR7OR1 (controlled)
"RTN","RORHL12",7,0)
 ; #4335         $$GETDATA^LA7UTL1A (controlled)
"RTN","RORHL12",8,0)
 ;
"RTN","RORHL12",9,0)
 Q
"RTN","RORHL12",10,0)
 ;
"RTN","RORHL12",11,0)
 ;***** SEARCHES FOR MICROBIOLOGY DATA
"RTN","RORHL12",12,0)
 ;
"RTN","RORHL12",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL12",14,0)
 ;
"RTN","RORHL12",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL12",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL12",17,0)
 ;
"RTN","RORHL12",18,0)
 ; [CDSMODE]     Search the data by:
"RTN","RORHL12",19,0)
 ;                 0  completion/result date (default)
"RTN","RORHL12",20,0)
 ;                 1  specimen collection date
"RTN","RORHL12",21,0)
 ;
"RTN","RORHL12",22,0)
 ; Return Values:
"RTN","RORHL12",23,0)
 ;       <0  Error code
"RTN","RORHL12",24,0)
 ;        0  Ok
"RTN","RORHL12",25,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",26,0)
 ;
"RTN","RORHL12",27,0)
 ; The function uses the ^TMP("RORHL12",$J) global node.
"RTN","RORHL12",28,0)
 ;
"RTN","RORHL12",29,0)
EN1(RORDFN,RORSTDT,RORENDT,CDSMODE) ;
"RTN","RORHL12",30,0)
 N ERRCNT,LRDFN,RC,RORMIIEN,RORREF,RORTMP,TMP
"RTN","RORHL12",31,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",32,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL12",33,0)
 ;--- Check the parameters
"RTN","RORHL12",34,0)
 S CDSMODE=$S($G(CDSMODE):"CD",1:"RAD")
"RTN","RORHL12",35,0)
 ;
"RTN","RORHL12",36,0)
 S LRDFN=+$$LRDFN^LR7OR1(RORDFN)  Q:'LRDFN 0
"RTN","RORHL12",37,0)
 S RORTMP=$NA(^TMP("RORHL12",$J))  K @RORTMP
"RTN","RORHL12",38,0)
 ;
"RTN","RORHL12",39,0)
 S TMP=$$GETDATA^LA7UTL1A(LRDFN,RORSTDT,RORENDT,CDSMODE,RORTMP)
"RTN","RORHL12",40,0)
 I TMP<0  D  Q RC
"RTN","RORHL12",41,0)
 . S RC=$$ERROR^RORERR(-56,,$P(TMP,U,2),RORDFN,+TMP,"$$GETDATA^LA7UTL1A")
"RTN","RORHL12",42,0)
 ;
"RTN","RORHL12",43,0)
 S RORMIIEN=""
"RTN","RORHL12",44,0)
 F  S RORMIIEN=$O(@RORTMP@(LRDFN,RORMIIEN))  Q:RORMIIEN=""  D
"RTN","RORHL12",45,0)
 . S RORREF=$NA(@RORTMP@(LRDFN,RORMIIEN))
"RTN","RORHL12",46,0)
 . ;---
"RTN","RORHL12",47,0)
 . S TMP=$$OBR(RORREF)
"RTN","RORHL12",48,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL12",49,0)
 . ;---
"RTN","RORHL12",50,0)
 . S TMP=$$OBX^RORHL121(RORREF)
"RTN","RORHL12",51,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL12",52,0)
 ;
"RTN","RORHL12",53,0)
 K @RORTMP
"RTN","RORHL12",54,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL12",55,0)
 ;
"RTN","RORHL12",56,0)
 ;***** MICROBIOLOGY OBR SEGMENT BUILDER
"RTN","RORHL12",57,0)
 ;
"RTN","RORHL12",58,0)
 ; RORREF        Global reference for MI entry
"RTN","RORHL12",59,0)
 ;
"RTN","RORHL12",60,0)
 ; Return Values:
"RTN","RORHL12",61,0)
 ;       <0  Error code
"RTN","RORHL12",62,0)
 ;        0  Ok
"RTN","RORHL12",63,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL12",64,0)
 ;
"RTN","RORHL12",65,0)
OBR(RORREF) ;
"RTN","RORHL12",66,0)
 N CS,ERRCNT,RC,RORSEG
"RTN","RORHL12",67,0)
 S (ERRCNT,RC)=0
"RTN","RORHL12",68,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL12",69,0)
 S CS=$E(HLECH,1)
"RTN","RORHL12",70,0)
 ;
"RTN","RORHL12",71,0)
 ;--- Initialize the segment
"RTN","RORHL12",72,0)
 S RORSEG="OBR"
"RTN","RORHL12",73,0)
 ;
"RTN","RORHL12",74,0)
 ;--- OBR-3
"RTN","RORHL12",75,0)
 S TMP=$G(@RORREF@(0,.06,"I"))
"RTN","RORHL12",76,0)
 I TMP=""  D  Q RC
"RTN","RORHL12",77,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession #","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",78,0)
 S $P(RORSEG,HLFS,4)=TMP
"RTN","RORHL12",79,0)
 ;
"RTN","RORHL12",80,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL12",81,0)
 S $P(RORSEG,HLFS,5)="87999"_CS_"MICROBIOLOGY"_CS_"C4"
"RTN","RORHL12",82,0)
 ;
"RTN","RORHL12",83,0)
 ;--- OBR-7  - Accession Date
"RTN","RORHL12",84,0)
 S TMP=$$FMTHL7^XLFDT($G(@RORREF@(0,.01,"I")))
"RTN","RORHL12",85,0)
 I TMP'>0  D  Q RC
"RTN","RORHL12",86,0)
 . S RC=$$ERROR^RORERR(-100,,,,"No accession date","$$GETDATA^LA7UTL1A")
"RTN","RORHL12",87,0)
 S $P(RORSEG,HLFS,8)=TMP
"RTN","RORHL12",88,0)
 ;
"RTN","RORHL12",89,0)
 ;--- OBR-11 - Specimen Action Code
"RTN","RORHL12",90,0)
 S $P(RORSEG,HLFS,12)=$G(@RORREF@(0,11.57,"I"))
"RTN","RORHL12",91,0)
 ;
"RTN","RORHL12",92,0)
 ;--- OBR-13 - Relevant Clinical Info.
"RTN","RORHL12",93,0)
 S $P(RORSEG,HLFS,14)=$$ESCAPE^RORHL7($G(@RORREF@(0,.05,"E")))
"RTN","RORHL12",94,0)
 ;
"RTN","RORHL12",95,0)
 ;--- OBR-20 - Filler Field 1
"RTN","RORHL12",96,0)
 S $P(RORSEG,HLFS,21)=$$ESCAPE^RORHL7($G(@RORREF@(0,.055,"E")))
"RTN","RORHL12",97,0)
 ;
"RTN","RORHL12",98,0)
 ;--- OBR-21 - Filler Field 2
"RTN","RORHL12",99,0)
 S $P(RORSEG,HLFS,22)=$$ESCAPE^RORHL7($G(@RORREF@(0,11.58,"E")))
"RTN","RORHL12",100,0)
 ;
"RTN","RORHL12",101,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL12",102,0)
 S $P(RORSEG,HLFS,25)="MB"
"RTN","RORHL12",103,0)
 ;
"RTN","RORHL12",104,0)
 ;--- OBR-25 - Result Status
"RTN","RORHL12",105,0)
 S TMP=$G(@RORREF@(0,11.51,"I"))
"RTN","RORHL12",106,0)
 S $P(RORSEG,HLFS,26)=$S(TMP="P":"F",TMP="N":"R",1:"")
"RTN","RORHL12",107,0)
 ;
"RTN","RORHL12",108,0)
 ;--- OBR-44 - Division
"RTN","RORHL12",109,0)
 S $P(RORSEG,HLFS,45)=$$SITE1^RORUTL03(CS)
"RTN","RORHL12",110,0)
 ;
"RTN","RORHL12",111,0)
 ;--- Store the segment
"RTN","RORHL12",112,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL12",113,0)
 Q ERRCNT
"RTN","RORHL121")
0^14^B74034597
"RTN","RORHL121",1,0)
RORHL121 ;HOIFO/BH - HL7 MICROBIOLOGY DATA: OBR,OBX ; 10/12/04 2:55pm
"RTN","RORHL121",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL121",3,0)
 ;
"RTN","RORHL121",4,0)
 ;***** MICROBIOLOGY OBX SEGMENT(S) BUILDER
"RTN","RORHL121",5,0)
 ;
"RTN","RORHL121",6,0)
 ; RORREF        Global reference for MI entry
"RTN","RORHL121",7,0)
 ;
"RTN","RORHL121",8,0)
 ; Return Values:
"RTN","RORHL121",9,0)
 ;       <0  Error code
"RTN","RORHL121",10,0)
 ;        0  Ok
"RTN","RORHL121",11,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL121",12,0)
 ;
"RTN","RORHL121",13,0)
OBX(RORREF) ;
"RTN","RORHL121",14,0)
 N CS,ERRCNT,RORTBST,IEN,RC,RORID,TMP
"RTN","RORHL121",15,0)
 S (ERRCNT,RC)=0
"RTN","RORHL121",16,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL121",17,0)
 S CS=$E(HLECH)
"RTN","RORHL121",18,0)
 ;
"RTN","RORHL121",19,0)
 ;--- Process TB data if Final report
"RTN","RORHL121",20,0)
 S RORTBST=$G(@RORREF@(0,23,"I"))
"RTN","RORHL121",21,0)
 I RORTBST="F" D
"RTN","RORHL121",22,0)
 . N RORTBDTE,RORTBAFS,RORTBQTY
"RTN","RORHL121",23,0)
 . S RORID=$$SEGID("AFB-SP","TB Report",CS)
"RTN","RORHL121",24,0)
 . S RORTBDTE=$$FM2HL^RORHL7($G(@RORREF@(0,22,"I")))
"RTN","RORHL121",25,0)
 . S RORTBAFS=$G(@RORREF@(0,24,"I"))
"RTN","RORHL121",26,0)
 . S RORTBQTY=$G(@RORREF@(0,25,"I"))
"RTN","RORHL121",27,0)
 . D SETOBX(RORID,RORTBST,RORTBQTY,RORTBAFS,RORTBDTE)
"RTN","RORHL121",28,0)
 ;
"RTN","RORHL121",29,0)
 ;--- Get Bact RPT Remark Data
"RTN","RORHL121",30,0)
 S RORID=$$SEGID("BACT","Bact",CS)
"RTN","RORHL121",31,0)
 S IEN=""
"RTN","RORHL121",32,0)
 F  S IEN=$O(@RORREF@(4,IEN))  Q:'IEN  D
"RTN","RORHL121",33,0)
 . S TMP=$G(@RORREF@(4,IEN,0,.01,"E"))
"RTN","RORHL121",34,0)
 . D:TMP'="" SETOBX(RORID,TMP)
"RTN","RORHL121",35,0)
 ;
"RTN","RORHL121",36,0)
 ;--- Get Gram Stain Data
"RTN","RORHL121",37,0)
 S RORID=$$SEGID("GRAM","Gram Stain",CS)
"RTN","RORHL121",38,0)
 S IEN=""
"RTN","RORHL121",39,0)
 F  S IEN=$O(@RORREF@(2,IEN))  Q:'IEN  D
"RTN","RORHL121",40,0)
 . S TMP=$G(@RORREF@(2,IEN,0,.01,"E"))
"RTN","RORHL121",41,0)
 . D:TMP'="" SETOBX(RORID,TMP)
"RTN","RORHL121",42,0)
 ;
"RTN","RORHL121",43,0)
 D ORGDATA  ; Organism Data
"RTN","RORHL121",44,0)
 D PARDATA  ; Parasite Data
"RTN","RORHL121",45,0)
 D FUNGUS   ; Fungus/Yeast Data
"RTN","RORHL121",46,0)
 D MYCO     ; Mycobacterium Data
"RTN","RORHL121",47,0)
 D VIRUS    ; Virus Data
"RTN","RORHL121",48,0)
 D PARASP   ; Parasitology Smear/Prep
"RTN","RORHL121",49,0)
 D BACSP    ; Bacteriology Smear/Prep
"RTN","RORHL121",50,0)
 D MYCOSP   ; Mycology Smear Prep
"RTN","RORHL121",51,0)
 D VIRORPT  ; Virology RPT Remark
"RTN","RORHL121",52,0)
 ;
"RTN","RORHL121",53,0)
 ;--- Parasite Remark
"RTN","RORHL121",54,0)
 S RORID=$$SEGID("PARP","Parasite Remark",CS)
"RTN","RORHL121",55,0)
 S IEN=""
"RTN","RORHL121",56,0)
 F  S IEN=$O(@RORREF@(7,IEN))  Q:IEN=""  D
"RTN","RORHL121",57,0)
 . S TMP=$G(@RORREF@(7,IEN,0,.01,"E"))
"RTN","RORHL121",58,0)
 . D:TMP'="" SETOBX(RORID,TMP)
"RTN","RORHL121",59,0)
 ;
"RTN","RORHL121",60,0)
 ;--- Specimen Comments
"RTN","RORHL121",61,0)
 S TMP=$G(@RORREF@(0,.99,"E"))
"RTN","RORHL121",62,0)
 I TMP'=""  D  D SETOBX(RORID,TMP)
"RTN","RORHL121",63,0)
 . S RORID=$$SEGID("COMP","Specimen Comment",CS)
"RTN","RORHL121",64,0)
 ;
"RTN","RORHL121",65,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL121",66,0)
 ;
"RTN","RORHL121",67,0)
VIRORPT ;***** Virology RPT Remark
"RTN","RORHL121",68,0)
 N RORVRID,RORVRIEN
"RTN","RORHL121",69,0)
 S RORVRID=$$SEGID("VIRUSR","Virology RPT",CS)
"RTN","RORHL121",70,0)
 ;
"RTN","RORHL121",71,0)
 S RORVRIEN=""
"RTN","RORHL121",72,0)
 F  S RORVRIEN=$O(@RORREF@(18,RORVRIEN))  Q:'RORVRIEN  D
"RTN","RORHL121",73,0)
 . S TMP=$G(@RORREF@(18,RORVRIEN,0,.01,"E"))
"RTN","RORHL121",74,0)
 . D:TMP'="" SETOBX(RORVRID,TMP)
"RTN","RORHL121",75,0)
 Q
"RTN","RORHL121",76,0)
 ;
"RTN","RORHL121",77,0)
MYCOSP ;***** Mycology Smear Prep
"RTN","RORHL121",78,0)
 ;
"RTN","RORHL121",79,0)
 N RORMSPID,RORMSPIN
"RTN","RORHL121",80,0)
 S RORMSPID=$$SEGID("MYCO-SP","Mycology Smear/Prep",CS)
"RTN","RORHL121",81,0)
 ;
"RTN","RORHL121",82,0)
 S RORMSPIN=""
"RTN","RORHL121",83,0)
 F  S RORMSPIN=$O(@RORREF@(15,RORMSPIN))  Q:'RORMSPIN  D
"RTN","RORHL121",84,0)
 . S TMP=$G(@RORREF@(15,RORMSPIN,0,.01,"E"))
"RTN","RORHL121",85,0)
 . D:TMP'="" SETOBX(RORMSPID,TMP)
"RTN","RORHL121",86,0)
 Q
"RTN","RORHL121",87,0)
 ;
"RTN","RORHL121",88,0)
BACSP ;***** Bacteriology Smear/Prep
"RTN","RORHL121",89,0)
 ;
"RTN","RORHL121",90,0)
 N RORBSPID,RORBSP
"RTN","RORHL121",91,0)
 S RORBSPID=$$SEGID("BACT-SP","Bact Smear/Prep",CS)
"RTN","RORHL121",92,0)
 ;
"RTN","RORHL121",93,0)
 S RORBSP=""
"RTN","RORHL121",94,0)
 F  S RORBSP=$O(@RORREF@(25,RORBSP))  Q:'RORBSP  D
"RTN","RORHL121",95,0)
 . S TMP=$G(@RORREF@(25,RORBSP,0,.01,"E"))
"RTN","RORHL121",96,0)
 . D:TMP'="" SETOBX(RORBSPID,TMP)
"RTN","RORHL121",97,0)
 Q
"RTN","RORHL121",98,0)
 ;
"RTN","RORHL121",99,0)
PARASP ;***** Parasitology Smear/Prep
"RTN","RORHL121",100,0)
 ;
"RTN","RORHL121",101,0)
 N RORPSPID,RORPSP
"RTN","RORHL121",102,0)
 S RORPSPID=$$SEGID("PARA-SP","Para Smear/Prep",CS)
"RTN","RORHL121",103,0)
 ;
"RTN","RORHL121",104,0)
 S RORPSP=""
"RTN","RORHL121",105,0)
 F  S RORPSP=$O(@RORREF@(24,RORPSP))  Q:'RORPSP  D
"RTN","RORHL121",106,0)
 . S TMP=$G(@RORREF@(24,RORPSP,0,.01,"E"))
"RTN","RORHL121",107,0)
 . D:TMP'="" SETOBX(RORPSPID,TMP)
"RTN","RORHL121",108,0)
 Q
"RTN","RORHL121",109,0)
 ;
"RTN","RORHL121",110,0)
VIRUS ;***** Virus
"RTN","RORHL121",111,0)
 ;
"RTN","RORHL121",112,0)
 N RORVIRID,RORVIIEN
"RTN","RORHL121",113,0)
 S RORVIRID=$$SEGID("VIRUS","Virus",CS)
"RTN","RORHL121",114,0)
 ;
"RTN","RORHL121",115,0)
 S RORVIIEN=""
"RTN","RORHL121",116,0)
 F  S RORVIIEN=$O(@RORREF@(17,RORVIIEN))  Q:'RORVIIEN  D
"RTN","RORHL121",117,0)
 . S TMP=$G(@RORREF@(17,RORVIIEN,0,.01,"E"))
"RTN","RORHL121",118,0)
 . D:TMP'="" SETOBX(RORVIRID,TMP)
"RTN","RORHL121",119,0)
 Q
"RTN","RORHL121",120,0)
 ;
"RTN","RORHL121",121,0)
MYCO ;***** Mycobacterium
"RTN","RORHL121",122,0)
 N RORMYD,RORMYD1,RORDF,RORDO,RORMYIEN,RORMYID,RORMYCM,MYIEN,RORMYF,RORMYO,TMP,TMP1
"RTN","RORHL121",123,0)
 S RORMYID=$$SEGID("MYCO","Mycobacterium",CS)
"RTN","RORHL121",124,0)
 S RORMYCM=$$SEGID("MYCOC","Myco Comment",CS)
"RTN","RORHL121",125,0)
 S RORMYF=$$SEGID("MYCOAF","Myco Anti-F",CS)
"RTN","RORHL121",126,0)
 S RORMYO=$$SEGID("MYCOAO","Myco Anti-O",CS)
"RTN","RORHL121",127,0)
 ;
"RTN","RORHL121",128,0)
 S RORMYIEN=""
"RTN","RORHL121",129,0)
 F  S RORMYIEN=$O(@RORREF@(12,RORMYIEN))  Q:'RORMYIEN  D
"RTN","RORHL121",130,0)
 . S TMP=$G(@RORREF@(12,RORMYIEN,0,.01,"E"))
"RTN","RORHL121",131,0)
 . Q:TMP=""
"RTN","RORHL121",132,0)
 . D SETOBX(RORMYID,TMP,$G(@RORREF@(12,RORMYIEN,0,1,"I")))
"RTN","RORHL121",133,0)
 . ;---
"RTN","RORHL121",134,0)
 . S MYIEN=""
"RTN","RORHL121",135,0)
 . F  S MYIEN=$O(@RORREF@(12,RORMYIEN,1,MYIEN))  Q:MYIEN=""  D
"RTN","RORHL121",136,0)
 . . S TMP=$G(@RORREF@(12,RORMYIEN,1,MYIEN,0,.01,"E"))
"RTN","RORHL121",137,0)
 . . D:TMP'="" SETOBX(RORMYCM,TMP)
"RTN","RORHL121",138,0)
 . ;
"RTN","RORHL121",139,0)
 . S RORMYD=2
"RTN","RORHL121",140,0)
 . F  S RORMYD=$O(@RORREF@(12,RORMYIEN,0,RORMYD)) Q:'RORMYD!(RORMYD'<3)  D
"RTN","RORHL121",141,0)
 . . S TMP=$G(@RORREF@(12,RORMYIEN,0,RORMYD,"I"))  Q:TMP?."^"
"RTN","RORHL121",142,0)
 . . S TMP1=$$ESCAPE^RORHL7($P(TMP,U))
"RTN","RORHL121",143,0)
 . . D SETOBXNE(RORMYF,TMP1_CS_$$ESCAPE^RORHL7($P(TMP,U,2)))
"RTN","RORHL121",144,0)
 . ;
"RTN","RORHL121",145,0)
 . S RORMYD1=4
"RTN","RORHL121",146,0)
 . F  S RORMYD1=$O(@RORREF@(12,RORMYIEN,0,RORMYD1)) Q:'RORMYD1!(RORMYD1'<56)  D
"RTN","RORHL121",147,0)
 . . S TMP=$G(@RORREF@(12,RORMYIEN,0,RORMYD1,"I"))  Q:TMP?."^"
"RTN","RORHL121",148,0)
 . . S TMP1=$$ESCAPE^RORHL7($P(TMP,U))
"RTN","RORHL121",149,0)
 . . D SETOBXNE(RORMYO,TMP1_CS_$$ESCAPE^RORHL7($P(TMP,U,2)))
"RTN","RORHL121",150,0)
 Q
"RTN","RORHL121",151,0)
 ;
"RTN","RORHL121",152,0)
FUNGUS ;***** Process Fungus/Yeast
"RTN","RORHL121",153,0)
 N FYIEN,RORFYIEN,RORFYID,RORFYCM
"RTN","RORHL121",154,0)
 ;
"RTN","RORHL121",155,0)
 S RORFYID=$$SEGID("FUNG","Fungus-Yeast",CS)
"RTN","RORHL121",156,0)
 S RORFYCM=$$SEGID("FUNGC","F-Y Comment",CS)
"RTN","RORHL121",157,0)
 S RORFYIEN=""
"RTN","RORHL121",158,0)
 F  S RORFYIEN=$O(@RORREF@(9,RORFYIEN))  Q:'RORFYIEN  D
"RTN","RORHL121",159,0)
 . S TMP=$G(@RORREF@(9,RORFYIEN,0,.01,"E"))
"RTN","RORHL121",160,0)
 . Q:TMP=""
"RTN","RORHL121",161,0)
 . D SETOBX(RORFYID,TMP,$G(@RORREF@(9,RORFYIEN,0,1,"I")))
"RTN","RORHL121",162,0)
 . ;---
"RTN","RORHL121",163,0)
 . S FYIEN=""
"RTN","RORHL121",164,0)
 . F  S FYIEN=$O(@RORREF@(9,RORFYIEN,1,FYIEN))  Q:FYIEN=""  D
"RTN","RORHL121",165,0)
 . . S TMP=$G(@RORREF@(9,RORFYIEN,1,FYIEN,0,.01,"E"))
"RTN","RORHL121",166,0)
 . . D:TMP'="" SETOBX(RORFYCM,TMP)
"RTN","RORHL121",167,0)
 Q
"RTN","RORHL121",168,0)
 ;
"RTN","RORHL121",169,0)
 ;***** PROCESSES ORGANISM DATA
"RTN","RORHL121",170,0)
ORGDATA ;
"RTN","RORHL121",171,0)
 N IEN,RORANTID,RORCMID,RORID,RORMBC,RORMIC,RORORIEN,RORAINX,RORAINX1,RORANTIF,RORANTIO,TMP,TMP1
"RTN","RORHL121",172,0)
 S RORID=$$SEGID("ORG","Organism",CS)
"RTN","RORHL121",173,0)
 S RORCMID=$$SEGID("ORGC","Org Comment",CS)
"RTN","RORHL121",174,0)
 S RORANTID=$$SEGID("ORGA","Org Antibiotic",CS)
"RTN","RORHL121",175,0)
 S RORANTIF=$$SEGID("ORGAF","Org Antibiotic-F",CS)
"RTN","RORHL121",176,0)
 S RORANTIO=$$SEGID("ORGAO","Org Antibiotic-O",CS)
"RTN","RORHL121",177,0)
 ;---
"RTN","RORHL121",178,0)
 S RORORIEN=""
"RTN","RORHL121",179,0)
 F  S RORORIEN=$O(@RORREF@(3,RORORIEN))  Q:'RORORIEN  D
"RTN","RORHL121",180,0)
 . S TMP=$G(@RORREF@(3,RORORIEN,0,.01,"E"))
"RTN","RORHL121",181,0)
 . Q:TMP=""
"RTN","RORHL121",182,0)
 . D SETOBX(RORID,TMP,$G(@RORREF@(3,RORORIEN,0,1,"I")))
"RTN","RORHL121",183,0)
 . ;---
"RTN","RORHL121",184,0)
 . S RORAINX=2
"RTN","RORHL121",185,0)
 . F  S RORAINX=$O(@RORREF@(3,RORORIEN,0,RORAINX)) Q:'RORAINX!(RORAINX'<3)  D
"RTN","RORHL121",186,0)
 . . S TMP=$G(@RORREF@(3,RORORIEN,0,RORAINX,"I"))  Q:TMP?."^"
"RTN","RORHL121",187,0)
 . . S TMP1=$$ESCAPE^RORHL7($P(TMP,U))
"RTN","RORHL121",188,0)
 . . D SETOBXNE(RORANTIF,TMP1_CS_$$ESCAPE^RORHL7($P(TMP,U,2)))
"RTN","RORHL121",189,0)
 . ;---
"RTN","RORHL121",190,0)
 . S RORAINX1=10
"RTN","RORHL121",191,0)
 . F  S RORAINX1=$O(@RORREF@(3,RORORIEN,0,RORAINX1)) Q:'RORAINX1!(RORAINX1'<160)  D
"RTN","RORHL121",192,0)
 . . S TMP=$G(@RORREF@(3,RORORIEN,0,RORAINX1,"I"))  Q:TMP?."^"
"RTN","RORHL121",193,0)
 . . S TMP1=$$ESCAPE^RORHL7($P(TMP,U))
"RTN","RORHL121",194,0)
 . . D SETOBXNE(RORANTIO,TMP1_CS_$$ESCAPE^RORHL7($P(TMP,U,2)))
"RTN","RORHL121",195,0)
 . ;---
"RTN","RORHL121",196,0)
 . S IEN=""
"RTN","RORHL121",197,0)
 . F  S IEN=$O(@RORREF@(3,RORORIEN,1,IEN))  Q:IEN=""  D
"RTN","RORHL121",198,0)
 . . S TMP=$G(@RORREF@(3,RORORIEN,1,IEN,0,.01,"E"))
"RTN","RORHL121",199,0)
 . . D:TMP'="" SETOBX(RORCMID,TMP)
"RTN","RORHL121",200,0)
 . ;---
"RTN","RORHL121",201,0)
 . S IEN=""
"RTN","RORHL121",202,0)
 . F  S IEN=$O(@RORREF@(3,RORORIEN,3,IEN))  Q:IEN=""  D
"RTN","RORHL121",203,0)
 . . S TMP=$G(@RORREF@(3,RORORIEN,3,IEN,0,.01,"E"))
"RTN","RORHL121",204,0)
 . . Q:TMP=""
"RTN","RORHL121",205,0)
 . . S RORMIC=$$ESCAPE^RORHL7($G(@RORREF@(3,RORORIEN,3,IEN,0,1,"E")))
"RTN","RORHL121",206,0)
 . . S RORMBC=$$ESCAPE^RORHL7($G(@RORREF@(3,RORORIEN,3,IEN,0,2,"E")))
"RTN","RORHL121",207,0)
 . . D SETOBXNE(RORANTID,$$ESCAPE^RORHL7(TMP),,RORMIC_CS_RORMBC)
"RTN","RORHL121",208,0)
 Q
"RTN","RORHL121",209,0)
 ;
"RTN","RORHL121",210,0)
 ;***** PROCESSES PARASITE DATA
"RTN","RORHL121",211,0)
PARDATA ;
"RTN","RORHL121",212,0)
 N IEN,RORPCMID,RORPSID,RORPSIEN,RORSTID,RORSTIEN,RORSTQAN,TMP
"RTN","RORHL121",213,0)
 S RORPSID=$$SEGID("PAR","Parasite",CS)
"RTN","RORHL121",214,0)
 S RORSTID=$$SEGID("PARQ","Stage",CS)
"RTN","RORHL121",215,0)
 S RORPCMID=$$SEGID("PARC","Comment",CS)
"RTN","RORHL121",216,0)
 ;---
"RTN","RORHL121",217,0)
 S RORPSIEN=""
"RTN","RORHL121",218,0)
 F  S RORPSIEN=$O(@RORREF@(6,RORPSIEN))  Q:RORPSIEN=""  D
"RTN","RORHL121",219,0)
 . S TMP=$G(@RORREF@(6,RORPSIEN,"0",".01","E"))
"RTN","RORHL121",220,0)
 . Q:TMP=""
"RTN","RORHL121",221,0)
 . D SETOBX(RORPSID,TMP)
"RTN","RORHL121",222,0)
 . ;---
"RTN","RORHL121",223,0)
 . S RORSTIEN=""
"RTN","RORHL121",224,0)
 . F  S RORSTIEN=$O(@RORREF@(6,RORPSIEN,1,RORSTIEN)) Q:RORSTIEN=""  D
"RTN","RORHL121",225,0)
 . . S TMP=$G(@RORREF@(6,RORPSIEN,1,RORSTIEN,0,.01,"I"))
"RTN","RORHL121",226,0)
 . . Q:TMP=""
"RTN","RORHL121",227,0)
 . . S RORSTQAN=$G(@RORREF@(6,RORPSIEN,1,RORSTIEN,0,"1","E"))
"RTN","RORHL121",228,0)
 . . D SETOBX(RORSTID,TMP,RORSTQAN)
"RTN","RORHL121",229,0)
 . . ;---
"RTN","RORHL121",230,0)
 . . S IEN=""
"RTN","RORHL121",231,0)
 . . F  S IEN=$O(@RORREF@(6,RORPSIEN,1,RORSTIEN,1,IEN))  Q:IEN=""  D
"RTN","RORHL121",232,0)
 . . . S TMP=$G(@RORREF@(6,RORPSIEN,1,RORSTIEN,1,IEN,0,.01,"E"))
"RTN","RORHL121",233,0)
 . . . D:TMP'="" SETOBX(RORPCMID,TMP)
"RTN","RORHL121",234,0)
 Q
"RTN","RORHL121",235,0)
 ;
"RTN","RORHL121",236,0)
 ;***** CREATES SEGMENT IDENTIFIER
"RTN","RORHL121",237,0)
SEGID(PONE,PTWO,CS) ;
"RTN","RORHL121",238,0)
 Q PONE_CS_PTWO_CS_"VA080"
"RTN","RORHL121",239,0)
 ;
"RTN","RORHL121",240,0)
 ;***** CREATE AND STORE THE OBX SEGMENT
"RTN","RORHL121",241,0)
SETOBX(PIECE3,PIECE5,PIECE6,PIECE7,PIECE14) ;
"RTN","RORHL121",242,0)
 S:$G(PIECE5)'="" PIECE5=$$ESCAPE^RORHL7(PIECE5)
"RTN","RORHL121",243,0)
 S:$G(PIECE6)'="" PIECE6=$$ESCAPE^RORHL7(PIECE6)
"RTN","RORHL121",244,0)
 S:$G(PIECE7)'="" PIECE7=$$ESCAPE^RORHL7(PIECE7)
"RTN","RORHL121",245,0)
 D SETOBXNE(.PIECE3,.PIECE5,.PIECE6,.PIECE7,.PIECE14)
"RTN","RORHL121",246,0)
 Q
"RTN","RORHL121",247,0)
 ;
"RTN","RORHL121",248,0)
SETOBXNE(PIECE3,PIECE5,PIECE6,PIECE7,PIECE14) ;
"RTN","RORHL121",249,0)
 N RORSEG
"RTN","RORHL121",250,0)
 ;--- Initialize the segment
"RTN","RORHL121",251,0)
 S RORSEG="OBX"
"RTN","RORHL121",252,0)
 ;--- OBX-2
"RTN","RORHL121",253,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL121",254,0)
 ;--- OBX-3
"RTN","RORHL121",255,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL121",256,0)
 ;--- OBX-5, OBX-6, and OBX-7
"RTN","RORHL121",257,0)
 S $P(RORSEG,HLFS,6,8)=$G(PIECE5)_HLFS_$G(PIECE6)_HLFS_$G(PIECE7)
"RTN","RORHL121",258,0)
 ;--- OBX-11
"RTN","RORHL121",259,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL121",260,0)
 ;--- OBX-14
"RTN","RORHL121",261,0)
 S:$G(PIECE14)'="" $P(RORSEG,HLFS,15)=PIECE14
"RTN","RORHL121",262,0)
 ;--- Store the segment
"RTN","RORHL121",263,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL121",264,0)
 Q
"RTN","RORHL13")
0^2^B17929172
"RTN","RORHL13",1,0)
RORHL13 ;HOIFO/BH - HL7 MEDICAL PROCEDURES (EKG): OBR,OBX ; 2/7/05 11:35am
"RTN","RORHL13",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL13",3,0)
 ;
"RTN","RORHL13",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL13",5,0)
 ;
"RTN","RORHL13",6,0)
 ; #3780         GET^MCARAPI (private)
"RTN","RORHL13",7,0)
 ; #3854         GET^MDAPI1 (private)
"RTN","RORHL13",8,0)
 ;
"RTN","RORHL13",9,0)
 Q
"RTN","RORHL13",10,0)
 ;
"RTN","RORHL13",11,0)
 ;***** SEARCHES FOR MEDICAL PROCEDURES (EKG)
"RTN","RORHL13",12,0)
 ;
"RTN","RORHL13",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL13",14,0)
 ;
"RTN","RORHL13",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL13",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL13",17,0)
 ;
"RTN","RORHL13",18,0)
 ; Return Values:
"RTN","RORHL13",19,0)
 ;       <0  Error code
"RTN","RORHL13",20,0)
 ;        0  Ok
"RTN","RORHL13",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL13",22,0)
 ;
"RTN","RORHL13",23,0)
 ; The function uses the ^TMP("RORHL13",$J) global node.
"RTN","RORHL13",24,0)
 ;
"RTN","RORHL13",25,0)
EN1(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL13",26,0)
 N ERRCNT,RC,RORESULT,RORIENS,SF,TMP
"RTN","RORHL13",27,0)
 S (ERRCNT,RC)=0
"RTN","RORHL13",28,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL13",29,0)
 ;
"RTN","RORHL13",30,0)
 S RORESULT=$NA(^TMP("RORHL13",$J))  K @RORESULT
"RTN","RORHL13",31,0)
 ;
"RTN","RORHL13",32,0)
 ;--- Check if Clinical Procedures patch has been installed,
"RTN","RORHL13",33,0)
 ;--- if not call the API associated with the Medicine Patch.
"RTN","RORHL13",34,0)
 ;
"RTN","RORHL13",35,0)
 S TMP=".01;.02;11;14;20;21;18"
"RTN","RORHL13",36,0)
 I $D(ROREXT("PATCH","MD*1.0*1"))  D
"RTN","RORHL13",37,0)
 . D GET^MDAPI1(RORESULT,RORDFN,RORSTDT,RORENDT,TMP)
"RTN","RORHL13",38,0)
 E  I $D(ROREXT("PATCH","MC*2.3*34"))  D
"RTN","RORHL13",39,0)
 . D GET^MCARAPI(RORESULT,RORDFN,RORSTDT,RORENDT,TMP)
"RTN","RORHL13",40,0)
 E  Q ERRCNT+1
"RTN","RORHL13",41,0)
 ;
"RTN","RORHL13",42,0)
 ;--- Build the index
"RTN","RORHL13",43,0)
 F SF=691.54  S TMP=""  D
"RTN","RORHL13",44,0)
 . F  S TMP=$O(@RORESULT@(SF,TMP))  Q:TMP=""  D
"RTN","RORHL13",45,0)
 . . S @RORESULT@("A",SF,$P(TMP,",",2)_",",TMP)=""
"RTN","RORHL13",46,0)
 ;
"RTN","RORHL13",47,0)
 ;--- Process the data
"RTN","RORHL13",48,0)
 S RORIENS=""
"RTN","RORHL13",49,0)
 F  S RORIENS=$O(@RORESULT@(691.5,RORIENS))  Q:RORIENS=""  D
"RTN","RORHL13",50,0)
 . S TMP=$$OBR(RORIENS)
"RTN","RORHL13",51,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL13",52,0)
 . S TMP=$$OBX(RORIENS)
"RTN","RORHL13",53,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL13",54,0)
 ;
"RTN","RORHL13",55,0)
 K @RORESULT
"RTN","RORHL13",56,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL13",57,0)
 ;
"RTN","RORHL13",58,0)
 ;***** MEDICAL PROCEDURE (EKG) OBR SEGMENT BUILDER
"RTN","RORHL13",59,0)
 ;
"RTN","RORHL13",60,0)
 ; RORIENS       Medical Procedure Record IENS
"RTN","RORHL13",61,0)
 ;
"RTN","RORHL13",62,0)
 ; Return Values:
"RTN","RORHL13",63,0)
 ;       <0  Error code
"RTN","RORHL13",64,0)
 ;        0  Ok
"RTN","RORHL13",65,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL13",66,0)
 ;
"RTN","RORHL13",67,0)
OBR(RORIENS) ;
"RTN","RORHL13",68,0)
 N CS,ERRCNT,IEN,RC,ROROUT,RORSEG,TMP
"RTN","RORHL13",69,0)
 S (ERRCNT,RC)=0
"RTN","RORHL13",70,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL13",71,0)
 S CS=$E(HLECH,1)
"RTN","RORHL13",72,0)
 ;
"RTN","RORHL13",73,0)
 ;--- Initialize the segment
"RTN","RORHL13",74,0)
 S RORSEG="OBR"
"RTN","RORHL13",75,0)
 ;
"RTN","RORHL13",76,0)
 ;--- OBR-3
"RTN","RORHL13",77,0)
 S $P(RORSEG,HLFS,4)=$TR(RORIENS,",")
"RTN","RORHL13",78,0)
 ;
"RTN","RORHL13",79,0)
 ;--- OBR-4 - Universal Service ID
"RTN","RORHL13",80,0)
 S $P(RORSEG,HLFS,5)="93000"_CS_"ELECTROCARDIOGRAM"_CS_"C4"
"RTN","RORHL13",81,0)
 ;
"RTN","RORHL13",82,0)
 ;--- OBR-6 - Requested Date/time (date of the EKG)
"RTN","RORHL13",83,0)
 S TMP=$$DATE($G(@RORESULT@(691.5,RORIENS,.01,"E")))
"RTN","RORHL13",84,0)
 Q:TMP'>0 $$ERROR^RORERR(-95,,,,691.5,RORIENS,.01)
"RTN","RORHL13",85,0)
 S $P(RORSEG,HLFS,7)=TMP
"RTN","RORHL13",86,0)
 ;
"RTN","RORHL13",87,0)
 ;--- OBR-7 - Observation Date/Time (when received from an instrument)
"RTN","RORHL13",88,0)
 S $P(RORSEG,HLFS,8)=$$DATE($G(@RORESULT@(691.5,RORIENS,21,"E")))
"RTN","RORHL13",89,0)
 ;
"RTN","RORHL13",90,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL13",91,0)
 S $P(RORSEG,HLFS,25)="EC"
"RTN","RORHL13",92,0)
 ;
"RTN","RORHL13",93,0)
 ;--- OBR-25 -
"RTN","RORHL13",94,0)
 S TMP=$G(@RORESULT@(691.5,RORIENS,11,"E"))
"RTN","RORHL13",95,0)
 I TMP'=""  D  S $P(RORSEG,HLFS,26)=TMP
"RTN","RORHL13",96,0)
 . S TMP=$S(TMP="CONFIRMED":"F",TMP="UNCONFIRMED":"R",1:"")
"RTN","RORHL13",97,0)
 ;
"RTN","RORHL13",98,0)
 ;--- OBR-44 - Division
"RTN","RORHL13",99,0)
 S TMP=$G(@RORESULT@(691.5,RORIENS,18,"E"))
"RTN","RORHL13",100,0)
 S IEN=$S(TMP'="":+$O(^SC("B",TMP,0)),1:0)
"RTN","RORHL13",101,0)
 S $P(RORSEG,HLFS,45)=$$DIV44^RORHLUT1(IEN,1,CS)
"RTN","RORHL13",102,0)
 ;
"RTN","RORHL13",103,0)
 ;--- Store the segment
"RTN","RORHL13",104,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL13",105,0)
 Q ERRCNT
"RTN","RORHL13",106,0)
 ;
"RTN","RORHL13",107,0)
 ;***** MEDICAL PROCEDURE (EKG) OBX SEGMENT(S) BUILDER
"RTN","RORHL13",108,0)
 ;
"RTN","RORHL13",109,0)
 ; RORIENS       Medical Procedure Record IENS
"RTN","RORHL13",110,0)
 ;
"RTN","RORHL13",111,0)
 ; Return Values:
"RTN","RORHL13",112,0)
 ;       <0  Error code
"RTN","RORHL13",113,0)
 ;        0  Ok
"RTN","RORHL13",114,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL13",115,0)
 ;
"RTN","RORHL13",116,0)
OBX(RORIENS) ;
"RTN","RORHL13",117,0)
 N CS,ERRCNT,RC,RORID,RORINT,RORKEY,RORMOD,RORSEG,TMP
"RTN","RORHL13",118,0)
 S (ERRCNT,RC)=0
"RTN","RORHL13",119,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL13",120,0)
 S CS=$E(HLECH)
"RTN","RORHL13",121,0)
 ;
"RTN","RORHL13",122,0)
 ;--- Process any interpretation data
"RTN","RORHL13",123,0)
 S RORID="INT"_CS_"Interpretation"_CS_"VA080"
"RTN","RORHL13",124,0)
 S RORKEY=""
"RTN","RORHL13",125,0)
 F  S RORKEY=$O(@RORESULT@("A",691.54,RORIENS,RORKEY))  Q:RORKEY=""  D
"RTN","RORHL13",126,0)
 . S RORINT=$G(@RORESULT@(691.54,RORKEY,.01,"E"))
"RTN","RORHL13",127,0)
 . Q:RORINT=""
"RTN","RORHL13",128,0)
 . S RORMOD=$G(@RORESULT@(691.54,RORKEY,1,"E"))
"RTN","RORHL13",129,0)
 . D SETOBX(RORID,RORMOD,RORINT)
"RTN","RORHL13",130,0)
 ;
"RTN","RORHL13",131,0)
 ;--- Process auto instrument data
"RTN","RORHL13",132,0)
 S RORID="AUTO"_CS_"Auto Instrument"_CS_"VA080"
"RTN","RORHL13",133,0)
 S RORKEY=0
"RTN","RORHL13",134,0)
 F  S RORKEY=$O(@RORESULT@(691.5,RORIENS,20,RORKEY))  Q:RORKEY'>0  D
"RTN","RORHL13",135,0)
 . S TMP=$G(@RORESULT@(691.5,RORIENS,20,RORKEY))
"RTN","RORHL13",136,0)
 . D:TMP'="" SETOBX(RORID,,TMP)
"RTN","RORHL13",137,0)
 ;
"RTN","RORHL13",138,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL13",139,0)
 ;
"RTN","RORHL13",140,0)
 ;***** CONVERTS THE DATE FROM EXTERNAL TO HL7 FORMAT
"RTN","RORHL13",141,0)
DATE(DATE) ;
"RTN","RORHL13",142,0)
 N RES
"RTN","RORHL13",143,0)
 D DT^DILF(,$P(DATE,"@"),.RES)
"RTN","RORHL13",144,0)
 Q $$FM2HL^RORHL7($G(RES))
"RTN","RORHL13",145,0)
 ;
"RTN","RORHL13",146,0)
 ;***** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL13",147,0)
SETOBX(PIECE3,PIECE4,PIECE5) ;
"RTN","RORHL13",148,0)
 N RORSEG
"RTN","RORHL13",149,0)
 ;--- Initialize the segment
"RTN","RORHL13",150,0)
 S RORSEG="OBX"
"RTN","RORHL13",151,0)
 ;--- OBX-2
"RTN","RORHL13",152,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL13",153,0)
 ;---
"RTN","RORHL13",154,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL13",155,0)
 S:$G(PIECE4)'="" $P(RORSEG,HLFS,5)=PIECE4
"RTN","RORHL13",156,0)
 S $P(RORSEG,HLFS,6)=$$ESCAPE^RORHL7(PIECE5)
"RTN","RORHL13",157,0)
 ;--- OBX-11
"RTN","RORHL13",158,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL13",159,0)
 ;--- Store the segment
"RTN","RORHL13",160,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL13",161,0)
 Q
"RTN","RORHL16")
0^29^B14260810
"RTN","RORHL16",1,0)
RORHL16 ;HOIFO/BH,SG - HL7 VITALS DATA: OBR,OBX ; 1/19/05 8:58am
"RTN","RORHL16",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORHL16",3,0)
 ;
"RTN","RORHL16",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL16",5,0)
 ;
"RTN","RORHL16",6,0)
 ;
"RTN","RORHL16",7,0)
 ; #1446         EN1^GMRVUT0 (controlled)
"RTN","RORHL16",8,0)
 ;
"RTN","RORHL16",9,0)
 Q
"RTN","RORHL16",10,0)
 ;
"RTN","RORHL16",11,0)
 ;***** SEARCHES FOR VITALS DATA
"RTN","RORHL16",12,0)
 ;
"RTN","RORHL16",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL16",14,0)
 ;
"RTN","RORHL16",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL16",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL16",17,0)
 ;
"RTN","RORHL16",18,0)
 ; Return Values:
"RTN","RORHL16",19,0)
 ;       <0  Error code
"RTN","RORHL16",20,0)
 ;        0  Ok
"RTN","RORHL16",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL16",22,0)
 ;
"RTN","RORHL16",23,0)
 ; The function uses ^UTILITY($J,"GMRVD") global node.
"RTN","RORHL16",24,0)
 ;
"RTN","RORHL16",25,0)
EN1(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL16",26,0)
 N DFN,GMRVSTR,PAT,RC
"RTN","RORHL16",27,0)
 S (ERRCNT,RC)=0
"RTN","RORHL16",28,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL16",29,0)
 ;
"RTN","RORHL16",30,0)
 ;--- Check to see if the patient has any Vitals data
"RTN","RORHL16",31,0)
 K ^UTILITY($J,"GMRVD")
"RTN","RORHL16",32,0)
 S DFN=RORDFN,GMRVSTR="BP;T;R;P;HT;WT;PN"
"RTN","RORHL16",33,0)
 S GMRVSTR(0)=RORSTDT_"^"_RORENDT_"^999999^0"
"RTN","RORHL16",34,0)
 D EN1^GMRVUT0
"RTN","RORHL16",35,0)
 Q:$D(^UTILITY($J,"GMRVD"))<10 0
"RTN","RORHL16",36,0)
 ;
"RTN","RORHL16",37,0)
 S TMP=$$OBR()
"RTN","RORHL16",38,0)
 I TMP  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL16",39,0)
 S TMP=$$OBX()
"RTN","RORHL16",40,0)
 I TMP  S ERRCNT=ERRCNT+1  Q:RC<0
"RTN","RORHL16",41,0)
 ;
"RTN","RORHL16",42,0)
 K ^UTILITY($J,"GMRVD")
"RTN","RORHL16",43,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL16",44,0)
 ;
"RTN","RORHL16",45,0)
 ;***** VITALS OBR SEGMENT BUILDER
"RTN","RORHL16",46,0)
 ;
"RTN","RORHL16",47,0)
 ; Return Values:
"RTN","RORHL16",48,0)
 ;       <0  Error code
"RTN","RORHL16",49,0)
 ;        0  Ok
"RTN","RORHL16",50,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL16",51,0)
 ;
"RTN","RORHL16",52,0)
OBR() ;
"RTN","RORHL16",53,0)
 N CS,ERRCNT,RC,RORSEG
"RTN","RORHL16",54,0)
 S (ERRCNT,RC)=0
"RTN","RORHL16",55,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL16",56,0)
 S CS=$E(HLECH,1)
"RTN","RORHL16",57,0)
 ;
"RTN","RORHL16",58,0)
 ;--- Initialize the segment
"RTN","RORHL16",59,0)
 S RORSEG="OBR"
"RTN","RORHL16",60,0)
 ;
"RTN","RORHL16",61,0)
 ;--- OBR-4 - Vitals CPT Code
"RTN","RORHL16",62,0)
 S $P(RORSEG,HLFS,5)="94150"_CS_"VITAL CAPACITY TEST"_CS_"C4"
"RTN","RORHL16",63,0)
 ;
"RTN","RORHL16",64,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL16",65,0)
 S $P(RORSEG,HLFS,25)="EC"
"RTN","RORHL16",66,0)
 ;
"RTN","RORHL16",67,0)
 ;--- OBR-44 - Division
"RTN","RORHL16",68,0)
 S $P(RORSEG,HLFS,45)=$$SITE1^RORUTL03(CS)
"RTN","RORHL16",69,0)
 ;
"RTN","RORHL16",70,0)
 ;--- Store the segment
"RTN","RORHL16",71,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL16",72,0)
 Q ERRCNT
"RTN","RORHL16",73,0)
 ;
"RTN","RORHL16",74,0)
 ;***** VITALS OBX SEGMENT(S) BUILDER
"RTN","RORHL16",75,0)
 ;
"RTN","RORHL16",76,0)
 ; Return Values:
"RTN","RORHL16",77,0)
 ;       <0  Error code
"RTN","RORHL16",78,0)
 ;        0  Ok
"RTN","RORHL16",79,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL16",80,0)
 ;
"RTN","RORHL16",81,0)
OBX() ;
"RTN","RORHL16",82,0)
 N CS,ERRCNT,RC,OBID
"RTN","RORHL16",83,0)
 S (ERRCNT,RC)=0
"RTN","RORHL16",84,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL16",85,0)
 S CS=$E(HLECH)
"RTN","RORHL16",86,0)
 ;
"RTN","RORHL16",87,0)
 F OBID="BP^Blood Pressue^VA080","T^Tempreture^VA080","R^Respiration^VA080","P^Pulse^VA080","HT^Height^VA080","WT^Weight^VA080","PN^Pain^VA080"  D
"RTN","RORHL16",88,0)
 . D VITALTYP(OBID,CS)
"RTN","RORHL16",89,0)
 ;
"RTN","RORHL16",90,0)
 Q ERRCNT
"RTN","RORHL16",91,0)
 ;
"RTN","RORHL16",92,0)
 ;***** LOOPS THROUGH THE UTILITY GLOBAL FOR VITAL TYPE
"RTN","RORHL16",93,0)
VITALTYP(OBID,CS) ;
"RTN","RORHL16",94,0)
 N BODYMASS,DATA,DTE,IEN,MEASDATE,OBX5,TYPE,UNITS
"RTN","RORHL16",95,0)
 S TYPE=$P(OBID,U)
"RTN","RORHL16",96,0)
 Q:'$D(^UTILITY($J,"GMRVD",TYPE))
"RTN","RORHL16",97,0)
 ;---
"RTN","RORHL16",98,0)
 S DTE=""
"RTN","RORHL16",99,0)
 F  S DTE=$O(^UTILITY($J,"GMRVD",TYPE,DTE))  Q:'DTE  D
"RTN","RORHL16",100,0)
 . S IEN=""
"RTN","RORHL16",101,0)
 . F  S IEN=$O(^UTILITY($J,"GMRVD",TYPE,DTE,IEN))  Q:'IEN  D
"RTN","RORHL16",102,0)
 . . S DATA=^UTILITY($J,"GMRVD",TYPE,DTE,IEN)
"RTN","RORHL16",103,0)
 . . ;
"RTN","RORHL16",104,0)
 . . S MEASDATE=$P(DATA,U)  ;??? Temporary fix for Vitals API bug
"RTN","RORHL16",105,0)
 . . I $L(MEASDATE)=8  S:$E(MEASDATE,8)="0" MEASDATE=$E(MEASDATE,1,7)
"RTN","RORHL16",106,0)
 . . S MEASDATE=$$FM2HL^RORHL7(MEASDATE)
"RTN","RORHL16",107,0)
 . . S UNITS=$P(DATA,U,13)
"RTN","RORHL16",108,0)
 . . S BODYMASS=$S(TYPE="WT":$P(DATA,U,14),1:"")
"RTN","RORHL16",109,0)
 . . ;
"RTN","RORHL16",110,0)
 . . S OBX5=$P(DATA,U,8)_CS_$P(DATA,U,11)_CS_$P(DATA,U,17)
"RTN","RORHL16",111,0)
 . . D SETOBX(OBID,IEN,OBX5,UNITS,BODYMASS,MEASDATE)
"RTN","RORHL16",112,0)
 ;
"RTN","RORHL16",113,0)
 Q
"RTN","RORHL16",114,0)
 ;
"RTN","RORHL16",115,0)
 ;*** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL16",116,0)
SETOBX(PIECE3,PIECE4,PIECE5,PIECE6,PIECE7,PIECE14) ;
"RTN","RORHL16",117,0)
 N RORSEG
"RTN","RORHL16",118,0)
 ;--- Initialize the segment
"RTN","RORHL16",119,0)
 S RORSEG="OBX"
"RTN","RORHL16",120,0)
 ;--- OBX-2
"RTN","RORHL16",121,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL16",122,0)
 ;---
"RTN","RORHL16",123,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL16",124,0)
 S $P(RORSEG,HLFS,5)=PIECE4
"RTN","RORHL16",125,0)
 S $P(RORSEG,HLFS,6)=PIECE5
"RTN","RORHL16",126,0)
 S:$G(PIECE6)'="" $P(RORSEG,HLFS,7)=PIECE6
"RTN","RORHL16",127,0)
 S:$G(PIECE7)'="" $P(RORSEG,HLFS,8)=PIECE7
"RTN","RORHL16",128,0)
 S:$G(PIECE14)'="" $P(RORSEG,HLFS,15)=PIECE14
"RTN","RORHL16",129,0)
 ;--- OBX-11
"RTN","RORHL16",130,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL16",131,0)
 ;--- Store the segment
"RTN","RORHL16",132,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL16",133,0)
 Q
"RTN","RORHL17")
0^7^B33173796
"RTN","RORHL17",1,0)
RORHL17 ;HOIFO/BH - HL7 Problem List: OBR,OBX ; 9/30/04 1:48pm
"RTN","RORHL17",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,6,8**;May 14, 2002
"RTN","RORHL17",3,0)
 ;
"RTN","RORHL17",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL17",5,0)
 ;
"RTN","RORHL17",6,0)
 ; #2308         Controlled ???
"RTN","RORHL17",7,0)
 ; #2644         $$MOD^GMPLUTL3 (controlled)
"RTN","RORHL17",8,0)
 ;
"RTN","RORHL17",9,0)
 Q
"RTN","RORHL17",10,0)
 ;
"RTN","RORHL17",11,0)
 ;***** SEARCHES FOR Problem List DATA
"RTN","RORHL17",12,0)
 ;
"RTN","RORHL17",13,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL17",14,0)
 ;
"RTN","RORHL17",15,0)
 ; RORSTDT       Start Date (FileMan)
"RTN","RORHL17",16,0)
 ; RORENDT       End Date   (FileMan)
"RTN","RORHL17",17,0)
 ;
"RTN","RORHL17",18,0)
 ; Return Values:
"RTN","RORHL17",19,0)
 ;       <0  Error code
"RTN","RORHL17",20,0)
 ;        0  Ok
"RTN","RORHL17",21,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",22,0)
 ;
"RTN","RORHL17",23,0)
 ;
"RTN","RORHL17",24,0)
EN1(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL17",25,0)
 N CNT,CS,DFN,DIAG,FACILITY,GMRVSTR,IENS,MDATE,NOTE,NUMBER,PAT,PROBIEN,RC,REC,REC1,RORARR,RORBUF,RORMSG,STAT,SUB3,SUB5,TMP
"RTN","RORHL17",26,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",27,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL17",28,0)
 S CS=$E(HLECH,1)
"RTN","RORHL17",29,0)
 ;
"RTN","RORHL17",30,0)
 ;--- Check to see is any problems have been entered/modified
"RTN","RORHL17",31,0)
 ;--- during the data extraction time frame
"RTN","RORHL17",32,0)
 ;
"RTN","RORHL17",33,0)
 S MDATE=$$MOD^GMPLUTL3(RORDFN)
"RTN","RORHL17",34,0)
 Q:(MDATE<RORSTDT)!(MDATE'<RORENDT) 0
"RTN","RORHL17",35,0)
 ;
"RTN","RORHL17",36,0)
 ;--- Find newly entered problems or modified problems
"RTN","RORHL17",37,0)
 ;
"RTN","RORHL17",38,0)
 S PROBIEN=""
"RTN","RORHL17",39,0)
 F  S PROBIEN=$O(^AUPNPROB("AC",RORDFN,PROBIEN)) Q:'PROBIEN  D
"RTN","RORHL17",40,0)
 . K RORARR
"RTN","RORHL17",41,0)
 . S REC=$G(^AUPNPROB(PROBIEN,0))
"RTN","RORHL17",42,0)
 . S REC1=$G(^AUPNPROB(PROBIEN,1))
"RTN","RORHL17",43,0)
 . S MDATE=$P(REC,U,3)
"RTN","RORHL17",44,0)
 . Q:(MDATE<RORSTDT)!(MDATE'<RORENDT)
"RTN","RORHL17",45,0)
 . ;
"RTN","RORHL17",46,0)
 . S RORARR("OBR","FACIL")=$P(REC,U,6)
"RTN","RORHL17",47,0)
 . S RORARR("OBR","NMBR")=$P(REC,U,7)
"RTN","RORHL17",48,0)
 . S RORARR("OBR","COND")=$P(REC1,U,2)
"RTN","RORHL17",49,0)
 . S RORARR("OBR","DE")=$$FMTHL7^XLFDT($P(REC,U,8))
"RTN","RORHL17",50,0)
 . S RORARR("OBR","DOO")=$$CHECK($P(REC,U,13))
"RTN","RORHL17",51,0)
 . S RORARR("OBR","DR")=$$CHECK($P(REC1,U,7))
"RTN","RORHL17",52,0)
 . ;
"RTN","RORHL17",53,0)
 . S DIAG=$$GET1^DIQ(80,+$P(REC,U)_",",.01,"E",,"RORMSG")
"RTN","RORHL17",54,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL17",55,0)
 . . D DBS^RORERR("RORMSG",-99,,RORDFN,80,$P(REC,U,1)_",")
"RTN","RORHL17",56,0)
 . ;
"RTN","RORHL17",57,0)
 . S RORARR("OBR","DIAG")=DIAG
"RTN","RORHL17",58,0)
 . S RORARR("OBR","DR")=$$FMTHL7^XLFDT($P(REC1,U,9))
"RTN","RORHL17",59,0)
 . S RORARR("OBR","RP")=$P(REC1,U,4)
"RTN","RORHL17",60,0)
 . S RORARR("OBR","DLM")=$$FMTHL7^XLFDT(MDATE)
"RTN","RORHL17",61,0)
 . S RORARR("OBR","ST")=$P(REC,U,12)
"RTN","RORHL17",62,0)
 . ;
"RTN","RORHL17",63,0)
 . S RORARR("OBX","PR")=$$GET1^DIQ(9000011,PROBIEN,.05,"E")
"RTN","RORHL17",64,0)
 . S RORARR("OBX","PROB")=$$GET1^DIQ(9000011,PROBIEN,1.01,"E")
"RTN","RORHL17",65,0)
 . ;
"RTN","RORHL17",66,0)
 . I $D(^AUPNPROB(PROBIEN,11)) D
"RTN","RORHL17",67,0)
 . . S SUB3=0,CNT=0
"RTN","RORHL17",68,0)
 . . F  S SUB3=$O(^AUPNPROB(PROBIEN,11,SUB3)) Q:'SUB3  D
"RTN","RORHL17",69,0)
 . . . S FACILITY=$$GET1^DIQ(9000011.11,SUB3_","_PROBIEN,.01,"E")
"RTN","RORHL17",70,0)
 . . . Q:FACILITY=""
"RTN","RORHL17",71,0)
 . . . S FACILITY=$$ESCAPE^RORHL7(FACILITY)
"RTN","RORHL17",72,0)
 . . . S SUB5=0
"RTN","RORHL17",73,0)
 . . . F  S SUB5=$O(^AUPNPROB(PROBIEN,11,SUB3,11,SUB5)) Q:'SUB5  D
"RTN","RORHL17",74,0)
 . . . . S IENS=SUB5_","_SUB3_","_PROBIEN_","
"RTN","RORHL17",75,0)
 . . . . D GETS^DIQ(9000011.1111,IENS,".01;.03;.04","IE","RORBUF")
"RTN","RORHL17",76,0)
 . . . . S NUMBER=$G(RORBUF(9000011.1111,IENS,.01,"E"))
"RTN","RORHL17",77,0)
 . . . . S STAT=$G(RORBUF(9000011.1111,IENS,.04,"I"))
"RTN","RORHL17",78,0)
 . . . . S:STAT="" STAT="I"
"RTN","RORHL17",79,0)
 . . . . S NOTE=$G(RORBUF(9000011.1111,IENS,.03,"E"))
"RTN","RORHL17",80,0)
 . . . . S CNT=CNT+1
"RTN","RORHL17",81,0)
 . . . . S RORARR("OBX","NOTE",CNT)=FACILITY_CS_NUMBER_CS_STAT
"RTN","RORHL17",82,0)
 . . . . S RORARR("OBX","NOTE",CNT,0)=NOTE
"RTN","RORHL17",83,0)
 . ;
"RTN","RORHL17",84,0)
 . S TMP=$$OBR(.RORARR)
"RTN","RORHL17",85,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL17",86,0)
 . S TMP=$$OBX(.RORARR)
"RTN","RORHL17",87,0)
 . I TMP  S ERRCNT=ERRCNT+1  Q:TMP<0
"RTN","RORHL17",88,0)
 ;
"RTN","RORHL17",89,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL17",90,0)
 ;
"RTN","RORHL17",91,0)
 ;***** VALIDATES THE DATE
"RTN","RORHL17",92,0)
CHECK(DATE) ;
"RTN","RORHL17",93,0)
 Q:DATE'>0 ""
"RTN","RORHL17",94,0)
 Q:$E(DATE,1,3)>$E(DT,1,3) ""
"RTN","RORHL17",95,0)
 S:$E(DATE,4,5)="00" $E(DATE,4,5)="01"
"RTN","RORHL17",96,0)
 S:$E(DATE,6,7)="00" $E(DATE,6,7)="01"
"RTN","RORHL17",97,0)
 Q $$FM2HL^RORHL7(DATE)
"RTN","RORHL17",98,0)
 ;
"RTN","RORHL17",99,0)
 ;I $E(DATE,1,2)="20",$E(DATE,3,4)>$E(DT,2,3) Q ""
"RTN","RORHL17",100,0)
 ;
"RTN","RORHL17",101,0)
 ;***** PROBLEM LIST OBR SEGMENT BUILDER
"RTN","RORHL17",102,0)
 ;
"RTN","RORHL17",103,0)
 ; Return Values:
"RTN","RORHL17",104,0)
 ;       <0  Error code
"RTN","RORHL17",105,0)
 ;        0  Ok
"RTN","RORHL17",106,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",107,0)
 ;
"RTN","RORHL17",108,0)
OBR(RORARR) ;
"RTN","RORHL17",109,0)
 N CLASS,CS,ERRCNT,PRV,RC,RORMSG,RORSEG,TMP,TMP1
"RTN","RORHL17",110,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",111,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL17",112,0)
 S CS=$E(HLECH,1)
"RTN","RORHL17",113,0)
 ;
"RTN","RORHL17",114,0)
 ;--- Initialize the segment
"RTN","RORHL17",115,0)
 S RORSEG="OBR"
"RTN","RORHL17",116,0)
 ;
"RTN","RORHL17",117,0)
 ;--- OBR-3 - Filler Order Number
"RTN","RORHL17",118,0)
 S $P(RORSEG,HLFS,4)=RORARR("OBR","FACIL")_RORARR("OBR","NMBR")
"RTN","RORHL17",119,0)
 ;
"RTN","RORHL17",120,0)
 ;--- OBR-4 - Problem List CPT Code
"RTN","RORHL17",121,0)
 S $P(RORSEG,HLFS,5)="90125"_CS_"HOSPITAL CARE,NEW, INTERMED."_CS_"C4"
"RTN","RORHL17",122,0)
 ;
"RTN","RORHL17",123,0)
 ;--- OBR-6 - Requested Date/time
"RTN","RORHL17",124,0)
 S $P(RORSEG,HLFS,7)=RORARR("OBR","DE")
"RTN","RORHL17",125,0)
 ;
"RTN","RORHL17",126,0)
 ;--- OBR-7 - Observation Date/Time
"RTN","RORHL17",127,0)
 S $P(RORSEG,HLFS,8)=RORARR("OBR","DOO")
"RTN","RORHL17",128,0)
 ;
"RTN","RORHL17",129,0)
 ;--- OBR-8 - Observation End Date/Time
"RTN","RORHL17",130,0)
 S $P(RORSEG,HLFS,9)=RORARR("OBR","DR")
"RTN","RORHL17",131,0)
 ;
"RTN","RORHL17",132,0)
 ;--- OBR-13 -  Relevant Clinical Info.
"RTN","RORHL17",133,0)
 S $P(RORSEG,HLFS,14)=RORARR("OBR","DIAG")
"RTN","RORHL17",134,0)
 ;
"RTN","RORHL17",135,0)
 ;--- OBR-14 - Specimen Received Date/time
"RTN","RORHL17",136,0)
 S $P(RORSEG,HLFS,15)=RORARR("OBR","DR")
"RTN","RORHL17",137,0)
 ;
"RTN","RORHL17",138,0)
 ;--- OBR-16 - Ordering Provider
"RTN","RORHL17",139,0)
 S PRV=RORARR("OBR","RP")
"RTN","RORHL17",140,0)
 S TMP=$$GET1^DIQ(200,PRV_",",53.5,"E",,"RORMSG")
"RTN","RORHL17",141,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL17",142,0)
 . D DBS^RORERR("RORMSG",-99,,RORDFN,200,PRV_",")
"RTN","RORHL17",143,0)
 E  S $P(PRV,CS,5)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL17",144,0)
 S $P(RORSEG,HLFS,17)=PRV
"RTN","RORHL17",145,0)
 ;
"RTN","RORHL17",146,0)
 ;--- OBR-20 - Filler Field 1
"RTN","RORHL17",147,0)
 S $P(RORSEG,HLFS,21)=RORARR("OBR","COND")
"RTN","RORHL17",148,0)
 ;
"RTN","RORHL17",149,0)
 ;--- OBR-22 - Results Rpt/Status Change Date/time  
"RTN","RORHL17",150,0)
 S $P(RORSEG,HLFS,23)=RORARR("OBR","DLM")
"RTN","RORHL17",151,0)
 ;
"RTN","RORHL17",152,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL17",153,0)
 S $P(RORSEG,HLFS,25)="TX"
"RTN","RORHL17",154,0)
 ;
"RTN","RORHL17",155,0)
 ;--- OBR-25 - Result Status
"RTN","RORHL17",156,0)
 S TMP1=RORARR("OBR","ST")
"RTN","RORHL17",157,0)
 S TMP=$S(TMP1="A":"F",TMP1="I":"R",1:"")
"RTN","RORHL17",158,0)
 S $P(RORSEG,HLFS,26)=TMP
"RTN","RORHL17",159,0)
 ;
"RTN","RORHL17",160,0)
 ;--- OBR-44 - Division
"RTN","RORHL17",161,0)
 S $P(RORSEG,HLFS,45)=$$SITE1^RORUTL03(CS)
"RTN","RORHL17",162,0)
 ;
"RTN","RORHL17",163,0)
 ;--- Store the segment
"RTN","RORHL17",164,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL17",165,0)
 Q ERRCNT
"RTN","RORHL17",166,0)
 ;
"RTN","RORHL17",167,0)
 ;***** PROBLEM LIST OBX SEGMENT(S) BUILDER
"RTN","RORHL17",168,0)
 ;
"RTN","RORHL17",169,0)
 ; Return Values:
"RTN","RORHL17",170,0)
 ;       <0  Error code
"RTN","RORHL17",171,0)
 ;        0  Ok
"RTN","RORHL17",172,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",173,0)
 ;
"RTN","RORHL17",174,0)
OBX(RORARR) ;
"RTN","RORHL17",175,0)
 N CS,ERRCNT,NDX,OBX3,RC
"RTN","RORHL17",176,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",177,0)
 S HLFS=$G(RORHL("FS"),"|"),HLECH=$G(RORHL("ECH"),"^~\&")
"RTN","RORHL17",178,0)
 S CS=$E(HLECH)
"RTN","RORHL17",179,0)
 ;
"RTN","RORHL17",180,0)
 I $D(RORARR("OBX","PR")) D
"RTN","RORHL17",181,0)
 . S OBX3="PRVN"_CS_"Provider Narrative"_CS_"VA080"
"RTN","RORHL17",182,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PR")))
"RTN","RORHL17",183,0)
 ;
"RTN","RORHL17",184,0)
 I $D(RORARR("OBX","PROB")) D
"RTN","RORHL17",185,0)
 . S OBX3="EXPR"_CS_"Expression"_CS_"VA080"
"RTN","RORHL17",186,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PROB")))
"RTN","RORHL17",187,0)
 ;
"RTN","RORHL17",188,0)
 I $D(RORARR("OBX","NOTE")) D
"RTN","RORHL17",189,0)
 . S OBX3="NOTE"_CS_"Note Narrative"_CS_"VA080"
"RTN","RORHL17",190,0)
 . S NDX=0
"RTN","RORHL17",191,0)
 . F  S NDX=$O(RORARR("OBX","NOTE",NDX)) Q:'NDX  D
"RTN","RORHL17",192,0)
 . . S REC=RORARR("OBX","NOTE",NDX)
"RTN","RORHL17",193,0)
 . . D SETOBX(OBX3,REC,$$ESCAPE^RORHL7(RORARR("OBX","NOTE",NDX,0)))
"RTN","RORHL17",194,0)
 ;
"RTN","RORHL17",195,0)
 Q ERRCNT
"RTN","RORHL17",196,0)
 ;
"RTN","RORHL17",197,0)
 ;*** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL17",198,0)
SETOBX(PIECE3,PIECE4,PIECE5) ;
"RTN","RORHL17",199,0)
 N RORSEG
"RTN","RORHL17",200,0)
 ;--- Initialize the segment
"RTN","RORHL17",201,0)
 S RORSEG="OBX"
"RTN","RORHL17",202,0)
 ;--- OBX-2
"RTN","RORHL17",203,0)
 S $P(RORSEG,HLFS,3)="FT"
"RTN","RORHL17",204,0)
 ;--- OBX-3
"RTN","RORHL17",205,0)
 S $P(RORSEG,HLFS,4)=PIECE3
"RTN","RORHL17",206,0)
 ;--- OBX-4
"RTN","RORHL17",207,0)
 S:$G(PIECE4)'="" $P(RORSEG,HLFS,5)=PIECE4
"RTN","RORHL17",208,0)
 ;--- OBX-5
"RTN","RORHL17",209,0)
 S $P(RORSEG,HLFS,6)=PIECE5
"RTN","RORHL17",210,0)
 ;--- OBX-11
"RTN","RORHL17",211,0)
 S $P(RORSEG,HLFS,12)="F"
"RTN","RORHL17",212,0)
 ;--- Store the segment
"RTN","RORHL17",213,0)
 D SETSEG^RORHL7(.RORSEG)
"RTN","RORHL17",214,0)
 Q
"RTN","RORHL7")
0^22^B47865883
"RTN","RORHL7",1,0)
RORHL7 ;HCIOFO/SG - HL7 UTILITIES ; 12/16/04 3:43pm
"RTN","RORHL7",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**2,5,8**;May 14, 2002
"RTN","RORHL7",3,0)
 ;
"RTN","RORHL7",4,0)
 Q
"RTN","RORHL7",5,0)
 ;
"RTN","RORHL7",6,0)
 ;***** RETURNS THE BHS SEGMENT
"RTN","RORHL7",7,0)
 ;
"RTN","RORHL7",8,0)
 ; BID           Batch message ID
"RTN","RORHL7",9,0)
 ;
"RTN","RORHL7",10,0)
 ; [BDT]         Batch message creation time in internal FileMan
"RTN","RORHL7",11,0)
 ;               format (NOW by default)
"RTN","RORHL7",12,0)
 ;
"RTN","RORHL7",13,0)
 ; [COMMENT]     Optional comment
"RTN","RORHL7",14,0)
 ;
"RTN","RORHL7",15,0)
 ; The RORHL local variable must be initialized by the $$INIT^RORHL7
"RTN","RORHL7",16,0)
 ; function before calling this entry point.
"RTN","RORHL7",17,0)
 ;
"RTN","RORHL7",18,0)
BHS(BID,BDT,COMMENT) ;
"RTN","RORHL7",19,0)
 N CS,SEG,TMP
"RTN","RORHL7",20,0)
 D BHS^HLFNC3(.RORHL,BID,.SEG)
"RTN","RORHL7",21,0)
 Q:$G(SEG)="" ""
"RTN","RORHL7",22,0)
 S HLFS=RORHL("FS"),HLECH=RORHL("ECH"),CS=$E(HLECH,1)
"RTN","RORHL7",23,0)
 ;--- Post-processing
"RTN","RORHL7",24,0)
 S SEG=SEG_$G(SEG(1))
"RTN","RORHL7",25,0)
 S:$G(BDT)'>0 BDT=$$NOW^XLFDT
"RTN","RORHL7",26,0)
 S TMP=$E($P($$SITE^VASITE,U,3),1,3)
"RTN","RORHL7",27,0)
 S $P(SEG,HLFS,4)=TMP_CS_$G(^XMB("NETNAME"))_CS_"DNS"
"RTN","RORHL7",28,0)
 S $P(SEG,HLFS,5)="ROR AAC"
"RTN","RORHL7",29,0)
 S $P(SEG,HLFS,7)=$$FMTHL7^XLFDT(BDT)
"RTN","RORHL7",30,0)
 S TMP=$P(SEG,HLFS,9)
"RTN","RORHL7",31,0)
 S $P(TMP,CS,3)=$P(TMP,CS,3)_$E(HLECH,2)_$G(RORHL("ETN"))
"RTN","RORHL7",32,0)
 S $P(SEG,HLFS,9)=TMP
"RTN","RORHL7",33,0)
 S $P(SEG,HLFS,10)=$G(COMMENT)
"RTN","RORHL7",34,0)
 Q SEG
"RTN","RORHL7",35,0)
 ;
"RTN","RORHL7",36,0)
 ;***** RETURNS BTS SEGMENT
"RTN","RORHL7",37,0)
 ;
"RTN","RORHL7",38,0)
 ; MSGCNT        Batch message count
"RTN","RORHL7",39,0)
 ; [COMMENT]     Batch comment
"RTN","RORHL7",40,0)
 ;
"RTN","RORHL7",41,0)
 ; The RORHL variable must be initialized by the INIT^HLFNC2 before
"RTN","RORHL7",42,0)
 ; calling this entry point
"RTN","RORHL7",43,0)
 ;
"RTN","RORHL7",44,0)
BTS(MSGCNT,COMMENT) ;
"RTN","RORHL7",45,0)
 Q "BTS"_RORHL("FS")_MSGCNT_RORHL("FS")_$G(COMMENT)
"RTN","RORHL7",46,0)
 ;
"RTN","RORHL7",47,0)
 ;***** CREATES A NEW MESSAGE IN THE BATCH
"RTN","RORHL7",48,0)
 ;
"RTN","RORHL7",49,0)
 ; The function adds a new message header to the batch. If the batch
"RTN","RORHL7",50,0)
 ; does not exist yet, it is created.
"RTN","RORHL7",51,0)
 ;
"RTN","RORHL7",52,0)
 ; [.RORMSH]     Reference to a variable in what a MSH segment of
"RTN","RORHL7",53,0)
 ;               the message is returned.
"RTN","RORHL7",54,0)
 ;
"RTN","RORHL7",55,0)
 ; Return Values:
"RTN","RORHL7",56,0)
 ;        <0  Error Code
"RTN","RORHL7",57,0)
 ;        >0  Index of a subnode of the ^TMP("HLS",$J) that
"RTN","RORHL7",58,0)
 ;            contains the new MSH segment.
"RTN","RORHL7",59,0)
 ;
"RTN","RORHL7",60,0)
 ; MSH segment is returned as a value of the RORMSH parameter. In case
"RTN","RORHL7",61,0)
 ; of a long segment, continuations are returned as subnodes.
"RTN","RORHL7",62,0)
 ;
"RTN","RORHL7",63,0)
 ; Several nodes (HL7*) in ROREXT are set and the ^TMP("HLS",$J) node
"RTN","RORHL7",64,0)
 ; is deleted by this entry point before it creates a new batch.
"RTN","RORHL7",65,0)
 ;
"RTN","RORHL7",66,0)
CREATE(RORMSH) ;
"RTN","RORHL7",67,0)
 N NDX,RC,TMP  K RORMSH
"RTN","RORHL7",68,0)
 Q:$G(ROREXT("HL7PROT"))="" $$ERROR^RORERR(-25)
"RTN","RORHL7",69,0)
 ;--- Create a message stub for the new batch message
"RTN","RORHL7",70,0)
 ;    (if it has not been created before)
"RTN","RORHL7",71,0)
 I '$G(ROREXT("HL7MTIEN"))  D  Q:$G(RC)<0 RC
"RTN","RORHL7",72,0)
 . N RORMID,RORIEN,RORDT
"RTN","RORHL7",73,0)
 . ;--- Set up HL7 environment variables
"RTN","RORHL7",74,0)
 . S RC=$$INIT($NA(^TMP("HLS",$J)))  Q:RC<0
"RTN","RORHL7",75,0)
 . ;--- Create a stub
"RTN","RORHL7",76,0)
 . D CREATE^HLTF(.RORMID,.RORIEN,.RORDT)
"RTN","RORHL7",77,0)
 . ;--- Save parameters of the new batch message
"RTN","RORHL7",78,0)
 . S (ROREXT("HL7CNT"),ROREXT("HL7SIZE"))=0
"RTN","RORHL7",79,0)
 . S ROREXT("HL7DT")=RORDT
"RTN","RORHL7",80,0)
 . S ROREXT("HL7MID")=RORMID
"RTN","RORHL7",81,0)
 . S ROREXT("HL7MTIEN")=RORIEN
"RTN","RORHL7",82,0)
 . ;--- Initialize temporary storage
"RTN","RORHL7",83,0)
 . K ^TMP("HLS",$J)
"RTN","RORHL7",84,0)
 ;--- Initialize the HL7 environment variables
"RTN","RORHL7",85,0)
 S RC=$$INIT()  Q:RC<0 RC
"RTN","RORHL7",86,0)
 S NDX=$G(ROREXT("HL7PTR"))+1
"RTN","RORHL7",87,0)
 ;--- Reset the Set ID's for all supported segments
"RTN","RORHL7",88,0)
 F TMP="OBR","OBX","PV1","ZRD","ZSP"  D
"RTN","RORHL7",89,0)
 . S ROREXT("HL7SID",TMP)=1
"RTN","RORHL7",90,0)
 ;--- Create and store a MSH segment for individual message
"RTN","RORHL7",91,0)
 S ROREXT("HL7CNT")=ROREXT("HL7CNT")+1
"RTN","RORHL7",92,0)
 S TMP=ROREXT("HL7MID")_"-"_ROREXT("HL7CNT")
"RTN","RORHL7",93,0)
 D MSH^HLFNC2(.RORHL,TMP,.RORMSH)
"RTN","RORHL7",94,0)
 M ^TMP("HLS",$J,NDX)=RORMSH
"RTN","RORHL7",95,0)
 S ROREXT("HL7SIZE")=ROREXT("HL7SIZE")+$L(RORMSH)+$L($G(RORMSH(1)))+1
"RTN","RORHL7",96,0)
 S ROREXT("HL7PTR")=NDX
"RTN","RORHL7",97,0)
 Q NDX
"RTN","RORHL7",98,0)
 ;
"RTN","RORHL7",99,0)
 ;***** REPLACES ENCODING CHARACTERS WITH ESCAPE CODES
"RTN","RORHL7",100,0)
 ;
"RTN","RORHL7",101,0)
 ; STR           Source string
"RTN","RORHL7",102,0)
 ;
"RTN","RORHL7",103,0)
 ; The HLFS and HLECH variables must be initialized before
"RTN","RORHL7",104,0)
 ; calling this function (either by the INIT^HLFNC2 or manually).
"RTN","RORHL7",105,0)
 ;
"RTN","RORHL7",106,0)
 ; The function returns the source string with encoding
"RTN","RORHL7",107,0)
 ; characters replaced with corresponding escape codes.
"RTN","RORHL7",108,0)
 ;
"RTN","RORHL7",109,0)
ESCAPE(STR) ;
"RTN","RORHL7",110,0)
 Q:STR="" STR
"RTN","RORHL7",111,0)
 N BUF,ESC,CH,I1,I2,SCLST
"RTN","RORHL7",112,0)
 S SCLST=HLECH_HLFS
"RTN","RORHL7",113,0)
 ;--- Find all occurrences of encoding characters and
"RTN","RORHL7",114,0)
 ;    save their positions to a local array
"RTN","RORHL7",115,0)
 F I1=1:1:5  S CH=$E(SCLST,I1),I2=1  Q:CH=""  D
"RTN","RORHL7",116,0)
 . F  S I2=$F(STR,CH,I2)  Q:'I2  S BUF(I2-1)=I1
"RTN","RORHL7",117,0)
 Q:$D(BUF)<10 STR
"RTN","RORHL7",118,0)
 ;--- Replace encoding characters with escape codes
"RTN","RORHL7",119,0)
 S (BUF,I2)="",ESC=$E(HLECH,3)  S:ESC="" ESC="\"
"RTN","RORHL7",120,0)
 F  S I1=I2,I2=$O(BUF(I2))  Q:I2=""  D
"RTN","RORHL7",121,0)
 . S BUF=BUF_$E(STR,I1+1,I2-1)_ESC_$E("SRETF",BUF(I2))_ESC
"RTN","RORHL7",122,0)
 Q BUF_$E(STR,I1+1,$L(STR))
"RTN","RORHL7",123,0)
 ;
"RTN","RORHL7",124,0)
 ;***** CHECKS THE DATE/TIME AND CONVERTS IT TO HL7 FORMAT
"RTN","RORHL7",125,0)
 ;
"RTN","RORHL7",126,0)
 ; DATE          Date/time in FileMan format
"RTN","RORHL7",127,0)
 ;
"RTN","RORHL7",128,0)
FM2HL(DATE) ;
"RTN","RORHL7",129,0)
 Q:'$G(DATE) """"""
"RTN","RORHL7",130,0)
 S DATE=$$FMTHL7^XLFDT(DATE)
"RTN","RORHL7",131,0)
 Q $S(DATE>0:DATE,1:"")
"RTN","RORHL7",132,0)
 ;
"RTN","RORHL7",133,0)
 ;***** INITIALIZES THE HL7 ENVIRONMENT VARIABLES
"RTN","RORHL7",134,0)
 ;
"RTN","RORHL7",135,0)
 ; [ROR8FILE]    Closed root of the buffer that will be used for
"RTN","RORHL7",136,0)
 ;               construction of the HL7 message.
"RTN","RORHL7",137,0)
 ;
"RTN","RORHL7",138,0)
 ; Return Values:
"RTN","RORHL7",139,0)
 ;        <0  Error Code
"RTN","RORHL7",140,0)
 ;         0  Ok
"RTN","RORHL7",141,0)
 ;
"RTN","RORHL7",142,0)
INIT(ROR8FILE) ;
"RTN","RORHL7",143,0)
 N TMP  K RORHL
"RTN","RORHL7",144,0)
 D INIT^HLFNC2(ROREXT("HL7PROT"),.RORHL)
"RTN","RORHL7",145,0)
 Q:$G(RORHL) $$ERROR^RORERR(-23,,RORHL)
"RTN","RORHL7",146,0)
 S TMP=$G(RORHL("ECH"))
"RTN","RORHL7",147,0)
 Q:$L(TMP)<4 $$ERROR^RORERR(-75)
"RTN","RORHL7",148,0)
 ;--- Initialize the nodes required for the API's
"RTN","RORHL7",149,0)
 S:$G(ROR8FILE)'="" ROREXT("HL7BUF")=ROR8FILE
"RTN","RORHL7",150,0)
 D:$G(ROREXT("HL7BUF"))'=""
"RTN","RORHL7",151,0)
 . S ROREXT("HL7PTR")=+$O(@ROREXT("HL7BUF")@(""),-1)
"RTN","RORHL7",152,0)
 Q 0
"RTN","RORHL7",153,0)
 ;
"RTN","RORHL7",154,0)
 ;***** CHECKS IF MAXIMUM BATCH SIZE IS REACHED
"RTN","RORHL7",155,0)
 ;
"RTN","RORHL7",156,0)
 ; [RESERVE]     Number of bytes reserved in the batch (0 by default)
"RTN","RORHL7",157,0)
 ;
"RTN","RORHL7",158,0)
 ; Return Values:
"RTN","RORHL7",159,0)
 ;         0  Messages can be added to the batch
"RTN","RORHL7",160,0)
 ;         1  Maximum size of the batch has been reached
"RTN","RORHL7",161,0)
 ;
"RTN","RORHL7",162,0)
ISMAXSZ(RESERVE) ;
"RTN","RORHL7",163,0)
 Q:$G(ROREXT("MAXHL7SIZE"))'>0 0
"RTN","RORHL7",164,0)
 Q:($G(ROREXT("HL7SIZE"))+$G(RESERVE))<ROREXT("MAXHL7SIZE") 0
"RTN","RORHL7",165,0)
 S $P(ROREXT("HL7SIZE"),U,2)=1
"RTN","RORHL7",166,0)
 Q 1
"RTN","RORHL7",167,0)
 ;
"RTN","RORHL7",168,0)
 ;***** RETURNS NUMBER OF MESSAGES IN THE CURRENT BATCH
"RTN","RORHL7",169,0)
MSGCNT() ;
"RTN","RORHL7",170,0)
 Q $G(ROREXT("HL7CNT"))
"RTN","RORHL7",171,0)
 ;
"RTN","RORHL7",172,0)
 ;***** RETURNS TEXT EXPLANATIONS OF THE HL7 MESSAGE STATUS
"RTN","RORHL7",173,0)
 ;
"RTN","RORHL7",174,0)
 ; MSGST         Status value returned by the $$MSGSTAT^HLUTIL
"RTN","RORHL7",175,0)
 ;
"RTN","RORHL7",176,0)
MSGSTXT(MSGST) ;
"RTN","RORHL7",177,0)
 N ST  S ST=+MSGST
"RTN","RORHL7",178,0)
 Q:'ST "Message does not exist"
"RTN","RORHL7",179,0)
 Q:ST=1 "Waiting in queue"
"RTN","RORHL7",180,0)
 Q:ST=1.5 "Opening connection"
"RTN","RORHL7",181,0)
 Q:ST=1.7 "Awaiting response"
"RTN","RORHL7",182,0)
 Q:ST=2 "Awaiting application ack"
"RTN","RORHL7",183,0)
 Q:ST=3 "Successfully completed"
"RTN","RORHL7",184,0)
 Q:ST=4 "Error"
"RTN","RORHL7",185,0)
 Q:ST=8 "Being generated"
"RTN","RORHL7",186,0)
 Q:ST=9 "Awaiting processing"
"RTN","RORHL7",187,0)
 Q "Unknown"
"RTN","RORHL7",188,0)
 ;
"RTN","RORHL7",189,0)
 ;***** RETURNS THE POINTER TO LAST SEGMENT IN THE MESSAGE BUFFER
"RTN","RORHL7",190,0)
PTR() Q +$G(ROREXT("HL7PTR"))
"RTN","RORHL7",191,0)
 ;
"RTN","RORHL7",192,0)
 ;***** DELETES AN INCOMPLETE MESSAGE FROM THE ^TMP("HLS",$J)
"RTN","RORHL7",193,0)
 ;
"RTN","RORHL7",194,0)
 ; MSHPTR        An index of the MSH segment in the ^TMP("HLS",$J)
"RTN","RORHL7",195,0)
 ;
"RTN","RORHL7",196,0)
ROLLBACK(MSHPTR) ;
"RTN","RORHL7",197,0)
 N I,I1  S I=+MSHPTR
"RTN","RORHL7",198,0)
 F  Q:I=""  D  S I=$O(^TMP("HLS",$J,I))
"RTN","RORHL7",199,0)
 . ;--- Decrease current size of the batch
"RTN","RORHL7",200,0)
 . S I1=$L($G(^TMP("HLS",$J,I)))
"RTN","RORHL7",201,0)
 . S ROREXT("HL7SIZE")=$G(ROREXT("HL7SIZE"))-I1-1
"RTN","RORHL7",202,0)
 . S I1=""
"RTN","RORHL7",203,0)
 . F  S I1=$O(^TMP("HLS",$J,I,I1))  Q:I1=""  D
"RTN","RORHL7",204,0)
 . . S ROREXT("HL7SIZE")=ROREXT("HL7SIZE")-$L(^TMP("HLS",$J,I,I1))
"RTN","RORHL7",205,0)
 . ;--- Delete the segment
"RTN","RORHL7",206,0)
 . K ^TMP("HLS",$J,I)
"RTN","RORHL7",207,0)
 ;--- Validate current size of the batch
"RTN","RORHL7",208,0)
 S:$G(ROREXT("HL7SIZE"))<0 ROREXT("HL7SIZE")=0
"RTN","RORHL7",209,0)
 ;--- Decrease number of messages in the batch
"RTN","RORHL7",210,0)
 S:$G(ROREXT("HL7CNT"))>0 ROREXT("HL7CNT")=ROREXT("HL7CNT")-1
"RTN","RORHL7",211,0)
 Q
"RTN","RORHL7",212,0)
 ;
"RTN","RORHL7",213,0)
 ;***** SENDS THE BATCH MESSAGE
"RTN","RORHL7",214,0)
 ;
"RTN","RORHL7",215,0)
 ; .MID          Reference to a local variable where the batch
"RTN","RORHL7",216,0)
 ;               message ID (returned by the GENERATE^HLMA) is
"RTN","RORHL7",217,0)
 ;               returned to.
"RTN","RORHL7",218,0)
 ;
"RTN","RORHL7",219,0)
 ; Return Values:
"RTN","RORHL7",220,0)
 ;        <0  Error Code
"RTN","RORHL7",221,0)
 ;         0  Ok
"RTN","RORHL7",222,0)
 ;        >0  There was nothing to send
"RTN","RORHL7",223,0)
 ;
"RTN","RORHL7",224,0)
 ; Several nodes (HL7*) in the ROREXT and the ^TMP("HLS",$J) node
"RTN","RORHL7",225,0)
 ; are deleted by this entry point.
"RTN","RORHL7",226,0)
 ;
"RTN","RORHL7",227,0)
SEND(MID) ;
"RTN","RORHL7",228,0)
 N RC,RORBUF,RORHLP  S MID=""
"RTN","RORHL7",229,0)
 Q:$G(ROREXT("HL7PROT"))="" $$ERROR^RORERR(-25)
"RTN","RORHL7",230,0)
 ;--- Quit if there is nothing to send
"RTN","RORHL7",231,0)
 Q:'$G(ROREXT("HL7MTIEN"))!($D(^TMP("HLS",$J))<10) 1
"RTN","RORHL7",232,0)
 ;--- Set up the HL7 environment variables
"RTN","RORHL7",233,0)
 D INIT^HLFNC2(ROREXT("HL7PROT"),.RORHL)
"RTN","RORHL7",234,0)
 Q:$G(RORHL) $$ERROR^RORERR(-23,,RORHL)
"RTN","RORHL7",235,0)
 ;--- Send the message
"RTN","RORHL7",236,0)
 S RORHLP("NAMESPACE")="ROR"
"RTN","RORHL7",237,0)
 D GENERATE^HLMA(ROREXT("HL7PROT"),"GB",1,.RORBUF,ROREXT("HL7MTIEN"),.RORHLP)
"RTN","RORHL7",238,0)
 ;D DIRECT^HLMA(ROREXT("HL7PROT"),"GB",1,.RORBUF,ROREXT("HL7MTIEN"),.RORHLP)
"RTN","RORHL7",239,0)
 S RC=$S($P(RORBUF,U,2):$$ERROR^RORERR(-24,,RORBUF),1:0)
"RTN","RORHL7",240,0)
 S MID=$P(RORBUF,U)
"RTN","RORHL7",241,0)
 ;--- Cleanup if there is no error or not in debug mode
"RTN","RORHL7",242,0)
 D:'$G(RORPARM("DEBUG"))!(RC'<0)
"RTN","RORHL7",243,0)
 . F TMP="HL7CNT","HL7DT","HL7MTIEN","HL7SIZE"  K ROREXT(TMP)
"RTN","RORHL7",244,0)
 . K ^TMP("HLS",$J)
"RTN","RORHL7",245,0)
 Q RC
"RTN","RORHL7",246,0)
 ;
"RTN","RORHL7",247,0)
 ;***** ASSIGNS THE 'SET ID'
"RTN","RORHL7",248,0)
 ;
"RTN","RORHL7",249,0)
 ; SEGNAME       Name of the HL7 segment
"RTN","RORHL7",250,0)
 ; [DISINC]      Disable increment of the Set ID
"RTN","RORHL7",251,0)
 ;
"RTN","RORHL7",252,0)
 ; Return Values:
"RTN","RORHL7",253,0)
 ;        ""  Not required for this segment
"RTN","RORHL7",254,0)
 ;        >0  Value for the Set ID field
"RTN","RORHL7",255,0)
 ;
"RTN","RORHL7",256,0)
SETID(SEGNAME,DISINC) ;
"RTN","RORHL7",257,0)
 N SETID
"RTN","RORHL7",258,0)
 Q:$G(SEGNAME)="" ""
"RTN","RORHL7",259,0)
 S SETID=+$G(ROREXT("HL7SID",SEGNAME))
"RTN","RORHL7",260,0)
 Q:SETID'>0 ""
"RTN","RORHL7",261,0)
 S:'$G(DISINC) ROREXT("HL7SID",SEGNAME)=SETID+1
"RTN","RORHL7",262,0)
 Q SETID
"RTN","RORHL7",263,0)
 ;
"RTN","RORHL7",264,0)
 ;***** STORES THE SEGMENT INTO THE ^TMP("HLS",$J) BUFFER
"RTN","RORHL7",265,0)
 ;
"RTN","RORHL7",266,0)
 ; SEG           HL7 segment
"RTN","RORHL7",267,0)
 ;
"RTN","RORHL7",268,0)
 ; The SETSEG^RORHL7 procedure stores the HL7 segment into the
"RTN","RORHL7",269,0)
 ; standard HL7 buffer ^TMP("HLS",$J). The <TAB>, <CR> and <LF>
"RTN","RORHL7",270,0)
 ; characters are replaced with spaces. Long segments are split among 
"RTN","RORHL7",271,0)
 ; sub-nodes of the main segment node.
"RTN","RORHL7",272,0)
 ;
"RTN","RORHL7",273,0)
 ; The RORHL array and some nodes of the ROREXT array must be
"RTN","RORHL7",274,0)
 ; initialized (either by the $$INIT^RORHL7 or manually) before
"RTN","RORHL7",275,0)
 ; calling this function.
"RTN","RORHL7",276,0)
 ;
"RTN","RORHL7",277,0)
SETSEG(SEG) ;
"RTN","RORHL7",278,0)
 N I1,I2,MAXLEN,NODE,PTR,PTR1,SID,SL
"RTN","RORHL7",279,0)
 S NODE=ROREXT("HL7BUF"),PTR=$G(ROREXT("HL7PTR"))+1
"RTN","RORHL7",280,0)
 S SL=$L(SEG),MAXLEN=245  K @NODE@(PTR)
"RTN","RORHL7",281,0)
 ;--- Assign the Set ID if necessary
"RTN","RORHL7",282,0)
 S SID=$$SETID($P(SEG,RORHL("FS")))
"RTN","RORHL7",283,0)
 S:SID>0 $P(SEG,RORHL("FS"),2)=SID
"RTN","RORHL7",284,0)
 ;--- Store the segment
"RTN","RORHL7",285,0)
 S @NODE@(PTR)=$TR($E(SEG,1,MAXLEN),$C(9,10,13),"   ")
"RTN","RORHL7",286,0)
 S ROREXT("HL7SIZE")=$G(ROREXT("HL7SIZE"))+SL+1
"RTN","RORHL7",287,0)
 ;--- Split the segment into sub-nodes if necessary
"RTN","RORHL7",288,0)
 D:SL>MAXLEN
"RTN","RORHL7",289,0)
 . S I2=MAXLEN
"RTN","RORHL7",290,0)
 . F PTR1=1:1  S I1=I2+1,I2=I1+MAXLEN-1  Q:I1>SL  D
"RTN","RORHL7",291,0)
 . . S @NODE@(PTR,PTR1)=$TR($E(SEG,I1,I2),$C(9,10,13),"   ")
"RTN","RORHL7",292,0)
 ;--- Save the pointer
"RTN","RORHL7",293,0)
 S ROREXT("HL7PTR")=PTR
"RTN","RORHL7",294,0)
 Q
"RTN","RORNTEG")
0^9^B18937424
"RTN","RORNTEG",1,0)
RORNTEG ;ISC/XTSUMBLD KERNEL - Package checksum checker ; 2/23/05 8:56am
"RTN","RORNTEG",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**3,4,5,6,8**;May 14, 2002
"RTN","RORNTEG",3,0)
 ;;7.3;3041110.080209
"RTN","RORNTEG",4,0)
 S XT4="I 1",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG",5,0)
CONT F XT1=1:1 S XT2=$T(ROU+XT1) Q:XT2=""  S X=$P(XT2," ",1),XT3=$P(XT2,";",3) X XT4 I $T W !,X X ^%ZOSF("TEST") S:'$T XT3=0 X:XT3 ^%ZOSF("RSUM") W ?10,$S('XT3:"Routine not in UCI",XT3'=Y:"Calculated "_$C(7)_Y_", off by "_(Y-XT3),1:"ok")
"RTN","RORNTEG",6,0)
 G CONT^RORNTEG0
"RTN","RORNTEG",7,0)
 K %1,%2,%3,X,Y,XT1,XT2,XT3,XT4 Q
"RTN","RORNTEG",8,0)
ONE S XT4="I $D(^UTILITY($J,X))",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG",9,0)
 W !,"Check a subset of routines:" K ^UTILITY($J) X ^%ZOSF("RSEL")
"RTN","RORNTEG",10,0)
 W ! G CONT
"RTN","RORNTEG",11,0)
ROU ;;
"RTN","RORNTEG",12,0)
ROR ;;2393819
"RTN","RORNTEG",13,0)
ROR01 ;;1117
"RTN","RORNTEG",14,0)
ROR02 ;;1122
"RTN","RORNTEG",15,0)
ROR10 ;;5784769
"RTN","RORNTEG",16,0)
RORACK ;;4221963
"RTN","RORNTEG",17,0)
RORACK01 ;;6457683
"RTN","RORNTEG",18,0)
RORAPI01 ;;2291186
"RTN","RORNTEG",19,0)
RORDD ;;4886229
"RTN","RORNTEG",20,0)
RORDD01 ;;919515
"RTN","RORNTEG",21,0)
RORERR ;;3863551
"RTN","RORNTEG",22,0)
RORERR10 ;;9157206
"RTN","RORNTEG",23,0)
RORERR11 ;;17589767
"RTN","RORNTEG",24,0)
RORERR12 ;;13407882
"RTN","RORNTEG",25,0)
RORERR20 ;;13500365
"RTN","RORNTEG",26,0)
ROREVT01 ;;2008294
"RTN","RORNTEG",27,0)
ROREXPR ;;3054011
"RTN","RORNTEG",28,0)
ROREXT ;;4259663
"RTN","RORNTEG",29,0)
ROREXT01 ;;4887747
"RTN","RORNTEG",30,0)
ROREXT02 ;;4504914
"RTN","RORNTEG",31,0)
ROREXT03 ;;1955488
"RTN","RORNTEG",32,0)
ROREXTUT ;;5466521
"RTN","RORNTEG",33,0)
RORHDT ;;3515691
"RTN","RORNTEG",34,0)
RORHDT01 ;;2383372
"RTN","RORNTEG",35,0)
RORHDT02 ;;2424530
"RTN","RORNTEG",36,0)
RORHDT03 ;;4235780
"RTN","RORNTEG",37,0)
RORHDT04 ;;8399917
"RTN","RORNTEG",38,0)
RORHDT05 ;;2635437
"RTN","RORNTEG",39,0)
RORHDTAC ;;3280350
"RTN","RORNTEG",40,0)
RORHDTUT ;;4590218
"RTN","RORNTEG",41,0)
RORHL01 ;;2652082
"RTN","RORNTEG",42,0)
RORHL02 ;;7424588
"RTN","RORNTEG",43,0)
RORHL03 ;;5325577
"RTN","RORNTEG",44,0)
RORHL031 ;;7575501
"RTN","RORNTEG",45,0)
RORHL04 ;;5193863
"RTN","RORNTEG",46,0)
RORHL05 ;;1858773
"RTN","RORNTEG",47,0)
RORHL06 ;;4688456
"RTN","RORNTEG",48,0)
RORHL07 ;;4114719
"RTN","RORNTEG",49,0)
RORHL071 ;;4095427
"RTN","RORNTEG",50,0)
RORHL08 ;;6190681
"RTN","RORNTEG",51,0)
RORHL081 ;;7681710
"RTN","RORNTEG",52,0)
RORHL09 ;;6760261
"RTN","RORNTEG",53,0)
RORHL10 ;;6840817
"RTN","RORNTEG",54,0)
RORHL11 ;;5507013
"RTN","RORNTEG",55,0)
RORHL12 ;;2446424
"RTN","RORNTEG",56,0)
RORHL121 ;;10798141
"RTN","RORNTEG",57,0)
RORHL13 ;;3406802
"RTN","RORNTEG",58,0)
RORHL14 ;;5434428
"RTN","RORNTEG",59,0)
RORHL15 ;;5689840
"RTN","RORNTEG",60,0)
RORHL16 ;;3293867
"RTN","RORNTEG",61,0)
RORHL17 ;;5969995
"RTN","RORNTEG",62,0)
RORHL21 ;;1631067
"RTN","RORNTEG",63,0)
RORHL7 ;;5463554
"RTN","RORNTEG",64,0)
RORHL7A ;;2252045
"RTN","RORNTEG",65,0)
RORHLUT1 ;;1863278
"RTN","RORNTEG",66,0)
RORICR01 ;;1541289
"RTN","RORNTEG",67,0)
RORICR02 ;;2080214
"RTN","RORNTEG",68,0)
RORICR03 ;;4746011
"RTN","RORNTEG",69,0)
RORICREX ;;3978828
"RTN","RORNTEG",70,0)
RORICRUT ;;362893
"RTN","RORNTEG",71,0)
RORKIDS ;;6161632
"RTN","RORNTEG",72,0)
RORLOCK ;;4131518
"RTN","RORNTEG",73,0)
RORLOG ;;5965990
"RTN","RORNTEG",74,0)
RORLOG01 ;;3182899
"RTN","RORNTEG",75,0)
RORPUT01 ;;5495626
"RTN","RORNTEG",76,0)
RORREP01 ;;9015849
"RTN","RORNTEG",77,0)
RORREP02 ;;10910524
"RTN","RORNTEG",78,0)
RORRP007 ;;4488913
"RTN","RORNTEG",79,0)
RORRP010 ;;1854669
"RTN","RORNTEG",80,0)
RORRP011 ;;1877613
"RTN","RORNTEG",81,0)
RORRP012 ;;2760144
"RTN","RORNTEG",82,0)
RORRP013 ;;4685153
"RTN","RORNTEG",83,0)
RORRP014 ;;1851772
"RTN","RORNTEG",84,0)
RORRP015 ;;3365112
"RTN","RORNTEG",85,0)
RORRP016 ;;1837419
"RTN","RORNTEG",86,0)
RORRP017 ;;2082982
"RTN","RORNTEG",87,0)
RORRP018 ;;1399897
"RTN","RORNTEG",88,0)
RORRP019 ;;3662396
"RTN","RORNTEG",89,0)
RORRP020 ;;5106473
"RTN","RORNTEG",90,0)
RORRP021 ;;2207749
"RTN","RORNTEG",91,0)
RORRP022 ;;1246520
"RTN","RORNTEG",92,0)
RORRP023 ;;2273081
"RTN","RORNTEG",93,0)
RORRP024 ;;3821351
"RTN","RORNTEG",94,0)
RORRP025 ;;4917408
"RTN","RORNTEG",95,0)
RORRP026 ;;10022660
"RTN","RORNTEG",96,0)
RORRP027 ;;6640755
"RTN","RORNTEG",97,0)
RORRP029 ;;1527601
"RTN","RORNTEG",98,0)
RORRP030 ;;4942418
"RTN","RORNTEG",99,0)
RORRP031 ;;4897990
"RTN","RORNTEG",100,0)
RORRP032 ;;4897358
"RTN","RORNTEG",101,0)
RORRP033 ;;4204729
"RTN","RORNTEG",102,0)
RORRP034 ;;3265353
"RTN","RORNTEG",103,0)
RORRP035 ;;1615985
"RTN","RORNTEG",104,0)
RORRP1 ;;2796927
"RTN","RORNTEG",105,0)
RORRP10 ;;476541
"RTN","RORNTEG",106,0)
RORRP2 ;;4566009
"RTN","RORNTEG",107,0)
RORRP3 ;;3482249
"RTN","RORNTEG",108,0)
RORRP4 ;;5079227
"RTN","RORNTEG",109,0)
RORRP5 ;;1825009
"RTN","RORNTEG",110,0)
RORRP6 ;;3979336
"RTN","RORNTEG",111,0)
RORRP7 ;;4925487
"RTN","RORNTEG",112,0)
RORRP8 ;;3614530
"RTN","RORNTEG",113,0)
RORRP9 ;;7962639
"RTN","RORNTEG",114,0)
RORSET01 ;;4676823
"RTN","RORNTEG",115,0)
RORSETU1 ;;2833894
"RTN","RORNTEG",116,0)
RORSETU2 ;;3134457
"RTN","RORNTEG",117,0)
RORTSK ;;3791239
"RTN","RORNTEG",118,0)
RORTSK01 ;;6875571
"RTN","RORNTEG",119,0)
RORTSK02 ;;4617240
"RTN","RORNTEG",120,0)
RORTSK03 ;;2086919
"RTN","RORNTEG",121,0)
RORTSK10 ;;5534300
"RTN","RORNTEG",122,0)
RORTSK11 ;;3125173
"RTN","RORNTEG",123,0)
RORTXT ;;141117
"RTN","RORNTEG",124,0)
RORUPD ;;3654485
"RTN","RORNTEG",125,0)
RORUPD01 ;;7989261
"RTN","RORNTEG",126,0)
RORUPD04 ;;5149249
"RTN","RORNTEG",127,0)
RORUPD05 ;;7177293
"RTN","RORNTEG",128,0)
RORUPD06 ;;3084967
"RTN","RORNTEG",129,0)
RORUPD07 ;;2080523
"RTN","RORNTEG",130,0)
RORUPD08 ;;3835247
"RTN","RORNTEG",131,0)
RORUPD09 ;;2534692
"RTN","RORNTEG",132,0)
RORUPD50 ;;3446977
"RTN","RORNTEG",133,0)
RORUPD51 ;;6373941
"RTN","RORNTEG",134,0)
RORUPD52 ;;2583157
"RTN","RORNTEG",135,0)
RORUPDUT ;;7040706
"RTN","RORNTEG",136,0)
RORUPEX ;;3382608
"RTN","RORNTEG",137,0)
RORUPP01 ;;3620688
"RTN","RORNTEG",138,0)
RORUPP02 ;;3149282
"RTN","RORNTEG",139,0)
RORUPR ;;5403597
"RTN","RORNTEG",140,0)
RORUPR1 ;;10865390
"RTN","RORNTEG",141,0)
RORUTL01 ;;4698317
"RTN","RORNTEG",142,0)
RORUTL02 ;;5461265
"RTN","RORNTEG",143,0)
RORUTL03 ;;8322358
"RTN","RORNTEG",144,0)
RORUTL04 ;;2076790
"RTN","RORNTEG",145,0)
RORUTL05 ;;6817092
"RTN","RORNTEG",146,0)
RORUTL06 ;;9129215
"RTN","RORNTEG",147,0)
RORUTL07 ;;2762456
"RTN","RORNTEG",148,0)
RORUTL08 ;;3052928
"RTN","RORNTEG",149,0)
RORUTL09 ;;1836557
"RTN","RORNTEG",150,0)
RORUTL10 ;;5738979
"RTN","RORNTEG",151,0)
RORUTL11 ;;942933
"RTN","RORNTEG",152,0)
RORUTL14 ;;1275115
"RTN","RORNTEG",153,0)
RORUTL15 ;;5565629
"RTN","RORNTEG",154,0)
RORUTL16 ;;1877801
"RTN","RORNTEG",155,0)
RORUTL17 ;;6970881
"RTN","RORNTEG",156,0)
RORUTL18 ;;927178
"RTN","RORNTEG",157,0)
RORVM001 ;;1220339
"RTN","RORNTEG",158,0)
RORX000 ;;2233772
"RTN","RORNTEG",159,0)
RORX001 ;;6923293
"RTN","RORNTEG",160,0)
RORX002 ;;3760280
"RTN","RORNTEG",161,0)
RORX003 ;;5404752
"RTN","RORNTEG",162,0)
RORX003A ;;7951022
"RTN","RORNTEG",163,0)
RORX004 ;;4970351
"RTN","RORNTEG",164,0)
RORX005 ;;2080717
"RTN","RORNTEG",165,0)
RORX005A ;;7242281
"RTN","RORNTEG0")
0^10^B4127660
"RTN","RORNTEG0",1,0)
RORNTEG0 ;ISC/XTSUMBLD KERNEL - Package checksum checker ; 2/23/05 8:04am
"RTN","RORNTEG0",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**3,4,5,6,8**;May 14, 2002
"RTN","RORNTEG0",3,0)
 ;;7.3;3041006.080209
"RTN","RORNTEG0",4,0)
 S XT4="I 1",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG0",5,0)
CONT F XT1=1:1 S XT2=$T(ROU+XT1) Q:XT2=""  S X=$P(XT2," ",1),XT3=$P(XT2,";",3) X XT4 I $T W !,X X ^%ZOSF("TEST") S:'$T XT3=0 X:XT3 ^%ZOSF("RSUM") W ?10,$S('XT3:"Routine not in UCI",XT3'=Y:"Calculated "_$C(7)_Y_", off by "_(Y-XT3),1:"ok")
"RTN","RORNTEG0",6,0)
 ;
"RTN","RORNTEG0",7,0)
 K %1,%2,%3,X,Y,XT1,XT2,XT3,XT4 Q
"RTN","RORNTEG0",8,0)
ONE S XT4="I $D(^UTILITY($J,X))",X=$T(+3) W !!,"Checksum routine created on ",$P(X,";",4)," by KERNEL V",$P(X,";",3),!
"RTN","RORNTEG0",9,0)
 W !,"Check a subset of routines:" K ^UTILITY($J) X ^%ZOSF("RSEL")
"RTN","RORNTEG0",10,0)
 W ! G CONT
"RTN","RORNTEG0",11,0)
ROU ;;
"RTN","RORNTEG0",12,0)
RORX005B ;;6769514
"RTN","RORNTEG0",13,0)
RORX005C ;;11147808
"RTN","RORNTEG0",14,0)
RORX005U ;;266710
"RTN","RORNTEG0",15,0)
RORX006 ;;1929501
"RTN","RORNTEG0",16,0)
RORX006A ;;5949892
"RTN","RORNTEG0",17,0)
RORX006C ;;4940545
"RTN","RORNTEG0",18,0)
RORX007 ;;7810802
"RTN","RORNTEG0",19,0)
RORX007A ;;2762724
"RTN","RORNTEG0",20,0)
RORX008 ;;1936486
"RTN","RORNTEG0",21,0)
RORX008A ;;6748545
"RTN","RORNTEG0",22,0)
RORX009 ;;2635430
"RTN","RORNTEG0",23,0)
RORX009A ;;7103569
"RTN","RORNTEG0",24,0)
RORX009C ;;7407361
"RTN","RORNTEG0",25,0)
RORX010 ;;5947630
"RTN","RORNTEG0",26,0)
RORX011 ;;7479478
"RTN","RORNTEG0",27,0)
RORX012 ;;2280944
"RTN","RORNTEG0",28,0)
RORX012A ;;6424353
"RTN","RORNTEG0",29,0)
RORX013 ;;1826953
"RTN","RORNTEG0",30,0)
RORX013A ;;7146803
"RTN","RORNTEG0",31,0)
RORX013C ;;3062651
"RTN","RORNTEG0",32,0)
RORX014 ;;1995239
"RTN","RORNTEG0",33,0)
RORX014A ;;6019953
"RTN","RORNTEG0",34,0)
RORXU001 ;;2415732
"RTN","RORNTEG0",35,0)
RORXU002 ;;7009537
"RTN","RORNTEG0",36,0)
RORXU003 ;;5395052
"RTN","RORNTEG0",37,0)
RORXU004 ;;405249
"RTN","RORNTEG0",38,0)
RORXU005 ;;2334516
"RTN","RORNTEG0",39,0)
RORXU006 ;;4584240
"RTN","RORNTEG0",40,0)
RORXU007 ;;5726275
"RTN","RORP006")
1^19
"RTN","RORP008")
0^^B12393124
"RTN","RORP008",1,0)
RORP008 ;HCIOFO/SG - PATCH INSTALLATION ROUTINE (ROR*1.0*8) ; 2/23/05 10:36am
"RTN","RORP008",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**8**;May 14, 2002
"RTN","RORP008",3,0)
 ;
"RTN","RORP008",4,0)
 ;***** ENVIRONMENT CHECK
"RTN","RORP008",5,0)
 N TMP
"RTN","RORP008",6,0)
 I $G(DUZ)'>0  D  S XPDABORT=2  Q
"RTN","RORP008",7,0)
 . W !!,"The DUZ variable must be defined!",!
"RTN","RORP008",8,0)
 ;--- Check the security key(s)
"RTN","RORP008",9,0)
 I '$D(^XUSEC("ROR VA IRM",DUZ))  D  Q
"RTN","RORP008",10,0)
 . W !!,"You must have the ROR VA IRM security key!",!
"RTN","RORP008",11,0)
 . S XPDABORT=2
"RTN","RORP008",12,0)
 ;--- Check if at least one of the patches is installed
"RTN","RORP008",13,0)
 S TMP=0
"RTN","RORP008",14,0)
 S:$$PATCH^XPDUTL("LA*5.2*64") TMP=TMP+1
"RTN","RORP008",15,0)
 S:$$PATCH^XPDUTL("LA*5.2*70") TMP=TMP+1
"RTN","RORP008",16,0)
 I 'TMP  D  S XPDABORT=2  Q
"RTN","RORP008",17,0)
 . W !!,"At least one of the following patches must be installed",!
"RTN","RORP008",18,0)
 . W "before installation of this patch: LA*5.2*64 or LA*5.2*70!",!
"RTN","RORP008",19,0)
 Q
"RTN","RORP008",20,0)
 ;
"RTN","RORP008",21,0)
 ;***** ERROR PROCESSING
"RTN","RORP008",22,0)
ERROR ;
"RTN","RORP008",23,0)
 N TMP  S XPDABORT=1
"RTN","RORP008",24,0)
 I $D(ZTQUEUED)  D  D ALERT^RORKIDS(DUZ,-43,REGNAME,,TMP)
"RTN","RORP008",25,0)
 . S TMP=+$G(RORPARM("KIDS"))
"RTN","RORP008",26,0)
 . S TMP=$S(TMP=1:"pre-",TMP=2:"post-",1:"")_"install"
"RTN","RORP008",27,0)
 D DSPSTK^RORERR(),ABTMSG^RORKIDS()
"RTN","RORP008",28,0)
 Q
"RTN","RORP008",29,0)
 ;
"RTN","RORP008",30,0)
 ;***** ESTABLISHES A NEW BOUNDARY FOR HISTORICAL DATA EXTRACTION
"RTN","RORP008",31,0)
 ;
"RTN","RORP008",32,0)
 ; [RORREG]      Registry IEN and registry name separated by the '^'
"RTN","RORP008",33,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORP008",34,0)
 ;
"RTN","RORP008",35,0)
 ; If some of these parameters are omitted or equal to an empty
"RTN","RORP008",36,0)
 ; strings, their values must be defined as the RORPARM("KIDS")
"RTN","RORP008",37,0)
 ; sub-nodes of the same name.
"RTN","RORP008",38,0)
 ;
"RTN","RORP008",39,0)
 ; Return Values:
"RTN","RORP008",40,0)
 ;       <0  Error code
"RTN","RORP008",41,0)
 ;        0  Ok
"RTN","RORP008",42,0)
 ;
"RTN","RORP008",43,0)
HDTBNDRY(RORREG) ;
"RTN","RORP008",44,0)
 ;--- Get the registry
"RTN","RORP008",45,0)
 S:'$G(RORREG) RORREG=$$PARAM^RORKIDS("RORREG")
"RTN","RORP008",46,0)
 ;--- Process registry records
"RTN","RORP008",47,0)
 Q +$$PREPARE^RORSETU2(RORREG)
"RTN","RORP008",48,0)
 ;
"RTN","RORP008",49,0)
 ;***** POST-INSTALL ENTRY POINT
"RTN","RORP008",50,0)
POS ;
"RTN","RORP008",51,0)
 N RORERROR      ; Error processing data
"RTN","RORP008",52,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORP008",53,0)
 N RORPARM       ; Application parameters
"RTN","RORP008",54,0)
 ;
"RTN","RORP008",55,0)
 N RC,REGIEN,REGNAME,TMP
"RTN","RORP008",56,0)
 S RORPARM("DEVELOPER")=1   ; Enable modifications
"RTN","RORP008",57,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORP008",58,0)
 S RORPARM("KIDS")=2        ; Post-install indicator
"RTN","RORP008",59,0)
 S RORPARM("LOG")=1         ; Enable error recording
"RTN","RORP008",60,0)
 ;
"RTN","RORP008",61,0)
 ;--- Open a new log
"RTN","RORP008",62,0)
 S (TMP("VA HEPC"),TMP("VA ICR"))=""
"RTN","RORP008",63,0)
 S TMP=$$OPEN^RORLOG(.TMP,0,XPDNM_" POST-INSTALL STARTED")
"RTN","RORP008",64,0)
 K TMP
"RTN","RORP008",65,0)
 ;
"RTN","RORP008",66,0)
 ;=== HEPC
"RTN","RORP008",67,0)
 ;
"RTN","RORP008",68,0)
 S REGNAME="VA HEPC"        ; Registry Name
"RTN","RORP008",69,0)
 S RORPARM("KIDS","RORDRGAD")="000004035099"
"RTN","RORP008",70,0)
 ;
"RTN","RORP008",71,0)
 ;--- IEN of the registry
"RTN","RORP008",72,0)
 S REGIEN=$$REGIEN^RORUTL02(REGNAME)  G:REGIEN<0 ERROR
"RTN","RORP008",73,0)
 S RORPARM("KIDS","RORREG")=REGIEN_U_REGNAME
"RTN","RORP008",74,0)
 ;
"RTN","RORP008",75,0)
 ;--- Update registry parameters
"RTN","RORP008",76,0)
 G:$$CP^RORKIDS("POS05","$$REGPARM^RORP008")<0 ERROR
"RTN","RORP008",77,0)
 ;
"RTN","RORP008",78,0)
 ;--- Update the DRUG THERAPY LIST multiple
"RTN","RORP008",79,0)
 G:$$CP^RORKIDS("POS10","$$DRUGADD^RORPUT01")<0 ERROR
"RTN","RORP008",80,0)
 ;
"RTN","RORP008",81,0)
 ;--- Establish a new boundary for data extraction
"RTN","RORP008",82,0)
 G:$$CP^RORKIDS("POS15","$$HDTBNDRY^RORP008")<0 ERROR
"RTN","RORP008",83,0)
 ;
"RTN","RORP008",84,0)
 ;=== ICR
"RTN","RORP008",85,0)
 ;
"RTN","RORP008",86,0)
 S REGNAME="VA ICR"         ; Registry Name
"RTN","RORP008",87,0)
 ;
"RTN","RORP008",88,0)
 ;--- IEN of the registry
"RTN","RORP008",89,0)
 S REGIEN=$$REGIEN^RORUTL02(REGNAME)  G:REGIEN<0 ERROR
"RTN","RORP008",90,0)
 S RORPARM("KIDS","RORREG")=REGIEN_U_REGNAME
"RTN","RORP008",91,0)
 ;
"RTN","RORP008",92,0)
 ;--- Update registry parameters
"RTN","RORP008",93,0)
 G:$$CP^RORKIDS("POS20","$$REGPARM^RORP008")<0 ERROR
"RTN","RORP008",94,0)
 ;
"RTN","RORP008",95,0)
 ;--- Establish a new boundary for data extraction
"RTN","RORP008",96,0)
 G:$$CP^RORKIDS("POS25","$$HDTBNDRY^RORP008")<0 ERROR
"RTN","RORP008",97,0)
 ;
"RTN","RORP008",98,0)
 ;--- Close the log
"RTN","RORP008",99,0)
 D CLOSE^RORLOG(XPDNM_" POST-INSTALL COMPLETED")
"RTN","RORP008",100,0)
 Q
"RTN","RORP008",101,0)
 ;
"RTN","RORP008",102,0)
 ;***** UPDATES THE ICR REGISTRY PARAMETERS
"RTN","RORP008",103,0)
 ;
"RTN","RORP008",104,0)
 ; [RORREG]      Registry IEN and registry name separated by the '^'
"RTN","RORP008",105,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORP008",106,0)
 ;
"RTN","RORP008",107,0)
 ; If some of these parameters are omitted or equal to an empty
"RTN","RORP008",108,0)
 ; strings, their values must be defined as the RORPARM("KIDS")
"RTN","RORP008",109,0)
 ; sub-nodes of the same name.
"RTN","RORP008",110,0)
 ;
"RTN","RORP008",111,0)
 ; Return Values:
"RTN","RORP008",112,0)
 ;       <0  Error code
"RTN","RORP008",113,0)
 ;        0  Ok
"RTN","RORP008",114,0)
 ;
"RTN","RORP008",115,0)
REGPARM(RORREG) ;
"RTN","RORP008",116,0)
 N IENS,RC,RORFDA,RORMSG,TMP
"RTN","RORP008",117,0)
 ;--- Get the registry
"RTN","RORP008",118,0)
 S:'$G(RORREG) RORREG=$$PARAM^RORKIDS("RORREG")
"RTN","RORP008",119,0)
 S IENS=+RORREG_","
"RTN","RORP008",120,0)
 ;--- Update the historical data extraction fields
"RTN","RORP008",121,0)
 S RORFDA(798.1,IENS,21.01)=2850101  ; HDT START DATE
"RTN","RORP008",122,0)
 S RORFDA(798.1,IENS,21.06)=750      ; HDT PATIENTS PER BATCH
"RTN","RORP008",123,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORP008",124,0)
 Q:$G(DIERR)>0 $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORP008",125,0)
 ;--- Success
"RTN","RORP008",126,0)
 Q 0
"RTN","RORRP024")
0^21^B18900459
"RTN","RORRP024",1,0)
RORRP024 ;HCIOFO/SG - RPC: VISTA USERS ; 2/14/05 10:00am
"RTN","RORRP024",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORRP024",3,0)
 ;
"RTN","RORRP024",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP024",5,0)
 ;
"RTN","RORRP024",6,0)
 ; #10060        Read access (FileMan) to the NEW PERSON file
"RTN","RORRP024",7,0)
 ;
"RTN","RORRP024",8,0)
 Q
"RTN","RORRP024",9,0)
 ;
"RTN","RORRP024",10,0)
 ;***** RETURNS THE DEFAULT DIVISION FOR THE USER
"RTN","RORRP024",11,0)
 ;
"RTN","RORRP024",12,0)
 ; USER          User IEN in file #200 (DUZ)
"RTN","RORRP024",13,0)
 ;
"RTN","RORRP024",14,0)
 ; Return Values:
"RTN","RORRP024",15,0)
 ;      ...  Default Division
"RTN","RORRP024",16,0)
 ;             ^01: IEN (in the INSTITUTION file)
"RTN","RORRP024",17,0)
 ;             ^02: Name
"RTN","RORRP024",18,0)
 ;
"RTN","RORRP024",19,0)
DFLTDIV(USER) ;
"RTN","RORRP024",20,0)
 N DIV,IENS,IR,RORBUF,RORMSG,TMP
"RTN","RORRP024",21,0)
 S IENS=","_(+USER)_",",TMP="@;.01I;.01E;1I"
"RTN","RORRP024",22,0)
 D LIST^DIC(200.02,IENS,TMP,"PQ",,,,"#",,,"RORBUF","RORMSG")
"RTN","RORRP024",23,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,200,IENS)
"RTN","RORRP024",24,0)
 S DIV=""
"RTN","RORRP024",25,0)
 ;--- Look for default division
"RTN","RORRP024",26,0)
 D:$G(RORBUF("DILIST",0))>0
"RTN","RORRP024",27,0)
 . S IR=0
"RTN","RORRP024",28,0)
 . F  S IR=$O(RORBUF("DILIST",IR))  Q:IR'>0  D  Q:DIV'=""
"RTN","RORRP024",29,0)
 . . S TMP=$G(RORBUF("DILIST",IR,0))
"RTN","RORRP024",30,0)
 . . S:$P(TMP,U,4) DIV=$P(TMP,U,2,3)
"RTN","RORRP024",31,0)
 . ;--- If name of the default division is not available
"RTN","RORRP024",32,0)
 . ;    and the only division is associated with the user
"RTN","RORRP024",33,0)
 . ;--- then use this division as the default one.
"RTN","RORRP024",34,0)
 . I $P(DIV,U,2)=""  D:RORBUF("DILIST",0)<2
"RTN","RORRP024",35,0)
 . . S DIV=$P($G(RORBUF("DILIST",1,0)),U,2,3)
"RTN","RORRP024",36,0)
 ;--- If default division is not available, use the site
"RTN","RORRP024",37,0)
 Q $S($P(DIV,U,2)'="":DIV,1:$P($$SITE^VASITE(),U,1,2))
"RTN","RORRP024",38,0)
 ;
"RTN","RORRP024",39,0)
 ;***** RETURNS INFORMATION ABOUT THE USER
"RTN","RORRP024",40,0)
 ; RPC: [ROR GET USER IFNO]
"RTN","RORRP024",41,0)
 ;
"RTN","RORRP024",42,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP024",43,0)
 ;               are returned to.
"RTN","RORRP024",44,0)
 ;
"RTN","RORRP024",45,0)
 ; [USER]        User IEN in the NEW PERSON file. By default
"RTN","RORRP024",46,0)
 ;               (if $G(USER)'>0), the DUZ is used).
"RTN","RORRP024",47,0)
 ;
"RTN","RORRP024",48,0)
 ; Return Values:
"RTN","RORRP024",49,0)
 ;
"RTN","RORRP024",50,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP024",51,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP024",52,0)
 ; details).
"RTN","RORRP024",53,0)
 ;
"RTN","RORRP024",54,0)
 ; Otherwise, the user info is returned in the RESULTS(0).
"RTN","RORRP024",55,0)
 ; 
"RTN","RORRP024",56,0)
 ; RESULTS(0)            User Info
"RTN","RORRP024",57,0)
 ;                         ^01: IEN
"RTN","RORRP024",58,0)
 ;                         ^02: Name
"RTN","RORRP024",59,0)
 ;                         ^03: Office Phone
"RTN","RORRP024",60,0)
 ;                         ^04: Nickname
"RTN","RORRP024",61,0)
 ;                         ^05: Read Timeout
"RTN","RORRP024",62,0)
 ;                         ^06: Default Division IEN
"RTN","RORRP024",63,0)
 ;                         ^07: Default Division Name
"RTN","RORRP024",64,0)
 ;                         ^08: Institution IEN
"RTN","RORRP024",65,0)
 ;                         ^09: Institution Name
"RTN","RORRP024",66,0)
 ;                         ^10: Station Number (with suffix)
"RTN","RORRP024",67,0)
 ;
"RTN","RORRP024",68,0)
USERINFO(RESULTS,USER) ;
"RTN","RORRP024",69,0)
 N IENS,RORBUF,RORERRDL,RORMSG,TMP
"RTN","RORRP024",70,0)
 D CLEAR^RORERR("USERINFO^RORRP024",1)
"RTN","RORRP024",71,0)
 K RESULTS  S RESULTS(0)=0
"RTN","RORRP024",72,0)
 I $G(USER)'>0  S USER=+$G(DUZ)  Q:USER'>0
"RTN","RORRP024",73,0)
 ;--- Load the data
"RTN","RORRP024",74,0)
 S IENS=USER_","
"RTN","RORRP024",75,0)
 D GETS^DIQ(200,IENS,".01;.132;13",,"RORBUF","RORMSG")
"RTN","RORRP024",76,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP024",77,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,200)  K ^TMP("DILIST",$J)
"RTN","RORRP024",78,0)
 ;--- Compile the result
"RTN","RORRP024",79,0)
 S RESULTS(0)=USER
"RTN","RORRP024",80,0)
 S $P(RESULTS(0),U,2)=$G(RORBUF(200,IENS,.01))  ; Name
"RTN","RORRP024",81,0)
 S $P(RESULTS(0),U,3)=$G(RORBUF(200,IENS,.132)) ; Office Phone
"RTN","RORRP024",82,0)
 S $P(RESULTS(0),U,4)=$G(RORBUF(200,IENS,13))   ; Nick Name
"RTN","RORRP024",83,0)
 S $P(RESULTS(0),U,5)=$$DTIME^XUP(USER)         ; Read Timeout
"RTN","RORRP024",84,0)
 S TMP=$$DFLTDIV(USER)
"RTN","RORRP024",85,0)
 S $P(RESULTS(0),U,6,7)=$P(TMP,U,1,2)           ; Default Division
"RTN","RORRP024",86,0)
 S $P(RESULTS(0),U,8,10)=$$SITE^VASITE()
"RTN","RORRP024",87,0)
 Q
"RTN","RORRP024",88,0)
 ;
"RTN","RORRP024",89,0)
 ;***** RETURNS THE LIST OF VISTA USERS
"RTN","RORRP024",90,0)
 ; RPC: [ROR LIST VISTA USERS]
"RTN","RORRP024",91,0)
 ;
"RTN","RORRP024",92,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP024",93,0)
 ;               are returned to.
"RTN","RORRP024",94,0)
 ;
"RTN","RORRP024",95,0)
 ; PART          The search pattern (partial match restriction)
"RTN","RORRP024",96,0)
 ;
"RTN","RORRP024",97,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP024",98,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP024",99,0)
 ;                    direction of normal traversal.
"RTN","RORRP024",100,0)
 ;                 D  Get default division for each user
"RTN","RORRP024",101,0)
 ;                 P  Select providers only (check for the PROVIDER
"RTN","RORRP024",102,0)
 ;                    security key)
"RTN","RORRP024",103,0)
 ;
"RTN","RORRP024",104,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP024",105,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP024",106,0)
 ;
"RTN","RORRP024",107,0)
 ; [FROM]        The index entry(s) from which to begin the list.
"RTN","RORRP024",108,0)
 ;               You should use the pieces of the @RESULTS@(0) node
"RTN","RORRP024",109,0)
 ;               (starting from the second one) to continue the
"RTN","RORRP024",110,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP024",111,0)
 ;
"RTN","RORRP024",112,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP024",113,0)
 ;                     the resulting list.
"RTN","RORRP024",114,0)
 ;
"RTN","RORRP024",115,0)
 ; The ^TMP("DILIST",$J) global node is used by the procedure.
"RTN","RORRP024",116,0)
 ;
"RTN","RORRP024",117,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP024",118,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP024",119,0)
 ;
"RTN","RORRP024",120,0)
 ; Return Values:
"RTN","RORRP024",121,0)
 ;
"RTN","RORRP024",122,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP024",123,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP024",124,0)
 ; details).
"RTN","RORRP024",125,0)
 ;
"RTN","RORRP024",126,0)
 ; Otherwise, number of VistA users and the value of the FROM
"RTN","RORRP024",127,0)
 ; parameter for the next procedure call are returned in the
"RTN","RORRP024",128,0)
 ; @RESULTS@(0) and the subsequent nodes of the global array
"RTN","RORRP024",129,0)
 ; contain the users.
"RTN","RORRP024",130,0)
 ; 
"RTN","RORRP024",131,0)
 ; @RESULTS@(0)          Result Descriptor
"RTN","RORRP024",132,0)
 ;                         ^01: Number of users
"RTN","RORRP024",133,0)
 ;                         ^02: Values that comprise the FROM
"RTN","RORRP024",134,0)
 ;                         ^nn: parameter for the subsequent call
"RTN","RORRP024",135,0)
 ;
"RTN","RORRP024",136,0)
 ; @RESULTS@(i)          User
"RTN","RORRP024",137,0)
 ;                         ^01: IEN
"RTN","RORRP024",138,0)
 ;                         ^02: Name
"RTN","RORRP024",139,0)
 ;                         ^03: Office Phone
"RTN","RORRP024",140,0)
 ;                         ^04: Nickname
"RTN","RORRP024",141,0)
 ;                         ^05: reserved
"RTN","RORRP024",142,0)
 ;                         ^06: Default Division IEN  (only if D flag)
"RTN","RORRP024",143,0)
 ;                         ^07: Default Division Name (only if D flag)
"RTN","RORRP024",144,0)
 ;
"RTN","RORRP024",145,0)
USERLIST(RESULTS,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP024",146,0)
 N BUF,FIELDS,I,RC,RORERRDL,SCR,TMP
"RTN","RORRP024",147,0)
 D CLEAR^RORERR("USERLIST^RORRP024",1)
"RTN","RORRP024",148,0)
 K RESULTS  S RESULTS=$NA(^TMP("DILIST",$J))  K @RESULTS
"RTN","RORRP024",149,0)
 ;--- Check the parameters
"RTN","RORRP024",150,0)
 S RC=0  D  I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP024",151,0)
 . ;--- Flags
"RTN","RORRP024",152,0)
 . S FLAGS=$$UP^XLFSTR($G(FLAGS))
"RTN","RORRP024",153,0)
 . ;--- Others
"RTN","RORRP024",154,0)
 . S PART=$G(PART),FROM=$G(FROM)
"RTN","RORRP024",155,0)
 . S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP024",156,0)
 ;--- Setup the start point
"RTN","RORRP024",157,0)
 F I=1:1  S TMP=$P(FROM,U,I)  Q:TMP=""  S FROM(I)=TMP
"RTN","RORRP024",158,0)
 S FROM=$G(FROM(1))
"RTN","RORRP024",159,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP024",160,0)
 S SCR=""
"RTN","RORRP024",161,0)
 S:FLAGS["P" SCR=SCR_"I $D(^XUSEC(""PROVIDER"",Y))"
"RTN","RORRP024",162,0)
 ;--- Query the file
"RTN","RORRP024",163,0)
 S FIELDS="@;.01;.132;13",TMP="P"_$S(FLAGS["B":"B",1:"")
"RTN","RORRP024",164,0)
 D LIST^DIC(200,,FIELDS,TMP,NUMBER,.FROM,PART,"B",SCR,,,"RORMSG")
"RTN","RORRP024",165,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP024",166,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,200)  K ^TMP("DILIST",$J)
"RTN","RORRP024",167,0)
 ;--- Add default divisions
"RTN","RORRP024",168,0)
 I FLAGS["D"  S I=0  D
"RTN","RORRP024",169,0)
 . F  S I=$O(@RESULTS@(I))  Q:I'>0  D
"RTN","RORRP024",170,0)
 . . S $P(@RESULTS@(I,0),U,6,7)=$P($$DFLTDIV(+@RESULTS@(I,0)),U,1,2)
"RTN","RORRP024",171,0)
 ;--- Success
"RTN","RORRP024",172,0)
 S TMP=$G(^TMP("DILIST",$J,0)),BUF=+$P(TMP,U)
"RTN","RORRP024",173,0)
 K ^TMP("DILIST",$J,0)
"RTN","RORRP024",174,0)
 I $P(TMP,U,3)  S I=0  D
"RTN","RORRP024",175,0)
 . F  S I=$O(FROM(I))  Q:I'>0  S TMP=FROM(I)  S:TMP'="" BUF=BUF_U_TMP
"RTN","RORRP024",176,0)
 S @RESULTS@(0)=BUF
"RTN","RORRP024",177,0)
 Q
"RTN","RORRP030")
0^4^B27555685
"RTN","RORRP030",1,0)
RORRP030 ;HCIOFO/SG - RPC: PATIENT (IN)ACTIVATE/DELETE ; 11/2/04 12:38pm
"RTN","RORRP030",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,6,8**;May 14, 2002
"RTN","RORRP030",3,0)
 ;
"RTN","RORRP030",4,0)
 Q
"RTN","RORRP030",5,0)
 ;
"RTN","RORRP030",6,0)
 ;***** DUMMY ENTRY POINT (TO AVOID CRASH DURING ALERT PROCESSING)
"RTN","RORRP030",7,0)
ALERTRTN Q
"RTN","RORRP030",8,0)
 ;
"RTN","RORRP030",9,0)
 ;***** DELETE THE PATIENT'S RECORD FROM THE REGISTRY
"RTN","RORRP030",10,0)
 ; RPC: [ROR PATIENT DELETE]
"RTN","RORRP030",11,0)
 ;
"RTN","RORRP030",12,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP030",13,0)
 ;               are returned to.
"RTN","RORRP030",14,0)
 ;
"RTN","RORRP030",15,0)
 ; REGIEN        Registry IEN
"RTN","RORRP030",16,0)
 ;
"RTN","RORRP030",17,0)
 ; RORDFN        IEN of the patient
"RTN","RORRP030",18,0)
 ;
"RTN","RORRP030",19,0)
 ; [FORCE]       Force the deletion (even if the data has been
"RTN","RORRP030",20,0)
 ;               sent to the AAC already)
"RTN","RORRP030",21,0)
 ;
"RTN","RORRP030",22,0)
 ; Return Values:
"RTN","RORRP030",23,0)
 ;
"RTN","RORRP030",24,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP030",25,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP030",26,0)
 ; details).
"RTN","RORRP030",27,0)
 ;
"RTN","RORRP030",28,0)
 ; Otherwise, the following codes can be returned in the RESULTS(0):
"RTN","RORRP030",29,0)
 ;
"RTN","RORRP030",30,0)
 ;         0  The record cannot be deleted
"RTN","RORRP030",31,0)
 ;         9  The record has been deleted
"RTN","RORRP030",32,0)
 ;
"RTN","RORRP030",33,0)
DELETE(RESULTS,REGIEN,RORDFN,FORCE) ;
"RTN","RORRP030",34,0)
 N IENS,RC,REGNAME,RORFDA,RORMSG,TMP
"RTN","RORRP030",35,0)
 D CLEAR^RORERR("DELETE^RORRP030",1)
"RTN","RORRP030",36,0)
 K RESULTS  S RESULTS(0)=0
"RTN","RORRP030",37,0)
 ;
"RTN","RORRP030",38,0)
 ;--- Get the registry description/name
"RTN","RORRP030",39,0)
 S TMP=$$REGNAME^RORUTL01(REGIEN)
"RTN","RORRP030",40,0)
 I TMP=""  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",41,0)
 . S RC=$$ERROR^RORERR(-1,,,RORDFN)
"RTN","RORRP030",42,0)
 S REGNAME=$S($P(TMP,U,2)'="":$P(TMP,U,2),1:$P(TMP,U))
"RTN","RORRP030",43,0)
 ;
"RTN","RORRP030",44,0)
 ;--- Get IENS of the registry record
"RTN","RORRP030",45,0)
 S IENS=$$PRRIEN^RORUTL01(RORDFN,REGIEN)_","
"RTN","RORRP030",46,0)
 I IENS'>0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",47,0)
 . S RC=$$ERROR^RORERR(-97,,,RORDFN,REGNAME)
"RTN","RORRP030",48,0)
 ;
"RTN","RORRP030",49,0)
 ;--- Check if the data has been sent to the AAC already
"RTN","RORRP030",50,0)
 S TMP=$$GET1^DIQ(798,IENS,12,"I",,"RORMSG")
"RTN","RORRP030",51,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",52,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",53,0)
 I '$G(FORCE)  Q:'TMP
"RTN","RORRP030",54,0)
 ;
"RTN","RORRP030",55,0)
 ;--- Delete the record
"RTN","RORRP030",56,0)
 S RORFDA(798,IENS,.01)="@"
"RTN","RORRP030",57,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP030",58,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",59,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",60,0)
 ;---
"RTN","RORRP030",61,0)
 S RESULTS(0)=9
"RTN","RORRP030",62,0)
 Q
"RTN","RORRP030",63,0)
 ;
"RTN","RORRP030",64,0)
 ;***** INACTIVATES THE PATIENT
"RTN","RORRP030",65,0)
 ;
"RTN","RORRP030",66,0)
 ; IENS          IENS of the registry record
"RTN","RORRP030",67,0)
 ; REASON        IEN of the reason for inactivation
"RTN","RORRP030",68,0)
 ; DATE          Inactivation date
"RTN","RORRP030",69,0)
 ;
"RTN","RORRP030",70,0)
 ; Return Values:
"RTN","RORRP030",71,0)
 ;        <0  Error code
"RTN","RORRP030",72,0)
 ;         1  The record has been inactivated
"RTN","RORRP030",73,0)
 ;         9  The record has been deleted
"RTN","RORRP030",74,0)
 ;
"RTN","RORRP030",75,0)
INACTIV(IENS,REASON,DATE) ;
"RTN","RORRP030",76,0)
 N DSENT,NODE,RC,RORFDA,RORMSG,TMP
"RTN","RORRP030",77,0)
 ;--- Check if the data has been sent to the AAC already
"RTN","RORRP030",78,0)
 S DSENT='$$GET1^DIQ(798,IENS,12,"I",,"RORMSG")
"RTN","RORRP030",79,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP030",80,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",81,0)
 ;--- Prepare the fields
"RTN","RORRP030",82,0)
 I DSENT  D  S RC=1                  ;--- Update the record
"RTN","RORRP030",83,0)
 . S RORFDA(798,IENS,2)=DATE              ; INACTIVATION DATE
"RTN","RORRP030",84,0)
 . S RORFDA(798,IENS,2.1)=DUZ             ; INACTIVATED BY
"RTN","RORRP030",85,0)
 . S RORFDA(798,IENS,2.2)=REASON          ; REASON FOR INACTIVATION
"RTN","RORRP030",86,0)
 . S RORFDA(798,IENS,5)=1                 ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP030",87,0)
 E  S RORFDA(798,IENS,.01)="@",RC=9  ;--- Delete the record
"RTN","RORRP030",88,0)
 ;--- Update/Delete the registry record
"RTN","RORRP030",89,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP030",90,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP030",91,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",92,0)
 ;--- Send an alert to the user if inactivated patient has been
"RTN","RORRP030",93,0)
 ;--- added to the registry due to triggered selections rules
"RTN","RORRP030",94,0)
 S NODE=$$ROOT^DILFD(798.01,","_IENS,1)
"RTN","RORRP030",95,0)
 I $O(@NODE@(0))>0  D  D ORALERT^RORUTL18(TMP,RORDFN)
"RTN","RORRP030",96,0)
 . S TMP=$$MSG^RORERR20(-104,,,$P(RORREG,U,2))
"RTN","RORRP030",97,0)
 Q RC
"RTN","RORRP030",98,0)
 ;
"RTN","RORRP030",99,0)
 ;***** REACTIVATES THE PATIENT
"RTN","RORRP030",100,0)
 ;
"RTN","RORRP030",101,0)
 ; IENS          IENS of the registry record
"RTN","RORRP030",102,0)
 ; REASON        IEN of the supporting evidence
"RTN","RORRP030",103,0)
 ; DATE          Reactivation date
"RTN","RORRP030",104,0)
 ;
"RTN","RORRP030",105,0)
 ; Return Values:
"RTN","RORRP030",106,0)
 ;        <0  Error code
"RTN","RORRP030",107,0)
 ;         2  The record has been reactivated
"RTN","RORRP030",108,0)
 ;
"RTN","RORRP030",109,0)
REACTIV(IENS,REASON,DATE) ;
"RTN","RORRP030",110,0)
 N NODE,RC,RORFDA,RORMSG,TMP
"RTN","RORRP030",111,0)
 S RORFDA(798,IENS,3)=3                   ; NEW PATIENT (REACTIVATED)
"RTN","RORRP030",112,0)
 S RORFDA(798,IENS,3.2)=REASON            ; SUPPORTING EVIDENCE
"RTN","RORRP030",113,0)
 S RORFDA(798,IENS,5)=1                   ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP030",114,0)
 S RORFDA(798,IENS,7)=DATE                ; REACTIVATION DATE
"RTN","RORRP030",115,0)
 S RORFDA(798,IENS,7.1)=DUZ               ; REACTIVATED BY
"RTN","RORRP030",116,0)
 ;--- Update the registry record
"RTN","RORRP030",117,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP030",118,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP030",119,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,RORDFN,798,IENS)
"RTN","RORRP030",120,0)
 ;--- Send an alert to the user if the reactivated patient has no
"RTN","RORRP030",121,0)
 ;--- selection rules that caused his/her addition to the registry
"RTN","RORRP030",122,0)
 S NODE=$$ROOT^DILFD(798.01,","_IENS,1)
"RTN","RORRP030",123,0)
 I $O(@NODE@(0))'>0  D  D ORALERT^RORUTL18(TMP,RORDFN)
"RTN","RORRP030",124,0)
 . S TMP=$$MSG^RORERR20(-105,,,$P(RORREG,U,2))
"RTN","RORRP030",125,0)
 Q 2
"RTN","RORRP030",126,0)
 ;
"RTN","RORRP030",127,0)
 ;***** INACTIVATES/REACTIVATES THE PATIENT
"RTN","RORRP030",128,0)
 ; RPC: [ROR PATIENT (IN)ACTIVATE]
"RTN","RORRP030",129,0)
 ;
"RTN","RORRP030",130,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP030",131,0)
 ;               are returned to.
"RTN","RORRP030",132,0)
 ;
"RTN","RORRP030",133,0)
 ; REGIEN        Registry IEN
"RTN","RORRP030",134,0)
 ;
"RTN","RORRP030",135,0)
 ; RORDFN        IEN of the patient
"RTN","RORRP030",136,0)
 ;
"RTN","RORRP030",137,0)
 ; ACTION        Action to be performed
"RTN","RORRP030",138,0)
 ;                 I  Inactivate
"RTN","RORRP030",139,0)
 ;                 R  Reactivate
"RTN","RORRP030",140,0)
 ;
"RTN","RORRP030",141,0)
 ; REASON        Code of the reason for inactivation/reactivation
"RTN","RORRP030",142,0)
 ;
"RTN","RORRP030",143,0)
 ; Return Values:
"RTN","RORRP030",144,0)
 ;
"RTN","RORRP030",145,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP030",146,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP030",147,0)
 ; details).
"RTN","RORRP030",148,0)
 ;
"RTN","RORRP030",149,0)
 ; Otherwise, the following codes can be returned in the RESULTS(0):
"RTN","RORRP030",150,0)
 ;
"RTN","RORRP030",151,0)
 ;         0  Requested action is redundant
"RTN","RORRP030",152,0)
 ;         1  The record has been inactivated
"RTN","RORRP030",153,0)
 ;         2  The record has been reactivated
"RTN","RORRP030",154,0)
 ;         9  The record has been deleted
"RTN","RORRP030",155,0)
 ;
"RTN","RORRP030",156,0)
UPDATE(RESULTS,REGIEN,RORDFN,ACTION,REASON) ;
"RTN","RORRP030",157,0)
 N CIRSN,DATE,IENS,RC,RORMSG,RORREG,RSNIEN,TMP
"RTN","RORRP030",158,0)
 D CLEAR^RORERR("UPDATE^RORRP030",1)
"RTN","RORRP030",159,0)
 K RESULTS  S RESULTS(0)=0
"RTN","RORRP030",160,0)
 ;
"RTN","RORRP030",161,0)
 ;--- Get the registry description/name
"RTN","RORRP030",162,0)
 S TMP=$$REGNAME^RORUTL01(REGIEN)
"RTN","RORRP030",163,0)
 I TMP=""  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",164,0)
 . S RC=$$ERROR^RORERR(-1,,,RORDFN)
"RTN","RORRP030",165,0)
 S RORREG=REGIEN_U_$S($P(TMP,U,2)'="":$P(TMP,U,2),1:$P(TMP,U))
"RTN","RORRP030",166,0)
 ;
"RTN","RORRP030",167,0)
 ;--- Get IENS of the registry record
"RTN","RORRP030",168,0)
 S IENS=$$PRRIEN^RORUTL01(RORDFN,REGIEN)_","
"RTN","RORRP030",169,0)
 I IENS'>0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",170,0)
 . S RC=$$ERROR^RORERR(-97,,,RORDFN,$P(RORREG,U,2))
"RTN","RORRP030",171,0)
 ;
"RTN","RORRP030",172,0)
 ;--- Get the patient's status
"RTN","RORRP030",173,0)
 S TMP=$$ACTIVE^RORDD(+IENS,,.CIRSN)
"RTN","RORRP030",174,0)
 ;--- A pending patient cannot be inactivated or reactivated
"RTN","RORRP030",175,0)
 Q:$G(CIRSN)<0
"RTN","RORRP030",176,0)
 ;--- An active patient cannot be reactivated and an inactive
"RTN","RORRP030",177,0)
 ;    patient cannot be inactivated again unless they have been
"RTN","RORRP030",178,0)
 ;--- inactivated automatically due to the death.
"RTN","RORRP030",179,0)
 Q:$S(TMP:ACTION="R",1:(ACTION="I")&($G(CIRSN)>0))
"RTN","RORRP030",180,0)
 ;
"RTN","RORRP030",181,0)
 ;--- Get the IEN of inactivation reason/supporting evidence
"RTN","RORRP030",182,0)
 S TMP=$S(ACTION="I":1,ACTION="R":2,1:0)
"RTN","RORRP030",183,0)
 I TMP'>0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",184,0)
 . S RC=$$ERROR^RORERR(-88,,,RORDFN,"ACTION",ACTION)
"RTN","RORRP030",185,0)
 S RSNIEN=$$ITEMIEN^RORUTL09(TMP,REGIEN,REASON)
"RTN","RORRP030",186,0)
 I RSNIEN'>0  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP030",187,0)
 . S RC=$$ERROR^RORERR(-88,,,RORDFN,"REASON",REASON)
"RTN","RORRP030",188,0)
 ;
"RTN","RORRP030",189,0)
 ;--- Inactivate/Reactivate the record
"RTN","RORRP030",190,0)
 S DATE=$$NOW^XLFDT,RESULTS(0)=0
"RTN","RORRP030",191,0)
 S:ACTION="I" RESULTS(0)=$$INACTIV(IENS,RSNIEN,DATE)
"RTN","RORRP030",192,0)
 S:ACTION="R" RESULTS(0)=$$REACTIV(IENS,RSNIEN,DATE)
"RTN","RORRP030",193,0)
 D:RESULTS(0)<0 RPCSTK^RORERR(.RESULTS,RESULTS)
"RTN","RORRP030",194,0)
 Q
"RTN","RORRP035")
0^31^B5599797
"RTN","RORRP035",1,0)
RORRP035 ;HCIOFO/SG - RPC: GENERIC DRUG NAMES ; 2/23/05 8:00am
"RTN","RORRP035",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORRP035",3,0)
 ;
"RTN","RORRP035",4,0)
 Q
"RTN","RORRP035",5,0)
 ;
"RTN","RORRP035",6,0)
 ;***** RETURNS THE LIST OF GENERIC DRUGS
"RTN","RORRP035",7,0)
 ; RPC: [ROR LIST GENERIC DRUGS]
"RTN","RORRP035",8,0)
 ;
"RTN","RORRP035",9,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP035",10,0)
 ;               are returned to.
"RTN","RORRP035",11,0)
 ;
"RTN","RORRP035",12,0)
 ; REGIEN        Registry IEN
"RTN","RORRP035",13,0)
 ;
"RTN","RORRP035",14,0)
 ; [GROUP]       Code of the Drug Group. If this parameter is
"RTN","RORRP035",15,0)
 ;               defined and greater than zero then only the drugs
"RTN","RORRP035",16,0)
 ;               associated with this group will be returned.
"RTN","RORRP035",17,0)
 ;
"RTN","RORRP035",18,0)
 ; The ^TMP("DILIST",$J) global node is used by the procedure.
"RTN","RORRP035",19,0)
 ;
"RTN","RORRP035",20,0)
 ; Return Values:
"RTN","RORRP035",21,0)
 ;
"RTN","RORRP035",22,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP035",23,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP035",24,0)
 ; details).
"RTN","RORRP035",25,0)
 ;
"RTN","RORRP035",26,0)
 ; Otherwise, number of drugs is returned in the @RESULTS@(0) and
"RTN","RORRP035",27,0)
 ; the subsequent nodes of the global array contain the drugs.
"RTN","RORRP035",28,0)
 ; 
"RTN","RORRP035",29,0)
 ; @RESULTS@(0)          Number of Local Drugs
"RTN","RORRP035",30,0)
 ;
"RTN","RORRP035",31,0)
 ; @RESULTS@(i)          Drug Descriptor
"RTN","RORRP035",32,0)
 ;                         ^01: IEN in the ROR GENERIC DRUG file
"RTN","RORRP035",33,0)
 ;                         ^02: Generic drug name
"RTN","RORRP035",34,0)
 ;                         ^03: IEN of the generic drug (file #50.6)
"RTN","RORRP035",35,0)
 ;                         ^04: Code of the Drug Group
"RTN","RORRP035",36,0)
 ;
"RTN","RORRP035",37,0)
GDLIST(RESULTS,REGIEN,GROUP) ;
"RTN","RORRP035",38,0)
 N GROUPIEN,IENS,IR,PART,RC,RORERRDL,RORMSG,SCR,TMP
"RTN","RORRP035",39,0)
 D CLEAR^RORERR("GDLIST^RORRP032",1)
"RTN","RORRP035",40,0)
 K RESULTS  S RESULTS=$NA(^TMP("DILIST",$J))  K @RESULTS
"RTN","RORRP035",41,0)
 ;
"RTN","RORRP035",42,0)
 ;--- Check the parameters
"RTN","RORRP035",43,0)
 S RC=0  D  I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP035",44,0)
 . ;--- Registry IEN
"RTN","RORRP035",45,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP035",46,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP035",47,0)
 . S REGIEN=+REGIEN
"RTN","RORRP035",48,0)
 . ;--- Code of the Drug Group
"RTN","RORRP035",49,0)
 . S GROUP=+$G(GROUP)
"RTN","RORRP035",50,0)
 . S GROUPIEN=$S(GROUP>0:$$ITEMIEN^RORUTL09(4,REGIEN,GROUP),1:0)
"RTN","RORRP035",51,0)
 . I GROUPIEN<0  D  Q
"RTN","RORRP035",52,0)
 . . S RC=$$ERROR^RORERR(GROUPIEN)
"RTN","RORRP035",53,0)
 ;
"RTN","RORRP035",54,0)
 ;--- Compile the screen logic  (be careful with naked references)
"RTN","RORRP035",55,0)
 S SCR=""
"RTN","RORRP035",56,0)
 S:GROUPIEN>0 SCR=SCR_"I $P($G(^(0)),U,3)="_GROUPIEN_" "
"RTN","RORRP035",57,0)
 ;--- Get the list of drugs
"RTN","RORRP035",58,0)
 S TMP="@;.04E;.04I;.03I",PART(1)=REGIEN_"#"
"RTN","RORRP035",59,0)
 D LIST^DIC(799.51,,TMP,"PU",,,.PART,"ARDG",SCR,,,"RORMSG")
"RTN","RORRP035",60,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP035",61,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,798.129,IENS)
"RTN","RORRP035",62,0)
 ;
"RTN","RORRP035",63,0)
 ;--- Replace the group IEN's with the group code(s)
"RTN","RORRP035",64,0)
 S (IR,RC)=0
"RTN","RORRP035",65,0)
 F  S IR=$O(@RESULTS@(IR))  Q:IR'>0  D  Q:RC<0
"RTN","RORRP035",66,0)
 . I GROUPIEN>0  S $P(@RESULTS@(IR,0),U,4)=GROUP  Q
"RTN","RORRP035",67,0)
 . S TMP=+$P(@RESULTS@(IR,0),U,4)
"RTN","RORRP035",68,0)
 . I TMP'>0  S $P(@RESULTS@(IR,0),U,4)=""  Q
"RTN","RORRP035",69,0)
 . S RC=$$ITEMCODE^RORUTL09(TMP)
"RTN","RORRP035",70,0)
 . S:RC>0 $P(@RESULTS@(IR,0),U,4)=RC
"RTN","RORRP035",71,0)
 I RC<0  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP035",72,0)
 ;--- Success
"RTN","RORRP035",73,0)
 S TMP=+$G(^TMP("DILIST",$J,0))
"RTN","RORRP035",74,0)
 K ^TMP("DILIST",$J,0)  S @RESULTS@(0)=TMP
"RTN","RORRP035",75,0)
 Q
"RTN","RORSETU2")
0^18^B11850212
"RTN","RORSETU2",1,0)
RORSETU2 ;HCIOFO/SG - SETUP UTILITIES (REGISTRY) ; 11/4/04 4:59pm
"RTN","RORSETU2",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORSETU2",3,0)
 ;
"RTN","RORSETU2",4,0)
 Q
"RTN","RORSETU2",5,0)
 ;
"RTN","RORSETU2",6,0)
 ;***** DRAWS THE BOUNDARY BETWEEN HISTORICAL AND REGULAR EXTRACTIONS
"RTN","RORSETU2",7,0)
 ;
"RTN","RORSETU2",8,0)
 ; REGIEN        Registry IEN
"RTN","RORSETU2",9,0)
 ; .BNDRYDT      Date that represents a boundary between historical
"RTN","RORSETU2",10,0)
 ;               data extraction and regular data extracts is returned
"RTN","RORSETU2",11,0)
 ;               via this parameter.
"RTN","RORSETU2",12,0)
 ;
"RTN","RORSETU2",13,0)
 ; Return Values:
"RTN","RORSETU2",14,0)
 ;       <0  Error code
"RTN","RORSETU2",15,0)
 ;      >=0  Statistics
"RTN","RORSETU2",16,0)
 ;             ^1: Total number of processed records
"RTN","RORSETU2",17,0)
 ;             ^2: Number of records processed with errors
"RTN","RORSETU2",18,0)
 ;
"RTN","RORSETU2",19,0)
 ; The function calculates a date that will be a boundary between
"RTN","RORSETU2",20,0)
 ; historical data extraction and regular data extractions. This date
"RTN","RORSETU2",21,0)
 ; is stored to all records of the registry. Moreover, the date is
"RTN","RORSETU2",22,0)
 ; returned as a value of the second parameter.
"RTN","RORSETU2",23,0)
 ;
"RTN","RORSETU2",24,0)
BNDRYDT(REGIEN,BNDRYDT) ;
"RTN","RORSETU2",25,0)
 N CNT,DATE,ECNT,IEN,IENS,LD1,PATIEN,RC,RC1,ROOT,RORFDA,RORMSG,TMP
"RTN","RORSETU2",26,0)
 S ROOT=$$ROOT^DILFD(798,,1)
"RTN","RORSETU2",27,0)
 ;--- Get the lag period
"RTN","RORSETU2",28,0)
 S LD1=$$GET1^DIQ(798.1,REGIEN_",",15.1,,,"RORMSG")
"RTN","RORSETU2",29,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORSETU2",30,0)
 ;--- Calculate the date
"RTN","RORSETU2",31,0)
 S BNDRYDT=$$FMADD^XLFDT($$DT^XLFDT,-$S(LD1>0:LD1,1:1)-1)
"RTN","RORSETU2",32,0)
 ;--- Store the date into the records of the registry
"RTN","RORSETU2",33,0)
 S IEN="",(CNT,ECNT)=0
"RTN","RORSETU2",34,0)
 F  S IEN=$O(@ROOT@("AC",REGIEN,IEN))  Q:IEN=""  D
"RTN","RORSETU2",35,0)
 . S CNT=CNT+1,IENS=IEN_",",DATE=BNDRYDT
"RTN","RORSETU2",36,0)
 . ;--- Check the inactivation date for inactive patient
"RTN","RORSETU2",37,0)
 . I '$$ACTIVE^RORDD(IEN)  S RC1=0  D  S:RC1<0 ECNT=ECNT+1
"RTN","RORSETU2",38,0)
 . . S TMP=$$GET1^DIQ(798,IENS,2,"I",,"RORMSG")\1
"RTN","RORSETU2",39,0)
 . . I $G(DIERR)  S RC1=$$DBS^RORERR("RORMSG",-9)  Q
"RTN","RORSETU2",40,0)
 . . I TMP>0  S:DATE>TMP DATE=TMP
"RTN","RORSETU2",41,0)
 . ;--- Update the record
"RTN","RORSETU2",42,0)
 . S RORFDA(798,IENS,9.1)=DATE
"RTN","RORSETU2",43,0)
 . S RORFDA(798,IENS,9.2)=DATE
"RTN","RORSETU2",44,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORSETU2",45,0)
 . I $G(DIERR)  D  S ECNT=ECNT+1  Q
"RTN","RORSETU2",46,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9)
"RTN","RORSETU2",47,0)
 Q $S(RC<0:RC,1:CNT_U_ECNT)
"RTN","RORSETU2",48,0)
 ;
"RTN","RORSETU2",49,0)
 ;***** CHECKS THE LAB SEARCH CRITERION
"RTN","RORSETU2",50,0)
 ;
"RTN","RORSETU2",51,0)
 ; LSNAME        Name of the Lab search criterion
"RTN","RORSETU2",52,0)
 ;
"RTN","RORSETU2",53,0)
 ; This function uses the ^TMP("DILIST",$J) global node.
"RTN","RORSETU2",54,0)
 ;
"RTN","RORSETU2",55,0)
 ; Return Values:
"RTN","RORSETU2",56,0)
 ;       <0  Error code
"RTN","RORSETU2",57,0)
 ;        0  Ok
"RTN","RORSETU2",58,0)
 ;
"RTN","RORSETU2",59,0)
LABSRCH(LSNAME) ;
"RTN","RORSETU2",60,0)
 N IEN,IENS,IR,LSICNT,RC,RORMSG,TMP
"RTN","RORSETU2",61,0)
 ;--- Find the definition
"RTN","RORSETU2",62,0)
 S IENS=$$FIND1^DIC(798.9,,"X",LSNAME,"B",,"RORMSG")_","
"RTN","RORSETU2",63,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORSETU2",64,0)
 Q:IENS'>0 $$ERROR^RORERR(-54,,,,LSNAME)
"RTN","RORSETU2",65,0)
 ;--- Load the search indicators
"RTN","RORSETU2",66,0)
 D LIST^DIC(798.92,","_IENS,"@;1I",,,,,"B",,,,"RORMSG")
"RTN","RORSETU2",67,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORSETU2",68,0)
 ;--- Check the search indicators
"RTN","RORSETU2",69,0)
 S IR="",LSICNT=0
"RTN","RORSETU2",70,0)
 F  S IR=$O(^TMP("DILIST",$J,"ID",IR))  Q:IR=""  D
"RTN","RORSETU2",71,0)
 . S:$G(^TMP("DILIST",$J,"ID",IR,1))>0 LSICNT=LSICNT+1
"RTN","RORSETU2",72,0)
 ;--- Process the errors (if any)
"RTN","RORSETU2",73,0)
 Q:LSICNT'>0 $$ERROR^RORERR(-55,,,,LSNAME)
"RTN","RORSETU2",74,0)
 Q 0
"RTN","RORSETU2",75,0)
 ;
"RTN","RORSETU2",76,0)
 ;***** PREPARES REGISTRY RECORDS
"RTN","RORSETU2",77,0)
 ;
"RTN","RORSETU2",78,0)
 ; RORREG        Registry IEN and registry name separated by the '^'
"RTN","RORSETU2",79,0)
 ;               (RegistryIEN^RegistryName).
"RTN","RORSETU2",80,0)
 ;
"RTN","RORSETU2",81,0)
 ; Return Values:
"RTN","RORSETU2",82,0)
 ;       <0  Error code
"RTN","RORSETU2",83,0)
 ;        0  Ok
"RTN","RORSETU2",84,0)
 ;
"RTN","RORSETU2",85,0)
PREPARE(RORREG) ;
"RTN","RORSETU2",86,0)
 ;;Data extraction boundary (historical/regular) has been established.
"RTN","RORSETU2",87,0)
 ;;Parameters of the historical data extraction have been updated.
"RTN","RORSETU2",88,0)
 ;
"RTN","RORSETU2",89,0)
 N DATE,RC,TMP
"RTN","RORSETU2",90,0)
 ;--- Modify records of the registry
"RTN","RORSETU2",91,0)
 S RC=$$BNDRYDT(+RORREG,.DATE)  Q:RC<0 RC
"RTN","RORSETU2",92,0)
 S TMP="Processed records: "_+RC_", Errors: "_+$P(RC,U,2)
"RTN","RORSETU2",93,0)
 D LOG^RORLOG(2,$P($T(PREPARE+1),";;",2),,TMP)
"RTN","RORSETU2",94,0)
 ;--- Update the registry parameters of historical data extraction
"RTN","RORSETU2",95,0)
 S RC=$$UPDHDTRP(+RORREG,DATE)  Q:RC<0 RC
"RTN","RORSETU2",96,0)
 D LOG^RORLOG(2,$P($T(PREPARE+2),";;",2))
"RTN","RORSETU2",97,0)
 Q 0
"RTN","RORSETU2",98,0)
 ;
"RTN","RORSETU2",99,0)
 ;***** UPDATES REGISTRY PARAMETERS OF THE HISTORICAL DATA EXTRACTION
"RTN","RORSETU2",100,0)
 ;
"RTN","RORSETU2",101,0)
 ; REGIEN        Registry IEN
"RTN","RORSETU2",102,0)
 ; HDTEDT        Date that represents a boundary between historical
"RTN","RORSETU2",103,0)
 ;               data extraction and regular data extracts
"RTN","RORSETU2",104,0)
 ;
"RTN","RORSETU2",105,0)
 ; Return Values:
"RTN","RORSETU2",106,0)
 ;       <0  Error code
"RTN","RORSETU2",107,0)
 ;        0  Ok
"RTN","RORSETU2",108,0)
 ;
"RTN","RORSETU2",109,0)
UPDHDTRP(REGIEN,HDTEDT) ;
"RTN","RORSETU2",110,0)
 N IENS,RC,RORFDA,RORMSG
"RTN","RORSETU2",111,0)
 S IENS=REGIEN_","
"RTN","RORSETU2",112,0)
 ;--- Prepare the data
"RTN","RORSETU2",113,0)
 S RORFDA(798.1,IENS,21.02)=HDTEDT           ; Historical End Date
"RTN","RORSETU2",114,0)
 S RORFDA(798.1,IENS,21.05)=$$NOW^XLFDT      ; Timestamp
"RTN","RORSETU2",115,0)
 ;--- Update historical data extraction parameters
"RTN","RORSETU2",116,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORSETU2",117,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORSETU2",118,0)
 ;--- Create the default data extraction task
"RTN","RORSETU2",119,0)
 S RC=$$CREATE^RORHDT02(REGIEN,1)
"RTN","RORSETU2",120,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORTSK01")
0^6^B46655984
"RTN","RORTSK01",1,0)
RORTSK01 ;HCIOFO/SG - (SUB)TASK UTILITIES ; 11/2/04 12:39pm
"RTN","RORTSK01",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;May 14, 2002
"RTN","RORTSK01",3,0)
 ;
"RTN","RORTSK01",4,0)
 ; These utilities should be called only from the tasks and subtasks
"RTN","RORTSK01",5,0)
 ; that are created and scheduled by the RORTSK API.
"RTN","RORTSK01",6,0)
 ;
"RTN","RORTSK01",7,0)
 ; The RORTSK local array is passed to the task. If the proxy task
"RTN","RORTSK01",8,0)
 ; is used then it passes this array by reference into the entry
"RTN","RORTSK01",9,0)
 ; point that implements the generic task or report.
"RTN","RORTSK01",10,0)
 ;
"RTN","RORTSK01",11,0)
 ; RORTSK(               Task Number
"RTN","RORTSK01",12,0)
 ;
"RTN","RORTSK01",13,0)
 ;   "PARAMS",...)       Report Parameters
"RTN","RORTSK01",14,0)
 ;   "TPP-PREV")         Previous value of task progress percentage
"RTN","RORTSK01",15,0)
 ;
"RTN","RORTSK01",16,0)
 ; If the proxy task is used, additional nodes are created:
"RTN","RORTSK01",17,0)
 ;
"RTN","RORTSK01",18,0)
 ;   "EP")               Entry Point
"RTN","RORTSK01",19,0)
 ;   "TYPE")             Type of the Task
"RTN","RORTSK01",20,0)
 ;   "REGIEN")           Registry IEN
"RTN","RORTSK01",21,0)
 ;   "REPORT")           Code of the Report
"RTN","RORTSK01",22,0)
 ;   "SCHCODE")          Rescheduling Code
"RTN","RORTSK01",23,0)
 ;
"RTN","RORTSK01",24,0)
 ; See descriptions of the REPORT BUILDER field (10.01) of the
"RTN","RORTSK01",25,0)
 ; ROR REPORT PARAMETERS file (#799.34) and the ROR REPORT SCHEDULE
"RTN","RORTSK01",26,0)
 ; remote procedure for more details.
"RTN","RORTSK01",27,0)
 ;
"RTN","RORTSK01",28,0)
 Q
"RTN","RORTSK01",29,0)
 ;
"RTN","RORTSK01",30,0)
 ;***** DUMMY ENTRY POINT (TO AVOID CRASH DURING ALERT PROCESSING)
"RTN","RORTSK01",31,0)
ALERTRTN Q
"RTN","RORTSK01",32,0)
 ;
"RTN","RORTSK01",33,0)
 ;***** (SUB)TASK CLEANUP
"RTN","RORTSK01",34,0)
 ;
"RTN","RORTSK01",35,0)
 ; ERRCODE       Error code of the task
"RTN","RORTSK01",36,0)
 ; [PARENT]      Parent task for the subtask
"RTN","RORTSK01",37,0)
 ;
"RTN","RORTSK01",38,0)
 ; Return Values:
"RTN","RORTSK01",39,0)
 ;       <0  Error code
"RTN","RORTSK01",40,0)
 ;        0  Ok
"RTN","RORTSK01",41,0)
 ;
"RTN","RORTSK01",42,0)
EXIT(ERRCODE,PARENT) ;
"RTN","RORTSK01",43,0)
 N IENS,RC,RORFDA,RORMSG,STATUS,TASKNODE,TMP
"RTN","RORTSK01",44,0)
 S RC=0,STATUS=$S(ERRCODE<0:101,1:3),ZTREQ="@"
"RTN","RORTSK01",45,0)
 ;=== SUBTASK
"RTN","RORTSK01",46,0)
 I $G(PARENT)  D  Q RC
"RTN","RORTSK01",47,0)
 . ;--- Not implemented
"RTN","RORTSK01",48,0)
 ;=== TASK
"RTN","RORTSK01",49,0)
 S TASKNODE=$NA(^RORDATA(798.8,RORTSK))
"RTN","RORTSK01",50,0)
 ;--- Send an alert to the user who has started the task
"RTN","RORTSK01",51,0)
 S TMP=$$GET1^DIQ(798.8,RORTSK,.05,,,"RORMSG")  ; Task Description
"RTN","RORTSK01",52,0)
 D ORALERT^RORUTL18($$MSG^RORERR20(-101,,,RORTSK,TMP))
"RTN","RORTSK01",53,0)
 ;--- Update/Delete the task record
"RTN","RORTSK01",54,0)
 S IENS=RORTSK_","
"RTN","RORTSK01",55,0)
 I +$G(@TASKNODE@("A"))'=2  D
"RTN","RORTSK01",56,0)
 . S RORFDA(798.8,IENS,2.01)=STATUS      ; Status
"RTN","RORTSK01",57,0)
 . S RORFDA(798.8,IENS,2.02)=$$NOW^XLFDT ; Completion Time
"RTN","RORTSK01",58,0)
 . S RORFDA(798.8,IENS,2.04)="@"         ; Job Number
"RTN","RORTSK01",59,0)
 . S RORFDA(798.8,IENS,4)="@"            ; Progress
"RTN","RORTSK01",60,0)
 E  S RORFDA(798.8,IENS,.01)="@"
"RTN","RORTSK01",61,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORTSK01",62,0)
 S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.8,IENS)
"RTN","RORTSK01",63,0)
 ;--- Cleanup
"RTN","RORTSK01",64,0)
 K @TASKNODE@("A"),@TASKNODE@("T")
"RTN","RORTSK01",65,0)
 L -@TASKNODE@("T",0)
"RTN","RORTSK01",66,0)
 Q RC
"RTN","RORTSK01",67,0)
 ;
"RTN","RORTSK01",68,0)
 ;***** INITIALIZES THE (SUB)TASK
"RTN","RORTSK01",69,0)
 ;
"RTN","RORTSK01",70,0)
 ; TASK          Task number
"RTN","RORTSK01",71,0)
 ; [LOG]         Log IEN (returned by the $$LOGIEN^RORLOG function)
"RTN","RORTSK01",72,0)
 ; [PARENT]      Parent task for the subtask
"RTN","RORTSK01",73,0)
 ;
"RTN","RORTSK01",74,0)
 ; Return Values:
"RTN","RORTSK01",75,0)
 ;       <0  Error code
"RTN","RORTSK01",76,0)
 ;        0  Ok
"RTN","RORTSK01",77,0)
 ;
"RTN","RORTSK01",78,0)
INIT(TASK,LOG,PARENT) ;
"RTN","RORTSK01",79,0)
 N I,RC,RORDTH,RORFDA,RORMSG,TASKNODE
"RTN","RORTSK01",80,0)
 S RORDTH=$G(ZTDTH)  S:RORDTH'>0 RORDTH=$$NOW^XLFDT
"RTN","RORTSK01",81,0)
 S RC=0,RORTSK=+TASK  K RORTSK("PREVTPP")
"RTN","RORTSK01",82,0)
 ;=== SUBTASK
"RTN","RORTSK01",83,0)
 I $G(PARENT)  S RC=0  D  Q RC
"RTN","RORTSK01",84,0)
 . ;--- Not implemented
"RTN","RORTSK01",85,0)
 ;=== TASK
"RTN","RORTSK01",86,0)
 S TASKNODE=$NA(^RORDATA(798.8,RORTSK))
"RTN","RORTSK01",87,0)
 ;--- Schedule the next instance of the task (if requested)
"RTN","RORTSK01",88,0)
 D:$G(RORTSK("SCHCODE"))'=""
"RTN","RORTSK01",89,0)
 . N EP,TYPE,REGIEN,REPORT,SCHCODE
"RTN","RORTSK01",90,0)
 . N ZTCPU,ZTDTH,ZTIO,ZTKIL,ZTPRI,ZTSAVE,ZTSYNC,ZTUCI
"RTN","RORTSK01",91,0)
 . F I="EP","TYPE","REGIEN","REPORT","SCHCODE"  S @I=$G(RORTSK(I))
"RTN","RORTSK01",92,0)
 . Q:(TYPE'>0)!(EP="")
"RTN","RORTSK01",93,0)
 . S ZTDTH=$$SCH^XLFDT(SCHCODE,RORDTH,1)
"RTN","RORTSK01",94,0)
 . S TMP=$$CREATE^RORTSK(TYPE,EP,.RORTSK,REGIEN,REPORT,SCHCODE)
"RTN","RORTSK01",95,0)
 ;--- Wait until the task record is created
"RTN","RORTSK01",96,0)
 S RC=$$TRWAIT(RORTSK)  Q:RC<0 RC
"RTN","RORTSK01",97,0)
 ;--- Lock the task record
"RTN","RORTSK01",98,0)
 L +@TASKNODE@("T",0):5
"RTN","RORTSK01",99,0)
 E  Q $$ERROR^RORERR(-11,,,,"the ROR TASK file")
"RTN","RORTSK01",100,0)
 ;--- Clear the list of subtasks
"RTN","RORTSK01",101,0)
 K @TASKNODE@("T")
"RTN","RORTSK01",102,0)
 ;--- Update the task record
"RTN","RORTSK01",103,0)
 S IENS=RORTSK_","
"RTN","RORTSK01",104,0)
 S RORFDA(798.8,IENS,2.01)=100         ; STATUS = 'Crashed'
"RTN","RORTSK01",105,0)
 S RORFDA(798.8,IENS,2.03)=$G(LOG)     ; Log IEN
"RTN","RORTSK01",106,0)
 S RORFDA(798.8,IENS,2.04)=$J          ; Job Number
"RTN","RORTSK01",107,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORTSK01",108,0)
 S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.8,IENS)
"RTN","RORTSK01",109,0)
 Q RC
"RTN","RORTSK01",110,0)
 ;
"RTN","RORTSK01",111,0)
 ;***** TASK CONTROL FUNCTION
"RTN","RORTSK01",112,0)
 ;
"RTN","RORTSK01",113,0)
 ; [TPP]         Task/Section progress (0-1)
"RTN","RORTSK01",114,0)
 ;
"RTN","RORTSK01",115,0)
 ; Return Values:
"RTN","RORTSK01",116,0)
 ;       <0  Error code
"RTN","RORTSK01",117,0)
 ;        0  Ok
"RTN","RORTSK01",118,0)
 ;
"RTN","RORTSK01",119,0)
LOOP(TPP) ;
"RTN","RORTSK01",120,0)
 N ACTION,OFFSET,RC
"RTN","RORTSK01",121,0)
 ;--- Update the task progress percentage
"RTN","RORTSK01",122,0)
 D:$G(TPP)'=""
"RTN","RORTSK01",123,0)
 . I TPP'<0,TPP'>1  D  S TPP=+$J(TPP,0,2)
"RTN","RORTSK01",124,0)
 . . S TPP=TPP*$G(RORTSK("TPP-BASE"),100)+$G(RORTSK("TPP-OFFS"))
"RTN","RORTSK01",125,0)
 . E  S TPP=""
"RTN","RORTSK01",126,0)
 . Q:TPP=$G(RORTSK("TPP-PREV"))
"RTN","RORTSK01",127,0)
 . S (^RORDATA(798.8,RORTSK,"P"),RORTSK("TPP-PREV"))=TPP
"RTN","RORTSK01",128,0)
 ;--- Requested action
"RTN","RORTSK01",129,0)
 S ACTION=$S($$S^%ZTLOAD:2,1:+$G(^RORDATA(798.8,RORTSK,"A")))
"RTN","RORTSK01",130,0)
 Q:'ACTION 0
"RTN","RORTSK01",131,0)
 ;=== SUSPEND THE TASK
"RTN","RORTSK01",132,0)
 I ACTION=1  S RC=0  D  Q RC
"RTN","RORTSK01",133,0)
 . N IENS,RORFDA,RORMSG
"RTN","RORTSK01",134,0)
 . S IENS=RORTSK_","
"RTN","RORTSK01",135,0)
 . ;--- Update the task status
"RTN","RORTSK01",136,0)
 . S RORFDA(798.8,IENS,2.01)=102      ; STATUS = 'Suspended'
"RTN","RORTSK01",137,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORTSK01",138,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.8,IENS)
"RTN","RORTSK01",139,0)
 . ;--- Suspension cycle
"RTN","RORTSK01",140,0)
 . F  H 60  D  Q:ACTION'=1
"RTN","RORTSK01",141,0)
 . . S ACTION=$S($$S^%ZTLOAD:2,1:+$G(^RORDATA(798.8,RORTSK,"A")))
"RTN","RORTSK01",142,0)
 . ;--- Restore the default task status
"RTN","RORTSK01",143,0)
 . S RORFDA(798.8,IENS,2.01)=100      ; STATUS = 'Crashed'
"RTN","RORTSK01",144,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORTSK01",145,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798.8,IENS)
"RTN","RORTSK01",146,0)
 ;=== STOP THE TASK
"RTN","RORTSK01",147,0)
 I ACTION=2  D  Q $$ERROR^RORERR(-42)
"RTN","RORTSK01",148,0)
 . S ZTSTOP=1
"RTN","RORTSK01",149,0)
 Q 0
"RTN","RORTSK01",150,0)
 ;
"RTN","RORTSK01",151,0)
 ;***** RETURNS THE VALUE OF THE TASK PARAMETER
"RTN","RORTSK01",152,0)
PARAM(NAME) ;
"RTN","RORTSK01",153,0)
 Q $G(RORTSK("PARAMS",NAME))
"RTN","RORTSK01",154,0)
 ;
"RTN","RORTSK01",155,0)
 ;***** TASK PROXY
"RTN","RORTSK01",156,0)
 ;
"RTN","RORTSK01",157,0)
 ; RORTSK("EP")  This node must contain name of the task entry point
"RTN","RORTSK01",158,0)
 ;               ($$TAG^ROUTINE). The function should return either
"RTN","RORTSK01",159,0)
 ;               a negative error code or zero.
"RTN","RORTSK01",160,0)
 ;
"RTN","RORTSK01",161,0)
TASK ;
"RTN","RORTSK01",162,0)
 N RORCACHE      ; Cache of element and attribute names
"RTN","RORTSK01",163,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORTSK01",164,0)
 N RORPARM       ; Application parameters
"RTN","RORTSK01",165,0)
 ;
"RTN","RORTSK01",166,0)
 N ACTIVITY,I,INFO,RC,REGLST,RORERRDL,TASKINFO,TMP,TRC
"RTN","RORTSK01",167,0)
 S RORTSK=ZTSK
"RTN","RORTSK01",168,0)
 ;--- Initialize constants and variables
"RTN","RORTSK01",169,0)
 D INIT^RORUTL01("ROR")
"RTN","RORTSK01",170,0)
 ;S RORPARM("DEBUG")=1 ; Remove the first ';' to start in debug mode
"RTN","RORTSK01",171,0)
 S RORPARM("ERR")=1    ; Enable enhanced error processing
"RTN","RORTSK01",172,0)
 S RORPARM("LOG")=1    ; Enable error recording
"RTN","RORTSK01",173,0)
 ;--- Wait until the task record is created
"RTN","RORTSK01",174,0)
 S TMP=$$TRWAIT(RORTSK)
"RTN","RORTSK01",175,0)
 ;--- Get the task information
"RTN","RORTSK01",176,0)
 S TRC=$$TASKINFO^RORTSK02(RORTSK,.TASKINFO,"E")
"RTN","RORTSK01",177,0)
 ;--- Open a task log
"RTN","RORTSK01",178,0)
 S TMP=$P($G(TASKINFO(3)),U,2)  S:TMP'="" REGLST(TMP)=""
"RTN","RORTSK01",179,0)
 S ACTIVITY=$S(+$G(TASKINFO(2))=2:5,1:0)
"RTN","RORTSK01",180,0)
 S TMP=$$SETUP^RORLOG(.REGLST)
"RTN","RORTSK01",181,0)
 S RC=$$OPEN^RORLOG(.REGLST,ACTIVITY,"TASK #"_RORTSK_" STARTED")
"RTN","RORTSK01",182,0)
 ;--- Abort the task if task information was not available
"RTN","RORTSK01",183,0)
 I TRC<0  D:RC'<0  Q
"RTN","RORTSK01",184,0)
 . S TMP=$$ERROR^RORERR(-56,,,,TRC,"$$TASKINFO^RORTSK02")
"RTN","RORTSK01",185,0)
 . D CLOSE^RORLOG("TASK #"_RORTSK_" ABORTED")
"RTN","RORTSK01",186,0)
 D
"RTN","RORTSK01",187,0)
 . ;--- Record the task information (if available)
"RTN","RORTSK01",188,0)
 . S I=0,TMP=$G(TASKINFO(5))
"RTN","RORTSK01",189,0)
 . S:TMP'="" I=I+1,INFO(I)="Description: '"_TMP_"'"
"RTN","RORTSK01",190,0)
 . S TMP=$P($G(TASKINFO(8)),U,2)
"RTN","RORTSK01",191,0)
 . S:TMP'="" I=I+1,INFO(I)="User:        '"_TMP_"'"
"RTN","RORTSK01",192,0)
 . S TMP=$P($G(TASKINFO(4)),U,2)
"RTN","RORTSK01",193,0)
 . S:TMP'="" I=I+1,INFO(I)="Report:      '"_TMP_"'"
"RTN","RORTSK01",194,0)
 . D:I LOG^RORLOG(2,"Task Information",,.INFO)
"RTN","RORTSK01",195,0)
 . ;--- Verify the entry point
"RTN","RORTSK01",196,0)
 . S RC=$$VERIFYEP^RORUTL01($G(RORTSK("EP")),1)  Q:RC<0
"RTN","RORTSK01",197,0)
 . ;--- Initialize the task
"RTN","RORTSK01",198,0)
 . S RC=$$INIT(RORTSK,$$LOGIEN^RORLOG)  Q:RC<0
"RTN","RORTSK01",199,0)
 . K ACTIVITY,INFO,REGLST,TASKINFO,TMP
"RTN","RORTSK01",200,0)
 . ;--- Call the entry point
"RTN","RORTSK01",201,0)
 . X "S TRC="_RORTSK("EP")_"(.RORTSK)"
"RTN","RORTSK01",202,0)
 ;
"RTN","RORTSK01",203,0)
 ;--- Post-processing
"RTN","RORTSK01",204,0)
 S TMP=$$EXIT(TRC)
"RTN","RORTSK01",205,0)
 ;--- Close the log
"RTN","RORTSK01",206,0)
 S TMP="TASK #"_RORTSK_$S(TRC<0:" ABORTED",1:" COMPLETED")
"RTN","RORTSK01",207,0)
 D CLOSE^RORLOG(TMP)
"RTN","RORTSK01",208,0)
 Q
"RTN","RORTSK01",209,0)
 ;
"RTN","RORTSK01",210,0)
 ;***** SETS THE BASE VALUE FOR THE PROGRESS INDICATOR
"RTN","RORTSK01",211,0)
 ;
"RTN","RORTSK01",212,0)
 ; BASE          Base value for the progress indicator (0-100)
"RTN","RORTSK01",213,0)
 ;
"RTN","RORTSK01",214,0)
TPPSETUP(BASE) ;
"RTN","RORTSK01",215,0)
 I $G(BASE)'>0  K RORTSK("TPP-BASE"),RORTSK("TPP-OFFS")  Q
"RTN","RORTSK01",216,0)
 N TMP
"RTN","RORTSK01",217,0)
 S RORTSK("TPP-OFFS")=$G(RORTSK("TPP-OFFS"))+$G(RORTSK("TPP-BASE"))
"RTN","RORTSK01",218,0)
 S TMP=100-$G(RORTSK("TPP-OFFS"))
"RTN","RORTSK01",219,0)
 S RORTSK("TPP-BASE")=$S(BASE<TMP:BASE,1:TMP)
"RTN","RORTSK01",220,0)
 S TMP=$$LOOP(0)
"RTN","RORTSK01",221,0)
 Q
"RTN","RORTSK01",222,0)
 ;
"RTN","RORTSK01",223,0)
 ;***** WAITS UNTIL THE TASK RECORD IS CREATED
"RTN","RORTSK01",224,0)
 ;
"RTN","RORTSK01",225,0)
 ; TASK          Task number
"RTN","RORTSK01",226,0)
 ;
"RTN","RORTSK01",227,0)
 ; Return Values:
"RTN","RORTSK01",228,0)
 ;       <0  Error code
"RTN","RORTSK01",229,0)
 ;        0  Ok
"RTN","RORTSK01",230,0)
 ;
"RTN","RORTSK01",231,0)
TRWAIT(TASK) ;
"RTN","RORTSK01",232,0)
 N I  F I=1:1:5  Q:$D(^RORDATA(798.8,TASK,0))  H 1
"RTN","RORTSK01",233,0)
 Q $S($D(^RORDATA(798.8,TASK,0)):0,1:$$ERROR^RORERR(-83,,,,TASK))
"RTN","RORUPD52")
0^20^B12065730
"RTN","RORUPD52",1,0)
RORUPD52 ;HCIOFO/SG - UPDATE PATIENT'S DEMOGRAPHIC DATA (2) ; 11/10/04 11:27am
"RTN","RORUPD52",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**3,8**;May 14, 2002
"RTN","RORUPD52",3,0)
 ;
"RTN","RORUPD52",4,0)
 ; This routine uses the following IAs:
"RTN","RORUPD52",5,0)
 ;
"RTN","RORUPD52",6,0)
 ; #2701         $$GETICN^MPIF001  Gets ICN
"RTN","RORUPD52",7,0)
 ; #10061        6^VADPT
"RTN","RORUPD52",8,0)
 ;
"RTN","RORUPD52",9,0)
 Q
"RTN","RORUPD52",10,0)
 ;
"RTN","RORUPD52",11,0)
 ;***** LOAD DEMOGRAPHIC DATA FROM THE 'PATIENT' FILE
"RTN","RORUPD52",12,0)
 ;
"RTN","RORUPD52",13,0)
 ; DFN           Internal Entry Number in the PATIENT file
"RTN","RORUPD52",14,0)
 ;
"RTN","RORUPD52",15,0)
 ; .RES          Reference to a buffer for the data
"RTN","RORUPD52",16,0)
 ;
"RTN","RORUPD52",17,0)
 ;   RES(1,      Demographic and elegibility data
"RTN","RORUPD52",18,0)
 ;                 ^1: SSN                           .09
"RTN","RORUPD52",19,0)
 ;                 ^2: Date of Birth                 .03
"RTN","RORUPD52",20,0)
 ;                 ^3: Sex                           .02
"RTN","RORUPD52",21,0)
 ;                 ^4: Date of Death                 .351
"RTN","RORUPD52",22,0)
 ;                 ^5: Period of Service             .323
"RTN","RORUPD52",23,0)
 ;                 ^6: Service Connected?            .301
"RTN","RORUPD52",24,0)
 ;                 ^7: Service Connected Percentage  .302
"RTN","RORUPD52",25,0)
 ;                 ^8: ZIP+4                         .1112
"RTN","RORUPD52",26,0)
 ;                 ^9: ICN (with the checksum)       991.*
"RTN","RORUPD52",27,0)
 ;     "FL")     List of field numbers separated by the ";"
"RTN","RORUPD52",28,0)
 ;
"RTN","RORUPD52",29,0)
 ;   RES(2)      Race and ethnicity data
"RTN","RORUPD52",30,0)
 ;                 Race^Method^...^Ethnicity^Method^...
"RTN","RORUPD52",31,0)
 ;
"RTN","RORUPD52",32,0)
 ; Return Values:
"RTN","RORUPD52",33,0)
 ;       <0  Error code
"RTN","RORUPD52",34,0)
 ;        0  Ok
"RTN","RORUPD52",35,0)
 ;
"RTN","RORUPD52",36,0)
LOADDM(DFN,RES) ;
"RTN","RORUPD52",37,0)
 N I,J,VA,VADM,VAEL,VAHOW,VAPA,VAROOT
"RTN","RORUPD52",38,0)
 S RES(1,"FL")=".09;.03;.02;.351;.323;.301;.302;.1112;991"
"RTN","RORUPD52",39,0)
 D 6^VADPT  F I=1,2  S RES(I)=""
"RTN","RORUPD52",40,0)
 ;--- Demographic and eligibility fields
"RTN","RORUPD52",41,0)
 F I=2,3,5,6  S RES(1)=RES(1)_U_$P($G(VADM(I)),U)
"RTN","RORUPD52",42,0)
 S $E(RES(1),1)=""  ; Remove the first "^"
"RTN","RORUPD52",43,0)
 S I=$G(VAEL(3))
"RTN","RORUPD52",44,0)
 S RES(1)=RES(1)_U_$P($G(VAEL(2)),U)_U_$S(I:"Y",1:"N")_U_$P(I,U,2)
"RTN","RORUPD52",45,0)
 S I=$$GETICN^MPIF001(DFN)
"RTN","RORUPD52",46,0)
 S RES(1)=RES(1)_U_$P($G(VAPA(6)),U,2)_U_$S(I'<0:I,1:"")
"RTN","RORUPD52",47,0)
 ;--- Race & Ethnicity
"RTN","RORUPD52",48,0)
 F I=11,12  S J=""  D
"RTN","RORUPD52",49,0)
 . F  S J=$O(VADM(I,J))  Q:J=""  D
"RTN","RORUPD52",50,0)
 . . S RES(2)=RES(2)_U_$P(VADM(I,J),U)_U_$P($G(VADM(I,J,1)),U)
"RTN","RORUPD52",51,0)
 S $E(RES(2),1)=""  ; Remove the first "^"
"RTN","RORUPD52",52,0)
 Q 0
"RTN","RORUPD52",53,0)
 ;
"RTN","RORUPD52",54,0)
 ;***** LOAD RATED DISABILITIES FROM THE 'PATIENT' FILE
"RTN","RORUPD52",55,0)
 ;
"RTN","RORUPD52",56,0)
 ; DFN           Internal Entry Number in the PATIENT file
"RTN","RORUPD52",57,0)
 ;
"RTN","RORUPD52",58,0)
 ; .RES          Reference to a buffer for the data
"RTN","RORUPD52",59,0)
 ;
"RTN","RORUPD52",60,0)
 ;   RES(3)      Rated disabilities data
"RTN","RORUPD52",61,0)
 ;                 Rated Disability^Disability %^Service Connected^...
"RTN","RORUPD52",62,0)
 ;
"RTN","RORUPD52",63,0)
 ; Return Values:
"RTN","RORUPD52",64,0)
 ;       <0  Error code
"RTN","RORUPD52",65,0)
 ;        0  Ok
"RTN","RORUPD52",66,0)
 ;
"RTN","RORUPD52",67,0)
LOADRD(DFN,RES) ;
"RTN","RORUPD52",68,0)
 N I  S RES(3)="",I=0
"RTN","RORUPD52",69,0)
 F  S I=$O(^DPT(DFN,.372,I))  Q:I'>0  D
"RTN","RORUPD52",70,0)
 . S RES(3)=RES(3)_U_$G(^DPT(DFN,.372,I,0))
"RTN","RORUPD52",71,0)
 S $E(RES(3),1)=""  ; Remove the first "^"
"RTN","RORUPD52",72,0)
 Q 0
"RTN","RORUPD52",73,0)
 ;
"RTN","RORUPD52",74,0)
 ;***** GETS AND PREPARES PATIENT'S DATA
"RTN","RORUPD52",75,0)
 ;
"RTN","RORUPD52",76,0)
 ; PATIENS       Patient IENS in the PATIENT file
"RTN","RORUPD52",77,0)
 ; .RORPAT       Reference to the FDA for field values
"RTN","RORUPD52",78,0)
 ; RORIENS       IENS of the record in the ROR PATIENT file
"RTN","RORUPD52",79,0)
 ; [.DOD]        Date of death is returned via this parameter
"RTN","RORUPD52",80,0)
 ;
"RTN","RORUPD52",81,0)
 ; Return Values:
"RTN","RORUPD52",82,0)
 ;       <0  Error code
"RTN","RORUPD52",83,0)
 ;        0  Patient data has not been changed
"RTN","RORUPD52",84,0)
 ;       >0  Data has been changed
"RTN","RORUPD52",85,0)
 ;
"RTN","RORUPD52",86,0)
PATDATA(PATIENS,RORPAT,RORIENS,DOD) ;
"RTN","RORUPD52",87,0)
 N BUF,DIFCNT,N1,NODE,RC,RORDFN
"RTN","RORUPD52",88,0)
 S:PATIENS'["," PATIENS=PATIENS_","
"RTN","RORUPD52",89,0)
 S:RORIENS'["," RORIENS=RORIENS_","
"RTN","RORUPD52",90,0)
 S RORDFN=$S(RORIENS?1.N1",":+RORIENS,1:-1)
"RTN","RORUPD52",91,0)
 S DOD="",(DIFCNT,RC)=0
"RTN","RORUPD52",92,0)
 ;--- Load demographic data from the PATIENT file
"RTN","RORUPD52",93,0)
 S RC=$$LOADDM(+PATIENS,.NODE)  Q:RC<0 RC
"RTN","RORUPD52",94,0)
 S DOD=$P(NODE(1),U,4),N1=$L(NODE(1,"FL"),";")
"RTN","RORUPD52",95,0)
 ;--- Demographic and eligibility fields
"RTN","RORUPD52",96,0)
 S BUF=$P($G(^RORDATA(798.4,RORDFN,1)),U,1,N1)
"RTN","RORUPD52",97,0)
 I NODE(1)'=BUF  D
"RTN","RORUPD52",98,0)
 . N CF,FLD,I
"RTN","RORUPD52",99,0)
 . F I=1:1:N1  S FLD=+$P(NODE(1,"FL"),";",I)  D:FLD>0
"RTN","RORUPD52",100,0)
 . . K RORPAT(798.4,RORIENS,FLD)
"RTN","RORUPD52",101,0)
 . . ;--- Update the field if necessary
"RTN","RORUPD52",102,0)
 . . S OLDVAL=$P(BUF,U,I)  Q:$P(NODE(1),U,I)=OLDVAL
"RTN","RORUPD52",103,0)
 . . S RORPAT(798.4,RORIENS,FLD)=$P(NODE(1),U,I),CF=1
"RTN","RORUPD52",104,0)
 . . ;--- Save previous values of the special fields
"RTN","RORUPD52",105,0)
 . . I FLD=.09  D  Q
"RTN","RORUPD52",106,0)
 . . . S RORPAT(798.4,RORIENS,10.1)=OLDVAL  ; Old SSN
"RTN","RORUPD52",107,0)
 . . I FLD=991.01  D  Q
"RTN","RORUPD52",108,0)
 . . . S RORPAT(798.4,RORIENS,10.2)=OLDVAL  ; Old ICN
"RTN","RORUPD52",109,0)
 . I $G(CF)  S DIFCNT=DIFCNT+1  Q
"RTN","RORUPD52",110,0)
 . S $P(^RORDATA(798.4,RORDFN,1),U,N1)=$P(BUF,U,N1)
"RTN","RORUPD52",111,0)
 ;--- Race & Ethnicity
"RTN","RORUPD52",112,0)
 I NODE(2)'=$G(^RORDATA(798.4,RORDFN,2))  D
"RTN","RORUPD52",113,0)
 . S DIFCNT=DIFCNT+1,RORPAT(798.4,RORIENS,2)=NODE(2)
"RTN","RORUPD52",114,0)
 K NODE
"RTN","RORUPD52",115,0)
 ;--- Rated disabilities
"RTN","RORUPD52",116,0)
 S RC=$$LOADRD(+PATIENS,.NODE)  Q:RC<0 RC
"RTN","RORUPD52",117,0)
 I NODE(3)'=$G(^RORDATA(798.4,RORDFN,3))  D
"RTN","RORUPD52",118,0)
 . S DIFCNT=DIFCNT+1,RORPAT(798.4,RORIENS,.3721)=NODE(3)
"RTN","RORUPD52",119,0)
 Q $S(RC<0:RC,1:DIFCNT)
"RTN","RORUTL18")
0^5^B2268863
"RTN","RORUTL18",1,0)
RORUTL18 ;HCIOFO/SG - MISCELLANEOUS UTILITIES ; 9/30/04 9:21am
"RTN","RORUTL18",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**6,8**;May 14, 2002
"RTN","RORUTL18",3,0)
 ;
"RTN","RORUTL18",4,0)
 Q
"RTN","RORUTL18",5,0)
 ;
"RTN","RORUTL18",6,0)
 ;***** SENDS THE CPRS-COMPATIBLE INFORMATIONAL ALERT
"RTN","RORUTL18",7,0)
 ;
"RTN","RORUTL18",8,0)
 ; MSG           Text of the alert message.  The text is truncated
"RTN","RORUTL18",9,0)
 ;               to 50 characters and '^' are replaced with '~'.
"RTN","RORUTL18",10,0)
 ;
"RTN","RORUTL18",11,0)
 ; [DFN]         Patient IEN
"RTN","RORUTL18",12,0)
 ;
"RTN","RORUTL18",13,0)
 ; [.XQA]        List of addressees.  By default, the
"RTN","RORUTL18",14,0)
 ;               alert is sent to the current user.
"RTN","RORUTL18",15,0)
 ;
"RTN","RORUTL18",16,0)
ORALERT(MSG,DFN,XQA) ;
"RTN","RORUTL18",17,0)
 N LAST4,NAME,VA,VADM,VAHOW,VAROOT,XQADATA,XQAID,XQAMSG,XQAROU
"RTN","RORUTL18",18,0)
 S XQAMSG="",XQAID="ROR,,"
"RTN","RORUTL18",19,0)
 I $G(DFN)>0  D
"RTN","RORUTL18",20,0)
 . D DEM^VADPT
"RTN","RORUTL18",21,0)
 . S NAME=$E($G(VADM(1)),1,9)         ; Patient name
"RTN","RORUTL18",22,0)
 . S LAST4=$E($P($G(VADM(2)),U),6,9)  ; Last 4 of SSN
"RTN","RORUTL18",23,0)
 . S XQAMSG=$$LJ^XLFSTR(NAME_" ("_$E(NAME,1)_LAST4_"):",19)
"RTN","RORUTL18",24,0)
 . S $P(XQAID,",",2)=+DFN
"RTN","RORUTL18",25,0)
 S XQAMSG=XQAMSG_$TR(MSG,"^","~")
"RTN","RORUTL18",26,0)
 S:$L(XQAMSG)>70 $E(XQAMSG,68,999)="..."
"RTN","RORUTL18",27,0)
 I $D(XQA)<10  Q:$G(DUZ)'>0  S XQA(+DUZ)=""
"RTN","RORUTL18",28,0)
 D SETUP^XQALERT
"RTN","RORUTL18",29,0)
 Q
"RTN","RORUTL18",30,0)
 ;
"RTN","RORUTL18",31,0)
 ;***** CHECKS FOR PENDING STATUS
"RTN","RORUTL18",32,0)
 ;
"RTN","RORUTL18",33,0)
 ; IEN           IEN of the registry record (in file #798)
"RTN","RORUTL18",34,0)
 ;
"RTN","RORUTL18",35,0)
 ; Return Values:
"RTN","RORUTL18",36,0)
 ;        0  Non-pending
"RTN","RORUTL18",37,0)
 ;        1  Pending patient
"RTN","RORUTL18",38,0)
 ;
"RTN","RORUTL18",39,0)
PENDING(IEN) ;
"RTN","RORUTL18",40,0)
 Q ($P($G(^RORDATA(798,+IEN,0)),U,5)=4)
"RTN","RORUTL18",41,0)
 ;
"RTN","RORUTL18",42,0)
 ;***** RETURNS THE CLINIC'S STOP CODE
"RTN","RORUTL18",43,0)
 ;
"RTN","RORUTL18",44,0)
 ; CLIEN         Clinic IEN
"RTN","RORUTL18",45,0)
 ;
"RTN","RORUTL18",46,0)
 ; Return Values:
"RTN","RORUTL18",47,0)
 ;       <0  Error code
"RTN","RORUTL18",48,0)
 ;       ""  No stop code
"RTN","RORUTL18",49,0)
 ;       >0  Stop code
"RTN","RORUTL18",50,0)
 ;
"RTN","RORUTL18",51,0)
STOPCODE(CLIEN) ;
"RTN","RORUTL18",52,0)
 N RORMSG,STOP
"RTN","RORUTL18",53,0)
 I CLIEN>0  D
"RTN","RORUTL18",54,0)
 . S STOP=$$GET1^DIQ(44,CLIEN_",","#8:#1","I",,"RORMSG")
"RTN","RORUTL18",55,0)
 . S:$G(DIERR) STOP=$$DBS^RORERR("RORMSG",-99,,,44,CLIEN_",")
"RTN","RORUTL18",56,0)
 E  S STOP=""
"RTN","RORUTL18",57,0)
 Q STOP
"RTN","RORX005A")
0^8^B42244883
"RTN","RORX005A",1,0)
RORX005A ;HCIOFO/BH,SG - INP & OUT UTILIZATION (QUERY) ; 10/5/04 7:56am
"RTN","RORX005A",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;Feb 09, 1998
"RTN","RORX005A",3,0)
 ;
"RTN","RORX005A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX005A",5,0)
 ;
"RTN","RORX005A",6,0)
 ; #92           Read access to the file #45 (controlled)
"RTN","RORX005A",7,0)
 ; #557          Read access to the file #40.7 (controlled)
"RTN","RORX005A",8,0)
 ; #2548         ACRP Interface Toolkit (supported)
"RTN","RORX005A",9,0)
 ; #???          The .01 field and "C" x-ref of file #40.8
"RTN","RORX005A",10,0)
 ;
"RTN","RORX005A",11,0)
 Q
"RTN","RORX005A",12,0)
 ;
"RTN","RORX005A",13,0)
 ;***** ADDS THE INPATIENT STAY
"RTN","RORX005A",14,0)
 ;
"RTN","RORX005A",15,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",16,0)
 ; PTFIEN        IEN of the PTF record
"RTN","RORX005A",17,0)
 ; LOS           Length of stay
"RTN","RORX005A",18,0)
 ; BSID          Bed section ID
"RTN","RORX005A",19,0)
 ; DATE          Movement date/time (FileMan)
"RTN","RORX005A",20,0)
 ;
"RTN","RORX005A",21,0)
ADDSTAY(DFN,PTFIEN,LOS,BSID,DATE) ;
"RTN","RORX005A",22,0)
 N DST,I,TMP
"RTN","RORX005A",23,0)
 S:$G(BSID)="" BSID=0
"RTN","RORX005A",24,0)
 ;--- Number of patients for the bedsection
"RTN","RORX005A",25,0)
 I 'BSID  S DST=$NA(@RORDST@("IP",DFN))
"RTN","RORX005A",26,0)
 E  S DST=$NA(@RORDST@("IPB",BSID))  D:'$D(@DST@("P",DFN))
"RTN","RORX005A",27,0)
 . S @DST@("P")=$G(@DST@("P"))+1,@DST@("P",DFN)=""
"RTN","RORX005A",28,0)
 ;--- No bed section ID
"RTN","RORX005A",29,0)
 I BSID<0  F TMP=RORDST,RORSUM  D:TMP'=""
"RTN","RORX005A",30,0)
 . S @TMP@("IPNOBS",RORPNAME,DATE,PTFIEN,DFN)=""
"RTN","RORX005A",31,0)
 ;--- Short stays (visits)
"RTN","RORX005A",32,0)
 I LOS'>0  S @DST@("V")=$G(@DST@("V"))+1  Q
"RTN","RORX005A",33,0)
 ;--- Days and stays
"RTN","RORX005A",34,0)
 S @DST@("D")=$G(@DST@("D"))+LOS
"RTN","RORX005A",35,0)
 S @DST@("S")=$G(@DST@("S"))+1
"RTN","RORX005A",36,0)
 ;--- Lengths of stay for median value calculations
"RTN","RORX005A",37,0)
 F TMP=RORDST,RORSUM  D:TMP'=""
"RTN","RORX005A",38,0)
 . S I=$O(@TMP@("IPMLOS",BSID,LOS,""),-1)+1
"RTN","RORX005A",39,0)
 . S @TMP@("IPMLOS",BSID,LOS,I)=""
"RTN","RORX005A",40,0)
 Q
"RTN","RORX005A",41,0)
 ;
"RTN","RORX005A",42,0)
 ;***** LOADS AND PROCESSES THE INPATIENT DATA
"RTN","RORX005A",43,0)
 ;
"RTN","RORX005A",44,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",45,0)
 ; CATSUB        Category subscript in the temporary global
"RTN","RORX005A",46,0)
 ;
"RTN","RORX005A",47,0)
 ; Return Values:
"RTN","RORX005A",48,0)
 ;       <0  Error code
"RTN","RORX005A",49,0)
 ;        0  Ok
"RTN","RORX005A",50,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",51,0)
 ;
"RTN","RORX005A",52,0)
IPDATA(DFN,CATSUB) ;
"RTN","RORX005A",53,0)
 N RORDST        ; Closed reference to the category node in ^TMP
"RTN","RORX005A",54,0)
 N RORSUM        ; Closed reference of the summary node in ^TMP
"RTN","RORX005A",55,0)
 ;
"RTN","RORX005A",56,0)
 N BSID,DATE,DISDT,ENDT,FACILITY,LOS,PTFIEN,RC,RORMSG,STDT,SUFFIX,TMP,VAHOW,VAIP,VAROOT,XDATE
"RTN","RORX005A",57,0)
 S RORDST=$NA(^TMP("RORX005",$J,CATSUB))
"RTN","RORX005A",58,0)
 I $D(RORMODE("AIDS"))&$D(RORMODE("HIV"))  D
"RTN","RORX005A",59,0)
 . S TMP=$P($$CAT^RORICRUT(1),U)
"RTN","RORX005A",60,0)
 . S RORSUM=$NA(^TMP("RORX005",$J,TMP))
"RTN","RORX005A",61,0)
 E  S RORSUM=""
"RTN","RORX005A",62,0)
 ;---
"RTN","RORX005A",63,0)
 S XDATE=RORSDT
"RTN","RORX005A",64,0)
 F  S RC=0  D  Q:RC<2  S XDATE=$O(^DGPT("AAD",DFN,XDATE))  Q:XDATE'>0
"RTN","RORX005A",65,0)
 . I XDATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",66,0)
 . K DATE,LOS,VAIP  S VAIP(16,1)=XDATE
"RTN","RORX005A",67,0)
 . F  D  Q:RC
"RTN","RORX005A",68,0)
 . . S VAIP("D")=+$G(VAIP(16,1))
"RTN","RORX005A",69,0)
 . . I VAIP("D")'>0  S RC=2  Q
"RTN","RORX005A",70,0)
 . . D IN5^VADPT
"RTN","RORX005A",71,0)
 . . I $G(VAIP(1))'>0  S RC=2  Q
"RTN","RORX005A",72,0)
 . . S DATE=+VAIP(3)
"RTN","RORX005A",73,0)
 . . Q:+$G(VAIP(4))=3
"RTN","RORX005A",74,0)
 . . ;--- Check the movement date
"RTN","RORX005A",75,0)
 . . I DATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",76,0)
 . . S:DATE<RORSDT DATE=RORSDT
"RTN","RORX005A",77,0)
 . . ;--- Check the PTF record
"RTN","RORX005A",78,0)
 . . S PTFIEN=+$G(VAIP(12))  Q:PTFIEN'>0
"RTN","RORX005A",79,0)
 . . I '$D(PTFIEN(PTFIEN))  D  Q:RC
"RTN","RORX005A",80,0)
 . . . S PTFIEN(PTFIEN)=0
"RTN","RORX005A",81,0)
 . . . Q:$$PTF^RORXU001(PTFIEN,"P",,,.SUFFIX,,.FACILITY)
"RTN","RORX005A",82,0)
 . . . ;--- Check the suffix
"RTN","RORX005A",83,0)
 . . . I SUFFIX'=""  Q:$$VSUFFIX^RORX005U(SUFFIX)
"RTN","RORX005A",84,0)
 . . . ;--- Check the division
"RTN","RORX005A",85,0)
 . . . I '$D(RORDIV("ALL"))  D  Q:'$D(RORDIV(DIVIEN))
"RTN","RORX005A",86,0)
 . . . . S TMP=FACILITY_SUFFIX
"RTN","RORX005A",87,0)
 . . . . S DIVIEN=$S(TMP'="":+$O(^DG(40.8,"C",TMP,"")),1:0)
"RTN","RORX005A",88,0)
 . . . S PTFIEN(PTFIEN)=1
"RTN","RORX005A",89,0)
 . . ;--- Skip the PTF record if necessary
"RTN","RORX005A",90,0)
 . . Q:'PTFIEN(PTFIEN)
"RTN","RORX005A",91,0)
 . . ;--- Process the admission (only once)
"RTN","RORX005A",92,0)
 . . I '$D(LOS)  D  Q:RC
"RTN","RORX005A",93,0)
 . . . S LOS=$$LOS^RORX005U(+$G(VAIP(13,1)),+$G(VAIP(17,1)))
"RTN","RORX005A",94,0)
 . . . D ADDSTAY(DFN,PTFIEN,LOS)
"RTN","RORX005A",95,0)
 . . ;--- Process the movement
"RTN","RORX005A",96,0)
 . . S ENDT=$G(VAIP(16,1))\1
"RTN","RORX005A",97,0)
 . . S:(ENDT'>0)!(ENDT'<ROREDT1) ENDT=ROREDT,RC=2
"RTN","RORX005A",98,0)
 . . Q:ENDT<RORSDT
"RTN","RORX005A",99,0)
 . . S LOS=$$FMDIFF^XLFDT(ENDT,DATE\1,1)  S:LOS'>0 LOS=0
"RTN","RORX005A",100,0)
 . . ;--- Use the IEN in the SPECIALTY file (#42.4) as the Bedsection 
"RTN","RORX005A",101,0)
 . . ;    ID if it is available (it should be). Otherwise, use the
"RTN","RORX005A",102,0)
 . . ;--- IEN in the FACILITY TREATING SPECIALTY file (#45.7).
"RTN","RORX005A",103,0)
 . . I $G(VAIP(8))>0  D
"RTN","RORX005A",104,0)
 . . . S TMP=$$GET1^DIQ(45.7,+VAIP(8),1,"I",,"RORMSG")
"RTN","RORX005A",105,0)
 . . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",106,0)
 . . . S BSID=$S(TMP>0:TMP_";42.4",1:+VAIP(8)_";45.7")
"RTN","RORX005A",107,0)
 . . E  S BSID=-1
"RTN","RORX005A",108,0)
 . . D ADDSTAY(DFN,PTFIEN,LOS,BSID,+VAIP(3))
"RTN","RORX005A",109,0)
 . S:$G(DATE)>XDATE XDATE=DATE
"RTN","RORX005A",110,0)
 ;---
"RTN","RORX005A",111,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX005A",112,0)
 ;
"RTN","RORX005A",113,0)
 ;***** LOADS AND PROCESSES THE OUTPATIENT DATA
"RTN","RORX005A",114,0)
 ;
"RTN","RORX005A",115,0)
 ; RORDFN        Patient IEN (in file #2)
"RTN","RORX005A",116,0)
 ;
"RTN","RORX005A",117,0)
 ; CATSUB        Category subscript in the temporary global
"RTN","RORX005A",118,0)
 ;
"RTN","RORX005A",119,0)
 ; Return Values:
"RTN","RORX005A",120,0)
 ;       <0  Error code
"RTN","RORX005A",121,0)
 ;        0  Ok
"RTN","RORX005A",122,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",123,0)
 ;
"RTN","RORX005A",124,0)
OPDATA(RORDFN,CATSUB) ;
"RTN","RORX005A",125,0)
 N QUERY,RORDST,RORECNT
"RTN","RORX005A",126,0)
 S RORDST=$NA(^TMP("RORX005",$J,CATSUB))
"RTN","RORX005A",127,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORX005A",128,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORX005A",129,0)
 D PAT^SDQ(.QUERY,RORDFN,"SET")
"RTN","RORX005A",130,0)
 D DATE^SDQ(.QUERY,RORSDT,ROREDT1,"SET")
"RTN","RORX005A",131,0)
 D SCANCB^SDQ(.QUERY,"D SCAN^RORX005A(Y,Y0)","SET")
"RTN","RORX005A",132,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORX005A",133,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORX005A",134,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORX005A",135,0)
 Q +$G(RORECNT)
"RTN","RORX005A",136,0)
 ;
"RTN","RORX005A",137,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX005A",138,0)
 ;
"RTN","RORX005A",139,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX005A",140,0)
 ;
"RTN","RORX005A",141,0)
 ; Return Values:
"RTN","RORX005A",142,0)
 ;       <0  Error code
"RTN","RORX005A",143,0)
 ;        0  Ok
"RTN","RORX005A",144,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",145,0)
 ;
"RTN","RORX005A",146,0)
QUERY(FLAGS) ;
"RTN","RORX005A",147,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX005A",148,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX005A",149,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX005A",150,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX005A",151,0)
 ;
"RTN","RORX005A",152,0)
 N CATSUB,CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX005A",153,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX005A",154,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX005A",155,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX005A",156,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX005A",157,0)
 ;--- Browse through the registry records
"RTN","RORX005A",158,0)
 S IEN=0
"RTN","RORX005A",159,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX005A",160,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX005A",161,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX005A",162,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX005A",163,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX005A",164,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX005A",165,0)
 . ;
"RTN","RORX005A",166,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX005A",167,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX005A",168,0)
 . ;
"RTN","RORX005A",169,0)
 . ;--- Get the category subscript
"RTN","RORX005A",170,0)
 . S TMP=$$CLINAIDS^RORICRUT(IEN,ROREDT)
"RTN","RORX005A",171,0)
 . Q:'$D(RORMODE($S(TMP:"AIDS",1:"HIV")))
"RTN","RORX005A",172,0)
 . S CATSUB=$S(TMP:"AIDS",1:"HIV")
"RTN","RORX005A",173,0)
 . ;
"RTN","RORX005A",174,0)
 . ;--- Get the patient's data
"RTN","RORX005A",175,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX005A",176,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX005A",177,0)
 . ;
"RTN","RORX005A",178,0)
 . ;--- Get the outpatient data
"RTN","RORX005A",179,0)
 . I $D(RORMODE("OUTPATIENT"))  D  I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",180,0)
 . . S RC=$$OPDATA(PATIEN,CATSUB)
"RTN","RORX005A",181,0)
 . ;
"RTN","RORX005A",182,0)
 . ;--- Get the inpatient data
"RTN","RORX005A",183,0)
 . I $D(RORMODE("INPATIENT"))  D  I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",184,0)
 . . S RC=$$IPDATA(PATIEN,CATSUB)
"RTN","RORX005A",185,0)
 . ;
"RTN","RORX005A",186,0)
 . ;--- Calculate intermediate totals
"RTN","RORX005A",187,0)
 . S RC=$$TOTALS^RORX005B(PATIEN,CATSUB)
"RTN","RORX005A",188,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",189,0)
 ;---
"RTN","RORX005A",190,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX005A",191,0)
 ;
"RTN","RORX005A",192,0)
 ;***** CALLBACK ENTRY POINT FOR ACRP API
"RTN","RORX005A",193,0)
SCAN(Y,Y0) ;
"RTN","RORX005A",194,0)
 N DTX,STOP,TMP
"RTN","RORX005A",195,0)
 ;--- Check the division
"RTN","RORX005A",196,0)
 I '$D(RORDIV("ALL"))  S TMP=+$P(Y0,U,11)  Q:'$D(RORDIV(TMP))
"RTN","RORX005A",197,0)
 ;--- Data comes from the OUTPATIENT ENCOUNTER file (409.68)
"RTN","RORX005A",198,0)
 S STOP=$P($G(^DIC(40.7,+$P(Y0,U,3),0)),U,2),DTX=Y0\1
"RTN","RORX005A",199,0)
 S:STOP="" STOP="NSC"
"RTN","RORX005A",200,0)
 S @RORDST@("OP",RORDFN,DTX)=$G(@RORDST@("OP",RORDFN,DTX))+1
"RTN","RORX005A",201,0)
 S @RORDST@("OP",RORDFN,DTX,STOP)=$G(@RORDST@("OP",RORDFN,DTX,STOP))+1
"RTN","RORX005A",202,0)
 Q
"RTN","RORX009A")
0^11^B39794510
"RTN","RORX009A",1,0)
RORX009A ;HCIOFO/SG - PRESCRIPTION UTILIZ. (QUERY & SORT) ; 2/23/05 7:52am
"RTN","RORX009A",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;Feb 09, 1998
"RTN","RORX009A",3,0)
 ;
"RTN","RORX009A",4,0)
 Q
"RTN","RORX009A",5,0)
 ;
"RTN","RORX009A",6,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX009A",7,0)
 ;
"RTN","RORX009A",8,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX009A",9,0)
 ;
"RTN","RORX009A",10,0)
 ; Return Values:
"RTN","RORX009A",11,0)
 ;       <0  Error code
"RTN","RORX009A",12,0)
 ;        0  Ok
"RTN","RORX009A",13,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",14,0)
 ;
"RTN","RORX009A",15,0)
QUERY(FLAGS) ;
"RTN","RORX009A",16,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX009A",17,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX009A",18,0)
 ;
"RTN","RORX009A",19,0)
 N CATSUB,CNT,ECNT,IEN,IENS,PATIEN,RC,RORXDST,RXFLAGS,TMP,XREFNODE
"RTN","RORX009A",20,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX009A",21,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX009A",22,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX009A",23,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX009A",24,0)
 ;
"RTN","RORX009A",25,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX009A",26,0)
 S RORXDST("RORCB")="$$RXSCB^RORX009A"
"RTN","RORX009A",27,0)
 S RORXDST("GENERIC")=($D(RORXOPT("GENERIC"))>0)
"RTN","RORX009A",28,0)
 S RXFLAGS="E"
"RTN","RORX009A",29,0)
 S:$D(RORMODE("INPATIENT")) RXFLAGS=RXFLAGS_"IV"
"RTN","RORX009A",30,0)
 S:$D(RORMODE("OUTPATIENT")) RXFLAGS=RXFLAGS_"O"
"RTN","RORX009A",31,0)
 Q:RXFLAGS="E" 0
"RTN","RORX009A",32,0)
 ;
"RTN","RORX009A",33,0)
 ;--- Browse through the registry records
"RTN","RORX009A",34,0)
 S IEN=0
"RTN","RORX009A",35,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX009A",36,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX009A",37,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX009A",38,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX009A",39,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX009A",40,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX009A",41,0)
 . ;
"RTN","RORX009A",42,0)
 . ;--- Get the patient IEN (DFN)
"RTN","RORX009A",43,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX009A",44,0)
 . ;
"RTN","RORX009A",45,0)
 . ;--- Get the category subscript
"RTN","RORX009A",46,0)
 . S TMP=$$CLINAIDS^RORICRUT(IEN,ROREDT)
"RTN","RORX009A",47,0)
 . Q:'$D(RORMODE($S(TMP:"AIDS",1:"HIV")))
"RTN","RORX009A",48,0)
 . S CATSUB=$S(TMP:"AIDS",1:"HIV")
"RTN","RORX009A",49,0)
 . ;
"RTN","RORX009A",50,0)
 . ;--- Search the pharmacy data
"RTN","RORX009A",51,0)
 . S RORXDST=$NA(^TMP("RORX009",$J,CATSUB))
"RTN","RORX009A",52,0)
 . S TMP=$$RXSEARCH^RORUTL14(PATIEN,RORLRX,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX009A",53,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX009A",54,0)
 . ;--- Skip the patient if no data has been found
"RTN","RORX009A",55,0)
 . I '$D(@RORXDST@("IP",PATIEN)),'$D(@RORXDST@("OP",PATIEN))  Q
"RTN","RORX009A",56,0)
 . ;
"RTN","RORX009A",57,0)
 . ;--- Calculate intermediate totals
"RTN","RORX009A",58,0)
 . S RC=$$TOTALS(PATIEN,CATSUB)
"RTN","RORX009A",59,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX009A",60,0)
 ;---
"RTN","RORX009A",61,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX009A",62,0)
 ;
"RTN","RORX009A",63,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX009A",64,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX009A",65,0)
 N DRUGIEN,DRUGNAME,IRP,RPS,RXCNT,SUBS,TMP
"RTN","RORX009A",66,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX009A",67,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX009A",68,0)
 E  S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX009A",69,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX009A",70,0)
 S SUBS=$S(ORDFLG["I":"IP",ORDFLG["O":"OP",1:"")  Q:SUBS="" 1
"RTN","RORX009A",71,0)
 S RXCNT=0
"RTN","RORX009A",72,0)
 ;--- Count the original order, refills and partials
"RTN","RORX009A",73,0)
 I ORDFLG["I"  S RXCNT=RXCNT+1  ; Inpatient
"RTN","RORX009A",74,0)
 E  D                           ; Outpatient
"RTN","RORX009A",75,0)
 . S TMP=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX009A",76,0)
 . S:(TMP'<ROR8DST("RORSDT"))&(TMP<ROR8DST("ROREDT")) RXCNT=RXCNT+1
"RTN","RORX009A",77,0)
 F RPS="PAR","REF"  S IRP=0  D
"RTN","RORX009A",78,0)
 . F  S IRP=$O(^TMP("PS",$J,RPS,IRP))  Q:IRP'>0  S RXCNT=RXCNT+1
"RTN","RORX009A",79,0)
 ;--- Update the counters
"RTN","RORX009A",80,0)
 D:RXCNT>0
"RTN","RORX009A",81,0)
 . S TMP=$G(@ROR8DST@(SUBS,+ROR8DST("RORDFN"),"D",DRUGIEN))
"RTN","RORX009A",82,0)
 . S @ROR8DST@(SUBS,+ROR8DST("RORDFN"),"D",DRUGIEN)=TMP+RXCNT
"RTN","RORX009A",83,0)
 . S TMP=SUBS_"D"
"RTN","RORX009A",84,0)
 . S:'$D(@ROR8DST@(TMP,DRUGIEN)) @ROR8DST@(TMP,DRUGIEN)=DRUGNAME
"RTN","RORX009A",85,0)
 Q 0
"RTN","RORX009A",86,0)
 ;
"RTN","RORX009A",87,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX009A",88,0)
 ;
"RTN","RORX009A",89,0)
 ; Return Values:
"RTN","RORX009A",90,0)
 ;       <0  Error code
"RTN","RORX009A",91,0)
 ;        0  Ok
"RTN","RORX009A",92,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",93,0)
 ;
"RTN","RORX009A",94,0)
SORT() ;
"RTN","RORX009A",95,0)
 N CATSUB,ECNT,FSUM,NODE,NSUB,RC,RORI,RORSUM,TMP
"RTN","RORX009A",96,0)
 S (ECNT,RC)=0
"RTN","RORX009A",97,0)
 S RORSUM=$NA(^TMP("RORX009",$J,$P($$CAT^RORICRUT(1),U)))
"RTN","RORX009A",98,0)
 S NSUB=$$NCAT^RORICRUT
"RTN","RORX009A",99,0)
 ;---
"RTN","RORX009A",100,0)
 F RORI=NSUB:-1:1  D  Q:RC<0
"RTN","RORX009A",101,0)
 . S RC=$$LOOP^RORTSK01((NSUB-RORI)/NSUB)  Q:RC<0
"RTN","RORX009A",102,0)
 . S CATSUB=$P($$CAT^RORICRUT(RORI),U)
"RTN","RORX009A",103,0)
 . S NODE=$NA(^TMP("RORX009",$J,CATSUB))
"RTN","RORX009A",104,0)
 . Q:$D(@NODE)<10
"RTN","RORX009A",105,0)
 . S FSUM=$D(RORMODE("AIDS"))&$D(RORMODE("HIV"))&(RORI'=1)
"RTN","RORX009A",106,0)
 . ;---
"RTN","RORX009A",107,0)
 . D SORT1(NODE,"IP",FSUM)
"RTN","RORX009A",108,0)
 . S RC=$$LOOP^RORTSK01()  Q:RC<0
"RTN","RORX009A",109,0)
 . D SORT1(NODE,"OP",FSUM)
"RTN","RORX009A",110,0)
 ;---
"RTN","RORX009A",111,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX009A",112,0)
 ;
"RTN","RORX009A",113,0)
 ;***** SORTS THE DATA NAD CALCULATES THE TOTALS
"RTN","RORX009A",114,0)
 ;
"RTN","RORX009A",115,0)
 ; NODE          Closed root of the category section
"RTN","RORX009A",116,0)
 ;               in the temporary global
"RTN","RORX009A",117,0)
 ;
"RTN","RORX009A",118,0)
 ; SUBS          Base subscript ("IP" or "OP")
"RTN","RORX009A",119,0)
 ;
"RTN","RORX009A",120,0)
 ; FSUM          Update the summary data (0/1)
"RTN","RORX009A",121,0)
 ;
"RTN","RORX009A",122,0)
SORT1(NODE,SUBS,FSUM) ;
"RTN","RORX009A",123,0)
 N DFN,I,IEN,NDRUGS,RXS,TMP
"RTN","RORX009A",124,0)
 D SORTRX(NODE,SUBS_"D",FSUM)
"RTN","RORX009A",125,0)
 Q:'FSUM
"RTN","RORX009A",126,0)
 ;--- Number of patients
"RTN","RORX009A",127,0)
 S TMP=$G(@RORSUM@(SUBS))
"RTN","RORX009A",128,0)
 M @RORSUM@(SUBS)=@NODE@(SUBS)
"RTN","RORX009A",129,0)
 S @RORSUM@(SUBS)=TMP+$G(@NODE@(SUBS))
"RTN","RORX009A",130,0)
 ;--- Number of fills/doses
"RTN","RORX009A",131,0)
 S RXS=SUBS_"RX"
"RTN","RORX009A",132,0)
 S I=""
"RTN","RORX009A",133,0)
 F  S I=$O(@NODE@(RXS,I))  Q:I=""  D
"RTN","RORX009A",134,0)
 . S TMP=$G(@RORSUM@(RXS,I))
"RTN","RORX009A",135,0)
 . M @RORSUM@(RXS,I)=@NODE@(RXS,I)
"RTN","RORX009A",136,0)
 . S @RORSUM@(RXS,I)=TMP+$G(@NODE@(RXS,I))
"RTN","RORX009A",137,0)
 S @RORSUM@(RXS)=$G(@RORSUM@(RXS))+$G(@NODE@(RXS))
"RTN","RORX009A",138,0)
 Q
"RTN","RORX009A",139,0)
 ;
"RTN","RORX009A",140,0)
 ;***** SORTS THE DRUG LIST
"RTN","RORX009A",141,0)
 ;
"RTN","RORX009A",142,0)
 ; NODE          Closed root of the category section
"RTN","RORX009A",143,0)
 ;               in the temporary global
"RTN","RORX009A",144,0)
 ;
"RTN","RORX009A",145,0)
 ; SUBS          Drug list subscript ("IPD" or "OPD")
"RTN","RORX009A",146,0)
 ;
"RTN","RORX009A",147,0)
 ; FSUM          Update the summary data (0/1)
"RTN","RORX009A",148,0)
 ;
"RTN","RORX009A",149,0)
SORTRX(NODE,SUBS,FSUM) ;
"RTN","RORX009A",150,0)
 N I,IEN,NAME,NDRUGS,SUM,TMP
"RTN","RORX009A",151,0)
 S IEN=0,NDRUGS=0
"RTN","RORX009A",152,0)
 F  S IEN=$O(@NODE@(SUBS,IEN))  Q:IEN'>0  D
"RTN","RORX009A",153,0)
 . S NAME=@NODE@(SUBS,IEN),NDRUGS=NDRUGS+1
"RTN","RORX009A",154,0)
 . S TMP=+$G(@NODE@(SUBS,IEN,"D"))
"RTN","RORX009A",155,0)
 . S @NODE@(SUBS,"B",TMP,NAME,IEN)=""
"RTN","RORX009A",156,0)
 . Q:'FSUM
"RTN","RORX009A",157,0)
 . S @RORSUM@(SUBS,IEN)=NAME
"RTN","RORX009A",158,0)
 . ;--- Numbers of patients and doses/fills
"RTN","RORX009A",159,0)
 . F I="P","D"  S TMP=$G(@NODE@(SUBS,IEN,I))  D:TMP>0
"RTN","RORX009A",160,0)
 . . S @RORSUM@(SUBS,IEN,I)=$G(@RORSUM@(SUBS,IEN,I))+TMP
"RTN","RORX009A",161,0)
 . ;--- Maximum number of doses/fills per patient
"RTN","RORX009A",162,0)
 . S TMP=$G(@NODE@(SUBS,IEN,"M"))
"RTN","RORX009A",163,0)
 . S SUM=$G(@RORSUM@(SUBS,IEN,"M"))
"RTN","RORX009A",164,0)
 . D:TMP'<SUM
"RTN","RORX009A",165,0)
 . . I TMP>SUM  S @RORSUM@(SUBS,IEN,"M")=TMP  Q
"RTN","RORX009A",166,0)
 . . S $P(@RORSUM@(SUBS,IEN,"M"),U,2)=$P(SUM,U,2)+$P(TMP,U,2)
"RTN","RORX009A",167,0)
 ;--- Numbers of different drugs
"RTN","RORX009A",168,0)
 S @NODE@(SUBS)=NDRUGS
"RTN","RORX009A",169,0)
 Q
"RTN","RORX009A",170,0)
 ;
"RTN","RORX009A",171,0)
 ;***** CALCULATES THE INTERMEDIATE TOTALS
"RTN","RORX009A",172,0)
 ;
"RTN","RORX009A",173,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX009A",174,0)
 ; CATSUB        Category subscript in the temporary global
"RTN","RORX009A",175,0)
 ;
"RTN","RORX009A",176,0)
 ; Return Values:
"RTN","RORX009A",177,0)
 ;       <0  Error code
"RTN","RORX009A",178,0)
 ;        0  Ok
"RTN","RORX009A",179,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",180,0)
 ;
"RTN","RORX009A",181,0)
TOTALS(PATIEN,CATSUB) ;
"RTN","RORX009A",182,0)
 N IEN,LAST4,NDRUGS,NODE,NRX,PTNAME,PTNRX,RXS,SUBS,TMP,VA,VADM,VAERR
"RTN","RORX009A",183,0)
 S NODE=$NA(^TMP("RORX009",$J,CATSUB))
"RTN","RORX009A",184,0)
 ;--- Get the patient's data
"RTN","RORX009A",185,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX009A",186,0)
 S PTNAME=VADM(1),LAST4=VA("BID")
"RTN","RORX009A",187,0)
 ;---
"RTN","RORX009A",188,0)
 F SUBS="IP","OP"  D:$D(@NODE@(SUBS,PATIEN))>1
"RTN","RORX009A",189,0)
 . S RXS=SUBS_"D"
"RTN","RORX009A",190,0)
 . S IEN=0,(NDRUGS,PTNRX)=0
"RTN","RORX009A",191,0)
 . F  S IEN=$O(@NODE@(SUBS,PATIEN,"D",IEN))  Q:IEN'>0  D
"RTN","RORX009A",192,0)
 . . S NRX=@NODE@(SUBS,PATIEN,"D",IEN)
"RTN","RORX009A",193,0)
 . . S NDRUGS=NDRUGS+1,PTNRX=PTNRX+NRX
"RTN","RORX009A",194,0)
 . . ;---
"RTN","RORX009A",195,0)
 . . S @NODE@(RXS,IEN,"D")=$G(@NODE@(RXS,IEN,"D"))+NRX
"RTN","RORX009A",196,0)
 . . S @NODE@(RXS,IEN,"P")=$G(@NODE@(RXS,IEN,"P"))+1
"RTN","RORX009A",197,0)
 . . ;---
"RTN","RORX009A",198,0)
 . . S TMP=$G(@NODE@(RXS,IEN,"M"))
"RTN","RORX009A",199,0)
 . . D:NRX'<TMP
"RTN","RORX009A",200,0)
 . . . I NRX>TMP  S @NODE@(RXS,IEN,"M")=NRX_U_1  Q
"RTN","RORX009A",201,0)
 . . . S $P(@NODE@(RXS,IEN,"M"),U,2)=$P(TMP,U,2)+1
"RTN","RORX009A",202,0)
 . ;---
"RTN","RORX009A",203,0)
 . S @NODE@(SUBS)=$G(@NODE@(SUBS))+1
"RTN","RORX009A",204,0)
 . S @NODE@(SUBS,PATIEN)=LAST4_U_PTNAME_U_PTNRX_U_NDRUGS
"RTN","RORX009A",205,0)
 . ;---
"RTN","RORX009A",206,0)
 . S RXS=SUBS_"RX"
"RTN","RORX009A",207,0)
 . S @NODE@(RXS)=$G(@NODE@(RXS))+PTNRX
"RTN","RORX009A",208,0)
 . S @NODE@(RXS,PTNRX)=$G(@NODE@(RXS,PTNRX))+1
"RTN","RORX009A",209,0)
 . S @NODE@(RXS,PTNRX,PTNAME,PATIEN)=""
"RTN","RORX009A",210,0)
 ;---
"RTN","RORX009A",211,0)
 Q 0
"RTN","RORX011")
0^12^B48831246
"RTN","RORX011",1,0)
RORX011 ; HCIOFO/SG - PATIENT DRUG HISTORY ; 2/23/05 7:52am
"RTN","RORX011",2,0)
 ;;1.0;CLINICAL CASE REGISTRIES;**5,8**;Feb 09, 1998
"RTN","RORX011",3,0)
 ;
"RTN","RORX011",4,0)
 ;--------------------------------------------------------------------
"RTN","RORX011",5,0)
 ; Registry: [VA ICR]
"RTN","RORX011",6,0)
 ;--------------------------------------------------------------------
"RTN","RORX011",7,0)
 Q
"RTN","RORX011",8,0)
 ;
"RTN","RORX011",9,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX011",10,0)
 ;
"RTN","RORX011",11,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",12,0)
 ;
"RTN","RORX011",13,0)
 ; Return Values:
"RTN","RORX011",14,0)
 ;       <0  Error code
"RTN","RORX011",15,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX011",16,0)
 ;
"RTN","RORX011",17,0)
HEADER(PARTAG) ;
"RTN","RORX011",18,0)
 ;;PTRXL(DATE,ORDER,TYPE,NAME,GENERIC,DAYSPLY,FILLTYPE)
"RTN","RORX011",19,0)
 ;
"RTN","RORX011",20,0)
 N HEADER,NOTES,RC
"RTN","RORX011",21,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX011",22,0)
 Q:HEADER<0 HEADER
"RTN","RORX011",23,0)
 S NOTES=$$ADDVAL^RORTSK11(RORTSK,"NOTES",,HEADER)
"RTN","RORX011",24,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",$$DT^XLFDT,NOTES)
"RTN","RORX011",25,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX011",HEADER)
"RTN","RORX011",26,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX011",27,0)
 ;
"RTN","RORX011",28,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX011",29,0)
 ;
"RTN","RORX011",30,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",31,0)
 ;
"RTN","RORX011",32,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX011",33,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX011",34,0)
 ;
"RTN","RORX011",35,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX011",36,0)
 ;               returned via this parameter
"RTN","RORX011",37,0)
 ;
"RTN","RORX011",38,0)
 ; Return Values:
"RTN","RORX011",39,0)
 ;       <0  Error code
"RTN","RORX011",40,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX011",41,0)
 ;
"RTN","RORX011",42,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX011",43,0)
 N PARAMS,TMP
"RTN","RORX011",44,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX011",45,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX011",46,0)
 ;--- Compile the list of drugs and process options
"RTN","RORX011",47,0)
 S TMP=$NA(^TMP("RORX011D",$J))
"RTN","RORX011",48,0)
 S RORLRX=$$COMBRXL^RORXU007(.RORTSK,PARAMS,TMP,.RORXOPT)
"RTN","RORX011",49,0)
 Q:RORLRX<0 RORLRX
"RTN","RORX011",50,0)
 ;---
"RTN","RORX011",51,0)
 Q PARAMS
"RTN","RORX011",52,0)
 ;
"RTN","RORX011",53,0)
 ;***** PROCESS THE PATIENT'S DATA
"RTN","RORX011",54,0)
 ;
"RTN","RORX011",55,0)
 ; PTLIST        Reference (IEN) to the parent tag
"RTN","RORX011",56,0)
 ; PATIEN        Patient IEN in the file #2 (DFN)
"RTN","RORX011",57,0)
 ;
"RTN","RORX011",58,0)
 ; Return Values:
"RTN","RORX011",59,0)
 ;       <0  Error code
"RTN","RORX011",60,0)
 ;        0  Ok
"RTN","RORX011",61,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",62,0)
 ;
"RTN","RORX011",63,0)
PATIENT(PTLIST,PATIEN) ;
"RTN","RORX011",64,0)
 N BUF,FLT,FLTL,FQL,ITEM,NODE,PTAG,QSB,RC,TABLE,VA,VADM,VAERR
"RTN","RORX011",65,0)
 S (ECNT,RC)=0
"RTN","RORX011",66,0)
 ;--- Patient data
"RTN","RORX011",67,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLIST,,PATIEN)
"RTN","RORX011",68,0)
 Q:PTAG<0 PTAG
"RTN","RORX011",69,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX011",70,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX011",71,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG)
"RTN","RORX011",72,0)
 D ADDVAL^RORTSK11(RORTSK,"DOB",$P(VADM(3),U),PTAG)
"RTN","RORX011",73,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",VADM(4),PTAG)
"RTN","RORX011",74,0)
 ;--- List of drugs
"RTN","RORX011",75,0)
 S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PTRXL",,PTAG)
"RTN","RORX011",76,0)
 Q:TABLE<0 TABLE
"RTN","RORX011",77,0)
 D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PTRXL")
"RTN","RORX011",78,0)
 ;---
"RTN","RORX011",79,0)
 S NODE=RORXDST,FLTL=$L(NODE)-1,FLT=$E(NODE,1,FLTL)
"RTN","RORX011",80,0)
 S QSB=$QL(NODE),FQL=QSB+5
"RTN","RORX011",81,0)
 F  S NODE=$Q(@NODE)  Q:$E(NODE,1,FLTL)'=FLT  D:$QL(NODE)=FQL
"RTN","RORX011",82,0)
 . ; NODE: @RORXDST@(DATE,DRUGNAME,DRUGIEN,RXNUM,RXCNT)
"RTN","RORX011",83,0)
 . S BUF=@NODE
"RTN","RORX011",84,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,TABLE)
"RTN","RORX011",85,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$QS(NODE,QSB+1)\1,ITEM,1)
"RTN","RORX011",86,0)
 . D ADDVAL^RORTSK11(RORTSK,"ORDER",$QS(NODE,QSB+4),ITEM,1)
"RTN","RORX011",87,0)
 . S TMP=$P(BUF,U)
"RTN","RORX011",88,0)
 . S TMP=$S(TMP="O":"ORIGINAL",TMP="P":"PARTIAL",TMP="R":"REFILL",1:"")
"RTN","RORX011",89,0)
 . D ADDVAL^RORTSK11(RORTSK,"TYPE",TMP,ITEM,1)
"RTN","RORX011",90,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",$QS(NODE,QSB+2),ITEM,1)
"RTN","RORX011",91,0)
 . D ADDVAL^RORTSK11(RORTSK,"GENERIC",$P(BUF,U,4),ITEM,1)
"RTN","RORX011",92,0)
 . D ADDVAL^RORTSK11(RORTSK,"DAYSPLY",$P(BUF,U,5),ITEM,1)
"RTN","RORX011",93,0)
 . S TMP=$P(BUF,U,2)
"RTN","RORX011",94,0)
 . S TMP=$S(TMP="I":"INPATIENT",TMP="M":"MAIL",TMP="W":"WINDOW",1:"")
"RTN","RORX011",95,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILLTYPE",TMP,ITEM,1)
"RTN","RORX011",96,0)
 ;---
"RTN","RORX011",97,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",98,0)
 ;
"RTN","RORX011",99,0)
 ;***** PROCESSES THE LIST OF PATIENTS
"RTN","RORX011",100,0)
 ;
"RTN","RORX011",101,0)
 ; REPORT        Reference (IEN) to the parent tag
"RTN","RORX011",102,0)
 ;
"RTN","RORX011",103,0)
 ; Return Values:
"RTN","RORX011",104,0)
 ;       <0  Error code
"RTN","RORX011",105,0)
 ;        0  Ok
"RTN","RORX011",106,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",107,0)
 ;
"RTN","RORX011",108,0)
PROCESS(REPORT) ;
"RTN","RORX011",109,0)
 N CNT,ECNT,PATIEN,PTLIST,RC,RORI,RORPTN,RORXDST,RXFLAGS,TMP
"RTN","RORX011",110,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX011",111,0)
 ;
"RTN","RORX011",112,0)
 ;--- Count patients in the list
"RTN","RORX011",113,0)
 S (RORI,RORPTN)=0
"RTN","RORX011",114,0)
 F  D  Q:RORI'>0  S RORPTN=RORPTN+1
"RTN","RORX011",115,0)
 . S RORI=$O(RORTSK("PARAMS","PTLST",RORI))
"RTN","RORX011",116,0)
 Q:RORPTN'>0 0
"RTN","RORX011",117,0)
 S PTLIST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX011",118,0)
 Q:PTLIST<0 PTLIST
"RTN","RORX011",119,0)
 ;
"RTN","RORX011",120,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX011",121,0)
 S RORXDST=$NA(^TMP("RORX011",$J))
"RTN","RORX011",122,0)
 S RORXDST("RORCB")="$$RXSCB^RORX011"
"RTN","RORX011",123,0)
 S RXFLAGS="E"
"RTN","RORX011",124,0)
 S:$D(RORMODE("INPATIENT")) RXFLAGS=RXFLAGS_"IV"
"RTN","RORX011",125,0)
 S:$D(RORMODE("OUTPATIENT")) RXFLAGS=RXFLAGS_"O"
"RTN","RORX011",126,0)
 ;
"RTN","RORX011",127,0)
 ;--- Browse through the list of patients
"RTN","RORX011",128,0)
 S (CNT,RORI)=0
"RTN","RORX011",129,0)
 F  S RORI=$O(RORTSK("PARAMS","PTLST",RORI))  Q:RORI'>0  D  Q:RC<0
"RTN","RORX011",130,0)
 . S RC=$$LOOP^RORTSK01(CNT/RORPTN)  Q:RC<0
"RTN","RORX011",131,0)
 . S CNT=CNT+1
"RTN","RORX011",132,0)
 . S PATIEN=RORTSK("PARAMS","PTLST",RORI)  Q:PATIEN'>0
"RTN","RORX011",133,0)
 . ;--- Search the pharmacy data
"RTN","RORX011",134,0)
 . K @RORXDST
"RTN","RORX011",135,0)
 . S TMP=$$RXSEARCH^RORUTL14(PATIEN,RORLRX,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX011",136,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX011",137,0)
 . ;--- Append the patient's data to the report
"RTN","RORX011",138,0)
 . S TMP=$$PATIENT(PTLIST,PATIEN)
"RTN","RORX011",139,0)
 . I TMP  S ECNT=ECNT+$S(TMP>0:TMP,1:1)  Q
"RTN","RORX011",140,0)
 ;
"RTN","RORX011",141,0)
 ;--- Cleanup
"RTN","RORX011",142,0)
 K @RORXDST
"RTN","RORX011",143,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",144,0)
 ;
"RTN","RORX011",145,0)
 ;***** COMPILES THE "PATIENT DRUG HISTORY" REPORT
"RTN","RORX011",146,0)
 ; REPORT CODE: 011
"RTN","RORX011",147,0)
 ;
"RTN","RORX011",148,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX011",149,0)
 ;
"RTN","RORX011",150,0)
 ; The ^TMP("RORX011",$J) and ^TMP("RORX011D",$J) global nodes are
"RTN","RORX011",151,0)
 ; used by this function.
"RTN","RORX011",152,0)
 ;
"RTN","RORX011",153,0)
 ; Return Values:
"RTN","RORX011",154,0)
 ;       <0  Error code
"RTN","RORX011",155,0)
 ;        0  Ok
"RTN","RORX011",156,0)
 ;
"RTN","RORX011",157,0)
RXHIST(RORTSK) ;
"RTN","RORX011",158,0)
 N ROREDT        ; End date
"RTN","RORX011",159,0)
 N ROREDT1       ; End date + 1
"RTN","RORX011",160,0)
 N RORLRX        ; List of drugs
"RTN","RORX011",161,0)
 N RORMODE       ; Subset of patients to be selected
"RTN","RORX011",162,0)
 N ROROPT        ; Report options
"RTN","RORX011",163,0)
 N RORREG        ; Registry IEN
"RTN","RORX011",164,0)
 N RORSDT        ; Start date
"RTN","RORX011",165,0)
 N RORXOPT       ; Drug options
"RTN","RORX011",166,0)
 ;
"RTN","RORX011",167,0)
 N ECNT,RC,REPORT,TMP
"RTN","RORX011",168,0)
 S (ECNT,RC)=0
"RTN","RORX011",169,0)
 ;
"RTN","RORX011",170,0)
 ;--- Root node of the report
"RTN","RORX011",171,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX011",172,0)
 Q:REPORT<0 REPORT
"RTN","RORX011",173,0)
 ;
"RTN","RORX011",174,0)
 ;--- Get and prepare the report parameters
"RTN","RORX011",175,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX011",176,0)
 S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT)  Q:RC<0 RC
"RTN","RORX011",177,0)
 S RORMODE=$$PARAM^RORTSK01("PATIENTS")
"RTN","RORX011",178,0)
 D LIST^RORXU002(.RORMODE)
"RTN","RORX011",179,0)
 S ROROPT=$$PARAM^RORTSK01("OPTIONS")
"RTN","RORX011",180,0)
 D LIST^RORXU002(.ROROPT)
"RTN","RORX011",181,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX011",182,0)
 ;
"RTN","RORX011",183,0)
 ;--- Report header
"RTN","RORX011",184,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX011",185,0)
 ;
"RTN","RORX011",186,0)
 ;--- Process the data and generate the report
"RTN","RORX011",187,0)
 S RC=$$PROCESS(REPORT)  S:RC>0 ECNT=ECNT+RC
"RTN","RORX011",188,0)
 ;
"RTN","RORX011",189,0)
 ;--- Cleanup
"RTN","RORX011",190,0)
 K ^TMP("RORX011",$J),^TMP("RORX011D",$J)
"RTN","RORX011",191,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX011",192,0)
 ;
"RTN","RORX011",193,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX011",194,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX011",195,0)
 N DRUGIEN,DRUGNAME,FILLTYPE,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX011",196,0)
 S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX011",197,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX011",198,0)
 S:ROR8DST("RORXGEN")>0 $P(RXBUF,U,4)=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX011",199,0)
 S $P(RXBUF,U,5)=$P($G(^TMP("PS",$J,0)),U,7)  ; Days Supply
"RTN","RORX011",200,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX011",201,0)
 S FILLTYPE=$S(ORDFLG["I":"I",1:$P(TMP,U,3))
"RTN","RORX011",202,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX011",203,0)
 S RXCNT=0
"RTN","RORX011",204,0)
 ;--- Original prescription
"RTN","RORX011",205,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX011",206,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX011",207,0)
 . S $P(RXBUF,U,1,2)="I"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",208,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",209,0)
 E  D             ;--- Outpatient
"RTN","RORX011",210,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX011",211,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX011",212,0)
 . S $P(RXBUF,U,1,2)="O"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",213,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",214,0)
 ;--- Refills and partials
"RTN","RORX011",215,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX011",216,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX011",217,0)
 . S IRP=0
"RTN","RORX011",218,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX011",219,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX011",220,0)
 . . S $P(RXBUF,U,2)=$S(ORDFLG["I":"I",1:$P(TMP,U,5))
"RTN","RORX011",221,0)
 . . S $P(RXBUF,U,5)=$P(TMP,U,2)  ; Days Supply
"RTN","RORX011",222,0)
 . . I TMP>0  S RXCNT=RXCNT+1  D
"RTN","RORX011",223,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",224,0)
 Q 0
"VER")
8.0^22
"^DD",798.1,798.1,21.06,0)
HDT PATIENTS PER BATCH^NJ6,0^^21;5^K:+X'=X!(X>999999)!(X<100)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,21.06,3)
Type a Number between 100 and 999999, 0 Decimal Digits
"^DD",798.1,798.1,21.06,8.5)
@
"^DD",798.1,798.1,21.06,9)
@
"^DD",798.1,798.1,21.06,21,0)
^^5^5^3050223^
"^DD",798.1,798.1,21.06,21,1,0)
The HDT PATIENTS PER BATCH field holds the maximum
"^DD",798.1,798.1,21.06,21,2,0)
number of patients whose data is written into a
"^DD",798.1,798.1,21.06,21,3,0)
historical data extraction output file. Currently,
"^DD",798.1,798.1,21.06,21,4,0)
each historical data extraction task creates a
"^DD",798.1,798.1,21.06,21,5,0)
single output file.
"^DD",798.1,798.1,21.06,"DT")
3050223
"^DD",798.5,798.5,1.01,0)
FILE NAME^FX^^0;3^K:$L(X)>30!($L(X)<3)!($L($TR(X,"*?/\[]|"":<>"))<$L(X)) X
"^DD",798.5,798.5,1.01,3)
Answer must be 3-30 characters in length.
"^DD",798.5,798.5,1.01,8.5)
@
"^DD",798.5,798.5,1.01,9)
@
"^DD",798.5,798.5,1.01,21,0)
^^21^21^3050110^
"^DD",798.5,798.5,1.01,21,1,0)
The output file name is stored in this field. This
"^DD",798.5,798.5,1.01,21,2,0)
name is generated automatically when the task is
"^DD",798.5,798.5,1.01,21,3,0)
created. The name has the following structure:
"^DD",798.5,798.5,1.01,21,4,0)
                                 
"^DD",798.5,798.5,1.01,21,5,0)
 RRR-SSS-TT.HDT 
"^DD",798.5,798.5,1.01,21,6,0)
                                 
"^DD",798.5,798.5,1.01,21,7,0)
where 'RRR' is the registry name without spaces 
"^DD",798.5,798.5,1.01,21,8,0)
and punctuation characters (VAHEPC, VAICR, etc.),
"^DD",798.5,798.5,1.01,21,9,0)
'SSS' is the site number (3 digits), and 'TT' is
"^DD",798.5,798.5,1.01,21,10,0)
the sequential number of the task (2 digits).
"^DD",798.5,798.5,1.01,21,11,0)
                                 
"^DD",798.5,798.5,1.01,21,12,0)
If the task is restarted, the optional numeric
"^DD",798.5,798.5,1.01,21,13,0)
modifier '##' (2 digits) can be added to the name
"^DD",798.5,798.5,1.01,21,14,0)
so that the already extracted data will not be
"^DD",798.5,798.5,1.01,21,15,0)
overwritten:
"^DD",798.5,798.5,1.01,21,16,0)
                                 
"^DD",798.5,798.5,1.01,21,17,0)
 RRR-SSS-TT-##.HDT 
"^DD",798.5,798.5,1.01,21,18,0)
                                 
"^DD",798.5,798.5,1.01,21,19,0)
Usually, this field should not be edited. It is
"^DD",798.5,798.5,1.01,21,20,0)
populated automatically when the task is created
"^DD",798.5,798.5,1.01,21,21,0)
or restarted.  
"^DD",798.5,798.5,1.01,23,0)
^.001^3^3^3050110^^
"^DD",798.5,798.5,1.01,23,1,0)
Uniqueness of the output file names (for the same 
"^DD",798.5,798.5,1.01,23,2,0)
registry) is guaranteed by the "B" secondary key and
"^DD",798.5,798.5,1.01,23,3,0)
the "DF" index.
"^DD",798.5,798.5,1.01,"DT")
3011114
"^DD",798.9,798.9,0)
FIELD^^2^4
"^DD",798.9,798.9,0,"DDA")
N
"^DD",798.9,798.9,0,"DT")
3031006
"^DD",798.9,798.9,0,"IX","ALN",798.92,.01)
 
"^DD",798.9,798.9,0,"IX","ANLT",798.92,.02)
 
"^DD",798.9,798.9,0,"NM","ROR LAB SEARCH")
 
"^DD",798.9,798.9,0,"VRPK")
ROR
"^DD",798.9,798.9,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(798.9,$G(DA))  K:$L(X)>30!($L(X)<3) X
"^DD",798.9,798.9,.01,1,0)
^.1^^0
"^DD",798.9,798.9,.01,3)
Enter a unique name spaced criterion name (3-30 characters).
"^DD",798.9,798.9,.01,8.5)
@
"^DD",798.9,798.9,.01,9)
@
"^DD",798.9,798.9,.01,21,0)
^^6^6^3011016^
"^DD",798.9,798.9,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.9,798.9,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.9,798.9,.01,21,3,0)
 
"^DD",798.9,798.9,.01,21,4,0)
The criterion name must be unique and name spaced.
"^DD",798.9,798.9,.01,21,5,0)
The names that are used for National Registries
"^DD",798.9,798.9,.01,21,6,0)
must start with "VA".
"^DD",798.9,798.9,.01,"DEL",1,0)
I $$VADEL^RORDD(798.9,$G(DA))
"^DD",798.9,798.9,.01,"DT")
3010720
"^DD",798.9,798.9,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;3^Q:$$VAEDT^RORDD(798.9,,-1)
"^DD",798.9,798.9,.09,8.5)
@
"^DD",798.9,798.9,.09,9)
@
"^DD",798.9,798.9,.09,21,0)
^^6^6^3020403^
"^DD",798.9,798.9,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.9,798.9,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.9,798.9,.09,21,3,0)
 
"^DD",798.9,798.9,.09,21,4,0)
The national registries must have this field set
"^DD",798.9,798.9,.09,21,5,0)
to "Yes". This prevents local editing of other
"^DD",798.9,798.9,.09,21,6,0)
fields of national registry definitions.
"^DD",798.9,798.9,.09,"DEL",1,0)
I $$VADEL^RORDD(798.9,,-1)
"^DD",798.9,798.9,.09,"DT")
3011119
"^DD",798.9,798.9,1,0)
STATUS^S^0:ACTIVE;1:INACTIVE;^0;2^Q
"^DD",798.9,798.9,1,21,0)
^^2^2^3020403^
"^DD",798.9,798.9,1,21,1,0)
Select the "INACTIVE" code if you want to disable
"^DD",798.9,798.9,1,21,2,0)
the criterion temporarily.
"^DD",798.9,798.9,1,"DT")
3011016
"^DD",798.9,798.9,2,0)
LAB TEST^798.92^^1;0
"^DD",798.9,798.9,2,9)
@
"^DD",798.9,798.9,2,21,0)
^^9^9^3011119^
"^DD",798.9,798.9,2,21,1,0)
This multiple contains a list of the Lab search 
"^DD",798.9,798.9,2,21,2,0)
indicators used by the registry update process.
"^DD",798.9,798.9,2,21,3,0)
 
"^DD",798.9,798.9,2,21,4,0)
If at least one of the indicators is evaluated as 
"^DD",798.9,798.9,2,21,5,0)
True, the macro referencing the search criterion
"^DD",798.9,798.9,2,21,6,0)
will be evaluated as True as well.
"^DD",798.9,798.9,2,21,7,0)
 
"^DD",798.9,798.9,2,21,8,0)
This multiple can contain several records for the
"^DD",798.9,798.9,2,21,9,0)
same Lab test.
"^DD",798.9,798.92,0)
LAB TEST SUB-FIELD^^2^4
"^DD",798.9,798.92,0,"DT")
3031006
"^DD",798.9,798.92,0,"IX","B",798.92,.01)
 
"^DD",798.9,798.92,0,"NM","LAB TEST")
 
"^DD",798.9,798.92,0,"UP")
798.9
"^DD",798.9,798.92,.01,0)
LOINC CODE^MNJ7,0^^0;1^K:+X'=X!(X>9999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.9,798.92,.01,1,0)
^.1
"^DD",798.9,798.92,.01,1,1,0)
798.92^B
"^DD",798.9,798.92,.01,1,1,1)
S ^ROR(798.9,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",798.9,798.92,.01,1,1,2)
K ^ROR(798.9,DA(1),1,"B",$E(X,1,30),DA)
"^DD",798.9,798.92,.01,1,1,3)
Do not delete!
"^DD",798.9,798.92,.01,1,2,0)
798.9^ALN
"^DD",798.9,798.92,.01,1,2,1)
S ^ROR(798.9,"ALN",$E(X,1,30),DA(1),DA)=""
"^DD",798.9,798.92,.01,1,2,2)
K ^ROR(798.9,"ALN",$E(X,1,30),DA(1),DA)
"^DD",798.9,798.92,.01,1,2,3)
Do not delete!
"^DD",798.9,798.92,.01,1,2,"%D",0)
^^3^3^3011016^
"^DD",798.9,798.92,.01,1,2,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.9,798.92,.01,1,2,"%D",2,0)
criteria that look for the Lab results with the
"^DD",798.9,798.92,.01,1,2,"%D",3,0)
particular LOINC code.
"^DD",798.9,798.92,.01,1,2,"DT")
3010621
"^DD",798.9,798.92,.01,3)
Enter the LOINC code without a control digit.
"^DD",798.9,798.92,.01,8.5)
@
"^DD",798.9,798.92,.01,9)
@
"^DD",798.9,798.92,.01,21,0)
^.001^4^4^3011119^^
"^DD",798.9,798.92,.01,21,1,0)
Enter the numeric LOINC code (without the check
"^DD",798.9,798.92,.01,21,2,0)
digit) of the Lab result to be searched for. If
"^DD",798.9,798.92,.01,21,3,0)
you want to use only NLT code, enter zero as the
"^DD",798.9,798.92,.01,21,4,0)
value of this field.
"^DD",798.9,798.92,.01,"DT")
3011119
"^DD",798.9,798.92,.02,0)
NLT CODE^F^^0;2^K:'(X?5N1"."4.5N) X
"^DD",798.9,798.92,.02,1,0)
^.1
"^DD",798.9,798.92,.02,1,1,0)
798.9^ANLT
"^DD",798.9,798.92,.02,1,1,1)
S ^ROR(798.9,"ANLT",$E(X,1,30),DA(1),DA)=""
"^DD",798.9,798.92,.02,1,1,2)
K ^ROR(798.9,"ANLT",$E(X,1,30),DA(1),DA)
"^DD",798.9,798.92,.02,1,1,3)
Do not delete!
"^DD",798.9,798.92,.02,1,1,"%D",0)
^^3^3^3011016^
"^DD",798.9,798.92,.02,1,1,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.9,798.92,.02,1,1,"%D",2,0)
criteria that look for the Lab results with the
"^DD",798.9,798.92,.02,1,1,"%D",3,0)
particular NLT code.
"^DD",798.9,798.92,.02,1,1,"DT")
3010621
"^DD",798.9,798.92,.02,3)
Enter the NLT code (NNNNN.MMMM[M]).
"^DD",798.9,798.92,.02,8.5)
@
"^DD",798.9,798.92,.02,9)
@
"^DD",798.9,798.92,.02,21,0)
^.001^5^5^3011119^^^
"^DD",798.9,798.92,.02,21,1,0)
Enter the NLT code of the Lab result to be 
"^DD",798.9,798.92,.02,21,2,0)
searched for. Both LOINC and NLT codes (if
"^DD",798.9,798.92,.02,21,3,0)
available) are used for searching the Lab results.
"^DD",798.9,798.92,.02,21,4,0)
If you want to use only the LOINC code, leave this
"^DD",798.9,798.92,.02,21,5,0)
field empty.
"^DD",798.9,798.92,.02,"DT")
3011119
"^DD",798.9,798.92,1,0)
INDICATOR^RS^0:Ignore;1:Use Reference Range;2:Contains;3:Greater Than;4:Less Than;5:Equal To;6:Positive Result;^0;3^Q
"^DD",798.9,798.92,1,8.5)
@
"^DD",798.9,798.92,1,9)
@
"^DD",798.9,798.92,1,21,0)
^^35^35^3050105^
"^DD",798.9,798.92,1,21,1,0)
The value of this field indicates the comparison
"^DD",798.9,798.92,1,21,2,0)
operation applied to the Lab result. The Lab
"^DD",798.9,798.92,1,21,3,0)
result is compared to the value of the INDICATED 
"^DD",798.9,798.92,1,21,4,0)
VALUE field. 
"^DD",798.9,798.92,1,21,5,0)
 
"^DD",798.9,798.92,1,21,6,0)
NOTE: All string comparisons are case-insensitive.
"^DD",798.9,798.92,1,21,7,0)
 
"^DD",798.9,798.92,1,21,8,0)
For example, if the internal value of this field 
"^DD",798.9,798.92,1,21,9,0)
is equal to 3 ("Greater Than") and the value of
"^DD",798.9,798.92,1,21,10,0)
the INDICATED VALUE field is 5 then this indicator
"^DD",798.9,798.92,1,21,11,0)
will be evaluated as True for all numeric Lab 
"^DD",798.9,798.92,1,21,12,0)
results values greater than 5.
"^DD",798.9,798.92,1,21,13,0)
 
"^DD",798.9,798.92,1,21,14,0)
The "Contains" indicator checks if the indicated
"^DD",798.9,798.92,1,21,15,0)
value is contained in the Lab result value.
"^DD",798.9,798.92,1,21,16,0)
 
"^DD",798.9,798.92,1,21,17,0)
The only exceptions are the "Use Reference Range"
"^DD",798.9,798.92,1,21,18,0)
indicator, which checks if the result value is
"^DD",798.9,798.92,1,21,19,0)
outside of the reference range defined for the 
"^DD",798.9,798.92,1,21,20,0)
Lab test, and the "Positive Result".
"^DD",798.9,798.92,1,21,21,0)
 
"^DD",798.9,798.92,1,21,22,0)
The "Positive Result" indicator selects a test 
"^DD",798.9,798.92,1,21,23,0)
result if the value
"^DD",798.9,798.92,1,21,24,0)
 
"^DD",798.9,798.92,1,21,25,0)
  * is equal to "P"
"^DD",798.9,798.92,1,21,26,0)
 
"^DD",798.9,798.92,1,21,27,0)
    or
"^DD",798.9,798.92,1,21,28,0)
 
"^DD",798.9,798.92,1,21,29,0)
  * contains "POS", "DETEC" or "REA" and
"^DD",798.9,798.92,1,21,30,0)
    does not contain "NEG", "NO" or "IND".
"^DD",798.9,798.92,1,21,31,0)
 
"^DD",798.9,798.92,1,21,32,0)
For example, the "POSITIVE", "POS", "REACT", and 
"^DD",798.9,798.92,1,21,33,0)
"DETECTABLE" values will be picked up. At the same
"^DD",798.9,798.92,1,21,34,0)
time, the "NON-REACT", "INDETERMINATE", and "NEG"
"^DD",798.9,798.92,1,21,35,0)
values will be skipped.
"^DD",798.9,798.92,1,"DT")
3031006
"^DD",798.9,798.92,2,0)
INDICATED VALUE^F^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",798.9,798.92,2,3)
Answer must be 1-30 characters in length.
"^DD",798.9,798.92,2,8.5)
@
"^DD",798.9,798.92,2,9)
@
"^DD",798.9,798.92,2,21,0)
^^3^3^3020403^
"^DD",798.9,798.92,2,21,1,0)
This field holds the value that the Lab results
"^DD",798.9,798.92,2,21,2,0)
are compared to (except the "Use Reference Range"
"^DD",798.9,798.92,2,21,3,0)
indicator).
"^DD",798.9,798.92,2,"DT")
3010621
"^DD",799.51,799.51,0)
FIELD^^.09^5
"^DD",799.51,799.51,0,"DDA")
N
"^DD",799.51,799.51,0,"DT")
3040114
"^DD",799.51,799.51,0,"IX","AR",799.51,.02)
 
"^DD",799.51,799.51,0,"IX","B",799.51,.01)
 
"^DD",799.51,799.51,0,"NM","ROR GENERIC DRUG")
 
"^DD",799.51,799.51,0,"VRPK")
ROR
"^DD",799.51,799.51,0,"VRRV")
1.1^ROR*1*5
"^DD",799.51,799.51,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.51,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.51,799.51,.01,1,0)
^.1
"^DD",799.51,799.51,.01,1,1,0)
799.51^B
"^DD",799.51,799.51,.01,1,1,1)
S ^ROR(799.51,"B",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.01,1,1,2)
K ^ROR(799.51,"B",$E(X,1,30),DA)
"^DD",799.51,799.51,.01,1,1,3)
Do not delete!
"^DD",799.51,799.51,.01,3)
Name must be 3-30 characters, not numeric or starting with punctuation.
"^DD",799.51,799.51,.01,8.5)
@
"^DD",799.51,799.51,.01,9)
@
"^DD",799.51,799.51,.01,21,0)
^.001^4^4^3040124^^^
"^DD",799.51,799.51,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.01,21,3,0)
 
"^DD",799.51,799.51,.01,21,4,0)
The NAME field stores a short name of the drug.
"^DD",799.51,799.51,.01,"DEL",1,0)
I $$VADEL^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,1,0)
^.1
"^DD",799.51,799.51,.02,1,1,0)
799.51^AR
"^DD",799.51,799.51,.02,1,1,1)
S ^ROR(799.51,"AR",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.02,1,1,2)
K ^ROR(799.51,"AR",$E(X,1,30),DA)
"^DD",799.51,799.51,.02,1,1,3)
Do not delete!
"^DD",799.51,799.51,.02,1,1,"%D",0)
^^2^2^3040124^
"^DD",799.51,799.51,.02,1,1,"%D",1,0)
This cross-reference groups all drugs associated
"^DD",799.51,799.51,.02,1,1,"%D",2,0)
with a particular registry together.
"^DD",799.51,799.51,.02,1,1,"DT")
3030818
"^DD",799.51,799.51,.02,8.5)
@
"^DD",799.51,799.51,.02,9)
@
"^DD",799.51,799.51,.02,21,0)
^^5^5^3040124^
"^DD",799.51,799.51,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.02,21,3,0)
 
"^DD",799.51,799.51,.02,21,4,0)
This field identifies the registry that the drug 
"^DD",799.51,799.51,.02,21,5,0)
is associated with.
"^DD",799.51,799.51,.02,"DT")
3040114
"^DD",799.51,799.51,.03,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",799.51,799.51,.03,3)
 
"^DD",799.51,799.51,.03,8.5)
@
"^DD",799.51,799.51,.03,9)
@
"^DD",799.51,799.51,.03,12)
Only Drug Groups can be selected.
"^DD",799.51,799.51,.03,12.1)
S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"")
"^DD",799.51,799.51,.03,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.03,23,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,23,1,0)
This field is not used currently. It is reserved for 
"^DD",799.51,799.51,.03,23,2,0)
future use.
"^DD",799.51,799.51,.03,"DT")
3040124
"^DD",799.51,799.51,.04,0)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.04,8.5)
@
"^DD",799.51,799.51,.04,9)
@
"^DD",799.51,799.51,.04,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.04,"DT")
3040114
"^DD",799.51,799.51,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,8.5)
@
"^DD",799.51,799.51,.09,9)
@
"^DD",799.51,799.51,.09,21,0)
^^6^6^3040124^
"^DD",799.51,799.51,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.51,799.51,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.51,799.51,.09,21,3,0)
 
"^DD",799.51,799.51,.09,21,4,0)
Drugs associated with the national registries must
"^DD",799.51,799.51,.09,21,5,0)
have this field set to "Yes". This prevents local
"^DD",799.51,799.51,.09,21,6,0)
editing of other fields of the record.
"^DD",799.51,799.51,.09,"DEL",1,0)
I $$VADEL^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,"DT")
3030818
"^DIC",798.9,798.9,0)
ROR LAB SEARCH^798.9
"^DIC",798.9,798.9,0,"GL")
^ROR(798.9,
"^DIC",798.9,798.9,"%",0)
^1.005^^0
"^DIC",798.9,798.9,"%D",0)
^^10^10^3020403^
"^DIC",798.9,798.9,"%D",1,0)
Lab search criteria are stored in this file. These
"^DIC",798.9,798.9,"%D",2,0)
criteria are referenced by the selection rules and
"^DIC",798.9,798.9,"%D",3,0)
used in the search for Lab results.
"^DIC",798.9,798.9,"%D",4,0)
 
"^DIC",798.9,798.9,"%D",5,0)
It is possible but not recommended to use the same
"^DIC",798.9,798.9,"%D",6,0)
criterion for several different registries.
"^DIC",798.9,798.9,"%D",7,0)
 
"^DIC",798.9,798.9,"%D",8,0)
Records of the file are uniquely identified by the
"^DIC",798.9,798.9,"%D",9,0)
criterion name. The "A" primary key and the "B"
"^DIC",798.9,798.9,"%D",10,0)
uniqueness index are used for this purpose.
"^DIC",798.9,"B","ROR LAB SEARCH",798.9)
 
"^DIC",799.51,799.51,0)
ROR GENERIC DRUG^799.51
"^DIC",799.51,799.51,0,"GL")
^ROR(799.51,
"^DIC",799.51,799.51,"%",0)
^1.005^^0
"^DIC",799.51,799.51,"%D",0)
^^4^4^3040124^
"^DIC",799.51,799.51,"%D",1,0)
This file contains a list of registry specific
"^DIC",799.51,799.51,"%D",2,0)
generic drugs. For example, the ARV 
"^DIC",799.51,799.51,"%D",3,0)
(anti-retroviral) drugs associated with the
"^DIC",799.51,799.51,"%D",4,0)
Immunology Case Registry are stored here.
"^DIC",799.51,"B","ROR GENERIC DRUG",799.51)
 
**END**
**END**
