Released IB*2*358 SEQ #321
Extracted from mail message
**KIDS**:IB*2.0*358^

**INSTALL NAME**
IB*2.0*358
"BLD",6238,0)
IB*2.0*358^INTEGRATED BILLING^0^3060918^y
"BLD",6238,4,0)
^9.64PA^^
"BLD",6238,"INID")
^y
"BLD",6238,"INIT")
IBY358PO
"BLD",6238,"KRN",0)
^9.67PA^8989.52^19
"BLD",6238,"KRN",.4,0)
.4
"BLD",6238,"KRN",.401,0)
.401
"BLD",6238,"KRN",.402,0)
.402
"BLD",6238,"KRN",.403,0)
.403
"BLD",6238,"KRN",.5,0)
.5
"BLD",6238,"KRN",.84,0)
.84
"BLD",6238,"KRN",3.6,0)
3.6
"BLD",6238,"KRN",3.8,0)
3.8
"BLD",6238,"KRN",9.2,0)
9.2
"BLD",6238,"KRN",9.8,0)
9.8
"BLD",6238,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",6238,"KRN",9.8,"NM",1,0)
IBCEF73^^0^B54509277
"BLD",6238,"KRN",9.8,"NM",2,0)
IBCC^^0^B36322352
"BLD",6238,"KRN",9.8,"NM",3,0)
IBCCC1^^0^B9524084
"BLD",6238,"KRN",9.8,"NM",4,0)
IBCEF74^^0^B57131951
"BLD",6238,"KRN",9.8,"NM","B","IBCC",2)

"BLD",6238,"KRN",9.8,"NM","B","IBCCC1",3)

"BLD",6238,"KRN",9.8,"NM","B","IBCEF73",1)

"BLD",6238,"KRN",9.8,"NM","B","IBCEF74",4)

"BLD",6238,"KRN",19,0)
19
"BLD",6238,"KRN",19.1,0)
19.1
"BLD",6238,"KRN",101,0)
101
"BLD",6238,"KRN",409.61,0)
409.61
"BLD",6238,"KRN",771,0)
771
"BLD",6238,"KRN",870,0)
870
"BLD",6238,"KRN",8989.51,0)
8989.51
"BLD",6238,"KRN",8989.52,0)
8989.52
"BLD",6238,"KRN",8994,0)
8994
"BLD",6238,"KRN","B",.4,.4)

"BLD",6238,"KRN","B",.401,.401)

"BLD",6238,"KRN","B",.402,.402)

"BLD",6238,"KRN","B",.403,.403)

"BLD",6238,"KRN","B",.5,.5)

"BLD",6238,"KRN","B",.84,.84)

"BLD",6238,"KRN","B",3.6,3.6)

"BLD",6238,"KRN","B",3.8,3.8)

"BLD",6238,"KRN","B",9.2,9.2)

"BLD",6238,"KRN","B",9.8,9.8)

"BLD",6238,"KRN","B",19,19)

"BLD",6238,"KRN","B",19.1,19.1)

"BLD",6238,"KRN","B",101,101)

"BLD",6238,"KRN","B",409.61,409.61)

"BLD",6238,"KRN","B",771,771)

"BLD",6238,"KRN","B",870,870)

"BLD",6238,"KRN","B",8989.51,8989.51)

"BLD",6238,"KRN","B",8989.52,8989.52)

"BLD",6238,"KRN","B",8994,8994)

"BLD",6238,"QUES",0)
^9.62^^
"BLD",6238,"REQB",0)
^9.611^1^1
"BLD",6238,"REQB",1,0)
IB*2.0*320^2
"BLD",6238,"REQB","B","IB*2.0*320",1)

"INIT")
IBY358PO
"MBREQ")
0
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
358^3060918
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","IBCC")
0^2^B36322352^B36081690
"RTN","IBCC",1,0)
IBCC ;ALB/MJB - CANCEL THIRD PARTY BILL ;14 JUN 88  10:12
"RTN","IBCC",2,0)
 ;;2.0;INTEGRATED BILLING;**2,19,77,80,51,142,137,161,199,241,155,276,320,358**;21-MAR-94
"RTN","IBCC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCC",4,0)
 ;
"RTN","IBCC",5,0)
 ;MAP TO DGCRC
"RTN","IBCC",6,0)
 ;
"RTN","IBCC",7,0)
 I '$D(IBCAN) S IBCAN=1
"RTN","IBCC",8,0)
ASK ;
"RTN","IBCC",9,0)
 ;***
"RTN","IBCC",10,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCC" D T1^%ZOSV ;stop rt clock
"RTN","IBCC",11,0)
 ;S XRTL=$ZU(0),XRTN="IBCC-1" D T0^%ZOSV ;start rt clock
"RTN","IBCC",12,0)
 ;
"RTN","IBCC",13,0)
 ; If called at entry point PROCESS, variable IBNOASK will exist.
"RTN","IBCC",14,0)
 ; First time through, IBNOASK=1
"RTN","IBCC",15,0)
 ; Second time through, IBNOASK=2 and it will quit
"RTN","IBCC",16,0)
 I $G(IBNOASK)=2 G Q
"RTN","IBCC",17,0)
 I $G(IBNOASK)=1 S IBNOASK=2
"RTN","IBCC",18,0)
 ;
"RTN","IBCC",19,0)
 G Q:$G(IBCE("EDI"))
"RTN","IBCC",20,0)
 D Q
"RTN","IBCC",21,0)
 S IBQUIT=0
"RTN","IBCC",22,0)
 N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBCC",23,0)
 I '$G(IBNOASK) S DIC="^DGCR(399,",DIC(0)="AEMQZ",DIC("A")="Enter BILL NUMBER or Patient NAME: " W !! D ^DIC I Y<1 S IBQUIT=1 G Q1
"RTN","IBCC",24,0)
 K IB364
"RTN","IBCC",25,0)
NOPTF ; Note if IB364 is >0 it will be used as the ien to update in file 364
"RTN","IBCC",26,0)
 N DA,I
"RTN","IBCC",27,0)
 I '$G(IBNOASK) S IBIFN=+$G(Y)
"RTN","IBCC",28,0)
 I '$G(IBIFN) G ASK
"RTN","IBCC",29,0)
 I IBCAN>1 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 G ASK
"RTN","IBCC",30,0)
 ; Check if bill has been referred to Counsel
"RTN","IBCC",31,0)
 I $P($G(^PRCA(430,IBIFN,6)),U,4) D  G ASK
"RTN","IBCC",32,0)
 . W !,"This bill has been referred to Regional Counsel and cannot be 'CANCELLED' in"
"RTN","IBCC",33,0)
 . W !,"Integrated Billing.  Please use the option 'TP Referred Follow-up'"
"RTN","IBCC",34,0)
 . W !,"[PRCA RC ACTION MENU] in Accounts Receivable to request that Regional"
"RTN","IBCC",35,0)
 . W !,"Counsel return the bill to your facility."
"RTN","IBCC",36,0)
 . Q
"RTN","IBCC",37,0)
 ;
"RTN","IBCC",38,0)
 F I=0,"S","U1" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCC",39,0)
 S IBSTAT=$P(IB(0),U,13)
"RTN","IBCC",40,0)
 ;
"RTN","IBCC",41,0)
 ; Restrict access to this process for REQUEST MRA bills
"RTN","IBCC",42,0)
 I IBSTAT=2,'$G(IBCE("EDI")),$$MRAWL^IBCEMU2(IBIFN) D  G ASK
"RTN","IBCC",43,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it does appear on the"
"RTN","IBCC",44,0)
 . W !?4,"MRA Management Work List.  Please use the 'MRA Management Menu' options"
"RTN","IBCC",45,0)
 . W !?4,"for all processing related to this bill."
"RTN","IBCC",46,0)
 . Q
"RTN","IBCC",47,0)
 ;
"RTN","IBCC",48,0)
 ; Warning message if in a REQUEST MRA status with no MRA on file
"RTN","IBCC",49,0)
 I IBSTAT=2,'$$MRACNT^IBCEMU1(IBIFN) D
"RTN","IBCC",50,0)
 . N REJ
"RTN","IBCC",51,0)
 . D TXSTS^IBCEMU2(IBIFN,,.REJ)
"RTN","IBCC",52,0)
 . W *7,!!?4,"Warning!  This bill is in a status of REQUEST MRA."
"RTN","IBCC",53,0)
 . W !?4,"No MRAs have been received"
"RTN","IBCC",54,0)
 . I REJ W ", but the most recent transmission of this",!?4,"MRA request bill was rejected."
"RTN","IBCC",55,0)
 . I 'REJ W " and there are no rejection messages on file",!?4,"for the most recent transmission of this MRA request bill."
"RTN","IBCC",56,0)
 . Q
"RTN","IBCC",57,0)
 ;
"RTN","IBCC",58,0)
 I IBCAN=2,IB("S")]"",+$P(IB("S"),U,16),$P(IB("S"),U,17)]"" D  G 1
"RTN","IBCC",59,0)
 . W !!,"This bill was cancelled on " S Y=$P(IB("S"),U,17) X ^DD("DD") W Y," by ",$S($P(IB("S"),U,18)']"":IBU,$D(^VA(200,$P(IB("S"),U,18),0)):$P(^(0),U,1),1:IBU),"."
"RTN","IBCC",60,0)
 . S IBQUIT=1
"RTN","IBCC",61,0)
 ; Notify if a payment has been posted to this bill before cancel
"RTN","IBCC",62,0)
 N PRCABILL
"RTN","IBCC",63,0)
 S PRCABILL=$$TPR^PRCAFN(IBIFN)
"RTN","IBCC",64,0)
 I PRCABILL=-1 W !!,"Please note: PRCA was unable to determine if a payment has been posted."
"RTN","IBCC",65,0)
 I PRCABILL>0 W !!,"Please note a PAYMENT of **$"_$$TPR^PRCAFN(IBIFN)_"** has been POSTED to this bill."
"RTN","IBCC",66,0)
 ;
"RTN","IBCC",67,0)
 ; If bill was created via Electronic claims process then notify
"RTN","IBCC",68,0)
 ; user that cancellation should occur using ECME package
"RTN","IBCC",69,0)
 I $$GET1^DIQ(399,IBIFN_",",460)]"" D  G:'Y ASK
"RTN","IBCC",70,0)
 . W !!!?5,"This bill was created by the"
"RTN","IBCC",71,0)
 . W !?5,"Electronic Claims Management Engine (ECME)."
"RTN","IBCC",72,0)
 . W !?5,"Cancellation needs to occur in the ECME package by"
"RTN","IBCC",73,0)
 . W !?5,"submitting a REVERSAL to the Payer.",!!
"RTN","IBCC",74,0)
 . K DIR S DIR("A",1)="Has a REVERSAL for this e-Claim already been",DIR("A")="submitted to the payer via the ECME package (Y/N)",DIR(0)="Y",DIR("B")="NO" D ^DIR
"RTN","IBCC",75,0)
 . I Y=0 W !!,"<PLEASE SUBMIT A REVERSAL USING THE APPROPRIATE OPTION IN THE ECME PACKAGE>",$C(7)
"RTN","IBCC",76,0)
 ;
"RTN","IBCC",77,0)
CHK S (IBCCCC,IBQUIT)=0 I '$G(IBCEAUTO),'$G(IBMCSCAN) W !!,"ARE YOU SURE YOU WANT TO CANCEL THIS BILL" S %=2 D YN^DICN G:%=0 HELP I %'=1 S IBQUIT=1 G NO
"RTN","IBCC",78,0)
 ;
"RTN","IBCC",79,0)
 I '$G(IBCEAUTO) W !!,"LAST CHANCE TO CHANGE YOUR MIND..."
"RTN","IBCC",80,0)
 S DIE=399,DA=IBIFN,DIE("NO^")=""
"RTN","IBCC",81,0)
 S DR="16;S:'X Y=0;19;S IBCCCC=1;"
"RTN","IBCC",82,0)
 I $G(IBCEAUTO) S DR="16////1;19////EDI/MRA TURNED OFF;S IBCCCC=1;"
"RTN","IBCC",83,0)
 ;
"RTN","IBCC",84,0)
 ; esg - 8/23/06 - IB*2*358 - fix semi-colon in free text field
"RTN","IBCC",85,0)
 I $G(IBMCSRSC)'="" S DR="16;S:'X Y=0;19//^S X=IBMCSRSC;S IBCCCC=1;"
"RTN","IBCC",86,0)
 D ^DIE K DIE,DR
"RTN","IBCC",87,0)
 ;
"RTN","IBCC",88,0)
NO I 'IBCCCC W !!,"<NO ACTION TAKEN>",*7 S IBQUIT=1 G ASK:IBCAN<2,Q
"RTN","IBCC",89,0)
 S IBCCR=$P($G(^DGCR(399,IBIFN,"S")),U,19)
"RTN","IBCC",90,0)
 W !!,"...Bill has been cancelled..." D BULL^IBCBULL,BSTAT^IBCDC(IBIFN),PRIOR^IBCCC2(IBIFN)
"RTN","IBCC",91,0)
 ;
"RTN","IBCC",92,0)
 ; cancelling in ingenix claimsmanager if ingenix is running
"RTN","IBCC",93,0)
 ; clean-up of variables is OK if not coming in from ListMan screen
"RTN","IBCC",94,0)
 I $$CM^IBCIUT1(IBIFN) S IBCISNT=4 D ST2^IBCIST I '$G(IBCICNCL) K IBCISNT,IBCISTAT,IBCIREDT,IBCIERR
"RTN","IBCC",95,0)
 ;
"RTN","IBCC",96,0)
 S IBEDI=$G(IB364)
"RTN","IBCC",97,0)
 I 'IBEDI S IBEDI=+$$LAST364^IBCEF4(IBIFN)
"RTN","IBCC",98,0)
 I IBEDI D UPDEDI^IBCEM(IBEDI,"C") ;Update EDI files, if needed
"RTN","IBCC",99,0)
 ;
"RTN","IBCC",100,0)
 F I="S","U1" S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCC",101,0)
 S PRCASV("ARREC")=IBIFN,PRCASV("AMT")=$S(IB("U1")']"":0,1:$P(IB("U1"),"^")),PRCASV("DATE")=$P(IB("S"),"^",17),PRCASV("BY")=$P(IB("S"),"^",18)
"RTN","IBCC",102,0)
 S PRCASV("COMMENT")=$S($P(IB("S"),U,19)]"":$P(IB("S"),U,19),$P(^IBE(350.9,1,2),"^",7)]"":$P(^(2),"^",7),1:"BILL CANCELLED IN MAS")
"RTN","IBCC",103,0)
 S PRCASV("BY")=$S($P(IB("S"),U,18)]"":$P(IB("S"),U,18),1:"")
"RTN","IBCC",104,0)
 S X=$$CANCEL^RCBEIB($G(PRCASV("ARREC")),$G(PRCASV("DATE")),$G(PRCASV("BY")),$G(PRCASV("AMT")),$G(PRCASV("COMMENT")))
"RTN","IBCC",105,0)
 W !,$S(X:">> The receivable associated with the claim was cancelled.",1:">> The receivable associated with the claim was not cancelled.")
"RTN","IBCC",106,0)
 I $P(X,U,2)]"" W !,">>> ",$P(X,U,2) ; The reason why the claim can not be cancelled.
"RTN","IBCC",107,0)
 I IBCAN<2 D RNB^IBCC1 ;assign a reason not billable
"RTN","IBCC",108,0)
 G ASK:IBCAN<2,Q
"RTN","IBCC",109,0)
 ;
"RTN","IBCC",110,0)
HELP W !,?3,"Answer 'YES' or 'Y' if you wish to cancel this bill.",!,?3,"Answer 'NO' or 'N' if you want to abort." G CHK
"RTN","IBCC",111,0)
 Q
"RTN","IBCC",112,0)
1 I $P(IB(0),U,13)=1 W !,"This record was re-opened on " S Y=$P(IB(0),U,14) X ^DD("DD") W Y,"." G CHK
"RTN","IBCC",113,0)
 G ASK
"RTN","IBCC",114,0)
Q1 K:IBCAN=1 IBQUIT K IBCAN
"RTN","IBCC",115,0)
Q K %,IBEPAR,IBSTAT,IBARST,IBAC1,IB,DFN,IBX,IBZ,DIC,DIE,DR,PRCASV,PRCASVC,X,Y,IBEDI
"RTN","IBCC",116,0)
 ;***
"RTN","IBCC",117,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCC" D T1^%ZOSV ;stop rt clock
"RTN","IBCC",118,0)
 Q
"RTN","IBCC",119,0)
 ;
"RTN","IBCC",120,0)
PROCESS(IBIFN,IBCAN) ;
"RTN","IBCC",121,0)
 ; Entry point when the bill number is already known.  Use this when
"RTN","IBCC",122,0)
 ; you just want to try to cancel this bill and this bill only.
"RTN","IBCC",123,0)
 ; Input:
"RTN","IBCC",124,0)
 ;   IBIFN - Internal bill# (Required)
"RTN","IBCC",125,0)
 ;   IBCAN - Cancel Flag (optional, defaults to 1 if not included)
"RTN","IBCC",126,0)
 ;
"RTN","IBCC",127,0)
 NEW IBNOASK
"RTN","IBCC",128,0)
 S IBNOASK=1
"RTN","IBCC",129,0)
 S IBCAN=$G(IBCAN,1)
"RTN","IBCC",130,0)
 G ASK
"RTN","IBCC",131,0)
 ;
"RTN","IBCC",132,0)
 ;IBCC
"RTN","IBCCC1")
0^3^B9524084^B9434923
"RTN","IBCCC1",1,0)
IBCCC1 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;25-JAN-90
"RTN","IBCCC1",2,0)
 ;;2.0;INTEGRATED BILLING;**80,109,106,51,320,358**;21-MAR-94
"RTN","IBCCC1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCCC1",4,0)
 ;
"RTN","IBCCC1",5,0)
 ;MAP TO DGCRCC1
"RTN","IBCCC1",6,0)
 ;
"RTN","IBCCC1",7,0)
 ;STEP 1 - cancel bill
"RTN","IBCCC1",8,0)
 ;STEP 1.5 - entry to clone previously cancelled bill.  (must be cancell)
"RTN","IBCCC1",9,0)
 ;STEP 2 - build array of IBIDS call screen that asks ok
"RTN","IBCCC1",10,0)
 ;STEP 3 - pass stub entry to ar
"RTN","IBCCC1",11,0)
 ;STEP 4 - store stub data in MCCR then x-ref
"RTN","IBCCC1",12,0)
 ;STEP 4.5 - store claim clone info on "S1" node.
"RTN","IBCCC1",13,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC1",14,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC1",15,0)
 ;
"RTN","IBCCC1",16,0)
STEP4 S X=$P($T(WHERE),";;",2) F I=0:0 S I=$O(IBIDS(I)) Q:'I  S X1=$P($E(X,$F(X,I)+1,999),";",1),$P(IBDR($P(X1,"^",1)),"^",$P(X1,"^",2))=IBIDS(I)
"RTN","IBCCC1",17,0)
 S IBIFN=PRCASV("ARREC") F I=0,"C","M","M1","S","U","U1" I $D(IBDR(I)) S ^DGCR(399,IBIFN,I)=IBDR(I)
"RTN","IBCCC1",18,0)
 D  ; Protect variables;index entry;replace FT if copy/clone and it chngs
"RTN","IBCCC1",19,0)
 . N IBHOLD,DIE,DR,DA,X,Y
"RTN","IBCCC1",20,0)
 . S IBHOLD("FT")=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC1",21,0)
 . S $P(^DGCR(399,0),"^",3)=IBIFN,$P(^(0),"^",4)=$P(^(0),"^",4)+1 W !,"Cross-referencing new billing entry..." D INDEX^IBCCC2
"RTN","IBCCC1",22,0)
 . I $G(IBCNCOPY),IBHOLD("FT"),IBHOLD("FT")'=$P($G(^DGCR(399,IBIFN,0)),U,19) S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBHOLD("FT") D ^DIE
"RTN","IBCCC1",23,0)
 S IBYN=1 W !!,*7,"Billing Record #",$P(^DGCR(399,+IBIFN,0),"^",1)," established for '",VADM(1),"'..."
"RTN","IBCCC1",24,0)
 S:$G(IBCE("EDI")) IBCE("EDI","NEW")=IBIFN
"RTN","IBCCC1",25,0)
 I $G(IBCE("EDI"))!($G(IBCTCOPY)=1) S IBHV("IBIFN1")=IBIFN ; New bill #
"RTN","IBCCC1",26,0)
 S IBBCT=IBIFN   ;bill the old claim was cloned TO.
"RTN","IBCCC1",27,0)
END K %,%DT,IB,IBA,IBNWBL,IBBT,IBIDS,I,J,VADM,X,X1,X2,X3,X4,Y
"RTN","IBCCC1",28,0)
 ;
"RTN","IBCCC1",29,0)
STEP4P5 ;added in patch 320
"RTN","IBCCC1",30,0)
 ;first, put the TO data on the FROM bill
"RTN","IBCCC1",31,0)
 ;
"RTN","IBCCC1",32,0)
 I '$G(IBCNCOPY) G STEP45X
"RTN","IBCCC1",33,0)
 S DIE="^DGCR(399,",DA=IBBCF,DR="29////"_$G(IBBCT) D ^DIE
"RTN","IBCCC1",34,0)
 S DIE="^DGCR(399,",DA=IBBCF,DR="31////"_$G(IBDBC) D ^DIE
"RTN","IBCCC1",35,0)
 S DIE="^DGCR(399,",DA=IBBCF,DR="32////"_$G(IBBCB) D ^DIE
"RTN","IBCCC1",36,0)
 ;
"RTN","IBCCC1",37,0)
 ; esg - 8/23/06 - IB*2*358 - fix semi-colon in free text field
"RTN","IBCCC1",38,0)
 S DIE="^DGCR(399,",DA=IBBCF,DR="33////^S X=$G(IBCCR)" D ^DIE
"RTN","IBCCC1",39,0)
 ;
"RTN","IBCCC1",40,0)
 ;now, put the FROM data on the TO bill
"RTN","IBCCC1",41,0)
 ;
"RTN","IBCCC1",42,0)
 S DIE="^DGCR(399,",DA=IBBCT,DR="30////"_$G(IBBCF) D ^DIE
"RTN","IBCCC1",43,0)
 ;
"RTN","IBCCC1",44,0)
STEP45X G ^IBCCC2 ;go to step 5
"RTN","IBCCC1",45,0)
 ;
"RTN","IBCCC1",46,0)
 ;
"RTN","IBCCC1",47,0)
XREF F IBI1=0:0 S IBI1=$O(^DD(399,IBI,1,IBI1)) Q:'IBI1  I $D(^DD(399,IBI,1,IBI1,1)) S DA=IBIFN,X=IBIDS(IBI) I X]"" X ^DD(399,IBI,1,IBI1,1)
"RTN","IBCCC1",48,0)
 Q
"RTN","IBCCC1",49,0)
 ;
"RTN","IBCCC1",50,0)
WHERE ;;.01^0^1;.02^0^2;.03^0^3;.04^0^4;.05^0^5;.06^0^6;.07^0^7;.08^0^8;.09^0^9;.11^0^11;.12^0^12;.17^0^17;.18^0^18;.19^0^19;.15^0^15;.16^0^16;.21^0^21;.22^0^22;.23^0^23;.24^0^24;.25^0^25;.26^0^26;.27^0^27;151^U^1;152^U^2;155^U^5;159.5^U^20;
"RTN","IBCCC1",51,0)
 ;
"RTN","IBCEF73")
0^1^B54509277^B54477454
"RTN","IBCEF73",1,0)
IBCEF73 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF73",2,0)
 ;;2.0;INTEGRATED BILLING;**232,320,358**;21-MAR-94
"RTN","IBCEF73",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF73",4,0)
 ;
"RTN","IBCEF73",5,0)
 ;check qualifier
"RTN","IBCEF73",6,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",7,0)
 ;IBPROV - function in #399 (1-referring, 2-operating,etc)
"RTN","IBCEF73",8,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",9,0)
 ;IBVAL - value to check
"RTN","IBCEF73",10,0)
CHCKSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",11,0)
 I IBFRM=0 Q:$$CHSEC(1,IBPROV,IBTYPE,IBVAL) 1  Q $$CHSEC(2,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",12,0)
 Q $$CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",13,0)
 ;
"RTN","IBCEF73",14,0)
CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",15,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",16,0)
 ;referring
"RTN","IBCEF73",17,0)
 I IBPROV=1 S IBSTR=$S(IBTYPE="C":$$OPR5(IBFRM),IBTYPE="O":$$OP4(IBFRM),1:"")
"RTN","IBCEF73",18,0)
 ;operating
"RTN","IBCEF73",19,0)
 I IBPROV=2 S IBSTR=$S(IBTYPE="C":$$OPR3(IBFRM),IBTYPE="O":$$OP2(IBFRM),1:"")
"RTN","IBCEF73",20,0)
 ;rendering
"RTN","IBCEF73",21,0)
 I IBPROV=3 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",22,0)
 ;attending
"RTN","IBCEF73",23,0)
 I IBPROV=4 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",24,0)
 ;supervising
"RTN","IBCEF73",25,0)
 I IBPROV=5 S IBSTR=$S(IBTYPE="C":$$OPR8(IBFRM),IBTYPE="O":$$OP8(IBFRM),1:"")
"RTN","IBCEF73",26,0)
 ;other
"RTN","IBCEF73",27,0)
 I IBPROV=9 S IBSTR=$S(IBTYPE="C":$$OPR4(IBFRM),IBTYPE="O":$$OP9(IBFRM),1:"")
"RTN","IBCEF73",28,0)
 Q:IBPROV=0!(IBSTR="") 1  ;if "" or facility id always return 1
"RTN","IBCEF73",29,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",30,0)
 ;
"RTN","IBCEF73",31,0)
 ;Filter invalid qualifier entries for records SUB1,SUB2,OP6,OP7,OP3
"RTN","IBCEF73",32,0)
 ; Rebuild the IBXSAVE("PROVINF" or IBXSAVE("PROVINF_FAC" array with
"RTN","IBCEF73",33,0)
 ;  only ids that have valid qualifiers
"RTN","IBCEF73",34,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",35,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",36,0)
 ;IBFAC - 1 if facility check, 0 if attending/rendering check
"RTN","IBCEF73",37,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",38,0)
 ;IBXSAVE - the array of provider ids extracted, returned filtered -
"RTN","IBCEF73",39,0)
 ;   passed by reference
"RTN","IBCEF73",40,0)
CHCKSUB(IBFRM,IBREC,IBFAC,IBTYPE,IBXSAVE) ;
"RTN","IBCEF73",41,0)
 N Z,Z0,Z1,Z2,CT,IBSAVE
"RTN","IBCEF73",42,0)
 S Z="PROVINF"_$P("^_FAC",U,$G(IBFAC)+1)
"RTN","IBCEF73",43,0)
 I '$G(IBXSAVE(Z,IBXIEN)) D
"RTN","IBCEF73",44,0)
 . D F^IBCEF("N-ALL "_$S($G(IBFAC):"OUTSIDE FAC PROVIDER INF",1:"CUR/OTH PROVIDER INFO"))
"RTN","IBCEF73",45,0)
 M IBSAVE(Z,IBXIEN,IBTYPE)=IBXSAVE(Z,IBXIEN,IBTYPE) K IBXSAVE(Z,IBXIEN,IBTYPE)
"RTN","IBCEF73",46,0)
 S Z0=0 F  S Z0=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0)) Q:'Z0  S Z1="" F  S Z1=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1)) Q:Z1=""  S (Z2,CT)=0 F  S Z2=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)) Q:'Z2  D
"RTN","IBCEF73",47,0)
 . N IBVAL
"RTN","IBCEF73",48,0)
 . S IBVAL=$P(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2),U,3)
"RTN","IBCEF73",49,0)
 . I IBFRM=0 D  Q
"RTN","IBCEF73",50,0)
 .. I $S($$CHSUB(1,IBREC,IBVAL):1,1:$$CHSUB(2,IBPROV,IBTYPE,IBVAL)) D
"RTN","IBCEF73",51,0)
 ... S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",52,0)
 ... I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",53,0)
 . I $$CHSUB(IBFRM,IBREC,IBVAL) D
"RTN","IBCEF73",54,0)
 .. S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",55,0)
 .. I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",56,0)
 Q
"RTN","IBCEF73",57,0)
 ;
"RTN","IBCEF73",58,0)
 ; Check if valid qualifier
"RTN","IBCEF73",59,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",60,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",61,0)
 ;IBVAL - value to check
"RTN","IBCEF73",62,0)
CHSUB(IBFRM,IBREC,IBVAL) ;
"RTN","IBCEF73",63,0)
 N IBSTR
"RTN","IBCEF73",64,0)
 I IBREC="SUB1" S IBSTR=$$SUB1(IBFRM)
"RTN","IBCEF73",65,0)
 I IBREC="SUB2" S IBSTR=$$SUB2(IBFRM)
"RTN","IBCEF73",66,0)
 I IBREC="OP7" S IBSTR=$$OP7(IBFRM)
"RTN","IBCEF73",67,0)
 I IBREC="OP3" S IBSTR=$$OP3(IBFRM)
"RTN","IBCEF73",68,0)
 I IBREC="OP6" S IBSTR=$$OP6(IBFRM)
"RTN","IBCEF73",69,0)
 Q:$G(IBSTR)="" 1  ;if "" always return 1
"RTN","IBCEF73",70,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",71,0)
 ;
"RTN","IBCEF73",72,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",73,0)
OPR2(IBFRM) ;
"RTN","IBCEF73",74,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",75,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",76,0)
 Q ""
"RTN","IBCEF73",77,0)
 ;
"RTN","IBCEF73",78,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",79,0)
OP1(IBFRM) ;
"RTN","IBCEF73",80,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",81,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",82,0)
 Q ""
"RTN","IBCEF73",83,0)
 ;
"RTN","IBCEF73",84,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",85,0)
OPR3(IBFRM) ;
"RTN","IBCEF73",86,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",87,0)
 Q ""
"RTN","IBCEF73",88,0)
 ;
"RTN","IBCEF73",89,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",90,0)
OP2(IBFRM) ;
"RTN","IBCEF73",91,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",92,0)
 Q ""
"RTN","IBCEF73",93,0)
 ;
"RTN","IBCEF73",94,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",95,0)
SUB1(IBFRM) ;
"RTN","IBCEF73",96,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",97,0)
 Q:IBFRM=2 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^U3^SY^X5^"
"RTN","IBCEF73",98,0)
 Q ""
"RTN","IBCEF73",99,0)
 ;
"RTN","IBCEF73",100,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",101,0)
OPR4(IBFRM) ;
"RTN","IBCEF73",102,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",103,0)
 Q ""
"RTN","IBCEF73",104,0)
 ;
"RTN","IBCEF73",105,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",106,0)
OP9(IBFRM) ;
"RTN","IBCEF73",107,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",108,0)
 Q ""
"RTN","IBCEF73",109,0)
 ;
"RTN","IBCEF73",110,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",111,0)
SUB2(IBFRM) ;
"RTN","IBCEF73",112,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1G^1H^1J^EI^FH^G2^G5^LU^N5^X5^TJ^B3^BQ^SY^U3^"
"RTN","IBCEF73",113,0)
 Q:IBFRM=2 "^0B^X4^1A^1B^1C^1G^1H^G2^LU^X5^TJ^B3^BQ^SY^U3^"
"RTN","IBCEF73",114,0)
 Q ""
"RTN","IBCEF73",115,0)
 ;
"RTN","IBCEF73",116,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",117,0)
OP3(IBFRM) ;
"RTN","IBCEF73",118,0)
 Q:IBFRM=1 "^1B^1C^EI^G2^LU^N5^"
"RTN","IBCEF73",119,0)
 Q ""
"RTN","IBCEF73",120,0)
 ;
"RTN","IBCEF73",121,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",122,0)
OPR5(IBFRM) ;
"RTN","IBCEF73",123,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",124,0)
 Q ""
"RTN","IBCEF73",125,0)
 ;
"RTN","IBCEF73",126,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",127,0)
OPR8(IBFRM) ;
"RTN","IBCEF73",128,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",129,0)
 Q ""
"RTN","IBCEF73",130,0)
 ;
"RTN","IBCEF73",131,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",132,0)
OP4(IBFRM) ;
"RTN","IBCEF73",133,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",134,0)
 Q ""
"RTN","IBCEF73",135,0)
 ;
"RTN","IBCEF73",136,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",137,0)
OP8(IBFRM) ;
"RTN","IBCEF73",138,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^N5^"
"RTN","IBCEF73",139,0)
 Q ""
"RTN","IBCEF73",140,0)
 ;
"RTN","IBCEF73",141,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",142,0)
OP6(IBFRM) ;
"RTN","IBCEF73",143,0)
 Q:IBFRM=2 "^1A^1B^1C^G2^LU^N5^"
"RTN","IBCEF73",144,0)
 Q ""
"RTN","IBCEF73",145,0)
 ;
"RTN","IBCEF73",146,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",147,0)
OP7(IBFRM) ;
"RTN","IBCEF73",148,0)
 Q:IBFRM=2 "^1A^1B^1C^G2^LU^N5^"
"RTN","IBCEF73",149,0)
 Q ""
"RTN","IBCEF73",150,0)
 ;
"RTN","IBCEF73",151,0)
 ;check qualifier for PRV1
"RTN","IBCEF73",152,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",153,0)
 ;IBVAL - value to check
"RTN","IBCEF73",154,0)
CHCKPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",155,0)
 I IBFRM=0 Q:$$CHPRV1(1,IBVAL) 1  Q $$CHPRV1(2,IBVAL)
"RTN","IBCEF73",156,0)
 Q $$CHPRV1(IBFRM,IBVAL)
"RTN","IBCEF73",157,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",158,0)
CHPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",159,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",160,0)
 S IBSTR=$$PRV1(IBFRM)
"RTN","IBCEF73",161,0)
 Q:IBSTR="" 1
"RTN","IBCEF73",162,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",163,0)
 ;
"RTN","IBCEF73",164,0)
PRV1(IBFRM) ;
"RTN","IBCEF73",165,0)
 Q:IBFRM=1 "^1A^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^SY^X5^"
"RTN","IBCEF73",166,0)
 Q:IBFRM=2 "^1B^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^U3^SY^X5^"
"RTN","IBCEF73",167,0)
 Q ""
"RTN","IBCEF73",168,0)
 ;
"RTN","IBCEF73",169,0)
PTSELF ;This tag is for the CI2 segment. If the IBXSAVE("IADR") is empty
"RTN","IBCEF73",170,0)
 ;check to see if the relationship to pt is 18 (self) if so pull info
"RTN","IBCEF73",171,0)
 ;from PT1 calls
"RTN","IBCEF73",172,0)
 ;See if relationship to insured is 18 if not or if "" quit
"RTN","IBCEF73",173,0)
 N IBZ
"RTN","IBCEF73",174,0)
 D F^IBCEF("N-ALL INSURED PT RELATION","IBZ",,IBXIEN)
"RTN","IBCEF73",175,0)
 S IBZ=$G(IBZ(+$$COBN^IBCEF(IBXIEN)))
"RTN","IBCEF73",176,0)
 S IBZ=$$RELATION^IBCEFG1(IBZ)
"RTN","IBCEF73",177,0)
 I IBZ'="18" S IBXDATA="" Q
"RTN","IBCEF73",178,0)
 N IBZ D F^IBCEF("N-PATIENT STREET ADDRESS 1-3","IBZ",,IBXIEN)
"RTN","IBCEF73",179,0)
 S IBXDATA="18"
"RTN","IBCEF73",180,0)
 Q
"RTN","IBCEF73",181,0)
 ;
"RTN","IBCEF73",182,0)
NOPUNCT(X,SPACE,EXC) ; Strip punctuation from data in X
"RTN","IBCEF73",183,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF73",184,0)
 ; EXC = list of punct not to strip
"RTN","IBCEF73",185,0)
 ;
"RTN","IBCEF73",186,0)
 N PUNCT,Z
"RTN","IBCEF73",187,0)
 S PUNCT=".,-+(){}[]\/><:;?|=_*&%$#@!~`^'"""
"RTN","IBCEF73",188,0)
 I $G(SPACE) S PUNCT=PUNCT_" "
"RTN","IBCEF73",189,0)
 I $G(EXC)'="" S PUNCT=$TR(PUNCT,EXC)
"RTN","IBCEF73",190,0)
 N L S L=""
"RTN","IBCEF73",191,0)
 F  S L=$O(X(L)) Q:L=""  D
"RTN","IBCEF73",192,0)
 . S X(L)=$TR(X(L),PUNCT)
"RTN","IBCEF73",193,0)
 I $G(X)'="" D
"RTN","IBCEF73",194,0)
 . S X=$TR(X,PUNCT)
"RTN","IBCEF73",195,0)
 Q
"RTN","IBCEF73",196,0)
 ;
"RTN","IBCEF73",197,0)
PROVID(IBXIEN) ;This modified version of prov id call is to acquire the SSN
"RTN","IBCEF73",198,0)
 ;first, if the ssn is not available then we need to get the tax id.
"RTN","IBCEF73",199,0)
 ;we also need to provide the modifier for which value it is
"RTN","IBCEF73",200,0)
 Q:+$G(IBXIEN)=0 ""
"RTN","IBCEF73",201,0)
 S IBXSAVE("ID")=""
"RTN","IBCEF73",202,0)
 S IBXSAVE=""
"RTN","IBCEF73",203,0)
 S IBXSAVE=$$PROVSSN^IBCEF7(IBXIEN)
"RTN","IBCEF73",204,0)
 N I
"RTN","IBCEF73",205,0)
 F I=1:1:9 D
"RTN","IBCEF73",206,0)
 . I $P(IBXSAVE,"^",I)]"" S $P(IBXSAVE("ID"),U,I)="34"
"RTN","IBCEF73",207,0)
 ;If no ibxdata go look in 355.97 for 24 
"RTN","IBCEF73",208,0)
 N IBRETVAL S IBRETVAL=""
"RTN","IBCEF73",209,0)
 N IBPTR,IBFT
"RTN","IBCEF73",210,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73",211,0)
 . Q:$P(IBXSAVE,U,IBFT)]""
"RTN","IBCEF73",212,0)
 . S IBPTR=$$PROVPTR^IBCEF7(IBXIEN,IBFT)
"RTN","IBCEF73",213,0)
 . S $P(IBRETVAL,"^",IBFT)=$$TAX3559(IBPTR)
"RTN","IBCEF73",214,0)
 . I $P(IBRETVAL,U,IBFT)]"" D
"RTN","IBCEF73",215,0)
 . . S $P(IBXSAVE,U,IBFT)=$P(IBRETVAL,U,IBFT)
"RTN","IBCEF73",216,0)
 . . S $P(IBXSAVE("ID"),U,IBFT)="24"
"RTN","IBCEF73",217,0)
 Q IBXSAVE
"RTN","IBCEF73",218,0)
 ;
"RTN","IBCEF73",219,0)
TAX3559(IBPROV) ;
"RTN","IBCEF73",220,0)
 I $P(IBPROV,";",2)'["IBA(355.9" Q ""
"RTN","IBCEF73",221,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",222,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",223,0)
 S IBID=""
"RTN","IBCEF73",224,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",225,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",226,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6) ;provider ID type, ptr to #355.97
"RTN","IBCEF73",227,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",228,0)
 . S:IBIDTYP="EI" IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",229,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",230,0)
 ;
"RTN","IBCEF73",231,0)
 ;IBFULL-full name
"RTN","IBCEF73",232,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",233,0)
 ;
"RTN","IBCEF73",234,0)
SSN200(IBPTR)   ;
"RTN","IBCEF73",235,0)
 I $P(IBPTR,";",2)'="VA(200," Q ""
"RTN","IBCEF73",236,0)
 Q $$NOPUNCT^IBCEF($$GET1^DIQ(200,+$P(IBPTR,";")_",",9))
"RTN","IBCEF73",237,0)
 ;
"RTN","IBCEF73",238,0)
 ;Input:
"RTN","IBCEF73",239,0)
 ; IBIEN399 - ien in #399
"RTN","IBCEF73",240,0)
 ;Output:
"RTN","IBCEF73",241,0)
 ; returns a string with "^" delimiters that contains SSNs (if any)
"RTN","IBCEF73",242,0)
 ; in the position that equal to FUNCTION number
"RTN","IBCEF73",243,0)
 ; i.e. if RENDERING function # is 3 then SSN will be
"RTN","IBCEF73",244,0)
 ; in $P(return value,"^",3), etc.
"RTN","IBCEF73",245,0)
 ;
"RTN","IBCEF73",246,0)
SSN3559(IBPROV) ;
"RTN","IBCEF73",247,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",248,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",249,0)
 S IBID=""
"RTN","IBCEF73",250,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",251,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",252,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6)
"RTN","IBCEF73",253,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",254,0)
 . S:IBIDTYP="SY" IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",255,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",256,0)
 ;
"RTN","IBCEF73",257,0)
 ;IBIDTYP-provider ID type, ptr to #355.97
"RTN","IBCEF73",258,0)
 ;IBFULL-full name
"RTN","IBCEF73",259,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",260,0)
 ;
"RTN","IBCEF73",261,0)
PRV1FMT(P) ;FORMAT CODE FOR PRV1 SEGMENT THAT WON'T FIT ON LINE
"RTN","IBCEF73",262,0)
 K IBXDATA
"RTN","IBCEF73",263,0)
 S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN)
"RTN","IBCEF73",264,0)
 S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",P)
"RTN","IBCEF73",265,0)
 I $G(IBXDATA)'="" S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"RTN","IBCEF73",266,0)
 Q
"RTN","IBCEF73",267,0)
 ;
"RTN","IBCEF74")
0^4^B57131951^B56964899
"RTN","IBCEF74",1,0)
IBCEF74 ;WOIFO/SS - FORMATTER/EXTRACT BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF74",2,0)
 ;;2.0;INTEGRATED BILLING;**232,280,155,290,291,320,358**;21-MAR-94
"RTN","IBCEF74",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF74",4,0)
 ;
"RTN","IBCEF74",5,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC,IBSEQ,IBLIMIT) ;
"RTN","IBCEF74",6,0)
 D SORT^IBCEF77($G(IBPRNUM),$G(IBPRTYP),$G(IB399),.IBSRC,.IBDST,$G(IBN),$G(IBEXC),$G(IBSEQ),$G(IBLIMIT))
"RTN","IBCEF74",7,0)
 Q
"RTN","IBCEF74",8,0)
 ;
"RTN","IBCEF74",9,0)
 ;-- PROVINF --
"RTN","IBCEF74",10,0)
 ;Create array with prov info
"RTN","IBCEF74",11,0)
 ;Input:
"RTN","IBCEF74",12,0)
 ; IB399 - ien #399
"RTN","IBCEF74",13,0)
 ; IBPRNUM - 1=prim ins, 2= sec, 3 -tert
"RTN","IBCEF74",14,0)
 ; IBRES - for results
"RTN","IBCEF74",15,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEF74",16,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEF74",17,0)
 ;    IBSORT can be any (say 1)
"RTN","IBCEF74",18,0)
 ;  if PROVINF is called for "O" mode then can be more than set of data
"RTN","IBCEF74",19,0)
 ;    - need to sort array to use it (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEF74",20,0)
 ;    for mode "O" it should be 1 or 2 (see PROVIDER section)
"RTN","IBCEF74",21,0)
 ;IBINSTP -  "C" -current ins, "O"-other
"RTN","IBCEF74",22,0)
 ;Output:
"RTN","IBCEF74",23,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF74",24,0)
 ; where:(see PROVIDER)
"RTN","IBCEF74",25,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP) ;
"RTN","IBCEF74",26,0)
 I +$G(IBSORT)=0 S IBSORT=IBPRNUM
"RTN","IBCEF74",27,0)
 N IBPRTYP,IBINSCO,IBPROV,IBFRMTYP,IBCARE,IB35591,IBN,IBCURR,IBEXC,IBALLSSN,IBSSNIEN,IBLIMIT
"RTN","IBCEF74",28,0)
 S IBN=0
"RTN","IBCEF74",29,0)
 D F^IBCEF("N-ALL ATT/RENDERING PROV SSN","IBALLSSN",,IB399)
"RTN","IBCEF74",30,0)
 S Q=0 F  S Q=$O(^IBE(355.97,Q)) Q:'Q  I $P($G(^(Q,0)),U,3)="SY" S IBSSNIEN=Q Q
"RTN","IBCEF74",31,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM)
"RTN","IBCEF74",32,0)
 S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEF74",33,0)
 S IBCARE=$S($$ISRX^IBCEF1(IB399):3,1:0) ;if an Rx refill bill
"RTN","IBCEF74",34,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IB399,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF74",35,0)
 S IBLIMIT=$S($G(IBINSTP)="C":5,1:3)  ; Limits on secondary IDs
"RTN","IBCEF74",36,0)
 F IBPRTYP=1:1:9 D
"RTN","IBCEF74",37,0)
 . N Z,IB355OV
"RTN","IBCEF74",38,0)
 . S IBPROV=$$PROVPTR^IBCEF7(IB399,IBPRTYP)
"RTN","IBCEF74",39,0)
 . Q:+IBPROV=0
"RTN","IBCEF74",40,0)
 . ;don't create anything if form type not HCFA or UB
"RTN","IBCEF74",41,0)
 . Q:IBFRMTYP=0
"RTN","IBCEF74",42,0)
 . N IBRETARR S IBRETARR=0
"RTN","IBCEF74",43,0)
 . D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEF74",44,0)
 . S IB355OV="",IBEXC=""
"RTN","IBCEF74",45,0)
 . S Z=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0))
"RTN","IBCEF74",46,0)
 . I Z S Z=$G(^DGCR(399,IB399,"PRV",Z,0)) D
"RTN","IBCEF74",47,0)
 .. I $P(Z,U,IBPRNUM+4)'="",$P(Z,U,IBPRNUM+11)'="" S IB355OV=$P(Z,U,IBPRNUM+4)_U_$P(Z,U,IBPRNUM+11)
"RTN","IBCEF74",48,0)
 . S IBCURR=$$COB^IBCEF(IB399)
"RTN","IBCEF74",49,0)
 . S IBN=0,IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEF74",50,0)
 . I $G(IBINSTP)="C",$G(IBPRNUM)=1,"34"[$G(IBPRTYP),"P"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12"
"RTN","IBCEF74",51,0)
 . I $G(IBINSTP)="O","34"[$G(IBPRTYP),"ST"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12" ;Calculate MEDICARE (WNR) specific provider qualifier and ID for HCFA 1500 secondary claims
"RTN","IBCEF74",52,0)
 . I $P(IB355OV,U,2) D
"RTN","IBCEF74",53,0)
 .. I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEF74",54,0)
 ... S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEF74",55,0)
 . I IB35591'="",IBEXC'=$P(IB35591,U,3) S:$$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEF74",56,0)
 . I IBFRMTYP=2,$P($G(^DIC(36,IBINSCO,3)),U,11),$P(IBALLSSN,U,IBPRTYP)'="",IBSSNIEN,$G(IBINSTP)="C" D  ; Force SSN as secondary id for HCFA 1500
"RTN","IBCEF74",57,0)
 .. S IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="REQUIRED^"_IBINSCO_"^SY^"_$P(IBALLSSN,U,IBPRTYP),$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=IBSSNIEN
"RTN","IBCEF74",58,0)
 . D SORT(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC,IBPRNUM,IBLIMIT)
"RTN","IBCEF74",59,0)
 . S IBRES(IBSORT,IBPRTYP)=IBPROV
"RTN","IBCEF74",60,0)
 S IBRES(IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEF74",61,0)
 Q
"RTN","IBCEF74",62,0)
 ;
"RTN","IBCEF74",63,0)
SECIDCK(IBIFN,IBSEQ,IBTYP,IBIFN1) ; Function returns 1 if ID type ptr in
"RTN","IBCEF74",64,0)
 ;  IBTYP is valid X12 code for the claim/prov function (IBPROVF)
"RTN","IBCEF74",65,0)
 ;  as a sec id
"RTN","IBCEF74",66,0)
 ; IBSEQ = COB seq being checked
"RTN","IBCEF74",67,0)
 ; IBIFN1 = entry # in PRV multiple being checked
"RTN","IBCEF74",68,0)
 ;  Called from input transform of fields .12-.14, subfile 399.0222
"RTN","IBCEF74",69,0)
 N IBOK,IBFRM,IBCOBN,IBX12,IBPROVF
"RTN","IBCEF74",70,0)
 S IBPROVF=+$G(^DGCR(399,IBIFN,"PRV",IBIFN1,0))
"RTN","IBCEF74",71,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=3:1,1:2) ; Form type
"RTN","IBCEF74",72,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN) S:'IBCOBN IBCOBN=1 ; Current COB seq
"RTN","IBCEF74",73,0)
 S IBX12=$P($G(^IBE(355.97,+IBTYP,0)),U,3) ; X12 code for prov id typ
"RTN","IBCEF74",74,0)
 Q $$CHSEC^IBCEF73(IBFRM,IBPROVF,$S(IBSEQ=IBCOBN:"C",1:"O"),IBX12)
"RTN","IBCEF74",75,0)
 ;
"RTN","IBCEF74",76,0)
DEFID(IBIFN,IBPRV) ;
"RTN","IBCEF74",77,0)
 ; IBIFN = ien of bill
"RTN","IBCEF74",78,0)
 ; IBPRV = ien of entry subfile 399.0222
"RTN","IBCEF74",79,0)
 ;  Function returns default ids: prim id def^sec id def^tert id def
"RTN","IBCEF74",80,0)
 ;  SSN cannot be the default ID
"RTN","IBCEF74",81,0)
 N Z,Z1,ID,IBZ,IBINS,IBINS4,IBUB
"RTN","IBCEF74",82,0)
 S IBZ=""
"RTN","IBCEF74",83,0)
 S IBUB=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEF74",84,0)
 D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ","",IBIFN)
"RTN","IBCEF74",85,0)
 S Z=$G(^DGCR(399,IBIFN,"PRV",IBPRV,0)),ID=$P(Z,U,5,7)
"RTN","IBCEF74",86,0)
 F Z1=1:1:3 I $P(ID,U,Z1)="" D
"RTN","IBCEF74",87,0)
 . Q:'$G(^DGCR(399,IBIFN,"I"_Z1))  S IBINS=+^("I"_Z1)
"RTN","IBCEF74",88,0)
 . S $P(ID,U,Z1)=$$GETID^IBCEP2(IBIFN,2,$P(Z,U,2),Z1)
"RTN","IBCEF74",89,0)
 . ; Set default if null - based on parameter for require print SSN
"RTN","IBCEF74",90,0)
 . I $P(ID,U,Z1)="" S $P(ID,U,Z1)=$S('$P($G(^DIC(36,IBINS,3)),U,11+IBUB):"VAD000",1:$P(IBZ,U,+Z))
"RTN","IBCEF74",91,0)
 Q ID
"RTN","IBCEF74",92,0)
 ;
"RTN","IBCEF74",93,0)
DISPID(IBXIEN) ; Display list of all prov and fac ids that will
"RTN","IBCEF74",94,0)
 ; extract for this bill if transmitted electronically
"RTN","IBCEF74",95,0)
 N IBID,IBID1,IBZ,IBCT,IBFRM,IBCOBN,IBATT,IBQUIT,IBTYP,DIR,IBIFN,X,Y,Z,Z0,Z1
"RTN","IBCEF74",96,0)
 S IBIFN=IBXIEN
"RTN","IBCEF74",97,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBCOBN=$$COBN^IBCEF(IBIFN),IBATT=$S(IBFRM=2:3,1:4)
"RTN","IBCEF74",98,0)
 W @IOF
"RTN","IBCEF74",99,0)
 W !,"If this bill is transmitted electronically, the following IDs will be sent:"
"RTN","IBCEF74",100,0)
 ; Returns all prov sec ids to be transmitted in indicated segments
"RTN","IBCEF74",101,0)
 S Z=+$G(^DGCR(399,IBIFN,"I1")) I Z W !,"  Primary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=1 W ?54,"<<<Current Ins"
"RTN","IBCEF74",102,0)
 S Z=+$G(^DGCR(399,IBIFN,"I2")) I Z W !,"Secondary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=2 W ?54,"<<<Current Ins"
"RTN","IBCEF74",103,0)
 S Z=+$G(^DGCR(399,IBIFN,"I3")) I Z W !," Tertiary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=3 W ?54,"<<<Current Ins"
"RTN","IBCEF74",104,0)
 W !!,"Provider IDs: (VistA Records OP1,OP2,OP4,OP8,OP9,OPR2,OPR3,OPR4,OPR5,OPR8):"
"RTN","IBCEF74",105,0)
 F Z=1:1:3 I $G(^DGCR(399,IBIFN,"I"_Z)) D PROVINF(IBIFN,Z,.IBID,"",$S(IBCOBN=Z:"C",1:"O"))
"RTN","IBCEF74",106,0)
 S Z=0 F  S Z=$O(IBID(Z)) Q:'Z  S Z0=0 F  S Z0=$O(IBID(Z,Z0)) Q:'Z0  S IBID1(Z0,Z)="",Z1=0 F  S Z1=$O(IBID(Z,Z0,Z1)) Q:'Z1  I $P(IBID(Z,Z0,Z1),U,9) S IBID1(Z0,Z,Z1)=IBID(Z,Z0,Z1)
"RTN","IBCEF74",107,0)
 S Z=+$O(^DGCR(399,IBIFN,"PRV","B",IBATT,0))
"RTN","IBCEF74",108,0)
 I Z S Z=$P($G(^DGCR(399,IBIFN,"PRV",Z,0)),U,2)
"RTN","IBCEF74",109,0)
 W !,?5,"ATTENDING/RENDERING: ",$$EXTERNAL^DILFD(399.0222,.02,"",Z)
"RTN","IBCEF74",110,0)
 D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ","",IBIFN)
"RTN","IBCEF74",111,0)
 W !,?8,"SSN: ",?40,$S($P(IBZ,U,IBATT)'="":$P(IBZ,U,IBATT),1:"***MISSING***")
"RTN","IBCEF74",112,0)
 I $O(IBID1(IBATT,0)) W !,?8,"Secondary IDs"
"RTN","IBCEF74",113,0)
 S IBQUIT=0
"RTN","IBCEF74",114,0)
 ;
"RTN","IBCEF74",115,0)
 ; Attending/Rendering (4/3) secondary IDs
"RTN","IBCEF74",116,0)
 S Z0=0 F  S Z0=$O(IBID1(IBATT,Z0)) Q:'Z0!IBQUIT  K IBTYP S Z1=0 F  S Z1=$O(IBID1(IBATT,Z0,Z1)) Q:'Z1  D  Q:IBQUIT
"RTN","IBCEF74",117,0)
 . Q:$D(IBTYP(+$P(IBID1(IBATT,Z0,Z1),U,9)))  ;1st of each type transmits
"RTN","IBCEF74",118,0)
 . I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",119,0)
 . S IBTYP(+$P(IBID1(IBATT,Z0,Z1),U,9))=""
"RTN","IBCEF74",120,0)
 . W !,?8,"(",$E("PST",Z0),") ",$$EXTERNAL^DILFD(36,4.01,"",$P(IBID1(IBATT,Z0,Z1),U,9)),?40,$P(IBID1(IBATT,Z0,Z1),U,4)
"RTN","IBCEF74",121,0)
 . Q
"RTN","IBCEF74",122,0)
 I IBQUIT G DISPIDX
"RTN","IBCEF74",123,0)
 ;
"RTN","IBCEF74",124,0)
 ; Referring(1), Operating(2), Supervising(5), Other(9) secondary IDs
"RTN","IBCEF74",125,0)
 S Z=0 F  S Z=$O(IBID1(Z)) Q:'Z  I Z<3!(Z>4) D  Q:IBQUIT
"RTN","IBCEF74",126,0)
 . N Q
"RTN","IBCEF74",127,0)
 . S Q=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEF74",128,0)
 . W !!,?5,$$EXTERNAL^DILFD(399.0222,.01,"",Z),": "_$$EXTERNAL^DILFD(399.0222,.02,"",$P($G(^DGCR(399,IBIFN,"PRV",Q,0)),U,2))
"RTN","IBCEF74",129,0)
 . S Z0=0 F  S Z0=$O(IBID1(Z,Z0)) Q:'Z0!IBQUIT  K IBTYP S Z1=0 F  S Z1=$O(IBID1(Z,Z0,Z1)) Q:'Z1!IBQUIT  D
"RTN","IBCEF74",130,0)
 .. Q:$D(IBTYP(+$P(IBID1(Z,Z0,Z1),U,9)))  ; 1st of each type transmits
"RTN","IBCEF74",131,0)
 .. I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",132,0)
 .. S IBTYP(+$P(IBID1(Z,Z0,Z1),U,9))=""
"RTN","IBCEF74",133,0)
 .. W !,?8,"(",$E("PST",Z0),") ",$$EXTERNAL^DILFD(36,4.01,"",$P(IBID1(Z,Z0,Z1),U,9)),?40,$P(IBID1(Z,Z0,Z1),U,4)
"RTN","IBCEF74",134,0)
 .. Q
"RTN","IBCEF74",135,0)
 . Q
"RTN","IBCEF74",136,0)
 I IBQUIT G DISPIDX
"RTN","IBCEF74",137,0)
 ;
"RTN","IBCEF74",138,0)
 ; IB*2*320 - display additional IDs for ?ID
"RTN","IBCEF74",139,0)
 D EN^IBCEF74A(IBIFN,.IBQUIT)
"RTN","IBCEF74",140,0)
 ;
"RTN","IBCEF74",141,0)
DISPIDX ;
"RTN","IBCEF74",142,0)
 I '$G(IBQUIT) S DIR(0)="EA",DIR("A")="Press RETURN to continue " W ! D ^DIR K DIR
"RTN","IBCEF74",143,0)
 Q
"RTN","IBCEF74",144,0)
 ;
"RTN","IBCEF74",145,0)
NOMORE() ;
"RTN","IBCEF74",146,0)
 S DIR(0)="EA",DIR("A")="Press RETURN for more IDs or '^' to exit: " W ! D ^DIR
"RTN","IBCEF74",147,0)
 W @IOF
"RTN","IBCEF74",148,0)
 Q (Y'=1)
"RTN","IBCEF74",149,0)
 ;
"RTN","IBCEF74",150,0)
DEFSEC(IBIFN,IBARR) ; Returns array in IBARR for default prov sec ids for ien IBIFN
"RTN","IBCEF74",151,0)
 ; IBARR if passed by ref is returned   IBARR(prov function,COBN)=def id
"RTN","IBCEF74",152,0)
 N IBCAR,IBCOBN,IBPC,IBINS,IBARRX,Q,Z,Z0,ZINS,X
"RTN","IBCEF74",153,0)
 K IBARR
"RTN","IBCEF74",154,0)
 S ZINS="",IBCOBN=$$COBN^IBCEF(IBIFN),IBPC=$S($$FT^IBCEF(IBIFN)=3:2,1:1)
"RTN","IBCEF74",155,0)
 S IBCAR=$$INPAT^IBCEF(IBIFN,1),IBCAR=$S('IBCAR:2,1:1)
"RTN","IBCEF74",156,0)
 F Z=1:1:3 S ZINS=ZINS_+$G(^DGCR(399,IBIFN,"I"_Z))_U
"RTN","IBCEF74",157,0)
 F Z=1:1:3 I $P(ZINS,U,Z),'$P($G(^DIC(36,+$P(ZINS,U,Z),4)),U,IBPC) S $P(ZINS,U,Z)=""
"RTN","IBCEF74",158,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEF74",159,0)
 . F Q=1:1:3 D
"RTN","IBCEF74",160,0)
 .. I $P(Z0,U,Q+4)'="" S IBARR(+Z0,Q)=$P(Z0,U,Q+4) Q  ; Override
"RTN","IBCEF74",161,0)
 .. S IBINS=$P(ZINS,U,Q)
"RTN","IBCEF74",162,0)
 .. Q:'IBINS
"RTN","IBCEF74",163,0)
 .. S X=$$IDFIND^IBCEP2(IBIFN,"",$P(Z0,U,2),Q,1)
"RTN","IBCEF74",164,0)
 .. I X'="" S IBARR(+Z0,Q)=X
"RTN","IBCEF74",165,0)
 Q
"RTN","IBCEF74",166,0)
 ;
"RTN","IBY358PO")
0^^B7986999^n/a
"RTN","IBY358PO",1,0)
IBY358PO ;ALB/WCJ - Post Install for IB patch 358 ;28-JUL-2005
"RTN","IBY358PO",2,0)
 ;;2.0;INTEGRATED BILLING;**358**;21-MAR-94
"RTN","IBY358PO",3,0)
 ;
"RTN","IBY358PO",4,0)
EN ;
"RTN","IBY358PO",5,0)
 N XPDIDTOT S XPDIDTOT=1
"RTN","IBY358PO",6,0)
 D CLEAN         ; 1. Clean up IDs with qualifiers  TJ & 24
"RTN","IBY358PO",7,0)
 ;
"RTN","IBY358PO",8,0)
EX ;
"RTN","IBY358PO",9,0)
 Q
"RTN","IBY358PO",10,0)
CLEAN ; Clean up IDs with qualifiers TJ & 24
"RTN","IBY358PO",11,0)
 D BMES^XPDUTL(" STEP 1 of "_XPDIDTOT)
"RTN","IBY358PO",12,0)
 D MES^XPDUTL("-------------")
"RTN","IBY358PO",13,0)
 D MES^XPDUTL("Cleaning up IDs with Qualifiers 24, EI, TJ ....")
"RTN","IBY358PO",14,0)
 ;
"RTN","IBY358PO",15,0)
 ; this will loop through all qualifiers with internal values of
"RTN","IBY358PO",16,0)
 ; 16 (X12 CODE 24) and 21 (X12 CODE TJ).  The X12 codes should be
"RTN","IBY358PO",17,0)
 ; internal 32 (X12 CODE EI) for individuals and internal 21 (X12 CODE
"RTN","IBY358PO",18,0)
 ; TJ) for labs/facilities.  IDs will be modified or deleted as
"RTN","IBY358PO",19,0)
 ; necessary.
"RTN","IBY358PO",20,0)
 ;
"RTN","IBY358PO",21,0)
 N QUAL,PROV,IORF,PROVIEN,IDS,I,J,K,FLAG
"RTN","IBY358PO",22,0)
 ;
"RTN","IBY358PO",23,0)
 F QUAL=21,16 D
"RTN","IBY358PO",24,0)
 . S PROV=""
"RTN","IBY358PO",25,0)
 . F  S PROV=$O(^IBA(355.9,"AC",QUAL,"*ALL*",PROV)) Q:PROV=""  D
"RTN","IBY358PO",26,0)
 .. Q:PROV'["IBA(355.93"   ; Only NonVA providers
"RTN","IBY358PO",27,0)
 .. S PROVIEN=+PROV
"RTN","IBY358PO",28,0)
 .. S IORF=$P($G(^IBA(355.93,PROVIEN,0)),U,2) ; (2)Individual OR (1)Facility
"RTN","IBY358PO",29,0)
 .. ;
"RTN","IBY358PO",30,0)
 .. K IDS
"RTN","IBY358PO",31,0)
 .. D GETALL(PROV,.IDS)
"RTN","IBY358PO",32,0)
 .. Q:'$D(IDS)  ; Nothing to convert (should not stop here)
"RTN","IBY358PO",33,0)
 .. ;
"RTN","IBY358PO",34,0)
 .. ; Individual already having EI, Delete 24s & TJs
"RTN","IBY358PO",35,0)
 .. I IORF=2,$G(IDS(32)) D  Q
"RTN","IBY358PO",36,0)
 ... F K=16,21 F I=0,1,2 F J=0:1:3 I $D(IDS(K,I,J)) D DELETE(IDS(K,I,J))
"RTN","IBY358PO",37,0)
 .. ;
"RTN","IBY358PO",38,0)
 .. ; Lab/Fac with TJs already, delete 24s
"RTN","IBY358PO",39,0)
 .. I IORF=1,$G(IDS(21)) D  Q
"RTN","IBY358PO",40,0)
 ... F I=0,1,2 F J=0:1:3 I $D(IDS(16,I,J)) D DELETE(IDS(16,I,J))
"RTN","IBY358PO",41,0)
 .. ;
"RTN","IBY358PO",42,0)
 .. ; Lab/Fac with 24s but no TJs, edit or delete 24s as appropriate
"RTN","IBY358PO",43,0)
 .. I IORF=1,'$G(IDS(21)),$G(IDS(16)) D  Q
"RTN","IBY358PO",44,0)
 ... S FLAG=0
"RTN","IBY358PO",45,0)
 ... F I=0,1,2 F J=0:1:3 I $D(IDS(16,I,J)) D MODIFY(IDS(16,I,J),21):'FLAG,DELETE(IDS(16,I,J)):FLAG S FLAG=1
"RTN","IBY358PO",46,0)
 .. ;
"RTN","IBY358PO",47,0)
 .. ; Individual with TJs or 24s but no EIs, edit or delete as appropriate
"RTN","IBY358PO",48,0)
 .. I IORF=2,'$G(IDS(32)) D  Q
"RTN","IBY358PO",49,0)
 ... ;
"RTN","IBY358PO",50,0)
 ... S FLAG=0
"RTN","IBY358PO",51,0)
 ... F I=0,1,2 F J=0:1:3 F K=21,16 I $D(IDS(K,I,J)) D MODIFY(IDS(K,I,J),32):'FLAG,DELETE(IDS(K,I,J)):FLAG  S FLAG=1
"RTN","IBY358PO",52,0)
CLEANX ;
"RTN","IBY358PO",53,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY358PO",54,0)
 D UPDATE^XPDID(1)
"RTN","IBY358PO",55,0)
 Q
"RTN","IBY358PO",56,0)
 ;
"RTN","IBY358PO",57,0)
 ; pass in PROV    IEN;IBA(355.93,
"RTN","IBY358PO",58,0)
 ; return IDS array IDS(IEN35597,FORMTYPE,CARETYPE)=IEN3559
"RTN","IBY358PO",59,0)
 ;                  IDS(IEN35597)=COUNTER
"RTN","IBY358PO",60,0)
GETALL(PROV,IDS) ;
"RTN","IBY358PO",61,0)
 N I,J,K
"RTN","IBY358PO",62,0)
 F I=0,1,2 D
"RTN","IBY358PO",63,0)
 . F J=0:1:3 D
"RTN","IBY358PO",64,0)
 .. F K=16,21,32 D
"RTN","IBY358PO",65,0)
 ... I $D(^IBA(355.9,"AUNIQ",PROV,"*ALL*","*N/A*",I,J,K)) D
"RTN","IBY358PO",66,0)
 .... S IDS(K,I,J)=$O(^IBA(355.9,"AUNIQ",PROV,"*ALL*","*N/A*",I,J,K,0))
"RTN","IBY358PO",67,0)
 .... S IDS(K)=$G(IDS(K))+1
"RTN","IBY358PO",68,0)
 Q
"RTN","IBY358PO",69,0)
 ;
"RTN","IBY358PO",70,0)
DELETE(IEN) ;
"RTN","IBY358PO",71,0)
 N DIK,DA
"RTN","IBY358PO",72,0)
 S DIK="^IBA(355.9,",DA=+IEN D ^DIK
"RTN","IBY358PO",73,0)
 Q
"RTN","IBY358PO",74,0)
 ;
"RTN","IBY358PO",75,0)
MODIFY(IEN,QUAL) ;
"RTN","IBY358PO",76,0)
 N DIE,DA,DR
"RTN","IBY358PO",77,0)
 S DIE="^IBA(355.9,",DA=+IEN,DR=".04////0;.05////0;.06////"_QUAL D ^DIE
"RTN","IBY358PO",78,0)
 Q
"RTN","IBY358PO",79,0)
 ;
"VER")
8.0^22.0
"BLD",6238,6)
^321
**END**
**END**
