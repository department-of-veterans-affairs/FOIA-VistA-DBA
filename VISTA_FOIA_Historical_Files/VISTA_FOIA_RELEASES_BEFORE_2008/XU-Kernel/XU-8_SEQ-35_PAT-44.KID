Released XU*8*44 SEQ #35
Extracted from mail message
**KIDS**:XU*8.0*44^

**INSTALL NAME**
XU*8.0*44
"BLD",122,0)
XU*8.0*44^KERNEL^0^2961004^n
"BLD",122,1,0)
^^186^186^2961009^^^^
"BLD",122,1,1,0)
 This patch contains the following features:
"BLD",122,1,2,0)

"BLD",122,1,3,0)
 DAY-0996-41414
"BLD",122,1,4,0)
 -Fixes undef error in XPDIK when install patch with DD's.
"BLD",122,1,5,0)
 FRE-0996-60791, ANN-0996-41556
"BLD",122,1,6,0)
 -Fixes subscript error when converting a package.
"BLD",122,1,7,0)
 REN-1095-62643, BOI-1095-53144, MUS-0696-70425
"BLD",122,1,8,0)
 -Fixes nouci errors when MenuMan's Micro-surgery runs on MSM sites.
"BLD",122,1,9,0)
 BEC-0996-21668
"BLD",122,1,10,0)
 -Fixes bug that left ^XTMP("XPDI", global for certain patches.
"BLD",122,1,11,0)
-Fixes bug when Environment Check Routine is run during the load process and
"BLD",122,1,12,0)
  the variable XPDQUIT or XPDABORT is set to 2. The Install file would be
"BLD",122,1,13,0)
  incomplete and the install would get an undef error.
"BLD",122,1,14,0)
-New message, if the Install file is incomplete the user will get the message
"BLD",122,1,15,0)
  '**INSTALL FILE CORRUPTED**', and the install will abort.
"BLD",122,1,16,0)
-New Alerts will be sent to the installer if an error occurs during the
"BLD",122,1,17,0)
  install process or if a CPU is not updated.
"BLD",122,1,18,0)
-New options: Routines by Patch Number, Display Patches for a Package,
"BLD",122,1,19,0)
  Rollup Patches into a Build, and Check Routines on Other CPUs.
"BLD",122,1,20,0)
-New type of Build, MULTI-PACKAGE. It contains a list of other Builds.
"BLD",122,1,21,0)
-New field, REQUIRED BUILD #11, in file BUILD #9.6.
"BLD",122,1,22,0)
-New field, SIGNON/PRODUCTION VOLUME SET #9, in file VOLUME SET #14.5.
"BLD",122,1,23,0)
-KIDS will support HL7 type fields in the Protocol file, #101.
"BLD",122,1,24,0)
-KIDS will also support the following files as components:
"BLD",122,1,25,0)
  MAIL GROUP #3.8
"BLD",122,1,26,0)
  HL7 APPLICATION PARAMETER #771
"BLD",122,1,27,0)
  HL LOWER LEVEL PROTOCOL PARAMETER #869.2
"BLD",122,1,28,0)
  HL LOGICAL LINK #870
"BLD",122,1,29,0)
==============================================================================
"BLD",122,1,30,0)
                    **** INSTALL INSTRUCTIONS ****
"BLD",122,1,31,0)
==============================================================================
"BLD",122,1,32,0)

"BLD",122,1,33,0)
This patch should be installed during off-peak hours. Users can be on the
"BLD",122,1,34,0)
system, but no other users should be using KIDS while you install this patch.
"BLD",122,1,35,0)
Since this patch is an update to KIDS, no other patches should be installed
"BLD",122,1,36,0)
during the installation of this patch.
"BLD",122,1,37,0)

"BLD",122,1,38,0)
**MSM sites must manually move the routines XPDIJ and XPDCPU to their other
"BLD",122,1,39,0)
  CPUs. KIDS cannot automatically move these routines for you.**
"BLD",122,1,40,0)
==============================================================================
"BLD",122,1,41,0)
  
"BLD",122,1,42,0)
INSTALLATION:
"BLD",122,1,43,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",122,1,44,0)
      so you will need to disable mapping for the effected routines.
"BLD",122,1,45,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",122,1,46,0)
      option will load the KIDS Distribution onto your system.
"BLD",122,1,47,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",122,1,48,0)
      system. You now need to use KIDS to install the patch in the Transport
"BLD",122,1,49,0)
      global.
"BLD",122,1,50,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",122,1,51,0)
      options:
"BLD",122,1,52,0)
         Verify Checksums in Transport Global
"BLD",122,1,53,0)
         Print Transport Global
"BLD",122,1,54,0)
         Compare Transport Global to Current System
"BLD",122,1,55,0)
         Backup a Transport Global
"BLD",122,1,56,0)
         Install Package(s)
"BLD",122,1,57,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",122,1,58,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",122,1,59,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ and XPDCPU to your
"BLD",122,1,60,0)
      other CPUs.
"BLD",122,1,61,0)
  7.  Move the routine ZTPTCH to your Manager Account(s) and rename as %ZTPTCH
"BLD",122,1,62,0)
      on all systems where the users can signon through ZU.
"BLD",122,1,63,0)
  8.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",122,1,64,0)
  9.  MSM Sites - You should edit the SIGNON/PRODUCTION VOLUME SET field using
"BLD",122,1,65,0)
      the 'Volume Set Edit' option under the 'Edit Taskman Parameters' menu.
"BLD",122,1,66,0)
      Enter 'YES' for your Compute and Printer servers. Enter 'NO' for your
"BLD",122,1,67,0)
      File servers.
"BLD",122,1,68,0)
 10.  MSM Sites - Drop into programmer mode and DO KICK^XQ7. This will start
"BLD",122,1,69,0)
      Micro-surgery on all the servers you just edited in the VOLUME SET file.
"BLD",122,1,70,0)
===========================================================================
"BLD",122,1,71,0)
  
"BLD",122,1,72,0)
ROUTINES:
"BLD",122,1,73,0)
   The second line of the routine now looks like:
"BLD",122,1,74,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",122,1,75,0)
 
"BLD",122,1,76,0)
 Name           Checksum        Patch List
"BLD",122,1,77,0)
 -----------------------------------------------------------
"BLD",122,1,78,0)
 XPDCPU         6460017         41,44
"BLD",122,1,79,0)
 XPDDCS         4096637         2,44
"BLD",122,1,80,0)
 XPDDP          11584192        21,28,44
"BLD",122,1,81,0)
 XPDDPCK        3463634         44 (new)
"BLD",122,1,82,0)
 XPDE           15036235        2,15,21,44
"BLD",122,1,83,0)
 XPDER          6591221         44 (new)
"BLD",122,1,84,0)
 XPDET          5054183         15,39,41,44
"BLD",122,1,85,0)
 XPDI           17816610        10,21,39,41,44
"BLD",122,1,86,0)
 XPDIA          12898389        10,15,21,28,44
"BLD",122,1,87,0)
 XPDIA1         7754922         2,44
"BLD",122,1,88,0)
 XPDIJ          10173098        2,21,28,41,44
"BLD",122,1,89,0)
 XPDIL          10583214        15,44
"BLD",122,1,90,0)
 XPDIL1         8511833         15,17,39,41,44
"BLD",122,1,91,0)
 XPDIP          9737651         15,21,28,30,41,44
"BLD",122,1,92,0)
 XPDIU          7734016         15,41,44
"BLD",122,1,93,0)
 XPDR           18038674        1,2,44
"BLD",122,1,94,0)
 XPDT           19190604        2,10,28,41,44
"BLD",122,1,95,0)
 XPDTA          7419894         15,44
"BLD",122,1,96,0)
 XPDTA1         4760350         44
"BLD",122,1,97,0)
 XPDTC          12862739        10,15,21,39,41,44
"BLD",122,1,98,0)
 XPDTP          2384575         21,40,44
"BLD",122,1,99,0)
 XPDV           9865255         30,44
"BLD",122,1,100,0)
 XQ5            13875754        44
"BLD",122,1,101,0)
 XQ7            2506259         44
"BLD",122,1,102,0)
 XTSUMCK        15685964        44 (new)
"BLD",122,1,103,0)
 XTSUMCK1       2208048         44 (new)
"BLD",122,1,104,0)
 ZTPTCH         4513173         44 (new)
"BLD",122,1,105,0)
============================================================================
"BLD",122,1,106,0)
DOCUMENTATION:
"BLD",122,1,107,0)

"BLD",122,1,108,0)
 OPTION:
"BLD",122,1,109,0)

"BLD",122,1,110,0)
 Systems Manager Menu ...
"BLD",122,1,111,0)
   Programmer Options ...
"BLD",122,1,112,0)
     Routine Tools ...
"BLD",122,1,113,0)

"BLD",122,1,114,0)
'Check Routines on Other CPUs'     Option name: XUPR RTN CHKSUM
"BLD",122,1,115,0)
   This option will compare the Checksum for routines in the Production
"BLD",122,1,116,0)
   account of one system to the checksums for the same routines on another
"BLD",122,1,117,0)
   system.  It is only for sites who have Compute and Print Servers with
"BLD",122,1,118,0)
   different routine directories.
"BLD",122,1,119,0)

"BLD",122,1,120,0)
'Routines by Patch Number'     Option name: XUPR RTN PATCH
"BLD",122,1,121,0)
   This options will print routines associated with a patch.  You must
"BLD",122,1,122,0)
   enter a list of routines and then the output will be by patch numbers.
"BLD",122,1,123,0)

"BLD",122,1,124,0)

"BLD",122,1,125,0)
 Systems Manager Menu ...
"BLD",122,1,126,0)
   Programmer Options ...
"BLD",122,1,127,0)
     Kernel Installation & Distribution System ...
"BLD",122,1,128,0)
       Utilities ...
"BLD",122,1,129,0)

"BLD",122,1,130,0)
'Display Patches for a Package'     Option name: XPD PRINT PACKAGE PATCHES
"BLD",122,1,131,0)
     This option will print all patches installed for a Package. It displays
"BLD",122,1,132,0)
     the Date Installed and who installed the patches. It optionally will
"BLD",122,1,133,0)
     print the description of the patch. All information comes from the
"BLD",122,1,134,0)
     Package file.
"BLD",122,1,135,0)

"BLD",122,1,136,0)
'Rollup Patches into a Build'     Option name: XPD ROLLUP PATCHES
"BLD",122,1,137,0)
     This option will find all the patches for a Package and add their Build
"BLD",122,1,138,0)
     file definition to the Package Build file definition.  This will enable
"BLD",122,1,139,0)
     you to create a single Build file entry that contains the definition for
"BLD",122,1,140,0)
     a patched Package.
"BLD",122,1,141,0)

"BLD",122,1,142,0)

"BLD",122,1,143,0)
 DATA DICTIONARY:  Partial DD
"BLD",122,1,144,0)

"BLD",122,1,145,0)
  File:  BUILD #9.6
"BLD",122,1,146,0)
   Field:  REQUIRED BUILD #11
"BLD",122,1,147,0)
    Subfield:
"BLD",122,1,148,0)
    .01    REQUIRED BUILD
"BLD",122,1,149,0)
             Enter a Build name, a patch or package, that is required to
"BLD",122,1,150,0)
             be installed before this Build is installed.  KIDS will check
"BLD",122,1,151,0)
             the Package file, Version multiple and Patch Application
"BLD",122,1,152,0)
             History multiple, to verify that the Required Build has been
"BLD",122,1,153,0)
             installed.  
"BLD",122,1,154,0)
    1      ACTION
"BLD",122,1,155,0)
             This is the action you want to happen when installing this
"BLD",122,1,156,0)
             Build and the Required Build has not been installed at the
"BLD",122,1,157,0)
             site.  
"BLD",122,1,158,0)

"BLD",122,1,159,0)
   Field:  MULTIPLE BUILD #10
"BLD",122,1,160,0)
    Subfield:
"BLD",122,1,161,0)
    .001   INSTALL ORDER
"BLD",122,1,162,0)
             This is the order in which this package will be installed.
"BLD",122,1,163,0)
    .01    MULTIPLE BUILD
"BLD",122,1,164,0)
             Name of Build that will be part of this multi-package
"BLD",122,1,165,0)
             distribution or a patch that is part of this Build definition.  
"BLD",122,1,166,0)

"BLD",122,1,167,0)
  File:  INSTALL #9.7
"BLD",122,1,168,0)
   Field:  VOLUME SET #30
"BLD",122,1,169,0)
    Subfield:
"BLD",122,1,170,0)
    .01    VOLUME SET
"BLD",122,1,171,0)
             Enter the name of the VOLUME SET that you want updated when
"BLD",122,1,172,0)
             this package is installed. This field points to the VOLUME SET
"BLD",122,1,173,0)
             file, #14.5. A VOLUME SET must have the field SIGNON/PRODUCTION
"BLD",122,1,174,0)
             VOLUME SET, #9, set to YES.
"BLD",122,1,175,0)

"BLD",122,1,176,0)
  File:  VOLUME SET #14.5
"BLD",122,1,177,0)
   Field:  SIGNON/PRODUCTION VOLUME SET #9
"BLD",122,1,178,0)
             Enter Yes if this Volume Set has the following properties:
"BLD",122,1,179,0)
             1. Users can sign-on into the Kernel Menu system or the RPC
"BLD",122,1,180,0)
             Broker Server routine is running there.
"BLD",122,1,181,0)
             2. Has a productions UCI which contains application routines.
"BLD",122,1,182,0)
             3. The ^XTMP global is translated.
"BLD",122,1,183,0)
             If you enter Yes the Kernel Installation and Distribution
"BLD",122,1,184,0)
             System will be able to move routines to this Volume Set.  The
"BLD",122,1,185,0)
             Kernel Menu system will be able to run the Menu Microsurgery
"BLD",122,1,186,0)
             and keep menus updated.
"BLD",122,4,0)
^9.64PA^14.5^3
"BLD",122,4,9.6,0)
9.6
"BLD",122,4,9.6,2,0)
^9.641^9.63^3
"BLD",122,4,9.6,2,9.6,0)
BUILD  (File-top level)
"BLD",122,4,9.6,2,9.6,1,0)
^9.6411^2^1
"BLD",122,4,9.6,2,9.6,1,2,0)
TYPE
"BLD",122,4,9.6,2,9.611,0)
REQUIRED BUILD  (sub-file)
"BLD",122,4,9.6,2,9.611,1,0)
^9.6411^^
"BLD",122,4,9.6,2,9.63,0)
MULTIPLE BUILD  (sub-file)
"BLD",122,4,9.6,2,9.63,1,0)
^9.6411^^
"BLD",122,4,9.6,222)
y^n^p^^^^n
"BLD",122,4,9.7,0)
9.7
"BLD",122,4,9.7,2,0)
^9.641^9.703^1
"BLD",122,4,9.7,2,9.703,0)
VOLUME SET  (sub-file)
"BLD",122,4,9.7,2,9.703,1,0)
^9.6411^^
"BLD",122,4,9.7,222)
y^n^p^^^^n
"BLD",122,4,14.5,0)
14.5
"BLD",122,4,14.5,2,0)
^9.641^14.5^1
"BLD",122,4,14.5,2,14.5,0)
VOLUME SET  (File-top level)
"BLD",122,4,14.5,2,14.5,1,0)
^9.6411^9^1
"BLD",122,4,14.5,2,14.5,1,9,0)
SIGNON/PRODUCTION VOLUME SET
"BLD",122,4,14.5,222)
y^n^p^^^^n
"BLD",122,4,"APDD",9.6,9.6)

"BLD",122,4,"APDD",9.6,9.6,2)

"BLD",122,4,"APDD",9.6,9.611)

"BLD",122,4,"APDD",9.6,9.63)

"BLD",122,4,"APDD",9.7,9.703)

"BLD",122,4,"APDD",14.5,14.5)

"BLD",122,4,"APDD",14.5,14.5,9)

"BLD",122,4,"B",9.6,9.6)

"BLD",122,4,"B",9.7,9.7)

"BLD",122,4,"B",14.5,14.5)

"BLD",122,"ABPKG")
n
"BLD",122,"KRN",0)
^9.67PA^771^19
"BLD",122,"KRN",.4,0)
.4
"BLD",122,"KRN",.401,0)
.401
"BLD",122,"KRN",.402,0)
.402
"BLD",122,"KRN",.403,0)
.403
"BLD",122,"KRN",.403,"NM",0)
^9.68A^3^3
"BLD",122,"KRN",.403,"NM",1,0)
XPD EDIT BUILD    FILE #9.6^9.6^0
"BLD",122,"KRN",.403,"NM",2,0)
XPD EDIT GP    FILE #9.6^9.6^0
"BLD",122,"KRN",.403,"NM",3,0)
XPD EDIT MP    FILE #9.6^9.6^0
"BLD",122,"KRN",.403,"NM","B","XPD EDIT BUILD    FILE #9.6",1)

"BLD",122,"KRN",.403,"NM","B","XPD EDIT GP    FILE #9.6",2)

"BLD",122,"KRN",.403,"NM","B","XPD EDIT MP    FILE #9.6",3)

"BLD",122,"KRN",.5,0)
.5
"BLD",122,"KRN",.84,0)
.84
"BLD",122,"KRN",3.6,0)
3.6
"BLD",122,"KRN",3.8,0)
3.8
"BLD",122,"KRN",9.2,0)
9.2
"BLD",122,"KRN",9.8,0)
9.8
"BLD",122,"KRN",9.8,"NM",0)
^9.68A^27^27
"BLD",122,"KRN",9.8,"NM",1,0)
XPDDP^^0^B27646769
"BLD",122,"KRN",9.8,"NM",2,0)
XPDDPCK^^0^B5703122
"BLD",122,"KRN",9.8,"NM",3,0)
XPDER^^0^B13331876
"BLD",122,"KRN",9.8,"NM",4,0)
XPDET^^0^B26193773
"BLD",122,"KRN",9.8,"NM",5,0)
XPDIL1^^0^B22836317
"BLD",122,"KRN",9.8,"NM",6,0)
XPDI^^0^B58877321
"BLD",122,"KRN",9.8,"NM",7,0)
XPDCPU^^0^B13986565
"BLD",122,"KRN",9.8,"NM",8,0)
XPDDCS^^0^B9162138
"BLD",122,"KRN",9.8,"NM",9,0)
XPDE^^0^B38776536
"BLD",122,"KRN",9.8,"NM",10,0)
XPDIA^^0^B50074905
"BLD",122,"KRN",9.8,"NM",11,0)
XPDIA1^^0^B27709273
"BLD",122,"KRN",9.8,"NM",12,0)
XPDIJ^^0^B28627075
"BLD",122,"KRN",9.8,"NM",13,0)
XPDIL^^0^B21175656
"BLD",122,"KRN",9.8,"NM",14,0)
XPDIP^^0^B35521099
"BLD",122,"KRN",9.8,"NM",15,0)
XPDIU^^0^B11779646
"BLD",122,"KRN",9.8,"NM",16,0)
XPDR^^0^B49327107
"BLD",122,"KRN",9.8,"NM",17,0)
XPDT^^0^B55749221
"BLD",122,"KRN",9.8,"NM",18,0)
XPDTA^^0^B17285143
"BLD",122,"KRN",9.8,"NM",19,0)
XPDTA1^^0^B13922280
"BLD",122,"KRN",9.8,"NM",20,0)
XPDV^^0^B25055640
"BLD",122,"KRN",9.8,"NM",21,0)
ZTPTCH^^0^B7153979
"BLD",122,"KRN",9.8,"NM",22,0)
XQ5^^0^B21150195
"BLD",122,"KRN",9.8,"NM",23,0)
XQ7^^0^B5099033
"BLD",122,"KRN",9.8,"NM",24,0)
XTSUMCK^^0^B36625264
"BLD",122,"KRN",9.8,"NM",25,0)
XTSUMCK1^^0^B3689291
"BLD",122,"KRN",9.8,"NM",26,0)
XPDTP^^0^B3210806
"BLD",122,"KRN",9.8,"NM",27,0)
XPDTC^^0^B35132838
"BLD",122,"KRN",9.8,"NM","B","XPDCPU",7)

"BLD",122,"KRN",9.8,"NM","B","XPDDCS",8)

"BLD",122,"KRN",9.8,"NM","B","XPDDP",1)

"BLD",122,"KRN",9.8,"NM","B","XPDDPCK",2)

"BLD",122,"KRN",9.8,"NM","B","XPDE",9)

"BLD",122,"KRN",9.8,"NM","B","XPDER",3)

"BLD",122,"KRN",9.8,"NM","B","XPDET",4)

"BLD",122,"KRN",9.8,"NM","B","XPDI",6)

"BLD",122,"KRN",9.8,"NM","B","XPDIA",10)

"BLD",122,"KRN",9.8,"NM","B","XPDIA1",11)

"BLD",122,"KRN",9.8,"NM","B","XPDIJ",12)

"BLD",122,"KRN",9.8,"NM","B","XPDIL",13)

"BLD",122,"KRN",9.8,"NM","B","XPDIL1",5)

"BLD",122,"KRN",9.8,"NM","B","XPDIP",14)

"BLD",122,"KRN",9.8,"NM","B","XPDIU",15)

"BLD",122,"KRN",9.8,"NM","B","XPDR",16)

"BLD",122,"KRN",9.8,"NM","B","XPDT",17)

"BLD",122,"KRN",9.8,"NM","B","XPDTA",18)

"BLD",122,"KRN",9.8,"NM","B","XPDTA1",19)

"BLD",122,"KRN",9.8,"NM","B","XPDTC",27)

"BLD",122,"KRN",9.8,"NM","B","XPDTP",26)

"BLD",122,"KRN",9.8,"NM","B","XPDV",20)

"BLD",122,"KRN",9.8,"NM","B","XQ5",22)

"BLD",122,"KRN",9.8,"NM","B","XQ7",23)

"BLD",122,"KRN",9.8,"NM","B","XTSUMCK",24)

"BLD",122,"KRN",9.8,"NM","B","XTSUMCK1",25)

"BLD",122,"KRN",9.8,"NM","B","ZTPTCH",21)

"BLD",122,"KRN",19,0)
19
"BLD",122,"KRN",19,"NM",0)
^9.68A^16^16
"BLD",122,"KRN",19,"NM",1,0)
XUPR RTN PATCH^^0
"BLD",122,"KRN",19,"NM",2,0)
XPD ROLLUP PATCHES^^0
"BLD",122,"KRN",19,"NM",3,0)
XPD PRINT PACKAGE PATCHES^^0
"BLD",122,"KRN",19,"NM",4,0)
XUPR-ROUTINE-TOOLS^^2
"BLD",122,"KRN",19,"NM",5,0)
XPD UTILITY^^2
"BLD",122,"KRN",19,"NM",6,0)
XUPR RTN CHKSUM^^0
"BLD",122,"KRN",19,"NM",7,0)
XUTM VOLUME^^0
"BLD",122,"KRN",19,"NM",8,0)
XPD INSTALLATION MENU^^0
"BLD",122,"KRN",19,"NM",9,0)
XPD LOAD DISTRIBUTION^^0
"BLD",122,"KRN",19,"NM",10,0)
XPD PRINT CHECKSUM^^0
"BLD",122,"KRN",19,"NM",11,0)
XPD PRINT INSTALL^^0
"BLD",122,"KRN",19,"NM",12,0)
XPD COMPARE TO SYSTEM^^0
"BLD",122,"KRN",19,"NM",13,0)
XPD BACKUP^^0
"BLD",122,"KRN",19,"NM",14,0)
XPD INSTALL BUILD^^0
"BLD",122,"KRN",19,"NM",15,0)
XPD RESTART INSTALL^^0
"BLD",122,"KRN",19,"NM",16,0)
XPD UNLOAD DISTRIBUTION^^0
"BLD",122,"KRN",19,"NM","B","XPD BACKUP",13)

"BLD",122,"KRN",19,"NM","B","XPD COMPARE TO SYSTEM",12)

"BLD",122,"KRN",19,"NM","B","XPD INSTALL BUILD",14)

"BLD",122,"KRN",19,"NM","B","XPD INSTALLATION MENU",8)

"BLD",122,"KRN",19,"NM","B","XPD LOAD DISTRIBUTION",9)

"BLD",122,"KRN",19,"NM","B","XPD PRINT CHECKSUM",10)

"BLD",122,"KRN",19,"NM","B","XPD PRINT INSTALL",11)

"BLD",122,"KRN",19,"NM","B","XPD PRINT PACKAGE PATCHES",3)

"BLD",122,"KRN",19,"NM","B","XPD RESTART INSTALL",15)

"BLD",122,"KRN",19,"NM","B","XPD ROLLUP PATCHES",2)

"BLD",122,"KRN",19,"NM","B","XPD UNLOAD DISTRIBUTION",16)

"BLD",122,"KRN",19,"NM","B","XPD UTILITY",5)

"BLD",122,"KRN",19,"NM","B","XUPR RTN CHKSUM",6)

"BLD",122,"KRN",19,"NM","B","XUPR RTN PATCH",1)

"BLD",122,"KRN",19,"NM","B","XUPR-ROUTINE-TOOLS",4)

"BLD",122,"KRN",19,"NM","B","XUTM VOLUME",7)

"BLD",122,"KRN",19.1,0)
19.1
"BLD",122,"KRN",101,0)
101
"BLD",122,"KRN",409.61,0)
409.61
"BLD",122,"KRN",771,0)
771
"BLD",122,"KRN",869.2,0)
869.2
"BLD",122,"KRN",870,0)
870
"BLD",122,"KRN",8994,0)
8994
"BLD",122,"KRN",8995,0)
8995
"BLD",122,"KRN","B",.4,.4)

"BLD",122,"KRN","B",.401,.401)

"BLD",122,"KRN","B",.402,.402)

"BLD",122,"KRN","B",.403,.403)

"BLD",122,"KRN","B",.5,.5)

"BLD",122,"KRN","B",.84,.84)

"BLD",122,"KRN","B",3.6,3.6)

"BLD",122,"KRN","B",3.8,3.8)

"BLD",122,"KRN","B",9.2,9.2)

"BLD",122,"KRN","B",9.8,9.8)

"BLD",122,"KRN","B",19,19)

"BLD",122,"KRN","B",19.1,19.1)

"BLD",122,"KRN","B",101,101)

"BLD",122,"KRN","B",409.61,409.61)

"BLD",122,"KRN","B",771,771)

"BLD",122,"KRN","B",869.2,869.2)

"BLD",122,"KRN","B",870,870)

"BLD",122,"KRN","B",8994,8994)

"BLD",122,"KRN","B",8995,8995)

"BLD",122,"QUES",0)
^9.62^^
"BLD",122,"REQB",0)
^9.611^^
"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^n^p^^^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.6,2)

"FIA",9.6,9.6,10)

"FIA",9.6,9.6,11)

"FIA",9.6,9.611)
0
"FIA",9.6,9.63)
0
"FIA",9.7)
INSTALL
"FIA",9.7,0)
^XPD(9.7,
"FIA",9.7,0,0)
9.7I
"FIA",9.7,0,1)
y^n^p^^^^n
"FIA",9.7,0,10)

"FIA",9.7,0,11)

"FIA",9.7,0,"RLRO")

"FIA",9.7,0,"VR")
8.0^XU
"FIA",9.7,9.7)
1
"FIA",9.7,9.7,30)

"FIA",9.7,9.703)
0
"FIA",14.5)
VOLUME SET
"FIA",14.5,0)
^%ZIS(14.5,
"FIA",14.5,0,0)
14.5
"FIA",14.5,0,1)
y^n^p^^^^n
"FIA",14.5,0,10)

"FIA",14.5,0,11)

"FIA",14.5,0,"RLRO")

"FIA",14.5,0,"VR")
8.0^XU
"FIA",14.5,14.5)
1
"FIA",14.5,14.5,9)

"KRN",.403,40,-1)
0^1
"KRN",.403,40,0)
XPD EDIT BUILD^#^^^2931104^^^9.6^0^0^1
"KRN",.403,40,40,0)
^.4031I^15^14
"KRN",.403,40,40,1,0)
1^^1,1^4^14
"KRN",.403,40,40,1,1)
Page 1
"KRN",.403,40,40,1,40,0)
^.4032PI^125^2
"KRN",.403,40,40,1,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,1,40,125,0)
XPD EDIT BUILD1^2^1,1^e
"KRN",.403,40,40,2,0)
2^^1,1^14^4
"KRN",.403,40,40,2,1)
Page 2
"KRN",.403,40,40,2,12)

"KRN",.403,40,40,2,40,0)
^.4032PI^154^3
"KRN",.403,40,40,2,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,2,40,126,0)
XPD EDIT BUILD2^2^1,1^e
"KRN",.403,40,40,2,40,154,0)
XPD EDIT BUILD30^3^5,1^e
"KRN",.403,40,40,2,40,154,2)
12^^f^1
"KRN",.403,40,40,3,0)
3^^5,1^^^1^17,79
"KRN",.403,40,40,3,1)
Kernel File^1,3,2
"KRN",.403,40,40,3,40,0)
^.4032PI^132^2
"KRN",.403,40,40,3,40,127,0)
XPD EDIT BUILD3^1^3,2^e
"KRN",.403,40,40,3,40,127,2)
9^^n
"KRN",.403,40,40,3,40,132,0)
XPD EDIT BUILD31^2^1,2^d
"KRN",.403,40,40,4,0)
4^^1,1^2^1
"KRN",.403,40,40,4,1)
File^
"KRN",.403,40,40,4,40,0)
^.4032PI^156^3
"KRN",.403,40,40,4,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,4,40,155,0)
XPD EDIT BUILD40^2^5,1^e
"KRN",.403,40,40,4,40,155,2)
12^^n
"KRN",.403,40,40,4,40,156,0)
XPD EDIT BUILD41^3^1,1^d
"KRN",.403,40,40,5,0)
5^^6,3^^^1^17,77
"KRN",.403,40,40,5,1)
Record Merge^2,2,8
"KRN",.403,40,40,5,40,0)
^.4032PI^129^1
"KRN",.403,40,40,5,40,129,0)
XPD EDIT BUILD5^1^1,3^e
"KRN",.403,40,40,7,0)
7^^5,1^^^1^17,78
"KRN",.403,40,40,7,1)
Entries^
"KRN",.403,40,40,7,40,0)
^.4032PI^128^1
"KRN",.403,40,40,7,40,128,0)
XPD EDIT BUILD4^2^1,1^e
"KRN",.403,40,40,8,0)
8^^5,2^^^1^15,78
"KRN",.403,40,40,8,1)
Package file
"KRN",.403,40,40,8,11)

"KRN",.403,40,40,8,40,0)
^.4032PI^164^3
"KRN",.403,40,40,8,40,130,0)
XPD EDIT BUILD6^2^3,2^e
"KRN",.403,40,40,8,40,130,1)
1
"KRN",.403,40,40,8,40,135,0)
XPD EDIT BUILD8^3^8,2^e
"KRN",.403,40,40,8,40,164,0)
XPD EDIT BUILD60^4^1,2^d
"KRN",.403,40,40,9,0)
9^^4,3^^^1^16,77
"KRN",.403,40,40,9,1)
Page 9
"KRN",.403,40,40,9,12)

"KRN",.403,40,40,9,40,0)
^.4032PI^246^2
"KRN",.403,40,40,9,40,136,0)
XPD EDIT BUILD9^1^1,2^e
"KRN",.403,40,40,9,40,246,0)
XPD EDIT BUILD9A^2^8,2^e
"KRN",.403,40,40,9,40,246,2)
4
"KRN",.403,40,40,10,0)
10^^5,4^^^1^9,76
"KRN",.403,40,40,10,1)
A/B namespace^
"KRN",.403,40,40,10,11)

"KRN",.403,40,40,10,12)

"KRN",.403,40,40,10,40,0)
^.4032PI^247^2
"KRN",.403,40,40,10,40,137,0)
XPD EDIT BUILD10^1^1,3^e
"KRN",.403,40,40,10,40,247,0)
XPD EDIT BUILD10A^2^2,2^e
"KRN",.403,40,40,10,40,247,2)
2
"KRN",.403,40,40,11,0)
11^^6,2^^^1^16,77
"KRN",.403,40,40,11,1)
Sub DD
"KRN",.403,40,40,11,40,0)
^.4032PI^159^2
"KRN",.403,40,40,11,40,157,0)
XPD EDIT BUILD42^1^2,3^e
"KRN",.403,40,40,11,40,157,2)
6^!IEN^n^^
"KRN",.403,40,40,11,40,159,0)
XPD EDIT BUILD44^2^1,3^d
"KRN",.403,40,40,12,0)
12^^7,3^^^1^15,76
"KRN",.403,40,40,12,1)
Sub Field
"KRN",.403,40,40,12,40,0)
^.4032PI^160^2
"KRN",.403,40,40,12,40,158,0)
XPD EDIT BUILD43^1^2,3^e
"KRN",.403,40,40,12,40,158,2)
6^!IEN^n
"KRN",.403,40,40,12,40,160,0)
XPD EDIT BUILD45^2^1,2^d
"KRN",.403,40,40,13,0)
13^^6,2^^^1^16,77
"KRN",.403,40,40,13,1)
Page 13
"KRN",.403,40,40,13,40,0)
^.4032PI^161^1
"KRN",.403,40,40,13,40,161,0)
XPD EDIT BUILD46^1^1,1^e
"KRN",.403,40,40,14,0)
14^^1,1^1^2
"KRN",.403,40,40,14,1)
Page 14
"KRN",.403,40,40,14,40,0)
^.4032PI^266^4
"KRN",.403,40,40,14,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,14,40,162,0)
XPD EDIT BUILD11^4^1,1^e
"KRN",.403,40,40,14,40,163,0)
XPD EDIT BUILD12^2^5,1^e
"KRN",.403,40,40,14,40,163,2)
4^^n
"KRN",.403,40,40,14,40,266,0)
XPD EDIT BUILD52^5^10,1^e
"KRN",.403,40,40,14,40,266,2)
4
"KRN",.403,40,40,15,0)
15^^2,1^^^1^17,79
"KRN",.403,40,40,15,1)
Install questions
"KRN",.403,40,40,15,40,0)
^.4032PI^131^1
"KRN",.403,40,40,15,40,131,0)
XPD EDIT BUILD7^1^1,1^e
"KRN",.403,41,-1)
0^3
"KRN",.403,41,0)
XPD EDIT MP^@^@^^2960906.0824^^^9.6^0^0^1
"KRN",.403,41,40,0)
^.4031I^1^1
"KRN",.403,41,40,1,0)
1^^1,1
"KRN",.403,41,40,1,1)
Page 1
"KRN",.403,41,40,1,40,0)
^.4032IP^269^3
"KRN",.403,41,40,1,40,267,0)
XPD EDIT MP1^2^1,1^e
"KRN",.403,41,40,1,40,268,0)
XPD EDIT HDR^1^1,1^e
"KRN",.403,41,40,1,40,269,0)
XPD EDIT MP2^3^13,1^e
"KRN",.403,41,40,1,40,269,2)
4^!IEN^n
"KRN",.403,42,-1)
0^2
"KRN",.403,42,0)
XPD EDIT GP^@^@^^2960906.0935^^^9.6^0^0^1
"KRN",.403,42,40,0)
^.4031I^1^1
"KRN",.403,42,40,1,0)
1^^1,1
"KRN",.403,42,40,1,1)
Page 1
"KRN",.403,42,40,1,40,0)
^.4032IP^271^3
"KRN",.403,42,40,1,40,268,0)
XPD EDIT HDR^1^1,1^e
"KRN",.403,42,40,1,40,270,0)
XPD EDIT GP1^2^1,2^e
"KRN",.403,42,40,1,40,271,0)
XPD EDIT GP3^3^14,1^e
"KRN",.403,42,40,1,40,271,2)
4
"KRN",.404,124,0)
XPD EDIT BUILD HDR^9.6
"KRN",.404,124,40,0)
^.4044I^5^5
"KRN",.404,124,40,1,0)
1^Edit a Build^1^
"KRN",.404,124,40,1,2)
^^1,28^
"KRN",.404,124,40,2,0)
2^Name^3^
"KRN",.404,124,40,2,1)
.01
"KRN",.404,124,40,2,2)
2,7^30^2,1
"KRN",.404,124,40,2,4)
^^^1
"KRN",.404,124,40,3,0)
3^PAGE   OF 4^1^
"KRN",.404,124,40,3,2)
^^1,66^
"KRN",.404,124,40,4,0)
4^!M^1^
"KRN",.404,124,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,124,40,4,2)
^^3,1^
"KRN",.404,124,40,5,0)
5^TYPE^3
"KRN",.404,124,40,5,1)
2
"KRN",.404,124,40,5,2)
2,51^14^2,45
"KRN",.404,124,40,5,4)
^^^1
"KRN",.404,125,0)
XPD EDIT BUILD1^9.6
"KRN",.404,125,12)

"KRN",.404,125,40,0)
^.4044I^14^8
"KRN",.404,125,40,1,0)
2^Name^3^
"KRN",.404,125,40,1,1)
.01
"KRN",.404,125,40,1,2)
5,29^50^5,23
"KRN",.404,125,40,1,4)

"KRN",.404,125,40,5,0)
5^Environment Check Routine^3^
"KRN",.404,125,40,5,1)
913
"KRN",.404,125,40,5,2)
11,29^8^11,2
"KRN",.404,125,40,6,0)
7^Post-Install Routine^3^
"KRN",.404,125,40,6,1)
914
"KRN",.404,125,40,6,2)
15,29^17^15,7
"KRN",.404,125,40,7,0)
6^Pre-Install Routine^3^
"KRN",.404,125,40,7,1)
916
"KRN",.404,125,40,7,2)
13,29^17^13,8
"KRN",.404,125,40,11,0)
4^Description^3^
"KRN",.404,125,40,11,1)
3
"KRN",.404,125,40,11,2)
9,29^1^9,16
"KRN",.404,125,40,12,0)
1^1^1^
"KRN",.404,125,40,12,2)
^^1,71^
"KRN",.404,125,40,13,0)
3^Date Distributed^3
"KRN",.404,125,40,13,1)
.02
"KRN",.404,125,40,13,2)
7,29^11^7,11
"KRN",.404,125,40,13,4)

"KRN",.404,125,40,14,0)
8^Pre-Transportation Routine^3
"KRN",.404,125,40,14,1)
900
"KRN",.404,125,40,14,2)
17,29^17^17,1
"KRN",.404,126,0)
XPD EDIT BUILD2^9.6
"KRN",.404,126,12)

"KRN",.404,126,40,0)
^.4044I^2^2
"KRN",.404,126,40,1,0)
99^3^1^
"KRN",.404,126,40,1,2)
^^1,71^
"KRN",.404,126,40,2,0)
2^Build Components^1^
"KRN",.404,126,40,2,2)
^^4,28^1
"KRN",.404,127,0)
XPD EDIT BUILD3^9.68
"KRN",.404,127,40,0)
^.4044I^2^2
"KRN",.404,127,40,1,0)
1^^3^
"KRN",.404,127,40,1,1)
.01
"KRN",.404,127,40,1,2)
1,2^45
"KRN",.404,127,40,2,0)
2^^3
"KRN",.404,127,40,2,1)
.03
"KRN",.404,127,40,2,2)
1,50^26
"KRN",.404,127,40,2,3)
SEND TO SITE
"KRN",.404,127,40,2,4)
1
"KRN",.404,128,0)
XPD EDIT BUILD4^9.64
"KRN",.404,128,40,0)
^.4044I^18^7
"KRN",.404,128,40,1,0)
1^ DD Export Options ^1^
"KRN",.404,128,40,1,2)
^^1,27^1
"KRN",.404,128,40,2,0)
2^File^3^
"KRN",.404,128,40,2,1)
.01
"KRN",.404,128,40,2,2)
3,30^45^3,24
"KRN",.404,128,40,7,0)
7^Data Comes With File...^3^
"KRN",.404,128,40,7,1)
222.7
"KRN",.404,128,40,7,2)
12,33^3^12,8
"KRN",.404,128,40,7,3)
NO
"KRN",.404,128,40,7,10)
S:X="y" DDSSTACK=13
"KRN",.404,128,40,7,13)
D:X="y" PUT^DDSVAL(DIE,.DA,222.3,"f","","I")
"KRN",.404,128,40,13,0)
6^Screen to Determine DD Update^3
"KRN",.404,128,40,13,1)
223
"KRN",.404,128,40,13,2)
10,2^76^9,2^1
"KRN",.404,128,40,14,0)
5^Send Security Code^3
"KRN",.404,128,40,14,1)
222.2
"KRN",.404,128,40,14,2)
7,62^3^7,42
"KRN",.404,128,40,14,3)
YES
"KRN",.404,128,40,16,0)
4^Update the Data Dictionary^3
"KRN",.404,128,40,16,1)
222.1
"KRN",.404,128,40,16,2)
7,30^3^7,2
"KRN",.404,128,40,16,3)
YES
"KRN",.404,128,40,18,0)
3^Send Full or Partial DD...^3
"KRN",.404,128,40,18,1)
222.3
"KRN",.404,128,40,18,2)
5,33^7^5,5
"KRN",.404,128,40,18,3)
FULL
"KRN",.404,128,40,18,10)
S:X="p" DDSSTACK=11
"KRN",.404,128,40,18,13)
D:X="p" PUT^DDSVAL(DIE,.DA,222.7,"n","","I")
"KRN",.404,129,0)
XPD EDIT BUILD5^9.402
"KRN",.404,129,40,0)
^.4044I^4^4
"KRN",.404,129,40,1,0)
1^ Affects Record Merge ^1^
"KRN",.404,129,40,1,2)
^^1,23^1
"KRN",.404,129,40,2,0)
2^File Affected^3^
"KRN",.404,129,40,2,1)
.01
"KRN",.404,129,40,2,2)
3,16^45^3,1
"KRN",.404,129,40,3,0)
3^Name of Merge Routine^3^
"KRN",.404,129,40,3,1)
3
"KRN",.404,129,40,3,2)
5,24^8^5,1
"KRN",.404,129,40,4,0)
4^Record has Package Data^3^
"KRN",.404,129,40,4,1)
4
"KRN",.404,129,40,4,2)
10,1^70^8,21^1
"KRN",.404,130,0)
XPD EDIT BUILD6^9.4
"KRN",.404,130,11)
I $G(XPDBR) S DDSBR="COM" K XPDBR
"KRN",.404,130,40,0)
^.4044I^5^2
"KRN",.404,130,40,2,0)
2^Select Affects Record Merge^3^
"KRN",.404,130,40,2,1)
20
"KRN",.404,130,40,2,2)
5,31^30^5,2
"KRN",.404,130,40,2,7)
^
"KRN",.404,130,40,2,10)

"KRN",.404,130,40,5,0)
1^Primary Help Frame^3
"KRN",.404,130,40,5,1)
12
"KRN",.404,130,40,5,2)
3,31^30^3,11
"KRN",.404,131,0)
XPD EDIT BUILD7^9.62
"KRN",.404,131,40,0)
^.4044I^10^10
"KRN",.404,131,40,1,0)
2^Name^3^
"KRN",.404,131,40,1,1)
.01
"KRN",.404,131,40,1,2)
2,12^30^2,6
"KRN",.404,131,40,2,0)
3^DIR(0)^3^
"KRN",.404,131,40,2,1)
1
"KRN",.404,131,40,2,2)
4,12^65^4,4
"KRN",.404,131,40,3,0)
4^DIR(A)^3^
"KRN",.404,131,40,3,1)
2
"KRN",.404,131,40,3,2)
6,12^65^6,4
"KRN",.404,131,40,4,0)
5^DIR(A,#)^3^
"KRN",.404,131,40,4,1)
3
"KRN",.404,131,40,4,2)
7,12^1^7,2
"KRN",.404,131,40,5,0)
6^DIR(B)^3^
"KRN",.404,131,40,5,1)
4
"KRN",.404,131,40,5,2)
9,12^65^9,4
"KRN",.404,131,40,6,0)
7^DIR(?)^3^
"KRN",.404,131,40,6,1)
5
"KRN",.404,131,40,6,2)
11,12^65^11,4
"KRN",.404,131,40,7,0)
8^DIR(?,#)^3^
"KRN",.404,131,40,7,1)
6
"KRN",.404,131,40,7,2)
12,12^1^12,2
"KRN",.404,131,40,8,0)
9^DIR(??)^3^
"KRN",.404,131,40,8,1)
7
"KRN",.404,131,40,8,2)
13,12^64^13,3
"KRN",.404,131,40,9,0)
10^M Code^3
"KRN",.404,131,40,9,1)
10
"KRN",.404,131,40,9,2)
15,12^65^15,4
"KRN",.404,131,40,10,0)
1^ Install Questions ^1^
"KRN",.404,131,40,10,2)
^^1,27^1
"KRN",.404,132,0)
XPD EDIT BUILD31^9.67
"KRN",.404,132,40,0)
^.4044I^1^1
"KRN",.404,132,40,1,0)
1^!M^1^
"KRN",.404,132,40,1,.1)
S Y=" "_$P($G(^DIC(D1,0)),U)_" "
"KRN",.404,132,40,1,2)
^^1,27^
"KRN",.404,135,0)
XPD EDIT BUILD8^9.6
"KRN",.404,135,11)

"KRN",.404,135,40,0)
^.4044I^1^1
"KRN",.404,135,40,1,0)
1^Alpha/Beta Testing...^3
"KRN",.404,135,40,1,1)
20
"KRN",.404,135,40,1,2)
2,31^3^2,8
"KRN",.404,135,40,1,3)
NO
"KRN",.404,135,40,1,10)
S:X="y" DDSSTACK="9"
"KRN",.404,136,0)
XPD EDIT BUILD9^9.6
"KRN",.404,136,40,0)
^.4044I^5^4
"KRN",.404,136,40,1,0)
2^Installation Message^3
"KRN",.404,136,40,1,1)
21
"KRN",.404,136,40,1,2)
3,30^3^3,8
"KRN",.404,136,40,1,3)
NO
"KRN",.404,136,40,2,0)
3^Address for Usage Reporting^3
"KRN",.404,136,40,2,1)
22
"KRN",.404,136,40,2,2)
5,30^44^5,1
"KRN",.404,136,40,4,0)
1^ Alpha/Beta Testing ^1^
"KRN",.404,136,40,4,2)
^^1,26^1
"KRN",.404,136,40,5,0)
4^Package Namespace or Prefix:^1
"KRN",.404,136,40,5,2)
^^7,1
"KRN",.404,137,0)
XPD EDIT BUILD10^9.66
"KRN",.404,137,40,0)
^.4044I^1^1
"KRN",.404,137,40,1,0)
1^ Exclude Namespace or Prefix ^1
"KRN",.404,137,40,1,2)
^^1,20^1
"KRN",.404,154,0)
XPD EDIT BUILD30^9.67
"KRN",.404,154,40,0)
^.4044I^2^2
"KRN",.404,154,40,1,0)
1^^3
"KRN",.404,154,40,1,1)
.01
"KRN",.404,154,40,1,2)
2,1^24
"KRN",.404,154,40,1,4)
^^^2
"KRN",.404,154,40,1,10)
S DDSSTACK=3
"KRN",.404,154,40,1,14)

"KRN",.404,154,40,2,0)
2^^4
"KRN",.404,154,40,2,2)
2,27^5
"KRN",.404,154,40,2,4)
^^1
"KRN",.404,154,40,2,30)
S Y="("_+$P($G(^XPD(9.6,DA(1),"KRN",DA,"NM",0)),U,4)_")"
"KRN",.404,155,0)
XPD EDIT BUILD40^9.64
"KRN",.404,155,40,0)
^.4044I^1^1
"KRN",.404,155,40,1,0)
1^^3
"KRN",.404,155,40,1,1)
.01
"KRN",.404,155,40,1,2)
2,7^45
"KRN",.404,155,40,1,10)
S DDSSTACK=7
"KRN",.404,156,0)
XPD EDIT BUILD41^9.6
"KRN",.404,156,40,0)
^.4044I^3^2
"KRN",.404,156,40,1,0)
1^2^1^
"KRN",.404,156,40,1,2)
^^1,71^
"KRN",.404,156,40,3,0)
2^File List  (Name or Number)^1
"KRN",.404,156,40,3,2)
^^4,28^1
"KRN",.404,157,0)
XPD EDIT BUILD42^9.641
"KRN",.404,157,40,0)
^.4044I^1^1
"KRN",.404,157,40,1,0)
1^^3
"KRN",.404,157,40,1,1)
.01
"KRN",.404,157,40,1,2)
1,1^45
"KRN",.404,157,40,1,10)
S DDSSTACK=12
"KRN",.404,158,0)
XPD EDIT BUILD43^9.6411
"KRN",.404,158,40,0)
^.4044I^1^1
"KRN",.404,158,40,1,0)
1^^3
"KRN",.404,158,40,1,1)
.01
"KRN",.404,158,40,1,2)
1,1^45
"KRN",.404,159,0)
XPD EDIT BUILD44^9.64
"KRN",.404,159,40,0)
^.4044I^1^1
"KRN",.404,159,40,1,0)
1^ Data Dictionary Number ^1^
"KRN",.404,159,40,1,2)
^^1,24^1
"KRN",.404,160,0)
XPD EDIT BUILD45^9.641
"KRN",.404,160,40,0)
^.4044I^1^1
"KRN",.404,160,40,1,0)
1^ Field Number ^1^
"KRN",.404,160,40,1,2)
^^1,24^1
"KRN",.404,161,0)
XPD EDIT BUILD46^9.64
"KRN",.404,161,40,0)
^.4044I^7^6
"KRN",.404,161,40,1,0)
1^ Data Export Options ^1^
"KRN",.404,161,40,1,2)
^^1,29^1
"KRN",.404,161,40,2,0)
2^Site's Data^3
"KRN",.404,161,40,2,1)
222.8
"KRN",.404,161,40,2,2)
3,21^15^3,8
"KRN",.404,161,40,2,3)
OVERWRITE
"KRN",.404,161,40,3,0)
5^Data List^3
"KRN",.404,161,40,3,1)
222.6
"KRN",.404,161,40,3,2)
7,21^30^7,10
"KRN",.404,161,40,4,0)
3^Resolve Pointers^3
"KRN",.404,161,40,4,1)
222.5
"KRN",.404,161,40,4,2)
5,21^3^5,3
"KRN",.404,161,40,4,3)
NO
"KRN",.404,161,40,5,0)
4^May User Override Data Update^3
"KRN",.404,161,40,5,1)
222.9
"KRN",.404,161,40,5,2)
5,68^3^5,37
"KRN",.404,161,40,5,3)
NO
"KRN",.404,161,40,7,0)
6^Screen to Select Data^3
"KRN",.404,161,40,7,1)
224
"KRN",.404,161,40,7,2)
10,3^72^9,3^1
"KRN",.404,162,0)
XPD EDIT BUILD11^9.6
"KRN",.404,162,40,0)
^.4044I^5^5
"KRN",.404,162,40,1,0)
1^4^1^
"KRN",.404,162,40,1,2)
^^1,71^
"KRN",.404,162,40,2,0)
3^Package File Link...^3
"KRN",.404,162,40,2,1)
1
"KRN",.404,162,40,2,2)
15,27^30^15,5
"KRN",.404,162,40,2,10)
S:X]"" DDSSTACK=8
"KRN",.404,162,40,3,0)
4^Track Package Nationally^3
"KRN",.404,162,40,3,1)
5
"KRN",.404,162,40,3,2)
17,27^3^17,1
"KRN",.404,162,40,3,3)
NO
"KRN",.404,162,40,3,10)

"KRN",.404,162,40,3,11)
S:$$GET^DDSVAL(DIE,.DA,1)="" DDSBR="^^COM"
"KRN",.404,162,40,4,0)
2^Install Questions^1^
"KRN",.404,162,40,4,2)
^^4,28^1
"KRN",.404,162,40,5,0)
5^Required Builds^1
"KRN",.404,162,40,5,2)
^^9,28
"KRN",.404,163,0)
XPD EDIT BUILD12^9.62
"KRN",.404,163,40,0)
^.4044I^1^1
"KRN",.404,163,40,1,0)
1^^3
"KRN",.404,163,40,1,1)
.01
"KRN",.404,163,40,1,2)
1,3^30
"KRN",.404,163,40,1,10)
S DDSSTACK=15
"KRN",.404,164,0)
XPD EDIT BUILD60^9.6
"KRN",.404,164,40,0)
^.4044I^3^3
"KRN",.404,164,40,1,0)
1^ Edit PACKAGE File ^1^
"KRN",.404,164,40,1,2)
^^1,26^1
"KRN",.404,164,40,2,0)
2^Name^3
"KRN",.404,164,40,2,1)
.01
"KRN",.404,164,40,2,2)
2,8^30^2,2
"KRN",.404,164,40,3,0)
3^!M^1^
"KRN",.404,164,40,3,.1)
S $P(Y,"-",76)=""
"KRN",.404,164,40,3,2)
^^3,1^
"KRN",.404,246,0)
XPD EDIT BUILD9A^9.66
"KRN",.404,246,40,0)
^.4044I^1^1
"KRN",.404,246,40,1,0)
1^^3
"KRN",.404,246,40,1,1)
.01
"KRN",.404,246,40,1,2)
2,2^4
"KRN",.404,246,40,1,10)
S DDSSTACK=10
"KRN",.404,247,0)
XPD EDIT BUILD10A^9.661
"KRN",.404,247,40,0)
^.4044I^1^1
"KRN",.404,247,40,1,0)
1^^3
"KRN",.404,247,40,1,1)
.01
"KRN",.404,247,40,1,2)
1,2^4
"KRN",.404,266,0)
XPD EDIT BUILD52^9.611
"KRN",.404,266,40,0)
^.4044I^2^2
"KRN",.404,266,40,1,0)
1^^3
"KRN",.404,266,40,1,1)
.01
"KRN",.404,266,40,1,2)
1,3^40
"KRN",.404,266,40,2,0)
2^^3
"KRN",.404,266,40,2,1)
1
"KRN",.404,266,40,2,2)
1,49^30
"KRN",.404,266,40,2,4)
1
"KRN",.404,267,0)
XPD EDIT MP1^9.6
"KRN",.404,267,40,0)
^.4044I^6^6
"KRN",.404,267,40,1,0)
1^1 OF 1^1
"KRN",.404,267,40,1,2)
^^1,71
"KRN",.404,267,40,2,0)
4^Description^3
"KRN",.404,267,40,2,1)
3
"KRN",.404,267,40,2,2)
9,26^1^9,13
"KRN",.404,267,40,3,0)
6^Packages or Patches^1
"KRN",.404,267,40,3,2)
^^12,22^1
"KRN",.404,267,40,4,0)
5^Install Order^1
"KRN",.404,267,40,4,2)
^^12,1^1
"KRN",.404,267,40,5,0)
2^Name^3
"KRN",.404,267,40,5,1)
.01
"KRN",.404,267,40,5,2)
5,26^50^5,20
"KRN",.404,267,40,5,4)

"KRN",.404,267,40,6,0)
3^Date Distributed^3
"KRN",.404,267,40,6,1)
.02
"KRN",.404,267,40,6,2)
7,26^11^7,8
"KRN",.404,268,0)
XPD EDIT HDR^9.6
"KRN",.404,268,40,0)
^.4044I^5^5
"KRN",.404,268,40,1,0)
1^Edit a Build^1
"KRN",.404,268,40,1,2)
^^1,28
"KRN",.404,268,40,2,0)
3^Name^3
"KRN",.404,268,40,2,1)
.01
"KRN",.404,268,40,2,2)
2,7^30^2,1
"KRN",.404,268,40,2,4)
^^^1
"KRN",.404,268,40,3,0)
2^PAGE^1
"KRN",.404,268,40,3,2)
^^1,66^1
"KRN",.404,268,40,4,0)
5^!M^1
"KRN",.404,268,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,268,40,4,2)
^^3,1
"KRN",.404,268,40,5,0)
4^TYPE^3
"KRN",.404,268,40,5,1)
2
"KRN",.404,268,40,5,2)
2,51^14^2,45
"KRN",.404,268,40,5,4)
^^^1
"KRN",.404,269,0)
XPD EDIT MP2^9.63
"KRN",.404,269,40,0)
^.4044I^2^2
"KRN",.404,269,40,1,0)
1^^3
"KRN",.404,269,40,1,1)
.001
"KRN",.404,269,40,1,2)
1,3^2
"KRN",.404,269,40,1,4)
1^^^1
"KRN",.404,269,40,2,0)
2^^3
"KRN",.404,269,40,2,1)
.01
"KRN",.404,269,40,2,2)
1,22^43
"KRN",.404,270,0)
XPD EDIT GP1^9.6
"KRN",.404,270,40,0)
^.4044I^8^8
"KRN",.404,270,40,1,0)
1^1 OF 1^1
"KRN",.404,270,40,1,2)
^^1,70
"KRN",.404,270,40,2,0)
2^Name^3
"KRN",.404,270,40,2,1)
.01
"KRN",.404,270,40,2,2)
5,25^50^5,19
"KRN",.404,270,40,2,4)

"KRN",.404,270,40,3,0)
3^Date Distributed^3
"KRN",.404,270,40,3,1)
.02
"KRN",.404,270,40,3,2)
7,25^11^7,7
"KRN",.404,270,40,3,4)

"KRN",.404,270,40,4,0)
4^Description^3
"KRN",.404,270,40,4,1)
3
"KRN",.404,270,40,4,2)
9,25^1^9,12
"KRN",.404,270,40,5,0)
5^Environment Check Rtn.^3
"KRN",.404,270,40,5,1)
913
"KRN",.404,270,40,5,2)
11,25^8^11,1
"KRN",.404,270,40,6,0)
6^Post-Install Rtn.^3
"KRN",.404,270,40,6,1)
914
"KRN",.404,270,40,6,2)
11,61^17^11,42
"KRN",.404,270,40,7,0)
7^Globals^1
"KRN",.404,270,40,7,2)
^^13,3^1
"KRN",.404,270,40,8,0)
8^Kill Global Before Install?^1
"KRN",.404,270,40,8,2)
^^13,42
"KRN",.404,271,0)
XPD EDIT GP3^9.65
"KRN",.404,271,40,0)
^.4044I^2^2
"KRN",.404,271,40,1,0)
1^^3
"KRN",.404,271,40,1,1)
.01
"KRN",.404,271,40,1,2)
1,4^30
"KRN",.404,271,40,2,0)
2^^3
"KRN",.404,271,40,2,1)
1
"KRN",.404,271,40,2,2)
1,43^3
"KRN",19,546,-1)
2^4
"KRN",19,546,0)
XUPR-ROUTINE-TOOLS^Routine Tools^^M^^^^^^^^^^
"KRN",19,546,1,0)
^^1^1^2910130^^^
"KRN",19,546,1,1,0)
This is the group of programmer options that deal with routines.
"KRN",19,546,10,0)
^19.01PI^17^16
"KRN",19,546,10,16,0)
1368
"KRN",19,546,10,16,"^")
XUPR RTN PATCH
"KRN",19,546,10,17,0)
1371
"KRN",19,546,10,17,"^")
XUPR RTN CHKSUM
"KRN",19,546,99)
56876,56428
"KRN",19,546,"U")
ROUTINE TOOLS
"KRN",19,738,-1)
0^7
"KRN",19,738,0)
XUTM VOLUME^Volume Set Edit^^E^^^^^^^^TASK MANAGER
"KRN",19,738,1,0)
^^1^1^2910610^^
"KRN",19,738,1,1,0)
This option allows the system manager to edit the Volume Set file.
"KRN",19,738,30)
%ZIS(14.5,
"KRN",19,738,31)
AEMQL
"KRN",19,738,50)
%ZIS(14.5,
"KRN",19,738,51)
.01:9
"KRN",19,738,"U")
VOLUME SET EDIT
"KRN",19,1034,-1)
0^9
"KRN",19,1034,0)
XPD LOAD DISTRIBUTION^Load a Distribution^^R^^^^^^^^KIDS
"KRN",19,1034,1,0)
^^2^2^2950130^^^^
"KRN",19,1034,1,1,0)
This option loads a KIDS Distribution. A Distribution is an HFS file that
"KRN",19,1034,1,2,0)
contains one or more Transport Globals. 
"KRN",19,1034,25)
EN1^XPDIL
"KRN",19,1034,"U")
LOAD A DISTRIBUTION
"KRN",19,1035,-1)
0^15
"KRN",19,1035,0)
XPD RESTART INSTALL^Restart Install of Package(s)^^R^^^^^^^^KIDS
"KRN",19,1035,1,0)
^^2^2^2950202^^^^
"KRN",19,1035,1,1,0)
This option restarts the install process for Packages in a Transport
"KRN",19,1035,1,2,0)
Global.
"KRN",19,1035,25)
EN^XPDIR
"KRN",19,1035,"U")
RESTART INSTALL OF PACKAGE(S)
"KRN",19,1153,-1)
2^5
"KRN",19,1153,0)
XPD UTILITY^Utilities^^M^^^^^^^^KIDS
"KRN",19,1153,1,0)
^^2^2^2940601^^^^
"KRN",19,1153,1,1,0)
This menu contains options to print and verify a Build file entry.
"KRN",19,1153,1,2,0)
It also contains options to maintain the Routine file.
"KRN",19,1153,10,0)
^19.01IP^16^16
"KRN",19,1153,10,15,0)
1369
"KRN",19,1153,10,15,"^")
XPD ROLLUP PATCHES
"KRN",19,1153,10,16,0)
1370
"KRN",19,1153,10,16,"^")
XPD PRINT PACKAGE PATCHES
"KRN",19,1153,99)
56874,27746
"KRN",19,1153,"U")
UTILITIES
"KRN",19,1154,-1)
0^8
"KRN",19,1154,0)
XPD INSTALLATION MENU^Installation^^M^^XUPROGMODE^^^^^^KIDS
"KRN",19,1154,1,0)
^^2^2^2960807^^^^
"KRN",19,1154,1,1,0)
This menu contains options to load, install, and restart the install 
"KRN",19,1154,1,2,0)
of a KIDS Distribution.
"KRN",19,1154,10,0)
^19.01IP^17^16
"KRN",19,1154,10,10,0)
1034^1^1
"KRN",19,1154,10,10,"^")
XPD LOAD DISTRIBUTION
"KRN",19,1154,10,11,0)
1156^3^3
"KRN",19,1154,10,11,"^")
XPD PRINT INSTALL
"KRN",19,1154,10,12,0)
1165^4^4
"KRN",19,1154,10,12,"^")
XPD COMPARE TO SYSTEM
"KRN",19,1154,10,13,0)
1276^2^2
"KRN",19,1154,10,13,"^")
XPD PRINT CHECKSUM
"KRN",19,1154,10,14,0)
1354^5^5
"KRN",19,1154,10,14,"^")
XPD BACKUP
"KRN",19,1154,10,15,0)
1155^6^6
"KRN",19,1154,10,15,"^")
XPD INSTALL BUILD
"KRN",19,1154,10,16,0)
1035^^7
"KRN",19,1154,10,16,"^")
XPD RESTART INSTALL
"KRN",19,1154,10,17,0)
1253^^8
"KRN",19,1154,10,17,"^")
XPD UNLOAD DISTRIBUTION
"KRN",19,1154,99)
56895,34831
"KRN",19,1154,"U")
INSTALLATION
"KRN",19,1155,-1)
0^14
"KRN",19,1155,0)
XPD INSTALL BUILD^Install Package(s)^^R^^^^^^^^KIDS
"KRN",19,1155,1,0)
^^3^3^2950202^^^^
"KRN",19,1155,1,1,0)
This option starts the install process for all Packages in a Transport
"KRN",19,1155,1,2,0)
Global that are part of a distribution.  Note that you must load the
"KRN",19,1155,1,3,0)
distribution before you can use this option to install it. 
"KRN",19,1155,25)
EN^XPDI
"KRN",19,1155,"U")
INSTALL PACKAGE(S)
"KRN",19,1156,-1)
0^11
"KRN",19,1156,0)
XPD PRINT INSTALL^Print Transport Global^^R^^^^^^^^
"KRN",19,1156,1,0)
^^2^2^2950130^^^^
"KRN",19,1156,1,1,0)
This option lets you print the contents of a Transport Global that is
"KRN",19,1156,1,2,0)
currently loaded in the ^XTMP global.
"KRN",19,1156,25)
EN2^XPDDP
"KRN",19,1156,"U")
PRINT TRANSPORT GLOBAL
"KRN",19,1165,-1)
0^12
"KRN",19,1165,0)
XPD COMPARE TO SYSTEM^Compare Transport Global to Current System^^R^^^^^^^^
"KRN",19,1165,1,0)
^^2^2^2950130^^
"KRN",19,1165,1,1,0)
This option lets you compare the components of a Transport Global, that is
"KRN",19,1165,1,2,0)
currently loaded in the XTMP global, to your current system.
"KRN",19,1165,25)
XPDCOM
"KRN",19,1165,"U")
COMPARE TRANSPORT GLOBAL TO CU
"KRN",19,1253,-1)
0^16
"KRN",19,1253,0)
XPD UNLOAD DISTRIBUTION^Unload a Distribution^^R^^^^^^^^KIDS
"KRN",19,1253,1,0)
^^3^3^2941116^^^
"KRN",19,1253,1,1,0)
This option will remove the Transport Global and Packages in the Install
"KRN",19,1253,1,2,0)
file for a loaded Distribution. It will also remove any dangling packages
"KRN",19,1253,1,3,0)
in the Transport Global. You can only select the starting package.
"KRN",19,1253,25)
EN1^XPDIU
"KRN",19,1253,"U")
UNLOAD A DISTRIBUTION
"KRN",19,1276,-1)
0^10
"KRN",19,1276,0)
XPD PRINT CHECKSUM^Verify Checksums in Transport Global^^R^^^^^^^^KIDS
"KRN",19,1276,1,0)
^^2^2^2950403^^^^
"KRN",19,1276,1,1,0)
This option will verify checksums for the components of a Transport
"KRN",19,1276,1,2,0)
Global and will report any checksums that are incorrect.
"KRN",19,1276,25)
EN1^XPDDCS
"KRN",19,1276,"U")
VERIFY CHECKSUMS IN TRANSPORT 
"KRN",19,1354,-1)
0^13
"KRN",19,1354,0)
XPD BACKUP^Backup a Transport Global^^R^^^^^^^^KIDS
"KRN",19,1354,1,0)
^^4^4^2951026^^^
"KRN",19,1354,1,1,0)
This option creates a MailMan message that will backup all current routines
"KRN",19,1354,1,2,0)
on your system that would be replaced by the Packages in this Transport
"KRN",19,1354,1,3,0)
Global. Those components that are not routines must be backed up separately
"KRN",19,1354,1,4,0)
if they need to be preserved. 
"KRN",19,1354,25)
EN^XPDIB
"KRN",19,1354,"U")
BACKUP A TRANSPORT GLOBAL
"KRN",19,1368,-1)
0^1
"KRN",19,1368,0)
XUPR RTN PATCH^Routines by Patch Number^^R^^^^^^^^KERNEL
"KRN",19,1368,1,0)
^^2^2^2960920^^
"KRN",19,1368,1,1,0)
This options will print routines associated with a patch.  You must
"KRN",19,1368,1,2,0)
enter a list of routines and then the output will be by patch numbers.
"KRN",19,1368,25)
%ZTPTCH
"KRN",19,1368,"U")
ROUTINES BY PATCH NUMBER
"KRN",19,1369,-1)
0^2
"KRN",19,1369,0)
XPD ROLLUP PATCHES^Rollup Patches into a Build^^R^^^^^^^^KIDS
"KRN",19,1369,1,0)
^^4^4^2960920^^
"KRN",19,1369,1,1,0)
This option will find all the patches for a Package and add their Build
"KRN",19,1369,1,2,0)
file definition to the Package Build file definition.  This will enable
"KRN",19,1369,1,3,0)
you to create a single Build file entry that contains the definition for
"KRN",19,1369,1,4,0)
a patched Package.
"KRN",19,1369,25)
EN1^XPDER
"KRN",19,1369,"U")
ROLLUP PATCHES INTO A BUILD
"KRN",19,1370,-1)
0^3
"KRN",19,1370,0)
XPD PRINT PACKAGE PATCHES^Display Patches for a Package^^R^^^^^^^^KIDS
"KRN",19,1370,1,0)
^^4^4^2960917^
"KRN",19,1370,1,1,0)
This option will print all patches installed for a Package. It displays
"KRN",19,1370,1,2,0)
the Date Installed and who installed the patches. It optionally will
"KRN",19,1370,1,3,0)
print the description of the patch. All information comes from the
"KRN",19,1370,1,4,0)
Package file.
"KRN",19,1370,25)
EN1^XPDDPCK
"KRN",19,1370,"U")
DISPLAY PATCHES FOR A PACKAGE
"KRN",19,1371,-1)
0^6
"KRN",19,1371,0)
XUPR RTN CHKSUM^Check Routines on Other CPUs^^R^^^^^^^^KERNEL
"KRN",19,1371,1,0)
^^3^3^2961003^^
"KRN",19,1371,1,1,0)
This option will compare the Checksum for routines on one system to the
"KRN",19,1371,1,2,0)
checksums for the same routines on another system.  It is only for sites
"KRN",19,1371,1,3,0)
who have Compute and Print Servers with different routine directories.
"KRN",19,1371,25)
XTSUMCK
"KRN",19,1371,"U")
CHECK ROUTINES ON OTHER CPUS
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
44^2961004
"PKG",283,22,1,"PAH",1,1,0)
^^186^186^2961009
"PKG",283,22,1,"PAH",1,1,1,0)
 This patch contains the following features:
"PKG",283,22,1,"PAH",1,1,2,0)

"PKG",283,22,1,"PAH",1,1,3,0)
 DAY-0996-41414
"PKG",283,22,1,"PAH",1,1,4,0)
 -Fixes undef error in XPDIK when install patch with DD's.
"PKG",283,22,1,"PAH",1,1,5,0)
 FRE-0996-60791, ANN-0996-41556
"PKG",283,22,1,"PAH",1,1,6,0)
 -Fixes subscript error when converting a package.
"PKG",283,22,1,"PAH",1,1,7,0)
 REN-1095-62643, BOI-1095-53144, MUS-0696-70425
"PKG",283,22,1,"PAH",1,1,8,0)
 -Fixes nouci errors when MenuMan's Micro-surgery runs on MSM sites.
"PKG",283,22,1,"PAH",1,1,9,0)
 BEC-0996-21668
"PKG",283,22,1,"PAH",1,1,10,0)
 -Fixes bug that left ^XTMP("XPDI", global for certain patches.
"PKG",283,22,1,"PAH",1,1,11,0)
-Fixes bug when Environment Check Routine is run during the load process and
"PKG",283,22,1,"PAH",1,1,12,0)
  the variable XPDQUIT or XPDABORT is set to 2. The Install file would be
"PKG",283,22,1,"PAH",1,1,13,0)
  incomplete and the install would get an undef error.
"PKG",283,22,1,"PAH",1,1,14,0)
-New message, if the Install file is incomplete the user will get the message
"PKG",283,22,1,"PAH",1,1,15,0)
  '**INSTALL FILE CORRUPTED**', and the install will abort.
"PKG",283,22,1,"PAH",1,1,16,0)
-New Alerts will be sent to the installer if an error occurs during the
"PKG",283,22,1,"PAH",1,1,17,0)
  install process or if a CPU is not updated.
"PKG",283,22,1,"PAH",1,1,18,0)
-New options: Routines by Patch Number, Display Patches for a Package,
"PKG",283,22,1,"PAH",1,1,19,0)
  Rollup Patches into a Build, and Check Routines on Other CPUs.
"PKG",283,22,1,"PAH",1,1,20,0)
-New type of Build, MULTI-PACKAGE. It contains a list of other Builds.
"PKG",283,22,1,"PAH",1,1,21,0)
-New field, REQUIRED BUILD #11, in file BUILD #9.6.
"PKG",283,22,1,"PAH",1,1,22,0)
-New field, SIGNON/PRODUCTION VOLUME SET #9, in file VOLUME SET #14.5.
"PKG",283,22,1,"PAH",1,1,23,0)
-KIDS will support HL7 type fields in the Protocol file, #101.
"PKG",283,22,1,"PAH",1,1,24,0)
-KIDS will also support the following files as components:
"PKG",283,22,1,"PAH",1,1,25,0)
  MAIL GROUP #3.8
"PKG",283,22,1,"PAH",1,1,26,0)
  HL7 APPLICATION PARAMETER #771
"PKG",283,22,1,"PAH",1,1,27,0)
  HL LOWER LEVEL PROTOCOL PARAMETER #869.2
"PKG",283,22,1,"PAH",1,1,28,0)
  HL LOGICAL LINK #870
"PKG",283,22,1,"PAH",1,1,29,0)
==============================================================================
"PKG",283,22,1,"PAH",1,1,30,0)
                    **** INSTALL INSTRUCTIONS ****
"PKG",283,22,1,"PAH",1,1,31,0)
==============================================================================
"PKG",283,22,1,"PAH",1,1,32,0)

"PKG",283,22,1,"PAH",1,1,33,0)
This patch should be installed during off-peak hours. Users can be on the
"PKG",283,22,1,"PAH",1,1,34,0)
system, but no other users should be using KIDS while you install this patch.
"PKG",283,22,1,"PAH",1,1,35,0)
Since this patch is an update to KIDS, no other patches should be installed
"PKG",283,22,1,"PAH",1,1,36,0)
during the installation of this patch.
"PKG",283,22,1,"PAH",1,1,37,0)

"PKG",283,22,1,"PAH",1,1,38,0)
**MSM sites must manually move the routines XPDIJ and XPDCPU to their other
"PKG",283,22,1,"PAH",1,1,39,0)
  CPUs. KIDS cannot automatically move these routines for you.**
"PKG",283,22,1,"PAH",1,1,40,0)
==============================================================================
"PKG",283,22,1,"PAH",1,1,41,0)
  
"PKG",283,22,1,"PAH",1,1,42,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,43,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,44,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,45,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,46,0)
      option will load the KIDS Distribution onto your system.
"PKG",283,22,1,"PAH",1,1,47,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,48,0)
      system. You now need to use KIDS to install the patch in the Transport
"PKG",283,22,1,"PAH",1,1,49,0)
      global.
"PKG",283,22,1,"PAH",1,1,50,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",283,22,1,"PAH",1,1,51,0)
      options:
"PKG",283,22,1,"PAH",1,1,52,0)
         Verify Checksums in Transport Global
"PKG",283,22,1,"PAH",1,1,53,0)
         Print Transport Global
"PKG",283,22,1,"PAH",1,1,54,0)
         Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,55,0)
         Backup a Transport Global
"PKG",283,22,1,"PAH",1,1,56,0)
         Install Package(s)
"PKG",283,22,1,"PAH",1,1,57,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,58,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",283,22,1,"PAH",1,1,59,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ and XPDCPU to your
"PKG",283,22,1,"PAH",1,1,60,0)
      other CPUs.
"PKG",283,22,1,"PAH",1,1,61,0)
  7.  Move the routine ZTPTCH to your Manager Account(s) and rename as %ZTPTCH
"PKG",283,22,1,"PAH",1,1,62,0)
      on all systems where the users can signon through ZU.
"PKG",283,22,1,"PAH",1,1,63,0)
  8.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,64,0)
  9.  MSM Sites - You should edit the SIGNON/PRODUCTION VOLUME SET field using
"PKG",283,22,1,"PAH",1,1,65,0)
      the 'Volume Set Edit' option under the 'Edit Taskman Parameters' menu.
"PKG",283,22,1,"PAH",1,1,66,0)
      Enter 'YES' for your Compute and Printer servers. Enter 'NO' for your
"PKG",283,22,1,"PAH",1,1,67,0)
      File servers.
"PKG",283,22,1,"PAH",1,1,68,0)
 10.  MSM Sites - Drop into programmer mode and DO KICK^XQ7. This will start
"PKG",283,22,1,"PAH",1,1,69,0)
      Micro-surgery on all the servers you just edited in the VOLUME SET file.
"PKG",283,22,1,"PAH",1,1,70,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,71,0)
  
"PKG",283,22,1,"PAH",1,1,72,0)
ROUTINES:
"PKG",283,22,1,"PAH",1,1,73,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,74,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,75,0)
 
"PKG",283,22,1,"PAH",1,1,76,0)
 Name           Checksum        Patch List
"PKG",283,22,1,"PAH",1,1,77,0)
 -----------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,78,0)
 XPDCPU         6460017         41,44
"PKG",283,22,1,"PAH",1,1,79,0)
 XPDDCS         4096637         2,44
"PKG",283,22,1,"PAH",1,1,80,0)
 XPDDP          11584192        21,28,44
"PKG",283,22,1,"PAH",1,1,81,0)
 XPDDPCK        3463634         44 (new)
"PKG",283,22,1,"PAH",1,1,82,0)
 XPDE           15036235        2,15,21,44
"PKG",283,22,1,"PAH",1,1,83,0)
 XPDER          6591221         44 (new)
"PKG",283,22,1,"PAH",1,1,84,0)
 XPDET          5054183         15,39,41,44
"PKG",283,22,1,"PAH",1,1,85,0)
 XPDI           17816610        10,21,39,41,44
"PKG",283,22,1,"PAH",1,1,86,0)
 XPDIA          12898389        10,15,21,28,44
"PKG",283,22,1,"PAH",1,1,87,0)
 XPDIA1         7754922         2,44
"PKG",283,22,1,"PAH",1,1,88,0)
 XPDIJ          10173098        2,21,28,41,44
"PKG",283,22,1,"PAH",1,1,89,0)
 XPDIL          10583214        15,44
"PKG",283,22,1,"PAH",1,1,90,0)
 XPDIL1         8511833         15,17,39,41,44
"PKG",283,22,1,"PAH",1,1,91,0)
 XPDIP          9737651         15,21,28,30,41,44
"PKG",283,22,1,"PAH",1,1,92,0)
 XPDIU          7734016         15,41,44
"PKG",283,22,1,"PAH",1,1,93,0)
 XPDR           18038674        1,2,44
"PKG",283,22,1,"PAH",1,1,94,0)
 XPDT           19190604        2,10,28,41,44
"PKG",283,22,1,"PAH",1,1,95,0)
 XPDTA          7419894         15,44
"PKG",283,22,1,"PAH",1,1,96,0)
 XPDTA1         4760350         44
"PKG",283,22,1,"PAH",1,1,97,0)
 XPDTC          12862739        10,15,21,39,41,44
"PKG",283,22,1,"PAH",1,1,98,0)
 XPDTP          2384575         21,40,44
"PKG",283,22,1,"PAH",1,1,99,0)
 XPDV           9865255         30,44
"PKG",283,22,1,"PAH",1,1,100,0)
 XQ5            13875754        44
"PKG",283,22,1,"PAH",1,1,101,0)
 XQ7            2506259         44
"PKG",283,22,1,"PAH",1,1,102,0)
 XTSUMCK        15685964        44 (new)
"PKG",283,22,1,"PAH",1,1,103,0)
 XTSUMCK1       2208048         44 (new)
"PKG",283,22,1,"PAH",1,1,104,0)
 ZTPTCH         4513173         44 (new)
"PKG",283,22,1,"PAH",1,1,105,0)
============================================================================
"PKG",283,22,1,"PAH",1,1,106,0)
DOCUMENTATION:
"PKG",283,22,1,"PAH",1,1,107,0)

"PKG",283,22,1,"PAH",1,1,108,0)
 OPTION:
"PKG",283,22,1,"PAH",1,1,109,0)

"PKG",283,22,1,"PAH",1,1,110,0)
 Systems Manager Menu ...
"PKG",283,22,1,"PAH",1,1,111,0)
   Programmer Options ...
"PKG",283,22,1,"PAH",1,1,112,0)
     Routine Tools ...
"PKG",283,22,1,"PAH",1,1,113,0)

"PKG",283,22,1,"PAH",1,1,114,0)
'Check Routines on Other CPUs'     Option name: XUPR RTN CHKSUM
"PKG",283,22,1,"PAH",1,1,115,0)
   This option will compare the Checksum for routines in the Production
"PKG",283,22,1,"PAH",1,1,116,0)
   account of one system to the checksums for the same routines on another
"PKG",283,22,1,"PAH",1,1,117,0)
   system.  It is only for sites who have Compute and Print Servers with
"PKG",283,22,1,"PAH",1,1,118,0)
   different routine directories.
"PKG",283,22,1,"PAH",1,1,119,0)

"PKG",283,22,1,"PAH",1,1,120,0)
'Routines by Patch Number'     Option name: XUPR RTN PATCH
"PKG",283,22,1,"PAH",1,1,121,0)
   This options will print routines associated with a patch.  You must
"PKG",283,22,1,"PAH",1,1,122,0)
   enter a list of routines and then the output will be by patch numbers.
"PKG",283,22,1,"PAH",1,1,123,0)

"PKG",283,22,1,"PAH",1,1,124,0)

"PKG",283,22,1,"PAH",1,1,125,0)
 Systems Manager Menu ...
"PKG",283,22,1,"PAH",1,1,126,0)
   Programmer Options ...
"PKG",283,22,1,"PAH",1,1,127,0)
     Kernel Installation & Distribution System ...
"PKG",283,22,1,"PAH",1,1,128,0)
       Utilities ...
"PKG",283,22,1,"PAH",1,1,129,0)

"PKG",283,22,1,"PAH",1,1,130,0)
'Display Patches for a Package'     Option name: XPD PRINT PACKAGE PATCHES
"PKG",283,22,1,"PAH",1,1,131,0)
     This option will print all patches installed for a Package. It displays
"PKG",283,22,1,"PAH",1,1,132,0)
     the Date Installed and who installed the patches. It optionally will
"PKG",283,22,1,"PAH",1,1,133,0)
     print the description of the patch. All information comes from the
"PKG",283,22,1,"PAH",1,1,134,0)
     Package file.
"PKG",283,22,1,"PAH",1,1,135,0)

"PKG",283,22,1,"PAH",1,1,136,0)
'Rollup Patches into a Build'     Option name: XPD ROLLUP PATCHES
"PKG",283,22,1,"PAH",1,1,137,0)
     This option will find all the patches for a Package and add their Build
"PKG",283,22,1,"PAH",1,1,138,0)
     file definition to the Package Build file definition.  This will enable
"PKG",283,22,1,"PAH",1,1,139,0)
     you to create a single Build file entry that contains the definition for
"PKG",283,22,1,"PAH",1,1,140,0)
     a patched Package.
"PKG",283,22,1,"PAH",1,1,141,0)

"PKG",283,22,1,"PAH",1,1,142,0)

"PKG",283,22,1,"PAH",1,1,143,0)
 DATA DICTIONARY:  Partial DD
"PKG",283,22,1,"PAH",1,1,144,0)

"PKG",283,22,1,"PAH",1,1,145,0)
  File:  BUILD #9.6
"PKG",283,22,1,"PAH",1,1,146,0)
   Field:  REQUIRED BUILD #11
"PKG",283,22,1,"PAH",1,1,147,0)
    Subfield:
"PKG",283,22,1,"PAH",1,1,148,0)
    .01    REQUIRED BUILD
"PKG",283,22,1,"PAH",1,1,149,0)
             Enter a Build name, a patch or package, that is required to
"PKG",283,22,1,"PAH",1,1,150,0)
             be installed before this Build is installed.  KIDS will check
"PKG",283,22,1,"PAH",1,1,151,0)
             the Package file, Version multiple and Patch Application
"PKG",283,22,1,"PAH",1,1,152,0)
             History multiple, to verify that the Required Build has been
"PKG",283,22,1,"PAH",1,1,153,0)
             installed.  
"PKG",283,22,1,"PAH",1,1,154,0)
    1      ACTION
"PKG",283,22,1,"PAH",1,1,155,0)
             This is the action you want to happen when installing this
"PKG",283,22,1,"PAH",1,1,156,0)
             Build and the Required Build has not been installed at the
"PKG",283,22,1,"PAH",1,1,157,0)
             site.  
"PKG",283,22,1,"PAH",1,1,158,0)

"PKG",283,22,1,"PAH",1,1,159,0)
   Field:  MULTIPLE BUILD #10
"PKG",283,22,1,"PAH",1,1,160,0)
    Subfield:
"PKG",283,22,1,"PAH",1,1,161,0)
    .001   INSTALL ORDER
"PKG",283,22,1,"PAH",1,1,162,0)
             This is the order in which this package will be installed.
"PKG",283,22,1,"PAH",1,1,163,0)
    .01    MULTIPLE BUILD
"PKG",283,22,1,"PAH",1,1,164,0)
             Name of Build that will be part of this multi-package
"PKG",283,22,1,"PAH",1,1,165,0)
             distribution or a patch that is part of this Build definition.  
"PKG",283,22,1,"PAH",1,1,166,0)

"PKG",283,22,1,"PAH",1,1,167,0)
  File:  INSTALL #9.7
"PKG",283,22,1,"PAH",1,1,168,0)
   Field:  VOLUME SET #30
"PKG",283,22,1,"PAH",1,1,169,0)
    Subfield:
"PKG",283,22,1,"PAH",1,1,170,0)
    .01    VOLUME SET
"PKG",283,22,1,"PAH",1,1,171,0)
             Enter the name of the VOLUME SET that you want updated when
"PKG",283,22,1,"PAH",1,1,172,0)
             this package is installed. This field points to the VOLUME SET
"PKG",283,22,1,"PAH",1,1,173,0)
             file, #14.5. A VOLUME SET must have the field SIGNON/PRODUCTION
"PKG",283,22,1,"PAH",1,1,174,0)
             VOLUME SET, #9, set to YES.
"PKG",283,22,1,"PAH",1,1,175,0)

"PKG",283,22,1,"PAH",1,1,176,0)
  File:  VOLUME SET #14.5
"PKG",283,22,1,"PAH",1,1,177,0)
   Field:  SIGNON/PRODUCTION VOLUME SET #9
"PKG",283,22,1,"PAH",1,1,178,0)
             Enter Yes if this Volume Set has the following properties:
"PKG",283,22,1,"PAH",1,1,179,0)
             1. Users can sign-on into the Kernel Menu system or the RPC
"PKG",283,22,1,"PAH",1,1,180,0)
             Broker Server routine is running there.
"PKG",283,22,1,"PAH",1,1,181,0)
             2. Has a productions UCI which contains application routines.
"PKG",283,22,1,"PAH",1,1,182,0)
             3. The ^XTMP global is translated.
"PKG",283,22,1,"PAH",1,1,183,0)
             If you enter Yes the Kernel Installation and Distribution
"PKG",283,22,1,"PAH",1,1,184,0)
             System will be able to move routines to this Volume Set.  The
"PKG",283,22,1,"PAH",1,1,185,0)
             Kernel Menu system will be able to run the Menu Microsurgery
"PKG",283,22,1,"PAH",1,1,186,0)
             and keep menus updated.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
27
"RTN","XPDCPU")
0^7^B13986565
"RTN","XPDCPU",1,0)
XPDCPU ;SFISC/RWF,RSD - Code that update each cpu ;09/09/96  08:01
"RTN","XPDCPU",2,0)
 ;;8.0;KERNEL;**41,44**;Jul 03, 1995
"RTN","XPDCPU",3,0)
 N DIC,X,XPDA
"RTN","XPDCPU",4,0)
 S DIC("S")="I $P(^(0),U,9)=2,$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))"
"RTN","XPDCPU",5,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",6,0)
 S X=$O(^XPD(9.7,XPDA,"VOL","B",^%ZOSF("VOL"),0)) Q:'X
"RTN","XPDCPU",7,0)
 D EN(XPDA,X)
"RTN","XPDCPU",8,0)
 Q
"RTN","XPDCPU",9,0)
 ;
"RTN","XPDCPU",10,0)
MOVE ;move routines to other CPU
"RTN","XPDCPU",11,0)
 N DIC,DIR,DIRUT,X,XPDA,XPDJ,Y
"RTN","XPDCPU",12,0)
 S DIC("S")="I $P(^(0),U,9)=3"
"RTN","XPDCPU",13,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",14,0)
 S DIR(0)="Y",DIR("A")="Want to move the Routine for this Package to another CPU",DIR("B")="YES",DIR("?")="YES means you want to update the routines on another CPU"
"RTN","XPDCPU",15,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDCPU",16,0)
 K ^XTMP("XPDR",XPDA)
"RTN","XPDCPU",17,0)
 S ^XTMP("XPDR",0)=DT_U_DT,XPDJ=""
"RTN","XPDCPU",18,0)
 F  S XPDJ=$O(^XPD(9.7,XPDA,"RTN","B",XPDJ)) Q:XPDJ=""  D
"RTN","XPDCPU",19,0)
 .Q:XPDJ="XPDCPU"
"RTN","XPDCPU",20,0)
 .N DIF,XCNP,%N
"RTN","XPDCPU",21,0)
 .S DIF="^XTMP(""XPDR"",XPDA,""RTN"",XPDJ,",XCNP=0,X=XPDJ
"RTN","XPDCPU",22,0)
 .X ^%ZOSF("LOAD")
"RTN","XPDCPU",23,0)
 I $D(^XTMP("XPDR",XPDA)) W !!,"Run INSTALL^XPDCPU on the other CPU to install the Routines.",!
"RTN","XPDCPU",24,0)
 Q
"RTN","XPDCPU",25,0)
INSTALL ;install routines
"RTN","XPDCPU",26,0)
 N DIC,DIR,DIRUT,X,XPDA,XPDJ,Y
"RTN","XPDCPU",27,0)
 S DIC("S")="I $P(^(0),U,9)=3,$D(^XTMP(""XPDR"",Y))"
"RTN","XPDCPU",28,0)
 D EN1 Q:'XPDA
"RTN","XPDCPU",29,0)
 S DIR(0)="Y",DIR("A")="Want to install the Routine for this Package",DIR("B")="YES",DIR("?")="YES means you want to install the routines on this CPU"
"RTN","XPDCPU",30,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDCPU",31,0)
 S XPDJ=""
"RTN","XPDCPU",32,0)
 F  S XPDJ=$O(^XTMP("XPDR",XPDA,"RTN",XPDJ)) Q:XPDJ=""  D
"RTN","XPDCPU",33,0)
 .N %,DIE,XCM,XCN,XCS
"RTN","XPDCPU",34,0)
 .S DIE="^XTMP(""XPDR"",XPDA,""RTN"",XPDJ,",XCN=0,X=XPDJ
"RTN","XPDCPU",35,0)
 .X ^%ZOSF("SAVE")
"RTN","XPDCPU",36,0)
 W !!,"Done",!!
"RTN","XPDCPU",37,0)
 Q
"RTN","XPDCPU",38,0)
 ;
"RTN","XPDCPU",39,0)
EN(XPDA,XPDVDA) ;XPDA=ien of INSTALL file, XPDVDA=VOLUME SET ien
"RTN","XPDCPU",40,0)
 L +^XPD(9.7,XPDA,"VOL",XPDVDA):2 E  W:IO]"" !,"Can't Lock global, another XPDCPU must be running",! Q
"RTN","XPDCPU",41,0)
 N Y,%,XPDNM
"RTN","XPDCPU",42,0)
 S Y=0,ZTREQ="@"
"RTN","XPDCPU",43,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDCPU",44,0)
 .N XPDA,Y
"RTN","XPDCPU",45,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D EN2
"RTN","XPDCPU",46,0)
 Q
"RTN","XPDCPU",47,0)
EN1 ;ask for Install
"RTN","XPDCPU",48,0)
 N Y S XPDA=0
"RTN","XPDCPU",49,0)
 I $D(DUZ)_$D(DUZ(0))_$D(U)[0 D DT^DICRW
"RTN","XPDCPU",50,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDCPU",51,0)
 D ^DIC K DIC Q:Y'>0
"RTN","XPDCPU",52,0)
 S XPDA=+Y
"RTN","XPDCPU",53,0)
 Q
"RTN","XPDCPU",54,0)
EN2 N X,XPD,XPDBLD,XPDI,ZTUCI,ZTCPU,ZTRTN,ZTDTH,ZTIO,ZTDESC
"RTN","XPDCPU",55,0)
 ;must have XTMP & entry in file 9.7
"RTN","XPDCPU",56,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDCPU",57,0)
 ;hang 1 hr or until VOLUME multiple is set, XPDIJ sets VOL multiple
"RTN","XPDCPU",58,0)
 F X=0:1:60 Q:$D(^XPD(9.7,XPDA,"VOL",+$G(XPDVDA),0))  H 60 W:IO]"" "."
"RTN","XPDCPU",59,0)
 I X=60 W:IO]"" !!,"Package ",$P(^XPD(9.7,XPDA,0),U)," never installed",! Q
"RTN","XPDCPU",60,0)
 S XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDCPU",61,0)
 D FILE(2),UPDT
"RTN","XPDCPU",62,0)
 W:IO]"" !,"Loading Routines"
"RTN","XPDCPU",63,0)
 I $D(^XTMP("XPDI",XPDA,"RTN","XPDCPU")) S X=$$RTNUP^XPDUTL("XPDCPU",2)
"RTN","XPDCPU",64,0)
 ;make sure routines have been loaded
"RTN","XPDCPU",65,0)
 F X=0:1:240 Q:$P($G(^XPD(9.7,XPDA,1)),U,2)  H 15 W:IO]"" "." D UPDT
"RTN","XPDCPU",66,0)
 D UPDT,RTN^XPDIJ(XPDA),UPDT
"RTN","XPDCPU",67,0)
 W:IO]"" !!,"Recompiling Template routines"
"RTN","XPDCPU",68,0)
 F XPD="DIKZ","DIEZ","DIPZ" D
"RTN","XPDCPU",69,0)
 .S XPDI="" Q:'$$CHCK
"RTN","XPDCPU",70,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPD,XPDI)) Q:'XPDI  S X=^(XPDI) D:X]"" @("EN2^"_XPD_"("""_XPDI_""","""","""_X_""")"),UPDT
"RTN","XPDCPU",71,0)
 D UPDT,FILE(1)
"RTN","XPDCPU",72,0)
 Q
"RTN","XPDCPU",73,0)
CHCK() ;check if the component is installed, return 1 if installed, 0 to abort
"RTN","XPDCPU",74,0)
 N XPDC,Y
"RTN","XPDCPU",75,0)
 I XPD="DIKZ" S XPDC="S Y=$G(^(+$O(^XPD(9.7,XPDA,4,""A""),-1),0))"
"RTN","XPDCPU",76,0)
 E  S Y=$S(XPD="DIPZ":.4,1:.402),XPDC="S Y=$G(^XPD(9.7,XPDA,""KRN"","_Y_",0))"
"RTN","XPDCPU",77,0)
 F  X XPDC Q:'Y!$P(Y,U,2)  H 60 D UPDT W:IO]"" "." I $D(ZTMQUE),$$STOP^%ZTLOAD S Y=0 Q
"RTN","XPDCPU",78,0)
 Q ''Y
"RTN","XPDCPU",79,0)
FILE(XPDF) ;set NOW into the VOLUME SET multiple, XPDF=field number
"RTN","XPDCPU",80,0)
 N XPD
"RTN","XPDCPU",81,0)
 S XPD(9.703,XPDVDA_","_XPDA_",",XPDF)=$$NOW^XLFDT
"RTN","XPDCPU",82,0)
 D FILE^DIE("","XPD")
"RTN","XPDCPU",83,0)
 Q
"RTN","XPDCPU",84,0)
UPDT ;update $H into VOLUME SET multiple, field 4
"RTN","XPDCPU",85,0)
 S ^XPD(9.7,XPDA,"VOL",XPDVDA,1)=$H
"RTN","XPDCPU",86,0)
 Q
"RTN","XPDDCS")
0^8^B9162138
"RTN","XPDDCS",1,0)
XPDDCS ;SFISC/RSD - Display Checksum for a package ;09/12/96  09:10
"RTN","XPDDCS",2,0)
 ;;8.0;KERNEL;**2,44**;Jul 10, 1995
"RTN","XPDDCS",3,0)
EN1 ;print from Transport Global
"RTN","XPDDCS",4,0)
 N D0,DIC,X,XPD,Y,Z
"RTN","XPDDCS",5,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDCS",6,0)
 D ^DIC Q:Y<0
"RTN","XPDDCS",7,0)
 S D0=+Y,XPD("D0")="",X="XUTMDEVQ"
"RTN","XPDDCS",8,0)
 ;during Virgin install, XUTMDEVQ might not exists
"RTN","XPDDCS",9,0)
 X ^%ZOSF("TEST") E  D  Q
"RTN","XPDDCS",10,0)
 .S IOSL=99999,IOM=80,IOF="#",IOST="",$Y=0 D PNT(9.7)
"RTN","XPDDCS",11,0)
 S Y="PNT^XPDDCS(9.7)",Z="Checksum Print"
"RTN","XPDDCS",12,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",13,0)
 Q
"RTN","XPDDCS",14,0)
EN2 ;print from system
"RTN","XPDDCS",15,0)
 N D0,DIC,XPD,Y,Z
"RTN","XPDDCS",16,0)
 S DIC="^XPD(9.6,",DIC(0)="AEQMZ"
"RTN","XPDDCS",17,0)
 D ^DIC Q:Y<0
"RTN","XPDDCS",18,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDCS(9.6)",Z="Checksum Print"
"RTN","XPDDCS",19,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",20,0)
 Q
"RTN","XPDDCS",21,0)
 ;
"RTN","XPDDCS",22,0)
PNT(XPDFIL) ;print
"RTN","XPDDCS",23,0)
 N XPD0,XPDC,XPDDT,XPDE,XPDI,XPDJ,XPDPG,XPDQ,XPDUL,X
"RTN","XPDDCS",24,0)
 Q:'$D(^XPD(XPDFIL,D0,0))  S XPD0=^(0),XPDPG=1,$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDCS",25,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR
"RTN","XPDDCS",26,0)
 W !
"RTN","XPDDCS",27,0)
 S XPDI="",(XPDQ,XPDE)=0
"RTN","XPDDCS",28,0)
 ;XPDFIL=9.7  use transport global exists
"RTN","XPDDCS",29,0)
 I XPDFIL=9.7 D
"RTN","XPDDCS",30,0)
 .I '$D(^XTMP("XPDI",D0)) W !!," ** Transport Global doesn't exist **" S XPDQ=1 Q
"RTN","XPDDCS",31,0)
 .;check for missing nodes in transport global
"RTN","XPDDCS",32,0)
 .I '$D(^XTMP("XPDI",D0,"BLD"))="" W !!," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",33,0)
 .F XPDC=0:1 S XPDI=$O(^XTMP("XPDI",D0,"RTN",XPDI)) Q:XPDI=""  S XPDJ=$G(^(XPDI)) D  Q:XPDQ
"RTN","XPDDCS",34,0)
 ..I XPDJ="" W !," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",35,0)
 ..;if deleting at site, there is no checksum
"RTN","XPDDCS",36,0)
 ..I +XPDJ=1 S XPDC=XPDC-1 Q
"RTN","XPDDCS",37,0)
 ..D SUM(XPDI,$NA(^XTMP("XPDI",D0,"RTN",XPDI)),$P(XPDJ,U,3))
"RTN","XPDDCS",38,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",39,0)
 ;check build file
"RTN","XPDDCS",40,0)
 E  D
"RTN","XPDDCS",41,0)
 .F XPDC=0:1 S XPDI=$O(^XPD(9.6,D0,"KRN",9.8,"NM","B",XPDI)) Q:XPDI=""  S XPDJ=$O(^(XPDI,0)) D  Q:XPDQ
"RTN","XPDDCS",42,0)
 ..Q:'$D(^XPD(9.6,D0,"KRN",9.8,"NM",+XPDJ,0))  S XPDJ=$P(^(0),U,4)
"RTN","XPDDCS",43,0)
 ..;quit if no checksum, routine wasn't loaded
"RTN","XPDDCS",44,0)
 ..I XPDJ="" S XPDC=XPDC-1 Q
"RTN","XPDDCS",45,0)
 ..N DIF,XCNP,%N
"RTN","XPDDCS",46,0)
 ..S X=XPDI,DIF="^TMP($J,""RTN"",XPDI,",XCNP=0
"RTN","XPDDCS",47,0)
 ..X ^%ZOSF("TEST") E  W !,XPDI,?10,"Doesn't Exist" Q
"RTN","XPDDCS",48,0)
 ..X ^%ZOSF("LOAD")
"RTN","XPDDCS",49,0)
 ..D SUM(XPDI,$NA(^TMP($J,"RTN",XPDI)),XPDJ)
"RTN","XPDDCS",50,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",51,0)
 Q:XPDQ
"RTN","XPDDCS",52,0)
 W !!?3,XPDC," Routine checked, ",XPDE," failed.",!
"RTN","XPDDCS",53,0)
 Q
"RTN","XPDDCS",54,0)
 ;
"RTN","XPDDCS",55,0)
 ;XPDR=routine name, Z=global root, XPD=check sum
"RTN","XPDDCS",56,0)
SUM(XPDR,Z,XPD) ;check checksum
"RTN","XPDDCS",57,0)
 N Y
"RTN","XPDDCS",58,0)
 ;first char. is the sum tag used in XPDRSUM
"RTN","XPDDCS",59,0)
 I XPD'?1U1.N W !,XPDR,?10,"ERROR in Checksum" S XPDE=XPDE+1 Q
"RTN","XPDDCS",60,0)
 S @("Y=$$SUM"_$E(XPD)_"^XPDRSUM(Z)"),XPD=$E(XPD,2,255)
"RTN","XPDDCS",61,0)
 I Y'=XPD W !,XPDR,?10,"Calculated "_$C(7)_Y_", should be "_XPD S XPDE=XPDE+1
"RTN","XPDDCS",62,0)
 Q
"RTN","XPDDCS",63,0)
 ;
"RTN","XPDDCS",64,0)
CHK(Y) ;Y=excess lines, return 1 to exit
"RTN","XPDDCS",65,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDCS",66,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDCS",67,0)
 .N DIR,I,J,K,X
"RTN","XPDDCS",68,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDCS",69,0)
 S XPDPG=XPDPG+1
"RTN","XPDDCS",70,0)
 W @IOF D HDR
"RTN","XPDDCS",71,0)
 Q 0
"RTN","XPDDCS",72,0)
 ;
"RTN","XPDDCS",73,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDDCS",74,0)
 Q
"RTN","XPDDP")
0^1^B27646769
"RTN","XPDDP",1,0)
XPDDP ;SFISC/RSD - Display a package ;09/17/96  09:01
"RTN","XPDDP",2,0)
 ;;8.0;KERNEL;**21,28,44**;Jul 05, 1995
"RTN","XPDDP",3,0)
EN1 ;print from Build file
"RTN","XPDDP",4,0)
 N DIC,D0,XPD,Y,Z
"RTN","XPDDP",5,0)
 S DIC="^XPD(9.6,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDP",6,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDP(""XPD(9.6,D0)"")",Z="Build File Print"
"RTN","XPDDP",7,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",8,0)
 Q
"RTN","XPDDP",9,0)
EN2 ;print from Distribution
"RTN","XPDDP",10,0)
 N D0,DIC,POP,XPD,XPDA,XPDNM,Y,Z,%ZIS
"RTN","XPDDP",11,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDP",12,0)
 D ^DIC Q:Y<0
"RTN","XPDDP",13,0)
 S XPD("D0")="",XPD("XPDA")="",XPDA=+Y,Y="PNT^XPDDP(""XTMP(""""XPDI"""",XPDA,""""BLD"""",D0)"")",Z="Transport Global Print",D0=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDDP",14,0)
 Q:'D0
"RTN","XPDDP",15,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",16,0)
 Q
"RTN","XPDDP",17,0)
 ;
"RTN","XPDDP",18,0)
PNT(XPDGR) ;print a package, XPDGR=global root
"RTN","XPDDP",19,0)
 ;XPDFL=0 - Build - ^XPD(9.7 global root, 1 - Install - ^XTMP global root
"RTN","XPDDP",20,0)
 ;2 - Packman ^TMP($J, global root
"RTN","XPDDP",21,0)
 N I,J,K,X,XPD,XPDDT,XPDI,XPD0,XPDFL,XPDPG,XPDUL,XPDTYPE
"RTN","XPDDP",22,0)
 Q:$G(XPDGR)=""  S XPDGR="^"_XPDGR
"RTN","XPDDP",23,0)
 Q:'$D(@XPDGR@(0))
"RTN","XPDDP",24,0)
 S XPD0=^(0),XPDPG=1,XPDFL=$S($E(XPDGR,1,5)="^TMP(":2,1:$E(XPDGR,1,5)="^XTMP"),$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM"),XPDTYPE=+$P(XPD0,U,3)
"RTN","XPDDP",25,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR W XPDUL,!
"RTN","XPDDP",26,0)
 W "TYPE: ",$$EXTERNAL^DILFD(9.6,2,"",XPDTYPE)
"RTN","XPDDP",27,0)
 W !,"NATIONAL PACKAGE: ",$P($G(^DIC(9.4,+$P(XPD0,U,2),0),$P(XPD0,U,2)),U)
"RTN","XPDDP",28,0)
 W !,"DESCRIPTION:",!
"RTN","XPDDP",29,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(1,XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),! Q:$$CHK(4)
"RTN","XPDDP",30,0)
 Q:$D(DIRUT)  G:XPDTYPE=1 MULT
"RTN","XPDDP",31,0)
 W !,"ENVIRONMENT CHECK : ",$G(@XPDGR@("PRE")),!
"RTN","XPDDP",32,0)
 W:'XPDTYPE " PRE-INIT ROUTINE : ",$G(@XPDGR@("INI")),!
"RTN","XPDDP",33,0)
 Q:$$CHK(4)  W "POST-INIT ROUTINE : ",$G(@XPDGR@("INIT")),!
"RTN","XPDDP",34,0)
 W:'XPDTYPE "PRE-TRANSPORT RTN : ",$G(@XPDGR@("PRET")),!
"RTN","XPDDP",35,0)
 G:XPDTYPE=2 GLOBAL
"RTN","XPDDP",36,0)
 I '$O(@XPDGR@(4,0)) Q:$$CHK(4)  G COMP
"RTN","XPDDP",37,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !! D HDR1 W XPDUL,!
"RTN","XPDDP",38,0)
PNT2 S XPDI=0 F  S XPDI=$O(@XPDGR@(4,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,222)) Q:$$CHK(4,1)  D
"RTN","XPDDP",39,0)
 .;file number, file name, partial DD
"RTN","XPDDP",40,0)
 .W !,XPDI,?12,$S('XPDFL:$P($G(^DIC(XPDI,0),"**unknown**"),U),1:$G(^XTMP("XPDI",XPDA,"FIA",XPDI)))
"RTN","XPDDP",41,0)
 .W ?41,$$EXTERNAL^DILFD(9.64,222.1,"",$P(XPD,U)),?47,$$EXTERNAL^DILFD(9.64,222.2,"",$P(XPD,U,2)),?53,$$EXTERNAL^DILFD(9.64,222.7,"",$P(XPD,U,7))
"RTN","XPDDP",42,0)
 .W ?60,$E($$EXTERNAL^DILFD(9.64,222.8,"",$P(XPD,U,8)),1,4),?67,$$EXTERNAL^DILFD(9.64,222.5,"",$P(XPD,U,5)),?73,$$EXTERNAL^DILFD(9.64,222.9,"",$P(XPD,U,9)),!
"RTN","XPDDP",43,0)
 .;print partial DD information
"RTN","XPDDP",44,0)
 .I $P(XPD,U,3)="p" S J=0 D
"RTN","XPDDP",45,0)
 ..W "Partial DD:"
"RTN","XPDDP",46,0)
 ..F  S J=$O(@XPDGR@(4,"APDD",XPDI,J)) Q:'J  W ?12,"subDD: ",J D  Q:$$CHK(4,1)
"RTN","XPDDP",47,0)
 ...I '$O(@XPDGR@(4,"APDD",XPDI,J,0)) W ! Q
"RTN","XPDDP",48,0)
 ...S I=0 F  S I=$O(@XPDGR@(4,"APDD",XPDI,J,I)) Q:'I  W ?30,"fld: ",I,!
"RTN","XPDDP",49,0)
 .I $D(@XPDGR@(4,XPDI,223)) W ?2,"DD SCREEN  : ",^(223),!
"RTN","XPDDP",50,0)
 .I $D(@XPDGR@(4,XPDI,224)) W ?2,"DATA SCREEN: ",^(224),!
"RTN","XPDDP",51,0)
COMP Q:$D(DIRUT)  W ! Q:$$CHK(3)  S I=0,XPD=$P(^DD(9.68,.03,0),U,3)
"RTN","XPDDP",52,0)
 ;print build components
"RTN","XPDDP",53,0)
 F  S I=$O(@XPDGR@("KRN",I)),K=0,J="" Q:$D(DIRUT)!'I  F  S J=$O(@XPDGR@("KRN",I,"NM","B",J)) Q:J=""  S X=$O(^(J,0)) Q:$$CHK(4)  D:X
"RTN","XPDDP",54,0)
 .S X=$G(@XPDGR@("KRN",I,"NM",X,0)) Q:X=""
"RTN","XPDDP",55,0)
 .;K is flag to write type of component
"RTN","XPDDP",56,0)
 .I 'K W !,$S($D(^DIC(I,0)):$P(^(0),U),XPDFL:$G(^XTMP("XPDI",XPDA,"FIA",I),"UNKNOWN"),1:"UNKNOWN")_":",! S K=1
"RTN","XPDDP",57,0)
 .;write the entry name and write the action
"RTN","XPDDP",58,0)
 .W ?3,$P(X,U),?50,$P($P(XPD,";",$P(X,U,3)+1),":",2),!
"RTN","XPDDP",59,0)
 Q:XPDFL=2
"RTN","XPDDP",60,0)
 ;XPDFL=2 this is a Packman message, called from XMP2 - Summarize
"RTN","XPDDP",61,0)
 ;XPDFL=1 this is a Install, the call backs are already Build Components
"RTN","XPDDP",62,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",63,0)
 I $O(@XPDGR@("QUES",0)) W !,"INSTALL QUESTIONS: " S I=0 D
"RTN","XPDDP",64,0)
 .F  S I=$O(@XPDGR@("QUES",I)) Q:'I  S X=$P(^(I,0),U),J=$G(^(1)),K=$G(^("A")) Q:$$CHK(5)  D
"RTN","XPDDP",65,0)
 ..W !?5,"SUBSCIRPT: ",X,!,"DIR(0)=",J W:K]"" !,"DIR(""A"")=",K,!
"RTN","XPDDP",66,0)
 ..F J=1:1 Q:'$D(@XPDGR@("QUES",I,"A1",J,0))  W "DIR(""A"",",J,")=",^(0),!
"RTN","XPDDP",67,0)
 ..I $G(@XPDGR@("QUES",I,"B"))]"" W "DIR(""B"")=",^("B"),!
"RTN","XPDDP",68,0)
 ..I $G(@XPDGR@("QUES",I,"Q"))]"" W "DIR(""?"")=",^("Q"),!
"RTN","XPDDP",69,0)
 ..F J=1:1 Q:'$D(@XPDGR@("QUES",I,"Q1",J,0))  W "DIR(""?"",",J,")=",^(0),!
"RTN","XPDDP",70,0)
 ..I $G(@XPDGR@("QUES",I,"QQ"))]"" W "DIR(""??"")=",^("QQ"),!
"RTN","XPDDP",71,0)
 ..I $G(@XPDGR@("QUES",I,"M"))]"" W "M CODE: ",^("M"),!
"RTN","XPDDP",72,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",73,0)
 I $L($G(@XPDGR@("ABPKG"))) S XPD=^("ABPKG") D:$P(XPD,U)="y"
"RTN","XPDDP",74,0)
 .W !,"ALPHA/BETA TESTING:",$$EXTERNAL^DILFD(9.6,20,"",$P(XPD,U)),?40,"INSTALLATION MESSAGE: ",$$EXTERNAL^DILFD(9.6,21,"",$P(XPD,U,2))
"RTN","XPDDP",75,0)
 .W !,"ADDRESS: ",$P(XPD,U,3),!!,"INCLUDE NAMESPACE",?30,"EXCLUDE NAMESPACE" S I=0
"RTN","XPDDP",76,0)
 .F  S I=$O(@XPDGR@("ABNS",I)),J=0 Q:'I  W !?5,^(I,0) F  S J=$O(@XPDGR@("ABNS",I,1,J)) Q:'J  W ?35,^(J,0),! Q:$$CHK(3)
"RTN","XPDDP",77,0)
REQB Q:$D(DIRUT)  Q:$$CHK(4)
"RTN","XPDDP",78,0)
 I $O(@XPDGR@("REQB",0)) W !,"REQUIRED BUILDS:",?50,"ACTION:" D
"RTN","XPDDP",79,0)
 .S XPDI=0 F  S XPDI=$O(@XPDGR@("REQB",XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",80,0)
 ..W !?3,$P(XPD,U),?50,$$EXTERNAL^DILFD(9.611,1,"",$P(XPD,U,2))
"RTN","XPDDP",81,0)
 Q
"RTN","XPDDP",82,0)
GLOBAL ;globals listing
"RTN","XPDDP",83,0)
 S I=$$CHK(8,1) Q:I  I '$P(I,"^",2) W !!,"GLOBAL:",?20,"KILL GLOBAL BEFORE INSTALL:"
"RTN","XPDDP",84,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@("GLO",XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",85,0)
 .W !?3,$P(XPD,U),?33,$$EXTERNAL^DILFD(9.65,1,"",$P(XPD,U,2))
"RTN","XPDDP",86,0)
 W ! Q
"RTN","XPDDP",87,0)
 ;
"RTN","XPDDP",88,0)
MULT ;multiple-package
"RTN","XPDDP",89,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !,"PACKAGE:"
"RTN","XPDDP",90,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(10,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4,1)  D
"RTN","XPDDP",91,0)
 .W !?3,$P(XPD,U)
"RTN","XPDDP",92,0)
 W ! Q
"RTN","XPDDP",93,0)
 ;
"RTN","XPDDP",94,0)
 ;return 0 if header was not written, else "0^1"
"RTN","XPDDP",95,0)
CHK(Y,XPD) ;Y=excess lines XPD=1 print file header, return 1 to exit
"RTN","XPDDP",96,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDP",97,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDP",98,0)
 .N DIR,I,J,K,X
"RTN","XPDDP",99,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDP",100,0)
 S XPD=$G(XPD),XPDPG=XPDPG+1
"RTN","XPDDP",101,0)
 W @IOF D HDR,HDR1:XPD
"RTN","XPDDP",102,0)
 W XPDUL,!
"RTN","XPDDP",103,0)
 Q "0^1"
"RTN","XPDDP",104,0)
 ;
"RTN","XPDDP",105,0)
XMP2(X,D0) ;called from ^XMP2
"RTN","XPDDP",106,0)
 N XPDA S XPDA=-1
"RTN","XPDDP",107,0)
 D PNT(X) Q
"RTN","XPDDP",108,0)
 ;
"RTN","XPDDP",109,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!
"RTN","XPDDP",110,0)
 Q
"RTN","XPDDP",111,0)
HDR1 W ?41,"UP",?47,"SEND",?53,"DATA",?73,"USER",!,?41,"DATE",?47,"SEC.",?53,"COMES",?60,"SITE",?67,"RSLV",?73,"OVER"
"RTN","XPDDP",112,0)
 W !,"FILE #",?12,"NAME",?41,"DD",?47,"CODE",?53,"W/FILE",?60,"DATA",?67,"PTS",?73,"RIDE",!
"RTN","XPDDP",113,0)
 Q
"RTN","XPDDPCK")
0^2^B5703122
"RTN","XPDDPCK",1,0)
XPDDPCK ;SFISC/RSD - Display a Package file information ;10/03/96  10:15
"RTN","XPDDPCK",2,0)
 ;;8.0;KERNEL;**44**;Jul 05, 1995
"RTN","XPDDPCK",3,0)
EN1 ;print all Patches for Package version
"RTN","XPDDPCK",4,0)
 N DIC,DIR,DIRUT,XPD,XPD0,XPDFL,XPDNM,XPDV,Y,Z
"RTN","XPDDPCK",5,0)
 S DIC="^DIC(9.4,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDPCK",6,0)
 I '$D(^DIC(9.4,+Y,22,0)) W !!,"This Package has no VERSION multiple",! Q
"RTN","XPDDPCK",7,0)
 S XPD0=+Y,DIC=DIC_XPD0_",22," S:$G(^DIC(9.4,XPD0,"VERSION")) DIC("B")=$P(^("VERSION"),U)
"RTN","XPDDPCK",8,0)
 D ^DIC Q:Y'>0
"RTN","XPDDPCK",9,0)
 S XPDV=+Y,DIR(0)="Y",DIR("A")="Do you want to see the Descriptions",DIR("B")="NO"
"RTN","XPDDPCK",10,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDDPCK",11,0)
 S XPDFL=Y,X="PNT^XPDDPCK",Z="Package File Print"
"RTN","XPDDPCK",12,0)
 F Y="XPD0","XPDFL","XPDV" S XPD(Y)=""
"RTN","XPDDPCK",13,0)
 D EN^XUTMDEVQ(X,Z,.XPD)
"RTN","XPDDPCK",14,0)
 Q
"RTN","XPDDPCK",15,0)
 ;
"RTN","XPDDPCK",16,0)
PNT ;print a package
"RTN","XPDDPCK",17,0)
 N DIRUT,I,J,K,X,XPD,XPDDT,XPDI,XPDPG,XPDUL,XPDV0
"RTN","XPDDPCK",18,0)
 Q:'$G(XPD0)!'$G(XPDV)!'$D(XPDFL)
"RTN","XPDDPCK",19,0)
 Q:'$D(^DIC(9.4,XPD0,0))  S XPDNM=$P(^(0),U) Q:'$D(^(22,XPDV,0))  S XPDV0=^(0)
"RTN","XPDDPCK",20,0)
 S XPDPG=1,$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDPCK",21,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR
"RTN","XPDDPCK",22,0)
 W "VERSION: ",$P(XPDV0,U),?20,$$EXTERNAL^DILFD(9.49,2,"",$P(XPDV0,U,3)),?50,$$EXTERNAL^DILFD(9.49,3,"",$P(XPDV0,U,4))
"RTN","XPDDPCK",23,0)
 ;diplay version description
"RTN","XPDDPCK",24,0)
 I XPDFL W ! D DES("^DIC(9.4,"_XPD0_",22,"_XPDV_",1)") Q:$D(DIRUT)
"RTN","XPDDPCK",25,0)
 W ! S XPDI=0
"RTN","XPDDPCK",26,0)
 F  S XPDI=$O(^DIC(9.4,XPD0,22,XPDV,"PAH",XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,0)) Q:$$CHK(4)  D  Q:$D(DIRUT)
"RTN","XPDDPCK",27,0)
 .;patch history
"RTN","XPDDPCK",28,0)
 .W !?3,$P(XPD,U),?20,$$EXTERNAL^DILFD(9.4901,.02,"",$P(XPD,U,2)),?50,$$EXTERNAL^DILFD(9.4901,.03,"",$P(XPD,U,3))
"RTN","XPDDPCK",29,0)
 .I XPDFL W ! D DES("^DIC(9.4,"_XPD0_",22,"_XPDV_",""PAH"","_XPDI_",1)") 
"RTN","XPDDPCK",30,0)
 W ! Q
"RTN","XPDDPCK",31,0)
 ;
"RTN","XPDDPCK",32,0)
CHK(Y) ;Y=excess lines, return 1 to exit & DIRUT is set
"RTN","XPDDPCK",33,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDPCK",34,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDPCK",35,0)
 .N DIR,I,J,K,X
"RTN","XPDDPCK",36,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDPCK",37,0)
 S XPDPG=XPDPG+1
"RTN","XPDDPCK",38,0)
 W @IOF D HDR
"RTN","XPDDPCK",39,0)
 Q 0
"RTN","XPDDPCK",40,0)
 ;
"RTN","XPDDPCK",41,0)
DES(XPDGR) ;display description, XPDGR=global root
"RTN","XPDDPCK",42,0)
 N XPDI S XPDI=0
"RTN","XPDDPCK",43,0)
 F  S XPDI=$O(@XPDGR@(XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),! Q:$$CHK(4)
"RTN","XPDDPCK",44,0)
 Q
"RTN","XPDDPCK",45,0)
 ;
"RTN","XPDDPCK",46,0)
HDR W !,"PACKAGE: ",XPDNM,"     ",XPDDT,?70,"PAGE ",XPDPG,!,"PATCH #",?20,"INSTALLED",?50,"INSTALLED BY"
"RTN","XPDDPCK",47,0)
 W:XPDFL !?5,"DESCRIPTION"
"RTN","XPDDPCK",48,0)
 W !,XPDUL,!
"RTN","XPDDPCK",49,0)
 Q
"RTN","XPDE")
0^9^B38776536
"RTN","XPDE",1,0)
XPDE ;SFISC/RSD - Package Edit ;09/17/96  08:49
"RTN","XPDE",2,0)
 ;;8.0;KERNEL;**2,15,21,44**;Jul 10, 1995
"RTN","XPDE",3,0)
 Q
"RTN","XPDE",4,0)
 ;these tags are called from options.
"RTN","XPDE",5,0)
EDIT ;edit Build file package
"RTN","XPDE",6,0)
 N DA,DIR,DDSFILE,DR,Y,Z
"RTN","XPDE",7,0)
 Q:'$$DIC("AEMQLZ","",1)  S DA=+Y
"RTN","XPDE",8,0)
 I $P(Y,U,3) D NEW(DA)
"RTN","XPDE",9,0)
 S Z=$P(^XPD(9.6,DA,0),U,3)+1,DR="["_$P("XPD EDIT BUILD^XPD EDIT MP^XPD EDIT GP",U,Z)_"]",DDSFILE="^XPD(9.6,"
"RTN","XPDE",10,0)
 D ^DDS Q:'$G(DA)
"RTN","XPDE",11,0)
 ;if full DD, kill multiple for partial DD
"RTN","XPDE",12,0)
 S Y=0 F  S Y=$O(^XPD(9.6,DA,4,Y)) Q:'Y  S Z=$G(^(Y,222)) D
"RTN","XPDE",13,0)
 .K:$P(Z,U,3)="f" ^XPD(9.6,DA,4,Y,2),^XPD(9.6,DA,4,"APDD",Y)
"RTN","XPDE",14,0)
 D QUIT(DA)
"RTN","XPDE",15,0)
 Q
"RTN","XPDE",16,0)
COPY ;copy a Build file package
"RTN","XPDE",17,0)
 N DA,DIK,DIR,FR,FR0,TO,TO0,X,Y,Z W !
"RTN","XPDE",18,0)
 Q:'$$DIC("QEAMZ","Copy FROM what Package: ")
"RTN","XPDE",19,0)
 S FR=+Y,FR0=Y(0),Z="QEAMZL",Z("S")="I Y'="_FR
"RTN","XPDE",20,0)
 I '$$DIC(.Z,"Copy TO what Package: ") D QUIT(FR) Q
"RTN","XPDE",21,0)
 S TO=Y,TO0=Y(0)
"RTN","XPDE",22,0)
 ;if this is not new, then it will be purged before copy.
"RTN","XPDE",23,0)
 I '$P(TO,U,3) W !,$P(TO0,U)," package will be PURGED before the copy."
"RTN","XPDE",24,0)
 W ! S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",25,0)
 S DIK="^XPD(9.6,",DA=+TO
"RTN","XPDE",26,0)
 I 'Y!$D(DIRUT) D  W ! Q
"RTN","XPDE",27,0)
 .;they didn't want to continue, kill if it was a new package.
"RTN","XPDE",28,0)
 .I $P(TO,U,3) D ^DIK W $P(TO0,U)," being deleted!"
"RTN","XPDE",29,0)
 .;unlock both packages
"RTN","XPDE",30,0)
 .D QUIT(FR),QUIT(TO)
"RTN","XPDE",31,0)
 D WAIT^DICD
"RTN","XPDE",32,0)
 ;if not new, kill old data
"RTN","XPDE",33,0)
 K:'$P(TO,U,3) ^XPD(9.6,DA)
"RTN","XPDE",34,0)
 M ^XPD(9.6,DA)=^XPD(9.6,FR) S $P(^(DA,0),U)=$P(TO0,U)
"RTN","XPDE",35,0)
 D NEW(+TO)
"RTN","XPDE",36,0)
 ;if new National Package name, then kill x-ref
"RTN","XPDE",37,0)
 I $P(TO0,U,2)]"",$P(FR0,U,2)'=$P(TO0,U,2) K ^XPD(9.6,"C",$E($P(TO0,U,2),1,30),DA) S DIK(1)=1 D EN1^DIK
"RTN","XPDE",38,0)
 D QUIT(FR),QUIT(TO)
"RTN","XPDE",39,0)
 W "...Done.",!
"RTN","XPDE",40,0)
 Q
"RTN","XPDE",41,0)
BUILD ;build package from a namespace
"RTN","XPDE",42,0)
 N DIR,DIRUT,XPDA,XPDI,XPDF,XPDN,XPDX,X,X1,Y,Y1 W !
"RTN","XPDE",43,0)
 Q:'$$DIC("QEAML")
"RTN","XPDE",44,0)
 S XPDA=+Y W !
"RTN","XPDE",45,0)
 I $P(^XPD(9.6,XPDA,0),U,3) W !,"The Build Type must be SINGLE PACKAGE!!",! Q
"RTN","XPDE",46,0)
 ;if not a new package
"RTN","XPDE",47,0)
 I '$P(Y,U,3) D  I $D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",48,0)
 .S DIR(0)="Y",DIR("A")="Package already exists, Want to PURGE the existing data",DIR("B")="NO",DIR("?")="YES will delete all the KERNEL FILE information for this package in the BUILD file."
"RTN","XPDE",49,0)
 .D ^DIR K DIR Q:'Y
"RTN","XPDE",50,0)
 .S Y=0 F  S Y=$O(^XPD(9.6,XPDA,"KRN",Y)) Q:'Y  K ^(Y,"NM")
"RTN","XPDE",51,0)
 E  D NEW(XPDA)
"RTN","XPDE",52,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDE",53,0)
 W ! S DIR(0)="FO^1:15^K:X'?.1""-""1U.15UNP X",DIR("A")="Namespace",DIR("?")="Enter 1 to 15 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDE",54,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDE",55,0)
 I '$D(XPDN)!$D(DTOUT)!$D(DUOUT) D QUIT(XPDA) Q
"RTN","XPDE",56,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDE",57,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDE",58,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDE",59,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDE",60,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",61,0)
 I 'Y!$D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",62,0)
 D WAIT^DICD S XPDX="",XPDI("IEN")=0
"RTN","XPDE",63,0)
 F  S XPDX=$O(XPDN(1,XPDX)),XPDF=0 Q:XPDX=""  D
"RTN","XPDE",64,0)
 .F  S XPDF=$O(^XPD(9.6,XPDA,"KRN",XPDF)) Q:'XPDF  D
"RTN","XPDE",65,0)
 ..N XPD,XPDIC,XPDJ W "."
"RTN","XPDE",66,0)
 ..;XPDIC is used in $$SCR1^XPDET
"RTN","XPDE",67,0)
 ..S XPDIC="^XPD(9.6,"_XPDA_",""KRN"","_XPDF_",""NM"","
"RTN","XPDE",68,0)
 ..D LIST^DIC(XPDF,"","","","*",.XPDI,XPDX,"","I $$SCR1^XPDET(Y)")
"RTN","XPDE",69,0)
 ..F XPDJ=1:1 S X=$G(^TMP("DILIST",$J,1,XPDJ)) Q:X=""  D
"RTN","XPDE",70,0)
 ...S:XPDF<.404 %=^TMP("DILIST",$J,2,XPDJ)_",",X=$$TX^XPDET(X,$$GET1^DIQ(XPDF,%,$$TF^XPDET(XPDF),"I"))
"RTN","XPDE",71,0)
 ...S Y="+"_XPDJ_","_XPDF_","_XPDA_",",XPD(9.68,Y,.01)=X,XPD(9.68,Y,.03)=0
"RTN","XPDE",72,0)
 ..Q:'$D(XPD)  D UPDATE^DIE("","XPD")
"RTN","XPDE",73,0)
 D QUIT(XPDA)
"RTN","XPDE",74,0)
 W "...Done.",!
"RTN","XPDE",75,0)
 Q
"RTN","XPDE",76,0)
VER ;verify a Build file package
"RTN","XPDE",77,0)
 N XPDA,Y
"RTN","XPDE",78,0)
 Q:'$$DIC("AEMQZ")  S XPDA=+Y
"RTN","XPDE",79,0)
 D EN^XPDV
"RTN","XPDE",80,0)
 Q
"RTN","XPDE",81,0)
DIC(DIC,A,XPDL) ;DIC lookup to Build file, 9.6
"RTN","XPDE",82,0)
 N DLAYGO
"RTN","XPDE",83,0)
 S DIC(0)=$G(DIC),DIC="^XPD(9.6," S:$G(A)]"" DIC("A")=A
"RTN","XPDE",84,0)
 S:DIC(0)["L" DLAYGO=9.6,DIC("DR")="1;2//SINGLE PACKAGE"
"RTN","XPDE",85,0)
 D ^DIC Q:Y<0 0
"RTN","XPDE",86,0)
 I '$G(XPDL) L +^XPD(9.6,+Y):0 E  W !,"Being accessed by another user" Q 0
"RTN","XPDE",87,0)
 Q +Y
"RTN","XPDE",88,0)
 ;
"RTN","XPDE",89,0)
NEW(DA) ;create Kernel Files multiple for package DA
"RTN","XPDE",90,0)
 N I,J,X,XPDNEWF,XPD,XPDI
"RTN","XPDE",91,0)
 S:'$D(^XPD(9.6,DA,"KRN",0)) ^XPD(9.6,DA,"KRN",0)=U_$P(^DD(9.6,7,0),U,2)
"RTN","XPDE",92,0)
 S I=0
"RTN","XPDE",93,0)
 F J=1:1 S X=+$P($T(FILES+J),";;",2) Q:'X  S:$D(^DD(X))&'$D(^XPD(9.6,DA,"KRN",X)) I=I+1,(XPDI(I),XPD(9.67,"+"_I_","_DA_",",.01))=X
"RTN","XPDE",94,0)
 Q:'$D(XPD)
"RTN","XPDE",95,0)
 ;XPDNEWF is a flag in INPUT transform of BUILD COMPONENT multiple
"RTN","XPDE",96,0)
 S XPDNEWF=1
"RTN","XPDE",97,0)
 D UPDATE^DIE("","XPD","XPDI")
"RTN","XPDE",98,0)
 Q
"RTN","XPDE",99,0)
QUIT(Y) ;unlock Y
"RTN","XPDE",100,0)
 L -^XPD(9.6,Y)
"RTN","XPDE",101,0)
 Q
"RTN","XPDE",102,0)
 ;
"RTN","XPDE",103,0)
 ;;file;install order;x-ref;file build;entry build;file pre;entry pre;file post;entry post;delete
"RTN","XPDE",104,0)
FILES ;kernel files for field 7 in file 9.6
"RTN","XPDE",105,0)
 ;;9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"RTN","XPDE",106,0)
 ;;9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"RTN","XPDE",107,0)
 ;;3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"RTN","XPDE",108,0)
 ;;19.1;3;1;;KEY^XPDTA1;;;;;KEYDEL^XPDIA1
"RTN","XPDE",109,0)
 ;;.5;4;;;EDEOUT^DIFROMSO(.5,DA,"",XPDA);FPRE^DIFROMSI(.5,"",XPDA);EPRE^DIFROMSI(.5,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.5,DA,"",XPDA)
"RTN","XPDE",110,0)
 ;;.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"RTN","XPDE",111,0)
 ;;.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"RTN","XPDE",112,0)
 ;;.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"RTN","XPDE",113,0)
 ;;.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"RTN","XPDE",114,0)
 ;;.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"RTN","XPDE",115,0)
 ;;3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1
"RTN","XPDE",116,0)
 ;;869.2;12;;;HLLLP^XPDTA1;;HLLLPE^XPDIA1
"RTN","XPDE",117,0)
 ;;870;13;;;HLLL^XPDTA1;;HLLLE^XPDIA1
"RTN","XPDE",118,0)
 ;;771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1
"RTN","XPDE",119,0)
 ;;101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"RTN","XPDE",120,0)
 ;;8994;16;1;;;;;;;RPCDEL^XPDIA1
"RTN","XPDE",121,0)
 ;;409.61;17;1;;;;;;;LMDEL^XPDIA1
"RTN","XPDE",122,0)
 ;;19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"RTN","XPDER")
0^3^B13331876
"RTN","XPDER",1,0)
XPDER ;SFISC/RSD - Rollup Patches into Build ;09/13/96  09:04
"RTN","XPDER",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XPDER",3,0)
EN1 ;rollup patches into new build
"RTN","XPDER",4,0)
 N DIR,DIRUT,XPD,XPDA,XPDIT,XPDF,XPDFL,XPDJ,XPDNM,XPDVER,XPDPKG,XPDT,XPDY,X,Y,Z W !
"RTN","XPDER",5,0)
 ;only find Single packages, not patches, that have a Package file link
"RTN","XPDER",6,0)
 S Z="AEMQZ",Z("S")="S %=$G(^(0)) I $P(%,U)'[""*"",$D(^DIC(9.4,+$P(%,U,2),0)),'$P(%,U,3)"
"RTN","XPDER",7,0)
 Q:'$$DIC^XPDE(.Z,"Rollup patches into Build: ")
"RTN","XPDER",8,0)
 S XPDA=+Y,XPDNM=$P(Y(0),U),XPDPKG=+$P(Y(0),U,2),XPDVER=$$VER^XPDUTL(XPDNM)
"RTN","XPDER",9,0)
 ;check if package contains patches
"RTN","XPDER",10,0)
 S (Y,Z)=0
"RTN","XPDER",11,0)
 F  S Y=$O(^XPD(9.6,XPDA,10,Y)) Q:'Y  S X=^(Y,0) D
"RTN","XPDER",12,0)
 .I 'Z W !,"This package already contains the following patches:" S Z=1
"RTN","XPDER",13,0)
 .W !?3,X
"RTN","XPDER",14,0)
 W !!,"The following patches can be rolled into Package ",XPDNM,!
"RTN","XPDER",15,0)
 S X=0 F  S X=$O(^XPD(9.6,"C",XPDPKG,X)) Q:'X  D
"RTN","XPDER",16,0)
 .Q:'$D(^XPD(9.6,X,0))  S Y=$P(^(0),U)
"RTN","XPDER",17,0)
 .I $P(Y,"*",2)=XPDVER,'$D(^XPD(9.6,XPDA,10,"B",Y))  S XPDT(X)=Y W ?5,Y,!
"RTN","XPDER",18,0)
 I '$D(XPDT) W !!,"No patches exist" D QUIT^XPDE(XPDA) Q
"RTN","XPDER",19,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDER",20,0)
 I 'Y!$D(DIRUT) D QUIT^XPDE(XPDA) W ! Q
"RTN","XPDER",21,0)
 D WAIT^DICD S XPDIT=0
"RTN","XPDER",22,0)
 F  S XPDIT=$O(XPDT(XPDIT)),(XPDF,XPDFL)=0 Q:'XPDIT  D
"RTN","XPDER",23,0)
 .;loop through Files
"RTN","XPDER",24,0)
 .N DA,DIK
"RTN","XPDER",25,0)
 .F  W "." S XPDF=$O(^XPD(9.6,XPDIT,4,XPDF)) Q:'XPDF  K XPD M XPD(XPDF)=^(XPDF) D
"RTN","XPDER",26,0)
 ..;if file doesn't exist in original build
"RTN","XPDER",27,0)
 ..I '$D(^XPD(9.6,XPDA,4,XPDF)) M ^(XPDF)=XPD(XPDF) S XPDFL=1 Q
"RTN","XPDER",28,0)
 ..S Y=$G(^XPD(9.6,XPDA,4,XPDF,222))
"RTN","XPDER",29,0)
 ..;if original is a full DD do nothing
"RTN","XPDER",30,0)
 ..I $P(Y,U,3)="f" K XPD(XPDF) Q
"RTN","XPDER",31,0)
 ..I $P($G(XPD(XPDF,222)),U,3)="f" K ^XPD(9.6,XPDA,4,XPDF) M ^(XPDF)=XPD(XPDF) S XPDFL=1 Q
"RTN","XPDER",32,0)
 ..;since it must be a partial, don't need these nodes
"RTN","XPDER",33,0)
 ..K XPD(XPDF,0),XPD(XPDF,222),XPD(XPDF,223),XPD(XPDF,224)
"RTN","XPDER",34,0)
 ..S XPDJ=0
"RTN","XPDER",35,0)
 ..;loop thru incoming partial subDD's
"RTN","XPDER",36,0)
 ..F  S XPDJ=$O(XPD(XPDF,2,XPDJ)) Q:'XPDJ  D
"RTN","XPDER",37,0)
 ...;if original has this subDD and doesn't have any field, then it is taking the entire subDD, so don't care about incoming
"RTN","XPDER",38,0)
 ...I '$D(^XPD(9.6,XPDA,4,XPDF,2,XPDJ)) M ^(XPDJ)=XPD(XPDF,2,XPDJ) Q
"RTN","XPDER",39,0)
 ...I '$O(^XPD(9.6,XPDA,4,XPDF,2,XPDJ,1,0)) K XPD(XPDF,2,XPDJ) Q
"RTN","XPDER",40,0)
 ...S XPDY=0
"RTN","XPDER",41,0)
 ...F  S XPDY=$O(XPD(XPDF,2,XPDJ,1,XPDY)) Q:'XPDY  D
"RTN","XPDER",42,0)
 ....I $D(^XPD(9.6,XPDA,4,XPDF,2,XPDJ,1,XPDY)) K XPD(XPDF,2,XPDJ,1,XPDY) Q
"RTN","XPDER",43,0)
 ....M ^XPD(9.6,XPDA,4,XPDF,2,XPDJ,1,XPDY)=XPD(XPDF,2,XPDJ,1,XPDY)
"RTN","XPDER",44,0)
 ...Q:'$O(XPD(XPDF,2,XPDJ,1,0))
"RTN","XPDER",45,0)
 ...K DA,XPD(XPDF,2,XPDJ)
"RTN","XPDER",46,0)
 ...S DA(3)=XPDA,DA(2)=XPDF,DA(1)=XPDJ,DIK="^XPD(9.6,"_XPDA_",4,"_XPDF_",2,"_XPDJ_",1," D IXALL^DIK
"RTN","XPDER",47,0)
 ..Q:'$O(XPD(XPDF,2,0))
"RTN","XPDER",48,0)
 ..K DA,XPD(XPDF)
"RTN","XPDER",49,0)
 ..S DA(2)=XPDA,DA(1)=XPDF,DIK="^XPD(9.6,"_XPDA_",4,"_XPDF_",2," D IXALL^DIK
"RTN","XPDER",50,0)
 .;XPDFL=1 if we merged data into node 4 at top level
"RTN","XPDER",51,0)
 .I XPDFL K DA S DA(1)=XPDA,DIK="^XPD(9.6,"_XPDA_",4," D IXALL^DIK
"RTN","XPDER",52,0)
 .;loop through Build Components
"RTN","XPDER",53,0)
 .S XPDF=0 F  S XPDF=$O(^XPD(9.6,XPDIT,"KRN",XPDF)) Q:'XPDF  D
"RTN","XPDER",54,0)
 ..K XPD S (XPDJ,XPDY)=0 W "."
"RTN","XPDER",55,0)
 ..F  S XPDY=$O(^XPD(9.6,XPDIT,"KRN",XPDF,"NM",XPDY)) Q:XPDY=""  S XPDX=$G(^(XPDY,0)) D:$P(XPDX,U)]""
"RTN","XPDER",56,0)
 ...;quit if components exist in original build
"RTN","XPDER",57,0)
 ...Q:$D(^XPD(9.6,XPDA,"KRN",XPDF,"NM","B",$P(XPDX,U)))
"RTN","XPDER",58,0)
 ...S XPDJ=XPDJ+1,Y="+"_XPDJ_","_XPDF_","_XPDA_",",XPD(9.68,Y,.01)=$P(XPDX,U),XPD(9.68,Y,.03)=$P(XPDX,U,3)
"RTN","XPDER",59,0)
 ..Q:'$D(XPD)  D UPDATE^DIE("","XPD")
"RTN","XPDER",60,0)
 .;put patch in mulitple
"RTN","XPDER",61,0)
 .K XPD S XPD(9.63,"+1,"_XPDA_",",.01)=XPDT(XPDIT)
"RTN","XPDER",62,0)
 .D UPDATE^DIE("","XPD")
"RTN","XPDER",63,0)
 D QUIT^XPDE(XPDA) W "...Done.",!
"RTN","XPDER",64,0)
 Q
"RTN","XPDET")
0^4^B26193773
"RTN","XPDET",1,0)
XPDET ;SFISC/RSD - Input tranforms & help for file 9.6 & 9.7 ;10/09/96  09:35
"RTN","XPDET",2,0)
 ;;8.0;KERNEL;**15,39,41,44**;Jul 10, 1995
"RTN","XPDET",3,0)
 Q
"RTN","XPDET",4,0)
INPUTB(X) ;input tranfrom for NAME in BUILD file
"RTN","XPDET",5,0)
 ;X=user input
"RTN","XPDET",6,0)
 ;name must be unique
"RTN","XPDET",7,0)
 I $L(X)>50!($L(X)<3)!$D(^XPD(9.6,"B",X)) K X Q
"RTN","XPDET",8,0)
 I X["*" K:$P(X,"*",2,3)'?1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.3N X Q
"RTN","XPDET",9,0)
 S %=$L(X," ") I %<2 K X Q
"RTN","XPDET",10,0)
 S %=$P(X," ",%) K:%'?1.2N1"."1.2N.1(1"V",1"T").2N X
"RTN","XPDET",11,0)
 Q
"RTN","XPDET",12,0)
INPUTE(X) ;input transform for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",13,0)
 ;X=user input
"RTN","XPDET",14,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,XPDLK,Y
"RTN","XPDET",15,0)
 S XPDLK=$$GR(D1)
"RTN","XPDET",16,0)
 I XPDLK=""!X["*" K X Q
"RTN","XPDET",17,0)
 S DIC(0)="QEMZ",DIC=XPDLK
"RTN","XPDET",18,0)
 S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",19,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",20,0)
 S X=Y(0,0)
"RTN","XPDET",21,0)
 ;check that this doesn't exist already
"RTN","XPDET",22,0)
 I $D(^XPD(9.6,D0,"KRN",D1,"NM","B",X)) K X Q
"RTN","XPDET",23,0)
 ;if fm file, change X to contain file # of template
"RTN","XPDET",24,0)
 I D1<.404 S X=$$TX(X,$P(Y(0),U,$S(D1=.403:8,1:4)))
"RTN","XPDET",25,0)
 Q
"RTN","XPDET",26,0)
GLOBALE(X) ;input transform for GLOBAL multiple .01 field in file 9.6
"RTN","XPDET",27,0)
 I $L(X)>30!($L(X)<2) K X Q
"RTN","XPDET",28,0)
 I X["(",X'[")" K X Q
"RTN","XPDET",29,0)
 ;change ' back to " for subscripts, they were changed in the Pre-Lookup node of the DD, 7.5. This was done to trick FM, which doesn't allow " in .01 fields
"RTN","XPDET",30,0)
 S X=$TR(X,"'","""")
"RTN","XPDET",31,0)
 I '$D(@("^"_X)) K X
"RTN","XPDET",32,0)
 Q
"RTN","XPDET",33,0)
INPUTMB(X) ;input transform for field 10 and 11 in file 9.6
"RTN","XPDET",34,0)
 ;X=user input
"RTN","XPDET",35,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,Y
"RTN","XPDET",36,0)
 ;can't select a global or multi package or itself (D0)
"RTN","XPDET",37,0)
 S DIC(0)="QEMZ",DIC="^XPD(9.6,",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",38,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",39,0)
 S X=Y(0,0)
"RTN","XPDET",40,0)
 Q
"RTN","XPDET",41,0)
LOOKE(X) ;special lookup for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",42,0)
 Q:X'?1.E1"*"
"RTN","XPDET",43,0)
 N %,XPD,XPDI,XPDIC,XPDF,XPDLK,XPDX,Y
"RTN","XPDET",44,0)
 S XPDLK=$$GR(D1),XPDIC=DIC,XPDF=D1
"RTN","XPDET",45,0)
 I XPDLK="" K X Q
"RTN","XPDET",46,0)
 G:$E(X)="-" DEL
"RTN","XPDET",47,0)
 S XPDX=$P(X,"*"),XPDI("IEN")=0
"RTN","XPDET",48,0)
 D LIST^DIC(D1,"","","","*",.XPDI,XPDX,"","I $$SCR^XPDET(Y)")
"RTN","XPDET",49,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",50,0)
 K ^TMP("XPDX",$J)
"RTN","XPDET",51,0)
 ;loop thru list from lister and file using UPDATE^DIE
"RTN","XPDET",52,0)
 F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDET",53,0)
 .S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX(X,$$GET1^DIQ(D1,%,$$TF(D1),"I"))
"RTN","XPDET",54,0)
 .S Y="+"_XPDI_","_D1_","_D0_",",^TMP("XPDX",$J,9.68,Y,.01)=X,^(.03)=0
"RTN","XPDET",55,0)
 I $D(^TMP("XPDX",$J)) D UPDATE^DIE("","^TMP(""XPDX"",$J)","^TMP(""XPD"",$J)")
"RTN","XPDET",56,0)
 ;if in Screenman then call MLOAD to update screen
"RTN","XPDET",57,0)
 I $D(DDS),$D(^TMP("XPD",$J)) D MLOAD^DDSUTL("^TMP(""XPD"",$J)")
"RTN","XPDET",58,0)
 S X=""
"RTN","XPDET",59,0)
 K ^TMP("XPDX",$J),^TMP("XPD",$J)
"RTN","XPDET",60,0)
 Q
"RTN","XPDET",61,0)
DEL ;delete using wild card
"RTN","XPDET",62,0)
 I X'?1"-"1.E1"*" K X Q
"RTN","XPDET",63,0)
 S X=$E(X,2,$L(X)-1),XPDX=X S:$L(X) XPDI("IEN")=0
"RTN","XPDET",64,0)
 D LIST^DIC(9.68,","_D1_","_D0_",","","","*",.XPDI,XPDX)
"RTN","XPDET",65,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",66,0)
 N DIK,DA,D2
"RTN","XPDET",67,0)
 S DIK=XPDIC,DA(1)=D1,DA(2)=D0
"RTN","XPDET",68,0)
 F XPDI=1:1 S (DA,D2)=$G(^TMP("DILIST",$J,2,XPDI)) Q:'DA  D
"RTN","XPDET",69,0)
 .D ^DIK
"RTN","XPDET",70,0)
 I $D(DDS) D MDEL^DDSUTL("^TMP(""DILIST"",$J,2)")
"RTN","XPDET",71,0)
 S X=""
"RTN","XPDET",72,0)
 K ^TMP("DILIST",$J)
"RTN","XPDET",73,0)
 Q
"RTN","XPDET",74,0)
HELP ;executable help of ENTRIES in KERNEL FILE multiple
"RTN","XPDET",75,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",76,0)
 ;file 9.8 is routine file, check that routine exists
"RTN","XPDET",77,0)
 S DIC=$$GR(D1),DIC(0)="M",X="??" Q:DIC=""  S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",78,0)
 D ^DIC Q
"RTN","XPDET",79,0)
 ;
"RTN","XPDET",80,0)
HELPO ;executable help of INSTALL ORDER in KERNEL FILES multiple
"RTN","XPDET",81,0)
 N Y
"RTN","XPDET",82,0)
 W !,"Numbers in use:  ORDER     FILE#" S Y=0
"RTN","XPDET",83,0)
 F  S Y=$O(^XPD(9.6,D0,"KRN","AC",Y)) Q:'Y  W !,?18,$J(Y,2),?28,$O(^(Y,0))
"RTN","XPDET",84,0)
 W ! Q
"RTN","XPDET",85,0)
 ;
"RTN","XPDET",86,0)
HELPMB ;executable help of fields 10 & 11 in file 9.6
"RTN","XPDET",87,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",88,0)
 S DIC="^XPD(9.6,",DIC(0)="M",X="??",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",89,0)
 D ^DIC Q
"RTN","XPDET",90,0)
 ;
"RTN","XPDET",91,0)
SCRA(Y) ;screen of ACTION field in ENTRIES multiple in KERNEL FILES multiple, Y=action
"RTN","XPDET",92,0)
 ;Y=0 - send, 1 - delete, 2 - link, 3 - merge
"RTN","XPDET",93,0)
 ;all files can send to site
"RTN","XPDET",94,0)
 Q:'Y 1
"RTN","XPDET",95,0)
 ;.5=function file, can't delete, all others can
"RTN","XPDET",96,0)
 I Y=1 Q (D1'=.5)
"RTN","XPDET",97,0)
 ;then rest of code check if it is a Option or Protocal and can have MENU ITEMS
"RTN","XPDET",98,0)
 Q:D1'=19&(D1'=101) 0
"RTN","XPDET",99,0)
 N FGR,X
"RTN","XPDET",100,0)
 S X=$P(^XPD(9.6,D0,"KRN",D1,"NM",D2,0),U),FGR=$$FILE^XPDV(D1)
"RTN","XPDET",101,0)
 Q:X="" 0
"RTN","XPDET",102,0)
 S X=+$O(@FGR@("B",X,0))
"RTN","XPDET",103,0)
 ;if it has ITEMs, node 10 then ok
"RTN","XPDET",104,0)
 I $O(@FGR@(X,10,0)) Q 1
"RTN","XPDET",105,0)
 ;if type is menu,potocol,protocol menu,limited,extended,window suite
"RTN","XPDET",106,0)
 I "MOQLXZ"[$P($G(@FGR@(X,0)),U,4) Q 1
"RTN","XPDET",107,0)
 Q 0
"RTN","XPDET",108,0)
 ;
"RTN","XPDET",109,0)
 ;only Fileman templates need to know what file they are associated with.
"RTN","XPDET",110,0)
 ;this value is also triggered to field .02 in the DD.
"RTN","XPDET",111,0)
TX(X,Y) ;X=template name, Y=file #
"RTN","XPDET",112,0)
 Q X_"    FILE #"_Y
"RTN","XPDET",113,0)
 ;
"RTN","XPDET",114,0)
TF(F) ;F=file, return field of file# for templates
"RTN","XPDET",115,0)
 Q $S(F>.403:"",F<.403:4,1:7)
"RTN","XPDET",116,0)
 ;
"RTN","XPDET",117,0)
GR(X) Q $G(^DIC(X,0,"GL"))
"RTN","XPDET",118,0)
 ;
"RTN","XPDET",119,0)
 ;screens checks that X is not already in the ENTRIES multiple
"RTN","XPDET",120,0)
SCR(Y) ;screen logic for ENTRIES multiple in file 9.6
"RTN","XPDET",121,0)
 N %,X,Z
"RTN","XPDET",122,0)
 S Z=^(0),X=$P(Z,U)
"RTN","XPDET",123,0)
 ;FM files are less than .44
"RTN","XPDET",124,0)
 I XPDF<.44 D  Q:X="" 0
"RTN","XPDET",125,0)
 .S %=$S(XPDF=.403:$P(Z,U,8),1:$P(Z,U,4)),X=X_"    FILE #"_%
"RTN","XPDET",126,0)
 .S:XPDF'=.403&($P(Z,U,8)>2) %=0 S:'% X=""
"RTN","XPDET",127,0)
 ;routine must exist and must be type 'R'
"RTN","XPDET",128,0)
 I XPDF=9.8 Q:$T(^@X)=""!($P(Z,U,2)'="R") 0
"RTN","XPDET",129,0)
 Q '$D(@(XPDIC_"""B"",X)"))
"RTN","XPDET",130,0)
 ;
"RTN","XPDET",131,0)
 ;screen checks that X is not in the exclude list, XPDN(0)
"RTN","XPDET",132,0)
SCR1(Y) ;screen logic for exclude list
"RTN","XPDET",133,0)
 N %,X
"RTN","XPDET",134,0)
 ;if name X is in the exclude list, XPDN(0,X), then fail
"RTN","XPDET",135,0)
 S Y(0)=^(0),X=$P(Y(0),U) Q:$D(XPDN(0,X)) 0
"RTN","XPDET",136,0)
 ;check if X is refered in the namespace by check the subscript
"RTN","XPDET",137,0)
 ;before X, if sub exist and $P(X,sub)="" then it is part of the
"RTN","XPDET",138,0)
 ;namespace, fail and return 0
"RTN","XPDET",139,0)
 S %=$O(XPDN(0,X),-1) I $L(%) Q:$P(X,%)="" 0
"RTN","XPDET",140,0)
 Q $$SCR(.Y)
"RTN","XPDET",141,0)
 ;
"RTN","XPDET",142,0)
 ;screen on PACKAGE LINK field in file 9.6,
"RTN","XPDET",143,0)
PCK(Y) ;check Package File name, Y=ien in package file
"RTN","XPDET",144,0)
 N %,Y,Z
"RTN","XPDET",145,0)
 S Z=^(0)
"RTN","XPDET",146,0)
 ;DA is undef when you are adding a new Build without a version number
"RTN","XPDET",147,0)
 Q:'$D(^XPD(9.6,+$G(DA),0)) 1
"RTN","XPDET",148,0)
 S Y=$L($P(Z,U)),%=$P(^XPD(9.6,DA,0),U),%=$$PKG^XPDUTL(%)
"RTN","XPDET",149,0)
 Q $P(Z,U)=$E(%,1,Y)!($P(Z,U,2)=%)
"RTN","XPDET",150,0)
VOLE(X) ;input transform for VOLUME SET multiple in INSTALL file
"RTN","XPDET",151,0)
 ;X=user input
"RTN","XPDET",152,0)
 N D,DD,DIC,DICR,DIX,DIY,DO,DS,XPD,Y,%
"RTN","XPDET",153,0)
 ;(0;11)=SIGNON/PRODUCTION
"RTN","XPDET",154,0)
 S DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",155,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",156,0)
 S X=Y(0,0)
"RTN","XPDET",157,0)
 Q
"RTN","XPDET",158,0)
VOLH ;executable help for VOLUME SET multiple in INSTALL file
"RTN","XPDET",159,0)
 N D,DD,DIC,DIE,DIX,DIY,DO,DS,DZ,X,Y,%
"RTN","XPDET",160,0)
 S X="??",DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",161,0)
 D ^DIC
"RTN","XPDET",162,0)
 Q
"RTN","XPDET",163,0)
ID97 ;identifier for Install file
"RTN","XPDET",164,0)
 N XPDET,XPD,XPD0,XPD1,XPD2,XPD9
"RTN","XPDET",165,0)
 S XPD0=$G(^(0)),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD9=$P(XPD0,U,9),XPD="" Q:XPD9=""
"RTN","XPDET",166,0)
 D
"RTN","XPDET",167,0)
 .;Loaded, get DATE LOADED
"RTN","XPDET",168,0)
 .I 'XPD9 S XPD=$$FMTE^XLFDT($P(XPD0,U,3),2) Q
"RTN","XPDET",169,0)
 .Q:XPD9>3
"RTN","XPDET",170,0)
 .;Started, get INSTALL START TIME
"RTN","XPDET",171,0)
 .I XPD9=2 S XPD=$$FMTE^XLFDT($P(XPD1,U),2) Q
"RTN","XPDET",172,0)
 .;Completed, get INSTALL COMPLETE TIME
"RTN","XPDET",173,0)
 .I XPD9=3 S XPD=$$FMTE^XLFDT($P(XPD1,U,3),2) Q
"RTN","XPDET",174,0)
 .;Queued, get QUEUED TASK NUMBER
"RTN","XPDET",175,0)
 .I XPD9=1 S XPD="#"_$P(XPD0,U,6) Q
"RTN","XPDET",176,0)
 S XPDET(1)="   "_$$EXTERNAL^DILFD(9.7,.02,"",XPD9)_"  "_XPD,XPDET(1,"F")="?0"
"RTN","XPDET",177,0)
 S:XPD2]"" XPDET(2)="=> "_$E(XPD2,1,70),XPDET(2,"F")="!?5"
"RTN","XPDET",178,0)
 D EN^DDIOL(.XPDET)
"RTN","XPDET",179,0)
 Q
"RTN","XPDET",180,0)
 ;not being used right now,
"RTN","XPDET",181,0)
DEL(Y) ;delete access to file 9.7, 0-can't delete, 1-can
"RTN","XPDET",182,0)
 N %
"RTN","XPDET",183,0)
 S %=$P(^XPD(9.7,Y,0),U,9)
"RTN","XPDET",184,0)
 Q $S(%=3:1,%=2:0,$D(^XPD(9.7,"ASP",Y,1,Y)):1,1:0)
"RTN","XPDI")
0^6^B58877321
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;09/19/96  10:15
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21,39,41,44**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDIT,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDI",7,0)
 S XPDIT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U) K ^TMP($J)
"RTN","XPDI",8,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  D  Q:'$D(XPDT)!$D(XPDQUIT)
"RTN","XPDI",9,0)
 .S XPDA=+XPDT(XPDIT),XPDNM=$P(XPDT(XPDIT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDIT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",10,0)
 .W !?3,XPDNM
"RTN","XPDI",11,0)
 .;check that Install file was created correctly
"RTN","XPDI",12,0)
 .I '$D(^XPD(9.7,XPDA,"INI"))!'$D(^("INIT")) W !,"**INSTALL FILE IS CORRUPTED**",!,*7 S XPDQUIT=1 Q
"RTN","XPDI",13,0)
 .;run enviroment check routine
"RTN","XPDI",14,0)
 .Q:$$ENV^XPDIL1(1)
"RTN","XPDI",15,0)
 .D QUES(XPDA) Q:'$D(XPDT(+XPDIT))!$D(XPDQUIT)
"RTN","XPDI",16,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",17,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",18,0)
 .D XQSET(XPDA)
"RTN","XPDI",19,0)
 ;NONE = no Build to install
"RTN","XPDI",20,0)
 G NONE:'$O(XPDT(""))!$D(XPDQUIT)
"RTN","XPDI",21,0)
 ;check that we have all Builds to install
"RTN","XPDI",22,0)
 S XPDA=XPDST,XPDNM=XPDSET,Y=0
"RTN","XPDI",23,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=+$O(^(Y,0)) I '$D(XPDT("DA",%)) G NONE
"RTN","XPDI",24,0)
 W !
"RTN","XPDI",25,0)
 ;disable options question
"RTN","XPDI",26,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",27,0)
 ;XPDSET=set name,also build name, of options that will be disabled
"RTN","XPDI",28,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",29,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",30,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",31,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",32,0)
 .S ^XTMP("XQOO",XPDSET,0)=XPDSET_$C(9)_"being installed^"_DT_U_DUZ
"RTN","XPDI",33,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",34,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",35,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",36,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",37,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",38,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",39,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",40,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",41,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",42,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",43,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",44,0)
 ;check if they want to update other CPUs
"RTN","XPDI",45,0)
 I $G(XPDQUES("XPZ2")) D  I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",46,0)
 .N DA,DIE,DIR,DR,I,XPD,X,Y,Z
"RTN","XPDI",47,0)
 .;if they haven't already added Volume Sets, populate the mulitple
"RTN","XPDI",48,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) D  I $D(XPD) D UPDATE^DIE("","XPD")
"RTN","XPDI",49,0)
 ..X ^%ZOSF("UCI") S Y=$P(Y,",",2),(I,Z)=0
"RTN","XPDI",50,0)
 ..F  S I=$O(^%ZIS(14.5,I)) Q:'I  S X=$G(^(I,0)) S:$P(X,U)]""&$P(X,U,11)&($P(X,U)'=Y) Z=Z+1,XPD(9.703,"+"_Z_","_XPDA_",",.01)=$P(X,U)
"RTN","XPDI",51,0)
 .W !!,"I will Update the following VOLUME SETS:",!
"RTN","XPDI",52,0)
 .S I=0 F  S I=$O(^XPD(9.7,XPDA,"VOL",I)) Q:'I  W ?3,$P(^(I,0),U),!
"RTN","XPDI",53,0)
 .W ! S DIR(0)="Y",DIR("A")="Want to edit this list",DIR("B")="NO"
"RTN","XPDI",54,0)
 .D ^DIR Q:$D(DIRUT)  D:Y
"RTN","XPDI",55,0)
 ..S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",56,0)
 ..D ^DIE
"RTN","XPDI",57,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",58,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",59,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",60,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",61,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",62,0)
 ;check if home device is defined
"RTN","XPDI",63,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",64,0)
 ;Kernel Virgin Install
"RTN","XPDI",65,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",66,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",67,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",68,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",69,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",70,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",71,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",72,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",73,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",74,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",75,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0,XPDIJ:$G(XPDIJ) Q
"RTN","XPDI",76,0)
 .N %DT
"RTN","XPDI",77,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",78,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",79,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",80,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",81,0)
 ..S Y=-1
"RTN","XPDI",82,0)
 .Q:$D(DTOUT)
"RTN","XPDI",83,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",84,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",85,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",86,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",87,0)
 .;save task into first Build
"RTN","XPDI",88,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDIT=0
"RTN","XPDI",89,0)
 .F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPD(9.7,+XPDT(XPDIT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",90,0)
 ;run install
"RTN","XPDI",91,0)
 U IO D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",92,0)
 Q
"RTN","XPDI",93,0)
QUES(XPDA) ;install questions; XPDA=ien in file 9.7
"RTN","XPDI",94,0)
 N XPDANS,XPDFIL,XPDFILN,XPDFILO,XPDNM,XPDQUES,X,Y
"RTN","XPDI",95,0)
 S XPDNM=$P(^XPD(9.7,XPDA,0),U) W !!,"Install Questions for ",XPDNM,!
"RTN","XPDI",96,0)
 ;pre-init questions
"RTN","XPDI",97,0)
 D DIR^XPDIQ("PRE") I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",98,0)
 ;file install questions
"RTN","XPDI",99,0)
 S XPDFIL=0
"RTN","XPDI",100,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL),X(0)=^(XPDFIL,0),X(1)=^(XPDFIL),XPDFILO=^(0,1) D  I $D(XPDQUIT) Q
"RTN","XPDI",101,0)
 .;check for DD screening logic
"RTN","XPDI",102,0)
 .I $G(^(10))]"" N XPDSCR S XPDSCR=^(10) ;^(10) is ref to ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,10) from prev line
"RTN","XPDI",103,0)
 .;XPDFILN=file name^global ref^partial DD
"RTN","XPDI",104,0)
 .;XPDANS=new file^DD screen failed^Data exists^update file name^user
"RTN","XPDI",105,0)
 .;doesn't want to update data  1=yes,0=no
"RTN","XPDI",106,0)
 .S XPDFILN=X_X(0)_U_X(1),XPDANS='($D(^DIC(XPDFIL,0))#2)_"^^"_''$O(@(X(0)_"0)"))
"RTN","XPDI",107,0)
 .W ! D DIR^XPDIQ("XPF",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI",108,0)
 .S:$G(XPDQUES("XPF"_XPDFIL_"#2"))=0 $P(XPDANS,U,5)=1
"RTN","XPDI",109,0)
 .S ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,2)=XPDANS
"RTN","XPDI",110,0)
 .F I=1:1:2 K XPDQUES("XPF"_XPDFIL_"#"_I)
"RTN","XPDI",111,0)
 ;XPDQUIT is by file questions in previous do loop, set in XPDIQ
"RTN","XPDI",112,0)
 I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",113,0)
 ;post-init questions
"RTN","XPDI",114,0)
 W ! D DIR^XPDIQ("POS") I $D(DIRUT)!$D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",115,0)
 Q
"RTN","XPDI",116,0)
 ;lookup into file 9.7, XPDS=DIC("S") for lookup, return 0-fail or ien
"RTN","XPDI",117,0)
LOOK(XPDS) ;lookup Install
"RTN","XPDI",118,0)
 N DIC,Y,XPD,XPDIT,%
"RTN","XPDI",119,0)
 K XPDT
"RTN","XPDI",120,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDI",121,0)
 S:$L($G(XPDS)) DIC("S")=XPDS
"RTN","XPDI",122,0)
 D ^DIC Q:Y<0 0
"RTN","XPDI",123,0)
 S XPD=+Y,XPDIT=0
"RTN","XPDI",124,0)
 W !!,"This Distribution was loaded on ",$$FMTE^XLFDT($P(Y(0),U,3))," with header of ",!,$G(^XPD(9.7,XPD,2)),!,"It consisted of the following Install(s):",!
"RTN","XPDI",125,0)
 ;build XPDT array
"RTN","XPDI",126,0)
 F  S XPDIT=$O(^XPD(9.7,"ASP",XPD,XPDIT)) Q:'XPDIT  S Y=+$O(^(XPDIT,0)) D
"RTN","XPDI",127,0)
 .S %=$P($G(^XPD(9.7,Y,0)),U)
"RTN","XPDI",128,0)
 .I %="" W "**ERROR in Install, You need to remove the Distribution and reload it**",!  S XPDQUIT=1 Q
"RTN","XPDI",129,0)
 .S XPDT(XPDIT)=Y_U_%,(XPDT("DA",Y),XPDT("NM",%))=XPDIT W %,!
"RTN","XPDI",130,0)
 S:'$O(XPDT(0)) XPDQUIT=1
"RTN","XPDI",131,0)
 Q XPD
"RTN","XPDI",132,0)
 ;
"RTN","XPDI",133,0)
XQSET(XPDA) ;get options & protocols to disable
"RTN","XPDI",134,0)
 ;put in ^TMP($J,"XQOO",starting build name)
"RTN","XPDI",135,0)
 N A,I,X,Y
"RTN","XPDI",136,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",19,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",137,0)
 .S Y=$O(^DIC(19,"B",$P(X,U),0))
"RTN","XPDI",138,0)
 .;check that option exist and the Action is send or merge (0 or 3)
"RTN","XPDI",139,0)
 .I Y,$D(^DIC(19,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,19,Y)=$P(^(0),U,1,2)
"RTN","XPDI",140,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",101,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",141,0)
 .S Y=$O(^ORD(101,"B",$P(X,U),0))
"RTN","XPDI",142,0)
 .I Y,$D(^ORD(101,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,101,Y)=$P(^(0),U,1,2)
"RTN","XPDI",143,0)
 Q
"RTN","XPDI",144,0)
 ;XPDIJ need to install XPDIJ now & set routine flag to skip
"RTN","XPDI",145,0)
XPDIJ N DIE,XPDA,XCM,XCN,XCS,X
"RTN","XPDI",146,0)
 S XPDA=XPDIJ,DIE="^XTMP(""XPDI"",XPDIJ,""RTN"",""XPDIJ"",",XCN=0,X="XPDIJ"
"RTN","XPDI",147,0)
 X ^%ZOSF("SAVE")
"RTN","XPDI",148,0)
 S XCN=$$RTNUP^XPDUTL("XPDIJ",2)
"RTN","XPDI",149,0)
 Q
"RTN","XPDI",150,0)
 ;
"RTN","XPDI",151,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",152,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",153,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",154,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",155,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),!
"RTN","XPDI",156,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",157,0)
 ;kill XPDT array, but don't kill global if XPDK=2
"RTN","XPDI",158,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP") Q:XPDK=2
"RTN","XPDI",159,0)
 K ^XTMP("XPDI",XPDA)
"RTN","XPDI",160,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",161,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",162,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",163,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",164,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",165,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",166,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",167,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",168,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",169,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",170,0)
 D ^DIK
"RTN","XPDI",171,0)
 Q
"RTN","XPDI",172,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",173,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",174,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",175,0)
 W ! D ^DIR I Y D ABRTALL(1)
"RTN","XPDI",176,0)
 Q
"RTN","XPDI",177,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",178,0)
 N XPDA
"RTN","XPDI",179,0)
 S XPDT=0
"RTN","XPDI",180,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",181,0)
 Q
"RTN","XPDI",182,0)
NONE W !!,"**NOTHING INSTALLED**",!
"RTN","XPDI",183,0)
 Q
"RTN","XPDIA")
0^10^B50074905
"RTN","XPDIA",1,0)
XPDIA ;SFISC/RSD - Install Pre/Post Actions for Kernel Files ;09/25/96  14:56
"RTN","XPDIA",2,0)
 ;;8.0;KERNEL;**10,15,21,28,44**;Jul 10, 1995
"RTN","XPDIA",3,0)
 Q
"RTN","XPDIA",4,0)
OPTF1 ;options file pre
"RTN","XPDIA",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",6,0)
 Q
"RTN","XPDIA",7,0)
OPTE1 ;options entry pre
"RTN","XPDIA",8,0)
 N %,I
"RTN","XPDIA",9,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",10,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",11,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",19,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",19,OLDA,10)
"RTN","XPDIA",12,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",13,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",14,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",15,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",16,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",17,0)
 .D ADD^XQOO1($P(XPDSET,U,2),19,DA)
"RTN","XPDIA",18,0)
 S I=^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),%=^DIC(19,DA,0)
"RTN","XPDIA",19,0)
 ;$P(%,U,3)=out of order message, if exist set it back
"RTN","XPDIA",20,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",21,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",22,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",23,0)
 ;if there is no reverse key, save the old key and flag
"RTN","XPDIA",24,0)
 I $P($G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3)),U)="",$L($P($G(^DIC(19,DA,3)),U)) S $P(I,U,16)=$P(%,U,16),$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3),U)=$P(^(3),U)
"RTN","XPDIA",25,0)
 S ^XTMP("XPDI",XPDA,"KRN",19,OLDA,0)=I
"RTN","XPDIA",26,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",27,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",19,OLDA,1,0)) ^DIC(19,DA,1)
"RTN","XPDIA",28,0)
 ;kill old RCPs (RPC)
"RTN","XPDIA",29,0)
 K ^DIC(19,DA,"RPC")
"RTN","XPDIA",30,0)
 ;if Menu Text, (U;1) is different, kill C x-ref
"RTN","XPDIA",31,0)
 S I=$G(^DIC(19,DA,"U")) I I]"",I'=$G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,"U")) K ^DIC(19,"C",I)
"RTN","XPDIA",32,0)
 S I=0
"RTN","XPDIA",33,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",34,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",35,0)
 ;the file post action as a relink
"RTN","XPDIA",36,0)
 Q:XPDFL=3
"RTN","XPDIA",37,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",38,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",39,0)
 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^DIC(19,"AD",%,DA,I)
"RTN","XPDIA",40,0)
 ;kill Menus (10)
"RTN","XPDIA",41,0)
 K ^DIC(19,DA,10)
"RTN","XPDIA",42,0)
 Q
"RTN","XPDIA",43,0)
OPTF2 ;options file post
"RTN","XPDIA",44,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",45,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",46,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",47,0)
 .;if use as link then goto OPTFL, just update menus
"RTN","XPDIA",48,0)
 .G:ACT=2 OPTFL
"RTN","XPDIA",49,0)
 .;repoint Bulletin (220;1) and Mail Group (220;3)
"RTN","XPDIA",50,0)
 .S Y0=$G(^DIC(19,DA,220)) I Y0]"" S $P(Y0,U)=$$LK("^XMB(3.6)",$P(Y0,U)),$P(Y0,U,3)=$$LK("^XMB(3.8)",$P(Y0,U,3)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",51,0)
 .;repoint RPC (RPC;1)
"RTN","XPDIA",52,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,"RPC",I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",53,0)
 ..S Y=$$LK("^XWB(8994)",Y0)
"RTN","XPDIA",54,0)
 ..I 'Y K ^DIC(19,DA,"RPC",I) D BMES^XPDUTL(" RPC "_Y0_" in Option "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",55,0)
 ..S $P(^DIC(19,DA,"RPC",I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",56,0)
 .S:X $P(^DIC(19,DA,"RPC",0),U,3,4)=X
"RTN","XPDIA",57,0)
 .;repoint Package (0;12) and Help Frame (0;7)
"RTN","XPDIA",58,0)
 .S Y0=^DIC(19,DA,0),$P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),$P(Y0,U,7)=$$LK("^DIC(9.2)",$P(Y0,U,7)),^DIC(19,DA,0)=Y0
"RTN","XPDIA",59,0)
OPTFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",60,0)
 .;merged, they could also be linked menu, but treat like merge
"RTN","XPDIA",61,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",62,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",63,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",64,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",65,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",66,0)
 ...S Y=$$LK("^DIC(19)",Y0)
"RTN","XPDIA",67,0)
 ...K ^DIC(19,DA,10,I,U)
"RTN","XPDIA",68,0)
 ...I 'Y K ^DIC(19,DA,10,I) D BMES^XPDUTL(" Option "_Y0_" in Menu "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",69,0)
 ...S $P(^DIC(19,DA,10,I,0),U)=Y
"RTN","XPDIA",70,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",71,0)
 .S:X $P(^DIC(19,DA,10,0),U,3,4)=X
"RTN","XPDIA",72,0)
 .;re-index this option
"RTN","XPDIA",73,0)
 .D IX1^DIK
"RTN","XPDIA",74,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",75,0)
 Q
"RTN","XPDIA",76,0)
OPTDEL ;option delete
"RTN","XPDIA",77,0)
 D DEL("^DIC(19,",DUZ)
"RTN","XPDIA",78,0)
 D OPT^XPDIA2
"RTN","XPDIA",79,0)
 Q
"RTN","XPDIA",80,0)
PROF1 ;protocols file pre
"RTN","XPDIA",81,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",82,0)
 Q
"RTN","XPDIA",83,0)
PROE1 ;protocols entry pre
"RTN","XPDIA",84,0)
 N %,I
"RTN","XPDIA",85,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",86,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",87,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",101,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",101,OLDA,10)
"RTN","XPDIA",88,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",89,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",90,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",91,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",92,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",93,0)
 .D ADD^XQOO1($P(XPDSET,U,2),101,DA)
"RTN","XPDIA",94,0)
 S I=^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),%=^ORD(101,DA,0)
"RTN","XPDIA",95,0)
 ;$P(%,U,3)=disable message, if exist set it back
"RTN","XPDIA",96,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",97,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",98,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",99,0)
 S ^XTMP("XPDI",XPDA,"KRN",101,OLDA,0)=I
"RTN","XPDIA",100,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",101,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",101,OLDA,1,0)) ^ORD(101,DA,1)
"RTN","XPDIA",102,0)
 ;kill old ACCESS multiple
"RTN","XPDIA",103,0)
 K ^ORD(101,DA,3) S I=0
"RTN","XPDIA",104,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",105,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",106,0)
 ;the file post action as a relink
"RTN","XPDIA",107,0)
 Q:XPDFL=3
"RTN","XPDIA",108,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",109,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",110,0)
 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^ORD(101,"AD",%,DA,I)
"RTN","XPDIA",111,0)
 K ^ORD(101,DA,10)
"RTN","XPDIA",112,0)
 Q
"RTN","XPDIA",113,0)
PROF2 ;protocols file post
"RTN","XPDIA",114,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",115,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",116,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",117,0)
 .;if use as link then goto PROFL, just update menus
"RTN","XPDIA",118,0)
 .G:ACT=2 PROFL
"RTN","XPDIA",119,0)
 .;repoint Package (0;12)
"RTN","XPDIA",120,0)
 .S Y0=^ORD(101,DA,0) S:$L($P(Y0,U,12)) $P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),^ORD(101,DA,0)=Y0
"RTN","XPDIA",121,0)
 .;repoint File Link (5;1), its a variable pointer
"RTN","XPDIA",122,0)
 .S Y0=$P($G(^ORD(101,DA,5)),U),Y=$P(Y0,";",2),Y0=$P(Y0,";")
"RTN","XPDIA",123,0)
 .I Y0,$L(Y) S Y0=$O(@("^"_Y_"""B"","""_Y0_""",0)")),$P(^ORD(101,DA,5),U)=$S(Y0:Y0_";"_Y,1:"")
"RTN","XPDIA",124,0)
 .;repoint HL7 fields, node 770
"RTN","XPDIA",125,0)
 .S Y0=$G(^ORD(101,DA,770)) I $L(Y0) D  S ^ORD(101,DA,770)=Y0
"RTN","XPDIA",126,0)
 ..S $P(Y0,U)=$$LK("^HL(771)",$P(Y0,U)),$P(Y0,U,2)=$$LK("^HL(771)",$P(Y0,U,2))
"RTN","XPDIA",127,0)
 ..S $P(Y0,U,3)=$$LK("^HL(771.2)",$P(Y0,U,3)),$P(Y0,U,11)=$$LK("^HL(771.2)",$P(Y0,U,11))
"RTN","XPDIA",128,0)
 ..S $P(Y0,U,4)=$$LK("^HL(779.001)",$P(Y0,U,4)),$P(Y0,U,7)=$$LK("^HLCS(870)",$P(Y0,U,7))
"RTN","XPDIA",129,0)
 ..S $P(Y0,U,8)=$$LK("^HL(779.003)",$P(Y0,U,8)),$P(Y0,U,9)=$$LK("^HL(779.003)",$P(Y0,U,9))
"RTN","XPDIA",130,0)
 ..S $P(Y0,U,10)=$$LK("^HL(771.5)",$P(Y0,U,10))
"RTN","XPDIA",131,0)
 .;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDIA",132,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,3,I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",133,0)
 ..;Y0=.01 of Access(Security Key)
"RTN","XPDIA",134,0)
 ..S Y=$$LK("^DIC(19.1)",Y0)
"RTN","XPDIA",135,0)
 ..I 'Y K ^ORD(101,DA,3,I) D BMES^XPDUTL(" Key "_Y0_" in Protocol "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",136,0)
 ..S $P(^ORD(101,DA,3,I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",137,0)
 .S:X $P(^ORD(101,DA,3,0),U,3,4)=X
"RTN","XPDIA",138,0)
PROFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",139,0)
 .;merged, they are also linked menu, but treat like merge
"RTN","XPDIA",140,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",141,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",142,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",143,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",144,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",145,0)
 ...S Y=$$LK("^ORD(101)",Y0)
"RTN","XPDIA",146,0)
 ...K ^ORD(101,DA,10,I,U)
"RTN","XPDIA",147,0)
 ...I 'Y K ^ORD(101,DA,10,I) D BMES^XPDUTL(" Protocol "_Y0_" in Protocol Menu "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",148,0)
 ...S $P(^ORD(101,DA,10,I,0),U)=Y
"RTN","XPDIA",149,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",150,0)
 .S:X $P(^ORD(101,DA,10,0),U,3,4)=X
"RTN","XPDIA",151,0)
 .;re-index this option
"RTN","XPDIA",152,0)
 .D IX1^DIK
"RTN","XPDIA",153,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",154,0)
 Q
"RTN","XPDIA",155,0)
PRODEL ;option delete
"RTN","XPDIA",156,0)
 D DEL("^ORD(101,",DUZ)
"RTN","XPDIA",157,0)
 Q
"RTN","XPDIA",158,0)
LK(GR,X) ;lookup, GR=global root, X=lookup value
"RTN","XPDIA",159,0)
 Q:$G(X)="" ""
"RTN","XPDIA",160,0)
 N I S I=$O(@GR@("B",X,0))
"RTN","XPDIA",161,0)
 I I,$D(@GR@(I,0))#2 Q I
"RTN","XPDIA",162,0)
 Q ""
"RTN","XPDIA",163,0)
 ;
"RTN","XPDIA",164,0)
ADD(XPDSDD,XPDSDA,X) ;add to multiple, XPDSDD=sub DD#, XPDSDA=DA, X=value
"RTN","XPDIA",165,0)
 Q:$G(X)=""
"RTN","XPDIA",166,0)
 N XPD
"RTN","XPDIA",167,0)
 S XPD(XPDSDD,"?+1,"_XPDSDA_",",.01)=X
"RTN","XPDIA",168,0)
 D UPDATE^DIE("E","XPD")
"RTN","XPDIA",169,0)
 Q
"RTN","XPDIA",170,0)
 ;this is used to add menu items to an option or protocol
"RTN","XPDIA",171,0)
MENU(DA,X,X0) ;DA=ien of option/protocol, X=Menu item, X0=0 node of menu item
"RTN","XPDIA",172,0)
 N DIC,DLAYGO,DIK,D0,D1,I,Y,Y0
"RTN","XPDIA",173,0)
 S DIC=$S(XPDFIL=19:"^DIC(19,",1:"^ORD(101,")_DA_",10,",DIC(0)="L",DLAYGO=XPDFIL,(D0,DA(1))=DA
"RTN","XPDIA",174,0)
 S:'$D(@(DIC_"0)")) @(DIC_"0)")=U_$P(^DD(XPDFIL,10,0),U,2)
"RTN","XPDIA",175,0)
 S:$L($G(X0)) DIC("DR")="2///"_$P(X0,U,2)_";3///"_$P(X0,U,3)_$S($L($P(X0,U,4)):";4///"_$P(X0,U,4)_";5///"_$P(X0,U,5)_";6///"_$P(X0,U,6),1:"")
"RTN","XPDIA",176,0)
 D ^DIC
"RTN","XPDIA",177,0)
 Q
"RTN","XPDIA",178,0)
DEL(DIK,DUZ) ;delete
"RTN","XPDIA",179,0)
 N DA,XPDI,XPDF
"RTN","XPDIA",180,0)
 S XPDI=0,DUZ(0)="@",XPDF=+$P(DIK,"(",2)
"RTN","XPDIA",181,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D
"RTN","XPDIA",182,0)
 .K ^TMP("DIFIXPT",$J) S DA=XPDI
"RTN","XPDIA",183,0)
 .D ^DIK ;FIXPT^DIA3("D",XPDF,XPDI)
"RTN","XPDIA",184,0)
 .I $D(^TMP("DIFIXPT",$J))  D WP^XPDUTL("^TMP(""DIFIXPT"",$J)")
"RTN","XPDIA",185,0)
 Q
"RTN","XPDIA1")
0^11^B27709273
"RTN","XPDIA1",1,0)
XPDIA1 ;SFISC/RSD - Install Pre/Post Actions for Kernel files cont. ;09/25/96  14:58
"RTN","XPDIA1",2,0)
 ;;8.0;KERNEL;**2,44**;Jul 10, 1995
"RTN","XPDIA1",3,0)
 Q
"RTN","XPDIA1",4,0)
HLPF1 ;help frames file pre
"RTN","XPDIA1",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",6,0)
 Q
"RTN","XPDIA1",7,0)
HLPE1 ;entry pre
"RTN","XPDIA1",8,0)
 S ^TMP($J,"XPD",DA)="" K ^DIC(9.2,DA,1),^(2),^(3),^(10)
"RTN","XPDIA1",9,0)
 Q
"RTN","XPDIA1",10,0)
HLPF2 ;file post
"RTN","XPDIA1",11,0)
 N DA,DIK,I,X,Y,Y0
"RTN","XPDIA1",12,0)
 ;need to send error message, need to setup message
"RTN","XPDIA1",13,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",14,0)
 .;repoint Related Frame (2;0)
"RTN","XPDIA1",15,0)
 .S I=0 F  S I=$O(^DIC(9.2,DA,2,I)) Q:'I  S Y0=$G(^(I,0)),Y=$$LK^XPDIA("^DIC(9.2)",$P(Y0,U,2)),$P(^DIC(9.2,DA,2,I,0),U,2)=Y
"RTN","XPDIA1",16,0)
 .;repoint OBJECT (10;0)
"RTN","XPDIA1",17,0)
 .S (I,X)=0 F  S I=$O(^DIC(9.2,DA,10,I)) Q:'I  S Y0=$G(^(I,0)) D
"RTN","XPDIA1",18,0)
 ..S Y=$$LK^XPDIA("^MAG",$P(Y0,U)) S:Y $P(^DIC(9.2,DA,10,I,0),U)=Y,X=X+1_U_I
"RTN","XPDIA1",19,0)
 ..K:'Y ^DIC(9.2,DA,10,I)
"RTN","XPDIA1",20,0)
 .I X S $P(^DIC(9.2,DA,10,0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA1",21,0)
 .D IX1^DIK
"RTN","XPDIA1",22,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",23,0)
 Q
"RTN","XPDIA1",24,0)
HLPDEL ;help frame delete
"RTN","XPDIA1",25,0)
 N DA,DIK,XPDI,XPDJ
"RTN","XPDIA1",26,0)
 S XPDI=0
"RTN","XPDIA1",27,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)),XPDJ=0 Q:'XPDI  D
"RTN","XPDIA1",28,0)
 .S DIK="^DIC(9.2,XPDJ,2,"
"RTN","XPDIA1",29,0)
 .;check other frames that point to this one
"RTN","XPDIA1",30,0)
 .F  S XPDJ=$O(^DIC(9.2,"AE",XPDI,XPDJ)) Q:'XPDJ  S Z=$O(^(XPDJ,0)) D:Z
"RTN","XPDIA1",31,0)
 ..K DA S DA=Z,DA(1)=XPDJ D ^DIK
"RTN","XPDIA1",32,0)
 .;delete this frame
"RTN","XPDIA1",33,0)
 .K DA S DA=XPDI,DIK="^DIC(9.2," D ^DIK
"RTN","XPDIA1",34,0)
 Q
"RTN","XPDIA1",35,0)
BULE1 ;bulletin entry pre
"RTN","XPDIA1",36,0)
 N X,I S I=0
"RTN","XPDIA1",37,0)
 ;save current Mail Groups (2)
"RTN","XPDIA1",38,0)
 I $G(^XMB(3.6,DA,2,0))]"" S X(0)=^(0) F  S I=$O(^XMB(3.6,DA,2,I)) Q:'I  S X(I)=$G(^(I,0))
"RTN","XPDIA1",39,0)
 K ^XMB(3.6,DA)
"RTN","XPDIA1",40,0)
 ;after killing data, put back Mail Groups before data merge
"RTN","XPDIA1",41,0)
 I $D(X) S ^XMB(3.6,DA,2,0)=X(0),I=0 F  S I=$O(X(I)) Q:'I  S ^XMB(3.6,DA,2,I,0)=X(I)
"RTN","XPDIA1",42,0)
 Q
"RTN","XPDIA1",43,0)
BULDEL ;del bulletins
"RTN","XPDIA1",44,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",45,0)
 S XPDI=0,DIK="^XMB(3.6,"
"RTN","XPDIA1",46,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",47,0)
 Q
"RTN","XPDIA1",48,0)
MAILGF1 ;mail groups file pre
"RTN","XPDIA1",49,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",50,0)
 Q
"RTN","XPDIA1",51,0)
MAILGE1 ;mail group entry pre
"RTN","XPDIA1",52,0)
 N I,J
"RTN","XPDIA1",53,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",54,0)
 ;save MEMBER GROUPS (5;0)
"RTN","XPDIA1",55,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5,0)) M ^TMP($J,"XPD",DA,5)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5)
"RTN","XPDIA1",56,0)
 ;save MEMBER - REMOTE (6;0)
"RTN","XPDIA1",57,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6,0)) M ^TMP($J,"XPD",DA,6)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6)
"RTN","XPDIA1",58,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA1",59,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,2,0)) ^XMB(3.8,DA,2)
"RTN","XPDIA1",60,0)
 S I=^XMB(3.8,DA,0),J=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)
"RTN","XPDIA1",61,0)
 ;save REFERENCE COUNT (0;4) & LAST REFERENCED (0;5)
"RTN","XPDIA1",62,0)
 S:$P(I,U,4) $P(J,U,4)=$P(I,U,4) S:$P(I,U,5) $P(J,U,5)=$P(I,U,5)
"RTN","XPDIA1",63,0)
 ;save COORDINATOR (0;7)
"RTN","XPDIA1",64,0)
 S:$P(I,U,7) $P(J,U,7)=$P(I,U,7)
"RTN","XPDIA1",65,0)
 S ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)=J,I=$G(^XMB(3.8,DA,3))
"RTN","XPDIA1",66,0)
 ;save ORGANIZER (3;1)
"RTN","XPDIA1",67,0)
 I $P(I,U) S $P(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,3),U)=$P(I,U)
"RTN","XPDIA1",68,0)
 Q
"RTN","XPDIA1",69,0)
MAILGF2 ;mail group file post
"RTN","XPDIA1",70,0)
 N XPDMDA,XPDI,Y
"RTN","XPDIA1",71,0)
 S XPDMDA=0 F  S XPDMDA=$O(^TMP($J,"XPD",XPDMDA)) Q:'XPDMDA  D
"RTN","XPDIA1",72,0)
 .;merge & repoint MEMBER GROUP (5;0)
"RTN","XPDIA1",73,0)
 .S XPDI=0
"RTN","XPDIA1",74,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,5,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.811,XPDMDA,Y)
"RTN","XPDIA1",75,0)
 .;merge & repoint MEMBER - REMOTE (6;0)
"RTN","XPDIA1",76,0)
 .S XPDI=0
"RTN","XPDIA1",77,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,6,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.812,XPDMDA,Y)
"RTN","XPDIA1",78,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",79,0)
 Q
"RTN","XPDIA1",80,0)
HLAPF1 ;HL7 application parameter #771 file pre
"RTN","XPDIA1",81,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",82,0)
 Q
"RTN","XPDIA1",83,0)
HLAPE1 ;HL7 application parameter #771 entry pre
"RTN","XPDIA1",84,0)
 N I,J
"RTN","XPDIA1",85,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",86,0)
 S I=^HL(771,DA,0),J=^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)
"RTN","XPDIA1",87,0)
 ;save FACILITY NAME (0;3)
"RTN","XPDIA1",88,0)
 S:$P(I,U,3)]"" $P(J,U,3)=$P(I,U,3)
"RTN","XPDIA1",89,0)
 ;repoint MAIL GROUP (0;4)
"RTN","XPDIA1",90,0)
 S:$P(J,U,4)]"" $P(J,U,4)=$$LK^XPDIA("^XMB(3.8)",$P(J,U,4))
"RTN","XPDIA1",91,0)
 ;repoint COUNTRY CODE (0;7)
"RTN","XPDIA1",92,0)
 S:$P(J,U,7)]"" $P(J,U,7)=$$LK^XPDIA("^HL(779.004)",$P(J,U,7))
"RTN","XPDIA1",93,0)
 S ^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)=J
"RTN","XPDIA1",94,0)
 ;remove HL7 SEGMENT (SEG;0), HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",95,0)
 K ^HL(771,DA,"SEG"),^("MSG")
"RTN","XPDIA1",96,0)
 Q
"RTN","XPDIA1",97,0)
HLAPF2 ;HL7 application parameter #771 file post
"RTN","XPDIA1",98,0)
 N DA,DIK,XPDI,X,Y
"RTN","XPDIA1",99,0)
 S DA=0,DIK="^HL(771,"
"RTN","XPDIA1",100,0)
 F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",101,0)
 .;repoint HL7 SEGMENT (SEG;0)
"RTN","XPDIA1",102,0)
 .S XPDI=0
"RTN","XPDIA1",103,0)
 .F  S XPDI=$O(^HL(771,DA,"SEG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",104,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",105,0)
 ..I X]"" S $P(^HL(771,DA,"SEG",XPDI,0),U)=X Q
"RTN","XPDIA1",106,0)
 ..K ^HL(771,DA,"SEG",XPDI)
"RTN","XPDIA1",107,0)
 .;repoint HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",108,0)
 .S XPDI=0
"RTN","XPDIA1",109,0)
 .F  S XPDI=$O(^HL(771,DA,"MSG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",110,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",111,0)
 ..I X]"" S $P(^HL(771,DA,"MSG",XPDI,0),U)=X Q
"RTN","XPDIA1",112,0)
 ..K ^HL(771,DA,"MSG",XPDI)
"RTN","XPDIA1",113,0)
 .D IX1^DIK
"RTN","XPDIA1",114,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",115,0)
 Q
"RTN","XPDIA1",116,0)
HLLLPE ;HL7 lower level protocol #869.2 entry pre
"RTN","XPDIA1",117,0)
 N I
"RTN","XPDIA1",118,0)
 S I=$P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)
"RTN","XPDIA1",119,0)
 ;repoint LLP TYPE (0;2)
"RTN","XPDIA1",120,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)=$$LK^XPDIA("^HLCS(869.1)",I)
"RTN","XPDIA1",121,0)
 S I=$P($G(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100)),U)
"RTN","XPDIA1",122,0)
 ;repoint MAIL GROUP (100;1)
"RTN","XPDIA1",123,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100),U)=$$LK^XPDIA("^XMB(3.8)",I)
"RTN","XPDIA1",124,0)
 ;save HLLP DEVICE (200;1)
"RTN","XPDIA1",125,0)
 S I=$G(^HLCS(869.2,DA,200))
"RTN","XPDIA1",126,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,200),U)=$P(I,U)
"RTN","XPDIA1",127,0)
 ;save X3.28 DEVICE (300;1)
"RTN","XPDIA1",128,0)
 S I=$G(^HLCS(869.2,DA,300))
"RTN","XPDIA1",129,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,300),U)=$P(I,U)
"RTN","XPDIA1",130,0)
 Q
"RTN","XPDIA1",131,0)
HLLLE ;HL7 logical link #870 entry pre
"RTN","XPDIA1",132,0)
 N I,J
"RTN","XPDIA1",133,0)
 S I=^HLCS(870,DA,0),J=^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)
"RTN","XPDIA1",134,0)
 ;repoint INSTITUTION (0;2)
"RTN","XPDIA1",135,0)
 S:$P(J,U,2)]"" $P(J,U,2)=$$LK^XPDIA("^DIC(4)",$P(J,U,2))
"RTN","XPDIA1",136,0)
 ;repoint LLP PARAMETER (0;3)
"RTN","XPDIA1",137,0)
 S:$P(J,U,3)]"" $P(J,U,3)=$$LK^XPDIA("^HLCS(869.2)",$P(J,U,3))
"RTN","XPDIA1",138,0)
 ;save QUEUE SIZE (0;21)
"RTN","XPDIA1",139,0)
 S:$P(I,U,21)]"" $P(J,U,21)=$P(I,U,21)
"RTN","XPDIA1",140,0)
 S ^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)=J
"RTN","XPDIA1",141,0)
 Q
"RTN","XPDIA1",142,0)
KEYDEL ;del security keys
"RTN","XPDIA1",143,0)
 N XPDI S XPDI=0
"RTN","XPDIA1",144,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D DEL^XPDKEY(XPDI)
"RTN","XPDIA1",145,0)
 Q
"RTN","XPDIA1",146,0)
LMDEL ;del list manager templates
"RTN","XPDIA1",147,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",148,0)
 S XPDI=0,DIK="^SD(409.61,"
"RTN","XPDIA1",149,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",150,0)
 Q
"RTN","XPDIA1",151,0)
RPCDEL ;del Kernel RPCs
"RTN","XPDIA1",152,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",153,0)
 S XPDI=0,DIK="^XWB(8994,"
"RTN","XPDIA1",154,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",155,0)
 Q
"RTN","XPDIJ")
0^12^B28627075
"RTN","XPDIJ",1,0)
XPDIJ ;SFISC/RSD - Install Job ;10/03/96  09:25
"RTN","XPDIJ",2,0)
 ;;8.0;KERNEL;**2,21,28,41,44**;Jul 10, 1995
"RTN","XPDIJ",3,0)
EN ;install all packages
"RTN","XPDIJ",4,0)
 ;XPDA=ien of first package
"RTN","XPDIJ",5,0)
 ;this is only needed for patch 41
"RTN","XPDIJ",6,0)
 I $D(^XTMP("XPDI",XPDA,"RTN","XPDIJ1")) D
"RTN","XPDIJ",7,0)
 .N DIE,XCM,XCN,XCS,X
"RTN","XPDIJ",8,0)
 .S DIE="^XTMP(""XPDI"",XPDA,""RTN"",""XPDIJ1"",",XCN=0,X="XPDIJ1"
"RTN","XPDIJ",9,0)
 .X ^%ZOSF("SAVE")
"RTN","XPDIJ",10,0)
 N XPDI,XPD0,XPDSET,XPDQUIT,XPDVOL,X,Y,ZTRTN,ZTDTH,ZTIO,ZTDESC,ZTSK
"RTN","XPDIJ",11,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERR^XPDIJ"
"RTN","XPDIJ",12,0)
 E  S X="ERR^XPDIJ",@^%ZOSF("TRAP")
"RTN","XPDIJ",13,0)
 Q:'$D(^XPD(9.7,+$G(XPDA),0))  S XPD0=^(0)
"RTN","XPDIJ",14,0)
 D INIT^XPDID
"RTN","XPDIJ",15,0)
 ;disable options & protocols for setname, XPDSET=1/0^setname^out of order msg.
"RTN","XPDIJ",16,0)
 S Y=$P(XPD0,U,8),XPDSET=+Y_U_$E(Y,2,99)_U_$S($L(Y):$P($G(^XTMP("XQOO",$E(Y,2,99),0)),U),1:"")
"RTN","XPDIJ",17,0)
 ;hang the number of seconds given in 0;10
"RTN","XPDIJ",18,0)
 I XPDSET D OFF^XQOO1($P(XPDSET,U,2)) I $P(XPD0,U,10) H ($P(XPD0,U,10)*60)
"RTN","XPDIJ",19,0)
 ;XPDVOL is set only if they want to update other CPUs
"RTN","XPDIJ",20,0)
 I $O(^XPD(9.7,XPDA,"VOL",0)) M XPDVOL=^XPD(9.7,XPDA,"VOL") D
"RTN","XPDIJ",21,0)
 .S Y=0
"RTN","XPDIJ",22,0)
 .F  S Y=$O(XPDVOL(Y)) Q:'Y  S $P(XPDVOL(Y,0),U,2,3)="^" K XPDVOL(Y,1)
"RTN","XPDIJ",23,0)
 .;jobup RTN^XPDIJ(XPDA), to install routines on other CPU if Taskman is running
"RTN","XPDIJ",24,0)
 .;check that taskman is running
"RTN","XPDIJ",25,0)
 .D:$$TM^%ZTLOAD
"RTN","XPDIJ",26,0)
 ..N XPDU,XPDY,XPDV,XPDV0,XPDVOL,ZTUCI,ZTCPU,ZTDESC,ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","XPDIJ",27,0)
 ..X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",28,0)
 ..F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",29,0)
 ...S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="KIDS update CPUs "_XPDV0,ZTCPU=XPDV0,ZTRTN="EN^XPDCPU("_XPDA_","_XPDV_")"
"RTN","XPDIJ",30,0)
 ...D ^%ZTLOAD
"RTN","XPDIJ",31,0)
 ...;save task number under Volume set multiple
"RTN","XPDIJ",32,0)
 ...Q:'$G(ZTSK)  K XPD
"RTN","XPDIJ",33,0)
 ...S XPD(9.703,XPDV_","_XPDA_",",3)=ZTSK D FILE^DIE("","XPD")
"RTN","XPDIJ",34,0)
 S Y=0
"RTN","XPDIJ",35,0)
 ;XPDABORT can be set in pre or post install to abort install
"RTN","XPDIJ",36,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDIJ",37,0)
 .;build volume multiple for each package
"RTN","XPDIJ",38,0)
 .I $D(XPDVOL),'$D(^XPD(9.7,%,"VOL")) M ^("VOL")=XPDVOL
"RTN","XPDIJ",39,0)
 .N XPD,XPDA,XPDNM,XPDV,XPDV0,XPDVOL,XPDX,XPDY,Y
"RTN","XPDIJ",40,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D IN^XPDIJ1
"RTN","XPDIJ",41,0)
 .;check status of other cpu jobs, do if not this volume
"RTN","XPDIJ",42,0)
 .X ^%ZOSF("UCI") S XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",43,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=^(XPDV,0) D:$P(XPDV0,U)'=XPDY
"RTN","XPDIJ",44,0)
 ..;if completed time,write message and quit
"RTN","XPDIJ",45,0)
 ..I $P(XPDV0,U,2) D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",46,0)
 ..;if job had no start time, write message and quit
"RTN","XPDIJ",47,0)
 ..I '$P(XPDV0,U,3) D  I '$P(XPDV0,U,3)  D VOLERR($P(XPDV0,U),1) Q
"RTN","XPDIJ",48,0)
 ...D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to start.")
"RTN","XPDIJ",49,0)
 ...;hang 1 minute, try 5 times
"RTN","XPDIJ",50,0)
 ...F %=1:1:5 H 60 S XPDV0=^XPD(9.7,XPDA,"VOL",XPDV,0) Q:$P(XPDV0,U,3)
"RTN","XPDIJ",51,0)
 ..D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to complete.")
"RTN","XPDIJ",52,0)
 ..S XPD=0,XPDX=$G(^XPD(9.7,XPDA,"VOL",XPDV,1))
"RTN","XPDIJ",53,0)
 ..;check the last update node
"RTN","XPDIJ",54,0)
 ..F  S Y=$P(^XPD(9.7,XPDA,"VOL",XPDV,0),U,2),X=$G(^(1)),XPD=XPD+1 Q:XPD>360!Y  S:X'=XPDX XPD=0,XPDX=X H 10
"RTN","XPDIJ",55,0)
 ..;quit if we have a complete time
"RTN","XPDIJ",56,0)
 ..I Y D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",57,0)
 ..D VOLERR($P(XPDV0,U),0)
"RTN","XPDIJ",58,0)
 S Y=0
"RTN","XPDIJ",59,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S XPDI=$O(^(Y,0)) D:XPDI
"RTN","XPDIJ",60,0)
 .N Y,XPD
"RTN","XPDIJ",61,0)
 .;kill transport global
"RTN","XPDIJ",62,0)
 .K ^XTMP("XPDI",XPDI)
"RTN","XPDIJ",63,0)
 .;update the status field
"RTN","XPDIJ",64,0)
 .S XPD(9.7,XPDI_",",.02)=3
"RTN","XPDIJ",65,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",66,0)
 ;ZTREQ tells taskman to delete task
"RTN","XPDIJ",67,0)
 I $G(ZTSK) S ZTREQ="@" D
"RTN","XPDIJ",68,0)
 .;remove task # from Install File
"RTN","XPDIJ",69,0)
 .N XPD S XPD(9.7,XPDA_",",5)="@"
"RTN","XPDIJ",70,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",71,0)
 D EXIT^XPDID("Install Completed"),^%ZISC
"RTN","XPDIJ",72,0)
 ;quit if install was aborted
"RTN","XPDIJ",73,0)
 Q:$D(XPDABORT)
"RTN","XPDIJ",74,0)
 ;put option back in order
"RTN","XPDIJ",75,0)
 I $P(XPDSET,U,2)]"" D ON^XQOO1($P(XPDSET,U,2)) K ^XTMP("XQOO",$P(XPDSET,U,2))
"RTN","XPDIJ",76,0)
 ;queue menu rebuild on current CPU
"RTN","XPDIJ",77,0)
 D CHEK^XQ83
"RTN","XPDIJ",78,0)
 ;check if need to queue menu rebuild on other CPUs
"RTN","XPDIJ",79,0)
 D:$O(^XPD(9.7,XPDA,"VOL",0))
"RTN","XPDIJ",80,0)
 .N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU
"RTN","XPDIJ",81,0)
 .X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",82,0)
 .;loop thru VOLUMES SET and don't do current volume set
"RTN","XPDIJ",83,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",84,0)
 ..S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="Install Menu Rebuild",ZTCPU=XPDV0,ZTRTN="CHEK^XQ83" D ^%ZTLOAD
"RTN","XPDIJ",85,0)
 Q
"RTN","XPDIJ",86,0)
 ;
"RTN","XPDIJ",87,0)
SAVE(X) ;restore routine X
"RTN","XPDIJ",88,0)
 N %,DIE,XCM,XCN,XCS
"RTN","XPDIJ",89,0)
 S DIE="^XTMP(""XPDI"",XPDA,""RTN"",X,",XCN=0
"RTN","XPDIJ",90,0)
 X ^%ZOSF("SAVE")
"RTN","XPDIJ",91,0)
 Q
"RTN","XPDIJ",92,0)
RTN(XPDA) ;restore all routines for package XPDA
"RTN","XPDIJ",93,0)
 ;^XPD("XPDI",XPDA,"RTN",routine name)=0-install, 1-delete, 2-skip^checksum
"RTN","XPDIJ",94,0)
 Q:$G(XPDA)=""
"RTN","XPDIJ",95,0)
 N X,XPDI,XPDJ S XPDI=""
"RTN","XPDIJ",96,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S XPDJ=^(XPDI) D
"RTN","XPDIJ",97,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIJ",98,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",99,0)
 .I 'XPDJ D SAVE(XPDI) Q
"RTN","XPDIJ",100,0)
 .;set checksum to null, since routine wasn't loaded
"RTN","XPDIJ",101,0)
 .I $P(XPDJ,U,2) S $P(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"KRN",9.8,"NM",$P(XPDJ,U,2),0),U,4)=""
"RTN","XPDIJ",102,0)
 .I $P(XPDJ,U)=1 S X=XPDI X ^%ZOSF("DEL")
"RTN","XPDIJ",103,0)
 ;if graphic display, update full count
"RTN","XPDIJ",104,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",105,0)
 Q
"RTN","XPDIJ",106,0)
 ;
"RTN","XPDIJ",107,0)
VOLERR(V,F) ;volume set not updated,V=volume set, F=flag
"RTN","XPDIJ",108,0)
 N XQA,XQAMSG,XPDMES
"RTN","XPDIJ",109,0)
 S XPDMES(1)=" ",XPDMES(2)=" ** Job on VOLUME SET "_V_$S(F:" never started **",1:" has been idle for an hour.")
"RTN","XPDIJ",110,0)
 S XPDMES(3)=" ** "_V_" has NOT been updated! **"
"RTN","XPDIJ",111,0)
 S XQA(DUZ)="",XQAMSG="VOLUME SET "_V_" NOT updated for Install "_$E($P($G(^XPD(9.7,+$G(XPDA),0)),"^"),1,30)
"RTN","XPDIJ",112,0)
 D MES^XPDUTL(.XPDMES),SETUP^XQALERT
"RTN","XPDIJ",113,0)
 Q
"RTN","XPDIJ",114,0)
 ;come here on error, record error in Install file and cleanup var.
"RTN","XPDIJ",115,0)
ERR N XPDERROR,XQA,XQAMSG
"RTN","XPDIJ",116,0)
 S XPDERROR=$$EC^%ZOSV
"RTN","XPDIJ",117,0)
 ;record error, write message, reset terminal
"RTN","XPDIJ",118,0)
 D ^%ZTER,BMES^XPDUTL(XPDERROR),EXIT^XPDID()
"RTN","XPDIJ",119,0)
 S XQA(DUZ)="",XQAMSG="Install "_$E($P($G(^XPD(9.7,+$G(XPDA),0)),"^"),1,30)_" has encountered an Error."
"RTN","XPDIJ",120,0)
 D SETUP^XQALERT G UNWIND^%ZTER
"RTN","XPDIL")
0^13^B21175656
"RTN","XPDIL",1,0)
XPDIL ;SFISC/RSD - load Distribution Global ;09/09/96  10:43
"RTN","XPDIL",2,0)
 ;;8.0;KERNEL;**15,44**;Jul 10, 1995
"RTN","XPDIL",3,0)
EN1 N POP,XPDA,XPDST,XPDIT,XPDT,XPDGP,XPDQUIT,XPDSKPE
"RTN","XPDIL",4,0)
 S:'$D(DT) DT=$$DT^XLFDT S:'$D(U) U="^"
"RTN","XPDIL",5,0)
 S XPDST=0
"RTN","XPDIL",6,0)
 D ST I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE
"RTN","XPDIL",7,0)
 D  I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE
"RTN","XPDIL",8,0)
 .N DIR,DIRUT
"RTN","XPDIL",9,0)
 .S DIR(0)="Y",DIR("A")="Want to RUN the Environment Check Routine",DIR("B")="YES"
"RTN","XPDIL",10,0)
 .D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",11,0)
 .S:'Y XPDSKPE=1
"RTN","XPDIL",12,0)
 S XPDIT=0
"RTN","XPDIL",13,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPDA=+XPDT(XPDIT) D  I '$D(XPDT) Q
"RTN","XPDIL",14,0)
 .D PKG^XPDIL1(XPDA)
"RTN","XPDIL",15,0)
 G:$D(XPDGP) ^XPDIGP
"RTN","XPDIL",16,0)
 I $D(XPDT),$D(^XPD(9.7,+XPDST,0)) W !,"Use INSTALL NAME: ",$P(^(0),U)," to install this Distribution.",!
"RTN","XPDIL",17,0)
 Q
"RTN","XPDIL",18,0)
ST ;global input
"RTN","XPDIL",19,0)
 N DIR,DIRUT,GR,IOP,X,Y,Z,%ZIS
"RTN","XPDIL",20,0)
 G:'$D(^DD(3.5,0)) OPEN
"RTN","XPDIL",21,0)
 I '$D(^%ZIS(1,"B","HFS")) W !!,"You must have a device called 'HFS' in order to load a distribution!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",22,0)
 D HOME^%ZIS
"RTN","XPDIL",23,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to input Distribution."
"RTN","XPDIL",24,0)
 D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",25,0)
 S %ZIS="",%ZIS("HFSNAME")=Y,%ZIS("HFSMODE")="R",IOP="HFS"
"RTN","XPDIL",26,0)
 D ^%ZIS I POP W !,"Couldn't open file or HFS device!!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",27,0)
 D GI,^%ZISC:'$D(XPDGP)!$G(XPDQUIT)
"RTN","XPDIL",28,0)
 Q
"RTN","XPDIL",29,0)
 ;
"RTN","XPDIL",30,0)
OPEN ;use open command
"RTN","XPDIL",31,0)
 N IO,IOPAR,DIR,DIRUT
"RTN","XPDIL",32,0)
 S DIR(0)="F^1:79",DIR("A")="Device Name"
"RTN","XPDIL",33,0)
 S DIR("?",1)="Device Name is either the name of the HFS file or the name of the HFS Device.",DIR("?",2)="i.e.  for MSM enter  51",DIR("?")="      for DSM enter  DISK$USER::[ANONYMOUS]:KRN8.KID"
"RTN","XPDIL",34,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDIL",35,0)
 S IO=Y,DIR(0)="FO^1:79",DIR("A")="Device Parameters"
"RTN","XPDIL",36,0)
 S DIR("?",1)="Device Parameter is the Open parameter this M operating system needs to",DIR("?",2)="open the Device Name.",DIR("?",3)="i.e. for MSM enter  (""B:\KRN8.KID"":""R"")",DIR("?")="     for DSM enter  READONLY"
"RTN","XPDIL",37,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDIL",38,0)
 S IOPAR=Y
"RTN","XPDIL",39,0)
 X "O IO:"_IOPAR_":10" E  U $P W !,"Couldn't open ",IO S POP=1 Q
"RTN","XPDIL",40,0)
 S IO(0)=$P
"RTN","XPDIL",41,0)
 D GI C IO
"RTN","XPDIL",42,0)
 S IO=IO(0)
"RTN","XPDIL",43,0)
 Q
"RTN","XPDIL",44,0)
 ;
"RTN","XPDIL",45,0)
GI N X,XPDSEQ,Y,Z
"RTN","XPDIL",46,0)
 U IO R X:1,Y:1
"RTN","XPDIL",47,0)
 U IO(0) W !!,X,!,"Comment: ",Y
"RTN","XPDIL",48,0)
 S XPDST("H")=Y,XPDST("H1")=Y_"  ;Created on "_$P(X,"KIDS Distribution saved on ",2)
"RTN","XPDIL",49,0)
 U IO F X=1:1 R Z:1 S Z=$P(Z,"**KIDS**",2,99) Q:Z=""  S X(X)=Z
"RTN","XPDIL",50,0)
 U IO(0) I $G(X(1))="" W !!,"This is not a Distribution HFS File!" S XPDQUIT=1 Q
"RTN","XPDIL",51,0)
 I $P(X(1),":")="GLOBALS" S XPDGP=$P(X(1),U,2,99),X(1)=$P(X(1),U)
"RTN","XPDIL",52,0)
 S XPDIT=0,X(1)=$P(X(1),":",2,99)
"RTN","XPDIL",53,0)
 W !!,"This Distribution contains Transport Globals for the following Package(s):"
"RTN","XPDIL",54,0)
 F X=1:1:X-1 F Z=1:1 S Y=$P(X(X),U,Z) Q:Y=""  D  Q:$G(XPDQUIT)
"RTN","XPDIL",55,0)
 .W !?5,Y S XPDIT=XPDIT+1 I '$$INST^XPDIL1(Y) S XPDQUIT=1 Q
"RTN","XPDIL",56,0)
 Q:$G(XPDQUIT)
"RTN","XPDIL",57,0)
 W !
"RTN","XPDIL",58,0)
 D:$D(XPDGP) DISP^XPDIGP
"RTN","XPDIL",59,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIL",60,0)
 D ^DIR I $D(DIRUT)!'Y S XPDQUIT=1 Q
"RTN","XPDIL",61,0)
 W !,"Loading Distribution...",!
"RTN","XPDIL",62,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIL",63,0)
 U IO R X:0,Y:0
"RTN","XPDIL",64,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) U IO(0) W !!,"ERROR in HFS file format!" S XPDQUIT=1 Q
"RTN","XPDIL",65,0)
 S %=XPDT("NM",Y),GR="^XTMP(""XPDI"","_+XPDT(%)_",",XPDSEQ=1
"RTN","XPDIL",66,0)
 F  R X:0,Y:0 Q:X="**END**"  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",67,0)
 .I X="**INSTALL NAME**" D  Q
"RTN","XPDIL",68,0)
 ..S %=+$G(XPDT("NM",Y)) I '% S DIRUT=1 Q
"RTN","XPDIL",69,0)
 ..S GR="^XTMP(""XPDI"","_+XPDT(%)_","
"RTN","XPDIL",70,0)
 .I X="**CONTINUE**" D NEXTD Q
"RTN","XPDIL",71,0)
 .S @(GR_X)=Y
"RTN","XPDIL",72,0)
 U IO(0)
"RTN","XPDIL",73,0)
 Q
"RTN","XPDIL",74,0)
 ;
"RTN","XPDIL",75,0)
NEXTD I ^%ZOSF("OS")'["MSM" U IO(0) W !!,"Error in disk, ABORTING load!!" S XPDQUIT=1 Q
"RTN","XPDIL",76,0)
 N DIR
"RTN","XPDIL",77,0)
 C IO U IO(0)
"RTN","XPDIL",78,0)
 S XPDSEQ=XPDSEQ+1,DIR(0)="E",DIR("A")="Insert the next diskette, #"_XPDSEQ_", and Press the return key",DIR("?")="This distribution is continued on another diskette"
"RTN","XPDIL",79,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDIL",80,0)
 W "  OK",!
"RTN","XPDIL",81,0)
 ;MSM specific code to open HFS
"RTN","XPDIL",82,0)
 O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDIL",83,0)
 R X:0,Y:0
"RTN","XPDIL",84,0)
 G:Y'=XPDST("H") NEXTQ
"RTN","XPDIL",85,0)
 R Y:0,Z:0 G:Y'=("**SEQ**:"_XPDSEQ) NEXTQ
"RTN","XPDIL",86,0)
 Q
"RTN","XPDIL",87,0)
NEXTQ U IO(0) W !!,"This is NOT the correct diskette!!  The comment on this diskette is:",!,X,!!
"RTN","XPDIL",88,0)
 S XPDSEQ=XPDSEQ-1
"RTN","XPDIL",89,0)
 G NEXTD
"RTN","XPDIL",90,0)
 ;
"RTN","XPDIL",91,0)
NONE W !!,"**NOTHING LOADED**",!
"RTN","XPDIL",92,0)
 Q
"RTN","XPDIL1")
0^5^B22836317
"RTN","XPDIL1",1,0)
XPDIL1 ;SFISC/RSD - cont. of load Distribution Global ;09/09/96  09:57
"RTN","XPDIL1",2,0)
 ;;8.0;KERNEL;**15,17,39,41,44**;Jul 10, 1995
"RTN","XPDIL1",3,0)
 ;
"RTN","XPDIL1",4,0)
PKG(XPDA) ;check Package file
"RTN","XPDIL1",5,0)
 N D,DIC,XPD,XPDCP,XPDNM,XPDNOQUE,XPDPKG,X,Y,%
"RTN","XPDIL1",6,0)
 S XPDNM=$P(XPDT(XPDIT),U,2) W !?3,XPDNM
"RTN","XPDIL1",7,0)
 ;check KIDS version against sites version, skip if package is Kernel
"RTN","XPDIL1",8,0)
 I $$PKG^XPDUTL(XPDNM)'["KERNEL" D  I $D(XPDQUIT) D ABORT^XPDI(XPDA,1)
"RTN","XPDIL1",9,0)
 .;this is part of a Kernel multi package
"RTN","XPDIL1",10,0)
 .Q:$O(XPDT("NM","KERNEL"))["KERNEL"
"RTN","XPDIL1",11,0)
 .S Y=$G(^XTMP("XPDI",XPDA,"VER"))
"RTN","XPDIL1",12,0)
 .I $$VERSION^XPDUTL("XU")<Y W !!,"BUT I NEED VERSION ",+Y," OF KERNEL!"  S XPDQUIT=1
"RTN","XPDIL1",13,0)
 .I $$VERSION^XPDUTL("VA FILEMAN")<$P(Y,U,2) W !,"BUT I NEED VERSION ",+$P(Y,U,2)," OF VA FILEMAN!" S XPDQUIT=1
"RTN","XPDIL1",14,0)
 ;get national package name
"RTN","XPDIL1",15,0)
 S %=$O(^XTMP("XPDI",XPDA,"PKG",0)),XPDPKG(0)=$G(^(+%,0)),XPDPKG=%
"RTN","XPDIL1",16,0)
 ;XPDPKG=new ien^old ien
"RTN","XPDIL1",17,0)
 I XPDPKG S DIC="^DIC(9.4," D  S XPDPKG=+Y_U_XPDPKG
"RTN","XPDIL1",18,0)
 .S DIC(0)="X",X=$P(XPDPKG(0),U) D ^DIC Q:Y>0
"RTN","XPDIL1",19,0)
 .;if lookup fails try Prefix, C x-ref
"RTN","XPDIL1",20,0)
 .S X=$P(XPDPKG(0),U,2),D="C" D IX^DIC
"RTN","XPDIL1",21,0)
 ;add package to Install file
"RTN","XPDIL1",22,0)
 I XPDPKG>0 S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIL1",23,0)
 ;XPDSKPE= does site want to run Environ. Check
"RTN","XPDIL1",24,0)
 I '$G(XPDSKPE) Q:$$ENV(0)=1
"RTN","XPDIL1",25,0)
 ;global package can't have pre or post inits
"RTN","XPDIL1",26,0)
 Q:$D(XPDGP)
"RTN","XPDIL1",27,0)
 ;create pre-init checkpoint
"RTN","XPDIL1",28,0)
 S XPDCP="INI" I '$$NEWCP^XPDUTL("XPD PREINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",29,0)
 S %=$$INRTN("INI")
"RTN","XPDIL1",30,0)
 ;check for routine, use as call back
"RTN","XPDIL1",31,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD PREINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",32,0)
 ;create post-init checkpoint
"RTN","XPDIL1",33,0)
 S XPDCP="INIT" I '$$NEWCP^XPDUTL("XPD POSTINSTALL COMPLETED") D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",34,0)
 S %=$$INRTN("INIT")
"RTN","XPDIL1",35,0)
 I $L(%),'$$NEWCP^XPDUTL("XPD POSTINSTALL STARTED",%) D ABORT^XPDI(XPDA,1) Q
"RTN","XPDIL1",36,0)
 ;create fileman and components check points and file rest of data
"RTN","XPDIL1",37,0)
 D XPCK^XPDIK("FIA"),XPCK^XPDIK("KRN")
"RTN","XPDIL1",38,0)
 Q
"RTN","XPDIL1",39,0)
INST(XPDNM) ;add to Install file
"RTN","XPDIL1",40,0)
 N DIC,DIR,DIRUT,DLAYGO,X,XPD,XPDA,XPDIE,XPDDIQ,Y
"RTN","XPDIL1",41,0)
 ;check if Build was already installed
"RTN","XPDIL1",42,0)
 ;XPD=0 abort install, else XPD=ien in Install file
"RTN","XPDIL1",43,0)
 I $D(^XPD(9.7,"B",XPDNM)) S Y=0 D  Q:$D(XPD) XPD
"RTN","XPDIL1",44,0)
 .W !,"The following Entries already exist in the INSTALL file: ",!
"RTN","XPDIL1",45,0)
 .F  S Y=$O(^XPD(9.7,"B",XPDNM,Y)) Q:'Y  D
"RTN","XPDIL1",46,0)
 ..Q:'$D(^XPD(9.7,Y,0))  S %=^(0)
"RTN","XPDIL1",47,0)
 ..W !,$P(%,U),"   "
"RTN","XPDIL1",48,0)
 ..I $P(%,U,9)<3,$D(^XTMP("XPDI",Y)) W "**Transport Global already exists**",*7 S XPD=0 Q
"RTN","XPDIL1",49,0)
 ..W $$EXTERNAL^DILFD(9.7,.02,"",$P(%,U,9)),!,"was loaded on ",$$FMTE^XLFDT($P($G(^XPD(9.7,Y,1)),U))
"RTN","XPDIL1",50,0)
 .;quit if transport global exist
"RTN","XPDIL1",51,0)
 .Q:$D(XPD)
"RTN","XPDIL1",52,0)
 .S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO"
"RTN","XPDIL1",53,0)
 .D ^DIR I $D(DIRUT)!'Y S XPD=0 Q
"RTN","XPDIL1",54,0)
 S DIC="^XPD(9.7,",DIC(0)="XL",DLAYGO=9.7,X=""""_XPDNM_""""
"RTN","XPDIL1",55,0)
 ;add to Install file, must be new
"RTN","XPDIL1",56,0)
 D ^DIC
"RTN","XPDIL1",57,0)
 I Y<0 W !,"Can't add Build ",XPDNM," to Install File" Q 0
"RTN","XPDIL1",58,0)
 ;set starting package to Y, if it is not already defined
"RTN","XPDIL1",59,0)
 S:'XPDST XPDST=+Y
"RTN","XPDIL1",60,0)
 ;XPDT array keeps track of all packages in this distribution
"RTN","XPDIL1",61,0)
 S XPDA=+Y,XPDT(XPDIT)=XPDA_U_XPDNM,(XPDT("DA",XPDA),XPDT("NM",XPDNM))=XPDIT
"RTN","XPDIL1",62,0)
 S %="XPDIE(9.7,"""_XPDA_","")",@%@(.02)=0,@%@(2)=$$NOW^XLFDT,@%@(3)=XPDST,@%@(4)=XPDIT,@%@(5)="",@%@(6)=XPDST("H1")
"RTN","XPDIL1",63,0)
 D FILE^DIE("","XPDIE")
"RTN","XPDIL1",64,0)
 Q XPDA
"RTN","XPDIL1",65,0)
 ;
"RTN","XPDIL1",66,0)
 ;XPDQUIT quit current package install, 1=kill global, 2=leave global
"RTN","XPDIL1",67,0)
 ;XPDQUIT(package) quit package install, 1=kill, 2=leave
"RTN","XPDIL1",68,0)
 ;XPDABORT quit the entire distribution, 1=kill, 2=leave
"RTN","XPDIL1",69,0)
 ;XPDENV 0=loading distribution, 1=installing
"RTN","XPDIL1",70,0)
ENV(XPDENV) ;enviroment check & version check
"RTN","XPDIL1",71,0)
 ;returns 0=ok, 1=rejected kill global, 2=rejected leave global
"RTN","XPDIL1",72,0)
 N %,XPDI,XPDQUIT,XPDABORT
"RTN","XPDIL1",73,0)
 ;check version number, must be greater than existing version
"RTN","XPDIL1",74,0)
 I XPDPKG>0 S %=$$VER^XPDUTL(XPDNM) I %<$G(^DIC(9.4,+XPDPKG,"VERSION")) W !,"You have a Version greater than mine!",! D ABORT^XPDI(XPDA,1) Q 1
"RTN","XPDIL1",75,0)
 S %=$$REQB Q:% %
"RTN","XPDIL1",76,0)
 S %=$G(^XTMP("XPDI",XPDA,"PRE")) D:%]""
"RTN","XPDIL1",77,0)
 .W !,"Will first run the Environment Check Routine, ",%,!
"RTN","XPDIL1",78,0)
 .D SAVE^XPDIJ(%),@("^"_%)
"RTN","XPDIL1",79,0)
 I $G(XPDABORT) D  Q XPDABORT
"RTN","XPDIL1",80,0)
 .;if during load & leave global quit
"RTN","XPDIL1",81,0)
 .I 'XPDENV,XPDABORT=2 Q
"RTN","XPDIL1",82,0)
 .D ABRTALL^XPDI(XPDABORT)
"RTN","XPDIL1",83,0)
 Q:'$D(XPDQUIT) 0
"RTN","XPDIL1",84,0)
 I $G(XPDQUIT) D ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",85,0)
 S XPDI=""
"RTN","XPDIL1",86,0)
 ;don't do if loading & leave global, need to keep XPDT(array)
"RTN","XPDIL1",87,0)
 F  S XPDI=$O(XPDQUIT(XPDI)) Q:XPDI=""  D:'(XPDQUIT(XPDI)=2&'XPDENV)
"RTN","XPDIL1",88,0)
 .S %=$G(XPDT("NM",XPDI)) D:% ABORT^XPDI(+XPDT(%),XPDQUIT(XPDI))
"RTN","XPDIL1",89,0)
 S XPDQUIT=$S($G(XPDQUIT):XPDQUIT,'$O(XPDT(0))!'$D(^XTMP("XPDI",XPDA)):1,1:0)
"RTN","XPDIL1",90,0)
 Q XPDQUIT
"RTN","XPDIL1",91,0)
 ;
"RTN","XPDIL1",92,0)
REQB() ;check for Required Builds
"RTN","XPDIL1",93,0)
 ;returns 0=ok, 1=failed leave global, 2=failed kill global
"RTN","XPDIL1",94,0)
 N XPDACT,XPDBLD,XPDI,XPDQ,XPDQUIT,XPDX,XPDX0,X,Y
"RTN","XPDIL1",95,0)
 S XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDQUIT=0,XPDI=0
"RTN","XPDIL1",96,0)
 Q:'$D(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"REQB")) 0
"RTN","XPDIL1",97,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"REQB",XPDI)) Q:'XPDI  S XPDX0=^(XPDI,0) D
"RTN","XPDIL1",98,0)
 .S XPDQ=0,XPDX=$P(XPDX0,U),XPDACT=$P(XPDX0,U,2)
"RTN","XPDIL1",99,0)
 .I XPDX["*" S:'$$PATCH^XPDUTL(XPDX) XPDQ=1
"RTN","XPDIL1",100,0)
 .E  S X=$$PKG^XPDUTL(XPDX),Y=$$VER^XPDUTL(XPDX) S:$$VERSION^XPDUTL(X)<Y XPDQ=2
"RTN","XPDIL1",101,0)
 .Q:'XPDQ  S XPDQUIT=$S(XPDACT>XPDQUIT:XPDACT,1:XPDQUIT)
"RTN","XPDIL1",102,0)
 .;XPDACT=0 warning, =1 abort & kill global, =2 abort
"RTN","XPDIL1",103,0)
 .W !!,$S(XPDACT:"**INSTALL ABORTED**",1:"**WARNING**")_$S(XPDQ=1:" Patch ",1:" Package ")_XPDX_" is Required "_$S(XPDACT:"to install",1:"for")_" this package!!",!
"RTN","XPDIL1",104,0)
 Q:'XPDQUIT 0
"RTN","XPDIL1",105,0)
 ;don't do if leave global and loading
"RTN","XPDIL1",106,0)
 D:'(XPDQUIT=2&'XPDENV) ABORT^XPDI(XPDA,XPDQUIT)
"RTN","XPDIL1",107,0)
 Q XPDQUIT
"RTN","XPDIL1",108,0)
 ;
"RTN","XPDIL1",109,0)
 ;return a routine that can be run
"RTN","XPDIL1",110,0)
INRTN(X) N Y
"RTN","XPDIL1",111,0)
 S Y=$G(^XTMP("XPDI",XPDA,X)) Q:Y="" ""
"RTN","XPDIL1",112,0)
 S Y=$S(Y["^":Y,1:"^"_Y)
"RTN","XPDIL1",113,0)
 Q Y
"RTN","XPDIP")
0^14^B35521099
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;09/13/96  08:40
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21,28,30,41,44**;Jul 10, 1995
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file, OLDA=old Package ien
"RTN","XPDIP",9,0)
 S Y=$$PKGADD,XPDPKG=$P(Y,U),OLDA=$P(Y,U,2)
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'XPDPKG PKGEND
"RTN","XPDIP",12,0)
 ;update version multiple
"RTN","XPDIP",13,0)
 S DA=XPDPKG D PKGV
"RTN","XPDIP",14,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",15,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",16,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",17,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",18,0)
 ;OERR Package Parameter multiple in file 100.99
"RTN","XPDIP",19,0)
 D:$D(^ORD(100.99))&$D(^XTMP("XPDI",XPDA,"OER",OLDA))
"RTN","XPDIP",20,0)
 .S DA=XPDPKG,DA(1)=1,DIK="^ORD(100.99,1,5," D:$D(^ORD(100.99,1,5,DA)) ^DIK
"RTN","XPDIP",21,0)
 .S:'$D(^ORD(100.99,1,5,0)) ^ORD(100.99,1,5,0)=U_$P(^DD(100.99,5,0),U,2) S $P(^(0),U,3,4)=DA_U_($P(^(0),U,3)+1)
"RTN","XPDIP",22,0)
 .M ^ORD(100.99,1,5,DA)=^XTMP("XPDI",XPDA,"OER",OLDA) S $P(^(DA,0),U)=DA,%=$P(^(0),U,4)
"RTN","XPDIP",23,0)
 .S:$L(%) $P(^ORD(100.99,1,5,DA,0),U,4)=$$LK^XPDIA("^ORD(100.98)",%)
"RTN","XPDIP",24,0)
 .D IX1^DIK
"RTN","XPDIP",25,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",26,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",27,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D
"RTN","XPDIP",28,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",29,0)
 .I $P(%,U)="y",$P(%,U,2)="y",$L($P(%,U,3)) S $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",30,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",31,0)
 Q
"RTN","XPDIP",32,0)
PKGADD() ;check Package file, add if not there
"RTN","XPDIP",33,0)
 ;return new Package file ien^old ien
"RTN","XPDIP",34,0)
 N DA,DIK,XPD,XPDFIL,XPDO,X,Y
"RTN","XPDIP",35,0)
 S DA=+$P(^XPD(9.7,XPDA,0),U,2),XPDO=+$O(^XTMP("XPDI",XPDA,"PKG",0)),X=$P($G(^(XPDO,0)),U)
"RTN","XPDIP",36,0)
 I DA,$D(^DIC(9.4,DA,0)) Q DA_U_XPDO
"RTN","XPDIP",37,0)
 ;quit if there was no package entry sent
"RTN","XPDIP",38,0)
 Q:'XPDO "0^0"
"RTN","XPDIP",39,0)
 S XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,X) Q:'Y "0^0"
"RTN","XPDIP",40,0)
 S DA=+Y
"RTN","XPDIP",41,0)
 ;if new entry in package file, bring in everything
"RTN","XPDIP",42,0)
 I $P(Y,U,3) D
"RTN","XPDIP",43,0)
 .M ^DIC(9.4,DA)=^XTMP("XPDI",XPDA,"PKG",XPDO)
"RTN","XPDIP",44,0)
 .;kill the -1 flag node first
"RTN","XPDIP",45,0)
 .K ^DIC(9.4,DA,-1)
"RTN","XPDIP",46,0)
 .;re-cross ref after adding a new package
"RTN","XPDIP",47,0)
 .S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",48,0)
 ;add package to file 9.7
"RTN","XPDIP",49,0)
 S XPD(9.7,XPDA_",",1)=DA D FILE^DIE("","XPD")
"RTN","XPDIP",50,0)
 Q DA_U_XPDO
"RTN","XPDIP",51,0)
 ;
"RTN","XPDIP",52,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",53,0)
 N %,DA,DIK,XPDFIL,Y
"RTN","XPDIP",54,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",55,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",56,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",57,0)
 S DA=+Y
"RTN","XPDIP",58,0)
 ;Build entry not new, remove old data
"RTN","XPDIP",59,0)
 I '$P(Y,U,3) S %=$P(^XPD(9.6,DA,0),U,2) K ^XPD(9.6,DA) K:% ^XPD(9.6,"C",%,DA)
"RTN","XPDIP",60,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",61,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",62,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",63,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",64,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",65,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",66,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",67,0)
 Q DA
"RTN","XPDIP",68,0)
 ;
"RTN","XPDIP",69,0)
 ;update the version multiple in the package file
"RTN","XPDIP",70,0)
PKGV N %
"RTN","XPDIP",71,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",72,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",73,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",74,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",75,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",76,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",77,0)
 ;update patch history multiple
"RTN","XPDIP",78,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=$P(^(0),U) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",79,0)
 S:$P(^XPD(9.7,XPDA,2),XPDNM,2)["SEQ #" %=%_$P(^(2),XPDNM,2)
"RTN","XPDIP",80,0)
 S $P(%,U,2,3)=DT_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",81,0)
 Q
"RTN","XPDIP",82,0)
 ;
"RTN","XPDIP",83,0)
PKGVER(XPDA,XPDI) ;update version in package file, XPDA=ien, return ien
"RTN","XPDIP",84,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",85,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",86,0)
 N I,X,XPD,XPDIEN,XPDJ,XPDV
"RTN","XPDIP",87,0)
 S XPDIEN=","_XPDA_",",XPDV=$$MDIC(9.49,XPDIEN,$P(XPDI,U)) Q:'XPDV 0
"RTN","XPDIP",88,0)
 S XPD(9.4,XPDA_",",13)=$P(XPDI,U),X="XPD(9.49,"""_XPDV_XPDIEN_""")"
"RTN","XPDIP",89,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",90,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",91,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",92,0)
 Q XPDV
"RTN","XPDIP",93,0)
 ;
"RTN","XPDIP",94,0)
PKGPAT(XPDA,XPDV,XPDI) ;update patch history, XPDA=ien, XPDV=version
"RTN","XPDIP",95,0)
 ;XPDI=patch^date installed^install by,   returns version ien^patch ien
"RTN","XPDIP",96,0)
 N I,X,XPD,XPDP
"RTN","XPDIP",97,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",98,0)
 S XPDIEN=","_XPDA_",",XPDV=$$MDIC(9.49,XPDIEN,XPDV) Q:'XPDV 0
"RTN","XPDIP",99,0)
 S XPDIEN=","_XPDV_XPDIEN,XPDP=$$MDIC(9.4901,XPDIEN,$P(XPDI,U)) Q:'XPDP 0
"RTN","XPDIP",100,0)
 S X="XPD(9.4901,"""_XPDP_XPDIEN_""")"
"RTN","XPDIP",101,0)
 F I=.02,.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",102,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",103,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",104,0)
 Q XPDV_U_XPDP
"RTN","XPDIP",105,0)
 ;
"RTN","XPDIP",106,0)
 ;XPDF=subfile #,XPDIEN=ien string, X=input
"RTN","XPDIP",107,0)
MDIC(XPDF,XPDIEN,XPDX) ;
"RTN","XPDIP",108,0)
 N DIERR,XPD,XPDN
"RTN","XPDIP",109,0)
 D FIND^DIC(XPDF,XPDIEN,"","XQf",XPDX,5,"","","","XPD")
"RTN","XPDIP",110,0)
 ;one or more matches, just return first one
"RTN","XPDIP",111,0)
 I $G(XPD(0)) D:XPD(0)>1  Q XPD(1)
"RTN","XPDIP",112,0)
 .N %
"RTN","XPDIP",113,0)
 .S %(1)=$P(^DD(XPDF,.01,0),U)_"  "_XPDX_"  is Duplicated,",%(2)=" only ien #"_XPD(1)_" was updated."
"RTN","XPDIP",114,0)
 .D MES^XPDUTL(.%)
"RTN","XPDIP",115,0)
 ;add a new entry
"RTN","XPDIP",116,0)
 S XPDN(XPDF,"+1"_XPDIEN,.01)=XPDX K XPD
"RTN","XPDIP",117,0)
 D UPDATE^DIE("","XPDN","XPD")
"RTN","XPDIP",118,0)
 I '$G(XPD(1)) D BMES^XPDUTL(" "_$P(^DD(XPDF,.01,0),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIP",119,0)
 Q XPD(1)
"RTN","XPDIP",120,0)
 ;
"RTN","XPDIP",121,0)
RTN ;move rtns to install file
"RTN","XPDIP",122,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X
"RTN","XPDIP",123,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",124,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ=""
"RTN","XPDIP",125,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",126,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",127,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",128,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",129,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",130,0)
 .;XPDR, build array to update ROUTINE file
"RTN","XPDIP",131,0)
 .S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",132,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",133,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",134,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",135,0)
 .S XPDI=0
"RTN","XPDIP",136,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",137,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",138,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",139,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",140,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",141,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",142,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",143,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",144,0)
 ;compile template routines
"RTN","XPDIP",145,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",146,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",147,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",148,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",149,0)
 ;update Routine file
"RTN","XPDIP",150,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",151,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",152,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",153,0)
 Q
"RTN","XPDIU")
0^15^B11779646
"RTN","XPDIU",1,0)
XPDIU ;SFISC/RSD - UNload/Convert/Rollup Distribution Global ;10/04/96  13:33
"RTN","XPDIU",2,0)
 ;;8.0;KERNEL;**15,41,44**;Jul 10, 1995
"RTN","XPDIU",3,0)
EN1 ;unload
"RTN","XPDIU",4,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDT,XPDQ,XPDQUIT,Y
"RTN","XPDIU",5,0)
 S DA=0 F  S DA=$O(^XTMP("XPDI",DA)) Q:'DA  I '$D(^XPD(9.7,DA)) K ^XTMP("XPDI",DA)
"RTN","XPDIU",6,0)
 ;must be Loaded or Queued and be the starting package
"RTN","XPDIU",7,0)
 S DA=$$LOOK^XPDI("I $P(^(0),U,9)<2,$D(^XPD(9.7,""ASP"",Y,1,Y))") Q:'DA
"RTN","XPDIU",8,0)
 S XPDQ=^XPD(9.7,DA,0),DIR(0)="Y",DIR("A")="Want to continue with the Unload of this Distribution",DIR("B")="NO"
"RTN","XPDIU",9,0)
 S DIR("?")="YES will delete the Transport Global and the entry in the Install file for these Packages."
"RTN","XPDIU",10,0)
 I $P(XPDQ,U,9)=1,$P(XPDQ,U,6) W !,"This Distribution is Queued for Install with task number ",$P(XPDQ,U,6),!,"Don't forget to delete Taskman Task."
"RTN","XPDIU",11,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDIU",12,0)
 S XPD=0,DIK="^XPD(9.7,"
"RTN","XPDIU",13,0)
 F  S XPD=$O(XPDT(XPD)) Q:'XPD  S DA=+XPDT(XPD) D ^DIK K ^XTMP("XPDI",DA)
"RTN","XPDIU",14,0)
 ;check if Out-Of-Order setname is defined, kill it
"RTN","XPDIU",15,0)
 I $D(^XTMP("XQOO",$P(XPDQ,U))) K ^($P(XPDQ,U))
"RTN","XPDIU",16,0)
 Q
"RTN","XPDIU",17,0)
EN2 ;convert
"RTN","XPDIU",18,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDBLD,XPDI,XPDNM,XPDPKG,XPDPMT,XPDT,XPDQUIT,Y
"RTN","XPDIU",19,0)
 S XPDI=$$LOOK^XPDI("I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y))") Q:'XPDI
"RTN","XPDIU",20,0)
 K XPDT("DA"),XPDT("NM")
"RTN","XPDIU",21,0)
 S XPDT=0 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D
"RTN","XPDIU",22,0)
 .S Y=+XPDT(XPDT) Q:$D(^XTMP("XPDI",Y))
"RTN","XPDIU",23,0)
 .W !,$P(XPDT(XPDT),U,2),"   ** Transport Global doesn't exist **",$C(7)
"RTN","XPDIU",24,0)
 .K XPDT(XPDT) S XPDQUIT=1
"RTN","XPDIU",25,0)
 Q:$D(XPDT)'>9!$D(XPDQUIT)
"RTN","XPDIU",26,0)
 S DIR(0)="Y",DIR("A")="Want to make the Transport Globals Permanet",DIR("B")="NO"
"RTN","XPDIU",27,0)
 S DIR("?",1)="YES will leave the Transport Global so you can transport this TG in mulitple Distributions."
"RTN","XPDIU",28,0)
 S DIR("?")="NO will remove the Transport Global after you transport this TG in the next Distribution."
"RTN","XPDIU",29,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDIU",30,0)
 S XPDPMT=Y,DIR("A")="Want to continue with the Conversion of the Package(s)",DIR("B")="NO"
"RTN","XPDIU",31,0)
 S DIR("?",1)="YES will convert the Packages to globals that can be transported.",DIR("?")="An entry will be added to the Build file and the entry in the Install file will be deleted."
"RTN","XPDIU",32,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDIU",33,0)
 S XPDT=0,DIK="^XPD(9.7,"
"RTN","XPDIU",34,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDQUIT)
"RTN","XPDIU",35,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDPKG=+$O(^XTMP("XPDI",XPDA,"PKG",0))
"RTN","XPDIU",36,0)
 .;resolve the Package file link
"RTN","XPDIU",37,0)
 .D:XPDPKG
"RTN","XPDIU",38,0)
 ..N DIC,X,Y
"RTN","XPDIU",39,0)
 ..S DIC="^DIC(9.4,",DIC(0)="X",X=$P(^XTMP("XPDI",XPDA,"PKG",XPDPKG,0),U)
"RTN","XPDIU",40,0)
 ..D ^DIC I Y<0 S XPDPKG=0 Q
"RTN","XPDIU",41,0)
 ..S XPDPKG=+Y
"RTN","XPDIU",42,0)
 .S DA=$$BLD^XPDIP(XPDBLD) D:DA
"RTN","XPDIU",43,0)
 ..S ^XTMP("XPDT",DA)=XPDPMT M ^XTMP("XPDT",DA)=^XTMP("XPDI",XPDA)
"RTN","XPDIU",44,0)
 .I 'DA W !,XPDNM,"   ** Couldn't add to Build file **" S XPDQUIT=1 Q
"RTN","XPDIU",45,0)
 .;kill Install file entry
"RTN","XPDIU",46,0)
 .S DA=XPDA D ^DIK
"RTN","XPDIU",47,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIU",48,0)
 W !,"  ** DONE **",!
"RTN","XPDIU",49,0)
 Q
"RTN","XPDR")
0^16^B49327107
"RTN","XPDR",1,0)
XPDR ;SFISC/RSD - Routine File Edit ;09/17/96  10:05
"RTN","XPDR",2,0)
 ;;8.0;KERNEL;**1,2,44**;Jul 10, 1995
"RTN","XPDR",3,0)
 Q
"RTN","XPDR",4,0)
UPDT ;update routine file
"RTN","XPDR",5,0)
 N DIR,DIRUT,XPD,XPDI,XPDJ,XPDN,X,X1,Y,Y1,% W !
"RTN","XPDR",6,0)
 W ! S DIR(0)="FO^1:9^K:X'?.1""-""1U.7UNP X",DIR("A")="Routine Namespace",DIR("?")="Enter 1 to 8 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDR",7,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDR",8,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDR",9,0)
 Q:'$D(XPDN)!$D(DTOUT)!$D(DUOUT)
"RTN","XPDR",10,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDR",11,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDR",12,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDR",13,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDR",14,0)
 K DIR S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",15,0)
 Q:'Y!$D(DIRUT)  W !
"RTN","XPDR",16,0)
 S DIR(0)="Y",DIR("A")="Want me to clean up the Routine File before updating",DIR("?")="YES means you want to go throught the Routine file and delete any routine name that no longer exists on the system."
"RTN","XPDR",17,0)
 D ^DIR
"RTN","XPDR",18,0)
 Q:$D(DIRUT)  D WAIT^DICD,DELRTN:Y
"RTN","XPDR",19,0)
 ;loop thru include list XPDN(1,XPDI)
"RTN","XPDR",20,0)
 S XPDI="" F  S XPDI=$O(XPDN(1,XPDI)) Q:XPDI=""  D
"RTN","XPDR",21,0)
 .S XPDJ=XPDI D:$D(^$R(XPDJ))  F  S XPDJ=$O(^$R(XPDJ)) Q:XPDJ=""!($P(XPDJ,XPDI)]"")  D
"RTN","XPDR",22,0)
 ..;if name XPDJ is in the exclude list, XPDN(0,XPDJ) or in Routine file, quit
"RTN","XPDR",23,0)
 ..Q:$D(XPDN(0,XPDJ))!$O(^DIC(9.8,"B",XPDJ,0))
"RTN","XPDR",24,0)
 ..;check if XPDJ is refered in the namespace by checking the subscript
"RTN","XPDR",25,0)
 ..;before XPDJ, if sub exist and $P(XPDJ,sub)="" then it is part of the
"RTN","XPDR",26,0)
 ..;namespace, quit
"RTN","XPDR",27,0)
 ..S %=$O(XPDN(0,XPDJ),-1) I $L(%),$P(XPDJ,%)="" Q
"RTN","XPDR",28,0)
 ..N XPD S XPD(9.8,"+1,",.01)=XPDJ,XPD(9.8,"+1,",1)="R"
"RTN","XPDR",29,0)
 ..D ADD^DICA("","XPD")
"RTN","XPDR",30,0)
 W "    ...Done.",!
"RTN","XPDR",31,0)
 Q
"RTN","XPDR",32,0)
VER ;verify Routine file
"RTN","XPDR",33,0)
 N DIR,DIRUT,X,Y
"RTN","XPDR",34,0)
 W !,"I will delete all entries in the Routine File in which",!,"the Routine no longer exist on this system!",!
"RTN","XPDR",35,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",36,0)
 Q:'Y!$D(DIRUT)  D DELRTN
"RTN","XPDR",37,0)
 W "    ...Done.",!
"RTN","XPDR",38,0)
 Q
"RTN","XPDR",39,0)
DELRTN ;delete routine file entries
"RTN","XPDR",40,0)
 N DA,DIK,Y
"RTN","XPDR",41,0)
 S DIK="^DIC(9.8,",DA=0
"RTN","XPDR",42,0)
 F  S DA=$O(^DIC(9.8,DA)) Q:'DA  S Y=$G(^(DA,0)) I $P(Y,U,2)="R",$T(^@$P(Y,U))="" D ^DIK
"RTN","XPDR",43,0)
 Q
"RTN","XPDR",44,0)
PURGE ;purge file
"RTN","XPDR",45,0)
 N DA,DIK,DIR,DIRUT,X,XPD,XPDF,XPDI,XPDJ,XPDL,XPDN,XPDPG,XPDS,XPDUL,Y,Z
"RTN","XPDR",46,0)
 S DIR("?")="Enter the file you want to purge the data from.",DIR(0)="SM^B:Build;I:Install;ALL:Build & Install",DIR("A")="Purge from what file(s)"
"RTN","XPDR",47,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDR",48,0)
 S XPDF=$S(Y="I":9.7,1:9.6) S:Y="ALL" XPDF(1)=9.7
"RTN","XPDR",49,0)
 K DIR S DIR("?")="Enter the number of Versions to keep in the file, for each package",DIR(0)="N^0:100:0",DIR("A")="Versions to Retain",DIR("B")=1
"RTN","XPDR",50,0)
 D ^DIR Q:$D(DIRUT)  S XPDN=Y
"RTN","XPDR",51,0)
 K DIR
"RTN","XPDR",52,0)
 S DIR(0)="FO^3:30",DIR("?")="^D PURGEH^XPDR",DIR("A")="Package Name",DIR("B")="ALL"
"RTN","XPDR",53,0)
 F  D ^DIR Q:$D(DIRUT)  S XPD(X)="" Q:X="ALL"  K DIR("B") S DIR("A")="Another Package Name"
"RTN","XPDR",54,0)
 Q:'$D(XPD)
"RTN","XPDR",55,0)
 ;if they want all, make sure all is the only one
"RTN","XPDR",56,0)
 I $D(XPD("ALL")) K XPD S XPD("ALL")=""
"RTN","XPDR",57,0)
 ;XPDF(1) is defined if doing both files, do purge twice
"RTN","XPDR",58,0)
 K ^TMP($J) D PURGE1(XPDF),PURGE1($G(XPDF(1))):$D(XPDF(1))
"RTN","XPDR",59,0)
 I '$D(^TMP($J)) W !!,"No match found" Q
"RTN","XPDR",60,0)
 K XPD,DIR
"RTN","XPDR",61,0)
 S DIR(0)="E",$P(XPDUL,"-",IOM)=""
"RTN","XPDR",62,0)
 ;if ALL, reset XPDF to next file and Do, then reset back to 9.6
"RTN","XPDR",63,0)
 D  I $D(XPDF(1)) D ^DIR I Y S XPDF=XPDF(1) D  S XPDF=9.6
"RTN","XPDR",64,0)
 .S XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS),XPDPG=1,Y=1
"RTN","XPDR",65,0)
 .W @IOF D HDR
"RTN","XPDR",66,0)
 .;loop thru ^TMP($J,file,package) & show list, quit if user "^"
"RTN","XPDR",67,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D  Q:'Y
"RTN","XPDR",68,0)
 ..S Z=@XPD W $P(Z,"^"),$S($P(Z,"^",3):"  (duplicates)",1:""),! Q:$Y<(IOSL-4)
"RTN","XPDR",69,0)
 ..D ^DIR Q:'Y
"RTN","XPDR",70,0)
 ..S XPDPG=XPDPG+1 W @IOF D HDR
"RTN","XPDR",71,0)
 S DIR(0)="Y",DIR("A")="OK to DELETE these entries",DIR("B")="NO"
"RTN","XPDR",72,0)
 W !! D ^DIR
"RTN","XPDR",73,0)
 I $D(DIRUT)!'Y W !!,"Nothing Purged" Q
"RTN","XPDR",74,0)
 ;loop thru and delete
"RTN","XPDR",75,0)
 D  I $D(XPDF(1)) S XPDF=XPDF(1) D
"RTN","XPDR",76,0)
 .S DIK="^XPD("_XPDF_",",XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS)
"RTN","XPDR",77,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D
"RTN","XPDR",78,0)
 ..S XPDI=@XPD F XPDJ=2:1 S DA=$P(XPDI,"^",XPDJ) Q:'DA  D ^DIK
"RTN","XPDR",79,0)
 Q
"RTN","XPDR",80,0)
 ;
"RTN","XPDR",81,0)
PURGE1(XPDF) ;XPDF=file #
"RTN","XPDR",82,0)
 N XPDFL,XPDI,XPDJ,XPDP,XPDV,Y,Z
"RTN","XPDR",83,0)
 W "."
"RTN","XPDR",84,0)
 ;if All, loop thru B x-ref
"RTN","XPDR",85,0)
 I $D(XPD("ALL")) D
"RTN","XPDR",86,0)
 .S XPDI=""
"RTN","XPDR",87,0)
 .F  S XPDI=$O(^XPD(XPDF,"B",XPDI)) Q:XPDI=""  D
"RTN","XPDR",88,0)
 ..S X=$$PKG^XPDUTL(XPDI) D PURGE2(X)
"RTN","XPDR",89,0)
 ..W "."
"RTN","XPDR",90,0)
 E  S XPDI="" F  S XPDI=$O(XPD(XPDI)) Q:XPDI=""  D
"RTN","XPDR",91,0)
 .D PURGE2(XPDI)
"RTN","XPDR",92,0)
 .W "."
"RTN","XPDR",93,0)
 ;loop thru each package, XPDP=package name
"RTN","XPDR",94,0)
 S XPDP="" F  S XPDP=$O(^TMP($J,XPDF,XPDP)) Q:XPDP=""  D
"RTN","XPDR",95,0)
 .S XPDV="",XPDL=XPDN
"RTN","XPDR",96,0)
 .;the last is the most recent, XPDN = number to retain, XPDV=version
"RTN","XPDR",97,0)
 .;XPDS=type (T/V/Z)
"RTN","XPDR",98,0)
 .F  S XPDV=$O(^TMP($J,XPDF,XPDP,XPDV),-1),XPDS="" Q:'XPDV!'XPDL  F  S XPDS=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS),-1) Q:XPDS=""!'XPDL  D
"RTN","XPDR",99,0)
 ..S Y="" F  S Y=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y),-1) Q:Y=""!'XPDL  D
"RTN","XPDR",100,0)
 ...I $D(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y))#2 K ^(Y) S XPDL=XPDL-1 Q
"RTN","XPDR",101,0)
 ...S Z="" F  S Z=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y,Z),-1) Q:Z=""!'XPDL  K ^(Z) S XPDL=XPDL-1
"RTN","XPDR",102,0)
 Q
"RTN","XPDR",103,0)
 ;
"RTN","XPDR",104,0)
PURGE2(XPDX) ;XPDX=package name
"RTN","XPDR",105,0)
 ;XPDFL=1 this is not a patch, quit when we find a patch during loop
"RTN","XPDR",106,0)
 S XPDS=XPDX,XPDL=$L(XPDX),XPDFL=XPDX'["*"
"RTN","XPDR",107,0)
 ;loop and find matches
"RTN","XPDR",108,0)
 D  F  S XPDS=$O(^XPD(XPDF,"B",XPDS)) Q:XPDS=""!($E(XPDS,1,XPDL)'=XPDX)!($S(XPDFL:XPDS["*",1:0))  D
"RTN","XPDR",109,0)
 .S Y=$O(^XPD(XPDF,"B",XPDS,0)) Q:'Y
"RTN","XPDR",110,0)
 .Q:'$D(^XPD(XPDF,Y,0))  S Z=^(0),Y=XPDS_"^"_Y
"RTN","XPDR",111,0)
 .;can't delete Installs that status isn't 'Install Completed'
"RTN","XPDR",112,0)
 .I XPDF=9.7 Q:$P(Z,U,9)<3
"RTN","XPDR",113,0)
 .S XPDV=$$VER^XPDUTL(XPDS)
"RTN","XPDR",114,0)
 .;TMP($J,file,package name,version,"*","T/V/Z",num,patch)=NAME^DA^duplicat DAs
"RTN","XPDR",115,0)
 .I XPDS["*" D  Q
"RTN","XPDR",116,0)
 ..I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*Z",0,+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",117,0)
 ..I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*T",+$P(XPDV,"T",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",118,0)
 ..I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*V",+$P(XPDV,"V",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",119,0)
 ..S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*",+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2))
"RTN","XPDR",120,0)
 .;TMP($J,file,package name,version,"Z",0)=NAME^DA^duplicate DAs
"RTN","XPDR",121,0)
 .I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"Z",0)=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",122,0)
 .;TMP($J,file,package name,version,"T/V",num)=NAME^DA^dup DAs
"RTN","XPDR",123,0)
 .I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"T",+$P(XPDV,"T",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",124,0)
 .I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"V",+$P(XPDV,"V",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",125,0)
 Q
"RTN","XPDR",126,0)
PURGEH ;executable help from DIR call at PURGE+8
"RTN","XPDR",127,0)
 W:$E(DIR("A"),1)="P" !,"Enter 'ALL' to purge all packages, or"
"RTN","XPDR",128,0)
 W !,"Enter the name of the Package you want to Purge.",!," i.e. KERNEL 8.0  will purge version 8.0Tx and 8.0Vx",!,"      XU*8.0 will purge all patches for 8.0",!
"RTN","XPDR",129,0)
 N DIR,X,Y
"RTN","XPDR",130,0)
 S DIR(0)="Y",DIR("A")="Want to see the "_$S(XPDF=9.7:"Install File",$D(XPDF(1)):"Build & Install Files",1:"Build File")_" List",DIR("B")="Y"
"RTN","XPDR",131,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDR",132,0)
 D PURGEH1("^XPD(9.6,"):XPDF=9.6,PURGEH1("^XPD(9.7,"):XPDF=9.7!$D(XPDF(1))
"RTN","XPDR",133,0)
 Q
"RTN","XPDR",134,0)
 ;
"RTN","XPDR",135,0)
DUP(Z,Z1) ;find duplicate, Z=NAME, Z1=last ien
"RTN","XPDR",136,0)
 ;returns Y=DA^dup DA^dup DA...
"RTN","XPDR",137,0)
 N Y S Y=""
"RTN","XPDR",138,0)
 F  S Z1=$O(^XPD(XPDF,"B",Z,Z1)) Q:'Z1  S Y=Y_"^"_Z1
"RTN","XPDR",139,0)
 Q Y
"RTN","XPDR",140,0)
 ;
"RTN","XPDR",141,0)
PURGEH1(DIC) ;
"RTN","XPDR",142,0)
 W !!,$S(DIC[9.6:"BUILD ",1:"INSTALL ")_"File"
"RTN","XPDR",143,0)
 S DIC(0)="QE",X="??" D ^DIC
"RTN","XPDR",144,0)
 Q
"RTN","XPDR",145,0)
 ;
"RTN","XPDR",146,0)
HDR W !,"Package(s) in ",$S(XPDF=9.7:"INSTALL",1:"BUILD")," File, "
"RTN","XPDR",147,0)
 I XPDN W "Retain last ",$S(XPDN=1:"version",1:XPDN_" versions")
"RTN","XPDR",148,0)
 E  W "Don't retain any versions"
"RTN","XPDR",149,0)
 W ?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDR",150,0)
 Q
"RTN","XPDT")
0^17^B55749221
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package; 15 Apr 96 10:15 ;10/04/96  14:02
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41,44**;Jul 10, 1995
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER,X,Y,Z
"RTN","XPDT",9,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",10,0)
 S XPD="First Package Name: ",DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one.",XPDT=0
"RTN","XPDT",11,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",12,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",13,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",14,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",15,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",16,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",17,0)
 .;if type is Global Package, set DIRUT if there is other packages
"RTN","XPDT",18,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q
"RTN","XPDT",19,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",20,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",21,0)
 ..I $D(^XTMP("XPDT",XPDA)) W "  **Cannot have a pre-existing Transport Global**" S DIRUT=1 Q
"RTN","XPDT",22,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",23,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",24,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",25,0)
 ..S XPDERR=1,XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",26,0)
 .Q:$D(XPDERR)
"RTN","XPDT",27,0)
 .;multi-package
"RTN","XPDT",28,0)
 .I $P(Y(0),U,3)=1 D  Q
"RTN","XPDT",29,0)
 ..W "   (Multi-Package)" S X=0
"RTN","XPDT",30,0)
 ..F  S X=$O(^XPD(9.6,XPDA,10,X)) Q:'X  S Z=$P($G(^(X,0)),U) D:Z]""
"RTN","XPDT",31,0)
 ...N XPDA,X
"RTN","XPDT",32,0)
 ...W !?3,Z S XPDA=$O(^XPD(9.6,"B",Z,0))
"RTN","XPDT",33,0)
 ...I 'XPDA W "  **Can't find definition in Build file**" Q
"RTN","XPDT",34,0)
 ...I $D(XPDT("DA",XPDA)) W "  already listed" Q
"RTN","XPDT",35,0)
 ...S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_Z_U,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",36,0)
 ...I $D(^XTMP("XPDT",XPDA)) W "   **Transport Global exists**"
"RTN","XPDT",37,0)
 .S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",38,0)
 .I $D(^XTMP("XPDT",XPDA)) W "     **Transport Global exists**" D
"RTN","XPDT",39,0)
 ..;if TG is permanet then quit
"RTN","XPDT",40,0)
 ..I $G(^XTMP("XPDT",XPDA)) S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",41,0)
 ..;ask if they want to use TG
"RTN","XPDT",42,0)
 ..D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",43,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",44,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",45,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",46,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",47,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",48,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",49,0)
 S DIR(0)="SAO^HF:Host File;PM:PackMan",DIR("A")="Transport through (HF)Host File or (PM)PackMan: ",DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",50,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",51,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",52,0)
 I XPDH="",$D(XPDGP) W !,"**Global Package needs a method of transportation, Transport ABORTED**" Q
"RTN","XPDT",53,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",54,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",55,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",56,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan." G QUIT
"RTN","XPDT",57,0)
 W !!
"RTN","XPDT",58,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",59,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",60,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",61,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",62,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",63,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",64,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",65,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",66,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",67,0)
 ..;can't send global package in packman message
"RTN","XPDT",68,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",69,0)
 ..;verify global package
"RTN","XPDT",70,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",71,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",72,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",73,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",74,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",75,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",76,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",77,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",78,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",79,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",80,0)
 ;if no device then just create transport global
"RTN","XPDT",81,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",82,0)
 Q
"RTN","XPDT",83,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",84,0)
 D HOME^%ZIS
"RTN","XPDT",85,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",86,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",87,0)
 ;if no file, then quit
"RTN","XPDT",88,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",89,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment"
"RTN","XPDT",90,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",91,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",92,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",93,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",94,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",95,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",96,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",97,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",98,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",99,0)
 ;write date and comment header
"RTN","XPDT",100,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",101,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",102,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",103,0)
 U IO(0) Q
"RTN","XPDT",104,0)
 ;
"RTN","XPDT",105,0)
GO S I=1,Y="" U IO
"RTN","XPDT",106,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",107,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",108,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",109,0)
 E  F  D  W $$SUM("**KIDS**:"_Y),! Q:I=XPDT  S Y="",I=I+1
"RTN","XPDT",110,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",111,0)
 ;after the package list write an extra line feed
"RTN","XPDT",112,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",113,0)
 ;loop thru & write global, don't kill if set to permanent, set in XPDIU
"RTN","XPDT",114,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDT",115,0)
 W "**END**",!
"RTN","XPDT",116,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",117,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",118,0)
 ;we're done with device, close it
"RTN","XPDT",119,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",120,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",121,0)
 Q
"RTN","XPDT",122,0)
GW ;global write
"RTN","XPDT",123,0)
 N GR,GCK,GL
"RTN","XPDT",124,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",125,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",126,0)
 ;the next INSTALL NAME
"RTN","XPDT",127,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",128,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",129,0)
 Q
"RTN","XPDT",130,0)
GPW ;global package write
"RTN","XPDT",131,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",132,0)
 W !
"RTN","XPDT",133,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",134,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",135,0)
 .;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",136,0)
 .;the next GLOBAL
"RTN","XPDT",137,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",138,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",139,0)
 Q
"RTN","XPDT",140,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",141,0)
 Q
"RTN","XPDT",142,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",143,0)
 D QUIT
"RTN","XPDT",144,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",145,0)
 D ^%ZISC
"RTN","XPDT",146,0)
 Q
"RTN","XPDT",147,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",148,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",149,0)
 ;ask for next disk
"RTN","XPDT",150,0)
 ;this code is for MSM system only
"RTN","XPDT",151,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",152,0)
 .;write continue flag at end of this file
"RTN","XPDT",153,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",154,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",155,0)
 .C IO U IO(0)
"RTN","XPDT",156,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",157,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",158,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",159,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",160,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",161,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",162,0)
 .;MSM specific code to open HFS
"RTN","XPDT",163,0)
 .O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDT",164,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",165,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDT",166,0)
 Q X
"RTN","XPDT",167,0)
 ;
"RTN","XPDT",168,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",169,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",170,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",171,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",172,0)
 D @Y Q
"RTN","XPDTA")
0^18^B17285143
"RTN","XPDTA",1,0)
XPDTA ;SFISC/RSD - Build Actions for Kernel Files ;09/17/96  08:52
"RTN","XPDTA",2,0)
 ;;8.0;KERNEL;**15,44**;Jul 10, 1995
"RTN","XPDTA",3,0)
 Q
"RTN","XPDTA",4,0)
 ;^XTMP("XPDT",XPDA,"KRN",FILE,DA) is the global root
"RTN","XPDTA",5,0)
 ;DA=ien in ^XTMP,XPDNM=package name, XPDA=package ien in ^XPD(9.6,
"RTN","XPDTA",6,0)
OPT ;options
"RTN","XPDTA",7,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",8,0)
 S %=^XTMP("XPDT",XPDA,"KRN",19,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",9,0)
 ;resolve Help Frame (0;7), kill Permitted Devices (3.96;0) & queue node (200)
"RTN","XPDTA",10,0)
 S $P(%,U,7)=$$PT("^DIC(9.2)",$P(%,U,7)),^XTMP("XPDT",XPDA,"KRN",19,DA,0)=% K ^(3.96),^(200)
"RTN","XPDTA",11,0)
 ;resolve Server Bulletin (220;1), Server Mailgroup (220;3)
"RTN","XPDTA",12,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,220)) S %=^(220),$P(%,U)=$$PT("^XMB(3.6)",+%),$P(%,U,3)=$$PT("^XMB(3.8)",$P(%,U,3)),^XTMP("XPDT",XPDA,"KRN",19,DA,220)=%
"RTN","XPDTA",13,0)
 ;resolve RPC (RPC;0), must be type Broker
"RTN","XPDTA",14,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC")) K:$P(^(0),U,4)'="B" ^("RPC") D
"RTN","XPDTA",15,0)
 .;kill  "B"=name x-ref, it will be re-indexed when installed
"RTN","XPDTA",16,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC","B")
"RTN","XPDTA",17,0)
 .;loop thru RPCs and resolve (RPC;1)
"RTN","XPDTA",18,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",19,0)
 ..S %2=$$PT("^XWB(8994)",+%1)
"RTN","XPDTA",20,0)
 ..;if can't resolve then delete
"RTN","XPDTA",21,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0) Q
"RTN","XPDTA",22,0)
 ..;save the RPC name
"RTN","XPDTA",23,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0),U)=%2
"RTN","XPDTA",24,0)
 .Q
"RTN","XPDTA",25,0)
 ;Menus can only exist for options of type: menu,protocol,protocol menu,
"RTN","XPDTA",26,0)
 ;extended action, limited, window suite
"RTN","XPDTA",27,0)
 I "LMOQXZ"'[$P(^XTMP("XPDT",XPDA,"KRN",19,DA,0),U,4) K ^(10) Q
"RTN","XPDTA",28,0)
 ;kill  "B"=name, "C"=synonyms x-ref, it will be re-indexed when installed
"RTN","XPDTA",29,0)
 K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,"B"),^("C")
"RTN","XPDTA",30,0)
 ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",31,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",32,0)
 .S %2=$$PT("^DIC(19)",+%1)
"RTN","XPDTA",33,0)
 .;items must be sent by themselves, check "B" x-ref
"RTN","XPDTA",34,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",19,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%,U)=%2 Q
"RTN","XPDTA",35,0)
 .;if I couldn't resolve this option, then kill it
"RTN","XPDTA",36,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)
"RTN","XPDTA",37,0)
 Q
"RTN","XPDTA",38,0)
PRO ;protocols
"RTN","XPDTA",39,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",40,0)
 S %=^XTMP("XPDT",XPDA,"KRN",101,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",41,0)
 ;kill under Menus (10), "B"=name, "C"=synonyms
"RTN","XPDTA",42,0)
 S ^XTMP("XPDT",XPDA,"KRN",101,DA,0)=% I $D(^(10,0)) K ^("B"),^("C")
"RTN","XPDTA",43,0)
 ;resolve File Link (5;1), its a variable pointer
"RTN","XPDTA",44,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",101,DA,5)),U),%1=$P(%,";",2)
"RTN","XPDTA",45,0)
 I %,$D(@("^"_%1_+%_",0)")) S $P(^XTMP("XPDT",XPDA,"KRN",101,DA,5),U)=$P(^(0),U)_";"_%1
"RTN","XPDTA",46,0)
 ;resolve HL7 fields, node 770
"RTN","XPDTA",47,0)
 S %=$G(^XTMP("XPDT",XPDA,"KRN",101,DA,770)) I $L(%) D  S ^XTMP("XPDT",XPDA,"KRN",101,DA,770)=%
"RTN","XPDTA",48,0)
 .S $P(%,U)=$$PT("^HL(771)",$P(%,U)),$P(%,U,2)=$$PT("^HL(771)",$P(%,U,2))
"RTN","XPDTA",49,0)
 .S $P(%,U,3)=$$PT("^HL(771.2)",$P(%,U,3)),$P(%,U,11)=$$PT("^HL(771.2)",$P(%,U,11))
"RTN","XPDTA",50,0)
 .S $P(%,U,4)=$$PT("^HL(779.001)",$P(%,U,4)),$P(%,U,7)=$$PT("^HLCS(870)",$P(%,U,7))
"RTN","XPDTA",51,0)
 .S $P(%,U,8)=$$PT("^HL(779.003)",$P(%,U,8)),$P(%,U,9)=$$PT("^HL(779.003)",$P(%,U,9))
"RTN","XPDTA",52,0)
 .S $P(%,U,10)=$$PT("^HL(771.5)",$P(%,U,10))
"RTN","XPDTA",53,0)
 ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",54,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",55,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",56,0)
 .S %2=$$PT("^ORD(101)",+%1)
"RTN","XPDTA",57,0)
 .;Menu must also be sent by itself, check "B" x-ref
"RTN","XPDTA",58,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",101,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,U)=%2,$P(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,0),U,4)=$$PT("^ORD(101)",$P(%1,U,4)) Q
"RTN","XPDTA",59,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)
"RTN","XPDTA",60,0)
 ;quit if no Access multiple
"RTN","XPDTA",61,0)
 Q:'$D(^XTMP("XPDT",XPDA,"KRN",101,DA,3,0))  K ^("B")
"RTN","XPDTA",62,0)
 ;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDTA",63,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",64,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",65,0)
 .S %2=$$PT("^DIC(19.1)",+%1)
"RTN","XPDTA",66,0)
 .I $L(%2) S ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%,0)=%2 Q
"RTN","XPDTA",67,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)
"RTN","XPDTA",68,0)
 Q
"RTN","XPDTA",69,0)
RTNE ;routine entry build action
"RTN","XPDTA",70,0)
 N %,X,XPD
"RTN","XPDTA",71,0)
 ;move routine to ^XTMP("XPDT",DPK1,"RTN",routine name
"RTN","XPDTA",72,0)
 ;routines will have the checksum in XTMP("XPDT",XPDA,"RTN",X) & in
"RTN","XPDTA",73,0)
 ;Build file
"RTN","XPDTA",74,0)
 S X=$P(^XTMP("XPDT",XPDA,"KRN",9.8,DA,0),U),XPD=^(-1)
"RTN","XPDTA",75,0)
 Q:X=""  S %=$$LOAD(X,XPD),$P(^XPD(9.6,XPDA,"KRN",9.8,"NM",+$P(XPD,U,2),0),U,4)=%
"RTN","XPDTA",76,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8,DA)
"RTN","XPDTA",77,0)
 Q
"RTN","XPDTA",78,0)
RTNF ;routine file build action
"RTN","XPDTA",79,0)
 N X,Y,% S Y=0
"RTN","XPDTA",80,0)
 ;the routines that are left in XTMP("XPDT",XPDA,"KRN",9.8) are to be
"RTN","XPDTA",81,0)
 ;deleted at site, move name field to RTN node
"RTN","XPDTA",82,0)
 F  S Y=$O(^XTMP("XPDT",XPDA,"KRN",9.8,Y)) Q:'Y  S %=^(Y,-1),X=^(0) D
"RTN","XPDTA",83,0)
 .I +%=1 S ^XTMP("XPDT",XPDA,"RTN",X)=%,^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",84,0)
 ;kill everything
"RTN","XPDTA",85,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8)
"RTN","XPDTA",86,0)
 Q
"RTN","XPDTA",87,0)
PT(GR,DA) ;GR=file global ref, DA=ien, return .01 value
"RTN","XPDTA",88,0)
 Q:'DA ""
"RTN","XPDTA",89,0)
 I $D(@GR@(+DA,0))#2 Q $P(^(0),U)
"RTN","XPDTA",90,0)
 Q ""
"RTN","XPDTA",91,0)
 ;
"RTN","XPDTA",92,0)
LOAD(X,XPD) ;load routine X, XPD=action^ien in Build file
"RTN","XPDTA",93,0)
 ;XPD = 0-load, 1-delete, 2-skip, returns checksum
"RTN","XPDTA",94,0)
 ;quit if routine is already saved
"RTN","XPDTA",95,0)
 Q:$D(^XTMP("XPDT",XPDA,"RTN",X)) $P(^(X),U,3)
"RTN","XPDTA",96,0)
 N DIF,XCNP,%N
"RTN","XPDTA",97,0)
 S DIF="^XTMP(""XPDT"",XPDA,""RTN"",X,",XCNP=0
"RTN","XPDTA",98,0)
 X ^%ZOSF("LOAD")
"RTN","XPDTA",99,0)
 ;^XTMP("XPDT",XPDA,"RTN",X)=action^ien in Build^checksum
"RTN","XPDTA",100,0)
 S %N=$$SUMB^XPDRSUM($NA(^XTMP("XPDT",XPDA,"RTN",X))),^XTMP("XPDT",XPDA,"RTN",X)=XPD_U_"B"_%N
"RTN","XPDTA",101,0)
 ;update count node
"RTN","XPDTA",102,0)
 S ^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",103,0)
 Q "B"_%N
"RTN","XPDTA1")
0^19^B13922280
"RTN","XPDTA1",1,0)
XPDTA1 ;SFISC/RSD - Build Actions for Kernel Files Cont. ;09/25/96  15:20
"RTN","XPDTA1",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XPDTA1",3,0)
 Q
"RTN","XPDTA1",4,0)
 ;^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA) is the global root
"RTN","XPDTA1",5,0)
 ;DA=ien in ^XTMP,XPDNM=package name, XPDA=package ien in ^XPD(9.6,
"RTN","XPDTA1",6,0)
 Q
"RTN","XPDTA1",7,0)
HELP ;help frames #9.2
"RTN","XPDTA1",8,0)
 ;remove Author (0;4), kill Editor (4;0) and under Object (10) kill "B" x-ref
"RTN","XPDTA1",9,0)
 S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,0),U,4)="",%=0 K ^(4),^(10,"B")
"RTN","XPDTA1",10,0)
 ;loop thru Objects (10) and resolve (10;1), kill if it doesn't resolve
"RTN","XPDTA1",11,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",12,0)
 .S %2=$$PT^XPDTA("^MAG",+%1)
"RTN","XPDTA1",13,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%,0),U)=%2 Q
"RTN","XPDTA1",14,0)
 .K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,10,%)
"RTN","XPDTA1",15,0)
 ;kill under Related Frame (2) "B" x-ref
"RTN","XPDTA1",16,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,"B") S %=0
"RTN","XPDTA1",17,0)
 ;loop thru Related Frame (2) and resolve Related Frame (2;2)
"RTN","XPDTA1",18,0)
 ;kill if it doesn't resolve
"RTN","XPDTA1",19,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%)) Q:'%  S %1=$P($G(^(%,0)),U,2) D
"RTN","XPDTA1",20,0)
 .S %2=$$PT^XPDTA("^DIC(9.2)",%1)
"RTN","XPDTA1",21,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%,0),U,2)=%2 Q
"RTN","XPDTA1",22,0)
 .K ^XTMP("XPDT",XPDA,"KRN",9.2,DA,2,%)
"RTN","XPDTA1",23,0)
 Q
"RTN","XPDTA1",24,0)
BUL ;bulletines #3.6
"RTN","XPDTA1",25,0)
KEY ;security keys entry action #19
"RTN","XPDTA1",26,0)
 ;kill Mailgroups (2)
"RTN","XPDTA1",27,0)
 K ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,2)
"RTN","XPDTA1",28,0)
 Q
"RTN","XPDTA1",29,0)
MAILG ;MAIL GROUP #3.8
"RTN","XPDTA1",30,0)
 ;remove REFERENCE COUNT (0;4), LAST REFERENCE (0;5), COORDINATOR (0;7)
"RTN","XPDTA1",31,0)
 S %=^XTMP("XPDT",XPDA,"KRN",3.8,DA,0),$P(%,U,4,5)="^",$P(%,U,7)="",^(0)=%
"RTN","XPDTA1",32,0)
 ;remove ORGANIZER (3;1)
"RTN","XPDTA1",33,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",3.8,DA,3)),U) S:% $P(^(3),U)=""
"RTN","XPDTA1",34,0)
 ;kill MEMBER (1;0), AUTHORIZE SENDER (4;0), DISTRIBUTION LIST (7;0)
"RTN","XPDTA1",35,0)
 K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,1),^(4),^(7)
"RTN","XPDTA1",36,0)
 ;kill MEMBER GROUP "B" x-ref 
"RTN","XPDTA1",37,0)
 K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,"B") S %=0
"RTN","XPDTA1",38,0)
 ;loop thru MEMBER GROUP and resolve (5;0)
"RTN","XPDTA1",39,0)
 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%)) Q:'%  S %1=$P($G(^(%,0)),U) D
"RTN","XPDTA1",40,0)
 .S %2=$$PT^XPDTA("^XMB(3.8)",%1)
"RTN","XPDTA1",41,0)
 .I $L(%2) S $P(^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%,0),U)=%2 Q
"RTN","XPDTA1",42,0)
 .K ^XTMP("XPDT",XPDA,"KRN",3.8,DA,5,%)
"RTN","XPDTA1",43,0)
 Q
"RTN","XPDTA1",44,0)
HLAP ;HL7 application parameter #771
"RTN","XPDTA1",45,0)
 S %=^XTMP("XPDT",XPDA,"KRN",771,DA,0)
"RTN","XPDTA1",46,0)
 ;resolve MAIL GROUP (0;4)
"RTN","XPDTA1",47,0)
 S:$P(%,U,4) $P(%,U,4)=$$PT^XPDTA("^XMB(3.8)",$P(%,U,4))
"RTN","XPDTA1",48,0)
 ;resolve COUNTRY CODE (0;7)
"RTN","XPDTA1",49,0)
 S:$P(%,U,7) $P(%,U,7)=$$PT^XPDTA("^HL(779.004)",$P(%,U,7))
"RTN","XPDTA1",50,0)
 S ^XTMP("XPDT",XPDA,"KRN",771,DA,0)=%
"RTN","XPDTA1",51,0)
 ;resolve HL7 SEGMENT (SEG;0)
"RTN","XPDTA1",52,0)
 ;kill "B"=name x-ref, it will be re-indexed when installed
"RTN","XPDTA1",53,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG")) K ^("SEG","B") D
"RTN","XPDTA1",54,0)
 .;loop thru SEGs and resolve (SEG;1)
"RTN","XPDTA1",55,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",56,0)
 ..S %2=$$PT^XPDTA("^HL(771.3)",+%1)
"RTN","XPDTA1",57,0)
 ..;if can't resolve then delete
"RTN","XPDTA1",58,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%) Q
"RTN","XPDTA1",59,0)
 ..;save the SEG name
"RTN","XPDTA1",60,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",771,DA,"SEG",%,0),U)=%2
"RTN","XPDTA1",61,0)
 .Q
"RTN","XPDTA1",62,0)
 ;resolve HL7 MESSAGE (MSG;0)
"RTN","XPDTA1",63,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG")) K ^("MSG","B") D
"RTN","XPDTA1",64,0)
 .;loop thru MSGs and resolve (MSG;1)
"RTN","XPDTA1",65,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA1",66,0)
 ..S %2=$$PT^XPDTA("^HL(771.3)",+%1)
"RTN","XPDTA1",67,0)
 ..;if can't resolve then delete
"RTN","XPDTA1",68,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%) Q
"RTN","XPDTA1",69,0)
 ..;save the MSG name
"RTN","XPDTA1",70,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",771,DA,"MSG",%,0),U)=%2
"RTN","XPDTA1",71,0)
 .Q
"RTN","XPDTA1",72,0)
 Q
"RTN","XPDTA1",73,0)
HLLLP ;HL7 lower level protocol #869.2
"RTN","XPDTA1",74,0)
 S %=$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,0),U,2)
"RTN","XPDTA1",75,0)
 ;resolve LLP TYPE (0;2)
"RTN","XPDTA1",76,0)
 S:% %=$$PT^XPDTA("^HLCS(869.1)",%),$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,0),U,2)=%
"RTN","XPDTA1",77,0)
 ;resolve MAIL GROUP (100;1)
"RTN","XPDTA1",78,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",869.2,DA,100)),U)
"RTN","XPDTA1",79,0)
 S:% %=$$PT^XPDTA("^XMB(3.8)",%),$P(^XTMP("XPDT",XPDA,"KRN",869.2,DA,100),U)=%
"RTN","XPDTA1",80,0)
 ;remove HLLP DEVICE (200;1)
"RTN","XPDTA1",81,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",869.2,DA,200)) S $P(^(200),U)=""
"RTN","XPDTA1",82,0)
 ;remove X3.28 DEVICE (300;1)
"RTN","XPDTA1",83,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",869.2,DA,300)) S $P(^(300),U)=""
"RTN","XPDTA1",84,0)
 Q
"RTN","XPDTA1",85,0)
HLLL ;HL7 logical link #870
"RTN","XPDTA1",86,0)
 S %=^XTMP("XPDT",XPDA,"KRN",870,DA,0)
"RTN","XPDTA1",87,0)
 ;resolve INSTITUTION (0;2)
"RTN","XPDTA1",88,0)
 S:$P(%,U,2) $P(%,U,2)=$$PT^XPDTA("^DIC(4)",$P(%,U,2))
"RTN","XPDTA1",89,0)
 ;resolve LLP PARAMETERS (0;3)
"RTN","XPDTA1",90,0)
 S:$P(%,U,3) $P(%,U,3)=$$PT^XPDTA("^HLCS(869.2)",$P(%,U,3))
"RTN","XPDTA1",91,0)
 ;remove all data except (0;1-3,21)
"RTN","XPDTA1",92,0)
 S %=$P(%,U,1,3)_"^^^^^^^^^^^^^^^^^^"_$P(%,U,21)
"RTN","XPDTA1",93,0)
 S ^XTMP("XPDT",XPDA,"KRN",870,DA,0)=%
"RTN","XPDTA1",94,0)
 K ^XTMP("XPDT",XPDA,"KRN",870,DA,1),^(2),^("IN QUEUE BACK POINTER"),^("IN QUEUE FRONT POINTER")
"RTN","XPDTA1",95,0)
 K ^XTMP("XPDT",XPDA,"KRN",870,DA,"OUT QUEUE BACK POINTER"),^("OUT QUEUE FRONT POINTER")
"RTN","XPDTA1",96,0)
 Q
"RTN","XPDTC")
0^27^B35132838
"RTN","XPDTC",1,0)
XPDTC ;SFISC/RSD - Transport calls ;10/04/96  14:34
"RTN","XPDTC",2,0)
 ;;8.0;KERNEL;**10,15,21,39,41,44**;Jul 10, 1995
"RTN","XPDTC",3,0)
 Q
"RTN","XPDTC",4,0)
 ;^XTMP("XPDT",XPDA,data type,file #,
"RTN","XPDTC",5,0)
 ;XPDA=ien of File 9.6, XPDNM=.01 field
"RTN","XPDTC",6,0)
DD ;build DD
"RTN","XPDTC",7,0)
 N FILE,FGR,FNAM,Z2,Z3,Z4
"RTN","XPDTC",8,0)
 S FILE=0,FGR="^XTMP(""XPDT"",XPDA)",FNAM=$NA(^XPD(9.6,XPDA,4,"APDD"))
"RTN","XPDTC",9,0)
 F  S FILE=$O(^XPD(9.6,XPDA,4,FILE)) Q:'FILE  D
"RTN","XPDTC",10,0)
 .S Z2=$G(^XPD(9.6,XPDA,4,FILE,222)),Z3=$G(^(223)),Z4=$G(^(224))
"RTN","XPDTC",11,0)
 .Q:$$DATA^XPDV(FILE,Z2)
"RTN","XPDTC",12,0)
 .D FIA^DIFROMSU(FILE,"",FNAM,FGR,Z2,Z3,Z4,XPDVER),DIERR:$D(DIERR)
"RTN","XPDTC",13,0)
 Q:'$D(^XTMP("XPDT",XPDA,"FIA"))
"RTN","XPDTC",14,0)
 ;send DD and Data
"RTN","XPDTC",15,0)
 D DDOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR),DATAOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR)
"RTN","XPDTC",16,0)
 Q
"RTN","XPDTC",17,0)
 ;XPDERR is checked in XPDT and will abort transport
"RTN","XPDTC",18,0)
DIERR ;record error
"RTN","XPDTC",19,0)
 D MSG^DIALOG("EW",.XPD) S XPDERR=1
"RTN","XPDTC",20,0)
 Q
"RTN","XPDTC",21,0)
KRN ;build Kernel Files
"RTN","XPDTC",22,0)
 ;XPDFILE=file #, XPDOLDA=ien in Build file
"RTN","XPDTC",23,0)
 N %,%1,%2,DA,EACT,FACT,FGR,XPDFILE,XPDOLDA,XPDI,Y0
"RTN","XPDTC",24,0)
 F XPDFILE=1:1 S Y0=$P($T(FILES+XPDFILE^XPDE),";;",2,99) Q:Y0=""  S XPDI(+Y0)=Y0
"RTN","XPDTC",25,0)
 ;XPDI(XPDFILE)=file;order;x-ref;fact;eact;fpre;epre;fpos;epos;fdel
"RTN","XPDTC",26,0)
 S XPDFILE=0
"RTN","XPDTC",27,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  S XPDI=$G(XPDI(XPDFILE)),FACT=$P(XPDI,";",4),EACT=$P(XPDI,";",5) D  Q:$D(XPDERR)  D:FACT]"" ACT(FACT)
"RTN","XPDTC",28,0)
 .;need to add code to check if File and data is already being sent in the File
"RTN","XPDTC",29,0)
 .;mult. If it is, don't bother sending it again.  DTL(XPDFILE)
"RTN","XPDTC",30,0)
 .S XPDOLDA=0,FGR=$$FILE^XPDV(XPDFILE) I FGR="" S XPDERR=1 Q
"RTN","XPDTC",31,0)
 .K ^TMP($J,"XPD")
"RTN","XPDTC",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDTC",33,0)
 ..;If deleting at site get an unused DA
"RTN","XPDTC",34,0)
 ..I $P(Y0,U,3)=1 S DA=$O(@FGR@(" "),-1)+1 F DA=DA:1 Q:'$D(^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA))
"RTN","XPDTC",35,0)
 ..;$P(Y0,U,2) is file # for this template, reset Y0 before getting DA
"RTN","XPDTC",36,0)
 ..E  S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY^XPDV(Y0)
"RTN","XPDTC",37,0)
 ..I 'DA S XPDERR=1 Q
"RTN","XPDTC",38,0)
 ..;(-1)=action flag: 1-delete,2-link,3-merge menus '^' ien in Build file
"RTN","XPDTC",39,0)
 ..S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,-1)=+$P(Y0,U,3)_"^"_XPDOLDA
"RTN","XPDTC",40,0)
 ..;if action is 1-delete then only send .01 field and set checksum to ""
"RTN","XPDTC",41,0)
 ..I $P(Y0,U,3)=1 S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,0)=$P(Y0,U),$P(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA),U,4)="" Q
"RTN","XPDTC",42,0)
 ..M ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)=@FGR@(DA)
"RTN","XPDTC",43,0)
 ..;execute entry build action
"RTN","XPDTC",44,0)
 ..D:EACT]"" ACT(EACT)
"RTN","XPDTC",45,0)
 .;quit if no entries were saved
"RTN","XPDTC",46,0)
 .Q:'$O(^XTMP("XPDT",XPDA,"KRN",XPDFILE,0))
"RTN","XPDTC",47,0)
 .;XPDI=XPDI(XPDFILE), build x-ref of order to install
"RTN","XPDTC",48,0)
 .S %=$P(^DIC(XPDFILE,0),U),^XTMP("XPDT",XPDA,"ORD",+$P(XPDI,";",2),XPDFILE)=XPDI,^(XPDFILE,0)=%
"RTN","XPDTC",49,0)
 .Q
"RTN","XPDTC",50,0)
 Q
"RTN","XPDTC",51,0)
QUES ;build from Install Questions multiple
"RTN","XPDTC",52,0)
 N I,J,X,%
"RTN","XPDTC",53,0)
 S X=""
"RTN","XPDTC",54,0)
 ;the "B" x-ref will give me the order of the questions
"RTN","XPDTC",55,0)
 F  S X=$O(^XPD(9.6,XPDA,"QUES","B",X)) Q:X=""  S I=$$QUES^XPDV(X) S:'I XPDERR=1 D:I
"RTN","XPDTC",56,0)
 .S J=0 F  S J=$O(^XPD(9.6,XPDA,"QUES",I,J)) Q:J=""  D
"RTN","XPDTC",57,0)
 ..;tranform J to DIR subscripts
"RTN","XPDTC",58,0)
 ..I $L(J)=1!(J="QQ") S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"1ABQ","0AB?"))=^(J) Q  ;^(J) ref to ^XPD(9.6,XPDA,"QUES",I,J)
"RTN","XPDTC",59,0)
 ..;set the word processing fields into DIR("?",#) structure
"RTN","XPDTC",60,0)
 ..F %=1:1 Q:'$D(^XPD(9.6,XPDA,"QUES",I,J,%,0))  S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"AQ10","A?"),%)=^(0)
"RTN","XPDTC",61,0)
 ;send the File questions
"RTN","XPDTC",62,0)
 F I=1:2 S X=$P($T(QUESTION+I),";;",2) Q:X=""  S Y=$P($T(QUESTION+I+1),";;",2) D
"RTN","XPDTC",63,0)
 .S ^XTMP("XPDT",XPDA,"QUES",$P(X,";"),0)=$P(X,";",2),^("A")=$P(X,";",3),^("B")=$P(X,";",4),^("??")=$P(X,";",5) S:Y]"" ^("M")=Y
"RTN","XPDTC",64,0)
 Q
"RTN","XPDTC",65,0)
INT ;build pre,post, & enviroment init routines
"RTN","XPDTC",66,0)
 N %,I,X
"RTN","XPDTC",67,0)
 F I="PRE","INI","INIT" I $G(^XPD(9.6,XPDA,I))]"" S X=^(I) D
"RTN","XPDTC",68,0)
 .S ^XTMP("XPDT",XPDA,I)=X,X=$P(X,U,$L(X,U)) Q:$D(^("RTN",X))
"RTN","XPDTC",69,0)
 .I '$$RTN^XPDV(X) W !,"Routine ",X," **NOT FOUND**" S XPDERR=1 Q
"RTN","XPDTC",70,0)
 .S %=$$LOAD^XPDTA(X,"0^")
"RTN","XPDTC",71,0)
 Q
"RTN","XPDTC",72,0)
BLD ;build Build file, Package file and Order Parameter file
"RTN","XPDTC",73,0)
 N %,DIC,X,XPD,XPDI,XPDV,Y
"RTN","XPDTC",74,0)
 ;save version of kernel and fm
"RTN","XPDTC",75,0)
 S ^XTMP("XPDT",XPDA,"VER")=$$VERSION^XPDUTL("XU")_U_$$VERSION^XPDUTL("VA FILEMAN")
"RTN","XPDTC",76,0)
 M ^XTMP("XPDT",XPDA,"BLD",XPDA)=^XPD(9.6,XPDA)
"RTN","XPDTC",77,0)
 ;check national package file pointer
"RTN","XPDTC",78,0)
 S XPDI=$P(^XPD(9.6,XPDA,0),U,2)
"RTN","XPDTC",79,0)
 I XPDI="" W !,"No Package File Link" Q
"RTN","XPDTC",80,0)
 S $P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,2)=$$PT^XPDTA("^DIC(9.4)",XPDI)
"RTN","XPDTC",81,0)
 ;quit if no pointer to package file
"RTN","XPDTC",82,0)
 I '$D(^DIC(9.4,XPDI)) W !,"Package File Link is corrupted" S XPDERR=1 Q
"RTN","XPDTC",83,0)
 ;update version multiple in package file,XPD=version^date distributed
"RTN","XPDTC",84,0)
 S XPD=$$VER^XPDUTL(XPDNM)_U_$P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,4)
"RTN","XPDTC",85,0)
 ;XPD(1)=root of description field
"RTN","XPDTC",86,0)
 S:$D(^XTMP("XPDT",XPDA,"BLD",XPDA,1)) XPD(1)=$NA(^(1))
"RTN","XPDTC",87,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,0)=^DIC(9.4,XPDI,0),^XTMP("XPDT",XPDA,"PKG",XPDI,22,0)="^"_$P(^DD(9.4,22,0),U,2)_"^1^1"
"RTN","XPDTC",88,0)
 ;XPDNM'["*" is a version release
"RTN","XPDTC",89,0)
 I XPDNM'["*" D
"RTN","XPDTC",90,0)
 .S XPDV=$$PKGVER^XPDIP(XPDI,.XPD)
"RTN","XPDTC",91,0)
 .;Merge is used to set single nodes and merge multiples
"RTN","XPDTC",92,0)
 .F %=1,5,7,20,"DEV","VERSION" M ^XTMP("XPDT",XPDA,"PKG",XPDI,%)=^DIC(9.4,XPDI,%)
"RTN","XPDTC",93,0)
 .;XPDV=ien of Version Multiple
"RTN","XPDTC",94,0)
 .I $D(^DIC(9.4,XPDI,22,XPDV))'>9 W !!,"**Version multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",95,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1)=^DIC(9.4,XPDI,22,XPDV)
"RTN","XPDTC",96,0)
 ;this is a patch, %=version number, $P(XPD,U)=patch number
"RTN","XPDTC",97,0)
 E  D
"RTN","XPDTC",98,0)
 .S %=$P(XPD,U),$P(XPD,U)=$P(XPDNM,"*",3),XPDV=$$PKGPAT^XPDIP(XPDI,%,.XPD)
"RTN","XPDTC",99,0)
 .S ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,0)=^DIC(9.4,XPDI,22,+XPDV,0)
"RTN","XPDTC",100,0)
 .I $D(^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2)))'>9 W !!,"**Patch multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",101,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,"PAH",1)=^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2))
"RTN","XPDTC",102,0)
 ;M ^XTMP("XPDT",XPDA,"PKG",XPDI)=^DIC(9.4,XPDI)
"RTN","XPDTC",103,0)
 ;save the version ien^patch ien on -1 node
"RTN","XPDTC",104,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,-1)="1^1"
"RTN","XPDTC",105,0)
 ;resolve Primary Help Frame (0;4)
"RTN","XPDTC",106,0)
 S %=+$P(^DIC(9.4,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"PKG",XPDI,0),U,4)=$$PT^XPDTA("^DIC(9.2)",%)
"RTN","XPDTC",107,0)
 ;transport the PACKAGE PARAMETER multiple under file 100.99
"RTN","XPDTC",108,0)
 ;quit of GLOBAL PACKAGE
"RTN","XPDTC",109,0)
 Q:'$D(^ORD(100.99,1,5,XPDI,0))!$D(XPDGP)
"RTN","XPDTC",110,0)
 M ^XTMP("XPDT",XPDA,"OER",XPDI)=^ORD(100.99,1,5,XPDI)
"RTN","XPDTC",111,0)
 ;resolve Display Group Default (0;4)
"RTN","XPDTC",112,0)
 S %=+$P(^ORD(100.99,1,5,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"OER",XPDI,0),U,4)=$$PT^XPDTA("^ORD(100.98)",%)
"RTN","XPDTC",113,0)
 Q
"RTN","XPDTC",114,0)
 ;
"RTN","XPDTC",115,0)
ACT(%) ;execute action
"RTN","XPDTC",116,0)
 ;user can count on DA,XPDFILE,XPDNM,XPDOLDA being around
"RTN","XPDTC",117,0)
 ;DA=ien in ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)
"RTN","XPDTC",118,0)
 ;XPDOLDA=ien in ^XPD(9.6,XPDA,"KRN",XPDIFLE,"NM",XPDOLDA)
"RTN","XPDTC",119,0)
 N EACT,FACT,FGR,K0,Y0
"RTN","XPDTC",120,0)
 S:%'["^" %="^"_%
"RTN","XPDTC",121,0)
 D @% Q
"RTN","XPDTC",122,0)
 ;
"RTN","XPDTC",123,0)
 ;the following are the default questions for the INSTALL QUESTIONS
"RTN","XPDTC",124,0)
 ;in file 9.6, the format is:
"RTN","XPDTC",125,0)
 ;;field .01;field 1;field 2;field 4;field 7
"RTN","XPDTC",126,0)
 ;;field 10
"RTN","XPDTC",127,0)
QUESTION ;package install questions
"RTN","XPDTC",128,0)
 ;;XPF1;Y;Shall I write over your |FLAG| File;YES;^D REP^XPDH
"RTN","XPDTC",129,0)
 ;;D XPF1^XPDIQ
"RTN","XPDTC",130,0)
 ;;XPF2;Y;Want my data |FLAG| yours;YES;^D DTA^XPDH
"RTN","XPDTC",131,0)
 ;;D XPF2^XPDIQ
"RTN","XPDTC",132,0)
 ;;XPZ1;Y;Want to DISABLE Scheduled Options, Menu Options, and Protocols;YES;^D OPT^XPDH
"RTN","XPDTC",133,0)
 ;;D XPZ1^XPDIQ
"RTN","XPDTC",134,0)
 ;;XPZ2;Y;Want to MOVE routines to other CPUs;NO;^D RTN^XPDH
"RTN","XPDTC",135,0)
 ;;D XPZ2^XPDIQ
"RTN","XPDTP")
0^26^B3210806
"RTN","XPDTP",1,0)
XPDTP ;SFISC/RSD - Transport using a Packman Message ;09/23/96  13:54
"RTN","XPDTP",2,0)
 ;;8.0;KERNEL;**21,40,44**;Jul 05, 1995
"RTN","XPDTP",3,0)
 N DIFROM,DIR,DIRUT,DWPK,DWLW,DIC,I,J,XCN,XCNP,XMDISPI,XMDUN,XMDUZ,XMKEY,XMSCR,XMSUB,XMY,XMZ,X,Y,%
"RTN","XPDTP",4,0)
 S DIFROM=1,DIR(0)="F^3:65",DIR("A")="Subject",DIR("?")="Enter the subject for this Packman Message"
"RTN","XPDTP",5,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDTP",6,0)
 S XMSUB=Y,XMDUZ=+DUZ
"RTN","XPDTP",7,0)
 K ^TMP("XMP",$J)
"RTN","XPDTP",8,0)
 W !,"Please enter description of Packman Message",!
"RTN","XPDTP",9,0)
 S DWPK=1,DWLW=75,DIC="^TMP(""XMP"",$J," D EN^DIWE
"RTN","XPDTP",10,0)
 D KIDS^XMP
"RTN","XPDTP",11,0)
 S XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)="$KID "_XPDNM,XCNP=XCNP+1
"RTN","XPDTP",12,0)
 ;for multiple packages, this would be a for loop
"RTN","XPDTP",13,0)
 D GS K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDTP",14,0)
 S $P(^XMB(3.9,XMZ,2,0),U,3,4)=XCNP_U_XCNP
"RTN","XPDTP",15,0)
 ;secure message & then send
"RTN","XPDTP",16,0)
 D ^XMASEC Q:$D(DTOUT)!$D(DUOUT)  D EN3^XMD
"RTN","XPDTP",17,0)
 K ^TMP("XMP",$J)
"RTN","XPDTP",18,0)
 Q
"RTN","XPDTP",19,0)
GS N GR,GCK,GL
"RTN","XPDTP",20,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDTP",21,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDTP",22,0)
 ;the next INSTALL NAME
"RTN","XPDTP",23,0)
 S ^XMB(3.9,XMZ,2,XCNP,0)="**INSTALL NAME**",XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)=XPDNM,XCNP=XCNP+1
"RTN","XPDTP",24,0)
 F  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  S ^XMB(3.9,XMZ,2,XCNP,0)=$P(GR,GCK,2),XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)=@GR,XCNP=XCNP+1
"RTN","XPDTP",25,0)
 S ^XMB(3.9,XMZ,2,XCNP,0)="$END KID "_XPDNM
"RTN","XPDTP",26,0)
 Q
"RTN","XPDV")
0^20^B25055640
"RTN","XPDV",1,0)
XPDV ;SFISC/RSD - Verify Build ;09/13/96  11:26
"RTN","XPDV",2,0)
 ;;8.0;KERNEL;**30,44**;Jul 10, 1995
"RTN","XPDV",3,0)
 ;checks that everything is ready to do a build
"RTN","XPDV",4,0)
 ;XPDA=build ien, loop thru all nodes in ^XPD(9.6,XPDA and verify data
"RTN","XPDV",5,0)
EN ;check a build
"RTN","XPDV",6,0)
 N DA,FGR,TYPE,XPDFILE,XPDOLDA,Y0,Y2 K ^TMP($J)
"RTN","XPDV",7,0)
 S Y0=$G(^XPD(9.6,XPDA,0)),TYPE=$P(Y0,U,3)
"RTN","XPDV",8,0)
 I '$P(Y0,U,2),$P(Y0,U,2)]"" W !,$P(Y0,U,2)," in Package File Link field is freetext, not a pointer"
"RTN","XPDV",9,0)
 I $P(Y0,U,2),'$D(^DIC(9.4,$P(Y0,U,2),0)) W !,$P(Y0,U,2)," in PACKAGE File  ** NOT FOUND **",*7
"RTN","XPDV",10,0)
 ;type is global package goto CONT
"RTN","XPDV",11,0)
 G CONT:TYPE=2
"RTN","XPDV",12,0)
 I TYPE=1 S Y0=$$MULT(XPDA) G DONE
"RTN","XPDV",13,0)
 S XPDFILE=0
"RTN","XPDV",14,0)
 ;check DD being sent
"RTN","XPDV",15,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,4,XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",16,0)
 .Q:$$FILE(XPDFILE)=""
"RTN","XPDV",17,0)
 .S Y0=0,Y2=$G(^XPD(9.6,XPDA,4,XPDFILE,222))
"RTN","XPDV",18,0)
 .Q:$$DATA(XPDFILE,Y2)
"RTN","XPDV",19,0)
 .F  S Y0=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0)) Q:'Y0  D
"RTN","XPDV",20,0)
 ..I '$D(^DD(Y0)) W !," SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",21,0)
 ..S XPDOLDA=0
"RTN","XPDV",22,0)
 ..;check fields being sent for partial DD
"RTN","XPDV",23,0)
 ..F  S XPDOLDA=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0,1,XPDOLDA)) Q:'XPDOLDA  D
"RTN","XPDV",24,0)
 ...I '$D(^DD(Y0,XPDOLDA)) W !,"Field #",XPDOLDA," in SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",25,0)
 ;
"RTN","XPDV",26,0)
 ;build components files
"RTN","XPDV",27,0)
 S XPDFILE=0
"RTN","XPDV",28,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",29,0)
 .;if file doesn't exist, save in ^TMP and deleted at end
"RTN","XPDV",30,0)
 .S FGR=$$FILE(XPDFILE),XPDOLDA=0 I FGR="" S ^TMP($J,XPDFILE)="" Q
"RTN","XPDV",31,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDV",32,0)
 ..;quit if deleting at site
"RTN","XPDV",33,0)
 ..Q:$P(Y0,U,3)=1
"RTN","XPDV",34,0)
 ..S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY(Y0)
"RTN","XPDV",35,0)
 ;check Install Questions
"RTN","XPDV",36,0)
 S XPDOLDA=0
"RTN","XPDV",37,0)
 F  S XPDOLDA=$O(^XPD(9.6,XPDA,"QUES",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)),Y2=$G(^(1)) D
"RTN","XPDV",38,0)
 .I $P(Y0,U)="" W !,"Zero node doesn't exist for INSTALL QUESTION #",XPDOLDA Q
"RTN","XPDV",39,0)
 .I Y2="" W !,"DIR(0) field is not defined for INSTALL QUESTION ",$P(Y0,U)
"RTN","XPDV",40,0)
 I $O(^XPD(9.6,XPDA,"GLO",0)) W !,"Package cannot contain Globals, Files, & Components."
"RTN","XPDV",41,0)
 ;check for PRE & POST routines
"RTN","XPDV",42,0)
 F DA="INI","INIT" S Y0=$G(^XPD(9.6,XPDA,DA)) I Y0]"",'$$RTN(Y0) W !,"Routine ",Y0," ** NOT FOUND **"
"RTN","XPDV",43,0)
CONT ;
"RTN","XPDV",44,0)
 ;check Environment Check routine
"RTN","XPDV",45,0)
 S Y0=$G(^XPD(9.6,XPDA,"PRE")) I Y0]"",'$$RTN(Y0) W !,"Routine ",Y0," ** NOT FOUND **"
"RTN","XPDV",46,0)
 I TYPE=2 S Y0=$$GLOPKG(XPDA)
"RTN","XPDV",47,0)
DONE I $O(^TMP($J,0)) D
"RTN","XPDV",48,0)
 .N DA,DIK,DIR,DIRUT,Y
"RTN","XPDV",49,0)
 .S DIR(0)="Y",DIR("A")="Do you want to remove the missing Files",DIR("B")="NO"
"RTN","XPDV",50,0)
 .S DIR("?")="Yes means that the missing Files will be removed and you can transport this Build"
"RTN","XPDV",51,0)
 .D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDV",52,0)
 .S DIK="^XPD(9.6,"_XPDA_",""KRN"",",DA(1)=XPDA,DA=0 F  S DA=$O(^TMP($J,DA)) Q:'DA  D ^DIK
"RTN","XPDV",53,0)
 W !!,"  ** DONE **"
"RTN","XPDV",54,0)
 Q
"RTN","XPDV",55,0)
GLOPKG(X) ;GLOBAL PACKAGE
"RTN","XPDV",56,0)
 N I,J,Y,Z S Z=1
"RTN","XPDV",57,0)
 I $O(^XPD(9.6,X,4,0)) W !,"GLOBAL PACKAGE cannot contain Files" S Z=0
"RTN","XPDV",58,0)
 S I=0 F  S I=$O(^XPD(9.6,X,"KRN",I)) Q:'I  D:$O(^(I,"NM",0))
"RTN","XPDV",59,0)
 .W !,"GLOBAL PACKAGE cannot contain ",$P(^DIC(I,0),U) S Z=0
"RTN","XPDV",60,0)
 I $O(^XPD(9.6,X,"QUES",0)) W !,"GLOBAL PACKAGE cannot contain Install Questions" S Z=0
"RTN","XPDV",61,0)
 I $G(^XPD(9.6,X,"INI"))]"" W !,"GLOBAL PACKAGE cannot have a Pre-Install Routine" S Z=0
"RTN","XPDV",62,0)
 ;I $G(^XPD(9.6,X,"INIT"))]"" W !,"GLOBAL PACKAGE cannot have a Post-Install Routine" S Z=0
"RTN","XPDV",63,0)
 S I=0 F J=0:1 S I=$O(^XPD(9.6,X,"GLO",I)) Q:'I  S Y=$G(^(I,0)) D
"RTN","XPDV",64,0)
 .I $P(Y,U)]"",'$D(@("^"_$P(Y,U))) W !,"Global ",Y," doesn't exist." S Z=0
"RTN","XPDV",65,0)
 I 'J W !,"No Globals to transport" S Z=0
"RTN","XPDV",66,0)
 Q Z
"RTN","XPDV",67,0)
 ;
"RTN","XPDV",68,0)
QUES(X) ;X=.01 of INSTALL QUESTION multiple
"RTN","XPDV",69,0)
 N Y
"RTN","XPDV",70,0)
 S Y=+$O(^XPD(9.6,XPDA,"QUES","B",X,0))
"RTN","XPDV",71,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,0)) W !,"Zero node doesn't exist for INSTALL QUESTION ",X Q 0
"RTN","XPDV",72,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,1)) W !,"DIR(0) field is not defined for INSTALL QUESTION ",X Q 0
"RTN","XPDV",73,0)
 Q Y
"RTN","XPDV",74,0)
 ;
"RTN","XPDV",75,0)
FILE(X) ;check file # X and returns global ref
"RTN","XPDV",76,0)
 N %,Y
"RTN","XPDV",77,0)
 S Y=$G(^DIC(X,0,"GL"))
"RTN","XPDV",78,0)
 I Y="" W !," File #",X,"  ** NOT FOUND **" Q ""
"RTN","XPDV",79,0)
 S %=$E(Y,$L(Y)),X=$E(Y,1,$L(Y)-1)_$S(%="(":"",1:")")
"RTN","XPDV",80,0)
 Q X
"RTN","XPDV",81,0)
 ;
"RTN","XPDV",82,0)
 ;Z only contains the file # for Fileman templates and forms
"RTN","XPDV",83,0)
 ;XPDFILE=file #,FGR=file global ref
"RTN","XPDV",84,0)
ENTRY(Z) ;check entry, Z=name^file
"RTN","XPDV",85,0)
 N F,X,Y
"RTN","XPDV",86,0)
 ;check for X, name, in "B" x-ref of file.
"RTN","XPDV",87,0)
 S X=$P(Z,U),Y=0 F  S Y=$O(@FGR@("B",X,Y)) D  Q:X=""
"RTN","XPDV",88,0)
 .I 'Y W !?3,X,"  in ",$P(^DIC(XPDFILE,0),U)," File   ** NOT FOUND **",*7 S X="" Q
"RTN","XPDV",89,0)
 .;if Y is in x-ref but node doesn't exist, quit and try another
"RTN","XPDV",90,0)
 .;if this is a fileman template, the file associated with it is piece 2 of Z
"RTN","XPDV",91,0)
 .;if Form file check piece 8 else 4
"RTN","XPDV",92,0)
 .Q:'$D(@FGR@(Y,0))  I $P(Z,U,2) S F=^(0) S:$P(Z,U,2)=$P(F,U,(4+(4*(FGR["DIST")))) X="" Q
"RTN","XPDV",93,0)
 .;if it is routine file,9.8, check that routine exist
"RTN","XPDV",94,0)
 .I XPDFILE=9.8 Q:'$$RTN(X)
"RTN","XPDV",95,0)
 .;if this is not a fileman template or routine we found Y
"RTN","XPDV",96,0)
 .S X="" Q
"RTN","XPDV",97,0)
 Q Y
"RTN","XPDV",98,0)
 ;
"RTN","XPDV",99,0)
DATA(F,Y) ;
"RTN","XPDV",100,0)
 I $P(Y,U,3)="p",$P(Y,U,7)="y" W !,"You can only send Data with a Full Data Dictionary,",!,"** File #",F," cannot be Sent **" Q 1
"RTN","XPDV",101,0)
 Q 0
"RTN","XPDV",102,0)
 ;
"RTN","XPDV",103,0)
RTN(X) ;verify tag^routine exist, 1=yes, 0=no
"RTN","XPDV",104,0)
 I X'[U Q $T(^@X)]""
"RTN","XPDV",105,0)
 Q $T(@$P(X,U)^@$P(X,U,2))]""
"RTN","XPDV",106,0)
 ;
"RTN","XPDV",107,0)
MULT(X) ;multi-package
"RTN","XPDV",108,0)
 N I,J,X,Y,Z
"RTN","XPDV",109,0)
 S I=0,Z=1
"RTN","XPDV",110,0)
 F J=0:1 S I=$O(^XPD(9.6,X,10,I)) Q:'I  S X=$P($G(^(I,0)),U),Y=0 D
"RTN","XPDV",111,0)
 .S:X]"" Y=$O(^XPD(9.6,"B",X,0))
"RTN","XPDV",112,0)
 .I Y,$D(^XPD(9.6,Y,0)) Q
"RTN","XPDV",113,0)
 .W !,"Package ",X," doesn't exist." S Z=0
"RTN","XPDV",114,0)
 I 'J W !,"No Packages to transport" S Z=0
"RTN","XPDV",115,0)
 Q Z
"RTN","XQ5")
0^22^B21150195
"RTN","XQ5",1,0)
XQ5 ;SF/GFT,MJM - Menu edit utilities [XUEDITOPT] ;09/20/96  15:33
"RTN","XQ5",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XQ5",3,0)
DIP ;
"RTN","XQ5",4,0)
 K DIC S DIC=.4,DIC(0)="AEQMZ" I $D(^DIC(19,DA,63)),^(63)?1"[".E1"]" S DIC("B")=$E(^(63),2,$L(^(63))-1)
"RTN","XQ5",5,0)
 S DUZ0=$S(DUZ(0)="@"!$D(^XUSEC("XUMGR",DUZ)):1,1:0) G:DUZ0 DIP1 S DIC("S")="I 1 Q:'$D(^DIC(+$P(^(0),U,4),0,""RD""))  F %=1:1:$L(^(""RD"")) I DUZ(0)[$E(^(""RD""),%) Q"
"RTN","XQ5",6,0)
DIP1 ;
"RTN","XQ5",7,0)
 D ^DIC K DIC G:Y<0&(DUZ(0)'="@") Q G:Y<0&(DUZ0) Q1 S XQDIC=+$P(Y(0),U,4) G:XQDIC'>1 Q S XQ=$P(^DIC(XQDIC,0),U,1)_U_XQDIC,XQ(63)="["_$P(Y,U,2)_"]",XQ(60)=$P(^(0,"GL"),U,2),XQ(62)=0
"RTN","XQ5",8,0)
BY ;
"RTN","XQ5",9,0)
 K DIC S DIC=.401,DIC(0)="AEQMZ" I $D(^DIC(19,DA,64)),^(64)?1"[".E1"]" S DIC("B")=$E(^(64),2,$L(^(64))-1)
"RTN","XQ5",10,0)
 S DIC("S")="I $P(^(0),U,4)=XQDIC" G:DUZ0 BY1 S DIC("S")=DIC("S")_" Q:'$D(^DIC(+$P(^(0),U,4),0,""RD""))  F %=1:1:$L(^(""RD"")) I DUZ(0)[$E(^(""RD""),%) Q"
"RTN","XQ5",11,0)
BY1 ;
"RTN","XQ5",12,0)
 D ^DIC K DIC G TEM:X="",Q:Y<0 S XQDIC=+$P(Y(0),U,4),XQ=$P(^DIC(XQDIC,0),U,1)_U_XQDIC,XQ(64)="["_$P(Y,U,2)_"]" G FR
"RTN","XQ5",13,0)
TEM ;
"RTN","XQ5",14,0)
 I +X=X,'$D(^DD(+$P(XQ,U,2),X,0)) W *7,"NO SUCH FIELD NUMBER" K X G BY
"RTN","XQ5",15,0)
 S XQ(64)=X
"RTN","XQ5",16,0)
FR K X S Y=$S($D(^DIC(19,DA,65)):^(65),1:"") W !,"START WITH: ",$S(Y]"":Y,1:"FIRST")_"// " R X:DTIME G:X=U Q S:X="" X=Y W:X="?" !?4,"ENTER IN 'FR' FORMAT" G:X="?" FR K:X="@" X,^DIC(19,DA,65) W:'$D(X) *7,"   DELETED!" S:$D(X) XQ(65)=X
"RTN","XQ5",17,0)
TO K X S Y=$S($D(^DIC(19,DA,66)):^(66),1:"") W !,"GO TO: ",$S(Y]"":Y,1:"LAST")_"// " R X:DTIME G:X=U Q S:X="" X=Y W:X="?" !?4,"ENTER IN 'TO' FORMAT" G:X="?" TO K:X="@" X,^DIC(19,DA,66) W:'$D(X) *7,"   DELETED!" S:$D(X) XQ(66)=X
"RTN","XQ5",18,0)
 D PUT G Q1
"RTN","XQ5",19,0)
DIE ;
"RTN","XQ5",20,0)
 S DUZ0=$S(DUZ(0)="@"!$D(^XUSEC("XUMGR",DUZ)):1,1:0)
"RTN","XQ5",21,0)
 K DIC,XQ S DIC=.402,DIC(0)="AQEMZ" I $D(^DIC(19,DA,51)),^(51)?1"[".E1"]" S DIC("B")=$E(^(51),2,$L(^(51))-1)
"RTN","XQ5",22,0)
 G:DUZ0 DIE1 S DIC("S")="I 1 Q:'$D(^DIC(+$P(^(0),U,4),0,""WR""))  F %=1:1:$L(^(""WR"")) I DUZ(0)[$E(^(""WR""),%) Q"
"RTN","XQ5",23,0)
DIE1 ;
"RTN","XQ5",24,0)
 D ^DIC K DIC G:Y<0&(DUZ(0)'="@") Q G:Y<0&(DUZ0) Q1 S XQDIC="",XQDIC=+$P(Y(0),U,4) G:'XQDIC Q S XQ(51)="["_$P(Y,U,2)_"]" D DIC S XQ(50)=XQ(30) D PUT G Q1
"RTN","XQ5",25,0)
PUT S X=0 F  S X=$O(XQ(X)) Q:X'>0  S ^DIC(19,DA,X)=XQ(X)
"RTN","XQ5",26,0)
 Q
"RTN","XQ5",27,0)
 ;
"RTN","XQ5",28,0)
Q W *7,!,"NO CHANGE MADE TO OPTION LOGIC"
"RTN","XQ5",29,0)
Q1 K XQDIC,XQ,Y S DIC=DIE Q
"RTN","XQ5",30,0)
 ;
"RTN","XQ5",31,0)
DIC S XQ=$P(^DIC(XQDIC,0),U,1),XQ(30)=$P(^(0,"GL"),U,2),XQ(31)="AEMQ"
"RTN","XQ5",32,0)
 I $D(^DIC(XQDIC,0,"LAYGO")),DUZ(0)'="@" S Y=$L(^("LAYGO")) I Y F %=1:1 I DUZ(0)[$E(^("LAYGO"),%) G A:%>Y Q
"RTN","XQ5",33,0)
 W !,"WHEN USER SELECTS AN ENTRY IN THE '"_XQ_"' FILE,",!,"WILL ADDING A NEW ENTRY AT THAT TIME ('LAYGO') BE ALLOWED"
"RTN","XQ5",34,0)
 S %=$S($D(^DIC(19,DA,31)):^(31)'["L"+1,1:0) D YN^DICN I %=1 S XQ(31)="AEMQL"
"RTN","XQ5",35,0)
A Q
"RTN","XQ5",36,0)
 ;
"RTN","XQ5",37,0)
DIQ ;
"RTN","XQ5",38,0)
 S DUZ0=$S(DUZ(0)="@"!$D(^XUSEC("XUMGR",DUZ)):1,1:0)
"RTN","XQ5",39,0)
 K DIC,XQ S DIC=1,DIC(0)="AEQMZ",DIC("A")="INQUIRE TO WHAT FILE: "
"RTN","XQ5",40,0)
 I $D(^DIC(19,DA,30)),^(30)["(",@("$D(^"_^(30)_"0))") S DIC("B")=+$P(^(0),U,2)
"RTN","XQ5",41,0)
 G:DUZ0 DIQ1 S DIC("S")="I 1 Q:'$D(^(0,""RD""))  F %=1:1:$L(^(""RD"")) I DUZ(0)[$E(^(""RD""),%) Q"
"RTN","XQ5",42,0)
DIQ1 ;
"RTN","XQ5",43,0)
 D ^DIC K DIC G:Y<0 Q S XQ(31)="AEMQ",(XQ(80),XQ(30))=$P(^(0,"GL"),U,2) D PUT G Q1
"RTN","XQ5",44,0)
 ;
"RTN","XQ5",45,0)
NAME ;
"RTN","XQ5",46,0)
 I $E(X,1)="A"!($E(X,1)="Z") S %=1,%1="Local" Q
"RTN","XQ5",47,0)
 F %=4:-1:2 G:$D(^DIC(9.4,"C",$E(X,1,%))) NAMEOK
"RTN","XQ5",48,0)
 I 0
"RTN","XQ5",49,0)
 Q
"RTN","XQ5",50,0)
NAMEOK S %1=$O(^DIC(9.4,"C",$E(X,1,%),0)) S:%1="" %1=-1 S:$D(^DIC(9.4,%1,0)) %1=$P(^(0),U,1),XQPK=%1 I 1 Q
"RTN","XQ5",51,0)
 ;
"RTN","XQ5",52,0)
CHKNAME ;Called from the input transform of the .01 field of the Option File
"RTN","XQ5",53,0)
 Q:$D(DIFROM)!($D(ZTQUEUED))  K XQPK
"RTN","XQ5",54,0)
 I $D(DIC(0))#2,DIC(0)'["E" Q
"RTN","XQ5",55,0)
 D NAME E  D EN^DDIOL("Not a known package or a local namespace.") Q
"RTN","XQ5",56,0)
 D EN^DDIOL("  Located in the "_$E(X,1,%)_" ("_%1_") namespace.") Q
"RTN","XQ5",57,0)
 ;
"RTN","XQ5",58,0)
TEST W !,"Enter a name, and the computer will respond with the namespace to which",!,"that name belongs.  It does this by looking at the package file.",!!
"RTN","XQ5",59,0)
T1 R !,"NAME: ",X:DTIME,"  " Q:X=""  D CHKNAME G T1
"RTN","XQ5",60,0)
CLEAR ;Clear fields not used by this option.
"RTN","XQ5",61,0)
 I "EMPRSOQ"[X X "F %="_$S("M"[X:"25,27:1:82","QO"[X:"25,31:1:82","RS"[X:"10,30:1:82","E"[X:"10,25,60:1:82","P"[X:"10,25,27:1:54,80:1:82")_" I $D(^DIC(19,DA,%)) D:%=10 CLEAR1 K ^DIC(19,DA,%)"
"RTN","XQ5",62,0)
 I "AI"[X X "F %="_$S("A"[X:"10,25,30:1:82","I"[X:"10,25,36:1:62,64:1:73")_" I $D(^DIC(19,DA,%)) D:%=10 CLEAR1 K ^DIC(19,DA,%)"
"RTN","XQ5",63,0)
 I "OQ"'[X F %=100,100.1,100.2 I $D(^DIC(19,DA,%)) K ^DIC(19,DA,%)
"RTN","XQ5",64,0)
 Q
"RTN","XQ5",65,0)
CLEAR1 S XQI=0 F  S XQI=$O(^DIC(19,DA,%,XQI)) Q:XQI'>0  S XQJ=$P(^(XQI,0),U) K ^DIC(19,"AD",$E(XQJ,1,30),DA,XQI)
"RTN","XQ5",66,0)
 K XQI,XQJ
"RTN","XQ5",67,0)
 Q
"RTN","XQ7")
0^23^B5099033
"RTN","XQ7",1,0)
XQ7 ;SF-ISC..SEA/JLI - MICROSURGERY OF XUTL MENU TREES ;9/19/96  08:30
"RTN","XQ7",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XQ7",3,0)
REDO ; All changes to an option come here, i.e., menu text, locks, prohibited times, etc.
"RTN","XQ7",4,0)
 S XQFLAG=DA
"RTN","XQ7",5,0)
 S %H=$H F %=0:0 S %=$O(^DIC(19,"AD",DA,%)) Q:%'>0  S ^DIC(19,%,99)=%H I '$D(^DIC(19,%,0)) K ^DIC(19,%),^DIC(19,"AD",DA,%)
"RTN","XQ7",6,0)
 F %=0:0 S %=$O(^VA(200,"AD",DA,%)) Q:%'>0  S ^VA(200,%,203.1)=%H
"RTN","XQ7",7,0)
 ;
"RTN","XQ7",8,0)
FLAG ;
"RTN","XQ7",9,0)
 D ^XQDATE S ^DIC(19,"AT",%,XQFLAG)=""
"RTN","XQ7",10,0)
 K %,%H,XQFLAG
"RTN","XQ7",11,0)
 Q
"RTN","XQ7",12,0)
 ;
"RTN","XQ7",13,0)
REDOX ;
"RTN","XQ7",14,0)
 S %H=$H,^DIC(19,DA(1),99)=%H
"RTN","XQ7",15,0)
 F %=0:0 S %=$O(^VA(200,"AD",DA(1),%)) Q:%'>0  S ^VA(200,%,203.1)=%H
"RTN","XQ7",16,0)
 Q
"RTN","XQ7",17,0)
 ;
"RTN","XQ7",18,0)
REDOXI ; Insertion of an item on a menu
"RTN","XQ7",19,0)
 D REDOX
"RTN","XQ7",20,0)
 S XQFLAG=DA(1)_"I"_X G FLAG
"RTN","XQ7",21,0)
 ;
"RTN","XQ7",22,0)
REDOXD ; Deletion of an item from a menu
"RTN","XQ7",23,0)
 D REDOX
"RTN","XQ7",24,0)
 S XQFLAG=DA(1)_"D"_X G FLAG
"RTN","XQ7",25,0)
 ;
"RTN","XQ7",26,0)
REDOXS ; Change or addition of a synonym
"RTN","XQ7",27,0)
 D REDOX
"RTN","XQ7",28,0)
 S XQFLAG=DA(1)_"S"_(+^DIC(19,DA(1),10,DA,0)) G FLAG
"RTN","XQ7",29,0)
 ;
"RTN","XQ7",30,0)
REDOXZ ; Change in display order, does not affect trees
"RTN","XQ7",31,0)
 D REDOX K %,%H
"RTN","XQ7",32,0)
 Q
"RTN","XQ7",33,0)
REDOXP ; Check for new primary menu added to user file
"RTN","XQ7",34,0)
 Q:$D(^XUTL("XQO","P"_X))
"RTN","XQ7",35,0)
 S XQFLAG=X_"P"_X G FLAG
"RTN","XQ7",36,0)
 ;
"RTN","XQ7",37,0)
CK ;Called from several places in ^DD(19,
"RTN","XQ7",38,0)
 I $D(DIFROM) Q
"RTN","XQ7",39,0)
 S %=$P(^DIC(19,D0,0),U,6),%Y=$P(^DIC(19,D0,0),U,1) I $S($L(%):$D(^XUSEC(%,DUZ)),1:1)
"RTN","XQ7",40,0)
 Q:'$T
"RTN","XQ7",41,0)
 I DUZ(0)="@"!$D(^XUSEC("XUMGR",DUZ))!$D(^VA(200,DUZ,19.5,Y,0))
"RTN","XQ7",42,0)
 Q:'$T
"RTN","XQ7",43,0)
CK1 S %=$P(^DIC(19,D0,0),U,4),%Y=$P(^DIC(19,Y,0),U,4) I $S((%'="O"&(%'="Q"))&(%Y'="Q"):1,(%="O"&(%Y="O")):1,(%="Q"&((%Y="O")!(%Y="Q"))):1,1:0)
"RTN","XQ7",44,0)
 Q
"RTN","XQ7",45,0)
DEV ;See if device is legit for this option. Called by CHK1+5^XQ71.
"RTN","XQ7",46,0)
 S (%,XQSJ)=0 Q:'$D(^DIC(19,+XQW,3.96,0))
"RTN","XQ7",47,0)
 F XQSL=1:1 S %=$O(^DIC(19,+XQW,3.96,%)) Q:%=""!(%'=+%)  S:XQSIO=^(%,0) XQSJ=1
"RTN","XQ7",48,0)
 Q
"RTN","XQ7",49,0)
UP F XQSA=1:1 Q:X?.NUP  S %=$A(X,XQSA) I %<123,%>96 S X=$E(X,1,XQSA-1)_$C(%-32)_$E(X,XQSA+1,255)
"RTN","XQ7",50,0)
 Q
"RTN","XQ7",51,0)
 ;
"RTN","XQ7",52,0)
KICK ;Kick off microsurgery here and all compute servers
"RTN","XQ7",53,0)
 D CHEK^XQ83
"RTN","XQ7",54,0)
 Q:'$D(^%ZIS(14.5))
"RTN","XQ7",55,0)
 N XQ,XQVOL,XQTIM
"RTN","XQ7",56,0)
 S XQTIM=$P($H,",")-1_","_$P($H,",",2)
"RTN","XQ7",57,0)
 S XQ=0 F  S XQ=$O(^%ZIS(14.5,XQ)) Q:XQ=""!(XQ'=+XQ)  I $P(^(XQ,0),U,11) D
"RTN","XQ7",58,0)
 .S ZTCPU=$P(^%ZIS(14.5,XQ,0),U) D CHEK^XQ83
"RTN","XQ7",59,0)
 Q
"RTN","XTSUMCK")
0^24^B36625264
"RTN","XTSUMCK",1,0)
XTSUMCK ;Boise/MAW,SFISC/RSD -compute routine checksums ;10/04/96  11:11
"RTN","XTSUMCK",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XTSUMCK",3,0)
 ;^XTMP("XTSUMCK",DUZ)=end time^home cpu^status^task #^start time^# rtns
"RTN","XTSUMCK",4,0)
 ;^XTMP("XTSUMCK",DUZ,"SYS",system)=end time^active^status^task #^end time^# rtns
"RTN","XTSUMCK",5,0)
 I '$G(DUZ) W *7,!!,"DUZ UNDEFINED...ABORTED." Q
"RTN","XTSUMCK",6,0)
 S:'$D(DT) DT=$$DT^XLFDT S:'$D(U) U="^"
"RTN","XTSUMCK",7,0)
 N DIR,I,XTCKSUM,XTHOME,XTROU,DIRUT,X,Y
"RTN","XTSUMCK",8,0)
 X ^%ZOSF("UCI") S XTHOME=Y
"RTN","XTSUMCK",9,0)
 ;set expiration date on ^XTMP
"RTN","XTSUMCK",10,0)
 S ^XTMP("XTSUMCK",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XTSUMCK",11,0)
 W !!,"You're on ",XTHOME,".  Checksums for selected routines on other systems",!,"will be compared to those on this system."
"RTN","XTSUMCK",12,0)
 I $G(^XTMP("XTSUMCK",DUZ))'="" S X=^XTMP("XTSUMCK",DUZ) D  Q:$D(DIRUT)
"RTN","XTSUMCK",13,0)
 .W *7,!!,"A checksum job, launched on ",$$FMTE^XLFDT($P(X,U,5))," from ",$P(X,U,2)," is",!," already on file."
"RTN","XTSUMCK",14,0)
 .W:$P(X,U,3)]"" !," It has a status of: ",$P(X,U,3)
"RTN","XTSUMCK",15,0)
 .S DIR(0)="Y",DIR("A")="Okay to delete the existing data",DIR("B")="NO"
"RTN","XTSUMCK",16,0)
 .D ^DIR
"RTN","XTSUMCK",17,0)
 .I Y'=1 W !!,"Nothing deleted...this job aborted." S DIRUT=1 Q
"RTN","XTSUMCK",18,0)
 .K ^XTMP("XTSUMCK",DUZ) S ^(DUZ)=""
"RTN","XTSUMCK",19,0)
 K ^UTILITY($J) W ! X ^%ZOSF("RSEL")
"RTN","XTSUMCK",20,0)
 I '$D(^UTILITY($J)) W !,"No routines selected." Q
"RTN","XTSUMCK",21,0)
 S ^XTMP("XTSUMCK",DUZ)=U_XTHOME_"^Loading routines^^"_$$NOW^XLFDT
"RTN","XTSUMCK",22,0)
 ;move list of routines into XTMP
"RTN","XTSUMCK",23,0)
 M ^XTMP("XTSUMCK",DUZ,"ROU")=^UTILITY($J)
"RTN","XTSUMCK",24,0)
 K ^UTILITY($J),DIR
"RTN","XTSUMCK",25,0)
 ;find systems to move to
"RTN","XTSUMCK",26,0)
 S Y=$P(XTHOME,",",2),I=0
"RTN","XTSUMCK",27,0)
 F  S I=$O(^%ZIS(14.5,I)) Q:'I  S X=$G(^(I,0)) S:$P(X,U)]""&$P(X,U,11)&($P(X,U)'=Y) ^XTMP("XTSUMCK",DUZ,"SYS",$P(X,U))=""
"RTN","XTSUMCK",28,0)
SYS I '$D(^XTMP("XTSUMCK",DUZ,"SYS")) W !!,"No Systems to Check",! G ABORT
"RTN","XTSUMCK",29,0)
 W !!,"I will Check the Routines on the following Systems:",!
"RTN","XTSUMCK",30,0)
 S I="" F  S I=$O(^XTMP("XTSUMCK",DUZ,"SYS",I)) Q:I=""  W ?3,I,!
"RTN","XTSUMCK",31,0)
 W ! S DIR(0)="Y",DIR("A")="Accept this list and continue",DIR("B")="YES"
"RTN","XTSUMCK",32,0)
 S DIR("?",1)="Enter Yes if you want to check the routines on the listed Systems",DIR("?")="Enter No if you want to create your own list of Systems."
"RTN","XTSUMCK",33,0)
 D ^DIR G ZTLD:Y,ABORT:$D(DIRUT) D  G SYS
"RTN","XTSUMCK",34,0)
 .N DIC K ^XTMP("XTSUMCK",DUZ,"SYS")
"RTN","XTSUMCK",35,0)
 .S DIC="^%ZIS(14.5,",DIC(0)="AEMQZ",DIC("S")="S %=^(0) I $P(%,U)'=$P(XTHOME,"","",2),$P(%,U,11)"
"RTN","XTSUMCK",36,0)
 .;ask for systems
"RTN","XTSUMCK",37,0)
 .F  D ^DIC Q:Y'>0  S ^XTMP("XTSUMCK",DUZ,"SYS",Y(0,0))=""
"RTN","XTSUMCK",38,0)
ZTLD ;queue build of master routine set checksums
"RTN","XTSUMCK",39,0)
 N ZTRTN,ZTDESC,ZTIO,ZTSAVE,ZTUCI,ZTCPU,ZTSK
"RTN","XTSUMCK",40,0)
 S ZTRTN="MSTR^XTSUMCK",ZTDESC="Routine Checksum Checker",ZTIO="",ZTSAVE("DUZ")="",ZTSAVE("XTHOME")="",ZTUCI=$P(XTHOME,","),ZTCPU=$P(XTHOME,",",2)
"RTN","XTSUMCK",41,0)
 D ^%ZTLOAD
"RTN","XTSUMCK",42,0)
 W !!
"RTN","XTSUMCK",43,0)
 I '$G(ZTSK) W *7,"Error...not queued!!" G ABORT
"RTN","XTSUMCK",44,0)
 I $G(ZTSK) D
"RTN","XTSUMCK",45,0)
 .S $P(^XTMP("XTSUMCK",DUZ),U,3,4)="Queued to run^"_ZTSK
"RTN","XTSUMCK",46,0)
 .W "Task number ",ZTSK," will calculate checksums for the selected"
"RTN","XTSUMCK",47,0)
 .W !,"routines here on ",XTHOME,"."
"RTN","XTSUMCK",48,0)
 .W !!,"These values will be used for comparison with the same routine set on all"
"RTN","XTSUMCK",49,0)
 .W !,"the other systems.  You will receive an alert when the job finishes.  The"
"RTN","XTSUMCK",50,0)
 .W !,"alert action will allow you to view/print the report that lists any"
"RTN","XTSUMCK",51,0)
 .W !,"routines that do not match the ""master"" calculated checksums."
"RTN","XTSUMCK",52,0)
 K ^UTILITY($J)
"RTN","XTSUMCK",53,0)
 Q
"RTN","XTSUMCK",54,0)
MSTR ;TaskMan entry point
"RTN","XTSUMCK",55,0)
 ;first, calculate the checksums for the "master" routine set
"RTN","XTSUMCK",56,0)
 S $P(^XTMP("XTSUMCK",DUZ),U,3)="Calculating checksums",XTDUZ=DUZ,XTX=""
"RTN","XTSUMCK",57,0)
 F XTCNT=0:1  S XTX=$O(^XTMP("XTSUMCK",DUZ,"ROU",XTX)) Q:XTX=""  D
"RTN","XTSUMCK",58,0)
 .S X=XTX
"RTN","XTSUMCK",59,0)
 .X ^%ZOSF("RSUM")
"RTN","XTSUMCK",60,0)
 .S ^XTMP("XTSUMCK",DUZ,"ROU",XTX)=Y
"RTN","XTSUMCK",61,0)
 ;next, job the checksum module on the other systems
"RTN","XTSUMCK",62,0)
 S $P(^XTMP("XTSUMCK",DUZ),U,6)=XTCNT,XTX=""
"RTN","XTSUMCK",63,0)
 F  S XTX=$O(^XTMP("XTSUMCK",DUZ,"SYS",XTX)) Q:XTX=""  D
"RTN","XTSUMCK",64,0)
 .N ZTSK,ZTCPU,ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTDTH
"RTN","XTSUMCK",65,0)
 .S ZTCPU=XTX,ZTRTN="CHK^XTSUMCK",ZTSAVE("XTDUZ")="",ZTUCI=$P(XTHOME,","),ZTDESC="Routine Checksum Checker for "_ZTUCI_","_ZTCPU,ZTDTH=$H,ZTIO=""
"RTN","XTSUMCK",66,0)
 .D ^%ZTLOAD
"RTN","XTSUMCK",67,0)
 .I $G(ZTSK) S ^XTMP("XTSUMCK",DUZ,"SYS",XTX)="^^Job Tasked^"_ZTSK,XTSUMCK(XTX)="0^"_$H Q
"RTN","XTSUMCK",68,0)
 .S %=$$NOW^XLFDT,^XTMP("XTSUMCK",DUZ,"SYS",XTX)=%_"^^ERROR -- Job couldn't be tasked^^"_%
"RTN","XTSUMCK",69,0)
 ;monitor background tasks
"RTN","XTSUMCK",70,0)
 ;checking for completion of all checksum jobs.  Once all completed,
"RTN","XTSUMCK",71,0)
 ;an alert is set up to notify the requester.
"RTN","XTSUMCK",72,0)
 S $P(^XTMP("XTSUMCK",DUZ),U,3)="Waiting for jobs to finish",XTSFLG=""
"RTN","XTSUMCK",73,0)
 F  D  Q:XTFLG  H 60
"RTN","XTSUMCK",74,0)
 .S XTFLG=1,XTSYS=""
"RTN","XTSUMCK",75,0)
 .F  S XTSYS=$O(^XTMP("XTSUMCK",DUZ,"SYS",XTSYS)) Q:XTSYS=""  S X=^(XTSYS) D:'X
"RTN","XTSUMCK",76,0)
 ..S XTFLG=0
"RTN","XTSUMCK",77,0)
 ..;not complete, if still active then reset counter
"RTN","XTSUMCK",78,0)
 ..I $P(XTSUMCK(XTSYS),U,2)'=$P(X,U,2) S XTSUMCK(XTSYS)="0^"_$P(X,U,2) Q
"RTN","XTSUMCK",79,0)
 ..;hasn't been active for at least 30 minutes
"RTN","XTSUMCK",80,0)
 ..I XTSUMCK(XTSYS)>30 S X=^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS),$P(X,U)=$$NOW^XLFDT,$P(X,U,3)="ERROR - was idle for more than 30 minutes",^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS)=X
"RTN","XTSUMCK",81,0)
 ..S $P(XTSUMCK(XTSYS),U)=XTSUMCK(XTSYS)+1
"RTN","XTSUMCK",82,0)
 ;log the date.time job completed
"RTN","XTSUMCK",83,0)
 S XTX=^XTMP("XTSUMCK",DUZ),XTX=$$NOW^XLFDT_U_$P(XTX,U,2)_"^Completed ^"_$P(XTX,U,4,6),^XTMP("XTSUMCK",DUZ)=XTX
"RTN","XTSUMCK",84,0)
 ;send an alert that the checksum job completed
"RTN","XTSUMCK",85,0)
 S XQA(DUZ)=""
"RTN","XTSUMCK",86,0)
 S XQAMSG="Routine checksum job completed."
"RTN","XTSUMCK",87,0)
 S XQAROU="^XTSUMCK1"
"RTN","XTSUMCK",88,0)
 D SETUP^XQALERT
"RTN","XTSUMCK",89,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","XTSUMCK",90,0)
 Q
"RTN","XTSUMCK",91,0)
CHK ;jobbed entry point...
"RTN","XTSUMCK",92,0)
 ;XTDUZ=DUZ of the user who started the checksum job...
"RTN","XTSUMCK",93,0)
 X ^%ZOSF("UCI") S XTSYS=$P(Y,",",2)
"RTN","XTSUMCK",94,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERR^XTSUMCK"
"RTN","XTSUMCK",95,0)
 E  S X="ERR^XTSUMCK",@^%ZOSF("TRAP")
"RTN","XTSUMCK",96,0)
 S XTMST=$P(^XTMP("XTSUMCK",XTDUZ),U,2),XTHM=$P(XTMST,",")_","_XTSYS
"RTN","XTSUMCK",97,0)
 S X=^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS),$P(X,U,2,3)=$H_"^Checking Routines",$P(X,U,5)=$$NOW^XLFDT,^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS)=X
"RTN","XTSUMCK",98,0)
 S XTROU=""
"RTN","XTSUMCK",99,0)
 F XTCNT=0:1 S XTROU=$O(^XTMP("XTSUMCK",XTDUZ,"ROU",XTROU)) Q:XTROU=""  D
"RTN","XTSUMCK",100,0)
 .S:'(XTCNT#10) $P(^XTMP("XTSUMCK",XTDUZ,XTSYS),U,2)=$H
"RTN","XTSUMCK",101,0)
 .I $T(^@XTROU)="" S ^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS,XTROU)="NOT ON THIS SYSTEM" Q
"RTN","XTSUMCK",102,0)
 .S XTCKSUM=+^XTMP("XTSUMCK",XTDUZ,"ROU",XTROU)
"RTN","XTSUMCK",103,0)
 .S X=XTROU
"RTN","XTSUMCK",104,0)
 .X ^%ZOSF("RSUM")
"RTN","XTSUMCK",105,0)
 .I Y=XTCKSUM Q
"RTN","XTSUMCK",106,0)
 .S ^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS,XTROU)="Checksum on "_XTHM_" = "_Y_" :: on "_XTMST_" = "_XTCKSUM
"RTN","XTSUMCK",107,0)
 S X=^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS),$P(X,U)=$$NOW^XLFDT,$P(X,U,3)="Normal Completion",$P(X,U,6)=XTCNT,^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS)=X
"RTN","XTSUMCK",108,0)
 Q
"RTN","XTSUMCK",109,0)
ABORT K ^XTMP("XTSUMCK",DUZ)
"RTN","XTSUMCK",110,0)
 Q
"RTN","XTSUMCK",111,0)
ERR ;error in background job
"RTN","XTSUMCK",112,0)
 S X=^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS),$P(X,U)=$$NOW^XLFDT,$P(X,U,3)="ERROR - Job terminated before completion",^XTMP("XTSUMCK",XTDUZ,"SYS",XTSYS)=X
"RTN","XTSUMCK",113,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","XTSUMCK",114,0)
 Q
"RTN","XTSUMCK1")
0^25^B3689291
"RTN","XTSUMCK1",1,0)
XTSUMCK1 ;Boise/MAW,SFISC/RSD-process routine checksum job results ;10/04/96  12:37
"RTN","XTSUMCK1",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","XTSUMCK1",3,0)
 ;this routine is normally called via an ALERT process...
"RTN","XTSUMCK1",4,0)
 W !!,"ROUTINE CHECKSUM REPORT"
"RTN","XTSUMCK1",5,0)
 I '$D(^XTMP("XTSUMCK",DUZ,"SYS")) W *7,!!,"ERROR -- NO data to retrieve!" Q
"RTN","XTSUMCK1",6,0)
 D EN^XUTMDEVQ("DQ^XTSUMCK1","Print Routine Checksum Results","")
"RTN","XTSUMCK1",7,0)
 W !
"RTN","XTSUMCK1",8,0)
 Q
"RTN","XTSUMCK1",9,0)
DQ ;TaskMan and display/print entry point
"RTN","XTSUMCK1",10,0)
 N DIR,DIRUT,XTX,XTUCI,XTROU,XTSYS,XTUL,XTPG,XTY,XTCNT,X,Y
"RTN","XTSUMCK1",11,0)
 Q:'$D(^XTMP("XTSUMCK",DUZ))  S XTX=^(DUZ)
"RTN","XTSUMCK1",12,0)
 S $P(XTUL,"-",IOM)="",XTPG=0,XTUCI=$P($P(XTX,U,2),",")
"RTN","XTSUMCK1",13,0)
 I $E(IOST)="C" W @IOF
"RTN","XTSUMCK1",14,0)
 D HDR
"RTN","XTSUMCK1",15,0)
 W !?31,"JOB STARTED: ",$$FMTE^XLFDT($P(XTX,U,5))
"RTN","XTSUMCK1",16,0)
 W !?33,"JOB ENDED: ",$$FMTE^XLFDT($P(XTX,U))
"RTN","XTSUMCK1",17,0)
 S XTSYS="",DIR(0)="E"
"RTN","XTSUMCK1",18,0)
 F  S XTSYS=$O(^XTMP("XTSUMCK",DUZ,"SYS",XTSYS)) Q:XTSYS=""  D  Q:$D(DIRUT)
"RTN","XTSUMCK1",19,0)
 .Q:$$CHK(4)
"RTN","XTSUMCK1",20,0)
 .W !!,"UCI,VOL: ",XTUCI,",",XTSYS," -- "
"RTN","XTSUMCK1",21,0)
 .S XTY=^XTMP("XTSUMCK",DUZ,"SYS",XTSYS) W:$P(XTY,U) $$FMTE^XLFDT($P(XTY,U))
"RTN","XTSUMCK1",22,0)
 .W " -- ",$P(XTY,U,3)
"RTN","XTSUMCK1",23,0)
 .S XTROU=""
"RTN","XTSUMCK1",24,0)
 .F XTCNT=0:1 S XTROU=$O(^XTMP("XTSUMCK",DUZ,"SYS",XTSYS,XTROU)) Q:XTROU=""  S Y=^(XTROU) D  Q:$D(DIRUT)
"RTN","XTSUMCK1",25,0)
 ..Q:$$CHK(2)
"RTN","XTSUMCK1",26,0)
 ..W !?2,XTROU,?12,Y
"RTN","XTSUMCK1",27,0)
 .W !!,?15,+$P(XTY,U,6)," Routine checked, ",XTCNT," failed.",!
"RTN","XTSUMCK1",28,0)
 K ^XTMP("XTSUMCK",DUZ)
"RTN","XTSUMCK1",29,0)
 I $E(IOST)="P" W @IOF
"RTN","XTSUMCK1",30,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","XTSUMCK1",31,0)
 Q
"RTN","XTSUMCK1",32,0)
CHK(Y) ;Y=excess lines, return 1 to exit & DIRUT is set
"RTN","XTSUMCK1",33,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XTSUMCK1",34,0)
 I $E(IOST,1,2)="C-" D ^DIR Q:'Y 1
"RTN","XTSUMCK1",35,0)
 W @IOF D HDR
"RTN","XTSUMCK1",36,0)
 Q 0
"RTN","XTSUMCK1",37,0)
 ;
"RTN","XTSUMCK1",38,0)
HDR S XTPG=XTPG+1
"RTN","XTSUMCK1",39,0)
 W !!,"MASTER ROUTINE SET USED RESIDES ON UCI,VOL: ",$P(XTX,U,2),?70,"PAGE ",XTPG,!,XTUL,!
"RTN","XTSUMCK1",40,0)
 Q
"RTN","ZTPTCH")
0^21^B7153979
"RTN","ZTPTCH",1,0)
ZTPTCH ;557/THM,SFISC/RSD-DISPLAY PATCHES FOR SELECTED ROUTINES ;09/16/96  10:11
"RTN","ZTPTCH",2,0)
 ;;8.0;KERNEL;**44**;Jul 10, 1995
"RTN","ZTPTCH",3,0)
 N ZTSK,%ZIS,IOP
"RTN","ZTPTCH",4,0)
 K ^UTILITY($J)
"RTN","ZTPTCH",5,0)
 W !,"Display Patches for Selected Routines",!!
"RTN","ZTPTCH",6,0)
 X ^%ZOSF("RSEL") I '$D(^UTILITY($J)) W !!,*7,"No routines were selected.",!! H 2 G EXIT
"RTN","ZTPTCH",7,0)
 W !! S %ZIS="MQ" D ^%ZIS G:POP EXIT
"RTN","ZTPTCH",8,0)
 I $D(IO("Q")) K IO("Q") S ZTDESC="Installed Patch Listing",ZTRTN="TASK^ZTPTCH",ZTSAVE("^UTILITY($J,")="" D ^%ZTLOAD
"RTN","ZTPTCH",9,0)
 I $D(ZTSK) W !!,"Request queued.",!! G EXIT
"RTN","ZTPTCH",10,0)
 ;
"RTN","ZTPTCH",11,0)
TASK ;
"RTN","ZTPTCH",12,0)
 N CNT,CNTR,DATE,LINE,PNUM,PG,QUIT,RTN,UCI,X,Y,Z,Z1
"RTN","ZTPTCH",13,0)
 K ^TMP("ZTPTCH",$J)
"RTN","ZTPTCH",14,0)
 W:'$D(ZTQUEUED) !!,"Processing routines..."
"RTN","ZTPTCH",15,0)
 S RTN="" F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  D  W:'$D(ZTQUEUED) "."
"RTN","ZTPTCH",16,0)
 .S X=$T(+2^@RTN) Q:X=""  S Y=$P(X,"**",2)
"RTN","ZTPTCH",17,0)
 .F Z=1:1 S Z1=$P(Y,",",Z) Q:(Z1="")  S ^TMP("ZTPTCH",$J,Z1,RTN)=""
"RTN","ZTPTCH",18,0)
 ;
"RTN","ZTPTCH",19,0)
 S U="^" D NOW^%DTC S Y=% D DD^%ZTPP S DATE=Y
"RTN","ZTPTCH",20,0)
 X ^%ZOSF("UCI") S UCI=Y,$P(LINE,"-",IOM)=""
"RTN","ZTPTCH",21,0)
 S (CNT,CNTR,PG,QUIT)=0
"RTN","ZTPTCH",22,0)
 U IO D HDR S PNUM=""
"RTN","ZTPTCH",23,0)
 F  S PNUM=$O(^TMP("ZTPTCH",$J,PNUM)) Q:PNUM=""!QUIT  W !! S RTN="",Z1=0 F Z=2:1 S RTN=$O(^TMP("ZTPTCH",$J,PNUM,RTN)) Q:RTN=""  D  Q:QUIT
"RTN","ZTPTCH",24,0)
 .I Z1=0 W PNUM S CNT=CNT+1
"RTN","ZTPTCH",25,0)
 .W ?Z-1#8*10,RTN S CNTR=CNTR+1
"RTN","ZTPTCH",26,0)
 .I (Z#8)=0,$O(^TMP("ZTPTCH",$J,PNUM,RTN))]"" D:$Y>(IOSL-6) HDR S Z=1 W !?Z-1#8*10 ;end of line
"RTN","ZTPTCH",27,0)
 .I $Y>(IOSL-6),(Z#8)=0,$O(^TMP("ZTPTCH",$J,PNUM,RTN))]"" D HDR S Z=1 W !?Z-1#8*10 ;end of page, more of same patch
"RTN","ZTPTCH",28,0)
 .I $Y>(IOSL-6),$O(^TMP("ZTPTCH",$J,PNUM,RTN))="" D HDR S Z=1 W !?Z-1#8*10 ;end of page, no more on same patch.
"RTN","ZTPTCH",29,0)
 .S Z1=1
"RTN","ZTPTCH",30,0)
 .Q
"RTN","ZTPTCH",31,0)
 W !!?10,"Total Patches = ",CNT,"  Total Routines = ",CNTR
"RTN","ZTPTCH",32,0)
 I IOST?1"C-".E,'QUIT S X=$$RD(0)
"RTN","ZTPTCH",33,0)
EXIT K ^UTILITY($J),^TMP("ZTPTCH",$J)
"RTN","ZTPTCH",34,0)
 D ^%ZISC
"RTN","ZTPTCH",35,0)
 Q
"RTN","ZTPTCH",36,0)
RD(X) ;
"RTN","ZTPTCH",37,0)
 W !!,"Enter RETURN to "_$S(X:"continue or '^' to exit: ",1:"end: ")
"RTN","ZTPTCH",38,0)
 R X:300
"RTN","ZTPTCH",39,0)
 Q ($E(X)="^")
"RTN","ZTPTCH",40,0)
 ;
"RTN","ZTPTCH",41,0)
HDR I IOST?1"C-".E,PG'=0,'$D(ZTQUEUED),$$RD(1) S QUIT=1 Q
"RTN","ZTPTCH",42,0)
 S PG=PG+1 W @IOF,!,"Installed Patches for Selected Routines ",UCI,?(IOM-8),"Page: ",PG,!,?60,DATE,!
"RTN","ZTPTCH",43,0)
 W "Patch #",?9,"|",$E(LINE,1,29)," Routines ",$E(LINE,1,29),"|",!
"RTN","ZTPTCH",44,0)
 Q
"UP",9.6,9.611,0)
9.611
"UP",9.6,9.63,0)
9.63
"UP",9.7,9.703,0)
9.703
"VER")
8.0^21.0
"^DD",9.6,9.6,2,0)
TYPE^S^0:SINGLE PACKAGE;1:MULTI-PACKAGE;2:GLOBAL PACKAGE;^0;3^Q
"^DD",9.6,9.6,2,3)

"^DD",9.6,9.6,2,21,0)
^^5^5^2960906^^^
"^DD",9.6,9.6,2,21,1,0)
This field controls what can be sent as part of this Build.
"^DD",9.6,9.6,2,21,2,0)
 SINGLE PACKAGE can contain all Routines and all Build Components.
"^DD",9.6,9.6,2,21,3,0)
 MULTI-PACAGE contains only a list of other Builds.
"^DD",9.6,9.6,2,21,4,0)
 GLOBAL PACKAGE can contain Environment Check and Post-Install
"^DD",9.6,9.6,2,21,5,0)
 Routines and a list of Globals.
"^DD",9.6,9.6,2,"DT")
2950105
"^DD",9.6,9.6,10,0)
MULTIPLE BUILD^9.63^^10;0
"^DD",9.6,9.6,10,21,0)
^^4^4^2960904^^
"^DD",9.6,9.6,10,21,1,0)
This multiple contains other Builds that will be sent with this package
"^DD",9.6,9.6,10,21,2,0)
for a multi-package distribution. It can also contain a list of patches
"^DD",9.6,9.6,10,21,3,0)
that was rolled up into this Build.  The Type field is used to distinguish
"^DD",9.6,9.6,10,21,4,0)
the difference in its use.
"^DD",9.6,9.6,10,"DT")
2960904
"^DD",9.6,9.6,11,0)
REQUIRED BUILD^9.611^^REQB;0
"^DD",9.6,9.611,0)
REQUIRED BUILD SUB-FIELD^^1^2
"^DD",9.6,9.611,0,"DT")
2960905
"^DD",9.6,9.611,0,"IX","B",9.611,.01)

"^DD",9.6,9.611,0,"NM","REQUIRED BUILD")

"^DD",9.6,9.611,0,"UP")
9.6
"^DD",9.6,9.611,.01,0)
REQUIRED BUILD^MFX^^0;1^K:$L(X)>50!($L(X)<3) X I $D(X) D INPUTMB^XPDET(.X)
"^DD",9.6,9.611,.01,1,0)
^.1
"^DD",9.6,9.611,.01,1,1,0)
9.611^B
"^DD",9.6,9.611,.01,1,1,1)
S ^XPD(9.6,DA(1),"REQB","B",X,DA)=""
"^DD",9.6,9.611,.01,1,1,2)
K ^XPD(9.6,DA(1),"REQB","B",X,DA)
"^DD",9.6,9.611,.01,3)
Enter a Build name
"^DD",9.6,9.611,.01,4)
D HELPMB^XPDET
"^DD",9.6,9.611,.01,21,0)
^^4^4^2960904^^
"^DD",9.6,9.611,.01,21,1,0)
Enter a Build name, a patch or package, that is required to be
"^DD",9.6,9.611,.01,21,2,0)
installed before this Build is installed.  KIDS will check the
"^DD",9.6,9.611,.01,21,3,0)
Package file, Version multiple and Patch Application History multiple,
"^DD",9.6,9.611,.01,21,4,0)
to verify that the Required Build has been installed.
"^DD",9.6,9.611,.01,"DT")
2960904
"^DD",9.6,9.611,1,0)
ACTION^RS^0:Warning only;1:Don't install, remove global;2:Don't install, leave global;^0;2^Q
"^DD",9.6,9.611,1,21,0)
^^2^2^2960819^
"^DD",9.6,9.611,1,21,1,0)
This is the action you want to happen when installing this Build and the
"^DD",9.6,9.611,1,21,2,0)
Required Build has not been installed at the site.
"^DD",9.6,9.611,1,"DT")
2960905
"^DD",9.6,9.63,0)
MULTIPLE BUILD SUB-FIELD^^.01^2
"^DD",9.6,9.63,0,"DT")
2960904
"^DD",9.6,9.63,0,"IX","B",9.63,.01)

"^DD",9.6,9.63,0,"NM","MULTIPLE BUILD")

"^DD",9.6,9.63,0,"UP")
9.6
"^DD",9.6,9.63,.001,0)
INSTALL ORDER^NJ2,0^^ ^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",9.6,9.63,.001,3)
Type a Number between 1 and 99, 0 Decimal Digits
"^DD",9.6,9.63,.001,21,0)
^^1^1^2940503^
"^DD",9.6,9.63,.001,21,1,0)
This is the order in which this package will be installed.
"^DD",9.6,9.63,.001,"DT")
2940503
"^DD",9.6,9.63,.01,0)
MULTIPLE BUILD^MFX^^0;1^K:$L(X)>50!($L(X)<3) X I $D(X) D INPUTMB^XPDET(.X)
"^DD",9.6,9.63,.01,1,0)
^.1
"^DD",9.6,9.63,.01,1,1,0)
9.63^B
"^DD",9.6,9.63,.01,1,1,1)
S ^XPD(9.6,DA(1),10,"B",X,DA)=""
"^DD",9.6,9.63,.01,1,1,2)
K ^XPD(9.6,DA(1),10,"B",X,DA)
"^DD",9.6,9.63,.01,3)
Enter a Build name
"^DD",9.6,9.63,.01,4)
D HELPMB^XPDET
"^DD",9.6,9.63,.01,21,0)
^^2^2^2960904^^
"^DD",9.6,9.63,.01,21,1,0)
Name of Build that will be part of this multi-package distribution or a
"^DD",9.6,9.63,.01,21,2,0)
patch that is part of this Build definition.
"^DD",9.6,9.63,.01,"DT")
2960904
"^DD",9.7,9.7,30,0)
VOLUME SET^9.703A^^VOL;0
"^DD",9.7,9.7,30,21,0)
^^2^2^2960919^^^^
"^DD",9.7,9.7,30,21,1,0)
This multiple contains the Volumes Sets that will be updated with the new
"^DD",9.7,9.7,30,21,2,0)
routines and compiled cross references, print and input templates.
"^DD",9.7,9.7,30,"DT")
2941017
"^DD",9.7,9.703,0)
VOLUME SET SUB-FIELD^^4^5
"^DD",9.7,9.703,0,"DT")
2941014
"^DD",9.7,9.703,0,"IX","B",9.703,.01)

"^DD",9.7,9.703,0,"NM","VOLUME SET")

"^DD",9.7,9.703,0,"UP")
9.7
"^DD",9.7,9.703,.01,0)
VOLUME SET^MFX^^0;1^K:$L(X)>30!($L(X)<3) X D VOLE^XPDET(.X)
"^DD",9.7,9.703,.01,1,0)
^.1
"^DD",9.7,9.703,.01,1,1,0)
9.703^B
"^DD",9.7,9.703,.01,1,1,1)
S ^XPD(9.7,DA(1),"VOL","B",$E(X,1,30),DA)=""
"^DD",9.7,9.703,.01,1,1,2)
K ^XPD(9.7,DA(1),"VOL","B",$E(X,1,30),DA)
"^DD",9.7,9.703,.01,3)
Enter a Compute Server or Print Server type VOLUME SET
"^DD",9.7,9.703,.01,4)
D VOLH^XPDET
"^DD",9.7,9.703,.01,21,0)
^^3^3^2960919^^^^
"^DD",9.7,9.703,.01,21,1,0)
Enter the name of the VOLUME SET that you want updated when this package is
"^DD",9.7,9.703,.01,21,2,0)
installed. This field points to the VOLUME SET file, #14.5. A VOLUME SET
"^DD",9.7,9.703,.01,21,3,0)
must have the field SIGNON/PRODUCTION VOLUME SET, #9, set to YES.
"^DD",9.7,9.703,.01,"DT")
2941017
"^DD",9.7,9.703,1,0)
COMPLETED TIME^D^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",9.7,9.703,1,21,0)
^^1^1^2941014^
"^DD",9.7,9.703,1,21,1,0)
This is the time the update to the VOLUME SET was completed. 
"^DD",9.7,9.703,1,"DT")
2941014
"^DD",9.7,9.703,2,0)
START TIME^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",9.7,9.703,2,3)

"^DD",9.7,9.703,2,21,0)
^^1^1^2941014^
"^DD",9.7,9.703,2,21,1,0)
This is the time the update to the VOLUME SET was started.
"^DD",9.7,9.703,2,"DT")
2941014
"^DD",9.7,9.703,3,0)
QUEUED TASK NUMBER^NJ8,0^^0;4^K:+X'=X!(X>99999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9.7,9.703,3,3)
Type a Number between 1 and 99999999, 0 Decimal Digits
"^DD",9.7,9.703,3,21,0)
^^1^1^2941014^
"^DD",9.7,9.703,3,21,1,0)
This is the Task number for the job that is updating the VOLUME SET.
"^DD",9.7,9.703,3,"DT")
2941014
"^DD",9.7,9.703,4,0)
LAST UPDATE^F^^1;1^K:$L(X)>30!($L(X)<3) X
"^DD",9.7,9.703,4,3)
Must be $H format
"^DD",9.7,9.703,4,21,0)
^^2^2^2941014^
"^DD",9.7,9.703,4,21,1,0)
This is the $H value from the job that is updating the VOLUME SET. It should
"^DD",9.7,9.703,4,21,2,0)
be updated every 60 seconds.
"^DD",9.7,9.703,4,"DT")
2941014
"^DD",14.5,14.5,9,0)
SIGNON/PRODUCTION VOLUME SET^S^0:No;1:Yes;^0;11^Q
"^DD",14.5,14.5,9,21,0)
^^10^10^2960917^^
"^DD",14.5,14.5,9,21,1,0)
Enter Yes if this Volume Set has the following properties:
"^DD",14.5,14.5,9,21,2,0)
 1. Users can sign-on into the Kernel Menu system or the RPC Broker Server
"^DD",14.5,14.5,9,21,3,0)
    routine is running there.
"^DD",14.5,14.5,9,21,4,0)
 2. Has a productions UCI which contains application routines.
"^DD",14.5,14.5,9,21,5,0)
 3. The ^XTMP global is translated.
"^DD",14.5,14.5,9,21,6,0)

"^DD",14.5,14.5,9,21,7,0)
If you enter Yes the Kernel Installation and Distribution System will be able
"^DD",14.5,14.5,9,21,8,0)
to move routines to this Volume Set.  The Kernel Menu system will be able to
"^DD",14.5,14.5,9,21,9,0)
run the Menu Microsurgery and keep menus updated.
"^DD",14.5,14.5,9,21,10,0)

"^DD",14.5,14.5,9,"DT")
2960917
**END**
**END**
