Released OR*3*253 SEQ #230
Extracted from mail message
**KIDS**:OR*3.0*253^

**INSTALL NAME**
OR*3.0*253
"BLD",6791,0)
OR*3.0*253^ORDER ENTRY/RESULTS REPORTING^0^3060607^y
"BLD",6791,1,0)
^^3^3^3060607^
"BLD",6791,1,1,0)
FIX UNSIGNED ORDERS NOT GENERATING ALERTS.
"BLD",6791,1,2,0)
MORE USEFUL NUMERIC PROMPT ERROR MESSAGES
"BLD",6791,1,3,0)
FIX RESTRICTED PATIENT LIST SCROLLING BUG.
"BLD",6791,4,0)
^9.64PA^^
"BLD",6791,"INI")
PRECHECK^ORMTIMST
"BLD",6791,"INID")
n^^n
"BLD",6791,"INIT")

"BLD",6791,"KRN",0)
^9.67PA^8989.52^19
"BLD",6791,"KRN",.4,0)
.4
"BLD",6791,"KRN",.401,0)
.401
"BLD",6791,"KRN",.402,0)
.402
"BLD",6791,"KRN",.403,0)
.403
"BLD",6791,"KRN",.5,0)
.5
"BLD",6791,"KRN",.84,0)
.84
"BLD",6791,"KRN",3.6,0)
3.6
"BLD",6791,"KRN",3.8,0)
3.8
"BLD",6791,"KRN",9.2,0)
9.2
"BLD",6791,"KRN",9.8,0)
9.8
"BLD",6791,"KRN",9.8,"NM",0)
^9.68A^8^6
"BLD",6791,"KRN",9.8,"NM",1,0)
ORMTIME^^0^9171622
"BLD",6791,"KRN",9.8,"NM",2,0)
ORQPTQ11^^0^56815266
"BLD",6791,"KRN",9.8,"NM",3,0)
ORWDOR^^0^8459671
"BLD",6791,"KRN",9.8,"NM",6,0)
ORMTIM02^^0^16808061
"BLD",6791,"KRN",9.8,"NM",7,0)
ORB3^^0^88202399
"BLD",6791,"KRN",9.8,"NM",8,0)
ORMTIMST^^0^17732442
"BLD",6791,"KRN",9.8,"NM","B","ORB3",7)

"BLD",6791,"KRN",9.8,"NM","B","ORMTIM02",6)

"BLD",6791,"KRN",9.8,"NM","B","ORMTIME",1)

"BLD",6791,"KRN",9.8,"NM","B","ORMTIMST",8)

"BLD",6791,"KRN",9.8,"NM","B","ORQPTQ11",2)

"BLD",6791,"KRN",9.8,"NM","B","ORWDOR",3)

"BLD",6791,"KRN",19,0)
19
"BLD",6791,"KRN",19,"NM",0)
^9.68A^^
"BLD",6791,"KRN",19.1,0)
19.1
"BLD",6791,"KRN",101,0)
101
"BLD",6791,"KRN",409.61,0)
409.61
"BLD",6791,"KRN",771,0)
771
"BLD",6791,"KRN",870,0)
870
"BLD",6791,"KRN",8989.51,0)
8989.51
"BLD",6791,"KRN",8989.52,0)
8989.52
"BLD",6791,"KRN",8994,0)
8994
"BLD",6791,"KRN","B",.4,.4)

"BLD",6791,"KRN","B",.401,.401)

"BLD",6791,"KRN","B",.402,.402)

"BLD",6791,"KRN","B",.403,.403)

"BLD",6791,"KRN","B",.5,.5)

"BLD",6791,"KRN","B",.84,.84)

"BLD",6791,"KRN","B",3.6,3.6)

"BLD",6791,"KRN","B",3.8,3.8)

"BLD",6791,"KRN","B",9.2,9.2)

"BLD",6791,"KRN","B",9.8,9.8)

"BLD",6791,"KRN","B",19,19)

"BLD",6791,"KRN","B",19.1,19.1)

"BLD",6791,"KRN","B",101,101)

"BLD",6791,"KRN","B",409.61,409.61)

"BLD",6791,"KRN","B",771,771)

"BLD",6791,"KRN","B",870,870)

"BLD",6791,"KRN","B",8989.51,8989.51)

"BLD",6791,"KRN","B",8989.52,8989.52)

"BLD",6791,"KRN","B",8994,8994)

"BLD",6791,"PRE")
ORMTIMST
"BLD",6791,"QUES",0)
^9.62^^
"BLD",6791,"REQB",0)
^9.611^1^1
"BLD",6791,"REQB",1,0)
OR*3.0*220^2
"BLD",6791,"REQB","B","OR*3.0*220",1)

"INI")
PRECHECK^ORMTIMST
"MBREQ")
0
"PKG",167,-1)
1^1
"PKG",167,0)
ORDER ENTRY/RESULTS REPORTING^OR^Order Entry/Results Reporting
"PKG",167,22,0)
^9.49I^1^1
"PKG",167,22,1,0)
3.0^2971217^2980417^1271
"PKG",167,22,1,"PAH",1,0)
253^3060607
"PKG",167,22,1,"PAH",1,1,0)
^^3^3^3060607
"PKG",167,22,1,"PAH",1,1,1,0)
FIX UNSIGNED ORDERS NOT GENERATING ALERTS.
"PKG",167,22,1,"PAH",1,1,2,0)
MORE USEFUL NUMERIC PROMPT ERROR MESSAGES
"PKG",167,22,1,"PAH",1,1,3,0)
FIX RESTRICTED PATIENT LIST SCROLLING BUG.
"PRE")
ORMTIMST
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","ORB3")
0^7^B88202399^B87608247
"RTN","ORB3",1,0)
ORB3 ; slc/CLA - Main routine for OE/RR 3 notifications ;6/6/01  10:46 [8/16/05 5:33am]
"RTN","ORB3",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**31,74,91,105,139,190,220,253**;Dec 17, 1997
"RTN","ORB3",3,0)
EN(ORN,ORBDFN,ORNUM,ORBADUZ,ORBPMSG,ORBPDATA) ;
"RTN","ORB3",4,0)
 ;
"RTN","ORB3",5,0)
 N ORBENT
"RTN","ORB3",6,0)
 S ORBENT=$$ENTITY^ORB31(ORNUM)
"RTN","ORB3",7,0)
 ;
"RTN","ORB3",8,0)
 Q:$$GET^XPAR(ORBENT,"ORB SYSTEM ENABLE/DISABLE",1,"I")="D"
"RTN","ORB3",9,0)
 Q:'$L($G(^ORD(100.9,ORN,0)))
"RTN","ORB3",10,0)
 Q:+$$ONOFF^ORB3FN(ORN)=0
"RTN","ORB3",11,0)
 ;
"RTN","ORB3",12,0)
 S ORBPMSG=$E($G(ORBPMSG),1,51)
"RTN","ORB3",13,0)
 ;
"RTN","ORB3",14,0)
 ;if msg from notif file or oc notif (#54), quit if dup w/in past 1 min:
"RTN","ORB3",15,0)
 N ORBDUP,ORBN
"RTN","ORB3",16,0)
 S ORBN=^ORD(100.9,ORN,0)
"RTN","ORB3",17,0)
 I ($P(ORBN,"^",4)="NOT")!(ORN=54) D
"RTN","ORB3",18,0)
 .S ORBDUP=$$DUP^ORB31(ORN,ORBDFN,ORBPMSG,ORNUM)
"RTN","ORB3",19,0)
 Q:+$G(ORBDUP)=1
"RTN","ORB3",20,0)
 ;
"RTN","ORB3",21,0)
 N ORBDESC
"RTN","ORB3",22,0)
 S ORBDESC=" Send Alert Notification ("_(+ORN)_") "_$P($G(^ORD(100.9,+ORN,0)),U,1)_"  "
"RTN","ORB3",23,0)
 ;
"RTN","ORB3",24,0)
 D QUEUE^ORB31(ORN,ORBDFN,$G(ORNUM),.ORBADUZ,$G(ORBPMSG),$G(ORBPDATA),$H,ORBDESC,$G(DGPMA))
"RTN","ORB3",25,0)
 Q
"RTN","ORB3",26,0)
ZTSK ;
"RTN","ORB3",27,0)
 D START
"RTN","ORB3",28,0)
 S ZTREQ="@"
"RTN","ORB3",29,0)
 Q
"RTN","ORB3",30,0)
UTL(ORBU,ORN,ORBDFN,ORNUM,ORBADUZ,ORBPMSG,ORBPDATA) ;
"RTN","ORB3",31,0)
 Q:$G(ORBU)'=1
"RTN","ORB3",32,0)
START Q:$G(ORN)=""!($G(ORBDFN)="")
"RTN","ORB3",33,0)
 Q:'$L($G(^ORD(100.9,ORN,0)))
"RTN","ORB3",34,0)
 N ORBNOW,ORBID,ORBLOCK,ORBDESC
"RTN","ORB3",35,0)
 S ORBNOW=$$NOW^XLFDT
"RTN","ORB3",36,0)
 S ORBLOCK=0
"RTN","ORB3",37,0)
 ;
"RTN","ORB3",38,0)
 ;lock to prevent concurrent processing by other resource slots:
"RTN","ORB3",39,0)
 I '$D(ORBU) D
"RTN","ORB3",40,0)
 .S ^XTMP("ORBLOCK",0)=$$FMADD^XLFDT(ORBNOW,1,"","","")_"^"_ORBNOW
"RTN","ORB3",41,0)
 .S ORBID=$P($P($G(ORBPDATA),"|",2),"@")  ;get unique data id
"RTN","ORB3",42,0)
 .I $L(ORBID) D
"RTN","ORB3",43,0)
 ..LOCK +^XTMP("ORBLOCK",ORBDFN,ORN,ORBID):60 E  D  Q
"RTN","ORB3",44,0)
 ...S ORBDESC=" Requeue Alert Notification ("_(+ORN)_") "_$P($G(^ORD(100.9,+ORN,0)),U,1)_"  "
"RTN","ORB3",45,0)
 ...D QUEUE^ORB31(ORN,ORBDFN,$G(ORNUM),.ORBADUZ,$G(ORBPMSG),$G(ORBPDATA),$$HADD^XLFDT($H,"","",5,""),ORBDESC,$G(DGPMA)) ;requeue in 5 min.
"RTN","ORB3",46,0)
 ...S ORBLOCK=1
"RTN","ORB3",47,0)
 .;
"RTN","ORB3",48,0)
 .I '$L(ORBID) D
"RTN","ORB3",49,0)
 ..LOCK +^XTMP("ORBLOCK",ORBDFN,ORN):60 E  D  Q
"RTN","ORB3",50,0)
 ...S ORBDESC=" Requeue Alert Notification ("_(+ORN)_") "_$P($G(^ORD(100.9,+ORN,0)),U,1)_"  "
"RTN","ORB3",51,0)
 ...D QUEUE^ORB31(ORN,ORBDFN,$G(ORNUM),.ORBADUZ,$G(ORBPMSG),$G(ORBPDATA),$$HADD^XLFDT($H,"","",5,""),ORBDESC,$G(DGPMA)) ;requeue in 5 min.
"RTN","ORB3",52,0)
 ...S ORBLOCK=1
"RTN","ORB3",53,0)
 .;
"RTN","ORB3",54,0)
 I ORBLOCK=1 D QUIT Q
"RTN","ORB3",55,0)
 ;
"RTN","ORB3",56,0)
DOALERT ; Entry point for alert logic outside of TaskMan
"RTN","ORB3",57,0)
 N ORBDUZ,ORBN,ORBXQAID,ORPTNAM,ORBPRIM,ORBATTD,ORBDEV,ORBENT
"RTN","ORB3",58,0)
 N ORBUI,ORBASPEC,ORBSMSG,ORBADT,ORBSDEV,ORBDEL,ORBDI,ORBTDEV,ORY
"RTN","ORB3",59,0)
 S ORBUI=1,ORBADT=0
"RTN","ORB3",60,0)
 S:'$L($G(ORBPMSG)) ORBPMSG=""
"RTN","ORB3",61,0)
 I '$L(ORBPDATA),(+$G(ORNUM)>0) S ORBPDATA=+$G(ORNUM)_"@"
"RTN","ORB3",62,0)
 S ORBN=^ORD(100.9,ORN,0)
"RTN","ORB3",63,0)
 ;
"RTN","ORB3",64,0)
 S ORBENT=$$ENTITY^ORB31(ORNUM)
"RTN","ORB3",65,0)
 ;
"RTN","ORB3",66,0)
 N DFN S DFN=ORBDFN,VA200="" D OERR^VADPT
"RTN","ORB3",67,0)
 I ('$L($G(VA("BID"))))!('$L($G(VADM(1)))) D QUIT Q
"RTN","ORB3",68,0)
 I (ORN=18)!(ORN=20)!(ORN=35) S ORBADT=1 ;A/D/T notif
"RTN","ORB3",69,0)
 ;if not an A/D/T notif, get primary & attending from OERR^VADPT:
"RTN","ORB3",70,0)
 I ORBADT=0 S ORBPRIM=+$P(VAIN(2),U),ORBATTD=+$P(VAIN(11),U)
"RTN","ORB3",71,0)
 I ORBADT=1 D ADT^ORB31(ORN,ORBDFN,.ORBPRIM,.ORBATTD,$G(ORDGPMA)) ;A/D/T notif
"RTN","ORB3",72,0)
 I $D(ORBU) D  ;create debug msg
"RTN","ORB3",73,0)
 .S ORBU(ORBUI)="Processing notification: "_$P(ORBN,U),ORBUI=ORBUI+1
"RTN","ORB3",74,0)
 .S ORBU(ORBUI)="            for patient: "_VADM(1),ORBUI=ORBUI+1
"RTN","ORB3",75,0)
 .I $G(ORNUM)>0 S ORBU(ORBUI)="              for order: "_ORNUM,ORBUI=ORBUI+1
"RTN","ORB3",76,0)
 D REGULAR^ORB3REG(ORN,.XQA,.ORBU,.ORBUI,.ORBDEV,ORBDFN)
"RTN","ORB3",77,0)
 D SPECIAL^ORB3SPEC(ORN,.ORBASPEC,.ORBU,.ORBUI,$G(ORNUM),ORBDFN,$G(ORBPDATA),.ORBSMSG,$G(ORBPMSG),.ORBSDEV,$G(ORBPRIM),$G(ORBATTD))
"RTN","ORB3",78,0)
 I $L($G(ORBSMSG)) S ORBPMSG=$E(ORBSMSG,1,51)
"RTN","ORB3",79,0)
 I $D(ORBASPEC)>1 D SPECDUZS ;special recips
"RTN","ORB3",80,0)
 I $D(ORBADUZ)>1 D PKGDUZS ;pkg-supplied recips
"RTN","ORB3",81,0)
 D TITLE ;provider recips
"RTN","ORB3",82,0)
 S ORBXQAID=$P(ORBN,"^",2)_","_ORBDFN_","_ORN
"RTN","ORB3",83,0)
 ;
"RTN","ORB3",84,0)
 I ($D(XQA)>1)!($D(ORBDEV)>1)!($D(ORBSDEV)>1) D  ;recips found
"RTN","ORB3",85,0)
 .S XQAFLG=$P(ORBN,"^",5)
"RTN","ORB3",86,0)
 .S XQADFN=ORBDFN
"RTN","ORB3",87,0)
 .I XQAFLG="R" S XQAROU=$P(ORBN,"^",6)_"^"_$P(ORBN,"^",7)
"RTN","ORB3",88,0)
 .I $G(ORBPDATA)'="" S XQADATA=ORBPDATA
"RTN","ORB3",89,0)
 .S ORPTNAM=$E(VADM(1)_"         ",1,9)
"RTN","ORB3",90,0)
 .S XQAMSG=ORPTNAM_" "_"("_$E(ORPTNAM)_$E(VA("BID"),1,4)_")"_": "
"RTN","ORB3",91,0)
 .S XQAMSG=XQAMSG_$S(ORBPMSG'="":ORBPMSG,1:$P(ORBN,"^",3))
"RTN","ORB3",92,0)
 .S XQAARCH=$$GET^XPAR(ORBENT,"ORB ARCHIVE PERIOD",ORN,"I")
"RTN","ORB3",93,0)
 .S XQASUPV=$$GET^XPAR(ORBENT,"ORB FORWARD SUPERVISOR",ORN,"I")
"RTN","ORB3",94,0)
 .S XQASURO=$$GET^XPAR(ORBENT,"ORB FORWARD SURROGATES",ORN,"I")
"RTN","ORB3",95,0)
 .S XQAREVUE=$$GET^XPAR(ORBENT,"ORB FORWARD BACKUP REVIEWER",ORN,"I")
"RTN","ORB3",96,0)
 .S XQACNDEL=$$GET^XPAR(ORBENT,"ORB REMOVE",ORN,"I")
"RTN","ORB3",97,0)
 .S XQACNDEL=$S(XQACNDEL=1:1,1:"")
"RTN","ORB3",98,0)
 .I $D(ORBDEV)>1 D REGDEV^ORB31(.ORBDEV)
"RTN","ORB3",99,0)
 .I $D(ORBSDEV)>1 D REGDEV^ORB31(.ORBSDEV)
"RTN","ORB3",100,0)
 .I $D(ORBTDEV)>1 D REGDEV^ORB31(.ORBTDEV)
"RTN","ORB3",101,0)
 .S XQAID=ORBXQAID
"RTN","ORB3",102,0)
 .I $D(XQA) D SETUP^XQALERT  ;if no [new] recips don't send alert
"RTN","ORB3",103,0)
QUIT ;
"RTN","ORB3",104,0)
 K VA,VA200,VADM,VAERR,VAIN,XQA,XQADATA,XQAID,XQAFLG,XQAMSG,XQAROU,XQAARCH,XQASUPV,XQASURO,XQADFN
"RTN","ORB3",105,0)
 K ^XTMP("ORBUSER",$J)
"RTN","ORB3",106,0)
 I '$D(ORBU),$D(ORBLOCK) D
"RTN","ORB3",107,0)
 .I $L(ORBID) LOCK -^XTMP("ORBLOCK",ORBDFN,ORN,ORBID)
"RTN","ORB3",108,0)
 .E  LOCK -^XTMP("ORBLOCK",ORBDFN,ORN)
"RTN","ORB3",109,0)
 Q
"RTN","ORB3",110,0)
PKGDUZS ;get DUZs from pkg-passed ORBADUZ() array
"RTN","ORB3",111,0)
 N ORBPDUZ
"RTN","ORB3",112,0)
 I $D(ORBU) D
"RTN","ORB3",113,0)
 .S ORBU(ORBUI)=" ",ORBUI=ORBUI+1
"RTN","ORB3",114,0)
 .I ORN=68 S ORBU(ORBUI)="Recipients with Lab Threshold Exceeded:",ORBUI=ORBUI+1
"RTN","ORB3",115,0)
 .E  S ORBU(ORBUI)="Recipients defined when notif was triggered:",ORBUI=ORBUI+1
"RTN","ORB3",116,0)
 S ORBPDUZ=""
"RTN","ORB3",117,0)
 F  S ORBPDUZ=$O(ORBADUZ(ORBPDUZ)) Q:ORBPDUZ=""  S ORBDUZ=ORBPDUZ D USER
"RTN","ORB3",118,0)
 Q
"RTN","ORB3",119,0)
SPECDUZS ;get DUZs rtn by SPECIAL^ORB3SPEC
"RTN","ORB3",120,0)
 N ORBSDUZ
"RTN","ORB3",121,0)
 I $D(ORBU) D
"RTN","ORB3",122,0)
 .S ORBU(ORBUI)=" ",ORBUI=ORBUI+1
"RTN","ORB3",123,0)
 .S ORBU(ORBUI)="Special recipients associated with the notification:",ORBUI=ORBUI+1
"RTN","ORB3",124,0)
 S ORBSDUZ=""
"RTN","ORB3",125,0)
 F  S ORBSDUZ=$O(ORBASPEC(ORBSDUZ)) Q:ORBSDUZ=""  S ORBDUZ=ORBSDUZ D USER
"RTN","ORB3",126,0)
 Q
"RTN","ORB3",127,0)
TITLE ;get provider recips
"RTN","ORB3",128,0)
 N TITLES
"RTN","ORB3",129,0)
 I $D(ORBU) D
"RTN","ORB3",130,0)
 .S ORBU(ORBUI)=" ",ORBUI=ORBUI+1
"RTN","ORB3",131,0)
 .S ORBU(ORBUI)="Recipients determined by Provider Recipient parameter:",ORBUI=ORBUI+1
"RTN","ORB3",132,0)
 ;
"RTN","ORB3",133,0)
 S TITLES=$$GET^XPAR(ORBENT,"ORB PROVIDER RECIPIENTS",ORN,"I")
"RTN","ORB3",134,0)
 I TITLES["P" D PRIMARY
"RTN","ORB3",135,0)
 I TITLES["A" D ATTEND
"RTN","ORB3",136,0)
 I TITLES["T" D TEAMS
"RTN","ORB3",137,0)
 I TITLES["O" D ORDERER
"RTN","ORB3",138,0)
 I TITLES["E" D ENTERBY
"RTN","ORB3",139,0)
 I TITLES["R" D PCMMPRIM
"RTN","ORB3",140,0)
 I TITLES["S" D PCMMASSC
"RTN","ORB3",141,0)
 I TITLES["M" D PCMMTEAM
"RTN","ORB3",142,0)
 Q
"RTN","ORB3",143,0)
PRIMARY ;
"RTN","ORB3",144,0)
 I $D(ORBU),ORBADT=0 S ORBU(ORBUI)=" Inpt primary provider:",ORBUI=ORBUI+1
"RTN","ORB3",145,0)
 I $D(ORBU),ORBADT=1 S ORBU(ORBUI)=" Inpt primary provider: option cannot determine without A/D/T event data.",ORBUI=ORBUI+1
"RTN","ORB3",146,0)
 I +$G(ORBPRIM)>0 S ORBDUZ=ORBPRIM D USER
"RTN","ORB3",147,0)
 Q
"RTN","ORB3",148,0)
ATTEND ;
"RTN","ORB3",149,0)
 I $D(ORBU),ORBADT=0 S ORBU(ORBUI)=" Attending physician:",ORBUI=ORBUI+1
"RTN","ORB3",150,0)
 I $D(ORBU),ORBADT=1 S ORBU(ORBUI)=" Attending physician: option cannot determine without A/D/T event data.",ORBUI=ORBUI+1
"RTN","ORB3",151,0)
 I +$G(ORBATTD)>0 S ORBDUZ=ORBATTD D USER
"RTN","ORB3",152,0)
 Q
"RTN","ORB3",153,0)
TEAMS ;
"RTN","ORB3",154,0)
 I $D(ORBU) S ORBU(ORBUI)=" Teams/Personal Lists related to patient:",ORBUI=ORBUI+1
"RTN","ORB3",155,0)
 N ORBLST,ORBI,ORBJ,ORBTM,ORBTNAME,ORBTTYPE,ORBTD
"RTN","ORB3",156,0)
 D TMSPT^ORQPTQ1(.ORBLST,ORBDFN)
"RTN","ORB3",157,0)
 Q:+$G(ORBLST(1))<1
"RTN","ORB3",158,0)
 S ORBI="" F  S ORBI=$O(ORBLST(ORBI)) Q:ORBI=""  D
"RTN","ORB3",159,0)
 .S ORBTM=$P(ORBLST(ORBI),U),ORBTNAME=$P(ORBLST(ORBI),U,2)
"RTN","ORB3",160,0)
 .S ORBTTYPE=$P(ORBLST(ORBI),U,3)
"RTN","ORB3",161,0)
 .I $D(ORBU) D
"RTN","ORB3",162,0)
 ..S ORBU(ORBUI)="  Patient list "_ORBTNAME_" ["_ORBTTYPE_"]:",ORBUI=ORBUI+1
"RTN","ORB3",163,0)
 .N ORBLST2 D TEAMPROV^ORQPTQ1(.ORBLST2,ORBTM)
"RTN","ORB3",164,0)
 .Q:+$G(ORBLST2(1))<1
"RTN","ORB3",165,0)
 .S ORBJ="" F  S ORBJ=$O(ORBLST2(ORBJ)) Q:ORBJ=""  D
"RTN","ORB3",166,0)
 ..S ORBDUZ=$P(ORBLST2(ORBJ),U)_U_ORBTM I +$G(ORBDUZ)>0 D USER
"RTN","ORB3",167,0)
 .;
"RTN","ORB3",168,0)
 .S ORBTD=$P($$TMDEV^ORB31(ORBTM),U,2)  ;Team's device
"RTN","ORB3",169,0)
 .I $L(ORBTD) D
"RTN","ORB3",170,0)
 ..S ORBTDEV(ORBTD)=""
"RTN","ORB3",171,0)
 ..I $D(ORBU) D
"RTN","ORB3",172,0)
 ...S ORBU(ORBUI)="   Team's Device "_ORBTD_" is a recipient",ORBUI=ORBUI+1
"RTN","ORB3",173,0)
 Q
"RTN","ORB3",174,0)
ORDERER ;
"RTN","ORB3",175,0)
 Q:+$G(ORNUM)<1
"RTN","ORB3",176,0)
 I $D(ORBU) S ORBU(ORBUI)=" Ordering provider:",ORBUI=ORBUI+1
"RTN","ORB3",177,0)
 N ORBLST,ORBI,ORBTM,ORBJ,ORBTNAME,ORBPLST,ORBPI,ORBPTM,ORBTTYPE
"RTN","ORB3",178,0)
 S ORBDUZ=$S(ORN=12:+$$UNSIGNOR^ORQOR2(ORNUM),1:$$ORDERER^ORQOR2(ORNUM))
"RTN","ORB3",179,0)
 I +$G(ORBDUZ)>0 D
"RTN","ORB3",180,0)
 .D USER
"RTN","ORB3",181,0)
 .;if notif = Order Req E/S (#12) or Order Req Co-sign (#37) and
"RTN","ORB3",182,0)
 .;user doesn't have ES authority, send to fellow team members w/ES:
"RTN","ORB3",183,0)
 .I ((ORN=12)!(ORN=37)),('$D(^XUSEC("ORES",ORBDUZ))) D
"RTN","ORB3",184,0)
 ..I $D(ORBU) S ORBU(ORBUI)=" Orderer can't elec sign, getting teams orderer belongs to:",ORBUI=ORBUI+1
"RTN","ORB3",185,0)
 ..D TEAMPR^ORQPTQ1(.ORBLST,ORBDUZ)  ;get orderer's tms
"RTN","ORB3",186,0)
 ..Q:+$G(ORBLST(1))<1
"RTN","ORB3",187,0)
 ..D TMSPT^ORQPTQ1(.ORBPLST,ORBDFN)  ;get pt's tms
"RTN","ORB3",188,0)
 ..Q:+$G(ORBPLST(1))<1
"RTN","ORB3",189,0)
 ..S ORBI="" F  S ORBI=$O(ORBLST(ORBI)) Q:ORBI=""  D
"RTN","ORB3",190,0)
 ...S ORBPI="" F  S ORBPI=$O(ORBPLST(ORBPI)) Q:ORBPI=""  D
"RTN","ORB3",191,0)
 ....S ORBTM=$P(ORBLST(ORBI),U),ORBPTM=$P(ORBPLST(ORBPI),U)
"RTN","ORB3",192,0)
 ....I ORBTM=ORBPTM D  ;if pt is on provider's team
"RTN","ORB3",193,0)
 .....I +$G(ORBPTM)>0 D
"RTN","ORB3",194,0)
 ......S ORBTNAME=$P(ORBPLST(ORBPI),U,2)
"RTN","ORB3",195,0)
 ......S ORBTTYPE=$P(ORBPLST(ORBPI),U,3)
"RTN","ORB3",196,0)
 ......I $D(ORBU) S ORBU(ORBUI)="  Orderer's pt list "_ORBTNAME_" ["_ORBTTYPE_"] recipients: ",ORBUI=ORBUI+1
"RTN","ORB3",197,0)
 ......N ORBLST2 D TEAMPROV^ORQPTQ1(.ORBLST2,ORBPTM)
"RTN","ORB3",198,0)
 ......Q:+$G(ORBLST2(1))<1
"RTN","ORB3",199,0)
 ......S ORBJ="" F  S ORBJ=$O(ORBLST2(ORBJ)) Q:ORBJ=""  D
"RTN","ORB3",200,0)
 .......S ORBDUZ=$P(ORBLST2(ORBJ),U)_U_ORBPTM I +$G(ORBDUZ)>0,($D(^XUSEC("ORES",+ORBDUZ))) D USER
"RTN","ORB3",201,0)
 Q
"RTN","ORB3",202,0)
ENTERBY ;
"RTN","ORB3",203,0)
 I $D(ORBU) S ORBU(ORBUI)=" User entering order's most recent activity:",ORBUI=ORBUI+1
"RTN","ORB3",204,0)
 Q:+$G(ORNUM)<1
"RTN","ORB3",205,0)
 I $D(^OR(100,ORNUM,8,0)) D
"RTN","ORB3",206,0)
 .S ORBDUZ=$P(^OR(100,ORNUM,8,$P(^OR(100,ORNUM,8,0),U,3),0),U,13)
"RTN","ORB3",207,0)
 I +$G(ORBDUZ)>0 D USER
"RTN","ORB3",208,0)
 Q
"RTN","ORB3",209,0)
PCMMPRIM ;
"RTN","ORB3",210,0)
 I $D(ORBU) S ORBU(ORBUI)=" PCMM Primary Care Practitioner:",ORBUI=ORBUI+1
"RTN","ORB3",211,0)
 S ORBDUZ=+$$OUTPTPR^SDUTL3(ORBDFN,$$NOW^XLFDT,1)  ;DBIA #1252
"RTN","ORB3",212,0)
 I +$G(ORBDUZ)>0 D USER
"RTN","ORB3",213,0)
 Q
"RTN","ORB3",214,0)
PCMMASSC ;
"RTN","ORB3",215,0)
 I $D(ORBU) S ORBU(ORBUI)=" PCMM Associate Provider:",ORBUI=ORBUI+1
"RTN","ORB3",216,0)
 S ORBDUZ=+$$OUTPTAP^SDUTL3(ORBDFN,$$NOW^XLFDT)  ;DBIA #1252
"RTN","ORB3",217,0)
 I +$G(ORBDUZ)>0 D USER
"RTN","ORB3",218,0)
 Q
"RTN","ORB3",219,0)
PCMMTEAM ;
"RTN","ORB3",220,0)
 N ORPCMM,ORPCMMDZ
"RTN","ORB3",221,0)
 I $D(ORBU) S ORBU(ORBUI)=" PCMM Team Position Assignments:",ORBUI=ORBUI+1
"RTN","ORB3",222,0)
 S ORPCMM=$$PRPT^SCAPMC(ORBDFN,,,,,,"^TMP(""ORPCMM"",$J)",)  ;DBIA #1916
"RTN","ORB3",223,0)
 S ORPCMMDZ=0
"RTN","ORB3",224,0)
 F  S ORPCMMDZ=$O(^TMP("ORPCMM",$J,"SCPR",ORPCMMDZ)) Q:'ORPCMMDZ  D
"RTN","ORB3",225,0)
 .S ORBDUZ=ORPCMMDZ D USER
"RTN","ORB3",226,0)
 K ^TMP("ORPCMM",$J)
"RTN","ORB3",227,0)
 Q
"RTN","ORB3",228,0)
USER ;should USER (ORBDUZ) be a recip
"RTN","ORB3",229,0)
 D USER^ORB3USER(.XQA,ORBDUZ,ORN,.ORBU,.ORBUI,ORBDFN,+$G(ORNUM))
"RTN","ORB3",230,0)
 Q
"RTN","ORMTIM02")
0^6^B16808061^n/a
"RTN","ORMTIM02",1,0)
ORMTIM02 ; JM/SLC-ISC - PERFORM MISC TIME BASED ACTIVITIES ;05/02/06
"RTN","ORMTIM02",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**253**;Dec 17, 1997
"RTN","ORMTIM02",3,0)
 ;
"RTN","ORMTIM02",4,0)
 Q
"RTN","ORMTIM02",5,0)
MISC ; Perform misc time based activities
"RTN","ORMTIM02",6,0)
 ;
"RTN","ORMTIM02",7,0)
 D UNSIGNED ; Generate alerts for unsigned orders that have slipped through the cracks
"RTN","ORMTIM02",8,0)
 ;
"RTN","ORMTIM02",9,0)
 Q
"RTN","ORMTIM02",10,0)
 ;
"RTN","ORMTIM02",11,0)
UNSIGNED ; Generate alerts for unsigned orders that were not alerted by CPRS
"RTN","ORMTIM02",12,0)
 ; This happens when CPRS crashes - through network connection drops or other causes
"RTN","ORMTIM02",13,0)
 N ORZPAT,ORZDATE,ORZIEN,ORZSUB,ORZSDATE,%DT,X,Y,ORZTIME,ORZNOW,ORZPURGE
"RTN","ORMTIM02",14,0)
 N ORN,ORBDFN,ORNUM,ORBADUZ,ORBPMSG,ORBPDATA,ORZREC8,ORZSIGDT,ORZSTS,ORZWHEN,ORMARKID
"RTN","ORMTIM02",15,0)
 N MINTIME,XTMPDAYS,XTMPHOUR,MINDAYS
"RTN","ORMTIM02",16,0)
 S ORN=12,ORMARKID="ORMTIME_UNSGNORD"
"RTN","ORMTIM02",17,0)
 ;
"RTN","ORMTIM02",18,0)
 S MINTIME=60 ; Order must be unsigned for 60 Minutes before generating an alert
"RTN","ORMTIM02",19,0)
 S MINDAYS=90 ; Order must have been generated within the last 90 days
"RTN","ORMTIM02",20,0)
 ;
"RTN","ORMTIM02",21,0)
 S XTMPDAYS=10 ; Keep ^XTMP record for 10 days - reset timeframe with each run
"RTN","ORMTIM02",22,0)
 S XTMPHOUR=48 ; Each order that's verified as having generated an alert has a flag set in
"RTN","ORMTIM02",23,0)
 ;               ^XTMP that's kept for 48 hours.  When flag is gone, must recheck alert status
"RTN","ORMTIM02",24,0)
 ;
"RTN","ORMTIM02",25,0)
 S X="T-"_MINDAYS
"RTN","ORMTIM02",26,0)
 D ^%DT S ORZSDATE=9999999-Y
"RTN","ORMTIM02",27,0)
 S %DT="ST",X="NOW" D ^%DT
"RTN","ORMTIM02",28,0)
 S ORZNOW=Y
"RTN","ORMTIM02",29,0)
 S ORZTIME=$$FMADD^XLFDT(ORZNOW,0,0,-MINTIME,0) ; Order must have existed for ORZTIME minutes
"RTN","ORMTIM02",30,0)
 S ORZPURGE=$$FMADD^XLFDT(ORZNOW,XTMPDAYS,0,0,0) ; Purge all marked flags if not run in XTMPDAYS days
"RTN","ORMTIM02",31,0)
 S ^XTMP(ORMARKID,0)=ORZPURGE_U_ORZNOW_U_"Unsigned Orders Reviewed by ORMTIME"
"RTN","ORMTIM02",32,0)
 S ORZPURGE=$$FMADD^XLFDT(ORZNOW,0,XTMPHOUR,0,0) ; Purge each marked flag XTMPHOUR hours after creation
"RTN","ORMTIM02",33,0)
 K MINTIME,MINDAYS,XTMPDAYS,XTMPHOUR,X,Y,%DT ; Kill non-namespaced vars
"RTN","ORMTIM02",34,0)
 S ORZPAT="" F  S ORZPAT=$O(^OR(100,"AS",ORZPAT)) Q:'ORZPAT  D
"RTN","ORMTIM02",35,0)
 . Q:$P(^DPT(+ORZPAT,0),U,21)  ; Quit if test patient
"RTN","ORMTIM02",36,0)
 . S ORZDATE=0 F  S ORZDATE=$O(^OR(100,"AS",ORZPAT,ORZDATE)) Q:'ORZDATE  I ORZDATE<ORZSDATE D
"RTN","ORMTIM02",37,0)
 . . S ORZIEN=0 F  S ORZIEN=$O(^OR(100,"AS",ORZPAT,ORZDATE,ORZIEN)) Q:'ORZIEN  D
"RTN","ORMTIM02",38,0)
 . . . S ORZSUB=0 F  S ORZSUB=$O(^OR(100,"AS",ORZPAT,ORZDATE,ORZIEN,ORZSUB)) Q:'ORZSUB  D
"RTN","ORMTIM02",39,0)
 . . . . I $D(^OR(100,ORZIEN,8,ORZSUB,0)) D
"RTN","ORMTIM02",40,0)
 . . . . . S ORZREC8=^OR(100,ORZIEN,8,ORZSUB,0)
"RTN","ORMTIM02",41,0)
 . . . . . S ORZSIGDT=$P(ORZREC8,U,6) I $L(ORZSIGDT)>0 Q  ; Can't have a sign date/time
"RTN","ORMTIM02",42,0)
 . . . . . S ORZSTS=$P(ORZREC8,U,4) I ORZSTS'=2 Q  ; must be in an unsigned state
"RTN","ORMTIM02",43,0)
 . . . . . S ORZWHEN=$P(ORZREC8,U) I ORZWHEN>ORZTIME Q  ; must have been unsigned for MINTIME
"RTN","ORMTIM02",44,0)
 . . . . . S ORBDFN=+ORZPAT
"RTN","ORMTIM02",45,0)
 . . . . . S ORNUM=ORZIEN_";"_ORZSUB
"RTN","ORMTIM02",46,0)
 . . . . . I $$NEEDALRT($P(ORZREC8,U,3),ORBDFN,ORNUM) D  ; must not have already generated an alert
"RTN","ORMTIM02",47,0)
 . . . . . . S (ORBADUZ,ORBPMSG,ORBPDATA)=""
"RTN","ORMTIM02",48,0)
 . . . . . . D DOALERT^ORB3
"RTN","ORMTIM02",49,0)
 . . . . . . D MARK(ORNUM) ; Alert sent, don't send another one
"RTN","ORMTIM02",50,0)
 D CLEAN
"RTN","ORMTIM02",51,0)
 Q
"RTN","ORMTIM02",52,0)
 ;
"RTN","ORMTIM02",53,0)
NEEDALRT(PROVIDER,DFN,ORNUM) ; Returns true if order needs an alert
"RTN","ORMTIM02",54,0)
 ;
"RTN","ORMTIM02",55,0)
 I $$MARKED(ORNUM) Q 0 ; If already checked, return
"RTN","ORMTIM02",56,0)
 ;
"RTN","ORMTIM02",57,0)
 N RESULT,SUROGATE
"RTN","ORMTIM02",58,0)
 S RESULT=1
"RTN","ORMTIM02",59,0)
 I $$HASALERT(PROVIDER,DFN) S RESULT=0 I 1
"RTN","ORMTIM02",60,0)
 E  D
"RTN","ORMTIM02",61,0)
 . S SUROGATE=$P($$GETSURO^XQALSURO(PROVIDER),U,1)
"RTN","ORMTIM02",62,0)
 . I +SUROGATE,$$HASALERT(SUROGATE,DFN) S RESULT=0
"RTN","ORMTIM02",63,0)
 I 'RESULT D MARK(ORNUM)
"RTN","ORMTIM02",64,0)
 Q RESULT
"RTN","ORMTIM02",65,0)
 ;
"RTN","ORMTIM02",66,0)
HASALERT(USER,PATIENT) ; Returns true if alert exists for user and patient
"RTN","ORMTIM02",67,0)
 N RESULT,ALERTID,DATE
"RTN","ORMTIM02",68,0)
 S RESULT=0,ALERTID="OR,"_PATIENT_",12"
"RTN","ORMTIM02",69,0)
 I $D(^XTV(8992,"AXQAN",ALERTID,USER)) D  ;DBIA# 2689
"RTN","ORMTIM02",70,0)
 . S DATE=$O(^XTV(8992,"AXQAN",ALERTID,USER,0))
"RTN","ORMTIM02",71,0)
 . I $G(DATE)>0 S RESULT=1
"RTN","ORMTIM02",72,0)
 Q RESULT
"RTN","ORMTIM02",73,0)
 ;
"RTN","ORMTIM02",74,0)
MARKED(ORNUM) ; Returns true if the order has been marked as not needing an alert
"RTN","ORMTIM02",75,0)
 I $D(^XTMP(ORMARKID,"A",ORNUM))>0 Q 1
"RTN","ORMTIM02",76,0)
 Q 0
"RTN","ORMTIM02",77,0)
 ; 
"RTN","ORMTIM02",78,0)
MARK(ORNUM) ; Marks an order as already having been alerted
"RTN","ORMTIM02",79,0)
 S ^XTMP(ORMARKID,"A",ORNUM)=""
"RTN","ORMTIM02",80,0)
 S ^XTMP(ORMARKID,"B",ORZPURGE,ORNUM)=""
"RTN","ORMTIM02",81,0)
 Q
"RTN","ORMTIM02",82,0)
CLEAN ; Clean up old entries in ^XTMP
"RTN","ORMTIM02",83,0)
 N IDX,ORNUM
"RTN","ORMTIM02",84,0)
 S IDX=0
"RTN","ORMTIM02",85,0)
 F  S IDX=$O(^XTMP(ORMARKID,"B",IDX)) Q:((+IDX=0)!(IDX>ORZNOW))  D
"RTN","ORMTIM02",86,0)
 . S ORNUM=0
"RTN","ORMTIM02",87,0)
 . F  S ORNUM=$O(^XTMP(ORMARKID,"B",IDX,ORNUM)) Q:+ORNUM=0  D
"RTN","ORMTIM02",88,0)
 . . K ^XTMP(ORMARKID,"A",ORNUM)
"RTN","ORMTIM02",89,0)
 . . K ^XTMP(ORMARKID,"B",IDX,ORNUM)
"RTN","ORMTIM02",90,0)
 Q
"RTN","ORMTIME")
0^1^B9171622^B9053145
"RTN","ORMTIME",1,0)
ORMTIME ; SLC/RJS - PROCESS TIME BASED EVENT ;9/29/99  09:35 [2/1/00 9:30am]
"RTN","ORMTIME",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**40,253**;Dec 17, 1997
"RTN","ORMTIME",3,0)
 ;
"RTN","ORMTIME",4,0)
EN ; Main entry tag.
"RTN","ORMTIME",5,0)
 ;
"RTN","ORMTIME",6,0)
 N OCXPSDT,OCXZTSK,OCXERR,OCXORMTR,OCXSTDT,OCXLOCK,OCXPAR
"RTN","ORMTIME",7,0)
 K ^TMP("OCXORMTIME",$J)
"RTN","ORMTIME",8,0)
 S OCXLOCK=0
"RTN","ORMTIME",9,0)
 S OCXORMTR="ORMTIME: Startup"
"RTN","ORMTIME",10,0)
 S OCXSTDT=$$EDATE($$IDATE("NOW"))
"RTN","ORMTIME",11,0)
 S ^TMP("OCXORMTIME",$J,"STATUS")="ORMTIME: Attempting to lock ^OR(100,""AE"") at "_OCXSTDT_"."
"RTN","ORMTIME",12,0)
 L +^OR(100,"AE"):10
"RTN","ORMTIME",13,0)
 I  D
"RTN","ORMTIME",14,0)
 .S OCXLOCK=1
"RTN","ORMTIME",15,0)
 .D SCAN
"RTN","ORMTIME",16,0)
 .L -^OR(100,"AE")
"RTN","ORMTIME",17,0)
 .K ^TMP("OCXORMTIME")
"RTN","ORMTIME",18,0)
 .S OCXPAR=$$IDATE2("NOW")
"RTN","ORMTIME",19,0)
 .D PUT^XPAR("SYS","ORM ORMTIME LAST RUN",1,OCXPAR,.OCXERR)
"RTN","ORMTIME",20,0)
 S:'OCXLOCK ^TMP("OCXORMTIME",$J,"STATUS")="ORMTIME: Unable to lock ^OR(100,""AE"") at "_OCXSTDT_" attempt."
"RTN","ORMTIME",21,0)
 Q
"RTN","ORMTIME",22,0)
 ;
"RTN","ORMTIME",23,0)
SCAN ; Call ORMTIM01 for order checking, etc.  ORMTIM02 for misc time based tasks
"RTN","ORMTIME",24,0)
 ;
"RTN","ORMTIME",25,0)
 D SCAN^ORMTIM01
"RTN","ORMTIME",26,0)
 D MISC^ORMTIM02
"RTN","ORMTIME",27,0)
 Q
"RTN","ORMTIME",28,0)
 ;
"RTN","ORMTIME",29,0)
EDATE(Y) X ^DD("DD") S:(Y["@") Y=$P(Y,"@",1)_" at "_$P(Y,"@",2) Q Y
"RTN","ORMTIME",30,0)
 ;
"RTN","ORMTIME",31,0)
IDATE(X) N %DT,Y S %DT="F" D ^%DT Q Y
"RTN","ORMTIME",32,0)
 ;
"RTN","ORMTIME",33,0)
IDATE2(X) N %DT,Y S %DT="TF" D ^%DT Q Y
"RTN","ORMTIME",34,0)
 ;
"RTN","ORMTIME",35,0)
REQUEUE(ORMQT) ; Code formerly queued ORMTIME tasks in Taskman.
"RTN","ORMTIME",36,0)
 ;
"RTN","ORMTIME",37,0)
 ; (This tag kept for compatibility with outside calls.)
"RTN","ORMTIME",38,0)
 ;
"RTN","ORMTIME",39,0)
 Q
"RTN","ORMTIME",40,0)
 ;
"RTN","ORMTIME",41,0)
STATUS ; Check status of last ORMTIME run. 
"RTN","ORMTIME",42,0)
 ;
"RTN","ORMTIME",43,0)
 N ORMLAST
"RTN","ORMTIME",44,0)
 ;
"RTN","ORMTIME",45,0)
 ; Get date/time of last ORMTIME run:
"RTN","ORMTIME",46,0)
 S ORMLAST=$$GET^XPAR("SYS","ORM ORMTIME LAST RUN",1,"I")
"RTN","ORMTIME",47,0)
 S ORMLAST=$$EDATE(ORMLAST) ; Convert to external format for display.
"RTN","ORMTIME",48,0)
 ;
"RTN","ORMTIME",49,0)
 ; Present information to user:
"RTN","ORMTIME",50,0)
 W !
"RTN","ORMTIME",51,0)
 W !,"     ORMTIME last ran "_ORMLAST_"."
"RTN","ORMTIME",52,0)
 W !
"RTN","ORMTIME",53,0)
 ;
"RTN","ORMTIME",54,0)
 Q
"RTN","ORMTIME",55,0)
 ;
"RTN","ORMTIME",56,0)
BULL ; Send a bulletin if ORMTIME's last run is greater than 24 hours.
"RTN","ORMTIME",57,0)
 ;
"RTN","ORMTIME",58,0)
 N DIC,ORMMSG,X,XMSUB,XMTEXT,XMY,XMZ,Y,ORMLAST
"RTN","ORMTIME",59,0)
 ;
"RTN","ORMTIME",60,0)
 ; Don't send bulletin if ORMTIME STATUS mail group does not exist:
"RTN","ORMTIME",61,0)
 S DIC=3.8,DIC(0)="",X="ORMTIME STATUS"
"RTN","ORMTIME",62,0)
 D ^DIC Q:(+Y<0)
"RTN","ORMTIME",63,0)
 ;
"RTN","ORMTIME",64,0)
 S ORMLAST=$$GET^XPAR("SYS","ORM ORMTIME LAST RUN",1,"I")
"RTN","ORMTIME",65,0)
 I $$FMDIFF^XLFDT($$IDATE2("NOW"),ORMLAST,2)>86400  D
"RTN","ORMTIME",66,0)
 .S XMY("G.ORMTIME STATUS")=""
"RTN","ORMTIME",67,0)
 .S XMSUB=" ORMTIME Warning"
"RTN","ORMTIME",68,0)
 .S ORMMSG(1,0)=" "
"RTN","ORMTIME",69,0)
 .S ORMMSG(2,0)="    The ORMTIME process last ran more than 24 hours ago. "
"RTN","ORMTIME",70,0)
 .S ORMMSG(3,0)=" "
"RTN","ORMTIME",71,0)
 .S ORMMSG(4,0)=" The ORMTIME background job handles activating and expiring orders,"
"RTN","ORMTIME",72,0)
 .S ORMMSG(5,0)=" some time based notifications, as well as purging of temporary CPRS"
"RTN","ORMTIME",73,0)
 .S ORMMSG(6,0)=" data. It is important that it runs regularly."
"RTN","ORMTIME",74,0)
 .S ORMMSG(7,0)=" "
"RTN","ORMTIME",75,0)
 .S ORMMSG(8,0)="    Assure that the scheduled option, ORMTIME RUN, is correctly implemented."
"RTN","ORMTIME",76,0)
 .S ORMMSG(9,0)=" "
"RTN","ORMTIME",77,0)
 .S XMTEXT="ORMMSG("
"RTN","ORMTIME",78,0)
 .D ^XMD
"RTN","ORMTIME",79,0)
 Q
"RTN","ORMTIME",80,0)
 ;
"RTN","ORMTIMST")
0^8^B17732442^n/a
"RTN","ORMTIMST",1,0)
ORMTIMST ; JM/SLC-ISC - ORMTIME STATUS ROUTINES ;06/06/2006
"RTN","ORMTIMST",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**253**;Dec 17, 1997
"RTN","ORMTIMST",3,0)
 ;
"RTN","ORMTIMST",4,0)
EN ; Pre-install environment check - will ORMTIME run in the next 5 minutes?
"RTN","ORMTIMST",5,0)
 ;
"RTN","ORMTIMST",6,0)
 D ENVCHECK(5)
"RTN","ORMTIMST",7,0)
 Q
"RTN","ORMTIMST",8,0)
 ;
"RTN","ORMTIMST",9,0)
RUNNING() ; Checks to see if ORMTIME is running
"RTN","ORMTIMST",10,0)
 L +^OR(100,"AE"):2 I $T L -^OR(100,"AE") Q 0
"RTN","ORMTIMST",11,0)
 Q 1
"RTN","ORMTIMST",12,0)
 ;
"RTN","ORMTIMST",13,0)
NEXTRUN() ; Number of minutes before the next scheduled run of ORMTIME. - returns in format MINUTES:SECONDS
"RTN","ORMTIMST",14,0)
 ;  If past scheduled time, but within the last 10 minutes, returns 0 (give TaskMan time to invoke it)
"RTN","ORMTIMST",15,0)
 ;  If -1, unable to determine value
"RTN","ORMTIMST",16,0)
 N RESULT,ORY,I,SCHDT,NOWDT,DIFFDT,MAX,DELAY,SEC,MIN,PASTDUE
"RTN","ORMTIMST",17,0)
 S MAX=9999999
"RTN","ORMTIMST",18,0)
 S RESULT=MAX
"RTN","ORMTIMST",19,0)
 S DELAY=10 ; Give Taskman 10 minutes to invoke ORMTIME
"RTN","ORMTIMST",20,0)
 S NOWDT=$$NOW^XLFDT
"RTN","ORMTIMST",21,0)
 S PASTDUE=$$FMADD^XLFDT(NOWDT,0,0,-DELAY,0)
"RTN","ORMTIMST",22,0)
 D OPTSTAT^XUTMOPT("ORMTIME RUN",.ORY)  ; get option schedule info IA# 1472
"RTN","ORMTIMST",23,0)
 F I=1:1:ORY D  Q:(RESULT=0)
"RTN","ORMTIMST",24,0)
 . S SCHDT=$P(ORY(I),U,2)  ; next scheduled ORMTIME run time
"RTN","ORMTIMST",25,0)
 . S DIFFDT=$$FMDIFF^XLFDT(SCHDT,NOWDT,2)
"RTN","ORMTIMST",26,0)
 . I DIFFDT<0 D  Q
"RTN","ORMTIMST",27,0)
 . . I SCHDT>PASTDUE S RESULT=0
"RTN","ORMTIMST",28,0)
 . I RESULT>DIFFDT S RESULT=DIFFDT
"RTN","ORMTIMST",29,0)
 I RESULT=MAX S RESULT=-1
"RTN","ORMTIMST",30,0)
 I RESULT>0 D
"RTN","ORMTIMST",31,0)
 . S SEC=RESULT#60,MIN=RESULT\60
"RTN","ORMTIMST",32,0)
 . I SEC<10 S SEC="0"_SEC
"RTN","ORMTIMST",33,0)
 . S RESULT=MIN_":"_SEC
"RTN","ORMTIMST",34,0)
 Q RESULT
"RTN","ORMTIMST",35,0)
 ;
"RTN","ORMTIMST",36,0)
ENVCHECK(MINUTES) ; Environment check to see if ORMTIME is running, or will run in the next few minutes
"RTN","ORMTIMST",37,0)
 ;
"RTN","ORMTIMST",38,0)
 I '+$G(XPDENV) Q  ; Don't evaluate during the global load - just when actually installing
"RTN","ORMTIMST",39,0)
 N KIDS
"RTN","ORMTIMST",40,0)
 S KIDS=1
"RTN","ORMTIMST",41,0)
 G ENVMAIN
"RTN","ORMTIMST",42,0)
 ;
"RTN","ORMTIMST",43,0)
ENVTEST(MINUTES) ; Run for testing purposes only
"RTN","ORMTIMST",44,0)
 N KIDS
"RTN","ORMTIMST",45,0)
 S KIDS=0
"RTN","ORMTIMST",46,0)
 ;
"RTN","ORMTIMST",47,0)
ENVMAIN ;
"RTN","ORMTIMST",48,0)
 N I,RUNNING,MSG,CHKSOON,SOON,COUNT,NEXT,STARTMSG
"RTN","ORMTIMST",49,0)
 D BOUT("Checking ORMTIME status...")
"RTN","ORMTIMST",50,0)
 S RUNNING=$$RUNNING
"RTN","ORMTIMST",51,0)
 S CHKSOON=1
"RTN","ORMTIMST",52,0)
 S MSG="ORMTIME is "
"RTN","ORMTIMST",53,0)
 I RUNNING S MSG=MSG_"running, waiting for it to finish..."
"RTN","ORMTIMST",54,0)
 E  S MSG=MSG_"not running."
"RTN","ORMTIMST",55,0)
 D BOUT(MSG)
"RTN","ORMTIMST",56,0)
 I RUNNING D
"RTN","ORMTIMST",57,0)
 . S (COUNT,CHKSOON)=0
"RTN","ORMTIMST",58,0)
 . F I=1:1:15 D  Q:'RUNNING
"RTN","ORMTIMST",59,0)
 . . S RUNNING=$$RUNNING
"RTN","ORMTIMST",60,0)
 . . I RUNNING S COUNT=COUNT+1 I COUNT>2 S COUNT=0 D OUT("   ORMTIME is still running...")
"RTN","ORMTIMST",61,0)
 . I 'RUNNING D
"RTN","ORMTIMST",62,0)
 . . H 2 ; Wait 2 seconds after the lock is released, to make sure ORMTIME is finished executing
"RTN","ORMTIMST",63,0)
 . . D OUT("ORMTIME is done.")
"RTN","ORMTIMST",64,0)
 I RUNNING D ABORT("ORMTIME is taking too long to run.") Q
"RTN","ORMTIMST",65,0)
 ;
"RTN","ORMTIMST",66,0)
 I CHKSOON D  Q:SOON
"RTN","ORMTIMST",67,0)
 . D BOUT("Checking ORMTIME Schedule...")
"RTN","ORMTIMST",68,0)
 . S NEXT=$$NEXTRUN
"RTN","ORMTIMST",69,0)
 . S SOON=1
"RTN","ORMTIMST",70,0)
 . I (NEXT<0)!(NEXT'<MINUTES) S SOON=0
"RTN","ORMTIMST",71,0)
 . S MSG="ORMTIME is "
"RTN","ORMTIMST",72,0)
 . I SOON D  I 1
"RTN","ORMTIMST",73,0)
 . . I NEXT<1 S STARTMSG="less than a minute."
"RTN","ORMTIMST",74,0)
 . . E  S STARTMSG=NEXT_" minutes."
"RTN","ORMTIMST",75,0)
 . E  S MSG=MSG_"not " S STARTMSG="the next "_MINUTES_":00 minutes."
"RTN","ORMTIMST",76,0)
 . S MSG=MSG_"scheduled to run in "_STARTMSG
"RTN","ORMTIMST",77,0)
 . D BOUT(MSG)
"RTN","ORMTIMST",78,0)
 . I SOON D ABORT("Too close to ORMTIME's scheduled start time.")
"RTN","ORMTIMST",79,0)
 D BOUT("Installation conditions are acceptable, continuing installation...")
"RTN","ORMTIMST",80,0)
 Q
"RTN","ORMTIMST",81,0)
 ;
"RTN","ORMTIMST",82,0)
ABORT(TXT) ; Send abort message
"RTN","ORMTIMST",83,0)
 D BOUT("***********************************")
"RTN","ORMTIMST",84,0)
 D OUT("*****  ABORTING INSTALLATION  *****")
"RTN","ORMTIMST",85,0)
 D OUT("***********************************")
"RTN","ORMTIMST",86,0)
 D OUT(TXT)
"RTN","ORMTIMST",87,0)
 D OUT("Try installation again after ORMTIME completes.")
"RTN","ORMTIMST",88,0)
 S XPDQUIT=2  ;abort installation but leave transport global in ^XTMP
"RTN","ORMTIMST",89,0)
 Q
"RTN","ORMTIMST",90,0)
 ;
"RTN","ORMTIMST",91,0)
OUT(TEXT) ; Send output - if run from install, send to MES^XPDUTL
"RTN","ORMTIMST",92,0)
 I KIDS D MES^XPDUTL(TEXT) I 1
"RTN","ORMTIMST",93,0)
 E  W TEXT,!
"RTN","ORMTIMST",94,0)
 Q
"RTN","ORMTIMST",95,0)
BOUT(TEXT) ; Send output - if run from install, send to BMES^XPDUTL
"RTN","ORMTIMST",96,0)
 I KIDS D BMES^XPDUTL(TEXT) I 1
"RTN","ORMTIMST",97,0)
 E  W !,TEXT,!
"RTN","ORMTIMST",98,0)
 Q
"RTN","ORMTIMST",99,0)
PRETEST ; test install
"RTN","ORMTIMST",100,0)
 N KIDS
"RTN","ORMTIMST",101,0)
 S KIDS=0
"RTN","ORMTIMST",102,0)
 G PREMAIN
"RTN","ORMTIMST",103,0)
 ;
"RTN","ORMTIMST",104,0)
PRECHECK ; Start install - make sure ORMTIME doesn't run while the installation takes place.
"RTN","ORMTIMST",105,0)
 N KIDS
"RTN","ORMTIMST",106,0)
 S KIDS=1
"RTN","ORMTIMST",107,0)
PREMAIN ;
"RTN","ORMTIMST",108,0)
 N COUNT
"RTN","ORMTIMST",109,0)
 S COUNT=0
"RTN","ORMTIMST",110,0)
 F  Q:'$$RUNNING  D
"RTN","ORMTIMST",111,0)
 .  I COUNT=0 D BOUT("ORMTIME is running.  Install waiting for ORMTIME to finished...")
"RTN","ORMTIMST",112,0)
 .  S COUNT=COUNT+1
"RTN","ORMTIMST",113,0)
 .  I COUNT>4 D OUT("   ORMTIME is still running...") S COUNT=1
"RTN","ORMTIMST",114,0)
 I COUNT>0 H 2 D BOUT("ORMTIME has finished running, continuing with install...")
"RTN","ORMTIMST",115,0)
 D BOUT("Starting ORMTIME update...")
"RTN","ORMTIMST",116,0)
 Q
"RTN","ORQPTQ11")
0^2^B56815266^B56149817
"RTN","ORQPTQ11",1,0)
ORQPTQ11 ; SLC/CLA - Functs which return patient lists and sources pt 1B ;12/15/97 [ 08/04/97  3:32 PM ] [6/6/03 2:36pm]
"RTN","ORQPTQ11",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**82,85,109,132,173,253**;Dec 17, 1997
"RTN","ORQPTQ11",3,0)
 ;
"RTN","ORQPTQ11",4,0)
 ; SLC/PKS - Modified to deal with "Combination" lists - 3/2000.
"RTN","ORQPTQ11",5,0)
 ; SLC/PKS - Additions for "Restricted Pt. Lists" - 11/2001.
"RTN","ORQPTQ11",6,0)
 ;
"RTN","ORQPTQ11",7,0)
DEFSRC(Y) ; return current user's default list source
"RTN","ORQPTQ11",8,0)
 Q:'$D(DUZ)
"RTN","ORQPTQ11",9,0)
 N FROM,API,ORSRV
"RTN","ORQPTQ11",10,0)
 S ORSRV=$G(^VA(200,DUZ,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","ORQPTQ11",11,0)
 S FROM=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","ORQPTQ11",12,0)
 Q:'$L($G(FROM))
"RTN","ORQPTQ11",13,0)
 I FROM="T" S Y=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT TEAM",1,"B")_"^Team"
"RTN","ORQPTQ11",14,0)
 I FROM="W" S Y=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT WARD",1,"B")_"^Ward"
"RTN","ORQPTQ11",15,0)
 I FROM="P" S Y=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT PROVIDER",1,"B")_"^Primary Provider"
"RTN","ORQPTQ11",16,0)
 I FROM="S" S Y=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT SPECIALTY",1,"B")_"^Specialty"
"RTN","ORQPTQ11",17,0)
 I FROM="C" D
"RTN","ORQPTQ11",18,0)
 .S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT))
"RTN","ORQPTQ11",19,0)
 .S Y=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),API,1,"B")_"^"_$$DOW^XLFDT(DT)_" Clinic"
"RTN","ORQPTQ11",20,0)
 I FROM="M" S Y="^Combination"
"RTN","ORQPTQ11",21,0)
 Q
"RTN","ORQPTQ11",22,0)
FDEFSRC(ORDUZ) ; extrinsic function return user's (ORDUZ) default list source
"RTN","ORQPTQ11",23,0)
 Q:'$D(ORDUZ) "^^Error: No user identified"
"RTN","ORQPTQ11",24,0)
 N FROM,API,RESULT,ORSRV
"RTN","ORQPTQ11",25,0)
 S ORSRV=$G(^VA(200,ORDUZ,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","ORQPTQ11",26,0)
 S FROM=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","ORQPTQ11",27,0)
 Q:'$L($G(FROM)) "^^No default list source specified"
"RTN","ORQPTQ11",28,0)
 I FROM="T" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT TEAM",1,"B")_"^Team"
"RTN","ORQPTQ11",29,0)
 I FROM="W" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT WARD",1,"B")_"^Ward"
"RTN","ORQPTQ11",30,0)
 I FROM="P" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT PROVIDER",1,"B")_"^Primary Provider"
"RTN","ORQPTQ11",31,0)
 I FROM="S" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT SPECIALTY",1,"B")_"^Specialty"
"RTN","ORQPTQ11",32,0)
 I FROM="C" D
"RTN","ORQPTQ11",33,0)
 .S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT))
"RTN","ORQPTQ11",34,0)
 .S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),API,1,"B")_"^"_$$DOW^XLFDT(DT)_" Clinic"
"RTN","ORQPTQ11",35,0)
 I FROM="M" S RESULT="^Combination"
"RTN","ORQPTQ11",36,0)
 Q RESULT
"RTN","ORQPTQ11",37,0)
LISTSRC(ORDUZ,TYPE) ; extrinsic function return user's (ORDUZ) list source
"RTN","ORQPTQ11",38,0)
 ; for list type team, ward, primary provider, specialty, clinic, combination (TYPE)
"RTN","ORQPTQ11",39,0)
 Q:'$D(ORDUZ) "^^Error: No user identified"
"RTN","ORQPTQ11",40,0)
 Q:'$D(TYPE) "^^Error: No list type identified"
"RTN","ORQPTQ11",41,0)
 N API,RESULT,ORSRV
"RTN","ORQPTQ11",42,0)
 S ORSRV=$G(^VA(200,ORDUZ,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U)
"RTN","ORQPTQ11",43,0)
 I TYPE="T" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT TEAM",1,"B")_"^Team"
"RTN","ORQPTQ11",44,0)
 I TYPE="W" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT WARD",1,"B")_"^Ward"
"RTN","ORQPTQ11",45,0)
 I TYPE="P" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT PROVIDER",1,"B")_"^Primary Provider"
"RTN","ORQPTQ11",46,0)
 I TYPE="S" S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),"ORLP DEFAULT SPECIALTY",1,"B")_"^Specialty"
"RTN","ORQPTQ11",47,0)
 I TYPE="C" D
"RTN","ORQPTQ11",48,0)
 .S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT))
"RTN","ORQPTQ11",49,0)
 .S RESULT=$$GET^XPAR("USR.`"_ORDUZ_"^SRV.`"_+$G(ORSRV),API,1,"B")_"^"_$$DOW^XLFDT(DT)_" Clinic"
"RTN","ORQPTQ11",50,0)
 I TYPE="M" S RESULT="Combination"
"RTN","ORQPTQ11",51,0)
 I $P(RESULT,U)="" S RESULT=U_RESULT
"RTN","ORQPTQ11",52,0)
 Q RESULT
"RTN","ORQPTQ11",53,0)
DEFLIST(Y) ; return current user's default patient list
"RTN","ORQPTQ11",54,0)
 I $$BROKER^XWBLIB S Y=$NA(^TMP("OR",$J,"PATIENTS")) ; GUI = global.
"RTN","ORQPTQ11",55,0)
 I '$$BROKER^XWBLIB S ^TMP("OR",$J,"PATIENTS",0)=""
"RTN","ORQPTQ11",56,0)
 Q:'$D(DUZ)
"RTN","ORQPTQ11",57,0)
 N FROM,IEN,BEG,END,API,ORSRV,ORQDAT,ORQCNT,ORGUI
"RTN","ORQPTQ11",58,0)
 S ORSRV=$G(^VA(200,DUZ,5)) I +ORSRV>0 S ORSRV=$P(ORSRV,U) ; Get S/S.
"RTN","ORQPTQ11",59,0)
 S FROM=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT LIST SOURCE",1,"Q")
"RTN","ORQPTQ11",60,0)
 Q:'$L($G(FROM))
"RTN","ORQPTQ11",61,0)
 I FROM="T" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT TEAM",1,"Q") D:+$G(IEN)>0 TEAMPTS^ORQPTQ1(.Y,IEN)
"RTN","ORQPTQ11",62,0)
 I FROM="W" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT WARD",1,"Q") D:+$G(IEN)>0 BYWARD^ORWPT(.Y,IEN)
"RTN","ORQPTQ11",63,0)
 I FROM="P" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT PROVIDER",1,"Q") D:+$G(IEN)>0 PROVPTS^ORQPTQ2(.Y,IEN)
"RTN","ORQPTQ11",64,0)
 I FROM="S" S IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),"ORLP DEFAULT SPECIALTY",1,"Q") D:+$G(IEN)>0 SPECPTS^ORQPTQ2(.Y,IEN)
"RTN","ORQPTQ11",65,0)
 I FROM="C" D
"RTN","ORQPTQ11",66,0)
 .S API="ORLP DEFAULT CLINIC "_$$UP^XLFSTR($$DOW^XLFDT(DT)),IEN=$$GET^XPAR("USR^SRV.`"_+$G(ORSRV),API,1,"Q") I +$G(IEN)>0 D
"RTN","ORQPTQ11",67,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","ORQPTQ11",68,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","ORQPTQ11",69,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","ORQPTQ11",70,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","ORQPTQ11",71,0)
 ..D CLINPTS^ORQPTQ2(.Y,+$G(IEN),BEG,END)
"RTN","ORQPTQ11",72,0)
 I FROM="M" D
"RTN","ORQPTQ11",73,0)
 .S IEN=$D(^OR(100.24,DUZ,0)) I +$G(IEN)>0 S IEN=DUZ D
"RTN","ORQPTQ11",74,0)
 ..S BEG=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC START DATE",1,"E"))
"RTN","ORQPTQ11",75,0)
 ..I BEG="T+0" S BEG=$$FMTE^XLFDT(DT,BEG)
"RTN","ORQPTQ11",76,0)
 ..S END=$$UP^XLFSTR($$GET^XPAR("USR^SRV.`"_+$G(ORSRV)_"^DIV^SYS^PKG","ORLP DEFAULT CLINIC STOP DATE",1,"E"))
"RTN","ORQPTQ11",77,0)
 ..I END="T+0" S END=$$FMTE^XLFDT(DT,END)
"RTN","ORQPTQ11",78,0)
 ..D COMBPTS^ORQPTQ6(0,+$G(IEN),BEG,END) ; "0"= GUI RPC call.
"RTN","ORQPTQ11",79,0)
 I ($$BROKER^XWBLIB)&(FROM'="M") D  ; Combinations already written to global.
"RTN","ORQPTQ11",80,0)
 .S ORQDAT="",ORQCNT=1
"RTN","ORQPTQ11",81,0)
 .F  S ORQDAT=$G(Y(ORQCNT)) Q:ORQDAT=""  D
"RTN","ORQPTQ11",82,0)
 ..S ^TMP("OR",$J,"PATIENTS",ORQCNT,0)=ORQDAT
"RTN","ORQPTQ11",83,0)
 ..S ORQCNT=ORQCNT+1
"RTN","ORQPTQ11",84,0)
 I ('$$BROKER^XWBLIB) S Y=FROM_";"_+$G(IEN)_";"_$G(BEG)_";"_$G(END) ; MKB 10/13/95
"RTN","ORQPTQ11",85,0)
 Q
"RTN","ORQPTQ11",86,0)
DEFSORT(Y) ; Return user's default sort.
"RTN","ORQPTQ11",87,0)
 ; SLC/PKS - 4/6/2001
"RTN","ORQPTQ11",88,0)
 ;
"RTN","ORQPTQ11",89,0)
 N ORSORT,ORSECT,ORPARAM
"RTN","ORQPTQ11",90,0)
 ;
"RTN","ORQPTQ11",91,0)
 I ('$D(DUZ)) S Y="Unable to determine DUZ." Q
"RTN","ORQPTQ11",92,0)
 S ORSECT=$G(^VA(200,DUZ,5))
"RTN","ORQPTQ11",93,0)
 I +ORSECT>0 S ORSECT=$P(ORSECT,U)
"RTN","ORQPTQ11",94,0)
 S Y="A" ; Default of "Alpha" sort.
"RTN","ORQPTQ11",95,0)
 S ORPARAM="ORLP DEFAULT LIST ORDER"
"RTN","ORQPTQ11",96,0)
 S ORSORT=$$GET^XPAR("USR^SRV.`"_$G(ORSECT)_"^DIV^SYS^PKG",ORPARAM,1,"I")
"RTN","ORQPTQ11",97,0)
 I (ORSORT'="") S Y=ORSORT
"RTN","ORQPTQ11",98,0)
 ;
"RTN","ORQPTQ11",99,0)
 Q
"RTN","ORQPTQ11",100,0)
 ;
"RTN","ORQPTQ11",101,0)
PNAMWRIT(ORROOT,ORDFN) ; Write patient name to ^TMP global.
"RTN","ORQPTQ11",102,0)
 ;
"RTN","ORQPTQ11",103,0)
 ; Variables used:
"RTN","ORQPTQ11",104,0)
 ;
"RTN","ORQPTQ11",105,0)
 ;   ORDFN   = Passed patient DFN.
"RTN","ORQPTQ11",106,0)
 ;   ORNAME  = Patient name.
"RTN","ORQPTQ11",107,0)
 ;   ORROOT  = ^TMP root passed by calling code.
"RTN","ORQPTQ11",108,0)
 ;   ORWRITE = Holder for ^TMP node for writing.
"RTN","ORQPTQ11",109,0)
 ;
"RTN","ORQPTQ11",110,0)
 N ORNAME,ORWRITE
"RTN","ORQPTQ11",111,0)
 S ORROOT=ORROOT_","                       ; Add necessary comma.
"RTN","ORQPTQ11",112,0)
 ;
"RTN","ORQPTQ11",113,0)
 S ORNAME=""                               ; Initializae.
"RTN","ORQPTQ11",114,0)
 S ORNAME=$G(^DPT(ORDFN,0))                ; Get zero node pt. data.
"RTN","ORQPTQ11",115,0)
 S ORNAME=$P(ORNAME,U)                     ; Extract pt. name only.
"RTN","ORQPTQ11",116,0)
 I ORNAME="" Q 0                           ; Problem - punt.
"RTN","ORQPTQ11",117,0)
 ;
"RTN","ORQPTQ11",118,0)
 ; Create naked reference string for writing to ^TMP:
"RTN","ORQPTQ11",119,0)
 S ORWRITE=ORROOT_""""_ORNAME_""""_","_ORDFN_")"
"RTN","ORQPTQ11",120,0)
 S @ORWRITE=ORDFN_U_ORNAME                 ; Write to ^TMP.
"RTN","ORQPTQ11",121,0)
 ;
"RTN","ORQPTQ11",122,0)
 Q 1
"RTN","ORQPTQ11",123,0)
 ;
"RTN","ORQPTQ11",124,0)
RPLMAKE(Y,ORTL) ; Make global restricted pt. array from Team List.
"RTN","ORQPTQ11",125,0)
 ;
"RTN","ORQPTQ11",126,0)
 ; Variables used:
"RTN","ORQPTQ11",127,0)
 ;
"RTN","ORQPTQ11",128,0)
 ;   ORDFN   = Holder for patient DFN.
"RTN","ORQPTQ11",129,0)
 ;   ORJ     = Holds $J value.
"RTN","ORQPTQ11",130,0)
 ;   ORREAD  = Holder for ^TMP root to kill.
"RTN","ORQPTQ11",131,0)
 ;   ORRET   = Returned value from function call.
"RTN","ORQPTQ11",132,0)
 ;   ORROOT  = ^TMP root to pass.
"RTN","ORQPTQ11",133,0)
 ;   ORTL    = Team List IEN.
"RTN","ORQPTQ11",134,0)
 ;   ORX     = Working variable used in $ORDER statement.
"RTN","ORQPTQ11",135,0)
 ;   Y       = Returned value (same as ORJ).
"RTN","ORQPTQ11",136,0)
 ;
"RTN","ORQPTQ11",137,0)
 N ORDFN,ORJ,ORREAD,ORRET,ORROOT,ORX
"RTN","ORQPTQ11",138,0)
 ;
"RTN","ORQPTQ11",139,0)
 I ORTL="" S Y="" Q                        ; No Team List IEN passed.
"RTN","ORQPTQ11",140,0)
 I $G(^OR(100.21,ORTL,0))="" S Y="" Q      ; No such Team List.
"RTN","ORQPTQ11",141,0)
 ;
"RTN","ORQPTQ11",142,0)
 S (ORJ,Y)=$J                              ; Assign returned value.
"RTN","ORQPTQ11",143,0)
 S ORROOT="^TMP("_"""ORRPL"""_","          ; Initial setting.
"RTN","ORQPTQ11",144,0)
 S ORROOT=ORROOT_ORJ_","_"""B"""           ; Add job number, "B."
"RTN","ORQPTQ11",145,0)
 S ORREAD=ORROOT_")"                       ; Assign "kill" root.
"RTN","ORQPTQ11",146,0)
 K @ORREAD                                 ; Kill old, if any.
"RTN","ORQPTQ11",147,0)
 ;
"RTN","ORQPTQ11",148,0)
 ; From Team List B x-ref, obtain patients, create new ^TMP entries:
"RTN","ORQPTQ11",149,0)
 S ORX=""                                  ; Initialize.
"RTN","ORQPTQ11",150,0)
 F  S ORX=$O(^OR(100.21,ORTL,10,"B",ORX)) Q:ORX=""  D
"RTN","ORQPTQ11",151,0)
 .S ORDFN=$P(ORX,";")                      ; Extract patient DFN.
"RTN","ORQPTQ11",152,0)
 .S ORRET=$$PNAMWRIT(ORROOT,ORDFN)         ; Call that writes to ^TMP.
"RTN","ORQPTQ11",153,0)
 ;
"RTN","ORQPTQ11",154,0)
 Q
"RTN","ORQPTQ11",155,0)
 ;
"RTN","ORQPTQ11",156,0)
RPLREAD(Y,ORJ,ORFROM,ORDIR) ; Read disk-based patient array from TMP.
"RTN","ORQPTQ11",157,0)
 ;
"RTN","ORQPTQ11",158,0)
 ; Variables used:
"RTN","ORQPTQ11",159,0)
 ;
"RTN","ORQPTQ11",160,0)
 ;   ORCNT   = Counter variable.
"RTN","ORQPTQ11",161,0)
 ;   ORDIR   = Direction to move through list.
"RTN","ORQPTQ11",162,0)
 ;   ORFROM  = Starting point from which to move through list.
"RTN","ORQPTQ11",163,0)
 ;   ORI     = Counter variable.
"RTN","ORQPTQ11",164,0)
 ;   ORIEN   = Record IEN holder.
"RTN","ORQPTQ11",165,0)
 ;   ORJ     = Job number to use in ^TMP global root.
"RTN","ORQPTQ11",166,0)
 ;   ORROOT  = ^TMP global file root.
"RTN","ORQPTQ11",167,0)
 ;   ORZ     = Temporary value holder.
"RTN","ORQPTQ11",168,0)
 ;   Y       = Returned array.
"RTN","ORQPTQ11",169,0)
 ;
"RTN","ORQPTQ11",170,0)
 N ORCNT,ORI,ORIEN,ORROOT,ORZ
"RTN","ORQPTQ11",171,0)
 ;
"RTN","ORQPTQ11",172,0)
 I $P(ORFROM,U,2)'="" S ORFROM=$P(ORFROM,U,2)
"RTN","ORQPTQ11",173,0)
 ;
"RTN","ORQPTQ11",174,0)
 S ORROOT="^TMP("_"""ORRPL"""_","_ORJ      ; Initial setting.
"RTN","ORQPTQ11",175,0)
 S ORROOT=ORROOT_","_"""B"""               ; Add final text.
"RTN","ORQPTQ11",176,0)
 ;
"RTN","ORQPTQ11",177,0)
 ; Check for existence of data:
"RTN","ORQPTQ11",178,0)
 I '$D(@(ORROOT_")")) S Y(0)="No data available." Q
"RTN","ORQPTQ11",179,0)
 ;
"RTN","ORQPTQ11",180,0)
 S ORROOT=ORROOT_","                       ; Add comma.
"RTN","ORQPTQ11",181,0)
 S ORCNT=44                                ; Initialize to maximum.
"RTN","ORQPTQ11",182,0)
 S ORI=0                                   ; Initialize.
"RTN","ORQPTQ11",183,0)
 ;
"RTN","ORQPTQ11",184,0)
 ; Loop through ^TMP entries for data to return:
"RTN","ORQPTQ11",185,0)
 F  S ORFROM=$O(@(ORROOT_""""_ORFROM_""""_")"),ORDIR) Q:ORFROM=""  D  Q:ORI=ORCNT
"RTN","ORQPTQ11",186,0)
 .;
"RTN","ORQPTQ11",187,0)
 .; Sub-loop for entries up to ORCNT maximum:
"RTN","ORQPTQ11",188,0)
 .S ORIEN=0                                ; Initialize.
"RTN","ORQPTQ11",189,0)
 .F  S ORIEN=$O(@(ORROOT_""""_ORFROM_""""_","_ORIEN_")")) Q:'ORIEN  D  Q:ORI=ORCNT
"RTN","ORQPTQ11",190,0)
 ..S ORI=ORI+1                             ; Increment counter.
"RTN","ORQPTQ11",191,0)
 ..;
"RTN","ORQPTQ11",192,0)
 ..; Assign return array:
"RTN","ORQPTQ11",193,0)
 ..S Y(ORI)=@(ORROOT_""""_ORFROM_""""_","_ORIEN_")")
"RTN","ORQPTQ11",194,0)
 ;
"RTN","ORQPTQ11",195,0)
 Q
"RTN","ORQPTQ11",196,0)
 ;
"RTN","ORQPTQ11",197,0)
RPLCLEAN(Y,ORJ) ; Kill global data using passed global root value.
"RTN","ORQPTQ11",198,0)
 ;
"RTN","ORQPTQ11",199,0)
 ; Variables used:
"RTN","ORQPTQ11",200,0)
 ;
"RTN","ORQPTQ11",201,0)
 ;    ORJ    = Job number to use in ^TMP global root.
"RTN","ORQPTQ11",202,0)
 ;    ORROOT = Root of ^TMP global to kill.
"RTN","ORQPTQ11",203,0)
 ;    Y      = Returned RPC value.
"RTN","ORQPTQ11",204,0)
 ;
"RTN","ORQPTQ11",205,0)
 N ORROOT
"RTN","ORQPTQ11",206,0)
 ;
"RTN","ORQPTQ11",207,0)
 S Y=1                                     ; Initialize.
"RTN","ORQPTQ11",208,0)
 S ORROOT="^TMP("_"""ORRPL"""_","          ; Initial setting.
"RTN","ORQPTQ11",209,0)
 S ORROOT=ORROOT_ORJ_","_"""B"""_")"       ; Add rest.
"RTN","ORQPTQ11",210,0)
 K @ORROOT                                 ; Kill global data.
"RTN","ORQPTQ11",211,0)
 ;
"RTN","ORQPTQ11",212,0)
 Q
"RTN","ORQPTQ11",213,0)
 ;
"RTN","ORWDOR")
0^3^B8459671^B7232254
"RTN","ORWDOR",1,0)
ORWDOR ; SLC/KCM - Generic Orders calls for Windows Dialogs [ 08/05/96  8:21 AM ];03:50 PM  17 Jun 1998
"RTN","ORWDOR",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**10,164,253**;Dec 17, 1997
"RTN","ORWDOR",3,0)
NXT() ; -- returns next available index in return data array
"RTN","ORWDOR",4,0)
 S ILST=ILST+1
"RTN","ORWDOR",5,0)
 Q ILST
"RTN","ORWDOR",6,0)
 ;
"RTN","ORWDOR",7,0)
VMSLCT(LST) ; return default lists for vitals dialog
"RTN","ORWDOR",8,0)
 N ILST S ILST=0
"RTN","ORWDOR",9,0)
 S LST($$NXT)="~Measurements" D MEAS
"RTN","ORWDOR",10,0)
 S LST($$NXT)="~Schedules"    D SCHED
"RTN","ORWDOR",11,0)
 Q
"RTN","ORWDOR",12,0)
MEAS ; called from VMSLCT
"RTN","ORWDOR",13,0)
 N I,X
"RTN","ORWDOR",14,0)
 S X="" F  S X=$O(^ORD(101.43,"S.V/M",X)) Q:X=""  D
"RTN","ORWDOR",15,0)
 . S I=$O(^ORD(101.43,"S.V/M",X,0))
"RTN","ORWDOR",16,0)
 . S LST($$NXT)="i"_I_U_$P(^ORD(101.43,"S.V/M",X,I),U,2)
"RTN","ORWDOR",17,0)
 Q
"RTN","ORWDOR",18,0)
SCHED ; called from VMSLCT
"RTN","ORWDOR",19,0)
 N I,X
"RTN","ORWDOR",20,0)
 S X="" F  S X=$O(^PS(51.1,"APGMRV",X)) Q:X=""  D
"RTN","ORWDOR",21,0)
 . S I=$O(^PS(51.1,"APGMRV",X,0)),LST($$NXT)="i"_I_U_X
"RTN","ORWDOR",22,0)
 Q
"RTN","ORWDOR",23,0)
VALNUM(ERR,X,DOM)       ; return error if invalid number
"RTN","ORWDOR",24,0)
 N LOW,HIGH,DEC
"RTN","ORWDOR",25,0)
 S LOW=$P(DOM,":"),HIGH=$P(DOM,":",2),DEC=$P(DOM,":",3),ERR=0
"RTN","ORWDOR",26,0)
 I $L($P(X,"."))>24 S ERR="1^Exceeded maximum number of 24 characters" Q
"RTN","ORWDOR",27,0)
 I X'?.1"-".N.1".".N S ERR="1^Entry must be numeric" Q
"RTN","ORWDOR",28,0)
 I X>HIGH!(X<LOW) S ERR="1^Out of Range - value must be between "_LOW_" and "_HIGH_" inclusive" Q
"RTN","ORWDOR",29,0)
 I $L($P(+X,".",2))>DEC D
"RTN","ORWDOR",30,0)
 . I DEC=0 S ERR="1^No decimal places allowed"
"RTN","ORWDOR",31,0)
 . E  I DEC=1 S ERR="1^Only one decimal place allowed"
"RTN","ORWDOR",32,0)
 . E  S ERR="1^No more than "_DEC_" decimal places allowed"
"RTN","ORWDOR",33,0)
 Q
"RTN","ORWDOR",34,0)
LKSCRN(ORLST,FROM,DIR,REF,GBL,SCR) ; Return a set of entries from xref in REF
"RTN","ORWDOR",35,0)
 ; .Y=returned list, FROM=text to $O from, DIR=$O direction,
"RTN","ORWDOR",36,0)
 ; REF=subscript indirection global ref including xref,
"RTN","ORWDOR",37,0)
 ; GBL=standard FM global ref, SCR=reference to screen in 101.41
"RTN","ORWDOR",38,0)
 N I,IEN,CNT,X,Y,D,ORTYPE
"RTN","ORWDOR",39,0)
 S I=0,CNT=44,SCR=$G(SCR)
"RTN","ORWDOR",40,0)
 I $L(SCR) S SCR=$G(^ORD(101.41,+SCR,10,+$P(SCR,":",2),4))
"RTN","ORWDOR",41,0)
 S D=$P(REF,"""",2),ORTYPE="D" ;for OI screen
"RTN","ORWDOR",42,0)
 F  Q:I'<CNT  S FROM=$O(@REF@(FROM),DIR) Q:FROM=""  D
"RTN","ORWDOR",43,0)
 . S IEN=0 F  S IEN=$O(@REF@(FROM,IEN)) Q:'IEN  D
"RTN","ORWDOR",44,0)
 . . ; if screen, set naked ref & Y, then execute screen
"RTN","ORWDOR",45,0)
 . . I $L(SCR) S Y=IEN,X=$P($G(@(GBL_"Y,0)")),U) X SCR Q:'$T
"RTN","ORWDOR",46,0)
 . . S I=I+1,ORLST(I)=IEN_"^"_FROM
"RTN","ORWDOR",47,0)
 Q
"RTN","ORWDOR",48,0)
MNUTREE(LST,ROOT)        ; return menu tree for a menu type dialog
"RTN","ORWDOR",49,0)
 N ILST S ILST=0
"RTN","ORWDOR",50,0)
 S ILST=ILST+1,LST(ILST)=ROOT_U_$P(^ORD(101.41,ROOT,0),U,2)_"^0^+"
"RTN","ORWDOR",51,0)
 D LSTCHLD(ROOT)
"RTN","ORWDOR",52,0)
 Q
"RTN","ORWDOR",53,0)
LSTCHLD(PARENT) ; list descendends of this node (recursive)
"RTN","ORWDOR",54,0)
 N CHILD,I,J
"RTN","ORWDOR",55,0)
 S I=0 F  S I=$O(^ORD(101.41,PARENT,10,"B",I)) Q:'I  D
"RTN","ORWDOR",56,0)
 . S J=0 F  S J=$O(^ORD(101.41,PARENT,10,"B",I,J)) Q:'J  D
"RTN","ORWDOR",57,0)
 . . S CHILD=+$P(^ORD(101.41,PARENT,10,J,0),U,2) Q:'CHILD
"RTN","ORWDOR",58,0)
 . . ; also quit if child is not a generic order
"RTN","ORWDOR",59,0)
 . . S ILST=ILST+1,LST(ILST)=CHILD_U_$P(^ORD(101.41,CHILD,0),U,2)_U_PARENT
"RTN","ORWDOR",60,0)
 . . I $P(^ORD(101.41,CHILD,0),U,4)="M",$D(^ORD(101.41,CHILD,10))>1 D
"RTN","ORWDOR",61,0)
 . . . S LST(ILST)=LST(ILST)_"^+"
"RTN","ORWDOR",62,0)
 . . . D LSTCHLD(CHILD)
"RTN","ORWDOR",63,0)
 Q
"VER")
8.0^22.0
"BLD",6791,6)
^230
**END**
**END**
