VDEF V 1.0
Extracted from mail message
**KIDS**:VDEF 1.0^

**INSTALL NAME**
VDEF 1.0
"BLD",4850,0)
VDEF 1.0^VDEF^0^3041228^y
"BLD",4850,1,0)
^^25^25^3041228^
"BLD",4850,1,1,0)
Initial VHA version of VDEF that utilizes hard-coded M programs to 
"BLD",4850,1,2,0)
extract the VistA data and create HL7 V2.4 messages.  This is a base 
"BLD",4850,1,3,0)
VDEF namespace package that contains only VDEF specific programs and 
"BLD",4850,1,4,0)
globals and the client logical links VDEFVIE1, VDEFVIE2, VDEFVIE3, 
"BLD",4850,1,5,0)
VDEFVIE4.
"BLD",4850,1,6,0)
 
"BLD",4850,1,7,0)
Application specific programs & globals needed by VDEF will
"BLD",4850,1,8,0)
be distributed through the various application-specific
"BLD",4850,1,9,0)
custodial package VDEF releases.
"BLD",4850,1,10,0)
 
"BLD",4850,1,11,0)
** IMPORTANT **    ** IMPORTANT **  ** IMPORTANT **
"BLD",4850,1,12,0)
 
"BLD",4850,1,13,0)
Sites should not install this software prior to your assigned HDR 
"BLD",4850,1,14,0)
installation date. You will be contacted approximately two weeks prior to 
"BLD",4850,1,15,0)
your HDR installation date and provided with instructions on when and in 
"BLD",4850,1,16,0)
what order to install these patches and the VDEF software. Additionally, 
"BLD",4850,1,17,0)
sites should not configure or attempt to utilize the VDEF software 
"BLD",4850,1,18,0)
associated with these patches prior to your assigned HDR installation 
"BLD",4850,1,19,0)
date, at which time Technical Support Office personnel will work with you 
"BLD",4850,1,20,0)
to activate that application and start your data transmissions to the HDR 
"BLD",4850,1,21,0)
database. (If you do not know your HDR installation date, you can find 
"BLD",4850,1,22,0)
that information by going to 
"BLD",4850,1,23,0)
<http://vaww.teamshare.va.gov/hdr_implementation/> and selecting 
"BLD",4850,1,24,0)
"Implementation Schedule  from the Quick Launch panel on the left side of 
"BLD",4850,1,25,0)
the page.)
"BLD",4850,4,0)
^9.64PA^579.6^7
"BLD",4850,4,577,0)
577
"BLD",4850,4,577,222)
y^n^f^^^^n
"BLD",4850,4,577.4,0)
577.4
"BLD",4850,4,577.4,222)
y^n^f^^^^n
"BLD",4850,4,579.1,0)
579.1
"BLD",4850,4,579.1,222)
y^n^f^^y^^y^o^n
"BLD",4850,4,579.2,0)
579.2
"BLD",4850,4,579.2,222)
y^n^f^^y^^y^o^n
"BLD",4850,4,579.3,0)
579.3
"BLD",4850,4,579.3,222)
y^n^f^^y^^y^o^n
"BLD",4850,4,579.5,0)
579.5
"BLD",4850,4,579.5,222)
y^n^f^^y^^y^o^n
"BLD",4850,4,579.6,0)
579.6
"BLD",4850,4,579.6,222)
y^n^f^^^^n
"BLD",4850,4,"B",577,577)

"BLD",4850,4,"B",577.4,577.4)

"BLD",4850,4,"B",579.1,579.1)

"BLD",4850,4,"B",579.2,579.2)

"BLD",4850,4,"B",579.3,579.3)

"BLD",4850,4,"B",579.5,579.5)

"BLD",4850,4,"B",579.6,579.6)

"BLD",4850,"ABNS",0)
^9.66A^1^1
"BLD",4850,"ABNS",1,0)
VDEF
"BLD",4850,"ABNS",1,1,0)
^9.661A^^
"BLD",4850,"ABNS","B","VDEF",1)

"BLD",4850,"ABPKG")
n^n
"BLD",4850,"INI")

"BLD",4850,"INID")
n^n^n
"BLD",4850,"INIT")

"BLD",4850,"KRN",0)
^9.67PA^8989.52^19
"BLD",4850,"KRN",.4,0)
.4
"BLD",4850,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",4850,"KRN",.401,0)
.401
"BLD",4850,"KRN",.402,0)
.402
"BLD",4850,"KRN",.403,0)
.403
"BLD",4850,"KRN",.5,0)
.5
"BLD",4850,"KRN",.84,0)
.84
"BLD",4850,"KRN",3.6,0)
3.6
"BLD",4850,"KRN",3.8,0)
3.8
"BLD",4850,"KRN",9.2,0)
9.2
"BLD",4850,"KRN",9.8,0)
9.8
"BLD",4850,"KRN",9.8,"NM",0)
^9.68A^42^8
"BLD",4850,"KRN",9.8,"NM",7,0)
VDEFCONT^^0^B40975842
"BLD",4850,"KRN",9.8,"NM",14,0)
VDEFEL^^0^B3420764
"BLD",4850,"KRN",9.8,"NM",17,0)
VDEFMNU^^0^B43970546
"BLD",4850,"KRN",9.8,"NM",23,0)
VDEFQM^^0^B53152750
"BLD",4850,"KRN",9.8,"NM",24,0)
VDEFREQ^^0^B29489552
"BLD",4850,"KRN",9.8,"NM",25,0)
VDEFREQ1^^0^B3650921
"BLD",4850,"KRN",9.8,"NM",31,0)
VDEFUTIL^^0^B4358238
"BLD",4850,"KRN",9.8,"NM",42,0)
VDEFVU^^0^B13705721
"BLD",4850,"KRN",9.8,"NM","B","VDEFCONT",7)

"BLD",4850,"KRN",9.8,"NM","B","VDEFEL",14)

"BLD",4850,"KRN",9.8,"NM","B","VDEFMNU",17)

"BLD",4850,"KRN",9.8,"NM","B","VDEFQM",23)

"BLD",4850,"KRN",9.8,"NM","B","VDEFREQ",24)

"BLD",4850,"KRN",9.8,"NM","B","VDEFREQ1",25)

"BLD",4850,"KRN",9.8,"NM","B","VDEFUTIL",31)

"BLD",4850,"KRN",9.8,"NM","B","VDEFVU",42)

"BLD",4850,"KRN",19,0)
19
"BLD",4850,"KRN",19,"NM",0)
^9.68A^17^10
"BLD",4850,"KRN",19,"NM",2,0)
VDEF CONFIGURATION MENU^^0
"BLD",4850,"KRN",19,"NM",3,0)
VDEF Custodial Package^^0
"BLD",4850,"KRN",19,"NM",4,0)
VDEF Event API^^0
"BLD",4850,"KRN",19,"NM",8,0)
VDEF Request Queue Parameters^^0
"BLD",4850,"KRN",19,"NM",10,0)
VDEF STARTUP OPTION^^0
"BLD",4850,"KRN",19,"NM",11,0)
VDEF Site-Wide Parameters^^0
"BLD",4850,"KRN",19,"NM",12,0)
VDEF Status^^0
"BLD",4850,"KRN",19,"NM",15,0)
VDEF Request Processor Schedul^^0
"BLD",4850,"KRN",19,"NM",16,0)
VDEF Suspend/Run Request Queue^^0
"BLD",4850,"KRN",19,"NM",17,0)
VDEF Activate/Inac Requestor^^0
"BLD",4850,"KRN",19,"NM","B","VDEF Activate/Inac Requestor",17)

"BLD",4850,"KRN",19,"NM","B","VDEF CONFIGURATION MENU",2)

"BLD",4850,"KRN",19,"NM","B","VDEF Custodial Package",3)

"BLD",4850,"KRN",19,"NM","B","VDEF Event API",4)

"BLD",4850,"KRN",19,"NM","B","VDEF Request Processor Schedul",15)

"BLD",4850,"KRN",19,"NM","B","VDEF Request Queue Parameters",8)

"BLD",4850,"KRN",19,"NM","B","VDEF STARTUP OPTION",10)

"BLD",4850,"KRN",19,"NM","B","VDEF Site-Wide Parameters",11)

"BLD",4850,"KRN",19,"NM","B","VDEF Status",12)

"BLD",4850,"KRN",19,"NM","B","VDEF Suspend/Run Request Queue",16)

"BLD",4850,"KRN",19.1,0)
19.1
"BLD",4850,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",4850,"KRN",101,0)
101
"BLD",4850,"KRN",101,"NM",0)
^9.68A^^0
"BLD",4850,"KRN",409.61,0)
409.61
"BLD",4850,"KRN",771,0)
771
"BLD",4850,"KRN",771,"NM",0)
^9.68A^^0
"BLD",4850,"KRN",870,0)
870
"BLD",4850,"KRN",870,"NM",0)
^9.68A^4^4
"BLD",4850,"KRN",870,"NM",1,0)
VDEFVIE1^^0
"BLD",4850,"KRN",870,"NM",2,0)
VDEFVIE2^^0
"BLD",4850,"KRN",870,"NM",3,0)
VDEFVIE3^^0
"BLD",4850,"KRN",870,"NM",4,0)
VDEFVIE4^^0
"BLD",4850,"KRN",870,"NM","B","VDEFVIE1",1)

"BLD",4850,"KRN",870,"NM","B","VDEFVIE2",2)

"BLD",4850,"KRN",870,"NM","B","VDEFVIE3",3)

"BLD",4850,"KRN",870,"NM","B","VDEFVIE4",4)

"BLD",4850,"KRN",8989.51,0)
8989.51
"BLD",4850,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",4850,"KRN",8989.52,0)
8989.52
"BLD",4850,"KRN",8994,0)
8994
"BLD",4850,"KRN","B",.4,.4)

"BLD",4850,"KRN","B",.401,.401)

"BLD",4850,"KRN","B",.402,.402)

"BLD",4850,"KRN","B",.403,.403)

"BLD",4850,"KRN","B",.5,.5)

"BLD",4850,"KRN","B",.84,.84)

"BLD",4850,"KRN","B",3.6,3.6)

"BLD",4850,"KRN","B",3.8,3.8)

"BLD",4850,"KRN","B",9.2,9.2)

"BLD",4850,"KRN","B",9.8,9.8)

"BLD",4850,"KRN","B",19,19)

"BLD",4850,"KRN","B",19.1,19.1)

"BLD",4850,"KRN","B",101,101)

"BLD",4850,"KRN","B",409.61,409.61)

"BLD",4850,"KRN","B",771,771)

"BLD",4850,"KRN","B",870,870)

"BLD",4850,"KRN","B",8989.51,8989.51)

"BLD",4850,"KRN","B",8989.52,8989.52)

"BLD",4850,"KRN","B",8994,8994)

"BLD",4850,"PRET")

"BLD",4850,"QUES",0)
^9.62^^
"BLD",4850,"REQB",0)
^9.611^4^4
"BLD",4850,"REQB",1,0)
DI*22.0*105^2
"BLD",4850,"REQB",2,0)
HL*1.6*98^2
"BLD",4850,"REQB",3,0)
XM*8.0*13^2
"BLD",4850,"REQB",4,0)
XU*8.0*257^2
"BLD",4850,"REQB","B","DI*22.0*105",1)

"BLD",4850,"REQB","B","HL*1.6*98",2)

"BLD",4850,"REQB","B","XM*8.0*13",3)

"BLD",4850,"REQB","B","XU*8.0*257",4)

"DATA",579.1,1,0)
MAINTENANCE^Y^1^1^I
"DATA",579.2,1,0)
VISTA HL7^V
"DATA",579.3,1,0)
MAINTENANCE^20^^1000000^1000^^^190130^S^^190129
"DATA",579.3,1,1,0)
^579.31^^0
"DATA",579.3,1,2,0)
^579.32
"DATA",579.5,1,0)
1^5^^^^
"FIA",577)
VDEF EVENT DESCRIPTION
"FIA",577,0)
^VDEFHL7(577,
"FIA",577,0,0)
577I
"FIA",577,0,1)
y^n^f^^^^n
"FIA",577,0,10)

"FIA",577,0,11)

"FIA",577,0,"RLRO")

"FIA",577,0,"VR")
1.0^VDEF
"FIA",577,577)
0
"FIA",577.4)
VDEF EVENT SUBTYPES
"FIA",577.4,0)
^VDEFHL7(577.4,
"FIA",577.4,0,0)
577.4I
"FIA",577.4,0,1)
y^n^f^^^^n
"FIA",577.4,0,10)

"FIA",577.4,0,11)

"FIA",577.4,0,"RLRO")

"FIA",577.4,0,"VR")
1.0^VDEF
"FIA",577.4,577.4)
0
"FIA",579.1)
VDEF REQUESTOR
"FIA",579.1,0)
^VDEFHL7(579.1,
"FIA",579.1,0,0)
579.1
"FIA",579.1,0,1)
y^n^f^^y^^y^o^n
"FIA",579.1,0,10)

"FIA",579.1,0,11)

"FIA",579.1,0,"RLRO")

"FIA",579.1,0,"VR")
1.0^VDEF
"FIA",579.1,579.1)
0
"FIA",579.2)
VDEF DESTINATION
"FIA",579.2,0)
^VDEFHL7(579.2,
"FIA",579.2,0,0)
579.2
"FIA",579.2,0,1)
y^n^f^^y^^y^o^n
"FIA",579.2,0,10)

"FIA",579.2,0,11)

"FIA",579.2,0,"RLRO")

"FIA",579.2,0,"VR")
1.0^VDEF
"FIA",579.2,579.2)
0
"FIA",579.3)
VDEF REQUEST QUEUE
"FIA",579.3,0)
^VDEFHL7(579.3,
"FIA",579.3,0,0)
579.3
"FIA",579.3,0,1)
y^n^f^^y^^y^o^n
"FIA",579.3,0,10)

"FIA",579.3,0,11)

"FIA",579.3,0,"RLRO")

"FIA",579.3,0,"VR")
1.0^VDEF
"FIA",579.3,579.3)
0
"FIA",579.3,579.31)
0
"FIA",579.3,579.311)
0
"FIA",579.3,579.313)
0
"FIA",579.3,579.32)
0
"FIA",579.5)
VDEF PARAMETERS
"FIA",579.5,0)
^VDEFHL7(579.5,
"FIA",579.5,0,0)
579.5P
"FIA",579.5,0,1)
y^n^f^^y^^y^o^n
"FIA",579.5,0,10)

"FIA",579.5,0,11)

"FIA",579.5,0,"RLRO")

"FIA",579.5,0,"VR")
1.0^VDEF
"FIA",579.5,579.5)
0
"FIA",579.6)
VDEF CUSTODIAL PACKAGE
"FIA",579.6,0)
^VDEFHL7(579.6,
"FIA",579.6,0,0)
579.6P
"FIA",579.6,0,1)
y^n^f^^^^n
"FIA",579.6,0,10)

"FIA",579.6,0,11)

"FIA",579.6,0,"RLRO")

"FIA",579.6,0,"VR")
1.0^VDEF
"FIA",579.6,579.6)
0
"FRV1",579.1,"1,0",3)
VISTA HL7
"FRV1",579.1,"1,0",3,"F")
;VDEFHL7(579.2,
"FRV1",579.1,"1,0",4)
MAINTENANCE
"FRV1",579.1,"1,0",4,"F")
;VDEFHL7(579.3,
"IX",577,577,"BB",0)
577^BB^Message Type Event Type cross-reference^R^^R^IR^I^577^^^^^LS
"IX",577,577,"BB",1)
S ^VDEFHL7(577,"BB",$E(X(1),1,30),$E(X(2),1,30),$E(X(3),1,30),DA)=""
"IX",577,577,"BB",2)
K ^VDEFHL7(577,"BB",$E(X(1),1,30),$E(X(2),1,30),$E(X(3),1,30),DA)
"IX",577,577,"BB",2.5)
K ^VDEFHL7(577,"BB")
"IX",577,577,"BB",11.1,0)
^.114IA^3^3
"IX",577,577,"BB",11.1,1,0)
1^F^577^.06^30^1^F
"IX",577,577,"BB",11.1,2,0)
2^F^577^.02^30^2^F
"IX",577,577,"BB",11.1,3,0)
3^F^577^.03^30^3^F
"KRN",19,2919255,-1)
0^10
"KRN",19,2919255,0)
VDEF STARTUP OPTION^VDEF STARTUP OPTION^^R^^^^^^^^VDEF^n
"KRN",19,2919255,1,0)
^19.06^2^2^3041217^^^^
"KRN",19,2919255,1,1,0)
This Scheduled Option is run at system startup. It spawns off individual 
"KRN",19,2919255,1,2,0)
Request Queue and Outbound Queue processor jobs.
"KRN",19,2919255,25)
START^VDEFCONT
"KRN",19,2919255,200.9)
s^y
"KRN",19,2919255,"U")
VDEF STARTUP OPTION
"KRN",19,2919257,-1)
0^11
"KRN",19,2919257,0)
VDEF Site-Wide Parameters^Site-Wide Parameters^^R^^^^^^^^VDEF
"KRN",19,2919257,1,0)
^^1^1^3041217^
"KRN",19,2919257,1,1,0)
Set basic parameters for VDEF
"KRN",19,2919257,25)
SITE^VDEFMNU
"KRN",19,2919257,"U")
SITE-WIDE PARAMETERS
"KRN",19,2919258,-1)
0^8
"KRN",19,2919258,0)
VDEF Request Queue Parameters^Request Queue Parameters^^R^^^^^^^^VDEF
"KRN",19,2919258,1,0)
^^1^1^3041217^
"KRN",19,2919258,1,1,0)
Set various parameters for the VDEF Request Queue.
"KRN",19,2919258,25)
REQUEST^VDEFMNU
"KRN",19,2919258,"U")
REQUEST QUEUE PARAMETERS
"KRN",19,2919260,-1)
0^17
"KRN",19,2919260,0)
VDEF Activate/Inac Requestor^Activate/Inactivate Requestor^^R^^^^^^^^VDEF
"KRN",19,2919260,1,0)
^^1^1^3041217^
"KRN",19,2919260,1,1,0)
Activates/inactivates the primary VDEF API used by trigger events.
"KRN",19,2919260,25)
REQOFF^VDEFMNU
"KRN",19,2919260,"U")
ACTIVATE/INACTIVATE REQUESTOR
"KRN",19,2919261,-1)
0^16
"KRN",19,2919261,0)
VDEF Suspend/Run Request Queue^Suspend/Run Request Queue^^R^^^^^^^^VDEF^y
"KRN",19,2919261,1,0)
^^2^2^3041217^
"KRN",19,2919261,1,1,0)
Start/stop the VDEF process that pulls records from Request Queue and 
"KRN",19,2919261,1,2,0)
creates HL7 messages.
"KRN",19,2919261,25)
QUEOFF^VDEFMNU
"KRN",19,2919261,"U")
SUSPEND/RUN REQUEST QUEUE
"KRN",19,2919264,-1)
0^15
"KRN",19,2919264,0)
VDEF Request Processor Schedul^Request Processor Schedule^^R^^^^^^^^VDEF^y
"KRN",19,2919264,1,0)
^19.06^1^1^3041217^^^^
"KRN",19,2919264,1,1,0)
Define when Request Processor should and should not run
"KRN",19,2919264,25)
SCHED^VDEFMNU
"KRN",19,2919264,"U")
REQUEST PROCESSOR SCHEDULE
"KRN",19,2919265,-1)
0^3
"KRN",19,2919265,0)
VDEF Custodial Package^VDEF Custodial Package Activate/Inactivate^^R^^^^^^^^VDEF
"KRN",19,2919265,1,0)
^19.06^2^2^3041217^^
"KRN",19,2919265,1,1,0)
Activates/inactivates VDEF request processing based on a domain's 
"KRN",19,2919265,1,2,0)
custodial package.
"KRN",19,2919265,25)
CUSTOD^VDEFMNU
"KRN",19,2919265,"U")
VDEF CUSTODIAL PACKAGE ACTIVAT
"KRN",19,2919266,-1)
0^12
"KRN",19,2919266,0)
VDEF Status^Status of VDEF components^^R^^^^^^^^VDEF
"KRN",19,2919266,1,0)
^^1^1^3041217^
"KRN",19,2919266,1,1,0)
Display status of VDEF processes
"KRN",19,2919266,25)
REPORT^VDEFMNU
"KRN",19,2919266,"U")
STATUS OF VDEF COMPONENTS
"KRN",19,2919267,-1)
0^2
"KRN",19,2919267,0)
VDEF CONFIGURATION MENU^VDEF Configuration and Status^^M^^^^^^^^VDEF^y
"KRN",19,2919267,1,0)
^19.06^1^1^3041217^^^^
"KRN",19,2919267,1,1,0)
VDEF configuration and status options
"KRN",19,2919267,10,0)
^19.01IP^12^8
"KRN",19,2919267,10,1,0)
2919257^Site^1
"KRN",19,2919267,10,1,"^")
VDEF Site-Wide Parameters
"KRN",19,2919267,10,2,0)
2919258^Req^2
"KRN",19,2919267,10,2,"^")
VDEF Request Queue Parameters
"KRN",19,2919267,10,4,0)
2919260^ActR^3
"KRN",19,2919267,10,4,"^")
VDEF Activate/Inac Requestor
"KRN",19,2919267,10,8,0)
2919265^Cust^5
"KRN",19,2919267,10,8,"^")
VDEF Custodial Package
"KRN",19,2919267,10,9,0)
2919266^Stat^7
"KRN",19,2919267,10,9,"^")
VDEF Status
"KRN",19,2919267,10,10,0)
2919264^Sch^8
"KRN",19,2919267,10,10,"^")
VDEF Request Processor Schedul
"KRN",19,2919267,10,11,0)
2919282^API^6
"KRN",19,2919267,10,11,"^")
VDEF Event API
"KRN",19,2919267,10,12,0)
2919261^SusR^4
"KRN",19,2919267,10,12,"^")
VDEF Suspend/Run Request Queue
"KRN",19,2919267,99)
59869,51782
"KRN",19,2919267,99.1)
59700,42433
"KRN",19,2919267,"U")
VDEF CONFIGURATION AND STATUS
"KRN",19,2919282,-1)
0^4
"KRN",19,2919282,0)
VDEF Event API^VDEF Event API Activate/Inactivate^^R^^^^^^^^VDEF
"KRN",19,2919282,1,0)
^^2^2^3041217^
"KRN",19,2919282,1,1,0)
Activates/inactivates VDEF request processing based on a specific message 
"KRN",19,2919282,1,2,0)
type.
"KRN",19,2919282,25)
EVENT^VDEFMNU
"KRN",19,2919282,"U")
VDEF EVENT API ACTIVATE/INACTI
"KRN",870,196,-1)
0^1
"KRN",870,196,0)
VDEFVIE1^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,196,200)
^^^^^^^^^R
"KRN",870,196,400)
^5559^C^N^15^
"KRN",870,197,-1)
0^2
"KRN",870,197,0)
VDEFVIE2^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,197,200)
^^^^^^^^^R
"KRN",870,197,400)
^5559^C^N^15^
"KRN",870,198,-1)
0^3
"KRN",870,198,0)
VDEFVIE3^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,198,200)
^^^^^^^^^R
"KRN",870,198,400)
^5559^C^N^15^
"KRN",870,199,-1)
0^4
"KRN",870,199,0)
VDEFVIE4^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,199,200)
^^^^^^^^^R
"KRN",870,199,400)
^5559^C^N^15^
"MBREQ")
0
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;HLLLDEL^XPDIA1(%)
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PGL",579.1,0,3,.03)
REQUESTOR DESTINATION^RP579.2'^VDEFHL7(579.2,^0;3^Q
"PGL",579.1,0,4,.04)
REQUEST QUEUE^RP579.3'^VDEFHL7(579.3,^0;4^Q
"PGL",579.31,0,6,.06)
REQUESTOR^P579.1'^VDEFHL7(579.1,^0;6^Q
"PGL",579.31,0,7,.07)
DESTINATION POINTER^P579.2'^VDEFHL7(579.2,^0;7^Q
"PGL",579.31,0,18,.18)
VDEF EVENT^P577.4^VDEFHL7(577.4,^0;18^Q
"PKG",623,-1)
1^1
"PKG",623,0)
VDEF^VDEF^VISTA Data Extraction Framework
"PKG",623,1,0)
^9.41A^2^2^3030819^^
"PKG",623,1,1,0)
VDEF stands for VistA Data Extraction Framework, a data-driven scripting
"PKG",623,1,2,0)
tool for automated HL7 message generation.
"PKG",623,20,0)
^9.402P^^
"PKG",623,22,0)
^9.49I^1^1
"PKG",623,22,1,0)
1.0^3041228
"PKG",623,22,1,1,0)
^^25^25^3041228
"PKG",623,22,1,1,1,0)
Initial VHA version of VDEF that utilizes hard-coded M programs to 
"PKG",623,22,1,1,2,0)
extract the VistA data and create HL7 V2.4 messages.  This is a base 
"PKG",623,22,1,1,3,0)
VDEF namespace package that contains only VDEF specific programs and 
"PKG",623,22,1,1,4,0)
globals and the client logical links VDEFVIE1, VDEFVIE2, VDEFVIE3, 
"PKG",623,22,1,1,5,0)
VDEFVIE4.
"PKG",623,22,1,1,6,0)
 
"PKG",623,22,1,1,7,0)
Application specific programs & globals needed by VDEF will
"PKG",623,22,1,1,8,0)
be distributed through the various application-specific
"PKG",623,22,1,1,9,0)
custodial package VDEF releases.
"PKG",623,22,1,1,10,0)
 
"PKG",623,22,1,1,11,0)
** IMPORTANT **    ** IMPORTANT **  ** IMPORTANT **
"PKG",623,22,1,1,12,0)
 
"PKG",623,22,1,1,13,0)
Sites should not install this software prior to your assigned HDR 
"PKG",623,22,1,1,14,0)
installation date. You will be contacted approximately two weeks prior to 
"PKG",623,22,1,1,15,0)
your HDR installation date and provided with instructions on when and in 
"PKG",623,22,1,1,16,0)
what order to install these patches and the VDEF software. Additionally, 
"PKG",623,22,1,1,17,0)
sites should not configure or attempt to utilize the VDEF software 
"PKG",623,22,1,1,18,0)
associated with these patches prior to your assigned HDR installation 
"PKG",623,22,1,1,19,0)
date, at which time Technical Support Office personnel will work with you 
"PKG",623,22,1,1,20,0)
to activate that application and start your data transmissions to the HDR 
"PKG",623,22,1,1,21,0)
database. (If you do not know your HDR installation date, you can find 
"PKG",623,22,1,1,22,0)
that information by going to 
"PKG",623,22,1,1,23,0)
<http://vaww.teamshare.va.gov/hdr_implementation/> and selecting 
"PKG",623,22,1,1,24,0)
"Implementation Schedule  from the Quick Launch panel on the left side of 
"PKG",623,22,1,1,25,0)
the page.)
"PKG",623,"VERSION")
1.0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","VDEFCONT")
0^7^B40975842
"RTN","VDEFCONT",1,0)
VDEFCONT ;INTEGIC/AM & BPOIFO/JG- VDEF CONTROL PROGRAM; ; 21 Dec 2004  11:27 AM
"RTN","VDEFCONT",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFCONT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFCONT",4,0)
 ;
"RTN","VDEFCONT",5,0)
 Q  ; No bozos
"RTN","VDEFCONT",6,0)
 ;
"RTN","VDEFCONT",7,0)
START ; Main entry point for scheduling queue processor jobs at Taskman
"RTN","VDEFCONT",8,0)
 ; Startup time
"RTN","VDEFCONT",9,0)
 I '$D(ZTQUEUED) W !,"Must be run from TaskMan." Q
"RTN","VDEFCONT",10,0)
 ;
"RTN","VDEFCONT",11,0)
 ; Spawn Request Queue processors
"RTN","VDEFCONT",12,0)
 N QIEN F QIEN=0:0 S QIEN=$O(^VDEFHL7(579.3,QIEN)) Q:'QIEN  D REQ(QIEN)
"RTN","VDEFCONT",13,0)
 ;
"RTN","VDEFCONT",14,0)
 ; Spawn the Monitor job
"RTN","VDEFCONT",15,0)
 D SPAWN
"RTN","VDEFCONT",16,0)
 Q
"RTN","VDEFCONT",17,0)
 ;
"RTN","VDEFCONT",18,0)
SPAWN ; Spawn the VDEF Monitor job
"RTN","VDEFCONT",19,0)
 N ARR,ERR,FDA,ZTDESC,ZTDTH,ZTIO,ZTPRI,ZTRTN,ZTSK
"RTN","VDEFCONT",20,0)
 ; Name of the program to invoke
"RTN","VDEFCONT",21,0)
 S ZTRTN="MONITOR^VDEFCONT"
"RTN","VDEFCONT",22,0)
 ; TaskMan's device name - not needed in this case
"RTN","VDEFCONT",23,0)
 S ZTIO=""
"RTN","VDEFCONT",24,0)
 ; Build TaskMan task name
"RTN","VDEFCONT",25,0)
 S ZTDESC="VDEF Monitor"
"RTN","VDEFCONT",26,0)
 ; Retrieve the priority and the delay of the VDEF Monitor
"RTN","VDEFCONT",27,0)
 D GETS^DIQ(579.5,"1,",".01;.02;.06","I","ARR","ERR")
"RTN","VDEFCONT",28,0)
 ; TaskMan task number of the last VDEF Monitor task
"RTN","VDEFCONT",29,0)
 S ZTSK=+$G(ARR(579.5,"1,",.06,"I"))
"RTN","VDEFCONT",30,0)
 ; Check the status of the last VDEF Monitor task
"RTN","VDEFCONT",31,0)
 D STAT^%ZTLOAD
"RTN","VDEFCONT",32,0)
 ; If the task is scheduled to run, then don't submit a new one - this
"RTN","VDEFCONT",33,0)
 ; means that the system is coming back after a restart which occurred
"RTN","VDEFCONT",34,0)
 ; while an old VDEF Monitor task was scheduled for running
"RTN","VDEFCONT",35,0)
 I ZTSK(1)=1 Q
"RTN","VDEFCONT",36,0)
 ; Set the priority of the VDEF Monitor task
"RTN","VDEFCONT",37,0)
 S ZTPRI=$G(ARR(579.5,"1,",.01,"I")) ; Currently a no-op
"RTN","VDEFCONT",38,0)
 ; Calculate when to run the VDEF Monitor next time
"RTN","VDEFCONT",39,0)
 S ZTDTH=$$FUTURE^VDEFUTIL($G(ARR(579.5,"1,",.02,"I")))
"RTN","VDEFCONT",40,0)
 ; Call TaskMan's scheduler
"RTN","VDEFCONT",41,0)
 D ^%ZTLOAD
"RTN","VDEFCONT",42,0)
 ; Check that TaskMan successfully queued up the Monitor task
"RTN","VDEFCONT",43,0)
 I '$G(ZTSK) D ALERT^VDEFUTIL("VDEF Monitor failed to start")
"RTN","VDEFCONT",44,0)
 ;
"RTN","VDEFCONT",45,0)
 ; File the task number of the task that has been queued up
"RTN","VDEFCONT",46,0)
 I $G(ZTSK) D
"RTN","VDEFCONT",47,0)
 . S FDA(1,579.5,"1,",.06)=ZTSK
"RTN","VDEFCONT",48,0)
 . D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFCONT",49,0)
 Q
"RTN","VDEFCONT",50,0)
 ;
"RTN","VDEFCONT",51,0)
MONITOR ; VDEF monitor task, executed every few minutes to check queue status
"RTN","VDEFCONT",52,0)
 ;
"RTN","VDEFCONT",53,0)
 N QIEN
"RTN","VDEFCONT",54,0)
 ; Check for potentially "hung" entries in the Request Queues
"RTN","VDEFCONT",55,0)
 F QIEN=0:0 S QIEN=$O(^VDEFHL7(579.3,"C","C",QIEN)) Q:'QIEN  D
"RTN","VDEFCONT",56,0)
 . N IEN,LIMIT,QUEUE,QUEUENAM,QUIT
"RTN","VDEFCONT",57,0)
 . ; Retrieve queue data
"RTN","VDEFCONT",58,0)
 . D GETS^DIQ(579.3,QIEN_",",".01;.04;.05","I","QUEUE","ERR")
"RTN","VDEFCONT",59,0)
 . ; Get the name of this Request Queue
"RTN","VDEFCONT",60,0)
 . S QUEUENAM=$G(QUEUE(579.3,QIEN_",",.01))
"RTN","VDEFCONT",61,0)
 . ; Retrieve the queue's Check-out Time Limit (in seconds)
"RTN","VDEFCONT",62,0)
 . S LIMIT=$G(QUEUE(579.3,QIEN_",",.05,"I"))
"RTN","VDEFCONT",63,0)
 . ; Get a list of currently Checked-out Requests in this queue
"RTN","VDEFCONT",64,0)
 . S IEN=999999999999,QUIT=0
"RTN","VDEFCONT",65,0)
 . F  S IEN=$O(^VDEFHL7(579.3,"C","C",QIEN,IEN),-1) Q:'IEN  D  Q:QUIT
"RTN","VDEFCONT",66,0)
 .. ; Retrieve the DTS when the Request was checked out and when the
"RTN","VDEFCONT",67,0)
 .. ; last HL7 message was generated for this Request
"RTN","VDEFCONT",68,0)
 .. N CHECKOUT,ENTRY,ERR,FDA,LASTMESS,XQA,XQAMSG,XQASUPV
"RTN","VDEFCONT",69,0)
 .. D GETS^DIQ(579.31,IEN_","_QIEN_",",".01;.09;.1;.15","I","ENTRY","ERR")
"RTN","VDEFCONT",70,0)
 .. ; Check if the Vista HL7 IRM has already been notified
"RTN","VDEFCONT",71,0)
 .. I $G(ENTRY(579.31,IEN_","_QIEN_",",.15,"I")) S QUIT=1 Q
"RTN","VDEFCONT",72,0)
 .. ; Get the DTS when the Request was Checked Out for processing
"RTN","VDEFCONT",73,0)
 .. S CHECKOUT=$G(ENTRY(579.31,IEN_","_QIEN_",",.09,"I"))
"RTN","VDEFCONT",74,0)
 .. ; Get the DTS when the last message was generated
"RTN","VDEFCONT",75,0)
 .. S LASTMESS=$G(ENTRY(579.31,IEN_","_QIEN_",",.1,"I"))
"RTN","VDEFCONT",76,0)
 .. ; Calculate the number of seconds between the last activity for
"RTN","VDEFCONT",77,0)
 .. ; this Request (DTS of the last message generated if defined,
"RTN","VDEFCONT",78,0)
 .. ; DTS when the Request was checked out otherwise) and check if
"RTN","VDEFCONT",79,0)
 .. ; it is has been less than a LIMIT number of seconds since it
"RTN","VDEFCONT",80,0)
 .. ; occurred
"RTN","VDEFCONT",81,0)
 .. I $$DIFF^VDEFUTIL($S(LASTMESS'="":LASTMESS,1:CHECKOUT),$H)<LIMIT Q
"RTN","VDEFCONT",82,0)
 .. ; If the check above failed, then the Checked Out Request is
"RTN","VDEFCONT",83,0)
 .. ; probably "hung" - send a message to the Vista HL7 IRM
"RTN","VDEFCONT",84,0)
 .. D ALERT^VDEFUTIL("Possibly hung VDEF entry "_IEN_" in "_$E(QUEUENAM,1,35))
"RTN","VDEFCONT",85,0)
 .. D NOW^%DTC ; Retrieve the current date/time stamp in Fileman format
"RTN","VDEFCONT",86,0)
 .. ; Update the time stamp in the entry so that the VDEF Monitor
"RTN","VDEFCONT",87,0)
 .. ; doesn't try to notify the Vista HL7 IRM multiple times
"RTN","VDEFCONT",88,0)
 .. S FDA(1,579.31,IEN_","_QIEN_",",.15)=%
"RTN","VDEFCONT",89,0)
 .. D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFCONT",90,0)
 .. I $D(ERR) ; Add error processing here
"RTN","VDEFCONT",91,0)
 .. Q
"RTN","VDEFCONT",92,0)
 ;
"RTN","VDEFCONT",93,0)
 ; Purge old entries in Request Queues
"RTN","VDEFCONT",94,0)
 F QIEN=0:0 S QIEN=$O(^VDEFHL7(579.3,"C","P",QIEN)) Q:'QIEN  D
"RTN","VDEFCONT",95,0)
 . N ARCH,IEN,QUEUE,QUIT
"RTN","VDEFCONT",96,0)
 . ; Retrieve queue data
"RTN","VDEFCONT",97,0)
 . D GETS^DIQ(579.3,QIEN_",",".04","I","QUEUE","ERR")
"RTN","VDEFCONT",98,0)
 . ; Retrieve the queue's Archival Parameter (in seconds)
"RTN","VDEFCONT",99,0)
 . S ARCH=$G(QUEUE(579.3,QIEN_",",.04,"I"))
"RTN","VDEFCONT",100,0)
 . ; Initialize the flag that indicates whether the oldest Processed
"RTN","VDEFCONT",101,0)
 . ; entry in a given Request Queue is too recent to be purged
"RTN","VDEFCONT",102,0)
 . S QUIT=0
"RTN","VDEFCONT",103,0)
 . ; Loop through the list of "P"rocesses entries in this Request
"RTN","VDEFCONT",104,0)
 . ; Queue, starting with the oldest
"RTN","VDEFCONT",105,0)
 . F IEN=0:0 S IEN=$O(^VDEFHL7(579.3,"C","P",QIEN,IEN)) Q:'IEN  D  Q:QUIT
"RTN","VDEFCONT",106,0)
 .. N DTS,ENTRY,ERR,FDA
"RTN","VDEFCONT",107,0)
 .. ; Get this entry's data
"RTN","VDEFCONT",108,0)
 .. D GETS^DIQ(579.31,IEN_","_QIEN_",",".13","I","ENTRY","ERR")
"RTN","VDEFCONT",109,0)
 .. I $D(ERR) ; Add error processing here
"RTN","VDEFCONT",110,0)
 .. ; Retrieve the DTS when the Request was "P"rocessed
"RTN","VDEFCONT",111,0)
 .. S DTS=$G(ENTRY(579.31,IEN_","_QIEN_",",.13,"I"))
"RTN","VDEFCONT",112,0)
 .. ; Calculate how long it has been since this Request was "P"rocessed
"RTN","VDEFCONT",113,0)
 .. ; and, if the Request is more recent than the Archival Parameter
"RTN","VDEFCONT",114,0)
 .. ; for this Queue, set the "Quit" flag and stop processing the Queue
"RTN","VDEFCONT",115,0)
 .. I $$DIFF^VDEFUTIL(DTS,$H)<ARCH S QUIT=1 Q
"RTN","VDEFCONT",116,0)
 .. ; If we are here, then the entry is older than allowed by the
"RTN","VDEFCONT",117,0)
 .. ; Archival Parameter - purge this entry from the Request Queue
"RTN","VDEFCONT",118,0)
 .. S FDA(1,579.31,IEN_","_QIEN_",",.01)="@"
"RTN","VDEFCONT",119,0)
 .. D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFCONT",120,0)
 .. I $D(ERR) ; Add error processing here
"RTN","VDEFCONT",121,0)
 ;
"RTN","VDEFCONT",122,0)
 ; Reschedule VDEF monitor
"RTN","VDEFCONT",123,0)
 D SPAWN
"RTN","VDEFCONT",124,0)
 S ZTREQ="@" ; Tell the Submanager to delete this task's record
"RTN","VDEFCONT",125,0)
 Q
"RTN","VDEFCONT",126,0)
 ;
"RTN","VDEFCONT",127,0)
REQ(QIEN) ; Spawn a Request Queue Processor task for a single queue
"RTN","VDEFCONT",128,0)
 ; Try locking the Request Queue - if we fail, then there is 
"RTN","VDEFCONT",129,0)
 ; another Request Processor currently holding the lock, so skip it
"RTN","VDEFCONT",130,0)
 L +^VDEFHL7(579.3,QIEN,0):3 Q:'$T
"RTN","VDEFCONT",131,0)
 N ERR,FDA,QNAME,QUEUE,ZTDESC,ZTDTH,ZTIO,ZTPRI,ZTRTN,ZTSAVE,ZTSK
"RTN","VDEFCONT",132,0)
 ; Retrieve queue data
"RTN","VDEFCONT",133,0)
 D GETS^DIQ(579.3,QIEN_",",".01;.02;.07;.08;.09","I","QUEUE","ERR")
"RTN","VDEFCONT",134,0)
 ; If this Request Queue is suspended, quit
"RTN","VDEFCONT",135,0)
 I $G(QUEUE(579.3,QIEN_",",.09,"I"))="S" G REQX
"RTN","VDEFCONT",136,0)
 ; TaskMan task number of the last Request Processor task for this queue
"RTN","VDEFCONT",137,0)
 S ZTSK=+$G(QUEUE(579.3,QIEN_",",.08,"I"))
"RTN","VDEFCONT",138,0)
 ; Check the status of the last Request Processor task
"RTN","VDEFCONT",139,0)
 D STAT^%ZTLOAD
"RTN","VDEFCONT",140,0)
 ; If the task is scheduled to run, then don't submit a new one - this
"RTN","VDEFCONT",141,0)
 ; means that the system is coming back after a restart which occurred
"RTN","VDEFCONT",142,0)
 ; while an old Request Processor task was scheduled for running
"RTN","VDEFCONT",143,0)
 I ZTSK(1)=1 G REQX
"RTN","VDEFCONT",144,0)
 ; Name of the program to invoke
"RTN","VDEFCONT",145,0)
 S ZTRTN="EN^VDEFREQ"
"RTN","VDEFCONT",146,0)
 ; TaskMan's device name - not needed in this case
"RTN","VDEFCONT",147,0)
 S ZTIO=""
"RTN","VDEFCONT",148,0)
 ; Build TaskMan task name
"RTN","VDEFCONT",149,0)
 S QNAME=$G(QUEUE(579.3,QIEN_",",.01,"I"))
"RTN","VDEFCONT",150,0)
 S ZTDESC="VDEF Request Processor for "_QNAME
"RTN","VDEFCONT",151,0)
 ; Set the priority of this Request processor based on queue definition
"RTN","VDEFCONT",152,0)
 S ZTPRI=$G(QUEUE(579.3,QIEN_",",.07,"I")) ; Currently a no-op
"RTN","VDEFCONT",153,0)
 ; Put the queue IEN in the list of variables preserved by Taskman
"RTN","VDEFCONT",154,0)
 S ZTSAVE("QIEN")=QIEN
"RTN","VDEFCONT",155,0)
 ; Tell TaskMan to submit the job immediately
"RTN","VDEFCONT",156,0)
 S ZTDTH=$H
"RTN","VDEFCONT",157,0)
 ; Call TaskMan's scheduler
"RTN","VDEFCONT",158,0)
 D ^%ZTLOAD
"RTN","VDEFCONT",159,0)
 ; Check that TaskMan successfully queued up the Request Processor
"RTN","VDEFCONT",160,0)
 I '$G(ZTSK) D ALERT^VDEFUTIL("VDEF Request Processor for "_$E(QNAME,1,35)_" failed to start")
"RTN","VDEFCONT",161,0)
 ; File the task number of the task that has been queued up
"RTN","VDEFCONT",162,0)
 I $G(ZTSK) D
"RTN","VDEFCONT",163,0)
 . S FDA(1,579.3,QIEN_",",.08)=ZTSK
"RTN","VDEFCONT",164,0)
 . D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFCONT",165,0)
 ;
"RTN","VDEFCONT",166,0)
REQX ; Release the lock
"RTN","VDEFCONT",167,0)
 L -^VDEFHL7(579.3,QIEN,0)
"RTN","VDEFCONT",168,0)
 Q
"RTN","VDEFEL")
0^14^B3420764
"RTN","VDEFEL",1,0)
VDEFEL ;INTEGIC/YG & BPOIFO/JG- VDEF library functions; ; 21 Dec 2004  11:29 AM
"RTN","VDEFEL",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFEL",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFEL",4,0)
 ;
"RTN","VDEFEL",5,0)
 Q  ; No bozos
"RTN","VDEFEL",6,0)
 ;
"RTN","VDEFEL",7,0)
 ; VDEF Library Subroutines.
"RTN","VDEFEL",8,0)
 ;
"RTN","VDEFEL",9,0)
SETDLMS ; Set HL7 delimiters from HL array if any or to std. HL7 ^~|\&
"RTN","VDEFEL",10,0)
 S X=$E($G(HL("FS"))) S:X="" X="^" S SEPF=X
"RTN","VDEFEL",11,0)
 S X=$G(HL("ECH")) S:X="" X="~|\&"
"RTN","VDEFEL",12,0)
 S SEPC=$E(X),SEPS=$E(X,4),SEPR=$E(X,2),SEPE=$E(X,3)
"RTN","VDEFEL",13,0)
 Q
"RTN","VDEFEL",14,0)
 ;
"RTN","VDEFEL",15,0)
 ; Converts IEN from new person file (200) into HL7 XCN data
"RTN","VDEFEL",16,0)
XCN200(VAL,SRC) ;
"RTN","VDEFEL",17,0)
 ; Inputs: VAL - IEN from ^VA(200)
"RTN","VDEFEL",18,0)
 ;         SRC - Source for person (Optional)
"RTN","VDEFEL",19,0)
 ; Return: VAL is converted to HL7 XCN name format
"RTN","VDEFEL",20,0)
 I VAL="" Q VAL
"RTN","VDEFEL",21,0)
 N NM S NM("FILE")=200,NM("FIELD")=.01,NM("IENS")=VAL_","
"RTN","VDEFEL",22,0)
 S VAL=VAL_SEPC_$$HLNAME^XLFNAME(.NM,"S",SEPC)
"RTN","VDEFEL",23,0)
 I $G(SRC)'="" S $P(VAL,SEPC,8)=SRC
"RTN","VDEFEL",24,0)
 E  S $P(VAL,SEPC,8)="VistA200"
"RTN","VDEFEL",25,0)
 Q VAL
"RTN","VDEFEL",26,0)
 ;
"RTN","VDEFEL",27,0)
 ; Format VAL into HL7 TS date/time
"RTN","VDEFEL",28,0)
TS(VAL) ; Format VAL as valid HL7 TS date/time/time zone
"RTN","VDEFEL",29,0)
 N OVAL,%DT,%H,% I VAL'?3A.E&(+VAL=0)!(+VAL=-1) S VAL="" G TSEXIT
"RTN","VDEFEL",30,0)
 ;
"RTN","VDEFEL",31,0)
 ; Already in HL7 TS or DT form?
"RTN","VDEFEL",32,0)
 G TSEXIT:VAL?8N.6N1"-"4N!(VAL?8N.6N1"+"4N)!(VAL?8N),TZ:VAL?12N
"RTN","VDEFEL",33,0)
 S OVAL=VAL
"RTN","VDEFEL",34,0)
 ;
"RTN","VDEFEL",35,0)
 ; Convert alpha month if needed
"RTN","VDEFEL",36,0)
 I VAL'?5N1","1.5N,VAL'?7N,VAL'?7N1"."0.6N D
"RTN","VDEFEL",37,0)
 . N X,Y,%DT S %DT="TS",X=VAL D ^%DT I Y=-1 S VAL="" Q
"RTN","VDEFEL",38,0)
 . S VAL=Y,OVAL=VAL
"RTN","VDEFEL",39,0)
 G TSEXIT:VAL=""
"RTN","VDEFEL",40,0)
 ;
"RTN","VDEFEL",41,0)
 ; Date in $H format?
"RTN","VDEFEL",42,0)
 I VAL?5N1","1.5N S %H=VAL D YMD^%DTC S VAL=X_%,OVAL=VAL
"RTN","VDEFEL",43,0)
 ;
"RTN","VDEFEL",44,0)
 ; Convert to HL7 format
"RTN","VDEFEL",45,0)
 S VAL=$$HLDATE^HLFNC(VAL,"TS") I VAL=-1 S VAL="" G TSEXIT
"RTN","VDEFEL",46,0)
 ;
"RTN","VDEFEL",47,0)
 ; Correct the time zone if time present
"RTN","VDEFEL",48,0)
TZ I $L(VAL)>8,VAL'["-",VAL'["+" S VAL=$P(VAL,"-")_$$TZ^XLFDT
"RTN","VDEFEL",49,0)
TSEXIT Q VAL
"RTN","VDEFEL",50,0)
 ;
"RTN","VDEFEL",51,0)
RTNVAL ; Validate entry for file #577, field # .3, EXTRACTION PROGRAM
"RTN","VDEFEL",52,0)
 ; Entry must be either "INACTIVE" or the name of the M routine
"RTN","VDEFEL",53,0)
 ; used to extract the VistA data and create the HL7 message.
"RTN","VDEFEL",54,0)
 ; Used by input transform of file #577, field #.3 and by the KID
"RTN","VDEFEL",55,0)
 ; post-install API in application domains's packages.
"RTN","VDEFEL",56,0)
 ;
"RTN","VDEFEL",57,0)
 I X'="INACTIVE",$T(@("^"_X))=""  K X Q  ; Program ain't there
"RTN","VDEFEL",58,0)
 I $P($T(@("VALID^"_X)),";",3)'="VDEF HL7 MESSAGE BUILDER" K X Q
"RTN","VDEFEL",59,0)
 Q
"RTN","VDEFMNU")
0^17^B43970546
"RTN","VDEFMNU",1,0)
VDEFMNU ;INTEGIC/YG & BPOIFO/JG - Edit VDEF sitewide parameters ; 21 Dec 2004  11:26 AM
"RTN","VDEFMNU",2,0)
 ;;1.00;VDEF;;Dec 17, 2004;
"RTN","VDEFMNU",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFMNU",4,0)
 ;
"RTN","VDEFMNU",5,0)
 ; IA's: #4322 - ^HLCS(870,<link>,0)
"RTN","VDEFMNU",6,0)
 ;       #1373 - Lookup to file #101
"RTN","VDEFMNU",7,0)
 ;
"RTN","VDEFMNU",8,0)
 Q  ; No bozos
"RTN","VDEFMNU",9,0)
 ;
"RTN","VDEFMNU",10,0)
SITE ; Edit Site-Wide Parameters
"RTN","VDEFMNU",11,0)
 N DA,DIC,DIE,DR S DIE=579.5,DA=1,DR=".01;.02;" D ^DIE
"RTN","VDEFMNU",12,0)
 Q
"RTN","VDEFMNU",13,0)
 ;
"RTN","VDEFMNU",14,0)
REQUEST ; Edit Request Queue Parameters
"RTN","VDEFMNU",15,0)
 N DIC,DLAYGO,X,Y,DIE,DA,DR
"RTN","VDEFMNU",16,0)
 S DIC=579.3,DIC(0)="AQE",DIC("A")="Select Request Queue: "  W ! D ^DIC Q:Y=-1
"RTN","VDEFMNU",17,0)
 K DIC S DIE=579.3,DA=$P(Y,U),DR=".04;.05;.02" D ^DIE
"RTN","VDEFMNU",18,0)
 Q
"RTN","VDEFMNU",19,0)
 ;
"RTN","VDEFMNU",20,0)
REQOFF ; Toggle Requestor On/Off
"RTN","VDEFMNU",21,0)
 N DIC,DLAYGO,X,Y,DIE,DA,DR
"RTN","VDEFMNU",22,0)
 S DIC=579.1,DIC(0)="AQE",DIC("A")="Select Requestor: " W ! D ^DIC Q:Y=-1
"RTN","VDEFMNU",23,0)
 I $$GET1^DIQ(579.1,$P(Y,U)_",",.05,"I")="A" D
"RTN","VDEFMNU",24,0)
 . W !,!,"Inactivating a requestor has a significant effect on the synchronization"
"RTN","VDEFMNU",25,0)
 . W !,"of VistA and remote system(s).  All VDEF requests made while the requestor"
"RTN","VDEFMNU",26,0)
 . W !,"is inactive will be PERMANENTLY lost.  Make sure you really want to"
"RTN","VDEFMNU",27,0)
 . W !,"turn it off.",!
"RTN","VDEFMNU",28,0)
 K DIC S DIE=579.1,DA=$P(Y,U),DR=".05" D ^DIE
"RTN","VDEFMNU",29,0)
 Q
"RTN","VDEFMNU",30,0)
 ;
"RTN","VDEFMNU",31,0)
QUEOFF ; Toggle Request Processor Queue on/off
"RTN","VDEFMNU",32,0)
 N DIC,DLAYGO,X,Y,DIE,DA,DR,QUEUE,STAT,TMTASK
"RTN","VDEFMNU",33,0)
 S DIC=579.3,DIC(0)="AQE",DIC("A")="Select Request Queue: " W ! D ^DIC Q:Y=-1
"RTN","VDEFMNU",34,0)
 K DIC S QUEUE=$P(Y,U) S DIE=579.3,DA=QUEUE,DR=".09" D ^DIE
"RTN","VDEFMNU",35,0)
 ;
"RTN","VDEFMNU",36,0)
 ; Get the new status of the Request Processor
"RTN","VDEFMNU",37,0)
 S STAT=$$GET1^DIQ(579.3,QUEUE_",",.09,"I")
"RTN","VDEFMNU",38,0)
 ;
"RTN","VDEFMNU",39,0)
 ; Start the Request Processor
"RTN","VDEFMNU",40,0)
 I STAT="R" D REQ^VDEFCONT(QUEUE)
"RTN","VDEFMNU",41,0)
 ;
"RTN","VDEFMNU",42,0)
 ; Stop the Request Processor
"RTN","VDEFMNU",43,0)
 I STAT="S" D
"RTN","VDEFMNU",44,0)
 . S TMTASK=$$GET1^DIQ(579.3,QUEUE_",",.08,"I") S:TMTASK'="" X=$$ASKSTOP^%ZTLOAD(TMTASK)
"RTN","VDEFMNU",45,0)
 . S TMTASK=$$GET1^DIQ(579.3,QUEUE_",",.11,"I") S:TMTASK'="" X=$$ASKSTOP^%ZTLOAD(TMTASK)
"RTN","VDEFMNU",46,0)
 Q
"RTN","VDEFMNU",47,0)
 ;
"RTN","VDEFMNU",48,0)
SCHED ; Schedule processor
"RTN","VDEFMNU",49,0)
 N DIC,DLAYGO,X,Y,SIEN,DIE,DA,DR,QUEUE,STAT,TMTASK
"RTN","VDEFMNU",50,0)
 S DIC=579.3,DIC(0)="AQE",DIC("A")="Select Request Queue: " W ! D ^DIC Q:Y=-1
"RTN","VDEFMNU",51,0)
 K DIC S QUEUE=$P(Y,U) D DISP S DA(1)=QUEUE,DIC="^VDEFHL7(579.3,"_QUEUE_",2,"
"RTN","VDEFMNU",52,0)
 S DIC(0)="AQEL",DIC("A")="Select Entry: " D ^DIC Q:Y=-1
"RTN","VDEFMNU",53,0)
 S ENTRY=$P(Y,U),DIE=DIC,DA=ENTRY
"RTN","VDEFMNU",54,0)
 S DR=".01;.02;.03;D SCHFORM^VDEFMNU;.04;D SCHFORM^VDEFMNU;.05" D ^DIE
"RTN","VDEFMNU",55,0)
 W ! D DISP
"RTN","VDEFMNU",56,0)
 ;
"RTN","VDEFMNU",57,0)
 ; Now reschedule the processor task back
"RTN","VDEFMNU",58,0)
 S ZTSK=$P(^VDEFHL7(579.3,QUEUE,0),U,8) D ISQED^%ZTLOAD
"RTN","VDEFMNU",59,0)
 ;
"RTN","VDEFMNU",60,0)
 ; If old task not found or not running, start it.
"RTN","VDEFMNU",61,0)
 I $G(ZTSK("E"))'="" D REQ^VDEFCONT(QUEUE) Q
"RTN","VDEFMNU",62,0)
 I ZTSK(0)=0 D REQ^VDEFCONT(QUEUE) Q
"RTN","VDEFMNU",63,0)
 ;
"RTN","VDEFMNU",64,0)
 ; Task is scheduled, so reschedule it.
"RTN","VDEFMNU",65,0)
 K ZTDESC,ZTIO,ZTRTN,ZTSAVE S ZTDTH=$H D REQ^%ZTLOAD
"RTN","VDEFMNU",66,0)
 Q
"RTN","VDEFMNU",67,0)
 ;
"RTN","VDEFMNU",68,0)
SCHFORM W !,"Enter time in military form as HH:MM"
"RTN","VDEFMNU",69,0)
 Q
"RTN","VDEFMNU",70,0)
 ;
"RTN","VDEFMNU",71,0)
DISP ; Display scheduling rules.
"RTN","VDEFMNU",72,0)
 I '$O(^VDEFHL7(579.3,QUEUE,2,0)) W !,"No Scheduling Rules currently defined for this queue"
"RTN","VDEFMNU",73,0)
 E  S SIEN=0 D
"RTN","VDEFMNU",74,0)
 . W !,"Currently defined Scheduling Rules are :"
"RTN","VDEFMNU",75,0)
 . F  S SIEN=$O(^VDEFHL7(579.3,QUEUE,2,SIEN)) Q:'SIEN  D
"RTN","VDEFMNU",76,0)
 . . W !,$$GET1^DIQ(579.32,SIEN_","_QUEUE_",",.01,"E")
"RTN","VDEFMNU",77,0)
 . . W ") On ",$$GET1^DIQ(579.32,SIEN_","_QUEUE_",",.02,"E")
"RTN","VDEFMNU",78,0)
 . . W " the request processor is "
"RTN","VDEFMNU",79,0)
 . . S STAT=$$GET1^DIQ(579.32,SIEN_","_QUEUE_",",.03,"E")
"RTN","VDEFMNU",80,0)
 . . W STAT," from ",$$GET1^DIQ(579.32,SIEN_","_QUEUE_",",.04,"I")
"RTN","VDEFMNU",81,0)
 . . W " to ",$$GET1^DIQ(579.32,SIEN_","_QUEUE_",",.05,"I")
"RTN","VDEFMNU",82,0)
 Q
"RTN","VDEFMNU",83,0)
 ;
"RTN","VDEFMNU",84,0)
CUSTOD ; Edit Custodial Package Status
"RTN","VDEFMNU",85,0)
 N DIC,DLAYGO,X,Y,DIE,DA,DR,PACK
"RTN","VDEFMNU",86,0)
 S DIC=579.6,DIC(0)="AQE",DIC("A")="Select Custodial Package: "
"RTN","VDEFMNU",87,0)
 W ! D ^DIC Q:Y=-1  S PACK=$P(Y,U)
"RTN","VDEFMNU",88,0)
 I $P(Y,U,2)="REGISTRATION" D  Q
"RTN","VDEFMNU",89,0)
 . W !,"Registration custodial package can't be edited"
"RTN","VDEFMNU",90,0)
 I $$GET1^DIQ(579.6,PACK_",",.02,"I")="A" D
"RTN","VDEFMNU",91,0)
 . W !!,"Inactivating a custodial package has a significant effect on the"
"RTN","VDEFMNU",92,0)
 . W !,"synchronization of VistA and remote system(s).  All VDEF requests for HL7"
"RTN","VDEFMNU",93,0)
 . W !,"messages associated with this custodial package made while the package is"
"RTN","VDEFMNU",94,0)
 . W !,"inactivated will be PERMANENTLY lost.  Make sure you really want to turn"
"RTN","VDEFMNU",95,0)
 . W !,"this custodial package off.",!
"RTN","VDEFMNU",96,0)
 K DIC S DIE=579.6,DA=PACK,DR=".02" D ^DIE
"RTN","VDEFMNU",97,0)
 Q
"RTN","VDEFMNU",98,0)
 ;
"RTN","VDEFMNU",99,0)
EVENT ; Edit VDEF API Event Status
"RTN","VDEFMNU",100,0)
 N DIC,DLAYGO,X,Y,DIE,DA,DR,EVENT
"RTN","VDEFMNU",101,0)
 S DIC("W")="N Z,DESC S Z=^(0),DESC=$G(^(1)) W:$P(Z,U,9)'="""" DESC_""   ""_""Status: ""_$S($P(Z,U,11)=""A"":""ACTIVE"",1:""INACTIVE""),!,?8,""Pkg: ""_$P($G(^DIC(9.4,$P($G(^VDEFHL7(579.6,$P(Z,U,9),0),-1),U),0)),U)"
"RTN","VDEFMNU",102,0)
 S DIC=577,DIC(0)="AQES",DIC("A")="Select VDEF API Event: "
"RTN","VDEFMNU",103,0)
 W ! D ^DIC Q:Y=-1  S EVENT=$P(Y,U)
"RTN","VDEFMNU",104,0)
 I $$GET1^DIQ(577,EVENT_",",.2,"I")="A" D
"RTN","VDEFMNU",105,0)
 . W !!,"Inactivating a VDEF API event will cause all requests for that"
"RTN","VDEFMNU",106,0)
 . W !,"API to be PERMANENTLY lost.  Make sure you really want to turn"
"RTN","VDEFMNU",107,0)
 . W !,"this API event off.",!
"RTN","VDEFMNU",108,0)
 K DIC S DIE=577,DA=EVENT,DR=".2" D ^DIE
"RTN","VDEFMNU",109,0)
 Q
"RTN","VDEFMNU",110,0)
 ;
"RTN","VDEFMNU",111,0)
REPORT ; Display VDEF status/parameters
"RTN","VDEFMNU",112,0)
 N LL,LLN,SUBS,LINX,TNN,TNF,IEN,NZ,I,J,K,A,PROT,STATS
"RTN","VDEFMNU",113,0)
REPORT1 W @IOF,"Logical Link Status" K LINX
"RTN","VDEFMNU",114,0)
 S I=0 F  S I=$O(^VDEFHL7(577,I)) Q:I=""  D
"RTN","VDEFMNU",115,0)
 . K RES S PROT=$P($G(^VDEFHL7(577,I,0)),U,7) Q:PROT=""
"RTN","VDEFMNU",116,0)
 . D GETS^DIQ(101,PROT_",","775*","I","RES")
"RTN","VDEFMNU",117,0)
 . S J=0 F  S J=$O(RES(101.0775,J)) Q:J=""  D
"RTN","VDEFMNU",118,0)
 . . S SUBS=RES(101.0775,J,.01,"I")
"RTN","VDEFMNU",119,0)
 . . I SUBS S LLN=$$GET1^DIQ(101,SUBS_",",770.7,"E") I LLN'="" S LINX(LLN)=1
"RTN","VDEFMNU",120,0)
 S LLN=0 F  S LLN=$O(LINX(LLN)) Q:LLN=""  D
"RTN","VDEFMNU",121,0)
 . W !?2,LLN,": " S LL=$O(^HLCS(870,"B",LLN,"")) Q:LL=""
"RTN","VDEFMNU",122,0)
 . N ZTSK S ZTSK=$P($G(^HLCS(870,LL,0)),U,12)
"RTN","VDEFMNU",123,0)
 . I ZTSK'="" D STAT^%ZTLOAD W:$G(ZTSK(1))=2 "running task #",ZTSK K ZTSK
"RTN","VDEFMNU",124,0)
 . E  W "stopped or caught up"
"RTN","VDEFMNU",125,0)
 W !!,"Requestor Status"
"RTN","VDEFMNU",126,0)
 S IEN=0 F  S IEN=$O(^VDEFHL7(579.1,IEN)) Q:'IEN  D
"RTN","VDEFMNU",127,0)
 . S NZ=^VDEFHL7(579.1,IEN,0) W !?2,$P(NZ,U),": "
"RTN","VDEFMNU",128,0)
 . W $S($P(NZ,U,5)="A":"Activated",1:"Inactivated")
"RTN","VDEFMNU",129,0)
 . W ?32,"Dest.: ",$P(^VDEFHL7(579.2,$P(NZ,U,3),0),U)
"RTN","VDEFMNU",130,0)
 . W ?52,"Req. Queue: ",$P(^VDEFHL7(579.3,$P(NZ,U,4),0),U,1)
"RTN","VDEFMNU",131,0)
 W !!,"Request Processor Status:"
"RTN","VDEFMNU",132,0)
 S IEN=0 F  S IEN=$O(^VDEFHL7(579.3,IEN)) Q:'IEN  D
"RTN","VDEFMNU",133,0)
 . S NZ=^VDEFHL7(579.3,IEN,0) W !?2,$P(NZ,U),": "
"RTN","VDEFMNU",134,0)
 . W $S($P(NZ,U,9)="R":"running",1:"suspended")
"RTN","VDEFMNU",135,0)
 . W " and " S TNF=$P(NZ,U,8),TNN=$P(NZ,U,11)
"RTN","VDEFMNU",136,0)
 . I TNN'="" N ZTSK S ZTSK=TNN D STAT^%ZTLOAD W:$G(ZTSK(1))=1 "currently processing" K ZTSK
"RTN","VDEFMNU",137,0)
 . N ZTSK S ZTSK=TNF D ISQED^%ZTLOAD
"RTN","VDEFMNU",138,0)
 . W $S(ZTSK(0)'="":"scheduled",1:"not scheduled") K ZTSK
"RTN","VDEFMNU",139,0)
 . W ?45,"Task #",$P(NZ,U,11)
"RTN","VDEFMNU",140,0)
 . S NZ=$G(^VDEFHL7(579.3,IEN,1,0))
"RTN","VDEFMNU",141,0)
 . I NZ="" W !?2,"No requests in the queue"
"RTN","VDEFMNU",142,0)
 . E  W !?2,"Requests in the queue: ",$P(NZ,U,4),", Last request#: ",$P(NZ,U,3)
"RTN","VDEFMNU",143,0)
 . S STATS="" W !?2
"RTN","VDEFMNU",144,0)
 . F STAT="P","C","Q","E" D
"RTN","VDEFMNU",145,0)
 . . S J=0,K=0 F J=0:1:100 S K=$O(^VDEFHL7(579.3,"C",STAT,IEN,K)) Q:K=""
"RTN","VDEFMNU",146,0)
 . . W $S(STAT="P":"Processed",STAT="C":"  Checked Out",STAT="Q":"  Queued Up",STAT="E":"  Errored Out")
"RTN","VDEFMNU",147,0)
 . . W $S(J<100:"("_J_")",1:"(> 100)")
"RTN","VDEFMNU",148,0)
 ;
"RTN","VDEFMNU",149,0)
 ; Loop added for dashboard monitoring
"RTN","VDEFMNU",150,0)
 R !!,"Hit <return/enter> to continue or '^' to terminate: ",A:5
"RTN","VDEFMNU",151,0)
 Q:A="^"  G REPORT1
"RTN","VDEFQM")
0^23^B53152750
"RTN","VDEFQM",1,0)
VDEFQM ;INTEGIC/AM & BPOIFO/JG - VDEF API ; 21 Dec 2004  11:24 AM
"RTN","VDEFQM",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFQM",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFQM",4,0)
 ;
"RTN","VDEFQM",5,0)
 ; IA's: #4271 - Lookup to file #771.2
"RTN","VDEFQM",6,0)
 ;       #4321 - Lookup to file #779.001
"RTN","VDEFQM",7,0)
 ;
"RTN","VDEFQM",8,0)
 Q  ; No bozos
"RTN","VDEFQM",9,0)
 ;
"RTN","VDEFQM",10,0)
 ; Validates and places a request in the VDEF queue
"RTN","VDEFQM",11,0)
QUEUE(EVENT,PAIR,MSTEXT,REQIEN,DYNAMIC) ;
"RTN","VDEFQM",12,0)
 ; EVENT =  HL7 event in the form Event Type^Message Type (e.g. ADT^A28)
"RTN","VDEFQM",13,0)
 ; PAIR =   Name/value pairs uniquely identifying the IEN
"RTN","VDEFQM",14,0)
 ;          (e.g. SUBTYPE="CHEM"^IEN=1234)
"RTN","VDEFQM",15,0)
 ; MSTEXT = Returned text message, passed by reference
"RTN","VDEFQM",16,0)
 ; REQIEN = Requestor IEN in file 579.1, only valued for solicited
"RTN","VDEFQM",17,0)
 ;          requests
"RTN","VDEFQM",18,0)
 ; DYNAMIC = Dynamic Addressing array in nodes DYNAMIC("LINKS",1-n)
"RTN","VDEFQM",19,0)
 ;
"RTN","VDEFQM",20,0)
 N CNT,CUSTIEN,DATA,DESTIEN,ERR,EVENTIEN,EVTY,EVTYIEN,FDA,I,IENROOT
"RTN","VDEFQM",21,0)
 N MESIEN,MSTY,OUTPUT,QUEIEN,RQIEN,SUBTYPE,SUBIEN,NVPIEN
"RTN","VDEFQM",22,0)
 N D0,DA,DH,DI,DIC,DIE,DIK,DIKRFIL,DIN,DIROOT,DR
"RTN","VDEFQM",23,0)
 S MSTEXT="",REQIEN=$G(REQIEN) S:$G(U)="" U="^"
"RTN","VDEFQM",24,0)
 ;
"RTN","VDEFQM",25,0)
 ; Check for the existence of the HL7 event
"RTN","VDEFQM",26,0)
 I $G(EVENT)="" S MSTEXT="HL7 event is required" G EXBAD
"RTN","VDEFQM",27,0)
 ;
"RTN","VDEFQM",28,0)
 ; Check for the existence of the name/value pair
"RTN","VDEFQM",29,0)
 I $G(PAIR)="" S MSTEXT="Name/value pair(s) is required" G EXBAD
"RTN","VDEFQM",30,0)
 ;
"RTN","VDEFQM",31,0)
 ; Retrieve the HL7 Message Type and the HL7 Event Type
"RTN","VDEFQM",32,0)
 S MSTY=$P($G(EVENT),U,1),EVTY=$P($G(EVENT),U,2)
"RTN","VDEFQM",33,0)
 ;
"RTN","VDEFQM",34,0)
 ; Validate the HL7 Message type
"RTN","VDEFQM",35,0)
 I MSTY="" S MSTEXT="HL7 Message Type is required" G EXBAD
"RTN","VDEFQM",36,0)
 ;
"RTN","VDEFQM",37,0)
 ; Validate the HL7 Event type
"RTN","VDEFQM",38,0)
 I EVTY="" S MSTEXT="HL7 Event Type is required" G EXBAD
"RTN","VDEFQM",39,0)
 ;
"RTN","VDEFQM",40,0)
 ; Get the default Requestor IEN or '1' if not set up
"RTN","VDEFQM",41,0)
 S REQIEN=$O(^VDEFHL7(579.1,"C","Y",0)) S:REQIEN="" REQIEN=1
"RTN","VDEFQM",42,0)
 ;
"RTN","VDEFQM",43,0)
 ; Retrieve Requestor data and see if Requestor is enabled
"RTN","VDEFQM",44,0)
 S DATA=$G(^VDEFHL7(579.1,REQIEN,0)) I $P(DATA,U,5)="I" D  G EXBAD
"RTN","VDEFQM",45,0)
 . S MSTEXT="VDEF HL7 messaging disabled for this Requestor"
"RTN","VDEFQM",46,0)
 ;
"RTN","VDEFQM",47,0)
 ; Get the Request Queue IEN for this Requestor
"RTN","VDEFQM",48,0)
 S QUEIEN=$P(DATA,U,4) I 'QUEIEN S MSTEXT="Could not get a valid Request Queue" G EXBAD
"RTN","VDEFQM",49,0)
 ;
"RTN","VDEFQM",50,0)
 ; Get the Destination IEN for this Requestor
"RTN","VDEFQM",51,0)
 S DESTIEN=$P(DATA,U,3) I 'DESTIEN S MSTEXT="No Destination for this Requestor" G EXBAD
"RTN","VDEFQM",52,0)
 ;
"RTN","VDEFQM",53,0)
 ; Validate Name/Value Pair
"RTN","VDEFQM",54,0)
 I $P($P(PAIR,U),"=",1)'="SUBTYPE"!($P($P(PAIR,U,2),"=",1)'="IEN") D  G EXBAD
"RTN","VDEFQM",55,0)
 . S MSTEXT="Invalid Name/Value Pair"
"RTN","VDEFQM",56,0)
 S SUBTYPE=$P($P(PAIR,U),"=",2),NVPIEN=$P($P(PAIR,U,2),"=",2)
"RTN","VDEFQM",57,0)
 ;
"RTN","VDEFQM",58,0)
 ; Validate the Subtype
"RTN","VDEFQM",59,0)
 S SUBIEN=$$FIND1^DIC(577.4,"","BX",SUBTYPE)
"RTN","VDEFQM",60,0)
 I 'SUBIEN S MSTEXT="Invalid VDEF Subtype" G EXBAD
"RTN","VDEFQM",61,0)
 ;
"RTN","VDEFQM",62,0)
 ; Validate the HL7 Message and Event Types
"RTN","VDEFQM",63,0)
 S MESIEN=$$FIND1^DIC(771.2,"","BX",MSTY)
"RTN","VDEFQM",64,0)
 I 'MESIEN S MSTEXT="Invalid HL7 Message Type" G EXBAD
"RTN","VDEFQM",65,0)
 S EVTYIEN=$$FIND1^DIC(779.001,,"BX",EVTY)
"RTN","VDEFQM",66,0)
 I 'EVTYIEN S MSTEXT="Invalid HL7 Event Type" G EXBAD
"RTN","VDEFQM",67,0)
 ;
"RTN","VDEFQM",68,0)
 ; Validate the VDEF Event
"RTN","VDEFQM",69,0)
 S EVENTIEN=$O(^VDEFHL7(577,"BB",MESIEN,EVTYIEN,SUBIEN,""))
"RTN","VDEFQM",70,0)
 I 'EVENTIEN S MSTEXT="Invalid 'Message Type-Event Type-Subtype'" G EXBAD
"RTN","VDEFQM",71,0)
 ;
"RTN","VDEFQM",72,0)
 ; Check if this Request is for a disabled custodial package
"RTN","VDEFQM",73,0)
 S X=$G(^VDEFHL7(577,EVENTIEN,0)),CUSTIEN=$P(X,U,9)
"RTN","VDEFQM",74,0)
 I $P($G(^VDEFHL7(579.6,+CUSTIEN,0)),U,2)="I" D  G EXBAD
"RTN","VDEFQM",75,0)
 . S MSTEXT="Custodial package disabled for this event"
"RTN","VDEFQM",76,0)
 ;
"RTN","VDEFQM",77,0)
 ; Check if this VDEF API is disabled
"RTN","VDEFQM",78,0)
 I $P(X,U,11)'="A" D  G EXBAD
"RTN","VDEFQM",79,0)
 . S MSTEXT="VDEF API "_$P(X,U,1)_" is turned off"
"RTN","VDEFQM",80,0)
 ;
"RTN","VDEFQM",81,0)
 ; Start filing request into ^VDEFHL7(579.3
"RTN","VDEFQM",82,0)
 ; Lock the queue to prevent other requests from being added to it
"RTN","VDEFQM",83,0)
 ; doesn't affect the processing of existing requests
"RTN","VDEFQM",84,0)
 L +^VDEFHL7(579.3,QUEIEN,"ADD"):10
"RTN","VDEFQM",85,0)
 E  S MSTEXT="VDEF queuing is currently unavailable" G EXBAD
"RTN","VDEFQM",86,0)
 ;
"RTN","VDEFQM",87,0)
 ; Populate the Request data (579.31) for this queue
"RTN","VDEFQM",88,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.01)=9999 ; DINUM placeholder
"RTN","VDEFQM",89,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.02)="Q"  ; Request status - "Q"ueued
"RTN","VDEFQM",90,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.03)=MSTY ; Message Type
"RTN","VDEFQM",91,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.04)=EVTY ; Event Type
"RTN","VDEFQM",92,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.06)=REQIEN ; Requestor
"RTN","VDEFQM",93,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.07)=DESTIEN ; Destination
"RTN","VDEFQM",94,0)
 D NOW^%DTC S FDA(1,579.31,"+1,"_QUEIEN_",",.08)=% ; DTS when request was added
"RTN","VDEFQM",95,0)
 S FDA(1,579.31,"+1,"_QUEIEN_",",.18)=EVENTIEN ; VDEF Event IEN
"RTN","VDEFQM",96,0)
 D UPDATE^DIE("","FDA(1)","IENROOT","ERR")
"RTN","VDEFQM",97,0)
 ;
"RTN","VDEFQM",98,0)
 ; Need ERR check added??
"RTN","VDEFQM",99,0)
 S RQIEN=$G(IENROOT(1)) ; Get the assigned Request entry IEN
"RTN","VDEFQM",100,0)
 ;
"RTN","VDEFQM",101,0)
 ; Lock this queue entry to prevent the Request Processor from
"RTN","VDEFQM",102,0)
 ; retrieving an incomplete Request
"RTN","VDEFQM",103,0)
 L +^VDEFHL7(579.3,QUEIEN,RQIEN):10
"RTN","VDEFQM",104,0)
 L -^VDEFHL7(579.3,QUEIEN,"ADD") ; Release the queue "ADD" lock
"RTN","VDEFQM",105,0)
 ;
"RTN","VDEFQM",106,0)
 ; Update the DINUM field with the IEN value for this Request
"RTN","VDEFQM",107,0)
 S FDA(1,579.31,RQIEN_","_QUEIEN_",",.01)=RQIEN D FILE^DIE("","FDA(1)","ERR(2)")
"RTN","VDEFQM",108,0)
 ; Error processing to be added here
"RTN","VDEFQM",109,0)
 ;
"RTN","VDEFQM",110,0)
 ; Set up the name value pairs multiple (579.311)
"RTN","VDEFQM",111,0)
 F I=1,2 D
"RTN","VDEFQM",112,0)
 . S FDA(1,579.311,"+"_I_","_RQIEN_","_QUEIEN_",",.01)=I
"RTN","VDEFQM",113,0)
 . S FDA(1,579.311,"+"_I_","_RQIEN_","_QUEIEN_",",.02)=$P(PAIR,U,I)
"RTN","VDEFQM",114,0)
 D UPDATE^DIE("","FDA(1)","","ERR")
"RTN","VDEFQM",115,0)
 ; Need to add error checking??
"RTN","VDEFQM",116,0)
 ;
"RTN","VDEFQM",117,0)
 ; Set up the Dynamic Adressing multiple, if passed in
"RTN","VDEFQM",118,0)
 S (I,DATA)="",CNT=0 F  S I=$O(DYNAMIC("LINKS",I)) Q:'I  D
"RTN","VDEFQM",119,0)
 . ; CNT and I may be different since the "LINKS" array may be sparse
"RTN","VDEFQM",120,0)
 . S DATA=$G(DYNAMIC("LINKS",I)),CNT=CNT+1
"RTN","VDEFQM",121,0)
 . S FDA(1,579.313,"+"_CNT_","_RQIEN_","_QUEIEN_",",.01)=I
"RTN","VDEFQM",122,0)
 . S FDA(1,579.313,"+"_CNT_","_RQIEN_","_QUEIEN_",",.02)=DATA
"RTN","VDEFQM",123,0)
 ;
"RTN","VDEFQM",124,0)
 ; File Dynamic Addressing information
"RTN","VDEFQM",125,0)
 I $D(FDA) D UPDATE^DIE("","FDA(1)","","ERR")
"RTN","VDEFQM",126,0)
 L -^VDEFHL7(579.3,QUEIEN,RQIEN) ; Release the lock on this Request
"RTN","VDEFQM",127,0)
 S MSTEXT="Message "_MSTY_", Event "_EVTY_", Subtype "_SUBTYPE_" queued for processing"
"RTN","VDEFQM",128,0)
EXIT Q 1  ; Good exit
"RTN","VDEFQM",129,0)
EXBAD Q 0  ; Bad, bad exit
"RTN","VDEFQM",130,0)
 ;
"RTN","VDEFQM",131,0)
CLEANUP ; Delete records from VDEF files before installing the VDEF KIDS package
"RTN","VDEFQM",132,0)
 K DIR S DIR(0)="Y",DIR("A")="Do you want to continue",DIR("B")="No"
"RTN","VDEFQM",133,0)
 W !,"This action will DELETE all data from VDEF globals in preparation for a KIDS install."
"RTN","VDEFQM",134,0)
 D ^DIR K DIR I Y=0 W !,"VDEF Globals not deleted." Q
"RTN","VDEFQM",135,0)
 W !,"Deleting records from VDEF globals ..."
"RTN","VDEFQM",136,0)
 N SUB S SUB="" F  S SUB=$O(^VDEFHL7(SUB)) Q:SUB=""  D
"RTN","VDEFQM",137,0)
 . S X=^VDEFHL7(SUB,0) K ^VDEFHL7(SUB) S ^VDEFHL7(SUB,0)=X
"RTN","VDEFQM",138,0)
 S SUB="" F  S SUB=$O(^VDEFOUT(SUB)) Q:SUB=""  D
"RTN","VDEFQM",139,0)
 . S X=^VDEFOUT(SUB,0) K ^VDEFOUT(SUB) S ^VDEFOUT(SUB,0)=X
"RTN","VDEFQM",140,0)
 W !,"VDEF Globals deleted."
"RTN","VDEFQM",141,0)
 Q
"RTN","VDEFQM",142,0)
 ;
"RTN","VDEFQM",143,0)
PURGEQ ; Purge all Request Queues of their entries
"RTN","VDEFQM",144,0)
 N QIEN S QIEN=0 F  S QIEN=$O(^VDEFHL7(579.3,QIEN)) Q:'QIEN  D CLEANREQ(QIEN)
"RTN","VDEFQM",145,0)
 Q
"RTN","VDEFQM",146,0)
 ;
"RTN","VDEFQM",147,0)
 ; Function to set up a Request Processor Scheduling Rule
"RTN","VDEFQM",148,0)
SCHEDULE(Q,H) ;
"RTN","VDEFQM",149,0)
 N HT,SIEN,NZ,DOW,STM,ETM
"RTN","VDEFQM",150,0)
 I $G(Q)="" Q ""
"RTN","VDEFQM",151,0)
 I $G(H)="" S H=$H
"RTN","VDEFQM",152,0)
 S DOW=H-2#7,SIEN=0,HT=0
"RTN","VDEFQM",153,0)
 F  S SIEN=$O(^VDEFHL7(579.3,Q,2,SIEN)) Q:'SIEN  D  Q:HT'=0
"RTN","VDEFQM",154,0)
 . S NZ=^VDEFHL7(579.3,Q,2,SIEN,0)
"RTN","VDEFQM",155,0)
 . Q:$P(NZ,U,2)'=DOW
"RTN","VDEFQM",156,0)
 . S STM=$P(NZ,U,4),ETM=$P(NZ,U,5)
"RTN","VDEFQM",157,0)
 . S STM=$TR(STM,":- "),STM=$E(STM,1,2)*60+$E(STM,3,4)*60+$E(STM,5,6)
"RTN","VDEFQM",158,0)
 . S ETM=$TR(ETM,":- "),ETM=$E(ETM,1,2)*60+$E(ETM,3,4)*60+$E(ETM,5,6)
"RTN","VDEFQM",159,0)
 . I $P(H,",",2)'<STM,$P(H,",",2)'>ETM S HT=$P(NZ,U,3)
"RTN","VDEFQM",160,0)
 I HT'=0 Q HT_U_(ETM-$P(H,",",2))
"RTN","VDEFQM",161,0)
 Q ""
"RTN","VDEFQM",162,0)
 ;
"RTN","VDEFQM",163,0)
TIMECK(T) N H,M,S I T?4.6N S H=+$E(T,1,2),M=+$E(T,3,4),S=+$E(T,5,6)
"RTN","VDEFQM",164,0)
 E  I T[":" S H=+$P(T,":"),M=+$P(T,":",2),S=+$P(T,":",3)
"RTN","VDEFQM",165,0)
 E  I T["-" S H=+$P(T,"-"),M=+$P(T,"-",2),S=+$P(T,"-",3)
"RTN","VDEFQM",166,0)
 E  I T[" " S H=+$P(T," "),M=+$P(T," ",2),S=+$P(T," ",3)
"RTN","VDEFQM",167,0)
 E  Q 0
"RTN","VDEFQM",168,0)
 I H<24,M<60,S<60 Q 1
"RTN","VDEFQM",169,0)
 Q 0
"RTN","VDEFQM",170,0)
 ;
"RTN","VDEFQM",171,0)
 ; Delete all entries in a given Request Queue
"RTN","VDEFQM",172,0)
CLEANREQ(Q) ;
"RTN","VDEFQM",173,0)
 N QUE S QUE=$P($G(^VDEFHL7(579.3,Q,0)),U)
"RTN","VDEFQM",174,0)
 I QUE="" W !,"Invalid queue" Q
"RTN","VDEFQM",175,0)
 K DIR S DIR(0)="Y",DIR("A")="Are you sure you want to continue",DIR("B")="No"
"RTN","VDEFQM",176,0)
 W !,"This action will delete all entries from Request Queue '"_QUE_"'."
"RTN","VDEFQM",177,0)
 D ^DIR I Y=0 W !,"Entries not deleted." Q
"RTN","VDEFQM",178,0)
 W !,"Deleting records ..."
"RTN","VDEFQM",179,0)
 N IEN S IEN=0 F  S IEN=$O(^VDEFHL7(579.3,Q,1,IEN)) Q:'IEN  D
"RTN","VDEFQM",180,0)
 . K FDA,MSG S FDA(579.31,IEN_","_Q_",",.01)="@" D FILE^DIE(,"FDA","MSG")
"RTN","VDEFQM",181,0)
 W !,"Entries deleted from "_QUE_" queue."
"RTN","VDEFQM",182,0)
 Q
"RTN","VDEFQM",183,0)
 ;
"RTN","VDEFQM",184,0)
 ; Change the status of all "C" entries in a given Request Queue to "Q"
"RTN","VDEFQM",185,0)
REQUEUE(Q) ;
"RTN","VDEFQM",186,0)
 N QUE S QUE=$P($G(^VDEFHL7(579.3,Q,0)),U)
"RTN","VDEFQM",187,0)
 I QUE="" W !,"Invalid queue" Q
"RTN","VDEFQM",188,0)
 K DIR S DIR(0)="Y",DIR("A")="Are you sure you want to continue",DIR("B")="No"
"RTN","VDEFQM",189,0)
 W !,"This action will reset all entries in the '"_QUE_"' queue to 'Q'ueued."
"RTN","VDEFQM",190,0)
 D ^DIR I Y=0 W !,"Entries not reset." Q
"RTN","VDEFQM",191,0)
 N FDA,IEN,MSG S IEN=""
"RTN","VDEFQM",192,0)
 F  S IEN=$O(^VDEFHL7(579.3,"C","C",Q,IEN)) Q:'IEN  D
"RTN","VDEFQM",193,0)
 . K ^VDEFHL7(579.3,Q,1,IEN,"ERRMSG")
"RTN","VDEFQM",194,0)
 . K FDA,MSG S FDA(579.31,IEN_","_Q_",",.02)="Q"
"RTN","VDEFQM",195,0)
 . D FILE^DIE(,"FDA","MSG")
"RTN","VDEFQM",196,0)
 W !,"Entries reset to 'Q'ueued status."
"RTN","VDEFQM",197,0)
 Q
"RTN","VDEFREQ")
0^24^B29489552
"RTN","VDEFREQ",1,0)
VDEFREQ ;INTEGIC/AM & BPOIFO/JG- VDEF Request Processor; 21 Dec 2004  11:23 AM
"RTN","VDEFREQ",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFREQ",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFREQ",4,0)
 ;
"RTN","VDEFREQ",5,0)
 Q  ; No bozos
"RTN","VDEFREQ",6,0)
 ;
"RTN","VDEFREQ",7,0)
EN ; Main entry point for the Request Queue processor
"RTN","VDEFREQ",8,0)
 ;
"RTN","VDEFREQ",9,0)
 ; Input parameter:
"RTN","VDEFREQ",10,0)
 ;   QIEN - Request Queue IEN passed in by TaskMan
"RTN","VDEFREQ",11,0)
 ;
"RTN","VDEFREQ",12,0)
 ; Output parameters:
"RTN","VDEFREQ",13,0)
 ;   ZTSTOP - flag indicating whether to stop processing: 0 by default
"RTN","VDEFREQ",14,0)
 ;    1 if an outside request to stop the Processor
"RTN","VDEFREQ",15,0)
 ;    2 if VistA HL7 API errored out
"RTN","VDEFREQ",16,0)
 ;   ZTREQ  - Tells the Submanager to delete this task's record if "@"
"RTN","VDEFREQ",17,0)
 ;
"RTN","VDEFREQ",18,0)
 ; Check if there has been a request to stop processing
"RTN","VDEFREQ",19,0)
 S ZTSTOP=0 I $$S^%ZTLOAD() S ZTSTOP=1 G EXIT
"RTN","VDEFREQ",20,0)
 ;
"RTN","VDEFREQ",21,0)
 N DSTDATA,DSTIEN,ERR,FDA,NVPIEN,QUEUE,SCHED,IEN
"RTN","VDEFREQ",22,0)
 ; Retrieve queue data
"RTN","VDEFREQ",23,0)
 S QUEUE=$G(^VDEFHL7(579.3,QIEN,0))
"RTN","VDEFREQ",24,0)
 ; If this Request Queue is suspended, quit without resubmitting
"RTN","VDEFREQ",25,0)
 I $P(QUEUE,U,9)="S" G EXIT
"RTN","VDEFREQ",26,0)
 ;
"RTN","VDEFREQ",27,0)
 ; Get Time Rules if any
"RTN","VDEFREQ",28,0)
 S SCHED=$$SCHEDULE^VDEFQM(QIEN,$H)
"RTN","VDEFREQ",29,0)
 ;
"RTN","VDEFREQ",30,0)
 ;  Resubmit the processor for subsequent execution
"RTN","VDEFREQ",31,0)
 D
"RTN","VDEFREQ",32,0)
 . N QNAME,ZTDESC,ZTDTH,ZTIO,ZTPRI,ZTSAVE,ZTRTN,ZTSK
"RTN","VDEFREQ",33,0)
 . S QNAME=$P(QUEUE,U,1),ZTRTN="EN^VDEFREQ"
"RTN","VDEFREQ",34,0)
 . S ZTIO="",ZTDESC="VDEF Request Processor for "_QNAME,ZTPRI=""
"RTN","VDEFREQ",35,0)
 . S ZTSAVE("QIEN")=QIEN
"RTN","VDEFREQ",36,0)
 . ;
"RTN","VDEFREQ",37,0)
 . ; Queue-specific rescheduling delay
"RTN","VDEFREQ",38,0)
 . S ZTDTH=$$FUTURE^VDEFUTIL($P(QUEUE,U,2))
"RTN","VDEFREQ",39,0)
 . ;
"RTN","VDEFREQ",40,0)
 . ; If current time is in a Stop Rule, set startup to next start time
"RTN","VDEFREQ",41,0)
 . I $P(SCHED,U)="S" S ZTDTH=$$FUTURE^VDEFUTIL($P(SCHED,U,2))
"RTN","VDEFREQ",42,0)
 . D ^%ZTLOAD
"RTN","VDEFREQ",43,0)
 . ;
"RTN","VDEFREQ",44,0)
 . I '$G(ZTSK) D ALERT^VDEFUTIL("VDEF Request Processor for "_$E(QNAME,1,35)_" failed to start") Q
"RTN","VDEFREQ",45,0)
 . S FDA(1,579.3,QIEN_",",.08)=ZTSK D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFREQ",46,0)
 ;
"RTN","VDEFREQ",47,0)
 ; Quit if current time is within a rule to stop
"RTN","VDEFREQ",48,0)
 I $P(SCHED,U)="S" G EXIT
"RTN","VDEFREQ",49,0)
 ; Lock the Request Queue from other processors
"RTN","VDEFREQ",50,0)
 L +^VDEFHL7(579.3,QIEN,0):1
"RTN","VDEFREQ",51,0)
 I '$T G EXIT
"RTN","VDEFREQ",52,0)
 ;
"RTN","VDEFREQ",53,0)
 ; Update the Request Queue definition with the current task #
"RTN","VDEFREQ",54,0)
 K FDA S FDA(1,579.3,QIEN_",",.11)=ZTSK D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFREQ",55,0)
 ;
"RTN","VDEFREQ",56,0)
 ; Store VDEF Destination data in a local array
"RTN","VDEFREQ",57,0)
 S DSTIEN=0 F  S DSTIEN=$O(^VDEFHL7(579.2,DSTIEN)) Q:'DSTIEN  D
"RTN","VDEFREQ",58,0)
 . S DSTDATA(DSTIEN)=$G(^VDEFHL7(579.2,DSTIEN,0))
"RTN","VDEFREQ",59,0)
 ;
"RTN","VDEFREQ",60,0)
 ; Loop through the Queued Up requests for this queue
"RTN","VDEFREQ",61,0)
 S IEN=0 F  S IEN=$O(^VDEFHL7(579.3,"C","Q",QIEN,IEN)) Q:IEN=""  D  Q:ZTSTOP
"RTN","VDEFREQ",62,0)
 . ; Check if there has been a request to stop processing
"RTN","VDEFREQ",63,0)
 . I $$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","VDEFREQ",64,0)
 . I $P($G(^VDEFHL7(579.3,QIEN,0)),U,9)="S" S ZTSTOP=1 Q
"RTN","VDEFREQ",65,0)
 . N ARR,DST,DSTPROT,DSTQUE,DSTTYP,DYNAMIC,END,ERR,SITEPARM
"RTN","VDEFREQ",66,0)
 . N EVTYPE,FDA,VDEFHL,HLA,HLCS,IEN577,IENS,II,MESTYPE
"RTN","VDEFREQ",67,0)
 . N NAMEVAL,OUTPUT,PAIR,REQUEST,START,SUBT,TESTMODE,VAL
"RTN","VDEFREQ",68,0)
 . S IENS=IEN_","_QIEN_"," ; Request Queue IEN string
"RTN","VDEFREQ",69,0)
 . L +^VDEFHL7(579.3,QIEN,IEN)
"RTN","VDEFREQ",70,0)
 . M VAL=^VDEFHL7(579.3,QIEN,1,IEN) S REQUEST=$G(VAL(0))
"RTN","VDEFREQ",71,0)
 . M NAMEVAL=VAL(.05) ; Name Value pairs
"RTN","VDEFREQ",72,0)
 . M DYNAMIC=VAL(.19) ; Dynamic Addressing information
"RTN","VDEFREQ",73,0)
 . K VAL
"RTN","VDEFREQ",74,0)
 . L -^VDEFHL7(579.3,QIEN,IEN)
"RTN","VDEFREQ",75,0)
 . ; Check for an incomplete or corrupt record
"RTN","VDEFREQ",76,0)
 . I '$D(NAMEVAL(1)) D STATUS^VDEFREQ1(IENS,"E"),ERR("Corrupt Record") Q
"RTN","VDEFREQ",77,0)
 . ;
"RTN","VDEFREQ",78,0)
 . ; Change request status from "Q"ueued Up to "C"hecked Out
"RTN","VDEFREQ",79,0)
 . S FDA(1,579.31,IENS,.02)="C" D FILE^DIE("","FDA(1)") K FDA
"RTN","VDEFREQ",80,0)
 . ;
"RTN","VDEFREQ",81,0)
 . ; Get the Event Subtype
"RTN","VDEFREQ",82,0)
 . S SUBT="",PAIR=$P($G(NAMEVAL(1,0)),U,2)
"RTN","VDEFREQ",83,0)
 . I $P(PAIR,"=",1)="SUBTYPE" S SUBT=$P(PAIR,"=",2)
"RTN","VDEFREQ",84,0)
 . E  D ERR("Subtype missing from Name/Value Pair") S ZTSTOP=1 Q
"RTN","VDEFREQ",85,0)
 . ;
"RTN","VDEFREQ",86,0)
 . ; Get the VistA data file IEN
"RTN","VDEFREQ",87,0)
 . S NVPIEN="",PAIR=$P($G(NAMEVAL(2,0)),U,2)
"RTN","VDEFREQ",88,0)
 . I $P(PAIR,"=",1)="IEN" S NVPIEN=$P(PAIR,"=",2)
"RTN","VDEFREQ",89,0)
 . E  D ERR("IEN missing from Name/Value Pair") S ZTSTOP=1 Q
"RTN","VDEFREQ",90,0)
 . ;
"RTN","VDEFREQ",91,0)
 . ; Retrieve the Destination information for this request
"RTN","VDEFREQ",92,0)
 . S DSTIEN=$P(REQUEST,U,7),DSTTYP=$P($G(DSTDATA(+DSTIEN)),U,2)
"RTN","VDEFREQ",93,0)
 . ;
"RTN","VDEFREQ",94,0)
 . ; Get the VDEF Event IEN
"RTN","VDEFREQ",95,0)
 . S IEN577=$P(REQUEST,U,18)
"RTN","VDEFREQ",96,0)
 . ;
"RTN","VDEFREQ",97,0)
 . ; Get the VISTA HL7 Protocol
"RTN","VDEFREQ",98,0)
 . S DSTPROT=$P($G(^VDEFHL7(577,IEN577,0)),U,7)
"RTN","VDEFREQ",99,0)
 . I DSTPROT="" D ERR("Protocol not defined in VDEF event file") S ZTSTOP=1 Q
"RTN","VDEFREQ",100,0)
 . ;
"RTN","VDEFREQ",101,0)
 . ; Create delimiter structure to use when building segments
"RTN","VDEFREQ",102,0)
 . D INIT^HLFNC2(DSTPROT,.VDEFHL)
"RTN","VDEFREQ",103,0)
 . I '$D(VDEFHL) D ERR("No HL7 parameters for this Protocol") S ZTSTOP=1 Q
"RTN","VDEFREQ",104,0)
 . S HLCS=$E(VDEFHL("ECH")) M HL=VDEFHL ; Some called routines use 'HL' array
"RTN","VDEFREQ",105,0)
 . ;
"RTN","VDEFREQ",106,0)
 . ; Get the site parameters
"RTN","VDEFREQ",107,0)
 . S SITEPARM=$$PARAM^HLCS2
"RTN","VDEFREQ",108,0)
 . ;
"RTN","VDEFREQ",109,0)
 . ; If no IEN don't generate an HL7 message
"RTN","VDEFREQ",110,0)
 . I $G(NVPIEN)="" D STATUS^VDEFREQ1(IENS,"P"),ERR("Invalid IEN") S ZTSTOP=1 Q
"RTN","VDEFREQ",111,0)
 . D NOW^%DTC S FDA(1,579.31,IENS,.09)=%
"RTN","VDEFREQ",112,0)
 . ;
"RTN","VDEFREQ",113,0)
 . ; Update this Request record with the current DTS
"RTN","VDEFREQ",114,0)
 . D FILE^DIE("","FDA(1)","ERR(1)") K FDA
"RTN","VDEFREQ",115,0)
 . ;
"RTN","VDEFREQ",116,0)
 . ; Generate HL7 message for this request
"RTN","VDEFREQ",117,0)
 . D GENERATE^VDEFREQ1(NVPIEN,.HLA,HLCS,IEN577,SUBT,DSTPROT,DSTTYP,.ZTSTOP,.VDEFHL,.DYNAMIC)
"RTN","VDEFREQ",118,0)
 . ;
"RTN","VDEFREQ",119,0)
 . ; Update request status from Checked Out to Processed or Errored Out
"RTN","VDEFREQ",120,0)
 . ; Leave Request Checked Out if VistA HL7 errored out (ZTSTOP=2)
"RTN","VDEFREQ",121,0)
 . I ZTSTOP'=2 D STATUS^VDEFREQ1(IENS,$S(ZTSTOP=1:"E",1:"P")) S ZTSTOP=0
"RTN","VDEFREQ",122,0)
 . I ZTSTOP=2 S ZTSTOP=0 ; If VistA HL7 errored out, continue processing
"RTN","VDEFREQ",123,0)
 ;
"RTN","VDEFREQ",124,0)
EXIT L -^VDEFHL7(579.3,QIEN,0)
"RTN","VDEFREQ",125,0)
 S ZTREQ="@" ; Tell the Submanager to delete this task's record
"RTN","VDEFREQ",126,0)
 Q
"RTN","VDEFREQ",127,0)
 ;
"RTN","VDEFREQ",128,0)
ERR(TEXT) ; Error processing
"RTN","VDEFREQ",129,0)
 N FDA,ERR S FDA(1,579.31,IENS,.17)=$TR(TEXT,"^")
"RTN","VDEFREQ",130,0)
 D FILE^DIE("","FDA(1)","ERR")
"RTN","VDEFREQ",131,0)
 Q
"RTN","VDEFREQ1")
0^25^B3650921
"RTN","VDEFREQ1",1,0)
VDEFREQ1 ;INTEGIC/AM & BPOIFO/JG - VDEF Request Processor 2; 21 Dec 2004  11:24 AM
"RTN","VDEFREQ1",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFREQ1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFREQ1",4,0)
 ;
"RTN","VDEFREQ1",5,0)
 ; IA's: #4316 - Lookup to file #869.3
"RTN","VDEFREQ1",6,0)
 ;
"RTN","VDEFREQ1",7,0)
 Q  ; No bozos
"RTN","VDEFREQ1",8,0)
 ;
"RTN","VDEFREQ1",9,0)
 ; Generate HL7 message
"RTN","VDEFREQ1",10,0)
GENERATE(NVPIEN,HLA,HLCS,IEN577,SUBT,DSTPROT,DSTTYP,ZTSTOP,VDEFHL,DYNAMIC) ;
"RTN","VDEFREQ1",11,0)
 N CNT,ARYTYP,HLL,II,VDEFOPT,VDEFRES,EXTPRG
"RTN","VDEFREQ1",12,0)
 ;
"RTN","VDEFREQ1",13,0)
 ; Build the HLL("LINKS") array for VistA HL7 Dynamic Addressing from
"RTN","VDEFREQ1",14,0)
 ; the DYNAMIC array
"RTN","VDEFREQ1",15,0)
 F II=0:0 S II=$O(DYNAMIC(II)) Q:'II  D
"RTN","VDEFREQ1",16,0)
 . N SUB S SUB=$G(DYNAMIC(II,0)) I SUB="" Q
"RTN","VDEFREQ1",17,0)
 . S HLL("LINKS",SUB)=$G(DYNAMIC(II,1))
"RTN","VDEFREQ1",18,0)
 ;
"RTN","VDEFREQ1",19,0)
 ; Set up control part of MSH for VistA HL7
"RTN","VDEFREQ1",20,0)
 S VDEFOPT("CONTPTR")=HLCS_HLCS_HLCS_SUBT
"RTN","VDEFREQ1",21,0)
 ;
"RTN","VDEFREQ1",22,0)
 ; Check to see if message extraction is active for this event
"RTN","VDEFREQ1",23,0)
 S EXTPRG=$$GET1^DIQ(577,IEN577_",",.3) S:EXTPRG="" EXTPRG="INACTIVE"
"RTN","VDEFREQ1",24,0)
 I EXTPRG="INACTIVE" D ERR^VDEFREQ("VDEF Event is not active") S ZTSTOP=1 Q
"RTN","VDEFREQ1",25,0)
 ;
"RTN","VDEFREQ1",26,0)
 ; Call the extraction program as a function and quit if error returned (ZTSTOP)
"RTN","VDEFREQ1",27,0)
 S ZTSTOP=0,@("ARYTYP=$$EN^"_EXTPRG_"(IEN577,NVPIEN,DSTTYP,.HLA,VDEFOPT(""CONTPTR""))")
"RTN","VDEFREQ1",28,0)
 K OUT Q:ZTSTOP'=0
"RTN","VDEFREQ1",29,0)
 ;
"RTN","VDEFREQ1",30,0)
 ; Send to VistA HL7, stop processing if error from HL7
"RTN","VDEFREQ1",31,0)
 D GENERATE^HLMA(DSTPROT,$P(ARYTYP,U,1),1,.VDEFRES)
"RTN","VDEFREQ1",32,0)
 I $P($G(VDEFRES),U,2) D ERR^VDEFREQ("VistA HL7 Error: "_$P(VDEFRES,U,3)) S ZTSTOP=2 Q
"RTN","VDEFREQ1",33,0)
 ;
"RTN","VDEFREQ1",34,0)
 ; Update date/time message created
"RTN","VDEFREQ1",35,0)
 D NOW^%DTC S FDA(1,579.31,IENS,.1)=% D FILE^DIE("","FDA(1)","ERR(1)") K FDA
"RTN","VDEFREQ1",36,0)
 I 'ZTSTOP,'$$S^%ZTLOAD(),$$GET1^DIQ(579.3,QIEN_",",.09,"I")'="S" Q
"RTN","VDEFREQ1",37,0)
 S ZTSTOP=1
"RTN","VDEFREQ1",38,0)
 Q
"RTN","VDEFREQ1",39,0)
 ;
"RTN","VDEFREQ1",40,0)
 ; Update statue of request
"RTN","VDEFREQ1",41,0)
STATUS(IENS,STATUS) ;
"RTN","VDEFREQ1",42,0)
 ; If the status is to be changed to "P"rocessed, update related DTS
"RTN","VDEFREQ1",43,0)
 N FDA I STATUS="P" D NOW^%DTC S FDA(1,579.31,IENS,.13)=%
"RTN","VDEFREQ1",44,0)
 S FDA(1,579.31,IENS,.02)=STATUS D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFREQ1",45,0)
 Q
"RTN","VDEFUTIL")
0^31^B4358238
"RTN","VDEFUTIL",1,0)
VDEFUTIL ;INTEGIC/AM & BPOIFO/JG- VDEF utilities repository ; 21 Dec 2004  11:28 AM
"RTN","VDEFUTIL",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFUTIL",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFUTIL",4,0)
 ;
"RTN","VDEFUTIL",5,0)
 Q  ; No bozos
"RTN","VDEFUTIL",6,0)
 ;
"RTN","VDEFUTIL",7,0)
FUTURE(WAKEUP) ;
"RTN","VDEFUTIL",8,0)
 ; Function that calculates $H date/time a WAKEUP number of
"RTN","VDEFUTIL",9,0)
 ; seconds in the future
"RTN","VDEFUTIL",10,0)
 ; Calculate the time WAKEUP number of seconds in the future as
"RTN","VDEFUTIL",11,0)
 ; expressed in the number of seconds since 1840
"RTN","VDEFUTIL",12,0)
 N X S X=$H,X=$P(X,",",1)*86400+$P(X,",",2)+WAKEUP
"RTN","VDEFUTIL",13,0)
 ; Convert the time from the number of seconds since 1840 to $H format
"RTN","VDEFUTIL",14,0)
 Q X\86400_","_(X#86400)
"RTN","VDEFUTIL",15,0)
 ;
"RTN","VDEFUTIL",16,0)
 ; Function to calculate the number of seconds between two dates
"RTN","VDEFUTIL",17,0)
DIFF(FIRST,SECOND) ;
"RTN","VDEFUTIL",18,0)
 N X
"RTN","VDEFUTIL",19,0)
 ; Convert the dates from Fileman to $H format if necessary
"RTN","VDEFUTIL",20,0)
 I FIRST?.E1".".E S X=FIRST D H^%DTC S FIRST=%H_","_%T
"RTN","VDEFUTIL",21,0)
 I SECOND?.E1".".E S X=SECOND D H^%DTC S SECOND=%H_","_%T
"RTN","VDEFUTIL",22,0)
 ;
"RTN","VDEFUTIL",23,0)
 ; Convert $H date/time values to the number of seconds since 1840
"RTN","VDEFUTIL",24,0)
 S FIRST=$P(FIRST,",",1)*86400+$P(FIRST,",",2)
"RTN","VDEFUTIL",25,0)
 S SECOND=$P(SECOND,",",1)*86400+$P(SECOND,",",2)
"RTN","VDEFUTIL",26,0)
 ; Return the number of seconds between the two dates
"RTN","VDEFUTIL",27,0)
 Q SECOND-FIRST
"RTN","VDEFUTIL",28,0)
 ;
"RTN","VDEFUTIL",29,0)
ALERT(XQAMSG) ;
"RTN","VDEFUTIL",30,0)
 ; Subroutine to send an Alert message to the VISTA HL7 IRM
"RTN","VDEFUTIL",31,0)
 ; Input Parameters:
"RTN","VDEFUTIL",32,0)
 ;      XQAMSG - Text of the message to send to the Vista HL7 IRM
"RTN","VDEFUTIL",33,0)
 ;
"RTN","VDEFUTIL",34,0)
 N ALERTS,XQA,XQASUPV
"RTN","VDEFUTIL",35,0)
 ; Retrieve the Mailman Group to send VDEF alerts to.
"RTN","VDEFUTIL",36,0)
 S XQA("G."_$$GET1^DIQ(869.3,"1,",".05"))=""
"RTN","VDEFUTIL",37,0)
 ;
"RTN","VDEFUTIL",38,0)
 ; Forward to the supervisor if the alert is unread for 1 day
"RTN","VDEFUTIL",39,0)
 S XQASUPV=1 D SETUP^XQALERT
"RTN","VDEFUTIL",40,0)
 Q
"RTN","VDEFUTIL",41,0)
 ;
"RTN","VDEFUTIL",42,0)
TIMEI(T) ;
"RTN","VDEFUTIL",43,0)
 N TIME,CH,F,I,D,H,M,S,NUM,DONE
"RTN","VDEFUTIL",44,0)
 S TIME="",NUM="",DONE=0,F="DHMS",T=T_" "
"RTN","VDEFUTIL",45,0)
 F I=1:1:$L(T) S CH=$E(T,I) D  Q:DONE
"RTN","VDEFUTIL",46,0)
 . I CH?1.N S NUM=NUM*10+$E(T,I) Q
"RTN","VDEFUTIL",47,0)
 . I CH=" ",NUM="" Q
"RTN","VDEFUTIL",48,0)
 . I CH=" " S CH=$E(F)
"RTN","VDEFUTIL",49,0)
 . I NUM="" S DONE=1 Q
"RTN","VDEFUTIL",50,0)
 . I CH="D" S D=NUM,NUM="",F=$P(F,CH,2) Q
"RTN","VDEFUTIL",51,0)
 . I CH="H" S H=NUM,NUM="",F=$P(F,CH,2) S:H>24 DONE=1 Q
"RTN","VDEFUTIL",52,0)
 . I CH="M" S M=NUM,NUM="",F=$P(F,CH,2) S:M>60 DONE=1 Q
"RTN","VDEFUTIL",53,0)
 . I CH="S" S S=NUM,NUM="",F=$P(F,CH,2) S:S>60 DONE=1 Q
"RTN","VDEFUTIL",54,0)
 . S DONE=1 W "*",CH,"*"
"RTN","VDEFUTIL",55,0)
 I DONE Q ""
"RTN","VDEFUTIL",56,0)
 ;W !,$G(D),"D ",$G(H),"H ",$G(M),"M ",$G(S),"S",!
"RTN","VDEFUTIL",57,0)
 S TIME=TIME+($G(D)*86400)+($G(H)*3600)+($G(M)*60)+$G(S)
"RTN","VDEFUTIL",58,0)
 Q TIME
"RTN","VDEFUTIL",59,0)
 ;
"RTN","VDEFUTIL",60,0)
TIMEE(T) ;
"RTN","VDEFUTIL",61,0)
 N TIME S TIME=""
"RTN","VDEFUTIL",62,0)
 I T'<86400 S TIME=TIME_(T\86400)_"D ",T=T#86400
"RTN","VDEFUTIL",63,0)
 I T'<3600 S TIME=TIME_(T\3600)_"H ",T=T#3600
"RTN","VDEFUTIL",64,0)
 I T'<60 S TIME=TIME_(T\60)_"M ",T=T#60
"RTN","VDEFUTIL",65,0)
 I T>0 S TIME=TIME_T_"S "
"RTN","VDEFUTIL",66,0)
 S TIME=$E(TIME,1,$L(TIME)-1)
"RTN","VDEFUTIL",67,0)
 Q TIME
"RTN","VDEFVU")
0^42^B13705721
"RTN","VDEFVU",1,0)
VDEFVU ;BPOIFO/JG - VDEF Application Package Support; ; 21 Dec 2004  11:28 AM
"RTN","VDEFVU",2,0)
 ;;1.00;VDEF;;Dec 17, 2004
"RTN","VDEFVU",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","VDEFVU",4,0)
 ;
"RTN","VDEFVU",5,0)
 Q  ; No Bozos
"RTN","VDEFVU",6,0)
 ;
"RTN","VDEFVU",7,0)
 ; KIDS Environment Check API
"RTN","VDEFVU",8,0)
ENVCHK I $G(XPDENV)="" S ERRMSG="Must be run as a KIDS Environment Check." G KIDSABRT
"RTN","VDEFVU",9,0)
 Q:$T(QUEUE^VDEFQM)'=""
"RTN","VDEFVU",10,0)
 S ERRMSG="VDEF must be installed before this patch." G KIDSABRT
"RTN","VDEFVU",11,0)
 Q
"RTN","VDEFVU",12,0)
 ;
"RTN","VDEFVU",13,0)
 ; KIDS Post-Install Application API
"RTN","VDEFVU",14,0)
 ; Creates application specific entries in files #577 and #579.6
"RTN","VDEFVU",15,0)
POSTKID(MSGTYP,EVNTYP,SUBTYP,PROTO,CUSTPKG,EXTROUT,EVDESC,SUBDESC,KIDABORT) ;
"RTN","VDEFVU",16,0)
 I $G(XPDNM)="" S ERRMSG="Must be run as a KIDS Post-Install process." G KIDSABRT
"RTN","VDEFVU",17,0)
 ;
"RTN","VDEFVU",18,0)
 ; Inputs: (All are required except SUBDESC which is only required
"RTN","VDEFVU",19,0)
 ;         when a new SUBTYP is being passed in)
"RTN","VDEFVU",20,0)
 ;    MSGTYP - HL7 message type
"RTN","VDEFVU",21,0)
 ;    EVNTYP - HL7 event type
"RTN","VDEFVU",22,0)
 ;    SUBTYP - VDEF Event subtype
"RTN","VDEFVU",23,0)
 ;    PROTO - VistA HL7 Event Driver Protocol Name
"RTN","VDEFVU",24,0)
 ;    CUSTPKG - Custodial Package Name
"RTN","VDEFVU",25,0)
 ;    EXTROUT - VDEF Message Extraction Program
"RTN","VDEFVU",26,0)
 ;    EVDESC - Event description
"RTN","VDEFVU",27,0)
 ;    SUBDESC - Subtype description if new subtype (optional)
"RTN","VDEFVU",28,0)
 ;
"RTN","VDEFVU",29,0)
 ; Outputs: None
"RTN","VDEFVU",30,0)
 ;
"RTN","VDEFVU",31,0)
 N FDA,ERRMSG,ERR,DATA,VAL,MSGIEN,EVNIEN,CUSTIEN,CUSTIENV,SUBIEN,PROTIEN
"RTN","VDEFVU",32,0)
 N IEN577,FDA,X,NEWSUB
"RTN","VDEFVU",33,0)
 ;
"RTN","VDEFVU",34,0)
 ; Validate all the inputs
"RTN","VDEFVU",35,0)
 I $G(MSGTYP)="" S ERRMSG="HL7 Message Type missing" G KIDSABRT
"RTN","VDEFVU",36,0)
 I $G(EVNTYP)="" S ERRMSG="HL7 Event Type missing" G KIDSABRT
"RTN","VDEFVU",37,0)
 I $G(SUBTYP)="" S ERRMSG="VDEF event subtype missing" G KIDSABRT
"RTN","VDEFVU",38,0)
 I $G(PROTO)="" S ERRMSG="VistA HL7 Event Driver Protocol missing" G KIDSABRT
"RTN","VDEFVU",39,0)
 I $G(CUSTPKG)="" S ERRMSG="Application's custodial package missing" G KIDSABRT
"RTN","VDEFVU",40,0)
 I $G(EXTROUT)="" S ERRMSG="VDEF message extraction program missing" G KIDSABRT
"RTN","VDEFVU",41,0)
 S X=EXTROUT D RTNVAL^VDEFEL
"RTN","VDEFVU",42,0)
 I $G(X)="" S ERRMSG="Not a valid VDEF message extraction program" G KIDSABRT
"RTN","VDEFVU",43,0)
 I $G(EVDESC)="" S ERRMSG="Event description missing" G KIDSABRT
"RTN","VDEFVU",44,0)
 S MSGIEN=$$FIND1^DIC(771.2,"","BX",MSGTYP)
"RTN","VDEFVU",45,0)
 I 'MSGIEN S ERRMSG="Invalid HL7 Message Type" G KIDSABRT
"RTN","VDEFVU",46,0)
 S EVNIEN=$$FIND1^DIC(779.001,"","BX",EVNTYP)
"RTN","VDEFVU",47,0)
 I 'EVNIEN S ERRMSG="Invalid HL7 Event Type" G KIDSABRT
"RTN","VDEFVU",48,0)
 S SUBIEN=$$FIND1^DIC(577.4,"","BX",SUBTYP),NEWSUB='SUBIEN
"RTN","VDEFVU",49,0)
 I NEWSUB,$G(SUBDESC)="" S ERRMSG="New Subtype requires a description" G KIDSABRT
"RTN","VDEFVU",50,0)
 S PROTIEN=$$FIND1^DIC(101,"","BX",PROTO)
"RTN","VDEFVU",51,0)
 I 'PROTIEN S ERRMSG="Invalid VistA HL7 Protocol" G KIDSABRT
"RTN","VDEFVU",52,0)
 S CUSTIEN=$$FIND1^DIC(9.4,"","BX",CUSTPKG)
"RTN","VDEFVU",53,0)
 I 'CUSTIEN S ERRMSG="Invalid Custodial Package" G KIDSABRT
"RTN","VDEFVU",54,0)
 ;
"RTN","VDEFVU",55,0)
 ; Add custodial pkg. to VDEF Custodial Package file #579.6 if new
"RTN","VDEFVU",56,0)
 S ERRMSG="",CUSTIENV=$$FIND1^DIC(579.6,"","BX",CUSTPKG)
"RTN","VDEFVU",57,0)
 I CUSTIENV=0 D
"RTN","VDEFVU",58,0)
 . K FDA,ERR
"RTN","VDEFVU",59,0)
 . S FDA(579.6,"+1,",.01)=CUSTIEN,FDA(579.6,"+1,",.02)="I"
"RTN","VDEFVU",60,0)
 . D UPDATE^DIE("","FDA","CUSTIENV","ERR")
"RTN","VDEFVU",61,0)
 . I $G(ERR("DIERR",1))>0 S ERRMSG=ERR("DIERR",1,"TEXT",1)
"RTN","VDEFVU",62,0)
 . S CUSTIENV=CUSTIENV(1) K CUSTIENV(1)
"RTN","VDEFVU",63,0)
 G KIDSABRT:ERRMSG'=""
"RTN","VDEFVU",64,0)
 ;
"RTN","VDEFVU",65,0)
 ; Add/update VDEF Subtype in File #577.4
"RTN","VDEFVU",66,0)
 S ERRMSG="" K FDA,ERR
"RTN","VDEFVU",67,0)
 S FDA(577.4,"?+1,",.01)=SUBTYP,FDA(577.4,"?+1,",.02)=SUBDESC
"RTN","VDEFVU",68,0)
 D UPDATE^DIE("","FDA","SUBIEN","ERR")
"RTN","VDEFVU",69,0)
 I $G(ERR("DIERR",1))>0 S ERRMSG=ERR("DIERR",1,"TEXT",1)
"RTN","VDEFVU",70,0)
 S SUBIEN=SUBIEN(1) K SUBIEN(1)
"RTN","VDEFVU",71,0)
 G KIDSABRT:ERRMSG'=""
"RTN","VDEFVU",72,0)
 ;
"RTN","VDEFVU",73,0)
 ; Add the event to the VDEF Event file #577
"RTN","VDEFVU",74,0)
 K FDA,ERR
"RTN","VDEFVU",75,0)
 S FDA(577,"?+1,",.01)=MSGTYP_"-"_EVNTYP_"-"_SUBTYP
"RTN","VDEFVU",76,0)
 S FDA(577,"?+1,",.02)=EVNIEN,FDA(577,"?+1,",.03)=SUBIEN
"RTN","VDEFVU",77,0)
 S FDA(577,"?+1,",.06)=MSGIEN,FDA(577,"?+1,",.07)=PROTIEN
"RTN","VDEFVU",78,0)
 S FDA(577,"?+1,",.09)=CUSTIENV,FDA(577,"?+1,",.2)="I"
"RTN","VDEFVU",79,0)
 S FDA(577,"?+1,",.3)=EXTROUT,FDA(577,"?+1,",1)=EVDESC
"RTN","VDEFVU",80,0)
 D UPDATE^DIE("","FDA","IEN577","ERR")
"RTN","VDEFVU",81,0)
 I $G(ERR("DIERR",1))>0 S ERRMSG=ERR("DIERR",1,"TEXT",1) G KIDSABRT
"RTN","VDEFVU",82,0)
 ;
"RTN","VDEFVU",83,0)
 ; Successful completion
"RTN","VDEFVU",84,0)
 Q
"RTN","VDEFVU",85,0)
 ;
"RTN","VDEFVU",86,0)
 ; Post-install abort
"RTN","VDEFVU",87,0)
KIDSABRT D BMES^XPDUTL(ERRMSG) S (XPDABORT,KIDABORT)=1
"RTN","VDEFVU",88,0)
 Q
"VER")
8.0^22.0
"^DD",577,577,0)
FIELD^^1^9
"^DD",577,577,0,"DDA")
N
"^DD",577,577,0,"DT")
3040909
"^DD",577,577,0,"ID",.09)
S %I=Y,Y=$S('$D(^(0)):"",$D(^VDEFHL7(579.6,+$P(^(0),U,9),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(579.6,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",577,577,0,"ID",1)
W:$D(^(1)) "   ",$P(^(1),U,1)
"^DD",577,577,0,"IX","B",577,.01)

"^DD",577,577,0,"NM","VDEF EVENT DESCRIPTION")

"^DD",577,577,0,"VRPK")
VDEF
"^DD",577,577,.01,0)
EVENT ID^RF^^0;1^K:$L(X)>13!($L(X)<12)!'(X?3A1"-"1A2N1"-"4A.1E) X
"^DD",577,577,.01,.1)
QUERY
"^DD",577,577,.01,1,0)
^.1
"^DD",577,577,.01,1,1,0)
577^B
"^DD",577,577,.01,1,1,1)
S ^VDEFHL7(577,"B",$E(X,1,30),DA)=""
"^DD",577,577,.01,1,1,2)
K ^VDEFHL7(577,"B",$E(X,1,30),DA)
"^DD",577,577,.01,3)
Answer must be 12-13 characters in length
"^DD",577,577,.01,21,0)
^.001^3^3^3040901^^
"^DD",577,577,.01,21,1,0)
The name of this VDEF Event. This MUST consist of the HL7 Message Type, 
"^DD",577,577,.01,21,2,0)
HL7 Event Type and a VDEF subtype.  Valid examples are:
"^DD",577,577,.01,21,3,0)
ORU-R01-VTLS, RDS-O13-PPAR, ADT-A01-DEMG.
"^DD",577,577,.01,"DT")
3040819
"^DD",577,577,.02,0)
EVENT TYPE^RP779.001'^HL(779.001,^0;2^Q
"^DD",577,577,.02,.1)
Event Type (such as A28 or R01)
"^DD",577,577,.02,3)
Event Type (such as A28 or R01)
"^DD",577,577,.02,21,0)
^^1^1^3030926^
"^DD",577,577,.02,21,1,0)
HL7 Event Type for this VDEF Event.
"^DD",577,577,.02,"DT")
3030926
"^DD",577,577,.03,0)
EVENT SUBTYPE^RP577.4^VDEFHL7(577.4,^0;3^Q
"^DD",577,577,.03,.1)
Event Subtype
"^DD",577,577,.03,3)

"^DD",577,577,.03,21,0)
^^1^1^3040825^
"^DD",577,577,.03,21,1,0)
The event sup-type associated with this event.
"^DD",577,577,.03,"DT")
3040825
"^DD",577,577,.06,0)
MESSAGE TYPE^P771.2'^HL(771.2,^0;6^Q
"^DD",577,577,.06,3)
Enter message type (such as ADT or ORU) for this VDEF Event
"^DD",577,577,.06,21,0)
^^1^1^3030926^
"^DD",577,577,.06,21,1,0)
Message type for this HL7 Event, such as ADT or ORU
"^DD",577,577,.06,"DT")
3030926
"^DD",577,577,.07,0)
VISTA HL7 PROTOCOL^P101^ORD(101,^0;7^Q
"^DD",577,577,.07,3)
Enter protocol associated with this event
"^DD",577,577,.07,21,0)
^^3^3^3030926^
"^DD",577,577,.07,21,1,0)
Protocol for this HL7 event.  Protocols should be in VDEF <message type> 
"^DD",577,577,.07,21,2,0)
<event type> <custodial package> VISTA SENDER format, e.g. VDEF ADT A28 
"^DD",577,577,.07,21,3,0)
DEMOGRAPHICS VISTA SENDER.
"^DD",577,577,.07,"DT")
3030926
"^DD",577,577,.09,0)
CUSTODIAL PACKAGE^P579.6'^VDEFHL7(579.6,^0;9^Q
"^DD",577,577,.09,3)
Enter Custodial Package associated with this Event
"^DD",577,577,.09,21,0)
^^1^1^3030926^
"^DD",577,577,.09,21,1,0)
Custodial package for this event, such as REGISTRATION or LAB SERVICE
"^DD",577,577,.09,"DT")
3030926
"^DD",577,577,.2,0)
API EVENT ACTIVE FLAG^RS^A:ACTIVE;I:INACTIVE;^0;11^Q
"^DD",577,577,.2,3)
Enter "A" if event should be queued or "I" if not
"^DD",577,577,.2,"DT")
3040331
"^DD",577,577,.3,0)
EXTRACTION PROGRAM^RFX^^0;12^K:$L(X)>8!($L(X)<5) X D:$D(X) RTNVAL^VDEFEL
"^DD",577,577,.3,3)
Enter "INACTIVE" if not in use yet or name of VDEF data extraction program 
"^DD",577,577,.3,21,0)
^^3^3^3040818^
"^DD",577,577,.3,21,1,0)
This field specifies the name of the program VDEF will use to extract the 
"^DD",577,577,.3,21,2,0)
data from VistA files and construct the HL7 message.  If not in use yet, 
"^DD",577,577,.3,21,3,0)
this field must be valued to "INACTIVE".
"^DD",577,577,.3,"DT")
3040818
"^DD",577,577,1,0)
EVENT DESCRIPTION^RF^^1;1^K:$L(X)>60!($L(X)<6) X
"^DD",577,577,1,3)
Answer must be 6-60 characters in length
"^DD",577,577,1,21,0)
^.001^2^2^3040901^^
"^DD",577,577,1,21,1,0)
This should describe in non-HL7 terminology what the VDEF Event is used 
"^DD",577,577,1,21,2,0)
for and what kind of message it will create.
"^DD",577,577,1,"DT")
3040909
"^DD",577.4,577.4,0)
FIELD^^.02^2
"^DD",577.4,577.4,0,"DDA")
N
"^DD",577.4,577.4,0,"DT")
3040824
"^DD",577.4,577.4,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",577.4,577.4,0,"IX","B",577.4,.01)

"^DD",577.4,577.4,0,"NM","VDEF EVENT SUBTYPES")

"^DD",577.4,577.4,0,"PT",577,.03)

"^DD",577.4,577.4,0,"PT",579.31,.18)

"^DD",577.4,577.4,.01,0)
SUBTYPE^RF^^0;1^K:$L(X)>5!($L(X)<3)!'(X'?1P.E) X
"^DD",577.4,577.4,.01,1,0)
^.1
"^DD",577.4,577.4,.01,1,1,0)
577.4^B
"^DD",577.4,577.4,.01,1,1,1)
S ^VDEFHL7(577.4,"B",$E(X,1,30),DA)=""
"^DD",577.4,577.4,.01,1,1,2)
K ^VDEFHL7(577.4,"B",$E(X,1,30),DA)
"^DD",577.4,577.4,.01,3)
Answer must be 3-5 characters in length
"^DD",577.4,577.4,.01,21,0)
^^1^1^3040901^
"^DD",577.4,577.4,.01,21,1,0)
SUBTYPE corresponds to an application domain or subdomain.  
"^DD",577.4,577.4,.01,23,0)
^^2^2^3040824^
"^DD",577.4,577.4,.01,23,1,0)
This field is concatenated with HL7 message type and HL7 Event Type to 
"^DD",577.4,577.4,.01,23,2,0)
form the "VDEF EVENT".
"^DD",577.4,577.4,.01,"DT")
3040901
"^DD",577.4,577.4,.02,0)
EVENT DESCRIPTION^RF^^0;2^K:$L(X)>40!($L(X)<10) X
"^DD",577.4,577.4,.02,3)
Answer must be 10-40 characters in length
"^DD",577.4,577.4,.02,21,0)
^^2^2^3040824^
"^DD",577.4,577.4,.02,21,1,0)
This is a description of the application trigger event that this subtype 
"^DD",577.4,577.4,.02,21,2,0)
is associated with.
"^DD",577.4,577.4,.02,"DT")
3040824
"^DD",579.1,579.1,0)
FIELD^^.05^5
"^DD",579.1,579.1,0,"DDA")
N
"^DD",579.1,579.1,0,"DT")
3040728
"^DD",579.1,579.1,0,"IX","B",579.1,.01)

"^DD",579.1,579.1,0,"IX","C",579.1,.02)

"^DD",579.1,579.1,0,"NM","VDEF REQUESTOR")

"^DD",579.1,579.1,0,"PT",579.31,.06)

"^DD",579.1,579.1,0,"VRPK")
VDEF
"^DD",579.1,579.1,.01,0)
REQUESTOR NAME^RFI^^0;1^K:$L(X)>40!($L(X)<6)!'(X'?1P.E) X
"^DD",579.1,579.1,.01,1,0)
^.1
"^DD",579.1,579.1,.01,1,1,0)
579.1^B
"^DD",579.1,579.1,.01,1,1,1)
S ^VDEFHL7(579.1,"B",$E(X,1,30),DA)=""
"^DD",579.1,579.1,.01,1,1,2)
K ^VDEFHL7(579.1,"B",$E(X,1,30),DA)
"^DD",579.1,579.1,.01,3)
Answer must be 6-40 characters in length.
"^DD",579.1,579.1,.01,21,0)
^.001^7^7^3040728^^^
"^DD",579.1,579.1,.01,21,1,0)
Name of the source of the request, aka Requestor.  Set up by the VISTA 
"^DD",579.1,579.1,.01,21,2,0)
HL7 IRM.
"^DD",579.1,579.1,.01,21,3,0)
 
"^DD",579.1,579.1,.01,21,4,0)
Identifies the logical source of a class of requests for HL7 messages. 
"^DD",579.1,579.1,.01,21,5,0)
For example, all solicited requests may be thought of as coming from one
"^DD",579.1,579.1,.01,21,6,0)
logical Requestor and all unsolicited requests would then fall under the
"^DD",579.1,579.1,.01,21,7,0)
other logical Requestor in the system.
"^DD",579.1,579.1,.01,"DT")
3040728
"^DD",579.1,579.1,.02,0)
REQUESTOR DEFAULT FLAG^RS^Y:YES;N:NO;^0;2^Q
"^DD",579.1,579.1,.02,1,0)
^.1
"^DD",579.1,579.1,.02,1,1,0)
579.1^C
"^DD",579.1,579.1,.02,1,1,1)
S ^VDEFHL7(579.1,"C",$E(X,1,30),DA)=""
"^DD",579.1,579.1,.02,1,1,2)
K ^VDEFHL7(579.1,"C",$E(X,1,30),DA)
"^DD",579.1,579.1,.02,1,1,"%D",0)
^^3^3^3021219^
"^DD",579.1,579.1,.02,1,1,"%D",1,0)
Cross-reference of Requestor entries by their Default status. Will be used 
"^DD",579.1,579.1,.02,1,1,"%D",2,0)
by the VDEF Queue Manager program to determine which queue to put a 
"^DD",579.1,579.1,.02,1,1,"%D",3,0)
request on if no Requestor was explicitly passed in.
"^DD",579.1,579.1,.02,1,1,"DT")
3021219
"^DD",579.1,579.1,.02,3)
Enter 'Y' for yes and 'N' for no.
"^DD",579.1,579.1,.02,21,0)
^^4^4^3021219^
"^DD",579.1,579.1,.02,21,1,0)
YES/NO flag indicating whether this Requestor is the default one.  Set up 
"^DD",579.1,579.1,.02,21,2,0)
by the VISTA HL7 IRM.  The VDEF Queue Manager will use this data element
"^DD",579.1,579.1,.02,21,3,0)
if no Requestor name is passed in to determine which Request Queue to put
"^DD",579.1,579.1,.02,21,4,0)
each request on.
"^DD",579.1,579.1,.02,"DT")
3021219
"^DD",579.1,579.1,.03,0)
REQUESTOR DESTINATION^RP579.2'^VDEFHL7(579.2,^0;3^Q
"^DD",579.1,579.1,.03,21,0)
^^4^4^3021219^
"^DD",579.1,579.1,.03,21,1,0)
A pointer to an entry in File 579.2. Set up by the VISTA HL7 IRM.  The 
"^DD",579.1,579.1,.03,21,2,0)
VDEF Request Processor program will use this data as the default
"^DD",579.1,579.1,.03,21,3,0)
Destination for this Requestor if no Destination is explicitly passed in
"^DD",579.1,579.1,.03,21,4,0)
or if the passed in Destination is invalid.
"^DD",579.1,579.1,.03,"DT")
3030107
"^DD",579.1,579.1,.04,0)
REQUEST QUEUE^RP579.3'^VDEFHL7(579.3,^0;4^Q
"^DD",579.1,579.1,.04,3)
Pointer to the Request file (579.3)
"^DD",579.1,579.1,.04,21,0)
^^4^4^3030926^
"^DD",579.1,579.1,.04,21,1,0)
Default Request Queue for this requestor. Set up by the VISTA 
"^DD",579.1,579.1,.04,21,2,0)
HL7 IRM. Will be used by the VDEF Queue Manager program to determine which
"^DD",579.1,579.1,.04,21,3,0)
Request Queue to add the request to if no priority is explicitly passed 
"^DD",579.1,579.1,.04,21,4,0)
in. The data in this field is a pointer to the Request Queue file (579.3).
"^DD",579.1,579.1,.04,"DT")
3030926
"^DD",579.1,579.1,.05,0)
REQUESTOR ACTIVATION FLAG^RS^A:ACTIVE;I:INACTIVE;^0;5^Q
"^DD",579.1,579.1,.05,3)
Enter "A" for Active or "I" for Inactive.
"^DD",579.1,579.1,.05,21,0)
^^5^5^3030623^
"^DD",579.1,579.1,.05,21,1,0)
HL7 ACTIVATION flag. Set up by the VISTA HL7 IRM to INACTIVE if no
"^DD",579.1,579.1,.05,21,2,0)
outbound  HL7 messages should be generated (for testing or any other
"^DD",579.1,579.1,.05,21,3,0)
reasons) and to ACTIVE if they should be generated. Used by the VDEF API
"^DD",579.1,579.1,.05,21,4,0)
program to determine whether to queue up or reject incoming requests for 
"^DD",579.1,579.1,.05,21,5,0)
this Requestor.
"^DD",579.1,579.1,.05,"DT")
3030919
"^DD",579.2,579.2,0)
FIELD^^.02^2
"^DD",579.2,579.2,0,"DDA")
N
"^DD",579.2,579.2,0,"DT")
3040823
"^DD",579.2,579.2,0,"IX","B",579.2,.01)

"^DD",579.2,579.2,0,"NM","VDEF DESTINATION")

"^DD",579.2,579.2,0,"PT",579.1,.03)

"^DD",579.2,579.2,0,"PT",579.31,.07)

"^DD",579.2,579.2,0,"VRPK")
VDEF
"^DD",579.2,579.2,.01,0)
DESTINATION NAME^RF^^0;1^K:$L(X)>40!($L(X)<1)!'(X'?1P.E) X
"^DD",579.2,579.2,.01,1,0)
^.1
"^DD",579.2,579.2,.01,1,1,0)
579.2^B
"^DD",579.2,579.2,.01,1,1,1)
S ^VDEFHL7(579.2,"B",$E(X,1,30),DA)=""
"^DD",579.2,579.2,.01,1,1,2)
K ^VDEFHL7(579.2,"B",$E(X,1,30),DA)
"^DD",579.2,579.2,.01,3)
Answer must be 1-40 characters in length
"^DD",579.2,579.2,.01,21,0)
^^1^1^3021213^^
"^DD",579.2,579.2,.01,21,1,0)
Name of the Destination that HL7 messages will be sent to.
"^DD",579.2,579.2,.01,"DT")
3021213
"^DD",579.2,579.2,.02,0)
DESTINATION TYPE^RS^V:VISTA HL7;^0;2^Q
"^DD",579.2,579.2,.02,3)
Enter 'V' for VISTA HL7.
"^DD",579.2,579.2,.02,21,0)
^^4^4^3040823^
"^DD",579.2,579.2,.02,21,1,0)
Type of this Destination. Currently the only supported value is "V" for 
"^DD",579.2,579.2,.02,21,2,0)
"VistA HL7". The VDEF Request Processor program will use this
"^DD",579.2,579.2,.02,21,3,0)
information to determine where to send HL7 messages to the VISTA HL7  
"^DD",579.2,579.2,.02,21,4,0)
package using the Destination Protocol IEN.
"^DD",579.2,579.2,.02,"DT")
3040823
"^DD",579.3,579.3,0)
FIELD^^.11^10
"^DD",579.3,579.3,0,"DDA")
N
"^DD",579.3,579.3,0,"DT")
3041004
"^DD",579.3,579.3,0,"IX","B",579.3,.01)

"^DD",579.3,579.3,0,"IX","C",579.31,.02)

"^DD",579.3,579.3,0,"NM","VDEF REQUEST QUEUE")

"^DD",579.3,579.3,0,"PT",579.1,.04)

"^DD",579.3,579.3,0,"VRPK")
VDEF
"^DD",579.3,579.3,.01,0)
REQUEST QUEUE NAME^RF^^0;1^K:$L(X)>20!($L(X)<1) X
"^DD",579.3,579.3,.01,1,0)
^.1
"^DD",579.3,579.3,.01,1,1,0)
579.3^B
"^DD",579.3,579.3,.01,1,1,1)
S ^VDEFHL7(579.3,"B",$E(X,1,30),DA)=""
"^DD",579.3,579.3,.01,1,1,2)
K ^VDEFHL7(579.3,"B",$E(X,1,30),DA)
"^DD",579.3,579.3,.01,3)
Answer must be 1-20 characters in length
"^DD",579.3,579.3,.01,21,0)
^^1^1^3030926^
"^DD",579.3,579.3,.01,21,1,0)
Name of this Request Queue that uniquely identifies it.
"^DD",579.3,579.3,.01,23,0)
^^2^2^3030926^
"^DD",579.3,579.3,.01,23,1,0)
The name of a Request Processor task in TaskMan. It will process all
"^DD",579.3,579.3,.01,23,2,0)
requests in the Request Queue that it is responsible for.
"^DD",579.3,579.3,.01,"DT")
3030926
"^DD",579.3,579.3,.02,0)
REQUEST QUEUE WAKEUP PERIOD^RFO^^0;2^S X=$$TIMEI^VDEFUTIL(X) I 'X K X
"^DD",579.3,579.3,.02,2)
S Y(0)=Y S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.02,2.1)
S Y(0)=Y S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.02,3)
Type a number between 1 and 999999999, 0 Decimal Digits
"^DD",579.3,579.3,.02,21,0)
^^2^2^3030926^
"^DD",579.3,579.3,.02,21,1,0)
Number of seconds in which this queue's Request Processor will resubmit 
"^DD",579.3,579.3,.02,21,2,0)
itself for execution.
"^DD",579.3,579.3,.02,"DT")
3030926
"^DD",579.3,579.3,.03,0)
LAST ENTRY CHECKED OUT^NJ10,0^^0;3^K:+X'=X!(X>9999999999)!(X<1)!(X?.E1"."1.N) X
"^DD",579.3,579.3,.03,3)
Type a number between 1 and 9999999999, 0 Decimal Digits
"^DD",579.3,579.3,.03,21,0)
^^1^1^3030926^
"^DD",579.3,579.3,.03,21,1,0)
IEN of the last Checked Out entry in sub-file 579.31.
"^DD",579.3,579.3,.03,"DT")
3031024
"^DD",579.3,579.3,.04,0)
ARCHIVAL PARAMETER^RNJ10,0OX^^0;4^S X=$$TIMEI^VDEFUTIL(X) I 'X K X
"^DD",579.3,579.3,.04,2)
S Y(0)=Y S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.04,2.1)
S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.04,3)
Enter time in xxD yyH zzM wwS format
"^DD",579.3,579.3,.04,21,0)
^^3^3^3030402^
"^DD",579.3,579.3,.04,21,1,0)
The minimum number of seconds an already processed entry in a Request
"^DD",579.3,579.3,.04,21,2,0)
Queue will be kept in the Queue for archival purposes before it is purged
"^DD",579.3,579.3,.04,21,3,0)
by the VDEF Monitor process.
"^DD",579.3,579.3,.04,"DT")
3030829
"^DD",579.3,579.3,.05,0)
CHECK-OUT TIME LIMIT^RNJ10,0OX^^0;5^S X=$$TIMEI^VDEFUTIL(X) I 'X K X
"^DD",579.3,579.3,.05,2)
S Y(0)=Y S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.05,2.1)
S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.3,579.3,.05,3)
Enter time in xxD yyH zzM wwS format
"^DD",579.3,579.3,.05,21,0)
^^3^3^3021213^
"^DD",579.3,579.3,.05,21,1,0)
The maximum number of seconds that the oldest Checked Out entry in this 
"^DD",579.3,579.3,.05,21,2,0)
queue can be Checked Out for before a MailMan message is sent to the
"^DD",579.3,579.3,.05,21,3,0)
VISTA HL7 IRM account or group.
"^DD",579.3,579.3,.05,23,0)
^^2^2^3021213^
"^DD",579.3,579.3,.05,23,1,0)
The background process monitoring all Request Queues is a Scheduled 
"^DD",579.3,579.3,.05,23,2,0)
Option in TaskMan and runs every 10 minutes.
"^DD",579.3,579.3,.05,"DT")
3030829
"^DD",579.3,579.3,.06,0)
REQUEST QUEUE ENTRIES^579.31^^1;0
"^DD",579.3,579.3,.08,0)
FUTURE TASKMAN TASK NUMBER^NJ9,0^^0;8^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",579.3,579.3,.08,3)
Type a Number between 1 and 999999999, 0 Decimal Digits
"^DD",579.3,579.3,.08,21,0)
^.001^2^2^3030911^^
"^DD",579.3,579.3,.08,21,1,0)
Number of the TaskMan task that was last queued up to handle this Request
"^DD",579.3,579.3,.08,21,2,0)
Queue.
"^DD",579.3,579.3,.08,"DT")
3030911
"^DD",579.3,579.3,.09,0)
SUSPENDED FLAG^RS^S:SUSPENDED;R:RUNNING;^0;9^Q
"^DD",579.3,579.3,.09,3)
Enter "S" for Suspended or "R" for Running
"^DD",579.3,579.3,.09,21,0)
^^9^9^3030926^
"^DD",579.3,579.3,.09,21,1,0)
Current status of this VDEF REquest Processor Queue. Turning the Queue 
"^DD",579.3,579.3,.09,21,2,0)
off will result in VDEF HL7 message generation for the Queue being 
"^DD",579.3,579.3,.09,21,3,0)
suspended until such time when the Queue is turned back on. NOTE: Turning 
"^DD",579.3,579.3,.09,21,4,0)
off a Request Queue will not prevent VDEF from adding requests to it. 
"^DD",579.3,579.3,.09,21,5,0)
Turning a VDEF Request Queue off for a prolonged period of time may 
"^DD",579.3,579.3,.09,21,6,0)
result in a significant number of VDEF Requests accumulating in that 
"^DD",579.3,579.3,.09,21,7,0)
Queue and causing disk space problems. If VDEF messaging is to be
"^DD",579.3,579.3,.09,21,8,0)
completely turned off for a Request Queue, the associated VDEF Requestor
"^DD",579.3,579.3,.09,21,9,0)
should be turned off via menu option VDEF (De)Activate Requestor.
"^DD",579.3,579.3,.09,"DT")
3030926
"^DD",579.3,579.3,.1,0)
REQUEST PROCESS SCHEDULE^579.32^^2;0
"^DD",579.3,579.3,.1,21,0)
^^1^1^3040901^
"^DD",579.3,579.3,.1,21,1,0)
Define time periods when the Request Processor should not run
"^DD",579.3,579.3,.1,"DT")
3040901
"^DD",579.3,579.3,.11,0)
CURRENT TASKMAN TASK NUMBER^NJ12,0^^0;11^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."1.N) X
"^DD",579.3,579.3,.11,3)
Type a number between 1 and 999999999999, 0 Decimal Digits
"^DD",579.3,579.3,.11,21,0)
^^1^1^3030926^
"^DD",579.3,579.3,.11,21,1,0)
Taskman number of the currently running Request Processor task.
"^DD",579.3,579.3,.11,"DT")
3030926
"^DD",579.3,579.31,0)
REQUEST QUEUE ENTRIES SUB-FIELD^^.17^15
"^DD",579.3,579.31,0,"DT")
3041004
"^DD",579.3,579.31,0,"IX","B",579.31,.01)

"^DD",579.3,579.31,0,"NM","REQUEST QUEUE ENTRIES")

"^DD",579.3,579.31,0,"UP")
579.3
"^DD",579.3,579.31,.01,0)
REQUEST ENTRY NUMBER^NJ10,0X^^0;1^K:+X'=X!(X>9999999999)!(X<1)!(X?.E1"."1.N) X S:$D(X) DINUM=X
"^DD",579.3,579.31,.01,1,0)
^.1^^0
"^DD",579.3,579.31,.01,1,1,0)
579.31^B
"^DD",579.3,579.31,.01,1,1,1)
S ^VDEFHL7(579.3,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",579.3,579.31,.01,1,1,2)
K ^VDEFHL7(579.3,DA(1),1,"B",$E(X,1,30),DA)
"^DD",579.3,579.31,.01,3)
Type a number between 1 and 9999999999, 0 Decimal Digits
"^DD",579.3,579.31,.01,21,0)
^.001^1^1^3031024^^^
"^DD",579.3,579.31,.01,21,1,0)
IEN of this entry in the queue.
"^DD",579.3,579.31,.01,"DT")
3030107
"^DD",579.3,579.31,.02,0)
REQUEST ENTRY STATUS^S^C:CHECKED OUT;P:PROCESSED;Q:QUEUED;E:ERRORED OUT;^0;2^Q
"^DD",579.3,579.31,.02,1,0)
^.1
"^DD",579.3,579.31,.02,1,1,0)
579.3^C
"^DD",579.3,579.31,.02,1,1,1)
S ^VDEFHL7(579.3,"C",$E(X,1,30),DA(1),DA)=""
"^DD",579.3,579.31,.02,1,1,2)
K ^VDEFHL7(579.3,"C",$E(X,1,30),DA(1),DA)
"^DD",579.3,579.31,.02,1,1,"DT")
3021219
"^DD",579.3,579.31,.02,3)
Enter "C"hecked Out or "P"rocessed or "Q"ueued or "E"rrored Out.
"^DD",579.3,579.31,.02,21,0)
^^9^9^3041004^
"^DD",579.3,579.31,.02,21,1,0)
Status of this entry in the queue: "Q" for Queued Up, "C" for Checked 
"^DD",579.3,579.31,.02,21,2,0)
Out, "P" for Processed, "E" for Errored out.
"^DD",579.3,579.31,.02,21,3,0)
 
"^DD",579.3,579.31,.02,21,4,0)
Created by the VDEF API when the entry is Queued Up, updated
"^DD",579.3,579.31,.02,21,5,0)
by the Request Processor when the entry is Checked Out and
"^DD",579.3,579.31,.02,21,6,0)
when it is Processed. This sub-file will be cross-referenced by this
"^DD",579.3,579.31,.02,21,7,0)
field. The cross-reference will be used by the VDEF Monitor to find the
"^DD",579.3,579.31,.02,21,8,0)
oldest entry checked out and then purge all entries in this Request Queue 
"^DD",579.3,579.31,.02,21,9,0)
that are older than specified by the Archival Parameter.
"^DD",579.3,579.31,.02,"DT")
3041004
"^DD",579.3,579.31,.03,0)
MESSAGE TYPE^F^^0;3^K:$L(X)>40!($L(X)<1) X
"^DD",579.3,579.31,.03,3)
Answer must be 1-40 characters in length
"^DD",579.3,579.31,.03,21,0)
^^2^2^3030926^
"^DD",579.3,579.31,.03,21,1,0)
Message Type for this Request Entry. Created by the VDEF API based on the
"^DD",579.3,579.31,.03,21,2,0)
value passed to it by the calling program.
"^DD",579.3,579.31,.03,"DT")
3030926
"^DD",579.3,579.31,.04,0)
EVENT TYPE^F^^0;4^K:$L(X)>40!($L(X)<1) X
"^DD",579.3,579.31,.04,3)
Answer must be 1-40 characters in length
"^DD",579.3,579.31,.04,21,0)
^^2^2^3030926^
"^DD",579.3,579.31,.04,21,1,0)
Event Type for this Request Entry. Created by the VDEF API based on the
"^DD",579.3,579.31,.04,21,2,0)
value passed to it by the calling program.
"^DD",579.3,579.31,.04,"DT")
3030926
"^DD",579.3,579.31,.05,0)
NAME VALUE PAIRS MULTIPLE^579.311^^.05;0
"^DD",579.3,579.31,.05,"DT")
3021213
"^DD",579.3,579.31,.06,0)
REQUESTOR^P579.1'^VDEFHL7(579.1,^0;6^Q
"^DD",579.3,579.31,.06,3)
Answer must be 1-40 characters in length
"^DD",579.3,579.31,.06,21,0)
^^3^3^3030926^
"^DD",579.3,579.31,.06,21,1,0)
Requestor IEN for this Request Entry. Created by the VDEF API based on the
"^DD",579.3,579.31,.06,21,2,0)
value passed to it by the calling program. The data in this field is a
"^DD",579.3,579.31,.06,21,3,0)
pointer to a Requestor record in file 579.1.
"^DD",579.3,579.31,.06,"DT")
3030926
"^DD",579.3,579.31,.07,0)
DESTINATION POINTER^P579.2'^VDEFHL7(579.2,^0;7^Q
"^DD",579.3,579.31,.07,3)
Answer must be 1-40 characters in length
"^DD",579.3,579.31,.07,21,0)
^^3^3^3030926^
"^DD",579.3,579.31,.07,21,1,0)
Destination for this Request Entry. Created by the VDEF API based on the
"^DD",579.3,579.31,.07,21,2,0)
value passed to it by the calling program. The data stored in this field
"^DD",579.3,579.31,.07,21,3,0)
is a pointer to a Destination record in file 579.2.
"^DD",579.3,579.31,.07,"DT")
3030926
"^DD",579.3,579.31,.08,0)
DTS ADDED^D^^0;8^S %DT="ESTR" D ^%DT S X=Y K:X<1 X
"^DD",579.3,579.31,.08,3)
(No range limit on date)
"^DD",579.3,579.31,.08,21,0)
^^2^2^3030926^
"^DD",579.3,579.31,.08,21,1,0)
Date/time stamp when this entry was added to the Request Queue. Created by
"^DD",579.3,579.31,.08,21,2,0)
the VDEF API when it creates an entry for this request.
"^DD",579.3,579.31,.08,"DT")
3031110
"^DD",579.3,579.31,.09,0)
DTS CHECKED OUT^D^^0;9^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",579.3,579.31,.09,3)
(No range limit on date)
"^DD",579.3,579.31,.09,21,0)
^^2^2^3021219^
"^DD",579.3,579.31,.09,21,1,0)
Date/time stamp when this entry was checked out for processing.  Created 
"^DD",579.3,579.31,.09,21,2,0)
by the VDEF Request Processor when it starts processing this request.
"^DD",579.3,579.31,.09,"DT")
3031110
"^DD",579.3,579.31,.1,0)
DTS LAST HL7 MESSAGE GENERATED^D^^0;10^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",579.3,579.31,.1,3)
(No range limit on date)
"^DD",579.3,579.31,.1,21,0)
^^3^3^3021213^
"^DD",579.3,579.31,.1,21,1,0)
Date/time stamp when the last (most recent) HL7 message for this request 
"^DD",579.3,579.31,.1,21,2,0)
was generated. Created or updated by the Request Processor every time it 
"^DD",579.3,579.31,.1,21,3,0)
finishes processing an HL7 message for this Request Entry.
"^DD",579.3,579.31,.1,"DT")
3031110
"^DD",579.3,579.31,.13,0)
DTS PROCESSED^D^^0;13^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",579.3,579.31,.13,3)
(No range limit on date)
"^DD",579.3,579.31,.13,21,0)
^^3^3^3030926^
"^DD",579.3,579.31,.13,21,1,0)
Date/time stamp when the processing for this entry was completed.  
"^DD",579.3,579.31,.13,21,2,0)
Created by the Request Processor once it has finished processing this 
"^DD",579.3,579.31,.13,21,3,0)
Request Entry.
"^DD",579.3,579.31,.13,"DT")
3031110
"^DD",579.3,579.31,.15,0)
DTS VISTA HL7 MANAGER NOTIFIED^D^^0;15^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",579.3,579.31,.15,3)
(No range limit on date)
"^DD",579.3,579.31,.15,21,0)
^^2^2^3030926^
"^DD",579.3,579.31,.15,21,1,0)
Date/time stamp when the IRM was notified that this Request is potentialy 
"^DD",579.3,579.31,.15,21,2,0)
stuck since it has been in Checked Out state too long.
"^DD",579.3,579.31,.15,"DT")
3031110
"^DD",579.3,579.31,.17,0)
ERROR TEXT^F^^ERRMSG;1^K:$L(X)>80!($L(X)<1) X
"^DD",579.3,579.31,.17,3)
Answer must be 1-80 characters in length.
"^DD",579.3,579.31,.17,21,0)
^.001^1^1^3041207^^^
"^DD",579.3,579.31,.17,21,1,0)
VDEF processing error message text
"^DD",579.3,579.31,.17,"DT")
3040920
"^DD",579.3,579.31,.18,0)
VDEF EVENT^P577.4^VDEFHL7(577.4,^0;18^Q
"^DD",579.3,579.31,.18,3)
Pointer to VDEF Event Subtype file 577.4
"^DD",579.3,579.31,.18,21,0)
^^1^1^3040901^
"^DD",579.3,579.31,.18,21,1,0)
Pointer to File 577.4, VDEF Event Subtype file.
"^DD",579.3,579.31,.18,"DT")
3040901
"^DD",579.3,579.31,.19,0)
DYNAMIC ADDRESSING^579.313A^^.19;0
"^DD",579.3,579.311,0)
NAME VALUE PAIRS MULTIPLE SUB-FIELD^^.02^2
"^DD",579.3,579.311,0,"DT")
3021213
"^DD",579.3,579.311,0,"IX","B",579.311,.01)

"^DD",579.3,579.311,0,"NM","NAME VALUE PAIRS MULTIPLE")

"^DD",579.3,579.311,0,"UP")
579.31
"^DD",579.3,579.311,.01,0)
NAME VALUE PAIR NUMBER^RNJ3,0X^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1.N) X S:$D(X) DINUM=X
"^DD",579.3,579.311,.01,1,0)
^.1^^0
"^DD",579.3,579.311,.01,1,1,0)
579.311^B
"^DD",579.3,579.311,.01,1,1,1)
S ^VDEFHL7(579.3,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",579.3,579.311,.01,1,1,2)
K ^VDEFHL7(579.3,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",579.3,579.311,.01,3)
Type a number between 1 and 999, 0 Decimal Digits
"^DD",579.3,579.311,.01,21,0)
^^1^1^3021213^^^
"^DD",579.3,579.311,.01,21,1,0)
IEN of this Name Value pair within the request.
"^DD",579.3,579.311,.01,"DT")
3021218
"^DD",579.3,579.311,.02,0)
NAME VALUE PAIR DATA^F^^0;2^K:$L(X)>200!($L(X)<1) X
"^DD",579.3,579.311,.02,3)
Answer must be 1-200 characters in length
"^DD",579.3,579.311,.02,21,0)
^^5^5^3030926^
"^DD",579.3,579.311,.02,21,1,0)
A single Name-Value pair for a Request Entry. Created by the VDEF Queue 
"^DD",579.3,579.311,.02,21,2,0)
API based on the values passed to it by the calling program.  The VDEF API
"^DD",579.3,579.311,.02,21,3,0)
performs no validation of the Name Value pair format or validity except
"^DD",579.3,579.311,.02,21,4,0)
for stripping the "^"s when populating this field. Validation will be
"^DD",579.3,579.311,.02,21,5,0)
performed by the VDEF Request Processor.
"^DD",579.3,579.311,.02,"DT")
3030926
"^DD",579.3,579.313,0)
DYNAMIC ADDRESSING SUB-FIELD^^.02^2
"^DD",579.3,579.313,0,"DT")
3031014
"^DD",579.3,579.313,0,"NM","DYNAMIC ADDRESSING")

"^DD",579.3,579.313,0,"UP")
579.31
"^DD",579.3,579.313,.01,0)
DYNAMIC ADDRESSING COUNT^NJ6,0^^0;1^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1.N) X
"^DD",579.3,579.313,.01,1,0)
^.1^^0
"^DD",579.3,579.313,.01,3)
Type a number between 1 and 999999, 0 Decimal Digits
"^DD",579.3,579.313,.01,21,0)
^^2^2^3031014^
"^DD",579.3,579.313,.01,21,1,0)
List of VistA HL7 Protocols passed to VDEF for this request. Will be 
"^DD",579.3,579.313,.01,21,2,0)
passed on to the VistA HL7 package when calling GENERATE^HLMA.
"^DD",579.3,579.313,.01,"DT")
3031015
"^DD",579.3,579.313,.02,0)
DESTINATION DATA^F^^1;E1,200^K:$L(X)>200!($L(X)<1) X
"^DD",579.3,579.313,.02,3)
Answer must be 1-200 characters in length
"^DD",579.3,579.313,.02,"DT")
3031014
"^DD",579.3,579.32,0)
REQUEST PROCESS SCHEDULE SUB-FIELD^^.05^5
"^DD",579.3,579.32,0,"DT")
3040901
"^DD",579.3,579.32,0,"IX","B",579.32,.01)

"^DD",579.3,579.32,0,"NM","REQUEST PROCESS SCHEDULE")

"^DD",579.3,579.32,0,"UP")
579.3
"^DD",579.3,579.32,.01,0)
RULE^F^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",579.3,579.32,.01,1,0)
^.1
"^DD",579.3,579.32,.01,1,1,0)
579.32^B
"^DD",579.3,579.32,.01,1,1,1)
S ^VDEFHL7(579.3,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",579.3,579.32,.01,1,1,2)
K ^VDEFHL7(579.3,DA(1),2,"B",$E(X,1,30),DA)
"^DD",579.3,579.32,.01,3)
Answer must be 1-30 characters in length.
"^DD",579.3,579.32,.01,21,0)
^^1^1^3040901^
"^DD",579.3,579.32,.01,21,1,0)
The name of the rule.
"^DD",579.3,579.32,.01,"DT")
3040901
"^DD",579.3,579.32,.02,0)
DAY OF THE WEEK^S^1:Sunday;2:Monday;3:Tuesday;4:Wednesday;5:Thursday;6:Friday;7:Saturday;^0;2^Q
"^DD",579.3,579.32,.02,3)
Enter a number for the day of the week (1=Sunday, 2=Monday)
"^DD",579.3,579.32,.02,21,0)
^^1^1^3030827^
"^DD",579.3,579.32,.02,21,1,0)
Number corresponding to the day of the week
"^DD",579.3,579.32,.02,"DT")
3031009
"^DD",579.3,579.32,.03,0)
FORCED STATUS^S^R:RUNNING;S:STOPPED;^0;3^Q
"^DD",579.3,579.32,.03,3)
Enter the status that should be forced during this period
"^DD",579.3,579.32,.03,"DT")
3040901
"^DD",579.3,579.32,.04,0)
FROM TIME^RF^^0;4^K:'$$TIMECK^VDEFQM(X) X
"^DD",579.3,579.32,.04,3)
Enter time in HH:MM format (military format, not AM or PM)
"^DD",579.3,579.32,.04,"DT")
3030918
"^DD",579.3,579.32,.05,0)
TO TIME^RF^^0;5^K:'$$TIMECK^VDEFQM(X) X
"^DD",579.3,579.32,.05,3)
Enter time in HH:MM format (military format, not AM or PM)
"^DD",579.3,579.32,.05,"DT")
3030918
"^DD",579.5,579.5,0)
FIELD^^.06^3
"^DD",579.5,579.5,0,"DDA")
N
"^DD",579.5,579.5,0,"DT")
3040817
"^DD",579.5,579.5,0,"IX","B",579.5,.01)

"^DD",579.5,579.5,0,"NM","VDEF PARAMETERS")

"^DD",579.5,579.5,0,"VRPK")
VDEF
"^DD",579.5,579.5,.01,0)
VDEF SYSTEM^RP8989.3'^XTV(8989.3,^0;1^Q
"^DD",579.5,579.5,.01,1,0)
^.1
"^DD",579.5,579.5,.01,1,1,0)
579.5^B
"^DD",579.5,579.5,.01,1,1,1)
S ^VDEFHL7(579.5,"B",$E(X,1,30),DA)=""
"^DD",579.5,579.5,.01,1,1,2)
K ^VDEFHL7(579.5,"B",$E(X,1,30),DA)
"^DD",579.5,579.5,.01,3)

"^DD",579.5,579.5,.01,21,0)
^^1^1^3040817^
"^DD",579.5,579.5,.01,21,1,0)
Identifies the VistA System on which VDEF is running.
"^DD",579.5,579.5,.01,"DT")
3040817
"^DD",579.5,579.5,.02,0)
VDEF MONITOR DELAY^RNJ10,0OX^^0;2^S X=$$TIMEI^VDEFUTIL(X) I 'X K X
"^DD",579.5,579.5,.02,2)
S Y(0)=Y S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.5,579.5,.02,2.1)
S Y=$$TIMEE^VDEFUTIL(Y)
"^DD",579.5,579.5,.02,3)
Enter time in xxD yyH zzM wwS format
"^DD",579.5,579.5,.02,21,0)
^^1^1^3030926^
"^DD",579.5,579.5,.02,21,1,0)
How often the VDEF Monitor process runs.
"^DD",579.5,579.5,.02,"DT")
3030926
"^DD",579.5,579.5,.06,0)
TASKMAN TASK NUMBER^NJ9,0^^0;6^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1.N) X
"^DD",579.5,579.5,.06,3)
Type a number between 0 and 999999999, 0 Decimal Digits
"^DD",579.5,579.5,.06,21,0)
^^1^1^3030926^
"^DD",579.5,579.5,.06,21,1,0)
The task number of the VDEF Monitor process.
"^DD",579.5,579.5,.06,"DT")
3030926
"^DD",579.6,579.6,0)
FIELD^^.02^2
"^DD",579.6,579.6,0,"DDA")
N
"^DD",579.6,579.6,0,"DT")
3040820
"^DD",579.6,579.6,0,"IX","B",579.6,.01)

"^DD",579.6,579.6,0,"NM","VDEF CUSTODIAL PACKAGE")

"^DD",579.6,579.6,0,"PT",577,.09)

"^DD",579.6,579.6,0,"VRPK")
VDEFC VITALS
"^DD",579.6,579.6,.01,0)
CUSTODIAL PACKAGE^RP9.4'^DIC(9.4,^0;1^Q
"^DD",579.6,579.6,.01,1,0)
^.1
"^DD",579.6,579.6,.01,1,1,0)
579.6^B
"^DD",579.6,579.6,.01,1,1,1)
S ^VDEFHL7(579.6,"B",$E(X,1,30),DA)=""
"^DD",579.6,579.6,.01,1,1,2)
K ^VDEFHL7(579.6,"B",$E(X,1,30),DA)
"^DD",579.6,579.6,.01,3)
Enter package associated with this custodial package
"^DD",579.6,579.6,.01,21,0)
^^2^2^3040820^
"^DD",579.6,579.6,.01,21,1,0)
Package (entry in file PACKAGE #9.4) associated with this custodial 
"^DD",579.6,579.6,.01,21,2,0)
package.
"^DD",579.6,579.6,.01,"DT")
3040820
"^DD",579.6,579.6,.02,0)
ACTIVATION STATUS^RS^A:ACTIVE;I:INACTIVE;^0;2^Q
"^DD",579.6,579.6,.02,1,0)
^.1^^0
"^DD",579.6,579.6,.02,3)
Sending messages for this package is "A"ctive or "I"nactive
"^DD",579.6,579.6,.02,21,0)
^^2^2^3040820^
"^DD",579.6,579.6,.02,21,1,0)
Whether VDEF messaging is currently Active or Inactive for this custodial 
"^DD",579.6,579.6,.02,21,2,0)
package.
"^DD",579.6,579.6,.02,"DT")
3040820
"^DIC",577,577,0)
VDEF EVENT DESCRIPTION^577
"^DIC",577,577,0,"GL")
^VDEFHL7(577,
"^DIC",577,577,"%",0)
^1.005^^0
"^DIC",577,577,"%D",0)
^1.001^6^6^3040916^^
"^DIC",577,577,"%D",1,0)
This file describes VDEF events.  Mostly, these events match the 
"^DIC",577,577,"%D",2,0)
list of events in the HL7 2.4 standard, but there are some cases where
"^DIC",577,577,"%D",3,0)
there may be multiple entries in this file for a single HL7 standard 
"^DIC",577,577,"%D",4,0)
event.
"^DIC",577,577,"%D",5,0)
 
"^DIC",577,577,"%D",6,0)
ENTRIES IN THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",577,"B","VDEF EVENT DESCRIPTION",577)

"^DIC",577.4,577.4,0)
VDEF EVENT SUBTYPES^577.4
"^DIC",577.4,577.4,0,"GL")
^VDEFHL7(577.4,
"^DIC",577.4,577.4,"%",0)
^1.005^^
"^DIC",577.4,577.4,"%D",0)
^^18^18^3040901^
"^DIC",577.4,577.4,"%D",1,0)
This is a list of the valid subtype codes that are used along with the 
"^DIC",577.4,577.4,"%D",2,0)
HL7 message type and event type to uniquely identify a message to the 
"^DIC",577.4,577.4,"%D",3,0)
receiving system.  It corresponds to the applications' domain or 
"^DIC",577.4,577.4,"%D",4,0)
subdomain when a domain has more than one type of message that it will 
"^DIC",577.4,577.4,"%D",5,0)
send to VDEF.
"^DIC",577.4,577.4,"%D",6,0)
 
"^DIC",577.4,577.4,"%D",7,0)
For example Vitals, Allergies and Lab all send ORU-R01 messages but the 
"^DIC",577.4,577.4,"%D",8,0)
contents are vastly different.  Each will use a different subtype to make 
"^DIC",577.4,577.4,"%D",9,0)
the messages unique.
"^DIC",577.4,577.4,"%D",10,0)
 
"^DIC",577.4,577.4,"%D",11,0)
Examples: ORU-R01-VTLS (vitals), ORU-R01-CHEM (lab chemistry)
"^DIC",577.4,577.4,"%D",12,0)
 
"^DIC",577.4,577.4,"%D",13,0)
Developers must consult with representatives of DaIS before adding entries
"^DIC",577.4,577.4,"%D",14,0)
to this file.
"^DIC",577.4,577.4,"%D",15,0)
 
"^DIC",577.4,577.4,"%D",16,0)
THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",577.4,577.4,"%D",17,0)
 
"^DIC",577.4,577.4,"%D",18,0)
THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",577.4,"B","VDEF EVENT SUBTYPES",577.4)

"^DIC",579.1,579.1,0)
VDEF REQUESTOR^579.1
"^DIC",579.1,579.1,0,"GL")
^VDEFHL7(579.1,
"^DIC",579.1,579.1,"%",0)
^1.005^^0
"^DIC",579.1,579.1,"%D",0)
^^3^3^3040818^
"^DIC",579.1,579.1,"%D",1,0)
Identifies the logical source for a class of requests for HL7 messages. 
"^DIC",579.1,579.1,"%D",2,0)
 
"^DIC",579.1,579.1,"%D",3,0)
ENTRIES IN THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",579.1,"B","VDEF REQUESTOR",579.1)

"^DIC",579.2,579.2,0)
VDEF DESTINATION^579.2
"^DIC",579.2,579.2,0,"GL")
^VDEFHL7(579.2,
"^DIC",579.2,579.2,"%",0)
^1.005^^0
"^DIC",579.2,579.2,"%D",0)
^1.001^4^4^3040823^^^
"^DIC",579.2,579.2,"%D",1,0)
Contains VDEF Destination information distinguishing between VISTA 
"^DIC",579.2,579.2,"%D",2,0)
HL7 and FTP Destinations.
"^DIC",579.2,579.2,"%D",3,0)
 
"^DIC",579.2,579.2,"%D",4,0)
ENTRIES IN THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",579.2,"B","VDEF DESTINATION",579.2)

"^DIC",579.3,579.3,0)
VDEF REQUEST QUEUE^579.3
"^DIC",579.3,579.3,0,"GL")
^VDEFHL7(579.3,
"^DIC",579.3,579.3,"%",0)
^1.005^^0
"^DIC",579.3,579.3,"%D",0)
^1.001^8^8^3041207^^
"^DIC",579.3,579.3,"%D",1,0)
This file stores all information specific to each individual Request
"^DIC",579.3,579.3,"%D",2,0)
Queue. It defines how the entries in each queue will be processed, how
"^DIC",579.3,579.3,"%D",3,0)
often the processed entries in the queue will be purged, etc.
"^DIC",579.3,579.3,"%D",4,0)
 
"^DIC",579.3,579.3,"%D",5,0)
This file also stores all Requests and Request-specific data for this 
"^DIC",579.3,579.3,"%D",6,0)
queue, i.e. the parameters passed in by the calling program as well as 
"^DIC",579.3,579.3,"%D",7,0)
the information generated while the VDEF Request Processor program is
"^DIC",579.3,579.3,"%D",8,0)
handling this request.
"^DIC",579.3,"B","VDEF REQUEST QUEUE",579.3)

"^DIC",579.5,579.5,0)
VDEF PARAMETERS^579.5
"^DIC",579.5,579.5,0,"GL")
^VDEFHL7(579.5,
"^DIC",579.5,579.5,"%",0)
^1.005^^
"^DIC",579.5,579.5,"%D",0)
^^2^2^3040908^
"^DIC",579.5,579.5,"%D",1,0)
This file contains information used to control the processing of VDEF 
"^DIC",579.5,579.5,"%D",2,0)
message requests from the VDEF Request Queue.
"^DIC",579.5,"B","VDEF PARAMETERS",579.5)

"^DIC",579.6,579.6,0)
VDEF CUSTODIAL PACKAGE^579.6
"^DIC",579.6,579.6,0,"GL")
^VDEFHL7(579.6,
"^DIC",579.6,579.6,"%",0)
^1.005^^
"^DIC",579.6,579.6,"%D",0)
^1.001^4^4^3040916^^
"^DIC",579.6,579.6,"%D",1,0)
The file contains list of packages that are setup to use the VDEF 
"^DIC",579.6,579.6,"%D",2,0)
software to create HL7 messages. It also stores their activation status.
"^DIC",579.6,579.6,"%D",3,0)
 
"^DIC",579.6,579.6,"%D",4,0)
ENTRIES IN THIS FILE SHOULD NOT BE EDITED IN PRODUCTION ACCOUNTS.
"^DIC",579.6,"B","VDEF CUSTODIAL PACKAGE",579.6)

**END**
**END**
