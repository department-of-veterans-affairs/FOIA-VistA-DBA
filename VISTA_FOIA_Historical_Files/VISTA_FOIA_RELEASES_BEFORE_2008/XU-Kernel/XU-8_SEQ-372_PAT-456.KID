Released XU*8*456 SEQ #372
Extracted from mail message
**KIDS**:XU*8.0*456^

**INSTALL NAME**
XU*8.0*456
"BLD",799,0)
XU*8.0*456^KERNEL^0^3070731^y
"BLD",799,4,0)
^9.64PA^^
"BLD",799,6)
6^
"BLD",799,"KRN",0)
^9.67PA^8989.52^19
"BLD",799,"KRN",.4,0)
.4
"BLD",799,"KRN",.401,0)
.401
"BLD",799,"KRN",.402,0)
.402
"BLD",799,"KRN",.403,0)
.403
"BLD",799,"KRN",.5,0)
.5
"BLD",799,"KRN",.84,0)
.84
"BLD",799,"KRN",3.6,0)
3.6
"BLD",799,"KRN",3.8,0)
3.8
"BLD",799,"KRN",9.2,0)
9.2
"BLD",799,"KRN",9.8,0)
9.8
"BLD",799,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",799,"KRN",9.8,"NM",1,0)
ZOSVKSD^^0^B18713219
"BLD",799,"KRN",9.8,"NM",2,0)
ZOSVKSOE^^0^B102565199
"BLD",799,"KRN",9.8,"NM",3,0)
ZOSVKSOS^^0^B24921702
"BLD",799,"KRN",9.8,"NM",4,0)
ZOSVKSVE^^1^
"BLD",799,"KRN",9.8,"NM",5,0)
ZOSVKSVS^^0^B4173
"BLD",799,"KRN",9.8,"NM",6,0)
ZOSVKSCE^^1^
"BLD",799,"KRN",9.8,"NM","B","ZOSVKSCE",6)

"BLD",799,"KRN",9.8,"NM","B","ZOSVKSD",1)

"BLD",799,"KRN",9.8,"NM","B","ZOSVKSOE",2)

"BLD",799,"KRN",9.8,"NM","B","ZOSVKSOS",3)

"BLD",799,"KRN",9.8,"NM","B","ZOSVKSVE",4)

"BLD",799,"KRN",9.8,"NM","B","ZOSVKSVS",5)

"BLD",799,"KRN",19,0)
19
"BLD",799,"KRN",19.1,0)
19.1
"BLD",799,"KRN",101,0)
101
"BLD",799,"KRN",409.61,0)
409.61
"BLD",799,"KRN",771,0)
771
"BLD",799,"KRN",870,0)
870
"BLD",799,"KRN",8989.51,0)
8989.51
"BLD",799,"KRN",8989.52,0)
8989.52
"BLD",799,"KRN",8994,0)
8994
"BLD",799,"KRN","B",.4,.4)

"BLD",799,"KRN","B",.401,.401)

"BLD",799,"KRN","B",.402,.402)

"BLD",799,"KRN","B",.403,.403)

"BLD",799,"KRN","B",.5,.5)

"BLD",799,"KRN","B",.84,.84)

"BLD",799,"KRN","B",3.6,3.6)

"BLD",799,"KRN","B",3.8,3.8)

"BLD",799,"KRN","B",9.2,9.2)

"BLD",799,"KRN","B",9.8,9.8)

"BLD",799,"KRN","B",19,19)

"BLD",799,"KRN","B",19.1,19.1)

"BLD",799,"KRN","B",101,101)

"BLD",799,"KRN","B",409.61,409.61)

"BLD",799,"KRN","B",771,771)

"BLD",799,"KRN","B",870,870)

"BLD",799,"KRN","B",8989.51,8989.51)

"BLD",799,"KRN","B",8989.52,8989.52)

"BLD",799,"KRN","B",8994,8994)

"BLD",799,"QUES",0)
^9.62^^
"BLD",799,"REQB",0)
^9.611^1^1
"BLD",799,"REQB",1,0)
XU*8.0*268^1
"BLD",799,"REQB","B","XU*8.0*268",1)

"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"PKG",216,-1)
1^1
"PKG",216,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",216,20,0)
^9.402P^^
"PKG",216,22,0)
^9.49I^1^1
"PKG",216,22,1,0)
8.0^2950703^2950821^627
"PKG",216,22,1,"PAH",1,0)
456^3070731^577
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","ZOSVKSCE")
1^6^^n/a
"RTN","ZOSVKSD")
0^1^B18713219^B19804097
"RTN","ZOSVKSD",1,0)
%ZOSVKSD ;OAK/KAK - Calculate Disk Capacity ;5/9/07  10:36
"RTN","ZOSVKSD",2,0)
 ;;8.0;KERNEL;**121,197,268,456**;Jul 26, 2004
"RTN","ZOSVKSD",3,0)
 ;
"RTN","ZOSVKSD",4,0)
 ; This routine will help to calculate disk capacity for
"RTN","ZOSVKSD",5,0)
 ; either DSM or Cache system platforms by looking up
"RTN","ZOSVKSD",6,0)
 ; volume set table information
"RTN","ZOSVKSD",7,0)
 ;
"RTN","ZOSVKSD",8,0)
EN(SITENUM,SESSNUM,VOLS,OS) ;-- called by routine SYS+2^KMPSLK
"RTN","ZOSVKSD",9,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",10,0)
 ; SITENUM = Station number of site
"RTN","ZOSVKSD",11,0)
 ; SESSNUM = SAGG session number
"RTN","ZOSVKSD",12,0)
 ; VOLS    = Array containing names of monitored volumes
"RTN","ZOSVKSD",13,0)
 ; OS      = Type of M platform (CVMS, CWINNT)
"RTN","ZOSVKSD",14,0)
 ;
"RTN","ZOSVKSD",15,0)
 ; Returns ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",vol_name) = vol_size
"RTN","ZOSVKSD",16,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",17,0)
 ;
"RTN","ZOSVKSD",18,0)
 Q:'$G(SITENUM)
"RTN","ZOSVKSD",19,0)
 Q:$G(SESSNUM)=""
"RTN","ZOSVKSD",20,0)
 Q:$G(OS)=""
"RTN","ZOSVKSD",21,0)
 ;
"RTN","ZOSVKSD",22,0)
 D @OS
"RTN","ZOSVKSD",23,0)
 ;
"RTN","ZOSVKSD",24,0)
 Q
"RTN","ZOSVKSD",25,0)
 ;
"RTN","ZOSVKSD",26,0)
CVMS ;--------------------------------------------------------------------
"RTN","ZOSVKSD",27,0)
 ; Version for Cache for OpenVMS platform
"RTN","ZOSVKSD",28,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",29,0)
 ;
"RTN","ZOSVKSD",30,0)
 ;-- code from routine %FREECNT
"RTN","ZOSVKSD",31,0)
 ;
"RTN","ZOSVKSD",32,0)
 N DIR
"RTN","ZOSVKSD",33,0)
 ;
"RTN","ZOSVKSD",34,0)
 S DIR=""
"RTN","ZOSVKSD",35,0)
 F  S DIR=$O(^|"%SYS"|SYS("UCI",DIR)) Q:DIR=""  D
"RTN","ZOSVKSD",36,0)
 .;
"RTN","ZOSVKSD",37,0)
 .N BLKSIZ,DIRUP,ISBIGDB,MAX,SIZE,VOLTOT,X,Y,ZU
"RTN","ZOSVKSD",38,0)
 .;
"RTN","ZOSVKSD",39,0)
 .Q:$G(^|"%SYS"|SYS("UCI",DIR))]""
"RTN","ZOSVKSD",40,0)
 .S X=DIR
"RTN","ZOSVKSD",41,0)
 .X ^%ZOSF("UPPERCASE")
"RTN","ZOSVKSD",42,0)
 .;
"RTN","ZOSVKSD",43,0)
 .; strip off trailing '\' if needed
"RTN","ZOSVKSD",44,0)
 .I $E(Y,$L(Y))="\" S Y=$E(Y,1,$L(Y)-1)
"RTN","ZOSVKSD",45,0)
 .S DIRUP=Y
"RTN","ZOSVKSD",46,0)
 .;
"RTN","ZOSVKSD",47,0)
 .; use $ZU(49) to see if directory is mounted
"RTN","ZOSVKSD",48,0)
 .S ZU=$ZU(49,DIR)
"RTN","ZOSVKSD",49,0)
 .;
"RTN","ZOSVKSD",50,0)
 .; quit if directory does not exist or is dismounted
"RTN","ZOSVKSD",51,0)
 .Q:ZU<0
"RTN","ZOSVKSD",52,0)
 .;
"RTN","ZOSVKSD",53,0)
 .; quit is directory is not mounted
"RTN","ZOSVKSD",54,0)
 .Q:+ZU=256
"RTN","ZOSVKSD",55,0)
 .;
"RTN","ZOSVKSD",56,0)
 .S ISBIGDB=0
"RTN","ZOSVKSD",57,0)
 .S BLKSIZ=$P(ZU,",",2)
"RTN","ZOSVKSD",58,0)
 .;
"RTN","ZOSVKSD",59,0)
 .I BLKSIZ>2048 D
"RTN","ZOSVKSD",60,0)
 ..S ISBIGDB=1
"RTN","ZOSVKSD",61,0)
 ..S VOLTOT=$P(ZU,",",22)
"RTN","ZOSVKSD",62,0)
 .;
"RTN","ZOSVKSD",63,0)
 .E  D
"RTN","ZOSVKSD",64,0)
 ..I $ZBITGET($ZVERSION(0),21) S SIZE=+$P(ZU,",",23),MAX=$P(ZU,",",24)
"RTN","ZOSVKSD",65,0)
 ..E  S SIZE=+$P(ZU,",",2),MAX=$P(ZU,",",4)
"RTN","ZOSVKSD",66,0)
 ..I 'SIZE Q
"RTN","ZOSVKSD",67,0)
 ..S VOLTOT=MAX*SIZE
"RTN","ZOSVKSD",68,0)
 .;
"RTN","ZOSVKSD",69,0)
 .;-- end of code from routine %FREECNT
"RTN","ZOSVKSD",70,0)
 .;
"RTN","ZOSVKSD",71,0)
 .D SETNODE(SITENUM,SESSNUM,DIRUP,VOLTOT)
"RTN","ZOSVKSD",72,0)
 ;
"RTN","ZOSVKSD",73,0)
 Q
"RTN","ZOSVKSD",74,0)
 ;
"RTN","ZOSVKSD",75,0)
CWINNT ;--------------------------------------------------------------------
"RTN","ZOSVKSD",76,0)
 ; Version for Cache for Windows NT platform
"RTN","ZOSVKSD",77,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",78,0)
 ;
"RTN","ZOSVKSD",79,0)
 ;-- code from routine %FREECNT
"RTN","ZOSVKSD",80,0)
 ;
"RTN","ZOSVKSD",81,0)
 N DIR,DIRUP,VOLTOT
"RTN","ZOSVKSD",82,0)
 N X,Y,ZU
"RTN","ZOSVKSD",83,0)
 ;
"RTN","ZOSVKSD",84,0)
 S DIR=""
"RTN","ZOSVKSD",85,0)
 F  S DIR=$O(^|"%SYS"|SYS("UCI",DIR)) Q:DIR=""  D
"RTN","ZOSVKSD",86,0)
 .Q:$G(^|"%SYS"|SYS("UCI",DIR))]""
"RTN","ZOSVKSD",87,0)
 .S X=DIR
"RTN","ZOSVKSD",88,0)
 .X ^%ZOSF("UPPERCASE")
"RTN","ZOSVKSD",89,0)
 .;
"RTN","ZOSVKSD",90,0)
 .; strip off trailing '\' if needed
"RTN","ZOSVKSD",91,0)
 .I $E(Y,$L(Y))="\" S Y=$E(Y,1,$L(Y)-1)
"RTN","ZOSVKSD",92,0)
 .S DIRUP=Y
"RTN","ZOSVKSD",93,0)
 .;
"RTN","ZOSVKSD",94,0)
 .; use $ZU(49) to see if directory is mounted
"RTN","ZOSVKSD",95,0)
 .S ZU=$ZU(49,DIR)
"RTN","ZOSVKSD",96,0)
 .;
"RTN","ZOSVKSD",97,0)
 .; quit if directory does not exist or is dismounted
"RTN","ZOSVKSD",98,0)
 .Q:ZU<0
"RTN","ZOSVKSD",99,0)
 .;
"RTN","ZOSVKSD",100,0)
 .; quit is directory is not mounted
"RTN","ZOSVKSD",101,0)
 .Q:+ZU=256
"RTN","ZOSVKSD",102,0)
 .;
"RTN","ZOSVKSD",103,0)
 .; volume size = blocks per map * number of maps
"RTN","ZOSVKSD",104,0)
 .S VOLTOT=+$P(ZU,",",2)*$P(ZU,",",4)
"RTN","ZOSVKSD",105,0)
 .;
"RTN","ZOSVKSD",106,0)
 .;-- end of code from routine %FREECNT
"RTN","ZOSVKSD",107,0)
 .;
"RTN","ZOSVKSD",108,0)
 .D SETNODE(SITENUM,SESSNUM,DIRUP,VOLTOT)
"RTN","ZOSVKSD",109,0)
 ;
"RTN","ZOSVKSD",110,0)
 Q
"RTN","ZOSVKSD",111,0)
 ;
"RTN","ZOSVKSD",112,0)
SETNODE(SITENUM,SESSNUM,VOLNAM,VOLTOT) ;
"RTN","ZOSVKSD",113,0)
 ; Set the @VOL node in the ^XTMP("KMPS" global array
"RTN","ZOSVKSD",114,0)
 ;
"RTN","ZOSVKSD",115,0)
 ; quit if SAGG is not monitoring this volume set (directory)
"RTN","ZOSVKSD",116,0)
 Q:'$D(VOLS(VOLNAM))
"RTN","ZOSVKSD",117,0)
 ;
"RTN","ZOSVKSD",118,0)
 S ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",VOLNAM)=VOLTOT
"RTN","ZOSVKSD",119,0)
 Q
"RTN","ZOSVKSD",120,0)
 ;
"RTN","ZOSVKSD",121,0)
 ;
"RTN","ZOSVKSD",122,0)
DCMPST(VERSION) ;-
"RTN","ZOSVKSD",123,0)
 ;---------------------------------------------------------------------------
"RTN","ZOSVKSD",124,0)
 ;---------------------------------------------------------------------------
"RTN","ZOSVKSD",125,0)
 Q:$G(VERSION)="" ""
"RTN","ZOSVKSD",126,0)
 I VERSION<5.1 D DecomposeStatus^%DM(RC,.MSGLIST,0,"") Q
"RTN","ZOSVKSD",127,0)
 E  D DecomposeStatus^%SYS.DATABASE(RC,.MSGLIST,0,"")
"RTN","ZOSVKSD",128,0)
 Q
"RTN","ZOSVKSD",129,0)
 ;
"RTN","ZOSVKSD",130,0)
GETDIRGL(VERSION) ;-extrinsic function
"RTN","ZOSVKSD",131,0)
 ;----------------------------------------------------------------------------
"RTN","ZOSVKSD",132,0)
 ; ; set up GLOARRAY array indexed by global name 
"RTN","ZOSVKSD",133,0)
 ;----------------------------------------------------------------------------
"RTN","ZOSVKSD",134,0)
 Q:$G(VERSION)="" ""
"RTN","ZOSVKSD",135,0)
 I VERSION<5.1 Q $$GetDirGlobals^%DM(DIRNAM,.GLOARRAY)
"RTN","ZOSVKSD",136,0)
 E  Q $$GetDirGlobals^%SYS.DATABASE(DIRNAM,.GLOARRAY)
"RTN","ZOSVKSD",137,0)
 ;
"RTN","ZOSVKSD",138,0)
GLOINTEG(VERSION) ;- extrinsic function
"RTN","ZOSVKSD",139,0)
 ;----------------------------------------------------------------------------
"RTN","ZOSVKSD",140,0)
 ; check integrity of a single global
"RTN","ZOSVKSD",141,0)
 ; will stop if there are more than 999 errors with this global
"RTN","ZOSVKSD",142,0)
 ;----------------------------------------------------------------------------
"RTN","ZOSVKSD",143,0)
 Q:$G(VERSION)="" ""
"RTN","ZOSVKSD",144,0)
 I VERSION<5.1 Q $$CheckGlobalIntegrity^%DM(DIRNAM,GLO,999,.GLOTOTBLKS,.GLOPNTBLKS,.GLOTOTBYTES,.GLOPNTBYTES,.GLOBIGBLKS,.GLOBIGBYTES,.GLOBIGSTRINGS,.DATASIZE)
"RTN","ZOSVKSD",145,0)
 E  Q $$CheckGlobalIntegrity^%SYS.DATABASE(DIRNAM,GLO,999,.GLOTOTBLKS,.GLOPNTBLKS,.GLOTOTBYTES,.GLOPNTBYTES,.GLOBIGBLKS,.GLOBIGBYTES,.GLOBIGSTRINGS,.DATASIZE)
"RTN","ZOSVKSOE")
0^2^B102565199^B101047998
"RTN","ZOSVKSOE",1,0)
%ZOSVKSE ;OAK/KAK - Automatic INTEGRIT Routine (Cache) ;5/9/07  10:46
"RTN","ZOSVKSOE",2,0)
 ;;8.0;KERNEL;**90,94,197,268,456**;Jul 26, 2004
"RTN","ZOSVKSOE",3,0)
 ;
"RTN","ZOSVKSOE",4,0)
 ; Version for Cache
"RTN","ZOSVKSOE",5,0)
 ;
"RTN","ZOSVKSOE",6,0)
 Q
"RTN","ZOSVKSOE",7,0)
 ;
"RTN","ZOSVKSOE",8,0)
START(KMPSTEMP) ;-- called by routine CVMS+2^KMPSGE/CWINNT+1^KMPSGE in VAH
"RTN","ZOSVKSOE",9,0)
 ;
"RTN","ZOSVKSOE",10,0)
 ; KMPSTEMP... ^ piece 1: SiteNumber
"RTN","ZOSVKSOE",11,0)
 ;               piece 2: SessionNumber
"RTN","ZOSVKSOE",12,0)
 ;               piece 3: XTMP Global Location
"RTN","ZOSVKSOE",13,0)
 ;               piece 4: Current Date/Time
"RTN","ZOSVKSOE",14,0)
 ;               piece 5: Production UCI
"RTN","ZOSVKSOE",15,0)
 ;
"RTN","ZOSVKSOE",16,0)
 N DIRNAM,KMPSDT,KMPSERR,KMPSERR1,KMPSERR2,KMPSERR3,KMPSERR4
"RTN","ZOSVKSOE",17,0)
 N KMPSLOC,KMPSPROD,KMPSSITE,KMPSVOL,KMPSZU,NUM,X,VERSION,ZV
"RTN","ZOSVKSOE",18,0)
 ;
"RTN","ZOSVKSOE",19,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERROR^%ZOSVKSE"
"RTN","ZOSVKSOE",20,0)
 E  S X="ERROR^%ZOSVKSE",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",21,0)
 ;
"RTN","ZOSVKSOE",22,0)
 S U="^",KMPSSITE=$P(KMPSTEMP,U),NUM=$P(KMPSTEMP,U,2),KMPSLOC=$P(KMPSTEMP,U,3)
"RTN","ZOSVKSOE",23,0)
 S KMPSDT=$P(KMPSTEMP,U,4),KMPSPROD=$P(KMPSTEMP,U,5),KMPSVOL=$P(KMPSTEMP,U,6)
"RTN","ZOSVKSOE",24,0)
 K KMPSTEMP
"RTN","ZOSVKSOE",25,0)
 S KMPSZU=$ZU(5)_","_KMPSVOL
"RTN","ZOSVKSOE",26,0)
 S ^XTMP("KMPS","START",KMPSVOL,NUM)=$H
"RTN","ZOSVKSOE",27,0)
 S VERSION=+($TR($E($ZV,38,43)," ",""))
"RTN","ZOSVKSOE",28,0)
 ;
"RTN","ZOSVKSOE",29,0)
UCI ;-- code from routine INTEGRIT/Integrity
"RTN","ZOSVKSOE",30,0)
 ;
"RTN","ZOSVKSOE",31,0)
 ; DIRNAM = directory name
"RTN","ZOSVKSOE",32,0)
 S DIRNAM=KMPSVOL
"RTN","ZOSVKSOE",33,0)
 ;
"RTN","ZOSVKSOE",34,0)
 S ZV=$E($ZV,1,17)
"RTN","ZOSVKSOE",35,0)
 I ZV="Cache for Windows" D UC1
"RTN","ZOSVKSOE",36,0)
 I ZV="Cache for OpenVMS" D UC1VMS
"RTN","ZOSVKSOE",37,0)
DONE ; normal exit
"RTN","ZOSVKSOE",38,0)
 C 63
"RTN","ZOSVKSOE",39,0)
 K ^XTMP("KMPS","START",KMPSVOL)
"RTN","ZOSVKSOE",40,0)
 Q
"RTN","ZOSVKSOE",41,0)
 ;
"RTN","ZOSVKSOE",42,0)
UC1 ;-- entry point for Cache NT
"RTN","ZOSVKSOE",43,0)
 ;   code from routine INTEGRIT
"RTN","ZOSVKSOE",44,0)
 ;
"RTN","ZOSVKSOE",45,0)
 N A,BLK,CUR,DIRSTAT,ERR,G,GLOBAL,J,LEV,LINK,LNB,LNBLK,LNBYTE,LSNP,LTOTBLK,LTOTBYTE
"RTN","ZOSVKSOE",46,0)
 N N,NB,NBLK,NBYTE,NP,RET,TL,TOTBLK,TOTBYTE
"RTN","ZOSVKSOE",47,0)
 ;
"RTN","ZOSVKSOE",48,0)
 ; prevent dismounted database
"RTN","ZOSVKSOE",49,0)
 S DIRSTAT=$P($ZU(49,DIRNAM),",",1)
"RTN","ZOSVKSOE",50,0)
 ; either dismounted or does not exist
"RTN","ZOSVKSOE",51,0)
 I DIRSTAT<0 D ERR G ERROR
"RTN","ZOSVKSOE",52,0)
 O 63:"^^"_DIRNAM
"RTN","ZOSVKSOE",53,0)
 D INTEG1
"RTN","ZOSVKSOE",54,0)
 I $G(GLOBAL(1))="" S ^XTMP("KMPS",KMPSSITE,NUM," NO GLOBALS ",KMPSVOL)="" Q
"RTN","ZOSVKSOE",55,0)
 D EV1
"RTN","ZOSVKSOE",56,0)
 Q
"RTN","ZOSVKSOE",57,0)
 ;
"RTN","ZOSVKSOE",58,0)
GLOCHK ;
"RTN","ZOSVKSOE",59,0)
 N GLOINFO,JRNL,PROT,PROTINFO
"RTN","ZOSVKSOE",60,0)
 ;
"RTN","ZOSVKSOE",61,0)
 ; these extra logic ideas are from routine %GD
"RTN","ZOSVKSOE",62,0)
 ; GLO = name ^ type ^ protection ^ growth_area ^ root_block (first pointer block) ^ journal ^ collate
"RTN","ZOSVKSOE",63,0)
 S PROT=$P(GLO,U,3),PROT(0)="N",PROT(1)="R",PROT(2)="RW",PROT(3)="RWD"
"RTN","ZOSVKSOE",64,0)
 ; protection - world ^ group ^ owner ^ network
"RTN","ZOSVKSOE",65,0)
 S PROTINFO=PROT(PROT\16#4)_U_PROT(PROT\4#4)_U_PROT(PROT#4)_U_PROT(PROT\64#4)
"RTN","ZOSVKSOE",66,0)
 S JRNL=$S($P(GLO,U,6):"Y",1:"N")
"RTN","ZOSVKSOE",67,0)
 ; global info = jrnl^collating^blank^growth area block^blank^protection:world^group^owner^network^first pointer block
"RTN","ZOSVKSOE",68,0)
 S GLOINFO=JRNL_U_$P(GLO,U,7)_"^^"_$P(GLO,U,4)_"^^"_PROTINFO_U_$P(GLO,U,5)
"RTN","ZOSVKSOE",69,0)
 ; end of extra logic ideas
"RTN","ZOSVKSOE",70,0)
 ;
"RTN","ZOSVKSOE",71,0)
 S TOTBLK=TOTBLK+1
"RTN","ZOSVKSOE",72,0)
 S G=$P(GLO,U,2,99),G=$P(G,U,4),LEV=1
"RTN","ZOSVKSOE",73,0)
 ;
"RTN","ZOSVKSOE",74,0)
 ; quit if global is implicit - do not process
"RTN","ZOSVKSOE",75,0)
 I G\256=65535 Q
"RTN","ZOSVKSOE",76,0)
 ;
"RTN","ZOSVKSOE",77,0)
 S X="ERRHND^%ZOSVKSE",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",78,0)
 S $ZE=""
"RTN","ZOSVKSOE",79,0)
 ;
"RTN","ZOSVKSOE",80,0)
B ; LEV(LEV) = root block
"RTN","ZOSVKSOE",81,0)
 S LEV(LEV)=G
"RTN","ZOSVKSOE",82,0)
 V G
"RTN","ZOSVKSOE",83,0)
 S A=$V(2043,0)
"RTN","ZOSVKSOE",84,0)
 ; find bottom level
"RTN","ZOSVKSOE",85,0)
 I A=2!(A=6) S G=$V(2,-5),LEV=LEV+1 G B
"RTN","ZOSVKSOE",86,0)
 ;
"RTN","ZOSVKSOE",87,0)
 S X="",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",88,0)
 ;
"RTN","ZOSVKSOE",89,0)
 ; W LEV_" Levels in this global"
"RTN","ZOSVKSOE",90,0)
 S (NBLK,LNBLK,NBYTE,LNBYTE)=0,CUR=1
"RTN","ZOSVKSOE",91,0)
 ; LEV(1) = first block number
"RTN","ZOSVKSOE",92,0)
 S ^XTMP("KMPS",KMPSSITE,NUM,KMPSDT,$P(GLO,U),KMPSZU)=LEV(1)_U_GLOINFO
"RTN","ZOSVKSOE",93,0)
C S BLK=LEV(CUR),RET="RETURN^"_$ZN
"RTN","ZOSVKSOE",94,0)
 ; W "Level: "_CUR_", "
"RTN","ZOSVKSOE",95,0)
 ;
"RTN","ZOSVKSOE",96,0)
 S X="ERRHND^%ZOSVKSE",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",97,0)
 ;
"RTN","ZOSVKSOE",98,0)
 D RESTART^%ZOSVKSS
"RTN","ZOSVKSOE",99,0)
 ;
"RTN","ZOSVKSOE",100,0)
 S X="",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",101,0)
 ;
"RTN","ZOSVKSOE",102,0)
 Q:+$G(^XTMP("KMPS","STOP"))
"RTN","ZOSVKSOE",103,0)
RETURN S TOTBLK=NP+TOTBLK,LTOTBLK=LTOTBLK+LSNP
"RTN","ZOSVKSOE",104,0)
 S TOTBYTE=TOTBYTE+NB,LTOTBYTE=LTOTBYTE+LNB
"RTN","ZOSVKSOE",105,0)
 I $ZE="" S CUR=CUR+1 I CUR<LEV G C
"RTN","ZOSVKSOE",106,0)
 ; W %TIM
"RTN","ZOSVKSOE",107,0)
 Q
"RTN","ZOSVKSOE",108,0)
ERRHND ; if there's an error from line tag B or from call
"RTN","ZOSVKSOE",109,0)
 ; to RESTART^%ZOSVKVSS come here and skip the rest      
"RTN","ZOSVKSOE",110,0)
 ; of this global
"RTN","ZOSVKSOE",111,0)
 S X="",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",112,0)
 Q
"RTN","ZOSVKSOE",113,0)
EV1 ;
"RTN","ZOSVKSOE",114,0)
 N GC,GLO,GS
"RTN","ZOSVKSOE",115,0)
 ;
"RTN","ZOSVKSOE",116,0)
 S (TOTBLK,LTOTBLK,TOTBYTE,LTOTBYTE,GC)=0
"RTN","ZOSVKSOE",117,0)
EV2 S GC=$O(GLOBAL(GC)),GS=1
"RTN","ZOSVKSOE",118,0)
 ;
"RTN","ZOSVKSOE",119,0)
 S ^XTMP("KMPS","START",KMPSVOL,NUM)=$H
"RTN","ZOSVKSOE",120,0)
 ;
"RTN","ZOSVKSOE",121,0)
 I GC=""!+$G(^XTMP("KMPS","STOP")) G EVL
"RTN","ZOSVKSOE",122,0)
EV3 S GLO=$P(GLOBAL(GC),",",GS)
"RTN","ZOSVKSOE",123,0)
 I GLO=""!+$G(^XTMP("KMPS","STOP")) G EVL
"RTN","ZOSVKSOE",124,0)
 I GLO="*" G EV2
"RTN","ZOSVKSOE",125,0)
 ; W "Global ^"_$P(GLO,U)
"RTN","ZOSVKSOE",126,0)
 D GLOCHK
"RTN","ZOSVKSOE",127,0)
 S GS=GS+1
"RTN","ZOSVKSOE",128,0)
 G EV3
"RTN","ZOSVKSOE",129,0)
EVL ; N TBLK
"RTN","ZOSVKSOE",130,0)
 ; S TBLK=TOTBLK+LTOTBLK
"RTN","ZOSVKSOE",131,0)
 ; W "Total global blocks in "_DIRNAM_" = "_TBLK
"RTN","ZOSVKSOE",132,0)
 ; W "Total efficiency = "
"RTN","ZOSVKSOE",133,0)
 ; I (TBLK) W ((TOTBYTE+LTOTBYTE)*100)\((2036*TOTBLK)+(2048*LTOTBLK))_"%"
"RTN","ZOSVKSOE",134,0)
 Q
"RTN","ZOSVKSOE",135,0)
ERR ;
"RTN","ZOSVKSOE",136,0)
 I DIRSTAT=-1 S KMPSERR1=DIRNAM_" is dismounted"
"RTN","ZOSVKSOE",137,0)
 I DIRSTAT=-2 S KMPSERR1=DIRNAM_" does not exist"
"RTN","ZOSVKSOE",138,0)
 ; set the error variable
"RTN","ZOSVKSOE",139,0)
 S $ZE="<UDIRECTORY>UC1+6^%ZOSVKSE"
"RTN","ZOSVKSOE",140,0)
 Q
"RTN","ZOSVKSOE",141,0)
 ;-- end code from routine INTEGRIT
"RTN","ZOSVKSOE",142,0)
 ;
"RTN","ZOSVKSOE",143,0)
INTEG1 ;-- code from routine INTEG1
"RTN","ZOSVKSOE",144,0)
 ;
"RTN","ZOSVKSOE",145,0)
 ; place global information into local variable GLOBAL array
"RTN","ZOSVKSOE",146,0)
 ; GLOBAL(1:C) = gbl_info1, gbl_info2, ... * (no '*' on last)
"RTN","ZOSVKSOE",147,0)
 ;    gbl_info = name ^ type ^ protection ^ growth_area ^ root_block (first pointer block) ^ journal ^ collate
"RTN","ZOSVKSOE",148,0)
 ;
"RTN","ZOSVKSOE",149,0)
 N %ST,A,C,END,G,GD,INFO,NAM,P
"RTN","ZOSVKSOE",150,0)
 ;
"RTN","ZOSVKSOE",151,0)
 K GLOBAL
"RTN","ZOSVKSOE",152,0)
 S C=1,GLOBAL(C)=""
"RTN","ZOSVKSOE",153,0)
 V 1
"RTN","ZOSVKSOE",154,0)
 D GFS^%ST
"RTN","ZOSVKSOE",155,0)
 ; obtain global directory (GD) from system table array (%ST)
"RTN","ZOSVKSOE",156,0)
 S GD=$V(%ST("GFOFFSET")+%ST("gfdir"),0,%ST("szdir")),G=0
"RTN","ZOSVKSOE",157,0)
B1 V GD
"RTN","ZOSVKSOE",158,0)
 S END=$V(2046,0,2),NAM="",P=0
"RTN","ZOSVKSOE",159,0)
 ;
"RTN","ZOSVKSOE",160,0)
NEXT G D1:END'>P
"RTN","ZOSVKSOE",161,0)
 ;
"RTN","ZOSVKSOE",162,0)
C1 ; build name
"RTN","ZOSVKSOE",163,0)
 S A=$V(P,0),P=P+1
"RTN","ZOSVKSOE",164,0)
 I A S NAM=NAM_$C(A) G C1
"RTN","ZOSVKSOE",165,0)
 ;
"RTN","ZOSVKSOE",166,0)
 ; info = type ^ protection ^ growth_area ^ root_block (first pointer block) ^ journal ^ collate
"RTN","ZOSVKSOE",167,0)
 S INFO=$V(P,0,"2O")_U_$V(P+2,0)_U_$V(P+3,0,"3O")_U_$V(P+6,0,"3O")_U_$V(P,0)_U_$V(P+1,0)
"RTN","ZOSVKSOE",168,0)
 ;
"RTN","ZOSVKSOE",169,0)
 ; one entry
"RTN","ZOSVKSOE",170,0)
 S GLOBAL=NAM_U_INFO
"RTN","ZOSVKSOE",171,0)
 I $L(GLOBAL(C))>460 S GLOBAL(C)=GLOBAL(C)_"*",C=C+1,GLOBAL(C)=""
"RTN","ZOSVKSOE",172,0)
 ;
"RTN","ZOSVKSOE",173,0)
 S GLOBAL(C)=GLOBAL(C)_GLOBAL_","
"RTN","ZOSVKSOE",174,0)
 ;
"RTN","ZOSVKSOE",175,0)
 S G=G+1,P=P+9,NAM="" G NEXT
"RTN","ZOSVKSOE",176,0)
D1 S GD=$V(2040,0,"3O") I GD G B1
"RTN","ZOSVKSOE",177,0)
 Q
"RTN","ZOSVKSOE",178,0)
 ;-- end code from routine INTEG1
"RTN","ZOSVKSOE",179,0)
 ;
"RTN","ZOSVKSOE",180,0)
ERROR ; ERROR - Tell all SAGG jobs to STOP collection
"RTN","ZOSVKSOE",181,0)
 ;
"RTN","ZOSVKSOE",182,0)
 C 63
"RTN","ZOSVKSOE",183,0)
 S KMPSERR="Error encountered while running SAGG collection routine for volume set "_$G(KMPSVOL)
"RTN","ZOSVKSOE",184,0)
 S KMPSERR2="Last global reference = "_$ZR
"RTN","ZOSVKSOE",185,0)
 S KMPSERR3="Error code = "_$$EC^%ZOSV
"RTN","ZOSVKSOE",186,0)
 I $D(KMPSERR4) S KMPSERR4="For more information, read text at line tag "_KMPSERR4_" in routine ^%ZOSVKSS"
"RTN","ZOSVKSOE",187,0)
 ;
"RTN","ZOSVKSOE",188,0)
 S ^XTMP("KMPS","ERROR",KMPSVOL)="",^XTMP("KMPS","STOP")=1
"RTN","ZOSVKSOE",189,0)
 K ^XTMP("KMPS","START",KMPSVOL)
"RTN","ZOSVKSOE",190,0)
 ;
"RTN","ZOSVKSOE",191,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","ZOSVKSOE",192,0)
 ;
"RTN","ZOSVKSOE",193,0)
 Q
"RTN","ZOSVKSOE",194,0)
 ;
"RTN","ZOSVKSOE",195,0)
UC1VMS ;-- entry point for Cache VMS
"RTN","ZOSVKSOE",196,0)
 ;   code from routine Integrity (Cache v4.1.16)
"RTN","ZOSVKSOE",197,0)
 ;
"RTN","ZOSVKSOE",198,0)
 N GLOARRAY,RC
"RTN","ZOSVKSOE",199,0)
 ;
"RTN","ZOSVKSOE",200,0)
 ; set up GLOARRAY array indexed by global name
"RTN","ZOSVKSOE",201,0)
 S RC=$$GETDIRGL^%ZOSVKSD(VERSION)
"RTN","ZOSVKSOE",202,0)
 ;
"RTN","ZOSVKSOE",203,0)
 I ('+RC) D ERRVMS G ERROR
"RTN","ZOSVKSOE",204,0)
 ;
"RTN","ZOSVKSOE",205,0)
 I '$D(GLOARRAY) S ^XTMP("KMPS",KMPSSITE,NUM," NO GLOBALS ",KMPSVOL)="" Q
"RTN","ZOSVKSOE",206,0)
 ;
"RTN","ZOSVKSOE",207,0)
 O 63:"^^"_DIRNAM
"RTN","ZOSVKSOE",208,0)
 ;
"RTN","ZOSVKSOE",209,0)
 D ALLGLO
"RTN","ZOSVKSOE",210,0)
 ;
"RTN","ZOSVKSOE",211,0)
 Q
"RTN","ZOSVKSOE",212,0)
 ;
"RTN","ZOSVKSOE",213,0)
ALLGLO ;- collect global info
"RTN","ZOSVKSOE",214,0)
 ;
"RTN","ZOSVKSOE",215,0)
 N COLLATE,DATASIZE,FBLK,GLO,GLOINFO,GLOTOTBLKS,GLOPNTBLKS,GLOTOTBYTES
"RTN","ZOSVKSOE",216,0)
 N GLOPNTBYTES,GLOBIGBLKS,GLOBIGBYTES,GLOBIGSTRINGS,GRWBLK
"RTN","ZOSVKSOE",217,0)
 N I,INFO,JRNL,LEV,MSGLIST,PROT,PROTECT,PROTINFO,RC,TPTRBLK,TRY
"RTN","ZOSVKSOE",218,0)
 ;
"RTN","ZOSVKSOE",219,0)
 S GLO="",RC=1
"RTN","ZOSVKSOE",220,0)
 S PROT(0)="N",PROT(1)="R",PROT(2)="RW",PROT(3)="RWD"
"RTN","ZOSVKSOE",221,0)
 ;
"RTN","ZOSVKSOE",222,0)
 F  S GLO=$O(GLOARRAY(GLO)) Q:GLO=""!+$G(^XTMP("KMPS","STOP"))  D  Q:+$G(^XTMP("KMPS","STOP"))!('+RC)
"RTN","ZOSVKSOE",223,0)
 .;
"RTN","ZOSVKSOE",224,0)
 .S (COLLATE,FBLK,GRWBLK,JRNL,PROTECT,TPTRBLK)=""
"RTN","ZOSVKSOE",225,0)
 .S PROTINFO="^^^"
"RTN","ZOSVKSOE",226,0)
 .;
"RTN","ZOSVKSOE",227,0)
 .; return collation value for this global (GLO)
"RTN","ZOSVKSOE",228,0)
 .;S RC=$$GetCollationType^%DM(DIRNAM,GLO,.COLLATE)
"RTN","ZOSVKSOE",229,0)
 .;
"RTN","ZOSVKSOE",230,0)
 .; return protection value for this global (GLO)
"RTN","ZOSVKSOE",231,0)
 .;S RC=$$GetProtectState^%DM(DIRNAM,GLO,.PROTECT)
"RTN","ZOSVKSOE",232,0)
 .;I +RC D
"RTN","ZOSVKSOE",233,0)
 ..; protection - world ^ group ^ owner ^ network
"RTN","ZOSVKSOE",234,0)
 ..;S PROTINFO=PROT(PROTECT\16#4)_U_PROT(PROTECT\4#4)_U_PROT(PROTECT#4)_U_PROT(PROTECT\64#4)
"RTN","ZOSVKSOE",235,0)
 .;
"RTN","ZOSVKSOE",236,0)
 .; return top pointer block and first data block for this global (GLO)
"RTN","ZOSVKSOE",237,0)
 .;S RC=$$GetGlobalPointers^%DM(DIRNAM,GLO,.TPTRBLK,.FBLK)
"RTN","ZOSVKSOE",238,0)
 .;
"RTN","ZOSVKSOE",239,0)
 .;-- these extra logic ideas are from routine ^%GD
"RTN","ZOSVKSOE",240,0)
 .;   this code MUST use %utility($J) to properly work
"RTN","ZOSVKSOE",241,0)
 .;K ^%utility($J)
"RTN","ZOSVKSOE",242,0)
 .;
"RTN","ZOSVKSOE",243,0)
 .; $$Fetch^%GD is NOT a PUBLIC API
"RTN","ZOSVKSOE",244,0)
 .; <<< PUBLIC API $$GetJournalType^%DM did NOT work >>>
"RTN","ZOSVKSOE",245,0)
 .;I $$Fetch^%GD(GLO,1,0) D
"RTN","ZOSVKSOE",246,0)
 ..;S INFO=$G(^%utility($J,U_GLO))
"RTN","ZOSVKSOE",247,0)
 ..;Q:INFO=""
"RTN","ZOSVKSOE",248,0)
 ..;
"RTN","ZOSVKSOE",249,0)
 ..;S GRWBLK=$P(INFO,U,2)
"RTN","ZOSVKSOE",250,0)
 ..;S JRNL=$S($P(INFO,U,4):"Y",1:"N")
"RTN","ZOSVKSOE",251,0)
 ..;
"RTN","ZOSVKSOE",252,0)
 ..;K ^%utility($J)
"RTN","ZOSVKSOE",253,0)
 ..;-- end of extra logic ideas from routine ^%GD
"RTN","ZOSVKSOE",254,0)
 .;
"RTN","ZOSVKSOE",255,0)
 .; global info - '^' delimited
"RTN","ZOSVKSOE",256,0)
 .;         piece 1: first block
"RTN","ZOSVKSOE",257,0)
 .;         piece 2: jrnl^collate
"RTN","ZOSVKSOE",258,0)
 .;         piece 3: bits(blank)
"RTN","ZOSVKSOE",259,0)
 .;         piece 4: growth area block
"RTN","ZOSVKSOE",260,0)
 .;         piece 5: protection:system(blank)
"RTN","ZOSVKSOE",261,0)
 .;         piece 6: protection:world
"RTN","ZOSVKSOE",262,0)
 .;         piece 7: group^owner
"RTN","ZOSVKSOE",263,0)
 .;         piece 8: network^top (first) pointer block
"RTN","ZOSVKSOE",264,0)
 .S GLOINFO=FBLK_U_JRNL_U_COLLATE_"^^"_GRWBLK_"^^"_PROTINFO_U_TPTRBLK
"RTN","ZOSVKSOE",265,0)
 .;
"RTN","ZOSVKSOE",266,0)
 .S ^XTMP("KMPS",KMPSSITE,NUM,KMPSDT,GLO,KMPSZU)=GLOINFO
"RTN","ZOSVKSOE",267,0)
 .;
"RTN","ZOSVKSOE",268,0)
 .; check integrity of a single global
"RTN","ZOSVKSOE",269,0)
 .; will stop if there are more than 999 errors with this global
"RTN","ZOSVKSOE",270,0)
 .S RC=$$GLOINTEG^%ZOSVKSD(VERSION)
"RTN","ZOSVKSOE",271,0)
 .;
"RTN","ZOSVKSOE",272,0)
 .K MSGLIST
"RTN","ZOSVKSOE",273,0)
 .D DCMPST^%ZOSVKSD(VERSION)
"RTN","ZOSVKSOE",274,0)
 .;
"RTN","ZOSVKSOE",275,0)
 .S (LEV,RC)=1
"RTN","ZOSVKSOE",276,0)
 .F I=1:1:MSGLIST D
"RTN","ZOSVKSOE",277,0)
 ..S INFO=MSGLIST(I),BLK=$$BLK(INFO),EFF=$$EFF(INFO)
"RTN","ZOSVKSOE",278,0)
 ..;
"RTN","ZOSVKSOE",279,0)
 ..; more than 999 errors reported
"RTN","ZOSVKSOE",280,0)
 ..I INFO["***Further checking of this global is aborted." S RC=0 D ERRVMS1 Q
"RTN","ZOSVKSOE",281,0)
 ..;
"RTN","ZOSVKSOE",282,0)
 ..I ($P(INFO,":")["Top Pointer Level")!($P(INFO,":")["Top/Bottom Pnt Level") D  Q
"RTN","ZOSVKSOE",283,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,1)=BLK_"^"_EFF_"%^Pointer"
"RTN","ZOSVKSOE",284,0)
 ..I $P(INFO,":")["Pointer Level" D  Q
"RTN","ZOSVKSOE",285,0)
 ...S LEV=LEV+1,^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,LEV)=BLK_"^"_EFF_"%^Pointer"
"RTN","ZOSVKSOE",286,0)
 ..I $P(INFO,":")["Bottom Pointer Level" D  Q
"RTN","ZOSVKSOE",287,0)
 ...S LEV=LEV+1,^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,LEV)=BLK_"^"_EFF_"%^Bottom pointer"
"RTN","ZOSVKSOE",288,0)
 ..I $P(INFO,":")["Data Level" D  Q
"RTN","ZOSVKSOE",289,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,"D")=BLK_"^"_EFF_"%^Data"
"RTN","ZOSVKSOE",290,0)
 ..I $P(INFO,":")["Big Strings" D  Q
"RTN","ZOSVKSOE",291,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,"L")=BLK_"^"_EFF_"%^LongString"
"RTN","ZOSVKSOE",292,0)
 ;
"RTN","ZOSVKSOE",293,0)
 I ('+RC) G ERROR
"RTN","ZOSVKSOE",294,0)
 ;
"RTN","ZOSVKSOE",295,0)
 Q
"RTN","ZOSVKSOE",296,0)
 ;
"RTN","ZOSVKSOE",297,0)
BLK(STRNG)      ;-- function to obtain number of blocks from input string
"RTN","ZOSVKSOE",298,0)
 ;
"RTN","ZOSVKSOE",299,0)
 N BLK
"RTN","ZOSVKSOE",300,0)
 Q:$G(STRNG)="" ""
"RTN","ZOSVKSOE",301,0)
 S BLK=$$NOCOMMA($P($P(STRNG,"=",2)," "))
"RTN","ZOSVKSOE",302,0)
 Q BLK
"RTN","ZOSVKSOE",303,0)
 ;
"RTN","ZOSVKSOE",304,0)
EFF(STRNG)      ;-- function to obtain efficiency from input string
"RTN","ZOSVKSOE",305,0)
 ;
"RTN","ZOSVKSOE",306,0)
 N EFF
"RTN","ZOSVKSOE",307,0)
 Q:$G(STRNG)="" ""
"RTN","ZOSVKSOE",308,0)
 S EFF=$P($P(STRNG,"%"),"(",2)
"RTN","ZOSVKSOE",309,0)
 Q EFF
"RTN","ZOSVKSOE",310,0)
 ;
"RTN","ZOSVKSOE",311,0)
NOCOMMA(IN)     ;-- strip comma from input string
"RTN","ZOSVKSOE",312,0)
 ;
"RTN","ZOSVKSOE",313,0)
 Q $TR(IN,",","")
"RTN","ZOSVKSOE",314,0)
 ;
"RTN","ZOSVKSOE",315,0)
ERRVMS ;
"RTN","ZOSVKSOE",316,0)
 S $ZE="<ERROR>UC1VMS+6^%ZOSVKSE"
"RTN","ZOSVKSOE",317,0)
 I '+RC S KMPSERR1="ERROR: Cannot find global names for "_DIRNAM
"RTN","ZOSVKSOE",318,0)
 Q
"RTN","ZOSVKSOE",319,0)
 ;
"RTN","ZOSVKSOE",320,0)
ERRVMS1 ;
"RTN","ZOSVKSOE",321,0)
 S $ZE="<ERROR>ALLGLO+50^%ZOSVKSE"
"RTN","ZOSVKSOE",322,0)
 S KMPSERR1="ERROR: Over 999 integrity errors with ^"_GLO_" in "_DIRNAM
"RTN","ZOSVKSOE",323,0)
 Q
"RTN","ZOSVKSOS")
0^3^B24921702^B24879489
"RTN","ZOSVKSOS",1,0)
%ZOSVKSS ;OAK/KAK - Automatic INTEGRIT Routine (cont.) (Cache) ;5/9/07  10:44
"RTN","ZOSVKSOS",2,0)
 ;;8.0;KERNEL;**90,94,197,268,456**;Jul 26, 2004
"RTN","ZOSVKSOS",3,0)
 ;
"RTN","ZOSVKSOS",4,0)
 ; Version for Cache
"RTN","ZOSVKSOS",5,0)
 ;
"RTN","ZOSVKSOS",6,0)
RESTART ;-- called by routine C+6^%ZOSVKSE
"RTN","ZOSVKSOS",7,0)
 ; 
"RTN","ZOSVKSOS",8,0)
 ;-- code from routine CHECKPNT
"RTN","ZOSVKSOS",9,0)
 ;
"RTN","ZOSVKSOS",10,0)
 K SUB,C
"RTN","ZOSVKSOS",11,0)
 N B,D,E,FLAG,LE,LL,LN,LNP,TL1
"RTN","ZOSVKSOS",12,0)
 ;
"RTN","ZOSVKSOS",13,0)
 S (ERR,FLAG,NP,NB,LSNP,LNB)=0
"RTN","ZOSVKSOS",14,0)
 ;
"RTN","ZOSVKSOS",15,0)
 S X="",@^%ZOSF("TRAP")
"RTN","ZOSVKSOS",16,0)
 ;
"RTN","ZOSVKSOS",17,0)
 V BLK
"RTN","ZOSVKSOS",18,0)
 S A=$V(2,-5)
"RTN","ZOSVKSOS",19,0)
 V A
"RTN","ZOSVKSOS",20,0)
 S A=",,"_($V(2043,0,1)*16777216+A)_","
"RTN","ZOSVKSOS",21,0)
 ;
"RTN","ZOSVKSOS",22,0)
 S X="ERR^%ZOSVKSS",@^%ZOSF("TRAP")
"RTN","ZOSVKSOS",23,0)
 ;
"RTN","ZOSVKSOS",24,0)
CHK Q:+$G(^XTMP("KMPS","STOP"))
"RTN","ZOSVKSOS",25,0)
 ;
"RTN","ZOSVKSOS",26,0)
 V BLK
"RTN","ZOSVKSOS",27,0)
 S LINK=$V(2040,0,"3O")
"RTN","ZOSVKSOS",28,0)
 S A=$V($P(A,",",3),-7,$P(A,",",4),400)
"RTN","ZOSVKSOS",29,0)
 S TL=$P(A,",",3)\16777216
"RTN","ZOSVKSOS",30,0)
 S NP=NP+A,NB=NB+$P(A,",",2)
"RTN","ZOSVKSOS",31,0)
 ;
"RTN","ZOSVKSOS",32,0)
 ; big global data blocks (type 12)
"RTN","ZOSVKSOS",33,0)
 I FLAG=0,(TL=8)!(TL=12) S FLAG=1 V BLK S B=$V(2,-5) D
"RTN","ZOSVKSOS",34,0)
 .F  Q:'B  V B S B=$V(2040,0,"3O") F N=1:1 Q:$V(N-1*2+1,-6)=""  S X=$V(N-1*2+2,-6) S:$A(X)=3 LNB=LNB+($A(X,2)*2048)+$ZWA(X,3),LSNP=LSNP+$A(X,2)+1
"RTN","ZOSVKSOS",35,0)
 ;
"RTN","ZOSVKSOS",36,0)
CHKB I LINK S BLK=LINK G CHK
"RTN","ZOSVKSOS",37,0)
 ;
"RTN","ZOSVKSOS",38,0)
 ; ragged edge
"RTN","ZOSVKSOS",39,0)
 I $P(A,",",3)#16777216,$P(A,",",3)\16777216-16 G ER6
"RTN","ZOSVKSOS",40,0)
 ;
"RTN","ZOSVKSOS",41,0)
END S X="",@^%ZOSF("TRAP")
"RTN","ZOSVKSOS",42,0)
 ;
"RTN","ZOSVKSOS",43,0)
 ; W "# ptrs = "_NP
"RTN","ZOSVKSOS",44,0)
 S LNBLK=+$G(LNBLK)
"RTN","ZOSVKSOS",45,0)
 ; na% => cannot calculate the percent efficiency of first pointer block
"RTN","ZOSVKSOS",46,0)
 I CUR=1 S ^XTMP("KMPS",KMPSSITE,NUM,$P(GLO,"^"),KMPSZU,KMPSDT,CUR)="1^na%^Pointer"
"RTN","ZOSVKSOS",47,0)
 I (NBLK+LNBLK) D
"RTN","ZOSVKSOS",48,0)
 .; W ", # blks = "_(NBLK+LNBLK)_", # ptrs/blk = "_(NP\(NBLK+LNBLK))
"RTN","ZOSVKSOS",49,0)
 .; W ", eff = "_(((NBYTE+LNBYTE)*100)\((2036*NBLK)+(2048*LNBLK)))_"%"
"RTN","ZOSVKSOS",50,0)
 .S ^XTMP("KMPS",KMPSSITE,NUM,$P(GLO,"^"),KMPSZU,KMPSDT,CUR)=(NBLK+LNBLK)_"^"_(((NBYTE+LNBYTE)*100)\((2036*NBLK)+(2048*LNBLK)))_"%^"_$S(CUR=(LEV-1):"Bottom p",1:"P")_"ointer"
"RTN","ZOSVKSOS",51,0)
 S TL=$P(A,",",3)\16777216
"RTN","ZOSVKSOS",52,0)
 ;
"RTN","ZOSVKSOS",53,0)
 ; m-code blocks (type 16) - do not store into ^XTMP("KMPS")
"RTN","ZOSVKSOS",54,0)
 ; I TL=16 W "Routine level:  # rtns = "_NP
"RTN","ZOSVKSOS",55,0)
 ;
"RTN","ZOSVKSOS",56,0)
 ; global data blocks (type 8) and big global data blocks (type 12)
"RTN","ZOSVKSOS",57,0)
 I TL=8!(TL=12) D
"RTN","ZOSVKSOS",58,0)
 .; I NP W "Data level:  # blks = "_NP_", eff = " W:NP (NB*100\(2036*NP))_"%"
"RTN","ZOSVKSOS",59,0)
 .I NP S ^XTMP("KMPS",KMPSSITE,NUM,$P(GLO,"^"),KMPSZU,KMPSDT,"D")=NP_"^"_$S(NP:NB*100\(2036*NP),1:"")_"%^Data"
"RTN","ZOSVKSOS",60,0)
 .; I LSNP W "Long String level: # blks = "_LSNP_",eff = " W:LSNP (LNB*100\(2048*LSNP))_"%"
"RTN","ZOSVKSOS",61,0)
 .I LSNP S ^XTMP("KMPS",KMPSSITE,NUM,$P(GLO,"^"),KMPSZU,KMPSDT,"L")=LSNP_"^"_$S(LSNP:LNB*100\(2048*LSNP),1:"")_"%^LongString"
"RTN","ZOSVKSOS",62,0)
 S NBLK=NP,LNBLK=LSNP,NBYTE=NB,LNBYTE=LNB
"RTN","ZOSVKSOS",63,0)
 Q
"RTN","ZOSVKSOS",64,0)
 ;-- end code from routine CHECKPNT
"RTN","ZOSVKSOS",65,0)
 ;
"RTN","ZOSVKSOS",66,0)
ERR ;-- code from routine CHECK0
"RTN","ZOSVKSOS",67,0)
 ;
"RTN","ZOSVKSOS",68,0)
 S (LE,LL,ERR)=0
"RTN","ZOSVKSOS",69,0)
 ;
"RTN","ZOSVKSOS",70,0)
 ; global is too large for INTEGRIT - use ^DIAG to check this global
"RTN","ZOSVKSOS",71,0)
 I $ZE?1"<MAXARRAY>".E S ERR=1 Q
"RTN","ZOSVKSOS",72,0)
 ;
"RTN","ZOSVKSOS",73,0)
 S D=BLK,LN=$P(A,",",4),TL=$P(A,",",3)\16777216
"RTN","ZOSVKSOS",74,0)
 ;
"RTN","ZOSVKSOS",75,0)
 S X="ERROR^%ZOSVKSS",@^%ZOSF("TRAP")
"RTN","ZOSVKSOS",76,0)
 ;
"RTN","ZOSVKSOS",77,0)
 V BLK
"RTN","ZOSVKSOS",78,0)
 D CHECK1
"RTN","ZOSVKSOS",79,0)
 Q:ERR
"RTN","ZOSVKSOS",80,0)
 ;
"RTN","ZOSVKSOS",81,0)
 K B
"RTN","ZOSVKSOS",82,0)
 F I=1:2:C-2 S B=C(I)-1#400,B(C(I)-B,B)=""
"RTN","ZOSVKSOS",83,0)
 D CM(1)
"RTN","ZOSVKSOS",84,0)
 Q:ERR
"RTN","ZOSVKSOS",85,0)
 ;
"RTN","ZOSVKSOS",86,0)
 K B
"RTN","ZOSVKSOS",87,0)
 F I=1:2:C-2 I C(I,1) D MB
"RTN","ZOSVKSOS",88,0)
 D CM(249)
"RTN","ZOSVKSOS",89,0)
 Q:ERR
"RTN","ZOSVKSOS",90,0)
 ;
"RTN","ZOSVKSOS",91,0)
 K B
"RTN","ZOSVKSOS",92,0)
 S NP=C\2+NP,NB=NB+LE,A=",,"_(TL*16777216+LL)_","_LN
"RTN","ZOSVKSOS",93,0)
 K C
"RTN","ZOSVKSOS",94,0)
 ;
"RTN","ZOSVKSOS",95,0)
 S X="ERR^%ZOSVKSS",@^%ZOSF("TRAP")
"RTN","ZOSVKSOS",96,0)
 ;
"RTN","ZOSVKSOS",97,0)
 G CHKB
"RTN","ZOSVKSOS",98,0)
 ;
"RTN","ZOSVKSOS",99,0)
ERROR I $ZE?1"<DISK".E!($ZE?1"<DATA".E) G ERDK
"RTN","ZOSVKSOS",100,0)
 G MISC
"RTN","ZOSVKSOS",101,0)
 ;
"RTN","ZOSVKSOS",102,0)
CM(X) S D=""
"RTN","ZOSVKSOS",103,0)
 F I=1:1 S D=$O(B(D)) Q:D=""  V D D ER15:$V(2038,0,"4O")-1431699455!($V(2042,0,"4O")=0) Q:ERR  S B="" F J=1:1 S B=$O(B(D,B)) Q:B=""  I $V(B,0)'=X,$V(B,0)'=255 D ER5
"RTN","ZOSVKSOS",104,0)
 Q
"RTN","ZOSVKSOS",105,0)
 ;
"RTN","ZOSVKSOS",106,0)
MB N A,X,L,BL,J,K,R
"RTN","ZOSVKSOS",107,0)
 ;
"RTN","ZOSVKSOS",108,0)
 V C(I)
"RTN","ZOSVKSOS",109,0)
 F J=1:2 Q:$V(J,-6)=""  S X=$V(J+1,-6) I $E(X)=3 D
"RTN","ZOSVKSOS",110,0)
 .S N=$A(X,2),A=4,L=A+((N+1)*3) I L'=$L(X) D ER18 Q
"RTN","ZOSVKSOS",111,0)
 .S R=$A(X,4)*256+$A(X,3) I (R<1)!(R>2048) D ER19
"RTN","ZOSVKSOS",112,0)
 .F K=0:1:N S BL=(((($A(X,A+3)*256)+$A(X,A+2))*256)+$A(X,A+1)),A=A+3 S B=BL-1#400 I $D(B(BL-B,B)) D ER20 S B(BL-B,B)=C(I)_","_J_","_K
"RTN","ZOSVKSOS",113,0)
 Q
"RTN","ZOSVKSOS",114,0)
 ;-- end code from routine CHECK0
"RTN","ZOSVKSOS",115,0)
 ;
"RTN","ZOSVKSOS",116,0)
CHECK1 ;-- code from routine CHECK1
"RTN","ZOSVKSOS",117,0)
 ;
"RTN","ZOSVKSOS",118,0)
 F C=1:2 Q:$V(C,-5)=""  S SUB(C)=$V(C,-5)
"RTN","ZOSVKSOS",119,0)
 F I=1:2:C-2 D
"RTN","ZOSVKSOS",120,0)
 .S C(I)=$V(I+1,-6),C(I,1)=C(I)\8388608#2,C(I)=C(I)#8388608
"RTN","ZOSVKSOS",121,0)
 .I C(I)=BLK G ER10
"RTN","ZOSVKSOS",122,0)
 I $P(A,",",3)#16777216-C(1),$P(A,",",3)\16777216-16 G ER3
"RTN","ZOSVKSOS",123,0)
 F E=1:2:C-2 S D=C(E) V D D CH Q:ERR
"RTN","ZOSVKSOS",124,0)
 I TL=16,LINK S D=LINK V D S LL=$V(2,-5)
"RTN","ZOSVKSOS",125,0)
 Q
"RTN","ZOSVKSOS",126,0)
 ;
"RTN","ZOSVKSOS",127,0)
CH I $V(0,0)#256 G ER7
"RTN","ZOSVKSOS",128,0)
 S TL1=$V(2043,0,1)
"RTN","ZOSVKSOS",129,0)
 I (TL=8)!(TL=12) D
"RTN","ZOSVKSOS",130,0)
 .I 'C(E,1),TL1'=8 G ER16
"RTN","ZOSVKSOS",131,0)
 .I C(E,1),TL1'=12 G ER17
"RTN","ZOSVKSOS",132,0)
 I (TL-8),(TL-12),$V(2043,0,1)-TL G ER12
"RTN","ZOSVKSOS",133,0)
 S LE=LE+$V(2046,0,2)
"RTN","ZOSVKSOS",134,0)
 I $V(1,-5)'=SUB(E) G ER8
"RTN","ZOSVKSOS",135,0)
 Q:TL=16
"RTN","ZOSVKSOS",136,0)
 S LL=$V(2040,0,"3O") I E+2<C,LL-C(E+2) G ER9
"RTN","ZOSVKSOS",137,0)
 I $V(1,-6)']LN G ER1
"RTN","ZOSVKSOS",138,0)
 S LN=$V(-1,-6),LNP=$V(-1,-5)
"RTN","ZOSVKSOS",139,0)
 Q
"RTN","ZOSVKSOS",140,0)
 ;-- end code from routine CHECK1
"RTN","ZOSVKSOS",141,0)
 ;
"RTN","ZOSVKSOS",142,0)
 ;-- code from routine CHECKERR
"RTN","ZOSVKSOS",143,0)
 ;
"RTN","ZOSVKSOS",144,0)
ER1 ; error: the first node in block D is $V(1,-5) and it should collate after the previous block's last node, which was LNP        
"RTN","ZOSVKSOS",145,0)
 S KMPSERR4="ER1",ERR=1
"RTN","ZOSVKSOS",146,0)
 Q
"RTN","ZOSVKSOS",147,0)
ER3 ; error: pointer block BLK has a first pointer of C(1) [ The node is SUB(1) ] but the link from the previous lower level block is $P(A,",",3)#16777216  
"RTN","ZOSVKSOS",148,0)
 S KMPSERR4="ER3",ERR=1
"RTN","ZOSVKSOS",149,0)
 Q
"RTN","ZOSVKSOS",150,0)
ER5 ; block B+D, which is pointed to by block BLK appears to be available in map block D - checking of this global will continue
"RTN","ZOSVKSOS",151,0)
 S KMPSERR4="ER5"
"RTN","ZOSVKSOS",152,0)
 I '$V(B,0) Q
"RTN","ZOSVKSOS",153,0)
 ; block B+D, which is pointed to by block BLK has code $V(B,0) in the map block D whereas code X was expected - checking of this global will continue
"RTN","ZOSVKSOS",154,0)
 Q
"RTN","ZOSVKSOS",155,0)
ER6 ; error: pointer block BLK should have had a right link
"RTN","ZOSVKSOS",156,0)
 ; V BLK F I=1:2 Q:$V(I,-6)=""
"RTN","ZOSVKSOS",157,0)
 ; according to the lower level block $V(I-1,-5), which had a link to block $P(A,",",3)#16777216
"RTN","ZOSVKSOS",158,0)
 S KMPSERR4="ER6",ERR=1
"RTN","ZOSVKSOS",159,0)
 Q
"RTN","ZOSVKSOS",160,0)
ER7 ; error: the 1st byte of block D should have been zero - the pointer block was BLK
"RTN","ZOSVKSOS",161,0)
 S KMPSERR4="ER7",ERR=1
"RTN","ZOSVKSOS",162,0)
 Q
"RTN","ZOSVKSOS",163,0)
ER8 ; error: the lower block's first node didn't match the pointer node - node E+1\2 in pointer block BLK was: SUB(E) - the 1st node in the lower level block D was: $V(1,-5)
"RTN","ZOSVKSOS",164,0)
 S KMPSERR4="ER8",ERR=1
"RTN","ZOSVKSOS",165,0)
 Q
"RTN","ZOSVKSOS",166,0)
ER9 ; error: the link in block D is LL although the pointer block BLK specifies that C(E+2) should be the next block
"RTN","ZOSVKSOS",167,0)
 S KMPSERR4="ER9",ERR=1
"RTN","ZOSVKSOS",168,0)
 Q
"RTN","ZOSVKSOS",169,0)
ER10 ; error: node I+1\2 in block BLK points to itself - the node is: SUB(I)
"RTN","ZOSVKSOS",170,0)
 S KMPSERR4="ER10",ERR=1
"RTN","ZOSVKSOS",171,0)
 Q
"RTN","ZOSVKSOS",172,0)
ER12 ; error: block D, which is pointed to by pointer block BLK has a block type of $V(2043,0,1) whereas a block type of TL was expected
"RTN","ZOSVKSOS",173,0)
 S KMPSERR4="ER12",ERR=1
"RTN","ZOSVKSOS",174,0)
 Q
"RTN","ZOSVKSOS",175,0)
ER15 ; error: map block D does not have a correct map label - the pointer block was BLK
"RTN","ZOSVKSOS",176,0)
 S KMPSERR4="ER15",ERR=1
"RTN","ZOSVKSOS",177,0)
 Q
"RTN","ZOSVKSOS",178,0)
 ;
"RTN","ZOSVKSOS",179,0)
ER16 ; block D, which is pointed to by pointer block BLK has a block type of $V(2043,0,1) whereas a block type of 8 was expected since the pointer block say big data nodes are not present
"RTN","ZOSVKSOS",180,0)
 ; checking of this global will continue if $V(2043,0,1)=12
"RTN","ZOSVKSOS",181,0)
 I $V(2043,0,1)=12 Q
"RTN","ZOSVKSOS",182,0)
 ; else error
"RTN","ZOSVKSOS",183,0)
 S KMPSERR="ER16",ERR=1
"RTN","ZOSVKSOS",184,0)
 Q
"RTN","ZOSVKSOS",185,0)
 ;
"RTN","ZOSVKSOS",186,0)
ER17 ; block D, which is pointed to by pointer block BLK has a block type of $V(2043,0,1),whereas a block type of 12 was expected since the pointer block says big data nodes are present
"RTN","ZOSVKSOS",187,0)
 ; checking of this global will continue if $V(2043,0,1)=8
"RTN","ZOSVKSOS",188,0)
 I $V(2043,0,1)=8 Q
"RTN","ZOSVKSOS",189,0)
 ; else error
"RTN","ZOSVKSOS",190,0)
 S KMPSERR="ER17",ERR=1
"RTN","ZOSVKSOS",191,0)
 Q
"RTN","ZOSVKSOS",192,0)
 ;
"RTN","ZOSVKSOS",193,0)
ER18 ; node J+1\2 in big data block C(I), which is pointed to by block BLK says number of data blocks is  N, but length of node is $L(X) rather than L
"RTN","ZOSVKSOS",194,0)
 ; this big string node will not be checked - checking of this global will continue
"RTN","ZOSVKSOS",195,0)
 Q
"RTN","ZOSVKSOS",196,0)
 ;
"RTN","ZOSVKSOS",197,0)
ER19 ; node J+1\2 in big data block C(I), which is pointed to by block BLK says it has R bytes in last block, which is illegal - checking of this global will continue        
"RTN","ZOSVKSOS",198,0)
 Q
"RTN","ZOSVKSOS",199,0)
 ;
"RTN","ZOSVKSOS",200,0)
ER20 ; node J+1\2 in big data block C(I), which is pointed to by block BLK has data block BL which is also used as data block $P(B(BL-B,B),",",3) in node $P(B(BL-B,B),",",2)+1\2 of block $P(B(BL-B,B),",",1)
"RTN","ZOSVKSOS",201,0)
 ; checking of this global will continue
"RTN","ZOSVKSOS",202,0)
 Q
"RTN","ZOSVKSOS",203,0)
 ;
"RTN","ZOSVKSOS",204,0)
ERDK ; if D-BL error in lower block D - pointer block is BLK
"RTN","ZOSVKSOS",205,0)
 ; else error in pointer block D - last node in prev pntr block was LNP
"RTN","ZOSVKSOS",206,0)
 S KMPSERR="ERDK",ERR=1
"RTN","ZOSVKSOS",207,0)
 Q
"RTN","ZOSVKSOS",208,0)
 ;
"RTN","ZOSVKSOS",209,0)
MISC ; misc error
"RTN","ZOSVKSOS",210,0)
 S KMPSERR="MISC",ERR=1
"RTN","ZOSVKSOS",211,0)
 Q
"RTN","ZOSVKSVE")
1^4^^B27388696
"RTN","ZOSVKSVS")
0^5^B4173^B12851337
"RTN","ZOSVKSVS",1,0)
%ZOSVKSS ;OAK/KAK - Automatic %GE Routine (DSM) ;14 OCT 92 4:30 pm
"RTN","ZOSVKSVS",2,0)
 ;;8.0;KERNEL;**90,94,197,268,456**;Jul 26, 2004
"RTN","ZOSVKSVS",3,0)
 ;
"RTN","ZOSVKSVS",4,0)
 Q
"VER")
8.0^22.0
"BLD",799,6)
^372
**END**
**END**
