Released IB*2*232 SEQ #256
Extracted from mail message
**KIDS**:IB*2.0*232^

**INSTALL NAME**
IB*2.0*232
"BLD",4196,0)
IB*2.0*232^INTEGRATED BILLING^0^3040728^y
"BLD",4196,1,0)
^^1^1^3040518^
"BLD",4196,1,1,0)
EDI/ENHANCEMENTS HIPAA COMPLIANCE
"BLD",4196,4,0)
^9.64PA^355.91^12
"BLD",4196,4,2,0)
2
"BLD",4196,4,2,2,0)
^9.641^2.312^1
"BLD",4196,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",4196,4,2,2,2.312,1,0)
^9.6411^16^1
"BLD",4196,4,2,2,2.312,1,16,0)
PT. RELATIONSHIP TO INSURED
"BLD",4196,4,2,222)
y^n^p^^^^n^^n
"BLD",4196,4,2,224)
 
"BLD",4196,4,36,0)
36
"BLD",4196,4,36,2,0)
^9.641^36^1
"BLD",4196,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",4196,4,36,2,36,1,0)
^9.6411^4.11^10
"BLD",4196,4,36,2,36,1,4.01,0)
PERF PROV SECOND ID TYPE HCFA
"BLD",4196,4,36,2,36,1,4.02,0)
PERF PROV SECOND ID TYPE UB
"BLD",4196,4,36,2,36,1,4.03,0)
SECONDARY ID REQUIREMENTS
"BLD",4196,4,36,2,36,1,4.04,0)
DELETE 2006 4.04
"BLD",4196,4,36,2,36,1,4.05,0)
DELETE 2006 4.05
"BLD",4196,4,36,2,36,1,4.06,0)
DELETE 2006 4.06
"BLD",4196,4,36,2,36,1,4.07,0)
DELETE 2006 4.07
"BLD",4196,4,36,2,36,1,4.08,0)
DELETE 2006 4.08
"BLD",4196,4,36,2,36,1,4.1,0)
DELETE 2006 4.1
"BLD",4196,4,36,2,36,1,4.11,0)
DELETE 2006 4.11
"BLD",4196,4,36,222)
y^n^p^^^^n^^n
"BLD",4196,4,36,224)
 
"BLD",4196,4,350.8,0)
350.8
"BLD",4196,4,350.8,222)
y^n^f^^n^^y^o^n
"BLD",4196,4,350.8,224)
I $F(".IB086.IB087.IB094.IB121.IB308.IB315.IB321.IB322.IB323.","."_$P($G(^IBE(350.8,+Y,0)),U,1)_".")
"BLD",4196,4,355.9,0)
355.9
"BLD",4196,4,355.9,2,0)
^9.641^355.9^1
"BLD",4196,4,355.9,2,355.9,0)
IB BILLING PRACTITIONER ID  (File-top level)
"BLD",4196,4,355.9,2,355.9,1,0)
^9.6411^.03^1
"BLD",4196,4,355.9,2,355.9,1,.03,0)
PROVIDER ID CARE UNIT
"BLD",4196,4,355.9,222)
y^n^p^^^^n^^n
"BLD",4196,4,355.9,224)
 
"BLD",4196,4,355.91,0)
355.91
"BLD",4196,4,355.91,2,0)
^9.641^355.91^1
"BLD",4196,4,355.91,2,355.91,0)
IB INSURANCE CO LEVEL BILLING PROV ID  (File-top level)
"BLD",4196,4,355.91,2,355.91,1,0)
^9.6411^.03^1
"BLD",4196,4,355.91,2,355.91,1,.03,0)
PROVIDER ID CARE UNIT
"BLD",4196,4,355.91,222)
y^n^p^^^^n^^n
"BLD",4196,4,355.91,224)
 
"BLD",4196,4,355.92,0)
355.92
"BLD",4196,4,355.92,222)
y^n^f^^^^n
"BLD",4196,4,355.93,0)
355.93
"BLD",4196,4,355.93,2,0)
^9.641^355.93^1
"BLD",4196,4,355.93,2,355.93,0)
IB NON VA BILLING PROVIDER  (File-top level)
"BLD",4196,4,355.93,2,355.93,1,0)
^9.6411^.02^5
"BLD",4196,4,355.93,2,355.93,1,.01,0)
NAME
"BLD",4196,4,355.93,2,355.93,1,.02,0)
PROVIDER TYPE
"BLD",4196,4,355.93,2,355.93,1,.1,0)
STREET ADDRESS LINE 2
"BLD",4196,4,355.93,2,355.93,1,.11,0)
X12 TYPE OF FACILITY
"BLD",4196,4,355.93,2,355.93,1,.12,0)
STATE LICENSE #
"BLD",4196,4,355.93,222)
y^n^p^^^^n^^n
"BLD",4196,4,355.93,224)
 
"BLD",4196,4,355.97,0)
355.97
"BLD",4196,4,355.97,222)
y^n^f^^y^^y^o^n
"BLD",4196,4,355.97,224)
I $$INCLUDE^IBY232PR(97,Y)
"BLD",4196,4,364.5,0)
364.5
"BLD",4196,4,364.5,222)
n^n^f^^y^^y^o^n
"BLD",4196,4,364.5,224)
I $$INCLUDE^IBY232PR(5,Y)
"BLD",4196,4,364.6,0)
364.6
"BLD",4196,4,364.6,222)
y^n^f^^y^^y^o^n
"BLD",4196,4,364.6,224)
I $$INCLUDE^IBY232PR(6,Y)
"BLD",4196,4,364.7,0)
364.7
"BLD",4196,4,364.7,222)
y^n^f^^y^^y^o^n
"BLD",4196,4,364.7,224)
I $$INCLUDE^IBY232PR(7,Y)
"BLD",4196,4,399,0)
399
"BLD",4196,4,399,2,0)
^9.641^399^2
"BLD",4196,4,399,2,399,0)
BILL/CLAIMS  (File-top level)
"BLD",4196,4,399,2,399,1,0)
^9.6411^.22^5
"BLD",4196,4,399,2,399,1,.22,0)
DEFAULT DIVISION
"BLD",4196,4,399,2,399,1,101,0)
PRIMARY INSURANCE CARRIER
"BLD",4196,4,399,2,399,1,102,0)
SECONDARY INSURANCE CARRIER
"BLD",4196,4,399,2,399,1,103,0)
TERTIARY INSURANCE CARRIER
"BLD",4196,4,399,2,399,1,232,0)
NON-VA FACILITY
"BLD",4196,4,399,2,399.0222,0)
PROVIDER  (sub-file)
"BLD",4196,4,399,2,399.0222,1,0)
^9.6411^.14^14
"BLD",4196,4,399,2,399.0222,1,.01,0)
FUNCTION
"BLD",4196,4,399,2,399.0222,1,.02,0)
PERFORMED BY
"BLD",4196,4,399,2,399.0222,1,.05,0)
PRIMARY INS CO ID NUMBER
"BLD",4196,4,399,2,399.0222,1,.06,0)
SECONDARY INS CO ID NUMBER
"BLD",4196,4,399,2,399.0222,1,.07,0)
TERTIARY INS CO ID NUMBER
"BLD",4196,4,399,2,399.0222,1,.09,0)
DELETE 2006 .09
"BLD",4196,4,399,2,399.0222,1,.1,0)
DELETE 2006 .1
"BLD",4196,4,399,2,399.0222,1,.11,0)
DELETE 2006 .11
"BLD",4196,4,399,2,399.0222,1,.12,0)
PRIM INS PROVIDER ID TYPE
"BLD",4196,4,399,2,399.0222,1,.13,0)
SEC INS PROVIDER ID TYPE
"BLD",4196,4,399,2,399.0222,1,.14,0)
TERT INS PROVIDER ID TYPE
"BLD",4196,4,399,2,399.0222,1,1.01,0)
DELETE 2006 1.01
"BLD",4196,4,399,2,399.0222,1,1.02,0)
DELETE 2006 1.02
"BLD",4196,4,399,2,399.0222,1,1.03,0)
DELETE 2006 1.03
"BLD",4196,4,399,222)
y^n^p^^^^n^^n
"BLD",4196,4,399,224)
 
"BLD",4196,4,"APDD",2,2.312)
 
"BLD",4196,4,"APDD",2,2.312,16)
 
"BLD",4196,4,"APDD",36,36)
 
"BLD",4196,4,"APDD",36,36,4.01)
 
"BLD",4196,4,"APDD",36,36,4.02)
 
"BLD",4196,4,"APDD",36,36,4.03)
 
"BLD",4196,4,"APDD",36,36,4.04)
 
"BLD",4196,4,"APDD",36,36,4.05)
 
"BLD",4196,4,"APDD",36,36,4.06)
 
"BLD",4196,4,"APDD",36,36,4.07)
 
"BLD",4196,4,"APDD",36,36,4.08)
 
"BLD",4196,4,"APDD",36,36,4.1)
 
"BLD",4196,4,"APDD",36,36,4.11)
 
"BLD",4196,4,"APDD",355.9,355.9)
 
"BLD",4196,4,"APDD",355.9,355.9,.03)
 
"BLD",4196,4,"APDD",355.91,355.91)
 
"BLD",4196,4,"APDD",355.91,355.91,.03)
 
"BLD",4196,4,"APDD",355.93,355.93)
 
"BLD",4196,4,"APDD",355.93,355.93,.01)
 
"BLD",4196,4,"APDD",355.93,355.93,.02)
 
"BLD",4196,4,"APDD",355.93,355.93,.1)
 
"BLD",4196,4,"APDD",355.93,355.93,.11)
 
"BLD",4196,4,"APDD",355.93,355.93,.12)
 
"BLD",4196,4,"APDD",399,399)
 
"BLD",4196,4,"APDD",399,399,.22)
 
"BLD",4196,4,"APDD",399,399,101)
 
"BLD",4196,4,"APDD",399,399,102)
 
"BLD",4196,4,"APDD",399,399,103)
 
"BLD",4196,4,"APDD",399,399,232)
 
"BLD",4196,4,"APDD",399,399.0222)
 
"BLD",4196,4,"APDD",399,399.0222,.01)
 
"BLD",4196,4,"APDD",399,399.0222,.02)
 
"BLD",4196,4,"APDD",399,399.0222,.05)
 
"BLD",4196,4,"APDD",399,399.0222,.06)
 
"BLD",4196,4,"APDD",399,399.0222,.07)
 
"BLD",4196,4,"APDD",399,399.0222,.09)
 
"BLD",4196,4,"APDD",399,399.0222,.1)
 
"BLD",4196,4,"APDD",399,399.0222,.11)
 
"BLD",4196,4,"APDD",399,399.0222,.12)
 
"BLD",4196,4,"APDD",399,399.0222,.13)
 
"BLD",4196,4,"APDD",399,399.0222,.14)
 
"BLD",4196,4,"APDD",399,399.0222,1.01)
 
"BLD",4196,4,"APDD",399,399.0222,1.02)
 
"BLD",4196,4,"APDD",399,399.0222,1.03)
 
"BLD",4196,4,"B",2,2)
 
"BLD",4196,4,"B",36,36)
 
"BLD",4196,4,"B",350.8,350.8)
 
"BLD",4196,4,"B",355.9,355.9)
 
"BLD",4196,4,"B",355.91,355.91)
 
"BLD",4196,4,"B",355.92,355.92)
 
"BLD",4196,4,"B",355.93,355.93)
 
"BLD",4196,4,"B",355.97,355.97)
 
"BLD",4196,4,"B",364.5,364.5)
 
"BLD",4196,4,"B",364.6,364.6)
 
"BLD",4196,4,"B",364.7,364.7)
 
"BLD",4196,4,"B",399,399)
 
"BLD",4196,"INI")
IBY232PR
"BLD",4196,"INIT")
IBY232PO
"BLD",4196,"KRN",0)
^9.67PA^8989.52^19
"BLD",4196,"KRN",.4,0)
.4
"BLD",4196,"KRN",.401,0)
.401
"BLD",4196,"KRN",.402,0)
.402
"BLD",4196,"KRN",.402,"NM",0)
^9.68A^3^3
"BLD",4196,"KRN",.402,"NM",1,0)
IB SCREEN8H    FILE #399^399^0
"BLD",4196,"KRN",.402,"NM",2,0)
IB SCREEN82    FILE #399^399^0
"BLD",4196,"KRN",.402,"NM",3,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",4196,"KRN",.402,"NM","B","IB SCREEN82    FILE #399",2)
 
"BLD",4196,"KRN",.402,"NM","B","IB SCREEN8H    FILE #399",1)
 
"BLD",4196,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",3)
 
"BLD",4196,"KRN",.403,0)
.403
"BLD",4196,"KRN",.5,0)
.5
"BLD",4196,"KRN",.84,0)
.84
"BLD",4196,"KRN",3.6,0)
3.6
"BLD",4196,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",4196,"KRN",3.8,0)
3.8
"BLD",4196,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",4196,"KRN",3.8,"NM",1,0)
MCH^^0
"BLD",4196,"KRN",3.8,"NM","B","MCH",1)
 
"BLD",4196,"KRN",9.2,0)
9.2
"BLD",4196,"KRN",9.8,0)
9.8
"BLD",4196,"KRN",9.8,"NM",0)
^9.68A^48^43
"BLD",4196,"KRN",9.8,"NM",1,0)
IBCE837^^0^B83651112
"BLD",4196,"KRN",9.8,"NM",2,0)
IBCE837A^^0^B30189202
"BLD",4196,"KRN",9.8,"NM",3,0)
IBCEF2^^0^B52022759
"BLD",4196,"KRN",9.8,"NM",4,0)
IBCESRV^^0^B62790831
"BLD",4196,"KRN",9.8,"NM",6,0)
IBCEF7^^0^B50002209
"BLD",4196,"KRN",9.8,"NM",7,0)
IBCSC8H^^0^B20858744
"BLD",4196,"KRN",9.8,"NM",8,0)
IBCEP8^^0^B34456907
"BLD",4196,"KRN",9.8,"NM",9,0)
IBCEF71^^0^B63586880
"BLD",4196,"KRN",9.8,"NM",10,0)
IBCSC3^^0^B31826832
"BLD",4196,"KRN",9.8,"NM",11,0)
IBCEF4^^0^B24863277
"BLD",4196,"KRN",9.8,"NM",12,0)
IBCBB1^^0^B57235568
"BLD",4196,"KRN",9.8,"NM",14,0)
IBCEU^^0^B56578533
"BLD",4196,"KRN",9.8,"NM",15,0)
IBCEU5^^0^B87277838
"BLD",4196,"KRN",9.8,"NM",17,0)
IBCEFG1^^0^B26004197
"BLD",4196,"KRN",9.8,"NM",18,0)
IBCEP6^^0^B9434133
"BLD",4196,"KRN",9.8,"NM",19,0)
IBCEP5^^0^B30947898
"BLD",4196,"KRN",9.8,"NM",20,0)
IBCEP5A^^0^B17570421
"BLD",4196,"KRN",9.8,"NM",21,0)
IBCEF72^^0^B52208201
"BLD",4196,"KRN",9.8,"NM",22,0)
IBCEP2^^0^B57941761
"BLD",4196,"KRN",9.8,"NM",23,0)
IBCEF73^^0^B55011921
"BLD",4196,"KRN",9.8,"NM",24,0)
IBCEP2A^^0^B17487545
"BLD",4196,"KRN",9.8,"NM",25,0)
IBCSC82^^0^B14789245
"BLD",4196,"KRN",9.8,"NM",26,0)
IBEFUNC^^0^B44497484
"BLD",4196,"KRN",9.8,"NM",27,0)
IBCBB21^^0^B10290219
"BLD",4196,"KRN",9.8,"NM",28,0)
IBCBB2^^0^B34251176
"BLD",4196,"KRN",9.8,"NM",31,0)
IBCEP7^^0^B81966703
"BLD",4196,"KRN",9.8,"NM",32,0)
IBCEP3^^0^B35967297
"BLD",4196,"KRN",9.8,"NM",33,0)
IBCEP4A^^0^B48679566
"BLD",4196,"KRN",9.8,"NM",34,0)
IBCEP2B^^0^B43061345
"BLD",4196,"KRN",9.8,"NM",35,0)
IBCEF74^^0^B58401918
"BLD",4196,"KRN",9.8,"NM",36,0)
IBCNSC1^^0^B15254105
"BLD",4196,"KRN",9.8,"NM",37,0)
IBCSCH^^0^B68324972
"BLD",4196,"KRN",9.8,"NM",38,0)
IBCNSCD^^0^B21287239
"BLD",4196,"KRN",9.8,"NM",39,0)
IBCEP^^0^B21365949
"BLD",4196,"KRN",9.8,"NM",40,0)
IBCEP5B^^0^B72371827
"BLD",4196,"KRN",9.8,"NM",41,0)
IBCEP5C^^0^B41166821
"BLD",4196,"KRN",9.8,"NM",42,0)
IBCEP0A^^0^B40805968
"BLD",4196,"KRN",9.8,"NM",43,0)
IBCEQ1^^0^B30063077
"BLD",4196,"KRN",9.8,"NM",44,0)
IBCEQ1A^^0^B62244204
"BLD",4196,"KRN",9.8,"NM",45,0)
IBCU^^0^B36886371
"BLD",4196,"KRN",9.8,"NM",46,0)
IBCNSC01^^0^B49699490
"BLD",4196,"KRN",9.8,"NM",47,0)
IBCEP7A^^0^B3300559
"BLD",4196,"KRN",9.8,"NM",48,0)
IBCEP0^^0^B58196901
"BLD",4196,"KRN",9.8,"NM","B","IBCBB1",12)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCBB2",28)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCBB21",27)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCE837",1)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCE837A",2)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF2",3)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF4",11)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF7",6)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF71",9)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF72",21)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF73",23)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEF74",35)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEFG1",17)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP",39)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP0",48)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP0A",42)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP2",22)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP2A",24)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP2B",34)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP3",32)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP4A",33)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP5",19)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP5A",20)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP5B",40)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP5C",41)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP6",18)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP7",31)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP7A",47)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEP8",8)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEQ1",43)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEQ1A",44)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCESRV",4)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEU",14)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCEU5",15)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCNSC01",46)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCNSC1",36)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCNSCD",38)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCSC3",10)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCSC82",25)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCSC8H",7)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCSCH",37)
 
"BLD",4196,"KRN",9.8,"NM","B","IBCU",45)
 
"BLD",4196,"KRN",9.8,"NM","B","IBEFUNC",26)
 
"BLD",4196,"KRN",19,0)
19
"BLD",4196,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",4196,"KRN",19,"NM",1,0)
IBCE PROVIDER ID QUERY^^0
"BLD",4196,"KRN",19,"NM","B","IBCE PROVIDER ID QUERY",1)
 
"BLD",4196,"KRN",19.1,0)
19.1
"BLD",4196,"KRN",101,0)
101
"BLD",4196,"KRN",101,"NM",0)
^9.68A^1^1
"BLD",4196,"KRN",101,"NM",1,0)
IBCE PRVFAC EDIT^^0
"BLD",4196,"KRN",101,"NM","B","IBCE PRVFAC EDIT",1)
 
"BLD",4196,"KRN",409.61,0)
409.61
"BLD",4196,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",4196,"KRN",409.61,"NM",1,0)
IBCE PRVFAC MAINT^^0
"BLD",4196,"KRN",409.61,"NM","B","IBCE PRVFAC MAINT",1)
 
"BLD",4196,"KRN",771,0)
771
"BLD",4196,"KRN",870,0)
870
"BLD",4196,"KRN",8989.51,0)
8989.51
"BLD",4196,"KRN",8989.52,0)
8989.52
"BLD",4196,"KRN",8994,0)
8994
"BLD",4196,"KRN","B",.4,.4)
 
"BLD",4196,"KRN","B",.401,.401)
 
"BLD",4196,"KRN","B",.402,.402)
 
"BLD",4196,"KRN","B",.403,.403)
 
"BLD",4196,"KRN","B",.5,.5)
 
"BLD",4196,"KRN","B",.84,.84)
 
"BLD",4196,"KRN","B",3.6,3.6)
 
"BLD",4196,"KRN","B",3.8,3.8)
 
"BLD",4196,"KRN","B",9.2,9.2)
 
"BLD",4196,"KRN","B",9.8,9.8)
 
"BLD",4196,"KRN","B",19,19)
 
"BLD",4196,"KRN","B",19.1,19.1)
 
"BLD",4196,"KRN","B",101,101)
 
"BLD",4196,"KRN","B",409.61,409.61)
 
"BLD",4196,"KRN","B",771,771)
 
"BLD",4196,"KRN","B",870,870)
 
"BLD",4196,"KRN","B",8989.51,8989.51)
 
"BLD",4196,"KRN","B",8989.52,8989.52)
 
"BLD",4196,"KRN","B",8994,8994)
 
"BLD",4196,"QUES",0)
^9.62^^
"BLD",4196,"REQB",0)
^9.611^6^4
"BLD",4196,"REQB",2,0)
IB*2.0*184^2
"BLD",4196,"REQB",4,0)
IB*2.0*196^2
"BLD",4196,"REQB",5,0)
IB*2.0*245^2
"BLD",4196,"REQB",6,0)
IB*2.0*239^2
"BLD",4196,"REQB","B","IB*2.0*184",2)
 
"BLD",4196,"REQB","B","IB*2.0*196",4)
 
"BLD",4196,"REQB","B","IB*2.0*239",6)
 
"BLD",4196,"REQB","B","IB*2.0*245",5)
 
"DATA",350.8,86,0)
IB086^MEDICARE policy assigned to this UB92 is not a PART A policy.^IB086^1^3^
"DATA",350.8,87,0)
IB087^MEDICARE policy assigned to this HCFA-1500 bill is not a PART B policy.^IB087^1^3
"DATA",350.8,94,0)
IB094^The billable charges for this secondary claim equals zero.^IB094^1^3
"DATA",350.8,274,0)
IB308^Bills with more than 50 procedures must be printed locally.^IB308^1^3
"DATA",350.8,283,0)
IB315^Rx's billed in UB92 format must be forced to print locally^IB315^1^3
"DATA",350.8,296,0)
IB321^Attending/rendering provider must have SSN or EIN defined^IB321^1^3
"DATA",350.8,298,0)
IB121^MRA request claims cannot be forced to print^IB121^1^1
"DATA",350.8,299,0)
IB322^Payer sequence can't be skipped when adding insurance to the claim^IB322^1^3
"DATA",350.8,300,0)
IB323^Payer sequence is missing - must be PRIMARY/SECONDARY/TERTIARY^IB323^1^3
"DATA",355.97,24,0)
PPO NUMBER^2^B3^^^0
"DATA",355.97,25,0)
HMO NUMBER^2^BQ^^^0
"DATA",355.97,25,1)
^^^^^^0
"DATA",355.97,26,0)
SOCIAL SECURITY NUMBER^1^SY^^^1
"DATA",355.97,26,1)
^^^^^^1^
"DATA",355.97,27,0)
STATE INDUSTRIAL ACCIDENT PROV^0^X5^^^1
"DATA",355.97,27,1)
^^^^^^1
"DATA",355.97,28,0)
LOCATION NUMBER^0^LU^^^1
"DATA",355.97,28,1)
^^^^^^0
"DATA",355.97,29,0)
BILLING FACILITY PRIMARY ID^2^1J^^^0
"DATA",355.97,29,1)
^^^^^^0^0^1
"DATA",364.5,101,0)
N-OTH INSURANCE SEQUENCE^N^E^G^399^^^
"DATA",364.5,101,1)
K IBXSAVE(1) N Z,C,D,Q S Z=$P($G(^DGCR(399,IBXIEN,0)),U,21) I $D(^("I2"))!$D(^("I3")) S IBXSAVE(1)=Z,Q=$S("P"[Z:"23","S"[Z:"13",1:"12") F C=1,2 S D=$E(Q,C),IBXDATA(C)=$E("PST",D) S:$D(^DGCR(399,IBXIEN,"I"_D)) IBXSAVE(1,D)=IBXDATA(C)
"DATA",364.5,101,3,0)
^364.53^8^8^3040706^^^^
"DATA",364.5,101,3,1,0)
The sequence (P)rimary, (S)econdary, (T)ertiary indicators for all other
"DATA",364.5,101,3,2,0)
insurance for bill entry IBXIEN.  This is a group element and up to
"DATA",364.5,101,3,3,0)
up to 2 data elements are returned in the IBXDATA(n) array.  If the primary
"DATA",364.5,101,3,4,0)
insurance is the current responsible, the secondary and tertiary insurance
"DATA",364.5,101,3,5,0)
sequence indicators are returned.  If the secondary insurance is the
"DATA",364.5,101,3,6,0)
current responsible, the primary and tertiary insurance sequence indicators
"DATA",364.5,101,3,7,0)
are returned. If the tertiary insurance is the current responsible, the
"DATA",364.5,101,3,8,0)
primary and secondary insurance sequence indicators are returned.
"DATA",364.5,218,0)
N-COINSURANCE DAYS^N^F^I^399^CO-INSURANCE DAYS^I^
"DATA",364.5,218,1)
 
"DATA",364.5,218,3,0)
^^1^1^2991115^^
"DATA",364.5,218,3,1,0)
This is the value of the UB92, form locator 9.
"DATA",364.5,234,0)
N-OTHER INSURANCE CO TYPES^N^E^I^399^^^
"DATA",364.5,234,1)
N Z,Z0 S Z=$$ALLTYP^IBCEF3(IBXIEN),Z0=$$COBN^IBCEF(IBXIEN) S IBXDATA=$S(Z0=1:$P(Z,U,2,3),Z0=2:$P(Z,U,1)_U_$P(Z,U,3),1:$P(Z,U,1,2))
"DATA",364.5,234,3,0)
^^11^11^2990412^^^^
"DATA",364.5,234,3,1,0)
This is the type of all 'other' insurance for the bill.  The format of the
"DATA",364.5,234,3,2,0)
data returned in IBXDATA is:
"DATA",364.5,234,3,3,0)
   if primary bill: type of secondary insurance^type of tertiary insurance
"DATA",364.5,234,3,4,0)
   if secondary bill: type of primary insurance^type of tertiary insurance
"DATA",364.5,234,3,5,0)
   if tertiary bill: type of primary insurance^type of secondary insurance
"DATA",364.5,234,3,6,0)
 
"DATA",364.5,234,3,7,0)
             type = 1: COMMERCIAL/BL CROSS
"DATA",364.5,234,3,8,0)
                    2: MEDICARE
"DATA",364.5,234,3,9,0)
                    3: MEDICAID
"DATA",364.5,234,3,10,0)
                    4: TRICARE
"DATA",364.5,234,3,11,0)
                    5: CHAMPVA
"DATA",364.5,268,0)
N-OUTSIDE FACILITY NAME^N^E^I^399^^^
"DATA",364.5,268,1)
N IBZ D F^IBCEF("N-NON VA FACILITY","IBZ",,IBXIEN) I $G(IBZ) S IBXDATA=$P($G(^IBA(355.93,+IBZ,0)),U)
"DATA",364.5,268,3,0)
^364.53^2^2^3030917^^^
"DATA",364.5,268,3,1,0)
Finds the internal entry number of the outside facility for the bill and
"DATA",364.5,268,3,2,0)
extracts the name from the non-VA provider file.
"DATA",364.5,271,0)
N-LAB CLIA #^N^E^I^399^^^
"DATA",364.5,271,1)
S IBXDATA=$P($G(^DGCR(399,IBXIEN,"U2")),U,13) I IBXDATA="" S IBXDATA=$$CLIANVA^IBCEP8(IBXIEN)
"DATA",364.5,271,3,0)
^364.53^2^2^3040205^^^^
"DATA",364.5,271,3,1,0)
Extract the CLIA # from the ids defined for the facility.  If an id cannot
"DATA",364.5,271,3,2,0)
be found there, but the data exists in fld 235 in file 399, use that data.
"DATA",364.5,272,0)
N-NON VA PROVIDER ID^N^E^I^399^^^
"DATA",364.5,272,1)
N Z,Z0 S Z=$$PSPRV^IBCEF7(IBXIEN),Z0=$P($$NONVAID^IBCEF72(IBXIEN,.IBXDATA,($E(Z,2)=0),1),U)
"DATA",364.5,272,3,0)
^364.53^7^7^3030910^^^
"DATA",364.5,272,3,1,0)
The non-VA id can be either the tax id/SSN for a non-VA provider.  If the
"DATA",364.5,272,3,2,0)
provider is a non-VA provider and has a tax id # assigned, it will be used.
"DATA",364.5,272,3,3,0)
Otherwise, the non-VA provider person's SSN is used.  In the case of
"DATA",364.5,272,3,4,0)
either a person or facility, if the id cannot be found as the tax id/SSN,
"DATA",364.5,272,3,5,0)
the number is taken from the NON-VA CARE ID # field in the BILL/CLAIMS file.
"DATA",364.5,272,3,6,0)
If there is a non-VA provider AND a non-VA facility, this number must be
"DATA",364.5,272,3,7,0)
assigned to the non-VA provider (person).
"DATA",364.5,298,0)
N-AGENT CASHIER STREET LINE 2^N^E^I^399^^^
"DATA",364.5,298,1)
S IBXDATA=""
"DATA",364.5,298,3,0)
^364.53^1^1^3030623^^
"DATA",364.5,298,3,1,0)
The agent cashier street address form the site parameter file. Not related to bill entry. Note: New feild needing definition in ^IBE(350.9,1,2) piece 13
"DATA",364.5,299,0)
N-TYPE INSURANCE CO ID^N^E^I^399^^^
"DATA",364.5,299,1)
S IBXDATA=""
"DATA",364.5,299,3,0)
^364.53^8^8^3030713^^^^
"DATA",364.5,299,3,1,0)
Extracted from a set of codes. Could be 1A=Blue Cross ID-INst;
"DATA",364.5,299,3,2,0)
1B=Blue Shiled ID-Prof;1H=Champus ID;X4=CLIA#;
"DATA",364.5,299,3,3,0)
1A = Blue Cross Number;1B = Blue Shield Number;1C = Medicare Number;
"DATA",364.5,299,3,4,0)
1D = Medicaid Number;1G = UPIN Number;1H = TRICARE ID Number;
"DATA",364.5,299,3,5,0)
G2=Provider Commercail ID;24=Facility Fed Tax ID #;1C=Medicare Part A-Inst
"DATA",364.5,299,3,6,0)
1C=Medicare Part B -Porf;B3=Network ID-HMO;BQ=Network ID-PPO;G5=Provider Site ID
"DATA",364.5,299,3,7,0)
0B=State License;IG=Provider UPIN;EI=Employer's ID;LU=Location Number;
"DATA",364.5,299,3,8,0)
X5=State Industrial Accident Provider Number;FH=Clinic Number;1D=Medicaid
"DATA",364.5,300,0)
N-SPRVSING PROV FULL NAME^N^E^I^399^^^
"DATA",364.5,300,1)
N IBZ D GETPRV^IBCEU(IBXIEN,5,.IBZ) S IBXDATA=$P($G(IBZ(5,1)),U)_U_$P($G(IBZ(5,1)),U,3)_U_$P($G(IBZ(5,1)),U,4)
"DATA",364.5,300,3,0)
^364.53^2^2^3030814^^^^
"DATA",364.5,300,3,1,0)
The name of the supervising physician for bill entry IBXIEN.  The pieces
"DATA",364.5,300,3,2,0)
returned are: provider name^vp ien for provider (200/355.93)^credentials
"DATA",364.5,301,0)
N-OTHER PAYER FULL ADDRESS^N^E^G^399^^^
"DATA",364.5,301,1)
S IBXSAVE("ARRAY")=""
"DATA",364.5,301,3,0)
^364.53^2^2^3030812^^^^
"DATA",364.5,301,3,1,0)
Extract the address information for the OTHER PAYER to parse it for 837 
"DATA",364.5,301,3,2,0)
transmission using File 364.7 .
"DATA",364.5,303,0)
N-OTHER INSURED FULL ADDRESS^N^E^G^399^^^
"DATA",364.5,303,1)
S IBXSAVE("ARRAY")="8,113-LINE1|8,113-LINE2|8,113-CITY|ST-8,113|8,113-ZIP"
"DATA",364.5,303,3,0)
^364.53^2^2^3030726^^^^
"DATA",364.5,303,3,1,0)
Extract the address information for the OTHER INSURED to parse it for 837
"DATA",364.5,303,3,2,0)
transmission using File 364.7 .
"DATA",364.5,304,0)
N-OTHER INSURED QUALIF/ID ALL^N^E^G^399^^^
"DATA",364.5,304,1)
K IBXDATA S IBZZ=$$SETSTR^VALM1($P($G(^DPT(+$P($G(^DGCR(399,IBXIEN,0)),U,2),0)),U),"",2,39)
"DATA",364.5,304,3,0)
^364.53^3^3^3030714^^^^
"DATA",364.5,304,3,1,0)
Extracted form a set of codes, could be:
"DATA",364.5,304,3,2,0)
1W = Member ID Number;23 = Client Number;SY = Social Security Number;
"DATA",364.5,304,3,3,0)
1G = Insurance Policy Number also known as  UPIN Number;
"DATA",364.5,305,0)
N-OTH PAYER PATIENT ID QUALIF^N^E^G^399^^^
"DATA",364.5,305,1)
S IBXSAVE="EI,MI,Find which one applies and pass value and qualifier"
"DATA",364.5,305,3,0)
^364.53^2^2^3030714^^^^
"DATA",364.5,305,3,1,0)
Find which is available, Employee ID or Member ID Number. Pass either
"DATA",364.5,305,3,2,0)
EI=Employee ID Number or  MI=Member ID Number. Extract valeu and qualifier. Parse into seperate elements, 110,4 and 110,5.
"DATA",364.5,306,0)
N-OTH PAYER PAT ID QUALIF 1-3^N^E^G^399^^^
"DATA",364.5,306,1)
S IBXSAVE="1W|MEMBER ID NUMBER|1G|INSURANCE POLICY NUMBER|SY|SOCIAL SECURITY NUMBER|"
"DATA",364.5,307,0)
N-TYPE INSURANCE CO ID-ALL^N^E^G^399^^^
"DATA",364.5,307,1)
S IBXSAVE("ID")="1A|1B|1H|G2|1C|",YES=+$P($G(^DGCR(399,IBXIEN,"U2")),U,11)
"DATA",364.5,307,3,0)
^364.53^2^2^3030805^^^^
"DATA",364.5,307,3,1,0)
Create an array so data can be parsed into the IBXDATA elements for TYPE 
"DATA",364.5,307,3,2,0)
OF INSURANCE COMPANY ID.
"DATA",364.5,308,0)
N-TYPE INSURANCE CO NUMBER-ALL^N^E^G^399^^^
"DATA",364.5,308,1)
S (N,V,Z,I,IBXSAVE("D"))="" F  S N=$O(^IBE(355.97,N)) Q:N=""&(I="")  S I=$P($G(^(N,0)),U,1,4),Z=$P($G(I),U,1),V=$S(Z["CROSS":1,Z["SHIE":2,Z["CHAM":3,Z["COMM":4,Z["ART A":5,Z["ARTB":6,Z["HMO":7,1:"0") S:V $P(IBXSAVE("D"),"|",V)=$P(I,U,4)
"DATA",364.5,308,2)
 
"DATA",364.5,308,3,0)
^364.53^2^2^3030807^^^^
"DATA",364.5,308,3,1,0)
Extract using appriate functions, the actual numbers associated with each 
"DATA",364.5,308,3,2,0)
category. To be parsed in 16,2 thru 13.
"DATA",364.5,309,0)
N-ALL ATT/RENDERING PROV SSN^N^E^G^399^^^
"DATA",364.5,309,1)
S IBXDATA=$$PROVSSN^IBCEF7(IBXIEN)
"DATA",364.5,309,3,0)
^364.53^4^4^3031014^^^^
"DATA",364.5,309,3,1,0)
Extracts the SSN for all FUNCTION types
"DATA",364.5,309,3,2,0)
IBXDATA - string with "^" delimiters that contains SSNs (if any)
"DATA",364.5,309,3,3,0)
in the position that equal to FUNCTION number i.e.
"DATA",364.5,309,3,4,0)
if RENDERING function # is 3 then SSN will be $P(IBXDATA,"^",3)
"DATA",364.5,310,0)
N-OPERATING PHYSICIAN DATA^N^E^G^399^^^
"DATA",364.5,310,1)
N IBZ D GETPRV^IBCEU(IBXIEN,2,.IBZ) S IBXDATA=$G(IBZ(2,1)) S:IBXDATA="" IBXDATA="^^"_$$PROVPTR^IBCEF7(IBXIEN,2)
"DATA",364.5,310,3,0)
^364.53^2^2^3031010^^^^
"DATA",364.5,310,3,1,0)
Extracts the SSN for operating physician
"DATA",364.5,310,3,2,0)
IBXDATA - string with "^" delimiters
"DATA",364.5,311,0)
N-ALL OTH PROV SECONDARY ID^N^E^G^399^^^
"DATA",364.5,311,1)
I +$G(IBXSAVE("PROV2INF",IBXIEN))=0 N IBZ D PROVINF^IBCEF7(IBXIEN,2,.IBZ) S IBXSAVE("PROV2INF",IBXIEN)=IBXIEN M IBXSAVE("PROV2INF",IBXIEN)=IBZ
"DATA",364.5,311,3,0)
^364.53^2^2^3030825^^^^
"DATA",364.5,311,3,1,0)
Secondary ID's first are there Insurance specific secondary id's #355.9 if #399,101 primary insurance carrier =#355.9,.02
"DATA",364.5,311,3,2,0)
THEN #355.9,.07 is the provider id's
"DATA",364.5,312,0)
N-ALL CUR/OTH PROVIDER INFO^N^E^G^399^^^
"DATA",364.5,312,1)
D ALLPROV^IBCEF7
"DATA",364.5,312,3,0)
^364.53^1^1^3040610^^^^
"DATA",364.5,312,3,1,0)
check if data was already extracted if not then create an array with  current and other providers data, save in IBXSAVE("PROVINF",IBXIEN)
"DATA",364.5,313,0)
N-PURCHASED SERVICE ALL^N^E^G^399^^^
"DATA",364.5,313,1)
S A=$P($G(^DGCR(399,IBXIEN,"U2")),U,10,11) S:$P(A,U,2)\2 I1=$P(A,U,1),N=$P(^IBA(355.93,I1,0),U,9),I4=+$P($Q(^IBA(355.9,"C",N)),",",4),I5=$P(^IBA(355.9,I4,0),U,6)
"DATA",364.5,313,3,0)
^^2^2^3030803^
"DATA",364.5,313,3,1,0)
USED IN 364.7 SEQUENCE 56 PICES 2 AND 3. cAN BE USED FOR THE REST ALSO.
"DATA",364.5,313,3,2,0)
I5 USED TO EXTRACT THE QUALIFIER FROM ^IBE(355.97) PIECE 3
"DATA",364.5,314,0)
N-OTH INSURANCE CO IEN 36^N^E^G^399^^^
"DATA",364.5,314,1)
N Z F Z=1,2,3 S IBXDATA(Z)=+$$POLICY^IBCEF(IBXIEN,1,$E("PST",Z))
"DATA",364.5,314,3,0)
^364.53^1^1^3030805^^^^
"DATA",364.5,314,3,1,0)
finds insurance iens in file #36
"DATA",364.5,315,0)
N-OTH INSURANCE ADDRESS^N^E^G^399^^^
"DATA",364.5,315,1)
D ELMADDR^IBCEF7(IBXIEN,0,.IBXDATA)
"DATA",364.5,316,0)
N-OTH INSURED NAMES SUFF^N^E^G^399^^^
"DATA",364.5,316,1)
N Z,Z0,Z1,IBZ D F^IBCEF("N-ALL INSURED FULL NAMES","IBZ") S Z=$$COBN^IBCEF(IBXIEN) S Z0=0 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IBXIEN,"I"_Z1)) S Z0=Z0+1,IBXDATA(Z0)=$$GETNMEL^IBCEF7($G(IBZ(Z1)),"SUFFIX")
"DATA",364.5,316,3,0)
^^1^1^3030806^
"DATA",364.5,316,3,1,0)
returns array of suf for "other insured" names
"DATA",364.5,317,0)
N-ALL OUTSIDE FAC PROVIDER INF^N^E^G^399^^^
"DATA",364.5,317,1)
D ALLPRFAC^IBCEF71(IBXIEN,.IBXSAVE)
"DATA",364.5,317,3,0)
^364.53^2^2^3030909^^
"DATA",364.5,317,3,1,0)
If the IBXSAVE array for the bill has not yet been set for all outside
"DATA",364.5,317,3,2,0)
facility provider ids, do the extract.
"DATA",364.5,318,0)
N-ALL ATT/REND PROV SSN/EI^N^E^I^399^^^
"DATA",364.5,318,1)
S IBXDATA=$$PROVID^IBCEF73(IBXIEN)
"DATA",364.5,318,3,0)
^364.53^1^1^3040527^^^^
"DATA",364.5,318,3,1,0)
THIS WILL RETURN SSN OR TAX ID IF NO SSN
"DATA",364.6,1,0)
8^N^^30^1^^0^2^1^BILL DESIGNATION^^1^1
"DATA",364.6,3,0)
8^N^^15^1^^0^11^25^BILLING PROVIDER ADDRESS L2^0^1
"DATA",364.6,5,0)
8^N^^30^1^^0^6^17^INSURED ID NUMBER^^1^0
"DATA",364.6,22,0)
8^N^^30^1^^0^4^20^INSURED FIRST NAME^^1^0
"DATA",364.6,26,0)
8^N^^30^1^^0^3^30^INSURED LAST NAME^^1^0
"DATA",364.6,28,0)
8^N^^40^1^^0^2^2^INSURED RELATIONSHIP TO PT^^1^0
"DATA",364.6,30,0)
8^N^^40^1^^0^4^30^PATIENT LAST NAME^^1^0
"DATA",364.6,31,0)
8^N^^40^1^^0^5^20^PATIENT FIRST NAME^^1^0
"DATA",364.6,33,0)
8^N^^40^1^^0^7^35^PATIENT ADDRESS LINE 1^^1^0
"DATA",364.6,35,0)
8^N^^40^1^^0^9^30^PATIENT CITY^^1^0
"DATA",364.6,36,0)
8^N^^40^1^^0^10^2^PATIENT STATE^^1^0
"DATA",364.6,41,0)
8^N^^40^1^^0^15^10^PATIENT SSN^^1^0
"DATA",364.6,42,0)
8^N^^40^1^^0^16^20^HEALTH RECORD NUMBER^^1^0
"DATA",364.6,44,0)
8^N^^50^1^^0^2^38^PATIENT CONTROL #^^1^0
"DATA",364.6,51,0)
8^N^^50^1^^0^10^8^STATEMENT COVERS FROM DATE^^1^0
"DATA",364.6,52,0)
8^N^^50^1^^0^12^15^BALANCE DUE^^1^0
"DATA",364.6,53,0)
8^N^^50^1^^0^13^15^TOTAL CHARGES^^1^0
"DATA",364.6,92,0)
8^N^^90^1^^0^2^10^DIAGNOSIS CODE 1^^1
"DATA",364.6,112,0)
8^N^^180^1^^0^2^6^OUTPT LINE NUMBER FOR CLAIM^^1^0
"DATA",364.6,113,0)
8^N^^180^1^^0^3^2^OUTPT CODE TYPE^^1
"DATA",364.6,114,0)
8^N^^180^1^^0^5^8^OUTPT LINE CHARGE^^1^0
"DATA",364.6,115,0)
8^N^^180^1^^0^6^6^OUTPT UNITS^^1^0
"DATA",364.6,116,0)
8^N^^180^1^^0^7^2^PLACE OF SERVICE^^1^0
"DATA",364.6,117,0)
8^N^^180^1^^0^8^2^TYPE OF SERVICE^^1^0
"DATA",364.6,118,0)
8^N^^180^1^^0^9^8^DATE OF SERVICE (FROM)^^1^0
"DATA",364.6,119,0)
8^N^^180^1^^0^11^1^DIAGNOSIS CODE POINTER 1^^1
"DATA",364.6,120,0)
8^N^^180^1^^0^12^1^DIAGNOSIS CODE POINTER 2^^1
"DATA",364.6,121,0)
8^N^^180^1^^0^13^1^DIAGNOSIS CODE POINTER 3^^1
"DATA",364.6,122,0)
8^N^^180^1^^0^14^1^DIAGNOSIS CODE POINTER 4^^1
"DATA",364.6,123,0)
8^N^^185^1^^0^2^6^INPT LINE # FOR CLAIM^^1
"DATA",364.6,124,0)
8^N^^185^1^^0^3^10^INPT REVENUE CODE^^1
"DATA",364.6,125,0)
8^N^^185^1^^0^4^10^INPT PROC ASSOC W/REV CODE^^1
"DATA",364.6,126,0)
8^N^^185^1^^0^5^6^INPT UNITS^^1^0
"DATA",364.6,127,0)
8^N^^185^1^^0^6^8^INPT RATE^^1
"DATA",364.6,128,0)
8^N^^185^1^^0^7^2^PROC MODIFIER 1^^1
"DATA",364.6,129,0)
8^N^^185^1^^0^8^2^PROC MODIFIER 2^^1
"DATA",364.6,130,0)
8^N^^185^1^^0^9^8^INPT LINE CHARGE^^1
"DATA",364.6,131,0)
8^N^^185^1^^0^10^8^SERVICE FROM DATE^^1^0
"DATA",364.6,132,0)
8^N^^185^1^^0^11^8^SERVICE TO DATE^^1
"DATA",364.6,133,0)
8^N^^190^1^^0^2^6^PRESCRIPTION LINE # FOR CLAIM^^1
"DATA",364.6,134,0)
8^N^^190^1^^0^3^15^PRESCRIPTION NUMBER^^1
"DATA",364.6,135,0)
8^N^^190^1^^0^4^11^NDC CODE #^^1
"DATA",364.6,136,0)
8^N^^190^1^^0^5^3^REFILL #^^1
"DATA",364.6,137,0)
8^N^^190^1^^0^6^55^DRUG NAME (INCL DAYS & QTY)^^1
"DATA",364.6,138,0)
8^N^^190^1^^0^7^8^REFILL DATE^^1
"DATA",364.6,156,0)
8^N^^200^1^^0^99.9^^KILL IBXSAVE ARRAY^1^1
"DATA",364.6,168,0)
8^N^^5^1^^0^3^8^BATCH DATE^^1^0
"DATA",364.6,169,0)
8^N^^5^1^^1^4^10^BATCH REFERENCE #^^1^0
"DATA",364.6,175,0)
8^N^^5^1^^0^6^30^RECEIVER ID NUMBER^^1^0
"DATA",364.6,177,0)
8^N^^15^1^^0^3^25^FACILITY BILLING NAME^^1^0
"DATA",364.6,178,0)
8^N^^15^1^^0^4^35^AGENT CASHIER STREET ADDRESS^^1^0
"DATA",364.6,179,0)
8^N^^15^1^^0^6^2^AGENT CASHIER STATE^^1^0
"DATA",364.6,180,0)
8^N^^15^1^^0^7^5^AGENT CASHIER ZIP CODE^^1^0
"DATA",364.6,181,0)
8^N^^15^1^^0^5^30^AGENT CASHIER CITY^^1^0
"DATA",364.6,182,0)
8^N^^15^1^^0^9^17^FEDERAL TAX ID NUMBER^^1^0
"DATA",364.6,184,0)
8^N^^15^1^^0^8^20^EDI SITE CONTACT PHONE^^1
"DATA",364.6,185,0)
8^N^^20^1^^0^3^35^CURRENT INSURANCE STREET^^1^0
"DATA",364.6,186,0)
8^N^^20^1^^0^4^30^CURRENT INSURANCE CITY^^1^0
"DATA",364.6,187,0)
8^N^^20^1^^0^5^2^CURRENT INSURANCE STATE^^1^0
"DATA",364.6,188,0)
8^N^^20^1^^0^6^5^CURRENT INSURANCE ZIP CODE^^1^0
"DATA",364.6,192,0)
8^N^^20^1^^0^2^30^CURRENT INSURANCE CO NAME^^1^0
"DATA",364.6,194,0)
8^N^^180^1^^0^4^10^OUTPT PROCEDURE/REVENUE CODE^^1^0
"DATA",364.6,196,0)
8^N^^20^1^^0^8^30^CURR INS CO 837 ID NUMBER^^1
"DATA",364.6,210,0)
8^N^^20^1^^0^1^4^RECORD ID 'CI1 '^^1^1
"DATA",364.6,251,0)
8^N^^180^1^^0^1^4^RECORD ID 'PRF '^^1^1
"DATA",364.6,252,0)
8^N^^185^1^^0^1^4^RECORD ID 'INS '^^1^1
"DATA",364.6,253,0)
8^N^^190^1^^0^1^4^RECORD ID 'RX1 '^^1^1
"DATA",364.6,479,0)
8^N^^50^1^^0^11^8^STATEMENT COVERS TO DATE^^1^0
"DATA",364.6,483,0)
8^N^^180^1^^0^10^8^DATE OF SERVICE (TO)^^1
"DATA",364.6,488,0)
8^N^^5^1^^0^5^3^SITE NUMBER^^1^0
"DATA",364.6,579,0)
8^N^^185^1^^0^12^8^NON-COVERED CHARGE^^1
"DATA",364.6,580,0)
8^N^^190^1^^0^8^10^DRUG QUANTITY^^1
"DATA",364.6,581,0)
8^N^^190^1^^0^9^3^DAYS SUPPLY^^1
"DATA",364.6,610,0)
8^N^^180^1^^0^15^2^PROF PROC MODIFIER 1^^1
"DATA",364.6,793,0)
8^N^^20^1^^0^10^35^CURRENT INSURANCE STREET-2^^1
"DATA",364.6,794,0)
8^N^^35^1^^0^8^2^CURRENT INSURED POLICY TYPE^^1^0
"DATA",364.6,859,0)
8^N^^180^1^^0^16^2^PROF PROC MODIFIER 2^^1
"DATA",364.6,860,0)
8^N^^180^1^^0^17^2^PROF PROC MODIFIER 3^^1
"DATA",364.6,861,0)
8^N^^180^1^^0^18^2^PROF PROC MODIFIER 4^^1
"DATA",364.6,862,0)
8^N^^180^1^^0^19^1^EMERGENCY INDICATOR^^1
"DATA",364.6,863,0)
8^N^^180^1^^0^20^2^PROF TYPE OF UNITS^^1
"DATA",364.6,864,0)
8^N^^185^1^^0^13^2^INST TYPE OF UNITS^^1
"DATA",364.6,865,0)
8^N^^195^1^^0^1^4^RECORD ID 'LCOB'^^1^1
"DATA",364.6,866,0)
8^N^^195^1^^0^2^6^COB REFERENCE CLAIM LINE #^^1^1
"DATA",364.6,867,0)
8^N^^195^1^^0^3^20^COB INS CO PAYER ID^^1
"DATA",364.6,868,0)
8^N^^195^1^^0^4^15^LINE COB AMT PAID^^1
"DATA",364.6,869,0)
8^N^^195^1^^0^5^20^COB LINE PAID PROCEDURE^^1
"DATA",364.6,870,0)
8^N^^195^1^^0^6^10^COB LINE REVENUE CODE^^1
"DATA",364.6,871,0)
8^N^^195^1^^0^7^2^COB LINE MODIFIER 1^^1
"DATA",364.6,872,0)
8^N^^195^1^^0^8^2^COB LINE MODIFIER 2^^1
"DATA",364.6,873,0)
8^N^^195^1^^0^9^2^COB LINE MODIFIER 3^^1
"DATA",364.6,874,0)
8^N^^195^1^^0^10^2^COB LINE MODIFIER 4^^1
"DATA",364.6,875,0)
8^N^^195^1^^0^11^80^COB LINE DESCRIPTION^^1
"DATA",364.6,876,0)
8^N^^195^1^^0^12^15^COB LINE PAID UNITS^^1
"DATA",364.6,877,0)
8^N^^195^1^^0^13^6^COB ASSIGNED LINE #^^1
"DATA",364.6,878,0)
8^N^^200^1^^0^1^4^RECORD ID 'LCAS'^^1^1
"DATA",364.6,879,0)
8^N^^200^1^^0^2^6^COB REFERENCE CLAIM LINE #^^1
"DATA",364.6,880,0)
8^N^^200^1^^0^3^2^COB LINE ADJUSTMENT GROUP CODE^^1
"DATA",364.6,881,0)
8^N^^200^1^^0^4^5^COB LINE ADJ REASON CODE-1^^1
"DATA",364.6,882,0)
8^N^^200^1^^0^5^15^COB LINE ADJUSTMENT AMT-1^^1
"DATA",364.6,883,0)
8^N^^200^1^^0^6^6^COB LINE ADJUSTMENT QUANTITY-1^^1
"DATA",364.6,885,0)
8^N^^20^1^^0^2.9^^CURRENT INSURANCE FULL ADDRESS^1^1
"DATA",364.6,907,0)
8^N^^200^1^^0^7^5^COB LINE ADJ REASON CODE-2^^1
"DATA",364.6,908,0)
8^N^^200^1^^0^10^5^COB LINE ADJ REASON CODE-3^^1
"DATA",364.6,909,0)
8^N^^200^1^^0^13^5^COB LINE ADJ REASON CODE-4^^1
"DATA",364.6,910,0)
8^N^^200^1^^0^16^5^COB LINE ADJ REASON CODE-5^^1
"DATA",364.6,911,0)
8^N^^200^1^^0^19^5^COB LINE ADJ REASON CODE-6^^1
"DATA",364.6,912,0)
8^N^^200^1^^0^8^15^COB LINE ADJUSTMENT AMT-2^^1
"DATA",364.6,913,0)
8^N^^200^1^^0^11^15^COB LINE ADJUSTMENT AMT-3^^1
"DATA",364.6,914,0)
8^N^^200^1^^0^14^15^COB LINE ADJUSTMENT AMT-4^^1
"DATA",364.6,915,0)
8^N^^200^1^^0^17^15^COB LINE ADJUSTMENT AMT-5^^1
"DATA",364.6,916,0)
8^N^^200^1^^0^20^15^COB LINE ADJUSTMENT AMT-6^^1
"DATA",364.6,917,0)
8^N^^200^1^^0^9^6^COB LINE ADJUSTMENT QUANTITY-2^^1
"DATA",364.6,918,0)
8^N^^200^1^^0^12^6^COB LINE ADJUSTMENT QUANTITY-3^^1
"DATA",364.6,919,0)
8^N^^200^1^^0^15^6^COB LINE ADJUSTMENT QUANTITY-4^^1
"DATA",364.6,920,0)
8^N^^200^1^^0^18^6^COB LINE ADJUSTMENT QUANTITY-5^^1
"DATA",364.6,921,0)
8^N^^200^1^^0^21^6^COB LINE ADJUSTMENT QUANTITY-6^^1
"DATA",364.6,935,0)
8^N^^96^1^^0^16^2^REFERRING PROVIDER STATE^0^1
"DATA",364.6,936,0)
8^N^^96^1^^0^15^10^REFERRING PHY NAME SUFFIX^0^1
"DATA",364.6,937,0)
8^N^^96^1^^0^14^20^REFERRING PROVIDER FIRST NAME^0^1
"DATA",364.6,938,0)
8^N^^96^1^^0^13^20^REFERRING PROVIDER LAST NAME^0^1
"DATA",364.6,939,0)
8^N^^96^1^^0^12^5^OPERATING PHYS SPECIALTY^0^1
"DATA",364.6,941,0)
8^N^^96^1^^0^2^20^ATT/REND PROV LAST NAME^0^1^0
"DATA",364.6,942,0)
8^N^^96^1^^0^3^20^ATT/REND PROV FIRST NAME^0^1
"DATA",364.6,943,0)
8^N^^96^1^^0^4^10^ATT/REND NAME SUFFIX^0^1^0
"DATA",364.6,944,0)
8^N^^96^1^^0^5^5^ATT/REND PROV SPECIALTY^0^1
"DATA",364.6,945,0)
8^N^^96^1^^0^6^20^OTHER PROV LAST NAME^0^1
"DATA",364.6,946,0)
8^N^^96^1^^0^7^20^OTHER PROV FIRST NAME^0^1
"DATA",364.6,947,0)
8^N^^96^1^^0^8^10^OTHER PROV NAME SUFFIX^0^1
"DATA",364.6,948,0)
8^N^^96^1^^0^9^20^OPERATING PHYS LAST NAME^0^1
"DATA",364.6,949,0)
8^N^^96^1^^0^10^20^OPERATING PHYS FIRST NAME^0^1
"DATA",364.6,950,0)
8^N^^96^1^^0^11^10^OPERATING PHY NAME SUFFIX^0^1
"DATA",364.6,951,0)
8^N^^96^1^^0^17^5^REFERRING PROV SPECIALTY^0^1
"DATA",364.6,958,0)
8^N^^185^1^^0^14^4^FORM LOCATOR 49^0^1
"DATA",364.6,960,0)
8^N^^50^1^^0^37^1^EXPLANATION OF BENEFITS IND^0^1
"DATA",364.6,968,0)
8^N^^15^1^^0^10^15^SPECIFIC/REMOTE FACILITY ID^^1^0
"DATA",364.6,973,0)
8^N^^97^1^^0^4^1^ATT/REND PERSON/NON-PERSON^0^1^1
"DATA",364.6,974,0)
8^N^^180^1^^0^21^8^PURCH SERVICE CHARGE^0^1
"DATA",364.6,975,0)
8^N^^180^1^^0^22^15^BOX 24K DATA^0^1
"DATA",364.6,976,0)
8^N^^195^1^^0^14^8^LINE ITEM DATE PAID^0^1
"DATA",364.6,977,0)
8^N^^180^1^^0^23^8^LAST X-RAY DATE^0^1
"DATA",364.6,978,0)
8^N^^180^1^^0^24^1^ATTENDING NOT HOSPICE^0^1
"DATA",364.6,979,0)
8^N^^180^1^^0^25^3^BEGIN LEVEL OF SUBLUXATION^0^1
"DATA",364.6,980,0)
8^N^^180^1^^0^27^15^CHIRO - QUANTITY^0^1
"DATA",364.6,981,0)
8^N^^180^1^^0^28^9^CHIRO - SERIES #^0^1
"DATA",364.6,982,0)
8^N^^180^1^^0^29^1^EPSDT FLAG^0^1
"DATA",364.6,983,0)
8^N^^195^1^^0^1.9^^EXTRACT LINE LEVEL ADJUSTMENTS^1^1
"DATA",364.6,984,0)
8^N^^96^1^^0^18^10^PRIMARY INS ATT/REND PROV ID^0^1
"DATA",364.6,985,0)
8^N^^97^1^^0^2^10^ATT/REND PROV PRIMARY ID QUAL^0^1
"DATA",364.6,986,0)
8^N^^97^1^^0^3^10^ATT/REND PROV PRIMARY ID CODE^0^1
"DATA",364.6,990,0)
8^N^^97^1^^0^7^1^OTHER PROV PERSON/NON-PERSON^0^1
"DATA",364.6,991,0)
8^N^^97^1^^0^5^10^OTHER PROV PRIMARY ID QUAL^0^1
"DATA",364.6,992,0)
8^N^^97^1^^0^6^10^OTHER PROV PRIMARY ID CODE^0^1
"DATA",364.6,993,0)
8^N^^97^1^^0^8^10^OPERATING PHY PRIMARY ID QUAL^0^1
"DATA",364.6,994,0)
8^N^^97^1^^0^9^10^OPERATING PHY PRIMARY ID CODE^0^1
"DATA",364.6,1004,0)
8^N^^20^1^^0^11^15^CURR INS EMC #^0^1
"DATA",364.6,1006,0)
8^N^^180^1^^0^30^80^SERVICE LINE COMMENT^0^1
"DATA",364.6,1007,0)
8^N^^97^1^^0^10^3^RENDERING PROVIDER CREDENTIALS^0^1
"DATA",364.6,1009,0)
8^N^^20^1^^0^12^2^CURRENT INSURANCE TYPE CODE^0^1^0
"DATA",364.6,1010,0)
8^N^^180^1^^0^26^3^END LEVEL OF SUBLUXATION^0^1
"DATA",364.6,1011,0)
8^N^^190^1^^0^10^2^NDC FORMAT^0^1
"DATA",364.6,1012,0)
8^N^^195^1^^0^15^2^PROCEDURE TYPE^^1^
"DATA",364.6,1013,0)
8^N^^200^1^^0^22^10^LINE ITEM REMARK CODE^^1
"DATA",364.6,1014,0)
8^N^^5^1^^0^7^13^X12 Version Number for HIPAA^0^1
"DATA",364.6,1015,0)
8^N^^16^1^^0^4^2^BILLING PROV SECONDARY ID Q(2)^0^1
"DATA",364.6,1016,0)
8^N^^30^1^^0^15^10^INSURED NAME SUFFIX^0^1^0
"DATA",364.6,1017,0)
8^N^^36^1^^0^1^4^RECORD ID 'CI4 '^0^1^1
"DATA",364.6,1018,0)
8^N^^36^1^^0^2^2^ENTITY INDENTIFIER CODE QD^0^1^0
"DATA",364.6,1019,0)
8^N^^36^1^^0^3^1^ENTITY TYPE QUALIFIER^0^1^0
"DATA",364.6,1020,0)
8^N^^36^1^^0^4^35^RESPONSIBLE NAME LAST/ORG^0^1^0
"DATA",364.6,1021,0)
8^N^^36^1^^0^5^25^RESPONSIBLE PARTY FIRST NAME^0^1^0
"DATA",364.6,1022,0)
8^N^^36^1^^0^6^25^RESPONSIBLE PARTY MIDDLE NAME^0^1^0
"DATA",364.6,1023,0)
8^N^^36^1^^0^7^10^RESPONSIBLE PARTY SUFFIX^0^1^0
"DATA",364.6,1024,0)
8^N^^36^1^^0^8^50^RESP PARTY ADDRESS LINE1^0^1^0
"DATA",364.6,1025,0)
8^N^^36^1^^0^9^50^RESP PARTY ADDRESS LINE2^0^1^0
"DATA",364.6,1026,0)
8^N^^36^1^^0^10^30^RESPONSIBLE PARTY CITY^0^1^0
"DATA",364.6,1027,0)
8^N^^36^1^^0^11^2^RESPONSIBLE PARTY STATE^0^1^0
"DATA",364.6,1028,0)
8^N^^36^1^^0^12^15^RESPONSIBLE PARTY ZIP CODE^0^1^0
"DATA",364.6,1029,0)
8^N^^40^1^^0^17^2^UNIT OR BASIS FOR MEASUREMENT^0^1^0
"DATA",364.6,1030,0)
8^N^^40^1^^0^18^10^PATIENT WEIGHT^0^1^0
"DATA",364.6,1031,0)
8^N^^40^1^^0^19^1^PREGNANCY INDICATOR^0^1^0
"DATA",364.6,1032,0)
8^N^^51^1^^0^2^8^INITIAL TREATMENT DATE-SPINAL^0^1^0
"DATA",364.6,1033,0)
8^N^^51^1^^0^3^8^LAST XRAY DATE-SPINAL^0^1^0
"DATA",364.6,1034,0)
8^N^^51^1^^0^4^8^HEARING/VISION PRESCRIPT. DATE^0^1^0
"DATA",364.6,1035,0)
8^N^^51^1^^0^5^1^MEDICARE ASSIGNNMENT CODE^0^1^0
"DATA",364.6,1036,0)
8^N^^51^1^^0^6^30^MAMMOGRAPHY CERT NUMBER^0^1^0
"DATA",364.6,1037,0)
8^N^^51^1^^0^7^1^SPINAL MANIP. CONDITION CODE^0^1^0
"DATA",364.6,1038,0)
8^N^^51^1^^0^8^8^ACUTE MANIFEST. DATE-SPINAL^0^1^0
"DATA",364.6,1039,0)
8^N^^55^1^^0^12^50^SERVICE FAC. ADDRESS LINE2^0^1^0
"DATA",364.6,1040,0)
8^N^^56^1^^0^2^2^PURCH SERV SECOND QUALIF 1^0^1^0
"DATA",364.6,1041,0)
8^N^^57^1^^0^2^2^SERVICE/LAB FACILITY PROV CODE^0^1^0
"DATA",364.6,1042,0)
8^N^^57^1^^0^3^1^SERV FAC ENTITY TYPE QUALIFIER^0^1^0
"DATA",364.6,1043,0)
8^N^^57^1^^0^4^35^SERV FAC PROV ORGANIZ NAME^0^1^0
"DATA",364.6,1044,0)
8^N^^57^1^^0^7^2^SERV FAC SECONDARY QUALIF 1^0^1^0
"DATA",364.6,1045,0)
8^N^^57^1^^0^5^2^SERV FAC ID CODE QUALIF^0^1^0
"DATA",364.6,1046,0)
8^N^^57^1^^0^6^20^SERVICE FACILITY ID NUMBER^0^1^0
"DATA",364.6,1047,0)
8^N^^97^1^^0^11^10^REFERRING PHY PRIMARY ID QUAL^0^1^0
"DATA",364.6,1048,0)
8^N^^97^1^^0^12^10^REFERRING PHY PRIMARY ID CODE^0^1^0
"DATA",364.6,1049,0)
8^^^^1^^0^^10^^^1^0
"DATA",364.6,1056,0)
8^N^^103^1^^0^1^4^RECORD ID 'OPR7'^0^1^1
"DATA",364.6,1057,0)
8^N^^103^1^^0^1.9^^SPRVSING PROV FULL NAME^1^1
"DATA",364.6,1058,0)
8^N^^103^1^^0^2^35^SPRVSING PROV LAST NAME^0^1^0
"DATA",364.6,1059,0)
8^N^^103^1^^0^3^25^SPRVSING PROV FIRST NAME^0^1^0
"DATA",364.6,1060,0)
8^N^^103^1^^0^4^25^SPRVSING PROV MIDDLE NAME^0^1^0
"DATA",364.6,1061,0)
8^N^^103^1^^0^5^10^SPRVSING PROV NAME SUFFIX^0^1^0
"DATA",364.6,1062,0)
8^N^^103^1^^0^6^2^SPRVSING PHY PRIMARY ID QUAL^0^1^0
"DATA",364.6,1063,0)
8^N^^103^1^^0^7^30^SPRVSING PHY PRIMARY ID CODE^0^1^0
"DATA",364.6,1065,0)
8^N^^105^1^0^0^18^55^OTHER PAYER ADDRESS LINE 1^0^1^0
"DATA",364.6,1066,0)
8^N^^105^1^0^0^18.9^157^OTHER PAYER FULL ADDRESS^1^1^0
"DATA",364.6,1067,0)
8^N^^105^1^0^0^19^55^OTHER PAYER ADDRESS LINE 2^0^1^0
"DATA",364.6,1068,0)
8^N^^105^1^0^0^20^30^OTHER PAYER CITY^0^1^0
"DATA",364.6,1069,0)
8^N^^105^1^0^0^21^2^OTHER PAYER STATE^0^1^0
"DATA",364.6,1071,0)
8^N^^105^1^^0^22^15^OTHER PAYER ZIP^0^1^0
"DATA",364.6,1072,0)
8^N^^112^1^^0^2.9^157^OTHER INSURANCE FULL ADDRESS^1^1^0
"DATA",364.6,1073,0)
8^N^^112^1^^0^3^55^OTHER INSURANCE ADDRESS LINE 1^0^1^0
"DATA",364.6,1074,0)
8^N^^112^1^^0^4^55^OTHER INSURANCE ADDRESS LINE2^0^1^0
"DATA",364.6,1075,0)
8^N^^112^1^^0^5^30^OTHER INSURANCE CITY^0^1^0
"DATA",364.6,1076,0)
8^N^^112^1^^0^6^2^OTHER INSURANCE STATE^0^1^0
"DATA",364.6,1077,0)
8^N^^112^1^^0^7^15^OTHER INSURANCE ZIP^0^1^0
"DATA",364.6,1078,0)
8^N^^110^1^^0^17.1^116^OTHER INSURED QUALIFIER/ID#^1^1^0
"DATA",364.6,1080,0)
8^N^^110^1^^0^16.9^136^N-OTHER INSURED QUALIF/ID ALL^1^1^0
"DATA",364.6,1081,0)
8^N^^113^1^^0^3^10^OTHER INSURED NAME SUFFIX^0^1^0
"DATA",364.6,1082,0)
8^N^^111^1^^0^1^4^RECORD ID 'OI3 '^0^1^1
"DATA",364.6,1083,0)
8^N^^111^1^0^0^4^1^OTH PAYER PAT ENTITY TYPE^0^1^0
"DATA",364.6,1084,0)
8^N^^111^1^0^0^5^2^OTH PAYER PAT ID NUMBER QUAL^0^1^0
"DATA",364.6,1085,0)
8^N^^111^1^0^0^6^30^OTH PAYER PAT ID NUMBER^0^1^0
"DATA",364.6,1086,0)
8^N^^111^1^0^0^7^2^OTH PAYER PAT ID QUAL (1)^0^1^0
"DATA",364.6,1087,0)
8^N^^111^1^0^0^8^30^OTH PAYER PAT ID (1)^0^1^0
"DATA",364.6,1088,0)
8^N^^111^1^0^0^9^2^OTH PAYER PAT ID QUAL (2)^0^1^0
"DATA",364.6,1089,0)
8^N^^111^1^0^0^10^30^OTH PAYER PAT ID (2)^0^1^0
"DATA",364.6,1090,0)
8^N^^111^1^0^0^11^2^OTH PAYER PAT ID QUAL (3)^0^1^0
"DATA",364.6,1091,0)
8^N^^111^1^0^0^12^30^OTH PAYER PAT ID (3)^0^1^0
"DATA",364.6,1092,0)
8^N^^111^1^0^0^13^30^OTH PAYER PAT ID# 3^0^1
"DATA",364.6,1094,0)
8^N^^16^1^^0^5^20^BILLING PROV SECONDARY ID #(2)^0^1
"DATA",364.6,1095,0)
8^N^^16^1^^0^6^2^BILLING PROV SECONDARY ID Q(3)^0^1
"DATA",364.6,1096,0)
8^N^^16^1^^0^7^20^BILLING PROV SECONDARY ID #(3)^0^1
"DATA",364.6,1097,0)
8^N^^16^1^^0^8^2^BILLING PROV SECONDARY ID Q(4)^0^1
"DATA",364.6,1098,0)
8^N^^16^1^^0^9^20^BILLING PROV SECONDARY ID #(4)^0^1
"DATA",364.6,1099,0)
8^N^^16^1^^0^10^2^BILLING PROV SECONDARY ID Q(5)^0^1
"DATA",364.6,1100,0)
8^N^^16^1^^0^11^20^BILLING PROV SECONDARY ID #(5)^0^1
"DATA",364.6,1101,0)
8^N^^16^1^^0^12^2^BILLING PROV SECONDARY ID Q(6)^0^1
"DATA",364.6,1102,0)
8^N^^16^1^^0^13^20^BILLING PROV SECONDARY ID #(6)^^1
"DATA",364.6,1103,0)
8^N^^16^1^^0^14^2^BILLING PROV SECONDARY ID Q(7)^0^1
"DATA",364.6,1104,0)
8^N^^16^1^^0^15^20^BILLING PROV SECONDARY ID #(7)^0^1
"DATA",364.6,1106,0)
8^N^^170^1^0^0^1^4^RECORD ID 'OP1 '^0^1^1
"DATA",364.6,1107,0)
8^N^^170^1^0^0^3^2^OTHER PAYER ATT NAME QUAL^0^1^0
"DATA",364.6,1108,0)
8^N^^170^1^0^0^4^1^OTHER PAYER ATT PROV QUAL^0^1^0
"DATA",364.6,1110,0)
8^N^^170^1^0^0^5^2^OTH PAYER ATT ID QUAL^0^1^0
"DATA",364.6,1111,0)
8^N^^170^1^0^0^6^30^OTHER PAYER ATTENDING PROV ID^0^1^0
"DATA",364.6,1112,0)
8^N^^170^1^0^0^7^2^OTH PAYER ATT ID QUAL(2)^0^1^0
"DATA",364.6,1113,0)
8^N^^170^1^0^0^8^30^OTHER PAYER ATT PROV ID(2)^0^1^0
"DATA",364.6,1114,0)
8^N^^170^1^0^0^9^2^OTH PAYER ATT ID QUAL(3)^0^1^0
"DATA",364.6,1115,0)
8^N^^170^1^0^0^10^30^OTHER PAYER ATT PROV ID(3)^0^1^0
"DATA",364.6,1116,0)
8^N^^171^1^^0^1^4^RECORD ID 'OP2 '^0^1^1
"DATA",364.6,1117,0)
8^N^^171^1^0^0^3^2^OTH PAYER OPER PROV NAME QUAL^0^1^0
"DATA",364.6,1118,0)
8^N^^171^1^0^0^4^1^OTH PAYER OPER ENTITY QUAL^0^1^0
"DATA",364.6,1119,0)
8^N^^171^1^0^0^5^2^OTH PAYER OPER PROV ID QUAL^0^1^0
"DATA",364.6,1120,0)
8^N^^171^1^0^0^6^30^OTH PAYER OPER PROV ID(1)^0^1^0
"DATA",364.6,1121,0)
8^N^^171^1^0^0^7^2^OTH PAYER OPER PROV ID QUAL(2)^0^1^0
"DATA",364.6,1122,0)
8^N^^171^1^0^0^8^30^OTH PAER OPER PROV ID(2)^0^1^0
"DATA",364.6,1123,0)
8^N^^171^1^0^0^9^2^OTH PAYER OPER PROV ID QUAL(3)^0^1^0
"DATA",364.6,1124,0)
8^N^^171^1^0^0^10^30^OTH PAYER OPER PROV ID(3)^0^1^0
"DATA",364.6,1126,0)
8^N^^172^1^^0^1^4^RECORD ID 'OP3 '^0^1^1
"DATA",364.6,1127,0)
8^N^^172^1^0^0^3^2^OTH PAYER FAC PROV NAM QUAL^0^1^0
"DATA",364.6,1128,0)
8^N^^172^1^0^0^4^1^OTH PAYER FAC PROV ENTY QUAL^0^1^0
"DATA",364.6,1129,0)
8^N^^172^1^0^0^5^2^OTH PAYER FAC PROV ID QUAL(1)^0^1^0
"DATA",364.6,1130,0)
8^N^^172^1^0^0^6^30^OTH PAYER FAC PROV ID(1)^0^1^0
"DATA",364.6,1131,0)
8^N^^172^1^0^0^7^2^OTH PAYER FAC PROV ID QUAL(2)^0^1^0
"DATA",364.6,1132,0)
8^N^^172^1^0^0^8^30^OTH PAYER FAC PROV ID(2)^0^1^0
"DATA",364.6,1133,0)
8^N^^172^1^0^0^9^2^OTH PAYER FAC PROV ID QUAL(3)^0^1^0
"DATA",364.6,1134,0)
8^N^^172^1^0^0^10^30^OTH PAYER FAC PROV ID(3)^0^1^0
"DATA",364.6,1135,0)
8^N^^173^1^^0^1^4^RECORD ID 'OP4 '^0^1^1
"DATA",364.6,1136,0)
8^N^^173^1^0^0^3^2^OTH PAYER REF PROV ID QUAL^0^1^0
"DATA",364.6,1137,0)
8^N^^173^1^0^0^4^1^OTH PAYER REF PROV ENT TYPE^0^1^0
"DATA",364.6,1138,0)
8^N^^173^1^0^0^5^2^OTH PAYER REF PROV ID QUAL(1)^0^1^0
"DATA",364.6,1139,0)
8^N^^173^1^^0^6^30^OTH PAYER REF PROV ID(1)^0^1^0
"DATA",364.6,1140,0)
8^N^^173^1^0^0^7^2^OTH PAYER REF PROV ID QUAL(2)^0^1^0
"DATA",364.6,1141,0)
8^N^^173^1^0^0^8^30^OTH PAYER REF PROV ID(2)^0^1^0
"DATA",364.6,1142,0)
8^N^^173^1^0^0^9^2^OTH PAYER REF PROV ID QUAL(3)^0^1^0
"DATA",364.6,1143,0)
8^N^^173^1^0^0^10^30^OTH PAYER REF PROV ID(3)^0^1^0
"DATA",364.6,1153,0)
8^N^^175^1^^0^1^4^RECORD ID 'OP6 '^0^1^1
"DATA",364.6,1154,0)
8^N^^175^1^0^0^3^2^OTH PAY PUR PROV ID QUAL^0^1^0
"DATA",364.6,1155,0)
8^N^^175^1^0^0^4^1^OTH PAY PUR PROV ENTITY TYPE^0^1^0
"DATA",364.6,1156,0)
8^N^^175^1^0^0^5^2^OTH PAY PUR PROV ID QUAL(1)^0^1^0
"DATA",364.6,1157,0)
8^N^^175^1^0^0^6^30^OTH PAY PUR PROV ID(1)^0^1^0
"DATA",364.6,1158,0)
8^N^^175^1^0^0^7^2^OTH PAY PUR PROV ID QUAL(2)^0^1^0
"DATA",364.6,1159,0)
8^N^^175^1^0^0^8^30^OTH PAY PUR PROV ID(2)^0^1^0
"DATA",364.6,1160,0)
8^N^^175^1^0^0^9^2^OTH PAY PUR PROV ID QUAL(3)^0^1^0
"DATA",364.6,1161,0)
8^N^^175^1^0^0^10^30^OTH PAY PUR PROV ID(3)^0^1^0
"DATA",364.6,1162,0)
8^N^^176^1^^0^1^4^RECORD ID 'OP7 '^0^1^1
"DATA",364.6,1163,0)
8^N^^176^1^0^0^3^2^OTH PAY SERV FAC LOC ID QUAL^0^1^0
"DATA",364.6,1164,0)
8^N^^176^1^0^0^4^1^OTH PAY SERV FAC LOC ENT TYPE^0^1^0
"DATA",364.6,1165,0)
8^N^^176^1^0^0^5^2^OTH PAY SERV FAC ID QUAL(1)^0^1^0
"DATA",364.6,1166,0)
8^N^^176^1^0^0^6^30^OTH PAY SERV FAC ID(1)^0^1^0
"DATA",364.6,1167,0)
8^N^^176^1^0^0^7^2^OTH PAY SERV FAC ID QUAL(2)^0^1^0
"DATA",364.6,1168,0)
8^N^^176^1^0^0^8^30^OTH PAY SERV FAC ID(2)^0^1^0
"DATA",364.6,1169,0)
8^N^^176^1^0^0^9^2^OTH PAY SERV FAC ID QUAL(3)^0^1^0
"DATA",364.6,1170,0)
8^N^^176^1^0^0^10^30^OTH PAY SERV FAC ID(3)^0^1^0
"DATA",364.6,1171,0)
8^N^^177^1^^0^1^4^RECORD ID 'OP8 '^0^1^1
"DATA",364.6,1172,0)
8^N^^177^1^0^0^3^2^OTH PAY SUPER PROV NAM QUAL^0^1^0
"DATA",364.6,1173,0)
8^N^^177^1^0^0^4^1^OTH PAY SUPER PROV ENTITY^0^1^0
"DATA",364.6,1174,0)
8^N^^177^1^0^0^5^2^OTH PAY SUPER PROV ID QUAL(1)^0^1^0
"DATA",364.6,1175,0)
8^N^^177^1^0^0^6^30^OTH PAY SUPER PROV ID(1)^0^1^0
"DATA",364.6,1176,0)
8^N^^177^1^0^0^7^2^OTH PAY SUPER PROV ID QUAL(2)^0^1^0
"DATA",364.6,1177,0)
8^N^^177^1^0^0^8^30^OTH PAY SUPER PROV ID(2)^0^1^0
"DATA",364.6,1178,0)
8^N^^177^1^0^0^9^2^OTH PAY SUPER PROV ID QUAL(3)^0^1^0
"DATA",364.6,1179,0)
8^N^^177^1^0^0^10^30^OTH PAY SUPER PROV ID(3)^0^1^0
"DATA",364.6,1180,0)
8^N^^178^1^^0^1^4^RECORD ID 'OP9 '^0^1^1
"DATA",364.6,1181,0)
8^N^^178^1^0^0^3^2^OTH PAY OTH PROV NAME QUAL^0^1^0
"DATA",364.6,1182,0)
8^N^^178^1^0^0^4^1^OTH PAY OTH PROV ENTITY TYPE^0^1^0
"DATA",364.6,1183,0)
8^N^^178^1^0^0^5^2^OTH PAY OTH PROV ID QUAL(1)^0^1^0
"DATA",364.6,1184,0)
8^N^^178^1^0^0^6^30^OTH PAY OTH PROV ID(1)^0^1^0
"DATA",364.6,1185,0)
8^N^^178^1^0^0^7^2^OTH PAY OTH PROV ID QUAL(2)^0^1^0
"DATA",364.6,1186,0)
8^N^^178^1^0^0^8^30^OTH PAY OTH PROV ID(2)^0^1^0
"DATA",364.6,1187,0)
8^N^^178^1^0^0^9^2^OTH PAY OTH PROV ID QUAL(3)^0^1^0
"DATA",364.6,1188,0)
8^N^^178^1^0^0^10^30^OTH PAY OTH PROV ID(3)^0^1^0
"DATA",364.6,1189,0)
8^N^^51^1^^0^1^4^RECORD ID 'CL1A'^^1^1
"DATA",364.6,1190,0)
8^N^^16^1^^0^1^4^RECORD ID 'PRV1'^^1^1
"DATA",364.6,1191,0)
8^N^^16^1^^0^2^2^BILLING PROV SECONDARY ID Q(1)^0^1
"DATA",364.6,1192,0)
8^N^^16^1^^0^3^20^BILLING PROV SECONDARY ID #(1)^0^1^0
"DATA",364.6,1194,0)
8^N^^55^1^^0^11^11^PURCHASED NON-LAB CHARGES^0^1
"DATA",364.6,1195,0)
8^N^^55^1^^0^13^2^PURCH SERV PRIM QUALIF^0^1
"DATA",364.6,1196,0)
8^N^^55^1^^0^14^1^PURCH SERV ENTITY TYP QUALIF^0^1
"DATA",364.6,1197,0)
8^N^^56^1^^0^1^4^RECORD ID 'SUB1'^0^1^1
"DATA",364.6,1198,0)
8^N^^56^1^^0^3^20^PURCH SERV SECOND ID 1^0^1
"DATA",364.6,1199,0)
8^N^^56^1^^0^4^2^PURCH SERV SECOND QUALIF 2^0^1
"DATA",364.6,1200,0)
8^N^^56^1^^0^5^20^PURCH SERV SECOND ID 2^0^1
"DATA",364.6,1201,0)
8^N^^56^1^^0^6^2^PURCH SERV SECOND QUALIF 3^0^1
"DATA",364.6,1202,0)
8^N^^56^1^^0^7^20^PURCH SERV SECOND ID 3^0^1
"DATA",364.6,1203,0)
8^N^^56^1^^0^8^2^PURCH SERV SECOND QUALIF 4^0^1
"DATA",364.6,1204,0)
8^N^^56^1^^0^9^20^PURCH SERV SECOND ID 4^0^1
"DATA",364.6,1205,0)
8^N^^56^1^^0^10^2^PURCH SERV SECOND QUALIF 5^0^1
"DATA",364.6,1206,0)
8^N^^56^1^^0^11^20^PURCH SERV SECOND ID 5^0^1
"DATA",364.6,1207,0)
8^N^^57^1^^0^1^4^RECORD ID 'SUB2'^0^1^1
"DATA",364.6,1209,0)
8^N^^57^1^^0^8^20^SERV FAC SECONDARY ID 1^0^1
"DATA",364.6,1210,0)
8^N^^57^1^^0^9^2^SERV FAC SECONDARY QUALIF 2^0^1
"DATA",364.6,1211,0)
8^N^^57^1^^0^10^20^SERV FAC SECONDARY ID 2^0^1
"DATA",364.6,1212,0)
8^N^^57^1^^0^11^2^SERV FAC SECONDARY QUALIF 3^0^1
"DATA",364.6,1213,0)
8^N^^57^1^^0^12^20^SERV FAC SECONDARY ID 3^0^1
"DATA",364.6,1214,0)
8^N^^57^1^^0^13^2^SERV FAC SECONDARY QUALIF 4^0^1
"DATA",364.6,1215,0)
8^N^^57^1^^0^14^20^SERV FAC SECONDARY ID 4^0^1
"DATA",364.6,1216,0)
8^N^^57^1^^0^15^2^SERV FAC SECONDARY QUALIF 5^0^1
"DATA",364.6,1217,0)
8^N^^57^1^^0^16^20^SERV FAC SECONDARY ID 5^0^1
"DATA",364.6,1218,0)
8^N^^101^1^^0^1^4^RECORD ID 'OPR5'^0^1^1
"DATA",364.6,1219,0)
8^N^^104^1^^0^1^4^RECORD ID 'OPR8'^0^1^1
"DATA",364.6,1220,0)
8^N^^99^1^^0^1^4^RECORD ID 'OPR3'^0^1^1
"DATA",364.6,1221,0)
8^N^^98^1^^0^1^4^RECORD ID 'OPR2'^0^1^1
"DATA",364.6,1222,0)
8^N^^97^1^^0^1^4^RECORD ID 'OPR1'^0^1^1
"DATA",364.6,1223,0)
8^N^^96^1^0^0^1^4^RECORD ID 'OPR '^0^1^1
"DATA",364.6,1224,0)
8^N^^98^1^^0^2^2^ATT/REND PROV SECOND QUALIF 1^0^1
"DATA",364.6,1225,0)
8^N^^98^1^^0^3^30^ATT/REND PROV SECOND ID 1^0^1
"DATA",364.6,1226,0)
8^N^^98^1^^0^4^2^ATT/REND PROV SECOND QUALIF 2^0^1
"DATA",364.6,1227,0)
8^N^^98^1^^0^5^30^ATT/REND PROV SECOND ID 2^0^1
"DATA",364.6,1228,0)
8^N^^98^1^^0^6^2^ATT/REND PROV SECOND QUALIF 3^0^1
"DATA",364.6,1229,0)
8^N^^98^1^^0^7^30^ATT/REND PROV SECOND ID 3^0^1
"DATA",364.6,1230,0)
8^N^^98^1^^0^8^2^ATT/REND PROV SECOND QUALIF 4^0^1
"DATA",364.6,1231,0)
8^N^^98^1^^0^9^30^ATT/REND PROV SECOND ID 4^0^1
"DATA",364.6,1232,0)
8^N^^98^1^^0^10^2^ATT/REND PROV SECOND QUALIF 5^0^1
"DATA",364.6,1233,0)
8^N^^98^1^^0^11^30^ATT/REND PROV SECOND ID 5^0^1
"DATA",364.6,1234,0)
8^N^^99^1^^0^2^2^OPER PHY SECONDARY QUALIF 1^0^1
"DATA",364.6,1235,0)
8^N^^99^1^^0^3^30^OPER PHY SECONDARY ID 1^0^1
"DATA",364.6,1236,0)
8^N^^99^1^^0^4^2^OPER PHY SECONDARY QUALIF 2^0^1
"DATA",364.6,1237,0)
8^N^^99^1^^0^5^30^OPER PHY SECONDARY ID 2^0^1
"DATA",364.6,1238,0)
8^N^^99^1^^0^6^2^OPER PHY SECONDARY QUALIF 3^0^1
"DATA",364.6,1239,0)
8^N^^99^1^^0^7^30^OPER PHY SECONDARY ID 3^0^1
"DATA",364.6,1240,0)
8^N^^99^1^^0^8^2^OPER PHY SECONDARY QUALIF 4^0^1
"DATA",364.6,1241,0)
8^N^^99^1^^0^9^30^OPER PHY SECONDARY ID 4^0^1
"DATA",364.6,1242,0)
8^N^^99^1^^0^10^2^OPER PHY SECONDARY QUALIF 5^0^1
"DATA",364.6,1243,0)
8^N^^99^1^^0^11^30^OPER PHY SECONDARY ID 5^0^1
"DATA",364.6,1244,0)
8^N^^100^1^^0^2^2^OTHER PROV SECOND QUALIF 1^^1
"DATA",364.6,1245,0)
8^N^^100^1^^0^3^30^OTHER PROV SECOND ID 1^^1
"DATA",364.6,1246,0)
8^N^^100^1^^0^4^2^OTHER PROV SECOND QUALIF 2^^1
"DATA",364.6,1247,0)
8^N^^100^1^^0^5^30^OTHER PROV SECOND ID 2^^1
"DATA",364.6,1248,0)
8^N^^100^1^^0^6^2^OTHER PROV SECOND QUALIF 3^^1
"DATA",364.6,1249,0)
8^N^^100^1^^0^7^30^OTHER PROV SECOND ID 3^^1
"DATA",364.6,1250,0)
8^N^^100^1^^0^8^2^OTHER PROV SECOND QUALIF 4^^1
"DATA",364.6,1251,0)
8^N^^100^1^^0^9^30^OTHER PROV SECOND ID 4^^1
"DATA",364.6,1252,0)
8^N^^100^1^^0^10^2^OTHER PROV SECOND QUALIF 5^^1
"DATA",364.6,1253,0)
8^N^^100^1^^0^11^30^OTHER PROV SECOND ID 5^^1
"DATA",364.6,1254,0)
8^N^^101^1^^0^2^2^REFERING PROV SECOND QUALIF 1^0^1^0
"DATA",364.6,1255,0)
8^N^^101^1^^0^3^30^REFERING PROV SECOND ID 1^0^1
"DATA",364.6,1256,0)
8^N^^101^1^^0^4^2^REFERING PROV SECOND QUALIF 2^0^1
"DATA",364.6,1257,0)
8^N^^101^1^^0^5^30^REFERING PROV SECOND ID 2^0^1
"DATA",364.6,1258,0)
8^N^^101^1^^0^6^2^REFERING PROV SECOND QUALIF 3^0^1
"DATA",364.6,1259,0)
8^N^^101^1^^0^7^30^REFERING PROV SECOND ID 3^0^1
"DATA",364.6,1260,0)
8^N^^101^1^^0^8^2^REFERING PROV SECOND QUALIF 4^0^1
"DATA",364.6,1261,0)
8^N^^101^1^^0^9^30^REFERING PROV SECOND ID 4^0^1
"DATA",364.6,1262,0)
8^N^^101^1^^0^10^2^REFERING PROV SECOND QUALIF 5^0^1
"DATA",364.6,1263,0)
8^N^^101^1^^0^11^30^REFERING PROV SECOND ID 5^0^1
"DATA",364.6,1277,0)
8^N^^104^1^^0^2^2^SUPERV PROV SECOND QUALIF 1^0^1
"DATA",364.6,1278,0)
8^N^^104^1^^0^3^30^SUPERV PROV SECOND ID 1^0^1
"DATA",364.6,1279,0)
8^N^^104^1^^0^4^2^SUPERV PROV SECOND QUALIF 2^0^1
"DATA",364.6,1280,0)
8^N^^104^1^^0^5^30^SUPERV PROV SECOND ID 2^0^1
"DATA",364.6,1281,0)
8^N^^104^1^^0^6^2^SUPERV PROV SECOND QUALIF 3^0^1
"DATA",364.6,1282,0)
8^N^^104^1^^0^7^30^SUPERV PROV SECOND ID 3^0^1
"DATA",364.6,1283,0)
8^N^^104^1^^0^8^2^SUPERV PROV SECOND QUALIF 4^0^1
"DATA",364.6,1284,0)
8^N^^104^1^^0^9^30^SUPERV PROV SECOND ID 4^0^1
"DATA",364.6,1285,0)
8^N^^104^1^^0^10^2^SUPERV PROV SECOND QUALIF 5^0^1
"DATA",364.6,1286,0)
8^N^^104^1^^0^11^30^SUPERV PROV SECOND ID 5^0^1
"DATA",364.6,1287,0)
8^N^^112^1^^0^1^4^RECORD ID 'OI4 '^0^1^1
"DATA",364.6,1288,0)
8^N^^113^1^^0^1^4^RECORD ID 'OI5 '^0^1^1
"DATA",364.6,1289,0)
8^^^113^1^^0^4^45^OTH INS SUBSCR ADDRESS LINE 1^0^1
"DATA",364.6,1290,0)
8^N^^113^1^^0^5^40^OTH INS SUBSCR ADDRESS LINE 2^0^1
"DATA",364.6,1291,0)
8^N^^113^1^^0^6^30^OTH INS SUBSCR CITY^0^1
"DATA",364.6,1292,0)
8^N^^113^1^^0^7^2^OTH INS SUBSCR STATE^0^1
"DATA",364.6,1293,0)
8^N^^113^1^^0^8^10^OTH INS SUBSCR ZIP^0^1
"DATA",364.6,1294,0)
8^N^^113^1^^0^9^2^OTH INS SUBSCR QUALIF 1^0^1
"DATA",364.6,1295,0)
8^N^^113^1^^0^10^30^OTH INS SUBSCR ID 1^0^1
"DATA",364.6,1296,0)
8^N^^113^1^^0^11^2^OTH INS SUBSCR QUALIF 2^0^1
"DATA",364.6,1297,0)
8^N^^113^1^^0^12^30^OTH INS SUBSCR ID 2^0^1
"DATA",364.6,1298,0)
8^N^^113^1^^0^13^2^OTH INS SUBSCR QUALIF 3^0^1
"DATA",364.6,1299,0)
8^N^^113^1^^0^14^30^OTH INS SUBSCR ID 3^0^1
"DATA",364.6,1300,0)
8^N^^100^1^0^0^1^4^RECORD ID 'OPR4'^^1^1
"DATA",364.6,1301,0)
8^N^^177^1^^0^2^1^SUPERV PROV COB SEQUENCE^0^1
"DATA",364.6,1302,0)
8^N^^1^50^0^0^39^1^PATIENT SIGNATURE SOURCE CODE^0^1^1
"DATA",364.6,1303,0)
8^N^^170^1^^0^2^1^ATT/REND PROV COB SEQUENCE^0^1
"DATA",364.6,1304,0)
8^N^^171^1^^0^2^1^OPERATING PROV COB SEQUENCE^0^1^0
"DATA",364.6,1305,0)
8^N^^172^1^^0^2^1^FACILITY PROV COB SEQUENCE^0^1
"DATA",364.6,1306,0)
8^N^^173^1^^0^2^1^REFERRING PROV COB SEQUENCE^0^1
"DATA",364.6,1308,0)
8^N^^175^1^^0^2^1^PURCHASE PROV COB SEQUENCE^0^1
"DATA",364.6,1309,0)
8^N^^176^1^^0^2^1^SERV FAC COB SEQUENCE^0^1
"DATA",364.6,1310,0)
8^N^^178^1^^0^2^1^OTHER PROV COB SEQUENCE^0^1
"DATA",364.6,1311,0)
8^N^^111^1^^0^2^1^OTH PAYER INSURANCE SEQUENCE^0^1^0
"DATA",364.6,1312,0)
8^N^^112^1^^0^2^1^OTHER INSURANCE SEQUENCE^^1
"DATA",364.6,1313,0)
8^N^^113^1^^0^2^1^OTHER INSURANCE SEQUENCE^^1
"DATA",364.6,1314,0)
8^N^^111^1^3^0^3^2^OTH PAYER PAT NAME QUAL^0^1^0
"DATA",364.6,1315,0)
8^N^^20^1^1^0^9^2^CURRENT INSURANCE CO INS TYPE^0^1
"DATA",364.6,1316,0)
8^N^^20^1^^0^7^20^CURRENT INS CO PROVIDER NUMBER^0^1
"DATA",364.6,1317,0)
8^N^^20^1^1^^13^2^INS SPECIFIC BILLING ID QUAL^0^1
"DATA",364.6,1318,0)
8^N^^97^1^^0^14^1^REFERRING PERSON/NON-PERSON^0^1^
"DATA",364.6,1319,0)
8^N^^97^1^^0^15^1^OPERATING PERSON/NON-PERSON^0^1^0
"DATA",364.6,1320,0)
8^N^^113^1^^0^99.9^1^CLEAN UP OI5^1^1
"DATA",364.7,1,0)
1^N^54^^^^N
"DATA",364.7,1,3,0)
^^1^1^2991007^^^^
"DATA",364.7,1,3,1,0)
If data element's value is null, don't output it.
"DATA",364.7,5,0)
7^N^5^^^^N
"DATA",364.7,5,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,2) I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$$PTADDR^IBCEF(IBXIEN,4)
"DATA",364.7,5,3,0)
2^364.73^2^2^3030911^^^^
"DATA",364.7,5,3,1,0)
Retrieves insured city data from IBXSAVE array previously extracted.  If
"DATA",364.7,5,3,2,0)
data element's value is null, do not output.
"DATA",364.7,6,0)
3^N^103^^^^N
"DATA",364.7,6,1)
K:$D(^TMP("IBHDR",$J)) IBXDATA S:'$D(IBXDATA) IBXNOREQ=1
"DATA",364.7,6,3,0)
^364.73^1^1^3031105^^^^
"DATA",364.7,6,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR",$J) will already exist.  Don't want to extract this field again, so kill data element so there is no output.
"DATA",364.7,7,0)
9^N^5^^^^N
"DATA",364.7,7,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,4) I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$$PTADDR^IBCEF(IBXIEN,11)
"DATA",364.7,7,3,0)
^364.73^2^2^3030911^^^^
"DATA",364.7,7,3,1,0)
Retrieves insured zip code address data from IBXSAVE array previously
"DATA",364.7,7,3,2,0)
extracted.  If data element's value is null, do not output.
"DATA",364.7,12,0)
1015^N^5^^^^N
"DATA",364.7,12,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",4)
"DATA",364.7,12,3,0)
^364.73^7^7^3040722^^^^
"DATA",364.7,12,3,1,0)
EI=Employer ID;SY=Social Security Number;0B=State License Number;
"DATA",364.7,12,3,2,0)
1A = Blue Cross Number;1B=Blue Shield Number;1C=Medicare Number;
"DATA",364.7,12,3,3,0)
1D = Medicaid Number;1G=UPIN Number;1H=TRICARE ID Number;
"DATA",364.7,12,3,4,0)
B3 = PPO Number;BQ=HMO Code Number;U3=USIN Number;G2=Commercial Number;
"DATA",364.7,12,3,5,0)
FH = Clinic Number;X5=State Industrial Accident Provider Number;
"DATA",364.7,12,3,6,0)
LU=Location Number
"DATA",364.7,12,3,7,0)
This is the X12 interpretation of the type of billing provider id for this insurance co.  It is calculated from the electronic type of plan. Refer to the 837 V4010 (professional) fields 2010BB/REF(2)/01 and 2000B/SBR/09 for details.
"DATA",364.7,13,0)
1016^N^5^^^^N^0
"DATA",364.7,13,1)
S IBXDATA=$P($G(IBXSAVE("INM")),U,5)
"DATA",364.7,13,3,0)
^364.73^3^3^3030910^^^^
"DATA",364.7,13,3,1,0)
INSURED NAME SUFFIX also known as SUBSCRIBER NAME SUFFIX. It is extracted 
"DATA",364.7,13,3,2,0)
using a function call, $$SETSTR^VALM1 to get the full name then an IB
"DATA",364.7,13,3,3,0)
function to format it, $$NAME^IBCEFG1.
"DATA",364.7,14,0)
17^N^5^^^^N
"DATA",364.7,14,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,5) I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$G(^UTILITY("VAPA",$J,1))
"DATA",364.7,14,3,0)
^364.73^2^2^3030911^^^^
"DATA",364.7,14,3,1,0)
Retrieves insured address data from IBXSAVE array previously extracted.  If
"DATA",364.7,14,3,2,0)
data element's value is null, do not output.
"DATA",364.7,17,0)
1017^N^131^^^^N
"DATA",364.7,17,1)
S IBXDATA="CI4 "
"DATA",364.7,17,3,0)
^^2^2^3030811^^^^
"DATA",364.7,17,3,1,0)
Loop 2110, Piece 1 of Sequence 36, Current Insured Group - Responsible
"DATA",364.7,17,3,2,0)
Party Information. RECORD ID = CI4
"DATA",364.7,18,0)
1018^N^5^^^^N^1
"DATA",364.7,18,1)
K IBXDATA
"DATA",364.7,18,3,0)
^^1^1^3030821^^^^
"DATA",364.7,18,3,1,0)
ENTITY INDENTIFIER CODE set to QD, Professional and Institution.
"DATA",364.7,25,0)
60^N^93^^^^N
"DATA",364.7,25,1)
S IBXDATA=$$DT^IBCEFG1(IBXDATA,"","D8")
"DATA",364.7,25,3,0)
^^2^2^2991115^^^^
"DATA",364.7,25,3,1,0)
Format data element in CCYYMMDD date format.  If data element's value is
"DATA",364.7,25,3,2,0)
null, do not output.
"DATA",364.7,27,0)
92^N^86^^^^N
"DATA",364.7,27,1)
N A,C,R,Z M A=IBXDATA S (Z,R)=0,C=1 K IBXDATA,IBXSAVE("DX-E") F  S Z=$O(A(Z)) Q:'Z  S A=$TR($P($G(^ICD9(+A(Z),0)),U),".") I A'="" D ID1^IBCEF2(.R,.A,.C) Q:C=""  I A'="" S IBXDATA(R)=A
"DATA",364.7,27,3,0)
^364.73^9^9^3040303^^^^
"DATA",364.7,27,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,27,3,2,0)
possible for the data element in the IBXDATA array.  Each diagnosis code
"DATA",364.7,27,3,3,0)
name is stripped of its decimal point and is output on its own DCn entry
"DATA",364.7,27,3,4,0)
where n is a record count that will allow it to be mapped into one of the
"DATA",364.7,27,3,5,0)
12 available pieces of the 837 diagnosis code record correctly.  This is
"DATA",364.7,27,3,6,0)
done to accommodate Austin's translator and one of its shortcomings.  Save
"DATA",364.7,27,3,7,0)
off the extract sequence # of each diagnosis output in the global array
"DATA",364.7,27,3,8,0)
^TMP("IBXSAVE",$J,"DX") for later use.
"DATA",364.7,27,3,9,0)
Z>4 ADDED TO PREVENT SENDING MORE THAN 4 DIAG CODES (BL)
"DATA",364.7,28,0)
56^N^5^^^^N
"DATA",364.7,28,1)
S IBXDATA=$G(IBXSAVE("DISDT")) D:$S('IBXDATA:'$$INPAT^IBCEF(IBXIEN,1),1:0) F^IBCEF("N-STATEMENT COVERS TO DATE",,,IBXIEN) I IBXDATA S IBXDATA=$$DT^IBCEFG1(IBXDATA\1,"","D8")
"DATA",364.7,28,3,0)
^364.73^4^4^3040227^
"DATA",364.7,28,3,1,0)
Extract only date from date/time retrieved from IBXSAVE array previously
"DATA",364.7,28,3,2,0)
extracted.  For an outpatient claim not related to an inpatient episode,
"DATA",364.7,28,3,3,0)
output the statement 'To Date'.  Format date in CCYYMMDD format.
"DATA",364.7,28,3,4,0)
If data element's value is null, do not output.
"DATA",364.7,53,0)
945^N^5^^^^N
"DATA",364.7,53,1)
N IBZ D GETPRV^IBCEU(IBXIEN,9,.IBZ) N IBZZ S IBZZ=$P($G(IBZ(9,1)),U) S:IBZZ="" IBZZ=$P($G(^DGCR(399,IBXIEN,"U1")),U,14) S IBXDATA=$$GETNMEL^IBCEF7(IBZZ,"FAMILY")
"DATA",364.7,53,3,0)
^364.73^2^2^3030917^^^^
"DATA",364.7,53,3,1,0)
 
"DATA",364.7,53,3,2,0)
Operating provider last name
"DATA",364.7,79,0)
1019^N^5^^^^N^0
"DATA",364.7,79,1)
K IBXDATA
"DATA",364.7,79,3,0)
^^1^1^3030821^^^^
"DATA",364.7,79,3,1,0)
ENTITY TYPE QUALIFIER. PERSON =1, NON-PERSON=2. Calculated or Extracted.
"DATA",364.7,80,0)
1020^N^5^^^^N^0
"DATA",364.7,80,1)
K IBXDATA
"DATA",364.7,80,3,0)
^^1^1^3030821^^^^
"DATA",364.7,80,3,1,0)
Last Name or organization Name for the Responsible Party.
"DATA",364.7,88,0)
1029^N^5^^^^N^0
"DATA",364.7,88,1)
S IBXDATA="01"
"DATA",364.7,88,3,0)
^^1^1^3030722^^
"DATA",364.7,88,3,1,0)
Set Unit or Basic for Measurement Code
"DATA",364.7,89,0)
1030^N^5^^^^N^0
"DATA",364.7,89,1)
S IBXDATA=""
"DATA",364.7,89,3,0)
^^1^1^3030722^^
"DATA",364.7,89,3,1,0)
Patient Weight. Extract from existing data?
"DATA",364.7,110,0)
1031^N^5^^^^N^0
"DATA",364.7,110,1)
S IBXDATA=""
"DATA",364.7,110,3,0)
^^1^1^3030722^^
"DATA",364.7,110,3,1,0)
Find Pregnancy Indicator.
"DATA",364.7,112,0)
95^N^101^^^^N
"DATA",364.7,112,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI1 ")
"DATA",364.7,112,3,0)
^364.73^7^7^3040702^^^^
"DATA",364.7,112,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,112,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) variable
"DATA",364.7,112,3,3,0)
holds the indicator of which insurance [(P)rimary/(S)econdary/(T)ertiary] is
"DATA",364.7,112,3,4,0)
currently responsible for the bill.    Using this data as a guide, the next
"DATA",364.7,112,3,5,0)
insurance for the primary is secondary, then tertiary.  For secondary, it's
"DATA",364.7,112,3,6,0)
primary then tertiary, and for tertiary, it's primary, then secondary. For
"DATA",364.7,112,3,7,0)
other than the first occurrence, the RECORD ID 'OI1 ' must be output.
"DATA",364.7,134,0)
192^N^280^^^^N
"DATA",364.7,134,1)
I $G(IBXDATA)'="",$$WNRBILL^IBEFUNC(IBXIEN) S IBXDATA="MEDICARE"
"DATA",364.7,134,3,0)
^364.73^4^4^3040114^^^^
"DATA",364.7,134,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,134,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,134,3,3,0)
element so there is no output.  If MEDICARE WNR is current insurance,
"DATA",364.7,134,3,4,0)
mailing name is MEDICARE.
"DATA",364.7,135,0)
65^N^5^^^^N
"DATA",364.7,135,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,6) I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$G(^UTILITY("VAPA",$J,2))
"DATA",364.7,135,3,0)
^364.73^2^2^3030911^^^^
"DATA",364.7,135,3,1,0)
Retrieves insured address line 2 data from IBXSAVE array previously
"DATA",364.7,135,3,2,0)
extracted.  If data element's value is null, do not output.
"DATA",364.7,141,0)
135^N^5^^^^N
"DATA",364.7,141,1)
K IBXDATA N Z S Z="" F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"RX")) D PADNDC^IBCEF72(Z) S IBXDATA(Z)=$S($P(IBXSAVE("OUTPT",Z,"RX"),U,3)="":"",1:$TR($P(IBXSAVE("OUTPT",Z,"RX"),U,3),"-"))
"DATA",364.7,141,3,0)
^364.73^3^3^3040323^^^^
"DATA",364.7,141,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,141,3,2,0)
possible for the data element in the previously extract IBXSAVE array.
"DATA",364.7,141,3,3,0)
If we don't know the NDC#, output all 9's.
"DATA",364.7,144,0)
1032^N^5^^^^N^0
"DATA",364.7,144,1)
S IBXDATA=""
"DATA",364.7,144,3,0)
^^2^2^3030722^^^
"DATA",364.7,144,3,1,0)
INITIAL TREATMENT DATE ON CLAIMS INVOLVING
"DATA",364.7,144,3,2,0)
 SPINAL MANIPULATION FOR MEDICARE PART B
"DATA",364.7,151,0)
186^N^5^^^^N
"DATA",364.7,151,1)
I $P($G(IBXSAVE("CADR")),U,4)'="" S IBXDATA=$P(IBXSAVE("CADR"),U,4)
"DATA",364.7,151,3,0)
^364.73^6^6^3030926^^^^
"DATA",364.7,151,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,151,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,151,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,151,3,4,0)
value is null.
"DATA",364.7,151,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,151,3,6,0)
have been set in a previous data field.
"DATA",364.7,152,0)
185^N^5^^^^N
"DATA",364.7,152,1)
D CHKADD^IBCEF7 I $P($G(IBXSAVE("CADR")),U)'="" S IBXDATA=$P(IBXSAVE("CADR"),U)
"DATA",364.7,152,3,0)
^364.73^6^6^3040528^^^^
"DATA",364.7,152,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,152,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,152,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,152,3,4,0)
value is null.
"DATA",364.7,152,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,152,3,6,0)
have been set in a previous data field.
"DATA",364.7,153,0)
187^N^5^^^^N
"DATA",364.7,153,1)
I $P($G(IBXSAVE("CADR")),U,5)'="" S IBXDATA=$$STATE^IBCEFG1($P(IBXSAVE("CADR"),U,5))
"DATA",364.7,153,3,0)
^364.73^6^6^3030926^^^^
"DATA",364.7,153,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,153,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,153,3,3,0)
element so there is no output.  If header not yet extracted, format data
"DATA",364.7,153,3,4,0)
as state's 2-character abbreviation.
"DATA",364.7,153,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,153,3,6,0)
have been set in a previous data field.
"DATA",364.7,154,0)
188^N^5^^^^N
"DATA",364.7,154,1)
K IBXDATA I $P($G(IBXSAVE("CADR")),U,6)'="" S IBXDATA=$P(IBXSAVE("CADR"),U,6)
"DATA",364.7,154,3,0)
^364.73^6^6^3030926^^^^
"DATA",364.7,154,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,154,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,154,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,154,3,4,0)
value is null.
"DATA",364.7,154,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,154,3,6,0)
have been set in a previous data field.
"DATA",364.7,156,0)
170^N^275^^^^N
"DATA",364.7,156,1)
N A,Z,Q S Q=IBXDATA,A=$P(Q,U,2),Z=$S(+Q=+$P($G(^IBE(350.9,1,0)),U,2):A'=1,1:0) K:'Q IBXDATA I $D(IBXDATA) S IBXSAVE("IBFAC")=Q,IBXDATA=$$GETFAC^IBCEP8(+IBXDATA,+A,0)
"DATA",364.7,156,3,0)
^^3^3^3030827^^^^
"DATA",364.7,156,3,1,0)
This returns the name of the INSTITUTION file entry for the non-VA or
"DATA",364.7,156,3,2,0)
remote site where care was rendered.  Save the ien and flag in 
"DATA",364.7,156,3,3,0)
IBXSAVE("IBFAC") for later use.
"DATA",364.7,157,0)
171^N^5^^^^N
"DATA",364.7,157,1)
K IBXSAVE("PSVC") K:'$G(IBXSAVE("IBFAC"))&'$P($G(IBXSAVE("IBFAC")),U,3) IBXDATA I $D(IBXDATA) S IBXDATA=$$GETFAC^IBCEP8(+IBXSAVE("IBFAC"),+$P(IBXSAVE("IBFAC"),U,2),12)
"DATA",364.7,157,3,0)
^^3^3^3030827^^^^
"DATA",364.7,157,3,1,0)
Extract the street address for the rendering facility.  Relies on the
"DATA",364.7,157,3,2,0)
existence of the array IBXSAVE("IBFAC") extracted previously by the
"DATA",364.7,157,3,3,0)
rendering facility name field.
"DATA",364.7,186,0)
1033^N^5^^^^N^0
"DATA",364.7,186,1)
S IBXDATA=""
"DATA",364.7,186,3,0)
^^1^1^3030722^^^^
"DATA",364.7,186,3,1,0)
FIND THE LAST XRAY DATE WHEN CLAIM INVOLVES A SPINAL MANIPULATION
"DATA",364.7,187,0)
184^N^127^^^^N
"DATA",364.7,187,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA) K:$D(^TMP("IBHDR1",$J)) IBXDATA I $D(IBXDATA),$$FT^IBCEF(IBXIEN)=2 N IBZ S IBZ=$$WNRBILL^IBEFUNC(IBXIEN,+$$COBN^IBCEF(IBXIEN)) S:IBZ IBXDATA="VA0"_+$$SITE^VASITE()
"DATA",364.7,187,3,0)
^^3^3^3030720^^^^
"DATA",364.7,187,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,187,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,187,3,3,0)
element so there is no output.
"DATA",364.7,192,0)
1034^N^5^^^^N^0
"DATA",364.7,192,1)
S IBXDATA=""
"DATA",364.7,192,3,0)
^^1^1^3030722^^^
"DATA",364.7,192,3,1,0)
HEARING AND VISION PRESCRIPTION DATE
"DATA",364.7,193,0)
1035^N^5^^^^N^0
"DATA",364.7,193,1)
K IBXDATA S IBIFN=IBXIEN S IBZZ=$$MCRONBIL^IBEFUNC(IBIFN) S IBXDATA=$S(IBZZ:"A",IBZZ=0:"C",1:"")
"DATA",364.7,193,3,0)
^^1^1^3030723^^^^
"DATA",364.7,193,3,1,0)
MEDICARE ASSIGNMENT CODE: A = ASSIGNED and C = Not Assigned.
"DATA",364.7,195,0)
196^N^129^^^^N
"DATA",364.7,195,1)
N Z S Z=$$COID^IBCEF2(IBXIEN) S:Z="" Z="0000" K:IBXDATA="" IBXDATA I $D(IBXDATA) S IBXDATA=$E(IBXDATA_$J("",5),1,5)_$E(Z_$J("",4),1,4)
"DATA",364.7,195,3,0)
^^5^5^2990608^^^^
"DATA",364.7,195,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,195,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,195,3,3,0)
element so there is no output.  Positions 1-5 are the id number as assigned
"DATA",364.7,195,3,4,0)
by ENVOY, positions 6-9 are the claim office id (default if there is none
"DATA",364.7,195,3,5,0)
is '0000').   Also don't output data element if its value is null.
"DATA",364.7,196,0)
1036^N^5^^^^N^0
"DATA",364.7,196,1)
S IBXDATA=""
"DATA",364.7,196,3,0)
^^1^1^3030722^^^
"DATA",364.7,196,3,1,0)
MAMMOGRAPGHY CERTIFICATION CODE 30 ALPH-NUM.
"DATA",364.7,197,0)
1037^N^5^^^^N^0
"DATA",364.7,197,1)
S IBXDATA=""
"DATA",364.7,197,3,0)
^^2^2^3030722^^^
"DATA",364.7,197,3,1,0)
SPINAL MANIP. CONDITION CODE; A = Acute Condition, C = Chronic Condition, D = Non-Acute
"DATA",364.7,197,3,2,0)
E = Non-Life Threatening, F = Routine, G = Symptomatic, M = Acute Manifestation of a Chronic Condition
"DATA",364.7,198,0)
1038^N^5^^^^N^0
"DATA",364.7,198,1)
S IBXDATA=""
"DATA",364.7,198,3,0)
^^2^2^3030722^^^^
"DATA",364.7,198,3,1,0)
Required when sequence 50 piece 44 (Spinal Manipulation Nature of Condifion Code) = A or M on spinal
"DATA",364.7,198,3,2,0)
manipulation claims and the payer is Medicare
"DATA",364.7,203,0)
1039^N^5^^^^N^0
"DATA",364.7,203,1)
K:'$G(IBXSAVE("IBFAC"))&'$P($G(IBXSAVE("IBFAC")),U,3) IBXDATA I $D(IBXDATA) S IBXDATA=$$GETFAC^IBCEP8(+IBXSAVE("IBFAC"),+$P(IBXSAVE("IBFAC"),U,2),2)
"DATA",364.7,203,3,0)
^^1^1^3030827^^^^
"DATA",364.7,203,3,1,0)
RENDERING PROVIDER FACILITY INFORMATION TO FIND THE SERVICE FACILITY ADDRESS LINE 2
"DATA",364.7,204,0)
1040^N^5^^^^N^0
"DATA",364.7,204,1)
N Z,F,G K IBXDATA,IBXSAVE("NVF") I '$$INSFT^IBCEU5(IBXIEN) S Z=$$OUTPRV^IBCEF72("SUB1",IBXIEN,.IBXSAVE) I Z S IBXSAVE("NVF")=Z,F="PROVINF"_$P("^_FAC",U,Z),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(Z=1:3,1:0),1)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,3)
"DATA",364.7,204,3,0)
^364.73^12^12^3030904^^^^
"DATA",364.7,204,3,1,0)
If the bill is a professional bill, was performed at an 'outside' facility,
"DATA",364.7,204,3,2,0)
and the service was purchased THEN
"DATA",364.7,204,3,3,0)
   If the rendering provider is an outside provider:
"DATA",364.7,204,3,4,0)
      output the ids for the rendering provider here.
"DATA",364.7,204,3,5,0)
   If the rendering provider is NOT an outside provider:
"DATA",364.7,204,3,6,0)
      output the ids for the outside facility here.
"DATA",364.7,204,3,7,0)
Output if an ID exists for the 'current insurance'.  Must save the type
"DATA",364.7,204,3,8,0)
of provider (1 = person or 2 = facility) whose ids were extracted in
"DATA",364.7,204,3,9,0)
variable IBXSAVE("NVF") to be used later in this record.  It must be
"DATA",364.7,204,3,10,0)
killed in the last piece of the record.
"DATA",364.7,204,3,11,0)
The ids returned are screened for valid id qualifiers for the SUB1 record.
"DATA",364.7,204,3,12,0)
Output the first other id qualifier for the current insurance.
"DATA",364.7,205,0)
1041^N^274^^^^N^0
"DATA",364.7,205,1)
I $G(IBXDATA) N Z S Z=$P($G(^DGCR(399,IBXIEN,"U2")),U,11),IBXDATA=$S($P($G(^IBA(355.93,+IBXDATA,0)),U,11)'="":$P($G(^(0)),U,11),Z&("24"[Z):"LI",1:"FA")
"DATA",364.7,205,3,0)
^364.73^3^3^3030917^^^^
"DATA",364.7,205,3,1,0)
If the service is performed at an outside facility, output the
"DATA",364.7,205,3,2,0)
service facility type of facility if defined for the outside facility.
"DATA",364.7,205,3,3,0)
If none defined, output the default of 'FA' for non-lab and 'LI' for lab.
"DATA",364.7,206,0)
1042^N^274^^^^N^0
"DATA",364.7,206,1)
I $G(IBXDATA) S IBXDATA=2
"DATA",364.7,206,3,0)
^364.73^2^2^3030917^^^^
"DATA",364.7,206,3,1,0)
Output the service facility entity as a non-person (2) if service was
"DATA",364.7,206,3,2,0)
performed at an outside facility.
"DATA",364.7,207,0)
1043^N^268^^^^N^0
"DATA",364.7,207,1)
I $D(IBXDATA) S IBXDATA=IBXDATA
"DATA",364.7,207,3,0)
^364.73^1^1^3030917^^^^
"DATA",364.7,207,3,1,0)
Output the facility name.
"DATA",364.7,208,0)
1044^N^5^^^^N^0
"DATA",364.7,208,1)
N Z S Z=$$OUTPRV^IBCEF72("SUB2",IBXIEN,.IBXSAVE) K IBXDATA S:$P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,1)),U,4)'="" IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,1),U,3)
"DATA",364.7,208,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,208,3,1,0)
The ids returned are screened for valid id qualifiers for the SUB2 record.
"DATA",364.7,208,3,2,0)
Output the first 'other' id qualifier.
"DATA",364.7,209,0)
1045^N^273^^^^N^0
"DATA",364.7,209,1)
D SFIDQ^IBCEF72(IBXIEN,.IBXSAVE,.IBXDATA)
"DATA",364.7,209,3,0)
^364.73^2^2^3030917^^^^
"DATA",364.7,209,3,1,0)
Save the actual id in IBXSAVE("EIN") and output the tax id qualifier here
"DATA",364.7,209,3,2,0)
if id was found.
"DATA",364.7,211,0)
1046^N^272^^^^N^0
"DATA",364.7,211,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA)
"DATA",364.7,211,3,0)
^364.73^2^2^3030917^^^^
"DATA",364.7,211,3,1,0)
If the tax id for the outside facility exists, output it here and kill
"DATA",364.7,211,3,2,0)
IBXSAVE("EIN") to clean up.
"DATA",364.7,212,0)
1047^N^318^^^^N^0
"DATA",364.7,212,1)
S IBXDATA=$P(IBXSAVE("ID"),U,1)
"DATA",364.7,212,3,0)
^364.73^1^1^3031014^^^^
"DATA",364.7,212,3,1,0)
REFERRING PHY ID SSN OR TAX ID
"DATA",364.7,213,0)
1048^N^318^^^^N
"DATA",364.7,213,1)
S IBXDATA=$P(IBXDATA,U,1)
"DATA",364.7,213,3,0)
^364.73^1^1^3031016^^^^
"DATA",364.7,213,3,1,0)
SEND OPERATING PHYSICIAN NAME SUFFIX
"DATA",364.7,214,0)
1049^N^5^^^^N
"DATA",364.7,214,1)
 
"DATA",364.7,214,3,0)
^364.73^1^1^3031007^^^^
"DATA",364.7,214,3,1,0)
SEND OTHER PROVIDER NAME SUFFIX
"DATA",364.7,220,0)
210^N^131^^^^N
"DATA",364.7,220,1)
I $D(IBXDATA) S IBXDATA="CI1 "
"DATA",364.7,220,3,0)
^364.73^4^4^3040114^^^^
"DATA",364.7,220,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,220,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,220,3,3,0)
element so there is no output.  If no header already extracted, output
"DATA",364.7,220,3,4,0)
the record id for the 'CI1' record.
"DATA",364.7,224,0)
230^N^101^^^^N
"DATA",364.7,224,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI2 ")
"DATA",364.7,224,3,0)
^364.73^7^7^3040702^^^^
"DATA",364.7,224,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,224,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) variable
"DATA",364.7,224,3,3,0)
holds the indicator of which insurance [(P)rimary/(S)econdary/(T)ertiary] is
"DATA",364.7,224,3,4,0)
currently responsible for the bill.  Using this data as a guide, the next
"DATA",364.7,224,3,5,0)
insurance for the primary is secondary, then tertiary.  For secondary, it's
"DATA",364.7,224,3,6,0)
primary then tertiary, and for tertiary, it's primary, then secondary. For
"DATA",364.7,224,3,7,0)
other than the first occurrence, the RECORD ID 'OI2 ' must be output.
"DATA",364.7,228,0)
1056^N^131^^^^N
"DATA",364.7,228,1)
S IBXDATA="OPR7"
"DATA",364.7,228,3,0)
^^1^1^3030814^^^^
"DATA",364.7,228,3,1,0)
Record ID for Supervising Provider Name, suffix, qualifier, and ID number.
"DATA",364.7,229,0)
1057^N^300^^^^N
"DATA",364.7,229,1)
N Z S Z=$P(IBXDATA,U,1,2),$P(Z,U,3)=IBXIEN,$P(Z,U,4)=5 S IBXSAVE("SPNM")=$$NAME^IBCEFG1(Z),$P(IBXSAVE("SPNM"),U,4)=$P(IBXDATA,U,4) K IBXDATA
"DATA",364.7,229,3,0)
^^3^3^3030814^^^^
"DATA",364.7,229,3,1,0)
Returns name for variable pointer in 2nd piece of IBXDATA in
"DATA",364.7,229,3,2,0)
LAST^FIRST^MIDDLE^CREDENTIALS^SUFFIX format.  Saves data in IBXSAVE array
"DATA",364.7,229,3,3,0)
for use by later fields.  No output.
"DATA",364.7,230,0)
1058^N^5^^^^N^0
"DATA",364.7,230,1)
S:$G(IBXSAVE("SPNM"))'="" IBXDATA=$P(IBXSAVE("SPNM"),U)
"DATA",364.7,230,3,0)
^^3^3^3030814^^^^
"DATA",364.7,230,3,1,0)
The FULL NAME data extracted,by SPRVSING PROV FULL NAME,
"DATA",364.7,230,3,2,0)
into the array IBXSAVE is parsed and the appropiate piece (1)
"DATA",364.7,230,3,3,0)
LAST NAME, is stored into IBXDATA for transmission.
"DATA",364.7,232,0)
1059^N^5^^^^N
"DATA",364.7,232,1)
S:$G(IBXSAVE("SPNM"))'="" IBXDATA=$P(IBXSAVE("SPNM"),U,2)
"DATA",364.7,232,3,0)
^^3^3^3030814^^^^
"DATA",364.7,232,3,1,0)
The FULL NAME data extracted,by SPRVSING PROV FULL NAME,
"DATA",364.7,232,3,2,0)
into the array IBXSAVE is parsed and the appropiate piece (2)
"DATA",364.7,232,3,3,0)
FIRST NAME, is stored into IBXDATA for transmission.
"DATA",364.7,237,0)
246^N^131^^^^N
"DATA",364.7,237,1)
S IBXDATA="DC1 "
"DATA",364.7,237,3,0)
^^1^1^2960815^^^^
"DATA",364.7,237,3,1,0)
Output RECORD ID for DC1 record.
"DATA",364.7,244,0)
1060^N^5^^^^N^0
"DATA",364.7,244,1)
S:$G(IBXSAVE("SPNM"))'="" IBXDATA=$P(IBXSAVE("SPNM"),U,3)
"DATA",364.7,244,3,0)
^^3^3^3030814^^^
"DATA",364.7,244,3,1,0)
The FULL NAME data extracted,by SPRVSING PROV FULL NAME,
"DATA",364.7,244,3,2,0)
into the array IBXSAVE is parsed and the appropiate piece (3)
"DATA",364.7,244,3,3,0)
MIDDLE NAME, is stored into IBXDATA for transmission.
"DATA",364.7,245,0)
1061^N^5^^^^N^0
"DATA",364.7,245,1)
S:$G(IBXSAVE("SPNM"))'="" IBXDATA=$P(IBXSAVE("SPNM"),U,5) K IBXSAVE("SPNM")
"DATA",364.7,245,3,0)
^^3^3^3030814^^^^
"DATA",364.7,245,3,1,0)
The FULL NAME data extracted,by SPRVSING PROV FULL NAME,
"DATA",364.7,245,3,2,0)
into the array IBXSAVE is parsed and the appropiate piece (5)
"DATA",364.7,245,3,3,0)
NAME SUFFIX, is stored into IBXDATA for transmission.
"DATA",364.7,246,0)
1062^N^318^^^^N^0
"DATA",364.7,246,1)
S IBXDATA=$P(IBXSAVE("ID"),U,5)
"DATA",364.7,246,3,0)
^364.73^1^1^3031014^^^^
"DATA",364.7,246,3,1,0)
Send Supervising Provider ID CODE QUALIFIER 34=SSN
"DATA",364.7,247,0)
1063^N^5^^^^N^0
"DATA",364.7,247,1)
S IBXDATA=$P(IBXSAVE,U,5)
"DATA",364.7,247,3,0)
^364.73^1^1^3031014^^^^
"DATA",364.7,247,3,1,0)
If supervising prov SSN exists from previous field, output it.
"DATA",364.7,249,0)
1066^N^301^^^^N^0
"DATA",364.7,249,1)
K IBXDATA
"DATA",364.7,249,3,0)
^364.73^2^2^3031001^^^^
"DATA",364.7,249,3,1,0)
Use the data extracted from File 364.5, OTHER PAYER FULL ADDRESS, to 
"DATA",364.7,249,3,2,0)
parse out Line 1, Line 2, City, State, ZIP.
"DATA",364.7,256,0)
1065^N^301^^^^N^0
"DATA",364.7,256,1)
K IBXDATA
"DATA",364.7,256,3,0)
^364.73^3^3^3031001^^^^
"DATA",364.7,256,3,1,0)
Line 1 uses File 364.5 to extract the full address and saves it in 
"DATA",364.7,256,3,2,0)
IBXSAVE(array). Then this formatter parses out Line 1. The next elements 
"DATA",364.7,256,3,3,0)
use N-GET FROM PREVIOUS EXTRACT.
"DATA",364.7,302,0)
1067^N^5^^^^N^0
"DATA",364.7,302,1)
K IBXDATA
"DATA",364.7,302,3,0)
^364.73^3^3^3031001^^^^
"DATA",364.7,302,3,1,0)
Once Line 1 is done, then the IBXSAVE(array) should be there. It is the 
"DATA",364.7,302,3,2,0)
full address created by N-OTHER PAYER FULL ADDRESS in File 364.5 which 
"DATA",364.7,302,3,3,0)
is called by Line 1.
"DATA",364.7,316,0)
1068^N^5^^^^N^0
"DATA",364.7,316,1)
K IBXDATA
"DATA",364.7,316,3,0)
^364.73^2^2^3031001^^^^
"DATA",364.7,316,3,1,0)
Once Line 1 is done, the array IBXSAVE(array) should be created with the 
"DATA",364.7,316,3,2,0)
full address. Parse out the City piece.
"DATA",364.7,324,0)
1069^N^5^^^^N^0
"DATA",364.7,324,1)
K IBXDATA D OTHINADR^IBCEF72(IBXIEN,.IBXDATA,21)
"DATA",364.7,324,3,0)
^364.73^1^1^3030911^^^^
"DATA",364.7,324,3,1,0)
After Line is done, IBXSAVE(array) has the full address. Parse out STATE from that.
"DATA",364.7,325,0)
1071^N^5^^^^N^0
"DATA",364.7,325,1)
K IBXDATA D OTHINADR^IBCEF72(IBXIEN,.IBXDATA,22)
"DATA",364.7,325,3,0)
^^1^1^3030712^^^
"DATA",364.7,325,3,1,0)
Once Line 1 is done, the IBXSAVE(array) has the full address. Make sure you kill after this one is done.
"DATA",364.7,326,0)
1072^N^315^^^^N^0
"DATA",364.7,326,1)
D ELMADDR^IBCEF7(IBXIEN,0,.IBXDATA)
"DATA",364.7,326,3,0)
^364.73^1^1^3030929^^^^
"DATA",364.7,326,3,1,0)
Use the File 364.5, N-OTHER INSURED FULL ADDRESS, to save the data into array IBXSAVE*
"DATA",364.7,333,0)
1073^N^5^^^^N^0
"DATA",364.7,333,1)
D ELMADDR^IBCEF7(IBXIEN,1,.IBXDATA)
"DATA",364.7,333,3,0)
^364.73^1^1^3030929^^^^
"DATA",364.7,333,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when LIne 1 is done first.
"DATA",364.7,334,0)
1074^N^5^^^^N^0
"DATA",364.7,334,1)
K IBXDATA D ELMADDR^IBCEF7(IBXIEN,2,.IBXDATA)
"DATA",364.7,334,3,0)
^364.73^2^2^3030926^^^^
"DATA",364.7,334,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when Line 1 is
"DATA",364.7,334,3,2,0)
done first.
"DATA",364.7,358,0)
1075^N^5^^^^N^0
"DATA",364.7,358,1)
D ELMADDR^IBCEF7(IBXIEN,3,.IBXDATA)
"DATA",364.7,358,3,0)
^364.73^2^2^3030926^^^^
"DATA",364.7,358,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when Line 1 is
"DATA",364.7,358,3,2,0)
DONE FIRST.
"DATA",364.7,359,0)
1076^N^5^^^^N^0
"DATA",364.7,359,1)
D ELMADDR^IBCEF7(IBXIEN,4,.IBXDATA)
"DATA",364.7,359,3,0)
^364.73^2^2^3030926^^^^
"DATA",364.7,359,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when Line 1 is
"DATA",364.7,359,3,2,0)
done first.
"DATA",364.7,360,0)
1077^N^5^^^^N^0
"DATA",364.7,360,1)
D ELMADDR^IBCEF7(IBXIEN,5,.IBXDATA)
"DATA",364.7,360,3,0)
^364.73^2^2^3030926^^^^
"DATA",364.7,360,3,1,0)
Extracted from the array IBXSAVE("ARRAY") from the 364.5 file OTHER INSURED FULL ADDRESS when Line 1 is
"DATA",364.7,360,3,2,0)
done first.
"DATA",364.7,361,0)
1078^N^5^^^^N^0
"DATA",364.7,361,1)
S IBXDATA=$P(IBXSAVE,",",1)_">23>"_$E($P(IBXSAVE,",",2),1,6)_">1G>"_"Insurance Policy Number"_">SY>Social Security Number"
"DATA",364.7,361,3,0)
^^1^1^3030714^^^^
"DATA",364.7,361,3,1,0)
Use IBXSAVE extracted in File 364.5, N-OTHER INSURED QUALIFIER/ID#. used as a set of codes.
"DATA",364.7,362,0)
1080^N^304^^^^N^0
"DATA",364.7,362,1)
S IBXSAVE=IBZZ
"DATA",364.7,362,3,0)
^^1^1^3030821^^
"DATA",364.7,362,3,1,0)
capture all the Other Insured Qulaifiers and ID Numbers to be transmitted.
"DATA",364.7,363,0)
1081^N^316^^^^N
"DATA",364.7,363,1)
S IBXDATA=""
"DATA",364.7,363,3,0)
^^1^1^3030806^^
"DATA",364.7,363,3,1,0)
Other Insurance Subscriber name Suffix.
"DATA",364.7,364,0)
1082^N^131^^^^N
"DATA",364.7,364,1)
S IBXDATA="OI3 "
"DATA",364.7,364,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,364,3,1,0)
Record ID for LOOP 2330, Other Payer Patient Information. One record per 2320 record
"DATA",364.7,365,0)
1083^N^5^^^^N^1
"DATA",364.7,365,1)
N Z,Z1 S (Z,Z1)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z1=Z1+1,IBXDATA(Z1)=1
"DATA",364.7,366,0)
1085^N^5^^^^N
"DATA",364.7,366,1)
N Z,Z1,Q S (Z,Z1)=0,Q=$$PTDEM^IBCEF(IBXIEN,2) F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z1=Z1+1,IBXDATA(Z1)=Q
"DATA",364.7,366,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,366,3,1,0)
PATIENT SSN
"DATA",364.7,368,0)
1086^N^5^^^^N^0
"DATA",364.7,368,1)
K IBXDATA
"DATA",364.7,369,0)
1087^N^306^^^^N
"DATA",364.7,369,1)
K IBXDATA
"DATA",364.7,369,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,369,3,1,0)
364.5 file N-OTH PAYER PAT ID QUALIF 1-3 will extract the data into IBXSAVE for parsing here. 111, 6 has the qualifier 1W and 111,7 will have the number.
"DATA",364.7,370,0)
1088^N^5^^^^N
"DATA",364.7,370,1)
K IBXDATA
"DATA",364.7,370,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,370,3,1,0)
Piece 111,6 extracts al the data for the remaining pices. Each piece exttracts the data from IBXSAVE.
"DATA",364.7,371,0)
1089^N^5^^^^N
"DATA",364.7,371,1)
K IBXDATA
"DATA",364.7,371,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,371,3,1,0)
Extract piece 3 and then piece 4 from IBXSAVE that first extracted the data in 111,6.
"DATA",364.7,372,0)
1090^N^5^^^^N
"DATA",364.7,372,1)
K IBXDATA
"DATA",364.7,372,3,0)
^^1^1^3030805^^^^
"DATA",364.7,372,3,1,0)
Extract from IBXSAVE piece 4, Insurance Policy Number for OTHER PAYER.
"DATA",364.7,373,0)
1091^N^5^^^^N
"DATA",364.7,373,1)
K IBXDATA
"DATA",364.7,373,3,0)
^^1^1^3030805^^^
"DATA",364.7,373,3,1,0)
Extract piece 5 from IBXSAVE, the ID Qualifier , SY
"DATA",364.7,374,0)
1092^N^5^^^^N
"DATA",364.7,374,1)
K IBXDATA
"DATA",364.7,374,3,0)
^^1^1^3030805^^^
"DATA",364.7,374,3,1,0)
Extract piece 6, Social Security Number, from IBXSAVE created in 111,6.
"DATA",364.7,375,0)
1094^N^308^^^^N
"DATA",364.7,375,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("5")
"DATA",364.7,375,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,375,3,1,0)
Extract the 364.5 definition into an array. Then use piece 1, Blue Cross 
"DATA",364.7,375,3,2,0)
Number for 8,16 piece 3.. The array will be used for the remaining pieces.
"DATA",364.7,376,0)
1095^N^5^^^^N
"DATA",364.7,376,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",6)
"DATA",364.7,377,0)
1096^N^5^^^^N
"DATA",364.7,377,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("7")
"DATA",364.7,378,0)
1097^N^5^^^^N
"DATA",364.7,378,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",8)
"DATA",364.7,379,0)
1098^N^5^^^^N
"DATA",364.7,379,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("9")
"DATA",364.7,380,0)
1099^N^5^^^^N
"DATA",364.7,380,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",10)
"DATA",364.7,381,0)
1100^N^5^^^^N
"DATA",364.7,381,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("11")
"DATA",364.7,382,0)
1101^N^5^^^^N
"DATA",364.7,382,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",12)
"DATA",364.7,383,0)
1102^N^5^^^^N
"DATA",364.7,383,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("13")
"DATA",364.7,384,0)
1103^N^235^^^^N
"DATA",364.7,384,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",14)
"DATA",364.7,385,0)
1104^N^127^^^^N
"DATA",364.7,385,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("15")
"DATA",364.7,385,3,0)
^364.73^1^1^3031210^^^^
"DATA",364.7,385,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will already exist.  Don't want to extract this field again, so kill data element so there is no output.
"DATA",364.7,386,0)
1189^N^131^^^^N
"DATA",364.7,386,1)
S IBXDATA="CL1A "
"DATA",364.7,386,3,0)
^^1^1^3030718^^
"DATA",364.7,386,3,1,0)
Output RECORD ID for CL1A record.
"DATA",364.7,387,0)
1190^N^131^^^^N
"DATA",364.7,387,1)
K:$D(^TMP("IBHDR",$J)) IBXDATA S:'$D(IBXDATA) IBXNOREQ=1 I $D(IBXDATA) S IBXDATA="PRV1"
"DATA",364.7,387,3,0)
^364.73^2^2^3040616^^^^
"DATA",364.7,387,3,1,0)
Record ID PRV1 for Billing Provider Secondary ID's. Extracted from File
"DATA",364.7,387,3,2,0)
355.97, fields .01 and .04, ^IBE(355.87,D0,0) pieces 1 and 4.
"DATA",364.7,388,0)
1192^N^127^^^^N
"DATA",364.7,388,1)
K:$D(^TMP("IBHDR",$J)) IBXSAVE S:'$D(IBXSAVE) IBXNOREQ=1 I $D(IBXSAVE) D PRV1FMT^IBCEF73("3")
"DATA",364.7,388,3,0)
^364.73^2^2^3040709^^^^
"DATA",364.7,388,3,1,0)
Provider number for the current insurance company for bill entry 
"DATA",364.7,388,3,2,0)
IBXIEN.
"DATA",364.7,389,0)
1191^N^235^^^^N
"DATA",364.7,389,1)
K:$D(^TMP("IBHDR",$J)) IBXDATA S:'$D(IBXDATA) IBXNOREQ=1 I $D(IBXDATA) S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN) S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",2) I $G(^TMP("PRV1",$J))="" S ^TMP("PRV1",$J)=1
"DATA",364.7,389,3,0)
^364.73^4^4^3040709^^^^
"DATA",364.7,389,3,1,0)
Kept N-CURRENT INS POLICY TYPE because didn't want to touch previous logic 
"DATA",364.7,389,3,2,0)
that may set array or TMP.
"DATA",364.7,389,3,3,0)
the format code sets array to string with QUALIF and ID for the first 
"DATA",364.7,389,3,4,0)
seven insurances in file #355.97 except some.
"DATA",364.7,391,0)
1194^N^5^^^^N
"DATA",364.7,391,1)
K IBXDATA
"DATA",364.7,392,0)
1195^N^5^^^^N
"DATA",364.7,392,1)
N Q,A,B,Z S Q="NVID",A="IBFAC" K IBXSAVE(Q) K:'$G(IBXSAVE(A))&'$P($G(IBXSAVE(A)),U,3) IBXDATA S:$D(IBXDATA) Z=$$PSPRV^IBCEF7(IBXIEN),IBXSAVE(Q)=$$NONVAID^IBCEF72(IBXIEN,.B,'$E(Z,2),1),IBXDATA=$S($E(Z,4):"",1:$P("^34^24",U,$P(IBXSAVE(Q),U,2)+1))
"DATA",364.7,392,3,0)
^364.73^1^1^3030915^^^^
"DATA",364.7,392,3,1,0)
Enter for EIN then 24. For Social Security Number then 34.
"DATA",364.7,393,0)
1196^N^5^^^^N
"DATA",364.7,393,1)
K:$S('$G(IBXSAVE("IBFAC"))&'$P($G(IBXSAVE("IBFAC")),U,3):1,1:$$INSFT^IBCEU5(IBXIEN)) IBXDATA,IBXSAVE("NVID") I $D(IBXDATA) S IBXDATA=$S($P($G(IBXSAVE("NVID")),U,1)="":"",$P($G(IBXSAVE("NVID")),U,3):$P(IBXSAVE("NVID"),U,3),1:2) K IBXSAVE("NVID")
"DATA",364.7,393,3,0)
^^2^2^3030827^^^^
"DATA",364.7,393,3,1,0)
This should always be an institution check to see if we have data and then
"DATA",364.7,393,3,2,0)
set to facility
"DATA",364.7,394,0)
1197^N^131^^^^N
"DATA",364.7,394,1)
S IBXDATA="SUB1"
"DATA",364.7,395,0)
1198^N^5^^^^N
"DATA",364.7,395,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),1)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,4)
"DATA",364.7,395,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,395,3,1,0)
Output the first other id for the current insurance.
"DATA",364.7,396,0)
1199^N^5^^^^N
"DATA",364.7,396,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),2)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,3)
"DATA",364.7,396,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,396,3,1,0)
Output the second id qualifier for the current insurance.
"DATA",364.7,397,0)
1200^N^5^^^^N
"DATA",364.7,397,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),2)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,4)
"DATA",364.7,397,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,397,3,1,0)
Output the second id for the current insurance.
"DATA",364.7,398,0)
1201^N^5^^^^N
"DATA",364.7,398,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),3)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,3)
"DATA",364.7,398,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,398,3,1,0)
Output the third other id qualifier for the current insurance.
"DATA",364.7,399,0)
1202^N^5^^^^N
"DATA",364.7,399,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),3)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,4)
"DATA",364.7,399,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,399,3,1,0)
Output the third other id for the current insurance.
"DATA",364.7,400,0)
1203^N^5^^^^N
"DATA",364.7,400,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),4)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,3)
"DATA",364.7,400,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,400,3,1,0)
Output the fourth other id qualifier for the current insurance.
"DATA",364.7,401,0)
1204^N^5^^^^N
"DATA",364.7,401,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),4)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,4)
"DATA",364.7,401,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,401,3,1,0)
Output the fourth other id for the current insurance.
"DATA",364.7,402,0)
1205^N^5^^^^N
"DATA",364.7,402,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),5)) I $P(G,U,4)'="" S IBXDATA=$P(G,U,3)
"DATA",364.7,402,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,402,3,1,0)
Output the fifth other id qualifier for the current insurance.
"DATA",364.7,403,0)
1206^N^5^^^^N
"DATA",364.7,403,1)
N F,G K IBXDATA I '$$INSFT^IBCEU5(IBXIEN),$G(IBXSAVE("NVF")) S F="PROVINF"_$P("^_FAC",U,IBXSAVE("NVF")),G=$G(IBXSAVE(F,IBXIEN,"C",1,$S(IBXSAVE("NVF")=1:3,1:0),5)) K IBXSAVE("NVF"),IBXSAVE(F,IBXIEN) I $P(G,U,4)'="" S IBXDATA=$P(G,U,4)
"DATA",364.7,403,3,0)
^364.73^3^3^3030904^^^^
"DATA",364.7,403,3,1,0)
Output the fifth other id for the current insurance.
"DATA",364.7,403,3,2,0)
Kill the IBXSAVE("NVF") and IBXSAVE("PROVINF",IBXIEN) or
"DATA",364.7,403,3,3,0)
IBXSAVE("PROVINF_FAC",IBXIEN) variables to clean up.
"DATA",364.7,404,0)
1207^N^131^^^^N
"DATA",364.7,404,1)
S IBXDATA="SUB2"
"DATA",364.7,405,0)
1209^N^5^^^^N
"DATA",364.7,405,1)
K IBXDATA S:$P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,1)),U,4)'="" IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,1),U,4)
"DATA",364.7,405,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,405,3,1,0)
Output the first 'other' id.
"DATA",364.7,406,0)
1210^N^5^^^^N
"DATA",364.7,406,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,2)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,2),U,3)
"DATA",364.7,406,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,406,3,1,0)
Output the second 'other' id qualifier.
"DATA",364.7,407,0)
1211^N^5^^^^N
"DATA",364.7,407,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,2)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,2),U,4)
"DATA",364.7,407,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,407,3,1,0)
Output the second 'other' id.
"DATA",364.7,408,0)
1212^N^5^^^^N
"DATA",364.7,408,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,3)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,3),U,3)
"DATA",364.7,408,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,408,3,1,0)
Output the third 'other' id qualifier.
"DATA",364.7,409,0)
1213^N^5^^^^N
"DATA",364.7,409,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,3)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,3),U,4)
"DATA",364.7,409,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,409,3,1,0)
Output the third 'other' id.
"DATA",364.7,410,0)
1214^N^5^^^^N
"DATA",364.7,410,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,4)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,4),U,3)
"DATA",364.7,410,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,410,3,1,0)
Output the fourth 'other' id qualifier.
"DATA",364.7,411,0)
1215^N^5^^^^N
"DATA",364.7,411,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,4)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,4),U,4)
"DATA",364.7,411,3,0)
^364.73^1^1^3030904^^^
"DATA",364.7,411,3,1,0)
Output the fourth 'other' id.
"DATA",364.7,412,0)
1216^N^5^^^^N
"DATA",364.7,412,1)
K IBXDATA I $P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,5)),U,4)'="" S IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,5),U,3)
"DATA",364.7,412,3,0)
^364.73^1^1^3030904^^^^
"DATA",364.7,412,3,1,0)
Output the fifth 'other' id qualifier.
"DATA",364.7,413,0)
1217^N^5^^^^N
"DATA",364.7,413,1)
K IBXDATA S:$P($G(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,5)),U,4)'="" IBXDATA=$P(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,5),U,4) K IBXSAVE("PROVINF_FAC",IBXIEN)
"DATA",364.7,413,3,0)
^364.73^2^2^3030904^^^
"DATA",364.7,413,3,1,0)
Output the fifth 'other' id.
"DATA",364.7,413,3,2,0)
Delete the 'filtered' id array IBXSAVE("PROVINF_FAC",IBXIEN).
"DATA",364.7,414,0)
1219^N^131^^^^N
"DATA",364.7,414,1)
S IBXDATA="OPR8"
"DATA",364.7,414,3,0)
^^1^1^3030815^^^^
"DATA",364.7,414,3,1,0)
Record ID for SUPERVISING PROVIDER SECONDARY ID'S AND QUALIFIERS
"DATA",364.7,416,0)
1220^N^131^^^^N
"DATA",364.7,416,1)
S IBXDATA="OPR3"
"DATA",364.7,416,3,0)
^^1^1^3030807^^^
"DATA",364.7,416,3,1,0)
Record ID ofr Operating Physician Secondary ID and Qualifier.
"DATA",364.7,417,0)
1221^N^131^^^^N
"DATA",364.7,417,1)
S IBXDATA="OPR2"
"DATA",364.7,417,3,0)
^^1^1^3030807^^^^
"DATA",364.7,417,3,1,0)
Record ID for Attending Provider Secondary ID and Qualifier
"DATA",364.7,418,0)
1222^N^131^^^^N
"DATA",364.7,418,1)
S IBXDATA="OPR1"
"DATA",364.7,418,3,0)
^364.73^1^1^3031007^^^^
"DATA",364.7,418,3,1,0)
Record ID for Insurance Specific Provider Information LOPP 2310 , one claim per Claim Data record set.
"DATA",364.7,419,0)
1223^N^131^^^^N
"DATA",364.7,419,1)
S IBXDATA="OPR "
"DATA",364.7,419,3,0)
^364.73^1^1^3030910^^^^
"DATA",364.7,419,3,1,0)
Record ID for Attending/Other Provider Information, LOOP 2310, one claim per Claim Data record set.
"DATA",364.7,420,0)
1224^N^312^^^^N
"DATA",364.7,420,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,1)),"^",3) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,1)),"^",3)
"DATA",364.7,420,3,0)
0^364.73^5^5^3040728^^^^
"DATA",364.7,420,3,1,0)
Attending Provider Secondary ID Qualifier.
"DATA",364.7,420,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,420,3,3,0)
1C=MEDICARE PARTA and PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,420,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,420,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,421,0)
1225^N^312^^^^N
"DATA",364.7,421,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,1)),"^",4) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,1)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,422,0)
1226^N^312^^^^N
"DATA",364.7,422,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,2)),"^",3) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,2)),"^",3)
"DATA",364.7,423,0)
1227^N^312^^^^N
"DATA",364.7,423,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,2)),"^",4) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,2)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,424,0)
1228^N^312^^^^N
"DATA",364.7,424,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,3)),"^",3) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,3)),"^",3)
"DATA",364.7,425,0)
1229^N^312^^^^N
"DATA",364.7,425,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,3)),"^",4) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,3)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,426,0)
1230^N^312^^^^N
"DATA",364.7,426,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,4)),"^",3) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,4)),"^",3)
"DATA",364.7,427,0)
1231^N^312^^^^N
"DATA",364.7,427,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,4)),"^",4) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,4)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,428,0)
1232^N^312^^^^N
"DATA",364.7,428,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,5)),"^",3) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,5)),"^",3)
"DATA",364.7,429,0)
1233^N^312^^^^N
"DATA",364.7,429,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,4,5)),"^",4) S:IBXDATA="" IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,5)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,430,0)
1234^N^312^^^^N
"DATA",364.7,430,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,1)),"^",3)
"DATA",364.7,430,3,0)
^^1^1^3030812^^^^
"DATA",364.7,430,3,1,0)
Operating Physician Secondary ID and Qualifier.
"DATA",364.7,431,0)
1235^N^312^^^^N
"DATA",364.7,431,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,1)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,432,0)
1236^N^312^^^^N
"DATA",364.7,432,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,2)),"^",3)
"DATA",364.7,433,0)
1237^N^312^^^^N
"DATA",364.7,433,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,2)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,434,0)
1238^N^312^^^^N
"DATA",364.7,434,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,3)),"^",3)
"DATA",364.7,435,0)
1239^N^312^^^^N
"DATA",364.7,435,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,3)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,436,0)
1240^N^312^^^^N
"DATA",364.7,436,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,4)),"^",3)
"DATA",364.7,437,0)
1241^N^312^^^^N
"DATA",364.7,437,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,4)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,438,0)
1242^N^312^^^^N
"DATA",364.7,438,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,5)),"^",3)
"DATA",364.7,439,0)
1243^N^312^^^^N
"DATA",364.7,439,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,2,5)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,440,0)
1245^N^312^^^^N
"DATA",364.7,440,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,1)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,440,3,0)
^364.73^4^4^3030930^^^^
"DATA",364.7,440,3,1,0)
Other Provider Secondary Qualifier 1.
"DATA",364.7,440,3,2,0)
EI=EMPLOYER ID, SY=SSN, 0B=STATE LICENSE #, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,440,3,3,0)
1C=MEDICARE PARTA or PARTB, 1D=MEDICAID, 1G=UPIN #, 1H=TRICARE, G2=COMMERCIAL #
"DATA",364.7,440,3,4,0)
X5=STATE INDUSTRIAL ACCIDENT PROVIDER #, LU=LOCATION #, N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,441,0)
1218^N^131^^^^N
"DATA",364.7,441,1)
S IBXDATA="OPR5"
"DATA",364.7,441,3,0)
^364.73^4^4^3040722^^^
"DATA",364.7,441,3,1,0)
Referring Provider Secondary ID and Qualifier.
"DATA",364.7,441,3,2,0)
0B=STATE LICENSE #, 1B=BLUE SHILED #, 1C=MEDICARE #, 1D=MEDICAID #
"DATA",364.7,441,3,3,0)
1G=UPIN #, 1H=TRICARE ID #, G2=COMMERCIAL #, X5=STATE INDUSTRIAL ACCIDENT PROVIDER #
"DATA",364.7,441,3,4,0)
LU=LOCATION #
"DATA",364.7,443,0)
1277^N^312^^^^N
"DATA",364.7,443,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,3)
"DATA",364.7,443,3,0)
^364.73^5^5^3030923^^^^
"DATA",364.7,443,3,1,0)
Supervising Provider Secondary ID Qualifier
"DATA",364.7,443,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,443,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,443,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,443,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,444,0)
1278^N^312^^^^N
"DATA",364.7,444,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,444,3,0)
^364.73^1^1^3030930^^^
"DATA",364.7,444,3,1,0)
Supervising Provider Secondary ID
"DATA",364.7,445,0)
1279^N^312^^^^N
"DATA",364.7,445,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,3)
"DATA",364.7,446,0)
1280^N^312^^^^N
"DATA",364.7,446,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,447,0)
1281^N^312^^^^N
"DATA",364.7,447,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,3)
"DATA",364.7,448,0)
1282^N^312^^^^N
"DATA",364.7,448,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,449,0)
1283^N^312^^^^N
"DATA",364.7,449,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,3)
"DATA",364.7,450,0)
1284^N^312^^^^N
"DATA",364.7,450,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,451,0)
1285^N^312^^^^N
"DATA",364.7,451,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,5)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,5)),U,3)
"DATA",364.7,452,0)
1286^N^312^^^^N
"DATA",364.7,452,1)
I $P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,5)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,5)),U,4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,453,0)
1287^N^131^^^^N
"DATA",364.7,453,1)
S IBXDATA="OI4 "
"DATA",364.7,453,3,0)
^364.73^1^1^3030916^^^^
"DATA",364.7,453,3,1,0)
Other Insured Information, LOOP 2330, one record per 2320 record.
"DATA",364.7,454,0)
1288^N^131^^^^N
"DATA",364.7,454,1)
S IBXDATA="OI5 "
"DATA",364.7,454,3,0)
^364.73^1^1^3040728^^^
"DATA",364.7,454,3,1,0)
Other Insurance Subscriber Information, LOOP 2330
"DATA",364.7,455,0)
1289^N^5^^^^N
"DATA",364.7,455,1)
D ELMADD2^IBCEF7(IBXIEN,1,.IBXDATA)
"DATA",364.7,456,0)
1290^N^5^^^^N
"DATA",364.7,456,1)
D ELMADD2^IBCEF7(IBXIEN,2,.IBXDATA)
"DATA",364.7,457,0)
1291^N^5^^^^N
"DATA",364.7,457,1)
D ELMADD2^IBCEF7(IBXIEN,3,.IBXDATA)
"DATA",364.7,458,0)
1292^N^5^^^^N
"DATA",364.7,458,1)
D ELMADD2^IBCEF7(IBXIEN,4,.IBXDATA)
"DATA",364.7,459,0)
1293^N^5^^^^N
"DATA",364.7,459,1)
D ELMADD2^IBCEF7(IBXIEN,5,.IBXDATA)
"DATA",364.7,460,0)
1294^N^5^^^^N
"DATA",364.7,460,1)
 
"DATA",364.7,460,3,0)
^364.73^1^1^3030922^^
"DATA",364.7,460,3,1,0)
Checks if SUBSCR IDs for all "other insurances". if so then sets to "1W" D OTHSBID^IBCEF7(IBXIEN,.IBXDATA) N IBZ F IBZ=1,2 S:$G(IBXDATA(IBZ))'="" IBXDATA(IBZ)="1W"
"DATA",364.7,461,0)
1295^N^5^^^^N
"DATA",364.7,461,1)
 
"DATA",364.7,461,3,0)
^364.73^1^1^3030922^^
"DATA",364.7,461,3,1,0)
SUBSCRIBER ID from #399 that actually is subfile (#.3121) of #2, field #1. D OTHSBID^IBCEF7(IBXIEN,.IBXDATA)
"DATA",364.7,462,0)
1296^N^5^^^^N
"DATA",364.7,462,1)
S IBXDATA=""
"DATA",364.7,463,0)
1297^N^5^^^^N
"DATA",364.7,463,1)
S IBXDATA=""
"DATA",364.7,464,0)
1298^N^5^^^^N
"DATA",364.7,464,1)
S IBXDATA=""
"DATA",364.7,465,0)
1299^N^5^^^^N
"DATA",364.7,465,1)
S IBXDATA=""
"DATA",364.7,466,0)
1116^N^131^^^^N
"DATA",364.7,466,1)
S IBXDATA="OP2 "
"DATA",364.7,467,0)
1126^N^131^^^^N
"DATA",364.7,467,1)
S IBXDATA="OP3 "
"DATA",364.7,468,0)
1144^N^131^^^^N
"DATA",364.7,468,1)
S IBXDATA="OP5 "
"DATA",364.7,469,0)
1135^N^131^^^^N
"DATA",364.7,469,1)
S IBXDATA="OP4 "
"DATA",364.7,470,0)
1153^N^131^^^^N
"DATA",364.7,470,1)
S IBXDATA="OP6 "
"DATA",364.7,471,0)
1162^N^131^^^^N
"DATA",364.7,471,1)
S IBXDATA="OP7 "
"DATA",364.7,487,0)
1171^N^131^^^^N
"DATA",364.7,487,1)
S IBXDATA="OP8 "
"DATA",364.7,531,0)
1180^N^131^^^^N
"DATA",364.7,531,1)
S IBXDATA="OP9 "
"DATA",364.7,532,0)
1300^N^131^^^^N
"DATA",364.7,532,1)
S IBXDATA="OPR4"
"DATA",364.7,532,3,0)
^^1^1^3030807^^^^
"DATA",364.7,532,3,1,0)
RECORD ID FOR OTHER PROVIDER SECONDARY ID
"DATA",364.7,535,0)
1182^N^312^^^^N
"DATA",364.7,535,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"1")
"DATA",364.7,535,3,0)
^^1^1^3030805^^
"DATA",364.7,535,3,1,0)
HARD CODE PERSON QUALIFIER
"DATA",364.7,537,0)
1107^N^312^^^^N^0
"DATA",364.7,537,1)
K IBXDATA D PROVSEQ^IBCEF72(IBXIEN,.IBXSAVE,.IBXDATA,3,"OP1 ") I $D(IBXDATA) N I S I=$E($$RECVR^IBCEF2(IBXIEN),$L($$RECVR^IBCEF2(IBXIEN))) N Z S Z=$S(I="P"!(I="B"):82,I="H"!(I="A"):71,1:"") N Y S Y="" F  S Y=$O(IBXDATA(Y)) Q:Y=""  S IBXDATA(Y)=Z
"DATA",364.7,537,3,0)
^364.73^1^1^3030923^^^^
"DATA",364.7,537,3,1,0)
QUAL IS 71 FOR INST AND 82 FOR PROF
"DATA",364.7,538,0)
1113^N^312^^^^N^0
"DATA",364.7,538,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"I",2) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,540,0)
1115^N^312^^^^N
"DATA",364.7,540,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"I",3) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,541,0)
1108^N^312^^^^N^0
"DATA",364.7,541,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"1")
"DATA",364.7,541,3,0)
^364.73^1^1^3030916^^^
"DATA",364.7,541,3,1,0)
HARD CODE PERSON CODE "1"
"DATA",364.7,542,0)
1111^N^312^^^^N^0
"DATA",364.7,542,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"I",1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,542,3,0)
^364.73^1^1^3031107^^^^
"DATA",364.7,542,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,543,0)
1110^N^312^^^^N^0
"DATA",364.7,543,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"Q",1)
"DATA",364.7,543,3,0)
^364.73^1^1^3031029^^^^
"DATA",364.7,543,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,544,0)
1112^N^312^^^^N^0
"DATA",364.7,544,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"Q",2)
"DATA",364.7,544,3,0)
^^1^1^3030821^^^^
"DATA",364.7,544,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,545,0)
1118^N^312^^^^N^0
"DATA",364.7,545,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"1")
"DATA",364.7,545,3,0)
^^1^1^3030821^^
"DATA",364.7,545,3,1,0)
HARD CODE ENTITY TYPE QUALIFIER 1=PERSON
"DATA",364.7,546,0)
1119^N^312^^^^N^0
"DATA",364.7,546,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"Q",1)
"DATA",364.7,546,3,0)
^^1^1^3030821^^
"DATA",364.7,546,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,547,0)
1121^N^312^^^^N^0
"DATA",364.7,547,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"Q",2)
"DATA",364.7,547,3,0)
^^1^1^3030804^
"DATA",364.7,547,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,548,0)
1123^N^312^^^^N^0
"DATA",364.7,548,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"Q",3)
"DATA",364.7,548,3,0)
^^1^1^3030804^
"DATA",364.7,548,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,549,0)
1120^N^312^^^^N^0
"DATA",364.7,549,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"I",1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,549,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,549,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,550,0)
1124^N^312^^^^N^0
"DATA",364.7,550,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"I",3) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,550,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,550,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,551,0)
1117^N^312^^^^N^0
"DATA",364.7,551,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"72")
"DATA",364.7,551,3,0)
^^1^1^3030821^^
"DATA",364.7,551,3,1,0)
HARD CODE "72" OTHER PAYER OPERATING PROVIDER NAME QUALIFIER
"DATA",364.7,552,0)
1128^N^5^^^^N^0
"DATA",364.7,552,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=2
"DATA",364.7,552,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,552,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist
"DATA",364.7,552,3,2,0)
and output the qualifier '2' for non-person.
"DATA",364.7,553,0)
1131^N^5^^^^N^0
"DATA",364.7,553,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,0,1,1)
"DATA",364.7,553,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,553,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,553,3,2,0)
exist for the second 'other' id qualifier.
"DATA",364.7,554,0)
1129^N^5^^^^N^0
"DATA",364.7,554,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,0,1,1)
"DATA",364.7,554,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,554,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,554,3,2,0)
exist for the first 'other' id qualifier.
"DATA",364.7,555,0)
1133^N^5^^^^N^0
"DATA",364.7,555,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,0,1,1)
"DATA",364.7,555,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,555,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,555,3,2,0)
exist for the third 'other' id qualifier.
"DATA",364.7,556,0)
1130^N^5^^^^N^0
"DATA",364.7,556,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,556,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,556,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,556,3,2,0)
exist for the first 'other' id.
"DATA",364.7,557,0)
1132^N^5^^^^N^0
"DATA",364.7,557,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,557,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,557,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,557,3,2,0)
exist for the second 'other' id.
"DATA",364.7,558,0)
1134^N^5^^^^N^0
"DATA",364.7,558,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1) K IBXSAVE("OSQ") K IBXSAVE("PROVINF_FAC",IBXIEN),IBXSAVE("OSQ")
"DATA",364.7,558,3,0)
^364.73^3^3^3030930^^^^
"DATA",364.7,558,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,558,3,2,0)
exist for the third 'other' id.  Clean up variables IBXSAVE("OSQ") and
"DATA",364.7,558,3,3,0)
the 'filtered' id array IBXSAVE("PROVINF_FAC",IBXIEN).
"DATA",364.7,559,0)
1127^N^5^^^^N^0
"DATA",364.7,559,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))="FA"
"DATA",364.7,559,3,0)
^364.73^2^2^3030904^^^^
"DATA",364.7,559,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist
"DATA",364.7,559,3,2,0)
and output the qualifier 'FA'.
"DATA",364.7,560,0)
1137^N^312^^^^N^0
"DATA",364.7,560,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"1")
"DATA",364.7,560,3,0)
^^1^1^3030821^^^
"DATA",364.7,560,3,1,0)
HARD CODE ENTITY TYPE
"DATA",364.7,561,0)
1136^N^312^^^^N^0
"DATA",364.7,561,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"DN")
"DATA",364.7,561,3,0)
^^1^1^3030821^^^
"DATA",364.7,561,3,1,0)
HARD CODE REFERRING PROVIDER CODE
"DATA",364.7,562,0)
1138^N^312^^^^N^0
"DATA",364.7,562,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"Q",1)
"DATA",364.7,563,0)
1140^N^312^^^^N^0
"DATA",364.7,563,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"Q",2)
"DATA",364.7,564,0)
1142^N^312^^^^N^0
"DATA",364.7,564,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"Q",3)
"DATA",364.7,565,0)
1139^N^312^^^^N^0
"DATA",364.7,565,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"I",1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,565,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,565,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,566,0)
1141^N^312^^^^N^0
"DATA",364.7,566,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"I",2) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,566,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,566,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,567,0)
1143^N^312^^^^N^0
"DATA",364.7,567,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,1,"I",3) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,567,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,567,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,568,0)
1146^N^5^^^^N^0
"DATA",364.7,568,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",3)
"DATA",364.7,570,0)
1147^N^5^^^^N^0
"DATA",364.7,570,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",4)
"DATA",364.7,571,0)
1151^N^5^^^^N^0
"DATA",364.7,571,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",8)
"DATA",364.7,572,0)
1148^N^5^^^^N^0
"DATA",364.7,572,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",5)
"DATA",364.7,573,0)
1150^N^5^^^^N^0
"DATA",364.7,573,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",7)
"DATA",364.7,574,0)
1152^N^5^^^^N^0
"DATA",364.7,574,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",9)
"DATA",364.7,575,0)
1145^N^5^^^^N^0
"DATA",364.7,575,1)
S IBXDATA=$P($G(IBXSAVE("ARRAY")),"^",2)
"DATA",364.7,576,0)
1155^N^5^^^^N^0
"DATA",364.7,576,1)
N Z,Z0 S Z=0,Z0=$$PSPRV^IBCEF7(IBXIEN) K IBXSAVE("FAC?") I Z0=101!(Z0=111),'$$INSFT^IBCEU5(IBXIEN) S IBXSAVE("FAC?")=(Z0=101) F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=$S('IBXSAVE("FAC?"):1,1:2)
"DATA",364.7,576,3,0)
^^3^3^3030902^^^^
"DATA",364.7,576,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,576,3,2,0)
If the record has an outside rendering provider, output as a person (1),
"DATA",364.7,576,3,3,0)
otherwise, output as a facility (2).
"DATA",364.7,577,0)
1156^N^5^^^^N^0
"DATA",364.7,577,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,Z,1,Z0)
"DATA",364.7,577,3,0)
^^2^2^3030902^^^^
"DATA",364.7,577,3,1,0)
Uses the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,577,3,2,0)
exist for the first 'other' id qualifier.
"DATA",364.7,578,0)
1154^N^5^^^^N^0
"DATA",364.7,578,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))="QB"
"DATA",364.7,578,3,0)
^^2^2^3030902^^^^
"DATA",364.7,578,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,578,3,2,0)
Output the qualifier 'QB'.
"DATA",364.7,579,0)
1158^N^5^^^^N^0
"DATA",364.7,579,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,Z,1,Z0)
"DATA",364.7,579,3,0)
^^2^2^3030902^^^^
"DATA",364.7,579,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,579,3,2,0)
exist for the second 'other' id qualifier.
"DATA",364.7,580,0)
1160^N^5^^^^N^0
"DATA",364.7,580,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,Z,1,Z0)
"DATA",364.7,580,3,0)
^^2^2^3030902^^^^
"DATA",364.7,580,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,580,3,2,0)
exist for the third 'other' id qualifier.
"DATA",364.7,581,0)
1157^N^5^^^^N^0
"DATA",364.7,581,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,Z,0,Z0) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,581,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,581,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,581,3,2,0)
exist for the first 'other' id.
"DATA",364.7,582,0)
1159^N^5^^^^N^0
"DATA",364.7,582,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,Z,0,Z0) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,582,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,582,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,582,3,2,0)
exist for the second 'other' id.
"DATA",364.7,583,0)
1161^N^5^^^^N^0
"DATA",364.7,583,1)
N Z,Z0 K IBXDATA S Z=$S($G(IBXSAVE("FAC?")):0,1:3),Z0=$G(IBXSAVE("FAC?")) D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,Z,0,Z0) K IBXSAVE("OSQ"),IBXSAVE($S($G(IBXSAVE("FAC?")):"PROVINF_FAC",1:"PROVINF"),IBXIEN),IBXSAVE("FAC?")
"DATA",364.7,583,3,0)
^364.73^5^5^3030930^^^^
"DATA",364.7,583,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,583,3,2,0)
exist for the third 'other' id.
"DATA",364.7,583,3,3,0)
Delete the filtered' id array IBXSAVE("PROVINF_FAC",IBXIEN) or
"DATA",364.7,583,3,4,0)
IBXSAVE("PROVINF",IBXIEN) and the scratch arrays IBXSAVE("OSQ") and
"DATA",364.7,583,3,5,0)
IBXSAVE("FAC?") to clean up.
"DATA",364.7,584,0)
1165^N^5^^^^N^0
"DATA",364.7,584,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,0,1,1)
"DATA",364.7,584,3,0)
^^2^2^3030902^^^^
"DATA",364.7,584,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,584,3,2,0)
exist for the first 'other' id qualifier.
"DATA",364.7,585,0)
1167^N^5^^^^N^0
"DATA",364.7,585,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,0,1,1)
"DATA",364.7,585,3,0)
^^2^2^3030902^^^^
"DATA",364.7,585,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,585,3,2,0)
exist for the second 'other' id qualifier.
"DATA",364.7,586,0)
1169^N^5^^^^N^0
"DATA",364.7,586,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,0,1,1)
"DATA",364.7,586,3,0)
^^2^2^3030902^^^^
"DATA",364.7,586,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,586,3,2,0)
exist for the third 'other' id qualifier.
"DATA",364.7,587,0)
1166^N^5^^^^N^0
"DATA",364.7,587,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,587,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,587,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,587,3,2,0)
exist for the first 'other' id.
"DATA",364.7,588,0)
1168^N^5^^^^N^0
"DATA",364.7,588,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,588,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,588,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,588,3,2,0)
exist for the second 'other' id.
"DATA",364.7,589,0)
1170^N^5^^^^N^0
"DATA",364.7,589,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,0,0,1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1) K IBXSAVE("OSQ")
"DATA",364.7,589,3,0)
^364.73^4^4^3030930^^^^
"DATA",364.7,589,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,589,3,2,0)
exist for the third 'other' id.  Kill the IBXSAVE("OSQ") array and the
"DATA",364.7,589,3,3,0)
IBXSAVE("FAC?") variables as well as IBXSAVE("PROVINF_FAC",IBXIEN) to
"DATA",364.7,589,3,4,0)
clean up.
"DATA",364.7,590,0)
1164^N^5^^^^N^0
"DATA",364.7,590,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=2
"DATA",364.7,590,3,0)
^^2^2^3030902^^^^
"DATA",364.7,590,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,590,3,2,0)
Output the qualifier as a non-person (2).
"DATA",364.7,591,0)
1163^N^5^^^^N^0
"DATA",364.7,591,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=$S($P($G(^IBA(355.93,+$G(IBXSAVE("PROVINF_FAC",IBXIEN,"O",Z,0,1)),0)),U,11)'="":$P($G(^(0)),U,11),1:"FA")
"DATA",364.7,591,3,0)
^^3^3^3030902^^^^
"DATA",364.7,591,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,591,3,2,0)
Output the qualifier associated with the outside facility, if any.  If none,
"DATA",364.7,591,3,3,0)
the default qualifier is 'FA'.
"DATA",364.7,592,0)
1173^N^5^^^^N^0
"DATA",364.7,592,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=1
"DATA",364.7,592,3,0)
^^2^2^3030902^^^^
"DATA",364.7,592,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,592,3,2,0)
Output the qualifier for a person (1).
"DATA",364.7,593,0)
1174^N^5^^^^N^0
"DATA",364.7,593,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,5,1,0)
"DATA",364.7,593,3,0)
^^2^2^3030902^^^^
"DATA",364.7,593,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,593,3,2,0)
exist for the first 'other' id qualifier.
"DATA",364.7,594,0)
1176^N^5^^^^N^0
"DATA",364.7,594,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,5,1,0)
"DATA",364.7,594,3,0)
^^2^2^3030902^^^^
"DATA",364.7,594,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,594,3,2,0)
exist for the second 'other' id qualifier.
"DATA",364.7,595,0)
1178^N^5^^^^N^0
"DATA",364.7,595,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,5,1,0)
"DATA",364.7,595,3,0)
^^2^2^3030902^^^^
"DATA",364.7,595,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,595,3,2,0)
exist for the third 'other' id qualifier.
"DATA",364.7,596,0)
1175^N^5^^^^N^0
"DATA",364.7,596,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,1,5,0,0) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,596,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,596,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,596,3,2,0)
exist for the first 'other' id.
"DATA",364.7,597,0)
1177^N^5^^^^N^0
"DATA",364.7,597,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,2,5,0,0) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,597,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,597,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,597,3,2,0)
exist for the second 'other' id.
"DATA",364.7,598,0)
1179^N^5^^^^N^0
"DATA",364.7,598,1)
K IBXDATA D OTHID^IBCEF71(.IBXSAVE,.IBXDATA,IBXIEN,3,5,0,0) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1) K IBXSAVE("OSQ")
"DATA",364.7,598,3,0)
^364.73^2^2^3030930^^^^
"DATA",364.7,598,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids
"DATA",364.7,598,3,2,0)
exist for the third 'other' id.  Kill the IBXSAVE("OSQ") array to clean up.
"DATA",364.7,599,0)
1172^N^5^^^^N^0
"DATA",364.7,599,1)
N Z S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))="DQ"
"DATA",364.7,599,3,0)
^^2^2^3030902^^^^
"DATA",364.7,599,3,1,0)
Use the IBXSAVE("OSQ",n) record to determine which 'OTHER PAYER' ids exist.
"DATA",364.7,599,3,2,0)
Output the qualifier 'DQ'.
"DATA",364.7,600,0)
1183^N^312^^^^N^0
"DATA",364.7,600,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"Q",1)
"DATA",364.7,601,0)
1185^N^312^^^^N^0
"DATA",364.7,601,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"Q",2)
"DATA",364.7,602,0)
1187^N^312^^^^N^0
"DATA",364.7,602,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"Q",3)
"DATA",364.7,602,3,0)
^^1^1^3030805^
"DATA",364.7,602,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,603,0)
1184^N^312^^^^N^0
"DATA",364.7,603,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"I",1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,603,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,603,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,604,0)
1186^N^312^^^^N^0
"DATA",364.7,604,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"I",2) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,604,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,604,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,605,0)
1188^N^312^^^^N^0
"DATA",364.7,605,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"I",3) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,605,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,605,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,614,0)
736^N^5^^^^N
"DATA",364.7,614,1)
K IBXSAVE("PRV-82"),IBXSAVE("PRV-SSN") D BOX82NM^IBCEU4(IBXIEN,.IBXSAVE) K IBXDATA S IBXDATA=$G(IBXSAVE("PRV-82",1)) I IBXDATA="" S IBXDATA=$G(IBXSAVE("PRV-SSN",1))
"DATA",364.7,614,3,0)
^364.73^2^2^3040303^^^^
"DATA",364.7,614,3,1,0)
Extracts all the possible providers into the appropriate line for box 82
"DATA",364.7,614,3,2,0)
of the UB-92 print claim form.  This is the first line extracted.
"DATA",364.7,640,0)
1181^N^312^^^^N^0
"DATA",364.7,640,1)
K IBXDATA D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,9,"73")
"DATA",364.7,640,3,0)
^^1^1^3030805^^
"DATA",364.7,640,3,1,0)
HARD CODE FORMAT OTH PAYER OTH PROV ID
"DATA",364.7,641,0)
1106^N^131^^^^N
"DATA",364.7,641,1)
S IBXDATA="OP1 "
"DATA",364.7,644,0)
1254^N^312^^^^N
"DATA",364.7,644,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,1)),"^",3)
"DATA",364.7,644,3,0)
^364.73^5^5^3040722^^^^
"DATA",364.7,644,3,1,0)
Refering Provider Secondary ID Qualifier
"DATA",364.7,644,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,644,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,644,3,4,0)
G2=COMMERCIAL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,644,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,645,0)
1255^N^312^^^^N
"DATA",364.7,645,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,1)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,645,3,0)
^364.73^1^1^3030930^^^
"DATA",364.7,645,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,646,0)
1256^^312^^^^N
"DATA",364.7,646,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,2)),"^",3)
"DATA",364.7,646,3,0)
^^5^5^3030815^^
"DATA",364.7,646,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,646,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,646,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,646,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,646,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,647,0)
1257^N^312^^^^N
"DATA",364.7,647,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,2)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,647,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,647,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,648,0)
1258^N^312^^^^N
"DATA",364.7,648,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,3)),"^",3)
"DATA",364.7,648,3,0)
^^5^5^3030804^
"DATA",364.7,648,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,648,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,648,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,648,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,648,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,649,0)
1259^N^312^^^^N
"DATA",364.7,649,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,3)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,649,3,0)
^364.73^1^1^3030930^^
"DATA",364.7,649,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,650,0)
1260^N^312^^^^N
"DATA",364.7,650,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,4)),"^",3)
"DATA",364.7,650,3,0)
^364.73^5^5^3040722^^
"DATA",364.7,650,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,650,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,650,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,650,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,650,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,651,0)
1261^N^312^^^^N
"DATA",364.7,651,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,4)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,651,3,0)
^364.73^1^1^3030930^^
"DATA",364.7,651,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,652,0)
1262^N^312^^^^N
"DATA",364.7,652,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,5)),"^",3)
"DATA",364.7,652,3,0)
^^5^5^3030804^
"DATA",364.7,652,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,652,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,652,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,652,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,652,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,653,0)
1263^N^312^^^^N
"DATA",364.7,653,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,5)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,653,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,653,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,654,0)
1247^N^312^^^^N^0
"DATA",364.7,654,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,2)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,654,3,0)
^364.73^1^1^3030930^^^
"DATA",364.7,654,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,655,0)
1249^N^312^^^^N^0
"DATA",364.7,655,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,3)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,655,3,0)
^364.73^1^1^3030930^^^
"DATA",364.7,655,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,656,0)
1251^N^312^^^^N^0
"DATA",364.7,656,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,4)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,656,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,656,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,657,0)
1253^N^312^^^^N^0
"DATA",364.7,657,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,5)),"^",4) I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"DATA",364.7,657,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,657,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,658,0)
1244^N^312^^^^N^0
"DATA",364.7,658,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,1)),"^",3)
"DATA",364.7,658,3,0)
^364.73^1^1^3030825^^^^
"DATA",364.7,658,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,659,0)
1246^N^312^^^^N^0
"DATA",364.7,659,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,2)),"^",3)
"DATA",364.7,659,3,0)
^^1^1^3030812^^
"DATA",364.7,659,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,660,0)
1248^N^312^^^^N^0
"DATA",364.7,660,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,3)),"^",3)
"DATA",364.7,660,3,0)
^^1^1^3030812^^
"DATA",364.7,660,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,661,0)
1250^N^312^^^^N^0
"DATA",364.7,661,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,4)),"^",3)
"DATA",364.7,661,3,0)
^^1^1^3030812^^
"DATA",364.7,661,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,662,0)
1252^N^312^^^^N^0
"DATA",364.7,662,1)
S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,9,5)),"^",3)
"DATA",364.7,662,3,0)
^^1^1^3030812^^^
"DATA",364.7,662,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,663,0)
1114^N^312^^^^N^0
"DATA",364.7,663,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,"Q",3)
"DATA",364.7,663,3,0)
^^1^1^3030804^^
"DATA",364.7,663,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,664,0)
1122^N^312^^^^N^0
"DATA",364.7,664,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,2,"I",2) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,664,3,0)
^364.73^1^1^3030930^^^^
"DATA",364.7,664,3,1,0)
FROM FORMAT IN PROVINF^IBCEF7
"DATA",364.7,798,0)
943^N^83^^^^N
"DATA",364.7,798,1)
N Z0 S Z0=$G(IBXSAVE("ATTP")) S:Z0="" Z0=$$NAME^IBCEFG1($P(IBXDATA,U,1),1) K IBXDATA S:$P(Z0,U,5)'="" IBXDATA=$$NOPUNCT^IBCEF($P(Z0,U,5))
"DATA",364.7,798,3,0)
^364.73^1^1^3031006^^^^
"DATA",364.7,798,3,1,0)
Finds SSN for ATTENDING or RENDERING PROVIDER
"DATA",364.7,800,0)
789^N^5^^^^N
"DATA",364.7,800,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,3) I IBXDATA="" D PTSELF^IBCEF73 I $G(IBXDATA)="18" S IBXDATA=$$PTADDR^IBCEF(IBXIEN,5)
"DATA",364.7,800,3,0)
^364.73^2^2^3030911^^^
"DATA",364.7,800,3,1,0)
Retrieves insured state data from IBXSAVE array previously extracted.  If
"DATA",364.7,800,3,2,0)
data element's value is null, do not output.
"DATA",364.7,806,0)
793^N^5^^^^N
"DATA",364.7,806,1)
K IBXDATA I $P($G(IBXSAVE("CADR")),U,2)'="" S IBXDATA=$E($P(IBXSAVE("CADR"),U,2)_" "_$P(IBXSAVE("CADR"),U,3),1,30)
"DATA",364.7,806,3,0)
^364.73^6^6^3030926^^^^
"DATA",364.7,806,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,806,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,806,3,3,0)
element so there is no output.  Also don't output data element if its
"DATA",364.7,806,3,4,0)
value is null.
"DATA",364.7,806,3,5,0)
This data relies on the presence of the IBXSAVE("CADR") array that should
"DATA",364.7,806,3,6,0)
have been set in a previous data field.
"DATA",364.7,807,0)
885^N^192^^^^N
"DATA",364.7,807,1)
K IBXSAVE("CADR") I $D(IBXDATA) N Q,Y,Z S Q="CADR",Y=$G(IBXDATA(6)) D ZIPOUT^VAFADDR S:Y'="" $P(IBXSAVE(Q),U,6)=Y F Z=1:1:5,7 I $D(IBXDATA(Z)) S $P(IBXSAVE(Q),U,Z)=IBXDATA(Z)
"DATA",364.7,807,3,0)
^^3^3^2991101^^^^
"DATA",364.7,807,3,1,0)
Data element extracts address data into IBXDATA array
"DATA",364.7,807,3,2,0)
Save the data in IBXSAVE("CADR")=Street addr 1^Street addr 2^Street addr 3^
"DATA",364.7,807,3,3,0)
City^State^Zip^claim office id # for later use.
"DATA",364.7,830,0)
866^N^5^^^^N
"DATA",364.7,830,1)
N Z,A,B K IBXDATA S:'$D(IBXSAVE("LCOB")) IBXNOREQ=1 S (Z,B)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  S:'$O(IBXSAVE("LCOB",Z,"COB",0)) IBXNOREQ=1 S A=0 F  S A=$O(IBXSAVE("LCOB",Z,"COB",A)) Q:'A  S B=B+1,IBXDATA(B)=Z I B>1 D ID^IBCEF2(Z,"LCOB")
"DATA",364.7,830,3,0)
^^4^4^2990902^^^^
"DATA",364.7,830,3,1,0)
This data element assumes the existence of the IBXSAVE array for each line
"DATA",364.7,830,3,2,0)
item (LCOB) that was previously extracted.  If the line has COB data
"DATA",364.7,830,3,3,0)
associated with it, output the line # for each COB sequence found for the
"DATA",364.7,830,3,4,0)
line.  For every line output > 1, output the 'LCOB' record id.
"DATA",364.7,893,0)
936^N^5^^^^N
"DATA",364.7,893,1)
N IBZ,Z0 D GETPRV^IBCEU(IBXIEN,1,.IBZ) S Z0=$$NAME^IBCEFG1($P($G(IBZ(1,1)),U),1) K IBXDATA S:$P(Z0,U,5)'="" IBXDATA=$P(Z0,U,5)
"DATA",364.7,893,3,0)
^364.73^1^1^3031015^^^^
"DATA",364.7,893,3,1,0)
Finds SSN for REFERING PROVIDER
"DATA",364.7,896,0)
948^N^242^^^^N
"DATA",364.7,896,1)
S IBXSAVE("OPP")=$$NAME^IBCEFG1(IBXDATA) K IBXDATA S:$P(IBXSAVE("OPP"),U)'="" IBXDATA=$P(IBXSAVE("OPP"),U)
"DATA",364.7,896,3,0)
^^2^2^2990614^^^^
"DATA",364.7,896,3,1,0)
Changes data element (name) into LAST^FIRST^MIDDLE format.  Saves data in
"DATA",364.7,896,3,2,0)
IBXSAVE array for use by later fields.
"DATA",364.7,897,0)
950^N^310^^^^N
"DATA",364.7,897,1)
N Z0 S Z0=$$NAME^IBCEFG1(IBXDATA,1) K IBXDATA S:$P(Z0,U,5)'="" IBXDATA=$P(Z0,U,5)
"DATA",364.7,897,3,0)
^364.73^1^1^3031001^^^^
"DATA",364.7,897,3,1,0)
Finds the Operating Physicians SSN 
"DATA",364.7,901,0)
805^N^236^^^^N
"DATA",364.7,901,1)
N Z,IBZ M IBZ=IBXDATA K IBXDATA F Z=1,2 I $P($G(IBZ),U,Z)'="",$D(^DGCR(399,IBXIEN,"I"_(Z+1))) S IBXDATA(Z)=$P(IBZ,U,Z)
"DATA",364.7,901,3,0)
^^11^11^3000203^^^^
"DATA",364.7,901,3,1,0)
This is the X12 interpretation of the 'other' insurance plan types
"DATA",364.7,901,3,2,0)
(see codes below or refer to the 837 v4010 field 2000B/SBR/09.)
"DATA",364.7,901,3,3,0)
    X12 CODES: MA = MEDICARE PART A    3
"DATA",364.7,901,3,4,0)
               MB = MEDICARE PART B    3
"DATA",364.7,901,3,5,0)
               HM = HMO
"DATA",364.7,901,3,6,0)
               MC = MEDICAID    4
"DATA",364.7,901,3,7,0)
               12 = PPO
"DATA",364.7,901,3,8,0)
               CH = TRICARE     5
"DATA",364.7,901,3,9,0)
               WC = WORKERS COMP
"DATA",364.7,901,3,10,0)
               CI = COMMERCIAL  (default if none defined),1,2
"DATA",364.7,901,3,11,0)
               15 = INDEMNITY
"DATA",364.7,902,0)
806^N^5^^^^N
"DATA",364.7,902,1)
K IBXDATA D OTHINSID^IBCEF72(IBXIEN,.IBXDATA)
"DATA",364.7,902,3,0)
^364.73^5^5^3030917^^^^
"DATA",364.7,902,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,902,3,2,0)
possible for the data element in the IBXDATA array.  If any other insurance
"DATA",364.7,902,3,3,0)
insurance company data is found, the data is output.
"DATA",364.7,902,3,4,0)
old code:
"DATA",364.7,902,3,5,0)
K IBXDATA ;NEED TO REMOVE THIS COMMENT I $$FT^IBCEF(IBXIEN)=3 N Z,Z0 F Z=1,2 S Z0=$P($G(IBXSAVE("OI#",Z)),U,2) I Z0'="",Z0'?1A1"PRNT",$D(^DGCR(399,IBXIEN,"I"_(Z+1))) S IBXDATA(Z)=Z0
"DATA",364.7,914,0)
941^N^83^^^^N
"DATA",364.7,914,1)
N Z,Z0 S Z=$P(IBXDATA,U,1,2),$P(Z,U,3,4)=(IBXIEN_U_($$INSFT^IBCEU5(IBXIEN)+3)),Z0=$$NAME^IBCEFG1(Z,1),IBXSAVE("ATTP")=Z0 S:$S($P(Z0,U)'="":0,1:$$SLF^IBCEU4(IBXIEN)) IBXNOREQ=1 K IBXDATA S:$P(Z0,U)'="" IBXDATA=$$NOPUNCT^IBCEF($P(Z0,U))
"DATA",364.7,914,3,0)
^364.73^4^4^3030826^^^^
"DATA",364.7,914,3,1,0)
Changes data element (name) into LAST^FIRST^MIDDLE^CREDENTIALS format. Saves
"DATA",364.7,914,3,2,0)
data in IBXSAVE array for use by later fields.
"DATA",364.7,914,3,3,0)
If the provider name is blank and the provider id is SLF000 (self), this
"DATA",364.7,914,3,4,0)
field is not required.
"DATA",364.7,915,0)
942^N^5^^^^N
"DATA",364.7,915,1)
K IBXDATA S:$P($G(IBXSAVE("ATTP")),U,2)'="" IBXDATA=$P(IBXSAVE("ATTP"),U,2) K IBXSAVE("ATTP")
"DATA",364.7,915,3,0)
^364.73^2^2^3031006^^^^
"DATA",364.7,915,3,1,0)
If the attending/rendering provider exists, output the first name from the
"DATA",364.7,915,3,2,0)
second '^' piece.
"DATA",364.7,916,0)
946^N^5^^^^N
"DATA",364.7,916,1)
N IBZ D GETPRV^IBCEU(IBXIEN,9,.IBZ) N IBZZ S IBZZ=$P($G(IBZ(9,1)),U) S:IBZZ="" IBZZ=$P($G(^DGCR(399,IBXIEN,"U1")),U,14) S IBXDATA=$$GETNMEL^IBCEF7(IBZZ,"GIVEN")
"DATA",364.7,916,3,0)
^364.73^1^1^3030917^^^^
"DATA",364.7,916,3,1,0)
Operating provider first name
"DATA",364.7,917,0)
949^N^5^^^^N
"DATA",364.7,917,1)
K IBXDATA S:$P($G(IBXSAVE("OPP")),U,2)'="" IBXDATA=$P(IBXSAVE("OPP"),U,2) K IBXSAVE("OPP")
"DATA",364.7,917,3,0)
^^2^2^2990614^^^^
"DATA",364.7,917,3,1,0)
If the operating provider exists, output the first name from the second '^'
"DATA",364.7,917,3,2,0)
piece.
"DATA",364.7,918,0)
937^N^5^^^^N
"DATA",364.7,918,1)
K IBXDATA S:$P($G(IBXSAVE("REFP")),U,2)'="" IBXDATA=$P(IBXSAVE("REFP"),U,2) K IBXSAVE("REFP")
"DATA",364.7,918,3,0)
^^2^2^2990504^^^^
"DATA",364.7,918,3,1,0)
If the referring provider exists, output the first name from the second '^'
"DATA",364.7,918,3,2,0)
piece.
"DATA",364.7,919,0)
947^N^5^^^^N
"DATA",364.7,919,1)
N IBZ D GETPRV^IBCEU(IBXIEN,9,.IBZ) N IBZZ S IBZZ=$P($G(IBZ(9,1)),U) S:IBZZ="" IBZZ=$P($G(^DGCR(399,IBXIEN,"U1")),U,14) S IBZZ=$$NAME^IBCEFG1(IBZZ,1),IBXDATA=$P(IBZZ,U,5)
"DATA",364.7,920,0)
939^N^5^^^^N
"DATA",364.7,920,1)
K IBXDATA
"DATA",364.7,921,0)
944^N^249^^^^N
"DATA",364.7,921,1)
I IBXDATA="" N Z D GETPRV^IBCEU(IBXIEN,"3,4",.Z) I $D(Z(3,1))!$D(Z(4,1)) S IBXDATA="99"
"DATA",364.7,921,3,0)
^^2^2^3010228^^^^
"DATA",364.7,921,3,1,0)
Default to 99 if no specialty found and there is a rendering or attending
"DATA",364.7,921,3,2,0)
provider defined.
"DATA",364.7,922,0)
935^N^5^^^^N
"DATA",364.7,922,1)
K IBXDATA
"DATA",364.7,922,3,0)
^^1^1^2991216^
"DATA",364.7,922,3,1,0)
Not currently used.
"DATA",364.7,923,0)
951^N^5^^^^N
"DATA",364.7,923,1)
K IBXDATA
"DATA",364.7,934,0)
960^N^5^^^^N
"DATA",364.7,934,1)
K IBXDATA S IBXDATA="Y"
"DATA",364.7,934,3,0)
^364.73^1^1^3030905^^^^
"DATA",364.7,934,3,1,0)
Explanation of benefits indicator should always be set to "y"
"DATA",364.7,945,0)
177^N^296^^^^N
"DATA",364.7,945,1)
 
"DATA",364.7,945,3,0)
^364.73^3^3^3031105^^^^
"DATA",364.7,945,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR",$J) will
"DATA",364.7,945,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,945,3,3,0)
element so there is no output.
"DATA",364.7,948,0)
971^N^272^^^^N
"DATA",364.7,948,1)
K:$$INSFT^IBCEU5(IBXIEN) IBXDATA I $D(IBXDATA) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA) I IBXDATA="",$D(IBXSAVE("IBFAC")),'$P(IBXSAVE("IBFAC"),U,2) D F^IBCEF("N-FEDERAL TAX ID") S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA)
"DATA",364.7,948,3,0)
^364.73^2^2^3030915^^^^
"DATA",364.7,948,3,1,0)
If there is no outside facility id on the bill record, and the outside
"DATA",364.7,948,3,2,0)
facility is actually a remote VA site, extract the site's federal tax id#.
"DATA",364.7,949,0)
972^N^273^^^^N
"DATA",364.7,949,1)
N A,B,Z S A=IBXIEN,B=IBXDATA D F^IBCEF("N-RENDERING INSTITUTION") S Z=IBXDATA K IBXDATA S B=$S($P(Z,U,4):0,$$FT^IBCEF(A)=3&$$WNRBILL^IBEFUNC(A)&'B:"",$P(Z,U,2)=""&'$P(Z,U,3):"",'$P(Z,U,2):0,1:B) S:B'="" IBXDATA=B,IBXSAVE("PSVC")=B
"DATA",364.7,949,3,0)
^364.73^6^6^3030915^^^^
"DATA",364.7,949,3,1,0)
Extract the code for the non VA care type or 0 for a VA remote site
"DATA",364.7,949,3,2,0)
rendering facility.  If the bill is a MEDICARE WNR bill and the form type
"DATA",364.7,949,3,3,0)
is UB-92 (3) and the bill is not a NON-VA claim, output nothing.  Also, if
"DATA",364.7,949,3,4,0)
the bill is a HCFA 1500 MEDICARE WNR bill and it is not a bill for a
"DATA",364.7,949,3,5,0)
NON-VA claim, output 0.  If the facility is not remote or NON-VA but the
"DATA",364.7,949,3,6,0)
flag for another VA does the site's billing is set, output 0.
"DATA",364.7,969,0)
912^N^5^^^^N
"DATA",364.7,969,1)
N Z D LCOBOUT^IBCEU1(.IBXSAVE,.IBXDATA,8) I $D(IBXDATA) S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  S IBXDATA(Z)=$$DOLLAR^IBCEFG1(IBXDATA(Z))
"DATA",364.7,969,3,0)
^^4^4^2990902^^^^
"DATA",364.7,969,3,1,0)
This data element assumes the existence of the IBXSAVE("LCOB") array that
"DATA",364.7,969,3,2,0)
was previously extracted with COB data for specific line items.  Up to 6
"DATA",364.7,969,3,3,0)
adj amts can be output on a single record for the same line and group
"DATA",364.7,969,3,4,0)
code.  This extracts the second, eighth, etc onto separate records.
"DATA",364.7,987,0)
985^N^318^^^^N
"DATA",364.7,987,1)
S IBXDATA=$S($P(IBXSAVE("ID"),U,3):$P(IBXSAVE("ID"),U,3),1:$P(IBXSAVE("ID"),U,4))
"DATA",364.7,987,3,0)
^364.73^2^2^3040527^^^^
"DATA",364.7,987,3,1,0)
Finds the operating provider id for all insurance companies, saves data in
"DATA",364.7,987,3,2,0)
IBXSAVE array and resets IBXDATA to primary id number, if defined.
"DATA",364.7,988,0)
986^N^318^^^^N
"DATA",364.7,988,1)
S IBXDATA=$S($P(IBXDATA,U,3):$P(IBXDATA,U,3),1:$P(IBXDATA,U,4))
"DATA",364.7,988,3,0)
^364.73^2^2^3040527^^^^
"DATA",364.7,988,3,1,0)
Finds the referring provider id for all insurance companies, saves data in
"DATA",364.7,988,3,2,0)
IBXSAVE array and resets IBXDATA to primary id number, if defined.
"DATA",364.7,992,0)
993^N^318^^^^N
"DATA",364.7,992,1)
S IBXDATA=$P(IBXSAVE("ID"),U,2)
"DATA",364.7,992,3,0)
^364.73^3^3^3031014^^^^
"DATA",364.7,992,3,1,0)
Field relies on the existence of the IBXSAVE("OP-ID",n) array previously
"DATA",364.7,992,3,2,0)
extracted for the primary operating provider id.  The tertiary id, if it
"DATA",364.7,992,3,3,0)
exists, will be in IBXSAVE("OP-ID",3).
"DATA",364.7,993,0)
991^N^318^^^^N
"DATA",364.7,993,1)
S IBXDATA=$P(IBXSAVE("ID"),U,9)
"DATA",364.7,993,3,0)
^364.73^3^3^3031029^^^^
"DATA",364.7,993,3,1,0)
Field relies on the existence of the IBXSAVE("OP-ID",n) array previously
"DATA",364.7,993,3,2,0)
extracted for the primary operating provider id.  The secondary id, if it
"DATA",364.7,993,3,3,0)
exists, will be in IBXSAVE("OP-ID",2).
"DATA",364.7,994,0)
992^N^318^^^^N
"DATA",364.7,994,1)
S IBXDATA=$P(IBXDATA,U,9)
"DATA",364.7,994,3,0)
^364.73^3^3^3031029^^^^
"DATA",364.7,994,3,1,0)
Field relies on the existence of the IBXSAVE("REF-ID",n) array previously
"DATA",364.7,994,3,2,0)
extracted for the primary referring provider id.  The secondary id, if it
"DATA",364.7,994,3,3,0)
exists, will be in IBXSAVE("REF-ID",2).
"DATA",364.7,995,0)
994^N^318^^^^N
"DATA",364.7,995,1)
S IBXDATA=$P(IBXDATA,U,2)
"DATA",364.7,995,3,0)
^364.73^3^3^3031016^^^^
"DATA",364.7,995,3,1,0)
Field relies on the existence of the IBXSAVE("REF-ID",n) array previously
"DATA",364.7,995,3,2,0)
extracted for the primary referring provider id.  The tertiary id, if it
"DATA",364.7,995,3,3,0)
exists, will be in IBXSAVE("REF-ID",3).
"DATA",364.7,1005,0)
1004^N^290^^^^N
"DATA",364.7,1005,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA)
"DATA",364.7,1006,0)
1005^N^234^^^^N
"DATA",364.7,1006,1)
K IBXDATA
"DATA",364.7,1006,3,0)
^364.73^11^11^3031001^^^^
"DATA",364.7,1006,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1006,3,2,0)
possible for the data element in the IBXDATA array.  If any 'other'
"DATA",364.7,1006,3,3,0)
insurance company data is found, the data is formatted as the insurance type
"DATA",364.7,1006,3,4,0)
of the insurance company in X12 format (see codes below or refer to the
"DATA",364.7,1006,3,5,0)
837 V4010 field 2320/SBR/05 - professional guide)
"DATA",364.7,1006,3,6,0)
 
"DATA",364.7,1006,3,7,0)
     Type codes: = 1: COMMERCIAL (C1)
"DATA",364.7,1006,3,8,0)
                   2: MEDICARE (MP)
"DATA",364.7,1006,3,9,0)
                   3: MEDICAID (MC)
"DATA",364.7,1006,3,10,0)
                   4: TRICARE (OT)
"DATA",364.7,1006,3,11,0)
                   5: CHAMPVA (OT)
"DATA",364.7,1008,0)
1007^N^5^^^^N
"DATA",364.7,1008,1)
N IBZ S IBXDATA=$P($G(IBXSAVE("ATTP")),U,4) I IBXDATA="",$G(IBXSAVE("ATTP"))="" D F^IBCEF("N-ATT/REND PHYSICIAN NAME","IBZ") S $P(IBZ,U,3,4)=IBXIEN_U_$O(^DGCR(399,IBXIEN,"PRV","B",4,0)),IBXDATA=$P($$NAME^IBCEFG1(IBZ,1),U,4)
"DATA",364.7,1008,3,0)
^364.73^1^1^3040527^^
"DATA",364.7,1008,3,1,0)
Credentials should be in the 4th piece of the IBXSAVE("ATTP") array.
"DATA",364.7,1010,0)
1009^N^233^^^^N
"DATA",364.7,1010,1)
I $D(IBXDATA) K IBXSAVE("DEFID") S IBXDATA=$P("HM^C1^MB^MC^GP^^^^OT",U,+IBXDATA) S:IBXDATA="C1" IBXSAVE("DEFID")=1 S IBXDATA="" S IBXDATA=""
"DATA",364.7,1010,3,0)
^364.73^2^2^3030911^^^^
"DATA",364.7,1010,3,1,0)
Translate to X12 code, default to Group Policy (GP) if data is missing.
"DATA",364.7,1010,3,2,0)
Refer to Professional 837 V4010 2000B/SBR/05 for codes. REMOVED DEFAULT "GP"
"DATA",364.7,1011,0)
1010^N^5^^^^N
"DATA",364.7,1011,1)
K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S:$P($G(IBXSAVE("OUTPT",Z,"AUX")),U,4)'="" IBXDATA(Z)=$P($P(IBXSAVE("OUTPT",Z,"AUX"),U,4),"-",1)
"DATA",364.7,1011,3,0)
^^3^3^2990901^^^^
"DATA",364.7,1011,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1011,3,2,0)
possible for the data element in the previously extracted IBXSAVE array.
"DATA",364.7,1011,3,3,0)
Only output the data for service lines that have data.
"DATA",364.7,1012,0)
1011^N^5^^^^N
"DATA",364.7,1012,1)
K IBXDATA N Z S Z="" F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"RX")),$P(IBXSAVE("OUTPT",Z,"RX"),U,3)'="" S IBXDATA(Z)="N4"
"DATA",364.7,1012,3,0)
^364.73^3^3^3040309^^^^
"DATA",364.7,1012,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1012,3,2,0)
possible for the data element in the previously extract IBXSAVE array.
"DATA",364.7,1012,3,3,0)
Changes the internal code into a valid X12 837 code (N1,N2,N3,N4).
"DATA",364.7,1015,0)
1014^N^124
"DATA",364.7,1015,1)
N X S X=$E(IBXDATA,$L(IBXDATA)) S IBXDATA=$S(X["P"!(X["B"):"004010X098A1",X["H"!(X["A"):"004010X096A1",1:"")
"DATA",364.7,1015,3,0)
^364.73^1^1^3040712^^^^
"DATA",364.7,1015,3,1,0)
 
"DATA",364.7,1017,0)
1302^N^5^^^^N^1
"DATA",364.7,1017,1)
S IBXDATA="B"
"DATA",364.7,1017,3,0)
^^1^1^3030815^^^^
"DATA",364.7,1017,3,1,0)
HARD CODED TO ENSURE THIS IS ALWAYS SENT
"DATA",364.7,1018,0)
1301^N^312^^^^N
"DATA",364.7,1018,1)
K IBXSAVE("OSQ") N Q,OK M Q=IBXSAVE("PROVINF",IBXIEN,"O") S (C,Z)=0 F  S Z=$O(Q(Z)) Q:'Z  S OK=0 X "N A F A=1:1 Q:'$D(Q(Z,5,A))  I $P(Q(Z,5,A),U,4)'="""" S OK=1 Q" I OK S C=C+1,IBXDATA(C)=$G(Q(Z)),IBXSAVE("OSQ",Z)=C D:C>1 ID^IBCEF2(C,"OP8 ")
"DATA",364.7,1018,3,0)
^^9^9^3030902^^^^
"DATA",364.7,1018,3,1,0)
Output if an ID exists for the 'other insurance'.  If more than 1 ins,
"DATA",364.7,1018,3,2,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this is
"DATA",364.7,1018,3,3,0)
used to determine the current bill's sequence of other providers and which
"DATA",364.7,1018,3,4,0)
IBXDATA array entry needs to be set for each.  IBXSAVE("OSQ") must be killed
"DATA",364.7,1018,3,5,0)
at the last field for this record.
"DATA",364.7,1018,3,6,0)
IBXSAVE("OSQ",n)=m where n = the sequence for the other insurance (if bill
"DATA",364.7,1018,3,7,0)
is primary, 1=secondary, 2=tertiary; if bill is secondary, 1=primary,
"DATA",364.7,1018,3,8,0)
2=tertiary; if bill is tertiary, 1=primary, 2=secondary).  And where
"DATA",364.7,1018,3,9,0)
m = the IBXDATA(m) entry to set for the 'n' COB sequence.
"DATA",364.7,1019,0)
1303^N^312^^^^N
"DATA",364.7,1019,1)
K IBXDATA D PROVSEQ^IBCEF72(IBXIEN,.IBXSAVE,.IBXDATA,3,"OP1 ")
"DATA",364.7,1019,3,0)
^364.73^9^9^3030916^^^^
"DATA",364.7,1019,3,1,0)
Output if an ID exists for the 'other insurance'.  If more than 1
"DATA",364.7,1019,3,2,0)
insurance, must output the record id.  The IBXSAVE("OSQ") array is 
"DATA",364.7,1019,3,3,0)
used to determine the current bill's sequence of other providers and
"DATA",364.7,1019,3,4,0)
which IBXDATA array entry needs to be set for each.  This variable must
"DATA",364.7,1019,3,5,0)
be killed at the last field for this record.  IBXSAVE("OSQ",n)=m where
"DATA",364.7,1019,3,6,0)
n = the sequence for the other insurance (if bill is primary, 1=secondary,
"DATA",364.7,1019,3,7,0)
2=tertiary; if bill is secondary, 1=primary, 2=tertiary; if bill is
"DATA",364.7,1019,3,8,0)
tertiary, 1=primary, 2=secondary.  And where m=the IBXDATA(m) entry to
"DATA",364.7,1019,3,9,0)
set for the 'n' COB sequence.
"DATA",364.7,1020,0)
1305^N^317^^^^N
"DATA",364.7,1020,1)
N Z,Z0 K IBXDATA,IBXSAVE("OSQ") I $$INSFT^IBCEU5(IBXIEN) S Z0=$$PSPRV^IBCEF7(IBXIEN) I Z0=101!(Z0=111)!(Z0=110) S Z=$$OUTPRV^IBCEF72("OP3",IBXIEN,.IBXSAVE) D SETSEQ^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,1,3)
"DATA",364.7,1020,3,0)
^364.73^16^16^3030908^^^^
"DATA",364.7,1020,3,1,0)
This data is only output for institutional claims.
"DATA",364.7,1020,3,2,0)
If the bill references an outside facility and matches either of the
"DATA",364.7,1020,3,3,0)
following 2 situations, output the ids for the facility on this record.
"DATA",364.7,1020,3,4,0)
1.  If the service is not a purchase service
"DATA",364.7,1020,3,5,0)
2.  If the service is a purchase service and there is a non-VA provider as
"DATA",364.7,1020,3,6,0)
the attending provider
"DATA",364.7,1020,3,7,0)
Output if an ID exists for the 'other insurance'.  If more than 1 ins,
"DATA",364.7,1020,3,8,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this is
"DATA",364.7,1020,3,9,0)
used to determine the current bill's sequence of other providers and which
"DATA",364.7,1020,3,10,0)
IBXDATA array entry needs to be set for each.  This variable must be killed
"DATA",364.7,1020,3,11,0)
at the last field for this record.
"DATA",364.7,1020,3,12,0)
IBXSAVE("OSQ",n)=m where n = the sequence for the other insurance (if bill
"DATA",364.7,1020,3,13,0)
is primary, 1=secondary, 2=tertiary; if bill is secondary, 1=primary,
"DATA",364.7,1020,3,14,0)
2=tertiary; if bill is tertiary, 1=primary, 2=secondary).  And where
"DATA",364.7,1020,3,15,0)
m = the IBXDATA(m) entry to set for the 'n' COB sequence.
"DATA",364.7,1020,3,16,0)
Filter the ids for valid qualifiers for the OP7 record.
"DATA",364.7,1021,0)
1306^N^312^^^^N
"DATA",364.7,1021,1)
K IBXSAVE("OSQ") N C,Z,Q,OK M Q=IBXSAVE("PROVINF",IBXIEN,"O") S (C,Z)=0 F  S Z=$O(Q(Z)) Q:'Z  S OK=0 X "N A F A=1:1 Q:'$D(Q(Z,1,A))  I $P(Q(Z,1,A),U,4)'="""" S OK=1 Q" I OK S C=C+1,IBXDATA(C)=$G(Q(Z)),IBXSAVE("OSQ",Z)=C D:C>1 ID^IBCEF2(C,"OP4 ")
"DATA",364.7,1021,3,0)
^^9^9^3030821^^^^
"DATA",364.7,1021,3,1,0)
Output if an ID exists for the 'other insurance'.  If more than 1 insurance
"DATA",364.7,1021,3,2,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this
"DATA",364.7,1021,3,3,0)
is used to determine the current bill's sequence of other providers and
"DATA",364.7,1021,3,4,0)
which IBXDATA array entry needs to be set for each.  This variable must
"DATA",364.7,1021,3,5,0)
be killed at the last field for this record.  IBXSAVE("OSQ",n)=m where
"DATA",364.7,1021,3,6,0)
n = the sequence for the other insurance (if bill is primary, 1=secondary,
"DATA",364.7,1021,3,7,0)
2=tertiary; if bill is secondary, 1=primary, 2=tertiary; if bill is
"DATA",364.7,1021,3,8,0)
tertiary, 1=primary, 2=secondary.  And where m=the IBXDATA(m) entry to
"DATA",364.7,1021,3,9,0)
set for the 'n' COB sequence.
"DATA",364.7,1022,0)
1308^N^5^^^^N
"DATA",364.7,1022,1)
N Z K IBXDATA,IBXSAVE("OSQ") I '$$INSFT^IBCEU5(IBXIEN) S Z=$$OUTPRV^IBCEF72("OP6",IBXIEN,.IBXSAVE) I Z D SETSEQ^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,3,(Z=2),6)
"DATA",364.7,1022,3,0)
^364.73^16^16^3030904^^^^
"DATA",364.7,1022,3,1,0)
If the bill is a professional bill, was performed at an 'outside' facility, 
"DATA",364.7,1022,3,2,0)
and the service was purchased THEN
"DATA",364.7,1022,3,3,0)
 If the rendering provider is an outside provider: 
"DATA",364.7,1022,3,4,0)
    output the ids for the rendering provider here.
"DATA",364.7,1022,3,5,0)
 If the rendering provider is NOT an outside provider: 
"DATA",364.7,1022,3,6,0)
    output the ids for the outside facility here.
"DATA",364.7,1022,3,7,0)
Output if an ID exists for the 'other insurance'.  If more than 1 ins,
"DATA",364.7,1022,3,8,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this is
"DATA",364.7,1022,3,9,0)
used to determine the current bill's sequence of other providers and which
"DATA",364.7,1022,3,10,0)
IBXDATA array entry needs to be set for each.  This variable must be killed
"DATA",364.7,1022,3,11,0)
at the last field for this record.
"DATA",364.7,1022,3,12,0)
IBXSAVE("OSQ",n)=m where n = the sequence for the other insurance (if bill
"DATA",364.7,1022,3,13,0)
is primary, 1=secondary, 2=tertiary; if bill is secondary, 1=primary,
"DATA",364.7,1022,3,14,0)
2=tertiary; if bill is tertiary, 1=primary, 2=secondary).  And where
"DATA",364.7,1022,3,15,0)
m = the IBXDATA(m) entry to set for the 'n' COB sequence.
"DATA",364.7,1022,3,16,0)
Filter the ids for valid qualifiers for the OP6 record.
"DATA",364.7,1023,0)
1309^N^317^^^^N
"DATA",364.7,1023,1)
N Z,Z0 K IBXDATA,IBXSAVE("OSQ") I '$$INSFT^IBCEU5(IBXIEN) S Z=$$PSPRV^IBCEF7(IBXIEN) I Z=111!(Z=100)!(Z=110) S Z0=$$OUTPRV^IBCEF72("OP7",IBXIEN,.IBXSAVE) D SETSEQ^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,0,1,7)
"DATA",364.7,1023,3,0)
^364.73^16^16^3030904^^^^
"DATA",364.7,1023,3,1,0)
If the bill is a professional bill, was performed at an 'outside' facility,
"DATA",364.7,1023,3,2,0)
and the service was purchased THEN
"DATA",364.7,1023,3,3,0)
If the rendering provider is an outside provider:
"DATA",364.7,1023,3,4,0)
  output the ids for the rendering provider here.
"DATA",364.7,1023,3,5,0)
If the rendering provider is NOT an outside provider:
"DATA",364.7,1023,3,6,0)
  output the ids for the outside facility here.
"DATA",364.7,1023,3,7,0)
Output if an ID exists for the 'other insurance'.  If more than 1 ins,
"DATA",364.7,1023,3,8,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this is
"DATA",364.7,1023,3,9,0)
used to determine the current bill's sequence of other providers and which
"DATA",364.7,1023,3,10,0)
IBXDATA array entry needs to be set for each.  IBXSAVE("OSQ") must be
"DATA",364.7,1023,3,11,0)
killed at the last field for this record.
"DATA",364.7,1023,3,12,0)
IBXSAVE("OSQ",n)=m where n = the sequence for the other insurance (if bill
"DATA",364.7,1023,3,13,0)
is primary, 1=secondary, 2=tertiary; if bill is secondary, 1=primary,
"DATA",364.7,1023,3,14,0)
2=tertiary; if bill is tertiary, 1=primary, 2=secondary).  And where
"DATA",364.7,1023,3,15,0)
m = the IBXDATA(m) entry to set for the 'n' COB sequence.
"DATA",364.7,1023,3,16,0)
Filter the ids for valid qualifiers for the OP7 record.
"DATA",364.7,1024,0)
1310^N^312^^^^N
"DATA",364.7,1024,1)
K IBXSAVE("OSQ") N C,Z,Q,OK M Q=IBXSAVE("PROVINF",IBXIEN,"O") S (C,Z)=0 F  S Z=$O(Q(Z)) Q:'Z  S OK=0 X "N A F A=1:1 Q:'$D(Q(Z,9,A))  I $P(Q(Z,9,A),U,4)'="""" S OK=1 Q" I OK S C=C+1,IBXDATA(C)=$G(Q(Z)),IBXSAVE("OSQ",Z)=C D:C>1 ID^IBCEF2(C,"OP9 ")
"DATA",364.7,1024,3,0)
^^9^9^3030821^^^^
"DATA",364.7,1024,3,1,0)
Output if an ID exists for the 'other insurance'.  If more than 1 insurance
"DATA",364.7,1024,3,2,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this
"DATA",364.7,1024,3,3,0)
is used to determine the current bill's sequence of other providers and
"DATA",364.7,1024,3,4,0)
which IBXDATA array entry needs to be set for each.  This variable must
"DATA",364.7,1024,3,5,0)
be killed at the last field for this record.  IBXSAVE("OSQ",n)=m where
"DATA",364.7,1024,3,6,0)
n = the sequence for the other insurance (if bill is primary, 1=secondary,
"DATA",364.7,1024,3,7,0)
2=tertiary; if bill is secondary, 1=primary, 2=tertiary; if bill is
"DATA",364.7,1024,3,8,0)
tertiary, 1=primary, 2=secondary.  And where m=the IBXDATA(m) entry to
"DATA",364.7,1024,3,9,0)
set for the 'n' COB sequence.
"DATA",364.7,1025,0)
1304^N^312^^^^N
"DATA",364.7,1025,1)
K IBXSAVE("OSQ") N C,Z,Q,OK M Q=IBXSAVE("PROVINF",IBXIEN,"O") S (C,Z)=0 F  S Z=$O(Q(Z)) Q:'Z  S OK=0 X "N A F A=1:1 Q:'$D(Q(Z,2,A))  I $P(Q(Z,2,A),U,4)'="""" S OK=1 Q" I OK S C=C+1,IBXDATA(C)=$G(Q(Z)),IBXSAVE("OSQ",Z)=C D:C>1 ID^IBCEF2(C,"OP2 ")
"DATA",364.7,1025,3,0)
^^9^9^3030826^^^^
"DATA",364.7,1025,3,1,0)
Output if an ID exists for the 'other insurance'.  If more than 1 insurance
"DATA",364.7,1025,3,2,0)
must output the record id.  Must kill the IBXSAVE("OSQ") array as this
"DATA",364.7,1025,3,3,0)
is used to determine the current bill's sequence of other providers and
"DATA",364.7,1025,3,4,0)
which IBXDATA array entry needs to be set for each.  This variable must
"DATA",364.7,1025,3,5,0)
be killed at the last field for this record.  IBXSAVE("OSQ",n)=m where
"DATA",364.7,1025,3,6,0)
n = the sequence for the other insurance (if bill is primary, 1=secondary,
"DATA",364.7,1025,3,7,0)
2=tertiary; if bill is secondary, 1=primary, 2=tertiary; if bill is
"DATA",364.7,1025,3,8,0)
tertiary, 1=primary, 2=secondary.  And where m=the IBXDATA(m) entry to
"DATA",364.7,1025,3,9,0)
set for the 'n' COB sequence.
"DATA",364.7,1026,0)
1084^N^5^^^^N
"DATA",364.7,1026,1)
N Z,Z1 S (Z,Z1)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z1=Z1+1,IBXDATA(Z1)="MI"
"DATA",364.7,1027,0)
1311^N^101^^^^N
"DATA",364.7,1027,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI3 ")
"DATA",364.7,1027,3,0)
^364.73^7^7^3030916^^^^
"DATA",364.7,1027,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1027,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) variable
"DATA",364.7,1027,3,3,0)
holds the indicator of which insurance [(P)rimary/(S)econdary/(T)ertiary] is
"DATA",364.7,1027,3,4,0)
currently responsible for the bill.  Using this data as a guide, the next
"DATA",364.7,1027,3,5,0)
insurance for the primary is secondary, then tertiary.  For secondary, it's
"DATA",364.7,1027,3,6,0)
primary then tertiary, and for tertiary, it's primary, then secondary. For
"DATA",364.7,1027,3,7,0)
other than the first occurrence, the RECORD ID 'OI3 ' must be output.
"DATA",364.7,1028,0)
1312^N^101^^^^N
"DATA",364.7,1028,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) D ELMADDR^IBCEF7(IBXIEN,0,.Z) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=$S($G(Z(Z0))'="":IBXSAVE(1,Z),1:"") D:Z0>1&(IBXDATA(Z0)'="") ID^IBCEF2(Z0,"OI4 ")
"DATA",364.7,1028,3,0)
^364.73^7^7^3030929^^^^
"DATA",364.7,1028,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1028,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) variable
"DATA",364.7,1028,3,3,0)
holds the indicator of which insurance [(P)rimary/(S)econdary/(T)ertiary] is
"DATA",364.7,1028,3,4,0)
currently responsible for the bill.  Using this data as a guide, the next
"DATA",364.7,1028,3,5,0)
insurance for the primary is secondary, then tertiary.  For secondary, it's
"DATA",364.7,1028,3,6,0)
primary then tertiary, and for tertiary, it's primary, then secondary. For
"DATA",364.7,1028,3,7,0)
other than the first occurrence, the RECORD ID 'OI4 ' must be output.
"DATA",364.7,1029,0)
1313^N^101^^^^N
"DATA",364.7,1029,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI5 ")
"DATA",364.7,1029,3,0)
^364.73^7^7^3040728^^^^
"DATA",364.7,1029,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1029,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) variable
"DATA",364.7,1029,3,3,0)
holds the indicator of which insurance [(P)rimary/(S)econdary/(T)ertiary] is
"DATA",364.7,1029,3,4,0)
currently responsible for the bill.  Using this data as a guide, the next
"DATA",364.7,1029,3,5,0)
insurance for the primary is secondary, then tertiary.  For secondary, it's
"DATA",364.7,1029,3,6,0)
primary then tertiary, and for tertiary, it's primary, then secondary. For
"DATA",364.7,1029,3,7,0)
other than the first occurrence, the RECORD ID 'OI5 ' must be output.
"DATA",364.7,1030,0)
1314^N^101^^^^N
"DATA",364.7,1030,1)
N IBZ,Z,Z0,Z1 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S Z1=0 F Z0=1:1:3 I $D(IBXSAVE(1,Z0)) S Z1=Z1+1,IBXDATA(Z1)="QC"
"DATA",364.7,1030,3,0)
^364.73^2^2^3030916^^^^
"DATA",364.7,1030,3,1,0)
If the previous extract returned a value for ibxdata then the
"DATA",364.7,1030,3,2,0)
QC modifier is needed here.
"DATA",364.7,1031,0)
1315^N^235
"DATA",364.7,1031,1)
I $D(IBXDATA) S IBXDATA=$$SOP^IBCEP2B(IBXIEN,IBXDATA)
"DATA",364.7,1031,3,0)
^364.73^1^1^3031210^^^
"DATA",364.7,1031,3,1,0)
This is the X12 interpretation of the type of billing provider id for this insurance co.  It is calculated from the electronic type of plan. Refer to the 837 V4010 (professional) fields 2010BB/REF(2)/01 and 2000B/SBR/09 for details.
"DATA",364.7,1032,0)
1316^N^127^^^^N
"DATA",364.7,1032,1)
S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA) I $D(IBXDATA),$$FT^IBCEF(IBXIEN)=2 N IBZ S IBZ=$$WNRBILL^IBEFUNC(IBXIEN,+$$COBN^IBCEF(IBXIEN)) S:IBZ IBXDATA="VA0"_+$$SITE^VASITE()
"DATA",364.7,1032,3,0)
^364.73^1^1^3031210^^^^
"DATA",364.7,1032,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will already exist.  Don't want to extract this field again, so kill data element so there is no output.
"DATA",364.7,1033,0)
1317^^235
"DATA",364.7,1033,1)
I $D(IBXDATA) S IBXDATA=$S(IBXDATA="":"G2","MAMB16MX"[IBXDATA:"1C",IBXDATA="MC":"1D",IBXDATA="BL":$S($$FT^IBCEF(IBXIEN)=2:"1B",1:"1A"),IBXDATA="CH":"1H",1:"G2")
"DATA",364.7,1033,3,0)
^364.73^2^2^3040114^^
"DATA",364.7,1033,3,1,0)
This is the correct modifier for the new EDI enhancement format
"DATA",364.7,1033,3,2,0)
mapped to 2010AA loop
"DATA",364.7,1034,0)
973^N^5^^^^N
"DATA",364.7,1034,1)
N IBT,IBZ S IBT=$S($$FT^IBCEF(IBXIEN)=2:3,1:4) D GETPRV^IBCEU(IBXIEN,IBT,.IBZ) I $G(IBZ(IBT,1))'="" S IBXDATA=$S($P($G(IBZ(IBT,1)),U,3)'["355.93,":1,1:2)
"DATA",364.7,1034,3,0)
^364.73^2^2^3040505^^^
"DATA",364.7,1034,3,1,0)
Get the rendering/attending provider id info.  If facility provider,
"DATA",364.7,1034,3,2,0)
output 2 for non-person or 1 for person.
"DATA",364.7,1035,0)
1318^N^5
"DATA",364.7,1035,1)
N IBZ D GETPRV^IBCEU(IBXIEN,1,.IBZ) I $G(IBZ(1,1))'="" S IBXDATA=$S($P($G(IBZ(1,1)),U,3)'["355.93,":1,1:2)
"DATA",364.7,1035,3,0)
^^2^2^3040505^
"DATA",364.7,1035,3,1,0)
Get the referring provider id info.  If facility provider, output 2 for
"DATA",364.7,1035,3,2,0)
non-person or 1 for person.
"DATA",364.7,1036,0)
1319^N^5
"DATA",364.7,1036,1)
N IBZ D GETPRV^IBCEU(IBXIEN,2,.IBZ) I $G(IBZ(2,1))'="" S IBXDATA=$S($P($G(IBZ(2,1)),U,3)'["355.93,":1,1:2)
"DATA",364.7,1036,3,0)
^364.73^2^2^3040505^^
"DATA",364.7,1036,3,1,0)
Get the operating provider id info.  If facility provider, output 2 for
"DATA",364.7,1036,3,2,0)
non-person or 1 for person.
"DATA",364.7,1037,0)
990^N^5^^^^N
"DATA",364.7,1037,1)
N IBZ D GETPRV^IBCEU(IBXIEN,9,.IBZ) I $G(IBZ(9,1))'="" S IBXDATA=$S($P($G(IBZ(9,1)),U,3)'["355.93,":1,1:2)
"DATA",364.7,1037,3,0)
^364.73^2^2^3040505^^
"DATA",364.7,1037,3,1,0)
Get the other provider id info.  If facility provider, output 2 for
"DATA",364.7,1037,3,2,0)
non-person or 1 for person.
"DATA",364.7,1038,0)
1320^N^5
"DATA",364.7,1038,1)
N A,L,Z S L=0 F  S L=$O(^TMP("IBXDATA",$J,IBXREC,IBXPG,L)) Q:'L  S A=0 X "S Z=2 F  S Z=$O(^TMP(""IBXDATA"",$J,IBXREC,IBXPG,L,Z)) Q:'Z  I $G(^(Z))'="""" S A=1 Q" I 'A K ^TMP("IBXDATA",$J,IBXREC,IBXPG,L)
"DATA",364.7,1038,3,0)
^364.73^2^2^3040706^^
"DATA",364.7,1038,3,1,0)
Check all the data elements on the record.  If all but the 1st and second
"DATA",364.7,1038,3,2,0)
are null, force a null into the second element so no output occurs.
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)
 
"FIA",2,0,11)
 
"FIA",2,0,"RLRO")
 
"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,16)
 
"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^n^p^^^^n^^n
"FIA",36,0,10)
 
"FIA",36,0,11)
 
"FIA",36,0,"RLRO")
 
"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,4.01)
 
"FIA",36,36,4.02)
 
"FIA",36,36,4.03)
 
"FIA",36,36,4.04)
 
"FIA",36,36,4.05)
 
"FIA",36,36,4.06)
 
"FIA",36,36,4.07)
 
"FIA",36,36,4.08)
 
"FIA",36,36,4.1)
 
"FIA",36,36,4.11)
 
"FIA",350.8)
IB ERROR
"FIA",350.8,0)
^IBE(350.8,
"FIA",350.8,0,0)
350.8I
"FIA",350.8,0,1)
y^n^f^^n^^y^o^n
"FIA",350.8,0,10)
 
"FIA",350.8,0,11)
I $F(".IB086.IB087.IB094.IB121.IB308.IB315.IB321.IB322.IB323.","."_$P($G(^IBE(350.8,+Y,0)),U,1)_".")
"FIA",350.8,0,"RLRO")
 
"FIA",350.8,0,"VR")
2.0^IB
"FIA",350.8,350.8)
0
"FIA",355.9)
IB BILLING PRACTITIONER ID
"FIA",355.9,0)
^IBA(355.9,
"FIA",355.9,0,0)
355.9IV
"FIA",355.9,0,1)
y^n^p^^^^n^^n
"FIA",355.9,0,10)
 
"FIA",355.9,0,11)
 
"FIA",355.9,0,"RLRO")
 
"FIA",355.9,0,"VR")
2.0^IB
"FIA",355.9,355.9)
1
"FIA",355.9,355.9,.03)
 
"FIA",355.91)
IB INSURANCE CO LEVEL BILLING PROV ID
"FIA",355.91,0)
^IBA(355.91,
"FIA",355.91,0,0)
355.91IP
"FIA",355.91,0,1)
y^n^p^^^^n^^n
"FIA",355.91,0,10)
 
"FIA",355.91,0,11)
 
"FIA",355.91,0,"RLRO")
 
"FIA",355.91,0,"VR")
2.0^IB
"FIA",355.91,355.91)
1
"FIA",355.91,355.91,.03)
 
"FIA",355.92)
FACILITY BILLING ID
"FIA",355.92,0)
^IBA(355.92,
"FIA",355.92,0,0)
355.92P
"FIA",355.92,0,1)
y^n^f^^^^n
"FIA",355.92,0,10)
 
"FIA",355.92,0,11)
 
"FIA",355.92,0,"RLRO")
 
"FIA",355.92,0,"VR")
2.0^IB
"FIA",355.92,355.92)
0
"FIA",355.93)
IB NON/OTHER VA BILLING PROVIDER
"FIA",355.93,0)
^IBA(355.93,
"FIA",355.93,0,0)
355.93I
"FIA",355.93,0,1)
y^n^p^^^^n^^n
"FIA",355.93,0,10)
 
"FIA",355.93,0,11)
 
"FIA",355.93,0,"RLRO")
 
"FIA",355.93,0,"VR")
2.0^IB
"FIA",355.93,355.93)
1
"FIA",355.93,355.93,.01)
 
"FIA",355.93,355.93,.02)
 
"FIA",355.93,355.93,.1)
 
"FIA",355.93,355.93,.11)
 
"FIA",355.93,355.93,.12)
 
"FIA",355.97)
IB PROVIDER ID # TYPE
"FIA",355.97,0)
^IBE(355.97,
"FIA",355.97,0,0)
355.97I
"FIA",355.97,0,1)
y^n^f^^y^^y^o^n
"FIA",355.97,0,10)
 
"FIA",355.97,0,11)
I $$INCLUDE^IBY232PR(97,Y)
"FIA",355.97,0,"RLRO")
 
"FIA",355.97,0,"VR")
2.0^IB
"FIA",355.97,355.97)
0
"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^y^^y^o^n
"FIA",364.5,0,10)
 
"FIA",364.5,0,11)
I $$INCLUDE^IBY232PR(5,Y)
"FIA",364.5,0,"RLRO")
 
"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
y^n^f^^y^^y^o^n
"FIA",364.6,0,10)
 
"FIA",364.6,0,11)
I $$INCLUDE^IBY232PR(6,Y)
"FIA",364.6,0,"RLRO")
 
"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
y^n^f^^y^^y^o^n
"FIA",364.7,0,10)
 
"FIA",364.7,0,11)
I $$INCLUDE^IBY232PR(7,Y)
"FIA",364.7,0,"RLRO")
 
"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^n^p^^^^n^^n
"FIA",399,0,10)
 
"FIA",399,0,11)
 
"FIA",399,0,"RLRO")
 
"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399,.22)
 
"FIA",399,399,101)
 
"FIA",399,399,102)
 
"FIA",399,399,103)
 
"FIA",399,399,222)
 
"FIA",399,399,232)
 
"FIA",399,399.0222)
1
"FIA",399,399.0222,.01)
 
"FIA",399,399.0222,.02)
 
"FIA",399,399.0222,.05)
 
"FIA",399,399.0222,.06)
 
"FIA",399,399.0222,.07)
 
"FIA",399,399.0222,.09)
 
"FIA",399,399.0222,.1)
 
"FIA",399,399.0222,.11)
 
"FIA",399,399.0222,.12)
 
"FIA",399,399.0222,.13)
 
"FIA",399,399.0222,.14)
 
"FIA",399,399.0222,1.01)
 
"FIA",399,399.0222,1.02)
 
"FIA",399,399.0222,1.03)
 
"INI")
IBY232PR
"INIT")
IBY232PO
"IX",355.9,355.9,"AG",0)
355.9^AG^WEFRWQ^MU^^R^IR^I^355.9^^^^^S
"IX",355.9,355.9,"AG",1)
S ^IBA(355.9,"AG",$S(X2(2)="":"ALL",1:X2(2)),$S(X2(3)="":"TBD",1:X2(3)),DA)=""
"IX",355.9,355.9,"AG",1.4)
I X2(1)="" S X=0
"IX",355.9,355.9,"AG",2)
K ^IBA(355.9,"AG",$S(X1(2)="":"ALL",1:X1(2)),$S(X1(3)="":"TBD",1:X1(3)),DA)
"IX",355.9,355.9,"AG",11.1,0)
^.114IA^3^3
"IX",355.9,355.9,"AG",11.1,1,0)
1^F^355.9^.01^^^F
"IX",355.9,355.9,"AG",11.1,2,0)
2^F^355.9^.02^^^F
"IX",355.9,355.9,"AG",11.1,3,0)
3^F^355.9^.03^^^F
"IX",355.92,355.92,"AID",0)
355.92^AID^Xref by insurance co and division^MU^^R^IR^I^355.92^^^^^A
"IX",355.92,355.92,"AID",1)
S ^IBA(355.92,"AID",+X(1),+X(2),DA)=""
"IX",355.92,355.92,"AID",2)
K ^IBA(355.92,"AID",+X(1),+X(2),DA)
"IX",355.92,355.92,"AID",2.5)
K ^IBA(355.92,"AID")
"IX",355.92,355.92,"AID",11.1,0)
^.114IA^2^2
"IX",355.92,355.92,"AID",11.1,1,0)
1^F^355.92^.01^^^F
"IX",355.92,355.92,"AID",11.1,1,3)
 
"IX",355.92,355.92,"AID",11.1,2,0)
2^F^355.92^.05^^^F
"IX",355.92,355.92,"AID",11.1,2,3)
 
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"IX",399,399,"AUPDID",0)
399^AUPDID^UPDATE PROVIDER ID WHEN DATA FIELDS CHANGE AT TOP LEVEL OF FILE^MU^^R^IR^I^399^^^^^A
"IX",399,399,"AUPDID",.1,0)
^^5^5^3010109^
"IX",399,399,"AUPDID",.1,1,0)
This cross reference maintains the integrity of the rendering or attending
"IX",399,399,"AUPDID",.1,2,0)
provider id whenever an insurance company is added, deleted or changed
"IX",399,399,"AUPDID",.1,3,0)
on the claim.  If either of these provider functions exist on the bill,
"IX",399,399,"AUPDID",.1,4,0)
this cross reference sets the default id data based on the insurance co's
"IX",399,399,"AUPDID",.1,5,0)
parameters.
"IX",399,399,"AUPDID",1)
D:X1(1)'=X2(1)!(X1(5)'=X2(5)) SETID^IBCEP3(DA,1) D:X1(2)'=X2(2)!(X1(4)'=X2(4)) SETID^IBCEP3(DA,2) D:X1(3)'=X2(3)!(X1(6)'=X2(6)) SETID^IBCEP3(DA,3)
"IX",399,399,"AUPDID",1.4)
S X=$S($O(^DGCR(399,DA,"PRV",0)):1,1:0)
"IX",399,399,"AUPDID",2)
D:X1(1)'=X2(1)!(X1(5)'=X2(5)) DELID^IBCEP3(DA,1) D:X1(2)'=X2(2)!(X1(4)'=X2(4)) DELID^IBCEP3(DA,2) D:X1(3)'=X2(3)!(X1(6)'=X2(6)) DELID^IBCEP3(DA,3)
"IX",399,399,"AUPDID",2.4)
S X=$S($O(^DGCR(399,DA,"PRV",0)):1,1:0)
"IX",399,399,"AUPDID",11.1,0)
^.114IA^6^6
"IX",399,399,"AUPDID",11.1,1,0)
1^F^399^101^^^F
"IX",399,399,"AUPDID",11.1,2,0)
2^F^399^102^^^F
"IX",399,399,"AUPDID",11.1,3,0)
3^F^399^103^^^F
"IX",399,399,"AUPDID",11.1,4,0)
4^F^399^113^^^F
"IX",399,399,"AUPDID",11.1,5,0)
5^F^399^112^^^F
"IX",399,399,"AUPDID",11.1,5,3)
 
"IX",399,399,"AUPDID",11.1,6,0)
6^F^399^114^^^F
"IX",399,399,"AUPDID",11.1,6,3)
 
"IX",399,399.0222,"AUPDID1",0)
399.0222^AUPDID1^UPDATE PRIMARY PROVIDER ID WHEN DATA FIELDS CHANGE AT PROVIDER LEVEL OF FILE^MU^^F^^I^399.0222^^^^^A
"IX",399,399.0222,"AUPDID1",.1,0)
^^6^6^3040518^
"IX",399,399.0222,"AUPDID1",.1,1,0)
This cross reference maintains the integrity of the rendering or
"IX",399,399.0222,"AUPDID1",.1,2,0)
attending provider id whenever the primary insurance company care unit is
"IX",399,399.0222,"AUPDID1",.1,3,0)
added, deleted or changed on the claim.  If a valid provider number can be
"IX",399,399.0222,"AUPDID1",.1,4,0)
determined by the new value of the care unit, this id # is placed in the
"IX",399,399.0222,"AUPDID1",.1,5,0)
primary id field.  If no valid id can be determined for the provider, the
"IX",399,399.0222,"AUPDID1",.1,6,0)
primary id field for the provider is deleted.
"IX",399,399.0222,"AUPDID1",1)
D:X1(1)'=X2(1) SETID^IBCEP3(DA(1),1)
"IX",399,399.0222,"AUPDID1",2)
D:X1(1)'=X2(1)&(X(1)'="") DELID^IBCEP3(DA(1),1,1)
"IX",399,399.0222,"AUPDID1",2.5)
Q
"IX",399,399.0222,"AUPDID1",11.1,0)
^.114IA^1^1
"IX",399,399.0222,"AUPDID1",11.1,1,0)
1^F^399.0222^.09^^^F
"IX",399,399.0222,"AUPDID2",0)
399.0222^AUPDID2^UPDATE SECONDARY PROVIDER ID WHEN DATA FIELDS CHANGE AT PROVIDER LEVEL OF FILE^MU^^F^^I^399.0222^^^^^A
"IX",399,399.0222,"AUPDID2",.1,0)
^^6^6^3040518^
"IX",399,399.0222,"AUPDID2",.1,1,0)
This cross reference maintains the integrity of the rendering or 
"IX",399,399.0222,"AUPDID2",.1,2,0)
attending provider id whenever the secondary insurance company care unit
"IX",399,399.0222,"AUPDID2",.1,3,0)
is added, deleted or changed on the claim.  If a valid provider number can
"IX",399,399.0222,"AUPDID2",.1,4,0)
be determined by the new value of the care unit, this id # is placed in
"IX",399,399.0222,"AUPDID2",.1,5,0)
the secondary id field.  If no valid id can be determined for the
"IX",399,399.0222,"AUPDID2",.1,6,0)
provider, the secondary id field for the provider is deleted.
"IX",399,399.0222,"AUPDID2",1)
D:X1(1)'=X2(1) SETID^IBCEP3(DA(1),2)
"IX",399,399.0222,"AUPDID2",2)
D:X1(1)'=X2(1) DELID^IBCEP3(DA(1),2,1)
"IX",399,399.0222,"AUPDID2",2.5)
Q
"IX",399,399.0222,"AUPDID2",11.1,0)
^.114IA^1^1
"IX",399,399.0222,"AUPDID2",11.1,1,0)
1^F^399.0222^.1^^^F
"IX",399,399.0222,"AUPDID2",11.1,1,3)
 
"IX",399,399.0222,"AUPDID3",0)
399.0222^AUPDID3^UPDATE TERTIARY PROVIDER ID WHEN DATA FIELDS CHANGE AT PROVIDER LEVEL OF FILE^MU^^F^^I^399.0222^^^^^A
"IX",399,399.0222,"AUPDID3",.1,0)
^^6^6^3040518^
"IX",399,399.0222,"AUPDID3",.1,1,0)
This cross reference maintains the integrity of the rendering or attending
"IX",399,399.0222,"AUPDID3",.1,2,0)
provider id whenever the tertiary insurance company care unit is added,
"IX",399,399.0222,"AUPDID3",.1,3,0)
deleted or changed on the claim.  If a valid provider number can be
"IX",399,399.0222,"AUPDID3",.1,4,0)
determined by the new value of the care unit, this id # is placed in the
"IX",399,399.0222,"AUPDID3",.1,5,0)
tertiary id field.  If no valid id can be determined for the provider, the
"IX",399,399.0222,"AUPDID3",.1,6,0)
tertiary id field for the provider is deleted.
"IX",399,399.0222,"AUPDID3",1)
D:X1(1)'=X2(1) SETID^IBCEP3(DA(1),3)
"IX",399,399.0222,"AUPDID3",2)
D:X1(1)'=X2(1) DELID^IBCEP3(DA(1),3,1)
"IX",399,399.0222,"AUPDID3",2.5)
Q
"IX",399,399.0222,"AUPDID3",11.1,0)
^.114IA^1^1
"IX",399,399.0222,"AUPDID3",11.1,1,0)
1^F^399.0222^.11^^^F
"IX",399,399.0222,"AUPDID3",11.1,1,3)
 
"KRN",.402,1080,-1)
0^1
"KRN",.402,1080,0)
IB SCREEN8H^3040618.1022^@^399^^@^3040721
"KRN",.402,1080,"DIAB",1,0,399,1)
163;"PRIMARY AUTHORIZATION CODE"
"KRN",.402,1080,"DIAB",1,0,399,3)
232:
"KRN",.402,1080,"DIAB",4,1,399.0222,5)
.12;T;REQ
"KRN",.402,1080,"DIAB",5,0,399,4)
D ASK19^IBCEU3(DA);X
"KRN",.402,1080,"DIAB",5,1,399.0222,5)
.05;T
"KRN",.402,1080,"DIAB",8,0,399,0)
453;T
"KRN",.402,1080,"DIAB",8,1,399.0222,5)
.13;T;REQ
"KRN",.402,1080,"DIAB",9,1,399.0222,5)
.06;T
"KRN",.402,1080,"DIAB",10,0,399,0)
454;T
"KRN",.402,1080,"DIAB",12,1,399.0222,5)
.14;T;REQ
"KRN",.402,1080,"DIAB",13,1,399.0222,5)
.07;T
"KRN",.402,1080,"DR",1,399)
K DIPA S DIPA("I1")=$D(^DGCR(399,DA,"I1")),DIPA("I2")=$D(^("I2")),DIPA("I3")=$D(^("I3"));S:IBDR20'["81" Y="@82";166;167;@82;S:IBDR20'["82" Y="@83";215;453T~;S:'DIPA("I2") Y="@825";454T~;S:'DIPA("I3") Y="@825";455;@825;
"KRN",.402,1080,"DR",1,399,1)
163PRIMARY AUTHORIZATION CODE~;S:'DIPA("I2") Y="@83";230;S:'DIPA("I3") Y="@83";231;@83;S:IBDR20'["83" Y="@84";222;@84;S:IBDR20'["84" Y="@85";232;S DIPA("NVA_FC")=X S:X="" Y="@842";
"KRN",.402,1080,"DR",1,399,2)
S DIPA("NVA_FC-0")=$G(^IBA(355.93,+DIPA("NVA_FC"),0)) S:$P(DIPA("NVA_FC-0"),U,5)'=""&($P(DIPA("NVA_FC-0"),U,6)'="")&($P(DIPA("NVA_FC-0"),U,7)'="") Y="@841";
"KRN",.402,1080,"DR",1,399,3)
^355.93^IBA(355.93,^^S I(0,0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,10),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");@841;233;234;@842;S:"24"'[$P($G(^DGCR(399,DA,"U2")),U,11) Y="@85";
"KRN",.402,1080,"DR",1,399,4)
235//^S X=$$CLIANVA^IBCEP8(DA);@85;S:IBDR20'["85" Y="@86";459;D ASK19^IBCEU3(DA);236;237;238//^S X=$S($$WNRBILL^IBEFUNC(DA):"31",1:"");@86;S:IBDR20'["86" Y="@99";I $$NSAME^IBCSC8H(DA) S Y="@861";401;@861;
"KRN",.402,1080,"DR",1,399,5)
I '$P($G(^DGCR(399,DA,"TX")),U,8),'$$TXMT^IBCEF4(DA) S Y="@862";27//NO;@862;@99;
"KRN",.402,1080,"DR",2,355.93)
.05;.1;.06;.07;.08;
"KRN",.402,1080,"DR",2,399.0222)
.01;S DIPA("RF")=X S:$D(^XUSEC("IB PROVIDER EDIT",DUZ)) DLAYGO=355.93;.02;K DLAYGO S DIPA("PRF")=X S:X="" Y="@98";
"KRN",.402,1080,"DR",2,399.0222,1)
N Z S Z=$$EXPAND^IBTRE(399.0222,.08,$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,8)),DIPA("SPC")=$S(Z'="":Z,1:"UNSPECIFIED") W !,"    Prov Specialty On File: ",DIPA("SPC");S DIPA("CRD")=$$CRED^IBCEU($P(^DGCR(399,DA(1),"PRV",DA,0),U,2));
"KRN",.402,1080,"DR",2,399.0222,2)
.03;K DIPA("W1") S:$G(DIPA("CRD"))'=$P(^DGCR(399,DA(1),"PRV",DA,0),U,3) DIPA("W1")=1;I $G(DIPA("W1")) D WRT1^IBCSC8H($G(DIPA("CRD")));K DIPA("W1");I '$G(DIPA("I1")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,3)
D PROVID^IBCEP2B(DA(1),DA,1,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8382",DIPA("EDIT")=1:"@8391",DIPA("EDIT")=2:"@8371",1:"");@8382;I '$G(DIPA("I2")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,4)
D PROVID^IBCEP2B(DA(1),DA,2,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8383",DIPA("EDIT")=1:"@8392",DIPA("EDIT")=2:"@8372",1:"");@8383;I '$G(DIPA("I3")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,5)
D PROVID^IBCEP2B(DA(1),DA,3,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8305",DIPA("EDIT")=1:"@8393",DIPA("EDIT")=2:"@8373",1:"");S Y="@8305";@8391;.12R~T~;.05T~;S Y="@8382";@8392;.13R~T~;.06T~;S Y="@8383";@8393;.14R~T~;.07T~;S Y="@8305";@8371;
"KRN",.402,1080,"DR",2,399.0222,6)
.12////^S X=DIPA("PRIDT");.05////^S X=DIPA("PRID");S Y="@8382";@8372;.13////^S X=DIPA("PRIDT");.06////^S X=DIPA("PRID");S Y="@8383";@8373;.14////^S X=DIPA("PRIDT");.07////^S X=DIPA("PRID");S Y="@8305";@8305;@98;W @IOF;
"KRN",.402,1080,"ROU")
^IBXSC8H
"KRN",.402,1080,"ROUOLD")
IBXSC8H
"KRN",.402,1276)
 
"KRN",.402,1276,-1)
0^3
"KRN",.402,1276,0)
IBEDIT INS CO1^3040616.085^^36^^^3040714
"KRN",.402,1276,"DIAB",1,0,36,1)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,1276,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,1276,"DIAB",2,0,36,3)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,1276,"DIAB",4,0,36,5)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,1276,"DIAB",8,0,36,1)
4.01;T
"KRN",.402,1276,"DIAB",9,0,36,1)
4.02;T
"KRN",.402,1276,"DIAB",11,0,36,2)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,1276,"DIAB",15,0,36,4)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,1276,"DIAB",20,0,36,0)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,1276,"DIAB",22,0,36,3)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,1276,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;3.03;.12;.14;.13;3.09;.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;3.01;S DIPA("IBTX")=X S:DIPA("IBTX")'=2 Y="@17";
"KRN",.402,1276,"DR",1,36,1)
3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@17;I '$G(DIPA("IBTX")) S Y="@18";3.02;3.04;@18;S:",6,12,"'[IBY Y="@181";4.01T~;4.02T~;4.03;4.09;@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";
"KRN",.402,1276,"DR",1,36,2)
.113;@1;.114;.115;.116;.131;.119;S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;
"KRN",.402,1276,"DR",1,36,3)
S:",10,6,"'[IBY Y="@80";.168T~;S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@80;S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;
"KRN",.402,1276,"DR",1,36,4)
S:X="" Y="@6";.182;S:X="" Y="@6";.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;
"KRN",.402,1276,"DR",1,36,5)
S:IBY["4" Y="@99";@40;S:",5,6,"'[IBY Y="@60";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;S:IBY["5" Y="@99";@60;S:",7,6,"'[IBY Y="@50";3.1;@50;
"KRN",.402,1276,"DR",1,36,6)
S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,1276,"DR",2,36.03)
.01
"KRN",.402,1316,-1)
0^2
"KRN",.402,1316,0)
IB SCREEN82^3040618.1021^@^399^^@^3040618
"KRN",.402,1316,"DIAB",1,0,399,4)
232:
"KRN",.402,1316,"DIAB",4,0,399,0)
453;T
"KRN",.402,1316,"DIAB",4,1,399.0222,5)
.12;T;REQ
"KRN",.402,1316,"DIAB",5,1,399.0222,5)
.05;T
"KRN",.402,1316,"DIAB",6,0,399,0)
454;T
"KRN",.402,1316,"DIAB",8,0,399,0)
455;T
"KRN",.402,1316,"DIAB",8,1,399.0222,5)
.13;T;REQ
"KRN",.402,1316,"DIAB",9,1,399.0222,5)
.06;T
"KRN",.402,1316,"DIAB",10,0,399,0)
163;"PRIMARY AUTHORIZATION CODE"
"KRN",.402,1316,"DIAB",12,1,399.0222,5)
.14;T;REQ
"KRN",.402,1316,"DIAB",13,1,399.0222,5)
.07;T
"KRN",.402,1316,"DR",1,399)
K DIPA S DIPA("I1")=$D(^DGCR(399,DA,"I1")),DIPA("I2")=$D(^("I2")),DIPA("I3")=$D(^("I3"));S:IBDR20'["81" Y="@82";208;453T~;S:'DIPA("I2") Y="@8111";454T~;S:'DIPA("I3") Y="@8111";455T~;@8111;163PRIMARY AUTHORIZATION CODE~;
"KRN",.402,1316,"DR",1,399,1)
S:'DIPA("I2") Y="@811";230;S:'DIPA("I3") Y="@811";231;@811;215;159;@82;S:IBDR20'["82" Y="@83";222;@83;S:IBDR20'["83" Y="@84";450;451;@84;S:IBDR20'["84" Y="@85";452;@85;S:IBDR20'["85" Y="@86";456;458;@86;S:IBDR20'["86" Y="@87";
"KRN",.402,1316,"DR",1,399,2)
I '$P($G(^DGCR(399,DA,"TX")),U,8),'$$TXMT^IBCEF4(IBIFN) S Y="@861";27//NO FORCED PRINT;@861;@87;S:IBDR20'["87" Y="@88";@88;S:IBDR20'["88" Y="@89";232;S DIPA("NVA_FC")=X S:DIPA("NVA_FC")="" Y="@882";
"KRN",.402,1316,"DR",1,399,3)
S DIPA("NVA_FC-0")=$G(^IBA(355.93,+DIPA("NVA_FC"),0)) S:$P(DIPA("NVA_FC-0"),U,5)'=""&($P(DIPA("NVA_FC-0"),U,6)'="")&($P(DIPA("NVA_FC-0"),U,7)'="") Y="@881";
"KRN",.402,1316,"DR",1,399,4)
^355.93^IBA(355.93,^^S I(0,0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,10),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");@881;233;@882;@89;
"KRN",.402,1316,"DR",2,355.93)
.05;.1;.06;.07;.08;
"KRN",.402,1316,"DR",2,399.0222)
.01;S DIPA("RF")=X S:$D(^XUSEC("IB PROVIDER EDIT",DUZ)) DLAYGO=355.93;.02;K DLAYGO S DIPA("PRF")=X S:DIPA("PRF")="" Y="@98";
"KRN",.402,1316,"DR",2,399.0222,1)
N Z S Z=$$EXPAND^IBTRE(399.0222,.08,$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,8)),DIPA("SPC")=$S(Z'="":Z,1:"UNSPECIFIED") W !,"    Prov Specialty On File: ",DIPA("SPC");
"KRN",.402,1316,"DR",2,399.0222,2)
S DIPA("CRD")=$$CRED^IBCEU($P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,2));.03;K DIPA("W1") S:$G(DIPA("CRD"))'=$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,3) DIPA("W1")=1;I $G(DIPA("W1")) D WRT1^IBCSC8H($G(DIPA("CRD")));K DIPA("W1");
"KRN",.402,1316,"DR",2,399.0222,3)
I '$G(DIPA("I1")) S Y="@8205";D PROVID^IBCEP2B(DA(1),DA,1,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8282",DIPA("EDIT")=1:"@8291",DIPA("EDIT")=2:"@8271",1:"");@8282;I '$G(DIPA("I2")) S Y="@8205";
"KRN",.402,1316,"DR",2,399.0222,4)
D PROVID^IBCEP2B(DA(1),DA,2,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8283",DIPA("EDIT")=1:"@8292",DIPA("EDIT")=2:"@8272",1:"");@8283;I '$G(DIPA("I3")) S Y="@8205";
"KRN",.402,1316,"DR",2,399.0222,5)
D PROVID^IBCEP2B(DA(1),DA,3,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8205",DIPA("EDIT")=1:"@8293",DIPA("EDIT")=2:"@8273",1:"");S Y="@8205";@8291;.12R~T~;.05T~;S Y="@8282";@8292;.13R~T~;.06T~;S Y="@8283";@8293;.14R~T~;.07T~;S Y="@8205";@8271;
"KRN",.402,1316,"DR",2,399.0222,6)
.12////^S X=DIPA("PRIDT");.05////^S X=DIPA("PRID");S Y="@8282";@8272;.13////^S X=DIPA("PRIDT");.06////^S X=DIPA("PRID");S Y="@8283";@8273;.14////^S X=DIPA("PRIDT");.07////^S X=DIPA("PRID");S Y="@8205";@8205;@98;W @IOF;
"KRN",.402,1316,"ROU")
^IBXSC82
"KRN",.402,1316,"ROUOLD")
IBXSC82
"KRN",3.8,280,-1)
0^1
"KRN",3.8,280,0)
MCH^PU^y^^^^
"KRN",3.8,280,2,0)
^3.801^1^1^3040603^^^^
"KRN",3.8,280,2,1,0)
New Test que for HIPAA EDI Enhancements
"KRN",3.8,280,3)
 
"KRN",3.8,280,6,0)
^3.812^^0
"KRN",19,12075,-1)
0^1
"KRN",19,12075,0)
IBCE PROVIDER ID QUERY^Provider ID Query^^R^^^^^^^^
"KRN",19,12075,1,0)
^19.06^13^13^3040608^^^^
"KRN",19,12075,1,1,0)
This option allows the site to run or re-run the provider id query report
"KRN",19,12075,1,2,0)
to report some of the invalid provider id set ups for insurance companies.
"KRN",19,12075,1,3,0)
 
"KRN",19,12075,1,4,0)
CONDITIONS TO IDENTIFY:
"KRN",19,12075,1,5,0)
 1-BLUE CROSS LINKED TO HCFA ONLY (1) THE ONLY HARD ERROR
"KRN",19,12075,1,6,0)
 2-BLUE SHIELD LINKED TO UB92 ONLY (2) WARNING
"KRN",19,12075,1,7,0)
 3-BLUE CROSS ID APPLIED TO BOTH FORMS (0) WARNING
"KRN",19,12075,1,8,0)
 4-BLUE CROSS OR BLUE SHIELD IDs EXIST FOR AN INS CO, BUT ONE OR
"KRN",19,12075,1,9,0)
   MORE OF THE INSURANCE COMPANY'S PLANS DOES NOT HAVE AN
"KRN",19,12075,1,10,0)
   ELECTRONIC PLAN TYPE OF 'BL'
"KRN",19,12075,1,11,0)
 5-NON BLUE CROSS/SHIELD ID FOR AN INS COMPANY WITH BLUE PLAN(S)
"KRN",19,12075,1,12,0)
 6-VAD000 as an ID but not flagged as a UPIN
"KRN",19,12075,1,13,0)
 
"KRN",19,12075,25)
EN^IBCEQ1
"KRN",19,12075,"U")
PROVIDER ID QUERY
"KRN",101,3293,-1)
0^1
"KRN",101,3293,0)
IBCE PRVFAC EDIT^Add/Edit/Delete^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3293,20)
D EDIT1^IBCEP7
"KRN",101,3293,99)
59667,33001
"KRN",409.61,546,-1)
0^1
"KRN",409.61,546,0)
IBCE PRVFAC MAINT^1^^80^4^18^1^1^Facility ID^IBCE PRVFAC MAINT^FACILITY IDs^1^^1
"KRN",409.61,546,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,546,"ARRAY")
 ^TMP("IBCE_PRVFAC_MAINT",$J)
"KRN",409.61,546,"COL",0)
^409.621^3^3
"KRN",409.61,546,"COL",1,0)
PTYPE^6^25^Facility ID Type
"KRN",409.61,546,"COL",2,0)
PID^34^15^ID #
"KRN",409.61,546,"COL",3,0)
SPEC^51^28^Form Type
"KRN",409.61,546,"COL","B","PID",2)
 
"KRN",409.61,546,"COL","B","PTYPE",1)
 
"KRN",409.61,546,"COL","B","SPEC",3)
 
"KRN",409.61,546,"EXP")
D EXPND^IBCEP7
"KRN",409.61,546,"FNL")
D EXIT^IBCEP7
"KRN",409.61,546,"HDR")
D HDR^IBCEP7
"KRN",409.61,546,"HLP")
D HELP^IBCEP7
"KRN",409.61,546,"INIT")
D INIT^IBCEP7
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)
 
"PKG",200,20,"B",2,1)
 
"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
232^3040728
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3040728
"PKG",200,22,1,"PAH",1,1,1,0)
EDI/ENHANCEMENTS HIPAA COMPLIANCE
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")
 
"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
45
"RTN","IBCBB1")
0^12^B57235568
"RTN","IBCBB1",1,0)
IBCBB1 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
"RTN","IBCBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232**;21-MAR-94
"RTN","IBCBB1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCBB1",4,0)
 ;
"RTN","IBCBB1",5,0)
 ;MAP TO DGCRBB1
"RTN","IBCBB1",6,0)
 ;
"RTN","IBCBB1",7,0)
% ;Bill Status
"RTN","IBCBB1",8,0)
 N Z,Z0,Z1
"RTN","IBCBB1",9,0)
 I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
"RTN","IBCBB1",10,0)
 ;
"RTN","IBCBB1",11,0)
 ;Statement Covers From
"RTN","IBCBB1",12,0)
 I IBFDT="" S IBER=IBER_"IB061;"
"RTN","IBCBB1",13,0)
 I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
"RTN","IBCBB1",14,0)
 I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
"RTN","IBCBB1",15,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",16,0)
 ; if inpat - from date must not be prior to admit date.
"RTN","IBCBB1",17,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
"RTN","IBCBB1",18,0)
 ;
"RTN","IBCBB1",19,0)
 ;Statement Covers To
"RTN","IBCBB1",20,0)
 I IBTDT="" S IBER=IBER_"IB062;"
"RTN","IBCBB1",21,0)
 I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
"RTN","IBCBB1",22,0)
 I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
"RTN","IBCBB1",23,0)
 S IBTFY=$$FY^IBOUTL(IBTDT)
"RTN","IBCBB1",24,0)
 ;
"RTN","IBCBB1",25,0)
 ;Statement crosses fiscal years
"RTN","IBCBB1",26,0)
 ;I IBTFY'=IBFFY S IBER=IBER_"IB047;"
"RTN","IBCBB1",27,0)
 ;
"RTN","IBCBB1",28,0)
 ;Statement crosses calendar years
"RTN","IBCBB1",29,0)
 ;I $E(IBTDT,1,3)'=$E(IBFDT,1,3) S IBER=IBER_"IB046;"
"RTN","IBCBB1",30,0)
 ;
"RTN","IBCBB1",31,0)
 ;Total Charges
"RTN","IBCBB1",32,0)
 I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
"RTN","IBCBB1",33,0)
 ;
"RTN","IBCBB1",34,0)
 ;Billable charges for secondary claim
"RTN","IBCBB1",35,0)
 I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
"RTN","IBCBB1",36,0)
 ;Fiscal Year 1
"RTN","IBCBB1",37,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",38,0)
 ;I IBFY=""!($L(IBFY)'=2)!(IBFY'=IBFFY) S IBER=IBER_"IB050;"
"RTN","IBCBB1",39,0)
 ;
"RTN","IBCBB1",40,0)
 ;FY 1 Charges
"RTN","IBCBB1",41,0)
 ;I +IBFYC'>0!(+IBFYC'=IBFYC) S IBER=IBER_"IB051;"
"RTN","IBCBB1",42,0)
 ;
"RTN","IBCBB1",43,0)
 ;FY 1 Charges minus offset >0
"RTN","IBCBB1",44,0)
 ;I +IBFYC-$P(IBNDU1,"^",2)'>0 S IBER=IBER_"IB052;"
"RTN","IBCBB1",45,0)
 ;
"RTN","IBCBB1",46,0)
 ;Check provider link for current user, enterer, reviewer and Authorizor
"RTN","IBCBB1",47,0)
 I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",48,0)
 I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",49,0)
 I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
"RTN","IBCBB1",50,0)
 I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
"RTN","IBCBB1",51,0)
 ;
"RTN","IBCBB1",52,0)
 ;Bill exists and not already new bill
"RTN","IBCBB1",53,0)
 ;I $S('$D(^PRCA(430,IBIFN,0)):1,$P($P(^PRCA(430,IBIFN,0),"^"),"-",2)'=IBBNO:1,1:0) S IBER=IBER_"IB056;"
"RTN","IBCBB1",54,0)
 ;I $P($$BN^PRCAFN(IBIFN),"-",2)'=IBBNO S IBER=IBER_"IB056;"
"RTN","IBCBB1",55,0)
 ;I IBER="",$P(^PRCA(430,IBIFN,0),"^",8)=$O(^PRCA(430.3,"AC",104,"")) S IBER=IBER_"IB040;"
"RTN","IBCBB1",56,0)
 I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
"RTN","IBCBB1",57,0)
 ;
"RTN","IBCBB1",58,0)
 ; Check for valid sec provider id for current ins
"RTN","IBCBB1",59,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'="" D
"RTN","IBCBB1",60,0)
 . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TERTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
"RTN","IBCBB1",61,0)
 ;
"RTN","IBCBB1",62,0)
 N IBCOBN,IBZ
"RTN","IBCBB1",63,0)
 S IBCOBN=+$$COBN^IBCEF(IBIFN),Z=$$GETTYP^IBCEP2A(IBIFN,IBCOBN)
"RTN","IBCBB1",64,0)
 I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB1",65,0)
 . ; for current insurance
"RTN","IBCBB1",66,0)
 . N Q,Q0,IBID,IBOK
"RTN","IBCBB1",67,0)
 . S IBOK=0
"RTN","IBCBB1",68,0)
 . D PROVINF^IBCEF74(IBIFN,IBCOBN,.IBID,IBCOBN,"C")
"RTN","IBCBB1",69,0)
 . S Q0=0,Q=$S($$FT^IBCEF(IBIFN)=3:4,1:3) F  S Q0=$O(IBID(IBCOBN,Q,Q0)) Q:'Q0  I $P(IBID(IBCOBN,Q,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB1",70,0)
 . I 'IBOK S IBER=IBER_"IB303;"
"RTN","IBCBB1",71,0)
 K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
"RTN","IBCBB1",72,0)
 I $P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
"RTN","IBCBB1",73,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB1",74,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB1",75,0)
 . I $P(IBZ,U,3)=""&($P(IBZ,U,4)="") S IBER=IBER_"IB321;" ; SSN/IEN required for rend/att
"RTN","IBCBB1",76,0)
 . ;
"RTN","IBCBB1",77,0)
 ;
"RTN","IBCBB1",78,0)
 ; Must be one and only one division on bill
"RTN","IBCBB1",79,0)
 S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
"RTN","IBCBB1",80,0)
 I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",81,0)
 ; Division address must be defined in institution file
"RTN","IBCBB1",82,0)
 I $P(IBND0,U,22) D
"RTN","IBCBB1",83,0)
 . N Z,Z0,Z1
"RTN","IBCBB1",84,0)
 . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
"RTN","IBCBB1",85,0)
 . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
"RTN","IBCBB1",86,0)
 . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",87,0)
 . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",88,0)
 ;
"RTN","IBCBB1",89,0)
 ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
"RTN","IBCBB1",90,0)
 S (IBRTCHV,IBPICHV)=0
"RTN","IBCBB1",91,0)
 I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
"RTN","IBCBB1",92,0)
 I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
"RTN","IBCBB1",93,0)
 I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
"RTN","IBCBB1",94,0)
 ;
"RTN","IBCBB1",95,0)
 N IBZPRC,IBZPRC92
"RTN","IBCBB1",96,0)
 D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
"RTN","IBCBB1",97,0)
 ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
"RTN","IBCBB1",98,0)
 I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
"RTN","IBCBB1",99,0)
 . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
"RTN","IBCBB1",100,0)
 .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
"RTN","IBCBB1",101,0)
 .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
"RTN","IBCBB1",102,0)
 .. I '$P(Z0,U,7) S ZE=1
"RTN","IBCBB1",103,0)
 ;
"RTN","IBCBB1",104,0)
 ; Extract procedures for UB92
"RTN","IBCBB1",105,0)
 D F^IBCEF("N-UB92 PROCEDURES","IBZPRC92",,IBIFN)
"RTN","IBCBB1",106,0)
 ; Does this bill have ANY prescriptions associated with it?
"RTN","IBCBB1",107,0)
 ; Must bill prescriptions separately from other charges
"RTN","IBCBB1",108,0)
 ;
"RTN","IBCBB1",109,0)
 I $$ISRX^IBCEF1(IBIFN) D
"RTN","IBCBB1",110,0)
 . N IBZ,IBRXDEF
"RTN","IBCBB1",111,0)
 . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
"RTN","IBCBB1",112,0)
 . F  S IBZ=$O(IBZPRC92(IBZ)) Q:'IBZ  I IBZPRC92(IBZ),+$P(IBZPRC92(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
"RTN","IBCBB1",113,0)
 . K IBZ
"RTN","IBCBB1",114,0)
 ;
"RTN","IBCBB1",115,0)
 ; Check that COB sequences are not skipped
"RTN","IBCBB1",116,0)
 K Z
"RTN","IBCBB1",117,0)
 F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
"RTN","IBCBB1",118,0)
 F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
"RTN","IBCBB1",119,0)
 K Z
"RTN","IBCBB1",120,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,21)="" S IBER=IBER_"IB323;"
"RTN","IBCBB1",121,0)
 K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
"RTN","IBCBB1",122,0)
 ; Coding method should agree with types of procedure codes
"RTN","IBCBB1",123,0)
 S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
"RTN","IBCBB1",124,0)
 I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK=0 Q
"RTN","IBCBB1",125,0)
 I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
"RTN","IBCBB1",126,0)
 D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
"RTN","IBCBB1",127,0)
 Q:$G(IBQUIT)
"RTN","IBCBB1",128,0)
 ;
"RTN","IBCBB1",129,0)
 ;Other things that could be added:  Rev Code - calculating charges
"RTN","IBCBB1",130,0)
 ;        Diagnosis Coding, if MT copay - check for other co-payments
"RTN","IBCBB1",131,0)
 ;
"RTN","IBCBB1",132,0)
 I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
"RTN","IBCBB1",133,0)
 I $P(IBNDTX,U,8) D WARN^IBCBB11("Bill has been forced to print "_$S($P(IBNDTX,U,8)=1:"locally",1:"at clearinghouse"))
"RTN","IBCBB1",134,0)
 I IBFT'=2,$P(IBNDM,U,10)="" D WARN^IBCBB11("Patient Short Address has no value")
"RTN","IBCBB1",135,0)
 N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IBA(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
"RTN","IBCBB1",136,0)
 . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
"RTN","IBCBB1",137,0)
 ;
"RTN","IBCBB1",138,0)
 ;Build AR array if no errors and MRA not needed or already rec'd
"RTN","IBCBB1",139,0)
 I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
"RTN","IBCBB1",140,0)
 ;
"RTN","IBCBB1",141,0)
END ;Don't kill IBIFN, IBER, DFN
"RTN","IBCBB1",142,0)
 I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
"RTN","IBCBB1",143,0)
 K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
"RTN","IBCBB1",144,0)
 K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
"RTN","IBCBB1",145,0)
 I $D(IBER),IBER="" W !,"No Errors found for National edits"
"RTN","IBCBB1",146,0)
 Q
"RTN","IBCBB1",147,0)
 ;
"RTN","IBCBB1",148,0)
ARRAY ;Build PRCASV(array)
"RTN","IBCBB1",149,0)
 N IBCOBN,X
"RTN","IBCBB1",150,0)
 K PRCASV
"RTN","IBCBB1",151,0)
 Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
"RTN","IBCBB1",152,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCBB1",153,0)
 S X=IBIFN
"RTN","IBCBB1",154,0)
 S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
"RTN","IBCBB1",155,0)
 S PRCASV("APR")=DUZ
"RTN","IBCBB1",156,0)
 S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
"RTN","IBCBB1",157,0)
 I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
"RTN","IBCBB1",158,0)
 S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
"RTN","IBCBB1",159,0)
 S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
"RTN","IBCBB1",160,0)
 S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
"RTN","IBCBB1",161,0)
 ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11)]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
"RTN","IBCBB1",162,0)
PLUS I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
"RTN","IBCBB1",163,0)
 I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
"RTN","IBCBB1",164,0)
 ;
"RTN","IBCBB1",165,0)
 N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
"RTN","IBCBB1",166,0)
 N IBNDI1
"RTN","IBCBB1",167,0)
 Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
"RTN","IBCBB1",168,0)
 S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
"RTN","IBCBB1",169,0)
 S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
"RTN","IBCBB1",170,0)
 S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
"RTN","IBCBB1",171,0)
 S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
"RTN","IBCBB1",172,0)
 ; Check that this is a secondary or tertiary bill and insurance for previous
"RTN","IBCBB1",173,0)
 ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
"RTN","IBCBB1",174,0)
 I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
"RTN","IBCBB1",175,0)
 Q
"RTN","IBCBB1",176,0)
 ;
"RTN","IBCBB1",177,0)
MRA N IBEOB S IBEOB=0
"RTN","IBCBB1",178,0)
 ;
"RTN","IBCBB1",179,0)
 K PRCASV("MEDURE"),PRCASV("MEDCA")
"RTN","IBCBB1",180,0)
 ; Get EOB data
"RTN","IBCBB1",181,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  ;
"RTN","IBCBB1",182,0)
 . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
"RTN","IBCBB1",183,0)
 Q  ;MRA
"RTN","IBCBB1",184,0)
 ;
"RTN","IBCBB1",185,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB1",186,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB2")
0^28^B34251176
"RTN","IBCBB2",1,0)
IBCBB2 ;ALB/ARH - CONTINUATION OF EDIT CHECKS ROUTINE (HCFA 1500) ;04/14/92
"RTN","IBCBB2",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,245,232**;21-MAR-94
"RTN","IBCBB2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCBB2",4,0)
 ;
"RTN","IBCBB2",5,0)
 ;MAP TO DGCRBB2
"RTN","IBCBB2",6,0)
 ;
"RTN","IBCBB2",7,0)
EN ;
"RTN","IBCBB2",8,0)
 N IBI,IBJ,IBN,IBY,IBDX,IBDXO,IBDXL,IBCPT,IBCPTL,IBOLAB,Z,IBXSAVE,IBLOC,IBTX,IBPS,IBSP,IBLCT
"RTN","IBCBB2",9,0)
 I '$D(IBER) S IBER=""
"RTN","IBCBB2",10,0)
 S IBTX=$$TXMT^IBCEF4(IBIFN)
"RTN","IBCBB2",11,0)
 ;
"RTN","IBCBB2",12,0)
 ; Warn if no group provider id (MCRWNR is a default)
"RTN","IBCBB2",13,0)
 I '$$WNRBILL^IBEFUNC(IBIFN) D
"RTN","IBCBB2",14,0)
 . S Z=$P($G(^DGCR(399,IBIFN,"M1")),U,$$COBN^IBCEF(IBIFN)+1)
"RTN","IBCBB2",15,0)
 . I Z="" D WARN^IBCBB11("No group prov # for the current ins co - site tax id will be used")
"RTN","IBCBB2",16,0)
 ; Max 4 modifiers per CPT code allowed before warning
"RTN","IBCBB2",17,0)
 K IBXDATA
"RTN","IBCBB2",18,0)
 D F^IBCEF("N-HCFA 1500 MODIFIERS",,,IBIFN) ;Get modifiers
"RTN","IBCBB2",19,0)
 ;
"RTN","IBCBB2",20,0)
 S Z=0 F  S Z=$O(IBZPRC92(Z)) Q:'Z  I $P(IBZPRC92(Z),U)["ICPT(",$L($P(IBZPRC92(Z),U,15),",")>4 S IBI="Proc "_$$PRCD^IBCEF1($P(IBZPRC92(Z),U))_" has > 4 modifiers - only first 4 will be used" D WARN^IBCBB11(IBI)
"RTN","IBCBB2",21,0)
 ; ICD-9 diagnosis, at least 1 required
"RTN","IBCBB2",22,0)
 D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBER=IBER_"IB071;"
"RTN","IBCBB2",23,0)
 S IBI=$O(IBDXO(0))
"RTN","IBCBB2",24,0)
 I IBI,$$INPAT^IBCEF(IBIFN,1),$E($$ICD9^IBACSV(+$P(IBDXO(IBI),U)))="V" S Z="Principal Dx V-code may not be valid" D WARN^IBCBB11(Z)
"RTN","IBCBB2",25,0)
 ;
"RTN","IBCBB2",26,0)
 ; CPT procs must be associated with a dx, must have a defined provider
"RTN","IBCBB2",27,0)
 S (IBLOC,IBN,IBI,IBY)=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:IBI'?1N.N  S IBCPT=^(IBI,0) D  I +IBY S IBN=1
"RTN","IBCBB2",28,0)
 . ;I IBER'["IB089",$P(IBCPT,U,10)=7,$S('$P(IBCPT,U,16):1,1:$P(IBCPT,U,16)#15) S IBER=IBER_"IB089;" ;anesthesia needs minutes in multiple of 15
"RTN","IBCBB2",29,0)
 . I 'IBLOC,$P(IBCPT,U,15)'="",IBTX S Z="At least 1 charge has local box 24K data that will not be transmitted - " S IBLOC=1 D WARN^IBCBB11(Z) S Z="  This data will only print locally" D WARN^IBCBB11(Z)
"RTN","IBCBB2",30,0)
 . I $P(IBCPT,U)'["ICPT(" S:IBER'["IB092" IBER=IBER_"IB092;" Q
"RTN","IBCBB2",31,0)
 . S IBY=1 F IBJ=11:1:14 I +$P(IBCPT,"^",IBJ) S IBCPTL(+$P(IBCPT,"^",IBJ))="",IBY=0
"RTN","IBCBB2",32,0)
 . ;I '$P(IBCPT,U,18) S:IBER'["IB094;" IBER=IBER_"IB094;" Q
"RTN","IBCBB2",33,0)
 I +IBN S IBER=IBER_"IB072;"
"RTN","IBCBB2",34,0)
 ;
"RTN","IBCBB2",35,0)
 I '$$OCC10(IBIFN,.IBDX,2) S IBER=IBER_"IB093;"
"RTN","IBCBB2",36,0)
 ; HCFA 1500: dxs associated with procs must be defined dxs for the bill
"RTN","IBCBB2",37,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI))  Q:'IBI  S IBDXL(IBDX(IBI))=""
"RTN","IBCBB2",38,0)
 S (IBN,IBI)=0 F  S IBI=$O(IBCPTL(IBI)) Q:'IBI  I '$D(IBDXL(IBI)) S IBN=1 Q
"RTN","IBCBB2",39,0)
 I +IBN S IBER=IBER_"IB073;"
"RTN","IBCBB2",40,0)
 I IBTX S IBI=4 F  S IBI=$O(IBDXO(IBI)) Q:'IBI  S Z=+$G(IBDX(+$G(IBDXO(IBI)))) I Z,$D(IBCPTL(Z)) D WARN^IBCBB11("Too many diagnoses for claim & will be rejected so consider printing locally")
"RTN","IBCBB2",41,0)
 ;
"RTN","IBCBB2",42,0)
 I $$WNRBILL^IBEFUNC(IBIFN),$$MRATYPE^IBEFUNC(IBIFN)'="B" S IBER=IBER_"IB087;"
"RTN","IBCBB2",43,0)
 ; Only one occurrence code can be present for event date for box 14
"RTN","IBCBB2",44,0)
 S Z=$$EVENT^IBCF22(IBIFN,.IBXSAVE,.IBI)
"RTN","IBCBB2",45,0)
 I IBI S IBER=IBER_"IB099;"
"RTN","IBCBB2",46,0)
 ; unit/charge limits
"RTN","IBCBB2",47,0)
 K IBXDATA
"RTN","IBCBB2",48,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN) ;Get charge lines
"RTN","IBCBB2",49,0)
 S (IBLCT,IBOLAB)=0,IBPS="",IBSP=$$BILLSPEC^IBCEU3(IBIFN)
"RTN","IBCBB2",50,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D  Q:IBER["IB310"!(IBER["IB311")
"RTN","IBCBB2",51,0)
 . S IBLCT=IBLCT+1
"RTN","IBCBB2",52,0)
 . I $P(IBNDU2,U,11) D
"RTN","IBCBB2",53,0)
 .. I '$P(IBXDATA(IBI),U,11) S IBPS=IBPS_$S(IBPS'="":",",1:"")_IBI Q
"RTN","IBCBB2",54,0)
 .. I $P(IBXDATA(IBI),U,14),"24"'[$P(IBNDU2,U,11) D WARN^IBCBB11("Outside lab charges exist on a non-lab NON-VA bill")
"RTN","IBCBB2",55,0)
 . I '$P(IBNDU2,U,11),$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Purchased service amounts are invalid unless this is a NON-VA bill")
"RTN","IBCBB2",56,0)
 . I $D(IBXDATA(IBI,"A")) S IBER=IBER_"IB310;" Q
"RTN","IBCBB2",57,0)
 . I $D(IBXDATA(IBI,"ARX")),IBER'["311;" S IBER=IBER_"IB311;" Q
"RTN","IBCBB2",58,0)
 . I $P(IBXDATA(IBI),U,14) S IBOLAB=IBOLAB+1
"RTN","IBCBB2",59,0)
 . ; Place of service required
"RTN","IBCBB2",60,0)
 . I $G(IBER)'["IB314;",$P(IBXDATA(IBI),U,3)="" S IBER=IBER_"IB314;"
"RTN","IBCBB2",61,0)
 . ; Type of service required
"RTN","IBCBB2",62,0)
 . I $G(IBER)'["IB313;",$P(IBXDATA(IBI),U,4)="" S IBER=IBER_"IB313;"
"RTN","IBCBB2",63,0)
 . ; 43 and 53 are invalid types of service
"RTN","IBCBB2",64,0)
 . I $G(IBER)'["IB110;",($P(IBXDATA(IBI),U,4)=43!($P(IBXDATA(IBI),U,4)=53)) S IBER=IBER_"IB110;"
"RTN","IBCBB2",65,0)
 . ; Units for the line item must be less than 100/1000
"RTN","IBCBB2",66,0)
 . I IBER'["IB088",$P(IBXDATA(IBI),U,9)'<100 D
"RTN","IBCBB2",67,0)
 .. I $P(IBXDATA(IBI),U,4)'=7 S IBER=IBER_"IB088;" Q
"RTN","IBCBB2",68,0)
 .. I $P(IBXDATA(IBI),U,9)'<1000 S IBER=IBER_"IB088;"
"RTN","IBCBB2",69,0)
 . ; Line item total charge must be less than $10,000.00, greater than 0
"RTN","IBCBB2",70,0)
 . I IBER'["IB090",$P(IBXDATA(IBI),U,9)'<10000 S IBER=IBER_"IB090;"
"RTN","IBCBB2",71,0)
 . I '($P(IBXDATA(IBI),U,9)*$P(IBXDATA(IBI),U,8)),$$COBN^IBCEF(IBIFN)'>1 S Z="Procedure "_$P(IBXDATA(IBI),U,5)_" has a 0-charge and will not be transmitted" D WARN^IBCBB11(Z)
"RTN","IBCBB2",72,0)
 . I $G(IBXDATA(IBI,"AUX"))'="",'$G(IBSP(1)),+IBSP'=35,$TR($P(IBXDATA(IBI,"AUX"),U,4,6)_$P(IBXDATA(IBI,"AUX"),U,2),U)'="" S IBSP(1)=1
"RTN","IBCBB2",73,0)
 I IBTX,IBLCT>50 S IBER=IBER_"IB308;"
"RTN","IBCBB2",74,0)
 I $G(IBSP(1)) D WARN^IBCBB11("Chiropractic service details only valid if provider specialty is '35'")
"RTN","IBCBB2",75,0)
 I IBPS'="" D WARN^IBCBB11("NON-VA facility indicated, but no purchased service charge on line item"_$S(IBPS[",":"s",1:"")_" #"_IBPS)
"RTN","IBCBB2",76,0)
 I $P(IBNDU2,U,11),$P(IBNDU2,U,11)=4,IBOLAB>1 D WARN^IBCBB11("For proper payment, you must bill each outside lab on a separate claim form")
"RTN","IBCBB2",77,0)
 K IBXDATA
"RTN","IBCBB2",78,0)
 ;
"RTN","IBCBB2",79,0)
 Q
"RTN","IBCBB2",80,0)
 ;
"RTN","IBCBB2",81,0)
OCC10(IBIFN,IBARR,IBFT) ; Determine if occurrence code 10 exists for pregnancy dx
"RTN","IBCBB2",82,0)
 ; IBARR=array subscripted by ien of DX code if IBFT=2 (HCFA form)
"RTN","IBCBB2",83,0)
 ;                         by seq # and = ien of DX code if IBFT'=2
"RTN","IBCBB2",84,0)
 ;
"RTN","IBCBB2",85,0)
 N IBN,IBI,IBXDATA,IBXSAVE,IBDX,Z
"RTN","IBCBB2",86,0)
 S IBN=1
"RTN","IBCBB2",87,0)
 ;
"RTN","IBCBB2",88,0)
 I '$D(^TMP($J,"LMD")) D
"RTN","IBCBB2",89,0)
 . D F^IBCEF("N-OCCURRENCE CODES",,,IBIFN)
"RTN","IBCBB2",90,0)
 . S ^TMP($J,"LMD")=""
"RTN","IBCBB2",91,0)
 . S Z=0 F  S Z=$O(IBXSAVE("OCC",Z)) Q:'Z  I +IBXSAVE("OCC",Z)=10 S ^TMP($J,"LMD")=1 Q
"RTN","IBCBB2",92,0)
 ;
"RTN","IBCBB2",93,0)
 I '^TMP($J,"LMD") S IBI=0 F  S IBI=$O(IBARR(IBI))  Q:'IBI  D  Q:'IBN
"RTN","IBCBB2",94,0)
 . N Z,Z1
"RTN","IBCBB2",95,0)
 . ; If a pregnancy DX exists, must be an occurrence code 10 for LMP date
"RTN","IBCBB2",96,0)
 . ; dx ranges are: V22*-V24*, V27*-V28*, 630*-677*
"RTN","IBCBB2",97,0)
 . S IBDX=$S($G(IBFT)'=2:+IBARR(IBI),1:IBI)
"RTN","IBCBB2",98,0)
 . S Z=$E($P($$ICD9^IBACSV(IBDX),U),1,3),Z1=$E(Z,2,3)
"RTN","IBCBB2",99,0)
 . I $S(Z'<630&(Z<678):1,$E(Z)="V":$S(Z1'<22&(Z1<25):1,1:Z1'<27&(Z1<28)),1:0) S IBN=0 ;Pregnancy Dx exists
"RTN","IBCBB2",100,0)
 ;
"RTN","IBCBB2",101,0)
OCC10Q K ^TMP($J,"LMD")
"RTN","IBCBB2",102,0)
 Q IBN
"RTN","IBCBB2",103,0)
 ;
"RTN","IBCBB21")
0^27^B10290219
"RTN","IBCBB21",1,0)
IBCBB21 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE FOR UB-92 ;2-NOV-89
"RTN","IBCBB21",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,232**;21-MAR-94
"RTN","IBCBB21",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCBB21",4,0)
 ;
"RTN","IBCBB21",5,0)
EN(IBZPRC92) ;
"RTN","IBCBB21",6,0)
 ;
"RTN","IBCBB21",7,0)
 N ECODE,IBTXMT,IBXDATA,IBLPRT,IBI,Z,Z0,Z1,IBREQMRA
"RTN","IBCBB21",8,0)
 I '$D(IBZPRC92) D ALLPROC^IBCVA1(IBIFN,.IBZPRC92)
"RTN","IBCBB21",9,0)
 K IBQUIT S IBQUIT=0
"RTN","IBCBB21",10,0)
 S (Z,Z0,Z1)=0
"RTN","IBCBB21",11,0)
 F  S Z=$O(IBZPRC92(Z)) Q:'Z  S:IBZPRC92(Z)["CPT" Z0=Z0+1 S:IBZPRC92(Z)["ICD" Z1=Z1+1
"RTN","IBCBB21",12,0)
 S IBTXMT=$$TXMT^IBCEF4(IBIFN),IBLPRT=$P(IBNDTX,U,8)
"RTN","IBCBB21",13,0)
 S IBZPRC92=Z0_U_Z1 ;Save # of CPT's and ICD9's
"RTN","IBCBB21",14,0)
 ; More than 50 procedures on a bill - must print locally
"RTN","IBCBB21",15,0)
 I IBTXMT,IBLPRT'=1,(+IBZPRC92>50!(+$P(IBZPRC92,U,2)>50)) S IBQUIT=$$IBER^IBCBB3(.IBER,308) Q:IBQUIT
"RTN","IBCBB21",16,0)
 ; If ICD9 procedures with dates and charges, bill 11x or 83x needs operating physician
"RTN","IBCBB21",17,0)
 I IBTOB12="11",$P(IBZPRC92,U,2),'$$CKPROV^IBCEU(IBIFN,2) S IBER=IBER_"IB304;"
"RTN","IBCBB21",18,0)
 I IBTOB12="83",$P(IBZPRC92,U,2),'$$CKPROV^IBCEU(IBIFN,2) S IBER=IBER_"IB312;"
"RTN","IBCBB21",19,0)
 ;
"RTN","IBCBB21",20,0)
 ; If any CPT procedures have more than 2 modifiers, warn
"RTN","IBCBB21",21,0)
 S Z=0 F  S Z=$O(IBZPRC92(Z)) Q:'Z  I $P(IBZPRC92(Z),U)["ICPT(",$L($P(IBZPRC92(Z),U,15),",")>2 S Z0="Proc "_$$PRCD^IBCEF1($P(IBZPRC92(Z),U))_" has > 2 modifiers - only first 2 will be used" D WARN^IBCBB11(Z0)
"RTN","IBCBB21",22,0)
 ;
"RTN","IBCBB21",23,0)
 I $$WNRBILL^IBEFUNC(IBIFN),$$MRATYPE^IBEFUNC(IBIFN)'="A" S IBER=IBER_"IB086;"
"RTN","IBCBB21",24,0)
 S IBREQMRA=$$REQMRA^IBEFUNC(IBIFN)    ; MRA?
"RTN","IBCBB21",25,0)
 ;
"RTN","IBCBB21",26,0)
 ; UB92 Diagnosis Codes
"RTN","IBCBB21",27,0)
 K IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCBB21",28,0)
 ;
"RTN","IBCBB21",29,0)
 ; Only 9 dx's allowed per claim plus 1 E-code
"RTN","IBCBB21",30,0)
 S (Z,ECODE,IBI)=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D  Q:IBER["309;"
"RTN","IBCBB21",31,0)
 . S IBI=IBI+1
"RTN","IBCBB21",32,0)
 . I $E($$ICD9^IBACSV(+$P(IBXDATA(Z),U)))="E" S:ECODE IBQUIT=$$IBER^IBCBB3(.IBER,301) S:'ECODE IBI=IBI-1,ECODE=1
"RTN","IBCBB21",33,0)
 . ; max DX check does not apply to MRAs
"RTN","IBCBB21",34,0)
 . I IBTXMT,IBLPRT'=1,IBI>9,'IBREQMRA S IBER=IBER_"IB309;"
"RTN","IBCBB21",35,0)
 ;
"RTN","IBCBB21",36,0)
 I 'IBI S IBER=IBER_"IB071;"   ;Require Diag code NOIS:OKL-0304-72495
"RTN","IBCBB21",37,0)
 I IBI,$$INPAT^IBCEF(IBIFN,1),$E($$ICD9^IBACSV(+$P(IBXDATA(1),U)))="V" S Z="Principal Dx V-code may not be valid" D WARN^IBCBB11(Z)
"RTN","IBCBB21",38,0)
 I '$$OCC10^IBCBB2(IBIFN,.IBXDATA,3) S IBER=IBER_"IB093;"
"RTN","IBCBB21",39,0)
 ;
"RTN","IBCBB21",40,0)
 K ^TMP($J,"IBC-RC")
"RTN","IBCBB21",41,0)
 D F^IBCEF("N-UB92 SERVICE LINE (PRINT)",,,IBIFN)
"RTN","IBCBB21",42,0)
 S (Z0,IBI)=0 F  S IBI=$O(^TMP($J,"IBC-RC",IBI)) Q:'IBI  S Z=$G(^(IBI))  Q:+$P(Z,U,2)=1  I $P(Z,U,2) D
"RTN","IBCBB21",43,0)
 . I IBER'["IB090;",$P(Z,U,2)>1,($P(Z,U,7)>99999.99!($P(Z,U,8)>99999.99)) S IBER=IBER_"IB090;"
"RTN","IBCBB21",44,0)
 . Q:$P(Z,U,2)'<180&($P(Z,U,2)'>189)  ;Pass days (LOA) don't matter
"RTN","IBCBB21",45,0)
 . I '$P(Z,U,7),'$P(Z,U,8),'Z0,$$COBN^IBCEF(IBIFN)'>1  S Z0="Rev Code(s) having a 0-charge will not be transmitted for the bill" D WARN^IBCBB11(Z0) S Z0=1
"RTN","IBCBB21",46,0)
 K ^TMP($J,"IBC-RC")
"RTN","IBCBB21",47,0)
 Q
"RTN","IBCBB21",48,0)
 ;
"RTN","IBCE837")
0^1^B83651112
"RTN","IBCE837",1,0)
IBCE837 ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION ;8/6/03 10:48am
"RTN","IBCE837",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,197,232**;21-MAR-94
"RTN","IBCE837",3,0)
 ;
"RTN","IBCE837",4,0)
EN ; Auto-txmt
"RTN","IBCE837",5,0)
 N IBSITE8,IBRUN,X,X1,X2,DA,DIE,DR
"RTN","IBCE837",6,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837",7,0)
 S IBSITE8=$G(^IBE(350.9,1,8)),IBRUN=1
"RTN","IBCE837",8,0)
 Q:'$P(IBSITE8,U,3)!'$P(IBSITE8,U,10)
"RTN","IBCE837",9,0)
 I '$$MGCHK^IBCE(0) Q
"RTN","IBCE837",10,0)
 I $P(IBSITE8,U,5) D  Q:'IBRUN
"RTN","IBCE837",11,0)
 . S X2=+$P(IBSITE8,U,3),X1=$P(IBSITE8,U,5) D C^%DTC
"RTN","IBCE837",12,0)
 . I X>DT S IBRUN=0 Q
"RTN","IBCE837",13,0)
 D QTXMT^IBCE837B(IBSITE8)
"RTN","IBCE837",14,0)
 I $P(IBSITE8,U,5)'=DT S DIE="^IBE(350.9,",DR="8.05////"_DT,DA=1 D ^DIE
"RTN","IBCE837",15,0)
 Q
"RTN","IBCE837",16,0)
 ;
"RTN","IBCE837",17,0)
SETUP(IBEXTRP) ; Txmn set up
"RTN","IBCE837",18,0)
 ; IBEXTRP=1 prnt 837 data
"RTN","IBCE837",19,0)
 N IB
"RTN","IBCE837",20,0)
 K ^TMP("IBXMSG",$J),^TMP("IBTXMT",$J),^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXERR",$J),IBXERR,^TMP("IBXINS",$J),^TMP("IBTX",$J)
"RTN","IBCE837",21,0)
 ; Chk extract running
"RTN","IBCE837",22,0)
 Q:$G(IBEXTRP)
"RTN","IBCE837",23,0)
 I '$D(^TMP("IBRESUBMIT",$J)),'$D(^TMP("IBONE",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",24,0)
 . L +^IBA(364,0):5
"RTN","IBCE837",25,0)
 . I '$T D  Q
"RTN","IBCE837",26,0)
 .. S IBXERR=1,^TMP("IBXERR",$J,1)="A PREVIOUS EDI EXTRACT IS RUNNING - ANOTHER CANNOT BE STARTED "_$$FMTE^XLFDT($$NOW^XLFDT(),2)
"RTN","IBCE837",27,0)
 ;
"RTN","IBCE837",28,0)
 I $D(^TMP("IBRESUBMIT",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",29,0)
 .N Z,Z0
"RTN","IBCE837",30,0)
 .S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U,2),Z=$$LOCK^IBCEM02(364.1,Z0)
"RTN","IBCE837",31,0)
 .I 'Z D
"RTN","IBCE837",32,0)
 ..S IBXERR=1
"RTN","IBCE837",33,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",34,0)
 .I 'Z D
"RTN","IBCE837",35,0)
 ..S IBXERR=1
"RTN","IBCE837",36,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",37,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",2)="Resubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",38,0)
 I $D(^TMP("IBONE",$J)) S IB=$G(^($J))+1 D  Q:$D(IBXERR)
"RTN","IBCE837",39,0)
 .N Z,Z0
"RTN","IBCE837",40,0)
 .S Z0=$O(^TMP("IBONE",$J,"")),Z=$$LOCK^IBCEM02(364,Z0)
"RTN","IBCE837",41,0)
 .I 'Z D
"RTN","IBCE837",42,0)
 ..S IBXERR=1
"RTN","IBCE837",43,0)
 ..S ^TMP("IBONE",$J,"IBXERR",1)="Another user is currently processing bill "_$P($G(^DGCR(399,+$G(^IBA(364,Z0,0)),0)),U)_".  Bill NOT "_$P("^re",U,IB)_"submitted."
"RTN","IBCE837",44,0)
 ..S ^TMP("IBONE",$J,"IBXERR",2)=$P("S^Res",U,IB)_"ubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",45,0)
 Q
"RTN","IBCE837",46,0)
 ;
"RTN","IBCE837",47,0)
FIND ; Find bills/sort by HCFA 1500/UB92, test/live, ins ID # & div
"RTN","IBCE837",48,0)
 ;
"RTN","IBCE837",49,0)
 N IBX,IB0,IBCBH,IBINS,IBXIEN,IBNID,IBGBL,IBTXTEST,IBBTYP,IB837R,IBDIV,IBNOTX,IBTXST
"RTN","IBCE837",50,0)
 K ^TMP($J,"BILL"),^TMP("IBICT",$J)
"RTN","IBCE837",51,0)
 ;
"RTN","IBCE837",52,0)
 S IBGBL=$S($D(^TMP("IBONE",$J)):"^TMP(""IBONE"","_$J_")",$D(^TMP("IBSELX",$J)):"^TMP(""IBSELX"","_$J_")",'$D(^TMP("IBRESUBMIT",$J)):"^IBA(364,""ASTAT"",""X"")",1:"^TMP(""IBRESUBMIT"","_$J_")")
"RTN","IBCE837",53,0)
 ;
"RTN","IBCE837",54,0)
 S IBX="" F  S IBX=$O(@IBGBL@(IBX)) Q:'IBX  D
"RTN","IBCE837",55,0)
 .S IBXIEN=+$G(^IBA(364,IBX,0)),IB0=$G(^DGCR(399,IBXIEN,0))
"RTN","IBCE837",56,0)
 .S IBTXST=$$TXMT^IBCEF4(IBXIEN,.IBNOTX)
"RTN","IBCE837",57,0)
 .Q:IBTXST=""  ; no txmt
"RTN","IBCE837",58,0)
 .Q:$S(IB0="":1,$P(IB0,U,13)>4:1,1:$D(^TMP($J,"BILL",$P(IB0,U))))
"RTN","IBCE837",59,0)
 .S IBCBH=$P(IB0,U,21) S:"PST"'[IBCBH!(IBCBH="") IBCBH="P"
"RTN","IBCE837",60,0)
 .S IBINS=$P($G(^DGCR(399,IBXIEN,"I"_($F("PST",IBCBH)-1))),U)
"RTN","IBCE837",61,0)
 .S IBTXTEST=+$$TEST^IBCEF4(IBXIEN)
"RTN","IBCE837",62,0)
 .S IBBTYP=$P("P^I",U,($$FT^IBCEF(IBXIEN)=3)+1)_"-"_IBTXTEST
"RTN","IBCE837",63,0)
 .Q:$$TESTPT^IBCEU($P(IB0,U,2))&'IBTXTEST  ;Test pt
"RTN","IBCE837",64,0)
 .;
"RTN","IBCE837",65,0)
 .I IBTXTEST D
"RTN","IBCE837",66,0)
 ..N IB3,DA,DIK
"RTN","IBCE837",67,0)
 ..S IB3=$G(^DIC(36,IBINS,3))
"RTN","IBCE837",68,0)
 ..I $P(IB3,U,5)'=DT S $P(IB3,U,7)=0
"RTN","IBCE837",69,0)
 ..I ($P(IB3,U,7)+$G(^TMP("IBICT",$J,IBINS))+1)>$P(IB3,U,6) D  Q
"RTN","IBCE837",70,0)
 ...S IBINS="" ;max # hit
"RTN","IBCE837",71,0)
 ...S DA=IBX,DIK="^IBA(364," D ^DIK
"RTN","IBCE837",72,0)
 ..S ^TMP("IBICT",$J,IBINS)=$G(^TMP("IBICT",$J,IBINS))+1
"RTN","IBCE837",73,0)
 .;
"RTN","IBCE837",74,0)
 .I IBINS,$P(IB0,U,2) D
"RTN","IBCE837",75,0)
 ..S IBNID=$$PAYERID^IBCEF2(IBXIEN)
"RTN","IBCE837",76,0)
 ..S IB837R=$$RECVR^IBCEF2(IBXIEN)
"RTN","IBCE837",77,0)
 ..S IBDIV=$P($S($P(IB0,U,22):$$SITE^VASITE(DT,$P(IB0,U,22)),1:$$SITE^VASITE()),U,3)
"RTN","IBCE837",78,0)
 ..I IBNID'="","RPIHS"[$E(IBNID),$E(IBNID,2,$L(IBNID))="PRNT" S IBNID=IBNID_"*"_IBINS
"RTN","IBCE837",79,0)
 ..I IBNID="" S IBNID="*"_IBINS
"RTN","IBCE837",80,0)
 ..S $P(IBNID,"*",3)=$S($P(IB0,U,22):$P(IB0,U,22),1:"")
"RTN","IBCE837",81,0)
 ..S:'$D(^TMP("IBXINS",$J,IBDIV_U_IBBTYP,IBNID)) ^(IBNID)=IBINS S ^TMP("IBTXMT",$J,IBDIV_U_IBBTYP,IB837R,IBNID,$P(IB0,U,2),IBXIEN_U_IBX)=IBX
"RTN","IBCE837",82,0)
 .;
"RTN","IBCE837",83,0)
 .S ^TMP($J,"BILL",$P(IB0,U))=""
"RTN","IBCE837",84,0)
 ;
"RTN","IBCE837",85,0)
 I $D(^TMP("IBTXMT",$J)) S ^TMP("IBXDATA",$J)=IBNID
"RTN","IBCE837",86,0)
 K ^TMP($J,"BILL")
"RTN","IBCE837",87,0)
 Q
"RTN","IBCE837",88,0)
 ;
"RTN","IBCE837",89,0)
OUTPUT ; 837
"RTN","IBCE837",90,0)
 ;
"RTN","IBCE837",91,0)
 N IB837,IBSITE,IBMAX,IBQUEUE,IBTQUEUE,IBNID,IBCT,IBCTM,IBSIZE,IBBILL,IBLCNT,IBDFN,IBREF,IBSIZEM,IBPARMS,IBD,IBDESC,IBINS,IBQ,IB3,IBBTYP,IBTXTEST,IBDEFPRT,IB837R,IBBTYPX
"RTN","IBCE837",92,0)
 ;
"RTN","IBCE837",93,0)
 K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837",94,0)
 S IBSITE=$G(^IBE(350.9,1,8)),IBMAX=$P(IBSITE,U,4),IB837=+$O(^IBE(353,"B","IB 837 TRANSMISSION",0)),IB837=$S($P($G(^IBE(353,+IB837,2)),U,8):$P(^(2),U,8),1:IB837) S:'IBMAX IBMAX=999
"RTN","IBCE837",95,0)
 ;
"RTN","IBCE837",96,0)
 I 'IB837 D  Q
"RTN","IBCE837",97,0)
 . N IBZ,XMBODY
"RTN","IBCE837",98,0)
 . S XMBODY="IBZ"
"RTN","IBCE837",99,0)
 . S IBZ(1)="The transmission form for sending electronic claims is not in your form file",IBZ(2)="NO CLAIMS WERE OUTPUT - FORM = IB 837 TRANSMISSION"
"RTN","IBCE837",100,0)
 . D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",101,0)
 ;
"RTN","IBCE837",102,0)
 S (IBCT,IBCTM,IBSIZE)=0,IBQUEUE=$P(IBSITE,U),IBTQUEUE=$P(IBSITE,U,9),IBDESC=""
"RTN","IBCE837",103,0)
 ;
"RTN","IBCE837",104,0)
 Q:IBQUEUE=""&(IBTQUEUE="")
"RTN","IBCE837",105,0)
 ;
"RTN","IBCE837",106,0)
 S IBQ="",IBBTYPX=""
"RTN","IBCE837",107,0)
 ; Sort: div_^_bill type_-_test stat,ins co transmission destination,dfn,claim #
"RTN","IBCE837",108,0)
 F  S IBBTYPX=$O(^TMP("IBTXMT",$J,IBBTYPX)),IBBTYP=$P(IBBTYPX,U,2) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IBBTYPX=""  D
"RTN","IBCE837",109,0)
 . S IBDEFPRT=$S($E(IBBTYP)="P":"SPRINT",1:"SPRINT")
"RTN","IBCE837",110,0)
 . S IBTXTEST=+$P(IBBTYP,"-",2),IBQ=$S('IBTXTEST:IBQUEUE,1:IBTQUEUE)
"RTN","IBCE837",111,0)
 . Q:IBQ=""  ; Queue
"RTN","IBCE837",112,0)
 . ;
"RTN","IBCE837",113,0)
 . S IBD=$S($E(IBBTYP)="P":"PROF",1:"INST")_" CLAIMS-"_$$HTE^XLFDT($H,2)_"  "
"RTN","IBCE837",114,0)
 . S IBDESC=$S('$P(IBSITE,U,7):$S('IBTXTEST:"",1:"TEST ")_IBD,1:"")
"RTN","IBCE837",115,0)
 . ;
"RTN","IBCE837",116,0)
 . S IB837R=""
"RTN","IBCE837",117,0)
 . F  S IB837R=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R)) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IB837R=""  D
"RTN","IBCE837",118,0)
 .. S (IBINS,IBNID)="",IBLCNT=0
"RTN","IBCE837",119,0)
 .. F  S IBNID=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID)) K ^TMP("IBHDR1",$J) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,.IBSIZE) Q:IBNID=""  D
"RTN","IBCE837",120,0)
 ...;
"RTN","IBCE837",121,0)
 ...S IBDFN=0,IBINS=+$G(^TMP("IBXINS",$J,IBBTYPX,IBNID))
"RTN","IBCE837",122,0)
 ... ;
"RTN","IBCE837",123,0)
 ...I $P(IBSITE,U,7) D  ; 1 ins/batch
"RTN","IBCE837",124,0)
 .... S IBLCNT=0
"RTN","IBCE837",125,0)
 .... S IBDESC=$E($S('IBTXTEST:"",1:"TEST ")_IBD_$P($G(^DIC(36,IBINS,0)),U),1,80)
"RTN","IBCE837",126,0)
 ... ;
"RTN","IBCE837",127,0)
 ...F  S IBDFN=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN)) Q:'IBDFN  S IBREF="" F  S IBREF=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN,IBREF)) Q:'IBREF  D
"RTN","IBCE837",128,0)
 ....I '(IBCTM#IBMAX),IBCTM D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 ;exceeds max #
"RTN","IBCE837",129,0)
 ....D BILLPARM^IBCEFG0(+IBREF,.IBPARMS)
"RTN","IBCE837",130,0)
 ....S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",131,0)
 ....I (IBSIZEM+IBSIZE)>30000,IBSIZE D  ; exceeds max size
"RTN","IBCE837",132,0)
 .....D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 K ^TMP("IBXDATA",$J) S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",133,0)
 ....I 'IBSIZEM D:'IBCTM  Q
"RTN","IBCE837",134,0)
 ..... D CHKBTCH^IBCE837A(+$G(^TMP("IBHDR",$J))) K ^TMP("IBHDR",$J)
"RTN","IBCE837",135,0)
 ....S IBCT=IBCT+1,IBCTM=IBCTM+1
"RTN","IBCE837",136,0)
 ....D:$D(^TMP("IBXDATA",$J)) MESSAGE(.IBLCNT,$P(IBREF,U,2),.IBBILL,.IBCTM,.IBSIZE,IBSIZEM,"",IBBTYP,IBINS)
"RTN","IBCE837",137,0)
 ..;
"RTN","IBCE837",138,0)
 ..I $G(IBTXTEST)=1 S IBINS=0 F  S IBINS=$O(^TMP("IBICT",$J,IBINS)) Q:'IBINS  S IB3=$G(^DIC(36,IBINS,3)) D
"RTN","IBCE837",139,0)
 ... N DIE,DA,DR
"RTN","IBCE837",140,0)
 ...S DIE="^DIC(36,",DA=IBINS,DR="3.05////"_DT_";3.07////"_($S($P(IB3,U,5)'=DT:0,1:$P(IB3,U,7))+^TMP("IBICT",$J,IBINS)) D ^DIE
"RTN","IBCE837",141,0)
 ;
"RTN","IBCE837",142,0)
 I $O(^TMP("IBXERR",$J,"")) D  ;Error to mail grp
"RTN","IBCE837",143,0)
 .N XMTO,XMBODY,XMDUZ,XMSUBJ,IBCT,IBERR
"RTN","IBCE837",144,0)
 .K ^TMP("IBXMSG",$J)
"RTN","IBCE837",145,0)
 .S ^TMP("IBXMSG",$J,1)="The following authorized bill(s) were not transmitted due to errors indicated.",^(2)="Once the errors are corrected, the bill(s) will be included in the next run.",^(3)=" "
"RTN","IBCE837",146,0)
 .;
"RTN","IBCE837",147,0)
 .S IBERR=0,IBCT=3
"RTN","IBCE837",148,0)
 .F  S IBERR=$O(^TMP("IBXERR",$J,IBERR)) Q:'IBERR  S IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)="Bill #: "_$P($G(^DGCR(399,IBERR,0)),U),IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)=$J("",5)_^TMP("IBXERR",$J,IBERR)
"RTN","IBCE837",149,0)
 .S XMBODY="^TMP(""IBXMSG"","_$J_")" D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",150,0)
 .;
"RTN","IBCE837",151,0)
 .K ^TMP("IBXMSG",$J),^TMP("IBICT",$J)
"RTN","IBCE837",152,0)
 ;
"RTN","IBCE837",153,0)
 I $O(^TMP("IBCE-BATCH",$J,"")) D
"RTN","IBCE837",154,0)
 .N IB,IB0,IBL,IBT,XMTO,XMDUZ,XMSUBJ,IBRESUB,XMZ
"RTN","IBCE837",155,0)
 .S IBRESUB=$D(^TMP("IBRESUBMIT",$J))
"RTN","IBCE837",156,0)
 .;
"RTN","IBCE837",157,0)
 .S IBT(1)="The following batches were "_$S('IBRESUB:"",1:"re-")_"submitted to Austin "_$$HTE^XLFDT($H,"2D")_":"
"RTN","IBCE837",158,0)
 .S IBT(2)=$S('IBRESUB:" ",1:"   [Resubmitted by: "_$P($G(^VA(200,+DUZ,0)),U)_" (#"_DUZ_")]") S:IBRESUB IBT(3)=" "
"RTN","IBCE837",159,0)
 .;
"RTN","IBCE837",160,0)
 .S IBL=$S('IBRESUB:2,1:3),IB=""
"RTN","IBCE837",161,0)
 .F  S IB=$O(^TMP("IBCE-BATCH",$J,IB)) Q:IB=""  S IBL=IBL+1,IB0=$G(^(IB)) D
"RTN","IBCE837",162,0)
 ..S IBT(IBL)=" "_IB_" "_$P($G(^IBA(364.1,+IB0,0)),U,8),IBL=IBL+1,IBT(IBL)="    ("_+$P(IB0,U,2)_" bills)"
"RTN","IBCE837",163,0)
 .;
"RTN","IBCE837",164,0)
 .S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="IBT",XMSUBJ="EDI 837 "_$S('IBRESUB:"",1:"RE-")_"SUBMISSION BATCH LIST"
"RTN","IBCE837",165,0)
 .D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837",166,0)
 .;
"RTN","IBCE837",167,0)
 .S:IBRESUB ^TMP("IBRESUBMIT",$J,0)=1
"RTN","IBCE837",168,0)
 Q
"RTN","IBCE837",169,0)
 ;
"RTN","IBCE837",170,0)
CLEANUP ; moved
"RTN","IBCE837",171,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",172,0)
 Q
"RTN","IBCE837",173,0)
 ;
"RTN","IBCE837",174,0)
MESSAGE(IBLCNT,IBIEN,IBBILL,IBCTM,IBSIZE,IBSIZEM,IBDUZ,IBBTYP,IBINS) ; Create msg in ^TMP("IBXMSG",$J)
"RTN","IBCE837",175,0)
 ;IBLCNT = last msg line extracted
"RTN","IBCE837",176,0)
 ;IBIEN = ien file 364 bill entry
"RTN","IBCE837",177,0)
 ;IBBILL = array file 364 ien's of bills being sent
"RTN","IBCE837",178,0)
 ; IBBILL(IEN)=""
"RTN","IBCE837",179,0)
 ;IBSIZE = # bytes in msg
"RTN","IBCE837",180,0)
 ;IBSIZEM = # bytes in record to be added to msg
"RTN","IBCE837",181,0)
 ;IBCTM = # bills in batch
"RTN","IBCE837",182,0)
 ;IBDUZ = user ien running extract (Postmaster if auto)
"RTN","IBCE837",183,0)
 ;IBBTYP = x-y where x = P for prof, I for inst
"RTN","IBCE837",184,0)
 ;         y = 1 for test, 0 for live txmt
"RTN","IBCE837",185,0)
 ;IBINS = ien of 1 ins co for batch
"RTN","IBCE837",186,0)
 ;
"RTN","IBCE837",187,0)
 N IB,IBL,IB1,IB2,IB3,IBQ,IBREC,IBDEL
"RTN","IBCE837",188,0)
 S IBDEL=$O(^IBA(364.5,"B","N-SEGMENT DELIMITER","")),IBDEL=$P($G(^IBA(364.5,+IBDEL,0)),U,8) S:IBDEL="" IBDEL="~"
"RTN","IBCE837",189,0)
 S IBSIZE=IBSIZE+IBSIZEM,IB1="",IBREC=""
"RTN","IBCE837",190,0)
 F  S IB1=$O(^TMP("IBXDATA",$J,1,IB1)) Q:IB1=""  D
"RTN","IBCE837",191,0)
 .S (IBREC,IB2)=""
"RTN","IBCE837",192,0)
 .F  S IB2=$O(^TMP("IBXDATA",$J,1,IB1,IB2)) Q:$S(IB2="":1,IB1=1:"",1:'$O(^(IB2,1)))  D
"RTN","IBCE837",193,0)
 ..S IB3="",IBREC=""
"RTN","IBCE837",194,0)
 ..F  S IB3=$O(^TMP("IBXDATA",$J,1,IB1,IB2,IB3)) D:IB3=""&($L(IBREC)) SETG Q:IB3=""  S:$S(IB3=1:1,1:$P(IBREC,U)'="") $P(IBREC,U,IB3)=$$UP^XLFSTR(^TMP("IBXDATA",$J,1,IB1,IB2,IB3))
"RTN","IBCE837",195,0)
 S IBBILL(IBIEN)=""
"RTN","IBCE837",196,0)
 K ^TMP("IBXDATA",$J)
"RTN","IBCE837",197,0)
 Q
"RTN","IBCE837",198,0)
 ;
"RTN","IBCE837",199,0)
SETHDR ; hdr for curr batch
"RTN","IBCE837",200,0)
 S ^TMP("IBHDR",$J)=$G(^TMP("IBXDATA",$J,1,5,1,2))
"RTN","IBCE837",201,0)
 Q
"RTN","IBCE837",202,0)
 ;
"RTN","IBCE837",203,0)
SETHDR1 ; hdr node for curr ins
"RTN","IBCE837",204,0)
 S ^TMP("IBHDR1",$J)=$G(^TMP("IBXDATA",$J,1,20,1,8))
"RTN","IBCE837",205,0)
 Q
"RTN","IBCE837",206,0)
 ;
"RTN","IBCE837",207,0)
SETG ; msg global for each segment
"RTN","IBCE837",208,0)
 S IBREC=$TR(IBREC,IBDEL)
"RTN","IBCE837",209,0)
 S IBREC=IBREC_IBDEL,IBSIZE=IBSIZE+$L(IBDEL)
"RTN","IBCE837",210,0)
 S IBLCNT=IBLCNT+1,^TMP("IBXMSG",$J,IBLCNT)=IBREC
"RTN","IBCE837",211,0)
 Q
"RTN","IBCE837",212,0)
 ;
"RTN","IBCE837",213,0)
ONE ; Txmt 1 or more bills in 'X' status
"RTN","IBCE837",214,0)
 Q:'$$MGCHK^IBCE(0)
"RTN","IBCE837",215,0)
 D SETUP(0)
"RTN","IBCE837",216,0)
 I '$D(IBXERR) D FIND,OUTPUT
"RTN","IBCE837",217,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",218,0)
 Q
"RTN","IBCE837",219,0)
 ;
"RTN","IBCE837A")
0^2^B30189202
"RTN","IBCE837A",1,0)
IBCE837A ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION - CONTINUED ;8/6/03 10:50am
"RTN","IBCE837A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,211,232**;21-MAR-94
"RTN","IBCE837A",3,0)
 ;
"RTN","IBCE837A",4,0)
UPD(MSGNUM,BATCH,CNT,BILLS,DESC,IBBTYP,IBINS) ; Upd current batch + bills w/new status
"RTN","IBCE837A",5,0)
 ;MSGNUM = mail msg # for batch
"RTN","IBCE837A",6,0)
 ;BATCH = batch #
"RTN","IBCE837A",7,0)
 ;CNT = # of bills in batch
"RTN","IBCE837A",8,0)
 ;BILLS = array BILLS(bill ien in 364) in batch
"RTN","IBCE837A",9,0)
 ;DESC = 1-80 character description of batch
"RTN","IBCE837A",10,0)
 ;IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",11,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",12,0)
 ;IBINS = ien of single insurance company for the batch (optional)
"RTN","IBCE837A",13,0)
 ;
"RTN","IBCE837A",14,0)
 N DIC,DIE,DR,DA,IBBATCH,IBIFN,IBIEN,IBYY,IBTXTEST,IBMRA
"RTN","IBCE837A",15,0)
 S IBBATCH=$O(^IBA(364.1,"B",+BATCH,"")) Q:'IBBATCH
"RTN","IBCE837A",16,0)
 S IBTXTEST=+$P(IBBTYP,"-",2)
"RTN","IBCE837A",17,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",18,0)
 ;
"RTN","IBCE837A",19,0)
 S DIE="^IBA(364.1,",DA=IBBATCH,DR=".02////P;.03///"_CNT_";.04///"_MSGNUM_";.05///0;.07////1;.08///^S X="""_DESC_""""_$S($G(IBINS):";.12////"_IBINS,1:"")
"RTN","IBCE837A",20,0)
 ;
"RTN","IBCE837A",21,0)
 I '$P($G(^TMP("IBRESUBMIT",$J)),U,3) S DR=DR_";1.01///NOW;1.02///.5"
"RTN","IBCE837A",22,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,2) S DR=DR_";.15////"_$P(^($J),U,2)
"RTN","IBCE837A",23,0)
 ;
"RTN","IBCE837A",24,0)
 S DR=DR_";.14////"_IBTXTEST_";.06////"_$S($E(IBBTYP)="P":2,1:3) D ^DIE ; Update batch
"RTN","IBCE837A",25,0)
 ;
"RTN","IBCE837A",26,0)
 S IBIEN=0 F  S IBIEN=$O(BILLS(IBIEN)) Q:'IBIEN  D  ;Update each bill
"RTN","IBCE837A",27,0)
 .S DA=IBIEN,DIE="^IBA(364,",DR=".02////"_IBBATCH_";.03///P;.04///NOW" D ^DIE
"RTN","IBCE837A",28,0)
 .S IBIFN=+$G(^IBA(364,IBIEN,0))
"RTN","IBCE837A",29,0)
 .Q:$D(^TMP("IBRESUBMIT",$J))!($P($G(^DGCR(399,IBIFN,0)),U,13)=4)!(+$$TXMT^IBCEF4(IBIEN)=2)
"RTN","IBCE837A",30,0)
 .S IBMRA=$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCE837A",31,0)
 .I IBMRA="C",$P($G(^DGCR(399,IBIFN,0)),U,13)=2 S IBMRA=1
"RTN","IBCE837A",32,0)
 .I IBIFN D
"RTN","IBCE837A",33,0)
 ..S (DIC,DIE)="^DGCR(399,",DA=$P($G(^IBA(364,IBIEN,0)),U),DR="[IB STATUS]",IBYY=$S('IBMRA:"@91",1:"@911") D:DA ^DIE
"RTN","IBCE837A",34,0)
 ..D BSTAT^IBCDC(IBIFN) ; remove from AB list
"RTN","IBCE837A",35,0)
 Q
"RTN","IBCE837A",36,0)
 ;
"RTN","IBCE837A",37,0)
PRE ; Run before processing a bill entry
"RTN","IBCE837A",38,0)
 K IBXSAVE,IBXERR,^UTILITY("VAPA",$J),^TMP("IBXSAVE",$J),^TMP($J),^TMP("DIERR",$J)
"RTN","IBCE837A",39,0)
 Q
"RTN","IBCE837A",40,0)
 ;
"RTN","IBCE837A",41,0)
POST ; Run after processing a bill entry for cleanup
"RTN","IBCE837A",42,0)
 N Q
"RTN","IBCE837A",43,0)
 I $G(IBXERR)'="" D
"RTN","IBCE837A",44,0)
 .S ^TMP("IBXERR",$J,IBXIEN)=IBXERR K ^TMP("IBXDATA",$J)
"RTN","IBCE837A",45,0)
 .K ^TMP("IBHDR1",$J)
"RTN","IBCE837A",46,0)
 .I $D(^TMP("IBRESUBMIT",$J)) D  ;Set not resub flag for bill
"RTN","IBCE837A",47,0)
 ..N Z,Z0
"RTN","IBCE837A",48,0)
 ..S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U) Q:Z0=""
"RTN","IBCE837A",49,0)
 ..S Z=$O(^IBA(364,"ABABI",+$O(^IBA(364.1,"B",Z0,"")),IBXIEN,""))
"RTN","IBCE837A",50,0)
 ..I Z S ^TMP("IBNOT",$J,Z)=IBXIEN
"RTN","IBCE837A",51,0)
 K IBXSAVE,IBXNOREQ,^TMP("IBXSAVE",$J),^TMP($J)
"RTN","IBCE837A",52,0)
 S Q="VA" F  S Q=$O(^UTILITY(Q)) Q:$E(Q,1,2)'="VA"  I $D(^(Q,$J)) K ^UTILITY(Q,$J)
"RTN","IBCE837A",53,0)
 D CLEAN^DILF
"RTN","IBCE837A",54,0)
 Q
"RTN","IBCE837A",55,0)
 ;
"RTN","IBCE837A",56,0)
MAILIT(IBQUEUE,IBBILL,IBCTM,IBDUZ,IBDESC,IBBTYP,IBINS) ; Send mail msg, update bills
"RTN","IBCE837A",57,0)
 ;IBQUEUE = mail queue name to send 837 transactions to
"RTN","IBCE837A",58,0)
 ;IBBILL = array of ien's in file 364 of bills in batch - IBBILL(IEN)=""
"RTN","IBCE837A",59,0)
 ;IBCTM = # of bills in batch, returned reset to 0
"RTN","IBCE837A",60,0)
 ;IBDUZ = ien of user 'running' extract (if any)
"RTN","IBCE837A",61,0)
 ;IBDESC = description of batch
"RTN","IBCE837A",62,0)
 ;IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",63,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",64,0)
 ;IBINS = ien of insurance company if only one/batch option (optional)
"RTN","IBCE837A",65,0)
 ;
"RTN","IBCE837A",66,0)
 N DIK,DA,XMTO,XMZ,XMBODY,XMDUZ,XMSUBJ,IBBDA,IBBNO
"RTN","IBCE837A",67,0)
 ;
"RTN","IBCE837A",68,0)
 S IBBNO=+$P($G(^TMP("IBHDR",$J)),U),IBBDA=$O(^IBA(364.1,"B",IBBNO,""))
"RTN","IBCE837A",69,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",70,0)
 ;
"RTN","IBCE837A",71,0)
 I IBCTM D
"RTN","IBCE837A",72,0)
 . I IBQUEUE'="",IBQUEUE'["@" S XMTO("XXX@Q-"_IBQUEUE_".VA.GOV")=""
"RTN","IBCE837A",73,0)
 . I IBQUEUE["@" S XMTO(IBQUEUE)=""
"RTN","IBCE837A",74,0)
 . S XMDUZ=$G(IBDUZ),XMBODY="^TMP(""IBXMSG"","_$J_")",XMSUBJ=$S($P(IBBTYP,U,2):"** TEST ",1:"")_"CLAIM BATCH: "_$S(IBQUEUE'["@":IBQUEUE,1:$P(IBQUEUE,"@"))_"/"_IBBNO
"RTN","IBCE837A",75,0)
 . K XMZ
"RTN","IBCE837A",76,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",77,0)
 . I $G(XMZ) D
"RTN","IBCE837A",78,0)
 .. D UPD(XMZ,$P($G(^TMP("IBHDR",$J)),U),IBCTM,.IBBILL,IBDESC,IBBTYP,IBINS) ;Update batch/bills
"RTN","IBCE837A",79,0)
 .. S ^TMP("IBCE-BATCH",$J,IBBNO)=IBBDA_U_IBCTM
"RTN","IBCE837A",80,0)
MAILQ S IBCTM=0
"RTN","IBCE837A",81,0)
 D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",82,0)
 K ^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXMSG",$J),IBBILL
"RTN","IBCE837A",83,0)
 Q
"RTN","IBCE837A",84,0)
 ;
"RTN","IBCE837A",85,0)
CHKNEW(IBQ,IBBILL,IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,IBSIZE) ;
"RTN","IBCE837A",86,0)
 ;  Determine if ok to send msg
"RTN","IBCE837A",87,0)
 ;  Check for one insurance per batch if IBINS defined
"RTN","IBCE837A",88,0)
 ; Returns IBSIZE, IBCTM, IBBILL (pass by reference)
"RTN","IBCE837A",89,0)
 ;
"RTN","IBCE837A",90,0)
 ; IBQ = data queue name
"RTN","IBCE837A",91,0)
 ; IBBILL = the 'list' of bill #'s in the batch
"RTN","IBCE837A",92,0)
 ; IBCTM = the # of claims output so far to the batch
"RTN","IBCE837A",93,0)
 ; IBDESC = the batch description text
"RTN","IBCE837A",94,0)
 ; IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",95,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",96,0)
 ; IBINS = the ien of the single insurance co. for the batch (optional)
"RTN","IBCE837A",97,0)
 ; IBSITE = the '8' node of file 350.9 (IB PARAMETERS)
"RTN","IBCE837A",98,0)
 ; IBSIZE = the 'running' size of the output message
"RTN","IBCE837A",99,0)
 ;
"RTN","IBCE837A",100,0)
 Q:$S($G(IBINS)="":0,1:'$P(IBSITE,U,7))
"RTN","IBCE837A",101,0)
 ;
"RTN","IBCE837A",102,0)
 ; New batch needed
"RTN","IBCE837A",103,0)
 I IBCTM D MAILIT(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0
"RTN","IBCE837A",104,0)
 Q
"RTN","IBCE837A",105,0)
 ;
"RTN","IBCE837A",106,0)
ERRMSG(XMBODY) ; Send bulletin for error message
"RTN","IBCE837A",107,0)
 N XMTO,XMSUBJ
"RTN","IBCE837A",108,0)
 S XMTO("I:G.IB EDI")="",XMSUBJ="EDI 837 TRANSMISSION ERRORS"
"RTN","IBCE837A",109,0)
 ;
"RTN","IBCE837A",110,0)
 D SENDMSG^XMXAPI(,XMSUBJ,XMBODY,.XMTO)
"RTN","IBCE837A",111,0)
 D ALERT("One or more EDI bills were not transmitted.  Check your mail for details","G.IB EDI")
"RTN","IBCE837A",112,0)
 Q
"RTN","IBCE837A",113,0)
 ;
"RTN","IBCE837A",114,0)
CLEANUP ; Cleans up bill transmission environment
"RTN","IBCE837A",115,0)
 ;
"RTN","IBCE837A",116,0)
 L -^IBA(364,0)
"RTN","IBCE837A",117,0)
 I $D(^TMP("IBRESUBMIT",$J,"IBXERR"))!$D(^TMP("IBONE",$J,"IBXERR"))!$D(^TMP("IBSELX",$J,"IBXERR")) D  ;Error message to mail group
"RTN","IBCE837A",118,0)
 . N XMTO,XMBODY,XMDUZ,XMSUBJ,XMZ,IBFUNC
"RTN","IBCE837A",119,0)
 . S IBFUNC=$S($D(^TMP("IBRESUBMIT",$J,"IBXERR")):1,$D(^TMP("IBONE",$J,"IBXERR")):2,1:3)
"RTN","IBCE837A",120,0)
 . Q:'IBFUNC
"RTN","IBCE837A",121,0)
 . S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="^TMP("""_$S(IBFUNC=1:"IBRESUBMIT",1:"IBONE")_""","_$J_",""IBXERR"")",XMSUBJ="EDI 837 B"_$P("ATCH^ILL^ILL(s)",U,IBFUNC)_" NOT "_$S($G(^TMP("IBONE",$J)):"RE",1:"")_"SUBMITTED"
"RTN","IBCE837A",122,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",123,0)
 . K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837A",124,0)
 ;
"RTN","IBCE837A",125,0)
 I $D(^TMP("IBRESUBMIT",$J)) D RESUBUP^IBCEM02 ;Upd resubmtd batch bills
"RTN","IBCE837A",126,0)
 I '$D(^TMP("IBSELX",$J)) K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837A",127,0)
 K ^TMP("IBXERR",$J),IBXERR
"RTN","IBCE837A",128,0)
 D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",129,0)
CLEANP ;  Entrypoint for extract data disply
"RTN","IBCE837A",130,0)
 K ^TMP("IBTXMT",$J),^TMP("IBXINS",$J)
"RTN","IBCE837A",131,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBRESUB",$J),^TMP("IBNOT",$J),^TMP("IBONE",$J),^TMP("IBHDR",$J),^TMP("IBTX",$J)
"RTN","IBCE837A",132,0)
 K ^UTILITY("VADM",$J)
"RTN","IBCE837A",133,0)
 D CLEAN^DILF
"RTN","IBCE837A",134,0)
 K ZTREQ S ZTREQ="@"
"RTN","IBCE837A",135,0)
 Q
"RTN","IBCE837A",136,0)
 ;
"RTN","IBCE837A",137,0)
ALERT(XQAMSG,IBGRP) ; Send alert message
"RTN","IBCE837A",138,0)
 N XQA
"RTN","IBCE837A",139,0)
 S XQA(IBGRP)=""
"RTN","IBCE837A",140,0)
 D SETUP^XQALERT
"RTN","IBCE837A",141,0)
 Q
"RTN","IBCE837A",142,0)
CHKBTCH(IBBNO) ; Delete batch whose batch # is IBBNO if no entries in file 364
"RTN","IBCE837A",143,0)
 ; and not a resubmitted batch
"RTN","IBCE837A",144,0)
 N IBZ,DA,DIK
"RTN","IBCE837A",145,0)
 S IBZ=+$O(^IBA(364.1,"B",+IBBNO,""))
"RTN","IBCE837A",146,0)
 I IBZ,'$O(^IBA(364,"C",IBZ,0)),'$P($G(^IBA(364.1,IBZ,0)),U,13) S DA=IBZ,DIK="^IBA(364.1," D ^DIK
"RTN","IBCE837A",147,0)
 Q
"RTN","IBCE837A",148,0)
 ;
"RTN","IBCEF2")
0^3^B52022759
"RTN","IBCEF2",1,0)
IBCEF2 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;8/6/03 10:54am
"RTN","IBCEF2",2,0)
 ;;2.0;INTEGRATED BILLING;**52,85,51,137,232**;21-MAR-94
"RTN","IBCEF2",3,0)
 ;
"RTN","IBCEF2",4,0)
HOS(IBIFN) ; Extract rev codes for inst. episode into IBXDATA
"RTN","IBCEF2",5,0)
 ; Moved for space
"RTN","IBCEF2",6,0)
 D HOS^IBCEF22(IBIFN)
"RTN","IBCEF2",7,0)
 Q
"RTN","IBCEF2",8,0)
 ;
"RTN","IBCEF2",9,0)
OTHINS(IBIFN) ;Determine 'other insurance' node (I1,I2)
"RTN","IBCEF2",10,0)
 ; If primary bill, other ins is secondary
"RTN","IBCEF2",11,0)
 ; If sec or tert bill, other ins is primary
"RTN","IBCEF2",12,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",13,0)
 N Z
"RTN","IBCEF2",14,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",15,0)
 Q "I"_$S(Z=1:2,1:1)
"RTN","IBCEF2",16,0)
 ;
"RTN","IBCEF2",17,0)
OTHINS1(IBIFN) ; Returns the COB #'s of all 'other insurance' as a string
"RTN","IBCEF2",18,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",19,0)
 N IBC,Z
"RTN","IBCEF2",20,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",21,0)
 I Z=1 S IBC=$S($D(^DGCR(399,IBIFN,"I2")):$S($D(^DGCR(399,IBIFN,"I3")):23,1:2),1:"") ;Primary=>2 or 23
"RTN","IBCEF2",22,0)
 I Z=2 S IBC="1"_$S($D(^DGCR(399,IBIFN,"I3")):3,1:"") ;Secondary=>1 or 13
"RTN","IBCEF2",23,0)
 I Z=3 S IBC="12" ;Tertiary =>12
"RTN","IBCEF2",24,0)
OTHQ Q IBC
"RTN","IBCEF2",25,0)
 ;
"RTN","IBCEF2",26,0)
RECVR(IBIFN) ; Returns the V.A. internal routing id of the current ins
"RTN","IBCEF2",27,0)
 ; co for 837
"RTN","IBCEF2",28,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",29,0)
 N MCR,NUM,IBPH
"RTN","IBCEF2",30,0)
 S IBPH=$P("P^H",U,$$FT^IBCEF(IBIFN)-1)
"RTN","IBCEF2",31,0)
 S NUM="ENVOY"_IBPH       ; 155 version
"RTN","IBCEF2",32,0)
 ; If rate type is CHAMPVA, send 'CHAMVA'
"RTN","IBCEF2",33,0)
 I $P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U)="CHAMPVA" S NUM="CHAMV"_IBPH
"RTN","IBCEF2",34,0)
 I NUM["ENVOY",$$MCRWNR^IBEFUNC(+$$CURR(IBIFN)) D  ;Find out PART A/B for MEDICARE    155 version
"RTN","IBCEF2",35,0)
 . S MCR=$$MRATYPE^IBEFUNC(IBIFN)
"RTN","IBCEF2",36,0)
 . I MCR'="","AB"[MCR S NUM="PART"_MCR
"RTN","IBCEF2",37,0)
 Q NUM
"RTN","IBCEF2",38,0)
 ;
"RTN","IBCEF2",39,0)
ALLPAYID(IBIFN,IBXDATA,SEQ) ; Returns clearinghouse id for all (SEQ="")
"RTN","IBCEF2",40,0)
 ;  or a specific (SEQ=1,2,3) ins co's for 837 in IBXDATA(n) for bill ien
"RTN","IBCEF2",41,0)
 ;  IBIFN
"RTN","IBCEF2",42,0)
 N Z,Z0,Z1,A,IBM,IBINST,IBMCR,IBX
"RTN","IBCEF2",43,0)
 S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCEF2",44,0)
 F Z=1:1:3 I $S('$G(SEQ):1,1:Z=SEQ) S Z0=$P(IBM,U,Z) I Z0 D  S:A'="" IBXDATA(Z)=A
"RTN","IBCEF2",45,0)
 . S A=""
"RTN","IBCEF2",46,0)
 . S IBINST=($$FT^IBCEF(IBIFN)=3) ;Is bill UB-92?
"RTN","IBCEF2",47,0)
 . S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN),Z1=$G(^DGCR(399,IBIFN,"TX"))
"RTN","IBCEF2",48,0)
 . Q:$P(Z1,U,8)=1  ;Forced local print
"RTN","IBCEF2",49,0)
 . S A=$S($P(Z1,U,8)'=2:$P($G(^DIC(36,Z0,3)),U,$S(IBINST:4,1:2)),1:"")
"RTN","IBCEF2",50,0)
 . S A=$$UP^XLFSTR(A)
"RTN","IBCEF2",51,0)
 . ;
"RTN","IBCEF2",52,0)
 . ; RPRNT = HCFA 1500 Rx bills
"RTN","IBCEF2",53,0)
 . ; IPRNT = Inst with MRA 
"RTN","IBCEF2",54,0)
 . ; PPRNT = Prof with MRA
"RTN","IBCEF2",55,0)
 . ; No MRA: HPRNT = inst printed bills
"RTN","IBCEF2",56,0)
 . ;         SPRNT = prof printed bills
"RTN","IBCEF2",57,0)
 . ; Default to appropriate 'xPRNT' if Rx bill or COB bill or forced to
"RTN","IBCEF2",58,0)
 . ;    print - claims must print at clearinghouse
"RTN","IBCEF2",59,0)
 . ;
"RTN","IBCEF2",60,0)
 . I 'IBINST,$$ISRX^IBCEF1(IBIFN) S A="RPRNT" Q  ; Rx bills on HCFA 1500
"RTN","IBCEF2",61,0)
 . I $P(Z1,U,8)=2 S A=$S(IBINST:"H",1:"S")_"PRNT" Q  ;Forced to print
"RTN","IBCEF2",62,0)
 . ;
"RTN","IBCEF2",63,0)
 . ; If not a primary bill force to print
"RTN","IBCEF2",64,0)
 . I Z>1,IBMCR=1,$P(Z1,U,5)="C" S A=$S(IBINST:"I",1:"P")_"PRNT" Q
"RTN","IBCEF2",65,0)
 . I $$WNRBILL^IBEFUNC(IBIFN,Z) S A=$S(IBINST:"12M61",1:"SMTX1") Q
"RTN","IBCEF2",66,0)
 . ; If not a primary bill force to print
"RTN","IBCEF2",67,0)
 . I Z>1,Z=$$COBN^IBCEF(IBIFN) S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",68,0)
 ;
"RTN","IBCEF2",69,0)
 Q
"RTN","IBCEF2",70,0)
 ;
"RTN","IBCEF2",71,0)
PAYERID(IBIFN) ; Returns clearinghouse id for current ins co
"RTN","IBCEF2",72,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",73,0)
 N NUM,IBSEQ
"RTN","IBCEF2",74,0)
 ; Determine the current ins co's # to identify at WEBMD
"RTN","IBCEF2",75,0)
 ; Envoy changed to WEBMD in patch 232
"RTN","IBCEF2",76,0)
 S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",77,0)
 D ALLPAYID(IBIFN,.NUM,IBSEQ) S NUM=$G(NUM(IBSEQ))
"RTN","IBCEF2",78,0)
 Q $G(NUM)
"RTN","IBCEF2",79,0)
 ;
"RTN","IBCEF2",80,0)
CURR(IBIFN) ; Returns ien of the current insurance
"RTN","IBCEF2",81,0)
 ; company for bill ien IBIFN
"RTN","IBCEF2",82,0)
 Q $$FINDINS^IBCEF1(IBIFN)
"RTN","IBCEF2",83,0)
 ;
"RTN","IBCEF2",84,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF2",85,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",86,0)
 ; NOOUTCK = flag that will:
"RTN","IBCEF2",87,0)
 ;          (1) no check for inpt episode overlap for outpt
"RTN","IBCEF2",88,0)
 ;          (0 or null) performs check for inpt episode overlap for outpt
"RTN","IBCEF2",89,0)
 ;                                      
"RTN","IBCEF2",90,0)
 ; Returns IBXDATA = fileman date format
"RTN","IBCEF2",91,0)
 N Z,Z0,Z1
"RTN","IBCEF2",92,0)
 S Z=$G(^DGCR(399,IBIFN,0)),Z1=$P($G(^("U")),U,20),Z0=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF2",93,0)
 S IBXDATA=$S(Z0&$P(Z,U,8):$P($G(^DGPT(+$P(Z,U,8),0)),U,2),1:"")
"RTN","IBCEF2",94,0)
 S:'IBXDATA IBXDATA=$P(Z,U,3)_$S(Z0&(Z1<25):"."_$E("0",$L(Z1))_Z1,1:"")
"RTN","IBCEF2",95,0)
 ; Check to see if outpt episode (date in event date) overlaps inpt
"RTN","IBCEF2",96,0)
 ;  episode - use admit date if it does
"RTN","IBCEF2",97,0)
 I 'Z0,IBXDATA,'$G(NOOUTCK) D
"RTN","IBCEF2",98,0)
 . N VAINDT,VAIN,DFN
"RTN","IBCEF2",99,0)
 . S VAINDT=IBXDATA,DFN=$P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBCEF2",100,0)
 . D INP^VADPT S IBXDATA=+VAIN(7) S:'IBXDATA IBXDATA=""
"RTN","IBCEF2",101,0)
 I 'IBXDATA,'Z0 S IBXDATA=$$SERVDT^IBCEF(IBIFN,,2)
"RTN","IBCEF2",102,0)
 Q
"RTN","IBCEF2",103,0)
 ;
"RTN","IBCEF2",104,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF2",105,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",106,0)
 N Z,Z0
"RTN","IBCEF2",107,0)
 S Z=$$INPAT^IBCEF(IBIFN,1),Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF2",108,0)
 I Z S IBXDATA=+$G(^DGPT(+$P(Z0,U,8),70)) S:'IBXDATA IBXDATA=$P(Z0,U,16)
"RTN","IBCEF2",109,0)
 I 'Z N VAINDT,VAIN,DFN S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2) D INP^VADPT I VAIN(1) S IBXDATA=+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF2",110,0)
 Q
"RTN","IBCEF2",111,0)
 ;
"RTN","IBCEF2",112,0)
INDTS(IBIFN) ; Function returns the admit ^ discharge date/time of admission if patient is an inpatient on bill's event date
"RTN","IBCEF2",113,0)
 N Z,Z0,DFN,VAINDT,VAIN S Z0=""
"RTN","IBCEF2",114,0)
 S Z=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(Z,U,2),VAINDT=$P(Z,U,3)
"RTN","IBCEF2",115,0)
 I +DFN,+VAINDT D INP^VADPT I +VAIN(1) S Z0=+VAIN(7)_U_+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF2",116,0)
 Q Z0
"RTN","IBCEF2",117,0)
 ;
"RTN","IBCEF2",118,0)
TXMT(IBIFN) ; Function moved - use new call in IBCEF4
"RTN","IBCEF2",119,0)
 Q $$TXMT^IBCEF4(IBIFN)
"RTN","IBCEF2",120,0)
 ;
"RTN","IBCEF2",121,0)
 ;
"RTN","IBCEF2",122,0)
ID(LN,VAL) ; Set EXTRACT GLOBAL for multi-valued record
"RTN","IBCEF2",123,0)
 ; ids for Austin
"RTN","IBCEF2",124,0)
 ; LN = the line # being extracted
"RTN","IBCEF2",125,0)
 ; VAL = the value of the element being extracted
"RTN","IBCEF2",126,0)
 ;
"RTN","IBCEF2",127,0)
 ; Assumes IBXPG exists
"RTN","IBCEF2",128,0)
 ;
"RTN","IBCEF2",129,0)
 Q:LN<2
"RTN","IBCEF2",130,0)
 D SETGBL^IBCEFG(IBXPG,LN,1,VAL,.IBXSIZE)
"RTN","IBCEF2",131,0)
 Q
"RTN","IBCEF2",132,0)
 ;
"RTN","IBCEF2",133,0)
ID1(LN,DX,CT) ;Special entrypoint for diagnoses to 'save' the fact
"RTN","IBCEF2",134,0)
 ;   a dx code is an e-code.
"RTN","IBCEF2",135,0)
 ; LN is last entry # output, returned as the entry # (IBXLINE) to assign to this entry
"RTN","IBCEF2",136,0)
 ; DX = the actual Dx code array(RECORD ID). Pass by reference, DX returned null if
"RTN","IBCEF2",137,0)
 ;      dx was not output
"RTN","IBCEF2",138,0)
 ; CT = the ct on the 'DC' entry.  pass by reference, returned null if
"RTN","IBCEF2",139,0)
 ;      the end of the valid dx codes has been reached
"RTN","IBCEF2",140,0)
 N IBINS,VAL
"RTN","IBCEF2",141,0)
 S IBINS=($$FT^IBCEF(IBXIEN)=3)
"RTN","IBCEF2",142,0)
 S VAL="DC"_CT                     ; **232**
"RTN","IBCEF2",143,0)
 S VAL=$E(VAL_" ",1,4)
"RTN","IBCEF2",144,0)
 ;I 'IBINS,CT>8 S CT=""  ;Only 8 codes for professional/HCFA  **232**
"RTN","IBCEF2",145,0)
 I IBINS D
"RTN","IBCEF2",146,0)
 . I CT>8 S CT="" Q  ;Only 8 codes for institutional/UB  **232**
"RTN","IBCEF2",147,0)
 . ; Check for 'E-code'.  If there, don't extract the first one as a dx,
"RTN","IBCEF2",148,0)
 . ;     but as a special E-code
"RTN","IBCEF2",149,0)
 . I $G(IBXSAVE("DX-E"))="",$E($G(DX))="E" S IBXSAVE("DX-E")=DX,DX=""
"RTN","IBCEF2",150,0)
 I 'IBINS,CT>4 S ^TMP("IBXSAVE",$J,"DX",IBXIEN)=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN))+1,^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(+^TMP("IBXSAVE",$J,"DX",IBXIEN)),U,2))=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN)),DX="" Q
"RTN","IBCEF2",151,0)
 I CT'="",DX'="" S LN=LN+1 D ID(LN,VAL) S ^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(LN),U,2))=LN,^TMP("IBXSAVE",$J,"DX",IBXIEN)=CT,CT=CT+1 Q
"RTN","IBCEF2",152,0)
 Q
"RTN","IBCEF2",153,0)
 ;
"RTN","IBCEF2",154,0)
M(CT) ; Calculate multi-valued field for 837 extract
"RTN","IBCEF2",155,0)
 ; CT = passed by reference/the record ID counter
"RTN","IBCEF2",156,0)
 S CT=CT+1
"RTN","IBCEF2",157,0)
 Q $E(CT#12+$S(CT#12:0,1:12)_" ",1,2)
"RTN","IBCEF2",158,0)
 ;
"RTN","IBCEF2",159,0)
SVITM(IBA,LINE) ; Saves the linked items from the bill data extract into
"RTN","IBCEF2",160,0)
 ; an array the formatter will use to link Rxs and prosthetics
"RTN","IBCEF2",161,0)
 ; to an SV1 or SV2 line item, if possible.  Kills off IBA array entries
"RTN","IBCEF2",162,0)
 ; after they are 'moved'
"RTN","IBCEF2",163,0)
 ; IBA = array that contains the data to be saved
"RTN","IBCEF2",164,0)
 ;   subscripts are (line #,item type,item pointer)=ct
"RTN","IBCEF2",165,0)
 N Z0,Z1
"RTN","IBCEF2",166,0)
 S Z0="" F  S Z0=$O(IBA("OUTPT",LINE,Z0)) Q:Z0=""  I Z0?1N.N  S Z1="" F  S Z1=$O(IBA("OUTPT",LINE,Z0,Z1)) Q:Z1=""  S ^TMP($J,"IBITEM",Z0,Z1,LINE)=IBA("OUTPT",LINE,Z0,Z1) K IBA("OUTPT",LINE,Z0,Z1)
"RTN","IBCEF2",167,0)
 Q
"RTN","IBCEF2",168,0)
 ;
"RTN","IBCEF2",169,0)
LINK(IBTYP,IBDATA) ; Link the item with a service line, if possible
"RTN","IBCEF2",170,0)
 ; IBTYP = the code for the type of item
"RTN","IBCEF2",171,0)
 ;         returned incremented if no link is made
"RTN","IBCEF2",172,0)
 ; IBDATA = the extracted data string that identifies the item. 
"RTN","IBCEF2",173,0)
 ; Returns the line to link to or null if no link
"RTN","IBCEF2",174,0)
 N IBLN,IBKEY,Z
"RTN","IBCEF2",175,0)
 S IBLN=""
"RTN","IBCEF2",176,0)
 S IBKEY=$S(IBTYP=3:$P(IBDATA,U,9),IBTYP=5:$P(IBDATA,U,4),1:"") Q:IBKEY=""
"RTN","IBCEF2",177,0)
 I $D(^TMP($J,"IBITEM",IBTYP,IBKEY)) D  G:IBLN LINKQ
"RTN","IBCEF2",178,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",179,0)
 I $D(^TMP($J,"IBITEM",IBTYP,0)) S IBKEY=0 D
"RTN","IBCEF2",180,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",181,0)
LINKQ Q IBLN
"RTN","IBCEF2",182,0)
 ;
"RTN","IBCEF2",183,0)
COID(IBIFN) ; Claim office ID - moved for space
"RTN","IBCEF2",184,0)
 Q $$COID^IBCEF21(IBIFN)
"RTN","IBCEF2",185,0)
 ;
"RTN","IBCEF2",186,0)
PPOL(IBIFN,COB) ; return IFN of patient policy on a bill defined by COB (fields 399,112-114)
"RTN","IBCEF2",187,0)
 N X,Y,PPOL S PPOL=""
"RTN","IBCEF2",188,0)
 I +$G(IBIFN) S X=$G(^DGCR(399,+IBIFN,"M")) I +$G(COB),COB<4 S Y=COB+11,PPOL=$P(X,U,Y)
"RTN","IBCEF2",189,0)
 Q PPOL
"RTN","IBCEF2",190,0)
 ;
"RTN","IBCEF2",191,0)
LADJ(SUB,LINE,SEQ1,GRP,IBXSAVE,PIECE) ; Extract line level adjustments
"RTN","IBCEF2",192,0)
 ; SUB     = 1st subscript in IBXSAVE array to use
"RTN","IBCEF2",193,0)
 ; LINE    = 2nd subscript
"RTN","IBCEF2",194,0)
 ; SEQ1    = 4th subscript
"RTN","IBCEF2",195,0)
 ; GRP     = 5th subscript
"RTN","IBCEF2",196,0)
 ; IBXSAVE = array that has the data for COB line level adjustments
"RTN","IBCEF2",197,0)
 ; PIECE   = # of the piece on the 0-node of the line level
"RTN","IBCEF2",198,0)
 ;           adjustment reason to be extracted
"RTN","IBCEF2",199,0)
 ;
"RTN","IBCEF2",200,0)
 N A,B
"RTN","IBCEF2",201,0)
 S (A,B)=0
"RTN","IBCEF2",202,0)
 F  S A=$O(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A)) Q:'A  D
"RTN","IBCEF2",203,0)
 . S B=B+1,IBXDATA(B)=$P(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A),U,PIECE)
"RTN","IBCEF2",204,0)
 Q
"RTN","IBCEF2",205,0)
 ;
"RTN","IBCEF2",206,0)
ESGHPST(IBIFN,COB) ; return insureds employ status if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",207,0)
 Q $$ESGHPST^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",208,0)
 ;
"RTN","IBCEF2",209,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",210,0)
 Q $$ESGHPNL^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",211,0)
 ;
"RTN","IBCEF2",212,0)
AMTOUT(A,B,C,IBXSAVE) ; format output amount
"RTN","IBCEF2",213,0)
 ;
"RTN","IBCEF2",214,0)
 N Z,K,IBZ,IBARR K IBXDATA S (IBZ,K)=0,IBARR="IBXSAVE("""_A_""")" F  S IBZ=$O(@IBARR@(IBZ)) Q:'IBZ  S K=K+1,Z=0 F  S Z=$O(@IBARR@(IBZ,Z)) Q:'Z  I $P($G(@IBARR@(IBZ,Z,B)),U,C) S IBXDATA(K)=$$DOLLAR^IBCEFG1($G(IBXDATA(K))+$P(@IBARR@(IBZ,Z,B),U,C))
"RTN","IBCEF2",215,0)
 Q
"RTN","IBCEF4")
0^11^B24863277
"RTN","IBCEF4",1,0)
IBCEF4 ;ALB/TMP - MRA/EDI ACTIVATED UTILITIES ;06-FEB-96
"RTN","IBCEF4",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232**;21-MAR-94
"RTN","IBCEF4",3,0)
 ;
"RTN","IBCEF4",4,0)
EDIACTV(IBEDIMRA) ; Returns 0 if EDI or MRA is not active, 
"RTN","IBCEF4",5,0)
 ; otherwise, returns 1
"RTN","IBCEF4",6,0)
 ; IBEDIMRA : 1= checking if EDI is active, 2= checking if MRA is active
"RTN","IBCEF4",7,0)
 N IBEDI
"RTN","IBCEF4",8,0)
 S IBEDI=$P($G(^IBE(350.9,1,8)),U,10)
"RTN","IBCEF4",9,0)
 Q $S('IBEDI:0,IBEDI=3:1,1:IBEDI=IBEDIMRA)
"RTN","IBCEF4",10,0)
 ;
"RTN","IBCEF4",11,0)
RATEOK(IBIFN) ; Returns 1 if rate type of bill IBIFN is transmittable
"RTN","IBCEF4",12,0)
 Q +$P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U,10)
"RTN","IBCEF4",13,0)
 ;
"RTN","IBCEF4",14,0)
INSOK(INS) ; Determine EDI activation status of insurance co
"RTN","IBCEF4",15,0)
 Q +$G(^DIC(36,INS,3))  ;1 = TEST, 2 = LIVE, 0 = NOT ACTIVE FOR EDI
"RTN","IBCEF4",16,0)
 ;
"RTN","IBCEF4",17,0)
BSTATX(IBIFN) ; Returns internal value of bill's latest transmission status
"RTN","IBCEF4",18,0)
 N IBDA
"RTN","IBCEF4",19,0)
 Q $P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,3)
"RTN","IBCEF4",20,0)
 ;
"RTN","IBCEF4",21,0)
LAST364(IBIFN) ; Determine ien of latest transmit bill record for a bill
"RTN","IBCEF4",22,0)
 Q +$O(^IBA(364,"ABDT",IBIFN,+$O(^IBA(364,"ABDT",IBIFN,""),-1),""),-1)
"RTN","IBCEF4",23,0)
 ;
"RTN","IBCEF4",24,0)
TXMT(IBIFN,IBWHY,IBNEW) ; Determine if bill # IBIFN is 'transmittable'
"RTN","IBCEF4",25,0)
 ; IBNEW = flag is 1 if new entry - don't check for entry in file 364
"RTN","IBCEF4",26,0)
 ; Function returns:
"RTN","IBCEF4",27,0)
 ;        0 if not transmittable
"RTN","IBCEF4",28,0)
 ;        if transmittable, the entire node 3 of the insurance company
"RTN","IBCEF4",29,0)
 ;  and, if passed by reference IBWHY = reason not transmittable
"RTN","IBCEF4",30,0)
 ;                    1 if local print
"RTN","IBCEF4",31,0)
 ;                    2 if EDI/MRA not active
"RTN","IBCEF4",32,0)
 ;                    3 if rate type not transmittable
"RTN","IBCEF4",33,0)
 ;                    4 if no transmit for insurance co
"RTN","IBCEF4",34,0)
 ;                    5 if failed txmn rules
"RTN","IBCEF4",35,0)
 ;                      and IBWHY(0) = ien of rule failed
"RTN","IBCEF4",36,0)
 ;                    6 if Rx with missing/invalid NDC format
"RTN","IBCEF4",37,0)
 ;
"RTN","IBCEF4",38,0)
 N IB,IB0,IBOK,IBCOB,IBMCR,X1
"RTN","IBCEF4",39,0)
 S IBOK=1,IB=IBIFN,IBWHY=""
"RTN","IBCEF4",40,0)
 ;
"RTN","IBCEF4",41,0)
 S IBCOB=$$COBN^IBCEF(IB),IB(.07)=+$G(^DGCR(399,IB,"I"_IBCOB))
"RTN","IBCEF4",42,0)
 S IBMCR=$$MCRWNR^IBEFUNC(IB(.07))
"RTN","IBCEF4",43,0)
 ; Does bill have force local print flag set? - never force MRA requests
"RTN","IBCEF4",44,0)
 I 'IBMCR,$P($G(^DGCR(399,IBIFN,"TX")),U,8)=1 S IBOK=0,IBWHY=1 G TXMTQ
"RTN","IBCEF4",45,0)
 ; Don't transmit prosthetics bills - must print locally
"RTN","IBCEF4",46,0)
 ; I $$ISPROS^IBCEF1(IBIFN) S IBOK=0 G TXMTQ
"RTN","IBCEF4",47,0)
 I '$G(IBNEW),'$O(^IBA(364,"B",IBIFN,0)),$P($G(^DGCR(399,IBIFN,0)),U,13)>2,'$$RETN^PRCAFN(IBIFN) S IBOK=0 G TXMTQ ; Not recognized as transmittable when it was authorized
"RTN","IBCEF4",48,0)
 I $O(^IBA(364,"B",IBIFN,0)),$$INSOK(IB(.07)),$$BSTATX(IBIFN)'="X" G TXMTQ ;Already determined to be transmittable - entry exists for bill in transmit bill file
"RTN","IBCEF4",49,0)
 S IB(.03)=$S('IBMCR:1,1:2) ; EDI(1) or MRA(2)
"RTN","IBCEF4",50,0)
 S IB(.04)=$S('$$INPAT^IBCEF(IB,1):1,1:2) ;Outpt(1) or Inpt(2)
"RTN","IBCEF4",51,0)
 S IB(.05)=$S($$FT^IBCEF(IB)=3:1,1:2) ;Inst(1) or Prof(2)
"RTN","IBCEF4",52,0)
 ; Execute unmodifiable, general edits
"RTN","IBCEF4",53,0)
 S X1=$$EDIACTV(IB(.03))
"RTN","IBCEF4",54,0)
 I 'X1 S IBWHY=2
"RTN","IBCEF4",55,0)
 I 'IBWHY S X1=$$RATEOK(IBIFN) S:'X1 IBWHY=3
"RTN","IBCEF4",56,0)
 I 'IBWHY S X1=$$INSOK(+IB(.07)) S:'X1 IBWHY=4
"RTN","IBCEF4",57,0)
 I 'IBWHY,$$ISRX^IBCEF1(IBIFN) D  ;S:'X1 IBWHY=6
"RTN","IBCEF4",58,0)
 . ; Check for Rxs and NDC # format valid (5-4-2)
"RTN","IBCEF4",59,0)
 . ;IF THIS IS A UB92 DO NOT SEND ELECTRONIC
"RTN","IBCEF4",60,0)
 . I $$FT^IBCEF(IBIFN)=3 S IBWHY=1
"RTN","IBCEF4",61,0)
 . ;
"RTN","IBCEF4",62,0)
 . Q  ;;CHECK REMOVAL SO NON NDC FORMAT NUMBERS WILL GO
"RTN","IBCEF4",63,0)
 . N Z,Z0,Z00
"RTN","IBCEF4",64,0)
 . S Z="" F  S Z=$O(^IBA(362.4,"AIFN"_IBIFN,Z)) Q:Z=""!'X1  D  Q:'X1
"RTN","IBCEF4",65,0)
 .. S Z0=0 F  S Z0=$O(^IBA(362.4,"AIFN"_IBIFN,Z,Z0)) Q:'Z0  D  Q:'X1
"RTN","IBCEF4",66,0)
 ... S Z00=$G(^IBA(362.4,Z0,0))
"RTN","IBCEF4",67,0)
 ... Q:$S($P(Z00,U,8)="":1,1:$L($P(Z00,U,8))=11)
"RTN","IBCEF4",68,0)
 ... I $P(Z00,U,9)'=4 S X1=0
"RTN","IBCEF4",69,0)
 ; Only continue if general edits are passed
"RTN","IBCEF4",70,0)
 I IBWHY S IBOK=0 G TXMTQ
"RTN","IBCEF4",71,0)
 S IBOK=$$EDIT(IBIFN,.IB,.IBWHY)
"RTN","IBCEF4",72,0)
 G:'IBOK TXMTQ
"RTN","IBCEF4",73,0)
 ;
"RTN","IBCEF4",74,0)
TXMTQ ;
"RTN","IBCEF4",75,0)
 I IBOK S IBOK=$G(^DIC(36,+IB(.07),3))
"RTN","IBCEF4",76,0)
 Q IBOK
"RTN","IBCEF4",77,0)
 ;
"RTN","IBCEF4",78,0)
EDIT(IBIFN,IB,IBWHY) ; Find, execute edits applying to bill to see if transmittable
"RTN","IBCEF4",79,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",80,0)
 ; IB = array containing necessary data for xref search from bill
"RTN","IBCEF4",81,0)
 ;      subscripted by field # in file 364.4
"RTN","IBCEF4",82,0)
 ;
"RTN","IBCEF4",83,0)
 ;  Matrix entries:
"RTN","IBCEF4",84,0)
 ;    IB(.03): 1=EDI specific, 2=MRA specific
"RTN","IBCEF4",85,0)
 ;    IB(.04): 1=Outpatient or 2=inpatient only (currently defaults to 3)
"RTN","IBCEF4",86,0)
 ;    IB(.05): 1=Only institutional or 2=only professional
"RTN","IBCEF4",87,0)
 ;          X: Anything valid
"RTN","IBCEF4",88,0)
 ;
"RTN","IBCEF4",89,0)
 ;                 MRA-EDI    IN-OUT     INST-PROF
"RTN","IBCEF4",90,0)
 ;  Level          -------    ------     ---------
"RTN","IBCEF4",91,0)
 ;    1               X          X           X
"RTN","IBCEF4",92,0)
 ;    2               X          X        IB(.05)
"RTN","IBCEF4",93,0)
 ;    3               X       IB(.04)        X
"RTN","IBCEF4",94,0)
 ;    4               X       IB(.04)     IB(.05)
"RTN","IBCEF4",95,0)
 ;    5            IB(.03)       X           X
"RTN","IBCEF4",96,0)
 ;    6            IB(.03)       X        IB(.05) 
"RTN","IBCEF4",97,0)
 ;    7            IB(.03)    IB(.04)        X
"RTN","IBCEF4",98,0)
 ;    8            IB(.03)    IB(.04)     IB(.05)
"RTN","IBCEF4",99,0)
 ;
"RTN","IBCEF4",100,0)
 N IB0,IB1,IB2,IB3,IB4,IBDA,IBFT,IBPASS,IBSEQ,IBT,IBNOCK
"RTN","IBCEF4",101,0)
 I '$G(IB(.03)) S IBPASS=0 G EDITQ
"RTN","IBCEF4",102,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEF4",103,0)
 ;
"RTN","IBCEF4",104,0)
 S IBPASS=1
"RTN","IBCEF4",105,0)
 F IBSEQ=1:1:8 D  Q:'IBPASS  ; Loop thru levels in matrix
"RTN","IBCEF4",106,0)
 . F IB1=1:1:3 Q:'IBPASS  F IB2=1:1:3 Q:'IBPASS  F IB3=1:1:3 Q:'IBPASS  D
"RTN","IBCEF4",107,0)
 .. S IB4=0 F  S IB4=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4)) Q:'IB4  I $O(^(IB4,0)) D  Q:'IBPASS
"RTN","IBCEF4",108,0)
 ... S IBDA=0
"RTN","IBCEF4",109,0)
 ... F   S IBDA=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4,IBDA)) Q:'IBDA  S IB0=$G(^IBE(364.4,IBDA,0)) I IB0'="",'$D(IBNOCK(IBDA)) D  Q:'IBPASS
"RTN","IBCEF4",110,0)
 .... I $P(IB0,U,2)>DT S IBNOCK(IBDA)="" Q  ; Not activated yet
"RTN","IBCEF4",111,0)
 .... I $P(IB0,U,6),$P(IB0,U,6)'>DT  S IBNOCK(IBDA)="" Q  ; Inactive
"RTN","IBCEF4",112,0)
 .... I $P(IB0,U,11),IB3'=3,$S(IBFT=3:IB3'=1,IBFT=2:IB3'=2,1:0) S IBNOCK(IBDA)="" Q  ; Form type not included - not used for form type rule (0)
"RTN","IBCEF4",113,0)
 .... I IB4=1,'$D(^IBE(364.4,IBDA,3,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins not included for rule
"RTN","IBCEF4",114,0)
 .... I IB4=2,$D(^IBE(364.4,IBDA,2,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins is excluded from rule
"RTN","IBCEF4",115,0)
 .... S IBT=$G(^IBE(364.4,IBDA,1))
"RTN","IBCEF4",116,0)
 .... ; Code can assume IBIFN, IBDA and IB(.03 thru .05 and .07) exist
"RTN","IBCEF4",117,0)
 .... I IBT'="" X IBT I '$T S IBPASS=0,IBWHY(0)=IBDA,IBWHY=5
"RTN","IBCEF4",118,0)
EDITQ Q IBPASS
"RTN","IBCEF4",119,0)
 ;
"RTN","IBCEF4",120,0)
STATUS(IBIFN) ; Function returns whether or not bill currently has a status
"RTN","IBCEF4",121,0)
 ;  message or EOB message not yet fully reviewed -
"RTN","IBCEF4",122,0)
 ; (only for transmittable bills)
"RTN","IBCEF4",123,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",124,0)
 ; Returns:
"RTN","IBCEF4",125,0)
 ; 0 = None found
"RTN","IBCEF4",126,0)
 ; If found, returns a pieced string as follows:
"RTN","IBCEF4",127,0)
 ;
"RTN","IBCEF4",128,0)
 ;   [1] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",129,0)
 ;       entry in file 361 with an unreviewed status message
"RTN","IBCEF4",130,0)
 ;   [2] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",131,0)
 ;       entry in file 361.1 with an unreviewed EOB
"RTN","IBCEF4",132,0)
 ;
"RTN","IBCEF4",133,0)
 N IB,Z,Z0
"RTN","IBCEF4",134,0)
 S IB=""
"RTN","IBCEF4",135,0)
 S Z="" F  S Z=$O(^IBM(361,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361,Z,0)),U,9)<2,$P(^(0),U,11) S $P(IB,U)=$P(^(0),U,11) Q
"RTN","IBCEF4",136,0)
 ;
"RTN","IBCEF4",137,0)
 S Z="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,16)<2,$P(^(0),U,19) S $P(IB,U,2)=$P(^(0),U,19) Q
"RTN","IBCEF4",138,0)
 ;
"RTN","IBCEF4",139,0)
 Q IB
"RTN","IBCEF4",140,0)
 ;
"RTN","IBCEF4",141,0)
TEST(IBIFN) ; Returns 1 if bill IBIFN is a transmission test bill, 0 if not
"RTN","IBCEF4",142,0)
 Q +$P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,7)
"RTN","IBCEF4",143,0)
 ;
"RTN","IBCEF7")
0^6^B50002209
"RTN","IBCEF7",1,0)
IBCEF7 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF7",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEF7",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF7",4,0)
 ;
"RTN","IBCEF7",5,0)
ALLPROV ;called from #364.5 entry "N-ALL CUR/OTH PROVIDER INFO"
"RTN","IBCEF7",6,0)
 I +$G(IBXSAVE("PROVINF",IBXIEN))=0 N IBZ D PROVIDER(IBXIEN,"C",.IBZ),PROVIDER(IBXIEN,"O",.IBZ) S IBXSAVE("PROVINF",IBXIEN)=IBXIEN M IBXSAVE("PROVINF",IBXIEN)=IBZ
"RTN","IBCEF7",7,0)
 Q
"RTN","IBCEF7",8,0)
 ;for PRV1
"RTN","IBCEF7",9,0)
 ;Input:
"RTN","IBCEF7",10,0)
 ; IB399 ien of #399
"RTN","IBCEF7",11,0)
PRV1(IB399) ;
"RTN","IBCEF7",12,0)
 N IBN,IBZ,IBZ1,IBZN,IBZD,IBRES,IBIND,IBDEF,IBDEFTYP,IBQ,IBFRMTYP,IBZNAME
"RTN","IBCEF7",13,0)
 S IBFRMTYP=+$$FT^IBCEF(IB399)
"RTN","IBCEF7",14,0)
 S IBN=0,IBIND=0,IBRES="",IBQ=0
"RTN","IBCEF7",15,0)
 S IBDEF=$P($G(^DGCR(399,IB399,"M1")),U,$$COBN^IBCEF(IB399)+1),IBDEFTYP=""
"RTN","IBCEF7",16,0)
 I IBDEF'="" S IBDEFTYP=$$SOP^IBCEP2B(IB399,"")
"RTN","IBCEF7",17,0)
 I IBDEFTYP'="",$$CHCKPRV1^IBCEF73($S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBDEFTYP)=0 S (IBDEF,IBDEFTYP)=""
"RTN","IBCEF7",18,0)
 I IBDEF'="",IBDEFTYP'="" S IBIND=IBIND+2,$P(IBRES,U,IBIND)=(IBDEFTYP_U_IBDEF)
"RTN","IBCEF7",19,0)
 F  S IBN=$O(^IBE(355.97,IBN)) Q:+IBN=0!(IBQ=1)  D
"RTN","IBCEF7",20,0)
 . S IBZ=$G(^IBE(355.97,IBN,0)),IBZ1=$G(^(1))
"RTN","IBCEF7",21,0)
 . Q:$P(IBZ,"^",4)=""!$P(IBZ1,U,9)  ;if no FACILITY'S DEFAULT ID #
"RTN","IBCEF7",22,0)
 . Q:$P(IBZ1,"^",4)!(IBDEFTYP=$P(IBZ,U,3))
"RTN","IBCEF7",23,0)
 . S IBZN=$P(IBZ,"^",3),IBZNAME=$P(IBZ,"^",1)
"RTN","IBCEF7",24,0)
 . I IBFRMTYP=2 Q:IBZN="1A"!(IBZNAME="MEDICARE PART A")  ;HCFA
"RTN","IBCEF7",25,0)
 . I IBFRMTYP=3 Q:IBZN="1B"!(IBZNAME="MEDICARE PART B")  ;UB92
"RTN","IBCEF7",26,0)
 . Q:$$CHCKPRV1^IBCEF73($S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBZN)=0
"RTN","IBCEF7",27,0)
 . I $P(IBZ,"^",2)=0!($P(IBZ,"^",2)=2) D
"RTN","IBCEF7",28,0)
 . . S IBIND=IBIND+2
"RTN","IBCEF7",29,0)
 . . I IBIND>14 S IBQ=1 Q
"RTN","IBCEF7",30,0)
 . . S $P(IBRES,"^",IBIND)=IBZN_"^"_$P(IBZ,"^",4)
"RTN","IBCEF7",31,0)
 ;Remove any duplicate entries
"RTN","IBCEF7",32,0)
 N I,Q,QUAL,QUALC,IBRESTMP,SEQ
"RTN","IBCEF7",33,0)
 F I=2:2:($L(IBRES,"^")-1) D
"RTN","IBCEF7",34,0)
 . S QUAL=$P(IBRES,"^",I)
"RTN","IBCEF7",35,0)
 . I $G(IBRESTMP(QUAL))="" S IBRESTMP(QUAL)=$P(IBRES,"^",(I+1))
"RTN","IBCEF7",36,0)
 S Q=2
"RTN","IBCEF7",37,0)
 S I="",QUAL=""
"RTN","IBCEF7",38,0)
 K IBRES
"RTN","IBCEF7",39,0)
 S IBRES=""
"RTN","IBCEF7",40,0)
 S SEQ=0
"RTN","IBCEF7",41,0)
 F  S QUAL=$O(IBRESTMP(QUAL)) Q:QUAL=""  D
"RTN","IBCEF7",42,0)
 . S SEQ=SEQ+2
"RTN","IBCEF7",43,0)
 . S $P(IBRES,"^",SEQ)=QUAL,$P(IBRES,"^",(SEQ+1))=IBRESTMP(QUAL)
"RTN","IBCEF7",44,0)
 Q IBRES
"RTN","IBCEF7",45,0)
 ;
"RTN","IBCEF7",46,0)
 ; creates array of SUBSCR IDs for all "other insurances"
"RTN","IBCEF7",47,0)
 ;Input :
"RTN","IBCEF7",48,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",49,0)
 ;Output:
"RTN","IBCEF7",50,0)
 ; IBZOUT(Z) - array with ien of #36 
"RTN","IBCEF7",51,0)
OTHSBID(IBXIEN,IBZOUT) ;
"RTN","IBCEF7",52,0)
 N Z,Z0,Z1,IBZ,C
"RTN","IBCEF7",53,0)
 D F^IBCEF("N-ALL INSURANCE CO 837 ID","IBZ")
"RTN","IBCEF7",54,0)
 F Z=1,2,3 S IBZ(Z)=$$POLICY^IBCEF(IBXIEN,2,$E("PST",Z))
"RTN","IBCEF7",55,0)
 K IBXDATA
"RTN","IBCEF7",56,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",57,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",58,0)
 . S IBZOUT(Z)=IBZ(+$E(C,Z))
"RTN","IBCEF7",59,0)
 Q
"RTN","IBCEF7",60,0)
 ;Input :
"RTN","IBCEF7",61,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",62,0)
 ; IBP - # piece in address string : STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",63,0)
 ;Output:
"RTN","IBCEF7",64,0)
 ; IBARR - output array m by reference
"RTN","IBCEF7",65,0)
ELMADD2(IBXIEN,IBP,IBARR) ;
"RTN","IBCEF7",66,0)
 N IBZZZ,A,CHECK,IB1
"RTN","IBCEF7",67,0)
 I '$D(IBXSAVE("OTH_INSURED_ADDR")) D OTHADD2(IBXIEN,.IBZZZ) M IBXSAVE("OTH_INSURED_ADDR")=IBZZZ
"RTN","IBCEF7",68,0)
 S IB1=0
"RTN","IBCEF7",69,0)
 F  S IB1=$O(IBXSAVE("OTH_INSURED_ADDR",IB1)) Q:'IB1  D
"RTN","IBCEF7",70,0)
 . ;IF ANY PORTION OF ADDRESS IS NULL SET CHECK VALUE, ERASE ENTRY
"RTN","IBCEF7",71,0)
 . S CHECK=0
"RTN","IBCEF7",72,0)
 . F A=1,3,4,5 I $P(IBXSAVE("OTH_INSURED_ADDR",IB1),"|",A)="" S CHECK=1 K IBXSAVE("OTH_INSURED_ADDR",IB1) Q
"RTN","IBCEF7",73,0)
 . I 'CHECK D
"RTN","IBCEF7",74,0)
 . . I IBP=0 S IBARR(IB1)=$G(IBXSAVE("OTH_INSURED_ADDR",IB1)) Q
"RTN","IBCEF7",75,0)
 . . S IBARR(IB1)=$P($G(IBXSAVE("OTH_INSURED_ADDR",IB1)),"|",IBP)
"RTN","IBCEF7",76,0)
 Q
"RTN","IBCEF7",77,0)
 ;creates an array with address info for all other insured persons
"RTN","IBCEF7",78,0)
 ;Input :
"RTN","IBCEF7",79,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",80,0)
 ;Output:
"RTN","IBCEF7",81,0)
 ; IBZOUT(Z) - array with STR LINE1|STR LINE2|CITY|STATE|ZIP 
"RTN","IBCEF7",82,0)
OTHADD2(IBXIEN,IBZOUT) ;
"RTN","IBCEF7",83,0)
 N C,Z,Z0,Z1,IBZ,IBZIP,IB1,IBDFN1
"RTN","IBCEF7",84,0)
 S IBZOUT=""
"RTN","IBCEF7",85,0)
 D OTHP36^IBCEF72(IBXIEN,.IBZ) ;array with iens of file #36
"RTN","IBCEF7",86,0)
 K IBXDATA
"RTN","IBCEF7",87,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",88,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",89,0)
 . S IBINS=+IBZ(+$E(C,Z))
"RTN","IBCEF7",90,0)
 . S IBDFN1=$P($G(^DGCR(399,IBXIEN,0)),"^",2)
"RTN","IBCEF7",91,0)
 . S IBZOUT(Z)=$$FR2PAT(IBDFN1,IBINS)
"RTN","IBCEF7",92,0)
 Q
"RTN","IBCEF7",93,0)
 ;Input:
"RTN","IBCEF7",94,0)
 ; IBDFN-patient ien
"RTN","IBCEF7",95,0)
 ; IBINS - input array with insurance pointers to 36
"RTN","IBCEF7",96,0)
 ;Output 
"RTN","IBCEF7",97,0)
 ; STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",98,0)
FR2PAT(IBDFN,IBINS) ;information about "other insured" address
"RTN","IBCEF7",99,0)
 N Z3,Z4,Z5,IBZIP
"RTN","IBCEF7",100,0)
 S Z3=$O(^DPT(IBDFN,.312,"B",$G(IBINS),0))
"RTN","IBCEF7",101,0)
 Q:+Z3=0 "||||"
"RTN","IBCEF7",102,0)
 S Z4=$G(^DPT(IBDFN,.312,Z3,3))
"RTN","IBCEF7",103,0)
 S IBZIP=$P($G(^DIC(5,+$P(Z4,"^",9),0)),"^",2)
"RTN","IBCEF7",104,0)
 S Z5=$P(Z4,"^",6,8)_"^"_IBZIP_"^"_$P(Z4,"^",10)
"RTN","IBCEF7",105,0)
 Q $TR(Z5,"^","|")
"RTN","IBCEF7",106,0)
 ;
"RTN","IBCEF7",107,0)
 ;Input :
"RTN","IBCEF7",108,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",109,0)
 ; IBP - # piece in address string : STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",110,0)
 ; if IBP=0 then returns whole string
"RTN","IBCEF7",111,0)
 ;Output:
"RTN","IBCEF7",112,0)
 ; IBARR - output array m by reference
"RTN","IBCEF7",113,0)
ELMADDR(IBXIEN,IBP,IBARR) ;
"RTN","IBCEF7",114,0)
 N IB1,A,CHECK
"RTN","IBCEF7",115,0)
 D:'$D(IBXSAVE("OTH_PROV_ADDR")) OTHADDR(IBXIEN)
"RTN","IBCEF7",116,0)
 S IB1=0
"RTN","IBCEF7",117,0)
 F  S IB1=$O(IBXSAVE("OTH_PROV_ADDR",IB1)) Q:'IB1  D
"RTN","IBCEF7",118,0)
 . S CHECK=0
"RTN","IBCEF7",119,0)
 . ;EXCLUDE ADD LINE 2 SECOND PC SINCE IT'S OK FOR THAT TO BE EMPTY
"RTN","IBCEF7",120,0)
 . F A=1,3,4,5 I $P(IBXSAVE("OTH_PROV_ADDR",IB1),"|",A)="" D  Q
"RTN","IBCEF7",121,0)
 . . ;IF ANY PORTION OF ADDRESS IS NULL SET CHECK VALUE, ERASE ENTRY
"RTN","IBCEF7",122,0)
 . . S CHECK=1 K IBXSAVE("OTH_PROV_ADDR",IB1)
"RTN","IBCEF7",123,0)
 . I 'CHECK D
"RTN","IBCEF7",124,0)
 . . I IBP=0 S IBARR(IB1)=$G(IBXSAVE("OTH_PROV_ADDR",IB1)) Q
"RTN","IBCEF7",125,0)
 . . S IBARR(IB1)=$P($G(IBXSAVE("OTH_PROV_ADDR",IB1)),"|",IBP)
"RTN","IBCEF7",126,0)
 Q
"RTN","IBCEF7",127,0)
 ;
"RTN","IBCEF7",128,0)
 ;creates an array with address info for all insurances
"RTN","IBCEF7",129,0)
 ;Input :
"RTN","IBCEF7",130,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",131,0)
 ;Output:
"RTN","IBCEF7",132,0)
 ; IBXSAVE("OTH_PROV_ADDR",Z) 
"RTN","IBCEF7",133,0)
OTHADDR(IBXIEN) ;
"RTN","IBCEF7",134,0)
 N C,Z,Z0,Z1,IBZ,IBZIP,IB1,IBINS
"RTN","IBCEF7",135,0)
 D F^IBCEF("N-OTH INSURANCE CO IEN 36") ;array with iens of file #36
"RTN","IBCEF7",136,0)
 M IBZ=IBXDATA
"RTN","IBCEF7",137,0)
 K IBXDATA
"RTN","IBCEF7",138,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",139,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",140,0)
 . S IBINS=+IBZ(+$E(C,Z))
"RTN","IBCEF7",141,0)
 . S IBZIP=$P($G(^DIC(5,+$P($G(^DIC(36,IBINS,.11)),"^",5),0)),"^",2)
"RTN","IBCEF7",142,0)
 . S IB1=$P($G(^DIC(36,IBINS,.11)),"^",1,2)_"^"_$P($G(^DIC(36,IBINS,.11)),"^",4)_"^"_IBZIP_"^"_$P($G(^DIC(36,IBINS,.11)),"^",6)
"RTN","IBCEF7",143,0)
 . S IBXSAVE("OTH_PROV_ADDR",Z)=$TR(IB1,"^","|")
"RTN","IBCEF7",144,0)
 Q
"RTN","IBCEF7",145,0)
 ;
"RTN","IBCEF7",146,0)
 ;Retrieves pointer to get info about the service provider
"RTN","IBCEF7",147,0)
 ;IBIEN399 - ien in #399
"RTN","IBCEF7",148,0)
 ;IBFUNC -function (3-RENDERING,etc)
"RTN","IBCEF7",149,0)
 ;Output: VARIABLE POINTER (PTR;file_root)
"RTN","IBCEF7",150,0)
PROVPTR(IBIEN399,IBFUNC) ;
"RTN","IBCEF7",151,0)
 N IBN
"RTN","IBCEF7",152,0)
 S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFUNC,0))
"RTN","IBCEF7",153,0)
 I +IBN=0 Q 0
"RTN","IBCEF7",154,0)
 Q $P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),"^",2)
"RTN","IBCEF7",155,0)
 ;
"RTN","IBCEF7",156,0)
 ;Retrieves SSN from #200
"RTN","IBCEF7",157,0)
 ;IBPTR-  VARIABLE POINTER to #200
"RTN","IBCEF7",158,0)
PROVSSN(IBIEN399) ;
"RTN","IBCEF7",159,0)
 N IBRETVAL S IBRETVAL=""
"RTN","IBCEF7",160,0)
 N IBPTR,IBFT
"RTN","IBCEF7",161,0)
 F IBFT=1:1:9 D
"RTN","IBCEF7",162,0)
 . S IBPTR=$$PROVPTR(IBIEN399,IBFT)
"RTN","IBCEF7",163,0)
 . S $P(IBRETVAL,"^",IBFT)=$$GETSSN^IBCEF72(IBPTR)
"RTN","IBCEF7",164,0)
 Q IBRETVAL
"RTN","IBCEF7",165,0)
 ;
"RTN","IBCEF7",166,0)
 ;Input:
"RTN","IBCEF7",167,0)
 ; IBPTR- ptr to ^VA(200 or ^IBA(355.93
"RTN","IBCEF7",168,0)
 ;Output:
"RTN","IBCEF7",169,0)
 ; SSN or null
"RTN","IBCEF7",170,0)
GETNMEL(IBFULL,IBEL) ;Get name element
"RTN","IBCEF7",171,0)
 D NAMECOMP^XLFNAME(.IBFULL)
"RTN","IBCEF7",172,0)
 Q $G(IBFULL(IBEL))
"RTN","IBCEF7",173,0)
 ;-
"RTN","IBCEF7",174,0)
 ;PROVIDER
"RTN","IBCEF7",175,0)
 ;Input:
"RTN","IBCEF7",176,0)
 ; IB399 - ien of #399
"RTN","IBCEF7",177,0)
 ; IBPROV:
"RTN","IBCEF7",178,0)
 ;   "C"- to get info for CURRENT provider
"RTN","IBCEF7",179,0)
 ;   "O"- to get info for all others (in this case the array will contain info fot two providers
"RTN","IBCEF7",180,0)
 ; IBRES - array for results (by reference)
"RTN","IBCEF7",181,0)
 ;
"RTN","IBCEF7",182,0)
 ;Output:
"RTN","IBCEF7",183,0)
 ; IBRES - array to get back info (by reference)
"RTN","IBCEF7",184,0)
 ; IBRES(IBPROV,PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF7",185,0)
 ; where:
"RTN","IBCEF7",186,0)
 ; IBPROV - see input parameter
"RTN","IBCEF7",187,0)
 ; PRNUM: 1=primary insurance provider, 2= secondary, 3 -tretiary
"RTN","IBCEF7",188,0)
 ; PRTYPE: Provider type(FUNCTION) 
"RTN","IBCEF7",189,0)
 ; SEQ# : sequence number (1st is used for ID1, 2nd - for ID2, etc)
"RTN","IBCEF7",190,0)
 ; PROV : provider/VARIABLEPTR
"RTN","IBCEF7",191,0)
 ; INSUR: Insurance PTR #36 or NONE
"RTN","IBCEF7",192,0)
 ; IDTYPE: ID type
"RTN","IBCEF7",193,0)
 ; ID: ID 
"RTN","IBCEF7",194,0)
 ; FORMTYP: Form type 1=UB92,2=HCFA 1500
"RTN","IBCEF7",195,0)
 ; CARETYP: Care type 0=both inp/outp,1=inpatient, 2=outpatient
"RTN","IBCEF7",196,0)
PROVIDER(IB399,IBPROV,IBRES) ;
"RTN","IBCEF7",197,0)
 N IBCURR,IBZ,IBRESARR
"RTN","IBCEF7",198,0)
 S IBRESARR=""
"RTN","IBCEF7",199,0)
 S IBCURR=$$COB^IBCEF(IB399) ;current bill payer sequence
"RTN","IBCEF7",200,0)
 Q:IBPROV="A"  ;PATIENT's bill
"RTN","IBCEF7",201,0)
 I IBPROV="C" D
"RTN","IBCEF7",202,0)
 . D:$$ISINSUR^IBCEF71(IBCURR,IB399) PROVINF(IB399,$S(IBCURR="T":3,IBCURR="S":2,IBCURR="P":1,1:1),.IBRESARR,1,IBPROV)
"RTN","IBCEF7",203,0)
 I IBPROV="O" D
"RTN","IBCEF7",204,0)
 . I IBCURR="P" D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",205,0)
 . I IBCURR="S" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",206,0)
 . I IBCURR="T" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",207,0)
 M IBRES(IBPROV)=IBRESARR
"RTN","IBCEF7",208,0)
 Q
"RTN","IBCEF7",209,0)
 ;
"RTN","IBCEF7",210,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP) ;
"RTN","IBCEF7",211,0)
 D PROVINF^IBCEF74(IB399,IBPRNUM,.IBRES,IBSORT,IBINSTP)
"RTN","IBCEF7",212,0)
 Q
"RTN","IBCEF7",213,0)
 ;
"RTN","IBCEF7",214,0)
PSPRV(IBIFN) ; Returns information for bill ien IBIFN for purchased svc 
"RTN","IBCEF7",215,0)
 ; Returns 4 digit data in following format:
"RTN","IBCEF7",216,0)
 ;  1st digit: 0 if not outside facility
"RTN","IBCEF7",217,0)
 ;             1 if outside facility
"RTN","IBCEF7",218,0)
 ;  2nd digit: 0 if not non-VA provider for rendering/attending
"RTN","IBCEF7",219,0)
 ;             1 if non-VA provider for rendering/attending
"RTN","IBCEF7",220,0)
 ;  3rd digit: 0 if not purchased svc
"RTN","IBCEF7",221,0)
 ;             1 if purchased svc
"RTN","IBCEF7",222,0)
 ;  4th digit: 0 if HCFA 1500 bill
"RTN","IBCEF7",223,0)
 ;             1 if UB-92 bill
"RTN","IBCEF7",224,0)
 N IBSVC,Z,Z0,IBU2
"RTN","IBCEF7",225,0)
 S IBSVC="000"_+$$INSFT^IBCEU5(IBIFN),IBU2=$G(^DGCR(399,IBIFN,"U2"))
"RTN","IBCEF7",226,0)
 I $P(IBU2,U,10) S $E(IBSVC,1)=1 ; NON-VA FACILITY
"RTN","IBCEF7",227,0)
 S Z=($$FT^IBCEF(IBIFN)=3)+3,Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEF7",228,0)
 I $P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,2)["IBA(355.93" S $E(IBSVC,2)=1
"RTN","IBCEF7",229,0)
 I $P(IBU2,U,11)>0,$P(IBU2,U,11)'>2 S $E(IBSVC,3)=1
"RTN","IBCEF7",230,0)
PSPRVQ Q IBSVC
"RTN","IBCEF7",231,0)
 ;
"RTN","IBCEF7",232,0)
CHKADD ;CHECK ALL ADDRESS ELEMENTS PRESENT IF NOT KILL ALL ADDRESS ELEMENTS
"RTN","IBCEF7",233,0)
 ;EXPECT IBXSAVE("CADR") AS SOURCE ARRAY
"RTN","IBCEF7",234,0)
 N Z,CHECK
"RTN","IBCEF7",235,0)
 S Z="",CHECK=0
"RTN","IBCEF7",236,0)
 F Z=1,4,5,6 D
"RTN","IBCEF7",237,0)
 . I $P($G(IBXSAVE("CADR")),"^",Z)="" S CHECK=1
"RTN","IBCEF7",238,0)
 I CHECK=1 S IBXSAVE("CADR")=""
"RTN","IBCEF7",239,0)
 Q
"RTN","IBCEF7",240,0)
 ;
"RTN","IBCEF71")
0^9^B63586880
"RTN","IBCEF71",1,0)
IBCEF71 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF71",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEF71",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF71",4,0)
 ;
"RTN","IBCEF71",5,0)
 ;---------
"RTN","IBCEF71",6,0)
 ;OTHPAYC - from FORMAT code for OP1,OP2 ...
"RTN","IBCEF71",7,0)
 ;Input:
"RTN","IBCEF71",8,0)
 ;IBXIEN - ien #399
"RTN","IBCEF71",9,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF71",10,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF71",11,0)
 ;IBFUNC - FUNCTION from #399 (1-refering,2-operating,etc)
"RTN","IBCEF71",12,0)
 ;IBVAL - output value
"RTN","IBCEF71",13,0)
 ;Output:
"RTN","IBCEF71",14,0)
 ; IBDATA with formatted output
"RTN","IBCEF71",15,0)
OTHPAYC(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBVAL) ;
"RTN","IBCEF71",16,0)
 N IB1,IB2,IBINS,IBFL
"RTN","IBCEF71",17,0)
 S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF71",18,0)
 F IB1=1,2 D
"RTN","IBCEF71",19,0)
 . Q:'$$ISINSUR($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN)  ;don't create anything if no such insurance
"RTN","IBCEF71",20,0)
 . I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4)
"RTN","IBCEF71",21,0)
 . S:$O(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,0)) IBDATA(IB1)=IBVAL
"RTN","IBCEF71",22,0)
 Q
"RTN","IBCEF71",23,0)
 ;----
"RTN","IBCEF71",24,0)
 ;OTHPAYV - called from FORMAT code for OP1,OP2 ...
"RTN","IBCEF71",25,0)
 ;Input:
"RTN","IBCEF71",26,0)
 ;IBXIEN - ien #399
"RTN","IBCEF71",27,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF71",28,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF71",29,0)
 ;IBFUNC - FUNCTION from #399 (1-refering, 2-operating, etc)
"RTN","IBCEF71",30,0)
 ;IBSEQN - seq # of ID/QUAL
"RTN","IBCEF71",31,0)
 ;IBFLDTYP
"RTN","IBCEF71",32,0)
 ; "I" - ID  "Q" - ID QUAL
"RTN","IBCEF71",33,0)
 ;Output:
"RTN","IBCEF71",34,0)
 ; IBDATA with formatted output
"RTN","IBCEF71",35,0)
OTHPAYV(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBFLDTYP,IBSEQN) ;
"RTN","IBCEF71",36,0)
 N IB1,IB2,IBPIECE,IBINS,IBFL
"RTN","IBCEF71",37,0)
 S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF71",38,0)
 S IBPIECE=$S(IBFLDTYP="I":4,IBFLDTYP="Q":3,1:3)
"RTN","IBCEF71",39,0)
 F IB1=1,2 D
"RTN","IBCEF71",40,0)
 . Q:'$$ISINSUR($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN)  ;don't create anything if there is no such insurance
"RTN","IBCEF71",41,0)
 . I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4),IBFL=0
"RTN","IBCEF71",42,0)
 . S IBDATA(IB1)=$P($G(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,IBSEQN)),"^",IBPIECE)
"RTN","IBCEF71",43,0)
 Q
"RTN","IBCEF71",44,0)
 ;
"RTN","IBCEF71",45,0)
 ;chk for ins
"RTN","IBCEF71",46,0)
 ;Input:
"RTN","IBCEF71",47,0)
 ; IBINS = "P","S","T"
"RTN","IBCEF71",48,0)
 ; IBXIEN - ien file #399
"RTN","IBCEF71",49,0)
 ;Output:
"RTN","IBCEF71",50,0)
 ; returns 1-exists , 0-doesn't
"RTN","IBCEF71",51,0)
ISINSUR(IBINS,IBXIEN) ;
"RTN","IBCEF71",52,0)
 N IBINSNOD
"RTN","IBCEF71",53,0)
 S IBINSNOD=$S(IBINS="P":"I1",IBINS="S":"I2",IBINS="T":"I3",1:"")
"RTN","IBCEF71",54,0)
 I IBINSNOD="" Q 0
"RTN","IBCEF71",55,0)
 Q $D(^DGCR(399,IBXIEN,IBINSNOD))
"RTN","IBCEF71",56,0)
 ;
"RTN","IBCEF71",57,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC) ;
"RTN","IBCEF71",58,0)
 D SORT^IBCEF74(IBPRNUM,IBPRTYP,IB399,.IBSRC,.IBDST,IBN,IBEXC)
"RTN","IBCEF71",59,0)
 Q
"RTN","IBCEF71",60,0)
 ;
"RTN","IBCEF71",61,0)
 ;---PRACT----
"RTN","IBCEF71",62,0)
 ;Get list of all 355.9 or 355.93 records for prov
"RTN","IBCEF71",63,0)
 ;Input: 
"RTN","IBCEF71",64,0)
 ;IB399INS - ins co for bill to match PRACTIONER from 355.9
"RTN","IBCEF71",65,0)
 ;IB399FRM - form type (0=unknwn/both,1=UB92,2=HCFA 1500) to 
"RTN","IBCEF71",66,0)
 ;   match PRACTIONER from 355.9
"RTN","IBCEF71",67,0)
 ;IB399CAR - BILL CARE (0=unknwn or both inp/outp,1=inpatient,
"RTN","IBCEF71",68,0)
 ;   2=outpatient/3=Rx) to match PROV from 355.9
"RTN","IBCEF71",69,0)
 ;    OR   - DIVISION PTR to file 40.8 for entries in file 355.92
"RTN","IBCEF71",70,0)
 ;IBPROV - VARIABLE PTR VA prov
"RTN","IBCEF71",71,0)
 ;IBARR - array by reference for result
"RTN","IBCEF71",72,0)
 ;IBPROVTP- function (2-operating, 3-RENDERING,etc 0-facility)
"RTN","IBCEF71",73,0)
 ;IBINSTP - "C" -current ins , "O"-other
"RTN","IBCEF71",74,0)
 ;IBFILE - 355.92 for facility ids or 355.9 (default) for provider ids
"RTN","IBCEF71",75,0)
 ;IBINS - 1 if to include ids for the ins co for all provs
"RTN","IBCEF71",76,0)
 ;Ouput:
"RTN","IBCEF71",77,0)
 ;IBARR - array by ref for result
"RTN","IBCEF71",78,0)
 ; prov var ptr^ins ptr^X12 id cd^ID^form typ^care typ or division ptr^st ptr^id rec ptr^id type ptr
"RTN","IBCEF71",79,0)
PRACT(IB399INS,IB399FRM,IB399CAR,IBPROV,IBARR,IBPROVTP,IBINSTP,IBFILE,IBINS) ;
"RTN","IBCEF71",80,0)
 N IB1,IB2,IBDAT,IBF,IBFX,IB3559,IBINSCO,IBFRMTYP,IBIDTYP,IBID,IBIDT,IBDIV,IBQ,IBS1,IBS2,IBARRX,Z,Z1,Z2,IBCARE
"RTN","IBCEF71",81,0)
 I $G(IBFILE)="" S IBFILE=355.9
"RTN","IBCEF71",82,0)
 S IBINS=$G(IBINS)
"RTN","IBCEF71",83,0)
 S (IBARR,IB3559,IB1)=0
"RTN","IBCEF71",84,0)
 F IBF="",1 Q:IBF=1&$S(IBFILE'=355.9:1,1:'IBINS)  S IBFX=IBFILE_IBF F IB2=1:1 S IB3559=$O(^IBA(IBFX,"B",$S(IBFILE=355.9&(IBF=""):IBPROV,1:IB399INS),IB3559)) Q:IB3559=""  D
"RTN","IBCEF71",85,0)
 . S IBINSCO=$P($G(^IBA(IBFX,IB3559,0)),"^",$S(IBFILE=355.9&(IBF=""):2,1:1)) ;ins co. ptr
"RTN","IBCEF71",86,0)
 . I IBINSCO'="" I IBINSCO'=IB399INS Q  ;exclude if different ins
"RTN","IBCEF71",87,0)
 . S:IBINSCO="" IBINSCO="NONE" ;NONE will be included in the array
"RTN","IBCEF71",88,0)
 . S IBFRMTYP=+$P($G(^IBA(IBFX,IB3559,0)),"^",4) ;form type (0=both,1=UB92,2=HCFA 1500)
"RTN","IBCEF71",89,0)
 . I '(IBFRMTYP=0!(IB399FRM=0)) Q:IBFRMTYP'=IB399FRM  ;exclude if not "both" and different
"RTN","IBCEF71",90,0)
 . S IBCARE=+$P($G(^IBA(IBFX,IB3559,0)),"^",5) ;0=both(inp and outp),1=inp,2=outp,3=prescr  -- OR -- division ptr
"RTN","IBCEF71",91,0)
 . I $S(IBFILE=355.92:0,1:IBCARE=3) I IB399CAR'=3 Q  ; Id is only for Rx
"RTN","IBCEF71",92,0)
 . I $S(IBFILE=355.92:0,1:IBCARE=1!(IBCARE=2)) I IB399CAR=1!(IB399CAR=2) Q:IBCARE'=IB399CAR  ;both is OK
"RTN","IBCEF71",93,0)
 . I IBFILE=355.92,IBCARE Q:IB399CAR'=IBCARE  ; Division doesn't match
"RTN","IBCEF71",94,0)
 . S IBIDTYP=+$P($G(^IBA(IBFX,IB3559,0)),"^",6) ;prov ID type
"RTN","IBCEF71",95,0)
 . I IBFILE=355.9,IBIDTYP=$$TAXID^IBCEP8(),$S(IBPROV["VA(200":1,1:$P($G(^IBA(355.93,+IBPROV,0)),U,2)=2) Q  ; Don't extract tax id # id for indiv prov
"RTN","IBCEF71",96,0)
 . S IBIDT=IBIDTYP
"RTN","IBCEF71",97,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF71",98,0)
 . Q:$P($G(^IBE(355.97,+IBIDT,1)),U,9)
"RTN","IBCEF71",99,0)
 . Q:IBFILE=355.9&(IBIDTYP="X4")  ;exclude CLIA #
"RTN","IBCEF71",100,0)
 . S IBID=$P($G(^IBA(IBFX,IB3559,0)),"^",7) ;prov ID value
"RTN","IBCEF71",101,0)
 . I $G(IBPROVTP)'="",$G(IBINSTP)'="",IBPROVTP'=0 I '$$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) Q  ; No qualifier chk for fac
"RTN","IBCEF71",102,0)
 . I IBID'="" S IBDAT=IBPROV_"^"_IBINSCO_"^"_IBIDTYP_"^"_IBID_"^"_IBFRMTYP_"^"_IBCARE_"^"_"^"_IB3559_U_IBIDT,IBS2=$S(IBFX'=355.91:"",1:"INS DEF^")_IB3559
"RTN","IBCEF71",103,0)
 . I IBFILE'=355.92,IBID'="",IB399CAR=3 S IBQ=0 D  Q:IBQ
"RTN","IBCEF71",104,0)
 .. I $G(IBARRX(IBIDT))!(IBCARE=1) S IBQ=1 Q
"RTN","IBCEF71",105,0)
 .. I IBCARE=3&(IB399CAR=3) S IBARRX(IBIDT)=1 Q  ; Rx match
"RTN","IBCEF71",106,0)
 .. I IBCARE=0!(IBCARE=2) S IBARRX(IBIDT,IBINSCO,IBS2)=IBDAT,IBQ=1 Q
"RTN","IBCEF71",107,0)
 . I IBID'="" S IBARR(IBINSCO,IBS2)=IBDAT
"RTN","IBCEF71",108,0)
 ;
"RTN","IBCEF71",109,0)
 I IB399CAR=3 S Z=0 F  S Z=$O(IBARRX(Z)) Q:'Z  I '$G(IBARRX(Z)) D
"RTN","IBCEF71",110,0)
 . S Z1="" F  S Z1=$O(IBARRX(Z,Z1)) Q:Z1=""  S Z2="" F  S Z2=$O(IBARRX(Z,Z1,Z2)) Q:Z2=""  S IBARR(Z1,Z2)=IBARRX(Z,Z1,Z2)
"RTN","IBCEF71",111,0)
 ;
"RTN","IBCEF71",112,0)
 I IBPROV["VA(200," D  ; Get lic #s from file 2 for VA providers
"RTN","IBCEF71",113,0)
 . N Z,IBLIC
"RTN","IBCEF71",114,0)
 . S IBLIC=+IBPROV,IBLIC=$$GETLIC^IBCEP5D(.IBLIC)
"RTN","IBCEF71",115,0)
 . S IBIDTYP=$P($G(^IBE(355.97,+$$STLIC^IBCEP8(),0)),U,3)
"RTN","IBCEF71",116,0)
 . S Z=0 F  S Z=$O(IBLIC(Z)) Q:'Z  S:$$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) IBARR("NONE","LIC"_Z_"^"_IBPROV)=IBPROV_U_"NONE"_U_IBIDTYP_U_IBLIC(Z)_U_"0"_U_"0"_U_Z_U_U_+$$STLIC^IBCEP8()
"RTN","IBCEF71",117,0)
 I IBPROV["IBA(355.93" D
"RTN","IBCEF71",118,0)
 . Q:$P($G(^IBA(355.93,+IBPROV,0)),U,12)=""
"RTN","IBCEF71",119,0)
 . S IBIDTYP=$P($G(^IBE(355.97,+$$STLIC^IBCEP8(),0)),U,3)
"RTN","IBCEF71",120,0)
 . S:$$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) IBARR("NONE","LIC"_Z_"^"_IBPROV)=IBPROV_U_"NONE"_U_IBIDTYP_U_$P(^IBA(355.93,+IBPROV,0),U,12)_U_"0"_U_"0"_U_$P($G(^IBA(355.93,+IBPROV,0)),U,7)_U_U_+IBPROV
"RTN","IBCEF71",121,0)
 Q
"RTN","IBCEF71",122,0)
 ;
"RTN","IBCEF71",123,0)
ALLPRFAC(IBXIEN,IBXSAVE) ; Return all non-VA/outside facility prov ids
"RTN","IBCEF71",124,0)
 ; and all VA alternate prov ids
"RTN","IBCEF71",125,0)
 ; IBXIEN = ien file 399
"RTN","IBCEF71",126,0)
 ; IBXSAVE = subscripted array returned
"RTN","IBCEF71",127,0)
 N IBPROV,IBFRMTYP,IBCARE,IBRETARR,IBRET1,IBCOBN,Z,Z0,Z1,ZZ
"RTN","IBCEF71",128,0)
 K IBXSAVE("PROVINF_FAC",IBXIEN) ; Always rebuild this
"RTN","IBCEF71",129,0)
 S IBCOBN=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEF71",130,0)
 S IBFRMTYP=$$FT^IBCEF(IBXIEN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEF71",131,0)
 S IBPROV=$P($G(^DGCR(399,IBXIEN,"U2")),U,10)_";IBA(355.93,"
"RTN","IBCEF71",132,0)
 I 'IBPROV S IBCARE=$P($G(^DGCR(399,IBXIEN,0)),U,22)
"RTN","IBCEF71",133,0)
 I IBPROV D
"RTN","IBCEF71",134,0)
 . S IBCARE=$S($$ISRX^IBCEF1(IBXIEN):3,1:0) ;if Rx refill bill
"RTN","IBCEF71",135,0)
 . S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBXIEN,1) S:'IBCARE IBCARE=2 ;1-inp, 2-out
"RTN","IBCEF71",136,0)
 F Z=1:1:3 K IBRETARR I $G(^DGCR(399,IBXIEN,"I"_Z)) D
"RTN","IBCEF71",137,0)
 . D PRACT(+^DGCR(399,IBXIEN,"I"_Z),IBFRMTYP,IBCARE,IBPROV,.IBRETARR,0,$S(Z=IBCOBN:"C",1:"O"),$S('IBPROV:355.92,1:355.9))
"RTN","IBCEF71",138,0)
 . K IBRET1
"RTN","IBCEF71",139,0)
 . S Z0="" F  S Z0=$O(IBRETARR(Z0)) Q:Z0=""  S Z1="" F  S Z1=$O(IBRETARR(Z0,Z1)) Q:Z1=""  D
"RTN","IBCEF71",140,0)
 .. ; Sort by div/id type
"RTN","IBCEF71",141,0)
 .. S IBRET1($S(IBPROV:0,1:+$P(IBRETARR(Z0,Z1),U,6)),+$P(IBRETARR(Z0,Z1),U,9))=IBRETARR(Z0,Z1)
"RTN","IBCEF71",142,0)
 . S Z0=$O(IBRET1(""),-1) Q:Z0=""  S Z1="" S Z1=$O(IBRET1(Z0,Z1)) Q:Z1=""  D
"RTN","IBCEF71",143,0)
 .. I Z=IBCOBN S IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,$O(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0," "),-1)+1)=IBRET1(Z0,Z1) Q
"RTN","IBCEF71",144,0)
 .. S ZZ=$S(Z=1:1,Z=2:(IBCOBN=3)+1,1:2)
"RTN","IBCEF71",145,0)
 .. S IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ,0,$O(IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ,0," "),-1)+1)=IBRET1(Z0,Z1),IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ)=$E("PST",Z)
"RTN","IBCEF71",146,0)
 S IBXSAVE("PROVINF_FAC",IBXIEN)=IBXIEN,IBXSAVE("PROVINF_FAC",IBXIEN,"C",1)=$E("PST",IBCOBN)
"RTN","IBCEF71",147,0)
 Q
"RTN","IBCEF71",148,0)
 ;
"RTN","IBCEF71",149,0)
OTHID(IBXSAVE,IBXDATA,IBXIEN,PRIDSEQ,PRTYP,IBQ,IBFAC) ; From data in IBXSAVE,
"RTN","IBCEF71",150,0)
 ;  determine id or qualifier to output in the 837 records OP*
"RTN","IBCEF71",151,0)
 ; Returns IBXDATA array IBXDATA(n)=data
"RTN","IBCEF71",152,0)
 ; IBXIEN = ien of the bill-file 399
"RTN","IBCEF71",153,0)
 ; PRIDSEQ = sequence of the payer id needed
"RTN","IBCEF71",154,0)
 ; PRTYP = provider type to check for data
"RTN","IBCEF71",155,0)
 ; IBQ = 1 if qualifier needed, 0/null if id needed
"RTN","IBCEF71",156,0)
 ; IBFAC = 1 if facility id, 0 for individual provider id
"RTN","IBCEF71",157,0)
 ; 
"RTN","IBCEF71",158,0)
 N Z,Z0,Z1
"RTN","IBCEF71",159,0)
 S Z0="PROVINF"_$S('$G(IBFAC):"",1:"_FAC"),Z1=$S($G(IBQ):3,1:4)
"RTN","IBCEF71",160,0)
 S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  D
"RTN","IBCEF71",161,0)
 . I $P($G(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),+$G(PRIDSEQ))),U,4)'="" S IBXDATA(IBXSAVE("OSQ",Z))=$P(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),+$G(PRIDSEQ)),U,Z1)
"RTN","IBCEF71",162,0)
 Q
"RTN","IBCEF71",163,0)
 ;
"RTN","IBCEF71",164,0)
SETSEQ(IBXIEN,IBXSAVE,IBXDATA,PRTYP,IBFAC,IBOP) ; Sets up IBXSAVE("OSQ")
"RTN","IBCEF71",165,0)
 ;  array for other id seq in 837 records OP*
"RTN","IBCEF71",166,0)
 ; Returns IBXDATA(n)=cob seq indicator for ids
"RTN","IBCEF71",167,0)
 ; IBXIEN = ien of bill-399
"RTN","IBCEF71",168,0)
 ; PRTYP = the provider type to check for data for indiv provider
"RTN","IBCEF71",169,0)
 ; IBFAC = 1 if facility id, 0 for individual provider id
"RTN","IBCEF71",170,0)
 ; IBOP = segement # in OP being output
"RTN","IBCEF71",171,0)
 N C,Z,Z0,Z1,OK
"RTN","IBCEF71",172,0)
 S C=0,Z0="PROVINF"_$S('$G(IBFAC):"",1:"_FAC")
"RTN","IBCEF71",173,0)
 S:$G(IBFAC) PRTYP=0
"RTN","IBCEF71",174,0)
 S Z=0 F  S Z=$O(IBXSAVE(Z0,IBXIEN,"O",Z)) Q:'Z  S OK=0 D
"RTN","IBCEF71",175,0)
 . N Z1 F Z1=1:1 Q:'$D(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),Z1))  I $P(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),Z1),U,4)'="""" S OK=1 Q
"RTN","IBCEF71",176,0)
 . I OK S C=C+1,IBXSAVE("OSQ",Z)=C
"RTN","IBCEF71",177,0)
 S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=$G(IBXSAVE(Z0,IBXIEN,"O",Z)) D:IBXSAVE("OSQ",Z)>1 ID^IBCEF2(IBXSAVE("OSQ",Z),"OP"_$G(IBOP)_" ")
"RTN","IBCEF71",178,0)
 Q
"RTN","IBCEF71",179,0)
 ;
"RTN","IBCEF71",180,0)
PSPRV(IBIFN) ;
"RTN","IBCEF71",181,0)
 Q $$PSPRV^IBCEF7(IBIFN) ; Moved
"RTN","IBCEF71",182,0)
 ;
"RTN","IBCEF72")
0^21^B52208201
"RTN","IBCEF72",1,0)
IBCEF72 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF72",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEF72",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF72",4,0)
 ;
"RTN","IBCEF72",5,0)
 ;
"RTN","IBCEF72",6,0)
 ;Input:
"RTN","IBCEF72",7,0)
 ;IBINSCO - ptr to #36
"RTN","IBCEF72",8,0)
 ;IBFRMTYP 0=unknwn/both,1=UB92,2=HCFA 1500
"RTN","IBCEF72",9,0)
 ;IBCARE - 0=unknwn or both inp/outp,1=inpatient, 2=outpatient, 3 -RX
"RTN","IBCEF72",10,0)
 ;Output: X12 IDtype^ID^ID TYPE ptr to file 355.97
"RTN","IBCEF72",11,0)
CH35591(IBINSCO,IBFRMTYP,IBCARE) ;
"RTN","IBCEF72",12,0)
 N IB35591,IBRET,IB1
"RTN","IBCEF72",13,0)
 S IB35591=0,IBRET=""
"RTN","IBCEF72",14,0)
 F  S IB35591=$O(^IBA(355.91,"B",IBINSCO,IB35591)) Q:+IB35591=0  Q:IBRET'=""  D
"RTN","IBCEF72",15,0)
 . S IB1=$G(^IBA(355.91,IB35591,0))
"RTN","IBCEF72",16,0)
 . I '($P(IB1,"^",4)=0!(IBFRMTYP=0)) Q:$P(IB1,"^",4)'=IBFRMTYP  ;if wrong form type
"RTN","IBCEF72",17,0)
 . I ($P(IB1,"^",5)=3)!(IBCARE=3) Q:IBCARE'=$P(IB1,"^",5)  ;if not RX
"RTN","IBCEF72",18,0)
 . I ($P(IB1,"^",5)=1)!($P(IB1,"^",5)=2) I (IBCARE=1)!(IBCARE=2) Q:$P(IB1,"^",5)'=IBCARE  ;if wrong care type
"RTN","IBCEF72",19,0)
 . S IBRET=$P($G(^IBE(355.97,+$P(IB1,"^",6),0)),"^",3)_"^"_$P(IB1,"^",7)_U_+$P(IB1,U,6)
"RTN","IBCEF72",20,0)
 Q IBRET
"RTN","IBCEF72",21,0)
 ;
"RTN","IBCEF72",22,0)
FINDEIN(IBXIEN,IBPROV,IBFAC,IBS) ; find EIN for facility/ SSN for person
"RTN","IBCEF72",23,0)
 ; IBXIEN = ien of bill entry file 399
"RTN","IBCEF72",24,0)
 ; IBFAC = 1 if facility, 0 if individual provider
"RTN","IBCEF72",25,0)
 ; IBPROV = ien of provider (vp format)
"RTN","IBCEF72",26,0)
 ; IBS = 1 if person's EIN should be returned if there, otherwise SSN
"RTN","IBCEF72",27,0)
 ; FUNCTION RETURNS 
"RTN","IBCEF72",28,0)
 ;    EIN or SSN ^ 24 for EIN, 34 for SSN or null if none found
"RTN","IBCEF72",29,0)
 N Z,Z0,IBARR,IBEIN,IBSSN
"RTN","IBCEF72",30,0)
 S (IBEIN,IBSSN)=""
"RTN","IBCEF72",31,0)
 D ALLID^IBCEP8(IBPROV,"",.IBARR)
"RTN","IBCEF72",32,0)
 S Z=0 F  S Z=$O(IBARR(Z)) Q:'Z  D  Q:IBEIN'=""
"RTN","IBCEF72",33,0)
 . I $G(IBFAC) Q:$P(IBARR(Z),U,7)'="EI"  S IBEIN=$P(IBARR(Z),U,2)_U_24 Q
"RTN","IBCEF72",34,0)
 . I $P(IBARR(Z),U,7)="SY" D  Q
"RTN","IBCEF72",35,0)
 .. I $G(IBS) S IBSSN=$P(IBARR(Z),U,2)_U_34 Q
"RTN","IBCEF72",36,0)
 . S IBEIN=$P(IBARR(Z),U,2)_U_24
"RTN","IBCEF72",37,0)
 . I $G(IBS),$P(IBARR(Z),U,7)="EI" S IBEIN=$P(IBARR(Z),U,2)_U_24
"RTN","IBCEF72",38,0)
 I $G(IBS),IBEIN="" S IBEIN=IBSSN
"RTN","IBCEF72",39,0)
 Q IBEIN
"RTN","IBCEF72",40,0)
 ;
"RTN","IBCEF72",41,0)
 ;
"RTN","IBCEF72",42,0)
NONVAID(IBXIEN,IBX,IBFAC,IBS) ; Find the non-VA provider default id
"RTN","IBCEF72",43,0)
 ; IBXIEN = the ien of the bill (file 399)
"RTN","IBCEF72",44,0)
 ; IBX = id data returned if passed by reference
"RTN","IBCEF72",45,0)
 ; IBFAC = 1 if getting the id for the facility or 0 for rendering prov
"RTN","IBCEF72",46,0)
 ; IBS = 1 if getting id for person, but need the EIN if there
"RTN","IBCEF72",47,0)
 ; Function returns the id^type of id^person/facility flag:
"RTN","IBCEF72",48,0)
 ;   Type of id: 1 = SSN    2 = EIN   0 = not found
"RTN","IBCEF72",49,0)
 ;   person/facility: 1 = person   2 = facility
"RTN","IBCEF72",50,0)
 N Z,IBXSAVE,IBU2,IBTYPE,IBZ,IBF,IBPROV,Q,Q0
"RTN","IBCEF72",51,0)
 S IBTYPE=2,IBU2=$G(^DGCR(399,IBXIEN,"U2")),IBF=2,IBPROV=""
"RTN","IBCEF72",52,0)
 ;
"RTN","IBCEF72",53,0)
 S Z=$P(IBU2,U,10)
"RTN","IBCEF72",54,0)
 I 'Z S IBX="",IBTYPE=0 G NONVAQ ; Not a non-VA facility
"RTN","IBCEF72",55,0)
 S IBPROV=Z_";IBA(355.93,"
"RTN","IBCEF72",56,0)
 ;
"RTN","IBCEF72",57,0)
 ; Get EIN
"RTN","IBCEF72",58,0)
 I $G(IBFAC) D  G NONVAQ
"RTN","IBCEF72",59,0)
 . S IBX=$P($$FINDEIN(IBXIEN,IBPROV,IBFAC),U),IBTYPE=2
"RTN","IBCEF72",60,0)
 ;
"RTN","IBCEF72",61,0)
 ; Get EIN/SSN
"RTN","IBCEF72",62,0)
 I '$G(IBFAC) D  G NONVAQ
"RTN","IBCEF72",63,0)
 . S IBX="",IBF=1
"RTN","IBCEF72",64,0)
 . S Q0=($$FT^IBCEF(IBXIEN)=3)+3 ; 3 for rendering/4 for attending
"RTN","IBCEF72",65,0)
 . S Q=+$O(^DGCR(399,IBXIEN,"PRV","B",Q0,0))
"RTN","IBCEF72",66,0)
 . S IBPROV=$P($G(^DGCR(399,IBXIEN,"PRV",Q,0)),U,2)
"RTN","IBCEF72",67,0)
 . I IBPROV S IBX=$$FINDEIN(IBXIEN,IBPROV,IBFAC,$G(IBS)),IBTYPE=$S($P(IBX,U,2)=24:2,$P(IBX,U,2)=34:1,1:0),IBX=$P(IBX,U)
"RTN","IBCEF72",68,0)
 ;
"RTN","IBCEF72",69,0)
NONVAQ I IBTYPE,IBX="",$P(IBU2,U,12)'="" S IBX=$P(IBU2,U,12) ; pull from 399
"RTN","IBCEF72",70,0)
 S IBX=$G(IBX)
"RTN","IBCEF72",71,0)
 Q IBX_U_IBTYPE_U_IBF
"RTN","IBCEF72",72,0)
 ;----
"RTN","IBCEF72",73,0)
 ;checks if there is data for OP* segments and 
"RTN","IBCEF72",74,0)
 ;then populates PROV COB SEQ
"RTN","IBCEF72",75,0)
 ;Input:
"RTN","IBCEF72",76,0)
 ;IBXIEN - ien in #399
"RTN","IBCEF72",77,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF72",78,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF72",79,0)
 ;IBFUNC - FUNCTION from #399 (1-refering, 2 -operating, etc)
"RTN","IBCEF72",80,0)
 ;IBSEGM - segment record ID, optional
"RTN","IBCEF72",81,0)
 ;Output:
"RTN","IBCEF72",82,0)
 ; IBDATA with formatted output
"RTN","IBCEF72",83,0)
PROVSEQ(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBSEGM) ;
"RTN","IBCEF72",84,0)
 N IB1,IB2,IBINS,IBFL
"RTN","IBCEF72",85,0)
 S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF72",86,0)
 F IB1=1,2 D
"RTN","IBCEF72",87,0)
 . Q:'$$ISINSUR^IBCEF71($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN)  ;don't create anything if there is no such insurance
"RTN","IBCEF72",88,0)
 . I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4)
"RTN","IBCEF72",89,0)
 . S:$O(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,0)) IBDATA(IB1)=$G(IBSAVE("PROVINF",IBXIEN,"O",IB1))
"RTN","IBCEF72",90,0)
 . I $G(IBSEGM)'="" D:$O(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,0)) ID^IBCEF2(IB1,IBSEGM)
"RTN","IBCEF72",91,0)
 Q
"RTN","IBCEF72",92,0)
 ;
"RTN","IBCEF72",93,0)
OUTPRVID(IBXIEN,IBXSAVE) ; Extract the outside provider or facility ids
"RTN","IBCEF72",94,0)
 ; into IBXSAVE array
"RTN","IBCEF72",95,0)
 ; Function returns 1 if person or 2 if facility ids or "" if neither
"RTN","IBCEF72",96,0)
 N Z,IBXDATA,IBPERSON,TAG
"RTN","IBCEF72",97,0)
 S Z=$$PSPRV^IBCEF7(IBXIEN),IBPERSON=""
"RTN","IBCEF72",98,0)
 I Z=111!(Z=101) S TAG=$S(Z=101:"OUTSIDE FAC PROVIDER INF",1:"CUR/OTH PROVIDER INFO") D F^IBCEF("N-ALL "_TAG) S IBPERSON=$S('$E(Z,2):2,1:1)
"RTN","IBCEF72",99,0)
 Q IBPERSON
"RTN","IBCEF72",100,0)
 ;
"RTN","IBCEF72",101,0)
OUTPRV(IBREC,IBXIEN,IBXSAVE) ; Extract the outside provider or facility ids
"RTN","IBCEF72",102,0)
 ; into IBXSAVE array
"RTN","IBCEF72",103,0)
 ; Function returns 1 if person or 2 if facility ids or "" if neither
"RTN","IBCEF72",104,0)
 ; IBREC = the record whose ids should be returned
"RTN","IBCEF72",105,0)
 N IBPERSON,IBFRM,IBTYPE,IBFAC
"RTN","IBCEF72",106,0)
 I IBREC="SUB1"!(IBREC="OP6") D
"RTN","IBCEF72",107,0)
 . K IBXSAVE("PROVINF",IBXIEN),IBXSAVE("PROVINF_FAC",IBXIEN)
"RTN","IBCEF72",108,0)
 . S IBPERSON=$$OUTPRVID(IBXIEN,.IBXSAVE),IBFAC=$S(IBPERSON=1:0,1:1)
"RTN","IBCEF72",109,0)
 E  D
"RTN","IBCEF72",110,0)
 . K IBXSAVE("PROVINF_FAC",IBXIEN)
"RTN","IBCEF72",111,0)
 . D F^IBCEF("N-ALL OUTSIDE FAC PROVIDER INF")
"RTN","IBCEF72",112,0)
 . S IBPERSON=2,IBFAC=1
"RTN","IBCEF72",113,0)
 S IBFRM=$$FT^IBCEF(IBXIEN),IBFRM=$S(IBFRM=2:2,1:1)
"RTN","IBCEF72",114,0)
 S IBTYPE=$S(IBREC["SUB":"C",1:"O")
"RTN","IBCEF72",115,0)
 D CHCKSUB^IBCEF73(IBFRM,IBREC,IBFAC,IBTYPE,.IBXSAVE)
"RTN","IBCEF72",116,0)
 Q IBPERSON
"RTN","IBCEF72",117,0)
 ;
"RTN","IBCEF72",118,0)
 ;get IENs in file #36 for other insurances
"RTN","IBCEF72",119,0)
OTHINS(IB399,IBRES) ;
"RTN","IBCEF72",120,0)
 N IBFRMTYP,Z,Z1,Z2,Z4
"RTN","IBCEF72",121,0)
 S Z=$$COBN^IBCEF(IB399),Z0=0
"RTN","IBCEF72",122,0)
 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IB399,"I"_Z1)) S Z0=Z0+1,IBRES(Z0)=+$G(^DGCR(399,IB399,"I"_Z1))
"RTN","IBCEF72",123,0)
 Q
"RTN","IBCEF72",124,0)
 ;get other insurance EDI ID NUMBERs
"RTN","IBCEF72",125,0)
OTHINSID(IB399,IBRES) ;insurance EDI 
"RTN","IBCEF72",126,0)
 N IBFRMTYP,IBZ,Z0,Z1,Z4
"RTN","IBCEF72",127,0)
 S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEF72",128,0)
 S Z4=$S(IBFRMTYP=1:4,1:2) ;UB2 - piece4,HCFA or BOTH -piece 2
"RTN","IBCEF72",129,0)
 D OTHINS(IB399,.IBZ)
"RTN","IBCEF72",130,0)
 S Z1=0
"RTN","IBCEF72",131,0)
 F Z0=1:1:2 I $G(IBZ(Z0)) S IBRES(Z0)=$S($$MCRWNR^IBEFUNC(+IBZ(Z0)):$S(IBFRMTYP=1:"12M61",1:"SMTX1"),1:$P($G(^DIC(36,+IBZ(Z0),3)),U,Z4))
"RTN","IBCEF72",132,0)
 Q
"RTN","IBCEF72",133,0)
 ;
"RTN","IBCEF72",134,0)
 ;get other insurance addresses
"RTN","IBCEF72",135,0)
OTHINADR(IB399,IBRES,IBADDFLD) ;insurance EDI
"RTN","IBCEF72",136,0)
 N IBZ,Z0,Z1,Z4
"RTN","IBCEF72",137,0)
 D OTHINS(IB399,.IBZ)
"RTN","IBCEF72",138,0)
 S Z1=0
"RTN","IBCEF72",139,0)
 I IBADDFLD=18 D  Q
"RTN","IBCEF72",140,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",141,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,1)
"RTN","IBCEF72",142,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,55)
"RTN","IBCEF72",143,0)
 I IBADDFLD=18.9 D  Q
"RTN","IBCEF72",144,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",145,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,1)
"RTN","IBCEF72",146,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,2) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",147,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,3) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",148,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,4) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",149,0)
 . . S Z4=$P($G(^DIC(5,+$P($G(^DIC(36,+IBZ(Z0),.11)),U,5),0)),U,2) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",150,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,6) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",151,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,157)
"RTN","IBCEF72",152,0)
 I IBADDFLD=19 D  Q
"RTN","IBCEF72",153,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",154,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,2)
"RTN","IBCEF72",155,0)
 . . S IBRES(Z0)=IBRES(Z0)_" "_$P($G(^DIC(36,+IBZ(Z0),.11)),U,3)
"RTN","IBCEF72",156,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,55)
"RTN","IBCEF72",157,0)
 I IBADDFLD=20 D  Q
"RTN","IBCEF72",158,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",159,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,4)
"RTN","IBCEF72",160,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,30)
"RTN","IBCEF72",161,0)
 I IBADDFLD=21 D  Q
"RTN","IBCEF72",162,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",163,0)
 . . S IBRES(Z0)=$P($G(^DIC(5,+$P($G(^DIC(36,+IBZ(Z0),.11)),U,5),0)),U,2)
"RTN","IBCEF72",164,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,2)
"RTN","IBCEF72",165,0)
 I IBADDFLD=22 D  Q
"RTN","IBCEF72",166,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",167,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,6)
"RTN","IBCEF72",168,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,15)
"RTN","IBCEF72",169,0)
 Q
"RTN","IBCEF72",170,0)
 ;
"RTN","IBCEF72",171,0)
SFIDQ(IBXIEN,IBXSAVE,IBXDATA) ; Find the service facility id qualifier for
"RTN","IBCEF72",172,0)
 ; 837 record SUB2-5
"RTN","IBCEF72",173,0)
 ;IBXIEN = ien of 399
"RTN","IBCEF72",174,0)
 ;Pass by reference: IBXSAVE (input/output)  IBXDATA (output)
"RTN","IBCEF72",175,0)
 N B,Z
"RTN","IBCEF72",176,0)
 K IBXSAVE("NVID")
"RTN","IBCEF72",177,0)
 D  ; protect IBXDATA
"RTN","IBCEF72",178,0)
 . N IBXDATA
"RTN","IBCEF72",179,0)
 . D F^IBCEF("N-RENDERING INSTITUTION")
"RTN","IBCEF72",180,0)
 . S:IBXDATA'="" IBXSAVE("IBFAC")=IBXDATA
"RTN","IBCEF72",181,0)
 I $P($G(IBXSAVE("IBFAC")),U,2)'=1 K IBXDATA Q
"RTN","IBCEF72",182,0)
 S Z=$$PSPRV^IBCEF7(IBXIEN),IBXSAVE("NVID")=$$NONVAID^IBCEF72(IBXIEN,.B,'$E(Z,2),1),IBXDATA=$P("^34^24",U,$P(IBXSAVE("NVID"),U,2)+1)
"RTN","IBCEF72",183,0)
 ;S Z=$$PSPRV^IBCEF7(IBXIEN),IBXSAVE("NVID")=$$NONVAID^IBCEF72(IBXIEN,.B,'$E(Z,2),1),IBXDATA=24
"RTN","IBCEF72",184,0)
 Q
"RTN","IBCEF72",185,0)
 ;
"RTN","IBCEF72",186,0)
OTHP36(IBXIEN,IBZOUT)   ;
"RTN","IBCEF72",187,0)
 N Z,Z0,Z1,IBZ
"RTN","IBCEF72",188,0)
 D F^IBCEF("N-ALL INSURANCE CO 837 ID","IBZ")
"RTN","IBCEF72",189,0)
 F Z=1,2,3 S IBZOUT(Z)=+$$POLICY^IBCEF(IBXIEN,1,$E("PST",Z))
"RTN","IBCEF72",190,0)
 Q
"RTN","IBCEF72",191,0)
 ;
"RTN","IBCEF72",192,0)
 ;---------SORT-----------
"RTN","IBCEF72",193,0)
 ;IBPRNUM - seq #
"RTN","IBCEF72",194,0)
 ;IBPRTYP - type of provider (use FUNCTION value from file 399, fld 222)
"RTN","IBCEF72",195,0)
 ;IB399 = ien file 399
"RTN","IBCEF72",196,0)
 ;IBSRC,IBDST - source,destination arrays
"RTN","IBCEF72",197,0)
 ;IBN - starting #
"RTN","IBCEF72",198,0)
 ;Output:
"RTN","IBCEF72",199,0)
 ; IBDST(1-primary/2-secondary provider,Provider type(FUNCTION),N)=
"RTN","IBCEF72",200,0)
 ; =provider/VARIABLEPTR^Insurance PTR #36 or NONE^ID type^ID^Form type^Care type^state ptr #5 for state license #
"RTN","IBCEF72",201,0)
 ; where N is numeration (1 for ID1, 2 for ID2, etc)
"RTN","IBCEF72",202,0)
GETSSN(IBPTR)   ;look for SSN in #200 first and if not found then look at #355.9
"RTN","IBCEF72",203,0)
 ;if in file #200
"RTN","IBCEF72",204,0)
 I $P(IBPTR,";",2)="VA(200," Q $$SSN200^IBCEF73(IBPTR)
"RTN","IBCEF72",205,0)
 ;if in 355.93 then use 355.9
"RTN","IBCEF72",206,0)
 Q $$SSN3559^IBCEF73(IBPTR)
"RTN","IBCEF72",207,0)
 ;--
"RTN","IBCEF72",208,0)
 ;SSN3559
"RTN","IBCEF72",209,0)
 ;Find SSN from 355.9
"RTN","IBCEF72",210,0)
 ;Input:
"RTN","IBCEF72",211,0)
 ; Variable pointer to ^VA(200 or ^IBA(355.93
"RTN","IBCEF72",212,0)
 ;Output:
"RTN","IBCEF72",213,0)
 ; SSN or null
"RTN","IBCEF72",214,0)
 ;
"RTN","IBCEF72",215,0)
PADNDC(Z) ;PAD LEADING ZERO'S INTO A NON 5-4-2 FORMAT NDC NUMBER
"RTN","IBCEF72",216,0)
 ;Z IS ITERATION, ONLY PAD CURRENT NDC NUMBER
"RTN","IBCEF72",217,0)
 N NDC
"RTN","IBCEF72",218,0)
 S NDC=$P(IBXSAVE("OUTPT",Z,"RX"),"^",3)
"RTN","IBCEF72",219,0)
 Q:$L(NDC)=13
"RTN","IBCEF72",220,0)
 I $L(NDC)=14 D  Q
"RTN","IBCEF72",221,0)
 . S $P(NDC,"-",1)=$E($P(NDC,"-",1),2,$L($P(NDC,"-",1)))
"RTN","IBCEF72",222,0)
 . S $P(IBXSAVE("OUTPT",Z,"RX"),"^",3)=NDC
"RTN","IBCEF72",223,0)
 I $L($P(NDC,"-",1))'=5 S $P(NDC,"-",1)="0"_$P(NDC,"-",1)
"RTN","IBCEF72",224,0)
 I $L($P(NDC,"-",2))'=4 S $P(NDC,"-",2)="0"_$P(NDC,"-",2)
"RTN","IBCEF72",225,0)
 I $L($P(NDC,"-",3))'=2 S $P(NDC,"-",3)="0"_$P(NDC,"-",3)
"RTN","IBCEF72",226,0)
 S $P(IBXSAVE("OUTPT",Z,"RX"),"^",3)=NDC
"RTN","IBCEF72",227,0)
 Q
"RTN","IBCEF72",228,0)
 ;
"RTN","IBCEF73")
0^23^B55011921
"RTN","IBCEF73",1,0)
IBCEF73 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF73",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEF73",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF73",4,0)
 ;
"RTN","IBCEF73",5,0)
 ;check qualifier
"RTN","IBCEF73",6,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",7,0)
 ;IBPROV - function in #399 (1-referring, 2-operating,etc)
"RTN","IBCEF73",8,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",9,0)
 ;IBVAL - value to check
"RTN","IBCEF73",10,0)
CHCKSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",11,0)
 I IBFRM=0 Q:$$CHSEC(1,IBPROV,IBTYPE,IBVAL) 1  Q $$CHSEC(2,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",12,0)
 Q $$CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",13,0)
 ;
"RTN","IBCEF73",14,0)
CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",15,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",16,0)
 ;referring
"RTN","IBCEF73",17,0)
 I IBPROV=1 S IBSTR=$S(IBTYPE="C":$$OPR5(IBFRM),IBTYPE="O":$$OP4(IBFRM),1:"")
"RTN","IBCEF73",18,0)
 ;operating
"RTN","IBCEF73",19,0)
 I IBPROV=2 S IBSTR=$S(IBTYPE="C":$$OPR3(IBFRM),IBTYPE="O":$$OP2(IBFRM),1:"")
"RTN","IBCEF73",20,0)
 ;rendering
"RTN","IBCEF73",21,0)
 I IBPROV=3 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",22,0)
 ;attending
"RTN","IBCEF73",23,0)
 I IBPROV=4 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",24,0)
 ;supervising
"RTN","IBCEF73",25,0)
 I IBPROV=5 S IBSTR=$S(IBTYPE="C":$$OPR8(IBFRM),IBTYPE="O":$$OP8(IBFRM),1:"")
"RTN","IBCEF73",26,0)
 ;other
"RTN","IBCEF73",27,0)
 I IBPROV=9 S IBSTR=$S(IBTYPE="C":$$OPR4(IBFRM),IBTYPE="O":$$OP9(IBFRM),1:"")
"RTN","IBCEF73",28,0)
 Q:IBPROV=0!(IBSTR="") 1  ;if "" or facility id always return 1
"RTN","IBCEF73",29,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",30,0)
 ;
"RTN","IBCEF73",31,0)
 ;Filter invalid qualifier entries for records SUB1,SUB2,OP6,OP7,OP3
"RTN","IBCEF73",32,0)
 ; Rebuild the IBXSAVE("PROVINF" or IBXSAVE("PROVINF_FAC" array with
"RTN","IBCEF73",33,0)
 ;  only ids that have valid qualifiers
"RTN","IBCEF73",34,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",35,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",36,0)
 ;IBFAC - 1 if facility check, 0 if attending/rendering check
"RTN","IBCEF73",37,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",38,0)
 ;IBXSAVE - the array of provider ids extracted, returned filtered -
"RTN","IBCEF73",39,0)
 ;   passed by reference
"RTN","IBCEF73",40,0)
CHCKSUB(IBFRM,IBREC,IBFAC,IBTYPE,IBXSAVE) ;
"RTN","IBCEF73",41,0)
 N Z,Z0,Z1,Z2,CT,IBSAVE
"RTN","IBCEF73",42,0)
 S Z="PROVINF"_$P("^_FAC",U,$G(IBFAC)+1)
"RTN","IBCEF73",43,0)
 I '$G(IBXSAVE(Z,IBXIEN)) D
"RTN","IBCEF73",44,0)
 . D F^IBCEF("N-ALL "_$S($G(IBFAC):"OUTSIDE FAC PROVIDER INF",1:"CUR/OTH PROVIDER INFO"))
"RTN","IBCEF73",45,0)
 M IBSAVE(Z,IBXIEN,IBTYPE)=IBXSAVE(Z,IBXIEN,IBTYPE) K IBXSAVE(Z,IBXIEN,IBTYPE)
"RTN","IBCEF73",46,0)
 S Z0=0 F  S Z0=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0)) Q:'Z0  S Z1="" F  S Z1=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1)) Q:Z1=""  S (Z2,CT)=0 F  S Z2=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)) Q:'Z2  D
"RTN","IBCEF73",47,0)
 . N IBVAL
"RTN","IBCEF73",48,0)
 . S IBVAL=$P(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2),U,3)
"RTN","IBCEF73",49,0)
 . I IBFRM=0 D  Q
"RTN","IBCEF73",50,0)
 .. I $S($$CHSUB(1,IBREC,IBVAL):1,1:$$CHSUB(2,IBPROV,IBTYPE,IBVAL)) D
"RTN","IBCEF73",51,0)
 ... S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",52,0)
 ... I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",53,0)
 . I $$CHSUB(IBFRM,IBREC,IBVAL) D
"RTN","IBCEF73",54,0)
 .. S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",55,0)
 .. I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",56,0)
 Q
"RTN","IBCEF73",57,0)
 ;
"RTN","IBCEF73",58,0)
 ; Check if valid qualifier
"RTN","IBCEF73",59,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",60,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",61,0)
 ;IBVAL - value to check
"RTN","IBCEF73",62,0)
CHSUB(IBFRM,IBREC,IBVAL) ;
"RTN","IBCEF73",63,0)
 N IBSTR
"RTN","IBCEF73",64,0)
 I IBREC="SUB1" S IBSTR=$$SUB1(IBFRM)
"RTN","IBCEF73",65,0)
 I IBREC="SUB2" S IBSTR=$$SUB2(IBFRM)
"RTN","IBCEF73",66,0)
 I IBREC="OP7" S IBSTR=$$OP7(IBFRM)
"RTN","IBCEF73",67,0)
 I IBREC="OP3" S IBSTR=$$OP3(IBFRM)
"RTN","IBCEF73",68,0)
 I IBREC="OP6" S IBSTR=$$OP6(IBFRM)
"RTN","IBCEF73",69,0)
 Q:$G(IBSTR)="" 1  ;if "" always return 1
"RTN","IBCEF73",70,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",71,0)
 ;
"RTN","IBCEF73",72,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",73,0)
OPR2(IBFRM) ;
"RTN","IBCEF73",74,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",75,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",76,0)
 Q ""
"RTN","IBCEF73",77,0)
 ;
"RTN","IBCEF73",78,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",79,0)
OP1(IBFRM) ;
"RTN","IBCEF73",80,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",81,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",82,0)
 Q ""
"RTN","IBCEF73",83,0)
 ;
"RTN","IBCEF73",84,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",85,0)
OPR3(IBFRM) ;
"RTN","IBCEF73",86,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",87,0)
 Q ""
"RTN","IBCEF73",88,0)
 ;
"RTN","IBCEF73",89,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",90,0)
OP2(IBFRM) ;
"RTN","IBCEF73",91,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",92,0)
 Q ""
"RTN","IBCEF73",93,0)
 ;
"RTN","IBCEF73",94,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",95,0)
SUB1(IBFRM) ;
"RTN","IBCEF73",96,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",97,0)
 Q:IBFRM=2 "^0B^X^1B^1C^1D^1G^1H^EI^G2^LU^N5^TJ^X4^U3^SY^X5^"
"RTN","IBCEF73",98,0)
 Q ""
"RTN","IBCEF73",99,0)
 ;
"RTN","IBCEF73",100,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",101,0)
OPR4(IBFRM) ;
"RTN","IBCEF73",102,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",103,0)
 Q ""
"RTN","IBCEF73",104,0)
 ;
"RTN","IBCEF73",105,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",106,0)
OP9(IBFRM) ;
"RTN","IBCEF73",107,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",108,0)
 Q ""
"RTN","IBCEF73",109,0)
 ;
"RTN","IBCEF73",110,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",111,0)
SUB2(IBFRM) ;
"RTN","IBCEF73",112,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^1J^EI^FH^G2^G5^LU^N5^X5^"
"RTN","IBCEF73",113,0)
 Q:IBFRM=2 "^0B^X4^1A^1B^1C^1D^1G^1H^G2^LU^X5^"
"RTN","IBCEF73",114,0)
 Q ""
"RTN","IBCEF73",115,0)
 ;
"RTN","IBCEF73",116,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",117,0)
OP3(IBFRM) ;
"RTN","IBCEF73",118,0)
 Q:IBFRM=1 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",119,0)
 Q ""
"RTN","IBCEF73",120,0)
 ;
"RTN","IBCEF73",121,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",122,0)
OPR5(IBFRM) ;
"RTN","IBCEF73",123,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",124,0)
 Q ""
"RTN","IBCEF73",125,0)
 ;
"RTN","IBCEF73",126,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",127,0)
OPR8(IBFRM) ;
"RTN","IBCEF73",128,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",129,0)
 Q ""
"RTN","IBCEF73",130,0)
 ;
"RTN","IBCEF73",131,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",132,0)
OP4(IBFRM) ;
"RTN","IBCEF73",133,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",134,0)
 Q ""
"RTN","IBCEF73",135,0)
 ;
"RTN","IBCEF73",136,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",137,0)
OP8(IBFRM) ;
"RTN","IBCEF73",138,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^N5^"
"RTN","IBCEF73",139,0)
 Q ""
"RTN","IBCEF73",140,0)
 ;
"RTN","IBCEF73",141,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",142,0)
OP6(IBFRM) ;
"RTN","IBCEF73",143,0)
 Q:IBFRM=2 "^X^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",144,0)
 Q ""
"RTN","IBCEF73",145,0)
 ;
"RTN","IBCEF73",146,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",147,0)
OP7(IBFRM) ;
"RTN","IBCEF73",148,0)
 Q:IBFRM=2 "^X^1B^1C^1D^G2^LU^N5^"
"RTN","IBCEF73",149,0)
 Q ""
"RTN","IBCEF73",150,0)
 ;
"RTN","IBCEF73",151,0)
 ;check qualifier for PRV1
"RTN","IBCEF73",152,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",153,0)
 ;IBVAL - value to check
"RTN","IBCEF73",154,0)
CHCKPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",155,0)
 I IBFRM=0 Q:$$CHPRV1(1,IBVAL) 1  Q $$CHPRV1(2,IBVAL)
"RTN","IBCEF73",156,0)
 Q $$CHPRV1(IBFRM,IBVAL)
"RTN","IBCEF73",157,0)
 ;IBFRM 0-both, 1=UB92,2=HCFA 1500
"RTN","IBCEF73",158,0)
CHPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",159,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",160,0)
 S IBSTR=$$PRV1(IBFRM)
"RTN","IBCEF73",161,0)
 Q:IBSTR="" 1
"RTN","IBCEF73",162,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",163,0)
 ;
"RTN","IBCEF73",164,0)
PRV1(IBFRM) ;
"RTN","IBCEF73",165,0)
 Q:IBFRM=1 "^1A^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^SY^X5^"
"RTN","IBCEF73",166,0)
 Q:IBFRM=2 "^1B^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^U3^SY^X5^"
"RTN","IBCEF73",167,0)
 Q ""
"RTN","IBCEF73",168,0)
 ;
"RTN","IBCEF73",169,0)
PTSELF ;This tag is for the CI2 segment. If the IBXSAVE("IADR") is empty
"RTN","IBCEF73",170,0)
 ;check to see if the relationship to pt is 18 (self) if so pull info
"RTN","IBCEF73",171,0)
 ;from PT1 calls
"RTN","IBCEF73",172,0)
 ;See if relationship to insured is 18 if not or if "" quit
"RTN","IBCEF73",173,0)
 N IBZ
"RTN","IBCEF73",174,0)
 D F^IBCEF("N-ALL INSURED PT RELATION","IBZ",,IBXIEN)
"RTN","IBCEF73",175,0)
 S IBZ=$G(IBZ(+$$COBN^IBCEF(IBXIEN)))
"RTN","IBCEF73",176,0)
 S IBZ=$$RELATION^IBCEFG1(IBZ)
"RTN","IBCEF73",177,0)
 I IBZ'="18" S IBXDATA="" Q
"RTN","IBCEF73",178,0)
 N IBZ D F^IBCEF("N-PATIENT STREET ADDRESS 1-3","IBZ",,IBXIEN)
"RTN","IBCEF73",179,0)
 S IBXDATA="18"
"RTN","IBCEF73",180,0)
 Q
"RTN","IBCEF73",181,0)
 ;
"RTN","IBCEF73",182,0)
NOPUNCT(X,SPACE,EXC) ; Strip punctuation from data in X
"RTN","IBCEF73",183,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF73",184,0)
 ; EXC = list of punct not to strip
"RTN","IBCEF73",185,0)
 ;
"RTN","IBCEF73",186,0)
 N PUNCT,Z
"RTN","IBCEF73",187,0)
 S PUNCT=".,-+(){}[]\/><:;?|=_*&%$#@!~`^'"""
"RTN","IBCEF73",188,0)
 I $G(SPACE) S PUNCT=PUNCT_" "
"RTN","IBCEF73",189,0)
 I $G(EXC)'="" F Z=1:1:$L(EXC) S PUNCT=$P(PUNCT,$E(EXC,Z))_$P(PUNCT,$E(EXC,Z),U,2)
"RTN","IBCEF73",190,0)
 N L S L=""
"RTN","IBCEF73",191,0)
 F  S L=$O(X(L)) Q:L=""  D
"RTN","IBCEF73",192,0)
 . S X(L)=$TR(X(L),PUNCT)
"RTN","IBCEF73",193,0)
 I $G(X)'="" D
"RTN","IBCEF73",194,0)
 . S X=$TR(X,PUNCT)
"RTN","IBCEF73",195,0)
 Q
"RTN","IBCEF73",196,0)
 ;
"RTN","IBCEF73",197,0)
PROVID(IBXIEN) ;This modified version of prov id call is to acquire the SSN
"RTN","IBCEF73",198,0)
 ;first, if the ssn is not available then we need to get the tax id.
"RTN","IBCEF73",199,0)
 ;we also need to provide the modifier for which value it is
"RTN","IBCEF73",200,0)
 Q:+$G(IBXIEN)=0 ""
"RTN","IBCEF73",201,0)
 S IBXSAVE("ID")=""
"RTN","IBCEF73",202,0)
 S IBXSAVE=""
"RTN","IBCEF73",203,0)
 S IBXSAVE=$$PROVSSN^IBCEF7(IBXIEN)
"RTN","IBCEF73",204,0)
 N I
"RTN","IBCEF73",205,0)
 F I=1:1:9 D
"RTN","IBCEF73",206,0)
 . I $P(IBXSAVE,"^",I)]"" S $P(IBXSAVE("ID"),U,I)="34"
"RTN","IBCEF73",207,0)
 ;If no ibxdata go look in 355.97 for 24 
"RTN","IBCEF73",208,0)
 N IBRETVAL S IBRETVAL=""
"RTN","IBCEF73",209,0)
 N IBPTR,IBFT
"RTN","IBCEF73",210,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73",211,0)
 . Q:$P(IBXSAVE,U,IBFT)]""
"RTN","IBCEF73",212,0)
 . S IBPTR=$$PROVPTR^IBCEF7(IBXIEN,IBFT)
"RTN","IBCEF73",213,0)
 . S $P(IBRETVAL,"^",IBFT)=$$TAX3559(IBPTR)
"RTN","IBCEF73",214,0)
 . I $P(IBRETVAL,U,IBFT)]"" D
"RTN","IBCEF73",215,0)
 . . S $P(IBXSAVE,U,IBFT)=$P(IBRETVAL,U,IBFT)
"RTN","IBCEF73",216,0)
 . . S $P(IBXSAVE("ID"),U,IBFT)="24"
"RTN","IBCEF73",217,0)
 Q IBXSAVE
"RTN","IBCEF73",218,0)
 ;
"RTN","IBCEF73",219,0)
TAX3559(IBPROV) ;
"RTN","IBCEF73",220,0)
 I $P(IBPROV,";",2)'["IBA(355.9" Q ""
"RTN","IBCEF73",221,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",222,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",223,0)
 S IBID=""
"RTN","IBCEF73",224,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",225,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",226,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6) ;provider ID type, ptr to #355.97
"RTN","IBCEF73",227,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",228,0)
 . S:IBIDTYP=24 IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",229,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",230,0)
 ;
"RTN","IBCEF73",231,0)
 ;IBFULL-full name
"RTN","IBCEF73",232,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",233,0)
 ;
"RTN","IBCEF73",234,0)
SSN200(IBPTR)   ;
"RTN","IBCEF73",235,0)
 I $P(IBPTR,";",2)'="VA(200," Q ""
"RTN","IBCEF73",236,0)
 Q $$NOPUNCT^IBCEF($$GET1^DIQ(200,+$P(IBPTR,";")_",",9))
"RTN","IBCEF73",237,0)
 ;
"RTN","IBCEF73",238,0)
 ;Input:
"RTN","IBCEF73",239,0)
 ; IBIEN399 - ien in #399
"RTN","IBCEF73",240,0)
 ;Output:
"RTN","IBCEF73",241,0)
 ; returns a string with "^" delimiters that contains SSNs (if any)
"RTN","IBCEF73",242,0)
 ; in the position that equal to FUNCTION number
"RTN","IBCEF73",243,0)
 ; i.e. if RENDERING function # is 3 then SSN will be
"RTN","IBCEF73",244,0)
 ; in $P(return value,"^",3), etc.
"RTN","IBCEF73",245,0)
 ;
"RTN","IBCEF73",246,0)
SSN3559(IBPROV) ;
"RTN","IBCEF73",247,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",248,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",249,0)
 S IBID=""
"RTN","IBCEF73",250,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",251,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",252,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6)
"RTN","IBCEF73",253,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",254,0)
 . S:IBIDTYP="SY" IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",255,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",256,0)
 ;
"RTN","IBCEF73",257,0)
 ;IBIDTYP-provider ID type, ptr to #355.97
"RTN","IBCEF73",258,0)
 ;IBFULL-full name
"RTN","IBCEF73",259,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",260,0)
 ;
"RTN","IBCEF73",261,0)
PRV1FMT(P) ;FORMAT CODE FOR PRV1 SEGMENT THAT WON'T FIT ON LINE
"RTN","IBCEF73",262,0)
 K IBXDATA
"RTN","IBCEF73",263,0)
 S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN)
"RTN","IBCEF73",264,0)
 S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",P)
"RTN","IBCEF73",265,0)
 I $G(IBXDATA)'="" S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"RTN","IBCEF73",266,0)
 Q
"RTN","IBCEF73",267,0)
 ;
"RTN","IBCEF74")
0^35^B58401918
"RTN","IBCEF74",1,0)
IBCEF74 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF74",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEF74",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCEF74",4,0)
 ;
"RTN","IBCEF74",5,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC) ;
"RTN","IBCEF74",6,0)
 ; Only output 1 of each provider id type
"RTN","IBCEF74",7,0)
 N IB1,IB2,IBID,Z
"RTN","IBCEF74",8,0)
 S (IB1,IB2)=""
"RTN","IBCEF74",9,0)
 I $G(IBN) D
"RTN","IBCEF74",10,0)
 . S Z=0 F  S Z=$O(IBDST(IBPRNUM,IBPRTYP,Z)) Q:'Z  S IBID(+$P(IBDST(IBPRNUM,IBPRTYP,Z),U,9))=""
"RTN","IBCEF74",11,0)
 F  S IB1=$O(IBSRC(IB1)) Q:IB1=""  D
"RTN","IBCEF74",12,0)
 . N OK,IBSTLIC
"RTN","IBCEF74",13,0)
 . S IBSTLIC=""
"RTN","IBCEF74",14,0)
 . F  S IB2=$O(IBSRC(IB1,IB2)) Q:IB2=""  D
"RTN","IBCEF74",15,0)
 . . ; Ck state of care/license match if st license #
"RTN","IBCEF74",16,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="0B" S OK=1 D  Q:'OK
"RTN","IBCEF74",17,0)
 . . . I +$$CAREST^IBCEP2A(IB399)'=$P(IBSRC(IB1,IB2),U,7) S IBSTLIC=1 Q
"RTN","IBCEF74",18,0)
 . . . I $G(IBSTLIC(0))'="" S OK=0 Q
"RTN","IBCEF74",19,0)
 . . . S IBSTLIC(0)=$G(IBSRC(IB1,IB2)),OK=0
"RTN","IBCEF74",20,0)
 . . ; If ID is overridden in claim, don't output any others of this type
"RTN","IBCEF74",21,0)
 . . I $G(IBEXC),$P($G(IBSRC(IB1,IB2)),U,8)=IBEXC Q
"RTN","IBCEF74",22,0)
 . . ;EXCLUDE SSN FROM SECONDARY CLAIMS
"RTN","IBCEF74",23,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="SY" Q
"RTN","IBCEF74",24,0)
 . . ; Only 1 of each provider id type allowed
"RTN","IBCEF74",25,0)
 . . Q:$D(IBID(+$P($G(IBSRC(IB1,IB2)),U,9)))
"RTN","IBCEF74",26,0)
 . . S IBN=IBN+1,IBID(+$P($G(IBSRC(IB1,IB2)),U,9))=""
"RTN","IBCEF74",27,0)
 . . S IBDST(IBPRNUM,IBPRTYP,IBN)=$G(IBSRC(IB1,IB2))
"RTN","IBCEF74",28,0)
 . I '$G(IBSTLIC),$G(IBSTLIC(0))'="" S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=IBSTLIC(0)
"RTN","IBCEF74",29,0)
 Q
"RTN","IBCEF74",30,0)
 ;
"RTN","IBCEF74",31,0)
 ;-- PROVINF --
"RTN","IBCEF74",32,0)
 ;Create an array with provider information
"RTN","IBCEF74",33,0)
 ;Input:
"RTN","IBCEF74",34,0)
 ; IB399 - ien of #399
"RTN","IBCEF74",35,0)
 ; IBPRNUM - 1=primary ins, 2= sec, 3 -tert
"RTN","IBCEF74",36,0)
 ; IBRES - for results
"RTN","IBCEF74",37,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEF74",38,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEF74",39,0)
 ;    the IBSORT can be any (say 1)
"RTN","IBCEF74",40,0)
 ;  if PROVINF is called for "O" mode then it can be more then set
"RTN","IBCEF74",41,0)
 ;    of data then we need to sort array to use it in loop 
"RTN","IBCEF74",42,0)
 ;    (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEF74",43,0)
 ;    thus for mode "O" it should be 1 or 2 (see PROVIDER for example)
"RTN","IBCEF74",44,0)
 ;IBINSTP -  "C" -current insurance , "O"-other
"RTN","IBCEF74",45,0)
 ;Output:
"RTN","IBCEF74",46,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF74",47,0)
 ; where:(see PROVIDER)
"RTN","IBCEF74",48,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP) ;
"RTN","IBCEF74",49,0)
 I +$G(IBSORT)=0 S IBSORT=IBPRNUM
"RTN","IBCEF74",50,0)
 N IBPRTYP,IBINSCO,IBPROV,IBFRMTYP,IBCARE,IB35591,IBN,IBCURR,IBEXC S IBN=0
"RTN","IBCEF74",51,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM)
"RTN","IBCEF74",52,0)
 S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEF74",53,0)
 S IBCARE=$S($$ISRX^IBCEF1(IB399):3,1:0) ;if bill is a prescription refill bill
"RTN","IBCEF74",54,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IB399,1) S:'IBCARE IBCARE=2 ;1-inp, 2-out
"RTN","IBCEF74",55,0)
 F IBPRTYP=1:1:9 D
"RTN","IBCEF74",56,0)
 . N Z,IB355OV
"RTN","IBCEF74",57,0)
 . S IBPROV=$$PROVPTR^IBCEF7(IB399,IBPRTYP)
"RTN","IBCEF74",58,0)
 . Q:+IBPROV=0
"RTN","IBCEF74",59,0)
 . ;don't create anything if the form type is different than "HCFA 1500" or "UB-92"
"RTN","IBCEF74",60,0)
 . Q:IBFRMTYP=0
"RTN","IBCEF74",61,0)
 . N IBRETARR S IBRETARR=0
"RTN","IBCEF74",62,0)
 . D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEF74",63,0)
 . S IB355OV="",IBEXC=""
"RTN","IBCEF74",64,0)
 . S Z=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0))
"RTN","IBCEF74",65,0)
 . I Z S Z=$G(^DGCR(399,IB399,"PRV",Z,0)) D
"RTN","IBCEF74",66,0)
 .. I $P(Z,U,IBPRNUM+4)'="",$P(Z,U,IBPRNUM+11)'="" S IB355OV=$P(Z,U,IBPRNUM+4)_U_$P(Z,U,IBPRNUM+11)
"RTN","IBCEF74",67,0)
 . S IBCURR=$$COB^IBCEF(IB399)
"RTN","IBCEF74",68,0)
 . S IBN=0,IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEF74",69,0)
 . I $G(IBINSTP)="C","34"[$G(IBPRTYP),"P"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12"
"RTN","IBCEF74",70,0)
 . I $G(IBINSTP)="O","34"[$G(IBPRTYP),"ST"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12" ;Calculate MEDICARE (WNR) specific provider qualifier and ID for HCFA 1500 secondary claims
"RTN","IBCEF74",71,0)
 . I $P(IB355OV,U,2) D
"RTN","IBCEF74",72,0)
 .. I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEF74",73,0)
 ... S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEF74",74,0)
 . I IB35591'="",IBEXC'=$P(IB35591,U,3) S:$$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEF74",75,0)
 . D SORT^IBCEF71(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC)
"RTN","IBCEF74",76,0)
 S IBRES(IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEF74",77,0)
 Q
"RTN","IBCEF74",78,0)
 ;
"RTN","IBCEF74",79,0)
SECIDCK(IBIFN,IBSEQ,IBTYP,IBIFN1) ; Function returns 1 if ID type ptr in
"RTN","IBCEF74",80,0)
 ;  IBTYP is a valid X12 code for the claim/provider function (IBPROVF)
"RTN","IBCEF74",81,0)
 ;  as a secondary id
"RTN","IBCEF74",82,0)
 ; IBSEQ = the COB sequence being checked
"RTN","IBCEF74",83,0)
 ; IBIFN1 = the entry # in the PRV multiple being checked
"RTN","IBCEF74",84,0)
 ;  Called from input transform of fields .12-.14 in subfile 399.0222
"RTN","IBCEF74",85,0)
 N IBOK,IBFRM,IBCOBN,IBX12,IBPROVF
"RTN","IBCEF74",86,0)
 S IBPROVF=+$G(^DGCR(399,IBIFN,"PRV",IBIFN1,0))
"RTN","IBCEF74",87,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=3:1,1:2) ; Form type
"RTN","IBCEF74",88,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN) S:'IBCOBN IBCOBN=1 ; Current COB seq
"RTN","IBCEF74",89,0)
 S IBX12=$P($G(^IBE(355.97,+IBTYP,0)),U,3) ; X12 code for prov id typ
"RTN","IBCEF74",90,0)
 Q $$CHSEC^IBCEF73(IBFRM,IBPROVF,$S(IBSEQ=IBCOBN:"C",1:"O"),IBX12)
"RTN","IBCEF74",91,0)
 ;
"RTN","IBCEF74",92,0)
DEFID(IBIFN,IBPRV) ;
"RTN","IBCEF74",93,0)
 ; IBIFN = ien of bill
"RTN","IBCEF74",94,0)
 ; IBPRV = ien of entry in subfile 399.0222
"RTN","IBCEF74",95,0)
 ;  Function returns default ids: prim id def^sec id def^tert id def
"RTN","IBCEF74",96,0)
 N Z,Z1,ID,IBZ,IBINS,IBINS4,IBFRM
"RTN","IBCEF74",97,0)
 D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ","",IBIFN)
"RTN","IBCEF74",98,0)
 S Z=$G(^DGCR(399,IBIFN,"PRV",IBPRV,0)),ID=$P(Z,U,5,7)
"RTN","IBCEF74",99,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=3:1,1:2)
"RTN","IBCEF74",100,0)
 F Z1=1:1:3 I $P(ID,U,Z1)="" D
"RTN","IBCEF74",101,0)
 . Q:'$G(^DGCR(399,IBIFN,"I"_Z1))
"RTN","IBCEF74",102,0)
 . S $P(ID,U,Z1)=$$GETID^IBCEP2(IBIFN,2,$P(Z,U,2),Z1)
"RTN","IBCEF74",103,0)
 . I $P(ID,U,Z1)="" S $P(ID,U,Z1)=$P(IBZ,U,+Z)
"RTN","IBCEF74",104,0)
 Q ID
"RTN","IBCEF74",105,0)
 ;
"RTN","IBCEF74",106,0)
DISPID(IBXIEN) ; Displays a list of all provider and facility ids that will
"RTN","IBCEF74",107,0)
 ; extracted for this bill if it is transmitted electronically
"RTN","IBCEF74",108,0)
 N IBID,IBID1,IBZ,IBCT,IBFRM,IBCOBN,IBATT,IBQUIT,IBTYP,DIR,IBIFN,X,Y,Z,Z0,Z1
"RTN","IBCEF74",109,0)
 S IBIFN=IBXIEN
"RTN","IBCEF74",110,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBCOBN=$$COBN^IBCEF(IBIFN),IBATT=$S(IBFRM=2:3,1:4)
"RTN","IBCEF74",111,0)
 W @IOF
"RTN","IBCEF74",112,0)
 W !,"IF THIS BILL IS TRANSMITTED ELECTRONICALLY, THE FOLLOWING IDS WILL BE SENT:"
"RTN","IBCEF74",113,0)
 ; Returns all provider secondary ids to be transmitted in the indicated segments
"RTN","IBCEF74",114,0)
 S Z=+$G(^DGCR(399,IBIFN,"I1")) I Z W !,"  PRIMARY INS CO: ",$$EXTERNAL^DILFD(399,101,"",Z),$S(IBCOBN=1:" <<<Current Ins",1:"")
"RTN","IBCEF74",115,0)
 S Z=+$G(^DGCR(399,IBIFN,"I2")) I Z W !,"SECONDARY INS CO: ",$$EXTERNAL^DILFD(399,101,"",Z),$S(IBCOBN=2:" <<<Current Ins",1:"")
"RTN","IBCEF74",116,0)
 S Z=+$G(^DGCR(399,IBIFN,"I3")) I Z W !," TERTIARY INS CO: ",$$EXTERNAL^DILFD(399,101,"",Z),$S(IBCOBN=3:" <<<Current Ins",1:"")
"RTN","IBCEF74",117,0)
 W !!,"PROVIDER IDs: (VISTA RECORDS OP1,OP2,OP4,OP8,OP9,OPR2,OPR3,OPR4,OPR5,OPR8):"
"RTN","IBCEF74",118,0)
 F Z=1:1:3 I $G(^DGCR(399,IBIFN,"I"_Z)) D PROVINF^IBCEF74(IBIFN,Z,.IBID,"",$S(IBCOBN=Z:"C",1:"O"))
"RTN","IBCEF74",119,0)
 S Z=0 F  S Z=$O(IBID(Z)) Q:'Z  S Z0=0 F  S Z0=$O(IBID(Z,Z0)) Q:'Z0  S Z1=0 F  S Z1=$O(IBID(Z,Z0,Z1)) Q:'Z1  I $P(IBID(Z,Z0,Z1),U,9) S IBID1(Z0,Z,Z1)=IBID(Z,Z0,Z1)
"RTN","IBCEF74",120,0)
 S Z=+$O(^DGCR(399,IBIFN,"PRV","B",IBATT,0))
"RTN","IBCEF74",121,0)
 I Z S Z=$P($G(^DGCR(399,IBIFN,"PRV",Z,0)),U,2)
"RTN","IBCEF74",122,0)
 W !,?5,"ATTENDING/RENDERING: ",$$EXTERNAL^DILFD(399.0222,.02,"",Z)
"RTN","IBCEF74",123,0)
 D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ","",IBIFN)
"RTN","IBCEF74",124,0)
 W !,?8,"SSN: ",?35,$S($P(IBZ,U,IBATT)'="":$P(IBZ,U,IBATT),1:"***MISSING***")
"RTN","IBCEF74",125,0)
 I $O(IBID1(IBATT,0)) W !,?8,"SECONDARY IDs"
"RTN","IBCEF74",126,0)
 S IBQUIT=0
"RTN","IBCEF74",127,0)
 S Z0=0 F  S Z0=$O(IBID1(IBATT,Z0)) Q:'Z0!IBQUIT  K IBTYP S Z1=0 F  S Z1=$O(IBID1(IBATT,Z0,Z1)) Q:'Z1  D  Q:IBQUIT
"RTN","IBCEF74",128,0)
 . Q:$D(IBTYP(+$P(IBID1(IBATT,Z0,Z1),U,9)))  ;1st of each type transmits
"RTN","IBCEF74",129,0)
 . I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",130,0)
 . S IBTYP(+$P(IBID1(IBATT,Z0,Z1),U,9))=""
"RTN","IBCEF74",131,0)
 . W !,?8,"(",$E("PST",Z0),") ",$$EXTERNAL^DILFD(36,4.01,"",$P(IBID1(IBATT,Z0,Z1),U,9)),?35,$P(IBID1(IBATT,Z0,Z1),U,4)
"RTN","IBCEF74",132,0)
 S Z=0 F  S Z=$O(IBID1(Z)) Q:'Z  I Z<3!(Z>4) D  Q:IBQUIT
"RTN","IBCEF74",133,0)
 . N Q
"RTN","IBCEF74",134,0)
 . S Q=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEF74",135,0)
 . W !!,?5,$$EXTERNAL^DILFD(399.0222,.01,"",Q),": "_$$EXTERNAL^DILFD(399.0222,.02,"",$P($G(^DGCR(399,IBIFN,"PRV",Q,0)),U,2))
"RTN","IBCEF74",136,0)
 . S Z0=0 F  S Z0=$O(IBID1(Z,Z0)) Q:'Z0!IBQUIT  K IBTYP S Z1=0 F  S Z1=$O(IBID1(Z,Z0,Z1)) Q:'Z1!IBQUIT  D
"RTN","IBCEF74",137,0)
 .. Q:$D(IBTYP(+$P(IBID1(Z,Z0,Z1),U,9)))  ; 1st of each type transmits
"RTN","IBCEF74",138,0)
 .. I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",139,0)
 .. S IBTYP(+$P(IBID1(Z,Z0,Z1),U,9))=""
"RTN","IBCEF74",140,0)
 .. W !,?8,"(",$E("PST",Z0),") ",$$EXTERNAL^DILFD(36,4.01,"",$P(IBID1(Z,Z0,Z1),U,9)),?35,$P(IBID1(Z,Z0,Z1),U,4)
"RTN","IBCEF74",141,0)
 S DIR(0)="EA",DIR("A")="PRESS RETURN TO CONTINUE " W ! D ^DIR K DIR
"RTN","IBCEF74",142,0)
 Q
"RTN","IBCEF74",143,0)
 ;
"RTN","IBCEF74",144,0)
NOMORE() ;
"RTN","IBCEF74",145,0)
 S DIR(0)="EA",DIR("A")="Press RETURN for more IDs or '^' to exit: " W ! D ^DIR
"RTN","IBCEF74",146,0)
 W @IOF
"RTN","IBCEF74",147,0)
 Q (Y'=1)
"RTN","IBCEF74",148,0)
 ;
"RTN","IBCEF74",149,0)
DEFSEC(IBIFN,IBARR) ; Function returns an array in IBARR for default
"RTN","IBCEF74",150,0)
 ; provider secondary ids for bill ien IBIFN
"RTN","IBCEF74",151,0)
 ; IBARR if passed by ref is returned as 
"RTN","IBCEF74",152,0)
 ;     IBARR(prov function,COBN)=default id
"RTN","IBCEF74",153,0)
 N IBCAR,IBCOBN,IBPC,IBINS,IBARRX,Q,Z,Z0,ZINS,X
"RTN","IBCEF74",154,0)
 K IBARR
"RTN","IBCEF74",155,0)
 S ZINS="",IBCOBN=$$COBN^IBCEF(IBIFN),IBPC=$S($$FT^IBCEF(IBIFN)=3:2,1:1)
"RTN","IBCEF74",156,0)
 S IBCAR=$$INPAT^IBCEF(IBIFN,1),IBCAR=$S('IBCAR:2,1:1)
"RTN","IBCEF74",157,0)
 F Z=1:1:3 S ZINS=ZINS_+$G(^DGCR(399,IBIFN,"I"_Z))_U
"RTN","IBCEF74",158,0)
 F Z=1:1:3 I $P(ZINS,U,Z),'$P($G(^DIC(36,+$P(ZINS,U,Z),4)),U,IBPC) S $P(ZINS,U,Z)=""
"RTN","IBCEF74",159,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEF74",160,0)
 . F Q=1:1:3 D
"RTN","IBCEF74",161,0)
 .. I $P(Z0,U,Q+4)'="" S IBARR(+Z0,Q)=$P(Z0,U,Q+4) Q  ; Override entered
"RTN","IBCEF74",162,0)
 .. S IBINS=$P(ZINS,U,Q)
"RTN","IBCEF74",163,0)
 .. Q:'IBINS
"RTN","IBCEF74",164,0)
 .. S X=$$IDFIND^IBCEP2(IBIFN,"",$P(Z0,U,2),Q,1)
"RTN","IBCEF74",165,0)
 .. I X'="" S IBARR(+Z0,Q)=X
"RTN","IBCEF74",166,0)
 Q
"RTN","IBCEF74",167,0)
 ;
"RTN","IBCEFG1")
0^17^B26004197
"RTN","IBCEFG1",1,0)
IBCEFG1 ;ALB/TMP - OUTPUT FORMATTER DATA DEFINITION UTILITIES ;18-JAN-96
"RTN","IBCEFG1",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,137,181,197,232**;21-MAR-94
"RTN","IBCEFG1",3,0)
 ;
"RTN","IBCEFG1",4,0)
EDIBILL(IBXFORM,IBXDA,IBINS,IBTYP) ; Find element associated with form fld
"RTN","IBCEFG1",5,0)
 ; IBXFORM = (REQUIRED) actual form being extracted (in file 353)
"RTN","IBCEFG1",6,0)
 ; IBXDA = (REQUIRED) form definition file (364.6) entry to use to find
"RTN","IBCEFG1",7,0)
 ;         extract data element definition entry (in file 364.7)
"RTN","IBCEFG1",8,0)
 ; IBINS = (REQUIRED) insurance co. ien for the current insurance on bill
"RTN","IBCEFG1",9,0)
 ; IBTYP = (REQUIRED) bill type (I/O)
"RTN","IBCEFG1",10,0)
 ;
"RTN","IBCEFG1",11,0)
 ; Returns ien of the entry in file 364.7 if a match on override criteria
"RTN","IBCEFG1",12,0)
 ;  was found.  Returns -1 if a screen form and the criteria fails for a
"RTN","IBCEFG1",13,0)
 ;  field without an override
"RTN","IBCEFG1",14,0)
 ;
"RTN","IBCEFG1",15,0)
 N IBX,IBPARFM,IBSCREEN,IBNMATCH,EDIQ,IB1
"RTN","IBCEFG1",16,0)
 I $G(IBXDA)=""!($G(IBXFORM)="") G EDIQ
"RTN","IBCEFG1",17,0)
 S EDIQ=0
"RTN","IBCEFG1",18,0)
 S IBPARFM=$P($G(^IBE(353,IBXFORM,2)),U,5) S:'IBPARFM IBPARFM=IBXFORM
"RTN","IBCEFG1",19,0)
 S IBSCREEN=($P($G(^IBE(353,+IBXFORM,2)),U,2)="S")
"RTN","IBCEFG1",20,0)
 S IB1=(IBPARFM=IBXFORM) ; Not a local field that is not a parent
"RTN","IBCEFG1",21,0)
 ;
"RTN","IBCEFG1",22,0)
 I $G(IBINS)'="",$G(IBTYP)'="" D:$O(^IBA(364.7,"AINTYP",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",23,0)
 . I '$D(^IBA(364.7,"AINTYP",IBXDA,IBINS,IBTYP)) S IBNMATCH=1 Q
"RTN","IBCEFG1",24,0)
 . S IBX=+$O(^IBA(364.7,"AINTYP",IBXDA,IBINS,IBTYP,"")),EDIQ=1 S:IBX IBNMATCH=0 ;by ins co and type of bill
"RTN","IBCEFG1",25,0)
 ;
"RTN","IBCEFG1",26,0)
 I $G(IBINS)'="" D:$O(^IBA(364.7,"AINS",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",27,0)
 . I '$D(^IBA(364.7,"AINS",IBXDA,IBINS)) S IBNMATCH=1 Q
"RTN","IBCEFG1",28,0)
 . S IBX=+$O(^IBA(364.7,"AINS",IBXDA,IBINS,"")),EDIQ=1 S:IBX IBNMATCH=0 ;ins co only
"RTN","IBCEFG1",29,0)
 ;
"RTN","IBCEFG1",30,0)
 I $G(IBTYP)'="" D:$O(^IBA(364.7,"ATYPE",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",31,0)
 . I '$D(^IBA(364.7,"ATYPE",IBXDA,IBTYP)) S IBNMATCH=1 Q
"RTN","IBCEFG1",32,0)
 . S IBX=+$O(^IBA(364.7,"ATYPE",IBXDA,IBTYP,"")),EDIQ=1 S:IBX IBNMATCH=0 ;type of bill only
"RTN","IBCEFG1",33,0)
 ;
"RTN","IBCEFG1",34,0)
 I IBXFORM,$S(IBXFORM'=IBPARFM:1,1:IBSCREEN) D  G EDIQ
"RTN","IBCEFG1",35,0)
 . S IBX=+$O(^IBA(364.7,"ALL",IBXDA,"")) ; Check for all ins co and types
"RTN","IBCEFG1",36,0)
 . I IBX,+$O(^IBA(364.7,"ALL",IBXDA,IBX)) D  ; Find override for 'ALL'
"RTN","IBCEFG1",37,0)
 .. N Z
"RTN","IBCEFG1",38,0)
 .. S Z=0 F  S Z=$O(^IBA(364.7,"ALL",IBXDA,Z)) Q:'Z  I $P($G(^IBA(364.7,Z,0)),U)'=IBXDA S IBX=Z Q
"RTN","IBCEFG1",39,0)
 . I 'IBX,+$O(^IBA(364.7,"B",IBXDA,"")) S IBX=$O(^(""))
"RTN","IBCEFG1",40,0)
 . S:IBX IBNMATCH=0
"RTN","IBCEFG1",41,0)
 ;
"RTN","IBCEFG1",42,0)
 I IBXFORM,$O(^IBA(364.6,"APAR",IBXFORM,IBXDA,"")) S IBX=+$O(^("")),IBX=+$O(^IBA(364.7,"B",IBX,0)) I IBX G EDIQ
"RTN","IBCEFG1",43,0)
 S IBX=+$O(^IBA(364.7,"B",IBXDA,""))
"RTN","IBCEFG1",44,0)
EDIQ I IBSCREEN,$G(IBNMATCH) S IBX=-1
"RTN","IBCEFG1",45,0)
 Q $G(IBX)
"RTN","IBCEFG1",46,0)
 ;
"RTN","IBCEFG1",47,0)
DT(DATE1,DATE2,FORMAT) ; Return date in DATE1 (and optionally DATE2)
"RTN","IBCEFG1",48,0)
 ;   (input in Fileman format) converted to X12 format
"RTN","IBCEFG1",49,0)
 ; FORMAT (required)
"RTN","IBCEFG1",50,0)
 ; DATE1,DATE2 in FILEMAN date format
"RTN","IBCEFG1",51,0)
 N DATE S DATE=""
"RTN","IBCEFG1",52,0)
 I DATE1=0 S DATE1=""
"RTN","IBCEFG1",53,0)
 I $E(FORMAT)="D" D  G DTQ
"RTN","IBCEFG1",54,0)
 .S DATE=$E(DATE1,2,7) Q:$P(FORMAT,"D",2)=6  ;YYMMDD
"RTN","IBCEFG1",55,0)
 .S:DATE1 DATE=($E(DATE1)+17)_DATE ;CCYYMMDD
"RTN","IBCEFG1",56,0)
 I $E(FORMAT)="R" D
"RTN","IBCEFG1",57,0)
 .S:DATE1 DATE=$E(DATE1,2,7)_"-"_$E($S($G(DATE2):DATE2,1:DATE1),2,7) ;YYMMDD-YYMMDD
"RTN","IBCEFG1",58,0)
 .Q:FORMAT["6"
"RTN","IBCEFG1",59,0)
 .S DATE=($E(DATE1)+17)_DATE,$P(DATE,"-",2)=($E($S($G(DATE2):DATE2,1:DATE1))+17)_$P(DATE,"-",2) ;CCYYMMDD-CCYYMMDD
"RTN","IBCEFG1",60,0)
DTQ Q DATE
"RTN","IBCEFG1",61,0)
 ;
"RTN","IBCEFG1",62,0)
NAME(IBNM1,COMB) ; Parse person's nm into 5 pieces LAST^FIRST^MIDDLE^CRED^SUFFIX
"RTN","IBCEFG1",63,0)
 ; IBNM1 = NAME in LAST,FIRST MIDDLE^vp file ien (200 or 355.93)^bill ien^prv type
"RTN","IBCEFG1",64,0)
 ;      OR         FIRST MIDDLE LAST^vp file ien (200 or 355.93)^bill ien^prv type
"RTN","IBCEFG1",65,0)
 ; COMB = if set to 1, then combine the first and middle name
"RTN","IBCEFG1",66,0)
 ;        if set to 2, combine the last and middle names
"RTN","IBCEFG1",67,0)
 N PC,IBIEN,IBCRED,IBNM,IBNMC,IBPIEN
"RTN","IBCEFG1",68,0)
 S IBIEN=$P(IBNM1,U,2),IBNMC=$P(IBNM1,U)
"RTN","IBCEFG1",69,0)
 S IBPIEN=+$O(^DGCR(399,+$P(IBNM1,U,3),"PRV","B",+$P(IBNM1,U,4),0))
"RTN","IBCEFG1",70,0)
 S IBCRED=$$CRED^IBCEU(IBIEN,+$P(IBNM1,U,3),IBPIEN) ;Degree
"RTN","IBCEFG1",71,0)
 I IBNMC="DEPT VETERANS AFFAIRS" S IBNMC="VETERANS AFFAIRS,DEPT"
"RTN","IBCEFG1",72,0)
 I IBNMC["," D  G NAMEQ
"RTN","IBCEFG1",73,0)
 . D NAMECOMP^XLFNAME(.IBNMC)
"RTN","IBCEFG1",74,0)
 . S IBNM=$G(IBNMC("FAMILY"))_U_$G(IBNMC("GIVEN"))_U_$G(IBNMC("MIDDLE"))_U_IBCRED_U_$G(IBNMC("SUFFIX"))
"RTN","IBCEFG1",75,0)
 D STDNAME^XLFNAME(.IBNMC,"C")
"RTN","IBCEFG1",76,0)
 S IBNM=$G(IBNMC("FAMILY"))_U_$G(IBNMC("GIVEN"))_U_$G(IBNMC("MIDDLE"))_U_IBCRED_U_$G(IBNMC("SUFFIX"))
"RTN","IBCEFG1",77,0)
 I $P(IBNM1,U,2)["355.93",$P($G(^IBA(355.93,+$P(IBNM1,U,2),0)),U,2)=1 D  G NAMEQ  ; group performing provider
"RTN","IBCEFG1",78,0)
 . S IBNM=$P(IBNM1,U)_U_U_U_IBCRED_U
"RTN","IBCEFG1",79,0)
 I $G(COMB)=1,$G(IBNMC("MIDDLE"))'="" S IBNM=$P(IBNM,U)_U_$P(IBNM,U,2)_" "_$P(IBNM,U,3)_U_IBCRED_U_$P(IBNM,U,5)
"RTN","IBCEFG1",80,0)
 I $G(COMB)=2,$G(IBNMC("MIDDLE"))'="" S IBNM=$P(IBNM,U)_" "_$P(IBNM,U,3)_U_$P(IBNM,U,2)_U_IBCRED_U_$P(IBNM,U,5)
"RTN","IBCEFG1",81,0)
 ;
"RTN","IBCEFG1",82,0)
NAMEQ Q IBNM
"RTN","IBCEFG1",83,0)
 ;
"RTN","IBCEFG1",84,0)
DOLLAR(AMT) ; Format amount in AMT so it is numeric including cents, without
"RTN","IBCEFG1",85,0)
 ; the decimal and commas.
"RTN","IBCEFG1",86,0)
 N DOLR,CENT
"RTN","IBCEFG1",87,0)
 I AMT'="" S DOLR=$P(AMT,"."),CENT=$E($P(AMT,".",2)_"00",1,2),AMT=DOLR_CENT
"RTN","IBCEFG1",88,0)
 Q $TR(AMT,",")
"RTN","IBCEFG1",89,0)
 ;
"RTN","IBCEFG1",90,0)
STATE(CODE) ;Return state code from state pointer
"RTN","IBCEFG1",91,0)
 Q $P($G(^DIC(5,+CODE,0)),U,2)
"RTN","IBCEFG1",92,0)
 ;
"RTN","IBCEFG1",93,0)
SEX(CODE) ;Return the X12 code for sex
"RTN","IBCEFG1",94,0)
 ; CODE = DHCP code for sex
"RTN","IBCEFG1",95,0)
 Q $S(CODE="":"U","MF"[$E(CODE):$E(CODE),1:"U")
"RTN","IBCEFG1",96,0)
 ;
"RTN","IBCEFG1",97,0)
RELATION(CODE) ;Return the X12 code for relationship
"RTN","IBCEFG1",98,0)
 ; CODE = DHCP code for relationship
"RTN","IBCEFG1",99,0)
 N X12
"RTN","IBCEFG1",100,0)
 S X12=""
"RTN","IBCEFG1",101,0)
 S:CODE'="" X12=$P($S(CODE="01":"18^SELF",CODE="02":"01^SPOUSE",CODE="03":"19^NATURAL CHILD",CODE="08":"20^EMPLOYEE",CODE="32":"32^MOTHER",CODE="33":"33^FATHER",CODE="11":"39^ORGAN DONOR",CODE="15":"41^INJURED PLAINTIFF",1:""),U)
"RTN","IBCEFG1",102,0)
 Q X12
"RTN","IBCEFG1",103,0)
 ;
"RTN","IBCEFG1",104,0)
EMPLST(CODE) ;Return the X12 code for employment status
"RTN","IBCEFG1",105,0)
 ; CODE = DHCP code for employment status
"RTN","IBCEFG1",106,0)
 N X12
"RTN","IBCEFG1",107,0)
 S X12=""
"RTN","IBCEFG1",108,0)
 S:CODE'="" X12=$P($P("1;FT^2;PT^3;NE^4;SE^5;RT^6;AU^9;UK",CODE_";",2),U)
"RTN","IBCEFG1",109,0)
 S:X12="" X12="UK"
"RTN","IBCEFG1",110,0)
 Q X12
"RTN","IBCEFG1",111,0)
 ;
"RTN","IBCEFG1",112,0)
MARITAL(CODE) ;Return the X12 code for marital status
"RTN","IBCEFG1",113,0)
 ; CODE = ien of code for marital status
"RTN","IBCEFG1",114,0)
 N X12
"RTN","IBCEFG1",115,0)
 S X12=$P($G(^DIC(11,+CODE,0)),U,3)
"RTN","IBCEFG1",116,0)
 I X12'="" S X12=$P($P("D;D^M;M^N;I^S;X^W;W^U;K",X12_";",2),U)
"RTN","IBCEFG1",117,0)
 Q X12
"RTN","IBCEFG1",118,0)
 ;
"RTN","IBCEFG1",119,0)
TOS(CODE) ;Return the X12 code for type of service
"RTN","IBCEFG1",120,0)
 ; CODE = DHCP code for type of service
"RTN","IBCEFG1",121,0)
 N X12
"RTN","IBCEFG1",122,0)
 S X12=$S(CODE>0&(CODE<10):CODE,1:$P($P("0;10^A;11^B;13^H;45^L;18^M;15^N;63^V;19^Y;20^Z;21^43;96^53;96",CODE_";",2),U)) S:X12="" X12=CODE
"RTN","IBCEFG1",123,0)
 Q X12
"RTN","IBCEFG1",124,0)
 ;
"RTN","IBCEFG1",125,0)
FIXLEN(DATA,LEN) ; Create a fixed length field from data DATA length LEN
"RTN","IBCEFG1",126,0)
 Q $E(DATA_$J("",LEN),1,LEN)
"RTN","IBCEFG1",127,0)
 ;
"RTN","IBCEFG1",128,0)
RCDT(IBXSAVE,IBXDATA,IBDT) ; Format date for multiple revenue code transmission)
"RTN","IBCEFG1",129,0)
 ;IBXSAVE = array containing the extracted service line data for the UB92 format bill
"RTN","IBCEFG1",130,0)
 ;IBXDATA = array returned with service line dates formatted in YYYYMMDD format
"RTN","IBCEFG1",131,0)
 ;IBDT = the default date for the revenue codes on the bill
"RTN","IBCEFG1",132,0)
 N Q,W
"RTN","IBCEFG1",133,0)
 S Q=0 F  S Q=$O(IBXSAVE("INPT",Q)) Q:'Q  S W=$$DT($P(IBXSAVE("INPT",1),U,10),,"D8"),IBXDATA(Q)=$S(W:W,1:IBDT)
"RTN","IBCEFG1",134,0)
 Q
"RTN","IBCEP")
0^39^B21365949
"RTN","IBCEP",1,0)
IBCEP ;ALB/TMP - Functions for PROVIDER ID MAINT - INS CO PARAMS ;11-02-00
"RTN","IBCEP",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP",3,0)
 ;
"RTN","IBCEP",4,0)
EN ; -- main entry point for IBCE PRV INS PARAMS
"RTN","IBCEP",5,0)
 N IBINS,IBCUINC ; Variable should be available throughout actions
"RTN","IBCEP",6,0)
 D FULL^VALM1
"RTN","IBCEP",7,0)
 D EN^VALM("IBCE PRV INS PARAMS")
"RTN","IBCEP",8,0)
 Q
"RTN","IBCEP",9,0)
 ;
"RTN","IBCEP",10,0)
HDR ; -- header code
"RTN","IBCEP",11,0)
 K VALMHDR
"RTN","IBCEP",12,0)
 I $G(IBINS) S VALMHDR(1)="INSURANCE CO: "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEP",13,0)
 Q
"RTN","IBCEP",14,0)
 ;
"RTN","IBCEP",15,0)
INIT ; Initialization
"RTN","IBCEP",16,0)
 N DIR,DIC,DA,X,Y,DTOUT,DUOUT
"RTN","IBCEP",17,0)
 S DIC(0)="AEMQ",DIC="^DIC(36," D ^DIC
"RTN","IBCEP",18,0)
 I Y'>0 D
"RTN","IBCEP",19,0)
 . S VALMQUIT=1
"RTN","IBCEP",20,0)
 E  D
"RTN","IBCEP",21,0)
 . S DIR="YA",DIR("A")="DO YOU WANT TO INCLUDE ANY CARE UNIT DETAIL?: ",DIR("?",1)="If you want to see the specific care unit defined for the insurance co",DIR("?")="you should respond yes here"
"RTN","IBCEP",22,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP",23,0)
 . I $D(DTOUT)!$D(DUOUT) S VALMQUIT=1 Q
"RTN","IBCEP",24,0)
 . S IBCUINC=(Y=1)
"RTN","IBCEP",25,0)
 . S IBINS=+Y D BLD(IBINS,IBCUINC)
"RTN","IBCEP",26,0)
 Q
"RTN","IBCEP",27,0)
 ;
"RTN","IBCEP",28,0)
BLD(IBINS,IBCUINC) ; Build display for ins co level provider ID parameters
"RTN","IBCEP",29,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP",30,0)
 ; IBCUINC = flag:
"RTN","IBCEP",31,0)
 ;    = 1 if care unit list should be included  or 0 if not
"RTN","IBCEP",32,0)
 N A,A0,A1,A2,A3,Z0,IB1,IB12,IB4,IBLCT,IBPTYP
"RTN","IBCEP",33,0)
 S IBLCT=0
"RTN","IBCEP",34,0)
 S IB4=$G(^DIC(36,IBINS,4))
"RTN","IBCEP",35,0)
 K ^TMP("IBPRV_INS_ID_PARAMS",$J)
"RTN","IBCEP",36,0)
 ;
"RTN","IBCEP",37,0)
 S Z0="Perf Prov Secondary ID Type (HCFA): "_$E($$EXPAND^IBTRE(36,4.01,+$P(IB4,U))_$J("",20),1,20) D SET1(.IBLCT,Z0)
"RTN","IBCEP",38,0)
 S Z0="Perf Prov Secondary ID Type (UB92): "_$E($$EXPAND^IBTRE(36,4.02,+$P(IB4,U,2))_$J("",20),1,20) D SET1(.IBLCT,Z0)
"RTN","IBCEP",39,0)
 S Z0=$J("",20)_"Required: "_$$EXPAND^IBTRE(36,4.03,$P(IB4,U,3)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",40,0)
 S Z0=$J("",10)_"Care Unit Name: "_$$EXPAND^IBTRE(36,4.09,$P(IB4,U,9)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",41,0)
 S Z0=""  D SET1(.IBLCT,Z0)
"RTN","IBCEP",42,0)
 ;
"RTN","IBCEP",43,0)
 I '$D(^IBA(355.96,"D",IBINS)) D  G BLDQ ;No care unit needed
"RTN","IBCEP",44,0)
 . S Z0=$J("",7)_"*** NO CARE UNITS DEFINED FOR THIS INS CO PROVIDER SECONDARY ID ***" D SET1(.IBLCT,Z0)
"RTN","IBCEP",45,0)
 ;
"RTN","IBCEP",46,0)
 S Z0=$J("",17)_"VALID CARE UNITS FOR THIS INSURANCE COMPANY" D SET1(.IBLCT,Z0),CNTRL^VALM10(IBLCT,18,46,IORVON,IORVOFF)
"RTN","IBCEP",47,0)
 S A=0
"RTN","IBCEP",48,0)
 F  S A=$O(^IBA(355.96,"AC",IBINS,A)) Q:'A  S IBPTYP=$P($G(^IBA(355.97,A,0)),U) I IBPTYP'="" D
"RTN","IBCEP",49,0)
 . S A2=IBPTYP_U_A,^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2)=""
"RTN","IBCEP",50,0)
 . S A0=0 F  S A0=$O(^IBA(355.96,"AC",IBINS,A,A0)) Q:'A0  S A1=$G(^IBA(355.96,A0,0)) D
"RTN","IBCEP",51,0)
 .. I '$G(IBCUINC) S:'$D(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2,$P(A1,U,4)_U_$P(A1,U,5))) ^($P(A1,U,4)_U_$P(A1,U,5))="" Q
"RTN","IBCEP",52,0)
 .. I $P(A1,U,4)'="",$P(A1,U,5)'="" D
"RTN","IBCEP",53,0)
 ... S A3=$E($P($G(^IBE(355.95,+A1,0)),U)_$J("",1,30),1,30)_U_$S($P($G(^(0)),U,2)'="":$P(^(0),U,2),1:"<No description available>")
"RTN","IBCEP",54,0)
 ... I '$D(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2,$P(A1,U,4)_U_$P(A1,U,5),$P(A3,U))) S ^($P(A3,U))=$P(A3,U,2)
"RTN","IBCEP",55,0)
 . ; records are fully sorted
"RTN","IBCEP",56,0)
 S A=""
"RTN","IBCEP",57,0)
 F  S A=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A)) Q:'A  S A2="PROVIDER ID TYPE: "_$P(A,U),IB1=1 D:'IB1 SET1(.IBLCT,"") D SET1(.IBLCT,A2) S IB12=1 S:$G(IBCUINC) IB1=0 D
"RTN","IBCEP",58,0)
 . S A0="" F  S A0=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A,A0)) Q:A0=""  D
"RTN","IBCEP",59,0)
 .. S Z0=$J("",5)_"FORM TYPE: "_$E($$EXPAND^IBTRE(355.96,.04,$P(A0,U))_$J("",25),1,25)_"  CARE TYPE: "_$E($$EXPAND^IBTRE(355.96,.05,$P(A0,U,2))_$J("",25),1,25)
"RTN","IBCEP",60,0)
 .. D:'IB12 SET1(.IBLCT,"") D SET1(.IBLCT,Z0)
"RTN","IBCEP",61,0)
 .. Q:'$G(IBCUINC)
"RTN","IBCEP",62,0)
 .. S IB12=0
"RTN","IBCEP",63,0)
 .. S A1="" F  S A1=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A,A0,A1)) Q:A1=""  S Z0=$J("",10)_A1_$G(^(A1)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",64,0)
 ;
"RTN","IBCEP",65,0)
BLDQ K ^TMP("IBPRV_INS_ID_PARAMS_SORT",$J)
"RTN","IBCEP",66,0)
 S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP",67,0)
 Q
"RTN","IBCEP",68,0)
 ;
"RTN","IBCEP",69,0)
SET1(IBLCT,Z0) ;
"RTN","IBCEP",70,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,Z0)
"RTN","IBCEP",71,0)
 Q
"RTN","IBCEP",72,0)
 ;
"RTN","IBCEP",73,0)
EXPND ;
"RTN","IBCEP",74,0)
 Q
"RTN","IBCEP",75,0)
 ;
"RTN","IBCEP",76,0)
HELP ;
"RTN","IBCEP",77,0)
 Q
"RTN","IBCEP",78,0)
 ;
"RTN","IBCEP",79,0)
EXIT ;
"RTN","IBCEP",80,0)
 K ^TMP("IBPRV_INS_ID_PARAMS",$J)
"RTN","IBCEP",81,0)
 D CLEAN^VALM10
"RTN","IBCEP",82,0)
 Q
"RTN","IBCEP",83,0)
 ;
"RTN","IBCEP",84,0)
EDIT ; Entrypoint called from IBCSCE to invoke provider id edit functions
"RTN","IBCEP",85,0)
 Q
"RTN","IBCEP",86,0)
 ;
"RTN","IBCEP",87,0)
EDIT1 ; Edit parameters
"RTN","IBCEP",88,0)
 N IB,IBY,IBCNS,DIE,DR,X,Y
"RTN","IBCEP",89,0)
 D FULL^VALM1
"RTN","IBCEP",90,0)
 S IBCNS=IBINS,IBY=12
"RTN","IBCEP",91,0)
 D MAIN^IBCNSC1
"RTN","IBCEP",92,0)
 S VALMBCK="R"
"RTN","IBCEP",93,0)
 Q
"RTN","IBCEP",94,0)
 ;
"RTN","IBCEP",95,0)
NETID() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",96,0)
 ; NETWORK ID
"RTN","IBCEP",97,0)
 N Z S Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  Q:$P($G(^(Z,1)),U,6)
"RTN","IBCEP",98,0)
 Q Z
"RTN","IBCEP",99,0)
 ;
"RTN","IBCEP",100,0)
EMCID() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",101,0)
 ; EMC ID
"RTN","IBCEP",102,0)
 N Z S Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  Q:$P($G(^(Z,1)),U,5)
"RTN","IBCEP",103,0)
 Q Z
"RTN","IBCEP",104,0)
 ;
"RTN","IBCEP",105,0)
UPIN() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",106,0)
 ; UPIN ID
"RTN","IBCEP",107,0)
 Q +$O(^IBE(355.97,"B","UPIN",0))
"RTN","IBCEP",108,0)
 ;
"RTN","IBCEP",109,0)
EDITID(IBCNS) ; Edit provider id's from insurance co enter/edit
"RTN","IBCEP",110,0)
 ; IBCNS = ien of file 36
"RTN","IBCEP",111,0)
 N X,Y,Z4,DIR
"RTN","IBCEP",112,0)
 S Z4=$G(^DIC(36,IBCNS,4))
"RTN","IBCEP",113,0)
 I 'Z4,'$P(Z4,U,2) Q
"RTN","IBCEP",114,0)
 S DIR("A",1)="USE PROVIDER ID MAINTENANCE TO ENTER/EDIT PROV SECONDARY ID'S FOR THIS CO.",DIR("A")="PRESS RETURN TO CONTINUE: ",DIR(0)="EA" W ! D ^DIR K DIR
"RTN","IBCEP",115,0)
 Q
"RTN","IBCEP",116,0)
 ;
"RTN","IBCEP0")
0^48^B58196901
"RTN","IBCEP0",1,0)
IBCEP0 ;ALB/TMP - Functions for PROVIDER ID MAINTENANCE ;13-DEC-99
"RTN","IBCEP0",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,239,232**;21-MAR-94
"RTN","IBCEP0",3,0)
 ;
"RTN","IBCEP0",4,0)
EN ; -- main entry point for IBCE PRV INS ID
"RTN","IBCEP0",5,0)
 N IBINS,IBDSP,IBSORT,IBPRV ; Variables should be available throughout actions
"RTN","IBCEP0",6,0)
 D FULL^VALM1
"RTN","IBCEP0",7,0)
 D EN^VALM("IBCE PRVINS ID")
"RTN","IBCEP0",8,0)
 Q
"RTN","IBCEP0",9,0)
 ;
"RTN","IBCEP0",10,0)
EN1(IBINS) ; Entrypoint from insurance co maintenance
"RTN","IBCEP0",11,0)
 N IBDSP,IBSORT ; Variables should be available throughout actions
"RTN","IBCEP0",12,0)
 D FULL^VALM1
"RTN","IBCEP0",13,0)
 D EN^VALM("IBCE PRVINS ID FROM INS MAINT")
"RTN","IBCEP0",14,0)
 Q
"RTN","IBCEP0",15,0)
 ;
"RTN","IBCEP0",16,0)
HDR ; -- header code
"RTN","IBCEP0",17,0)
 N Z,Z0,Z1,IBCT,IBPPTYP,IBEMCTYP
"RTN","IBCEP0",18,0)
 S IBCT=1
"RTN","IBCEP0",19,0)
 K VALMHDR
"RTN","IBCEP0",20,0)
 I $G(IBINS) D
"RTN","IBCEP0",21,0)
 . S VALMHDR(1)="INSURANCE CO: "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEP0",22,0)
 . ; Get performing provider id type for insurance co
"RTN","IBCEP0",23,0)
 . S IBPPTYP=$$PPTYP(IBINS)
"RTN","IBCEP0",24,0)
 . ; Get ien of EMC ID from file 355.97
"RTN","IBCEP0",25,0)
 . S IBEMCTYP=+$$EMCID^IBCEP()
"RTN","IBCEP0",26,0)
 . I $G(IBSORT)="ALL"!($G(IBDSP)="I")!($G(IBSORT)=IBPPTYP)!($G(IBSORT)=IBEMCTYP) D
"RTN","IBCEP0",27,0)
 .. ; Look for care unit in either of these id types - if there, report on line 2 of header
"RTN","IBCEP0",28,0)
 .. I $G(IBSORT)=IBPPTYP S IBEMCTYP=0
"RTN","IBCEP0",29,0)
 .. I $G(IBSORT)=IBEMCTYP S IBPPTYP=0
"RTN","IBCEP0",30,0)
 .. F Z0=IBPPTYP_"P",IBEMCTYP_"E" S Z1="" F  S Z1=$O(^IBA(355.96,"D",+IBINS,+Z0,Z1)) Q:Z1=""  I Z1'="*N/A*" S Z($E(Z0,$L(Z0)))=1 Q
"RTN","IBCEP0",31,0)
 .. I $D(Z("P"))!$D(Z("E")) D
"RTN","IBCEP0",32,0)
 ... S IBCT=IBCT+1
"RTN","IBCEP0",33,0)
 ... S VALMHDR(IBCT)="  "_$S($D(Z("P")):"PERFORMING PROV ID"_$S($D(Z("E")):" AND ",1:""),1:"")_$S($D(Z("E")):"EMC PROV ID",1:"")_" MAY REQUIRE CARE UNIT"
"RTN","IBCEP0",34,0)
 . I $D(Z("P"))!$D(Z("E")) S IBCT=IBCT+1,VALMHDR(IBCT)=" "
"RTN","IBCEP0",35,0)
 . S IBCT=IBCT+1,VALMHDR(IBCT)="     PROVIDER "_$S($G(IBDSP)="I":"ID TYPE",1:"NAME   ")_$J("",6)_"FORM   CARE TYPE    CARE UNIT       ID#"
"RTN","IBCEP0",36,0)
 Q
"RTN","IBCEP0",37,0)
 ;
"RTN","IBCEP0",38,0)
INIT ; Initialization
"RTN","IBCEP0",39,0)
 D INSID(.IBINS,.IBDSP,.IBSORT)
"RTN","IBCEP0",40,0)
 I $G(IBDSP)="I",$G(IBSORT) S IBPRV=IBSORT
"RTN","IBCEP0",41,0)
 I '$G(IBINS) S VALMQUIT=1
"RTN","IBCEP0",42,0)
 Q
"RTN","IBCEP0",43,0)
 ;
"RTN","IBCEP0",44,0)
INSID(IBINS,IBDSP,IBSORT) ;
"RTN","IBCEP0",45,0)
 N DIC,DIR,DA,X,Y,IBOK,DTOUT,DUOUT
"RTN","IBCEP0",46,0)
 S IBOK=1
"RTN","IBCEP0",47,0)
 I '$G(IBINS) D
"RTN","IBCEP0",48,0)
 . S DIC(0)="AEMQ",DIC="^DIC(36," D ^DIC
"RTN","IBCEP0",49,0)
 . I Y'>0 S IBOK=0 Q
"RTN","IBCEP0",50,0)
 . S IBINS=+Y
"RTN","IBCEP0",51,0)
 I '$G(IBINS) S IBOK=0
"RTN","IBCEP0",52,0)
 I 'IBOK G INSIDQ
"RTN","IBCEP0",53,0)
 ;
"RTN","IBCEP0",54,0)
 S DIR(0)="SA^D:INSURANCE CO DEFAULT IDS;I:INDIVIDUAL PROVIDER IDS FURNISHED BY THE INS CO;A:ALL IDS FURNISHED BY THE INS CO BY PROVIDER TYPE"
"RTN","IBCEP0",55,0)
 S DIR("A")="SELECT DISPLAY CONTENT: ",DIR("B")="A"
"RTN","IBCEP0",56,0)
 S DIR("?",1)="(D) DISPLAY CONTAINS ONLY THOSE IDS ASSIGNED AS DEFAULTS TO THE FACILITY BY",DIR("?",2)="    THE INSURANCE COMPANY"
"RTN","IBCEP0",57,0)
 S DIR("?",3)="(I) DISPLAY CONTAINS ONLY THOSE IDS ASSIGNED TO INDIVIDUAL PROVIDERS BY THE",DIR("?",4)="    INSURANCE COMPANY"
"RTN","IBCEP0",58,0)
 S DIR("?",5)="(A) DISPLAY CONTAINS ALL IDS ASSIGNED BY THE INSURANCE COMPANY FOR ONE OR ALL",DIR("?")="    PROVIDER ID TYPES"
"RTN","IBCEP0",59,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP0",60,0)
 I $D(DTOUT)!$D(DUOUT)!("DIA"'[Y) S IBOK=0 G INSIDQ
"RTN","IBCEP0",61,0)
 S IBDSP=Y,IBSORT=""
"RTN","IBCEP0",62,0)
 I IBDSP="A"!(IBDSP="I") F  D  Q:'IBOK!(IBSORT'="")
"RTN","IBCEP0",63,0)
 . N Z
"RTN","IBCEP0",64,0)
 . S Z=$S(IBDSP="I":"",1:" ID TYPE")
"RTN","IBCEP0",65,0)
 . S DIR("A")="DO YOU WANT TO DISPLAY IDS FOR A SPECIFIC PROVIDER"_Z_"?: ",DIR("B")="NO",DIR(0)="YA"
"RTN","IBCEP0",66,0)
 . S DIR("?",1)="IF YOU ANSWER YES TO THIS QUESTION, YOU MAY SELECT A SPECIFIC PROVIDER"_Z,DIR("?")="  TO DISPLAY, OTHERWISE, ALL PROVIDER"_Z_"S FOUND WILL BE DISPLAYED"
"RTN","IBCEP0",67,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0",68,0)
 . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEP0",69,0)
 . I Y'=1 S IBSORT="ALL" Q
"RTN","IBCEP0",70,0)
 . ;
"RTN","IBCEP0",71,0)
 . I IBDSP="A" D  Q
"RTN","IBCEP0",72,0)
 .. S DIC(0)="AEMQ",DIC="^IBE(355.97,",DIC("S")="I $S('$P(^(0),U,2):1,1:$P(^(0),U,2)=3)" D ^DIC K DIC
"RTN","IBCEP0",73,0)
 .. I Y>0 S IBSORT=+Y Q
"RTN","IBCEP0",74,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBOK=0
"RTN","IBCEP0",75,0)
 . ;
"RTN","IBCEP0",76,0)
 . I IBDSP="I" D  Q
"RTN","IBCEP0",77,0)
 .. N DA
"RTN","IBCEP0",78,0)
 .. S DIR(0)="399.0222,.02A",DIR("A")="SELECT PROVIDER: "
"RTN","IBCEP0",79,0)
 .. W ! D ^DIR K DIR W !
"RTN","IBCEP0",80,0)
 .. I Y>0 S IBSORT=Y Q
"RTN","IBCEP0",81,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEP0",82,0)
 . S IBOK=0 Q
"RTN","IBCEP0",83,0)
 ;
"RTN","IBCEP0",84,0)
 G:'IBOK INSIDQ
"RTN","IBCEP0",85,0)
 D BLD(IBINS,IBDSP,IBSORT)
"RTN","IBCEP0",86,0)
INSIDQ I 'IBOK S VALMQUIT=1
"RTN","IBCEP0",87,0)
 Q
"RTN","IBCEP0",88,0)
 ;
"RTN","IBCEP0",89,0)
BLD(IBINS,IBDSP,IBSORT) ; Build display for Insurance co level provider ID's
"RTN","IBCEP0",90,0)
 N IB,IBENT,IBLCT,IBCT,IBPRV,IBSRT1,IBSRT2,IBOSRT1,IBOSRT2,CU,FT,PT,CT,Z,Z0
"RTN","IBCEP0",91,0)
 K ^TMP("IBPRV_INS_ID",$J),^TMP("IBPRV_INS_SORT",$J)
"RTN","IBCEP0",92,0)
 ;
"RTN","IBCEP0",93,0)
 S (IBENT,IBCT,IBLCT)=0
"RTN","IBCEP0",94,0)
 ;
"RTN","IBCEP0",95,0)
 I "DA"[$G(IBDSP) D
"RTN","IBCEP0",96,0)
 . S CU="" F  S CU=$O(^IBA(355.91,"AUNIQ",IBINS,CU)) Q:CU=""  S FT="" F  S FT=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT)) Q:FT=""  D
"RTN","IBCEP0",97,0)
 .. S CT="" F  S CT=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT)) Q:CT=""  S PT=0 F  S PT=$S(IBDSP="A"&IBSORT:IBSORT,1:$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT,PT))) Q:'PT  D  Q:IBDSP="A"&IBSORT
"RTN","IBCEP0",98,0)
 ... S Z=0 F  S Z=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT,PT,Z)) Q:'Z  S IB=$G(^IBA(355.91,Z,0)) S ^TMP("IBPRV_INS_SORT",$J,PT,"^<<INS CO DEFAULT>>",FT,CT,CU,Z)=$P(IB,U,7)_U
"RTN","IBCEP0",99,0)
 ;
"RTN","IBCEP0",100,0)
 I "IA"[$G(IBDSP) D
"RTN","IBCEP0",101,0)
 . S IBPRV=""
"RTN","IBCEP0",102,0)
 . N IB1,IB2
"RTN","IBCEP0",103,0)
 . F  S IBPRV=$O(^IBA(355.9,"AE",IBINS,IBPRV)) Q:'IBPRV  S Z=0 F  S Z=$O(^IBA(355.9,"AE",IBINS,IBPRV,Z)) Q:'Z  S IB=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP0",104,0)
 .. Q:$P(IB,U,4)=""!($P(IB,U,5)="")!($P(IB,U,6)="")!($P(IB,U,16)="")
"RTN","IBCEP0",105,0)
 .. I IBSORT,$S(IBDSP="I":IBPRV'=IBSORT,1:$P(IB,U,6)'=IBSORT) Q
"RTN","IBCEP0",106,0)
 .. S IB1=$S(IBDSP="A":$P(IB,U,6),1:U_$$EXPAND^IBTRE(355.9,.01,IBPRV)_U_IBPRV)
"RTN","IBCEP0",107,0)
 .. S IB2=$S(IBDSP="I":$P(IB,U,6),1:U_$$EXPAND^IBTRE(355.9,.01,IBPRV)_U_IBPRV)
"RTN","IBCEP0",108,0)
 .. S ^TMP("IBPRV_INS_SORT",$J,IB1,IB2,$P(IB,U,4),$P(IB,U,5),$P(IB,U,16),Z)=$P(IB,U,7)_U_IBPRV
"RTN","IBCEP0",109,0)
 ;
"RTN","IBCEP0",110,0)
 S IBOSRT1=""
"RTN","IBCEP0",111,0)
 S IBSRT1="" F  S IBSRT1=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1)) Q:IBSRT1=""  D
"RTN","IBCEP0",112,0)
 . S IBSRT2="",IBOSRT2=""
"RTN","IBCEP0",113,0)
 . F  S IBSRT2=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2)) Q:IBSRT2=""  D
"RTN","IBCEP0",114,0)
 .. I IBOSRT1'=IBSRT1 D
"RTN","IBCEP0",115,0)
 ... I IBOSRT1'="" S IBLCT=IBLCT+1 D SET^VALM10(IBLCT," ",IBCT+1)
"RTN","IBCEP0",116,0)
 ... S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,"Provider"_$S(IBDSP'="I":" ID Type",1:"")_": "_$S(IBDSP'="I":$$EXPAND^IBTRE(355.91,.06,IBSRT1),1:$P(IBSRT1,U,2_$S($P(IBSRT2,U,3)["VA(200":" (VA)",1:"(NON-VA)"))),IBCT+1)
"RTN","IBCEP0",117,0)
 ... S IBOSRT1=IBSRT1
"RTN","IBCEP0",118,0)
 .. ;
"RTN","IBCEP0",119,0)
 .. S FT="" F  S FT=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT)) Q:FT=""  S CT="" F  S CT=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT)) Q:CT=""  D
"RTN","IBCEP0",120,0)
 ... S CU="" F  S CU=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT,CU)) Q:CU=""  S Z=0 F  S Z=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT,CU,Z)) Q:'Z  S IB=$G(^(Z)) D
"RTN","IBCEP0",121,0)
 .... S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP0",122,0)
 .... S Z0=$E(IBCT_$J("",4),1,4)_" "
"RTN","IBCEP0",123,0)
 .... I IBDSP'="I" S Z0=Z0_$E($S(IBOSRT2'=IBSRT2:$P(IBSRT2,U,2),1:"")_$J("",20),1,20)
"RTN","IBCEP0",124,0)
 .... I IBDSP="I" S Z0=Z0_$E($S(IBOSRT2'=IBSRT2:$$EXPAND^IBTRE(355.9,.06,IBSRT2),1:"")_$J("",20),1,20)
"RTN","IBCEP0",125,0)
 .... S IBOSRT2=IBSRT2
"RTN","IBCEP0",126,0)
 .... S Z0=Z0_"  "_$S(FT=1:"UB-92",FT=2:"HCFA ",1:"BOTH ")_"  "_$E($S(CT=3:"RX",CT=1:"INPT",CT=2:"OUTPT",1:"INPT/OUTPT")_$J("",11),1,11)_"  "_$E($S(CU'="*N/A*":$P($G(^IBA(355.95,+$P($G(^IBA(355.96,+CU,0)),U),0)),U),1:"")_$J("",15),1,15)
"RTN","IBCEP0",127,0)
 .... D SET^VALM10(IBLCT,Z0_" "_$P(IB,U),IBCT)
"RTN","IBCEP0",128,0)
 .... S ^TMP("IBPRV_INS_ID",$J,"ZIDX",IBCT)=Z,^(IBCT,"PRV")=$P(IB,U,2)
"RTN","IBCEP0",129,0)
 .... I '$D(^TMP("IBPRV_INS_ID",$J,$S(IBDSP="I":"ZXPRV",1:"ZXPTYP"),IBSRT1)) S ^(IBSRT1)=IBLCT-1
"RTN","IBCEP0",130,0)
 K ^TMP("IBPRV_INS_SORT",$J)
"RTN","IBCEP0",131,0)
 ;
"RTN","IBCEP0",132,0)
 I IBLCT=0 D  G BLDQ ; No entries found
"RTN","IBCEP0",133,0)
 . D SET^VALM10(1," ")
"RTN","IBCEP0",134,0)
 . S Z="  No "_$S(IBDSP="D":"default ",1:"")
"RTN","IBCEP0",135,0)
 . S Z=Z_"ID's found for "_$S(IBDSP="I":"provider "_$S(IBSORT:"("_$$EXPAND^IBTRE(355.9,.01,IBSORT)_") ",1:"")_"and ",IBDSP="A":"provider type "_$S(IBSORT:"("_$$EXPAND^IBTRE(355.9,.06,IBSORT)_") ",1:"")_"and ",1:"")_"insurance co"
"RTN","IBCEP0",136,0)
 . D SET^VALM10(2,Z)
"RTN","IBCEP0",137,0)
 . S IBLCT=2
"RTN","IBCEP0",138,0)
 ;
"RTN","IBCEP0",139,0)
BLDQ S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP0",140,0)
 Q
"RTN","IBCEP0",141,0)
 ;
"RTN","IBCEP0",142,0)
EXPND ;
"RTN","IBCEP0",143,0)
 Q
"RTN","IBCEP0",144,0)
 ;
"RTN","IBCEP0",145,0)
HELP ;
"RTN","IBCEP0",146,0)
 Q
"RTN","IBCEP0",147,0)
 ;
"RTN","IBCEP0",148,0)
EXIT ;
"RTN","IBCEP0",149,0)
 K ^TMP("IBPRV_INS_ID",$J)
"RTN","IBCEP0",150,0)
 D CLEAN^VALM10
"RTN","IBCEP0",151,0)
 Q
"RTN","IBCEP0",152,0)
 ;
"RTN","IBCEP0",153,0)
SEL(IBDA,MANY) ; Select from provider id list
"RTN","IBCEP0",154,0)
 ; IBDA is passed by reference and IBDA(1) returned containing
"RTN","IBCEP0",155,0)
 ;  ien's of the provider id records selected (file 355.9).
"RTN","IBCEP0",156,0)
 ; If > 1 entry can be selected, MANY is set to 1
"RTN","IBCEP0",157,0)
 N Z
"RTN","IBCEP0",158,0)
 S IBDA=0
"RTN","IBCEP0",159,0)
 D EN^VALM2($G(XQORNOD(0)),$S($G(MANY):"",1:"S"))
"RTN","IBCEP0",160,0)
 S Z=0 F  S Z=$O(VALMY(Z)) Q:'Z  S IBDA=IBDA+1,IBDA(IBDA)=+$G(^TMP("IBPRV_INS_ID",$J,"ZIDX",Z))_U_$G(^(Z,"PRV"))
"RTN","IBCEP0",161,0)
 Q
"RTN","IBCEP0",162,0)
 ;
"RTN","IBCEP0",163,0)
ENX(IBINS1) ; Insurance co level defaults for all providers or
"RTN","IBCEP0",164,0)
 ; for all providers by care unit
"RTN","IBCEP0",165,0)
 N DIC,DIE,DR,DA,X,Y,DLAYGO
"RTN","IBCEP0",166,0)
 I '$G(IBINS1) D  G:'$G(IBINS1) ENQ
"RTN","IBCEP0",167,0)
 . S DIC="^IBA(355.91,",DIC(0)="AELMQ",DLAYGO=355.91 D ^DIC
"RTN","IBCEP0",168,0)
 . I Y>0 S IBINS1=+Y
"RTN","IBCEP0",169,0)
 S DIE="^IBA(355.91,",DA=IBINS1,DR=".01;.06;.04;.05;.03;.07" D ^DIE
"RTN","IBCEP0",170,0)
 ;
"RTN","IBCEP0",171,0)
ENQ Q
"RTN","IBCEP0",172,0)
 ;
"RTN","IBCEP0",173,0)
PPTYP(IBINS) ; Returns the ien of the default performing provider type for 
"RTN","IBCEP0",174,0)
 ;  insurance company IBINS (ien file 36)
"RTN","IBCEP0",175,0)
 Q +$G(^DIC(36,+IBINS,4))
"RTN","IBCEP0",176,0)
 ;
"RTN","IBCEP0A")
0^42^B40805968
"RTN","IBCEP0A",1,0)
IBCEP0A ;ALB/TMP - EDI UTILITIES for insurance assigned provider ID ;01-NOV-00
"RTN","IBCEP0A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP0A",3,0)
 ;
"RTN","IBCEP0A",4,0)
NEW(IBINS,IBPRV,IBPTYP,IBDEF) ; Add new insurance co assigned id
"RTN","IBCEP0A",5,0)
 ; IBDEF = flag sent as 1 if only insurance co defaults are being added
"RTN","IBCEP0A",6,0)
 N DIC,DIR,X,Y,Z,DA,DR,DIE,DO,DD,DLAYGO,IBQ,IBIEN,IBCUND,DTOUT,DUOUT
"RTN","IBCEP0A",7,0)
 D FULL^VALM1
"RTN","IBCEP0A",8,0)
 S IBQ=0
"RTN","IBCEP0A",9,0)
 I $G(IBDEF)="D" W !!,"YOU ARE ADDING A PROVIDER ID THAT WILL BE THE INSURANCE CO DEFAULT",!
"RTN","IBCEP0A",10,0)
 I '$G(IBPRV),$G(IBDEF)'="D" D  G:IBQ NEWQ
"RTN","IBCEP0A",11,0)
 . N DA,IBO
"RTN","IBCEP0A",12,0)
 . S IBO=($G(IBDSP)'="I")
"RTN","IBCEP0A",13,0)
 . S DIR(0)="355.9,.01A"_$S(IBO:"O",1:""),DIR("A")="Select PROVIDER"_$S(IBO:" (optional)",1:"")_": "
"RTN","IBCEP0A",14,0)
 . S DIR("?")="Select the PROVIDER to be assigned a provider ID"
"RTN","IBCEP0A",15,0)
 . I IBO S DIR("?",1)=DIR("?"),DIR("?")="Or    Press ENTER to add an insurance co level default id (all providers)"
"RTN","IBCEP0A",16,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0A",17,0)
 . I $D(DTOUT)!$D(DUOUT) S IBQ=1 Q
"RTN","IBCEP0A",18,0)
 . S IBPRV=$S(Y>0:$P(Y,U),1:"")
"RTN","IBCEP0A",19,0)
 . Q:IBPRV
"RTN","IBCEP0A",20,0)
 . S DIR(0)="YA",DIR("B")="YES",DIR("A",1)="YOU ARE ADDING A PROVIDER ID THAT WILL BE THE INSURANCE CO DEFAULT",DIR("A")="IS THIS OK?: "
"RTN","IBCEP0A",21,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0A",22,0)
 . I $D(DTOUT)!$D(DUOUT)!(Y'=1) S IBQ=1
"RTN","IBCEP0A",23,0)
 . Q
"RTN","IBCEP0A",24,0)
 ;
"RTN","IBCEP0A",25,0)
 I '$G(IBPTYP) D  G:IBQ NEWQ
"RTN","IBCEP0A",26,0)
 . S DIR(0)="PA^355.97:AEMQ",DIR("A")="Select Provider ID Type: ",DIR("?")="Enter the type of provider that the new provider id(s) will apply to",DIR("S")=$S('$G(IBPRV):"I ""03456""[+$P($G(^(0)),U,2)",1:"I ""046""[+$P($G(^(0)),U,2)"),DA=0
"RTN","IBCEP0A",27,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0A",28,0)
 . I $D(DTOUT)!$D(DUOUT)!'Y S IBQ=1 Q
"RTN","IBCEP0A",29,0)
 . S IBPTYP=+Y
"RTN","IBCEP0A",30,0)
 ;
"RTN","IBCEP0A",31,0)
 S IBQ=$$ADDID(IBINS,IBPRV,IBPTYP)
"RTN","IBCEP0A",32,0)
 ;
"RTN","IBCEP0A",33,0)
NEWQ D:'$G(IBQ) BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT))
"RTN","IBCEP0A",34,0)
 S VALMBCK="R"
"RTN","IBCEP0A",35,0)
 Q
"RTN","IBCEP0A",36,0)
 ;
"RTN","IBCEP0A",37,0)
DEL1 ; Delete Insurance Co assigned provider ID's
"RTN","IBCEP0A",38,0)
 ; IBPRV = vp ien of provider if editing entry in file 355.9
"RTN","IBCEP0A",39,0)
 ;         otherwise, null
"RTN","IBCEP0A",40,0)
 N IB1,IBDA,IBFILE
"RTN","IBCEP0A",41,0)
 D FULL^VALM1
"RTN","IBCEP0A",42,0)
 D SEL^IBCEP0(.IBDA)
"RTN","IBCEP0A",43,0)
 G:'$O(IBDA(0)) DEL1Q
"RTN","IBCEP0A",44,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP0A",45,0)
 G:'IBDA DEL1Q
"RTN","IBCEP0A",46,0)
 S IB1=$P(IBDA,U,2),IBDA=+IBDA
"RTN","IBCEP0A",47,0)
 S IBFILE=$S(IB1:355.9,1:355.91)
"RTN","IBCEP0A",48,0)
 I IBDA>0 D DEL^IBCEP5B(IBFILE,IBDA,1),BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT))
"RTN","IBCEP0A",49,0)
 ;
"RTN","IBCEP0A",50,0)
DEL1Q S VALMBCK="R"
"RTN","IBCEP0A",51,0)
 Q
"RTN","IBCEP0A",52,0)
 ;
"RTN","IBCEP0A",53,0)
CHG1 ; Edit Provider ID's
"RTN","IBCEP0A",54,0)
 N IBDA,IB1,IBFILE
"RTN","IBCEP0A",55,0)
 D FULL^VALM1
"RTN","IBCEP0A",56,0)
 D SEL^IBCEP0(.IBDA)
"RTN","IBCEP0A",57,0)
 G:'$O(IBDA(0)) CHG1Q
"RTN","IBCEP0A",58,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP0A",59,0)
 G:'IBDA CHG1Q
"RTN","IBCEP0A",60,0)
 S IB1=$P(IBDA,U,2),IBDA=+IBDA
"RTN","IBCEP0A",61,0)
 S IBFILE=$S(IB1:355.9,1:355.91)
"RTN","IBCEP0A",62,0)
 I IBDA>0 D
"RTN","IBCEP0A",63,0)
 . I IBFILE=355.9 W !!,"PROVIDER: ",$$EXPAND^IBTRE(355.9,.01,IB1)
"RTN","IBCEP0A",64,0)
 . I IBFILE'=355.9 W !!,"  <<INS CO DEFAULT>>"
"RTN","IBCEP0A",65,0)
 . D CHG^IBCEP5B(IBFILE,IBDA),BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT))
"RTN","IBCEP0A",66,0)
 ;
"RTN","IBCEP0A",67,0)
CHG1Q S VALMBCK="R"
"RTN","IBCEP0A",68,0)
 Q
"RTN","IBCEP0A",69,0)
 ;
"RTN","IBCEP0A",70,0)
PRVJMP(IBDSP) ; Navigate to a specific sort level in current LM list
"RTN","IBCEP0A",71,0)
 ;   (from insurance co option)
"RTN","IBCEP0A",72,0)
 ; IBDSP = 'I', 'A' or 'D' to indicate format selected for display
"RTN","IBCEP0A",73,0)
 ;        ([P]ROVIDER, PROVIDER [T]YPE OR [I]NSURANCE DEFAULT)
"RTN","IBCEP0A",74,0)
 ; Sets VALMBG = LINE # if a provider in list selected
"RTN","IBCEP0A",75,0)
 ;
"RTN","IBCEP0A",76,0)
 I $G(IBDSP)="I" D PRVNJMP(.VALMBG)
"RTN","IBCEP0A",77,0)
 I $G(IBDSP)="D"!($G(IBDSP)="A") D PRVTJMP(.VALMBG)
"RTN","IBCEP0A",78,0)
 S VALMBCK="R"
"RTN","IBCEP0A",79,0)
 Q
"RTN","IBCEP0A",80,0)
 ;
"RTN","IBCEP0A",81,0)
PRVNJMP(VALMBG) ; Navigate to a specific provider name (from insurance co
"RTN","IBCEP0A",82,0)
 ;  option)
"RTN","IBCEP0A",83,0)
 ;
"RTN","IBCEP0A",84,0)
 N DIR,X,Y,DA
"RTN","IBCEP0A",85,0)
 D FULL^VALM1
"RTN","IBCEP0A",86,0)
 S DIR(0)="355.9,.01AO^^I '$D(^TMP(""IBPRV_INS_ID"",$J,""ZXPRV"",U_$$EXPAND^IBTRE(355.9,.01,Y)_U_$P(Y,U))) K X"
"RTN","IBCEP0A",87,0)
 S DIR("?",1)="*** YOU MAY ONLY SELECT PROVIDERS INCLUDED IN THE CURRENT LIST ***",DIR("?",2)=" ",DIR("?",3)="SELECTING A PROVIDER WILL FORCE THE DISPLAY TO SKIP TO THE DATA FOR THAT",DIR("?")="   PROVIDER"
"RTN","IBCEP0A",88,0)
 S DIR("A")="SELECT PROVIDER: "
"RTN","IBCEP0A",89,0)
 S DIR("S")="N Z S Z=$P(^(0),U) I $D(^TMP(""IBPRV_INS_ID"",$J,""ZXPRV"",U_$$EXPAND^IBTRE(355.9,.01,Z)_U_Z))"
"RTN","IBCEP0A",90,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP0A",91,0)
 I Y>0,'$D(DTOUT),'$D(DUOUT) D
"RTN","IBCEP0A",92,0)
 . N Z
"RTN","IBCEP0A",93,0)
 . S Z=$G(^TMP("IBPRV_INS_ID",$J,"ZXPRV",U_$$EXPAND^IBTRE(355.9,.01,$P(Y,U))_U_$P(Y,U)))
"RTN","IBCEP0A",94,0)
 . I Z S VALMBG=Z Q
"RTN","IBCEP0A",95,0)
 . S DIR(0)="EA",DIR("A",1)="THIS PROVIDER DOES NOT EXIST IN THE CURRENT DISPLAY",DIR("A")="PRESS THE ENTER KEY TO CONTINUE"
"RTN","IBCEP0A",96,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0A",97,0)
 Q
"RTN","IBCEP0A",98,0)
 ;
"RTN","IBCEP0A",99,0)
PRVTJMP(VALMBG) ; Navigate to a specific provider id type (from ins co option)
"RTN","IBCEP0A",100,0)
 ;
"RTN","IBCEP0A",101,0)
 N DIR,X,Y
"RTN","IBCEP0A",102,0)
 D FULL^VALM1
"RTN","IBCEP0A",103,0)
 S DIR(0)="PAO^355.97:AEMQ",DIR("A")="SELECT PROVIDER ID TYPE: ",DIR("?",1)="SELECTING A PROVIDER ID TYPE WILL FORCE THE DISPLAY TO SKIP TO THE DATA FOR ",DIR("?")="  THAT PROVIDER ID TYPE"
"RTN","IBCEP0A",104,0)
 S DIR("S")="I $D(^TMP(""IBPRV_INS_ID"",$J,""ZXPTYP"",+Y))"
"RTN","IBCEP0A",105,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP0A",106,0)
 I Y>0,'$D(DTOUT),'$D(DUOUT) D
"RTN","IBCEP0A",107,0)
 . N Z
"RTN","IBCEP0A",108,0)
 . S Z=$G(^TMP("IBPRV_INS_ID",$J,"ZXPTYP",+Y))
"RTN","IBCEP0A",109,0)
 . I Z S VALMBG=Z Q
"RTN","IBCEP0A",110,0)
 . S DIR(0)="EA",DIR("A",1)="THIS PROVIDER ID TYPE DOES NOT EXIST IN THE CURRENT DISPLAY",DIR("A")="PRESS THE ENTER KEY TO CONTINUE"
"RTN","IBCEP0A",111,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0A",112,0)
 Q
"RTN","IBCEP0A",113,0)
 ;
"RTN","IBCEP0A",114,0)
CHGINS ; Change insurance co being displayed, using the same or new params
"RTN","IBCEP0A",115,0)
 ; Assumes IBINS exists = IEN of insurance co (file 36)
"RTN","IBCEP0A",116,0)
 N IBINEW,IBSAVE,DIC,DA,Y,X,DIR
"RTN","IBCEP0A",117,0)
 D FULL^VALM1
"RTN","IBCEP0A",118,0)
 S DIC="^DIC(36,",DIC(0)="AEMQ" D ^DIC
"RTN","IBCEP0A",119,0)
 S IBINEW=+Y
"RTN","IBCEP0A",120,0)
 I IBINEW>0,IBINS'=IBINEW D
"RTN","IBCEP0A",121,0)
 . S DIR(0)="YA",DIR("?")="IF YOU WANT TO CHANGE THE FORMAT OF THE DISPLAY, RESPOND NO HERE"
"RTN","IBCEP0A",122,0)
 . S DIR("A")="DO YOU WANT TO DISPLAY THE NEW INS. CO IDS USING THE CURRENT DISPLAY FORMAT?: ",DIR("B")="YES" W ! D ^DIR W ! K DIR
"RTN","IBCEP0A",123,0)
 . Q:Y'=1
"RTN","IBCEP0A",124,0)
 . S IBSAVE("IBINS")=IBINS
"RTN","IBCEP0A",125,0)
 . K ^TMP("IBPRV_INS_ID",$J),VALMHDR S VALMBG=1,IBINS=IBINEW
"RTN","IBCEP0A",126,0)
 . I Y=1 D BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT)) Q
"RTN","IBCEP0A",127,0)
 . D INIT^IBCEP0
"RTN","IBCEP0A",128,0)
 . I '$G(VALMQUIT) Q
"RTN","IBCEP0A",129,0)
 . S IBINS=IBSAVE("IBINS") D BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT))
"RTN","IBCEP0A",130,0)
 S VALMBCK="R"
"RTN","IBCEP0A",131,0)
 Q
"RTN","IBCEP0A",132,0)
 ;
"RTN","IBCEP0A",133,0)
CHGFMT ; Change format parameters for display
"RTN","IBCEP0A",134,0)
 N IBSAVE
"RTN","IBCEP0A",135,0)
 S IBSAVE("IBINS")=$G(IBINS)
"RTN","IBCEP0A",136,0)
 D INIT^IBCEP0
"RTN","IBCEP0A",137,0)
 I '$G(VALMQUIT) G CHGFMTQ
"RTN","IBCEP0A",138,0)
 S IBINS=IBSAVE("IBINS") D BLD^IBCEP0($G(IBINS),$G(IBDSP),$G(IBSORT))
"RTN","IBCEP0A",139,0)
CHGFMTQ S VALMBCK="R"
"RTN","IBCEP0A",140,0)
 Q
"RTN","IBCEP0A",141,0)
 ;
"RTN","IBCEP0A",142,0)
IPARAM ; Display Insurance co parameters and care unit requirements
"RTN","IBCEP0A",143,0)
 ; Assumes IBINS exists = IEN of insurance co
"RTN","IBCEP0A",144,0)
 N IBDSP,IBSORT,IBHOLD
"RTN","IBCEP0A",145,0)
 D FULL^VALM1
"RTN","IBCEP0A",146,0)
 S IBHOLD("IBINS")=$G(IBINS)
"RTN","IBCEP0A",147,0)
 D EN^VALM("IBCE PRVINS PARAM DISPLAY")
"RTN","IBCEP0A",148,0)
 S:$G(IBHOLD("IBINS"))'="" IBINS=IBHOLD("IBINS")
"RTN","IBCEP0A",149,0)
 K VALMQUIT
"RTN","IBCEP0A",150,0)
 S VALMBCK="R"
"RTN","IBCEP0A",151,0)
 Q
"RTN","IBCEP0A",152,0)
 ;
"RTN","IBCEP0A",153,0)
ADDID(IBINS,IBPRV,IBPTYP) ; Adds a new ID for the provider and/or ins co
"RTN","IBCEP0A",154,0)
 ; IBINS = ien of file 36
"RTN","IBCEP0A",155,0)
 ; IBPRV = vp ien of file 355.9
"RTN","IBCEP0A",156,0)
 ; IBPTYP = ien of file 355.97
"RTN","IBCEP0A",157,0)
 ; FUNCTION returns 1 if record not added, 0 if filed OK
"RTN","IBCEP0A",158,0)
 N IBIEN,IBQ,DIC,DA,DO,DD,DLAYGO,X,Y
"RTN","IBCEP0A",159,0)
 S IBQ=0
"RTN","IBCEP0A",160,0)
 I $G(IBPRV) D  G:IBQ ADDIDQ
"RTN","IBCEP0A",161,0)
 . ; Provider specific for insurance co - add to file 355.9
"RTN","IBCEP0A",162,0)
 . S DIC(0)="L",DLAYGO=355.9,DIC="^IBA(355.9,",X=IBPRV
"RTN","IBCEP0A",163,0)
 . S:$G(IBINS) DIC("DR")=".02////"_IBINS
"RTN","IBCEP0A",164,0)
 . D FILE^DICN K DIC,DLAYGO,DD,DO
"RTN","IBCEP0A",165,0)
 . I Y'>0!$D(DUOUT)!$D(DTOUT) S IBIEN=0,IBQ=1 Q
"RTN","IBCEP0A",166,0)
 . S IBIEN=+Y
"RTN","IBCEP0A",167,0)
 . D NEWID^IBCEP5B(355.9,IBINS,IBPRV,IBPTYP,IBIEN,"")
"RTN","IBCEP0A",168,0)
 E  D
"RTN","IBCEP0A",169,0)
 . ; Insurance co default - add to file 355.91
"RTN","IBCEP0A",170,0)
 . S DIC(0)="L",DLAYGO=355.91,DIC="^IBA(355.91,",X=IBINS
"RTN","IBCEP0A",171,0)
 . D FILE^DICN K DIC,DLAYGO,DD,DO
"RTN","IBCEP0A",172,0)
 . I Y'>0!$D(DUOUT)!$D(DTOUT) S IBIEN=0,IBQ=1 Q
"RTN","IBCEP0A",173,0)
 . S IBIEN=+Y
"RTN","IBCEP0A",174,0)
 . D NEWID^IBCEP5B(355.91,IBINS,"",IBPTYP,IBIEN,1)
"RTN","IBCEP0A",175,0)
ADDIDQ Q IBQ
"RTN","IBCEP0A",176,0)
 ;
"RTN","IBCEP2")
0^22^B57941761
"RTN","IBCEP2",1,0)
IBCEP2 ;ALB/TMP - EDI UTILITIES for provider ID ;13-DEC-99
"RTN","IBCEP2",2,0)
 ;;2.0;INTEGRATED BILLING;**137,181,232**;21-MAR-94
"RTN","IBCEP2",3,0)
 ; DBIA for access to fields 53.2,54.1,54.2 in file 200: 224
"RTN","IBCEP2",4,0)
 ;
"RTN","IBCEP2",5,0)
GETID(IBIFN,IBTYPE,IBPROV,IBSEQ,IBT,IBT1) ; Extract IBTYPE id for the bill
"RTN","IBCEP2",6,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEP2",7,0)
 ; IBTYPE = 2:PERFORMING PROVIDER ID (1 and 3 deleted)
"RTN","IBCEP2",8,0)
 ; IBSEQ = the numeric COB sequence of the insurance on the bill
"RTN","IBCEP2",9,0)
 ; Returns IBT = the ien of the provider id type^ien of entry^file # for id
"RTN","IBCEP2",10,0)
 ;
"RTN","IBCEP2",11,0)
 S IBT=0
"RTN","IBCEP2",12,0)
 Q:IBTYPE'=2 ""
"RTN","IBCEP2",13,0)
 N IBID,IBPTYP
"RTN","IBCEP2",14,0)
 S IBID=$$IDFIND(IBIFN,"",IBPROV,IBSEQ,1,.IBT)
"RTN","IBCEP2",15,0)
 I IBID="" S IBT=""
"RTN","IBCEP2",16,0)
 ;
"RTN","IBCEP2",17,0)
 Q IBID
"RTN","IBCEP2",18,0)
 ;
"RTN","IBCEP2",19,0)
IDFIND(IBIFN,IBPTYP,IBPROV,IBSEQ,IBPERF,IBT) ;Loop thru source levels
"RTN","IBCEP2",20,0)
 ;   (if id definition allows) to find correct ID
"RTN","IBCEP2",21,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEP2",22,0)
 ; IBPTYP = the ien of the provider id type in file 355.97 or if null,
"RTN","IBCEP2",23,0)
 ;          the default performing provider ID type for the ins co. in
"RTN","IBCEP2",24,0)
 ;          COB sequence IBSEQ will be calculated
"RTN","IBCEP2",25,0)
 ; IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",26,0)
 ; IBSEQ = the numeric COB sequence of the bill
"RTN","IBCEP2",27,0)
 ; IBPERF = 1 if the performing provider id is needed
"RTN","IBCEP2",28,0)
 ; Returns IBT = ptr to file 355.97^entry #^file #
"RTN","IBCEP2",29,0)
 ;
"RTN","IBCEP2",30,0)
 S IBT=+$G(IBPTYP)
"RTN","IBCEP2",31,0)
 Q:'$G(IBPERF)!'$G(IBPROV) ""
"RTN","IBCEP2",32,0)
 N IBSPEC,IBINS,IBINS4,IBSRC,IBUP,IBID,IBALT,IBPROF,Z
"RTN","IBCEP2",33,0)
 I $G(IBSEQ)="" S IBSEQ=+$$COBN^IBCEF(IBIFN) ; Default to current COB seq
"RTN","IBCEP2",34,0)
 S IBINS=+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U),IBINS4=$G(^DIC(36,+IBINS,4))
"RTN","IBCEP2",35,0)
 S IBPROF=($$FT^IBCEF(IBIFN)=2) S:'IBPROF IBPROF=2
"RTN","IBCEP2",36,0)
 ; form type is HCFA (prof)=1, UB92 (inst)=2
"RTN","IBCEP2",37,0)
 I $G(IBPTYP)="" S (IBT,IBPTYP)=+$P(IBINS4,U,IBPROF) ; Def to perf prv typ for form
"RTN","IBCEP2",38,0)
 I 'IBPTYP Q ""  ; No default id type
"RTN","IBCEP2",39,0)
 S IBSPEC=$G(^IBE(355.97,IBPTYP,1)),IBSRC=$P($G(^IBE(355.97,+IBPTYP,0)),U,2),IBSRC=$S('IBSRC:5,1:IBSRC),IBUP=1
"RTN","IBCEP2",40,0)
 S IBALT=0
"RTN","IBCEP2",41,0)
 ;
"RTN","IBCEP2",42,0)
 F  D  Q:'IBUP!($G(IBID)'="")  S IBSRC=IBSRC-1 Q:'IBSRC
"RTN","IBCEP2",43,0)
 . ;
"RTN","IBCEP2",44,0)
 . I IBSRC=1,$TR($P(IBSPEC,U,1,3),"^0")'="" D  Q  ; Indiv prov default
"RTN","IBCEP2",45,0)
 .. N IBSTATE
"RTN","IBCEP2",46,0)
 .. I $P(IBSPEC,U,2) D  Q  ; Federal DEA # from field 53.2 file 200
"RTN","IBCEP2",47,0)
 ... S IBID=$P($G(^VA(200,+IBPROV,"PS")),U,2) ; DBIA224
"RTN","IBCEP2",48,0)
 ... S $P(IBT,U,2,3)=(IBPROV_U_200)
"RTN","IBCEP2",49,0)
 .. S IBSTATE=+$$CAREST^IBCEP2A(IBIFN)
"RTN","IBCEP2",50,0)
 .. I $P(IBSPEC,U) D  Q  ; State issued DEA # needed
"RTN","IBCEP2",51,0)
 ... Q:'IBSTATE
"RTN","IBCEP2",52,0)
 ... ; Extract the state issuing DEA # from field 54.2 file 200
"RTN","IBCEP2",53,0)
 ... S Z=+$O(^VA(200,+IBPROV,"PS2","B",IBSTATE,0)),IBID=$P($G(^VA(200,+IBPROV,"PS2",Z,0)),U,2) ; DBIA224
"RTN","IBCEP2",54,0)
 ... S $P(IBT,U,2,3)=(+IBPROV_";"_Z_U_200)
"RTN","IBCEP2",55,0)
 .. I $P(IBSPEC,U,3) D  Q  ; State license # needed
"RTN","IBCEP2",56,0)
 ... Q:'IBSTATE
"RTN","IBCEP2",57,0)
 ... ; Extract the state license # from field 54.1 file 200
"RTN","IBCEP2",58,0)
 ... I IBPROV["VA(200" S Z=+$O(^VA(200,+IBPROV,"PS1","B",IBSTATE,0)),IBID=$P($G(^VA(200,+IBPROV,"PS1",Z,0)),U,2),$P(IBT,U,2,3)=(+IBPROV_";"_IBSTATE_U_200) ; DBIA224
"RTN","IBCEP2",59,0)
 ... I IBPROV["IBA(355.93" S IBID=$P($G(^IBA(355.93,+IBPROV,0)),U,12),$P(IBT,U,2,3)=(+IBPROV_U_355.93)
"RTN","IBCEP2",60,0)
 . ;
"RTN","IBCEP2",61,0)
 . I IBSRC=2,$P(IBSPEC,U,4) D  Q  ; FACILITY FED TAX ID #
"RTN","IBCEP2",62,0)
 .. N IBXDATA
"RTN","IBCEP2",63,0)
 .. D F^IBCEF("N-FEDERAL TAX ID",,,IBIFN)
"RTN","IBCEP2",64,0)
 .. S IBID=IBXDATA,$P(IBT,U,2,3)=(U_350.9)
"RTN","IBCEP2",65,0)
 . ;
"RTN","IBCEP2",66,0)
 . I IBSRC=1 S IBID=$$SRC1(IBIFN,"*ALL*",IBPTYP,IBPROV,.IBT) Q
"RTN","IBCEP2",67,0)
 . ;
"RTN","IBCEP2",68,0)
 . I IBSRC=2 S IBID=$$SRC2(IBPTYP,.IBT) Q
"RTN","IBCEP2",69,0)
 . ;
"RTN","IBCEP2",70,0)
 . I IBSRC=3 S IBID=$$SRC3(IBIFN,IBINS,IBPTYP,.IBT) Q
"RTN","IBCEP2",71,0)
 . ; 
"RTN","IBCEP2",72,0)
 . I IBSRC=4 S IBID=$$SRC4(IBIFN,IBINS,IBPTYP,IBPROV,.IBT) Q
"RTN","IBCEP2",73,0)
 . ;
"RTN","IBCEP2",74,0)
 . I IBSRC=5 S IBID=$$SRC5(IBIFN,IBINS,IBPTYP,IBSEQ,.IBT) Q
"RTN","IBCEP2",75,0)
 . ;
"RTN","IBCEP2",76,0)
 . I IBSRC=6 S IBID=$$SRC6(IBIFN,IBINS,IBPTYP,IBPROV,IBSEQ,.IBT) Q
"RTN","IBCEP2",77,0)
 ;
"RTN","IBCEP2",78,0)
 Q $G(IBID)
"RTN","IBCEP2",79,0)
 ;
"RTN","IBCEP2",80,0)
GETALL(IBTYPE,IBIFN,IBPROV,IBPID) ; Extract all performing prov id's for a
"RTN","IBCEP2",81,0)
 ; provider (IBPROV - vp format) on bill IBIFN
"RTN","IBCEP2",82,0)
 ; IBTYPE = type of ID to return (see GETID above)
"RTN","IBCEP2",83,0)
 ;
"RTN","IBCEP2",84,0)
 ; Returns array IBPID(COB SEQ #)=id (pass by reference) AND
"RTN","IBCEP2",85,0)
 ;   IBPID(COB SEQ #,1)=ien of id type (ptr to 355.97)
"RTN","IBCEP2",86,0)
 ;   IBPID = the current insurance co's id
"RTN","IBCEP2",87,0)
 ;
"RTN","IBCEP2",88,0)
 N Z,COB,Z1,IBT
"RTN","IBCEP2",89,0)
 S COB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2",90,0)
 F Z=1:1:3 Q:'$D(^DGCR(399,IBIFN,"I"_Z))  S IBPID(Z)=$$GETID(IBTYPE,IBIFN,IBPROV,Z,.IBT),IBPID(Z,1)=IBT I Z=COB S Z1=IBPID(Z)
"RTN","IBCEP2",91,0)
 Q $G(Z1)
"RTN","IBCEP2",92,0)
 ;
"RTN","IBCEP2",93,0)
SRC1(IBIFN,IBINS,IBPTYP,IBPROV,IBT) ; Licensing/gov't issued # - provider specific
"RTN","IBCEP2",94,0)
 ; Parameter definitions for SRC1, SRC3, SRC4, SRC5, SRC6:
"RTN","IBCEP2",95,0)
 ;   IBIFN = ien of bill (file 399)
"RTN","IBCEP2",96,0)
 ;   IBINS = ien of insurance co (file 36) or *ALL* for all insurance
"RTN","IBCEP2",97,0)
 ;           (always *ALL* for SRC1)
"RTN","IBCEP2",98,0)
 ;   IBPTYP = the ien of the provider id type in file 355.97
"RTN","IBCEP2",99,0)
 ;   IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",100,0)
 ;   IBT = returned as type ien^file ien^file #
"RTN","IBCEP2",101,0)
 ;
"RTN","IBCEP2",102,0)
 N IBID,IB
"RTN","IBCEP2",103,0)
 S IBID="",IB=0
"RTN","IBCEP2",104,0)
 I $G(IBPROV) F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",105,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,"",IB)
"RTN","IBCEP2",106,0)
 Q IBID
"RTN","IBCEP2",107,0)
 ;
"RTN","IBCEP2",108,0)
SRC2(IB35597,IBT) ; Facility default - all providers
"RTN","IBCEP2",109,0)
 ; IB35597 = the ien of the provider id type entry in file 355.97
"RTN","IBCEP2",110,0)
 ; IBT = returned as type ien^file ien^file #
"RTN","IBCEP2",111,0)
 ;
"RTN","IBCEP2",112,0)
 S $P(IBT,U,2,3)=(+IB35597_U_355.97)
"RTN","IBCEP2",113,0)
 Q $P($G(^IBE(355.97,+IB35597,0)),U,4)
"RTN","IBCEP2",114,0)
 ;
"RTN","IBCEP2",115,0)
SRC3(IBIFN,IBINS,IBPTYP,IBT) ; Ins co/all providers
"RTN","IBCEP2",116,0)
 ; See SRC1 for parameter definitions
"RTN","IBCEP2",117,0)
 ;
"RTN","IBCEP2",118,0)
 N IB,IBID
"RTN","IBCEP2",119,0)
 S IBID="",IB=0
"RTN","IBCEP2",120,0)
 F  S IB=$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*",IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",121,0)
 . S IBID=$$UNIQ2(IBIFN,IBINS,IBPTYP,"",IB,.IBT)
"RTN","IBCEP2",122,0)
 Q IBID
"RTN","IBCEP2",123,0)
 ;
"RTN","IBCEP2",124,0)
SRC4(IBIFN,IBINS,IBPTYP,IBPROV,IBT) ;  Insurance co/individual provider
"RTN","IBCEP2",125,0)
 ; See SRC1 for parameter definitions
"RTN","IBCEP2",126,0)
 ;
"RTN","IBCEP2",127,0)
 N IBID,IB
"RTN","IBCEP2",128,0)
 S IBID="",IB=0
"RTN","IBCEP2",129,0)
 I $G(IBPROV) F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",130,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,"",IB,.IBT)
"RTN","IBCEP2",131,0)
 Q IBID
"RTN","IBCEP2",132,0)
 ;
"RTN","IBCEP2",133,0)
SRC5(IBIFN,IBINS,IBPTYP,IBSEQ,IBT) ; Ins co/all providers/care unit
"RTN","IBCEP2",134,0)
 ; See SRC1 for missing parameter definitions
"RTN","IBCEP2",135,0)
 ; IBSEQ = the numeric COB sequence of the insurance on the bill
"RTN","IBCEP2",136,0)
 ;
"RTN","IBCEP2",137,0)
 N IBP,IBUNIT,IBID,IB,Z
"RTN","IBCEP2",138,0)
 S IBID="",Z=0
"RTN","IBCEP2",139,0)
 S IBP=+$O(^DGCR(399,IBIFN,"PRV","B",$S($$FT^IBCEF(IBIFN)=3:4,1:3),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"PRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",140,0)
 I IBUNIT'="" F  S Z=$O(^IBA(355.96,"AC",IBINS,IBPTYP,Z)) Q:'Z  D  Q:IBID'=""
"RTN","IBCEP2",141,0)
 . S IB=0 F  S IB=$O(^IBA(355.91,"ACARE",Z,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",142,0)
 .. S IBID=$$UNIQ2(IBIFN,IBINS,IBPTYP,IBUNIT,IB,.IBT)
"RTN","IBCEP2",143,0)
 Q IBID
"RTN","IBCEP2",144,0)
 ;
"RTN","IBCEP2",145,0)
SRC6(IBIFN,IBINS,IBPTYP,IBPROV,IBSEQ,IBT) ; Ins co/ind provider/care unit
"RTN","IBCEP2",146,0)
 ; See SRC1 for missing parameter definitions
"RTN","IBCEP2",147,0)
 ; IBSEQ = the numeric COB sequence of the insurance on the bill
"RTN","IBCEP2",148,0)
 ;
"RTN","IBCEP2",149,0)
 N IBUNIT,IBP,IBID,IB
"RTN","IBCEP2",150,0)
 S IBID="",IB=0
"RTN","IBCEP2",151,0)
 S IBP=+$O(^DGCR(399,"PRV","B",$S($$FT^IBCEF(IBIFN)=3:3,1:4),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"PRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",152,0)
 I $G(IBPROV),IBUNIT'="" F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",153,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,IBUNIT,IB,.IBT)
"RTN","IBCEP2",154,0)
 Q IBID
"RTN","IBCEP2",155,0)
 ;
"RTN","IBCEP2",156,0)
 ; Parameter definitions for UNIQ1 and UNIQ2:
"RTN","IBCEP2",157,0)
 ;   IBIFN = ien of bill (file 399)
"RTN","IBCEP2",158,0)
 ;   IBINS = ien of insurance co (file 36) or *ALL* for all insurance
"RTN","IBCEP2",159,0)
 ;   IBPTYP = the ien of the provider id type in file 355.97
"RTN","IBCEP2",160,0)
 ;   IBUNIT = the value of the specific care unit to use for a match
"RTN","IBCEP2",161,0)
 ;            or *N/A* if none needed
"RTN","IBCEP2",162,0)
 ;   IBCU = the ien of the entry being matched in start file
"RTN","IBCEP2",163,0)
 ;   IBT = the second and third pieces are set to the entry ien^file #
"RTN","IBCEP2",164,0)
 ;
"RTN","IBCEP2",165,0)
UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,IBUNIT,IBCU,IBT) ; Match most-least specific
"RTN","IBCEP2",166,0)
 ; Start in file 355.9 (Specific Provider)
"RTN","IBCEP2",167,0)
 ;   IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",168,0)
 ;
"RTN","IBCEP2",169,0)
 N Q,Z0,Z1,Z2,IBID,IBX
"RTN","IBCEP2",170,0)
 S IBID=""
"RTN","IBCEP2",171,0)
 S IBX=$P($G(^IBA(355.9,+IBCU,0)),U,3) S:"0"[IBX IBX="*N/A*"
"RTN","IBCEP2",172,0)
 S Z0=$$FT^IBCEF(IBIFN),Z0=$S(Z0=2:2,Z0=3:1,1:0),Z1=$$INPAT^IBCEF(IBIFN,1) S:'Z1 Z1=2 S Z2=$$ISRX^IBCEF1(IBIFN)
"RTN","IBCEP2",173,0)
 ;
"RTN","IBCEP2",174,0)
 ; Match all elements
"RTN","IBCEP2",175,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2",176,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2",177,0)
 ;
"RTN","IBCEP2",178,0)
 ; Match both form types,specific I/O element
"RTN","IBCEP2",179,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2",180,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2",181,0)
 ;
"RTN","IBCEP2",182,0)
 ; Match specific form type, both I/O element or Rx
"RTN","IBCEP2",183,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2",184,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2",185,0)
 ;
"RTN","IBCEP2",186,0)
 ; Match both form types, both I/O element or Rx
"RTN","IBCEP2",187,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2",188,0)
 ;
"RTN","IBCEP2",189,0)
UNIQ1Q Q IBID
"RTN","IBCEP2",190,0)
 ;
"RTN","IBCEP2",191,0)
UNIQ2(IBIFN,IBINS,IBPTYP,IBUNIT,IBCU,IBT) ; Match on most-least specific
"RTN","IBCEP2",192,0)
 ; Start in file 355.91 (Specific Insurance)
"RTN","IBCEP2",193,0)
 ;
"RTN","IBCEP2",194,0)
 N Q,Z0,Z1,Z2,IBID,IBX
"RTN","IBCEP2",195,0)
 S IBID="" S:"0"[$G(IBUNIT) IBUNIT="*N/A*"
"RTN","IBCEP2",196,0)
 S Z0=$$FT^IBCEF(IBIFN),Z0=$S(Z0=2:2,Z0=3:1,1:0),Z1=$$INPAT^IBCEF(IBIFN,1) S:'Z1 Z1=2 S Z2=$$ISRX^IBCEF1(IBIFN)
"RTN","IBCEP2",197,0)
 ;
"RTN","IBCEP2",198,0)
 ; Match all elements
"RTN","IBCEP2",199,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2",200,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2",201,0)
 ;
"RTN","IBCEP2",202,0)
 ; Match both form types,specific I/O element
"RTN","IBCEP2",203,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2",204,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2",205,0)
 ;
"RTN","IBCEP2",206,0)
 ; Match specific form type, both I/O element or Rx
"RTN","IBCEP2",207,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2",208,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2",209,0)
 ;
"RTN","IBCEP2",210,0)
 ; Match both form types, both I/O elements or Rx
"RTN","IBCEP2",211,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2",212,0)
 ;
"RTN","IBCEP2",213,0)
UNIQ2Q Q IBID
"RTN","IBCEP2",214,0)
 ;
"RTN","IBCEP2A")
0^24^B17487545
"RTN","IBCEP2A",1,0)
IBCEP2A ;ALB/TMP - EDI UTILITIES for provider ID ;25-APR-01
"RTN","IBCEP2A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP2A",3,0)
 ;
"RTN","IBCEP2A",4,0)
ALT(IBPERF,IBSRC,IBALT,IBINS4,IBPTYP) ; set source level to next higher level 
"RTN","IBCEP2A",5,0)
 ; or set the alternate type and source if performing provider id
"RTN","IBCEP2A",6,0)
 ; alternate type and source exist
"RTN","IBCEP2A",7,0)
 ; IBPERF = 1 if performing provider id is requested
"RTN","IBCEP2A",8,0)
 ; IBINS4 = '4' node of insurance co (file 36)
"RTN","IBCEP2A",9,0)
 ; Pass IBPTYP by reference to get alternate provider id type
"RTN","IBCEP2A",10,0)
 ; Pass IBALT by reference.  Set to 1 if alternate id is to be used next
"RTN","IBCEP2A",11,0)
 ;
"RTN","IBCEP2A",12,0)
 I '$G(IBPERF)!($P(IBINS4,U,3)=1) S IBSRC=IBSRC-1 G ALTQ
"RTN","IBCEP2A",13,0)
 S IBSRC=""
"RTN","IBCEP2A",14,0)
 I '$G(IBALT),$P(IBINS4,U,3)=2,$P(IBINS4,U,10),$P(IBINS4,U,11) S IBALT=1,IBSRC=$P(IBINS4,U,11),IBPTYP=$P(IBINS4,U,10) S:IBPTYP="" IBPTYP=$P(IBINS4,U)
"RTN","IBCEP2A",15,0)
 ;
"RTN","IBCEP2A",16,0)
ALTQ Q IBSRC
"RTN","IBCEP2A",17,0)
 ;
"RTN","IBCEP2A",18,0)
IDSET(IBPTYP,IBINS4,IBPERF,IBSPEC,IBSRC,IBUP) ; set variables for provider id type search
"RTN","IBCEP2A",19,0)
 N Z
"RTN","IBCEP2A",20,0)
 S IBSPEC=$G(^IBE(355.97,+IBPTYP,1))
"RTN","IBCEP2A",21,0)
 S Z=$S($G(IBPERF):2,$P(IBSPEC,U,5):6,$P(IBSPEC,U,6):4,1:2)
"RTN","IBCEP2A",22,0)
 S IBSRC=$P(IBINS4,U,Z),IBUP=$P(IBINS4,U,$S(IBSRC:Z+1,1:0))
"RTN","IBCEP2A",23,0)
 Q
"RTN","IBCEP2A",24,0)
 ;
"RTN","IBCEP2A",25,0)
CAREST(IBIFN) ; Return state file ien of state where care was performed
"RTN","IBCEP2A",26,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEP2A",27,0)
 ; Get it from rendering facility or if none, the billing facility
"RTN","IBCEP2A",28,0)
 N Z,IBXDATA,STATE
"RTN","IBCEP2A",29,0)
 S STATE=""
"RTN","IBCEP2A",30,0)
 D F^IBCEF("N-RENDERING INSTITUTION",,,IBIFN)
"RTN","IBCEP2A",31,0)
 I IBXDATA D
"RTN","IBCEP2A",32,0)
 . I '$P(IBXDATA,U,2) S STATE=+$P($G(^DIC(4,+IBXDATA,0)),U,2) Q
"RTN","IBCEP2A",33,0)
 . S STATE=+$P($G(^IBA(355.93,+IBXDATA,0)),U,7)
"RTN","IBCEP2A",34,0)
 E  D
"RTN","IBCEP2A",35,0)
 . D F^IBCEF("N-AGENT CASHIER STATE",,,IBIFN)
"RTN","IBCEP2A",36,0)
 . S STATE=IBXDATA
"RTN","IBCEP2A",37,0)
 Q STATE
"RTN","IBCEP2A",38,0)
 ;
"RTN","IBCEP2A",39,0)
RECALCA(IBIFN) ; Recalculate all performing provider id's on bill IBIFN
"RTN","IBCEP2A",40,0)
 ; IBIFN = ien of bill entry (file 399)
"RTN","IBCEP2A",41,0)
 N IBZ,IBZ0,IBX,IBP,IBSEQ,DA,DIE,DR,DIR,X,Y
"RTN","IBCEP2A",42,0)
 ;
"RTN","IBCEP2A",43,0)
 D EN^DDIOL("THIS FUNCTION HAS BEEN DISABLED",,"!") Q
"RTN","IBCEP2A",44,0)
 ;
"RTN","IBCEP2A",45,0)
 S DA(1)=IBIFN
"RTN","IBCEP2A",46,0)
 I '$D(^XUSEC("IB SUPERVISOR",DUZ)) D EN^DDIOL("YOU ARE NOT AUTHORIZED TO PERFORM THIS FUNCTION",,"!")
"RTN","IBCEP2A",47,0)
 S IBZ=0 F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S IBP=$G(^(IBZ,0)) I $P(IBP,U,2)'="" D
"RTN","IBCEP2A",48,0)
 . S DA=IBZ
"RTN","IBCEP2A",49,0)
 . F IBZ0=5:1:7 Q:'$G(^DGCR(399,IBIFN,"I"_(IBZ0-4)))  D
"RTN","IBCEP2A",50,0)
 .. S IBSEQ=$$EXPAND^IBTRE(399.0222,.01,+IBP)_" "_$P("PRIMARY^SECONDARY^TERTIARY",U,IBZ0-4)_" PROVIDER ID "
"RTN","IBCEP2A",51,0)
 .. S IBX=$$RECALC(.DA,IBZ0-4,$P(IBP,U,IBZ0),1)
"RTN","IBCEP2A",52,0)
 .. I IBX'="",IBX=$P(IBP,U,IBZ0) D EN^DDIOL(IBSEQ_"NO CHANGE NEEDED",,"!") Q
"RTN","IBCEP2A",53,0)
 .. I IBX'="",IBX'=$P(IBP,U,IBZ0) D  Q
"RTN","IBCEP2A",54,0)
 ... S DR=(IBZ0/100)_"////"_IBX,DIE="^DGCR(399,"_DA(1)_",""PRV""," D ^DIE
"RTN","IBCEP2A",55,0)
 ... D EN^DDIOL(IBSEQ_"CHANGED TO "_IBX,,"!")
"RTN","IBCEP2A",56,0)
 .. D EN^DDIOL(IBSEQ_"NOT FOUND",,"!")
"RTN","IBCEP2A",57,0)
 Q
"RTN","IBCEP2A",58,0)
 ;
"RTN","IBCEP2A",59,0)
RECALC(IBDA,IBSEQ,IBX,IBD) ; Recalculate id #, if possible - called
"RTN","IBCEP2A",60,0)
 ;   from input transforms in subfile 399.0222, fields .05-.07
"RTN","IBCEP2A",61,0)
 ; IBDA = DA array of the provider entry (file 399.0222)
"RTN","IBCEP2A",62,0)
 ; IBSEQ = the numeric COB sequence of the provider id (1-3)
"RTN","IBCEP2A",63,0)
 ; IBX = the current value of the id in the subfile
"RTN","IBCEP2A",64,0)
 ; IBD = flag that if set to 1 will suppress the display text
"RTN","IBCEP2A",65,0)
 ;
"RTN","IBCEP2A",66,0)
 N IBPN,IBZ
"RTN","IBCEP2A",67,0)
 S IBPN=$P($G(^DGCR(399,IBDA(1),"PRV",IBDA,0)),U,2)
"RTN","IBCEP2A",68,0)
 I IBPN="" D:'$G(IBD) EN^DDIOL("   CAN'T CALCULATE WITHOUT A PROVIDER NAME","","?0") G RECALCQ
"RTN","IBCEP2A",69,0)
 S IBZ=$$GETID^IBCEP2(IBDA(1),2,IBPN,IBSEQ)
"RTN","IBCEP2A",70,0)
 I IBZ="" D:'$G(IBD) EN^DDIOL("   ID COULD NOT BE DETERMINED","","?0") G RECALCQ
"RTN","IBCEP2A",71,0)
 D:'$G(IBD) EN^DDIOL("  "_IBZ_$S(IBZ'=IBX:"",1:" (no change)"),"","?0")
"RTN","IBCEP2A",72,0)
 S IBX=IBZ
"RTN","IBCEP2A",73,0)
 ;
"RTN","IBCEP2A",74,0)
RECALCQ Q IBX
"RTN","IBCEP2A",75,0)
 ;
"RTN","IBCEP2A",76,0)
PERFPRV(IBIFN) ; Returns the variable pointer of the 'performing provider'
"RTN","IBCEP2A",77,0)
 ; (attending or rendering) for a bill IBIFN
"RTN","IBCEP2A",78,0)
 N IBP,IBPT,IBQ,Z
"RTN","IBCEP2A",79,0)
 S Z=$$FT^IBCEF(IBIFN),IBPT=$S(Z=2:3,Z=3:4,1:0)
"RTN","IBCEP2A",80,0)
 D GETPRV^IBCEU(IBIFN,IBPT,.IBP)
"RTN","IBCEP2A",81,0)
 Q $P($G(IBP(IBPT,1)),U,3)
"RTN","IBCEP2A",82,0)
 ;
"RTN","IBCEP2A",83,0)
INSPAR(IBIFN,SEQ) ;
"RTN","IBCEP2A",84,0)
 N Z,Z4,Z0
"RTN","IBCEP2A",85,0)
 Q:$G(X)'="??"
"RTN","IBCEP2A",86,0)
 S:'$G(SEQ) SEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2A",87,0)
 S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ)),Z4=$G(^DIC(36,Z,4))
"RTN","IBCEP2A",88,0)
 I Z D
"RTN","IBCEP2A",89,0)
 . D EN^DDIOL(">"_$J("",20)_"-- PERFORMING PROVIDER ID PARAMETERS --",,"!")
"RTN","IBCEP2A",90,0)
 . S Z0=$P("  PRIMARY^SECONDARY^ TERTIARY",U,SEQ)_" INSURANCE: "_$P($G(^DIC(36,Z,0)),U)
"RTN","IBCEP2A",91,0)
 . D EN^DDIOL(">"_$J("",(80-$L(Z0))\2)_Z0,,"!")
"RTN","IBCEP2A",92,0)
 . D EN^DDIOL(">  Secondary Perf Prov ID Type (HCFA): "_$$EXPAND^IBTRE(36,4.01,+Z4),,"!")
"RTN","IBCEP2A",93,0)
 . D EN^DDIOL(">  Secondary Perf Prov ID Type (UB92): "_$$EXPAND^IBTRE(36,4.02,$P(Z4,U,2)),,"!")
"RTN","IBCEP2A",94,0)
 . D EN^DDIOL(">    Secondary Perf Prov IDs Required: "_$$EXPAND^IBTRE(36,4.03,$P(Z4,U,3)),,"!")
"RTN","IBCEP2A",95,0)
 . D EN^DDIOL(" ",,"!")
"RTN","IBCEP2A",96,0)
 Q
"RTN","IBCEP2A",97,0)
 ;
"RTN","IBCEP2A",98,0)
GETTYP(IBXIEN,IBCOBN) ; Function returns provider id type for insurance co
"RTN","IBCEP2A",99,0)
 ; with COB of IBCOBN on claim ien IBXIEN in first ^ pc and 1 in second
"RTN","IBCEP2A",100,0)
 ; ^ piece if the id is required
"RTN","IBCEP2A",101,0)
 ; 
"RTN","IBCEP2A",102,0)
 N A,R,Z,Z0
"RTN","IBCEP2A",103,0)
 S A="",R=0
"RTN","IBCEP2A",104,0)
 S:'$G(IBCOBN)!(IBCOBN>3) IBCOBN=$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP2A",105,0)
 S Z=+$G(^DGCR(399,IBXIEN,"I"_+IBCOBN))
"RTN","IBCEP2A",106,0)
 I Z D
"RTN","IBCEP2A",107,0)
 . S Z0=$$FT^IBCEF(IBXIEN)
"RTN","IBCEP2A",108,0)
 . S A=+$P($G(^DIC(36,Z,4)),U,$S(Z0=2:1,1:2))
"RTN","IBCEP2A",109,0)
 . I A S R=$P($G(^DIC(36,Z,4)),U,3),R=$S('R:0,R=3:1,R=1:Z0=2,R=2:Z0=3,1:0)
"RTN","IBCEP2A",110,0)
 Q A_U_R
"RTN","IBCEP2A",111,0)
 ;
"RTN","IBCEP2B")
0^34^B43061345
"RTN","IBCEP2B",1,0)
IBCEP2B ;ALB/TMP - EDI UTILITIES for provider ID ;18-MAY-04
"RTN","IBCEP2B",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEP2B",3,0)
 ;
"RTN","IBCEP2B",4,0)
PROVID(IBIFN,IBPRIEN,IBCOBN,DIPA) ; Provider id entry on billing screen 8
"RTN","IBCEP2B",5,0)
 ; IBIFN = ien file 399
"RTN","IBCEP2B",6,0)
 ; IBPRIEN = ien file 399.0222
"RTN","IBCEP2B",7,0)
 ; IBCOBN = the COB number of the id being edited
"RTN","IBCEP2B",8,0)
 ; DIPA = passed by ref, returned with id data
"RTN","IBCEP2B",9,0)
 ; DIPA("EDIT")=-1 if no id editing  = 1 if edit id   = 2 if stuff id
"RTN","IBCEP2B",10,0)
 ; DIPA("PRID")= id to stuff   DIPA("PRIDT")= id type to stuff
"RTN","IBCEP2B",11,0)
 N PRN0,Z
"RTN","IBCEP2B",12,0)
 Q:'$G(^DGCR(399,IBIFN,"I1"))
"RTN","IBCEP2B",13,0)
 S PRN0=$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0))
"RTN","IBCEP2B",14,0)
 S DIPA("EDIT")=1,(DIPA("PRID"),DIPA("PRIDT"))=""
"RTN","IBCEP2B",15,0)
 W @IOF
"RTN","IBCEP2B",16,0)
 W !,?19,"**** SECONDARY PERFORMING PROVIDER IDs ****"
"RTN","IBCEP2B",17,0)
 W !!,$P("PRIMARY^SECONDARY^TERTIARY",U,IBCOBN)_" INSURANCE CO: "_$P($G(^DIC(36,+$G(^DGCR(399,IBIFN,"I"_IBCOBN)),0)),U)
"RTN","IBCEP2B",18,0)
 W !,"PROVIDER: "_$$EXTERNAL^DILFD(399.0222,.02,"",$P(PRN0,U,2))_" ("_$$EXTERNAL^DILFD(399.0222,.01,"",+PRN0)_")",!
"RTN","IBCEP2B",19,0)
 ;
"RTN","IBCEP2B",20,0)
 I $P(PRN0,U,4+IBCOBN)="" K DIPA("PRID"),DIPA("PRIDT") D NEWID(IBIFN,IBPRIEN,IBCOBN,.DIPA) ; No id currently exists for the ins seq/prov
"RTN","IBCEP2B",21,0)
 ;
"RTN","IBCEP2B",22,0)
 Q
"RTN","IBCEP2B",23,0)
 ;
"RTN","IBCEP2B",24,0)
NEWID(IBIFN,IBPRIEN,IBCOBN,DIPA) ;
"RTN","IBCEP2B",25,0)
 N IBDEF,IBCT,IBNUM,IBINS,IBFRM,IBCAR,IBARR,IBARRS,IB0,IBM,IBQUIT,IBSEL,PRN,PRT,PRN,PRN0,DIR,X,Y,Z,Z0,IBZ,IBZ1,IBTYP,IBREQ,IBREQT,IBTYPN,IBID
"RTN","IBCEP2B",26,0)
 S IBREQ=0,IBREQT=""
"RTN","IBCEP2B",27,0)
 S Z(IBCOBN)=$S($G(DIPA("I"_IBCOBN)):$$GETTYP^IBCEP2A(IBIFN,IBCOBN),1:"")
"RTN","IBCEP2B",28,0)
 S PRN0=$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0))
"RTN","IBCEP2B",29,0)
 S IBINS=+$G(^DGCR(399,IBIFN,"I"_IBCOBN)),IB0=$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0))
"RTN","IBCEP2B",30,0)
 S IBCAR=$$INPAT^IBCEF(IBIFN,1),IBCAR=$S('IBCAR:2,1:1)
"RTN","IBCEP2B",31,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=2:2,1:1)
"RTN","IBCEP2B",32,0)
 I $P(Z(IBCOBN),U) D
"RTN","IBCEP2B",33,0)
 . W !,"INS. COMPANY'S DEFAULT SECONDARY ID TYPE IS: "_$$EXTERNAL^DILFD(36,4.01,"",$P(Z(IBCOBN),U)) S IBREQT=+Z(IBCOBN)
"RTN","IBCEP2B",34,0)
 . I $P(Z(IBCOBN),U,2) W !,?2," AND IS REQUIRED TO BE ENTERED FOR THIS CLAIM" S IBREQ=1
"RTN","IBCEP2B",35,0)
 I $$CUNEED^IBCEP3(IBIFN,IBCOBN) W !,"CARE UNITS ARE DEFINED"_$S($P($G(^DIC(36,IBINS,4)),U,9)'="":" AS "_$P(^(4),U,9),1:"")_" FOR THESE IDs"
"RTN","IBCEP2B",36,0)
 D PRACT^IBCEF71(IBINS,IBFRM,IBCAR,$P(IB0,U,2),.IBARR,$P(IB0,U),$S($$COBN^IBCEF(IBIFN)=IBCOBN:"C",1:"O"),355.9,1)
"RTN","IBCEP2B",37,0)
 S (IBNUM,IBCT)=0,IBDEF=""
"RTN","IBCEP2B",38,0)
 I $O(IBARR(""))="" S IBCT=IBCT+1,DIR("A",IBCT)="NO SECONDARY IDS ARE DEFINED FOR THIS PROV THAT ARE VALID FOR THIS CLAIM"
"RTN","IBCEP2B",39,0)
 S IBCT=IBCT+1,DIR("A",IBCT)="SELECT A SECONDARY ID OR ACTION FROM THE LIST BELOW: ",IBCT=IBCT+1,DIR("A",IBCT)=" "
"RTN","IBCEP2B",40,0)
 ;
"RTN","IBCEP2B",41,0)
 S IBCT=IBCT+1,IBNUM=IBNUM+1,DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  NO SECONDARY ID NEEDED",IBNUM=IBNUM+1,IBCT=IBCT+1,DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  ADD AN ID FOR THIS CLAIM ONLY"
"RTN","IBCEP2B",42,0)
 I $O(IBARR(""))="" S IBDEF=1,DIPA("EDIT")=$$SELID(.DIR,IBDEF,.IBID,.DIPA,IBNUM) Q
"RTN","IBCEP2B",43,0)
 ;
"RTN","IBCEP2B",44,0)
 S PRN=$$GETID^IBCEP2(IBIFN,2,$P(PRN0,U,2),IBCOBN,.PRT),IBDEF=""
"RTN","IBCEP2B",45,0)
 ;
"RTN","IBCEP2B",46,0)
 I PRN'="",PRT D
"RTN","IBCEP2B",47,0)
 . N PRT1
"RTN","IBCEP2B",48,0)
 . S PRT1=$P($G(^IBE(355.97,+PRT,0)),U)
"RTN","IBCEP2B",49,0)
 . I $P($G(^IBE(355.97,+PRT,1)),U,3) S PRT1="ST LIC("_$P($G(^DIC(5,+$$CAREST^IBCEP2A(IBIFN),0)),U,2)_")"
"RTN","IBCEP2B",50,0)
 . S IBCT=IBCT+1,IBNUM=IBNUM+1
"RTN","IBCEP2B",51,0)
 . S DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  "_$E("<DEFAULT> "_PRN_$J("",29),1,29)_"  "_$E(PRT1_$J("",15),1,15)
"RTN","IBCEP2B",52,0)
 . S DIR("A",IBCT)=DIR("A",IBCT)_"  "_$S($P(PRT,U,3)'["355.9":"",$P($G(^IBA(+$P(PRT,U,3),+$P(PRT,U,2),0)),U,3)'="":$$EXTERNAL^DILFD(355.9,.03,"",$P($G(^IBA(+$P(PRT,U,3),+$P(PRT,U,2),0)),U,3)),1:"")
"RTN","IBCEP2B",53,0)
 . S IBID(IBNUM)=PRN_U_+PRT,IBDEF=IBNUM,IBID(IBNUM,1)=DIR("A",IBCT),IBDEF=IBNUM,IBDEF("IEN")=$P(PRT,U,2,3)
"RTN","IBCEP2B",54,0)
 ;
"RTN","IBCEP2B",55,0)
 S IBQUIT=0,IBSEL=1
"RTN","IBCEP2B",56,0)
 ; Sort ids by id type
"RTN","IBCEP2B",57,0)
 S IBZ="" F  S IBZ=$O(IBARR(IBZ)) Q:IBZ=""  S IBZ1="" F  S IBZ1=$O(IBARR(IBZ,IBZ1)) Q:IBZ1=""  D
"RTN","IBCEP2B",58,0)
 . S IBTYP=+$P(IBARR(IBZ,IBZ1),U,9)
"RTN","IBCEP2B",59,0)
 . I $P($G(IBDEF("IEN")),U,2)["355.9",$P(IBARR(IBZ,IBZ1),U,8),$P(IBARR(IBZ,IBZ1),U,8)=+$G(IBDEF("IEN")) Q:$S($P(IBZ1,U)'["INS DEF":$P($G(IBDEF("IEN")),U,2)=355.9,1:$P($G(IBDEF("IEN")),U,2)=355.91)
"RTN","IBCEP2B",60,0)
 . S IBARRS(IBTYP,IBZ,IBZ1)=IBARR(IBZ,IBZ1)
"RTN","IBCEP2B",61,0)
 S IBTYP="" F  S IBTYP=$O(IBARRS(IBTYP)) Q:IBTYP=""  S IBZ="" F  S IBZ=$O(IBARRS(IBTYP,IBZ)) Q:IBZ=""  D  Q:IBQUIT
"RTN","IBCEP2B",62,0)
 . S IBZ1="" F  S IBZ1=$O(IBARRS(IBTYP,IBZ,IBZ1)) Q:IBZ1=""  S IBCT=IBCT+1,IBNUM=IBNUM+1 D  Q:IBQUIT
"RTN","IBCEP2B",63,0)
 .. S Z0=IBARRS(IBTYP,IBZ,IBZ1),IBARR=$S($P(Z0,U,8)&(IBZ1'["LIC"):$G(^IBA("355.9"_$S($P(IBZ1,U)'="INS DEF":"",1:1),+$P(Z0,U,8),0)),1:"")
"RTN","IBCEP2B",64,0)
 .. S IBTYPN=$S(IBTYP=+$$STLIC^IBCEP8():"ST LIC ("_$P($G(^DIC(5,+$P(Z0,U,7),0)),U,2)_")",1:$P($G(^IBE(355.97,IBTYP,0)),U))
"RTN","IBCEP2B",65,0)
 .. S DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  "_$E($S($P(IBZ1,U)="INS DEF":"<INS DEF> ",1:"")_$P(Z0,U,4)_$J("",29),1,29)_"  "_$E(IBTYPN_$J("",15),1,15)_"  "_$S($P(IBARR,U,3):$$EXTERNAL^DILFD(355.9,.03,"",$P(IBARR,U,3)),1:"")
"RTN","IBCEP2B",66,0)
 .. S IBID(IBNUM,1)=DIR("A",IBCT),IBID(IBNUM)=$P(Z0,U,4)_U_IBTYP
"RTN","IBCEP2B",67,0)
 .. I (IBNUM#15)=0 S IBM=$$MORE(.DIR) D  Q:IBQUIT
"RTN","IBCEP2B",68,0)
 ... I IBM<0 S IBQUIT=1,IBSEL=0 Q  ; User aborted list
"RTN","IBCEP2B",69,0)
 ... I 'IBM S IBQUIT=1 Q  ; User wants to select
"RTN","IBCEP2B",70,0)
 ... W ! K DIR S IBCT=1
"RTN","IBCEP2B",71,0)
 I 'IBSEL S DIPA("EDIT")=-1
"RTN","IBCEP2B",72,0)
 I IBSEL S:IBDEF=""&$G(IBREQ) IBDEF=2 S DIPA("EDIT")=$$SELID(.DIR,IBDEF,.IBID,.DIPA,IBNUM)
"RTN","IBCEP2B",73,0)
 Q
"RTN","IBCEP2B",74,0)
 ;
"RTN","IBCEP2B",75,0)
SELID(DIR,IBDEF,IBID,DIPA,IBNUM) ; Returns the selection from the array of possible IDs/ID actions
"RTN","IBCEP2B",76,0)
 N IDACT,IDSEL,X,Y
"RTN","IBCEP2B",77,0)
 S IDACT=""
"RTN","IBCEP2B",78,0)
 S DIR("B")=$S('$G(IBDEF):1,1:IBDEF),DIR("A",+$O(DIR("A",""),-1)+1)=" "
"RTN","IBCEP2B",79,0)
 S DIR(0)="NA^1:"_IBNUM,DIR("A")="Selection: " W ! D ^DIR K DIR
"RTN","IBCEP2B",80,0)
 I $D(DTOUT)!$D(DUOUT)!(Y=1) S IDACT=-1 G SELIDQ
"RTN","IBCEP2B",81,0)
 I Y=2 S IDACT=1 G SELIDQ
"RTN","IBCEP2B",82,0)
 S IDSEL=Y
"RTN","IBCEP2B",83,0)
 S DIR("A",1)="ID SELECTED:",DIR("A",2)="  "_$G(IBID(+Y,1)),DIR("A")="IS THIS CORRECT?: ",DIR("B")="YES",DIR(0)="YA" W ! D ^DIR K DIR
"RTN","IBCEP2B",84,0)
 I Y'=1 S IDACT=-1 G SELIDQ
"RTN","IBCEP2B",85,0)
 S DIPA("PRID")=$P(IBID(IDSEL),U),DIPA("PRIDT")=$P(IBID(IDSEL),U,2),IDACT=2
"RTN","IBCEP2B",86,0)
 ;
"RTN","IBCEP2B",87,0)
SELIDQ Q IDACT
"RTN","IBCEP2B",88,0)
 ;
"RTN","IBCEP2B",89,0)
MORE(DIR) ;
"RTN","IBCEP2B",90,0)
 N DIR,X,Y,DUOUT,DTOUT
"RTN","IBCEP2B",91,0)
 S DIR(0)="YA",DIR("A")="MORE?: ",DIR("B")="NO" W ! D ^DIR K DIR("B")
"RTN","IBCEP2B",92,0)
 Q $S($D(DTOUT)!$D(DUOUT):-1,1:Y)
"RTN","IBCEP2B",93,0)
 ;
"RTN","IBCEP2B",94,0)
FACID(IBINS) ; Enter/edit billing facility ids
"RTN","IBCEP2B",95,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP2B",96,0)
 N IBID,Z,Z0,Y
"RTN","IBCEP2B",97,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",98,0)
 W @IOF
"RTN","IBCEP2B",99,0)
 D GETBPNUM(IBINS)
"RTN","IBCEP2B",100,0)
 K ^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP2B",101,0)
 S ^TMP("IBCE_PRVFAC_MAINT_INS",$J)="F"_U_IBINS_U_"1"
"RTN","IBCEP2B",102,0)
 D EN^VALM("IBCE PRVFAC MAINT")
"RTN","IBCEP2B",103,0)
 K ^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP2B",104,0)
 W @IOF
"RTN","IBCEP2B",105,0)
 D FULL^VALM1
"RTN","IBCEP2B",106,0)
 Q
"RTN","IBCEP2B",107,0)
 ;
"RTN","IBCEP2B",108,0)
GETBPNUM(IBINS) ;
"RTN","IBCEP2B",109,0)
 N Z,Z0,IBID,IBMAIN
"RTN","IBCEP2B",110,0)
 S IBMAIN=$$MAIN(),^TMP($J,"IBBF_ID")=IBMAIN
"RTN","IBCEP2B",111,0)
 S IBID=$$BF^IBCU()
"RTN","IBCEP2B",112,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  S Z0=$G(^IBA(355.92,Z,0)) I $P(Z0,U,6)=IBID S ^TMP($J,"IBBF_ID",$S($P(Z0,U,5)=IBMAIN:0,1:+$P(Z0,U,5)),+$P(Z0,U,4))=$P(Z0,U,7)
"RTN","IBCEP2B",113,0)
 Q
"RTN","IBCEP2B",114,0)
 ;
"RTN","IBCEP2B",115,0)
MAIN() ; Returns ien of default division or the main division for facility if
"RTN","IBCEP2B",116,0)
 ; no IB DEFAULT DIVISION set
"RTN","IBCEP2B",117,0)
 N IBMAIN
"RTN","IBCEP2B",118,0)
 S IBMAIN=$P($G(^IBE(350.9,1,1)),U,25) S:'IBMAIN IBMAIN=+$$PRIM^VASITE()
"RTN","IBCEP2B",119,0)
 Q IBMAIN
"RTN","IBCEP2B",120,0)
 ;
"RTN","IBCEP2B",121,0)
FACNUM(IBIFN,IBCOB) ; Function returns the current division's fac billing
"RTN","IBCEP2B",122,0)
 ; prov id for the COB insurance sequence from file 355.92
"RTN","IBCEP2B",123,0)
 ; IBIFN = ien file 399
"RTN","IBCEP2B",124,0)
 ; IBCOB = # of COB ins seq or if "", current assumed
"RTN","IBCEP2B",125,0)
 N Z,IBDIV,IBFT,X
"RTN","IBCEP2B",126,0)
 S X=""
"RTN","IBCEP2B",127,0)
 S IBDIV=+$P($G(^DGCR(399,IBIFN,0)),U,22)
"RTN","IBCEP2B",128,0)
 S:'IBDIV IBDIV=$$MAIN()
"RTN","IBCEP2B",129,0)
 S IBFT=$$FT^IBCEF(IBIFN),IBFT=$S(IBFT=3:1,1:2)
"RTN","IBCEP2B",130,0)
 S:'$G(IBCOB) IBCOB=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2B",131,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",132,0)
 D GETBPNUM(+$P($G(^DGCR(399,IBIFN,"M")),U,IBCOB))
"RTN","IBCEP2B",133,0)
 I IBDIV=+$G(^TMP($J,"IBBF_ID")) S IBDIV=0
"RTN","IBCEP2B",134,0)
 S X=$S($D(^TMP($J,"IBBF_ID",IBDIV,IBFT)):^(IBFT),1:$G(^TMP($J,"IBBF_ID",0,IBFT)))
"RTN","IBCEP2B",135,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",136,0)
 Q X
"RTN","IBCEP2B",137,0)
 ;
"RTN","IBCEP2B",138,0)
SOP(IBIFN,IBZD) ; Returns X12 current source of pay code for bill ien IBIFN
"RTN","IBCEP2B",139,0)
 ; IBZD = the current ins policy type, if known
"RTN","IBCEP2B",140,0)
 N IBZ
"RTN","IBCEP2B",141,0)
 S IBZ=""
"RTN","IBCEP2B",142,0)
 I $G(IBZD)="" D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZD",,IBIFN)
"RTN","IBCEP2B",143,0)
 S IBZ=$S($G(IBZD)="":"G2","MAMB16"[IBZD:"1C",IBZD="TV"!(IBZD="MC"):"1D",IBZD="CH":"1H",IBZD="BL":$S($$FT^IBCEF(IBIFN)=2:"1B",1:"1A"),1:"G2")
"RTN","IBCEP2B",144,0)
 Q IBZ
"RTN","IBCEP2B",145,0)
 ;
"RTN","IBCEP3")
0^32^B35967297
"RTN","IBCEP3",1,0)
IBCEP3 ;ALB/TMP - EDI UTILITIES for provider ID ;25-SEP-00
"RTN","IBCEP3",2,0)
 ;;2.0;INTEGRATED BILLING;**137,207,232**;21-MAR-94
"RTN","IBCEP3",3,0)
 ;
"RTN","IBCEP3",4,0)
CUNEED(IBIFN,IBSEQ,IBPTYP,IBRET,IBEMC) ; Determine if care unit needed for
"RTN","IBCEP3",5,0)
 ; provider type and insurance company(s) on bill
"RTN","IBCEP3",6,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEP3",7,0)
 ; IBSEQ = specific COB sequence to check or null for check all
"RTN","IBCEP3",8,0)
 ; IBPTYP = the ien of the provider id type in file 355.97 or if null,
"RTN","IBCEP3",9,0)
 ;          the default performing provider ID type for the ins co's.
"RTN","IBCEP3",10,0)
 ; IBRET = flag to return insurance ien (0) or file 355.97 ien (1)
"RTN","IBCEP3",11,0)
 ; IBEMC = no longer used
"RTN","IBCEP3",12,0)
 ;
"RTN","IBCEP3",13,0)
 ; Function returns care unit needed flag (0=not needed, 1=needed) ^
"RTN","IBCEP3",14,0)
 ; AND   if IBSEQ="": primary ins or 355.97 ien if care unit needed ^
"RTN","IBCEP3",15,0)
 ;                    secondary ins or 355.97 ien if care unit needed ^
"RTN","IBCEP3",16,0)
 ;                    tertiary ins or 355.97 ien if care unit needed
"RTN","IBCEP3",17,0)
 ;                    (these would be '^' pieces 2,3,4)
"RTN","IBCEP3",18,0)
 ;       if IBSEQ   : IBSEQ seq ins or 355.97 ien if care unit needed
"RTN","IBCEP3",19,0)
 ;                    (this would be '^' piece 2)
"RTN","IBCEP3",20,0)
 ;
"RTN","IBCEP3",21,0)
 Q:$G(IBEMC) 0
"RTN","IBCEP3",22,0)
 N Q,Z,Z0,Z4,IB,IBCTYP,IBFTYP,IBQ,IBRX,IBPT
"RTN","IBCEP3",23,0)
 S (IBRX,IB)=0
"RTN","IBCEP3",24,0)
 S IBFTYP=$$FT^IBCEF(IBIFN),IBCTYP=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEP3",25,0)
 S IBFTYP=$S(IBFTYP=3:1,1:2) S:IBCTYP'=1 IBCTYP=2
"RTN","IBCEP3",26,0)
 I IBCTYP=2 S IBRX=$$ISRX^IBCEF1(IBIFN) ; Outpatient pharmacy
"RTN","IBCEP3",27,0)
 S IBPT=$G(IBPTYP)
"RTN","IBCEP3",28,0)
 ;
"RTN","IBCEP3",29,0)
 S (Z,IBQ)=0
"RTN","IBCEP3",30,0)
 F  D  Q:IBQ
"RTN","IBCEP3",31,0)
 . I $G(IBSEQ) S Z=IBSEQ,IBQ=1 ; Only once for specific COB sequence
"RTN","IBCEP3",32,0)
 . I '$G(IBSEQ) S Z=Z+1,IBPTYP=IBPT I Z>3 S IBQ=1 Q  ; Up to 3 times - all ins
"RTN","IBCEP3",33,0)
 . S Z0=$$INSSEQ^IBCEP1(IBIFN,Z),Z4=$G(^DIC(36,+Z0,4))
"RTN","IBCEP3",34,0)
 . I '$G(IBPTYP) S IBPTYP=+Z4
"RTN","IBCEP3",35,0)
 . I 'Z0!'IBPTYP S:'Z0 IBQ=1 Q
"RTN","IBCEP3",36,0)
 . S Q=+$$CAREUN(Z0,IBPTYP,IBFTYP,IBCTYP,IBRX)
"RTN","IBCEP3",37,0)
 . I Q S $P(IB,U,$S($G(IBSEQ):Z+1,1:2))=$S($G(IBRET):Q,1:Z0)
"RTN","IBCEP3",38,0)
 ;
"RTN","IBCEP3",39,0)
 I $TR(IB,"^0") S $P(IB,U)=1
"RTN","IBCEP3",40,0)
 Q IB
"RTN","IBCEP3",41,0)
 ;
"RTN","IBCEP3",42,0)
CAREUN(IBINS,IBPTYP,IBFTYP,IBCTYP,IBRX) ; Find ien (file 355.96) for care
"RTN","IBCEP3",43,0)
 ; unit for the combination of ins co, prov type, form type and
"RTN","IBCEP3",44,0)
 ; care type
"RTN","IBCEP3",45,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP3",46,0)
 ; IBPTYP = ien of provider id type (file 355.97)
"RTN","IBCEP3",47,0)
 ; IBFTYP = form type (1=UB92,2=HCFA)
"RTN","IBCEP3",48,0)
 ; IBCTYP = care type (1=inpat,2=outpat)
"RTN","IBCEP3",49,0)
 ; IBRX = 1 if outpat/Rx bill
"RTN","IBCEP3",50,0)
 ;
"RTN","IBCEP3",51,0)
 N IB
"RTN","IBCEP3",52,0)
 S IB=""
"RTN","IBCEP3",53,0)
 ;
"RTN","IBCEP3",54,0)
 I $G(IBRX) D
"RTN","IBCEP3",55,0)
 . N T
"RTN","IBCEP3",56,0)
 . S T=$O(^IBA(355.96,"AD",IBINS,IBFTYP,3,IBPTYP,0))
"RTN","IBCEP3",57,0)
 . I 'T S T=$O(^IBA(355.96,"AD",IBINS,0,3,IBPTYP,0))
"RTN","IBCEP3",58,0)
 . I T S IB=T
"RTN","IBCEP3",59,0)
 ;
"RTN","IBCEP3",60,0)
 I 'IB D  ; Find from most specific to least specific
"RTN","IBCEP3",61,0)
 . I $O(^IBA(355.96,"AD",IBINS,IBFTYP,IBCTYP,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",62,0)
 . I $O(^IBA(355.96,"AD",IBINS,IBFTYP,0,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",63,0)
 . I $O(^IBA(355.96,"AD",IBINS,0,IBCTYP,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",64,0)
 . I $O(^IBA(355.96,"AD",IBINS,0,0,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",65,0)
 ;
"RTN","IBCEP3",66,0)
 Q IB
"RTN","IBCEP3",67,0)
 ;
"RTN","IBCEP3",68,0)
DISP(IBINS,IBTYPE) ; Return the name of the type of care unit needed
"RTN","IBCEP3",69,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP3",70,0)
 ; IBTYPE = 2:PERFORMING PROVIDER ID
"RTN","IBCEP3",71,0)
 I $G(IBTYPE)'=2 Q ""
"RTN","IBCEP3",72,0)
 Q $P($G(^DIC(36,+IBINS,4)),U,9)
"RTN","IBCEP3",73,0)
 ;
"RTN","IBCEP3",74,0)
DELID(IBIFN,IBSEQ,IBX) ; Delete all provider data specific to an ins co
"RTN","IBCEP3",75,0)
 ; represented by the COB sequence IBSEQ for bill IBIFN
"RTN","IBCEP3",76,0)
 ; IBX = 1 if called from care unit prompt - don't delete value
"RTN","IBCEP3",77,0)
 N IBZ,IBDR,X,Y,Z0,Z1
"RTN","IBCEP3",78,0)
 S IBZ=0
"RTN","IBCEP3",79,0)
 Q:'$G(IBSEQ)!($G(IBSEQ)>3)
"RTN","IBCEP3",80,0)
 F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S Z0=$G(^(IBZ,0)),Z1=$G(^(1)) D
"RTN","IBCEP3",81,0)
 . ; Delete provider id's
"RTN","IBCEP3",82,0)
 . I $P(Z0,U,4+IBSEQ)'="" S IBDR(399.0222,IBZ_","_IBIFN_",",(4+IBSEQ/100))="@"
"RTN","IBCEP3",83,0)
 . ; Delete provider id types
"RTN","IBCEP3",84,0)
 . I $P(Z0,U,11+IBSEQ)'="" S IBDR(399.0222,IBZ_","_IBIFN_",",(11+IBSEQ/100))="@"
"RTN","IBCEP3",85,0)
 . I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",86,0)
 Q
"RTN","IBCEP3",87,0)
 ;
"RTN","IBCEP3",88,0)
SETID(IBIFN,IBSEQ) ; Default provider id for bill IBIFN and ins co for COB
"RTN","IBCEP3",89,0)
 ; sequence IBSEQ
"RTN","IBCEP3",90,0)
 N IBZ,X,Y,IBDR,IBT
"RTN","IBCEP3",91,0)
 S IBZ=0
"RTN","IBCEP3",92,0)
 Q  ; No longer used as of patch 232
"RTN","IBCEP3",93,0)
 ;Q:'$G(IBSEQ)!($G(IBSEQ)>3)
"RTN","IBCEP3",94,0)
 ;F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S Z0=$G(^(IBZ,0)),Z1=$G(^(1)) D
"RTN","IBCEP3",95,0)
 ;. ; Update provider id's if no care unit is needed
"RTN","IBCEP3",96,0)
 ;. I $P(Z0,U,2)'="" D
"RTN","IBCEP3",97,0)
 ;.. S Z=$$GETID^IBCEP2(IBIFN,2,$P(Z0,U,2),IBSEQ,.IBT)
"RTN","IBCEP3",98,0)
 ;.. I Z'="",IBT S IBDR(399.0222,IBZ_","_IBIFN_",",(4+IBSEQ/100))=Z,IBDR(399.0222,IBZ_","_IBIFN_",",(11+IBSEQ/100))=+IBT
"RTN","IBCEP3",99,0)
 ;. I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",100,0)
 Q
"RTN","IBCEP3",101,0)
 ;
"RTN","IBCEP3",102,0)
ALLID(IBIFN,IBFLD,IBFUNC) ; If form type or care type (I/O/RX) changes,
"RTN","IBCEP3",103,0)
 ; determine new provider id values if possible and update them
"RTN","IBCEP3",104,0)
 ; this includes primary, secondary, tertiary id's
"RTN","IBCEP3",105,0)
 ; IBIFN = ien of claim (file 399)
"RTN","IBCEP3",106,0)
 ; IBFLD = ien of the field being changed when this call is made
"RTN","IBCEP3",107,0)
 ;         (.19 = form type   .25 = care type)
"RTN","IBCEP3",108,0)
 ; IBFUNC = 1 to add,  2 to delete
"RTN","IBCEP3",109,0)
 N Z,Z0,IBC,IBDR,IBT
"RTN","IBCEP3",110,0)
 S Z=0
"RTN","IBCEP3",111,0)
 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEP3",112,0)
 . F IBC=5:1:7 I $S(IBFUNC=2:$P(Z0,U,IBC)'="",1:1) S IBDR(399.0222,IBC_","_IBIFN_",",(IBC/100))=$S(IBFUNC=2:"@",1:$$GETID^IBCEP2(IBIFN,2,$P(Z0,U,2),IBC-4,.IBT))
"RTN","IBCEP3",113,0)
 I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",114,0)
 Q
"RTN","IBCEP3",115,0)
 ;
"RTN","IBCEP3",116,0)
CUMNT ; Add/edit care unit
"RTN","IBCEP3",117,0)
 N D,DIE,DIC,DIK,DIR,DA,X,Y,IB,IBINS,IBF,IBCT,IBOK,IBPTYP,IBOLD,IBY,IBINS1,IBPTYP1,DUOUT,DTOUT
"RTN","IBCEP3",118,0)
INS F  D  Q:Y'>0
"RTN","IBCEP3",119,0)
 . S DIC="^DIC(36,",DIC(0)="AEMQ" D ^DIC K DIC
"RTN","IBCEP3",120,0)
 . I $D(DUOUT)!$D(DTOUT) S Y=-1 Q
"RTN","IBCEP3",121,0)
 . I Y'>0 S DIR(0)="EA",DIR("A")="Insurance Co is required - press enter to continue: " D ^DIR K DIR Q
"RTN","IBCEP3",122,0)
 . S IBINS=+Y,IBF="A",IBINS1=$P(Y,U,2)
"RTN","IBCEP3",123,0)
 I $O(^IBA(355.96,"D",IBINS,""))'="" D
"RTN","IBCEP3",124,0)
 . W ! S DIR("A")="(A)dd or (E)dit entries?: ",DIR("B")="Add",DIR(0)="SA^A:Add;E:Edit" D ^DIR W ! K DIR
"RTN","IBCEP3",125,0)
 . S IBF=Y
"RTN","IBCEP3",126,0)
 Q:$G(IBF)=""!("AE"'[$G(IBF))
"RTN","IBCEP3",127,0)
 ;
"RTN","IBCEP3",128,0)
 I IBINS>0 D
"RTN","IBCEP3",129,0)
 . I IBF="A" D NEW^IBCEP4A(1)
"RTN","IBCEP3",130,0)
 . I IBF="E" D CHANGE^IBCEP4A(1)
"RTN","IBCEP3",131,0)
 ;
"RTN","IBCEP3",132,0)
 Q
"RTN","IBCEP3",133,0)
 ;
"RTN","IBCEP3",134,0)
DUP(IBDA,IBOLD,IBFUNC) ; Check if the combination of ins co, prov type, care
"RTN","IBCEP3",135,0)
 ; type and form already exists in file 355.96
"RTN","IBCEP3",136,0)
 ; IBDA = ien of entry in file 355.96
"RTN","IBCEP3",137,0)
 ; IBOLD = the 0-node before changes were made - used to reset the fields
"RTN","IBCEP3",138,0)
 N DUP,IB0,DR,X,Y,DIK,DIE,DA
"RTN","IBCEP3",139,0)
 S IB0=$G(^IBA(355.96,IBDA,0)),DUP=0
"RTN","IBCEP3",140,0)
 ;
"RTN","IBCEP3",141,0)
 I $O(^IBA(355.96,"AUNIQ",+$P(IB0,U,3),+IB0,+$P(IB0,U,4),+$P(IB0,U,5),+$P(IB0,U,6),0))'=IBDA!($O(^IBA(355.96,"AUNIQ",+$P(IB0,U,3),+IB0,+$P(IB0,U,4),+$P(IB0,U,5),+$P(IB0,U,6),""),-1)'=IBDA) D
"RTN","IBCEP3",142,0)
 . S DUP=1
"RTN","IBCEP3",143,0)
 . I IBFUNC="E" D
"RTN","IBCEP3",144,0)
 .. S DR=";.01///"_$P(IBOLD,U)_";.03///"_$S($P(IBOLD,U,3)'="":"/"_$P(IBOLD,U,3),1:"@")_";.04///"_$S($P(IBOLD,U,4)'="":"/"_$P(IBOLD,U,4),1:"@")
"RTN","IBCEP3",145,0)
 .. S DR=DR_";05///"_$S($P(IBOLD,U,5)'="":"/"_$P(IBOLD,U,5),1:"@")_";.06///"_$S($P(IBOLD,U,6)'="":"/"_$P(IBOLD,U,6),1:"@")
"RTN","IBCEP3",146,0)
 .. S DA=IBDA,DIE="^IBA(355.96," D ^DIE
"RTN","IBCEP3",147,0)
 . I IBFUNC="A" D
"RTN","IBCEP3",148,0)
 .. S DA=IBDA,DIK="^IBA(355.96," D ^DIK
"RTN","IBCEP3",149,0)
 Q DUP
"RTN","IBCEP3",150,0)
 ;
"RTN","IBCEP3",151,0)
PROFID(IBIFN,IBSEQ,IBID) ; Return id and type of rendering provider id
"RTN","IBCEP3",152,0)
 ; used for insurance co at COB seq IBSEQ for bill ien IBIFN
"RTN","IBCEP3",153,0)
 ; RETURN VALUES:
"RTN","IBCEP3",154,0)
 ; piece 1:
"RTN","IBCEP3",155,0)
 ;  1 = FEDERAL TAX ID
"RTN","IBCEP3",156,0)
 ;  2 = INSURANCE CO SPECIFIC ID
"RTN","IBCEP3",157,0)
 ;  3 = NETWORK ID
"RTN","IBCEP3",158,0)
 ; "" = not a HCFA bill or no id found
"RTN","IBCEP3",159,0)
 ; piece 2:
"RTN","IBCEP3",160,0)
 ;  the id #
"RTN","IBCEP3",161,0)
 N IBTYP,IBXDATA,IBZ
"RTN","IBCEP3",162,0)
 S:'$G(IBSEQ) IBSEQ=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP3",163,0)
 S IBTYP=""_U_$G(IBID)
"RTN","IBCEP3",164,0)
 G:$$FT^IBCEF(IBIFN)'=2 PROFIDQ
"RTN","IBCEP3",165,0)
 I '$D(IBID) D F^IBCEF("N-ALL ATT/RENDERING PROV ID","IBZ",,IBIFN) S IBID=$$NOPUNCT^IBCEF($P(IBZ,U,IBSEQ+1))
"RTN","IBCEP3",166,0)
 G:IBID="" PROFIDQ
"RTN","IBCEP3",167,0)
 S IBTYP=$S($$NOPUNCT^IBCEF(IBID)=$$NOPUNCT^IBCEF($P($G(^IBE(350.9,1,1)),U,5)):1,$$NETWRK(IBIFN,IBID,IBSEQ):3,1:2)
"RTN","IBCEP3",168,0)
 S IBTYP=IBTYP_U_IBID
"RTN","IBCEP3",169,0)
 ;
"RTN","IBCEP3",170,0)
PROFIDQ Q IBTYP
"RTN","IBCEP3",171,0)
 ;
"RTN","IBCEP3",172,0)
NETWRK(IBIFN,IBID,IBSEQ) ; Determine if ID number IBID is the same as the
"RTN","IBCEP3",173,0)
 ; network id for the insurance co
"RTN","IBCEP3",174,0)
 ;  IBIFN = bill ien (file 399)
"RTN","IBCEP3",175,0)
 ;  IBSEQ = COB seq # of bill
"RTN","IBCEP3",176,0)
 ;   Returns 1 if network ID match is found for bill IBIFN, COB seq IBSEQ
"RTN","IBCEP3",177,0)
 N IBINS,IBNET
"RTN","IBCEP3",178,0)
 S IBNET=0
"RTN","IBCEP3",179,0)
 Q IBNET
"RTN","IBCEP3",180,0)
 ; This section needs work *********
"RTN","IBCEP3",181,0)
 I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP3",182,0)
 S IBINS=+$G(^DGCR(399,IBIFN,"I"_IBSEQ))
"RTN","IBCEP3",183,0)
 I $P($G(^IBE(355.97,+$$PPTYP^IBCEP0(IBINS),1)),U,6) D
"RTN","IBCEP3",184,0)
 . ; performing provider id type is a network id type
"RTN","IBCEP3",185,0)
 . I $$NOPUNCT^IBCEF($G(IBID))=$$NOPUNCT^IBCEF($$GETID^IBCEP2(IBIFN,3,$$PERFPRV^IBCEP2A(IBIFN),IBSEQ)) S IBNET=1
"RTN","IBCEP3",186,0)
 Q IBNET
"RTN","IBCEP3",187,0)
 ;
"RTN","IBCEP4A")
0^33^B48679566
"RTN","IBCEP4A",1,0)
IBCEP4A ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP4A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP4A",3,0)
 ;
"RTN","IBCEP4A",4,0)
NEW(IB) ; Add care unit
"RTN","IBCEP4A",5,0)
 ; Assumes IBINS is defined as ins co ien (file 36)
"RTN","IBCEP4A",6,0)
 ; IB = 0 or null if called from list manager, 1 if not
"RTN","IBCEP4A",7,0)
 N DIC,DIR,X,Y,Z,DA,DR,DIE,DO,DD,DLAYGO,IB95,IBADD,IBOK
"RTN","IBCEP4A",8,0)
 I '$G(IB) D FULL^VALM1
"RTN","IBCEP4A",9,0)
 ;
"RTN","IBCEP4A",10,0)
 ; Add an entry - either new care unit/ins co or a combination for
"RTN","IBCEP4A",11,0)
 ;  existing care unit/ins co
"RTN","IBCEP4A",12,0)
 S DIC("A")="SELECT CARE UNIT FOR THE INSURANCE CO: ",DIC="^IBA(355.95,",DIC("S")="I $P(^(0),U,3)=+$G(IBINS)",DIC(0)="AELMQ",DIC("DR")=".03////"_+$G(IBINS)_";.02" D ^DIC
"RTN","IBCEP4A",13,0)
 G:Y'>0 NEWQ
"RTN","IBCEP4A",14,0)
 S IB95=3,IB95("IBCU")=+Y
"RTN","IBCEP4A",15,0)
 D INSASS(IBINS,.IB95)
"RTN","IBCEP4A",16,0)
 I '$G(IB) D BLD^IBCEP4
"RTN","IBCEP4A",17,0)
NEWQ I '$G(IB) S VALMBCK="R"
"RTN","IBCEP4A",18,0)
 Q
"RTN","IBCEP4A",19,0)
 ;
"RTN","IBCEP4A",20,0)
CHANGE(IB) ; Edit a care unit name or combination for ins co IBINS
"RTN","IBCEP4A",21,0)
 ; Assumes IBINS is defined as ins co ien (file 36)
"RTN","IBCEP4A",22,0)
 ; IB = 0 or null if called from list manager, 1 if not
"RTN","IBCEP4A",23,0)
 N DIC,DIK,DIR,X,Y,Z,DA,DR,DIE,DO,DD,DLAYGO,IB95,IBOK,IBZ,IB0,IBEDIT,IBCK,IBDA,IBCHG,IBDELETE,Z100,DTOUT,DUOUT
"RTN","IBCEP4A",24,0)
 I '$G(IB) D FULL^VALM1
"RTN","IBCEP4A",25,0)
 S DIC("A")="CARE UNIT NAME: ",DIC(0)="AEMQ",DIC("S")="I $P(^(0),U,3)=+$G(IBINS)",DIC="^IBA(355.95," W ! D ^DIC K DIC
"RTN","IBCEP4A",26,0)
 I Y'>0 G CHGQ
"RTN","IBCEP4A",27,0)
 S IB95("IBCU")=+Y,IBDELETE=0,IBDELETE(0)=$G(^IBA(355.95,0)),IBDELETE(1)=$G(^(1))
"RTN","IBCEP4A",28,0)
 ; Edit fields outside of FM to assure uniqueness of combos is maintained
"RTN","IBCEP4A",29,0)
 W ! S DIR("A")="CARE UNIT NAME: ",DIR("B")=$P($G(^IBA(355.95,+IB95("IBCU"),0)),U),DIR(0)="355.95,.01AO",DIR("S")="I $P(^(0),U,3)=IBINS" D ^DIR K DIR
"RTN","IBCEP4A",30,0)
 I $D(DTOUT)!$D(DUOUT) G CHGQ
"RTN","IBCEP4A",31,0)
 ;
"RTN","IBCEP4A",32,0)
 ; Care unit name was deleted
"RTN","IBCEP4A",33,0)
 I X="@" D  G CHGQ
"RTN","IBCEP4A",34,0)
 . S DIR("A",1)="THIS WILL DELETE THE CARE UNIT NAME AND ALL ITS COMBINATIONS",DIR("A")="ARE YOU SURE THIS IS WHAT YOU WANT TO DO?: ",DIR(0)="YA",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEP4A",35,0)
 . I Y'=1 S IB95("IBCU")="" Q  ; Changed their mind - don't delete
"RTN","IBCEP4A",36,0)
 . S Z=0 F  S Z=$O(^IBA(355.96,"B",IB95("IBCU"),Z)) Q:'Z  S DIK="^IBA(355.96,",DA=Z D ^DIK
"RTN","IBCEP4A",37,0)
 . S DA=IB95("IBCU"),DIK="^IBA(355.95," D ^DIK
"RTN","IBCEP4A",38,0)
 . W ! S DIR(0)="EA",DIR("A",1)="CARE UNIT AND ALL ITS COMBINATIONS WERE DELETED",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR D BLD^IBCEP4
"RTN","IBCEP4A",39,0)
 ;
"RTN","IBCEP4A",40,0)
 I $P($G(^IBA(355.95,IB95("IBCU"),0)),U)'=Y S DIE="^IBA(355.95,",DR=".01///"_Y,DA=IB95("IBCU") D ^DIE ; File the name change
"RTN","IBCEP4A",41,0)
 S DR=".02",DIE="^IBA(355.95,",DA=IB95("IBCU") D ^DIE
"RTN","IBCEP4A",42,0)
 I $D(Y) G CHGQ
"RTN","IBCEP4A",43,0)
 ;
"RTN","IBCEP4A",44,0)
 I $O(^IBA(355.96,"ACARE",IB95("IBCU"),""))="" S IB95=3 D INSASS(IBINS,.IB95) G CHGQ
"RTN","IBCEP4A",45,0)
 ; only 1 combination found for ins/care unit
"RTN","IBCEP4A",46,0)
 I $O(^IBA(355.96,"ACARE",IB95("IBCU"),""),-1)=$O(^IBA(355.96,"ACARE",IB95("IBCU"),0)) D
"RTN","IBCEP4A",47,0)
 . S IBDA=$O(^IBA(355.96,"ACARE",IB95("IBCU"),0))
"RTN","IBCEP4A",48,0)
 ;
"RTN","IBCEP4A",49,0)
 ; Choose the combination to edit - more than 1 exists
"RTN","IBCEP4A",50,0)
 E  D
"RTN","IBCEP4A",51,0)
 . W !,"SELECT ONE OF THE FOLLOWING CARE UNIT COMBINATIONS:"
"RTN","IBCEP4A",52,0)
 . S DIC="^IBA(355.96,",DIC(0)="EMQ",DIC("S")="I $D(^IBA(355.96,""ACARE"","_IB95("IBCU")_",Y))",X=IBINS D ^DIC K DIC S IBDA=+Y
"RTN","IBCEP4A",53,0)
 ;
"RTN","IBCEP4A",54,0)
 I IBDA>0 D
"RTN","IBCEP4A",55,0)
 . N IBDA0,Q,Q0
"RTN","IBCEP4A",56,0)
 . S IBDA0=$G(^IBA(355.96,IBDA,0))
"RTN","IBCEP4A",57,0)
 . Q:IBDA0=""
"RTN","IBCEP4A",58,0)
 . W !!,"*** CARE UNIT COMBINATION FOR: ",$P($G(^IBA(355.95,+IB95("IBCU"),0)),U)," ***"
"RTN","IBCEP4A",59,0)
 . D DISP^IBCEP4("Q",IBINS,$P(IBDA0,U,6),$P(IBDA0,U,4),$P(IBDA0,U,5),1,.Q0)
"RTN","IBCEP4A",60,0)
 . S Z=0 F  S Z=$O(Q(Z)) Q:'Z  W !,Q(Z)
"RTN","IBCEP4A",61,0)
 . I $P(IBDA0,U,7) W !,"EXP DATE: ",$$FMTE^XLFDT($P(IBDA0,U,7),"2D")
"RTN","IBCEP4A",62,0)
 . W !,"CARE UNIT: ",$P($G(^IBA(355.95,+IBDA0,0)),U),!
"RTN","IBCEP4A",63,0)
 . W ! S DIR(0)="SA^E:EDIT;D:DELETE",DIR("B")="EDIT",DIR("A")="EDIT OR DELETE THIS CARE UNIT COMBINATION?: " D ^DIR K DIR
"RTN","IBCEP4A",64,0)
 . I $D(DTOUT)!$D(DUOUT) Q
"RTN","IBCEP4A",65,0)
 . I Y="D" D  Q
"RTN","IBCEP4A",66,0)
 .. S DIR(0)="YA",DIR("A")="ARE YOU SURE YOU WANT TO DELETE THIS CARE UNIT COMBINATION?: ",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEP4A",67,0)
 .. I Y=1 S DIK="^IBA(355.96,",DA=IBDA,IBCHG=1 D ^DIK
"RTN","IBCEP4A",68,0)
 . S (IBCK,IBCHG)=0,(IBEDIT,IBOK)=1
"RTN","IBCEP4A",69,0)
 . F  Q:'IBEDIT  S IBEDIT=0,IB0=$G(^IBA(355.96,+IBDA,0)) K IBZ F Z=.01,.03,.06,.04,.05 D  Q:'IBOK!IBEDIT
"RTN","IBCEP4A",70,0)
 .. S Z100=Z*100
"RTN","IBCEP4A",71,0)
 .. I Z100=1 W !,"CARE UNIT: ",$P($G(^IBA(355.95,IB95("IBCU"),0)),U) S IBZ(.01)=$P(IB0,U) Q
"RTN","IBCEP4A",72,0)
 .. I Z100=3 W !,"INSURANCE COMPANY: ",$$EXPAND^IBTRE(355.96,.03,$P(IB0,U,3)) S IBZ(.03)=$P(IB0,U) Q
"RTN","IBCEP4A",73,0)
 .. I Z100=5 S IBCK=1
"RTN","IBCEP4A",74,0)
 .. S IBZ(Z)=$$EDIT(Z,IB0,+IBDA,IBCK),IBCK=0
"RTN","IBCEP4A",75,0)
 .. I '$P(IBZ(Z),U,2) D  Q
"RTN","IBCEP4A",76,0)
 ... I $P(IB0,U,Z100)'=IBZ(Z) S IBCHG=1
"RTN","IBCEP4A",77,0)
 ... S $P(IB0,U,Z100)=IBZ(Z)
"RTN","IBCEP4A",78,0)
 .. S (IBOK,IBCHG)=0
"RTN","IBCEP4A",79,0)
 .. I $P(IBZ(Z),U,2)=2 D
"RTN","IBCEP4A",80,0)
 ... S DIR(0)="YA",DIR("A",1)="This entry already exists",DIR("A")="Do you want to re-edit?: " W ! D ^DIR K DIR W !
"RTN","IBCEP4A",81,0)
 ... I Y=1 S (IBOK,IBEDIT)=1
"RTN","IBCEP4A",82,0)
 . I IBOK Q:'IBCHG  S DIE="^IBA(355.96,",DR=".03////"_IBZ(.03)_";.04////"_IBZ(.04)_";.05////"_IBZ(.05)_";.06////"_IBZ(.06)_";.07",DA=+IBDA D ^DIE,BLD^IBCEP4 Q
"RTN","IBCEP4A",83,0)
 ;
"RTN","IBCEP4A",84,0)
 I '$G(IB) D BLD^IBCEP4
"RTN","IBCEP4A",85,0)
CHGQ I '$G(IB) S VALMBCK="R"
"RTN","IBCEP4A",86,0)
 Q
"RTN","IBCEP4A",87,0)
 ;
"RTN","IBCEP4A",88,0)
INSASS(IBINSZ,IB95) ; Assign care unit to or delete from an ins co
"RTN","IBCEP4A",89,0)
 ; IBINSZ = ien of ins co (file 36)
"RTN","IBCEP4A",90,0)
 ; IB95 = flag  ("IBCU")=care unit
"RTN","IBCEP4A",91,0)
 ;     can have subscripts to send in pre-entered data
"RTN","IBCEP4A",92,0)
 N DIR,DIC,DA,DR,X,Y,Z,IBFT,IBCT,IBPTYP,IBCU,IBCHG,IBINS,IBDA,IBPXDT,IBDICS
"RTN","IBCEP4A",93,0)
 S IBINS=IBINSZ
"RTN","IBCEP4A",94,0)
 S IBCHG=0,IBCU=$G(IB95("IBCU"))
"RTN","IBCEP4A",95,0)
 D FULL^VALM1
"RTN","IBCEP4A",96,0)
 I '$G(IBINSZ) K IB95 G INSQ
"RTN","IBCEP4A",97,0)
 W !
"RTN","IBCEP4A",98,0)
 F Z=.06,.04,.05,.07,.03 D  G:Z="" INSQ
"RTN","IBCEP4A",99,0)
 . ;
"RTN","IBCEP4A",100,0)
 . I $S(Z=.04:'$D(IB95("IBFT")),Z=.05:'$D(IB95("IBCT")),Z=.06:'$D(IB95("IBPTYP")),Z=.03:'$D(IB95("IBCU")),1:1) D
"RTN","IBCEP4A",101,0)
 .. N DA
"RTN","IBCEP4A",102,0)
 .. K IBDICS
"RTN","IBCEP4A",103,0)
 .. I Z=.04 D
"RTN","IBCEP4A",104,0)
 ... I $P($G(^IBE(355.97,+$G(IB95("IBPTYP")),0)),U,3)="1A" S IBDICS="I Y'=1 K X",DIR("B")="UB92",DIR("?")="ONLY UB92 IS VALID FOR A BLUE CROSS ID"
"RTN","IBCEP4A",105,0)
 .. S DIR(0)="355.96,"_Z_$S($G(IBDICS)="":"",1:"^^"_IBDICS) D ^DIR K DIR
"RTN","IBCEP4A",106,0)
 . I $D(DTOUT)!$D(DUOUT) S VALMBCK="R",Z="" K:$G(IB95)=2 IB95 Q
"RTN","IBCEP4A",107,0)
 . ;
"RTN","IBCEP4A",108,0)
 . I Z=.04 S IBFT=$S($G(IB95("IBFT"))="":+Y,1:IB95("IBFT")) S IB95("IBFT")=IBFT Q
"RTN","IBCEP4A",109,0)
 . ;
"RTN","IBCEP4A",110,0)
 . I Z=.05 S IBCT=$S($G(IB95("IBCT"))="":+Y,1:IB95("IBCT")) S IB95("IBCT")=IBCT Q
"RTN","IBCEP4A",111,0)
 . ;
"RTN","IBCEP4A",112,0)
 . I Z=.06 S IBPTYP=$S($G(IB95("IBPTYP"))="":+Y,1:IB95("IBPTYP")) S IB95("IBPTYP")=IBPTYP Q
"RTN","IBCEP4A",113,0)
 . ;
"RTN","IBCEP4A",114,0)
 . I Z=.07 S IBPXDT=$S('$G(IB95("IBEXPDT")):+Y,1:IB95("IBEXPDT")) S IB95("IBEXPDT")=IBPXDT Q
"RTN","IBCEP4A",115,0)
 . ;
"RTN","IBCEP4A",116,0)
 . I Z=.03,$G(IB95)=3,$G(IB95("IBCU"))'="" D  Q:Z=""
"RTN","IBCEP4A",117,0)
 .. N Q  ; Assign from add care type
"RTN","IBCEP4A",118,0)
 .. S IBCT=0
"RTN","IBCEP4A",119,0)
 .. W !,"CARE UNIT: "_$$EXPAND^IBTRE(355.96,.01,IB95("IBCU"))
"RTN","IBCEP4A",120,0)
 .. S IB95("IBINS")=+IBINSZ
"RTN","IBCEP4A",121,0)
 .. I $D(^IBA(355.96,"AUNIQ",IBINSZ,IB95("IBCU"),IB95("IBFT"),IB95("IBCT"),IB95("IBPTYP"))) D  Q
"RTN","IBCEP4A",122,0)
 ... S DIR(0)="EA",DIR("A",1)="This combination already exists - NOT ADDED",DIR("A")="Press ENTER to continue" W ! D ^DIR K DIR W !
"RTN","IBCEP4A",123,0)
 .. S IBCT=1 S Y=$$ADDCU(IBINSZ,IB95("IBCU"),IB95("IBFT"),IB95("IBCT"),IB95("IBPTYP"))
"RTN","IBCEP4A",124,0)
 .. I Y<0 W ! S DIR("A",1)="  >> Care Unit NOT completely filed",DIR("A")="PRESS ENTER TO CONTINUE ",DIR(0)="EA" D ^DIR K DIR Q
"RTN","IBCEP4A",125,0)
 .. W ! S DIR(0)="EA",DIR("A",1)="  >> CARE UNIT COMBINATION FILED FOR THE INSURANCE CO",IBCT=1,IBCHG=1,DIR("A")="PRESS ENTER TO CONTINUE ",DIR(0)="EA" D ^DIR K DIR
"RTN","IBCEP4A",126,0)
 I $G(IBCHG) D BLD^IBCEP4
"RTN","IBCEP4A",127,0)
INSQ S VALMBCK="R"
"RTN","IBCEP4A",128,0)
 Q
"RTN","IBCEP4A",129,0)
 ;
"RTN","IBCEP4A",130,0)
EDIT(IBFLD,IB0,IBIEN,IBCK1) ; Allow addition/edit of fields in file 355.96
"RTN","IBCEP4A",131,0)
 ; without direct Fileman call so uniqueness can be checked
"RTN","IBCEP4A",132,0)
 ; IBFLD = field # in file 355.96
"RTN","IBCEP4A",133,0)
 ; IB0 = current 0-node of data in the entry in file 355.96
"RTN","IBCEP4A",134,0)
 ; IBIEN = ien of entry being edited in file 355.96
"RTN","IBCEP4A",135,0)
 ; IBCK1 = flag ... if 1, checks for uniqueness after field changed
"RTN","IBCEP4A",136,0)
 ;
"RTN","IBCEP4A",137,0)
 ; FUNCTION RETURNS: value of field if field is OK, second piece is null
"RTN","IBCEP4A",138,0)
 ;                   If not good, 2nd piece = 1 : no data or ^ entered
"RTN","IBCEP4A",139,0)
 ;                                          = 2 : record not unique
"RTN","IBCEP4A",140,0)
 N DIR,DA,Y,X,IBNEW,IBINS,IBVAL
"RTN","IBCEP4A",141,0)
 S IBINS=+IB0,IBNEW="",IBVAL=$$EXPAND^IBTRE(355.96,IBFLD,$P(IB0,U,(IBFLD*100)))
"RTN","IBCEP4A",142,0)
 S DIR(0)="355.96,"_IBFLD
"RTN","IBCEP4A",143,0)
 S:IBVAL'="" DIR("B")=IBVAL
"RTN","IBCEP4A",144,0)
 D ^DIR K DIR
"RTN","IBCEP4A",145,0)
 I Y=""!$D(DTOUT)!$D(DUOUT) S IBNEW="^1" G EDITQ
"RTN","IBCEP4A",146,0)
 S IBNEW=$P(Y,U)
"RTN","IBCEP4A",147,0)
 I $G(IBCK1) D
"RTN","IBCEP4A",148,0)
 . N X1,X2,X3,X4,X5
"RTN","IBCEP4A",149,0)
 . S X1=$S(IBFLD'=.03:IBINS,1:IBNEW),X2=$S(IBFLD'=.01:$P(IB0,U),1:IBNEW),X3=$S(IBFLD'=.04:$P(IB0,U,4),1:IBNEW),X4=$S(IBFLD'=.05:$P(IB0,U,5),1:IBNEW),X5=$S(IBFLD'=.06:$P(IB0,U,6),1:IBNEW)
"RTN","IBCEP4A",150,0)
 . I $S(X1=""!(X2="")!(X3="")!(X4="")!(X5=""):1,$O(^IBA(355.96,"AUNIQ",X1,X2,X3,X4,X5,0)):$O(^(0))'=IBIEN,1:0) S IBNEW=IBNEW_"^2"
"RTN","IBCEP4A",151,0)
 ;
"RTN","IBCEP4A",152,0)
EDITQ Q IBNEW
"RTN","IBCEP4A",153,0)
 ;
"RTN","IBCEP4A",154,0)
ADDCU(IBINSZ,IBCU,IBFT,IBCT,IBPTYP) ;  Add a new care unit record to file 355.96
"RTN","IBCEP4A",155,0)
 ; Same parameter definitions as EDIT
"RTN","IBCEP4A",156,0)
 N DIC,DA,X,Y,DLAYGO
"RTN","IBCEP4A",157,0)
 S DIC(0)="L",DLAYGO=355.96,DIC="^IBA(355.96,",DIC("DR")=".03////"_IBINSZ_";.04////"_IBFT_";.05////"_IBCT_";.06////"_IBPTYP,X=IBCU
"RTN","IBCEP4A",158,0)
 D FILE^DICN
"RTN","IBCEP4A",159,0)
 Q Y
"RTN","IBCEP4A",160,0)
 ;
"RTN","IBCEP5")
0^19^B30947898
"RTN","IBCEP5",1,0)
IBCEP5 ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP5",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP5",3,0)
 ;
"RTN","IBCEP5",4,0)
EN ; -- main entry point for IBCE PRV MAINT
"RTN","IBCEP5",5,0)
 N IBPRV,IBINS
"RTN","IBCEP5",6,0)
EN1 ; Entrypoint for non-VA provider ID maintenance hook
"RTN","IBCEP5",7,0)
 N IBSLEV,DIR,Y,X
"RTN","IBCEP5",8,0)
 D FULL^VALM1
"RTN","IBCEP5",9,0)
 S DIR(0)="SA^1:PROVIDER'S OWN IDS;2:PROVIDER IDS FURNISHED BY AN INSURANCE COMPANY",DIR("A")="SELECT SOURCE OF ID: ",DIR("B")=$P($P(DIR(0),":",2),";")
"RTN","IBCEP5",10,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP5",11,0)
 I Y'>0 Q
"RTN","IBCEP5",12,0)
 S IBSLEV=+Y
"RTN","IBCEP5",13,0)
 D EN^VALM("IBCE PRVPRV MAINT")
"RTN","IBCEP5",14,0)
 Q
"RTN","IBCEP5",15,0)
 ;
"RTN","IBCEP5",16,0)
HDR ; -- header code
"RTN","IBCEP5",17,0)
 N IBC,Z
"RTN","IBCEP5",18,0)
 K VALMHDR
"RTN","IBCEP5",19,0)
 S IBC=1
"RTN","IBCEP5",20,0)
 S Z="** "_$S($G(IBSLEV)=1:"Provider's Own IDs (No Specific Insurance Co)",1:"Provider IDs Furnished by Insurance Co")_" **"
"RTN","IBCEP5",21,0)
 S VALMHDR(IBC)=$J("",80-$L(Z)\2)_Z,IBC=IBC+1
"RTN","IBCEP5",22,0)
 I $G(IBPRV) S VALMHDR(IBC)="PROVIDER    : "_$$EXPAND^IBTRE(355.9,.01,IBPRV)_$S(IBPRV["VA(200":" (VA PROVIDER)",1:" (NON-VA PROVIDER)"),IBC=IBC+1
"RTN","IBCEP5",23,0)
 I $G(IBINS) S VALMHDR(IBC)="INSURANCE CO: "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEP5",24,0)
 Q
"RTN","IBCEP5",25,0)
 ;
"RTN","IBCEP5",26,0)
INIT ; -- init variables and list array
"RTN","IBCEP5",27,0)
 N IBFILE,DIR,DIC,Y,X,DTOUT,DUOUT
"RTN","IBCEP5",28,0)
 I $G(IBPRV) S IBFILE="IBA(355.93,",IBPRV=+IBPRV_";"_IBFILE
"RTN","IBCEP5",29,0)
 I '$G(IBPRV) D  G:$G(VALMQUIT) INITQ
"RTN","IBCEP5",30,0)
 . S DIR(0)="SAO^V:VA PROVIDER;N:NON-VA PROVIDER",DIR("A")="(V)A or (N)on-VA provider: ",DIR("B")="V"
"RTN","IBCEP5",31,0)
 . D ^DIR K DIR
"RTN","IBCEP5",32,0)
 . I "NV"'[Y!(Y="") S VALMQUIT=1 Q
"RTN","IBCEP5",33,0)
 . S IBFILE=$S(Y="V":"VA(200,",1:"IBA(355.93,")
"RTN","IBCEP5",34,0)
 . S DIC=U_IBFILE,DIC(0)="AEMQ"_$S(IBFILE["355.93":"L",1:"")
"RTN","IBCEP5",35,0)
 . S DIC("A")="Select "_$S(IBFILE["355.93":"NON-",1:"")_"V.A. PROVIDER NAME: "
"RTN","IBCEP5",36,0)
 . S:IBFILE["355.93" DIC("DR")=".02////2;.03;.04"
"RTN","IBCEP5",37,0)
 . F  D  I $G(IBPRV)!$G(VALMQUIT) K DIC Q
"RTN","IBCEP5",38,0)
 .. D ^DIC
"RTN","IBCEP5",39,0)
 .. I $D(DTOUT)!$D(DUOUT) S VALMQUIT=1 Q
"RTN","IBCEP5",40,0)
 .. I Y'>0 W !,*7,"This is a required response. Enter '^' to exit" Q
"RTN","IBCEP5",41,0)
 .. S IBPRV=+Y_";"_IBFILE
"RTN","IBCEP5",42,0)
 I $G(IBSLEV)=2 D
"RTN","IBCEP5",43,0)
 . S DIR(0)="PA^DIC(36,:AEMQ",DIR("A")="Select INSURANCE CO: ",DIR("?",1)="Select an INSURANCE CO to display its provider ID's"
"RTN","IBCEP5",44,0)
 . D ^DIR K DIR
"RTN","IBCEP5",45,0)
 . S IBINS=$S(Y>0:+Y,1:"NO")
"RTN","IBCEP5",46,0)
 E  D
"RTN","IBCEP5",47,0)
 . S IBINS="NO"
"RTN","IBCEP5",48,0)
 D BLD
"RTN","IBCEP5",49,0)
INITQ Q
"RTN","IBCEP5",50,0)
 ;
"RTN","IBCEP5",51,0)
BLD ;  Build initial display
"RTN","IBCEP5",52,0)
 ; Assumes IBPRV = the variable ptr for prov id file (355.9)
"RTN","IBCEP5",53,0)
 ;         IBINS = the ien of the ins co or if null, ALL is assumed
"RTN","IBCEP5",54,0)
 ;         IBSLEV = 1 to display only provider default ids
"RTN","IBCEP5",55,0)
 ;                = 2 to display all provider/insurance co ids
"RTN","IBCEP5",56,0)
 N IB,IBLCT,IBCT,CT,PT,CU,INS,FT,Z,IBENT,IB1
"RTN","IBCEP5",57,0)
 K ^TMP("IBPRV_",$J),^TMP("IBPRV_SORT",$J)
"RTN","IBCEP5",58,0)
 K Z0
"RTN","IBCEP5",59,0)
 S (IBENT,IBCT,IBLCT)=0,INS="",IB1=1
"RTN","IBCEP5",60,0)
 F  S INS=$S($G(IBINS):IBINS,IBSLEV=1:"*ALL*",1:$O(^IBA(355.9,"AUNIQ",IBPRV,INS))) Q:$S(INS="":1,$G(IBINS)!(IBSLEV=1):$D(CU),1:0)  S CU="",IB1=0 F  S CU=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU)) Q:CU=""  D
"RTN","IBCEP5",61,0)
 . S FT="" F  S FT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT)) Q:FT=""  S CT="" F  S CT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT)) Q:CT=""  S PT=0 F  S PT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT,PT)) Q:'PT  D
"RTN","IBCEP5",62,0)
 .. S Z=0 F  S Z=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT,PT,Z)) Q:'Z  S IB=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP5",63,0)
 ... S ^TMP("IBPRV_SORT",$J,$S(INS:$P($G(^DIC(36,+INS,0)),U)_" ",1:" ALL"),PT,FT,CT,CU,Z)=$P(IB,U,7)
"RTN","IBCEP5",64,0)
 ;
"RTN","IBCEP5",65,0)
 I IBSLEV=1,IBPRV["IBA(355.93",$P($G(^IBA(355.93,+IBPRV,0)),U,12)'="" S ^TMP("IBPRV_SORT",$J," ALL",+$$STLIC^IBCEP8(),0,0,"*N/A*",0)=$P(^IBA(355.93,+IBPRV,0),U,12)
"RTN","IBCEP5",66,0)
 S INS="" F  S INS=$O(^TMP("IBPRV_SORT",$J,INS)) Q:INS=""  D
"RTN","IBCEP5",67,0)
 . I '$G(IBINS) D:IBLCT SET^VALM10(IBLCT+1," ",IBCT) S IBLCT=$S(IBLCT:IBLCT+2,1:1) D SET^VALM10(IBLCT,"INSURANCE CO: "_$S($E(INS)=" ":"ALL INSURANCE",1:INS),$S(IBCT:IBCT,1:1))
"RTN","IBCEP5",68,0)
 . S PT=""
"RTN","IBCEP5",69,0)
 . F  S PT=$O(^TMP("IBPRV_SORT",$J,INS,PT)) Q:PT=""  S FT="" F  S FT=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT)) Q:FT=""  S CT="" F  S CT=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT)) Q:CT=""  D
"RTN","IBCEP5",70,0)
 .. S CU="" F  S CU=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT,CU)) Q:CU=""  S Z="" F  S Z=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT,CU,Z)) Q:Z=""  S IB=$G(^(Z)) D
"RTN","IBCEP5",71,0)
 ... S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP5",72,0)
 ... S Z0=$E(IBCT_"     ",1,4)_" "_$E($$EXPAND^IBTRE(355.9,.06,PT)_$S(PT=$$STLIC^IBCEP8():"("_$P($G(^DIC(5,+$P($G(^IBA(355.93,+IBPRV,0)),U,7),0)),U,2)_")",1:"")_$J("",20),1,20)_"  "_$S(FT=1:"UB-92",FT=2:"HCFA ",1:"BOTH ")
"RTN","IBCEP5",73,0)
 ... S Z0=Z0_"  "_$E($S(CT=3:"RX",CT=1:"INPT",CT=2:"OUTPT",1:"INPT/OUTPT")_$J("",11),1,11)
"RTN","IBCEP5",74,0)
 ... S Z0=Z0_"  "_$E($S(CU'="*N/A*":$P($G(^IBA(355.95,CU,0)),U),1:"")_$J("",15),1,15)
"RTN","IBCEP5",75,0)
 ... D SET^VALM10(IBLCT,Z0_" "_IB,IBCT)
"RTN","IBCEP5",76,0)
 ... S ^TMP("IBPRV_",$J,"ZIDX",IBCT)=$S(Z'=0:Z,1:"LIC^"_IBPRV)
"RTN","IBCEP5",77,0)
 I IBSLEV=1,IBPRV["VA(200" D
"RTN","IBCEP5",78,0)
 . N IBP
"RTN","IBCEP5",79,0)
 . S IBP=+IBPRV
"RTN","IBCEP5",80,0)
 . Q:'$$GETLIC^IBCEP5D(.IBP)
"RTN","IBCEP5",81,0)
 . I IBCT S IBLCT=IBLCT+1 D SET^VALM10(IBLCT," ",IBCT)
"RTN","IBCEP5",82,0)
 . S Z=0 F  S Z=$O(IBP(Z)) Q:'Z  D
"RTN","IBCEP5",83,0)
 .. S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP5",84,0)
 .. D SET^VALM10(IBLCT,$E(IBCT_"     ",1,4)_$E($P($G(^DIC(5,+Z,0)),U,2)_" STATE LICENSE #"_$J("",20),1,20)_$J("",39)_IBP(Z),IBCT)
"RTN","IBCEP5",85,0)
 .. S ^TMP("IBPRV_",$J,"ZIDX",IBCT)="LIC^"_+IBPRV
"RTN","IBCEP5",86,0)
 K ^TMP("IBPRV_SORT",$J)
"RTN","IBCEP5",87,0)
 ;
"RTN","IBCEP5",88,0)
 I IBLCT=0 D  G BLDQ ; No entries for ins co selected
"RTN","IBCEP5",89,0)
 . D SET^VALM10(1," ")
"RTN","IBCEP5",90,0)
 . D SET^VALM10(2,"  No ID's found for provider "_$S('$G(IBINS):"",1:"and selected insurance co"))
"RTN","IBCEP5",91,0)
 . S IBLCT=2
"RTN","IBCEP5",92,0)
 ;
"RTN","IBCEP5",93,0)
BLDQ K VALMCNT,VALMBG
"RTN","IBCEP5",94,0)
 S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP5",95,0)
 Q
"RTN","IBCEP5",96,0)
 ;
"RTN","IBCEP5",97,0)
HELP ; -- help code
"RTN","IBCEP5",98,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCEP5",99,0)
 Q
"RTN","IBCEP5",100,0)
 ;
"RTN","IBCEP5",101,0)
EXIT ; -- exit code
"RTN","IBCEP5",102,0)
 K IBPRV
"RTN","IBCEP5",103,0)
 D CLEAN^VALM10
"RTN","IBCEP5",104,0)
 K ^TMP("IBPRV_",$J),^TMP("IBPRV_SORT",$J),IBINS,IBALL
"RTN","IBCEP5",105,0)
 Q
"RTN","IBCEP5",106,0)
 ;
"RTN","IBCEP5",107,0)
EXPND ; -- expand code
"RTN","IBCEP5",108,0)
 Q
"RTN","IBCEP5",109,0)
 ;
"RTN","IBCEP5",110,0)
SEL(IBDA,MANY) ; Select from provider id list
"RTN","IBCEP5",111,0)
 ; IBDA is passed by reference and IBDA(1) returned containing
"RTN","IBCEP5",112,0)
 ;  ien's of the provider id records selected (file 355.9).
"RTN","IBCEP5",113,0)
 ; If > 1 entry can be selected, MANY is set to 1
"RTN","IBCEP5",114,0)
 N Z
"RTN","IBCEP5",115,0)
 S IBDA=0
"RTN","IBCEP5",116,0)
 D EN^VALM2($G(XQORNOD(0)),$S($G(MANY):"",1:"S"))
"RTN","IBCEP5",117,0)
 S Z=0 F  S Z=$O(VALMY(Z)) Q:'Z  S IBDA=IBDA+1,IBDA(IBDA)=$G(^TMP("IBPRV_",$J,"ZIDX",Z))
"RTN","IBCEP5",118,0)
 Q
"RTN","IBCEP5",119,0)
 ;
"RTN","IBCEP5A")
0^20^B17570421
"RTN","IBCEP5A",1,0)
IBCEP5A ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP5A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP5A",3,0)
 ;
"RTN","IBCEP5A",4,0)
NEW(IBPRV,IBINS) ; Add new prov id
"RTN","IBCEP5A",5,0)
 D FULL^VALM1
"RTN","IBCEP5A",6,0)
 N DIC,DIR,X,Y,DA,DO,DD,DLAYGO,IBQ,IBIEN,IBPRV0,DTOUT,DUOUT
"RTN","IBCEP5A",7,0)
 S IBQ=0,IBPRV0=$S(IBPRV'["355.93":"",1:$G(^IBA(355.93,+IBPRV,0)))
"RTN","IBCEP5A",8,0)
 S DIR(0)="PA^355.97:AEMQ",DIR("A")="Select Provider ID Type: ",DIR("?")="Enter the type of provider that the provider id will apply to"
"RTN","IBCEP5A",9,0)
 S DIR("S")=$S($G(IBINS):"I ""04""[+$P($G(^(0)),U,2)",1:"I +$P($G(^(1)),U,7)&'$G(^(1))&$S($P(IBPRV0,U,2)'=1:1,1:$P(^(0),U,3)'=""SY"")")
"RTN","IBCEP5A",10,0)
 D ^DIR K DIR
"RTN","IBCEP5A",11,0)
 I $D(DTOUT)!$D(DUOUT) S IBQ=1 G NEWQ
"RTN","IBCEP5A",12,0)
 I $P($G(^IBE(355.97,+Y,1)),U,3),IBPRV["355.93" D  G NEWQ
"RTN","IBCEP5A",13,0)
 . K DIE,DR
"RTN","IBCEP5A",14,0)
 . S DIE="^IBA(355.93,",DA=+IBPRV
"RTN","IBCEP5A",15,0)
 . S DR="S Y=""@5"";@1;.07;@5;I $P($G(^IBA(355.93,DA,0)),U,7)'="""" S Y=""@2"";W !!,""YOU MUST HAVE A STATE TO USE LICENSE # AS AN ID!!"",! S Y=""@1"";@2;W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,7),0)),U,2);.12"
"RTN","IBCEP5A",16,0)
 . D ^DIE
"RTN","IBCEP5A",17,0)
 . I '$D(Y) D BLD^IBCEP5
"RTN","IBCEP5A",18,0)
 K IB3559(.06)
"RTN","IBCEP5A",19,0)
 S IB3559(.06)=+Y
"RTN","IBCEP5A",20,0)
 ;
"RTN","IBCEP5A",21,0)
 I $G(IBINS)'="NO",'$G(IBINS),'$P($G(^IBE(355.97,IB3559(.06),1)),U,8) D  G:IBQ NEWQ
"RTN","IBCEP5A",22,0)
 . S DIR(0)="PA^DIC(36,:AEMQ",DIR("A")="Select INSURANCE CO: ",DIR("?")="Select the INSURANCE CO that is furnishing you with the provider ID"
"RTN","IBCEP5A",23,0)
 . D ^DIR K DIR
"RTN","IBCEP5A",24,0)
 . I $D(DTOUT)!$D(DUOUT) S IBQ=1 Q
"RTN","IBCEP5A",25,0)
 . S IBINS=$S(Y>0:+Y,1:"")
"RTN","IBCEP5A",26,0)
 S IB3559(.02)=$S($G(IBINS):IBINS,1:"*ALL*")
"RTN","IBCEP5A",27,0)
 ;
"RTN","IBCEP5A",28,0)
 I '$P($G(^IBE(355.97,IB3559(.06),1)),U,8) D  G:'IBIEN NEWQ
"RTN","IBCEP5A",29,0)
 . S DIC(0)="L",DLAYGO=355.9,DIC="^IBA(355.9,",X=IBPRV
"RTN","IBCEP5A",30,0)
 . S:$G(IBINS) DIC("DR")=".02////"_IBINS
"RTN","IBCEP5A",31,0)
 . D FILE^DICN K DIC,DLAYGO,DD,DO
"RTN","IBCEP5A",32,0)
 . I Y'>0!$D(DUOUT)!$D(DTOUT) S IBIEN=0 Q
"RTN","IBCEP5A",33,0)
 . S IBIEN=+Y
"RTN","IBCEP5A",34,0)
 . D NEWID^IBCEP5B(355.9,IB3559(.02),IBPRV,IB3559(.06),IBIEN,1)
"RTN","IBCEP5A",35,0)
 ;
"RTN","IBCEP5A",36,0)
 E  D  ; Provider-specific id stored outside of billing
"RTN","IBCEP5A",37,0)
 . N DIR,X,Y,Z
"RTN","IBCEP5A",38,0)
 . ; State License # is stored in file 200
"RTN","IBCEP5A",39,0)
 . ; DEA# may not be edited in IB
"RTN","IBCEP5A",40,0)
 . S Z=$G(^IBE(355.97,IB3559(.06),1))
"RTN","IBCEP5A",41,0)
 . I +Z D  Q
"RTN","IBCEP5A",42,0)
 .. W ! S DIR(0)="EA",DIR("A",1)="DEA # CANNOT BE EDITED WITHIN THE BILLING SOFTWARE",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR W !
"RTN","IBCEP5A",43,0)
 . I $P(Z,U,3) D
"RTN","IBCEP5A",44,0)
 .. D PRVED(+IBPRV)
"RTN","IBCEP5A",45,0)
 D BLD^IBCEP5
"RTN","IBCEP5A",46,0)
NEWQ K VALMBCK
"RTN","IBCEP5A",47,0)
 S VALMBCK="R"
"RTN","IBCEP5A",48,0)
 Q
"RTN","IBCEP5A",49,0)
 ;
"RTN","IBCEP5A",50,0)
DEL1 ; Delete Provider specific ID's
"RTN","IBCEP5A",51,0)
 N IBDA,DA,DIE,DR
"RTN","IBCEP5A",52,0)
 D FULL^VALM1
"RTN","IBCEP5A",53,0)
 D SEL^IBCEP5(.IBDA)
"RTN","IBCEP5A",54,0)
 G:'$O(IBDA(0)) DEL1Q
"RTN","IBCEP5A",55,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP5A",56,0)
 G:'IBDA&($E($P(IBDA,U),1,3)'="LIC") DEL1Q
"RTN","IBCEP5A",57,0)
 I IBDA>0 D
"RTN","IBCEP5A",58,0)
 . D DEL^IBCEP5B(355.9,IBDA,""),BLD^IBCEP5
"RTN","IBCEP5A",59,0)
 E  D  ; check for state license
"RTN","IBCEP5A",60,0)
 . Q:$E($P(IBDA,U),1,3)'="LIC"
"RTN","IBCEP5A",61,0)
 . I $P(IBDA,U,2)["IBA(355.93" D
"RTN","IBCEP5A",62,0)
 .. S DA=+$P(IBDA,U,2),DR=".12///@",DIE="^IBA(355.93," D ^DIE
"RTN","IBCEP5A",63,0)
 . E  D
"RTN","IBCEP5A",64,0)
 .. D PRVED(+$P(IBDA,U,2))
"RTN","IBCEP5A",65,0)
 . D BLD^IBCEP5
"RTN","IBCEP5A",66,0)
DEL1Q S VALMBCK="R"
"RTN","IBCEP5A",67,0)
 Q
"RTN","IBCEP5A",68,0)
 ;
"RTN","IBCEP5A",69,0)
CHG1 ; Edit Provider ID's
"RTN","IBCEP5A",70,0)
 N IBDA,DIR,DA,DIE,DR,Z
"RTN","IBCEP5A",71,0)
 D FULL^VALM1
"RTN","IBCEP5A",72,0)
 D SEL^IBCEP5(.IBDA)
"RTN","IBCEP5A",73,0)
 G:'$O(IBDA(0)) CHG1Q
"RTN","IBCEP5A",74,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP5A",75,0)
 I IBDA>0 D
"RTN","IBCEP5A",76,0)
 . S Z=$G(^IBA(355.97,+$P($G(^IBA(355.96,+$P($G(^IBA(355.9,IBDA,0)),U,6),0)),U,6),1))
"RTN","IBCEP5A",77,0)
 . I $P(Z,U)!$P(Z,U,2)!$P(Z,U,4) D  G CHG1Q
"RTN","IBCEP5A",78,0)
 .. S DIR("A",1)="SORRY, YOU ARE NOT ALLOWED TO EDIT THIS TYPE OF PROVIDER ID # HERE",DIR("A")="PRESS ENTER TO CONTINUE"
"RTN","IBCEP5A",79,0)
 .. S DIR(0)="AE" W ! D ^DIR K DIR W !
"RTN","IBCEP5A",80,0)
 . D CHG^IBCEP5B(355.9,IBDA),BLD^IBCEP5
"RTN","IBCEP5A",81,0)
 ; check for state license
"RTN","IBCEP5A",82,0)
 E  D
"RTN","IBCEP5A",83,0)
 . Q:$E($P(IBDA,U),1,3)'="LIC"
"RTN","IBCEP5A",84,0)
 . I $P(IBDA,U,2)["IBA(355.93" D
"RTN","IBCEP5A",85,0)
 .. S DA=+$P(IBDA,U,2),DIE="^IBA(355.93,"
"RTN","IBCEP5A",86,0)
 .. S DR="S Y=""@5"";@1;.07;@5;I $P($G(^IBA(355.93,DA,0)),U,7)'="""" S Y=""@2"";W !,""YOU MUST HAVE A STATE TO USE LICENSE # AS AN ID!!"" S Y=""@1"";@2;W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,7),0)),U,2);.12"
"RTN","IBCEP5A",87,0)
 .. D ^DIE
"RTN","IBCEP5A",88,0)
 . E  D
"RTN","IBCEP5A",89,0)
 .. D PRVED(+$P(IBDA,U,2))
"RTN","IBCEP5A",90,0)
 . D BLD^IBCEP5
"RTN","IBCEP5A",91,0)
CHG1Q S VALMBCK="R"
"RTN","IBCEP5A",92,0)
 Q
"RTN","IBCEP5A",93,0)
 ;
"RTN","IBCEP5A",94,0)
PRVED(IBPRV) ; Maintain license #'s for VA provider ien IBPRV
"RTN","IBCEP5A",95,0)
 S IBPRV=IBPRV_";VA(200,"
"RTN","IBCEP5A",96,0)
 D EN^IBCEP5D
"RTN","IBCEP5A",97,0)
 Q
"RTN","IBCEP5A",98,0)
 ;
"RTN","IBCEP5B")
0^40^B72371827
"RTN","IBCEP5B",1,0)
IBCEP5B ;ALB/TMP - EDI UTILITIES for prov ID ;29-SEP-00
"RTN","IBCEP5B",2,0)
 ;;2.0;INTEGRATED BILLING;**137,239,232**;21-MAR-94
"RTN","IBCEP5B",3,0)
 ;
"RTN","IBCEP5B",4,0)
NEWID(IBFILE,IBINS,IBPRV,IBPTYP,IBIEN,IBF) ; Generic add prov id
"RTN","IBCEP5B",5,0)
 ; at both prov (file 355.9) and ins co levels (355.91)
"RTN","IBCEP5B",6,0)
 ; IBFILE = 355.9 or 355.91 - the file being edited
"RTN","IBCEP5B",7,0)
 ; IBINS = ien of ins co (36) or *ALL* for all ins co
"RTN","IBCEP5B",8,0)
 ; IBPRV = vp ien of billing prov
"RTN","IBCEP5B",9,0)
 ; IBPTYP = ien of prov type (file 355.96)
"RTN","IBCEP5B",10,0)
 ; IBIEN = ien of entry being added (req'd)
"RTN","IBCEP5B",11,0)
 ; IBF = 1 if deleting from ins-related options, "" from prov-related
"RTN","IBCEP5B",12,0)
 N DIC,DIR,X,Y,Z,DA,DR,DIE,DO,DD,DLAYGO,DTOUT,DUOUT,IBQ,IBCUND,IB3559,IB35591,Q,IBDR,IBID
"RTN","IBCEP5B",13,0)
 S IB35591(.03)="",IBPTYP=$G(IBPTYP)
"RTN","IBCEP5B",14,0)
 F Z=.04,.05,.03 D  G:Z="" NEWQ
"RTN","IBCEP5B",15,0)
 . I $S(Z'=.03:1,1:$S('$G(IBINS):0,1:$G(IBCUND))) D  Q:Z=""
"RTN","IBCEP5B",16,0)
 .. N DA
"RTN","IBCEP5B",17,0)
 .. I Z'=.03 S DIR(0)=IBFILE_","_Z
"RTN","IBCEP5B",18,0)
 .. I Z=.03 D
"RTN","IBCEP5B",19,0)
 ... S DIR(0)="PAO^355.95:AEMQ"
"RTN","IBCEP5B",20,0)
 ... S DIR("S")="I $O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,"_$G(IB3559(.04))_","_$G(IB3559(.05))_","_IBPTYP_",0))!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,"_$G(IB3559(.04))_",0,"_IBPTYP_",0)))"
"RTN","IBCEP5B",21,0)
 ... S DIR("S")=DIR("S")_"!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,0,"_$G(IB3559(.05))_","_IBPTYP_",0)))!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,0,0,"_IBPTYP_",0)))"
"RTN","IBCEP5B",22,0)
 ... S DIR("?",1)="Care unit describes areas of service and is assigned by the payer, if",DIR("?")="  applicable.  Use Care Unit Maintenance to add or modify care units."
"RTN","IBCEP5B",23,0)
 .. S DA=0
"RTN","IBCEP5B",24,0)
 .. I Z=.04,$P($G(^IBE(355.97,+IBPTYP,0)),U,3)="1A" D SETDIR(.DIR)
"RTN","IBCEP5B",25,0)
 .. D ^DIR K DIR
"RTN","IBCEP5B",26,0)
 .. I $D(DTOUT)!$D(DUOUT) S Z="" K IB3559,IB35591 Q
"RTN","IBCEP5B",27,0)
 .. S IB3559(Z)=$S(Z'=.03:$P(Y,U),1:$S($P(Y,U)>0:$P(Y,U),1:"*N/A*"))
"RTN","IBCEP5B",28,0)
 . I Z=.05 D
"RTN","IBCEP5B",29,0)
 .. S IBCUND=$$CAREUN^IBCEP3(IBINS,IBPTYP,IB3559(.04),IB3559(.05),IB3559(.05)=3)
"RTN","IBCEP5B",30,0)
 .. S:'IBCUND!($G(IB3559(.03))=0) IB3559(.03)="*N/A*"
"RTN","IBCEP5B",31,0)
 .. I '$G(IBINS) S IBINS="*ALL*"
"RTN","IBCEP5B",32,0)
 . I Z=.03 D CAREUN^IBCEP5C
"RTN","IBCEP5B",33,0)
 ;
"RTN","IBCEP5B",34,0)
 I $D(IB3559) D
"RTN","IBCEP5B",35,0)
 . N Q,Z2,Z3,Z4,Z5,Z6,IBLAST,IBOK,DIR,Y,X
"RTN","IBCEP5B",36,0)
 . S IBLAST=0
"RTN","IBCEP5B",37,0)
 . D DISP^IBCEP4("Q",IBINS,IBPTYP,IB3559(.04),IB3559(.05),1)
"RTN","IBCEP5B",38,0)
 . W !!,"THE FOLLOWING WAS CHOSEN:"
"RTN","IBCEP5B",39,0)
 . S Q=0 F  S Q=$O(Q(Q)) Q:'Q  W !,?3,Q(Q)
"RTN","IBCEP5B",40,0)
 . I IBCUND W !,?3,"CARE UNIT: "_$$EXPAND^IBTRE(355.96,.01,IB3559(.03))
"RTN","IBCEP5B",41,0)
 . S Z2=IBINS,Z3=IB35591(.03),Z4=IB3559(.04),Z5=IB3559(.05),Z6=IBPTYP
"RTN","IBCEP5B",42,0)
 . S IBOK=1
"RTN","IBCEP5B",43,0)
 . ; If both forms, chk for specific
"RTN","IBCEP5B",44,0)
 . I 'Z4 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_4_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,1,$G(IBFILE)=355.91)
"RTN","IBCEP5B",45,0)
 . ; If specific form, chk for all
"RTN","IBCEP5B",46,0)
 . I IBOK,Z4 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_4_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,0,$G(IBFILE)=355.91)
"RTN","IBCEP5B",47,0)
 . ; If both care types, chk for specific
"RTN","IBCEP5B",48,0)
 . I IBOK,'Z5 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_5_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,1,$G(IBFILE)=355.91)
"RTN","IBCEP5B",49,0)
 . ; If specific care type, chk for all
"RTN","IBCEP5B",50,0)
 . I IBOK,Z5 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_5_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,0,$G(IBFILE)=355.91)
"RTN","IBCEP5B",51,0)
 . I 'IBOK K IB3559,IB35591
"RTN","IBCEP5B",52,0)
 . I IBOK D
"RTN","IBCEP5B",53,0)
 .. S DIR(0)=IBFILE_",.07"
"RTN","IBCEP5B",54,0)
 .. W ! D ^DIR K DIR
"RTN","IBCEP5B",55,0)
 .. S IBID=Y
"RTN","IBCEP5B",56,0)
 .. I $D(DTOUT)!$D(DUOUT) K IB3559,IB35591 S IBOK=0 Q
"RTN","IBCEP5B",57,0)
 .. S IBDR=$S(IBFILE=355.9:$S($G(IBINS):".02////"_IBINS_";",1:""),1:"")_$S($G(IBCUND):".03////"_$S(IB35591(.03):IB35591(.03),1:"*N/A*")_";",1:"")_".04////"_IB3559(.04)_";.05////"_IB3559(.05)_";.06////"_IBPTYP_$S(IBID'="":";.07////"_IBID,1:"")
"RTN","IBCEP5B",58,0)
 .. ;
"RTN","IBCEP5B",59,0)
 .. I $G(IBIEN) D
"RTN","IBCEP5B",60,0)
 ... S DR=IBDR,DA=IBIEN,DIE="^IBA("_IBFILE_","
"RTN","IBCEP5B",61,0)
 ... D ^DIE
"RTN","IBCEP5B",62,0)
 ... I $D(Y) K IB3559,IB35591 S IBOK=0
"RTN","IBCEP5B",63,0)
 ;
"RTN","IBCEP5B",64,0)
NEWQ I '$D(IB3559),$G(IBIEN) D
"RTN","IBCEP5B",65,0)
 . N DIR,DIK,DA,X,Y
"RTN","IBCEP5B",66,0)
 . S DA=IBIEN,DIK="^IBA("_IBFILE_"," D ^DIK
"RTN","IBCEP5B",67,0)
 . S DIR(0)="EA",DIR("A",1)=$S('$G(IBOK):"",1:"PROBLEM ENCOUNTERED FILING THE RECORD - ")_"RECORD NOT ADDED",DIR("A")="PRESS ENTER to continue " W ! D ^DIR K DIR
"RTN","IBCEP5B",68,0)
 Q
"RTN","IBCEP5B",69,0)
 ;
"RTN","IBCEP5B",70,0)
CHG(IBFILE,IBDA) ; Generic call - edit prov id
"RTN","IBCEP5B",71,0)
 ; IBFILE = 355.9 or 355.91 (file being edited)
"RTN","IBCEP5B",72,0)
 ; IBDA = ien in file
"RTN","IBCEP5B",73,0)
 ;
"RTN","IBCEP5B",74,0)
 N DIR,DIE,DA,DR,IBCUCHK,IBOK,IB0,IBOLD,X,Y,Z
"RTN","IBCEP5B",75,0)
 F Z=1:1:3 L +^IBA(IBFILE,IBDA):5 Q:$T  W !,"Attempting to lock record"
"RTN","IBCEP5B",76,0)
 I '$T D  G CHGQ
"RTN","IBCEP5B",77,0)
 . W !,"RECORD LOCKED BY ANOTHER USER - TRY AGAIN LATER"
"RTN","IBCEP5B",78,0)
 . D ENTER(.DIR)
"RTN","IBCEP5B",79,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP5B",80,0)
 S (IB0,IBOLD)=$G(^IBA(IBFILE,IBDA,0))
"RTN","IBCEP5B",81,0)
 G:IB0="" CHGQ
"RTN","IBCEP5B",82,0)
 F Z=.04,.05,.06,.03 S IBOK=$$EDIT(IBFILE,Z,IB0,IBOLD,IBDA,0) S:IBOK="*ALL*" IBOK="" Q:$P(IBOK,U,2)  S $P(IB0,U,Z*100)=$P(IBOK,U)
"RTN","IBCEP5B",83,0)
 I $P(IBOK,U,2) S DIR(0)="EA",DIR("A")="NO CHANGES MADE, PRESS ENTER TO CONTINUE: " W ! D ^DIR K DIR W ! G CHGQ
"RTN","IBCEP5B",84,0)
 S IBOK=$$EDIT(IBFILE,.07,IB0,IBOLD,IBDA,1)
"RTN","IBCEP5B",85,0)
 I '$P(IBOK,U,2) S $P(IB0,U,7)=$P(IBOK,U)
"RTN","IBCEP5B",86,0)
 I $P(IBOK,U,2)!(IB0=IBOLD) S DIR(0)="EA",DIR("A")="NO CHANGES MADE, PRESS ENTER TO CONTINUE: " W ! D ^DIR K DIR W ! G CHGQ
"RTN","IBCEP5B",87,0)
 S IBCUCHK=$$CUCHK^IBCEP5C(IBDA,IB0) G:IBCUCHK CHGQ
"RTN","IBCEP5B",88,0)
 S DR=""
"RTN","IBCEP5B",89,0)
 F Z=2,4:1:7,3 I $P(IB0,U,Z)'=$P(IBOLD,U,Z) S DR=DR_$S(DR'="":";",1:"")_(Z/100)_"///"_$S($P(IB0,U,Z)'="@":"/",1:"")_$P(IB0,U,Z)
"RTN","IBCEP5B",90,0)
 I DR'="" S DIE="^IBA("_IBFILE_",",DA=IBDA D ^DIE
"RTN","IBCEP5B",91,0)
CHGQ L -^IBA(IBFILE,IBDA)
"RTN","IBCEP5B",92,0)
 Q
"RTN","IBCEP5B",93,0)
 ;
"RTN","IBCEP5B",94,0)
DEL(IBFILE,IBDA,IBF) ; Delete prov specific ID's
"RTN","IBCEP5B",95,0)
 ; IBFILE = 355.9 or 355.91 for the file
"RTN","IBCEP5B",96,0)
 ; IBDA = ien of entry in file IBFILE
"RTN","IBCEP5B",97,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5B",98,0)
 ;       from prov-related options
"RTN","IBCEP5B",99,0)
 D DEL^IBCEP5C(IBFILE,IBDA,$G(IBF))
"RTN","IBCEP5B",100,0)
 Q
"RTN","IBCEP5B",101,0)
 ;
"RTN","IBCEP5B",102,0)
EDIT(IBFILE,IBFLD,IB0,IBOLD,IBIEN,IBCK1) ; Generic edit flds
"RTN","IBCEP5B",103,0)
 N DIR,Y,X,IB,IB1,IBCUVAL,IBCUY,IBFLD0,IBNEW,IBPRV,IBVAL,IBIVAL,IBINS,IBCUCHK,IBOK,DUOUT,DTOUT
"RTN","IBCEP5B",104,0)
 I IBFILE=355.91,IBFLD=.02 S IBNEW="" G EDITQ ; No .02 in file 355.91
"RTN","IBCEP5B",105,0)
 S IBCUCHK=1,IBCUVAL=""
"RTN","IBCEP5B",106,0)
 S IBFLD0=IBFLD*100,IBPRV=$S(IBFILE=355.9:$P(IB0,U),1:""),IBNEW=""
"RTN","IBCEP5B",107,0)
 S IBINS=$P(IB0,U,$S(IBFILE=355.9:2,1:1))
"RTN","IBCEP5B",108,0)
 I IBFLD'=.03 S IBVAL=$$EXPAND^IBTRE(IBFILE,IBFLD,$P(IB0,U,IBFLD0)),IBIVAL=$P(IB0,U,IBFLD0)
"RTN","IBCEP5B",109,0)
 I IBFLD=.03,$S('IBINS:1,1:'$$CAREUN^IBCEP3(IBINS,$P(IB0,U,6),$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,5)=3)) S:$P(IB0,U,3) IBNEW="@" G EDITQ
"RTN","IBCEP5B",110,0)
 I IBFLD=.03 S IBVAL=$P($G(^IBA(355.95,+$G(^IBA(355.96,+$P(IB0,U,3),0)),0)),U),IBIVAL=$P(IB0,U,3) D
"RTN","IBCEP5B",111,0)
 . S IBCUCHK=0,IBCUVAL=$P($G(^IBA(355.96,+IBIVAL,0)),U,1) I IBCUVAL="" Q
"RTN","IBCEP5B",112,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5B",113,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),0,$P(IB0,U,6),""))  S IBCUCHK=1 Q
"RTN","IBCEP5B",114,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,$P(IB0,U,5),$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5B",115,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,0,$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5B",116,0)
 . S IBIVAL="@"
"RTN","IBCEP5B",117,0)
 I IBFLD'=.02 D
"RTN","IBCEP5B",118,0)
 . N DA
"RTN","IBCEP5B",119,0)
 . S DIR(0)=$S(IBFLD'=.03:IBFILE_","_IBFLD_"AO",1:"PAO^355.95:AEMQ")
"RTN","IBCEP5B",120,0)
 . I IBFLD=.03 D  Q:$P(IB0,U,4)=""!($P(IB0,U,5)="")!($P(IB0,U,6)="")
"RTN","IBCEP5B",121,0)
 .. S DIR("A")="CARE UNIT: "
"RTN","IBCEP5B",122,0)
 .. S DIR("S")="I $D(^IBA(355.96,""AUNIQ"",IBINS,Y,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6)))!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,$P(IB0,U,4),0,$P(IB0,U,6))))"
"RTN","IBCEP5B",123,0)
 .. S DIR("S")=DIR("S")_"!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,0,$P(IB0,U,5),$P(IB0,U,6))))!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,0,0,$P(IB0,U,6))))"
"RTN","IBCEP5B",124,0)
 . I IBFLD'=.03 S DIR("A")=$$GET1^DID(IBFILE,IBFLD,,"LABEL")_": "
"RTN","IBCEP5B",125,0)
 . S:IBVAL'=""&(IBCUCHK) DIR("A")=DIR("A")_IBVAL_"// "
"RTN","IBCEP5B",126,0)
 . S DA=0
"RTN","IBCEP5B",127,0)
 . F  D ^DIR S IBOK=0 D  Q:IBOK
"RTN","IBCEP5B",128,0)
 .. I $D(DUOUT)!$D(DTOUT) S IBOK=1 Q
"RTN","IBCEP5B",129,0)
 .. I X="",$P(IB0,U,(IBFLD*100))'="" S (X,Y)=$P(IB0,U,(IBFLD*100))
"RTN","IBCEP5B",130,0)
 .. I IBFLD=.06,$P(IB0,U,4)'=1,$P($G(^IBE(355.97,$S(+Y:+Y,1:+$P(IB0,U,6)),0)),U,3)="1A" W !,"BLUE CROSS IS ONLY ALLOWED FOR UB92 ONLY" Q
"RTN","IBCEP5B",131,0)
 .. S IBOK=1
"RTN","IBCEP5B",132,0)
 . K DIR
"RTN","IBCEP5B",133,0)
 . I IBFLD=.03,'$D(DTOUT),'$D(DUOUT) D  S Y=IBCUY
"RTN","IBCEP5B",134,0)
 .. S IBCUVAL=+$G(^IBA(355.96,+Y,0))
"RTN","IBCEP5B",135,0)
 .. S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0))
"RTN","IBCEP5B",136,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),0,$P(IB0,U,6),0))
"RTN","IBCEP5B",137,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,$P(IB0,U,5),$P(IB0,U,6),0))
"RTN","IBCEP5B",138,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,0,$P(IB0,U,6),0))
"RTN","IBCEP5B",139,0)
 .. I 'IBCUY S IBCUY="@"
"RTN","IBCEP5B",140,0)
 . I IBIVAL'="",IBCUCHK,($P(Y,U)=IBIVAL!(X="")) S IBNEW=IBIVAL Q
"RTN","IBCEP5B",141,0)
 . I 'IBCUCHK,X="" S IBNEW=IBIVAL Q
"RTN","IBCEP5B",142,0)
 . I X'="@",($S(X="":IBIVAL'="",1:0)!$D(DTOUT)!$D(DUOUT)) S IBNEW="^1" Q
"RTN","IBCEP5B",143,0)
 . S IBNEW=$S(X'="@":$P(Y,U),1:X)
"RTN","IBCEP5B",144,0)
 . I IBFLD=.03,X="" S IBNEW="" ; No care unit selected
"RTN","IBCEP5B",145,0)
 I IBFLD=.02 D  ; Only file 355.9
"RTN","IBCEP5B",146,0)
 . N DIR,X,Y,DIC,DA,IBIT
"RTN","IBCEP5B",147,0)
 . S IBIT=$$GET1^DID(355.9,.02,,"INPUT TRANSFORM")
"RTN","IBCEP5B",148,0)
 . S DIR(0)="FAO^1:30"
"RTN","IBCEP5B",149,0)
 . S DIR("A")="INSURANCE CO: "_$S(IBVAL'="":IBVAL_"// ",1:" "),DIR("?")="^N IBHELP,Z D HELP^DIE(355.9,,.02,""A"",""IBHELP"") S Z=0 F  S Z=$O(IBHELP(""DIHELP"",Z)) Q:'Z  W !,IBHELP(""DIHELP"",Z)"
"RTN","IBCEP5B",150,0)
 . F  W ! D ^DIR D  I IBNEW'="" K DIR Q
"RTN","IBCEP5B",151,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBNEW="^1" Q
"RTN","IBCEP5B",152,0)
 .. I IBIVAL'="",($P(Y,U)=IBIVAL!(X="")) S IBNEW=IBIVAL Q
"RTN","IBCEP5B",153,0)
 .. I X="@" S IBNEW="@" Q
"RTN","IBCEP5B",154,0)
 .. I X="",IBIVAL="" S IBNEW="*ALL*" Q
"RTN","IBCEP5B",155,0)
 .. S DIC="^DIC(36,",DIC(0)="EMQ",DIC("S")="X IBIT I $D(X)" D ^DIC
"RTN","IBCEP5B",156,0)
 .. I Y>0 S IBNEW=$P(Y,U) Q
"RTN","IBCEP5B",157,0)
 .. S Y="",IBNEW="^1"
"RTN","IBCEP5B",158,0)
 G:IBNEW="^1"!(IBNEW=IBIVAL)!(IBFLD=.07) EDITQ
"RTN","IBCEP5B",159,0)
 I $G(IBCK1) D
"RTN","IBCEP5B",160,0)
 . N X1,X2,X3,X4,X5,X6
"RTN","IBCEP5B",161,0)
 . S X1=$S(IBFILE=355.9:$S(IBFLD'=.01:IBPRV,1:IBNEW),1:"")
"RTN","IBCEP5B",162,0)
 . S X2=$S(IBFILE=355.9:$S(IBFLD'=.02:$P(IB0,U,2),1:IBNEW),1:$S(IBFLD'=.01:$P(IB0,U),1:IBNEW))
"RTN","IBCEP5B",163,0)
 . S X3=$S(IBFLD'=.03:$P(IB0,U,3),1:IBNEW),X4=$S(IBFLD'=.04:$P(IB0,U,4),1:IBNEW),X5=$S(IBFLD'=.05:$P(IB0,U,5),1:IBNEW),X6=$S(IBFLD'=.06:$P(IB0,U,6),1:IBNEW)
"RTN","IBCEP5B",164,0)
 . I X2="" S X2="*ALL*"
"RTN","IBCEP5B",165,0)
 . I X3="" S X3="*N/A*"
"RTN","IBCEP5B",166,0)
 . I IBFILE=355.9,$S(X4=""!(X5="")!(X6=""):1,$O(^IBA(355.9,"AUNIQ",X1,X2,X3,X4,X5,X6,0)):$O(^(0))'=IBIEN,1:0) S IBNEW=IBNEW_"^2" Q
"RTN","IBCEP5B",167,0)
 . I IBFILE=355.91,$S(X4=""!(X5="")!(X6=""):1,$O(^IBA(355.91,"AUNIQ",X2,X3,X4,X5,X6,0)):$O(^(0))'=IBIEN,1:0) S IBNEW=IBNEW_"^2" Q
"RTN","IBCEP5B",168,0)
 . F IB=2,3 D  Q:$P(IBNEW,U,3)=3
"RTN","IBCEP5B",169,0)
 .. S IB1=(X2="*ALL*"!(X3="*N/A*"))
"RTN","IBCEP5B",170,0)
 .. I IBFILE=355.9,IB=2,$S($P(IBOLD,U,2)="":X2'="*ALL*",1:$P(IBOLD,U,2)'=X2) S X2=""
"RTN","IBCEP5B",171,0)
 .. I IB=3,$S($P(IBOLD,U,3)="":X3'="*N/A*",1:$P(IBOLD,U,3)'=X3) S X3=""
"RTN","IBCEP5B",172,0)
 .. I '$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_(IBFLD*100)_U_X2_U_X3_U_X4_U_X5_U_X6,IB1) S IBNEW="^3"
"RTN","IBCEP5B",173,0)
 ;
"RTN","IBCEP5B",174,0)
EDITQ Q IBNEW
"RTN","IBCEP5B",175,0)
 ;
"RTN","IBCEP5B",176,0)
SETDIR(DIR) ; Sets dir for BLUE CROSS only UB92 form type
"RTN","IBCEP5B",177,0)
 S DIR("B")="UB92",$P(DIR(0),U,3)="K:Y'=1 X",DIR("?")="ONLY UB92 FORM TYPE IS VALID FOR BLUE CROSS ID"
"RTN","IBCEP5B",178,0)
 Q
"RTN","IBCEP5B",179,0)
 ;
"RTN","IBCEP5B",180,0)
ENTER(DIR) ;
"RTN","IBCEP5B",181,0)
 S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE: "
"RTN","IBCEP5B",182,0)
 Q
"RTN","IBCEP5B",183,0)
 ;
"RTN","IBCEP5C")
0^41^B41166821
"RTN","IBCEP5C",1,0)
IBCEP5C ;ALB/TMP - EDI UTILITIES for provider ID ;02-NOV-00
"RTN","IBCEP5C",2,0)
 ;;2.0;INTEGRATED BILLING;**137,239,232**;21-MAR-94
"RTN","IBCEP5C",3,0)
 ;
"RTN","IBCEP5C",4,0)
COMBOK(IBFILE,IBDAT,IBALL,IBF) ; Generic ask if conflict, should id rec still
"RTN","IBCEP5C",5,0)
 ;  be added?
"RTN","IBCEP5C",6,0)
 ; IBFILE = 355.9 or 355.91 for the file being edited
"RTN","IBCEP5C",7,0)
 ; IBDAT = var ptr prov ien (355.9) ^ pc to check ^
"RTN","IBCEP5C",8,0)
 ;           ins co ien or *ALL* ^ care unit or *N/A* ^
"RTN","IBCEP5C",9,0)
 ;           form type code ^ care type code ^ prov id type ptr
"RTN","IBCEP5C",10,0)
 ; IBALL = flag:
"RTN","IBCEP5C",11,0)
 ;   0 = Individual entry selected - check for existing ALL entry
"RTN","IBCEP5C",12,0)
 ;   1 = 'ALL' selected - check for existing individual ones
"RTN","IBCEP5C",13,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5C",14,0)
 ;       from provider-related options
"RTN","IBCEP5C",15,0)
 ; Returns 1 if ok to continue, 0 if not
"RTN","IBCEP5C",16,0)
 ;
"RTN","IBCEP5C",17,0)
 N X,Y,Q,DIR,Z,IBD,IBDD,IBOK,IBSPEC
"RTN","IBCEP5C",18,0)
 S IBALL=$G(IBALL),IBOK=1
"RTN","IBCEP5C",19,0)
 S IBD=+$P(IBDAT,U,2),IBDD=$S(IBD=4:5,1:4)
"RTN","IBCEP5C",20,0)
 F Z=2:1:6 D
"RTN","IBCEP5C",21,0)
 . I IBD'=Z,$P(IBDAT,U,Z+1)'="" S Z(Z)=$P(IBDAT,U,Z+1) Q
"RTN","IBCEP5C",22,0)
 . I IBD=Z S IBD(Z)=$P(IBDAT,U,Z+1)
"RTN","IBCEP5C",23,0)
 K IBSPEC
"RTN","IBCEP5C",24,0)
 I IBALL D  ; Check for specific
"RTN","IBCEP5C",25,0)
 . N X0,X1
"RTN","IBCEP5C",26,0)
 . S X1=0
"RTN","IBCEP5C",27,0)
 . F  S X1=$O(^IBA(IBFILE,"AC",$S(IBFILE=355.9:Z(6),1:Z(2)),$S(IBFILE=355.9:Z(2),1:Z(6)),$S(IBFILE=355.9:$P(IBDAT,U),1:Z(3)),X1)) Q:'X1  S X0=$G(^IBA(IBFILE,X1,0)) I $S(IBFILE=355.9:$P(X0,U,3)=Z(3),1:1) D
"RTN","IBCEP5C",28,0)
 .. I $P(X0,U,IBD)'=IBD(IBD),"12"[$P(X0,U,IBD),($P(X0,U,IBDD)=Z(IBDD)!($P(X0,U,IBDD)=0)!(Z(IBDD)=0&(IBD(IBD)=0))) S X1($P(X0,U,IBD))=X1 Q
"RTN","IBCEP5C",29,0)
 .. I IBD(IBD)=0,Z(IBDD)=0 S X1(0)=X1
"RTN","IBCEP5C",30,0)
 . S X0=0 F  S X0=$O(X1(X0)) Q:X0=""  D
"RTN","IBCEP5C",31,0)
 .. S IBSPEC=$S($G(IBSPEC)'="":IBSPEC_"  ",1:"")_$P($S(IBD=4:"UB92^HCFA 1500",1:"INPT^OUTPT"),U,X0)_" ONLY"
"RTN","IBCEP5C",32,0)
 . I $D(X1(0)) S IBSPEC=$S($G(IBSPEC)'="":IBSPEC_"  ",1:"")_$S(IBD=4:"BOTH UB92 and HCFA 1500 form type  AND  BOTH INPT and OUTPT care type",1:"BOTH INPT and OUTPT care type  AND  BOTH UB92 and HCFA 1500 form type")
"RTN","IBCEP5C",33,0)
 . ;
"RTN","IBCEP5C",34,0)
 I 'IBALL D
"RTN","IBCEP5C",35,0)
 . N X0,X1
"RTN","IBCEP5C",36,0)
 . S X1=0
"RTN","IBCEP5C",37,0)
 . F  S X1=$O(^IBA(IBFILE,"AC",$S(IBFILE=355.9:Z(6),1:Z(2)),$S(IBFILE=355.9:Z(2),1:Z(6)),$S(IBFILE=355.9:$P(IBDAT,U),1:Z(3)),X1)) Q:'X1  D
"RTN","IBCEP5C",38,0)
 .. S X0=$G(^IBA(IBFILE,X1,0))
"RTN","IBCEP5C",39,0)
 .. I $S(IBFILE=355.9:$P(X0,U,16)=Z(3),1:1),$P(X0,U,IBD)=0,$S($P(X0,U,IBDD)=Z(IBDD):1,1:$P(X0,U,IBDD)=0) S IBSPEC=""
"RTN","IBCEP5C",40,0)
 ;
"RTN","IBCEP5C",41,0)
 I $D(IBSPEC) D
"RTN","IBCEP5C",42,0)
 . N X0,X1,TEXT,IBWHAT
"RTN","IBCEP5C",43,0)
 . S IBWHAT=$S(IBFILE=355.9:$S($G(IBF):"INS CO AND PROVIDER",1:"PROVIDER"),1:"INSURANCE CO")
"RTN","IBCEP5C",44,0)
 . S X0=$S($D(IBD(4)):"UB-92^HCFA 1500",1:"INPT^OUTPT")
"RTN","IBCEP5C",45,0)
 . S X1=$S($D(IBD(4)):"FORM TYPE",1:"CARE TYPE")
"RTN","IBCEP5C",46,0)
 . S DIR(0)="YA"
"RTN","IBCEP5C",47,0)
 . S TEXT(1)="WARNING ... POTENTIAL CONFLICT DETECTED!!"
"RTN","IBCEP5C",48,0)
 . S TEXT(2)=" YOUR NEW COMBINATION APPLIES TO "_$S(IBALL:"BOTH "_$S(IBD=4:"FORM ",1:"INPT AND OUTPT CARE ")_"TYPES",1:"ONLY "_$P(X0,U,IBD(IBD))_" "_X1)
"RTN","IBCEP5C",49,0)
 . S TEXT(3)=" THIS SAME COMBINATION ALREADY EXISTS FOR THE "_IBWHAT_" & "_$S('IBALL:"ALL "_X1_"S",1:"SPECIFIC "_X1_"(S):")
"RTN","IBCEP5C",50,0)
 . S:IBSPEC'="" TEXT(4)=$J("",4)_IBSPEC
"RTN","IBCEP5C",51,0)
 . S TEXT($S($D(TEXT(4)):5,1:4))=" "
"RTN","IBCEP5C",52,0)
 . S DIR("A")="ARE YOU SURE YOU STILL WANT TO ADD THIS RECORD?: "
"RTN","IBCEP5C",53,0)
 . S DIR("?",1)=" "
"RTN","IBCEP5C",54,0)
 . S DIR("?",2)="This combination appears to be conflicting with one(s) already on file."
"RTN","IBCEP5C",55,0)
 . S DIR("?",3)="It has already been defined for the "_$$LOW^XLFSTR(IBWHAT)_" for "_$S(IBALL:"at least 1 specific ",1:"ALL ")_$S(IBD=4:"form",1:"care")_" type"_$S(IBALL:".",1:"s.")
"RTN","IBCEP5C",56,0)
 . S DIR("?")="Respond NO to reject this conflicting record or YES to continue on to add it in spite of the apparent conflict.",DIR("B")="NO"
"RTN","IBCEP5C",57,0)
 . W !! F Q=1:1 Q:'$D(TEXT(Q))  W TEXT(Q),!
"RTN","IBCEP5C",58,0)
 . D ^DIR K DIR W !
"RTN","IBCEP5C",59,0)
 . S IBOK=(Y=1)
"RTN","IBCEP5C",60,0)
 Q IBOK
"RTN","IBCEP5C",61,0)
 ;
"RTN","IBCEP5C",62,0)
CAREUN ;Called from NEWID^IBCEP5B to check for existing record combination
"RTN","IBCEP5C",63,0)
 N DIR
"RTN","IBCEP5C",64,0)
 I IBFILE'=355.9 D
"RTN","IBCEP5C",65,0)
 . S IB35591(.03)=IB3559(.03)
"RTN","IBCEP5C",66,0)
 . I "0"[IB35591(.03) S IB35591(.03)="*N/A*"
"RTN","IBCEP5C",67,0)
 . I IB35591(.03)'="*N/A*" S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",68,0)
 .. S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),0,IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",69,0)
 ... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",70,0)
 .... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,0,IBPTYP,""))
"RTN","IBCEP5C",71,0)
 . I $D(^IBA(355.91,"AUNIQ",IBINS,IB35591(.03),IB3559(.04),IB3559(.05),IBPTYP)) D  Q
"RTN","IBCEP5C",72,0)
 .. S DIR(0)="EA",DIR("A",1)="This record already exists - NOT ADDED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR,IB3559,IB35591 W !
"RTN","IBCEP5C",73,0)
 I IBFILE=355.9 D
"RTN","IBCEP5C",74,0)
 . S IB35591(.03)=IB3559(.03)
"RTN","IBCEP5C",75,0)
 . I "0"[IB35591(.03) S IB35591(.03)="*N/A*"
"RTN","IBCEP5C",76,0)
 . I IB35591(.03)'="*N/A*" S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",77,0)
 .. S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),0,IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",78,0)
 ... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",79,0)
 .... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,0,IBPTYP,""))
"RTN","IBCEP5C",80,0)
 . I $D(^IBA(355.9,"AUNIQ",IBPRV,IBINS,IB35591(.03),IB3559(.04),IB3559(.05),IBPTYP)) D  Q
"RTN","IBCEP5C",81,0)
 .. S DIR(0)="EA",DIR("A",1)="This record already exists - NOT ADDED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR,IB3559,IB35591 W !
"RTN","IBCEP5C",82,0)
 Q
"RTN","IBCEP5C",83,0)
 ;
"RTN","IBCEP5C",84,0)
DEL(IBFILE,IBDA,IBF) ; Delete prov specific ID's
"RTN","IBCEP5C",85,0)
 ; IBFILE = 355.9 or 355.91 for the file
"RTN","IBCEP5C",86,0)
 ; IBDA = ien of entry in file IBFILE
"RTN","IBCEP5C",87,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5C",88,0)
 ;       from prov-related options
"RTN","IBCEP5C",89,0)
 N IB0,IBLAST,IBX,DIK,DA,DIR,X,Y,Z
"RTN","IBCEP5C",90,0)
 F Z=1:1:3 L +^IBA(IBFILE,IBDA):5 Q:$T
"RTN","IBCEP5C",91,0)
 I '$T D  G DELQ
"RTN","IBCEP5C",92,0)
 . W !,"RECORD IS LOCKED BY ANOTHER USER - TRY AGAIN LATER"
"RTN","IBCEP5C",93,0)
 . D ENTER^IBCEP5B(.DIR)
"RTN","IBCEP5C",94,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP5C",95,0)
 S IB0=$G(^IBA(IBFILE,IBDA,0))
"RTN","IBCEP5C",96,0)
 S IBX=0
"RTN","IBCEP5C",97,0)
 S IBX=IBX+1,DIR("A",IBX)=" PROVIDER: "_$S(IBFILE=355.9:$$EXPAND^IBTRE(355.9,.01,$P(IB0,U)),1:"*ALL*")
"RTN","IBCEP5C",98,0)
 D DISP^IBCEP4("DIR(""A"")",$P(IB0,U,$S(IBFILE=355.9:2,1:1)),$P(IB0,U,6),$P(IB0,U,4),$P(IB0,U,5),IBX+1,.IBLAST)
"RTN","IBCEP5C",99,0)
 I $P(IB0,U,3)'="" S DIR("A",IBLAST+1)="CARE UNIT: "_$$EXPAND^IBTRE(355.91,.03,$P(IB0,U,3))
"RTN","IBCEP5C",100,0)
 S DIR("A",IBLAST+2)="  PROV ID: "_$P(IB0,U,7),DIR("A",IBLAST+3)=" "
"RTN","IBCEP5C",101,0)
 S DIR("A")="OK TO DELETE THIS "_$S($G(IBF):"INSURANCE COMPANY ",1:"")_"PROVIDER ID RECORD?: ",DIR("B")="NO"
"RTN","IBCEP5C",102,0)
 S DIR(0)="YA"
"RTN","IBCEP5C",103,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP5C",104,0)
 I Y'=1 G DELQ
"RTN","IBCEP5C",105,0)
 I IBDA>0 S DA=IBDA,DIK="^IBA("_IBFILE_"," D ^DIK
"RTN","IBCEP5C",106,0)
DELQ L -^IBA(IBFILE,IBDA)
"RTN","IBCEP5C",107,0)
 Q
"RTN","IBCEP5C",108,0)
 ;
"RTN","IBCEP5C",109,0)
CUCHK(IBDA,IB0) ;Called from CHG^IBCEP5B to check for existing combination
"RTN","IBCEP5C",110,0)
 ; during edit 
"RTN","IBCEP5C",111,0)
 ; IBDA = the ien of the record being edited
"RTN","IBCEP5C",112,0)
 ; IB0 = Proposed changed 0 node of the entry in the file
"RTN","IBCEP5C",113,0)
 ; FUNCTION RETURNS 0 if no duplicate found, 1 if record already exists
"RTN","IBCEP5C",114,0)
 N Z,IBCUCHK,DIR,X,Y
"RTN","IBCEP5C",115,0)
 S IBCUCHK=0
"RTN","IBCEP5C",116,0)
 I IBFILE=355.91 S Z=+$O(^IBA(355.91,"AUNIQ",$P(IB0,U,1),$S($P(IB0,U,3)="@":"*N/A*",$P(IB0,U,3):$P(IB0,U,3),1:$P(IB0,U,10)),$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0)) I Z,Z'=IBDA S IBCUCHK=1
"RTN","IBCEP5C",117,0)
 I IBFILE=355.9 D
"RTN","IBCEP5C",118,0)
 . N X,X1
"RTN","IBCEP5C",119,0)
 . S X=$S($P(IB0,U,2):$P(IB0,U,2),1:$P(IB0,U,15)) S:X="" X="*ALL*"
"RTN","IBCEP5C",120,0)
 . S X1=$S($P(IB0,U,3):$P(IB0,U,3),$P(IB0,U,3)="@":"",1:$P(IB0,U,16)) S:X1="" X1="*N/A*"
"RTN","IBCEP5C",121,0)
 . S Z=+$O(^IBA(355.9,"AUNIQ",$P(IB0,U,1),X,X1,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0)) I Z,Z'=IBDA S IBCUCHK=1
"RTN","IBCEP5C",122,0)
 I IBCUCHK D
"RTN","IBCEP5C",123,0)
 . S DIR(0)="EA",DIR("A",1)="This combination already exists - RECORD NOT CHANGED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR W !
"RTN","IBCEP5C",124,0)
 Q IBCUCHK
"RTN","IBCEP5C",125,0)
 ;
"RTN","IBCEP6")
0^18^B9434133
"RTN","IBCEP6",1,0)
IBCEP6 ;ALB/TMP - PROVIDER ID MAINT menu and INS CO EDIT hook ;11-02-00
"RTN","IBCEP6",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP6",3,0)
 ;
"RTN","IBCEP6",4,0)
EN ; -- main entry point for IBCE PRV INS PARAMS
"RTN","IBCEP6",5,0)
 D FULL^VALM1
"RTN","IBCEP6",6,0)
 D EN^VALM("IBCE PRVMAINT")
"RTN","IBCEP6",7,0)
ENQ Q
"RTN","IBCEP6",8,0)
 ;
"RTN","IBCEP6",9,0)
HDR ; -- header code
"RTN","IBCEP6",10,0)
 K VALMHDR
"RTN","IBCEP6",11,0)
 Q
"RTN","IBCEP6",12,0)
 ;
"RTN","IBCEP6",13,0)
INIT ; Initialization
"RTN","IBCEP6",14,0)
 N IBLCT,IBCT,Z,Z0
"RTN","IBCEP6",15,0)
 S (IBLCT,IBCT)=0,XQORM("B")="Select"
"RTN","IBCEP6",16,0)
 K ^TMP("IBCE_PRVMAINT_MENU",$J)
"RTN","IBCEP6",17,0)
 F Z=1:1:2 S Z0=$J("",10) D SET1(.IBLCT,Z0,1)
"RTN","IBCEP6",18,0)
 S Z0=$J("",17)_"-- PROVIDER ID EDITS --" D SET1(.IBLCT,Z0,1),CNTRL^VALM10(IBLCT,18,23,IORVON,IORVOFF)
"RTN","IBCEP6",19,0)
 S Z0=$J("",10)_"1 > PROVIDER SPECIFIC IDS" D SET1(.IBLCT,Z0,1)
"RTN","IBCEP6",20,0)
 S Z0=$J("",14)_"o PROVIDER'S OWN IDS" D SET1(.IBLCT,Z0,1)
"RTN","IBCEP6",21,0)
 S Z0=$J("",14)_"o PROVIDER IDS FURNISHED BY INSURANCE CO" D SET1(.IBLCT,Z0,1)
"RTN","IBCEP6",22,0)
 S Z0=$J("",10)_"2 > INSURANCE CO IDS" D SET1(.IBLCT,Z0,2)
"RTN","IBCEP6",23,0)
 S Z0=$J("",10)_"3 > FACILITY IDS" D SET1(.IBLCT,Z0,3)
"RTN","IBCEP6",24,0)
 S Z0=$J("",10)_"4 > CARE UNIT MAINTENANCE" D SET1(.IBLCT,Z0,4)
"RTN","IBCEP6",25,0)
 S Z0=$J("",10) D SET1(.IBLCT,Z0,5)
"RTN","IBCEP6",26,0)
 S Z0=$J("",10)_"5 > INS CO BATCH ID ENTRY" D SET1(.IBLCT,Z0,5)
"RTN","IBCEP6",27,0)
 F Z=1:1:2 S Z0=$J("",10) D SET1(.IBLCT,Z0,6)
"RTN","IBCEP6",28,0)
 S Z0=$J("",14)_"-- NON/OTHER VA ENTITY EDITS --" D SET1(.IBLCT,Z0,6),CNTRL^VALM10(IBLCT,15,31,IORVON,IORVOFF)
"RTN","IBCEP6",29,0)
 S Z0=$J("",10)_"6 > NON/OTHER VA PROVIDER ID INFORMATION" D SET1(.IBLCT,Z0,6)
"RTN","IBCEP6",30,0)
 K VALMBG,VALMCNT
"RTN","IBCEP6",31,0)
 S VALMBG=1,VALMCNT=IBLCT
"RTN","IBCEP6",32,0)
 Q
"RTN","IBCEP6",33,0)
 ;
"RTN","IBCEP6",34,0)
SET1(IBLCT,Z0,IBCT) ;
"RTN","IBCEP6",35,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,Z0,$G(IBCT))
"RTN","IBCEP6",36,0)
 Q
"RTN","IBCEP6",37,0)
 ;
"RTN","IBCEP6",38,0)
EXPND ;
"RTN","IBCEP6",39,0)
 Q
"RTN","IBCEP6",40,0)
 ;
"RTN","IBCEP6",41,0)
HELP ;
"RTN","IBCEP6",42,0)
 Q
"RTN","IBCEP6",43,0)
 ;
"RTN","IBCEP6",44,0)
EXIT ;
"RTN","IBCEP6",45,0)
 K ^TMP("IBCE_PRVMAINT_MENU",$J)
"RTN","IBCEP6",46,0)
 D CLEAN^VALM10
"RTN","IBCEP6",47,0)
 Q
"RTN","IBCEP6",48,0)
 ;
"RTN","IBCEP6",49,0)
SEL ;
"RTN","IBCEP6",50,0)
 N Z,Z1,DIR
"RTN","IBCEP6",51,0)
 D FULL^VALM1
"RTN","IBCEP6",52,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCEP6",53,0)
 S Z=+$O(VALMY(0))
"RTN","IBCEP6",54,0)
 I Z,Z<6,'$D(^XUSEC("IB PROVIDER EDIT",DUZ)) S DIR(0)="EA",DIR("A",1)="YOU ARE NOT AUTHORIZED TO EDIT PROVIDER IDS",DIR("A")="Press ENTER to continue" W ! D ^DIR K DIR W ! G SELQ
"RTN","IBCEP6",55,0)
 I Z S Z1=$P($T(ACT+Z),U,2,3) I Z1'="" D @Z1
"RTN","IBCEP6",56,0)
SELQ K VALMBCK,XQORM("B")
"RTN","IBCEP6",57,0)
 S VALMBCK="R",XQORM("B")="Quit"
"RTN","IBCEP6",58,0)
 Q
"RTN","IBCEP6",59,0)
 ;
"RTN","IBCEP6",60,0)
EN1 ; Provider maintenance from the billing screen 8
"RTN","IBCEP6",61,0)
 N DIR,X,Y,IBEDIT
"RTN","IBCEP6",62,0)
 ;S IBEDIT=1
"RTN","IBCEP6",63,0)
 W !
"RTN","IBCEP6",64,0)
 ;S DIR(0)="YA",DIR("B")="NO",DIR("A",1)="WANT TO ATTEMPT TO RESET ALL PROVIDER IDS TO THE CALCULATED",DIR("A")="DEFAULTS FOR THIS BILL?: " D ^DIR K DIR
"RTN","IBCEP6",65,0)
 ;Q:$D(DTOUT)!$D(DUOUT)
"RTN","IBCEP6",66,0)
 ;I Y=1 S IBEDIT=0 D RECALCA^IBCEP2A(IBIFN) W !
"RTN","IBCEP6",67,0)
 ;
"RTN","IBCEP6",68,0)
 I '$D(^XUSEC("IB PROVIDER EDIT",DUZ)) S DIR(0)="EA",DIR("A")="Press ENTER to continue: ",DIR("A",1)="YOU LACK THE SECURITY KEY FOR THIS ACTION" D ^DIR K DIR Q
"RTN","IBCEP6",69,0)
 ;I 'IBEDIT D
"RTN","IBCEP6",70,0)
 ;. S DIR(0)="YA",DIR("A")="WANT TO CONTINUE WITH GENERAL PROVIDER ID MAINTENANCE?: ",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEP6",71,0)
 ;. I $D(DTOUT)!$D(DUOUT)!'Y Q
"RTN","IBCEP6",72,0)
 ;. S IBEDIT=1
"RTN","IBCEP6",73,0)
 D EN
"RTN","IBCEP6",74,0)
 Q
"RTN","IBCEP6",75,0)
 ;
"RTN","IBCEP6",76,0)
ACT ; Actions available
"RTN","IBCEP6",77,0)
 ;;PROVIDER LEVEL ID EDIT^EN^IBCEP5
"RTN","IBCEP6",78,0)
 ;;INS CO LEVEL ID EDIT^EN^IBCEP0
"RTN","IBCEP6",79,0)
 ;;SITE LEVEL ID EDIT^EN^IBCEP7
"RTN","IBCEP6",80,0)
 ;;CARE UNIT EDIT^EN^IBCEP4
"RTN","IBCEP6",81,0)
 ;;BATCH ID ENTRY BY INS CO^EN^IBCEP9
"RTN","IBCEP6",82,0)
 ;;NON-VA PROVIDER EDIT^EN^IBCEP8
"RTN","IBCEP6",83,0)
 ;
"RTN","IBCEP7")
0^31^B81966703
"RTN","IBCEP7",1,0)
IBCEP7 ;ALB/TMP - Functions for fac level PROVIDER ID MAINT ;11-07-00
"RTN","IBCEP7",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232**;21-MAR-94
"RTN","IBCEP7",3,0)
 ;
"RTN","IBCEP7",4,0)
EN ; -- main entry IBCE PRVFAC MAINT
"RTN","IBCEP7",5,0)
 N DIC,X,Y,DIR,DUOUT,DTOUT
"RTN","IBCEP7",6,0)
 D FULL^VALM1
"RTN","IBCEP7",7,0)
 K ^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP7",8,0)
 S DIR(0)="SA^F:FACILITY SECONDARY BILLING IDS;P:PROVIDER IDS",DIR("A")="Select: (F)ACILITY SECONDARY BILLING IDS OR (P)ROVIDER IDS?: "
"RTN","IBCEP7",9,0)
 S DIR("?",1)="FACILITY SECONDARY BILLING IDs are those ids an insurance co. gives the site to",DIR("?",2)=$J("",21)_"identify who is billing them (who they should pay)."
"RTN","IBCEP7",10,0)
 S DIR("?",3)=" ",DIR("?",4)="PROVIDER IDS are those ids the insurance co. assigns to identify who",DIR("?")=$J("",13)_"actually performed the services they are being billed for."
"RTN","IBCEP7",11,0)
 S DIR("B")="FACILITY" W ! D ^DIR K DIR
"RTN","IBCEP7",12,0)
 Q:$D(DUOUT)!$D(DTOUT)
"RTN","IBCEP7",13,0)
 S ^TMP("IBCE_PRVFAC_MAINT_INS",$J)=Y_"^^2"
"RTN","IBCEP7",14,0)
 I Y="F" D  Q:'$P(^TMP("IBCE_PRVFAC_MAINT_INS",$J),U,2)
"RTN","IBCEP7",15,0)
 . S DIC="^DIC(36,",DIC(0)="AEMQ" D ^DIC
"RTN","IBCEP7",16,0)
 . I Y>0 S $P(^TMP("IBCE_PRVFAC_MAINT_INS",$J),U,2)=+Y
"RTN","IBCEP7",17,0)
 D EN^VALM("IBCE PRVFAC MAINT")
"RTN","IBCEP7",18,0)
 Q
"RTN","IBCEP7",19,0)
 ;
"RTN","IBCEP7",20,0)
HDR ; -- hdr code
"RTN","IBCEP7",21,0)
 K VALMHDR
"RTN","IBCEP7",22,0)
 I $P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U)="F" D
"RTN","IBCEP7",23,0)
 . S VALMHDR(1)="INSURANCE CO: "_$P($G(^DIC(36,+$P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U,2),0)),U)
"RTN","IBCEP7",24,0)
 . S VALMHDR(1)=VALMHDR(1)_"   BILLING FACILITY "_$P("PRIMARY ID^SECONDARY IDs",U,+$P(^TMP("IBCE_PRVFAC_MAINT_INS",$J),U,3))
"RTN","IBCEP7",25,0)
 Q
"RTN","IBCEP7",26,0)
 ;
"RTN","IBCEP7",27,0)
INIT ; Initialize
"RTN","IBCEP7",28,0)
 N IBCT,IBD,Z,Z0,Z00,Z1,IBS,IBX,IBDIV
"RTN","IBCEP7",29,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J)
"RTN","IBCEP7",30,0)
 S (IBLCT,IBCT)=0
"RTN","IBCEP7",31,0)
 I $P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U)'="F" D
"RTN","IBCEP7",32,0)
 . S Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  S Z0=$G(^(Z,0)) I '$P($G(^(1)),U,9) I '$P(Z0,U,2)!($P(Z0,U,2)=2) S IBS(0,+$P(Z0,U,2),$P(Z0,U))=Z
"RTN","IBCEP7",33,0)
 ;
"RTN","IBCEP7",34,0)
 I $P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U)="F" D
"RTN","IBCEP7",35,0)
 . N IBINS,IBPARAM
"RTN","IBCEP7",36,0)
 . S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",37,0)
 . S IBINS=+$P(IBPARAM,U,2)
"RTN","IBCEP7",38,0)
 . S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D
"RTN","IBCEP7",39,0)
 .. S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP7",40,0)
 .. Q:'$P(Z0,U,6)!($P(Z0,U,7)="")!$S($P(IBPARAM,U,3)=1:'$P($G(^IBE(355.97,+$P(Z0,U,6),1)),U,9),1:$P($G(^IBE(355.97,+$P(Z0,U,6),1)),U,9))
"RTN","IBCEP7",41,0)
 .. S Z1=$G(^IBE(355.97,+$P(Z0,U,6),0))
"RTN","IBCEP7",42,0)
 .. S IBS(+$P(Z0,U,5),+$P(Z1,U,2)_";"_Z,$P(Z1,U))=+$P(Z0,U,6)_U_$P(Z0,U,7)_U_Z
"RTN","IBCEP7",43,0)
 ;
"RTN","IBCEP7",44,0)
 S IBD="" F  S IBD=$O(IBS(IBD)) Q:IBD=""  D:IBCT SET1(.IBLCT," ",IBCT+1) D SET1(.IBLCT,"DIVISION: "_$$DIV(IBD),IBCT+1) S Z="" F  S Z=$O(IBS(IBD,Z),-1) Q:Z=""  S Z0="" F  S Z0=$O(IBS(IBD,Z,Z0)) Q:Z0=""  S IBX=IBS(IBD,Z,Z0) D
"RTN","IBCEP7",45,0)
 . S IBCT=IBCT+1
"RTN","IBCEP7",46,0)
 . I $P(Z,";",2) D  Q
"RTN","IBCEP7",47,0)
 .. S Z00=$G(^IBA(355.92,+$P(Z,";",2),0))
"RTN","IBCEP7",48,0)
 .. S Z1=$E(IBCT_$J("",3),1,3)_"  "_$E(Z0_$J("",25),1,25)_"   "_$E($S($P(IBX,U,2)'="":$P(IBX,U,2),1:$$IDNUM^IBCEP7A(+IBX))_$J("",15),1,15)_"  "_$P("BOTH^UB92^HCFA^RX",U,$P(Z00,U,4)+1)
"RTN","IBCEP7",49,0)
 .. D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP7",50,0)
 .. S ^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",IBCT)=+$P(Z,";",2)
"RTN","IBCEP7",51,0)
 . I '$P(Z,";",2) D
"RTN","IBCEP7",52,0)
 .. S Z1=$E(IBCT_$J("",3),1,3)_"  "_$E(Z0_$J("",25),1,25)_"   "_$E($S($P(IBX,U,2)'="":$P(IBX,U,2),1:$$IDNUM^IBCEP7A(+IBX))_$J("",15),1,15)_$S(Z=2:"  (Facility Level Only)",1:"")
"RTN","IBCEP7",53,0)
 .. D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP7",54,0)
 .. S ^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",IBCT)=+IBX
"RTN","IBCEP7",55,0)
 I 'IBLCT D
"RTN","IBCEP7",56,0)
 . D SET1(1," ")
"RTN","IBCEP7",57,0)
 . D SET1(2,"No Facility Provider IDs found")
"RTN","IBCEP7",58,0)
 . S IBLCT=2
"RTN","IBCEP7",59,0)
 S VALMBG=1,VALMCNT=IBLCT
"RTN","IBCEP7",60,0)
 Q
"RTN","IBCEP7",61,0)
 ;
"RTN","IBCEP7",62,0)
SET1(IBLCT,TEXT,IBCT) ;
"RTN","IBCEP7",63,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,TEXT,$G(IBCT))
"RTN","IBCEP7",64,0)
 Q
"RTN","IBCEP7",65,0)
 ;
"RTN","IBCEP7",66,0)
DIV(IBD) ; Returns 'ALL/DEFAULT' or div NAME whose ien=IBD
"RTN","IBCEP7",67,0)
 Q $S(IBD:$$EXTERNAL^DILFD(355.92,.05,"",IBD),1:"ALL/DEFAULT")
"RTN","IBCEP7",68,0)
 ;
"RTN","IBCEP7",69,0)
EDIT1 ;
"RTN","IBCEP7",70,0)
 N IBFUNC,IBINS,IBDA,Z,DIR,X,Y,DTOUT,DUOUT,DP
"RTN","IBCEP7",71,0)
 D FULL^VALM1
"RTN","IBCEP7",72,0)
 I $P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U)'="F" D  G EDIT1Q
"RTN","IBCEP7",73,0)
 . D SEL
"RTN","IBCEP7",74,0)
 . I $G(IBDA) S Z=$$EDITFAC(IBDA,"") I Z D INIT
"RTN","IBCEP7",75,0)
 ;
"RTN","IBCEP7",76,0)
 S IBINS=+$P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U,2)
"RTN","IBCEP7",77,0)
 S DIR("A")="DO YOU WANT TO (A)DD, (E)DIT, or (D)ELETE AN ID?: "
"RTN","IBCEP7",78,0)
 S DIR(0)="SA^A:ADD;E:EDIT;D:DELETE",DIR("B")=$S(+$O(^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",0)):"EDIT",1:"ADD")
"RTN","IBCEP7",79,0)
 D ^DIR K DIR
"RTN","IBCEP7",80,0)
 I $D(DTOUT)!$D(DUOUT) G EDIT1Q
"RTN","IBCEP7",81,0)
 ;
"RTN","IBCEP7",82,0)
 S IBFUNC=Y
"RTN","IBCEP7",83,0)
 I IBFUNC="E"!(IBFUNC="D") D
"RTN","IBCEP7",84,0)
 . D SEL
"RTN","IBCEP7",85,0)
 . I $G(IBDA) S Z=$$EDITFAC(IBDA,IBFUNC) I Z D INIT
"RTN","IBCEP7",86,0)
 ;
"RTN","IBCEP7",87,0)
 I IBFUNC="A" D 
"RTN","IBCEP7",88,0)
 . S Z=$$ADDFAC^IBCEP7A(IBINS) I Z D INIT
"RTN","IBCEP7",89,0)
 ;
"RTN","IBCEP7",90,0)
EDIT1Q S VALMBCK="R"
"RTN","IBCEP7",91,0)
 Q
"RTN","IBCEP7",92,0)
EXPND ;
"RTN","IBCEP7",93,0)
 Q
"RTN","IBCEP7",94,0)
HELP ;
"RTN","IBCEP7",95,0)
 Q
"RTN","IBCEP7",96,0)
EXIT ;
"RTN","IBCEP7",97,0)
 S (IBLCT,IBCT)=0
"RTN","IBCEP7",98,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J),^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP7",99,0)
 D CLEAN^VALM10
"RTN","IBCEP7",100,0)
 Q
"RTN","IBCEP7",101,0)
SEL ;
"RTN","IBCEP7",102,0)
 N Z
"RTN","IBCEP7",103,0)
 K IBDA
"RTN","IBCEP7",104,0)
 D FULL^VALM1,EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCEP7",105,0)
 S Z=+$O(VALMY(0)) Q:'Z
"RTN","IBCEP7",106,0)
 S IBDA=$G(^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",Z))
"RTN","IBCEP7",107,0)
 I $P($G(^TMP("IBCE_PRVFAC_MAINT_INS",$J)),U)'="F",$P($G(^IBE(355.97,+IBDA,0)),U,5) D NOEDIT(IBDA) K IBDA Q
"RTN","IBCEP7",108,0)
 ; fac/ins co default
"RTN","IBCEP7",109,0)
 S IBDA=$G(^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",Z))
"RTN","IBCEP7",110,0)
 Q
"RTN","IBCEP7",111,0)
 ;
"RTN","IBCEP7",112,0)
EDITFAC(IBDA,IBFUNC) ; Edits fac def entry in file 355.97 for Prov type IBDA
"RTN","IBCEP7",113,0)
 ;  OR edits ins co facility id (355.92), entry IBDA
"RTN","IBCEP7",114,0)
 N IBRBLD,Z,Z0,DIK,DIE,DP,DA,DR,DIR,X,Y,IBDA0,IBDIV,IBITYP,IBFORM
"RTN","IBCEP7",115,0)
 S IBRBLD=0 S:$G(IBDA) IBDA0=$G(^IBA(355.92,+IBDA,0))
"RTN","IBCEP7",116,0)
 I IBFUNC="" D
"RTN","IBCEP7",117,0)
 . S Z=$$IDNUM^IBCEP7A(IBDA)
"RTN","IBCEP7",118,0)
 . S DIR(0)="FAO^1:15"
"RTN","IBCEP7",119,0)
 . S DIR("A")=$P($G(^IBE(355.97,IBDA,0)),U)_": "_$S(Z'="":Z_"// ",1:"")_" "
"RTN","IBCEP7",120,0)
 . S DIR("?")="^N IBHELP,Z D HELP^DIE(355.97,,.04,""A"",""IBHELP"") S Z=0 F  S Z=$O(IBHELP(""DIHELP"",Z)) Q:'Z  W !,IBHELP(""DIHELP"",Z)"
"RTN","IBCEP7",121,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP7",122,0)
 . I Y'=""!(X="@") D
"RTN","IBCEP7",123,0)
 .. N IBOUT
"RTN","IBCEP7",124,0)
 .. S:X="@" Y=X,IBOUT=0
"RTN","IBCEP7",125,0)
 .. I Y="@" D
"RTN","IBCEP7",126,0)
 ... N Y
"RTN","IBCEP7",127,0)
 ... S DIR(0)="YA",DIR("B")="NO",DIR("A")="Are you sure you want to delete this id?: " W ! D ^DIR K DIR W !
"RTN","IBCEP7",128,0)
 ... I Y'=1!$D(DUOUT)!$D(DTOUT) S IBOUT=1 Q
"RTN","IBCEP7",129,0)
 ... S IBRBLD=1
"RTN","IBCEP7",130,0)
 .. I '$G(IBOUT) S DIE="^IBE(355.97,",DA=IBDA,DR=".04///"_$S(Y'="@":"/",1:"")_Y D ^DIE I '$D(Y) S IBRBLD=1
"RTN","IBCEP7",131,0)
 ;
"RTN","IBCEP7",132,0)
 I IBFUNC="E" D
"RTN","IBCEP7",133,0)
 . S Z0=$TR(IBDA0,U)
"RTN","IBCEP7",134,0)
 . Q:'$$FACFLDS(IBDA,IBINS,.IBITYP,.IBFORM,.IBDIV,"E")
"RTN","IBCEP7",135,0)
 . S DIE="^IBA(355.92,",DR=".04////"_IBFORM_$S(IBDIV:";.05////"_IBDIV,1:"")_";.06////"_IBITYP_";.07R",DA=IBDA D ^DIE
"RTN","IBCEP7",136,0)
 . I $TR($G(^IBA(355.92,IBDA,0)),U)'=Z0 S IBRBLD=1
"RTN","IBCEP7",137,0)
 . ;
"RTN","IBCEP7",138,0)
 I IBFUNC="D" D
"RTN","IBCEP7",139,0)
 . W !!,"INSURANCE CO: ",$P($G(^DIC(36,+IBDA0,0)),U)
"RTN","IBCEP7",140,0)
 . W !,"    DIVISION: ",$$DIV($P(IBDA0,U,5))
"RTN","IBCEP7",141,0)
 . W !,"     ID TYPE: ",$$EXTERNAL^DILFD(355.92,.06,"",$P(IBDA0,U,6))
"RTN","IBCEP7",142,0)
 . W !,"   FORM TYPE: ",$$EXTERNAL^DILFD(355.92,.04,"",$P(IBDA0,U,4))
"RTN","IBCEP7",143,0)
 . W !,"          ID: ",$P(IBDA0,U,7),!
"RTN","IBCEP7",144,0)
 . S DIR(0)="YA",DIR("A")="ARE YOU SURE YOU WANT TO DELETE THIS ID RECORD?: ",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEP7",145,0)
 . S DIR("A")="NOTHING DELETED - PRESS RETURN TO CONTINUE: "
"RTN","IBCEP7",146,0)
 . I Y=1 S DIK="^IBA(355.92,",DA=IBDA D ^DIK S DIR("A")="ID DELETED - PRESS RETURN TO CONTINUE: ",IBRBLD=1
"RTN","IBCEP7",147,0)
 . S DIR(0)="EA" W ! D ^DIR K DIR
"RTN","IBCEP7",148,0)
 ;
"RTN","IBCEP7",149,0)
 Q IBRBLD
"RTN","IBCEP7",150,0)
 ;
"RTN","IBCEP7",151,0)
FACID(Y) ;
"RTN","IBCEP7",152,0)
 N Z,Z1,Z2
"RTN","IBCEP7",153,0)
 S Z=U_$P($G(^IBE(355.97,+Y,0)),U,3)_U,Z1=$$SUB2^IBCEF73(1),Z2=$$SUB2^IBCEF73(2)
"RTN","IBCEP7",154,0)
 I Z1[Z!(Z2[Z) Q 1
"RTN","IBCEP7",155,0)
 Q 0
"RTN","IBCEP7",156,0)
 ;
"RTN","IBCEP7",157,0)
FACFLDS(IBDA,IBINS,IBITYP,IBFORM,IBDIV,IBFUNC) ; Chk for dups on fac id fld combos
"RTN","IBCEP7",158,0)
 N IB,IB,IBOK,DIC,DIR,X,Y,DTOUT,DUOUT,Z,Z0,DIE,DA,IBMAIN,IBQUIT,IBPARAM
"RTN","IBCEP7",159,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",160,0)
 S (IBQUIT,IBOK)=0,DA=$G(IBDA),IBMAIN=$$MAIN^IBCEP2B()
"RTN","IBCEP7",161,0)
 S DIR("A")="DIVISION: ",DIR(0)="355.92,.05AO",DIR("B")=$$EXTERNAL^DILFD(355.92,.05,"",IBMAIN) W ! D ^DIR K DIR
"RTN","IBCEP7",162,0)
 G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7",163,0)
 S IBDIV=+$S(Y>0:+Y,1:0)
"RTN","IBCEP7",164,0)
 I IBDIV=IBMAIN S IBDIV=0
"RTN","IBCEP7",165,0)
 I $P(IBPARAM,U,3)'=1 D
"RTN","IBCEP7",166,0)
 . S DIR("?")="CANNOT BE STATE LIC # or BILLING FACILITY PRIMARY"
"RTN","IBCEP7",167,0)
 . S DIR("A")="TYPE OF ID: ",DIR(0)="355.92,.06A^^K:'$$FACID^IBCEP7(+Y)!$P($G(^IBE(355.97,+Y,1)),U,9)!($P($G(^(0)),U,3)=""0B"") X" W ! D ^DIR K DIR
"RTN","IBCEP7",168,0)
 . I $D(DTOUT)!$D(DUOUT) S IBQUIT=1
"RTN","IBCEP7",169,0)
 E  D
"RTN","IBCEP7",170,0)
 . S Y=$$BF^IBCU()
"RTN","IBCEP7",171,0)
 . W !,"TYPE OF ID: ",$P($G(^IBE(355.97,+Y,0)),U)
"RTN","IBCEP7",172,0)
 G:IBQUIT FLDSQ
"RTN","IBCEP7",173,0)
 S IBITYP=$P(Y,U)
"RTN","IBCEP7",174,0)
 S DIR("A")="FORM TYPE APPLIED TO: ",DIR(0)=$S($P(IBPARAM,U,3)'=1:"355.92,.04A",1:"SA^1:UB92;2:HCFA 1500")
"RTN","IBCEP7",175,0)
 S:$P(IBPARAM,U,3)=1&$G(IBDA) DIR("B")=$P("UB92^HCFA 1500",U,+$P($G(^IBA(355.92,IBDA,0)),U,4))
"RTN","IBCEP7",176,0)
 I $P($G(^IBE(355.97,+IBITYP,0)),U,3)="1B"!($P($G(^IBE(355.97,+IBITYP,0)),U,3)="1A") D
"RTN","IBCEP7",177,0)
 . S $P(DIR(0),U,3)="I +Y'=3 K:+Y'="_$S($P(^IBE(355.97,+IBITYP,0),U,3)="1A":1,1:2)_" X"
"RTN","IBCEP7",178,0)
 . S DIR("?")="FOR AN ID TYPE OF "_$$EXTERNAL^DILFD(355.9,.04,"",IBITYP)_", ONLY "_$S($P(^IBE(355.97,+IBITYP,0),U,3)="1A":"UB92",1:"HCFA")_" OR Rx IS VALID"
"RTN","IBCEP7",179,0)
 D ^DIR K DIR
"RTN","IBCEP7",180,0)
 G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7",181,0)
 S IBFORM=$P(Y,U)
"RTN","IBCEP7",182,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  S Z0=$G(^IBA(355.92,Z,0)) I $P(Z0,U,6)=IBITYP S:$S(IBFUNC'="E":1,1:Z'=IBDA) IB($P(Z0,U,4),+$P(Z0,U,5))=Z
"RTN","IBCEP7",183,0)
 S IBOK=1
"RTN","IBCEP7",184,0)
 I IBFUNC="E" S Z0=$G(^IBA(355.92,IBDA,0)) I IBFORM=$P(Z0,U,4),IBDIV=$P(Z0,U,5),IBITYP=$P(Z0,U,6) G FLDSQ
"RTN","IBCEP7",185,0)
 I $G(IB(IBFORM,IBDIV)) S IBOK="0^DUPLICATE"
"RTN","IBCEP7",186,0)
 I IBOK,IBFORM=0,$S($D(IB(1,IBDIV))!$D(IB(2,IBDIV)):1,1:0) S IBOK="0^FORM^SPECIFIC"
"RTN","IBCEP7",187,0)
 I IBOK,IBFORM'=0,IBFORM'=3,$S($D(IB(0,IBDIV)):1,1:0) S IBOK="0^FORM^BOTH"
"RTN","IBCEP7",188,0)
 ;
"RTN","IBCEP7",189,0)
 I 'IBOK D
"RTN","IBCEP7",190,0)
 . I $P(IBOK,U,2)="DUPLICATE" D  Q
"RTN","IBCEP7",191,0)
 .. S DIR("A",1)="THIS ID COMBINATION ALREADY EXISTS"_$S(IBFUNC="A":" - TRY EDITING IT INSTEAD",1:""),DIR("A",2)=" "
"RTN","IBCEP7",192,0)
 . ;
"RTN","IBCEP7",193,0)
 . I $P(IBOK,U,2)="BOTH" D  Q
"RTN","IBCEP7",194,0)
 .. S DIR("A",1)="AN ID COMBINATION FOR BOTH FORM TYPES ALREADY EXISTS.  DELETE THIS ONE",DIR("A",2)="BEFORE DEFINING ANY FORM SPECIFIC IDs"_$S(IBDIV:" FOR THIS DIVISION"),DIR("A",4)=" "
"RTN","IBCEP7",195,0)
 . ;
"RTN","IBCEP7",196,0)
 . I $P(IBOK,U,2)="FORM" D  Q
"RTN","IBCEP7",197,0)
 .. I $P(IBOK,U,3)="BOTH" S DIR("A",1)="THIS ID ALREADY EXISTS FOR BOTH FORM TYPES - DELETE IT TO ENTER THIS ID FOR",DIR("A",2)=" A SPECIFIC FORM TYPE",DIR("A",3)=" " Q
"RTN","IBCEP7",198,0)
 .. S DIR("A",1)="THIS ID ALREADY EXISTS FOR A SPECIFIC FORM TYPE - DELETE SPECIFIC FORM TYPE",DIR("A",2)=" ID(s) BEFORE ENTERING ONE FOR BOTH FORM TYPES",DIR("A",3)=" "
"RTN","IBCEP7",199,0)
 . ;
"RTN","IBCEP7",200,0)
 ;
"RTN","IBCEP7",201,0)
 I 'IBOK S DIR(0)="EA",DIR("A")="PRESS RETURN TO CONTINUE: " W ! D ^DIR K DIR
"RTN","IBCEP7",202,0)
 ;
"RTN","IBCEP7",203,0)
FLDSQ Q +IBOK
"RTN","IBCEP7",204,0)
 ;
"RTN","IBCEP7",205,0)
NOEDIT(IBDA) ; Display no edit msg for entries in file 355.97
"RTN","IBCEP7",206,0)
 N DIR,X,Y
"RTN","IBCEP7",207,0)
 S DIR(0)="EA",DIR("A",1)="The PROVIDER ID TYPE ("_$P(^IBE(355.97,+IBDA,0),U)_") cannot be edited",DIR("A")="PRESS ENTER TO CONTINUE" W ! D ^DIR W ! K DIR
"RTN","IBCEP7",208,0)
 Q
"RTN","IBCEP7",209,0)
 ;
"RTN","IBCEP7A")
0^47^B3300559
"RTN","IBCEP7A",1,0)
IBCEP7A ;ALB/TMP - Functions for fac level PROVIDER ID MAINT ;11-07-00
"RTN","IBCEP7A",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEP7A",3,0)
 ;
"RTN","IBCEP7A",4,0)
IDNUM(IBIEN) ; Find site-default id # for id type
"RTN","IBCEP7A",5,0)
 ; IBIEN = ien of prov ID type (file 355.97)
"RTN","IBCEP7A",6,0)
 N IBID,Z0,Z1
"RTN","IBCEP7A",7,0)
 S IBID=""
"RTN","IBCEP7A",8,0)
 S Z0=$G(^IBE(355.97,IBIEN,0)),Z1=$G(^(1))
"RTN","IBCEP7A",9,0)
 I $P(Z1,U,9) G IDNUMQ
"RTN","IBCEP7A",10,0)
 I $P(Z0,U,4)'="" S IBID=$P(Z0,U,4) G IDNUMQ
"RTN","IBCEP7A",11,0)
 I $P(Z1,U,4) S IBID=$P($G(^IBE(350.9,1,1)),U,5)
"RTN","IBCEP7A",12,0)
 ;
"RTN","IBCEP7A",13,0)
IDNUMQ Q IBID
"RTN","IBCEP7A",14,0)
 ;
"RTN","IBCEP7A",15,0)
ADDFAC(IBINS) ; Add a new fac id for an ins co
"RTN","IBCEP7A",16,0)
 N IB,IBDIV,IBY,IBOK,IBRBLD,IBITYP,IBFORM,DIC,DIR,X,Y,DTOUT,DUOUT,DLAYGO,DO,DD,Z,Z0,DIE,DIK,DA
"RTN","IBCEP7A",17,0)
 S IBRBLD=0,IBY=-1
"RTN","IBCEP7A",18,0)
 S IBOK=$$FACFLDS^IBCEP7("",IBINS,.IBITYP,.IBFORM,.IBDIV,"A")
"RTN","IBCEP7A",19,0)
 I 'IBOK G ADDFQ
"RTN","IBCEP7A",20,0)
 ;
"RTN","IBCEP7A",21,0)
 S X=IBINS,DIC(0)="L",DIC="^IBA(355.92,",DIC("DR")=".04////"_IBFORM_$S($G(IBDIV):";.05////"_IBDIV,1:"")_";.06////"_IBITYP_";.07R",DLAYGO=355.92 D FILE^DICN K DIC,DLAYGO,DO,DD
"RTN","IBCEP7A",22,0)
 S IBY=+Y
"RTN","IBCEP7A",23,0)
ADDFQ I IBY>0,$P($G(^IBA(355.92,IBY,0)),U,7)="" S DIK="^IBA(355.92,",DA=IBY D ^DIK S IBY=-1
"RTN","IBCEP7A",24,0)
 I IBY'>0 S DIR("A",+$O(DIR("A"," "),-1)+1)="A NEW ID WAS NOT ADDED",IBRBLD=0
"RTN","IBCEP7A",25,0)
 I IBY>0 S DIR("A",1)="A NEW ID WAS ADDED SUCCESSFULLY",IBRBLD=1
"RTN","IBCEP7A",26,0)
 S DIR(0)="EA",DIR("A")="PRESS RETURN TO CONTINUE: " W ! D ^DIR K DIR
"RTN","IBCEP7A",27,0)
 Q IBRBLD
"RTN","IBCEP7A",28,0)
 ;
"RTN","IBCEP8")
0^8^B34456907
"RTN","IBCEP8",1,0)
IBCEP8 ;ALB/TMP - Functions for NON-VA PROVIDER ;11-07-00
"RTN","IBCEP8",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232**;21-MAR-94
"RTN","IBCEP8",3,0)
 ;
"RTN","IBCEP8",4,0)
EN ; -- main entry point
"RTN","IBCEP8",5,0)
 N IBNPRV
"RTN","IBCEP8",6,0)
 D FULL^VALM1
"RTN","IBCEP8",7,0)
 D EN^VALM("IBCE PRVNVA MAINT")
"RTN","IBCEP8",8,0)
 Q
"RTN","IBCEP8",9,0)
 ;
"RTN","IBCEP8",10,0)
HDR ; -- header code
"RTN","IBCEP8",11,0)
 K VALMHDR
"RTN","IBCEP8",12,0)
 Q
"RTN","IBCEP8",13,0)
 ;
"RTN","IBCEP8",14,0)
INIT ; Initialization
"RTN","IBCEP8",15,0)
 N DIC,DA,X,Y,DLAYGO,IBIF,DIR,DTOUT,DUOUT
"RTN","IBCEP8",16,0)
 K ^TMP("IBCE_PRVNVA_MAINT",$J)
"RTN","IBCEP8",17,0)
 S DIR("A")="(I)NDIVIDUAL OR (F)ACILITY?: ",DIR(0)="SA^I:INDIVIDUAL;F:FACILITY" D ^DIR K DIR
"RTN","IBCEP8",18,0)
 I $D(DUOUT)!$D(DTOUT) S VALMQUIT=1 G INITQ
"RTN","IBCEP8",19,0)
 S IBIF=Y
"RTN","IBCEP8",20,0)
 S DIC="^IBA(355.93,",DIC("DR")=".02////"_$S(IBIF'="F":2,1:1)
"RTN","IBCEP8",21,0)
 S DIC("S")="I $P(^(0),U,2)="_$S(IBIF'="F":2,1:1)
"RTN","IBCEP8",22,0)
 S DLAYGO=355.93,DIC(0)="AELMQ",DIC("A")="Select a NON"_$S(IBIF="I":"-",1:"/OTHER ")_"VA PROVIDER: "
"RTN","IBCEP8",23,0)
 D ^DIC K DIC,DLAYGO
"RTN","IBCEP8",24,0)
 I Y'>0 S VALMQUIT=1 G INITQ
"RTN","IBCEP8",25,0)
 S IBNPRV=+Y
"RTN","IBCEP8",26,0)
 D BLD
"RTN","IBCEP8",27,0)
INITQ Q
"RTN","IBCEP8",28,0)
 ;
"RTN","IBCEP8",29,0)
BLD ; Build/Rebuild display
"RTN","IBCEP8",30,0)
 N IBLCT,IBCT,Z,Z1
"RTN","IBCEP8",31,0)
 S (IBLCT,IBCT)=0,Z=$G(^IBA(355.93,IBNPRV,0))
"RTN","IBCEP8",32,0)
 S IBCT=IBCT+1
"RTN","IBCEP8",33,0)
 S Z1=$J("",10)_"       NAME: "_$P(Z,U) D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",34,0)
 S IBCT=IBCT+1
"RTN","IBCEP8",35,0)
 S Z1=$J("",10)_"       TYPE: "_$S($P(Z,U,2)=2:"INDIVIDUAL PROVIDER",1:"OUTSIDE OR OTHER VA FACILITY") D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",36,0)
 I $P(Z,U,2)=2 D
"RTN","IBCEP8",37,0)
 . S IBCT=IBCT+1
"RTN","IBCEP8",38,0)
 . S Z1=$J("",10)_"CREDENTIALS: "_$P(Z,U,3) D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",39,0)
 . S IBCT=IBCT+1
"RTN","IBCEP8",40,0)
 . S Z1=$J("",10)_"  SPECIALTY: "_$P(Z,U,4) D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",41,0)
 E  D
"RTN","IBCEP8",42,0)
 . S IBCT=IBCT+1
"RTN","IBCEP8",43,0)
 . S Z1=" " D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",44,0)
 . S IBCT=IBCT+1
"RTN","IBCEP8",45,0)
 . S Z1=$J("",10)_"    ADDRESS: "_$P(Z,U,5) D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",46,0)
 . I $P(Z,U,10) D
"RTN","IBCEP8",47,0)
 .. S IBCT=IBCT+1
"RTN","IBCEP8",48,0)
 .. S Z1=$J("",23)_$P(Z,U,10)
"RTN","IBCEP8",49,0)
 . S IBCT=IBCT+1
"RTN","IBCEP8",50,0)
 . S Z1=$J("",23)_$P(Z,U,6)_$S($P(Z,U,6)'="":", ",1:"")_$S($P(Z,U,7):$$EXTERNAL^DILFD(355.93,.07,"",$P(Z,U,7))_"  ",1:"")_$P(Z,U,8) D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP8",51,0)
 K VALMBG,VALMCNT
"RTN","IBCEP8",52,0)
 S VALMBG=1,VALMCNT=IBLCT
"RTN","IBCEP8",53,0)
 Q
"RTN","IBCEP8",54,0)
 ;
"RTN","IBCEP8",55,0)
SET1(IBLCT,TEXT,IBCT) ;
"RTN","IBCEP8",56,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,TEXT,$G(IBCT))
"RTN","IBCEP8",57,0)
 Q
"RTN","IBCEP8",58,0)
EXPND ;
"RTN","IBCEP8",59,0)
 Q
"RTN","IBCEP8",60,0)
 ;
"RTN","IBCEP8",61,0)
HELP ;
"RTN","IBCEP8",62,0)
 Q
"RTN","IBCEP8",63,0)
 ;
"RTN","IBCEP8",64,0)
EXIT ;
"RTN","IBCEP8",65,0)
 K ^TMP("IBCE_PRVNVA_MAINT",$J)
"RTN","IBCEP8",66,0)
 D CLEAN^VALM10
"RTN","IBCEP8",67,0)
 Q
"RTN","IBCEP8",68,0)
 ;
"RTN","IBCEP8",69,0)
EDIT1(IBNPRV) ; Edit non-VA provider/facility demographics
"RTN","IBCEP8",70,0)
 ; IBNPRV = ien of entry in file 355.93
"RTN","IBCEP8",71,0)
 ;
"RTN","IBCEP8",72,0)
 N DA,X,Y,DIE,DR,IBP
"RTN","IBCEP8",73,0)
 D FULL^VALM1
"RTN","IBCEP8",74,0)
 I IBNPRV D
"RTN","IBCEP8",75,0)
 . D CLEAR^VALM1
"RTN","IBCEP8",76,0)
 . S DIE="^IBA(355.93,",DA=IBNPRV,IBP=($P($G(^IBA(355.93,IBNPRV,0)),U,2)=2)
"RTN","IBCEP8",77,0)
 . S DR=".01;"_$S(IBP:".03;.04",1:".05;.1;.06;.07;.08;.09;.11")
"RTN","IBCEP8",78,0)
 . D ^DIE
"RTN","IBCEP8",79,0)
 . D BLD
"RTN","IBCEP8",80,0)
 K VALMBCK
"RTN","IBCEP8",81,0)
 S VALMBCK="R"
"RTN","IBCEP8",82,0)
 Q
"RTN","IBCEP8",83,0)
 ;
"RTN","IBCEP8",84,0)
EDITID(IBNPRV) ; Link from this list template to maintain provider-specific ids
"RTN","IBCEP8",85,0)
 ; IBNPRV = ien of entry in file 355.93
"RTN","IBCEP8",86,0)
 N IBPRV
"RTN","IBCEP8",87,0)
 D FULL^VALM1
"RTN","IBCEP8",88,0)
 D CLEAR^VALM1
"RTN","IBCEP8",89,0)
 S IBPRV=IBNPRV
"RTN","IBCEP8",90,0)
 D EN1^IBCEP5
"RTN","IBCEP8",91,0)
 K VALMQUIT
"RTN","IBCEP8",92,0)
 S VALMBCK="R"
"RTN","IBCEP8",93,0)
 Q
"RTN","IBCEP8",94,0)
 ;
"RTN","IBCEP8",95,0)
NVAFAC ; Enter/edit Non-VA facility information
"RTN","IBCEP8",96,0)
 N X,Y,DA,DIC,IBNPRV,DLAYGO
"RTN","IBCEP8",97,0)
 S DIC="^IBA(355.93,",DIC("S")="I $P(^(0),U,2)=1",DIC("DR")=".02////1"
"RTN","IBCEP8",98,0)
 S DLAYGO=355.93,DIC(0)="AELMQ",DIC("A")="Select a NON/Other VA FACILITY: "
"RTN","IBCEP8",99,0)
 D ^DIC K DIC,DLAYGO
"RTN","IBCEP8",100,0)
 I Y'>0 S VALMQUIT=1 G NVAFACQ
"RTN","IBCEP8",101,0)
 S IBNPRV=+Y
"RTN","IBCEP8",102,0)
 D EDIT1(IBNPRV)
"RTN","IBCEP8",103,0)
 ;
"RTN","IBCEP8",104,0)
NVAFACQ Q
"RTN","IBCEP8",105,0)
 ;
"RTN","IBCEP8",106,0)
GETFAC(IB,IBFILE,IBELE) ; Returns facility name,address lines or city-state-zip
"RTN","IBCEP8",107,0)
 ; IB = ien of entry in file
"RTN","IBCEP8",108,0)
 ; IBFILE = 0 for retrieval from file 4, 1 for retrieval from file 355.93
"RTN","IBCEP8",109,0)
 ; If IBELE=0, returns name
"RTN","IBCEP8",110,0)
 ;         =1, returns address line 1
"RTN","IBCEP8",111,0)
 ;         =2, returns address line 2
"RTN","IBCEP8",112,0)
 ;         =3, returns city, state zip
"RTN","IBCEP8",113,0)
 ;         = "3C", returns city  = "3S", state    = "3Z", zip
"RTN","IBCEP8",114,0)
 ;
"RTN","IBCEP8",115,0)
 N Z,IBX
"RTN","IBCEP8",116,0)
 S IBX=""
"RTN","IBCEP8",117,0)
 S Z=$S('IBFILE:$G(^DIC(4,+IB,1)),1:$G(^IBA(355.93,+IB,0)))
"RTN","IBCEP8",118,0)
 I +IBELE=0 S IBX=$S('IBFILE:$P($G(^DIC(4,+IB,0)),U),1:$P($G(^IBA(355.93,+IB,0)),U))
"RTN","IBCEP8",119,0)
 I IBELE=1!(IBELE=12) S IBX=$S('IBFILE:$P(Z,U),1:$P(Z,U,5))
"RTN","IBCEP8",120,0)
 I IBELE=2!(IBELE=12) S IBX=$S(IBELE=12:IBX_" ",1:"")_$S('IBFILE:$P(Z,U,2),1:$P(Z,U,10))
"RTN","IBCEP8",121,0)
 I +IBELE=3,'IBFILE D
"RTN","IBCEP8",122,0)
 . S:IBELE=3!(IBELE["C") IBX=$P(Z,U,3) Q:IBELE["C"
"RTN","IBCEP8",123,0)
 . S:IBELE=3 IBX=IBX_$S(IBX'="":", ",1:"") S:IBELE=3!(IBELE["S") IBX=IBX_$$STATE^IBCEFG1($P($G(^DIC(4,+IB,0)),U,2)) Q:IBELE["S"
"RTN","IBCEP8",124,0)
 . S:IBELE=3 IBX=IBX_" " S:IBELE=3!(IBELE["Z") IBX=IBX_$P(Z,U,4)
"RTN","IBCEP8",125,0)
 I +IBELE=3,IBFILE D
"RTN","IBCEP8",126,0)
 . S:IBELE=3!(IBELE["C") IBX=$P(Z,U,6) Q:IBELE["C"
"RTN","IBCEP8",127,0)
 . S:IBELE=3 IBX=IBX_$S(IBX'="":", ",1:"") S:IBELE=3!(IBELE["S") IBX=IBX_$$STATE^IBCEFG1($P(Z,U,7))
"RTN","IBCEP8",128,0)
 . S:IBELE=3 IBX=IBX_" " S:IBELE=3!(IBELE["Z") IBX=IBX_$P(Z,U,8)
"RTN","IBCEP8",129,0)
 Q IBX
"RTN","IBCEP8",130,0)
 ;
"RTN","IBCEP8",131,0)
ALLID(IBPRV,IBPTYP,IBZ) ; Returns array IBZ for all ids for provider IBPRV
"RTN","IBCEP8",132,0)
 ; for all provider id types or for id type in IBPTYP
"RTN","IBCEP8",133,0)
 ; IBPRV = vp ien of provider
"RTN","IBCEP8",134,0)
 ; IBPTYP = ien of provider id type to return or "" for all
"RTN","IBCEP8",135,0)
 ; IBZ = array returned with internal data:
"RTN","IBCEP8",136,0)
 ;  IBZ(file 355.9 ien)=ID type^ID#^ins co^form typ^bill care typ^care un^X12 code for id type
"RTN","IBCEP8",137,0)
 N Z,Z0
"RTN","IBCEP8",138,0)
 K IBZ
"RTN","IBCEP8",139,0)
 G:'$G(IBPRV) ALLIDQ
"RTN","IBCEP8",140,0)
 S IBPTYP=$G(IBPTYP)
"RTN","IBCEP8",141,0)
 S Z=0 F  S Z=$O(^IBA(355.9,"B",IBPRV,Z)) Q:'Z  S Z0=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP8",142,0)
 . I $S(IBPTYP="":1,1:($P(Z0,U,6)=IBPTYP)) S IBZ(Z)=($P(Z0,U,6)_U_$P(Z0,U,7)_U_$P(Z0,U,2)_U_$P(Z0,U,4)_U_$P(Z0,U,5)_U_$P(Z0,U,3))_U_$P($G(^IBE(355.97,+$P(Z0,U,6),0)),U,3)
"RTN","IBCEP8",143,0)
 ;
"RTN","IBCEP8",144,0)
ALLIDQ Q
"RTN","IBCEP8",145,0)
 ;
"RTN","IBCEP8",146,0)
CLIA() ; Returns ien of CLIA # provider id type
"RTN","IBCEP8",147,0)
 N Z,IBZ
"RTN","IBCEP8",148,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,0)),U,3)="X4",$P(^(0),U)["CLIA" S IBZ=Z Q
"RTN","IBCEP8",149,0)
 Q IBZ
"RTN","IBCEP8",150,0)
 ;
"RTN","IBCEP8",151,0)
STLIC() ; Returns ien of STLIC# provider id type
"RTN","IBCEP8",152,0)
 N Z,IBZ
"RTN","IBCEP8",153,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,3) S IBZ=Z Q
"RTN","IBCEP8",154,0)
 Q IBZ
"RTN","IBCEP8",155,0)
 ;
"RTN","IBCEP8",156,0)
TAXID() ; Returns ien of Fed tax id provider id type
"RTN","IBCEP8",157,0)
 N Z,IBZ
"RTN","IBCEP8",158,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,4) S IBZ=Z Q
"RTN","IBCEP8",159,0)
 Q IBZ
"RTN","IBCEP8",160,0)
 ;
"RTN","IBCEP8",161,0)
CLIANVA(IBIFN) ; Returns CLIA # for a non-VA facility on bill ien IBIFN
"RTN","IBCEP8",162,0)
 N IBCLIA,IBZ,IBNVA,Z
"RTN","IBCEP8",163,0)
 S IBCLIA="",IBZ=$$CLIA()
"RTN","IBCEP8",164,0)
 I IBZ D
"RTN","IBCEP8",165,0)
 . S IBNVA=$P($G(^DGCR(399,IBIFN,"U2")),U,10) Q:'IBNVA
"RTN","IBCEP8",166,0)
 . S IBCLIA=$$IDFIND^IBCEP2(IBIFN,IBZ,IBNVA_";IBA(355.93,")
"RTN","IBCEP8",167,0)
 Q IBCLIA
"RTN","IBCEP8",168,0)
 ;
"RTN","IBCEP8",169,0)
VALFAC(X) ; Function returns 1 if format is valid for X12 facility name
"RTN","IBCEP8",170,0)
 ; Alpha/numeric/certain punctuation valid.  Must start with an Alpha
"RTN","IBCEP8",171,0)
 N OK,VAL
"RTN","IBCEP8",172,0)
 S OK=1
"RTN","IBCEP8",173,0)
 S VAL("A")="",VAL("N")="",VAL=",.- "
"RTN","IBCEP8",174,0)
 I $E(X)'?1A!'$$VALFMT(X,.VAL) S OK=0
"RTN","IBCEP8",175,0)
 Q OK
"RTN","IBCEP8",176,0)
 ;
"RTN","IBCEP8",177,0)
VALFMT(X,VAL) ; Returns 1 if format of X is valid, 0 if not
"RTN","IBCEP8",178,0)
 ; X = data to be examined
"RTN","IBCEP8",179,0)
 ; VAL = a 'string' of valid characters AND/OR (passed by reference)
"RTN","IBCEP8",180,0)
 ;    if VAL("A") defined ==> Alpha
"RTN","IBCEP8",181,0)
 ;    if VAL("A") defined ==> Numeric valid
"RTN","IBCEP8",182,0)
 ;    if VAL("A") defined ==> Punctuation valid
"RTN","IBCEP8",183,0)
 ;   any other character included in the string is checked individually
"RTN","IBCEP8",184,0)
 N Z
"RTN","IBCEP8",185,0)
 I $D(VAL("A")) D
"RTN","IBCEP8",186,0)
 . N Z0
"RTN","IBCEP8",187,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1A S Z0(Z)=""
"RTN","IBCEP8",188,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",189,0)
 I $D(VAL("N")) D
"RTN","IBCEP8",190,0)
 . N Z0
"RTN","IBCEP8",191,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1N S Z0(Z)=""
"RTN","IBCEP8",192,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",193,0)
 I $D(VAL("P")) D
"RTN","IBCEP8",194,0)
 . N Z0
"RTN","IBCEP8",195,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1P S Z0(Z)=""
"RTN","IBCEP8",196,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",197,0)
 I $G(VAL)'="" S X=$TR(X,VAL,"")
"RTN","IBCEP8",198,0)
 Q (X="")
"RTN","IBCEP8",199,0)
 ;
"RTN","IBCEP8",200,0)
PS(IBXSAVE) ; Returns 1 if IBXSAVE("PSVC") indicates the svc was non-lab
"RTN","IBCEP8",201,0)
 ; 
"RTN","IBCEP8",202,0)
 Q $S($G(IBXSAVE("PSVC"))="":0,1:"13"[IBXSAVE("PSVC"))
"RTN","IBCEP8",203,0)
 ;
"RTN","IBCEQ1")
0^43^B30063077
"RTN","IBCEQ1",1,0)
IBCEQ1 ;BSL,ALB/TMK - PROVIDER ID QUERY ;25-AUG-03
"RTN","IBCEQ1",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEQ1",3,0)
 ;
"RTN","IBCEQ1",4,0)
 ;QUERY TOOL HELPS IDENTIFY PLANS THAT ARE LACKING PROVIDER ID
"RTN","IBCEQ1",5,0)
 ;INFO OR HAVE BAD PROVIDER ID DATA FOR E-BILLING
"RTN","IBCEQ1",6,0)
 ;
"RTN","IBCEQ1",7,0)
 ;CONDITIONS TO IDENTIFY:
"RTN","IBCEQ1",8,0)
 ;1-BLUE CROSS LINKED TO HCFA ONLY (1) HARD ERROR
"RTN","IBCEQ1",9,0)
 ;2-BLUE SHIELD LINKED TO UB92 ONLY (2) WARNING
"RTN","IBCEQ1",10,0)
 ;3-BLUE CROSS ID APPLIED TO BOTH FORMS (0) WARNING
"RTN","IBCEQ1",11,0)
 ;4-BLUE CROSS OR BLUE SHIELD IDs EXIST FOR AN INS CO, BUT ONE OR
"RTN","IBCEQ1",12,0)
 ;  MORE OF THE INSURANCE COMPANY'S PLANS DOES NOT HAVE AN
"RTN","IBCEQ1",13,0)
 ;  ELECTRONIC PLAN TYPE OF 'BL'
"RTN","IBCEQ1",14,0)
 ;5-NON BLUE CROSS/SHIELD ID FOR AN INS COMPANY WITH BLUE PLAN(S)
"RTN","IBCEQ1",15,0)
 ;6-VAD000 as an ID but not flagged as a UPIN
"RTN","IBCEQ1",16,0)
 ;
"RTN","IBCEQ1",17,0)
EN ;
"RTN","IBCEQ1",18,0)
 N POP,%ZIS,ZTSK,ZTRTN,ZTDESC,IBREBLD,IBSENDM,IBTO,DIR,X,Y,DUOUT,DTOUT,Z
"RTN","IBCEQ1",19,0)
 S IBREBLD=$S('$D(^XTMP("IB_PLAN232")):1,1:0)
"RTN","IBCEQ1",20,0)
 I $D(^XTMP("IB_PLAN232")) D
"RTN","IBCEQ1",21,0)
 . S DIR("?")="IF YOU ANSWER NO, REPORT WILL BE RUN FROM THE EXISTING QUERY DATA",DIR("?",1)="IF YOU ANSWER YES, A NEW QUERY WILL BE RUN"
"RTN","IBCEQ1",22,0)
 . S DIR(0)="YA",DIR("A",1)="THE EXTRACT GLOBAL FOR THIS QUERY ALREADY EXISTS",DIR("A")="DO YOU WANT TO DELETE IT AND RERUN THE QUERY?: ",DIR("B")="NO" W ! D ^DIR K DIR
"RTN","IBCEQ1",23,0)
 . Q:$D(DUOUT)!$D(DTOUT)!'Y
"RTN","IBCEQ1",24,0)
 . S IBREBLD=1
"RTN","IBCEQ1",25,0)
 ;
"RTN","IBCEQ1",26,0)
 N XMINSTR,Z,ZTSAVE
"RTN","IBCEQ1",27,0)
 K ^TMP("XMY",$J),^TMP("XMY0",$J)
"RTN","IBCEQ1",28,0)
 S XMINSTR("ADDR FLAGS")="R"
"RTN","IBCEQ1",29,0)
 D TOWHOM^XMXAPIU(DUZ,"","S",.XMINSTR)
"RTN","IBCEQ1",30,0)
 S Z="" F  S Z=$O(^TMP("XMY",$J,Z)) Q:Z=""  S IBTO(Z)=""
"RTN","IBCEQ1",31,0)
 K ^TMP("XMY",$J),^TMP("XMY0",$J)
"RTN","IBCEQ1",32,0)
 ;
"RTN","IBCEQ1",33,0)
 S %ZIS="QM" D ^%ZIS G:POP EN1Q
"RTN","IBCEQ1",34,0)
 I $D(IO("Q")) D  G EN1Q
"RTN","IBCEQ1",35,0)
 . S ZTRTN="ENT^IBCEQ1("_IBREBLD_",.IBTO)",ZTDESC="IB - HIPAA ENHANCEMENTS PROV ID QUERY",ZTSAVE("IBTO(")=""
"RTN","IBCEQ1",36,0)
 . D ^%ZTLOAD
"RTN","IBCEQ1",37,0)
 . W !!,$S($D(ZTSK):"Task # "_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCEQ1",38,0)
 . K ZTSK,IO("Q") D HOME^%ZIS
"RTN","IBCEQ1",39,0)
 U IO
"RTN","IBCEQ1",40,0)
 D ENT(IBREBLD,.IBTO)
"RTN","IBCEQ1",41,0)
EN1Q Q
"RTN","IBCEQ1",42,0)
 ;
"RTN","IBCEQ1",43,0)
ENT(IBREBLD,IBTO) ; Queued job enter here
"RTN","IBCEQ1",44,0)
 ;
"RTN","IBCEQ1",45,0)
 N LOOP,Z
"RTN","IBCEQ1",46,0)
 K ^TMP($J,"SENDMSG")
"RTN","IBCEQ1",47,0)
 S ^TMP($J,"SENDMSG")=$S(IBREBLD:1,1:0)
"RTN","IBCEQ1",48,0)
 S Z="" F  S Z=$O(IBTO(Z)) Q:Z=""  S ^TMP($J,"SENDMSG",0,Z)=""
"RTN","IBCEQ1",49,0)
 I $G(IBREBLD) D
"RTN","IBCEQ1",50,0)
 . ; Rebld query
"RTN","IBCEQ1",51,0)
 . K ^XTMP("IB_PLAN232")
"RTN","IBCEQ1",52,0)
 . S ^XTMP("IB_PLAN232")="",^XTMP("IB_PLAN232",0)=$$FMADD^XLFDT(DT,45)_U_DT_"^IB PATCH 232 PROV ID QUERY"
"RTN","IBCEQ1",53,0)
 . ;
"RTN","IBCEQ1",54,0)
 . ; loop thru 355.91 (IB INSURANCE CO LEVEL BILLING PROV ID)
"RTN","IBCEQ1",55,0)
 . ;   then 355.9 (IB BILLING PRACTITIONER ID)
"RTN","IBCEQ1",56,0)
 . F LOOP=355.91,355.9 D LP
"RTN","IBCEQ1",57,0)
 . ;
"RTN","IBCEQ1",58,0)
 ;
"RTN","IBCEQ1",59,0)
 D RPTOUT^IBCEQ1A
"RTN","IBCEQ1",60,0)
 K ^TMP($J,"SENDMSG")
"RTN","IBCEQ1",61,0)
 Q
"RTN","IBCEQ1",62,0)
 ;
"RTN","IBCEQ1",63,0)
LP ; Loop through ids
"RTN","IBCEQ1",64,0)
 N IB,PTYP,PAYER,PLANIEN,FTA,IEPLAN,IPROV,PPROV,EDII,EDIP,PAYERP,TYPCOV,IBPMBPID,PTYPNM,IBI3,IBI0,SEQ,BLUE,TOT,NBLUE,DIR,DTOUT,DUOUT,X,Z,Z0,Z1,BL,UPIN,BCR,BSH
"RTN","IBCEQ1",65,0)
 S (SEQ,X,TOT,NBLUE,BLUE)=0,(BCR,BSH,UPIN)=""
"RTN","IBCEQ1",66,0)
 S Z="" F  S Z=$O(^IBE(355.97,Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEQ1",67,0)
 . I $P(Z,U)["BLUE CROSS" S BCR=Z Q
"RTN","IBCEQ1",68,0)
 . I $P(Z,U)["BLUE SHIELD" S BSH=Z Q
"RTN","IBCEQ1",69,0)
 . I $P(Z,U)["UPIN" S UPIN=Z Q
"RTN","IBCEQ1",70,0)
 S:UPIN="" UPIN=22 S:BCR="" BCR=1 S:BSH="" BSH=2
"RTN","IBCEQ1",71,0)
 F  S X=$O(^IBA(LOOP,X)) Q:+X=0  D
"RTN","IBCEQ1",72,0)
 . S (PAYER,FTA,PLANIEN,IEPLAN,IPROV,PPROV,EDII,EDIP,PAYERP,TYPCOV,IBPMBPID,PTYPNM)=""
"RTN","IBCEQ1",73,0)
 . S SEQ=SEQ+1
"RTN","IBCEQ1",74,0)
 . S IB=$G(^IBA(LOOP,X,0))
"RTN","IBCEQ1",75,0)
 . S PTYP=$P(IB,U,6) ; prov id type ien
"RTN","IBCEQ1",76,0)
 . Q:PTYP=""  ; no prov type
"RTN","IBCEQ1",77,0)
 . S PTYPNM=$P($G(^IBE(355.97,PTYP,0)),U) ; prov id type desc
"RTN","IBCEQ1",78,0)
 . S PAYERP=$S(LOOP[".91":+IB,1:+$P(IB,U,2)) ;ins co ien
"RTN","IBCEQ1",79,0)
 . S IBI0=$G(^DIC(36,PAYERP,0)),IBI3=$G(^(3)),PAYER=$P(IBI0,U)
"RTN","IBCEQ1",80,0)
 . Q:$P(IBI0,U,5)!(IBI0="")  ; ins co inactive/deleted
"RTN","IBCEQ1",81,0)
 . S EDIP=$P(IBI3,U,2) ; edi id# prof
"RTN","IBCEQ1",82,0)
 . S EDII=$P(IBI3,U,4) ; edi id# inst
"RTN","IBCEQ1",83,0)
 . S IEPLAN=$P(IBI3,U,9) ; elec ins type ?1N
"RTN","IBCEQ1",84,0)
 . S PPROV=$P(IBI0,U,17) ; prof. prov#
"RTN","IBCEQ1",85,0)
 . S IPROV=$P(IBI0,U,11) ; hosp. prov#
"RTN","IBCEQ1",86,0)
 . S TYPCOV=$P(IBI0,U,13) ; type of cov ien;file 355.2
"RTN","IBCEQ1",87,0)
 . S FTA=$P(IB,U,4) ; form type applied; 0:both, 1:ub, 2:hcfa
"RTN","IBCEQ1",88,0)
 . S IBPMBPID=X_";"_LOOP
"RTN","IBCEQ1",89,0)
 . I $P(IB,U,7)="VAD000",PTYP'=UPIN D SET(6)
"RTN","IBCEQ1",90,0)
 . ;
"RTN","IBCEQ1",91,0)
 . I PTYP'=BCR&(PTYP'=BSH) D  Q    ; not BC/BS
"RTN","IBCEQ1",92,0)
 .. ; Only do following check once per insurance co
"RTN","IBCEQ1",93,0)
 .. Q:$D(^XTMP("IB_PLAN232",3,PAYERP))
"RTN","IBCEQ1",94,0)
 .. S ^XTMP("IB_PLAN232",3,PAYERP)=""
"RTN","IBCEQ1",95,0)
 .. ; Check if BC/BS ids exist at all for ins co
"RTN","IBCEQ1",96,0)
 .. Q:$O(^IBA(355.9,"AC",1,PAYERP,0))!$O(^IBA(355.9,"AC",2,PAYERP,0))!$O(^IBA(355.91,"AC",PAYERP,1,0))!$O(^IBA(355.91,"AC",PAYERP,2,0))
"RTN","IBCEQ1",97,0)
 .. S BL=0
"RTN","IBCEQ1",98,0)
 .. S Z1=0 F  S Z1=$O(^IBA(355.3,"B",PAYERP,Z1)) Q:'Z1  D
"RTN","IBCEQ1",99,0)
 ... I '$P($G(^IBA(355.3,Z1,0)),U,11),$P($G(^(0)),U,15)="BL" S PLANIEN=Z1,BL=1 D SET(5)
"RTN","IBCEQ1",100,0)
 .. S:BL NBLUE=NBLUE+1
"RTN","IBCEQ1",101,0)
 . ;
"RTN","IBCEQ1",102,0)
 . S BLUE=BLUE+1
"RTN","IBCEQ1",103,0)
 . ; ERROR - FORM TYPE=2:HCFA AND PTYP=1:BC
"RTN","IBCEQ1",104,0)
 . I PTYP=1&(FTA=2) D SET(1) Q
"RTN","IBCEQ1",105,0)
 . ;
"RTN","IBCEQ1",106,0)
 . I PTYP=2&(FTA=1) D SET(2) Q  ; BS applied to just UB
"RTN","IBCEQ1",107,0)
 . I FTA=0&(PTYP=1) D SET(3) Q  ; BC applied to both forms
"RTN","IBCEQ1",108,0)
 . ;
"RTN","IBCEQ1",109,0)
 . ; Only do following check once per insurance co
"RTN","IBCEQ1",110,0)
 . I '$D(^XTMP("IB_PLAN232",2,PAYERP)) D  ; Checks plans not BL
"RTN","IBCEQ1",111,0)
 .. S Z1=0,^XTMP("IB_PLAN232",2,PAYERP)=""
"RTN","IBCEQ1",112,0)
 .. F  S Z1=$O(^IBA(355.3,"B",PAYERP,Z1)) Q:'Z1  D
"RTN","IBCEQ1",113,0)
 ... I $P($G(^IBA(355.3,Z1,0)),U,15)'="BL",'$P(^(0),U,11) S PLANIEN=Z1 D SET(4) Q
"RTN","IBCEQ1",114,0)
 ;
"RTN","IBCEQ1",115,0)
 ; 3RD PC XTMP(IB_PLAN232)=TOTAL BLUES WITH NO BLUE IDS
"RTN","IBCEQ1",116,0)
 S $P(^XTMP("IB_PLAN232"),U,3)=$P($G(^XTMP("IB_PLAN232")),U,3)+NBLUE
"RTN","IBCEQ1",117,0)
 ;
"RTN","IBCEQ1",118,0)
 ; 4TH PC XTMP(IB_PLAN232)=TOT NUMBER SCANNED
"RTN","IBCEQ1",119,0)
 S $P(^XTMP("IB_PLAN232"),U,4)=$P($G(^XTMP("IB_PLAN232")),U,4)+SEQ
"RTN","IBCEQ1",120,0)
 ;
"RTN","IBCEQ1",121,0)
 ; 5TH PC XTMP(IB_PLAN232)=TOT BLUES IDS FOUND
"RTN","IBCEQ1",122,0)
 S $P(^XTMP("IB_PLAN232"),U,5)=$P($G(^XTMP("IB_PLAN232")),U,5)+BLUE
"RTN","IBCEQ1",123,0)
 ;
"RTN","IBCEQ1",124,0)
 ; 6TH PC XTMP(IB_PLAN232)=TOTAL ERRORS FOUND
"RTN","IBCEQ1",125,0)
 S $P(^XTMP("IB_PLAN232"),U,6)=$P($G(^XTMP("IB_PLAN232")),U,6)+TOT
"RTN","IBCEQ1",126,0)
 Q
"RTN","IBCEQ1",127,0)
 ;
"RTN","IBCEQ1",128,0)
SET(Z) ;SET VALUES INTO SAVE GLOBAL
"RTN","IBCEQ1",129,0)
 ; Z=REASON WHY WE'RE SETTING IT
"RTN","IBCEQ1",130,0)
 ; 1. PAYER-ins co name (36)
"RTN","IBCEQ1",131,0)
 ; 2. PLAN-grp name (355.3)
"RTN","IBCEQ1",132,0)
 ; 3. GROUP-grp # (355.3)
"RTN","IBCEQ1",133,0)
 ; 4. FTA-form typ (355.9)
"RTN","IBCEQ1",134,0)
 ; 5. EPLAN-"BL" (355.3)
"RTN","IBCEQ1",135,0)
 ; 6. IEPLAN-elec ins typ (36)
"RTN","IBCEQ1",136,0)
 ; 7. IPROV-hosp prov# (36)
"RTN","IBCEQ1",137,0)
 ; 8. PPROV-prof prov# (36)
"RTN","IBCEQ1",138,0)
 ; 9. EDII-inst edi id# (36)
"RTN","IBCEQ1",139,0)
 ;10. EDIP-prof edi id# (36)
"RTN","IBCEQ1",140,0)
 ;11. PAYERP-ins co ien (36)
"RTN","IBCEQ1",141,0)
 ;12. TYPCOV-type of cov ien (36)
"RTN","IBCEQ1",142,0)
 ;13. PLANIEN-ien of file (355.3)
"RTN","IBCEQ1",143,0)
 ;14. IBPMBPID-355.9 or 355.91;ien of file
"RTN","IBCEQ1",144,0)
 ;15. PTYPNM-prov id type desc (355.9)
"RTN","IBCEQ1",145,0)
 ;16. Z-reason
"RTN","IBCEQ1",146,0)
 ;
"RTN","IBCEQ1",147,0)
 N A,DUP
"RTN","IBCEQ1",148,0)
 ;
"RTN","IBCEQ1",149,0)
 S A=$O(^XTMP("IB_PLAN232",1," "),-1)+1
"RTN","IBCEQ1",150,0)
 S ^XTMP("IB_PLAN232",1,A,0)=PAYER_U_""_U_""_U_FTA_U_""_U_IEPLAN_U_""_U_""_U_""_U_""_U_PAYERP_U_TYPCOV_U_PLANIEN_U_IBPMBPID_U_PTYPNM_U_Z
"RTN","IBCEQ1",151,0)
 Q
"RTN","IBCEQ1",152,0)
 ;
"RTN","IBCEQ1A")
0^44^B62244204
"RTN","IBCEQ1A",1,0)
IBCEQ1A ;ALB/BSL,TMK - PROVIDER ID QUERY REPORT ;25-AUG-03
"RTN","IBCEQ1A",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBCEQ1A",3,0)
 ;
"RTN","IBCEQ1A",4,0)
RPTOUT ; Print from data in ^XTMP
"RTN","IBCEQ1A",5,0)
 N IBP,IBA,IBI,IBIN,IBPNM,IBPNUM,IBSTOP,IBX,IBZ,IBPG,IBICONT,Z
"RTN","IBCEQ1A",6,0)
 K ^TMP($J,"IBZ232")
"RTN","IBCEQ1A",7,0)
 F Z=1:1:6 S ^TMP($J,"IBZ232",Z)=""
"RTN","IBCEQ1A",8,0)
 S (IBPG,IBSTOP)=0
"RTN","IBCEQ1A",9,0)
 S IBA=0 F  S IBA=$O(^XTMP("IB_PLAN232",1,IBA)) Q:'IBA  D
"RTN","IBCEQ1A",10,0)
 . S IBX=$G(^XTMP("IB_PLAN232",1,IBA,0))
"RTN","IBCEQ1A",11,0)
 . ; Sort by err type, ins co ien
"RTN","IBCEQ1A",12,0)
 . S ^TMP($J,"IBZ232",+$P(IBX,U,16),+$P(IBX,U,11),IBA)=IBX
"RTN","IBCEQ1A",13,0)
 ;
"RTN","IBCEQ1A",14,0)
 S IBZ=0 F  S IBZ=$O(^TMP($J,"IBZ232",IBZ)) Q:'IBZ!IBSTOP!(IBZ>6)  D HDR1(.IBPG,.IBSTOP,IBZ,0) S IBI=0 F  S IBI=$O(^TMP($J,"IBZ232",IBZ,IBI)) Q:'IBI!IBSTOP  D
"RTN","IBCEQ1A",15,0)
 . S IBIN=$P($G(^DIC(36,+IBI,0)),U)_" ("_$S(+$G(^(3))=1:"",1:"NOT ")_"SET TO TRANSMIT LIVE)"
"RTN","IBCEQ1A",16,0)
 . D INSHDR(.IBPG,.IBSTOP,IBIN,IBZ,0) S IBICONT=0
"RTN","IBCEQ1A",17,0)
 . S IBA=0 F  S IBA=$O(^TMP($J,"IBZ232",IBZ,IBI,IBA)) Q:'IBA!IBSTOP  S IBX=$G(^(IBA)) D
"RTN","IBCEQ1A",18,0)
 .. I ($Y+5)>IOSL D INSHDR(.IBPG,.IBSTOP,IBIN,IBZ,IBICONT) Q:IBSTOP
"RTN","IBCEQ1A",19,0)
 .. ;
"RTN","IBCEQ1A",20,0)
 .. I IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",21,0)
 ... S IBP=+$P(IBX,U,14)
"RTN","IBCEQ1A",22,0)
 ... I $P(IBX,U,14)[".91" S IBPNM="ALL PROVIDERS"
"RTN","IBCEQ1A",23,0)
 ... I $P(IBX,U,14)'[".91" D
"RTN","IBCEQ1A",24,0)
 .... N Z
"RTN","IBCEQ1A",25,0)
 .... S Z=$P($G(^IBA(355.9,IBP,0)),U)
"RTN","IBCEQ1A",26,0)
 .... S IBPNM=$S(Z["VA(200":"",1:"#")_$$EXTERNAL^DILFD(355.9,.01,"",Z)
"RTN","IBCEQ1A",27,0)
 ... S IBPNUM=$P($G(^IBA(+$P($P(IBX,U,14),";",2),IBP,0)),U,7)
"RTN","IBCEQ1A",28,0)
 ... D WRT(1,"   "_$E($P("BOTH^UB92^HCFA 1500",U,$P(IBX,U,4)+1)_$J("",9),1,9)_"  "_$E($P(IBX,U,15)_$J("",23),1,23)_" "_$E(IBPNM_$J("",28),1,28)_"  "_$E(IBPNUM,1,11))
"RTN","IBCEQ1A",29,0)
 .. ;
"RTN","IBCEQ1A",30,0)
 .. I IBZ=4!(IBZ=5) D
"RTN","IBCEQ1A",31,0)
 ... N Z
"RTN","IBCEQ1A",32,0)
 ... S Z=$G(^IBA(355.3,+$P(IBX,U,13),0))
"RTN","IBCEQ1A",33,0)
 ... D WRT(1,"   "_$E($P(Z,U,3)_$J("",20),1,20)_"  "_$E($P(Z,U,4)_$J("",17),1,17)_"  "_$$EXTERNAL^DILFD(355.3,.15,"",$P(Z,U,15)))
"RTN","IBCEQ1A",34,0)
 .. S:'IBICONT IBICONT=1
"RTN","IBCEQ1A",35,0)
 ;
"RTN","IBCEQ1A",36,0)
 I 'IBSTOP D  ;Totals
"RTN","IBCEQ1A",37,0)
 . N Z
"RTN","IBCEQ1A",38,0)
 . S Z=$G(^XTMP("IB_PLAN232"))
"RTN","IBCEQ1A",39,0)
 . I ($Y+10)>IOSL!'IBPG D HDR(.IBPG,.IBSTOP,"") Q:IBSTOP
"RTN","IBCEQ1A",40,0)
 . D WRT(2,$J("",25)_"TOTAL # OF IDs CHECKED: "_+$P(Z,U,4))
"RTN","IBCEQ1A",41,0)
 . D WRT(1,$J("",14)_"TOT # BLUE CROSS/SHIELD IDS FOUND: "_+$P(Z,U,5))
"RTN","IBCEQ1A",42,0)
 . D WRT(1,"TOTAL # OF INS CO. W/BLUE PLANS AND NO BLUE IDS: "_+$P(Z,U,3))
"RTN","IBCEQ1A",43,0)
 . D WRT(1,$J("",21)_"TOTAL # OF ERRORS/WARNINGS: "_+$P(Z,U,6))
"RTN","IBCEQ1A",44,0)
 ;
"RTN","IBCEQ1A",45,0)
 I '$D(ZTQUEUED) D ^%ZISC I 'IBSTOP,IBPG D ASK()
"RTN","IBCEQ1A",46,0)
 I $D(ZTQUEUED),'IBSTOP S ZTREQ="@"
"RTN","IBCEQ1A",47,0)
 I $G(^TMP($J,"SENDMSG")),'IBSTOP D
"RTN","IBCEQ1A",48,0)
 . N XMDUZ,XMSUBJ,XMBODY,XMTO,XMZ
"RTN","IBCEQ1A",49,0)
 . S XMDUZ=DUZ,XMSUBJ=$E("PROVIDER ID QUERY FROM "_$P($G(^DIC(4,+$P($G(^IBE(350.9,1,0)),U,2),0)),U),1,65),XMBODY="^TMP($J,""SENDMSG"",1)"
"RTN","IBCEQ1A",50,0)
 . M XMTO=^TMP($J,"SENDMSG",0)
"RTN","IBCEQ1A",51,0)
 . S Z="" F  S Z=$O(^TMP($J,"SENDMSG",0,Z)) Q:Z=""  S XMZ(Z)=""
"RTN","IBCEQ1A",52,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,"",.XMZ)
"RTN","IBCEQ1A",53,0)
 K ^TMP($J,"IBZ232"),^TMP($J,"SENDMSG")
"RTN","IBCEQ1A",54,0)
 Q
"RTN","IBCEQ1A",55,0)
 ;
"RTN","IBCEQ1A",56,0)
HDR(IBPG,IBSTOP,IBZ,FF) ; Main hdr
"RTN","IBCEQ1A",57,0)
 ; FF = 0 if continuation pg so it writes it to report, but not mail msg
"RTN","IBCEQ1A",58,0)
 N Z,IBT
"RTN","IBCEQ1A",59,0)
 Q:$G(IBSTOP)
"RTN","IBCEQ1A",60,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S (IBSTOP,ZTSTOP)=1 K ZTREQ I +$G(IBPG) D WRT(2,"***TASK STOPPED BY USER***") Q
"RTN","IBCEQ1A",61,0)
 I IBPG&($E(IOST,1,2)="C-") D ASK(.IBSTOP) Q:IBSTOP
"RTN","IBCEQ1A",62,0)
 S IBT=$S(IBPG:1,1:0)
"RTN","IBCEQ1A",63,0)
 S IBPG=IBPG+1
"RTN","IBCEQ1A",64,0)
 S Z="PROVIDER ID VERIFICATION QUERY REPORT"
"RTN","IBCEQ1A",65,0)
 S Z=$$SETSTR^VALM1($J("",80-$L(Z)\2)_Z,"",1,79)
"RTN","IBCEQ1A",66,0)
 S Z=$$SETSTR^VALM1("Page: "_IBPG,Z,70,10)
"RTN","IBCEQ1A",67,0)
 D WRT(0,"@IOF",$G(FF))
"RTN","IBCEQ1A",68,0)
 D WRT(1,Z,$G(FF))
"RTN","IBCEQ1A",69,0)
 S Z="RUN DATE: "_$$FMTE^XLFDT(DT,2),Z=$J("",80-$L(Z)\2)_Z
"RTN","IBCEQ1A",70,0)
 D WRT(1,Z,$G(FF))
"RTN","IBCEQ1A",71,0)
 I IBZ'="",IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",72,0)
 . D WRT(2,"   FORM TYPE  PROV ID TYPE"_$J("",12)_"PROVIDER NAME (#=Non-VA)"_$J("",6)_"PROV ID",$G(FF))
"RTN","IBCEQ1A",73,0)
 I IBZ=4!(IBZ=5) D
"RTN","IBCEQ1A",74,0)
 . D WRT(2,"   GROUP NAME"_$J("",12)_"GROUP NUMBER"_$J("",7)_"ELECTRONIC PLAN TYPE",$G(FF))
"RTN","IBCEQ1A",75,0)
 D WRT(1,$TR($J("",IOM-1)," ","-"),$G(FF))
"RTN","IBCEQ1A",76,0)
 Q
"RTN","IBCEQ1A",77,0)
 ;
"RTN","IBCEQ1A",78,0)
HDR1(IBPG,IBSTOP,IBZ,IBCONT) ; Hdr err typ
"RTN","IBCEQ1A",79,0)
 N Z,Z0,Z1
"RTN","IBCEQ1A",80,0)
 D HDR(.IBPG,.IBSTOP,IBZ,IBCONT) Q:IBSTOP
"RTN","IBCEQ1A",81,0)
 S Z="",$P(Z,"*",80)="" D WRT(1,Z,IBCONT)
"RTN","IBCEQ1A",82,0)
 S Z0="* "_$S(IBZ>1:"WARNING: ",1:"ERROR: ")
"RTN","IBCEQ1A",83,0)
 ;
"RTN","IBCEQ1A",84,0)
 I IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",85,0)
 . N X
"RTN","IBCEQ1A",86,0)
 . S X="BLUE CROSS ID FOUND FOR A HCFA FORM TYPE ONLY^BLUE SHIELD ID FOUND FOR A UB92 FORM TYPE ONLY^BLUE CROSS ID FOUND FOR BOTH FORM TYPES^BL CROSS/BL SHIELD IDs FOUND FOR PLANS NOT HAVING 'BL' ELECTRONIC PLAN TYPE"
"RTN","IBCEQ1A",87,0)
 . S Z0=Z0_$S(IBZ<6:$P(X,U,IBZ),IBZ=6:"""VAD000"" PROVIDER ID FOUND NOT SET UP AS A UPIN PROVIDER ID TYPE",1:"")
"RTN","IBCEQ1A",88,0)
 I IBZ=4 D
"RTN","IBCEQ1A",89,0)
 . S Z0=Z0_"BL CROSS/BL SHIELD IDs FOUND FOR PLANS NOT HAVING 'BL' ELECTRONIC" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",90,0)
 . S Z0="*"_$J("",10)_"PLAN TYPE"
"RTN","IBCEQ1A",91,0)
 ;
"RTN","IBCEQ1A",92,0)
 I IBZ=5 D
"RTN","IBCEQ1A",93,0)
 . S Z0=Z0_"INSURANCE CO HAS BL CROSS/SHIELD PLANS, BUT NO BL CROSS/SHIELD IDs"
"RTN","IBCEQ1A",94,0)
 ;
"RTN","IBCEQ1A",95,0)
 S Z0=Z0_$S(IBCONT:" (CONT)",1:"")
"RTN","IBCEQ1A",96,0)
 D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",97,0)
 ;
"RTN","IBCEQ1A",98,0)
 I 'IBCONT D
"RTN","IBCEQ1A",99,0)
 . I IBZ=1 D
"RTN","IBCEQ1A",100,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",101,0)
 .. S Z0="* SOLUTION: THIS ID WILL NEVER BE USED ELECTRONICALLY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",102,0)
 .. S Z0="*"_$J("",11)_"CHANGE PROVIDER ID TYPE TO BLUE SHIELD IF THIS ID SHOULD BE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",103,0)
 .. S Z0="*"_$J("",11)_"TRANSMITTED ON A HCFA." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",104,0)
 . ;
"RTN","IBCEQ1A",105,0)
 . I IBZ=2 D
"RTN","IBCEQ1A",106,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",107,0)
 .. S Z0="* SUGGESTION: VISTA WILL TRANSMIT THIS ID ELECTRONICALLY, BUT IT IS OPTIMAL"  D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",108,0)
 .. S Z0="*"_$J("",13)_"TO HAVE THIS ID SET UP AS BLUE CROSS." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",109,0)
 . ;
"RTN","IBCEQ1A",110,0)
 . I IBZ=3 D
"RTN","IBCEQ1A",111,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",112,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS ID CAN ONLY BE APPLIED TO A UB92 FORM TYPE." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",113,0)
 .. S Z0="*"_$J("",13)_"EDIT THE 'APPLIED TO FORM TYPE' FOR THE ID TO BE UB92 ONLY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",114,0)
 .. S Z0="*"_$J("",13)_"IF YOU NEED THIS ID ON A HCFA, SET IT UP AS A BLUE SHIELD ID" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",115,0)
 .. S Z0="*"_$J("",13)_"APPLIED TO A HCFA 1500 FORM TYPE." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",116,0)
 . ;
"RTN","IBCEQ1A",117,0)
 . I IBZ=4 D
"RTN","IBCEQ1A",118,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",119,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS OR BLUE SHIELD ID IS DEFINED FOR THE INSURANCE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",120,0)
 .. S Z0="*"_$J("",13)_"COMPANY, BUT THE ELECTRONIC PLAN TYPE FOR ONE OR MORE OF THE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",121,0)
 .. S Z0="*"_$J("",13)_"COMPANY'S PLANS IS NOT SET TO 'BL' (BLUE CROSS/BLUE SHIELD)." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",122,0)
 .. S Z0="*"_$J("",13)_"IF BLUE CROSS/BLUE SHIELD IDs ARE NEEDED TO PRINT FOR ANY" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",123,0)
 .. S Z0="*"_$J("",13)_"OF THESE PLANS, ITS ELECTRONIC PLAN TYPE MUST BE CHANGED TO BL." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",124,0)
 . ;
"RTN","IBCEQ1A",125,0)
 . I IBZ=5 D
"RTN","IBCEQ1A",126,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",127,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS OR BLUE SHIELD PLAN IS DEFINED FOR THE INSURANCE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",128,0)
 .. S Z0="*"_$J("",13)_"COMPANY, BUT YOU HAVE ONLY NON-BLUE CROSS/SHIELD IDS SET UP." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",129,0)
 .. S Z0="*"_$J("",13)_"YOU MUST SET UP THE APPROPRIATE BLUE CROSS/BLUE SHIELD IDs" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",130,0)
 .. S Z0="*"_$J("",13)_"FOR THE INSURANCE COMPANY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",131,0)
 . ;
"RTN","IBCEQ1A",132,0)
 . I IBZ=6 D
"RTN","IBCEQ1A",133,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",134,0)
 .. S Z0="* SUGGESTION: CHANGE PROVIDER ID TYPE TO UPIN."
"RTN","IBCEQ1A",135,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",136,0)
 .. S Z0="*"_$J("",13)_"ONCE ALL PAYERS FULLY IMPLEMENT HIPAA EDITS, YOU"
"RTN","IBCEQ1A",137,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",138,0)
 .. S Z0="*"_$J("",13)_"MUST USE THE CORRECT ID TYPE FOR THE ID ENTERED."
"RTN","IBCEQ1A",139,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",140,0)
 . ;
"RTN","IBCEQ1A",141,0)
 . D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",142,0)
 . S Z1="*"_$J("",$S(IBZ'=1:13,1:11))_"VISTA OPTION TO USE: "
"RTN","IBCEQ1A",143,0)
 . I IBZ'=4 D
"RTN","IBCEQ1A",144,0)
 .. S Z0=Z1_"PROVIDER ID MAINTENANCE"
"RTN","IBCEQ1A",145,0)
 . I IBZ=4 D
"RTN","IBCEQ1A",146,0)
 .. S Z0=Z1_"INSURANCE COMPANY ENTRY/EDIT"
"RTN","IBCEQ1A",147,0)
 . D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",148,0)
 ;
"RTN","IBCEQ1A",149,0)
 D WRT(1,Z,IBCONT)
"RTN","IBCEQ1A",150,0)
 ;
"RTN","IBCEQ1A",151,0)
 I '$O(^TMP($J,"IBZ232",IBZ,0)) D WRT(2,"***** NOTHING FOUND FOR THIS ERROR/WARNING *****",IBCONT)
"RTN","IBCEQ1A",152,0)
 Q
"RTN","IBCEQ1A",153,0)
 ;
"RTN","IBCEQ1A",154,0)
INSHDR(IBPG,IBSTOP,IBINM,IBZ,IBICONT) ; Ins Co info
"RTN","IBCEQ1A",155,0)
 I ($Y+7)>IOSL D HDR1(.IBPG,.IBSTOP,IBZ,1)
"RTN","IBCEQ1A",156,0)
 Q:IBSTOP
"RTN","IBCEQ1A",157,0)
 D WRT(2,"INSURANCE CO NAME: "_IBINM_$S($G(IBICONT):" (Continued)",1:""),IBICONT)
"RTN","IBCEQ1A",158,0)
 Q
"RTN","IBCEQ1A",159,0)
 ;
"RTN","IBCEQ1A",160,0)
ASK(IBSTOP) ; Ask continue
"RTN","IBCEQ1A",161,0)
 ; If passed by ref, IBSTOP returned = 1 if print aborted
"RTN","IBCEQ1A",162,0)
 I $E(IOST,1,2)'["C-" Q
"RTN","IBCEQ1A",163,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEQ1A",164,0)
 S DIR(0)="E" W ! D ^DIR
"RTN","IBCEQ1A",165,0)
 I ($D(DIRUT))!($D(DUOUT)) S IBSTOP=1 Q
"RTN","IBCEQ1A",166,0)
 Q
"RTN","IBCEQ1A",167,0)
 ;
"RTN","IBCEQ1A",168,0)
WRT(FF,TEXT,NOT) ; Wrt/store line
"RTN","IBCEQ1A",169,0)
 N Z,A
"RTN","IBCEQ1A",170,0)
 S A=+$O(^TMP($J,"SENDMSG",1,""),-1),NOT=$G(NOT)
"RTN","IBCEQ1A",171,0)
 I FF F Z=1:1:FF W ! I $G(^TMP($J,"SENDMSG")),'NOT,Z>1 S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",172,0)
 ;
"RTN","IBCEQ1A",173,0)
 I TEXT="@IOF" D  Q
"RTN","IBCEQ1A",174,0)
 . W @IOF
"RTN","IBCEQ1A",175,0)
 . I $G(^TMP($J,"SENDMSG")),'NOT,IBPG>1 D
"RTN","IBCEQ1A",176,0)
 .. S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",177,0)
 .. F Z=1:1:2 S A=A+1,^TMP($J,"SENDMSG",1,A)="*** TOP OF NEW PAGE ***"
"RTN","IBCEQ1A",178,0)
 .. S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",179,0)
 ;
"RTN","IBCEQ1A",180,0)
 W TEXT
"RTN","IBCEQ1A",181,0)
 I $G(^TMP($J,"SENDMSG")),'NOT S A=A+1,^TMP($J,"SENDMSG",1,A)=TEXT
"RTN","IBCEQ1A",182,0)
 Q
"RTN","IBCEQ1A",183,0)
 ;
"RTN","IBCESRV")
0^4^B62790831
"RTN","IBCESRV",1,0)
IBCESRV ;ALB/TMP - Server interface to IB from Austin ;8/6/03 10:04am
"RTN","IBCESRV",2,0)
 ;;2.0;INTEGRATED BILLING;**137,181,196,232**;21-MAR-94
"RTN","IBCESRV",3,0)
 ;
"RTN","IBCESRV",4,0)
SERVER ; Entry point for server option to process EDI msgs received from Austin
"RTN","IBCESRV",5,0)
 ;
"RTN","IBCESRV",6,0)
 N IBEFLG,IBERR,IBTDA,XMER,IBXMZ,IBHOLDCT
"RTN","IBCESRV",7,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J),^TMP("IBMSG-H",$J)
"RTN","IBCESRV",8,0)
 S IBXMZ=$G(XMZ)
"RTN","IBCESRV",9,0)
 S IBEFLG=$$MSG(.XMER,.IBTDA,IBXMZ)
"RTN","IBCESRV",10,0)
 D:$G(IBEFLG) PERROR^IBCESRV1(.IBERR,.IBTDA,"G.IB EDI",IBXMZ)
"RTN","IBCESRV",11,0)
 N ZTREQ
"RTN","IBCESRV",12,0)
 D DKILL^IBCESRV1(IBXMZ) S ZTREQ="@"
"RTN","IBCESRV",13,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J),^TMP("IBMSG-H",$J)
"RTN","IBCESRV",14,0)
 Q
"RTN","IBCESRV",15,0)
 ;
"RTN","IBCESRV",16,0)
MSG(XMER,IBTDA,IBXMZ) ; Read/Store message lines
"RTN","IBCESRV",17,0)
 ;     Return message formats:
"RTN","IBCESRV",18,0)
 ;        Ref:  Your <queue name> message #<msg#> with Austin ID #<id #>,
"RTN","IBCESRV",19,0)
 ;              is assigned confirmation number <confirmation #>.
"RTN","IBCESRV",20,0)
 ;              Generates an 837REC0 message
"RTN","IBCESRV",21,0)
 ;        277STAT - claim status messages - Generates one or more 837REC1
"RTN","IBCESRV",22,0)
 ;                                          837REC2 or 837REJ1 messages
"RTN","IBCESRV",23,0)
 ;        837DEL - bill entry # from File 364
"RTN","IBCESRV",24,0)
 ;        835EOB - Explanation of Benefits messages
"RTN","IBCESRV",25,0)
 ;        REPORT - Free text Envoy report file - may contain one or more
"RTN","IBCESRV",26,0)
 ;                 reports that are turned into bulletins
"RTN","IBCESRV",27,0)
 ;
"RTN","IBCESRV",28,0)
 ; OUTPUT:
"RTN","IBCESRV",29,0)
 ;  Function returns flag ... 0 = no errors    1 = errors
"RTN","IBCESRV",30,0)
 ;  IBTDA - array subscripted by ien of message file entries created
"RTN","IBCESRV",31,0)
 ;          If array entry = 1, the message was only partially stored
"RTN","IBCESRV",32,0)
 ;
"RTN","IBCESRV",33,0)
 N IBLAST,IBTYP,IBTYP1,IB0,IBBTCH,IBDATE,IBHD,IBMG,IBRTN,IBTXN,IBTXND,XMDUZ,IBGBL,IBD,IBEFLG,IBHOLDCT,IBWANT,X,Y,Z
"RTN","IBCESRV",34,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J)
"RTN","IBCESRV",35,0)
 ;
"RTN","IBCESRV",36,0)
 S (IBEFLG,IBERR,IBTXN)="",IBGBL="IBTXN",IBLAST=0
"RTN","IBCESRV",37,0)
 S IBD("MSG#")=IBXMZ
"RTN","IBCESRV",38,0)
 S IBHD=$$NET^XMRENT(IBXMZ)
"RTN","IBCESRV",39,0)
 S IBD("SUBJ")=$P(IBHD,U,6)
"RTN","IBCESRV",40,0)
 S (X,IBDATE)=$P(IBHD,U)
"RTN","IBCESRV",41,0)
 I X'="" D  ;Reformat date, if needed
"RTN","IBCESRV",42,0)
 . I X'["@" S X=$P(X," ",1,3)_"@"_$P(X," ",4)
"RTN","IBCESRV",43,0)
 . N %DT
"RTN","IBCESRV",44,0)
 . S %DT="XTS" D ^%DT S:Y>0 IBDATE=Y\.0001*.0001
"RTN","IBCESRV",45,0)
 ;
"RTN","IBCESRV",46,0)
 K ^TMP("IB-HOLD",$J) N IBHOLDCT S IBHOLDCT=0
"RTN","IBCESRV",47,0)
 I $G(IBD("SUBJ"))?.E1(1" MCR",1" MCT",1" MCH")1" Confirmation" D  G MSGQ:$G(IBERR),MSG1
"RTN","IBCESRV",48,0)
 . ;Austin confirmation
"RTN","IBCESRV",49,0)
 . X XMREC ; Line 1 of message
"RTN","IBCESRV",50,0)
 . S:XMER'<0 IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",51,0)
 . I XMER<0 D  Q
"RTN","IBCESRV",52,0)
 .. S IBERR=3
"RTN","IBCESRV",53,0)
 .. S ^TMP("IBERR",$J,"MSG",1)=IBHD
"RTN","IBCESRV",54,0)
 .. S ^TMP("IBERR",$J,"MSG",2)=$G(XMRG)
"RTN","IBCESRV",55,0)
 . S IBTXN=XMRG
"RTN","IBCESRV",56,0)
 . S IBBTCH=+$O(^IBA(364.1,"MSG",+$P(IBTXN,"#",2)\1,""))
"RTN","IBCESRV",57,0)
 . I 'IBBTCH S IBERR=6 D REST(.IBTXN,IBGBL) Q  ;No msgs match conf recpt
"RTN","IBCESRV",58,0)
 . S IBTXN("BATCH",IBBTCH,0)="837REC0^"_IBD("MSG#")_U_+$E($P(IBD("SUBJ")," "),4,14)_"^^"_IBBTCH_U_IBDATE
"RTN","IBCESRV",59,0)
 . ;
"RTN","IBCESRV",60,0)
 . X XMREC ;Get second line of the message
"RTN","IBCESRV",61,0)
 . I XMER<0 S IBERR=2 Q
"RTN","IBCESRV",62,0)
 . S IBTXN("BATCH",IBBTCH,1)=IBTXN_" "_XMRG_"$",IBTXN=IBTXN("BATCH",IBBTCH,0)
"RTN","IBCESRV",63,0)
 . S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",64,0)
 . S IBLAST=1
"RTN","IBCESRV",65,0)
 ;
"RTN","IBCESRV",66,0)
 ; Read header line of non-confirmation message (line 1)
"RTN","IBCESRV",67,0)
 F  X XMREC Q:$S(XMER<0:1,1:$E(XMRG,1,13)'="RACUBOTH RUCH")
"RTN","IBCESRV",68,0)
 S:XMER'<0 IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",69,0)
 I XMER<0 D  G MSGQ
"RTN","IBCESRV",70,0)
 . S IBERR=3
"RTN","IBCESRV",71,0)
 . S ^TMP("IBERR",$J,"MSG",1)=IBHD
"RTN","IBCESRV",72,0)
 . S ^TMP("IBERR",$J,"MSG",2)=$G(XMRG)
"RTN","IBCESRV",73,0)
 ;
"RTN","IBCESRV",74,0)
 S IBTXN=XMRG
"RTN","IBCESRV",75,0)
MSG1 I $E(IBTXN,$L(IBTXN)-3,$L(IBTXN))?3A1"."!(IBTXN="NNNN"),IBHOLDCT>1 S XMER=-1,IBLAST=1 G MSGQ
"RTN","IBCESRV",76,0)
 ;
"RTN","IBCESRV",77,0)
 S IBTYP1=$S($P(IBTXN,U)="277STAT":"837REC1",1:$P(IBTXN,U))
"RTN","IBCESRV",78,0)
 S IBTYP=$S(IBTYP1="":"",1:$O(^IBE(364.3,"B",IBTYP1,"")))
"RTN","IBCESRV",79,0)
 I IBTYP="" S IBERR=1 D REST(.IBTXN,IBGBL) G MSGQ ;Bad msg type
"RTN","IBCESRV",80,0)
 ;
"RTN","IBCESRV",81,0)
 S IB0=$G(^IBE(364.3,IBTYP,0)),IBRTN=$P(IB0,U,3,4),IBMG=$P(IB0,U,2)
"RTN","IBCESRV",82,0)
 I $TR(IBRTN,U)="" S IBERR=5 D REST(.IBTXN,IBGBL) G MSGQ ;No routine defined
"RTN","IBCESRV",83,0)
 ;
"RTN","IBCESRV",84,0)
 S IBWANT=1
"RTN","IBCESRV",85,0)
 I 'IBLAST,XMER'<0 D  G:IBLAST&(XMER<0) MSGQ ;Message is other than Austin confirmation
"RTN","IBCESRV",86,0)
 . S IBGBL="^TMP(""IBMSG"","_$J_")"
"RTN","IBCESRV",87,0)
 . S @IBGBL=$P(IBTXN,U),^TMP("IBMSGH",$J,0)=IBTXN
"RTN","IBCESRV",88,0)
 . ;
"RTN","IBCESRV",89,0)
 . I $P(IBTXN,U)="277STAT" D  Q  ;Claim status message
"RTN","IBCESRV",90,0)
 .. F  X XMREC Q:XMER<0  D  Q:IBLAST  ;Extract rest of message
"RTN","IBCESRV",91,0)
 ... S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",92,0)
 ... I +XMRG=99,$P(XMRG,U,2)="$" S IBLAST=1 Q
"RTN","IBCESRV",93,0)
 ... S IBD=XMRG,Z=+XMRG_"^IBCE277(.IBD)"
"RTN","IBCESRV",94,0)
 ... S IBTXN=XMRG
"RTN","IBCESRV",95,0)
 ... I '$$CKLABEL(Z,.IBTXN,IBGBL) S IBLAST=1,IBWANT=0,XMER=-1,IBERR=7 Q
"RTN","IBCESRV",96,0)
 ... D @Z
"RTN","IBCESRV",97,0)
 . ;
"RTN","IBCESRV",98,0)
 . I $P(IBTXN,U)="835EOB" D  Q  ;Explanation of Benefits message
"RTN","IBCESRV",99,0)
 .. F  X XMREC Q:XMER<0  D  Q:IBLAST  ;Extract rest of message
"RTN","IBCESRV",100,0)
 ... S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",101,0)
 ... I +XMRG=99,$P(XMRG,U,2)="$" S IBLAST=1 Q
"RTN","IBCESRV",102,0)
 ... S IBD=XMRG,Z=+XMRG_"^IBCE835(.IBD)"
"RTN","IBCESRV",103,0)
 ... S IBTXN=XMRG
"RTN","IBCESRV",104,0)
 ... I '$$CKLABEL(Z,.IBTXN,IBGBL) S IBLAST=1,IBWANT=0,XMER=-1,IBERR=7 Q
"RTN","IBCESRV",105,0)
 ... D @Z
"RTN","IBCESRV",106,0)
 . ;
"RTN","IBCESRV",107,0)
 . I $P(IBTXN,U)="REPORT" D  Q  ; Report file
"RTN","IBCESRV",108,0)
 .. D REPORT^IBCERPT(IBHD,IBDATE,.IBD,IBTXN)
"RTN","IBCESRV",109,0)
 .. I '$O(^TMP("IBMSG",$J,"REPORT",0,"D",0,0)) S IBWANT=0
"RTN","IBCESRV",110,0)
 . ;
"RTN","IBCESRV",111,0)
 . ; ****** Insert code for additional message types here and in ^IBCEM
"RTN","IBCESRV",112,0)
 ;
"RTN","IBCESRV",113,0)
 I IBLAST,IBWANT D ADD(IBGBL,.IBTDA,.IBERR)
"RTN","IBCESRV",114,0)
 ;
"RTN","IBCESRV",115,0)
 I 'IBLAST,'$G(IBERR) K @IBGBL S IBERR=2 ;No $ as last character of message
"RTN","IBCESRV",116,0)
MSGQ I $G(IBERR) D ERRUPD^IBCESRV1(IBGBL,.IBERR) S IBEFLG=1
"RTN","IBCESRV",117,0)
 Q IBEFLG
"RTN","IBCESRV",118,0)
 ;
"RTN","IBCESRV",119,0)
REST(IBTXN,IBGBL) ;Extract raw message data if not id-ed or can't process
"RTN","IBCESRV",120,0)
 N CT,Z
"RTN","IBCESRV",121,0)
 S CT=0
"RTN","IBCESRV",122,0)
 S Z=0 F  S Z=$O(^TMP("IB-HOLD",$J,Z)) Q:'Z  S CT=CT+1,@IBGBL@("BATCH",0,"D",0,CT)="##RAW DATA: "_$G(^TMP("IB-HOLD",$J,Z))
"RTN","IBCESRV",123,0)
 F  X XMREC Q:XMER<0  S:XMRG'="" CT=CT+1,@IBGBL@("BATCH",0,"D",0,CT)="##RAW DATA: "_XMRG
"RTN","IBCESRV",124,0)
 Q
"RTN","IBCESRV",125,0)
 ;
"RTN","IBCESRV",126,0)
ADD(IBGBL,IBTDA,IBERR) ; Add message(s) in @IBGBL to file #364.2
"RTN","IBCESRV",127,0)
 ;   Errors returned in IBERR
"RTN","IBCESRV",128,0)
 ;   Message entry #'s are returned in IBTDA(ien)=""
"RTN","IBCESRV",129,0)
 ;
"RTN","IBCESRV",130,0)
 N IB,IBA,IBB,IBC,IBDATA,IBHDR,IBLINE,IBTYP,IBRTN
"RTN","IBCESRV",131,0)
 S IBA="" F  S IBA=$O(@IBGBL@(IBA)) Q:IBA=""!(IBERR=3)  S IBB="" F  S IBB=$O(@IBGBL@(IBA,IBB)) Q:IBB=""!(IBERR=3)  D
"RTN","IBCESRV",132,0)
 . S IBHDR=$G(@IBGBL@(IBA,IBB,0))
"RTN","IBCESRV",133,0)
 . Q:IBHDR=""
"RTN","IBCESRV",134,0)
 . S IBTYP=$S($P(IBHDR,U)="":"",1:$O(^IBE(364.3,"B",$P(IBHDR,U),""))),IBRTN=$P($G(^IBE(364.3,IBTYP,0)),U,3,4)
"RTN","IBCESRV",135,0)
 . S IBTDA=$$ADDTXN(IBHDR) ;File message hdr data
"RTN","IBCESRV",136,0)
 . I IBTDA'>0 S IBERR=3 Q  ;msg hdr can't be filed
"RTN","IBCESRV",137,0)
 . S IBTDA(IBTDA)=""
"RTN","IBCESRV",138,0)
 . D LOADDET(IBA,IBB,.IBTDA,IBGBL,.IBERR,$P(IBHDR,U,1))
"RTN","IBCESRV",139,0)
 . Q:$G(IBERR)  ;Message not completely filed
"RTN","IBCESRV",140,0)
 . D TRTN^IBCESRV1(IBTDA):$TR(IBRTN,U)'="" ;Task update to run
"RTN","IBCESRV",141,0)
 Q
"RTN","IBCESRV",142,0)
 ;
"RTN","IBCESRV",143,0)
ADDTXN(IBDATA,REPORT) ; Add a trxn for msg in IBDATA to file 364.2
"RTN","IBCESRV",144,0)
 ; REPORT = 1 if storing a report format message
"RTN","IBCESRV",145,0)
 ;Function returns ien of the new entry in file 364.2 or "" if an error
"RTN","IBCESRV",146,0)
 ;
"RTN","IBCESRV",147,0)
 N A,IBDA,IBBTCH,IBBILL,IBDT,DLAYGO,DIC,DD,DO,X,Y,Z
"RTN","IBCESRV",148,0)
 ;
"RTN","IBCESRV",149,0)
 S IBDA="",IBBTCH=$P(IBDATA,U,5),IBBILL=$P(IBDATA,U,4)
"RTN","IBCESRV",150,0)
 S IBDT=$P(IBDATA,U,6)
"RTN","IBCESRV",151,0)
 ;
"RTN","IBCESRV",152,0)
 S (X,A)=$G(IBD("MSG#")) ;Use message ID as basis for the .01 field
"RTN","IBCESRV",153,0)
 F Z=1:1 Q:'$D(^IBA(364.2,"B",A))  S A=X_"."_Z
"RTN","IBCESRV",154,0)
 S X=A
"RTN","IBCESRV",155,0)
 S DIC(0)="L",DIC="^IBA(364.2,",DLAYGO=364.2
"RTN","IBCESRV",156,0)
 S DIC("DR")=".02///"_$P(IBDATA,U)_";.03///^S X=""NOW"";.08////"_($P(IBDATA,U,7)="Y")_";.13////"_$P(IBDATA,U,8)_$S(IBBILL="":"",1:";.05////"_IBBILL)_";.06////P;.1////"_IBDT_$S(IBBTCH="":"",1:";.04////"_IBBTCH)
"RTN","IBCESRV",157,0)
 D FILE^DICN
"RTN","IBCESRV",158,0)
 S:Y>0 IBDA=+Y
"RTN","IBCESRV",159,0)
 ;
"RTN","IBCESRV",160,0)
 Q IBDA
"RTN","IBCESRV",161,0)
 ;
"RTN","IBCESRV",162,0)
LOADDET(IB1,IB2,IBTDA,IBGBL,IBERR,IBTNM) ; Load the rest of the message text into the message
"RTN","IBCESRV",163,0)
 ; IB1 = "BATCH" or "CLAIM" or "REPORT"
"RTN","IBCESRV",164,0)
 ; IB2 = batch # or claim # or 0
"RTN","IBCESRV",165,0)
 ; IBTDA = ien in file 364.2 being updated
"RTN","IBCESRV",166,0)
 ; IBGBL = name of the array holding the detail message text to be loaded
"RTN","IBCESRV",167,0)
 ; IBTNM = message name (i.e. "835EOB","837REC0","REPORT",etc.)
"RTN","IBCESRV",168,0)
 ;
"RTN","IBCESRV",169,0)
 ; OUTPUT: IBERR if any errors found, pass by reference
"RTN","IBCESRV",170,0)
 ;         IBTDA(IBTDA)=1 if errors - pass by reference
"RTN","IBCESRV",171,0)
 ;
"RTN","IBCESRV",172,0)
 S IBTDA=+$G(IBTDA)
"RTN","IBCESRV",173,0)
 N CT,IB3,IBE,IBZ,Q
"RTN","IBCESRV",174,0)
 ;
"RTN","IBCESRV",175,0)
 K ^TMP("IBTEXT",$J)
"RTN","IBCESRV",176,0)
 ;
"RTN","IBCESRV",177,0)
 S (CT,IB3)=0 ;Put formatted data into msg
"RTN","IBCESRV",178,0)
 F  S IB3=$O(@IBGBL@(IB1,IB2,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,IB3)
"RTN","IBCESRV",179,0)
 ; Add identifying data from hdr record
"RTN","IBCESRV",180,0)
 S IB3=0 F  S IB3=$O(^TMP("IBMSG-H",$J,IB1,IB2,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=^TMP("IBMSG-H",$J,IB1,IB2,IB3)
"RTN","IBCESRV",181,0)
 ;
"RTN","IBCESRV",182,0)
 ; Put raw data into msg
"RTN","IBCESRV",183,0)
 I $G(IBTNM)'="835EOB" D
"RTN","IBCESRV",184,0)
 . S IBZ="" F  S IBZ=$O(@IBGBL@(IB1,IB2,"D",IBZ)) Q:IBZ=""  S IB3=0 F  S IB3=$O(@IBGBL@(IB1,IB2,"D",IBZ,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,"D",IBZ,IB3)
"RTN","IBCESRV",185,0)
 I $G(IBTNM)="835EOB" D
"RTN","IBCESRV",186,0)
 . S IB3=0 F  S IB3=$O(@IBGBL@(IB1,IB2,"D1",IB3)) Q:'IB3  S IBZ="" F  S IBZ=$O(@IBGBL@(IB1,IB2,"D1",IB3,IBZ)) Q:IBZ=""  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,"D1",IB3,IBZ)
"RTN","IBCESRV",187,0)
 ;
"RTN","IBCESRV",188,0)
 D STOREM^IBCESRV2(IBTDA,"^TMP(""IBTEXT"",$J)",.IBE)
"RTN","IBCESRV",189,0)
 ;
"RTN","IBCESRV",190,0)
 I $D(IBE("DIERR")) D  S:$L($G(IBE)) IBERR(IBTDA,IB1,IB2)=IBE ; Extract error
"RTN","IBCESRV",191,0)
 . D EXTERR^IBCESRV1(.IBERR,.IBTDA,.IBE)
"RTN","IBCESRV",192,0)
 K ^TMP("IBTEXT",$J)
"RTN","IBCESRV",193,0)
 Q
"RTN","IBCESRV",194,0)
 ;
"RTN","IBCESRV",195,0)
CKLABEL(Z,IBTXN,IBGBL) ;  Checks to be sure label in Z exists.
"RTN","IBCESRV",196,0)
 ; If it doesn't exist, files an error and returns 0 
"RTN","IBCESRV",197,0)
 ;  OR  returns 1 if it does exist
"RTN","IBCESRV",198,0)
 N X,LAB
"RTN","IBCESRV",199,0)
 S X=1,LAB=$P(Z,"(")
"RTN","IBCESRV",200,0)
 I $S('LAB!($L($P(LAB,U))>8):1,1:$T(@LAB)="") S X=0 D REST(.IBTXN,IBGBL)
"RTN","IBCESRV",201,0)
 Q X
"RTN","IBCESRV",202,0)
 ;
"RTN","IBCESRV",203,0)
ERROR ; Error condition messages
"RTN","IBCESRV",204,0)
 ;;Message code does not exist in IB MESSAGE ROUTER file (364.3).
"RTN","IBCESRV",205,0)
 ;;This message has no ending $.
"RTN","IBCESRV",206,0)
 ;;Message file problem - no message stored.
"RTN","IBCESRV",207,0)
 ;;Message file problem - message partially stored.
"RTN","IBCESRV",208,0)
 ;;Routine to process this message type does not exist.
"RTN","IBCESRV",209,0)
 ;;Batch does not exist for this confirmation message.
"RTN","IBCESRV",210,0)
 ;;Bad message format found - cannot store message.
"RTN","IBCESRV",211,0)
 ;
"RTN","IBCEU")
0^14^B56578533
"RTN","IBCEU",1,0)
IBCEU ;ALB/TMP - EDI UTILITIES ;02-OCT-96
"RTN","IBCEU",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,207,232**;21-MAR-94
"RTN","IBCEU",3,0)
 ; DBIA SUPPORTED REF: GET^XUA4A72 = 1625
"RTN","IBCEU",4,0)
 ; DBIA SUPPORTED REF: $$ESBLOCK^XUSESIG1 = 1557
"RTN","IBCEU",5,0)
 ;
"RTN","IBCEU",6,0)
TESTPT(DFN) ; Determine if pt is test pt
"RTN","IBCEU",7,0)
 ; Returns 1 if a test pt, 0 if not
"RTN","IBCEU",8,0)
 Q $E($P($G(^DPT(+DFN,0)),U,9),1,5)="00000"
"RTN","IBCEU",9,0)
 ;
"RTN","IBCEU",10,0)
MAINPRV(IBIFN) ; Returns name^id^ien^type code of 'main' prov on bill IBIFN
"RTN","IBCEU",11,0)
 N IBPRV,IBCOB,IBQ,Z
"RTN","IBCEU",12,0)
 D GETPRV(IBIFN,"3,4",.IBPRV)
"RTN","IBCEU",13,0)
 S IBQ="",IBCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",14,0)
 F Z=3,4 I $G(IBPRV(Z,1))'="" D  Q
"RTN","IBCEU",15,0)
 . S IBQ=IBPRV(Z,1),$P(IBQ,U,4)=Z
"RTN","IBCEU",16,0)
 . I $G(IBPRV(Z,1,IBCOB))'="" S $P(IBQ,U,2)=IBPRV(Z,1,IBCOB)
"RTN","IBCEU",17,0)
 Q IBQ
"RTN","IBCEU",18,0)
 ;
"RTN","IBCEU",19,0)
PRVOK(VAL,IBIFN) ; Check bill form & prov function agree
"RTN","IBCEU",20,0)
 ; VAL = internal value of prov function
"RTN","IBCEU",21,0)
 ;
"RTN","IBCEU",22,0)
 ; OTHER(9) valid on institutional(UB92) bills
"RTN","IBCEU",23,0)
 ; REFERRING(1) valid only on professional (HCFA) claims
"RTN","IBCEU",24,0)
 ; Valid functions by bill types
"RTN","IBCEU",25,0)
 ;  OUTPATIENT/UB-92: ATTENDING(4), OPERATING(2)-BILL TYPE 83X
"RTN","IBCEU",26,0)
 ;                     AND A PRIN. PROC EXISTS
"RTN","IBCEU",27,0)
 ;  INPATIENT/UB-92 : ATTENDING(4), OPERATING(2)-BILL TYPE 11X
"RTN","IBCEU",28,0)
 ;                     AND A PRIN. PROC EXISTS
"RTN","IBCEU",29,0)
 ;  OUTPATIENT/HCFA 1500 : RENDERING(3), SUPERVISING(5)
"RTN","IBCEU",30,0)
 ;  INPATIENT/HCFA 1500  : RENDERING(3), SUPERVISING(5)
"RTN","IBCEU",31,0)
 ;
"RTN","IBCEU",32,0)
 N OK,IBUB92
"RTN","IBCEU",33,0)
 S VAL=$$UP^XLFSTR(VAL)
"RTN","IBCEU",34,0)
 S OK=$S(VAL'="":1,1:0)
"RTN","IBCEU",35,0)
 G:'OK!'$G(IBIFN) PRVQ
"RTN","IBCEU",36,0)
 ;
"RTN","IBCEU",37,0)
 S IBUB92=($$FT^IBCEF(IBIFN)=3) ; 1 if UB-92 ; 0 if HCFA 1500
"RTN","IBCEU",38,0)
 ;
"RTN","IBCEU",39,0)
 I VAL=1 S:IBUB92 OK=0 G PRVQ
"RTN","IBCEU",40,0)
 ;
"RTN","IBCEU",41,0)
 I "249"[VAL,'IBUB92 S OK=0 G PRVQ
"RTN","IBCEU",42,0)
 I $S(VAL=3:1,1:VAL=5),IBUB92 S OK=0 G PRVQ
"RTN","IBCEU",43,0)
 ;
"RTN","IBCEU",44,0)
PRVQ Q OK
"RTN","IBCEU",45,0)
 ;
"RTN","IBCEU",46,0)
PRVOK1(VAL,IBIFN) ; Check for both attending and rendering on bill
"RTN","IBCEU",47,0)
 N OK
"RTN","IBCEU",48,0)
 S OK=1
"RTN","IBCEU",49,0)
 I $S("34"'[VAL:0,1:$D(^DGCR(399,IBIFN,"PRV","B",$S(VAL=3:4,1:3)))) D EN^DDIOL($S(VAL=3:"ATTENDING",1:"RENDERING")_" ALREADY EXISTS - CAN'T HAVE BOTH ON ONE BILL") S OK=0
"RTN","IBCEU",50,0)
 Q OK
"RTN","IBCEU",51,0)
 ;
"RTN","IBCEU",52,0)
SPEC(IBPRV,IBDT) ; Returns spec code for vp ien IBPRV from file 355.9
"RTN","IBCEU",53,0)
 ;  (for new person entries, as of date in IBDT)
"RTN","IBCEU",54,0)
 ; DBIA 1625
"RTN","IBCEU",55,0)
 N IBSPEC
"RTN","IBCEU",56,0)
 S:'$G(IBDT) IBDT=DT
"RTN","IBCEU",57,0)
 I IBPRV'["IBA(355.93" S IBSPEC=$S(IBPRV:$P($$GET^XUA4A72(+IBPRV,IBDT),U,8),1:"") ; VA
"RTN","IBCEU",58,0)
 I IBPRV["IBA(355.93" S IBSPEC=$P($G(^IBA(355.93,+IBPRV,0)),U,4) ; Non-VA
"RTN","IBCEU",59,0)
 Q IBSPEC
"RTN","IBCEU",60,0)
 ;
"RTN","IBCEU",61,0)
CRED(IBPRV,IBIFN,IBPIEN,IBTYP) ; Returns prov credentials
"RTN","IBCEU",62,0)
 ; IBPRV = vp of provider for file 200 or 355.93
"RTN","IBCEU",63,0)
 ; IBIFN = bill ien in file 399 (optional)
"RTN","IBCEU",64,0)
 ; IBPIEN = prov ien - file 399.0222 (optional)
"RTN","IBCEU",65,0)
 ; IBTYP = the prov type
"RTN","IBCEU",66,0)
 ;
"RTN","IBCEU",67,0)
 N IBCRED
"RTN","IBCEU",68,0)
 S IBCRED=""
"RTN","IBCEU",69,0)
 I $G(IBIFN),'$D(^DGCR(399,IBIFN,"PRV",0)) G CREDQ
"RTN","IBCEU",70,0)
 I $G(IBIFN),($G(IBPIEN)!$G(IBTYP)) D
"RTN","IBCEU",71,0)
 . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"PRV","B",IBTYP,0))
"RTN","IBCEU",72,0)
 . S IBCRED=$P($G(^DGCR(399,IBIFN,"PRV",IBPIEN,0)),U,3)
"RTN","IBCEU",73,0)
 I $G(IBPRV),IBCRED="" D
"RTN","IBCEU",74,0)
 . I IBPRV'["IBA(355.93" S IBCRED=$P($$ESBLOCK^XUSESIG1(+IBPRV),U,2)
"RTN","IBCEU",75,0)
 . I IBPRV["IBA(355.93" S IBCRED=$P($G(^IBA(355.93,+IBPRV,0)),U,3)
"RTN","IBCEU",76,0)
CREDQ Q IBCRED
"RTN","IBCEU",77,0)
 ;
"RTN","IBCEU",78,0)
GETPRV(IBIFN,IBTYP,IBPRV) ; Returns prov(s) of type(s) IBTYP for
"RTN","IBCEU",79,0)
 ;  bill ien IBIFN.
"RTN","IBCEU",80,0)
 ;  IBTYP = prov types needed, separated by ',' or ALL
"RTN","IBCEU",81,0)
 ; 
"RTN","IBCEU",82,0)
 ; OUTPUT:
"RTN","IBCEU",83,0)
 ;  IBPRV array: IBPRV(type)= 1 if prov is from old prov flds
"RTN","IBCEU",84,0)
 ;               IBPRV(type,ct)=name^current COB id^vp provider ien^cred
"RTN","IBCEU",85,0)
 ;               IBPRV(type,ct,seq)=COB seq specific id
"RTN","IBCEU",86,0)
 ;               IBPRV(type)=default nm^def id
"RTN","IBCEU",87,0)
 ;               IBPRV(type,"NOTOPT")= defined if a required prov type
"RTN","IBCEU",88,0)
 ;
"RTN","IBCEU",89,0)
 N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z ;,IBZFID
"RTN","IBCEU",90,0)
 ;S IBZFID=""
"RTN","IBCEU",91,0)
 D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
"RTN","IBCEU",92,0)
 ;I IBZ="CI" D F^IBCEF("N-FEDERAL TAX ID","IBZFID",,IBIFN) S IBZFID=$TR(IBZFID,"-")
"RTN","IBCEU",93,0)
 S IBPRV=U_$G(IBZ),IBY=0
"RTN","IBCEU",94,0)
 S IBMRAND=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",95,0)
 I IBMRAND D
"RTN","IBCEU",96,0)
 . F Z=1:1:3,5,6,7,8,9 S:Z=3&($$FT^IBCEF(IBIFN)=3) Z=4 S IBPRV(Z)=$S(Z=3!(Z=4):"DEPT VETERANS AFFAIRS",1:"")_"^VAD000"
"RTN","IBCEU",97,0)
 . I '$$INPAT^IBCEF(IBIFN,1),$$FT^IBCEF(IBIFN)=3 S IBPRV(4,1)="^SLF000"
"RTN","IBCEU",98,0)
 ;
"RTN","IBCEU",99,0)
 I '$D(^DGCR(399,+IBIFN,"PRV",0)) D  G GETQ
"RTN","IBCEU",100,0)
 . N IBALL
"RTN","IBCEU",101,0)
 . S IBALL=(IBTYP="ALL")
"RTN","IBCEU",102,0)
 . I IBTYP[4!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,13)'="" IBPRV(4,1)=$P(^("U1"),U,13),IBPRV(4)=1 Q:IBTYP=4
"RTN","IBCEU",103,0)
 . I IBTYP[3!IBALL S:$P($G(^DGCR(399,+IBIFN,"UF2")),U)'="" IBPRV(3,1)=$P(^("UF2"),U),IBPRV(3)=1 Q:IBTYP=3
"RTN","IBCEU",104,0)
 . I IBTYP[9!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,14)'="" IBPRV(9,1)=$P(^("U1"),U,14),IBPRV(9)=1
"RTN","IBCEU",105,0)
 ;
"RTN","IBCEU",106,0)
 S IBID=4+$$COBN^IBCEF(IBIFN),IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBCEU",107,0)
 F IBZ=1:1:$S(IBTYP="ALL":99,1:$L(IBTYP,",")) S (IBCT,IB)=0,IBY=$S(IBTYP'="ALL":$P(IBTYP,",",IBZ),1:$O(^DGCR(399,+IBIFN,"PRV","B",IBY))) Q:IBY=""  F  S IB=$O(^DGCR(399,+IBIFN,"PRV","B",IBY,IB)) Q:'IB  D
"RTN","IBCEU",108,0)
 . S IBCT=IBCT+1
"RTN","IBCEU",109,0)
 . S IBD=$G(^DGCR(399,+IBIFN,"PRV",IB,0))
"RTN","IBCEU",110,0)
 . Q:'$P(IBD,U,2)
"RTN","IBCEU",111,0)
 . S IBPNM=$$EXPAND^IBTRE(399.0222,.02,$P(IBD,U,2))
"RTN","IBCEU",112,0)
 . I IBWNR Q:'$D(IBPRV(IBY))  S $P(IBD,U,IBID)=$P(IBPRV(IBY),U,2)
"RTN","IBCEU",113,0)
 . S IBPRV(IBY,IBCT)=IBPNM_U_$S($P(IBD,U,IBID)'="":$P(IBD,U,IBID),$P($G(IBPRV(IBY)),U,2)'="":$P(IBPRV(IBY),U,2),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,IBID-4))_U_$P(IBD,U,2)
"RTN","IBCEU",114,0)
 . S $P(IBPRV(IBY,IBCT),U,4)=$$CRED($P(IBPRV(IBY,IBCT),U,3),IBIFN,$S($P(IBD,U,3)'=""!'$P(IBPRV(IBY,IBCT),U,3):IB,1:""))
"RTN","IBCEU",115,0)
 . F Z=1:1:3 D
"RTN","IBCEU",116,0)
 .. ;I IBZFID'="",'$$INPAT^IBCEF(IBIFN,1),$P(IBPRV(IBY,IBCT),U,2)="SLF000" S IBZFID=""
"RTN","IBCEU",117,0)
 .. ;I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($G(IBZFID)'="":IBZFID,$P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:"")
"RTN","IBCEU",118,0)
 .. I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,Z))
"RTN","IBCEU",119,0)
GETQ D NEEDPRV(IBIFN,IBTYP,.IBPRV)
"RTN","IBCEU",120,0)
 Q
"RTN","IBCEU",121,0)
 ;
"RTN","IBCEU",122,0)
NEEDPRV(IBIFN,IBTYP,IBPRV) ; Check for needed prov
"RTN","IBCEU",123,0)
 ; If needed, not entered, insert defaults for MCR only
"RTN","IBCEU",124,0)
 N IB0,IBINP,IBFT,IBMRAND,IBTOB
"RTN","IBCEU",125,0)
 S IB0=$G(^DGCR(399,+IBIFN,0))
"RTN","IBCEU",126,0)
 S IBFT=($$FT^IBCEF(IBIFN)=3),IBINP=$$INPAT^IBCEF(IBIFN,1),IBTOB=$$TOB^IBCBB(IB0)
"RTN","IBCEU",127,0)
 ; Only allow defaults for MCR
"RTN","IBCEU",128,0)
 S IBMRAND=$$WNRBILL^IBEFUNC(IBIFN) ;$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",129,0)
 ;
"RTN","IBCEU",130,0)
 I IBTYP="ALL"!((IBTYP_",")["2,") D:IBFT
"RTN","IBCEU",131,0)
 . ; only for bill type inpt - 11X, outpt - 83X
"RTN","IBCEU",132,0)
 . Q:$S(IBINP:$E(IBTOB,1,2)'="11",1:$E(IBTOB,1,2)'="83")
"RTN","IBCEU",133,0)
 . ; UB-92 bill includes HCPCS procs - operating phys required
"RTN","IBCEU",134,0)
 . N Z
"RTN","IBCEU",135,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  I $P($G(^(Z,0)),U)["ICP" D  Q
"RTN","IBCEU",136,0)
 .. S IBPRV(2,"NOTOPT")=1
"RTN","IBCEU",137,0)
 .. Q:'IBMRAND
"RTN","IBCEU",138,0)
 .. I '$O(IBPRV(2,0)) S IBPRV(2,"REQ")=1,IBPRV(2,1)=$G(IBPRV(2))
"RTN","IBCEU",139,0)
 ;
"RTN","IBCEU",140,0)
 I IBTYP="ALL"!((IBTYP_",")["3,") D:'IBFT
"RTN","IBCEU",141,0)
 . ; if a HCFA 1500 bill, rendering is required
"RTN","IBCEU",142,0)
 . S IBPRV(3,"NOTOPT")=1
"RTN","IBCEU",143,0)
 . Q:'IBMRAND
"RTN","IBCEU",144,0)
 . I '$O(IBPRV(3,0)) S IBPRV(3,1)=$G(IBPRV(3)),IBPRV(3,"REQ")=1
"RTN","IBCEU",145,0)
 ;
"RTN","IBCEU",146,0)
 I IBTYP="ALL"!((IBTYP_",")["4,") D:IBFT
"RTN","IBCEU",147,0)
 . ; if a UB-92, attending required
"RTN","IBCEU",148,0)
 . S IBPRV(4,"NOTOPT")=1
"RTN","IBCEU",149,0)
 . Q:'IBMRAND
"RTN","IBCEU",150,0)
 . I '$O(IBPRV(4,0)) S IBPRV(4,1)=$G(IBPRV(4)),IBPRV(4,"REQ")=1
"RTN","IBCEU",151,0)
 Q
"RTN","IBCEU",152,0)
 ;
"RTN","IBCEU",153,0)
CKPROV(IBIFN,IBTYP,IBVAL) ; Checks if prov of type IBTYP in 'PRV' node
"RTN","IBCEU",154,0)
 ; of bill IBIFN
"RTN","IBCEU",155,0)
 ; If IBVAL = 1, skips the check for an existing provider, just looks
"RTN","IBCEU",156,0)
 ;               for existence of the function itself
"RTN","IBCEU",157,0)
 N OK,IBFT,Z,R
"RTN","IBCEU",158,0)
 S OK=0,IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU",159,0)
 S Z=+$O(^DGCR(399,IBIFN,"PRV","B",+IBTYP,0))
"RTN","IBCEU",160,0)
 I $G(^DGCR(399,IBIFN,"PRV",Z,0))'="" D
"RTN","IBCEU",161,0)
 . ; Only outpt UB-92 can have SLF000 as prov ID with no name
"RTN","IBCEU",162,0)
 . I IBFT=3,'$$INPAT^IBCEF(IBIFN,1),$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)="",$P(^(0),U,5)="SLF000" S OK=1 Q
"RTN","IBCEU",163,0)
 . I '$G(IBVAL) Q:$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)=""
"RTN","IBCEU",164,0)
 . S OK=1
"RTN","IBCEU",165,0)
 Q OK
"RTN","IBCEU",166,0)
 ;
"RTN","IBCEU",167,0)
XFER(IBQ) ; Transfer DILIST
"RTN","IBCEU",168,0)
 ; IBQ = # of entries already found
"RTN","IBCEU",169,0)
 N Z,IBZ
"RTN","IBCEU",170,0)
 S (Z,IBZ)=0
"RTN","IBCEU",171,0)
 F  S Z=$O(^TMP("DILIST",$J,1,Z)) Q:'Z  S IBZ=IBZ+1,^TMP("IBLIST",$J,1,IBZ+IBQ)=^TMP("DILIST",$J,1,Z),^TMP("IBLIST",$J,2,IBZ+IBQ)=^TMP("DILIST",$J,2,Z) M ^TMP("IBLIST",$J,"ID",IBZ+IBQ)=^TMP("DILIST",$J,"ID",Z)
"RTN","IBCEU",172,0)
 ;
"RTN","IBCEU",173,0)
 I $D(^TMP("DILIST",$J,0)) S ^TMP("IBLIST",$J,0)=^TMP("DILIST",$J,0)
"RTN","IBCEU",174,0)
 S $P(^TMP("IBLIST",$J,0),U)=IBQ+IBZ
"RTN","IBCEU",175,0)
 Q
"RTN","IBCEU",176,0)
 ;
"RTN","IBCEU",177,0)
DATE(X) ; Convert date X in YYYYMMDD or YYMMDD to FM format
"RTN","IBCEU",178,0)
 ; FP = flag to indicate if past or future dates are expected
"RTN","IBCEU",179,0)
 N %DT,Y
"RTN","IBCEU",180,0)
 I $L(X)=8,$E(X,1,4)<2100,$E(X,5,6)<13,$E(X,7,8)<32 S X=$E(X,1,4)-1700_$E(X,5,8) G DTQ
"RTN","IBCEU",181,0)
 I $L(X)=6,$E(X,3,4)<13,$E(X,5,6)<32 S X=$E(X,3,4)_"/"_$E(X,5,6)_"/"_$E(X,1,2),%DT="N" D ^%DT I Y>0 S X=Y
"RTN","IBCEU",182,0)
DTQ Q X
"RTN","IBCEU",183,0)
 ;
"RTN","IBCEU",184,0)
BCLASS(IBIFN) ; Returns actual bill classif. code from ptr fld
"RTN","IBCEU",185,0)
 ;  .25 in file 399 for bill ien IBIFN
"RTN","IBCEU",186,0)
 Q $P($G(^DGCR(399.1,+$P($G(^DGCR(399,IBIFN,0)),U,25),0)),U,2)
"RTN","IBCEU",187,0)
 ;
"RTN","IBCEU",188,0)
ADMHR(IBIFN,IBDTTM) ; Extract admit hr from admit dt/tm
"RTN","IBCEU",189,0)
 ;  Default 99 if no time and bill is 11X or 18X
"RTN","IBCEU",190,0)
 N TM
"RTN","IBCEU",191,0)
 S TM=$P(IBDTTM,".",2)
"RTN","IBCEU",192,0)
 I TM="","18"[$$BCLASS(IBIFN),$P($G(^DGCR(399,IBIFN,0)),U,24)=1 S TM=99
"RTN","IBCEU",193,0)
 I TM'="",TM'=99 S TM=$E(TM_"0000",1,4)
"RTN","IBCEU",194,0)
 Q TM
"RTN","IBCEU",195,0)
 ;
"RTN","IBCEU",196,0)
OLAB(IBIFN) ; Returns 1 if bill IBIFN is outside lab
"RTN","IBCEU",197,0)
 N IBL,IBLAB
"RTN","IBCEU",198,0)
 S IBL=0
"RTN","IBCEU",199,0)
 S IBLAB=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU",200,0)
 I IBLAB,"24"[IBLAB S IBL=1
"RTN","IBCEU",201,0)
 Q IBL
"RTN","IBCEU",202,0)
 ;
"RTN","IBCEU",203,0)
PSRV(IBIFN) ; Returns 1 if bill IBIFN has any purch services
"RTN","IBCEU",204,0)
 N IBZ,IBXDATA,IBXSAVE,Z
"RTN","IBCEU",205,0)
 S IBZ=0
"RTN","IBCEU",206,0)
 D F^IBCEF("N-HCFA 1500 PROCEDURES",,,IBIFN)
"RTN","IBCEU",207,0)
 S Z=0 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:'Z  I $P(IBXSAVE("BOX24",Z),U,11) S IBZ=1 Q
"RTN","IBCEU",208,0)
 Q IBZ
"RTN","IBCEU",209,0)
 ;
"RTN","IBCEU",210,0)
SEQBILL(IBIFN) ; Returns the ien's of all bills in COB sequence for bill IBIFN
"RTN","IBCEU",211,0)
 ; Return value is "^" delimited: primary ien^secondary ien^tertiary ien
"RTN","IBCEU",212,0)
 N IBSEQ,Z
"RTN","IBCEU",213,0)
 S IBSEQ=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU",214,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",215,0)
 I $P(IBSEQ,U,Z)="" S $P(IBSEQ,U,Z)=IBIFN
"RTN","IBCEU",216,0)
 Q IBSEQ
"RTN","IBCEU",217,0)
 ;
"RTN","IBCEU5")
0^15^B87277838
"RTN","IBCEU5",1,0)
IBCEU5 ;ALB/TMP - EDI UTILITIES (continued) FOR HCFA 1500 ;13-DEC-99
"RTN","IBCEU5",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232**;21-MAR-94
"RTN","IBCEU5",3,0)
 ;
"RTN","IBCEU5",4,0)
EXTCR(IBPRV) ; Called by trigger on field .02 of file 399.0222
"RTN","IBCEU5",5,0)
 ; Function returns the first 3 digits of the provider's degree if
"RTN","IBCEU5",6,0)
 ; a VA provider or the credentials in file 355.9 if non-VA provider
"RTN","IBCEU5",7,0)
 ; IBPRV = vp to file 200 or 355.93
"RTN","IBCEU5",8,0)
 Q $E($$CRED^IBCEU(IBPRV),1,3)
"RTN","IBCEU5",9,0)
 ; 
"RTN","IBCEU5",10,0)
FTPRV(IBIFN,NOASK) ; If form type changes from UB92 to HCFA 1500 or vice
"RTN","IBCEU5",11,0)
 ; versa, ask to change provider function to appropriate function for
"RTN","IBCEU5",12,0)
 ; form type (ATTENDING = UB92, RENDERING = HCFA 1500)
"RTN","IBCEU5",13,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU5",14,0)
 ; NOASK (flag) = 1 if change should happen without asking first
"RTN","IBCEU5",15,0)
 N ATT,REN,FT
"RTN","IBCEU5",16,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",17,0)
 S REN=$$CKPROV^IBCEU(IBIFN,3,1)
"RTN","IBCEU5",18,0)
 S ATT=$$CKPROV^IBCEU(IBIFN,4,1)
"RTN","IBCEU5",19,0)
 I $S(FT=2:'REN&ATT,FT=3:'ATT&REN,1:0) D
"RTN","IBCEU5",20,0)
 . I '$G(NOASK) D TXFERPRV(IBIFN,FT) Q
"RTN","IBCEU5",21,0)
 . D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",22,0)
 Q
"RTN","IBCEU5",23,0)
 ;
"RTN","IBCEU5",24,0)
TXFERPRV(IBIFN,FT) ; Ask to change the function of the main provider on
"RTN","IBCEU5",25,0)
 ;  bill IBIFN to the function appropriate to the form type FT
"RTN","IBCEU5",26,0)
 ;  
"RTN","IBCEU5",27,0)
 N DIR,X,Y,Z,DIE,DA,DR,HAVE,NEED,IBZ
"RTN","IBCEU5",28,0)
 W ! S DIR("A")="  WANT TO CHANGE THE "_$S(FT=3:"RENDERING",1:"ATTENDING")_" PROVIDER'S FUNCTION TO "_$S(FT=3:"ATTENDING",1:"RENDERING")_"?: "
"RTN","IBCEU5",29,0)
 S DIR(0)="YA",DIR("B")="YES",DIR("?",1)="IF YOU ANSWER YES HERE, YOU WILL MAKE THE PROVIDER FUNCTIONS CONSISTENT",DIR("?")="  WITH THE FORM TYPE OF THE BILL"
"RTN","IBCEU5",30,0)
 D ^DIR K DIR
"RTN","IBCEU5",31,0)
 Q:Y'=1
"RTN","IBCEU5",32,0)
 D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",33,0)
 Q
"RTN","IBCEU5",34,0)
 ;
"RTN","IBCEU5",35,0)
PRVCHG(IBIFN,IBFT) ; Change provider type to type consistent with current
"RTN","IBCEU5",36,0)
 ; data on bill
"RTN","IBCEU5",37,0)
 N Z,IBZ,HAVE,NEED,DIE,DA,X,Y
"RTN","IBCEU5",38,0)
 S HAVE=$S(IBFT=3:3,1:4)
"RTN","IBCEU5",39,0)
 S NEED=$S(IBFT=3:4,1:3)
"RTN","IBCEU5",40,0)
 S Z=$O(^DGCR(399,IBIFN,"PRV","B",HAVE,0))
"RTN","IBCEU5",41,0)
 I Z D
"RTN","IBCEU5",42,0)
 . S DA(1)=IBIFN,DA=+Z
"RTN","IBCEU5",43,0)
 . D FDA^DILF(399.0222,.DA,.01,,NEED,"IBZ")
"RTN","IBCEU5",44,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",45,0)
 ;I Z S DA(1)=IBIFN,DIE="^DGCR(399,"_DA(1)_",""PRV"",",DA=+Z,DR=".01////"_NEED D FILE^DIE(,DIE
"RTN","IBCEU5",46,0)
 Q
"RTN","IBCEU5",47,0)
 ;
"RTN","IBCEU5",48,0)
PRVHELP ; Text for the provider function help
"RTN","IBCEU5",49,0)
 Q:$G(X)'="??"
"RTN","IBCEU5",50,0)
 N IBZ,IBQUIT,IB,IB1,DIR
"RTN","IBCEU5",51,0)
 S IBQUIT=0
"RTN","IBCEU5",52,0)
 I '$D(IOSL)!'$D(IOST) D HOME^%ZIS
"RTN","IBCEU5",53,0)
 Q:IOST'["C-"
"RTN","IBCEU5",54,0)
 W @IOF
"RTN","IBCEU5",55,0)
 I $G(D0) D
"RTN","IBCEU5",56,0)
 . N Z
"RTN","IBCEU5",57,0)
 . D SPECIFIC(D0)
"RTN","IBCEU5",58,0)
 . S Z=$$FT^IBCEF(D0)
"RTN","IBCEU5",59,0)
 . I $S(Z=2:$D(^DGCR(399,D0,"PRV","B",4)),Z=3:$D(^DGCR(399,D0,"PRV","B",3)),1:0) D
"RTN","IBCEU5",60,0)
 .. W !,"**** ",$S(Z=2:"ATTENDING",1:"RENDERING")," FUNCTION DOES NOT BELONG ON THIS BILL TYPE & MUST BE DELETED"
"RTN","IBCEU5",61,0)
 S IB=IOSL,IB1=1
"RTN","IBCEU5",62,0)
 F IBZ=1:1 S:$P($T(HLPTXT+IBZ),";;",2)="" IBQUIT=1 Q:IBQUIT  S IB1=1 D
"RTN","IBCEU5",63,0)
 . I $Y>(IB-3) N DIR,X,Y S IB1=0,DIR(0)="E" D ^DIR K DIR S IB=IB+IOSL I Y'=1 S IBQUIT=1 Q
"RTN","IBCEU5",64,0)
 . W !,$P($T(HLPTXT+IBZ),";;",2)
"RTN","IBCEU5",65,0)
 I IB1 D
"RTN","IBCEU5",66,0)
 . N DIR,X,Y S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEU5",67,0)
 W @IOF
"RTN","IBCEU5",68,0)
 Q
"RTN","IBCEU5",69,0)
 ;
"RTN","IBCEU5",70,0)
SPECIFIC(IBIFN) ; Display specific provider requirements for the bill IBIFN
"RTN","IBCEU5",71,0)
 N IBFT,IBPRV,IBR,ONBILL,Z,IBZ
"RTN","IBCEU5",72,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",73,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV) ;Returns needed providers
"RTN","IBCEU5",74,0)
 W !,"This bill is ",$S(IBFT=3:"UB-92",1:"HCFA 1500"),"/",$S($$INPAT^IBCEF(IBIFN):"Inpatient",1:"Outpatient")
"RTN","IBCEU5",75,0)
 W !!,"The valid provider functions for this bill are:"
"RTN","IBCEU5",76,0)
 F IBZ=1:1:5,9 I $$PRVOK^IBCEU(IBZ,IBIFN) D
"RTN","IBCEU5",77,0)
 . S ONBILL=$$CKPROV^IBCEU(IBIFN,IBZ)
"RTN","IBCEU5",78,0)
 . S IBR=$S($G(IBPRV(IBZ,"NOTOPT")):1,1:0)
"RTN","IBCEU5",79,0)
 . W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?13,$S(IBR&'ONBILL:"**",1:""),?15,$S(IBR:"REQUIRED",1:"OPTIONAL"),$S(ONBILL:" - ALREADY ON BILL",1:" - NOT ON BILL")
"RTN","IBCEU5",80,0)
 W !
"RTN","IBCEU5",81,0)
 Q
"RTN","IBCEU5",82,0)
 ;
"RTN","IBCEU5",83,0)
HLPTXT ; Helptext for provider function
"RTN","IBCEU5",84,0)
 ;; 
"RTN","IBCEU5",85,0)
 ;;PROVIDER FUNCTION requirements:
"RTN","IBCEU5",86,0)
 ;; 
"RTN","IBCEU5",87,0)
 ;;RENDERING: HCFA 1500 (both inpatient and outpatient): REQUIRED
"RTN","IBCEU5",88,0)
 ;;           This is the provider who performed the services.
"RTN","IBCEU5",89,0)
 ;;           Data will appear in form locator 24 of the HCFA 1500.
"RTN","IBCEU5",90,0)
 ;; 
"RTN","IBCEU5",91,0)
 ;;    NOTE: There can be only one rendering provider per HCFA 1500
"RTN","IBCEU5",92,0)
 ;;          claim form, so there may be multiple HCFA 1500's for a
"RTN","IBCEU5",93,0)
 ;;          single episode of care if services were performed by more
"RTN","IBCEU5",94,0)
 ;;          than one provider.  For example, there will be 2 HCFA 1500's
"RTN","IBCEU5",95,0)
 ;;          created for an episode of care that involved a surgical
"RTN","IBCEU5",96,0)
 ;;          procedure and a radiology exam.  The operating physician
"RTN","IBCEU5",97,0)
 ;;          would be the rendering provider on the HCFA 1500 that
"RTN","IBCEU5",98,0)
 ;;          included the surgical procedure(s) and the radiologist
"RTN","IBCEU5",99,0)
 ;;          would be the rendering provider on the HCFA 1500 that
"RTN","IBCEU5",100,0)
 ;;          included the radiology procedure(s).
"RTN","IBCEU5",101,0)
 ;; 
"RTN","IBCEU5",102,0)
 ;; 
"RTN","IBCEU5",103,0)
 ;;ATTENDING: UB-92 (inpatient and outpatient): REQUIRED
"RTN","IBCEU5",104,0)
 ;;           The physician who normally would be expected to
"RTN","IBCEU5",105,0)
 ;;           certify and recertify the medical necessity of the
"RTN","IBCEU5",106,0)
 ;;           services rendered and/or who has primary responsibility
"RTN","IBCEU5",107,0)
 ;;           for the patient's medical care and treatment.  Data is
"RTN","IBCEU5",108,0)
 ;;           printed in Form Locator 82 on the UB-92.
"RTN","IBCEU5",109,0)
 ;; 
"RTN","IBCEU5",110,0)
 ;;    NOTE: If there are multiple attending providers for the bill,
"RTN","IBCEU5",111,0)
 ;;          report the attending provider for the procedure having the
"RTN","IBCEU5",112,0)
 ;;          highest charge.  For outpatient, if the patient is
"RTN","IBCEU5",113,0)
 ;;          self-referred (e.g.: an ER or clinic visit), you may use
"RTN","IBCEU5",114,0)
 ;;          SLF000 as the attending provider id, with no provider
"RTN","IBCEU5",115,0)
 ;;          name.  SLF000 may NOT be used for services which require a
"RTN","IBCEU5",116,0)
 ;;          physician referral/order.
"RTN","IBCEU5",117,0)
 ;; 
"RTN","IBCEU5",118,0)
 ;; 
"RTN","IBCEU5",119,0)
 ;;OPERATING: UB-92 (inpatient and outpatient): SOMETIMES REQUIRED
"RTN","IBCEU5",120,0)
 ;;           The provider who performed the principal procedure(s)
"RTN","IBCEU5",121,0)
 ;;           being billed.  Data will be printed in form locator 83
"RTN","IBCEU5",122,0)
 ;;           on the UB-92.
"RTN","IBCEU5",123,0)
 ;; 
"RTN","IBCEU5",124,0)
 ;;    NOTE: Not applicable for HCFA 1500 form type as this would be
"RTN","IBCEU5",125,0)
 ;;                             reported as the rendering provider on
"RTN","IBCEU5",126,0)
 ;;                             the HCFA 1500.
"RTN","IBCEU5",127,0)
 ;;          UB-92 (inpatient): REQUIRED IF type of bill has first 2
"RTN","IBCEU5",128,0)
 ;;                             digits of 11, and there is a principal
"RTN","IBCEU5",129,0)
 ;;                             procedure that will print in form
"RTN","IBCEU5",130,0)
 ;;                             locators 80-81 of the claim.
"RTN","IBCEU5",131,0)
 ;;          UB-92 (outpatient): REQUIRED IF type of bill has first 2
"RTN","IBCEU5",132,0)
 ;;                             digits of 83, and there is a principal
"RTN","IBCEU5",133,0)
 ;;                             procedure that will print in form
"RTN","IBCEU5",134,0)
 ;;                             locators 80-81 of the claim.
"RTN","IBCEU5",135,0)
 ;; 
"RTN","IBCEU5",136,0)
 ;; 
"RTN","IBCEU5",137,0)
 ;;REFERRING: HCFA 1500 (both inpatient and outpatient): OPTIONAL
"RTN","IBCEU5",138,0)
 ;;           The provider who requested that the services being billed
"RTN","IBCEU5",139,0)
 ;;           be performed.  Data will be printed in boxes 17 and 17a of
"RTN","IBCEU5",140,0)
 ;;           the HCFA 1500.
"RTN","IBCEU5",141,0)
 ;; 
"RTN","IBCEU5",142,0)
 ;; 
"RTN","IBCEU5",143,0)
 ;;SUPERVISING: HCFA 1500 (both inpatient and outpatient): OPTIONAL
"RTN","IBCEU5",144,0)
 ;;           Required only when the rendering provider is supervised
"RTN","IBCEU5",145,0)
 ;;           by a physician.  Data will not be printed.
"RTN","IBCEU5",146,0)
 ;; 
"RTN","IBCEU5",147,0)
 ;; 
"RTN","IBCEU5",148,0)
 ;;OTHER: UB92 (both inpatient and outpatient): OPTIONAL
"RTN","IBCEU5",149,0)
 ;;           Used to report providers with functions not specifically
"RTN","IBCEU5",150,0)
 ;;           designated here.
"RTN","IBCEU5",151,0)
 ;;
"RTN","IBCEU5",152,0)
 ;
"RTN","IBCEU5",153,0)
LINKRX(IBIFN,IBREV) ; Ask for revenue code's RX if not already there
"RTN","IBCEU5",154,0)
 N DIR,X,Y,IBZ,IBRX,Z,Z0,DA
"RTN","IBCEU5",155,0)
 Q:$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,11)!($P($G(^(0)),U,10)'=3)
"RTN","IBCEU5",156,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  I Z'=IBREV S Z0=$G(^(Z,0)) I $P(Z0,U,10)=3,$P(Z0,U,11) S IBRX(+$P(Z0,U,11))=""
"RTN","IBCEU5",157,0)
 S DIR(0)="PAO^IBA(362.4,:AEMQ",DIR("S")="I $P(^(0),U,2)=IBIFN,'$D(IBRX(+Y))"
"RTN","IBCEU5",158,0)
 S DIR("A")="Select Rx for this charge: "
"RTN","IBCEU5",159,0)
 S DIR("?",1)="Enter an Rx# for this revenue code"
"RTN","IBCEU5",160,0)
 S DIR("?")=" The Rx must not already have an associated revenue code"
"RTN","IBCEU5",161,0)
 D ^DIR K DIR
"RTN","IBCEU5",162,0)
 I Y>0 D
"RTN","IBCEU5",163,0)
 . S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",164,0)
 . D FDA^DILF(399.042,.DA,.11,"R",+Y,"IBZ")
"RTN","IBCEU5",165,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",166,0)
 Q
"RTN","IBCEU5",167,0)
 ;
"RTN","IBCEU5",168,0)
LINKCPT(IBIFN,IBREV) ; Ask for revenue code's CPT
"RTN","IBCEU5",169,0)
 N DIR,X,Y,IBZ,IBCP,Z,Z0,Z1,DA,IBRC,IBP
"RTN","IBCEU5",170,0)
 S IBRC=$G(^DGCR(399,IBIFN,"RC",IBREV,0))
"RTN","IBCEU5",171,0)
 Q:$P(IBRC,U,8)!($P(IBRC,U,10)'=4)
"RTN","IBCEU5",172,0)
 S IBP=+$P(IBRC,U,6)
"RTN","IBCEU5",173,0)
 I $P(IBRC,U,11) W !,"PROCEDURE #"_$P(IBRC,U,11)_" HAS BEEN ASSOCIATED WITH THIS MANUAL CHARGE"
"RTN","IBCEU5",174,0)
 I '$P(IBRC,U,11) D  Q:IBRC=""
"RTN","IBCEU5",175,0)
 . S DIR("?",1)="Respond YES if this revenue code charge specifically references the data for"
"RTN","IBCEU5",176,0)
 . S DIR("?",2)="  a particular procedure that was manually entered on the previous screen."
"RTN","IBCEU5",177,0)
 . S DIR("?",3)="  For outpatient UB92 bills, associating a manual revenue code charge with",DIR("?")="  a procedure is the only way to print a modifier in box 44"
"RTN","IBCEU5",178,0)
 . S DIR(0)="YA",DIR("A")="SHOULD A PROCEDURE ENTRY BE ASSOCIATED WITH THIS CHARGE?: ",DIR("B")=$S(IBP:"YES",1:"NO") W ! D ^DIR K DIR W !
"RTN","IBCEU5",179,0)
 . I Y'=1 S IBRC="" Q
"RTN","IBCEU5",180,0)
 I $P(IBRC,U,11) D
"RTN","IBCEU5",181,0)
 . S DIR("?",1)="Respond YES if you no longer want this revenue code charge to reference a",DIR("?")="  specific manually entered procedure"
"RTN","IBCEU5",182,0)
 . S DIR(0)="YA",DIR("A")="DELETE THE EXISTING PROCEDURE ASSOCIATION?: ",DIR("B")="NO" W ! D ^DIR K DIR
"RTN","IBCEU5",183,0)
 . I Y=1 D UPDPTR(IBIFN,IBREV,"") S $P(IBRC,U,11)=""
"RTN","IBCEU5",184,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I IBREV'=Z,$P(Z0,U,11) D
"RTN","IBCEU5",185,0)
 . ; Don't allow to link to 'used' proc
"RTN","IBCEU5",186,0)
 . I $P(Z0,U,10)=4 S IBCP($P(Z0,U,11))="" Q
"RTN","IBCEU5",187,0)
 . I $P(Z0,U,10)=3,$P(Z0,U,15) S IBCP($P(Z0,U,15))=""
"RTN","IBCEU5",188,0)
 S DIR(0)="PAO^DGCR(399,"_IBIFN_",""CP"",:AEMQ",DIR("S")="I '$D(IBCP(+Y)),$P(^(0),U)[""CPT"",+^(0)="_+$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,6)
"RTN","IBCEU5",189,0)
 S DIR("A")="SELECT A PROCEDURE ENTRY: "_$S($P(IBRC,U,11):"#"_$P(IBRC,U,11)_" - "_$$EXPAND^IBTRE(399.0304,.01,$P($G(^DGCR(399,IBIFN,"CP",$P(IBRC,U,11),0)),U))_"// ",1:"")
"RTN","IBCEU5",190,0)
 S DIR("?")="Enter a manually-added CPT procedure to associate with this charge"
"RTN","IBCEU5",191,0)
 S DA(1)=IBIFN
"RTN","IBCEU5",192,0)
 D ^DIR K DIR W !
"RTN","IBCEU5",193,0)
 I Y>0 D UPDPTR(IBIFN,IBREV,+Y)
"RTN","IBCEU5",194,0)
 Q
"RTN","IBCEU5",195,0)
 ;
"RTN","IBCEU5",196,0)
UPDPTR(IBIFN,IBREV,Y) ;
"RTN","IBCEU5",197,0)
 N IBZ,DA
"RTN","IBCEU5",198,0)
 S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",199,0)
 D FDA^DILF(399.042,.DA,.11,"R",$S(Y:+Y,1:""),"IBZ")
"RTN","IBCEU5",200,0)
 D FILE^DIE(,"IBZ")
"RTN","IBCEU5",201,0)
 Q
"RTN","IBCEU5",202,0)
 ;
"RTN","IBCEU5",203,0)
INSFT(IBIFN) ; Returns 1 if form type is UB92, 0 if HCFA 1500
"RTN","IBCEU5",204,0)
 Q ($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU5",205,0)
 ;
"RTN","IBCNSC01")
0^46^B49699490
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;21-OCT-1993
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232**;21-MAR-94
"RTN","IBCNSC01",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 D SET^IBCNSP(START+1,OFFSET," Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+2,OFFSET,"          Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+3,OFFSET,"   Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+4,OFFSET,"    Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+5,OFFSET,"      One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+6,OFFSET," Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+7,OFFSET," Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+8,OFFSET,"   Filing Time Frame: "_$P(IBCNS0,"^",12))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+9,OFFSET,"    Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",21,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCNSC01",22,0)
 D GETBPNUM^IBCEP2B(+IBCNS)
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+10,OFFSET," Def. Div UB92 Prov #: "_$E($G(^TMP($J,"IBBF_ID",0,1)),1,15))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+11,OFFSET," Def. Div HCFA Prov #: "_$E($G(^TMP($J,"IBBF_ID",0,2)),1,15))
"RTN","IBCNSC01",25,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCNSC01",26,0)
 N START,OFFSET
"RTN","IBCNSC01",27,0)
 S START=1,OFFSET=45
"RTN","IBCNSC01",28,0)
 D SET^IBCNSP(START+1,OFFSET,"   Primary Form Type: "_$$EXPAND^IBTRE(36,.14,$P(IBCNS0,"^",14)))
"RTN","IBCNSC01",29,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",30,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+6,OFFSET+10,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3))
"RTN","IBCNSC01",34,0)
 I +IBCNS3=2 D SET^IBCNSP(START+7,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+8,OFFSET+5,"Electronic Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",36,0)
 D SET^IBCNSP(START+9,OFFSET,"Electronic Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",37,0)
 D SET^IBCNSP(START+10,OFFSET-3,"Inst Electronic Bill ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",38,0)
 D SET^IBCNSP(START+11,OFFSET-3,"Prof Electronic Bill ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",39,0)
 Q
"RTN","IBCNSC01",40,0)
 ;
"RTN","IBCNSC01",41,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",42,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",43,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",44,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",45,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",46,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",47,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",48,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",49,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",50,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",51,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",52,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",53,0)
PHONEQ Q IBX
"RTN","IBCNSC01",54,0)
 ;
"RTN","IBCNSC01",55,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",56,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",57,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",58,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",59,0)
 S START=15,OFFSET=25
"RTN","IBCNSC01",60,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",61,0)
 N OFFSET S OFFSET=2
"RTN","IBCNSC01",62,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",63,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",64,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",65,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",66,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC01",67,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",68,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",69,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",70,0)
 Q
"RTN","IBCNSC01",71,0)
 ;
"RTN","IBCNSC01",72,0)
 ;
"RTN","IBCNSC01",73,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",74,0)
 ; this insurance company.
"RTN","IBCNSC01",75,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",76,0)
 ;
"RTN","IBCNSC01",77,0)
 NEW PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",78,0)
 NEW START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",79,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",80,0)
 I PAYERIEN D
"RTN","IBCNSC01",81,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",82,0)
 . S APP=0
"RTN","IBCNSC01",83,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",84,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",85,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",86,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",87,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",88,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",89,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",90,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",91,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",92,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID
"RTN","IBCNSC01",93,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID
"RTN","IBCNSC01",94,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN
"RTN","IBCNSC01",95,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",96,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",97,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",98,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",99,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",100,0)
 .. Q
"RTN","IBCNSC01",101,0)
 . Q
"RTN","IBCNSC01",102,0)
 ;
"RTN","IBCNSC01",103,0)
 ; Start the display of Payer data on line 69
"RTN","IBCNSC01",104,0)
 S START=69
"RTN","IBCNSC01",105,0)
 S TITLE=" Payer Information/Electronic Insurance Verification "
"RTN","IBCNSC01",106,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",107,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",108,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",109,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",110,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",111,0)
 S IBLINE=START+2
"RTN","IBCNSC01",112,0)
 ;
"RTN","IBCNSC01",113,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",114,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",115,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",116,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",117,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",118,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",119,0)
 . Q
"RTN","IBCNSC01",120,0)
 ;
"RTN","IBCNSC01",121,0)
 ; Display all the applications
"RTN","IBCNSC01",122,0)
 S APPNAME=""
"RTN","IBCNSC01",123,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",124,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",125,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",126,0)
 . ;
"RTN","IBCNSC01",127,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",128,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",129,0)
 . D SET^IBCNSP(IBLINE,50,"Auto-Accept Info: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",130,0)
 . ;
"RTN","IBCNSC01",131,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",132,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",133,0)
 . D SET^IBCNSP(IBLINE,47,"Ident Req Subscr ID: "_$P(APPDATA(APPNAME),U,4))
"RTN","IBCNSC01",134,0)
 . ;
"RTN","IBCNSC01",135,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",136,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",137,0)
 . D SET^IBCNSP(IBLINE,51,"SSN = Subscr ID: "_$P(APPDATA(APPNAME),U,5))
"RTN","IBCNSC01",138,0)
 . ;
"RTN","IBCNSC01",139,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",140,0)
 . D SET^IBCNSP(IBLINE,8,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",141,0)
 . D SET^IBCNSP(IBLINE,54,"Transmit SSN: "_$P(APPDATA(APPNAME),U,6))
"RTN","IBCNSC01",142,0)
 . ;
"RTN","IBCNSC01",143,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",144,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",145,0)
 . ;
"RTN","IBCNSC01",146,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",147,0)
 . D SET^IBCNSP(IBLINE,13,"D-Date: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",148,0)
 . ;
"RTN","IBCNSC01",149,0)
 . Q
"RTN","IBCNSC01",150,0)
PAYERX ;
"RTN","IBCNSC01",151,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",152,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",153,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",154,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",155,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",156,0)
 Q
"RTN","IBCNSC01",157,0)
 ;
"RTN","IBCNSC01",158,0)
 ;
"RTN","IBCNSC01",159,0)
REMARKS ;
"RTN","IBCNSC01",160,0)
 ;
"RTN","IBCNSC01",161,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",162,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",163,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",164,0)
 ;
"RTN","IBCNSC01",165,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",166,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",167,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",168,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",169,0)
 . Q
"RTN","IBCNSC01",170,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",171,0)
 Q
"RTN","IBCNSC01",172,0)
 ;
"RTN","IBCNSC01",173,0)
SYN ;
"RTN","IBCNSC01",174,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",175,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",176,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",177,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",178,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",179,0)
 Q
"RTN","IBCNSC01",180,0)
 ;
"RTN","IBCNSC1")
0^36^B15254105
"RTN","IBCNSC1",1,0)
IBCNSC1 ;ALB/NLR - IBCNS INSURANCE COMPANY ;23-MAR-93
"RTN","IBCNSC1",2,0)
 ;;2.0;INTEGRATED BILLING;**62,137,232**;21-MAR-94
"RTN","IBCNSC1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSC1",4,0)
 ;
"RTN","IBCNSC1",5,0)
% G EN^IBCNSC
"RTN","IBCNSC1",6,0)
 ;
"RTN","IBCNSC1",7,0)
AI ; -- (In)Activate Company
"RTN","IBCNSC1",8,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",9,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY G EXIT
"RTN","IBCNSC1",10,0)
 D ^IBCNSC2
"RTN","IBCNSC1",11,0)
 G EXIT
"RTN","IBCNSC1",12,0)
CC ; -- Change Insurance Company
"RTN","IBCNSC1",13,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",14,0)
 S IBCNS1=IBCNS K IBCNS D INSCO^IBCNSC
"RTN","IBCNSC1",15,0)
 I '$D(IBCNS) S IBCNS=IBCNS1
"RTN","IBCNSC1",16,0)
 K IBCNS1,VALMQUIT
"RTN","IBCNSC1",17,0)
 G EXIT
"RTN","IBCNSC1",18,0)
EA ; -- Billing,Claims,Appeals,Inquiry,Telephone,Main,Remarks,Synonyms
"RTN","IBCNSC1",19,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",20,0)
 D MAIN
"RTN","IBCNSC1",21,0)
 ;
"RTN","IBCNSC1",22,0)
 ; -- was company deleted
"RTN","IBCNSC1",23,0)
 I '$D(^DIC(36,IBCNS)) W !!,"<DELETED>",!! S VALMQUIT="" Q
"RTN","IBCNSC1",24,0)
 ;
"RTN","IBCNSC1",25,0)
EXIT ;
"RTN","IBCNSC1",26,0)
 D HDR^IBCNSC,BLD^IBCNSC
"RTN","IBCNSC1",27,0)
 S VALMBCK="R"
"RTN","IBCNSC1",28,0)
 Q
"RTN","IBCNSC1",29,0)
MAIN ; -- Call edit template
"RTN","IBCNSC1",30,0)
 N DIR,X,Y,DTOUT,DUOUT
"RTN","IBCNSC1",31,0)
 S Y=1
"RTN","IBCNSC1",32,0)
 I $G(IBY)'=",12," S DIR(0)="YA",DIR("B")="YES",DIR("A")="WANT TO EDIT BILLING FACILITY PRIMARY IDs?: " W ! D ^DIR K DIR
"RTN","IBCNSC1",33,0)
 G:$D(DTOUT)!$D(DUOUT) MAINQ
"RTN","IBCNSC1",34,0)
 I Y D FACID
"RTN","IBCNSC1",35,0)
 L +^DIC(36,+IBCNS):5 I '$T D LOCKED^IBTRCD1 G MAINQ
"RTN","IBCNSC1",36,0)
 N DIE,DA,DR S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="[IBEDIT INS CO1]" D ^DIE K DIE I $D(Y) S IB("^")=1
"RTN","IBCNSC1",37,0)
 I $G(IBY)=",12," D EDITID^IBCEP(+IBCNS)
"RTN","IBCNSC1",38,0)
 L -^DIC(36,+IBCNS)
"RTN","IBCNSC1",39,0)
MAINQ Q
"RTN","IBCNSC1",40,0)
 ;
"RTN","IBCNSC1",41,0)
FACID ; -- Edit facility ids
"RTN","IBCNSC1",42,0)
 D FACID^IBCEP2B(+IBCNS)
"RTN","IBCNSC1",43,0)
 Q
"RTN","IBCNSC1",44,0)
 ;
"RTN","IBCNSC1",45,0)
SORRY ; -- can't inactivate, don't have key
"RTN","IBCNSC1",46,0)
 W !!,"You do not have access to Inactivate entries.  See your application coordinator.",! D PAUSE^VALM1
"RTN","IBCNSC1",47,0)
 Q
"RTN","IBCNSC1",48,0)
PRESCR ;
"RTN","IBCNSC1",49,0)
 N OFFSET,START,IBCNS18,IBADD
"RTN","IBCNSC1",50,0)
 S IBCNS18=$$ADDRESS^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSC1",51,0)
 S START=34,OFFSET=2
"RTN","IBCNSC1",52,0)
 D SET^IBCNSP(START,OFFSET+19," Prescription Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC1",53,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS18,"^",7),0)),"^",1))
"RTN","IBCNSC1",54,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS18,"^",1))
"RTN","IBCNSC1",55,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS18,"^",2))
"RTN","IBCNSC1",56,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS18,"^",11))
"RTN","IBCNSC1",57,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC1",58,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS18,"^",3)) S IBADD=1
"RTN","IBCNSC1",59,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS18,"^",4),1,15)_$S($P(IBCNS18,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS18,"^",5),0)),"^",2)_" "_$E($P(IBCNS18,"^",6),1,5))
"RTN","IBCNSC1",60,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS18,"^",8))
"RTN","IBCNSC1",61,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS18,"^",9))
"RTN","IBCNSC1",62,0)
 Q
"RTN","IBCNSC1",63,0)
 ;
"RTN","IBCNSC1",64,0)
PROVID N OFFSET,START,IBCNS4,IBDISP,Z
"RTN","IBCNSC1",65,0)
 S START=53,OFFSET=2,IBCNS4=$G(^DIC(36,IBCNS,4))
"RTN","IBCNSC1",66,0)
 D SET^IBCNSP(START,OFFSET+25," Provider ID Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC1",67,0)
 D PARAMS(IBCNS4,.IBDISP)
"RTN","IBCNSC1",68,0)
 S Z=0 F  S Z=$O(IBDISP(Z)) Q:'Z  D SET^IBCNSP(START+Z,OFFSET+$P(IBDISP(Z),U),$P(IBDISP(Z),U,2))
"RTN","IBCNSC1",69,0)
 ;
"RTN","IBCNSC1",70,0)
 Q
"RTN","IBCNSC1",71,0)
 ;
"RTN","IBCNSC1",72,0)
INSDEF(IBINS,IBPTYP) ; Returns the default id # for an ins co, if possible
"RTN","IBCNSC1",73,0)
 N X
"RTN","IBCNSC1",74,0)
 S X=""
"RTN","IBCNSC1",75,0)
 I IBINS,IBPTYP S X=$P($G(^IBA(355.91,+$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*","")),0)),U,7)
"RTN","IBCNSC1",76,0)
 Q X
"RTN","IBCNSC1",77,0)
 ;
"RTN","IBCNSC1",78,0)
PARAMS(IBCNS4,IBDISP) ; Returns array containing prov id parameters
"RTN","IBCNSC1",79,0)
 ; IBCNS4 = '4' node of insurance co
"RTN","IBCNSC1",80,0)
 ; IBDISP = returned IBDISP(line#)=offset^text
"RTN","IBCNSC1",81,0)
 N IBQ
"RTN","IBCNSC1",82,0)
 S IBDISP(1)="0^Perf Provider Secondary ID Type (HCFA): "_$$EXPAND^IBTRE(36,4.01,+$P(IBCNS4,U))
"RTN","IBCNSC1",83,0)
 S IBDISP(2)="0^Perf Provider Secondary ID Type (UB92): "_$$EXPAND^IBTRE(36,4.02,+$P(IBCNS4,U,2))
"RTN","IBCNSC1",84,0)
 S IBDISP(3)="0^Perf Provider Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.03,+$P(IBCNS4,U,3))
"RTN","IBCNSC1",85,0)
 S IBDISP(4)="22^Care Unit Prompt: "_$$EXPAND^IBTRE(36,4.09,$P(IBCNS4,U,9))
"RTN","IBCNSC1",86,0)
 Q
"RTN","IBCNSC1",87,0)
 ;
"RTN","IBCNSCD")
0^38^B21287239
"RTN","IBCNSCD",1,0)
IBCNSCD ;ALB/CPM - DELETE INSURANCE COMPANY ;01-FEB-95
"RTN","IBCNSCD",2,0)
 ;;2.0;INTEGRATED BILLING;**28,46,232**;21-MAR-94
"RTN","IBCNSCD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSCD",4,0)
 ;
"RTN","IBCNSCD",5,0)
DEL ; 'Delete Insurance Company' Action
"RTN","IBCNSCD",6,0)
 ;   Required variable input:
"RTN","IBCNSCD",7,0)
 ;     IBCNS  --  Pointer to the company in file #36
"RTN","IBCNSCD",8,0)
 ;
"RTN","IBCNSCD",9,0)
 N I,IBC,IBDAT,Y,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","IBCNSCD",10,0)
 S VALMBCK="R" D FULL^VALM1
"RTN","IBCNSCD",11,0)
 I '$G(IBCNS) G DELQ
"RTN","IBCNSCD",12,0)
 S IBCNSD=$G(^DIC(36,IBCNS,0))
"RTN","IBCNSCD",13,0)
 I IBCNSD="" W !!,"This Insurance Company does not exist!",! G DELQ
"RTN","IBCNSCD",14,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY^IBTRE1 G DELQ
"RTN","IBCNSCD",15,0)
 I '$P(IBCNSD,"^",5) D  G DELQ
"RTN","IBCNSCD",16,0)
 .W !!,"This Insurance Company is still active!  You must use the"
"RTN","IBCNSCD",17,0)
 .W !,"'Inactivate Company' action to inactivate this company before"
"RTN","IBCNSCD",18,0)
 .W !,"you can delete it."
"RTN","IBCNSCD",19,0)
 I $D(^DPT("AB",IBCNS)) D  G DELQ
"RTN","IBCNSCD",20,0)
 .W !!,"There are still patient policies with this company!  These policies"
"RTN","IBCNSCD",21,0)
 .W !,"must be deleted or re-pointed to another company before you can"
"RTN","IBCNSCD",22,0)
 .W !,"delete the company."
"RTN","IBCNSCD",23,0)
 I $D(^IBA(355.3,"B",IBCNS)) D  G DELQ
"RTN","IBCNSCD",24,0)
 .W !!,"There are still Insurance Plans on file with this company!  These plans"
"RTN","IBCNSCD",25,0)
 .W !,"must be deleted or re-pointed to another company before you can"
"RTN","IBCNSCD",26,0)
 .W !,"delete the company."
"RTN","IBCNSCD",27,0)
 I $O(^IBA(355.9,"AE",IBCNS,""))!$O(^IBA(355.91,"AC",IBCNS,"")) D  G DELQ
"RTN","IBCNSCD",28,0)
 .W !!,"There are still provider ids defined for this company!  These ids must"
"RTN","IBCNSCD",29,0)
 .W !,"be deleted before you can delete this company."
"RTN","IBCNSCD",30,0)
 I $O(^IBA(355.96,"AC",IBCNS,""))!$O(^IBA(355.95,"C",IBCNS,"")) D  G DELQ
"RTN","IBCNSCD",31,0)
 .W !!,"There are still provider id care units defined for this company!  These"
"RTN","IBCNSCD",32,0)
 .W !,"care unit entries must be deleted before you can delete this company."
"RTN","IBCNSCD",33,0)
 I $O(^IBA(355.92,"B",IBCNS,"")) D  G DELQ
"RTN","IBCNSCD",34,0)
 .W !!,"There are still facility ids defined for this company!  These ids must be"
"RTN","IBCNSCD",35,0)
 .W !,"deleted before you can delete this company."
"RTN","IBCNSCD",36,0)
 ;
"RTN","IBCNSCD",37,0)
 ; - explain functionality
"RTN","IBCNSCD",38,0)
 D INTRO^IBCNSCD3 S DIR(0)="E" W ! D ^DIR K DIR I $D(DIRUT)!$D(DUOUT) G DELQ1
"RTN","IBCNSCD",39,0)
 ;
"RTN","IBCNSCD",40,0)
 ; - need to merge data into another company?
"RTN","IBCNSCD",41,0)
 D MERGE^IBCNSCD3 I IBQUIT G DELQ
"RTN","IBCNSCD",42,0)
 ;
"RTN","IBCNSCD",43,0)
 ; - provide a warning message
"RTN","IBCNSCD",44,0)
 D WARN^IBCNSCD3
"RTN","IBCNSCD",45,0)
 ;
"RTN","IBCNSCD",46,0)
 ; - okay to proceed?
"RTN","IBCNSCD",47,0)
 S DIR(0)="Y",DIR("A")="Is it okay to "_$S(IBREP:"merge",1:"delete")_" this company"_$S(IBREP:" information into the other",1:""),DIR("?")="^D HLP^IBCNSCD3"
"RTN","IBCNSCD",48,0)
 W ! D ^DIR K DIR I 'Y W !!,"The company was not deleted." G DELQ
"RTN","IBCNSCD",49,0)
 ;
"RTN","IBCNSCD",50,0)
 ; - merge Insurance Reviews
"RTN","IBCNSCD",51,0)
 I IBCALLIR,$D(^IBT(356.2,"AIACT",IBCNS)) D
"RTN","IBCNSCD",52,0)
 .W !!,"  >> Merging known Insurance Reviews into ",IBREPN,"... "
"RTN","IBCNSCD",53,0)
 .S IBC=0 F  S IBC=$O(^IBT(356.2,"AIACT",IBCNS,IBC)) Q:'IBC  D
"RTN","IBCNSCD",54,0)
 ..S IBX=0 F  S IBX=$O(^IBT(356.2,"AIACT",IBCNS,IBC,IBX)) Q:'IBX  S DA=IBX,DIE="^IBT(356.2,",DR=".08////"_IBREP D ^DIE K DA,DIE,DR
"RTN","IBCNSCD",55,0)
 .W "done."
"RTN","IBCNSCD",56,0)
 ;
"RTN","IBCNSCD",57,0)
 ; - merge bills/receivables
"RTN","IBCNSCD",58,0)
 I IBCALLAR W !!,"  >> Merging known bills and receivables into ",IBREPN,"... ",!
"RTN","IBCNSCD",59,0)
 S IBERR="" D EN^RCAMINS(IBCNS,$S(+$G(IBREP):IBREP,1:""),'IBCALLAR,.IBERR)
"RTN","IBCNSCD",60,0)
 I IBCALLAR W !?5,$S(IBERR<0:"AR Error: "_$P(IBERR,"^",2),1:"All done.")
"RTN","IBCNSCD",61,0)
 ;
"RTN","IBCNSCD",62,0)
 ; - flag company for deletion
"RTN","IBCNSCD",63,0)
 W !!,"  >> Flagging ",$P(IBCNSD,"^")," for deletion... "
"RTN","IBCNSCD",64,0)
 S DA=IBCNS,DIE="^DIC(36,",DR="5.01////1;5.02////"_$S($G(IBREP):IBREP,1:"@")
"RTN","IBCNSCD",65,0)
 D ^DIE K DA,DIE,DR W "done."
"RTN","IBCNSCD",66,0)
 ;
"RTN","IBCNSCD",67,0)
 ; - queue the final clean up job
"RTN","IBCNSCD",68,0)
 W !!,"  >> Queuing the final clean-up job... "
"RTN","IBCNSCD",69,0)
 S IBTASK=$$ALR I IBTASK W !?5,"This job is already queued as task number ",IBTASK,"." G DELC
"RTN","IBCNSCD",70,0)
 S IBDAT=$S($P($H,",",2)<25200:$H,$P($H,",",2)>82800:$H,1:+$H_",82800")
"RTN","IBCNSCD",71,0)
 S ZTRTN="DQ^IBCNSCD1",ZTDTH=IBDAT,ZTIO="",ZTDESC="IB - INSURANCE COMPANY DELETION"
"RTN","IBCNSCD",72,0)
 S IBCNSN=$P(IBCNSD,"^") F I="IBCNS","IBREP","IBCNSN" S ZTSAVE(I)=""
"RTN","IBCNSCD",73,0)
 D ^%ZTLOAD
"RTN","IBCNSCD",74,0)
 W !?5,$S($D(ZTSK):"The job has been queued to run "_$S($P($H,",",2)<$P(IBDAT,",",2):"at 11:00pm",1:"now")_".  The task number is "_ZTSK_".",1:"Unable to queue this job.  Please contact your IRM Service.")
"RTN","IBCNSCD",75,0)
 I $D(ZTSK)#2 S $P(^IBE(350.9,1,4),"^",8)=ZTSK
"RTN","IBCNSCD",76,0)
 ;
"RTN","IBCNSCD",77,0)
DELC S VALMBCK="Q"
"RTN","IBCNSCD",78,0)
 ;
"RTN","IBCNSCD",79,0)
DELQ D PAUSE^VALM1
"RTN","IBCNSCD",80,0)
DELQ1 K IBCNSD,IBCNSN,IBREP,IBREPN,IBIP,IBBU,IBAB,IBMRGN,IBMRGF,IBX,IBTASK
"RTN","IBCNSCD",81,0)
 K DIRUT,DUOUT,DTOUT,DIROUT,ZTSK,IBQUIT,IBCALLAR,IBCALLIR,IBERR
"RTN","IBCNSCD",82,0)
 Q
"RTN","IBCNSCD",83,0)
 ;
"RTN","IBCNSCD",84,0)
ALR() ; Has the background clean-up job already been queued?
"RTN","IBCNSCD",85,0)
 ;   Input:   None
"RTN","IBCNSCD",86,0)
 ;  Output:   0  --  Job hasn't been queued
"RTN","IBCNSCD",87,0)
 ;           >0  --  Task # of queued job
"RTN","IBCNSCD",88,0)
 N ZTSK
"RTN","IBCNSCD",89,0)
 S ZTSK=+$P($G(^IBE(350.9,1,4)),"^",8) I 'ZTSK G ALRQ
"RTN","IBCNSCD",90,0)
 D ISQED^%ZTLOAD I 'ZTSK(0) S ZTSK=0
"RTN","IBCNSCD",91,0)
ALRQ Q ZTSK
"RTN","IBCSC3")
0^10^B31826832
"RTN","IBCSC3",1,0)
IBCSC3 ;ALB/MJB - MCCR SCREEN 3 (PAYER/MAILING ADDRESS) ;27 MAY 88 10:15
"RTN","IBCSC3",2,0)
 ;;2.0;INTEGRATED BILLING;**8,43,52,80,82,51,137,232**;21-MAR-94
"RTN","IBCSC3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCSC3",4,0)
 ;
"RTN","IBCSC3",5,0)
 ;MAP TO DGCRSC3
"RTN","IBCSC3",6,0)
 ;
"RTN","IBCSC3",7,0)
EN N IB,IBX,IBINS,Y,Z
"RTN","IBCSC3",8,0)
 I $D(DGRVRCAL) D ^IBCU6 K DGRVRCAL
"RTN","IBCSC3",9,0)
 D ^IBCSCU S IBSR=3,IBSR1="",IBV1="000" I IBV S IBV1="111"
"RTN","IBCSC3",10,0)
 D H^IBCSCU
"RTN","IBCSC3",11,0)
 D:$D(^DGCR(399,IBIFN,"AIC")) 3^IBCVA0
"RTN","IBCSC3",12,0)
 D:'$D(^DGCR(399,IBIFN,"AIC")) 123^IBCVA
"RTN","IBCSC3",13,0)
 D POL^IBCNSU41(DFN)
"RTN","IBCSC3",14,0)
 F I=0,"M","M1","U","U2" S IB(I)=$S($D(^DGCR(399,IBIFN,I)):(^(I)),1:"")
"RTN","IBCSC3",15,0)
 S IBOUTP=2,IBINDT=$S(+$G(IB("U")):+IB("U"),1:DT)
"RTN","IBCSC3",16,0)
 ;S Z=1,IBW=1 X IBWW W " Rate Type  : ",$S($P(IB(0),U,7)']"":IBU,$D(^DGCR(399.3,$P(IB(0),U,7),0)):$P(^(0),U),1:IBUN)
"RTN","IBCSC3",17,0)
 ;
"RTN","IBCSC3",18,0)
 S X=" Rate Type  : "_$S($P(IB(0),U,7)']"":IBU,$D(^DGCR(399.3,$P(IB(0),U,7),0)):$P(^(0),U),1:IBUN)
"RTN","IBCSC3",19,0)
 S Z=1,IBW=1 X IBWW W X
"RTN","IBCSC3",20,0)
 I +$P($G(^IBE(350.9,1,1)),U,22) W $J("",(42-$L(X))),"Form Type: ",$P($G(^IBE(353,+$P(IB(0),U,19),0)),U,1)
"RTN","IBCSC3",21,0)
 W !?4,"Responsible: ",$S($P(IB(0),U,11)']"":IBU,$P(IB(0),U,11)="p":"PATIENT",$P(IB(0),U,11)="i":"INSURER",1:"OTHER")
"RTN","IBCSC3",22,0)
 W ?45,"Payer Sequence: " S IBX=$P(IB(0),U,21) W $S(IBX="P":"Primary",IBX="S":"Secondary",IBX="T":"Tertiary",IBX="A":"Patient",1:"")
"RTN","IBCSC3",23,0)
 I $P(IB(0),U,11)="i" D
"RTN","IBCSC3",24,0)
 . W !?4,"Bill Payer : " S X=$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCSC3",25,0)
 . W $S(+X:$P($G(^DIC(36,+X,0)),U,1),$$MCRWNR^IBEFUNC($$CURR^IBCEF2(IBIFN)):"MRA NEEDED FROM MEDICARE",1:IBU)
"RTN","IBCSC3",26,0)
 . W ?45,"Transmit: " S Z=0,X=$$TXMT^IBCEF4(IBIFN,.Z)
"RTN","IBCSC3",27,0)
 . W $S(X:"Yes",1:"No-"_$S(Z=1:"Forced to print local",Z=2&($$WNRBILL^IBEFUNC(IBIFN)):"MRA not active",Z=2:"EDI not active",Z=3:"Rate typ transmit off",Z=4:"Ins. co transmit off",Z=5:"Failed RULE #"_$G(Z(0)),Z=6:"Invalid NDC code type",1:"??"))
"RTN","IBCSC3",28,0)
 I $P(IB(0),U,11)']"" G MAIL
"RTN","IBCSC3",29,0)
 I $P(IB(0),U,11)="p" G MAIL
"RTN","IBCSC3",30,0)
 I $P(IB(0),U,11)="o" W !?4,"Inst. Name : ",$S($P(IB("M"),U,11)']"":IBU,$D(^DIC(4,$P(IB("M"),U,11),0)):$P(^(0),U,1),1:"UNKNOWN INSTITUTION") G MAIL
"RTN","IBCSC3",31,0)
 I $P(IB(0),U,11)="i" I $D(IBDD)>1,$D(^DGCR(399,IBIFN,"AIC")) G SHW
"RTN","IBCSC3",32,0)
 D UP G LST:$D(IBDD)>1 W !?4,"Insurance : NO REIMBURSABLE INSURANCE INFORMATION ON FILE",!?17,"[Add Insurance Information by entering '1' at the prompt below]" G MAIL
"RTN","IBCSC3",33,0)
 ;W !?4,"Insurance Carrier",?40,"Whose",?66,"Relationship" S X="",$P(X,"=",81)="" W !,X
"RTN","IBCSC3",34,0)
LST N IBDTIN,IBICT
"RTN","IBCSC3",35,0)
 S IBDTIN=+$G(IB("U")),IBICT=0
"RTN","IBCSC3",36,0)
 W ! D HDR^IBCNS
"RTN","IBCSC3",37,0)
 S I=0 F  S I=$O(IBDD("S",I)) Q:'I  D  Q:IBICT'<5
"RTN","IBCSC3",38,0)
 .S IBX=0 F  S IBX=$O(IBDD("S",I,IBX)) Q:'IBX  S IBINS=$G(IBDD(IBX,0)) I IBINS'="" S IBICT=IBICT+1 D:IBICT<5 D1^IBCNS I IBICT'<5 W !,?1,"**Patient has additional insurance - use ?INS to see the entire list" Q
"RTN","IBCSC3",39,0)
 G MAIL
"RTN","IBCSC3",40,0)
LST1 W !?4,$S($D(^DIC(36,+IBDD(IBX,0),0)):$E($P(^(0),"^",1),1,20),1:"UNKNOWN") S X=$P(IBDD(IBX,0),"^",6) W ?26,$S(X="v":"VETERAN",X="s":"SPOUSE",1:"OTHER") S X=$P(IBDD(IBX,0),"^",16)
"RTN","IBCSC3",41,0)
 S X=$S(+X=1:"PATIENT",+X=2:"SPOUSE",+X=3:"CHILD",+X=8:"EMPLOYEE",+X=11:"ORGAN DONOR",+X=18:"PARENT",+X=15:"PLANTIFF",1:"UNKNOWN")
"RTN","IBCSC3",42,0)
 I X="UNKNOWN" S X1=$S($D(IBDD(IBX,0)):$P(IBDD(IBX,0),"^",6),1:""),X=$S(X1="v":"PATIENT",X1="s":"SPOUSE",1:X)
"RTN","IBCSC3",43,0)
 W ?37,X,?49 S Y=$P(IBDD(IBX,0),"^",8) X ^DD("DD") W Y,?64 S Y=$P(IBDD(IBX,0),"^",4) X ^DD("DD") W Y
"RTN","IBCSC3",44,0)
 Q
"RTN","IBCSC3",45,0)
SHW I $D(IBDD) S I="" F  S I=$O(IBDD(I)) Q:'I  D SHW1
"RTN","IBCSC3",46,0)
MAIL I $$BUFFER^IBCNBU1(DFN) W !!,?17,"***  Patient has Insurance Buffer entries  ***"
"RTN","IBCSC3",47,0)
 S IB("M")=$S($D(^DGCR(399,IBIFN,"M")):^("M"),1:""),IB("M1")=$S($D(^DGCR(399,IBIFN,"M1")):^("M1"),1:""),IB(0)=^DGCR(399,IBIFN,0)
"RTN","IBCSC3",48,0)
 S Z=2,IBW=1 W ! X IBWW
"RTN","IBCSC3",49,0)
 S X=0 I $P(IB("M1"),U,2)="",$P(IB("M1"),U,3)="",$P(IB("M1"),U,4)="" S X=1 W " Facility ID #s: ",IBUN
"RTN","IBCSC3",50,0)
 I 'X W " Primary  : ",$P(IB("M1"),U,2),!?4,"Secondary: ",$P(IB("M1"),U,3),?45,"Tertiary : ",$P(IB("M1"),U,4)
"RTN","IBCSC3",51,0)
 S Z=3,IBW=1 W ! X IBWW
"RTN","IBCSC3",52,0)
 W " Mailing Address : "
"RTN","IBCSC3",53,0)
 S X=+$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCSC3",54,0)
 I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
"RTN","IBCSC3",55,0)
 I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,1:4)) W ?56,"Electronic ID: ",$S(I'="":I,1:"<NONE>")
"RTN","IBCSC3",56,0)
 S X="" I IB("M")]"" F I=4:1:9 Q:X]""  S X=$P(IB("M"),"^",I)
"RTN","IBCSC3",57,0)
 I X']"" W !?4,"NO MAILING ADDRESS HAS BEEN SPECIFIED!",?45,$$UP1,!?4,"Send Bill to PAYER listed above." G ENDSCR
"RTN","IBCSC3",58,0)
 S X=IB("M") W !,?4,$S($P(X,"^",4)]"":$P(X,"^",4),1:"'MAIL TO' PERSON/PLACE UNSPECIFIED"),?45,$$UP1
"RTN","IBCSC3",59,0)
 W !?4,$S($P(X,"^",5)]"":$P(X,"^",5),1:"STREET ADDRESS UNSPECIFIED") W:$P(X,"^",6)]"" ", ",$P(X,"^",6)
"RTN","IBCSC3",60,0)
 W ! W:$P(IB("M1"),"^",1)]"" ?4,$P(IB("M1"),"^",1),", "
"RTN","IBCSC3",61,0)
 W ?4,$S($P(X,"^",7)]"":$P(X,"^",7),1:"CITY UNSPECIFIED"),", ",$S($D(^DIC(5,+$P(X,"^",8),0)):$P(^(0),"^",2),1:"STATE UNSPECIFIED"),"  ",$S($P(X,"^",9)]"":$P(X,"^",9),1:"ZIP UNSPECIFIED")
"RTN","IBCSC3",62,0)
 ;
"RTN","IBCSC3",63,0)
ENDSCR K IBADI,IBDD,IBOUTP,IBINDT,I,X,X1
"RTN","IBCSC3",64,0)
 G ^IBCSCP
"RTN","IBCSC3",65,0)
 ;
"RTN","IBCSC3",66,0)
SHW1 S X=IBDD(I,0),Z=$G(^DIC(36,+X,0))
"RTN","IBCSC3",67,0)
 W !!?4,"Ins ",I,": " W $E($S($P(Z,U,1)'="":$P(Z,U,1),1:IBU),1,16)
"RTN","IBCSC3",68,0)
 I $P(Z,U,2)="N" W ?30,"WILL NOT REIMBURSE"
"RTN","IBCSC3",69,0)
 W ?51,"Policy #: ",$E($S($P(X,"^",2)]"":$P(X,"^",2),1:IBU),1,18)
"RTN","IBCSC3",70,0)
 W !?4,"Grp #: ",$E($S($P(X,"^",3)]"":$P(X,"^",3),1:IBU),1,16)
"RTN","IBCSC3",71,0)
 W ?30,"Whose: ",$S($P(X,"^",6)="v":"VETERAN",$P(X,"^",6)="s":"SPOUSE",1:"OTHER")
"RTN","IBCSC3",72,0)
 W ?51,"Rel to Insd: ",IBIR(I)
"RTN","IBCSC3",73,0)
 W !?4,"Grp Nm: ",$E($S($P(X,"^",15)]"":$P(X,"^",15),1:IBU),1,16)
"RTN","IBCSC3",74,0)
 W ?30,"Insd Sex: ",$S($D(IBISEX(I)):IBISEX(I),1:IBU)
"RTN","IBCSC3",75,0)
 W ?51,"Insured: ",$E($P(X,"^",17),1,19)
"RTN","IBCSC3",76,0)
 Q
"RTN","IBCSC3",77,0)
 ;
"RTN","IBCSC3",78,0)
UP K IBDD D ALL^IBCNS1(DFN,"IBDD",2,IBINDT,1)
"RTN","IBCSC3",79,0)
 I $D(IBDD("S",.5)) D  ; At least 1 MCR WNR insurance policy exists
"RTN","IBCSC3",80,0)
 . ;try to put correct part (A for institution and B for facility)
"RTN","IBCSC3",81,0)
 . N Z,IBAB
"RTN","IBCSC3",82,0)
 . S IBAB=$S($$FT^IBCEF(IBIFN)=3:"A",1:"B")
"RTN","IBCSC3",83,0)
 . S Z=0 F  S Z=$O(IBDD("S",.5,Z)) Q:'Z  D
"RTN","IBCSC3",84,0)
 .. I $P($G(IBDD(Z,355.3)),U,14)=IBAB S IBDD("S",.1,Z,0)="" K IBDD("S",.5,Z)
"RTN","IBCSC3",85,0)
 Q
"RTN","IBCSC3",86,0)
 ;
"RTN","IBCSC3",87,0)
UP1() ;check if patient has medicare so can print a flag for the user
"RTN","IBCSC3",88,0)
 N IBDD,IBX,IBY S IBY="" D ALL^IBCNS1(DFN,"IBDD",2,IBINDT)
"RTN","IBCSC3",89,0)
 S IBX=0 F  S IBX=$O(IBDD(IBX)) Q:'IBX  I $P($G(IBDD(IBX,355.3)),U,9)=33 S IBY="(Patient has Medicare)"
"RTN","IBCSC3",90,0)
 Q IBY
"RTN","IBCSC3",91,0)
 ;IBCSC3
"RTN","IBCSC82")
0^25^B14789245
"RTN","IBCSC82",1,0)
IBCSC82 ;ALB/MJB - MCCR SCREEN 8 (UB-92 BILL SPECIFIC INFO) ;27 MAY 88 10:20
"RTN","IBCSC82",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,232**;21-MAR-94
"RTN","IBCSC82",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCSC82",4,0)
 ;
"RTN","IBCSC82",5,0)
EN S IBCUBFT=$$FT^IBCU3(IBIFN) I IBCUBFT=2 K IBCUBFT G ^IBCSC8H ;hcfa 1500
"RTN","IBCSC82",6,0)
 ;
"RTN","IBCSC82",7,0)
 N I,IB,IBX,Z
"RTN","IBCSC82",8,0)
 D ^IBCSCU S IBSR=8,IBSR1=2,IBV1="000000" S:IBV IBV1="111111" F I="U","U1",0,"UF3","UF31","U2","TX" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCSC82",9,0)
 N IBZ,IBPRV
"RTN","IBCSC82",10,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCSC82",11,0)
 K IB("PRV")
"RTN","IBCSC82",12,0)
 S IBZ=0 F  S IBZ=$O(IBPRV(IBZ)) Q:'IBZ  I $O(IBPRV(IBZ,0))!$D(IBPRV(IBZ,"NOTOPT")) M IB("PRV",IBZ)=IBPRV(IBZ)
"RTN","IBCSC82",13,0)
 ;
"RTN","IBCSC82",14,0)
 D H^IBCSCU
"RTN","IBCSC82",15,0)
 S Z=1,IBW=1 X IBWW W " Bill Remark       : ",$S($P(IB("U1"),U,8)]"":$P(IB("U1"),U,8),1:IBUN)
"RTN","IBCSC82",16,0)
 S IBZ="",IBZ=$S($P(IB("UF3"),U,4)]"":"Pri: "_$P(IB("UF3"),U,4),1:"")_$S($P(IB("UF3"),U,5)'="":"  Sec: "_$P(IB("UF3"),U,5),1:"")_$S($P(IB("UF3"),U,6)'="":" Ter: "_$P(IB("UF3"),U,6),1:"")
"RTN","IBCSC82",17,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC82",18,0)
 W !,?3," ICN/DCN(s)        : ",IBZ
"RTN","IBCSC82",19,0)
 S IBZ="",IBZ=$S($P(IB("U"),U,13)]"":"Pri: "_$P(IB("U"),U,13),1:"")_$S($P(IB("U2"),U,8)'="":"  Sec: "_$P(IB("U2"),U,8),1:"")_$S($P(IB("U2"),U,9)'="":"  Ter: "_$P(IB("U2"),U,9),1:"")
"RTN","IBCSC82",20,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC82",21,0)
 W !,?3," Tx Auth. Code(s)  : ",IBZ
"RTN","IBCSC82",22,0)
 W !,?3," Admitting Dx      : " S IBX=$$ICD9^IBACSV(+IB("U2"),$$BDATE^IBACSV(IBIFN)) W $S(IBX'="":$P(IBX,U)_" - "_$P(IBX,U,3),'$$INPAT^IBCEF(IBIFN):IBUN,1:IBU)
"RTN","IBCSC82",23,0)
 I $P(IB(0),U,5)>2 W !,?3," Admission Source  : " S IBX=$$EXTERNAL^DILFD(399,159,,$P(IB("U"),U,9)) W $S(IBX'="":IBX,1:IBU) ;Outpatient only
"RTN","IBCSC82",24,0)
 S Z=2,IBW=1 X IBWW
"RTN","IBCSC82",25,0)
 W " Providers         : ",$S('$O(IB("PRV",0)):IBU,1:"")
"RTN","IBCSC82",26,0)
 I $D(IB("PRV")) D
"RTN","IBCSC82",27,0)
 . N Z,IBT,IBQ,IBARR
"RTN","IBCSC82",28,0)
 . S IBZ=0
"RTN","IBCSC82",29,0)
 . D DEFSEC^IBCEF74(IBIFN,.IBARR)
"RTN","IBCSC82",30,0)
 . F  S IBZ=$O(IB("PRV",IBZ)) Q:'IBZ  D
"RTN","IBCSC82",31,0)
 .. N A,A1
"RTN","IBCSC82",32,0)
 .. S IBQ=""
"RTN","IBCSC82",33,0)
 .. W !,?5,"- "
"RTN","IBCSC82",34,0)
 .. S A=$$EXPAND^IBTRE(399.0222,.01,IBZ)
"RTN","IBCSC82",35,0)
 .. I $P($G(IB("PRV",IBZ,1)),U,4)'="" S A1=" ("_$E($P(IB("PRV",IBZ,1),U,4),1,3)_")",A=$E(A,1,15-$L(A1))_A1
"RTN","IBCSC82",36,0)
 .. W $E(A_$J("",15),1,15),": "
"RTN","IBCSC82",37,0)
 .. I '$P($G(IB("PRV",IBZ,1)),U,3),$P($G(IB("PRV",IBZ,1)),U)="" W IBU Q
"RTN","IBCSC82",38,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)'="" W:'$G(IB("PRV",IBZ)) $E($P(IB("PRV",IBZ,1),U)_$J("",20),1,20) W:$G(IB("PRV",IBZ)) "(OLD PROV DATA) "_$P(IB("PRV",IBZ,1),U)
"RTN","IBCSC82",39,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)="",$P($G(IB("PRV",IBZ)),U)'="" W $E($P(IB("PRV",IBZ),U)_$J("",20),1,20)
"RTN","IBCSC82",40,0)
 .. F A=1:1:3 I $G(IBARR(IBZ,A))'="" S IBQ=IBQ_"["_$E("PST",A)_"]"_IBARR(IBZ,A)_" "
"RTN","IBCSC82",41,0)
 .. I $L(IBQ) W $E(IBQ,1,36)
"RTN","IBCSC82",42,0)
 ;
"RTN","IBCSC82",43,0)
 K IB("PRV")
"RTN","IBCSC82",44,0)
 S Z=3,IBW=1 X IBWW W " Form Locator 2    : ",$S($P(IB("UF3"),U,1)]"":$P(IB("UF3"),U,1),1:IBUN)
"RTN","IBCSC82",45,0)
 W !,?3," Form Locator 11   : ",$S($P(IB("UF3"),U,2)]"":$P(IB("UF3"),U,2),1:IBUN)
"RTN","IBCSC82",46,0)
 S Z=4,IBW=1 X IBWW W " Form Locator 31   : ",$S($P(IB("UF3"),U,3)]"":$P(IB("UF3"),U,3),1:IBUN)
"RTN","IBCSC82",47,0)
 S Z=5,IBW=1 X IBWW W " Form Locator 56   : ",$S($P(IB("UF3"),U,7)]"":$P(IB("UF3"),U,7),1:IBUN)
"RTN","IBCSC82",48,0)
 W !,?3," Form Locator 78   : ",$S($P(IB("UF31"),U,2)]"":$P(IB("UF31"),U,2),1:IBUN)
"RTN","IBCSC82",49,0)
 S Z=6,IBW=1 X IBWW W " Force To Print?   : " S IBZ=$$EXTERNAL^DILFD(399,27,,+$P(IB("TX"),U,8)) W $S(IBZ'="":IBZ,'$$TXMT^IBCEF4(IBIFN):"NOT TRANSMITTABLE",1:IBU)
"RTN","IBCSC82",50,0)
 S Z=7,IBW=1 X IBWW
"RTN","IBCSC82",51,0)
 W " Provider ID Maint  : (Edit Provider ID information)"
"RTN","IBCSC82",52,0)
 S Z=8,IBW=1 X IBWW
"RTN","IBCSC82",53,0)
 W " Other Facility (VA/non): " S IBZ=$$EXPAND^IBTRE(399,232,+$P(IB("U2"),U,10))
"RTN","IBCSC82",54,0)
 W $S(IBZ'="":IBZ,$$PSRV^IBCEU(IBIFN):IBU,1:IBUN)
"RTN","IBCSC82",55,0)
 G ^IBCSCP
"RTN","IBCSC82",56,0)
Q Q
"RTN","IBCSC82",57,0)
 ;IBCSC8
"RTN","IBCSC8H")
0^7^B20858744
"RTN","IBCSC8H",1,0)
IBCSC8H ;ALB/ARH - MCCR SCREEN 8 (BILL SPECIFIC INFO) HCFA 1500 ;4/21/92
"RTN","IBCSC8H",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,207,210,232**;21-MAR-94
"RTN","IBCSC8H",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCSC8H",4,0)
 ; HCFA 1500 screen 8
"RTN","IBCSC8H",5,0)
 ;
"RTN","IBCSC8H",6,0)
 ; MAP TO DGCRSC8H
"RTN","IBCSC8H",7,0)
 ;
"RTN","IBCSC8H",8,0)
EN N I,IB,Y,Z
"RTN","IBCSC8H",9,0)
 D ^IBCSCU S IBSR=8,IBSR1="H",IBV1="0000000" S:IBV IBV1="1111111" F I="U","U1","UF2","UF3","U2","M","TX",0 S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCSC8H",10,0)
 N IBZ,IBPRV,IBDATE
"RTN","IBCSC8H",11,0)
 ;
"RTN","IBCSC8H",12,0)
 S IBDATE=$$BDATE^IBACSV(IBIFN) ; Date of service for the bill
"RTN","IBCSC8H",13,0)
 S IBPRV=""
"RTN","IBCSC8H",14,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCSC8H",15,0)
 K IB("PRV")
"RTN","IBCSC8H",16,0)
 S IBZ=0 F  S IBZ=$O(IBPRV(IBZ)) Q:'IBZ  I $O(IBPRV(IBZ,0))!$D(IBPRV(IBZ,"NOTOPT")) M IB("PRV",IBZ)=IBPRV(IBZ)
"RTN","IBCSC8H",17,0)
 ;
"RTN","IBCSC8H",18,0)
 D H^IBCSCU
"RTN","IBCSC8H",19,0)
 S Z=1,IBW=1 X IBWW W " Unable To Work From: " S Y=$P(IB("U"),U,16) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC8H",20,0)
 W !?4,"Unable To Work To  : " S Y=$P(IB("U"),U,17) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC8H",21,0)
 S Z=2,IBW=1 X IBWW W " Admitting Dx       : " S IBZ=$$ICD9^IBACSV(+IB("U2"),IBDATE) W $S(IBZ'="":$P(IBZ,U)_" - "_$P(IBZ,U,3),1:IBUN)
"RTN","IBCSC8H",22,0)
 S IBZ="",IBZ=$S($P(IB("UF3"),U,4)]"":"Pri: "_$P(IB("UF3"),U,4),1:"")_$S($P(IB("UF3"),U,5)'="":"  Sec: "_$P(IB("UF3"),U,5),1:"")_$S($P(IB("UF3"),U,6)'="":" Ter: "_$P(IB("UF3"),U,6),1:"")
"RTN","IBCSC8H",23,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC8H",24,0)
 W !,?4,"ICN/DCN(s)         : ",IBZ
"RTN","IBCSC8H",25,0)
 S IBZ=$$CKPROV^IBCEU(IBIFN,3)
"RTN","IBCSC8H",26,0)
 S IBZ="",IBZ=$S($P(IB("U"),U,13)]"":"Pri: "_$P(IB("U"),U,13),1:"")_$S($P(IB("U2"),U,8)'="":"  Sec: "_$P(IB("U2"),U,8),1:"")_$S($P(IB("U2"),U,9)'="":"  Ter: "_$P(IB("U2"),U,9),1:"")
"RTN","IBCSC8H",27,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC8H",28,0)
 W !?4,"Tx Auth. Code(s)   : ",IBZ
"RTN","IBCSC8H",29,0)
 S Z=3,IBW=1 X IBWW
"RTN","IBCSC8H",30,0)
 W " Providers          : ",$S('$O(IB("PRV",0)):IBU,1:"")
"RTN","IBCSC8H",31,0)
 I $D(IB("PRV")) D  ; at least 1 provider found
"RTN","IBCSC8H",32,0)
 . N IBQ,A,A1,IBARR
"RTN","IBCSC8H",33,0)
 . S IBZ=0
"RTN","IBCSC8H",34,0)
 . D DEFSEC^IBCEF74(IBIFN,.IBARR)
"RTN","IBCSC8H",35,0)
 . F  S IBZ=$O(IB("PRV",IBZ)) Q:'IBZ  D
"RTN","IBCSC8H",36,0)
 .. S IBQ=""
"RTN","IBCSC8H",37,0)
 .. W !,?5,"- "
"RTN","IBCSC8H",38,0)
 .. S A=$$EXPAND^IBTRE(399.0222,.01,IBZ)
"RTN","IBCSC8H",39,0)
 .. I $P($G(IB("PRV",IBZ,1)),U,4)'="" S A1=" ("_$E($P(IB("PRV",IBZ,1),U,4),1,3)_")",A=$E(A,1,16-$L(A1))_A1
"RTN","IBCSC8H",40,0)
 .. W $E(A_$J("",16),1,16),": "
"RTN","IBCSC8H",41,0)
 .. I '$P($G(IB("PRV",IBZ,1)),U,3),$P($G(IB("PRV",IBZ,1)),U)="" W IBU Q
"RTN","IBCSC8H",42,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)'="" W:'$G(IB("PRV",IBZ)) $E($P(IB("PRV",IBZ,1),U)_$J("",16),1,16) W:$G(IB("PRV",IBZ)) "(OLD BOX 31 DATA) "_$P(IB("PRV",IBZ,1),U)
"RTN","IBCSC8H",43,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)="",$P($G(IB("PRV",IBZ)),U)'="" W $E($P(IB("PRV",IBZ),U)_$J("",16),1,16)
"RTN","IBCSC8H",44,0)
 .. F A=1:1:3 I $G(IBARR(IBZ,A))'="" S IBQ=IBQ_"["_$E("PST",A)_"]"_IBARR(IBZ,A)_" "
"RTN","IBCSC8H",45,0)
 .. I $L(IBQ) W $E(IBQ,1,39)
"RTN","IBCSC8H",46,0)
 ;
"RTN","IBCSC8H",47,0)
 K IB("PRV")
"RTN","IBCSC8H",48,0)
 ;
"RTN","IBCSC8H",49,0)
 S Z=4,IBW=1 X IBWW
"RTN","IBCSC8H",50,0)
 W " Other Facility (VA/non): " S IBZ=$$EXPAND^IBTRE(399,232,+$P(IB("U2"),U,10))
"RTN","IBCSC8H",51,0)
 W $S(IBZ'="":IBZ,$$PSRV^IBCEU(IBIFN):IBU,1:IBUN)
"RTN","IBCSC8H",52,0)
 W !,?4,"Lab CLIA #         : ",$S($P(IB("U2"),U,13)="":IBU,1:$P(IB("U2"),U,13))
"RTN","IBCSC8H",53,0)
 S Z=5,IBW=1 X IBWW
"RTN","IBCSC8H",54,0)
 W " Form Locator 19    : " S IBZ=$P($G(^DGCR(399,IBIFN,"UF31")),U,3) W $S(IBZ'="":IBZ,1:IBUN)
"RTN","IBCSC8H",55,0)
 I $P(IB("U2"),U,14)'="" W !,?4,"Homebound          : ",$$EXPAND^IBTRE(399,236,$P(IB("U2"),U,14))
"RTN","IBCSC8H",56,0)
 I $P(IB("U2"),U,15)'="" W !,?4,"Date Last Seen     : ",$$EXPAND^IBTRE(399,237,$P(IB("U2"),U,15))
"RTN","IBCSC8H",57,0)
 I $P(IB("U2"),U,16)'="" W !,?4,"Spec Prog Indicator: " S IBZ=$$EXPAND^IBTRE(399,238,$P(IB("U2"),U,16)) W $S(IBZ'="":IBZ,$$WNRBILL^IBEFUNC(IBIFN):"31",1:"")
"RTN","IBCSC8H",58,0)
 S Z=6,IBW=1 X IBWW
"RTN","IBCSC8H",59,0)
 W " Print Main Facility Box 32: ",$S($P($G(^IBE(350.9,1,0)),U,2)'=$P($G(^DG(40.8,+$P(IB(0),U,22),0)),U,7):"[DOES NOT APPLY]",$P(IB("UF2"),U,2):$$EXPAND^IBTRE(399,401,$P(IB("UF2"),U,2)),1:IBUN)
"RTN","IBCSC8H",60,0)
 W !,?4,"Force To Print?    : " S IBZ=$$EXTERNAL^DILFD(399,27,,+$P(IB("TX"),U,8)) W $S(IBZ'=""&($P(IB("TX"),U,8)'=""):IBZ,'$$TXMT^IBCEF4(IBIFN):"[DOES NOT APPLY]",1:IBZ)
"RTN","IBCSC8H",61,0)
 S Z=7,IBW=1 X IBWW
"RTN","IBCSC8H",62,0)
 W " Provider ID Maint  : (Edit Provider ID information)"
"RTN","IBCSC8H",63,0)
 G ^IBCSCP
"RTN","IBCSC8H",64,0)
Q Q
"RTN","IBCSC8H",65,0)
 ;
"RTN","IBCSC8H",66,0)
WRT1(IBCRED) ; Write credentials mismatch
"RTN","IBCSC8H",67,0)
 W !,*7,"  **Warning** Credentials differ from those found in NEW PERSON or IB NON VA",!,$J("",14),"BILLING PROVIDER file (",$S(IBCRED="":"none",1:IBCRED),")"
"RTN","IBCSC8H",68,0)
 W !,$J("",14),"Changes will print local, but only credentials on file transmit"
"RTN","IBCSC8H",69,0)
 Q
"RTN","IBCSC8H",70,0)
 ;
"RTN","IBCSC8H",71,0)
NSAME(DA) ; Returns 1 if div on bill is not the default billing facility
"RTN","IBCSC8H",72,0)
 Q ($P($G(^IBE(350.9,1,0)),U,2)'=$P($G(^DG(40.8,+$P(^DGCR(399,DA,0),U,22),0)),U,7))
"RTN","IBCSC8H",73,0)
 ;
"RTN","IBCSC8H",74,0)
 ;IBCSC8H
"RTN","IBCSCH")
0^37^B68324972
"RTN","IBCSCH",1,0)
IBCSCH ;ALB/MJB - MCCR HELP ROUTINE ;03 JUN 88 15:25
"RTN","IBCSCH",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,106,124,138,51,148,137,161,245,232**;21-MAR-94
"RTN","IBCSCH",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCSCH",4,0)
 ;
"RTN","IBCSCH",5,0)
 ;MAP TO DGCRSCH
"RTN","IBCSCH",6,0)
 ;
"RTN","IBCSCH",7,0)
 N I,C,IBSCNNZ,IBQ,IBPRNT,Z S IBSCNNZ=$$UP^XLFSTR($G(IBSCNN)),IBQ=0
"RTN","IBCSCH",8,0)
 I '$D(IBPAR) D  Q:IBQ
"RTN","IBCSCH",9,0)
 . I $G(IBSCNNZ)="?HCFA",$$FT^IBCEF(IBIFN)=2 S IBQ=1,IBPRNT=2 D BL24(IBIFN,1) Q
"RTN","IBCSCH",10,0)
 . I $G(IBSCNNZ)="?SC" S IBQ=1 D DISPSC(IBIFN) Q
"RTN","IBCSCH",11,0)
 . I $G(IBSCNNZ)="?INS" S IBQ=1 D INSDSPL(IBIFN) Q
"RTN","IBCSCH",12,0)
 . I $G(IBSCNNZ)="?PRV" S IBQ=1 D DISPPRV(IBIFN) Q
"RTN","IBCSCH",13,0)
 . I $G(IBSCNNZ)="?CHG" S IBQ=1 D DISPCHG^IBCRBH1(IBIFN) Q
"RTN","IBCSCH",14,0)
 . I $G(IBSCNNZ)="?PRC" S IBQ=1 D DISPPRC^IBCSCH1(IBIFN) Q
"RTN","IBCSCH",15,0)
 . I $G(IBSCNNZ)="?CPT" S IBQ=1 D BCPTCHG^IBCRBH2(IBIFN) Q
"RTN","IBCSCH",16,0)
 . I $G(IBSCNNZ)="?INC" S IBQ=1 D EDIT^IBCBB(IBIFN) Q
"RTN","IBCSCH",17,0)
 . I $G(IBSCNNZ)="?CLA",$$CK0^IBCIUT1() S IBQ=1 D CLA^IBCISC(IBIFN) Q
"RTN","IBCSCH",18,0)
 . I $G(IBSCNNZ)="?MRA",$$MCRONBIL^IBEFUNC(IBIFN),$T(SCR^IBCEMVU)'="" S IBQ=1 D SCR^IBCEMVU(IBIFN) Q
"RTN","IBCSCH",19,0)
 . I $G(IBSCNNZ)="?ID" S IBQ=1 D DISPID^IBCEF74(IBIFN) Q
"RTN","IBCSCH",20,0)
 . Q
"RTN","IBCSCH",21,0)
 ;
"RTN","IBCSCH",22,0)
 S IBH("HELP")="" D ^IBCSCU,H^IBCSCU K IBH("HELP") W !,"Enter '^' to stop the display ",$S(IBV:"",1:"and edit "),"of data,"
"RTN","IBCSCH",23,0)
 W:'$D(IBPAR) " '^N' to jump to screen #N (see",!,"listing below), <RET> to continue on to the next available screen" I IBV W "." G M
"RTN","IBCSCH",24,0)
 W " or enter",!,"the field group number(s) you wish to edit using commas and dashes as",!,"delimiters.  Those groups enclosed in brackets ""[]"" are editable while those"
"RTN","IBCSCH",25,0)
 W !,"enclosed in arrows ""<>"" are not."
"RTN","IBCSCH",26,0)
 G:$D(IBPAR) M1
"RTN","IBCSCH",27,0)
M W "  Special help screens:"
"RTN","IBCSCH",28,0)
 W !,?5,"Enter '?SC' to view SC Status and Rated Disabilities."
"RTN","IBCSCH",29,0)
 W !,?5,"Enter '?INS' to view the patients insurance policies."
"RTN","IBCSCH",30,0)
 W !,?5,"Enter '?PRV' to view provider specific information."
"RTN","IBCSCH",31,0)
 W !,?5,"Enter '?PRC' to view all procedures on the bill and related data."
"RTN","IBCSCH",32,0)
 W !,?5,"Enter '?CHG' to view all items on the bill with potential charges."
"RTN","IBCSCH",33,0)
 W !,?5,"Enter '?CPT' to view all charges for selected CPT codes and bill type."
"RTN","IBCSCH",34,0)
 I $$FT^IBCEF(IBIFN)=2 W !,?5,"Enter '?HCFA' to view how block 24 will print on a HCFA 1500."
"RTN","IBCSCH",35,0)
 W !,?5,"Enter '?INC' to execute the edits & view the bill inconsistencies."
"RTN","IBCSCH",36,0)
 I $$CK0^IBCIUT1() W !?5,"Enter '?CLA' to view the ClaimsManager options."
"RTN","IBCSCH",37,0)
 I $$MCRONBIL^IBEFUNC(IBIFN) W !?5,"Enter '?MRA' to view Medicare Remittance Advice EOB's on file."
"RTN","IBCSCH",38,0)
 W !,?5,"Enter '?ID' to view all IDs to be electronically transmitted on this claim."
"RTN","IBCSCH",39,0)
 ;
"RTN","IBCSCH",40,0)
 I +IBSR'=9 S Z="DATA GROUPS ON SCREEN "_+IBSR W ! X IBWW D @(IBSR1_IBSR) D W
"RTN","IBCSCH",41,0)
 D S W ! F I=$Y:1:20 W !
"RTN","IBCSCH",42,0)
 S Z="PRESS <RETURN> KEY" X IBWW W " to RETURN to SCREEN ",+IBSR R X:DTIME Q
"RTN","IBCSCH",43,0)
M1 N I,Z S Z="DATA GROUPS ON PARAMETER SCREEN" W !! X IBWW D @(IBSR1_IBSR) D W W ! F I=$Y:1:20 W !
"RTN","IBCSCH",44,0)
 S Z="PRESS <RETURN> KEY" X IBWW W " to RETURN to PARAMETER SCREEN" R X:DTIME Q
"RTN","IBCSCH",45,0)
1 S X="DOB^Alias Name^Sex, Marital Status^Veteran Status, Eligibility^Address, Temporary Address^Patient Short Billing Address^SC at Time of Care" Q
"RTN","IBCSCH",46,0)
2 S X="Patient Employer Name, Address^Spouse Employer Name, Address" Q
"RTN","IBCSCH",47,0)
3 S X="Payer Information^Provider Numbers^Mailing Address" Q
"RTN","IBCSCH",48,0)
4 S X="Admission Information^Discharge Information^Diagnosis Code(s)^Coding Method, Inpt Proc Code(s)^Occurrence Code(s)^Condition Code(s)^Value Code(s)" Q
"RTN","IBCSCH",49,0)
5 S X="Event Date^Outpatient Diagnosis^Outpatient Visits^Coding Method, Opt. Pro. Code(s)^Occurrence Code(s)^Condtion Code(s)" Q
"RTN","IBCSCH",50,0)
6 S X="Bill Type, Covered/Non-Covered Days^R.O.I., Assignment of Benefits^Statement Covers Period^Bedsection, Length of Stay^Revenue Code(s), Offset, Total^Rate Schedule(s)^Prior Payments/Claims" Q
"RTN","IBCSCH",51,0)
7 S X="Bill Type, Covered/Non-Covered Days^R.O.I., Assignment of Benefits^Statement Covers Period^Outpatient Visits^Revenue Code(s), Offset, Total^Rate Schedule(s)^Prior Payments/Claims" Q
"RTN","IBCSCH",52,0)
8 S X="Bill Remark^Form Locator 2^Form Locator 9^Form Locator 27^Form Locator 45^Form Locator 92^Form Locator 93^Tx Auth. Code" Q
"RTN","IBCSCH",53,0)
9 S X="Locally defined fields" Q
"RTN","IBCSCH",54,0)
28 S X="Bill Remark, ICN/DCN's, Tx Auth. Code, Admit Diagnosis/Source^Providers^Form Locator 2 and 11^Form Locator 31^Form Locator 56, 57, and 78^Force to Print" Q
"RTN","IBCSCH",55,0)
H8 S X="Period Unable to Work^Admit Dx, ICN/DCN, Tx/Prior Auth. Code^Providers^Non-VA Facility^Form Locator 19^Force to Print" Q
"RTN","IBCSCH",56,0)
PAR S X="Fed Tax #, BC/BS #, MAS Svc Pointer^Bill Signer, Billing Supervisor^Security Parameters, Outpatient CPT parameters ^Remarks, Mailgroups^Agent Cashier Address/Phone" Q
"RTN","IBCSCH",57,0)
S N C,I,Z,J W !! S Z="AVAILABLE SCREENS" X IBWW
"RTN","IBCSCH",58,0)
 S X="Demographic^Employment^Payer^Inpatient Event^Outpatient Event^Inpatient Billing - General^Outpatient Billing - General^Billing - Specific^Locally Defined"
"RTN","IBCSCH",59,0)
 S C=0 F I=1:1 S J=$P(X,"^",I) Q:J=""  I '$E(IBVV,I) S C=C+1,Z="^"_I,IBW=(C#2) W:'(C#2) ?41 X IBWW S Z=$S(I?1N:" ",1:" ")_J_" Data" W Z
"RTN","IBCSCH",60,0)
 Q
"RTN","IBCSCH",61,0)
W N I,J,Z
"RTN","IBCSCH",62,0)
 F I=1:1 S J=$P(X,"^",I) Q:J=""  S Z=I,IBW=(I#2) W:'(I#2) ?42 X IBWW W " "_J
"RTN","IBCSCH",63,0)
 W:'(I-1)#2 ! Q
"RTN","IBCSCH",64,0)
 Q
"RTN","IBCSCH",65,0)
 ;IBCSCH
"RTN","IBCSCH",66,0)
 ;
"RTN","IBCSCH",67,0)
 ;
"RTN","IBCSCH",68,0)
BL24(IBIFN,IBNOSHOW) ; display block 24 of HCFA 1500
"RTN","IBCSCH",69,0)
 ; IBNOSHOW = 1 for not to show error/warning text line
"RTN","IBCSCH",70,0)
 N X,Y,DIR,IBPG,IBLN,IBCOL,IBX,IBQ,IBLC,IBLIN,IBPFORM,IBD,IBC1,Z,Z0,IBXDATA,IBXSAVE
"RTN","IBCSCH",71,0)
 K ^TMP("IBXSAVE",$J)
"RTN","IBCSCH",72,0)
 S IBQ=0,IBLC=9 Q:'$G(IBIFN)  K ^TMP("IBXDISP",$J)
"RTN","IBCSCH",73,0)
 ;
"RTN","IBCSCH",74,0)
 S IBLIN=$$BOX24D^IBCEF11()
"RTN","IBCSCH",75,0)
 S IBPFORM=$S($P($G(^IBE(353,2,2)),U,8):$P(^(2),U,8),1:2)
"RTN","IBCSCH",76,0)
 S IBX=$$BILLN^IBCEFG0(0,"1^99",IBLIN,+IBIFN,IBPFORM)
"RTN","IBCSCH",77,0)
 ;
"RTN","IBCSCH",78,0)
 W @IOF,!,"Example of diagnoses, procedures and charges printing on the HCFA 1500"
"RTN","IBCSCH",79,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",80,0)
 F Z=+IBLIN,IBLIN+1 I $D(^TMP("IBXDISP",$J,1,Z)) S Z0=$G(^TMP("IBXDISP",$J,1,Z,+$O(^TMP("IBXDISP",$J,1,Z,20),-1))) I Z0'="" S:Z=+IBLIN Z0="BOX 19 DATA: "_Z0 W !,Z0
"RTN","IBCSCH",81,0)
 W !,"21. diagnosis"
"RTN","IBCSCH",82,0)
 ;
"RTN","IBCSCH",83,0)
 W !,?5,"1. ",$G(^TMP("IBXDISP",$J,1,IBLIN+3,3)),?25,"3. ",$G(^TMP("IBXDISP",$J,1,IBLIN+3,31))
"RTN","IBCSCH",84,0)
 W !,?5,"2. ",$G(^TMP("IBXDISP",$J,1,IBLIN+5,3)),?25,"4. ",$G(^TMP("IBXDISP",$J,1,IBLIN+5,31))
"RTN","IBCSCH",85,0)
 ;
"RTN","IBCSCH",86,0)
 D PG
"RTN","IBCSCH",87,0)
 S IBPG=0 F  S IBPG=$O(^TMP("IBXDISP",$J,IBPG)) Q:'IBPG  D  Q:IBQ
"RTN","IBCSCH",88,0)
 . F IBLN=IBLIN+8:1:+$P(IBLIN,U,2) S IBCOL=$O(^TMP("IBXDISP",$J,IBPG,IBLN,0)) Q:'IBCOL&'$O(^TMP("IBXDISP",$J,IBPG,IBLN))  S IBLC=IBLC+1 I IBCOL D  Q:IBQ
"RTN","IBCSCH",89,0)
 .. S IBCOL=0,IBC1=1 F  S IBCOL=$O(^TMP("IBXDISP",$J,IBPG,IBLN,IBCOL)) Q:'IBCOL  I $TR($G(^(IBCOL))," ")'="" D
"RTN","IBCSCH",90,0)
 ... W:IBC1 ! S IBC1=0 W ?(IBCOL-1),$G(^TMP("IBXDISP",$J,IBPG,IBLN,IBCOL))
"RTN","IBCSCH",91,0)
 . I 'IBQ,$O(^TMP("IBXDISP",$J,IBPG)) S IBLIN=$$BOX24D^IBCEF11(),IBQ=$$PAUSE^IBCSCH1(IBLC) Q:IBQ  S IBLC=9 W @IOF D PG
"RTN","IBCSCH",92,0)
 ;
"RTN","IBCSCH",93,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",94,0)
 I 'IBPG,'IBQ S IBQ=$$PAUSE^IBCSCH1(IBLC)
"RTN","IBCSCH",95,0)
 K ^TMP("IBXDISP",$J),^TMP("IBXSAVE",$J)
"RTN","IBCSCH",96,0)
 Q
"RTN","IBCSCH",97,0)
 ;
"RTN","IBCSCH",98,0)
PG ; Display box 24 letters at top of charge list
"RTN","IBCSCH",99,0)
 W !,"24. A             B   C     D            E            F     G H  I        K"
"RTN","IBCSCH",100,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",101,0)
 Q
"RTN","IBCSCH",102,0)
 ;
"RTN","IBCSCH",103,0)
INSDSPL(IBIFN) ; Display patients policies
"RTN","IBCSCH",104,0)
 N DIR,X,Y,IBX,DFN,IBDTIN,IBCOVEXT W @IOF
"RTN","IBCSCH",105,0)
 S IBX=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(IBX,U,2),IBDTIN=$P(IBX,U,3),IBCOVEXT=1
"RTN","IBCSCH",106,0)
 I +DFN D DISPDT^IBCNS W ! S DIR("A")="Press RETURN to continue",DIR(0)="E" D ^DIR K DIR
"RTN","IBCSCH",107,0)
 Q
"RTN","IBCSCH",108,0)
 ;
"RTN","IBCSCH",109,0)
DISPPRV(IBIFN) ; display provider information: interactive - user selects provider
"RTN","IBCSCH",110,0)
 N DIC,DA,X,Y,IBI,IBJ,IBPRV,IBPX,IBDT,IBARR
"RTN","IBCSCH",111,0)
 W !!,"This is a display of provider specific information."
"RTN","IBCSCH",112,0)
 D SPECIFIC^IBCEU5(IBIFN)
"RTN","IBCSCH",113,0)
 S IBDT=+$G(^DGCR(399,+$G(IBIFN),"U")) I 'IBDT S IBDT=DT
"RTN","IBCSCH",114,0)
 ;
"RTN","IBCSCH",115,0)
 F IBI=1:1 W ! S DIC("A")="Select PROVIDER NAME: ",DIC="^VA(200,",DIC(0)="AEQM" D ^DIC Q:Y'>0  D
"RTN","IBCSCH",116,0)
 . S IBPRV=Y W !!,$TR($J(" ",IOM)," ","-")
"RTN","IBCSCH",117,0)
 . ;
"RTN","IBCSCH",118,0)
 . S IBPX=$$ESBLOCK^XUSESIG1(+IBPRV)
"RTN","IBCSCH",119,0)
 . W !," Signature Name: ",$P(IBPX,U,1),!,"Signature Title: ",$P(IBPX,U,3),!,"         Degree: ",$P(IBPX,U,2)
"RTN","IBCSCH",120,0)
 . ;
"RTN","IBCSCH",121,0)
 . S IBPX=$$PRVLIC^IBCU1(+IBPRV,IBDT,.IBARR) W !!,"     License(s): " D
"RTN","IBCSCH",122,0)
 .. I IBPX'>0 W "None Active on ",$$FMTE^XLFDT(IBDT,2) Q
"RTN","IBCSCH",123,0)
 .. S IBJ=0,IBW=0 F  S IBJ=$O(IBARR(IBJ)) Q:'IBJ  D
"RTN","IBCSCH",124,0)
 ... S IBPX=IBARR(IBJ),IBPX=$P($G(^DIC(5,+IBPX,0)),U,2)_": "_$P(IBPX,U,2)
"RTN","IBCSCH",125,0)
 ... I (IBW+$L(IBPX))>61 W !,?17 S IBW=0
"RTN","IBCSCH",126,0)
 ... W IBPX,"  " S IBW=IBW+$L(IBPX)+2
"RTN","IBCSCH",127,0)
 . ;
"RTN","IBCSCH",128,0)
 . S IBPX=$$GET^XUA4A72(+IBPRV,IBDT) W !!,"   Person Class: " D
"RTN","IBCSCH",129,0)
 .. I IBPX'>0 W "None Active on ",$$FMTE^XLFDT(IBDT,2) Q
"RTN","IBCSCH",130,0)
 .. W $P(IBPX,U,7)
"RTN","IBCSCH",131,0)
 .. W !,"  PROVIDER TYPE: ",$P(IBPX,U,2),!," CLASSIFICATION: ",$P(IBPX,U,3),!," SPECIALIZATION: ",$P(IBPX,U,4)
"RTN","IBCSCH",132,0)
 .. I +$P(IBPX,U,5) W !,"      EFFECTIVE: ",$$FMTE^XLFDT(+$P(IBPX,U,5),2) I +$P(IBPX,U,6) W " - ",$$FMTE^XLFDT(+$P(IBPX,U,6),2)
"RTN","IBCSCH",133,0)
 . ;
"RTN","IBCSCH",134,0)
 . S IBPX=$$PRVTYP^IBCRU6(+IBPRV,+IBDT)
"RTN","IBCSCH",135,0)
 . W !!,"RC Provider Group: ",$S(+IBPX:$P(IBPX,U,3)_", "_$P(IBPX,U,5)_"%",1:"None")
"RTN","IBCSCH",136,0)
 . W !,$TR($J(" ",IOM)," ","-")
"RTN","IBCSCH",137,0)
 ;
"RTN","IBCSCH",138,0)
 Q
"RTN","IBCSCH",139,0)
 ;
"RTN","IBCSCH",140,0)
DISPSC(IBIFN) ; display patients SC Status and Rated Disabilities
"RTN","IBCSCH",141,0)
 N IB0,DFN,IBSC,IBX,VAEL,VAERR
"RTN","IBCSCH",142,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(IB0,U,2),IBSC=$P(IB0,U,18)
"RTN","IBCSCH",143,0)
 W !,@IOF,!,"SC Status and Rated Disabilities for ",$P($G(^DPT(+$G(DFN),0)),U,1)
"RTN","IBCSCH",144,0)
 W !,"--------------------------------------------------------------------------------",!
"RTN","IBCSCH",145,0)
 I +$G(IBIFN) W !," SC At Time Of Care: ",$S(IBSC=1:"Yes",IBSC=0:"No",1:"")
"RTN","IBCSCH",146,0)
 I +$G(DFN) D ELIG^VADPT D DIS^DGRPDB
"RTN","IBCSCH",147,0)
 W !!,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",148,0)
 S IBX=$$PAUSE^IBCSCH1(19)
"RTN","IBCSCH",149,0)
 Q
"RTN","IBCU")
0^45^B36886371
"RTN","IBCU",1,0)
IBCU ;ALB/MRL - BILLING UTILITY ROUTINE ;01 JUN 88 12:00
"RTN","IBCU",2,0)
 ;;2.0;INTEGRATED BILLING;**52,106,51,191,232**;21-MAR-94
"RTN","IBCU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCU",4,0)
 ;
"RTN","IBCU",5,0)
 ;MAP TO DGCRU
"RTN","IBCU",6,0)
 ;
"RTN","IBCU",7,0)
ARSTAT ;find status of bill in file 430.3 (ar) return status number
"RTN","IBCU",8,0)
 S IBARST=$$STA^PRCAFN(IBIFN)
"RTN","IBCU",9,0)
 Q
"RTN","IBCU",10,0)
 ;
"RTN","IBCU",11,0)
ARCAT ;Trigger logic to set who's responsible in 399.3 from AR Category
"RTN","IBCU",12,0)
 S X=$P($$CATN^PRCAFN($P(^DGCR(399.3,DA,0),"^",6)),"^",3)
"RTN","IBCU",13,0)
 S:X'="" X=$S("PC"[X:"p",X="N":"o",X="T":"i",1:"")
"RTN","IBCU",14,0)
 Q
"RTN","IBCU",15,0)
 ;
"RTN","IBCU",16,0)
PTF ;Screen for appropriate PTF records
"RTN","IBCU",17,0)
 K IBDD1 S DFN=+$P(^DGCR(399,+DA,0),"^",2) Q:'$D(^DPT(+DFN,0))  S IB05=$P(^(0),"^",1),IB03=$P(^DGCR(399,+DA,0),"^",3)
"RTN","IBCU",18,0)
 S IB01="",IB02=0 F IB02=0:0 S IB01=$O(^DD(45,0,"ID",IB01)) Q:'IB01  S IB02=IB02+1,IBDD(IB02)=^(IB01)
"RTN","IBCU",19,0)
 F IB01=0:0 S IB01=$O(^DGPT("B",+DFN,IB01)) Q:'IB01  I $D(^DGPT(+IB01,0)) S IB04=$P(^(0),"^",2),Y=+IB01 I $P(IB03,".",1)=$P(IB04,".",1) S IBDD1(+Y)="" I $S('$D(X):0,X["?":1,1:0) D PTFW
"RTN","IBCU",20,0)
 G PTFQ:X'["?" I '$O(IBDD1(0)) W !,"Patient has no ACTIVE PTF RECORDS for this event date.",!,"A 'PTF NUMBER' is required for inpatient billing records."
"RTN","IBCU",21,0)
 E  W !!,"Select the appropriate billing record from the above listing by number."
"RTN","IBCU",22,0)
PTFQ W ! K IB01,IB02,IB03,IB04,IB05,IBDD Q
"RTN","IBCU",23,0)
PTFW W !,Y,?15,IB05 F IB02=0:0 S IB02=$O(IBDD(IB02)) Q:'IB02  X IBDD(IB02)
"RTN","IBCU",24,0)
 Q
"RTN","IBCU",25,0)
 ;
"RTN","IBCU",26,0)
AGE ;Input Transform for Condition Code 17
"RTN","IBCU",27,0)
 I X=18 G SEX
"RTN","IBCU",28,0)
 I X=17 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I VADM(4)<100 W !!,"This patient is only ",VADM(4)," years old!!",!! K IBC Q
"RTN","IBCU",29,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",30,0)
 Q
"RTN","IBCU",31,0)
 ;
"RTN","IBCU",32,0)
SEX ;Input Transform for Condition Code 18
"RTN","IBCU",33,0)
 I X=18 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I $E(VADM(5))="M" W !!,"This patient is a MALE!! Condition code 18 applies only to FEMALES!!",!! K IBC,X
"RTN","IBCU",34,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",35,0)
 Q
"RTN","IBCU",36,0)
 ;
"RTN","IBCU",37,0)
REV ;Input Transform for Revenue Code
"RTN","IBCU",38,0)
 I X=-1 W !!,"Choose only ACTIVE Revenue Codes!!",!! S D="AC" ;S X="" S X=$O(^DGCR(399.2,"AC",X)) Q:X=""  W !,$P(^DGCR(399.2,X,0),"^",1),?30,$P(^(0),"^",2) K X Q
"RTN","IBCU",39,0)
 I '$D(IBC) I $D(^DGCR(399.2,X,0)) I '$P(^DGCR(399.2,X,0),"^",3) W !!,"Only ACTIVE Revenue Codes may be selected!!",!! K X Q
"RTN","IBCU",40,0)
 Q
"RTN","IBCU",41,0)
 ;
"RTN","IBCU",42,0)
YN S X=$E(X),X=$S(X=1:X,X=0:X,X="Y":1,X="y":1,X="n":0,X="N":0,1:2) I X'=2 W "  (",$S(X:"YES",1:"NO"),")" Q
"RTN","IBCU",43,0)
 W !?4,"NOT A VALID CHOICE!",*7 K X Q
"RTN","IBCU",44,0)
 Q
"RTN","IBCU",45,0)
 ;
"RTN","IBCU",46,0)
NOPTF ; Input transform for file 399, field 159.5 (NON-VA ADMIT TIME)
"RTN","IBCU",47,0)
 N %DT
"RTN","IBCU",48,0)
 I X>24 K:X'=99 X Q
"RTN","IBCU",49,0)
 I $P($G(^DGCR(399,DA,0)),U,8) K X Q  ; PTF pointer exists 
"RTN","IBCU",50,0)
 S X=$TR(X,"M ") S:X=0 X="12A" S:X<12 X=$TR(X,"A")
"RTN","IBCU",51,0)
 S:X?1N.N&($L(X)<3) Y="."_$E("0",$L(X))_X S:X'?1.2N %DT="TPR",X=DT_"@"_X D:$L(X)>2 ^%DT S X=$E($P(Y,".",2)_"00",1,2)#24 K:Y=-1 X
"RTN","IBCU",52,0)
 Q
"RTN","IBCU",53,0)
 ;
"RTN","IBCU",54,0)
DIS ;Determine Billing Discharge status from PTF
"RTN","IBCU",55,0)
 ;Called from triggers on fields .08 and 161
"RTN","IBCU",56,0)
 N A
"RTN","IBCU",57,0)
 I '$D(^DGCR(399,DA,0)) S X="" G DISQ
"RTN","IBCU",58,0)
 S X=$P(^DGCR(399,DA,0),"^",6) I X=2!(X=3) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",59,0)
 S X=$P(^DGCR(399,DA,0),"^",8) I $S(X="":1,'$D(^DGPT(X)):1,1:0) S X="" G DISQ
"RTN","IBCU",60,0)
 I '+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",61,0)
 S A=$P($G(^DGCR(399,DA,"U")),"^",2) I A,(A+.24)<+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",62,0)
 S X=+$P($G(^DGPT(X,70)),"^",3)
"RTN","IBCU",63,0)
 I X=1 S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO HOME OR SELF CARE",1,30),0)) G DISQ
"RTN","IBCU",64,0)
 I X=4 S X=$O(^DGCR(399.1,"B",$E("LEFT AGAINST MEDICAL ADVICE",1,30),0)) G DISQ
"RTN","IBCU",65,0)
 I X=6!(X=7) S X=$O(^DGCR(399.1,"B","EXPIRED",0)) G DISQ
"RTN","IBCU",66,0)
 I X=5!(X=2) S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO ANOTHER SHORT-TERM GENERAL HOSPITAL",1,30),0)) G DISQ
"RTN","IBCU",67,0)
 S X=""
"RTN","IBCU",68,0)
DISQ Q
"RTN","IBCU",69,0)
 ;
"RTN","IBCU",70,0)
INST ;Ask Institutution address info
"RTN","IBCU",71,0)
 S DIC("DR")="1.01;1.02;1.03;.02;1.04" I $D(^XUSEC("IB SUPERVISOR",DUZ)) S DLAYGO=4
"RTN","IBCU",72,0)
 Q
"RTN","IBCU",73,0)
 ;
"RTN","IBCU",74,0)
PTADD(DFN,MAXL) ; outputs patient address for the trigger on Patient Short Address (399,110)
"RTN","IBCU",75,0)
 N IBX,IBY,IBI,IBDPT S (IBX,IBDPT)="" I $G(MAXL)="PSA" S MAXL=47
"RTN","IBCU",76,0)
 I +$G(DFN) S IBDPT=$G(^DPT(DFN,.11)) F IBI=1:1:4 S IBY=$P(IBDPT,U,IBI) I IBY'="" S IBX=IBX_IBY_","
"RTN","IBCU",77,0)
 I +$P(IBDPT,U,5) S IBY=$P($G(^DIC(5,+$P(IBDPT,U,5),0)),U,2),IBX=IBX_IBY
"RTN","IBCU",78,0)
 I $P(IBDPT,U,12)'="" S IBX=IBX_" "_$P(IBDPT,U,12)
"RTN","IBCU",79,0)
 I +$G(MAXL),$L(IBX)>+MAXL S IBX=""
"RTN","IBCU",80,0)
 Q IBX
"RTN","IBCU",81,0)
 ;
"RTN","IBCU",82,0)
SM ;Flag for printing medicare statment on UB-82
"RTN","IBCU",83,0)
 ;DGSM=0 means figure out which statement, DGSM=1 means no statements
"RTN","IBCU",84,0)
 S DGSM=0 Q
"RTN","IBCU",85,0)
 ;IBCU
"RTN","IBCU",86,0)
 ;
"RTN","IBCU",87,0)
CHGTYP(IBIFN,ARR) ; sets up array of all charge types defined on a bill:  ARR(TYPE, COMPONENT)=""
"RTN","IBCU",88,0)
 N IBI,IBX,IBT K ARR
"RTN","IBCU",89,0)
 I +$O(^DGCR(399,+$G(IBIFN),"RC",0)) S IBI=0 F  S IBI=$O(^DGCR(399,+IBIFN,"RC",IBI))  Q:'IBI  D
"RTN","IBCU",90,0)
 . S IBX=$G(^DGCR(399,+IBIFN,"RC",IBI,0)),IBT=$P(IBX,U,10) I +IBT S ARR(IBT,+$P(IBX,U,12))=""
"RTN","IBCU",91,0)
 Q
"RTN","IBCU",92,0)
 ;
"RTN","IBCU",93,0)
CHGTYPE(IBIFN) ; returns list of charge types on a bill: TYPE ^ TYPE ^ ... ; EXTERNAL TYPE , EXTERNAL TYPE , ...
"RTN","IBCU",94,0)
 N IBAR,IBY,IBS,IBI,IBC,IBJ,IBX
"RTN","IBCU",95,0)
 D CHGTYP($G(IBIFN),.IBAR)
"RTN","IBCU",96,0)
 S (IBX,IBY,IBS)="",IBI=0 F  S IBI=$O(IBAR(IBI)) Q:'IBI  D
"RTN","IBCU",97,0)
 . S IBX=IBX_IBI_U
"RTN","IBCU",98,0)
 . S IBC="INPT" I IBI=1 S IBJ=$O(IBAR(IBI,0)),IBC=$S(IBJ=1:"INST",IBJ=2:"PF",1:"INPT") I +$O(IBAR(IBI,IBJ)) S IBC="INPT"
"RTN","IBCU",99,0)
 . S IBY=IBY_IBS_$S(IBI=1:IBC,IBI=2:"VST",IBI=3:"RX",IBI=4:"CPT",IBI=5:"PI",IBI=6:"DRG",IBI=9:"UN",1:""),IBS=","
"RTN","IBCU",100,0)
 S IBY=IBX_";"_IBY
"RTN","IBCU",101,0)
 Q IBY
"RTN","IBCU",102,0)
 ;
"RTN","IBCU",103,0)
BCHGTYPE(IBIFN) ; returns type of bill and charges: (CLASS (.05): TYPE, TYPE, ...)
"RTN","IBCU",104,0)
 N IBCLASS,IBTYPE,IBY S IBY=""
"RTN","IBCU",105,0)
 S IBCLASS=$P($G(^DGCR(399,+$G(IBIFN),0)),U,5)
"RTN","IBCU",106,0)
 S IBTYPE=$P($$CHGTYPE(+$G(IBIFN)),";",2) I IBTYPE="INPT" S IBTYPE=""
"RTN","IBCU",107,0)
 I +IBCLASS S IBY=$S(IBCLASS<3:"Inpt",1:"Opt") I IBTYPE'="" S IBY=IBY_" ("_IBTYPE_")"
"RTN","IBCU",108,0)
 Q IBY
"RTN","IBCU",109,0)
 ;
"RTN","IBCU",110,0)
CLNSCRN(IBDT,CLIFN) ; screen for a Procedures Associated Clinic  (399, 304, 6), returns true if clinic can be used
"RTN","IBCU",111,0)
 ; clinic must be defined as a 'Clinic' and it must be active on date of procedure
"RTN","IBCU",112,0)
 ;
"RTN","IBCU",113,0)
 N IBCL0,IBCLI,IBX S IBX=0
"RTN","IBCU",114,0)
 S IBCL0=$G(^SC(+$G(CLIFN),0)),IBCLI=$G(^SC(+$G(CLIFN),"I"))
"RTN","IBCU",115,0)
 S IBX=$S($P(IBCL0,U,3)'="C":0,'$G(IBDT):0,'IBCLI:1,+IBCLI>+IBDT:1,'$P(IBCLI,U,2):0,1:$P(IBCLI,U,2)'>IBDT)
"RTN","IBCU",116,0)
 Q IBX
"RTN","IBCU",117,0)
 ;
"RTN","IBCU",118,0)
PRVNUM(IBIFN,IBINS,COB) ; Trigger code for Bill Primary/Secondary/Tertiary Provider # (399, 122, 123, 124)
"RTN","IBCU",119,0)
 ; on Primary Secondary/Tertiary Carrier (399, 101, 102, 103)
"RTN","IBCU",120,0)
 ; returns the Provider Number for the Insurance Company
"RTN","IBCU",121,0)
 ;         Hospital Provider Number for prov id in file 355.92
"RTN","IBCU",122,0)
 ;         or Medicare A provider Number (psych/non-psych) if Medicare A
"RTN","IBCU",123,0)
 ;
"RTN","IBCU",124,0)
 ; Input   IBIFN - bill ifn
"RTN","IBCU",125,0)
 ;         IBINS - insurance company ifn (opt)
"RTN","IBCU",126,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary
"RTN","IBCU",127,0)
 ;
"RTN","IBCU",128,0)
 N IBX,IBB0,IBBF,IBFT,Z,Z0
"RTN","IBCU",129,0)
 S:'$G(COB) COB=1
"RTN","IBCU",130,0)
 S IBX=$P($G(^DGCR(399,+$G(IBIFN),"M1")),U,COB+1),IBB0=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBCU",131,0)
 I $G(IBINS)="" S IBINS=+$G(^DGCR(399,+$G(IBIFN),"I"_COB))
"RTN","IBCU",132,0)
 G:'IBINS PRVNQ
"RTN","IBCU",133,0)
 ;
"RTN","IBCU",134,0)
 I +$G(IBIFN),COB N DA S DA=IBIFN I $$MCRACK^IBCBB3(+IBIFN,$P($G(^DGCR(399,+IBIFN,"TX")),U,5),+COB) S IBX=$$MCRANUM^IBCBB3(+IBIFN) G PRVNQ
"RTN","IBCU",135,0)
 ;
"RTN","IBCU",136,0)
 S IBX=$$FACNUM^IBCEP2B(IBIFN,COB)
"RTN","IBCU",137,0)
 I IBX="" S IBX=$P($G(^DIC(36,IBINS,0)),U,$S($$FT^IBCEF(IBIFN)=3:11,1:17))
"RTN","IBCU",138,0)
 ;
"RTN","IBCU",139,0)
PRVNQ Q IBX
"RTN","IBCU",140,0)
 ;
"RTN","IBCU",141,0)
BF() ; Returns ien of billing fac primary id type
"RTN","IBCU",142,0)
 N Z,IBX
"RTN","IBCU",143,0)
 S IBX="",Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,9) S IBX=Z Q
"RTN","IBCU",144,0)
 Q IBX
"RTN","IBCU",145,0)
 ;
"RTN","IBCU",146,0)
BILLPNS(IBIFN) ; Trigger Code that sets all Bill Primary/Secondary/Tertiary Provider # (399,.122, 123, 124)
"RTN","IBCU",147,0)
 ; on Bill Form Type (399, .19)
"RTN","IBCU",148,0)
 N IBDR
"RTN","IBCU",149,0)
 ;
"RTN","IBCU",150,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I1")) S IBDR(399,IBIFN_",",122)=$$PRVNUM(IBIFN,"",1)
"RTN","IBCU",151,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I2")) S IBDR(399,IBIFN_",",123)=$$PRVNUM(IBIFN,"",2)
"RTN","IBCU",152,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I3")) S IBDR(399,IBIFN_",",124)=$$PRVNUM(IBIFN,"",3)
"RTN","IBCU",153,0)
 ;
"RTN","IBCU",154,0)
 I $O(IBDR(0)) D FILE^DIE("","IBDR")
"RTN","IBCU",155,0)
 Q
"RTN","IBEFUNC")
0^26^B44497484
"RTN","IBEFUNC",1,0)
IBEFUNC ;ALB/RLW - EXTRINSIC FUNCTIONS ;12-JUN-92
"RTN","IBEFUNC",2,0)
 ;;2.0;INTEGRATED BILLING;**55,91,106,139,51,153,232**;21-MAR-94
"RTN","IBEFUNC",3,0)
 ;
"RTN","IBEFUNC",4,0)
ETXT(X) ; -- output error text from 350.8
"RTN","IBEFUNC",5,0)
 ; -- input error code
"RTN","IBEFUNC",6,0)
 N Y S Y=X
"RTN","IBEFUNC",7,0)
 I X="" G ETXTQ
"RTN","IBEFUNC",8,0)
 S Y=$P($G(^IBE(350.8,+$O(^IBE(350.8,"AC",X,0)),0)),U,2)
"RTN","IBEFUNC",9,0)
ETXTQ Q Y
"RTN","IBEFUNC",10,0)
 ;
"RTN","IBEFUNC",11,0)
IGN(X,Y) ; ignore means test? for appt type on dates
"RTN","IBEFUNC",12,0)
 ; -- input x = mas appt type
"RTN","IBEFUNC",13,0)
 ;          y = appt date
"RTN","IBEFUNC",14,0)
 ;    output  = true if this appt type should not be billed for
"RTN","IBEFUNC",15,0)
 ;              Means Test billing (352.1,.04) for given date
"RTN","IBEFUNC",16,0)
 ;
"RTN","IBEFUNC",17,0)
 I '$G(X)!('$G(Y)) Q 1
"RTN","IBEFUNC",18,0)
 Q +$P($G(^IBE(352.1,+$O(^(+$O(^IBE(352.1,"AIVDT",+X,-(Y+.1))),0)),0)),U,4)
"RTN","IBEFUNC",19,0)
 ;
"RTN","IBEFUNC",20,0)
DSP(X,Y) ; display on input screen?
"RTN","IBEFUNC",21,0)
 ; --    input X = mas appt type (P409.1)
"RTN","IBEFUNC",22,0)
 ;             Y = date
"RTN","IBEFUNC",23,0)
 ;       output  = true if appt type X (352.1,.02) should be displayed as
"RTN","IBEFUNC",24,0)
 ;          a potential billable visit (352.1,.06) on given date Y (352.1,.03)
"RTN","IBEFUNC",25,0)
 ;
"RTN","IBEFUNC",26,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",27,0)
 Q +$P($G(^IBE(352.1,+$O(^(+$O(^IBE(352.1,"AIVDT",+X,-(Y+.1))),0)),0)),U,6)
"RTN","IBEFUNC",28,0)
 ;
"RTN","IBEFUNC",29,0)
RPT(X,Y) ; print on report?
"RTN","IBEFUNC",30,0)
 ; -- input X = mas appt type (P409.1)
"RTN","IBEFUNC",31,0)
 ;          Y = date
"RTN","IBEFUNC",32,0)
 ;    output  = true if appt type X (352.1,.02) should be printed on 'Vets w/ Ins and Opt
"RTN","IBEFUNC",33,0)
 ;               Visits' report (352.1,.05) on given date Y (352.1,.06)
"RTN","IBEFUNC",34,0)
 ;
"RTN","IBEFUNC",35,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",36,0)
 Q +$P($G(^IBE(352.1,+$O(^(+$O(^IBE(352.1,"AIVDT",+X,-(Y+.1))),0)),0)),U,5)
"RTN","IBEFUNC",37,0)
 ;
"RTN","IBEFUNC",38,0)
NBDIS(X,Y) ; Is disposition non-billable?
"RTN","IBEFUNC",39,0)
 ; -- input X = disposition (P37)
"RTN","IBEFUNC",40,0)
 ;          Y = date of appt
"RTN","IBEFUNC",41,0)
 ;    output  = true (1) if disposition should be ignored for
"RTN","IBEFUNC",42,0)
 ;              Means test billing (352.2,.03) for given date
"RTN","IBEFUNC",43,0)
 ;
"RTN","IBEFUNC",44,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",45,0)
 Q +$P($G(^IBE(352.2,+$O(^(+$O(^IBE(352.2,"AIVDT",+X,-(Y+.1))),0)),0)),U,3)
"RTN","IBEFUNC",46,0)
 ;
"RTN","IBEFUNC",47,0)
NBCSC(X,Y) ; Is clinic stop code non-billable?
"RTN","IBEFUNC",48,0)
 ; -- input X = clinic stop code (P40.7)
"RTN","IBEFUNC",49,0)
 ;          Y = date of appt
"RTN","IBEFUNC",50,0)
 ;    output  = true (1) if clinic stop code should be ignored for
"RTN","IBEFUNC",51,0)
 ;              Means test billing (352.3,.03) for given date
"RTN","IBEFUNC",52,0)
 ;
"RTN","IBEFUNC",53,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",54,0)
 Q +$P($G(^IBE(352.3,+$O(^(+$O(^IBE(352.3,"AIVDT",+X,-(Y+.1))),0)),0)),U,3)
"RTN","IBEFUNC",55,0)
 ;
"RTN","IBEFUNC",56,0)
NBCL(X,Y) ; Is clinic non-billable?
"RTN","IBEFUNC",57,0)
 ; -- input X = clinic (P44)
"RTN","IBEFUNC",58,0)
 ;          Y = date of appt
"RTN","IBEFUNC",59,0)
 ;    output  = true (1) if clinic should be ignored for
"RTN","IBEFUNC",60,0)
 ;              Means test billing (352.4,.03) for given date
"RTN","IBEFUNC",61,0)
 ;
"RTN","IBEFUNC",62,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",63,0)
 Q +$P($G(^IBE(352.4,+$O(^(+$O(^IBE(352.4,"AIVDT",+X,-(Y+.1))),0)),0)),U,3)
"RTN","IBEFUNC",64,0)
 ;
"RTN","IBEFUNC",65,0)
NBST(X,Y) ; Is clinic stop code non-billable for Third Party?
"RTN","IBEFUNC",66,0)
 ; -- input X = clinic stop code (P40.7), Y = appt date
"RTN","IBEFUNC",67,0)
 ;    output  = true (1) if stop non-billable for Third Party (352.3,.05) for given dt
"RTN","IBEFUNC",68,0)
 ;
"RTN","IBEFUNC",69,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",70,0)
 Q +$P($G(^IBE(352.3,+$O(^(+$O(^IBE(352.3,"AIVDTT2",+X,-(Y+.1))),0)),0)),U,5)
"RTN","IBEFUNC",71,0)
 ;
"RTN","IBEFUNC",72,0)
NBCT(X,Y) ; Is clinic non-billable for Third Party?
"RTN","IBEFUNC",73,0)
 ; -- input X = clinic (P44), Y = appt dt
"RTN","IBEFUNC",74,0)
 ;    output  = true (1) if clinic non-billable for Third Party (352.4,.05) for given date
"RTN","IBEFUNC",75,0)
 ;
"RTN","IBEFUNC",76,0)
 I '$G(X)!('$G(Y)) Q 0
"RTN","IBEFUNC",77,0)
 Q +$P($G(^IBE(352.4,+$O(^(+$O(^IBE(352.4,"AIVDTT2",+X,-(Y+.1))),0)),0)),U,5)
"RTN","IBEFUNC",78,0)
 ;
"RTN","IBEFUNC",79,0)
NABST(X,Y) ; Returns true (1) if stop code flagged to be ignored by Third Party auto biller (use DT)
"RTN","IBEFUNC",80,0)
 S:'$G(Y) Y=DT I '$G(X) Q 0
"RTN","IBEFUNC",81,0)
 Q +$P($G(^IBE(352.3,+$O(^(+$O(^IBE(352.3,"AIVDTT2",+X,-(Y+.1))),0)),0)),U,6)
"RTN","IBEFUNC",82,0)
 ;
"RTN","IBEFUNC",83,0)
NABCT(X,Y) ; Returns true (1) if clinic is flagged to be ignored by Third Party auto biller (use DT)
"RTN","IBEFUNC",84,0)
 S:'$G(Y) Y=DT I '$G(X) Q 0
"RTN","IBEFUNC",85,0)
 Q +$P($G(^IBE(352.4,+$O(^(+$O(^IBE(352.4,"AIVDTT2",+X,-(Y+.1))),0)),0)),U,6)
"RTN","IBEFUNC",86,0)
 ;
"RTN","IBEFUNC",87,0)
PT(DFN) ;returns (patient name^long pat id^short pat id) or null if not found
"RTN","IBEFUNC",88,0)
 N X,IBX S X="" I $D(DFN) S X=$G(^DPT(+DFN,0)) I X'="" S X=$P(X,U,1)_U_$P($G(^DPT(DFN,.36)),U,3,4) D
"RTN","IBEFUNC",89,0)
 . S IBX=$P(^DPT(+DFN,0),U,9)
"RTN","IBEFUNC",90,0)
 . I $P(X,U,2)="" S $P(X,U,2)=$E(IBX,1,3)_"-"_$E(IBX,4,5)_"-"_$E(IBX,6,10)
"RTN","IBEFUNC",91,0)
 . I $P(X,U,3)="" S $P(X,U,3)=$E(IBX,6,10)
"RTN","IBEFUNC",92,0)
 Q X
"RTN","IBEFUNC",93,0)
 ;
"RTN","IBEFUNC",94,0)
EXSET(X,D0,D1) ;returns external value of a set in file D0, field D1
"RTN","IBEFUNC",95,0)
 Q $$EXPAND^IBTRE($G(D0),$G(D1),$G(X))
"RTN","IBEFUNC",96,0)
 ;
"RTN","IBEFUNC",97,0)
BABCSC(DFN,IBDT) ; -- any billable Third Party visits in encounter file for patient
"RTN","IBEFUNC",98,0)
 ;  -- Input  dfn = patient,  ibdt = date
"RTN","IBEFUNC",99,0)
 ;     output     = 1 if any billable stop on date OR 0 if none
"RTN","IBEFUNC",100,0)
 ;
"RTN","IBEFUNC",101,0)
 N IBX,IBVAL,IBCBK,IBFILTER
"RTN","IBEFUNC",102,0)
 S IBX=0
"RTN","IBEFUNC",103,0)
 I '$G(DFN)!('$G(IBDT)) G BABQ
"RTN","IBEFUNC",104,0)
 ;
"RTN","IBEFUNC",105,0)
 S IBVAL("DFN")=DFN,IBVAL("BDT")=IBDT\1,IBVAL("EDT")=IBDT\1+.24
"RTN","IBEFUNC",106,0)
 ;Ignore if not chkd out, no stop, non-billable stop, non-billable clinic
"RTN","IBEFUNC",107,0)
 S IBFILTER=""
"RTN","IBEFUNC",108,0)
 S IBCBK="I $P(Y0,U,12)=2,$P(Y0,U,3),'$$NBST^IBEFUNC($P(Y0,U,3),+Y0),'$$NBCT^IBEFUNC(+$P(Y0,U,4),+Y0) S (IBX,SDSTOP)=1"
"RTN","IBEFUNC",109,0)
 D SCAN^IBSDU("PATIENT/DATE",.IBVAL,"",IBCBK,1) K ^TMP("DIERR",$J)
"RTN","IBEFUNC",110,0)
 ;
"RTN","IBEFUNC",111,0)
BABQ Q IBX
"RTN","IBEFUNC",112,0)
 ;
"RTN","IBEFUNC",113,0)
APPTCT(IBOE0) ; Determine if appt encounter/appt has valid status for billing
"RTN","IBEFUNC",114,0)
 ; Returns 1 if valid, 0 if not
"RTN","IBEFUNC",115,0)
 ; IBOE0 = the encounter's 0-node (input)
"RTN","IBEFUNC",116,0)
 N STAT
"RTN","IBEFUNC",117,0)
 S STAT=$P(IBOE0,U,12) ;Encounter stat
"RTN","IBEFUNC",118,0)
 I STAT=14,$$DPTSND^IBSDU(+$P(IBOE0,U,2),+IBOE0,2)="" S STAT=2
"RTN","IBEFUNC",119,0)
 ; Assume 1,2 (and 14 sometimes) are valid, 8 = INPATIENT
"RTN","IBEFUNC",120,0)
 Q STAT<3
"RTN","IBEFUNC",121,0)
 ;
"RTN","IBEFUNC",122,0)
NCTCL(IBOE0) ; Determine if a clinic for an outpt encounter is non-count
"RTN","IBEFUNC",123,0)
 ; IBOE0 = the 0-node of the encounter
"RTN","IBEFUNC",124,0)
 Q ($P($G(^SC(+$P(IBOE0,U,4),0)),U,17)="Y")
"RTN","IBEFUNC",125,0)
 ;
"RTN","IBEFUNC",126,0)
DISCT(IBOE,IBOE0) ; Determine if disposition has valid status for billing
"RTN","IBEFUNC",127,0)
 ; Returns 1 if valid, 0 if not valid
"RTN","IBEFUNC",128,0)
 ; IBOE = encounter ien
"RTN","IBEFUNC",129,0)
 ; IBOE0 = 0-node of encounter (optional)
"RTN","IBEFUNC",130,0)
 N IBX
"RTN","IBEFUNC",131,0)
 S IBX=$$DISND^IBSDU(IBOE,$G(IBOE0),2)
"RTN","IBEFUNC",132,0)
 Q (IBX<2)
"RTN","IBEFUNC",133,0)
 ;
"RTN","IBEFUNC",134,0)
NEEDMRA(IBIFN) ; Returns MRA NEEDED STATUS for bill
"RTN","IBEFUNC",135,0)
 Q $P($G(^DGCR(399,+IBIFN,"TX")),U,5)
"RTN","IBEFUNC",136,0)
 ;
"RTN","IBEFUNC",137,0)
REQMRA(IBIFN) ; Determine from site parameter, ins assigned to bill and txmn
"RTN","IBEFUNC",138,0)
 ;   rules if request for MRA is needed (MCRWNR must be current ins co)
"RTN","IBEFUNC",139,0)
 ; "R" = not needed due to next carrier not requiring it (txmn rules),
"RTN","IBEFUNC",140,0)
 ; "R1" = not needed due to MRA turned off at site
"RTN","IBEFUNC",141,0)
 ;  0 = not needed,  1 = needed
"RTN","IBEFUNC",142,0)
 N IB0,COBINS,COBSEQ,IBOK,Z1,Z0,IBDA,IB00,IB0
"RTN","IBEFUNC",143,0)
 ;
"RTN","IBEFUNC",144,0)
 S COBSEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBEFUNC",145,0)
 S COBINS=$P($G(^DGCR(399,IBIFN,"M")),U,COBSEQ)
"RTN","IBEFUNC",146,0)
 ;Curr ins must = MEDICARE WNR
"RTN","IBEFUNC",147,0)
 S IBOK=+$$MCRWNR(COBINS)
"RTN","IBEFUNC",148,0)
 I 'IBOK G REQMRAQ
"RTN","IBEFUNC",149,0)
 ;
"RTN","IBEFUNC",150,0)
 I '$$EDIACTV^IBCEF4(2) S IBOK="R1" G REQMRAQ ; Site param=NO
"RTN","IBEFUNC",151,0)
 ;
"RTN","IBEFUNC",152,0)
 ; Check next ins for MRA needed
"RTN","IBEFUNC",153,0)
 I COBSEQ'<3 S IBOK=0 G REQMRAQ
"RTN","IBEFUNC",154,0)
 ;
"RTN","IBEFUNC",155,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBEFUNC",156,0)
 S COBINS=+$P($G(^DGCR(399,IBIFN,"M")),U,COBSEQ+1)
"RTN","IBEFUNC",157,0)
 I 'COBINS S IBOK=0 G REQMRAQ ;No next ins
"RTN","IBEFUNC",158,0)
 ;
"RTN","IBEFUNC",159,0)
 ; Check only rules with rule type = 2 (MRA REQUEST RESTRICTIONS)
"RTN","IBEFUNC",160,0)
 S IBDA=0 F  S IBDA=$O(^IBE(364.4,"AC",2,IBDA)) Q:'IBDA  S IB00=$G(^IBE(364.4,IBDA,0)) D  Q:'IBOK
"RTN","IBEFUNC",161,0)
 . I $P(IB00,U,2)>DT Q  ; Inactive
"RTN","IBEFUNC",162,0)
 . I $P(IB00,U,6),$P(IB00,U,6)'>DT Q  ; Expired
"RTN","IBEFUNC",163,0)
 . S Z0=$$INPAT^IBCEF(IBIFN,1),Z0=$S(Z0=1:2,1:1)
"RTN","IBEFUNC",164,0)
 . S Z1=$$FT^IBCEF(IBIFN),Z1=$S(Z1=3:1,1:2)
"RTN","IBEFUNC",165,0)
 . I $S($P(IB00,U,4)=3:1,1:$P(IB00,U,4)=Z0),$S($P(IB00,U,5)=3:1,1:$P(IB00,U,5)=Z1) S Z0=$D(^IBE(364.4,IBDA,3,"B",COBINS)) I Z0>0 S IBOK="R"
"RTN","IBEFUNC",166,0)
 ;
"RTN","IBEFUNC",167,0)
REQMRAQ Q IBOK
"RTN","IBEFUNC",168,0)
 ;
"RTN","IBEFUNC",169,0)
MCRWNR(IBINS) ;Returns whether the ins co IBINS is MEDICARE WNR (Will
"RTN","IBEFUNC",170,0)
 ;           NOT Reimburse) 0=NO, 1=YES
"RTN","IBEFUNC",171,0)
 N Z,Z0
"RTN","IBEFUNC",172,0)
 S Z=0,Z0=$G(^DIC(36,+IBINS,0))
"RTN","IBEFUNC",173,0)
 I $P(Z0,U,2)="N",$P($G(^IBE(355.2,+$P(Z0,U,13),0)),U)="MEDICARE" S Z=1
"RTN","IBEFUNC",174,0)
 Q Z
"RTN","IBEFUNC",175,0)
 ;
"RTN","IBEFUNC",176,0)
WNRBILL(IBIFN,IBCOB) ; Returns whether the ins for COB seq IBCOB
"RTN","IBEFUNC",177,0)
 ;  is MEDICARE will not reimburse
"RTN","IBEFUNC",178,0)
 ;
"RTN","IBEFUNC",179,0)
 I $G(IBCOB)="" S IBCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBEFUNC",180,0)
 S IBCOB=$TR(IBCOB,"PST","123")
"RTN","IBEFUNC",181,0)
 Q $$MCRWNR(+$G(^DGCR(399,IBIFN,"I"_IBCOB)))
"RTN","IBEFUNC",182,0)
 ;
"RTN","IBEFUNC",183,0)
MCR(IBINS) ;Returns whether the ins co IBINS is MCR Will Reimburse
"RTN","IBEFUNC",184,0)
 ;          0=NO , 1=YES
"RTN","IBEFUNC",185,0)
 N Z,Z0
"RTN","IBEFUNC",186,0)
 S Z=0,Z0=$G(^DIC(36,+IBINS,0))
"RTN","IBEFUNC",187,0)
 I $P(Z0,U,2)'="N",$P($G(^IBE(355.2,+$P(Z0,U,13),0)),U)="MEDICARE" S Z=1
"RTN","IBEFUNC",188,0)
 Q Z
"RTN","IBEFUNC",189,0)
 ;
"RTN","IBEFUNC",190,0)
MRATYPE(IBIEN,IBVAR) ; Returns: A = MEDICARE A   B = MEDICARE B
"RTN","IBEFUNC",191,0)
 ;  C = MEDICARE OTHER    null = NOT MEDICARE
"RTN","IBEFUNC",192,0)
 ; for the plan associated with bill ien IBIEN OR grp plan IBIEN
"RTN","IBEFUNC",193,0)
 ; If IBVAR = "" or 'C', the data is from bill ien in IBIEN
"RTN","IBEFUNC",194,0)
 ;          = 'P', the data is from grp policy ien in IBIEN
"RTN","IBEFUNC",195,0)
 ; 
"RTN","IBEFUNC",196,0)
 N IBPLAN
"RTN","IBEFUNC",197,0)
 S IBPLAN=$S($G(IBVAR)'="P":+$$POLICY^IBCEF(IBIEN,18),1:IBIEN)
"RTN","IBEFUNC",198,0)
 Q $P($G(^IBA(355.3,+IBPLAN,0)),U,14)
"RTN","IBEFUNC",199,0)
 ;
"RTN","IBEFUNC",200,0)
MCRONBIL(IBIFN,IBFLG) ; Returns 0 if MCR WNR not on bill IBIFN
"RTN","IBEFUNC",201,0)
 ;  1 if on bill, is on or before current ins
"RTN","IBEFUNC",202,0)
 ;  2 if on bill, but after current ins
"RTN","IBEFUNC",203,0)
 ; IBFLG = a COB number if second "^" piece of return data should be
"RTN","IBEFUNC",204,0)
 ;         1 if MCRWNR is the insurance at that COB sequence (optional)
"RTN","IBEFUNC",205,0)
 N Z,IBON,Q
"RTN","IBEFUNC",206,0)
 S IBON=0,Q=$$COBN^IBCEF(IBIFN)
"RTN","IBEFUNC",207,0)
 F Z=1:1:3 I $$WNRBILL(IBIFN,Z) S IBON=$S(Q'<Z:1,1:2)_$S('$G(IBFLG):"",Z'=IBFLG:"",1:"^1") Q
"RTN","IBEFUNC",208,0)
 Q IBON
"RTN","IBEFUNC",209,0)
 ;
"RTN","IBEFUNC",210,0)
PROFEE(IBIFN) ; Returns whether any rev codes for prof fees
"RTN","IBEFUNC",211,0)
 ;  included on bill IBIFN  0 = not included,  1 = included,
"RTN","IBEFUNC",212,0)
 ;  2 = both inst and prof are included
"RTN","IBEFUNC",213,0)
 ;
"RTN","IBEFUNC",214,0)
 N IBPRO,Z
"RTN","IBEFUNC",215,0)
 S IBPRO=0,Z=$O(^DGCR(399,IBIFN,"RC","B",959)) ; Rev cds 960-989 are prof
"RTN","IBEFUNC",216,0)
 I Z,Z<990 D
"RTN","IBEFUNC",217,0)
 . S IBPRO=1
"RTN","IBEFUNC",218,0)
 . S Z=$O(^DGCR(399,IBIFN,"RC","B",0))
"RTN","IBEFUNC",219,0)
 . I $S(Z:Z<960,1:0)!($O(^DGCR(399,IBIFN,"RC","B",1000),-1)'<990) S IBPRO=2
"RTN","IBEFUNC",220,0)
 Q IBPRO
"RTN","IBEFUNC",221,0)
 ;
"RTN","IBEFUNC",222,0)
GETMOD(IBIFN,IBCPT,EXT) ; Returns 'list' of modifiers for file 399
"RTN","IBEFUNC",223,0)
 ;   procedure for bill IBIFN and proc ien IBCPT
"RTN","IBEFUNC",224,0)
 ;   in modifier seq order, separated by ','
"RTN","IBEFUNC",225,0)
 ;  If EXT = 1, return the actual modifier, not the ptr
"RTN","IBEFUNC",226,0)
 N IBMOD,IBZ,IBZ0,IB0,Z
"RTN","IBEFUNC",227,0)
 S IBZ=0,IBMOD=""
"RTN","IBEFUNC",228,0)
 F  S IBZ=$O(^DGCR(399,IBIFN,"CP",IBCPT,"MOD","B",IBZ)) Q:'IBZ  S IBZ0=0 F  S IBZ0=$O(^DGCR(399,IBIFN,"CP",IBCPT,"MOD","B",IBZ,IBZ0)) Q:'IBZ0  I $D(^DGCR(399,IBIFN,"CP",IBCPT,"MOD",IBZ0,0)) S IB0=$G(^(0)) D
"RTN","IBEFUNC",229,0)
 . I '$G(EXT) S Z=$P(IB0,U,2)
"RTN","IBEFUNC",230,0)
 . I $G(EXT) S Z=$$MOD^ICPTMOD($P(IB0,U,2),"I"),Z=$S($P(Z,U)=-1:"",1:$P(Z,U,2))
"RTN","IBEFUNC",231,0)
 . Q:Z=""
"RTN","IBEFUNC",232,0)
 . S IBMOD=IBMOD_$S(IBMOD="":"",1:",")_Z
"RTN","IBEFUNC",233,0)
 Q IBMOD
"RTN","IBEFUNC",234,0)
 ;
"RTN","IBEFUNC",235,0)
MODLST(MODS,DESC,IBMOD) ; Returns string of actual mods
"RTN","IBEFUNC",236,0)
 ; MOVED
"RTN","IBEFUNC",237,0)
 Q $$MODLST^IBEFUNC2(MODS,$G(DESC),.IBMOD)
"RTN","IBEFUNC",238,0)
 ;
"RTN","IBEFUNC",239,0)
GETSPEC(FILE,FIELD) ; Get fld specifier for FIELD # in FILE
"RTN","IBEFUNC",240,0)
 ; Use to set DIC("P") for FILE^DICN
"RTN","IBEFUNC",241,0)
 N IBZ
"RTN","IBEFUNC",242,0)
 D FIELD^DID(FILE,FIELD,"","SPECIFIER","IBZ")
"RTN","IBEFUNC",243,0)
 Q $G(IBZ("SPECIFIER"))
"RTN","IBEFUNC",244,0)
 ;
"RTN","IBY232PO")
0^^B32902144
"RTN","IBY232PO",1,0)
IBY232PO ;ALB/BSL - IB*2*232 POST-INSTALL ;25-AUG-03
"RTN","IBY232PO",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBY232PO",3,0)
 ;
"RTN","IBY232PO",4,0)
 N DIC,DIK,DA,Y,X
"RTN","IBY232PO",5,0)
 D BMES^XPDUTL("Post-Installation Updates")
"RTN","IBY232PO",6,0)
 ;
"RTN","IBY232PO",7,0)
IBSITE ;CHANGE LIVE AND TEST QUEUE IN IB SITE PARAMETERS FILE
"RTN","IBY232PO",8,0)
 S $P(^IBE(350.9,1,8),"^",1)="MCH"  ;LIVE QUEUE
"RTN","IBY232PO",9,0)
 ;S $P(^IBE(350.9,1,8),"^",1)="G.MCH@ISC-ALBANY.MED.VA.GOV"  ;LIVE QUEUE
"RTN","IBY232PO",10,0)
 S $P(^IBE(350.9,1,8),"^",9)="G.MCH@ISC-ALBANY.MED.VA.GOV"  ;TEST QUEUE
"RTN","IBY232PO",11,0)
 ;SAVE 8 NODE OF IB SITE PARAMETERS
"RTN","IBY232PO",12,0)
 ;S ^XTMP("P232","NEW",INC,"350.9",8)=^IBE(350.9,1,8)
"RTN","IBY232PO",13,0)
 ;
"RTN","IBY232PO",14,0)
 ;S ^XTMP("P232","NEW",0)=(INC+1)
"RTN","IBY232PO",15,0)
 ;
"RTN","IBY232PO",16,0)
MAIL ;REMOTE MEMBER IN MAIL GROUP IS SAME AS IN MCR
"RTN","IBY232PO",17,0)
 N IBMCR,IBMCH,DLAYGO,DIC,DIK,DA,D0,DD,Z,Z0 ; IA 4439
"RTN","IBY232PO",18,0)
 S IBMCR=+$O(^XMB(3.8,"B","MCR",0)),IBMCH=+$O(^XMB(3.8,"B","MCH",0)) S Z=0 F  S Z=$O(^XMB(3.8,IBMCR,6,Z)) Q:'Z  S Z0=$P($G(^XMB(3.8,IBMCR,6,Z,0)),U) I Z0'="" D
"RTN","IBY232PO",19,0)
 . I '$D(^XMB(3.8,IBMCH,6,"B",Z0)) D
"RTN","IBY232PO",20,0)
 .. S DLAYGO=3.812,DIC(0)="L",X=Z0,DA(1)=IBMCH,DIC="^XMB(3.8,"_DA(1)_",6," D FILE^DICN K DO,DD,DA,DLAYGO,DIC
"RTN","IBY232PO",21,0)
 .. I Y>0 S DA(1)=IBMCR,DA=Z,DIK="^XMB(3.8,"_DA(1)_",6," D ^DIK
"RTN","IBY232PO",22,0)
 ;
"RTN","IBY232PO",23,0)
 D BMES^XPDUTL("Updating facility provider ids for all insurance companies")
"RTN","IBY232PO",24,0)
 N DO,DD,DLAYGO,DIC,X,Y,Z,Z0,Z00,Z11,Z17,IBINS,IBID,IBHCFA,IBUB
"RTN","IBY232PO",25,0)
 S IBID=$$BF^IBCU()
"RTN","IBY232PO",26,0)
 I IBID S IBINS=0 F  S IBINS=$O(^DIC(36,IBINS)) Q:'IBINS  S Z11=$P($G(^(IBINS,0)),U,11),Z17=$P($G(^(0)),U,17) D
"RTN","IBY232PO",27,0)
 . S (IBHCFA,IBUB)=0
"RTN","IBY232PO",28,0)
 . S Z0=0 F  S Z0=$O(^IBA(355.92,"B",IBINS,Z0)) Q:'Z0  S Z00=$G(^IBA(355.92,Z0,0)) D  Q:IBHCFA&IBUB
"RTN","IBY232PO",29,0)
 .. I $P(Z00,U,6)=IBID S:$P(Z00,U,4)=2 IBHCFA=1 S:$P(Z00,U,4)=1 IBUB=1 Q
"RTN","IBY232PO",30,0)
 . I Z11'="",'IBUB S X=IBINS,DIC("DR")=".04////1;.06////"_IBID_";.07////"_Z11,DIC="^IBA(355.92,",DLAYGO=355.92,DIC(0)="L" D FILE^DICN K DO,DD,DLAYGO,DIC
"RTN","IBY232PO",31,0)
 . I Z17'="",'IBHCFA S X=IBINS,DIC("DR")=".04////2;.06////"_IBID_";.07////"_Z17,DIC="^IBA(355.92,",DLAYGO=355.92,DIC(0)="L" D FILE^DICN K DO,DD,DLAYGO,DIC
"RTN","IBY232PO",32,0)
 ;
"RTN","IBY232PO",33,0)
 D BMES^XPDUTL("Deleting unneeded cross refs in file 399")
"RTN","IBY232PO",34,0)
 D DELIX^DDMOD(399,101,4),DELIX^DDMOD(399,102,5),DELIX^DDMOD(399,103,4)
"RTN","IBY232PO",35,0)
 I $D(^IBE(355.97,10,0)) S DA=10,DIK="^IBE(355.97," D ^DIK
"RTN","IBY232PO",36,0)
 I $$PROD^IBCORC,DT<3050101 D  ; Production?
"RTN","IBY232PO",37,0)
 . N DIFROM,XMTO,XMBODY,XMSUBJ,XMZ,XMDUZ,DUZ,IBSITE,IBBODY
"RTN","IBY232PO",38,0)
 . D BMES^XPDUTL("SENDING EDI ENHANCEMENTS CONFIRMATION TO AUSTIN")
"RTN","IBY232PO",39,0)
 . S IBSITE=$$SITE^VASITE()
"RTN","IBY232PO",40,0)
 . S DUZ(0)="@",DUZ=.5,XMDUZ=DUZ,XMBODY="IBBODY"
"RTN","IBY232PO",41,0)
 . S XMSUBJ="EDI ENHANCEMENTS LOADED AT STATION #: "_$P(IBSITE,U,3)_$S($G(^XTMP("IB_EDI_ENHANCEMENTS_CONFIRMED",1)):" (AGAIN)",1:"")
"RTN","IBY232PO",42,0)
 . S XMTO("G.ZZ_EDIENHANCE@FO-ALBANY.MED.VA.GOV")=""
"RTN","IBY232PO",43,0)
 . S IBBODY(1)="EDI ENHANCEMENTS HAS BEEN LOADED INTO THE LIVE ACCOUNT OF",IBBODY(2)=$P(IBSITE,U,2)
"RTN","IBY232PO",44,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBY232PO",45,0)
 . I $G(XMZ) S ^XTMP("IB_EDI_ENHANCEMENTS_CONFIRMED",0)="3050101^"_DT_"^EDI ENHANCEMENTS CONFIRMATION ACKNOWLEDGED",^XTMP("IB_EDI_ENHANCEMENTS_CONFIRMED",1)=XMZ
"RTN","IBY232PO",46,0)
 . ;
"RTN","IBY232PO",47,0)
 . I '$G(^XTMP("IB_EDI_ENHANCEMENTS_CONFIRMED",1)) D
"RTN","IBY232PO",48,0)
 .. N DIFROM,IBBODY,XMBODY,XMDUZ,XMSUBJ,XMTO,DUZ
"RTN","IBY232PO",49,0)
 .. S DUZ=.5,DUZ(0)="@",XMDUZ=DUZ
"RTN","IBY232PO",50,0)
 .. S XMBODY="IBBODY"
"RTN","IBY232PO",51,0)
 .. D BMES^XPDUTL("NO CONFIRMATION WAS SENT FOR INSTALL - CONTACT EVS!!!")
"RTN","IBY232PO",52,0)
 .. S XMSUBJ="CALL NATIONAL HELP DESK - NO EDI ENHANCEMENTS CONFIRMATION"
"RTN","IBY232PO",53,0)
 .. S XMTO("G.IB EDI SUPERVISOR")=""
"RTN","IBY232PO",54,0)
 .. S IBBODY(1)="*** IMPORTANT **** IMPORTANT **** IMPORTANT **** IMPORTANT **** IMPORTANT ***",IBBODY(2)=" "
"RTN","IBY232PO",55,0)
 .. S IBBODY(3)="Contact the National Help desk (EVS) IMMEDIATELY to report no confirmation",IBBODY(4)="was sent from your site for EDI Enhancements after patch IB*2*232 install."
"RTN","IBY232PO",56,0)
 .. D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO)
"RTN","IBY232PO",57,0)
 ;
"RTN","IBY232PO",58,0)
 D END
"RTN","IBY232PO",59,0)
 Q
"RTN","IBY232PO",60,0)
 ;
"RTN","IBY232PO",61,0)
 ;
"RTN","IBY232PO",62,0)
PEND232 ; CLEANS OUT THE ENTRIES IN THE PENDING LIST THAT
"RTN","IBY232PO",63,0)
 ; THE PROCESS OF PARRALLEL TESTING HAS NOT ALLOWED TO RECEIVE REPORTS BACK
"RTN","IBY232PO",64,0)
 ;
"RTN","IBY232PO",65,0)
 ; THIS IS A TWO PART PROCESS, THE FIRST PART IDENTIFIES THE
"RTN","IBY232PO",66,0)
 ; PENDING ENTRIES IN THE PENDING REPORT
"RTN","IBY232PO",67,0)
 ; IF THERE ARE VALID ENTRIES IN THIS REPORT THEY SHOULD BE
"RTN","IBY232PO",68,0)
 ; REMOVED FROM THE ^BTMP GLOBAL BEFORE PERFORMING THE SECOND
"RTN","IBY232PO",69,0)
 ; STEP WHICH IS TO KILL ALL THE ENTRIES STILL LISTED IN ^BTMP
"RTN","IBY232PO",70,0)
 ;
"RTN","IBY232PO",71,0)
 ;FIND ALL THE ENTRIES IN THE ^IBA(364.1,"ASTAT","P"
"RTN","IBY232PO",72,0)
 S X=""
"RTN","IBY232PO",73,0)
 K ^BTMP(364.1)
"RTN","IBY232PO",74,0)
 F  S X=$O(^IBA(364.1,"ASTAT","P",X)) Q:X=""  D
"RTN","IBY232PO",75,0)
 . ; STORE IN TEMP GLOBAL ^BTMP
"RTN","IBY232PO",76,0)
 . ;SET BTMP TO WHAT CURRENT STATUS VALUE IS
"RTN","IBY232PO",77,0)
 . S ^BTMP(364.1,X)=$P($G(^IBA(364.1,X,0)),"^",2)
"RTN","IBY232PO",78,0)
 . ; SET CURRENT STATUS TO A0
"RTN","IBY232PO",79,0)
 . I $D(^BTMP(364.1,X)) S $P(^IBA(364.1,X,0),"^",2)="A0"
"RTN","IBY232PO",80,0)
 W !,"^BTMP GLOBAL IS PREPARED WITH PENDING ENTRIES!"
"RTN","IBY232PO",81,0)
 Q
"RTN","IBY232PO",82,0)
 ;
"RTN","IBY232PO",83,0)
KILLPEND ; KILL STAT ENTRY
"RTN","IBY232PO",84,0)
 S X=""
"RTN","IBY232PO",85,0)
 F  S X=$O(^BTMP(364.1,X)) Q:X=""  D
"RTN","IBY232PO",86,0)
 . K ^IBA(364.1,"ASTAT","P",X)
"RTN","IBY232PO",87,0)
 W !,"ALL GONE!"
"RTN","IBY232PO",88,0)
 Q
"RTN","IBY232PO",89,0)
 ;
"RTN","IBY232PO",90,0)
END ;
"RTN","IBY232PO",91,0)
 D BMES^XPDUTL("Step complete")
"RTN","IBY232PO",92,0)
 ;
"RTN","IBY232PO",93,0)
 D BMES^XPDUTL("Pre-install complete")
"RTN","IBY232PO",94,0)
 Q
"RTN","IBY232PO",95,0)
 ;
"RTN","IBY232PO",96,0)
DELLOC ; Local form for 837 transmission - delete all local override fields
"RTN","IBY232PO",97,0)
 ; for changed form 8 fields
"RTN","IBY232PO",98,0)
 N IB7,IB6,IB60,IB7X,IB7X0,Q,DA,DIK
"RTN","IBY232PO",99,0)
 S IB7=9999 F  S IB7=$O(^IBA(364.7,IB7)) Q:'IB7  S IB6=+$G(^(IB7,0)),IB60=$G(^IBA(364.6,IB6,0)) I $P($G(^IBE(353,+IB60,2)),U,2)="T"  D  ; We have a transmit form o/ride
"RTN","IBY232PO",100,0)
 . Q:'$$INCLUDE^IBY232PR(6,+$P(IB60,U,3))  ; field is being changed
"RTN","IBY232PO",101,0)
 . N MES
"RTN","IBY232PO",102,0)
 . S MES=1,MES(1)="Removing local field from 364.6 #"_IB6_" "_$P(IB60,U,10)_"  "_$P($G(^IBA(364.6,+$P(IB60,U,3),0)),U,10)
"RTN","IBY232PO",103,0)
 . S IB7X=0 F  S IB7X=$O(^IBA(364.7,"B",IB6,IB7X)) Q:'IB7X  D
"RTN","IBY232PO",104,0)
 . . S IB7X0=$G(^IBA(364.7,IB7X,0)) Q:IB7X0=""
"RTN","IBY232PO",105,0)
 . . S MES=MES+1,MES(MES)="  Override data element: "_$S(+$P(IB7X0,U,3):$$EXTERNAL^DILFD(364.7,.03,"",+$P(IB7X0,U,3)),1:"NONE DEFINED")
"RTN","IBY232PO",106,0)
 . . S MES=MES+1,MES(MES)="  Insurance co         : "_$S($P(IB7X0,U,5):$$EXTERNAL^DILFD(364.7,.05,"",+$P(IB7X0,U,5)),1:"ALL")
"RTN","IBY232PO",107,0)
 . . S MES=MES+1,MES(MES)="  Bill Type            : "_$S($P(IB7X0,U,6)="I":"INPATIENT",$P(IB7X0,U,6)="P":"PROFESSIONAL",1:"BOTH")
"RTN","IBY232PO",108,0)
 . . Q:$G(^IBA(364.7,IB7X,1))=""
"RTN","IBY232PO",109,0)
 . . S MES=MES+1,MES(MES)="  Override format code/description: "
"RTN","IBY232PO",110,0)
 . . S MES=MES+1,MES(MES)=^IBA(364.7,IB7X,1)
"RTN","IBY232PO",111,0)
 . . S Q=0 F  S Q=$O(^IBA(364.7,IB7X,3,Q)) Q:'Q  S MES=MES+1,MES(MES)=$G(^IBA(364.7,IB7X,3,Q,0))
"RTN","IBY232PO",112,0)
 . . S MES=MES+1,MES(MES)=" "
"RTN","IBY232PO",113,0)
 . . D MES^XPDUTL(.MES)
"RTN","IBY232PO",114,0)
 . . S DA=IB7X,DIK="^IBA(364.7," D ^DIK ; Delete entries in 364.7 for override flds
"RTN","IBY232PO",115,0)
 . S DIK="^IBA(364.6,",DA=IB6 D ^DIK ; delete entry in 364.6 for o/ride flds
"RTN","IBY232PO",116,0)
 Q
"RTN","IBY232PO",117,0)
 ;
"RTN","IBY232PO",118,0)
PRECOPY ;K ^XTMP("P232")
"RTN","IBY232PO",119,0)
 ;I $G(^XTMP("P232",0))="" S ^XTMP("P232",0)="3040601^3030830^PATCH IB*2.0*232 SWITCH OPTION"
"RTN","IBY232PO",120,0)
 ;I $G(^XTMP("P232","OLD",0))="" S ^XTMP("P232","OLD",0)=1
"RTN","IBY232PO",121,0)
 ;
"RTN","IBY232PO",122,0)
 ; CREATE INCR BACKUPS FOR RESTORE OF PREV
"RTN","IBY232PO",123,0)
 ;N INC,N S INC=^XTMP("P232","OLD",0)
"RTN","IBY232PO",124,0)
 ;F N=5:1:7  M ^XTMP("P232","OLD",INC,"364."_N)=^IBA("364."_N)
"RTN","IBY232PO",125,0)
 ;
"RTN","IBY232PO",126,0)
 ;SAVE DDs REFERENCING NEW CODE
"RTN","IBY232PO",127,0)
 ;M ^XTMP("P232","OLD",INC,"355.9")=^DD(355.9)
"RTN","IBY232PO",128,0)
 ;M ^XTMP("P232","OLD",INC,"355.91")=^DD(355.91)
"RTN","IBY232PO",129,0)
 ;M ^XTMP("P232","OLD",INC,"355.92")=^DD(355.92)
"RTN","IBY232PO",130,0)
 ;M ^XTMP("P232","OLD",INC,"355.93")=^DD(355.93)
"RTN","IBY232PO",131,0)
 ;M ^XTMP("P232","OLD",INC,"355.97")=^DD(355.97)
"RTN","IBY232PO",132,0)
 ;M ^XTMP("P232","OLD",INC,"399")=^DD(399)
"RTN","IBY232PO",133,0)
 ;M ^XTMP("P232","OLD",INC,"399.0222")=^DD(399.0222)
"RTN","IBY232PO",134,0)
 ;M ^XTMP("P232","OLD",INC,"36")=^DD(36)
"RTN","IBY232PO",135,0)
 ;M ^XTMP("P232","OLD",INC,"2")=^DD(2)
"RTN","IBY232PO",136,0)
 ;M ^XTMP("P232","OLD",INC,"DIC","36")=^DIC(36)
"RTN","IBY232PO",137,0)
 ;
"RTN","IBY232PO",138,0)
 ;SAVE 8-NODE OF 350.9
"RTN","IBY232PO",139,0)
 ;S ^XTMP("P232","OLD",INC,"350.9",1,8)=^IBE(350.9,1,8)
"RTN","IBY232PO",140,0)
 ;
"RTN","IBY232PO",141,0)
 ;SAVE OLD INPUT TEMPS
"RTN","IBY232PO",142,0)
 ;N TMPL
"RTN","IBY232PO",143,0)
 ;S TMPL="" S TMPL=$O(^DIE("B","IB SCREEN82",TMPL))
"RTN","IBY232PO",144,0)
 ;M ^XTMP("P232","OLD",INC,"DIE",TMPL)=^DIE(TMPL)
"RTN","IBY232PO",145,0)
 ;S TMPL="" S TMPL=$O(^DIE("B","IB SCREEN8H",TMPL))
"RTN","IBY232PO",146,0)
 ;M ^XTMP("P232","OLD",INC,"DIE",TMPL)=^DIE(TMPL)
"RTN","IBY232PO",147,0)
 ;S ^XTMP("P232","OLD",0)=(INC+1)
"RTN","IBY232PR")
0^^B68898198
"RTN","IBY232PR",1,0)
IBY232PR ;ALB/TMK - IB*2*232 PRE-INSTALL ;12-AUG-03
"RTN","IBY232PR",2,0)
 ;;2.0;INTEGRATED BILLING;**232**;21-MAR-94
"RTN","IBY232PR",3,0)
 ;
"RTN","IBY232PR",4,0)
 N DIC,DIK,DA,Y,X,IBY
"RTN","IBY232PR",5,0)
 D BMES^XPDUTL("Pre-Installation Updates")
"RTN","IBY232PR",6,0)
 ;
"RTN","IBY232PR",7,0)
COPY ; BUILD SWITCH BACK GLOBAL TO CHANGE BACK TO OLD FORMAT
"RTN","IBY232PR",8,0)
 ;
"RTN","IBY232PR",9,0)
 ; ^XTMP("P232",DIR,INC,NODE,...
"RTN","IBY232PR",10,0)
 ; DIR = ONLY 1 NOW
"RTN","IBY232PR",11,0)
 ; INC = INCREMENT OF INSTALL
"RTN","IBY232PR",12,0)
 ;
"RTN","IBY232PR",13,0)
 ; D PRECOPY^IBY232PO
"RTN","IBY232PR",14,0)
 ;
"RTN","IBY232PR",15,0)
 ; Delete local ov-rides
"RTN","IBY232PR",16,0)
 D BMES^XPDUTL("Removing local fields that reference changed EDI fields")
"RTN","IBY232PR",17,0)
 D DELLOC^IBY232PO
"RTN","IBY232PR",18,0)
 ; Chk for MCH domain
"RTN","IBY232PR",19,0)
 D BMES^XPDUTL("CHECKING FOR REQUIRED DOMAIN")
"RTN","IBY232PR",20,0)
 I $$PROD^IBCORC D  Q:$G(XPDABORT)
"RTN","IBY232PR",21,0)
 . S X="Q-MCH.VA.GOV",DIC="^DIC(4.2,",DIC(0)="Z" D ^DIC ; DBIA 3779
"RTN","IBY232PR",22,0)
 . M IBY=Y
"RTN","IBY232PR",23,0)
 . I IBY>0 D
"RTN","IBY232PR",24,0)
 .. S X="`"_$P(IBY(0),U,3),DIC="^DIC(4.2,",DIC(0)="Z" D ^DIC
"RTN","IBY232PR",25,0)
 .. S $P(IBY(0),U,3)=$P(Y,U,2)
"RTN","IBY232PR",26,0)
 . I $S(IBY'>0:1,1:$P(IBY(0),U,2)'="S"!($P(IBY(0),U,3)'="FOC-AUSTIN.VA.GOV")) D
"RTN","IBY232PR",27,0)
 .. D BMES^XPDUTL("Q-MCH.VA.GOV DOMAIN MISSING/INVALID - ADD/CORRECT ENTRY AND RESTART INSTALL")
"RTN","IBY232PR",28,0)
 .. D BMES^XPDUTL("REFERENCE MAILMAN PATCH XM*DBA*162 FOR ENTRY SET UP DETAILS")
"RTN","IBY232PR",29,0)
 .. S XPDABORT=1
"RTN","IBY232PR",30,0)
 ;
"RTN","IBY232PR",31,0)
 ; REMOVE OLD ENTRIES WE CHANGED TO PREVENT REPLICATION
"RTN","IBY232PR",32,0)
 N IB01,TAG,Z1,LVL,DIK,DIE,DR,DA,X,Y
"RTN","IBY232PR",33,0)
 S IB01="N-ALL CUR/OTH PROVIDER INFO"
"RTN","IBY232PR",34,0)
 I $P($G(^IBA(364.5,312,0)),U)'=IB01 S DA=312,DIE="^IBA(364.5,",DR=".01////^S X=IB01" D ^DIE
"RTN","IBY232PR",35,0)
 I '$D(^IBA(364.6,"ASEQ",8,177,1,10)) D
"RTN","IBY232PR",36,0)
 . N Z,Z0,DA,DIE,DR,DIK,X,Y
"RTN","IBY232PR",37,0)
 . I $O(^IBA(364.6,"ASEQ",8,177,1,1.9,0)) S Z0=+$O(^(0)) D
"RTN","IBY232PR",38,0)
 .. I $O(^IBA(364.7,"B",Z0,0)) S DA=+$O(^(0)),DIK="^IBA(364.7," D ^DIK
"RTN","IBY232PR",39,0)
 .. S DA=Z0,DIK="^IBA(364.6," D ^DIK
"RTN","IBY232PR",40,0)
 . S Z="" F  S Z=$O(^IBA(364.6,"ASEQ",8,177,1,Z),-1) Q:Z<2  S DA=+$O(^IBA(364.6,"ASEQ",8,177,1,Z,0)) I DA S DIE="^IBA(364.6,",DR=".08////"_(Z+1) D ^DIE D
"RTN","IBY232PR",41,0)
 .. S Z0=+$O(^IBA(364.7,"B",DA,0)) I Z0 S DIE="^IBA(364.7,",DA=+Z0,DR=".03////312" D ^DIE
"RTN","IBY232PR",42,0)
 ;
"RTN","IBY232PR",43,0)
 ;DELETE 364.X ENTRIES IN BLD
"RTN","IBY232PR",44,0)
 N LVL
"RTN","IBY232PR",45,0)
 F LVL=5:1:7 D
"RTN","IBY232PR",46,0)
 . F Z=2:1 S TAG="ENT"_LVL_"+"_Z Q:$P($T(@TAG),";;",2)=""  D
"RTN","IBY232PR",47,0)
 . . S Z0=$P($T(@TAG),";;",2) D
"RTN","IBY232PR",48,0)
 . . . F Z1=2:1:$L(Z0,U)-1 D
"RTN","IBY232PR",49,0)
 . . . . S DA=$P(Z0,U,Z1)
"RTN","IBY232PR",50,0)
 . . . . S DIK="^IBA(364."_LVL_","
"RTN","IBY232PR",51,0)
 . . . . I DA,$D(^IBA("364."_LVL,DA,0)) D ^DIK
"RTN","IBY232PR",52,0)
 ;
"RTN","IBY232PR",53,0)
 N DIK,DA,DIE,DR,X,Y,FILE,Z,CT,IBINS
"RTN","IBY232PR",54,0)
 D BMES^XPDUTL("Prepare entries in file 364.5 for changes")
"RTN","IBY232PR",55,0)
 I $D(^IBA(364.5,269)) S DIK="^IBA(364.5,",DA=269 D ^DIK
"RTN","IBY232PR",56,0)
 D BMES^XPDUTL("Prepare entries in file 364.6 for changes")
"RTN","IBY232PR",57,0)
 I $D(^IBA(364.6,94,0)) S DIE="^IBA(364.6,",DA=94,DR=".1////DIAGNOSIS CODE 1" D ^DIE
"RTN","IBY232PR",58,0)
 ;
"RTN","IBY232PR",59,0)
 D BMES^XPDUTL("Delete entry IB315 from IB ERROR file")
"RTN","IBY232PR",60,0)
 S X="IB315",DIC(0)="",DIC="^IBE(350.8," D ^DIC
"RTN","IBY232PR",61,0)
 I Y>0 S DA=+Y,DIK="^IBE(350.8," D ^DIK
"RTN","IBY232PR",62,0)
 D BMES^XPDUTL("Delete old cross references and data for fields changed in file 36")
"RTN","IBY232PR",63,0)
 I '$$FLDNUM^DILFD(36,"DELETE 2006 4.04") D  ; Only do this on initial install
"RTN","IBY232PR",64,0)
 . S Z=0 F  S Z=$O(^DIC(36,Z)) Q:'Z  S DR="4.01///@;4.02///@;4.03///@;4.04///@;4.05///@;4.06///@;4.07///@;4.08///@;4.1///@;4.11///@",DIE="^DIC(36,",DA=Z D ^DIE
"RTN","IBY232PR",65,0)
 . ;
"RTN","IBY232PR",66,0)
 . F DA=4.01,4.02,4.03 S DIK="^DD(36,",DA(1)=36 I $$VFIELD^DILFD(36,DA) D ^DIK
"RTN","IBY232PR",67,0)
 ;
"RTN","IBY232PR",68,0)
 D BMES^XPDUTL("Delete fields that were modified by this patch in file 399")
"RTN","IBY232PR",69,0)
 S DA=232,DIK="^DD(399,",DA(1)=399 I $$VFIELD^DILFD(399,232) D ^DIK
"RTN","IBY232PR",70,0)
 F DA=.02,.05,.06,.07,.09,.1,.11,.12,.13,.14,1.01,1.02,1.03 S DIK="^DD(399.0222,",DA(1)=399.0222 I $$VFIELD^DILFD(399.0222,DA) D ^DIK
"RTN","IBY232PR",71,0)
 D BMES^XPDUTL("Delete ids for deleted insurance companies")
"RTN","IBY232PR",72,0)
 S CT=0 F FILE=355.9,355.91 S Z=0 F  S Z=$O(^IBA(FILE,Z)) Q:'Z  S IBINS=+$P($G(^(Z,0)),U,$S(FILE[".91":1,1:2)) I IBINS,$G(^DIC(36,IBINS,0))="" S DIK="^IBA("_FILE_",",DA=Z D ^DIK S CT=CT+1
"RTN","IBY232PR",73,0)
 F FILE=355.95,355.96 S Z=0 F  S Z=$O(^IBA(FILE,Z)) Q:'Z  S IBINS=+$P($G(^(Z,0)),U,3) I IBINS,$G(^DIC(36,IBINS,0))="" S DIK="^IBA("_FILE_",",DA=Z D ^DIK S CT=CT+1
"RTN","IBY232PR",74,0)
 I CT D BMES^XPDUTL(CT_" IDs deleted for deleted insurance companies")
"RTN","IBY232PR",75,0)
 ;
"RTN","IBY232PR",76,0)
355 ;PUT PROPER MODIFIER INTO PC 3 OF ^IBE(355.97
"RTN","IBY232PR",77,0)
 ;
"RTN","IBY232PR",78,0)
 N X,INS
"RTN","IBY232PR",79,0)
 S X=0
"RTN","IBY232PR",80,0)
 F  S X=$O(^IBE(355.97,X)) Q:+X=0  D
"RTN","IBY232PR",81,0)
 . Q:'$D(^IBE(355.97,X,0))
"RTN","IBY232PR",82,0)
 . S INS=$P(^IBE(355.97,X,0),"^",1)
"RTN","IBY232PR",83,0)
 . Q:INS=""
"RTN","IBY232PR",84,0)
 . I INS["CROSS" S $P(^IBE(355.97,X,0),"^",3)="1A"
"RTN","IBY232PR",85,0)
 . I INS["SHIELD" S $P(^IBE(355.97,X,0),"^",3)="1B"
"RTN","IBY232PR",86,0)
 . I INS["CHAMPUS" S $P(^IBE(355.97,X,0),"^",3)="1H",DA=X,DR=".01////TRICARE ID",DIE="^IBE(355.97," D ^DIE
"RTN","IBY232PR",87,0)
 . I INS["COMMER" S $P(^IBE(355.97,X,0),"^",3)="G2"
"RTN","IBY232PR",88,0)
 . I INS["CLIA" S $P(^IBE(355.97,X,0),"^",3)="X4"
"RTN","IBY232PR",89,0)
 . I INS["MEDICARE" S $P(^IBE(355.97,X,0),"^",3)="1C"
"RTN","IBY232PR",90,0)
 . I INS["TAX" S $P(^IBE(355.97,X,0),"^",3)="24"
"RTN","IBY232PR",91,0)
 . I INS["NETWORK" S $P(^IBE(355.97,X,0),"^",3)="N5"
"RTN","IBY232PR",92,0)
 . I INS["UPIN" S $P(^IBE(355.97,X,0),"^",3)="1G",$P(^(0),U,2)=0
"RTN","IBY232PR",93,0)
 . I INS["PPO" S $P(^IBE(355.97,X,0),"^",3)="B3"
"RTN","IBY232PR",94,0)
 . I INS["HMO" S $P(^IBE(355.97,X,0),"^",3)="BQ"
"RTN","IBY232PR",95,0)
 . I INS["SOCIAL" S $P(^IBE(355.97,X,0),"^",3)="SY"
"RTN","IBY232PR",96,0)
 . I INS["STATE" S $P(^IBE(355.97,X,0),"^",3)="0B"
"RTN","IBY232PR",97,0)
 ;
"RTN","IBY232PR",98,0)
 D END
"RTN","IBY232PR",99,0)
 Q
"RTN","IBY232PR",100,0)
 ;
"RTN","IBY232PR",101,0)
INCLUDE(FILE,Y) ;CODE TO DECIDE WHICH FILE ENTRIES CAN BE INCLUDED IN BUILD
"RTN","IBY232PR",102,0)
 ;FILE = FILE LIST WE SHOULD USE 5=364.5,6=364.6,7=364.7, Y = GLOBAL IEN
"RTN","IBY232PR",103,0)
 ;
"RTN","IBY232PR",104,0)
 N IBOUT,Z,Z0,LINE,TAG
"RTN","IBY232PR",105,0)
 I Y>9999 S IBOUT=0 G INCQ1
"RTN","IBY232PR",106,0)
 F LINE=2:1  S TAG="ENT"_FILE_"+"_LINE Q:$P($T(@TAG),";;",2)=""  I $P($T(@TAG),";;",2)[(U_+Y_U) S IBOUT=1 Q
"RTN","IBY232PR",107,0)
INCQ1 Q +$G(IBOUT)
"RTN","IBY232PR",108,0)
 ;
"RTN","IBY232PR",109,0)
ENT5 ;ENTRIES IN 364.5 WE NEED
"RTN","IBY232PR",110,0)
 ;
"RTN","IBY232PR",111,0)
 ;;^101^218^234^268^269^271^272^298^299^300^301^303^304^305^306^307^308^309^310^311^312^313^314^315^316^317^318^
"RTN","IBY232PR",112,0)
 ;;
"RTN","IBY232PR",113,0)
 ;
"RTN","IBY232PR",114,0)
ENT6 ;ENTRIES IN 364.6 WE NEED
"RTN","IBY232PR",115,0)
 ;
"RTN","IBY232PR",116,0)
 ;;^1^3^5^8^19^22^26^28^30^31^33^35^36^41^42^44^51^52^53^92^112^113^114^
"RTN","IBY232PR",117,0)
 ;;^115^116^117^118^119^120^121^122^123^124^125^126^127^128^129^130^131^
"RTN","IBY232PR",118,0)
 ;;^132^133^134^135^136^137^138^156^168^169^175^177^178^179^180^181^182^
"RTN","IBY232PR",119,0)
 ;;^184^185^186^187^188^192^194^196^210^251^252^253^479^483^488^579^580^
"RTN","IBY232PR",120,0)
 ;;^581^610^792^793^794^859^860^861^862^863^864^865^866^867^868^869^
"RTN","IBY232PR",121,0)
 ;;^870^871^872^873^874^875^876^877^878^879^880^881^882^883^885^907^908^
"RTN","IBY232PR",122,0)
 ;;^909^910^911^912^913^914^915^916^917^918^919^920^921^935^936^937^938^
"RTN","IBY232PR",123,0)
 ;;^939^940^941^942^943^944^945^946^947^948^949^950^958^960^968^951^973^
"RTN","IBY232PR",124,0)
 ;;^974^975^976^977^978^979^980^981^982^983^984^985^986^989^990^991^992^
"RTN","IBY232PR",125,0)
 ;;^993^994^1004^1006^1007^1009^1010^1011^1012^1013^1014^1015^1016^1017^
"RTN","IBY232PR",126,0)
 ;;^1018^1019^
"RTN","IBY232PR",127,0)
 ;;^1020^1021^1022^1023^1024^1025^1026^1027^1028^1029^1030^1031^1032^
"RTN","IBY232PR",128,0)
 ;;^1033^1034^1035^1036^1037^1038^1039^1040^1041^1042^1043^1044^1045^
"RTN","IBY232PR",129,0)
 ;;^1046^1047^1048^1049^1050^1056^1057^1058^1059^1060^1061^1062^1063^
"RTN","IBY232PR",130,0)
 ;;^1065^1066^1067^1068^1069^1071^1072^1073^1074^1075^1076^1077^1078^
"RTN","IBY232PR",131,0)
 ;;^1080^1081^1082^1083^1084^1085^1086^1087^1088^1089^1090^1091^1092^
"RTN","IBY232PR",132,0)
 ;;^1094^1095^1096^1097^1098^1099^1100^1101^1102^1103^1104^1106^1107^
"RTN","IBY232PR",133,0)
 ;;^1108^1110^1111^1112^1113^1114^1115^1116^1117^1118^1119^1120^1121^
"RTN","IBY232PR",134,0)
 ;;^1122^1123^1124^1126^1127^1128^1129^1130^1131^1132^1133^1134^1135^
"RTN","IBY232PR",135,0)
 ;;^1136^1137^1138^1139^1140^1141^1142^1143^1144^1145^1146^
"RTN","IBY232PR",136,0)
 ;;^1147^1148^1150^1151^1152^1153^1154^1155^1156^1157^1158^1159^1160^
"RTN","IBY232PR",137,0)
 ;;^1161^1162^1163^1164^1165^1166^1167^1168^1169^1170^1171^1172^1173^
"RTN","IBY232PR",138,0)
 ;;^1174^1175^1176^1177^1178^1179^1180^1181^1182^1183^1184^1185^1186^
"RTN","IBY232PR",139,0)
 ;;^1187^1188^1189^1190^1191^1192^1194^1195^1196^1197^1198^1199^1200^
"RTN","IBY232PR",140,0)
 ;;^1201^1202^1203^1204^1205^1206^1207^1209^1210^1211^1212^1213^1214^
"RTN","IBY232PR",141,0)
 ;;^1215^1216^1217^1218^1219^1220^1221^1222^1223^1224^1225^1226^1227^
"RTN","IBY232PR",142,0)
 ;;^1228^1229^1230^1231^1232^1233^1234^1235^1236^1237^1238^1239^1240^
"RTN","IBY232PR",143,0)
 ;;^1241^1242^1243^1244^1245^1246^1247^1248^1249^1250^1251^1252^1253^
"RTN","IBY232PR",144,0)
 ;;^1254^1255^1256^1257^1258^1259^1260^1261^1262^1263^1277^1278^1279^
"RTN","IBY232PR",145,0)
 ;;^1280^1281^1282^1283^1284^1285^1286^1287^1288^1289^1290^1291^1292^
"RTN","IBY232PR",146,0)
 ;;^1293^1294^1295^1296^1297^1298^1299^1300^1301^1302^1303^1304^1305^
"RTN","IBY232PR",147,0)
 ;;^1306^1308^1309^1310^1311^1312^1313^1314^1315^1316^1317^1318^1319^
"RTN","IBY232PR",148,0)
 ;;^1320^
"RTN","IBY232PR",149,0)
 ;;
"RTN","IBY232PR",150,0)
 ;
"RTN","IBY232PR",151,0)
ENT7 ;ENTRIES IN 364.7 WE NEED
"RTN","IBY232PR",152,0)
 ;
"RTN","IBY232PR",153,0)
 ;;^1^5^6^7^12^13^14^17^18^25^27^28^53^79^80^88^89^110^112^134^135^141^
"RTN","IBY232PR",154,0)
 ;;^144^151^152^153^154^156^157^186^187^192^193^195^196^197^198^203^204^
"RTN","IBY232PR",155,0)
 ;;^205^206^207^208^209^211^212^213^214^215^220^224^228^229^230^232^237^
"RTN","IBY232PR",156,0)
 ;;^244^245^246^247^249^256^302^316^324^325^420^440^441^443^
"RTN","IBY232PR",157,0)
 ;;^532^642^644^646^648^650^652^654^655^656^657^658^659^660^661^662^
"RTN","IBY232PR",158,0)
 ;;^326^333^334^358^359^360^361^362^363^364^365^366^367^368^369^370^
"RTN","IBY232PR",159,0)
 ;;^371^372^373^374^375^376^377^378^379^380^381^382^383^384^385^386^
"RTN","IBY232PR",160,0)
 ;;^387^388^389^391^392^393^394^395^396^397^398^399^400^401^402^403^
"RTN","IBY232PR",161,0)
 ;;^404^405^406^407^408^409^410^411^412^413^414^416^417^418^419^420^
"RTN","IBY232PR",162,0)
 ;;^421^422^423^424^425^426^427^428^429^430^431^432^433^434^435^436^
"RTN","IBY232PR",163,0)
 ;;^437^438^439^441^443^444^445^446^447^448^449^450^451^452^453^454^
"RTN","IBY232PR",164,0)
 ;;^455^456^457^458^459^460^461^462^463^464^465^466^467^468^469^470^
"RTN","IBY232PR",165,0)
 ;;^471^487^531^535^537^538^540^541^542^543^544^545^546^547^548^549^
"RTN","IBY232PR",166,0)
 ;;^550^551^552^553^554^555^556^557^558^559^560^561^562^563^564^565^
"RTN","IBY232PR",167,0)
 ;;^566^567^568^570^571^572^573^574^575^576^577^578^579^580^581^582^
"RTN","IBY232PR",168,0)
 ;;^583^584^585^586^587^588^589^590^591^592^593^594^595^596^597^598^
"RTN","IBY232PR",169,0)
 ;;^599^600^601^602^603^604^605^614^640^641^644^645^646^647^648^649^650^
"RTN","IBY232PR",170,0)
 ;;^651^652^653^663^664^798^800^806^807^830^893^896^897^901^902^914^915^
"RTN","IBY232PR",171,0)
 ;;^916^917^918^919^920^921^922^923^934^945^948^949^950^969^986^987^988^
"RTN","IBY232PR",172,0)
 ;;^991^992^993^994^995^996^1005^1006^1008^1010^1012^1015^1016^1017^1018^
"RTN","IBY232PR",173,0)
 ;;^1019^1020^1021^1022^1023^1024^1025^1026^1027^1028^1029^1030^1031^
"RTN","IBY232PR",174,0)
 ;;^1032^1033^1011^1034^1035^1036^1037^1038^
"RTN","IBY232PR",175,0)
 ;;
"RTN","IBY232PR",176,0)
 ;
"RTN","IBY232PR",177,0)
ENT97 ;ENTRIES IN 355.97 WE NEED
"RTN","IBY232PR",178,0)
 ;
"RTN","IBY232PR",179,0)
 ;;^24^25^26^27^28^29^
"RTN","IBY232PR",180,0)
 ;;
"RTN","IBY232PR",181,0)
 ;
"RTN","IBY232PR",182,0)
END ;
"RTN","IBY232PR",183,0)
 D BMES^XPDUTL("Step complete")
"RTN","IBY232PR",184,0)
 ;
"RTN","IBY232PR",185,0)
 D BMES^XPDUTL("Pre-install complete")
"RTN","IBY232PR",186,0)
 Q
"RTN","IBY232PR",187,0)
 ;
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",399,399.0222,-1)
399^PRV
"UP",399,399.0222,0)
399.0222
"VER")
8.0^22.0
"^DD",2,2.312,16,0)
PT. RELATIONSHIP TO INSURED^R*S^01:PATIENT;02:SPOUSE;03:NATURAL CHILD;08:EMPLOYEE;09:DO NOT USE;11:ORGAN DONOR;15:INJURED PLANTIFF;18:DO NOT USE;32:MOTHER;33:FATHER;^0;16^Q
"^DD",2,2.312,16,1,0)
^.1
"^DD",2,2.312,16,1,1,0)
2.312^AC^MUMPS
"^DD",2,2.312,16,1,1,1)
Q
"^DD",2,2.312,16,1,1,2)
Q
"^DD",2,2.312,16,1,1,"%D",0)
^^1^1^2930601^
"^DD",2,2.312,16,1,1,"%D",1,0)
Cross-reference to force filing of data.
"^DD",2,2.312,16,1,1,"DT")
2930601
"^DD",2,2.312,16,3)
Enter the code which indicates the patient's relationship to the insured party.
"^DD",2,2.312,16,12)
Cannot use 09 or 18 anymore
"^DD",2,2.312,16,12.1)
S DIC("S")="I X'=""09"",X'=""18"""
"^DD",2,2.312,16,21,0)
^.001^4^4^3030910^^^^
"^DD",2,2.312,16,21,1,0)
Select the relationship code that describes the relationship this
"^DD",2,2.312,16,21,2,0)
patient has to the holder of this insurance policy. If the policy
"^DD",2,2.312,16,21,3,0)
belongs to the patient enter '01' for patient. If the policy
"^DD",2,2.312,16,21,4,0)
belongs to the spouse enter '02' for spouse, etc.
"^DD",2,2.312,16,"DT")
3030910
"^DD",36,36,4.01,0)
PERF PROV SECOND ID TYPE HCFA^*P355.97'^IBE(355.97,^4;1^S DIC("S")="I $P(^(0),U,6)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",36,36,4.01,1,0)
^.1^^0
"^DD",36,36,4.01,3)
Enter the type of performing provider id # the insurance co requires on its HCFA 1500 bills
"^DD",36,36,4.01,12)
Must be valid id type for performing provider id
"^DD",36,36,4.01,12.1)
S DIC("S")="I $P(^(0),U,6)"
"^DD",36,36,4.01,21,0)
^.001^5^5^3040524^^^^
"^DD",36,36,4.01,21,1,0)
This is the type of performing provider secondary id # that the insurance
"^DD",36,36,4.01,21,2,0)
company expects on HCFA 1500 bills received from the V.A.  When the
"^DD",36,36,4.01,21,3,0)
payer-specific provider id is extracted, this field is used to determine
"^DD",36,36,4.01,21,4,0)
where to get the default data from if another secondary id is not entered
"^DD",36,36,4.01,21,5,0)
for the claim. 
"^DD",36,36,4.01,"DT")
3040519
"^DD",36,36,4.02,0)
PERF PROV SECOND ID TYPE UB^*P355.97'^IBE(355.97,^4;2^S DIC("S")="I $P(^(0),U,6),$P(^(0),U,3)'=""1B""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",36,36,4.02,3)
Enter the type of performing provider id # the insurance co requires on its UB92 bills
"^DD",36,36,4.02,12)
Must be valid id type for performing provider id, can't be BLUE SHIELD
"^DD",36,36,4.02,12.1)
S DIC("S")="I $P(^(0),U,6),$P(^(0),U,3)'=""1B"""
"^DD",36,36,4.02,21,0)
^.001^4^4^3040608^^
"^DD",36,36,4.02,21,1,0)
This is the type of performing provider id # that the insurance company
"^DD",36,36,4.02,21,2,0)
expects on UB92 bills received from the V.A.  When the payer-specific
"^DD",36,36,4.02,21,3,0)
provider id is extracted, this field is used to determine where to get the
"^DD",36,36,4.02,21,4,0)
data from.
"^DD",36,36,4.02,"DT")
3040608
"^DD",36,36,4.03,0)
SECONDARY ID REQUIREMENTS^S^0:NONE REQUIRED;1:HCFA 1500 REQUIRED;2:UB92 REQUIRED;3:BOTH UB92 AND HCFA 1500 REQUIRED;^4;3^Q
"^DD",36,36,4.03,3)
Enter the code to specify the secondary performing provider id requirement for this ins co by form type
"^DD",36,36,4.03,21,0)
^.001^2^2^3040519^^^
"^DD",36,36,4.03,21,1,0)
This field is used to identify if the insurance company requires the
"^DD",36,36,4.03,21,2,0)
performing provider secondary id on the UB92, the HCFA 1500 or both.
"^DD",36,36,4.03,"DT")
3040519
"^DD",36,36,4.04,0)
DELETE 2006 4.04^S^3:INSURANCE COMPANY DEFAULT;4:INSURANCE CO/PROVIDER;^4;4^Q
"^DD",36,36,4.04,3)
Enter the source the system should use to find the Network id for this insurance co
"^DD",36,36,4.04,21,0)
^^6^6^3040519^
"^DD",36,36,4.04,21,1,0)
This is the source level where the insurance company expects the network
"^DD",36,36,4.04,21,2,0)
id to come from.
"^DD",36,36,4.04,21,3,0)
3 (INSURANCE CO DEFAULT) - the insurance co provides a single id that
"^DD",36,36,4.04,21,4,0)
 applies to all providers at the facility.
"^DD",36,36,4.04,21,5,0)
4 (INS CO/PROV DEFAULT) - the insurance co provides ids that are
"^DD",36,36,4.04,21,6,0)
 specifically assigned to each provider at the facility.
"^DD",36,36,4.04,"DT")
3040519
"^DD",36,36,4.05,0)
DELETE 2006 4.05^S^0:NO DEFAULT;1:DEFAULT TO MORE GENERAL;^4;5^Q
"^DD",36,36,4.05,3)
Enter YES (1) to search for an id at the next higher level if ID not found at default level.
"^DD",36,36,4.05,21,0)
^^3^3^3040519^
"^DD",36,36,4.05,21,1,0)
This field indicates whether or not it is valid to search for a
"^DD",36,36,4.05,21,2,0)
network id at the next higher level than the default indicated
"^DD",36,36,4.05,21,3,0)
if the id is not found using the default data.
"^DD",36,36,4.05,"DT")
3040519
"^DD",36,36,4.06,0)
DELETE 2006 4.06^S^3:INSURANCE COMPANY DEFAULT;4:INSURANCE CO/PROVIDER;5:INSURANCE CO/CARE UNIT;^4;6^Q
"^DD",36,36,4.06,3)
Enter the source the system should use to find the EMC id for this insurance co
"^DD",36,36,4.06,21,0)
^.001^8^8^3010508^^^^
"^DD",36,36,4.06,21,1,0)
This is the source level where the insurance company expects the EMC
"^DD",36,36,4.06,21,2,0)
id to come from.
"^DD",36,36,4.06,21,3,0)
3 (INSURANCE CO DEFAULT) - the insurance co provides a single id that
"^DD",36,36,4.06,21,4,0)
 applies to all providers at the facility.
"^DD",36,36,4.06,21,5,0)
4 (INS CO/PROV DEFAULT) - the insurance co provides ids that are
"^DD",36,36,4.06,21,6,0)
 specifically assigned to each provider at the facility.
"^DD",36,36,4.06,21,7,0)
5 (INS CO/CARE UNIT) - insurance co provides ids that are assigned based
"^DD",36,36,4.06,21,8,0)
 on the company's defined 'care units' for care at the facility.
"^DD",36,36,4.06,"DT")
3040519
"^DD",36,36,4.07,0)
DELETE 2006 4.07^S^0:NO DEFAULT;1:DEFAULT TO MORE GENERAL;^4;7^Q
"^DD",36,36,4.07,.1)
 
"^DD",36,36,4.07,3)
Enter YES (1) to search for an id at the next higher level if ID not found at default level.
"^DD",36,36,4.07,21,0)
^.001^3^3^3010321^^
"^DD",36,36,4.07,21,1,0)
This field indicates whether or not it is valid to search for a
"^DD",36,36,4.07,21,2,0)
EMC id at the next higher level than the default indicated
"^DD",36,36,4.07,21,3,0)
if the id is not found using the default data.
"^DD",36,36,4.07,"DT")
3040519
"^DD",36,36,4.08,0)
DELETE 2006 4.08^F^^4;8^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,4.08,3)
Answer must be 1-30 characters in length.
"^DD",36,36,4.08,21,0)
^.001^5^5^3010321^^^^
"^DD",36,36,4.08,21,1,0)
This is the name of the specific care unit this insurance company
"^DD",36,36,4.08,21,2,0)
needs on each claim to determine the correct EMC id # for the claim.
"^DD",36,36,4.08,21,3,0)
For example, if specialty code is the care unit that the EMC id
"^DD",36,36,4.08,21,4,0)
# is based on, you would enter SPECIALTY CODE here and, on each claim,
"^DD",36,36,4.08,21,5,0)
enter the actual specialty code in the EMC ID CARE UNIT field.
"^DD",36,36,4.08,23,0)
^.001^2^2^3010321^^^^
"^DD",36,36,4.08,23,1,0)
This data will appear in the executable help for the EMC ID CARE
"^DD",36,36,4.08,23,2,0)
UNIT field.
"^DD",36,36,4.08,"DT")
3040519
"^DD",36,36,4.1,0)
DELETE 2006 4.1^*P355.97'^IBE(355.97,^4;10^S DIC("S")="I $P(^(0),U,2)'>4,$P(^(0),U,6)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",36,36,4.1,1,0)
^.1
"^DD",36,36,4.1,1,1,0)
^^TRIGGER^36^4.11
"^DD",36,36,4.1,1,1,1)
X ^DD(36,4.1,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,4)):^(4),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y X ^DD(36,4.1,1,1,1.1) S DIH=$G(^DIC(36,DIV(0),4)),DIV=X S $P(^(4),U,11)=DIV,DIH=36,DIG=4.11 D ^DICR
"^DD",36,36,4.1,1,1,1.1)
S X=DIV S I(0,0)=$G(D0),D0=DIV S:'D0!'$D(^IBE(355.97,+D0,0)) D0=-1 S Y(102)=$S($D(^IBE(355.97,D0,0)):^(0),1:""),Y(101)=X S X=$P(Y(102),U,2),X=X S X=X S D0=I(0,0)
"^DD",36,36,4.1,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(355.97,+D0,0)) D0=-1 S Y(102)=$S($D(^IBE(355.97,D0,0)):^(0),1:""),Y(101)=X S X=$P(Y(102),U,2),X=X S X=X>0 S D0=I(0,0)
"^DD",36,36,4.1,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,4)):^(4),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),4)),DIV=X S $P(^(4),U,11)=DIV,DIH=36,DIG=4.11 D ^DICR
"^DD",36,36,4.1,1,1,3)
Do not delete
"^DD",36,36,4.1,1,1,"CREATE CONDITION")
ALTERNATE PERF PROV ID TYPE:INTERNAL(SOURCE LEVEL MINIMUM)>0
"^DD",36,36,4.1,1,1,"CREATE VALUE")
ALTERNATE PERF PROV ID TYPE:INTERNAL(SOURCE LEVEL MINIMUM)
"^DD",36,36,4.1,1,1,"DELETE VALUE")
@
"^DD",36,36,4.1,1,1,"FIELD")
ALTERNATE PERF PROV ID SOURCE
"^DD",36,36,4.1,3)
Enter the provider id type to use if the id from the performing prov source is not found
"^DD",36,36,4.1,12)
Must be a valid type for performing provider and have no minimum source level or have source 1-4
"^DD",36,36,4.1,12.1)
S DIC("S")="I $P(^(0),U,2)'>4,$P(^(0),U,6)"
"^DD",36,36,4.1,21,0)
^.001^3^3^3010424^^
"^DD",36,36,4.1,21,1,0)
This is the alternate provider id type to use to find the performing
"^DD",36,36,4.1,21,2,0)
provider's id when the default id as defined by the performing provider
"^DD",36,36,4.1,21,3,0)
id type cannot be found.
"^DD",36,36,4.1,"DT")
3040519
"^DD",36,36,4.11,0)
DELETE 2006 4.11^*S^1:PROVIDER DEFAULT;2:FACILITY DEFAULT;3:INSURANCE COMPANY DEFAULT;4:INSURANCE CO/PROVIDER;^4;11^Q
"^DD",36,36,4.11,3)
Enter the source the system should use to find the alternate performing provider id for this insurance co
"^DD",36,36,4.11,5,2,0)
36^4.1^1
"^DD",36,36,4.11,12)
This field must agree with limitations on alternate provider id type
"^DD",36,36,4.11,12.1)
S DIC("S")="I $S($P($G(^IBE(355.97,+$P($G(^DIC(36,D0,4)),U,10),0)),U,2):$P(^(0),U,2)=Y,1:1)"
"^DD",36,36,4.11,21,0)
^^12^12^3020312^
"^DD",36,36,4.11,21,1,0)
This is the alternate performing provider id's source level:
"^DD",36,36,4.11,21,2,0)
 
"^DD",36,36,4.11,21,3,0)
1 (PROVIDER DEFAULT) - insurance co needs an id that has been assigned
"^DD",36,36,4.11,21,4,0)
 ONLY to an individual provider by other than the insurance co or the
"^DD",36,36,4.11,21,5,0)
 facility (i.e. State License #, UPIN, etc)
"^DD",36,36,4.11,21,6,0)
2 (FACILITY DEFAULT) - insurance co needs an id that has been assigned
"^DD",36,36,4.11,21,7,0)
 to the facility by other than the insurance co and will apply to
"^DD",36,36,4.11,21,8,0)
 all providers at the facility (i.e. Facility Federal Tax id #)
"^DD",36,36,4.11,21,9,0)
3 (INSURANCE CO DEFAULT) - the insurance co provides a single id that
"^DD",36,36,4.11,21,10,0)
 applies to all providers at the facility.
"^DD",36,36,4.11,21,11,0)
4 (INS CO/PROV DEFAULT) - the insurance co provides ids that are
"^DD",36,36,4.11,21,12,0)
 specifically assigned to each provider at the facility.
"^DD",36,36,4.11,"DT")
3040519
"^DD",350.8,350.8,0)
FIELD^^10^7
"^DD",350.8,350.8,0,"DDA")
N
"^DD",350.8,350.8,0,"DT")
2930322
"^DD",350.8,350.8,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",350.8,350.8,0,"IX","AC",350.8,.03)
 
"^DD",350.8,350.8,0,"IX","B",350.8,.01)
 
"^DD",350.8,350.8,0,"IX","C",350.8,.03)
 
"^DD",350.8,350.8,0,"NM","IB ERROR")
 
"^DD",350.8,350.8,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",350.8,350.8,.01,1,0)
^.1
"^DD",350.8,350.8,.01,1,1,0)
350.8^B
"^DD",350.8,350.8,.01,1,1,1)
S ^IBE(350.8,"B",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.01,1,1,2)
K ^IBE(350.8,"B",$E(X,1,30),DA)
"^DD",350.8,350.8,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",350.8,350.8,.01,21,0)
^^2^2^2910305^^
"^DD",350.8,350.8,.01,21,1,0)
This is a free text name of the entry.  It should be namespaced with
"^DD",350.8,350.8,.01,21,2,0)
the namespace of the package reporting the error.
"^DD",350.8,350.8,.02,0)
ERROR MESSAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",350.8,350.8,.02,3)
Answer must be 3-80 characters in length.
"^DD",350.8,350.8,.02,21,0)
^^3^3^2940209^^^^
"^DD",350.8,350.8,.02,21,1,0)
This is the text of the message as it will be displayed to a user or
"^DD",350.8,350.8,.02,21,2,0)
posted in a bulletin.  It should be as meaningful as possible to the
"^DD",350.8,350.8,.02,21,3,0)
person seeing the message.
"^DD",350.8,350.8,.03,0)
ERROR CODE^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
"^DD",350.8,350.8,.03,1,0)
^.1
"^DD",350.8,350.8,.03,1,1,0)
350.8^AC
"^DD",350.8,350.8,.03,1,1,1)
S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,1,2)
K ^IBE(350.8,"AC",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,1,2,0)
350.8^C
"^DD",350.8,350.8,.03,1,2,1)
S ^IBE(350.8,"C",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,2,2)
K ^IBE(350.8,"C",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,3)
Answer must be 1-9 characters in length.
"^DD",350.8,350.8,.03,21,0)
^^9^9^2920219^^^^
"^DD",350.8,350.8,.03,21,1,0)
This is the error code that will be passed to or determined by
"^DD",350.8,350.8,.03,21,2,0)
Integrated Billing.  The format for the Error Code should be
"^DD",350.8,350.8,.03,21,3,0)
nnxxx, where nn is the reporting package namespace and xxx are numeric
"^DD",350.8,350.8,.03,21,4,0)
values.
"^DD",350.8,350.8,.03,21,5,0)
 
"^DD",350.8,350.8,.03,21,6,0)
This is the error code that will be passed as the second piece of
"^DD",350.8,350.8,.03,21,7,0)
the variable Y to IB when +Y=-1.  More than one error code can be
"^DD",350.8,350.8,.03,21,8,0)
placed in the second ^ piece of Y delimited by semi-colons.  Applications
"^DD",350.8,350.8,.03,21,9,0)
may call ^IBAERR to display the error message(s).
"^DD",350.8,350.8,.03,"DT")
2920219
"^DD",350.8,350.8,.04,0)
PACKAGE REPORTING ERROR^S^1:INTEGRATED BILLING;2:ACCOUNTS RECEIVABLE;3:PHARMACY;^0;4^Q
"^DD",350.8,350.8,.04,21,0)
^^2^2^2920415^^^
"^DD",350.8,350.8,.04,21,1,0)
This is the package that requested this entry in this file and will
"^DD",350.8,350.8,.04,21,2,0)
report it to IB as an error if the conditions are detected.
"^DD",350.8,350.8,.05,0)
ERROR ACTION^S^1:DISPLAY MESSAGE;2:SEND BULLETIN;3:EDIT FILE;^0;5^Q
"^DD",350.8,350.8,.05,21,0)
^^6^6^2910227^
"^DD",350.8,350.8,.05,21,1,0)
This is the type of action that should be taken when this error is
"^DD",350.8,350.8,.05,21,2,0)
reported to IB.  If action other than displaying a message is indicated
"^DD",350.8,350.8,.05,21,3,0)
then the MUMPS code in the ERROR ACTION field will be executed.
"^DD",350.8,350.8,.05,21,4,0)
 
"^DD",350.8,350.8,.05,21,5,0)
Currently only display actions are implemented.  Please contact the 
"^DD",350.8,350.8,.05,21,6,0)
developing ISC if other action types are desired.
"^DD",350.8,350.8,.06,0)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"^DD",350.8,350.8,.06,21,0)
^^1^1^2940209^
"^DD",350.8,350.8,.06,21,1,0)
This is the type of alert that should be sent when this error occurs.
"^DD",350.8,350.8,.06,"DT")
2930322
"^DD",350.8,350.8,10,0)
EXECUTABLE LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",350.8,350.8,10,3)
This is Standard MUMPS code.
"^DD",350.8,350.8,10,21,0)
^^2^2^2910227^
"^DD",350.8,350.8,10,21,1,0)
This is the MUMPS code that will be executed if an error is reported
"^DD",350.8,350.8,10,21,2,0)
with an ERROR ACTION of other than to display a message.
"^DD",355.9,355.9,.03,0)
PROVIDER ID CARE UNIT^*P355.96'X^IBA(355.96,^0;3^S:$D(DA) DIC("S")="I +$G(^IBA(355.96,+Y,0))=+$P($G(^IBA(355.9,DA,0)),U,2)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X I $D(X),$G(DA) K:$$DUP^IBCEP1(.03,DA) X
"^DD",355.9,355.9,.03,1,0)
^.1
"^DD",355.9,355.9,.03,1,1,0)
^^TRIGGER^355.9^.16
"^DD",355.9,355.9,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X I X S X=DIV S Y(1)=$S($D(^IBA(355.9,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=DIV,X=X X ^DD(355.9,.03,1,1,1.4)
"^DD",355.9,355.9,.03,1,1,1.4)
S DIH=$G(^IBA(355.9,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.9,DIG=.16 D ^DICR
"^DD",355.9,355.9,.03,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.9,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X="*N/A*" S DIH=$G(^IBA(355.9,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.9,DIG=.16 D ^DICR
"^DD",355.9,355.9,.03,1,1,"CREATE CONDITION")
INTERNAL(PROVIDER ID CARE UNIT)
"^DD",355.9,355.9,.03,1,1,"CREATE VALUE")
INTERNAL(PROVIDER ID CARE UNIT)
"^DD",355.9,355.9,.03,1,1,"DELETE VALUE")
"*N/A*"
"^DD",355.9,355.9,.03,1,1,"DT")
3040602
"^DD",355.9,355.9,.03,1,1,"FIELD")
INDEX VALUE CARE UNIT
"^DD",355.9,355.9,.03,1,2,0)
355.9^ACARE
"^DD",355.9,355.9,.03,1,2,1)
S ^IBA(355.9,"ACARE",$E(X,1,30),DA)=""
"^DD",355.9,355.9,.03,1,2,2)
K ^IBA(355.9,"ACARE",$E(X,1,30),DA)
"^DD",355.9,355.9,.03,1,2,3)
Do not delete
"^DD",355.9,355.9,.03,1,2,"%D",0)
^^1^1^3001107^
"^DD",355.9,355.9,.03,1,2,"%D",1,0)
This xref allows quick access to the file by care unit.
"^DD",355.9,355.9,.03,1,2,"DT")
3001107
"^DD",355.9,355.9,.03,3)
Enter the specific care unit value needed to get the provider id.
"^DD",355.9,355.9,.03,5,1,0)
355.9^.02^1
"^DD",355.9,355.9,.03,12)
Value must be defined as valid for the insurance co
"^DD",355.9,355.9,.03,12.1)
S DIC("S")="I +$G(^IBA(355.96,+Y,0))=+$P($G(^IBA(355.9,DA,0)),U,2)"
"^DD",355.9,355.9,.03,21,0)
^.001^3^3^3010427^^^^
"^DD",355.9,355.9,.03,21,1,0)
This is the actual data value of the care unit to use to assign
"^DD",355.9,355.9,.03,21,2,0)
this provider id to the insurance company and provider.
"^DD",355.9,355.9,.03,21,3,0)
*** NOT CURRENTLY USED ***
"^DD",355.9,355.9,.03,"DT")
3040602
"^DD",355.91,355.91,.03,0)
PROVIDER ID CARE UNIT^*P355.96'X^IBA(355.96,^0;3^S DIC("S")="I +$G(^IBA(355.96,+Y,0))=+$G(^IBA(355.91,DA,0))" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X I $D(X),$$DUP1^IBCEP1(.03,DA) K X
"^DD",355.91,355.91,.03,1,0)
^.1
"^DD",355.91,355.91,.03,1,1,0)
^^TRIGGER^355.91^.1
"^DD",355.91,355.91,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X I X S X=DIV S Y(1)=$S($D(^IBA(355.91,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S X=DIV,X=X X ^DD(355.91,.03,1,1,1.4)
"^DD",355.91,355.91,.03,1,1,1.4)
S DIH=$G(^IBA(355.91,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=355.91,DIG=.1 D ^DICR
"^DD",355.91,355.91,.03,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.91,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S X="*N/A*" S DIH=$G(^IBA(355.91,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=355.91,DIG=.1 D ^DICR
"^DD",355.91,355.91,.03,1,1,"CREATE CONDITION")
INTERNAL(PROVIDER ID CARE UNIT)
"^DD",355.91,355.91,.03,1,1,"CREATE VALUE")
INTERNAL(PROVIDER ID CARE UNIT)
"^DD",355.91,355.91,.03,1,1,"DELETE VALUE")
"*N/A*"
"^DD",355.91,355.91,.03,1,1,"DT")
3040607
"^DD",355.91,355.91,.03,1,1,"FIELD")
INDEX VALUE CARE UNIT
"^DD",355.91,355.91,.03,1,2,0)
355.91^ACARE
"^DD",355.91,355.91,.03,1,2,1)
S ^IBA(355.91,"ACARE",$E(X,1,30),DA)=""
"^DD",355.91,355.91,.03,1,2,2)
K ^IBA(355.91,"ACARE",$E(X,1,30),DA)
"^DD",355.91,355.91,.03,1,2,3)
Do not delete
"^DD",355.91,355.91,.03,1,2,"%D",0)
^^1^1^3001107^
"^DD",355.91,355.91,.03,1,2,"%D",1,0)
This xref allows quick access to the file by care unit.
"^DD",355.91,355.91,.03,1,2,"DT")
3001107
"^DD",355.91,355.91,.03,3)
Enter the specific care unit needed to get the provider id.
"^DD",355.91,355.91,.03,12)
Must be a valid care unit as defined for the insurance company
"^DD",355.91,355.91,.03,12.1)
S DIC("S")="I +$G(^IBA(355.96,+Y,0))=+$G(^IBA(355.91,DA,0))"
"^DD",355.91,355.91,.03,21,0)
^.001^4^4^3010427^^^
"^DD",355.91,355.91,.03,21,1,0)
This is the generic, lowest breakdown provided for identification of the
"^DD",355.91,355.91,.03,21,2,0)
provider id.  This can be virtually any piece of data the insurance
"^DD",355.91,355.91,.03,21,3,0)
co chooses to use.  The unit must be entered manually on each bill.
"^DD",355.91,355.91,.03,21,4,0)
 *** NOT CURRENTLY USED ***
"^DD",355.91,355.91,.03,"DT")
3040607
"^DD",355.92,355.92,0)
FIELD^^.01^5
"^DD",355.92,355.92,0,"DT")
3040610
"^DD",355.92,355.92,0,"IX","B",355.92,.01)
 
"^DD",355.92,355.92,0,"NM","FACILITY BILLING ID")
 
"^DD",355.92,355.92,.01,0)
INSURANCE COMPANY^RP36'^DIC(36,^0;1^Q
"^DD",355.92,355.92,.01,1,0)
^.1
"^DD",355.92,355.92,.01,1,1,0)
355.92^B
"^DD",355.92,355.92,.01,1,1,1)
S ^IBA(355.92,"B",$E(X,1,30),DA)=""
"^DD",355.92,355.92,.01,1,1,2)
K ^IBA(355.92,"B",$E(X,1,30),DA)
"^DD",355.92,355.92,.01,3)
Enter the name of the insurance company that is providing the id.
"^DD",355.92,355.92,.01,21,0)
^^1^1^3040511^
"^DD",355.92,355.92,.01,21,1,0)
This is the insurance company that is providing the facility id.
"^DD",355.92,355.92,.01,"DT")
3040611
"^DD",355.92,355.92,.04,0)
FORM TYPE APPLIED TO^RS^0:BOTH UB92 AND HCFA 1500 FORMS;1:UB92 ONLY;2:HCFA ONLY;3:PRESCRIPTION ONLY;^0;4^Q
"^DD",355.92,355.92,.04,3)
Select one or both forms that the facility id will apply to.
"^DD",355.92,355.92,.04,21,0)
^^2^2^3040511^
"^DD",355.92,355.92,.04,21,1,0)
This designates whether the id number is to be used for just
"^DD",355.92,355.92,.04,21,2,0)
UB92 form types, just HCFA 1500 form types or both form types.
"^DD",355.92,355.92,.04,"DT")
3040511
"^DD",355.92,355.92,.05,0)
DIVISION^P40.8'^DG(40.8,^0;5^Q
"^DD",355.92,355.92,.05,3)
Enter the specific division this id will be used for.
"^DD",355.92,355.92,.05,21,0)
^.001^1^1^3040610^^
"^DD",355.92,355.92,.05,21,1,0)
This designates which division this id number should be used for.
"^DD",355.92,355.92,.05,"DT")
3040611
"^DD",355.92,355.92,.06,0)
PROVIDER ID TYPE^R*P355.97'^IBE(355.97,^0;6^S DIC("S")="I $$FACID^IBCEP7(Y)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",355.92,355.92,.06,3)
Enter the type of id # being recorded.
"^DD",355.92,355.92,.06,12)
Must be a valid type for SUB2 record in EDI claim flat file
"^DD",355.92,355.92,.06,12.1)
S DIC("S")="I $$FACID^IBCEP7(Y)"
"^DD",355.92,355.92,.06,21,0)
^^1^1^3040511^
"^DD",355.92,355.92,.06,21,1,0)
This is the indicator of what type of id is being recorded.
"^DD",355.92,355.92,.06,"DT")
3040512
"^DD",355.92,355.92,.07,0)
PROVIDER ID^RF^^0;7^K:$L(X)>20!($L(X)<1) X
"^DD",355.92,355.92,.07,3)
Answer must be 1-20 characters in length.
"^DD",355.92,355.92,.07,21,0)
^^2^2^3040511^
"^DD",355.92,355.92,.07,21,1,0)
This is the facility ID that will be reported for the provider id type
"^DD",355.92,355.92,.07,21,2,0)
for the insurance co.
"^DD",355.92,355.92,.07,"DT")
3040511
"^DD",355.93,355.93,.01,0)
NAME^RFX^^0;1^K:$L(X)>30!($L(X)<3)!'$$VALFAC^IBCEP8(X) X I $D(X),X["," N IBXNM S IBXNM=X D STDNAME^XLFNAME(.IBXNM,"FGP") S X=IBXNM K:$L(X)>30!($L(X)<3)!$D(^VA(200,"B",X)) X
"^DD",355.93,355.93,.01,1,0)
^.1
"^DD",355.93,355.93,.01,1,1,0)
355.93^B
"^DD",355.93,355.93,.01,1,1,1)
S ^IBA(355.93,"B",$E(X,1,30),DA)=""
"^DD",355.93,355.93,.01,1,1,2)
K ^IBA(355.93,"B",$E(X,1,30),DA)
"^DD",355.93,355.93,.01,1,2,0)
^^TRIGGER^355.93^.02
"^DD",355.93,355.93,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)'["," I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(355.93,.01,1,2,1.4)
"^DD",355.93,355.93,.01,1,2,1.4)
S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=355.93,DIG=.02 D ^DICR
"^DD",355.93,355.93,.01,1,2,2)
Q
"^DD",355.93,355.93,.01,1,2,3)
Do not delete
"^DD",355.93,355.93,.01,1,2,"%D",0)
^.101^2^2^3000831^^
"^DD",355.93,355.93,.01,1,2,"%D",1,0)
This triggers the PROVIDER TYPE to FACILITY if the name does not contain a
"^DD",355.93,355.93,.01,1,2,"%D",2,0)
comma
"^DD",355.93,355.93,.01,1,2,"CREATE CONDITION")
NAME'[","
"^DD",355.93,355.93,.01,1,2,"CREATE VALUE")
S X=1
"^DD",355.93,355.93,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.93,355.93,.01,1,2,"DT")
3000831
"^DD",355.93,355.93,.01,1,2,"FIELD")
PROVIDER TYPE
"^DD",355.93,355.93,.01,1,3,0)
^^TRIGGER^355.93^.02
"^DD",355.93,355.93,.01,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["," I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=2 X ^DD(355.93,.01,1,3,1.4)
"^DD",355.93,355.93,.01,1,3,1.4)
S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=355.93,DIG=.02 D ^DICR
"^DD",355.93,355.93,.01,1,3,2)
Q
"^DD",355.93,355.93,.01,1,3,3)
Do not delete
"^DD",355.93,355.93,.01,1,3,"%D",0)
^^2^2^3000831^
"^DD",355.93,355.93,.01,1,3,"%D",1,0)
This triggers the PROVIDER TYPE to INDIVIDUAL if the name does contain a
"^DD",355.93,355.93,.01,1,3,"%D",2,0)
comma
"^DD",355.93,355.93,.01,1,3,"CREATE CONDITION")
NAME[","
"^DD",355.93,355.93,.01,1,3,"CREATE VALUE")
S X=2
"^DD",355.93,355.93,.01,1,3,"DELETE VALUE")
NO EFFECT
"^DD",355.93,355.93,.01,1,3,"DT")
3000831
"^DD",355.93,355.93,.01,1,3,"FIELD")
PROVIDER TYPE
"^DD",355.93,355.93,.01,3)
Enter the name of a NON-VA provider/facility or other VA.  Name must start with a letter and can have letters,numbers,comma,space,dash only.  Names aren't valid if they exist in the NEW PERSON file.
"^DD",355.93,355.93,.01,21,0)
^.001^15^15^3030916^^^^
"^DD",355.93,355.93,.01,21,1,0)
This is the name of either an individual NON-VA provider or a NON-VA
"^DD",355.93,355.93,.01,21,2,0)
or another VA facility that provides services to the V.A. for which the
"^DD",355.93,355.93,.01,21,3,0)
V.A. can in turn bill an insurance company for reimbursement.  For facility
"^DD",355.93,355.93,.01,21,4,0)
type entries, do not include any commas in the name.  If commas are found,
"^DD",355.93,355.93,.01,21,5,0)
the name is 'standardized' and the facility name will be converted to
"^DD",355.93,355.93,.01,21,6,0)
last name,first name middle.
"^DD",355.93,355.93,.01,21,7,0)
'Standardized' means all punctuation except '-' and space are removed, 
"^DD",355.93,355.93,.01,21,8,0)
the name is changed to all uppercase, 2 or more successive '-' or spaces
"^DD",355.93,355.93,.01,21,9,0)
are converted to a single '-' or space and any words for birth
"^DD",355.93,355.93,.01,21,10,0)
position (1ST-10TH) are changed to their Roman numeral equivalents.
"^DD",355.93,355.93,.01,21,11,0)
For individual type entries, the name should be entered in
"^DD",355.93,355.93,.01,21,12,0)
LAST,FIRST MIDDLE format.  Enter only data that is actually part of
"^DD",355.93,355.93,.01,21,13,0)
the provider's name. Do not include extra titles, identification, flags,
"^DD",355.93,355.93,.01,21,14,0)
local information, etc.  All provider names will be converted to  
"^DD",355.93,355.93,.01,21,15,0)
the 'standardized' format.
"^DD",355.93,355.93,.01,"DT")
3030826
"^DD",355.93,355.93,.02,0)
PROVIDER TYPE^SX^1:FACILITY/GROUP;2:INDIVIDUAL;^0;2^N Z,Z0 S Z0=X,Z=$P($G(^IBA(355.93,DA,0)),U) I $S(X=1:Z[",",1:Z'[",") D EN^DDIOL($S(Z0=1:"FACILITY NAMES MUST NOT CONTAIN A COMMA",1:"INDIVIDUAL NAMES REQUIRE LAST,FIRST MI FORMAT")) K X
"^DD",355.93,355.93,.02,1,0)
^.1
"^DD",355.93,355.93,.02,1,1,0)
^^TRIGGER^355.93^.03
"^DD",355.93,355.93,.02,1,1,1)
Q
"^DD",355.93,355.93,.02,1,1,2)
X ^DD(355.93,.02,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=355.93,DIG=.03 D ^DICR
"^DD",355.93,355.93,.02,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=2
"^DD",355.93,355.93,.02,1,1,3)
Do not delete
"^DD",355.93,355.93,.02,1,1,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,1,"%D",1,0)
This trigger deletes the value of the CREDENTIALS field if the type is no
"^DD",355.93,355.93,.02,1,1,"%D",2,0)
longer an individual provider type.
"^DD",355.93,355.93,.02,1,1,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,1,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=2
"^DD",355.93,355.93,.02,1,1,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,1,"FIELD")
CREDENTIALS
"^DD",355.93,355.93,.02,1,2,0)
^^TRIGGER^355.93^.04
"^DD",355.93,355.93,.02,1,2,1)
Q
"^DD",355.93,355.93,.02,1,2,2)
X ^DD(355.93,.02,1,2,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=355.93,DIG=.04 D ^DICR
"^DD",355.93,355.93,.02,1,2,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=2
"^DD",355.93,355.93,.02,1,2,3)
Do not delete
"^DD",355.93,355.93,.02,1,2,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,2,"%D",1,0)
This trigger deletes the value of the SPECIALTY field if the type is no
"^DD",355.93,355.93,.02,1,2,"%D",2,0)
longer an individual provider type.
"^DD",355.93,355.93,.02,1,2,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,2,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=2
"^DD",355.93,355.93,.02,1,2,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,2,"DT")
3000905
"^DD",355.93,355.93,.02,1,2,"FIELD")
SPECIALTY
"^DD",355.93,355.93,.02,1,3,0)
^^TRIGGER^355.93^.05
"^DD",355.93,355.93,.02,1,3,1)
Q
"^DD",355.93,355.93,.02,1,3,2)
X ^DD(355.93,.02,1,3,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=355.93,DIG=.05 D ^DICR
"^DD",355.93,355.93,.02,1,3,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=1
"^DD",355.93,355.93,.02,1,3,3)
Do not delete
"^DD",355.93,355.93,.02,1,3,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,3,"%D",1,0)
This trigger deletes the value of the STREET ADDRESS field if the type is
"^DD",355.93,355.93,.02,1,3,"%D",2,0)
no longer a facility type provider.
"^DD",355.93,355.93,.02,1,3,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,3,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=1
"^DD",355.93,355.93,.02,1,3,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,3,"DT")
3000905
"^DD",355.93,355.93,.02,1,3,"FIELD")
STREET ADDRESS
"^DD",355.93,355.93,.02,1,4,0)
^^TRIGGER^355.93^.06
"^DD",355.93,355.93,.02,1,4,1)
Q
"^DD",355.93,355.93,.02,1,4,2)
X ^DD(355.93,.02,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=355.93,DIG=.06 D ^DICR
"^DD",355.93,355.93,.02,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=1
"^DD",355.93,355.93,.02,1,4,3)
Do not delete
"^DD",355.93,355.93,.02,1,4,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,4,"%D",1,0)
This trigger deletes the value of the CITY field if the type is no
"^DD",355.93,355.93,.02,1,4,"%D",2,0)
longer a facility type provider.
"^DD",355.93,355.93,.02,1,4,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,4,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=1
"^DD",355.93,355.93,.02,1,4,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,4,"DT")
3000905
"^DD",355.93,355.93,.02,1,4,"FIELD")
CITY
"^DD",355.93,355.93,.02,1,5,0)
^^TRIGGER^355.93^.07
"^DD",355.93,355.93,.02,1,5,1)
Q
"^DD",355.93,355.93,.02,1,5,2)
X ^DD(355.93,.02,1,5,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=355.93,DIG=.07 D ^DICR
"^DD",355.93,355.93,.02,1,5,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=1
"^DD",355.93,355.93,.02,1,5,3)
Do not delete
"^DD",355.93,355.93,.02,1,5,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,5,"%D",1,0)
This trigger deletes the value of the STATE field if the type is no
"^DD",355.93,355.93,.02,1,5,"%D",2,0)
longer a facility type provider.
"^DD",355.93,355.93,.02,1,5,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,5,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=1
"^DD",355.93,355.93,.02,1,5,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,5,"DT")
3000905
"^DD",355.93,355.93,.02,1,5,"FIELD")
STATE
"^DD",355.93,355.93,.02,1,6,0)
^^TRIGGER^355.93^.08
"^DD",355.93,355.93,.02,1,6,1)
Q
"^DD",355.93,355.93,.02,1,6,2)
X ^DD(355.93,.02,1,6,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,8)=DIV,DIH=355.93,DIG=.08 D ^DICR
"^DD",355.93,355.93,.02,1,6,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=1
"^DD",355.93,355.93,.02,1,6,3)
Do not delete
"^DD",355.93,355.93,.02,1,6,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,6,"%D",1,0)
This trigger deletes the value of the ZIP CODE field if the type is no
"^DD",355.93,355.93,.02,1,6,"%D",2,0)
longer a facility type provider.
"^DD",355.93,355.93,.02,1,6,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,6,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=1
"^DD",355.93,355.93,.02,1,6,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,6,"DT")
3000905
"^DD",355.93,355.93,.02,1,6,"FIELD")
ZIP CODE
"^DD",355.93,355.93,.02,1,7,0)
^^TRIGGER^355.93^.09
"^DD",355.93,355.93,.02,1,7,1)
Q
"^DD",355.93,355.93,.02,1,7,2)
X ^DD(355.93,.02,1,7,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,9)=DIV,DIH=355.93,DIG=.09 D ^DICR
"^DD",355.93,355.93,.02,1,7,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1),X=X S X=X=1
"^DD",355.93,355.93,.02,1,7,3)
Do not delete
"^DD",355.93,355.93,.02,1,7,"%D",0)
^^2^2^3000905^
"^DD",355.93,355.93,.02,1,7,"%D",1,0)
This trigger deletes the value of the FACILITY DEFAULT ID NUMBER field
"^DD",355.93,355.93,.02,1,7,"%D",2,0)
if the type is no longer a facility type provider.
"^DD",355.93,355.93,.02,1,7,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,7,"DELETE CONDITION")
INTERNAL(OLD PROVIDER TYPE)=1
"^DD",355.93,355.93,.02,1,7,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,7,"DT")
3000905
"^DD",355.93,355.93,.02,1,7,"FIELD")
FACILITY DEFAULT ID NUMBER
"^DD",355.93,355.93,.02,3)
Enter 1 or 2 to designate this entry as a facility or an individual.
"^DD",355.93,355.93,.02,5,1,0)
355.93^.01^2
"^DD",355.93,355.93,.02,5,2,0)
355.93^.01^3
"^DD",355.93,355.93,.02,21,0)
^.001^9^9^3040518^^^^
"^DD",355.93,355.93,.02,21,1,0)
This field identifies the type of provider being defined.  Facility
"^DD",355.93,355.93,.02,21,2,0)
providers can be used to fill in the name and address of the non-VA
"^DD",355.93,355.93,.02,21,3,0)
facility where services were rendered (box 32 on the HCFA 1500).  An
"^DD",355.93,355.93,.02,21,4,0)
individual provider can be selected as the rendering, attending,
"^DD",355.93,355.93,.02,21,5,0)
referring or operating provider on a bill.
"^DD",355.93,355.93,.02,21,6,0)
 
"^DD",355.93,355.93,.02,21,7,0)
For name standarization purposes, individual provider names must be
"^DD",355.93,355.93,.02,21,8,0)
entered in LAST,FIRST MIDDLE format and facility names must not contain
"^DD",355.93,355.93,.02,21,9,0)
a comma.
"^DD",355.93,355.93,.02,"DT")
3000905
"^DD",355.93,355.93,.1,0)
STREET ADDRESS LINE 2^F^^0;10^K:$L(X)>30!($L(X)<1) X
"^DD",355.93,355.93,.1,3)
Answer must be 1-30 characters in length.
"^DD",355.93,355.93,.1,21,0)
^^3^3^3030821^
"^DD",355.93,355.93,.1,21,1,0)
This is line 2 of the street address of the non-VA facility that rendered
"^DD",355.93,355.93,.1,21,2,0)
the care that is being billed by the VA.  It is only valid for FACILITY
"^DD",355.93,355.93,.1,21,3,0)
providers.
"^DD",355.93,355.93,.1,"DT")
3030821
"^DD",355.93,355.93,.11,0)
X12 TYPE OF FACILITY^S^77:SERVICE LOCATION;FA:FACILITY;LI:INDEPENDENT LAB;TL:TESTING LAB;^0;11^Q
"^DD",355.93,355.93,.11,3)
Enter the code for the type of facility as identified in the X12 documents.
"^DD",355.93,355.93,.11,21,0)
^^2^2^3030821^
"^DD",355.93,355.93,.11,21,1,0)
This is the code for the type of facility as identified in the X12
"^DD",355.93,355.93,.11,21,2,0)
documents.
"^DD",355.93,355.93,.11,"DT")
3030821
"^DD",355.93,355.93,.12,0)
STATE LICENSE #^F^^0;12^K:$L(X)>30!($L(X)<1) X
"^DD",355.93,355.93,.12,3)
Answer must be 1-30 characters in length.
"^DD",355.93,355.93,.12,5,1,0)
355.93^.07^1
"^DD",355.93,355.93,.12,21,0)
^^4^4^3030825^
"^DD",355.93,355.93,.12,21,1,0)
This is the State license # for the non-VA provider. Note, there can
"^DD",355.93,355.93,.12,21,2,0)
be only 1 state license # on file for non-VA/other VA providers.
"^DD",355.93,355.93,.12,21,3,0)
Enter multiple entries for the provider if multiple state license
"^DD",355.93,355.93,.12,21,4,0)
numbers are required (one for each state).
"^DD",355.93,355.93,.12,"DT")
3030825
"^DD",355.97,355.97,0)
FIELD^^1.09^15
"^DD",355.97,355.97,0,"DDA")
N
"^DD",355.97,355.97,0,"DT")
3040611
"^DD",355.97,355.97,0,"ID",.02)
W ""
"^DD",355.97,355.97,0,"IX","B",355.97,.01)
 
"^DD",355.97,355.97,0,"NM","IB PROVIDER ID # TYPE")
 
"^DD",355.97,355.97,0,"PT",36,4.01)
 
"^DD",355.97,355.97,0,"PT",36,4.02)
 
"^DD",355.97,355.97,0,"PT",36,4.1)
 
"^DD",355.97,355.97,0,"PT",355.9,.06)
 
"^DD",355.97,355.97,0,"PT",355.91,.06)
 
"^DD",355.97,355.97,0,"PT",355.92,.06)
 
"^DD",355.97,355.97,0,"PT",355.96,.06)
 
"^DD",355.97,355.97,0,"PT",399.0222,.12)
 
"^DD",355.97,355.97,0,"PT",399.0222,.13)
 
"^DD",355.97,355.97,0,"PT",399.0222,.14)
 
"^DD",355.97,355.97,0,"VRPK")
IB
"^DD",355.97,355.97,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",355.97,355.97,.01,1,0)
^.1
"^DD",355.97,355.97,.01,1,1,0)
355.97^B
"^DD",355.97,355.97,.01,1,1,1)
S ^IBE(355.97,"B",$E(X,1,30),DA)=""
"^DD",355.97,355.97,.01,1,1,2)
K ^IBE(355.97,"B",$E(X,1,30),DA)
"^DD",355.97,355.97,.01,3)
Answer must be 3-30 characters in length.
"^DD",355.97,355.97,.01,21,0)
^^1^1^3010724^
"^DD",355.97,355.97,.01,21,1,0)
This is the name used to describe the provider id type.
"^DD",355.97,355.97,.01,"DT")
3010724
"^DD",355.97,355.97,.02,0)
SOURCE LEVEL MINIMUM^RS^0:NONE;1:LICENSING/GOVT AGENCY - EACH PROV;2:FACILITY - ALL PROV;3:INSURANCE CO - ALL PROV;4:INSURANCE CO - EACH PROV;5:INSURANCE CO - ALL PROV BY CARE UNIT;^0;2^Q
"^DD",355.97,355.97,.02,3)
Enter the code that describes how this id type MUST be assigned or 0 for NO minimum requirements
"^DD",355.97,355.97,.02,21,0)
^.001^4^4^3031217^^^^
"^DD",355.97,355.97,.02,21,1,0)
This is the minimum level or criteria of data that MUST be used to search
"^DD",355.97,355.97,.02,21,2,0)
for this type of ID number for a provider.  If this field is zero or
"^DD",355.97,355.97,.02,21,3,0)
blank, there are no minimum data requirements to search for an ID for
"^DD",355.97,355.97,.02,21,4,0)
this id type.
"^DD",355.97,355.97,.02,"DT")
3031217
"^DD",355.97,355.97,.03,0)
X12 CODE^F^^0;3^K:$L(X)>2!($L(X)<1) X
"^DD",355.97,355.97,.03,3)
Answer must be 1-2 characters in length.
"^DD",355.97,355.97,.03,21,0)
^^2^2^3000831^
"^DD",355.97,355.97,.03,21,1,0)
This is the X12 code that determines the qualifier to be output in the
"^DD",355.97,355.97,.03,21,2,0)
X12 data stream when reporting this type of provider ID number.
"^DD",355.97,355.97,.03,"DT")
3030728
"^DD",355.97,355.97,.04,0)
FACILITY'S DEFAULT ID #^F^^0;4^K:$L(X)>15!($L(X)<1) X
"^DD",355.97,355.97,.04,3)
Answer must be 1-15 characters in length.
"^DD",355.97,355.97,.04,21,0)
^.001^3^3^3001004^^^
"^DD",355.97,355.97,.04,21,1,0)
This is the number that will be the default for all providers for the
"^DD",355.97,355.97,.04,21,2,0)
id type at the facility if no number exists for the specific
"^DD",355.97,355.97,.04,21,3,0)
provider/ins. co/care unit combination.
"^DD",355.97,355.97,.04,"DT")
3000907
"^DD",355.97,355.97,.05,0)
RESTRICT EDITING^S^0:NO;1:YES;^0;5^Q
"^DD",355.97,355.97,.05,3)
Enter 1 (YES) to prevent users from editing this id type's id #'s at the facility level
"^DD",355.97,355.97,.05,21,0)
^.001^2^2^3010207^^
"^DD",355.97,355.97,.05,21,1,0)
This field controls whether or not users may edit the id #'s for the
"^DD",355.97,355.97,.05,21,2,0)
provider type at the facility level.
"^DD",355.97,355.97,.05,"DT")
3010207
"^DD",355.97,355.97,.06,0)
VALID FOR PERFORMING PROVIDER^S^0:NO;1:YES;^0;6^Q
"^DD",355.97,355.97,.06,3)
ENTER YES (1) IF THE ID TYPE IS VALID FOR PERFORMING ID
"^DD",355.97,355.97,.06,21,0)
^^2^2^3010509^
"^DD",355.97,355.97,.06,21,1,0)
This field indicates whether the id type is valid for performing
"^DD",355.97,355.97,.06,21,2,0)
provider ids.
"^DD",355.97,355.97,.06,"DT")
3010509
"^DD",355.97,355.97,1.01,0)
STATE DEA#^SI^0:NO;1:YES;^1;1^Q
"^DD",355.97,355.97,1.01,3)
Enter a 1 (yes) if this is a state DEA # id type
"^DD",355.97,355.97,1.01,21,0)
^^2^2^3000907^
"^DD",355.97,355.97,1.01,21,1,0)
This is the flag that tells the system this id type is a state DEA # and
"^DD",355.97,355.97,1.01,21,2,0)
the data is stored in the NEW PERSON file by state.
"^DD",355.97,355.97,1.01,"DT")
3000907
"^DD",355.97,355.97,1.02,0)
FEDERAL DEA#^SI^0:NO;1:YES;^1;2^Q
"^DD",355.97,355.97,1.02,3)
Enter a 1 (yes) if this is a federal DEA # id type
"^DD",355.97,355.97,1.02,21,0)
^.001^2^2^3010108^^^
"^DD",355.97,355.97,1.02,21,1,0)
This is the flag that tells the system this id type is a federal DEA #
"^DD",355.97,355.97,1.02,21,2,0)
and the data is stored in the NEW PERSON file.             
"^DD",355.97,355.97,1.02,"DT")
3010108
"^DD",355.97,355.97,1.03,0)
STATE LICENSE #^SI^0:NO;1:YES;^1;3^Q
"^DD",355.97,355.97,1.03,3)
Enter a 1 (yes) if this is a state license # id type
"^DD",355.97,355.97,1.03,21,0)
^^2^2^3000907^
"^DD",355.97,355.97,1.03,21,1,0)
This is the flag that tells the system this id type is a state license #
"^DD",355.97,355.97,1.03,21,2,0)
and the data is stored in the NEW PERSON file by state.             
"^DD",355.97,355.97,1.03,"DT")
3000907
"^DD",355.97,355.97,1.04,0)
FEDERAL TAX # - FACILITY^SI^0:NO;1:YES;^1;4^Q
"^DD",355.97,355.97,1.04,3)
Enter a 1 (yes) if this is a facility federal tax id # id type
"^DD",355.97,355.97,1.04,21,0)
^.001^2^2^3001004^^
"^DD",355.97,355.97,1.04,21,1,0)
This is the flag that tells the system this id type is a facility
"^DD",355.97,355.97,1.04,21,2,0)
federal tax id and the data is stored in the IB SITE PARAMETERS file.
"^DD",355.97,355.97,1.04,"DT")
3000907
"^DD",355.97,355.97,1.05,0)
EMC ID TYPE^S^0:NO;1:YES;^1;5^Q
"^DD",355.97,355.97,1.05,3)
Enter yes if this type is for EMC ID #
"^DD",355.97,355.97,1.05,21,0)
^^1^1^3000913^
"^DD",355.97,355.97,1.05,21,1,0)
This is a flag to indicate if the record is for an EMC ID #
"^DD",355.97,355.97,1.05,"DT")
3000913
"^DD",355.97,355.97,1.06,0)
NETWORK ID TYPE^S^0:NO;1:YES;^1;6^Q
"^DD",355.97,355.97,1.06,3)
Enter yes if this type is for Network ID #
"^DD",355.97,355.97,1.06,21,0)
^^1^1^3000913^
"^DD",355.97,355.97,1.06,21,1,0)
This is a flag to indicate if the record is for a network id #.
"^DD",355.97,355.97,1.06,"DT")
3000913
"^DD",355.97,355.97,1.07,0)
PROVIDER'S OWN ID^S^0:NO;1:YES;^1;7^Q
"^DD",355.97,355.97,1.07,3)
ENTER YES (1) IF THE ID IS A PROVIDER'S PERSONAL #
"^DD",355.97,355.97,1.07,21,0)
^^2^2^3010427^
"^DD",355.97,355.97,1.07,21,1,0)
This is the flag that designates an id type is a personal # for the
"^DD",355.97,355.97,1.07,21,2,0)
provider, not assigned by the facility or an insurance co
"^DD",355.97,355.97,1.07,"DT")
3010427
"^DD",355.97,355.97,1.08,0)
STORED OUTSIDE OF BILLING^S^0:NO;1:YES;^1;8^Q
"^DD",355.97,355.97,1.08,3)
ENTER 1 IF THIS PROVIDER ID DATA IS NOT STORED IN IB FILES
"^DD",355.97,355.97,1.08,21,0)
^^2^2^3010427^
"^DD",355.97,355.97,1.08,21,1,0)
This is the flag that specifies the provider id data is not stored in an
"^DD",355.97,355.97,1.08,21,2,0)
IB file.
"^DD",355.97,355.97,1.08,"DT")
3010427
"^DD",355.97,355.97,1.09,0)
BILLING PROVIDER PRIMARY ID^S^0:NO;1:YES;^1;9^Q
"^DD",355.97,355.97,1.09,3)
Enter a 1 if this is the billing provider's primary id record
"^DD",355.97,355.97,1.09,21,0)
^^2^2^3040611^
"^DD",355.97,355.97,1.09,21,1,0)
This field is a 1 (YES) if this is the provider id type that represents
"^DD",355.97,355.97,1.09,21,2,0)
the billing provider's primary id.
"^DD",355.97,355.97,1.09,"DT")
3040611
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)
 
"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")
 
"^DD",364.5,364.5,0,"PT",364.7,.03)
 
"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.04^1
"^DD",364.5,364.5,.06,5,2,0)
364.5^.03^2
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")
 
"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3000216
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)
 
"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)
 
"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)
 
"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)
 
"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)
 
"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)
 
"^DD",364.6,364.6,0,"IX","B",364.6,.01)
 
"^DD",364.6,364.6,0,"IX","C",364.6,.1)
 
"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)
 
"^DD",364.6,364.6,0,"PT",364.7,.01)
 
"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>30!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1
"^DD",364.6,364.6,.1,1,1,0)
364.6^C
"^DD",364.6,364.6,.1,1,1,1)
S ^IBA(364.6,"C",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.1,1,1,2)
K ^IBA(364.6,"C",$E(X,1,30),DA)
"^DD",364.6,364.6,.1,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.1,1,1,"%D",0)
^^1^1^2960123^
"^DD",364.6,364.6,.1,1,1,"%D",1,0)
Field name lookup
"^DD",364.6,364.6,.1,1,1,"DT")
2960123
"^DD",364.6,364.6,.1,3)
Answer must be 1-30 characters in length.
"^DD",364.6,364.6,.1,21,0)
^^2^2^2951207^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
2960123
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)
 
"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)
 
"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)
 
"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)
 
"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)
 
"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)
 
"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)
 
"^DD",364.7,364.7,0,"IX","B",364.7,.01)
 
"^DD",364.7,364.7,0,"IX","C",364.7,.03)
 
"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DD",399,399,.22,0)
DEFAULT DIVISION^P40.8'^DG(40.8,^0;22^Q
"^DD",399,399,.22,1,0)
^.1
"^DD",399,399,.22,1,1,0)
^^TRIGGER^399^122
"^DD",399,399,.22,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,"",1) X ^DD(399,.22,1,1,1.4)
"^DD",399,399,.22,1,1,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,2)=DIV,DIH=399,DIG=122 D ^DICR
"^DD",399,399,.22,1,1,2)
Q
"^DD",399,399,.22,1,1,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,"",1)
"^DD",399,399,.22,1,1,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.22,1,1,"FIELD")
PRIMARY PROVIDER #
"^DD",399,399,.22,1,2,0)
^^TRIGGER^399^123
"^DD",399,399,.22,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,"",2) X ^DD(399,.22,1,2,1.4)
"^DD",399,399,.22,1,2,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,3)=DIV,DIH=399,DIG=123 D ^DICR
"^DD",399,399,.22,1,2,2)
Q
"^DD",399,399,.22,1,2,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,"",2)
"^DD",399,399,.22,1,2,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.22,1,2,"DT")
3040611
"^DD",399,399,.22,1,2,"FIELD")
SECONDARY PROVIDER #
"^DD",399,399,.22,1,3,0)
^^TRIGGER^399^124
"^DD",399,399,.22,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,"",3) X ^DD(399,.22,1,3,1.4)
"^DD",399,399,.22,1,3,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,4)=DIV,DIH=399,DIG=124 D ^DICR
"^DD",399,399,.22,1,3,2)
Q
"^DD",399,399,.22,1,3,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,"",3)
"^DD",399,399,.22,1,3,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.22,1,3,"DT")
3040611
"^DD",399,399,.22,1,3,"FIELD")
TERTIARY PROVIDER #
"^DD",399,399,.22,3)
Enter the default division that should be used in charge calculations.
"^DD",399,399,.22,21,0)
^^2^2^2960724^
"^DD",399,399,.22,21,1,0)
For rates specific to a division, this division will be used to
"^DD",399,399,.22,21,2,0)
determine the charges for all CPT's that do not have a division specified.
"^DD",399,399,.22,"DT")
3040611
"^DD",399,399,101,0)
PRIMARY INSURANCE CARRIER^R*P36'X^DIC(36,^M;1^D DD^IBCNS S DIC("S")="I $D(IBDD(+Y)),'$D(^DGCR(399,DA,""AIC"",+Y))" D ^DIC K DIC,IBDD S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,101,1,0)
^.1^^-1
"^DD",399,399,101,1,1,0)
^^TRIGGER^399^122
"^DD",399,399,101,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,X,1) X ^DD(399,101,1,1,1.4)
"^DD",399,399,101,1,1,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,2)=DIV,DIH=399,DIG=122 D ^DICR
"^DD",399,399,101,1,1,2)
Q
"^DD",399,399,101,1,1,3)
Do Not Delete
"^DD",399,399,101,1,1,"%D",0)
^.101^3^3^3020819^^
"^DD",399,399,101,1,1,"%D",1,0)
This trigger sets the Bill Primary Provider # based on the Form Type,  
"^DD",399,399,101,1,1,"%D",2,0)
using the Primary Insurance Companies Hospital or Professional Provider 
"^DD",399,399,101,1,1,"%D",3,0)
Number.  Special case for Medicare Part A.
"^DD",399,399,101,1,1,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,X,1)
"^DD",399,399,101,1,1,"DELETE VALUE")
NO EFFECT
"^DD",399,399,101,1,1,"DT")
3020819
"^DD",399,399,101,1,1,"FIELD")
PRIMARY PROVIDER #
"^DD",399,399,101,1,2,0)
^^TRIGGER^399^24
"^DD",399,399,101,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X I $$COBN^IBCEF(DA)=1 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y X ^DD(399,101,1,2,1.1) X ^DD(399,101,1,2,1.4)
"^DD",399,399,101,1,2,1.1)
S X=DIV S X=$S($$REQMRA^IBEFUNC(DA):"1N",1:"")
"^DD",399,399,101,1,2,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"TX")):^("TX"),1:""),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,101,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X I $$COBN^IBCEF(DA)=1 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399,101,1,2,2.4)
"^DD",399,399,101,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"TX")):^("TX"),1:""),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,101,1,2,3)
DO NOT DELETE
"^DD",399,399,101,1,2,"%D",0)
^^2^2^2990628^
"^DD",399,399,101,1,2,"%D",1,0)
This triggers the CLAIM MRA STATUS to 'MRA NEEDED' (1N) if the primary
"^DD",399,399,101,1,2,"%D",2,0)
insurance is the current insurance and the current insurance = MEDICARE WNR.
"^DD",399,399,101,1,2,"CREATE CONDITION")
I $$COBN^IBCEF(DA)=1
"^DD",399,399,101,1,2,"CREATE VALUE")
S X=$S($$REQMRA^IBEFUNC(DA):"1N",1:"")
"^DD",399,399,101,1,2,"DELETE CONDITION")
I $$COBN^IBCEF(DA)=1
"^DD",399,399,101,1,2,"DELETE VALUE")
@
"^DD",399,399,101,1,2,"DT")
2990628
"^DD",399,399,101,1,2,"FIELD")
CLAIM MRA STATUS
"^DD",399,399,101,3)
Enter name of insurance carrier to which this bill is to be sent.
"^DD",399,399,101,5,1,0)
399^112^1
"^DD",399,399,101,12)
Only valid insurance companies for this date of care.
"^DD",399,399,101,12.1)
S DIC("S")="I $D(IBDD(+Y)),'$D(^DGCR(399,DA,""AIC"",+Y))"
"^DD",399,399,101,21,0)
^^2^2^2990503^^^^
"^DD",399,399,101,21,1,0)
This is the name of the insurance carrier to which this bill is to be sent.
"^DD",399,399,101,21,2,0)
This is from the entries in this patient's file of insurance companies. 
"^DD",399,399,101,23,0)
^^3^3^2990503^^^
"^DD",399,399,101,23,1,0)
Only valid/active insurance companies for this patient can be choosen,
"^DD",399,399,101,23,2,0)
as defined by DD^IBCNS.  Company must not already be defined as a carrier 
"^DD",399,399,101,23,3,0)
(399,102-103) for this bill.
"^DD",399,399,101,"DT")
3020819
"^DD",399,399,102,0)
SECONDARY INSURANCE CARRIER^*P36'X^DIC(36,^M;2^D ^DIC K DIC,IBDD S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,102,1,0)
^.1^^-1
"^DD",399,399,102,1,1,0)
399^AI2^MUMPS
"^DD",399,399,102,1,1,1)
Q
"^DD",399,399,102,1,1,2)
Q
"^DD",399,399,102,1,1,"DT")
2931220
"^DD",399,399,102,1,2,0)
^^TRIGGER^399^123
"^DD",399,399,102,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,X,2) X ^DD(399,102,1,2,1.4)
"^DD",399,399,102,1,2,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,3)=DIV,DIH=399,DIG=123 D ^DICR
"^DD",399,399,102,1,2,2)
Q
"^DD",399,399,102,1,2,3)
Do Not Delete
"^DD",399,399,102,1,2,"%D",0)
^^3^3^3020819^
"^DD",399,399,102,1,2,"%D",1,0)
This trigger sets the Bill Secondary Provider # based on the Form Type,  
"^DD",399,399,102,1,2,"%D",2,0)
using the Secondary Insurance Companies Hospital or Professional Provider 
"^DD",399,399,102,1,2,"%D",3,0)
Number.  Special case for Medicare Part A.
"^DD",399,399,102,1,2,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,X,2)
"^DD",399,399,102,1,2,"DELETE VALUE")
NO EFFECT
"^DD",399,399,102,1,2,"DT")
3020819
"^DD",399,399,102,1,2,"FIELD")
SECONDARY PROVIDER 
"^DD",399,399,102,1,3,0)
^^TRIGGER^399^24
"^DD",399,399,102,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X I $$COBN^IBCEF(DA)=2 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y X ^DD(399,102,1,3,1.1) X ^DD(399,102,1,3,1.4)
"^DD",399,399,102,1,3,1.1)
S X=DIV S X=$S($$REQMRA^IBEFUNC(DA):"1N",1:"")
"^DD",399,399,102,1,3,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"TX")):^("TX"),1:""),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,102,1,3,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X I $$COBN^IBCEF(DA)=2 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399,102,1,3,2.4)
"^DD",399,399,102,1,3,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"TX")):^("TX"),1:""),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,102,1,3,3)
DO NOT DELETE
"^DD",399,399,102,1,3,"%D",0)
^^3^3^2990628^
"^DD",399,399,102,1,3,"%D",1,0)
This trigger forces the CLAIM MRA STATUS field to be set appropriately if
"^DD",399,399,102,1,3,"%D",2,0)
the current insurance is the secondary insurance company and it will require
"^DD",399,399,102,1,3,"%D",3,0)
an MRA request.
"^DD",399,399,102,1,3,"CREATE CONDITION")
I $$COBN^IBCEF(DA)=2
"^DD",399,399,102,1,3,"CREATE VALUE")
S X=$S($$REQMRA^IBEFUNC(DA):"1N",1:"")
"^DD",399,399,102,1,3,"DELETE CONDITION")
I $$COBN^IBCEF(DA)=2
"^DD",399,399,102,1,3,"DELETE VALUE")
@
"^DD",399,399,102,1,3,"DT")
2990628
"^DD",399,399,102,1,3,"FIELD")
CLAIM MRA STATUS
"^DD",399,399,102,3)
Enter name of secondary insurance carrier from which the provider might expect some payment for this bill.
"^DD",399,399,102,5,1,0)
399^113^1
"^DD",399,399,102,12)
Only valid insurance companies for this date of care.
"^DD",399,399,102,12.1)
S DIC("S")="I $D(IBDD(+Y)),'$D(^DGCR(399,DA,""AIC"",+Y))"
"^DD",399,399,102,21,0)
^^2^2^2880831^
"^DD",399,399,102,21,1,0)
This is the name of the secondary insurance carrier from which the provider
"^DD",399,399,102,21,2,0)
might expect some payment for this bill.
"^DD",399,399,102,"DT")
3020819
"^DD",399,399,103,0)
TERTIARY INSURANCE CARRIER^*P36'X^DIC(36,^M;3^D ^DIC K DIC,IBDD S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,103,1,0)
^.1^^-1
"^DD",399,399,103,1,1,0)
399^AI3^MUMPS
"^DD",399,399,103,1,1,1)
Q
"^DD",399,399,103,1,1,2)
Q
"^DD",399,399,103,1,1,"DT")
2931220
"^DD",399,399,103,1,2,0)
^^TRIGGER^399^124
"^DD",399,399,103,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=$$PRVNUM^IBCU(DA,X,3) X ^DD(399,103,1,2,1.4)
"^DD",399,399,103,1,2,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,4)=DIV,DIH=399,DIG=124 D ^DICR
"^DD",399,399,103,1,2,2)
Q
"^DD",399,399,103,1,2,3)
Do Not Delete
"^DD",399,399,103,1,2,"%D",0)
^^3^3^3020819^
"^DD",399,399,103,1,2,"%D",1,0)
This trigger sets the Bill Tertiary Provider # based on the Form Type,  
"^DD",399,399,103,1,2,"%D",2,0)
using the Tertiary Insurance Companies Hospital or Professional Provider 
"^DD",399,399,103,1,2,"%D",3,0)
Number.  Special case for Medicare Part A.
"^DD",399,399,103,1,2,"CREATE VALUE")
S X=$$PRVNUM^IBCU(DA,X,3)
"^DD",399,399,103,1,2,"DELETE VALUE")
NO EFFECT
"^DD",399,399,103,1,2,"DT")
3020819
"^DD",399,399,103,1,2,"FIELD")
TERTIARY PROVIDER
"^DD",399,399,103,3)
Enter name of tertiary insurance carrier from which the provider might expect some payment for this bill.
"^DD",399,399,103,5,1,0)
399^114^1
"^DD",399,399,103,12)
Only valid insurance companies for this date of care.
"^DD",399,399,103,12.1)
S DIC("S")="I $D(IBDD(+Y)),'$D(^DGCR(399,DA,""AIC"",+Y))"
"^DD",399,399,103,21,0)
^^2^2^2880831^
"^DD",399,399,103,21,1,0)
This is the name of the tertiary insurance carrier from which the provider
"^DD",399,399,103,21,2,0)
might expect some payment for this bill.
"^DD",399,399,103,"DT")
3020819
"^DD",399,399,222,0)
PROVIDER^399.0222ISA^^PRV;0
"^DD",399,399,222,12)
Rendering is for prof only.  Operating/Attending are for inst only.
"^DD",399,399,222,12.1)
S DIC("S")="I $$PRVOK^IBCEU(+Y,$S($D(D0):D0,1:$G(DA)))"
"^DD",399,399,222,"DT")
3010426
"^DD",399,399,232,0)
NON-VA FACILITY^*P355.93X^IBA(355.93,^U2;10^S DIC("S")="I $P(^(0),U,2)=1,$P(^(0),U)'["",""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,232,1,0)
^.1
"^DD",399,399,232,1,1,0)
^^TRIGGER^399^234
"^DD",399,399,232,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y X ^DD(399,232,1,1,1.1) X ^DD(399,232,1,1,1.4)
"^DD",399,399,232,1,1,1.1)
S X=DIV S I(0,0)=$S($D(D0):D0,1:""),D0=DIV S:'$D(^IBA(355.93,+D0,0)) D0=-1 S Y(101)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(101),U,9) S D0=I(0,0)
"^DD",399,399,232,1,1,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,12)=DIV,DIH=399,DIG=234 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" X ^DD(399,232,1,1,2.4)
"^DD",399,399,232,1,1,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,12)=DIV,DIH=399,DIG=234 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,1,"CREATE VALUE")
NON-VA FACILITY:FACILITY DEFAULT ID NUMBER
"^DD",399,399,232,1,1,"DELETE VALUE")
@
"^DD",399,399,232,1,1,"DT")
3010102
"^DD",399,399,232,1,1,"FIELD")
NON-VA CARE ID #
"^DD",399,399,232,1,2,0)
^^TRIGGER^399^233
"^DD",399,399,232,1,2,1)
Q
"^DD",399,399,232,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" X ^DD(399,232,1,2,2.4)
"^DD",399,399,232,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,11)=DIV,DIH=399,DIG=233 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,2,3)
Do not delete
"^DD",399,399,232,1,2,"%D",0)
^^2^2^3010110^
"^DD",399,399,232,1,2,"%D",1,0)
This cross reference deletes the NON-VA CARE TYPE field when the NON-VA
"^DD",399,399,232,1,2,"%D",2,0)
Facility value is deleted.
"^DD",399,399,232,1,2,"CREATE VALUE")
NO EFFECT
"^DD",399,399,232,1,2,"DELETE VALUE")
@
"^DD",399,399,232,1,2,"DT")
3010110
"^DD",399,399,232,1,2,"FIELD")
NON-VA CARE TYPE
"^DD",399,399,232,3)
Enter the non-VA/other VA facility where care was given.  Facility name cannot contain a comma.
"^DD",399,399,232,12)
Must be a facility provider type entry without a comma in the name
"^DD",399,399,232,12.1)
S DIC("S")="I $P(^(0),U,2)=1,$P(^(0),U)'["","""
"^DD",399,399,232,21,0)
^.001^2^2^3030807^^^^
"^DD",399,399,232,21,1,0)
The is the name of the non-VA or outside VA facility where the services
"^DD",399,399,232,21,2,0)
were rendered.
"^DD",399,399,232,"DT")
3010530
"^DD",399,399.0222,0)
PROVIDER SUB-FIELD^^.14^17
"^DD",399,399.0222,0,"NM","PROVIDER")
 
"^DD",399,399.0222,.01,0)
FUNCTION^MR*S^1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;9:OTHER;^0;1^Q
"^DD",399,399.0222,.01,1,0)
^.1
"^DD",399,399.0222,.01,1,1,0)
399.0222^B
"^DD",399,399.0222,.01,1,1,1)
S ^DGCR(399,DA(1),"PRV","B",$E(X,1,30),DA)=""
"^DD",399,399.0222,.01,1,1,2)
K ^DGCR(399,DA(1),"PRV","B",$E(X,1,30),DA)
"^DD",399,399.0222,.01,1,1,"DT")
3000103
"^DD",399,399.0222,.01,1,2,0)
^^TRIGGER^399.0222^.04
"^DD",399,399.0222,.01,1,2,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=Y(0),X=X S X=X'=1 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0222,.01,1,2,1.4)
"^DD",399,399.0222,.01,1,2,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0222,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.01,1,2,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0222,.01,1,2,2.4)
"^DD",399,399.0222,.01,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0222,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.01,1,2,3)
Do not delete
"^DD",399,399.0222,.01,1,2,"%D",0)
^^2^2^3000103^^
"^DD",399,399.0222,.01,1,2,"%D",1,0)
This xref is used to delete the state field if the provider is not a
"^DD",399,399.0222,.01,1,2,"%D",2,0)
referring provider function type.
"^DD",399,399.0222,.01,1,2,"CREATE CONDITION")
INTERNAL(PROVIDER FUNCTION)'=1
"^DD",399,399.0222,.01,1,2,"CREATE VALUE")
@
"^DD",399,399.0222,.01,1,2,"DELETE VALUE")
@
"^DD",399,399.0222,.01,1,2,"DT")
2990513
"^DD",399,399.0222,.01,1,2,"FIELD")
PROVIDER STATE
"^DD",399,399.0222,.01,1,3,0)
399.0222^C^MUMPS
"^DD",399,399.0222,.01,1,3,1)
S ^DGCR(399,DA(1),"PRV","C",$E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30),DA)=""
"^DD",399,399.0222,.01,1,3,2)
K ^DGCR(399,DA(1),"PRV","C",$E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30),DA)
"^DD",399,399.0222,.01,1,3,"DT")
2991221
"^DD",399,399.0222,.01,1,4,0)
399.0222^CA^MUMPS
"^DD",399,399.0222,.01,1,4,1)
S ^DGCR(399,DA(1),"PRV","C",$$LOW^XLFSTR($E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30)),DA)=""
"^DD",399,399.0222,.01,1,4,2)
K ^DGCR(399,DA(1),"PRV","C",$$LOW^XLFSTR($E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30)),DA)
"^DD",399,399.0222,.01,1,4,"DT")
3000329
"^DD",399,399.0222,.01,3)
Select the function performed by a provider for this bill
"^DD",399,399.0222,.01,4)
D PRVHELP^IBCEU5
"^DD",399,399.0222,.01,12)
Function must match bill form type.  Use '??' to see the function definitions.  Attending and rendering cannot exist on the same bill.
"^DD",399,399.0222,.01,12.1)
S DIC("S")="I $$PRVOK^IBCEU(+Y,$S($G(D0):D0,1:$G(DA))),$$PRVOK1^IBCEU(+Y,$S($G(D0):D0,1:$G(DA)))"
"^DD",399,399.0222,.01,21,0)
75^.001^6^6^3040617^^^^
"^DD",399,399.0222,.01,21,1,0)
There are providers who performed specific functions for the services on
"^DD",399,399.0222,.01,21,2,0)
this bill.  These providers are needed to enable the V.A. to collect
"^DD",399,399.0222,.01,21,3,0)
reimbursement when more than one provider function is involved in the
"^DD",399,399.0222,.01,21,4,0)
billable episode (like an operating physician or referring provider). This
"^DD",399,399.0222,.01,21,5,0)
data identifies the type of function that was performed by a provider.
"^DD",399,399.0222,.01,21,6,0)
There can only be 1 provider recorded for each function on a claim.
"^DD",399,399.0222,.01,"DT")
3040617
"^DD",399,399.0222,.02,0)
PERFORMED BY^V^^0;2^Q
"^DD",399,399.0222,.02,1,0)
^.1
"^DD",399,399.0222,.02,1,1,0)
^^TRIGGER^399.0222^.05
"^DD",399,399.0222,.02,1,1,1)
X ^DD(399.0222,.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,1,1.4)
"^DD",399,399.0222,.02,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,5)="SLF000"
"^DD",399,399.0222,.02,1,1,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=399.0222,DIG=.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.02,1,1,2)
Q
"^DD",399,399.0222,.02,1,1,3)
Do not delete
"^DD",399,399.0222,.02,1,1,"%D",0)
^.101^2^2^3040526^^
"^DD",399,399.0222,.02,1,1,"%D",1,0)
This cross reference deletes any SLF000 id in the primary insurance id if
"^DD",399,399.0222,.02,1,1,"%D",2,0)
a provider name is entered.
"^DD",399,399.0222,.02,1,1,"CREATE CONDITION")
PRIMARY INS CO ID NUMBER="SLF000"
"^DD",399,399.0222,.02,1,1,"CREATE VALUE")
@
"^DD",399,399.0222,.02,1,1,"DELETE VALUE")
NO EFFECT
"^DD",399,399.0222,.02,1,1,"DT")
3000330
"^DD",399,399.0222,.02,1,1,"FIELD")
PRIMARY INS CO ID NUMBER
"^DD",399,399.0222,.02,1,2,0)
^^TRIGGER^399.0222^.03
"^DD",399,399.0222,.02,1,2,1)
X ^DD(399.0222,.02,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$$EXTCR^IBCEU5(X) X ^DD(399.0222,.02,1,2,1.4)
"^DD",399,399.0222,.02,1,2,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(2)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:""),Y=Y(0) X:$D(^DD(399.0222,.02,2)) ^(2) S X=Y'["*",Y(1)=X S X=$P(Y(2),U,3)="",Y=X,X=Y(1),X=X&Y
"^DD",399,399.0222,.02,1,2,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,3)=DIV,DIH=399.0222,DIG=.03 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.02,1,2,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,2,2.4)
"^DD",399,399.0222,.02,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,3)=DIV,DIH=399.0222,DIG=.03 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.02,1,2,3)
Do not delete
"^DD",399,399.0222,.02,1,2,"%D",0)
^.101^4^4^3000926^^
"^DD",399,399.0222,.02,1,2,"%D",1,0)
This trigger will force the CREDENTIALS field of the provider multiple to be
"^DD",399,399.0222,.02,1,2,"%D",2,0)
set to the first 3 characters of the provider's degree if the credentials
"^DD",399,399.0222,.02,1,2,"%D",3,0)
don't already exist.
"^DD",399,399.0222,.02,1,2,"CREATE CONDITION")
CREDENTIALS=""
"^DD",399,399.0222,.02,1,2,"CREATE VALUE")
S X=$$EXTCR^IBCEU5(X)
"^DD",399,399.0222,.02,1,2,"DELETE VALUE")
@
"^DD",399,399.0222,.02,1,2,"DT")
3000405
"^DD",399,399.0222,.02,1,2,"FIELD")
CREDENTIALS
"^DD",399,399.0222,.02,1,3,0)
^^TRIGGER^399.0222^.08
"^DD",399,399.0222,.02,1,3,1)
X ^DD(399.0222,.02,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X=DIV S X=$$SPEC^IBCEU(X) X ^DD(399.0222,.02,1,3,1.4)
"^DD",399,399.0222,.02,1,3,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,8)=""
"^DD",399,399.0222,.02,1,3,1.4)
S DIH=$G(^DGCR(399,DIV(0),"PRV",DIV(1),0)),DIV=X S $P(^(0),U,8)=DIV,DIH=399.0222,DIG=.08 D ^DICR
"^DD",399,399.0222,.02,1,3,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,3,2.4)
"^DD",399,399.0222,.02,1,3,2.4)
S DIH=$G(^DGCR(399,DIV(0),"PRV",DIV(1),0)),DIV=X S $P(^(0),U,8)=DIV,DIH=399.0222,DIG=.08 D ^DICR
"^DD",399,399.0222,.02,1,3,3)
Do not delete
"^DD",399,399.0222,.02,1,3,"%D",0)
^^2^2^3001018^
"^DD",399,399.0222,.02,1,3,"%D",1,0)
This trigger will force the SPECIALTY field of the provider multiple to be
"^DD",399,399.0222,.02,1,3,"%D",2,0)
set to the current specialty of the provider.
"^DD",399,399.0222,.02,1,3,"CREATE CONDITION")
SPECIALTY=""
"^DD",399,399.0222,.02,1,3,"CREATE VALUE")
S X=$$SPEC^IBCEU(X)
"^DD",399,399.0222,.02,1,3,"DELETE VALUE")
@
"^DD",399,399.0222,.02,1,3,"DT")
3001018
"^DD",399,399.0222,.02,1,3,"FIELD")
SPECIALTY
"^DD",399,399.0222,.02,1,4,0)
^^TRIGGER^399.0222^.05
"^DD",399,399.0222,.02,1,4,1)
Q
"^DD",399,399.0222,.02,1,4,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,4,2.4)
"^DD",399,399.0222,.02,1,4,2.4)
S DIH=$G(^DGCR(399,DIV(0),"PRV",DIV(1),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=399.0222,DIG=.05 D ^DICR
"^DD",399,399.0222,.02,1,4,3)
Do not delete
"^DD",399,399.0222,.02,1,4,"%D",0)
^^2^2^3040526^
"^DD",399,399.0222,.02,1,4,"%D",1,0)
This xref deletes the PRIMARY INS CO ID NUMBER when the provider is
"^DD",399,399.0222,.02,1,4,"%D",2,0)
changed.
"^DD",399,399.0222,.02,1,4,"CREATE VALUE")
NO EFFECT
"^DD",399,399.0222,.02,1,4,"DELETE VALUE")
@
"^DD",399,399.0222,.02,1,4,"DT")
3040526
"^DD",399,399.0222,.02,1,4,"FIELD")
PRIMARY INS CO ID NUMBER
"^DD",399,399.0222,.02,1,5,0)
^^TRIGGER^399.0222^.06
"^DD",399,399.0222,.02,1,5,1)
Q
"^DD",399,399.0222,.02,1,5,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,5,2.4)
"^DD",399,399.0222,.02,1,5,2.4)
S DIH=$G(^DGCR(399,DIV(0),"PRV",DIV(1),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=399.0222,DIG=.06 D ^DICR
"^DD",399,399.0222,.02,1,5,3)
Do not delete
"^DD",399,399.0222,.02,1,5,"%D",0)
^^2^2^3040526^
"^DD",399,399.0222,.02,1,5,"%D",1,0)
This xref deletes the SECONDARY INS CO ID NUMBER when the provider is
"^DD",399,399.0222,.02,1,5,"%D",2,0)
changed.
"^DD",399,399.0222,.02,1,5,"CREATE VALUE")
NO EFFECT
"^DD",399,399.0222,.02,1,5,"DELETE VALUE")
@
"^DD",399,399.0222,.02,1,5,"DT")
3040526
"^DD",399,399.0222,.02,1,5,"FIELD")
SECONDARY INS CO ID NUMBER
"^DD",399,399.0222,.02,1,6,0)
^^TRIGGER^399.0222^.07
"^DD",399,399.0222,.02,1,6,1)
Q
"^DD",399,399.0222,.02,1,6,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(399.0222,.02,1,6,2.4)
"^DD",399,399.0222,.02,1,6,2.4)
S DIH=$G(^DGCR(399,DIV(0),"PRV",DIV(1),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=399.0222,DIG=.07 D ^DICR
"^DD",399,399.0222,.02,1,6,3)
Do not delete
"^DD",399,399.0222,.02,1,6,"%D",0)
^^2^2^3040526^
"^DD",399,399.0222,.02,1,6,"%D",1,0)
This xref deletes the TERTIARY INS CO ID NUMBER when the provider is
"^DD",399,399.0222,.02,1,6,"%D",2,0)
changed.
"^DD",399,399.0222,.02,1,6,"CREATE VALUE")
NO EFFECT
"^DD",399,399.0222,.02,1,6,"DELETE VALUE")
@
"^DD",399,399.0222,.02,1,6,"DT")
3040526
"^DD",399,399.0222,.02,1,6,"FIELD")
TERTIARY INS CO ID NUMBER
"^DD",399,399.0222,.02,3)
Enter the name of the provider who performed the indicated function
"^DD",399,399.0222,.02,4)
 
"^DD",399,399.0222,.02,5,1,0)
399.0222^.05^1
"^DD",399,399.0222,.02,21,0)
^.001^2^2^3040521^^^^
"^DD",399,399.0222,.02,21,1,0)
Providers may be VA providers found in the VistA NEW PERSON file or
"^DD",399,399.0222,.02,21,2,0)
NON-VA providers found in the IB NON VA BILLING PROVIDER file.
"^DD",399,399.0222,.02,"DT")
3040526
"^DD",399,399.0222,.02,"V",0)
^.12P^2^2
"^DD",399,399.0222,.02,"V",1,0)
200^VistA identified provider^1^VA^y^n
"^DD",399,399.0222,.02,"V",1,1)
S DIC("S")="I $O(^(""USC1"",0))"
"^DD",399,399.0222,.02,"V",1,2)
VistA provider must have a person class defined
"^DD",399,399.0222,.02,"V",2,0)
355.93^Non-VA provider^2^NVA^y^y
"^DD",399,399.0222,.02,"V",2,1)
S DIC("S")="I 1"
"^DD",399,399.0222,.02,"V",2,2)
Non VA providers can be individuals or facilities
"^DD",399,399.0222,.05,0)
PRIMARY INS CO ID NUMBER^FX^^0;5^I $D(DA) N Z S Z=$G(^DGCR(399,DA(1),"PRV",DA,0)) S:X="/ID" X=$$RECALC^IBCEP2A(.DA,1,$P(Z,U,5)) K:$L(X)>15!'$L(X) X I $D(X),$P(Z,U,2)="",$S($$INPAT^IBCEF(DA(1),1):1,1:X'="SLF000") K X
"^DD",399,399.0222,.05,.1)
PRIM INS PERF PROV SECONDARY ID
"^DD",399,399.0222,.05,1,0)
^.1
"^DD",399,399.0222,.05,1,1,0)
^^TRIGGER^399.0222^.02
"^DD",399,399.0222,.05,1,1,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=Y(0)="SLF000" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(399.0222,.05,1,1,1.4)
"^DD",399,399.0222,.05,1,1,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=399.0222,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.05,1,1,2)
Q
"^DD",399,399.0222,.05,1,1,3)
Do not delete
"^DD",399,399.0222,.05,1,1,"%D",0)
^.101^1^1^3000330^^
"^DD",399,399.0222,.05,1,1,"%D",1,0)
This erases the provider name if the id is SLF000.
"^DD",399,399.0222,.05,1,1,"CREATE CONDITION")
PRIMARY INS CO ID NUMBER="SLF000"
"^DD",399,399.0222,.05,1,1,"CREATE VALUE")
@
"^DD",399,399.0222,.05,1,1,"DELETE VALUE")
NO EFFECT
"^DD",399,399.0222,.05,1,1,"FIELD")
PERFORMED BY
"^DD",399,399.0222,.05,3)
Enter the # the primary ins co uses for the provider.  If outpatient and self-referred, use SLF000.
"^DD",399,399.0222,.05,4)
D INSPAR^IBCEP2A(DA(1),1)
"^DD",399,399.0222,.05,5,1,0)
399.0222^.02^1
"^DD",399,399.0222,.05,5,2,0)
399.0222^.02^4
"^DD",399,399.0222,.05,21,0)
^.001^1^1^3040521^^^^
"^DD",399,399.0222,.05,21,1,0)
This is the primary insurance co specific provider's secondary id number.
"^DD",399,399.0222,.05,"DT")
3040519
"^DD",399,399.0222,.06,0)
SECONDARY INS CO ID NUMBER^FX^^0;6^I $D(DA) N Z S Z=$G(^DGCR(399,DA(1),"PRV",DA,0)) S:X="/ID" X=$$RECALC^IBCEP2A(.DA,2,$P(Z,U,6)) K:$L(X)>15!'$L(X) X I $D(X),$P(Z,U,2)="",$S($$INPAT^IBCEF(DA(1),1):1,1:X'="SLF000") K X
"^DD",399,399.0222,.06,.1)
SECOND INS PERF PROV SECONDARY ID
"^DD",399,399.0222,.06,3)
Enter the # the secondary ins co uses for the provider.  If outpatient and self-referred, use SLF000.
"^DD",399,399.0222,.06,4)
D INSPAR^IBCEP2A(DA(1),2)
"^DD",399,399.0222,.06,5,1,0)
399.0222^.02^5
"^DD",399,399.0222,.06,21,0)
^.001^1^1^3040521^^^^
"^DD",399,399.0222,.06,21,1,0)
This is the secondary ins company's specific secondary provider id number.
"^DD",399,399.0222,.06,"DT")
3040519
"^DD",399,399.0222,.07,0)
TERTIARY INS CO ID NUMBER^FX^^0;7^I $D(DA) N Z S Z=$G(^DGCR(399,DA(1),"PRV",DA,0)) S:X="/ID" X=$$RECALC^IBCEP2A(.DA,3,$P(Z,U,7)) K:$L(X)>15!'$L(X) X I $D(X),$P(Z,U,2)="",$S($$INPAT^IBCEF(DA(1),1):1,1:X'="SLF000") K X
"^DD",399,399.0222,.07,.1)
TERTIARY INS PERF PROV SECONDARY ID
"^DD",399,399.0222,.07,3)
Enter the # the tertiary ins co uses for the provider.  If outpatient and self-referred, use SLF000.
"^DD",399,399.0222,.07,4)
D INSPAR^IBCEP2A(DA(1),3)
"^DD",399,399.0222,.07,5,1,0)
399.0222^.02^6
"^DD",399,399.0222,.07,21,0)
^.001^1^1^3040521^^^^
"^DD",399,399.0222,.07,21,1,0)
This is the tertiary ins company's specific secondary provider id number.
"^DD",399,399.0222,.07,"DT")
3040519
"^DD",399,399.0222,.09,0)
DELETE 2006 .09^R*P355.96'^IBA(355.96,^0;9^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.09,1,0)
^.1^^0
"^DD",399,399.0222,.09,3)
Enter the care unit that applies to this bill for the primary insurance co's performing provider id
"^DD",399,399.0222,.09,4)
D CAREID^IBCEP1("PERF",1,DA(1))
"^DD",399,399.0222,.09,12)
Must be a valid care unit for the ins co, care type, form type and performing prov id type
"^DD",399,399.0222,.09,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,1)"
"^DD",399,399.0222,.09,21,0)
^.001^5^5^3021126^^^^
"^DD",399,399.0222,.09,21,1,0)
The primary insurance company requires a specific care unit value
"^DD",399,399.0222,.09,21,2,0)
to identify the correct id for the performing provider.  You must
"^DD",399,399.0222,.09,21,3,0)
enter a care unit value here so a valid id can be determined.
"^DD",399,399.0222,.09,21,4,0)
This care unit must be valid for the insurance co, form type, care type
"^DD",399,399.0222,.09,21,5,0)
and provider type required by the insurance co.
"^DD",399,399.0222,.09,"DT")
3040521
"^DD",399,399.0222,.1,0)
DELETE 2006 .1^R*P355.96'^IBA(355.96,^0;10^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,2)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.1,1,0)
^.1^^0
"^DD",399,399.0222,.1,3)
Enter the care unit that applies to this bill for the secondary insurance co's performing provider id
"^DD",399,399.0222,.1,4)
D CAREID^IBCEP1("PERF",2,DA(1))
"^DD",399,399.0222,.1,12)
Must be a valid care unit for the ins co, care type, form type and performing prov id type
"^DD",399,399.0222,.1,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,2)"
"^DD",399,399.0222,.1,21,0)
^.001^4^4^3030109^^^^
"^DD",399,399.0222,.1,21,1,0)
If the secondary insurance company requires a specific care unit
"^DD",399,399.0222,.1,21,2,0)
specification to identify the correct id for the performing provider, this
"^DD",399,399.0222,.1,21,3,0)
is the exact data value related to this claim that will allow the system
"^DD",399,399.0222,.1,21,4,0)
to perform this match.
"^DD",399,399.0222,.1,"DT")
3040521
"^DD",399,399.0222,.11,0)
DELETE 2006 .11^R*P355.96'^IBA(355.96,^0;11^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,3)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.11,1,0)
^.1^^0
"^DD",399,399.0222,.11,3)
Enter the care unit that applies to this bill for the tertiary insurance's performing provider id
"^DD",399,399.0222,.11,4)
D CAREID^IBCEP1("PERF",3,DA(1))
"^DD",399,399.0222,.11,12)
Must be a valid care unit for the ins co, care type, form type and performing prov id type
"^DD",399,399.0222,.11,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,1,3)"
"^DD",399,399.0222,.11,21,0)
^.001^4^4^3010507^^^^
"^DD",399,399.0222,.11,21,1,0)
If the tertiary insurance company requires a specific care unit
"^DD",399,399.0222,.11,21,2,0)
specification to identify the correct id for the performing provider, this
"^DD",399,399.0222,.11,21,3,0)
is the exact data value related to this claim that will allow the system
"^DD",399,399.0222,.11,21,4,0)
to perform this match.
"^DD",399,399.0222,.11,"DT")
3040521
"^DD",399,399.0222,.12,0)
PRIM INS PROVIDER ID TYPE^*P355.97'^IBE(355.97,^0;12^S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),1,+Y,DA)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.12,.1)
PRIM INS PERF PROV SECONDARY ID TYPE
"^DD",399,399.0222,.12,3)
Enter the type of id the primary payer requires as a secondary id.
"^DD",399,399.0222,.12,12)
Must be a non-personal type of id and valid for transmission.
"^DD",399,399.0222,.12,12.1)
S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),1,+Y,DA)"
"^DD",399,399.0222,.12,21,0)
^.001^1^1^3040517^^
"^DD",399,399.0222,.12,21,1,0)
This is the type of id the primary payer uses as a secondary id.
"^DD",399,399.0222,.12,"DT")
3040524
"^DD",399,399.0222,.13,0)
SEC INS PROVIDER ID TYPE^*P355.97'^IBE(355.97,^0;13^S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),2,+Y,DA)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.13,.1)
SECOND INS PERF PROV SECONDARY ID TYPE
"^DD",399,399.0222,.13,3)
Enter the type of id the secondary payer requires as a secondary id.
"^DD",399,399.0222,.13,12)
Must be a non-personal type of id and valid for transmission.
"^DD",399,399.0222,.13,12.1)
S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),2,+Y,DA)"
"^DD",399,399.0222,.13,21,0)
^.001^1^1^3040517^^
"^DD",399,399.0222,.13,21,1,0)
This is the type of id the secondary payer uses as a secondary id.
"^DD",399,399.0222,.13,"DT")
3040524
"^DD",399,399.0222,.14,0)
TERT INS PROVIDER ID TYPE^*P355.97'^IBE(355.97,^0;14^S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),3,+Y,DA)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,.14,.1)
TERTIARY INS PERF PROV SECONDARY ID TYPE
"^DD",399,399.0222,.14,3)
Enter the type of id the tertiary payer requires as a secondary id.
"^DD",399,399.0222,.14,12)
Must be a non-personal type of id and valid for transmission.
"^DD",399,399.0222,.14,12.1)
S DIC("S")="I '$P($G(^(1)),U,7),$$SECIDCK^IBCEF74(DA(1),3,+Y,DA)"
"^DD",399,399.0222,.14,21,0)
^.001^1^1^3040517^^
"^DD",399,399.0222,.14,21,1,0)
This is the type of id the tertiary payer uses as a secondary id.
"^DD",399,399.0222,.14,"DT")
3040524
"^DD",399,399.0222,1.01,0)
DELETE 2006 1.01^*P355.96^IBA(355.96,^1;1^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,1.01,3)
Enter the care unit that applies to this bill for the EMC id for the primary insurance
"^DD",399,399.0222,1.01,4)
D CAREID^IBCEP1("EMC",1,DA(1))
"^DD",399,399.0222,1.01,12)
Must be a valid care unit for the ins co, care type, form type and EMC id type
"^DD",399,399.0222,1.01,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,1)"
"^DD",399,399.0222,1.01,21,0)
^.001^3^3^3010426^^^^
"^DD",399,399.0222,1.01,21,1,0)
This is the exact data you need to use to allow the system to match the
"^DD",399,399.0222,1.01,21,2,0)
provider with the correct EMC id # for the primary insurance co
"^DD",399,399.0222,1.01,21,3,0)
based on this piece of data and relating directly to this claim.
"^DD",399,399.0222,1.01,"DT")
3040521
"^DD",399,399.0222,1.02,0)
DELETE 2006 1.02^*P355.96^IBA(355.96,^1;2^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,2)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,1.02,3)
Enter the care unit that applies to this bill for the EMC id for the secondary insurance
"^DD",399,399.0222,1.02,4)
D CAREID^IBCEP1("EMC",2,DA(1))
"^DD",399,399.0222,1.02,12)
Must be a valid care unit for the ins co, care type, form type and EMC id type
"^DD",399,399.0222,1.02,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,2)"
"^DD",399,399.0222,1.02,21,0)
^.001^3^3^3001109^^
"^DD",399,399.0222,1.02,21,1,0)
This is the exact data you need to use to allow the system to match the
"^DD",399,399.0222,1.02,21,2,0)
provider with the correct EMC id # for the secondary insurance co
"^DD",399,399.0222,1.02,21,3,0)
based on this piece of data and relating directly to this claim.
"^DD",399,399.0222,1.02,"DT")
3040521
"^DD",399,399.0222,1.03,0)
DELETE 2006 1.03^*P355.96^IBA(355.96,^1;3^S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,3)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.0222,1.03,3)
Enter the care unit that applies to this bill for the EMC id for the tertiary insurance
"^DD",399,399.0222,1.03,4)
D CAREID^IBCEP1("EMC",3,DA(1))
"^DD",399,399.0222,1.03,12)
Must be a valid care unit for the ins co, care type, form type and EMC id type
"^DD",399,399.0222,1.03,12.1)
S DIC("S")="I $$CAREUOK^IBCEP4(DA(1),+Y,2,3)"
"^DD",399,399.0222,1.03,21,0)
^.001^3^3^3001109^^
"^DD",399,399.0222,1.03,21,1,0)
This is the exact data you need to use to allow the system to match the
"^DD",399,399.0222,1.03,21,2,0)
provider with the correct EMC id # for the tertiary insurance co
"^DD",399,399.0222,1.03,21,3,0)
based on this piece of data and relating directly to this claim.
"^DD",399,399.0222,1.03,"DT")
3040521
"^DIC",350.8,350.8,0)
IB ERROR
"^DIC",350.8,350.8,0,"GL")
^IBE(350.8,
"^DIC",350.8,350.8,"%D",0)
^^11^11^2940214^^^^
"^DIC",350.8,350.8,"%D",1,0)
This file contains errors for billing functions.  It may be used by
"^DIC",350.8,350.8,"%D",2,0)
applications, IB or AR.  The normal format for a routine to return
"^DIC",350.8,350.8,"%D",3,0)
an error is to return the variable:
"^DIC",350.8,350.8,"%D",4,0)
  Y=1^... a successful event occured
"^DIC",350.8,350.8,"%D",5,0)
  Y=-1^error code[;error code;error code...]^additional text
"^DIC",350.8,350.8,"%D",6,0)
The error messages can be displayed by calling routine ^IBAERR.  If
"^DIC",350.8,350.8,"%D",7,0)
the error occurs in a tasked job ($D(ZTQUEUED)'=0) the routine will
"^DIC",350.8,350.8,"%D",8,0)
put the error message in a bulletin and post it to the group defined
"^DIC",350.8,350.8,"%D",9,0)
in the IB SITE PARAMETER FILE.
"^DIC",350.8,350.8,"%D",10,0)
 
"^DIC",350.8,350.8,"%D",11,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",350.8,"B","IB ERROR",350.8)
 
"^DIC",355.92,355.92,0)
FACILITY BILLING ID^355.92
"^DIC",355.92,355.92,0,"GL")
^IBA(355.92,
"^DIC",355.92,355.92,"%D",0)
^^4^4^3040603^
"^DIC",355.92,355.92,"%D",1,0)
This file contains one record for each facility id that an insurance
"^DIC",355.92,355.92,"%D",2,0)
company assigns to a facility.  Each record can be for an insurance
"^DIC",355.92,355.92,"%D",3,0)
company and any combination of the patient status and form type.
"^DIC",355.92,355.92,"%D",4,0)
There must be only one record for each combination.
"^DIC",355.92,"B","FACILITY BILLING ID",355.92)
 
"^DIC",355.97,355.97,0)
IB PROVIDER ID # TYPE^355.97
"^DIC",355.97,355.97,0,"GL")
^IBE(355.97,
"^DIC",355.97,355.97,"%",0)
^1.005^^0
"^DIC",355.97,355.97,"%D",0)
^^6^6^3001129^^
"^DIC",355.97,355.97,"%D",1,0)
There can be many different kinds of provider id numbers that may need
"^DIC",355.97,355.97,"%D",2,0)
to be reported when billing for hospital and professional services. This
"^DIC",355.97,355.97,"%D",3,0)
file contains entries that will be used to classify or identify the valid
"^DIC",355.97,355.97,"%D",4,0)
kinds of provider ids that the V.A. will use.  This is needed specifically
"^DIC",355.97,355.97,"%D",5,0)
for the transmission of bills so the proper interpretation of the ID's can
"^DIC",355.97,355.97,"%D",6,0)
be made electronically.
"^DIC",355.97,"B","IB PROVIDER ID # TYPE",355.97)
 
"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)
 
"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)
 
"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)
 
**END**
**END**
