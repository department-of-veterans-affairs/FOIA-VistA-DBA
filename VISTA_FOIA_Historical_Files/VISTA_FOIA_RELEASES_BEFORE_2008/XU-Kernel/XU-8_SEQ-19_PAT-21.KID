Released XU*8*21 SEQ #19
Extracted from mail message
**KIDS**:XU*8.0*21^

**INSTALL NAME**
XU*8.0*21
"BLD",86,0)
XU*8.0*21^KERNEL^0^2960404^n
"BLD",86,1,0)
^^99^99^2960404^^^^
"BLD",86,1,1,0)
 This Kernel patch is dependent on MailMan patch XM*7.1*24.  Both
"BLD",86,1,2,0)
patches must be installed at the same time. This patch contains the
"BLD",86,1,3,0)
following features:
"BLD",86,1,4,0)

"BLD",86,1,5,0)
-KIDS will disable Protocols during the install process.  This
"BLD",86,1,6,0)
 functionality was removed in patch XU*8.0*10.
"BLD",86,1,7,0)
-KIDS will not disable Options or Protocols which have an Action of
"BLD",86,1,8,0)
 'USE AS LINK FOR MENU ITEMS'.
"BLD",86,1,9,0)
-Two new functions, $$PRODE^XPDUTL and $$OPTDE^XPDUTL, can be called
"BLD",86,1,10,0)
 during the install process.
"BLD",86,1,11,0)
-KIDS now creates Packman messages in a format that MailMan can
"BLD",86,1,12,0)
 understand.
"BLD",86,1,13,0)
-Two options, 'Recover deleted option set' [XQOOREDO] and 'Toggle
"BLD",86,1,14,0)
 options/protocols on and off' [XQOOTOG] are now under 'Out-Of-Order
"BLD",86,1,15,0)
 Set Management' menu.
"BLD",86,1,16,0)
-Corrects undefined error when 'Compare Transport Global to Current System'
"BLD",86,1,17,0)
 option is queued. NOIS OKL-0296-70233 and LAS-0396-60110
"BLD",86,1,18,0)
-When a link to Package file doesn't exist during the load process, the
"BLD",86,1,19,0)
 Install file wasn't being updated with a new link during the install
"BLD",86,1,20,0)
 process. This is now corrected.
"BLD",86,1,21,0)
-The install process will display a message for each CPU it updates.  It
"BLD",86,1,22,0)
 use to only display a message for the first one.
"BLD",86,1,23,0)
===========================================================================
"BLD",86,1,24,0)
This patch can be installed with users on the system, no user should be
"BLD",86,1,25,0)
using KIDS during the install of this patch.  MSM sites must manually move
"BLD",86,1,26,0)
the routine XPDIJ to their other CPUs. KIDS cannot automatically move this
"BLD",86,1,27,0)
routine for you.
"BLD",86,1,28,0)
  
"BLD",86,1,29,0)
===========================================================================
"BLD",86,1,30,0)
  
"BLD",86,1,31,0)
INSTALLATION:
"BLD",86,1,32,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",86,1,33,0)
      so you will need to disable mapping for the effected routines.
"BLD",86,1,34,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",86,1,35,0)
      option will load the KIDS package onto your system.
"BLD",86,1,36,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",86,1,37,0)
      system. You now need to use KIDS to install the Transport global.
"BLD",86,1,38,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the option 
"BLD",86,1,39,0)
      'Verify Checksum in Transport Global' and verify that all routines
"BLD",86,1,40,0)
      have the correct checksums.
"BLD",86,1,41,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the option 
"BLD",86,1,42,0)
      'Backup a Transport Global' to make a backup copy of the old
"BLD",86,1,43,0)
      routines being brought in by this patch.
"BLD",86,1,44,0)
  6.  On the KIDS menu, under the 'Installation' menu, use the option 
"BLD",86,1,45,0)
      'Install Package(s)'. Select the package 'XU*8.0*21' and proceed
"BLD",86,1,46,0)
      with install.
"BLD",86,1,47,0)
  7.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",86,1,48,0)
      other CPUs?'.
"BLD",86,1,49,0)
  8.  MSM Sites - D ^%RCOPY to move the routine XPDIJ to your other
"BLD",86,1,50,0)
      CPUs.
"BLD",86,1,51,0)
  9.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",86,1,52,0)
 ====================================================================  
"BLD",86,1,53,0)
  
"BLD",86,1,54,0)
 ROUTINES:
"BLD",86,1,55,0)
   The second line of the routine now looks like:
"BLD",86,1,56,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",86,1,57,0)
 
"BLD",86,1,58,0)
 Name           Checksum        Patch List
"BLD",86,1,59,0)
 -----------------------------------------------------------
"BLD",86,1,60,0)
 XPDCOM          2299089         21
"BLD",86,1,61,0)
 XPDDI           7062234         21
"BLD",86,1,62,0)
 XPDDP          12102989         21
"BLD",86,1,63,0)
 XPDE           13757383         2,15,21
"BLD",86,1,64,0)
 XPDI           16025869         10,21
"BLD",86,1,65,0)
 XPDIA          10483361         10,15,21
"BLD",86,1,66,0)
 XPDIJ          17914806         2,21
"BLD",86,1,67,0)
 XPDIP           8712983         15,21
"BLD",86,1,68,0)
 XPDIPM          1775672         21
"BLD",86,1,69,0)
 XPDIQ           6662686         21
"BLD",86,1,70,0)
 XPDMENU         1821149         21
"BLD",86,1,71,0)
 XPDTC          11632956         10,15,21
"BLD",86,1,72,0)
 XPDTP           2309897         21
"BLD",86,1,73,0)
 XPDUTL          2331761         21
"BLD",86,1,74,0)
 XQOO           20281727         10,21
"BLD",86,1,75,0)
 XQOO1          14241374         10,21
"BLD",86,1,76,0)
 ===========================================================================
"BLD",86,1,77,0)
 OPTIONS:
"BLD",86,1,78,0)

"BLD",86,1,79,0)
'Toggle options/protocols on and off'     Option name: XQOOTOG
"BLD",86,1,80,0)
     This option is used to write or remove Out-Of-Order messages from
"BLD",86,1,81,0)
     individual options or protocols.
"BLD",86,1,82,0)
'Recover deleted option set'     Option name: XQOOREDO
"BLD",86,1,83,0)
     This option will recover an option set that has been deleted from ^XTMP
"BLD",86,1,84,0)
     by looping through the Option and Protocol Files to find all that have
"BLD",86,1,85,0)
     a particular Out-of-order message.  It rebuilds the option set in ^XTMP.
"BLD",86,1,86,0)

"BLD",86,1,87,0)
 ============================================================================
"BLD",86,1,88,0)
 DOCUMENTATION:
"BLD",86,1,89,0)

"BLD",86,1,90,0)
These two functions can be called in a Pre-Init or Post-Init routine to
"BLD",86,1,91,0)
disable or enable an Option or Protocol.
"BLD",86,1,92,0)
 $$PRODE^XPDUTL(name,action) ;Disable/Enable a Protocol
"BLD",86,1,93,0)
  name=Protocol Name,  action= 1-enable, 0-disable
"BLD",86,1,94,0)
  returns: 1-success, 0-failure
"BLD",86,1,95,0)

"BLD",86,1,96,0)
 $$OPTDE^XPDUTL(name,action) ;Disable/Enable an Option
"BLD",86,1,97,0)
  name=Option Name,  action= 1-enable, 0-disable
"BLD",86,1,98,0)
  returns: 1-success, 0-failure
"BLD",86,1,99,0)

"BLD",86,4,0)
^9.64PA^^
"BLD",86,"KRN",0)
^9.67PA^8994^15
"BLD",86,"KRN",.4,0)
.4
"BLD",86,"KRN",.401,0)
.401
"BLD",86,"KRN",.402,0)
.402
"BLD",86,"KRN",.403,0)
.403
"BLD",86,"KRN",.5,0)
.5
"BLD",86,"KRN",.84,0)
.84
"BLD",86,"KRN",3.6,0)
3.6
"BLD",86,"KRN",9.2,0)
9.2
"BLD",86,"KRN",9.8,0)
9.8
"BLD",86,"KRN",9.8,"NM",0)
^9.68A^16^16
"BLD",86,"KRN",9.8,"NM",1,0)
XPDDP^^0^B29005902
"BLD",86,"KRN",9.8,"NM",2,0)
XPDI^^0^B49697777
"BLD",86,"KRN",9.8,"NM",3,0)
XPDIA^^0^B37409722
"BLD",86,"KRN",9.8,"NM",4,0)
XPDIJ^^0^B67019619
"BLD",86,"KRN",9.8,"NM",5,0)
XPDIPM^^0^B2962508
"BLD",86,"KRN",9.8,"NM",6,0)
XPDTP^^0^B3130203
"BLD",86,"KRN",9.8,"NM",7,0)
XPDUTL^^0^B9577797
"BLD",86,"KRN",9.8,"NM",8,0)
XPDE^^0^B34453657
"BLD",86,"KRN",9.8,"NM",9,0)
XQOO1^^0^B73136716
"BLD",86,"KRN",9.8,"NM",10,0)
XPDTC^^0^B31583391
"BLD",86,"KRN",9.8,"NM",11,0)
XPDIQ^^0^B13427313
"BLD",86,"KRN",9.8,"NM",12,0)
XQOO^^0^B41361090
"BLD",86,"KRN",9.8,"NM",13,0)
XPDMENU^^0^B3585468
"BLD",86,"KRN",9.8,"NM",14,0)
XPDDI^^0^B15990151
"BLD",86,"KRN",9.8,"NM",15,0)
XPDCOM^^0^B4488352
"BLD",86,"KRN",9.8,"NM",16,0)
XPDIP^^0^B28381829
"BLD",86,"KRN",9.8,"NM","B","XPDCOM",15)

"BLD",86,"KRN",9.8,"NM","B","XPDDI",14)

"BLD",86,"KRN",9.8,"NM","B","XPDDP",1)

"BLD",86,"KRN",9.8,"NM","B","XPDE",8)

"BLD",86,"KRN",9.8,"NM","B","XPDI",2)

"BLD",86,"KRN",9.8,"NM","B","XPDIA",3)

"BLD",86,"KRN",9.8,"NM","B","XPDIJ",4)

"BLD",86,"KRN",9.8,"NM","B","XPDIP",16)

"BLD",86,"KRN",9.8,"NM","B","XPDIPM",5)

"BLD",86,"KRN",9.8,"NM","B","XPDIQ",11)

"BLD",86,"KRN",9.8,"NM","B","XPDMENU",13)

"BLD",86,"KRN",9.8,"NM","B","XPDTC",10)

"BLD",86,"KRN",9.8,"NM","B","XPDTP",6)

"BLD",86,"KRN",9.8,"NM","B","XPDUTL",7)

"BLD",86,"KRN",9.8,"NM","B","XQOO",12)

"BLD",86,"KRN",9.8,"NM","B","XQOO1",9)

"BLD",86,"KRN",19,0)
19
"BLD",86,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",86,"KRN",19,"NM",1,0)
XQOOREDO^^0
"BLD",86,"KRN",19,"NM",2,0)
XQOOTOG^^0
"BLD",86,"KRN",19,"NM",3,0)
XQOOMAIN^^2
"BLD",86,"KRN",19,"NM","B","XQOOMAIN",3)

"BLD",86,"KRN",19,"NM","B","XQOOREDO",1)

"BLD",86,"KRN",19,"NM","B","XQOOTOG",2)

"BLD",86,"KRN",19.1,0)
19.1
"BLD",86,"KRN",101,0)
101
"BLD",86,"KRN",409.61,0)
409.61
"BLD",86,"KRN",8994,0)
8994
"BLD",86,"KRN",8995,0)
8995
"BLD",86,"KRN","B",.4,.4)

"BLD",86,"KRN","B",.401,.401)

"BLD",86,"KRN","B",.402,.402)

"BLD",86,"KRN","B",.403,.403)

"BLD",86,"KRN","B",.5,.5)

"BLD",86,"KRN","B",.84,.84)

"BLD",86,"KRN","B",3.6,3.6)

"BLD",86,"KRN","B",9.2,9.2)

"BLD",86,"KRN","B",9.8,9.8)

"BLD",86,"KRN","B",19,19)

"BLD",86,"KRN","B",19.1,19.1)

"BLD",86,"KRN","B",101,101)

"BLD",86,"KRN","B",409.61,409.61)

"BLD",86,"KRN","B",8994,8994)

"BLD",86,"KRN","B",8995,8995)

"BLD",86,"QUES",0)
^9.62^^
"KRN",19,1196,-1)
2^3
"KRN",19,1196,0)
XQOOMAIN^Out-Of-Order Set Management^^M^^^^^^^^MENU DRIVER
"KRN",19,1196,10,0)
^19.01IP^9^8
"KRN",19,1196,10,8,0)
1256
"KRN",19,1196,10,8,"^")
XQOOREDO
"KRN",19,1196,10,9,0)
1261
"KRN",19,1196,10,9,"^")
XQOOTOG
"KRN",19,1196,99)
56679,33512
"KRN",19,1196,"U")
OUT-OF-ORDER SET MANAGEMENT
"KRN",19,1256,-1)
0^1
"KRN",19,1256,0)
XQOOREDO^Recover deleted option set^^R^^^^^^^^MENU DRIVER
"KRN",19,1256,1,0)
^^3^3^2950620^
"KRN",19,1256,1,1,0)
This option will recover an option set that has been deleted from ^XTMP
"KRN",19,1256,1,2,0)
by looping through the Option and Protocol Files to find all that have
"KRN",19,1256,1,3,0)
a particular Out-of-order message.  It rebuilds the option set in ^XTMP.
"KRN",19,1256,25)
REBLD^XQOO1
"KRN",19,1256,"U")
RECOVER DELETED OPTION SET
"KRN",19,1261,-1)
0^2
"KRN",19,1261,0)
XQOOTOG^Toggle options/protocols on and off^^R^^^^^^^^MENU DRIVER
"KRN",19,1261,1,0)
^^2^2^2950621^
"KRN",19,1261,1,1,0)
This option is used to write or remove Out-Of-Order messages from
"KRN",19,1261,1,2,0)
individual options or protocols.  
"KRN",19,1261,25)
TOG^XQOO1
"KRN",19,1261,"U")
TOGGLE OPTIONS/PROTOCOLS ON AN
"ORD",14,19)
19;14;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",14,19,0)
OPTION
"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
21^2960404
"PKG",283,22,1,"PAH",1,1,0)
^^99^99^2960404
"PKG",283,22,1,"PAH",1,1,1,0)
 This Kernel patch is dependent on MailMan patch XM*7.1*24.  Both
"PKG",283,22,1,"PAH",1,1,2,0)
patches must be installed at the same time. This patch contains the
"PKG",283,22,1,"PAH",1,1,3,0)
following features:
"PKG",283,22,1,"PAH",1,1,4,0)

"PKG",283,22,1,"PAH",1,1,5,0)
-KIDS will disable Protocols during the install process.  This
"PKG",283,22,1,"PAH",1,1,6,0)
 functionality was removed in patch XU*8.0*10.
"PKG",283,22,1,"PAH",1,1,7,0)
-KIDS will not disable Options or Protocols which have an Action of
"PKG",283,22,1,"PAH",1,1,8,0)
 'USE AS LINK FOR MENU ITEMS'.
"PKG",283,22,1,"PAH",1,1,9,0)
-Two new functions, $$PRODE^XPDUTL and $$OPTDE^XPDUTL, can be called
"PKG",283,22,1,"PAH",1,1,10,0)
 during the install process.
"PKG",283,22,1,"PAH",1,1,11,0)
-KIDS now creates Packman messages in a format that MailMan can
"PKG",283,22,1,"PAH",1,1,12,0)
 understand.
"PKG",283,22,1,"PAH",1,1,13,0)
-Two options, 'Recover deleted option set' [XQOOREDO] and 'Toggle
"PKG",283,22,1,"PAH",1,1,14,0)
 options/protocols on and off' [XQOOTOG] are now under 'Out-Of-Order
"PKG",283,22,1,"PAH",1,1,15,0)
 Set Management' menu.
"PKG",283,22,1,"PAH",1,1,16,0)
-Corrects undefined error when 'Compare Transport Global to Current System'
"PKG",283,22,1,"PAH",1,1,17,0)
 option is queued. NOIS OKL-0296-70233 and LAS-0396-60110
"PKG",283,22,1,"PAH",1,1,18,0)
-When a link to Package file doesn't exist during the load process, the
"PKG",283,22,1,"PAH",1,1,19,0)
 Install file wasn't being updated with a new link during the install
"PKG",283,22,1,"PAH",1,1,20,0)
 process. This is now corrected.
"PKG",283,22,1,"PAH",1,1,21,0)
-The install process will display a message for each CPU it updates.  It
"PKG",283,22,1,"PAH",1,1,22,0)
 use to only display a message for the first one.
"PKG",283,22,1,"PAH",1,1,23,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,24,0)
This patch can be installed with users on the system, no user should be
"PKG",283,22,1,"PAH",1,1,25,0)
using KIDS during the install of this patch.  MSM sites must manually move
"PKG",283,22,1,"PAH",1,1,26,0)
the routine XPDIJ to their other CPUs. KIDS cannot automatically move this
"PKG",283,22,1,"PAH",1,1,27,0)
routine for you.
"PKG",283,22,1,"PAH",1,1,28,0)
  
"PKG",283,22,1,"PAH",1,1,29,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,30,0)
  
"PKG",283,22,1,"PAH",1,1,31,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,32,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,33,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,34,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,35,0)
      option will load the KIDS package onto your system.
"PKG",283,22,1,"PAH",1,1,36,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,37,0)
      system. You now need to use KIDS to install the Transport global.
"PKG",283,22,1,"PAH",1,1,38,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the option 
"PKG",283,22,1,"PAH",1,1,39,0)
      'Verify Checksum in Transport Global' and verify that all routines
"PKG",283,22,1,"PAH",1,1,40,0)
      have the correct checksums.
"PKG",283,22,1,"PAH",1,1,41,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the option 
"PKG",283,22,1,"PAH",1,1,42,0)
      'Backup a Transport Global' to make a backup copy of the old
"PKG",283,22,1,"PAH",1,1,43,0)
      routines being brought in by this patch.
"PKG",283,22,1,"PAH",1,1,44,0)
  6.  On the KIDS menu, under the 'Installation' menu, use the option 
"PKG",283,22,1,"PAH",1,1,45,0)
      'Install Package(s)'. Select the package 'XU*8.0*21' and proceed
"PKG",283,22,1,"PAH",1,1,46,0)
      with install.
"PKG",283,22,1,"PAH",1,1,47,0)
  7.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,48,0)
      other CPUs?'.
"PKG",283,22,1,"PAH",1,1,49,0)
  8.  MSM Sites - D ^%RCOPY to move the routine XPDIJ to your other
"PKG",283,22,1,"PAH",1,1,50,0)
      CPUs.
"PKG",283,22,1,"PAH",1,1,51,0)
  9.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,52,0)
 ====================================================================  
"PKG",283,22,1,"PAH",1,1,53,0)
  
"PKG",283,22,1,"PAH",1,1,54,0)
 ROUTINES:
"PKG",283,22,1,"PAH",1,1,55,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,56,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,57,0)
 
"PKG",283,22,1,"PAH",1,1,58,0)
 Name           Checksum        Patch List
"PKG",283,22,1,"PAH",1,1,59,0)
 -----------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,60,0)
 XPDCOM          2299089         21
"PKG",283,22,1,"PAH",1,1,61,0)
 XPDDI           7062234         21
"PKG",283,22,1,"PAH",1,1,62,0)
 XPDDP          12102989         21
"PKG",283,22,1,"PAH",1,1,63,0)
 XPDE           13757383         2,15,21
"PKG",283,22,1,"PAH",1,1,64,0)
 XPDI           16025869         10,21
"PKG",283,22,1,"PAH",1,1,65,0)
 XPDIA          10483361         10,15,21
"PKG",283,22,1,"PAH",1,1,66,0)
 XPDIJ          17914806         2,21
"PKG",283,22,1,"PAH",1,1,67,0)
 XPDIP           8712983         15,21
"PKG",283,22,1,"PAH",1,1,68,0)
 XPDIPM          1775672         21
"PKG",283,22,1,"PAH",1,1,69,0)
 XPDIQ           6662686         21
"PKG",283,22,1,"PAH",1,1,70,0)
 XPDMENU         1821149         21
"PKG",283,22,1,"PAH",1,1,71,0)
 XPDTC          11632956         10,15,21
"PKG",283,22,1,"PAH",1,1,72,0)
 XPDTP           2309897         21
"PKG",283,22,1,"PAH",1,1,73,0)
 XPDUTL          2331761         21
"PKG",283,22,1,"PAH",1,1,74,0)
 XQOO           20281727         10,21
"PKG",283,22,1,"PAH",1,1,75,0)
 XQOO1          14241374         10,21
"PKG",283,22,1,"PAH",1,1,76,0)
 ===========================================================================
"PKG",283,22,1,"PAH",1,1,77,0)
 OPTIONS:
"PKG",283,22,1,"PAH",1,1,78,0)

"PKG",283,22,1,"PAH",1,1,79,0)
'Toggle options/protocols on and off'     Option name: XQOOTOG
"PKG",283,22,1,"PAH",1,1,80,0)
     This option is used to write or remove Out-Of-Order messages from
"PKG",283,22,1,"PAH",1,1,81,0)
     individual options or protocols.
"PKG",283,22,1,"PAH",1,1,82,0)
'Recover deleted option set'     Option name: XQOOREDO
"PKG",283,22,1,"PAH",1,1,83,0)
     This option will recover an option set that has been deleted from ^XTMP
"PKG",283,22,1,"PAH",1,1,84,0)
     by looping through the Option and Protocol Files to find all that have
"PKG",283,22,1,"PAH",1,1,85,0)
     a particular Out-of-order message.  It rebuilds the option set in ^XTMP.
"PKG",283,22,1,"PAH",1,1,86,0)

"PKG",283,22,1,"PAH",1,1,87,0)
 ============================================================================
"PKG",283,22,1,"PAH",1,1,88,0)
 DOCUMENTATION:
"PKG",283,22,1,"PAH",1,1,89,0)

"PKG",283,22,1,"PAH",1,1,90,0)
These two functions can be called in a Pre-Init or Post-Init routine to
"PKG",283,22,1,"PAH",1,1,91,0)
disable or enable an Option or Protocol.
"PKG",283,22,1,"PAH",1,1,92,0)
 $$PRODE^XPDUTL(name,action) ;Disable/Enable a Protocol
"PKG",283,22,1,"PAH",1,1,93,0)
  name=Protocol Name,  action= 1-enable, 0-disable
"PKG",283,22,1,"PAH",1,1,94,0)
  returns: 1-success, 0-failure
"PKG",283,22,1,"PAH",1,1,95,0)

"PKG",283,22,1,"PAH",1,1,96,0)
 $$OPTDE^XPDUTL(name,action) ;Disable/Enable an Option
"PKG",283,22,1,"PAH",1,1,97,0)
  name=Option Name,  action= 1-enable, 0-disable
"PKG",283,22,1,"PAH",1,1,98,0)
  returns: 1-success, 0-failure
"PKG",283,22,1,"PAH",1,1,99,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","XPDCOM")
0^15^B4488352
"RTN","XPDCOM",1,0)
XPDCOM ;SFISC/RSD - Compare Transport Global ; 14 Mar 96 09:26
"RTN","XPDCOM",2,0)
 ;;8.0;KERNEL;**21**;Jul 10, 1995
"RTN","XPDCOM",3,0)
EN1 ;compare to current system
"RTN","XPDCOM",4,0)
 N DIC,POP,XPD,XPDNM,Y,Z,%ZIS
"RTN","XPDCOM",5,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I '$P(^(0),U,9),$D(^XTMP(""XPDI"",Y))"
"RTN","XPDCOM",6,0)
 D ^DIC Q:Y<0
"RTN","XPDCOM",7,0)
 S Y="COM^XPDCOM("_+Y_")",Z="Transport Global Compare",XPDNM=Y(0,0),XPD("XPDNM")=""
"RTN","XPDCOM",8,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDCOM",9,0)
 Q
"RTN","XPDCOM",10,0)
COM(XPDA) ;XPDA=ien of package in ^XTMP("XPDI"
"RTN","XPDCOM",11,0)
 Q:'$D(^XTMP("XPDI",$G(XPDA)))
"RTN","XPDCOM",12,0)
 D HDR,COMR(5),EN^XPDCOMG
"RTN","XPDCOM",13,0)
 Q
"RTN","XPDCOM",14,0)
COMR(NL) ;NL=number of lines to check ahead
"RTN","XPDCOM",15,0)
 N DL,XL,XPDI,X
"RTN","XPDCOM",16,0)
 S:'$G(NL) NL=5 S XPDI=""
"RTN","XPDCOM",17,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S X=$G(^(XPDI)) D
"RTN","XPDCOM",18,0)
 .I X W:X=1 !!,"DELETE Routine: ",XPDI,! Q
"RTN","XPDCOM",19,0)
 .S X=XPDI X ^%ZOSF("TEST") E  W !!,"ADD Routine: ",XPDI,! Q
"RTN","XPDCOM",20,0)
 .W !!," Routine: ",XPDI
"RTN","XPDCOM",21,0)
 .F %=1:1 Q:'$D(^XTMP("XPDI",XPDA,"RTN",XPDI,%))
"RTN","XPDCOM",22,0)
 .S XL=%-1,DL=$$LD(XPDI)
"RTN","XPDCOM",23,0)
 .D COMP K ^TMP($J,XPDI)
"RTN","XPDCOM",24,0)
 Q
"RTN","XPDCOM",25,0)
COMP ;taken from XMPC routine
"RTN","XPDCOM",26,0)
 N D1,DI,I,J,K,X1,XI,Y1
"RTN","XPDCOM",27,0)
 S (XI,DI)=0
"RTN","XPDCOM",28,0)
 F  S XI=XI+1,DI=DI+1 Q:XI>XL!(DI>DL)  D:^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0)'=^TMP($J,XPDI,DI,0)
"RTN","XPDCOM",29,0)
 .S X1=^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0),Y1=0
"RTN","XPDCOM",30,0)
 .F I=DI:1:$S(DI+NL<DL:DI+NL,1:DL) S D1=^TMP($J,XPDI,I,0) D  Q:Y1
"RTN","XPDCOM",31,0)
 ..F K=1:5:26 Q:$L($E(D1,K,K+10))<7  I $F(X1,$E(D1,K,K+10))  D  Q
"RTN","XPDCOM",32,0)
 ...F J=DI:1:I-1 D WP(^TMP($J,XPDI,J,0),2)
"RTN","XPDCOM",33,0)
 ...S DI=I,Y1=1 Q:D1=X1
"RTN","XPDCOM",34,0)
 ...D WP(D1,3),WP(X1,4)
"RTN","XPDCOM",35,0)
 .Q:Y1  D WP(X1,1) S DI=DI-1
"RTN","XPDCOM",36,0)
 I XI>XL&(DI<(DL+1)) F I=DI:1:DL D WP(^TMP($J,XPDI,I,0),2)
"RTN","XPDCOM",37,0)
 I DI>DL&(XI<(XL+1)) F I=XI:1:XL D WP(^XTMP("XPDI",XPDA,"RTN",XPDI,I,0),1)
"RTN","XPDCOM",38,0)
 Q
"RTN","XPDCOM",39,0)
WP(X,Y) W !,"* "_$P("ADD^DEL^OLD^NEW",U,Y)_" *  ",X
"RTN","XPDCOM",40,0)
 Q
"RTN","XPDCOM",41,0)
LD(X) N %N,DIF,XCNP
"RTN","XPDCOM",42,0)
 K ^TMP($J,X)
"RTN","XPDCOM",43,0)
 S DIF="^TMP($J,X,",XCNP=0
"RTN","XPDCOM",44,0)
 X ^%ZOSF("LOAD")
"RTN","XPDCOM",45,0)
 Q %N-1
"RTN","XPDCOM",46,0)
 ;
"RTN","XPDCOM",47,0)
HDR S $P(XPDUL,"-",80)=""
"RTN","XPDCOM",48,0)
 W @IOF,"Compare ",XPDNM," to current site",!,XPDUL,!
"RTN","XPDCOM",49,0)
 Q
"RTN","XPDDI")
0^14^B15990151
"RTN","XPDDI",1,0)
XPDDI ;SFISC/RSD - Display an Install ; 29 Feb 96 13:10
"RTN","XPDDI",2,0)
 ;;8.0;KERNEL;**21**;Jul 10, 1995
"RTN","XPDDI",3,0)
EN1 ;print from Install file
"RTN","XPDDI",4,0)
 N DIC,D0,XPD,Y,Z
"RTN","XPDDI",5,0)
 S DIC="^XPD(9.7,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDI",6,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDI",Z="Install File Print"
"RTN","XPDDI",7,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDI",8,0)
 Q
"RTN","XPDDI",9,0)
 ;
"RTN","XPDDI",10,0)
PNT ;print a package
"RTN","XPDDI",11,0)
 N X,XPD,XPDDT,XPDI,XPDJ,XPD0,XPDPG,XPDQ,XPDUL
"RTN","XPDDI",12,0)
 Q:'$D(^XPD(9.7,D0,0))  S XPD0=^(0),XPDJ=$G(^(1)),XPDPG=1,$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDI",13,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR
"RTN","XPDDI",14,0)
 W "STATUS: ",$$EXTERNAL^DILFD(9.7,.02,"",$P(XPD0,U,9)),?42,"DATE LOADED: ",$$EXTERNAL^DILFD(9.7,2,"",$P(XPD0,U,3))
"RTN","XPDDI",15,0)
 W !,"INSTALLED BY: ",$$EXTERNAL^DILFD(9.7,9,"",$P(XPD0,U,11))
"RTN","XPDDI",16,0)
 W !,"NATIONAL PACKAGE: ",$$EXTERNAL^DILFD(9.7,1,"",$P(XPD0,U,2))
"RTN","XPDDI",17,0)
 W !!,"INSTALL STARTED: ",$$EXTERNAL^DILFD(9.7,11,"",$P(XPDJ,U))
"RTN","XPDDI",18,0)
 W:$P(XPDJ,U,3) ?45,$P($$EXTERNAL^DILFD(9.7,17,"",$P(XPDJ,U,3)),"@",2),?65,$$DIFF($P(XPDJ,U,3),$P(XPDJ,U))
"RTN","XPDDI",19,0)
 ;XPD is start date/time
"RTN","XPDDI",20,0)
 S XPD=+$P(XPDJ,U)
"RTN","XPDDI",21,0)
 W !!,"ROUTINES:",?45,$P($$EXTERNAL^DILFD(9.7,12,"",$P(XPDJ,U,2)),"@",2),?65,$$DIFF($P(XPDJ,U,2),XPD),!
"RTN","XPDDI",22,0)
 ;XPD is the last complete time, it is also the next start time
"RTN","XPDDI",23,0)
 S XPDQ=0 S:$P(XPDJ,U,2) XPD=$P(XPDJ,U,2)
"RTN","XPDDI",24,0)
 I $O(^XPD(9.7,D0,"INI",1)) D
"RTN","XPDDI",25,0)
 .W !,"PRE-INIT CHECK POINTS:",! S XPDI=1
"RTN","XPDDI",26,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"INI",XPDI)) Q:'XPDI  S X=^(XPDI,0) D  Q:XPDQ
"RTN","XPDDI",27,0)
 ..W $P(X,U),?45,$P($$EXTERNAL^DILFD(9.713,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",28,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",29,0)
 .Q:XPDQ  S X=^XPD(9.7,D0,"INI",1,0)
"RTN","XPDDI",30,0)
 .W $P(X,U),?45,$P($$EXTERNAL^DILFD(9.713,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",31,0)
 .S XPDQ=$$CHK(4)
"RTN","XPDDI",32,0)
 Q:XPDQ
"RTN","XPDDI",33,0)
 I $O(^XPD(9.7,D0,4,0)) D
"RTN","XPDDI",34,0)
 .W !,"FILES:",! S XPDI=0
"RTN","XPDDI",35,0)
 .F  S XPDI=$O(^XPD(9.7,D0,4,XPDI)) Q:'XPDI  S X=^(XPDI,0) D  Q:XPDQ
"RTN","XPDDI",36,0)
 ..W $P($G(^DIC(+$P(X,U),0)),U),?45,$P($$EXTERNAL^DILFD(9.714,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",37,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",38,0)
 Q:XPDQ
"RTN","XPDDI",39,0)
 I $O(^XPD(9.7,D0,"KRN","AC",0)) D
"RTN","XPDDI",40,0)
 .W ! S XPDI=0
"RTN","XPDDI",41,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"KRN","AC",XPDI)) Q:'XPDI  S XPDJ=$O(^(XPDI,0)) D  Q:XPDQ
"RTN","XPDDI",42,0)
 ..Q:'$D(^XPD(9.7,D0,"KRN",XPDJ,0))  S X=^(0)
"RTN","XPDDI",43,0)
 ..Q:'$D(^DIC(XPDJ,0))#2  W $P(^(0),U)
"RTN","XPDDI",44,0)
 ..W ?45,$P($$EXTERNAL^DILFD(9.715,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",45,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",46,0)
 Q:XPDQ
"RTN","XPDDI",47,0)
 I $O(^XPD(9.7,D0,"GLO",0)) D
"RTN","XPDDI",48,0)
 .W !,"GLOBALS:",! S XPDI=0
"RTN","XPDDI",49,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"GLO",XPDI)) Q:'XPDI  S X=^(XPDI,0) D  Q:XPDQ
"RTN","XPDDI",50,0)
 ..W $P(X,U),?45,$P($$EXTERNAL^DILFD(9.718,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",51,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",52,0)
 Q:XPDQ
"RTN","XPDDI",53,0)
 I $O(^XPD(9.7,D0,"INIT",1)) D
"RTN","XPDDI",54,0)
 .W !,"POST-INIT CHECK POINTS:",! S XPDI=1
"RTN","XPDDI",55,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"INIT",XPDI)) Q:'XPDI  S X=^(XPDI,0) D  Q:XPDQ
"RTN","XPDDI",56,0)
 ..W $P(X,U),?45,$P($$EXTERNAL^DILFD(9.716,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",57,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",58,0)
 .Q:XPDQ  S X=^XPD(9.7,D0,"INIT",1,0)
"RTN","XPDDI",59,0)
 .W $P(X,U),?45,$P($$EXTERNAL^DILFD(9.716,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),XPD),!
"RTN","XPDDI",60,0)
 .S XPDQ=$$CHK(4)
"RTN","XPDDI",61,0)
 I $O(^XPD(9.7,D0,"VOL",0)) D
"RTN","XPDDI",62,0)
 .W !,"OTHER CPUs:",! S XPDI=0
"RTN","XPDDI",63,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"VOL",XPDI)) Q:'XPDI  S X=^(XPDI,0) D  Q:XPDQ
"RTN","XPDDI",64,0)
 ..W $P(X,U),"  STARTED ",$P($$EXTERNAL^DILFD(9.703,2,"",$P(X,U,3)),"@",2)
"RTN","XPDDI",65,0)
 ..W ?45,$P($$EXTERNAL^DILFD(9.703,1,"",$P(X,U,2)),"@",2),?65,$$DIFF($P(X,U,2),$P(X,U,3)),!
"RTN","XPDDI",66,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",67,0)
 Q:XPDQ
"RTN","XPDDI",68,0)
 I $O(^XPD(9.7,D0,"QUES",0)) D
"RTN","XPDDI",69,0)
 .W !,"INSTALL QUESTION PROMPT",?70,"ANSWER",! S XPDI=0
"RTN","XPDDI",70,0)
 .F  S XPDI=$O(^XPD(9.7,D0,"QUES",XPDI)) Q:'XPDI  S X=$P(^(XPDI,0),U),XPD=$G(^("A")),XPDJ=$G(^("B")) D  Q:XPDQ
"RTN","XPDDI",71,0)
 ..W !,X,"   ",XPD,?70,XPDJ
"RTN","XPDDI",72,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDI",73,0)
 Q:XPDQ
"RTN","XPDDI",74,0)
 W !,"MESSAGES:",!
"RTN","XPDDI",75,0)
 S XPDI=0
"RTN","XPDDI",76,0)
 F  S XPDI=$O(^XPD(9.7,D0,"MES",XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),! S XPDQ=$$CHK(4) Q:XPDQ
"RTN","XPDDI",77,0)
 Q
"RTN","XPDDI",78,0)
 ;
"RTN","XPDDI",79,0)
CHK(Y) ;Y=excess lines, return 1 to exit
"RTN","XPDDI",80,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDI",81,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDI",82,0)
 .N DIR,I,J,K,X
"RTN","XPDDI",83,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDI",84,0)
 S XPDPG=XPDPG+1
"RTN","XPDDI",85,0)
 W @IOF D HDR
"RTN","XPDDI",86,0)
 Q 0
"RTN","XPDDI",87,0)
 ;
"RTN","XPDDI",88,0)
DIFF(X,Y) ;returns diff of X-Y
"RTN","XPDDI",89,0)
 I 'X Q ""
"RTN","XPDDI",90,0)
 S XPD=X
"RTN","XPDDI",91,0)
 Q $$FMDIFF^XLFDT(X,Y,3)
"RTN","XPDDI",92,0)
 ;
"RTN","XPDDI",93,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!,?45,"COMPLETED",?65,"ELAPSED",!,XPDUL,!
"RTN","XPDDI",94,0)
 Q
"RTN","XPDDP")
0^1^B29005902
"RTN","XPDDP",1,0)
XPDDP ;SFISC/RSD - Display a package ; 3 Apr 96 12:27
"RTN","XPDDP",2,0)
 ;;8.0;KERNEL;**21**;Jul 05, 1995
"RTN","XPDDP",3,0)
EN1 ;print from Build file
"RTN","XPDDP",4,0)
 N DIC,D0,XPD,Y,Z
"RTN","XPDDP",5,0)
 S DIC="^XPD(9.6,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDP",6,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDP(""XPD(9.6,D0)"")",Z="Build File Print"
"RTN","XPDDP",7,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",8,0)
 Q
"RTN","XPDDP",9,0)
EN2 ;print from Distribution
"RTN","XPDDP",10,0)
 N D0,DIC,POP,XPD,XPDA,XPDNM,Y,Z,%ZIS
"RTN","XPDDP",11,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDP",12,0)
 D ^DIC Q:Y<0
"RTN","XPDDP",13,0)
 S XPD("D0")="",XPD("XPDA")="",XPDA=+Y,Y="PNT^XPDDP(""XTMP(""""XPDI"""",XPDA,""""BLD"""",D0)"")",Z="Transport Global Print",D0=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDDP",14,0)
 Q:'D0
"RTN","XPDDP",15,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",16,0)
 Q
"RTN","XPDDP",17,0)
 ;
"RTN","XPDDP",18,0)
PNT(XPDGR) ;print a package, XPDGR=global root
"RTN","XPDDP",19,0)
 ;XPDFL=0 - Build - ^XPD(9.7 global root, 1 - Install - ^XTMP global root
"RTN","XPDDP",20,0)
 ;2 - Packman ^TMP($J, global root
"RTN","XPDDP",21,0)
 N I,J,K,X,XPD,XPDDT,XPDI,XPD0,XPDFL,XPDPG,XPDUL
"RTN","XPDDP",22,0)
 Q:$G(XPDGR)=""  S XPDGR="^"_XPDGR
"RTN","XPDDP",23,0)
 Q:'$D(@XPDGR@(0))  S XPD0=^(0),XPDPG=1,XPDFL=$S($E(XPDGR,1,5)="^TMP(":2,1:$E(XPDGR,1,5)="^XTMP"),$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDP",24,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR W XPDUL,!
"RTN","XPDDP",25,0)
 W "NATIONAL PACKAGE: ",$P($G(^DIC(9.4,+$P(XPD0,U,2),0),$P(XPD0,U,2)),U)
"RTN","XPDDP",26,0)
 W !,"DESCRIPTION:",!
"RTN","XPDDP",27,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(1,XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),!
"RTN","XPDDP",28,0)
 W !,"ENVIRONMENT CHECK : ",$G(@XPDGR@("PRE")),!,"PRE-INIT ROUTINE : ",$G(@XPDGR@("INI")),!,"POST-INIT ROUTINE: ",$G(@XPDGR@("INIT")),!
"RTN","XPDDP",29,0)
 I '$O(@XPDGR@(4,0)) Q:$$CHK(4)  G COMP
"RTN","XPDDP",30,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !! D HDR1 W XPDUL,!
"RTN","XPDDP",31,0)
PNT2 S XPDI=0 F  S XPDI=$O(@XPDGR@(4,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,222)) Q:$$CHK(4,1)  D
"RTN","XPDDP",32,0)
 .;file number, file name, partial DD
"RTN","XPDDP",33,0)
 .W !,XPDI,?12,$S('XPDFL:$P(^DIC(XPDI,0),U),1:$G(^XTMP("XPDI",XPDA,"FIA",XPDI)))
"RTN","XPDDP",34,0)
 .W ?41,$$EXTERNAL^DILFD(9.64,222.1,"",$P(XPD,U)),?47,$$EXTERNAL^DILFD(9.64,222.2,"",$P(XPD,U,2)),?53,$$EXTERNAL^DILFD(9.64,222.7,"",$P(XPD,U,7))
"RTN","XPDDP",35,0)
 .W ?60,$E($$EXTERNAL^DILFD(9.64,222.8,"",$P(XPD,U,8)),1,4),?67,$$EXTERNAL^DILFD(9.64,222.5,"",$P(XPD,U,5)),?73,$$EXTERNAL^DILFD(9.64,222.9,"",$P(XPD,U,9)),!
"RTN","XPDDP",36,0)
 .;print partial DD information
"RTN","XPDDP",37,0)
 .I $P(XPD,U,3)="p" S J=0 D
"RTN","XPDDP",38,0)
 ..W "Partial DD:"
"RTN","XPDDP",39,0)
 ..F  S J=$O(@XPDGR@(4,"APDD",XPDI,J)) Q:'J  W ?12,"subDD: ",J D  Q:$$CHK(4,1)
"RTN","XPDDP",40,0)
 ...I '$O(@XPDGR@(4,"APDD",XPDI,J,0)) W ! Q
"RTN","XPDDP",41,0)
 ...S I=0 F  S I=$O(@XPDGR@(4,"APDD",XPDI,J,I)) Q:'I  W ?30,"fld: ",I,!
"RTN","XPDDP",42,0)
 .I $D(@XPDGR@(4,XPDI,223)) W ?2,"DD SCREEN  : ",^(223),!
"RTN","XPDDP",43,0)
 .I $D(@XPDGR@(4,XPDI,224)) W ?2,"DATA SCREEN: ",^(224),!
"RTN","XPDDP",44,0)
COMP Q:$D(DIRUT)  W ! Q:$$CHK(3)  S I=0,XPD=$P(^DD(9.68,.03,0),U,3)
"RTN","XPDDP",45,0)
 ;print build components
"RTN","XPDDP",46,0)
 F  S I=$O(@XPDGR@("KRN",I)),K=0,J="" Q:$D(DIRUT)!'I  F  S J=$O(@XPDGR@("KRN",I,"NM","B",J)) Q:J=""  S X=$O(^(J,0)) Q:$$CHK(4)  D:X
"RTN","XPDDP",47,0)
 .S X=$G(@XPDGR@("KRN",I,"NM",X,0)) Q:X=""
"RTN","XPDDP",48,0)
 .;K is flag to write type of component
"RTN","XPDDP",49,0)
 .I 'K W !,$S($D(^DIC(I,0)):$P(^(0),U),XPDFL:$G(^XTMP("XPDI",XPDA,"FIA",I),"UNKNOWN"),1:"UNKNOWN")_":",! S K=1
"RTN","XPDDP",50,0)
 .;write the entry name and write the action
"RTN","XPDDP",51,0)
 .W ?3,$P(X,U),?50,$P($P(XPD,";",$P(X,U,3)+1),":",2),!
"RTN","XPDDP",52,0)
 Q:XPDFL=2
"RTN","XPDDP",53,0)
 ;XPDFL=2 this is a Packman message, called from XMP2 - Summarize
"RTN","XPDDP",54,0)
 ;XPDFL=1 this is a Install, the call backs are already Build Components
"RTN","XPDDP",55,0)
 I XPDFL=1 S I=0 D:$O(^XTMP("XPDI",XPDA,"KRN",8995.8,0))
"RTN","XPDDP",56,0)
 .W !,"WINDOW CALL BACK",!
"RTN","XPDDP",57,0)
 .F  S I=$O(^XTMP("XPDI",XPDA,"KRN",8995.8,I)) Q:'I!$$CHK(4)  S X=$P(^(I,0),U) W ?3,X,?50,"SEND TO SITE",!
"RTN","XPDDP",58,0)
 ;'XPDFL this is a Build, need to get call backs
"RTN","XPDDP",59,0)
 I 'XPDFL D CB
"RTN","XPDDP",60,0)
 Q:$D(DIRUT)  Q:$$CHK(3)  W !,"INSTALL QUESTIONS: " S I=0
"RTN","XPDDP",61,0)
 F  S I=$O(@XPDGR@("QUES",I)) Q:'I  S X=$P(^(I,0),U),J=$G(^(1)),K=$G(^("A")) Q:$$CHK(5)  D
"RTN","XPDDP",62,0)
 .W !?5,"SUBSCIRPT: ",X,!,"DIR(0)=",J W:K]"" !,"DIR(""A"")=",K,!
"RTN","XPDDP",63,0)
 .F J=1:1 Q:'$D(@XPDGR@("QUES",I,"A1",J,0))  W "DIR(""A"",",J,")=",^(0),!
"RTN","XPDDP",64,0)
 .I $G(@XPDGR@("QUES",I,"B"))]"" W "DIR(""B"")=",^("B"),!
"RTN","XPDDP",65,0)
 .I $G(@XPDGR@("QUES",I,"Q"))]"" W "DIR(""?"")=",^("Q"),!
"RTN","XPDDP",66,0)
 .F J=1:1 Q:'$D(@XPDGR@("QUES",I,"Q1",J,0))  W "DIR(""?"",",J,")=",^(0),!
"RTN","XPDDP",67,0)
 .I $G(@XPDGR@("QUES",I,"QQ"))]"" W "DIR(""??"")=",^("QQ"),!
"RTN","XPDDP",68,0)
 .I $G(@XPDGR@("QUES",I,"M"))]"" W "M CODE: ",^("M"),!
"RTN","XPDDP",69,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",70,0)
 I $L($G(@XPDGR@("ABPKG"))) S XPD=^("ABPKG") D
"RTN","XPDDP",71,0)
 .W !,"ALPHA/BETA TESTING:",$$EXTERNAL^DILFD(9.6,20,"",$P(XPD,U)),?40,"INSTALLATION MESSAGE: ",$$EXTERNAL^DILFD(9.6,21,"",$P(XPD,U,2))
"RTN","XPDDP",72,0)
 .W !,"ADDRESS: ",$P(XPD,U,3),!!,"INCLUDE NAMESPACE",?30,"EXCLUDE NAMESPACE" S I=0
"RTN","XPDDP",73,0)
 .F  S I=$O(@XPDGR@("ABNS",I)),J=0 Q:'I  W !?5,^(I,0) F  S J=$O(@XPDGR@("ABNS",I,1,J)) Q:'J  W ?35,^(J,0),! Q:$$CHK(3)
"RTN","XPDDP",74,0)
 Q
"RTN","XPDDP",75,0)
CB ;call backs
"RTN","XPDDP",76,0)
 K ^TMP($J,"XPD")
"RTN","XPDDP",77,0)
 S I=""
"RTN","XPDDP",78,0)
 ;I=window object name, J=ien in window object file
"RTN","XPDDP",79,0)
 F  S I=$O(@XPDGR@("KRN",8995,"NM","B",I)) Q:I=""!$D(DIRUT)  D
"RTN","XPDDP",80,0)
 .S J=$O(^XTV(8995,"B",I,0)) Q:'J
"RTN","XPDDP",81,0)
 .D CBENV($NA(^XTV(8995,J,1)))
"RTN","XPDDP",82,0)
 .;loop thru 2=ASSOCIATED OBJECTS (2;0)
"RTN","XPDDP",83,0)
 .S K=0 F  S K=$O(^XTV(8995,J,2,K)) Q:'K  S X=$G(^(K,0)) D CBENV($NA(^XTV(8995,J,2,K,1)))
"RTN","XPDDP",84,0)
 .;loop thru 3=MENU ITEM (3;0)
"RTN","XPDDP",85,0)
 .S K=0 F  S K=$O(^XTV(8995,J,3,K)) Q:'K  S X=$G(^(K,0)) D:$P(X,U,4)
"RTN","XPDDP",86,0)
 ..;^TMP($J,"XPD") will be used to get all call backs
"RTN","XPDDP",87,0)
 ..S X=$$PT^XPDTA("^XTV(8995.8)",$P(X,U,4)) S:$L(X) ^TMP($J,"XPD",X)=""
"RTN","XPDDP",88,0)
 I $L($O(^TMP($J,"XPD",""))) W !,"WINDOW CALL BACK",! D
"RTN","XPDDP",89,0)
 .S I="" F  S I=$O(^TMP($J,"XPD",I)) Q:I=""!$$CHK(4)  W ?3,I,?50,"SEND TO SITE",!
"RTN","XPDDP",90,0)
 K ^TMP($J,"XPD")
"RTN","XPDDP",91,0)
 Q
"RTN","XPDDP",92,0)
 ;this code is taken from GUIEV^XPDTA1
"RTN","XPDDP",93,0)
CBENV(X) ;resolve events & call backs, X=Global root
"RTN","XPDDP",94,0)
 N %,%1
"RTN","XPDDP",95,0)
 ;loop thru 1=EVENTS (1;0)
"RTN","XPDDP",96,0)
 S %=0 F  S %=$O(@X@(%)) Q:'%  S %1=$G(^(%,0)) D:$P(%1,U,2)
"RTN","XPDDP",97,0)
 .;resolve CALL BACK USED (0;2) ^TMP($J,"XPD") will be used to get all call backs
"RTN","XPDDP",98,0)
 .S %1=$$PT^XPDTA("^XTV(8995.8)",$P(%1,U,2)) S:$L(%1) ^TMP($J,"XPD",%1)=""
"RTN","XPDDP",99,0)
 Q
"RTN","XPDDP",100,0)
 ;return 0 if header was not written, else "0^1"
"RTN","XPDDP",101,0)
CHK(Y,XPD) ;Y=excess lines XPD=1 print file header, return 1 to exit
"RTN","XPDDP",102,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDP",103,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDP",104,0)
 .N DIR,I,J,K,X
"RTN","XPDDP",105,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDP",106,0)
 S XPD=$G(XPD),XPDPG=XPDPG+1
"RTN","XPDDP",107,0)
 W @IOF D HDR,HDR1:XPD
"RTN","XPDDP",108,0)
 W XPDUL,!
"RTN","XPDDP",109,0)
 Q "0^1"
"RTN","XPDDP",110,0)
 ;
"RTN","XPDDP",111,0)
XMP2(X,D0) ;called from ^XMP2
"RTN","XPDDP",112,0)
 N XPDA S XPDA=-1
"RTN","XPDDP",113,0)
 D PNT(X) Q
"RTN","XPDDP",114,0)
 ;
"RTN","XPDDP",115,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!
"RTN","XPDDP",116,0)
 Q
"RTN","XPDDP",117,0)
HDR1 W ?41,"UP",?47,"SEND",?53,"DATA",?73,"USER",!,?41,"DATE",?47,"SEC.",?53,"COMES",?60,"SITE",?67,"RSLV",?73,"OVER"
"RTN","XPDDP",118,0)
 W !,"FILE #",?12,"NAME",?41,"DD",?47,"CODE",?53,"W/FILE",?60,"DATA",?67,"PTS",?73,"RIDE",!
"RTN","XPDDP",119,0)
 Q
"RTN","XPDE")
0^8^B34453657
"RTN","XPDE",1,0)
XPDE ;SFISC/RSD - Package Edit ; 16 Feb 96 15:01
"RTN","XPDE",2,0)
 ;;8.0;KERNEL;**2,15,21**;Jul 10, 1995
"RTN","XPDE",3,0)
 Q
"RTN","XPDE",4,0)
 ;these tags are called from options.
"RTN","XPDE",5,0)
EDIT ;edit Build file package
"RTN","XPDE",6,0)
 N DA,DIR,DDSFILE,DR,Y,Z
"RTN","XPDE",7,0)
 Q:'$$DIC("AEMQLZ","",1)  S DA=+Y
"RTN","XPDE",8,0)
 I $P(Y,U,3) D NEW(DA)
"RTN","XPDE",9,0)
 ;need code to start editing
"RTN","XPDE",10,0)
 S DR="[XPD EDIT BUILD]",DDSFILE="^XPD(9.6,"
"RTN","XPDE",11,0)
 D ^DDS Q:'$G(DA)
"RTN","XPDE",12,0)
 ;if full DD, kill multiple for partial DD
"RTN","XPDE",13,0)
 S Y=0 F  S Y=$O(^XPD(9.6,DA,4,Y)) Q:'Y  S Z=$G(^(Y,222)) D
"RTN","XPDE",14,0)
 .K:$P(Z,U,3)="f" ^XPD(9.6,DA,4,Y,2),^XPD(9.6,DA,4,"APDD",Y)
"RTN","XPDE",15,0)
 D QUIT(DA)
"RTN","XPDE",16,0)
 Q
"RTN","XPDE",17,0)
COPY ;copy a Build file package
"RTN","XPDE",18,0)
 N DA,DIK,DIR,FR,FR0,TO,TO0,X,Y,Z W !
"RTN","XPDE",19,0)
 Q:'$$DIC("QEAMZ","Copy FROM what Package: ")
"RTN","XPDE",20,0)
 S FR=+Y,FR0=Y(0),Z="QEAMZL",Z("S")="I Y'="_FR
"RTN","XPDE",21,0)
 I '$$DIC(.Z,"Copy TO what Package: ") D QUIT(FR) Q
"RTN","XPDE",22,0)
 S TO=Y,TO0=Y(0)
"RTN","XPDE",23,0)
 ;if this is not new, then it will be purged before copy.
"RTN","XPDE",24,0)
 I '$P(Y,U,3) W !,$P(TO0,U)," package will be PURGED before the copy."
"RTN","XPDE",25,0)
 W ! S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",26,0)
 S DIK="^XPD(9.6,",DA=+TO
"RTN","XPDE",27,0)
 I 'Y!$D(DIRUT) D  W ! Q
"RTN","XPDE",28,0)
 .;they didn't want to continue, kill if it was a new package.
"RTN","XPDE",29,0)
 .I $P(TO,U,3) D ^DIK W $P(TO0,U)," being deleted!"
"RTN","XPDE",30,0)
 .;unlock both packages
"RTN","XPDE",31,0)
 .D QUIT(FR),QUIT(TO)
"RTN","XPDE",32,0)
 D WAIT^DICD
"RTN","XPDE",33,0)
 K ^XPD(9.6,DA) M ^(DA)=^(FR) S $P(^(DA,0),U)=$P(TO0,U)
"RTN","XPDE",34,0)
 ;if new National Package name, then kill x-ref
"RTN","XPDE",35,0)
 I $P(TO0,U,2)]"",$P(FR0,U,2)'=$P(TO0,U,2) K ^XPD(9.6,"C",$E($P(TO0,U,2),1,30),DA) S DIK(1)=1 D EN1^DIK
"RTN","XPDE",36,0)
 D QUIT(FR),QUIT(TO)
"RTN","XPDE",37,0)
 W "    ...Done.",! Q
"RTN","XPDE",38,0)
BUILD ;build package from a namespace
"RTN","XPDE",39,0)
 N DA,D0,D1,DIR,XPDA,XPDI,XPDIC,XPDF,XPDN,X,X1,Y,Y1 W !
"RTN","XPDE",40,0)
 Q:'$$DIC("QEAML")
"RTN","XPDE",41,0)
 S XPDA=+Y W !
"RTN","XPDE",42,0)
 ;if not a new package
"RTN","XPDE",43,0)
 I '$P(Y,U,3) D  I $D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",44,0)
 .S DIR(0)="Y",DIR("A")="Package already exists, Want to PURGE the existing data",DIR("B")="NO",DIR("?")="YES will delete all the KERNEL FILE information for this package in the BUILD file."
"RTN","XPDE",45,0)
 .D ^DIR K DIR Q:'Y
"RTN","XPDE",46,0)
 .S Y=0 F  S Y=$O(^XPD(9.6,XPDA,"KRN",Y)) Q:'Y  K ^(Y,"NM")
"RTN","XPDE",47,0)
 E  D NEW(XPDA)
"RTN","XPDE",48,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDE",49,0)
 W ! S DIR(0)="FO^1:15^K:X'?.1""-""1U.15UNP X",DIR("A")="Namespace",DIR("?")="Enter 1 to 15 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDE",50,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDE",51,0)
 I '$D(XPDN)!$D(DTOUT)!$D(DUOUT) D QUIT(XPDA) Q
"RTN","XPDE",52,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDE",53,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDE",54,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDE",55,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDE",56,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDE",57,0)
 I 'Y!$D(DIRUT) D QUIT(XPDA) Q
"RTN","XPDE",58,0)
 D WAIT^DICD S (DA(2),D0)=XPDA,Y=""
"RTN","XPDE",59,0)
 F  S Y=$O(XPDN(1,Y)),D1=0 Q:Y=""  D
"RTN","XPDE",60,0)
 .F  S D1=$O(^XPD(9.6,D0,"KRN",D1)) Q:'D1  D
"RTN","XPDE",61,0)
 ..S (XPDF,DA(1))=D1,X=Y,XPDIC="^XPD(9.6,"_D0_",""KRN"","_D1_",""NM"",",XPDI("IEN")=0
"RTN","XPDE",62,0)
 ..N %,DD,DO,Y,XPD
"RTN","XPDE",63,0)
 ..D LIST^DIC(D1,"","","","*",.XPDI,X,"","I $$SCR1^XPDET(Y)")
"RTN","XPDE",64,0)
 ..F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDE",65,0)
 ...S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX^XPDET(X,$$GET1^DIQ(D1,%,$$TF^XPDET(D1),"I"))
"RTN","XPDE",66,0)
 ...S Y="+1,"_D1_","_D0_",",XPD(9.68,Y,.01)=X,XPD(9.68,Y,.03)=0
"RTN","XPDE",67,0)
 ...S:'$D(^XPD(9.6,D0,"KRN",D1,"NM",0)) ^XPD(9.6,D0,"KRN",D1,"NM",0)=U_$P(^DD(9.67,10,0),U,2)
"RTN","XPDE",68,0)
 ...D UPDATE^DIE("","XPD")
"RTN","XPDE",69,0)
 D QUIT(XPDA)
"RTN","XPDE",70,0)
 W "    ...Done.",! Q
"RTN","XPDE",71,0)
VER ;verify a Build file package
"RTN","XPDE",72,0)
 N XPDA,Y
"RTN","XPDE",73,0)
 Q:'$$DIC("AEMQLZ")  S XPDA=+Y
"RTN","XPDE",74,0)
 D EN^XPDV Q
"RTN","XPDE",75,0)
DIC(DIC,A,XPDL) ;DIC lookup to Build file, 9.6
"RTN","XPDE",76,0)
 N DLAYGO
"RTN","XPDE",77,0)
 S DIC(0)=$G(DIC),DIC="^XPD(9.6," S:$G(A)]"" DIC("A")=A
"RTN","XPDE",78,0)
 S:DIC(0)["L" DLAYGO=9.6,DIC("DR")="1"
"RTN","XPDE",79,0)
 D ^DIC Q:Y<0 0
"RTN","XPDE",80,0)
 I '$G(XPDL) L +^XPD(9.6,+Y):0 E  W !,"Being accessed by another user" Q 0
"RTN","XPDE",81,0)
 Q +Y
"RTN","XPDE",82,0)
 ;
"RTN","XPDE",83,0)
NEW(DA) ;create Kernel Files multiple for package DA
"RTN","XPDE",84,0)
 N I,J,X,XPDNEWF,XPD,XPDI
"RTN","XPDE",85,0)
 S:'$D(^XPD(9.6,DA,"KRN",0)) ^XPD(9.6,DA,"KRN",0)=U_$P(^DD(9.6,7,0),U,2)
"RTN","XPDE",86,0)
 S I=0
"RTN","XPDE",87,0)
 F J=1:1 S X=+$P($T(FILES+J),";;",2) Q:'X  S:$D(^DD(X)) I=I+1,(XPDI(I),XPD(9.67,"+"_I_","_DA_",",.01))=X
"RTN","XPDE",88,0)
 ;XPDNEWF is a flag in INPUT transform of BUILD COMPONENT multiple
"RTN","XPDE",89,0)
 S XPD(9.6,DA_",",2)=0,XPDNEWF=1
"RTN","XPDE",90,0)
 D UPDATE^DIE("","XPD","XPDI")
"RTN","XPDE",91,0)
 Q
"RTN","XPDE",92,0)
QUIT(Y) ;unlock Y
"RTN","XPDE",93,0)
 L -^XPD(9.6,Y)
"RTN","XPDE",94,0)
 Q
"RTN","XPDE",95,0)
 ;
"RTN","XPDE",96,0)
 ;;file;install order;x-ref;file build;entry build;file pre;entry pre;file post;entry post;delete
"RTN","XPDE",97,0)
FILES ;kernel files for field 7 in file 9.6
"RTN","XPDE",98,0)
 ;;101;11;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"RTN","XPDE",99,0)
 ;;8995;10;;GUIF^XPDTA1;GUIE^XPDTA1;GUIF1^XPDIA1;GUIE1^XPDIA1;GUIF2^XPDIA1;;EN^XPDGCDEL(%)
"RTN","XPDE",100,0)
 ;;19;14;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"RTN","XPDE",101,0)
 ;;409.61;13;1;;;;;;;LMDEL^XPDIA1
"RTN","XPDE",102,0)
 ;;19.1;3;1;;KEY^XPDTA1;;;;;KEYDEL^XPDIA1
"RTN","XPDE",103,0)
 ;;9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"RTN","XPDE",104,0)
 ;;9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"RTN","XPDE",105,0)
 ;;3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"RTN","XPDE",106,0)
 ;;.5;4;;;EDEOUT^DIFROMSO(.5,DA,"",XPDA);FPRE^DIFROMSI(.5,"",XPDA);EPRE^DIFROMSI(.5,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.5,DA,"",XPDA)
"RTN","XPDE",107,0)
 ;;.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"RTN","XPDE",108,0)
 ;;.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"RTN","XPDE",109,0)
 ;;.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"RTN","XPDE",110,0)
 ;;.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"RTN","XPDE",111,0)
 ;;.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"RTN","XPDE",112,0)
 ;;8994;12;1;;;;;;;RPCDEL^XPDIA1
"RTN","XPDI")
0^2^B49697777
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;03/06/96  09:48
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)  S XPDT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U)
"RTN","XPDI",7,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDT)<11!$D(XPDQUIT)
"RTN","XPDI",8,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",9,0)
 .;run enviroment check routine
"RTN","XPDI",10,0)
 .Q:$$ENV^XPDIL1(1)
"RTN","XPDI",11,0)
 .D QUES(XPDA) Q:'$D(XPDT(+XPDT))!$D(XPDQUIT)
"RTN","XPDI",12,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",13,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",14,0)
 .D XQSET(XPDA)
"RTN","XPDI",15,0)
 ;NONE = no Build to install
"RTN","XPDI",16,0)
 G NONE^XPDIL:'$O(XPDT(""))!$D(XPDQUIT)
"RTN","XPDI",17,0)
 W ! S XPDA=XPDST,XPDNM=XPDSET
"RTN","XPDI",18,0)
 ;disable options question
"RTN","XPDI",19,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",20,0)
 ;XPDSET=set name,also build name, of options that will be disabled
"RTN","XPDI",21,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",22,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",23,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",24,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",25,0)
 .S ^XTMP("XQOO",XPDSET,0)=^TMP($J,"XQOO",XPDSET,0)
"RTN","XPDI",26,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",27,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",28,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",29,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",30,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",31,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",32,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",33,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",34,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",35,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",36,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",37,0)
 ;check if they want to update other CPUs
"RTN","XPDI",38,0)
 I $G(XPDQUES("XPZ2")) D
"RTN","XPDI",39,0)
 .N DA,DIE,DR,Y
"RTN","XPDI",40,0)
 .S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",41,0)
 .W !!,"Please enter the VOLUME SETS you want me to update.",!
"RTN","XPDI",42,0)
 .D ^DIE I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",43,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",44,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",45,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",46,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",47,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",48,0)
 ;Kernel Virgin Install
"RTN","XPDI",49,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",50,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",51,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",52,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",53,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",54,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",55,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",56,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",57,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",58,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",59,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0,XPDIJ:$G(XPDIJ) Q
"RTN","XPDI",60,0)
 .N %DT
"RTN","XPDI",61,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",62,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",63,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",64,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",65,0)
 ..S Y=-1
"RTN","XPDI",66,0)
 .Q:$D(DTOUT)
"RTN","XPDI",67,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",68,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",69,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",70,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",71,0)
 .;save task into first Build
"RTN","XPDI",72,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDT=0
"RTN","XPDI",73,0)
 .F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPD(9.7,+XPDT(XPDT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",74,0)
 ;run install
"RTN","XPDI",75,0)
 U IO D:$G(XPDIJ) XPDIJ G EN^XPDIJ
"RTN","XPDI",76,0)
 Q
"RTN","XPDI",77,0)
QUES(XPDA) ;install questions; XPDA=ien in file 9.7
"RTN","XPDI",78,0)
 N XPDANS,XPDFIL,XPDFILN,XPDFILO,XPDNM,XPDQUES,X,Y
"RTN","XPDI",79,0)
 S XPDNM=$P(^XPD(9.7,XPDA,0),U) W !!,"Install Questions for ",XPDNM,!
"RTN","XPDI",80,0)
 ;pre-init questions
"RTN","XPDI",81,0)
 D DIR^XPDIQ("PRE") I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",82,0)
 ;file install questions
"RTN","XPDI",83,0)
 S XPDFIL=0
"RTN","XPDI",84,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL),X(0)=^(XPDFIL,0),X(1)=^(XPDFIL),XPDFILO=^(0,1) D  I $D(XPDQUIT) Q
"RTN","XPDI",85,0)
 .;check for DD screening logic
"RTN","XPDI",86,0)
 .I $G(^(10))]"" N XPDSCR S XPDSCR=^(10) ;^(10) is ref to ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,10) from prev line
"RTN","XPDI",87,0)
 .;XPDFILN=file name^global ref^partial DD
"RTN","XPDI",88,0)
 .;XPDANS=new file^DD screen failed^Data exists^update file name^user
"RTN","XPDI",89,0)
 .;doesn't want to update data  1=yes,0=no
"RTN","XPDI",90,0)
 .S XPDFILN=X_X(0)_U_X(1),XPDANS='($D(^DIC(XPDFIL,0))#2)_"^^"_''$O(@(X(0)_"0)"))
"RTN","XPDI",91,0)
 .W ! D DIR^XPDIQ("XPF",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI",92,0)
 .S:$G(XPDQUES("XPF"_XPDFIL_"#2"))=0 $P(XPDANS,U,5)=1
"RTN","XPDI",93,0)
 .S ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,2)=XPDANS
"RTN","XPDI",94,0)
 .F I=1:1:2 K XPDQUES("XPF"_XPDFIL_"#"_I)
"RTN","XPDI",95,0)
 ;XPDQUIT is by file questions in previous do loop, set in XPDIQ
"RTN","XPDI",96,0)
 I $D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",97,0)
 ;post-init questions
"RTN","XPDI",98,0)
 W ! D DIR^XPDIQ("POS") I $D(DIRUT)!$D(XPDQUIT) D ASKABRT Q
"RTN","XPDI",99,0)
 Q
"RTN","XPDI",100,0)
 ;lookup into file 9.7, XPDS=DIC("S") for lookup, return 0-fail or ien
"RTN","XPDI",101,0)
LOOK(XPDS) ;lookup Install
"RTN","XPDI",102,0)
 N DIC,Y,XPD,%
"RTN","XPDI",103,0)
 K XPDT
"RTN","XPDI",104,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDI",105,0)
 S:$L($G(XPDS)) DIC("S")=XPDS
"RTN","XPDI",106,0)
 D ^DIC Q:Y<0 0
"RTN","XPDI",107,0)
 S XPD=+Y,XPDT=0
"RTN","XPDI",108,0)
 W !!,"This Distribution was loaded on ",$$FMTE^XLFDT($P(Y(0),U,3))," with header of ",!,$G(^XPD(9.7,XPD,2)),!,"It consisted of the following Install(s):",!
"RTN","XPDI",109,0)
 ;build XPDT array
"RTN","XPDI",110,0)
 F  S XPDT=$O(^XPD(9.7,"ASP",XPD,XPDT)) Q:'XPDT  S Y=+$O(^(XPDT,0)) D
"RTN","XPDI",111,0)
 .S %=$P($G(^XPD(9.7,Y,0)),U)
"RTN","XPDI",112,0)
 .I %="" W "**ERROR in Install, You need to remove the Distribution and reload it**",!  S XPDQUIT=1 Q
"RTN","XPDI",113,0)
 .S XPDT(XPDT)=Y_U_%,(XPDT("DA",Y),XPDT("NM",%))=XPDT W %,!
"RTN","XPDI",114,0)
 S:'$O(XPDT(0)) XPDQUIT=1
"RTN","XPDI",115,0)
 Q XPD
"RTN","XPDI",116,0)
 ;
"RTN","XPDI",117,0)
XQSET(XPDA) ;get options & protocols to disable
"RTN","XPDI",118,0)
 ;put in ^TMP($J,"XQOO",starting build name)
"RTN","XPDI",119,0)
 N A,I,X,Y K ^TMP($J)
"RTN","XPDI",120,0)
 S ^TMP($J,"XQOO",XPDSET,0)="Package being installed^"_DT_U_DUZ
"RTN","XPDI",121,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",19,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",122,0)
 .S Y=$O(^DIC(19,"B",$P(X,U),0))
"RTN","XPDI",123,0)
 .;check that option exist and the Action is send or merge (0 or 3)
"RTN","XPDI",124,0)
 .I Y,$D(^DIC(19,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,19,Y)=$P(^(0),U,1,2)
"RTN","XPDI",125,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",101,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI",126,0)
 .S Y=$O(^ORD(101,"B",$P(X,U),0))
"RTN","XPDI",127,0)
 .I Y,$D(^ORD(101,Y,0)),'(A#3) S ^TMP($J,"XQOO",XPDSET,101,Y)=$P(^(0),U,1,2)
"RTN","XPDI",128,0)
 Q
"RTN","XPDI",129,0)
 ;XPDIJ need to install XPDIJ now & set routine flag to skip
"RTN","XPDI",130,0)
XPDIJ N DIE,XPDA,XCM,XCN,XCS,X
"RTN","XPDI",131,0)
 S XPDA=XPDIJ,DIE="^XTMP(""XPDI"",XPDIJ,""RTN"",""XPDIJ"",",XCN=0,X="XPDIJ"
"RTN","XPDI",132,0)
 X ^%ZOSF("SAVE")
"RTN","XPDI",133,0)
 S XCN=$$RTNUP^XPDUTL("XPDIJ",2)
"RTN","XPDI",134,0)
 Q
"RTN","XPDI",135,0)
 ;
"RTN","XPDI",136,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",137,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",138,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",139,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",140,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),! Q:XPDK=2
"RTN","XPDI",141,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",142,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP"),^XTMP("XPDI",XPDA)
"RTN","XPDI",143,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",144,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",145,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",146,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",147,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",148,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",149,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",150,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",151,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",152,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",153,0)
 D ^DIK
"RTN","XPDI",154,0)
 Q
"RTN","XPDI",155,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",156,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",157,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",158,0)
 W ! D ^DIR I Y D ABRTALL(1)
"RTN","XPDI",159,0)
 Q
"RTN","XPDI",160,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",161,0)
 N XPDA
"RTN","XPDI",162,0)
 S XPDT=0
"RTN","XPDI",163,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",164,0)
 Q
"RTN","XPDIA")
0^3^B37409722
"RTN","XPDIA",1,0)
XPDIA ;SFISC/RSD - Install Pre/Post Actions for Kernel Files ;02/16/96  11:21
"RTN","XPDIA",2,0)
 ;;8.0;KERNEL;**10,15,21**;Jul 10, 1995
"RTN","XPDIA",3,0)
 Q
"RTN","XPDIA",4,0)
OPTF1 ;options file pre
"RTN","XPDIA",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",6,0)
 Q
"RTN","XPDIA",7,0)
OPTE1 ;options entry pre
"RTN","XPDIA",8,0)
 N %,I
"RTN","XPDIA",9,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA",10,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",11,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",19,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",19,OLDA,10)
"RTN","XPDIA",12,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",13,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",14,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",15,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",16,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",17,0)
 .D ADD^XQOO1($P(XPDSET,U,2),19,DA)
"RTN","XPDIA",18,0)
 S I=^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),%=^DIC(19,DA,0)
"RTN","XPDIA",19,0)
 ;$P(%,U,3)=out of order message, if exist set it back
"RTN","XPDIA",20,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",21,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",22,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",23,0)
 ;if there is no reverse key, save the old key and flag
"RTN","XPDIA",24,0)
 I $P($G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3)),U)="",$L($P($G(^DIC(19,DA,3)),U)) S $P(I,U,16)=$P(%,U,16),$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3),U)=$P(^(3),U)
"RTN","XPDIA",25,0)
 S ^XTMP("XPDI",XPDA,"KRN",19,OLDA,0)=I
"RTN","XPDIA",26,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",27,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",19,OLDA,1,0)) ^DIC(19,DA,1)
"RTN","XPDIA",28,0)
 ;if Menu Text, (U;1) is different, kill C x-ref
"RTN","XPDIA",29,0)
 S I=$G(^DIC(19,DA,"U")) I I]"",I'=$G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,"U")) K ^DIC(19,"C",I)
"RTN","XPDIA",30,0)
 S I=0
"RTN","XPDIA",31,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",32,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",33,0)
 ;the file post action as a relink
"RTN","XPDIA",34,0)
 Q:XPDFL=3
"RTN","XPDIA",35,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",36,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",37,0)
 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^DIC(19,"AD",%,DA,I)
"RTN","XPDIA",38,0)
 ;kill Menus (10)
"RTN","XPDIA",39,0)
 K ^DIC(19,DA,10) Q
"RTN","XPDIA",40,0)
OPTF2 ;options file post
"RTN","XPDIA",41,0)
 N DA,DIK,I,X,Y,Y0
"RTN","XPDIA",42,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",43,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA",44,0)
 .;repoint Bulletin (220;1) and Mail Group (220;3)
"RTN","XPDIA",45,0)
 .S Y0=$G(^DIC(19,DA,220)) I Y0]"" S $P(Y0,U)=$$LK("^XMB(3.6)",$P(Y0,U)),$P(Y0,U,3)=$$LK("^XMB(3.8)",$P(Y0,U,3)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",46,0)
 .;repoint Windows (24;1)
"RTN","XPDIA",47,0)
 .S Y0=$G(^DIC(19,DA,24)) I Y0]"" S $P(Y0,U)=$$LK("^XTV(8995)",$P(Y0,U)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",48,0)
 .;repoint RPC (RPC;1)
"RTN","XPDIA",49,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,"RPC",I)) Q:'I  S Y0=$G(^(I,0)) D
"RTN","XPDIA",50,0)
 ..S Y=$$LK("^XWB(8994)",$P(Y0,U))
"RTN","XPDIA",51,0)
 ..I 'Y K ^DIC(19,DA,"RPC",I) D BMES^XPDUTL(" RPC "_$P(Y0,U)_" in Option "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",52,0)
 ..S X=(X+1)_U_I,$P(^DIC(19,DA,"RPC",I,0),U)=Y
"RTN","XPDIA",53,0)
 .S:X $P(^DIC(19,DA,"RPC",0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA",54,0)
 .;repoint Package (0;12) and Help Frame (0;7)
"RTN","XPDIA",55,0)
 .S Y0=^DIC(19,DA,0),$P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),$P(Y0,U,7)=$$LK("^DIC(9.2)",$P(Y0,U,7)),^DIC(19,DA,0)=Y0
"RTN","XPDIA",56,0)
 .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",57,0)
 .;merged, they could also be linked menu, but treat like merge
"RTN","XPDIA",58,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",59,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",60,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",61,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",62,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",63,0)
 ...S Y=$$LK("^DIC(19)",Y0)
"RTN","XPDIA",64,0)
 ...K ^DIC(19,DA,10,I,U) S:Y $P(^(0),U)=Y
"RTN","XPDIA",65,0)
 ...K:'Y ^DIC(19,DA,10,I)
"RTN","XPDIA",66,0)
 ..S X=(X+1)_U_I
"RTN","XPDIA",67,0)
 .S:X $P(^DIC(19,DA,10,0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA",68,0)
 .;re-index this option
"RTN","XPDIA",69,0)
 .D IX1^DIK
"RTN","XPDIA",70,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",71,0)
 Q
"RTN","XPDIA",72,0)
OPTDEL ;option delete
"RTN","XPDIA",73,0)
 D DEL("^DIC(19,",DUZ)
"RTN","XPDIA",74,0)
 D OPT^XPDIA2
"RTN","XPDIA",75,0)
 Q
"RTN","XPDIA",76,0)
PROF1 ;protocols file pre
"RTN","XPDIA",77,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",78,0)
 Q
"RTN","XPDIA",79,0)
PROE1 ;protocols entry pre
"RTN","XPDIA",80,0)
 N %,I
"RTN","XPDIA",81,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA",82,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",83,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",101,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",101,OLDA,10)
"RTN","XPDIA",84,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",85,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",86,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",87,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",88,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",89,0)
 .D ADD^XQOO1($P(XPDSET,U,2),101,DA)
"RTN","XPDIA",90,0)
 S I=^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),%=^ORD(101,DA,0)
"RTN","XPDIA",91,0)
 ;$P(%,U,3)=disable message, if exist set it back
"RTN","XPDIA",92,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",93,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",94,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",95,0)
 S ^XTMP("XPDI",XPDA,"KRN",101,OLDA,0)=I
"RTN","XPDIA",96,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",97,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",101,OLDA,1,0)) ^ORD(101,DA,1)
"RTN","XPDIA",98,0)
 ;kill old ACCESS multiple
"RTN","XPDIA",99,0)
 K ^ORD(101,DA,3) S I=0
"RTN","XPDIA",100,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",101,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",102,0)
 ;the file post action as a relink
"RTN","XPDIA",103,0)
 Q:XPDFL=3
"RTN","XPDIA",104,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",105,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",106,0)
 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^ORD(101,"AD",%,DA,I)
"RTN","XPDIA",107,0)
 K ^ORD(101,DA,10) Q
"RTN","XPDIA",108,0)
PROF2 ;protocols file post
"RTN","XPDIA",109,0)
 N DA,DIK,I,X,Y,Y0
"RTN","XPDIA",110,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",111,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA",112,0)
 .;repoint Package (0;12)
"RTN","XPDIA",113,0)
 .S Y0=^ORD(101,DA,0) S:$L($P(Y0,U,12)) $P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),^ORD(101,DA,0)=Y0
"RTN","XPDIA",114,0)
 .;repoint File Link (5;1), its a variable pointer
"RTN","XPDIA",115,0)
 .S Y0=$P($G(^ORD(101,DA,5)),U),Y=$P(Y0,";",2),Y0=$P(Y0,";")
"RTN","XPDIA",116,0)
 .I $L(Y0) S Y0=$O(@("^"_Y_"""B"","""_Y0_""",0)")),$P(^ORD(101,DA,5),U)=$S(Y0:Y0_";"_Y,1:"")
"RTN","XPDIA",117,0)
 .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",118,0)
 .;merged, they are also linked menu, but treat like merge
"RTN","XPDIA",119,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",120,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",121,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",122,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",123,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",124,0)
 ...S Y=$$LK("^ORD(101)",Y0)
"RTN","XPDIA",125,0)
 ...K ^ORD(101,DA,10,I,U) S:Y $P(^(0),U)=Y
"RTN","XPDIA",126,0)
 ...K:'Y ^ORD(101,DA,10,I)
"RTN","XPDIA",127,0)
 ..S X=X+1_U_I
"RTN","XPDIA",128,0)
 .S:X $P(^ORD(101,DA,10,0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA",129,0)
 .;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDIA",130,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,3,I)) Q:'I  S Y0=$G(^(I,0)) D
"RTN","XPDIA",131,0)
 ..;Y0=.01 of Menu(protocol)
"RTN","XPDIA",132,0)
 ..S Y0=$$LK("^DIC(19.1)",Y0)
"RTN","XPDIA",133,0)
 ..S:Y0 ^ORD(101,DA,3,I,0)=Y0,X=X+1_Y0
"RTN","XPDIA",134,0)
 ..K:'Y0 ^ORD(101,DA,3,I)
"RTN","XPDIA",135,0)
 .;re-index this option
"RTN","XPDIA",136,0)
 .D IX1^DIK
"RTN","XPDIA",137,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",138,0)
 Q
"RTN","XPDIA",139,0)
PRODEL ;option delete
"RTN","XPDIA",140,0)
 D DEL("^ORD(101,",DUZ)
"RTN","XPDIA",141,0)
 Q
"RTN","XPDIA",142,0)
LK(GR,X) ;lookup, GR=global root, X=lookup value
"RTN","XPDIA",143,0)
 Q:$G(X)="" ""
"RTN","XPDIA",144,0)
 N I S I=$O(@GR@("B",X,0))
"RTN","XPDIA",145,0)
 I I,$D(@GR@(I,0))#2 Q I
"RTN","XPDIA",146,0)
 Q ""
"RTN","XPDIA",147,0)
 ;
"RTN","XPDIA",148,0)
 ;this is used to add menu items to an option or protocol
"RTN","XPDIA",149,0)
MENU(DA,X,X0) ;DA=ien of option/protocol, X=Menu item, X0=0 node of menu item
"RTN","XPDIA",150,0)
 N DIC,DLAYGO,DIK,D0,D1,I,Y,Y0
"RTN","XPDIA",151,0)
 S DIC=$S(XPDFIL=19:"^DIC(19,",1:"^ORD(101,")_DA_",10,",DIC(0)="L",DLAYGO=XPDFIL,(D0,DA(1))=DA
"RTN","XPDIA",152,0)
 S:'$D(@(DIC_"0)")) @(DIC_"0)")=U_$P(^DD(XPDFIL,10,0),U,2)
"RTN","XPDIA",153,0)
 S:$L($G(X0)) DIC("DR")="2///"_$P(X0,U,2)_";3///"_$P(X0,U,3)_$S($L($P(X0,U,4)):";4///"_$P(X0,U,4)_";5///"_$P(X0,U,5)_";6///"_$P(X0,U,6),1:"")
"RTN","XPDIA",154,0)
 D ^DIC
"RTN","XPDIA",155,0)
 Q
"RTN","XPDIA",156,0)
DEL(DIK,DUZ) ;delete
"RTN","XPDIA",157,0)
 N DA,XPDI,XPDF
"RTN","XPDIA",158,0)
 S XPDI=0,DUZ(0)="@",XPDF=+$P(DIK,"(",2)
"RTN","XPDIA",159,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D
"RTN","XPDIA",160,0)
 .K ^TMP("DIFIXPT",$J) S DA=XPDI
"RTN","XPDIA",161,0)
 .D ^DIK ;FIXPT^DIA3("D",XPDF,XPDI)
"RTN","XPDIA",162,0)
 .I $D(^TMP("DIFIXPT",$J))  D WP^XPDUTL("^TMP(""DIFIXPT"",$J)")
"RTN","XPDIA",163,0)
 Q
"RTN","XPDIJ")
0^4^B67019619
"RTN","XPDIJ",1,0)
XPDIJ ;SFISC/RSD - Install Job ; 4 Apr 96 12:16
"RTN","XPDIJ",2,0)
 ;;8.0;KERNEL;**2,21**;Jul 10, 1995
"RTN","XPDIJ",3,0)
EN ;install all packages
"RTN","XPDIJ",4,0)
 ;XPDA=ien of first package
"RTN","XPDIJ",5,0)
 N XPD0,XPDSET,XPDQUIT,X,Y,ZTRTN,ZTDTH,ZTIO,ZTDESC,ZTSK
"RTN","XPDIJ",6,0)
 I ^%ZOSF("OS")["VAX DSM" N $ETRAP S $ETRAP="S %ZTER11S=$STACK D ERR^XPDIJ"
"RTN","XPDIJ",7,0)
 E  S X="ERR^XPDIJ",@^%ZOSF("TRAP")
"RTN","XPDIJ",8,0)
 Q:'$D(^XPD(9.7,+$G(XPDA),0))  S XPD0=^(0)
"RTN","XPDIJ",9,0)
 D INIT^XPDID
"RTN","XPDIJ",10,0)
 ;disable options & protocols for setname, XPDSET=1/0^setname^out of order msg.
"RTN","XPDIJ",11,0)
 S Y=$P(XPD0,U,8),XPDSET=+Y_U_$E(Y,2,99)_U_$S($L(Y):$P($G(^XTMP("XQOO",$E(Y,2,99),0)),U),1:"")
"RTN","XPDIJ",12,0)
 ;hang the number of seconds given in 0;10
"RTN","XPDIJ",13,0)
 I XPDSET D OFF^XQOO1($P(XPDSET,U,2)) I $P(XPD0,U,10) H ($P(XPD0,U,10)*60)
"RTN","XPDIJ",14,0)
 S Y=0
"RTN","XPDIJ",15,0)
 ;XPDABORT can be set in pre or post install to abort install
"RTN","XPDIJ",16,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDIJ",17,0)
 .N XPD,XPDA,XPDNM,XPDV,XPDV0,XPDX,XPDY,Y
"RTN","XPDIJ",18,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D IN
"RTN","XPDIJ",19,0)
 .;check status of other cpu jobs, do if not this volume
"RTN","XPDIJ",20,0)
 .X ^%ZOSF("UCI") S XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",21,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=^(XPDV,0) D:$P(XPDV0,U)'=XPDY
"RTN","XPDIJ",22,0)
 ..;if completed time,write message and quit
"RTN","XPDIJ",23,0)
 ..I $P(XPDV0,U,2) D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",24,0)
 ..;if job had no start time, write message and quit
"RTN","XPDIJ",25,0)
 ..I '$P(XPDV0,U,3) D  I '$P(XPDV0,U,3)  D BMES^XPDUTL(" ** Job on VOLUME SET "_$P(XPDV0,U)_" never started **"),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **") Q
"RTN","XPDIJ",26,0)
 ...D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to start.")
"RTN","XPDIJ",27,0)
 ...;hang 1 minute, try 5 times
"RTN","XPDIJ",28,0)
 ...F %=1:1:5 H 60 S XPDV0=^XPD(9.7,XPDA,"VOL",XPDV,0) Q:$P(XPDV0,U,3)
"RTN","XPDIJ",29,0)
 ..D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to complete.")
"RTN","XPDIJ",30,0)
 ..S XPD=0,XPDX=$G(^XPD(9.7,XPDA,"VOL",XPDV,1))
"RTN","XPDIJ",31,0)
 ..;check the last update node
"RTN","XPDIJ",32,0)
 ..F  S Y=$P(^XPD(9.7,XPDA,"VOL",XPDV,0),U,2),X=$G(^(1)),XPD=XPD+1 Q:XPD>20!Y  S:X'=XPDX XPD=0,XPDX=X H 180
"RTN","XPDIJ",33,0)
 ..;quit if we have a complete time
"RTN","XPDIJ",34,0)
 ..I Y D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",35,0)
 ..D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" has been idle for an hour."),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **")
"RTN","XPDIJ",36,0)
 S Y=0
"RTN","XPDIJ",37,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%
"RTN","XPDIJ",38,0)
 .N Y,XPD
"RTN","XPDIJ",39,0)
 .;update the status field
"RTN","XPDIJ",40,0)
 .S XPD(9.7,%_",",.02)=3
"RTN","XPDIJ",41,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",42,0)
 .;kill transport global
"RTN","XPDIJ",43,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIJ",44,0)
 ;ZTREQ tells taskman to delete task
"RTN","XPDIJ",45,0)
 I $G(ZTSK) S ZTREQ="@" D
"RTN","XPDIJ",46,0)
 .;remove task # from Install File
"RTN","XPDIJ",47,0)
 .N XPD S XPD(9.7,XPDA_",",5)="@"
"RTN","XPDIJ",48,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",49,0)
 D EXIT^XPDID("Install Completed"),^%ZISC
"RTN","XPDIJ",50,0)
 ;quit if install was aborted
"RTN","XPDIJ",51,0)
 Q:$D(XPDABORT)
"RTN","XPDIJ",52,0)
 ;put option back in order
"RTN","XPDIJ",53,0)
 I $P(XPDSET,U,2)]"" D ON^XQOO1($P(XPDSET,U,2)) K ^XTMP("XQOO",$P(XPDSET,U,2))
"RTN","XPDIJ",54,0)
 ;queue menu rebuild on current CPU
"RTN","XPDIJ",55,0)
 D CHEK^XQ83
"RTN","XPDIJ",56,0)
 ;check if need to queue menu rebuild on other CPUs
"RTN","XPDIJ",57,0)
 D:$O(^XPD(9.7,XPDA,"VOL",0))
"RTN","XPDIJ",58,0)
 .N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU
"RTN","XPDIJ",59,0)
 .X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",60,0)
 .;loop thru VOLUMES SET and don't do current volume set
"RTN","XPDIJ",61,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",62,0)
 ..S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="Install Menu Rebuild",ZTCPU=XPDV0,ZTRTN="CHEK^XQ83" D ^%ZTLOAD
"RTN","XPDIJ",63,0)
 Q
"RTN","XPDIJ",64,0)
IN ;install XPDA
"RTN","XPDIJ",65,0)
 ;XPDA=ien of file 9.7, XPDNM=package name
"RTN","XPDIJ",66,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDIJ",67,0)
 ;check if already installed
"RTN","XPDIJ",68,0)
 Q:$P($G(^XPD(9.7,XPDA,1)),U,3)
"RTN","XPDIJ",69,0)
 N DIFROM,XPD,XPDBLD,XPDCHECK,XPDCP,XPDI,XPDRTN,XPDIST,XPDIDTOT,XPDIDCNT,XPDIDMOD
"RTN","XPDIJ",70,0)
 ;XPDBLD subscript for build entry i.e. ^XTMP("XPDI",XPDA,"BLD",XPDBLD
"RTN","XPDIJ",71,0)
 S DIFROM=$$VER^XPDUTL(XPDNM),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDIJ",72,0)
 D TITLE^XPDID(XPDNM)
"RTN","XPDIJ",73,0)
 I '$$CHK(11) D
"RTN","XPDIJ",74,0)
 .D BMES^XPDUTL(" Install Started for "_XPDNM_" : "),STMP(11)
"RTN","XPDIJ",75,0)
 .;update status and installed by fields
"RTN","XPDIJ",76,0)
 .S XPD(9.7,XPDA_",",.02)=2,XPD(9.7,%_",",9)=DUZ
"RTN","XPDIJ",77,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",78,0)
 E  D BMES^XPDUTL(" Install Restarted for "_XPDNM_" at "_$$HTE^XLFDT($H))
"RTN","XPDIJ",79,0)
 I '$$CHK(12) D
"RTN","XPDIJ",80,0)
 .;jobup RTN^XPDIJ(XPDA), to install routines on other CPU if Taskman is running
"RTN","XPDIJ",81,0)
 .;this multiple should only be set for MSM systems, set in XPZ2^XPDIQ
"RTN","XPDIJ",82,0)
 .D:$O(^XPD(9.7,XPDA,"VOL",0))&$$TM^%ZTLOAD
"RTN","XPDIJ",83,0)
 ..N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU,ZTDESC,ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","XPDIJ",84,0)
 ..X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",85,0)
 ..F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",86,0)
 ...S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="KIDS update CPUs "_XPDV0,ZTCPU=XPDV0,ZTRTN="EN^XPDCPU("_XPDA_","_XPDV_")"
"RTN","XPDIJ",87,0)
 ...D ^%ZTLOAD
"RTN","XPDIJ",88,0)
 ...;save task number under Volume set multiple
"RTN","XPDIJ",89,0)
 ...Q:'$G(ZTSK)  K XPD
"RTN","XPDIJ",90,0)
 ...S XPD(9.703,XPDV_","_XPDA_",",3)=ZTSK D FILE^DIE("","XPD")
"RTN","XPDIJ",91,0)
 .D BMES^XPDUTL(" Installing Routines:"),SETTOT^XPDID(9.8),RTN(XPDA),STMP(12)
"RTN","XPDIJ",92,0)
 E  D BMES^XPDUTL(" Routines already installed.")
"RTN","XPDIJ",93,0)
 S XPDCP="INI"
"RTN","XPDIJ",94,0)
 ;check if pre-install has completed
"RTN","XPDIJ",95,0)
 I '$$VERCP^XPDUTL("XPD PREINSTALL COMPLETED") D  Q:$D(XPDABORT)
"RTN","XPDIJ",96,0)
 .;setup XPDQUES array with pre-install questions/answers
"RTN","XPDIJ",97,0)
 .D QUES^XPDIQ("PRE")
"RTN","XPDIJ",98,0)
 .;XPDCHECK=ien of current checkpoint, (0)=name of checkpoint
"RTN","XPDIJ",99,0)
 .;XPDCP="INI"-pre install or "INIT"-post install
"RTN","XPDIJ",100,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ",101,0)
 .S XPDCHECK=1
"RTN","XPDIJ",102,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INI",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D  Q:$D(XPDABORT)
"RTN","XPDIJ",103,0)
 ..;if there is no call back, quit
"RTN","XPDIJ",104,0)
 ..Q:$G(^XPD(9.7,XPDA,"INI",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ",105,0)
 ..;check if checkpoint has been completed
"RTN","XPDIJ",106,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ",107,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Pre-Install Routine: "_XPDRTN)
"RTN","XPDIJ",108,0)
 ..;zero the progress bar
"RTN","XPDIJ",109,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ",110,0)
 ..D @XPDRTN
"RTN","XPDIJ",111,0)
 ..;write message and abort if developer wants
"RTN","XPDIJ",112,0)
 ..I $D(XPDABORT) D BMES^XPDUTL("Install ** ABORTED ** in Pre-Install program") Q
"RTN","XPDIJ",113,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ",114,0)
 .;complete pre-init check point
"RTN","XPDIJ",115,0)
 .S %=$$COMCP^XPDUTL("XPD PREINSTALL COMPLETED")
"RTN","XPDIJ",116,0)
 E  D BMES^XPDUTL(" Pre-Install already finished.")
"RTN","XPDIJ",117,0)
 ;build XPDQUES arrays for all of the FM Files
"RTN","XPDIJ",118,0)
 D QUES^XPDIQ("XPF")
"RTN","XPDIJ",119,0)
 ;check the last file and see if it's already installed
"RTN","XPDIJ",120,0)
 S XPD=$G(^(+$O(^XPD(9.7,XPDA,4,"A"),-1),0))
"RTN","XPDIJ",121,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"FIA"))
"RTN","XPDIJ",122,0)
 .D BMES^XPDUTL(" Installing Data Dictionaries: "),SETTOT^XPDID(4),FIA^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",123,0)
 E  D BMES^XPDUTL(" Data Dictionaries already installed.")
"RTN","XPDIJ",124,0)
 S %=+$O(^XTMP("XPDI",XPDA,"DATA",""),-1),XPD=$G(^XPD(9.7,XPDA,4,%,0))
"RTN","XPDIJ",125,0)
 I '$P(XPD,U,3) D:%
"RTN","XPDIJ",126,0)
 .D BMES^XPDUTL(" Installing Data: "),DAT^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",127,0)
 E  D BMES^XPDUTL(" Data already installed.")
"RTN","XPDIJ",128,0)
 S (%,XPD)=""
"RTN","XPDIJ",129,0)
 F  S %=+$O(^XPD(9.7,XPDA,"KRN",%)) Q:'%  S XPD=$G(^(%,0)) Q:'$P(XPD,U,2)
"RTN","XPDIJ",130,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"KRN"))
"RTN","XPDIJ",131,0)
 .D BMES^XPDUTL(" Installing PACKAGE COMPONENTS: "),KRN^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",132,0)
 E  D BMES^XPDUTL(" PACKAGE COMPONENTS already installed.")
"RTN","XPDIJ",133,0)
 S XPDCP="INIT"
"RTN","XPDIJ",134,0)
 ;check if post-install has completed
"RTN","XPDIJ",135,0)
 I '$$VERCP^XPDUTL("XPD POSTINSTALL COMPLETED") D
"RTN","XPDIJ",136,0)
 .;setup XPDQUES array with post-install questions/answers
"RTN","XPDIJ",137,0)
 .D QUES^XPDIQ("POS")
"RTN","XPDIJ",138,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ",139,0)
 .S XPDCHECK=1
"RTN","XPDIJ",140,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INIT",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D
"RTN","XPDIJ",141,0)
 ..;if there is no call back, quit
"RTN","XPDIJ",142,0)
 ..Q:$G(^XPD(9.7,XPDA,"INIT",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ",143,0)
 ..;quit if checkpoint has completed time
"RTN","XPDIJ",144,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ",145,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Post-Install Routine: "_XPDRTN)
"RTN","XPDIJ",146,0)
 ..;zero the progress bar
"RTN","XPDIJ",147,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ",148,0)
 ..D @XPDRTN
"RTN","XPDIJ",149,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ",150,0)
 .;complete post-init check point
"RTN","XPDIJ",151,0)
 .S %=$$COMCP^XPDUTL("XPD POSTINSTALL COMPLETED")
"RTN","XPDIJ",152,0)
 E  D BMES^XPDUTL(" Post-Install already finished.")
"RTN","XPDIJ",153,0)
 ;move routines to install file & Routine file
"RTN","XPDIJ",154,0)
 D BMES^XPDUTL(" Updating Routine file..."),SETTOT^XPDID(9.8),RTN^XPDIP
"RTN","XPDIJ",155,0)
 ;XPDIST is flag for site tracking^A/B install message, it is set in PKG^XPDIP
"RTN","XPDIJ",156,0)
 ;install Package file, OERR parameter multiple, and Build file
"RTN","XPDIJ",157,0)
 S XPDIST="" D BMES^XPDUTL(" Updating KIDS files..."),PKG^XPDIP
"RTN","XPDIJ",158,0)
 D BMES^XPDUTL(" "_XPDNM_" Installed. "),STMP(17)
"RTN","XPDIJ",159,0)
 ;sends install messages
"RTN","XPDIJ",160,0)
 I $L(XPDIST) S %=$$EN^XPDIST(XPDA,XPDIST) D BMES^XPDUTL(" "_$P("NO ",U,'$P(%,"#",2))_"Install Message sent "_%)
"RTN","XPDIJ",161,0)
 Q
"RTN","XPDIJ",162,0)
 ;
"RTN","XPDIJ",163,0)
STMP(X) ;timestamp checkpoints in file 9.7, X=field #
"RTN","XPDIJ",164,0)
 N XPD,%
"RTN","XPDIJ",165,0)
 S %=$$NOW^XLFDT,XPD(9.7,XPDA_",",X)=%
"RTN","XPDIJ",166,0)
 D MES^XPDUTL("               "_$$FMTE^XLFDT(%)),FILE^DIE("","XPD")
"RTN","XPDIJ",167,0)
 Q
"RTN","XPDIJ",168,0)
CHK(X) ;check checkpoints in file 9.7, X=field #, returns 1=completed, 0=not completed
"RTN","XPDIJ",169,0)
 Q $$GET1^DIQ(9.7,XPDA_",",X,"I")]""
"RTN","XPDIJ",170,0)
 ;
"RTN","XPDIJ",171,0)
SAVE(X) ;restore routine X
"RTN","XPDIJ",172,0)
 N %,DIE,XCM,XCN,XCS
"RTN","XPDIJ",173,0)
 S DIE="^XTMP(""XPDI"",XPDA,""RTN"",X,",XCN=0
"RTN","XPDIJ",174,0)
 X ^%ZOSF("SAVE")
"RTN","XPDIJ",175,0)
 Q
"RTN","XPDIJ",176,0)
RTN(XPDA) ;restore all routines for package XPDA
"RTN","XPDIJ",177,0)
 ;^XPD("XPDI",XPDA,"RTN",routine name)=0-install, 1-delete, 2-skip^checksum
"RTN","XPDIJ",178,0)
 Q:$G(XPDA)=""
"RTN","XPDIJ",179,0)
 N X,XPDI,XPDJ S XPDI=""
"RTN","XPDIJ",180,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S XPDJ=^(XPDI) D
"RTN","XPDIJ",181,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIJ",182,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",183,0)
 .I 'XPDJ D SAVE(XPDI) Q
"RTN","XPDIJ",184,0)
 .;set checksum to null, since routine wasn't loaded
"RTN","XPDIJ",185,0)
 .I $P(XPDJ,U,2) S $P(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"KRN",9.8,"NM",$P(XPDJ,U,2),0),U,4)=""
"RTN","XPDIJ",186,0)
 .I $P(XPDJ,U)=1 S X=XPDI X ^%ZOSF("DEL")
"RTN","XPDIJ",187,0)
 ;if graphic display, update full count
"RTN","XPDIJ",188,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",189,0)
 Q
"RTN","XPDIJ",190,0)
 ;come here on error, record error and then go to error trap
"RTN","XPDIJ",191,0)
ERR D BMES^XPDUTL($$EC^%ZOSV),EXIT^XPDID()
"RTN","XPDIJ",192,0)
 G ERR^ZU
"RTN","XPDIP")
0^16^B28381829
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;03/14/96  10:57
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21**;Jul 10, 1995
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file
"RTN","XPDIP",9,0)
 S XPDPKG=+$P(^XPD(9.7,XPDA,0),U,2),OLDA=+$O(^XTMP("XPDI",XPDA,"PKG",0)),Y=$G(^(OLDA,0))
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'OLDA PKGEND
"RTN","XPDIP",12,0)
 ;if package already exist, then update version multiple
"RTN","XPDIP",13,0)
 I XPDPKG,$D(^DIC(9.4,XPDPKG,0)) S DA=XPDPKG D PKGV G PKGH
"RTN","XPDIP",14,0)
 ;PKGEND if Package entry wasn't added
"RTN","XPDIP",15,0)
 D  G:'XPDPKG PKGEND
"RTN","XPDIP",16,0)
 .Q:'$L(Y)
"RTN","XPDIP",17,0)
 .S Y=$P(Y,U),XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,Y) Q:'Y
"RTN","XPDIP",18,0)
 .S (DA,XPDPKG)=+Y
"RTN","XPDIP",19,0)
 .;if new entry in package file, bring in everything
"RTN","XPDIP",20,0)
 .I $P(Y,U,3) D
"RTN","XPDIP",21,0)
 ..M ^DIC(9.4,XPDPKG)=^XTMP("XPDI",XPDA,"PKG",OLDA)
"RTN","XPDIP",22,0)
 ..;kill the -1 flag node first
"RTN","XPDIP",23,0)
 ..K ^DIC(9.4,XPDPKG,-1)
"RTN","XPDIP",24,0)
 ..;re-cross ref after adding a new package
"RTN","XPDIP",25,0)
 ..S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",26,0)
 .;add package to file 9.7
"RTN","XPDIP",27,0)
 .K XPD S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIP",28,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",29,0)
 .D PKGV
"RTN","XPDIP",30,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",31,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",32,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",33,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",34,0)
 ;OERR Package Parameter multiple in file 100.99
"RTN","XPDIP",35,0)
 D:$D(^ORD(100.99))&$D(^XTMP("XPDI",XPDA,"OER",OLDA))
"RTN","XPDIP",36,0)
 .S DA(1)=1,DIK="^ORD(100.99,1,5," D:$D(^ORD(100.99,1,5,DA)) ^DIK
"RTN","XPDIP",37,0)
 .S:'$D(^ORD(100.99,1,5,0)) ^ORD(100.99,1,5,0)=U_$P(^DD(100.99,5,0),U,2) S $P(^(0),U,3,4)=DA_U_($P(^(0),U,3)+1)
"RTN","XPDIP",38,0)
 .M ^ORD(100.99,1,5,DA)=^XTMP("XPDI",XPDA,"OER",OLDA) S $P(^(DA,0),U)=DA,%=$P(^(0),U,4)
"RTN","XPDIP",39,0)
 .S:$L(%) $P(^ORD(100.99,1,5,DA,0),U,4)=$$LK^XPDIA("^ORD(100.98)",%)
"RTN","XPDIP",40,0)
 .D IX1^DIK
"RTN","XPDIP",41,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",42,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",43,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D:$P(%,U)="y"
"RTN","XPDIP",44,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",45,0)
 .S:$P(%,U,2)="y"&$L($P(%,U,3)) $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",46,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",47,0)
 Q
"RTN","XPDIP",48,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",49,0)
 N DA,DIK,XPDFIL,Y
"RTN","XPDIP",50,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",51,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",52,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",53,0)
 S DA=+Y
"RTN","XPDIP",54,0)
 ;XPDPKG=Package file ien, could be 0 if no package file
"RTN","XPDIP",55,0)
 K:'$P(Y,U,3) ^XPD(9.6,DA),^XPD(9.6,"C",XPDPKG,DA)
"RTN","XPDIP",56,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",57,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",58,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",59,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",60,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",61,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",62,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",63,0)
 Q DA
"RTN","XPDIP",64,0)
 ;
"RTN","XPDIP",65,0)
 ;update the version multiple in the package file
"RTN","XPDIP",66,0)
PKGV N %
"RTN","XPDIP",67,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",68,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",69,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",70,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",71,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",72,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",73,0)
 ;update patch history multiple
"RTN","XPDIP",74,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",75,0)
 S $P(%,U,2,3)=DT_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",76,0)
 Q
"RTN","XPDIP",77,0)
 ;
"RTN","XPDIP",78,0)
PKGVER(XPDA,XPDI) ;update version in package file, XPDA=ien, return ien
"RTN","XPDIP",79,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",80,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",81,0)
 N I,X,XPD,XPDJ
"RTN","XPDIP",82,0)
 S XPD(9.4,XPDA_",",13)=$P(XPDI,U),X="XPD(9.49,""?+1,"_XPDA_","")",@X@(.01)=$P(XPDI,U)
"RTN","XPDIP",83,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",84,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",85,0)
 D UPDATE^DIE("","XPD","XPDJ")
"RTN","XPDIP",86,0)
 Q $G(XPDJ(1))
"RTN","XPDIP",87,0)
 ;
"RTN","XPDIP",88,0)
PKGPAT(XPDA,XPDV,XPDI) ;update patch history, XPDA=ien, XPDV=version
"RTN","XPDIP",89,0)
 ;XPDI=patch^date distr.^install by,   returns version ien^patch ien
"RTN","XPDIP",90,0)
 N I,X,XPD,XPDJ
"RTN","XPDIP",91,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",92,0)
 S XPDV=$$FIND1^DIC(9.49,","_XPDA_",","X",XPDV) Q:'XPDV 0
"RTN","XPDIP",93,0)
 S X="XPD(9.4901,""?+1,"_XPDV_","_XPDA_","")",@X@(.01)=$P(XPDI,U)
"RTN","XPDIP",94,0)
 F I=.01:.01:.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",95,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",96,0)
 D UPDATE^DIE("","XPD","XPDJ")
"RTN","XPDIP",97,0)
 Q XPDV_U_$G(XPDJ(1))
"RTN","XPDIP",98,0)
 ;
"RTN","XPDIP",99,0)
RTN ;move rtns to install file
"RTN","XPDIP",100,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X
"RTN","XPDIP",101,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",102,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ=""
"RTN","XPDIP",103,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",104,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",105,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",106,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",107,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",108,0)
 .;XPDR, build array to update ROUTINE file
"RTN","XPDIP",109,0)
 .S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",110,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",111,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",112,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",113,0)
 .S XPDI=0
"RTN","XPDIP",114,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",115,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",116,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",117,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",118,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",119,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",120,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",121,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",122,0)
 ;compile template routines
"RTN","XPDIP",123,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",124,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",125,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",126,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",127,0)
 ;update Routine file
"RTN","XPDIP",128,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",129,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",130,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",131,0)
 Q
"RTN","XPDIPM")
0^5^B2962508
"RTN","XPDIPM",1,0)
XPDIPM ;SFISC/RSD - Load a Packman Message ;02/16/96  13:35
"RTN","XPDIPM",2,0)
 ;;8.0;KERNEL;**21**;Jul 05, 1995
"RTN","XPDIPM",3,0)
 Q:'$D(^XMB(3.9,+$G(XMZ),0))
"RTN","XPDIPM",4,0)
 N X,XPD,Y S XPD=0
"RTN","XPDIPM",5,0)
 F  S XPD=$O(^XMB(3.9,XMZ,2,XPD)) Q:+XPD'=XPD  S X=^(XPD,0) I $E(X,1,11)="$TXT $KIDS " Q
"RTN","XPDIPM",6,0)
 S Y=$P(X,"$KIDS ",2)
"RTN","XPDIPM",7,0)
EN I 'XPD!'$L(Y) W !!,"Couldn't find a KIDS package!!",*7 Q
"RTN","XPDIPM",8,0)
 N DIR,DIRUT,GR,XPDA,XPDST,XPDIT,XPDT,XPDNM,XPDQUIT
"RTN","XPDIPM",9,0)
 S XPDST("H1")=$P(^XMB(3.9,XMZ,0),U),XPDST=0,XPDIT=1
"RTN","XPDIPM",10,0)
 W !?5,Y S XPDA=$$INST^XPDIL1(Y) G:'XPDA NONE^XPDIL
"RTN","XPDIPM",11,0)
 W !
"RTN","XPDIPM",12,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIPM",13,0)
 D ^DIR I 'Y!$D(DIRUT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",14,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIPM",15,0)
 D GI I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",16,0)
 D PKG^XPDIL1(XPDA)
"RTN","XPDIPM",17,0)
 Q
"RTN","XPDIPM",18,0)
GI D NXT Q:$G(XPDQUIT)
"RTN","XPDIPM",19,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) S XPDQUIT=1 Q
"RTN","XPDIPM",20,0)
 S GR="^XTMP(""XPDI"","_XPDA_","
"RTN","XPDIPM",21,0)
 F  D NXT Q:X=""!$D(XPDQUIT)  D
"RTN","XPDIPM",22,0)
 .S @(GR_X)=Y
"RTN","XPDIPM",23,0)
 Q
"RTN","XPDIPM",24,0)
NXT S (X,Y)="",XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR S X=^(XPD,0)
"RTN","XPDIPM",25,0)
 I $E(X,1,5)="$END " S X="" Q
"RTN","XPDIPM",26,0)
 S XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR
"RTN","XPDIPM",27,0)
 S Y=^XMB(3.9,XMZ,2,XPD,0)
"RTN","XPDIPM",28,0)
 Q
"RTN","XPDIPM",29,0)
XMP2 ;called from XMP2
"RTN","XPDIPM",30,0)
 N X,XPD,Y
"RTN","XPDIPM",31,0)
 S XPD=XCN,X=$G(^XMB(3.9,XMZ,2,XPD,0)),Y=$P(X,"$KID ",2)
"RTN","XPDIPM",32,0)
 D EN
"RTN","XPDIPM",33,0)
 S XMOUT=1
"RTN","XPDIPM",34,0)
 Q
"RTN","XPDIPM",35,0)
ERR W !!,"Error in Packman Message, ABORTING load!!"
"RTN","XPDIPM",36,0)
 S (X,Y)="",XPDQUIT=1
"RTN","XPDIPM",37,0)
 Q
"RTN","XPDIQ")
0^11^B13427313
"RTN","XPDIQ",1,0)
XPDIQ ;SFISC/RSD - Install Questions ;02/16/96  14:00
"RTN","XPDIQ",2,0)
 ;;8.0;KERNEL;**21**;Jul 10, 1995
"RTN","XPDIQ",3,0)
 Q
"RTN","XPDIQ",4,0)
DIR(XPFR,XPFP) ;XPFR=prefix, XPFP=file no._#
"RTN","XPDIQ",5,0)
 N DIR,DR,XPDI,XPDJ,X,Y,Z
"RTN","XPDIQ",6,0)
 S XPFP=$G(XPFP),XPDI=$S(XPFP:XPFR_XPFP,1:XPFR)
"RTN","XPDIQ",7,0)
 D QUES(XPDI)
"RTN","XPDIQ",8,0)
 ;ask questions
"RTN","XPDIQ",9,0)
 S X=XPFR
"RTN","XPDIQ",10,0)
 F  S X=$O(^XTMP("XPDI",XPDA,"QUES",X)),Z="" Q:X=""!($P(X,XPFR)]"")  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIQ",11,0)
 .S XPDJ=$S('XPFP:X,1:XPDI_$P(X,XPFR,2))
"RTN","XPDIQ",12,0)
 .F  S Z=$O(^XTMP("XPDI",XPDA,"QUES",X,Z)) Q:Z=""  M DIR(Z)=^(Z)
"RTN","XPDIQ",13,0)
 .S:$L($G(XPDQUES(XPDJ))) DIR("B")=$G(XPDQUES(XPDJ,"B"),XPDQUES(XPDJ)) D  Q:'$D(Y)
"RTN","XPDIQ",14,0)
 ..N FLAG,X,Z K Y
"RTN","XPDIQ",15,0)
 ..I $D(DIR("M")) S %=DIR("M"),FLAG="" K DIR("M") X %
"RTN","XPDIQ",16,0)
 ..Q:'$D(DIR)
"RTN","XPDIQ",17,0)
 ..S:$G(DIR("A"))["|" DIR("A")=$P(DIR("A"),"|")_@$P(DIR("A"),"|",2)_$P(DIR("A"),"|",3)
"RTN","XPDIQ",18,0)
 ..D ^DIR
"RTN","XPDIQ",19,0)
 .S:$E(DIR(0))="Y" Y(0)=$S(Y:"YES",1:"NO")
"RTN","XPDIQ",20,0)
 .S XPDQUES(XPDJ)=Y,XPDQUES(XPDJ,"A")=$G(DIR("A")),XPDQUES(XPDJ,"B")=$G(Y(0))
"RTN","XPDIQ",21,0)
 .K DIR
"RTN","XPDIQ",22,0)
 K XPDJ S XPDI=XPFR
"RTN","XPDIQ",23,0)
 F Y=1:1 S XPDI=$O(XPDQUES(XPDI)) Q:XPDI=""!($P(XPDI,XPFR)]"")  D
"RTN","XPDIQ",24,0)
 .S X="XPDJ(9.701,""?+"_Y_","_XPDA_","")",@X@(.01)=XPDI,@X@(1)=$G(XPDQUES(XPDI,"A")),@X@(2)=$G(XPDQUES(XPDI,"B")),@X@(3)=XPDQUES(XPDI)
"RTN","XPDIQ",25,0)
 K XPDI D:$D(XPDJ)>9 UPDATE^DIE("","XPDJ","XPDI")
"RTN","XPDIQ",26,0)
 Q
"RTN","XPDIQ",27,0)
 ;unused code
"RTN","XPDIQ",28,0)
 S DA=XPDA,DIE="^XPD(9.7,",DR="50///^S X=XPDI",DR(2,9.701)="1///^S X=XPDQUES(XPDI,""A"");2///^S X=XPDQUES(XPDI,""B"");3///^S X=XPDQUES(XPDI)",XPDI=XPFR
"RTN","XPDIQ",29,0)
 F  S XPDI=$O(XPDQUES(XPDI)) Q:XPDI=""!($P(XPDI,XPFR)]"")  D ^DIE
"RTN","XPDIQ",30,0)
 Q
"RTN","XPDIQ",31,0)
 ;
"RTN","XPDIQ",32,0)
QUES(X) ;build XPDQUES array, X="INI","INIT","XPF"
"RTN","XPDIQ",33,0)
 N Y,Z K XPDQUES S Z=X
"RTN","XPDIQ",34,0)
 F  S Z=$O(^XPD(9.7,XPDA,"QUES","B",Z)) Q:Z=""!($P(Z,X)]"")  S Y=$O(^(Z,0)) D
"RTN","XPDIQ",35,0)
 .Q:'$D(^XPD(9.7,XPDA,"QUES",Y,0))
"RTN","XPDIQ",36,0)
 .S XPDQUES(Z)=$G(^(1)),XPDQUES(Z,"A")=$G(^("A")),XPDQUES(Z,"B")=$G(^("B")) ; ^(1) refer to prev line ^XPD(9.7,XPDA,"QUES","B",Z)
"RTN","XPDIQ",37,0)
 Q
"RTN","XPDIQ",38,0)
 ;codes for install process questions
"RTN","XPDIQ",39,0)
XPF1 ;write over existing file
"RTN","XPDIQ",40,0)
 N XPDI
"RTN","XPDIQ",41,0)
 W !!?3,XPDFIL,?13,$P(XPDFILN,U),$P("  (Partial Definition)",U,$P(XPDFILN,U,3)),$P("  (including data)",U,$P(XPDFILO,U,7)="y")
"RTN","XPDIQ",42,0)
 I XPDANS K DIR Q
"RTN","XPDIQ",43,0)
 I $L($G(XPDSCR)) S XPDI=1 D  Q:'XPDI
"RTN","XPDIQ",44,0)
 .X XPDSCR S XPDI=$T Q:XPDI
"RTN","XPDIQ",45,0)
 .W !,"Data Dictionary FAILED the screening logic, file will NOT be installed!"
"RTN","XPDIQ",46,0)
 .S $P(XPDANS,U,2)="1" K DIR
"RTN","XPDIQ",47,0)
 S FLAG=$P($G(^DIC(XPDFIL,0)),U)
"RTN","XPDIQ",48,0)
 I $P(FLAG,$P(XPDFILN,U))="" W !,"Note:  You already have the '",$P(XPDFILN,U),"' File." K DIR Q
"RTN","XPDIQ",49,0)
 W *7,!,"*BUT YOU ALREADY HAVE '",FLAG,"' AS FILE #",XPDFIL,"!"
"RTN","XPDIQ",50,0)
 S $P(XPDANS,U,4)=1
"RTN","XPDIQ",51,0)
 Q
"RTN","XPDIQ",52,0)
XPF2 ;data
"RTN","XPDIQ",53,0)
 I $G(XPDQUES("XPF"_XPFP_1))=0 S DIRUT=1 K DIR Q
"RTN","XPDIQ",54,0)
 I '$P(XPDANS,U,3)!$P(XPDANS,U,2)!($P(XPDFILO,U,7)'="y") K DIR Q
"RTN","XPDIQ",55,0)
 S %=$F("amor",$P(XPDFILO,U,8))-1
"RTN","XPDIQ",56,0)
 I %=1 W !,"Data will NOT be added." K DIR Q
"RTN","XPDIQ",57,0)
 I $P(XPDFILO,U,9)'="y" W !,"I will ",$P("^MERGE^OVERWRITE^REPLACE",U,%)," your data with mine." K DIR Q
"RTN","XPDIQ",58,0)
 S FLAG=$P("^merged with^to overwrite^to replace",U,%)
"RTN","XPDIQ",59,0)
 Q
"RTN","XPDIQ",60,0)
XPZ1 ;disable options
"RTN","XPDIQ",61,0)
 Q:'$D(XPDDIQ("XPZ1"))
"RTN","XPDIQ",62,0)
 I $D(XPDDIQ("XPZ1"))#2 S XPDQUES("XPZ1")=XPDDIQ("XPZ1") K DIR Q
"RTN","XPDIQ",63,0)
 S:$D(XPDDIQ("XPZ1","A")) DIR("A")=XPDDIQ("XPZ1","A")
"RTN","XPDIQ",64,0)
 S:$D(XPDDIQ("XPZ1","B")) DIR("B")=XPDDIQ("XPZ1","B")
"RTN","XPDIQ",65,0)
 Q
"RTN","XPDIQ",66,0)
XPZ2 ;move routines
"RTN","XPDIQ",67,0)
 N Y
"RTN","XPDIQ",68,0)
 X ^%ZOSF("UCI") I Y'=^%ZOSF("PROD") K DIR Q
"RTN","XPDIQ",69,0)
 I ^%ZOSF("OS")'["MSM" K DIR Q
"RTN","XPDIQ",70,0)
 Q:'$D(XPDDIQ("XPZ2"))
"RTN","XPDIQ",71,0)
 I $D(XPDDIQ("XPZ2"))#2 S XPDQUES("XPZ2")=XPDDIQ("XPZ2") K DIR Q
"RTN","XPDIQ",72,0)
 S:$D(XPDDIQ("XPZ2","A")) DIR("A")=XPDDIQ("XPZ2","A")
"RTN","XPDIQ",73,0)
 S:$D(XPDDIQ("XPZ2","B")) DIR("B")=XPDDIQ("XPZ2","B")
"RTN","XPDIQ",74,0)
 Q
"RTN","XPDMENU")
0^13^B3585468
"RTN","XPDMENU",1,0)
XPDMENU ;SFISC/RWF,RSD - Manage Menu items ;02/22/96  08:46
"RTN","XPDMENU",2,0)
 ;;8.0;KERNEL;**21**;Jul 10, 1995
"RTN","XPDMENU",3,0)
 Q
"RTN","XPDMENU",4,0)
 ;
"RTN","XPDMENU",5,0)
 ;MENU=option to add to,  OPT=option to add to MENU, SYN=synonym
"RTN","XPDMENU",6,0)
 ;ORD=display order
"RTN","XPDMENU",7,0)
ADD(MENU,OPT,SYN,ORD) ;EF. Add options to a menu
"RTN","XPDMENU",8,0)
 Q:$G(MENU)']"" 0 Q:$G(OPT)']"" 0
"RTN","XPDMENU",9,0)
 N X,XPD1,XPD2,XPD3,DIC,DA,D0,DR,DLAYGO
"RTN","XPDMENU",10,0)
 S XPD1=$$LKOPT(MENU) Q:XPD1'>0 0
"RTN","XPDMENU",11,0)
 ;quit if type is not menu
"RTN","XPDMENU",12,0)
 I $$TYPE(XPD1)'["M" Q 0
"RTN","XPDMENU",13,0)
 S XPD2=$$LKOPT(OPT) Q:XPD2'>0 0
"RTN","XPDMENU",14,0)
 ;if OPTion is not in menu, add it
"RTN","XPDMENU",15,0)
 I '$D(^DIC(19,XPD1,10,"B",XPD2)) D
"RTN","XPDMENU",16,0)
 .S X=XPD2,(D0,DA(1))=XPD1,DIC(0)="MLF",DIC("P")=$P(^DD(19,10,0),"^",2),DLAYGO=19,DIC="^DIC(19,"_XPD1_",10,"
"RTN","XPDMENU",17,0)
 .D FILE^DICN
"RTN","XPDMENU",18,0)
 S XPD3=$O(^DIC(19,XPD1,10,"B",XPD2,0))
"RTN","XPDMENU",19,0)
 I XPD3>0 S DR="" S:$G(SYN)]"" DR="2///"_SYN_";" S:$G(ORD)]"" DR=DR_"3///"_ORD I DR]"" S DIE="^DIC(19,"_XPD1_",10,",DA=XPD3,DA(1)=XPD1 D ^DIE
"RTN","XPDMENU",20,0)
 Q XPD3>0
"RTN","XPDMENU",21,0)
 ;
"RTN","XPDMENU",22,0)
LKOPT(X) ;EF.  To lookup on "B"
"RTN","XPDMENU",23,0)
 Q $O(^DIC(19,"B",X,0))
"RTN","XPDMENU",24,0)
 ;
"RTN","XPDMENU",25,0)
TYPE(X) ;EF. Return option type, Pass IFN.
"RTN","XPDMENU",26,0)
 Q:X'>0 "" Q $P($G(^DIC(19,X,0)),"^",4)
"RTN","XPDMENU",27,0)
 ;
"RTN","XPDMENU",28,0)
 ;MENU=option to delete from,  OPT=option to delete
"RTN","XPDMENU",29,0)
DELETE(MENU,OPT) ;EF. Delete item from menu.
"RTN","XPDMENU",30,0)
 Q:$G(MENU)']"" 0 Q:$G(OPT)']"" 0
"RTN","XPDMENU",31,0)
 N XPD1,XPD2,DIK,DA,X
"RTN","XPDMENU",32,0)
 S XPD1=$$LKOPT(MENU) Q:XPD1'>0 0 I $$TYPE(XPD1)'="M" Q 0
"RTN","XPDMENU",33,0)
 S XPD2=$$LKOPT(OPT) Q:XPD2'>0 0
"RTN","XPDMENU",34,0)
 S DA=$O(^DIC(19,XPD1,10,"B",XPD2,0)) Q:DA'>0 0
"RTN","XPDMENU",35,0)
 S DA(1)=XPD1,DIK="^DIC(19,XPD1,10," D ^DIK
"RTN","XPDMENU",36,0)
 Q 1
"RTN","XPDMENU",37,0)
 ;
"RTN","XPDMENU",38,0)
 ;OPT=option to set out of order,  TXT=message
"RTN","XPDMENU",39,0)
OUT(OPT,TXT) ;Set option out of order
"RTN","XPDMENU",40,0)
 Q:$G(OPT)']""
"RTN","XPDMENU",41,0)
 N XPD,XPD1
"RTN","XPDMENU",42,0)
 S XPD1=$$LKOPT(OPT) Q:XPD1'>0
"RTN","XPDMENU",43,0)
 S XPD(19,XPD1_",",2)=$G(TXT) D FILE^DIE("","XPD")
"RTN","XPDMENU",44,0)
 Q
"RTN","XPDMENU",45,0)
 ;
"RTN","XPDMENU",46,0)
 ;OLD=old name, NEW=new name
"RTN","XPDMENU",47,0)
RENAME(OLD,NEW) ;Rename option
"RTN","XPDMENU",48,0)
 Q:$G(OLD)']""  Q:$G(NEW)']""
"RTN","XPDMENU",49,0)
 N XPD,XPD1
"RTN","XPDMENU",50,0)
 S XPD1=$$LKOPT(OLD) Q:XPD1'>0
"RTN","XPDMENU",51,0)
 S XPD(19,XPD1_",",.01)=NEW D FILE^DIE("","XPD")
"RTN","XPDMENU",52,0)
 Q
"RTN","XPDTC")
0^10^B31583391
"RTN","XPDTC",1,0)
XPDTC ;SFISC/RSD - Transport calls ;02/16/96  13:51
"RTN","XPDTC",2,0)
 ;;8.0;KERNEL;**10,15,21**;Jul 10, 1995
"RTN","XPDTC",3,0)
 Q
"RTN","XPDTC",4,0)
 ;^XTMP("XPDT",XPDA,data type,file #,
"RTN","XPDTC",5,0)
 ;XPDA=ien of File 9.6, XPDNM=.01 field
"RTN","XPDTC",6,0)
DD ;build DD
"RTN","XPDTC",7,0)
 N FILE,FGR,FNAM,Z2,Z3,Z4
"RTN","XPDTC",8,0)
 S FILE=0,FGR="^XTMP(""XPDT"",XPDA)",FNAM=$NA(^XPD(9.6,XPDA,4,"APDD"))
"RTN","XPDTC",9,0)
 F  S FILE=$O(^XPD(9.6,XPDA,4,FILE)) Q:'FILE  D
"RTN","XPDTC",10,0)
 .S Z2=$G(^XPD(9.6,XPDA,4,FILE,222)),Z3=$G(^(223)),Z4=$G(^(224))
"RTN","XPDTC",11,0)
 .Q:$$DATA^XPDV(FILE,Z2)
"RTN","XPDTC",12,0)
 .D FIA^DIFROMSU(FILE,"",FNAM,FGR,Z2,Z3,Z4,XPDVER),DIERR:$D(DIERR)
"RTN","XPDTC",13,0)
 Q:'$D(^XTMP("XPDT",XPDA,"FIA"))
"RTN","XPDTC",14,0)
 ;send DD and Data
"RTN","XPDTC",15,0)
 D DDOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR),DATAOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR)
"RTN","XPDTC",16,0)
 Q
"RTN","XPDTC",17,0)
 ;XPDERR is checked in XPDT and will abort transport
"RTN","XPDTC",18,0)
DIERR ;record error
"RTN","XPDTC",19,0)
 D MSG^DIALOG("EW",.XPD) S XPDERR=1
"RTN","XPDTC",20,0)
 Q
"RTN","XPDTC",21,0)
KRN ;build Kernel Files
"RTN","XPDTC",22,0)
 ;XPDFILE=file #, XPDOLDA=ien in Build file
"RTN","XPDTC",23,0)
 N %,%1,%2,DA,EACT,FACT,FGR,XPDFILE,XPDOLDA,XPDI,Y0
"RTN","XPDTC",24,0)
 F XPDFILE=1:1 S Y0=$P($T(FILES+XPDFILE^XPDE),";;",2,99) Q:Y0=""  S XPDI(+Y0)=Y0
"RTN","XPDTC",25,0)
 ;XPDI(XPDFILE)=file;order;x-ref;fact;eact;fpre;epre;fpos;epos;fdel
"RTN","XPDTC",26,0)
 S XPDFILE=0
"RTN","XPDTC",27,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  S XPDI=$G(XPDI(XPDFILE)),FACT=$P(XPDI,";",4),EACT=$P(XPDI,";",5) D  Q:$D(XPDERR)  D:FACT]"" ACT(FACT)
"RTN","XPDTC",28,0)
 .;need to add code to check if File and data is already being sent in the File
"RTN","XPDTC",29,0)
 .;mult. If it is, don't bother sending it again.  DTL(XPDFILE)
"RTN","XPDTC",30,0)
 .S XPDOLDA=0,FGR=$$FILE^XPDV(XPDFILE) I FGR="" S XPDERR=1 Q
"RTN","XPDTC",31,0)
 .K ^TMP($J,"XPD")
"RTN","XPDTC",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDTC",33,0)
 ..;If deleting at site get an unused DA
"RTN","XPDTC",34,0)
 ..I $P(Y0,U,3)=1 S DA=$O(@FGR@(" "),-1)+1 F DA=DA:1 Q:'$D(^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA))
"RTN","XPDTC",35,0)
 ..;$P(Y0,U,2) is file # for this template, reset Y0 before getting DA
"RTN","XPDTC",36,0)
 ..E  S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY^XPDV(Y0)
"RTN","XPDTC",37,0)
 ..I 'DA S XPDERR=1 Q
"RTN","XPDTC",38,0)
 ..;(-1)=action flag: 1-delete,2-link,3-merge menus '^' ien in Build file
"RTN","XPDTC",39,0)
 ..S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,-1)=+$P(Y0,U,3)_"^"_XPDOLDA
"RTN","XPDTC",40,0)
 ..;if action is 1-delete then only send .01 field and set checksum to ""
"RTN","XPDTC",41,0)
 ..I $P(Y0,U,3)=1 S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,0)=$P(Y0,U),$P(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA),U,4)="" Q
"RTN","XPDTC",42,0)
 ..M ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)=@FGR@(DA)
"RTN","XPDTC",43,0)
 ..;execute entry build action
"RTN","XPDTC",44,0)
 ..D:EACT]"" ACT(EACT)
"RTN","XPDTC",45,0)
 .;quit if no entries were saved
"RTN","XPDTC",46,0)
 .Q:'$O(^XTMP("XPDT",XPDA,"KRN",XPDFILE,0))
"RTN","XPDTC",47,0)
 .;XPDI=XPDI(XPDFILE), build x-ref of order to install
"RTN","XPDTC",48,0)
 .S %=$P(^DIC(XPDFILE,0),U),^XTMP("XPDT",XPDA,"ORD",+$P(XPDI,";",2),XPDFILE)=XPDI,^(XPDFILE,0)=%
"RTN","XPDTC",49,0)
 .Q
"RTN","XPDTC",50,0)
 Q
"RTN","XPDTC",51,0)
QUES ;build from Install Questions multiple
"RTN","XPDTC",52,0)
 N I,J,X,%
"RTN","XPDTC",53,0)
 S X=""
"RTN","XPDTC",54,0)
 ;the "B" x-ref will give me the order of the questions
"RTN","XPDTC",55,0)
 F  S X=$O(^XPD(9.6,XPDA,"QUES","B",X)) Q:X=""  S I=$$QUES^XPDV(X) S:'I XPDERR=1 D:I
"RTN","XPDTC",56,0)
 .S J=0 F  S J=$O(^XPD(9.6,XPDA,"QUES",I,J)) Q:J=""  D
"RTN","XPDTC",57,0)
 ..;tranform J to DIR subscripts
"RTN","XPDTC",58,0)
 ..I $L(J)=1!(J="QQ") S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"1ABQ","0AB?"))=^(J) Q  ;^(J) ref to ^XPD(9.6,XPDA,"QUES",I,J)
"RTN","XPDTC",59,0)
 ..;set the word processing fields into DIR("?",#) structure
"RTN","XPDTC",60,0)
 ..F %=1:1 Q:'$D(^XPD(9.6,XPDA,"QUES",I,J,%,0))  S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"AQ10","A?"),%)=^(0)
"RTN","XPDTC",61,0)
 ;send the File questions
"RTN","XPDTC",62,0)
 F I=1:2 S X=$P($T(QUESTION+I),";;",2) Q:X=""  S Y=$P($T(QUESTION+I+1),";;",2) D
"RTN","XPDTC",63,0)
 .S ^XTMP("XPDT",XPDA,"QUES",$P(X,";"),0)=$P(X,";",2),^("A")=$P(X,";",3),^("B")=$P(X,";",4),^("??")=$P(X,";",5) S:Y]"" ^("M")=Y
"RTN","XPDTC",64,0)
 Q
"RTN","XPDTC",65,0)
INT ;build pre,post, & enviroment init routines
"RTN","XPDTC",66,0)
 N %,I,X
"RTN","XPDTC",67,0)
 F I="PRE","INI","INIT" I $G(^XPD(9.6,XPDA,I))]"" S X=^(I) D
"RTN","XPDTC",68,0)
 .S ^XTMP("XPDT",XPDA,I)=X,X=$P(X,U,$L(X,U)) Q:$D(^("RTN",X))
"RTN","XPDTC",69,0)
 .I '$$RTN^XPDV(X) W !,"Routine ",X," **NOT FOUND**" S XPDERR=1 Q
"RTN","XPDTC",70,0)
 .S %=$$LOAD^XPDTA(X,"0^")
"RTN","XPDTC",71,0)
 Q
"RTN","XPDTC",72,0)
BLD ;build Build file, Package file and Order Parameter file
"RTN","XPDTC",73,0)
 N %,DIC,X,XPD,XPDI,XPDV,Y
"RTN","XPDTC",74,0)
 ;save version of kernel and fm
"RTN","XPDTC",75,0)
 S ^XTMP("XPDT",XPDA,"VER")=$$VERSION^XPDUTL("XU")_U_$$VERSION^XPDUTL("VA FILEMAN")
"RTN","XPDTC",76,0)
 M ^XTMP("XPDT",XPDA,"BLD",XPDA)=^XPD(9.6,XPDA)
"RTN","XPDTC",77,0)
 ;check national package file pointer
"RTN","XPDTC",78,0)
 S XPDI=+$P(^XPD(9.6,XPDA,0),U,2) Q:'XPDI
"RTN","XPDTC",79,0)
 S $P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,2)=$$PT^XPDTA("^DIC(9.4)",XPDI)
"RTN","XPDTC",80,0)
 ;quit if no pointer to package file
"RTN","XPDTC",81,0)
 Q:'$D(^DIC(9.4,XPDI))
"RTN","XPDTC",82,0)
 ;update version multiple in package file,XPD=version^date distributed
"RTN","XPDTC",83,0)
 S XPD=$$VER^XPDUTL(XPDNM)_U_$P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,4)
"RTN","XPDTC",84,0)
 ;XPD(1)=root of description field
"RTN","XPDTC",85,0)
 S:$D(^XTMP("XPDT",XPDA,"BLD",XPDA,1)) XPD(1)=$NA(^(1))
"RTN","XPDTC",86,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,0)=^DIC(9.4,XPDI,0),^XTMP("XPDT",XPDA,"PKG",XPDI,22,0)=$P(^DIC(9.4,XPDI,22,0),"^",1,2)_"^1^1"
"RTN","XPDTC",87,0)
 ;XPDNM'["*" is a version release
"RTN","XPDTC",88,0)
 I XPDNM'["*" D
"RTN","XPDTC",89,0)
 .S XPDV=$$PKGVER^XPDIP(XPDI,.XPD)
"RTN","XPDTC",90,0)
 .;Merge is used to set single nodes and merge multiples
"RTN","XPDTC",91,0)
 .F %=1,5,7,20,"DEV","VERSION" M ^XTMP("XPDT",XPDA,"PKG",XPDI,%)=^DIC(9.4,XPDI,%)
"RTN","XPDTC",92,0)
 .;XPDV=ien of Version Multiple
"RTN","XPDTC",93,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1)=^DIC(9.4,XPDI,22,XPDV)
"RTN","XPDTC",94,0)
 ;this is a patch, %=version number, $P(XPD,U)=patch number
"RTN","XPDTC",95,0)
 E  D
"RTN","XPDTC",96,0)
 .S %=$P(XPD,U),$P(XPD,U)=$P(XPDNM,"*",3),XPDV=$$PKGPAT^XPDIP(XPDI,%,.XPD)
"RTN","XPDTC",97,0)
 .S ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,0)=^DIC(9.4,XPDI,22,+XPDV,0)
"RTN","XPDTC",98,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,"PAH",1)=^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2))
"RTN","XPDTC",99,0)
 ;M ^XTMP("XPDT",XPDA,"PKG",XPDI)=^DIC(9.4,XPDI)
"RTN","XPDTC",100,0)
 ;save the version ien^patch ien on -1 node
"RTN","XPDTC",101,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,-1)="1^1"
"RTN","XPDTC",102,0)
 ;resolve Primary Help Frame (0;4)
"RTN","XPDTC",103,0)
 S %=+$P(^DIC(9.4,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"PKG",XPDI,0),U,4)=$$PT^XPDTA("^DIC(9.2)",%)
"RTN","XPDTC",104,0)
 ;transport the PACKAGE PARAMETER multiple under file 100.99
"RTN","XPDTC",105,0)
 ;quit of GLOBAL PACKAGE
"RTN","XPDTC",106,0)
 Q:'$D(^ORD(100.99,1,5,XPDI,0))!$D(XPDGP)
"RTN","XPDTC",107,0)
 M ^XTMP("XPDT",XPDA,"OER",XPDI)=^ORD(100.99,1,5,XPDI)
"RTN","XPDTC",108,0)
 ;resolve Display Group Default (0;4)
"RTN","XPDTC",109,0)
 S %=+$P(^ORD(100.99,1,5,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"OER",XPDI,0),U,4)=$$PT^XPDTA("^ORD(100.98)",%)
"RTN","XPDTC",110,0)
 Q
"RTN","XPDTC",111,0)
 ;
"RTN","XPDTC",112,0)
ACT(%) ;execute action
"RTN","XPDTC",113,0)
 ;user can count on DA,XPDFILE,XPDNM,XPDOLDA being around
"RTN","XPDTC",114,0)
 ;DA=ien in ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)
"RTN","XPDTC",115,0)
 ;XPDOLDA=ien in ^XPD(9.6,XPDA,"KRN",XPDIFLE,"NM",XPDOLDA)
"RTN","XPDTC",116,0)
 N EACT,FACT,FGR,K0,Y0
"RTN","XPDTC",117,0)
 S:%'["^" %="^"_%
"RTN","XPDTC",118,0)
 D @% Q
"RTN","XPDTC",119,0)
 ;
"RTN","XPDTC",120,0)
 ;the following are the default questions for the INSTALL QUESTIONS
"RTN","XPDTC",121,0)
 ;in file 9.6, the format is:
"RTN","XPDTC",122,0)
 ;;field .01;field 1;field 2;field 4;field 7
"RTN","XPDTC",123,0)
 ;;field 10
"RTN","XPDTC",124,0)
QUESTION ;package install questions
"RTN","XPDTC",125,0)
 ;;XPF1;Y;Shall I write over your |FLAG| File;YES;^D REP^XPDH
"RTN","XPDTC",126,0)
 ;;D XPF1^XPDIQ
"RTN","XPDTC",127,0)
 ;;XPF2;Y;Want my data |FLAG| yours;YES;^D DTA^XPDH
"RTN","XPDTC",128,0)
 ;;D XPF2^XPDIQ
"RTN","XPDTC",129,0)
 ;;XPZ1;Y;Want to DISABLE Scheduled Options, Menu Options, and Protocols;YES;^D OPT^XPDH
"RTN","XPDTC",130,0)
 ;;D XPZ1^XPDIQ
"RTN","XPDTC",131,0)
 ;;XPZ2;Y;Want to MOVE routines to other CPUs;NO;^D RTN^XPDH
"RTN","XPDTC",132,0)
 ;;D XPZ2^XPDIQ
"RTN","XPDTP")
0^6^B3130203
"RTN","XPDTP",1,0)
XPDTP ;SFISC/RSD - Transport using a Packman Message ;02/16/96  13:36
"RTN","XPDTP",2,0)
 ;;8.0;KERNEL;**21**;Jul 05, 1995
"RTN","XPDTP",3,0)
 N DIFROM,DIR,DIRUT,DWPK,DWLW,DIC,I,J,XCN,XCNP,XMDISPI,XMDUN,XMDUZ,XMKEY,XMSCR,XMSUB,XMY,XMZ,X,Y,%
"RTN","XPDTP",4,0)
 S DIFROM=1 D QUES^XMASEC Q:$D(DTOUT)!$D(DUOUT)
"RTN","XPDTP",5,0)
 S DIR(0)="F^3:65",DIR("A")="Subject",DIR("?")="Enter the subject for this Packman Message"
"RTN","XPDTP",6,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDTP",7,0)
 S XMSUB=Y,XMDUZ=+DUZ
"RTN","XPDTP",8,0)
 K ^TMP("XMP",$J)
"RTN","XPDTP",9,0)
 W !,"Please enter description of Packman Message",!
"RTN","XPDTP",10,0)
 S DWPK=1,DWLW=75,DIC="^TMP(""XMP"",$J," D EN^DIWE
"RTN","XPDTP",11,0)
 D KIDS^XMP
"RTN","XPDTP",12,0)
 S XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)="$KID "_XPDNM,XCNP=XCNP+1
"RTN","XPDTP",13,0)
 ;for multiple packages, this would be a for loop
"RTN","XPDTP",14,0)
 D GS K ^XTMP("XPDT",XPDA)
"RTN","XPDTP",15,0)
 S $P(^XMB(3.9,XMZ,2,0),U,3,4)=XCNP_U_XCNP
"RTN","XPDTP",16,0)
 D EN3^XMD
"RTN","XPDTP",17,0)
 K ^TMP("XMP",$J)
"RTN","XPDTP",18,0)
 Q
"RTN","XPDTP",19,0)
GS N GR,GCK,GL
"RTN","XPDTP",20,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDTP",21,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDTP",22,0)
 ;the next INSTALL NAME
"RTN","XPDTP",23,0)
 S ^XMB(3.9,XMZ,2,XCNP,0)="**INSTALL NAME**",XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)=XPDNM,XCNP=XCNP+1
"RTN","XPDTP",24,0)
 F  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  S ^XMB(3.9,XMZ,2,XCNP,0)=$P(GR,GCK,2),XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)=@GR,XCNP=XCNP+1
"RTN","XPDTP",25,0)
 S ^XMB(3.9,XMZ,2,XCNP,0)="$END KID "_XPDNM
"RTN","XPDTP",26,0)
 Q
"RTN","XPDUTL")
0^7^B9577797
"RTN","XPDUTL",1,0)
XPDUTL ;SFISC/RSD - KIDS utilities ;02/22/96  08:04
"RTN","XPDUTL",2,0)
 ;;8.0;KERNEL;**21**;Jul 10, 1995
"RTN","XPDUTL",3,0)
 Q
"RTN","XPDUTL",4,0)
VERSION(X) ;Get current version from Package file, X=package name or
"RTN","XPDUTL",5,0)
 ;package namespace
"RTN","XPDUTL",6,0)
 N I
"RTN","XPDUTL",7,0)
 S I=$O(^DIC(9.4,"C",X,0)) S:I'>0 I=$O(^DIC(9.4,"B",X,0))
"RTN","XPDUTL",8,0)
 Q $P($G(^DIC(9.4,+I,"VERSION")),"^")
"RTN","XPDUTL",9,0)
 ;
"RTN","XPDUTL",10,0)
VER(X) ;returns version number from Build file, X=build name
"RTN","XPDUTL",11,0)
 Q:X["*" $P(X,"*",2)
"RTN","XPDUTL",12,0)
 Q $P(X," ",$L(X," "))
"RTN","XPDUTL",13,0)
 ;
"RTN","XPDUTL",14,0)
PKG(X) ;returns package name from Build file, X=build name
"RTN","XPDUTL",15,0)
 Q $S(X["*":$P(X,"*"),1:$P(X," ",1,$L(X," ")-1))
"RTN","XPDUTL",16,0)
 ;
"RTN","XPDUTL",17,0)
NEWCP(XPD,XPDC,XPDP) ;create new check point, returns 0=error or ien
"RTN","XPDUTL",18,0)
 ;XPD=name, XPDC=call back, XPDP=parameters
"RTN","XPDUTL",19,0)
 Q:$G(XPD)="" 0
"RTN","XPDUTL",20,0)
 N %,XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",21,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",22,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713)
"RTN","XPDUTL",23,0)
 S %=$$FIND1^DIC(XPDI,","_XPDA_",","X",XPD) Q:% %
"RTN","XPDUTL",24,0)
 S XPDF="+1,"_XPDA_",",XPDJ(XPDI,XPDF,.01)=XPD
"RTN","XPDUTL",25,0)
 S:$D(XPDC) XPDJ(XPDI,XPDF,2)=XPDC
"RTN","XPDUTL",26,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",27,0)
 D UPDATE^DIE("","XPDJ","XPDY")
"RTN","XPDUTL",28,0)
 Q $G(XPDY(1))
"RTN","XPDUTL",29,0)
 ;
"RTN","XPDUTL",30,0)
UPCP(XPD,XPDP) ;update check point, returns 0=error or ien
"RTN","XPDUTL",31,0)
 ;XPD=name, XPDP=parameters
"RTN","XPDUTL",32,0)
 N XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",33,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",34,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",35,0)
 Q:'XPDY 0
"RTN","XPDUTL",36,0)
 S XPDF=XPDY_","_XPDA_","
"RTN","XPDUTL",37,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",38,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",39,0)
 Q XPDY
"RTN","XPDUTL",40,0)
 ;
"RTN","XPDUTL",41,0)
COMCP(XPD) ;complete check point, returns 0=error or date/time
"RTN","XPDUTL",42,0)
 ;XPD=name
"RTN","XPDUTL",43,0)
 N XPDD,XPDI,XPDJ,XPDY
"RTN","XPDUTL",44,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",45,0)
 Q:'XPDY 0
"RTN","XPDUTL",46,0)
 S XPDD=$$NOW^XLFDT,XPDJ(XPDI,XPDY_","_XPDA_",",1)=XPDD
"RTN","XPDUTL",47,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",48,0)
 Q XPDD
"RTN","XPDUTL",49,0)
 ;
"RTN","XPDUTL",50,0)
VERCP(XPD) ;verify check point, returns 1=completed, 0=not
"RTN","XPDUTL",51,0)
 ;-1=doesn't exist
"RTN","XPDUTL",52,0)
 ;XPD=name
"RTN","XPDUTL",53,0)
 N XPDI,XPDY
"RTN","XPDUTL",54,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",55,0)
 Q:'XPDY -1
"RTN","XPDUTL",56,0)
 Q ''$$GET1^DIQ(XPDI,XPDY_","_XPDA_",",1,"I")
"RTN","XPDUTL",57,0)
 ;
"RTN","XPDUTL",58,0)
PARCP(XPD,XPDF) ;returns parameters of check point
"RTN","XPDUTL",59,0)
 ;XPD=name, XPDF="PRE"
"RTN","XPDUTL",60,0)
 N XPDI,XPDY
"RTN","XPDUTL",61,0)
 I $G(XPDF)="PRE" N XPDCP S XPDCP="INI"
"RTN","XPDUTL",62,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",63,0)
 Q:'XPDY 0
"RTN","XPDUTL",64,0)
 Q $$GET1^DIQ(XPDI,XPDY_","_XPDA_",",3,"I")
"RTN","XPDUTL",65,0)
 ;
"RTN","XPDUTL",66,0)
CURCP(XPDF) ;returns current check point
"RTN","XPDUTL",67,0)
 ;XPDF flag - 0=externel, 1=internal
"RTN","XPDUTL",68,0)
 Q $S($G(XPDF):XPDCHECK,1:XPDCHECK(0))
"RTN","XPDUTL",69,0)
 ;
"RTN","XPDUTL",70,0)
WP(X) ;X=global ref
"RTN","XPDUTL",71,0)
 N %
"RTN","XPDUTL",72,0)
 Q:'$D(@X)
"RTN","XPDUTL",73,0)
 F %=1:1 Q:'$D(@X@(%))  W !,@X@(%)
"RTN","XPDUTL",74,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A",X)
"RTN","XPDUTL",75,0)
 Q
"RTN","XPDUTL",76,0)
MES(X) ;record message, X=message or an array passed by reference
"RTN","XPDUTL",77,0)
 N %
"RTN","XPDUTL",78,0)
 I $D(X)#2 S %=X K X S X(1)=%
"RTN","XPDUTL",79,0)
 ;write message
"RTN","XPDUTL",80,0)
 F %=1:1 Q:'$D(X(%))  W !,X(%)
"RTN","XPDUTL",81,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A","X")
"RTN","XPDUTL",82,0)
 Q
"RTN","XPDUTL",83,0)
BMES(X) ;add blank line before message
"RTN","XPDUTL",84,0)
 N %
"RTN","XPDUTL",85,0)
 I $D(X)#2 S %=X K X S X(1)=" ",X(2)=%
"RTN","XPDUTL",86,0)
 D MES(.X)
"RTN","XPDUTL",87,0)
 Q
"RTN","XPDUTL",88,0)
RTNUP(X,Y) ;update routine action, X=routine, Y=action
"RTN","XPDUTL",89,0)
 ;actions:  1=delete, 2=skip
"RTN","XPDUTL",90,0)
 N %
"RTN","XPDUTL",91,0)
 ;set action to Y
"RTN","XPDUTL",92,0)
 Q:'$G(Y)!'$D(^XTMP("XPDI",$G(XPDA),"RTN",X)) 0 S $P(^(X),U)=+Y
"RTN","XPDUTL",93,0)
 Q 1
"RTN","XPDUTL",94,0)
 ;get Build ien
"RTN","XPDUTL",95,0)
 S Y=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDUTL",96,0)
 ;remove checksum when updating action, since action can only be
"RTN","XPDUTL",97,0)
 ;delete or skip, not sure if we want to do this
"RTN","XPDUTL",98,0)
 S:$P(%,U,2) $P(^XTMP("XPDI",XPDA,"BLD",Y,"KRN",9.8,"NM",$P(%,U,2),0),U,4)=""
"RTN","XPDUTL",99,0)
 Q 1
"RTN","XPDUTL",100,0)
DICCP(X) ;lookup check point, returns ien or 0
"RTN","XPDUTL",101,0)
 Q:$G(X)="" 0
"RTN","XPDUTL",102,0)
 ;if they pass ien, fail if can't find
"RTN","XPDUTL",103,0)
 I X=+X S Y=X Q:'$D(^XPD(9.7,XPDA,XPDCP,Y,0)) 0
"RTN","XPDUTL",104,0)
 E  S Y=$$FIND1^DIC(XPDI,","_XPDA_",","X",X)
"RTN","XPDUTL",105,0)
 Q Y
"RTN","XPDUTL",106,0)
 ;
"RTN","XPDUTL",107,0)
PRODE(XPDN,XPD) ;enable/disable protocols, return 1 for success
"RTN","XPDUTL",108,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",109,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",110,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",111,0)
 D KIDS^XQOO1(XPDSET,101,XPDN,.XPD)
"RTN","XPDUTL",112,0)
 Q $S(XPD<0:0,1:1)
"RTN","XPDUTL",113,0)
 ;
"RTN","XPDUTL",114,0)
OPTDE(XPDN,XPD) ;enable/disable options, return 1 for success
"RTN","XPDUTL",115,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",116,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",117,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",118,0)
 D KIDS^XQOO1(XPDSET,19,XPDN,.XPD)
"RTN","XPDUTL",119,0)
 Q $S(XPD<0:0,1:1)
"RTN","XQOO")
0^12^B41361090
"RTN","XQOO",1,0)
XQOO ;SEATTLE/LUKE - Out Of Order, Man ;03/14/96  14:44
"RTN","XQOO",2,0)
 ;;8.0;KERNEL;**10,21**;Jul 03, 1995
"RTN","XQOO",3,0)
INIT(XQSET) ;Call for Out-of-order set creation, called by KIDS
"RTN","XQOO",4,0)
 ;
"RTN","XQOO",5,0)
 ;The variable XQSET should be null if this is the first pass
"RTN","XQOO",6,0)
 ;or if KIDS thinks the user wants a new set of options
"RTN","XQOO",7,0)
 ;
"RTN","XQOO",8,0)
 S XQINI="",XQK=0 ;XQINI used as a flag to see if it's KIDS calling
"RTN","XQOO",9,0)
 I XQSET]"" S:'$D(^XTMP("XQOO",XQSET,0)) XQSET="^"
"RTN","XQOO",10,0)
 I XQSET="^" G OUT
"RTN","XQOO",11,0)
 I XQSET]"" S XQMESS=$P(^XTMP("XQOO",XQSET,0),U) G ASK1
"RTN","XQOO",12,0)
 ;
"RTN","XQOO",13,0)
EN ;Entry point for Define Out Of Order Options Set option
"RTN","XQOO",14,0)
 S XQK=0,U="^",XQSET=U
"RTN","XQOO",15,0)
 ;
"RTN","XQOO",16,0)
NAME ;Get name for this option set
"RTN","XQOO",17,0)
 W !!,"Enter a short name for this set of options and or protocols: " R XQSET:DTIME S:'$T XQSET=U G:XQSET=U OUT
"RTN","XQOO",18,0)
 I XQSET="?" W !!,"Enter a name of 20 characters or less for this set, '^' to quit, or '??' for help" G NAME
"RTN","XQOO",19,0)
 I XQSET["??" S XQH="XQOO-NAME" D EN^XQH G NAME
"RTN","XQOO",20,0)
 I XQSET=""!($L(XQSET)>20) W !!,"Out-of-order sets must be named with 20 or less characters.  Enter '^' to quit." G NAME
"RTN","XQOO",21,0)
 I $D(^XTMP("XQOO",XQSET,0)) D  G:$D(DIRUT) OUT G:Y=0 NAME G ASK1
"RTN","XQOO",22,0)
 .S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO",23,0)
 .W !!,"WARNING: The Out-of-order set '",XQSET,"' already exists.",!
"RTN","XQOO",24,0)
 .S DIR("A")="Do you want to modify it? (Y/N) " S DIR(0)="Y",DIR("B")="YES" D ^DIR
"RTN","XQOO",25,0)
 .Q
"RTN","XQOO",26,0)
 ;
"RTN","XQOO",27,0)
MESS ;Get the Out Of Order Message
"RTN","XQOO",28,0)
 R !!,"What should the Out Of Order message text be? :",XQMESS:DTIME S:'$T XQMESS=U G:XQMESS=U OUT
"RTN","XQOO",29,0)
 I XQMESS="?" W !!,"This is the message that will be shown with the options",!,"that are made out of order. For instance, ""Laboratory install in progress""" G MESS
"RTN","XQOO",30,0)
 I XQMESS["??" S XQH="XQOO-MESS" D EN^XQH G MESS
"RTN","XQOO",31,0)
 ;
"RTN","XQOO",32,0)
ASK1 S XQFIL=19
"RTN","XQOO",33,0)
ASK ;Get options to mark
"RTN","XQOO",34,0)
 S (XQ,XQN)=""
"RTN","XQOO",35,0)
 W !!,"Enter "_$S(XQFIL=19:"options",1:"protocols")_" you wish to mark as 'Out Of Order': "
"RTN","XQOO",36,0)
 R XQ:DTIME S:'$T XQ=U G:XQ=U OUT G:XQ="" SET I XQ="?" W !!,"Enter an option name, an option preceded by a minus, '^' to quit, or '??' for help." G ASK
"RTN","XQOO",37,0)
 I XQ["??" S XQH="XQOO" D:XQ="??" EN^XQH D:XQ="???" LIST D:XQ="????" LSTFIL S XQH="XQOO-MAIN" D:XQ="?????" EN^XQH G ASK
"RTN","XQOO",38,0)
 I $E(XQ,1,3)="^OP"!($E(XQ,1,3)="^op") S XQFIL=19,XQSWTCH="" G ASK
"RTN","XQOO",39,0)
 I $E(XQ,1,3)="^PR"!($E(XQ,1,3)="^pr") S XQFIL=101,XQSWTCH="" G ASK
"RTN","XQOO",40,0)
 S XQDEL=0 I $E(XQ,1)="-" S XQDEL=1,XQ=$E(XQ,2,99)
"RTN","XQOO",41,0)
 I XQ="*",XQDEL K ^XTMP("XQOO",XQSET) W !," All options removed.  Start again or '^' to quit. " G ASK
"RTN","XQOO",42,0)
 I XQ="*" S XQSTART=1,XQEND="ZZZZZ" D FIND G ASK
"RTN","XQOO",43,0)
 I XQ?.E1"*" S XQSTART=$E(XQ,1,$L(XQ)-1),XQEND=XQSTART_$C(127) D FIND G ASK
"RTN","XQOO",44,0)
 I XQ?1E.E1"-"1E.E W ! S DIR("A")="Do mean the options from "_$P(XQ,"-")_" to "_$P(XQ,"-",2)_"? (Y/N)",DIR("B")="YES",DIR(0)="Y" D ^DIR I Y S XQSTART=$P(XQ,"-",1),XQEND=$P(XQ,"-",2) D FIND G ASK
"RTN","XQOO",45,0)
 S X=XQ,DIC=XQFIL,DIC(0)="MEZ" D ^DIC S:Y'<0 XQ=$P(Y,U,2) I Y<0 W !," ??",*7 G ASK
"RTN","XQOO",46,0)
 I XQDEL K ^XTMP("XQOO",XQSET,XQFIL,+Y) G ASK
"RTN","XQOO",47,0)
 S:$E(Y(0),1,4)'="XQOO" ^XTMP("XQOO",XQSET,XQFIL,+Y)=$P(Y(0),U)_U_$P(Y(0),U,2) G ASK
"RTN","XQOO",48,0)
 ;
"RTN","XQOO",49,0)
FIND ;Find first option in wildcard list
"RTN","XQOO",50,0)
 S XQN="" S:$L(XQSTART)>2 XQN=$E(XQSTART,1,$L(XQSTART)-1)
"RTN","XQOO",51,0)
 I XQFIL=19 F XQI=0:0 S XQN=$O(^DIC(XQFIL,"B",XQN)) Q:XQN=""!($E(XQN,1,$L(XQSTART))=XQSTART)
"RTN","XQOO",52,0)
 E  F XQI=0:0 S XQN=$O(^ORD(101,"B",XQN)) Q:XQN=""!($E(XQN,1,$L(XQSTART))=XQSTART)
"RTN","XQOO",53,0)
 I XQN="" W !," No such ",$S(XQFIL=19:"option(s).",1:"protocol(s).") Q
"RTN","XQOO",54,0)
 S XQSTART=XQN
"RTN","XQOO",55,0)
 I XQFIL=19 S XQON=$O(^DIC(XQFIL,"B",XQN,0)),XQON0=^DIC(XQFIL,+XQON,0)
"RTN","XQOO",56,0)
 E  S XQON=$O(^ORD(XQFIL,"B",XQN,0)),XQON0=^ORD(XQFIL,+XQON,0)
"RTN","XQOO",57,0)
 I XQDEL D DELET Q
"RTN","XQOO",58,0)
 ;
"RTN","XQOO",59,0)
GET ;Get the first option selected and put it in ^XTMP
"RTN","XQOO",60,0)
 S XQN=XQSTART I $E(XQON,1,4)'="XQOO" S ^XTMP("XQOO",XQSET,XQFIL,+XQON)=$P(XQON0,U)_U_$P(XQON0,U,2),XQK=XQK+1
"RTN","XQOO",61,0)
 S DIC=XQFIL,DIC(0)="MZ"
"RTN","XQOO",62,0)
 ;
"RTN","XQOO",63,0)
NEXT ;Find the rest of the options in this range and do likewise
"RTN","XQOO",64,0)
 I XQFIL=19 F  Q:XQN=XQEND  S XQN=$O(^DIC(XQFIL,"B",XQN)) Q:XQN=""!(XQN]XQEND)  S XQON=$O(^DIC(XQFIL,"B",XQN,0)),XQON0=^DIC(XQFIL,+XQON,0) I $E(XQON,1,4)'="XQOO" S ^XTMP("XQOO",XQSET,XQFIL,+XQON)=$P(XQON0,U)_U_$P(XQON0,U,2),XQK=XQK+1
"RTN","XQOO",65,0)
 E  F  Q:XQN=XQEND  S XQN=$O(^ORD(XQFIL,"B",XQN)) Q:XQN=""!(XQN]XQEND)  S XQON=$O(^ORD(XQFIL,"B",XQN,0)),XQON0=^ORD(XQFIL,+XQON,0) I $E(XQON,1,4)'="XQOO" S ^XTMP("XQOO",XQSET,XQFIL,+XQON)=$P(XQON0,U)_U_$P(XQON0,U,2),XQK=XQK+1
"RTN","XQOO",66,0)
 Q
"RTN","XQOO",67,0)
 ;
"RTN","XQOO",68,0)
DELET ;Delete option(s) from the list in ^XTMP
"RTN","XQOO",69,0)
 ;W !,XQON,"  ",XQSTART,"  ",XQDEL
"RTN","XQOO",70,0)
 S XQN=XQSTART,XQDEL=0
"RTN","XQOO",71,0)
 I XQFIL=19 F  K ^XTMP("XQOO",XQSET,XQFIL,+XQON) S XQN=$O(^DIC(XQFIL,"B",XQN)),XQX=XQK-1 Q:XQN=""!(XQN]XQEND)  S XQON=$O(^DIC(XQFIL,"B",XQN,0))
"RTN","XQOO",72,0)
 E  F  K ^XTMP("XQOO",XQSET,XQFIL,+XQON) S XQN=$O(^ORD(XQFIL,"B",XQN)),XQX=XQK-1 Q:XQN=""!(XQN]XQEND)  S XQON=$O(^ORD(XQFIL,"B",XQN,0))
"RTN","XQOO",73,0)
 Q
"RTN","XQOO",74,0)
 ;
"RTN","XQOO",75,0)
REMOV R !!,"Remove all options previously selected? ",XQ:DTIME S:'$T XQ=U G:XQ[U OUT I XQ["N"!(XQ["n") W !!,"OK, you may continue." G ASK
"RTN","XQOO",76,0)
 K ^XTMP("XQOO",XQSET)
"RTN","XQOO",77,0)
 Q
"RTN","XQOO",78,0)
LSTFIL ;Show Option File
"RTN","XQOO",79,0)
 N XQE,XQR,XQS
"RTN","XQOO",80,0)
 D RANGE^XQOO2(.XQS,.XQE,.XQR) I XQR D BXREF^XQOO2(XQS,XQE)
"RTN","XQOO",81,0)
 Q
"RTN","XQOO",82,0)
 ;
"RTN","XQOO",83,0)
LIST ;List users and options selected so far.
"RTN","XQOO",84,0)
 W @IOF S (XQT,XQM)=0
"RTN","XQOO",85,0)
 F XQFIL0=19,101 D
"RTN","XQOO",86,0)
 .S XQT=0,XQN=0,XQN=$O(^XTMP("XQOO",XQSET,XQFIL0,XQN)) I XQN="" W !!,"No "_$S(XQFIL0=19:"menu options",1:"protocols")_" selected yet" Q
"RTN","XQOO",87,0)
 .W !!,"You will place Out Of Order the following "_$S(XQFIL0=19:"options:",1:"protocols:"),! F XQI=0:0 D:$Y+3>IOSL WAIT Q:XQ=U  W !,$P(^XTMP("XQOO",XQSET,XQFIL0,XQN),U,2)_"   ["_$P(^(XQN),U)_"]   (IEN = "_XQN_")" S XQN=$O(^(XQN)) Q:XQN=""
"RTN","XQOO",88,0)
 .Q
"RTN","XQOO",89,0)
 Q
"RTN","XQOO",90,0)
 ;
"RTN","XQOO",91,0)
WAIT ;Skip to the head of the next page
"RTN","XQOO",92,0)
 I 1 S XQ="" R:IOST["C-" !!,"Press RETURN to continue, or '^' to quit.",XQ:DTIME S:'$T XQ=U W @IOF
"RTN","XQOO",93,0)
 Q
"RTN","XQOO",94,0)
 ;
"RTN","XQOO",95,0)
SET ;Set 0th node in ^XTMP global
"RTN","XQOO",96,0)
 I XQFIL=19,'$D(XQSWTCH) S XQFIL=101 G ASK
"RTN","XQOO",97,0)
 D ^XQDATE
"RTN","XQOO",98,0)
 I $D(^XTMP("XQOO",XQSET,0)) S XQMESS=$P(^(0),U)
"RTN","XQOO",99,0)
 S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_$P(^VA(200,DUZ,0),",")
"RTN","XQOO",100,0)
 S ^XTMP("XQOO",0)=DT_U_DT+7
"RTN","XQOO",101,0)
 ;
"RTN","XQOO",102,0)
OUT ;Clean up
"RTN","XQOO",103,0)
 ;
"RTN","XQOO",104,0)
 I '$D(XPDNM),'$D(^XTMP("XQOO",XQSET,0)),$D(^XTMP("XQOO",XQSET)) D
"RTN","XQOO",105,0)
 .;Temporary Fix: ^ at protocol prompt leaves partial set (no 0th node)
"RTN","XQOO",106,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO",107,0)
 .S DIR("A")="Delete this set of options? (Y/N) "
"RTN","XQOO",108,0)
 .D ^DIR
"RTN","XQOO",109,0)
 .I Y K ^XTMP("XQOO",XQSET)
"RTN","XQOO",110,0)
 .E  D ^XQDATE S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_$P(^VA(200,DUZ,0),","),^XTMP("XQOO",0)=DT_U_DT+7
"RTN","XQOO",111,0)
 .Q
"RTN","XQOO",112,0)
 ;
"RTN","XQOO",113,0)
 I '$D(XPDNM),$D(^XTMP("XQOO",XQSET,0)) D
"RTN","XQOO",114,0)
 .S DIR(0)="Y",DIR("B")="N"
"RTN","XQOO",115,0)
 .S DIR("A")="Should I mark these options/protocols out-of-order now? (Y/N) "
"RTN","XQOO",116,0)
 .D ^DIR I Y D OFF^XQOO1(XQSET)
"RTN","XQOO",117,0)
 .Q
"RTN","XQOO",118,0)
 ;
"RTN","XQOO",119,0)
 K %,%Y,XQ,XQDEL,XQEND,XQFIL,XQFIL0,XQI,XQINI,XQK,XQMESS,XQN,XQON,XQON0,XQSTART,XQSWTCH,Y
"RTN","XQOO",120,0)
 Q
"RTN","XQOO1")
0^9^B73136716
"RTN","XQOO1",1,0)
XQOO1   ;Luke/SEA - Out-of-order set calls ;02/22/96  08:23
"RTN","XQOO1",2,0)
 ;;8.0;KERNEL;**10,21**;Jul 10, 1995
"RTN","XQOO1",3,0)
 ;
"RTN","XQOO1",4,0)
OFF(XQSET) ;Mark options and protocols Out Of Order
"RTN","XQOO1",5,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",6,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",7,0)
 ;
"RTN","XQOO1",8,0)
 S XQN=0
"RTN","XQOO1",9,0)
 I $D(^XTMP("XQOO",XQSET,19)) F  Q:XQN=""  D
"RTN","XQOO1",10,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,19,XQN))
"RTN","XQOO1",11,0)
 .Q:XQN=""
"RTN","XQOO1",12,0)
 .I $D(^DIC(19,XQN,0))#2,$P(^(0),U,3)]"" S $P(^XTMP("XQOO",XQSET,19,0),U,3)=$P(^DIC(19,XQN,0),U,3) ;Save off current OOO message
"RTN","XQOO1",13,0)
 .I $D(^DIC(19,XQN,0))#2 S $P(^(0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",14,0)
 .Q
"RTN","XQOO1",15,0)
 ;
"RTN","XQOO1",16,0)
 I '$D(XPDSET) D
"RTN","XQOO1",17,0)
 .S XQN=0
"RTN","XQOO1",18,0)
 .I $D(^XTMP("XQOO",XQSET,101)) F  Q:XQN=""  D
"RTN","XQOO1",19,0)
 ..S XQN=$O(^XTMP("XQOO",XQSET,101,XQN))
"RTN","XQOO1",20,0)
 ..Q:XQN=""
"RTN","XQOO1",21,0)
 ..I $D(^ORD(101,XQN,0))#2,$P(^(0),U,3)]"" S $P(^XTMP("XQOO",XQSET,101,XQN),U,3)=$P(^ORD(101,XQN,0),U,3)
"RTN","XQOO1",22,0)
 ..I $D(^ORD(101,XQN,0))#2 S $P(^(0),U,3)=XQMESS
"RTN","XQOO1",23,0)
 ..Q
"RTN","XQOO1",24,0)
 .Q
"RTN","XQOO1",25,0)
 D OUT
"RTN","XQOO1",26,0)
 D KICK^XQ7
"RTN","XQOO1",27,0)
 Q
"RTN","XQOO1",28,0)
 ;
"RTN","XQOO1",29,0)
ON(XQSET) ;Remove Out Of Order messages from the set XQSET
"RTN","XQOO1",30,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",31,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",32,0)
 ;
"RTN","XQOO1",33,0)
 S XQN=0
"RTN","XQOO1",34,0)
 I $D(^XTMP("XQOO",XQSET,19)) F  Q:XQN=""  D
"RTN","XQOO1",35,0)
 .S XQN=$O(^XTMP("XQOO",XQSET,19,XQN))
"RTN","XQOO1",36,0)
 .Q:XQN=""
"RTN","XQOO1",37,0)
 .I $D(^DIC(19,XQN,0))#2,$P(^(0),U,3)=XQMESS S $P(^(0),U,3)="",DA=XQN D REDO^XQ7
"RTN","XQOO1",38,0)
 .I $P(^XTMP("XQOO",XQSET,19,XQN),U,3)]"" S $P(^DIC(19,XQN,0),U,3)=$P(^XTMP("XQOO",XQSET,19,XQN),U,3)
"RTN","XQOO1",39,0)
 .Q
"RTN","XQOO1",40,0)
 ;
"RTN","XQOO1",41,0)
 I '$D(XPDSET) D
"RTN","XQOO1",42,0)
 .S XQN=0
"RTN","XQOO1",43,0)
 .I $D(^XTMP("XQOO",XQSET,101)) F  Q:XQN=""  D
"RTN","XQOO1",44,0)
 ..S XQN=$O(^XTMP("XQOO",XQSET,101,XQN))
"RTN","XQOO1",45,0)
 ..Q:XQN=""
"RTN","XQOO1",46,0)
 ..I $D(^ORD(101,XQN,0))#2,$P(^(0),U,3)=XQMESS S $P(^(0),U,3)=""
"RTN","XQOO1",47,0)
 ..I $P(^XTMP("XQOO",XQSET,101,XQN),U,3)]"" S $P(^ORD(101,XQN,0),U,3)=$P(^XTMP("XQOO",XQSET,101,XQN),U,3)
"RTN","XQOO1",48,0)
 ..Q
"RTN","XQOO1",49,0)
 .Q
"RTN","XQOO1",50,0)
 ;
"RTN","XQOO1",51,0)
 I '$D(XPDSET) D
"RTN","XQOO1",52,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",53,0)
 .S DIR("A")="Should I remove the option set "_XQSET_" from ^XTMP?"
"RTN","XQOO1",54,0)
 .S DIR("?")=XQSET_" is the list of options and/or protocols you just turned on."
"RTN","XQOO1",55,0)
 .D ^DIR
"RTN","XQOO1",56,0)
 .I Y K ^XTMP("XQOO",XQSET)
"RTN","XQOO1",57,0)
 .K DIR,Y
"RTN","XQOO1",58,0)
 .Q
"RTN","XQOO1",59,0)
 D OUT
"RTN","XQOO1",60,0)
 D KICK^XQ7
"RTN","XQOO1",61,0)
 Q
"RTN","XQOO1",62,0)
 ;
"RTN","XQOO1",63,0)
ADD(XQSET,XQFIL,XQN) ;New option/protocol - add to set and mark it OOO
"RTN","XQOO1",64,0)
 ;Called by KIDS during a build
"RTN","XQOO1",65,0)
 I '$D(^XTMP("XQOO",XQSET,0)) S XQSET="^" D OUT Q
"RTN","XQOO1",66,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",67,0)
 S XQGL=$S(XQFIL=19:"^DIC(",1:"^ORD(")
"RTN","XQOO1",68,0)
 S %=@(XQGL_XQFIL_","_XQN_",0)"),^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(%,U)_"^"_$P(%,U,2)
"RTN","XQOO1",69,0)
 S %=XQGL_XQFIL_","_XQN_",0)",$P(@%,U,3)=XQMESS
"RTN","XQOO1",70,0)
 D OUT
"RTN","XQOO1",71,0)
 Q
"RTN","XQOO1",72,0)
 ;
"RTN","XQOO1",73,0)
KIDS(XQSET,XQFIL,XQNAME,XQFLAG) ;Turn on/off an option or protocol
"RTN","XQOO1",74,0)
 ;Called only from KIDS during an install so OERR would work
"RTN","XQOO1",75,0)
 ;XQFLAG is set to 0 to put an option or protocol out of order,
"RTN","XQOO1",76,0)
 ;1 to turn it on, and I return it as -1 if the request 
"RTN","XQOO1",77,0)
 ;fails.
"RTN","XQOO1",78,0)
 ;
"RTN","XQOO1",79,0)
 N XQGL,XQMESS,XQMES2,XQN
"RTN","XQOO1",80,0)
 I '$D(^XTMP("XQOO",XQSET)) S XQFLAG=-1 Q
"RTN","XQOO1",81,0)
 S XQGL=$S(XQFIL=19:"^DIC(19)",XQFIL=101:"^ORD(101)",1:"")
"RTN","XQOO1",82,0)
 I XQGL="" S XQFLAG=-1 Q
"RTN","XQOO1",83,0)
 I XQNAME=+XQNAME S XQN=XQNAME
"RTN","XQOO1",84,0)
 E  D  I XQFLAG<0 Q
"RTN","XQOO1",85,0)
 .S XQN=$O(@XQGL@("B",XQNAME,0)) I XQN'>0 S XQFLAG=-1
"RTN","XQOO1",86,0)
 .Q
"RTN","XQOO1",87,0)
 S %=@XQGL@(XQN,0) S XQMES2=$S($P(%,U,3)]"":$P(%,U,3),1:"")
"RTN","XQOO1",88,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",89,0)
 I XQMESS=XQMES2 S XQMES2=""
"RTN","XQOO1",90,0)
        I '$D(^XTMP("XQOO",XQSET,XQFIL,XQN)) S ^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(@XQGL@(XQN,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",91,0)
 ;
"RTN","XQOO1",92,0)
 I 'XQFLAG D
"RTN","XQOO1",93,0)
 .I XQMES2]"" S $P(^XTMP("XQOO",XQSET,XQFIL,XQN),U,3)=XQMES2
"RTN","XQOO1",94,0)
 .S $P(@XQGL@(XQN,0),U,3)=XQMESS
"RTN","XQOO1",95,0)
 .Q
"RTN","XQOO1",96,0)
 I XQFLAG D
"RTN","XQOO1",97,0)
 .S $P(@XQGL@(XQN,0),U,3)=""
"RTN","XQOO1",98,0)
 .Q
"RTN","XQOO1",99,0)
 ;
"RTN","XQOO1",100,0)
OUT ;Exit point
"RTN","XQOO1",101,0)
 K %,XQFIL,XQGL,XQMESS,XQN,XQS
"RTN","XQOO1",102,0)
 Q
"RTN","XQOO1",103,0)
 ;
"RTN","XQOO1",104,0)
OFFOP ;Option entry for turning off options
"RTN","XQOO1",105,0)
 W !
"RTN","XQOO1",106,0)
 S XQSET=""
"RTN","XQOO1",107,0)
 D GETSET(.XQSET)
"RTN","XQOO1",108,0)
 I XQSET]"" D
"RTN","XQOO1",109,0)
 .S DIR(0)="Y",DIR("B")="N"
"RTN","XQOO1",110,0)
 .S DIR("A")="Mark the options in "_XQSET_" Out-Of Order now"
"RTN","XQOO1",111,0)
 .S DIR("?")="If you answer ""Yes"" you will mark all the options in the set "_XQSET_" Out Of Order."
"RTN","XQOO1",112,0)
 .D ^DIR
"RTN","XQOO1",113,0)
 .I Y D OFF(XQSET)
"RTN","XQOO1",114,0)
 .K DIR,X,Y
"RTN","XQOO1",115,0)
 .Q
"RTN","XQOO1",116,0)
 Q
"RTN","XQOO1",117,0)
 ;
"RTN","XQOO1",118,0)
 ;
"RTN","XQOO1",119,0)
ONOP ;Option entry for turning on options
"RTN","XQOO1",120,0)
 S XQSET=""
"RTN","XQOO1",121,0)
 D GETSET(.XQSET)
"RTN","XQOO1",122,0)
 I XQSET]"" D
"RTN","XQOO1",123,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",124,0)
 .S DIR("A")="Return options in "_XQSET_" to general use"
"RTN","XQOO1",125,0)
 .S DIR("?")="If you answer ""Yes"" you will remove the Out-Of-Order message from the options in the set "_XQSET
"RTN","XQOO1",126,0)
 .D ^DIR
"RTN","XQOO1",127,0)
 .I Y D ON(XQSET)
"RTN","XQOO1",128,0)
 .K DIR,X,Y
"RTN","XQOO1",129,0)
 .Q
"RTN","XQOO1",130,0)
 D KICK^XQ7
"RTN","XQOO1",131,0)
 Q
"RTN","XQOO1",132,0)
 ;
"RTN","XQOO1",133,0)
GETSET(XQSET) ;Get the name of the option set in question
"RTN","XQOO1",134,0)
 I '$D(^XTMP("XQOO")) W !!,"There are currently no option sets definded in ^XTMP." Q
"RTN","XQOO1",135,0)
 S XQI=0
"RTN","XQOO1",136,0)
 D SETS^XQOO2(.XQI)
"RTN","XQOO1",137,0)
 I XQI=1 S XQSET=0,XQSET=$O(^XTMP("XQOO",XQSET)) Q
"RTN","XQOO1",138,0)
 I XQI>1 D
"RTN","XQOO1",139,0)
 .S DIR(0)="NO^1:"_XQI,DIR("B")=XQI
"RTN","XQOO1",140,0)
 .S DIR("A")=" Please enter the number of the option set you want"
"RTN","XQOO1",141,0)
 .S DIR("?")=" Which option set do you want to work with? 1, "_XQI_" etc."
"RTN","XQOO1",142,0)
 .W !
"RTN","XQOO1",143,0)
 .D ^DIR
"RTN","XQOO1",144,0)
 .S XQSET=0 F XQI=1:1:+Y S XQSET=$O(^XTMP("XQOO",XQSET))
"RTN","XQOO1",145,0)
 .Q
"RTN","XQOO1",146,0)
 K XQI
"RTN","XQOO1",147,0)
 Q
"RTN","XQOO1",148,0)
 ;
"RTN","XQOO1",149,0)
 ;
"RTN","XQOO1",150,0)
REBLD ;Rebuild a "lost" set of options and protocols
"RTN","XQOO1",151,0)
 N XQ,XQMESS,XQOP,XQPROT,XQSET
"RTN","XQOO1",152,0)
 S (XQOP,XQPROT)=0
"RTN","XQOO1",153,0)
 ;
"RTN","XQOO1",154,0)
 S DIR(0)="F^3:30"
"RTN","XQOO1",155,0)
 S DIR("A")=" Please enter the exact Out-Of-Order message"
"RTN","XQOO1",156,0)
 S DIR("?")=" All options/protocols with this message are reclaimed into a set in ^XTMP"
"RTN","XQOO1",157,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",158,0)
 S XQMESS=X K DIR
"RTN","XQOO1",159,0)
 ;
"RTN","XQOO1",160,0)
RE1 S DIR(0)="F^1:20"
"RTN","XQOO1",161,0)
 S DIR("A")=" What do you want to name the recovered set? "
"RTN","XQOO1",162,0)
 S DIR("?")=" Enter any name of up to 20 characters"
"RTN","XQOO1",163,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",164,0)
 S XQSET=X K DIR
"RTN","XQOO1",165,0)
 I $D(^XTMP("XQOO",XQSET,0)) D  G RE1
"RTN","XQOO1",166,0)
 .W !,"Sorry, that set already exists.  Use the Create/Modify option to"
"RTN","XQOO1",167,0)
 .W !?3,"modify it, or choose another name."
"RTN","XQOO1",168,0)
 .Q
"RTN","XQOO1",169,0)
 ;
"RTN","XQOO1",170,0)
REFIND ;Find options and protocols with the message XQMESS
"RTN","XQOO1",171,0)
 S XQ=0 F  S XQ=$O(^DIC(19,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",172,0)
 .Q:$P(^DIC(19,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",173,0)
 .S ^XTMP("XQOO",XQSET,19,XQ)=$P(^DIC(19,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",174,0)
 .S XQOP=XQOP+1
"RTN","XQOO1",175,0)
 .Q
"RTN","XQOO1",176,0)
 ;
"RTN","XQOO1",177,0)
 S XQ=0 F  S XQ=$O(^ORD(101,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",178,0)
 .Q:$P(^ORD(101,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",179,0)
 .S ^XTMP("XQOO",XQSET,101,XQ)=$P(^ORD(101,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",180,0)
 .S XQPROT=XQPROT+1
"RTN","XQOO1",181,0)
 .Q
"RTN","XQOO1",182,0)
 ;
"RTN","XQOO1",183,0)
 I XQOP>0!(XQPROT>0) D  G OUTRE
"RTN","XQOO1",184,0)
 .D ^XQDATE
"RTN","XQOO1",185,0)
 .S %=$P(^VA(200,DUZ,0),U),%=$P(%,",")
"RTN","XQOO1",186,0)
 .S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_%
"RTN","XQOO1",187,0)
 .S ^XTMP("XQOO",0)=DT+7
"RTN","XQOO1",188,0)
 .W !!,"Set named ",XQSET," recovered with ",XQOP," options and ",XQPROT," protocols."
"RTN","XQOO1",189,0)
 .Q
"RTN","XQOO1",190,0)
 E  W !!,"No options or protocols with the message ",XQMESS," were found." G OUTRE
"RTN","XQOO1",191,0)
 Q
"RTN","XQOO1",192,0)
 ;
"RTN","XQOO1",193,0)
OUTRE ;Exit point for REBLD
"RTN","XQOO1",194,0)
 K %,%Y,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,XQ,XQMESS,XQOP,XQPROT,XQSET,Y
"RTN","XQOO1",195,0)
 Q
"RTN","XQOO1",196,0)
 ;
"RTN","XQOO1",197,0)
TOG ;Toggle options and protocols on and off. (XQOOTOG option)
"RTN","XQOO1",198,0)
 N XQ
"RTN","XQOO1",199,0)
 D T1,OUTT,T2,KICK^XQ7
"RTN","XQOO1",200,0)
 ;
"RTN","XQOO1",201,0)
OUTT ;Exit for XQOOTOG
"RTN","XQOO1",202,0)
 K DIC,DTOUT,DUOUT,X,Y
"RTN","XQOO1",203,0)
 Q
"RTN","XQOO1",204,0)
 ;
"RTN","XQOO1",205,0)
T1 ;Toggle options
"RTN","XQOO1",206,0)
 S DIC=19,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of an option: "
"RTN","XQOO1",207,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",208,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",209,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",210,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",211,0)
 ..W !!,"Option ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",212,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",213,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",214,0)
 ..D ^DIR
"RTN","XQOO1",215,0)
 ..I Y S $P(^DIC(19,XQ,0),U,3)="",DA=XQ D REDO^XQ7
"RTN","XQOO1",216,0)
 ..K DIR,X,Y
"RTN","XQOO1",217,0)
 ..Q
"RTN","XQOO1",218,0)
 .E  W ! D
"RTN","XQOO1",219,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this option out of order: "
"RTN","XQOO1",220,0)
 ..S DIR("?")="This option is in service.  Enter a string to remove it from use."
"RTN","XQOO1",221,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",222,0)
 ..I '$D(DIRUT) S $P(^DIC(19,XQ,0),U,3)=Y,DA=XQ D REDO^XQ7
"RTN","XQOO1",223,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",224,0)
 ..Q
"RTN","XQOO1",225,0)
 .Q
"RTN","XQOO1",226,0)
 Q
"RTN","XQOO1",227,0)
 ;
"RTN","XQOO1",228,0)
T2 ;Toggle protocols
"RTN","XQOO1",229,0)
 S DIC=101,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of a protocol: "
"RTN","XQOO1",230,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",231,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",232,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",233,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",234,0)
 ..W !!,"Protocol ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",235,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",236,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",237,0)
 ..D ^DIR
"RTN","XQOO1",238,0)
 ..I Y S $P(^ORD(101,XQ,0),U,3)=""
"RTN","XQOO1",239,0)
 ..K DA,DIR,X,Y
"RTN","XQOO1",240,0)
 ..Q
"RTN","XQOO1",241,0)
 .E  W ! D
"RTN","XQOO1",242,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this protocol out of order: "
"RTN","XQOO1",243,0)
 ..S DIR("?")="This protocol is in service.  Enter a string to remove it from use."
"RTN","XQOO1",244,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",245,0)
 ..I '$D(DIRUT) S $P(^ORD(101,XQ,0),U,3)=Y
"RTN","XQOO1",246,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",247,0)
 ..Q
"RTN","XQOO1",248,0)
 .Q
"RTN","XQOO1",249,0)
 Q
"VER")
8.0^21.0
**END**
**END**
