[4wKIDS Distribution saved on Sep 10, 2003@20:21:34
IB*2.0*184 Insurance Identification and Verification (eIIV) Release Version
**KIDS**:IB*2.0*184^

**INSTALL NAME**
IB*2.0*184
"BLD",4063,0)
IB*2.0*184^INTEGRATED BILLING^0^3030910^y
"BLD",4063,1,0)
^^2^2^3030910^
"BLD",4063,1,1,0)
This is the build for the electronic Insurance Identification and 
"BLD",4063,1,2,0)
Verification project (also referred to as eIIV and IIV).
"BLD",4063,4,0)
^9.64PA^365.15^20
"BLD",4063,4,2,0)
2
"BLD",4063,4,2,2,0)
^9.641^2.312^1
"BLD",4063,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",4063,4,2,2,2.312,1,0)
^9.6411^1.09^1
"BLD",4063,4,2,2,2.312,1,1.09,0)
SOURCE OF INFORMATION
"BLD",4063,4,2,222)
y^n^p^^^^n
"BLD",4063,4,36,0)
36
"BLD",4063,4,36,2,0)
^9.641^36^1
"BLD",4063,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",4063,4,36,2,36,1,0)
^9.6411^.168^3
"BLD",4063,4,36,2,36,1,.128,0)
ANOTHER CO. PROC. INPT CLAIMS?
"BLD",4063,4,36,2,36,1,.168,0)
ANOTHER CO. PROC. OPT CLAIMS?
"BLD",4063,4,36,2,36,1,3.1,0)
PAYER
"BLD",4063,4,36,222)
y^n^p^^^^n
"BLD",4063,4,350.9,0)
350.9
"BLD",4063,4,350.9,2,0)
^9.641^350.9003^3
"BLD",4063,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",4063,4,350.9,2,350.9,1,0)
^9.6411^51.23^21
"BLD",4063,4,350.9,2,350.9,1,51.01,0)
FRESHNESS DAYS
"BLD",4063,4,350.9,2,350.9,1,51.02,0)
DAILY MAILMAN MSG
"BLD",4063,4,350.9,2,350.9,1,51.03,0)
DAILY MSG TIME
"BLD",4063,4,350.9,2,350.9,1,51.04,0)
MESSAGES MAILGROUP
"BLD",4063,4,350.9,2,350.9,1,51.05,0)
FAILURE DAYS
"BLD",4063,4,350.9,2,350.9,1,51.06,0)
NUMBER RETRIES
"BLD",4063,4,350.9,2,350.9,1,51.07,0)
FAILURE MAILMAN MSG
"BLD",4063,4,350.9,2,350.9,1,51.08,0)
INQUIRE INACTIVE INSURANCE
"BLD",4063,4,350.9,2,350.9,1,51.09,0)
INQUIRE POPULAR INSUR CO.
"BLD",4063,4,350.9,2,350.9,1,51.1,0)
NO. POPULAR INSUR CO.
"BLD",4063,4,350.9,2,350.9,1,51.11,0)
POPULAR INSUR CO. FROM DATE
"BLD",4063,4,350.9,2,350.9,1,51.12,0)
POPULAR INSUR CO. THRU DATE
"BLD",4063,4,350.9,2,350.9,1,51.13,0)
HL7 RESPONSE PROCESSING
"BLD",4063,4,350.9,2,350.9,1,51.14,0)
HL7 START TIME
"BLD",4063,4,350.9,2,350.9,1,51.15,0)
HL7 MAXIMUM NUMBER
"BLD",4063,4,350.9,2,350.9,1,51.16,0)
CONTACT PERSON
"BLD",4063,4,350.9,2,350.9,1,51.19,0)
HL7 STOP TIME
"BLD",4063,4,350.9,2,350.9,1,51.2,0)
FAILURE MAILMAN MSG
"BLD",4063,4,350.9,2,350.9,1,51.21,0)
MOST POPULAR COMPILE DATE
"BLD",4063,4,350.9,2,350.9,1,51.22,0)
REGISTRATION FAILURE
"BLD",4063,4,350.9,2,350.9,1,51.23,0)
INQUIRE SECONDARY INSURANCES
"BLD",4063,4,350.9,2,350.9002,0)
BATCH EXTRACTS  (sub-file)
"BLD",4063,4,350.9,2,350.9002,1,0)
^9.6411^^0
"BLD",4063,4,350.9,2,350.9003,0)
POPULAR INSUR CO.  (sub-file)
"BLD",4063,4,350.9,2,350.9003,1,0)
^9.6411^^0
"BLD",4063,4,350.9,222)
y^n^p^^^^n
"BLD",4063,4,355.33,0)
355.33
"BLD",4063,4,355.33,2,0)
^9.641^355.33^1
"BLD",4063,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",4063,4,355.33,2,355.33,1,0)
^9.6411^.15^5
"BLD",4063,4,355.33,2,355.33,1,.03,0)
SOURCE OF INFORMATION
"BLD",4063,4,355.33,2,355.33,1,.12,0)
IIV STATUS
"BLD",4063,4,355.33,2,355.33,1,.13,0)
OVERRIDE FRESHNESS FLAG
"BLD",4063,4,355.33,2,355.33,1,.15,0)
IIV PROCESSED DATE
"BLD",4063,4,355.33,2,355.33,1,20.01,0)
INSURANCE COMPANY NAME
"BLD",4063,4,355.33,222)
y^n^p^^^^n
"BLD",4063,4,365,0)
365
"BLD",4063,4,365,222)
y^y^f^^^^n
"BLD",4063,4,365.011,0)
365.011
"BLD",4063,4,365.011,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.012,0)
365.012
"BLD",4063,4,365.012,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.013,0)
365.013
"BLD",4063,4,365.013,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.014,0)
365.014
"BLD",4063,4,365.014,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.015,0)
365.015
"BLD",4063,4,365.015,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.016,0)
365.016
"BLD",4063,4,365.016,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.017,0)
365.017
"BLD",4063,4,365.017,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.018,0)
365.018
"BLD",4063,4,365.018,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.021,0)
365.021
"BLD",4063,4,365.021,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.1,0)
365.1
"BLD",4063,4,365.1,222)
y^y^f^^^^n
"BLD",4063,4,365.11,0)
365.11
"BLD",4063,4,365.11,222)
y^y^f^^^^n
"BLD",4063,4,365.12,0)
365.12
"BLD",4063,4,365.12,222)
y^y^f^^^^n
"BLD",4063,4,365.13,0)
365.13
"BLD",4063,4,365.13,222)
y^y^f^^n^^n^o^n
"BLD",4063,4,365.14,0)
365.14
"BLD",4063,4,365.14,222)
y^y^f^^n^^y^o^n
"BLD",4063,4,365.15,0)
365.15
"BLD",4063,4,365.15,222)
y^y^f^^n^^y^o^n
"BLD",4063,4,"APDD",2,2.312)

"BLD",4063,4,"APDD",2,2.312,1.09)

"BLD",4063,4,"APDD",36,36)

"BLD",4063,4,"APDD",36,36,.128)

"BLD",4063,4,"APDD",36,36,.168)

"BLD",4063,4,"APDD",36,36,3.1)

"BLD",4063,4,"APDD",350.9,350.9)

"BLD",4063,4,"APDD",350.9,350.9,51.01)

"BLD",4063,4,"APDD",350.9,350.9,51.02)

"BLD",4063,4,"APDD",350.9,350.9,51.03)

"BLD",4063,4,"APDD",350.9,350.9,51.04)

"BLD",4063,4,"APDD",350.9,350.9,51.05)

"BLD",4063,4,"APDD",350.9,350.9,51.06)

"BLD",4063,4,"APDD",350.9,350.9,51.07)

"BLD",4063,4,"APDD",350.9,350.9,51.08)

"BLD",4063,4,"APDD",350.9,350.9,51.09)

"BLD",4063,4,"APDD",350.9,350.9,51.1)

"BLD",4063,4,"APDD",350.9,350.9,51.11)

"BLD",4063,4,"APDD",350.9,350.9,51.12)

"BLD",4063,4,"APDD",350.9,350.9,51.13)

"BLD",4063,4,"APDD",350.9,350.9,51.14)

"BLD",4063,4,"APDD",350.9,350.9,51.15)

"BLD",4063,4,"APDD",350.9,350.9,51.16)

"BLD",4063,4,"APDD",350.9,350.9,51.19)

"BLD",4063,4,"APDD",350.9,350.9,51.2)

"BLD",4063,4,"APDD",350.9,350.9,51.21)

"BLD",4063,4,"APDD",350.9,350.9,51.22)

"BLD",4063,4,"APDD",350.9,350.9,51.23)

"BLD",4063,4,"APDD",350.9,350.9002)

"BLD",4063,4,"APDD",350.9,350.9003)

"BLD",4063,4,"APDD",355.33,355.33)

"BLD",4063,4,"APDD",355.33,355.33,.03)

"BLD",4063,4,"APDD",355.33,355.33,.12)

"BLD",4063,4,"APDD",355.33,355.33,.13)

"BLD",4063,4,"APDD",355.33,355.33,.15)

"BLD",4063,4,"APDD",355.33,355.33,20.01)

"BLD",4063,4,"B",2,2)

"BLD",4063,4,"B",36,36)

"BLD",4063,4,"B",350.9,350.9)

"BLD",4063,4,"B",355.33,355.33)

"BLD",4063,4,"B",365,365)

"BLD",4063,4,"B",365.011,365.011)

"BLD",4063,4,"B",365.012,365.012)

"BLD",4063,4,"B",365.013,365.013)

"BLD",4063,4,"B",365.014,365.014)

"BLD",4063,4,"B",365.015,365.015)

"BLD",4063,4,"B",365.016,365.016)

"BLD",4063,4,"B",365.017,365.017)

"BLD",4063,4,"B",365.018,365.018)

"BLD",4063,4,"B",365.021,365.021)

"BLD",4063,4,"B",365.1,365.1)

"BLD",4063,4,"B",365.11,365.11)

"BLD",4063,4,"B",365.12,365.12)

"BLD",4063,4,"B",365.13,365.13)

"BLD",4063,4,"B",365.14,365.14)

"BLD",4063,4,"B",365.15,365.15)

"BLD",4063,"ABPKG")
n
"BLD",4063,"INIT")
IBCNEPST
"BLD",4063,"KRN",0)
^9.67PA^8989.52^19
"BLD",4063,"KRN",.4,0)
.4
"BLD",4063,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",4063,"KRN",.401,0)
.401
"BLD",4063,"KRN",.401,"NM",0)
^9.68A^^
"BLD",4063,"KRN",.402,0)
.402
"BLD",4063,"KRN",.402,"NM",0)
^9.68A^2^2
"BLD",4063,"KRN",.402,"NM",1,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",4063,"KRN",.402,"NM",2,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",4063,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",2)

"BLD",4063,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",1)

"BLD",4063,"KRN",.403,0)
.403
"BLD",4063,"KRN",.5,0)
.5
"BLD",4063,"KRN",.5,"NM",0)
^9.68A^^0
"BLD",4063,"KRN",.84,0)
.84
"BLD",4063,"KRN",3.6,0)
3.6
"BLD",4063,"KRN",3.8,0)
3.8
"BLD",4063,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",4063,"KRN",3.8,"NM",1,0)
IBCNE IIV MESSAGE^^0
"BLD",4063,"KRN",3.8,"NM","B","IBCNE IIV MESSAGE",1)

"BLD",4063,"KRN",9.2,0)
9.2
"BLD",4063,"KRN",9.2,"NM",0)
^9.68A^^
"BLD",4063,"KRN",9.8,0)
9.8
"BLD",4063,"KRN",9.8,"NM",0)
^9.68A^76^73
"BLD",4063,"KRN",9.8,"NM",1,0)
IBCNEAME^^0^B8940686
"BLD",4063,"KRN",9.8,"NM",2,0)
IBCNEAMI^^0^B20653613
"BLD",4063,"KRN",9.8,"NM",3,0)
IBCNEUT1^^0^B33603643
"BLD",4063,"KRN",9.8,"NM",4,0)
IBCNEPST^^0^B36040231
"BLD",4063,"KRN",9.8,"NM",5,0)
IBCNBLA^^0^B62895557
"BLD",4063,"KRN",9.8,"NM",6,0)
IBCNBLL^^0^B54036593
"BLD",4063,"KRN",9.8,"NM",7,0)
IBCNBU1^^0^B27057313
"BLD",4063,"KRN",9.8,"NM",8,0)
IBCNERP1^^0^B92993429
"BLD",4063,"KRN",9.8,"NM",9,0)
IBCNERP2^^0^B72887126
"BLD",4063,"KRN",9.8,"NM",10,0)
IBCNERP3^^0^B81351092
"BLD",4063,"KRN",9.8,"NM",11,0)
IBCNERP4^^0^B13766575
"BLD",4063,"KRN",9.8,"NM",12,0)
IBCNERP5^^0^B63369304
"BLD",4063,"KRN",9.8,"NM",13,0)
IBCNERP6^^0^B78648097
"BLD",4063,"KRN",9.8,"NM",14,0)
IBCNBES^^0^B5591654
"BLD",4063,"KRN",9.8,"NM",15,0)
IBCNBME^^0^B16610302
"BLD",4063,"KRN",9.8,"NM",16,0)
IBCNSMM^^0^B20650555
"BLD",4063,"KRN",9.8,"NM",19,0)
IBCNERP7^^0^B26918279
"BLD",4063,"KRN",9.8,"NM",20,0)
IBCNERP8^^0^B53952311
"BLD",4063,"KRN",9.8,"NM",21,0)
IBCNERP9^^0^B74379250
"BLD",4063,"KRN",9.8,"NM",22,0)
IBJPI^^0^B66045936
"BLD",4063,"KRN",9.8,"NM",23,0)
IBJPM^^0^B11460746
"BLD",4063,"KRN",9.8,"NM",24,0)
IBCNEAMC^^0^B32075549
"BLD",4063,"KRN",9.8,"NM",25,0)
IBCNEUT2^^0^B2641881
"BLD",4063,"KRN",9.8,"NM",26,0)
IBCNEUT3^^0^B55785885
"BLD",4063,"KRN",9.8,"NM",27,0)
IBCNEUT4^^0^B65728721
"BLD",4063,"KRN",9.8,"NM",28,0)
IBCNBLA1^^0^B70930350
"BLD",4063,"KRN",9.8,"NM",29,0)
IBCNBEE^^0^B43543449
"BLD",4063,"KRN",9.8,"NM",30,0)
IBCNBLE^^0^B66092536
"BLD",4063,"KRN",9.8,"NM",31,0)
IBCNBLE1^^0^B25530328
"BLD",4063,"KRN",9.8,"NM",32,0)
IBJPI2^^0^B57576755
"BLD",4063,"KRN",9.8,"NM",33,0)
IBCNEQU^^0^B84528293
"BLD",4063,"KRN",9.8,"NM",34,0)
IBCNEUT5^^0^B55092199
"BLD",4063,"KRN",9.8,"NM",35,0)
IBCNEDE^^0^B62221269
"BLD",4063,"KRN",9.8,"NM",36,0)
IBCNEDE1^^0^B32948598
"BLD",4063,"KRN",9.8,"NM",37,0)
IBCNEDE2^^0^B36569439
"BLD",4063,"KRN",9.8,"NM",38,0)
IBCNEDE3^^0^B50082845
"BLD",4063,"KRN",9.8,"NM",39,0)
IBCNEDE4^^0^B83858360
"BLD",4063,"KRN",9.8,"NM",40,0)
IBCNEBF^^0^B26327427
"BLD",4063,"KRN",9.8,"NM",41,0)
IBCNSC01^^0^B48362855
"BLD",4063,"KRN",9.8,"NM",42,0)
IBCNSC^^0^B15839129
"BLD",4063,"KRN",9.8,"NM",43,0)
IBCNEKIT^^0^B54226772
"BLD",4063,"KRN",9.8,"NM",44,0)
IBCNEPY^^0^B21965484
"BLD",4063,"KRN",9.8,"NM",45,0)
IBCNEDEP^^0^B93131109
"BLD",4063,"KRN",9.8,"NM",46,0)
IBCNEHLD^^0^B4084457
"BLD",4063,"KRN",9.8,"NM",47,0)
IBCNEHLI^^0^B6564280
"BLD",4063,"KRN",9.8,"NM",48,0)
IBCNEHLM^^0^B21850110
"BLD",4063,"KRN",9.8,"NM",49,0)
IBCNEHLO^^0^B600205
"BLD",4063,"KRN",9.8,"NM",50,0)
IBCNEHLQ^^0^B30315295
"BLD",4063,"KRN",9.8,"NM",51,0)
IBCNEHLR^^0^B26929967
"BLD",4063,"KRN",9.8,"NM",52,0)
IBCNEHLS^^0^B54044677
"BLD",4063,"KRN",9.8,"NM",53,0)
IBCNEHLT^^0^B46973489
"BLD",4063,"KRN",9.8,"NM",54,0)
IBCNEHLU^^0^B971602
"BLD",4063,"KRN",9.8,"NM",55,0)
IBCNEUT6^^0^B17080676
"BLD",4063,"KRN",9.8,"NM",56,0)
IBCNBLA2^^0^B13475042
"BLD",4063,"KRN",9.8,"NM",57,0)
IBCNBMI^^0^B47417405
"BLD",4063,"KRN",9.8,"NM",58,0)
IBCNBAA^^0^B58306297
"BLD",4063,"KRN",9.8,"NM",59,0)
IBCNBUH^^0^B21847670
"BLD",4063,"KRN",9.8,"NM",61,0)
IBCNEDE5^^0^B29926033
"BLD",4063,"KRN",9.8,"NM",62,0)
IBCNEUT7^^0^B3520436
"BLD",4063,"KRN",9.8,"NM",63,0)
IBCNEHLK^^0^B906706
"BLD",4063,"KRN",9.8,"NM",64,0)
IBCNEDEQ^^0^B18098974
"BLD",4063,"KRN",9.8,"NM",65,0)
IBCNEDE6^^0^B22582079
"BLD",4063,"KRN",9.8,"NM",66,0)
IBCNEPM^^0^B14696239
"BLD",4063,"KRN",9.8,"NM",67,0)
IBCNEPM1^^0^B17662698
"BLD",4063,"KRN",9.8,"NM",68,0)
IBCNEPM2^^0^B5442901
"BLD",4063,"KRN",9.8,"NM",69,0)
IBCNEHLP^^0^B72329786
"BLD",4063,"KRN",9.8,"NM",70,0)
IBCNERP0^^0^B5604786
"BLD",4063,"KRN",9.8,"NM",71,0)
IBCNERPA^^0^B6715235
"BLD",4063,"KRN",9.8,"NM",72,0)
IBCNBAC^^0^B51548829
"BLD",4063,"KRN",9.8,"NM",73,0)
IBCNEUT8^^0^B7469707
"BLD",4063,"KRN",9.8,"NM",74,0)
IBCNERPB^^0^B45852910
"BLD",4063,"KRN",9.8,"NM",75,0)
IBCNERPC^^0^B45629697
"BLD",4063,"KRN",9.8,"NM",76,0)
IBCNERPD^^0^B45290618
"BLD",4063,"KRN",9.8,"NM","B","IBCNBAA",58)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBAC",72)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBEE",29)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBES",14)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLA",5)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLA1",28)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLA2",56)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLE",30)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLE1",31)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBLL",6)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBME",15)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBMI",57)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBU1",7)

"BLD",4063,"KRN",9.8,"NM","B","IBCNBUH",59)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEAMC",24)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEAME",1)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEAMI",2)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEBF",40)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE",35)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE1",36)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE2",37)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE3",38)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE4",39)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE5",61)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDE6",65)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDEP",45)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEDEQ",64)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLD",46)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLI",47)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLK",63)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLM",48)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLO",49)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLP",69)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLQ",50)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLR",51)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLS",52)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLT",53)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEHLU",54)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEKIT",43)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEPM",66)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEPM1",67)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEPM2",68)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEPST",4)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEPY",44)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEQU",33)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP0",70)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP1",8)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP2",9)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP3",10)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP4",11)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP5",12)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP6",13)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP7",19)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP8",20)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERP9",21)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERPA",71)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERPB",74)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERPC",75)

"BLD",4063,"KRN",9.8,"NM","B","IBCNERPD",76)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT1",3)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT2",25)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT3",26)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT4",27)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT5",34)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT6",55)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT7",62)

"BLD",4063,"KRN",9.8,"NM","B","IBCNEUT8",73)

"BLD",4063,"KRN",9.8,"NM","B","IBCNSC",42)

"BLD",4063,"KRN",9.8,"NM","B","IBCNSC01",41)

"BLD",4063,"KRN",9.8,"NM","B","IBCNSMM",16)

"BLD",4063,"KRN",9.8,"NM","B","IBJPI",22)

"BLD",4063,"KRN",9.8,"NM","B","IBJPI2",32)

"BLD",4063,"KRN",9.8,"NM","B","IBJPM",23)

"BLD",4063,"KRN",19,0)
19
"BLD",4063,"KRN",19,"NM",0)
^9.68A^23^15
"BLD",4063,"KRN",19,"NM",1,0)
IBCNE AUTO MATCH ENTER/EDIT^^0
"BLD",4063,"KRN",19,"NM",3,0)
IBCN INSURANCE MGMT MENU^^2
"BLD",4063,"KRN",19,"NM",4,0)
IBCNE IIV PAYER REPORT^^0
"BLD",4063,"KRN",19,"NM",5,0)
IBCNE IIV RESPONSE REPORT^^0
"BLD",4063,"KRN",19,"NM",6,0)
IBCNE AUTO MATCH BUFFER^^0
"BLD",4063,"KRN",19,"NM",8,0)
IBCNE IIV STATISTICAL REPORT^^0
"BLD",4063,"KRN",19,"NM",11,0)
IBCNE PURGE IIV DATA^^0
"BLD",4063,"KRN",19,"NM",12,0)
IB PURGE MENU^^2
"BLD",4063,"KRN",19,"NM",13,0)
IBCNE PAYER EDIT^^0
"BLD",4063,"KRN",19,"NM",15,0)
IBCNE REQUEST INQUIRY^^0
"BLD",4063,"KRN",19,"NM",19,0)
IBCNE IIV BATCH PROCESS^^0
"BLD",4063,"KRN",19,"NM",20,0)
IBCNE IIV MENU^^0
"BLD",4063,"KRN",19,"NM",21,0)
IBCNE PAYER LINK^^0
"BLD",4063,"KRN",19,"NM",22,0)
IBCNE PAYER MAINTENANCE MENU^^0
"BLD",4063,"KRN",19,"NM",23,0)
IBCNE IIV PAYER LINK REPORT^^0
"BLD",4063,"KRN",19,"NM","B","IB PURGE MENU",12)

"BLD",4063,"KRN",19,"NM","B","IBCN INSURANCE MGMT MENU",3)

"BLD",4063,"KRN",19,"NM","B","IBCNE AUTO MATCH BUFFER",6)

"BLD",4063,"KRN",19,"NM","B","IBCNE AUTO MATCH ENTER/EDIT",1)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV BATCH PROCESS",19)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV MENU",20)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV PAYER LINK REPORT",23)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV PAYER REPORT",4)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV RESPONSE REPORT",5)

"BLD",4063,"KRN",19,"NM","B","IBCNE IIV STATISTICAL REPORT",8)

"BLD",4063,"KRN",19,"NM","B","IBCNE PAYER EDIT",13)

"BLD",4063,"KRN",19,"NM","B","IBCNE PAYER LINK",21)

"BLD",4063,"KRN",19,"NM","B","IBCNE PAYER MAINTENANCE MENU",22)

"BLD",4063,"KRN",19,"NM","B","IBCNE PURGE IIV DATA",11)

"BLD",4063,"KRN",19,"NM","B","IBCNE REQUEST INQUIRY",15)

"BLD",4063,"KRN",19.1,0)
19.1
"BLD",4063,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",4063,"KRN",19.1,"NM",1,0)
IBCNE IIV SUPERVISOR^^0
"BLD",4063,"KRN",19.1,"NM",2,0)
IBCNE IIV AUTO MATCH^^0
"BLD",4063,"KRN",19.1,"NM","B","IBCNE IIV AUTO MATCH",2)

"BLD",4063,"KRN",19.1,"NM","B","IBCNE IIV SUPERVISOR",1)

"BLD",4063,"KRN",101,0)
101
"BLD",4063,"KRN",101,"NM",0)
^9.68A^67^47
"BLD",4063,"KRN",101,"NM",1,0)
IBCNE AUTO MATCH BUFFER EXIT^^0
"BLD",4063,"KRN",101,"NM",2,0)
IBCNE AUTO MATCH BUFFER LINK^^0
"BLD",4063,"KRN",101,"NM",3,0)
IBCNE AUTO MATCH BUFFER MENU^^0
"BLD",4063,"KRN",101,"NM",4,0)
IBCNE AUTO MATCH BUFFER SELECT^^0
"BLD",4063,"KRN",101,"NM",6,0)
IBCNE IIV MFN OUT^^0
"BLD",4063,"KRN",101,"NM",8,0)
IBJP MCCR PARAMETERS MENU^^0
"BLD",4063,"KRN",101,"NM",9,0)
IBJP INS VER SCREEN^^0
"BLD",4063,"KRN",101,"NM",10,0)
IBJP IIV BATCH EXTRACT EDIT^^0
"BLD",4063,"KRN",101,"NM",11,0)
IBJP IIV MOST POPULAR EDIT^^0
"BLD",4063,"KRN",101,"NM",12,0)
IBJP IIV GENERAL EDIT^^0
"BLD",4063,"KRN",101,"NM",13,0)
IBJP IIV PAT W/O INS^^0
"BLD",4063,"KRN",101,"NM",14,0)
IBJP INS VER MENU^^0
"BLD",4063,"KRN",101,"NM",15,0)
IBCNB LIST CHECK NAMES^^0^
"BLD",4063,"KRN",101,"NM",16,0)
IBCNB LIST SCREEN MENU^^3
"BLD",4063,"KRN",101,"NM",17,0)
IBCNE FAST EXIT^^0
"BLD",4063,"KRN",101,"NM",20,0)
IBCNE IIV REGISTER^^0
"BLD",4063,"KRN",101,"NM",21,0)
IBCNE IIV RQI OUT^^0
"BLD",4063,"KRN",101,"NM",22,0)
IBCNE IIV RQV OUT^^0
"BLD",4063,"KRN",101,"NM",23,0)
IBCNSC INSURANCE CO^^3
"BLD",4063,"KRN",101,"NM",30,0)
IBCNSC INS CO PAYER^^0
"BLD",4063,"KRN",101,"NM",31,0)
IBCNE REVERIFY INSURANCE MENU^^0
"BLD",4063,"KRN",101,"NM",32,0)
IBCNE SELECT INSURANCE^^0
"BLD",4063,"KRN",101,"NM",42,0)
IBJ EXIT^^4^
"BLD",4063,"KRN",101,"NM",44,0)
IBCNE IIV ID REQUEST^^0
"BLD",4063,"KRN",101,"NM",45,0)
IBCNE IIV IN^^0
"BLD",4063,"KRN",101,"NM",46,0)
IBCNE IIV MFN IN^^0
"BLD",4063,"KRN",101,"NM",47,0)
IBCNE IIV RESPONSE^^0
"BLD",4063,"KRN",101,"NM",48,0)
IBCNE IIV TABLE^^0
"BLD",4063,"KRN",101,"NM",49,0)
IBCNE IIV VER REQUEST^^0
"BLD",4063,"KRN",101,"NM",50,0)
IBCNE PAYER MAINT MENU^^0
"BLD",4063,"KRN",101,"NM",51,0)
IBCNE PAYER EXIT^^0
"BLD",4063,"KRN",101,"NM",52,0)
IBCNE PAYER EXPAND^^0
"BLD",4063,"KRN",101,"NM",53,0)
IBCNE PAYER EXPAND MENU^^0
"BLD",4063,"KRN",101,"NM",54,0)
IBCNE PAYER LINK^^0
"BLD",4063,"KRN",101,"NM",55,0)
VALM PRINT LIST^^4^
"BLD",4063,"KRN",101,"NM",56,0)
IBCNSC INS CO INPT CLAIMS^^0
"BLD",4063,"KRN",101,"NM",57,0)
IBCNSC INS CO MAIN MAILING ADDRESS^^0
"BLD",4063,"KRN",101,"NM",58,0)
IBCNSC INS CO REMARKS^^0
"BLD",4063,"KRN",101,"NM",59,0)
IBCNSC INS CO RX CLAIMS^^0
"BLD",4063,"KRN",101,"NM",60,0)
IBCNSC INS CO INQUIRY OFFICE^^0
"BLD",4063,"KRN",101,"NM",61,0)
IBCNSC INS CO SYNONYMS^^0
"BLD",4063,"KRN",101,"NM",62,0)
IBJP IB SITE PARAMETER SCREEN^^4^
"BLD",4063,"KRN",101,"NM",63,0)
IBJP CLAIMS TRACKING SCREEN^^4^
"BLD",4063,"KRN",101,"NM",64,0)
IBJP AUTO BILLING SCREEN^^4^
"BLD",4063,"KRN",101,"NM",65,0)
VALM BLANK 1^^4^
"BLD",4063,"KRN",101,"NM",66,0)
IBCNB ENTRY RESPONSE REPORT^^0
"BLD",4063,"KRN",101,"NM",67,0)
IBCNB ENTRY SCREEN MENU^^2
"BLD",4063,"KRN",101,"NM","B","IBCNB ENTRY RESPONSE REPORT",66)

"BLD",4063,"KRN",101,"NM","B","IBCNB ENTRY SCREEN MENU",67)

"BLD",4063,"KRN",101,"NM","B","IBCNB LIST CHECK NAMES",15)

"BLD",4063,"KRN",101,"NM","B","IBCNB LIST SCREEN MENU",16)

"BLD",4063,"KRN",101,"NM","B","IBCNE AUTO MATCH BUFFER EXIT",1)

"BLD",4063,"KRN",101,"NM","B","IBCNE AUTO MATCH BUFFER LINK",2)

"BLD",4063,"KRN",101,"NM","B","IBCNE AUTO MATCH BUFFER MENU",3)

"BLD",4063,"KRN",101,"NM","B","IBCNE AUTO MATCH BUFFER SELECT",4)

"BLD",4063,"KRN",101,"NM","B","IBCNE FAST EXIT",17)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV ID REQUEST",44)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV IN",45)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV MFN IN",46)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV MFN OUT",6)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV REGISTER",20)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV RESPONSE",47)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV RQI OUT",21)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV RQV OUT",22)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV TABLE",48)

"BLD",4063,"KRN",101,"NM","B","IBCNE IIV VER REQUEST",49)

"BLD",4063,"KRN",101,"NM","B","IBCNE PAYER EXIT",51)

"BLD",4063,"KRN",101,"NM","B","IBCNE PAYER EXPAND",52)

"BLD",4063,"KRN",101,"NM","B","IBCNE PAYER EXPAND MENU",53)

"BLD",4063,"KRN",101,"NM","B","IBCNE PAYER LINK",54)

"BLD",4063,"KRN",101,"NM","B","IBCNE PAYER MAINT MENU",50)

"BLD",4063,"KRN",101,"NM","B","IBCNE REVERIFY INSURANCE MENU",31)

"BLD",4063,"KRN",101,"NM","B","IBCNE SELECT INSURANCE",32)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO INPT CLAIMS",56)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO INQUIRY OFFICE",60)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO MAIN MAILING ADDRESS",57)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO PAYER",30)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO REMARKS",58)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO RX CLAIMS",59)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INS CO SYNONYMS",61)

"BLD",4063,"KRN",101,"NM","B","IBCNSC INSURANCE CO",23)

"BLD",4063,"KRN",101,"NM","B","IBJ EXIT",42)

"BLD",4063,"KRN",101,"NM","B","IBJP AUTO BILLING SCREEN",64)

"BLD",4063,"KRN",101,"NM","B","IBJP CLAIMS TRACKING SCREEN",63)

"BLD",4063,"KRN",101,"NM","B","IBJP IB SITE PARAMETER SCREEN",62)

"BLD",4063,"KRN",101,"NM","B","IBJP IIV BATCH EXTRACT EDIT",10)

"BLD",4063,"KRN",101,"NM","B","IBJP IIV GENERAL EDIT",12)

"BLD",4063,"KRN",101,"NM","B","IBJP IIV MOST POPULAR EDIT",11)

"BLD",4063,"KRN",101,"NM","B","IBJP IIV PAT W/O INS",13)

"BLD",4063,"KRN",101,"NM","B","IBJP INS VER MENU",14)

"BLD",4063,"KRN",101,"NM","B","IBJP INS VER SCREEN",9)

"BLD",4063,"KRN",101,"NM","B","IBJP MCCR PARAMETERS MENU",8)

"BLD",4063,"KRN",101,"NM","B","VALM BLANK 1",65)

"BLD",4063,"KRN",101,"NM","B","VALM PRINT LIST",55)

"BLD",4063,"KRN",409.61,0)
409.61
"BLD",4063,"KRN",409.61,"NM",0)
^9.68A^7^6
"BLD",4063,"KRN",409.61,"NM",1,0)
IBJP IIV SITE PARAMETERS^^0
"BLD",4063,"KRN",409.61,"NM",2,0)
IBCNE AUTO MATCH BUFFER LIST^^0
"BLD",4063,"KRN",409.61,"NM",4,0)
IBCNE PAYER MAINT LIST^^0
"BLD",4063,"KRN",409.61,"NM",5,0)
IBCNE PAYER EXPAND LIST^^0
"BLD",4063,"KRN",409.61,"NM",6,0)
IBCNE REQUEST INS INQUIRY LIST^^0
"BLD",4063,"KRN",409.61,"NM",7,0)
IBCNB INSURANCE BUFFER ENTRY^^0
"BLD",4063,"KRN",409.61,"NM","B","IBCNB INSURANCE BUFFER ENTRY",7)

"BLD",4063,"KRN",409.61,"NM","B","IBCNE AUTO MATCH BUFFER LIST",2)

"BLD",4063,"KRN",409.61,"NM","B","IBCNE PAYER EXPAND LIST",5)

"BLD",4063,"KRN",409.61,"NM","B","IBCNE PAYER MAINT LIST",4)

"BLD",4063,"KRN",409.61,"NM","B","IBCNE REQUEST INS INQUIRY LIST",6)

"BLD",4063,"KRN",409.61,"NM","B","IBJP IIV SITE PARAMETERS",1)

"BLD",4063,"KRN",771,0)
771
"BLD",4063,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",4063,"KRN",771,"NM",1,0)
IIV EC^^0
"BLD",4063,"KRN",771,"NM",2,0)
IIV VISTA^^0
"BLD",4063,"KRN",771,"NM","B","IIV EC",1)

"BLD",4063,"KRN",771,"NM","B","IIV VISTA",2)

"BLD",4063,"KRN",870,0)
870
"BLD",4063,"KRN",870,"NM",0)
^9.68A^2^2
"BLD",4063,"KRN",870,"NM",1,0)
IIV EC^^0
"BLD",4063,"KRN",870,"NM",2,0)
IIV SERVER^^0
"BLD",4063,"KRN",870,"NM","B","IIV EC",1)

"BLD",4063,"KRN",870,"NM","B","IIV SERVER",2)

"BLD",4063,"KRN",8989.51,0)
8989.51
"BLD",4063,"KRN",8989.52,0)
8989.52
"BLD",4063,"KRN",8994,0)
8994
"BLD",4063,"KRN","B",.4,.4)

"BLD",4063,"KRN","B",.401,.401)

"BLD",4063,"KRN","B",.402,.402)

"BLD",4063,"KRN","B",.403,.403)

"BLD",4063,"KRN","B",.5,.5)

"BLD",4063,"KRN","B",.84,.84)

"BLD",4063,"KRN","B",3.6,3.6)

"BLD",4063,"KRN","B",3.8,3.8)

"BLD",4063,"KRN","B",9.2,9.2)

"BLD",4063,"KRN","B",9.8,9.8)

"BLD",4063,"KRN","B",19,19)

"BLD",4063,"KRN","B",19.1,19.1)

"BLD",4063,"KRN","B",101,101)

"BLD",4063,"KRN","B",409.61,409.61)

"BLD",4063,"KRN","B",771,771)

"BLD",4063,"KRN","B",870,870)

"BLD",4063,"KRN","B",8989.51,8989.51)

"BLD",4063,"KRN","B",8989.52,8989.52)

"BLD",4063,"KRN","B",8994,8994)

"BLD",4063,"QUES",0)
^9.62^^
"BLD",4063,"REQB",0)
^9.611^9^6
"BLD",4063,"REQB",1,0)
IB*2.0*80^2
"BLD",4063,"REQB",5,0)
IB*2.0*153^2
"BLD",4063,"REQB",6,0)
IB*2.0*191^2
"BLD",4063,"REQB",7,0)
IB*2.0*183^2
"BLD",4063,"REQB",8,0)
IB*2.0*163^2
"BLD",4063,"REQB",9,0)
IB*2.0*231^2
"BLD",4063,"REQB","B","IB*2.0*153",5)

"BLD",4063,"REQB","B","IB*2.0*163",8)

"BLD",4063,"REQB","B","IB*2.0*183",7)

"BLD",4063,"REQB","B","IB*2.0*191",6)

"BLD",4063,"REQB","B","IB*2.0*231",9)

"BLD",4063,"REQB","B","IB*2.0*80",1)

"DATA",365.14,1,0)
Ready to Transmit
"DATA",365.14,2,0)
Transmitted
"DATA",365.14,3,0)
Response Received
"DATA",365.14,4,0)
Hold
"DATA",365.14,5,0)
Communication Failure
"DATA",365.14,6,0)
Retry
"DATA",365.14,7,0)
Cancelled
"DATA",365.15,1,0)
B1^33^1^^
"DATA",365.15,1,1,0)
^365.152^3^3^3020816^^
"DATA",365.15,1,1,1,0)
IIV could not create an inquiry for this entry.  IIV could not match the 
"DATA",365.15,1,1,2,0)
insurance company name in the Insurance Buffer file to a valid insurance 
"DATA",365.15,1,1,3,0)
company name in the Insurance Company file.
"DATA",365.15,2,0)
B2^33^1^^
"DATA",365.15,2,1,0)
^365.152^5^5^3020816^^
"DATA",365.15,2,1,1,0)
IIV could not create an inquiry for this entry.  IIV matched the 
"DATA",365.15,2,1,2,0)
insurance company name in the Insurance Buffer file to more than one 
"DATA",365.15,2,1,3,0)
uniquely named insurance company in the Insurance Company file.  This 
"DATA",365.15,2,1,4,0)
indicates that the Auto Match check or the Synonym check yielded multiple 
"DATA",365.15,2,1,5,0)
insurance companies from the Insurance Company file.
"DATA",365.15,3,0)
B3^33^1^^
"DATA",365.15,3,1,0)
^365.152^5^5^3020816^^^
"DATA",365.15,3,1,1,0)
IIV could not create an inquiry for this entry.  IIV matched the insurance
"DATA",365.15,3,1,2,0)
company name in the Insurance Buffer file to one insurance company name in
"DATA",365.15,3,1,3,0)
the Insurance Company file.  However, multiple insurance companies in the
"DATA",365.15,3,1,4,0)
Insurance Company file share this same name.  There is more than one
"DATA",365.15,3,1,5,0)
National ID used by the companies that share this same name.
"DATA",365.15,4,0)
B4^33^1^^
"DATA",365.15,4,1,0)
^^7^7^3030116^
"DATA",365.15,4,1,1,0)
IIV could not create an inquiry for this entry.  The named insurance 
"DATA",365.15,4,1,2,0)
company does not have a National ID.  This may occur because the
"DATA",365.15,4,1,3,0)
insurance staff did not attempt to manually link the named insurance 
"DATA",365.15,4,1,4,0)
company to the payer list or the insurance staff did not find a payer in
"DATA",365.15,4,1,5,0)
the payer list that they wanted to link this insurance company to.
"DATA",365.15,4,1,6,0)
There is no link for this insurance company between the Insurance Company 
"DATA",365.15,4,1,7,0)
file and the Payer file.
"DATA",365.15,5,0)
B5^33^1^^
"DATA",365.15,5,1,0)
^365.152^3^3^3020816^^
"DATA",365.15,5,1,1,0)
IIV could not create an inquiry for this entry.  The payer has a National
"DATA",365.15,5,1,2,0)
payer ID (is matched to the payer list) but the payer lacks a national
"DATA",365.15,5,1,3,0)
connection or has a national connection that is currently disabled.
"DATA",365.15,6,0)
B6^33^1^^
"DATA",365.15,6,1,0)
^365.152^3^3^3020816^^
"DATA",365.15,6,1,1,0)
IIV could not create an inquiry for this entry.  The payer has a National
"DATA",365.15,6,1,2,0)
ID (is matched to the payer list) but the payer lacks a local connection
"DATA",365.15,6,1,3,0)
or has a local connection that is currently disabled.
"DATA",365.15,7,0)
B7^33^1^^
"DATA",365.15,7,1,0)
^365.152^3^3^3020816^^
"DATA",365.15,7,1,1,0)
IIV could not create an inquiry for this entry.  The payer does not accept
"DATA",365.15,7,1,2,0)
electronic insurance eligibility requests.  The IIV application data does
"DATA",365.15,7,1,3,0)
not exist in the Payer file for this payer.
"DATA",365.15,8,0)
A1^43^0^^
"DATA",365.15,8,1,0)
^365.152^3^3^3030410^^^
"DATA",365.15,8,1,1,0)
This buffer entry has been verified.  Review the verification date, the 
"DATA",365.15,8,1,2,0)
source of information, and the user who verified this entry for more
"DATA",365.15,8,1,3,0)
information.
"DATA",365.15,9,0)
D1^45^0^^
"DATA",365.15,9,1,0)
^365.152^3^3^3020614^^
"DATA",365.15,9,1,1,0)
This is an unverified buffer entry. IIV received a negative
"DATA",365.15,9,1,2,0)
acknowledgement from the insurance company denying that they are acting as
"DATA",365.15,9,1,3,0)
the health care insurer for the patient for the date of the inquiry.
"DATA",365.15,10,0)
Q1^63^0^^
"DATA",365.15,10,1,0)
^^5^5^3020712^
"DATA",365.15,10,1,1,0)
This buffer entry is currently still being processed by the IIV
"DATA",365.15,10,1,2,0)
application.  Unless instructed otherwise, there is no reason you should
"DATA",365.15,10,1,3,0)
do anything with this buffer entry.  No electronic response has been
"DATA",365.15,10,1,4,0)
received yet, or the electronic response received indicates that a
"DATA",365.15,10,1,5,0)
future re-transmission is necessary.
"DATA",365.15,11,0)
B8^33^0^^
"DATA",365.15,11,1,0)
^365.152^2^2^3020816^^
"DATA",365.15,11,1,1,0)
The electronic response indicated an error of some kind that needs to be
"DATA",365.15,11,1,2,0)
corrected before the insurance inquiry can be re-transmitted.
"DATA",365.15,12,0)
B9^33^1^^
"DATA",365.15,12,1,0)
^365.152^2^2^3020816^^
"DATA",365.15,12,1,1,0)
An unknown and unforeseen error has occurred with this entry.
"DATA",365.15,12,1,2,0)
Please contact your IRM department.
"DATA",365.15,13,0)
B10^33^1^^
"DATA",365.15,13,1,0)
^365.152^2^2^3020816^^
"DATA",365.15,13,1,1,0)
IIV could not create an inquiry for this entry.  The insurance company
"DATA",365.15,13,1,2,0)
found is inactive.
"DATA",365.15,14,0)
B11^33^1^^
"DATA",365.15,14,1,0)
^365.152^2^2^3020816^^
"DATA",365.15,14,1,1,0)
IIV could not create an inquiry for this entry.  IIV cannot send inquiries
"DATA",365.15,14,1,2,0)
to Medicare or Medicaid.  This buffer entry must be manually verified.
"DATA",365.15,15,0)
B12^33^0^^
"DATA",365.15,15,1,0)
^365.152^2^2^3020816^^
"DATA",365.15,15,1,1,0)
IIV was unable to electronically verify this insurance information due to 
"DATA",365.15,15,1,2,0)
a communication failure.  This buffer entry must be manually verified.
"DATA",365.15,16,0)
B13^33^1^^
"DATA",365.15,16,1,0)
^365.152^1^1^3020916^^^
"DATA",365.15,16,1,1,0)
The insurance company name for this buffer entry is blank.
"DATA",365.15,17,0)
B14^33^1^^
"DATA",365.15,17,1,0)
^^4^4^3020924^
"DATA",365.15,17,1,1,0)
IIV could not create an inquiry for this entry.  The payer associated
"DATA",365.15,17,1,2,0)
with this insurance company has been deactivated (the actual payer
"DATA",365.15,17,1,3,0)
no longer exists).  Please edit this insurance company and choose
"DATA",365.15,17,1,4,0)
another payer, or determine that another company carries the insurance.
"DATA",365.15,18,0)
B15^33^1^^
"DATA",365.15,18,1,0)
^365.152^3^3^3030606^^
"DATA",365.15,18,1,1,0)
IIV could not create an inquiry for this entry.  This patient's 
"DATA",365.15,18,1,2,0)
insurance must be verified manually because the Subscriber ID is 
"DATA",365.15,18,1,3,0)
missing.
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,1.09)

"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^n^p^^^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,.128)

"FIA",36,36,.168)

"FIA",36,36,3.1)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.01)

"FIA",350.9,350.9,51.02)

"FIA",350.9,350.9,51.03)

"FIA",350.9,350.9,51.04)

"FIA",350.9,350.9,51.05)

"FIA",350.9,350.9,51.06)

"FIA",350.9,350.9,51.07)

"FIA",350.9,350.9,51.08)

"FIA",350.9,350.9,51.09)

"FIA",350.9,350.9,51.1)

"FIA",350.9,350.9,51.11)

"FIA",350.9,350.9,51.12)

"FIA",350.9,350.9,51.13)

"FIA",350.9,350.9,51.14)

"FIA",350.9,350.9,51.15)

"FIA",350.9,350.9,51.16)

"FIA",350.9,350.9,51.17)

"FIA",350.9,350.9,51.18)

"FIA",350.9,350.9,51.19)

"FIA",350.9,350.9,51.2)

"FIA",350.9,350.9,51.21)

"FIA",350.9,350.9,51.22)

"FIA",350.9,350.9,51.23)

"FIA",350.9,350.9002)
0
"FIA",350.9,350.9003)
0
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33DA
"FIA",355.33,0,1)
y^n^p^^^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,.03)

"FIA",355.33,355.33,.12)

"FIA",355.33,355.33,.13)

"FIA",355.33,355.33,.15)

"FIA",355.33,355.33,20.01)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^y^f^^^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
0
"FIA",365,365.02)
0
"FIA",365,365.03)
0
"FIA",365,365.22)
0
"FIA",365.011)
X12 271 ELIGIBILITY/BENEFIT
"FIA",365.011,0)
^IBE(365.011,
"FIA",365.011,0,0)
365.011I
"FIA",365.011,0,1)
y^y^f^^n^^n^o^n
"FIA",365.011,0,10)

"FIA",365.011,0,11)

"FIA",365.011,0,"RLRO")

"FIA",365.011,0,"VR")
2.0^IB
"FIA",365.011,365.011)
0
"FIA",365.012)
X12 271 COVERAGE LEVEL
"FIA",365.012,0)
^IBE(365.012,
"FIA",365.012,0,0)
365.012I
"FIA",365.012,0,1)
y^y^f^^n^^n^o^n
"FIA",365.012,0,10)

"FIA",365.012,0,11)

"FIA",365.012,0,"RLRO")

"FIA",365.012,0,"VR")
2.0^IB
"FIA",365.012,365.012)
0
"FIA",365.013)
X12 271 SERVICE TYPE
"FIA",365.013,0)
^IBE(365.013,
"FIA",365.013,0,0)
365.013I
"FIA",365.013,0,1)
y^y^f^^n^^n^o^n
"FIA",365.013,0,10)

"FIA",365.013,0,11)

"FIA",365.013,0,"RLRO")

"FIA",365.013,0,"VR")
2.0^IB
"FIA",365.013,365.013)
0
"FIA",365.014)
X12 271 INSURANCE TYPE
"FIA",365.014,0)
^IBE(365.014,
"FIA",365.014,0,0)
365.014I
"FIA",365.014,0,1)
y^y^f^^n^^n^o^n
"FIA",365.014,0,10)

"FIA",365.014,0,11)

"FIA",365.014,0,"RLRO")

"FIA",365.014,0,"VR")
2.0^IB
"FIA",365.014,365.014)
0
"FIA",365.015)
X12 271 TIME PERIOD QUALIFIER
"FIA",365.015,0)
^IBE(365.015,
"FIA",365.015,0,0)
365.015I
"FIA",365.015,0,1)
y^y^f^^n^^n^o^n
"FIA",365.015,0,10)

"FIA",365.015,0,11)

"FIA",365.015,0,"RLRO")

"FIA",365.015,0,"VR")
2.0^IB
"FIA",365.015,365.015)
0
"FIA",365.016)
X12 271 QUANTITY QUALIFIER
"FIA",365.016,0)
^IBE(365.016,
"FIA",365.016,0,0)
365.016I
"FIA",365.016,0,1)
y^y^f^^n^^n^o^n
"FIA",365.016,0,10)

"FIA",365.016,0,11)

"FIA",365.016,0,"RLRO")

"FIA",365.016,0,"VR")
2.0^IB
"FIA",365.016,365.016)
0
"FIA",365.017)
X12 271 ERROR CONDITION
"FIA",365.017,0)
^IBE(365.017,
"FIA",365.017,0,0)
365.017I
"FIA",365.017,0,1)
y^y^f^^n^^n^o^n
"FIA",365.017,0,10)

"FIA",365.017,0,11)

"FIA",365.017,0,"RLRO")

"FIA",365.017,0,"VR")
2.0^IB
"FIA",365.017,365.017)
0
"FIA",365.018)
X12 271 ERROR ACTION
"FIA",365.018,0)
^IBE(365.018,
"FIA",365.018,0,0)
365.018I
"FIA",365.018,0,1)
y^y^f^^n^^n^o^n
"FIA",365.018,0,10)

"FIA",365.018,0,11)

"FIA",365.018,0,"RLRO")

"FIA",365.018,0,"VR")
2.0^IB
"FIA",365.018,365.018)
0
"FIA",365.021)
X12 271 CONTACT QUALIFIER
"FIA",365.021,0)
^IBE(365.021,
"FIA",365.021,0,0)
365.021I
"FIA",365.021,0,1)
y^y^f^^n^^n^o^n
"FIA",365.021,0,10)

"FIA",365.021,0,11)

"FIA",365.021,0,"RLRO")

"FIA",365.021,0,"VR")
2.0^IB
"FIA",365.021,365.021)
0
"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^y^f^^^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
0
"FIA",365.1,365.16)
0
"FIA",365.11)
IIV AUTO MATCH
"FIA",365.11,0)
^IBCN(365.11,
"FIA",365.11,0,0)
365.11I
"FIA",365.11,0,1)
y^y^f^^^^n
"FIA",365.11,0,10)

"FIA",365.11,0,11)

"FIA",365.11,0,"RLRO")

"FIA",365.11,0,"VR")
2.0^IB
"FIA",365.11,365.11)
0
"FIA",365.12)
PAYER
"FIA",365.12,0)
^IBE(365.12,
"FIA",365.12,0,0)
365.12
"FIA",365.12,0,1)
y^y^f^^^^n
"FIA",365.12,0,10)

"FIA",365.12,0,11)

"FIA",365.12,0,"RLRO")

"FIA",365.12,0,"VR")
2.0^IB
"FIA",365.12,365.12)
0
"FIA",365.12,365.121)
0
"FIA",365.13)
PAYER APPLICATION
"FIA",365.13,0)
^IBE(365.13,
"FIA",365.13,0,0)
365.13
"FIA",365.13,0,1)
y^y^f^^n^^n^o^n
"FIA",365.13,0,10)

"FIA",365.13,0,11)

"FIA",365.13,0,"RLRO")

"FIA",365.13,0,"VR")
2.0^IB
"FIA",365.13,365.13)
0
"FIA",365.14)
IIV TRANSMISSION STATUS
"FIA",365.14,0)
^IBE(365.14,
"FIA",365.14,0,0)
365.14
"FIA",365.14,0,1)
y^y^f^^n^^y^o^n
"FIA",365.14,0,10)

"FIA",365.14,0,11)

"FIA",365.14,0,"RLRO")

"FIA",365.14,0,"VR")
2.0^IB
"FIA",365.14,365.14)
0
"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
y^y^f^^n^^y^o^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
0
"FIA",365.15,365.151)
0
"FIA",365.15,365.152)
0
"INIT")
IBCNEPST
"IX",365,365,"AD",0)
365^AD^Cross-reference for reports^R^^R^IR^I^365^^^^^S
"IX",365,365,"AD",.1,0)
^^1^1^3020610^
"IX",365,365,"AD",.1,1,0)
This cross-reference is used to generate reports.
"IX",365,365,"AD",1)
S ^IBCN(365,"AD",X(1),X(2),X(3),DA)=""
"IX",365,365,"AD",2)
K ^IBCN(365,"AD",X(1),X(2),X(3),DA)
"IX",365,365,"AD",2.5)
K ^IBCN(365,"AD")
"IX",365,365,"AD",11.1,0)
^.114IA^3^3
"IX",365,365,"AD",11.1,1,0)
1^F^365^.07^^1^F
"IX",365,365,"AD",11.1,1,3)

"IX",365,365,"AD",11.1,2,0)
2^F^365^.03^^2^F
"IX",365,365,"AD",11.1,2,3)

"IX",365,365,"AD",11.1,3,0)
3^F^365^.02^^3^F
"IX",365,365,"AD",11.1,3,3)

"IX",365.1,365.1,"AD",0)
365.1^AD^Used for patient/payer/service date checks^R^^R^IR^I^365.1^^^^^S
"IX",365.1,365.1,"AD",.1,0)
^^2^2^3021023^
"IX",365.1,365.1,"AD",.1,1,0)
This cross-reference will be used to check what is the most recent 
"IX",365.1,365.1,"AD",.1,2,0)
service date for a patient/payer combination.
"IX",365.1,365.1,"AD",1)
S ^IBCN(365.1,"AD",X(1),X(2),X(3),DA)=""
"IX",365.1,365.1,"AD",2)
K ^IBCN(365.1,"AD",X(1),X(2),X(3),DA)
"IX",365.1,365.1,"AD",2.5)
K ^IBCN(365.1,"AD")
"IX",365.1,365.1,"AD",11.1,0)
^.114IA^3^3
"IX",365.1,365.1,"AD",11.1,1,0)
1^F^365.1^.02^^1^F
"IX",365.1,365.1,"AD",11.1,1,3)

"IX",365.1,365.1,"AD",11.1,2,0)
2^F^365.1^.03^^2^F
"IX",365.1,365.1,"AD",11.1,2,3)

"IX",365.1,365.1,"AD",11.1,3,0)
3^F^365.1^.12^^3^F
"IX",365.1,365.1,"AD",11.1,3,2)

"IX",365.1,365.1,"AD",11.1,3,3)

"IX",365.11,365.11,"D",0)
365.11^D^Uniqueness Index for Key 'A' of File #365.11^R^^F^IR^I^365.11^^^^^LS
"IX",365.11,365.11,"D",.1,0)
^^1^1^3020430^
"IX",365.11,365.11,"D",.1,1,0)
This Key definition exists so that the auto match values are unique.
"IX",365.11,365.11,"D",1)
S ^IBCN(365.11,"D",X,DA)=""
"IX",365.11,365.11,"D",2)
K ^IBCN(365.11,"D",X,DA)
"IX",365.11,365.11,"D",2.5)
K ^IBCN(365.11,"D")
"IX",365.11,365.11,"D",11.1,0)
^.114IA^1^1
"IX",365.11,365.11,"D",11.1,1,0)
1^F^365.11^.01^^1
"KEY",365.11,365.11,"A",0)
365.11^A^P^139
"KEY",365.11,365.11,"A",2,0)
^.312IA^1^1
"KEY",365.11,365.11,"A",2,1,0)
.01^365.11^1
"KEYPTR",365.11,365.11,"A")
365.11^D
"KRN",.402,2852761)

"KRN",.402,2852761,-1)
0^1
"KRN",.402,2852761,0)
IBEDIT INS CO1^3030515.1151^^36^^^3030910
"KRN",.402,2852761,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,2852761,"DIAB",2,0,36,1)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,2852761,"DIAB",2,0,36,4)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,2852761,"DIAB",4,0,36,6)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,2852761,"DIAB",11,0,36,3)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,2852761,"DIAB",15,0,36,5)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,2852761,"DIAB",22,0,36,0)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,2852761,"DIAB",22,0,36,4)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,2852761,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;3.03;.12;.11;.17;.14;.13;3.09;.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;3.01;
"KRN",.402,2852761,"DR",1,36,1)
S DIPA("IBTX")=X S:DIPA("IBTX")'=2 Y="@17";3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@17;I '$G(DIPA("IBTX")) S Y="@18";3.02;3.04;@18;S:",6,12,"'[IBY Y="@181";4.01;4.02;4.03;S DIPA("DEF")=X;S:$G(DIPA("DEF"))'=2 Y="@180";4.1;
"KRN",.402,2852761,"DR",1,36,2)
S DIPA("ATYPE")=X;S:$G(DIPA("ATYPE"))="" Y="@180";4.11;@180;4.09;I ",12,"[IBY W !;4.06;4.07;4.08;I ",12,"[IBY W !;4.04;4.05;I ",12,"[IBY W !;@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";
"KRN",.402,2852761,"DR",1,36,3)
.113;@1;.114;.115;.116;.131;.119;S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;
"KRN",.402,2852761,"DR",1,36,4)
S:",10,6,"'[IBY Y="@80";.168T~;S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@80;S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;
"KRN",.402,2852761,"DR",1,36,5)
S:X="" Y="@6";.182;S:X="" Y="@6";.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;
"KRN",.402,2852761,"DR",1,36,6)
S:IBY["4" Y="@99";@40;S:",5,6,"'[IBY Y="@60";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;S:IBY["5" Y="@99";@60;S:",7,6,"'[IBY Y="@50";3.1;@50;
"KRN",.402,2852761,"DR",1,36,7)
S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,2852761,"DR",2,36.03)
.01
"KRN",.402,2853502,-1)
0^2
"KRN",.402,2853502,0)
IBCNE GENERAL PARAMETER EDIT^3030408.1716^@^350.9^^@^3030905
"KRN",.402,2853502,"%D",0)
^.4021^1^1^3030121^
"KRN",.402,2853502,"%D",1,0)
This input template asks for the General IIV site parameters.
"KRN",.402,2853502,"DIAB",1,1,200,0)
OFFICE PHONE;REQ
"KRN",.402,2853502,"DIAB",2,1,200,0)
EMAIL ADDRESS;REQ
"KRN",.402,2853502,"DIAB",12,0,350.9,0)
CONTACT PERSON:
"KRN",.402,2853502,"DR",1,350.9)
51.01;51.02;51.03;51.04;51.13;S:X="I" Y="@1";51.14;51.19;@1;51.15;51.16;^200^VA(200,^^S I(0,0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,16),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");51.05;51.06;51.07;51.2;51.23;
"KRN",.402,2853502,"DR",2,200)
.132R~;.151R~;
"KRN",3.8,4632,-1)
0^1
"KRN",3.8,4632,0)
IBCNE IIV MESSAGE^PU^^^^^
"KRN",3.8,4632,2,0)
^3.801^2^2^3030808^^
"KRN",3.8,4632,2,1,0)
This mail group will be used to deliver notifications for
"KRN",3.8,4632,2,2,0)
the Insurance Identification and Verification process.
"KRN",3.8,4632,3)

"KRN",3.8,4632,6,0)
^3.812^^0
"KRN",19,7019,-1)
2^12
"KRN",19,7019,0)
IB PURGE MENU^Purge Menu^^M^.5^XUMGR^^^^^^248
"KRN",19,7019,10,0)
^19.01IP^10^9
"KRN",19,7019,10,10,0)
15100^IIV
"KRN",19,7019,10,10,"^")
IBCNE PURGE IIV DATA
"KRN",19,7019,"U")
PURGE MENU
"KRN",19,8676,-1)
2^3
"KRN",19,8676,0)
IBCN INSURANCE MGMT MENU^Patient Insurance Menu^^M^.5^^^^^^^
"KRN",19,8676,10,0)
^19.01IP^19^19
"KRN",19,8676,10,17,0)
15321^IIV
"KRN",19,8676,10,17,"^")
IBCNE IIV MENU
"KRN",19,8676,10,19,0)
15322^PM
"KRN",19,8676,10,19,"^")
IBCNE PAYER MAINTENANCE MENU
"KRN",19,8676,"U")
PATIENT INSURANCE MENU
"KRN",19,15078,-1)
0^1
"KRN",19,15078,0)
IBCNE AUTO MATCH ENTER/EDIT^Enter/Edit Auto Match Entries^^R^^IBCNE IIV AUTO MATCH^^^^^^INTEGRATED BILLING
"KRN",19,15078,1,0)
^^2^2^3020603^
"KRN",19,15078,1,1,0)
This option allows the user to manage the entries in the
"KRN",19,15078,1,2,0)
Auto Match file.
"KRN",19,15078,25)
ENTER^IBCNEAME
"KRN",19,15078,"U")
ENTER/EDIT AUTO MATCH ENTRIES
"KRN",19,15082,-1)
0^5
"KRN",19,15082,0)
IBCNE IIV RESPONSE REPORT^IIV Response Report^^R^^^^^^^^
"KRN",19,15082,1,0)
^^3^3^3030422^
"KRN",19,15082,1,1,0)
Generate IIV Payer Report based on the IIV Responses for a given date
"KRN",19,15082,1,2,0)
range, Payer name range and Patient name range.  All the response
"KRN",19,15082,1,3,0)
information is displayed for the selected responses.
"KRN",19,15082,25)
EN^IBCNERP1
"KRN",19,15082,"U")
IIV RESPONSE REPORT
"KRN",19,15083,-1)
0^4
"KRN",19,15083,0)
IBCNE IIV PAYER REPORT^IIV Payer Report^^R^^^^^^^^
"KRN",19,15083,1,0)
^^2^2^3030422^
"KRN",19,15083,1,1,0)
Generate the IIV Payer Report based on IIV Responses received for a given 
"KRN",19,15083,1,2,0)
date range by Payer.
"KRN",19,15083,25)
EN^IBCNERP4
"KRN",19,15083,"U")
IIV PAYER REPORT
"KRN",19,15091,-1)
0^8
"KRN",19,15091,0)
IBCNE IIV STATISTICAL REPORT^IIV Statistical Report^^R^^^^^^^^
"KRN",19,15091,1,0)
^^2^2^3030422^
"KRN",19,15091,1,1,0)
Generate IIV Statistical Report based on IIV Inquiries and Responses for a
"KRN",19,15091,1,2,0)
given date range and current Insurance Buffer data.
"KRN",19,15091,25)
EN^IBCNERP7
"KRN",19,15091,"U")
IIV STATISTICAL REPORT
"KRN",19,15093,-1)
0^6
"KRN",19,15093,0)
IBCNE AUTO MATCH BUFFER^Add Auto Match Entries Using Insurance Buffer Data^^R^^IBCNE IIV AUTO MATCH^^^^^^INTEGRATED BILLING
"KRN",19,15093,1,0)
^^4^4^3020612^
"KRN",19,15093,1,1,0)
This option allows the user to see insurance company names in the 
"KRN",19,15093,1,2,0)
Insurance Buffer file that do not exist in the Insurance Company file 
"KRN",19,15093,1,3,0)
(File# 36) and that do not exist or pattern match with anything in the 
"KRN",19,15093,1,4,0)
Auto Match file (File# 365.11).
"KRN",19,15093,25)
EN^IBCNEAMC
"KRN",19,15093,"U")
ADD AUTO MATCH ENTRIES USING I
"KRN",19,15096,-1)
0^15
"KRN",19,15096,0)
IBCNE REQUEST INQUIRY^Request Electronic Insurance Inquiry^^R^^IBCNE IIV SUPERVISOR^^^^^^INTEGRATED BILLING^^
"KRN",19,15096,1,0)
^19.06^3^3^3030422^^^^
"KRN",19,15096,1,1,0)
Option to allow users to force electronic inquiry of
"KRN",19,15096,1,2,0)
non-Medicaid/non-Medicare patient insurance information
"KRN",19,15096,1,3,0)
through the eIIV application.
"KRN",19,15096,20)

"KRN",19,15096,25)
EN^IBCNEQU
"KRN",19,15096,"U")
REQUEST ELECTRONIC INSURANCE I
"KRN",19,15098,-1)
0^13
"KRN",19,15098,0)
IBCNE PAYER EDIT^Payer Edit (Activate/Inactivate)^^R^^IBCNE IIV SUPERVISOR^^^^^^
"KRN",19,15098,1,0)
^19.06^2^2^3030703^^^
"KRN",19,15098,1,1,0)
Option to allow users to update the Local Active flag for Payers and 
"KRN",19,15098,1,2,0)
Payer applications.
"KRN",19,15098,25)
EN^IBCNEPY
"KRN",19,15098,"U")
PAYER EDIT (ACTIVATE/INACTIVAT
"KRN",19,15100,-1)
0^11
"KRN",19,15100,0)
IBCNE PURGE IIV DATA^Purge IIV Transactions^^R^^XUMGR^^^^^^INTEGRATED BILLING
"KRN",19,15100,1,0)
^19.06^3^3^3030422^^
"KRN",19,15100,1,1,0)
This option is responsible for purging data from file 365 (IIV Response) 
"KRN",19,15100,1,2,0)
and from file 365.1 (IIV Transmission Queue).  Only data that is 
"KRN",19,15100,1,3,0)
older than 6 months can be purged.
"KRN",19,15100,25)
EN^IBCNEKIT
"KRN",19,15100,"U")
PURGE IIV TRANSACTIONS
"KRN",19,15212,-1)
0^21
"KRN",19,15212,0)
IBCNE PAYER LINK^Link Insurance Companies to Payers^^R^^IBCNE IIV SUPERVISOR^^^^^^INTEGRATED BILLING
"KRN",19,15212,1,0)
^19.06^3^3^3030703^^
"KRN",19,15212,1,1,0)
This option allows the user to see payers added during a date
"KRN",19,15212,1,2,0)
range entered by the user.  They will then be able to link these
"KRN",19,15212,1,3,0)
payers to selected insurance companies.
"KRN",19,15212,25)
EN^IBCNEPM2
"KRN",19,15212,"U")
LINK INSURANCE COMPANIES TO PA
"KRN",19,15289,-1)
0^19
"KRN",19,15289,0)
IBCNE IIV BATCH PROCESS^IIV NIGHTLY PROCESS^^R^^^^^^^n^INTEGRATED BILLING
"KRN",19,15289,1,0)
^19.06^6^6^3030724^^
"KRN",19,15289,1,1,0)
This option is not to be placed on any menu nor run by any user.  This 
"KRN",19,15289,1,2,0)
option is specifically designed to be scheduled in TaskMan to be executed 
"KRN",19,15289,1,3,0)
once a day during off-peak hours.  Running this more than once a day may 
"KRN",19,15289,1,4,0)
cause unexpected results.  This option is the IIV nightly task that 
"KRN",19,15289,1,5,0)
extracts the patient/insurance data from VISTA and transmits it to AAC 
"KRN",19,15289,1,6,0)
while following the IIV Site Parameters within file #350.9.
"KRN",19,15289,25)
EN^IBCNEDE
"KRN",19,15289,99)
59298,56894
"KRN",19,15289,200.9)
y
"KRN",19,15289,"U")
IIV NIGHTLY PROCESS
"KRN",19,15321,-1)
0^20
"KRN",19,15321,0)
IBCNE IIV MENU^IIV Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",19,15321,1,0)
^19.06^2^2^3030812^^
"KRN",19,15321,1,1,0)
This menu contains options related to eIIV (Electronic Insurance 
"KRN",19,15321,1,2,0)
Identification and Verification).
"KRN",19,15321,10,0)
^19.01IP^7^7
"KRN",19,15321,10,1,0)
15078^AE
"KRN",19,15321,10,1,"^")
IBCNE AUTO MATCH ENTER/EDIT
"KRN",19,15321,10,2,0)
15093^AB
"KRN",19,15321,10,2,"^")
IBCNE AUTO MATCH BUFFER
"KRN",19,15321,10,3,0)
15096^EI
"KRN",19,15321,10,3,"^")
IBCNE REQUEST INQUIRY
"KRN",19,15321,10,4,0)
15083^PR
"KRN",19,15321,10,4,"^")
IBCNE IIV PAYER REPORT
"KRN",19,15321,10,5,0)
15091^SR
"KRN",19,15321,10,5,"^")
IBCNE IIV STATISTICAL REPORT
"KRN",19,15321,10,6,0)
15082^RR
"KRN",19,15321,10,6,"^")
IBCNE IIV RESPONSE REPORT
"KRN",19,15321,10,7,0)
15336^LR
"KRN",19,15321,10,7,"^")
IBCNE IIV PAYER LINK REPORT
"KRN",19,15321,99)
59393,40169
"KRN",19,15321,"U")
IIV MENU
"KRN",19,15322,-1)
0^22
"KRN",19,15322,0)
IBCNE PAYER MAINTENANCE MENU^Payer Maintenance Menu^^M^^IBCNE IIV SUPERVISOR^^^^^^INTEGRATED BILLING
"KRN",19,15322,1,0)
^^2^2^3030703^
"KRN",19,15322,1,1,0)
This menu contains options related to maintaining the Payer file 
"KRN",19,15322,1,2,0)
(#365.12).
"KRN",19,15322,10,0)
^19.01IP^2^2
"KRN",19,15322,10,1,0)
15098^PE
"KRN",19,15322,10,1,"^")
IBCNE PAYER EDIT
"KRN",19,15322,10,2,0)
15212^LI
"KRN",19,15322,10,2,"^")
IBCNE PAYER LINK
"KRN",19,15322,99)
59353,37551
"KRN",19,15322,"U")
PAYER MAINTENANCE MENU
"KRN",19,15336,-1)
0^23
"KRN",19,15336,0)
IBCNE IIV PAYER LINK REPORT^IIV Payer Link Report^^R^^^^^^^^
"KRN",19,15336,1,0)
^19.06^2^2^3030812^^
"KRN",19,15336,1,1,0)
This report shows the relationship between the insurance companies in 
"KRN",19,15336,1,2,0)
file 36 and the payers in file 365.12.
"KRN",19,15336,25)
EN^IBCNERPB
"KRN",19,15336,"U")
IIV PAYER LINK REPORT
"KRN",19.1,670,-1)
0^1
"KRN",19.1,670,0)
IBCNE IIV SUPERVISOR
"KRN",19.1,670,1,0)
^^4^4^3020826^
"KRN",19.1,670,1,1,0)
This security key is for the Insurance Identification and Verification 
"KRN",19.1,670,1,2,0)
project (IIV).  It is used to restrict access to certain IIV options
"KRN",19.1,670,1,3,0)
and applications.  Only users holding this key are allowed to access
"KRN",19.1,670,1,4,0)
these IIV options and applications.
"KRN",19.1,672,-1)
0^2
"KRN",19.1,672,0)
IBCNE IIV AUTO MATCH
"KRN",19.1,672,1,0)
^^6^6^3020826^
"KRN",19.1,672,1,1,0)
This security key is for the Insurance Identification and Verification
"KRN",19.1,672,1,2,0)
project (IIV).  It is used to restrict access to the Auto Match 
"KRN",19.1,672,1,3,0)
add/edit options, functions, and applications.  Auto Match is a utility 
"KRN",19.1,672,1,4,0)
that links incorrect, user entered insurance company names with correct, 
"KRN",19.1,672,1,5,0)
active insurance company names.  Only users holding this key may add, 
"KRN",19.1,672,1,6,0)
edit, or delete entries in the Auto Match file.
"KRN",101,1623,-1)
4^55
"KRN",101,1623,0)
VALM PRINT LIST
"KRN",101,1626,-1)
4^65
"KRN",101,1626,0)
VALM BLANK 1
"KRN",101,2230,-1)
0^57
"KRN",101,2230,0)
IBCNSC INS CO MAIN MAILING ADDRESS^Main Mailing Address^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2230,4)
^^^EM
"KRN",101,2230,15)
S VALMBG=15
"KRN",101,2230,20)
S IBY=",2," D EA^IBCNSC1
"KRN",101,2230,99)
59168,57812
"KRN",101,2232,-1)
0^60
"KRN",101,2232,0)
IBCNSC INS CO INQUIRY OFFICE^Inquiry Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2232,4)
^^^IA
"KRN",101,2232,10,0)
^101.01PA^0^0
"KRN",101,2232,15)
S VALMBG=47
"KRN",101,2232,20)
S IBY=",5," D EA^IBCNSC1
"KRN",101,2232,28)

"KRN",101,2232,99)
59168,57812
"KRN",101,2242,-1)
0^58
"KRN",101,2242,0)
IBCNSC INS CO REMARKS^Remarks^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2242,4)
^^^RE
"KRN",101,2242,15)
S VALMBG=$G(IB1ST("REM")) S:'VALMBG VALMBG=78
"KRN",101,2242,20)
S IBY=",8," D EA^IBCNSC1
"KRN",101,2242,99)
59168,57813
"KRN",101,2243,-1)
0^61
"KRN",101,2243,0)
IBCNSC INS CO SYNONYMS^Synonyms^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2243,4)
^^^ES
"KRN",101,2243,10,0)
^101.01PA^0^0
"KRN",101,2243,15)
S VALMBG=$G(IB1ST("SYN")) S:'VALMBG VALMBG=80
"KRN",101,2243,20)
S IBY=",9," D EA^IBCNSC1
"KRN",101,2243,99)
59168,57813
"KRN",101,2262,-1)
0^56
"KRN",101,2262,0)
IBCNSC INS CO INPT CLAIMS^Inpt Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2262,4)
^^^IC
"KRN",101,2262,15)
S VALMBG=21
"KRN",101,2262,20)
S IBY=",3," D EA^IBCNSC1
"KRN",101,2262,28)
IC
"KRN",101,2262,99)
59168,57813
"KRN",101,2417,-1)
3^23
"KRN",101,2417,0)
IBCNSC INSURANCE CO^Insurance Company Edit^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2417,4)
26^4
"KRN",101,2417,10,0)
^101.01PA^34^34
"KRN",101,2417,10,20,0)
2232^IO^21^
"KRN",101,2417,10,20,"^")
IBCNSC INS CO INQUIRY OFFICE
"KRN",101,2417,10,21,0)
2230^MM^12^
"KRN",101,2417,10,21,"^")
IBCNSC INS CO MAIN MAILING ADDRESS
"KRN",101,2417,10,24,0)
2242^RE^24^
"KRN",101,2417,10,24,"^")
IBCNSC INS CO REMARKS
"KRN",101,2417,10,25,0)
2243^SY^25^
"KRN",101,2417,10,25,"^")
IBCNSC INS CO SYNONYMS
"KRN",101,2417,10,27,0)
2262^IC^13^
"KRN",101,2417,10,27,"^")
IBCNSC INS CO INPT CLAIMS
"KRN",101,2417,10,29,0)
2418^PC^15^
"KRN",101,2417,10,29,"^")
IBCNSC INS CO RX CLAIMS
"KRN",101,2417,10,34,0)
5319^PA^23^
"KRN",101,2417,10,34,"^")
IBCNSC INS CO PAYER
"KRN",101,2417,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,2417,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2417,25)

"KRN",101,2417,26)
D SHOW^VALM
"KRN",101,2417,28)
Select Action: 
"KRN",101,2417,99)
59168,60920
"KRN",101,2418,-1)
0^59
"KRN",101,2418,0)
IBCNSC INS CO RX CLAIMS^Prescr Claims Of^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2418,4)
^^^PC
"KRN",101,2418,10,0)
^101.01PA^0^0
"KRN",101,2418,15)
S VALMBG=34
"KRN",101,2418,20)
S IBY=",11," D EA^IBCNSC1
"KRN",101,2418,99)
59168,57814
"KRN",101,2701,-1)
0^8
"KRN",101,2701,0)
IBJP MCCR PARAMETERS MENU^MCCR Parameters Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2701,4)
26^4
"KRN",101,2701,10,0)
^101.01PA^7^6
"KRN",101,2701,10,1,0)
2724^IB^11^
"KRN",101,2701,10,1,"^")
IBJP IB SITE PARAMETER SCREEN
"KRN",101,2701,10,2,0)
2725^CT^21^
"KRN",101,2701,10,2,"^")
IBJP CLAIMS TRACKING SCREEN
"KRN",101,2701,10,3,0)
2726^AB^31^
"KRN",101,2701,10,3,"^")
IBJP AUTO BILLING SCREEN
"KRN",101,2701,10,4,0)
2731^EX^37^
"KRN",101,2701,10,4,"^")
IBJ EXIT
"KRN",101,2701,10,5,0)
1626^^45^
"KRN",101,2701,10,5,"^")
VALM BLANK 1
"KRN",101,2701,10,7,0)
5304^IV^35^^^
"KRN",101,2701,10,7,"^")
IBJP INS VER SCREEN
"KRN",101,2701,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,2701,20)
K IBFASTXT
"KRN",101,2701,26)
D SHOW^VALM
"KRN",101,2701,28)
Select Action: 
"KRN",101,2701,99)
59028,60366
"KRN",101,2724,-1)
4^62
"KRN",101,2724,0)
IBJP IB SITE PARAMETER SCREEN
"KRN",101,2725,-1)
4^63
"KRN",101,2725,0)
IBJP CLAIMS TRACKING SCREEN
"KRN",101,2726,-1)
4^64
"KRN",101,2726,0)
IBJP AUTO BILLING SCREEN
"KRN",101,2731,-1)
4^42
"KRN",101,2731,0)
IBJ EXIT
"KRN",101,4474,-1)
3^16
"KRN",101,4474,0)
IBCNB LIST SCREEN MENU^List Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4474,4)
20^3
"KRN",101,4474,10,0)
^101.01PA^7^7
"KRN",101,4474,10,7,0)
5315^^32^
"KRN",101,4474,10,7,"^")
IBCNB LIST CHECK NAMES
"KRN",101,4474,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,4474,20)
K IBFASTXT
"KRN",101,4474,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,4474,26)
D SHOW^VALM
"KRN",101,4474,28)
Select Action: 
"KRN",101,4474,99)
58975,40160
"KRN",101,4481,-1)
2^67
"KRN",101,4481,0)
IBCNB ENTRY SCREEN MENU^Entry Menu^^M^10^^^^^^^248
"KRN",101,4481,10,0)
^101.01PA^7^7
"KRN",101,4481,10,7,0)
5439^^32^
"KRN",101,4481,10,7,"^")
IBCNB ENTRY RESPONSE REPORT
"KRN",101,5297,-1)
0^49
"KRN",101,5297,0)
IBCNE IIV VER REQUEST^Insurance Verification Request^^S^^^^^^^^
"KRN",101,5297,1,0)
^101.06^2^2^3020809^^^^
"KRN",101,5297,1,1,0)
This is an electronic request for insurance verification for a
"KRN",101,5297,1,2,0)
specified patient.
"KRN",101,5297,4)
^^^
"KRN",101,5297,99)
58966,46464
"KRN",101,5297,770)
^IIV EC^^I01^^^IIV EC^AL^NE^2.4^ACK
"KRN",101,5297,771)
Q
"KRN",101,5297,773)
1^1^0
"KRN",101,5297,775,0)
^101.0775PA^^
"KRN",101,5298,-1)
0^20
"KRN",101,5298,0)
IBCNE IIV REGISTER^IIV MFN Register^^E^^^^^^^^
"KRN",101,5298,1,0)
^101.06^3^3^3020620^^^
"KRN",101,5298,1,1,0)
This message is generated when a VISTA site installs.  An Enroll
"KRN",101,5298,1,2,0)
message will populate the Eligibility Communicator table with all
"KRN",101,5298,1,3,0)
the needed information about the installing VISTA site.
"KRN",101,5298,99)
58975,37278
"KRN",101,5298,770)
IIV VISTA^^MFN^M01^^^^AL^AL^2.4^
"KRN",101,5298,772)
D ^IBCNEHLI
"KRN",101,5298,775,0)
^101.0775PA^1^1
"KRN",101,5298,775,1,0)
5299
"KRN",101,5298,775,1,"^")
IBCNE IIV MFN OUT
"KRN",101,5299,-1)
0^6
"KRN",101,5299,0)
IBCNE IIV MFN OUT^IIV MFN CLIENT^^S^^^^^^^^
"KRN",101,5299,1,0)
^^1^1^3020611^
"KRN",101,5299,1,1,0)
This protocol is the client for the MFN enroll HL7 message.
"KRN",101,5299,99)
58966,47787
"KRN",101,5299,770)
^IIV EC^^M01^^^IIV EC^^^^ACK
"KRN",101,5299,773)
1^1
"KRN",101,5300,-1)
0^4
"KRN",101,5300,0)
IBCNE AUTO MATCH BUFFER SELECT^Select Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5300,20)
D SELECT^IBCNEAMC
"KRN",101,5300,99)
58966,60635
"KRN",101,5301,-1)
0^2
"KRN",101,5301,0)
IBCNE AUTO MATCH BUFFER LINK^Auto Match Enter/Edit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5301,20)
D LINK^IBCNEAMC
"KRN",101,5301,99)
58966,62320
"KRN",101,5302,-1)
0^3
"KRN",101,5302,0)
IBCNE AUTO MATCH BUFFER MENU^^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5302,4)
26^2
"KRN",101,5302,10,0)
^101.01PA^3^3
"KRN",101,5302,10,1,0)
5300^^1^
"KRN",101,5302,10,1,"^")
IBCNE AUTO MATCH BUFFER SELECT
"KRN",101,5302,10,2,0)
5301^^2^
"KRN",101,5302,10,2,"^")
IBCNE AUTO MATCH BUFFER LINK
"KRN",101,5302,10,3,0)
5303^^3^
"KRN",101,5302,10,3,"^")
IBCNE AUTO MATCH BUFFER EXIT
"KRN",101,5302,26)
D SHOW^VALM
"KRN",101,5302,28)
Select Action: 
"KRN",101,5302,99)
58966,65082
"KRN",101,5303,-1)
0^1
"KRN",101,5303,0)
IBCNE AUTO MATCH BUFFER EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5303,20)
S VALMBCK="Q"
"KRN",101,5303,99)
58966,65075
"KRN",101,5304,-1)
0^9
"KRN",101,5304,0)
IBJP INS VER SCREEN^Ins Id and Verif^^A^^^^^^^^
"KRN",101,5304,1,0)
^101.06^2^2^3020812^^^
"KRN",101,5304,1,1,0)
Insurance Identification and Verification screen to display/edit IIV Site 
"KRN",101,5304,1,2,0)
Parameters
"KRN",101,5304,20)
D EN^IBJPI
"KRN",101,5304,99)
59028,60351
"KRN",101,5305,-1)
0^10
"KRN",101,5305,0)
IBJP IIV BATCH EXTRACT EDIT^Batch Extracts^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5305,20)
D BE^IBJPI2
"KRN",101,5305,99)
58969,31803
"KRN",101,5306,-1)
0^11
"KRN",101,5306,0)
IBJP IIV MOST POPULAR EDIT^Most Popular Ins^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5306,20)
D MP^IBJPI2
"KRN",101,5306,99)
58969,43422
"KRN",101,5307,-1)
0^12
"KRN",101,5307,0)
IBJP IIV GENERAL EDIT^General Parameters^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5307,20)
D IIVEDIT^IBJPI2(0)
"KRN",101,5307,99)
58969,31957
"KRN",101,5308,-1)
0^13
"KRN",101,5308,0)
IBJP IIV PAT W/O INS^Patients w/o Ins^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5308,20)
D IIVEDIT^IBJPI2(1)
"KRN",101,5308,21,0)
^101.021A
"KRN",101,5308,99)
58969,43461
"KRN",101,5309,-1)
0^14
"KRN",101,5309,0)
IBJP INS VER MENU^Insurance Verification Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5309,4)
26^4
"KRN",101,5309,10,0)
^101.01PA^5^5
"KRN",101,5309,10,1,0)
5305^BE^2^
"KRN",101,5309,10,1,"^")
IBJP IIV BATCH EXTRACT EDIT
"KRN",101,5309,10,2,0)
5306^MP^4^
"KRN",101,5309,10,2,"^")
IBJP IIV MOST POPULAR EDIT
"KRN",101,5309,10,3,0)
5307^GP^1^
"KRN",101,5309,10,3,"^")
IBJP IIV GENERAL EDIT
"KRN",101,5309,10,4,0)
5308^PW^3^
"KRN",101,5309,10,4,"^")
IBJP IIV PAT W/O INS
"KRN",101,5309,10,5,0)
2731^EX^5^
"KRN",101,5309,10,5,"^")
IBJ EXIT
"KRN",101,5309,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,5309,20)
K IBFASTXT
"KRN",101,5309,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,5309,26)
D SHOW^VALM
"KRN",101,5309,28)
Select Action: 
"KRN",101,5309,99)
58969,44110
"KRN",101,5310,-1)
0^22
"KRN",101,5310,0)
IBCNE IIV RQV OUT^IIV VERIFICATION CLIENT^^E^^^^^^^^
"KRN",101,5310,1,0)
^^1^1^3020619^
"KRN",101,5310,1,1,0)
This protocol is for Verification Request messages.
"KRN",101,5310,99)
58974,37095
"KRN",101,5310,770)
IIV VISTA^^RQI^I01^^^^AL^NE^2.4^
"KRN",101,5310,772)
D ^IBCNEHLI
"KRN",101,5310,775,0)
^101.0775PA^1^1
"KRN",101,5310,775,1,0)
5297
"KRN",101,5310,775,1,"^")
IBCNE IIV VER REQUEST
"KRN",101,5313,-1)
0^21
"KRN",101,5313,0)
IBCNE IIV RQI OUT^IIV IDENTIFICATION CLIENT^^E^^^^^^^^
"KRN",101,5313,1,0)
^^1^1^3020619^
"KRN",101,5313,1,1,0)
This protocol is for Identification messages
"KRN",101,5313,99)
58974,37110
"KRN",101,5313,770)
IIV VISTA^^RQI^I03^^^^AL^NE^2.4^
"KRN",101,5313,772)
D ^IBCNEHLI
"KRN",101,5313,775,0)
^101.0775PA^1^1
"KRN",101,5313,775,1,0)
5314
"KRN",101,5313,775,1,"^")
IBCNE IIV ID REQUEST
"KRN",101,5314,-1)
0^44
"KRN",101,5314,0)
IBCNE IIV ID REQUEST^Insurance Identification Request^^S^^^^^^^^
"KRN",101,5314,1,0)
^^1^1^3020619^
"KRN",101,5314,1,1,0)
This protocol is for identification messages.
"KRN",101,5314,99)
58974,37153
"KRN",101,5314,770)
^IIV EC^RQI^I01^^^IIV EC^^^2.3^ACK
"KRN",101,5314,771)
Q
"KRN",101,5314,773)
1^1^0
"KRN",101,5315,-1)
0^15
"KRN",101,5315,0)
IBCNB LIST CHECK NAMES^Check Ins Co's^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5315,1,0)
^101.06^3^3^3020620^^
"KRN",101,5315,1,1,0)
This action protocol will allow the user to see what insurance company 
"KRN",101,5315,1,2,0)
names in the buffer are bad and allow for correction with the Auto Match 
"KRN",101,5315,1,3,0)
utility.
"KRN",101,5315,20)
D AMCHK^IBCNBLA
"KRN",101,5315,99)
58975,40113
"KRN",101,5316,-1)
0^31
"KRN",101,5316,0)
IBCNE REVERIFY INSURANCE MENU^List Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5316,4)
40^4
"KRN",101,5316,10,0)
^101.01PA^2^2
"KRN",101,5316,10,1,0)
5317^SE^1^^^Select Entry
"KRN",101,5316,10,1,1)
Select Ins Co to Reverify:
"KRN",101,5316,10,1,"^")
IBCNE SELECT INSURANCE
"KRN",101,5316,10,2,0)
5318^EX^2^
"KRN",101,5316,10,2,"^")
IBCNE FAST EXIT
"KRN",101,5316,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,5316,20)
K IBFASTXT
"KRN",101,5316,26)
D SHOW^VALM
"KRN",101,5316,28)
Select Action: 
"KRN",101,5316,99)
58980,64581
"KRN",101,5317,-1)
0^32
"KRN",101,5317,0)
IBCNE SELECT INSURANCE^Select Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5317,15)
D INIT^IBCNEQU
"KRN",101,5317,20)
D SELECT^IBCNEQU
"KRN",101,5317,99)
58980,52035
"KRN",101,5318,-1)
0^17
"KRN",101,5318,0)
IBCNE FAST EXIT^Exit^^A^^^^^^^^
"KRN",101,5318,20)
D FASTEXIT^IBCNEQU
"KRN",101,5318,99)
58980,64444
"KRN",101,5319,-1)
0^30
"KRN",101,5319,0)
IBCNSC INS CO PAYER^Payer^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5319,4)
^^^PA
"KRN",101,5319,15)
S VALMBG=69
"KRN",101,5319,20)
S IBY=",7," D EA^IBCNSC1
"KRN",101,5319,99)
58986,44390
"KRN",101,5320,-1)
0^48
"KRN",101,5320,0)
IBCNE IIV TABLE^IIV Incoming Table^^S^^^^^^^^
"KRN",101,5320,1,0)
^^1^1^3020809^
"KRN",101,5320,1,1,0)
This protocol handles any incoming MFN table updates.
"KRN",101,5320,99)
58993,46728
"KRN",101,5320,770)
^IIV VISTA^^I01^^^IIV EC^^^^ACK
"KRN",101,5320,771)
D ^IBCNEHLI
"KRN",101,5320,773)
1^1
"KRN",101,5321,-1)
0^46
"KRN",101,5321,0)
IBCNE IIV MFN IN^IIV MFN SERVER^^E^^^^^^^^
"KRN",101,5321,1,0)
^^1^1^3020809^
"KRN",101,5321,1,1,0)
This is the incoming MFN table server.
"KRN",101,5321,99)
58993,47378
"KRN",101,5321,770)
IIV EC^^MFN^M01^^^^AL^NE^2.4^
"KRN",101,5321,775,0)
^101.0775PA^1^1
"KRN",101,5321,775,1,0)
5320
"KRN",101,5321,775,1,"^")
IBCNE IIV TABLE
"KRN",101,5322,-1)
0^45
"KRN",101,5322,0)
IBCNE IIV IN^IIV IN SERVER^^E^^^^^^^^
"KRN",101,5322,1,0)
^^1^1^3030821^
"KRN",101,5322,1,1,0)
This is the master incoming protocol.
"KRN",101,5322,99)
58993,61410
"KRN",101,5322,770)
IIV EC^^RPI^I01^^^^^^2.4^
"KRN",101,5322,772)
D ^IBCNEHLI
"KRN",101,5322,775,0)
^101.0775PA^1^1
"KRN",101,5322,775,1,0)
5323
"KRN",101,5322,775,1,"^")
IBCNE IIV RESPONSE
"KRN",101,5323,-1)
0^47
"KRN",101,5323,0)
IBCNE IIV RESPONSE^IIV Response Message^^S^^^^^^^^
"KRN",101,5323,99)
58993,61484
"KRN",101,5323,770)
^IIV VISTA^^I01^^^IIV SERVER^^^^ACK
"KRN",101,5323,771)
D ^IBCNEHLI
"KRN",101,5400,-1)
0^50
"KRN",101,5400,0)
IBCNE PAYER MAINT MENU^IBCNE PAYER MAINT MENU^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5400,4)
40^3
"KRN",101,5400,10,0)
^101.01PA^2^2
"KRN",101,5400,10,1,0)
5401^EE^1^
"KRN",101,5400,10,1,"^")
IBCNE PAYER EXPAND
"KRN",101,5400,10,2,0)
5403^X^^
"KRN",101,5400,10,2,"^")
IBCNE PAYER EXIT
"KRN",101,5400,26)
D SHOW^VALM
"KRN",101,5400,28)
Select Action: 
"KRN",101,5400,99)
59192,58303
"KRN",101,5401,-1)
0^52
"KRN",101,5401,0)
IBCNE PAYER EXPAND^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5401,15)

"KRN",101,5401,20)
D EXPND^IBCNEPM2
"KRN",101,5401,99)
59179,58703
"KRN",101,5402,-1)
0^53
"KRN",101,5402,0)
IBCNE PAYER EXPAND MENU^IBCNE PAYER EXPAND MENU^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,5402,4)
40^3
"KRN",101,5402,10,0)
^101.01PA^5^3
"KRN",101,5402,10,3,0)
5403^X^21^
"KRN",101,5402,10,3,"^")
IBCNE PAYER EXIT
"KRN",101,5402,10,4,0)
5404^LP^12^
"KRN",101,5402,10,4,"^")
IBCNE PAYER LINK
"KRN",101,5402,10,5,0)
1623^PL^11^
"KRN",101,5402,10,5,"^")
VALM PRINT LIST
"KRN",101,5402,26)
D SHOW^VALM
"KRN",101,5402,28)
Select Action: 
"KRN",101,5402,99)
59192,58318
"KRN",101,5403,-1)
0^51
"KRN",101,5403,0)
IBCNE PAYER EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5403,15)
Q
"KRN",101,5403,20)
Q
"KRN",101,5403,99)
59186,55562
"KRN",101,5404,-1)
0^54
"KRN",101,5404,0)
IBCNE PAYER LINK^Link Payer^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,5404,1,0)
^^2^2^3030117^
"KRN",101,5404,1,1,0)
This is the action protocol to link the payer with the selected
"KRN",101,5404,1,2,0)
insurance company.
"KRN",101,5404,20)
D LINK^IBCNEPM1
"KRN",101,5404,99)
59186,60043
"KRN",101,5439,-1)
0^66
"KRN",101,5439,0)
IBCNB ENTRY RESPONSE REPORT^Response Report^^A^^^^^^^^
"KRN",101,5439,1,0)
^^3^3^3030605^
"KRN",101,5439,1,1,0)
This action protocol will allow the user to generate an IIV Response 
"KRN",101,5439,1,2,0)
Report, using the associated Trace Number as input, from the Expand Entry 
"KRN",101,5439,1,3,0)
screen.
"KRN",101,5439,20)
D RESP^IBCNBLA1(IBBUFDA)
"KRN",101,5439,99)
59325,36966
"KRN",409.61,468,-1)
0^7
"KRN",409.61,468,0)
IBCNB INSURANCE BUFFER ENTRY^1^^80^6^19^1^1^Entry^IBCNB ENTRY SCREEN MENU^Insurance Buffer Entry^1^^1
"KRN",409.61,468,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,468,"ARRAY")
 ^TMP("IBCNBLE",$J)
"KRN",409.61,468,"FNL")
D EXIT^IBCNBLE
"KRN",409.61,468,"HDR")
D HDR^IBCNBLE
"KRN",409.61,468,"HLP")
D HELP^IBCNBLE
"KRN",409.61,468,"INIT")
D INIT^IBCNBLE
"KRN",409.61,598,-1)
0^2
"KRN",409.61,598,0)
IBCNE AUTO MATCH BUFFER LIST^1^^80^6^21^1^1^^IBCNE AUTO MATCH BUFFER MENU^Unmatched Buffer Names^1^^1
"KRN",409.61,598,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,598,"ARRAY")
 ^TMP($J,"IBCNEAMC",1)
"KRN",409.61,598,"FNL")
D EXIT^IBCNEAMC
"KRN",409.61,598,"HDR")
D HDR^IBCNEAMC
"KRN",409.61,598,"HLP")
D HELP^IBCNEAMC
"KRN",409.61,598,"INIT")
D INIT^IBCNEAMC
"KRN",409.61,599,-1)
0^1
"KRN",409.61,599,0)
IBJP IIV SITE PARAMETERS^1^^80^4^19^1^1^^IBJP INS VER MENU^eIIV Site Parameters^1^^1
"KRN",409.61,599,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,599,"ARRAY")
 ^TMP($J,"IBJPI")
"KRN",409.61,599,"FNL")
D EXIT^IBJPI
"KRN",409.61,599,"HDR")
D HDR^IBJPI
"KRN",409.61,599,"HLP")
D HELP^IBJPI
"KRN",409.61,599,"INIT")
D INIT^IBJPI
"KRN",409.61,600,-1)
0^6
"KRN",409.61,600,0)
IBCNE REQUEST INS INQUIRY LIST^1^1^160^6^19^^1^^IBCNE REVERIFY INSURANCE MENU^IIV Insurance Request
"KRN",409.61,600,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,600,"ARRAY")
 ^TMP("IBCNEQU",$J)
"KRN",409.61,600,"COL",0)
^409.621^14^14
"KRN",409.61,600,"COL",1,0)
NUMBER^1^4^^^0
"KRN",409.61,600,"COL",2,0)
NAME^5^15^Insurance Co.^^1
"KRN",409.61,600,"COL",3,0)
POLICY^139^15^Subscriber ID
"KRN",409.61,600,"COL",4,0)
GROUP^38^11^Group
"KRN",409.61,600,"COL",5,0)
HOLDER^50^8^Holder
"KRN",409.61,600,"COL",6,0)
EFFDT^59^10^Effect.
"KRN",409.61,600,"COL",7,0)
EXPIRE^71^10^Expires
"KRN",409.61,600,"COL",8,0)
TYPE^85^8^Type
"KRN",409.61,600,"COL",9,0)
VERIFIED BY^95^12^Verified By
"KRN",409.61,600,"COL",10,0)
VERIFIED ON^109^10^Date Ver.
"KRN",409.61,600,"COL",11,0)
PRECERT^121^5^Pre
"KRN",409.61,600,"COL",12,0)
UR^127^5^UR
"KRN",409.61,600,"COL",13,0)
COB^133^4^COB
"KRN",409.61,600,"COL",14,0)
TYPEPOL^21^14^Type of Policy
"KRN",409.61,600,"COL","AIDENT",0,1)

"KRN",409.61,600,"COL","AIDENT",1,2)

"KRN",409.61,600,"COL","B","COB",13)

"KRN",409.61,600,"COL","B","EFFDT",6)

"KRN",409.61,600,"COL","B","EXPIRE",7)

"KRN",409.61,600,"COL","B","GROUP",4)

"KRN",409.61,600,"COL","B","HOLDER",5)

"KRN",409.61,600,"COL","B","NAME",2)

"KRN",409.61,600,"COL","B","NUMBER",1)

"KRN",409.61,600,"COL","B","POLICY",3)

"KRN",409.61,600,"COL","B","PRECERT",11)

"KRN",409.61,600,"COL","B","TYPE",8)

"KRN",409.61,600,"COL","B","TYPEPOL",14)

"KRN",409.61,600,"COL","B","UR",12)

"KRN",409.61,600,"COL","B","VERIFIED BY",9)

"KRN",409.61,600,"COL","B","VERIFIED ON",10)

"KRN",409.61,600,"FNL")
D EXIT^IBCNEQU
"KRN",409.61,600,"HDR")
D HDR^IBCNEQU
"KRN",409.61,600,"HLP")
D HELP^IBCNEQU
"KRN",409.61,600,"INIT")
D INIT^IBCNEQU
"KRN",409.61,606,-1)
0^4
"KRN",409.61,606,0)
IBCNE PAYER MAINT LIST^1^^80^5^20^1^1^^IBCNE PAYER MAINT MENU^Payer Maintenance^1^^1
"KRN",409.61,606,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,606,"ARRAY")
 ^TMP("IBCNEPM",$J,1)
"KRN",409.61,606,"COL",0)
^409.621^3^3
"KRN",409.61,606,"COL",1,0)
PAYER^5^35^Payer Name
"KRN",409.61,606,"COL",2,0)
LINKS^45^30^# Potential Matches
"KRN",409.61,606,"COL",3,0)
LINE^1^3
"KRN",409.61,606,"COL","B","LINE",3)

"KRN",409.61,606,"COL","B","LINKS",2)

"KRN",409.61,606,"COL","B","PAYER",1)

"KRN",409.61,606,"FNL")
D EXIT^IBCNEPM
"KRN",409.61,606,"HDR")
D HDR^IBCNEPM
"KRN",409.61,606,"HLP")
D HELP^IBCNEPM
"KRN",409.61,606,"INIT")
D INIT^IBCNEPM
"KRN",409.61,607,-1)
0^5
"KRN",409.61,607,0)
IBCNE PAYER EXPAND LIST^1^^80^5^20^1^1^^IBCNE PAYER EXPAND MENU^Payer Expand Screen^1^^1
"KRN",409.61,607,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,607,"ARRAY")
 ^TMP("IBCNEPM",$J,2)
"KRN",409.61,607,"COL",0)
^409.621^5^5
"KRN",409.61,607,"COL",1,0)
INSURANCE CO^5^25^Insurance Company Name
"KRN",409.61,607,"COL",2,0)
ADDRESS^32^30^Address
"KRN",409.61,607,"COL",3,0)
LINE^1^3^^^0
"KRN",409.61,607,"COL",4,0)
PROFEDI^64^5^Prof#
"KRN",409.61,607,"COL",5,0)
INSTEDI^72^5^Inst#
"KRN",409.61,607,"COL","AIDENT",0,3)

"KRN",409.61,607,"COL","B","ADDRESS",2)

"KRN",409.61,607,"COL","B","INSTEDI",5)

"KRN",409.61,607,"COL","B","INSURANCE CO",1)

"KRN",409.61,607,"COL","B","LINE",3)

"KRN",409.61,607,"COL","B","PROFEDI",4)

"KRN",409.61,607,"FNL")
D EXIT^IBCNEPM1
"KRN",409.61,607,"HDR")
D HDR^IBCNEPM1
"KRN",409.61,607,"HLP")
D HELP^IBCNEPM1
"KRN",409.61,607,"INIT")
D INIT^IBCNEPM1
"KRN",771,79,-1)
0^2
"KRN",771,79,0)
IIV VISTA^a^^IBCNE IIV MESSAGE^^^US
"KRN",771,79,"EC")
^~\&
"KRN",771,79,"FS")
|
"KRN",771,80,-1)
0^1
"KRN",771,80,0)
IIV EC^a^^IBCNE IIV MESSAGE^^^US
"KRN",771,80,"EC")
^~\&
"KRN",771,80,"FS")
|
"KRN",870,184,-1)
0^1
"KRN",870,184,0)
IIV EC^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,184,200)
^^^60^60^^^^^R
"KRN",870,184,400)
1.1.1.1^5100^C^N^60^
"KRN",870,185,-1)
0^2
"KRN",870,185,0)
IIV SERVER^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,185,200)
^^^^40^^^^^R
"KRN",870,185,400)
63.80.242.54^5100^S^^^^
"MBREQ")
0
"ORD",3,19.1)
19.1;3;1;;KEY^XPDTA1;;;;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;HLLLDEL^XPDIA1(%)
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",248,-1)
1^1
"PKG",248,0)
INTEGRATED BILLING^IB^APP
"PKG",248,20,0)
^9.402P^1^1
"PKG",248,20,1,0)
2^^IBAXDR
"PKG",248,20,1,1)

"PKG",248,20,"B",2,1)

"PKG",248,22,0)
^9.49I^1^1
"PKG",248,22,1,0)
2.0^2940321^2940616
"PKG",248,22,1,"PAH",1,0)
184^3030910
"PKG",248,22,1,"PAH",1,1,0)
^^2^2^3030910
"PKG",248,22,1,"PAH",1,1,1,0)
This is the build for the electronic Insurance Identification and 
"PKG",248,22,1,"PAH",1,1,2,0)
Verification project (also referred to as eIIV and IIV).
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
73
"RTN","IBCNBAA")
0^58^B58306297
"RTN","IBCNBAA",1,0)
IBCNBAA ;ALB/ARH-Ins Buffer: process Accept set-up ;1 Jun 97
"RTN","IBCNBAA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBAA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBAA",4,0)
 ;
"RTN","IBCNBAA",5,0)
 ;
"RTN","IBCNBAA",6,0)
ACCEPT(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA) ; process a buffer entry for acceptance then save in Insurance files
"RTN","IBCNBAA",7,0)
 ;    1) for Insurance Company, Group/Plan and Policy sets of data:
"RTN","IBCNBAA",8,0)
 ;        a) display the set of buffer data and corresponding existing selected ins data
"RTN","IBCNBAA",9,0)
 ;        b) if ins record exists confirm with user that it is the correct one to use
"RTN","IBCNBAA",10,0)
 ;        c) if ins record exists user selects method of saving to ins record: Merge/Overwrite/Replace/No Change/Individually Accept(skip blanks)
"RTN","IBCNBAA",11,0)
 ;        d) if new record needs to be created get user confirmation
"RTN","IBCNBAA",12,0)
 ;    2) display the actions that will be taken
"RTN","IBCNBAA",13,0)
 ;    3) user confirms that is correct
"RTN","IBCNBAA",14,0)
 ;    4) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAA",15,0)
 ;    5) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAA",16,0)
 ;    6) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAA",17,0)
 ;    7) buffer ins/group/policy data deleted
"RTN","IBCNBAA",18,0)
 ;    8) buffer entry status updated
"RTN","IBCNBAA",19,0)
 ;
"RTN","IBCNBAA",20,0)
 N DFN,IBX,IBHELP,IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL,IBACCPT,DIR,X,Y,DIRUT,IBDONE S IBDONE=0
"RTN","IBCNBAA",21,0)
 S IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA),IBPOLDA=+$G(IBPOLDA),(IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL)=0
"RTN","IBCNBAA",22,0)
 S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) I 'DFN G ACCPTQ
"RTN","IBCNBAA",23,0)
 I +IBINSDA,+IBGRPDA,'IBPOLDA S IBPOLDA=$$PTGRP^IBCNBU1(DFN,IBINSDA,IBGRPDA) ; pateint already member of plan
"RTN","IBCNBAA",24,0)
 ;
"RTN","IBCNBAA",25,0)
 I $P($G(^IBA(355.33,$G(IBBUFDA),0)),U,4)'="E" G ACCPTQ
"RTN","IBCNBAA",26,0)
 I +IBINSDA,$G(^DIC(36,IBINSDA,0))="" G ACCPTQ
"RTN","IBCNBAA",27,0)
 I +IBGRPDA,+$G(^IBA(355.3,IBGRPDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",28,0)
 I +IBGRPDA S IBX=$G(^IBA(355.3,IBGRPDA,0)) I $P(IBX,U,2)=0,+$P(IBX,U,10),$P(IBX,U,10)'=DFN G ACCPTQ
"RTN","IBCNBAA",29,0)
 I +IBPOLDA,+$G(^DPT(DFN,.312,IBPOLDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",30,0)
 I +IBPOLDA,$P($G(^DPT(DFN,.312,IBPOLDA,0)),U,18)'=IBGRPDA G ACCPTQ
"RTN","IBCNBAA",31,0)
 ;
"RTN","IBCNBAA",32,0)
ACINS ;
"RTN","IBCNBAA",33,0)
 W @IOF S IBHELP=",INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBAA",34,0)
 D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBAA",35,0)
 I +IBINSDA S IBACCPT=$$MATCH("INSURANCE COMPANY") S:'IBACCPT (IBINSDA,IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",36,0)
 I +IBINSDA S IBMVINS=$$MOVE("INSURANCE COMPANY",IBHELP) I $D(DIRUT)!(IBMVINS="") G ACCPTQ
"RTN","IBCNBAA",37,0)
 I 'IBINSDA S IBNEWINS=$$NEW("INSURANCE COMPANY"),IBMVINS=3,(IBGRPDA,IBPOLDA)=0 I 'IBNEWINS G ACCPTQ
"RTN","IBCNBAA",38,0)
 ;
"RTN","IBCNBAA",39,0)
 I +IBMVINS=4 D INS^IBCNBAC(IBBUFDA,IBINSDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",40,0)
 ;
"RTN","IBCNBAA",41,0)
ACGRP ;
"RTN","IBCNBAA",42,0)
 W @IOF S IBHELP=",GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBAA",43,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBAA",44,0)
 D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBAA",45,0)
 I +IBGRPDA S IBACCPT=$$MATCH("GROUP/PLAN") S:'IBACCPT (IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",46,0)
 I +IBGRPDA S IBMVGRP=$$MOVE("GROUP/PLAN",IBHELP) I $D(DIRUT)!(IBMVGRP="") G ACCPTQ
"RTN","IBCNBAA",47,0)
 I 'IBGRPDA S IBNEWGRP=$$NEW("GROUP/PLAN"),IBMVGRP=3,IBPOLDA=0 I 'IBNEWGRP G ACCPTQ
"RTN","IBCNBAA",48,0)
 ;
"RTN","IBCNBAA",49,0)
 I +IBMVGRP=4 D GRP^IBCNBAC(IBBUFDA,IBGRPDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",50,0)
 ;
"RTN","IBCNBAA",51,0)
ACPOL ;
"RTN","IBCNBAA",52,0)
 W @IOF S IBHELP=",POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBAA",53,0)
 I 'IBPOLDA W !,"This will be a New policy for this group and patient.",!
"RTN","IBCNBAA",54,0)
 D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBAA",55,0)
 I +IBPOLDA S IBACCPT=$$MATCH("PATIENT POLICY") S:'IBACCPT IBPOLDA=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",56,0)
 I +IBPOLDA S IBMVPOL=$$MOVE("PATIENT POLICY",IBHELP) I $D(DIRUT)!(IBMVPOL="") G ACCPTQ
"RTN","IBCNBAA",57,0)
 I 'IBPOLDA S IBNEWPOL=$$NEW("PATIENT POLICY"),IBMVPOL=3 I 'IBNEWPOL G ACCPTQ
"RTN","IBCNBAA",58,0)
 ;
"RTN","IBCNBAA",59,0)
 I +IBMVPOL=4 D POLICY^IBCNBAC(IBBUFDA,IBPOLDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",60,0)
 ;
"RTN","IBCNBAA",61,0)
CHECK ; display changes that will be made and ask user for confirmation
"RTN","IBCNBAA",62,0)
 W @IOF
"RTN","IBCNBAA",63,0)
 ;
"RTN","IBCNBAA",64,0)
 I +IBINSDA S IBX="The Buffer data will "_$P(IBMVINS,U,2)_" the existing Insurance Company data."
"RTN","IBCNBAA",65,0)
 I +IBINSDA,'IBMVINS S IBX="There will be "_$P(IBMVINS,U,2)_" to the existing Insurance Company data."
"RTN","IBCNBAA",66,0)
 I 'IBINSDA S IBX=$P(^IBA(355.33,IBBUFDA,20),U,1)_" will be added as a NEW Insurance Company."
"RTN","IBCNBAA",67,0)
 W !!,$G(IORVON)_"STEP 1: Insurance Company"_$J("",55)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",68,0)
 ;
"RTN","IBCNBAA",69,0)
 I +IBGRPDA S IBX="The Buffer data will "_$P(IBMVGRP,U,2)_" the existing Group/Plan data."
"RTN","IBCNBAA",70,0)
 I +IBGRPDA,'IBMVGRP S IBX="There will be "_$P(IBMVGRP,U,2)_" to the existing Group/Plan data."
"RTN","IBCNBAA",71,0)
 I 'IBGRPDA S IBX="A NEW Group Plan will be added to this Insurance Company."
"RTN","IBCNBAA",72,0)
 W !!,$G(IORVON)_"STEP 2: Group/Plan"_$J("",62)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",73,0)
 ;
"RTN","IBCNBAA",74,0)
 I +IBPOLDA S IBX="The Buffer data will "_$P(IBMVPOL,U,2)_" the existing Policy data."
"RTN","IBCNBAA",75,0)
 I +IBPOLDA,'IBMVPOL S IBX="There will be "_$P(IBMVPOL,U,2)_" to the existing Policy data."
"RTN","IBCNBAA",76,0)
 I 'IBPOLDA S IBX="A NEW Patient Policy will be added for this patient and this Group/Plan."
"RTN","IBCNBAA",77,0)
 W !!,$G(IORVON)_"STEP 3: Patient Policy"_$J("",58)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",78,0)
 ;
"RTN","IBCNBAA",79,0)
 I +IBINSDA,$P(IBMVINS,U,1)=0,+IBGRPDA,$P(IBMVGRP,U,1)=0,+IBPOLDA,$P(IBMVPOL,U,1)=0 W !!!,"This would result in No Change to the existing Insurance data.  Process aborted." D WAIT G ACCPTQ
"RTN","IBCNBAA",80,0)
 ;
"RTN","IBCNBAA",81,0)
 I '$$OK G ACCPTQ
"RTN","IBCNBAA",82,0)
 ;
"RTN","IBCNBAA",83,0)
PROCESS ; process all changes selected by user, add/edit insurance files based on buffer data, cleanup, ...
"RTN","IBCNBAA",84,0)
 ;
"RTN","IBCNBAA",85,0)
 D ACCEPT^IBCNBAR(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL)
"RTN","IBCNBAA",86,0)
 S IBDONE=1
"RTN","IBCNBAA",87,0)
 ;
"RTN","IBCNBAA",88,0)
ACCPTQ Q IBDONE
"RTN","IBCNBAA",89,0)
 ;
"RTN","IBCNBAA",90,0)
 ;
"RTN","IBCNBAA",91,0)
 ;
"RTN","IBCNBAA",92,0)
MATCH(IBDESC) ; ask the user if the buffer entry is a match with the selected insurance file entry
"RTN","IBCNBAA",93,0)
 ; returns 1 if there is a match, 0 otherwise
"RTN","IBCNBAA",94,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",95,0)
 S DIR("?")="Enter Yes if this existing "_IBDESC_" corresponds to the buffer entry "_IBDESC_".  Enter No to add new "_IBDESC_"."
"RTN","IBCNBAA",96,0)
 S DIR("?",1)="Entering Yes will match this existing "_IBDESC_" with the buffer entry,"
"RTN","IBCNBAA",97,0)
 S DIR("?",2)="no new "_IBDESC_" will be created.  Any existing "_IBDESC_" data"
"RTN","IBCNBAA",98,0)
 S DIR("?",3)="changes based on the Buffer data will be applied to this "_IBDESC_"."
"RTN","IBCNBAA",99,0)
 S DIR("?",4)="Enter No to create a new "_IBDESC_" if the Buffer entry's "
"RTN","IBCNBAA",100,0)
 S DIR("?",5)=IBDESC_" data does not match any existing "_IBDESC_".",DIR("?",6)=""
"RTN","IBCNBAA",101,0)
 ;
"RTN","IBCNBAA",102,0)
 W ! S DIR(0)="YO",DIR("A")="Is this the correct "_IBDESC_" to match with this Buffer entry" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",103,0)
 Q IBX
"RTN","IBCNBAA",104,0)
 ;
"RTN","IBCNBAA",105,0)
MOVE(IBDESC,IBHELP) ; ask the user what method they want to use to transfer buffer data to the insurance files
"RTN","IBCNBAA",106,0)
 ; returns 1^merge, 2^overwrite, 3^replace, 4^individually accept (skip blanks),
"RTN","IBCNBAA",107,0)
 ;  0^no change,
"RTN","IBCNBAA",108,0)
 ;  or "" if none of the methods was chosen
"RTN","IBCNBAA",109,0)
 N DIR,X,Y,IBX S IBX=""
"RTN","IBCNBAA",110,0)
 S DIR("?")="^D HELP^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP),DIR("??")="^D HELP2^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP)
"RTN","IBCNBAA",111,0)
 S DIR("A")="Select the method to update the "_IBDESC
"RTN","IBCNBAA",112,0)
 ; DAOU/BHS - 08/28/2002 - Added INDIVIDUALLY ACCEPT methods
"RTN","IBCNBAA",113,0)
 W ! S DIR(0)="SOB^M:MERGE;O:OVERWRITE;R:REPLACE;N:NO CHANGE;I:INDIVIDUALLY ACCEPT (SKIP BLANKS)" D ^DIR
"RTN","IBCNBAA",114,0)
 S IBX=$S(Y="M":1,Y="O":2,Y="R":3,Y="I":4,Y="N":0,1:"") I IBX'="" S IBX=IBX_U_$G(Y(0))_$S(+IBX=1:" with",1:"")
"RTN","IBCNBAA",115,0)
 Q IBX
"RTN","IBCNBAA",116,0)
 ;
"RTN","IBCNBAA",117,0)
NEW(IBDESC) ; ask user if they want to add a new entry to the insurance files (36, 355.3, or 2.312)
"RTN","IBCNBAA",118,0)
 ; returns 1 if Yes create a new entry, 0 otherwise
"RTN","IBCNBAA",119,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",120,0)
 I IBDESC="INSURANCE COMPANY",'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies." D WAIT G NEWQ
"RTN","IBCNBAA",121,0)
 ;
"RTN","IBCNBAA",122,0)
 S DIR("?")="Enter Yes to create a new "_IBDESC_". Enter No to stop this process."
"RTN","IBCNBAA",123,0)
 S DIR("?",1)="Enter Yes to create a new "_IBDESC_" in the Insurance files for"
"RTN","IBCNBAA",124,0)
 S DIR("?",2)="this Buffer entry only if no existing "_IBDESC_" could be found"
"RTN","IBCNBAA",125,0)
 S DIR("?",3)="that matches this buffer entry.",DIR("?",4)=""
"RTN","IBCNBAA",126,0)
 W ! S DIR(0)="YO",DIR("A")="No "_IBDESC_" Selected, Add a New "_IBDESC D ^DIR I +Y=1 S IBX=1
"RTN","IBCNBAA",127,0)
NEWQ Q IBX
"RTN","IBCNBAA",128,0)
 ;
"RTN","IBCNBAA",129,0)
OK() ; ask the user if the buffer data should be moved to the insurance files
"RTN","IBCNBAA",130,0)
 ; returns 1 if yes, 0 otherwise
"RTN","IBCNBAA",131,0)
 N DIR,X,Y,IBX S IBX=0 W !!!
"RTN","IBCNBAA",132,0)
 S DIR("?")="Enter Yes to accept/verify the buffer data and move it to the insurance files.  Enter No to stop this process."
"RTN","IBCNBAA",133,0)
 S DIR("?",1)="Entering Yes will cause several things to happen:"
"RTN","IBCNBAA",134,0)
 S DIR("?",2)="  1 - the above changes will be completed and the Insurance files updated with"
"RTN","IBCNBAA",135,0)
 S DIR("?",3)="      the buffer data."
"RTN","IBCNBAA",136,0)
 S DIR("?",4)="  2 - the Insurance entries modified or added will be flagged as verified."
"RTN","IBCNBAA",137,0)
 S DIR("?",5)="  3 - most of the insurance and patient related information in the buffer entry"
"RTN","IBCNBAA",138,0)
 S DIR("?",6)="      will be deleted, leaving only a stub entry for reporting purposes.",DIR("?",7)=""
"RTN","IBCNBAA",139,0)
 S DIR(0)="YO",DIR("A")="Is this Correct, update the existing Insurance files now" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",140,0)
 Q IBX
"RTN","IBCNBAA",141,0)
 ;
"RTN","IBCNBAA",142,0)
WAIT N DIR,DIRUT,DUOUT,DTOUT,X,Y W !! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W !!
"RTN","IBCNBAA",143,0)
 Q
"RTN","IBCNBAC")
0^72^B51548829
"RTN","IBCNBAC",1,0)
IBCNBAC ;ALB/ARH/DAOU/WCW-Ins Buffer: Individually Accept Insurance Buffer Fields ; 28-APR-03
"RTN","IBCNBAC",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNBAC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBAC",4,0)
 ;
"RTN","IBCNBAC",5,0)
INS(IBBUFDA,IBINSDA,SKPBLANK) ; display a buffer entry's insurance company fields and an existing insurance company fields for comparison
"RTN","IBCNBAC",6,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBAC",7,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",8,0)
 ;
"RTN","IBCNBAC",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBAC",10,0)
 ;
"RTN","IBCNBAC",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBAC",12,0)
 ;
"RTN","IBCNBAC",13,0)
 W @IOF
"RTN","IBCNBAC",14,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBAC",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",16,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",17,0)
 ;
"RTN","IBCNBAC",18,0)
 D FIELDS("INS","",SKPBLANK)
"RTN","IBCNBAC",19,0)
 ;
"RTN","IBCNBAC",20,0)
 Q
"RTN","IBCNBAC",21,0)
 ;
"RTN","IBCNBAC",22,0)
GRP(IBBUFDA,IBGRPDA,SKPBLANK) ; display a buffer entrys group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBAC",23,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBAC",24,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",25,0)
 ;
"RTN","IBCNBAC",26,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBAC",27,0)
 ;
"RTN","IBCNBAC",28,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBAC",29,0)
 ;
"RTN","IBCNBAC",30,0)
 W @IOF
"RTN","IBCNBAC",31,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBAC",32,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",33,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",34,0)
 ;
"RTN","IBCNBAC",35,0)
 D FIELDS("GRP","",SKPBLANK)
"RTN","IBCNBAC",36,0)
 ;
"RTN","IBCNBAC",37,0)
 Q
"RTN","IBCNBAC",38,0)
 ;
"RTN","IBCNBAC",39,0)
POLICY(IBBUFDA,IBPOLDA,SKPBLANK) ; display a buffer entrys patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBAC",40,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBAC",41,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",42,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBAC",43,0)
 ;
"RTN","IBCNBAC",44,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBAC",45,0)
 ;
"RTN","IBCNBAC",46,0)
 W @IOF
"RTN","IBCNBAC",47,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBAC",48,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",49,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.03),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",50,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",51,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",52,0)
 ;
"RTN","IBCNBAC",53,0)
 D FIELDS("POL","",SKPBLANK)
"RTN","IBCNBAC",54,0)
 ;
"RTN","IBCNBAC",55,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP(SKPBLANK)
"RTN","IBCNBAC",56,0)
 ;
"RTN","IBCNBAC",57,0)
 Q
"RTN","IBCNBAC",58,0)
 ;
"RTN","IBCNBAC",59,0)
ESGHP(SKPBLANK) ; display employee sponsored group health plan
"RTN","IBCNBAC",60,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",61,0)
 W !!
"RTN","IBCNBAC",62,0)
 ;
"RTN","IBCNBAC",63,0)
 D FIELDS("POL",1,SKPBLANK)
"RTN","IBCNBAC",64,0)
 ;
"RTN","IBCNBAC",65,0)
 Q
"RTN","IBCNBAC",66,0)
 ;
"RTN","IBCNBAC",67,0)
FIELDS(SET,ESGHP,SKPBLANK) ; accept each field and set into temp array
"RTN","IBCNBAC",68,0)
 N CHGCHK,IBFLDLST,IBFLDVAL,IBUSER,IBLABEL,EXTFILE,IBEXTFLD
"RTN","IBCNBAC",69,0)
 S ESGHP=$G(ESGHP),SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",70,0)
 ;
"RTN","IBCNBAC",71,0)
 K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBAC",72,0)
 ;
"RTN","IBCNBAC",73,0)
 S EXTFILE=+$P($T(@(SET_"DR")+1^IBCNBMI),";;",2)
"RTN","IBCNBAC",74,0)
 D FIELDS^IBCNBMI(SET_"FLD")
"RTN","IBCNBAC",75,0)
 ;
"RTN","IBCNBAC",76,0)
 S CHGCHK=0 ; Initialize variable to check for any items to accept
"RTN","IBCNBAC",77,0)
 S IBBUFFLD=0 F  S IBBUFFLD=$O(IBFLDS(IBBUFFLD)) Q:'IBBUFFLD  I '$D(IBADDS(IBBUFFLD)) D  Q:$G(IBUSER)<0
"RTN","IBCNBAC",78,0)
 . I '$$ESGHPFLD(ESGHP,IBBUFFLD) Q
"RTN","IBCNBAC",79,0)
 . ;
"RTN","IBCNBAC",80,0)
 . S IBEXTFLD=IBFLDS(IBBUFFLD),IBLABEL=IBLBLS(IBBUFFLD)_":"
"RTN","IBCNBAC",81,0)
 . S IBFLDVAL=$$DISPLAY(IBBUFFLD,EXTFILE,IBEXTFLD,IBLABEL)
"RTN","IBCNBAC",82,0)
 . I $P(IBFLDVAL,U,1)=$P(IBFLDVAL,U,2) Q
"RTN","IBCNBAC",83,0)
 . I SKPBLANK,$P(IBFLDVAL,U,1)="" Q
"RTN","IBCNBAC",84,0)
 . ;
"RTN","IBCNBAC",85,0)
 . S CHGCHK=1
"RTN","IBCNBAC",86,0)
 . S IBUSER=$$ACCEPT($P(IBFLDVAL,U,1),$P(IBFLDVAL,U,2)) Q:IBUSER<0
"RTN","IBCNBAC",87,0)
 . I +IBUSER S ^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)=""
"RTN","IBCNBAC",88,0)
 ;
"RTN","IBCNBAC",89,0)
 S IBFLDLST="" ; allow selection of address data in a group rather than individually
"RTN","IBCNBAC",90,0)
 S IBBUFFLD=0 F  S IBBUFFLD=$O(IBFLDS(IBBUFFLD)) Q:'IBBUFFLD  I $D(IBADDS(IBBUFFLD)) D
"RTN","IBCNBAC",91,0)
 . I '$$ESGHPFLD(ESGHP,IBBUFFLD) Q
"RTN","IBCNBAC",92,0)
 . ;
"RTN","IBCNBAC",93,0)
 . S IBEXTFLD=IBFLDS(IBBUFFLD),IBLABEL=IBLBLS(IBBUFFLD)_":"
"RTN","IBCNBAC",94,0)
 . S IBFLDVAL=$$DISPLAY(IBBUFFLD,EXTFILE,IBEXTFLD,IBLABEL)
"RTN","IBCNBAC",95,0)
 . I $P(IBFLDVAL,U,1)=$P(IBFLDVAL,U,2) Q
"RTN","IBCNBAC",96,0)
 . I SKPBLANK,$P(IBFLDVAL,U,1)="" Q  ; Do not prompt for blanks, if skipping
"RTN","IBCNBAC",97,0)
 . S CHGCHK=1
"RTN","IBCNBAC",98,0)
 . S IBFLDLST=IBFLDLST_IBBUFFLD_U
"RTN","IBCNBAC",99,0)
 ;
"RTN","IBCNBAC",100,0)
 I IBFLDLST'="" S IBUSER=$$ACCEPTG Q:IBUSER<0  D
"RTN","IBCNBAC",101,0)
 . I +IBUSER F IBUSER=1:1 S IBBUFFLD=$P(IBFLDLST,U,IBUSER) Q:'IBBUFFLD  S ^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)=""
"RTN","IBCNBAC",102,0)
 ;
"RTN","IBCNBAC",103,0)
 ; Display message if there were no changs to accept
"RTN","IBCNBAC",104,0)
 I CHGCHK=0 W !!,"There are no changes to be accepted, based on the method of update chosen."
"RTN","IBCNBAC",105,0)
 I CHGCHK=1 W !!,"End of changes for "_$S(SET="INS":"INSURANCE",SET="GRP":"GROUP",(SET="POL"&'ESGHP):"POLICY",1:"EMPLOYEE SPONSORED GROUP HEALTH PLAN")_" related data."
"RTN","IBCNBAC",106,0)
 K DIR
"RTN","IBCNBAC",107,0)
 D PAUSE^VALM1
"RTN","IBCNBAC",108,0)
 ;
"RTN","IBCNBAC",109,0)
 Q
"RTN","IBCNBAC",110,0)
 ;
"RTN","IBCNBAC",111,0)
ESGHPFLD(ESGHP,IBBUFFLD) ; return true if field should be included, if ESGHP thEN include all 61.* fields, else exclude those fields
"RTN","IBCNBAC",112,0)
 N IBX,IBY S IBX=1 S ESGHP=$G(ESGHP)
"RTN","IBCNBAC",113,0)
 S IBY=0 I IBBUFFLD>61,IBBUFFLD<61.99 S IBY=1
"RTN","IBCNBAC",114,0)
 I +IBY,'ESGHP S IBX=0
"RTN","IBCNBAC",115,0)
 I 'IBY,ESGHP S IBX=0
"RTN","IBCNBAC",116,0)
 Q IBX
"RTN","IBCNBAC",117,0)
 ;
"RTN","IBCNBAC",118,0)
ACCEPT(BUFDATA,EXTDATA) ; ask user if they want to accept the change, returns true if yes
"RTN","IBCNBAC",119,0)
 N IBX S IBX=0
"RTN","IBCNBAC",120,0)
 I $G(BUFDATA)=$G(EXTDATA) Q
"RTN","IBCNBAC",121,0)
 I BUFDATA="" S DIR("A")="Accept Change, Delete",DIR("?")="The Buffer field is null, accepting the change will result in the Insurance Company data ("_EXTDATA_") being deleted"
"RTN","IBCNBAC",122,0)
 I BUFDATA'="" S DIR("A")="Accept Change, Replace",DIR("?")="Accepting the change will result Buffer data ("_BUFDATA_") replacing the Insurance Company data ("_EXTDATA_")"
"RTN","IBCNBAC",123,0)
 S DIR(0)="Y",DIR("B")="No" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAC",124,0)
 I $D(DIRUT)!$D(DTOUT) S IBX=-1
"RTN","IBCNBAC",125,0)
 W !
"RTN","IBCNBAC",126,0)
 Q IBX
"RTN","IBCNBAC",127,0)
 ;
"RTN","IBCNBAC",128,0)
 ;
"RTN","IBCNBAC",129,0)
ACCEPTG() ; ask user if they want to accept the entire address change, returns true if yes
"RTN","IBCNBAC",130,0)
 N IBX S IBX=0
"RTN","IBCNBAC",131,0)
 S DIR("A")="Accept Address Change",DIR("?")="Accepting the change will result in the entire Buffer Address replacing the Insurance Company Address"
"RTN","IBCNBAC",132,0)
 S DIR(0)="Y",DIR("B")="No" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAC",133,0)
 I $D(DIRUT)!$D(DTOUT) S IBX=-1
"RTN","IBCNBAC",134,0)
 W !
"RTN","IBCNBAC",135,0)
 Q IBX
"RTN","IBCNBAC",136,0)
 ;
"RTN","IBCNBAC",137,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBAC",138,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG,IBATTR,IBDATA S EXTDATA=""
"RTN","IBCNBAC",139,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBAC",140,0)
 I +IBEXTDA S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBAC",141,0)
 S IBDATA=BUFDATA_U_EXTDATA
"RTN","IBCNBAC",142,0)
 ;
"RTN","IBCNBAC",143,0)
 S (IBOVER,IBMERG,IBATTR)=""
"RTN","IBCNBAC",144,0)
 I BUFDATA'=EXTDATA S (IBOVER,IBMERG,IBATTR)="B"
"RTN","IBCNBAC",145,0)
 ; When skipping blanks, display skipped items without bold
"RTN","IBCNBAC",146,0)
 I SKPBLANK,BUFDATA="" S (IBOVER,IBMERG,IBATTR)=""
"RTN","IBCNBAC",147,0)
 ;
"RTN","IBCNBAC",148,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG,IBATTR)
"RTN","IBCNBAC",149,0)
 Q IBDATA
"RTN","IBCNBAC",150,0)
 ;
"RTN","IBCNBAC",151,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formated data with label and two fields
"RTN","IBCNBAC",152,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBAC",153,0)
 S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBAC",154,0)
 W !
"RTN","IBCNBAC",155,0)
 D WRTFLD(LABEL,0,19,ATTR),WRTFLD(FLD1,19,29,MERG)
"RTN","IBCNBAC",156,0)
 D WRTFLD(" | ",48,3,ATTR),WRTFLD(FLD2,51,29,OVER)
"RTN","IBCNBAC",157,0)
 Q
"RTN","IBCNBAC",158,0)
 ;
"RTN","IBCNBAC",159,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBAC",160,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBAC",161,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBAC",162,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBAC",163,0)
 ;
"RTN","IBCNBAC",164,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBAC",165,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBAC",166,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBAC",167,0)
 Q
"RTN","IBCNBEE")
0^29^B43543449
"RTN","IBCNBEE",1,0)
IBCNBEE ;ALB/ARH-Ins Buffer: add/edit existing entries in buffer ;1 Jun 97
"RTN","IBCNBEE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBEE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBEE",4,0)
 ;
"RTN","IBCNBEE",5,0)
ADD(IBSOURCE) ; add a new buffer file entry (#355.33), sets only status (0) node data
"RTN","IBCNBEE",6,0)
 N IBARR,IBERR,IBIFN,IBX I '$G(IBSOURCE) S IBSOURCE=1
"RTN","IBCNBEE",7,0)
 ;
"RTN","IBCNBEE",8,0)
 S IBARR(355.33,"+1,",.01)="NOW",IBARR(355.33,"+1,",.03)=IBSOURCE
"RTN","IBCNBEE",9,0)
 D UPDATE^DIE("E","IBARR","IBIFN","IBERR")
"RTN","IBCNBEE",10,0)
 S IBX=+$G(IBIFN(1)) I $D(IBERR) S $P(IBX,U,2)=$G(IBERR("DIERR",1,"TEXT",1))
"RTN","IBCNBEE",11,0)
 Q IBX
"RTN","IBCNBEE",12,0)
 ;
"RTN","IBCNBEE",13,0)
STATUS(IBBUFDA,STATUS,NC,NG,NP) ; edit the status node
"RTN","IBCNBEE",14,0)
 ;
"RTN","IBCNBEE",15,0)
 N IBX,IBARR,IBIFN Q:'$G(IBBUFDA)  S IBIFN=IBBUFDA_","
"RTN","IBCNBEE",16,0)
 D CHK^DIE(355.33,.04,"",$G(STATUS),.IBX) Q:IBX="^"
"RTN","IBCNBEE",17,0)
 ;
"RTN","IBCNBEE",18,0)
 S IBARR(355.33,IBIFN,.04)=STATUS I STATUS="R" S (NC,NG,NP)=0
"RTN","IBCNBEE",19,0)
 S IBARR(355.33,IBIFN,.07)=+$G(NC),IBARR(355.33,IBIFN,.08)=+$G(NG),IBARR(355.33,IBIFN,.09)=+$G(NP)
"RTN","IBCNBEE",20,0)
 D FILE^DIE("E","IBARR")
"RTN","IBCNBEE",21,0)
 Q
"RTN","IBCNBEE",22,0)
 ;
"RTN","IBCNBEE",23,0)
INS(IBBUFDA,FLDS) ; edit the insurance company portion of a buffer file entry
"RTN","IBCNBEE",24,0)
 ;
"RTN","IBCNBEE",25,0)
 N DIC,DIE,DA,DR,X,Y,IBCNEXT1
"RTN","IBCNBEE",26,0)
 I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",27,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",28,0)
 ;
"RTN","IBCNBEE",29,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing
"RTN","IBCNBEE",30,0)
 ;     - the insurance company name in the buffer.  Also added an
"RTN","IBCNBEE",31,0)
 ;     - input transform (see below) to clean up the data coming in.
"RTN","IBCNBEE",32,0)
 ;     - fetch the current buffer ins co name
"RTN","IBCNBEE",33,0)
 ;
"RTN","IBCNBEE",34,0)
 I FLDS="MR" S IBCNEXT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBEE",35,0)
 ;
"RTN","IBCNBEE",36,0)
 S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",37,0)
 ;
"RTN","IBCNBEE",38,0)
 I FLDS="MR" Q:$$INSNAME(IBBUFDA)<0  S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999),DR=$P(DR,";",2,99999)
"RTN","IBCNBEE",39,0)
 ;
"RTN","IBCNBEE",40,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",41,0)
 Q
"RTN","IBCNBEE",42,0)
 ;
"RTN","IBCNBEE",43,0)
GRP(IBBUFDA,FLDS) ; edit the group/plan portion of the buffer file entry
"RTN","IBCNBEE",44,0)
 ;
"RTN","IBCNBEE",45,0)
 N DIC,DIE,DA,DR,X,Y I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",46,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",47,0)
 ;
"RTN","IBCNBEE",48,0)
 S DR=$P($T(@(FLDS_"GRP")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",49,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",50,0)
 Q
"RTN","IBCNBEE",51,0)
 ;
"RTN","IBCNBEE",52,0)
POLICY(IBBUFDA,FLDS) ; edit the patient policy portion of the buffer file entry
"RTN","IBCNBEE",53,0)
 ;
"RTN","IBCNBEE",54,0)
 N DIC,DIE,DA,DR,X,Y,IBZZ I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",55,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",56,0)
 ;
"RTN","IBCNBEE",57,0)
 S DR=$P($T(@(FLDS_"POL")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",58,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR Q:$D(Y)
"RTN","IBCNBEE",59,0)
 ;
"RTN","IBCNBEE",60,0)
 I FLDS="MR" D ESGHP(IBBUFDA)
"RTN","IBCNBEE",61,0)
 Q
"RTN","IBCNBEE",62,0)
 ;
"RTN","IBCNBEE",63,0)
ESGHP(IBBUFDA) ; sponsoring employer information
"RTN","IBCNBEE",64,0)
 N DIR,DIRUT,DUOUT,DTOUT,VAOA,VAERR,VA,DFN,IB60,IBE,IBEMPST,IBREL
"RTN","IBCNBEE",65,0)
 ;
"RTN","IBCNBEE",66,0)
 ; if insured is patient or spouse, ask if insured's current employer is the plan's sponsoring employer, if yes auto stuff it
"RTN","IBCNBEE",67,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) W ! S IB60=$G(^IBA(355.33,IBBUFDA,60)) D  Q:$D(DIRUT)
"RTN","IBCNBEE",68,0)
 . ; sponsoring employer is current employer?
"RTN","IBCNBEE",69,0)
 . S DFN=+IB60,IBREL=$P(IB60,U,6),VAOA("A")=$S(IBREL="01":5,IBREL="02":6,1:"") I 'DFN!(VAOA("A")="") Q
"RTN","IBCNBEE",70,0)
 . D OAD^VADPT I $G(VAOA(9))="" Q
"RTN","IBCNBEE",71,0)
 . S DIR("?")="Enter Yes if this plan is sponsored by the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer."
"RTN","IBCNBEE",72,0)
 . S DIR("?",1)="Entering Yes will result in the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer data being",DIR("?",2)="added to the policy as the Sponsoring Employer data.",DIR("?",3)=""
"RTN","IBCNBEE",73,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" D ^DIR W ! I Y'=1 Q
"RTN","IBCNBEE",74,0)
 . ;
"RTN","IBCNBEE",75,0)
 . D DELEMP(IBBUFDA) ; delete any data already contained in these fields
"RTN","IBCNBEE",76,0)
 . ;
"RTN","IBCNBEE",77,0)
 . ; if the insured's current employer sponsors the plan then stuff that employer's address into the buffer
"RTN","IBCNBEE",78,0)
 . S IBE=$S(IBREL="01":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15) D
"RTN","IBCNBEE",79,0)
 . S DR="61.02///"_VAOA(9)_";61.03///"_IBEMPST_";61.06///"_$E(VAOA(1),1,30)_";61.07///"_$E(VAOA(2),1,30)
"RTN","IBCNBEE",80,0)
 . S DR=DR_";61.08///"_$E(VAOA(3),1,30)_";61.09///"_$E(VAOA(4),1,20)_";61.1////"_$P(VAOA(5),U,1)
"RTN","IBCNBEE",81,0)
 . S DR=DR_";61.11////"_$P(VAOA(11),U,1)_";61.12///"_$E(VAOA(8),1,15)
"RTN","IBCNBEE",82,0)
 . S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",83,0)
 ;
"RTN","IBCNBEE",84,0)
 ; if employer sponsored plan, edit buffer entry's sponsoring employer info
"RTN","IBCNBEE",85,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) S DR="61.02:61.12",DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",86,0)
 ;
"RTN","IBCNBEE",87,0)
 ; if not employer sponsored plan, delete any existing sponsoring employer data
"RTN","IBCNBEE",88,0)
 I $D(^IBA(355.33,IBBUFDA,61)),'$G(^IBA(355.33,IBBUFDA,61)) D DELEMP(IBBUFDA)
"RTN","IBCNBEE",89,0)
 Q
"RTN","IBCNBEE",90,0)
 ;
"RTN","IBCNBEE",91,0)
DELEMP(IBBUFDA) ; delete sponsoring employer data
"RTN","IBCNBEE",92,0)
 N DIC,DIE,DA,DR,X,Y Q:'$D(^IBA(355.33,+$G(IBBUFDA),61))
"RTN","IBCNBEE",93,0)
 S DR="61.02///@;61.03///@;61.04///@;61.05///@;61.06///@;61.07///@;61.08///@;61.09///@;61.10///@;61.11///@;61.12///@"
"RTN","IBCNBEE",94,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",95,0)
 Q
"RTN","IBCNBEE",96,0)
 ;
"RTN","IBCNBEE",97,0)
INSHELP ;
"RTN","IBCNBEE",98,0)
 W !!,"------------------------ INSURANCE COMPANY INFORMATION -------------------------",!
"RTN","IBCNBEE",99,0)
 Q
"RTN","IBCNBEE",100,0)
GRPHELP ;
"RTN","IBCNBEE",101,0)
 W !!,"---------------------------- GROUP/PLAN INFORMATION ----------------------------"
"RTN","IBCNBEE",102,0)
 W !," The following data defines a specific Group or Plan provided by an Insurance "
"RTN","IBCNBEE",103,0)
 W !," Company.  This may be either a group plan with many potential members or an "
"RTN","IBCNBEE",104,0)
 W !," individual plan with a single member.",!
"RTN","IBCNBEE",105,0)
 Q
"RTN","IBCNBEE",106,0)
POLHELP ;
"RTN","IBCNBEE",107,0)
 W !!,"---------------------- POLICY AND SUBSCRIBER INFORMATION -----------------------"
"RTN","IBCNBEE",108,0)
 W !," The following data defines the subscriber specific policy information for a "
"RTN","IBCNBEE",109,0)
 W !," particular Insurance Plan.  The subscriber, the insured, and the policy holder "
"RTN","IBCNBEE",110,0)
 W !," all refer to the person who is a member of the plan and therefore holds the "
"RTN","IBCNBEE",111,0)
 W !," policy.  The patient must be covered under the plan but may not be the policy"
"RTN","IBCNBEE",112,0)
 W !," holder.",!
"RTN","IBCNBEE",113,0)
 Q
"RTN","IBCNBEE",114,0)
 ;
"RTN","IBCNBEE",115,0)
INSNAME(IBBUFDA) ;  Reset insurance company name
"RTN","IBCNBEE",116,0)
 N DR,DIE,DA,Y,X,IBX,IBNEW,IBNAME
"RTN","IBCNBEE",117,0)
 S IBX=-1
"RTN","IBCNBEE",118,0)
 S DR=20.01,DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",119,0)
 D ^DIE
"RTN","IBCNBEE",120,0)
 I '$D(Y) S IBNEW=$$CHECK(IBBUFDA)
"RTN","IBCNBEE",121,0)
 I +$G(IBNEW)'<0,$G(IBNEW)'=0,$D(IBNEW) S DR=$P(DR,";",1)_"////"_IBNEW S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR I '$D(Y) S IBX=0
"RTN","IBCNBEE",122,0)
 Q IBX
"RTN","IBCNBEE",123,0)
 ;
"RTN","IBCNBEE",124,0)
CHECK(IBBUFDA) ; Select Insurance Company Name and Automatch
"RTN","IBCNBEE",125,0)
 ; Buffer file (#355.33), field# 20.01.
"RTN","IBCNBEE",126,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing the
"RTN","IBCNBEE",127,0)
 ;       insurance company name.  Also, display the insurance company
"RTN","IBCNBEE",128,0)
 ;       name lookup/lister and the Auto Match lookup/lister.
"RTN","IBCNBEE",129,0)
 ;
"RTN","IBCNBEE",130,0)
 NEW IBNEW,IBNAME,AMLIST
"RTN","IBCNBEE",131,0)
 ;
"RTN","IBCNBEE",132,0)
 S IBNEW=0,IBNAME=$P($G(^IBA(355.33,$G(IBBUFDA),20)),U,1)
"RTN","IBCNBEE",133,0)
 I IBNAME="" G CHECKQ
"RTN","IBCNBEE",134,0)
 ;
"RTN","IBCNBEE",135,0)
 ; Perform an insurance company lookup/lister
"RTN","IBCNBEE",136,0)
 S IBNEW=$$DICINS^IBCNBU1(IBNAME,1,10) I IBNEW<0 G CHECKQ
"RTN","IBCNBEE",137,0)
 I IBNEW=0 D  I IBNEW<0 G CHECKQ
"RTN","IBCNBEE",138,0)
 . I '$$AMLOOK^IBCNEUT1(IBNAME,1,.AMLIST) Q
"RTN","IBCNBEE",139,0)
 . S IBNEW=$$AMSEL^IBCNEUT1(.AMLIST)
"RTN","IBCNBEE",140,0)
 ;
"RTN","IBCNBEE",141,0)
 ; user chose a valid insurance company - possible Auto Match add
"RTN","IBCNBEE",142,0)
 I IBNEW'<0,IBNEW'=0 D AMADD^IBCNEUT6(X,IBCNEXT1)
"RTN","IBCNBEE",143,0)
 ;
"RTN","IBCNBEE",144,0)
CHECKQ Q IBNEW
"RTN","IBCNBEE",145,0)
 ;
"RTN","IBCNBEE",146,0)
MRINS ; Insurance Company fields asked of MCCR users in the Buffer Process options (all buffer ins fields 20.01-21.06)
"RTN","IBCNBEE",147,0)
 ;;20.01;20.05;20.02:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",148,0)
 ;
"RTN","IBCNBEE",149,0)
MRGRP ; Group/Plan fields asked of MCCR users in the Buffer Process options (all buffer grp fields 40.01-40.09)
"RTN","IBCNBEE",150,0)
 ;;40.01:40.03;40.09;40.04:40.08
"RTN","IBCNBEE",151,0)
 ;
"RTN","IBCNBEE",152,0)
MRPOL ; Patient Policy fields asked of MCCR users in the Buffer Process options (all buffer policy fields except ESGHP 60.02-61.01
"RTN","IBCNBEE",153,0)
 ;;60.02;60.03;60.05;60.06//^S X=$S(X="v":"01",X="s":"02",1:"");S IBZZ=X;60.04;I IBZZ'="01" S Y="@111";60.07///1;60.08///@;60.09///@;S Y="@112";@111;60.07:60.09;@112;60.1:60.12;.03;61.01
"RTN","IBCNBEE",154,0)
 ;
"RTN","IBCNBEE",155,0)
OTINS ; Insurance Company fields asked of non-MCCR users entering buffer data from options outside IB (20.01-20.04,21.01-21.06)
"RTN","IBCNBEE",156,0)
 ;;20.01:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",157,0)
 ;
"RTN","IBCNBEE",158,0)
OTGRP ; Group/Plan fields asked of non-MCCR users entering buffer data from options outside IB (40.02,40.03,40.09)
"RTN","IBCNBEE",159,0)
 ;;40.02;40.03;40.09
"RTN","IBCNBEE",160,0)
 ;
"RTN","IBCNBEE",161,0)
OTPOL ; Patient Policy fields asked of non-MCCR users entering buffer data from options outside IB (60.02-60.09)
"RTN","IBCNBEE",162,0)
 ;;60.02;60.03;60.05;60.06//^S X=$S(X="v":"01",X="s":"02",1:"");S IBZZ=X;60.04;I IBZZ'="01" S Y="@111";60.07///1;60.08///@;60.09///@;S Y="@112";@111;60.07:60.09;@112
"RTN","IBCNBES")
0^14^B5591654
"RTN","IBCNBES",1,0)
IBCNBES ;ALB/ARH-Ins Buffer: stuff new entries/data into buffer ;1 Jun 97
"RTN","IBCNBES",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBES",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBES",4,0)
 ;
"RTN","IBCNBES",5,0)
 ;
"RTN","IBCNBES",6,0)
ADDSTF(IBSOURCE,DFN,IBDATA) ;  add new entry to Insurance Buffer file (355.33) and stuff the data passed in, no user interaction
"RTN","IBCNBES",7,0)
 ;  IBSOURCE = source of information             (required)
"RTN","IBCNBES",8,0)
 ;             1 = interview           2 = data match
"RTN","IBCNBES",9,0)
 ;             3 = ivm                 4 = pre-registration
"RTN","IBCNBES",10,0)
 ;             5 = eiiv
"RTN","IBCNBES",11,0)
 ;  DFN      = patient's ifn in file 2           (required)
"RTN","IBCNBES",12,0)
 ;  IBDATA   = data to file in Buffer in an array subscripted by field number of the data field in 355.33
"RTN","IBCNBES",13,0)
 ;             ex:  IBDATA(20.01)="Insurance Company Name", etc,
"RTN","IBCNBES",14,0)
 ;  returns ien of new entry or 0 followed by error if entry not added
"RTN","IBCNBES",15,0)
 ;
"RTN","IBCNBES",16,0)
 ;  example of call: $$ADDBUF^IBCNBES(2,DFN,.IBDATA)   where IBDATA(field #) = value
"RTN","IBCNBES",17,0)
 ;
"RTN","IBCNBES",18,0)
 N X,Y,IBBUFDA,IBERROR
"RTN","IBCNBES",19,0)
 ;
"RTN","IBCNBES",20,0)
 ;  verify source of information and data exists to store
"RTN","IBCNBES",21,0)
 I $G(IBSOURCE)="" S IBERROR="SOURCE OF INFORMATION INCORRECT" G EXIT
"RTN","IBCNBES",22,0)
 I $G(^DPT(+$G(DFN),0))="" S IBERROR="NO PATIENT DEFINED" G EXIT
"RTN","IBCNBES",23,0)
 I $D(IBDATA)<10 S IBERROR="NO DATA TO STORE" G EXIT
"RTN","IBCNBES",24,0)
 ;
"RTN","IBCNBES",25,0)
 ;  add new entry to Buffer file (355.33)
"RTN","IBCNBES",26,0)
 S IBBUFDA=+$$ADD^IBCNBEE(IBSOURCE) I 'IBBUFDA S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY" G EXIT
"RTN","IBCNBES",27,0)
 ;
"RTN","IBCNBES",28,0)
 S IBDATA(60.01)=+DFN
"RTN","IBCNBES",29,0)
 ;
"RTN","IBCNBES",30,0)
 D EDITSTF(+IBBUFDA,.IBDATA)
"RTN","IBCNBES",31,0)
 ;
"RTN","IBCNBES",32,0)
 ; delete leftover ESGHP data if ESGHP? is not Yes
"RTN","IBCNBES",33,0)
 I +$G(IBBUFDA),$D(^IBA(355.33,$G(IBBUFDA),61)),'$G(^IBA(355.33,$G(IBBUFDA),61)) D DELEMP^IBCNBEE($G(IBBUFDA))
"RTN","IBCNBES",34,0)
 ;
"RTN","IBCNBES",35,0)
EXIT Q +$G(IBBUFDA)_"^"_$G(IBERROR)
"RTN","IBCNBES",36,0)
 ;
"RTN","IBCNBES",37,0)
EDITSTF(IBBUFDA,IBDATA) ;  loop though data array and stuff each buffer field, no user interaction
"RTN","IBCNBES",38,0)
 ;
"RTN","IBCNBES",39,0)
 N IBFIELD,IBVALUE,IBARR,IBERR Q:'$G(^IBA(355.33,$G(IBBUFDA),0))
"RTN","IBCNBES",40,0)
 ;
"RTN","IBCNBES",41,0)
 S IBFIELD=0 F  S IBFIELD=$O(IBDATA(IBFIELD)) Q:'IBFIELD  D
"RTN","IBCNBES",42,0)
 . S IBVALUE=$$FLDCHK(355.33,IBFIELD,IBDATA(IBFIELD)) Q:'IBVALUE
"RTN","IBCNBES",43,0)
 . S IBARR(355.33,IBBUFDA_",",IBFIELD)=$P(IBVALUE,U,2)
"RTN","IBCNBES",44,0)
 I $D(IBARR)>9 D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",45,0)
 Q
"RTN","IBCNBES",46,0)
 ;
"RTN","IBCNBES",47,0)
FLDCHK(FILE,FIELD,VALUE) ; minor checks on data: truncate if length too long, if pointer add ' so can be processed as external format
"RTN","IBCNBES",48,0)
 N IBATTR,IBERR,IBX S IBX="1^"_VALUE
"RTN","IBCNBES",49,0)
 I VALUE="" S IBX="0^No data value." G FLDCHKQ
"RTN","IBCNBES",50,0)
 D FIELD^DID(FILE,FIELD,"N","FIELD LENGTH;SPECIFIER","IBATTR","IBERR")
"RTN","IBCNBES",51,0)
 I $D(IBERR) S IBX="0^"_$G(IBERR("DIERR",1,"TEXT",1)) G FLDCHKQ
"RTN","IBCNBES",52,0)
 I $G(IBATTR("SPECIFIER"))["P" S IBX="1^`"_VALUE G FLDCHKQ
"RTN","IBCNBES",53,0)
 I $D(IBATTR("FIELD LENGTH")) S IBX="1^"_$E(VALUE,1,+IBATTR("FIELD LENGTH"))
"RTN","IBCNBES",54,0)
FLDCHKQ Q IBX
"RTN","IBCNBLA")
0^5^B62895557
"RTN","IBCNBLA",1,0)
IBCNBLA ;ALB/ARH-Ins Buffer: LM action calls ;1 Jun 97
"RTN","IBCNBLA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,184**;21-MAR-94
"RTN","IBCNBLA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLA",4,0)
 ;
"RTN","IBCNBLA",5,0)
NEWSCRN(TEMPLAT,TMPARR,IBBUFDA) ; open a new screen for a specific buffer entry, pass in LM template and the array to select from
"RTN","IBCNBLA",6,0)
 ; if temp array is defined then user selects the buffer entry, otherwise use entry passed in
"RTN","IBCNBLA",7,0)
 ;
"RTN","IBCNBLA",8,0)
 I $G(TMPARR)'="" N IBBUFDA S IBBUFDA=$$SEL(TMPARR)
"RTN","IBCNBLA",9,0)
 I +$G(IBBUFDA),$G(TEMPLAT)'="",+$$LOCK^IBCNBU1(IBBUFDA,1) D EN^VALM(TEMPLAT) D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA",10,0)
 S VALMBCK="R"
"RTN","IBCNBLA",11,0)
 Q
"RTN","IBCNBLA",12,0)
 ;
"RTN","IBCNBLA",13,0)
SEL(TMPARR) ; user selects one of the items from the list on the screen
"RTN","IBCNBLA",14,0)
 ;
"RTN","IBCNBLA",15,0)
 N VALMY,IBX,IBY,IBSELN S IBX=""
"RTN","IBCNBLA",16,0)
 I $G(TMPARR)'="",'$O(^TMP(TMPARR,$J,0)) D  G SELQ
"RTN","IBCNBLA",17,0)
 . W !!,"There are no '",$S($G(VALM("ENTITY"))'="":VALM("ENTITY"),1:"record"),"s' to select.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",18,0)
 ;
"RTN","IBCNBLA",19,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCNBLA",20,0)
 I $D(VALMY),$G(TMPARR)'="" S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA",21,0)
 . S IBX=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99)
"RTN","IBCNBLA",22,0)
 . ;
"RTN","IBCNBLA",23,0)
 . I TMPARR="IBCNBLLX" S IBY=$P($G(^IBA(355.33,+IBX,0)),U,4) I IBY'="E" D  S IBX=""
"RTN","IBCNBLA",24,0)
 .. W !!," >>> Selected entry has been ",$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN STATUS")
"RTN","IBCNBLA",25,0)
 .. W " and may no longer be edited or modified.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",26,0)
 ;
"RTN","IBCNBLA",27,0)
SELQ Q IBX
"RTN","IBCNBLA",28,0)
 ;
"RTN","IBCNBLA",29,0)
PNXTSCRN(TEMPLAT,IBBUFDA) ; open a new screen for a buffer entry, rebuild the process screen on return since it may have changed
"RTN","IBCNBLA",30,0)
 D NEWSCRN^IBCNBLA(TEMPLAT,"",IBBUFDA)
"RTN","IBCNBLA",31,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R"
"RTN","IBCNBLA",32,0)
 Q
"RTN","IBCNBLA",33,0)
 ;
"RTN","IBCNBLA",34,0)
LNXTSCRN(TEMPLAT,TMPARR) ; select entries from list to process/expand
"RTN","IBCNBLA",35,0)
 ;
"RTN","IBCNBLA",36,0)
 ; This procedure is called from the ListMan action protocols for
"RTN","IBCNBLA",37,0)
 ; processing and expanding buffer entries.
"RTN","IBCNBLA",38,0)
 ;    TEMPLAT - list template name for associated action
"RTN","IBCNBLA",39,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",40,0)
 ;
"RTN","IBCNBLA",41,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",42,0)
 NEW ACT,REMAIN,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNBLA",43,0)
 D FULL^VALM1
"RTN","IBCNBLA",44,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",45,0)
 I '$D(IBCNEZAR) G LNXTX
"RTN","IBCNBLA",46,0)
 ;
"RTN","IBCNBLA",47,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",48,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",49,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",50,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",51,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)    ; buffer ien
"RTN","IBCNBLA",52,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",53,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",54,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",55,0)
 .. D EN^VALM(TEMPLAT)                      ; invoke list template
"RTN","IBCNBLA",56,0)
 .. I $G(IBFASTXT) S IBCNEZQ=1 Q            ; Fast Exit processing
"RTN","IBCNBLA",57,0)
 .. S ACT="expand"
"RTN","IBCNBLA",58,0)
 .. I TEMPLAT["PROCESS" S ACT="process"
"RTN","IBCNBLA",59,0)
 .. S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",60,0)
 .. I 'REMAIN Q
"RTN","IBCNBLA",61,0)
 .. W @IOF
"RTN","IBCNBLA",62,0)
 .. W !!!,"You are ",ACT,"ing multiple insurance buffer entries."
"RTN","IBCNBLA",63,0)
 .. W !,"You just completed entry number ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,")."
"RTN","IBCNBLA",64,0)
 .. S DIR(0)="Y"
"RTN","IBCNBLA",65,0)
 .. S DIR("A")="Do you want to "_ACT_" the remaining entry"
"RTN","IBCNBLA",66,0)
 .. I REMAIN>1 S DIR("A")="Do you want to "_ACT_" the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",67,0)
 .. S DIR("B")="YES"
"RTN","IBCNBLA",68,0)
 .. W ! D ^DIR K DIR
"RTN","IBCNBLA",69,0)
 .. I 'Y S IBCNEZQ=1       ; User said NO so set the Quitting variable
"RTN","IBCNBLA",70,0)
 .. Q
"RTN","IBCNBLA",71,0)
 . ;
"RTN","IBCNBLA",72,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",73,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",74,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",75,0)
 . Q
"RTN","IBCNBLA",76,0)
LNXTX ;
"RTN","IBCNBLA",77,0)
 S VALMBCK="R"
"RTN","IBCNBLA",78,0)
 Q
"RTN","IBCNBLA",79,0)
 ;
"RTN","IBCNBLA",80,0)
LREJECT(TMPARR) ; user select entries from list then reject/delete them
"RTN","IBCNBLA",81,0)
 ;
"RTN","IBCNBLA",82,0)
 ; This procedure is called from the ListMan action protocol for
"RTN","IBCNBLA",83,0)
 ; rejecting buffer entries.
"RTN","IBCNBLA",84,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",85,0)
 ;
"RTN","IBCNBLA",86,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",87,0)
 D FULL^VALM1
"RTN","IBCNBLA",88,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",89,0)
 I '$D(IBCNEZAR) G LREJX
"RTN","IBCNBLA",90,0)
 ;
"RTN","IBCNBLA",91,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",92,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",93,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",94,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",95,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)
"RTN","IBCNBLA",96,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",97,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",98,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",99,0)
 .. W @IOF,!?2,$G(IORVON)
"RTN","IBCNBLA",100,0)
 .. W " Entry ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,") "
"RTN","IBCNBLA",101,0)
 .. W $G(IORVOFF)
"RTN","IBCNBLA",102,0)
 .. D REJECT^IBCNBLA1(IBCNEZBF,.IBCNEZQ)
"RTN","IBCNBLA",103,0)
 .. ;
"RTN","IBCNBLA",104,0)
 .. ; If the user wants to stop and we're not processing the last one,
"RTN","IBCNBLA",105,0)
 .. ; then determine if we should process the remaining entries
"RTN","IBCNBLA",106,0)
 .. ;
"RTN","IBCNBLA",107,0)
 .. I $D(IBCNEZQ),IBCNEZCT<IBCNEZGD D
"RTN","IBCNBLA",108,0)
 ... NEW REMAIN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA",109,0)
 ... S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",110,0)
 ... S DIR(0)="Y"
"RTN","IBCNBLA",111,0)
 ... S DIR("A")="Do you want to process the remaining entry"
"RTN","IBCNBLA",112,0)
 ... I REMAIN>1 S DIR("A")="Do you want to process the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",113,0)
 ... S DIR("B")="NO"
"RTN","IBCNBLA",114,0)
 ... W ! D ^DIR K DIR
"RTN","IBCNBLA",115,0)
 ... ; if user wants to continue, then kill the quitting variable
"RTN","IBCNBLA",116,0)
 ... I Y KILL IBCNEZQ
"RTN","IBCNBLA",117,0)
 ... Q
"RTN","IBCNBLA",118,0)
 .. Q
"RTN","IBCNBLA",119,0)
 . ;
"RTN","IBCNBLA",120,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",121,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",122,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",123,0)
 . Q
"RTN","IBCNBLA",124,0)
LREJX ;
"RTN","IBCNBLA",125,0)
 S VALMBCK="R"
"RTN","IBCNBLA",126,0)
 Q
"RTN","IBCNBLA",127,0)
 ;
"RTN","IBCNBLA",128,0)
 ;
"RTN","IBCNBLA",129,0)
FASTEXIT ; sets flag signaling system should be exited
"RTN","IBCNBLA",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNBLA",131,0)
 S VALMBCK="Q"
"RTN","IBCNBLA",132,0)
 D FULL^VALM1
"RTN","IBCNBLA",133,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO" D ^DIR
"RTN","IBCNBLA",134,0)
 I +Y S IBFASTXT=1
"RTN","IBCNBLA",135,0)
 Q
"RTN","IBCNBLA",136,0)
 ;
"RTN","IBCNBLA",137,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNBLA",138,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNBLA",139,0)
 ;
"RTN","IBCNBLA",140,0)
 D FULL^VALM1 W !
"RTN","IBCNBLA",141,0)
 W !,"Select the item to sort the buffer records on the buffer list screen."
"RTN","IBCNBLA",142,0)
 S DIR(0)="SO^1:Patient Name;2:Insurance Company;3:Source of Information;4:Date Entered;5:Inpatients;6:Means Test;7:On Hold;8:Verified;9:IIV Status"
"RTN","IBCNBLA",143,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBCNSORT),"^",2)
"RTN","IBCNBLA",144,0)
 D ^DIR K DIR
"RTN","IBCNBLA",145,0)
 I 'Y G SELSORTX
"RTN","IBCNBLA",146,0)
 S IBCNSORT=Y_"^"_Y(0)
"RTN","IBCNBLA",147,0)
 ;
"RTN","IBCNBLA",148,0)
 ; ESG - 6/7/02 - SDD 5.1.1
"RTN","IBCNBLA",149,0)
 ; If the user wants to sort by symbol, then ask them which
"RTN","IBCNBLA",150,0)
 ; symbol should appear first and process accordingly.
"RTN","IBCNBLA",151,0)
 ;
"RTN","IBCNBLA",152,0)
 KILL IBCNSORT(1)       ; initialize the symbol sort array
"RTN","IBCNBLA",153,0)
 I +IBCNSORT=9 D  I $D(DIRUT)!('Y) G SELSORTX
"RTN","IBCNBLA",154,0)
 . ;
"RTN","IBCNBLA",155,0)
 . ; build the array of default sort order
"RTN","IBCNBLA",156,0)
 . S IBCNSORT(1,"+")=10
"RTN","IBCNBLA",157,0)
 . S IBCNSORT(1,"-")=20
"RTN","IBCNBLA",158,0)
 . S IBCNSORT(1,"!")=30
"RTN","IBCNBLA",159,0)
 . S IBCNSORT(1," ")=40
"RTN","IBCNBLA",160,0)
 . S IBCNSORT(1,"?")=50
"RTN","IBCNBLA",161,0)
 . S IBCNSORT(1,"*")=60
"RTN","IBCNBLA",162,0)
 . ;
"RTN","IBCNBLA",163,0)
 . ; build the DIR array to ask the question
"RTN","IBCNBLA",164,0)
 . S DIR(0)="SO^"
"RTN","IBCNBLA",165,0)
 . F ST="1:+~A1","2:-~D1","3:!~B1","4: ~","5:?~Q1" D  ; removed blanks
"RTN","IBCNBLA",166,0)
 .. I ST="4: ~" S STDES="No Problems Identified, Awaiting Electronic Processing" ; removed blanks
"RTN","IBCNBLA",167,0)
 .. E  S STDES=$$GET1^DIQ(365.15,$$FIND1^DIC(365.15,"","X",$P(ST,"~",2)),.01,"E")
"RTN","IBCNBLA",168,0)
 .. S DIR(0)=DIR(0)_$P(ST,"~")_"  "_STDES_$S(ST="5:?~Q1":"",1:";")
"RTN","IBCNBLA",169,0)
 . S DIR("A")="Which IIV Status do you want to appear first?"
"RTN","IBCNBLA",170,0)
 . S DIR("B")=1
"RTN","IBCNBLA",171,0)
 . S DIR("?",1)=" Please identify the IIV status that you want to appear first in the Insurance"
"RTN","IBCNBLA",172,0)
 . S DIR("?",2)=" Buffer listing.  The symbol appears immediately to the left of the patient"
"RTN","IBCNBLA",173,0)
 . S DIR("?",3)=" name in the list.  The default sort order for statuses is the same as"
"RTN","IBCNBLA",174,0)
 . S DIR("?",4)=" they are presented in this list below.  You may choose which status will appear"
"RTN","IBCNBLA",175,0)
 . S DIR("?",5)=" first in the list.  The remaining statuses will be sorted according to this"
"RTN","IBCNBLA",176,0)
 . S DIR("?",6)=" default sort order.  When sorting by IIV status, the secondary sort"
"RTN","IBCNBLA",177,0)
 . S DIR("?",7)=" is the entered date and the final sort is by patient name."
"RTN","IBCNBLA",178,0)
 . S DIR("?")=" "
"RTN","IBCNBLA",179,0)
 . D ^DIR K DIR
"RTN","IBCNBLA",180,0)
 . I $D(DIRUT) Q
"RTN","IBCNBLA",181,0)
 . I 'Y Q
"RTN","IBCNBLA",182,0)
 . ;
"RTN","IBCNBLA",183,0)
 . ; update the sort order array with the chosen symbol
"RTN","IBCNBLA",184,0)
 . S IBCNSORT(1,$E(Y(0)))=1
"RTN","IBCNBLA",185,0)
 . S $P(IBCNSORT,U,3)=$E(Y(0))
"RTN","IBCNBLA",186,0)
 . Q
"RTN","IBCNBLA",187,0)
 ;
"RTN","IBCNBLA",188,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNBLA",189,0)
 D INIT^IBCNBLL,HDR^IBCNBLL
"RTN","IBCNBLA",190,0)
 ;
"RTN","IBCNBLA",191,0)
SELSORTX ;
"RTN","IBCNBLA",192,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",193,0)
 Q
"RTN","IBCNBLA",194,0)
 ;
"RTN","IBCNBLA",195,0)
TGLSCRN(IBBUFDA) ; toggle process screen from policy to insurance info, glbal variable IBCNSCRN contains ins co chosen
"RTN","IBCNBLA",196,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA",197,0)
 D FULL^VALM1
"RTN","IBCNBLA",198,0)
 W !!,"Enter an Insurance Company to display the Groups/Plans for that company or ",!,"enter Return to display a patient's policies.",!!
"RTN","IBCNBLA",199,0)
 S IBCNSCRN=+$$SELINS^IBCNBU1
"RTN","IBCNBLA",200,0)
 ;
"RTN","IBCNBLA",201,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",202,0)
 Q
"RTN","IBCNBLA",203,0)
 ;
"RTN","IBCNBLA",204,0)
AMCHK ; This procedure is called from the main buffer screen as an action
"RTN","IBCNBLA",205,0)
 ; to check the insurance company names in the buffer file.  This will
"RTN","IBCNBLA",206,0)
 ; invoke another ListMan screen that shows a list of all insurance 
"RTN","IBCNBLA",207,0)
 ; company names that do not exist in File 36 either as names or as
"RTN","IBCNBLA",208,0)
 ; synonyms and also they do not exist in the Auto Match file.  These
"RTN","IBCNBLA",209,0)
 ; are bad insurance company names that need to be corrected before
"RTN","IBCNBLA",210,0)
 ; electronic insurance verification attempts can be made.
"RTN","IBCNBLA",211,0)
 ; esg - 6/20/02 - SDD 5.1.11 - Add an action on the main buffer
"RTN","IBCNBLA",212,0)
 ;       screen to call the buffer names check option
"RTN","IBCNBLA",213,0)
 ;
"RTN","IBCNBLA",214,0)
 D EN^IBCNEAMC
"RTN","IBCNBLA",215,0)
 S VALMBCK="R"
"RTN","IBCNBLA",216,0)
AMCHKX ;
"RTN","IBCNBLA",217,0)
 Q
"RTN","IBCNBLA",218,0)
 ;
"RTN","IBCNBLA1")
0^28^B70930350
"RTN","IBCNBLA1",1,0)
IBCNBLA1 ;ALB/ARH-Ins Buffer: LM action calls (cont) ;1 Jun 97
"RTN","IBCNBLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,133,149,184**;21-MAR-94
"RTN","IBCNBLA1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLA1",4,0)
 ;
"RTN","IBCNBLA1",5,0)
ADDBUF ; add a new buffer entry protocol
"RTN","IBCNBLA1",6,0)
 N DIC,DIR,DIRUT,DUOUT,X,Y,IBIN,DFN,IBBUFDA,IBDATA,AMLIST
"RTN","IBCNBLA1",7,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",8,0)
 ;
"RTN","IBCNBLA1",9,0)
 ; Patient lookup
"RTN","IBCNBLA1",10,0)
 S DIC(0)="AEQM",DIC="^DPT(" D ^DIC Q:Y'>0  S DFN=+Y W !
"RTN","IBCNBLA1",11,0)
 ;
"RTN","IBCNBLA1",12,0)
 ; Insurance company lookup
"RTN","IBCNBLA1",13,0)
 S DIR("A")="Insurance Company",DIR(0)="FO^1:30"
"RTN","IBCNBLA1",14,0)
 S DIR("?",1)="Please enter the name of the insurance company that provides coverage for this"
"RTN","IBCNBLA1",15,0)
 S DIR("?",2)="patient.  This response is a free text response, however, a partial insurance"
"RTN","IBCNBLA1",16,0)
 S DIR("?")="company name look-up is available here."
"RTN","IBCNBLA1",17,0)
 D ^DIR K DIR Q:$D(DIRUT)  S IBIN=Y,Y=$$DICINS^IBCNBU1(Y,1,10) Q:Y<0  I Y'=0 S IBIN=Y
"RTN","IBCNBLA1",18,0)
 ;
"RTN","IBCNBLA1",19,0)
 ; ESG - 6/17/02 - Usage of Auto Match file when adding a buffer entry
"RTN","IBCNBLA1",20,0)
 ;     - SDD 5.1.3
"RTN","IBCNBLA1",21,0)
 ;
"RTN","IBCNBLA1",22,0)
 I Y=0,$$AMLOOK^IBCNEUT1(IBIN,1,.AMLIST) S Y=$$AMSEL^IBCNEUT1(.AMLIST) Q:Y<0  I Y'=0 S IBIN=Y
"RTN","IBCNBLA1",23,0)
 ;
"RTN","IBCNBLA1",24,0)
 S DIR(0)="Y",DIR("A")="Add a new Insurance Buffer entry for this patient and company",DIR("B")="YES" W ! D ^DIR K DIR Q:Y'=1
"RTN","IBCNBLA1",25,0)
 ;
"RTN","IBCNBLA1",26,0)
 S IBDATA(20.01)=$$UP^XLFSTR(IBIN),IBDATA(60.01)=DFN S IBBUFDA=+$$ADDSTF^IBCNBES(1,DFN,.IBDATA) K IBDATA Q:'IBBUFDA
"RTN","IBCNBLA1",27,0)
 ;
"RTN","IBCNBLA1",28,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBLA1",29,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",30,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",31,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",32,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))   ; symbol
"RTN","IBCNBLA1",33,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",34,0)
 ;
"RTN","IBCNBLA1",35,0)
 D INIT^IBCNBLL,HDR^IBCNBLL S VALMBCK="R"
"RTN","IBCNBLA1",36,0)
 Q
"RTN","IBCNBLA1",37,0)
 ;
"RTN","IBCNBLA1",38,0)
INSEDIT(IBBUFDA) ; edit the Insurance data of a buffer entry
"RTN","IBCNBLA1",39,0)
 ;
"RTN","IBCNBLA1",40,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",41,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",42,0)
 ;
"RTN","IBCNBLA1",43,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",44,0)
 Q
"RTN","IBCNBLA1",45,0)
 ;
"RTN","IBCNBLA1",46,0)
GRPEDIT(IBBUFDA) ; edit the Group/Plan data of a buffer entry
"RTN","IBCNBLA1",47,0)
 ;
"RTN","IBCNBLA1",48,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",49,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",50,0)
 ;
"RTN","IBCNBLA1",51,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R"
"RTN","IBCNBLA1",52,0)
 Q
"RTN","IBCNBLA1",53,0)
 ;
"RTN","IBCNBLA1",54,0)
POLEDIT(IBBUFDA) ; edit the Subscriber Policy data of a buffer entry
"RTN","IBCNBLA1",55,0)
 ;
"RTN","IBCNBLA1",56,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",57,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",58,0)
 ;
"RTN","IBCNBLA1",59,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",60,0)
 Q
"RTN","IBCNBLA1",61,0)
 ;
"RTN","IBCNBLA1",62,0)
ALLEDIT(IBBUFDA) ; edit All data of a buffer entry
"RTN","IBCNBLA1",63,0)
 ;
"RTN","IBCNBLA1",64,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",65,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",66,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",67,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",68,0)
 ;
"RTN","IBCNBLA1",69,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",70,0)
 Q
"RTN","IBCNBLA1",71,0)
 ;
"RTN","IBCNBLA1",72,0)
CMPEDIT(IBBUFDA) ; display a buffer entry and an existing ins entry for comparison, allow edit of buffer data
"RTN","IBCNBLA1",73,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",74,0)
 N IBDA,IBPOLDA,IBGRPDA,IBINSDA,DIR,DIRUT,X,Y
"RTN","IBCNBLA1",75,0)
 ;
"RTN","IBCNBLA1",76,0)
 D FULL^VALM1
"RTN","IBCNBLA1",77,0)
 ;
"RTN","IBCNBLA1",78,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX") I 'IBDA G CMPQ
"RTN","IBCNBLA1",79,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G CMPQ
"RTN","IBCNBLA1",80,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",81,0)
 ;
"RTN","IBCNBLA1",82,0)
CEINS W @IOF
"RTN","IBCNBLA1",83,0)
 I 'IBINSDA W !,"No Insurance Company Selected for Comparison."
"RTN","IBCNBLA1",84,0)
 W ! D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBLA1",85,0)
 S DIR("?")="The Buffer entry's Insurance Company data may be edited or Return advances the display to the Group/Plan data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBLA1",86,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",87,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",88,0)
 I Y'="","EEee"[Y D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA) G CEINS
"RTN","IBCNBLA1",89,0)
 ;
"RTN","IBCNBLA1",90,0)
CEGRP W @IOF
"RTN","IBCNBLA1",91,0)
 I 'IBGRPDA W !,"No Insurance Group/Plan Selected for Comparison."
"RTN","IBCNBLA1",92,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBLA1",93,0)
 W ! D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBLA1",94,0)
 S DIR("?")="The Buffer entry's Group/Plan data may be edited or Return advances the display to the Patient Policy data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBLA1",95,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",96,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",97,0)
 I Y'="","EEee"[Y D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA) G CEGRP
"RTN","IBCNBLA1",98,0)
 ;
"RTN","IBCNBLA1",99,0)
CEPOL W @IOF
"RTN","IBCNBLA1",100,0)
 I 'IBPOLDA W !,"No Patient Policy Selected for Comparison."
"RTN","IBCNBLA1",101,0)
 W ! D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",102,0)
 S DIR("?")="The Buffer entry's Patient Policy data may be edited or return to the screen display.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBLA1",103,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",104,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",105,0)
 I Y'="","EEee"[Y D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA) G CEPOL
"RTN","IBCNBLA1",106,0)
 ;
"RTN","IBCNBLA1",107,0)
CMPQ D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",108,0)
 Q
"RTN","IBCNBLA1",109,0)
 ;
"RTN","IBCNBLA1",110,0)
VERIFY(IBBUFDA) ; verify a buffer entry
"RTN","IBCNBLA1",111,0)
 ;
"RTN","IBCNBLA1",112,0)
 N DIR,DIRUT,X,Y,IBX,IBY Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",113,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",114,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",115,0)
 ;
"RTN","IBCNBLA1",116,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)),IBY="" I +$P(IBX,U,10) S IBY="Re-" W !!,"This entry already verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),"."
"RTN","IBCNBLA1",117,0)
 ;
"RTN","IBCNBLA1",118,0)
 S DIR("?")="Enter Yes if the coverage and information in this Buffer entry has been verified to be accurate." W !!
"RTN","IBCNBLA1",119,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")=IBY_"Verify the coverage in this buffer entry"
"RTN","IBCNBLA1",120,0)
 D ^DIR
"RTN","IBCNBLA1",121,0)
 I Y=1 D
"RTN","IBCNBLA1",122,0)
 . ; WCW - 04/11/2003 Clear out IIV Status when manually verified
"RTN","IBCNBLA1",123,0)
 . D CLEAR^IBCNEUT4(IBBUFDA,.IIVERR,1) K IIVERR
"RTN","IBCNBLA1",124,0)
 . K IBX S IBX(.1)="NOW",IBX(.11)=DUZ D EDITSTF^IBCNBES(IBBUFDA,.IBX)
"RTN","IBCNBLA1",125,0)
 . D INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED") W "  Coverage Verified ..." H 2
"RTN","IBCNBLA1",126,0)
 ;
"RTN","IBCNBLA1",127,0)
 Q
"RTN","IBCNBLA1",128,0)
 ;
"RTN","IBCNBLA1",129,0)
REJECT(IBBUFDA,DIRUT) ; process a reject and then delete a buffer entry
"RTN","IBCNBLA1",130,0)
 ; Output parameter DIRUT is optional and passed in by reference.  This
"RTN","IBCNBLA1",131,0)
 ; variable will be defined if the user enters a leading up-arrow,
"RTN","IBCNBLA1",132,0)
 ; times out, or enters a null response.  This is so the calling routine
"RTN","IBCNBLA1",133,0)
 ; can detect if the user did something other than say Yes or No to
"RTN","IBCNBLA1",134,0)
 ; this question.
"RTN","IBCNBLA1",135,0)
 ;
"RTN","IBCNBLA1",136,0)
 N DIR,X,Y,IBX Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",137,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",138,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",139,0)
 W !!,"This action will delete all insurance and patient specific data from a buffer ",!,"entry without first saving that data to the insurance files, leaving a stub ",!,"entry for reporting purposes.",!
"RTN","IBCNBLA1",140,0)
 ;
"RTN","IBCNBLA1",141,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",142,0)
 ;
"RTN","IBCNBLA1",143,0)
 S DIR("?")="Enter Yes to delete this buffer entry without saving any of it's data to the Insurance files."
"RTN","IBCNBLA1",144,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Reject this buffer entry (delete without saving to Insurance files)"
"RTN","IBCNBLA1",145,0)
 D ^DIR
"RTN","IBCNBLA1",146,0)
 I $D(DIRUT) G REJX
"RTN","IBCNBLA1",147,0)
 I Y=1 D REJECT^IBCNBAR(IBBUFDA) S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"REJECTED")
"RTN","IBCNBLA1",148,0)
REJX ;
"RTN","IBCNBLA1",149,0)
 Q
"RTN","IBCNBLA1",150,0)
 ;
"RTN","IBCNBLA1",151,0)
ACCEPT(IBBUFDA) ; process a buffer entry for acceptance
"RTN","IBCNBLA1",152,0)
 ;
"RTN","IBCNBLA1",153,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",154,0)
 N IBDA,IBINSDA,IBGRPDA,IBPOLDA,IBACCEPT S IBACCEPT=0
"RTN","IBCNBLA1",155,0)
 ;
"RTN","IBCNBLA1",156,0)
 D FULL^VALM1
"RTN","IBCNBLA1",157,0)
 ;
"RTN","IBCNBLA1",158,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX")
"RTN","IBCNBLA1",159,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G ACCPTQ
"RTN","IBCNBLA1",160,0)
 I +$P(IBDA,U,3),'$P(IBDA,U,2) W !!,"Error: the selected policy has no associated plan.  Can not continue." D WAIT^IBCNBUH G ACCPTQ
"RTN","IBCNBLA1",161,0)
 ;
"RTN","IBCNBLA1",162,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",163,0)
 S:'IBINSDA (IBGRPDA,IBPOLDA)=0 S:'IBGRPDA IBPOLDA=0
"RTN","IBCNBLA1",164,0)
 ;
"RTN","IBCNBLA1",165,0)
 I 'IBINSDA,'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) D  G ACCPTQ
"RTN","IBCNBLA1",166,0)
 . W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies."
"RTN","IBCNBLA1",167,0)
 . D WAIT^IBCNBUH
"RTN","IBCNBLA1",168,0)
 ;
"RTN","IBCNBLA1",169,0)
 S IBACCEPT=$$ACCEPT^IBCNBAA(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBLA1",170,0)
 ;
"RTN","IBCNBLA1",171,0)
ACCPTQ S VALMBCK="R" I +IBACCEPT S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"ACCEPTED")
"RTN","IBCNBLA1",172,0)
 Q
"RTN","IBCNBLA1",173,0)
 ;
"RTN","IBCNBLA1",174,0)
RESP(BUFF) ; List Response Report for Trace # associated with this entry
"RTN","IBCNBLA1",175,0)
 ; BUFF = buffer IEN
"RTN","IBCNBLA1",176,0)
 N NG,IBRSP,IBSTR,IBTRC,STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNBLA1",177,0)
 S NG=0
"RTN","IBCNBLA1",178,0)
 I $G(BUFF)="" S NG=1
"RTN","IBCNBLA1",179,0)
 I 'NG S IBRSP=$O(^IBCN(365,"AF",BUFF,"")) I IBRSP="" S NG=1
"RTN","IBCNBLA1",180,0)
 I 'NG S IBSTR=$G(^IBCN(365,IBRSP,0)),IBTRC=$P(IBSTR,U,9) I IBTRC="" S NG=1
"RTN","IBCNBLA1",181,0)
 I NG W !!,"This entry does not have an associated IIV response." D PAUSE^VALM1 G RESPX
"RTN","IBCNBLA1",182,0)
 S STOP=0,IBCNERTN="IBCNERP1",IBCNESPC("TRCN")=IBTRC_U_IBRSP
"RTN","IBCNBLA1",183,0)
 D R100^IBCNERP1
"RTN","IBCNBLA1",184,0)
RESPX S VALMBCK="R"
"RTN","IBCNBLA1",185,0)
 Q
"RTN","IBCNBLA2")
0^56^B13475042
"RTN","IBCNBLA2",1,0)
IBCNBLA2 ;DAOU/ESG - Ins Buffer, Multiple Selection ;09-SEP-2002
"RTN","IBCNBLA2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNBLA2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLA2",4,0)
 ;
"RTN","IBCNBLA2",5,0)
 ; Can't be called from the top
"RTN","IBCNBLA2",6,0)
 Q
"RTN","IBCNBLA2",7,0)
 ;
"RTN","IBCNBLA2",8,0)
 ;
"RTN","IBCNBLA2",9,0)
MULSEL(TMPARR,IBCNELST,GCNT) ; Multiple entry selection
"RTN","IBCNBLA2",10,0)
 ; This procedure is responsible for receiving multiple buffer entries
"RTN","IBCNBLA2",11,0)
 ; from the user.  It also validates and locks the selected buffer
"RTN","IBCNBLA2",12,0)
 ; entries.  It also reports any buffer entries that could not be
"RTN","IBCNBLA2",13,0)
 ; allocated and the reason why not.
"RTN","IBCNBLA2",14,0)
 ;
"RTN","IBCNBLA2",15,0)
 ; Parameters:
"RTN","IBCNBLA2",16,0)
 ;   TMPARR - scratch global input parameter
"RTN","IBCNBLA2",17,0)
 ; IBCNELST - output array of entries
"RTN","IBCNBLA2",18,0)
 ;            IBCNELST(entry#) = (OK? 0/1)^(error reason)^(buffer ien)
"RTN","IBCNBLA2",19,0)
 ;     GCNT - output; number of buffer entries the user got OK
"RTN","IBCNBLA2",20,0)
 ;
"RTN","IBCNBLA2",21,0)
 NEW OK,ERR,VALMY,IBSELN,IBBUFDA,IBY,TCNT
"RTN","IBCNBLA2",22,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA2",23,0)
 KILL IBCNELST
"RTN","IBCNBLA2",24,0)
 S (TCNT,GCNT)=0
"RTN","IBCNBLA2",25,0)
 I $G(TMPARR)="" G MULSELX
"RTN","IBCNBLA2",26,0)
 D EN^VALM2($G(XQORNOD(0)),"O")     ; ListMan generic selector
"RTN","IBCNBLA2",27,0)
 I '$D(VALMY) G MULSELX
"RTN","IBCNBLA2",28,0)
 S IBSELN=0
"RTN","IBCNBLA2",29,0)
 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D  S IBCNELST(IBSELN)=OK_U_ERR_U_IBBUFDA
"RTN","IBCNBLA2",30,0)
 . S TCNT=TCNT+1
"RTN","IBCNBLA2",31,0)
 . S OK=0,ERR="This entry is not valid or available."
"RTN","IBCNBLA2",32,0)
 . S IBBUFDA=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99) Q:'IBBUFDA
"RTN","IBCNBLA2",33,0)
 . S IBY=$P($G(^IBA(355.33,IBBUFDA,0)),U,4)    ; buffer status
"RTN","IBCNBLA2",34,0)
 . ;
"RTN","IBCNBLA2",35,0)
 . ; make sure buffer entry is still in an entered status
"RTN","IBCNBLA2",36,0)
 . I IBY'="E" S ERR="This entry has a status of "_$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN")_" and cannot be modified." Q
"RTN","IBCNBLA2",37,0)
 . ;
"RTN","IBCNBLA2",38,0)
 . ; attempt to lock the buffer entry
"RTN","IBCNBLA2",39,0)
 . I '$$LOCK^IBCNBU1(IBBUFDA,0,0) S ERR="Another user is currently editing this entry." Q
"RTN","IBCNBLA2",40,0)
 . ;
"RTN","IBCNBLA2",41,0)
 . ; at this point this entry is OK for processing
"RTN","IBCNBLA2",42,0)
 . S OK=1,ERR="",GCNT=GCNT+1
"RTN","IBCNBLA2",43,0)
 . Q
"RTN","IBCNBLA2",44,0)
 ;
"RTN","IBCNBLA2",45,0)
 ; Exit procedure if the user was able to get all entries
"RTN","IBCNBLA2",46,0)
 ; total requested = total allocated
"RTN","IBCNBLA2",47,0)
 I TCNT=GCNT G MULSELX
"RTN","IBCNBLA2",48,0)
 ;
"RTN","IBCNBLA2",49,0)
 ; At this point, some or all of the user selected entries are not
"RTN","IBCNBLA2",50,0)
 ; available; build and display a message.
"RTN","IBCNBLA2",51,0)
 W !!?3,$$MSG(TCNT,GCNT)
"RTN","IBCNBLA2",52,0)
 W !?3,"available for editing at this time:"
"RTN","IBCNBLA2",53,0)
 S IBSELN=0
"RTN","IBCNBLA2",54,0)
 F  S IBSELN=$O(IBCNELST(IBSELN)) Q:'IBSELN  I 'IBCNELST(IBSELN) D
"RTN","IBCNBLA2",55,0)
 . W !?6,"Entry ",IBSELN,": ",$P(IBCNELST(IBSELN),U,2)
"RTN","IBCNBLA2",56,0)
 . Q
"RTN","IBCNBLA2",57,0)
 ;
"RTN","IBCNBLA2",58,0)
 ; If the user was not able to get any entries, then kill the array
"RTN","IBCNBLA2",59,0)
 ; and get out
"RTN","IBCNBLA2",60,0)
 I 'GCNT KILL IBCNELST D PAUSE^VALM1 G MULSELX
"RTN","IBCNBLA2",61,0)
 ;
"RTN","IBCNBLA2",62,0)
 ; Ask the user if they want to continue
"RTN","IBCNBLA2",63,0)
 W !
"RTN","IBCNBLA2",64,0)
 S DIR(0)="Y",DIR("A")="   Do you want to continue anyway",DIR("B")="NO"
"RTN","IBCNBLA2",65,0)
 D ^DIR K DIR
"RTN","IBCNBLA2",66,0)
 I Y G MULSELX     ; user said Yes to continue so get out
"RTN","IBCNBLA2",67,0)
 ;
"RTN","IBCNBLA2",68,0)
 ; At this point the user doesn't want to continue, so we need to 
"RTN","IBCNBLA2",69,0)
 ; unlock any buffer entries that may have been locked and then kill
"RTN","IBCNBLA2",70,0)
 ; the array so no further processing happens
"RTN","IBCNBLA2",71,0)
 S IBSELN=0
"RTN","IBCNBLA2",72,0)
 F  S IBSELN=$O(IBCNELST(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA2",73,0)
 . I 'IBCNELST(IBSELN) Q               ; user could not get this one
"RTN","IBCNBLA2",74,0)
 . S IBBUFDA=$P(IBCNELST(IBSELN),U,3)  ; buffer ien
"RTN","IBCNBLA2",75,0)
 . D UNLOCK^IBCNBU1(IBBUFDA)           ; unlock it
"RTN","IBCNBLA2",76,0)
 . Q
"RTN","IBCNBLA2",77,0)
 KILL IBCNELST                         ; remove the array
"RTN","IBCNBLA2",78,0)
 ;
"RTN","IBCNBLA2",79,0)
MULSELX ;
"RTN","IBCNBLA2",80,0)
 Q
"RTN","IBCNBLA2",81,0)
 ;
"RTN","IBCNBLA2",82,0)
 ;
"RTN","IBCNBLA2",83,0)
MSG(TCNT,GCNT) ; build test message
"RTN","IBCNBLA2",84,0)
 ; This function builds the first line of the message when not all 
"RTN","IBCNBLA2",85,0)
 ; selected buffer entries are available.
"RTN","IBCNBLA2",86,0)
 ; TCNT - total number selected
"RTN","IBCNBLA2",87,0)
 ; GCNT - total number allocated to user successfully
"RTN","IBCNBLA2",88,0)
 NEW BCNT,MSG
"RTN","IBCNBLA2",89,0)
 S BCNT=TCNT-GCNT     ; number not available to the user
"RTN","IBCNBLA2",90,0)
 I TCNT=1,GCNT=0 S MSG="You selected one buffer entry, but it is not" G MSGX
"RTN","IBCNBLA2",91,0)
 I TCNT>1,GCNT=0 S MSG="You selected "_TCNT_" buffer entries, but none of them are" G MSGX
"RTN","IBCNBLA2",92,0)
 I BCNT=1 S MSG="You selected "_TCNT_" buffer entries, but one of them is not" G MSGX
"RTN","IBCNBLA2",93,0)
 S MSG="You selected "_TCNT_" buffer entries, but "_BCNT_" of them are not"
"RTN","IBCNBLA2",94,0)
MSGX ;
"RTN","IBCNBLA2",95,0)
 Q MSG
"RTN","IBCNBLA2",96,0)
 ;
"RTN","IBCNBLE")
0^30^B66092536
"RTN","IBCNBLE",1,0)
IBCNBLE ;ALB/ARH-Ins Buffer: LM buffer entry screen ;1 Jun 97
"RTN","IBCNBLE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,231,184**;21-MAR-94
"RTN","IBCNBLE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLE",4,0)
 ;
"RTN","IBCNBLE",5,0)
EN ; - main entry point for list manager display
"RTN","IBCNBLE",6,0)
 N DFN
"RTN","IBCNBLE",7,0)
 D EN^VALM("IBCNB INSURANCE BUFFER ENTRY")
"RTN","IBCNBLE",8,0)
 Q
"RTN","IBCNBLE",9,0)
 ;
"RTN","IBCNBLE",10,0)
HDR ; - header code for list manager display
"RTN","IBCNBLE",11,0)
 N IBX,IB0,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLE",12,0)
 I +$G(DFN) D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLE",13,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLE",14,0)
 S IB0=$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNBLE",15,0)
 S IBX=$E($P($G(^VA(200,+$P(IB0,U,2),0)),U,1),1,27)_" ("_$E($$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3)),1,11)_")"
"RTN","IBCNBLE",16,0)
 S IBX="Buffer entry created on "_$$DATE(+IB0)_" by "_IBX,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",17,0)
 S VALMHDR(2)=IBX
"RTN","IBCNBLE",18,0)
 S IBX="" I +$P(IB0,U,10) S IBX="Buffer entry verified on "_$$DATE(+$P(IB0,U,10))_" by "_$E($P($G(^VA(200,+$P(IB0,U,11),0)),U,1),1,27),IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",19,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLE",20,0)
 Q
"RTN","IBCNBLE",21,0)
 ;
"RTN","IBCNBLE",22,0)
INIT ; - initialization of list manager screen, ifn of record to display required IBBUFDA
"RTN","IBCNBLE",23,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",24,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLE",25,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLE",26,0)
 D BLD
"RTN","IBCNBLE",27,0)
 Q
"RTN","IBCNBLE",28,0)
 ;
"RTN","IBCNBLE",29,0)
HELP ; - help text for list manager screen
"RTN","IBCNBLE",30,0)
 D FULL^VALM1
"RTN","IBCNBLE",31,0)
 W !!,"This screen displays all data in a Buffer File entry."
"RTN","IBCNBLE",32,0)
 W !!,"The actions allow editing of all data and verification of coverage."
"RTN","IBCNBLE",33,0)
 W !!,"It is not necessary to use the Verify Entry action, this action is optional.",!,"If the Verify Entry action is not used, the policy will be automatically flagged",!,"as verified when it is Accepted and stored in the main Insurance files."
"RTN","IBCNBLE",34,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLE",35,0)
 Q
"RTN","IBCNBLE",36,0)
 ;
"RTN","IBCNBLE",37,0)
EXIT ; - exit list manager screen
"RTN","IBCNBLE",38,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",39,0)
 D CLEAR^VALM1
"RTN","IBCNBLE",40,0)
 Q
"RTN","IBCNBLE",41,0)
 ;
"RTN","IBCNBLE",42,0)
BLD ; display buffer entry
"RTN","IBCNBLE",43,0)
 N IB0,IB20,IB40,IB60,IB61,IBL,IBLINE,ADDR,IBI,IBY
"RTN","IBCNBLE",44,0)
 S VALMCNT=0
"RTN","IBCNBLE",45,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40)),IB60=$G(^IBA(355.33,IBBUFDA,60)),IB61=$G(^IBA(355.33,IBBUFDA,61))
"RTN","IBCNBLE",46,0)
 ;
"RTN","IBCNBLE",47,0)
 D SET(" ") S IBY=$J("",26)_"Insurance Company Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",48,0)
 S IBL="Name: ",IBY=$P(IB20,U,1) S IBLINE=$$SETL("",IBY,IBL,10,30)
"RTN","IBCNBLE",49,0)
 S IBL="Reimburse?: ",IBY=$$EXPAND^IBTRE(355.33,20.05,$P(IB20,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",50,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",51,0)
 S IBL="Phone: ",IBY=$P(IB20,U,2) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,20)
"RTN","IBCNBLE",52,0)
 S IBL="Billing Phone: ",IBY=$P(IB20,U,3) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",53,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",54,0)
 S IBL="Precert Phone: ",IBY=$P(IB20,U,4) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",55,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",56,0)
 S IBL="Remote Query From: ",IBY=$$EXTERNAL^DILFD(355.33,.14,"",$P(IB0,"^",14)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",57,0)
 D SET(IBLINE) S IBLINE="" D ADDR(21,1)
"RTN","IBCNBLE",58,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69)
"RTN","IBCNBLE",59,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",60,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",61,0)
 ;
"RTN","IBCNBLE",62,0)
 D SET(" ") S IBY=$J("",29)_"Group/Plan Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",63,0)
 S IBL="Group Plan?: ",IBY=$$YN($P(IB40,U,1)) S IBLINE=$$SETL("",IBY,IBL,16,3)
"RTN","IBCNBLE",64,0)
 S IBL="Require UR: ",IBY=$$YN($P(IB40,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",65,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",66,0)
 S IBL="Group Name: ",IBY=$P(IB40,U,2) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",67,0)
 S IBL="Require Amb Cert: ",IBY=$$YN($P(IB40,U,6)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",68,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",69,0)
 S IBL="Group Number: ",IBY=$P(IB40,U,3) S IBLINE=$$SETL("",IBY,IBL,16,17)
"RTN","IBCNBLE",70,0)
 S IBL="Require Pre-Cert: ",IBY=$$YN($P(IB40,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",71,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",72,0)
 S IBL="Type of Plan: ",IBY=$P($G(^IBE(355.1,+$P(IB40,U,9),0)),U,1) S IBLINE=$$SETL("",IBY,IBL,16,25)
"RTN","IBCNBLE",73,0)
 S IBL="Exclude Pre-Cond: ",IBY=$$YN($P(IB40,U,7)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",74,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",75,0)
 S IBL="Benefits Assignable: ",IBY=$$YN($P(IB40,U,8)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",76,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",77,0)
 ;
"RTN","IBCNBLE",78,0)
 D SET(" ") S IBY=$J("",26)_"Policy/Subscriber Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",79,0)
 S IBL="Whose Insurance: ",IBY=$$EXPAND^IBTRE(355.33,60.05,$P(IB60,U,5)) S IBLINE=$$SETL("",IBY,IBL,18,7)
"RTN","IBCNBLE",80,0)
 S IBL="Effective: ",IBY=$$DATE($P(IB60,U,2)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,8)
"RTN","IBCNBLE",81,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",82,0)
 S IBL="Insured's Name: ",IBY=$P(IB60,U,7) S IBLINE=$$SETL("",IBY,IBL,18,30)
"RTN","IBCNBLE",83,0)
 S IBL="Expiration: ",IBY=$$DATE($P(IB60,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",84,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",85,0)
 S IBL="Subscriber Id: ",IBY=$P(IB60,U,4) S IBLINE=$$SETL("",IBY,IBL,18,20)
"RTN","IBCNBLE",86,0)
 S IBL="Primary Provider: ",IBY=$P(IB60,U,10) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",87,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",88,0)
 S IBL="Relationship: ",IBY=$$EXPAND^IBTRE(355.33,60.06,$P(IB60,U,6)) S IBLINE=$$SETL("",IBY,IBL,18,16)
"RTN","IBCNBLE",89,0)
 S IBL="Provider Phone: ",IBY=$P(IB60,U,11) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",90,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",91,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,8)'="") S IBL="Insured's DOB: ",IBY=$$DATE($P(IB60,U,8)) S IBLINE=$$SETL("",IBY,IBL,18,8)
"RTN","IBCNBLE",92,0)
 S IBL="Coord of Benefits: ",IBY=$$EXPAND^IBTRE(355.33,60.12,$P(IB60,U,12)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",93,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",94,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,9)'="") S IBL="Insured's SSN: ",IBY=$P(IB60,U,9) S IBLINE=$$SETL("",IBY,IBL,18,13)
"RTN","IBCNBLE",95,0)
 I IBLINE'="" D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",96,0)
 ;
"RTN","IBCNBLE",97,0)
 I '$P(IB61,U,1) D SET(" ") S IBL="Employer Sponsored Group Health Plan?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,40,3) D SET(IBLINE) S IBLINE="" G NXT
"RTN","IBCNBLE",98,0)
 ;
"RTN","IBCNBLE",99,0)
 D ADDR(61,6)
"RTN","IBCNBLE",100,0)
 D SET(" ") S IBY=$J("",24)_"Subscriber's Employer Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",101,0)
 S IBL="Employer Sponsored?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",102,0)
 S IBL="Employment Status: ",IBY=$$EXPAND^IBTRE(355.33,61.03,$P(IB61,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",103,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",104,0)
 S IBL="Claim to Employer: ",IBY=$$YN($P(IB61,U,5)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",105,0)
 S IBL="Retirement Date: ",IBY=$$DATE($P(IB61,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,8)
"RTN","IBCNBLE",106,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",107,0)
 S IBL="Employer Name: ",IBY=$P(IB61,U,2) S IBLINE=$$SETL("",IBY,IBL,16,30)
"RTN","IBCNBLE",108,0)
 S IBL="Employer Phone: ",IBY=$P(IB61,U,12) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",109,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",110,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64)
"RTN","IBCNBLE",111,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",112,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",113,0)
 ;
"RTN","IBCNBLE",114,0)
NXT ;
"RTN","IBCNBLE",115,0)
 D SET(" ") S IBY=$J("",26)_"Buffer Entry Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",116,0)
 S IBL="Date Entered: ",IBY=$$FMTE^XLFDT($P(IB0,U,1),2) S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",117,0)
 S IBL="Date Verified: ",IBY=$$FMTE^XLFDT($P(IB0,U,10),2) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",118,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",119,0)
 S IBL="Entered By: ",IBY=$$EXPAND^IBTRE(355.33,.02,$P(IB0,U,2)) S IBLINE=$$SETL("",IBY,IBL,18,40)
"RTN","IBCNBLE",120,0)
 S IBL="Verified By: ",IBY=$$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",121,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",122,0)
 ;
"RTN","IBCNBLE",123,0)
 ; esg - 6/25/02   SDD 5.1.2 - modifications to Expand Entry for IIV
"RTN","IBCNBLE",124,0)
 ; move source down one line, eIIV trace # to the left column and add
"RTN","IBCNBLE",125,0)
 ; eIIV processed date to the right column
"RTN","IBCNBLE",126,0)
 ;
"RTN","IBCNBLE",127,0)
 S IBLINE=$$TRACE(IBLINE,IBBUFDA)       ; eIIV trace #
"RTN","IBCNBLE",128,0)
 S IBL="eIIV Processed Date: ",IBY=$S($P(IB0,U,15)="":"",1:$$FMTE^XLFDT($P(IB0,U,15),"2M"))
"RTN","IBCNBLE",129,0)
 S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",130,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",131,0)
 S IBL="Source: ",IBY=$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBLE",132,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",133,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",134,0)
 ;
"RTN","IBCNBLE",135,0)
 ; Call another routine for continuation of list build
"RTN","IBCNBLE",136,0)
 D BLD^IBCNBLE1
"RTN","IBCNBLE",137,0)
 ;
"RTN","IBCNBLE",138,0)
BLDQ Q
"RTN","IBCNBLE",139,0)
 ;
"RTN","IBCNBLE",140,0)
 ;
"RTN","IBCNBLE",141,0)
SETL(LINE,DATA,LABEL,COL,LNG) ;
"RTN","IBCNBLE",142,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNBLE",143,0)
 Q LINE
"RTN","IBCNBLE",144,0)
 ;
"RTN","IBCNBLE",145,0)
SET(LINE,SPEC) ;
"RTN","IBCNBLE",146,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLE",147,0)
 S ^TMP("IBCNBLE",$J,VALMCNT,0)=LINE
"RTN","IBCNBLE",148,0)
 I $G(SPEC)="B" D CNTRL^VALM10(VALMCNT,1,80,IOINHI,IOINORM)
"RTN","IBCNBLE",149,0)
 Q
"RTN","IBCNBLE",150,0)
 ;
"RTN","IBCNBLE",151,0)
DATE(X) ;
"RTN","IBCNBLE",152,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLE",153,0)
 Q Y
"RTN","IBCNBLE",154,0)
 ;
"RTN","IBCNBLE",155,0)
YN(X) ;
"RTN","IBCNBLE",156,0)
 N Y S X=$G(X),Y=$S(X=1:"Yes",X=0:"No",1:"")
"RTN","IBCNBLE",157,0)
 Q Y
"RTN","IBCNBLE",158,0)
 ;
"RTN","IBCNBLE",159,0)
ADDR(NODE,FLD) ; format address for output
"RTN","IBCNBLE",160,0)
 N IBY,IB0,IBCS,IBST,IBZIP,IBJ,IBZ,IBX K ADDR S ADDR(1)=""
"RTN","IBCNBLE",161,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,NODE))
"RTN","IBCNBLE",162,0)
 S IBCS=$P(IB0,U,FLD+3),IBST=$P($G(^DIC(5,+$P(IB0,U,FLD+4),0)),U,2),IBZIP=$P(IB0,U,FLD+5)
"RTN","IBCNBLE",163,0)
 S IBZIP=$E(IBZIP,1,5)_$S($E(IBZIP,6,9)'="":"-"_$E(IBZIP,6,9),1:"")
"RTN","IBCNBLE",164,0)
 S IBST=IBST_$S(IBST=""!(IBZIP=""):"",1:"  ")_IBZIP
"RTN","IBCNBLE",165,0)
 S IBCS=IBCS_$S(IBCS=""!(IBST=""):"",1:", ")_IBST
"RTN","IBCNBLE",166,0)
 ;
"RTN","IBCNBLE",167,0)
 S IBJ=1 F IBY=$P(IB0,U,FLD),$P(IB0,U,(FLD+1)),$P(IB0,U,(FLD+2)),IBCS I IBY'="" S IBX=$G(ADDR(IBJ)),IBZ=", " D
"RTN","IBCNBLE",168,0)
 . S:IBX="" IBZ="" S:($L(IBX)+2+$L(IBY))>64 IBZ="",IBJ=IBJ+1
"RTN","IBCNBLE",169,0)
 . S ADDR(IBJ)=$G(ADDR(IBJ))_IBZ_IBY
"RTN","IBCNBLE",170,0)
 Q
"RTN","IBCNBLE",171,0)
 ;
"RTN","IBCNBLE",172,0)
TRACE(IBLINE,IBBUFDA) ; Add the eIIV Trace Number to the display
"RTN","IBCNBLE",173,0)
 NEW RESP,TRACENUM,IBL,IBY
"RTN","IBCNBLE",174,0)
 I '$G(IBBUFDA) G TRACEX
"RTN","IBCNBLE",175,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)          ; response ien
"RTN","IBCNBLE",176,0)
 S TRACENUM=""
"RTN","IBCNBLE",177,0)
 I RESP S TRACENUM=$P($G(^IBCN(365,RESP,0)),U,9)   ; trace# field
"RTN","IBCNBLE",178,0)
 S IBL="eIIV Trace #: ",IBY=TRACENUM               ; field label/data
"RTN","IBCNBLE",179,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)             ; add it
"RTN","IBCNBLE",180,0)
TRACEX ;
"RTN","IBCNBLE",181,0)
 Q IBLINE
"RTN","IBCNBLE",182,0)
 ;
"RTN","IBCNBLE1")
0^31^B25530328
"RTN","IBCNBLE1",1,0)
IBCNBLE1 ;DAOU/ESG - Ins Buffer, Expand Entry, con't ;25-JUN-2002
"RTN","IBCNBLE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNBLE1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLE1",4,0)
 ;
"RTN","IBCNBLE1",5,0)
 ; Can't be called from the top
"RTN","IBCNBLE1",6,0)
 Q
"RTN","IBCNBLE1",7,0)
 ;
"RTN","IBCNBLE1",8,0)
BLD ; Continuation of Expand Entry list build procedure
"RTN","IBCNBLE1",9,0)
 ; --- Called by IBCNBLE
"RTN","IBCNBLE1",10,0)
 ;
"RTN","IBCNBLE1",11,0)
 NEW ERR,MSG,IBL,IBY,IBLINE,IBER,IBLN,EDITED,ORIGSYME,ORIGSYMI,EEUPDATE
"RTN","IBCNBLE1",12,0)
 NEW ORIGSYMS
"RTN","IBCNBLE1",13,0)
 ;
"RTN","IBCNBLE1",14,0)
 ; save the external and internal IIV status values
"RTN","IBCNBLE1",15,0)
 S ORIGSYMS=$$SYMBOL^IBCNBLL(IBBUFDA)
"RTN","IBCNBLE1",16,0)
 S ORIGSYME=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",17,0)
 S ORIGSYMI=$P(IB0,U,12)
"RTN","IBCNBLE1",18,0)
 ;
"RTN","IBCNBLE1",19,0)
 ; Determine if Expand Entry is allowed to update the IIV Status
"RTN","IBCNBLE1",20,0)
 S EEUPDATE=1    ; default Expand Entry update flag to true
"RTN","IBCNBLE1",21,0)
 I ORIGSYMI,'$P($G(^IBE(365.15,ORIGSYMI,0)),U,3) S EEUPDATE=0
"RTN","IBCNBLE1",22,0)
 ;
"RTN","IBCNBLE1",23,0)
 ; Do not update the IIV status if manually verified
"RTN","IBCNBLE1",24,0)
 I ORIGSYMS="*" S EEUPDATE=0
"RTN","IBCNBLE1",25,0)
 ;
"RTN","IBCNBLE1",26,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLE1",27,0)
 ; invoke the function that trys to find a valid payer
"RTN","IBCNBLE1",28,0)
 I EEUPDATE D
"RTN","IBCNBLE1",29,0)
 . S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1,.MSG)
"RTN","IBCNBLE1",30,0)
 . ; If no errors, then remove the IIV Status
"RTN","IBCNBLE1",31,0)
 . I 'ERR S ERR=$$SIDERR(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLE1",32,0)
 . I 'ERR D CLEAR^IBCNEUT4(IBBUFDA,.EDITED)
"RTN","IBCNBLE1",33,0)
 . ; If errors found, then update with the new IIV Status
"RTN","IBCNBLE1",34,0)
 . I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1)) S EDITED=1
"RTN","IBCNBLE1",35,0)
 . ; refresh the IB0 variable for the possible symbol change
"RTN","IBCNBLE1",36,0)
 . S $P(IB0,U,12)=$P($G(^IBA(355.33,IBBUFDA,0)),U,12)
"RTN","IBCNBLE1",37,0)
 . Q
"RTN","IBCNBLE1",38,0)
 ;
"RTN","IBCNBLE1",39,0)
 ; Possibly display information if the OVERRIDE FRESHNESS FLAG is on
"RTN","IBCNBLE1",40,0)
 I $P(IB0,U,13) D
"RTN","IBCNBLE1",41,0)
 . S IBL="User Requested Inquiry?: ",IBY="YES"
"RTN","IBCNBLE1",42,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,3)
"RTN","IBCNBLE1",43,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",44,0)
 . Q
"RTN","IBCNBLE1",45,0)
 ;
"RTN","IBCNBLE1",46,0)
 ; Display the Current Status line
"RTN","IBCNBLE1",47,0)
 S IBL="Current IIV Status: "
"RTN","IBCNBLE1",48,0)
 S IBY=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",49,0)
 I IBY="",$$SYMBOL^IBCNBLL(IBBUFDA)'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",50,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" S IBY="Manually verified, No IIV activity at this time"
"RTN","IBCNBLE1",51,0)
 S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",52,0)
 D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",53,0)
 ;
"RTN","IBCNBLE1",54,0)
 ; Display the current IIV Status generic description
"RTN","IBCNBLE1",55,0)
 D SYMTXT($P(IB0,U,12))
"RTN","IBCNBLE1",56,0)
 ;
"RTN","IBCNBLE1",57,0)
 ; Display any text returned by the payer function
"RTN","IBCNBLE1",58,0)
 F IBER=1:1:$G(MSG) D SET^IBCNBLE(" ") F IBLN=1:1:$P($G(MSG(IBER)),U,2) D SET^IBCNBLE("  "_$G(MSG(IBER,IBLN)))
"RTN","IBCNBLE1",59,0)
 ;
"RTN","IBCNBLE1",60,0)
 ; If the IIV Status ien changed from what it once was, then display the
"RTN","IBCNBLE1",61,0)
 ; Prior Status line
"RTN","IBCNBLE1",62,0)
 I ORIGSYMI'=$P(IB0,U,12) D
"RTN","IBCNBLE1",63,0)
 . I $P(IB0,U,12) D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",64,0)
 . S IBL="Prior Status: "
"RTN","IBCNBLE1",65,0)
 . S IBY=ORIGSYME
"RTN","IBCNBLE1",66,0)
 . I IBY="",ORIGSYMS'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",67,0)
 . I ORIGSYMS="*" S IBY="Manually verified, No IIV activity at this time"
"RTN","IBCNBLE1",68,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",69,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",70,0)
 . D SYMTXT(ORIGSYMI)
"RTN","IBCNBLE1",71,0)
 . Q
"RTN","IBCNBLE1",72,0)
 ;
"RTN","IBCNBLE1",73,0)
 ; Display any existing EC errors
"RTN","IBCNBLE1",74,0)
 D ECERR
"RTN","IBCNBLE1",75,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",76,0)
 ;
"RTN","IBCNBLE1",77,0)
 ; If the IIV Status was modified then refresh the visual display
"RTN","IBCNBLE1",78,0)
 I $G(EDITED) D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLE1",79,0)
BLDX ;
"RTN","IBCNBLE1",80,0)
 Q
"RTN","IBCNBLE1",81,0)
 ;
"RTN","IBCNBLE1",82,0)
SYMTXT(IEN) ; Display the text from the IIV symbol file for this entry
"RTN","IBCNBLE1",83,0)
 NEW IBJ
"RTN","IBCNBLE1",84,0)
 I '$G(IEN) G SYMX
"RTN","IBCNBLE1",85,0)
 I '$P($G(^IBE(365.15,IEN,1,0)),U,4) G SYMX
"RTN","IBCNBLE1",86,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",87,0)
 S IBJ=0
"RTN","IBCNBLE1",88,0)
 F  S IBJ=$O(^IBE(365.15,IEN,1,IBJ)) Q:'IBJ  D SET^IBCNBLE("  "_$G(^IBE(365.15,IEN,1,IBJ,0)))
"RTN","IBCNBLE1",89,0)
SYMX ;
"RTN","IBCNBLE1",90,0)
 Q
"RTN","IBCNBLE1",91,0)
 ;
"RTN","IBCNBLE1",92,0)
ECERR ; Display the Eligibility Communicator Error data from the
"RTN","IBCNBLE1",93,0)
 ; response file if it exists
"RTN","IBCNBLE1",94,0)
 ;
"RTN","IBCNBLE1",95,0)
 NEW RESP,RESPDATA,ERRTXT,IBY,IBLINE,ERRDATA,FUTDT,TQIEN
"RTN","IBCNBLE1",96,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",97,0)
 I 'RESP G ECERRX
"RTN","IBCNBLE1",98,0)
 S RESPDATA=$G(^IBCN(365,RESP,1))
"RTN","IBCNBLE1",99,0)
 S ERRTXT=$P($G(^IBCN(365,RESP,4)),U,1)
"RTN","IBCNBLE1",100,0)
 S TQIEN=+$P($G(^IBCN(365,RESP,0)),U,5)    ; Trans Queue file ien
"RTN","IBCNBLE1",101,0)
 S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9)  ; Future date to transmit
"RTN","IBCNBLE1",102,0)
 I '$P(RESPDATA,U,14),'$P(RESPDATA,U,15),ERRTXT="",'FUTDT G ECERRX
"RTN","IBCNBLE1",103,0)
 ;
"RTN","IBCNBLE1",104,0)
 ; At this point, we know there's something to get displayed
"RTN","IBCNBLE1",105,0)
 ;
"RTN","IBCNBLE1",106,0)
 ; Display section header
"RTN","IBCNBLE1",107,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",108,0)
 S IBY=$J("",19)_"Eligibility Communicator Error Information"
"RTN","IBCNBLE1",109,0)
 D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",110,0)
 ;
"RTN","IBCNBLE1",111,0)
 ; Display Error Condition data - field# 1.14
"RTN","IBCNBLE1",112,0)
 I $P(RESPDATA,U,14) D
"RTN","IBCNBLE1",113,0)
 . S ERRDATA=$G(^IBE(365.017,$P(RESPDATA,U,14),0))
"RTN","IBCNBLE1",114,0)
 . S IBLINE=$J($P(ERRDATA,U,1),3)_": "_$P(ERRDATA,U,2)
"RTN","IBCNBLE1",115,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",116,0)
 . Q
"RTN","IBCNBLE1",117,0)
 ;
"RTN","IBCNBLE1",118,0)
 ; Display Error Action data - field# 1.15
"RTN","IBCNBLE1",119,0)
 I $P(RESPDATA,U,15) D
"RTN","IBCNBLE1",120,0)
 . S ERRDATA=$G(^IBE(365.018,$P(RESPDATA,U,15),0))
"RTN","IBCNBLE1",121,0)
 . S IBLINE=$J($P(ERRDATA,U,1),3)_": "_$P(ERRDATA,U,2)
"RTN","IBCNBLE1",122,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",123,0)
 . Q
"RTN","IBCNBLE1",124,0)
 ;
"RTN","IBCNBLE1",125,0)
 ; Display Error Text data - field# 4.01
"RTN","IBCNBLE1",126,0)
 I ERRTXT'="" D SET^IBCNBLE(ERRTXT)
"RTN","IBCNBLE1",127,0)
 ;
"RTN","IBCNBLE1",128,0)
 ; Display Date of Future Transmission - field# .09 in file 365.1
"RTN","IBCNBLE1",129,0)
 I FUTDT D
"RTN","IBCNBLE1",130,0)
 . S FUTDT=$$FMTE^XLFDT(FUTDT,"5Z")
"RTN","IBCNBLE1",131,0)
 . D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",132,0)
 . S IBLINE="     Date of Future Transmission:  "_FUTDT
"RTN","IBCNBLE1",133,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",134,0)
 . Q
"RTN","IBCNBLE1",135,0)
ECERRX ;
"RTN","IBCNBLE1",136,0)
 Q
"RTN","IBCNBLE1",137,0)
 ;
"RTN","IBCNBLE1",138,0)
SIDERR(BUF,PIEN) ;
"RTN","IBCNBLE1",139,0)
 ; If Subscriber ID is required and SSN cannot be substituted
"RTN","IBCNBLE1",140,0)
 ; and buffer does not have a sub id -> return error
"RTN","IBCNBLE1",141,0)
 ; BUF = buffer IEN
"RTN","IBCNBLE1",142,0)
 ; PIEN = payer IEN
"RTN","IBCNBLE1",143,0)
 ;
"RTN","IBCNBLE1",144,0)
 N ERR,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN
"RTN","IBCNBLE1",145,0)
 S ERR=""
"RTN","IBCNBLE1",146,0)
 S SID=$P($G(^IBA(355.33,BUF,60)),U,4)
"RTN","IBCNBLE1",147,0)
 I SID]"" G SIDX ; Subscriber id is populated, further checking is moot
"RTN","IBCNBLE1",148,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNBLE1",149,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNBLE1",150,0)
 S SIDREQ=$P(SIDSTR,U,8) I 'SIDREQ G SIDX ; if sub id is not req'd - ok
"RTN","IBCNBLE1",151,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNBLE1",152,0)
 I 'SIDSSN S ERR=18 ; if ssn cannot be used -> B15 status (IEN = 18)
"RTN","IBCNBLE1",153,0)
SIDX Q ERR
"RTN","IBCNBLE1",154,0)
 ;
"RTN","IBCNBLL")
0^6^B54036593
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH-Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184**;21-MAR-94
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",6,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",7,0)
 Q
"RTN","IBCNBLL",8,0)
 ;
"RTN","IBCNBLL",9,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",10,0)
 S VALMHDR(1)="Buffer File entries not yet processed."
"RTN","IBCNBLL",11,0)
 S VALMHDR(1)=VALMHDR(1)_"   (sorted by "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",12,0)
 I $P(IBCNSORT,U,3)="" S VALMHDR(1)=VALMHDR(1)_")"
"RTN","IBCNBLL",13,0)
 E  S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first)"
"RTN","IBCNBLL",14,0)
 Q
"RTN","IBCNBLL",15,0)
 ;
"RTN","IBCNBLL",16,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",17,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS")
"RTN","IBCNBLL",18,0)
 I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",19,0)
 D BLD
"RTN","IBCNBLL",20,0)
 Q
"RTN","IBCNBLL",21,0)
 ;
"RTN","IBCNBLL",22,0)
HELP ;  list manager help
"RTN","IBCNBLL",23,0)
 D FULL^VALM1
"RTN","IBCNBLL",24,0)
 W @IOF
"RTN","IBCNBLL",25,0)
 W !,"This screen lists all Insurance plans and policies in the Insurance Buffer",!,"that have not yet been processed (accepted or rejected).",!
"RTN","IBCNBLL",26,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:",!,"   i - Patient has other currently effective Insurance",!,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",27,0)
 W !,"   E - Patient has Expired",!,"   Y - Means Test Copay Patient",!,"   H - Patient has Bills On Hold",!,"   * - Buffer entry Verified"
"RTN","IBCNBLL",28,0)
 ;
"RTN","IBCNBLL",29,0)
 ; ESG - 6/7/02 - SDD 5.1.9
"RTN","IBCNBLL",30,0)
 ; Help screen description of new symbols
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
 W !!,"IIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",33,0)
 W !,"  The following IIV Status indicators may appear to the left of the"
"RTN","IBCNBLL",34,0)
 W !,"  patient name:" ; removed blanks
"RTN","IBCNBLL",35,0)
 W !,"   + - Insurance information was positively verified via electronic inquiry" ; removed blanks
"RTN","IBCNBLL",36,0)
 W !,"   ? - Electronic inquiry was sent and awaiting a reply"
"RTN","IBCNBLL",37,0)
 W !,"   ! - Unable to electronically verify the insurance information"
"RTN","IBCNBLL",38,0)
 W !,"           Insurance Company identification may be a problem"
"RTN","IBCNBLL",39,0)
 W !,"           Manual intervention may be required"
"RTN","IBCNBLL",40,0)
 W !,"           Please use the Expand Entry option to see more information"
"RTN","IBCNBLL",41,0)
 W !,"   - - Insurance company denied carrying the patient's insurance"
"RTN","IBCNBLL",42,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",43,0)
 W !!,"When an entry is Processed it is either:"
"RTN","IBCNBLL",44,0)
 W !,?3,"Accepted - the Buffer entry's data is stored in the main Insurance files.",!,?12,"- the modified Insurance entry is flagged as Verified.",!,?3,"Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",45,0)
 W !!,"Once an entry is processed (either accepted or rejected) most of the data in ",!,"the Buffer File entry is deleted leaving only a stub entry for tracking ",!,"and reporting purposes."
"RTN","IBCNBLL",46,0)
 W !!,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",47,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLL",48,0)
 Q
"RTN","IBCNBLL",49,0)
 ;
"RTN","IBCNBLL",50,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",51,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",52,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",53,0)
 Q
"RTN","IBCNBLL",54,0)
 ;
"RTN","IBCNBLL",55,0)
BLD ;  build screen display
"RTN","IBCNBLL",56,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",57,0)
 ;
"RTN","IBCNBLL",58,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",59,0)
 ;
"RTN","IBCNBLL",60,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",61,0)
 . S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",62,0)
 ..  S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",63,0)
 ...  ;
"RTN","IBCNBLL",64,0)
 ...  S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",65,0)
 ...  S IBLINE=$$BLDLN(IBBUFDA,IBCNT)
"RTN","IBCNBLL",66,0)
 ...  D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",67,0)
 ;
"RTN","IBCNBLL",68,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",69,0)
 Q
"RTN","IBCNBLL",70,0)
 ;
"RTN","IBCNBLL",71,0)
BLDLN(IBBUFDA,IBCNT) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",72,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",73,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",74,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",75,0)
 ;
"RTN","IBCNBLL",76,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",77,0)
 ;
"RTN","IBCNBLL",78,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",79,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",80,0)
 ;
"RTN","IBCNBLL",81,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",82,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,16)
"RTN","IBCNBLL",83,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,23,4)
"RTN","IBCNBLL",84,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,29,17)
"RTN","IBCNBLL",85,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,48,10)
"RTN","IBCNBLL",86,0)
 S IBY=$$SOURCE($P(IB0,U,3)),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,60,4)
"RTN","IBCNBLL",87,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",88,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",89,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",90,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",91,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",92,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",93,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",94,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",95,0)
 Q IBLINE
"RTN","IBCNBLL",96,0)
 ;
"RTN","IBCNBLL",97,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",98,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",99,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",100,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",101,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",102,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",103,0)
 Q
"RTN","IBCNBLL",104,0)
 ;
"RTN","IBCNBLL",105,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",106,0)
 ;  1^PATIENT NAME, 2^INS NAME, 3^SOURCE OF INFO, 4^DATE ENTERED, 5^INPATIENT (Y/N), 6^MEANS TEST (Y/N), 7^ON HOLD, 8^VERIFIED, 9^IIV STATUS
"RTN","IBCNBLL",107,0)
 N IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,DFN,VAIN,VA,VAERR,IBX,IBCNT,X,Y S IBCNT=0
"RTN","IBCNBLL",108,0)
 ;
"RTN","IBCNBLL",109,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",110,0)
 ;
"RTN","IBCNBLL",111,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",112,0)
 .  S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",113,0)
 ..   S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",114,0)
 ..   ;
"RTN","IBCNBLL",115,0)
 ..   S IBCNDFN=+$G(^IBA(355.33,IBBUFDA,60)),IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",116,0)
 ..   ;
"RTN","IBCNBLL",117,0)
 ..   I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",118,0)
 ..   I +IBCNSORT=2 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBLL",119,0)
 ..   I +IBCNSORT=3 S IBCSORT1=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBLL",120,0)
 ..   I +IBCNSORT=4 S IBCSORT1=$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1)
"RTN","IBCNBLL",121,0)
 ..   I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",122,0)
 ..   I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",123,0)
 ..   I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",124,0)
 ..   I +IBCNSORT=8 S IBCSORT1=$S(+$P($G(^IBA(355.33,IBBUFDA,0)),U,10):1,1:2)
"RTN","IBCNBLL",125,0)
 ..   ; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",126,0)
 ..   ; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",127,0)
 ..   I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,$$SYMBOL(IBBUFDA)))_"."_$P(+$G(^IBA(355.33,IBBUFDA,0)),".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",128,0)
 ..   ;
"RTN","IBCNBLL",129,0)
 ..   S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",130,0)
 ..   ;
"RTN","IBCNBLL",131,0)
 ..   S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)="" K VAIN,IBCSORT1
"RTN","IBCNBLL",132,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",133,0)
 Q
"RTN","IBCNBLL",134,0)
 ;
"RTN","IBCNBLL",135,0)
DATE(X) ;
"RTN","IBCNBLL",136,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",137,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",138,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",139,0)
SOURCE(X) ;
"RTN","IBCNBLL",140,0)
 Q $S(X=1:"INTVW",X=2:"DMTCH",X=3:"IVM",X=4:"PreRg",X=5:"eIIV",1:"")
"RTN","IBCNBLL",141,0)
 ;
"RTN","IBCNBLL",142,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",143,0)
 NEW IB0,SYM
"RTN","IBCNBLL",144,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",145,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",146,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",147,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",148,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",149,0)
 Q SYM
"RTN","IBCNBLL",150,0)
 ;
"RTN","IBCNBLL",151,0)
 ;
"RTN","IBCNBLL",152,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",153,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",154,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",155,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",156,0)
 ;
"RTN","IBCNBLL",157,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",158,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",159,0)
 ;
"RTN","IBCNBLL",160,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",161,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",162,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",163,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",164,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",165,0)
 ;
"RTN","IBCNBLL",166,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",167,0)
 ; the display array
"RTN","IBCNBLL",168,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",169,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2))
"RTN","IBCNBLL",170,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",171,0)
 Q
"RTN","IBCNBME")
0^15^B16610302
"RTN","IBCNBME",1,0)
IBCNBME ;ALB/ARH-Ins Buffer: external entry points, add/edit buffer ;1 Jun 97
"RTN","IBCNBME",2,0)
 ;;2.0;INTEGRATED BILLING;**82,103,184**;21-MAR-94
"RTN","IBCNBME",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBME",4,0)
 ;
"RTN","IBCNBME",5,0)
FEE(DFN) ; ENTRY FOR FEE BASIS:  add/edit a buffer entry
"RTN","IBCNBME",6,0)
 I '$D(^DPT(+$G(DFN),0)) Q
"RTN","IBCNBME",7,0)
 Q:'$$INSCOV(+DFN)
"RTN","IBCNBME",8,0)
 D DISPLAY
"RTN","IBCNBME",9,0)
 D EDADD(1,+DFN)
"RTN","IBCNBME",10,0)
 Q
"RTN","IBCNBME",11,0)
 ;
"RTN","IBCNBME",12,0)
REG(DFN) ; ENTRY FOR REGISTRATION:  add/edit a buffer entry
"RTN","IBCNBME",13,0)
 I '$D(^DPT(+$G(DFN),0)) Q
"RTN","IBCNBME",14,0)
 Q:'$$INSCOV(+DFN)
"RTN","IBCNBME",15,0)
 D DISPLAY
"RTN","IBCNBME",16,0)
 D EDADD(1,+DFN)
"RTN","IBCNBME",17,0)
 Q
"RTN","IBCNBME",18,0)
 ;
"RTN","IBCNBME",19,0)
PREG(DFN) ; ENTRY FOR PRE-REGISTRATION:  add/edit a buffer entry
"RTN","IBCNBME",20,0)
 I '$D(^DPT(+$G(DFN),0)) Q
"RTN","IBCNBME",21,0)
 Q:'$$INSCOV(+DFN)
"RTN","IBCNBME",22,0)
 D DISPLAY
"RTN","IBCNBME",23,0)
 D EDADD(4,+DFN)
"RTN","IBCNBME",24,0)
 Q
"RTN","IBCNBME",25,0)
 ;
"RTN","IBCNBME",26,0)
EDADD(IBSOURCE,DFN) ; add or select a specific patient's buffer entry then edit all data
"RTN","IBCNBME",27,0)
 ; IBSOURCE = 1-interview, 2-data match, 3-ivm, 4-pre-reg, 5-eiiv
"RTN","IBCNBME",28,0)
 N X,Y,IBX,IBY,IBBUFDA,DIR,DIRUT,IBINSNM I '$D(^DPT(+$G(DFN),0))!('$G(IBSOURCE)) Q
"RTN","IBCNBME",29,0)
 ;
"RTN","IBCNBME",30,0)
 ; allow user to choose one of their own entries for this patient to edit or add a new one
"RTN","IBCNBME",31,0)
 S DIR("?")="^D HELP^IBCNBME"
"RTN","IBCNBME",32,0)
 S DIR(0)="FO^3:30",DIR("A")="Select INSURANCE COMPANY" D ^DIR I $D(DIRUT)!(Y="") Q
"RTN","IBCNBME",33,0)
 ;
"RTN","IBCNBME",34,0)
 S IBINSNM=$$UP^XLFSTR(Y),IBBUFDA=0
"RTN","IBCNBME",35,0)
 ;
"RTN","IBCNBME",36,0)
 ; -- If Medicare (WNR) entered call MII
"RTN","IBCNBME",37,0)
 I IBINSNM="MEDICARE (WNR)" D ENR^IBCNSMM(DFN,IBSOURCE) Q
"RTN","IBCNBME",38,0)
 ;
"RTN","IBCNBME",39,0)
 S IBX=$$DICBUF^IBCNBU1(IBINSNM,DFN,DUZ) I +IBX>0 S IBY=$$EDIT Q:IBY<0  I +IBY>0 S IBBUFDA=+IBX
"RTN","IBCNBME",40,0)
 ;I 'IBBUFDA S IBX=$$DICINS^IBCNBU1(IBINSNM) Q:IBX<0  I IBX'=0 S IBINSNM=IBX
"RTN","IBCNBME",41,0)
 I 'IBBUFDA S IBBUFDA=$$NEW(DFN,IBINSNM,IBSOURCE)
"RTN","IBCNBME",42,0)
 Q:'IBBUFDA  W !!
"RTN","IBCNBME",43,0)
 ;
"RTN","IBCNBME",44,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBME",45,0)
 ;
"RTN","IBCNBME",46,0)
 D INS^IBCNBEE(IBBUFDA,"OT") W !
"RTN","IBCNBME",47,0)
 D GRP^IBCNBEE(IBBUFDA,"OT") W !
"RTN","IBCNBME",48,0)
 D POLICY^IBCNBEE(IBBUFDA,"OT")
"RTN","IBCNBME",49,0)
 ;
"RTN","IBCNBME",50,0)
 ; set buffer symbol
"RTN","IBCNBME",51,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))
"RTN","IBCNBME",52,0)
 ;
"RTN","IBCNBME",53,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBME",54,0)
 Q
"RTN","IBCNBME",55,0)
 ;
"RTN","IBCNBME",56,0)
HELP ;
"RTN","IBCNBME",57,0)
 N Z W !!,"You may add a new Insurance Buffer entry or edit an entry you have already ",!,"created for this patient.  Insurance Company name must be 3-30 characters.",!
"RTN","IBCNBME",58,0)
 W "To 'fast enter' Medicare coverage information, please enter 'MEDICARE (WNR)'.",!
"RTN","IBCNBME",59,0)
 S Z=$$DICBUF^IBCNBU1("??",DFN,DUZ)
"RTN","IBCNBME",60,0)
 Q
"RTN","IBCNBME",61,0)
 ;
"RTN","IBCNBME",62,0)
NEW(DFN,INSNAME,SOURCE) ; ask then add new insurance buffer entry
"RTN","IBCNBME",63,0)
 N X,Y,IBX,DIR,DIRUT,IBDATA S IBX=0 W !
"RTN","IBCNBME",64,0)
 S DIR(0)="YO",DIR("A")="Add a new Insurance Buffer entry for this patient",DIR("B")="YES" D ^DIR
"RTN","IBCNBME",65,0)
 I Y=1 S IBDATA(20.01)=INSNAME,IBDATA(60.01)=DFN S IBX=+$$ADDSTF^IBCNBES(SOURCE,DFN,.IBDATA)
"RTN","IBCNBME",66,0)
 Q IBX
"RTN","IBCNBME",67,0)
 ;
"RTN","IBCNBME",68,0)
EDIT() ; ask user if they want to edit an existing buffer entry
"RTN","IBCNBME",69,0)
 ; returns 0 if don't want to edit, -1 if trys to exit, 1 if wants to edit existing buffer entry
"RTN","IBCNBME",70,0)
 N X,Y,IBX,DIR,DIRUT,DUOUT,DTOUT S IBX=0 W !
"RTN","IBCNBME",71,0)
 S DIR(0)="Y",DIR("A")="Edit existing Insurance Buffer entry for this patient",DIR("B")="YES" D ^DIR S IBX=Y I $D(DIRUT) S IBX=-1
"RTN","IBCNBME",72,0)
 Q IBX
"RTN","IBCNBME",73,0)
 ;
"RTN","IBCNBME",74,0)
 ;
"RTN","IBCNBME",75,0)
DISPLAY ;
"RTN","IBCNBME",76,0)
 ;
"RTN","IBCNBME",77,0)
 W !!,?2,"This option adds or edits insurance information in the Insurance Buffer File."
"RTN","IBCNBME",78,0)
 W !,?2,"This is a temporary file that will hold all new insurance information until"
"RTN","IBCNBME",79,0)
 W !,?2,"authorized insurance personnel can coordinate this new information with the"
"RTN","IBCNBME",80,0)
 W !,?2,"patient's existing insurance.  You may add a new Buffer entry or edit a"
"RTN","IBCNBME",81,0)
 W !,?2,"Buffer entry that you previously created for this patient if that entry"
"RTN","IBCNBME",82,0)
 W !,?2,"has not yet been processed by insurance personnel."
"RTN","IBCNBME",83,0)
 W !!,?2,"Please enter all available insurance information.",!!
"RTN","IBCNBME",84,0)
 Q
"RTN","IBCNBME",85,0)
 ;
"RTN","IBCNBME",86,0)
INSCOV(DFN) ; return true if covered by insurance is yes, false if not covered or user ^ out
"RTN","IBCNBME",87,0)
 ; allow user to edit 'Covered By Insurance' question (2,.3192), then auto correct if if they were wrong
"RTN","IBCNBME",88,0)
 ; (primarily needed because this field an inconsistancy check in registration so it must have a value)
"RTN","IBCNBME",89,0)
 ;
"RTN","IBCNBME",90,0)
 N IBX,IBY,IBCOV1 S IBX=1
"RTN","IBCNBME",91,0)
 S IBY=$$ASKCOVD^IBCNSP2(DFN,"",.IBCOV1),IBX=+IBY
"RTN","IBCNBME",92,0)
 D COVERED^IBCNSM31(DFN,IBCOV1)
"RTN","IBCNBME",93,0)
 Q IBX
"RTN","IBCNBMI")
0^57^B47417405
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH-Ins Buffer: move buffer data to insurance files ;1 Jun 97
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.33)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ;
"RTN","IBCNBMI",38,0)
 ;
"RTN","IBCNBMI",39,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",40,0)
 ;
"RTN","IBCNBMI",41,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",42,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",43,0)
 ;
"RTN","IBCNBMI",44,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",46,0)
 ;
"RTN","IBCNBMI",47,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",48,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",49,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",50,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",51,0)
 . ;
"RTN","IBCNBMI",52,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",53,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",54,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",55,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",56,0)
 . ;
"RTN","IBCNBMI",57,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",58,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",59,0)
 ;
"RTN","IBCNBMI",60,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",61,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",62,0)
 Q
"RTN","IBCNBMI",63,0)
 ;
"RTN","IBCNBMI",64,0)
STUFF(SET,IBEXTDA) ; update fields in insurance files that should be automatically set when an entry is edited
"RTN","IBCNBMI",65,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",66,0)
 ;
"RTN","IBCNBMI",67,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",68,0)
 ;
"RTN","IBCNBMI",69,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",70,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",71,0)
 ;
"RTN","IBCNBMI",72,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",73,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",74,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",75,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",76,0)
 ;
"RTN","IBCNBMI",77,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",78,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",79,0)
 Q
"RTN","IBCNBMI",80,0)
 ;
"RTN","IBCNBMI",81,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",82,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",83,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",84,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",85,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",86,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",87,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",88,0)
 Q
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
INSDR ;
"RTN","IBCNBMI",91,0)
 ;;36^20.02:20.04;21.01:21.06^.131;.132;.133;.111:.116
"RTN","IBCNBMI",92,0)
INSFLD ; corresponding fields:  Buffer File (355.33) and Insurance Company file (36)
"RTN","IBCNBMI",93,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",94,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",95,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",96,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",97,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",98,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",99,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",100,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",101,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",102,0)
 ;
"RTN","IBCNBMI",103,0)
GRPDR ;
"RTN","IBCNBMI",104,0)
 ;;355.3^40.02:40.09^.03:.09;.12
"RTN","IBCNBMI",105,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",106,0)
 ;;40.02^.03^Group Name^              ; Group Name
"RTN","IBCNBMI",107,0)
 ;;40.03^.04^Group Number^            ; Group Number
"RTN","IBCNBMI",108,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",109,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",110,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",111,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",112,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",113,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",114,0)
 ;
"RTN","IBCNBMI",115,0)
GRPA ; auto set fields
"RTN","IBCNBMI",116,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",117,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",118,0)
 ;
"RTN","IBCNBMI",119,0)
POLDR ;
"RTN","IBCNBMI",120,0)
 ;;2.312^60.02:61.12^8;3;1;6;16;17;3.01;3.05;4.01;4.02;.2;2.1;2.015;2.11;2.12;2.01:2.08
"RTN","IBCNBMI",121,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",122,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",123,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",124,0)
 ;;60.04^1^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",125,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",126,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",127,0)
 ;;60.07^17^Name fo Insured^          ; Name of Insured
"RTN","IBCNBMI",128,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",129,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",130,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",131,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",132,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",133,0)
 ;;  
"RTN","IBCNBMI",134,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",135,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",136,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",137,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",138,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",139,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",140,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",141,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",142,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",143,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",144,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",145,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",146,0)
 ;
"RTN","IBCNBMI",147,0)
POLA ; auto set fields
"RTN","IBCNBMI",148,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",149,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",150,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",151,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",152,0)
 ;
"RTN","IBCNBMI",153,0)
 ;
"RTN","IBCNBMI",154,0)
POLOTH(IBBUFDA,IBPOLDA) ; other special cases that can not be transfered using the genaric code above, usually because of dependencys
"RTN","IBCNBMI",155,0)
 N IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",156,0)
 ;
"RTN","IBCNBMI",157,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",158,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",159,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",160,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",161,0)
 ;
"RTN","IBCNBMI",162,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",163,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",164,0)
 Q
"RTN","IBCNBU1")
0^7^B27057313
"RTN","IBCNBU1",1,0)
IBCNBU1 ;ALB/ARH-Ins Buffer: Utilities ;1 Jun 97
"RTN","IBCNBU1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBU1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBU1",4,0)
 ;
"RTN","IBCNBU1",5,0)
BUFFER(DFN) ; returns IFN of first buffer entry found for the patient, 0 otherwise
"RTN","IBCNBU1",6,0)
 Q +$O(^IBA(355.33,"C",+$G(DFN),0))
"RTN","IBCNBU1",7,0)
 ;
"RTN","IBCNBU1",8,0)
SELINS() ; user select an insurance company
"RTN","IBCNBU1",9,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y S IBX=0
"RTN","IBCNBU1",10,0)
 S DIC="^DIC(36,",DIC(0)="AEQ",DIC("A")="Select INSURANCE COMPANY: ",DIC("S")="I '$P(^(0),U,5)" D ^DIC
"RTN","IBCNBU1",11,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",12,0)
 Q IBX
"RTN","IBCNBU1",13,0)
 ;
"RTN","IBCNBU1",14,0)
SELGRP(IBINSDA) ; given a specific insurance company, allow user to choose a group/plan
"RTN","IBCNBU1",15,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y,IBINSNM S IBX=0
"RTN","IBCNBU1",16,0)
 S IBINSNM=$P($G(^DIC(36,+IBINSDA,0)),U,1)
"RTN","IBCNBU1",17,0)
 W !,IBINSNM
"RTN","IBCNBU1",18,0)
 S X=IBINSNM,DIC="^IBA(355.3,",DIC(0)="EQ",DIC("S")="I +^(0)="_+IBINSDA_"&('$P(^(0),U,11))" D ^DIC
"RTN","IBCNBU1",19,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",20,0)
 Q IBX
"RTN","IBCNBU1",21,0)
 ;
"RTN","IBCNBU1",22,0)
SELEXT(DFN) ; user select existing ins co, group, and if the patient is a member of the group also return the policy
"RTN","IBCNBU1",23,0)
 N IBX,IBINSDA,IBGRPDA,IBPOLDA S (IBINSDA,IBGRPDA,IBPOLDA)=""
"RTN","IBCNBU1",24,0)
 S IBINSDA=$$SELINS() S IBX=+IBINSDA
"RTN","IBCNBU1",25,0)
 I +IBINSDA S IBGRPDA=$$SELGRP(+IBINSDA) I +IBGRPDA S IBX=IBX_U_+IBGRPDA
"RTN","IBCNBU1",26,0)
 I +IBGRPDA,+$G(DFN) S IBPOLDA=$$PTGRP(DFN,IBINSDA,IBGRPDA) I +IBPOLDA S IBX=IBX_U_+IBPOLDA
"RTN","IBCNBU1",27,0)
 Q IBX
"RTN","IBCNBU1",28,0)
 ;
"RTN","IBCNBU1",29,0)
PTGRP(DFN,IBINSDA,IBGRPDA) ; return policy ifn if patient is a member of this group plan
"RTN","IBCNBU1",30,0)
 N IBX,IBY S IBX=0,DFN=+$G(DFN),IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA)
"RTN","IBCNBU1",31,0)
 S IBY=0 F  S IBY=$O(^DPT(DFN,.312,"B",IBINSDA,IBY)) Q:'IBY  I +$P($G(^DPT(DFN,.312,IBY,0)),U,18)=IBGRPDA S IBX=IBY
"RTN","IBCNBU1",32,0)
 Q IBX
"RTN","IBCNBU1",33,0)
 ;
"RTN","IBCNBU1",34,0)
DISPBUF(IBBUFDA) ; display summary info on a buffer entry
"RTN","IBCNBU1",35,0)
 ;
"RTN","IBCNBU1",36,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBU1",37,0)
 N IB0,IB60 S IB0=$G(^IBA(355.33,IBBUFDA,0)) Q:IB0=""  S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBU1",38,0)
 ;
"RTN","IBCNBU1",39,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",40,0)
 W !,?2,"Entered: ",?15,$$FMTE^XLFDT(+IB0,2),?50,"Source: ",?60,$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBU1",41,0)
 W !,?2,"Entered By: ",?15,$$EXPAND^IBTRE(355.33,.02,+$P(IB0,U,2)),?50,"Verified: ",?60,$$FMTE^XLFDT($P(IB0,U,10),2)
"RTN","IBCNBU1",42,0)
 I +$P(IB0,U,10) W !,?50,"Verif By: ",?60,$E($$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)),1,20)
"RTN","IBCNBU1",43,0)
 W !!,?2,"Patient: ",?15,$$EXPAND^IBTRE(355.33,60.01,$P(IB60,U,1)),?50,"Sub Id: ",?60,$P(IB60,U,4)
"RTN","IBCNBU1",44,0)
 W !,?2,"Insurance: ",?15,$P($G(^IBA(355.33,+IBBUFDA,20)),U,1),?50,"Group #: ",?60,$P($G(^IBA(355.33,+IBBUFDA,40)),U,3)
"RTN","IBCNBU1",45,0)
 W !,?15,$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)
"RTN","IBCNBU1",46,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",47,0)
 Q
"RTN","IBCNBU1",48,0)
 ;
"RTN","IBCNBU1",49,0)
LOCK(IBBUFDA,DISP,TO) ; return true if able to lock the buffer entry, if not an DISP is true then will display a message
"RTN","IBCNBU1",50,0)
 ; TO - lock attempt time out & hang time in seconds, default to 4
"RTN","IBCNBU1",51,0)
 N IBX S IBX=0
"RTN","IBCNBU1",52,0)
 S TO=$G(TO,4)
"RTN","IBCNBU1",53,0)
 I +$G(IBBUFDA) L +^IBA(355.33,+IBBUFDA):TO I +$T S IBX=1
"RTN","IBCNBU1",54,0)
 I 'IBX,+$G(DISP) W !!,"Another user is currently editing/processing this entry, please try again later.",! H TO
"RTN","IBCNBU1",55,0)
 Q IBX
"RTN","IBCNBU1",56,0)
 ;
"RTN","IBCNBU1",57,0)
UNLOCK(IBBUFDA) ; unlock a Buffer entry
"RTN","IBCNBU1",58,0)
 L -^IBA(355.33,+IBBUFDA)
"RTN","IBCNBU1",59,0)
 Q
"RTN","IBCNBU1",60,0)
 ;
"RTN","IBCNBU1",61,0)
DICINS(INSNAME,IBSCACT,IBLISTN) ; user search/selection of existing Insurance Company Names, does not list duplicates, based on names and synonyms
"RTN","IBCNBU1",62,0)
 ;
"RTN","IBCNBU1",63,0)
 ; Input parameters
"RTN","IBCNBU1",64,0)
 ;    INSNAME - user input; partial name match of insurance company
"RTN","IBCNBU1",65,0)
 ;    IBSCACT - 0/1 flag indicating if inactive insurance companies
"RTN","IBCNBU1",66,0)
 ;              should get screened out during the list building
"RTN","IBCNBU1",67,0)
 ;              Default is 0 (no screen)
"RTN","IBCNBU1",68,0)
 ;    IBLISTN - number of entries to display in the lister before
"RTN","IBCNBU1",69,0)
 ;              giving the user a chance to select. Default is 4.
"RTN","IBCNBU1",70,0)
 ; Output
"RTN","IBCNBU1",71,0)
 ;    returns Ins name, or -1 if ^, or 0 if none selected
"RTN","IBCNBU1",72,0)
 ;
"RTN","IBCNBU1",73,0)
 S IBSCACT=$G(IBSCACT,0)  ; flag to screen out inactive ins
"RTN","IBCNBU1",74,0)
 S IBLISTN=$G(IBLISTN,4)  ; number of list entries before user selection
"RTN","IBCNBU1",75,0)
 ;
"RTN","IBCNBU1",76,0)
 N IBX,IBINB,IBCX,IBSEL,IBXRF,IBNAME,IBSYNM,IBCNT,IBC1,IBINSIEN,IBLINE
"RTN","IBCNBU1",77,0)
 S IBSEL=0 K ^TMP($J,"IBINSS"),^TMP($J,"IBINSSB") I INSNAME="" G DINSQ
"RTN","IBCNBU1",78,0)
 ;
"RTN","IBCNBU1",79,0)
 S INSNAME=$$UP^XLFSTR(INSNAME),IBX=$L(INSNAME),IBINB=$E(INSNAME,1,(IBX-1))_$C($A($E(INSNAME,IBX))-1)_"~"
"RTN","IBCNBU1",80,0)
 ;
"RTN","IBCNBU1",81,0)
 F IBCX="C","B" S IBXRF=IBINB F  S IBXRF=$O(^DIC(36,IBCX,IBXRF)) Q:IBXRF=""!($E(IBXRF,1,IBX)'=INSNAME)  D
"RTN","IBCNBU1",82,0)
 . S IBINSIEN=+$O(^DIC(36,IBCX,IBXRF,0))
"RTN","IBCNBU1",83,0)
 . I 'IBINSIEN Q
"RTN","IBCNBU1",84,0)
 . I '$D(^DIC(36,IBINSIEN,0)) Q
"RTN","IBCNBU1",85,0)
 . I IBSCACT,$P($G(^DIC(36,IBINSIEN,0)),U,5) Q   ; inactive
"RTN","IBCNBU1",86,0)
 . I IBSCACT,$P($G(^DIC(36,IBINSIEN,5)),U,1) Q   ; scheduled for deletion
"RTN","IBCNBU1",87,0)
 . S IBNAME=$P($G(^DIC(36,IBINSIEN,0)),U,1)
"RTN","IBCNBU1",88,0)
 . I IBNAME="" Q
"RTN","IBCNBU1",89,0)
 . I $D(^TMP($J,"IBINSSB",IBNAME)) Q
"RTN","IBCNBU1",90,0)
 . S ^TMP($J,"IBINSSB",IBNAME)=$S(IBNAME=IBXRF:"",1:IBXRF)
"RTN","IBCNBU1",91,0)
 . Q
"RTN","IBCNBU1",92,0)
 ;
"RTN","IBCNBU1",93,0)
 S IBCNT=0,IBX="" F  S IBX=$O(^TMP($J,"IBINSSB",IBX)) Q:IBX=""  S IBCNT=IBCNT+1,^TMP($J,"IBINSS",IBCNT)=IBX
"RTN","IBCNBU1",94,0)
 ;
"RTN","IBCNBU1",95,0)
 S (IBCNT,IBC1)=0 F  S IBCNT=$O(^TMP($J,"IBINSS",IBCNT)) Q:'IBCNT  D  I +IBSEL Q
"RTN","IBCNBU1",96,0)
 . S IBNAME=^TMP($J,"IBINSS",IBCNT) Q:IBNAME=""  S IBSYNM=$G(^TMP($J,"IBINSSB",IBNAME))
"RTN","IBCNBU1",97,0)
 . S IBLINE=$J(IBCNT,7)_"   "_$$FO^IBCNEUT1(IBNAME,40)_IBSYNM
"RTN","IBCNBU1",98,0)
 . DO EN^DDIOL(IBLINE)
"RTN","IBCNBU1",99,0)
 . S IBC1=IBC1+1 I '(IBCNT#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",100,0)
 . Q
"RTN","IBCNBU1",101,0)
 ;
"RTN","IBCNBU1",102,0)
 I 'IBSEL,+(IBC1#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",103,0)
 ;
"RTN","IBCNBU1",104,0)
 I IBSEL>0 S IBSEL=$G(^TMP($J,"IBINSS",IBSEL))
"RTN","IBCNBU1",105,0)
 ;
"RTN","IBCNBU1",106,0)
DINSQ K ^TMP($J,"IBINSS"),^TMP($J,"IBCNSSB")
"RTN","IBCNBU1",107,0)
 Q IBSEL
"RTN","IBCNBU1",108,0)
 ;
"RTN","IBCNBU1",109,0)
DIR(MAX) ; DIR call for DICINS search for insurance company name
"RTN","IBCNBU1",110,0)
 N DIR,DIRUT,DTOUT,DUOUT,IBX,X,Y S IBX=0,DIR(0)="LOA^1:"_MAX_"^K:X'>0!(X>"_MAX_") X",DIR("A")="CHOOSE 1-"_MAX_": "
"RTN","IBCNBU1",111,0)
 I $G(MAX)>0 D ^DIR K DIR S IBX=$S($D(DTOUT)!$D(DUOUT):-1,+Y:+Y,1:0)
"RTN","IBCNBU1",112,0)
 Q IBX
"RTN","IBCNBU1",113,0)
 ;
"RTN","IBCNBU1",114,0)
DICBUF(INSNAME,DFN,IBDUZ) ; display list of editable buffer entries based on insurance name, may specify patient and/or enterer
"RTN","IBCNBU1",115,0)
 ; (non-MCCR people: only the person that created an entry should be able to edit it, everyone else should create new ones)
"RTN","IBCNBU1",116,0)
 N X,Y,IBX,DIC,DA,DR,DIR,DIRUT,DTOUT,DUOUT,D S IBX=0
"RTN","IBCNBU1",117,0)
 ;
"RTN","IBCNBU1",118,0)
 S DIC("W")="W ""   "",$P($G(^(20)),U,1),""   "",$P($G(^(21)),U,1)"
"RTN","IBCNBU1",119,0)
 S DIC("S")="I $P(^(0),U,4)=""E""&('$P(^(0),U,10))" S:+$G(IBDUZ) DIC("S")=DIC("S")_"&(+$P(^(0),U,2)="_IBDUZ_")" S:+$G(DFN) DIC("S")=DIC("S")_"&(+$G(^(60))="_DFN_")"
"RTN","IBCNBU1",120,0)
 S DIC="^IBA(355.33,",DIC(0)="EM",X=$$UP^XLFSTR($G(INSNAME)),D="D" D IX^DIC I '$D(DTOUT),'$D(DUOUT),+Y>0 S IBX=+Y
"RTN","IBCNBU1",121,0)
 Q IBX
"RTN","IBCNBUH")
0^59^B21847670
"RTN","IBCNBUH",1,0)
IBCNBUH ;ALB/ARH-Ins Buffer: Help Text ;1 Jun 97
"RTN","IBCNBUH",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184**;21-MAR-94
"RTN","IBCNBUH",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBUH",4,0)
 ;
"RTN","IBCNBUH",5,0)
 ;
"RTN","IBCNBUH",6,0)
HELP D HELP1,HELP3
"RTN","IBCNBUH",7,0)
 Q
"RTN","IBCNBUH",8,0)
WAIT N DIR,DIRUT,X,Y W !! S DIR(0)="E" D ^DIR W !! Q
"RTN","IBCNBUH",9,0)
 ;
"RTN","IBCNBUH",10,0)
HELP1 ;
"RTN","IBCNBUH",11,0)
 W !!,"The left side of the display contains data from a buffer file entry."
"RTN","IBCNBUH",12,0)
 W !,?3,"BOLD:  buffer data that is printed in bold will be added to the existing ",!,?10,"insurance entry if the MERGE option is used."
"RTN","IBCNBUH",13,0)
 W !!,"The right side of the display contains data from an existing insurance entry."
"RTN","IBCNBUH",14,0)
 W !,?3,"BOLD:  existing insurance data that is printed in bold will be replaced with ",!,?10,"the corresponding buffer entry data if the OVERWRITE option is used."
"RTN","IBCNBUH",15,0)
 Q
"RTN","IBCNBUH",16,0)
 ;
"RTN","IBCNBUH",17,0)
HELP2 W !!,"When a buffer entry is determined to be a match with an existing insurance ",!,"entry, these are the options that may be used to move the data from the buffer ",!,"entry to the insurance entry:"
"RTN","IBCNBUH",18,0)
 W !!,"MERGE:",?11,"Data from the buffer entry will be saved to the insurance entry ",!,?11,"ONLY if the corresponding data field in the insurance entry is blank."
"RTN","IBCNBUH",19,0)
 W !,?11,"Therefore only blank fields in the insurance entry will be filled, ",!,?11,"any existing data in the insurance entry will remain unchanged."
"RTN","IBCNBUH",20,0)
 W !!,"OVERWRITE:",?11,"ALL non-blank data in the buffer entry will be saved to the insurance"
"RTN","IBCNBUH",21,0)
 W !,?11,"entry.  If a buffer entry field has a value it will be saved to the ",!,?11,"corresponding insurance entry field.  Therefore blank insurance ",!,?11,"fields will be filled and existing insurance data replaced."
"RTN","IBCNBUH",22,0)
 W !!,"REPLACE:",?11,"ALL fields in the buffer entry will be saved to the insurance entry, "
"RTN","IBCNBUH",23,0)
 W !,?11,"including blank fields.  Therefore all data in the insurance entry ",!,?11,"will be deleted then completely replaced by the buffer entry."
"RTN","IBCNBUH",24,0)
 W !!,"NO CHANGE: This option may be used to identify the Insurance entry that",!,?11,"corresponds to a buffer entry without actually changing any of",!,?11,"the Insurance Information.  The Buffer data is ignored."
"RTN","IBCNBUH",25,0)
 D WAIT^IBCNBAA
"RTN","IBCNBUH",26,0)
 W !!,"INDIVIDUALLY ACCEPT (SKIP BLANKS): This option may be used to accept only",!,?11,"non-blank specific fields from the buffer entry into the Insurance",!,?11,"entry.  Only those values accepted by the user will replace the"
"RTN","IBCNBUH",27,0)
 W !,?11,"corresponding fields in the Insurance entry."
"RTN","IBCNBUH",28,0)
 Q
"RTN","IBCNBUH",29,0)
 ;
"RTN","IBCNBUH",30,0)
HELP3 W !!,"Options for moving Buffer data to Insurance files:"
"RTN","IBCNBUH",31,0)
 W !!,"MERGE:     Save buffer data only if Insurance field is blank."
"RTN","IBCNBUH",32,0)
 W !!,"OVERWRITE: Save all non-blank fields in Buffer to Insurance fields."
"RTN","IBCNBUH",33,0)
 W !!,"REPLACE:   All data deleted from Insurance fields and replaced with Buffer data."
"RTN","IBCNBUH",34,0)
 W !!,"NO CHANGE: The buffer data is ignored, the Insurance entry will not be changed."
"RTN","IBCNBUH",35,0)
 W !!,"INDIVIDUALLY ACCEPT (SKIP BLANKS): Save non-blank user-confirmed Buffer fields."
"RTN","IBCNBUH",36,0)
 Q
"RTN","IBCNEAMC")
0^24^B32075549
"RTN","IBCNEAMC",1,0)
IBCNEAMC ;DAOU/ESG - IIV AUTO MATCH BUFFER LISTING ;11-JUN-2002
"RTN","IBCNEAMC",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEAMC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEAMC",4,0)
 ;
"RTN","IBCNEAMC",5,0)
EN ; -- main entry point for IBCNE AUTO MATCH BUFFER LIST
"RTN","IBCNEAMC",6,0)
 NEW IBCNENIL,COL,CTRLCOL,FINISH,POP,VALMBCK,X,%DT
"RTN","IBCNEAMC",7,0)
 D EN^VALM("IBCNE AUTO MATCH BUFFER LIST")
"RTN","IBCNEAMC",8,0)
 Q
"RTN","IBCNEAMC",9,0)
 ;
"RTN","IBCNEAMC",10,0)
HDR ; -- header code
"RTN","IBCNEAMC",11,0)
 S VALMHDR(1)="These are Insurance Company names from the Insurance Buffer file that do not"
"RTN","IBCNEAMC",12,0)
 S VALMHDR(2)="exist in the Insurance Company file (either as Names or as Synonyms).  They"
"RTN","IBCNEAMC",13,0)
 S VALMHDR(3)="also do not exist or pattern match with any entry in the Auto Match file."
"RTN","IBCNEAMC",14,0)
 Q
"RTN","IBCNEAMC",15,0)
 ;
"RTN","IBCNEAMC",16,0)
INIT ; -- init variables and list array
"RTN","IBCNEAMC",17,0)
 NEW ENTDATE,IBBUFDA,BUFFNAME
"RTN","IBCNEAMC",18,0)
 KILL ^TMP($J,"IBCNEAMC")
"RTN","IBCNEAMC",19,0)
 S IBCNENIL=0        ; initialize the no data flag
"RTN","IBCNEAMC",20,0)
 S ENTDATE=0
"RTN","IBCNEAMC",21,0)
 F  S ENTDATE=$O(^IBA(355.33,"AEST","E",ENTDATE)) Q:'ENTDATE  S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",ENTDATE,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNEAMC",22,0)
 . S BUFFNAME=$$TRIM($P($G(^IBA(355.33,IBBUFDA,20)),U,1))
"RTN","IBCNEAMC",23,0)
 . I BUFFNAME="" Q                       ; no name in buffer file
"RTN","IBCNEAMC",24,0)
 . I $D(^DIC(36,"B",BUFFNAME)) Q         ; insurance company name
"RTN","IBCNEAMC",25,0)
 . I $D(^DIC(36,"C",BUFFNAME)) Q         ; insurance company synonym
"RTN","IBCNEAMC",26,0)
 . I $$AMLOOK^IBCNEUT1(BUFFNAME) Q       ; Auto Match file lookup
"RTN","IBCNEAMC",27,0)
 . S ^TMP($J,"IBCNEAMC",2,BUFFNAME)=""   ; name not found so add it
"RTN","IBCNEAMC",28,0)
 . Q
"RTN","IBCNEAMC",29,0)
 ; Now build the ListMan array for display
"RTN","IBCNEAMC",30,0)
 S BUFFNAME="",VALMCNT=0
"RTN","IBCNEAMC",31,0)
 F  S BUFFNAME=$O(^TMP($J,"IBCNEAMC",2,BUFFNAME)) Q:BUFFNAME=""  D
"RTN","IBCNEAMC",32,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEAMC",33,0)
 . S ^TMP($J,"IBCNEAMC",1,VALMCNT,0)=$J(VALMCNT,4)_"  "_BUFFNAME
"RTN","IBCNEAMC",34,0)
 . S ^TMP($J,"IBCNEAMC",3,VALMCNT)=BUFFNAME
"RTN","IBCNEAMC",35,0)
 . Q
"RTN","IBCNEAMC",36,0)
 ;
"RTN","IBCNEAMC",37,0)
 ; Check to see if there's no data
"RTN","IBCNEAMC",38,0)
 I 'VALMCNT D
"RTN","IBCNEAMC",39,0)
 . S IBCNENIL=1     ; no data flag is true
"RTN","IBCNEAMC",40,0)
 . S ^TMP($J,"IBCNEAMC",1,1,0)=""
"RTN","IBCNEAMC",41,0)
 . S ^TMP($J,"IBCNEAMC",1,2,0)=""
"RTN","IBCNEAMC",42,0)
 . S ^TMP($J,"IBCNEAMC",1,3,0)="     There is no data to display."
"RTN","IBCNEAMC",43,0)
 . S VALMCNT=3
"RTN","IBCNEAMC",44,0)
 . Q
"RTN","IBCNEAMC",45,0)
INITX ;
"RTN","IBCNEAMC",46,0)
 Q
"RTN","IBCNEAMC",47,0)
 ;
"RTN","IBCNEAMC",48,0)
 ; For speed reasons, code taken from TRIM^XLFSTR
"RTN","IBCNEAMC",49,0)
TRIM(X,SIDE,CHAR) ; Trim chars from left/right of string
"RTN","IBCNEAMC",50,0)
 NEW LEFT,RIGHT
"RTN","IBCNEAMC",51,0)
 I X="" Q X
"RTN","IBCNEAMC",52,0)
 S SIDE=$G(SIDE,"LR"),CHAR=$G(CHAR," "),LEFT=1,RIGHT=$L(X)
"RTN","IBCNEAMC",53,0)
 I X=CHAR Q ""
"RTN","IBCNEAMC",54,0)
 I SIDE["R" F RIGHT=$L(X):-1:1 Q:$E(X,RIGHT)'=CHAR
"RTN","IBCNEAMC",55,0)
 I SIDE["L" F LEFT=1:1:$L(X) Q:$E(X,LEFT)'=CHAR
"RTN","IBCNEAMC",56,0)
 Q $E(X,LEFT,RIGHT)
"RTN","IBCNEAMC",57,0)
 ;
"RTN","IBCNEAMC",58,0)
 ;
"RTN","IBCNEAMC",59,0)
HELP ; -- help code
"RTN","IBCNEAMC",60,0)
 D FULL^VALM1
"RTN","IBCNEAMC",61,0)
 W !!," There are three main actions you may take on this screen."
"RTN","IBCNEAMC",62,0)
 W !," You may select an action by typing in the first character of the action."
"RTN","IBCNEAMC",63,0)
 W !!,"   Select Entry"
"RTN","IBCNEAMC",64,0)
 W !,"     You choose a single insurance company name from the list."
"RTN","IBCNEAMC",65,0)
 W !,"     This name becomes the default Auto Match value for a new"
"RTN","IBCNEAMC",66,0)
 W !,"     Auto Match entry.  You may then link this Auto Match value"
"RTN","IBCNEAMC",67,0)
 W !,"     with a valid insurance company name."
"RTN","IBCNEAMC",68,0)
 W !!,"   Auto Match Enter/Edit"
"RTN","IBCNEAMC",69,0)
 W !,"     This action will take you to the Enter/Edit Auto Match Entries"
"RTN","IBCNEAMC",70,0)
 W !,"     option.  You may add, edit, or delete multiple Auto Match"
"RTN","IBCNEAMC",71,0)
 W !,"     entries in this option."
"RTN","IBCNEAMC",72,0)
 W !!,"   Exit"
"RTN","IBCNEAMC",73,0)
 W !,"     Exit out of this option."
"RTN","IBCNEAMC",74,0)
 D PAUSE^VALM1
"RTN","IBCNEAMC",75,0)
 S VALMBCK="R"
"RTN","IBCNEAMC",76,0)
HELPX ;
"RTN","IBCNEAMC",77,0)
 Q
"RTN","IBCNEAMC",78,0)
 ;
"RTN","IBCNEAMC",79,0)
 ;
"RTN","IBCNEAMC",80,0)
EXIT ; -- exit code
"RTN","IBCNEAMC",81,0)
 KILL ^TMP($J,"IBCNEAMC")
"RTN","IBCNEAMC",82,0)
 Q
"RTN","IBCNEAMC",83,0)
 ;
"RTN","IBCNEAMC",84,0)
 ;
"RTN","IBCNEAMC",85,0)
SELECT ; -- select an entry from the list
"RTN","IBCNEAMC",86,0)
 NEW STOP,AMIEN,NEWENTRY,BUFFNAME,INSNM
"RTN","IBCNEAMC",87,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEAMC",88,0)
 D FULL^VALM1
"RTN","IBCNEAMC",89,0)
 ;
"RTN","IBCNEAMC",90,0)
 ; Check for Auto Match security key before allowing selection
"RTN","IBCNEAMC",91,0)
 I '$$KCHK^XUSRB("IBCNE IIV AUTO MATCH") D  G SELECTX
"RTN","IBCNEAMC",92,0)
 . W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCNEAMC",93,0)
 . W !?5,"The necessary key is IBCNE IIV AUTO MATCH.  Please see your manager."
"RTN","IBCNEAMC",94,0)
 . D PAUSE^VALM1
"RTN","IBCNEAMC",95,0)
 . Q
"RTN","IBCNEAMC",96,0)
 ;
"RTN","IBCNEAMC",97,0)
 ; Make sure there is something there
"RTN","IBCNEAMC",98,0)
 I IBCNENIL D  G SELECTX
"RTN","IBCNEAMC",99,0)
 . W !!?5,"There are no entries in the list."
"RTN","IBCNEAMC",100,0)
 . D PAUSE^VALM1
"RTN","IBCNEAMC",101,0)
 . Q
"RTN","IBCNEAMC",102,0)
 ;
"RTN","IBCNEAMC",103,0)
 S DIR(0)="NO^1:"_VALMCNT_":0"
"RTN","IBCNEAMC",104,0)
 S DIR("A")="Select Entry"
"RTN","IBCNEAMC",105,0)
 S DIR("?",1)=" Please enter the line number corresponding to the insurance company name."
"RTN","IBCNEAMC",106,0)
 S DIR("?",2)=" The valid range of line numbers is displayed in the prompt."
"RTN","IBCNEAMC",107,0)
 S DIR("?",3)=" "
"RTN","IBCNEAMC",108,0)
 S DIR("?",4)=" The insurance company name you select will be used as the default response for"
"RTN","IBCNEAMC",109,0)
 S DIR("?",5)=" a new Auto Match entry.  You may either accept this entry as is or you may"
"RTN","IBCNEAMC",110,0)
 S DIR("?")=" modify it by changing the spelling or by adding wildcard characters."
"RTN","IBCNEAMC",111,0)
 D ^DIR K DIR
"RTN","IBCNEAMC",112,0)
 I 'Y G SELECTX
"RTN","IBCNEAMC",113,0)
 S BUFFNAME=$G(^TMP($J,"IBCNEAMC",3,Y))
"RTN","IBCNEAMC",114,0)
 I BUFFNAME="" W ! G SELECTX
"RTN","IBCNEAMC",115,0)
 W "  ",BUFFNAME,!
"RTN","IBCNEAMC",116,0)
 ;
"RTN","IBCNEAMC",117,0)
 D LOOKUP I STOP G SELECTX ;Prompt user for Insurance Co.
"RTN","IBCNEAMC",118,0)
 I $D(^IBCN(365.11,"B",BUFFNAME)) D  G SELECTX ; has entry been added?
"RTN","IBCNEAMC",119,0)
 . W !!,BUFFNAME," has already been added to the Auto Match file."
"RTN","IBCNEAMC",120,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEAMC",121,0)
 . D INIT ; refresh listing
"RTN","IBCNEAMC",122,0)
 D AMADD^IBCNEUT6(INSNM,BUFFNAME)
"RTN","IBCNEAMC",123,0)
 D INIT
"RTN","IBCNEAMC",124,0)
SELECTX ;
"RTN","IBCNEAMC",125,0)
 S VALMBCK="R"
"RTN","IBCNEAMC",126,0)
 Q
"RTN","IBCNEAMC",127,0)
 ;
"RTN","IBCNEAMC",128,0)
LOOKUP ; Prompt for associated Insurance Company
"RTN","IBCNEAMC",129,0)
 S STOP=0
"RTN","IBCNEAMC",130,0)
 S DIC=36,DIC(0)="AEMVZ"
"RTN","IBCNEAMC",131,0)
 D ^DIC
"RTN","IBCNEAMC",132,0)
 I Y<1!$D(DTOUT)!$D(DUOUT) S STOP=1 G LOOKX
"RTN","IBCNEAMC",133,0)
 S INSNM=$P(Y(0),U)
"RTN","IBCNEAMC",134,0)
LOOKX Q
"RTN","IBCNEAMC",135,0)
 ;
"RTN","IBCNEAMC",136,0)
LINK ; -- link to the Auto Match Enter/Edit option
"RTN","IBCNEAMC",137,0)
 D FULL^VALM1
"RTN","IBCNEAMC",138,0)
 ;
"RTN","IBCNEAMC",139,0)
 ; Check for Auto Match security key before allowing selection
"RTN","IBCNEAMC",140,0)
 I '$$KCHK^XUSRB("IBCNE IIV AUTO MATCH") D  G LINKX
"RTN","IBCNEAMC",141,0)
 . W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCNEAMC",142,0)
 . W !?5,"The necessary key is IBCNE IIV AUTO MATCH.  Please see your manager."
"RTN","IBCNEAMC",143,0)
 . D PAUSE^VALM1
"RTN","IBCNEAMC",144,0)
 . Q
"RTN","IBCNEAMC",145,0)
 ;
"RTN","IBCNEAMC",146,0)
 D ENTER^IBCNEAME
"RTN","IBCNEAMC",147,0)
LINKX ;
"RTN","IBCNEAMC",148,0)
 D INIT S VALMBCK="R"
"RTN","IBCNEAMC",149,0)
 Q
"RTN","IBCNEAMC",150,0)
 ;
"RTN","IBCNEAME")
0^1^B8940686
"RTN","IBCNEAME",1,0)
IBCNEAME ;DAOU/ESG - IIV AUTO MATCH ENTRY/EDIT ;29-APR-2002
"RTN","IBCNEAME",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEAME",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEAME",4,0)
 ;
"RTN","IBCNEAME",5,0)
ENTER ;
"RTN","IBCNEAME",6,0)
 NEW STOP,AMIEN,NEWENTRY
"RTN","IBCNEAME",7,0)
 D INIT
"RTN","IBCNEAME",8,0)
LOOP ;
"RTN","IBCNEAME",9,0)
 D LOOKUP() I STOP G EXIT   ; lookup or add an entry
"RTN","IBCNEAME",10,0)
 D EDIT I STOP G LOOP       ; edit the entry values
"RTN","IBCNEAME",11,0)
 D CONFIRM                  ; display a confirmation message
"RTN","IBCNEAME",12,0)
 G LOOP                     ; repeat
"RTN","IBCNEAME",13,0)
EXIT ;
"RTN","IBCNEAME",14,0)
 Q
"RTN","IBCNEAME",15,0)
 ;
"RTN","IBCNEAME",16,0)
 ;
"RTN","IBCNEAME",17,0)
INIT ; clear the screen; display the purpose of this option
"RTN","IBCNEAME",18,0)
 W @IOF
"RTN","IBCNEAME",19,0)
 W !?14,"Enter/Edit Insurance Company Name Auto Match Entries"
"RTN","IBCNEAME",20,0)
 W !!,"This option will allow you to enter, edit, and manage the entries in the"
"RTN","IBCNEAME",21,0)
 W !,"Insurance Company Auto Match file.  This file will aid in the proper selection"
"RTN","IBCNEAME",22,0)
 W !,"of Insurance Companies by linking together a valid, correct Insurance Company"
"RTN","IBCNEAME",23,0)
 W !,"name with an incorrect entry that a clerk may enter during data entry."
"RTN","IBCNEAME",24,0)
 W !
"RTN","IBCNEAME",25,0)
INITX ;
"RTN","IBCNEAME",26,0)
 Q
"RTN","IBCNEAME",27,0)
 ;
"RTN","IBCNEAME",28,0)
LOOKUP(DEFAULT) ; Procedure to look-up or add an entry
"RTN","IBCNEAME",29,0)
 ;
"RTN","IBCNEAME",30,0)
 ; Optional input parameter DEFAULT will be set if calling this
"RTN","IBCNEAME",31,0)
 ; procedure from routine IBCNEAMC.  Otherwise it will be undefined.
"RTN","IBCNEAME",32,0)
 ;
"RTN","IBCNEAME",33,0)
 NEW DA,DIC,DILN,DISYS,X,Y,DTOUT,DUOUT
"RTN","IBCNEAME",34,0)
 S STOP=0
"RTN","IBCNEAME",35,0)
 S (AMIEN,NEWENTRY)=""
"RTN","IBCNEAME",36,0)
 S DIC="^IBCN(365.11,",DLAYGO=365.11
"RTN","IBCNEAME",37,0)
 S DIC(0)="AELMVZ"
"RTN","IBCNEAME",38,0)
 S DIC("A")="Select an Auto Match Entry: "
"RTN","IBCNEAME",39,0)
 I $G(DEFAULT)'="" S DIC("B")=DEFAULT
"RTN","IBCNEAME",40,0)
 S DIC("W")="D LIST^IBCNEAME(Y)"
"RTN","IBCNEAME",41,0)
 D ^DIC
"RTN","IBCNEAME",42,0)
 I Y=-1!$D(DTOUT)!$D(DUOUT) S STOP=1 G LOOKX
"RTN","IBCNEAME",43,0)
 S AMIEN=+Y
"RTN","IBCNEAME",44,0)
 I $P(Y,U,3) S NEWENTRY=1
"RTN","IBCNEAME",45,0)
LOOKX ;
"RTN","IBCNEAME",46,0)
 Q
"RTN","IBCNEAME",47,0)
 ;
"RTN","IBCNEAME",48,0)
EDIT ; Procedure to Edit the fields for this entry
"RTN","IBCNEAME",49,0)
 NEW DIE,DA,DR,DTOUT,D,D0,DDH,DI,DIC,DISYS,DQ,DZ,X,Y
"RTN","IBCNEAME",50,0)
 S DIE=365.11
"RTN","IBCNEAME",51,0)
 S DA=AMIEN
"RTN","IBCNEAME",52,0)
 S DR=".01;.02;.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEAME",53,0)
 I NEWENTRY D
"RTN","IBCNEAME",54,0)
 . ; if this is a new entry, then stuff in all of these fields
"RTN","IBCNEAME",55,0)
 . ; without user interaction
"RTN","IBCNEAME",56,0)
 . S DR=".03////"_$$NOW^XLFDT_";.04////"_DUZ
"RTN","IBCNEAME",57,0)
 . S DR=DR_";.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEAME",58,0)
 . S DR=DR_";.07////"_$P($G(^IBCN(365.11,DA,0)),U,1)
"RTN","IBCNEAME",59,0)
 . S DR=DR_";.08////"_$P($G(^IBCN(365.11,DA,0)),U,2)
"RTN","IBCNEAME",60,0)
 . Q
"RTN","IBCNEAME",61,0)
 D ^DIE
"RTN","IBCNEAME",62,0)
 I $D(Y) W ! S STOP=1 G EDITX         ; user entered up arrow
"RTN","IBCNEAME",63,0)
 I '$D(DA) W !!?3,"This entry has been deleted.",! S STOP=1 G EDITX
"RTN","IBCNEAME",64,0)
EDITX ;
"RTN","IBCNEAME",65,0)
 Q
"RTN","IBCNEAME",66,0)
 ;
"RTN","IBCNEAME",67,0)
CONFIRM ; Display a confirmation message indicating what was filed
"RTN","IBCNEAME",68,0)
 NEW DATA
"RTN","IBCNEAME",69,0)
 I 'AMIEN G CONFX
"RTN","IBCNEAME",70,0)
 S DATA=$G(^IBCN(365.11,AMIEN,0))
"RTN","IBCNEAME",71,0)
 W !!?3,$P(DATA,U,1)," is now linked with ",$P(DATA,U,2),".",!
"RTN","IBCNEAME",72,0)
CONFX ;
"RTN","IBCNEAME",73,0)
 Q
"RTN","IBCNEAME",74,0)
 ;
"RTN","IBCNEAME",75,0)
LIST(IEN) ; FileMan lister display
"RTN","IBCNEAME",76,0)
 NEW DATA,D1,D2
"RTN","IBCNEAME",77,0)
 ; DATA=^IBCN(365.11,IEN,0)
"RTN","IBCNEAME",78,0)
 S DATA=^(0)
"RTN","IBCNEAME",79,0)
 S D1=$P(DATA,U,1),D2=$P(DATA,U,2)
"RTN","IBCNEAME",80,0)
 W $$FO^IBCNEUT1("",12-$L(D1))," is linked with ",D2
"RTN","IBCNEAME",81,0)
LISTX ;
"RTN","IBCNEAME",82,0)
 Q
"RTN","IBCNEAME",83,0)
 ;
"RTN","IBCNEAMI")
0^2^B20653613
"RTN","IBCNEAMI",1,0)
IBCNEAMI ;DAOU/ESG - IIV AUTO MATCH INPUT TRANSFORM ;06-JUN-2002
"RTN","IBCNEAMI",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEAMI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEAMI",4,0)
 ;
"RTN","IBCNEAMI",5,0)
ITAM ; Input Transform Code for the .01 field - auto match value
"RTN","IBCNEAMI",6,0)
 NEW MSG,MSGNUM,AMHIT,INSNAME
"RTN","IBCNEAMI",7,0)
 I $L(X)>30 D ERRMSG("Response is too long.  30 characters maximum.") K X G ITAMX
"RTN","IBCNEAMI",8,0)
 I $L(X)<3 D ERRMSG("Response is too short.  3 characters minimum.") K X G ITAMX
"RTN","IBCNEAMI",9,0)
 I X["*",$L($TR(X,"*"))<4 D ERRMSG("Wildcarded entries must have at least 4 non-wildcard characters.") K X G ITAMX
"RTN","IBCNEAMI",10,0)
 ;
"RTN","IBCNEAMI",11,0)
 S X=$$UP^XLFSTR(X)      ; make it all uppercase
"RTN","IBCNEAMI",12,0)
 S X=$$TRIM^XLFSTR(X)    ; strip leading & trailing spaces
"RTN","IBCNEAMI",13,0)
 ;
"RTN","IBCNEAMI",14,0)
 ; Translate multiple asterisks into a single asterisk
"RTN","IBCNEAMI",15,0)
 I X["**" F  S X=$P(X,"**",1)_"*"_$P(X,"**",2,999) Q:X'["**"
"RTN","IBCNEAMI",16,0)
 ;
"RTN","IBCNEAMI",17,0)
 I $G(DIUTIL)="VERIFY FIELDS" G ITAMX
"RTN","IBCNEAMI",18,0)
 ;
"RTN","IBCNEAMI",19,0)
 I X["*" D
"RTN","IBCNEAMI",20,0)
 . D ICH(X,1)   ; procedure builds a scratch global of hits
"RTN","IBCNEAMI",21,0)
 . ;
"RTN","IBCNEAMI",22,0)
 . ; check to see if no hits at all, display message, then quit
"RTN","IBCNEAMI",23,0)
 . I '$D(^TMP($J,"IBCNEAME ICH")) D  Q
"RTN","IBCNEAMI",24,0)
 .. S MSG(1)=" For your information, no insurance company names or synonyms passed"
"RTN","IBCNEAMI",25,0)
 .. S MSG(2)=" a pattern match on '"_X_"'."
"RTN","IBCNEAMI",26,0)
 .. S MSG(3)=""
"RTN","IBCNEAMI",27,0)
 .. S MSG(1,"F")="!!"
"RTN","IBCNEAMI",28,0)
 .. DO EN^DDIOL(.MSG)
"RTN","IBCNEAMI",29,0)
 .. Q
"RTN","IBCNEAMI",30,0)
 . ;
"RTN","IBCNEAMI",31,0)
 . ; At this point, we know we got some hits
"RTN","IBCNEAMI",32,0)
 . S MSG(1)=" For your information, the following insurance company names and"
"RTN","IBCNEAMI",33,0)
 . S MSG(2)=" synonyms passed a pattern match on '"_X_"':"
"RTN","IBCNEAMI",34,0)
 . S MSG(3)=""
"RTN","IBCNEAMI",35,0)
 . S MSG(1,"F")="!!"
"RTN","IBCNEAMI",36,0)
 . S AMHIT="",MSGNUM=3
"RTN","IBCNEAMI",37,0)
 . F  S AMHIT=$O(^TMP($J,"IBCNEAME ICH",AMHIT)) Q:AMHIT=""  D
"RTN","IBCNEAMI",38,0)
 .. ;
"RTN","IBCNEAMI",39,0)
 .. ; If the $D at this level is either 1 or 11, then we want to
"RTN","IBCNEAMI",40,0)
 .. ; display the data.  If the $D at this level is a 10, then we
"RTN","IBCNEAMI",41,0)
 .. ; don't want to display this data at this time.
"RTN","IBCNEAMI",42,0)
 .. ;
"RTN","IBCNEAMI",43,0)
 .. I $D(^TMP($J,"IBCNEAME ICH",AMHIT))'=10 D
"RTN","IBCNEAMI",44,0)
 ... S MSGNUM=MSGNUM+1
"RTN","IBCNEAMI",45,0)
 ... S MSG(MSGNUM)="   "_AMHIT
"RTN","IBCNEAMI",46,0)
 ... Q
"RTN","IBCNEAMI",47,0)
 .. S INSNAME=""
"RTN","IBCNEAMI",48,0)
 .. F  S INSNAME=$O(^TMP($J,"IBCNEAME ICH",AMHIT,INSNAME)) Q:INSNAME=""  D
"RTN","IBCNEAMI",49,0)
 ... S MSGNUM=MSGNUM+1
"RTN","IBCNEAMI",50,0)
 ... S MSG(MSGNUM)="   "_AMHIT_" (Synonym for "_INSNAME_")"
"RTN","IBCNEAMI",51,0)
 ... Q
"RTN","IBCNEAMI",52,0)
 .. Q
"RTN","IBCNEAMI",53,0)
 . S MSGNUM=MSGNUM+1
"RTN","IBCNEAMI",54,0)
 . S MSG(MSGNUM)=""    ; one more blank line on the screen
"RTN","IBCNEAMI",55,0)
 . DO EN^DDIOL(.MSG)
"RTN","IBCNEAMI",56,0)
 . KILL ^TMP($J,"IBCNEAME ICH")    ; clean up scratch global
"RTN","IBCNEAMI",57,0)
 . Q
"RTN","IBCNEAMI",58,0)
 ;
"RTN","IBCNEAMI",59,0)
ITAMX ;
"RTN","IBCNEAMI",60,0)
 Q
"RTN","IBCNEAMI",61,0)
 ;
"RTN","IBCNEAMI",62,0)
ITIC ; Input Transform Code for the .02 field - ins company name
"RTN","IBCNEAMI",63,0)
 ; This field must be a valid, active insurance company name
"RTN","IBCNEAMI",64,0)
 I $L(X)>30 D ERRMSG("Response is too long.  30 characters maximum.") K X G ITICX
"RTN","IBCNEAMI",65,0)
 S X=$$UP^XLFSTR(X)
"RTN","IBCNEAMI",66,0)
 S X=$$TRIM^XLFSTR(X)
"RTN","IBCNEAMI",67,0)
 ;
"RTN","IBCNEAMI",68,0)
 I $G(DIUTIL)="VERIFY FIELDS" G ITICX
"RTN","IBCNEAMI",69,0)
 ;
"RTN","IBCNEAMI",70,0)
 ; Call the IB insurance company lister function
"RTN","IBCNEAMI",71,0)
 S X=$$DICINS^IBCNBU1(X,1,10)
"RTN","IBCNEAMI",72,0)
 ;
"RTN","IBCNEAMI",73,0)
 ; Make sure the user chose a valid insurance company name
"RTN","IBCNEAMI",74,0)
 I X=0!(X=-1) D ERRMSG("You must choose a valid insurance company name.  Enter ?? for more info.") K X G ITICX
"RTN","IBCNEAMI",75,0)
ITICX ;
"RTN","IBCNEAMI",76,0)
 Q
"RTN","IBCNEAMI",77,0)
 ;
"RTN","IBCNEAMI",78,0)
ERRMSG(Z) ; Display an error message
"RTN","IBCNEAMI",79,0)
 D EN^DDIOL(Z,"","!!")
"RTN","IBCNEAMI",80,0)
ERRMSGX ;
"RTN","IBCNEAMI",81,0)
 Q
"RTN","IBCNEAMI",82,0)
 ;
"RTN","IBCNEAMI",83,0)
ICH(AMV,ACTIVE) ; Insurance Company Hits
"RTN","IBCNEAMI",84,0)
 ; This procedure will return a global array of insurance company
"RTN","IBCNEAMI",85,0)
 ; names and synonyms that passed a pattern match of a given
"RTN","IBCNEAMI",86,0)
 ; wildcarded auto-match entry.
"RTN","IBCNEAMI",87,0)
 ;
"RTN","IBCNEAMI",88,0)
 ; Input
"RTN","IBCNEAMI",89,0)
 ;   AMV      auto match value with *'s
"RTN","IBCNEAMI",90,0)
 ;   ACTIVE   0/1 flag indicating to screen for active insurance
"RTN","IBCNEAMI",91,0)
 ;            companies (default is 0 - don't screen)
"RTN","IBCNEAMI",92,0)
 ; Output
"RTN","IBCNEAMI",93,0)
 ;   ^TMP($J,"IBCNEAME ICH",name) = ""
"RTN","IBCNEAMI",94,0)
 ;   ^TMP($J,"IBCNEAME ICH",synonym,name) = ""
"RTN","IBCNEAMI",95,0)
 ;
"RTN","IBCNEAMI",96,0)
 NEW IBSUB,INSIEN,INSNAME,INSTXT,NOMATCH,SEED,STOP
"RTN","IBCNEAMI",97,0)
 KILL ^TMP($J,"IBCNEAME ICH")
"RTN","IBCNEAMI",98,0)
 I AMV'["*" G ICHX              ; no wildcard characters
"RTN","IBCNEAMI",99,0)
 I $L($TR(AMV,"*"))<4 G ICHX    ; not enough non-wildcard characters
"RTN","IBCNEAMI",100,0)
 S ACTIVE=$G(ACTIVE,0)          ; active/inactive flag - default 0
"RTN","IBCNEAMI",101,0)
 ;
"RTN","IBCNEAMI",102,0)
 ; build the NOMATCH check
"RTN","IBCNEAMI",103,0)
 D AMC^IBCNEUT1("INSTXT",AMV,.NOMATCH,0)
"RTN","IBCNEAMI",104,0)
 ;
"RTN","IBCNEAMI",105,0)
 F IBSUB="B","C" D
"RTN","IBCNEAMI",106,0)
 . S SEED=$P(AMV,"*",1),INSTXT=""
"RTN","IBCNEAMI",107,0)
 . I SEED'="" S INSTXT=$O(^DIC(36,IBSUB,SEED),-1)
"RTN","IBCNEAMI",108,0)
 . F  S INSTXT=$O(^DIC(36,IBSUB,INSTXT)) Q:INSTXT=""  Q:(SEED'=""&($E(INSTXT,1,$L(SEED))'=SEED))  D
"RTN","IBCNEAMI",109,0)
 .. I @NOMATCH Q
"RTN","IBCNEAMI",110,0)
 .. S (INSIEN,STOP)=0     ; loop thru ien's below
"RTN","IBCNEAMI",111,0)
 .. F  S INSIEN=$O(^DIC(36,IBSUB,INSTXT,INSIEN)) Q:'INSIEN  D  Q:STOP
"RTN","IBCNEAMI",112,0)
 ... I ACTIVE,$P($G(^DIC(36,INSIEN,0)),U,5) Q     ; inactive
"RTN","IBCNEAMI",113,0)
 ... I ACTIVE,$P($G(^DIC(36,INSIEN,5)),U,1) Q     ; sched. for deletion
"RTN","IBCNEAMI",114,0)
 ... S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1) Q:INSNAME=""
"RTN","IBCNEAMI",115,0)
 ... ;
"RTN","IBCNEAMI",116,0)
 ... ; If looping thru names, we can stop here
"RTN","IBCNEAMI",117,0)
 ... I IBSUB="B" S ^TMP($J,"IBCNEAME ICH",INSTXT)="",STOP=1 Q
"RTN","IBCNEAMI",118,0)
 ... ;
"RTN","IBCNEAMI",119,0)
 ... ; Looping thru synonyms...keep going
"RTN","IBCNEAMI",120,0)
 ... S ^TMP($J,"IBCNEAME ICH",INSTXT,INSNAME)=""
"RTN","IBCNEAMI",121,0)
 ... Q
"RTN","IBCNEAMI",122,0)
 .. Q
"RTN","IBCNEAMI",123,0)
 . Q
"RTN","IBCNEAMI",124,0)
ICHX ;
"RTN","IBCNEAMI",125,0)
 Q
"RTN","IBCNEAMI",126,0)
 ;
"RTN","IBCNEBF")
0^40^B26327427
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon
"RTN","IBCNEBF",7,0)
 ;  input values
"RTN","IBCNEBF",8,0)
 ;
"RTN","IBCNEBF",9,0)
 Q
"RTN","IBCNEBF",10,0)
 ;
"RTN","IBCNEBF",11,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data from a specific patient and insurance
"RTN","IBCNEBF",12,0)
 ;  record entry
"RTN","IBCNEBF",13,0)
 ;
"RTN","IBCNEBF",14,0)
 ;  Input Parameters
"RTN","IBCNEBF",15,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",16,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",17,0)
 ;    SYMBOL = IIV Symbol IEN
"RTN","IBCNEBF",18,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",19,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",20,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",21,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",22,0)
 ;
"RTN","IBCNEBF",23,0)
 I DFN=""!(IRIEN="") Q   ; * do not required SYMBOL or OVRRIDE
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 ;
"RTN","IBCNEBF",26,0)
 NEW VBUF,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE
"RTN","IBCNEBF",27,0)
 NEW BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",28,0)
 NEW MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",29,0)
 ;
"RTN","IBCNEBF",30,0)
 S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",31,0)
 S INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",32,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3)
"RTN","IBCNEBF",33,0)
 S BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",34,0)
 S NAME=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEBF",35,0)
 S SUBID=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2)
"RTN","IBCNEBF",36,0)
 S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEBF",37,0)
 S COB=$P($G(^DPT(DFN,.312,IRIEN,0)),U,20)
"RTN","IBCNEBF",38,0)
 S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1)
"RTN","IBCNEBF",39,0)
 S ISSN=$P($G(^DPT(DFN,.312,IRIEN,3)),U,5)
"RTN","IBCNEBF",40,0)
 S EFFDT=$P(^DPT(DFN,.312,IRIEN,0),U,8)
"RTN","IBCNEBF",41,0)
 S EXPDT=$P(^DPT(DFN,.312,IRIEN,0),U,4)
"RTN","IBCNEBF",42,0)
 S REL=$P(^DPT(DFN,.312,IRIEN,0),U,16)
"RTN","IBCNEBF",43,0)
 ;
"RTN","IBCNEBF",44,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",45,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",46,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",47,0)
 ;
"RTN","IBCNEBF",48,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",49,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",50,0)
 ;
"RTN","IBCNEBF",51,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",52,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",53,0)
 ;
"RTN","IBCNEBF",54,0)
 D FIL
"RTN","IBCNEBF",55,0)
 K ADD
"RTN","IBCNEBF",56,0)
 Q
"RTN","IBCNEBF",57,0)
 ;
"RTN","IBCNEBF",58,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",59,0)
 ;
"RTN","IBCNEBF",60,0)
 ;  Input Parameter
"RTN","IBCNEBF",61,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",62,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",63,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",64,0)
 ;
"RTN","IBCNEBF",65,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",66,0)
 ;
"RTN","IBCNEBF",67,0)
 NEW PIEN,RSTYPE
"RTN","IBCNEBF",68,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",69,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",70,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",71,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",72,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",73,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",74,0)
 . I IIEN="" Q
"RTN","IBCNEBF",75,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",76,0)
 S RDATA=$G(^IBCN(365,IEN,1))
"RTN","IBCNEBF",77,0)
 S NAME=$P(RDATA,U,1)
"RTN","IBCNEBF",78,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",79,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",80,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",81,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",82,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",83,0)
 S SUBID=$P(RDATA,U,5)
"RTN","IBCNEBF",84,0)
 S GNAME=$P(RDATA,U,6)
"RTN","IBCNEBF",85,0)
 S GNUMB=$P(RDATA,U,7)
"RTN","IBCNEBF",86,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",87,0)
 S REL=$P(RDATA,U,9)
"RTN","IBCNEBF",88,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",89,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",90,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",91,0)
 ;
"RTN","IBCNEBF",92,0)
 D FIL
"RTN","IBCNEBF",93,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE
"RTN","IBCNEBF",94,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",95,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS
"RTN","IBCNEBF",96,0)
 Q
"RTN","IBCNEBF",97,0)
 ;
"RTN","IBCNEBF",98,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",99,0)
 ;
"RTN","IBCNEBF",100,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",101,0)
 ;
"RTN","IBCNEBF",102,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",103,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",104,0)
 ;
"RTN","IBCNEBF",105,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEBF",106,0)
 ;
"RTN","IBCNEBF",107,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",108,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",109,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",110,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",111,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",112,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",113,0)
 . S VBUF(40.03)=GNUMB  ; Group Number
"RTN","IBCNEBF",114,0)
 . S VBUF(40.02)=GNAME  ; Group Name
"RTN","IBCNEBF",115,0)
 . S VBUF(60.07)=NAME  ; Name of Insured
"RTN","IBCNEBF",116,0)
 . S VBUF(60.04)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",117,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",118,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",119,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",120,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",121,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",122,0)
 . S VBUF(60.06)=REL  ;  Patient Relationship
"RTN","IBCNEBF",123,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",124,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",125,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",126,0)
 . ;
"RTN","IBCNEBF",127,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",128,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",129,0)
 ;
"RTN","IBCNEBF",130,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",131,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",132,0)
 ;
"RTN","IBCNEBF",133,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",134,0)
 S IBERROR=""
"RTN","IBCNEBF",135,0)
 ;
"RTN","IBCNEBF",136,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",137,0)
 ;
"RTN","IBCNEBF",138,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",139,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",140,0)
 ;
"RTN","IBCNEBF",141,0)
 I $G(ADD) D
"RTN","IBCNEBF",142,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",143,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",144,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",145,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",146,0)
 ;
"RTN","IBCNEBF",147,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",148,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",149,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",150,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",151,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",152,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",153,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",154,0)
 . S XMSUB="Error creating Buffer Entry"
"RTN","IBCNEBF",155,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",156,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",157,0)
 ;
"RTN","IBCNEBF",158,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",159,0)
 ;
"RTN","IBCNEBF",160,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",161,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",162,0)
 ;  is edited in this case.
"RTN","IBCNEBF",163,0)
 ;
"RTN","IBCNEBF",164,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",165,0)
 ;
"RTN","IBCNEBF",166,0)
 ;  If an error occured in EDITSTF, the error array is not returned
"RTN","IBCNEBF",167,0)
 ;
"RTN","IBCNEBF",168,0)
 Q
"RTN","IBCNEDE")
0^35^B62221269
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - IIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the Insurance Identification and Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This propram will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the IIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquires in the IIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 S $P(^IBE(350.9,1,51),U,22)=0
"RTN","IBCNEDE",23,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",24,0)
 ;  the existing utility
"RTN","IBCNEDE",25,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",26,0)
 ;
"RTN","IBCNEDE",27,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",28,0)
 ; before the extract is run
"RTN","IBCNEDE",29,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",30,0)
 ;
"RTN","IBCNEDE",31,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",32,0)
 ;
"RTN","IBCNEDE",33,0)
 ; Run All 4 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",34,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",35,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",36,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",37,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",38,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",39,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",40,0)
 D EN^IBCNEDE3 ; Non Verified Extract
"RTN","IBCNEDE",41,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",42,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",43,0)
 D EN^IBCNEDE4 ; No Insurance Extract
"RTN","IBCNEDE",44,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",45,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",46,0)
 ; Send enrollment message
"RTN","IBCNEDE",47,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",48,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",49,0)
 I '$G(QFL) D
"RTN","IBCNEDE",50,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",51,0)
 . D WAIT  Q:'QFL
"RTN","IBCNEDE",52,0)
 . KILL QFL
"RTN","IBCNEDE",53,0)
 . ;
"RTN","IBCNEDE",54,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",55,0)
 ;
"RTN","IBCNEDE",56,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",57,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",58,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",59,0)
 ;
"RTN","IBCNEDE",60,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",61,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",62,0)
 Q
"RTN","IBCNEDE",63,0)
 ;
"RTN","IBCNEDE",64,0)
TBLCHK() ;
"RTN","IBCNEDE",65,0)
 ; Confirm that at least one IIV payer and that all X12 tables
"RTN","IBCNEDE",66,0)
 ; have been loaded
"RTN","IBCNEDE",67,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",68,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",69,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",70,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",71,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",72,0)
 I PAYOK D
"RTN","IBCNEDE",73,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",74,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",75,0)
 ;
"RTN","IBCNEDE",76,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",77,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",78,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",79,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",80,0)
 F  D  Q:QFL!(CT>360)
"RTN","IBCNEDE",81,0)
 . S QFL=+$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",82,0)
 . Q:QFL
"RTN","IBCNEDE",83,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",84,0)
 KILL CT
"RTN","IBCNEDE",85,0)
 Q
"RTN","IBCNEDE",86,0)
 ; 
"RTN","IBCNEDE",87,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE",88,0)
 ; Input Parameter:
"RTN","IBCNEDE",89,0)
 ;
"RTN","IBCNEDE",90,0)
 ; EXTNUM is either 1, 2, 3, 4 to represent the different extracts
"RTN","IBCNEDE",91,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE",92,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE",93,0)
 ; 3 - Non Verified
"RTN","IBCNEDE",94,0)
 ; 4 - No Ins. / No Active
"RTN","IBCNEDE",95,0)
 ;
"RTN","IBCNEDE",96,0)
 ; Output:
"RTN","IBCNEDE",97,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE",98,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE",99,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE",100,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE",101,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE",102,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE",103,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE",104,0)
 ;          extract routine.
"RTN","IBCNEDE",105,0)
 ;    Max Number of entries you are allowed to set into the IIV 
"RTN","IBCNEDE",106,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE",107,0)
 ;          unlimited.
"RTN","IBCNEDE",108,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE",109,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE",110,0)
 ;          0 will not
"RTN","IBCNEDE",111,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE",112,0)
 ;
"RTN","IBCNEDE",113,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE",114,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE",115,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,EXTNUM=4:1,1:0)
"RTN","IBCNEDE",116,0)
 I 'OK G EXIT
"RTN","IBCNEDE",117,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE",118,0)
 ;
"RTN","IBCNEDE",119,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE",120,0)
 ;
"RTN","IBCNEDE",121,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE",122,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE",123,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE",124,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE",125,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE",126,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE",127,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE",128,0)
EXIT ;
"RTN","IBCNEDE",129,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE",130,0)
 I EXTNUM=3!(EXTNUM=4) D
"RTN","IBCNEDE",131,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE",132,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE",133,0)
 ;
"RTN","IBCNEDE",134,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE",135,0)
 ;
"RTN","IBCNEDE",136,0)
 ; DATA1, DATA2, & ORIG are "^" delimited variables containing the data
"RTN","IBCNEDE",137,0)
 ; listed below
"RTN","IBCNEDE",138,0)
 ;
"RTN","IBCNEDE",139,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE",140,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE",141,0)
 ;
"RTN","IBCNEDE",142,0)
 N FDA,IENARRAY,ERROR,TRANSNO
"RTN","IBCNEDE",143,0)
 ;
"RTN","IBCNEDE",144,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE",145,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE",146,0)
 ;
"RTN","IBCNEDE",147,0)
 S FDA(365.1,"+1,",.02)=$P(DATA1,U)         ; patient DFN
"RTN","IBCNEDE",148,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE",149,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE",150,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE",151,0)
 S FDA(365.1,"+1,",.05)=$P(DATA1,U,4)       ; ien of buffer
"RTN","IBCNEDE",152,0)
 ;
"RTN","IBCNEDE",153,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE",154,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE",155,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE",156,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE",157,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE",158,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE",159,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE",160,0)
 ;
"RTN","IBCNEDE",161,0)
 I $D(DATA2) D
"RTN","IBCNEDE",162,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE",163,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE",164,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE",165,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE",166,0)
 ;
"RTN","IBCNEDE",167,0)
 I $D(ORIG) D
"RTN","IBCNEDE",168,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE",169,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE",170,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE",171,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE",172,0)
 ;
"RTN","IBCNEDE",173,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE",174,0)
 ;
"RTN","IBCNEDE",175,0)
 I $D(ERROR) D  ; MailMan msg
"RTN","IBCNEDE",176,0)
 . NEW MGRP,XMSUB,MSG
"RTN","IBCNEDE",177,0)
 . KILL MSG
"RTN","IBCNEDE",178,0)
 . ;
"RTN","IBCNEDE",179,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",180,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",181,0)
 . ;
"RTN","IBCNEDE",182,0)
 . S XMSUB="IIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE",183,0)
 . S MSG(1)="Tried to create an entry in the IIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE",184,0)
 . S MSG(2)="success."
"RTN","IBCNEDE",185,0)
 . S MSG(3)=""
"RTN","IBCNEDE",186,0)
 . S MSG(4)="Error encountered: "_ERROR("DIERR",1,"TEXT",1)
"RTN","IBCNEDE",187,0)
 . S MSG(5)=""
"RTN","IBCNEDE",188,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE",189,0)
 . S MSG(7)=""
"RTN","IBCNEDE",190,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE",191,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)
"RTN","IBCNEDE",192,0)
 . S MSG(10)="Extract: "_$G(FDA(365.1,"+1,",.1))
"RTN","IBCNEDE",193,0)
 . S MSG(11)="Payer: "_$P($G(^IBE(365.12,FDA(365.1,"+1,",.03),0)),U,1)
"RTN","IBCNEDE",194,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE",195,0)
 ;
"RTN","IBCNEDE",196,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE",197,0)
 ;
"RTN","IBCNEDE",198,0)
 ;
"RTN","IBCNEDE",199,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",200,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",201,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",202,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",203,0)
 N STALEDT
"RTN","IBCNEDE",204,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",205,0)
 Q STALEDT
"RTN","IBCNEDE",206,0)
 ;
"RTN","IBCNEDE",207,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",208,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",209,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",210,0)
 ; defined this appropriately in the IIV site parameters.
"RTN","IBCNEDE",211,0)
 ;
"RTN","IBCNEDE",212,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",213,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",214,0)
 ;
"RTN","IBCNEDE",215,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",216,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",217,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",218,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",219,0)
 ;
"RTN","IBCNEDE",220,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",221,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",222,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",223,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",224,0)
 ;
"RTN","IBCNEDE",225,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",226,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",227,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",228,0)
 ;
"RTN","IBCNEDE",229,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",230,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",231,0)
 ;
"RTN","IBCNEDE",232,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",233,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",234,0)
 S ZTDESC="IIV Daily Statistics E-Mail"
"RTN","IBCNEDE",235,0)
 S ZTIO=""
"RTN","IBCNEDE",236,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",237,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",238,0)
 ;
"RTN","IBCNEDE",239,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",240,0)
 S MSG(1)="TaskManager could not schedule the daily IIV MailMan message"
"RTN","IBCNEDE",241,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",242,0)
 S MSG(3)="This is defined in the IIV Site Parameters option."
"RTN","IBCNEDE",243,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",244,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",245,0)
 D MSG^IBCNEUT5(MGRP,"IIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",246,0)
 ;
"RTN","IBCNEDE",247,0)
MMQX ;
"RTN","IBCNEDE",248,0)
 Q
"RTN","IBCNEDE",249,0)
 ;
"RTN","IBCNEDE1")
0^36^B32948598
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - IIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates IIV transaction queue entries when approriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SCNT5,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop throught the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Get the IIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",47,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",48,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",51,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",52,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",53,0)
 .. ;
"RTN","IBCNEDE1",54,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",55,0)
 .. S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ; Service Date
"RTN","IBCNEDE1",56,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",57,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",58,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",59,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",60,0)
 .. ;
"RTN","IBCNEDE1",61,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",62,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",63,0)
 .. ;
"RTN","IBCNEDE1",64,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",65,0)
 .. ;
"RTN","IBCNEDE1",66,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",67,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",68,0)
 .. ;
"RTN","IBCNEDE1",69,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",70,0)
 .. ;  date range
"RTN","IBCNEDE1",71,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",72,0)
 .. ;
"RTN","IBCNEDE1",73,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",74,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",75,0)
 .. ;
"RTN","IBCNEDE1",76,0)
 .. ; If freshness overide flag is set, file to TQ and quit
"RTN","IBCNEDE1",77,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",78,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",79,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",80,0)
 ... D TQ
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; If ADDTQ^IBCNEUT5 is 1 set TQ, otherwise stop processing that entry
"RTN","IBCNEDE1",83,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE1",84,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",85,0)
 .. ; not included
"RTN","IBCNEDE1",86,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",87,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",88,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",89,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",90,0)
 .. I TQOK D TQ
"RTN","IBCNEDE1",91,0)
 Q
"RTN","IBCNEDE1",92,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",93,0)
 ;
"RTN","IBCNEDE1",94,0)
 S BSID=$P($G(^IBA(355.33,IEN,60)),U,4)     ; Subscriber ID from buffer
"RTN","IBCNEDE1",95,0)
 K SIDARRAY
"RTN","IBCNEDE1",96,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",97,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",98,0)
 S SIDCNT=$P(SIDDATA,U,2)                   ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",99,0)
 ;
"RTN","IBCNEDE1",100,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q    ; update buffer w/ bang & quit
"RTN","IBCNEDE1",101,0)
 S SCNT5=$S(SIDACT=5:1,1:0)
"RTN","IBCNEDE1",102,0)
 I CNT+SCNT5+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",103,0)
 S SID=""
"RTN","IBCNEDE1",104,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE1",105,0)
 . I SIDACT=5 D SET(IEN,OVRFRESH,0,$P(SID,"_")) Q  ; set TQ w/o 'Pass Buffer' flag
"RTN","IBCNEDE1",106,0)
 . D SET(IEN,OVRFRESH,1,$P(SID,"_"))       ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",107,0)
 I SIDACT=4!(SIDACT=5) D SET(IEN,OVRFRESH,1,"")  ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",108,0)
 Q
"RTN","IBCNEDE1",109,0)
 ;
"RTN","IBCNEDE1",110,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",111,0)
 ;
"RTN","IBCNEDE1",112,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",113,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,40)) ; Original group string
"RTN","IBCNEDE1",114,0)
 S ORGRPNUM=$P(ORGRPSTR,U,3) ;Original group number
"RTN","IBCNEDE1",115,0)
 S ORGRPNAM=$P(ORGRPSTR,U,2) ;Original group name
"RTN","IBCNEDE1",116,0)
 S ORGSUBCR=$P($G(^IBA(355.33,IEN,60)),U,4) ; Original subscriber
"RTN","IBCNEDE1",117,0)
 ;
"RTN","IBCNEDE1",118,0)
 Q
"RTN","IBCNEDE1",119,0)
 ;
"RTN","IBCNEDE1",120,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",121,0)
 D RET
"RTN","IBCNEDE1",122,0)
 ;
"RTN","IBCNEDE1",123,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",124,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",125,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",126,0)
 ;
"RTN","IBCNEDE1",127,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",128,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",129,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",130,0)
 ;
"RTN","IBCNEDE1",131,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",132,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",133,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",134,0)
 ;
"RTN","IBCNEDE1",135,0)
 Q
"RTN","IBCNEDE2")
0^37^B36569439
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - IIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT
"RTN","IBCNEDE2",16,0)
 N APTDT,APTNUM,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SCNT5,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE(2)      ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 ;
"RTN","IBCNEDE2",32,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",33,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",34,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",35,0)
 . ;
"RTN","IBCNEDE2",36,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",37,0)
 . ;
"RTN","IBCNEDE2",38,0)
 . S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",39,0)
 . ;
"RTN","IBCNEDE2",40,0)
 . ; Loop through dates in range at clinic
"RTN","IBCNEDE2",41,0)
 . F  S APTDT=$O(^SC(CLNC,"S",APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",42,0)
 .. S APTNUM=0 ; Init Appoint #
"RTN","IBCNEDE2",43,0)
 .. S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",44,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",45,0)
 .. ;
"RTN","IBCNEDE2",46,0)
 .. ; Loop through all appointments on each date 
"RTN","IBCNEDE2",47,0)
 .. F  S APTNUM=$O(^SC(CLNC,"S",APTDT,1,APTNUM)) Q:('APTNUM)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",48,0)
 ... ;
"RTN","IBCNEDE2",49,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",50,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",51,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",52,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",53,0)
 ... ;
"RTN","IBCNEDE2",54,0)
 ... S DFN=$P(^SC(CLNC,"S",APTDT,1,APTNUM,0),U,1),ELG=$P(^(0),U,10)
"RTN","IBCNEDE2",55,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",56,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",57,0)
 ... ;
"RTN","IBCNEDE2",58,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",59,0)
 ... D INP Q:'OK     ; Check for inpatient status
"RTN","IBCNEDE2",60,0)
 ... ;
"RTN","IBCNEDE2",61,0)
 ... K ACTINS
"RTN","IBCNEDE2",62,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",1)
"RTN","IBCNEDE2",63,0)
 ... ;
"RTN","IBCNEDE2",64,0)
 ... I '$D(ACTINS(0)) D NOACTIVE Q   ; Patient has no active ins
"RTN","IBCNEDE2",65,0)
 ... ;
"RTN","IBCNEDE2",66,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",67,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",68,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",69,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",70,0)
 ... . ;
"RTN","IBCNEDE2",71,0)
 ... . ; check for ins. to exclude (i.e. Medicare/Medicaid)
"RTN","IBCNEDE2",72,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",73,0)
 ... . ;
"RTN","IBCNEDE2",74,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",75,0)
 ... . ;
"RTN","IBCNEDE2",76,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",77,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",78,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",79,0)
 ... . ;
"RTN","IBCNEDE2",80,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",81,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",82,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",83,0)
 ... . ;
"RTN","IBCNEDE2",84,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",85,0)
 ... . ;  date range
"RTN","IBCNEDE2",86,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",87,0)
 ... . ;
"RTN","IBCNEDE2",88,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",89,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",90,0)
 ... . ;
"RTN","IBCNEDE2",91,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",92,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",93,0)
 ... . ;
"RTN","IBCNEDE2",94,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",95,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",96,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",97,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",98,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",99,0)
 ... . S SCNT5=$S(SIDACT=5:1,1:0)
"RTN","IBCNEDE2",100,0)
 ... . I CNT+SCNT5+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",101,0)
 ... . ;
"RTN","IBCNEDE2",102,0)
 ... . S SID=""
"RTN","IBCNEDE2",103,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D SET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE2",104,0)
 ... . I SIDACT=4!(SIDACT=5) D SET("","")
"RTN","IBCNEDE2",105,0)
 ... . Q
"RTN","IBCNEDE2",106,0)
 ... Q
"RTN","IBCNEDE2",107,0)
 Q
"RTN","IBCNEDE2",108,0)
 ;
"RTN","IBCNEDE2",109,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",110,0)
 S OK=1
"RTN","IBCNEDE2",111,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",112,0)
 Q
"RTN","IBCNEDE2",113,0)
 ;
"RTN","IBCNEDE2",114,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",115,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",116,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",117,0)
 S OK=1
"RTN","IBCNEDE2",118,0)
 Q
"RTN","IBCNEDE2",119,0)
 ;
"RTN","IBCNEDE2",120,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",121,0)
 D INP^VADPT
"RTN","IBCNEDE2",122,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",123,0)
 K VAIN
"RTN","IBCNEDE2",124,0)
 S OK=1
"RTN","IBCNEDE2",125,0)
 Q
"RTN","IBCNEDE2",126,0)
 ;
"RTN","IBCNEDE2",127,0)
NOACTIVE ; No active insurance
"RTN","IBCNEDE2",128,0)
 ;
"RTN","IBCNEDE2",129,0)
 ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE2",130,0)
 ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE2",131,0)
 ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE2",132,0)
 ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE2",133,0)
 ;
"RTN","IBCNEDE2",134,0)
 K IBINS,IBDD,IBDDI
"RTN","IBCNEDE2",135,0)
 S IBINDT=APTDT,IBOUTP=2,(FOUND1,FOUND2)=0
"RTN","IBCNEDE2",136,0)
 ;
"RTN","IBCNEDE2",137,0)
 D ^IBCNS
"RTN","IBCNEDE2",138,0)
 K IBDD           ; don't need this array
"RTN","IBCNEDE2",139,0)
 I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE2",140,0)
 ;
"RTN","IBCNEDE2",141,0)
 ; Inactive Insurance
"RTN","IBCNEDE2",142,0)
 I CNT<MAXCNT,$D(IBDDI)>0 S FOUND2=$$INAC^IBCNEDE6(.CNT,MAXCNT,.IBDDI,SRVICEDT,FRESHDAY,1)
"RTN","IBCNEDE2",143,0)
 ;
"RTN","IBCNEDE2",144,0)
 ; Popular insurance
"RTN","IBCNEDE2",145,0)
 I CNT<MAXCNT S FOUND1=$$POP^IBCNEDE4(.CNT,MAXCNT,SRVICEDT,FRESHDAY,1)
"RTN","IBCNEDE2",146,0)
 ;
"RTN","IBCNEDE2",147,0)
 I 'FOUND1,'FOUND2,(CNT<MAXCNT) D BLANKTQ
"RTN","IBCNEDE2",148,0)
 ;
"RTN","IBCNEDE2",149,0)
 K INS,IBBDI
"RTN","IBCNEDE2",150,0)
 Q
"RTN","IBCNEDE2",151,0)
 ;
"RTN","IBCNEDE2",152,0)
SET(SID,INR) ; Set data in TQ
"RTN","IBCNEDE2",153,0)
 ;
"RTN","IBCNEDE2",154,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",155,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",156,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",157,0)
 ;
"RTN","IBCNEDE2",158,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",159,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",160,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",161,0)
 ;
"RTN","IBCNEDE2",162,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",163,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",164,0)
 ;
"RTN","IBCNEDE2",165,0)
 Q
"RTN","IBCNEDE2",166,0)
 ;
"RTN","IBCNEDE2",167,0)
BLANKTQ ; no new records were created in file 365.1 for this DFN
"RTN","IBCNEDE2",168,0)
 ; need to check if a blank inquiry exists (patient w/o a payer)
"RTN","IBCNEDE2",169,0)
 ; if it doesn't exist create a new blank inquiry
"RTN","IBCNEDE2",170,0)
 ;
"RTN","IBCNEDE2",171,0)
 N DISYS
"RTN","IBCNEDE2",172,0)
 S PIEN=$$FIND1^DIC(365.12,,"X","~NO PAYER"),SID=""
"RTN","IBCNEDE2",173,0)
 ;
"RTN","IBCNEDE2",174,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE2",175,0)
 ;  date range
"RTN","IBCNEDE2",176,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",177,0)
 ; 
"RTN","IBCNEDE2",178,0)
 ; Update service dates for inquiry to be transmitted - necessary here?
"RTN","IBCNEDE2",179,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",180,0)
 ;
"RTN","IBCNEDE2",181,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) G BLANKXT
"RTN","IBCNEDE2",182,0)
 ;
"RTN","IBCNEDE2",183,0)
 S QURYFLAG="I" D SET("","")
"RTN","IBCNEDE2",184,0)
 S PIEN=""
"RTN","IBCNEDE2",185,0)
BLANKXT ;
"RTN","IBCNEDE2",186,0)
 Q
"RTN","IBCNEDE2",187,0)
 ;
"RTN","IBCNEDE3")
0^38^B50082845
"RTN","IBCNEDE3",1,0)
IBCNEDE3 ;DAOU/DJW - NONVERINS DATA EXTRACT ;18-JUN-2002
"RTN","IBCNEDE3",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE3",4,0)
 ;
"RTN","IBCNEDE3",5,0)
 ;**Program Description**
"RTN","IBCNEDE3",6,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE3",7,0)
 ;  specified date range that have active insurance records which has
"RTN","IBCNEDE3",8,0)
 ;  not been verified recently.
"RTN","IBCNEDE3",9,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE3",10,0)
 ;
"RTN","IBCNEDE3",11,0)
 Q   ; program can not be called directly
"RTN","IBCNEDE3",12,0)
 ;
"RTN","IBCNEDE3",13,0)
EN ; Loop through designated cross-references for updates 
"RTN","IBCNEDE3",14,0)
 ; (Non verified insurance)
"RTN","IBCNEDE3",15,0)
 ;
"RTN","IBCNEDE3",16,0)
 ; Initialize 
"RTN","IBCNEDE3",17,0)
 NEW DIC,DA,X,Y,DLAYGO,DINUM,DTOUT,DFN,FRESHDT,IBD,IBPM,IBPMD
"RTN","IBCNEDE3",18,0)
 NEW IEN,MAXCNT,IBCNECNT,EACTIVE,XDAYS,YDAYS,TDT,VI,IBBDT,IBEDT
"RTN","IBCNEDE3",19,0)
 NEW VINCON,VNOK,SRVICEDT,RESULT,PAYER,PAYERID,ARRAY,ERROR,SUPPBUFF
"RTN","IBCNEDE3",20,0)
 NEW TRANSNO,IBQUERY,PTN,INSNAME,IBCNETOT,SID,SIDACT,SIDDATA,SCNT5
"RTN","IBCNEDE3",21,0)
 NEW SIDARRAY,SIDCNT,DISYS,DGPMDT,AUPNDT,II
"RTN","IBCNEDE3",22,0)
 ;
"RTN","IBCNEDE3",23,0)
 S IEN="",IBCNECNT=0
"RTN","IBCNEDE3",24,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE3",25,0)
 S IBCNETOT=0
"RTN","IBCNEDE3",26,0)
 ;
"RTN","IBCNEDE3",27,0)
 ; Get site parameter settings for non-verified ins. extract
"RTN","IBCNEDE3",28,0)
 S EACTIVE=$$SETTINGS^IBCNEDE(3)
"RTN","IBCNEDE3",29,0)
 I 'EACTIVE G EXIT                   ; Quit if extract not active
"RTN","IBCNEDE3",30,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE3",31,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE3",32,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE3",33,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE3",34,0)
 S SUPPBUFF=$P(EACTIVE,U,5)
"RTN","IBCNEDE3",35,0)
 ;
"RTN","IBCNEDE3",36,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE3",37,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE3",38,0)
 ;
"RTN","IBCNEDE3",39,0)
 ;  * main control
"RTN","IBCNEDE3",40,0)
 ;
"RTN","IBCNEDE3",41,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE3",42,0)
 K ^TMP("IBCNEDE3",$J,"PTS")
"RTN","IBCNEDE3",43,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNECNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE3",44,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE3",45,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE3",46,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE3",47,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE3",48,0)
 . ;
"RTN","IBCNEDE3",49,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",50,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",52,0)
 . D OUTP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",53,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",54,0)
 . ;D REST(IBBDT-.0001,IBEDT)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",55,0)
 . D PROCESS
"RTN","IBCNEDE3",56,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",57,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE3",58,0)
 ;
"RTN","IBCNEDE3",59,0)
EXIT ;
"RTN","IBCNEDE3",60,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE3",$J,"PTS")   ; clean up
"RTN","IBCNEDE3",61,0)
 ;
"RTN","IBCNEDE3",62,0)
 Q
"RTN","IBCNEDE3",63,0)
 ; * end of routine processing
"RTN","IBCNEDE3",64,0)
 ;===========================================
"RTN","IBCNEDE3",65,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE3",66,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE3",67,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",68,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",69,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",70,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",71,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",72,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",73,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",74,0)
 .. ;
"RTN","IBCNEDE3",75,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",76,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE3",77,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"INP"))      ; already processed 
"RTN","IBCNEDE3",78,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",79,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",80,0)
 Q
"RTN","IBCNEDE3",81,0)
 ;
"RTN","IBCNEDE3",82,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE3",83,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE3",84,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",85,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",86,0)
 . S IEN=""
"RTN","IBCNEDE3",87,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",88,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",89,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",90,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",91,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",92,0)
 .. ;
"RTN","IBCNEDE3",93,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE3",94,0)
 .. Q:DFN=""
"RTN","IBCNEDE3",95,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE3",96,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",97,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",98,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",99,0)
 Q
"RTN","IBCNEDE3",100,0)
 ;
"RTN","IBCNEDE3",101,0)
REST(STARTDT,ENDDT) ; Check to see if there was a more recent inpatient
"RTN","IBCNEDE3",102,0)
 ; or outpatient encounter for this patient.
"RTN","IBCNEDE3",103,0)
 ;
"RTN","IBCNEDE3",104,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE3",105,0)
 S DFN=0
"RTN","IBCNEDE3",106,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE3",107,0)
 . ;
"RTN","IBCNEDE3",108,0)
 . ; inpatients
"RTN","IBCNEDE3",109,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE3",110,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",111,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",112,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE3",113,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",114,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",115,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",116,0)
 . ;
"RTN","IBCNEDE3",117,0)
 . ; outpatients
"RTN","IBCNEDE3",118,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE3",119,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",120,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE3",121,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",122,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",123,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",124,0)
 ;
"RTN","IBCNEDE3",125,0)
 K ^TMP("IBCNEDE3",$J,"PTS")  ; clean up - no longer needed
"RTN","IBCNEDE3",126,0)
 Q
"RTN","IBCNEDE3",127,0)
 ;
"RTN","IBCNEDE3",128,0)
PROCESS ;  Get insurance for each patient
"RTN","IBCNEDE3",129,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNECNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE3",130,0)
 . ; Update count for periodic check
"RTN","IBCNEDE3",131,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",132,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",133,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",134,0)
 . ;
"RTN","IBCNEDE3",135,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE3",136,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-YDAYS)
"RTN","IBCNEDE3",137,0)
 . K VINS
"RTN","IBCNEDE3",138,0)
 . D ALL^IBCNS1(DFN,"VINS",3)
"RTN","IBCNEDE3",139,0)
 . ;
"RTN","IBCNEDE3",140,0)
 . I $G(VINS(0))="" Q  ; no active insurance
"RTN","IBCNEDE3",141,0)
 . ;
"RTN","IBCNEDE3",142,0)
 . S VI=0 F  S VI=$O(VINS(VI)) Q:VI=""!(IBCNECNT'<MAXCNT)  D
"RTN","IBCNEDE3",143,0)
 .. S VINCON=$P(VINS(VI,0),U)
"RTN","IBCNEDE3",144,0)
 .. ;
"RTN","IBCNEDE3",145,0)
 .. ;Check for ins. companies to exclude (i.e. Medicare/Medicaid)
"RTN","IBCNEDE3",146,0)
 .. S INSNAME=$P($G(^DIC(36,VINCON,0)),U)
"RTN","IBCNEDE3",147,0)
 .. I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE3",148,0)
 .. ;
"RTN","IBCNEDE3",149,0)
 .. ;Check for Ins. Company/Payer problems
"RTN","IBCNEDE3",150,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",VINCON)
"RTN","IBCNEDE3",151,0)
 .. ;
"RTN","IBCNEDE3",152,0)
 .. I $P(RESULT,U)'="" D BUFF Q    ; error encountered
"RTN","IBCNEDE3",153,0)
 .. ;
"RTN","IBCNEDE3",154,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3) ; Payer IEN & Payer ID
"RTN","IBCNEDE3",155,0)
 .. I 'PAYER!(PAYERID="") Q
"RTN","IBCNEDE3",156,0)
 .. ;
"RTN","IBCNEDE3",157,0)
 .. ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE3",158,0)
 .. ;  date range
"RTN","IBCNEDE3",159,0)
 .. D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE3",160,0)
 .. ;
"RTN","IBCNEDE3",161,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE3",162,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE3",163,0)
 .. ;
"RTN","IBCNEDE3",164,0)
 .. ; Check for outstanding/current entries in File 365.1
"RTN","IBCNEDE3",165,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS) Q
"RTN","IBCNEDE3",166,0)
 .. K SIDARRAY
"RTN","IBCNEDE3",167,0)
 .. S SIDDATA=$$SIDCHK^IBCNEDE5(PAYER,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE3",168,0)
 .. S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE3",169,0)
 .. S SCNT5=$S(SIDACT=5:1,1:"")
"RTN","IBCNEDE3",170,0)
 .. ;
"RTN","IBCNEDE3",171,0)
 .. I SIDACT=3 D  Q
"RTN","IBCNEDE3",172,0)
 ... I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,18,"",1)
"RTN","IBCNEDE3",173,0)
 .. I IBCNECNT+SCNT5+SIDCNT>MAXCNT S IBCNECNT=MAXCNT Q  ;quit if TQ entries>MAXCNT
"RTN","IBCNEDE3",174,0)
 .. S SID=""
"RTN","IBCNEDE3",175,0)
 .. F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D SET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE3",176,0)
 .. I SIDACT=4!(SIDACT=5) D SET("","")
"RTN","IBCNEDE3",177,0)
 Q
"RTN","IBCNEDE3",178,0)
 ;
"RTN","IBCNEDE3",179,0)
SET(SID,INR) ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE3",180,0)
 NEW DATA1,DATA2,TQIEN
"RTN","IBCNEDE3",181,0)
 ;
"RTN","IBCNEDE3",182,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE3",183,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE3",184,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESHDT
"RTN","IBCNEDE3",185,0)
 ;
"RTN","IBCNEDE3",186,0)
 ; The hardcoded '3' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE3",187,0)
 ; the file 365.1 that it is the non-verified extract.
"RTN","IBCNEDE3",188,0)
 S DATA2=3_U_"V"_U_SRVICEDT_U_INR
"RTN","IBCNEDE3",189,0)
 ;
"RTN","IBCNEDE3",190,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2)
"RTN","IBCNEDE3",191,0)
 I TQIEN'="" S IBCNECNT=IBCNECNT+1
"RTN","IBCNEDE3",192,0)
 ;
"RTN","IBCNEDE3",193,0)
 Q
"RTN","IBCNEDE3",194,0)
BUFF ; Create new buffer entry, if one doesn't already exist, with a 
"RTN","IBCNEDE3",195,0)
 ; bang symbol
"RTN","IBCNEDE3",196,0)
 I SUPPBUFF Q   ; determine if we suppress buffer entries
"RTN","IBCNEDE3",197,0)
 I '$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,$P(RESULT,U),"",1)
"RTN","IBCNEDE3",198,0)
 Q
"RTN","IBCNEDE3",199,0)
 ;
"RTN","IBCNEDE4")
0^39^B83858360
"RTN","IBCNEDE4",1,0)
IBCNEDE4 ;DAOU/ALA - NO INSURANCE DATA EXTRACT ;24-JUN-2002
"RTN","IBCNEDE4",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE4",4,0)
 ;
"RTN","IBCNEDE4",5,0)
 ;**Program Description**
"RTN","IBCNEDE4",6,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE4",7,0)
 ;  specified date range but who have no active or no
"RTN","IBCNEDE4",8,0)
 ;  insurance records
"RTN","IBCNEDE4",9,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE4",10,0)
 ;
"RTN","IBCNEDE4",11,0)
 Q   ;can't call directly
"RTN","IBCNEDE4",12,0)
 ;
"RTN","IBCNEDE4",13,0)
EN ;
"RTN","IBCNEDE4",14,0)
 NEW TMPCNT,IEN,TQIEN,DATA1,DATA2,EACTIVE,XDAYS,YDAYS,MAXCNT,IBBDT,IBEDT
"RTN","IBCNEDE4",15,0)
 NEW IBD,IBPM,IBPMD,IBQUERY,IBCNCNT,SRVICEDT,IBINS,IBDD,IBDDI,DFN
"RTN","IBCNEDE4",16,0)
 NEW IBOUTP,PTN,PAYER,FOUND1,FOUND2,DFN,DISYS,TDT,IBCNETOT,FRESH,FRESHDT
"RTN","IBCNEDE4",17,0)
 NEW DGPMDT,AUPNDT
"RTN","IBCNEDE4",18,0)
 ;
"RTN","IBCNEDE4",19,0)
 S IBCNCNT=0
"RTN","IBCNEDE4",20,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE4",21,0)
 S IBCNETOT=0
"RTN","IBCNEDE4",22,0)
 ;
"RTN","IBCNEDE4",23,0)
 ;  Get Extract parameters
"RTN","IBCNEDE4",24,0)
 S EACTIVE=$$SETTINGS^IBCNEDE(4)
"RTN","IBCNEDE4",25,0)
 I 'EACTIVE Q                   ; quit if not active
"RTN","IBCNEDE4",26,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE4",27,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE4",28,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE4",29,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE4",30,0)
 ;
"RTN","IBCNEDE4",31,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE4",32,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE4",33,0)
 ;
"RTN","IBCNEDE4",34,0)
 ; * Main Control
"RTN","IBCNEDE4",35,0)
 ;
"RTN","IBCNEDE4",36,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE4",37,0)
 K ^TMP("IBCNEDE4",$J,"PTS")
"RTN","IBCNEDE4",38,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNCNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE4",39,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE4",40,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE4",41,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE4",42,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE4",43,0)
 . ;
"RTN","IBCNEDE4",44,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",45,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",46,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",47,0)
 . D OUTP(IBD)
"RTN","IBCNEDE4",48,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",49,0)
 . D REST(IBBDT-.0001,IBEDT)
"RTN","IBCNEDE4",50,0)
 . D PROCESS
"RTN","IBCNEDE4",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",52,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE4",53,0)
 ;
"RTN","IBCNEDE4",54,0)
EXIT ;
"RTN","IBCNEDE4",55,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE4",$J,"PTS")   ; clean up
"RTN","IBCNEDE4",56,0)
 ;
"RTN","IBCNEDE4",57,0)
 Q
"RTN","IBCNEDE4",58,0)
 ; * end of routine processing
"RTN","IBCNEDE4",59,0)
 ;============================
"RTN","IBCNEDE4",60,0)
 ;
"RTN","IBCNEDE4",61,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE4",62,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE4",63,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE4",64,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",65,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",66,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",67,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",68,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",69,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",70,0)
 .. ;
"RTN","IBCNEDE4",71,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",72,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE4",73,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"INP"))      ; already processed
"RTN","IBCNEDE4",74,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",75,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",76,0)
 Q
"RTN","IBCNEDE4",77,0)
 ;
"RTN","IBCNEDE4",78,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE4",79,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE4",80,0)
 S IBD=DATE-.000001
"RTN","IBCNEDE4",81,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",82,0)
 . S IEN=""
"RTN","IBCNEDE4",83,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",84,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",85,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",86,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",87,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",88,0)
 .. ;
"RTN","IBCNEDE4",89,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE4",90,0)
 .. Q:DFN=""
"RTN","IBCNEDE4",91,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE4",92,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",93,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",94,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",95,0)
 Q
"RTN","IBCNEDE4",96,0)
 ;
"RTN","IBCNEDE4",97,0)
REST(STARTDT,ENDDT) ; Check for a more recent encounter (inpat. or outpat.)
"RTN","IBCNEDE4",98,0)
 ;
"RTN","IBCNEDE4",99,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE4",100,0)
 S DFN=0
"RTN","IBCNEDE4",101,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE4",102,0)
 . ;
"RTN","IBCNEDE4",103,0)
 . ; inpatients
"RTN","IBCNEDE4",104,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE4",105,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",106,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",107,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE4",108,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",109,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",110,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",111,0)
 . ;
"RTN","IBCNEDE4",112,0)
 . ; outpatients
"RTN","IBCNEDE4",113,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE4",114,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",115,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE4",116,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",117,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",118,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",119,0)
 ;
"RTN","IBCNEDE4",120,0)
 Q
"RTN","IBCNEDE4",121,0)
 ;
"RTN","IBCNEDE4",122,0)
PROCESS ;  Check selection criteria for each person with
"RTN","IBCNEDE4",123,0)
 ;  a visit in the last defined time frame (e.g. 6 months)
"RTN","IBCNEDE4",124,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNCNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE4",125,0)
 . ;
"RTN","IBCNEDE4",126,0)
 . ; Update count for periodic check
"RTN","IBCNEDE4",127,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",128,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",129,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",130,0)
 . ;
"RTN","IBCNEDE4",131,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE4",132,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,YDAYS)
"RTN","IBCNEDE4",133,0)
 . ;
"RTN","IBCNEDE4",134,0)
 . ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE4",135,0)
 . ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE4",136,0)
 . ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE4",137,0)
 . ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE4",138,0)
 . ;
"RTN","IBCNEDE4",139,0)
 . K IBINS,IBDD,IBDDI
"RTN","IBCNEDE4",140,0)
 . S IBOUTP=2
"RTN","IBCNEDE4",141,0)
 . D ^IBCNS
"RTN","IBCNEDE4",142,0)
 . K IBDD           ; don't need this array
"RTN","IBCNEDE4",143,0)
 . I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE4",144,0)
 . ;
"RTN","IBCNEDE4",145,0)
 . S (FOUND1,FOUND2)=0
"RTN","IBCNEDE4",146,0)
 . ;
"RTN","IBCNEDE4",147,0)
 . ; Returned all inactive insurances in IBDDI array
"RTN","IBCNEDE4",148,0)
 . I $D(IBDDI)>0,(IBCNCNT<MAXCNT) S FOUND2=$$INAC^IBCNEDE6(.IBCNCNT,MAXCNT,.IBDDI,SRVICEDT,YDAYS)
"RTN","IBCNEDE4",149,0)
 . ;
"RTN","IBCNEDE4",150,0)
 . ;  If no inactive insurances, work the popular insurances
"RTN","IBCNEDE4",151,0)
 . I IBCNCNT<MAXCNT S FOUND1=$$POP(.IBCNCNT,MAXCNT,SRVICEDT,YDAYS)
"RTN","IBCNEDE4",152,0)
 . ;
"RTN","IBCNEDE4",153,0)
 . I 'FOUND1,'FOUND2,(IBCNCNT<MAXCNT) D BLANKTQ
"RTN","IBCNEDE4",154,0)
 K ^TMP("IBJDI51",$J),IBDD,IBDDI,IBINS
"RTN","IBCNEDE4",155,0)
 Q
"RTN","IBCNEDE4",156,0)
 ;
"RTN","IBCNEDE4",157,0)
BLANKTQ ; No new records were created in file 365.1 for this DFN
"RTN","IBCNEDE4",158,0)
 ; need to check if a blank inquiry exists (patient w/o a payer)
"RTN","IBCNEDE4",159,0)
 ; if it doesn't exist create a new blank inquiry
"RTN","IBCNEDE4",160,0)
 ;
"RTN","IBCNEDE4",161,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE4",162,0)
 ;
"RTN","IBCNEDE4",163,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE4",164,0)
 ;  date range
"RTN","IBCNEDE4",165,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE4",166,0)
 ;
"RTN","IBCNEDE4",167,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE4",168,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE4",169,0)
 ;
"RTN","IBCNEDE4",170,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE4",171,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS) G BLANKXT
"RTN","IBCNEDE4",172,0)
 ;
"RTN","IBCNEDE4",173,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE4",174,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE4",175,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE4",176,0)
 ;
"RTN","IBCNEDE4",177,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE4",178,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE4",179,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE4",180,0)
 ;
"RTN","IBCNEDE4",181,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE4",182,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE4",183,0)
 ;
"RTN","IBCNEDE4",184,0)
BLANKXT ;
"RTN","IBCNEDE4",185,0)
 Q
"RTN","IBCNEDE4",186,0)
 ;
"RTN","IBCNEDE4",187,0)
POP(IBCNCNT,MAXCNT,SRVICEDT,FDAYS,APPTFLG) ; Get Popular Insurances
"RTN","IBCNEDE4",188,0)
 ; FDAYS (Fresh Days value)
"RTN","IBCNEDE4",189,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE4",190,0)
 ;
"RTN","IBCNEDE4",191,0)
 NEW PDATA,POPFL,PNUM,PCNT,II,INCP,RESULT,PAYER,PAYERID
"RTN","IBCNEDE4",192,0)
 NEW DATA1,DATA2,TQIEN,FOUND,SIDARRAY,SID,SIDACT,SIDCNT
"RTN","IBCNEDE4",193,0)
 NEW FRESHDT
"RTN","IBCNEDE4",194,0)
 ;
"RTN","IBCNEDE4",195,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE4",196,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE4",197,0)
 ; extract was created.
"RTN","IBCNEDE4",198,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE4",199,0)
 ;
"RTN","IBCNEDE4",200,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE4",201,0)
 S PDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE4",202,0)
 S POPFL=$P(PDATA,U,9),PNUM=$P(PDATA,U,10),PCNT=0
"RTN","IBCNEDE4",203,0)
 ;
"RTN","IBCNEDE4",204,0)
 ;  If the search for popular insurances is 'No', quit
"RTN","IBCNEDE4",205,0)
 I 'POPFL G POPX
"RTN","IBCNEDE4",206,0)
 ;
"RTN","IBCNEDE4",207,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",208,0)
 ;
"RTN","IBCNEDE4",209,0)
 ;  If no list of popular insurances, quit
"RTN","IBCNEDE4",210,0)
 I $O(^IBE(350.9,1,51.18,0))="" G POPX
"RTN","IBCNEDE4",211,0)
 S II=0 F  S II=$O(^IBE(350.9,1,51.18,II)) Q:'II  D  Q:IBCNCNT'<MAXCNT
"RTN","IBCNEDE4",212,0)
 . S INCP=$P(^IBE(350.9,1,51.18,II,0),U,1)
"RTN","IBCNEDE4",213,0)
 . ;
"RTN","IBCNEDE4",214,0)
 . ;  Check for excluded ins. companies (i.e. Medicare/Medicaid)
"RTN","IBCNEDE4",215,0)
 . I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INCP,0)),U)) Q
"RTN","IBCNEDE4",216,0)
 . ;
"RTN","IBCNEDE4",217,0)
 . ;  Check for insurance company payer, etc.
"RTN","IBCNEDE4",218,0)
 . S RESULT=$$INSERROR^IBCNEUT3("I",INCP)
"RTN","IBCNEDE4",219,0)
 . I $P(RESULT,U)'="" Q   ; quit if error, don't record in ins. buffer
"RTN","IBCNEDE4",220,0)
 . ; PAYERID = National ID
"RTN","IBCNEDE4",221,0)
 . S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE4",222,0)
 . I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE4",223,0)
 . ;
"RTN","IBCNEDE4",224,0)
 . S FOUND=1  ; potential inquiry
"RTN","IBCNEDE4",225,0)
 . ;
"RTN","IBCNEDE4",226,0)
 . ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE4",227,0)
 . ;  date range
"RTN","IBCNEDE4",228,0)
 . D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE4",229,0)
 . ;
"RTN","IBCNEDE4",230,0)
 . ; DAOU/BHS - Update service dates for inquiries to be transmitted
"RTN","IBCNEDE4",231,0)
 . D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE4",232,0)
 . ;
"RTN","IBCNEDE4",233,0)
 . ;check for outstanding/current entries in File 356.1
"RTN","IBCNEDE4",234,0)
 . ; Freshness check - are we allowed to add this entry to the TQ file
"RTN","IBCNEDE4",235,0)
 . I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE4",236,0)
 . ;
"RTN","IBCNEDE4",237,0)
 . S PCNT=PCNT+1
"RTN","IBCNEDE4",238,0)
 . ;  If the counter is greater than the number of popular
"RTN","IBCNEDE4",239,0)
 . ;  insurances to pull, quit
"RTN","IBCNEDE4",240,0)
 . I PCNT>PNUM Q
"RTN","IBCNEDE4",241,0)
 . ;
"RTN","IBCNEDE4",242,0)
 . ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE4",243,0)
 . ;
"RTN","IBCNEDE4",244,0)
 . K SIDARRAY
"RTN","IBCNEDE4",245,0)
 . S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE4",246,0)
 . S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE4",247,0)
 . ;  Add to TQ to compensate for TQ w/ blank Sub ID
"RTN","IBCNEDE4",248,0)
 . I SIDACT'<5,(SIDACT'>8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE4",249,0)
 . I IBCNCNT+SIDCNT>MAXCNT S IBCNCNT=MAXCNT Q     ; see if TQ entries will exceed MAXCNT
"RTN","IBCNEDE4",250,0)
 . S SID=""
"RTN","IBCNEDE4",251,0)
 . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D POPSET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE4",252,0)
 . ;
"RTN","IBCNEDE4",253,0)
 . ; Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE4",254,0)
 . I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D POPSET("","") ;D POPSET()
"RTN","IBCNEDE4",255,0)
POPX ; POP exit point
"RTN","IBCNEDE4",256,0)
 Q FOUND
"RTN","IBCNEDE4",257,0)
 ;
"RTN","IBCNEDE4",258,0)
POPSET(SID,INREC) ;
"RTN","IBCNEDE4",259,0)
 N FRESH
"RTN","IBCNEDE4",260,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE4",261,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE4",262,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",263,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE4",264,0)
 ;
"RTN","IBCNEDE4",265,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE4",266,0)
 ; it is.
"RTN","IBCNEDE4",267,0)
 I APPTFLG S DATA2=2  ; appt extract IBCNEDE2
"RTN","IBCNEDE4",268,0)
 I 'APPTFLG S DATA2=4 ; no ins extract IBCNEDE4
"RTN","IBCNEDE4",269,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE4",270,0)
 ;
"RTN","IBCNEDE4",271,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2)
"RTN","IBCNEDE4",272,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE4",273,0)
 ;
"RTN","IBCNEDE4",274,0)
 Q
"RTN","IBCNEDE4",275,0)
 ;
"RTN","IBCNEDE5")
0^61^B29926033
"RTN","IBCNEDE5",1,0)
IBCNEDE5 ;DAOU/DAC - IIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE5",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE5",4,0)
 ;
"RTN","IBCNEDE5",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE5",6,0)
 ;
"RTN","IBCNEDE5",7,0)
SIDCHK(PIEN,DFN,BSID,SIDARRAY,FRESHDT) ; Checks the flag settings of 'Identification
"RTN","IBCNEDE5",8,0)
 ; Requires Subscriber ID' and 'Use SSN as Subscriber ID'.  The function 
"RTN","IBCNEDE5",9,0)
 ; returns a "^" delimited string.  The first value is between 1 and 5
"RTN","IBCNEDE5",10,0)
 ; telling the calling program what action(s) it should perform.  The
"RTN","IBCNEDE5",11,0)
 ; 2nd piece indicates the Subcriber ID that the calling program should
"RTN","IBCNEDE5",12,0)
 ; use for setting the Subscriber IDs in the IIV Transmission Queue file
"RTN","IBCNEDE5",13,0)
 ; (365.1).  The calling program is to address the blank Sub IDs and 
"RTN","IBCNEDE5",14,0)
 ; make sure the data extract does not exceed the max extract number.
"RTN","IBCNEDE5",15,0)
 ;
"RTN","IBCNEDE5",16,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",17,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",18,0)
 ; INREC - Insurance IEN of Patients record (subfile 2.312)
"RTN","IBCNEDE5",19,0)
 ; BSID - Subscriber ID from buffer file (file 355.3 field )
"RTN","IBCNEDE5",20,0)
 ; SIDARRAY - Array of active subscribers - may be subscripted by SSN 
"RTN","IBCNEDE5",21,0)
 ; FRESHDT - Freshness Date - used for checking verified date
"RTN","IBCNEDE5",22,0)
 ;
"RTN","IBCNEDE5",23,0)
 ; Logic to follow:
"RTN","IBCNEDE5",24,0)
 ;
"RTN","IBCNEDE5",25,0)
 ; Id. Req.| Use SSN  | Sub ID|Action|
"RTN","IBCNEDE5",26,0)
 ;  Sub ID | as Sub ID| found |  #   | Create
"RTN","IBCNEDE5",27,0)
 ; ________|__________|_______|______|________
"RTN","IBCNEDE5",28,0)
 ; YES        -         YES     1     1 Verification TQ entry w/ Sub ID
"RTN","IBCNEDE5",29,0)
 ; YES       YES        NO      2     1 Ver. TQ entry, use SSN as Sub ID
"RTN","IBCNEDE5",30,0)
 ; YES       NO         NO      3     new buffer entry or modify existing
"RTN","IBCNEDE5",31,0)
 ;                                    saying manual verification required
"RTN","IBCNEDE5",32,0)
 ; NO        NO         NO      4     1 Ver. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",33,0)
 ; NO        YES        NO      5     2 Ver. TQ entries, 1 w/ SSN as Sub
"RTN","IBCNEDE5",34,0)
 ;                                    ID and other w/ blank Sub ID
"RTN","IBCNEDE5",35,0)
 ;
"RTN","IBCNEDE5",36,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN,SSN
"RTN","IBCNEDE5",37,0)
 N INSSTR,INSSTR1,SYMBOL,EXP,SUBID,SUBIDS,SIDCNT,INREC,MVER,VFLG
"RTN","IBCNEDE5",38,0)
 ;
"RTN","IBCNEDE5",39,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",40,0)
 ;
"RTN","IBCNEDE5",41,0)
 I $G(BSID)'="" D  G SIDCHKX
"RTN","IBCNEDE5",42,0)
 . S SID=BSID,(SIDACT,SIDCNT)=1,SIDARRAY($$STRIP(SID)_"_")=""
"RTN","IBCNEDE5",43,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",44,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",45,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",46,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNEDE5",47,0)
 ;
"RTN","IBCNEDE5",48,0)
 S INSSTR="",SIDCNT=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",49,0)
 ;
"RTN","IBCNEDE5",50,0)
 I $D(BSID),BSID="" G SIDC1
"RTN","IBCNEDE5",51,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC
"RTN","IBCNEDE5",52,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",53,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",54,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",55,0)
 . I $P(SYMBOL,U)="" D            ; no IIV related error w/ ins. company
"RTN","IBCNEDE5",56,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",57,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",58,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",59,0)
 .. I $P(INSSTR,U,8)>DT Q                  ; future effective date
"RTN","IBCNEDE5",60,0)
 .. S EXP=$P(INSSTR,U,4) I EXP,EXP<DT Q    ; expired
"RTN","IBCNEDE5",61,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",62,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q     ; verified recently
"RTN","IBCNEDE5",63,0)
 .. S SUBIDS=$$STRIP(SUBID)
"RTN","IBCNEDE5",64,0)
 .. I $D(SIDARRAY(SUBIDS_"_"_INREC)) Q            ; already in the array
"RTN","IBCNEDE5",65,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",66,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",67,0)
 . Q
"RTN","IBCNEDE5",68,0)
 ;
"RTN","IBCNEDE5",69,0)
 I SIDCNT S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",70,0)
 I 'SIDCNT,VFLG S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",71,0)
SIDC1 I SIDREQ,SIDSSN S SIDACT=2 D SSN G SIDCHKX
"RTN","IBCNEDE5",72,0)
 I SIDREQ,'SIDSSN S SIDACT=3 G SIDCHKX
"RTN","IBCNEDE5",73,0)
 I 'SIDREQ,'SIDSSN S SIDACT=4 G SIDCHKX
"RTN","IBCNEDE5",74,0)
 I 'SIDREQ,SIDSSN S SIDACT=5 D SSN
"RTN","IBCNEDE5",75,0)
 ;
"RTN","IBCNEDE5",76,0)
SIDCHKX ; EXIT POINT
"RTN","IBCNEDE5",77,0)
 ;
"RTN","IBCNEDE5",78,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",79,0)
 ;
"RTN","IBCNEDE5",80,0)
SSN ; Get Patient SSN and update SIDARRAY, if needed
"RTN","IBCNEDE5",81,0)
 S SSN=$$GETSSN()
"RTN","IBCNEDE5",82,0)
 N SSNS
"RTN","IBCNEDE5",83,0)
 S SSNS=$$STRIP(SSN,1)
"RTN","IBCNEDE5",84,0)
 I $P($O(SIDARRAY(SSNS_"_")),"_")=SSNS Q
"RTN","IBCNEDE5",85,0)
 I SSNS'="",'$D(SIDARRAY(SSNS_"_")) S SIDARRAY(SSNS_"_")="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",86,0)
 Q
"RTN","IBCNEDE5",87,0)
 ;
"RTN","IBCNEDE5",88,0)
GETSSN() ; Get Patient SSN
"RTN","IBCNEDE5",89,0)
 Q $P($G(^DPT(DFN,0)),U,9)
"RTN","IBCNEDE5",90,0)
 ;
"RTN","IBCNEDE5",91,0)
STRIP(ID,SS) ; Strip dashes and spaces if ssn
"RTN","IBCNEDE5",92,0)
 ;         ID can be ssn or subid
"RTN","IBCNEDE5",93,0)
 ;         if SS, ssn is being passed
"RTN","IBCNEDE5",94,0)
 N SSN,IDS,IDB
"RTN","IBCNEDE5",95,0)
 S SS=$G(SS)
"RTN","IBCNEDE5",96,0)
 ; If a ssn is passed, strip dashes and spaces
"RTN","IBCNEDE5",97,0)
 I SS Q $TR(ID,"- ")
"RTN","IBCNEDE5",98,0)
 ; If not ssn format, do not strip
"RTN","IBCNEDE5",99,0)
 S IDB=$TR(ID," ")
"RTN","IBCNEDE5",100,0)
 I IDB'?3N1"-"2N1"-"4N,IDB'?9N Q ID
"RTN","IBCNEDE5",101,0)
 ; Compare w/SSN - if it matches, strip dashes and spaces
"RTN","IBCNEDE5",102,0)
 S IDS=$TR(ID,"- ")
"RTN","IBCNEDE5",103,0)
 S SSN=$TR($$GETSSN(),"- ")
"RTN","IBCNEDE5",104,0)
 I SSN=IDS Q IDS
"RTN","IBCNEDE5",105,0)
 Q ID
"RTN","IBCNEDE5",106,0)
 ;
"RTN","IBCNEDE5",107,0)
SIDCHK2(DFN,PIEN,SIDARRAY,FRESHDT) ;Checks the flag settings of 
"RTN","IBCNEDE5",108,0)
 ; 'Identification Requires Subscriber ID' and 'Use SSN as Subscriber
"RTN","IBCNEDE5",109,0)
 ; ID'.  The function returns a "^" delimited string.  The first value 
"RTN","IBCNEDE5",110,0)
 ; is between 1 and 8 telling the calling program what action(s) it 
"RTN","IBCNEDE5",111,0)
 ; should perform.  The 2nd piece indicates the number of unique 
"RTN","IBCNEDE5",112,0)
 ; Subscriber IDs found for the patient/payer combo.  In addition, a
"RTN","IBCNEDE5",113,0)
 ; local array of Subcriber IDs are passed back by reference that the
"RTN","IBCNEDE5",114,0)
 ; calling program should use for setting the Subscriber IDs in IIV 
"RTN","IBCNEDE5",115,0)
 ; Transmission Queue file (#365.1).  The calling program is to address
"RTN","IBCNEDE5",116,0)
 ; the blank Sub IDs and make sure the data extract does not exceed the
"RTN","IBCNEDE5",117,0)
 ; max extract number.
"RTN","IBCNEDE5",118,0)
 ;
"RTN","IBCNEDE5",119,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",120,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",121,0)
 ; SIDARRAY - Local array passed by reference.  This function returns
"RTN","IBCNEDE5",122,0)
 ;            the array populated with the possible Subscriber IDs for
"RTN","IBCNEDE5",123,0)
 ;            that patient/payer combination.
"RTN","IBCNEDE5",124,0)
 ; FRESHDT - Freshness date used for checking last verified condition
"RTN","IBCNEDE5",125,0)
 ;
"RTN","IBCNEDE5",126,0)
 ; Logic to follow:
"RTN","IBCNEDE5",127,0)
 ;
"RTN","IBCNEDE5",128,0)
 ; Id. Req.| Use SSN  | Sub ID|Action|
"RTN","IBCNEDE5",129,0)
 ;  Sub ID | as Sub ID| found |  #   | Create
"RTN","IBCNEDE5",130,0)
 ; ________|__________|_______|______|________
"RTN","IBCNEDE5",131,0)
 ; YES       YES        YES     1     1 Identification TQ entry w/ SSN 
"RTN","IBCNEDE5",132,0)
 ;                                    as Sub ID, & 1 Iden. TQ entry for
"RTN","IBCNEDE5",133,0)
 ;                                    each unique old Sub ID
"RTN","IBCNEDE5",134,0)
 ; YES       YES        NO      2     1 Iden. TQ entry, use SSN as Sub ID
"RTN","IBCNEDE5",135,0)
 ; YES       NO         YES     3     1 Iden. TQ entry for each unique 
"RTN","IBCNEDE5",136,0)
 ;                                    old Sub ID
"RTN","IBCNEDE5",137,0)
 ; YES       NO         NO      4     No TQ entries (may flag as error)
"RTN","IBCNEDE5",138,0)
 ; NO        NO         YES     5     1 Iden. TQ entry w/ blank Sub ID, 
"RTN","IBCNEDE5",139,0)
 ;                                    & 1 Iden. TQ entry for each unique 
"RTN","IBCNEDE5",140,0)
 ;                                    old Sub ID
"RTN","IBCNEDE5",141,0)
 ; NO        NO         NO      6     1 Iden. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",142,0)
 ; NO        YES        YES     7     1 Iden. TQ entry w/ blank Sub ID,
"RTN","IBCNEDE5",143,0)
 ;                                    & 1 Iden. TQ entry w/ SSN as Sub 
"RTN","IBCNEDE5",144,0)
 ;                                    ID, & 1 Iden. TQ entry for each 
"RTN","IBCNEDE5",145,0)
 ;                                    unique old Sub ID
"RTN","IBCNEDE5",146,0)
 ; NO        YES        NO      8     2 Iden. TQ entries, 1 w/ SSN as Sub
"RTN","IBCNEDE5",147,0)
 ;                                    ID and other w/ blank Sub ID
"RTN","IBCNEDE5",148,0)
 ;
"RTN","IBCNEDE5",149,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN,SSN,INSSTR,INSSTR1,INREC
"RTN","IBCNEDE5",150,0)
 N SYMBOL,SUBID,SUBIDS,SIDCNT,MVER,VFLG
"RTN","IBCNEDE5",151,0)
 ;
"RTN","IBCNEDE5",152,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",153,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",154,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",155,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",156,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNEDE5",157,0)
 S INSSTR="",(SID,SIDCNT)=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",158,0)
 ;
"RTN","IBCNEDE5",159,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC!VFLG
"RTN","IBCNEDE5",160,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",161,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",162,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",163,0)
 . I $P(SYMBOL,U)="" D            ; no IIV related error w/ ins. company
"RTN","IBCNEDE5",164,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",165,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",166,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",167,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",168,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q    ; verified recently
"RTN","IBCNEDE5",169,0)
 .. S SUBIDS=$$STRIP(SUBID)
"RTN","IBCNEDE5",170,0)
 .. I $D(SIDARRAY(SUBIDS_"_")) Q            ; already in the array
"RTN","IBCNEDE5",171,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SID=1,SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",172,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",173,0)
 ;
"RTN","IBCNEDE5",174,0)
 I VFLG K SIDARRAY S SIDCNT=0,SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",175,0)
 I SID,SIDREQ,SIDSSN S SIDACT=1 D SSN G SIDCK2X
"RTN","IBCNEDE5",176,0)
 I 'SID,SIDREQ,SIDSSN S SIDACT=2 D SSN G SIDCK2X
"RTN","IBCNEDE5",177,0)
 I SID,SIDREQ,'SIDSSN S SIDACT=3 G SIDCK2X
"RTN","IBCNEDE5",178,0)
 I 'SID,SIDREQ,'SIDSSN S SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",179,0)
 I SID,'SIDREQ,'SIDSSN S SIDACT=5 G SIDCK2X
"RTN","IBCNEDE5",180,0)
 I 'SID,'SIDREQ,'SIDSSN S SIDACT=6 G SIDCK2X
"RTN","IBCNEDE5",181,0)
 I SID,'SIDREQ,SIDSSN S SIDACT=7 D SSN G SIDCK2X
"RTN","IBCNEDE5",182,0)
 I 'SID,'SIDREQ,SIDSSN S SIDACT=8 D SSN G SIDCK2X
"RTN","IBCNEDE5",183,0)
 ;
"RTN","IBCNEDE5",184,0)
SIDCK2X ; EXIT POINT
"RTN","IBCNEDE5",185,0)
 ;
"RTN","IBCNEDE5",186,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",187,0)
 ;
"RTN","IBCNEDE6")
0^65^B22582079
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - IIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",8,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",9,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",10,0)
 ;
"RTN","IBCNEDE6",11,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",12,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",15,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",16,0)
 ; extract was created.
"RTN","IBCNEDE6",17,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",18,0)
 ;
"RTN","IBCNEDE6",19,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",20,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",21,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",22,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",23,0)
 ;
"RTN","IBCNEDE6",24,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",25,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",26,0)
 ;
"RTN","IBCNEDE6",27,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",28,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",29,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",30,0)
 .. ;
"RTN","IBCNEDE6",31,0)
 .. ;Check for Medicare/Medicaid
"RTN","IBCNEDE6",32,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",33,0)
 .. ;
"RTN","IBCNEDE6",34,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",35,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",36,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",39,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",42,0)
 .. ;
"RTN","IBCNEDE6",43,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",44,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",45,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",46,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",47,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",48,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",51,0)
 .. ;
"RTN","IBCNEDE6",52,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",53,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",54,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",55,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",56,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",57,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",58,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",59,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",60,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",61,0)
 ... ; 
"RTN","IBCNEDE6",62,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",64,0)
 K SIDARRAY
"RTN","IBCNEDE6",65,0)
INACX ;
"RTN","IBCNEDE6",66,0)
 Q FOUND
"RTN","IBCNEDE6",67,0)
 ;
"RTN","IBCNEDE6",68,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",69,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",70,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",71,0)
 N FRESH
"RTN","IBCNEDE6",72,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",73,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",76,0)
 ; it is.
"RTN","IBCNEDE6",77,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",78,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",79,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",80,0)
 ;
"RTN","IBCNEDE6",81,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2)
"RTN","IBCNEDE6",82,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",83,0)
 ;
"RTN","IBCNEDE6",84,0)
 Q
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",87,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",88,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",89,0)
 ; Output:
"RTN","IBCNEDE6",90,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",91,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",92,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",93,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",96,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",97,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",98,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",99,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",100,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",101,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",102,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",103,0)
 ; DAOU/WCW - Overriding this to allow service date of only today
"RTN","IBCNEDE6",104,0)
 ;            for the time being - setting params to 0
"RTN","IBCNEDE6",105,0)
 S FDAYS=0,PDAYS=0
"RTN","IBCNEDE6",106,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",107,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",108,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",109,0)
 . I PDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",110,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",111,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",112,0)
 . ;  date for the payer
"RTN","IBCNEDE6",113,0)
 . I PDAYS,SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1) D
"RTN","IBCNEDE6",114,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1),EDTFLG=1
"RTN","IBCNEDE6",115,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",116,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",117,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",118,0)
 . I FDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",119,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",120,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",121,0)
 . ;  date for the payer
"RTN","IBCNEDE6",122,0)
 . I FDAYS,SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1) D
"RTN","IBCNEDE6",123,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1),EDTFLG=1
"RTN","IBCNEDE6",124,0)
 ;
"RTN","IBCNEDE6",125,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",126,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",127,0)
 ;
"RTN","IBCNEDE6",128,0)
 Q
"RTN","IBCNEDE6",129,0)
 ;
"RTN","IBCNEDE6",130,0)
 ;
"RTN","IBCNEDEP")
0^45^B93131109
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;**Program Description**
"RTN","IBCNEDEP",6,0)
 ;  This program finds records needing HL7 message
"RTN","IBCNEDEP",7,0)
 ;  creation
"RTN","IBCNEDEP",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",9,0)
 ;
"RTN","IBCNEDEP",10,0)
 ;  Variables
"RTN","IBCNEDEP",11,0)
 ;    RETR = Number of retries allowed
"RTN","IBCNEDEP",12,0)
 ;    HLMAX = Maximum number of HL7 messages
"RTN","IBCNEDEP",13,0)
 ;    MGRP = Message Mailgroup
"RTN","IBCNEDEP",14,0)
 ;    FAIL = Number of days before failure
"RTN","IBCNEDEP",15,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",16,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",17,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",18,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",19,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",20,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",21,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",22,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",23,0)
 ;    NRETR = Number of retries accomplished
"RTN","IBCNEDEP",24,0)
 ;    IHCNT = Count of successful HL7 messages
"RTN","IBCNEDEP",25,0)
 ;    QUERY = Type of message
"RTN","IBCNEDEP",26,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",27,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",28,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",29,0)
 ;    NTRAN = Number of transmissions accomplished
"RTN","IBCNEDEP",30,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",31,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
EN ;  Entry point
"RTN","IBCNEDEP",34,0)
 ;
"RTN","IBCNEDEP",35,0)
 ;  Start processing of data
"RTN","IBCNEDEP",36,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",37,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",38,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",39,0)
 ;
"RTN","IBCNEDEP",40,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",41,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",42,0)
 S RETR=+$P(IBCNEP,U,6),HLMAX=$P(IBCNEP,U,15),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",43,0)
 S:HLMAX="" HLMAX=99999999
"RTN","IBCNEDEP",44,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",45,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",46,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",47,0)
 ; Statuses
"RTN","IBCNEDEP",48,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",49,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",50,0)
 ;   4 = Hold
"RTN","IBCNEDEP",51,0)
 ;   6 = Retry
"RTN","IBCNEDEP",52,0)
 ;
"RTN","IBCNEDEP",53,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",54,0)
 S IEN=""
"RTN","IBCNEDEP",55,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",56,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",57,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",58,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",59,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",60,0)
 . ;
"RTN","IBCNEDEP",61,0)
 . S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",62,0)
 . ;
"RTN","IBCNEDEP",63,0)
 . ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",64,0)
 . ;  clear future transmission date
"RTN","IBCNEDEP",65,0)
 . I FUTDT'>DT D SST^IBCNEUT2(IEN,6) D
"RTN","IBCNEDEP",66,0)
 .. NEW DA,DIE,DR
"RTN","IBCNEDEP",67,0)
 .. S DA=IEN,DIE="^IBCN(365.1,",DR=".09////@" D ^DIE
"RTN","IBCNEDEP",68,0)
 ;
"RTN","IBCNEDEP",69,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",70,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",71,0)
 ;
"RTN","IBCNEDEP",72,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",73,0)
 ;  'Communication Failure'
"RTN","IBCNEDEP",74,0)
 S IEN=""
"RTN","IBCNEDEP",75,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",76,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",77,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",78,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",79,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",80,0)
 . ;
"RTN","IBCNEDEP",81,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB
"RTN","IBCNEDEP",82,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",83,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",84,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",85,0)
 . ;
"RTN","IBCNEDEP",86,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",87,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",88,0)
 . ;
"RTN","IBCNEDEP",89,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",90,0)
 . I RETR>0 D  Q
"RTN","IBCNEDEP",91,0)
 .. ;
"RTN","IBCNEDEP",92,0)
 .. ;  Send timeout mail message
"RTN","IBCNEDEP",93,0)
 .. I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D TMRR^IBCNEDEQ
"RTN","IBCNEDEP",94,0)
 .. D SST^IBCNEUT2(IEN,6)
"RTN","IBCNEDEP",95,0)
 . ;
"RTN","IBCNEDEP",96,0)
 . ; If no retries defined, set to fail
"RTN","IBCNEDEP",97,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",98,0)
 . ;
"RTN","IBCNEDEP",99,0)
 . ;  For message in the Response file set the status to
"RTN","IBCNEDEP",100,0)
 . ; 'Communication Failure'
"RTN","IBCNEDEP",101,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",102,0)
 . ;
"RTN","IBCNEDEP",103,0)
 . ;  Set Buffer symbol to 'B12' (Communication Failure)
"RTN","IBCNEDEP",104,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",105,0)
 . ;
"RTN","IBCNEDEP",106,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",107,0)
 . ;
"RTN","IBCNEDEP",108,0)
 . D CERR^IBCNEDEQ
"RTN","IBCNEDEP",109,0)
 ;
"RTN","IBCNEDEP",110,0)
 ; Exit for stop request
"RTN","IBCNEDEP",111,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",112,0)
 ;
"RTN","IBCNEDEP",113,0)
RET ;  If status is 'Retry'
"RTN","IBCNEDEP",114,0)
 S IEN=""
"RTN","IBCNEDEP",115,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",116,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",117,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",118,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",119,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",120,0)
 . ;
"RTN","IBCNEDEP",121,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB
"RTN","IBCNEDEP",122,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",123,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",124,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",125,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",126,0)
 . ;
"RTN","IBCNEDEP",127,0)
 . ;  If retries are finished, set to fail
"RTN","IBCNEDEP",128,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",129,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",130,0)
 .. ;
"RTN","IBCNEDEP",131,0)
 .. ;  Set Buffer symbol to 'B12' (Communication Failure)
"RTN","IBCNEDEP",132,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",133,0)
 .. ;
"RTN","IBCNEDEP",134,0)
 .. ;  For message in the Response file set the status to
"RTN","IBCNEDEP",135,0)
 .. ; 'Communication Failure'
"RTN","IBCNEDEP",136,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",137,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",138,0)
 .. ;
"RTN","IBCNEDEP",139,0)
 .. D CERE^IBCNEDEQ
"RTN","IBCNEDEP",140,0)
 ;
"RTN","IBCNEDEP",141,0)
 ; Exit for stop request
"RTN","IBCNEDEP",142,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",143,0)
 ;
"RTN","IBCNEDEP",144,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",145,0)
 ;
"RTN","IBCNEDEP",146,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",147,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",148,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",149,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",150,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",151,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",152,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",153,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",154,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",155,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",156,0)
 ... S VNUM=4
"RTN","IBCNEDEP",157,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",158,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",159,0)
 ... S VNUM=1
"RTN","IBCNEDEP",160,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",161,0)
 ;
"RTN","IBCNEDEP",162,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",163,0)
 ;  or identifications
"RTN","IBCNEDEP",164,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",165,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",166,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",167,0)
 . D ID
"RTN","IBCNEDEP",168,0)
 ;
"RTN","IBCNEDEP",169,0)
EXIT ;  Finish
"RTN","IBCNEDEP",170,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",171,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",172,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",173,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",174,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",175,0)
 K ZMID,IHCNT,HLMAX,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",176,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA
"RTN","IBCNEDEP",177,0)
 Q
"RTN","IBCNEDEP",178,0)
 ;
"RTN","IBCNEDEP",179,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",180,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",181,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",182,0)
 ;
"RTN","IBCNEDEP",183,0)
 S DFN=""
"RTN","IBCNEDEP",184,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",185,0)
 . ;
"RTN","IBCNEDEP",186,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",187,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",188,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",189,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",190,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",191,0)
 .. ;
"RTN","IBCNEDEP",192,0)
 .. ;  If the total number of "bundled" verifications is
"RTN","IBCNEDEP",193,0)
 .. ;  greater than the maximum number of HL7 allowed, quit
"RTN","IBCNEDEP",194,0)
 .. I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",195,0)
 . ;
"RTN","IBCNEDEP",196,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",197,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)
"RTN","IBCNEDEP",198,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",199,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",200,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",201,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",202,0)
 .. ;
"RTN","IBCNEDEP",203,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",204,0)
 .. ;
"RTN","IBCNEDEP",205,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",206,0)
 .. D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",207,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",208,0)
 .. ;
"RTN","IBCNEDEP",209,0)
 .. ;  If not successful
"RTN","IBCNEDEP",210,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",211,0)
 .. ;  If successful
"RTN","IBCNEDEP",212,0)
 .. D SCC
"RTN","IBCNEDEP",213,0)
 .. I BNDL D
"RTN","IBCNEDEP",214,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",215,0)
 ;
"RTN","IBCNEDEP",216,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",217,0)
 ;
"RTN","IBCNEDEP",218,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",219,0)
 I $G(ZTSTOP) Q
"RTN","IBCNEDEP",220,0)
 ;
"RTN","IBCNEDEP",221,0)
 ;  If the number of HL7 messages generate equals the
"RTN","IBCNEDEP",222,0)
 ;  maximum number of HL7 messages allowed, quit
"RTN","IBCNEDEP",223,0)
 I IHCNT=HLMAX Q
"RTN","IBCNEDEP",224,0)
 ;
"RTN","IBCNEDEP",225,0)
 Q
"RTN","IBCNEDEP",226,0)
 ;
"RTN","IBCNEDEP",227,0)
ID ;  Send Identification Messages
"RTN","IBCNEDEP",228,0)
 ;
"RTN","IBCNEDEP",229,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",230,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",231,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",232,0)
 ;
"RTN","IBCNEDEP",233,0)
 S DFN=""
"RTN","IBCNEDEP",234,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:IHCNT=HLMAX!$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",235,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",236,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",237,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",238,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",239,0)
 . ;
"RTN","IBCNEDEP",240,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",241,0)
 . ;
"RTN","IBCNEDEP",242,0)
 . ;  Get the total number of identification messages for a patient
"RTN","IBCNEDEP",243,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",244,0)
 . ;
"RTN","IBCNEDEP",245,0)
 . ;  If the total number of identification messages for this
"RTN","IBCNEDEP",246,0)
 . ;  patient is greater than the maximum number of allowed
"RTN","IBCNEDEP",247,0)
 . ;  HL7 messages, stop processing until the next night
"RTN","IBCNEDEP",248,0)
 . I (TOT+IHCNT)>HLMAX S QFL=1 Q
"RTN","IBCNEDEP",249,0)
 . ;
"RTN","IBCNEDEP",250,0)
 . ;  For each identification transaction generate an HL7 message
"RTN","IBCNEDEP",251,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:IHCNT=HLMAX
"RTN","IBCNEDEP",252,0)
 .. D PROC
"RTN","IBCNEDEP",253,0)
 .. ;
"RTN","IBCNEDEP",254,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",255,0)
 .. D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",256,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",257,0)
 .. ;
"RTN","IBCNEDEP",258,0)
 .. ;  If not successful
"RTN","IBCNEDEP",259,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",260,0)
 .. ;
"RTN","IBCNEDEP",261,0)
 .. ;  If successful
"RTN","IBCNEDEP",262,0)
 .. D SCC
"RTN","IBCNEDEP",263,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",264,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",265,0)
 ;
"RTN","IBCNEDEP",266,0)
 Q
"RTN","IBCNEDEP",267,0)
 ;
"RTN","IBCNEDEP",268,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",269,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",270,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",271,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",272,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",273,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",274,0)
 S FRDT=$P(TRANSR,U,17)
"RTN","IBCNEDEP",275,0)
 ;
"RTN","IBCNEDEP",276,0)
 ;  Build the HL7 message
"RTN","IBCNEDEP",277,0)
 D PID^IBCNEHLQ I PID="" Q
"RTN","IBCNEDEP",278,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=PID
"RTN","IBCNEDEP",279,0)
 D GT1^IBCNEHLQ I GT1'="" S HCT=HCT+1,^TMP("HLS",$J,HCT)=GT1
"RTN","IBCNEDEP",280,0)
 D IN1^IBCNEHLQ I IN1'="" D
"RTN","IBCNEDEP",281,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",282,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=IN1 Q
"RTN","IBCNEDEP",283,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=IN1 Q
"RTN","IBCNEDEP",284,0)
 . S CNT=CNT+1
"RTN","IBCNEDEP",285,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",286,0)
 . S ^TMP("HLS",$J,HCT)=IN1
"RTN","IBCNEDEP",287,0)
 Q
"RTN","IBCNEDEP",288,0)
 ;
"RTN","IBCNEDEP",289,0)
SCC ;  If successfully creates an HL7 message
"RTN","IBCNEDEP",290,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEP",291,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEP",292,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEP",293,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEP",294,0)
 D ^DIE
"RTN","IBCNEDEP",295,0)
 ;
"RTN","IBCNEDEP",296,0)
 ;  Create Response Record
"RTN","IBCNEDEP",297,0)
 S RSTYPE="O"
"RTN","IBCNEDEP",298,0)
 D RESP^IBCNEDEQ
"RTN","IBCNEDEP",299,0)
 ;
"RTN","IBCNEDEP",300,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEP",301,0)
 D SUB^IBCNEDEQ
"RTN","IBCNEDEP",302,0)
 ;
"RTN","IBCNEDEP",303,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEP",304,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEP",305,0)
 Q
"RTN","IBCNEDEQ")
0^64^B18098974
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEDEQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",24,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",25,0)
 S XMSUB="IIV HL7 Creation Error"
"RTN","IBCNEDEQ",26,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",27,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",28,0)
 Q
"RTN","IBCNEDEQ",29,0)
 ;
"RTN","IBCNEDEQ",30,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",31,0)
 ;
"RTN","IBCNEDEQ",32,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",33,0)
 ;
"RTN","IBCNEDEQ",34,0)
 ;  Parameters
"RTN","IBCNEDEQ",35,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",36,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",37,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",38,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",39,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",40,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",41,0)
 ;
"RTN","IBCNEDEQ",42,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",43,0)
 S MSG(1)="No retries defined in the IB SITE PARAMETERS File."
"RTN","IBCNEDEQ",44,0)
 S MSG(2)="No Response has been received within the defined failure days for "
"RTN","IBCNEDEQ",45,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",46,0)
 ;
"RTN","IBCNEDEQ",47,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",48,0)
 ;
"RTN","IBCNEDEQ",49,0)
 I FMSG D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",50,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",51,0)
 Q
"RTN","IBCNEDEQ",52,0)
 ;
"RTN","IBCNEDEQ",53,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",54,0)
 ;
"RTN","IBCNEDEQ",55,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",56,0)
 ;
"RTN","IBCNEDEQ",57,0)
 ;  Parameters
"RTN","IBCNEDEQ",58,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",59,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",60,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",61,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",62,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",63,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",64,0)
 ;
"RTN","IBCNEDEQ",65,0)
 S XMSUB="IIV Communication Error"
"RTN","IBCNEDEQ",66,0)
 S MSG(1)="The number of retries for Patient: "_$P($G(^DPT(DFN,0)),U,1)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",67,0)
 S MSG(2)="exceeds the number of retries defined in the IB SITE PARAMETERS File."
"RTN","IBCNEDEQ",68,0)
 ;
"RTN","IBCNEDEQ",69,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",70,0)
 ;
"RTN","IBCNEDEQ",71,0)
 I FMSG D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",72,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",73,0)
 Q
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",76,0)
 ;
"RTN","IBCNEDEQ",77,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",80,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",81,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",82,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",83,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",84,0)
 ;
"RTN","IBCNEDEQ",85,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",86,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",87,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",88,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",89,0)
 K DD,DO
"RTN","IBCNEDEQ",90,0)
 D FILE^DICN
"RTN","IBCNEDEQ",91,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",92,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",93,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",94,0)
 ;
"RTN","IBCNEDEQ",95,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",96,0)
 Q
"RTN","IBCNEDEQ",97,0)
 ;
"RTN","IBCNEDEQ",98,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",99,0)
 ;
"RTN","IBCNEDEQ",100,0)
 ;  Called from IBCNEDEP and IBCNEHLS
"RTN","IBCNEDEQ",101,0)
 ;
"RTN","IBCNEDEQ",102,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",103,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",104,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",105,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",106,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",107,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",108,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",109,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",110,0)
 ;
"RTN","IBCNEDEQ",111,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY
"RTN","IBCNEDEQ",112,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",113,0)
 K DD,DO
"RTN","IBCNEDEQ",114,0)
 D FILE^DICN
"RTN","IBCNEDEQ",115,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",116,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",117,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",118,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",119,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",120,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",121,0)
 ;
"RTN","IBCNEDEQ",122,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",123,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",124,0)
 ;
"RTN","IBCNEDEQ",125,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",126,0)
 I $D(ERR) D
"RTN","IBCNEDEQ",127,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",128,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",129,0)
 .. S MCT=MCT+1,MSG(MCT)=ERR("DIERR",VEN,"TEXT",1)
"RTN","IBCNEDEQ",130,0)
 . ;
"RTN","IBCNEDEQ",131,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",132,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",133,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",134,0)
 Q
"RTN","IBCNEDEQ",135,0)
 ;
"RTN","IBCNEDEQ",136,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",137,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",138,0)
 S XMSUB="IIV Communication Timeout"
"RTN","IBCNEDEQ",139,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",140,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",141,0)
 ;
"RTN","IBCNEDEQ",142,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",143,0)
 ;
"RTN","IBCNEDEQ",144,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",145,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",146,0)
 Q
"RTN","IBCNEHLD")
0^46^B4084457
"RTN","IBCNEHLD",1,0)
IBCNEHLD ;DAOU/ALA - IIV Deactivate MFN Message ;02-AUG-2002
"RTN","IBCNEHLD",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLD",4,0)
 ;
"RTN","IBCNEHLD",5,0)
 ;**Program Description**
"RTN","IBCNEHLD",6,0)
 ;  This program will process deactivate registration MFN message
"RTN","IBCNEHLD",7,0)
 ;
"RTN","IBCNEHLD",8,0)
 ;*** WARNING-This program should only be executed by the integration team ***
"RTN","IBCNEHLD",9,0)
 ;
"RTN","IBCNEHLD",10,0)
 Q
"RTN","IBCNEHLD",11,0)
 ;
"RTN","IBCNEHLD",12,0)
 ;  Variables
"RTN","IBCNEHLD",13,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLD",14,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLD",15,0)
 ;    APP = Application
"RTN","IBCNEHLD",16,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLD",17,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLD",18,0)
 ;    LNK = HL7 Link
"RTN","IBCNEHLD",19,0)
 ;
"RTN","IBCNEHLD",20,0)
DEAC ;  Deactivation message for when a site consolidates with another site
"RTN","IBCNEHLD",21,0)
 NEW MGRP,APP,EVENT,CODE,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX
"RTN","IBCNEHLD",22,0)
 NEW HLEID,LNK,HLCS,HLINST,HLN,HLPARAM,HLDOM,HLHDR,HLSAN
"RTN","IBCNEHLD",23,0)
 NEW HLTYPE,HLQ,HLRESLT,ID,DA,DISYS,MFE,RESP,ZMID
"RTN","IBCNEHLD",24,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLD",25,0)
 ;
"RTN","IBCNEHLD",26,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLD",27,0)
 ;
"RTN","IBCNEHLD",28,0)
HL ;  When a site deactivates, the enrollment should be an
"RTN","IBCNEHLD",29,0)
 ;  "MDC" (delete) record
"RTN","IBCNEHLD",30,0)
 S MFE(1)="MDC"
"RTN","IBCNEHLD",31,0)
 ;
"RTN","IBCNEHLD",32,0)
 ;  Initialize the HL7
"RTN","IBCNEHLD",33,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLD",34,0)
 S HLFS=HL("FS"),HLECH=$E(HL("ECH"),1),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLD",35,0)
 S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLD",36,0)
 ;
"RTN","IBCNEHLD",37,0)
 ;   Set the MFI segment
"RTN","IBCNEHLD",38,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="AL"
"RTN","IBCNEHLD",39,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLD",40,0)
 ;
"RTN","IBCNEHLD",41,0)
 ;  Set the MFE segment
"RTN","IBCNEHLD",42,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLD",43,0)
 S CODE=""
"RTN","IBCNEHLD",44,0)
 S ^TMP("HLS",$J,2)=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)_HLFS_"CE"
"RTN","IBCNEHLD",45,0)
 ;
"RTN","IBCNEHLD",46,0)
 D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"")
"RTN","IBCNEHLD",47,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLD",48,0)
 . S MSG(1)="IIV Deactivation Message not created."
"RTN","IBCNEHLD",49,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLD",50,0)
 . D MLMN
"RTN","IBCNEHLD",51,0)
 K ^TMP("HLS",$J),%H,%I,X,EDT
"RTN","IBCNEHLD",52,0)
 Q
"RTN","IBCNEHLD",53,0)
 ;
"RTN","IBCNEHLD",54,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLD",55,0)
 S XMSUB="IIV Deactivation Failure"
"RTN","IBCNEHLD",56,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLD",57,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLD",58,0)
 Q
"RTN","IBCNEHLI")
0^47^B6564280
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",15,0)
 ;
"RTN","IBCNEHLI",16,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",17,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",18,0)
 . S CNT=0
"RTN","IBCNEHLI",19,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",20,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",21,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",22,0)
 ;
"RTN","IBCNEHLI",23,0)
 ;  Get the IIV user
"RTN","IBCNEHLI",24,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHLI",25,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",26,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",27,0)
 I $E(SEGMT,1,3)'="MSH" S MSG(1)="MSH Segment is not the first segment found" D ERR Q
"RTN","IBCNEHLI",28,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",29,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",30,0)
 ;
"RTN","IBCNEHLI",31,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",32,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",33,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN"
"RTN","IBCNEHLI",34,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",35,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR Q
"RTN","IBCNEHLI",36,0)
 S HLEID=$$HLP^IBCNEHLU(IBPRTCL)
"RTN","IBCNEHLI",37,0)
 ;
"RTN","IBCNEHLI",38,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",39,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","IBCNEHLI",40,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IBCNEHLI",41,0)
 ;
"RTN","IBCNEHLI",42,0)
 ;  Call the event tag
"RTN","IBCNEHLI",43,0)
 D @TAG
"RTN","IBCNEHLI",44,0)
 ;
"RTN","IBCNEHLI",45,0)
 K ^TMP($J,"IBCNEHLI"),HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",46,0)
 Q
"RTN","IBCNEHLI",47,0)
 ;
"RTN","IBCNEHLI",48,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",49,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",50,0)
 ;
"RTN","IBCNEHLI",51,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",52,0)
 ;
"RTN","IBCNEHLI",53,0)
 K ERFLG
"RTN","IBCNEHLI",54,0)
 Q
"RTN","IBCNEHLI",55,0)
 ;
"RTN","IBCNEHLI",56,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",57,0)
 D ^IBCNEHLR
"RTN","IBCNEHLI",58,0)
 ;
"RTN","IBCNEHLI",59,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",60,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",61,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",62,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",63,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",64,0)
 Q
"RTN","IBCNEHLI",65,0)
 ;
"RTN","IBCNEHLI",66,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",67,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",68,0)
 ;
"RTN","IBCNEHLI",69,0)
 Q
"RTN","IBCNEHLI",70,0)
 ;
"RTN","IBCNEHLI",71,0)
ERR ; Process an error
"RTN","IBCNEHLI",72,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",73,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING IIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",74,0)
 K MSG,MGRP
"RTN","IBCNEHLI",75,0)
 Q
"RTN","IBCNEHLK")
0^63^B906706
"RTN","IBCNEHLK",1,0)
IBCNEHLK ;DAOU/ALA - HL7 Acknowledgement Messages ;08-OCT-2002
"RTN","IBCNEHLK",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLK",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLK",4,0)
 ;
"RTN","IBCNEHLK",5,0)
MFK ;  MFN Acknowledgement
"RTN","IBCNEHLK",6,0)
 S HCT=1
"RTN","IBCNEHLK",7,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHLK",8,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D
"RTN","IBCNEHLK",9,0)
 . D SPAR^IBCNEHLP
"RTN","IBCNEHLK",10,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLK",11,0)
 . ;
"RTN","IBCNEHLK",12,0)
 . I SEG="MSA" D
"RTN","IBCNEHLK",13,0)
 .. S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3))
"RTN","IBCNEHLK",14,0)
 .. ;
"RTN","IBCNEHLK",15,0)
 .. I ACK="AE" S VMFN(350.9,"1,",51.22)=0
"RTN","IBCNEHLK",16,0)
 .. I ACK="AA" S VMFN(350.9,"1,",51.22)=1
"RTN","IBCNEHLK",17,0)
 ;
"RTN","IBCNEHLK",18,0)
 D FILE^DIE("I","VMFN")
"RTN","IBCNEHLK",19,0)
 ;
"RTN","IBCNEHLK",20,0)
 K IBSEG,SEG,HCT,ACK,EVENT,HL,IBPRTCL,IDUZ,MSGID,SEGMT,TAG,VMFN
"RTN","IBCNEHLK",21,0)
 Q
"RTN","IBCNEHLM")
0^48^B21850110
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    LNK = HL7 Link
"RTN","IBCNEHLM",26,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",27,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",28,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",29,0)
 ;
"RTN","IBCNEHLM",30,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",31,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",32,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",33,0)
 NEW HLEID,LNK,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR
"RTN","IBCNEHLM",34,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",35,0)
 NEW VMFE
"RTN","IBCNEHLM",36,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",37,0)
 ;
"RTN","IBCNEHLM",38,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",39,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",40,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",41,0)
 S FRSH=$P(IBCNE,U,1)
"RTN","IBCNEHLM",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",43,0)
 S INACT=$$GET1^DIQ(350.9,"1,",51.08,"E")
"RTN","IBCNEHLM",44,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",45,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",46,0)
 ;
"RTN","IBCNEHLM",47,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",48,0)
 ;
"RTN","IBCNEHLM",49,0)
 ;
"RTN","IBCNEHLM",50,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",51,0)
 I CNTC'="" D
"RTN","IBCNEHLM",52,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",53,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",54,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",55,0)
 ;
"RTN","IBCNEHLM",56,0)
 ;  Get data from HL7 Package
"RTN","IBCNEHLM",57,0)
 S LNK="IIV SERVER",LNK=$O(^HLCS(870,"B",LNK,0))
"RTN","IBCNEHLM",58,0)
 S IPA=$P($G(^HLCS(870,LNK,400)),U,1),IPP=$P($G(^(400)),U,2)
"RTN","IBCNEHLM",59,0)
 ;
"RTN","IBCNEHLM",60,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",61,0)
 I IPA=""!(IPP="") S MCT=MCT+1,MSG(MCT)="IP Address or Port is not defined.  ",QFL=1
"RTN","IBCNEHLM",62,0)
 ;
"RTN","IBCNEHLM",63,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the IIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",64,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the IIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",65,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the IIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",66,0)
 ;
"RTN","IBCNEHLM",67,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",68,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",69,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",70,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",71,0)
 ;
"RTN","IBCNEHLM",72,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",73,0)
 . S MCT=MCT+1,MSG(MCT)="The following IIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",74,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic reverification checks"" is blank.  "
"RTN","IBCNEHLM",75,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",76,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",77,0)
 . Q
"RTN","IBCNEHLM",78,0)
 ;
"RTN","IBCNEHLM",79,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",80,0)
 I QFL=1 Q
"RTN","IBCNEHLM",81,0)
 ;
"RTN","IBCNEHLM",82,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",83,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",84,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",87,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",88,0)
 S HLFS=HL("FS"),HLECH=$E(HL("ECH"),1),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLM",89,0)
 S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",90,0)
 ;
"RTN","IBCNEHLM",91,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",92,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",93,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",94,0)
 ;
"RTN","IBCNEHLM",95,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",96,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",97,0)
 S CODE=TAXID_HLECH_IPA_HLECH_IPP_HLECH_CNTCNM_HLECH_CNTCPH_HLECH_CNTCEM_HLECH_FRSH_HLECH_IHLP_HLECH_IHLT_HLECH_IHLS_HLECH_INACT
"RTN","IBCNEHLM",98,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",99,0)
 S $P(VMFE,U,11)=$S($P(VMFE,U,11)="YES":"Y",1:"N")
"RTN","IBCNEHLM",100,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",101,0)
 ;
"RTN","IBCNEHLM",102,0)
 D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",103,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",104,0)
 . S MSG(1)="HL7 IIV Registration Message not created."
"RTN","IBCNEHLM",105,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",106,0)
 . D MLMN
"RTN","IBCNEHLM",107,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",108,0)
 Q
"RTN","IBCNEHLM",109,0)
 ;
"RTN","IBCNEHLM",110,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",111,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",112,0)
 S XMSUB="IIV Registration Failure"
"RTN","IBCNEHLM",113,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",114,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",115,0)
 Q
"RTN","IBCNEHLO")
0^49^B600205
"RTN","IBCNEHLO",1,0)
IBCNEHLO ;DAOU/ALA - Outgoing HL7 messages ;17-JUN-2002
"RTN","IBCNEHLO",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLO",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLO",4,0)
 ;
"RTN","IBCNEHLO",5,0)
 ;**Program Description**
"RTN","IBCNEHLO",6,0)
 ;  This program passes the HL7 protocol (variable IBCNHLP - defined by
"RTN","IBCNEHLO",7,0)
 ;  the calling routine) to INIT^HLFNC2, which loads protocol specific
"RTN","IBCNEHLO",8,0)
 ;  variables needed to generate an HL7 message into the HL array.
"RTN","IBCNEHLO",9,0)
 ;  In addition, the protocol IEN is set using the extrinsic function,
"RTN","IBCNEHLO",10,0)
 ;  $$HLP^IBCNEHLU.
"RTN","IBCNEHLO",11,0)
 ;
"RTN","IBCNEHLO",12,0)
 ;  Input Parameters
"RTN","IBCNEHLO",13,0)
 ;    IBCNHLP = Protocol Name
"RTN","IBCNEHLO",14,0)
 ;
"RTN","IBCNEHLO",15,0)
 ;
"RTN","IBCNEHLO",16,0)
INIT ;  Initialization for HL7
"RTN","IBCNEHLO",17,0)
 D INIT^HLFNC2(IBCNHLP,.HL)
"RTN","IBCNEHLO",18,0)
 S HLFS=HL("FS"),HLECH=$E(HL("ECH"),1),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLO",19,0)
 S HLEID=$$HLP^IBCNEHLU(IBCNHLP)
"RTN","IBCNEHLO",20,0)
 Q
"RTN","IBCNEHLO",21,0)
 ;
"RTN","IBCNEHLP")
0^69^B72329786
"RTN","IBCNEHLP",1,0)
IBCNEHLP ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002
"RTN","IBCNEHLP",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLP",4,0)
 ;
"RTN","IBCNEHLP",5,0)
 ;**Program Description**
"RTN","IBCNEHLP",6,0)
 ;  This program will process the individual segments of the 
"RTN","IBCNEHLP",7,0)
 ;  incoming IIV response messages.
"RTN","IBCNEHLP",8,0)
 ; 
"RTN","IBCNEHLP",9,0)
 ; * Each of these tags are called by IBCNEHLR.
"RTN","IBCNEHLP",10,0)
 ;
"RTN","IBCNEHLP",11,0)
 ;  Variables
"RTN","IBCNEHLP",12,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHLP",13,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHLP",14,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHLP",15,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHLP",16,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHLP",17,0)
 ;    ERACT = Error Action
"RTN","IBCNEHLP",18,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHLP",19,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHLP",20,0)
 ;
"RTN","IBCNEHLP",21,0)
 Q  ; No direct calls
"RTN","IBCNEHLP",22,0)
 ;
"RTN","IBCNEHLP",23,0)
MSA ;  Process the MSA segment
"RTN","IBCNEHLP",24,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(5))
"RTN","IBCNEHLP",25,0)
 S ERTXT=$G(IBSEG(4)),ERACT=$G(IBSEG(6)),ERCON=$G(IBSEG(7))
"RTN","IBCNEHLP",26,0)
 ;
"RTN","IBCNEHLP",27,0)
 I MSGID="" D  G MSAX
"RTN","IBCNEHLP",28,0)
 . ;Find the PID segment to extract ICN and patient name
"RTN","IBCNEHLP",29,0)
 . N ICN,NAME
"RTN","IBCNEHLP",30,0)
 . S (ICN,NAME)=""
"RTN","IBCNEHLP",31,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLP",32,0)
 ..  D SPAR
"RTN","IBCNEHLP",33,0)
 ..  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLP",34,0)
 ..  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLP",35,0)
 . D ERRMSG S ERFLG=1
"RTN","IBCNEHLP",36,0)
 ;
"RTN","IBCNEHLP",37,0)
 ;  Check for message id/payer combination and get response IEN
"RTN","IBCNEHLP",38,0)
 D PCK^IBCNEHLS
"RTN","IBCNEHLP",39,0)
 ;
"RTN","IBCNEHLP",40,0)
 ;  If no record IEN, quit
"RTN","IBCNEHLP",41,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHLP",42,0)
 ;
"RTN","IBCNEHLP",43,0)
 ; Update record with information
"RTN","IBCNEHLP",44,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHLP",45,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHLP",46,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHLP",47,0)
 ;
"RTN","IBCNEHLP",48,0)
 ; Update with internal values
"RTN","IBCNEHLP",49,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",50,0)
 ;
"RTN","IBCNEHLP",51,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHLP",52,0)
 ;
"RTN","IBCNEHLP",53,0)
 ; Update with external values
"RTN","IBCNEHLP",54,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHLP",55,0)
MSAX ;
"RTN","IBCNEHLP",56,0)
 Q
"RTN","IBCNEHLP",57,0)
 ;
"RTN","IBCNEHLP",58,0)
CTD ;  Contact segment processing
"RTN","IBCNEHLP",59,0)
 NEW CTNAME,CTQUAL,CTNUM,CTQIEN,IENS,FLD,DATA,II,FFL
"RTN","IBCNEHLP",60,0)
 ;
"RTN","IBCNEHLP",61,0)
 ;  Parse out data from segment
"RTN","IBCNEHLP",62,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$G(IBSEG(7)),CTNUM=$G(IBSEG(6))
"RTN","IBCNEHLP",63,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHLP",64,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHLP",65,0)
 I CTNAME[$E(HLECH,1,1) S CTNAME=$$FMNAME^HLFNC(CTNAME,HLECH)
"RTN","IBCNEHLP",66,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHLP",67,0)
 ;
"RTN","IBCNEHLP",68,0)
 ;  Look up contact person
"RTN","IBCNEHLP",69,0)
 NEW DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS
"RTN","IBCNEHLP",70,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHLP",71,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHLP",72,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHLP",73,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHLP",74,0)
 ;
"RTN","IBCNEHLP",75,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHLP",76,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHLP",77,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHLP",78,0)
 ;
"RTN","IBCNEHLP",79,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",80,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHLP",81,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHLP",82,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",83,0)
CTDX ;
"RTN","IBCNEHLP",84,0)
 Q
"RTN","IBCNEHLP",85,0)
 ;
"RTN","IBCNEHLP",86,0)
PID ;  Patient segment processing
"RTN","IBCNEHLP",87,0)
 NEW ICN,DOB,SEX,SSN,NAME,DFN,DOD,LUPDT,LFAC,XDFN
"RTN","IBCNEHLP",88,0)
 ;
"RTN","IBCNEHLP",89,0)
 S ICN=$G(IBSEG(4)),DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHLP",90,0)
 S SSN=$G(IBSEG(20)),NAME=$G(IBSEG(6)),DFN=$G(IBSEG(5))
"RTN","IBCNEHLP",91,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHLP",92,0)
 ;
"RTN","IBCNEHLP",93,0)
 ;  Convert data from HL7 format to VISTA format
"RTN","IBCNEHLP",94,0)
 S NAME=$$FMNAME^HLFNC(NAME,HLECH)
"RTN","IBCNEHLP",95,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHLP",96,0)
 ;
"RTN","IBCNEHLP",97,0)
 ;  Check that patient does match
"RTN","IBCNEHLP",98,0)
 I ICN'="" S XDFN=$O(^DPT("AICN",ICN,"")) I XDFN'=DFN D  Q
"RTN","IBCNEHLP",99,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHLP",100,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Response message received pointed"
"RTN","IBCNEHLP",101,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" to two separate patients."
"RTN","IBCNEHLP",102,0)
 ;
"RTN","IBCNEHLP",103,0)
 ;  Perform date of death check
"RTN","IBCNEHLP",104,0)
 I DOD'="" D DODCK
"RTN","IBCNEHLP",105,0)
 ;
"RTN","IBCNEHLP",106,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,RIEN_",",.02)=DFN
"RTN","IBCNEHLP",107,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHLP",108,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN,RSUPDT(365,RIEN_",",1.16)=DOD
"RTN","IBCNEHLP",109,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)="v"
"RTN","IBCNEHLP",110,0)
 S RSUPDT(365,RIEN_",",1.09)="01"
"RTN","IBCNEHLP",111,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",112,0)
PIDX ;
"RTN","IBCNEHLP",113,0)
 Q
"RTN","IBCNEHLP",114,0)
DODCK ;  Date of death check
"RTN","IBCNEHLP",115,0)
 NEW CDOD,CIDDSP,IDDSP,IDSSN,XMSUB,MSG
"RTN","IBCNEHLP",116,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLP",117,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLP",118,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLP",119,0)
 ;
"RTN","IBCNEHLP",120,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLP",121,0)
 I CDOD=DOD Q
"RTN","IBCNEHLP",122,0)
 ;
"RTN","IBCNEHLP",123,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLP",124,0)
 I CDOD="" D  Q
"RTN","IBCNEHLP",125,0)
 . ;  Send an email message
"RTN","IBCNEHLP",126,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLP",127,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" from"
"RTN","IBCNEHLP",128,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLP",129,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLP",130,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLP",131,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",132,0)
 ;
"RTN","IBCNEHLP",133,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLP",134,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLP",135,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLP",136,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLP",137,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",138,0)
 ;
"RTN","IBCNEHLP",139,0)
 Q
"RTN","IBCNEHLP",140,0)
GT1 ;  Guarantor segment processing
"RTN","IBCNEHLP",141,0)
 NEW NAME,DOB,SEX,WHO,RELTN,SSN
"RTN","IBCNEHLP",142,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHLP",143,0)
 S WHO=$G(IBSEG(11)),RELTN=$G(IBSEG(12)),SSN=$G(IBSEG(13))
"RTN","IBCNEHLP",144,0)
 S SUBID=$G(IBSEG(3))
"RTN","IBCNEHLP",145,0)
 ;
"RTN","IBCNEHLP",146,0)
 S WHO=$S(WHO="01":"s",WHO="34":"o",1:WHO)
"RTN","IBCNEHLP",147,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$FMNAME^HLFNC(NAME,HLECH)
"RTN","IBCNEHLP",148,0)
 ;
"RTN","IBCNEHLP",149,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)=WHO
"RTN","IBCNEHLP",150,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHLP",151,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN,RSUPDT(365,RIEN_",",1.09)=RELTN
"RTN","IBCNEHLP",152,0)
 S RSUPDT(365,RIEN_",",1.18)=SUBID
"RTN","IBCNEHLP",153,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",154,0)
GT1X ;
"RTN","IBCNEHLP",155,0)
 Q
"RTN","IBCNEHLP",156,0)
IN1 ;  Insurance segment processing
"RTN","IBCNEHLP",157,0)
 NEW PAYRID,PYRNM,GNAME,GNUMB,EFFDT,EXPDT,COB,SRVDT,MBRID
"RTN","IBCNEHLP",158,0)
 ;
"RTN","IBCNEHLP",159,0)
 S MBRID=$G(IBSEG(3)),PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHLP",160,0)
 S GNAME=$G(IBSEG(10)),GNUMB=$G(IBSEG(9))
"RTN","IBCNEHLP",161,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHLP",162,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHLP",163,0)
 ;
"RTN","IBCNEHLP",164,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHLP",165,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT)
"RTN","IBCNEHLP",166,0)
 ;
"RTN","IBCNEHLP",167,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHLP",168,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHLP",169,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHLP",170,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHLP",171,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHLP",172,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",173,0)
IN1X ;
"RTN","IBCNEHLP",174,0)
 Q
"RTN","IBCNEHLP",175,0)
IN3 ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHLP",176,0)
 NEW CRDT
"RTN","IBCNEHLP",177,0)
 ;
"RTN","IBCNEHLP",178,0)
 S CRDT=$G(IBSEG(8))
"RTN","IBCNEHLP",179,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHLP",180,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHLP",181,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHLP",182,0)
IN3X ;
"RTN","IBCNEHLP",183,0)
 Q
"RTN","IBCNEHLP",184,0)
ZEB ;  Eligibility/Benefit segment processing
"RTN","IBCNEHLP",185,0)
 NEW DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS,EBN,IENS,RSUPDT
"RTN","IBCNEHLP",186,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHLP",187,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHLP",188,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHLP",189,0)
 S X=EBN D ^DIC
"RTN","IBCNEHLP",190,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHLP",191,0)
 ;
"RTN","IBCNEHLP",192,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",193,0)
 ;
"RTN","IBCNEHLP",194,0)
 F II=2:1:9 S RSUPDT(365.02,IENS,".0"_II)=$G(IBSEG(II+1))
"RTN","IBCNEHLP",195,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))
"RTN","IBCNEHLP",196,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHLP",197,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHLP",198,0)
ZEBX ;
"RTN","IBCNEHLP",199,0)
 Q
"RTN","IBCNEHLP",200,0)
NTE ;  Notes segment processing
"RTN","IBCNEHLP",201,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHLP",202,0)
 S NOTES(1)=$G(IBSEG(4))
"RTN","IBCNEHLP",203,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHLP",204,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHLP",205,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHLP",206,0)
 K NOTES
"RTN","IBCNEHLP",207,0)
NTEX ;
"RTN","IBCNEHLP",208,0)
 Q
"RTN","IBCNEHLP",209,0)
 ;
"RTN","IBCNEHLP",210,0)
SPAR ;  Segment Parsing
"RTN","IBCNEHLP",211,0)
 NEW ISCT,II,IJ,IK,ISDATA,ISPEC,ISBEG,ISEND,IS,LSDATA,IM,NPC
"RTN","IBCNEHLP",212,0)
 ;
"RTN","IBCNEHLP",213,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLP",214,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLP",215,0)
 . S IS=IS+1
"RTN","IBCNEHLP",216,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLP",217,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_"|"
"RTN","IBCNEHLP",218,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLP",219,0)
 ;
"RTN","IBCNEHLP",220,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLP",221,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLP",222,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLP",223,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLP",224,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHLP",225,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLP",226,0)
 G LP
"RTN","IBCNEHLP",227,0)
 ;
"RTN","IBCNEHLP",228,0)
CLNSTR(STRING,CHARS,SUBSEP) ; Remove extra trailing components and subcompo^
"RTN","IBCNEHLP",229,0)
 ;                         in the HL7 segment
"RTN","IBCNEHLP",230,0)
 N RTSTRING,NUMPEC,PEC
"RTN","IBCNEHLP",231,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLP",232,0)
 ; Now we have string without trailing chars, remove from subs
"RTN","IBCNEHLP",233,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLP",234,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLP",235,0)
 Q RTSTRING
"RTN","IBCNEHLP",236,0)
 ;
"RTN","IBCNEHLP",237,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLP",238,0)
 N R,L
"RTN","IBCNEHLP",239,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLP",240,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLP",241,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLP",242,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLP",243,0)
 ;
"RTN","IBCNEHLP",244,0)
ERRMSG ; Send Mailman message if message ctrl id = ""
"RTN","IBCNEHLP",245,0)
 N XMSUB,MSG,MSGCT
"RTN","IBCNEHLP",246,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHLP",247,0)
 S MSG(1)="A response was received with a blank Message Control Id"
"RTN","IBCNEHLP",248,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHLP",249,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHLP",250,0)
 I TRACE="" D
"RTN","IBCNEHLP",251,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHLP",252,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the NVS."
"RTN","IBCNEHLP",253,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLP",254,0)
 Q
"RTN","IBCNEHLQ")
0^50^B30315295
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an IIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;
"RTN","IBCNEHLQ",12,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",13,0)
 ;  Variables
"RTN","IBCNEHLQ",14,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",15,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",16,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",17,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",18,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",19,0)
 ;
"RTN","IBCNEHLQ",20,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",21,0)
 NEW VAERR,VAFSTR,VADM,VA,ICN,SNDSSN
"RTN","IBCNEHLQ",22,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",23,0)
 D DEM^VADPT
"RTN","IBCNEHLQ",24,0)
 S VAFSTR=",1,7,8,11,"
"RTN","IBCNEHLQ",25,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",26,0)
 S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",27,0)
 S $P(PID,HLFS,4)=ICN,$P(PID,HLFS,5)=DFN
"RTN","IBCNEHLQ",28,0)
 I SNDSSN S $P(PID,HLFS,20)=VA("PID")
"RTN","IBCNEHLQ",29,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",30,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",31,0)
 Q
"RTN","IBCNEHLQ",32,0)
 ;
"RTN","IBCNEHLQ",33,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",34,0)
 NEW WHO,NM,IDOB,ISSN,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",35,0)
 NEW SNDSSN
"RTN","IBCNEHLQ",36,0)
 ;
"RTN","IBCNEHLQ",37,0)
 S SNDSSN=$$SNDSSN^IBCNEUT5(PAYR,"IIV")
"RTN","IBCNEHLQ",38,0)
 ;
"RTN","IBCNEHLQ",39,0)
 S GT1=""
"RTN","IBCNEHLQ",40,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",41,0)
 ;
"RTN","IBCNEHLQ",42,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",43,0)
 I EXT=1 D
"RTN","IBCNEHLQ",44,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",45,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",46,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",47,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",48,0)
 . S $P(GT1,HLFS,3)=NM
"RTN","IBCNEHLQ",49,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",50,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",51,0)
 . S $P(GT1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",52,0)
 . I SNDSSN S $P(GT1,HLFS,12)=$P($G(^IBA(355.33,BUFF,60)),U,9)
"RTN","IBCNEHLQ",53,0)
 ;
"RTN","IBCNEHLQ",54,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",55,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",56,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",57,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",58,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",59,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",60,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",61,0)
 . S $P(GT1,HLFS,3)=NM
"RTN","IBCNEHLQ",62,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",63,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",64,0)
 . S $P(GT1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",65,0)
 . ;
"RTN","IBCNEHLQ",66,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",67,0)
 . ;
"RTN","IBCNEHLQ",68,0)
 . S ISSN=$P(IBSDATA,U,5)
"RTN","IBCNEHLQ",69,0)
 . I SNDSSN S $P(GT1,HLFS,12)=ISSN
"RTN","IBCNEHLQ",70,0)
 . ;
"RTN","IBCNEHLQ",71,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,12))
"RTN","IBCNEHLQ",72,0)
 . S $P(GT1,HLFS,6)=IBADDR
"RTN","IBCNEHLQ",73,0)
 . ;
"RTN","IBCNEHLQ",74,0)
 . D CHK
"RTN","IBCNEHLQ",75,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",76,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",77,0)
 . ;I $P(GT1,HLFS,12)=""&(ISSN'="") S $P(GT1,HLFS,12)=ISSN
"RTN","IBCNEHLQ",78,0)
 . I SNDSSN,$P(GT1,HLFS,12)=""&(ISSN'="") S $P(GT1,HLFS,12)=ISSN
"RTN","IBCNEHLQ",79,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",80,0)
 .. S SEX=$P(^DPT(DFN,0),U,2)
"RTN","IBCNEHLQ",81,0)
 .. S $P(GT1,HLFS,9)=$S(SEX="M":"F",1:"M")
"RTN","IBCNEHLQ",82,0)
 ;
"RTN","IBCNEHLQ",83,0)
 I GT1="" Q
"RTN","IBCNEHLQ",84,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",85,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",86,0)
 Q
"RTN","IBCNEHLQ",87,0)
 ;
"RTN","IBCNEHLQ",88,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",89,0)
 NEW EFFDT,EXPDT,WHO,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",90,0)
 S IN1="",SRVDT=$$HLDATE^HLFNC(SRVDT)
"RTN","IBCNEHLQ",91,0)
 ;
"RTN","IBCNEHLQ",92,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",93,0)
 I EXT=1 D
"RTN","IBCNEHLQ",94,0)
 . ;S $P(IN1,HLFS,2)=$P($G(^IBA(355.33,BUFF,60)),U,4)
"RTN","IBCNEHLQ",95,0)
 . S $P(IN1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",96,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",97,0)
 .. S $P(IN1,HLFS,3)=$P(^IBE(365.12,PAYR,0),U,2)
"RTN","IBCNEHLQ",98,0)
 .. S $P(IN1,HLFS,4)=$P(^IBE(365.12,PAYR,0),U,1)
"RTN","IBCNEHLQ",99,0)
 . S $P(IN1,HLFS,8)=$P($G(^IBA(355.33,BUFF,40)),U,3)
"RTN","IBCNEHLQ",100,0)
 . S $P(IN1,HLFS,9)=$P($G(^IBA(355.33,BUFF,40)),U,2)
"RTN","IBCNEHLQ",101,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",102,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",103,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",104,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",105,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",106,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",107,0)
 ;
"RTN","IBCNEHLQ",108,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",109,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",110,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",111,0)
 . I $G(SUBID)'=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2) Q
"RTN","IBCNEHLQ",112,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",113,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",114,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",115,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",116,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6) I WHO="" Q
"RTN","IBCNEHLQ",117,0)
 . S $P(IN1,HLFS,17)=$S(WHO="v":18,WHO="":18,WHO="s":"01",1:34)
"RTN","IBCNEHLQ",118,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",119,0)
 . S $P(IN1,HLFS,8)=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEHLQ",120,0)
 . S $P(IN1,HLFS,9)=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEHLQ",121,0)
 ;
"RTN","IBCNEHLQ",122,0)
 ;  If it's an inquire with 'No Payer', don't send payer info
"RTN","IBCNEHLQ",123,0)
 I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",124,0)
 . S $P(IN1,HLFS,3)=$P(^IBE(365.12,PAYR,0),U,2)
"RTN","IBCNEHLQ",125,0)
 . S $P(IN1,HLFS,4)=$P(^IBE(365.12,PAYR,0),U,1)
"RTN","IBCNEHLQ",126,0)
 . S $P(IN1,HLFS,2)=$G(SUBID)
"RTN","IBCNEHLQ",127,0)
 ;
"RTN","IBCNEHLQ",128,0)
 I IN1="" Q
"RTN","IBCNEHLQ",129,0)
 ;
"RTN","IBCNEHLQ",130,0)
 I $G(QUERY)="I",$P(IN1,HLFS,17)'=18 S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",131,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",132,0)
 ;
"RTN","IBCNEHLQ",133,0)
 ;  Set the admission date if patient currently admitted
"RTN","IBCNEHLQ",134,0)
 S ADMN=$P($G(^DPT(DFN,.105)),U,1) I ADMN'="" D
"RTN","IBCNEHLQ",135,0)
 . S ADMDT=$P(^DGPM(ADMN,0),U,1),ADMDT=$$HLDATE^HLFNC(ADMDT)
"RTN","IBCNEHLQ",136,0)
 . S $P(IN1,HLFS,24)=ADMDT
"RTN","IBCNEHLQ",137,0)
 ;
"RTN","IBCNEHLQ",138,0)
 ;  Set the service date
"RTN","IBCNEHLQ",139,0)
 S $P(IN1,HLFS,26)=SRVDT
"RTN","IBCNEHLQ",140,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",141,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",142,0)
 Q
"RTN","IBCNEHLQ",143,0)
 ;
"RTN","IBCNEHLQ",144,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",145,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",146,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",147,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",148,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",149,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",150,0)
 . ;
"RTN","IBCNEHLQ",151,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",152,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",153,0)
 . ;
"RTN","IBCNEHLQ",154,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",155,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",156,0)
 . ;
"RTN","IBCNEHLQ",157,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",158,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",159,0)
 ;
"RTN","IBCNEHLQ",160,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",161,0)
 ;
"RTN","IBCNEHLQ",162,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",163,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",164,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",165,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",166,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",167,0)
 S RDATA=^DGPR(408.13,PLIEN,0)
"RTN","IBCNEHLQ",168,0)
 S ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3),ISSN=$P(RDATA,U,9)
"RTN","IBCNEHLQ",169,0)
 I $P(RDATA,U,4)'="" D
"RTN","IBCNEHLQ",170,0)
 . NEW DFN
"RTN","IBCNEHLQ",171,0)
 . S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",172,0)
 . S ISSN=$P(^DPT(DFN,0),U,9)
"RTN","IBCNEHLQ",173,0)
 Q
"RTN","IBCNEHLR")
0^51^B26929967
"RTN","IBCNEHLR",1,0)
IBCNEHLR ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHLR",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLR",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLR",4,0)
 ;
"RTN","IBCNEHLR",5,0)
 ;**Program Description**
"RTN","IBCNEHLR",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHLR",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHLR",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHLR",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHLR",10,0)
 ;
"RTN","IBCNEHLR",11,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLR",12,0)
 ;  DAOU/BHS     10/04/2002  Added logic to update the service date in
"RTN","IBCNEHLR",13,0)
 ;                           the TQ entry so long as the Error Action is
"RTN","IBCNEHLR",14,0)
 ;                           not Please submit original transaction.
"RTN","IBCNEHLR",15,0)
 ;
"RTN","IBCNEHLR",16,0)
 ;  Variables
"RTN","IBCNEHLR",17,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHLR",18,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHLR",19,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHLR",20,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHLR",21,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHLR",22,0)
 ;    ERACT = Error Action
"RTN","IBCNEHLR",23,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHLR",24,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHLR",25,0)
 ;
"RTN","IBCNEHLR",26,0)
EN ; Entry Point
"RTN","IBCNEHLR",27,0)
 N RSUPDT,UP
"RTN","IBCNEHLR",28,0)
 S ERFLG=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1
"RTN","IBCNEHLR",29,0)
 ;
"RTN","IBCNEHLR",30,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHLR",31,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLR",32,0)
 . D SPAR^IBCNEHLP
"RTN","IBCNEHLR",33,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLR",34,0)
 . ;
"RTN","IBCNEHLR",35,0)
 . I SEG="MSA" D MSA^IBCNEHLP Q:ERFLG
"RTN","IBCNEHLR",36,0)
 . ;
"RTN","IBCNEHLR",37,0)
 . ;  Contact Segment
"RTN","IBCNEHLR",38,0)
 . I SEG="CTD" D CTD^IBCNEHLP
"RTN","IBCNEHLR",39,0)
 . ;
"RTN","IBCNEHLR",40,0)
 . ;  Patient Segment
"RTN","IBCNEHLR",41,0)
 . I SEG="PID" D PID^IBCNEHLP
"RTN","IBCNEHLR",42,0)
 . ;
"RTN","IBCNEHLR",43,0)
 . ;  Guarantor Segment
"RTN","IBCNEHLR",44,0)
 . I SEG="GT1" D GT1^IBCNEHLP
"RTN","IBCNEHLR",45,0)
 . ;
"RTN","IBCNEHLR",46,0)
 . ;  Insurance Segment
"RTN","IBCNEHLR",47,0)
 . I SEG="IN1" D IN1^IBCNEHLP
"RTN","IBCNEHLR",48,0)
 . ;
"RTN","IBCNEHLR",49,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHLR",50,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHLP
"RTN","IBCNEHLR",51,0)
 . ;
"RTN","IBCNEHLR",52,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHLR",53,0)
 . I SEG="IN3" D IN3^IBCNEHLP
"RTN","IBCNEHLR",54,0)
 . ;
"RTN","IBCNEHLR",55,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHLR",56,0)
 . I SEG="ZEB" D ZEB^IBCNEHLP
"RTN","IBCNEHLR",57,0)
 . ;
"RTN","IBCNEHLR",58,0)
 . ;  Notes Segment
"RTN","IBCNEHLR",59,0)
 . I SEG="NTE" D NTE^IBCNEHLP
"RTN","IBCNEHLR",60,0)
 ;
"RTN","IBCNEHLR",61,0)
 D FIL
"RTN","IBCNEHLR",62,0)
 Q
"RTN","IBCNEHLR",63,0)
 ; ============================================
"RTN","IBCNEHLR",64,0)
FIL ;  Finish processing the response message
"RTN","IBCNEHLR",65,0)
 ;
"RTN","IBCNEHLR",66,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHLR",67,0)
 ; send an email
"RTN","IBCNEHLR",68,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D
"RTN","IBCNEHLR",69,0)
 . ;
"RTN","IBCNEHLR",70,0)
 . D CE  ; send critical message
"RTN","IBCNEHLR",71,0)
 . ;
"RTN","IBCNEHLR",72,0)
 . ;If the response could not be created, stop processing
"RTN","IBCNEHLR",73,0)
 . I '$D(RIEN) Q
"RTN","IBCNEHLR",74,0)
 . ;
"RTN","IBCNEHLR",75,0)
 . ; Set the Transmission Queue Status to 'Response Received'
"RTN","IBCNEHLR",76,0)
 . S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHLR",77,0)
 . S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHLR",78,0)
 . I TQDATA="" Q
"RTN","IBCNEHLR",79,0)
 . D SST^IBCNEUT2(TQN,3)
"RTN","IBCNEHLR",80,0)
 . ;
"RTN","IBCNEHLR",81,0)
 . ; No further processing for identifications
"RTN","IBCNEHLR",82,0)
 . S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHLR",83,0)
 . I IBQFL="I" Q
"RTN","IBCNEHLR",84,0)
 . ;
"RTN","IBCNEHLR",85,0)
 . ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHLR",86,0)
 . S IBIEN=$P(TQDATA,U,5),RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHLR",87,0)
 . I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHLR",88,0)
 . ;
"RTN","IBCNEHLR",89,0)
 . I IBIEN="" D  Q           ; create a new buffer entry
"RTN","IBCNEHLR",90,0)
 ..  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHLR",91,0)
 ..  S SYMBOL=12 D BUF^IBCNEHLS  ; Determine Patient Ins record IEN
"RTN","IBCNEHLR",92,0)
 . ;
"RTN","IBCNEHLR",93,0)
 . ;Update buffer symbol
"RTN","IBCNEHLR",94,0)
 . D BUFF^IBCNEUT2(IBIEN,12)
"RTN","IBCNEHLR",95,0)
 ;
"RTN","IBCNEHLR",96,0)
 ; If an error occurred, you're done!
"RTN","IBCNEHLR",97,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHLR",98,0)
 ;
"RTN","IBCNEHLR",99,0)
 ; Initialize variables from Response file
"RTN","IBCNEHLR",100,0)
 S RDAT0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNEHLR",101,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHLR",102,0)
 S RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHLR",103,0)
 S TRACE=$P(RDAT0,U,9)
"RTN","IBCNEHLR",104,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHLR",105,0)
 ;
"RTN","IBCNEHLR",106,0)
 ;  Set the Transmission Queue Status to 'Response Received'
"RTN","IBCNEHLR",107,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3)
"RTN","IBCNEHLR",108,0)
 ;
"RTN","IBCNEHLR",109,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHLR",110,0)
 ; if they are different AND the Error Action <> 
"RTN","IBCNEHLR",111,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHLR",112,0)
 ;
"RTN","IBCNEHLR",113,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHLR",114,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHLR",115,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHLR",116,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHLR",117,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHLR",118,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHLR",119,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHLR",120,0)
 ;
"RTN","IBCNEHLR",121,0)
 K TQSRVDT,RSRVDT
"RTN","IBCNEHLR",122,0)
 ;
"RTN","IBCNEHLR",123,0)
 ;  Check for error action
"RTN","IBCNEHLR",124,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D ERROR^IBCNEHLS(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHLR",125,0)
 ;
"RTN","IBCNEHLR",126,0)
 ;  If a buffer entry, check if buffer status is still 'Entered'
"RTN","IBCNEHLR",127,0)
 I BUFF'="",(($P(^IBA(355.33,BUFF,0),U,4)'="E")!$$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHLR",128,0)
 ;
"RTN","IBCNEHLR",129,0)
 ;  Set buffer symbol to verified
"RTN","IBCNEHLR",130,0)
 S SYMBOL=8
"RTN","IBCNEHLR",131,0)
 ;
"RTN","IBCNEHLR",132,0)
 ;  If okay, update the buffer entry
"RTN","IBCNEHLR",133,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHLR",134,0)
 ;
"RTN","IBCNEHLR",135,0)
 ;  If not a buffer entry, create one
"RTN","IBCNEHLR",136,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHLR",137,0)
 ;
"RTN","IBCNEHLR",138,0)
 ;  Set IIV Processed Date to now
"RTN","IBCNEHLR",139,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHLR",140,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLR",141,0)
FILX ;
"RTN","IBCNEHLR",142,0)
 Q
"RTN","IBCNEHLR",143,0)
 ;
"RTN","IBCNEHLR",144,0)
CE ;  Create and send critical message
"RTN","IBCNEHLR",145,0)
 N XMY,VEN,MCT,SUBCNT
"RTN","IBCNEHLR",146,0)
 S VEN=0,MCT=8,ERFLG=1,SUBCNT=""
"RTN","IBCNEHLR",147,0)
 S MSG(1)="CRITICAL: Error While Processing Response Message from the EC"
"RTN","IBCNEHLR",148,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHLR",149,0)
 S MSG(3)="*** IRM *** Please contact VA IIV Technical Support because the"
"RTN","IBCNEHLR",150,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHLR",151,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHLR",152,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHLR",153,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_".  Please review the"
"RTN","IBCNEHLR",154,0)
 S MSG(8)="response with the IIV Response Report by Trace #."
"RTN","IBCNEHLR",155,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHLR",156,0)
 . F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  D
"RTN","IBCNEHLR",157,0)
 . . S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHLR",158,0)
 . S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHLR",159,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHLR",160,0)
 Q
"RTN","IBCNEHLR",161,0)
 ;
"RTN","IBCNEHLS")
0^52^B54044677
"RTN","IBCNEHLS",1,0)
IBCNEHLS ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002
"RTN","IBCNEHLS",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLS",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLS",4,0)
 ;
"RTN","IBCNEHLS",5,0)
 ;**Program Description**
"RTN","IBCNEHLS",6,0)
 ;  This is a continuation of IBCNEHLR which processes an incoming
"RTN","IBCNEHLS",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHLS",8,0)
 ;
"RTN","IBCNEHLS",9,0)
 Q   ; no direct calls allow
"RTN","IBCNEHLS",10,0)
 ;
"RTN","IBCNEHLS",11,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHLS",12,0)
 ; Input:  TQN - IEN for IIV Transmission Queue (#365.1), required
"RTN","IBCNEHLS",13,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHLS",14,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHLS",15,0)
 ;         TRCN - Trace # from IIV Response (#365)
"RTN","IBCNEHLS",16,0)
 N MSG,ERDESC,ERIEN,XMY
"RTN","IBCNEHLS",17,0)
 ;
"RTN","IBCNEHLS",18,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHLS",19,0)
 ;
"RTN","IBCNEHLS",20,0)
 ; Scenarios:
"RTN","IBCNEHLS",21,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHLS",22,0)
 ;  Original Transaction" - set TQ 
"RTN","IBCNEHLS",23,0)
 ;  Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHLS",24,0)
 I ERACT="R"!(ERACT="P") D  G ERRORX
"RTN","IBCNEHLS",25,0)
 . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHLS",26,0)
 . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHLS",27,0)
 ;
"RTN","IBCNEHLS",28,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHLS",29,0)
 ;  Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHLS",30,0)
 I ERACT="W" D  G ERRORX
"RTN","IBCNEHLS",31,0)
 . ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHLS",32,0)
 . D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHLS",33,0)
 ;
"RTN","IBCNEHLS",34,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHLS",35,0)
 ;  Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHLS",36,0)
 I ERACT="X" D  G ERRORX
"RTN","IBCNEHLS",37,0)
 . ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHLS",38,0)
 . D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHLS",39,0)
 ;
"RTN","IBCNEHLS",40,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHLS",41,0)
 ;  "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHLS",42,0)
 ;  - set TQ Status to "Response Received"
"RTN","IBCNEHLS",43,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHLS",44,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHLS",45,0)
 I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D  G ERRORX
"RTN","IBCNEHLS",46,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHLS",47,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHLS",48,0)
 ;
"RTN","IBCNEHLS",49,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHLS",50,0)
 ; *** Currently processed in IBCNEHLR ***
"RTN","IBCNEHLS",51,0)
 ;
"RTN","IBCNEHLS",52,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHLS",53,0)
 Q
"RTN","IBCNEHLS",54,0)
 ;
"RTN","IBCNEHLS",55,0)
 ;
"RTN","IBCNEHLS",56,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ; Update Transmission Queue (#365.1)
"RTN","IBCNEHLS",57,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHLS",58,0)
 ; * If unsolicited error or negative Verification response do not 
"RTN","IBCNEHLS",59,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHLS",60,0)
 ;
"RTN","IBCNEHLS",61,0)
 ; Init optional param
"RTN","IBCNEHLS",62,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHLS",63,0)
 ;
"RTN","IBCNEHLS",64,0)
 ; Init vars
"RTN","IBCNEHLS",65,0)
 N DIE,DA,DR,D,D0,DI,DIC,DQ,X,TQDATA,IBSTS,IBIEN,INSIEN,DFN,FTDT,IBQFL
"RTN","IBCNEHLS",66,0)
 N IBDATA,IBSYM
"RTN","IBCNEHLS",67,0)
 ;
"RTN","IBCNEHLS",68,0)
 ;
"RTN","IBCNEHLS",69,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHLS",70,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHLS",71,0)
 ; Ins Buffer IEN
"RTN","IBCNEHLS",72,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHLS",73,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHLS",74,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHLS",75,0)
 ;
"RTN","IBCNEHLS",76,0)
 ; If unsolicited error or negative Identification response do not 
"RTN","IBCNEHLS",77,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHLS",78,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHLS",79,0)
 ;
"RTN","IBCNEHLS",80,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHLS",81,0)
 ;
"RTN","IBCNEHLS",82,0)
 ; Ins Buffer processing
"RTN","IBCNEHLS",83,0)
 I IBIEN'="" D
"RTN","IBCNEHLS",84,0)
 . ; Ins Buf data
"RTN","IBCNEHLS",85,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHLS",86,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHLS",87,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHLS",88,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHLS",89,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHLS",90,0)
 . ;  Resp Rec'd (3) and do NOT update the Ins Buffer symbol
"RTN","IBCNEHLS",91,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHLS",92,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHLS",93,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHLS",94,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error Action Codes ('N','Y','S')
"RTN","IBCNEHLS",95,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C"&($$ERROVR(ERCON)))) D  Q 
"RTN","IBCNEHLS",96,0)
 .. D BUFF^IBCNEUT2(IBIEN,9)   ; Set buffer symbol to "-"
"RTN","IBCNEHLS",97,0)
 .. S SYMBOL=9 D VERIFY(IBIEN)   ; Set verify date & who verified
"RTN","IBCNEHLS",98,0)
 . ; If TQ status is "Responsed Received" & Error action="C" update buffer symbol to "!"
"RTN","IBCNEHLS",99,0)
 . I TSTS=3,(ERACT="C"),'$$ERROVR(ERCON) D  Q
"RTN","IBCNEHLS",100,0)
 .. D BUFF^IBCNEUT2(IBIEN,11)  ; Set buffer symbol to "!"
"RTN","IBCNEHLS",101,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHLS",102,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,12) Q
"RTN","IBCNEHLS",103,0)
 ;
"RTN","IBCNEHLS",104,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHLS",105,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHLS",106,0)
 . ; Determine Patient DFN
"RTN","IBCNEHLS",107,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHLS",108,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHLS",109,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHLS",110,0)
 . ; Add Ins Buffer entry with B8 - "!" (11) symbol for ERACT = "C"
"RTN","IBCNEHLS",111,0)
 . I ERACT="C",'$$ERROVR(ERCON) S SYMBOL=11 D BUF Q
"RTN","IBCNEHLS",112,0)
 . ; Add Ins Buffer entry with "-" (9) symbol for ERACTs N,Y or S 
"RTN","IBCNEHLS",113,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHLS",114,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C"&($$ERROVR(ERCON))) S SYMBOL=9 D BUF Q
"RTN","IBCNEHLS",115,0)
 . ; Add Ins Buffer entry with "!" (12 = B9) symbol for new Error Action
"RTN","IBCNEHLS",116,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=12 D BUF Q
"RTN","IBCNEHLS",117,0)
 ;
"RTN","IBCNEHLS",118,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHLS",119,0)
 ;
"RTN","IBCNEHLS",120,0)
 ; Update TQ record - Status
"RTN","IBCNEHLS",121,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHLS",122,0)
 ;
"RTN","IBCNEHLS",123,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHLS",124,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHLS",125,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHLS",126,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09////^S X=FTDT"
"RTN","IBCNEHLS",127,0)
 . D ^DIE
"RTN","IBCNEHLS",128,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHLS",129,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08////0"
"RTN","IBCNEHLS",130,0)
 . D ^DIE
"RTN","IBCNEHLS",131,0)
 ;
"RTN","IBCNEHLS",132,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHLS",133,0)
 Q
"RTN","IBCNEHLS",134,0)
 ;
"RTN","IBCNEHLS",135,0)
ERROVR(ERCON) ; Error Override Check
"RTN","IBCNEHLS",136,0)
 ; Function to determine if the error action "C" should be overridden
"RTN","IBCNEHLS",137,0)
 ;
"RTN","IBCNEHLS",138,0)
 N RESULT
"RTN","IBCNEHLS",139,0)
 S RESULT=0
"RTN","IBCNEHLS",140,0)
 I ",52,67,75,77,78,"[(","_ERCON_",") S RESULT=1
"RTN","IBCNEHLS",141,0)
 Q RESULT
"RTN","IBCNEHLS",142,0)
 ;
"RTN","IBCNEHLS",143,0)
PCK ;  Payer check
"RTN","IBCNEHLS",144,0)
 ;
"RTN","IBCNEHLS",145,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHLS",146,0)
 N IN1DATA
"RTN","IBCNEHLS",147,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHLS",148,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHLS",149,0)
 ;
"RTN","IBCNEHLS",150,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHLS",151,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHLS",152,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHLS",153,0)
 . ;
"RTN","IBCNEHLS",154,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHLS",155,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHLS",156,0)
 . I IN1DATA="",PRIEN'="" D
"RTN","IBCNEHLS",157,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365,PRIEN,0),U,3)
"RTN","IBCNEHLS",158,0)
 . ;
"RTN","IBCNEHLS",159,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHLS",160,0)
 . ;
"RTN","IBCNEHLS",161,0)
 . ; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHLS",162,0)
 . ; 'Response Received' create a new unsolicited response entry
"RTN","IBCNEHLS",163,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHLS",164,0)
 . . S RIEN=PRIEN,QFL=1
"RTN","IBCNEHLS",165,0)
 ;
"RTN","IBCNEHLS",166,0)
 ;  If message id/payer not found, create a new response entry
"RTN","IBCNEHLS",167,0)
 I RIEN="" D
"RTN","IBCNEHLS",168,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHLS",169,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHLS",170,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHLS",171,0)
 . ;
"RTN","IBCNEHLS",172,0)
 . I PIEN="" D
"RTN","IBCNEHLS",173,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHLS",174,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHLS",175,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHLS",176,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHLS",177,0)
 . S RIEN=RSIEN
"RTN","IBCNEHLS",178,0)
 . K DFN,BUFF,IEN,MDTM,PAYR,RSIEN,PRDATA,IERN
"RTN","IBCNEHLS",179,0)
 ; If no payer in response file, set it
"RTN","IBCNEHLS",180,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,PIEN,0)),U,3)="" D
"RTN","IBCNEHLS",181,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03////^S X=PIEN" D ^DIE
"RTN","IBCNEHLS",182,0)
 Q
"RTN","IBCNEHLS",183,0)
 ;
"RTN","IBCNEHLS",184,0)
BUF ;  Create Buffer record if doesn't exist
"RTN","IBCNEHLS",185,0)
 N UP
"RTN","IBCNEHLS",186,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHLS",187,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHLS",188,0)
 N BUFF S BUFF=+IBFDA
"RTN","IBCNEHLS",189,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHLS",190,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHLS",191,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLS",192,0)
 I SYMBOL=9 D VERIFY(BUFF)   ; symbol 9 is a "-"
"RTN","IBCNEHLS",193,0)
 K SYMBOL
"RTN","IBCNEHLS",194,0)
 Q
"RTN","IBCNEHLS",195,0)
 ;
"RTN","IBCNEHLS",196,0)
VERIFY(BUFF) ;  Set Date verified and who Verified of buffer entry
"RTN","IBCNEHLS",197,0)
 NEW IDUZ,UP
"RTN","IBCNEHLS",198,0)
 ;  Set IIV Processed Date to current dt/tm
"RTN","IBCNEHLS",199,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHLS",200,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHLS",201,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEHLS",202,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHLS",203,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHLS",204,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHLS",205,0)
 Q
"RTN","IBCNEHLS",206,0)
 ;
"RTN","IBCNEHLS",207,0)
PFN(IN1DATA) ;  Find Payer from HL7 message
"RTN","IBCNEHLS",208,0)
 NEW IERN
"RTN","IBCNEHLS",209,0)
 S PAYRID=$$CLNSTR^IBCNEHLP($P(IN1DATA,HLFS,4),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHLS",210,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHLS",211,0)
 I PIEN=0 D  Q
"RTN","IBCNEHLS",212,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHLS",213,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHLS",214,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHLS",215,0)
 Q
"RTN","IBCNEHLS",216,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHLS",217,0)
 N IPCT,SEGMT
"RTN","IBCNEHLS",218,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHLS",219,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHLS",220,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHLS",221,0)
 Q SEGMT
"RTN","IBCNEHLT")
0^53^B46973489
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ;24-JUN-2002
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DATA,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,USSN,REQSUB,NAFLG,NPFLG
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 ;
"RTN","IBCNEHLT",14,0)
 S HCT=1,ERFLG=0,NAFLG=0,NPFLG=0
"RTN","IBCNEHLT",15,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",16,0)
 . D SPAR^IBCNEHLP
"RTN","IBCNEHLT",17,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",18,0)
 . ;
"RTN","IBCNEHLT",19,0)
 . I SEG="MFI" D
"RTN","IBCNEHLT",20,0)
 .. S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",21,0)
 .. S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",22,0)
 . ;
"RTN","IBCNEHLT",23,0)
 . I SEG="MFE" D
"RTN","IBCNEHLT",24,0)
 .. I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",25,0)
 .. I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",26,0)
 .. S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",27,0)
 .. ;
"RTN","IBCNEHLT",28,0)
 .. I FLN'=365.12 D  Q
"RTN","IBCNEHLT",29,0)
 ... S ID=$P(DATA,$E(HLECH,1),1),DESC=$P(DATA,$E(HLECH,1),2)
"RTN","IBCNEHLT",30,0)
 ... D TFIL
"RTN","IBCNEHLT",31,0)
 .. ;
"RTN","IBCNEHLT",32,0)
 .. S ID=$P(DATA,$E(HLECH,1),1),NEWID=$P(DATA,$E(HLECH,1),2)
"RTN","IBCNEHLT",33,0)
 .. S DESC=$P(DATA,$E(HLECH,1),3)
"RTN","IBCNEHLT",34,0)
 .. S HEDI=$P(DATA,$E(HLECH,1),4),PEDI=$P(DATA,$E(HLECH,1),5)
"RTN","IBCNEHLT",35,0)
 .. S APP=$P(DATA,$E(HLECH,1),6),STAT=$P(DATA,$E(HLECH,1),7)
"RTN","IBCNEHLT",36,0)
 .. S STAT=$S(STAT="Y":"Active",1:"Not Active")
"RTN","IBCNEHLT",37,0)
 .. S TSSN=$P(DATA,$E(HLECH,1),8),USSN=$P(DATA,$E(HLECH,1),9)
"RTN","IBCNEHLT",38,0)
 .. S REQSUB=$P(DATA,$E(HLECH,1),10)
"RTN","IBCNEHLT",39,0)
 .. S FSVDY=$P(DATA,$E(HLECH,1),11),PSVDY=$P(DATA,$E(HLECH,1),12)
"RTN","IBCNEHLT",40,0)
 .. D PFIL
"RTN","IBCNEHLT",41,0)
 Q
"RTN","IBCNEHLT",42,0)
 ;
"RTN","IBCNEHLT",43,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",44,0)
 ;  Set the action:
"RTN","IBCNEHLT",45,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",46,0)
 ; Pull the action code
"RTN","IBCNEHLT",47,0)
 S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",48,0)
 ; Effective Date
"RTN","IBCNEHLT",49,0)
 S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",50,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",51,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",52,0)
 ;
"RTN","IBCNEHLT",53,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",54,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",55,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",56,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",57,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",58,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",59,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",60,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",61,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",62,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",63,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",64,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",65,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",66,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",67,0)
 N IBCNTYPE
"RTN","IBCNEHLT",68,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",69,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",70,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",71,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",72,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",73,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",74,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",75,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",76,0)
 . S MSG(7)="Contact the IIV support desk or your IRM."
"RTN","IBCNEHLT",77,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",78,0)
 . S MSG(9)="IIV support desk needs to know that VISTA did not receive the required"
"RTN","IBCNEHLT",79,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",80,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"IIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",81,0)
 ;
"RTN","IBCNEHLT",82,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",83,0)
 S DR=".01////^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",84,0)
 ;
"RTN","IBCNEHLT",85,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",86,0)
 I NPFLG S DR=DR_";.04////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",87,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",88,0)
 ;
"RTN","IBCNEHLT",89,0)
 ;  Check for application
"RTN","IBCNEHLT",90,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",91,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",92,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",93,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",94,0)
 . K DD,DO
"RTN","IBCNEHLT",95,0)
 . D FILE^DICN
"RTN","IBCNEHLT",96,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",97,0)
 ;
"RTN","IBCNEHLT",98,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",99,0)
 I APIEN="" D
"RTN","IBCNEHLT",100,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",101,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",102,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",103,0)
 . K DD,DO
"RTN","IBCNEHLT",104,0)
 . D FILE^DICN
"RTN","IBCNEHLT",105,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",106,0)
 ;
"RTN","IBCNEHLT",107,0)
 I $G(STAT)="" S STAT=$P(^IBE(365.12,IEN,1,APIEN,0),U,2)
"RTN","IBCNEHLT",108,0)
 ;
"RTN","IBCNEHLT",109,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",110,0)
 ;
"RTN","IBCNEHLT",111,0)
 I IBCNACT="MDC" S DR=DR_".11////^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",112,0)
 I IBCNACT="MAC" S DR=DR_".11////^S X=0;.12////@;",STAT=1
"RTN","IBCNEHLT",113,0)
 S DR=DR_".02///^S X=STAT;.06////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",114,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.09///^S X=USSN;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",115,0)
 ;
"RTN","IBCNEHLT",116,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",117,0)
 I NAFLG S DR=DR_";.13////^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",118,0)
 ;
"RTN","IBCNEHLT",119,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",120,0)
 ;
"RTN","IBCNEHLT",121,0)
 I IBCNACT="MAC" Q
"RTN","IBCNEHLT",122,0)
 ;
"RTN","IBCNEHLT",123,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",124,0)
 ;
"RTN","IBCNEHLT",125,0)
 ;  If no EDI's, quit
"RTN","IBCNEHLT",126,0)
 I HEDI=""&(PEDI="") Q
"RTN","IBCNEHLT",127,0)
 ;
"RTN","IBCNEHLT",128,0)
 ;  Quit and don't match at this time
"RTN","IBCNEHLT",129,0)
PFILX Q
"RTN","IBCNEHLT",130,0)
 ;
"RTN","IBCNEHLT",131,0)
 NEW ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTDTH
"RTN","IBCNEHLT",132,0)
 ;  Queue off setting of the Payer Pointer
"RTN","IBCNEHLT",133,0)
 S ZTDESC="IIV Payer Table Update",ZTIO="",ZTRTN="PID^IBCNEHLT"
"RTN","IBCNEHLT",134,0)
 S ZTSAVE("HEDI")="",ZTSAVE("PEDI")="",ZTSAVE("IEN")="",ZTSAVE("DUZ")=IDUZ
"RTN","IBCNEHLT",135,0)
 S ZTDTH=$$HADD^XLFDT($H,,,1,)
"RTN","IBCNEHLT",136,0)
 D ^%ZTLOAD
"RTN","IBCNEHLT",137,0)
 Q
"RTN","IBCNEHLT",138,0)
 ;
"RTN","IBCNEHLT",139,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",140,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR,IEN
"RTN","IBCNEHLT",141,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",142,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",143,0)
 ;
"RTN","IBCNEHLT",144,0)
 ;  If no matching entry found, add it to table
"RTN","IBCNEHLT",145,0)
 I IEN<1 D
"RTN","IBCNEHLT",146,0)
 . S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",147,0)
 . K DD,DO
"RTN","IBCNEHLT",148,0)
 . D FILE^DICN S IEN=+Y
"RTN","IBCNEHLT",149,0)
 ;
"RTN","IBCNEHLT",150,0)
 S DR=".02////^S X=DESC",DA=IEN,DIE=DIC D ^DIE
"RTN","IBCNEHLT",151,0)
 Q
"RTN","IBCNEHLT",152,0)
 ;
"RTN","IBCNEHLT",153,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",154,0)
 D FND
"RTN","IBCNEHLT",155,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",156,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",157,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",158,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",159,0)
 K DD,DO
"RTN","IBCNEHLT",160,0)
 D FILE^DICN
"RTN","IBCNEHLT",161,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",162,0)
MADX ;
"RTN","IBCNEHLT",163,0)
 Q
"RTN","IBCNEHLT",164,0)
 ;
"RTN","IBCNEHLT",165,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",166,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",167,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",168,0)
 ;
"RTN","IBCNEHLT",169,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",170,0)
 D IX^DIC
"RTN","IBCNEHLT",171,0)
 S IEN=+Y
"RTN","IBCNEHLT",172,0)
 Q
"RTN","IBCNEHLT",173,0)
 ;
"RTN","IBCNEHLT",174,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",175,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",176,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",177,0)
 .. ;
"RTN","IBCNEHLT",178,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",179,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",180,0)
 .. ;
"RTN","IBCNEHLT",181,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",182,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",183,0)
 .. ;
"RTN","IBCNEHLT",184,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",185,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",186,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",187,0)
 .. ;
"RTN","IBCNEHLT",188,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",189,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",190,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",191,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",192,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",193,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",194,0)
 Q
"RTN","IBCNEHLT",195,0)
 ;
"RTN","IBCNEHLT",196,0)
PID ;  Payer IDs
"RTN","IBCNEHLT",197,0)
 ; If both the Institutional and Professional IDs are blank
"RTN","IBCNEHLT",198,0)
 ; can't use them to search and match up insurance companies
"RTN","IBCNEHLT",199,0)
 ; with payers
"RTN","IBCNEHLT",200,0)
 ;
"RTN","IBCNEHLT",201,0)
 NEW DIC,DA,DR,IDATA,OK,PIEN,DIE,X
"RTN","IBCNEHLT",202,0)
 ;
"RTN","IBCNEHLT",203,0)
 S ZTREQ="@"
"RTN","IBCNEHLT",204,0)
 ;
"RTN","IBCNEHLT",205,0)
 S PIEN=0
"RTN","IBCNEHLT",206,0)
 F  S PIEN=$O(^DIC(36,PIEN)) Q:'PIEN  D
"RTN","IBCNEHLT",207,0)
 . ;
"RTN","IBCNEHLT",208,0)
 . ; If the insurance company is inactive, quit
"RTN","IBCNEHLT",209,0)
 . I '$$ACTIVE^IBCNEUT4(PIEN) Q
"RTN","IBCNEHLT",210,0)
 . ;
"RTN","IBCNEHLT",211,0)
 . S IDATA=$G(^DIC(36,PIEN,3))
"RTN","IBCNEHLT",212,0)
 . ;  If insurance company already has payer, quit
"RTN","IBCNEHLT",213,0)
 . I $P(IDATA,U,10)'="" Q
"RTN","IBCNEHLT",214,0)
 . ;
"RTN","IBCNEHLT",215,0)
 . S OK=0
"RTN","IBCNEHLT",216,0)
 . I PEDI'=""&($P(IDATA,U,2)=PEDI) S OK=1
"RTN","IBCNEHLT",217,0)
 . I HEDI'=""&($P(IDATA,U,4)=HEDI) S OK=1
"RTN","IBCNEHLT",218,0)
 . Q:'OK
"RTN","IBCNEHLT",219,0)
 . ;
"RTN","IBCNEHLT",220,0)
 . S DIE="^DIC(36,",DA=PIEN,DR="3.1////^S X=IEN" D ^DIE
"RTN","IBCNEHLT",221,0)
 Q
"RTN","IBCNEHLU")
0^54^B971602
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEHLU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEKIT")
0^43^B54226772
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE IIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEKIT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the IIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; Trans Queue file (365.1) and in the Response file (365).  User can
"RTN","IBCNEKIT",7,0)
 ; pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",8,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",9,0)
 ; task after hours.
"RTN","IBCNEKIT",10,0)
 ;
"RTN","IBCNEKIT",11,0)
EN ;
"RTN","IBCNEKIT",12,0)
 NEW STOP,BEGDT,ENDDT,STATLIST
"RTN","IBCNEKIT",13,0)
 D INIT I STOP G EXIT       ; initialize/calulate default dates
"RTN","IBCNEKIT",14,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",15,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",16,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",17,0)
 D QUEUE                    ; queueing process
"RTN","IBCNEKIT",18,0)
EXIT ;
"RTN","IBCNEKIT",19,0)
 Q
"RTN","IBCNEKIT",20,0)
 ;
"RTN","IBCNEKIT",21,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",22,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",23,0)
 ;
"RTN","IBCNEKIT",24,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",25,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",26,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",27,0)
 ;
"RTN","IBCNEKIT",28,0)
 ; First loop through the transmission queue file and delete all
"RTN","IBCNEKIT",29,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",30,0)
 ;
"RTN","IBCNEKIT",31,0)
 NEW DATE,TQIEN,TQS,HLIEN,DIK,DA,CNT
"RTN","IBCNEKIT",32,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",33,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",34,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",35,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",36,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; trans queue status
"RTN","IBCNEKIT",37,0)
 . I '$F(STATLIST,"."_TQS_".") Q             ; must be in the list
"RTN","IBCNEKIT",38,0)
 . ;
"RTN","IBCNEKIT",39,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",40,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",41,0)
 . S HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",42,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",43,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) I DA D ^DIK
"RTN","IBCNEKIT",44,0)
 .. Q
"RTN","IBCNEKIT",45,0)
 . ;
"RTN","IBCNEKIT",46,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",47,0)
 . S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBCNEKIT",48,0)
 . Q
"RTN","IBCNEKIT",49,0)
 ;
"RTN","IBCNEKIT",50,0)
 ; Check for a stop request
"RTN","IBCNEKIT",51,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",52,0)
 ;
"RTN","IBCNEKIT",53,0)
 ; Now we must loop through the response file itself to purge any
"RTN","IBCNEKIT",54,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",55,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",56,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",57,0)
 ; check the status.
"RTN","IBCNEKIT",58,0)
 ; For this loop, start from the very beginning of the file.
"RTN","IBCNEKIT",59,0)
 ;
"RTN","IBCNEKIT",60,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",61,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",62,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",63,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",64,0)
 . ;
"RTN","IBCNEKIT",65,0)
 . ; If there is a pointer to the transmission queue file, then we
"RTN","IBCNEKIT",66,0)
 . ; should get out of this loop because the purpose of this section
"RTN","IBCNEKIT",67,0)
 . ; is to purge those responses with no link to the transmission
"RTN","IBCNEKIT",68,0)
 . ; queue file.
"RTN","IBCNEKIT",69,0)
 . ;
"RTN","IBCNEKIT",70,0)
 . I $P($G(^IBCN(365,DA,0)),U,5) Q
"RTN","IBCNEKIT",71,0)
 . D ^DIK
"RTN","IBCNEKIT",72,0)
 . Q
"RTN","IBCNEKIT",73,0)
PURGEX ;
"RTN","IBCNEKIT",74,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",75,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",76,0)
 Q
"RTN","IBCNEKIT",77,0)
 ;
"RTN","IBCNEKIT",78,0)
 ;
"RTN","IBCNEKIT",79,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",80,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",81,0)
 ;
"RTN","IBCNEKIT",82,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS
"RTN","IBCNEKIT",83,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",84,0)
 S STOP=0
"RTN","IBCNEKIT",85,0)
 ;
"RTN","IBCNEKIT",86,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",87,0)
 ;   3=Response Received
"RTN","IBCNEKIT",88,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",89,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",90,0)
 S STATLIST=".3.5.7."
"RTN","IBCNEKIT",91,0)
 ;
"RTN","IBCNEKIT",92,0)
 ; Try to find a beginning date in the Trans Queue file
"RTN","IBCNEKIT",93,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",94,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",95,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",96,0)
 . I '$F(STATLIST,"."_TQS_".") Q
"RTN","IBCNEKIT",97,0)
 . S FOUND=1
"RTN","IBCNEKIT",98,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",99,0)
 . Q
"RTN","IBCNEKIT",100,0)
 ;
"RTN","IBCNEKIT",101,0)
 ; If not successful, try to find a beginning date in the Response file.
"RTN","IBCNEKIT",102,0)
 I 'FOUND D
"RTN","IBCNEKIT",103,0)
 . S DATE=""
"RTN","IBCNEKIT",104,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",105,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",106,0)
 .. I '$F(STATLIST,"."_RPS_".") Q
"RTN","IBCNEKIT",107,0)
 .. S FOUND=1
"RTN","IBCNEKIT",108,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",109,0)
 .. Q
"RTN","IBCNEKIT",110,0)
 . Q
"RTN","IBCNEKIT",111,0)
 ;
"RTN","IBCNEKIT",112,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",113,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",114,0)
 ;
"RTN","IBCNEKIT",115,0)
 I 'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",116,0)
 . W !!?5,"Purging of IIV data is not possible at this time."
"RTN","IBCNEKIT",117,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",118,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",119,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",120,0)
 . Q
"RTN","IBCNEKIT",121,0)
 ;
"RTN","IBCNEKIT",122,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",123,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",124,0)
 W @IOF
"RTN","IBCNEKIT",125,0)
 W !?3,"Purge Electronic Insurance Identification and Verification (IIV) Data Files"
"RTN","IBCNEKIT",126,0)
 W !!," This option will allow you to purge data from the IIV Response File (#365)"
"RTN","IBCNEKIT",127,0)
 W !," and the IIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",128,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",129,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",130,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",131,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",132,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",133,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",134,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",135,0)
 W !!
"RTN","IBCNEKIT",136,0)
INITX ;
"RTN","IBCNEKIT",137,0)
 Q
"RTN","IBCNEKIT",138,0)
 ;
"RTN","IBCNEKIT",139,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",140,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",141,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",142,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",143,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",144,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",145,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",146,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",147,0)
 S BEGDT=Y
"RTN","IBCNEKIT",148,0)
BEGDTX ;
"RTN","IBCNEKIT",149,0)
 Q
"RTN","IBCNEKIT",150,0)
 ;
"RTN","IBCNEKIT",151,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",152,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",153,0)
 W !
"RTN","IBCNEKIT",154,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",155,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",156,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",157,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",158,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",159,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",160,0)
 S ENDDT=Y
"RTN","IBCNEKIT",161,0)
ENDDTX ;
"RTN","IBCNEKIT",162,0)
 Q
"RTN","IBCNEKIT",163,0)
 ;
"RTN","IBCNEKIT",164,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",165,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",166,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",167,0)
 W !!!," You want to purge all IIV data created between "
"RTN","IBCNEKIT",168,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",169,0)
 W !
"RTN","IBCNEKIT",170,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",171,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",172,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",173,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",174,0)
CONFX ;
"RTN","IBCNEKIT",175,0)
 Q
"RTN","IBCNEKIT",176,0)
 ;
"RTN","IBCNEKIT",177,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",178,0)
 ; The concept for queueing the purge came from the insurance buffer
"RTN","IBCNEKIT",179,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",180,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",181,0)
 ;
"RTN","IBCNEKIT",182,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",183,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",184,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",185,0)
 S ZTDESC="Purge IIV Data"    ; Task description
"RTN","IBCNEKIT",186,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",187,0)
 S ZTIO=""
"RTN","IBCNEKIT",188,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",189,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",190,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",191,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",192,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the IIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",193,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",194,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",195,0)
QUEUEX ;
"RTN","IBCNEKIT",196,0)
 Q
"RTN","IBCNEKIT",197,0)
 ;
"RTN","IBCNEPM")
0^66^B14696239
"RTN","IBCNEPM",1,0)
IBCNEPM ;DAOU/ESG - PAYER MAINTENANCE PAYER LIST SCREEN ;22-JAN-2003
"RTN","IBCNEPM",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEPM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEPM",4,0)
 ;
"RTN","IBCNEPM",5,0)
 Q
"RTN","IBCNEPM",6,0)
 ;
"RTN","IBCNEPM",7,0)
HDR ; -- header code
"RTN","IBCNEPM",8,0)
 S VALMHDR(1)="Payers with potential matches to active insurance companies."
"RTN","IBCNEPM",9,0)
 Q
"RTN","IBCNEPM",10,0)
 ;
"RTN","IBCNEPM",11,0)
INIT ; -- init variables and list array
"RTN","IBCNEPM",12,0)
 ;
"RTN","IBCNEPM",13,0)
 ;Create scratch global of payer w/ potential matches missing
"RTN","IBCNEPM",14,0)
 KILL ^TMP("IBCNEPM",$J)
"RTN","IBCNEPM",15,0)
 NEW INS,DATA,PROFID,INSTID,IEN,APP,ACTIVE,PAYER
"RTN","IBCNEPM",16,0)
 ;
"RTN","IBCNEPM",17,0)
 ; First build a scratch global cross reference with all existing
"RTN","IBCNEPM",18,0)
 ; professional and institutional EDI ID numbers in file 36.
"RTN","IBCNEPM",19,0)
 S INS=0
"RTN","IBCNEPM",20,0)
 F  S INS=$O(^DIC(36,INS)) Q:'INS  D
"RTN","IBCNEPM",21,0)
 . I '$$ACTIVE^IBCNEUT4(INS) Q          ; inactive ins co
"RTN","IBCNEPM",22,0)
 . S DATA=$G(^DIC(36,INS,3))
"RTN","IBCNEPM",23,0)
 . I $P(DATA,U,10)'="" Q                ; already linked to a payer
"RTN","IBCNEPM",24,0)
 . S PROFID=$P(DATA,U,2),INSTID=$P(DATA,U,4)
"RTN","IBCNEPM",25,0)
 . I PROFID'="" S ^TMP("IBCNEPM",$J,"P",PROFID,INS)=""
"RTN","IBCNEPM",26,0)
 . I INSTID'="" S ^TMP("IBCNEPM",$J,"I",INSTID,INS)=""
"RTN","IBCNEPM",27,0)
 . Q
"RTN","IBCNEPM",28,0)
 ;
"RTN","IBCNEPM",29,0)
 ; Next loop through all payers.  Count up the number of insurance 
"RTN","IBCNEPM",30,0)
 ; companies that have matching EDI ID numbers but no payer links.  
"RTN","IBCNEPM",31,0)
 ; These are possible payer-insurance company links that have not yet 
"RTN","IBCNEPM",32,0)
 ; been made.
"RTN","IBCNEPM",33,0)
 ;
"RTN","IBCNEPM",34,0)
 S IEN=0
"RTN","IBCNEPM",35,0)
 F  S IEN=$O(^IBE(365.12,IEN)) Q:'IEN  D
"RTN","IBCNEPM",36,0)
 . S DATA=$G(^IBE(365.12,IEN,0))
"RTN","IBCNEPM",37,0)
 . ;
"RTN","IBCNEPM",38,0)
 . I '$$ACTAPP^IBCNEUT5(IEN) Q  ; no active payer applications
"RTN","IBCNEPM",39,0)
 . ;
"RTN","IBCNEPM",40,0)
 . ; must have at least 1 nationally active payer application
"RTN","IBCNEPM",41,0)
 . S APP=0,ACTIVE=0
"RTN","IBCNEPM",42,0)
 . F  S APP=$O(^IBE(365.12,IEN,1,APP)) Q:'APP!(ACTIVE)  D
"RTN","IBCNEPM",43,0)
 .. I $P($G(^IBE(365.12,IEN,1,APP,0)),U,2)=1 S ACTIVE=1
"RTN","IBCNEPM",44,0)
 . Q:'ACTIVE    ; no nationally active payer application found
"RTN","IBCNEPM",45,0)
 . ;
"RTN","IBCNEPM",46,0)
 . S PAYER=$P(DATA,U),PROFID=$P(DATA,U,5),INSTID=$P(DATA,U,6)
"RTN","IBCNEPM",47,0)
 . ;
"RTN","IBCNEPM",48,0)
 . ; Look at the payer's professional ID and see how many unique
"RTN","IBCNEPM",49,0)
 . ; insurance companies also have this professional ID
"RTN","IBCNEPM",50,0)
 . I PROFID'="",$D(^TMP("IBCNEPM",$J,"P",PROFID)) D
"RTN","IBCNEPM",51,0)
 .. S INS="" F  S INS=$O(^TMP("IBCNEPM",$J,"P",PROFID,INS)) Q:'INS  D
"RTN","IBCNEPM",52,0)
 ... S ^TMP("IBCNEPM",$J,"INS",INS,IEN)=PAYER
"RTN","IBCNEPM",53,0)
 ... I $D(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q
"RTN","IBCNEPM",54,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)=""
"RTN","IBCNEPM",55,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)=$G(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN))+1  ; increment tot
"RTN","IBCNEPM",56,0)
 . ;
"RTN","IBCNEPM",57,0)
 . ; Look at the payer's institutional ID and see how many unique
"RTN","IBCNEPM",58,0)
 . ; insurance companies also have this institutional ID
"RTN","IBCNEPM",59,0)
 . I INSTID'="",$D(^TMP("IBCNEPM",$J,"I",INSTID)) D
"RTN","IBCNEPM",60,0)
 .. S INS="" F  S INS=$O(^TMP("IBCNEPM",$J,"I",INSTID,INS)) Q:'INS  D
"RTN","IBCNEPM",61,0)
 ... S ^TMP("IBCNEPM",$J,"INS",INS,IEN)=PAYER
"RTN","IBCNEPM",62,0)
 ... I $D(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q
"RTN","IBCNEPM",63,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)=""
"RTN","IBCNEPM",64,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)=$G(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN))+1  ; increment tot
"RTN","IBCNEPM",65,0)
 ;
"RTN","IBCNEPM",66,0)
 D BUILD
"RTN","IBCNEPM",67,0)
 ;
"RTN","IBCNEPM",68,0)
INITX ;
"RTN","IBCNEPM",69,0)
 Q
"RTN","IBCNEPM",70,0)
 ;
"RTN","IBCNEPM",71,0)
BUILD ; This procedure builds the ListMan display global based on the 
"RTN","IBCNEPM",72,0)
 ; "PYR" area of the scratch global.  
"RTN","IBCNEPM",73,0)
 ;
"RTN","IBCNEPM",74,0)
 NEW LINE,PAYER,IEN,STRING,LINKS
"RTN","IBCNEPM",75,0)
 KILL ^TMP("IBCNEPM",$J,1)
"RTN","IBCNEPM",76,0)
 S LINE=0,(PAYER,IEN)=""
"RTN","IBCNEPM",77,0)
 F  S PAYER=$O(^TMP("IBCNEPM",$J,"PYR",PAYER)) Q:PAYER=""  D
"RTN","IBCNEPM",78,0)
 . F  S IEN=$O(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)) Q:IEN=""  D
"RTN","IBCNEPM",79,0)
 .. S STRING="",LINE=LINE+1
"RTN","IBCNEPM",80,0)
 .. S ^TMP("IBCNEPM",$J,"IDX",LINE,IEN)=PAYER
"RTN","IBCNEPM",81,0)
 .. S LINKS=^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)
"RTN","IBCNEPM",82,0)
 .. S STRING=$$SETFLD^VALM1(LINE,STRING,"LINE")
"RTN","IBCNEPM",83,0)
 .. S STRING=$$SETFLD^VALM1(PAYER,STRING,"PAYER")
"RTN","IBCNEPM",84,0)
 .. S STRING=$$SETFLD^VALM1(LINKS,STRING,"LINKS")
"RTN","IBCNEPM",85,0)
 .. D SET^VALM10(LINE,STRING)
"RTN","IBCNEPM",86,0)
 ;
"RTN","IBCNEPM",87,0)
 S VALMCNT=LINE
"RTN","IBCNEPM",88,0)
 I VALMCNT=0 S VALMSG=" No Active Payers with potential missing links."
"RTN","IBCNEPM",89,0)
BUILDX ;
"RTN","IBCNEPM",90,0)
 Q
"RTN","IBCNEPM",91,0)
 ;
"RTN","IBCNEPM",92,0)
 ;
"RTN","IBCNEPM",93,0)
HELP ; -- help code
"RTN","IBCNEPM",94,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","IBCNEPM",95,0)
 Q
"RTN","IBCNEPM",96,0)
 ;
"RTN","IBCNEPM",97,0)
EXIT ; -- exit code
"RTN","IBCNEPM",98,0)
 Q
"RTN","IBCNEPM",99,0)
 ;
"RTN","IBCNEPM",100,0)
EXPND ; -- expand code
"RTN","IBCNEPM",101,0)
 Q
"RTN","IBCNEPM",102,0)
 ;
"RTN","IBCNEPM1")
0^67^B17662698
"RTN","IBCNEPM1",1,0)
IBCNEPM1 ;DAOU/ESG - PAYER MAINT/INS COMPANY LIST FOR PAYER ;22-JAN-2003
"RTN","IBCNEPM1",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEPM1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEPM1",4,0)
 ;
"RTN","IBCNEPM1",5,0)
EN(IEN,PAYER,PROFID,INSTID) ; -- main entry point for IBCNE PAYER EXPAND LIST
"RTN","IBCNEPM1",6,0)
 ; IEN is the IEN of the Payer(#365.15).  PAYER is the payer's name.
"RTN","IBCNEPM1",7,0)
 ; PROFID and INSTID are the EDI ID numbers for the selected payer
"RTN","IBCNEPM1",8,0)
 ; These are passed into this routine from EXPND^IBCNEPM2.
"RTN","IBCNEPM1",9,0)
 ;
"RTN","IBCNEPM1",10,0)
 D EN^VALM("IBCNE PAYER EXPAND LIST")
"RTN","IBCNEPM1",11,0)
 D BUILD^IBCNEPM
"RTN","IBCNEPM1",12,0)
 S VALMBCK="R"
"RTN","IBCNEPM1",13,0)
 Q
"RTN","IBCNEPM1",14,0)
 ;
"RTN","IBCNEPM1",15,0)
HDR ; -- header code
"RTN","IBCNEPM1",16,0)
 S VALMHDR(1)="PAYER: "_$E(PAYER,1,30)_"     Prof. EDI#:"_$E($G(PROFID),1,15)_"  Inst. EDI#:"_$E($G(INSTID),1,15)
"RTN","IBCNEPM1",17,0)
 S VALMHDR(2)="Insurance Company Name - Active Only"
"RTN","IBCNEPM1",18,0)
 Q
"RTN","IBCNEPM1",19,0)
 ;
"RTN","IBCNEPM1",20,0)
INIT ; -- init variables and list array
"RTN","IBCNEPM1",21,0)
 ; Variable PAYER (payer name) is returned by this procedure and used 
"RTN","IBCNEPM1",22,0)
 ; by the list header.  Variable LINE is also set before coming into 
"RTN","IBCNEPM1",23,0)
 ; this procedure.
"RTN","IBCNEPM1",24,0)
 ;
"RTN","IBCNEPM1",25,0)
 KILL ^TMP("IBCNEPM",$J,2),^TMP("IBCNEPM",$J,"LINK")
"RTN","IBCNEPM1",26,0)
 NEW INS,ROW,STRING2,NAME,DATA,ADDRESS,DATA2,PROFID,INSTID
"RTN","IBCNEPM1",27,0)
 ;
"RTN","IBCNEPM1",28,0)
 ;IEN is the payer ien (#365.15)
"RTN","IBCNEPM1",29,0)
 ;PAYER is the payer name
"RTN","IBCNEPM1",30,0)
 I IEN=""!(PAYER="") Q
"RTN","IBCNEPM1",31,0)
 ;
"RTN","IBCNEPM1",32,0)
 ; INS is the insurance company ien
"RTN","IBCNEPM1",33,0)
 S INS="",ROW=0
"RTN","IBCNEPM1",34,0)
 F  S INS=$O(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q:INS=""  D
"RTN","IBCNEPM1",35,0)
 . S STRING2="",ROW=ROW+1
"RTN","IBCNEPM1",36,0)
 . S NAME=$P($G(^DIC(36,INS,0)),U)   ; insurance company name
"RTN","IBCNEPM1",37,0)
 . S DATA=$G(^DIC(36,INS,.11))
"RTN","IBCNEPM1",38,0)
 . S ADDRESS=$P(DATA,U)_"  "_$P(DATA,U,4)
"RTN","IBCNEPM1",39,0)
 . I $P(DATA,U,4)'="" S ADDRESS=ADDRESS_","
"RTN","IBCNEPM1",40,0)
 . S ADDRESS=ADDRESS_"  "_$P($G(^DIC(5,+$P(DATA,U,5),0)),U,2)
"RTN","IBCNEPM1",41,0)
 . S DATA2=$G(^DIC(36,INS,3))
"RTN","IBCNEPM1",42,0)
 . S PROFID=$P(DATA2,U,2),INSTID=$P(DATA2,U,4)
"RTN","IBCNEPM1",43,0)
 . S STRING2=$$SETFLD^VALM1(NAME,STRING2,"INSURANCE CO")
"RTN","IBCNEPM1",44,0)
 . S STRING2=$$SETFLD^VALM1(ADDRESS,STRING2,"ADDRESS")
"RTN","IBCNEPM1",45,0)
 . S STRING2=$$SETFLD^VALM1(ROW,STRING2,"LINE")
"RTN","IBCNEPM1",46,0)
 . S STRING2=$$SETFLD^VALM1(PROFID,STRING2,"PROFEDI")
"RTN","IBCNEPM1",47,0)
 . S STRING2=$$SETFLD^VALM1(INSTID,STRING2,"INSTEDI")
"RTN","IBCNEPM1",48,0)
 . D SET^VALM10(ROW,STRING2)
"RTN","IBCNEPM1",49,0)
 . ;
"RTN","IBCNEPM1",50,0)
 . ; "LINK" scratch global structure = payer ien^ins co ien^payer name
"RTN","IBCNEPM1",51,0)
 . S ^TMP("IBCNEPM",$J,"LINK",ROW)=IEN_U_INS_U_PAYER
"RTN","IBCNEPM1",52,0)
 . Q
"RTN","IBCNEPM1",53,0)
 ;
"RTN","IBCNEPM1",54,0)
 S VALMCNT=ROW
"RTN","IBCNEPM1",55,0)
 I VALMCNT=0 S VALMSG=" No Matching Insurance Companies "
"RTN","IBCNEPM1",56,0)
 Q
"RTN","IBCNEPM1",57,0)
 ;
"RTN","IBCNEPM1",58,0)
HELP ; -- help code
"RTN","IBCNEPM1",59,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","IBCNEPM1",60,0)
 Q
"RTN","IBCNEPM1",61,0)
 ;
"RTN","IBCNEPM1",62,0)
EXIT ; -- exit code
"RTN","IBCNEPM1",63,0)
 Q
"RTN","IBCNEPM1",64,0)
 ;
"RTN","IBCNEPM1",65,0)
LINK ; -- code to facilitate the linking between the ins company and payer
"RTN","IBCNEPM1",66,0)
 NEW DIR,X,Y,DIRUT,DIROUT,DTOUT,DUOUT,LINKDATA,PIEN,INS,TPAYER,INSNM
"RTN","IBCNEPM1",67,0)
 NEW DA,DIE,DR,D,D0,DI,DIC,DISYS,DQ,%
"RTN","IBCNEPM1",68,0)
 ;
"RTN","IBCNEPM1",69,0)
 ;PIEN - temp variable for payer IEN (#365.15)
"RTN","IBCNEPM1",70,0)
 ;TPAYER - temp variable for payer name
"RTN","IBCNEPM1",71,0)
 ;
"RTN","IBCNEPM1",72,0)
 D FULL^VALM1
"RTN","IBCNEPM1",73,0)
 I 'VALMCNT D  G LINKX
"RTN","IBCNEPM1",74,0)
 . W !!?5,"There are no insurance companies to select."
"RTN","IBCNEPM1",75,0)
 . D PAUSE^VALM1
"RTN","IBCNEPM1",76,0)
 . Q
"RTN","IBCNEPM1",77,0)
 ;
"RTN","IBCNEPM1",78,0)
 S DIR(0)="NO^1:"_VALMCNT_":0"
"RTN","IBCNEPM1",79,0)
 S DIR("A")="Select Insurance Company Entry"
"RTN","IBCNEPM1",80,0)
 W !
"RTN","IBCNEPM1",81,0)
 D ^DIR K DIR
"RTN","IBCNEPM1",82,0)
 I 'Y G LINKX
"RTN","IBCNEPM1",83,0)
 S LINKDATA=$G(^TMP("IBCNEPM",$J,"LINK",+Y))
"RTN","IBCNEPM1",84,0)
 I LINKDATA="" G LINKX
"RTN","IBCNEPM1",85,0)
 S PIEN=+$P(LINKDATA,U,1),TPAYER=$P($G(^IBE(365.12,PIEN,0)),U,1)
"RTN","IBCNEPM1",86,0)
 S INS=+$P(LINKDATA,U,2),INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNEPM1",87,0)
 W !!,"             Payer:  ",TPAYER
"RTN","IBCNEPM1",88,0)
 W !," Insurance Company:  ",INSNM
"RTN","IBCNEPM1",89,0)
 W !
"RTN","IBCNEPM1",90,0)
 S DIR(0)="YO"
"RTN","IBCNEPM1",91,0)
 S DIR("A")=" Do you want to link this insurance company to this payer"
"RTN","IBCNEPM1",92,0)
 S DIR("B")="YES"
"RTN","IBCNEPM1",93,0)
 D ^DIR K DIR
"RTN","IBCNEPM1",94,0)
 I 'Y G LINKX
"RTN","IBCNEPM1",95,0)
 ;
"RTN","IBCNEPM1",96,0)
 ; At this point we know that we should make the linkage
"RTN","IBCNEPM1",97,0)
 S DA=INS,DIE=36,DR="3.1////"_PIEN D ^DIE
"RTN","IBCNEPM1",98,0)
 ;
"RTN","IBCNEPM1",99,0)
 ; update the scratch global by removing this insurance company
"RTN","IBCNEPM1",100,0)
 KILL ^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN,INS)
"RTN","IBCNEPM1",101,0)
 S ^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN)=$G(^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN))-1
"RTN","IBCNEPM1",102,0)
 KILL ^TMP("IBCNEPM",$J,"INS",INS,PIEN)
"RTN","IBCNEPM1",103,0)
 ;
"RTN","IBCNEPM1",104,0)
 ; search scratch global for remaining pointers to this ins. company
"RTN","IBCNEPM1",105,0)
 S PIEN="" F  S PIEN=$O(^TMP("IBCNEPM",$J,"INS",INS,PIEN)) Q:'PIEN  D
"RTN","IBCNEPM1",106,0)
 . S TPAYER=$G(^TMP("IBCNEPM",$J,"INS",INS,PIEN))
"RTN","IBCNEPM1",107,0)
 . Q:TPAYER=""
"RTN","IBCNEPM1",108,0)
 . KILL ^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN,INS)
"RTN","IBCNEPM1",109,0)
 . S ^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN)=$G(^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN))-1
"RTN","IBCNEPM1",110,0)
 . KILL ^TMP("IBCNEPM",$J,"INS",INS,PIEN)
"RTN","IBCNEPM1",111,0)
 ;
"RTN","IBCNEPM1",112,0)
 ; rebuild the LINK area and the ListMan display global
"RTN","IBCNEPM1",113,0)
 D INIT
"RTN","IBCNEPM1",114,0)
 ;
"RTN","IBCNEPM1",115,0)
 ; user message
"RTN","IBCNEPM1",116,0)
 W !!?5,"They are now linked.  You may view/edit this relationship by using the"
"RTN","IBCNEPM1",117,0)
 W !?5,"Insurance Company Entry/Edit option."
"RTN","IBCNEPM1",118,0)
 D PAUSE^VALM1
"RTN","IBCNEPM1",119,0)
LINKX ;
"RTN","IBCNEPM1",120,0)
 S VALMBCK="R"
"RTN","IBCNEPM1",121,0)
 Q
"RTN","IBCNEPM1",122,0)
 ;
"RTN","IBCNEPM2")
0^68^B5442901
"RTN","IBCNEPM2",1,0)
IBCNEPM2 ;DAOU/ESG - PAYER MAINTENANCE ENTRY POINT ;22-JAN-2003
"RTN","IBCNEPM2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEPM2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEPM2",4,0)
 ;
"RTN","IBCNEPM2",5,0)
 Q
"RTN","IBCNEPM2",6,0)
EN ; -- main entry point
"RTN","IBCNEPM2",7,0)
 NEW X,Y,DIRUT,DIR,DTOUT,DUOUT,DIROUT
"RTN","IBCNEPM2",8,0)
 W @IOF,!?22,"Payer Maintenance"
"RTN","IBCNEPM2",9,0)
 W !!," This option will allow you to manage and maintain the entries"
"RTN","IBCNEPM2",10,0)
 W !," in the Payer File for those Payers that were added to your system"
"RTN","IBCNEPM2",11,0)
 W !," that are Nationally Active and who have potential missing links"
"RTN","IBCNEPM2",12,0)
 W !," to active insurance companies."
"RTN","IBCNEPM2",13,0)
 W !!," Potential missing links is defined as active insurance companies"
"RTN","IBCNEPM2",14,0)
 W !," whose Professional and/or Institutional ID matches that of the "
"RTN","IBCNEPM2",15,0)
 W !," Payer and whose pointer to the Payer Table is not populated.",!!!
"RTN","IBCNEPM2",16,0)
 ;
"RTN","IBCNEPM2",17,0)
 S DIR(0)="E" D ^DIR
"RTN","IBCNEPM2",18,0)
 I $G(DUOUT)!$G(DTOUT) Q
"RTN","IBCNEPM2",19,0)
 ;
"RTN","IBCNEPM2",20,0)
 W !!?5,"Compiling the list of applicable payers ... "
"RTN","IBCNEPM2",21,0)
 ;
"RTN","IBCNEPM2",22,0)
 ;  call ListMan Screen
"RTN","IBCNEPM2",23,0)
 D EN^VALM("IBCNE PAYER MAINT LIST")
"RTN","IBCNEPM2",24,0)
 KILL ^TMP("IBCNEPM",$J)
"RTN","IBCNEPM2",25,0)
EXIT ;
"RTN","IBCNEPM2",26,0)
 Q
"RTN","IBCNEPM2",27,0)
 ;
"RTN","IBCNEPM2",28,0)
EXPND ; -- expand code for action protocol IBCNE PAYER EXPAND
"RTN","IBCNEPM2",29,0)
 ;
"RTN","IBCNEPM2",30,0)
 NEW LINE,X,Y,DIRUT,DIR,DTOUT,DUOUT,DIROUT,PIEN,PAYER,PAYRDATA
"RTN","IBCNEPM2",31,0)
 NEW PROFID,INSTID
"RTN","IBCNEPM2",32,0)
 D FULL^VALM1 W !
"RTN","IBCNEPM2",33,0)
 ;
"RTN","IBCNEPM2",34,0)
 I 'VALMCNT D  G EXPNDXT
"RTN","IBCNEPM2",35,0)
 . W !!?5,"There are no entries in the list."
"RTN","IBCNEPM2",36,0)
 . D PAUSE^VALM1
"RTN","IBCNEPM2",37,0)
 ;
"RTN","IBCNEPM2",38,0)
 ; Ask the user to choose the payer to expand
"RTN","IBCNEPM2",39,0)
 S DIR("A")="Select entry to Expand, by line #"
"RTN","IBCNEPM2",40,0)
 S DIR(0)="NO^1:"_VALMCNT D ^DIR K DIR
"RTN","IBCNEPM2",41,0)
 I $D(DIRUT) K DIRUT G EXPNDXT
"RTN","IBCNEPM2",42,0)
 I $G(DUOUT)!($G(DTOUT)) G EXPNDXT
"RTN","IBCNEPM2",43,0)
 S LINE=+Y
"RTN","IBCNEPM2",44,0)
 S PIEN=$O(^TMP("IBCNEPM",$J,"IDX",LINE,""))   ; payer ien
"RTN","IBCNEPM2",45,0)
 I PIEN="" Q
"RTN","IBCNEPM2",46,0)
 S PAYER=^TMP("IBCNEPM",$J,"IDX",LINE,PIEN)    ; payer name
"RTN","IBCNEPM2",47,0)
 S PAYRDATA=$G(^IBE(365.12,PIEN,0))
"RTN","IBCNEPM2",48,0)
 S PROFID=$P(PAYRDATA,U,5),INSTID=$P(PAYRDATA,U,6)
"RTN","IBCNEPM2",49,0)
 D EN^IBCNEPM1(PIEN,PAYER,PROFID,INSTID)
"RTN","IBCNEPM2",50,0)
EXPNDXT ;
"RTN","IBCNEPM2",51,0)
 S VALMBCK="R"
"RTN","IBCNEPM2",52,0)
 Q
"RTN","IBCNEPM2",53,0)
 ;
"RTN","IBCNEPST")
0^4^B36040231
"RTN","IBCNEPST",1,0)
IBCNEPST ;DAOU/ALA - Post Installation Program ;06-JUN-2002
"RTN","IBCNEPST",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEPST",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEPST",4,0)
 ;
"RTN","IBCNEPST",5,0)
 ;**Program Description**
"RTN","IBCNEPST",6,0)
 ;  This is the KIDs post-installation program
"RTN","IBCNEPST",7,0)
 ;
"RTN","IBCNEPST",8,0)
EN ;  Entry point
"RTN","IBCNEPST",9,0)
 ;
"RTN","IBCNEPST",10,0)
 NEW XPDIDTOT
"RTN","IBCNEPST",11,0)
 S XPDIDTOT=7
"RTN","IBCNEPST",12,0)
 D USR,XPDID(1)
"RTN","IBCNEPST",13,0)
 D PAYR,XPDID(2)
"RTN","IBCNEPST",14,0)
 D TOPINS,XPDID(3)
"RTN","IBCNEPST",15,0)
 D BESTUB,XPDID(4)
"RTN","IBCNEPST",16,0)
 ;D MENUPROT,XPDID(5)   ; *** testing djw 6/11/03 is this still needed
"RTN","IBCNEPST",17,0)
 D MAILGRP,XPDID(6)
"RTN","IBCNEPST",18,0)
EX ;
"RTN","IBCNEPST",19,0)
 Q
"RTN","IBCNEPST",20,0)
 ;
"RTN","IBCNEPST",21,0)
 ;
"RTN","IBCNEPST",22,0)
USR ;  Define the IIV specific process user
"RTN","IBCNEPST",23,0)
 NEW DIC,X,Y,DA,DR,IBCNEUSR,DIE
"RTN","IBCNEPST",24,0)
 S DIC(0)="MNZ",DIC="^VA(200,",X="INTERFACE,IB IIV"
"RTN","IBCNEPST",25,0)
 D ^DIC
"RTN","IBCNEPST",26,0)
 I +Y>0 Q
"RTN","IBCNEPST",27,0)
 D FILE^DICN
"RTN","IBCNEPST",28,0)
 S IBCNEUSR=Y
"RTN","IBCNEPST",29,0)
 S DIE="^VA(200,",DA=$P(IBCNEUSR,U,1),DR="1////^S X=""IIV""" D ^DIE
"RTN","IBCNEPST",30,0)
 ;
"RTN","IBCNEPST",31,0)
USRX ;
"RTN","IBCNEPST",32,0)
 Q
"RTN","IBCNEPST",33,0)
 ;
"RTN","IBCNEPST",34,0)
TOPINS ; Entry point
"RTN","IBCNEPST",35,0)
 ; Init vars
"RTN","IBCNEPST",36,0)
 N STRTDT,ENDDT,ZTDESC,ZTDTH,ZTSK,ZTRTN,ZTIO,MSG
"RTN","IBCNEPST",37,0)
 ;
"RTN","IBCNEPST",38,0)
 ; Determine if the process is already running
"RTN","IBCNEPST",39,0)
 I $P($$TASK^IBJPI2("Most Popular Insurance Companies Background Compile"),U,2)["Active:" G TOPINX
"RTN","IBCNEPST",40,0)
 ;
"RTN","IBCNEPST",41,0)
 ; Determine if the list has already been generated
"RTN","IBCNEPST",42,0)
 I $O(^IBE(350.9,1,51.18,0))'="" G TOPINX
"RTN","IBCNEPST",43,0)
 ;
"RTN","IBCNEPST",44,0)
 ; Set start and end dates (T-365) to T
"RTN","IBCNEPST",45,0)
 S STRTDT=$$FMADD^XLFDT(DT,-365)
"RTN","IBCNEPST",46,0)
 S ENDDT=DT
"RTN","IBCNEPST",47,0)
 ;
"RTN","IBCNEPST",48,0)
 ; Queue the process
"RTN","IBCNEPST",49,0)
 S ZTDTH=$H
"RTN","IBCNEPST",50,0)
 ; If time is between 6:01AM and 5:59PM, reset to 6:00PM
"RTN","IBCNEPST",51,0)
 ; esg - 7/29/02 - leave this line commented out for now until we get
"RTN","IBCNEPST",52,0)
 ; verification about when and how this job should run
"RTN","IBCNEPST",53,0)
 ;I $P(ZTDTH,",",2)>21600!($P(ZTDTH,",",2)<64800) S $P(ZTDTH,",",2)=64800
"RTN","IBCNEPST",54,0)
 S ZTDESC="Most Popular Insurance Companies Background Compile"
"RTN","IBCNEPST",55,0)
 S ZTRTN="TOP10^IBJPI2("_STRTDT_","_ENDDT_")"
"RTN","IBCNEPST",56,0)
 S ZTIO=""
"RTN","IBCNEPST",57,0)
 ; Queue it
"RTN","IBCNEPST",58,0)
 D ^%ZTLOAD
"RTN","IBCNEPST",59,0)
 ;
"RTN","IBCNEPST",60,0)
 ; If unsuccessful, send MailMan message?
"RTN","IBCNEPST",61,0)
 I '$G(ZTSK) D  G TOPINX
"RTN","IBCNEPST",62,0)
 . S MSG(1)="The Most Popular Insurance Company List could not be compiled"
"RTN","IBCNEPST",63,0)
 . S MSG(2)="for "_$$FMTE^XLFDT(STRTDT,"5Z")_" to "_$$FMTE^XLFDT(ENDDT,"5Z")_" because task could not be scheduled in the background."
"RTN","IBCNEPST",64,0)
 . D MSG^IBCNEUT5("PATCHES","Most Popular Insurance Company List was not compiled","MSG(",1)
"RTN","IBCNEPST",65,0)
 ;
"RTN","IBCNEPST",66,0)
TOPINX ; TOPINS exit pt
"RTN","IBCNEPST",67,0)
 Q
"RTN","IBCNEPST",68,0)
 ;
"RTN","IBCNEPST",69,0)
 ;
"RTN","IBCNEPST",70,0)
PAYR ;  Set up the '~NO PAYER' payer
"RTN","IBCNEPST",71,0)
 D PAYR^IBCNEUT2
"RTN","IBCNEPST",72,0)
 Q
"RTN","IBCNEPST",73,0)
 ;
"RTN","IBCNEPST",74,0)
 ;
"RTN","IBCNEPST",75,0)
BESTUB ; Create the Batch Extract stub entries in the IB site parameters
"RTN","IBCNEPST",76,0)
 ; file.  If something is already there, then just get out.
"RTN","IBCNEPST",77,0)
 ;
"RTN","IBCNEPST",78,0)
 NEW BAEXIEN,BE,IIVNUM,BEERR,BEDEF
"RTN","IBCNEPST",79,0)
 S IIVNUM=4     ; current number of batch extracts
"RTN","IBCNEPST",80,0)
 I $P($G(^IBE(350.9,1,51.17,0)),U,4)=IIVNUM G BEX    ; Already set up
"RTN","IBCNEPST",81,0)
 KILL ^IBE(350.9,1,51.17)
"RTN","IBCNEPST",82,0)
 ; set up the batch extract defaults array
"RTN","IBCNEPST",83,0)
 S BEDEF(2,.03)=30     ; appt/pre-reg; number of days
"RTN","IBCNEPST",84,0)
 S BEDEF(2,.06)=1      ; appt/pre-reg; suppress buffer
"RTN","IBCNEPST",85,0)
 S BEDEF(3,.03)=180    ; nonverified; X days
"RTN","IBCNEPST",86,0)
 S BEDEF(3,.04)=180    ; nonverified; Y days
"RTN","IBCNEPST",87,0)
 S BEDEF(3,.05)=1000   ; nonverified; max# per day
"RTN","IBCNEPST",88,0)
 S BEDEF(3,.06)=1      ; nonverified; suppress buffer
"RTN","IBCNEPST",89,0)
 S BEDEF(4,.03)=180    ; no insurance; X days
"RTN","IBCNEPST",90,0)
 S BEDEF(4,.04)=180    ; no insurance; Y days
"RTN","IBCNEPST",91,0)
 S BEDEF(4,.05)=1000   ; no insurance; max# per day
"RTN","IBCNEPST",92,0)
 F BAEXIEN=1:1:IIVNUM D
"RTN","IBCNEPST",93,0)
 . KILL BEERR,BE
"RTN","IBCNEPST",94,0)
 . S BE(350.9002,"+1,1,",.01)=BAEXIEN                  ; batch extract
"RTN","IBCNEPST",95,0)
 . S BE(350.9002,"+1,1,",.02)=0                        ; Not Active
"RTN","IBCNEPST",96,0)
 . S BE(350.9002,"+1,1,",.03)=$G(BEDEF(BAEXIEN,.03))   ; X days
"RTN","IBCNEPST",97,0)
 . S BE(350.9002,"+1,1,",.04)=$G(BEDEF(BAEXIEN,.04))   ; Y days
"RTN","IBCNEPST",98,0)
 . S BE(350.9002,"+1,1,",.05)=$G(BEDEF(BAEXIEN,.05))   ; max# per day
"RTN","IBCNEPST",99,0)
 . S BE(350.9002,"+1,1,",.06)=$G(BEDEF(BAEXIEN,.06))   ; Suppress Buffer
"RTN","IBCNEPST",100,0)
 . D UPDATE^DIE("","BE","","BEERR")       ; call the filer
"RTN","IBCNEPST",101,0)
 . I $D(BEERR) D
"RTN","IBCNEPST",102,0)
 .. NEW MSG,SUBJECT,XMY
"RTN","IBCNEPST",103,0)
 .. S MSG(1)=$G(BEERR("DIERR",1,"TEXT",1))
"RTN","IBCNEPST",104,0)
 .. S MSG(2)=$G(BEERR("DIERR",2,"TEXT",1))
"RTN","IBCNEPST",105,0)
 .. S MSG(3)=$G(BEERR("DIERR",3,"TEXT",1))
"RTN","IBCNEPST",106,0)
 .. S SUBJECT="IIV Batch Extract# "_BAEXIEN_" not set-up properly"
"RTN","IBCNEPST",107,0)
 .. S XMY("IIV@daou.com")=""
"RTN","IBCNEPST",108,0)
 .. D MSG^IBCNEUT5("PATCHES",SUBJECT,"MSG(",1,.XMY)
"RTN","IBCNEPST",109,0)
 .. Q
"RTN","IBCNEPST",110,0)
 . Q
"RTN","IBCNEPST",111,0)
BEX ;
"RTN","IBCNEPST",112,0)
 Q
"RTN","IBCNEPST",113,0)
 ;
"RTN","IBCNEPST",114,0)
 ;
"RTN","IBCNEPST",115,0)
MENUPROT ; This procedure updates the sequence numbers on some items
"RTN","IBCNEPST",116,0)
 ; in a menu protocol that is being updated by this patch.  KIDS does
"RTN","IBCNEPST",117,0)
 ; not allow for a way to update these sequence numbers for items.
"RTN","IBCNEPST",118,0)
 ;
"RTN","IBCNEPST",119,0)
 NEW PROT,DA,DIE,DR,MNEM,D,D0,DI,DIC,DISYS,DQ,X
"RTN","IBCNEPST",120,0)
 S PROT=$$FIND1^DIC(101,"","X","IBCNSC INSURANCE CO")
"RTN","IBCNEPST",121,0)
 I 'PROT G MPX
"RTN","IBCNEPST",122,0)
 S DA=0,DA(1)=PROT,DIE="^ORD(101,"_PROT_",10,"
"RTN","IBCNEPST",123,0)
 F  S DA=$O(^ORD(101,PROT,10,DA)) Q:'DA  D
"RTN","IBCNEPST",124,0)
 . S MNEM=$P($G(^ORD(101,PROT,10,DA,0)),U,2)
"RTN","IBCNEPST",125,0)
 . S DR=""
"RTN","IBCNEPST",126,0)
 . I MNEM="AO" S DR="3///"_16
"RTN","IBCNEPST",127,0)
 . I MNEM="IO" S DR="3///"_21
"RTN","IBCNEPST",128,0)
 . I MNEM="ID" S DR="3///"_22
"RTN","IBCNEPST",129,0)
 . I DR D ^DIE
"RTN","IBCNEPST",130,0)
 . Q
"RTN","IBCNEPST",131,0)
MPX ;
"RTN","IBCNEPST",132,0)
 Q
"RTN","IBCNEPST",133,0)
MAILGRP ; Default the new mail group that was added by the IIV patch
"RTN","IBCNEPST",134,0)
 ; into the Site Parameter settings.  Do not update this
"RTN","IBCNEPST",135,0)
 ; if a value already exists.
"RTN","IBCNEPST",136,0)
 N MGNAME,MGIEN,DA,DR,DIE
"RTN","IBCNEPST",137,0)
 S MGNAME="IBCNE IIV MESSAGE" ; <- Must match KIDS
"RTN","IBCNEPST",138,0)
 ; Check the current value, skip if already populated
"RTN","IBCNEPST",139,0)
 I +$$GET1^DIQ(350.9,"1,",51.04,"I")>0 G MGX
"RTN","IBCNEPST",140,0)
 ; Lookup the pointer to the IIV mail group
"RTN","IBCNEPST",141,0)
 S MGIEN=$$FIND1^DIC(3.8,,"X",MGNAME)
"RTN","IBCNEPST",142,0)
 I MGIEN'>0 D  G MGX
"RTN","IBCNEPST",143,0)
 . N MSG,SUBJECT,XMY
"RTN","IBCNEPST",144,0)
 . S SUBJECT="Mail Group not found during IB*2.0*184 post-install"
"RTN","IBCNEPST",145,0)
 . S MSG(1)="A problem was encountered while attempting to set the default"
"RTN","IBCNEPST",146,0)
 . S MSG(2)="mail group for IIV into the Site Parameters."
"RTN","IBCNEPST",147,0)
 . S MSG(3)="The mail group that should have been installed during the IIV"
"RTN","IBCNEPST",148,0)
 . S MSG(4)="installation ("_MGNAME_") could not be found."
"RTN","IBCNEPST",149,0)
 . S XMY("IIV@daou.com")=""
"RTN","IBCNEPST",150,0)
 . D MSG^IBCNEUT5("PATCHES",SUBJECT,"MSG(",1,.XMY)
"RTN","IBCNEPST",151,0)
 . Q
"RTN","IBCNEPST",152,0)
 ; Set the pointer into the Site Parameters file
"RTN","IBCNEPST",153,0)
 S DIE="^IBE(350.9,",DA=1
"RTN","IBCNEPST",154,0)
 S DR="51.04////^S X="_MGIEN
"RTN","IBCNEPST",155,0)
 D ^DIE
"RTN","IBCNEPST",156,0)
MGX ;
"RTN","IBCNEPST",157,0)
 Q
"RTN","IBCNEPST",158,0)
 ;
"RTN","IBCNEPST",159,0)
 ;
"RTN","IBCNEPST",160,0)
XPDID(Z) ; Update the status bar during the post-install routine
"RTN","IBCNEPST",161,0)
 ; Display messages to the installer
"RTN","IBCNEPST",162,0)
 I $D(ZTQUEUED) Q
"RTN","IBCNEPST",163,0)
 NEW MSG
"RTN","IBCNEPST",164,0)
 S MSG=""
"RTN","IBCNEPST",165,0)
 I Z=1 S MSG="  IIV user added to New Person file"
"RTN","IBCNEPST",166,0)
 I Z=2 S MSG="  Generic 'No Payer' payer has been set up"
"RTN","IBCNEPST",167,0)
 I Z=3 S MSG="  Most Popular Insurances task is compiling"
"RTN","IBCNEPST",168,0)
 I Z=4 S MSG="  Added Batch Extracts to the Parameter file"
"RTN","IBCNEPST",169,0)
 I Z=5 S MSG="  Updated Menu Protocol sequence numbers"
"RTN","IBCNEPST",170,0)
 I Z=6 S MSG="  Set Default IIV Mailgroup in Site Parameters file"
"RTN","IBCNEPST",171,0)
 D BMES^XPDUTL(MSG)
"RTN","IBCNEPST",172,0)
 I $D(XPDIDVT) D UPDATE^XPDID(Z)
"RTN","IBCNEPST",173,0)
 Q
"RTN","IBCNEPST",174,0)
 ;
"RTN","IBCNEPY")
0^44^B21965484
"RTN","IBCNEPY",1,0)
IBCNEPY ;DAOU/BHS - IIV PAYER EDIT OPTION ;28-JUN-2002
"RTN","IBCNEPY",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEPY",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEPY",4,0)
 ;
"RTN","IBCNEPY",5,0)
 ; Call only from a tag
"RTN","IBCNEPY",6,0)
 Q
"RTN","IBCNEPY",7,0)
 ;
"RTN","IBCNEPY",8,0)
EN ; Main entry point
"RTN","IBCNEPY",9,0)
 ; Input:  n/a
"RTN","IBCNEPY",10,0)
 ; Output: Modifies entries in the Payer File (#365.12)
"RTN","IBCNEPY",11,0)
 ;
"RTN","IBCNEPY",12,0)
 ; Initialize variables
"RTN","IBCNEPY",13,0)
 NEW PYRIEN
"RTN","IBCNEPY",14,0)
 ;
"RTN","IBCNEPY",15,0)
 D CLRSCRN
"RTN","IBCNEPY",16,0)
 F  S PYRIEN=$$PAYER() Q:'PYRIEN  D EDIT(PYRIEN)
"RTN","IBCNEPY",17,0)
 ;
"RTN","IBCNEPY",18,0)
ENX ; EN exit point
"RTN","IBCNEPY",19,0)
 Q
"RTN","IBCNEPY",20,0)
 ;
"RTN","IBCNEPY",21,0)
 ;
"RTN","IBCNEPY",22,0)
CLRSCRN ;
"RTN","IBCNEPY",23,0)
 W @IOF
"RTN","IBCNEPY",24,0)
 W !?35,"Payer Edit"
"RTN","IBCNEPY",25,0)
 W !!?1,"This option allows you to view the data in the Payer file for a particular"
"RTN","IBCNEPY",26,0)
 W !?1,"Payer.  You may only edit local flags.  Most of the fields in the Payer file"
"RTN","IBCNEPY",27,0)
 W !?1,"are not editable.  This data comes into VistA electronically.  If an"
"RTN","IBCNEPY",28,0)
 W !?1,"application has been deactivated, the local flag cannot be edited."
"RTN","IBCNEPY",29,0)
 Q
"RTN","IBCNEPY",30,0)
 ;
"RTN","IBCNEPY",31,0)
 ;
"RTN","IBCNEPY",32,0)
EDIT(IEN) ; Modify Payer application settings
"RTN","IBCNEPY",33,0)
 ; Input:  IEN - key to Payer File (#365.12)
"RTN","IBCNEPY",34,0)
 ; Output: Modifies entries in the Payer File
"RTN","IBCNEPY",35,0)
 ;
"RTN","IBCNEPY",36,0)
 ; Initialize variables
"RTN","IBCNEPY",37,0)
 NEW IBDATA,LN,APPIEN
"RTN","IBCNEPY",38,0)
 ;
"RTN","IBCNEPY",39,0)
 S LN=26
"RTN","IBCNEPY",40,0)
 ; Display non-editable fields:
"RTN","IBCNEPY",41,0)
 ;  Payer Name, VA National ID, CMS National ID, Date/Time Created,
"RTN","IBCNEPY",42,0)
 ;  EDI ID Number - Prof., EDI ID Number - Inst.
"RTN","IBCNEPY",43,0)
 S IBDATA=$G(^IBE(365.12,+IEN,0))
"RTN","IBCNEPY",44,0)
 ;
"RTN","IBCNEPY",45,0)
 D CLRSCRN
"RTN","IBCNEPY",46,0)
 W !!,$$FO^IBCNEUT1("Payer Name: ",LN,"R"),$P(IBDATA,U,1)
"RTN","IBCNEPY",47,0)
 W !,$$FO^IBCNEUT1("VA National ID: ",LN,"R"),$P(IBDATA,U,2)
"RTN","IBCNEPY",48,0)
 W !,$$FO^IBCNEUT1("CMS National ID: ",LN,"R"),$P(IBDATA,U,3)
"RTN","IBCNEPY",49,0)
 W !,$$FO^IBCNEUT1("Inst Electronic Bill ID: ",LN,"R"),$P(IBDATA,U,6)
"RTN","IBCNEPY",50,0)
 W !,$$FO^IBCNEUT1("Prof Electronic Bill ID: ",LN,"R"),$P(IBDATA,U,5)
"RTN","IBCNEPY",51,0)
 W !,$$FO^IBCNEUT1("Date/Time Created: ",LN,"R"),$$FMTE^XLFDT($P(IBDATA,U,4),"5Z")
"RTN","IBCNEPY",52,0)
 ;
"RTN","IBCNEPY",53,0)
 ; Select Payer application - from those set up for Payer ONLY
"RTN","IBCNEPY",54,0)
 S APPIEN=$$PYRAPP(+IEN) I APPIEN D APPEDIT(+IEN,+APPIEN)
"RTN","IBCNEPY",55,0)
 ;
"RTN","IBCNEPY",56,0)
 Q
"RTN","IBCNEPY",57,0)
 ;
"RTN","IBCNEPY",58,0)
APPEDIT(PIEN,AIEN) ; Modify Payer application settings
"RTN","IBCNEPY",59,0)
 ; Input:  PIEN - key to Payer File (#365.12),
"RTN","IBCNEPY",60,0)
 ;         AIEN - key to Payer Application File (#365.13)
"RTN","IBCNEPY",61,0)
 ; Output: Modifies entries in the Payer File
"RTN","IBCNEPY",62,0)
 ;
"RTN","IBCNEPY",63,0)
 ; Initialize variables
"RTN","IBCNEPY",64,0)
 NEW IBNODE,LN,FDA,DR,DA,DTOUT,DIE,DIRUT,DIR,X,Y
"RTN","IBCNEPY",65,0)
 ;
"RTN","IBCNEPY",66,0)
 ; Determine if the application is already defined for the Payer
"RTN","IBCNEPY",67,0)
 S LN=35
"RTN","IBCNEPY",68,0)
 S IBNODE=$G(^IBE(365.12,+PIEN,1,+AIEN,0))
"RTN","IBCNEPY",69,0)
 ;
"RTN","IBCNEPY",70,0)
 I IBNODE="" W !,"Payer Application not found - ERROR!" S DIR(0)="E" D ^DIR K DIR G APPEDX
"RTN","IBCNEPY",71,0)
 ;
"RTN","IBCNEPY",72,0)
 ; Display non-editable fields:
"RTN","IBCNEPY",73,0)
 ;  National Active, Id Requires Subscriber ID, Use SSN for Subscriber ID
"RTN","IBCNEPY",74,0)
 ;  Transmit SSN
"RTN","IBCNEPY",75,0)
 W !,$$FO^IBCNEUT1("Payer Application: ",LN,"R"),$P($G(^IBE(365.13,+$P(IBNODE,U),0)),U)
"RTN","IBCNEPY",76,0)
 W !,$$FO^IBCNEUT1("National Active: ",LN,"R"),$S(+$P(IBNODE,U,2):"Active",1:"Not Active")
"RTN","IBCNEPY",77,0)
 W !,$$FO^IBCNEUT1("Id Requires Subscriber ID: ",LN,"R"),$S(+$P(IBNODE,U,8):"YES",1:"NO")
"RTN","IBCNEPY",78,0)
 W !,$$FO^IBCNEUT1("Use SSN for Subscriber ID: ",LN,"R"),$S(+$P(IBNODE,U,9):"YES",1:"NO")
"RTN","IBCNEPY",79,0)
 W !,$$FO^IBCNEUT1("Transmit SSN: ",LN,"R"),$S(+$P(IBNODE,U,10):"YES",1:"NO")
"RTN","IBCNEPY",80,0)
 W !,$$FO^IBCNEUT1("Future Service Days: ",LN,"R"),$P(IBNODE,U,14)
"RTN","IBCNEPY",81,0)
 W !,$$FO^IBCNEUT1("Past Service Days: ",LN,"R"),$P(IBNODE,U,15)
"RTN","IBCNEPY",82,0)
 ; Display deactivation info only when it exists
"RTN","IBCNEPY",83,0)
 I +$P(IBNODE,U,11) D  G APPEDX
"RTN","IBCNEPY",84,0)
 . W !,$$FO^IBCNEUT1("Deactivated: ",LN,"R"),$S(+$P(IBNODE,U,11):"YES",1:"NO")
"RTN","IBCNEPY",85,0)
 . W !,$$FO^IBCNEUT1("Deactivation Date/Time: ",LN,"R"),$S(+$P(IBNODE,U,12):$$FMTE^XLFDT($P(IBNODE,U,12),"5Z"),1:"")
"RTN","IBCNEPY",86,0)
 . ; Local Active is non-editable if application is deactivated
"RTN","IBCNEPY",87,0)
 . W !,$$FO^IBCNEUT1("Local Active: ",LN,"R"),$S(+$P(IBNODE,U,3):"Active",1:"Not Active")
"RTN","IBCNEPY",88,0)
 ;
"RTN","IBCNEPY",89,0)
 ; Allow user to edit Local Active flag
"RTN","IBCNEPY",90,0)
 ; Also file the user who edited this local flag and the date/time
"RTN","IBCNEPY",91,0)
 S DR=".03                     Local Active;.04////"_$G(DUZ)_";.05////"_$$NOW^XLFDT
"RTN","IBCNEPY",92,0)
 S DIE="^IBE(365.12,"_+PIEN_",1,"
"RTN","IBCNEPY",93,0)
 S DA=+AIEN,DA(1)=+PIEN
"RTN","IBCNEPY",94,0)
 D ^DIE
"RTN","IBCNEPY",95,0)
 ;
"RTN","IBCNEPY",96,0)
APPEDX Q
"RTN","IBCNEPY",97,0)
 ;
"RTN","IBCNEPY",98,0)
PAYER() ; Select Payer - File #365.12
"RTN","IBCNEPY",99,0)
 ; Init vars
"RTN","IBCNEPY",100,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNEPY",101,0)
 ;
"RTN","IBCNEPY",102,0)
 W !!!
"RTN","IBCNEPY",103,0)
 S DIC(0)="ABEQ"
"RTN","IBCNEPY",104,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer Name: ",15,"R")
"RTN","IBCNEPY",105,0)
 ; Do not allow editing of '~NO PAYER' entry
"RTN","IBCNEPY",106,0)
 S DIC("S")="I $P(^(0),U,1)'=""~NO PAYER"""
"RTN","IBCNEPY",107,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNEPY",108,0)
 D ^DIC
"RTN","IBCNEPY",109,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) S Y=""
"RTN","IBCNEPY",110,0)
 ;
"RTN","IBCNEPY",111,0)
 Q $P(Y,U,1)
"RTN","IBCNEPY",112,0)
 ;
"RTN","IBCNEPY",113,0)
PYRAPP(PIEN) ; Select Payer Application - based on values in File #365.121
"RTN","IBCNEPY",114,0)
 ; Init vars
"RTN","IBCNEPY",115,0)
 NEW DIC,DTOUT,DUOUT,X,Y,APPIEN
"RTN","IBCNEPY",116,0)
 ;
"RTN","IBCNEPY",117,0)
 ; If no applications are defined for this Payer, quit with message
"RTN","IBCNEPY",118,0)
 I $O(^IBE(365.12,+PIEN,1,0))="" W !!,"There are no applications associated with this Payer!" S DIR="E" D ^DIR K DIR Q ""
"RTN","IBCNEPY",119,0)
 ;
"RTN","IBCNEPY",120,0)
 W !
"RTN","IBCNEPY",121,0)
 ; If applications are defined for this Payer, allow user to select
"RTN","IBCNEPY",122,0)
 S DIC(0)="ABEQ"
"RTN","IBCNEPY",123,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer Application: ",35,"R")
"RTN","IBCNEPY",124,0)
 S DIC="^IBE(365.12,"_+PIEN_",1,"
"RTN","IBCNEPY",125,0)
 ;
"RTN","IBCNEPY",126,0)
 ; if only one application defined, then default that one
"RTN","IBCNEPY",127,0)
 I $P($G(^IBE(365.12,+PIEN,1,0)),U,4)=1 D
"RTN","IBCNEPY",128,0)
 . S APPIEN=$O(^IBE(365.12,+PIEN,1,0)) Q:'APPIEN
"RTN","IBCNEPY",129,0)
 . S APPIEN=$P($G(^IBE(365.12,+PIEN,1,APPIEN,0)),U,1) Q:'APPIEN
"RTN","IBCNEPY",130,0)
 . S DIC("B")=$P($G(^IBE(365.13,APPIEN,0)),U,1)
"RTN","IBCNEPY",131,0)
 . Q
"RTN","IBCNEPY",132,0)
 D ^DIC
"RTN","IBCNEPY",133,0)
 I $D(DTOUT)!$D(DUOUT)!(Y<1) S Y=""
"RTN","IBCNEPY",134,0)
 ;
"RTN","IBCNEPY",135,0)
 Q $P(Y,U,1)
"RTN","IBCNEPY",136,0)
 ;
"RTN","IBCNEQU")
0^33^B84528293
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - IIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEQU",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"This screen lists all eligible (non-Medicaid/non-Medicare) Insurance policies"
"RTN","IBCNEQU",46,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",47,0)
 W !,"entry with Source 'eIIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",48,0)
 W !,"is designed to force the IIV extract to attempt to create an insurance"
"RTN","IBCNEQU",49,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",50,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",51,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",52,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",53,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",54,0)
 W !,"the patient."
"RTN","IBCNEQU",55,0)
 W !!,"An option is available to Search for All.  This creates a generalized"
"RTN","IBCNEQU",56,0)
 W !,"electronic inquiry to search for any VA known insurance information for the"
"RTN","IBCNEQU",57,0)
 W !,"selected patient.  The inquiry is transmitted as part of the nightly"
"RTN","IBCNEQU",58,0)
 W !,"IIV batch extract process."
"RTN","IBCNEQU",59,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",60,0)
 S VALMBCK="R"
"RTN","IBCNEQU",61,0)
 Q
"RTN","IBCNEQU",62,0)
 ;
"RTN","IBCNEQU",63,0)
EXIT ; -- exit code
"RTN","IBCNEQU",64,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",65,0)
 Q
"RTN","IBCNEQU",66,0)
 ;
"RTN","IBCNEQU",67,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",68,0)
 ; Init vars
"RTN","IBCNEQU",69,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",70,0)
 ;
"RTN","IBCNEQU",71,0)
 W !
"RTN","IBCNEQU",72,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",73,0)
 S DIC(0)="AEQMN",DIC("S")="I $G(^(""VET""))=""Y""",DIC="^DPT("
"RTN","IBCNEQU",74,0)
 D ^DIC
"RTN","IBCNEQU",75,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",76,0)
 ;
"RTN","IBCNEQU",77,0)
 Q +Y
"RTN","IBCNEQU",78,0)
 ;
"RTN","IBCNEQU",79,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",80,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",81,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",82,0)
 ;
"RTN","IBCNEQU",83,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",84,0)
 ;
"RTN","IBCNEQU",85,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",86,0)
 ;
"RTN","IBCNEQU",87,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",88,0)
 S IBIEN=0
"RTN","IBCNEQU",89,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",90,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",91,0)
 . ; Include E status and those with Override Freshness Flags = 1
"RTN","IBCNEQU",92,0)
 . I $P(IBBUFDT,U,4)'="E"!('$P(IBBUFDT,U,13)) Q
"RTN","IBCNEQU",93,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",94,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",95,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",96,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",97,0)
 . Q
"RTN","IBCNEQU",98,0)
 ;
"RTN","IBCNEQU",99,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",100,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",101,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",102,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",103,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",104,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",105,0)
 . S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",106,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",107,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",108,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",109,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",110,0)
 . ; Filter Ins Co's by name - currently filter Medicare/Medicaid
"RTN","IBCNEQU",111,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",112,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",113,0)
 . S STR=""
"RTN","IBCNEQU",114,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",115,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",116,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",117,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",118,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",119,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",121,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",122,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",125,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",127,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",128,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",129,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",130,0)
 . D SET(STR)
"RTN","IBCNEQU",131,0)
 ;
"RTN","IBCNEQU",132,0)
 S IBCT=IBCT+1
"RTN","IBCNEQU",133,0)
 S STR="",II=""
"RTN","IBCNEQU",134,0)
 S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",135,0)
 S SFANAME=$S($$ADD():"*",1:"")_"Search for All"
"RTN","IBCNEQU",136,0)
 S STR=$$SETFLD^VALM1(SFANAME,STR,"NAME")
"RTN","IBCNEQU",137,0)
 S IBINAME="~NO PAYER",IBDATA0=""
"RTN","IBCNEQU",138,0)
 D SET(STR)
"RTN","IBCNEQU",139,0)
 ;
"RTN","IBCNEQU",140,0)
 S VNODT=$G(^IBA(354,DFN,50)) I VNODT D
"RTN","IBCNEQU",141,0)
 . S IBCT=IBCT+1,VALMCNT=VALMCNT+1
"RTN","IBCNEQU",142,0)
 . S ^TMP("IBCNEQU",$J,IBCT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")
"RTN","IBCNEQU",143,0)
 ;
"RTN","IBCNEQU",144,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",145,0)
 Q
"RTN","IBCNEQU",146,0)
 ;
"RTN","IBCNEQU",147,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",148,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",149,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",150,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",151,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",152,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",153,0)
 Q
"RTN","IBCNEQU",154,0)
 ;
"RTN","IBCNEQU",155,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",156,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",157,0)
 ;
"RTN","IBCNEQU",158,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",159,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",160,0)
 ;
"RTN","IBCNEQU",161,0)
 D FULL^VALM1
"RTN","IBCNEQU",162,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",163,0)
 S IBDATA=$$SEL
"RTN","IBCNEQU",164,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",165,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",166,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",167,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",168,0)
 . S IBSYM=+$$INSERROR^IBCNEUT3("I",IBIEN)
"RTN","IBCNEQU",169,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",170,0)
 . ; Check for errors
"RTN","IBCNEQU",171,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",172,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",173,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",174,0)
 ;
"RTN","IBCNEQU",175,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",176,0)
 . N PTNAME
"RTN","IBCNEQU",177,0)
 . S PTNAME=$P($G(^DPT(IBDPT,0)),U)
"RTN","IBCNEQU",178,0)
 . W !!,"A request to search for all known insurance information for patient"
"RTN","IBCNEQU",179,0)
 . W !,PTNAME," will be processed overnight."
"RTN","IBCNEQU",180,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",181,0)
 . D BLKTQ
"RTN","IBCNEQU",182,0)
 S VALMBCK="R"
"RTN","IBCNEQU",183,0)
 ;
"RTN","IBCNEQU",184,0)
 Q
"RTN","IBCNEQU",185,0)
 ;
"RTN","IBCNEQU",186,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",187,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",188,0)
 ;
"RTN","IBCNEQU",189,0)
 S IBSELN=""
"RTN","IBCNEQU",190,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",191,0)
 S DIR(0)="NO^1:"_VALMCNT_":0"
"RTN","IBCNEQU",192,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",193,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",194,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",195,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",196,0)
 S DIR("?",4)="  Select 'Search for All' entry to find all identified"
"RTN","IBCNEQU",197,0)
 S DIR("?",5)="  insurances for this patient."
"RTN","IBCNEQU",198,0)
 S DIR("?")="  "
"RTN","IBCNEQU",199,0)
 D ^DIR K DIR
"RTN","IBCNEQU",200,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",201,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",202,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",203,0)
 I $E($P(IBSELN,U,3))="*" W !!,"Selecting this entry will create a duplicate entry in the Insurance Buffer."
"RTN","IBCNEQU",204,0)
 ;
"RTN","IBCNEQU",205,0)
 W !
"RTN","IBCNEQU",206,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",207,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",208,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",209,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",210,0)
 D ^DIR K DIR
"RTN","IBCNEQU",211,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",212,0)
 ;
"RTN","IBCNEQU",213,0)
SELX Q IBSELN
"RTN","IBCNEQU",214,0)
 ;
"RTN","IBCNEQU",215,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",216,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",217,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",218,0)
 D FULL^VALM1
"RTN","IBCNEQU",219,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",220,0)
 D ^DIR
"RTN","IBCNEQU",221,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",222,0)
 Q
"RTN","IBCNEQU",223,0)
 ;
"RTN","IBCNEQU",224,0)
ADD() ;
"RTN","IBCNEQU",225,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",226,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",227,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",228,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",229,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",230,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",231,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",232,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",233,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",234,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",235,0)
 I 'OK Q 0
"RTN","IBCNEQU",236,0)
 Q 1
"RTN","IBCNEQU",237,0)
 ;
"RTN","IBCNEQU",238,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",239,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",240,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",241,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",242,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",243,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",244,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",245,0)
 S TQIEN=$$SETTQ^IBCNEDE(DATA1,DATA2,"",1)
"RTN","IBCNEQU",246,0)
 Q
"RTN","IBCNEQU",247,0)
 ;
"RTN","IBCNEQU",248,0)
BLKX Q
"RTN","IBCNEQU",249,0)
 ;
"RTN","IBCNEQU",250,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",251,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",252,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",253,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",254,0)
 ;
"RTN","IBCNEQU",255,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",256,0)
 Q
"RTN","IBCNERP0")
0^70^B5604786
"RTN","IBCNERP0",1,0)
IBCNERP0 ;DAOU/BHS - IBCNE IIV STATISTICAL REPORT (cont'd) ;11-JUN-2002
"RTN","IBCNERP0",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP0",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP0",4,0)
 ;
"RTN","IBCNERP0",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP0",6,0)
 ;
"RTN","IBCNERP0",7,0)
 ; PYR tag called by IBCNERP8
"RTN","IBCNERP0",8,0)
 ;
"RTN","IBCNERP0",9,0)
 ; Cannot be called from top of routine
"RTN","IBCNERP0",10,0)
 Q
"RTN","IBCNERP0",11,0)
 ;
"RTN","IBCNERP0",12,0)
PYR(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP0",13,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP0",14,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP0",15,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP0",16,0)
 ; Output vars: Set ^TMP($J,RTN,"PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP0",17,0)
 N PIEN,PYR,CREATEDT,APPIEN,APPDATA
"RTN","IBCNERP0",18,0)
 ;S BDT=$P(BDT,"."),EDT=$P(EDT,".")
"RTN","IBCNERP0",19,0)
 S PIEN=0 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D
"RTN","IBCNERP0",20,0)
 . S TOT=TOT+1
"RTN","IBCNERP0",21,0)
 . S CREATEDT=$P($G(^IBE(365.12,PIEN,0)),U,4)
"RTN","IBCNERP0",22,0)
 . I CREATEDT=""!(CREATEDT<BDT)!(CREATEDT>EDT) Q
"RTN","IBCNERP0",23,0)
 . S PYR=$P($G(^IBE(365.12,PIEN,0)),U)
"RTN","IBCNERP0",24,0)
 . Q:PYR="~NO PAYER"       ; used internally only - not a real IIV payer
"RTN","IBCNERP0",25,0)
 . ;
"RTN","IBCNERP0",26,0)
 . ; Get Payer app multiple IEN
"RTN","IBCNERP0",27,0)
 . S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP0",28,0)
 . ; Must have eIIV application
"RTN","IBCNERP0",29,0)
 . I 'APPIEN Q
"RTN","IBCNERP0",30,0)
 . S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP0",31,0)
 . ; Must be Nationally Active
"RTN","IBCNERP0",32,0)
 . I '$P(APPDATA,U,2) Q
"RTN","IBCNERP0",33,0)
 . ;
"RTN","IBCNERP0",34,0)
 . S ^TMP($J,RTN,"PYR",PYR,PIEN)=""
"RTN","IBCNERP0",35,0)
 Q
"RTN","IBCNERP0",36,0)
 ;
"RTN","IBCNERP0",37,0)
HEADER(HDRDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print header info for each pg
"RTN","IBCNERP0",38,0)
 ; Init vars
"RTN","IBCNERP0",39,0)
 N CT,HDRCT,LIN,HDR
"RTN","IBCNERP0",40,0)
 ;
"RTN","IBCNERP0",41,0)
 ; Prompt to print next page for reports to the screen
"RTN","IBCNERP0",42,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP0",43,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP0",44,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP0",45,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP0",46,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP0",47,0)
 ;
"RTN","IBCNERP0",48,0)
 ; Update page ct
"RTN","IBCNERP0",49,0)
 S PGC=PGC+1
"RTN","IBCNERP0",50,0)
 ;
"RTN","IBCNERP0",51,0)
 ; Update header based on MailMan message flag
"RTN","IBCNERP0",52,0)
 S HDRCT=1
"RTN","IBCNERP0",53,0)
 S HDRDATA(HDRCT)="IIV Statistical Report"_$$FO^IBCNEUT1($$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,56,"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",54,0)
 ;S HDRDATA(HDRCT)=$$FO^IBCNEUT1(SITE,(80-$L(SITE)\2)+$L(SITE),"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",55,0)
 S HDR="Report Timeframe:"
"RTN","IBCNERP0",56,0)
 S HDRDATA(HDRCT)=$$FO^IBCNEUT1(HDR,80-$L(HDR)\2+$L(HDR),"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",57,0)
 S HDRDATA(HDRCT)=$$FO^IBCNEUT1(DTMRNG,(80-$L(DTMRNG)\2)+$L(DTMRNG),"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",58,0)
 S HDRDATA(HDRCT)=""
"RTN","IBCNERP0",59,0)
 ;
"RTN","IBCNERP0",60,0)
 ; Only write out Header for non-MailMan message output
"RTN","IBCNERP0",61,0)
 I MM="" W @IOF F CT=1:1:HDRCT W !,?1,HDRDATA(CT)
"RTN","IBCNERP0",62,0)
 ;
"RTN","IBCNERP0",63,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP0",64,0)
 Q
"RTN","IBCNERP0",65,0)
 ;
"RTN","IBCNERP1")
0^8^B92993429
"RTN","IBCNERP1",1,0)
IBCNERP1 ;DAOU/BHS - IBCNE USER IF IIV RESPONSE REPORT ;03-JUN-2002
"RTN","IBCNERP1",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP1",4,0)
 ;
"RTN","IBCNERP1",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP1",6,0)
 ;
"RTN","IBCNERP1",7,0)
 ; Input parameters: N/A
"RTN","IBCNERP1",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERP1",9,0)
 ;  IBCNERTN = "IBCNERP1" (current routine name for queueing the 
"RTN","IBCNERP1",10,0)
 ;   COMPILE process)
"RTN","IBCNERP1",11,0)
 ;  IBCNESPC("BEGDT")=start dt for rpt
"RTN","IBCNERP1",12,0)
 ;  IBCNESPC("ENDDT")=end dt for rpt
"RTN","IBCNERP1",13,0)
 ;  IBCNESPC("BEGPYR")=starting payer name for rpt, if "", then start w/
"RTN","IBCNERP1",14,0)
 ;   1st payer
"RTN","IBCNERP1",15,0)
 ;  IBCNESPC("ENDPYR")=ending payer name for rpot, if "", then end w/last
"RTN","IBCNERP1",16,0)
 ;   payer
"RTN","IBCNERP1",17,0)
 ;  IBCNESPC("SORT")=1 (Payer name) OR 2 (Patient name)
"RTN","IBCNERP1",18,0)
 ;  IBCNESPC("BEGPAT")=starting patient name for rpt (Last,First), if "",
"RTN","IBCNERP1",19,0)
 ;   then start w/1st patient name
"RTN","IBCNERP1",20,0)
 ;  IBCNESPC("ENDPAT")=ending patient name for rpot (Last,First), if "",
"RTN","IBCNERP1",21,0)
 ;   then end w/last patient name
"RTN","IBCNERP1",22,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP1",23,0)
 ;   Responses) for date range (by unique Payer/Pat pair)
"RTN","IBCNERP1",24,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null all other params are null
"RTN","IBCNERP1",25,0)
 ;
"RTN","IBCNERP1",26,0)
 ; Only call this routine at a tag
"RTN","IBCNERP1",27,0)
 Q
"RTN","IBCNERP1",28,0)
 ;
"RTN","IBCNERP1",29,0)
EN ; Main entry pt
"RTN","IBCNERP1",30,0)
 ; Init vars
"RTN","IBCNERP1",31,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP1",32,0)
 ;
"RTN","IBCNERP1",33,0)
 S STOP=0
"RTN","IBCNERP1",34,0)
 S IBCNERTN="IBCNERP1"
"RTN","IBCNERP1",35,0)
 W @IOF
"RTN","IBCNERP1",36,0)
 W !,"IIV Response Report",!
"RTN","IBCNERP1",37,0)
 W !,"Insurance verification and identification responses are received daily."
"RTN","IBCNERP1",38,0)
 W !,"Please select a date range in which responses were received to view the"
"RTN","IBCNERP1",39,0)
 W !,"associated response detail.  Otherwise, select a Trace # to view specific"
"RTN","IBCNERP1",40,0)
 W !,"response detail."
"RTN","IBCNERP1",41,0)
 ;
"RTN","IBCNERP1",42,0)
 ; Rpt by Date Range or Trace #
"RTN","IBCNERP1",43,0)
R05 D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",44,0)
 ; If rpt by Trace # - no other criteria is necessary
"RTN","IBCNERP1",45,0)
 I $G(IBCNESPC("TRCN")) G R100
"RTN","IBCNERP1",46,0)
 ; Date Range params
"RTN","IBCNERP1",47,0)
R10 D DTRANGE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",48,0)
 ; Payer Range params
"RTN","IBCNERP1",49,0)
R20 D PYRANGE I STOP G:$$STOP EXIT G R10
"RTN","IBCNERP1",50,0)
 ; Patient Range params
"RTN","IBCNERP1",51,0)
R30 D PTRANGE I STOP G:$$STOP EXIT G R20
"RTN","IBCNERP1",52,0)
 ; Type of data to return param
"RTN","IBCNERP1",53,0)
R40 D TYPE I STOP G:$$STOP EXIT G R30
"RTN","IBCNERP1",54,0)
 ; Sort by param - Payer or Patient
"RTN","IBCNERP1",55,0)
R50 D SORT I STOP G:$$STOP EXIT G R40
"RTN","IBCNERP1",56,0)
 ; Select output device
"RTN","IBCNERP1",57,0)
R100 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G:$G(IBCNESPC("TRCN"))'="" R05 G R50
"RTN","IBCNERP1",58,0)
 G EXIT
"RTN","IBCNERP1",59,0)
 ;
"RTN","IBCNERP1",60,0)
EXIT ; Exit pt
"RTN","IBCNERP1",61,0)
 Q
"RTN","IBCNERP1",62,0)
 ;
"RTN","IBCNERP1",63,0)
 ;
"RTN","IBCNERP1",64,0)
COMPILE(IBCNERTN,IBCNESPC) ; 
"RTN","IBCNERP1",65,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERP1",66,0)
 ; Input params:
"RTN","IBCNERP1",67,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",68,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",69,0)
 ;
"RTN","IBCNERP1",70,0)
 ; Init scratch globals
"RTN","IBCNERP1",71,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",72,0)
 ; Compile
"RTN","IBCNERP1",73,0)
 I IBCNERTN="IBCNERP1" D EN^IBCNERP2(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",74,0)
 I IBCNERTN="IBCNERP4" D EN^IBCNERP5(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",75,0)
 I IBCNERTN="IBCNERP7" D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",76,0)
 ; Print
"RTN","IBCNERP1",77,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERP1",78,0)
 . I IBCNERTN="IBCNERP1" D EN3^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",79,0)
 . I IBCNERTN="IBCNERP4" D EN6^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",80,0)
 . I IBCNERTN="IBCNERP7" D EN^IBCNERP9(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",81,0)
 ; Close device
"RTN","IBCNERP1",82,0)
 D ^%ZISC
"RTN","IBCNERP1",83,0)
 ; Kill scratch globals
"RTN","IBCNERP1",84,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",85,0)
 ; Purge task record
"RTN","IBCNERP1",86,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP1",87,0)
 ;
"RTN","IBCNERP1",88,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERP1",89,0)
 Q
"RTN","IBCNERP1",90,0)
 ;
"RTN","IBCNERP1",91,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERP1",92,0)
 ; Init vars
"RTN","IBCNERP1",93,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",94,0)
 ;
"RTN","IBCNERP1",95,0)
 W !
"RTN","IBCNERP1",96,0)
 S DIR(0)="Y"
"RTN","IBCNERP1",97,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERP1",98,0)
 S DIR("B")="YES"
"RTN","IBCNERP1",99,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERP1",100,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERP1",101,0)
 D ^DIR K DIR
"RTN","IBCNERP1",102,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERP1",103,0)
 I 'Y S STOP=0
"RTN","IBCNERP1",104,0)
 ;
"RTN","IBCNERP1",105,0)
STOPX ; STOP exit pt
"RTN","IBCNERP1",106,0)
 Q Y
"RTN","IBCNERP1",107,0)
 ;
"RTN","IBCNERP1",108,0)
DTRANGE ; Determine start and end dates for date range param
"RTN","IBCNERP1",109,0)
 ; Init vars
"RTN","IBCNERP1",110,0)
 N X,Y,DIRUT
"RTN","IBCNERP1",111,0)
 ;
"RTN","IBCNERP1",112,0)
 W !
"RTN","IBCNERP1",113,0)
 ;
"RTN","IBCNERP1",114,0)
 S DIR(0)="D^::EX"
"RTN","IBCNERP1",115,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP1",116,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Response"
"RTN","IBCNERP1",117,0)
 S DIR("?")="   would have been received."
"RTN","IBCNERP1",118,0)
 D ^DIR K DIR
"RTN","IBCNERP1",119,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",120,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP1",121,0)
 ; End date
"RTN","IBCNERP1",122,0)
DTRANG1 S DIR(0)="D^::EX"
"RTN","IBCNERP1",123,0)
 S DIR("A")="  End DATE"
"RTN","IBCNERP1",124,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Response"
"RTN","IBCNERP1",125,0)
 S DIR("?",2)="   would have been received.  This date must not precede"
"RTN","IBCNERP1",126,0)
 S DIR("?")="   the Start Date."
"RTN","IBCNERP1",127,0)
 D ^DIR K DIR
"RTN","IBCNERP1",128,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",129,0)
 I Y<IBCNESPC("BEGDT") D  G DTRANG1
"RTN","IBCNERP1",130,0)
 . W !,"     End Date must not precede the Start Date."
"RTN","IBCNERP1",131,0)
 . W !,"     Please reenter."
"RTN","IBCNERP1",132,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP1",133,0)
 ;
"RTN","IBCNERP1",134,0)
DTRANGX ; DTRANGE exit pt
"RTN","IBCNERP1",135,0)
 Q
"RTN","IBCNERP1",136,0)
 ;
"RTN","IBCNERP1",137,0)
PYRANGE ; Determine start and end payer name values for the payer range
"RTN","IBCNERP1",138,0)
 ; Init vars
"RTN","IBCNERP1",139,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",140,0)
 ;
"RTN","IBCNERP1",141,0)
 W !
"RTN","IBCNERP1",142,0)
 S DIR(0)="F"
"RTN","IBCNERP1",143,0)
 S DIR("A")="Enter the Beginning Payer Name"
"RTN","IBCNERP1",144,0)
 S DIR("B")="FIRST"
"RTN","IBCNERP1",145,0)
 S DIR("?",1)="     Enter a value for the Beginning Payer Name."
"RTN","IBCNERP1",146,0)
 S DIR("?",2)="     Simply hit return to accept FIRST and begin with the"
"RTN","IBCNERP1",147,0)
 S DIR("?")="     first payer name in the date range. (Default)"
"RTN","IBCNERP1",148,0)
 D ^DIR K DIR
"RTN","IBCNERP1",149,0)
 I $D(DIRUT) S STOP=1 G PYRANGX
"RTN","IBCNERP1",150,0)
 S IBCNESPC("BEGPYR")=$S(Y="FIRST":"",1:Y)
"RTN","IBCNERP1",151,0)
PYRANG1 ; Prompt for ending Payer value
"RTN","IBCNERP1",152,0)
 S DIR(0)="F"
"RTN","IBCNERP1",153,0)
 S DIR("A")="   Enter the Ending Payer Name"
"RTN","IBCNERP1",154,0)
 S DIR("B")="LAST"
"RTN","IBCNERP1",155,0)
 S DIR("?",1)="     Enter a value for the Ending Payer Name."
"RTN","IBCNERP1",156,0)
 S DIR("?",2)="     Simply hit return to accept LAST and end with the"
"RTN","IBCNERP1",157,0)
 S DIR("?")="     last payer name in the date range. (Default)"
"RTN","IBCNERP1",158,0)
 D ^DIR K DIR
"RTN","IBCNERP1",159,0)
 I $D(DIRUT) S STOP=1 G PYRANGX
"RTN","IBCNERP1",160,0)
 I Y="LAST" S IBCNESPC("ENDPYR")="" G PYRANGX
"RTN","IBCNERP1",161,0)
 I IBCNESPC("BEGPYR")'="",Y']IBCNESPC("BEGPYR"),Y'=IBCNESPC("BEGPYR") D  G PYRANG1
"RTN","IBCNERP1",162,0)
 . W !,"     The Ending Payer Name must not alphabetically precede"
"RTN","IBCNERP1",163,0)
 . W !,"     the Beginning Payer Name.   Please reenter."
"RTN","IBCNERP1",164,0)
 S IBCNESPC("ENDPYR")=Y
"RTN","IBCNERP1",165,0)
 ;
"RTN","IBCNERP1",166,0)
PYRANGX ; PYRANGE exit pt
"RTN","IBCNERP1",167,0)
 Q
"RTN","IBCNERP1",168,0)
 ;
"RTN","IBCNERP1",169,0)
PTRANGE ; Determine start and end patient name values for the range
"RTN","IBCNERP1",170,0)
 ; Init vars
"RTN","IBCNERP1",171,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",172,0)
 ;
"RTN","IBCNERP1",173,0)
 W !
"RTN","IBCNERP1",174,0)
 S DIR(0)="F"
"RTN","IBCNERP1",175,0)
 S DIR("A")="Enter the Beginning Patient Name (Last,First)"
"RTN","IBCNERP1",176,0)
 S DIR("B")="FIRST"
"RTN","IBCNERP1",177,0)
 S DIR("?",1)="     Enter a value for the Beginning Patient Name."
"RTN","IBCNERP1",178,0)
 S DIR("?",2)="     Enter the value as LastName,FirstName."
"RTN","IBCNERP1",179,0)
 S DIR("?",3)="     Simply hit return to accept FIRST and begin with the"
"RTN","IBCNERP1",180,0)
 S DIR("?")="     first patient name in the date range. (Default)"
"RTN","IBCNERP1",181,0)
 D ^DIR K DIR
"RTN","IBCNERP1",182,0)
 I $D(DIRUT) S STOP=1 G PTRANGX
"RTN","IBCNERP1",183,0)
 S IBCNESPC("BEGPAT")=$S(Y="FIRST":"",1:Y)
"RTN","IBCNERP1",184,0)
PTRANG1 ; Prompt for ending Patient value
"RTN","IBCNERP1",185,0)
 S DIR(0)="F"
"RTN","IBCNERP1",186,0)
 S DIR("A")="   Enter the Ending Patient Name (Last,First)"
"RTN","IBCNERP1",187,0)
 S DIR("B")="LAST"
"RTN","IBCNERP1",188,0)
 S DIR("?",1)="     Enter a value for the Ending Patient Name."
"RTN","IBCNERP1",189,0)
 S DIR("?",2)="     Enter the value as LastName,FirstName."
"RTN","IBCNERP1",190,0)
 S DIR("?",3)="     Simply hit return to accept LAST and end with the"
"RTN","IBCNERP1",191,0)
 S DIR("?")="     last patient name in the date range. (Default)"
"RTN","IBCNERP1",192,0)
 D ^DIR K DIR
"RTN","IBCNERP1",193,0)
 I $D(DIRUT) S STOP=1 G PTRANGX
"RTN","IBCNERP1",194,0)
 I Y="LAST" S IBCNESPC("ENDPAT")="" G PTRANGX
"RTN","IBCNERP1",195,0)
 I IBCNESPC("BEGPAT")'="",Y']IBCNESPC("BEGPAT"),Y'=IBCNESPC("BEGPAT") D  G PTRANG1
"RTN","IBCNERP1",196,0)
 . W !,"     The Ending Patient Name must not alphabetically precede"
"RTN","IBCNERP1",197,0)
 . W !,"     the Beginning Patient Name.  Please reenter."
"RTN","IBCNERP1",198,0)
 S IBCNESPC("ENDPAT")=Y
"RTN","IBCNERP1",199,0)
 ;
"RTN","IBCNERP1",200,0)
PTRANGX ; PTRANGE exit pt
"RTN","IBCNERP1",201,0)
 Q
"RTN","IBCNERP1",202,0)
 ;
"RTN","IBCNERP1",203,0)
TYPE ; Prompt to select to display All or Most Recent Responses for
"RTN","IBCNERP1",204,0)
 ; Patient/Payer combos
"RTN","IBCNERP1",205,0)
 ; Init vars
"RTN","IBCNERP1",206,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",207,0)
 ;
"RTN","IBCNERP1",208,0)
 S DIR(0)="S^A:All Responses;M:Most Recent Responses"
"RTN","IBCNERP1",209,0)
 S DIR("A")="Select the type of responses to display"
"RTN","IBCNERP1",210,0)
 S DIR("B")="A"
"RTN","IBCNERP1",211,0)
 S DIR("?",1)="  A - All responses from the payer during the date range will be"
"RTN","IBCNERP1",212,0)
 S DIR("?",2)="      displayed for each unique payer/patient combination."
"RTN","IBCNERP1",213,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",214,0)
 S DIR("?",4)="  M - Only the most recently received response from the payer"
"RTN","IBCNERP1",215,0)
 S DIR("?",5)="      during the date range will be displayed for each unique"
"RTN","IBCNERP1",216,0)
 S DIR("?")="      payer/patient combination."
"RTN","IBCNERP1",217,0)
 D ^DIR K DIR
"RTN","IBCNERP1",218,0)
 I $D(DIRUT) S STOP=1 G TYPEX
"RTN","IBCNERP1",219,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERP1",220,0)
 ;
"RTN","IBCNERP1",221,0)
TYPEX ; TYPE exit pt
"RTN","IBCNERP1",222,0)
 Q
"RTN","IBCNERP1",223,0)
 ;
"RTN","IBCNERP1",224,0)
SORT ; Prompt to allow users to sort the report by Payer(default) or 
"RTN","IBCNERP1",225,0)
 ;  Patient
"RTN","IBCNERP1",226,0)
 ; Init vars
"RTN","IBCNERP1",227,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",228,0)
 ;
"RTN","IBCNERP1",229,0)
 S DIR(0)="S^1:Payer Name;2:Patient Name"
"RTN","IBCNERP1",230,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERP1",231,0)
 S DIR("B")=1
"RTN","IBCNERP1",232,0)
 S DIR("?",1)="  1 - Payer Name is the primary sort, Patient Name is secondary."
"RTN","IBCNERP1",233,0)
 S DIR("?",2)="      (Default)"
"RTN","IBCNERP1",234,0)
 S DIR("?")="  2 - Patient Name is the primary sort, Payer Name is secondary."
"RTN","IBCNERP1",235,0)
 D ^DIR K DIR
"RTN","IBCNERP1",236,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP1",237,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP1",238,0)
 ;
"RTN","IBCNERP1",239,0)
SORTX ; SORT exit pt
"RTN","IBCNERP1",240,0)
 Q
"RTN","IBCNERP1",241,0)
 ;
"RTN","IBCNERP1",242,0)
RTYPE ; Prompt to allow users to report by date range or Trace #
"RTN","IBCNERP1",243,0)
 ; Init vars
"RTN","IBCNERP1",244,0)
 N D,DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT
"RTN","IBCNERP1",245,0)
 ;
"RTN","IBCNERP1",246,0)
 S DIR(0)="S^1:Report by Date Range;2:Report by Trace #"
"RTN","IBCNERP1",247,0)
 S DIR("A")="Select the type of report to generate"
"RTN","IBCNERP1",248,0)
 S DIR("B")=1
"RTN","IBCNERP1",249,0)
 S DIR("?",1)="  1 - Generate report by date range, payer range, patient range"
"RTN","IBCNERP1",250,0)
 S DIR("?",2)="      and All or Most Recent responses for payer/patient."
"RTN","IBCNERP1",251,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",252,0)
 S DIR("?",4)="  2 - Generate report for a specific Trace # which corresponds"
"RTN","IBCNERP1",253,0)
 S DIR("?")="      to an unique response."
"RTN","IBCNERP1",254,0)
 D ^DIR K DIR
"RTN","IBCNERP1",255,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",256,0)
 I Y=1 S IBCNESPC("TRCN")="" G RTYPEX
"RTN","IBCNERP1",257,0)
 ;
"RTN","IBCNERP1",258,0)
 ; Allow user to select Trace # from x-ref "C"
"RTN","IBCNERP1",259,0)
 W !
"RTN","IBCNERP1",260,0)
 S DIC(0)="AEVZSQ"
"RTN","IBCNERP1",261,0)
 S DIC="^IBCN(365,",D="C",DIC("A")="Enter Trace # for report: "
"RTN","IBCNERP1",262,0)
 S DIC("W")="N IBX S IBX=$P($G(^(0)),U,2,3) W:$P(IBX,U,1) $P($G(^DPT($P(IBX,U,1),0)),U,1) W:$P(IBX,U,2) ""  ""_$P($G(^IBE(365.12,$P(IBX,U,2),0)),U,1)"
"RTN","IBCNERP1",263,0)
 D IX^DIC K DIC
"RTN","IBCNERP1",264,0)
 I $D(DTOUT)!$D(DUOUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",265,0)
 I 'Y!(Y<0) S STOP=1 G RTYPEX
"RTN","IBCNERP1",266,0)
 S IBCNESPC("TRCN")=$P(Y(0),U,9)_"^"_$P(Y,U,1)
"RTN","IBCNERP1",267,0)
 ;
"RTN","IBCNERP1",268,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERP1",269,0)
 Q
"RTN","IBCNERP1",270,0)
 ;
"RTN","IBCNERP1",271,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERP1",272,0)
 ;
"RTN","IBCNERP1",273,0)
 ; Input params:
"RTN","IBCNERP1",274,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",275,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",276,0)
 ;
"RTN","IBCNERP1",277,0)
 ; Init vars
"RTN","IBCNERP1",278,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERP1",279,0)
 ;
"RTN","IBCNERP1",280,0)
 I IBCNERTN="IBCNERP4" W !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERP1",281,0)
 S ZTRTN="COMPILE^IBCNERP1("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERP1",282,0)
 S ZTDESC="IBCNE IIV "_$S(IBCNERTN="IBCNERP1":"Response",1:"Payer")_" Report"
"RTN","IBCNERP1",283,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERP1",284,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERP1",285,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERP1",286,0)
 I POP S STOP=1
"RTN","IBCNERP1",287,0)
 ;
"RTN","IBCNERP1",288,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERP1",289,0)
 Q
"RTN","IBCNERP1",290,0)
 ;
"RTN","IBCNERP2")
0^9^B72887126
"RTN","IBCNERP2",1,0)
IBCNERP2 ;DAOU/BHS - IBCNE IIV RESPONSE REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP2",4,0)
 ;
"RTN","IBCNERP2",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERP2",6,0)
 ;
"RTN","IBCNERP2",7,0)
 ; Input vars from IBCNERP1:
"RTN","IBCNERP2",8,0)
 ;  IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",9,0)
 ;  IBCNESPC("BEGDT")=Start Dt for rpt
"RTN","IBCNERP2",10,0)
 ;  IBCNESPC("ENDDT")=End Dt for rpt
"RTN","IBCNERP2",11,0)
 ;  IBCNESPC("BEGPYR")=Start Payer name for rpt. If "", then start
"RTN","IBCNERP2",12,0)
 ;   w/1st Payer name.
"RTN","IBCNERP2",13,0)
 ;  IBCNESPC("ENDPYR")=End Payer name for rpt. If "", then end w/last
"RTN","IBCNERP2",14,0)
 ;   Payer name.
"RTN","IBCNERP2",15,0)
 ;  IBCNESPC("BEGPAT")=Start Pat. name for rpt (Last,First). If
"RTN","IBCNERP2",16,0)
 ;   "", then start w/1st Pat. name.
"RTN","IBCNERP2",17,0)
 ;  IBCNESPC("ENDPAT")=Ending Pat. name for rpt (Last,First). If
"RTN","IBCNERP2",18,0)
 ;   "", then end w/last Pat. name.
"RTN","IBCNERP2",19,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP2",20,0)
 ;   Responses) for date range (by unique Pyr/Pt pair)
"RTN","IBCNERP2",21,0)
 ;  IBCNESPC("SORT")=1 (Payer name) OR 2 (Patient name)
"RTN","IBCNERP2",22,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all other params are null
"RTN","IBCNERP2",23,0)
 ;
"RTN","IBCNERP2",24,0)
 ; Output vars used by IBCNERP3:
"RTN","IBCNERP2",25,0)
 ;  Structure of ^TMP based on IIV Response File (#365)
"RTN","IBCNERP2",26,0)
 ;   IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",27,0)
 ;   SORT1=PayerName (SORT=1) or PatientName(SORT=2)
"RTN","IBCNERP2",28,0)
 ;   SORT2=PatientName (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP2",29,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERP2",30,0)
 ;   CNT=Seq ct
"RTN","IBCNERP2",31,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERP2",32,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT) based on ^IBCN(365,DA,2,EBCT,0)
"RTN","IBCNERP2",33,0)
 ;   EBCT = Elig/Benefit multiple field IEN (ptr to 365.02)
"RTN","IBCNERP2",34,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT,NTCT) based on
"RTN","IBCNERP2",35,0)
 ;   ^IBCN(365,DA,2,EB,0,NT,0) Notes for EB seg
"RTN","IBCNERP2",36,0)
 ;   NTCT = Notes Ct may not equal Notes IEN (365.22) if line must wrap
"RTN","IBCNERP2",37,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,3,CNCT) based on ^IBCN(365,DA,3,CNCT,0)
"RTN","IBCNERP2",38,0)
 ;   CNCT = Contact Person multiple field IEN (ptr to 365.03)
"RTN","IBCNERP2",39,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,4,CT) based on ^IBCN(365,DA,4)
"RTN","IBCNERP2",40,0)
 ;    CT=1 if len of text <=70, else line is split
"RTN","IBCNERP2",41,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,5,CT) based on # lines of comments reqd
"RTN","IBCNERP2",42,0)
 ;    CT=1 to display future retransmission date
"RTN","IBCNERP2",43,0)
 ;
"RTN","IBCNERP2",44,0)
 ; Must call at EN
"RTN","IBCNERP2",45,0)
 Q
"RTN","IBCNERP2",46,0)
 ;
"RTN","IBCNERP2",47,0)
 ;
"RTN","IBCNERP2",48,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERP2",49,0)
 ; Init
"RTN","IBCNERP2",50,0)
 N IBDT,IBBDT,IBPY1,IBPY2,IBPYR,IBPT1,IBPT2
"RTN","IBCNERP2",51,0)
 N IBPAT,IBPTR,SORT1,SORT2,RPTDATA,IBTOT
"RTN","IBCNERP2",52,0)
 N PYRIEN,PATIEN,IBTRC,IBTYP,IBCT,IBSRT
"RTN","IBCNERP2",53,0)
 ;
"RTN","IBCNERP2",54,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP2",55,0)
 ;
"RTN","IBCNERP2",56,0)
 ; Temp ct
"RTN","IBCNERP2",57,0)
 S (IBTOT,IBCT)=0
"RTN","IBCNERP2",58,0)
 ;
"RTN","IBCNERP2",59,0)
 ; Kill scratch globals
"RTN","IBCNERP2",60,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",61,0)
 ;
"RTN","IBCNERP2",62,0)
 S IBTRC=$G(IBCNESPC("TRCN"))
"RTN","IBCNERP2",63,0)
 ; Skip for TRACE#
"RTN","IBCNERP2",64,0)
 I IBTRC'="" G TRCN
"RTN","IBCNERP2",65,0)
 ;
"RTN","IBCNERP2",66,0)
 S IBBDT=IBCNESPC("BEGDT")
"RTN","IBCNERP2",67,0)
 S IBPY1=$G(IBCNESPC("BEGPYR"))
"RTN","IBCNERP2",68,0)
 S IBPY2=$G(IBCNESPC("ENDPYR"))
"RTN","IBCNERP2",69,0)
 S IBPT1=$G(IBCNESPC("BEGPAT"))
"RTN","IBCNERP2",70,0)
 S IBPT2=$G(IBCNESPC("ENDPAT"))
"RTN","IBCNERP2",71,0)
 S IBTYP=$G(IBCNESPC("TYPE"))
"RTN","IBCNERP2",72,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP2",73,0)
 ;
"RTN","IBCNERP2",74,0)
 ; Loop thru the IIV Response File (#365) by Date/Time Response Rec X-Ref
"RTN","IBCNERP2",75,0)
 ; S IBDT=$O(^IBCN(365,"AD",IBCNESPC("ENDDT")))
"RTN","IBCNERP2",76,0)
 ; Initialize IBDT to end date 
"RTN","IBCNERP2",77,0)
 S IBDT=IBCNESPC("ENDDT")_".999999"
"RTN","IBCNERP2",78,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT),-1) Q:IBDT=""!($P(IBDT,".",1)<IBBDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",79,0)
 . S PYRIEN=0
"RTN","IBCNERP2",80,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",81,0)
 . . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",82,0)
 . . ; Payer name from Payer File (#365.12)
"RTN","IBCNERP2",83,0)
 . . S IBPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP2",84,0)
 . . I IBPYR="" Q
"RTN","IBCNERP2",85,0)
 . . ; Check payer filter
"RTN","IBCNERP2",86,0)
 . . I IBPY1'="",IBPYR'=IBPY1,IBPYR']IBPY1 Q
"RTN","IBCNERP2",87,0)
 . . I IBPY2'="",IBPY2'=IBPYR,IBPY2']IBPYR Q
"RTN","IBCNERP2",88,0)
 . . S PATIEN=0
"RTN","IBCNERP2",89,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",90,0)
 . . . ; Patient name from Patient File (#2)
"RTN","IBCNERP2",91,0)
 . . . S IBPAT=$P($G(^DPT(PATIEN,0)),U)
"RTN","IBCNERP2",92,0)
 . . . I IBPAT="" Q
"RTN","IBCNERP2",93,0)
 . . . ; Check Patient filter 
"RTN","IBCNERP2",94,0)
 . . . I IBPT1'="",IBPAT'=IBPT1,IBPAT']IBPT1 Q
"RTN","IBCNERP2",95,0)
 . . . I IBPT2'="",IBPT2'=IBPAT,IBPT2']IBPAT Q
"RTN","IBCNERP2",96,0)
 . . . S IBPTR=0
"RTN","IBCNERP2",97,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",98,0)
 . . . . S IBTOT=IBTOT+1
"RTN","IBCNERP2",99,0)
 . . . . I $D(ZTQUEUED),IBTOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",100,0)
 . . . . ; Sort fields
"RTN","IBCNERP2",101,0)
 . . . . S SORT1=$S(IBSRT=1:IBPYR,1:IBPAT)
"RTN","IBCNERP2",102,0)
 . . . . S SORT2=$S(IBSRT=1:IBPAT,1:IBPYR)
"RTN","IBCNERP2",103,0)
 . . . . ; Only check for Most Recent - Payer/Patient pair
"RTN","IBCNERP2",104,0)
 . . . . I IBTYP="M",$D(^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)) Q
"RTN","IBCNERP2",105,0)
 . . . . ; Set temp ind.
"RTN","IBCNERP2",106,0)
 . . . . I IBTYP="M" S ^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)=""
"RTN","IBCNERP2",107,0)
 . . . . ; Update ct
"RTN","IBCNERP2",108,0)
 . . . . S IBCT=IBCT+1
"RTN","IBCNERP2",109,0)
 . . . . ; Sort data - build RPTDATA array
"RTN","IBCNERP2",110,0)
 . . . . K RPTDATA
"RTN","IBCNERP2",111,0)
 . . . . D GETDATA(IBPTR,.RPTDATA)
"RTN","IBCNERP2",112,0)
 . . . . ; Merge data from RPTDATA to ^TMP
"RTN","IBCNERP2",113,0)
 . . . . ;M ^TMP($J,IBCNERTN,SORT1,SORT2,IBCT)=RPTDATA
"RTN","IBCNERP2",114,0)
 . . . . N %X,%Y
"RTN","IBCNERP2",115,0)
 . . . . S %X="RPTDATA("
"RTN","IBCNERP2",116,0)
 . . . . S %Y="^TMP($J,IBCNERTN,SORT1,SORT2,IBCT,"
"RTN","IBCNERP2",117,0)
 . . . . I $D(RPTDATA)#10=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,IBCT)=RPTDATA
"RTN","IBCNERP2",118,0)
 . . . . D %XY^%RCR K %X,%Y
"RTN","IBCNERP2",119,0)
 ;
"RTN","IBCNERP2",120,0)
 ; Purge index of duplicate Payer/Patient combos
"RTN","IBCNERP2",121,0)
 K ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",122,0)
 ;
"RTN","IBCNERP2",123,0)
 G EXIT
"RTN","IBCNERP2",124,0)
 ;
"RTN","IBCNERP2",125,0)
TRCN ; Trace # proc.
"RTN","IBCNERP2",126,0)
 S IBPTR=$P(IBTRC,U,2)
"RTN","IBCNERP2",127,0)
 I IBPTR="" G EXIT
"RTN","IBCNERP2",128,0)
 ; Sort the data - build RPTDATA array
"RTN","IBCNERP2",129,0)
 KILL RPTDATA
"RTN","IBCNERP2",130,0)
 D GETDATA(IBPTR,.RPTDATA)
"RTN","IBCNERP2",131,0)
 ; Default sort - one record
"RTN","IBCNERP2",132,0)
 ; Payer name from Payer File (#365.12)
"RTN","IBCNERP2",133,0)
 S PYRIEN=$P(RPTDATA(0),U,3)
"RTN","IBCNERP2",134,0)
 I PYRIEN="" G EXIT
"RTN","IBCNERP2",135,0)
 S SORT1=$P($G(^IBE(365.12,PYRIEN,0)),U,1)
"RTN","IBCNERP2",136,0)
 I SORT1="" G EXIT
"RTN","IBCNERP2",137,0)
 ; Patient name from Patient File (#2)
"RTN","IBCNERP2",138,0)
 S PATIEN=$P(RPTDATA(0),U,2)
"RTN","IBCNERP2",139,0)
 I PATIEN="" G EXIT
"RTN","IBCNERP2",140,0)
 S SORT2=$P($G(^DPT(PATIEN,0)),U,1)
"RTN","IBCNERP2",141,0)
 I SORT2="" G EXIT
"RTN","IBCNERP2",142,0)
 ; Merge data- RPTDATA to ^TMP
"RTN","IBCNERP2",143,0)
 ;M ^TMP($J,IBCNERTN,SORT1,SORT2,1)=RPTDATA
"RTN","IBCNERP2",144,0)
 N %X,%Y
"RTN","IBCNERP2",145,0)
 S %X="RPTDATA("
"RTN","IBCNERP2",146,0)
 S %Y="^TMP($J,IBCNERTN,SORT1,SORT2,1,"
"RTN","IBCNERP2",147,0)
 I $D(RPTDATA)#10=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,1)=RPTDATA
"RTN","IBCNERP2",148,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERP2",149,0)
 ;
"RTN","IBCNERP2",150,0)
EXIT ;
"RTN","IBCNERP2",151,0)
 Q
"RTN","IBCNERP2",152,0)
 ;
"RTN","IBCNERP2",153,0)
 ;
"RTN","IBCNERP2",154,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERP2",155,0)
 ; Init
"RTN","IBCNERP2",156,0)
 N EBCT,NOTECT,EBPTR,PC,CNCT,CNPTR,NWNTCT,IBNOTES,IBERR
"RTN","IBCNERP2",157,0)
 N %,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I,Z,ERRTEXT,II,FUTDT,TQIEN
"RTN","IBCNERP2",158,0)
 ;
"RTN","IBCNERP2",159,0)
 ; Insured Info from IIV Response #365
"RTN","IBCNERP2",160,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERP2",161,0)
 ; Trans dates to ext format
"RTN","IBCNERP2",162,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERP2",163,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERP2",164,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERP2",165,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IEN_",",1.08,"E")   ; Whose Ins
"RTN","IBCNERP2",166,0)
 S $P(RPTDATA(1),U,9)=$$GET1^DIQ(365,IEN_",",1.09,"E")   ; Pt Rel to Sub
"RTN","IBCNERP2",167,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IEN_",",1.13,"E")  ; COB
"RTN","IBCNERP2",168,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERP2",169,0)
 S $P(RPTDATA(1),U,14)=$$X12(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERP2",170,0)
 S $P(RPTDATA(1),U,15)=$$X12(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERP2",171,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERP2",172,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERP2",173,0)
 ;
"RTN","IBCNERP2",174,0)
 ; Loop thru mult Elig/Ben segs
"RTN","IBCNERP2",175,0)
 S EBCT=0
"RTN","IBCNERP2",176,0)
 F  S EBCT=$O(^IBCN(365,IEN,2,EBCT)) Q:'EBCT  D
"RTN","IBCNERP2",177,0)
 .  S RPTDATA(2,EBCT)=$G(^IBCN(365,IEN,2,EBCT,0))
"RTN","IBCNERP2",178,0)
 .  ; Elig/Ben Info (ptr to EB01 table)
"RTN","IBCNERP2",179,0)
 .  S $P(RPTDATA(2,EBCT),U,2)=$$X12(365.011,$P(RPTDATA(2,EBCT),U,2))
"RTN","IBCNERP2",180,0)
 .  ; Cov Lvl Code (ptr to EB02 table)
"RTN","IBCNERP2",181,0)
 .  S $P(RPTDATA(2,EBCT),U,3)=$$X12(365.012,$P(RPTDATA(2,EBCT),U,3))
"RTN","IBCNERP2",182,0)
 .  ; Svc Type Code (ptr to EB03 table)
"RTN","IBCNERP2",183,0)
 .  S $P(RPTDATA(2,EBCT),U,4)=$$X12(365.013,$P(RPTDATA(2,EBCT),U,4))
"RTN","IBCNERP2",184,0)
 .  ; Ins Type Code (ptr to EB04 table)
"RTN","IBCNERP2",185,0)
 .  S $P(RPTDATA(2,EBCT),U,5)=$$X12(365.014,$P(RPTDATA(2,EBCT),U,5))
"RTN","IBCNERP2",186,0)
 .  ; Plan Cov Desc - free text
"RTN","IBCNERP2",187,0)
 .  ; Time Pd Qual (ptr to EB06 table)
"RTN","IBCNERP2",188,0)
 .  S $P(RPTDATA(2,EBCT),U,7)=$$X12(365.015,$P(RPTDATA(2,EBCT),U,7))
"RTN","IBCNERP2",189,0)
 .  ; Monetary Amt
"RTN","IBCNERP2",190,0)
 .  I $P(RPTDATA(2,EBCT),U,8)'="" S $P(RPTDATA(2,EBCT),U,8)="$"_$FN(+$P(RPTDATA(2,EBCT),U,8),",",2)
"RTN","IBCNERP2",191,0)
 .  ; Percent
"RTN","IBCNERP2",192,0)
 .  I $P(RPTDATA(2,EBCT),U,9)'="" S $P(RPTDATA(2,EBCT),U,9)=$S($P(RPTDATA(2,EBCT),U,9)<1:$P(RPTDATA(2,EBCT),U,9)*100,1:$P(RPTDATA(2,EBCT),U,9))_"%"
"RTN","IBCNERP2",193,0)
 .  ; Qty Qual (ptr to EB09)
"RTN","IBCNERP2",194,0)
 .  S $P(RPTDATA(2,EBCT),U,10)=$$X12(365.016,$P(RPTDATA(2,EBCT),U,10))
"RTN","IBCNERP2",195,0)
 .  ; Qty
"RTN","IBCNERP2",196,0)
 .  I $P(RPTDATA(2,EBCT),U,11)'="" S $P(RPTDATA(2,EBCT),U,10)=$P(RPTDATA(2,EBCT),U,11)_" "_$P(RPTDATA(2,EBCT),U,10),$P(RPTDATA(2,EBCT),U,11)=""
"RTN","IBCNERP2",197,0)
 .  ; Auth/Cert Ind (Y/N/U)
"RTN","IBCNERP2",198,0)
 .  I $P(RPTDATA(2,EBCT),U,12)'="" S $P(RPTDATA(2,EBCT),U,12)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.12,"E")
"RTN","IBCNERP2",199,0)
 .  ; In-Plan Network Ind (Y/N/U)
"RTN","IBCNERP2",200,0)
 .  I $P(RPTDATA(2,EBCT),U,13)'="" S $P(RPTDATA(2,EBCT),U,13)=$$GET1^DIQ(365.02,EBCT_","_IEN_",",.13,"E")
"RTN","IBCNERP2",201,0)
 .  ; Loop thru Notes (wp) - format to 70 chars
"RTN","IBCNERP2",202,0)
 .  S (NOTECT,NWNTCT)=0
"RTN","IBCNERP2",203,0)
 .  F  S NOTECT=$O(^IBCN(365,IEN,2,EBCT,2,NOTECT)) Q:'NOTECT  D
"RTN","IBCNERP2",204,0)
 .  .  D FSTRNG^IBJU1($G(^IBCN(365,IEN,2,EBCT,2,NOTECT,0)),70,.IBNOTES)
"RTN","IBCNERP2",205,0)
 .  .  ; Loop thru text (70 chars wide)
"RTN","IBCNERP2",206,0)
 .  .  S II=0
"RTN","IBCNERP2",207,0)
 .  .  F  S II=$O(IBNOTES(II)) Q:'II  I $G(IBNOTES(II))'="" D
"RTN","IBCNERP2",208,0)
 .  .  .  S NWNTCT=NWNTCT+1
"RTN","IBCNERP2",209,0)
 .  .  .  S RPTDATA(2,EBCT,NWNTCT)=$G(IBNOTES(II))
"RTN","IBCNERP2",210,0)
 ;
"RTN","IBCNERP2",211,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERP2",212,0)
 S CNCT=0
"RTN","IBCNERP2",213,0)
 F  S CNCT=$O(^IBCN(365,IEN,3,CNCT)) Q:'CNCT  D
"RTN","IBCNERP2",214,0)
 .  S RPTDATA(3,CNCT)=$G(^IBCN(365,IEN,3,CNCT,0))
"RTN","IBCNERP2",215,0)
 .  ; Disp. blank if NOT SPECIFIED
"RTN","IBCNERP2",216,0)
 .  I $P(RPTDATA(3,CNCT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CNCT),U)=""
"RTN","IBCNERP2",217,0)
 .  ; Comm Qual #1-3
"RTN","IBCNERP2",218,0)
 .  F II=1:1:3 D
"RTN","IBCNERP2",219,0)
 .  . S CNPTR=$$X12(365.021,$P(RPTDATA(3,CNCT),U,II*2))
"RTN","IBCNERP2",220,0)
 .  . I CNPTR'="" S $P(RPTDATA(3,CNCT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CNCT),U,II*2+1),$P(RPTDATA(3,CNCT),U,II*2+1)=""
"RTN","IBCNERP2",221,0)
 ;
"RTN","IBCNERP2",222,0)
 ; Error Txt
"RTN","IBCNERP2",223,0)
 S ERRTEXT=$G(^IBCN(365,IEN,4))
"RTN","IBCNERP2",224,0)
 I ERRTEXT="" G FUTDT
"RTN","IBCNERP2",225,0)
 D FSTRNG^IBJU1(ERRTEXT,60,.IBERR)
"RTN","IBCNERP2",226,0)
 ; Loop thru text (60 chars)
"RTN","IBCNERP2",227,0)
 S II=0
"RTN","IBCNERP2",228,0)
 F  S II=$O(IBERR(II)) Q:'II  I $G(IBERR(II))'="" D
"RTN","IBCNERP2",229,0)
 .  S RPTDATA(4,II)=$G(IBERR(II))
"RTN","IBCNERP2",230,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERP2",231,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERP2",232,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERP2",233,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERP2",234,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERP2",235,0)
 ; 
"RTN","IBCNERP2",236,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERP2",237,0)
 Q
"RTN","IBCNERP2",238,0)
 ;
"RTN","IBCNERP2",239,0)
 ;
"RTN","IBCNERP2",240,0)
X12(FILE,CODE,FLD) ; Output based on File # and X12 code
"RTN","IBCNERP2",241,0)
 I $G(FILE)=""!($G(CODE)="") Q ""
"RTN","IBCNERP2",242,0)
 ; Quit w/o label if not defined in File Def.
"RTN","IBCNERP2",243,0)
 Q $$LBL(365.02,$G(FLD))_$P($G(^IBE(FILE,CODE,0)),U,2)
"RTN","IBCNERP2",244,0)
 ;
"RTN","IBCNERP2",245,0)
LBL(FILE,FLD) ; Determine label from File Def.
"RTN","IBCNERP2",246,0)
 N IBLBL
"RTN","IBCNERP2",247,0)
 ;
"RTN","IBCNERP2",248,0)
 I $G(FILE)=""!($G(FLD)="") Q ""
"RTN","IBCNERP2",249,0)
 S IBLBL=$$GET1^DID(FILE,FLD,"","TITLE")
"RTN","IBCNERP2",250,0)
 Q $S(IBLBL'="":IBLBL_": ",1:"")
"RTN","IBCNERP2",251,0)
 ;
"RTN","IBCNERP3")
0^10^B81351092
"RTN","IBCNERP3",1,0)
IBCNERP3 ;DAOU/BHS - IBCNE IIV RESPONSE REPORT PRINT ;03-JUN-2002
"RTN","IBCNERP3",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP3",4,0)
 ;
"RTN","IBCNERP3",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERP3",6,0)
 ;
"RTN","IBCNERP3",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP3",8,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERP3",9,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERP3",10,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERP3",11,0)
 ;  IBCNESPC("BEGPYR")=Starting Pyr nm OR ""
"RTN","IBCNERP3",12,0)
 ;  IBCNESPC("ENDPYR")=Ending Pyr nm OR ""
"RTN","IBCNERP3",13,0)
 ;  IBCNESPC("BEGPAT")=Starting Pat nm (Last,First) OR ""
"RTN","IBCNERP3",14,0)
 ;  IBCNESPC("ENDPAT")=Ending Pat nm (Last,First) OR ""
"RTN","IBCNERP3",15,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERP3",16,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERP3",17,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERP3",18,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERP3",19,0)
 ;  Based on structure of IIV Response File (#365)
"RTN","IBCNERP3",20,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERP3",21,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERP3",22,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERP3",23,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERP3",24,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERP3",25,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERP3",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERP3",27,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERP3",28,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERP3",29,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERP3",30,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERP3",31,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERP3",32,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,5,CT)= based on # lines of comments reqd
"RTN","IBCNERP3",33,0)
 ;   CT=1 to display future retransmission date
"RTN","IBCNERP3",34,0)
 ; Must call at appropriate tag
"RTN","IBCNERP3",35,0)
 Q
"RTN","IBCNERP3",36,0)
 ;
"RTN","IBCNERP3",37,0)
PRINT(RTN,BDT,EDT,BPY,EPY,BPT,EPT,TYP,SRT,PGC,PXT,MAX,CRT,TRC) ; Print data
"RTN","IBCNERP3",38,0)
 ; Input: RTN="IBCENRP1", BDT=start dt, EDT=end dt, BPY=beg pyr nm,
"RTN","IBCNERP3",39,0)
 ;  EPY=end pyr nm, TYP=A/M, SRT=1/2, PGC=page ct, PXT=exit flg,
"RTN","IBCNERP3",40,0)
 ;  MAX=max line ct/pg, CRT=1/0, TRC=trc#
"RTN","IBCNERP3",41,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,EBFLG,CNFLG,ERFLG,PRT1,PRT2  ;,DISPDATA
"RTN","IBCNERP3",42,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP3",43,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP3",44,0)
 S (SORT1,SORT2)=""
"RTN","IBCNERP3",45,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERP3",46,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",47,0)
 . S PRT1=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP3",48,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",49,0)
 . . S PRT2=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP3",50,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",51,0)
 . . . D HEADER
"RTN","IBCNERP3",52,0)
 . . . I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",53,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERP3",54,0)
 . . . D DATA(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERP3",55,0)
 ;
"RTN","IBCNERP3",56,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",57,0)
 S (EBFLG,CNFLG,ERFLG)=0
"RTN","IBCNERP3",58,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",59,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP3",60,0)
PRINTX ;
"RTN","IBCNERP3",61,0)
 Q
"RTN","IBCNERP3",62,0)
 ;
"RTN","IBCNERP3",63,0)
HEADER ; Print hdr info
"RTN","IBCNERP3",64,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERP3",65,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP3",66,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP3",67,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP3",68,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERP3",69,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP3",70,0)
 S PGC=PGC+1
"RTN","IBCNERP3",71,0)
 W @IOF,!,?1,"IIV Response Report" I TRC'="" W " by Trace #"
"RTN","IBCNERP3",72,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=79-$L(HDR)
"RTN","IBCNERP3",73,0)
 W ?OFFSET,HDR
"RTN","IBCNERP3",74,0)
 I TRC'="" S HDR="Trace #: "_TRC,OFFSET=80-$L(HDR)\2 W !,?OFFSET,HDR
"RTN","IBCNERP3",75,0)
 I TRC="" D
"RTN","IBCNERP3",76,0)
 . W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Patient")_" Name"
"RTN","IBCNERP3",77,0)
 . S HDR="Responses Displayed: "_$S(TYP="M":"Most Recent",1:"All")
"RTN","IBCNERP3",78,0)
 . S OFFSET=79-$L(HDR)
"RTN","IBCNERP3",79,0)
 . W ?OFFSET,HDR
"RTN","IBCNERP3",80,0)
 . S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP3",81,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",82,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",83,0)
 . ; Disp SORT1 rng
"RTN","IBCNERP3",84,0)
 . S HDR=""
"RTN","IBCNERP3",85,0)
 . I SRT=1,BPY="",EPY="" S HDR="All Payers"
"RTN","IBCNERP3",86,0)
 . I SRT=2,BPT="",EPT="" S HDR="All Patients"
"RTN","IBCNERP3",87,0)
 . I HDR="" D
"RTN","IBCNERP3",88,0)
 ..  I SRT=1 S HDR="Payers from "_$S(BPY="":"<FIRST>",1:BPY)_" to "_$S(EPY="":"<LAST>",1:EPY) Q
"RTN","IBCNERP3",89,0)
 ..  S HDR="Patients from "_$S(BPT="":"<FIRST>",1:BPT)_" to "_$S(EPT="":"<LAST>",1:EPT)
"RTN","IBCNERP3",90,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",91,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",92,0)
 . ; Disp SORT2 rng
"RTN","IBCNERP3",93,0)
 . S HDR=""
"RTN","IBCNERP3",94,0)
 . I SRT=1,BPT="",EPT="" S HDR="All Patients"
"RTN","IBCNERP3",95,0)
 . I SRT=2,BPY="",EPY="" S HDR="All Payers"
"RTN","IBCNERP3",96,0)
 . I HDR="" D
"RTN","IBCNERP3",97,0)
 .. I SRT=1 S HDR="Patients from "_$S(BPT="":"<FIRST>",1:BPT)_" to "_$S(EPT="":"<LAST>",1:EPT) Q
"RTN","IBCNERP3",98,0)
 .. S HDR="Payers from "_$S(BPY="":"<FIRST>",1:BPY)_" to "_$S(EPY="":"<LAST>",1:EPY)
"RTN","IBCNERP3",99,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",100,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",101,0)
 W !
"RTN","IBCNERP3",102,0)
 ; Build disp
"RTN","IBCNERP3",103,0)
 I SORT1'="",SORT2'="" D
"RTN","IBCNERP3",104,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"  Payer: ",1:"Patient: "),9)_$E(PRT1,1,69)
"RTN","IBCNERP3",105,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"Patient: ",1:"  Payer: "),9)_$E(PRT2,1,69)
"RTN","IBCNERP3",106,0)
 . W !
"RTN","IBCNERP3",107,0)
HEADERX ;
"RTN","IBCNERP3",108,0)
 Q
"RTN","IBCNERP3",109,0)
 ;
"RTN","IBCNERP3",110,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERP3",111,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERP3",112,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP3",113,0)
 S (EBFLG,CNFLG,ERFLG,NWPG)=0
"RTN","IBCNERP3",114,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP3",115,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",116,0)
 . I DISPDATA(LNCT)="Eligibility/Benefit Information:"!(DISPDATA(LNCT)="Contact Information:")!(DISPDATA(LNCT)="Error Information:"),$Y+3>MAX S (EBFLG,CNFLG,ERFLG)=0 D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",117,0)
 . I EBFLG,DISPDATA(LNCT)="",($G(DISPDATA(LNCT+1))="Contact Information:")!($G(DISPDATA(LNCT+1))="Error Information") S EBFLG=0
"RTN","IBCNERP3",118,0)
 . I CNFLG,DISPDATA(LNCT)="",$G(DISPDATA(LNCT+1))="Error Information:" S CNFLG=0
"RTN","IBCNERP3",119,0)
 . I NWPG,EBFLG W !,?1,"Eligibility/Benefit Information: (cont'd)",!
"RTN","IBCNERP3",120,0)
 . I NWPG,CNFLG W !,?1,"Contact Information: (cont'd)",!
"RTN","IBCNERP3",121,0)
 . I NWPG,ERFLG W !,?1,"Error Information: (cont'd)",!
"RTN","IBCNERP3",122,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERP3",123,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP3",124,0)
 . I DISPDATA(LNCT)["Eligibility/Benefit Information:" S EBFLG=1,(CNFLG,ERFLG)=0
"RTN","IBCNERP3",125,0)
 . I DISPDATA(LNCT)["Contact Information:" S (EBFLG,ERFLG)=0,CNFLG=1
"RTN","IBCNERP3",126,0)
 . I DISPDATA(LNCT)["Error Information:" S (EBFLG,CNFLG)=0,ERFLG=1
"RTN","IBCNERP3",127,0)
 . Q
"RTN","IBCNERP3",128,0)
 S (EBFLG,CNFLG,ERFLG)=0
"RTN","IBCNERP3",129,0)
LINEX ; 
"RTN","IBCNERP3",130,0)
 Q
"RTN","IBCNERP3",131,0)
 ;
"RTN","IBCNERP3",132,0)
DATA(DISPDATA) ;  Build disp lines
"RTN","IBCNERP3",133,0)
 N LCT,EBCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA
"RTN","IBCNERP3",134,0)
 ; Merge into local array
"RTN","IBCNERP3",135,0)
 ;M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERP3",136,0)
 N %X,%Y
"RTN","IBCNERP3",137,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,CNT,"
"RTN","IBCNERP3",138,0)
 S %Y="RPTDATA("
"RTN","IBCNERP3",139,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,CNT))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERP3",140,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERP3",141,0)
 ; Build
"RTN","IBCNERP3",142,0)
 S LCT=1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.01),17,"R")_$P(RPTDATA(1),U,1)
"RTN","IBCNERP3",143,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.05),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,5),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),22,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERP3",144,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERP3",145,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.06),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,6),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.07),22,"R")_$P(RPTDATA(1),U,7)
"RTN","IBCNERP3",146,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.09),22,"R")_$P(RPTDATA(1),U,9)
"RTN","IBCNERP3",147,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERP3",148,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERP3",149,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERP3",150,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERP3",151,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERP3",152,0)
 S LCT=LCT+1
"RTN","IBCNERP3",153,0)
 ; Elig/Ben
"RTN","IBCNERP3",154,0)
 S EBCT=+$O(RPTDATA(2,""),-1) I 'EBCT G CONT
"RTN","IBCNERP3",155,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Eligibility/Benefit Information:",LCT=LCT+1
"RTN","IBCNERP3",156,0)
 ; Build EB w/Notes
"RTN","IBCNERP3",157,0)
 F CT=1:1:EBCT D
"RTN","IBCNERP3",158,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERP3",159,0)
 . S SEGCT=$L(RPTDATA(2,CT),U)
"RTN","IBCNERP3",160,0)
 . F CT2=2:1:SEGCT S ITEM=$P(RPTDATA(2,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERP3",161,0)
 . . S ITEM=$S(CT2'=9:$$LBL^IBCNERP2(365.02,(.01*CT2)),1:"")_ITEM
"RTN","IBCNERP3",162,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERP3",163,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERP3",164,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERP3",165,0)
 . ; Notes
"RTN","IBCNERP3",166,0)
 . S NTCT=$O(RPTDATA(2,CT,""),-1)
"RTN","IBCNERP3",167,0)
 . F CT2=1:1:NTCT D
"RTN","IBCNERP3",168,0)
 . . S LCT=LCT+1,DISPDATA(LCT)="  "_RPTDATA(2,CT,CT2)
"RTN","IBCNERP3",169,0)
 . S LCT=LCT+1
"RTN","IBCNERP3",170,0)
 ; Contacts 
"RTN","IBCNERP3",171,0)
CONT S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERP3",172,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Contact Information:",LCT=LCT+1
"RTN","IBCNERP3",173,0)
 ; Build
"RTN","IBCNERP3",174,0)
 F CT=1:1:CNCT D
"RTN","IBCNERP3",175,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERP3",176,0)
 . S SEGCT=$L(RPTDATA(3,CT),U)
"RTN","IBCNERP3",177,0)
 . F CT2=1:1:SEGCT S ITEM=$P(RPTDATA(3,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERP3",178,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERP3",179,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERP3",180,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERP3",181,0)
 . S LCT=LCT+1
"RTN","IBCNERP3",182,0)
 ; Err Info
"RTN","IBCNERP3",183,0)
ERR I $P(RPTDATA(1),U,14)="",$P(RPTDATA(1),U,15)="",'$O(RPTDATA(4,""),-1) G DATAX
"RTN","IBCNERP3",184,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERP3",185,0)
 S DISPDATA(LCT)="Error Information:",LCT=LCT+1
"RTN","IBCNERP3",186,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERP3",187,0)
 I $P(RPTDATA(1),U,14)'="" S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.14),17,"R")_$E($P(RPTDATA(1),U,14),1,61),LCT=LCT+1
"RTN","IBCNERP3",188,0)
 I $P(RPTDATA(1),U,15)'="" S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.15),17,"R")_$E($P(RPTDATA(1),U,15),1,61),LCT=LCT+1
"RTN","IBCNERP3",189,0)
 ; Disp Err Txt
"RTN","IBCNERP3",190,0)
 F CT=1:1:+$O(RPTDATA(4,""),-1) D
"RTN","IBCNERP3",191,0)
 . I CT=1 S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,4.01),17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1 Q
"RTN","IBCNERP3",192,0)
 . S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1
"RTN","IBCNERP3",193,0)
DATAX ;
"RTN","IBCNERP3",194,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERP3",195,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERP3",196,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERP3",197,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERP3",198,0)
 ;
"RTN","IBCNERP3",199,0)
 Q
"RTN","IBCNERP4")
0^11^B13766575
"RTN","IBCNERP4",1,0)
IBCNERP4 ;DAOU/BHS - IBCNE USER IF IIV PAYER REPORT ;03-JUN-2002
"RTN","IBCNERP4",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP4",4,0)
 ;
"RTN","IBCNERP4",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP4",6,0)
 ;
"RTN","IBCNERP4",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP4",8,0)
 ; Other relevant variables:
"RTN","IBCNERP4",9,0)
 ;   IBCNERTN = "IBCNERP4" (current routine name for queueing the 
"RTN","IBCNERP4",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP4",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERP4",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERP4",13,0)
 ;   IBCNESPC("BEGPYR") = starting payer name for report, if = "", then
"RTN","IBCNERP4",14,0)
 ;                        all payers should be included.
"RTN","IBCNERP4",15,0)
 ;   IBCNESPC("ENDPYR") = ending payer name for report, if = "", then
"RTN","IBCNERP4",16,0)
 ;                        all payers should be included.  If starting
"RTN","IBCNERP4",17,0)
 ;                        payer is null, then ending payer should be
"RTN","IBCNERP4",18,0)
 ;                        null, too.
"RTN","IBCNERP4",19,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inqs (PAYER)
"RTN","IBCNERP4",20,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO  Include Rejection Detail in
"RTN","IBCNERP4",21,0)
 ;                     report output - rejections broken down by code
"RTN","IBCNERP4",22,0)
 ;
"RTN","IBCNERP4",23,0)
 ; Enter only from EN tag
"RTN","IBCNERP4",24,0)
 QUIT
"RTN","IBCNERP4",25,0)
 ;
"RTN","IBCNERP4",26,0)
 ; Entry point
"RTN","IBCNERP4",27,0)
EN ;
"RTN","IBCNERP4",28,0)
 ; Initialize variables
"RTN","IBCNERP4",29,0)
 NEW STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP4",30,0)
 ;
"RTN","IBCNERP4",31,0)
 S STOP=0
"RTN","IBCNERP4",32,0)
 S IBCNERTN="IBCNERP4"
"RTN","IBCNERP4",33,0)
 W @IOF
"RTN","IBCNERP4",34,0)
 W !,"IIV Payer Report",!
"RTN","IBCNERP4",35,0)
 W !,"Insurance identification and verification inquiries are created daily."
"RTN","IBCNERP4",36,0)
 W !,"Select a date range in which inquiries were created by the eIIV extracts."
"RTN","IBCNERP4",37,0)
 ;
"RTN","IBCNERP4",38,0)
 ; Prompts for Payer Report
"RTN","IBCNERP4",39,0)
 ; Date Range parameters
"RTN","IBCNERP4",40,0)
P10 D DTRANGE I STOP G EXIT
"RTN","IBCNERP4",41,0)
 ; Payer Range parameters
"RTN","IBCNERP4",42,0)
P20 D PYRANGE^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERP4",43,0)
 ; Include Rejection Detail in Payer report
"RTN","IBCNERP4",44,0)
P30 D REJDTL I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERP4",45,0)
 ; Sort by parameter - Payer or Total Inquiries
"RTN","IBCNERP4",46,0)
P40 D SORT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERP4",47,0)
 ; Select the output device
"RTN","IBCNERP4",48,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G P40
"RTN","IBCNERP4",49,0)
 ;
"RTN","IBCNERP4",50,0)
EXIT ; Quit this routine
"RTN","IBCNERP4",51,0)
 QUIT
"RTN","IBCNERP4",52,0)
 ;
"RTN","IBCNERP4",53,0)
 ;
"RTN","IBCNERP4",54,0)
SORT ; Prompt to allow users to sort the report
"RTN","IBCNERP4",55,0)
 ;  by Payer(default) OR Total Inquiries, then Payer
"RTN","IBCNERP4",56,0)
 ; Initialize variables
"RTN","IBCNERP4",57,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",58,0)
 ;
"RTN","IBCNERP4",59,0)
 S DIR(0)="S^1:Payer Name;2:Total Inquiries"
"RTN","IBCNERP4",60,0)
 S DIR("A")=" Select the primary sort field"
"RTN","IBCNERP4",61,0)
 S DIR("B")=1
"RTN","IBCNERP4",62,0)
 S DIR("?",1)="  1 - Payer Name is the only sort. (Default)"
"RTN","IBCNERP4",63,0)
 S DIR("?",2)="  2 - Total Inquiries is the primary sort, Payer Name is"
"RTN","IBCNERP4",64,0)
 S DIR("?")="      the secondary sort."
"RTN","IBCNERP4",65,0)
 D ^DIR K DIR
"RTN","IBCNERP4",66,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP4",67,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP4",68,0)
 ;
"RTN","IBCNERP4",69,0)
SORTX ; SORT exit point
"RTN","IBCNERP4",70,0)
 QUIT
"RTN","IBCNERP4",71,0)
 ;
"RTN","IBCNERP4",72,0)
 ;
"RTN","IBCNERP4",73,0)
REJDTL ; Prompt to allow users to include the Rejection Detail in the report
"RTN","IBCNERP4",74,0)
 ; Initialize variables
"RTN","IBCNERP4",75,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",76,0)
 ;
"RTN","IBCNERP4",77,0)
 S DIR(0)="Y"
"RTN","IBCNERP4",78,0)
 S DIR("A")="      Include Rejection Detail"
"RTN","IBCNERP4",79,0)
 S DIR("B")="NO"
"RTN","IBCNERP4",80,0)
 S DIR("?",1)="  N - No, exclude Rejection Detail totals from report. (Default)"
"RTN","IBCNERP4",81,0)
 S DIR("?")="  Y - Yes, include Rejection Detail totals in report."
"RTN","IBCNERP4",82,0)
 D ^DIR K DIR
"RTN","IBCNERP4",83,0)
 I $D(DIRUT) S STOP=1 G REJDTLX
"RTN","IBCNERP4",84,0)
 S IBCNESPC("DTL")=Y
"RTN","IBCNERP4",85,0)
 ;
"RTN","IBCNERP4",86,0)
REJDTLX ; REJDTL exit point
"RTN","IBCNERP4",87,0)
 QUIT
"RTN","IBCNERP4",88,0)
 ;
"RTN","IBCNERP4",89,0)
 ;
"RTN","IBCNERP4",90,0)
DTRANGE ; Determine the start and end dates for the date range parameter
"RTN","IBCNERP4",91,0)
 ; Initialize variables
"RTN","IBCNERP4",92,0)
 NEW X,Y,DIRUT
"RTN","IBCNERP4",93,0)
 ;
"RTN","IBCNERP4",94,0)
 W !
"RTN","IBCNERP4",95,0)
 ;
"RTN","IBCNERP4",96,0)
 S DIR(0)="D^::EX"
"RTN","IBCNERP4",97,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP4",98,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",99,0)
 S DIR("?")="   would have been created."
"RTN","IBCNERP4",100,0)
 D ^DIR K DIR
"RTN","IBCNERP4",101,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",102,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP4",103,0)
 ; End date
"RTN","IBCNERP4",104,0)
DTRANG1 S DIR(0)="D^::EX"
"RTN","IBCNERP4",105,0)
 S DIR("A")="  End DATE"
"RTN","IBCNERP4",106,0)
 S DIR("?",1)="   Please enter a valid date for which an IIV Inquiry"
"RTN","IBCNERP4",107,0)
 S DIR("?",2)="   would have been created.  This date must not precede"
"RTN","IBCNERP4",108,0)
 S DIR("?")="   the Start Date."
"RTN","IBCNERP4",109,0)
 D ^DIR K DIR
"RTN","IBCNERP4",110,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",111,0)
 I Y<IBCNESPC("BEGDT") D  G DTRANG1
"RTN","IBCNERP4",112,0)
 . W !,"     End Date must not precede the Start Date."
"RTN","IBCNERP4",113,0)
 . W !,"     Please reenter."
"RTN","IBCNERP4",114,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP4",115,0)
 ;
"RTN","IBCNERP4",116,0)
DTRANGX ; DTRANGE exit point
"RTN","IBCNERP4",117,0)
 QUIT
"RTN","IBCNERP5")
0^12^B63369304
"RTN","IBCNERP5",1,0)
IBCNERP5 ;DAOU/BHS - IBCNE IIV PAYER REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP5",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP5",4,0)
 ;
"RTN","IBCNERP5",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP5",6,0)
 ;
"RTN","IBCNERP5",7,0)
 ; Input variables from IBCNERP4:
"RTN","IBCNERP5",8,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",9,0)
 ;   IBCNESPC("BEGDT") = Start Date for date range
"RTN","IBCNERP5",10,0)
 ;   IBCNESPC("ENDDT") = End Date for date range
"RTN","IBCNERP5",11,0)
 ;   IBCNESPC("BEGPYR") = Starting Payer Name for report, if = "", then
"RTN","IBCNERP5",12,0)
 ;                        the first Payer name should be included.
"RTN","IBCNERP5",13,0)
 ;   IBCNESPC("ENDPYR") = Ending Payer Name for report, if = "", then
"RTN","IBCNERP5",14,0)
 ;                        the last Payer name should be included.
"RTN","IBCNERP5",15,0)
 ;   IBCNESPC("SORT") = 1 - Payer OR 2 - Total Inquiries
"RTN","IBCNERP5",16,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO - include Rejection Detail?
"RTN","IBCNERP5",17,0)
 ; Output variables passed to IBCNERP6:
"RTN","IBCNERP5",18,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP5",19,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP5",20,0)
 ;                                       RetryTransCt^Non-ErrorRespCt^
"RTN","IBCNERP5",21,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP5",22,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP5",23,0)
 ;                                       eIIVDeactivatedDt
"RTN","IBCNERP5",24,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",25,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP5",26,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP5",27,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP5",28,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=RespCount
"RTN","IBCNERP5",29,0)
 ;        (see above)
"RTN","IBCNERP5",30,0)
 ;        ERRCD = Error Condition code (ptr to 365.018) or Error Text
"RTN","IBCNERP5",31,0)
 ;                from the Eligibility Communicator (4.01)
"RTN","IBCNERP5",32,0)
 ;
"RTN","IBCNERP5",33,0)
 ; Must call at EN tag
"RTN","IBCNERP5",34,0)
 Q
"RTN","IBCNERP5",35,0)
 ;
"RTN","IBCNERP5",36,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERP5",37,0)
 ;
"RTN","IBCNERP5",38,0)
 ; Initialize variables
"RTN","IBCNERP5",39,0)
 NEW IBCNEDT,IBCNEDT1,IBCNEDT2,IBCNEPY1,IBCNEPY2,IBCNEPYR,IBCNEPTR
"RTN","IBCNERP5",40,0)
 NEW IBCNETOT,IBCNESRT,IBCNEDTL,RPTDATA,PYRIEN,INQS,IEN
"RTN","IBCNERP5",41,0)
 NEW IBPNM,IBPIEN,ERR,PC,PYR
"RTN","IBCNERP5",42,0)
 ;
"RTN","IBCNERP5",43,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP5",44,0)
 ;
"RTN","IBCNERP5",45,0)
 ; Total responses selected
"RTN","IBCNERP5",46,0)
 S IBCNETOT=0
"RTN","IBCNERP5",47,0)
 ;
"RTN","IBCNERP5",48,0)
 ; Kill scratch globals
"RTN","IBCNERP5",49,0)
 KILL ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",50,0)
 ;
"RTN","IBCNERP5",51,0)
 ; Initialize looping variables
"RTN","IBCNERP5",52,0)
 S IBCNEDT2=IBCNESPC("ENDDT")
"RTN","IBCNERP5",53,0)
 S IBCNEDT1=IBCNESPC("BEGDT")
"RTN","IBCNERP5",54,0)
 S IBCNEPY1=$G(IBCNESPC("BEGPYR"))
"RTN","IBCNERP5",55,0)
 S IBCNEPY2=$G(IBCNESPC("ENDPYR"))
"RTN","IBCNERP5",56,0)
 S IBCNESRT=IBCNESPC("SORT")
"RTN","IBCNERP5",57,0)
 S IBCNEDTL=IBCNESPC("DTL")
"RTN","IBCNERP5",58,0)
 ;
"RTN","IBCNERP5",59,0)
 ; Loop through the IIV Transmission Queue File (#365.1) 
"RTN","IBCNERP5",60,0)
 ;  by Date/Time Created Cross-Reference
"RTN","IBCNERP5",61,0)
 S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT1),-1)
"RTN","IBCNERP5",62,0)
 F  S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",63,0)
 . S IBCNEPTR=0
"RTN","IBCNERP5",64,0)
 . F  S IBCNEPTR=$O(^IBCN(365.1,"AE",IBCNEDT,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",65,0)
 . . ; Update selected count
"RTN","IBCNERP5",66,0)
 . . S IBCNETOT=IBCNETOT+1
"RTN","IBCNERP5",67,0)
 . . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP5",68,0)
 . . ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP5",69,0)
 . . S PYRIEN=$P($G(^IBCN(365.1,IBCNEPTR,0)),U,3)
"RTN","IBCNERP5",70,0)
 . . I 'PYRIEN Q
"RTN","IBCNERP5",71,0)
 . . S IBCNEPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP5",72,0)
 . . I IBCNEPYR="" Q
"RTN","IBCNERP5",73,0)
 . . ; If there is a Payer filter, check against the range
"RTN","IBCNERP5",74,0)
 . . I IBCNEPY1'="",IBCNEPYR'=IBCNEPY1,IBCNEPYR']IBCNEPY1 Q
"RTN","IBCNERP5",75,0)
 . . I IBCNEPY2'="",IBCNEPY2'=IBCNEPYR,IBCNEPY2']IBCNEPYR Q
"RTN","IBCNERP5",76,0)
 . . ; Now get the data for the report - build RPTDATA
"RTN","IBCNERP5",77,0)
 . . KILL RPTDATA
"RTN","IBCNERP5",78,0)
 . . D GETDATA(IBCNEPTR,.RPTDATA,IBCNEDTL,IBCNEPYR,PYRIEN,IBCNEPY1,IBCNEPY2)
"RTN","IBCNERP5",79,0)
 . . ; Loop through results by Payer Name, Payer IEN
"RTN","IBCNERP5",80,0)
 . . S IBPNM=""
"RTN","IBCNERP5",81,0)
 . . F  S IBPNM=$O(RPTDATA(IBPNM)) Q:IBPNM=""  D
"RTN","IBCNERP5",82,0)
 . . . S IBPIEN=0
"RTN","IBCNERP5",83,0)
 . . . F  S IBPIEN=$O(RPTDATA(IBPNM,IBPIEN)) Q:'IBPIEN  D
"RTN","IBCNERP5",84,0)
 . . . . ; Store totals in global
"RTN","IBCNERP5",85,0)
 . . . . F PC=1:1:10 S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,PC)=$P($G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*")),U,PC)+$P(RPTDATA(IBPNM,IBPIEN),U,PC)
"RTN","IBCNERP5",86,0)
 . . . . ; Store deactivation date/time
"RTN","IBCNERP5",87,0)
 . . . . S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,11)=$P(RPTDATA(IBPNM,IBPIEN),U,11)
"RTN","IBCNERP5",88,0)
 . . . . I 'IBCNEDTL Q
"RTN","IBCNERP5",89,0)
 . . . . ; Store rejection detail
"RTN","IBCNERP5",90,0)
 . . . . S ERR=""
"RTN","IBCNERP5",91,0)
 . . . . F  S ERR=$O(RPTDATA(IBPNM,IBPIEN,ERR)) Q:ERR=""  D
"RTN","IBCNERP5",92,0)
 . . . . .  S ^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR)=$G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR))+$G(RPTDATA(IBPNM,IBPIEN,ERR))
"RTN","IBCNERP5",93,0)
 . . Q
"RTN","IBCNERP5",94,0)
 . Q
"RTN","IBCNERP5",95,0)
 ;
"RTN","IBCNERP5",96,0)
 I $G(ZTSTOP)!(IBCNESRT=1) G EXIT
"RTN","IBCNERP5",97,0)
 ;
"RTN","IBCNERP5",98,0)
 ; Resort if sorted by Total Inquiries
"RTN","IBCNERP5",99,0)
 ; M ^TMP($J,IBCNERTN_"X")=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",100,0)
 N %X,%Y,SUB2
"RTN","IBCNERP5",101,0)
 S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",102,0)
 S %X="^TMP($J,IBCNERTN,"
"RTN","IBCNERP5",103,0)
 S %Y="^TMP($J,SUB2,"
"RTN","IBCNERP5",104,0)
 I $D(^TMP($J,IBCNERTN))#10=1 S ^TMP($J,SUB2)=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",105,0)
 D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",106,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP5",107,0)
 S PYR=""
"RTN","IBCNERP5",108,0)
 F  S PYR=$O(^TMP($J,IBCNERTN_"X",PYR)) Q:PYR=""  D
"RTN","IBCNERP5",109,0)
 .  S IEN=0
"RTN","IBCNERP5",110,0)
 .  F  S IEN=$O(^TMP($J,IBCNERTN_"X",PYR,IEN)) Q:'IEN  D
"RTN","IBCNERP5",111,0)
 .  .  S INQS=-$G(^TMP($J,IBCNERTN_"X",PYR,IEN,"*"))
"RTN","IBCNERP5",112,0)
 .  .  ;M ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,IBCNERTN_"X",PYR,IEN,"*")
"RTN","IBCNERP5",113,0)
 .  .  N %X,%Y,SUB2
"RTN","IBCNERP5",114,0)
 .  .  S SUB2=IBCNERTN_"X"
"RTN","IBCNERP5",115,0)
 .  .  S %X="^TMP($J,SUB2,PYR,IEN,""*"","
"RTN","IBCNERP5",116,0)
 .  .  S %Y="^TMP($J,IBCNERTN,INQS,PYR,IEN,"
"RTN","IBCNERP5",117,0)
 .  .  I $D(^TMP($J,SUB2,PYR,IEN,"*"))#10=1 S ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,SUB2,PYR,IEN,"*")
"RTN","IBCNERP5",118,0)
 .  .  D %XY^%RCR K %X,%Y,SUB2
"RTN","IBCNERP5",119,0)
 .  .  QUIT
"RTN","IBCNERP5",120,0)
 .  QUIT
"RTN","IBCNERP5",121,0)
 ; KILL temporary report global - used to resort
"RTN","IBCNERP5",122,0)
 KILL ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",123,0)
 ;
"RTN","IBCNERP5",124,0)
EXIT ; EN Exit point
"RTN","IBCNERP5",125,0)
 Q
"RTN","IBCNERP5",126,0)
 ;
"RTN","IBCNERP5",127,0)
 ;
"RTN","IBCNERP5",128,0)
GETDATA(IEN,RPTDATA,DTL,PYNM,PYIEN,BPYR,EPYR) ; Retrieve data for this inquiry and response(s)
"RTN","IBCNERP5",129,0)
 ; Output: 
"RTN","IBCNERP5",130,0)
 ;  RPTDATA(PayerName,PayerIEN) = Created(1)^Cancelled(0/1)^Queued(0/1)^
"RTN","IBCNERP5",131,0)
 ;   #1stTrans^#Retries^#Non-ErrorResponses^#ErrorResponses^
"RTN","IBCNERP5",132,0)
 ;   #ofDaysforResponses^#Timeouts^#Pending^DeactivationDTM
"RTN","IBCNERP5",133,0)
 ;  RPTDATA(PayerName,PayerIEN,ErrCond OR ErrText) = #ErrorResps subtotal
"RTN","IBCNERP5",134,0)
 ; Initialize variables
"RTN","IBCNERP5",135,0)
 NEW HLIEN,HLID,RIEN,RDATA0,RPYIEN,RPYNM,RDATA1,ERRTXT,X1,X2,FIRST,APIEN
"RTN","IBCNERP5",136,0)
 ;
"RTN","IBCNERP5",137,0)
 S RPTDATA(PYNM,PYIEN)=1
"RTN","IBCNERP5",138,0)
 ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",139,0)
 S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYIEN)
"RTN","IBCNERP5",140,0)
 I APIEN,$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(PYNM,PYIEN),U,11)=$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",141,0)
 ; Logic by Transmission Status
"RTN","IBCNERP5",142,0)
 ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP5",143,0)
 I $P($G(^IBCN(365.1,IEN,0)),U,4)=7 S $P(RPTDATA(PYNM,PYIEN),U,2)=1 Q
"RTN","IBCNERP5",144,0)
 ;  Queued - no HL7 messages (# Transmissions = 0) - no multiples exist
"RTN","IBCNERP5",145,0)
 I '$P($G(^IBCN(365.1,IEN,2,0)),U,3) S $P(RPTDATA(PYNM,PYIEN),U,3)=1 Q
"RTN","IBCNERP5",146,0)
 ;  Sent processing - HL7 messages associated (# Transmissions > 0)
"RTN","IBCNERP5",147,0)
 S HLIEN=0,FIRST=1
"RTN","IBCNERP5",148,0)
 F  S HLIEN=$O(^IBCN(365.1,IEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNERP5",149,0)
 .  I 'FIRST S $P(RPTDATA(PYNM,PYIEN),U,5)=$P(RPTDATA(PYNM,PYIEN),U,5)+1
"RTN","IBCNERP5",150,0)
 .  I FIRST S $P(RPTDATA(PYNM,PYIEN),U,4)=$P(RPTDATA(PYNM,PYIEN),U,4)+1,FIRST=0
"RTN","IBCNERP5",151,0)
 .  ; Process response based on HL7 Message ID
"RTN","IBCNERP5",152,0)
 .  S HLID=$P($G(^IBCN(365.1,IEN,2,HLIEN,0)),U,2) I HLID="" Q
"RTN","IBCNERP5",153,0)
 .  ; Lookup responses by HL7 Message ID
"RTN","IBCNERP5",154,0)
 .  S RIEN=0
"RTN","IBCNERP5",155,0)
 .  F  S RIEN=$O(^IBCN(365,"B",HLID,RIEN)) Q:'RIEN  D
"RTN","IBCNERP5",156,0)
 .  .  S RDATA0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNERP5",157,0)
 .  .  S RPYIEN=$P(RDATA0,U,3) I RPYIEN="" Q
"RTN","IBCNERP5",158,0)
 .  .  S RPYNM=$P($G(^IBE(365.12,RPYIEN,0)),U,1) I RPYNM="" Q
"RTN","IBCNERP5",159,0)
 .  .  ; Apply payer filter here, too!
"RTN","IBCNERP5",160,0)
 .  .  ; If there is a Payer filter, check against the range
"RTN","IBCNERP5",161,0)
 .  .  I BPYR'="",RPYNM'=BPYR,RPYNM']BPYR Q
"RTN","IBCNERP5",162,0)
 .  .  I EPYR'="",EPYR'=RPYNM,EPYR']RPYNM Q
"RTN","IBCNERP5",163,0)
 .  .  ; Determine Deactivation DTM for eIIV application
"RTN","IBCNERP5",164,0)
 .  .  S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYIEN)
"RTN","IBCNERP5",165,0)
 .  .  I APIEN,$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(RPYNM,RPYIEN),U,11)=$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",166,0)
 .  .  S RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNERP5",167,0)
 .  .  S ERRTXT=$G(^IBCN(365,RIEN,4))
"RTN","IBCNERP5",168,0)
 .  .  ; Transmitted (Pending)
"RTN","IBCNERP5",169,0)
 .  .  I $P(RDATA0,U,6)=2 D  Q
"RTN","IBCNERP5",170,0)
 .  .  . ; Increment for response pending 
"RTN","IBCNERP5",171,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,10)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,10)+1
"RTN","IBCNERP5",172,0)
 .  .  ; Timeout (Communication Failure)
"RTN","IBCNERP5",173,0)
 .  .  I $P(RDATA0,U,6)=5 D  Q
"RTN","IBCNERP5",174,0)
 .  .  . ; Increment for response timeout 
"RTN","IBCNERP5",175,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,9)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,9)+1
"RTN","IBCNERP5",176,0)
 .  .  ; Response Received - gather additional information
"RTN","IBCNERP5",177,0)
 .  .  I $P(RDATA0,U,6)=3 D  Q
"RTN","IBCNERP5",178,0)
 .  .  . ; Determine response time (in days) as difference between 
"RTN","IBCNERP5",179,0)
 .  .  . ;  IIV Response File - Date/Time Response Received and
"RTN","IBCNERP5",180,0)
 .  .  . ;                      Date/Time Response Created (based on HL7)
"RTN","IBCNERP5",181,0)
 .  .  . S X1=$P(RDATA0,U,8)
"RTN","IBCNERP5",182,0)
 .  .  . S X2=$P(RDATA0,U,7)
"RTN","IBCNERP5",183,0)
 .  .  . ; Determine date difference in days
"RTN","IBCNERP5",184,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,8)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,8)+$$FMDIFF^XLFDT(X2,X1,1)
"RTN","IBCNERP5",185,0)
 .  .  . ; Increment for non-error response and quit
"RTN","IBCNERP5",186,0)
 .  .  . I $P(RDATA1,U,14)="",ERRTXT="" S $P(RPTDATA(RPYNM,RPYIEN),U,6)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,6)+1 Q
"RTN","IBCNERP5",187,0)
 .  .  . ; Rejection is defined as having a value in the Error Condition field or Error Text field
"RTN","IBCNERP5",188,0)
 .  .  . ; Increment for error response
"RTN","IBCNERP5",189,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,7)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,7)+1
"RTN","IBCNERP5",190,0)
 .  .  . ; Store rejection detail only if user requested it
"RTN","IBCNERP5",191,0)
 .  .  . I 'DTL Q
"RTN","IBCNERP5",192,0)
 .  .  . ; Store rejection detail
"RTN","IBCNERP5",193,0)
 .  .  . I $P(RDATA1,U,14) S RPTDATA(RPYNM,RPYIEN,$P(RDATA1,U,14))=$G(RPTDATA(RPYNM,RPYIEN,$P(RDATA1,U,14)))+1
"RTN","IBCNERP5",194,0)
 .  .  . I '$P(RDATA1,U,14),ERRTXT'="" S RPTDATA(RPYNM,RPYIEN,0_U_ERRTXT)=$G(RPTDATA(RPYNM,RPYIEN,ERRTXT))+1
"RTN","IBCNERP5",195,0)
 ;
"RTN","IBCNERP5",196,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERP5",197,0)
 Q
"RTN","IBCNERP5",198,0)
 ;
"RTN","IBCNERP5",199,0)
 ;
"RTN","IBCNERP6")
0^13^B78648097
"RTN","IBCNERP6",1,0)
IBCNERP6 ;DAOU/BHS - IIV PAYER REPORT PRINT ;05-JUN-2002
"RTN","IBCNERP6",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP6",4,0)
 ;
"RTN","IBCNERP6",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP6",6,0)
 ;
"RTN","IBCNERP6",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP6",8,0)
 ;
"RTN","IBCNERP6",9,0)
 ; Input variables from IBCNERP4 and IBCNERP5:
"RTN","IBCNERP6",10,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",11,0)
 ;   IBCNESPC("BEGDT") = Start Date for dt range
"RTN","IBCNERP6",12,0)
 ;   IBCNESPC("ENDDT") = End Date for dt range
"RTN","IBCNERP6",13,0)
 ;   IBCNESPC("BEGPYR") = Starting Payer name for report, if = "", then
"RTN","IBCNERP6",14,0)
 ;    first Payer was included.
"RTN","IBCNERP6",15,0)
 ;   IBCNESPC("ENDPYR") = Ending Payer name for report, if = "", then
"RTN","IBCNERP6",16,0)
 ;    last Payer was included.
"RTN","IBCNERP6",17,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inquiries
"RTN","IBCNERP6",18,0)
 ;   IBCNESPC("DTL")= 1 - YES OR 0 - NO - display Rejection detail
"RTN","IBCNERP6",19,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP6",20,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP6",21,0)
 ;                                       RetryCount^Non-ErrorRespCount^
"RTN","IBCNERP6",22,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP6",23,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP6",24,0)
 ;                                       DeactivationDTM
"RTN","IBCNERP6",25,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",26,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP6",27,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP6",28,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP6",29,0)
 ;                                       
"RTN","IBCNERP6",30,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=InquiryCount
"RTN","IBCNERP6",31,0)
 ;        (see above)
"RTN","IBCNERP6",32,0)
 ;        ERRCD = Error Condition code (ptr to 365.018)
"RTN","IBCNERP6",33,0)
 ;
"RTN","IBCNERP6",34,0)
 ; Must call at appropriate tag
"RTN","IBCNERP6",35,0)
 Q
"RTN","IBCNERP6",36,0)
 ;
"RTN","IBCNERP6",37,0)
 ;
"RTN","IBCNERP6",38,0)
PRINT(RTN,BDT,EDT,BPY,EPY,RDTL,SRT,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP6",39,0)
 ; Input params: RNT = "IBCNERP4" - routine, BDT = starting dt,
"RTN","IBCNERP6",40,0)
 ;  EDT = ending dt, BPY = starting payer name, EPY = ending payer name,
"RTN","IBCNERP6",41,0)
 ;  RDTL = 0/1, SRT = 0/1, PGC = page ct, PXT = exit flg, MAX = max line
"RTN","IBCNERP6",42,0)
 ;  ct/page, CRT = 0/1
"RTN","IBCNERP6",43,0)
 ;
"RTN","IBCNERP6",44,0)
 ; Init vars
"RTN","IBCNERP6",45,0)
 N EORMSG,NONEMSG,COUNT,TOTDASHS,DISPDATA,SORT1,SORT2,SORT3,CT,PRT1,PRT2
"RTN","IBCNERP6",46,0)
 ;
"RTN","IBCNERP6",47,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP6",48,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP6",49,0)
 S $P(TOTDASHS,"=",89)=""
"RTN","IBCNERP6",50,0)
 S CT=0
"RTN","IBCNERP6",51,0)
 ;
"RTN","IBCNERP6",52,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(132-$L(NONEMSG)\2),NONEMSG,!! G PRINT2
"RTN","IBCNERP6",53,0)
 S SORT1=""
"RTN","IBCNERP6",54,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",55,0)
 .  S PRT1=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP6",56,0)
 .  S SORT2=""
"RTN","IBCNERP6",57,0)
 .  F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",58,0)
 .  .  S PRT2=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP6",59,0)
 .  .  S SORT3=""
"RTN","IBCNERP6",60,0)
 .  .  F  S SORT3=$O(^TMP($J,RTN,SORT1,SORT2,SORT3)) Q:SORT3=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",61,0)
 .  .  .  S CT=CT+1
"RTN","IBCNERP6",62,0)
 .  .  .  ; Build lines of data to display
"RTN","IBCNERP6",63,0)
 .  .  .  KILL DISPDATA
"RTN","IBCNERP6",64,0)
 .  .  .  D DATA(.DISPDATA)
"RTN","IBCNERP6",65,0)
 .  .  .  ; Display lines of response
"RTN","IBCNERP6",66,0)
 .  .  .  D LINE(.DISPDATA)
"RTN","IBCNERP6",67,0)
 .  .  .  Q
"RTN","IBCNERP6",68,0)
 .  .  Q
"RTN","IBCNERP6",69,0)
 .  Q
"RTN","IBCNERP6",70,0)
 ;
"RTN","IBCNERP6",71,0)
 ; Display totals line if space is available
"RTN","IBCNERP6",72,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",73,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",74,0)
 W !,?43,TOTDASHS
"RTN","IBCNERP6",75,0)
 ; Print totals for report
"RTN","IBCNERP6",76,0)
 KILL DISPDATA
"RTN","IBCNERP6",77,0)
 D TOTALS(.DISPDATA)
"RTN","IBCNERP6",78,0)
 ; Display lines of totals
"RTN","IBCNERP6",79,0)
 D LINE(.DISPDATA)
"RTN","IBCNERP6",80,0)
 ;
"RTN","IBCNERP6",81,0)
PRINT2 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",82,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",83,0)
 W !,?(132-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP6",84,0)
 ;
"RTN","IBCNERP6",85,0)
PRINTX ; PRINT exit point
"RTN","IBCNERP6",86,0)
 Q
"RTN","IBCNERP6",87,0)
 ;
"RTN","IBCNERP6",88,0)
HEADER ; Print header info for each page
"RTN","IBCNERP6",89,0)
 ; Assumes vars from PRINT: CRT,PGC,PXT,MAX,SRT,BDT,EDT,BPY,EPY,RDTL,MAR
"RTN","IBCNERP6",90,0)
 ; Init vars
"RTN","IBCNERP6",91,0)
 N DIR,X,Y,DTOUT,DUOUT,OFFSET,HDR,DASHES,LIN
"RTN","IBCNERP6",92,0)
 ;
"RTN","IBCNERP6",93,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP6",94,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP6",95,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP6",96,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP6",97,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,PXT)=1 G HEADERX
"RTN","IBCNERP6",98,0)
 S PGC=PGC+1
"RTN","IBCNERP6",99,0)
 W @IOF,!,?1,"IIV Payer Report"
"RTN","IBCNERP6",100,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC
"RTN","IBCNERP6",101,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",102,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",103,0)
 W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Total Inquiries")
"RTN","IBCNERP6",104,0)
 S HDR="Rejection Detail: "_$S('RDTL:"Not",1:"")_" Included"
"RTN","IBCNERP6",105,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",106,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",107,0)
 S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP6",108,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",109,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",110,0)
 ; Display Payer Range
"RTN","IBCNERP6",111,0)
 S HDR=""
"RTN","IBCNERP6",112,0)
 I BPY="",EPY="" S HDR="All Payers"
"RTN","IBCNERP6",113,0)
 I HDR="" S HDR="Payers from "_$S(BPY="":"<FIRST>",1:BPY)_" to "_$S(EPY="":"<LAST>",1:EPY)
"RTN","IBCNERP6",114,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",115,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",116,0)
 W !  ; Skip line
"RTN","IBCNERP6",117,0)
 ; Display column headings
"RTN","IBCNERP6",118,0)
 W !,?70,"***** SENT *****",?88,"*** RECEIVED ***",?106,"AvgResp"
"RTN","IBCNERP6",119,0)
 W !,?1,"Payer [Inactive Date]",?43,"Created",?52," Cancel",?61," Queued",?70,"1st Att",?79,"  Retry",?88,"   Good",?97,"  Error",?106," (Days)",?115,"Timeout",?124,"Pending"
"RTN","IBCNERP6",120,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",121,0)
 W !,?1,DASHES
"RTN","IBCNERP6",122,0)
 ;
"RTN","IBCNERP6",123,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP6",124,0)
 Q
"RTN","IBCNERP6",125,0)
 ;
"RTN","IBCNERP6",126,0)
LINE(DISPDATA) ; Print line of data
"RTN","IBCNERP6",127,0)
 ; Assumes vars from PRINT: PGC,PXT,MAX
"RTN","IBCNERP6",128,0)
 ; Init vars
"RTN","IBCNERP6",129,0)
 N CT,II
"RTN","IBCNERP6",130,0)
 ;
"RTN","IBCNERP6",131,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP6",132,0)
 I $Y+1+CT>MAX D HEADER I $G(ZTSTOP)!PXT G LINEX
"RTN","IBCNERP6",133,0)
 F II=1:1:CT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",134,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP6",135,0)
 . W !,?1,DISPDATA(II)
"RTN","IBCNERP6",136,0)
 . Q
"RTN","IBCNERP6",137,0)
 ;
"RTN","IBCNERP6",138,0)
LINEX ; LINE exit pt
"RTN","IBCNERP6",139,0)
 Q
"RTN","IBCNERP6",140,0)
 ;
"RTN","IBCNERP6",141,0)
DATA(DISPDATA) ; Gather and format lines of data to be printed
"RTN","IBCNERP6",142,0)
 ; Assumes vars from PRINT: RTN,SRT,SORT1,SORT2,SORT3,RDTL,CT,PRT1,PRT2
"RTN","IBCNERP6",143,0)
 ; Init vars
"RTN","IBCNERP6",144,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,DASHES2,ERRCD,ERROR,DEACMSG
"RTN","IBCNERP6",145,0)
 N REJDASHS,RPTDATA,FAIL,PEND,RETS,CT2,FIRST,QUED,CANC,PAYER,DEACDT
"RTN","IBCNERP6",146,0)
 ;
"RTN","IBCNERP6",147,0)
 S $P(DASHES2,"-",89)=""
"RTN","IBCNERP6",148,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",149,0)
 S LINECT=1
"RTN","IBCNERP6",150,0)
 ;M RPTDATA=^TMP($J,RTN,SORT1,SORT2,SORT3)
"RTN","IBCNERP6",151,0)
 N %X,%Y
"RTN","IBCNERP6",152,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,SORT3,"
"RTN","IBCNERP6",153,0)
 S %Y="RPTDATA("
"RTN","IBCNERP6",154,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,SORT3))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,SORT3)
"RTN","IBCNERP6",155,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERP6",156,0)
 S INQS=+$P(RPTDATA,U,1)
"RTN","IBCNERP6",157,0)
 S CANC=+$P(RPTDATA,U,2)
"RTN","IBCNERP6",158,0)
 S QUED=+$P(RPTDATA,U,3)
"RTN","IBCNERP6",159,0)
 S FIRST=+$P(RPTDATA,U,4)
"RTN","IBCNERP6",160,0)
 S RETS=+$P(RPTDATA,U,5)
"RTN","IBCNERP6",161,0)
 S APPS=+$P(RPTDATA,U,6)
"RTN","IBCNERP6",162,0)
 S REJS=+$P(RPTDATA,U,7)
"RTN","IBCNERP6",163,0)
 S TIME=+$P(RPTDATA,U,8)
"RTN","IBCNERP6",164,0)
 S FAIL=+$P(RPTDATA,U,9)
"RTN","IBCNERP6",165,0)
 S PEND=+$P(RPTDATA,U,10)
"RTN","IBCNERP6",166,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",167,0)
 S PAYER=$S(SRT=1:PRT1,1:PRT2)
"RTN","IBCNERP6",168,0)
 I $P(RPTDATA,U,11) D
"RTN","IBCNERP6",169,0)
 . S DEACMSG=" [Inactive"
"RTN","IBCNERP6",170,0)
 . S DEACDT=" "_$$FMTE^XLFDT($P(RPTDATA,U,11)\1,"5Z")
"RTN","IBCNERP6",171,0)
 . I $L(PAYER)+$L(DEACMSG)+$L(DEACDT)<40 S PAYER=PAYER_DEACMSG_DEACDT_"]" Q
"RTN","IBCNERP6",172,0)
 . I $L(PAYER)+$L(DEACMSG)<40 S PAYER=PAYER_DEACMSG_"]" Q
"RTN","IBCNERP6",173,0)
 . S PAYER=$E(PAYER,1,39-$L(DEACMSG))_DEACMSG_"]"
"RTN","IBCNERP6",174,0)
 ; Update Report Totals
"RTN","IBCNERP6",175,0)
 F CT2=1:1:10 S $P(TOTALS,U,CT2)=$P($G(TOTALS),U,CT2)+$P(RPTDATA,U,CT2)
"RTN","IBCNERP6",176,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1(PAYER,40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",177,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",178,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",179,0)
 I 'RDTL!(REJS=0) G DATAX
"RTN","IBCNERP6",180,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",181,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",182,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",183,0)
 S ERRCD=""
"RTN","IBCNERP6",184,0)
 F  S ERRCD=$O(RPTDATA(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",185,0)
 .  ; Determine Error Condition Description based on ERRCD
"RTN","IBCNERP6",186,0)
 .  ; If just Error Text 4.01 field, then keep it as is
"RTN","IBCNERP6",187,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",188,0)
 ..   S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",189,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",190,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",191,0)
 .  I ERRCD D
"RTN","IBCNERP6",192,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",193,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",194,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",195,0)
 .  ; Update Report Totals
"RTN","IBCNERP6",196,0)
 .  S TOTALS(ERRCD)=+$G(TOTALS(ERRCD))+RPTDATA(ERRCD)
"RTN","IBCNERP6",197,0)
 .  Q
"RTN","IBCNERP6",198,0)
 ;
"RTN","IBCNERP6",199,0)
DATAX ; DATA exit pt
"RTN","IBCNERP6",200,0)
 ; Display end of record dashes only if other records follow
"RTN","IBCNERP6",201,0)
 I $O(^TMP($J,RTN,SORT1,SORT2,SORT3))'=""!($O(^TMP($J,RTN,SORT1,SORT2))'="")!($O(^TMP($J,RTN,SORT1))'="") S DISPDATA(LINECT)=$$FO^IBCNEUT1("",42)_DASHES2,LINECT=LINECT+1
"RTN","IBCNERP6",202,0)
 Q
"RTN","IBCNERP6",203,0)
 ;
"RTN","IBCNERP6",204,0)
TOTALS(DISPDATA) ; Gather and format lines of totals to be printed
"RTN","IBCNERP6",205,0)
 ; Assumes vars from PRINT: RDTL,MAR
"RTN","IBCNERP6",206,0)
 ; Init vars
"RTN","IBCNERP6",207,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,ERRCD,DASHES,REJDASHS,FAIL,PEND,RETS
"RTN","IBCNERP6",208,0)
 N FIRST,QUED,ERROR,CANC
"RTN","IBCNERP6",209,0)
 ;
"RTN","IBCNERP6",210,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",211,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",212,0)
 S LINECT=1
"RTN","IBCNERP6",213,0)
 S INQS=+$P(TOTALS,U,1)
"RTN","IBCNERP6",214,0)
 S CANC=+$P(TOTALS,U,2)
"RTN","IBCNERP6",215,0)
 S QUED=+$P(TOTALS,U,3)
"RTN","IBCNERP6",216,0)
 S FIRST=+$P(TOTALS,U,4)
"RTN","IBCNERP6",217,0)
 S RETS=+$P(TOTALS,U,5)
"RTN","IBCNERP6",218,0)
 S APPS=+$P(TOTALS,U,6)
"RTN","IBCNERP6",219,0)
 S REJS=+$P(TOTALS,U,7)
"RTN","IBCNERP6",220,0)
 S TIME=+$P(TOTALS,U,8)
"RTN","IBCNERP6",221,0)
 S FAIL=+$P(TOTALS,U,9)
"RTN","IBCNERP6",222,0)
 S PEND=+$P(TOTALS,U,10)
"RTN","IBCNERP6",223,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",224,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("Grand Totals",40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",225,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",226,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",227,0)
 I 'RDTL!(REJS=0) G TOTALSX
"RTN","IBCNERP6",228,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",229,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",230,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",231,0)
 S ERRCD=""
"RTN","IBCNERP6",232,0)
 F  S ERRCD=$O(TOTALS(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",233,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",234,0)
 .  I ERRCD D
"RTN","IBCNERP6",235,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",236,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",237,0)
 .  ; If error text display as is
"RTN","IBCNERP6",238,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",239,0)
 ..    S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",240,0)
 ..    S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",241,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",242,0)
 .  Q
"RTN","IBCNERP6",243,0)
 ;
"RTN","IBCNERP6",244,0)
TOTALSX ; DATA exit pt
"RTN","IBCNERP6",245,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP6",246,0)
 Q
"RTN","IBCNERP6",247,0)
 ;
"RTN","IBCNERP6",248,0)
 ;
"RTN","IBCNERP7")
0^19^B26918279
"RTN","IBCNERP7",1,0)
IBCNERP7 ;DAOU/BHS - IIV STATISTICAL REPORT ;10-JUN-2002
"RTN","IBCNERP7",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP7",4,0)
 ;
"RTN","IBCNERP7",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP7",6,0)
 ;
"RTN","IBCNERP7",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP7",8,0)
 ; Other relevant variables:
"RTN","IBCNERP7",9,0)
 ;   IBCNERTN = "IBCNERP7" (current routine name for queueing the 
"RTN","IBCNERP7",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP7",11,0)
 ;   IBCNESPC("BEGDTM") = start date/time for date/time range
"RTN","IBCNERP7",12,0)
 ;   IBCNESPC("ENDDTM") = end date/time for date/time range
"RTN","IBCNERP7",13,0)
 ;   IBCNESPC("SECTS") = list of sections to display on the report
"RTN","IBCNERP7",14,0)
 ;                       1 = All (Outgoing, Incoming and General),
"RTN","IBCNERP7",15,0)
 ;                       2 = Outgoing - Inquiry Response data,
"RTN","IBCNERP7",16,0)
 ;                       3 = Incoming - Inquiry Transmission data,
"RTN","IBCNERP7",17,0)
 ;                       4 = General - Ins Buffer data, Outstanding 
"RTN","IBCNERP7",18,0)
 ;                           Inquiries, Communication Failures, Retries
"RTN","IBCNERP7",19,0)
 ;                       may equal a list of values if '1' is not the
"RTN","IBCNERP7",20,0)
 ;                       the only value
"RTN","IBCNERP7",21,0)
 ;   IBCNESPC("MM") = "", not for MailMan message OR
"RTN","IBCNERP7",22,0)
 ;                    MAILGROUP, generate as MailMan message for this
"RTN","IBCNERP7",23,0)
 ;                               MAILGROUP as defined in IB site 
"RTN","IBCNERP7",24,0)
 ;                               parameters
"RTN","IBCNERP7",25,0)
 ;
"RTN","IBCNERP7",26,0)
 ; Only enter routine from EN or MAILMSG tags
"RTN","IBCNERP7",27,0)
 Q
"RTN","IBCNERP7",28,0)
 ;
"RTN","IBCNERP7",29,0)
 ; Entry pt
"RTN","IBCNERP7",30,0)
EN ;
"RTN","IBCNERP7",31,0)
 ; Init vars 
"RTN","IBCNERP7",32,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP7",33,0)
 ;
"RTN","IBCNERP7",34,0)
 S STOP=0
"RTN","IBCNERP7",35,0)
 S IBCNERTN="IBCNERP7"
"RTN","IBCNERP7",36,0)
 W @IOF
"RTN","IBCNERP7",37,0)
 W !,"IIV Statistical Report",!
"RTN","IBCNERP7",38,0)
 W !,"Please select the timeframe for which to view the Insurance Identification"
"RTN","IBCNERP7",39,0)
 W !,"and Verification statistics and current status."
"RTN","IBCNERP7",40,0)
 ;
"RTN","IBCNERP7",41,0)
 ; Default to MailMan flag to No from the EN tag
"RTN","IBCNERP7",42,0)
 S IBCNESPC("MM")=""
"RTN","IBCNERP7",43,0)
 ;
"RTN","IBCNERP7",44,0)
 ; Prompts for Payer Report
"RTN","IBCNERP7",45,0)
 ; Date Range parameters
"RTN","IBCNERP7",46,0)
S10 D DTMRNG I STOP G EXIT
"RTN","IBCNERP7",47,0)
 ; Sort by parameter - Payer or Total Inquiries (Payer Report)
"RTN","IBCNERP7",48,0)
S20 D SECTS I STOP G:$$STOP^IBCNERP1 EXIT G S10
"RTN","IBCNERP7",49,0)
 ; Select the output device
"RTN","IBCNERP7",50,0)
S50 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G S20
"RTN","IBCNERP7",51,0)
 ;
"RTN","IBCNERP7",52,0)
EXIT ; Quit this routine
"RTN","IBCNERP7",53,0)
 Q
"RTN","IBCNERP7",54,0)
 ;
"RTN","IBCNERP7",55,0)
 ;
"RTN","IBCNERP7",56,0)
DTMRNG ; Determine the start and end date/times for the report
"RTN","IBCNERP7",57,0)
 ; Init vars
"RTN","IBCNERP7",58,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP7",59,0)
 ;
"RTN","IBCNERP7",60,0)
 W !
"RTN","IBCNERP7",61,0)
 ;
"RTN","IBCNERP7",62,0)
 S DIR(0)="DO^::ERX"
"RTN","IBCNERP7",63,0)
 S DIR("A")="Start DATE/TIME"
"RTN","IBCNERP7",64,0)
 S DIR("?",1)="    Enter Start DATE/TIME for report range."
"RTN","IBCNERP7",65,0)
 S DIR("?")="    The time element is required."
"RTN","IBCNERP7",66,0)
 D ^DIR K DIR
"RTN","IBCNERP7",67,0)
 I $D(DIRUT) S STOP=1 G DTMRNGX
"RTN","IBCNERP7",68,0)
 S IBCNESPC("BEGDTM")=Y
"RTN","IBCNERP7",69,0)
 ;
"RTN","IBCNERP7",70,0)
DTMRNG1 S DIR(0)="D^::ERX"
"RTN","IBCNERP7",71,0)
 S DIR("A")="  End DATE/TIME"
"RTN","IBCNERP7",72,0)
 S DIR("?",1)="    Enter End DATE/TIME for report range."
"RTN","IBCNERP7",73,0)
 S DIR("?")="    The time element is required."
"RTN","IBCNERP7",74,0)
 D ^DIR K DIR
"RTN","IBCNERP7",75,0)
 I $D(DIRUT) S STOP=1 G DTMRNGX
"RTN","IBCNERP7",76,0)
 I Y<IBCNESPC("BEGDTM") D  G DTMRNG1
"RTN","IBCNERP7",77,0)
 . W !,"    The End Date/Time must not precede the Start Date/Time."
"RTN","IBCNERP7",78,0)
 . W !,"    Please reenter."
"RTN","IBCNERP7",79,0)
 S IBCNESPC("ENDDTM")=Y
"RTN","IBCNERP7",80,0)
 ;
"RTN","IBCNERP7",81,0)
DTMRNGX ; DTMRNG exit pt
"RTN","IBCNERP7",82,0)
 Q
"RTN","IBCNERP7",83,0)
 ;
"RTN","IBCNERP7",84,0)
 ;
"RTN","IBCNERP7",85,0)
SECTS ; Prompt to allow users to include the available sections in the report
"RTN","IBCNERP7",86,0)
 ; Init vars
"RTN","IBCNERP7",87,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP7",88,0)
 ;
"RTN","IBCNERP7",89,0)
 W !
"RTN","IBCNERP7",90,0)
 S DIR(0)="L^1:4"
"RTN","IBCNERP7",91,0)
 S DIR("A",1)="Choose all sections to be reviewed"
"RTN","IBCNERP7",92,0)
 S DIR("A",2)="1  -  All            = All three report sections (Default)"
"RTN","IBCNERP7",93,0)
 S DIR("A",3)="2  -  Outgoing Data  = Inquiry Transmission statistics"
"RTN","IBCNERP7",94,0)
 S DIR("A",4)="3  -  Incoming Data  = Inquiry Response statistics"
"RTN","IBCNERP7",95,0)
 S DIR("A",5)="4  -  Current Status = Pending Responses, Queued Inquiries, etc."
"RTN","IBCNERP7",96,0)
 S DIR("A")="Select one or more sections: "
"RTN","IBCNERP7",97,0)
 S DIR("B")=1
"RTN","IBCNERP7",98,0)
 S DIR("?",1)="  Please select one or more sections of the report to view."
"RTN","IBCNERP7",99,0)
 S DIR("?",2)="  To select multiple sections enter a comma separated list"
"RTN","IBCNERP7",100,0)
 S DIR("?",3)="  (ex. 2,4)."
"RTN","IBCNERP7",101,0)
 S DIR("?",4)="  1  -  Include all three sections in the report.  (Default)"
"RTN","IBCNERP7",102,0)
 S DIR("?",5)="  2  -  Include statistics on inquiries transmitted during the"
"RTN","IBCNERP7",103,0)
 S DIR("?",6)="        timeframe by extract type."
"RTN","IBCNERP7",104,0)
 S DIR("?",7)="  3  -  Include statistics on responses received during the"
"RTN","IBCNERP7",105,0)
 S DIR("?",8)="        timeframe by extract type."
"RTN","IBCNERP7",106,0)
 S DIR("?",9)="  4  -  Include statistics on the current state of the system."
"RTN","IBCNERP7",107,0)
 S DIR("?",10)="        This section is independent of the timeframe for the"
"RTN","IBCNERP7",108,0)
 S DIR("?",11)="        report and includes responses pending, queued inquiries,"
"RTN","IBCNERP7",109,0)
 S DIR("?",12)="        deferred inquiries, payer statistics and insurance"
"RTN","IBCNERP7",110,0)
 S DIR("?")="        buffer statistics."
"RTN","IBCNERP7",111,0)
 D ^DIR K DIR
"RTN","IBCNERP7",112,0)
 I $D(DIRUT) S STOP=1 G SECTSX
"RTN","IBCNERP7",113,0)
 ; Default to all if 1 is included OR if 2,3 and 4 are included in any
"RTN","IBCNERP7",114,0)
 ; order
"RTN","IBCNERP7",115,0)
 S Y=","_Y
"RTN","IBCNERP7",116,0)
 I Y[(",1,") S IBCNESPC("SECTS")=1 G SECTSX
"RTN","IBCNERP7",117,0)
 I Y[(",2,"),Y[(",3,"),Y[(",4,") S IBCNESPC("SECTS")=1 G SECTSX
"RTN","IBCNERP7",118,0)
 S IBCNESPC("SECTS")=Y
"RTN","IBCNERP7",119,0)
 ;
"RTN","IBCNERP7",120,0)
SECTSX ; SECTS exit pt
"RTN","IBCNERP7",121,0)
 Q
"RTN","IBCNERP7",122,0)
 ;
"RTN","IBCNERP7",123,0)
 ;
"RTN","IBCNERP7",124,0)
MAILMSG ; Tag to be called by TaskMan to generate report with default values
"RTN","IBCNERP7",125,0)
 ; and send as MailMan message
"RTN","IBCNERP7",126,0)
 ; Init vars
"RTN","IBCNERP7",127,0)
 N IBCNERTN,IBCNESPC,EDT,BDT,TM
"RTN","IBCNERP7",128,0)
 ;
"RTN","IBCNERP7",129,0)
 ; Default report parameters
"RTN","IBCNERP7",130,0)
 ; Start Date/Time - End Date/Time range
"RTN","IBCNERP7",131,0)
 ;  Determine start time based on IB site parameter
"RTN","IBCNERP7",132,0)
 S TM=$$GET1^DIQ(350.9,"1,",51.03,"E")
"RTN","IBCNERP7",133,0)
 I TM=""!(+TM=0) S TM="2400"
"RTN","IBCNERP7",134,0)
 S EDT=$$DT^XLFDT
"RTN","IBCNERP7",135,0)
 S BDT=$$FMADD^XLFDT(EDT,-1)
"RTN","IBCNERP7",136,0)
 S IBCNESPC("BEGDTM")=+(BDT_"."_TM)
"RTN","IBCNERP7",137,0)
 S IBCNESPC("ENDDTM")=+(EDT_"."_TM)
"RTN","IBCNERP7",138,0)
 ; Display all sections
"RTN","IBCNERP7",139,0)
 S IBCNESPC("SECTS")=1
"RTN","IBCNERP7",140,0)
 ; Set MailMan flag to IB site parameter MAILGROUP
"RTN","IBCNERP7",141,0)
 S IBCNESPC("MM")=$$MGRP^IBCNEUT5
"RTN","IBCNERP7",142,0)
 ; If there is no MailGroup to send message - do not continue
"RTN","IBCNERP7",143,0)
 I IBCNESPC("MM")="" QUIT
"RTN","IBCNERP7",144,0)
 ; If the send MailMan message parameter is turned off, stop the process
"RTN","IBCNERP7",145,0)
 I '$P($G(^IBE(350.9,1,51)),U,2) QUIT
"RTN","IBCNERP7",146,0)
 ;
"RTN","IBCNERP7",147,0)
 ; Set routine parameter
"RTN","IBCNERP7",148,0)
 S IBCNERTN="IBCNERP7"
"RTN","IBCNERP7",149,0)
 ;
"RTN","IBCNERP7",150,0)
 ; Initialize scratch global
"RTN","IBCNERP7",151,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP7",152,0)
 ; Compile the report data
"RTN","IBCNERP7",153,0)
 D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP7",154,0)
 ; Print the report - to MailMan
"RTN","IBCNERP7",155,0)
 I '$G(ZTSTOP) D EN^IBCNERP9(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP7",156,0)
 ;
"RTN","IBCNERP7",157,0)
 ; Kill scratch global
"RTN","IBCNERP7",158,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP7",159,0)
 ;
"RTN","IBCNERP7",160,0)
 ; Purge the task record
"RTN","IBCNERP7",161,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP7",162,0)
 ;
"RTN","IBCNERP7",163,0)
 ; MAILMSG exit pt
"RTN","IBCNERP7",164,0)
 Q
"RTN","IBCNERP7",165,0)
 ;
"RTN","IBCNERP7",166,0)
 ;
"RTN","IBCNERP8")
0^20^B53952311
"RTN","IBCNERP8",1,0)
IBCNERP8 ;DAOU/BHS - IBCNE IIV STATISTICAL REPORT COMPILE ;11-JUN-2002
"RTN","IBCNERP8",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP8",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP8",4,0)
 ;
"RTN","IBCNERP8",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP8",6,0)
 ;
"RTN","IBCNERP8",7,0)
 ;Input vars from IBCNERP7:
"RTN","IBCNERP8",8,0)
 ; IBCNERTN = "IBCNERP7"
"RTN","IBCNERP8",9,0)
 ; **IBCNESPC array ONLY passed by reference **
"RTN","IBCNERP8",10,0)
 ; IBCNESPC("BEGDTM") = Start Dt/Tm for rpt range
"RTN","IBCNERP8",11,0)
 ; IBCNESPC("ENDDTM") = End Dt/Tm for rpt range
"RTN","IBCNERP8",12,0)
 ; IBCNESPC("SECTS")  = 1 - All sections OR ',' sep'd list of 1 or more
"RTN","IBCNERP8",13,0)
 ;  of the following (not all)
"RTN","IBCNERP8",14,0)
 ;  2 - Outgoing data, inq trans stats
"RTN","IBCNERP8",15,0)
 ;  3 - Incoming data, resps rec'd stats
"RTN","IBCNERP8",16,0)
 ;  4 - Current status, pending resps, queued inqs, deferred inqs, payer
"RTN","IBCNERP8",17,0)
 ;      stats, ins buf stats
"RTN","IBCNERP8",18,0)
 ; IBCNESPC("MM") = "" - do not generate MailMan message OR MAILGROUP to
"RTN","IBCNERP8",19,0)
 ;  send report to Mail Group as defined in the IB site parameters
"RTN","IBCNERP8",20,0)
 ;Output vars:
"RTN","IBCNERP8",21,0)
 ; Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP8",22,0)
 ; may be built
"RTN","IBCNERP8",23,0)
 ; 1 OR contains 2 --> 
"RTN","IBCNERP8",24,0)
 ; ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",25,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",26,0)
 ; 1 OR contains 3 --> 
"RTN","IBCNERP8",27,0)
 ; ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",28,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",29,0)
 ; 1 OR contains 4 --> 
"RTN","IBCNERP8",30,0)
 ; ^TMP($J,RTN,"CUR")=TotPendingResponses^TotQueuedInquiries^...
"RTN","IBCNERP8",31,0)
 ;  TotDeferredInquiries(Hold)^TotInsCosw/oNationalID^...
"RTN","IBCNERP8",32,0)
 ;  ToteIIVPyrsDisabldLocally^TotInsBufVerified^TotalManVerified...
"RTN","IBCNERP8",33,0)
 ;  TotalIIVVerified^TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP8",34,0)
 ;  ? InsBufSubtotal^- InsBufSubtotal^Other InsBufSubtotal
"RTN","IBCNERP8",35,0)
 ; 1 OR contains 4 -->
"RTN","IBCNERP8",36,0)
 ; ^TMP($J,RTN,"PYR",PAYER,IEN)=""  (list of new payers)
"RTN","IBCNERP8",37,0)
 ;
"RTN","IBCNERP8",38,0)
 ; Must call at EN
"RTN","IBCNERP8",39,0)
 Q
"RTN","IBCNERP8",40,0)
 ;
"RTN","IBCNERP8",41,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP8",42,0)
 ; Init vars
"RTN","IBCNERP8",43,0)
 N IBBDT,IBEDT,IBSCT,IBTOT,PIECES,VALUE,CT
"RTN","IBCNERP8",44,0)
 ;
"RTN","IBCNERP8",45,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP8",46,0)
 ;
"RTN","IBCNERP8",47,0)
 S IBTOT=0
"RTN","IBCNERP8",48,0)
 ;
"RTN","IBCNERP8",49,0)
 ; Kill scratch global
"RTN","IBCNERP8",50,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERP8",51,0)
 ;
"RTN","IBCNERP8",52,0)
 ; Init looping vars
"RTN","IBCNERP8",53,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP8",54,0)
 S IBSCT=$G(IBCNESPC("SECTS"))
"RTN","IBCNERP8",55,0)
 ;
"RTN","IBCNERP8",56,0)
 I IBSCT=1!$F(IBSCT,",2,") D OUT(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",57,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",58,0)
 I IBSCT=1!$F(IBSCT,",3,") D IN(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",59,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",60,0)
 I IBSCT=1!$F(IBSCT,",4,") D CUR(IBCNERTN,.IBTOT),PYR^IBCNERP0(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",61,0)
 ;
"RTN","IBCNERP8",62,0)
EXIT ; EN Exit pt
"RTN","IBCNERP8",63,0)
 Q
"RTN","IBCNERP8",64,0)
 ;
"RTN","IBCNERP8",65,0)
IN(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP8",66,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP8",67,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP8",68,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP8",69,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"IN") as follows:
"RTN","IBCNERP8",70,0)
 ;  1=total Resps rec'd for date/time range
"RTN","IBCNERP8",71,0)
 ;  2=Ins Buf extract subtotal
"RTN","IBCNERP8",72,0)
 ;  3=Pre-Reg extract subtotal
"RTN","IBCNERP8",73,0)
 ;  4=Non-ver extract subtotal
"RTN","IBCNERP8",74,0)
 ;  5=No Act Ins subtotal
"RTN","IBCNERP8",75,0)
 ;
"RTN","IBCNERP8",76,0)
 ; Init vars
"RTN","IBCNERP8",77,0)
 N IBDT,PYRIEN,PATIEN,IBPTR,IBTYP,RPTDATA,TRANSIEN
"RTN","IBCNERP8",78,0)
 ;
"RTN","IBCNERP8",79,0)
 ; Loop thru the IIV Resp File (#365) x-ref on Date/Time Resp Rec'd
"RTN","IBCNERP8",80,0)
 S IBDT=$O(^IBCN(365,"AD",BDT),-1)
"RTN","IBCNERP8",81,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",82,0)
 . S PYRIEN=0
"RTN","IBCNERP8",83,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",84,0)
 . . S PATIEN=0
"RTN","IBCNERP8",85,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",86,0)
 . . . S IBPTR=0
"RTN","IBCNERP8",87,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",88,0)
 . . . . S TOT=TOT+1
"RTN","IBCNERP8",89,0)
 . . . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",90,0)
 . . . . ; Update total
"RTN","IBCNERP8",91,0)
 . . . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",92,0)
 . . . . ; Update extract type total
"RTN","IBCNERP8",93,0)
 . . . . ; Get the data for the report - build RPTDATA
"RTN","IBCNERP8",94,0)
 . . . . S IBTYP=5,TRANSIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",95,0)
 . . . . I TRANSIEN'="" S IBTYP=$P($G(^IBCN(365.1,TRANSIEN,0)),U,10)
"RTN","IBCNERP8",96,0)
 . . . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",97,0)
 ;
"RTN","IBCNERP8",98,0)
 I $G(ZTSTOP) G INX
"RTN","IBCNERP8",99,0)
 ;
"RTN","IBCNERP8",100,0)
 ; Save data to global
"RTN","IBCNERP8",101,0)
 S ^TMP($J,RTN,"IN")=$G(RPTDATA)
"RTN","IBCNERP8",102,0)
 ;
"RTN","IBCNERP8",103,0)
INX ; IN exit pt
"RTN","IBCNERP8",104,0)
 Q
"RTN","IBCNERP8",105,0)
 ;
"RTN","IBCNERP8",106,0)
OUT(RTN,BDT,EDT,TOT) ; Outgoing Data
"RTN","IBCNERP8",107,0)
 ;Input params:  RTN-routine name used as subscript in ^TMP($J),
"RTN","IBCNERP8",108,0)
 ; BDT-start date/time, EDT-end date/time, **TOT-total recs searched-used
"RTN","IBCNERP8",109,0)
 ; only for status checks when process is queued (passed by reference)
"RTN","IBCNERP8",110,0)
 ;Output vars: Set pcs of ^TMP($J,RTN,"OUT") as follows:
"RTN","IBCNERP8",111,0)
 ; 1=total Inqs transmitted for timeframe
"RTN","IBCNERP8",112,0)
 ; 2=Ins Buffer extract subtotal
"RTN","IBCNERP8",113,0)
 ; 3=Pre-Reg extract subtotal
"RTN","IBCNERP8",114,0)
 ; 4=Non-Ver extract subtotal
"RTN","IBCNERP8",115,0)
 ; 5=No Act Ins subtotal
"RTN","IBCNERP8",116,0)
 ;
"RTN","IBCNERP8",117,0)
 ; Init vars
"RTN","IBCNERP8",118,0)
 N IBDT,IBPTR,IBTYP,RPTDATA,TQIEN
"RTN","IBCNERP8",119,0)
 ;
"RTN","IBCNERP8",120,0)
 ; Loop thru the IIV Resp File (#365) by x-ref on Date/Time Resp Created
"RTN","IBCNERP8",121,0)
 ;  Only count responses for unique HL7 message IDs - filter out
"RTN","IBCNERP8",122,0)
 ;  unsolicited responses as they artificially inflate the Outgoing Count
"RTN","IBCNERP8",123,0)
 S IBDT=$O(^IBCN(365,"AE",BDT),-1)
"RTN","IBCNERP8",124,0)
 F  S IBDT=$O(^IBCN(365,"AE",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",125,0)
 . S IBPTR=0
"RTN","IBCNERP8",126,0)
 . F  S IBPTR=$O(^IBCN(365,"AE",IBDT,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",127,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",128,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",129,0)
 . . ; Quit, if response was not O - original
"RTN","IBCNERP8",130,0)
 . . I $P($G(^IBCN(365,IBPTR,0)),U,10)'="O" Q
"RTN","IBCNERP8",131,0)
 . . ; Update total
"RTN","IBCNERP8",132,0)
 . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",133,0)
 . . ; Update extract type total (1,2,3,4)
"RTN","IBCNERP8",134,0)
 . . S IBTYP=5
"RTN","IBCNERP8",135,0)
 . . S TQIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",136,0)
 . . I TQIEN="" Q
"RTN","IBCNERP8",137,0)
 . . S IBTYP=$P($G(^IBCN(365.1,TQIEN,0)),U,10)
"RTN","IBCNERP8",138,0)
 . . S $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",139,0)
 ;
"RTN","IBCNERP8",140,0)
 I $G(ZTSTOP) G OUTX
"RTN","IBCNERP8",141,0)
 ;
"RTN","IBCNERP8",142,0)
 ; Save data to global array
"RTN","IBCNERP8",143,0)
 S ^TMP($J,RTN,"OUT")=$G(RPTDATA)
"RTN","IBCNERP8",144,0)
 ;
"RTN","IBCNERP8",145,0)
OUTX ; OUT exit pt
"RTN","IBCNERP8",146,0)
 Q
"RTN","IBCNERP8",147,0)
 ;
"RTN","IBCNERP8",148,0)
CUR(RTN,TOT) ; Current Status - stats - timeframe independent
"RTN","IBCNERP8",149,0)
 ; Input params: RTN-routine name as subs in ^TMP($J), **TOT-total recs
"RTN","IBCNERP8",150,0)
 ;  searched - used only for status checks when the process is queued
"RTN","IBCNERP8",151,0)
 ;  passed by reference
"RTN","IBCNERP8",152,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"CUR") as follows:
"RTN","IBCNERP8",153,0)
 ;  1=total Pending Resps (Transmitted-2)
"RTN","IBCNERP8",154,0)
 ;  2=total Queued Inqs (Ready to Transmit-1/Retry-6)
"RTN","IBCNERP8",155,0)
 ;  3=total Deferred Inqs (Hold-4)
"RTN","IBCNERP8",156,0)
 ;  4=Ins Cos w/o National ID
"RTN","IBCNERP8",157,0)
 ;  5=Payers w/IIV disabled locally
"RTN","IBCNERP8",158,0)
 ;  6=total Ver'd IB Entries (symbol='*' or  '+')
"RTN","IBCNERP8",159,0)
 ;  7=total Man. Ver'd Ins Buf entries (symbol='*')
"RTN","IBCNERP8",160,0)
 ;  8=total IIV Processed Ver. (symbol='+')
"RTN","IBCNERP8",161,0)
 ;  9=total Unver'd Ins Buf entries (symbol'='*')
"RTN","IBCNERP8",162,0)
 ;  10=total Ins Buf entries w/symbol='!'
"RTN","IBCNERP8",163,0)
 ;  11=total Ins Buf entries w/symbol='?'
"RTN","IBCNERP8",164,0)
 ;  12=total Ins Buf entries w/symbol='-'
"RTN","IBCNERP8",165,0)
 ;  13=total Ins Buffer entries w/symbol not in ('*','!','?','-')
"RTN","IBCNERP8",166,0)
 ;
"RTN","IBCNERP8",167,0)
 ; Init vars
"RTN","IBCNERP8",168,0)
 N RIEN,TQIEN,ICIEN,IBIEN,RPTDATA,IEN,IBSYMBOL,PIECE,IBSTS,APPIEN
"RTN","IBCNERP8",169,0)
 N PIEN,TMP,APPDATA,XDT
"RTN","IBCNERP8",170,0)
 ;
"RTN","IBCNERP8",171,0)
 S RPTDATA=""
"RTN","IBCNERP8",172,0)
 ;
"RTN","IBCNERP8",173,0)
 ; Responses pending (Transmitted - 2)
"RTN","IBCNERP8",174,0)
 S RIEN=0
"RTN","IBCNERP8",175,0)
 F  S RIEN=$O(^IBCN(365,"AC",2,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",176,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",177,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",178,0)
 .  S $P(RPTDATA,U,1)=$P(RPTDATA,U,1)+1
"RTN","IBCNERP8",179,0)
 ;
"RTN","IBCNERP8",180,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",181,0)
 ;
"RTN","IBCNERP8",182,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and 
"RTN","IBCNERP8",183,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNERP8",184,0)
 F IBSTS=1,6,4 D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",185,0)
 . S TQIEN=0
"RTN","IBCNERP8",186,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",IBSTS,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",187,0)
 . .  S TOT=TOT+1
"RTN","IBCNERP8",188,0)
 . .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",189,0)
 . .  I IBSTS'=4 S $P(RPTDATA,U,2)=$P(RPTDATA,U,2)+1 Q
"RTN","IBCNERP8",190,0)
 . .  S $P(RPTDATA,U,3)=$P(RPTDATA,U,3)+1
"RTN","IBCNERP8",191,0)
 ;
"RTN","IBCNERP8",192,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",193,0)
 ;
"RTN","IBCNERP8",194,0)
 ; Payer stats
"RTN","IBCNERP8",195,0)
 ; Ins cos w/o National ID
"RTN","IBCNERP8",196,0)
 S ICIEN=0
"RTN","IBCNERP8",197,0)
 F  S ICIEN=$O(^DIC(36,ICIEN)) Q:'ICIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",198,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",199,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",200,0)
 .  ; Exclude inactive
"RTN","IBCNERP8",201,0)
 .  S TMP=$$ACTIVE^IBCNEUT4(ICIEN) I 'TMP Q
"RTN","IBCNERP8",202,0)
 .  ; Exclude Medicare/Medicaid, etc.
"RTN","IBCNERP8",203,0)
 .  I $$EXCLUDE^IBCNEUT4($P(TMP,U,2)) Q
"RTN","IBCNERP8",204,0)
 .  ; Determine assoc Payer
"RTN","IBCNERP8",205,0)
 .  S PIEN=$P($G(^DIC(36,ICIEN,3)),U,10)
"RTN","IBCNERP8",206,0)
 .  ; Missing payer link
"RTN","IBCNERP8",207,0)
 .  I 'PIEN S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",208,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,3) Q
"RTN","IBCNERP8",209,0)
 .  S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1
"RTN","IBCNERP8",210,0)
 ;
"RTN","IBCNERP8",211,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",212,0)
 ;
"RTN","IBCNERP8",213,0)
 ; IIV Payers disabled locally
"RTN","IBCNERP8",214,0)
 S PIEN=0
"RTN","IBCNERP8",215,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",216,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",217,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",218,0)
 .  ; Must have National ID
"RTN","IBCNERP8",219,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,2)="" Q
"RTN","IBCNERP8",220,0)
 .  ; Get Payer app multiple IEN
"RTN","IBCNERP8",221,0)
 .  S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP8",222,0)
 .  ; Must have eIIV application
"RTN","IBCNERP8",223,0)
 .  I 'APPIEN Q
"RTN","IBCNERP8",224,0)
 .  S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP8",225,0)
 .  ; Must be Nationally Active
"RTN","IBCNERP8",226,0)
 .  I '$P(APPDATA,U,2) Q
"RTN","IBCNERP8",227,0)
 .  ; Must not be Locally Active
"RTN","IBCNERP8",228,0)
 .  I $P(APPDATA,U,3) Q
"RTN","IBCNERP8",229,0)
 .  S $P(RPTDATA,U,5)=$P(RPTDATA,U,5)+1
"RTN","IBCNERP8",230,0)
 ;
"RTN","IBCNERP8",231,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",232,0)
 ;
"RTN","IBCNERP8",233,0)
 ; Buffer stats
"RTN","IBCNERP8",234,0)
 ; Loop thru the Ins Buffer File (#355.33)
"RTN","IBCNERP8",235,0)
 S IBIEN=0,XDT=0
"RTN","IBCNERP8",236,0)
 F  S XDT=$O(^IBA(355.33,"AEST","E",XDT)) Q:XDT=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",237,0)
 . F  S IBIEN=$O(^IBA(355.33,"AEST","E",XDT,IBIEN)) Q:IBIEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",238,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",239,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",240,0)
 . . S IBSYMBOL=$$SYMBOL^IBCNBLL(IBIEN)
"RTN","IBCNERP8",241,0)
 . . ; Determine piece to update based on symbol
"RTN","IBCNERP8",242,0)
 . . ; ('*') = Man. Verified,  ('!','-','?',blank/null) = IIV Processing
"RTN","IBCNERP8",243,0)
 . . ; ('+') = IIV Processed
"RTN","IBCNERP8",244,0)
 . . S PIECE=$S(IBSYMBOL="*":7,IBSYMBOL="+":8,IBSYMBOL="!":10,IBSYMBOL="-":12,IBSYMBOL="?":11,1:13)
"RTN","IBCNERP8",245,0)
 . . I PIECE=7!(PIECE=8) S $P(RPTDATA,U,6)=$P($G(RPTDATA),U,6)+1
"RTN","IBCNERP8",246,0)
 . . I PIECE>8 S $P(RPTDATA,U,9)=$P($G(RPTDATA),U,9)+1
"RTN","IBCNERP8",247,0)
 . . S $P(RPTDATA,U,PIECE)=$P($G(RPTDATA),U,PIECE)+1
"RTN","IBCNERP8",248,0)
 ;
"RTN","IBCNERP8",249,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",250,0)
 ;
"RTN","IBCNERP8",251,0)
 ; Save data to global
"RTN","IBCNERP8",252,0)
 S ^TMP($J,RTN,"CUR")=$G(RPTDATA)
"RTN","IBCNERP8",253,0)
 ;
"RTN","IBCNERP8",254,0)
CURX ; CUR exit point
"RTN","IBCNERP8",255,0)
 Q
"RTN","IBCNERP8",256,0)
 ;
"RTN","IBCNERP8",257,0)
 ;
"RTN","IBCNERP9")
0^21^B74379250
"RTN","IBCNERP9",1,0)
IBCNERP9 ;DAOU/BHS - IIV STATISTICAL REPORT PRINT ;12-JUN-2002
"RTN","IBCNERP9",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERP9",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERP9",4,0)
 ;
"RTN","IBCNERP9",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERP9",6,0)
 ;
"RTN","IBCNERP9",7,0)
 ; Input variables from IBCNERP7:
"RTN","IBCNERP9",8,0)
 ;  IBCNERTN = "IBCNERP7"
"RTN","IBCNERP9",9,0)
 ; **IBCNESPC array ONLY passed by reference
"RTN","IBCNERP9",10,0)
 ;  IBCNESPC("BEGDTM") = Start Date/Time for date/time report range
"RTN","IBCNERP9",11,0)
 ;  IBCNESPC("ENDDTM") = End Date/Time for date/time report range
"RTN","IBCNERP9",12,0)
 ;  IBCNESPC("SECTS") = 1 - All, includes all sections OR
"RTN","IBCNERP9",13,0)
 ;   list of one or more of the following:
"RTN","IBCNERP9",14,0)
 ;   2 - Outgoing Data, Inquiry Transmission data,
"RTN","IBCNERP9",15,0)
 ;   3 - Incoming Data, Inquiry Response data,
"RTN","IBCNERP9",16,0)
 ;   4 - General Data, Insurance Buffer data,
"RTN","IBCNERP9",17,0)
 ;   Communication Failures, Outstanding Inquiries
"RTN","IBCNERP9",18,0)
 ;   IBCNESPC("MM") = "", do not generate MailMan message OR
"RTN","IBCNERP9",19,0)
 ;                    MAILGROUP, mailgroup to send MailMan message to
"RTN","IBCNERP9",20,0)
 ;                               based on IB site parameter
"RTN","IBCNERP9",21,0)
 ;   Assumes report data exists in ^TMP($J,IBCNERTN,...)
"RTN","IBCNERP9",22,0)
 ;   Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP9",23,0)
 ;   will be built
"RTN","IBCNERP9",24,0)
 ;   1 OR contains 2 --> 
"RTN","IBCNERP9",25,0)
 ;    ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",26,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",27,0)
 ;   1 OR contains 3 --> 
"RTN","IBCNERP9",28,0)
 ;    ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",29,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",30,0)
 ;   1 OR contains 4 --> 
"RTN","IBCNERP9",31,0)
 ;    ^TMP($J,RTN,"CUR")=TotOutstandingInq^TotInqRetries^...
"RTN","IBCNERP9",32,0)
 ;                       TotInqCommFailure^TotInsBufVerified^...
"RTN","IBCNERP9",33,0)
 ;                       ManVerifedSubtotal^IIVProcessedSubtotal...
"RTN","IBCNERP9",34,0)
 ;                       TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP9",35,0)
 ;                       ? InsBufSubtotal^- InsBufSubtotal^...
"RTN","IBCNERP9",36,0)
 ;                       Other InsBufSubtotal^TQReadyToTransmit^...
"RTN","IBCNERP9",37,0)
 ;                       TQHold^TQRetry
"RTN","IBCNERP9",38,0)
 ;    and ^TMP($J,RTN","PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP9",39,0)
 ;
"RTN","IBCNERP9",40,0)
 ; Must call at EN
"RTN","IBCNERP9",41,0)
 Q
"RTN","IBCNERP9",42,0)
 ;
"RTN","IBCNERP9",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP9",44,0)
 ;
"RTN","IBCNERP9",45,0)
 ; Init vars
"RTN","IBCNERP9",46,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBSCT,IBMM,RETRY,OUTINQ,ATTEMPT
"RTN","IBCNERP9",47,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN
"RTN","IBCNERP9",48,0)
 ;
"RTN","IBCNERP9",49,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP9",50,0)
 S IBSCT=$G(IBCNESPC("SECTS")),IBMM=$G(IBCNESPC("MM"))
"RTN","IBCNERP9",51,0)
 ;
"RTN","IBCNERP9",52,0)
 S (IBPXT,IBPGC,CRT,MAXCNT)=0
"RTN","IBCNERP9",53,0)
 ;
"RTN","IBCNERP9",54,0)
 ; Determine IO parameters if output device is NOT MailMan message
"RTN","IBCNERP9",55,0)
 I IBMM="" D
"RTN","IBCNERP9",56,0)
 . I IOST["C-" S MAXCNT=IOSL-3,CRT=1 Q
"RTN","IBCNERP9",57,0)
 . S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERP9",58,0)
 ;
"RTN","IBCNERP9",59,0)
 D PRINT(IBCNERTN,IBBDT,IBEDT,IBSCT,IBMM,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERP9",60,0)
 I $G(ZTSTOP)!IBPXT G EXIT
"RTN","IBCNERP9",61,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D  G EXIT
"RTN","IBCNERP9",62,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERP9",63,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP9",64,0)
 ;
"RTN","IBCNERP9",65,0)
EXIT ; Exit pt
"RTN","IBCNERP9",66,0)
 Q
"RTN","IBCNERP9",67,0)
 ;
"RTN","IBCNERP9",68,0)
 ;
"RTN","IBCNERP9",69,0)
PRINT(RTN,BDT,EDT,SCT,MM,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP9",70,0)
 ; Init vars
"RTN","IBCNERP9",71,0)
 N EORMSG,NONEMSG,LINECT,DISPDATA,HDRDATA,OFFSET,TMP,DTMRNG,SITE
"RTN","IBCNERP9",72,0)
 ;
"RTN","IBCNERP9",73,0)
 S LINECT=0
"RTN","IBCNERP9",74,0)
 ;
"RTN","IBCNERP9",75,0)
 ; Build End-Of-Report Message for display
"RTN","IBCNERP9",76,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP9",77,0)
 S OFFSET=80-$L(EORMSG)\2
"RTN","IBCNERP9",78,0)
 S EORMSG=$$FO^IBCNEUT1(EORMSG,OFFSET+$L(EORMSG),"R")
"RTN","IBCNERP9",79,0)
 ; Build No-Data-Found Message for display
"RTN","IBCNERP9",80,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP9",81,0)
 S OFFSET=80-$L(NONEMSG)\2
"RTN","IBCNERP9",82,0)
 S NONEMSG=$$FO^IBCNEUT1(NONEMSG,OFFSET+$L(NONEMSG),"R")
"RTN","IBCNERP9",83,0)
 ; Build Site for display
"RTN","IBCNERP9",84,0)
 S SITE=$P($$SITE^VASITE,U,2)
"RTN","IBCNERP9",85,0)
 ; Build Date/Time Range for display
"RTN","IBCNERP9",86,0)
 ;  Build Date/Time display for Starting date/time
"RTN","IBCNERP9",87,0)
 S TMP=$$FMTE^XLFDT(BDT,"5Z")
"RTN","IBCNERP9",88,0)
 S DTMRNG=$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",89,0)
 ;  Calculate Date/Time display for Ending date/time
"RTN","IBCNERP9",90,0)
 S TMP=$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP9",91,0)
 S DTMRNG=DTMRNG_" - "_$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",92,0)
 ;
"RTN","IBCNERP9",93,0)
 ; Print header to DISPDATA for MailMan message ONLY
"RTN","IBCNERP9",94,0)
 D HEADER^IBCNERP0(.HDRDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",95,0)
 I MM'="" M DISPDATA=HDRDATA S LINECT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",96,0)
 I MM="" KILL HDRDATA
"RTN","IBCNERP9",97,0)
 ;
"RTN","IBCNERP9",98,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERP9",99,0)
 I '$D(^TMP($J,RTN)) S LINECT=LINECT+1,DISPDATA(LINECT)=NONEMSG G PRINT2
"RTN","IBCNERP9",100,0)
 ;
"RTN","IBCNERP9",101,0)
 ; Display Outgoing Data - if selected
"RTN","IBCNERP9",102,0)
 I SCT=1!(SCT[2) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",103,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",104,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"OUT",MM)
"RTN","IBCNERP9",105,0)
 ;
"RTN","IBCNERP9",106,0)
 ; Display Incoming Data - if selected
"RTN","IBCNERP9",107,0)
 I SCT=1!(SCT[3) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",108,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",109,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"IN",MM)
"RTN","IBCNERP9",110,0)
 ;
"RTN","IBCNERP9",111,0)
 ; Display General Data - if selected
"RTN","IBCNERP9",112,0)
 I SCT=1!(SCT[4) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",113,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",114,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"CUR",MM)
"RTN","IBCNERP9",115,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"PYR",MM)
"RTN","IBCNERP9",116,0)
 ;
"RTN","IBCNERP9",117,0)
PRINT2 S LINECT=LINECT+1
"RTN","IBCNERP9",118,0)
 S DISPDATA(LINECT)=EORMSG
"RTN","IBCNERP9",119,0)
 ;
"RTN","IBCNERP9",120,0)
 I MM="" D LINE(.DISPDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",121,0)
 ; Generate MailMan message, if flag is set
"RTN","IBCNERP9",122,0)
 I MM'="" D MSG^IBCNEUT5(MM,"** IIV Statistical Rpt **","DISPDATA(")
"RTN","IBCNERP9",123,0)
 ;
"RTN","IBCNERP9",124,0)
PRINTX ; PRINT exit pt
"RTN","IBCNERP9",125,0)
 Q
"RTN","IBCNERP9",126,0)
 ;
"RTN","IBCNERP9",127,0)
LINE(DISPDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print line of data
"RTN","IBCNERP9",128,0)
 ; Init vars
"RTN","IBCNERP9",129,0)
 N CT,II,ARRAY,NWPG
"RTN","IBCNERP9",130,0)
 ;
"RTN","IBCNERP9",131,0)
 S NWPG=0
"RTN","IBCNERP9",132,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",133,0)
 I $Y+1+CT>MAX,PGC>1 D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) G LINEX
"RTN","IBCNERP9",134,0)
 F II=1:1:CT D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP9",135,0)
 . I $Y+1>MAX!('PGC) D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) Q
"RTN","IBCNERP9",136,0)
 . I 'NWPG!(NWPG&(DISPDATA(II)'="")) W !,?1,DISPDATA(II)
"RTN","IBCNERP9",137,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP9",138,0)
 ;
"RTN","IBCNERP9",139,0)
LINEX ; LINE exit pt
"RTN","IBCNERP9",140,0)
 Q
"RTN","IBCNERP9",141,0)
 ;
"RTN","IBCNERP9",142,0)
DATA(DISPDATA,LINECT,RTN,TYPE,MM) ; Format lines of data to be printed
"RTN","IBCNERP9",143,0)
 ; Init vars
"RTN","IBCNERP9",144,0)
 N DASHES,DASHES2,PEND,RPTDATA,CT,DEFINQ,INSCOS,PAYERS,QUEINQ
"RTN","IBCNERP9",145,0)
 ;
"RTN","IBCNERP9",146,0)
 S $P(DASHES,"=",15)=""
"RTN","IBCNERP9",147,0)
 I LINECT>0,MM="" S LINECT=LINECT+1,DISPDATA(LINECT)=""
"RTN","IBCNERP9",148,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",149,0)
 S DISPDATA(LINECT)=$S(TYPE="OUT":"Outgoing Data",TYPE="IN":"Incoming Data",1:"Current Status")
"RTN","IBCNERP9",150,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",151,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP9",152,0)
 ; Copy report data to local variable
"RTN","IBCNERP9",153,0)
 S RPTDATA=$G(^TMP($J,RTN,TYPE))      ; does not work for "PYR"
"RTN","IBCNERP9",154,0)
 ; Outgoing and Incoming Totals
"RTN","IBCNERP9",155,0)
 I TYPE="OUT"!(TYPE="IN") D  G DATAX
"RTN","IBCNERP9",156,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",157,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1($S(TYPE="OUT":"Inquiries Sent:",1:"Responses Received:"),36)_$$FO^IBCNEUT1(+$P(RPTDATA,U,1),9,"R")
"RTN","IBCNERP9",158,0)
 . F CT=1:1:4 D
"RTN","IBCNERP9",159,0)
 . . S TYPE="  "_$S(CT=1:"Insurance Buffer",CT=2:"Appointment",CT=3:"Non-verified Insurance",1:"No Active Insurance")
"RTN","IBCNERP9",160,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",161,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT+1),9,"R")
"RTN","IBCNERP9",162,0)
 ;
"RTN","IBCNERP9",163,0)
 ; General Data
"RTN","IBCNERP9",164,0)
 I TYPE="CUR" D  G DATAX
"RTN","IBCNERP9",165,0)
 . ; Responses Pending
"RTN","IBCNERP9",166,0)
 . S PEND=+$P(RPTDATA,U,1)
"RTN","IBCNERP9",167,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",168,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Responses Pending:",36)_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP9",169,0)
 . ; Queued Inqs
"RTN","IBCNERP9",170,0)
 . S QUEINQ=+$P(RPTDATA,U,2)
"RTN","IBCNERP9",171,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",172,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Queued Inquiries:",36)_$$FO^IBCNEUT1(QUEINQ,9,"R")
"RTN","IBCNERP9",173,0)
 . ; Deferred Inqs
"RTN","IBCNERP9",174,0)
 . S DEFINQ=+$P(RPTDATA,U,3)
"RTN","IBCNERP9",175,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",176,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Deferred Inquiries:",36)_$$FO^IBCNEUT1(DEFINQ,9,"R")
"RTN","IBCNERP9",177,0)
 . ; Ins Cos w/o Nat ID
"RTN","IBCNERP9",178,0)
 . S INSCOS=+$P(RPTDATA,U,4)
"RTN","IBCNERP9",179,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",180,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Companies w/o National ID:",36)_$$FO^IBCNEUT1(INSCOS,9,"R")
"RTN","IBCNERP9",181,0)
 . ; Payers disabled locally
"RTN","IBCNERP9",182,0)
 . S PAYERS=+$P(RPTDATA,U,5)
"RTN","IBCNERP9",183,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",184,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("eIIV Payers Disabled Locally:",36)_$$FO^IBCNEUT1(PAYERS,9,"R")
"RTN","IBCNERP9",185,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",186,0)
 . S DISPDATA(LINECT)=""
"RTN","IBCNERP9",187,0)
 . ; Insurance Buffer statistics
"RTN","IBCNERP9",188,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",189,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Buffer Entries: ",36)_$$FO^IBCNEUT1(($P(RPTDATA,U,6)+$P(RPTDATA,U,9)),9,"R")
"RTN","IBCNERP9",190,0)
 . ; * or +  symbol entries - Manually Verified or IIV Processed
"RTN","IBCNERP9",191,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",192,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  Verified Entries: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,6),9,"R")
"RTN","IBCNERP9",193,0)
 . ; Subtotal of * (manually verified)
"RTN","IBCNERP9",194,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",195,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of * entries (manually verified)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,7),9,"R")
"RTN","IBCNERP9",196,0)
 . ; Subtotal of + (IIV processed)
"RTN","IBCNERP9",197,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",198,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of + entries (electronically processed)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,8),9,"R")
"RTN","IBCNERP9",199,0)
 . ; Non *,+ symbol entries - Unverified
"RTN","IBCNERP9",200,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",201,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  Unverified Entries: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,9),9,"R")
"RTN","IBCNERP9",202,0)
 . F CT=1:1:4 D
"RTN","IBCNERP9",203,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",204,0)
 . . S TYPE="    # of "_$S(CT=1:"! entries (manual intervention required)",CT=2:"? entries (IIV is waiting for a response)",CT=3:"- entries (no coverage)",1:"blank entries (yet to be processed or accepted)")
"RTN","IBCNERP9",205,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT+9),9,"R")
"RTN","IBCNERP9",206,0)
 ;
"RTN","IBCNERP9",207,0)
 ; New Payers added to File 365.12
"RTN","IBCNERP9",208,0)
 I TYPE="PYR" D  G DATAX
"RTN","IBCNERP9",209,0)
 . ; Payers added to file 365.12
"RTN","IBCNERP9",210,0)
 . D DATAX
"RTN","IBCNERP9",211,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",212,0)
 . S DISPDATA(LINECT)="New eIIV Payers received during report date range:"
"RTN","IBCNERP9",213,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",214,0)
 . S DISPDATA(LINECT)="  (Run menu option ""Link Insurance Companies to Payers"" for assistance)"
"RTN","IBCNERP9",215,0)
 . I '$D(^TMP($J,RTN,TYPE)) S LINECT=LINECT+1,DISPDATA(LINECT)="    No new Payers added" Q
"RTN","IBCNERP9",216,0)
 . N PYR,PIEN
"RTN","IBCNERP9",217,0)
 . S PYR="",PIEN="" F  S PYR=$O(^TMP($J,RTN,TYPE,PYR)) Q:PYR=""  D
"RTN","IBCNERP9",218,0)
 . . F  S PIEN=$O(^TMP($J,RTN,TYPE,PYR,PIEN)) Q:'PIEN  S LINECT=LINECT+1,DISPDATA(LINECT)="    "_PYR
"RTN","IBCNERP9",219,0)
 ;
"RTN","IBCNERP9",220,0)
DATAX ; DATA exit pt
"RTN","IBCNERP9",221,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",222,0)
 S DISPDATA(LINECT)=""
"RTN","IBCNERP9",223,0)
 Q
"RTN","IBCNERP9",224,0)
 ;
"RTN","IBCNERP9",225,0)
 ;
"RTN","IBCNERPA")
0^71^B6715235
"RTN","IBCNERPA",1,0)
IBCNERPA ;DAOU/BHS - IBCNE IIV RESPONSE REPORT (cont'd) ;03-JUN-2002
"RTN","IBCNERPA",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERPA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPA",4,0)
 ;
"RTN","IBCNERPA",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERPA",6,0)
 ;
"RTN","IBCNERPA",7,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERPA",8,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERPA",9,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERPA",10,0)
 ;  IBCNESPC("BEGPYR")=Starting Pyr nm OR ""
"RTN","IBCNERPA",11,0)
 ;  IBCNESPC("ENDPYR")=Ending Pyr nm OR ""
"RTN","IBCNERPA",12,0)
 ;  IBCNESPC("BEGPAT")=Starting Pat nm (Last,First) OR ""
"RTN","IBCNERPA",13,0)
 ;  IBCNESPC("ENDPAT")=Ending Pat nm (Last,First) OR ""
"RTN","IBCNERPA",14,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERPA",15,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERPA",16,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERPA",17,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERPA",18,0)
 ;  Based on structure of IIV Response File (#365)
"RTN","IBCNERPA",19,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERPA",20,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERPA",21,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERPA",22,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERPA",23,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERPA",24,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERPA",25,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERPA",26,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERPA",27,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERPA",28,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERPA",29,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERPA",30,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERPA",31,0)
 ; Must call at one of the entry points, EN3 or EN6
"RTN","IBCNERPA",32,0)
 Q
"RTN","IBCNERPA",33,0)
 ;
"RTN","IBCNERPA",34,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP3
"RTN","IBCNERPA",35,0)
 N IBBDT,IBEDT,IBBPY,IBEPY,IBBPT,IBEPT,IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPA",36,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC
"RTN","IBCNERPA",37,0)
 S IBBDT=$G(IBCNESPC("BEGDT")),IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",38,0)
 S IBBPY=$G(IBCNESPC("BEGPYR")),IBEPY=$G(IBCNESPC("ENDPYR"))
"RTN","IBCNERPA",39,0)
 S IBBPT=$G(IBCNESPC("BEGPAT")),IBEPT=$G(IBCNESPC("ENDPAT"))
"RTN","IBCNERPA",40,0)
 S IBTYP=$G(IBCNESPC("TYPE")),IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",41,0)
 S IBTRC=$P($G(IBCNESPC("TRCN")),U,1),(IBPXT,IBPGC)=0
"RTN","IBCNERPA",42,0)
 ; Determine IO params
"RTN","IBCNERPA",43,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",44,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",45,0)
 D PRINT^IBCNERP3(IBCNERTN,IBBDT,IBEDT,IBBPY,IBEPY,IBBPT,IBEPT,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBTRC)
"RTN","IBCNERPA",46,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPA",47,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",48,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",49,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",50,0)
EXIT3 ; Exit pt
"RTN","IBCNERPA",51,0)
 Q
"RTN","IBCNERPA",52,0)
 ;
"RTN","IBCNERPA",53,0)
 ;
"RTN","IBCNERPA",54,0)
EN6(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP6
"RTN","IBCNERPA",55,0)
 ;
"RTN","IBCNERPA",56,0)
 ; Init vars
"RTN","IBCNERPA",57,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBBPY,IBEPY,IBSRT,IBDTL
"RTN","IBCNERPA",58,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNERPA",59,0)
 ;
"RTN","IBCNERPA",60,0)
 S IBBDT=IBCNESPC("BEGDT")
"RTN","IBCNERPA",61,0)
 S IBEDT=IBCNESPC("ENDDT")
"RTN","IBCNERPA",62,0)
 S IBBPY=IBCNESPC("BEGPYR")
"RTN","IBCNERPA",63,0)
 S IBEPY=IBCNESPC("ENDPYR")
"RTN","IBCNERPA",64,0)
 S IBDTL=IBCNESPC("DTL")
"RTN","IBCNERPA",65,0)
 S IBSRT=IBCNESPC("SORT")
"RTN","IBCNERPA",66,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPA",67,0)
 ;
"RTN","IBCNERPA",68,0)
 ; Determine IO parameters
"RTN","IBCNERPA",69,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",70,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",71,0)
 ;
"RTN","IBCNERPA",72,0)
 D PRINT^IBCNERP6(IBCNERTN,IBBDT,IBEDT,IBBPY,IBEPY,IBDTL,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPA",73,0)
 I $G(ZTSTOP)!IBPXT G EXIT6
"RTN","IBCNERPA",74,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",75,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",76,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",77,0)
 ;
"RTN","IBCNERPA",78,0)
EXIT6 ; Exit pt
"RTN","IBCNERPA",79,0)
 Q
"RTN","IBCNERPA",80,0)
 ;
"RTN","IBCNERPB")
0^74^B45852910
"RTN","IBCNERPB",1,0)
IBCNERPB ;DAOU/RO -  IIV PAYER LINK REPORT ;AUG-2003
"RTN","IBCNERPB",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERPB",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPB",4,0)
 ;
"RTN","IBCNERPB",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBCNERPB",6,0)
 ;
"RTN","IBCNERPB",7,0)
 ; Input parameters: N/A
"RTN","IBCNERPB",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERPB",9,0)
 ;  IBCNERTN = "IBCNERPB" (current routine name for queueing the
"RTN","IBCNERPB",10,0)
 ;   COMPILE process)
"RTN","IBCNERPB",11,0)
 ; ********
"RTN","IBCNERPB",12,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPB",13,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPB",14,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPB",15,0)
 ;  IBCNESPC("PPYR")=single Payer name or '' for all
"RTN","IBCNERPB",16,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPB",17,0)
 ;
"RTN","IBCNERPB",18,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPB",19,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPB",20,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPB",21,0)
 ; Only call this routine at a tag
"RTN","IBCNERPB",22,0)
 Q
"RTN","IBCNERPB",23,0)
 ;
"RTN","IBCNERPB",24,0)
EN ; Main entry pt
"RTN","IBCNERPB",25,0)
 ; Init vars
"RTN","IBCNERPB",26,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERPB",27,0)
 ;
"RTN","IBCNERPB",28,0)
 S STOP=0
"RTN","IBCNERPB",29,0)
 S IBCNERTN="IBCNERPB"
"RTN","IBCNERPB",30,0)
 W @IOF
"RTN","IBCNERPB",31,0)
 W !,"IIV Payer Link Report",!
"RTN","IBCNERPB",32,0)
 W !,"In order for an Insurance Company to be eligible for electronic insurance"
"RTN","IBCNERPB",33,0)
 W !,"eligibility communications via the IIV software, the Insurance Company"
"RTN","IBCNERPB",34,0)
 W !,"needs to be linked to an appropriate payer from the National EDI Payer list."
"RTN","IBCNERPB",35,0)
 W !,"The National EDI Payer list contains the names of the payers that are"
"RTN","IBCNERPB",36,0)
 W !,"currently participating with the IIV process."
"RTN","IBCNERPB",37,0)
 W !!,"This report option provides information to assist with finding unlinked"
"RTN","IBCNERPB",38,0)
 W !,"insurance companies or payers, which can subsequently be linked through the"
"RTN","IBCNERPB",39,0)
 W !,"INSURANCE COMPANY EDIT option."
"RTN","IBCNERPB",40,0)
 ;
"RTN","IBCNERPB",41,0)
 ; Report type
"RTN","IBCNERPB",42,0)
R05 D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",43,0)
 S IBCNESPC("PPYR")=""
"RTN","IBCNERPB",44,0)
 ; If rpt by ins company, go to questions
"RTN","IBCNERPB",45,0)
 I $G(IBCNESPC("REP"))=2 G R120
"RTN","IBCNERPB",46,0)
 ; Payer type params
"RTN","IBCNERPB",47,0)
R20 D PAYER I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",48,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("PTYPE")=3 G R30
"RTN","IBCNERPB",49,0)
 ; Payer details
"RTN","IBCNERPB",50,0)
R25 D PTYPE I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",51,0)
 S IBCNESPC("PDET")=2 I IBCNESPC("PTYPE")=1 G R40
"RTN","IBCNERPB",52,0)
 ; insurance company details
"RTN","IBCNERPB",53,0)
R30 D PDET I STOP G:$$STOP EXIT G R25
"RTN","IBCNERPB",54,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",55,0)
 ; Type of data to return param
"RTN","IBCNERPB",56,0)
R40 D PSORT I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",57,0)
 G R100
"RTN","IBCNERPB",58,0)
 ; Payer type params
"RTN","IBCNERPB",59,0)
R120 D ITYPE^IBCNERPC I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",60,0)
 ; Partial Ins Name to include
"RTN","IBCNERPB",61,0)
R130 D IMAT^IBCNERPC I STOP G:$$STOP EXIT G R120
"RTN","IBCNERPB",62,0)
 I IBCNESPC("ITYPE")=1 S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",63,0)
 ; Type of data to return param
"RTN","IBCNERPB",64,0)
R140 D ISORT^IBCNERPC I STOP G:$$STOP EXIT G R130
"RTN","IBCNERPB",65,0)
 ;
"RTN","IBCNERPB",66,0)
 ; Select output device
"RTN","IBCNERPB",67,0)
R100 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",68,0)
 G EXIT
"RTN","IBCNERPB",69,0)
 ;
"RTN","IBCNERPB",70,0)
EXIT ; Exit pt
"RTN","IBCNERPB",71,0)
 Q
"RTN","IBCNERPB",72,0)
 ;
"RTN","IBCNERPB",73,0)
 ;
"RTN","IBCNERPB",74,0)
COMPILE(IBCNERTN,IBCNESPC) ;
"RTN","IBCNERPB",75,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERPB",76,0)
 ; Input params:
"RTN","IBCNERPB",77,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",78,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",79,0)
 ;
"RTN","IBCNERPB",80,0)
 ; Init scratch globals
"RTN","IBCNERPB",81,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",82,0)
 ; Compile
"RTN","IBCNERPB",83,0)
 I IBCNERTN="IBCNERPB" D EN^IBCNERPC(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",84,0)
 ; Print
"RTN","IBCNERPB",85,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERPB",86,0)
 . I IBCNERTN="IBCNERPB" D EN3^IBCNERPD(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",87,0)
 ; Close device
"RTN","IBCNERPB",88,0)
 D ^%ZISC
"RTN","IBCNERPB",89,0)
 ; Kill scratch globals
"RTN","IBCNERPB",90,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",91,0)
 ; Purge task record
"RTN","IBCNERPB",92,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERPB",93,0)
 ;
"RTN","IBCNERPB",94,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERPB",95,0)
 Q
"RTN","IBCNERPB",96,0)
 ;
"RTN","IBCNERPB",97,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERPB",98,0)
 ; Init vars
"RTN","IBCNERPB",99,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",100,0)
 ;
"RTN","IBCNERPB",101,0)
 W !
"RTN","IBCNERPB",102,0)
 S DIR(0)="Y"
"RTN","IBCNERPB",103,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERPB",104,0)
 S DIR("B")="YES"
"RTN","IBCNERPB",105,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERPB",106,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERPB",107,0)
 D ^DIR K DIR
"RTN","IBCNERPB",108,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERPB",109,0)
 I 'Y S STOP=0
"RTN","IBCNERPB",110,0)
 ;
"RTN","IBCNERPB",111,0)
STOPX ; STOP exit pt
"RTN","IBCNERPB",112,0)
 Q Y
"RTN","IBCNERPB",113,0)
 ;
"RTN","IBCNERPB",114,0)
RTYPE ; Prompt to allow users to select main report option
"RTN","IBCNERPB",115,0)
 ; Init vars
"RTN","IBCNERPB",116,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",117,0)
 ;
"RTN","IBCNERPB",118,0)
 S DIR(0)="S^1:Payer List;2:Insurance Company List"
"RTN","IBCNERPB",119,0)
 S DIR("A")="Select a report option"
"RTN","IBCNERPB",120,0)
 S DIR("B")=1
"RTN","IBCNERPB",121,0)
 S DIR("?",1)="  1 - Payer List:   This option lists the payers in the National"
"RTN","IBCNERPB",122,0)
 S DIR("?",2)="                    Payer list, and optionally provides information about"
"RTN","IBCNERPB",123,0)
 S DIR("?",3)="                    the insurance companies that are linked to that payer"
"RTN","IBCNERPB",124,0)
 S DIR("?",4)="  2 - Insurance"
"RTN","IBCNERPB",125,0)
 S DIR("?",5)="      Company List: This option lists insurance companies and"
"RTN","IBCNERPB",126,0)
 S DIR("?")="                    optionally displays linked payer information"
"RTN","IBCNERPB",127,0)
 D ^DIR K DIR
"RTN","IBCNERPB",128,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERPB",129,0)
 S IBCNESPC("REP")=Y
"RTN","IBCNERPB",130,0)
 ;
"RTN","IBCNERPB",131,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERPB",132,0)
 Q
"RTN","IBCNERPB",133,0)
 ;
"RTN","IBCNERPB",134,0)
PTYPE ; Prompt to select Payer Type to include
"RTN","IBCNERPB",135,0)
 ; Init vars
"RTN","IBCNERPB",136,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",137,0)
 ;
"RTN","IBCNERPB",138,0)
 S DIR(0)="S^1:Unlinked Payers;2:Linked Payers;3:ALL Payers"
"RTN","IBCNERPB",139,0)
 S DIR("A")="Select the type of payers to display"
"RTN","IBCNERPB",140,0)
 S DIR("B")="3"
"RTN","IBCNERPB",141,0)
 S DIR("?",1)="  1 - Only payers with no active insurance companies linked"
"RTN","IBCNERPB",142,0)
 S DIR("?",2)="  2 - Only payers with at least one insurance company linked"
"RTN","IBCNERPB",143,0)
 S DIR("?")="  3 - ALL Payers"
"RTN","IBCNERPB",144,0)
 D ^DIR K DIR
"RTN","IBCNERPB",145,0)
 I $D(DIRUT) S STOP=1 G PTYPEX
"RTN","IBCNERPB",146,0)
 S IBCNESPC("PTYPE")=Y
"RTN","IBCNERPB",147,0)
 ;
"RTN","IBCNERPB",148,0)
PTYPEX ; TYPE exit pt
"RTN","IBCNERPB",149,0)
 Q
"RTN","IBCNERPB",150,0)
PAYER ; Select Payer - File #365.12
"RTN","IBCNERPB",151,0)
 ; Init vars
"RTN","IBCNERPB",152,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERPB",153,0)
 ;
"RTN","IBCNERPB",154,0)
 W !!!
"RTN","IBCNERPB",155,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPB",156,0)
 S DIC("A")=$$FO^IBCNEUT1("Select a Payer (RETURN for ALL Payers): ",39,"L")
"RTN","IBCNERPB",157,0)
 ; Do not allow editing of '~NO PAYER' entry
"RTN","IBCNERPB",158,0)
 S DIC("S")="I $P(^(0),U,1)'=""~NO PAYER"""
"RTN","IBCNERPB",159,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPB",160,0)
 D ^DIC
"RTN","IBCNERPB",161,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G PAYERX
"RTN","IBCNERPB",162,0)
 I Y=-1 S Y=""
"RTN","IBCNERPB",163,0)
 S IBCNESPC("PPYR")=Y
"RTN","IBCNERPB",164,0)
PAYERX ; Prompt for ending Payer value
"RTN","IBCNERPB",165,0)
 Q
"RTN","IBCNERPB",166,0)
PDET ; Prompt to select to display Insurance Company details to include
"RTN","IBCNERPB",167,0)
 ; Init vars
"RTN","IBCNERPB",168,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",169,0)
 ;
"RTN","IBCNERPB",170,0)
 S DIR(0)="S^1:List linked insurance company detail;2:Do not list linked insurance company detail"
"RTN","IBCNERPB",171,0)
 S DIR("A")="Select insurance company detail option"
"RTN","IBCNERPB",172,0)
 S DIR("B")="1"
"RTN","IBCNERPB",173,0)
 S DIR("?",1)="  1 - Include a list of insurance companies linked to the payers"
"RTN","IBCNERPB",174,0)
 S DIR("?")="  2 - Do not list linked insurance companies, total number only"
"RTN","IBCNERPB",175,0)
 D ^DIR K DIR
"RTN","IBCNERPB",176,0)
 I $D(DIRUT) S STOP=1 G PDETEX
"RTN","IBCNERPB",177,0)
 S IBCNESPC("PDET")=Y
"RTN","IBCNERPB",178,0)
 ;
"RTN","IBCNERPB",179,0)
PDETEX ; TYPE exit pt
"RTN","IBCNERPB",180,0)
 Q
"RTN","IBCNERPB",181,0)
 ;
"RTN","IBCNERPB",182,0)
PSORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPB",183,0)
 ; Init vars
"RTN","IBCNERPB",184,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",185,0)
 ;
"RTN","IBCNERPB",186,0)
 S DIR(0)="S^1:Payer Name;2:VA National Payer ID;3:Nationally Enabled Status;4:Locally Enabled Status;5:# of Linked Insurance Companies"
"RTN","IBCNERPB",187,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPB",188,0)
 S DIR("B")=1
"RTN","IBCNERPB",189,0)
 S DIR("?")="  Select a data field by which this report should be primarily sorted."
"RTN","IBCNERPB",190,0)
 D ^DIR K DIR
"RTN","IBCNERPB",191,0)
 I $D(DIRUT) S STOP=1 G PSORTX
"RTN","IBCNERPB",192,0)
 S IBCNESPC("PSORT")=Y
"RTN","IBCNERPB",193,0)
 ;
"RTN","IBCNERPB",194,0)
PSORTX ; SORT exit pt
"RTN","IBCNERPB",195,0)
 Q
"RTN","IBCNERPB",196,0)
 ;
"RTN","IBCNERPB",197,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERPB",198,0)
 ;
"RTN","IBCNERPB",199,0)
 ; Input params:
"RTN","IBCNERPB",200,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",201,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",202,0)
 ;
"RTN","IBCNERPB",203,0)
 ; Init vars
"RTN","IBCNERPB",204,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERPB",205,0)
 ;
"RTN","IBCNERPB",206,0)
 S ZTRTN="COMPILE^IBCNERPB("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERPB",207,0)
 S ZTDESC="IBCNE IIV Payer Link Report"
"RTN","IBCNERPB",208,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERPB",209,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERPB",210,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERPB",211,0)
 I POP S STOP=1
"RTN","IBCNERPB",212,0)
 ;
"RTN","IBCNERPB",213,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERPB",214,0)
 Q
"RTN","IBCNERPC")
0^75^B45629697
"RTN","IBCNERPC",1,0)
IBCNERPC ;DAOU/RO - IIV PAYER LINK REPORT COMPILE ;AUG-2003
"RTN","IBCNERPC",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERPC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPC",4,0)
 ;
"RTN","IBCNERPC",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERPC",6,0)
 ;
"RTN","IBCNERPC",7,0)
 ; Input vars from IBCNERPB:
"RTN","IBCNERPC",8,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPC",9,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPC",10,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPC",11,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPC",12,0)
 ;
"RTN","IBCNERPC",13,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPC",14,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPC",15,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPC",16,0)
 ;
"RTN","IBCNERPC",17,0)
 ; Output vars used by IBCNERPC:
"RTN","IBCNERPC",18,0)
 ;  
"RTN","IBCNERPC",19,0)
 ;   IBCNERTN="IBCNERPB"
"RTN","IBCNERPC",20,0)
 ;   SORT1=depends on sorting option chosen
"RTN","IBCNERPC",21,0)
 ;   SORT2=Payer Name (Report by Payer) or Ins Company Name (if report is Insurance)
"RTN","IBCNERPC",22,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT) 
"RTN","IBCNERPC",23,0)
 ;   CNT=Seq ct
"RTN","IBCNERPC",24,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,1) 
"RTN","IBCNERPC",25,0)
 ;
"RTN","IBCNERPC",26,0)
 ; Must call at EN
"RTN","IBCNERPC",27,0)
 Q
"RTN","IBCNERPC",28,0)
 ;
"RTN","IBCNERPC",29,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERPC",30,0)
 ; Init
"RTN","IBCNERPC",31,0)
 N IBTYP,IBCT,IBCTX
"RTN","IBCNERPC",32,0)
 ;
"RTN","IBCNERPC",33,0)
 N IBDET,IBSRT,IBPY,IBVAID,IBPROF,IBINST,IBNAACT,IBLOACT,IBINS,IBINST
"RTN","IBCNERPC",34,0)
 N IBINSN,IBAPP,IBPYR,SORT1,SORT2,IBSRT,IBMAT,IBPPYR
"RTN","IBCNERPC",35,0)
 ;
"RTN","IBCNERPC",36,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERPC",37,0)
 ;
"RTN","IBCNERPC",38,0)
 ; Temp ct
"RTN","IBCNERPC",39,0)
 S IBCT=0
"RTN","IBCNERPC",40,0)
 ;
"RTN","IBCNERPC",41,0)
 ; Kill scratch globals
"RTN","IBCNERPC",42,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPC",43,0)
 ;
"RTN","IBCNERPC",44,0)
 ;
"RTN","IBCNERPC",45,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPC",46,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPC",47,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPC",48,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPC",49,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPC",50,0)
 ;
"RTN","IBCNERPC",51,0)
 ; Ins Report
"RTN","IBCNERPC",52,0)
 I IBREP=2 G INS
"RTN","IBCNERPC",53,0)
 ;
"RTN","IBCNERPC",54,0)
 ; Loop thru the IIV payer File (#365.12)
"RTN","IBCNERPC",55,0)
 S IBPY=0,SORT1=""
"RTN","IBCNERPC",56,0)
 F  S IBPY=$O(^IBE(365.12,IBPY)) Q:IBPY'?1N.N  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",57,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",58,0)
 . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",59,0)
 . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=1 S SORT1=IBPYR
"RTN","IBCNERPC",60,0)
 . S SORT2=IBPYR
"RTN","IBCNERPC",61,0)
 . I IBPYR=""!(IBPYR="~NO PAYER") Q
"RTN","IBCNERPC",62,0)
 . I IBPPYR'="",IBPY'=$P(IBPPYR,U) Q
"RTN","IBCNERPC",63,0)
 . ; get VA national ID
"RTN","IBCNERPC",64,0)
 . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=2 S SORT1=IBVAID
"RTN","IBCNERPC",65,0)
 . ; get the EDI numbers (professional and institutional)
"RTN","IBCNERPC",66,0)
 . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",67,0)
 . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",68,0)
 . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",69,0)
 . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",70,0)
 . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",71,0)
 . ; if no sort value, use 0
"RTN","IBCNERPC",72,0)
 . I IBSRT=3 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",73,0)
 . I IBSRT=4 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",74,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",75,0)
 . ; if sorting by count and detail, need to figure count first else sort will not work
"RTN","IBCNERPC",76,0)
 . I IBSRT=5,IBTYP>1,IBDET=1 D  S SORT1=-IBCTX
"RTN","IBCNERPC",77,0)
 . . S IBCTX=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",78,0)
 . . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""  S IBCTX=IBCTX+1
"RTN","IBCNERPC",79,0)
 . ; search for insurance carriers for this payer
"RTN","IBCNERPC",80,0)
 . S IBCT=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",81,0)
 . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""
"RTN","IBCNERPC",82,0)
 . . S IBCT=IBCT+1 I IBTYP=1 Q
"RTN","IBCNERPC",83,0)
 . . ; save off address and EDI#'s for Insurance carrier
"RTN","IBCNERPC",84,0)
 . . I IBDET=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY,IBINSN,IBINS)=$P($G(^DIC(36,IBINS,.11)),U,1,6)_U_$P($G(^DIC(36,IBINS,3)),U,2)_U_$P($G(^DIC(36,IBINS,3)),U,4)
"RTN","IBCNERPC",85,0)
 . I IBTYP=1,IBCT>0 Q
"RTN","IBCNERPC",86,0)
 . I IBTYP=2,IBCT=0 Q
"RTN","IBCNERPC",87,0)
 . ; use reverse sort for count
"RTN","IBCNERPC",88,0)
 . I IBSRT=5 S SORT1=-IBCT
"RTN","IBCNERPC",89,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY)=IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT
"RTN","IBCNERPC",90,0)
 G EXIT
"RTN","IBCNERPC",91,0)
 ;
"RTN","IBCNERPC",92,0)
INS ;
"RTN","IBCNERPC",93,0)
 S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPC",94,0)
 S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPC",95,0)
 S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPC",96,0)
 ; Loop thru the Insurance company file
"RTN","IBCNERPC",97,0)
 S IBINS=0
"RTN","IBCNERPC",98,0)
 F  S IBINS=$O(^DIC(36,IBINS)) Q:IBINS'?1N.N  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",99,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",100,0)
 . S (SORT1,IBPYR,IBNAACT,IBLOACT,IBPROF,IBINST,IBVAID)=""
"RTN","IBCNERPC",101,0)
 . S IBINSN=$P($G(^DIC(36,IBINS,0)),U) I IBSRT=1 S SORT1=IBINSN
"RTN","IBCNERPC",102,0)
 . S SORT2=IBINSN
"RTN","IBCNERPC",103,0)
 . I IBINSN="" Q
"RTN","IBCNERPC",104,0)
 . I IBMAT'="",'$F(IBINSN,IBMAT) Q
"RTN","IBCNERPC",105,0)
 . ; get payer
"RTN","IBCNERPC",106,0)
 . S IBPY=$P($G(^DIC(36,IBINS,3)),U,10)
"RTN","IBCNERPC",107,0)
 . I IBTYP=1,IBPY'="" Q
"RTN","IBCNERPC",108,0)
 . I IBTYP=2,IBPY="" Q
"RTN","IBCNERPC",109,0)
 . I IBPY'="" D
"RTN","IBCNERPC",110,0)
 . . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",111,0)
 . . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=2 S SORT1=IBPYR
"RTN","IBCNERPC",112,0)
 . . ; get VA national ID
"RTN","IBCNERPC",113,0)
 . . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=3 S SORT1=IBVAID
"RTN","IBCNERPC",114,0)
 . . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",115,0)
 . . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",116,0)
 . . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",117,0)
 . . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",118,0)
 . . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",119,0)
 . . I IBSRT=4 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",120,0)
 . . I IBSRT=5 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",121,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",122,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBINS)=IBPYR_U_IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT_U_$G(^DIC(36,IBINS,.11))_U_"~"_$G(^DIC(36,IBINS,3))
"RTN","IBCNERPC",123,0)
 ;
"RTN","IBCNERPC",124,0)
EXIT ;
"RTN","IBCNERPC",125,0)
 Q
"RTN","IBCNERPC",126,0)
 ; Lines moved from IBCNERPB
"RTN","IBCNERPC",127,0)
ITYPE ; Prompt to select Insurance Company type to include
"RTN","IBCNERPC",128,0)
 ; Init vars
"RTN","IBCNERPC",129,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",130,0)
 ;
"RTN","IBCNERPC",131,0)
 S DIR(0)="S^1:Unlinked insurance companies;2:Linked insurance companies;3:All insurance companies"
"RTN","IBCNERPC",132,0)
 S DIR("A")="Select type of insurance companies to display"
"RTN","IBCNERPC",133,0)
 S DIR("B")="3"
"RTN","IBCNERPC",134,0)
 S DIR("?",1)="  1 - Only insurance companies that are not currently linked to a payer"
"RTN","IBCNERPC",135,0)
 S DIR("?",2)="  2 - Only insurance companies that are currently linked to a payer"
"RTN","IBCNERPC",136,0)
 S DIR("?")="  3 - ALL insurance companies"
"RTN","IBCNERPC",137,0)
 D ^DIR K DIR
"RTN","IBCNERPC",138,0)
 I $D(DIRUT) S STOP=1 G ITYPEX
"RTN","IBCNERPC",139,0)
 S IBCNESPC("ITYPE")=Y
"RTN","IBCNERPC",140,0)
 ;
"RTN","IBCNERPC",141,0)
ITYPEX ; TYPE exit pt
"RTN","IBCNERPC",142,0)
 Q
"RTN","IBCNERPC",143,0)
ISORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPC",144,0)
 ; Init vars
"RTN","IBCNERPC",145,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",146,0)
 ;
"RTN","IBCNERPC",147,0)
 S DIR(0)="S^1:Insurance Company Name;2:Payer Name;3:VA National Payer ID;4:Nationally Enabled Status;5:Locally Enabled Status"
"RTN","IBCNERPC",148,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPC",149,0)
 S DIR("B")=1
"RTN","IBCNERPC",150,0)
 S DIR("?")="  Select the data field by which this report should be primarily sorted."
"RTN","IBCNERPC",151,0)
 D ^DIR K DIR
"RTN","IBCNERPC",152,0)
 I $D(DIRUT) S STOP=1 G ISORTX
"RTN","IBCNERPC",153,0)
 S IBCNESPC("ISORT")=Y
"RTN","IBCNERPC",154,0)
 ;
"RTN","IBCNERPC",155,0)
ISORTX ; SORT exit pt
"RTN","IBCNERPC",156,0)
 Q
"RTN","IBCNERPC",157,0)
IMAT ; Prompt to allow users to select partial Ins carrier to include
"RTN","IBCNERPC",158,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",159,0)
 ;
"RTN","IBCNERPC",160,0)
 W !
"RTN","IBCNERPC",161,0)
 S DIR(0)="FO"
"RTN","IBCNERPC",162,0)
 S DIR("A")="Enter an insurance company search keyword (RETURN for ALL)"
"RTN","IBCNERPC",163,0)
 S DIR("B")=""
"RTN","IBCNERPC",164,0)
 S DIR("?",1)="     Enter a value to match insurance company names with."
"RTN","IBCNERPC",165,0)
 S DIR("?",2)="     Simply hit RETURN to select ALL or enter a keyword"
"RTN","IBCNERPC",166,0)
 S DIR("?",3)="     (ex. 'CIGNA' would return CIGNA, CIGNA HICN, NATIONAL CIGNA,"
"RTN","IBCNERPC",167,0)
 S DIR("?")="     REGION 1 CIGNA and any others with the term 'CIGNA' in it)"
"RTN","IBCNERPC",168,0)
 D ^DIR K DIR
"RTN","IBCNERPC",169,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G IMATX
"RTN","IBCNERPC",170,0)
 S IBCNESPC("IMAT")=Y
"RTN","IBCNERPC",171,0)
 ;                                                                       
"RTN","IBCNERPC",172,0)
IMATX Q
"RTN","IBCNERPD")
0^76^B45290618
"RTN","IBCNERPD",1,0)
IBCNERPD ;DAOU/RO - IIV PAYER LINK REPORT PRINT;AUG-2003
"RTN","IBCNERPD",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNERPD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNERPD",4,0)
 ;
"RTN","IBCNERPD",5,0)
 ; IIV - Insurance Identification and Verification
"RTN","IBCNERPD",6,0)
 ;
"RTN","IBCNERPD",7,0)
 ; Called by IBCNERPB
"RTN","IBCNERPD",8,0)
 ; Input from IBCNERPB/C:
"RTN","IBCNERPD",9,0)
 ;  
"RTN","IBCNERPD",10,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0)
"RTN","IBCNERPD",11,0)
 ;    IBCNERTN="IBCNERPB", 
"RTN","IBCNERPD",12,0)
 ;    CT=Seq ct
"RTN","IBCNERPD",13,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) 
"RTN","IBCNERPD",14,0)
 ;
"RTN","IBCNERPD",15,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  
"RTN","IBCNERPD",16,0)
 N IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPD",17,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IBMAT,IBREP,IBDET,IBPPYR,ZZ
"RTN","IBCNERPD",18,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPD",19,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPD",20,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPD",21,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPD",22,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPD",23,0)
 ; Ins Report
"RTN","IBCNERPD",24,0)
 I IBREP=2 D
"RTN","IBCNERPD",25,0)
 . S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPD",26,0)
 . S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPD",27,0)
 . S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPD",28,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPD",29,0)
 ; Determine IO params
"RTN","IBCNERPD",30,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPD",31,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPD",32,0)
 D PRINT(IBCNERTN,IBREP,IBDET,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPD",33,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPD",34,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPD",35,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPD",36,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",37,0)
EXIT3 ; Exit pt
"RTN","IBCNERPD",38,0)
 Q
"RTN","IBCNERPD",39,0)
 ;
"RTN","IBCNERPD",40,0)
PRINT(RTN,REP,DET,TYP,SRT,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERPD",41,0)
 ; Input: RTN="IBCENRPB"
"RTN","IBCNERPD",42,0)
 ;   PGC=page ct, PXT=exit flg,
"RTN","IBCNERPD",43,0)
 ;  MAX=max line ct/pg, CRT=1/0
"RTN","IBCNERPD",44,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT
"RTN","IBCNERPD",45,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPD",46,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPD",47,0)
 S (SORT1,SORT2)=""
"RTN","IBCNERPD",48,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERPD",49,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",50,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",51,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",52,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERPD",53,0)
 . . . D DATA(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERPD",54,0)
 ;
"RTN","IBCNERPD",55,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",56,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",57,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERPD",58,0)
PRINTX ;
"RTN","IBCNERPD",59,0)
 Q
"RTN","IBCNERPD",60,0)
 ;
"RTN","IBCNERPD",61,0)
HEADER ; Print hdr info
"RTN","IBCNERPD",62,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERPD",63,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERPD",64,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERPD",65,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",66,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERPD",67,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERPD",68,0)
 S PGC=PGC+1
"RTN","IBCNERPD",69,0)
 W @IOF,!,?1,"IIV Payer Link Report"
"RTN","IBCNERPD",70,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=79-$L(HDR)
"RTN","IBCNERPD",71,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",72,0)
 W !,?1,"Report Option: "_$S(REP=1:"Payer List",1:"Insurance Company List")
"RTN","IBCNERPD",73,0)
 I REP=1 D
"RTN","IBCNERPD",74,0)
 . S HDR=$S(TYP=1:"Unlinked Payers Only",TYP=2:"Linked Payers Only",1:"All Payers")
"RTN","IBCNERPD",75,0)
 . I TYP=3 S HDR=HDR_", "_$S(DET=1:"With Ins. Co. Detail",1:"Without Ins. Co. Detail")
"RTN","IBCNERPD",76,0)
 I REP=2 D
"RTN","IBCNERPD",77,0)
 . S HDR=$S(TYP=1:"Unlinked Insurance Companies Only",TYP=2:"Linked Insurance Companies Only",1:"All Insurance Companies")
"RTN","IBCNERPD",78,0)
 S OFFSET=79-$L(HDR)
"RTN","IBCNERPD",79,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",80,0)
 W !
"RTN","IBCNERPD",81,0)
 I REP=1 D
"RTN","IBCNERPD",82,0)
 . I IBPPYR'="" W ?1,"For Single Payer: ",$P(IBPPYR,"^",2)
"RTN","IBCNERPD",83,0)
 . W !,"                           National  # Linked  Nationally  Locally  Prof.  Inst."
"RTN","IBCNERPD",84,0)
 . W !,"Payer Name:                Payer ID  Ins. Co.  Active?     Active?  EDI#   EDI#"
"RTN","IBCNERPD",85,0)
 I REP=2 D
"RTN","IBCNERPD",86,0)
 . I IBMAT'="" W ?1,"Only Insurance Companies that match: ",IBMAT
"RTN","IBCNERPD",87,0)
 . W !,"                                                        Nat.  Loc.  Prof.  Inst."
"RTN","IBCNERPD",88,0)
 . W !,"Insurance Company:                                      Act?  Act?  EDI#   EDI#"
"RTN","IBCNERPD",89,0)
 . I TYP'=1 W !,"   Payer:",?29,"VA ID"
"RTN","IBCNERPD",90,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNERPD",91,0)
HEADERX ;
"RTN","IBCNERPD",92,0)
 Q
"RTN","IBCNERPD",93,0)
 ;
"RTN","IBCNERPD",94,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERPD",95,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERPD",96,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERPD",97,0)
 S NWPG=0
"RTN","IBCNERPD",98,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERPD",99,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERPD",100,0)
 . W !,?1,DISPDATA(LNCT) Q
"RTN","IBCNERPD",101,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERPD",102,0)
 . I NWPG S NWPG=0
"RTN","IBCNERPD",103,0)
 . Q
"RTN","IBCNERPD",104,0)
LINEX Q
"RTN","IBCNERPD",105,0)
 ;
"RTN","IBCNERPD",106,0)
DATA(DISPDATA) ;  Build disp lines
"RTN","IBCNERPD",107,0)
 N LCT,CT,CT2,RPTDATA,XX,YY,ZZ
"RTN","IBCNERPD",108,0)
 ; Merge into local array
"RTN","IBCNERPD",109,0)
 N %X,%Y
"RTN","IBCNERPD",110,0)
 S %X="^TMP($J,RTN,SORT1,SORT2,CNT,"
"RTN","IBCNERPD",111,0)
 S %Y="RPTDATA("
"RTN","IBCNERPD",112,0)
 I $D(^TMP($J,RTN,SORT1,SORT2,CNT))#10=1 S RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPD",113,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNERPD",114,0)
 ; Build
"RTN","IBCNERPD",115,0)
 ;
"RTN","IBCNERPD",116,0)
 ; PAYER REPORT
"RTN","IBCNERPD",117,0)
 I REP=1 D
"RTN","IBCNERPD",118,0)
 . ; 1st line is payer
"RTN","IBCNERPD",119,0)
 . S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,26,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"     "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),12,"L")
"RTN","IBCNERPD",120,0)
 . S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),9,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,3),4,"L")
"RTN","IBCNERPD",121,0)
 . ; See if detail is required
"RTN","IBCNERPD",122,0)
 . I DET=1 D
"RTN","IBCNERPD",123,0)
 . . I $O(RPTDATA(""))'="" S LCT=LCT+1,DISPDATA(LCT)="   Linked Insurance Companies:"
"RTN","IBCNERPD",124,0)
 . . S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",125,0)
 . . . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",126,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)="   "_$$FO^IBCNEUT1(XX,34,"L")_"  "_$$FO^IBCNEUT1($P(ZZ,U,1),12,"L")_" "_$E($P(ZZ,U,4),1,10)
"RTN","IBCNERPD",127,0)
 . . . ; don't display ','s if no address/state on file
"RTN","IBCNERPD",128,0)
 . . . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",129,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",67-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",130,0)
 . . . ; display EDI#'s
"RTN","IBCNERPD",131,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),7,"L")_$$FO^IBCNEUT1($P(ZZ,U,8),4,"L")
"RTN","IBCNERPD",132,0)
 ;
"RTN","IBCNERPD",133,0)
 ; Insurance Company Report
"RTN","IBCNERPD",134,0)
 I REP=2 D
"RTN","IBCNERPD",135,0)
 . ; Ins carrier
"RTN","IBCNERPD",136,0)
 . S DISPDATA(1)=$$FO^IBCNEUT1(SORT2,67,"L")
"RTN","IBCNERPD",137,0)
 . ; Ins address
"RTN","IBCNERPD",138,0)
 . S ZZ=$P(RPTDATA,"~",2),DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($P(ZZ,U,2),7,"2")_$$FO^IBCNEUT1($P(ZZ,U,4),4,"L")
"RTN","IBCNERPD",139,0)
 . S DISPDATA(2)="        "_$P(RPTDATA,U,8)_", "_$P(RPTDATA,U,11)
"RTN","IBCNERPD",140,0)
 . ; Add state/zip if defined
"RTN","IBCNERPD",141,0)
 . I $P(RPTDATA,U,12)'="" S DISPDATA(2)=DISPDATA(2)_", "_$P($G(^DIC(5,$P(RPTDATA,U,12)+0,0)),U,2)_" "_$$FO^IBCNEUT1($P(RPTDATA,U,13),5,"L")
"RTN","IBCNERPD",142,0)
 . ; if no payer is linked AND displaying payers
"RTN","IBCNERPD",143,0)
 . I $P(RPTDATA,U)="",TYP'=1 S DISPDATA(3)="   ** NOT CURRENTLY LINKED **",LCT=4,DISPDATA(4)="  " Q
"RTN","IBCNERPD",144,0)
 . ; if no payer and not displaying then quit
"RTN","IBCNERPD",145,0)
 . I $P(RPTDATA,U)="" S LCT=3,DISPDATA(3)="  " Q
"RTN","IBCNERPD",146,0)
 . ; Display Payer Info Line
"RTN","IBCNERPD",147,0)
 . S DISPDATA(3)="  "_$$FO^IBCNEUT1($P(RPTDATA,U,1),26,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),27,"L")_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),6,"L")
"RTN","IBCNERPD",148,0)
 . S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),6,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,4),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,4),4,"L")
"RTN","IBCNERPD",149,0)
 . S LCT=4,DISPDATA(4)=" "
"RTN","IBCNERPD",150,0)
 S LCT=LCT+1
"RTN","IBCNERPD",151,0)
 Q
"RTN","IBCNEUT1")
0^3^B33603643
"RTN","IBCNEUT1",1,0)
IBCNEUT1 ;DAOU/ESG - IIV MISC. UTILITIES ;03-JUN-2002
"RTN","IBCNEUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT1",4,0)
 ;
"RTN","IBCNEUT1",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT1",6,0)
 Q
"RTN","IBCNEUT1",7,0)
 ;
"RTN","IBCNEUT1",8,0)
FO(VALUE,LENGTH,JUSTIFY,FILL,TRUNC) ; Formatted output function
"RTN","IBCNEUT1",9,0)
 ;
"RTN","IBCNEUT1",10,0)
 ; Input parameters:
"RTN","IBCNEUT1",11,0)
 ;   VALUE    the data to get formatted (required)
"RTN","IBCNEUT1",12,0)
 ;   LENGTH   the resulting length of the formatted string (required)
"RTN","IBCNEUT1",13,0)
 ;   JUSTIFY  "L" or "R" to indicate left or right justification
"RTN","IBCNEUT1",14,0)
 ;               Default is "L" if not passed
"RTN","IBCNEUT1",15,0)
 ;   FILL     the character to fill in the spaces
"RTN","IBCNEUT1",16,0)
 ;               Default is a space if not passed
"RTN","IBCNEUT1",17,0)
 ;   TRUNC    Whether or not to truncate Value if its longer than length
"RTN","IBCNEUT1",18,0)
 ;               Default is Yes, to truncate if not passed
"RTN","IBCNEUT1",19,0)
 ;
"RTN","IBCNEUT1",20,0)
 NEW PAD,Z
"RTN","IBCNEUT1",21,0)
 I LENGTH>200 S LENGTH=200               ; reasonable length
"RTN","IBCNEUT1",22,0)
 S JUSTIFY=$G(JUSTIFY,"L")               ; default Left
"RTN","IBCNEUT1",23,0)
 S FILL=$E($G(FILL)_" ")                 ; default space
"RTN","IBCNEUT1",24,0)
 S TRUNC=$G(TRUNC,1)                     ; default true
"RTN","IBCNEUT1",25,0)
 S $P(PAD,FILL,LENGTH-$L(VALUE)+1)=""
"RTN","IBCNEUT1",26,0)
 S Z=""
"RTN","IBCNEUT1",27,0)
 ;
"RTN","IBCNEUT1",28,0)
 ; Check for JUSTIFY being "R" first
"RTN","IBCNEUT1",29,0)
 I JUSTIFY["R" D  G FOXIT
"RTN","IBCNEUT1",30,0)
 . I $L(VALUE)'>LENGTH S Z=PAD_VALUE Q
"RTN","IBCNEUT1",31,0)
 . I 'TRUNC S Z=VALUE Q
"RTN","IBCNEUT1",32,0)
 . S Z=$E(VALUE,$L(VALUE)-LENGTH+1,$L(VALUE)) Q
"RTN","IBCNEUT1",33,0)
 . Q
"RTN","IBCNEUT1",34,0)
 ;
"RTN","IBCNEUT1",35,0)
 ; JUSTIFY is "L" below
"RTN","IBCNEUT1",36,0)
 I $L(VALUE)'>LENGTH S Z=$E(VALUE_PAD,1,LENGTH) G FOXIT
"RTN","IBCNEUT1",37,0)
 I 'TRUNC S Z=VALUE G FOXIT
"RTN","IBCNEUT1",38,0)
 S Z=$E(VALUE,1,LENGTH)
"RTN","IBCNEUT1",39,0)
 ;
"RTN","IBCNEUT1",40,0)
FOXIT ;
"RTN","IBCNEUT1",41,0)
 Q Z
"RTN","IBCNEUT1",42,0)
 ;
"RTN","IBCNEUT1",43,0)
 ;
"RTN","IBCNEUT1",44,0)
AMLOOK(NAME,ERRFLG,LIST) ; Look-up an ins. co. name in Auto Match
"RTN","IBCNEUT1",45,0)
 ;
"RTN","IBCNEUT1",46,0)
 ; Input parameters
"RTN","IBCNEUT1",47,0)
 ;   NAME       Insurance company name to look for (required)
"RTN","IBCNEUT1",48,0)
 ;   ERRFLG     Error flag to determine whether or not to return
"RTN","IBCNEUT1",49,0)
 ;                an array of all hits (optional)
"RTN","IBCNEUT1",50,0)
 ;   LIST       The array to be built - passed by reference
"RTN","IBCNEUT1",51,0)
 ;                (optional)
"RTN","IBCNEUT1",52,0)
 ;                LIST(ins co name)=auto match value
"RTN","IBCNEUT1",53,0)
 ;
"RTN","IBCNEUT1",54,0)
 ; Output
"RTN","IBCNEUT1",55,0)
 ;   The value of this function is either 0 or 1.
"RTN","IBCNEUT1",56,0)
 ;     0 - no matches in the Auto Match file for this name
"RTN","IBCNEUT1",57,0)
 ;     1 - at least one match was found in the Auto Match file
"RTN","IBCNEUT1",58,0)
 ;
"RTN","IBCNEUT1",59,0)
 NEW FOUND,AMIEN,INSNAME,AMV,AMVSTART,NOMATCH
"RTN","IBCNEUT1",60,0)
 S FOUND=0                         ; default to not found
"RTN","IBCNEUT1",61,0)
 KILL LIST                         ; initialize results array
"RTN","IBCNEUT1",62,0)
 S ERRFLG=+$G(ERRFLG)              ; ERRFLG default is 0 if not present
"RTN","IBCNEUT1",63,0)
 S NAME=$$TRIM^XLFSTR($G(NAME))    ; strip leading/trailing spaces
"RTN","IBCNEUT1",64,0)
 I NAME="" G AMLOOKX               ; get out if NAME not present
"RTN","IBCNEUT1",65,0)
 ;
"RTN","IBCNEUT1",66,0)
 ; First look for direct hits in the Auto Match file
"RTN","IBCNEUT1",67,0)
 S AMIEN=$O(^IBCN(365.11,"B",NAME,""))
"RTN","IBCNEUT1",68,0)
 I AMIEN D
"RTN","IBCNEUT1",69,0)
 . S FOUND=1
"RTN","IBCNEUT1",70,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",71,0)
 . S INSNAME=$P($G(^IBCN(365.11,AMIEN,0)),U,2)
"RTN","IBCNEUT1",72,0)
 . I INSNAME'="" S LIST(INSNAME)=NAME
"RTN","IBCNEUT1",73,0)
 . Q
"RTN","IBCNEUT1",74,0)
 ;
"RTN","IBCNEUT1",75,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",76,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",77,0)
 ;
"RTN","IBCNEUT1",78,0)
 ; Use the first character of the NAME as a seed value to start
"RTN","IBCNEUT1",79,0)
 ; looping through the Auto Match entries.  Only need to look at
"RTN","IBCNEUT1",80,0)
 ; entries with the "*" wildcard character.
"RTN","IBCNEUT1",81,0)
 S AMV=$E(NAME)
"RTN","IBCNEUT1",82,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'=$E(NAME)  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",83,0)
 . I AMV'["*" Q    ; only looking for wildcarded entries
"RTN","IBCNEUT1",84,0)
 . ;
"RTN","IBCNEUT1",85,0)
 . ; Ensure that the first part of NAME is the same as the first
"RTN","IBCNEUT1",86,0)
 . ; part of the Auto Match value.
"RTN","IBCNEUT1",87,0)
 . S AMVSTART=$P(AMV,"*",1)
"RTN","IBCNEUT1",88,0)
 . I AMVSTART'="",$E(NAME,1,$L(AMVSTART))'=AMVSTART Q
"RTN","IBCNEUT1",89,0)
 . ;
"RTN","IBCNEUT1",90,0)
 . ; Build the NOMATCH variable and check it
"RTN","IBCNEUT1",91,0)
 . D AMC("NAME",AMV,.NOMATCH,0)
"RTN","IBCNEUT1",92,0)
 . I @NOMATCH Q
"RTN","IBCNEUT1",93,0)
 . ;
"RTN","IBCNEUT1",94,0)
 . ; We've got a match so process this accordingly
"RTN","IBCNEUT1",95,0)
 . S FOUND=1
"RTN","IBCNEUT1",96,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",97,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",98,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",99,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",100,0)
 . Q
"RTN","IBCNEUT1",101,0)
 ;
"RTN","IBCNEUT1",102,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",103,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",104,0)
 ;
"RTN","IBCNEUT1",105,0)
 ; Now we need to look at the Auto Match entries which start with
"RTN","IBCNEUT1",106,0)
 ; the "*" wildcard character.
"RTN","IBCNEUT1",107,0)
 S AMV="*"
"RTN","IBCNEUT1",108,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'="*"  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",109,0)
 . D AMC("NAME",AMV,.NOMATCH,0)    ; build the NOMATCH variable
"RTN","IBCNEUT1",110,0)
 . I @NOMATCH Q                    ; check it
"RTN","IBCNEUT1",111,0)
 . S FOUND=1                       ; We've got a match
"RTN","IBCNEUT1",112,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",113,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",114,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",115,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",116,0)
 . Q
"RTN","IBCNEUT1",117,0)
 ;
"RTN","IBCNEUT1",118,0)
AMLOOKX ;
"RTN","IBCNEUT1",119,0)
 Q FOUND
"RTN","IBCNEUT1",120,0)
 ;
"RTN","IBCNEUT1",121,0)
 ;
"RTN","IBCNEUT1",122,0)
AMC(NAME,AMV,MATCH,FLAG) ; Auto Match check function
"RTN","IBCNEUT1",123,0)
 ;
"RTN","IBCNEUT1",124,0)
 ; NAME   - literal variable name to be matched; enclosed in quotes
"RTN","IBCNEUT1",125,0)
 ; AMV    - Auto Match Value to be pattern matched
"RTN","IBCNEUT1",126,0)
 ; MATCH  - Variable passed by reference; returns condition check command
"RTN","IBCNEUT1",127,0)
 ; FLAG   - if 1, then pattern match check is positive (default)
"RTN","IBCNEUT1",128,0)
 ;        - if 0, then pattern match check is negative
"RTN","IBCNEUT1",129,0)
 ;
"RTN","IBCNEUT1",130,0)
 NEW NUMPCE,J,PCE,PCE1
"RTN","IBCNEUT1",131,0)
 S FLAG=$G(FLAG,1)
"RTN","IBCNEUT1",132,0)
 S MATCH=NAME_$S('FLAG:"'?",1:"?")
"RTN","IBCNEUT1",133,0)
 S NUMPCE=$L(AMV,"*")
"RTN","IBCNEUT1",134,0)
 F J=1:1:NUMPCE D
"RTN","IBCNEUT1",135,0)
 . S PCE=$P(AMV,"*",J),PCE1=""
"RTN","IBCNEUT1",136,0)
 . I PCE'="" S PCE1="1"""_PCE_""""
"RTN","IBCNEUT1",137,0)
 . S MATCH=MATCH_PCE1
"RTN","IBCNEUT1",138,0)
 . I J'=NUMPCE S MATCH=MATCH_".E"
"RTN","IBCNEUT1",139,0)
 . Q
"RTN","IBCNEUT1",140,0)
AMCX ;
"RTN","IBCNEUT1",141,0)
 Q
"RTN","IBCNEUT1",142,0)
 ;
"RTN","IBCNEUT1",143,0)
 ;
"RTN","IBCNEUT1",144,0)
AMSEL(AMARRAY) ; Select an insurance company name from an Auto Match hit list
"RTN","IBCNEUT1",145,0)
 ;
"RTN","IBCNEUT1",146,0)
 ; Input
"RTN","IBCNEUT1",147,0)
 ;   Array of Auto Match hits.  The structure of this array is the
"RTN","IBCNEUT1",148,0)
 ;   same as that returned by the call to $$AMLOOK above.
"RTN","IBCNEUT1",149,0)
 ;   AMARRAY(ins co name) = Auto Match value
"RTN","IBCNEUT1",150,0)
 ;
"RTN","IBCNEUT1",151,0)
 ; Output
"RTN","IBCNEUT1",152,0)
 ;   Insurance Company name (subscript of input array), or
"RTN","IBCNEUT1",153,0)
 ;   -1 if user entered "^" or timed out, or
"RTN","IBCNEUT1",154,0)
 ;   0 if user didn't select any of these names
"RTN","IBCNEUT1",155,0)
 ;   No changes are made to the array.
"RTN","IBCNEUT1",156,0)
 ;
"RTN","IBCNEUT1",157,0)
 NEW SEL,NM,CNT,MSG,MSGNUM,CH,TXT
"RTN","IBCNEUT1",158,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNEUT1",159,0)
 S SEL=0
"RTN","IBCNEUT1",160,0)
 I '$D(AMARRAY) G AMSELX    ; Get out if array not passed in
"RTN","IBCNEUT1",161,0)
 ;
"RTN","IBCNEUT1",162,0)
 ; Display the contents of the array
"RTN","IBCNEUT1",163,0)
 S MSG(1)="Results of Auto Match search"
"RTN","IBCNEUT1",164,0)
 S MSG(2)=""
"RTN","IBCNEUT1",165,0)
 S MSG(3)="  "_$$FO("Insurance Company Name",30)_"   Auto Match Value"
"RTN","IBCNEUT1",166,0)
 S MSG(4)="  "_$$FO("----------------------",30)_"   ----------------"
"RTN","IBCNEUT1",167,0)
 S MSG(1,"F")="!!"
"RTN","IBCNEUT1",168,0)
 S NM="",MSGNUM=$O(MSG(""),-1),CNT=0,CH=""
"RTN","IBCNEUT1",169,0)
 F  S NM=$O(AMARRAY(NM)) Q:NM=""  D
"RTN","IBCNEUT1",170,0)
 . S CNT=CNT+1
"RTN","IBCNEUT1",171,0)
 . S TXT=$$FO(NM,30)_"   "_AMARRAY(NM)
"RTN","IBCNEUT1",172,0)
 . S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",173,0)
 . S MSG(MSGNUM)="  "_TXT
"RTN","IBCNEUT1",174,0)
 . I $L(CH)>440 Q
"RTN","IBCNEUT1",175,0)
 . I CH="" S CH=CNT_":"_TXT       ; building the set of codes string
"RTN","IBCNEUT1",176,0)
 . E  S CH=CH_";"_CNT_":"_TXT     ; for the DIR reader later on
"RTN","IBCNEUT1",177,0)
 . Q
"RTN","IBCNEUT1",178,0)
 ;
"RTN","IBCNEUT1",179,0)
 ; Get out if there are no entries in the list
"RTN","IBCNEUT1",180,0)
 I 'CNT G AMSELX
"RTN","IBCNEUT1",181,0)
 ;
"RTN","IBCNEUT1",182,0)
 ; One more blank line in the display
"RTN","IBCNEUT1",183,0)
 S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",184,0)
 S MSG(MSGNUM)=""
"RTN","IBCNEUT1",185,0)
 ;
"RTN","IBCNEUT1",186,0)
 ; Display the entries in the list
"RTN","IBCNEUT1",187,0)
 DO EN^DDIOL(.MSG)
"RTN","IBCNEUT1",188,0)
 ;
"RTN","IBCNEUT1",189,0)
 ; Ask the first question
"RTN","IBCNEUT1",190,0)
 S DIR(0)="YO"
"RTN","IBCNEUT1",191,0)
 S DIR("A")="Would you like to select this insurance company"
"RTN","IBCNEUT1",192,0)
 I CNT>1 S DIR("A")="Would you like to select one of these insurance companies"
"RTN","IBCNEUT1",193,0)
 S DIR("B")="Yes"
"RTN","IBCNEUT1",194,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",195,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",196,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",197,0)
 ;
"RTN","IBCNEUT1",198,0)
 ; User said Yes to the above question
"RTN","IBCNEUT1",199,0)
 ; Get out if there is only one entry in the array
"RTN","IBCNEUT1",200,0)
 I CNT=1 S SEL=$O(AMARRAY("")) G AMSELX
"RTN","IBCNEUT1",201,0)
 ;
"RTN","IBCNEUT1",202,0)
 ; At this point we know there are multiple entries in the list
"RTN","IBCNEUT1",203,0)
 S DIR(0)="SO^"_CH
"RTN","IBCNEUT1",204,0)
 S DIR("A")="Please choose an insurance company"
"RTN","IBCNEUT1",205,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",206,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",207,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",208,0)
 S SEL=$$TRIM^XLFSTR($E(Y(0),1,30),"R")    ; strip trailing spaces
"RTN","IBCNEUT1",209,0)
AMSELX ;
"RTN","IBCNEUT1",210,0)
 Q SEL
"RTN","IBCNEUT1",211,0)
 ;
"RTN","IBCNEUT2")
0^25^B2641881
"RTN","IBCNEUT2",1,0)
IBCNEUT2 ;DAOU/DAC - IIV MISC. UTILITIES ;06-JUN-2002
"RTN","IBCNEUT2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT2",4,0)
 ;
"RTN","IBCNEUT2",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT2",6,0)
 Q
"RTN","IBCNEUT2",7,0)
 ;
"RTN","IBCNEUT2",8,0)
SAVETQ(IEN,TDT) ;  Update service date in TQ record
"RTN","IBCNEUT2",9,0)
 ;
"RTN","IBCNEUT2",10,0)
 N DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",11,0)
 S DIE="^IBCN(365.1,",DA=IEN,DR=".12////"_TDT
"RTN","IBCNEUT2",12,0)
 D ^DIE
"RTN","IBCNEUT2",13,0)
 Q
"RTN","IBCNEUT2",14,0)
 ;
"RTN","IBCNEUT2",15,0)
 ;
"RTN","IBCNEUT2",16,0)
SST(IEN,STAT) ;  Set the Transmission Queue Status
"RTN","IBCNEUT2",17,0)
 ;  Input parameters
"RTN","IBCNEUT2",18,0)
 ;    IEN = Internal entry number for the record
"RTN","IBCNEUT2",19,0)
 ;    STAT= Status IEN
"RTN","IBCNEUT2",20,0)
 ;
"RTN","IBCNEUT2",21,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",22,0)
 ;
"RTN","IBCNEUT2",23,0)
 I IEN="" Q
"RTN","IBCNEUT2",24,0)
 ;
"RTN","IBCNEUT2",25,0)
 S DIE="^IBCN(365.1,",DA=IEN,DR=".04////^S X=STAT;.15////^S X=$$NOW^XLFDT()"
"RTN","IBCNEUT2",26,0)
 D ^DIE
"RTN","IBCNEUT2",27,0)
 Q
"RTN","IBCNEUT2",28,0)
 ;
"RTN","IBCNEUT2",29,0)
RSP(IEN,STAT) ;  Set the Response File Status
"RTN","IBCNEUT2",30,0)
 ;  Input parameters
"RTN","IBCNEUT2",31,0)
 ;    IEN = Internal entry number for the record
"RTN","IBCNEUT2",32,0)
 ;    STAT= Status IEN
"RTN","IBCNEUT2",33,0)
 ;
"RTN","IBCNEUT2",34,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",35,0)
 S DIE="^IBCN(365,",DA=IEN,DR=".06////^S X=STAT"
"RTN","IBCNEUT2",36,0)
 D ^DIE
"RTN","IBCNEUT2",37,0)
 Q
"RTN","IBCNEUT2",38,0)
 ;
"RTN","IBCNEUT2",39,0)
BUFF(BUFF,BNG) ;  Set error symbol into Buffer File
"RTN","IBCNEUT2",40,0)
 ;  Input Parameter
"RTN","IBCNEUT2",41,0)
 ;    BUFF = Buffer internal entry number
"RTN","IBCNEUT2",42,0)
 ;    BNG = Buffer Symbol IEN
"RTN","IBCNEUT2",43,0)
 I 'BUFF!'BNG Q
"RTN","IBCNEUT2",44,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X,DISYS
"RTN","IBCNEUT2",45,0)
 S DIE="^IBA(355.33,",DA=BUFF,DR=".12////^S X=BNG"
"RTN","IBCNEUT2",46,0)
 D ^DIE
"RTN","IBCNEUT2",47,0)
 Q
"RTN","IBCNEUT2",48,0)
 ;
"RTN","IBCNEUT2",49,0)
PAYR ;  Set up the '~NO PAYER' payer.  This procedure is called by both
"RTN","IBCNEUT2",50,0)
 ;  the post-install routine and by the nightly batch extract routine.
"RTN","IBCNEUT2",51,0)
 S DLAYGO=365.12,DIC(0)="L",DIC("P")=DLAYGO,DIC="^IBE(365.12,"
"RTN","IBCNEUT2",52,0)
 S X="~NO PAYER" D ^DIC
"RTN","IBCNEUT2",53,0)
 S DA=+Y
"RTN","IBCNEUT2",54,0)
 S DR=".02////^S X=""00000""",DIE=DIC D ^DIE
"RTN","IBCNEUT2",55,0)
 ;
"RTN","IBCNEUT2",56,0)
 ;  Set up Payer Application with active flags (if needed)
"RTN","IBCNEUT2",57,0)
 ;S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEUT2",58,0)
 ;I '$D(^IBE(365.12,DA,1,0)) S ^IBE(365.12,DA,1,0)="^365.121P^^"
"RTN","IBCNEUT2",59,0)
 ;S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=DA
"RTN","IBCNEUT2",60,0)
 ;S DIC="^IBE(365.12,"_DA(1)_",1,"
"RTN","IBCNEUT2",61,0)
 ;S X="IIV" D ^DIC
"RTN","IBCNEUT2",62,0)
 ;S DA=+Y
"RTN","IBCNEUT2",63,0)
 ;S DIE=DIC,DR=".02////1;.03////1;.05////^S X=$$NOW^XLFDT();.06////^S X=$$NOW^XLFDT()"
"RTN","IBCNEUT2",64,0)
 ;S DR=DR_";.04////^S X=IDUZ" D ^DIE
"RTN","IBCNEUT2",65,0)
 ;
"RTN","IBCNEUT2",66,0)
 K DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS,IDUZ,DIE,DR,D0,D,DI,DIERR,DQ
"RTN","IBCNEUT2",67,0)
 Q
"RTN","IBCNEUT2",68,0)
 ;
"RTN","IBCNEUT3")
0^26^B55785885
"RTN","IBCNEUT3",1,0)
IBCNEUT3 ;DAOU/AM - IIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT3",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT3",4,0)
 ;
"RTN","IBCNEUT3",5,0)
 ; The purpose of the INSERROR utility is to identify a legitimate
"RTN","IBCNEUT3",6,0)
 ; Insurance Company name, returning the associated Payer IEN and
"RTN","IBCNEUT3",7,0)
 ; National ID.  This extrinsic function can receive either Insurance or
"RTN","IBCNEUT3",8,0)
 ; Buffer data, identified as TYPE I or B, respectively.
"RTN","IBCNEUT3",9,0)
 ;
"RTN","IBCNEUT3",10,0)
 ; The former is the simpler case.  The IEN, in this case the Insurance
"RTN","IBCNEUT3",11,0)
 ; IEN, is validated using the following criteria (some of which is
"RTN","IBCNEUT3",12,0)
 ; validated in routine IBCNEUT4) :
"RTN","IBCNEUT3",13,0)
 ;
"RTN","IBCNEUT3",14,0)
 ; [1] Does it have a National ID?
"RTN","IBCNEUT3",15,0)
 ; [2] Does the National ID have IIV defined?
"RTN","IBCNEUT3",16,0)
 ; [3] Is the Payer active (i.e. the deactivated flag is turned off)
"RTN","IBCNEUT3",17,0)
 ; [4] Is the national connection enabled?
"RTN","IBCNEUT3",18,0)
 ; [5] Is the National ID blocked by VISTA?
"RTN","IBCNEUT3",19,0)
 ;
"RTN","IBCNEUT3",20,0)
 ; If all 5 criteria are met, the Payer IEN and National ID are
"RTN","IBCNEUT3",21,0)
 ; returned.  If not, an error is generated and returned in ARRAY with
"RTN","IBCNEUT3",22,0)
 ; information specific to the type of problem encountered.
"RTN","IBCNEUT3",23,0)
 ;
"RTN","IBCNEUT3",24,0)
 ; If the TYPE passed is B for Buffer, the IEN is the Buffer IEN.
"RTN","IBCNEUT3",25,0)
 ; The Insurance Company name is retrieved from the Buffer file and
"RTN","IBCNEUT3",26,0)
 ; leading and trailing spaces are stripped.  This value is compared to
"RTN","IBCNEUT3",27,0)
 ; the entries in the "B" cross reference of the Insurance Company file
"RTN","IBCNEUT3",28,0)
 ; (whose values have also been stripped of leading and trailing spaces).
"RTN","IBCNEUT3",29,0)
 ; If a match (or several matches) is found,and a unique National ID is
"RTN","IBCNEUT3",30,0)
 ; identified, confirm the 5 set of insurance validation criteria and
"RTN","IBCNEUT3",31,0)
 ; process as above.
"RTN","IBCNEUT3",32,0)
 ;
"RTN","IBCNEUT3",33,0)
 ; If no match in the Insurance Company could be made, check the Auto
"RTN","IBCNEUT3",34,0)
 ; Match file.  If a unique IEN is identified, confirm the 5 set of
"RTN","IBCNEUT3",35,0)
 ; criteria stated above and process in kind.
"RTN","IBCNEUT3",36,0)
 ;
"RTN","IBCNEUT3",37,0)
 ; If no match could be established in both the Insurance Company and the
"RTN","IBCNEUT3",38,0)
 ; Auto Match files, check the insurance company synonym file (stripping 
"RTN","IBCNEUT3",39,0)
 ; off leading and trailing spaces) while preserving case sensitivity.
"RTN","IBCNEUT3",40,0)
 ; If a unique Insurance Company could be identified, confirm the 5 set
"RTN","IBCNEUT3",41,0)
 ; of validation criteria and process as above. 
"RTN","IBCNEUT3",42,0)
 ;
"RTN","IBCNEUT3",43,0)
 ; 
"RTN","IBCNEUT3",44,0)
 ; Can't be called from the top
"RTN","IBCNEUT3",45,0)
 Q
"RTN","IBCNEUT3",46,0)
 ;
"RTN","IBCNEUT3",47,0)
 ;
"RTN","IBCNEUT3",48,0)
INSERROR(TYPE,IEN,ERRFLG,ARRAY) ;
"RTN","IBCNEUT3",49,0)
 ; Formal parameters:
"RTN","IBCNEUT3",50,0)
 ;  TYPE:   Type of IEN passed in the second parameter.
"RTN","IBCNEUT3",51,0)
 ;          Either "B" for "Buffer" or "I" for "Insurance".
"RTN","IBCNEUT3",52,0)
 ;          Mandatory, passed by value.
"RTN","IBCNEUT3",53,0)
 ;  IEN:    IEN to perform a lookup for. Mandatory, passed by value.
"RTN","IBCNEUT3",54,0)
 ;  ERRFLG: Error flag. "" or 0 if no extended error information is
"RTN","IBCNEUT3",55,0)
 ;          requested, 1 if extended error information is requested.
"RTN","IBCNEUT3",56,0)
 ;          Optional (the default is 0), passed by value.
"RTN","IBCNEUT3",57,0)
 ;  ARRAY:  Array of error messages returned by the function.
"RTN","IBCNEUT3",58,0)
 ;          Optional, passed by reference. Whatever is passed in will be
"RTN","IBCNEUT3",59,0)
 ;          KILLed by the function. The structure of the return array is
"RTN","IBCNEUT3",60,0)
 ;          as follows:
"RTN","IBCNEUT3",61,0)
 ;          ARRAY         # of error messages passed back
"RTN","IBCNEUT3",62,0)
 ;          ARRAY(error#) Data for this error number, including error
"RTN","IBCNEUT3",63,0)
 ;          number 1 present in the value returned by the function.
"RTN","IBCNEUT3",64,0)
 ;                [1]   IEN of the error code in the symbol file
"RTN","IBCNEUT3",65,0)
 ;                [2]   # of lines in the error message text
"RTN","IBCNEUT3",66,0)
 ;          ARRAY(error #,line #) - One line of error message text
"RTN","IBCNEUT3",67,0)
 ;                                  up to 70 characters long
"RTN","IBCNEUT3",68,0)
 ;
"RTN","IBCNEUT3",69,0)
 ;          Returned value consists of the following "^"-delimited pcs:
"RTN","IBCNEUT3",70,0)
 ;           [1]   The IEN of the IIV SYMBOL File (#365.15) entry for
"RTN","IBCNEUT3",71,0)
 ;                 the first error condition encountered by the function.
"RTN","IBCNEUT3",72,0)
 ;                 This is only present if a valid Payer was not found.
"RTN","IBCNEUT3",73,0)
 ;           [2]   Payer IEN if a Payer was found, "" otherwise
"RTN","IBCNEUT3",74,0)
 ;           [3]   National ID if a Payer was found
"RTN","IBCNEUT3",75,0)
 ;
"RTN","IBCNEUT3",76,0)
 ; Initialize all variables used in this program
"RTN","IBCNEUT3",77,0)
 N INSIEN,INSNAME,NAMEARR,PAYID,PAYIEN,SYMIEN
"RTN","IBCNEUT3",78,0)
 ; Initialize return variables
"RTN","IBCNEUT3",79,0)
 S (PAYID,PAYIEN,SYMIEN)=""
"RTN","IBCNEUT3",80,0)
 ; If the calling program didn't pass the Extended Error flag, init it
"RTN","IBCNEUT3",81,0)
 S ERRFLG=+$G(ERRFLG)
"RTN","IBCNEUT3",82,0)
 ; Initialize array of extended error info to be returned
"RTN","IBCNEUT3",83,0)
 K ARRAY
"RTN","IBCNEUT3",84,0)
 ; Validate input parameters
"RTN","IBCNEUT3",85,0)
 I $G(TYPE)'="B",$G(TYPE)'="I" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN type "_$G(TYPE)_" passed to the insurance match algorithm is neither 'B' nor 'I'.") G EXIT
"RTN","IBCNEUT3",86,0)
 I $G(IEN)="" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN is not passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",87,0)
 I TYPE="B",'$D(^IBA(355.33,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Buffer IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",88,0)
 I TYPE="I",'$D(^DIC(36,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Insurance Company IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",89,0)
 ;
"RTN","IBCNEUT3",90,0)
 ; If the IEN is an Insurance Company IEN, validate it
"RTN","IBCNEUT3",91,0)
 I TYPE="I" D  G EXIT
"RTN","IBCNEUT3",92,0)
 . N TMP
"RTN","IBCNEUT3",93,0)
 . ; Check to see if ins co is ACTIVE
"RTN","IBCNEUT3",94,0)
 . S TMP=$$ACTIVE^IBCNEUT4(IEN)
"RTN","IBCNEUT3",95,0)
 . I 'TMP S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance Company "_$P(TMP,U,2)_" is not active.") Q
"RTN","IBCNEUT3",96,0)
 . D VALID^IBCNEUT4(IEN,.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",97,0)
 ;
"RTN","IBCNEUT3",98,0)
 ; Retrieve the ins co name from the Ins Buffer
"RTN","IBCNEUT3",99,0)
 S INSNAME=$$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U,1))
"RTN","IBCNEUT3",100,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B13") G EXIT
"RTN","IBCNEUT3",101,0)
 ; Retrieve all ins co IENs matching this ins co name
"RTN","IBCNEUT3",102,0)
 D INSIEN^IBCNEUT8(INSNAME,.INSIEN)
"RTN","IBCNEUT3",103,0)
 ; 
"RTN","IBCNEUT3",104,0)
 ; If one or more ins. co. name matches found, retrieve Payer info
"RTN","IBCNEUT3",105,0)
 I $D(INSIEN) D  G EXIT
"RTN","IBCNEUT3",106,0)
 . ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",107,0)
 . I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") Q
"RTN","IBCNEUT3",108,0)
 . ; Find National IDs for these ins co IENs
"RTN","IBCNEUT3",109,0)
 . D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",110,0)
 . ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",111,0)
 . I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active.") Q
"RTN","IBCNEUT3",112,0)
 . ; Quit with an error if no National ID is found for these ins cos
"RTN","IBCNEUT3",113,0)
 . I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a National ID.") Q
"RTN","IBCNEUT3",114,0)
 . ; Quit with an error if more than one National ID found
"RTN","IBCNEUT3",115,0)
 . I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","Insurance company "_INSNAME_" is linked to more than one National ID",.PAYID),PAYID="" Q
"RTN","IBCNEUT3",116,0)
 . ; Validate the found unique Payer
"RTN","IBCNEUT3",117,0)
 . D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",118,0)
 ;
"RTN","IBCNEUT3",119,0)
 ; If no exact ins co name match was found, check AutoMatch file
"RTN","IBCNEUT3",120,0)
 ; No need to filter out inactives as the AMLOOK will handle it
"RTN","IBCNEUT3",121,0)
 I $$AMLOOK^IBCNEUT1(INSNAME,1,.NAMEARR) D  G EXIT
"RTN","IBCNEUT3",122,0)
 . N NAME
"RTN","IBCNEUT3",123,0)
 . ; Based on the array of ins cos returned by the AutoMatch
"RTN","IBCNEUT3",124,0)
 . ; build an array of ins co IENs that they point to
"RTN","IBCNEUT3",125,0)
 . S NAME="" F  S NAME=$O(NAMEARR(NAME)) Q:NAME=""  D INSIEN^IBCNEUT8($$TRIM^XLFSTR(NAME),.INSIEN)
"RTN","IBCNEUT3",126,0)
 . ; Check if there is more than one ins co IEN that matches
"RTN","IBCNEUT3",127,0)
 . ; the entered name, in which case exit with an error
"RTN","IBCNEUT3",128,0)
 . I $O(INSIEN(""))'=$O(INSIEN(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company in the Auto Match file",.NAMEARR) Q
"RTN","IBCNEUT3",129,0)
 . ; Validate the found unique ins co IEN
"RTN","IBCNEUT3",130,0)
 . D VALID^IBCNEUT4($O(INSIEN("")),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",131,0)
 ;
"RTN","IBCNEUT3",132,0)
 ;  If the first two lookups failed, check the Ins Co Synonym file:
"RTN","IBCNEUT3",133,0)
 ; Retrieve all ins co IENs that match in the Synonym file
"RTN","IBCNEUT3",134,0)
 ;M INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",135,0)
 N %X,%Y
"RTN","IBCNEUT3",136,0)
 S %X="^DIC(36,""C"",INSNAME,"
"RTN","IBCNEUT3",137,0)
 S %Y="INSIEN("
"RTN","IBCNEUT3",138,0)
 I $D(^DIC(36,"C",INSNAME))#10=1 S INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",139,0)
 D %XY^%RCR K %X,%Y
"RTN","IBCNEUT3",140,0)
 ;
"RTN","IBCNEUT3",141,0)
 ; If nothing found in the Synonym file, error out
"RTN","IBCNEUT3",142,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B1","Insurance company "_INSNAME_" could not be matched to a valid entry in the Insurance Company file.") G EXIT
"RTN","IBCNEUT3",143,0)
 ; Loop thru the ins co IENs that matched in the Synonym file
"RTN","IBCNEUT3",144,0)
 S INSIEN=0 F  S INSIEN=$O(INSIEN(INSIEN)) Q:'INSIEN  D
"RTN","IBCNEUT3",145,0)
 . N NAME
"RTN","IBCNEUT3",146,0)
 . ; Retrieve the ins co name for this IEN
"RTN","IBCNEUT3",147,0)
 . S NAME=$$TRIM^XLFSTR($P($G(^DIC(36,INSIEN,0)),U,1))
"RTN","IBCNEUT3",148,0)
 . I NAME'="" S NAMEARR(NAME)=""
"RTN","IBCNEUT3",149,0)
 ;
"RTN","IBCNEUT3",150,0)
 ; If more than one ins co name was found, error out
"RTN","IBCNEUT3",151,0)
 I $O(NAMEARR(""))'=$O(NAMEARR(""),-1) D  G EXIT
"RTN","IBCNEUT3",152,0)
 . S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company name in the Synonym cross-reference of the Insurance Company file",.NAMEARR)
"RTN","IBCNEUT3",153,0)
 ;
"RTN","IBCNEUT3",154,0)
 ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",155,0)
 I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") G EXIT
"RTN","IBCNEUT3",156,0)
 ; Find National IDs for these ins co IENs
"RTN","IBCNEUT3",157,0)
 D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",158,0)
 ;
"RTN","IBCNEUT3",159,0)
 ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",160,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active."),PAYID="" G EXIT
"RTN","IBCNEUT3",161,0)
 ; If no National ID was found, error out
"RTN","IBCNEUT3",162,0)
 I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_$O(NAMEARR(""))_" is not linked to a National ID.") G EXIT
"RTN","IBCNEUT3",163,0)
 ; If multiple National IDs were found, error out
"RTN","IBCNEUT3",164,0)
 I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","Insurance company "_$O(NAMEARR(""))_" is linked to more than one National ID",.PAYID),PAYID="" G EXIT
"RTN","IBCNEUT3",165,0)
 ; Validate the found unique National ID
"RTN","IBCNEUT3",166,0)
 D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",167,0)
 ;
"RTN","IBCNEUT3",168,0)
EXIT ; Main function exit point
"RTN","IBCNEUT3",169,0)
 Q SYMIEN_U_PAYIEN_U_PAYID
"RTN","IBCNEUT3",170,0)
 ;
"RTN","IBCNEUT4")
0^27^B65728721
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - IIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
TOP10(START,END,LIST) ; This procedure will calculate the most popular
"RTN","IBCNEUT4",10,0)
 ; insurance companies over a given time period.  The input will be
"RTN","IBCNEUT4",11,0)
 ; the FileMan from and through dates.  The output is a local array
"RTN","IBCNEUT4",12,0)
 ; passed by reference containing the top 10 most popular entries.
"RTN","IBCNEUT4",13,0)
 ; If not passed in, then the beginning date is Today minus 1 year.
"RTN","IBCNEUT4",14,0)
 ; If not passed in, then the ending date is Today.
"RTN","IBCNEUT4",15,0)
 ;
"RTN","IBCNEUT4",16,0)
 NEW AUTHDT,IBIFN,BLST,INS,INSNAME,COUNT,CNT,STOP
"RTN","IBCNEUT4",17,0)
 S START=$G(START,DT-10000)
"RTN","IBCNEUT4",18,0)
 S END=$G(END,DT)
"RTN","IBCNEUT4",19,0)
 KILL LIST,^TMP($J,"TOP10")
"RTN","IBCNEUT4",20,0)
 S AUTHDT=$O(^DGCR(399,"APD3",START),-1)
"RTN","IBCNEUT4",21,0)
 F  S AUTHDT=$O(^DGCR(399,"APD3",AUTHDT)) Q:'AUTHDT!(AUTHDT>END)  D  Q:$G(ZTSTOP)
"RTN","IBCNEUT4",22,0)
 . ; check for stop requests with each new day
"RTN","IBCNEUT4",23,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEUT4",24,0)
 . S IBIFN=0
"RTN","IBCNEUT4",25,0)
 . F  S IBIFN=$O(^DGCR(399,"APD3",AUTHDT,IBIFN)) Q:'IBIFN  D
"RTN","IBCNEUT4",26,0)
 .. S BLST=$P($G(^DGCR(399,IBIFN,0)),U,13)   ; current bill status
"RTN","IBCNEUT4",27,0)
 .. ;
"RTN","IBCNEUT4",28,0)
 .. ; the bill must be in one of these statuses
"RTN","IBCNEUT4",29,0)
 .. I '$F(".0.3.4.","."_BLST_".") Q     ; closed, authorized, printed
"RTN","IBCNEUT4",30,0)
 .. ;
"RTN","IBCNEUT4",31,0)
 .. ; calculate the insurance company ien, name, and check it
"RTN","IBCNEUT4",32,0)
 .. S INS=$$FINDINS^IBCEF1(IBIFN) Q:'INS
"RTN","IBCNEUT4",33,0)
 .. S INSNAME=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNEUT4",34,0)
 .. I $$EXCLUDE(INSNAME) Q
"RTN","IBCNEUT4",35,0)
 .. ;
"RTN","IBCNEUT4",36,0)
 .. S COUNT=$G(^TMP($J,"TOP10",1,INS))
"RTN","IBCNEUT4",37,0)
 .. I COUNT KILL ^TMP($J,"TOP10",2,-COUNT,INS)
"RTN","IBCNEUT4",38,0)
 .. S COUNT=COUNT+1
"RTN","IBCNEUT4",39,0)
 .. S ^TMP($J,"TOP10",1,INS)=COUNT
"RTN","IBCNEUT4",40,0)
 .. S ^TMP($J,"TOP10",2,-COUNT,INS)=""
"RTN","IBCNEUT4",41,0)
 .. Q
"RTN","IBCNEUT4",42,0)
 . Q
"RTN","IBCNEUT4",43,0)
 ;
"RTN","IBCNEUT4",44,0)
 I $G(ZTSTOP) G TOPX    ; check for stop request
"RTN","IBCNEUT4",45,0)
 ;
"RTN","IBCNEUT4",46,0)
 ; Now loop through the 2 area and build the array with the top 10
"RTN","IBCNEUT4",47,0)
 S COUNT="",CNT=0,STOP=0
"RTN","IBCNEUT4",48,0)
 F  S COUNT=$O(^TMP($J,"TOP10",2,COUNT)) Q:COUNT=""  D  Q:STOP
"RTN","IBCNEUT4",49,0)
 . S INS=0
"RTN","IBCNEUT4",50,0)
 . F  S INS=$O(^TMP($J,"TOP10",2,COUNT,INS)) Q:'INS  D  Q:STOP
"RTN","IBCNEUT4",51,0)
 .. S CNT=CNT+1
"RTN","IBCNEUT4",52,0)
 .. S LIST(CNT)=INS_U_(-COUNT)_U_$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNEUT4",53,0)
 .. I CNT=10 S STOP=1
"RTN","IBCNEUT4",54,0)
 .. Q
"RTN","IBCNEUT4",55,0)
 . Q
"RTN","IBCNEUT4",56,0)
TOPX ;
"RTN","IBCNEUT4",57,0)
 ; clean up scratch global
"RTN","IBCNEUT4",58,0)
 KILL ^TMP($J,"TOP10")
"RTN","IBCNEUT4",59,0)
 Q
"RTN","IBCNEUT4",60,0)
 ;
"RTN","IBCNEUT4",61,0)
 ;
"RTN","IBCNEUT4",62,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",63,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",64,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",65,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",66,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",67,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",68,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",69,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",70,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",71,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",72,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",73,0)
ACTIVEX ;
"RTN","IBCNEUT4",74,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",75,0)
 ;
"RTN","IBCNEUT4",76,0)
 ;
"RTN","IBCNEUT4",77,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",78,0)
 ; company based on the name.
"RTN","IBCNEUT4",79,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",80,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",81,0)
 ;
"RTN","IBCNEUT4",82,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",83,0)
 NEW EXCL
"RTN","IBCNEUT4",84,0)
 S EXCL=0
"RTN","IBCNEUT4",85,0)
 ;
"RTN","IBCNEUT4",86,0)
 ; Screen out bad data
"RTN","IBCNEUT4",87,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",88,0)
 ;
"RTN","IBCNEUT4",89,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",90,0)
 I NAME["MEDICAID"!(NAME["MEDICARE") S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",91,0)
EXCLUDX ;
"RTN","IBCNEUT4",92,0)
 Q EXCL
"RTN","IBCNEUT4",93,0)
 ;
"RTN","IBCNEUT4",94,0)
 ;
"RTN","IBCNEUT4",95,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the IIV status field from an
"RTN","IBCNEUT4",96,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",97,0)
 ; buffer entry).  If the FORCE variable is not passed then the IIV
"RTN","IBCNEUT4",98,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",99,0)
 ;
"RTN","IBCNEUT4",100,0)
 ; Parameters
"RTN","IBCNEUT4",101,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",102,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",103,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",104,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",105,0)
 ;             IIV status field will be cleared regardless of the
"RTN","IBCNEUT4",106,0)
 ;             current status 
"RTN","IBCNEUT4",107,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",108,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",109,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",110,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",111,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",112,0)
 D ^DIE
"RTN","IBCNEUT4",113,0)
 S EDITED=1
"RTN","IBCNEUT4",114,0)
CLEARX ;
"RTN","IBCNEUT4",115,0)
 Q
"RTN","IBCNEUT4",116,0)
 ;
"RTN","IBCNEUT4",117,0)
 ;
"RTN","IBCNEUT4",118,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",119,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",120,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",121,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",122,0)
 ; Input
"RTN","IBCNEUT4",123,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",124,0)
 ; Output
"RTN","IBCNEUT4",125,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",126,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",127,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",128,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",129,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",130,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",131,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",132,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",133,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",134,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",135,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",136,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",137,0)
 ;
"RTN","IBCNEUT4",138,0)
 NEW IB0,IB20,IB40,IB60,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",139,0)
 S DATA=""
"RTN","IBCNEUT4",140,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",141,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",142,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",143,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",144,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNEUT4",145,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNEUT4",146,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",147,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",148,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",149,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",150,0)
 S $P(DATA,U,5)=$P(IB40,U,3)    ; group number
"RTN","IBCNEUT4",151,0)
 S $P(DATA,U,6)=$P(IB40,U,2)    ; group name
"RTN","IBCNEUT4",152,0)
 S $P(DATA,U,7)=$P(IB60,U,4)    ; subscriber id
"RTN","IBCNEUT4",153,0)
 ;
"RTN","IBCNEUT4",154,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",155,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",156,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",157,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",158,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",159,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",160,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",161,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",162,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",163,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",164,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",165,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",166,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",167,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",168,0)
 . Q
"RTN","IBCNEUT4",169,0)
 ;
"RTN","IBCNEUT4",170,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",171,0)
INFOX ;
"RTN","IBCNEUT4",172,0)
 Q DATA
"RTN","IBCNEUT4",173,0)
 ;
"RTN","IBCNEUT4",174,0)
 ;
"RTN","IBCNEUT4",175,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",176,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",177,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",178,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",179,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",180,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",181,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",182,0)
 ; Screen out MEDICAID or MEDICARE ins co names
"RTN","IBCNEUT4",183,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID or MEDICARE in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",184,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",185,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",186,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a National ID.") G VALIDX
"RTN","IBCNEUT4",187,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",188,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",189,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a National ID.") G VALIDX
"RTN","IBCNEUT4",190,0)
 ; Retrieve the IEN of the IIV Application
"RTN","IBCNEUT4",191,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",192,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIIV Payer Application has not been created for this site.") G VALIDX
"RTN","IBCNEUT4",193,0)
 ; Verify the existence of the application for this National ID
"RTN","IBCNEUT4",194,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNAME_" is linked to National ID "_PAYID_" which is not set up to accept electronic insurance eligibility requests.") G VALIDX
"RTN","IBCNEUT4",195,0)
 ; Retrieve the eIIV-specific application data for this National ID
"RTN","IBCNEUT4",196,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",197,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",198,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",199,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNAME_" is linked to National ID "_PAYID_" which doesn't have an active local connection.")
"RTN","IBCNEUT4",200,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNAME_" is linked to National ID "_PAYID_" which doesn't have an active national connection.")
"RTN","IBCNEUT4",201,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",202,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNAME_" is linked to National ID "_PAYID_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",203,0)
 ;
"RTN","IBCNEUT4",204,0)
VALIDX ;
"RTN","IBCNEUT4",205,0)
 Q
"RTN","IBCNEUT4",206,0)
 ;
"RTN","IBCNEUT4",207,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",208,0)
 ; Input parameters:
"RTN","IBCNEUT4",209,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",210,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",211,0)
 ;         names or National ID names
"RTN","IBCNEUT4",212,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",213,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",214,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",215,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",216,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",217,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",218,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",219,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",220,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",221,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",222,0)
 ;
"RTN","IBCNEUT4",223,0)
 Q COLIST_"."
"RTN","IBCNEUT4",224,0)
 ;
"RTN","IBCNEUT5")
0^34^B55092199
"RTN","IBCNEUT5",1,0)
IBCNEUT5 ;DAOU/ALA - IIV MISC. UTILITIES ;20-JUN-2002
"RTN","IBCNEUT5",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT5",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT5",4,0)
 ;
"RTN","IBCNEUT5",5,0)
 ;**Program Description**
"RTN","IBCNEUT5",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT5",7,0)
 ;
"RTN","IBCNEUT5",8,0)
 Q
"RTN","IBCNEUT5",9,0)
 ;
"RTN","IBCNEUT5",10,0)
MSG(MGRP,XMSUB,XMTEXT,FROMFLAG,XMY) ;  Send a MailMan Message
"RTN","IBCNEUT5",11,0)
 ;
"RTN","IBCNEUT5",12,0)
 ;  Input Parameters
"RTN","IBCNEUT5",13,0)
 ;   MGRP = Mailgroup Name (optional)
"RTN","IBCNEUT5",14,0)
 ;   XMSUB = Subject Line (required)
"RTN","IBCNEUT5",15,0)
 ;   XMTEXT = Message Text Array Name in open format:  "MSG(" (required)
"RTN","IBCNEUT5",16,0)
 ;   FROMFLAG = Flag indicating from whom the message is sent (optional)
"RTN","IBCNEUT5",17,0)
 ;         false/undefined:  from the specific, non-human IIV user
"RTN","IBCNEUT5",18,0)
 ;                    true:  from the actual user (DUZ)
"RTN","IBCNEUT5",19,0)
 ;   XMY = recipients array; pass by reference (optional)
"RTN","IBCNEUT5",20,0)
 ;         The possible recipients are the sender, the Mail Group in the
"RTN","IBCNEUT5",21,0)
 ;         first parameter, and anybody else already defined in the XMY 
"RTN","IBCNEUT5",22,0)
 ;         array when this parameter is used.
"RTN","IBCNEUT5",23,0)
 ;
"RTN","IBCNEUT5",24,0)
 ; New MailMan variables and also some FileMan variables.  The FileMan
"RTN","IBCNEUT5",25,0)
 ; variables are used and not cleaned up when sending to external
"RTN","IBCNEUT5",26,0)
 ; internet addresses.
"RTN","IBCNEUT5",27,0)
 NEW DIFROM,XMDUZ,XMDUN,XMZ,XMMG,XMSTRIP,XMROU,XMYBLOB
"RTN","IBCNEUT5",28,0)
 NEW D0,D1,D2,DG,DIC,DICR,DISYS,DIW
"RTN","IBCNEUT5",29,0)
 NEW TMPSUB,TMPTEXT,TMPY,XX
"RTN","IBCNEUT5",30,0)
 ;
"RTN","IBCNEUT5",31,0)
 I $G(FROMFLAG),$G(DUZ) S XMDUZ=DUZ
"RTN","IBCNEUT5",32,0)
 E  S XMDUZ="IB IIV INTERFACE"
"RTN","IBCNEUT5",33,0)
 ;I $G(DUZ) S XMY(DUZ)=""      ; original location of line - moved below
"RTN","IBCNEUT5",34,0)
 I $G(MGRP)'="" S XMY("G."_MGRP)=""
"RTN","IBCNEUT5",35,0)
 ; If no recipients are defined, send to postmaster
"RTN","IBCNEUT5",36,0)
 I '$D(XMY) S XMY(.5)=""
"RTN","IBCNEUT5",37,0)
 I $G(DUZ) S XMY(DUZ)=""
"RTN","IBCNEUT5",38,0)
 ; Store off subject, array reference and array of recipients
"RTN","IBCNEUT5",39,0)
 S TMPSUB=XMSUB,TMPTEXT=XMTEXT
"RTN","IBCNEUT5",40,0)
 M TMPY=XMY
"RTN","IBCNEUT5",41,0)
 D ^XMD
"RTN","IBCNEUT5",42,0)
 ;
"RTN","IBCNEUT5",43,0)
 ; Error logic
"RTN","IBCNEUT5",44,0)
 ; If there's an error message and the message was not originally sent
"RTN","IBCNEUT5",45,0)
 ; to the postmaster, then send a message to the postmaster with this
"RTN","IBCNEUT5",46,0)
 ; error message.
"RTN","IBCNEUT5",47,0)
 ;
"RTN","IBCNEUT5",48,0)
 I $D(XMMG),'$D(TMPY(.5)) D
"RTN","IBCNEUT5",49,0)
 . S XMY(.5)=""
"RTN","IBCNEUT5",50,0)
 . S XMTEXT=TMPTEXT,XMSUB="MailMan Error"
"RTN","IBCNEUT5",51,0)
 . ; Add XMMG error message as the first line of the message
"RTN","IBCNEUT5",52,0)
 . S XX=999999
"RTN","IBCNEUT5",53,0)
 . F  S XX=$O(@(XMTEXT_"XX)"),-1) Q:'XX  S @(XMTEXT_"XX+3)")=@(XMTEXT_"XX)")
"RTN","IBCNEUT5",54,0)
 . S @(XMTEXT_"1)")="   MailMan Error:  "_XMMG
"RTN","IBCNEUT5",55,0)
 . S @(XMTEXT_"2)")="Original Subject:  "_TMPSUB
"RTN","IBCNEUT5",56,0)
 . S @(XMTEXT_"3)")="------Original Message------"
"RTN","IBCNEUT5",57,0)
 . D ^XMD
"RTN","IBCNEUT5",58,0)
 . Q
"RTN","IBCNEUT5",59,0)
 Q
"RTN","IBCNEUT5",60,0)
 ;
"RTN","IBCNEUT5",61,0)
 ;
"RTN","IBCNEUT5",62,0)
BFEXIST(DFN,INSNAME) ; Function returns 1 if an Entered Ins Buffer File 
"RTN","IBCNEUT5",63,0)
 ; entry exists with the same DFN and INSNAME, otherwise it returns a 0
"RTN","IBCNEUT5",64,0)
 ;
"RTN","IBCNEUT5",65,0)
 ; DFN - Patient DFN
"RTN","IBCNEUT5",66,0)
 ; INSNAME - Insurance Company Name File 36 - Field .01
"RTN","IBCNEUT5",67,0)
 ;
"RTN","IBCNEUT5",68,0)
 NEW EXIST,IEN
"RTN","IBCNEUT5",69,0)
 S EXIST=0
"RTN","IBCNEUT5",70,0)
 S INSNAME=$$TRIM^XLFSTR(INSNAME)  ; trimmed
"RTN","IBCNEUT5",71,0)
 I ('DFN)!(INSNAME="") G BFEXIT
"RTN","IBCNEUT5",72,0)
 ;
"RTN","IBCNEUT5",73,0)
 S IEN=0
"RTN","IBCNEUT5",74,0)
 F  S IEN=$O(^IBA(355.33,"C",DFN,IEN)) Q:'IEN!EXIST  D
"RTN","IBCNEUT5",75,0)
 .  ; Quit if status is NOT 'Entered'
"RTN","IBCNEUT5",76,0)
 .  I $P($G(^IBA(355.33,IEN,0)),U,4)'="E" Q
"RTN","IBCNEUT5",77,0)
 .  ; Quit if Ins Buffer Ins Co Name (trimmed) is NOT EQUAL to 
"RTN","IBCNEUT5",78,0)
 .  ;  the Ins Co Name parameter (trimmed)
"RTN","IBCNEUT5",79,0)
 .  I $$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U))'=INSNAME Q
"RTN","IBCNEUT5",80,0)
 .  ; Match found
"RTN","IBCNEUT5",81,0)
 .  S EXIST=1
"RTN","IBCNEUT5",82,0)
 .  Q
"RTN","IBCNEUT5",83,0)
BFEXIT ;
"RTN","IBCNEUT5",84,0)
 Q EXIST
"RTN","IBCNEUT5",85,0)
 ;
"RTN","IBCNEUT5",86,0)
 ;
"RTN","IBCNEUT5",87,0)
MGRP() ; Get the Mail Group for the IIV Interface - IB Site Parameters (51.04)
"RTN","IBCNEUT5",88,0)
 Q $$GET1^DIQ(350.9,"1,",51.04,"E")
"RTN","IBCNEUT5",89,0)
 ;
"RTN","IBCNEUT5",90,0)
 ;
"RTN","IBCNEUT5",91,0)
PYRAPP(APP,PAYERIEN) ; Get the Payer Application multiple IEN
"RTN","IBCNEUT5",92,0)
 ; based on the payer application name and payer ien.
"RTN","IBCNEUT5",93,0)
 ;
"RTN","IBCNEUT5",94,0)
 NEW MIEN,APPIEN,DISYS
"RTN","IBCNEUT5",95,0)
 S MIEN=""
"RTN","IBCNEUT5",96,0)
 S APPIEN=$$FIND1^DIC(365.13,,"X",APP,"B")
"RTN","IBCNEUT5",97,0)
 I 'APPIEN G PYRAPPX
"RTN","IBCNEUT5",98,0)
 I '$G(PAYERIEN) G PYRAPPX
"RTN","IBCNEUT5",99,0)
 S MIEN=$O(^IBE(365.12,PAYERIEN,1,"B",APPIEN,""))
"RTN","IBCNEUT5",100,0)
PYRAPPX ;
"RTN","IBCNEUT5",101,0)
 Q MIEN
"RTN","IBCNEUT5",102,0)
 ;
"RTN","IBCNEUT5",103,0)
 ;
"RTN","IBCNEUT5",104,0)
ACTAPP(IEN) ; Active payer applications
"RTN","IBCNEUT5",105,0)
 ; This function will return 1 if any of the payer applications for 
"RTN","IBCNEUT5",106,0)
 ; this payer (being passed in by the payer IEN) are NOT deactivated.
"RTN","IBCNEUT5",107,0)
 ; This should not be confused with the other payer application fields
"RTN","IBCNEUT5",108,0)
 ; such as national active or local active.  The deactivated field is
"RTN","IBCNEUT5",109,0)
 ; the .11 field in the payer application multiple.
"RTN","IBCNEUT5",110,0)
 ;
"RTN","IBCNEUT5",111,0)
 ; This function is invoked by the FileMan data dictionary as a screen
"RTN","IBCNEUT5",112,0)
 ; for the Payer field (#3.1) in the Insurance company file (#36).
"RTN","IBCNEUT5",113,0)
 ;
"RTN","IBCNEUT5",114,0)
 NEW APPIEN,ACTAPP,APPDATA
"RTN","IBCNEUT5",115,0)
 S APPIEN=0,ACTAPP="",IEN=+$G(IEN)
"RTN","IBCNEUT5",116,0)
 F  S APPIEN=$O(^IBE(365.12,IEN,1,APPIEN)) Q:'APPIEN  D  Q:ACTAPP
"RTN","IBCNEUT5",117,0)
 . S APPDATA=$G(^IBE(365.12,IEN,1,APPIEN,0))
"RTN","IBCNEUT5",118,0)
 . I $P(APPDATA,U,11) Q
"RTN","IBCNEUT5",119,0)
 . I $P(APPDATA,U,12) Q
"RTN","IBCNEUT5",120,0)
 . S ACTAPP=1
"RTN","IBCNEUT5",121,0)
 . Q
"RTN","IBCNEUT5",122,0)
 Q ACTAPP
"RTN","IBCNEUT5",123,0)
 ;
"RTN","IBCNEUT5",124,0)
ADDTQ(DFN,PAYER,SRVDT,FDAYS) ; Function  - Returns flag (0/1)
"RTN","IBCNEUT5",125,0)
 ; 1 - TQ File entry can be added as the service date for the patient 
"RTN","IBCNEUT5",126,0)
 ;     and payer >= MAX TQ service date + Freshness Days
"RTN","IBCNEUT5",127,0)
 ; 0 - otherwise
"RTN","IBCNEUT5",128,0)
 ;
"RTN","IBCNEUT5",129,0)
 ; Input:
"RTN","IBCNEUT5",130,0)
 ;  DFN   - Patient DFN (File #2)
"RTN","IBCNEUT5",131,0)
 ;  PAYER - Payer IEN (File #365.12)
"RTN","IBCNEUT5",132,0)
 ;  SRVDT - Service dt for potential TQ entry
"RTN","IBCNEUT5",133,0)
 ;  FDAYS - Freshness Days param (by extract type)
"RTN","IBCNEUT5",134,0)
 ;
"RTN","IBCNEUT5",135,0)
 N ADDTQ,MAXDT
"RTN","IBCNEUT5",136,0)
 ; 
"RTN","IBCNEUT5",137,0)
 S ADDTQ=1
"RTN","IBCNEUT5",138,0)
 I ($G(DFN)="")!($G(PAYER)="")!($G(SRVDT)="")!($G(FDAYS)="") S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",139,0)
 ; MAX TQ Service Date
"RTN","IBCNEUT5",140,0)
 S MAXDT=$$TQMAXSV(DFN,PAYER)
"RTN","IBCNEUT5",141,0)
 I MAXDT="" G ADDTQX
"RTN","IBCNEUT5",142,0)
 ; If Service Date < Max Service Date + Freshness Days, do not add
"RTN","IBCNEUT5",143,0)
 I SRVDT<$$FMADD^XLFDT(MAXDT,FDAYS) S ADDTQ=0
"RTN","IBCNEUT5",144,0)
 ;
"RTN","IBCNEUT5",145,0)
ADDTQX ; ADDTQ exit pt
"RTN","IBCNEUT5",146,0)
 Q ADDTQ
"RTN","IBCNEUT5",147,0)
 ;
"RTN","IBCNEUT5",148,0)
TQUPDSV(DFN,PAYER,SRVDT) ; Update service dates & freshness dates for TQ
"RTN","IBCNEUT5",149,0)
 ; entries awaiting transmission
"RTN","IBCNEUT5",150,0)
 ;
"RTN","IBCNEUT5",151,0)
 N SVDT,STS,ERACT,CSRVDT,CSPAN,SPAN,DA,HL7IEN,RIEN
"RTN","IBCNEUT5",152,0)
 ;
"RTN","IBCNEUT5",153,0)
 I ($G(DFN)="")!($G(PAYER)="")!($G(SRVDT)="") G TQUPDSVX
"RTN","IBCNEUT5",154,0)
 ;
"RTN","IBCNEUT5",155,0)
 ; Loop thru all inquiries to be transmitted to update the service date
"RTN","IBCNEUT5",156,0)
 ; Statuses:  Ready to Transmit(1), Hold(4) and Retry(6)
"RTN","IBCNEUT5",157,0)
 S SVDT=""
"RTN","IBCNEUT5",158,0)
 F  S SVDT=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT)) Q:'SVDT  D
"RTN","IBCNEUT5",159,0)
 . S DA=0
"RTN","IBCNEUT5",160,0)
 . F  S DA=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT,DA)) Q:'DA  D
"RTN","IBCNEUT5",161,0)
 .. ; TQ Status
"RTN","IBCNEUT5",162,0)
 .. S STS=$P($G(^IBCN(365.1,DA,0)),U,4)
"RTN","IBCNEUT5",163,0)
 .. ; Check to see if record is still scheduled to be transmitted.
"RTN","IBCNEUT5",164,0)
 .. ; If so, update the service date if the new service date and current
"RTN","IBCNEUT5",165,0)
 .. ; service date are both in the past or future and the new service
"RTN","IBCNEUT5",166,0)
 .. ; date is closer to Today.  Also, if the current service date is in
"RTN","IBCNEUT5",167,0)
 .. ; the future and the new service date is in the past, update with the
"RTN","IBCNEUT5",168,0)
 .. ; new service date.
"RTN","IBCNEUT5",169,0)
 .. ; If not Ready to Transmit(1), Hold(4) and Retry(6), quit
"RTN","IBCNEUT5",170,0)
 .. I STS'=1,STS'=4,STS'=6 Q
"RTN","IBCNEUT5",171,0)
 .. ; If Hold and last Response returned Error Action - Please resubmit
"RTN","IBCNEUT5",172,0)
 .. ; Original Transaction (P) - do not update
"RTN","IBCNEUT5",173,0)
 .. I STS=4 S ERACT="" D  I ERACT="P" Q
"RTN","IBCNEUT5",174,0)
 .. . ; Last msg sent
"RTN","IBCNEUT5",175,0)
 .. . S HL7IEN=$O(^IBCN(365.1,DA,2," "),-1) Q:'HL7IEN
"RTN","IBCNEUT5",176,0)
 .. . ; Assoc IIV Response IEN
"RTN","IBCNEUT5",177,0)
 .. . S RIEN=$P($G(^IBCN(365.1,DA,2,HL7IEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT5",178,0)
 .. . ; Error Action IEN (365.018)
"RTN","IBCNEUT5",179,0)
 .. . S ERACT=$P($G(^IBCN(365,RIEN,1)),U,15) Q:'ERACT
"RTN","IBCNEUT5",180,0)
 .. . S ERACT=$P($G(^IBE(365.018,ERACT,0)),U,1)
"RTN","IBCNEUT5",181,0)
 .. ;
"RTN","IBCNEUT5",182,0)
 .. ; Current service date for TQ entry
"RTN","IBCNEUT5",183,0)
 .. S CSRVDT=$P($G(^IBCN(365.1,DA,0)),U,12)
"RTN","IBCNEUT5",184,0)
 .. ; If current service date is today (DT), do not update
"RTN","IBCNEUT5",185,0)
 .. I CSRVDT=DT Q
"RTN","IBCNEUT5",186,0)
 .. ; If new service date is in the future and current service date is in
"RTN","IBCNEUT5",187,0)
 .. ; the past, do not update
"RTN","IBCNEUT5",188,0)
 .. I SRVDT>DT,CSRVDT<DT Q
"RTN","IBCNEUT5",189,0)
 .. ; If new service date is today, update
"RTN","IBCNEUT5",190,0)
 .. I SRVDT=DT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",191,0)
 .. ; If both current and new service dates are in the past or future,
"RTN","IBCNEUT5",192,0)
 .. ; only update, when new service date is closer to today (DT).
"RTN","IBCNEUT5",193,0)
 .. I ((CSRVDT<DT)&(SRVDT<DT))!((CSRVDT>DT)&(SRVDT>DT)) D  Q
"RTN","IBCNEUT5",194,0)
 .. . S CSPAN=$$FMDIFF^XLFDT(CSRVDT,DT,1),SPAN=$$FMDIFF^XLFDT(SRVDT,DT,1)
"RTN","IBCNEUT5",195,0)
 .. . I CSPAN<0 S CSPAN=-CSPAN
"RTN","IBCNEUT5",196,0)
 .. . I SPAN<0 S SPAN=-SPAN
"RTN","IBCNEUT5",197,0)
 .. . I SPAN<CSPAN D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1))
"RTN","IBCNEUT5",198,0)
 .. ; If new service date is in the past and current service date is in
"RTN","IBCNEUT5",199,0)
 .. ; the future, update
"RTN","IBCNEUT5",200,0)
 .. I SRVDT<CSRVDT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",201,0)
 .. Q
"RTN","IBCNEUT5",202,0)
TQUPDSVX ; TQUPDSV exit pt
"RTN","IBCNEUT5",203,0)
 Q
"RTN","IBCNEUT5",204,0)
 ;
"RTN","IBCNEUT5",205,0)
TQMAXSV(DFN,PAYER) ; Returns MAX(TQ Service Date) for Patient & Payer
"RTN","IBCNEUT5",206,0)
 ; Input: 
"RTN","IBCNEUT5",207,0)
 ;  DFN     - Patient DFN (2)
"RTN","IBCNEUT5",208,0)
 ;  PAYER   - Payer IEN (365.12)
"RTN","IBCNEUT5",209,0)
 ; Output:
"RTN","IBCNEUT5",210,0)
 ;  TQMAXSV - MAX (most recent) service date from TQ entry for Patient &
"RTN","IBCNEUT5",211,0)
 ;            Payer
"RTN","IBCNEUT5",212,0)
 ;
"RTN","IBCNEUT5",213,0)
 N TQMAXSV
"RTN","IBCNEUT5",214,0)
 S TQMAXSV=""
"RTN","IBCNEUT5",215,0)
 I ($G(DFN)="")!($G(PAYER)="") G TQMAXSVX
"RTN","IBCNEUT5",216,0)
 S TQMAXSV=$O(^IBCN(365.1,"AD",DFN,PAYER,""),-1)
"RTN","IBCNEUT5",217,0)
TQMAXSVX ; TQMAXSV exit pt
"RTN","IBCNEUT5",218,0)
 Q TQMAXSV
"RTN","IBCNEUT5",219,0)
 ;
"RTN","IBCNEUT5",220,0)
SNDSSN(PIEN,APP) ; Determine Transmit SSN flag based on Payer and Payer 
"RTN","IBCNEUT5",221,0)
 ; Application values
"RTN","IBCNEUT5",222,0)
 ; Input:
"RTN","IBCNEUT5",223,0)
 ;  PIEN - Payer IEN (365.12)
"RTN","IBCNEUT5",224,0)
 ;  APP  - Payer application description (like "IIV")
"RTN","IBCNEUT5",225,0)
 N IBFLG
"RTN","IBCNEUT5",226,0)
 ;
"RTN","IBCNEUT5",227,0)
 S IBFLG=0
"RTN","IBCNEUT5",228,0)
 ;
"RTN","IBCNEUT5",229,0)
 I $G(PIEN)=""!($G(APP)="") G SNDSSNX
"RTN","IBCNEUT5",230,0)
 S IBFLG=+$P($G(^IBE(365.12,PIEN,1,+$$PYRAPP(APP,PIEN),0)),U,10)
"RTN","IBCNEUT5",231,0)
 ;
"RTN","IBCNEUT5",232,0)
SNDSSNX Q IBFLG
"RTN","IBCNEUT5",233,0)
 ;
"RTN","IBCNEUT5",234,0)
SAVFRSH(TQIEN,DTDIFF) ; Update TQ freshness date based on service date diff
"RTN","IBCNEUT5",235,0)
 ;
"RTN","IBCNEUT5",236,0)
 N DIE,DA,FDT,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT5",237,0)
 I $G(TQIEN)="" Q
"RTN","IBCNEUT5",238,0)
 S FDT=$P($G(^IBCN(365.1,TQIEN,0)),U,17)
"RTN","IBCNEUT5",239,0)
 ; Note - will only update if FDT > 0.
"RTN","IBCNEUT5",240,0)
 S FDT=$$FMADD^XLFDT(FDT,+DTDIFF)
"RTN","IBCNEUT5",241,0)
 S DIE="^IBCN(365.1,",DA=TQIEN,DR=".17////"_FDT
"RTN","IBCNEUT5",242,0)
 D ^DIE
"RTN","IBCNEUT5",243,0)
 Q
"RTN","IBCNEUT5",244,0)
 ;
"RTN","IBCNEUT6")
0^55^B17080676
"RTN","IBCNEUT6",1,0)
IBCNEUT6 ;DAOU/ESG - IIV MISC. UTILITIES ;14-AUG-2002
"RTN","IBCNEUT6",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT6",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT6",4,0)
 ;
"RTN","IBCNEUT6",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT6",6,0)
 Q
"RTN","IBCNEUT6",7,0)
 ;
"RTN","IBCNEUT6",8,0)
AMCHECK ; This procedure will examine the insurance company names in the 
"RTN","IBCNEUT6",9,0)
 ; Auto Match file (#365.11) to make sure there is still at least
"RTN","IBCNEUT6",10,0)
 ; one active insurance company with that name.  If there isn't,
"RTN","IBCNEUT6",11,0)
 ; then the Auto Match entries for that insurance company name
"RTN","IBCNEUT6",12,0)
 ; will be deleted.
"RTN","IBCNEUT6",13,0)
 ;
"RTN","IBCNEUT6",14,0)
 NEW NAME,INSIEN,FOUNDACT,DA,DIK,DIC,X,Y,%
"RTN","IBCNEUT6",15,0)
 S NAME=""
"RTN","IBCNEUT6",16,0)
 F  S NAME=$O(^IBCN(365.11,"C",NAME)) Q:NAME=""  D
"RTN","IBCNEUT6",17,0)
 . ;
"RTN","IBCNEUT6",18,0)
 . ; For this Auto Match ins co name, see if there is an active ins co
"RTN","IBCNEUT6",19,0)
 . S INSIEN=0,FOUNDACT=0
"RTN","IBCNEUT6",20,0)
 . F  S INSIEN=$O(^DIC(36,"B",NAME,INSIEN)) Q:'INSIEN  I $$ACTIVE^IBCNEUT4(INSIEN) S FOUNDACT=1 Q
"RTN","IBCNEUT6",21,0)
 . ;
"RTN","IBCNEUT6",22,0)
 . ; If an active ins co was found, then we're OK so quit
"RTN","IBCNEUT6",23,0)
 . I FOUNDACT Q
"RTN","IBCNEUT6",24,0)
 . ;
"RTN","IBCNEUT6",25,0)
 . ; Otherwise, we need to delete all Auto Match entries for this name
"RTN","IBCNEUT6",26,0)
 . S DA=0,DIK="^IBCN(365.11,"
"RTN","IBCNEUT6",27,0)
 . F  S DA=$O(^IBCN(365.11,"C",NAME,DA)) Q:'DA  D ^DIK
"RTN","IBCNEUT6",28,0)
 . Q
"RTN","IBCNEUT6",29,0)
AMCHKX ;
"RTN","IBCNEUT6",30,0)
 Q
"RTN","IBCNEUT6",31,0)
 ;
"RTN","IBCNEUT6",32,0)
 ;
"RTN","IBCNEUT6",33,0)
AMADD(INSNAME,IBCNEXT1) ; Conditionally add an Auto Match entry based on user input
"RTN","IBCNEUT6",34,0)
 ; Input Parameters:
"RTN","IBCNEUT6",35,0)
 ;    INSNAME is a valid, active insurance company name
"RTN","IBCNEUT6",36,0)
 ;   IBCNEXT1 is the existing entry in the ins co name field in the
"RTN","IBCNEUT6",37,0)
 ;            buffer.  This may be used as the Auto Match value for
"RTN","IBCNEUT6",38,0)
 ;            a new auto match entry.
"RTN","IBCNEUT6",39,0)
 ;
"RTN","IBCNEUT6",40,0)
 NEW AMDATA,AMIEN,AMERROR
"RTN","IBCNEUT6",41,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEUT6",42,0)
 NEW D,D0,D1,DA,DB,DC,DDH,DE,DG,DH,DI,DIC,DIE,DIEL,DIFLD,DIG,DIH
"RTN","IBCNEUT6",43,0)
 NEW DIK,DILN,DIPA,DISYS,DIV,DK,DL,DM,DN,DOV,DP,DQ,DR,DU,DV,DZ
"RTN","IBCNEUT6",44,0)
 ;
"RTN","IBCNEUT6",45,0)
 ; First, check security key to see if user is allowed to do this
"RTN","IBCNEUT6",46,0)
 I '$$KCHK^XUSRB("IBCNE IIV AUTO MATCH") G AMADDX
"RTN","IBCNEUT6",47,0)
 ;
"RTN","IBCNEUT6",48,0)
 S IBCNEXT1=$$UP^XLFSTR(IBCNEXT1)               ; all uppercase
"RTN","IBCNEUT6",49,0)
 S IBCNEXT1=$$TRIM^XLFSTR(IBCNEXT1)             ; lead/trail spaces
"RTN","IBCNEUT6",50,0)
 I IBCNEXT1="" G AMADDX                         ; must exist
"RTN","IBCNEUT6",51,0)
 I $L(IBCNEXT1)>30!($L(IBCNEXT1)<3) G AMADDX    ; too long or too short
"RTN","IBCNEUT6",52,0)
 I IBCNEXT1=INSNAME G AMADDX                    ; cannot equal the name
"RTN","IBCNEUT6",53,0)
 I $D(^IBCN(365.11,"B",IBCNEXT1)) G AMADDX      ; already in Auto Match
"RTN","IBCNEUT6",54,0)
 I $D(^DIC(36,"B",IBCNEXT1)) G AMADDX           ; already an ins co name
"RTN","IBCNEUT6",55,0)
 I $D(^DIC(36,"C",IBCNEXT1)) G AMADDX           ; already a synonym
"RTN","IBCNEUT6",56,0)
 I IBCNEXT1["*" G AMADDX                        ; no wildcards allowed
"RTN","IBCNEUT6",57,0)
 ;
"RTN","IBCNEUT6",58,0)
 S DIR(0)="YO"
"RTN","IBCNEUT6",59,0)
 S DIR("A",1)=" "
"RTN","IBCNEUT6",60,0)
 S DIR("A",2)="Do you want to add an Auto Match entry that links"
"RTN","IBCNEUT6",61,0)
 S DIR("A")=IBCNEXT1_" with "_INSNAME
"RTN","IBCNEUT6",62,0)
 S DIR("B")="No"
"RTN","IBCNEUT6",63,0)
 S DIR("?",1)="      The Auto Match Value is "_IBCNEXT1_"."
"RTN","IBCNEUT6",64,0)
 S DIR("?",2)="The Insurance Company Name is "_INSNAME_"."
"RTN","IBCNEUT6",65,0)
 S DIR("?",3)=" "
"RTN","IBCNEUT6",66,0)
 S DIR("?",4)="Please enter NO if you do not want to link these two values together"
"RTN","IBCNEUT6",67,0)
 S DIR("?",5)="in the Auto Match file."
"RTN","IBCNEUT6",68,0)
 S DIR("?",6)=" "
"RTN","IBCNEUT6",69,0)
 S DIR("?",7)="Please enter YES if you do want to create an Auto Match entry for these"
"RTN","IBCNEUT6",70,0)
 S DIR("?",8)="two values.  If you enter YES, then you will have the chance to modify"
"RTN","IBCNEUT6",71,0)
 S DIR("?")="the Auto Match Value."
"RTN","IBCNEUT6",72,0)
 D ^DIR K DIR
"RTN","IBCNEUT6",73,0)
 D EN^DDIOL(,,"!!")
"RTN","IBCNEUT6",74,0)
 ;
"RTN","IBCNEUT6",75,0)
 ; If user didn't say Yes, then we exit
"RTN","IBCNEUT6",76,0)
 I 'Y G AMADDX
"RTN","IBCNEUT6",77,0)
 ; To allow for edits to the .01 field and not the .02 field,
"RTN","IBCNEUT6",78,0)
 ; Add this new entry first and then edit only the .01 field.
"RTN","IBCNEUT6",79,0)
 S AMDATA(365.11,"+1,",.01)=IBCNEXT1
"RTN","IBCNEUT6",80,0)
 S AMDATA(365.11,"+1,",.02)=INSNAME
"RTN","IBCNEUT6",81,0)
 S AMDATA(365.11,"+1,",.03)=$$NOW^XLFDT
"RTN","IBCNEUT6",82,0)
 S AMDATA(365.11,"+1,",.04)=DUZ
"RTN","IBCNEUT6",83,0)
 S AMDATA(365.11,"+1,",.05)=$$NOW^XLFDT
"RTN","IBCNEUT6",84,0)
 S AMDATA(365.11,"+1,",.06)=DUZ
"RTN","IBCNEUT6",85,0)
 S AMDATA(365.11,"+1,",.07)=IBCNEXT1
"RTN","IBCNEUT6",86,0)
 S AMDATA(365.11,"+1,",.08)=INSNAME
"RTN","IBCNEUT6",87,0)
 D UPDATE^DIE("","AMDATA","AMIEN","AMERROR")
"RTN","IBCNEUT6",88,0)
 ;
"RTN","IBCNEUT6",89,0)
 I $D(AMERROR) G AMADDX       ; FileMan error so get out
"RTN","IBCNEUT6",90,0)
 S AMIEN=+$G(AMIEN(1))        ; internal entry number created
"RTN","IBCNEUT6",91,0)
 I 'AMIEN G AMADDX            ; if IEN not there get out
"RTN","IBCNEUT6",92,0)
 ;
"RTN","IBCNEUT6",93,0)
 ; Here we have to edit the entry to allow for the opportunity to 
"RTN","IBCNEUT6",94,0)
 ; change something
"RTN","IBCNEUT6",95,0)
 S DIE=365.11,DA=AMIEN,DR=".01;.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEUT6",96,0)
 D ^DIE
"RTN","IBCNEUT6",97,0)
 ;
"RTN","IBCNEUT6",98,0)
 ; Display the confirmation message to the user
"RTN","IBCNEUT6",99,0)
 S AMDATA=$G(^IBCN(365.11,AMIEN,0))
"RTN","IBCNEUT6",100,0)
 I AMDATA'="" D EN^DDIOL($P(AMDATA,U,1)_" is now linked with "_$P(AMDATA,U,2)_".",,"!!?3")
"RTN","IBCNEUT6",101,0)
 D EN^DDIOL(,,"!!")
"RTN","IBCNEUT6",102,0)
AMADDX ;
"RTN","IBCNEUT6",103,0)
 Q
"RTN","IBCNEUT6",104,0)
 ;
"RTN","IBCNEUT7")
0^62^B3520436
"RTN","IBCNEUT7",1,0)
IBCNEUT7 ;DAOU/ALA - IIV MISC. UTILITIES ;11-NOV-2002
"RTN","IBCNEUT7",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT7",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT7",4,0)
 ;
"RTN","IBCNEUT7",5,0)
 ;**Program Description**
"RTN","IBCNEUT7",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT7",7,0)
 ;
"RTN","IBCNEUT7",8,0)
 Q
"RTN","IBCNEUT7",9,0)
 ;
"RTN","IBCNEUT7",10,0)
RSTA(REC) ; Update status in Response File from Transmission Queue to
"RTN","IBCNEUT7",11,0)
 ;         Communication Timeout
"RTN","IBCNEUT7",12,0)
 ;  Input Parameters
"RTN","IBCNEUT7",13,0)
 ;    REC = IEN from TQ file
"RTN","IBCNEUT7",14,0)
 ;    -- Removed 10/29/02 --WCH = Which Record 'P'=Previous, 'C'=Current
"RTN","IBCNEUT7",15,0)
 ;    -- if no Which Record passed, it will assume the current one
"RTN","IBCNEUT7",16,0)
 ;
"RTN","IBCNEUT7",17,0)
 N HIEN,RIEN
"RTN","IBCNEUT7",18,0)
 S HIEN=0
"RTN","IBCNEUT7",19,0)
 ; Loop thru HL7 messages associated with the IIV Inquiry
"RTN","IBCNEUT7",20,0)
 F  S HIEN=$O(^IBCN(365.1,REC,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEUT7",21,0)
 .  ; Determine IIV Response associated with the HL7 message
"RTN","IBCNEUT7",22,0)
 .  S RIEN=$P($G(^IBCN(365.1,REC,2,HIEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT7",23,0)
 .  ; If IIV Response status is 'Response Received', don't update it
"RTN","IBCNEUT7",24,0)
 .  I $P($G(^IBCN(365,RIEN,0)),U,6)=3 Q
"RTN","IBCNEUT7",25,0)
 .  ; Update IIV Response status to 'Communication Timeout'
"RTN","IBCNEUT7",26,0)
 .  D RSP^IBCNEUT2(RIEN,5)
"RTN","IBCNEUT7",27,0)
 .  Q
"RTN","IBCNEUT7",28,0)
 ;
"RTN","IBCNEUT7",29,0)
 Q
"RTN","IBCNEUT7",30,0)
 ;
"RTN","IBCNEUT7",31,0)
TXT(TXT) ;Parse text for wrapping
"RTN","IBCNEUT7",32,0)
 ;  Input Parameter
"RTN","IBCNEUT7",33,0)
 ;   TXT = The array name
"RTN","IBCNEUT7",34,0)
 ;
"RTN","IBCNEUT7",35,0)
 I '$D(@(TXT)) Q
"RTN","IBCNEUT7",36,0)
 ;
"RTN","IBCNEUT7",37,0)
 K ^UTILITY($J,"W")
"RTN","IBCNEUT7",38,0)
 ;
"RTN","IBCNEUT7",39,0)
 ;  Define length of text string; left is 1 and right is 78
"RTN","IBCNEUT7",40,0)
 S DIWF="",DIWL=1,DIWR=78
"RTN","IBCNEUT7",41,0)
 ;
"RTN","IBCNEUT7",42,0)
 ;  Format text into scratch file
"RTN","IBCNEUT7",43,0)
 S CT=0
"RTN","IBCNEUT7",44,0)
 F  S CT=$O(@(TXT)@(CT)) Q:'CT  D
"RTN","IBCNEUT7",45,0)
 . S X=@TXT@(CT) D ^DIWP
"RTN","IBCNEUT7",46,0)
 ;
"RTN","IBCNEUT7",47,0)
 K @(TXT)
"RTN","IBCNEUT7",48,0)
 ;
"RTN","IBCNEUT7",49,0)
 ;  Reset formatted text back to array
"RTN","IBCNEUT7",50,0)
 S CT=0
"RTN","IBCNEUT7",51,0)
 F  S CT=$O(^UTILITY($J,"W",1,CT)) Q:'CT  D
"RTN","IBCNEUT7",52,0)
 . S @(TXT)@(CT)=^UTILITY($J,"W",1,CT,0)
"RTN","IBCNEUT7",53,0)
 ;
"RTN","IBCNEUT7",54,0)
 K ^UTILITY($J,"W"),CT,DIWF,DIWL,DIWR,X,Z,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I
"RTN","IBCNEUT7",55,0)
 Q
"RTN","IBCNEUT7",56,0)
 ;
"RTN","IBCNEUT7",57,0)
ERRN(ARRAY) ;  Get the next FileMan error number from the array
"RTN","IBCNEUT7",58,0)
 ;  Input
"RTN","IBCNEUT7",59,0)
 ;    ARRAY = the array name, include "DIERR"
"RTN","IBCNEUT7",60,0)
 ;  Output
"RTN","IBCNEUT7",61,0)
 ;    IBEY = the next error number
"RTN","IBCNEUT7",62,0)
 ;
"RTN","IBCNEUT7",63,0)
 ;  Example call
"RTN","IBCNEUT7",64,0)
 ;    S IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEUT7",65,0)
 ;
"RTN","IBCNEUT7",66,0)
 NEW IBEY
"RTN","IBCNEUT7",67,0)
 ;
"RTN","IBCNEUT7",68,0)
 I '$D(@(ARRAY)) S @(ARRAY)=1 Q 1
"RTN","IBCNEUT7",69,0)
 ;
"RTN","IBCNEUT7",70,0)
 S IBEY=$P(@(ARRAY),U,1)
"RTN","IBCNEUT7",71,0)
 S IBEY=IBEY+1,$P(@(ARRAY),U,1)=IBEY
"RTN","IBCNEUT7",72,0)
 Q IBEY
"RTN","IBCNEUT7",73,0)
 ;
"RTN","IBCNEUT8")
0^73^B7469707
"RTN","IBCNEUT8",1,0)
IBCNEUT8 ;DAOU/AM - IIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT8",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBCNEUT8",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT8",4,0)
 ;
"RTN","IBCNEUT8",5,0)
 ; This routine includes subroutines originally included in IBCNEUT3
"RTN","IBCNEUT8",6,0)
 ; and referenced by IBCNEUT3 and IBCNEUT4.
"RTN","IBCNEUT8",7,0)
 ;
"RTN","IBCNEUT8",8,0)
 ; INSIEN returns an array of matching insurance IENs based upon the
"RTN","IBCNEUT8",9,0)
 ; provided Insurance Name.
"RTN","IBCNEUT8",10,0)
 ;
"RTN","IBCNEUT8",11,0)
 ; FINDPAY returns the National IDs for all provided active insurance
"RTN","IBCNEUT8",12,0)
 ; companies.
"RTN","IBCNEUT8",13,0)
 ;
"RTN","IBCNEUT8",14,0)
 ; ERROR returns the IEN of the symbol mnemonice passed to it and updates
"RTN","IBCNEUT8",15,0)
 ; an array of items to display, if passed.
"RTN","IBCNEUT8",16,0)
 ; 
"RTN","IBCNEUT8",17,0)
 ; Can't be called from the top
"RTN","IBCNEUT8",18,0)
 Q
"RTN","IBCNEUT8",19,0)
 ;
"RTN","IBCNEUT8",20,0)
 ;
"RTN","IBCNEUT8",21,0)
INSIEN(INSNAME,INSIEN) ; Subroutine to find all ins co IENs
"RTN","IBCNEUT8",22,0)
 ; matching a given ins co name
"RTN","IBCNEUT8",23,0)
 ; Input parameter: INSNAME - Ins co name to find IENs for
"RTN","IBCNEUT8",24,0)
 ; Output parameter: INSIEN - array of ins co IENs that
"RTN","IBCNEUT8",25,0)
 ;   match the passed ins co name, passed by reference
"RTN","IBCNEUT8",26,0)
 ;   If the array is defined at the time this subroutine is called,
"RTN","IBCNEUT8",27,0)
 ;   then it will add to the data that pre-exists in the array
"RTN","IBCNEUT8",28,0)
 ;
"RTN","IBCNEUT8",29,0)
 N NAME
"RTN","IBCNEUT8",30,0)
 ; Loop through the ins co names starting with a space (" ")
"RTN","IBCNEUT8",31,0)
 ; looking for matching names
"RTN","IBCNEUT8",32,0)
 S NAME=" " F  S NAME=$O(^DIC(36,"B",NAME)) Q:$E(NAME,1)'=" "  D
"RTN","IBCNEUT8",33,0)
 . ;I $$TRIM^XLFSTR(NAME)=INSNAME M INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",34,0)
 . I $$TRIM^XLFSTR(NAME)=INSNAME D
"RTN","IBCNEUT8",35,0)
 . . N %X,%Y
"RTN","IBCNEUT8",36,0)
 . . S %X="^DIC(36,""B"",NAME,"
"RTN","IBCNEUT8",37,0)
 . . S %Y="INSIEN("
"RTN","IBCNEUT8",38,0)
 . . I $D(^DIC(36,"B",NAME))#10=1 S INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",39,0)
 . . D %XY^%RCR K %X,%Y
"RTN","IBCNEUT8",40,0)
 ;
"RTN","IBCNEUT8",41,0)
 ; Retrieve the ins co names from the Ins Buffer
"RTN","IBCNEUT8",42,0)
 ; starting with the entry prior to the ins co name in
"RTN","IBCNEUT8",43,0)
 ; the Buffer and look for ins co name matches
"RTN","IBCNEUT8",44,0)
 S NAME=$O(^DIC(36,"B",INSNAME),-1)
"RTN","IBCNEUT8",45,0)
 F  S NAME=$O(^DIC(36,"B",NAME)) Q:$E(NAME,1,$L(INSNAME))'=INSNAME  D
"RTN","IBCNEUT8",46,0)
 . ;I $$TRIM^XLFSTR(NAME)=INSNAME M INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",47,0)
 . I $$TRIM^XLFSTR(NAME)=INSNAME D
"RTN","IBCNEUT8",48,0)
 . . N %X,%Y
"RTN","IBCNEUT8",49,0)
 . . S %X="^DIC(36,""B"",NAME,"
"RTN","IBCNEUT8",50,0)
 . . S %Y="INSIEN("
"RTN","IBCNEUT8",51,0)
 . . I $D(^DIC(36,"B",NAME))#10=1 S INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",52,0)
 . . D %XY^%RCR K %X,%Y
"RTN","IBCNEUT8",53,0)
 ;
"RTN","IBCNEUT8",54,0)
 Q
"RTN","IBCNEUT8",55,0)
 ;
"RTN","IBCNEUT8",56,0)
FINDPAY(INSIEN,PAYID) ; Find National IDs for an array of ins co IENs
"RTN","IBCNEUT8",57,0)
 ; Input parameter: INSIEN - Array of ins co IENs
"RTN","IBCNEUT8",58,0)
 ; Output parameter: PAYID - Array of National IDs
"RTN","IBCNEUT8",59,0)
 N PAYIEN,IEN
"RTN","IBCNEUT8",60,0)
 S IEN=0 F  S IEN=$O(INSIEN(IEN)) Q:'IEN  D
"RTN","IBCNEUT8",61,0)
 . ; Discard INACTIVE ins companies from the array
"RTN","IBCNEUT8",62,0)
 . I '$$ACTIVE^IBCNEUT4(IEN) K INSIEN(IEN) Q
"RTN","IBCNEUT8",63,0)
 . ; Retrieve the Payer IEN for this ins co IEN
"RTN","IBCNEUT8",64,0)
 . S PAYIEN=$P($G(^DIC(36,IEN,3)),U,10)
"RTN","IBCNEUT8",65,0)
 . I 'PAYIEN Q
"RTN","IBCNEUT8",66,0)
 . ; Retrieve the National ID for this ins co IEN
"RTN","IBCNEUT8",67,0)
 . S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT8",68,0)
 . I PAYID'="" S PAYID(PAYID)=IEN
"RTN","IBCNEUT8",69,0)
 Q
"RTN","IBCNEUT8",70,0)
 ;
"RTN","IBCNEUT8",71,0)
ERROR(ERRCODE,ERRTEXT,MULTI) ; Function to return the IEN of the Symbol
"RTN","IBCNEUT8",72,0)
 ; file entry and error text - also adds error data to ARRAY
"RTN","IBCNEUT8",73,0)
 ; Input parameters: ERRCODE - Symbol mnemonic ("B1", "B2", etc)
"RTN","IBCNEUT8",74,0)
 ;                   ERRTEXT - Optional additional error text
"RTN","IBCNEUT8",75,0)
 ;                   MULTI   - Optional array of items to display
"RTN","IBCNEUT8",76,0)
 ; Output parameters: ARRAY - Updated by this function
"RTN","IBCNEUT8",77,0)
 ;     Function value - Symbol IEN
"RTN","IBCNEUT8",78,0)
 NEW %,DISYS,DIW,DIWI,DIWT,DIWTC,DIWX,DN,ERRARR,I,SYMIEN,Z
"RTN","IBCNEUT8",79,0)
 ; If an optional array of items to display was passed in, add it
"RTN","IBCNEUT8",80,0)
 I $G(ERRTEXT)'="",$D(MULTI) S ERRTEXT=$$MULTNAME^IBCNEUT4(ERRTEXT,.MULTI)
"RTN","IBCNEUT8",81,0)
 S SYMIEN=$$FIND1^DIC(365.15,,"X",$G(ERRCODE))
"RTN","IBCNEUT8",82,0)
 ; call an IB utility to parse ERRTEXT into lines of acceptable length
"RTN","IBCNEUT8",83,0)
 D FSTRNG^IBJU1($G(ERRTEXT),70,.ERRARR)
"RTN","IBCNEUT8",84,0)
 ; Update the line counter in the error array
"RTN","IBCNEUT8",85,0)
 S ARRAY=$G(ARRAY)+1
"RTN","IBCNEUT8",86,0)
 ; Merge the error text array returned by the IB utility in
"RTN","IBCNEUT8",87,0)
 M ARRAY(ARRAY)=ERRARR
"RTN","IBCNEUT8",88,0)
 ; Reset the error-specific node of the error array to follow the
"RTN","IBCNEUT8",89,0)
 ; published input/output parameter format
"RTN","IBCNEUT8",90,0)
 S ARRAY(ARRAY)=SYMIEN_U_ERRARR
"RTN","IBCNEUT8",91,0)
 Q SYMIEN
"RTN","IBCNEUT8",92,0)
 ;
"RTN","IBCNSC")
0^42^B15839129
"RTN","IBCNSC",1,0)
IBCNSC ;ALB/NLR - INSURANCE COMPANY EDIT ;12-MAR-1993
"RTN","IBCNSC",2,0)
 ;;2.0;INTEGRATED BILLING;**46,137,184**;21-MAR-94
"RTN","IBCNSC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSC",4,0)
 ;
"RTN","IBCNSC",5,0)
EN ; -- main entry point for IBCNS INSURANCE COMPANY, IBCNS VIEW INS CO
"RTN","IBCNSC",6,0)
 NEW IB1ST
"RTN","IBCNSC",7,0)
 K VALMQUIT,VALMEVL,XQORS,^TMP("XQORS",$J),IBCNS
"RTN","IBCNSC",8,0)
 S IBCHANGE="OKAY"
"RTN","IBCNSC",9,0)
 I '$G(IBVIEW) D EN^VALM("IBCNS INSURANCE COMPANY") G ENQ
"RTN","IBCNSC",10,0)
 D EN^VALM("IBCNS VIEW INS CO")
"RTN","IBCNSC",11,0)
ENQ Q
"RTN","IBCNSC",12,0)
 ;
"RTN","IBCNSC",13,0)
HDR ; -- header code
"RTN","IBCNSC",14,0)
 S VALMHDR(1)="Insurance Company Information for: "_$E($P(^DIC(36,IBCNS,0),"^"),1,30)
"RTN","IBCNSC",15,0)
 S VALMHDR(2)="Type of Company: "_$E($P($G(^IBE(355.2,+$P($G(^DIC(36,+IBCNS,0)),"^",13),0)),"^"),1,20)_"                     Currently "_$S(+($P($G(^DIC(36,+IBCNS,0)),"^",5)):"Inactive",1:"Active")
"RTN","IBCNSC",16,0)
 Q
"RTN","IBCNSC",17,0)
 ;
"RTN","IBCNSC",18,0)
INIT ; -- init variables and list array
"RTN","IBCNSC",19,0)
 K VALMQUIT
"RTN","IBCNSC",20,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSC",21,0)
 I '$D(IBCNS) D INSCO Q:$D(VALMQUIT)
"RTN","IBCNSC",22,0)
 D BLD,HDR
"RTN","IBCNSC",23,0)
 Q
"RTN","IBCNSC",24,0)
BLD ; -- list builder
"RTN","IBCNSC",25,0)
 NEW BLNKI
"RTN","IBCNSC",26,0)
 K ^TMP("IBCNSC",$J)
"RTN","IBCNSC",27,0)
 D KILL^VALM10()
"RTN","IBCNSC",28,0)
 F BLNKI=1:1:69 D BLANK(.BLNKI)
"RTN","IBCNSC",29,0)
 ; ESG - 7/29/02 - IIV project - Added payer section
"RTN","IBCNSC",30,0)
 D PARAM^IBCNSC01,MAIN^IBCNSC01,CLAIMS1^IBCNSC0,CLAIMS2^IBCNSC0,PRESCR^IBCNSC1,APPEALS,INQUIRY,PROVID^IBCNSC1,PAYER^IBCNSC01,REMARKS^IBCNSC01,SYN^IBCNSC01
"RTN","IBCNSC",31,0)
 S VALMCNT=+$O(^TMP("IBCNSC",$J,""),-1)
"RTN","IBCNSC",32,0)
 Q
"RTN","IBCNSC",33,0)
 ;
"RTN","IBCNSC",34,0)
APPEALS ;
"RTN","IBCNSC",35,0)
 N OFFSET,START,IBCNS14,IBADD
"RTN","IBCNSC",36,0)
 S IBCNS14=$$ADDRESS^IBCNSC0(IBCNS,.14,7)
"RTN","IBCNSC",37,0)
 S START=40,OFFSET=2
"RTN","IBCNSC",38,0)
 D SET^IBCNSP(START,OFFSET+25," Appeals Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",39,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS14,"^",7),0)),"^",1))
"RTN","IBCNSC",40,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS14,"^",1))
"RTN","IBCNSC",41,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS14,"^",2))
"RTN","IBCNSC",42,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",43,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS14,"^",3)) S IBADD=1
"RTN","IBCNSC",44,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS14,"^",4),1,15)_$S($P(IBCNS14,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS14,"^",5),0)),"^",2)_" "_$E($P(IBCNS14,"^",6),1,5))
"RTN","IBCNSC",45,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS14,"^",8))
"RTN","IBCNSC",46,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS14,"^",9))
"RTN","IBCNSC",47,0)
 Q
"RTN","IBCNSC",48,0)
 ;
"RTN","IBCNSC",49,0)
INQUIRY ;
"RTN","IBCNSC",50,0)
 ;
"RTN","IBCNSC",51,0)
 N OFFSET,START,IBCNS15,IBADD
"RTN","IBCNSC",52,0)
 S IBCNS15=$$ADDRESS^IBCNSC0(IBCNS,.15,8)
"RTN","IBCNSC",53,0)
 S START=47,OFFSET=2
"RTN","IBCNSC",54,0)
 D SET^IBCNSP(START,OFFSET+25," Inquiry Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",55,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS15,"^",7),0)),"^",1))
"RTN","IBCNSC",56,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS15,"^"))
"RTN","IBCNSC",57,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS15,"^",2))
"RTN","IBCNSC",58,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",59,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS15,"^",3)) S IBADD=1
"RTN","IBCNSC",60,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS15,"^",4),1,15)_$S($P(IBCNS15,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS15,"^",5),0)),"^",2)_" "_$E($P(IBCNS15,"^",6),1,5))
"RTN","IBCNSC",61,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS15,"^",8))
"RTN","IBCNSC",62,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS15,"^",9))
"RTN","IBCNSC",63,0)
 Q
"RTN","IBCNSC",64,0)
 ;
"RTN","IBCNSC",65,0)
HELP ; -- help code
"RTN","IBCNSC",66,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSC",67,0)
 Q
"RTN","IBCNSC",68,0)
 ;
"RTN","IBCNSC",69,0)
EXIT ; -- exit code
"RTN","IBCNSC",70,0)
 K VALMQUIT,IBCNS,IBCHANGE
"RTN","IBCNSC",71,0)
 D CLEAN^VALM10
"RTN","IBCNSC",72,0)
 Q
"RTN","IBCNSC",73,0)
 ;
"RTN","IBCNSC",74,0)
INSCO ; -- select insurance company
"RTN","IBCNSC",75,0)
 NEW DLAYGO,DIC,X,Y,DTOUT,DUOUT
"RTN","IBCNSC",76,0)
 I '$D(IBCNS) D  G:$D(VALMQUIT) INSCOQ
"RTN","IBCNSC",77,0)
 .S DIC="^DIC(36,",DIC(0)="AEQMZ",DIC("S")="I '$G(^(5))"
"RTN","IBCNSC",78,0)
 .I '$G(IBVIEW) S DLAYGO=36,DIC(0)=DIC(0)_"L"
"RTN","IBCNSC",79,0)
 .D ^DIC K DIC
"RTN","IBCNSC",80,0)
 .S IBCNS=+Y
"RTN","IBCNSC",81,0)
 I $G(IBCNS)<1 K IBCNS S VALMQUIT="" G INSCOQ
"RTN","IBCNSC",82,0)
INSCOQ ;
"RTN","IBCNSC",83,0)
 K DIC
"RTN","IBCNSC",84,0)
 Q
"RTN","IBCNSC",85,0)
 ;
"RTN","IBCNSC",86,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSC",87,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSC",88,0)
 Q
"RTN","IBCNSC",89,0)
 ;
"RTN","IBCNSC01")
0^41^B48362855
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT -  ;21-OCT-1993
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184**;21-MAR-94
"RTN","IBCNSC01",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 D SET^IBCNSP(START+1,OFFSET," Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+2,OFFSET,"          Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+3,OFFSET,"   Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+4,OFFSET,"    Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+5,OFFSET,"      One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+6,OFFSET," Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+7,OFFSET," Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+8,OFFSET,"   Filing Time Frame: "_$P(IBCNS0,"^",12))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+9,OFFSET,"    Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",21,0)
 D SET^IBCNSP(START+10,OFFSET,"  Hosp. Provider No.: "_$E($P(IBCNS0,"^",11),1,15))
"RTN","IBCNSC01",22,0)
 D SET^IBCNSP(START+11,OFFSET,"  Prof. Provider No.: "_$E($P(IBCNS0,"^",17),1,15))
"RTN","IBCNSC01",23,0)
 N START,OFFSET
"RTN","IBCNSC01",24,0)
 S START=1,OFFSET=45
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+1,OFFSET,"   Primary Form Type: "_$$EXPAND^IBTRE(36,.14,$P(IBCNS0,"^",14)))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",28,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",29,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",30,0)
 D SET^IBCNSP(START+6,OFFSET+10,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3))
"RTN","IBCNSC01",31,0)
 I +IBCNS3=2 D SET^IBCNSP(START+7,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+8,OFFSET+5,"Electronic Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+9,OFFSET,"Electronic Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",34,0)
 D SET^IBCNSP(START+10,OFFSET-3,"Inst Electronic Bill ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+11,OFFSET-3,"Prof Electronic Bill ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",36,0)
 Q
"RTN","IBCNSC01",37,0)
 ;
"RTN","IBCNSC01",38,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",39,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",40,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",41,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",42,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",43,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",44,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",45,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",46,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",47,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",48,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",49,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",50,0)
PHONEQ Q IBX
"RTN","IBCNSC01",51,0)
 ;
"RTN","IBCNSC01",52,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",53,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",54,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",55,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",56,0)
 S START=15,OFFSET=25
"RTN","IBCNSC01",57,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",58,0)
 N OFFSET S OFFSET=2
"RTN","IBCNSC01",59,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",60,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",61,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",62,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",63,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC01",64,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",65,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",66,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",67,0)
 Q
"RTN","IBCNSC01",68,0)
 ;
"RTN","IBCNSC01",69,0)
 ;
"RTN","IBCNSC01",70,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",71,0)
 ; this insurance company.
"RTN","IBCNSC01",72,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",73,0)
 ;
"RTN","IBCNSC01",74,0)
 NEW PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",75,0)
 NEW START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",76,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",77,0)
 I PAYERIEN D
"RTN","IBCNSC01",78,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",79,0)
 . S APP=0
"RTN","IBCNSC01",80,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",81,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",82,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",83,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",84,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",85,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",86,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",87,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",88,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",89,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID
"RTN","IBCNSC01",90,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID
"RTN","IBCNSC01",91,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN
"RTN","IBCNSC01",92,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",93,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",94,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",95,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",96,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",97,0)
 .. Q
"RTN","IBCNSC01",98,0)
 . Q
"RTN","IBCNSC01",99,0)
 ;
"RTN","IBCNSC01",100,0)
 ; Start the display of Payer data on line 69
"RTN","IBCNSC01",101,0)
 S START=69
"RTN","IBCNSC01",102,0)
 S TITLE=" Payer Information/Electronic Insurance Verification "
"RTN","IBCNSC01",103,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",104,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",105,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",106,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",107,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",108,0)
 S IBLINE=START+2
"RTN","IBCNSC01",109,0)
 ;
"RTN","IBCNSC01",110,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",111,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",112,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",113,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",114,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",115,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",116,0)
 . Q
"RTN","IBCNSC01",117,0)
 ;
"RTN","IBCNSC01",118,0)
 ; Display all the applications
"RTN","IBCNSC01",119,0)
 S APPNAME=""
"RTN","IBCNSC01",120,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",121,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",122,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",123,0)
 . ;
"RTN","IBCNSC01",124,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",125,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",126,0)
 . D SET^IBCNSP(IBLINE,50,"Auto-Accept Info: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",127,0)
 . ;
"RTN","IBCNSC01",128,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",129,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",130,0)
 . D SET^IBCNSP(IBLINE,47,"Ident Req Subscr ID: "_$P(APPDATA(APPNAME),U,4))
"RTN","IBCNSC01",131,0)
 . ;
"RTN","IBCNSC01",132,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",133,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",134,0)
 . D SET^IBCNSP(IBLINE,51,"SSN = Subscr ID: "_$P(APPDATA(APPNAME),U,5))
"RTN","IBCNSC01",135,0)
 . ;
"RTN","IBCNSC01",136,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",137,0)
 . D SET^IBCNSP(IBLINE,8,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",138,0)
 . D SET^IBCNSP(IBLINE,54,"Transmit SSN: "_$P(APPDATA(APPNAME),U,6))
"RTN","IBCNSC01",139,0)
 . ;
"RTN","IBCNSC01",140,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",141,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",142,0)
 . ;
"RTN","IBCNSC01",143,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",144,0)
 . D SET^IBCNSP(IBLINE,13,"D-Date: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",145,0)
 . ;
"RTN","IBCNSC01",146,0)
 . Q
"RTN","IBCNSC01",147,0)
PAYERX ;
"RTN","IBCNSC01",148,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",149,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",150,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",151,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",152,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",153,0)
 Q
"RTN","IBCNSC01",154,0)
 ;
"RTN","IBCNSC01",155,0)
 ;
"RTN","IBCNSC01",156,0)
REMARKS ;
"RTN","IBCNSC01",157,0)
 ;
"RTN","IBCNSC01",158,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",159,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",160,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",161,0)
 ;
"RTN","IBCNSC01",162,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",163,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",164,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",165,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",166,0)
 . Q
"RTN","IBCNSC01",167,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",168,0)
 Q
"RTN","IBCNSC01",169,0)
 ;
"RTN","IBCNSC01",170,0)
SYN ;
"RTN","IBCNSC01",171,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",172,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",173,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",174,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",175,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",176,0)
 Q
"RTN","IBCNSC01",177,0)
 ;
"RTN","IBCNSMM")
0^16^B20650555
"RTN","IBCNSMM",1,0)
IBCNSMM ;ALB/CMS -MEDICARE INSURANCE INTAKE ; 18-OCT-98
"RTN","IBCNSMM",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,184**;21-MAR-94
"RTN","IBCNSMM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSMM",4,0)
 Q
"RTN","IBCNSMM",5,0)
 ;
"RTN","IBCNSMM",6,0)
EN ; -- Entry point from Medicare Intake Standalone option
"RTN","IBCNSMM",7,0)
 N DIC,DIR,DA,%A,DFN,X,Y,IBQUIT,IBCNSP,IBSOURCE
"RTN","IBCNSMM",8,0)
 S (IBQUIT,IBCNSP)=0 D GETWNR I IBQUIT G ENQ
"RTN","IBCNSMM",9,0)
 ;
"RTN","IBCNSMM",10,0)
 ; - allow the user to enter the Source of Information for the policies
"RTN","IBCNSMM",11,0)
 W !!,"You may enter the 'Source of Information' that will be filed with all"
"RTN","IBCNSMM",12,0)
 W !,"Medicare insurance coverage policies that are created.",!
"RTN","IBCNSMM",13,0)
 ;
"RTN","IBCNSMM",14,0)
 S DIR(0)="2.312,1.09"
"RTN","IBCNSMM",15,0)
 S DIR("A")="Enter Source of Information"
"RTN","IBCNSMM",16,0)
 S DIR("B")="INTERVIEW"
"RTN","IBCNSMM",17,0)
 D ^DIR K DUOUT,DTOUT,DIRUT,DIROUT,DIR
"RTN","IBCNSMM",18,0)
 S IBSOURCE=+Y I Y<1 G ENQ
"RTN","IBCNSMM",19,0)
 W !
"RTN","IBCNSMM",20,0)
 ;
"RTN","IBCNSMM",21,0)
 ; - loop to select patients
"RTN","IBCNSMM",22,0)
ENA S DIC(0)="AEQMN",DIC="^DPT(" D ^DIC
"RTN","IBCNSMM",23,0)
 I +Y<1 G ENQ
"RTN","IBCNSMM",24,0)
 S DFN=+Y
"RTN","IBCNSMM",25,0)
 I $G(^DPT(DFN,.35)) W *7,!!,?10,"Patient Expired on ",$$FMTE^XLFDT($P(^DPT(DFN,.35),U))
"RTN","IBCNSMM",26,0)
 W ! D DISP^IBCNS W !,?3 S X="",$P(X,"=",76)="" W X
"RTN","IBCNSMM",27,0)
 D ENR(DFN,IBSOURCE,1) K DIC W !! G ENA
"RTN","IBCNSMM",28,0)
 ;
"RTN","IBCNSMM",29,0)
ENQ Q
"RTN","IBCNSMM",30,0)
 ;
"RTN","IBCNSMM",31,0)
 ;
"RTN","IBCNSMM",32,0)
ENR(DFN,IBSOUR,IBOPT) ; -- Entry point from IBCNBME Patient Registration or Pre-Registration
"RTN","IBCNSMM",33,0)
 ;    Input Variable DFN Required and IBSOUR =Source of Information
"RTN","IBCNSMM",34,0)
 ;                   IBOPT =1 if comming from MII Standalone Option
"RTN","IBCNSMM",35,0)
 ;
"RTN","IBCNSMM",36,0)
 N D,DIE,DA,DIR,DIC,E,IBCPOL,IBCNSP,IBCDFN,IBQUIT,IBOK,IBC0,IBAD,IBGRP,IBADPOL
"RTN","IBCNSMM",37,0)
 N IBNAME,IBHICN,IBAEFF,IBBEFF,IBCOVP,IBGNA,IBGNU,IBBUF,IBNEW,IBP,X,Y
"RTN","IBCNSMM",38,0)
 N IBPOLA,IBPOLB,IBARR,IBHIT,IBHITA,IBHITB,IBCOB,IBCOBI
"RTN","IBCNSMM",39,0)
 ;
"RTN","IBCNSMM",40,0)
 S (IBAEFF,IBBEFF,IBCNSP,IBCDFN,IBNEW,IBQUIT)=0,IBADPOL=1
"RTN","IBCNSMM",41,0)
 S (IBNAME,IBHICN)=""
"RTN","IBCNSMM",42,0)
 ;
"RTN","IBCNSMM",43,0)
 ; -- Get Standard Medicare Insurance Company and plans in IBCNSP
"RTN","IBCNSMM",44,0)
 D GETWNR I IBQUIT G ENRQ
"RTN","IBCNSMM",45,0)
 ;
"RTN","IBCNSMM",46,0)
 ; -- get the patient's Medicare policies
"RTN","IBCNSMM",47,0)
 S (IBPOLA,IBPOLB)=0
"RTN","IBCNSMM",48,0)
 S IBCDFN=0 F  S IBCDFN=$O(^DPT(DFN,.312,"B",+IBCNSP,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSMM",49,0)
 .S IBCPOL=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSMM",50,0)
 .;
"RTN","IBCNSMM",51,0)
 .; - is the policy for Part A?
"RTN","IBCNSMM",52,0)
 .I $P(IBCNSP,U,3)=$P(IBCPOL,U,18) D  Q
"RTN","IBCNSMM",53,0)
 ..S IBPOLA=IBPOLA+1,IBARR("A",IBPOLA)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",54,0)
 .;
"RTN","IBCNSMM",55,0)
 .; - is the policy for Part B?
"RTN","IBCNSMM",56,0)
 .I $P(IBCNSP,U,5)=$P(IBCPOL,U,18) D
"RTN","IBCNSMM",57,0)
 ..S IBPOLB=IBPOLB+1,IBARR("B",IBPOLB)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",58,0)
 ;
"RTN","IBCNSMM",59,0)
 ; - can't edit here if there is more than one policy
"RTN","IBCNSMM",60,0)
 I $D(IBARR("A",2)) K IBARR("A") D
"RTN","IBCNSMM",61,0)
 .W !!,"This patient has more than one Part A policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",62,0)
 ;
"RTN","IBCNSMM",63,0)
 I $D(IBARR("B",2)) K IBARR("B") D
"RTN","IBCNSMM",64,0)
 .W !!,"This patient has more than one Part B policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",65,0)
 ;
"RTN","IBCNSMM",66,0)
 I (IBPOLA!IBPOLB),'$D(IBARR) G ENRQ
"RTN","IBCNSMM",67,0)
 ;
"RTN","IBCNSMM",68,0)
 ; -- Ask for Medicare Insurance Card information
"RTN","IBCNSMM",69,0)
 ;    Return IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOB/IBCOBI
"RTN","IBCNSMM",70,0)
 D MII^IBCNSMM2 I IBQUIT G ENRQ
"RTN","IBCNSMM",71,0)
 ;
"RTN","IBCNSMM",72,0)
 ; - if Part A or B exists, but no changes, quit
"RTN","IBCNSMM",73,0)
 I $D(IBARR("A",1)) D COM($P(IBARR("A",1),"^",2,99),"A") I IBHIT D
"RTN","IBCNSMM",74,0)
 .S IBHITA=1 W !,"  * No Part A changes made..."
"RTN","IBCNSMM",75,0)
 ;
"RTN","IBCNSMM",76,0)
 I $D(IBARR("B",1)) D COM($P(IBARR("B",1),"^",2,99),"B") I IBHIT D
"RTN","IBCNSMM",77,0)
 .S IBHITB=1 W !,"  * No Part B changes made..."
"RTN","IBCNSMM",78,0)
 ;
"RTN","IBCNSMM",79,0)
 I $G(IBHITA),$G(IBHITB) G ENRQ
"RTN","IBCNSMM",80,0)
 I $G(IBHITA),'$G(IBBEFF) G ENRQ
"RTN","IBCNSMM",81,0)
 I $G(IBHITB),'$G(IBAEFF) G ENRQ
"RTN","IBCNSMM",82,0)
 ;
"RTN","IBCNSMM",83,0)
 ; -- If user not holding key set data in Buffer File
"RTN","IBCNSMM",84,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D  G ENRQ
"RTN","IBCNSMM",85,0)
 .I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",86,0)
 .I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",87,0)
 ;
"RTN","IBCNSMM",88,0)
 ; -- Otherwise, set data into permanent files
"RTN","IBCNSMM",89,0)
 I IBAEFF,'$G(IBHITA) D
"RTN","IBCNSMM",90,0)
 .I IBPOLA,'$D(IBARR("A")) Q  ; can't update Part A policy
"RTN","IBCNSMM",91,0)
 .I '$D(IBARR("A",1)) D ADDP("A") Q
"RTN","IBCNSMM",92,0)
 .S IBCDFN=+IBARR("A",1) D SETP^IBCNSMM1("A")
"RTN","IBCNSMM",93,0)
 I IBBEFF,'$G(IBHITB) D
"RTN","IBCNSMM",94,0)
 .I IBPOLB,'$D(IBARR("B")) Q  ; can't update Part B policy
"RTN","IBCNSMM",95,0)
 .I '$D(IBARR("B",1)) D ADDP("B") Q
"RTN","IBCNSMM",96,0)
 .S IBCDFN=+IBARR("B",1) D SETP^IBCNSMM1("B")
"RTN","IBCNSMM",97,0)
 ;
"RTN","IBCNSMM",98,0)
ENRQ W ! Q
"RTN","IBCNSMM",99,0)
 ;
"RTN","IBCNSMM",100,0)
 ;
"RTN","IBCNSMM",101,0)
 ;
"RTN","IBCNSMM",102,0)
ADDP(IBP) ; -- Create a new patient policy
"RTN","IBCNSMM",103,0)
 ;    Input: DFN
"RTN","IBCNSMM",104,0)
 ;           IBCNSP=MED WNR INS IEN^MEDICARE (WNR)
"RTN","IBCNSMM",105,0)
 ;                  ^PART A IEN^PART A
"RTN","IBCNSMM",106,0)
 ;                  ^PART B IEN^PART A
"RTN","IBCNSMM",107,0)
 ;           IBP = "A" or "B" for medicare part
"RTN","IBCNSMM",108,0)
 ;           IBSOUR = Source of Information
"RTN","IBCNSMM",109,0)
 ;   Return: IBCDFN=-1 could not add OR Policy ien
"RTN","IBCNSMM",110,0)
 ;           IBCOVP= Covered by Health Insurance
"RTN","IBCNSMM",111,0)
 ;
"RTN","IBCNSMM",112,0)
 N X,Y,DO,DD,DA,DR,DIC,DIE,DIK,DIR,DIRUT,IBSPEC
"RTN","IBCNSMM",113,0)
 ; -- Create a New patient policy
"RTN","IBCNSMM",114,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM",115,0)
 ;
"RTN","IBCNSMM",116,0)
 D FIELD^DID(2,.3121,"","SPECIFIER","IBSPEC")
"RTN","IBCNSMM",117,0)
 S DIC("DR")="1.09////"_IBSOUR_";1.05///NOW;1.06////"_DUZ,DIC("P")=$G(IBSPEC("SPECIFIER"))
"RTN","IBCNSMM",118,0)
 K DD,DO S DA(1)=DFN,DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=+IBCNSP,DLAYGO=2.312
"RTN","IBCNSMM",119,0)
 D FILE^DICN K DD,DO,DLAYGO,DIC
"RTN","IBCNSMM",120,0)
 S IBCDFN=+Y
"RTN","IBCNSMM",121,0)
 I IBCDFN<1 W !!,*7,"  <Could not create new policy at this time.  Try Later!>",! G ADDPQ
"RTN","IBCNSMM",122,0)
 ;
"RTN","IBCNSMM",123,0)
 ; -- Set Medicare policy data
"RTN","IBCNSMM",124,0)
 D SETP^IBCNSMM1(IBP)
"RTN","IBCNSMM",125,0)
ADDPQ Q
"RTN","IBCNSMM",126,0)
 ;
"RTN","IBCNSMM",127,0)
 ;
"RTN","IBCNSMM",128,0)
GETWNR ;
"RTN","IBCNSMM",129,0)
 ; -- Get Medicare (WNR) insurance company and plan data
"RTN","IBCNSMM",130,0)
 ;    Returns IBCNSP or IBQUIT
"RTN","IBCNSMM",131,0)
 ;    IBCNSP="Error: Medicare (WNR) ... not setup properly" 
"RTN","IBCNSMM",132,0)
 ;           if Medicare WNR entry or plans not setup properly
"RTN","IBCNSMM",133,0)
 ;
"RTN","IBCNSMM",134,0)
 ;    IBCNSP=INS CO. (36) IEN^"MEDICARE (WNR)"
"RTN","IBCNSMM",135,0)
 ;           ^PLAN (355.3) PARTA IEN^"PART A"
"RTN","IBCNSMM",136,0)
 ;           ^PLAN (355.3) PARTB IEN^"PART B"
"RTN","IBCNSMM",137,0)
 ;
"RTN","IBCNSMM",138,0)
 I 'IBCNSP S IBCNSP=$$GETWNR^IBCNSMM1
"RTN","IBCNSMM",139,0)
 I 'IBCNSP W !!,*7,?3,IBCNSP S IBQUIT=1
"RTN","IBCNSMM",140,0)
 Q
"RTN","IBCNSMM",141,0)
 ;
"RTN","IBCNSMM",142,0)
VALHIC(X) ; Edits for validating HIC #
"RTN","IBCNSMM",143,0)
 ; X = the HIC # to be validated
"RTN","IBCNSMM",144,0)
 N VAL
"RTN","IBCNSMM",145,0)
 S VAL=1
"RTN","IBCNSMM",146,0)
 I X'?9N1A.1AN,X'?1.3A6N,X'?1.3A9N S VAL=0
"RTN","IBCNSMM",147,0)
 Q VAL
"RTN","IBCNSMM",148,0)
 ;
"RTN","IBCNSMM",149,0)
COM(X,Y) ; Compare X with the intake variables.
"RTN","IBCNSMM",150,0)
 ;    Input: X => 0th node of policy in file #2.312
"RTN","IBCNSMM",151,0)
 ;           Y => A (Part A) or B (part B)
"RTN","IBCNSMM",152,0)
 ;   Output: IBHIT=1 (no changes made)
"RTN","IBCNSMM",153,0)
 S IBHIT=0
"RTN","IBCNSMM",154,0)
 I $P(X,"^",17)'=IBNAME G COMQ
"RTN","IBCNSMM",155,0)
 I $P(X,"^",2)'=IBHICN G COMQ
"RTN","IBCNSMM",156,0)
 I $P(X,"^",8)'=$S(Y="A":IBAEFF,1:IBBEFF) G COMQ
"RTN","IBCNSMM",157,0)
 I $P(X,"^",20)'=IBCOBI G COMQ
"RTN","IBCNSMM",158,0)
 ;
"RTN","IBCNSMM",159,0)
 S IBHIT=1
"RTN","IBCNSMM",160,0)
COMQ Q
"RTN","IBJPI")
0^22^B66045936
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP IIV SITE PARAMETERS SCREEN ;14-JUN-2002
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBJPI",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIIV application used for Insurance Identification and Verification."
"RTN","IBJPI",28,0)
 W !!,"The first section, General Parameters, concerns overall parameters"
"RTN","IBJPI",29,0)
 W !,"for monitoring the interface and retrying communication timeouts."
"RTN","IBJPI",30,0)
 W !!,"The second section, Batch Extracts, concerns extract specific parameters"
"RTN","IBJPI",31,0)
 W !,"including active status, selection criteria and maximum records extracted"
"RTN","IBJPI",32,0)
 W !,"per day."
"RTN","IBJPI",33,0)
 W !!,"The third section, Patients without Insurance, concerns whether or not"
"RTN","IBJPI",34,0)
 W !,"identification inquiries should be made for patients without insurance on"
"RTN","IBJPI",35,0)
 W !,"inactive policies or the Most Popular Insurance Companies list below to see if"
"RTN","IBJPI",36,0)
 W !,"the patient is covered by one of those companies."
"RTN","IBJPI",37,0)
 D PAUSE^VALM1
"RTN","IBJPI",38,0)
 W !!,"The final section, Most Popular Insurance Companies, is a generated list"
"RTN","IBJPI",39,0)
 W !,"of the most popular insurance companies for a given date range.  This list"
"RTN","IBJPI",40,0)
 W !,"is based on the quantity of authorized bills generated by insurance company"
"RTN","IBJPI",41,0)
 W !,"for the date range.  The columns display whether or not the insurance"
"RTN","IBJPI",42,0)
 W !,"company is associated with a payer that is locally active or nationally"
"RTN","IBJPI",43,0)
 W !,"active.  The locally active flag can be updated by the site as long as"
"RTN","IBJPI",44,0)
 W !,"the eIIV application has not been deactivated.  The nationally active flag"
"RTN","IBJPI",45,0)
 W !,"is only updated by the Eligibility Communicator.  Both flags must be set"
"RTN","IBJPI",46,0)
 W !,"to YES for an insurance inquiry to be transmitted to the Eligibility"
"RTN","IBJPI",47,0)
 W !,"Communicator."
"RTN","IBJPI",48,0)
 D PAUSE^VALM1
"RTN","IBJPI",49,0)
 W @IOF
"RTN","IBJPI",50,0)
 S VALMBCK="R"
"RTN","IBJPI",51,0)
 Q
"RTN","IBJPI",52,0)
 ;
"RTN","IBJPI",53,0)
EXIT ; exit
"RTN","IBJPI",54,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",55,0)
 D CLEAN^VALM10
"RTN","IBJPI",56,0)
 Q
"RTN","IBJPI",57,0)
 ;
"RTN","IBJPI",58,0)
BLD ; build screen array
"RTN","IBJPI",59,0)
 N IBLN,IBCOL,IBWID,IBIIV,IBIIVB,IBIEN,CT,IBEX1,IBEX2,IBEX,IEN
"RTN","IBJPI",60,0)
 N IBST,IBDATA,DISYS,X,STATUS,IBADR,PIEN,AIEN,ADATA
"RTN","IBJPI",61,0)
 ;
"RTN","IBJPI",62,0)
 S (IBLN,VALMCNT)=0,IBCOL=3,IBIIV=$G(^IBE(350.9,1,51))
"RTN","IBJPI",63,0)
 ; -- Gen Params
"RTN","IBJPI",64,0)
 ; Skip line
"RTN","IBJPI",65,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=48
"RTN","IBJPI",66,0)
 S IBLN=$$SETN("General Parameters",IBLN,IBCOL,1,)
"RTN","IBJPI",67,0)
 S IBLN=$$SET("Days between electronic reverification checks:  ",$P(IBIIV,U),IBLN,IBWID)
"RTN","IBJPI",68,0)
 S IBLN=$$SET("Send daily statistical report via MailMan:  ",$S($P(IBIIV,U,2):"YES",$P(IBIIV,U,2)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",69,0)
 S IBLN=$$SET("Time of day for daily statistical report:  ",$P(IBIIV,U,3),IBLN,IBWID)
"RTN","IBJPI",70,0)
 S IBLN=$$SET("Mail Group for eIIV messages:  ",$$MGRP^IBCNEUT5,IBLN,IBWID)
"RTN","IBJPI",71,0)
 S IBLN=$$SET("HL7 Response Processing Method:  ",$S($P(IBIIV,U,13)="B":"BATCH",$P(IBIIV,U,13)="I":"IMMEDIATE",1:""),IBLN,IBWID)
"RTN","IBJPI",72,0)
 I $P(IBIIV,U,13)="B" D
"RTN","IBJPI",73,0)
 . S IBLN=$$SET("HL7 Batch Start Time:  ",$P(IBIIV,U,14),IBLN,IBWID)
"RTN","IBJPI",74,0)
 . S IBLN=$$SET("HL7 Batch Stop Time:  ",$P(IBIIV,U,19),IBLN,IBWID)
"RTN","IBJPI",75,0)
 S IBLN=$$SET("Daily Maximum HL7 Messages:  ",$P(IBIIV,U,15),IBLN,IBWID)
"RTN","IBJPI",76,0)
 S IBLN=$$SET("Contact Person:  ",$S($P(IBIIV,U,16)'="":$$GET1^DIQ(200,$P(IBIIV,U,16)_",",.01,"E"),1:""),IBLN,IBWID)
"RTN","IBJPI",77,0)
 S IBWID=62
"RTN","IBJPI",78,0)
 S IBLN=$$SET("How many days designates a communication timeout?  ",$P(IBIIV,U,5),IBLN,IBWID)
"RTN","IBJPI",79,0)
 S IBLN=$$SET("After a communication timeout, retry how many times?  ",$P(IBIIV,U,6),IBLN,IBWID)
"RTN","IBJPI",80,0)
 S IBLN=$$SET("After each communication timeout, send a MailMan message?  ",$S($P(IBIIV,U,7):"YES",$P(IBIIV,U,7)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",81,0)
 S IBLN=$$SET("After all retries are exhausted, send a MailMan message?  ",$S($P(IBIIV,U,20):"YES",$P(IBIIV,U,20)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",82,0)
 S IBLN=$$SET("Return all known ins. when validating specific ins. records?  ",$S($P(IBIIV,U,23):"YES",$P(IBIIV,U,23)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",83,0)
 ; Skip lines for Immediate
"RTN","IBJPI",84,0)
 I $P(IBIIV,U,13)'="B" D
"RTN","IBJPI",85,0)
 . S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",86,0)
 . S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",87,0)
 ;
"RTN","IBJPI",88,0)
 ; -- Batch Extracts
"RTN","IBJPI",89,0)
 S IBWID=53
"RTN","IBJPI",90,0)
 S IBLN=$$SETN("Batch Extracts",IBLN,IBCOL,1,)
"RTN","IBJPI",91,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",92,0)
 S IBLN=$$SET("Extract               Selection  Maximum # to  Suppress","",IBLN,IBWID)
"RTN","IBJPI",93,0)
 S IBLN=$$SETN(" Name          On/Off  Criteria   Extract/Day    Buffer ",IBLN,IBCOL+1,,1)
"RTN","IBJPI",94,0)
 ; Loop thru extracts
"RTN","IBJPI",95,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBJPI",96,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBJPI",97,0)
 . S IBEX=+$P(IBIIVB,U)  ; Type
"RTN","IBJPI",98,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,U)'="":$$GET1^DIQ(350.9002,$P(IBIIVB,U)_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",99,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,2):"ON",1:"OFF"),8)
"RTN","IBJPI",100,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,U,3),1:$P(IBIIVB,U,3))
"RTN","IBJPI",101,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,U,4),1:$P(IBIIVB,U,4))
"RTN","IBJPI",102,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"N/A",IBEX=2:IBEX1,IBEX=3!(IBEX=4):IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",103,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,5):+$P(IBIIVB,U,5),1:$P(IBIIVB,U,5)),14)
"RTN","IBJPI",104,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1!(IBEX=4):"N/A",IBEX=2!(IBEX=3):$S(+$P(IBIIVB,U,6):"ON",1:"OFF")),8)
"RTN","IBJPI",105,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",106,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",107,0)
 ;
"RTN","IBJPI",108,0)
 ; -- Pts w/o Ins
"RTN","IBJPI",109,0)
 ; Skip line
"RTN","IBJPI",110,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=54
"RTN","IBJPI",111,0)
 S IBLN=$$SETN("Patients Without Insurance",IBLN,IBCOL,1,)
"RTN","IBJPI",112,0)
 S IBLN=$$SET("Look at a patient's inactive insurance?  ",$S($P(IBIIV,U,8):"YES",$P(IBIIV,U,8)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",113,0)
 S IBLN=$$SET("Attempt inquiry by most popular insurance companies?  ",$S($P(IBIIV,U,9):"YES",$P(IBIIV,U,9)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",114,0)
 S IBLN=$$SET("How many insurance companies to try?  ",$P(IBIIV,U,10),IBLN,IBWID)
"RTN","IBJPI",115,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",116,0)
 ;
"RTN","IBJPI",117,0)
 ; -- Most Popular Ins Cos
"RTN","IBJPI",118,0)
 ; Skip line
"RTN","IBJPI",119,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=15
"RTN","IBJPI",120,0)
 S IBLN=$$SETN("Most Popular Insurance Companies",IBLN,IBCOL,1,)
"RTN","IBJPI",121,0)
 ;
"RTN","IBJPI",122,0)
 S IBLN=$$SET("List Date:  ",$$FMTE^XLFDT($P(IBIIV,U,11),"5Z")_" - "_$$FMTE^XLFDT($P(IBIIV,U,12),"5Z"),IBLN,IBWID)
"RTN","IBJPI",123,0)
 S IBLN=$$SET("Compile Date:  ",$$FMTE^XLFDT($P(IBIIV,U,21),"5Z"),IBLN,IBWID)
"RTN","IBJPI",124,0)
 S IBWID=45,IBLN=$$SET($$FO^IBCNEUT1("",38)_"Locally  Nationally","",IBLN,IBWID)
"RTN","IBJPI",125,0)
 S IBLN=$$SETN($$FO^IBCNEUT1("",39)_"Active?   Active?  ",IBLN,IBCOL+1,,1)
"RTN","IBJPI",126,0)
 ; Loop thru the current List of Ins Cos
"RTN","IBJPI",127,0)
 S (IEN,CT)=0 F  S IEN=$O(^IBE(350.9,1,51.18,IEN)) Q:'IEN  D
"RTN","IBJPI",128,0)
 . S IBIEN=$P($G(^IBE(350.9,1,51.18,IEN,0)),U) Q:'IBIEN  ; Bad IEN
"RTN","IBJPI",129,0)
 . S CT=CT+1,IBST=$$FO^IBCNEUT1(CT,2,"R")_".  "
"RTN","IBJPI",130,0)
 . ; Ins Co Name
"RTN","IBJPI",131,0)
 . S IBST=IBST_$$FO^IBCNEUT1($P($G(^DIC(36,IBIEN,0)),U),30)
"RTN","IBJPI",132,0)
 . ; Gather info about Ins Co
"RTN","IBJPI",133,0)
 . ; Look up the payer application data
"RTN","IBJPI",134,0)
 . S (PIEN,AIEN,ADATA)=""
"RTN","IBJPI",135,0)
 . S PIEN=$P($G(^DIC(36,IBIEN,3)),U,10)
"RTN","IBJPI",136,0)
 . I PIEN'="" S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBJPI",137,0)
 . I AIEN'="" S ADATA=$G(^IBE(365.12,+PIEN,1,+AIEN,0))
"RTN","IBJPI",138,0)
 . S IBST=IBST_"  "_$S('$P(ADATA,U,3):"   NO   ",1:"   YES  ")
"RTN","IBJPI",139,0)
 . S IBST=IBST_"  "_$S('$P(ADATA,U,2):"   NO",1:"   YES")
"RTN","IBJPI",140,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",141,0)
 . ;  Get ins co address
"RTN","IBJPI",142,0)
 . S IBADR=$G(^DIC(36,IBIEN,.11)),IBST="      ",IBWID=""
"RTN","IBJPI",143,0)
 . S IBST=IBST_$P(IBADR,U,1)
"RTN","IBJPI",144,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",145,0)
 . S IBST="      ",IBWID=""
"RTN","IBJPI",146,0)
 . S IBST=IBST_$P(IBADR,U,4)
"RTN","IBJPI",147,0)
 . I $P(IBADR,U,5)'="" S IBST=IBST_", "_$P(^DIC(5,$P(IBADR,U,5),0),U,2)
"RTN","IBJPI",148,0)
 . S IBST=IBST_" "_$S($L($P(IBADR,U,6))=9:$E($P(IBADR,U,6),1,5)_"-"_$E($P(IBADR,U,6),6,9),1:$P(IBADR,U,6))
"RTN","IBJPI",149,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",150,0)
 ; No Data Found if CT=0
"RTN","IBJPI",151,0)
 I CT=0 S IBLN=$$SET($$FO^IBCNEUT1("*** NO DATA FOUND!!!! ***",60),"",IBLN,IBWID)
"RTN","IBJPI",152,0)
 S IBLN=$$SET("","",IBLN,0),IBWID=71
"RTN","IBJPI",153,0)
 S IBLN=$$SET("An insurance company will not be available for electronic identification","",IBLN,IBWID)
"RTN","IBJPI",154,0)
 S IBLN=$$SET($$FO^IBCNEUT1("if the associated payer does not have a National ID or is not locally",IBWID),"",IBLN,IBWID)
"RTN","IBJPI",155,0)
 S IBLN=$$SET($$FO^IBCNEUT1("active.",IBWID),"",IBLN,IBWID)
"RTN","IBJPI",156,0)
 ;
"RTN","IBJPI",157,0)
 S VALMCNT=IBLN
"RTN","IBJPI",158,0)
 ;
"RTN","IBJPI",159,0)
 Q
"RTN","IBJPI",160,0)
 ;
"RTN","IBJPI",161,0)
SET(TTL,DATA,LN,WID) ;
"RTN","IBJPI",162,0)
 ; TTL = caption for field
"RTN","IBJPI",163,0)
 ; DATA = field value
"RTN","IBJPI",164,0)
 ; LN = current line #
"RTN","IBJPI",165,0)
 ; WID = right justify width
"RTN","IBJPI",166,0)
 N IBY
"RTN","IBJPI",167,0)
 ; update line ct
"RTN","IBJPI",168,0)
 S LN=LN+1
"RTN","IBJPI",169,0)
 ; offset line by 3 spaces
"RTN","IBJPI",170,0)
 S IBY="   "_$J(TTL,WID)_DATA D SET1(IBY,LN,0,$L(IBY))
"RTN","IBJPI",171,0)
 Q LN
"RTN","IBJPI",172,0)
 ;
"RTN","IBJPI",173,0)
SETN(TTL,LN,COL,RV,UN) ;
"RTN","IBJPI",174,0)
 ; TTL = caption for field
"RTN","IBJPI",175,0)
 ; LN = current line #
"RTN","IBJPI",176,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",177,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",178,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",179,0)
 N IBY
"RTN","IBJPI",180,0)
 ; update line ct
"RTN","IBJPI",181,0)
 S LN=LN+1
"RTN","IBJPI",182,0)
 ; offset line by 2 spaces
"RTN","IBJPI",183,0)
 S IBY="  "_TTL D SET1(IBY,LN,COL,$L(TTL),$G(RV),$G(UN))
"RTN","IBJPI",184,0)
 Q LN
"RTN","IBJPI",185,0)
 ;
"RTN","IBJPI",186,0)
SET1(STR,LN,COL,WD,RV,UN) ; Set up ^TMP array with screen data
"RTN","IBJPI",187,0)
 ; STR = line text
"RTN","IBJPI",188,0)
 ; LN = current line #
"RTN","IBJPI",189,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",190,0)
 ; WD = width of video attribute
"RTN","IBJPI",191,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",192,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",193,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI",194,0)
 I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJPI",195,0)
 I $G(UN)'="" D CNTRL^VALM10(LN,COL,WD,IOUON,IOUOFF)
"RTN","IBJPI",196,0)
 Q
"RTN","IBJPI",197,0)
 ;
"RTN","IBJPI2")
0^32^B57576755
"RTN","IBJPI2",1,0)
IBJPI2 ;DAOU/BHS - IIV SITE PARAMETERS SCREEN ACTIONS ;26-JUN-2002
"RTN","IBJPI2",2,0)
 ;;2.0;INTEGRATED BILLING;**184**;21-MAR-94
"RTN","IBJPI2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPI2",4,0)
 ;
"RTN","IBJPI2",5,0)
 ; IIV - Insurance Identification and Verification Interface
"RTN","IBJPI2",6,0)
 ;
"RTN","IBJPI2",7,0)
 ; Only call from tag
"RTN","IBJPI2",8,0)
 Q
"RTN","IBJPI2",9,0)
 ;
"RTN","IBJPI2",10,0)
MP ; Most Popular Ins Co processing
"RTN","IBJPI2",11,0)
 ; Init vars
"RTN","IBJPI2",12,0)
 N DIR,X,Y,DIRUT,STRTDT,ENDDT,ZTDESC,ZTDTH,ZTSK,ZTRTN,ZTIO,STATUS,%X
"RTN","IBJPI2",13,0)
 W !!,"Searching active tasks for Most Popular Insurance Companies Background job."
"RTN","IBJPI2",14,0)
 ;
"RTN","IBJPI2",15,0)
 ; Determine if the process is already running
"RTN","IBJPI2",16,0)
 L +^IBCNE("MP"):1 I '$T W !!,"The Most Popular Companies Background Compile is currently active, please retry later." S DIR(0)="E" D ^DIR K DIR G MPX
"RTN","IBJPI2",17,0)
 ;
"RTN","IBJPI2",18,0)
 ;
"RTN","IBJPI2",19,0)
 D FULL^VALM1
"RTN","IBJPI2",20,0)
 W @IOF,!,"Most Popular Insurance Company Calculation",!
"RTN","IBJPI2",21,0)
MP1 W !,"Please enter a date range for the calculation of the most popular"
"RTN","IBJPI2",22,0)
 W !,"insurance companies."
"RTN","IBJPI2",23,0)
 S DIR(0)="D^::EX",DIR("A")="Start DATE"
"RTN","IBJPI2",24,0)
 S DIR("B")=$$FMTE^XLFDT($$FMADD^XLFDT(DT,-365),"5Z")
"RTN","IBJPI2",25,0)
 S DIR("?",1)="  Please enter a valid start date used to calculate the most"
"RTN","IBJPI2",26,0)
 S DIR("?")="  popular insurance companies based on submitted bills."
"RTN","IBJPI2",27,0)
 D ^DIR K DIR I $D(DIRUT) G MPX
"RTN","IBJPI2",28,0)
 S STRTDT=Y
"RTN","IBJPI2",29,0)
 ; End date
"RTN","IBJPI2",30,0)
MP2 S DIR(0)="D^"_STRTDT_":"_DT_":EX",DIR("A")="  End DATE"
"RTN","IBJPI2",31,0)
 S DIR("B")=$$FMTE^XLFDT(DT,"5Z")
"RTN","IBJPI2",32,0)
 S DIR("?",1)="  Please enter a valid end date used to calculate the most"
"RTN","IBJPI2",33,0)
 S DIR("?")="  popular insurance companies based on submitted bills."
"RTN","IBJPI2",34,0)
 D ^DIR K DIR I $D(DIRUT) G MP1
"RTN","IBJPI2",35,0)
 S ENDDT=Y
"RTN","IBJPI2",36,0)
 ;
"RTN","IBJPI2",37,0)
 ; Does user want to update the IIV Site Params based on these dates
"RTN","IBJPI2",38,0)
 W !!,"The date range selected is "_$$FMTE^XLFDT(STRTDT,"5Z")_" - "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBJPI2",39,0)
 W !,"The list must be compiled and saved in the background.",!
"RTN","IBJPI2",40,0)
 S DIR(0)="Y"
"RTN","IBJPI2",41,0)
 S DIR("A")="Update the Most Popular Insurance Companies based on this date range"
"RTN","IBJPI2",42,0)
 S DIR("?",1)="  YES - The list will be compiled and saved in the background."
"RTN","IBJPI2",43,0)
 S DIR("?")=" NO - The list will not be updated."
"RTN","IBJPI2",44,0)
 S DIR("B")="NO"
"RTN","IBJPI2",45,0)
 D ^DIR K DIR I $D(DIRUT) G MPX
"RTN","IBJPI2",46,0)
 ;
"RTN","IBJPI2",47,0)
 ; If the user answers NO - do NOT queue the process
"RTN","IBJPI2",48,0)
 I 'Y W !,"The Most Popular Insurance Companies will NOT be updated!" S DIR(0)="E" D ^DIR K DIR G MP1
"RTN","IBJPI2",49,0)
 ;
"RTN","IBJPI2",50,0)
 ; Queue the process
"RTN","IBJPI2",51,0)
 S ZTDESC="Most Popular Insurance Companies Background Compile"
"RTN","IBJPI2",52,0)
 S ZTRTN="TOP10^IBJPI2("_STRTDT_","_ENDDT_")"
"RTN","IBJPI2",53,0)
 S ZTIO=""
"RTN","IBJPI2",54,0)
 ; Set start time = NOW
"RTN","IBJPI2",55,0)
 S ZTDTH=$H
"RTN","IBJPI2",56,0)
 D ^%ZTLOAD
"RTN","IBJPI2",57,0)
 I '$G(ZTSK) W !!,"Scheduling the background process has FAILED!"
"RTN","IBJPI2",58,0)
 E  H 15 W !!,"The background process was successfully scheduled as Task # "_$G(ZTSK)_"!" H 5 L -^IBCNE("MP")
"RTN","IBJPI2",59,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBJPI2",60,0)
 ;
"RTN","IBJPI2",61,0)
MPX ; MP exit pt
"RTN","IBJPI2",62,0)
 L -^IBCNE("MP")
"RTN","IBJPI2",63,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",64,0)
 Q
"RTN","IBJPI2",65,0)
 ;
"RTN","IBJPI2",66,0)
TOP10(STDT,ENDT) ; Top 10 Ins Co List - to be queued
"RTN","IBJPI2",67,0)
 ; Init vars
"RTN","IBJPI2",68,0)
 N INSLIST,DIK,DA,IBCT,FDA,MSG
"RTN","IBJPI2",69,0)
 ; Lock to prevent simultaneous update
"RTN","IBJPI2",70,0)
 L +^IBCNE("MP"):60 I '$T D  G TOP10X
"RTN","IBJPI2",71,0)
 . S MSG(1)="The Most Popular Insurance Company List, (MCCR Site Parameter"
"RTN","IBJPI2",72,0)
 . S MSG(2)="Display/Edit option, action IV, sub-action MP), could not be updated"
"RTN","IBJPI2",73,0)
 . S MSG(3)="because the process is currently running.  Please retry at a later time."
"RTN","IBJPI2",74,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5,"Most Popular Insurance Company List was not updated","MSG(")
"RTN","IBJPI2",75,0)
 ;
"RTN","IBJPI2",76,0)
 ; Calculate Top 10 ins cos
"RTN","IBJPI2",77,0)
 D TOP10^IBCNEUT4(STDT,ENDT,.INSLIST)
"RTN","IBJPI2",78,0)
 ;
"RTN","IBJPI2",79,0)
 I $G(ZTSTOP) G TOP10X
"RTN","IBJPI2",80,0)
 ;
"RTN","IBJPI2",81,0)
 ; If new list is empty, send mail message only
"RTN","IBJPI2",82,0)
 I $O(INSLIST(0))="" D  G TOP10X
"RTN","IBJPI2",83,0)
 . S MSG(1)="The Most Popular Insurance Company List, (MCCR Site Parameter"
"RTN","IBJPI2",84,0)
 . S MSG(2)="Display/Edit option, action IV, sub-action MP), could not be updated"
"RTN","IBJPI2",85,0)
 . S MSG(3)="because the "_$$FMTE^XLFDT(STDT,"5Z")_" - "_$$FMTE^XLFDT(ENDT,"5Z")
"RTN","IBJPI2",86,0)
 . S MSG(4)="range produced an empty list.  Please regenerate the list based on"
"RTN","IBJPI2",87,0)
 . S MSG(5)="other dates."
"RTN","IBJPI2",88,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5,"Most Popular Insurance Company List was not updated","MSG(")
"RTN","IBJPI2",89,0)
 ;
"RTN","IBJPI2",90,0)
 ; Kill existing list entries
"RTN","IBJPI2",91,0)
 S DIK="^IBE(350.9,1,51.18,",DA(1)=1
"RTN","IBJPI2",92,0)
 F DA=1:1:10 I $D(^IBE(350.9,1,51.18,DA)) D ^DIK
"RTN","IBJPI2",93,0)
 ;
"RTN","IBJPI2",94,0)
 ; Update 350.9 multiple field for most popular
"RTN","IBJPI2",95,0)
 F IBCT=1:1:10 I $D(INSLIST(IBCT)) S FDA(350.9003,"+1,1,",.01)=$P($G(INSLIST(IBCT)),U,1) D UPDATE^DIE("","FDA")
"RTN","IBJPI2",96,0)
 ;
"RTN","IBJPI2",97,0)
 ; Init FDA array
"RTN","IBJPI2",98,0)
 K FDA
"RTN","IBJPI2",99,0)
 ; Update List start and end dates and compile date
"RTN","IBJPI2",100,0)
 S FDA(350.9,"1,",51.11)=STDT
"RTN","IBJPI2",101,0)
 S FDA(350.9,"1,",51.12)=ENDT
"RTN","IBJPI2",102,0)
 S FDA(350.9,"1,",51.21)=DT
"RTN","IBJPI2",103,0)
 ; Save data to File (350.9)
"RTN","IBJPI2",104,0)
 D FILE^DIE("","FDA")
"RTN","IBJPI2",105,0)
 ;
"RTN","IBJPI2",106,0)
TOP10X ; Clean up after task completes
"RTN","IBJPI2",107,0)
 S ZTREQ="@"
"RTN","IBJPI2",108,0)
 L -^IBCNE("MP")
"RTN","IBJPI2",109,0)
 ;
"RTN","IBJPI2",110,0)
 Q
"RTN","IBJPI2",111,0)
 ;
"RTN","IBJPI2",112,0)
BE ; Batch Extract processing
"RTN","IBJPI2",113,0)
 ; Init vars
"RTN","IBJPI2",114,0)
 N DIR,X,Y,DIRUT,TYPE,IEN,DR,DA,DIE,DIC
"RTN","IBJPI2",115,0)
 ;
"RTN","IBJPI2",116,0)
 D FULL^VALM1
"RTN","IBJPI2",117,0)
 W @IOF,!,"Batch Extract Parameters",!
"RTN","IBJPI2",118,0)
BE1 S DIR(0)="SO^1:Buffer;2:Appt;3:Nonverified;4:No insurance"
"RTN","IBJPI2",119,0)
 S DIR("A")="Batch extract parameters to edit"
"RTN","IBJPI2",120,0)
 S DIR("?")="^D BEHLP^IBJPI2"
"RTN","IBJPI2",121,0)
 D ^DIR K DIR I $D(DIRUT) G BEX
"RTN","IBJPI2",122,0)
 S TYPE=Y
"RTN","IBJPI2",123,0)
 ;
"RTN","IBJPI2",124,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  I $P($G(^IBE(350.9,1,51.17,IEN,0)),U,1)=TYPE Q
"RTN","IBJPI2",125,0)
 ;
"RTN","IBJPI2",126,0)
 I IEN=""!(IEN=0) W !,"Extract Not Defined - ERROR!" G BEX
"RTN","IBJPI2",127,0)
 ;
"RTN","IBJPI2",128,0)
 ; Display only Active and Max Ct for Buffer Extract
"RTN","IBJPI2",129,0)
 I TYPE=1 S DR=".02;.05"
"RTN","IBJPI2",130,0)
 ; Display only Active, Sel Criteria #1, Max Ct and Suppress for Appt
"RTN","IBJPI2",131,0)
 I TYPE=2 S DR=".02;.03;.05;.06"
"RTN","IBJPI2",132,0)
 ; Display Active, Sel Crit #1, Sel Crit #2, Max Ct and Suppress for
"RTN","IBJPI2",133,0)
 ;  Non-verified
"RTN","IBJPI2",134,0)
 I TYPE=3 S DR=".02;.03;.04;.05;.06"
"RTN","IBJPI2",135,0)
 ; Display Active, Sel Crit #1, Sel Crit #2 and Max Ct for No active
"RTN","IBJPI2",136,0)
 I TYPE=4 S DR=".02;.03;.04;.05"
"RTN","IBJPI2",137,0)
 S DIE="^IBE(350.9,1,51.17,",DA=IEN,DA(1)=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",138,0)
 G BE1
"RTN","IBJPI2",139,0)
 ;
"RTN","IBJPI2",140,0)
BEX D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",141,0)
 Q
"RTN","IBJPI2",142,0)
 ;
"RTN","IBJPI2",143,0)
BEHLP ; Help text display for Batch Extract selection prompt
"RTN","IBJPI2",144,0)
 N DIR
"RTN","IBJPI2",145,0)
 W @IOF
"RTN","IBJPI2",146,0)
 W !,"  Please select an extract to view/modify settings:"
"RTN","IBJPI2",147,0)
 W !!,"   1 - INS. BUFFER:  Examines entries in the Insurance Buffer to find"
"RTN","IBJPI2",148,0)
 W !,"                     patient/insurance combinations that qualify for an"
"RTN","IBJPI2",149,0)
 W !,"                     electronic insurance eligibility inquiry"
"RTN","IBJPI2",150,0)
 W !!,"   2 - APPOINTMENT:  Reviews upcoming appointments to identify patients that"
"RTN","IBJPI2",151,0)
 W !,"                     have active insurance that has not been recently verified,"
"RTN","IBJPI2",152,0)
 W !,"                     or patients that have no active insurance for which an"
"RTN","IBJPI2",153,0)
 W !,"                     ""identification"" inquiry should be made to search the"
"RTN","IBJPI2",154,0)
 W !,"                     National Healthcare Cache for previously unknown policies"
"RTN","IBJPI2",155,0)
 W !!,"   3 - NON-VERIFIED: Uses past visits to identify patients that have"
"RTN","IBJPI2",156,0)
 W !,"                     been seen recently and have active insurance coverage, but"
"RTN","IBJPI2",157,0)
 W !,"                     have not had the insurance information verified recently."
"RTN","IBJPI2",158,0)
 W !!,"   4 - NO INSURANCE: Also uses past visits, but identifies patients with no"
"RTN","IBJPI2",159,0)
 W !,"                     active insurance on file and attempts to search for"
"RTN","IBJPI2",160,0)
 W !,"                     previously unknown policies by sending an ""identification"""
"RTN","IBJPI2",161,0)
 W !,"                     inquiry to the National Healthcare Cache database and/or"
"RTN","IBJPI2",162,0)
 W !,"                     queries the most popular insurance companies"
"RTN","IBJPI2",163,0)
 D PAUSE^VALM1
"RTN","IBJPI2",164,0)
BEHLPEX Q
"RTN","IBJPI2",165,0)
 ;
"RTN","IBJPI2",166,0)
IIVEDIT(IBJDR) ; -- IBJP IIV EDIT ACTIONS (GP,PW):  Edit IIV Site Parameters
"RTN","IBJPI2",167,0)
 ; IBJDR - 0 (General Parameters section)
"RTN","IBJPI2",168,0)
 ;         1 (Patients Without Insurance section)
"RTN","IBJPI2",169,0)
 N DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",170,0)
 ;
"RTN","IBJPI2",171,0)
 D FULL^VALM1
"RTN","IBJPI2",172,0)
 W @IOF,!,$S(IBJDR=0:"General",IBJDR=1:"Patients Without Insurance",1:"Unknown")_" Parameters",!
"RTN","IBJPI2",173,0)
 ; Build string of fields to edit or input template based on IBJDR
"RTN","IBJPI2",174,0)
 I IBJDR'="" S DR=$P($T(@IBJDR),";;",2,999)
"RTN","IBJPI2",175,0)
 I DR'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",176,0)
 ;
"RTN","IBJPI2",177,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",178,0)
 Q
"RTN","IBJPI2",179,0)
 ;
"RTN","IBJPI2",180,0)
0 ;;[IBCNE GENERAL PARAMETER EDIT]
"RTN","IBJPI2",181,0)
1 ;;51.08;51.09;51.1
"RTN","IBJPI2",182,0)
 ;
"RTN","IBJPI2",183,0)
 ;
"RTN","IBJPI2",184,0)
TASK(IBDESC) ; Determine if Task is already running
"RTN","IBJPI2",185,0)
 ; Input:
"RTN","IBJPI2",186,0)
 ;  IBDESC - ZTDESC task description
"RTN","IBJPI2",187,0)
 ; Output:
"RTN","IBJPI2",188,0)
 ;  Piece 1 - ZTSK task #
"RTN","IBJPI2",189,0)
 ;  Piece 2 - status of ZTSK
"RTN","IBJPI2",190,0)
 N ZTSK,IBTASKS,STATUS,Y,ZT,ZTKEY,ZTUCI
"RTN","IBJPI2",191,0)
 ;
"RTN","IBJPI2",192,0)
 S STATUS="",ZTSK=""
"RTN","IBJPI2",193,0)
 I $G(IBDESC)="" G TASKX
"RTN","IBJPI2",194,0)
 ; Determine list of tasks based on IBDESC
"RTN","IBJPI2",195,0)
 D DESC^%ZTLOAD(IBDESC,"IBTASKS")
"RTN","IBJPI2",196,0)
 ; Get status for last task # ZTSK
"RTN","IBJPI2",197,0)
 S ZTSK=$O(IBTASKS(""),-1)
"RTN","IBJPI2",198,0)
 I ZTSK="" G TASKX
"RTN","IBJPI2",199,0)
 D STAT^%ZTLOAD
"RTN","IBJPI2",200,0)
 S STATUS=$G(ZTSK(2))
"RTN","IBJPI2",201,0)
 ;
"RTN","IBJPI2",202,0)
TASKX Q ZTSK_U_STATUS
"RTN","IBJPI2",203,0)
 ;
"RTN","IBJPM")
0^23^B11460746
"RTN","IBJPM",1,0)
IBJPM ;ALB/MAF,ARH - IBSP MCCR PARAMETERS SCREEN ;14-DEC-1995
"RTN","IBJPM",2,0)
 ;;2.0;INTEGRATED BILLING;**39,137,184**;21-MAR-94
"RTN","IBJPM",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBJPM",4,0)
 ;
"RTN","IBJPM",5,0)
EN ; -- main entry point for JOINT INQUIRY PARAMETERS option
"RTN","IBJPM",6,0)
 D EN^VALM("IBJP MCCR PARAMETERS")
"RTN","IBJPM",7,0)
 Q
"RTN","IBJPM",8,0)
 ;
"RTN","IBJPM",9,0)
HDR ; -- header code
"RTN","IBJPM",10,0)
 S VALMHDR(1)="Display/Edit MCCR Site Parameters."
"RTN","IBJPM",11,0)
 S VALMHDR(2)="Only authorized persons may edit this data."
"RTN","IBJPM",12,0)
 Q
"RTN","IBJPM",13,0)
 ;
"RTN","IBJPM",14,0)
INIT ; -- init variables and list array
"RTN","IBJPM",15,0)
 K ^TMP("IBJPM",$J)
"RTN","IBJPM",16,0)
 D BLD
"RTN","IBJPM",17,0)
 Q
"RTN","IBJPM",18,0)
 ;
"RTN","IBJPM",19,0)
HELP ; -- help code
"RTN","IBJPM",20,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPM",21,0)
 Q
"RTN","IBJPM",22,0)
 ;
"RTN","IBJPM",23,0)
EXIT ; -- exit code
"RTN","IBJPM",24,0)
 K ^TMP("IBJPM",$J),IBFASTXT,VALMBCK
"RTN","IBJPM",25,0)
 D CLEAR^VALM1
"RTN","IBJPM",26,0)
 Q
"RTN","IBJPM",27,0)
 ;
"RTN","IBJPM",28,0)
BLD ; -- build screen array, no variables required for input
"RTN","IBJPM",29,0)
 N IBNC,IBTC,IBTW,IBSW,IBLN,IBGRPB,IBGRPE,IBLR
"RTN","IBJPM",30,0)
 S IBNC(1)=1,IBTW(1)=0,IBTC(1)=5,IBSW(1)=30,IBNC(2)=43,IBTW(2)=0,IBTC(2)=47,IBSW(2)=30
"RTN","IBJPM",31,0)
 ;
"RTN","IBJPM",32,0)
 S (VALMCNT,IBLN)=1,IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",33,0)
 ;
"RTN","IBJPM",34,0)
 ; - IB Site Parameters
"RTN","IBJPM",35,0)
 S IBLN=$$SETN("IB Site Parameters",IBLN,IBLR,1)
"RTN","IBJPM",36,0)
 S IBLN=$$SET("","Facility Definition",IBLN,IBLR)
"RTN","IBJPM",37,0)
 S IBLN=$$SET("","Mail Groups",IBLN,IBLR)
"RTN","IBJPM",38,0)
 S IBLN=$$SET("","Patient Billing",IBLN,IBLR)
"RTN","IBJPM",39,0)
 S IBLN=$$SET("","Third Party Billing",IBLN,IBLR)
"RTN","IBJPM",40,0)
 S IBLN=$$SET("","Provider Id",IBLN,IBLR)
"RTN","IBJPM",41,0)
 S IBLN=$$SET("","EDI Transmission",IBLN,IBLR)
"RTN","IBJPM",42,0)
 ;
"RTN","IBJPM",43,0)
 S IBLR=2,IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPM",44,0)
 ;
"RTN","IBJPM",45,0)
 ; - Claim Tracking Parameters
"RTN","IBJPM",46,0)
 S IBLN=$$SETN("Claims Tracking Parameters",IBLN,IBLR,1)
"RTN","IBJPM",47,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",48,0)
 S IBLN=$$SET("","Tracking Parameters",IBLN,IBLR)
"RTN","IBJPM",49,0)
 S IBLN=$$SET("","Random Sampling",IBLN,IBLR)
"RTN","IBJPM",50,0)
 ;
"RTN","IBJPM",51,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE),IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",52,0)
 ;
"RTN","IBJPM",53,0)
 ; - Automated Billing Parameters
"RTN","IBJPM",54,0)
 S IBLN=$$SETN("Third Party Auto Billing Parameters",IBLN,IBLR,1)
"RTN","IBJPM",55,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",56,0)
 S IBLN=$$SET("","Inpatient Admission",IBLN,IBLR)
"RTN","IBJPM",57,0)
 S IBLN=$$SET("","Outpatient Visit",IBLN,IBLR)
"RTN","IBJPM",58,0)
 S IBLN=$$SET("","Prescription Refill",IBLN,IBLR)
"RTN","IBJPM",59,0)
 ;
"RTN","IBJPM",60,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",61,0)
 S IBLR=2,IBLN=IBGRPB
"RTN","IBJPM",62,0)
 ;
"RTN","IBJPM",63,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",64,0)
 ; - IIV Parameters
"RTN","IBJPM",65,0)
 S IBLN=$$SETN("Insurance Id and Verification",IBLN,IBLR,1)
"RTN","IBJPM",66,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",67,0)
 S IBLN=$$SET("","Batch Extracts Parameters",IBLN,IBLR)
"RTN","IBJPM",68,0)
 S IBLN=$$SET("","Patients Without Insurance",IBLN,IBLR)
"RTN","IBJPM",69,0)
 S IBLN=$$SET("","Most Popular Insurance",IBLN,IBLR)
"RTN","IBJPM",70,0)
 ;
"RTN","IBJPM",71,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)-1
"RTN","IBJPM",72,0)
 Q
"RTN","IBJPM",73,0)
 ;
"RTN","IBJPM",74,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJPM",75,0)
 N IBY
"RTN","IBJPM",76,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPM",77,0)
 S LN=LN+1
"RTN","IBJPM",78,0)
 Q LN
"RTN","IBJPM",79,0)
 ;
"RTN","IBJPM",80,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJPM",81,0)
 N IBY
"RTN","IBJPM",82,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJPM",83,0)
 S LN=LN+1
"RTN","IBJPM",84,0)
 Q LN
"RTN","IBJPM",85,0)
 ;
"RTN","IBJPM",86,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJPM",87,0)
 N IBX S IBX=$G(^TMP("IBJPM",$J,LN,0))
"RTN","IBJPM",88,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJPM",89,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IOINHI,IOINORM)
"RTN","IBJPM",90,0)
 Q
"SEC","^DIC",365,365,0,"DD")
@
"SEC","^DIC",365.011,365.011,0,"AUDIT")

"SEC","^DIC",365.011,365.011,0,"DD")
@
"SEC","^DIC",365.011,365.011,0,"DEL")
@
"SEC","^DIC",365.011,365.011,0,"LAYGO")
@
"SEC","^DIC",365.011,365.011,0,"RD")

"SEC","^DIC",365.011,365.011,0,"WR")

"SEC","^DIC",365.012,365.012,0,"AUDIT")

"SEC","^DIC",365.012,365.012,0,"DD")
@
"SEC","^DIC",365.012,365.012,0,"DEL")
@
"SEC","^DIC",365.012,365.012,0,"LAYGO")
@
"SEC","^DIC",365.012,365.012,0,"RD")

"SEC","^DIC",365.012,365.012,0,"WR")

"SEC","^DIC",365.013,365.013,0,"AUDIT")

"SEC","^DIC",365.013,365.013,0,"DD")
@
"SEC","^DIC",365.013,365.013,0,"DEL")
@
"SEC","^DIC",365.013,365.013,0,"LAYGO")
@
"SEC","^DIC",365.013,365.013,0,"RD")

"SEC","^DIC",365.013,365.013,0,"WR")

"SEC","^DIC",365.014,365.014,0,"AUDIT")

"SEC","^DIC",365.014,365.014,0,"DD")
@
"SEC","^DIC",365.014,365.014,0,"DEL")
@
"SEC","^DIC",365.014,365.014,0,"LAYGO")
@
"SEC","^DIC",365.014,365.014,0,"RD")

"SEC","^DIC",365.014,365.014,0,"WR")

"SEC","^DIC",365.015,365.015,0,"AUDIT")

"SEC","^DIC",365.015,365.015,0,"DD")
@
"SEC","^DIC",365.015,365.015,0,"DEL")
@
"SEC","^DIC",365.015,365.015,0,"LAYGO")
@
"SEC","^DIC",365.015,365.015,0,"RD")

"SEC","^DIC",365.015,365.015,0,"WR")

"SEC","^DIC",365.016,365.016,0,"AUDIT")

"SEC","^DIC",365.016,365.016,0,"DD")
@
"SEC","^DIC",365.016,365.016,0,"DEL")
@
"SEC","^DIC",365.016,365.016,0,"LAYGO")
@
"SEC","^DIC",365.016,365.016,0,"RD")

"SEC","^DIC",365.016,365.016,0,"WR")

"SEC","^DIC",365.017,365.017,0,"AUDIT")

"SEC","^DIC",365.017,365.017,0,"DD")
@
"SEC","^DIC",365.017,365.017,0,"DEL")
@
"SEC","^DIC",365.017,365.017,0,"LAYGO")
@
"SEC","^DIC",365.017,365.017,0,"RD")

"SEC","^DIC",365.017,365.017,0,"WR")

"SEC","^DIC",365.018,365.018,0,"AUDIT")

"SEC","^DIC",365.018,365.018,0,"DD")
@
"SEC","^DIC",365.018,365.018,0,"DEL")
@
"SEC","^DIC",365.018,365.018,0,"LAYGO")
@
"SEC","^DIC",365.018,365.018,0,"RD")

"SEC","^DIC",365.018,365.018,0,"WR")

"SEC","^DIC",365.021,365.021,0,"AUDIT")

"SEC","^DIC",365.021,365.021,0,"DD")
@
"SEC","^DIC",365.021,365.021,0,"DEL")
@
"SEC","^DIC",365.021,365.021,0,"LAYGO")
@
"SEC","^DIC",365.021,365.021,0,"RD")

"SEC","^DIC",365.021,365.021,0,"WR")

"SEC","^DIC",365.1,365.1,0,"DD")
@
"SEC","^DIC",365.11,365.11,0,"AUDIT")

"SEC","^DIC",365.11,365.11,0,"DD")
@
"SEC","^DIC",365.11,365.11,0,"LAYGO")

"SEC","^DIC",365.11,365.11,0,"RD")

"SEC","^DIC",365.12,365.12,0,"AUDIT")

"SEC","^DIC",365.12,365.12,0,"DD")
@
"SEC","^DIC",365.12,365.12,0,"DEL")

"SEC","^DIC",365.12,365.12,0,"LAYGO")

"SEC","^DIC",365.12,365.12,0,"RD")

"SEC","^DIC",365.12,365.12,0,"WR")

"SEC","^DIC",365.13,365.13,0,"DD")
@
"SEC","^DIC",365.14,365.14,0,"AUDIT")

"SEC","^DIC",365.14,365.14,0,"DD")
@
"SEC","^DIC",365.14,365.14,0,"DEL")
@
"SEC","^DIC",365.14,365.14,0,"LAYGO")
@
"SEC","^DIC",365.14,365.14,0,"RD")

"SEC","^DIC",365.14,365.14,0,"WR")

"SEC","^DIC",365.15,365.15,0,"AUDIT")

"SEC","^DIC",365.15,365.15,0,"DD")
@
"SEC","^DIC",365.15,365.15,0,"DEL")
@
"SEC","^DIC",365.15,365.15,0,"LAYGO")
@
"SEC","^DIC",365.15,365.15,0,"RD")

"SEC","^DIC",365.15,365.15,0,"WR")

"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",350.9,350.9002,-1)
350.9^51.17
"UP",350.9,350.9002,0)
350.9002
"UP",350.9,350.9003,-1)
350.9^51.18
"UP",350.9,350.9003,0)
350.9003
"VER")
8.0^22.0
"^DD",2,2.312,1.09,0)
SOURCE OF INFORMATION^S^1:INTERVIEW;2:DATA MATCH;3:IVM;4:PRE-REGISTRATION;5:eIIV;^1;9^Q
"^DD",2,2.312,1.09,1,0)
^.1
"^DD",2,2.312,1.09,1,1,0)
^^TRIGGER^2.312^1.1
"^DD",2,2.312,1.09,1,1,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,1)):^(1),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S %=$P($H,",",2),X=DT_(%\60#60/100+(%\3600)+(%#60/10000)/100) X ^DD(2.312,1.09,1,1,1.4)
"^DD",2,2.312,1.09,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),1)),DIV=X S $P(^(1),U,10)=DIV,DIH=2.312,DIG=1.1 D ^DICR
"^DD",2,2.312,1.09,1,1,2)
Q
"^DD",2,2.312,1.09,1,1,"CREATE VALUE")
NOW
"^DD",2,2.312,1.09,1,1,"DELETE VALUE")
NO EFFECT
"^DD",2,2.312,1.09,1,1,"DT")
3030131
"^DD",2,2.312,1.09,1,1,"FIELD")
#1.1
"^DD",2,2.312,1.09,21,0)
^^11^11^3020708^
"^DD",2,2.312,1.09,21,1,0)
Enter the last source of this information.
"^DD",2,2.312,1.09,21,2,0)
If the insurance information was obtained by patient interview then
"^DD",2,2.312,1.09,21,3,0)
enter interview, etc.  If the information was initially or previously
"^DD",2,2.312,1.09,21,4,0)
obtained by one source but updated by another source then enter the
"^DD",2,2.312,1.09,21,5,0)
most recent source of the information.
"^DD",2,2.312,1.09,21,6,0)
 
"^DD",2,2.312,1.09,21,7,0)
The data in this field will be initially set to INTERVIEW with IB v2.
"^DD",2,2.312,1.09,21,8,0)
The data may be passed to Accounts Receivable and/or the MCCR NDB.
"^DD",2,2.312,1.09,21,9,0)
 
"^DD",2,2.312,1.09,21,10,0)
If this field is being edited through the use of the pre-registration
"^DD",2,2.312,1.09,21,11,0)
software, the default for this field will be set to PRE-REGISTRATION.
"^DD",2,2.312,1.09,"DT")
3030131
"^DD",36,36,.128,0)
ANOTHER CO. PROCESS IP CLAIMS?^S^0:NO;1:YES;^.12;8^Q
"^DD",36,36,.128,.1)
Are Inpatient Claims Processed by Another Insurance Co.?
"^DD",36,36,.128,1,0)
^.1
"^DD",36,36,.128,1,1,0)
^^TRIGGER^36^.127
"^DD",36,36,.128,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X='$P($G(^DIC(36,DA,.12)),"^",8) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(36,.128,1,1,1.4)
"^DD",36,36,.128,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,7)=DIV,DIH=36,DIG=.127 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.128,1,1,2)
Q
"^DD",36,36,.128,1,1,"%D",0)
^^1^1^2931005^^
"^DD",36,36,.128,1,1,"%D",1,0)
Enter "Yes" if another insurance company processes Inpatient Claims.
"^DD",36,36,.128,1,1,"CREATE CONDITION")
S X='$P($G(^DIC(36,DA,.12)),"^",8)
"^DD",36,36,.128,1,1,"CREATE VALUE")
@
"^DD",36,36,.128,1,1,"DELETE VALUE")
NO EFFECT
"^DD",36,36,.128,1,1,"DT")
2931005
"^DD",36,36,.128,1,1,"FIELD")
#.127
"^DD",36,36,.128,21,0)
^.001^1^1^3030410^^^^
"^DD",36,36,.128,21,1,0)
Enter "Yes" if another insurance company processes Inpatient Claims.
"^DD",36,36,.128,"DT")
3030410
"^DD",36,36,.168,0)
ANOTHER CO. PROCESS OP CLAIMS?^S^0:NO;1:YES;^.16;8^Q
"^DD",36,36,.168,.1)
Are Outpatient Claims Processed by Another Insurance Co.?
"^DD",36,36,.168,1,0)
^.1
"^DD",36,36,.168,1,1,0)
^^TRIGGER^36^.167
"^DD",36,36,.168,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X='$P($G(^DIC(36,DA,.16)),"^",8) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(36,.168,1,1,1.4)
"^DD",36,36,.168,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,7)=DIV,DIH=36,DIG=.167 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.168,1,1,2)
Q
"^DD",36,36,.168,1,1,"CREATE CONDITION")
S X='$P($G(^DIC(36,DA,.16)),"^",8)
"^DD",36,36,.168,1,1,"CREATE VALUE")
@
"^DD",36,36,.168,1,1,"DELETE VALUE")
NO EFFECT
"^DD",36,36,.168,1,1,"DT")
2931006
"^DD",36,36,.168,1,1,"FIELD")
#.167
"^DD",36,36,.168,21,0)
^.001^1^1^3030410^^^^
"^DD",36,36,.168,21,1,0)
Enter "Yes" if another insurance company processes Outpatient Claims.
"^DD",36,36,.168,"DT")
3030410
"^DD",36,36,3.1,0)
PAYER^*P365.12'^IBE(365.12,^3;10^S DIC("S")="I $P($G(^(0)),U,1)'=""~NO PAYER"",$$ACTAPP^IBCNEUT5(Y)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",36,36,3.1,1,0)
^.1
"^DD",36,36,3.1,1,1,0)
36^AC
"^DD",36,36,3.1,1,1,1)
S ^DIC(36,"AC",$E(X,1,30),DA)=""
"^DD",36,36,3.1,1,1,2)
K ^DIC(36,"AC",$E(X,1,30),DA)
"^DD",36,36,3.1,1,1,"%D",0)
^^2^2^3020605^
"^DD",36,36,3.1,1,1,"%D",1,0)
This cross-reference is used to find insurance companies pointing
"^DD",36,36,3.1,1,1,"%D",2,0)
to a specific payer.
"^DD",36,36,3.1,1,1,"DT")
3020605
"^DD",36,36,3.1,3)
Please choose an entry in the Payer File.
"^DD",36,36,3.1,12)
Only valid payers may be selected.
"^DD",36,36,3.1,12.1)
S DIC("S")="I $P($G(^(0)),U,1)'=""~NO PAYER"",$$ACTAPP^IBCNEUT5(Y)"
"^DD",36,36,3.1,21,0)
^.001^4^4^3020924^^
"^DD",36,36,3.1,21,1,0)
This field points to an entry in the Payer File (#365.12).  This
"^DD",36,36,3.1,21,2,0)
field is not required, but it allows the insurance company entry
"^DD",36,36,3.1,21,3,0)
to be able to conduct business electronically by linking the
"^DD",36,36,3.1,21,4,0)
insurance company with a payer for various electronic applications.
"^DD",36,36,3.1,"DT")
3020924
"^DD",350.9,350.9,51.01,0)
FRESHNESS DAYS^RNJ3,0^^51;1^K:+X'=X!(X>180)!(X<7)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.01,3)
Enter the number of days data remains "fresh". Type a Number between 7 and 180.
"^DD",350.9,350.9,51.01,21,0)
^.001^12^12^3020911^^
"^DD",350.9,350.9,51.01,21,1,0)
This parameter determines how "fresh" the insurance verification
"^DD",350.9,350.9,51.01,21,2,0)
This field is a parameter that is used by two of the data extracts
"^DD",350.9,350.9,51.01,21,3,0)
to determine whether a record should be extracted or not.
"^DD",350.9,350.9,51.01,21,4,0)
 
"^DD",350.9,350.9,51.01,21,5,0)
For both the Insurance Buffer extract and the Appointment extract,
"^DD",350.9,350.9,51.01,21,6,0)
this represents how long to wait before IIV can attempt to reverify
"^DD",350.9,350.9,51.01,21,7,0)
the same insurance for that patient.
"^DD",350.9,350.9,51.01,21,8,0)
 
"^DD",350.9,350.9,51.01,21,9,0)
If the value is 10, this means that IIV can attempt to reverify 
"^DD",350.9,350.9,51.01,21,10,0)
insurance for a patient 11 days after the most recently inquired
"^DD",350.9,350.9,51.01,21,11,0)
date.  A specific date is always asked of the payer when trying to
"^DD",350.9,350.9,51.01,21,12,0)
identify patients eligibility.
"^DD",350.9,350.9,51.01,"DT")
3020605
"^DD",350.9,350.9,51.02,0)
DAILY MAILMAN MSG^S^1:YES;0:NO;^51;2^Q
"^DD",350.9,350.9,51.02,3)
Answer 'Yes' if the daily IIV Statistical Report should be sent via MailMan.
"^DD",350.9,350.9,51.02,21,0)
^.001^4^4^3030408^^^
"^DD",350.9,350.9,51.02,21,1,0)
This field determines whether the daily IIV Statistical Report 
"^DD",350.9,350.9,51.02,21,2,0)
should be sent via MailMan.  This report contains information 
"^DD",350.9,350.9,51.02,21,3,0)
about the electronic insurance verification process - both
"^DD",350.9,350.9,51.02,21,4,0)
inquiries and responses.
"^DD",350.9,350.9,51.02,"DT")
3020605
"^DD",350.9,350.9,51.03,0)
DAILY MSG TIME^FX^^51;3^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.03,3)
This is the time of day to generate the daily IIV Statistical Report sent via MailMan.  The time must be in four digit military format.
"^DD",350.9,350.9,51.03,21,0)
^^3^3^3020819^
"^DD",350.9,350.9,51.03,21,1,0)
Enter the time in four digit military format.
"^DD",350.9,350.9,51.03,21,2,0)
 
"^DD",350.9,350.9,51.03,21,3,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.03,"DT")
3020708
"^DD",350.9,350.9,51.04,0)
MESSAGES MAILGROUP^RP3.8'^XMB(3.8,^51;4^Q
"^DD",350.9,350.9,51.04,3)
Select the mail group to whom eIIV messages are sent.
"^DD",350.9,350.9,51.04,21,0)
^^2^2^3020819^
"^DD",350.9,350.9,51.04,21,1,0)
This field identifies the mail group to whom the daily IIV 
"^DD",350.9,350.9,51.04,21,2,0)
Statistical Report and eIIV error messages will be sent via MailMan.
"^DD",350.9,350.9,51.04,"DT")
3020812
"^DD",350.9,350.9,51.05,0)
TIMEOUT DAYS^NJ1,0^^51;5^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.05,3)
Enter the number of days that will define a communication timeout.  Enter a number between 1 and 7.
"^DD",350.9,350.9,51.05,21,0)
^^2^2^3020819^
"^DD",350.9,350.9,51.05,21,1,0)
This field defines how many days without an insurance response is
"^DD",350.9,350.9,51.05,21,2,0)
considered to be a communication timeout.
"^DD",350.9,350.9,51.05,"DT")
3020819
"^DD",350.9,350.9,51.06,0)
NUMBER RETRIES^NJ1,0^^51;6^K:+X'=X!(X>5)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.06,3)
Enter the number of times to retry an IIV transmission.  Enter a number between 0 and 5.
"^DD",350.9,350.9,51.06,21,0)
^^6^6^3020828^
"^DD",350.9,350.9,51.06,21,1,0)
This field specifies how many retries to attempt when a communication
"^DD",350.9,350.9,51.06,21,2,0)
timeout occurs before it is considered a communication failure.  
"^DD",350.9,350.9,51.06,21,3,0)
 
"^DD",350.9,350.9,51.06,21,4,0)
An entry of zero indicates that when a communication timeout occurs,
"^DD",350.9,350.9,51.06,21,5,0)
no retries shall be attempted and the inquiry will be considered a
"^DD",350.9,350.9,51.06,21,6,0)
communication failure.
"^DD",350.9,350.9,51.06,"DT")
3020605
"^DD",350.9,350.9,51.07,0)
TIMEOUT MAILMAN MSG^S^1:YES;0:NO;^51;7^Q
"^DD",350.9,350.9,51.07,3)
Enter 'Yes' if a MailMan message should be generated for each communication timeout.
"^DD",350.9,350.9,51.07,21,0)
^^2^2^3020819^
"^DD",350.9,350.9,51.07,21,1,0)
This field allows the site to send a MailMan message for each
"^DD",350.9,350.9,51.07,21,2,0)
communication timeout.
"^DD",350.9,350.9,51.07,"DT")
3020819
"^DD",350.9,350.9,51.08,0)
INQUIRE INACTIVE INSURANCE^S^1:YES;0:NO;^51;8^Q
"^DD",350.9,350.9,51.08,3)
Enter 'Yes' if a patient's inactive insurance shall be queried if no active insurance is found.
"^DD",350.9,350.9,51.08,21,0)
^^3^3^3020819^
"^DD",350.9,350.9,51.08,21,1,0)
This field helps guide both the No Insurance data extract and
"^DD",350.9,350.9,51.08,21,2,0)
Appointment data extract to attempt to request information for
"^DD",350.9,350.9,51.08,21,3,0)
a patient's inactive insurance if no active insurance is found.
"^DD",350.9,350.9,51.08,"DT")
3030408
"^DD",350.9,350.9,51.09,0)
INQUIRE POPULAR INSUR CO.^S^1:YES;0:NO;^51;9^Q
"^DD",350.9,350.9,51.09,3)
Enter 'Yes' if the most popular insurance companies are to be queried if no active insurance is found for a patient.
"^DD",350.9,350.9,51.09,21,0)
^^5^5^3020828^
"^DD",350.9,350.9,51.09,21,1,0)
This field guides both the No Insurance data extract and the
"^DD",350.9,350.9,51.09,21,2,0)
Appointment data extract to attempt to request information for
"^DD",350.9,350.9,51.09,21,3,0)
a patient, who has no previous insurance and/or no active
"^DD",350.9,350.9,51.09,21,4,0)
insurance in VISTA, based upon the list of Most Popular 
"^DD",350.9,350.9,51.09,21,5,0)
Insurance Companies.
"^DD",350.9,350.9,51.09,"DT")
3020605
"^DD",350.9,350.9,51.1,0)
NO. POPULAR INSUR CO.^NJ2,0^^51;10^K:+X'=X!(X>10)!(X<1)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.1,3)
Enter the number of popular insurance companies to query. Enter a number between 1 and 10.
"^DD",350.9,350.9,51.1,21,0)
^.001^3^3^3030507^^
"^DD",350.9,350.9,51.1,21,1,0)
This field is the number of the most popular insurance companies
"^DD",350.9,350.9,51.1,21,2,0)
that should be queried if the Inquire Popular Insur Co. parameter
"^DD",350.9,350.9,51.1,21,3,0)
is set to 'Yes'.
"^DD",350.9,350.9,51.1,"DT")
3020708
"^DD",350.9,350.9,51.11,0)
POPULAR INSUR CO. FROM DATE^D^^51;11^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.11,3)
Enter the date from which popular insurance companies will be selected.
"^DD",350.9,350.9,51.11,21,0)
^.001^3^3^3020605^^
"^DD",350.9,350.9,51.11,21,1,0)
This field is the date that the calculation of the Most Popular
"^DD",350.9,350.9,51.11,21,2,0)
Insurance Companies starts with when searching through
"^DD",350.9,350.9,51.11,21,3,0)
the Bill/Claims File (#399).
"^DD",350.9,350.9,51.11,"DT")
3020605
"^DD",350.9,350.9,51.12,0)
POPULAR INSUR CO. THRU DATE^D^^51;12^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.12,3)
Enter the date through which popular insurance companies will be selected
"^DD",350.9,350.9,51.12,21,0)
^^3^3^3020605^
"^DD",350.9,350.9,51.12,21,1,0)
This field is the date that the calculation of the Most Popular
"^DD",350.9,350.9,51.12,21,2,0)
Insurance Companies ends with when searching through
"^DD",350.9,350.9,51.12,21,3,0)
the Bill/Claims File (#399).
"^DD",350.9,350.9,51.12,"DT")
3020605
"^DD",350.9,350.9,51.13,0)
HL7 RESPONSE PROCESSING^RS^B:Batch;I:Immediate;^51;13^Q
"^DD",350.9,350.9,51.13,3)
Enter 'I'mmediate for eIIV responses to be forwarded to VISTA immediately or 'B'atch to hold and batch the responses.
"^DD",350.9,350.9,51.13,21,0)
^.001^5^5^3020820^^^
"^DD",350.9,350.9,51.13,21,1,0)
This field allows the site to tell the Eligibility Communicator how
"^DD",350.9,350.9,51.13,21,2,0)
eIIV responses should be returned to the site.  Batch means
"^DD",350.9,350.9,51.13,21,3,0)
that EC will hold all messages and return them between the HL7 Start
"^DD",350.9,350.9,51.13,21,4,0)
Time and HL7 Stop Time.  Immediate means that EC will return a
"^DD",350.9,350.9,51.13,21,5,0)
response as soon as it is received from the payer.
"^DD",350.9,350.9,51.13,"DT")
3020819
"^DD",350.9,350.9,51.14,0)
HL7 START TIME^RFX^^51;14^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.14,3)
Enter the time when EC will start relaying eIIV responses back to the site.  The time must be in four digit military format.
"^DD",350.9,350.9,51.14,21,0)
^.001^7^7^3020828^^
"^DD",350.9,350.9,51.14,21,1,0)
Enter the time in military format.  This time represents when the
"^DD",350.9,350.9,51.14,21,2,0)
site has told the Eligibility Communicator to begin sending
"^DD",350.9,350.9,51.14,21,3,0)
eIIV responses to the site.  This field only applies when the HL7
"^DD",350.9,350.9,51.14,21,4,0)
Response Processing is set to 'B'atch processing.  It is recommended
"^DD",350.9,350.9,51.14,21,5,0)
that this be a time during low CPU processing.
"^DD",350.9,350.9,51.14,21,6,0)
 
"^DD",350.9,350.9,51.14,21,7,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.14,"DT")
3020819
"^DD",350.9,350.9,51.15,0)
HL7 MAXIMUM NUMBER^NJ4,0^^51;15^K:+X'=X!(X>5000)!(X<1)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,51.15,3)
To limit the number of daily HL7 messages generated, enter a number between 1 and 5000.
"^DD",350.9,350.9,51.15,21,0)
^^7^7^3020819^
"^DD",350.9,350.9,51.15,21,1,0)
This field allows a site to restrict the daily number of HL7
"^DD",350.9,350.9,51.15,21,2,0)
messages to create and sent during the HL7 process for eIIV.
"^DD",350.9,350.9,51.15,21,3,0)
This feature can be used to manage the amount of eIIV HL7
"^DD",350.9,350.9,51.15,21,4,0)
traffic flowing through the HL7 package.
"^DD",350.9,350.9,51.15,21,5,0)
 
"^DD",350.9,350.9,51.15,21,6,0)
If left blank, there is no limit and all possible eIIV HL7
"^DD",350.9,350.9,51.15,21,7,0)
messages shall be created.
"^DD",350.9,350.9,51.15,"DT")
3020723
"^DD",350.9,350.9,51.16,0)
CONTACT PERSON^RP200'^VA(200,^51;16^Q
"^DD",350.9,350.9,51.16,3)
This is the person that the Financial Services Center shall contact if there are communication problems.
"^DD",350.9,350.9,51.16,21,0)
^^5^5^3030529^
"^DD",350.9,350.9,51.16,21,1,0)
This field identifies the person that the Financial Services Center
"^DD",350.9,350.9,51.16,21,2,0)
or the Eligibility Communicator shall contact if there are any
"^DD",350.9,350.9,51.16,21,3,0)
problems that need to be addressed; e.g. communication problems.
"^DD",350.9,350.9,51.16,21,4,0)
  
"^DD",350.9,350.9,51.16,21,5,0)
This information will be sent nightly to FSC/EC to keep it up to date.
"^DD",350.9,350.9,51.16,"DT")
3030529
"^DD",350.9,350.9,51.17,0)
BATCH EXTRACTS^350.9002S^^51.17;0
"^DD",350.9,350.9,51.17,21,0)
^.001^5^5^3030613^^^^
"^DD",350.9,350.9,51.17,21,1,0)
This field identifies each of the four data extracts that eIIV uses
"^DD",350.9,350.9,51.17,21,2,0)
to find insurance data via identification or verification inquiries.
"^DD",350.9,350.9,51.17,21,3,0)
 
"^DD",350.9,350.9,51.17,21,4,0)
Extracts are defined for Insurance Buffer, Appointments, Non-Verified
"^DD",350.9,350.9,51.17,21,5,0)
Insurance and No Insurance information.
"^DD",350.9,350.9,51.18,0)
POPULAR INSUR CO.^350.9003P^^51.18;0
"^DD",350.9,350.9,51.19,0)
HL7 STOP TIME^RFX^^51;19^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.19,3)
Enter the time when EC will stop relaying eIIV responses back to the site.  The time must be in four digit military format.
"^DD",350.9,350.9,51.19,21,0)
^.001^6^6^3020828^^^^
"^DD",350.9,350.9,51.19,21,1,0)
Enter the time in military format.  This time represents when the
"^DD",350.9,350.9,51.19,21,2,0)
site has told the Eligibility Communicator to stop sending
"^DD",350.9,350.9,51.19,21,3,0)
eIIV responses to the site.  This field only applies when the HL7
"^DD",350.9,350.9,51.19,21,4,0)
Response Processing is set to 'Batch' processing.
"^DD",350.9,350.9,51.19,21,5,0)
 
"^DD",350.9,350.9,51.19,21,6,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.19,"DT")
3020819
"^DD",350.9,350.9,51.2,0)
FAILURE MAILMAN MSG^S^1:YES;0:NO;^51;20^Q
"^DD",350.9,350.9,51.2,3)
Enter 'Yes' if a MailMan message should be generated for each communication failure when all retries have been exhausted.
"^DD",350.9,350.9,51.2,21,0)
^^3^3^3020820^
"^DD",350.9,350.9,51.2,21,1,0)
This field allows the site to send a MailMan message for each 
"^DD",350.9,350.9,51.2,21,2,0)
communication failure.  A communication failure is defined as
"^DD",350.9,350.9,51.2,21,3,0)
having exhausted all retries.
"^DD",350.9,350.9,51.2,"DT")
3020820
"^DD",350.9,350.9,51.21,0)
MOST POPULAR COMPILE DATE^D^^51;21^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",350.9,350.9,51.21,3)
The date when the Most Popular Insurance Company list was compiled.
"^DD",350.9,350.9,51.21,21,0)
^^3^3^3020820^
"^DD",350.9,350.9,51.21,21,1,0)
This is the date on which the Most Popular Insurance Company
"^DD",350.9,350.9,51.21,21,2,0)
list was compiled.  This field is not available for edit by
"^DD",350.9,350.9,51.21,21,3,0)
users.
"^DD",350.9,350.9,51.21,"DT")
3020820
"^DD",350.9,350.9,51.22,0)
REGISTRATION COMPLETE^S^1:YES;0:NO;^51;22^Q
"^DD",350.9,350.9,51.22,21,0)
^.001^4^4^3030408^^^^
"^DD",350.9,350.9,51.22,21,1,0)
This field will contain the value if the application acknowledgement
"^DD",350.9,350.9,51.22,21,2,0)
received and processed from the Eligibility Communicator.  If the
"^DD",350.9,350.9,51.22,21,3,0)
registration message failed at the EC, no further processing of
"^DD",350.9,350.9,51.22,21,4,0)
eIIV messages will occur.
"^DD",350.9,350.9,51.22,"DT")
3030408
"^DD",350.9,350.9,51.23,0)
INQUIRE SECONDARY INSURANCES^S^1:YES;0:NO;^51;23^Q
"^DD",350.9,350.9,51.23,3)
Answer 'YES' to indicate that outgoing electronic insurance verification requests should return all additional/secondary insurance information identified for the patient.
"^DD",350.9,350.9,51.23,21,0)
^.001^4^4^3030507^^^^
"^DD",350.9,350.9,51.23,21,1,0)
This field contains an indicator that controls whether outgoing
"^DD",350.9,350.9,51.23,21,2,0)
electronic verification requests should return any additional or secondary
"^DD",350.9,350.9,51.23,21,3,0)
insurance information that is found for a patient when an eligibility
"^DD",350.9,350.9,51.23,21,4,0)
request is made for a specific insurance company.
"^DD",350.9,350.9,51.23,"DT")
3030415
"^DD",350.9,350.9002,0)
BATCH EXTRACTS SUB-FIELD^^.06^6
"^DD",350.9,350.9002,0,"DT")
3030613
"^DD",350.9,350.9002,0,"IX","B",350.9002,.01)

"^DD",350.9,350.9002,0,"NM","BATCH EXTRACTS")

"^DD",350.9,350.9002,0,"UP")
350.9
"^DD",350.9,350.9002,.01,0)
BATCH EXTRACTS^MRS^1:Buffer;2:Appt;3:Nonverified;4:No Insurance;^0;1^Q
"^DD",350.9,350.9002,.01,1,0)
^.1
"^DD",350.9,350.9002,.01,1,1,0)
350.9002^B
"^DD",350.9,350.9002,.01,1,1,1)
S ^IBE(350.9,DA(1),51.17,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.9002,.01,1,1,2)
K ^IBE(350.9,DA(1),51.17,"B",$E(X,1,30),DA)
"^DD",350.9,350.9002,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",350.9,350.9002,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",350.9,350.9002,.01,3)

"^DD",350.9,350.9002,.01,21,0)
^.001^4^4^3020612^^^
"^DD",350.9,350.9002,.01,21,1,0)
This field identifies each of the four data extracts that IIV uses
"^DD",350.9,350.9002,.01,21,2,0)
to find data to request identification or verification for.
"^DD",350.9,350.9002,.01,21,3,0)
 
"^DD",350.9,350.9002,.01,21,4,0)
Buffer, appointment, non-verified insurance and no insurance.
"^DD",350.9,350.9002,.01,"DT")
3020612
"^DD",350.9,350.9002,.02,0)
ACTIVE?^RS^0:Not Active;1:Active;^0;2^Q
"^DD",350.9,350.9002,.02,3)
Enter 'Active' if the extract is active and should run daily.
"^DD",350.9,350.9002,.02,21,0)
^^2^2^3020819^
"^DD",350.9,350.9002,.02,21,1,0)
This parameter indicates whether or not this extract should be
"^DD",350.9,350.9002,.02,21,2,0)
performed during the daily eIIV extract process.
"^DD",350.9,350.9002,.02,"DT")
3020819
"^DD",350.9,350.9002,.03,0)
SELECTION CRITERIA #1^RNJ3,0^^0;3^K:+X'=X!(X>180)!(X<7)!(X?.E1"."1N.N) X
"^DD",350.9,350.9002,.03,3)
Enter the number of days to determine the date range for extraction.  Enter a number between 7 and 180 (6 months). Please type ?? to see extract specific descriptions.
"^DD",350.9,350.9002,.03,21,0)
^^15^15^3020828^
"^DD",350.9,350.9002,.03,21,1,0)
This field is a parameter that is used by three of the data
"^DD",350.9,350.9002,.03,21,2,0)
extracts to determine whether a record should be extracted
"^DD",350.9,350.9002,.03,21,3,0)
or not. 
"^DD",350.9,350.9002,.03,21,4,0)
 
"^DD",350.9,350.9002,.03,21,5,0)
For the Appointments extract, this indicates how far in the
"^DD",350.9,350.9002,.03,21,6,0)
future a patient can be scheduled for an appointment and be
"^DD",350.9,350.9002,.03,21,7,0)
eligible for extract.  If the value is 10, then a patient
"^DD",350.9,350.9002,.03,21,8,0)
will be eligible for extract if their appointment is within
"^DD",350.9,350.9002,.03,21,9,0)
10 days of the extract date.
"^DD",350.9,350.9002,.03,21,10,0)
 
"^DD",350.9,350.9002,.03,21,11,0)
For the Non Verified Insurance and No Insurance extracts,
"^DD",350.9,350.9002,.03,21,12,0)
this indicates how far in the past a patient must have been
"^DD",350.9,350.9002,.03,21,13,0)
seen to be eligible for extract.  If the value is 10, then
"^DD",350.9,350.9002,.03,21,14,0)
a patient will be eligible for extract if they were seen in
"^DD",350.9,350.9002,.03,21,15,0)
the last 10 days.  
"^DD",350.9,350.9002,.03,"DT")
3020819
"^DD",350.9,350.9002,.04,0)
SELECTION CRITERIA #2^RNJ3,0^^0;4^K:+X'=X!(X>180)!(X<7)!(X?.E1"."1N.N) X
"^DD",350.9,350.9002,.04,3)
Enter the number of days to determine the date range for freshness.  Enter a number between 7 and 180 (6 months). Please type ?? to see extract specific descriptions.
"^DD",350.9,350.9002,.04,21,0)
^^12^12^3020828^
"^DD",350.9,350.9002,.04,21,1,0)
This field is a parameter that is used by two of the data extracts
"^DD",350.9,350.9002,.04,21,2,0)
to determine whether a record should be extracted or not.
"^DD",350.9,350.9002,.04,21,3,0)
 
"^DD",350.9,350.9002,.04,21,4,0)
For both the No Active Insurance extract and the Non Verified
"^DD",350.9,350.9002,.04,21,5,0)
Insurance extract, this is similar to the FRESHNESS DAYS parameter
"^DD",350.9,350.9002,.04,21,6,0)
in that this represents how long to wait before IIV can attempt to
"^DD",350.9,350.9002,.04,21,7,0)
reidentify the same insurance for that patient.
"^DD",350.9,350.9002,.04,21,8,0)
 
"^DD",350.9,350.9002,.04,21,9,0)
If the value is 10, this means that IIV can attempt to reidentify
"^DD",350.9,350.9002,.04,21,10,0)
insurance for a patient 11 days after the most recently inquired 
"^DD",350.9,350.9002,.04,21,11,0)
date.  A specific date is always asked of the payer when
"^DD",350.9,350.9002,.04,21,12,0)
trying to identify patients eligibility.
"^DD",350.9,350.9002,.04,"DT")
3020819
"^DD",350.9,350.9002,.05,0)
MAXIMUM EXTRACT NUMBER^NJ4,0^^0;5^K:+X'=X!(X>5000)!(X<10)!(X?.E1"."1N.N) X
"^DD",350.9,350.9002,.05,3)
Type a Number between 10 and 5000, 0 Decimal Digits
"^DD",350.9,350.9002,.05,21,0)
^.001^5^5^3030613^^
"^DD",350.9,350.9002,.05,21,1,0)
This field allows a site to restrict the daily number of records
"^DD",350.9,350.9002,.05,21,2,0)
extracted and placed in the IIV Transmission Queue.
"^DD",350.9,350.9002,.05,21,3,0)
  
"^DD",350.9,350.9002,.05,21,4,0)
If left blank, there is no limit and all possible records will be
"^DD",350.9,350.9002,.05,21,5,0)
placed in the Transmission Queue file for processing as HL7 messages.
"^DD",350.9,350.9002,.05,"DT")
3030613
"^DD",350.9,350.9002,.06,0)
SUPPRESS BUFFER CREATION^S^0:No;1:Yes;^0;6^Q
"^DD",350.9,350.9002,.06,3)
Enter 'Yes' if Insurance Buffer entries should not be created when the insurance inquiry could not be transmitted.  Enter 'No', otherwise.
"^DD",350.9,350.9002,.06,21,0)
^^12^12^3020911^
"^DD",350.9,350.9002,.06,21,1,0)
This flag will suppress the creation of Insurance Buffer entries
"^DD",350.9,350.9002,.06,21,2,0)
when attempting to create insurance inquiries during the eIIV
"^DD",350.9,350.9002,.06,21,3,0)
process.  If the insurance inquiry cannot be transmitted because
"^DD",350.9,350.9002,.06,21,4,0)
the insurance company does not resolve to a valid and eligible
"^DD",350.9,350.9002,.06,21,5,0)
payer, this flag will not allow an Insurance Buffer entry to be
"^DD",350.9,350.9002,.06,21,6,0)
created and flagged to be corrected manually before being sent
"^DD",350.9,350.9002,.06,21,7,0)
out.  This is intended to reduce the number of Insurance Buffer
"^DD",350.9,350.9002,.06,21,8,0)
entries to be resolved manually which did not originate in the
"^DD",350.9,350.9002,.06,21,9,0)
Buffer originally.
"^DD",350.9,350.9002,.06,21,10,0)
 
"^DD",350.9,350.9002,.06,21,11,0)
Please note that this flag only applies to the Appointment
"^DD",350.9,350.9002,.06,21,12,0)
(Pre-Reg) extract and the Nonverified extract.
"^DD",350.9,350.9002,.06,"DT")
3020911
"^DD",350.9,350.9003,0)
POPULAR INSUR CO. SUB-FIELD^^.01^1
"^DD",350.9,350.9003,0,"DT")
3020605
"^DD",350.9,350.9003,0,"IX","B",350.9003,.01)

"^DD",350.9,350.9003,0,"NM","POPULAR INSUR CO.")

"^DD",350.9,350.9003,0,"UP")
350.9
"^DD",350.9,350.9003,.01,0)
POPULAR INSUR CO.^MP36'^DIC(36,^0;1^Q
"^DD",350.9,350.9003,.01,1,0)
^.1
"^DD",350.9,350.9003,.01,1,1,0)
350.9003^B
"^DD",350.9,350.9003,.01,1,1,1)
S ^IBE(350.9,DA(1),51.18,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.9003,.01,1,1,2)
K ^IBE(350.9,DA(1),51.18,"B",$E(X,1,30),DA)
"^DD",350.9,350.9003,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",350.9,350.9003,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",350.9,350.9003,.01,3)
Select an Insurance Company
"^DD",350.9,350.9003,.01,21,0)
^^3^3^3020605^
"^DD",350.9,350.9003,.01,21,1,0)
This field identifies the most popular insurance companies based
"^DD",350.9,350.9003,.01,21,2,0)
upon bills generated during the time frame defined by the
"^DD",350.9,350.9003,.01,21,3,0)
POPULAR INSUR CO. FROM DATE and POPULAR INSUR CO. THRU DATE fields.
"^DD",350.9,350.9003,.01,"DT")
3020605
"^DD",355.33,355.33,.03,0)
SOURCE OF INFORMATION^S^1:INTERVIEW;2:DATA MATCH;3:IVM;4:PRE-REGISTRATION;5:eIIV;^0;3^Q
"^DD",355.33,355.33,.03,3)
Enter the source of the insurance information.
"^DD",355.33,355.33,.03,21,0)
^^1^1^3020605^
"^DD",355.33,355.33,.03,21,1,0)
This is the source by which this insurance information is obtained.
"^DD",355.33,355.33,.03,"DT")
3020605
"^DD",355.33,355.33,.12,0)
IIV STATUS^P365.15'^IBE(365.15,^0;12^Q
"^DD",355.33,355.33,.12,3)
Enter the IIV status associated with this buffer entry.
"^DD",355.33,355.33,.12,21,0)
^^5^5^3030414^
"^DD",355.33,355.33,.12,21,1,0)
This field is a pointer to the IIV STATUS TABLE file.  This identifies
"^DD",355.33,355.33,.12,21,2,0)
the visual symbol that should appear in the IIV status column in 
"^DD",355.33,355.33,.12,21,3,0)
the insurance buffer listing of entries.  The symbols appear next to the 
"^DD",355.33,355.33,.12,21,4,0)
patient name to indicate the current stage within the electronic 
"^DD",355.33,355.33,.12,21,5,0)
verification process.
"^DD",355.33,355.33,.12,"DT")
3030414
"^DD",355.33,355.33,.13,0)
OVERRIDE FRESHNESS FLAG^S^1:YES;0:NO;^0;13^Q
"^DD",355.33,355.33,.13,3)
Enter Yes to force an electronic transmission of this entry.
"^DD",355.33,355.33,.13,21,0)
^^7^7^3020708^
"^DD",355.33,355.33,.13,21,1,0)
The presence of this flag will alert the Buffer extract process and
"^DD",355.33,355.33,.13,21,2,0)
also the process that electronically transmits the insurance
"^DD",355.33,355.33,.13,21,3,0)
verification request, that this buffer entry should get transmitted
"^DD",355.33,355.33,.13,21,4,0)
and sent to the Payer - bypassing the National Insurance Cache.
"^DD",355.33,355.33,.13,21,5,0)
This is regardless of the freshness date or of any other data
"^DD",355.33,355.33,.13,21,6,0)
elements.  This flag trumps everything else in the electronic
"^DD",355.33,355.33,.13,21,7,0)
verification process.
"^DD",355.33,355.33,.13,"DT")
3020708
"^DD",355.33,355.33,.15,0)
IIV PROCESSED DATE^D^^0;15^S %DT="ETXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.33,355.33,.15,3)
This is the date the response was received using eIIV.
"^DD",355.33,355.33,.15,21,0)
^.001^3^3^3030722^^^^
"^DD",355.33,355.33,.15,21,1,0)
This date/time field is automatically updated when a response is received
"^DD",355.33,355.33,.15,21,2,0)
using the electronic insurance eligibility communications via the IIV
"^DD",355.33,355.33,.15,21,3,0)
software.
"^DD",355.33,355.33,.15,"DT")
3030722
"^DD",355.33,355.33,20.01,0)
INSURANCE COMPANY NAME^FX^^20;1^S X=$$UP^XLFSTR(X),X=$$TRIM^XLFSTR(X) K:$L(X)>30!($L(X)<3) X
"^DD",355.33,355.33,20.01,1,0)
^.1
"^DD",355.33,355.33,20.01,1,1,0)
355.33^D
"^DD",355.33,355.33,20.01,1,1,1)
S ^IBA(355.33,"D",$E(X,1,30),DA)=""
"^DD",355.33,355.33,20.01,1,1,2)
K ^IBA(355.33,"D",$E(X,1,30),DA)
"^DD",355.33,355.33,20.01,1,1,"%D",0)
^^1^1^2980309^
"^DD",355.33,355.33,20.01,1,1,"%D",1,0)
Insurance Company Cross-reference.
"^DD",355.33,355.33,20.01,1,1,"DT")
2980309
"^DD",355.33,355.33,20.01,3)
Answer must be 3-30 characters in length.
"^DD",355.33,355.33,20.01,21,0)
^.001^2^2^3030617^^^
"^DD",355.33,355.33,20.01,21,1,0)
Enter the name of the Insurance Carrier that provides coverage for this
"^DD",355.33,355.33,20.01,21,2,0)
patient.
"^DD",355.33,355.33,20.01,"DT")
3030617
"^DD",365,365,0)
FIELD^^1.19^32
"^DD",365,365,0,"DDA")
N
"^DD",365,365,0,"DT")
3030613
"^DD",365,365,0,"IX","AC",365,.06)

"^DD",365,365,0,"IX","AE",365,.08)

"^DD",365,365,0,"IX","AF",365,.04)

"^DD",365,365,0,"IX","B",365,.01)

"^DD",365,365,0,"IX","C",365,.09)

"^DD",365,365,0,"NM","IIV RESPONSE")

"^DD",365,365,0,"PT",365.16,.03)

"^DD",365,365,.01,0)
MESSAGE CONTROL ID^RF^^0;1^K:$L(X)>20!($L(X)<1)!'(X'?1P.E) X
"^DD",365,365,.01,1,0)
^.1
"^DD",365,365,.01,1,1,0)
365^B
"^DD",365,365,.01,1,1,1)
S ^IBCN(365,"B",$E(X,1,30),DA)=""
"^DD",365,365,.01,1,1,2)
K ^IBCN(365,"B",$E(X,1,30),DA)
"^DD",365,365,.01,1,1,"%D",0)
^.101^2^2^3020607^^
"^DD",365,365,.01,1,1,"%D",1,0)
This is the standard "B" cross-reference of the HL7 Message
"^DD",365,365,.01,1,1,"%D",2,0)
Control ID.
"^DD",365,365,.01,3)
HL7 message control ID assigned. Answer must be 1-20 characters in length.
"^DD",365,365,.01,21,0)
^^3^3^3020607^
"^DD",365,365,.01,21,1,0)
This is the HL7 message control number that is generated at
"^DD",365,365,.01,21,2,0)
the time the HL7 message is generated and placed in the
"^DD",365,365,.01,21,3,0)
outgoing HL7 message queue.
"^DD",365,365,.01,"DT")
3020517
"^DD",365,365,.02,0)
PATIENT^P2'^DPT(^0;2^Q
"^DD",365,365,.02,3)
Selected patient
"^DD",365,365,.02,21,0)
^^1^1^3020607^
"^DD",365,365,.02,21,1,0)
This the patient who was identified on the outgoing HL7 message.
"^DD",365,365,.02,"DT")
3020610
"^DD",365,365,.03,0)
PAYER^P365.12'^IBE(365.12,^0;3^Q
"^DD",365,365,.03,3)
Selected payer
"^DD",365,365,.03,21,0)
^^2^2^3020607^
"^DD",365,365,.03,21,1,0)
This is the payer that was selected for either identification or
"^DD",365,365,.03,21,2,0)
verification.
"^DD",365,365,.03,"DT")
3020610
"^DD",365,365,.04,0)
BUFFER ENTRY^P355.33'^IBA(355.33,^0;4^Q
"^DD",365,365,.04,1,0)
^.1
"^DD",365,365,.04,1,1,0)
365^AF
"^DD",365,365,.04,1,1,1)
S ^IBCN(365,"AF",$E(X,1,30),DA)=""
"^DD",365,365,.04,1,1,2)
K ^IBCN(365,"AF",$E(X,1,30),DA)
"^DD",365,365,.04,1,1,"%D",0)
^.101^2^2^3021111^^
"^DD",365,365,.04,1,1,"%D",1,0)
This cross-reference is by the Insurance Buffer Entry IEN.  Used
"^DD",365,365,.04,1,1,"%D",2,0)
for error reporting.
"^DD",365,365,.04,1,1,"DT")
3020613
"^DD",365,365,.04,21,0)
^^2^2^3020607^
"^DD",365,365,.04,21,1,0)
This field is a pointer to the Insurance Buffer File if a buffer
"^DD",365,365,.04,21,2,0)
record exists for this insurance inquiry.
"^DD",365,365,.04,"DT")
3020613
"^DD",365,365,.05,0)
TRANSMISSION QUEUE^P365.1'^IBCN(365.1,^0;5^Q
"^DD",365,365,.05,21,0)
^.001^2^2^3020612^^
"^DD",365,365,.05,21,1,0)
This is the reference back to the Transmission Queue File.  It
"^DD",365,365,.05,21,2,0)
provides a link between the inquiry and the response.
"^DD",365,365,.05,"DT")
3020605
"^DD",365,365,.06,0)
TRANSMISSION STATUS^P365.14'^IBE(365.14,^0;6^Q
"^DD",365,365,.06,1,0)
^.1
"^DD",365,365,.06,1,1,0)
365^AC
"^DD",365,365,.06,1,1,1)
S ^IBCN(365,"AC",$E(X,1,30),DA)=""
"^DD",365,365,.06,1,1,2)
K ^IBCN(365,"AC",$E(X,1,30),DA)
"^DD",365,365,.06,1,1,"%D",0)
^^2^2^3020607^
"^DD",365,365,.06,1,1,"%D",1,0)
This is a standard cross-reference by the Transmission Status.  It
"^DD",365,365,.06,1,1,"%D",2,0)
will be used to determined records being processed.
"^DD",365,365,.06,1,1,"DT")
3020607
"^DD",365,365,.06,21,0)
^^1^1^3020607^
"^DD",365,365,.06,21,1,0)
This is the status of the response record.
"^DD",365,365,.06,"DT")
3020607
"^DD",365,365,.07,0)
DATE/TIME RECEIVED^D^^0;7^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,.07,.1)
Response Date
"^DD",365,365,.07,21,0)
^^2^2^3020607^
"^DD",365,365,.07,21,1,0)
This is the date and time that the HL7 response was received
"^DD",365,365,.07,21,2,0)
from the payer via the Eligibility Communicator.
"^DD",365,365,.07,"DT")
3020809
"^DD",365,365,.08,0)
DATE/TIME CREATED^D^^0;8^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,.08,1,0)
^.1
"^DD",365,365,.08,1,1,0)
365^AE
"^DD",365,365,.08,1,1,1)
S ^IBCN(365,"AE",$E(X,1,30),DA)=""
"^DD",365,365,.08,1,1,2)
K ^IBCN(365,"AE",$E(X,1,30),DA)
"^DD",365,365,.08,1,1,"%D",0)
^^1^1^3020611^
"^DD",365,365,.08,1,1,"%D",1,0)
Index used for IIV reporting - statistics
"^DD",365,365,.08,1,1,"DT")
3020611
"^DD",365,365,.08,21,0)
^.001^2^2^3020607^^
"^DD",365,365,.08,21,1,0)
This is the date and time that the baseline response record 
"^DD",365,365,.08,21,2,0)
was created when the outgoing HL7 message was generated.
"^DD",365,365,.08,"DT")
3020611
"^DD",365,365,.09,0)
TRACE NUMBER^F^^0;9^K:$L(X)>15!($L(X)<3) X
"^DD",365,365,.09,.1)
Trace #
"^DD",365,365,.09,1,0)
^.1
"^DD",365,365,.09,1,1,0)
365^C
"^DD",365,365,.09,1,1,1)
S ^IBCN(365,"C",$E(X,1,30),DA)=""
"^DD",365,365,.09,1,1,2)
K ^IBCN(365,"C",$E(X,1,30),DA)
"^DD",365,365,.09,1,1,"%D",0)
^^2^2^3020809^
"^DD",365,365,.09,1,1,"%D",1,0)
This is the Trace Number assigned to the message from the incoming
"^DD",365,365,.09,1,1,"%D",2,0)
source.
"^DD",365,365,.09,1,1,"DT")
3020809
"^DD",365,365,.09,3)
Answer must be 3-15 characters in length.
"^DD",365,365,.09,21,0)
^.001^2^2^3030204^^^
"^DD",365,365,.09,21,1,0)
This field will contain the Trace Number assigned by EC that is
"^DD",365,365,.09,21,2,0)
used for tracking a message between EC and the vendor.
"^DD",365,365,.09,"DT")
3030204
"^DD",365,365,.1,0)
RESPONSE TYPE^S^O:Original;U:Unsolicited;^0;10^Q
"^DD",365,365,.1,21,0)
^.001^3^3^3030507^^
"^DD",365,365,.1,21,1,0)
This field identifies whether a response originated from the
"^DD",365,365,.1,21,2,0)
Transmission Queue file (Original) or was received Unsolicited
"^DD",365,365,.1,21,3,0)
from the EC.
"^DD",365,365,.1,"DT")
3020906
"^DD",365,365,1.01,0)
NAME OF INSURED^F^^1;1^K:$L(X)>30!($L(X)<1) X
"^DD",365,365,1.01,.1)
Subscriber
"^DD",365,365,1.01,3)
Answer must be 1-30 characters in length
"^DD",365,365,1.01,21,0)
^^4^4^3020607^
"^DD",365,365,1.01,21,1,0)
This is the name of the insured person in LastName,FirstName MI
"^DD",365,365,1.01,21,2,0)
format.  If the patient is the subscriber, this field is the
"^DD",365,365,1.01,21,3,0)
same.  If the patient is a dependent, the subscriber's name is
"^DD",365,365,1.01,21,4,0)
stored here.
"^DD",365,365,1.01,"DT")
3020712
"^DD",365,365,1.02,0)
INSURED DOB^F^^1;2^K:$L(X)>12!($L(X)<1) X
"^DD",365,365,1.02,.1)
Subscriber DOB
"^DD",365,365,1.02,3)
Answer must be 1-12 characters in length
"^DD",365,365,1.02,21,0)
^^1^1^3020607^
"^DD",365,365,1.02,21,1,0)
The date of birth of the insured person.
"^DD",365,365,1.02,"DT")
3021011
"^DD",365,365,1.03,0)
INSURED SSN^F^^1;3^K:$L(X)>11!($L(X)<1) X
"^DD",365,365,1.03,.1)
Subscriber SSN
"^DD",365,365,1.03,3)
Answer must be 1-11 characters in length
"^DD",365,365,1.03,21,0)
^^1^1^3020607^
"^DD",365,365,1.03,21,1,0)
The social security number of the insured person.
"^DD",365,365,1.03,"DT")
3020712
"^DD",365,365,1.04,0)
INSURED SEX^F^^1;4^K:$L(X)>6!($L(X)<1) X
"^DD",365,365,1.04,.1)
Subscriber Sex
"^DD",365,365,1.04,3)
Answer must be 1-6 characters in length
"^DD",365,365,1.04,21,0)
^^1^1^3020607^
"^DD",365,365,1.04,21,1,0)
The sex of the insured person.
"^DD",365,365,1.04,"DT")
3021011
"^DD",365,365,1.05,0)
SUBSCRIBER ID^F^^1;5^K:$L(X)>20!($L(X)<1) X
"^DD",365,365,1.05,.1)
Subscriber ID
"^DD",365,365,1.05,3)
Answer must be 1-20 characters in length
"^DD",365,365,1.05,21,0)
^^1^1^3020607^
"^DD",365,365,1.05,21,1,0)
The subscriber identification of the insured person.
"^DD",365,365,1.05,"DT")
3020712
"^DD",365,365,1.06,0)
GROUP NAME^F^^1;6^K:$L(X)>20!($L(X)<1) X
"^DD",365,365,1.06,.1)
Group Name
"^DD",365,365,1.06,3)
Answer must be 1-20 characters in length
"^DD",365,365,1.06,21,0)
^^1^1^3020607^
"^DD",365,365,1.06,21,1,0)
The name of the group or plan if not an individual policy.
"^DD",365,365,1.06,"DT")
3020712
"^DD",365,365,1.07,0)
GROUP NUMBER^F^^1;7^K:$L(X)>17!($L(X)<1) X
"^DD",365,365,1.07,.1)
Group ID
"^DD",365,365,1.07,3)
Answer must be 1-17 characters in length
"^DD",365,365,1.07,21,0)
^^1^1^3020607^
"^DD",365,365,1.07,21,1,0)
The number that identifies the group or plan.
"^DD",365,365,1.07,"DT")
3020712
"^DD",365,365,1.08,0)
WHOSE INSURANCE^S^v:VETERAN;s:SPOUSE;o:OTHER;^1;8^Q
"^DD",365,365,1.08,.1)
Whose Insurance
"^DD",365,365,1.08,21,0)
^^2^2^3020607^
"^DD",365,365,1.08,21,1,0)
This is a definition of who is the subscriber of the insurance;
"^DD",365,365,1.08,21,2,0)
the veteran, a spouse or someone else.
"^DD",365,365,1.08,"DT")
3020712
"^DD",365,365,1.09,0)
PT RELATIONSHIP TO INSURED^S^01:PATIENT;02:SPOUSE;03:NATURAL CHILD;08:EMPLOYEE;09:UNKNOWN;11:ORGAN DONOR;15:INJURED PLAINTIFF;18:PARENT;^1;9^Q
"^DD",365,365,1.09,.1)
Pt Rel to Insured
"^DD",365,365,1.09,21,0)
^.001^2^2^3030507^^
"^DD",365,365,1.09,21,1,0)
This is a definition of the patient's relationship to the
"^DD",365,365,1.09,21,2,0)
insured person.
"^DD",365,365,1.09,"DT")
3030507
"^DD",365,365,1.1,0)
SERVICE DATE^D^^1;10^S %DT="E" D ^%DT S X=Y K:X<1 X
"^DD",365,365,1.1,.1)
Service Date
"^DD",365,365,1.1,3)
(No range limit on date)
"^DD",365,365,1.1,21,0)
^^3^3^3020607^
"^DD",365,365,1.1,21,1,0)
This is the date of service returned by the Eligibility
"^DD",365,365,1.1,21,2,0)
Communicator.  It may be different from the one sent in
"^DD",365,365,1.1,21,3,0)
the original inquiry.
"^DD",365,365,1.1,"DT")
3020712
"^DD",365,365,1.11,0)
EFFECTIVE DATE^D^^1;11^S %DT="E" D ^%DT S X=Y K:X<1 X
"^DD",365,365,1.11,.1)
Effective Date
"^DD",365,365,1.11,3)
(No range limit on date)
"^DD",365,365,1.11,21,0)
^^1^1^3020607^
"^DD",365,365,1.11,21,1,0)
This is the date that the insurance coverage began.
"^DD",365,365,1.11,"DT")
3020712
"^DD",365,365,1.12,0)
EXPIRATION DATE^D^^1;12^S %DT="E" D ^%DT S X=Y K:X<1 X
"^DD",365,365,1.12,.1)
Expiration Date
"^DD",365,365,1.12,3)
(No range limit on date)
"^DD",365,365,1.12,21,0)
^^1^1^3020607^
"^DD",365,365,1.12,21,1,0)
This is the date that the insurance coverage ends.
"^DD",365,365,1.12,"DT")
3020712
"^DD",365,365,1.13,0)
COORDINATION OF BENEFITS^S^1:PRIMARY;2:SECONDARY;3:TERTIARY;^1;13^Q
"^DD",365,365,1.13,.1)
COB
"^DD",365,365,1.13,21,0)
^^2^2^3020607^
"^DD",365,365,1.13,21,1,0)
If an insurance payer is identified as a primary, secondary or
"^DD",365,365,1.13,21,2,0)
tertiary in the response.
"^DD",365,365,1.13,"DT")
3020712
"^DD",365,365,1.14,0)
ERROR CONDITION^P365.017'^IBE(365.017,^1;14^Q
"^DD",365,365,1.14,.1)
Error Condition
"^DD",365,365,1.14,21,0)
^^2^2^3020607^
"^DD",365,365,1.14,21,1,0)
This is an error value returned from either the payer or the
"^DD",365,365,1.14,21,2,0)
Eligibility Communicator.
"^DD",365,365,1.14,"DT")
3020712
"^DD",365,365,1.15,0)
ERROR ACTION^P365.018'^IBE(365.018,^1;15^Q
"^DD",365,365,1.15,.1)
Error Action
"^DD",365,365,1.15,21,0)
^^2^2^3020607^
"^DD",365,365,1.15,21,1,0)
When an error condition is returned in the response, there may
"^DD",365,365,1.15,21,2,0)
be an action that directs what happens to the response.
"^DD",365,365,1.15,"DT")
3020712
"^DD",365,365,1.16,0)
DATE OF DEATH^D^^1;16^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,1.16,.1)
Date of Death
"^DD",365,365,1.16,21,0)
^^2^2^3020607^
"^DD",365,365,1.16,21,1,0)
This is the date that the payer indicates that the person
"^DD",365,365,1.16,21,2,0)
that verification was requested for has died.
"^DD",365,365,1.16,"DT")
3020712
"^DD",365,365,1.17,0)
CERTIFICATION DATE^D^^1;17^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,1.17,.1)
Certification Date
"^DD",365,365,1.17,21,0)
^^2^2^3020607^
"^DD",365,365,1.17,21,1,0)
This field may be returned by the payer and is the date that
"^DD",365,365,1.17,21,2,0)
the insurance coverage was certified.
"^DD",365,365,1.17,"DT")
3020712
"^DD",365,365,1.18,0)
MEMBER ID^F^^1;18^K:$L(X)>20!($L(X)<1) X
"^DD",365,365,1.18,.1)
Member ID
"^DD",365,365,1.18,3)
Answer must be 1-20 characters in length.
"^DD",365,365,1.18,21,0)
^^1^1^3021010^
"^DD",365,365,1.18,21,1,0)
The member identification of the insured person.
"^DD",365,365,1.18,"DT")
3021010
"^DD",365,365,1.19,0)
VERIFICATION DATE/TIME^D^^1;19^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,1.19,.1)
Verification Date
"^DD",365,365,1.19,3)
Enter verification date and time for this response.
"^DD",365,365,1.19,21,0)
^^2^2^3021010^
"^DD",365,365,1.19,21,1,0)
Verification date/time received by IIV from the Eligibility
"^DD",365,365,1.19,21,2,0)
Communicator for this payer and patient.
"^DD",365,365,1.19,"DT")
3021011
"^DD",365,365,2,0)
ELIGIBILITY/BENEFIT^365.02^^2;0
"^DD",365,365,2,21,0)
^.001^2^2^3030213^^^
"^DD",365,365,2,21,1,0)
This multiple contains all of the eligibility and benefit data
"^DD",365,365,2,21,2,0)
for a specific insured person returned from the Payer.
"^DD",365,365,3,0)
CONTACT PERSON^365.03^^3;0
"^DD",365,365,3,21,0)
^.001^3^3^3030613^^^^
"^DD",365,365,3,21,1,0)
This field contains any persons identified by the Payer
"^DD",365,365,3,21,2,0)
as a contact name and/or communications number.  There 
"^DD",365,365,3,21,3,0)
could be up to 3 different methods of communication.
"^DD",365,365,4.01,0)
ERROR TEXT^F^^4;1^K:$L(X)>80!($L(X)<1) X
"^DD",365,365,4.01,.1)
Error Text
"^DD",365,365,4.01,3)
Answer must be 1-80 characters in length.
"^DD",365,365,4.01,21,0)
^^3^3^3020702^
"^DD",365,365,4.01,21,1,0)
This field contains error message text which is sent from the
"^DD",365,365,4.01,21,2,0)
Eligibility Communicator if an error does not fall within one
"^DD",365,365,4.01,21,3,0)
of the standard X.12 error conditions.
"^DD",365,365,4.01,"DT")
3020906
"^DD",365,365.02,0)
ELIGIBILITY/BENEFIT SUB-FIELD^^2^14
"^DD",365,365.02,0,"DT")
3030213
"^DD",365,365.02,0,"IX","B",365.02,.01)

"^DD",365,365.02,0,"NM","ELIGIBILITY/BENEFIT")

"^DD",365,365.02,0,"UP")
365
"^DD",365,365.02,.01,0)
EB NUMBER^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",365,365.02,.01,1,0)
^.1
"^DD",365,365.02,.01,1,1,0)
365.02^B
"^DD",365,365.02,.01,1,1,1)
S ^IBCN(365,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",365,365.02,.01,1,1,2)
K ^IBCN(365,DA(1),2,"B",$E(X,1,30),DA)
"^DD",365,365.02,.01,1,1,"%D",0)
^^1^1^3020715^
"^DD",365,365.02,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365,365.02,.01,1,1,"DT")
3020715
"^DD",365,365.02,.01,3)
Type a Number between 1 and 999
"^DD",365,365.02,.01,21,0)
^^3^3^3020612^
"^DD",365,365.02,.01,21,1,0)
This is a sequential number corresponding to the Set-ID for all
"^DD",365,365.02,.01,21,2,0)
of the eligibility/benefit (X.12 EB segments) segments coming
"^DD",365,365.02,.01,21,3,0)
into VISTA.
"^DD",365,365.02,.01,"DT")
3020715
"^DD",365,365.02,.02,0)
ELIGIBILITY/BENEFIT INFO^P365.011'^IBE(365.011,^0;2^Q
"^DD",365,365.02,.02,.1)
Elig/Ben Info
"^DD",365,365.02,.02,21,0)
^^3^3^3020612^
"^DD",365,365.02,.02,21,1,0)
This field contains a code identifying the eligibility status
"^DD",365,365.02,.02,21,2,0)
of the individual or the benefit returned by the Payer.  It corresponds
"^DD",365,365.02,.02,21,3,0)
to X.12 271 EB01 data element.
"^DD",365,365.02,.02,"DT")
3020712
"^DD",365,365.02,.03,0)
COVERAGE LEVEL^P365.012'^IBE(365.012,^0;3^Q
"^DD",365,365.02,.03,.1)
Coverage Level
"^DD",365,365.02,.03,21,0)
^^2^2^3020612^
"^DD",365,365.02,.03,21,1,0)
This field identifies the level of coverage of benefits.
"^DD",365,365.02,.03,21,2,0)
It corresponds to X.12 271 EB02 data element.
"^DD",365,365.02,.03,"DT")
3020712
"^DD",365,365.02,.04,0)
SERVICE TYPE^P365.013'^IBE(365.013,^0;4^Q
"^DD",365,365.02,.04,.1)
Service Type
"^DD",365,365.02,.04,21,0)
^^2^2^3020612^
"^DD",365,365.02,.04,21,1,0)
This field is a code identifying the classification of service.
"^DD",365,365.02,.04,21,2,0)
It corresponds to X.12 271 EB03 data element.
"^DD",365,365.02,.04,"DT")
3020712
"^DD",365,365.02,.05,0)
INSURANCE TYPE^P365.014'^IBE(365.014,^0;5^Q
"^DD",365,365.02,.05,.1)
Insurance Type
"^DD",365,365.02,.05,21,0)
^^3^3^3020612^
"^DD",365,365.02,.05,21,1,0)
This code identifying the type of insurance policy within
"^DD",365,365.02,.05,21,2,0)
a specific insurance program.  It corresponds to X.12 271 EB04
"^DD",365,365.02,.05,21,3,0)
data element.
"^DD",365,365.02,.05,"DT")
3020712
"^DD",365,365.02,.06,0)
PLAN COVERAGE DESCRIPTION^F^^0;6^K:$L(X)>50!($L(X)<1) X
"^DD",365,365.02,.06,.1)
Plan Coverage Description
"^DD",365,365.02,.06,3)
Answer must be 1-50 characters in length
"^DD",365,365.02,.06,21,0)
^.001^2^2^3020612^^
"^DD",365,365.02,.06,21,1,0)
This code is a description or number that identifies the plan
"^DD",365,365.02,.06,21,2,0)
or coverage. It corresponds to X.12 271 EB05 data element.
"^DD",365,365.02,.06,"DT")
3020712
"^DD",365,365.02,.07,0)
TIME PERIOD QUALIFIER^P365.015'^IBE(365.015,^0;7^Q
"^DD",365,365.02,.07,.1)
Time Period
"^DD",365,365.02,.07,21,0)
^^3^3^3020612^
"^DD",365,365.02,.07,21,1,0)
This code for the time period category for the benefits being
"^DD",365,365.02,.07,21,2,0)
described when needed to qualify benefit availability.
"^DD",365,365.02,.07,21,3,0)
It corresponds to X.12 271 EB06 data element.
"^DD",365,365.02,.07,"DT")
3020712
"^DD",365,365.02,.08,0)
MONETARY AMOUNT^NJ11,2^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99999999)!(X<0)!(X?.E1"."3.N) X
"^DD",365,365.02,.08,3)
Type a Dollar amount between 0 and 99999999, 2 Decimal Digits
"^DD",365,365.02,.08,21,0)
^.001^3^3^3020612^^
"^DD",365,365.02,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",365,365.02,.08,21,2,0)
qualified by a monetary amount. It corresponds to X.12 271 EB07
"^DD",365,365.02,.08,21,3,0)
data element.
"^DD",365,365.02,.08,"DT")
3020517
"^DD",365,365.02,.09,0)
PERCENT^NJ9,5^^0;9^K:+X'=X!(X>100)!(X<0)!(X?.E1"."6N.N) X
"^DD",365,365.02,.09,.1)
Percentage
"^DD",365,365.02,.09,3)
Type a Number between 0 and 100, 5 Decimal Digits
"^DD",365,365.02,.09,21,0)
^.001^2^2^3030213^^^
"^DD",365,365.02,.09,21,1,0)
This field is used if eligibility or benefit must be qualified
"^DD",365,365.02,.09,21,2,0)
by a percentage. It corresponds to X.12 271 EB08 data element.
"^DD",365,365.02,.09,"DT")
3030213
"^DD",365,365.02,.1,0)
QUANTITY QUALIFIER^P365.016'^IBE(365.016,^0;10^Q
"^DD",365,365.02,.1,.1)
Quantity
"^DD",365,365.02,.1,21,0)
^^3^3^3020708^
"^DD",365,365.02,.1,21,1,0)
This field is used to identify the type of units that are being
"^DD",365,365.02,.1,21,2,0)
conveyed in the QUANTITY field (#.11).
"^DD",365,365.02,.1,21,3,0)
It corresponds to X.12 271 EB09 data element.
"^DD",365,365.02,.1,"DT")
3020712
"^DD",365,365.02,.11,0)
QUANTITY^F^^0;11^K:$L(X)>15!($L(X)<1) X
"^DD",365,365.02,.11,3)
Answer must be 1-15 characters in length
"^DD",365,365.02,.11,21,0)
^^3^3^3020612^
"^DD",365,365.02,.11,21,1,0)
This field number is used for the quantity value as qualified by
"^DD",365,365.02,.11,21,2,0)
the QUANTITY QUALIFIER field. It corresponds to X.12 271
"^DD",365,365.02,.11,21,3,0)
EB10 data element.
"^DD",365,365.02,.11,"DT")
3020517
"^DD",365,365.02,.12,0)
AUTHORIZATION/CERTIFICATION^S^Y:YES;N:NO;U:UNKNOWN;^0;12^Q
"^DD",365,365.02,.12,.1)
Authorization/Certification
"^DD",365,365.02,.12,21,0)
^.001^3^3^3020612^^^
"^DD",365,365.02,.12,21,1,0)
This field indicates that an authorization or certification
"^DD",365,365.02,.12,21,2,0)
is required per plan provisions. It corresponds to X.12 271
"^DD",365,365.02,.12,21,3,0)
EB11 data element.
"^DD",365,365.02,.12,"DT")
3020712
"^DD",365,365.02,.13,0)
IN PLAN^S^Y:YES;N:NO;U:UNKNOWN;^0;13^Q
"^DD",365,365.02,.13,.1)
In-Plan-Network
"^DD",365,365.02,.13,21,0)
^^3^3^3020612^
"^DD",365,365.02,.13,21,1,0)
This field indicates that an authorization or certification
"^DD",365,365.02,.13,21,2,0)
is required per plan provisions. It corresponds to X.12 271
"^DD",365,365.02,.13,21,3,0)
EB12 data element.
"^DD",365,365.02,.13,"DT")
3020712
"^DD",365,365.02,2,0)
NOTES^365.22^^2;0
"^DD",365,365.02,2,21,0)
^^2^2^3020612^
"^DD",365,365.02,2,21,1,0)
This field contains any additional text about the eligibility
"^DD",365,365.02,2,21,2,0)
benefit information.  It is transcribed from X.12 271 MSG segments.
"^DD",365,365.03,0)
CONTACT PERSON SUB-FIELD^^.07^7
"^DD",365,365.03,0,"DT")
3030613
"^DD",365,365.03,0,"IX","B",365.03,.01)

"^DD",365,365.03,0,"NM","CONTACT PERSON")

"^DD",365,365.03,0,"UP")
365
"^DD",365,365.03,.01,0)
CONTACT PERSON^MF^^0;1^K:$L(X)>32!($L(X)<1) X
"^DD",365,365.03,.01,1,0)
^.1
"^DD",365,365.03,.01,1,1,0)
365.03^B
"^DD",365,365.03,.01,1,1,1)
S ^IBCN(365,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",365,365.03,.01,1,1,2)
K ^IBCN(365,DA(1),3,"B",$E(X,1,30),DA)
"^DD",365,365.03,.01,1,1,"%D",0)
^^1^1^3020715^
"^DD",365,365.03,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365,365.03,.01,1,1,"DT")
3020715
"^DD",365,365.03,.01,3)
Answer must be 1-32 characters in length.
"^DD",365,365.03,.01,21,0)
^.001^1^1^3030613^^^
"^DD",365,365.03,.01,21,1,0)
This is the name of the contact person.
"^DD",365,365.03,.01,"DT")
3030613
"^DD",365,365.03,.02,0)
COMMUNICATION QUALIFIER #1^P365.021'^IBE(365.021,^0;2^Q
"^DD",365,365.03,.02,21,0)
^^2^2^3020612^
"^DD",365,365.03,.02,21,1,0)
This field identifies a method of communication, whether by
"^DD",365,365.03,.02,21,2,0)
phone or email, etc.
"^DD",365,365.03,.02,"DT")
3020603
"^DD",365,365.03,.03,0)
COMMUNICATION NUMBER #1^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.03,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.03,21,0)
^^2^2^3020612^
"^DD",365,365.03,.03,21,1,0)
This is the value of the information defined in the QUALIFIER #1
"^DD",365,365.03,.03,21,2,0)
field.  It could be a phone number or email address, etc.
"^DD",365,365.03,.03,"DT")
3020603
"^DD",365,365.03,.04,0)
COMMUNICATION QUALIFIER #2^P365.021'^IBE(365.021,^0;4^Q
"^DD",365,365.03,.04,21,0)
^^2^2^3020612^
"^DD",365,365.03,.04,21,1,0)
This field identifies a method of communication, whether by
"^DD",365,365.03,.04,21,2,0)
phone or email, etc.
"^DD",365,365.03,.04,"DT")
3020603
"^DD",365,365.03,.05,0)
COMMUNICATION NUMBER #2^F^^0;5^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.05,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.05,21,0)
^^2^2^3020612^
"^DD",365,365.03,.05,21,1,0)
This is the value of the information defined in the QUALIFIER #2
"^DD",365,365.03,.05,21,2,0)
field.  It could be a phone number or email address, etc.
"^DD",365,365.03,.05,"DT")
3020603
"^DD",365,365.03,.06,0)
COMMUNICATION QUALIFIER #3^P365.021'^IBE(365.021,^0;6^Q
"^DD",365,365.03,.06,21,0)
^^2^2^3020612^
"^DD",365,365.03,.06,21,1,0)
This field identifies a method of communication, whether by
"^DD",365,365.03,.06,21,2,0)
phone or email, etc.
"^DD",365,365.03,.06,"DT")
3020603
"^DD",365,365.03,.07,0)
COMMUNICATION NUMBER #3^F^^0;7^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.07,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.07,21,0)
^^2^2^3020612^
"^DD",365,365.03,.07,21,1,0)
This is the value of the information defined in the QUALIFIER #3
"^DD",365,365.03,.07,21,2,0)
field.  It could be a phone number or email address, etc.
"^DD",365,365.03,.07,"DT")
3020603
"^DD",365,365.22,0)
NOTES SUB-FIELD^^.01^1
"^DD",365,365.22,0,"DT")
3020517
"^DD",365,365.22,0,"NM","NOTES")

"^DD",365,365.22,0,"UP")
365.02
"^DD",365,365.22,.01,0)
NOTES^W^^0;1
"^DD",365,365.22,.01,"DT")
3020517
"^DD",365.011,365.011,0)
FIELD^^.03^3
"^DD",365.011,365.011,0,"DDA")
N
"^DD",365.011,365.011,0,"DT")
3020603
"^DD",365.011,365.011,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.011,365.011,0,"IX","B",365.011,.01)

"^DD",365.011,365.011,0,"NM","X12 271 ELIGIBILITY/BENEFIT")

"^DD",365.011,365.011,0,"PT",365.02,.02)

"^DD",365.011,365.011,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",365.011,365.011,.01,1,0)
^.1
"^DD",365.011,365.011,.01,1,1,0)
365.011^B
"^DD",365.011,365.011,.01,1,1,1)
S ^IBE(365.011,"B",$E(X,1,30),DA)=""
"^DD",365.011,365.011,.01,1,1,2)
K ^IBE(365.011,"B",$E(X,1,30),DA)
"^DD",365.011,365.011,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.011,365.011,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.011,365.011,.01,3)
Answer must be 1-2 characters in length.
"^DD",365.011,365.011,.01,21,0)
^^1^1^3020612^
"^DD",365.011,365.011,.01,21,1,0)
This is the code value sent in an X.12 271 EB01 table.
"^DD",365.011,365.011,.01,"DT")
3020517
"^DD",365.011,365.011,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.011,365.011,.02,3)
Answer must be 1-75 characters in length
"^DD",365.011,365.011,.02,21,0)
^^1^1^3020612^
"^DD",365.011,365.011,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.011,365.011,.02,"DT")
3020517
"^DD",365.011,365.011,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.011,365.011,.03,21,0)
^^2^2^3020612^
"^DD",365.011,365.011,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer
"^DD",365.011,365.011,.03,21,2,0)
be used by X.12.
"^DD",365.011,365.011,.03,"DT")
3020603
"^DD",365.012,365.012,0)
FIELD^^.03^3
"^DD",365.012,365.012,0,"DDA")
N
"^DD",365.012,365.012,0,"DT")
3020603
"^DD",365.012,365.012,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.012,365.012,0,"IX","B",365.012,.01)

"^DD",365.012,365.012,0,"NM","X12 271 COVERAGE LEVEL")

"^DD",365.012,365.012,0,"PT",365.02,.03)

"^DD",365.012,365.012,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<3) X
"^DD",365.012,365.012,.01,1,0)
^.1
"^DD",365.012,365.012,.01,1,1,0)
365.012^B
"^DD",365.012,365.012,.01,1,1,1)
S ^IBE(365.012,"B",$E(X,1,30),DA)=""
"^DD",365.012,365.012,.01,1,1,2)
K ^IBE(365.012,"B",$E(X,1,30),DA)
"^DD",365.012,365.012,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.012,365.012,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.012,365.012,.01,3)
Answer must be 3 characters in length
"^DD",365.012,365.012,.01,21,0)
^^1^1^3020612^
"^DD",365.012,365.012,.01,21,1,0)
This is the code value sent in an X.12 271 EB02 table.
"^DD",365.012,365.012,.01,"DT")
3020517
"^DD",365.012,365.012,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.012,365.012,.02,3)
Answer must be 1-75 characters in length
"^DD",365.012,365.012,.02,21,0)
^^1^1^3020612^
"^DD",365.012,365.012,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.012,365.012,.02,"DT")
3020517
"^DD",365.012,365.012,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.012,365.012,.03,21,0)
^^2^2^3020612^
"^DD",365.012,365.012,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.012,365.012,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.012,365.012,.03,"DT")
3020603
"^DD",365.013,365.013,0)
FIELD^^.03^3
"^DD",365.013,365.013,0,"DDA")
N
"^DD",365.013,365.013,0,"DT")
3020603
"^DD",365.013,365.013,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.013,365.013,0,"IX","B",365.013,.01)

"^DD",365.013,365.013,0,"NM","X12 271 SERVICE TYPE")

"^DD",365.013,365.013,0,"PT",365.02,.04)

"^DD",365.013,365.013,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.013,365.013,.01,1,0)
^.1
"^DD",365.013,365.013,.01,1,1,0)
365.013^B
"^DD",365.013,365.013,.01,1,1,1)
S ^IBE(365.013,"B",$E(X,1,30),DA)=""
"^DD",365.013,365.013,.01,1,1,2)
K ^IBE(365.013,"B",$E(X,1,30),DA)
"^DD",365.013,365.013,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.013,365.013,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.013,365.013,.01,3)
Answer must be 1-2 characters in length
"^DD",365.013,365.013,.01,21,0)
^.001^1^1^3020612^^
"^DD",365.013,365.013,.01,21,1,0)
This is the code value sent in an X.12 271 EB03.
"^DD",365.013,365.013,.01,"DT")
3020517
"^DD",365.013,365.013,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.013,365.013,.02,3)
Answer must be 1-75 characters in length
"^DD",365.013,365.013,.02,21,0)
^^1^1^3020612^
"^DD",365.013,365.013,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.013,365.013,.02,"DT")
3020517
"^DD",365.013,365.013,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.013,365.013,.03,21,0)
^^2^2^3020612^
"^DD",365.013,365.013,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.013,365.013,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.013,365.013,.03,"DT")
3020603
"^DD",365.014,365.014,0)
FIELD^^.03^3
"^DD",365.014,365.014,0,"DDA")
N
"^DD",365.014,365.014,0,"DT")
3020612
"^DD",365.014,365.014,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.014,365.014,0,"IX","B",365.014,.01)

"^DD",365.014,365.014,0,"NM","X12 271 INSURANCE TYPE")

"^DD",365.014,365.014,0,"PT",365.02,.05)

"^DD",365.014,365.014,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.014,365.014,.01,1,0)
^.1
"^DD",365.014,365.014,.01,1,1,0)
365.014^B
"^DD",365.014,365.014,.01,1,1,1)
S ^IBE(365.014,"B",$E(X,1,30),DA)=""
"^DD",365.014,365.014,.01,1,1,2)
K ^IBE(365.014,"B",$E(X,1,30),DA)
"^DD",365.014,365.014,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.014,365.014,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.014,365.014,.01,3)
Answer must be 1-2 characters in length
"^DD",365.014,365.014,.01,21,0)
^^1^1^3020612^
"^DD",365.014,365.014,.01,21,1,0)
This is the code value sent in an X.12 271 EB04.
"^DD",365.014,365.014,.01,"DT")
3020517
"^DD",365.014,365.014,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>175!($L(X)<1) X
"^DD",365.014,365.014,.02,3)
Answer must be 1-175 characters in length.
"^DD",365.014,365.014,.02,21,0)
^^1^1^3020612^
"^DD",365.014,365.014,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.014,365.014,.02,"DT")
3020612
"^DD",365.014,365.014,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.014,365.014,.03,21,0)
^^2^2^3020612^
"^DD",365.014,365.014,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.014,365.014,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.014,365.014,.03,"DT")
3020603
"^DD",365.015,365.015,0)
FIELD^^.03^3
"^DD",365.015,365.015,0,"DDA")
N
"^DD",365.015,365.015,0,"DT")
3020603
"^DD",365.015,365.015,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.015,365.015,0,"IX","B",365.015,.01)

"^DD",365.015,365.015,0,"NM","X12 271 TIME PERIOD QUALIFIER")

"^DD",365.015,365.015,0,"PT",365.02,.07)

"^DD",365.015,365.015,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.015,365.015,.01,1,0)
^.1
"^DD",365.015,365.015,.01,1,1,0)
365.015^B
"^DD",365.015,365.015,.01,1,1,1)
S ^IBE(365.015,"B",$E(X,1,30),DA)=""
"^DD",365.015,365.015,.01,1,1,2)
K ^IBE(365.015,"B",$E(X,1,30),DA)
"^DD",365.015,365.015,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.015,365.015,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.015,365.015,.01,3)
Answer must be 1-2 characters in length
"^DD",365.015,365.015,.01,21,0)
^.001^1^1^3030320^^
"^DD",365.015,365.015,.01,21,1,0)
This is the code value sent in an X.12 271 EB06.
"^DD",365.015,365.015,.01,"DT")
3020517
"^DD",365.015,365.015,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.015,365.015,.02,3)
Answer must be 1-30 characters in length
"^DD",365.015,365.015,.02,21,0)
^^1^1^3020612^
"^DD",365.015,365.015,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.015,365.015,.02,"DT")
3020517
"^DD",365.015,365.015,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.015,365.015,.03,21,0)
^^2^2^3020612^
"^DD",365.015,365.015,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.015,365.015,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.015,365.015,.03,"DT")
3020603
"^DD",365.016,365.016,0)
FIELD^^.03^3
"^DD",365.016,365.016,0,"DDA")
N
"^DD",365.016,365.016,0,"DT")
3020603
"^DD",365.016,365.016,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.016,365.016,0,"IX","B",365.016,.01)

"^DD",365.016,365.016,0,"NM","X12 271 QUANTITY QUALIFIER")

"^DD",365.016,365.016,0,"PT",365.02,.1)

"^DD",365.016,365.016,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.016,365.016,.01,1,0)
^.1
"^DD",365.016,365.016,.01,1,1,0)
365.016^B
"^DD",365.016,365.016,.01,1,1,1)
S ^IBE(365.016,"B",$E(X,1,30),DA)=""
"^DD",365.016,365.016,.01,1,1,2)
K ^IBE(365.016,"B",$E(X,1,30),DA)
"^DD",365.016,365.016,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.016,365.016,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.016,365.016,.01,3)
Answer must be 1-2 characters in length
"^DD",365.016,365.016,.01,21,0)
^.001^1^1^3030318^^^^
"^DD",365.016,365.016,.01,21,1,0)
This is the code value sent in an X.12 271 EB09.
"^DD",365.016,365.016,.01,"DT")
3020517
"^DD",365.016,365.016,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.016,365.016,.02,3)
Answer must be 1-30 characters in length
"^DD",365.016,365.016,.02,21,0)
^^1^1^3020612^
"^DD",365.016,365.016,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.016,365.016,.02,"DT")
3020517
"^DD",365.016,365.016,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.016,365.016,.03,21,0)
^^2^2^3020612^
"^DD",365.016,365.016,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.016,365.016,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.016,365.016,.03,"DT")
3020603
"^DD",365.017,365.017,0)
FIELD^^.03^3
"^DD",365.017,365.017,0,"DDA")
N
"^DD",365.017,365.017,0,"DT")
3020603
"^DD",365.017,365.017,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.017,365.017,0,"IX","B",365.017,.01)

"^DD",365.017,365.017,0,"NM","X12 271 ERROR CONDITION")

"^DD",365.017,365.017,0,"PT",365,1.14)

"^DD",365.017,365.017,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",365.017,365.017,.01,1,0)
^.1
"^DD",365.017,365.017,.01,1,1,0)
365.017^B
"^DD",365.017,365.017,.01,1,1,1)
S ^IBE(365.017,"B",$E(X,1,30),DA)=""
"^DD",365.017,365.017,.01,1,1,2)
K ^IBE(365.017,"B",$E(X,1,30),DA)
"^DD",365.017,365.017,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.017,365.017,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.017,365.017,.01,3)
Answer must be 1-2 characters in length.
"^DD",365.017,365.017,.01,21,0)
^^1^1^3020612^
"^DD",365.017,365.017,.01,21,1,0)
This is the code value sent in an X.12 271 AAA03 as an error.
"^DD",365.017,365.017,.01,"DT")
3020517
"^DD",365.017,365.017,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.017,365.017,.02,3)
Answer must be 1-75 characters in length
"^DD",365.017,365.017,.02,21,0)
^^1^1^3020612^
"^DD",365.017,365.017,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.017,365.017,.02,"DT")
3020517
"^DD",365.017,365.017,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.017,365.017,.03,21,0)
^^2^2^3020612^
"^DD",365.017,365.017,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.017,365.017,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.017,365.017,.03,"DT")
3020603
"^DD",365.018,365.018,0)
FIELD^^.03^3
"^DD",365.018,365.018,0,"DDA")
N
"^DD",365.018,365.018,0,"DT")
3020603
"^DD",365.018,365.018,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.018,365.018,0,"IX","B",365.018,.01)

"^DD",365.018,365.018,0,"NM","X12 271 ERROR ACTION")

"^DD",365.018,365.018,0,"PT",365,1.15)

"^DD",365.018,365.018,.01,0)
CODE^RF^^0;1^K:$L(X)>1!($L(X)<1)!'(X'?1P.E) X
"^DD",365.018,365.018,.01,1,0)
^.1
"^DD",365.018,365.018,.01,1,1,0)
365.018^B
"^DD",365.018,365.018,.01,1,1,1)
S ^IBE(365.018,"B",$E(X,1,30),DA)=""
"^DD",365.018,365.018,.01,1,1,2)
K ^IBE(365.018,"B",$E(X,1,30),DA)
"^DD",365.018,365.018,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.018,365.018,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.018,365.018,.01,3)
Answer must be 1 character in length.
"^DD",365.018,365.018,.01,21,0)
^^1^1^3020612^
"^DD",365.018,365.018,.01,21,1,0)
This is the code value sent in an X.12 271 AAA05.
"^DD",365.018,365.018,.01,"DT")
3020517
"^DD",365.018,365.018,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.018,365.018,.02,3)
Answer must be 1-75 characters in length
"^DD",365.018,365.018,.02,21,0)
^^1^1^3020612^
"^DD",365.018,365.018,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.018,365.018,.02,"DT")
3020522
"^DD",365.018,365.018,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.018,365.018,.03,21,0)
^^2^2^3020612^
"^DD",365.018,365.018,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.018,365.018,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.018,365.018,.03,"DT")
3020603
"^DD",365.021,365.021,0)
FIELD^^.03^3
"^DD",365.021,365.021,0,"DDA")
N
"^DD",365.021,365.021,0,"DT")
3020603
"^DD",365.021,365.021,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.021,365.021,0,"IX","B",365.021,.01)

"^DD",365.021,365.021,0,"NM","X12 271 CONTACT QUALIFIER")

"^DD",365.021,365.021,0,"PT",365.03,.02)

"^DD",365.021,365.021,0,"PT",365.03,.04)

"^DD",365.021,365.021,0,"PT",365.03,.06)

"^DD",365.021,365.021,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",365.021,365.021,.01,1,0)
^.1
"^DD",365.021,365.021,.01,1,1,0)
365.021^B
"^DD",365.021,365.021,.01,1,1,1)
S ^IBE(365.021,"B",$E(X,1,30),DA)=""
"^DD",365.021,365.021,.01,1,1,2)
K ^IBE(365.021,"B",$E(X,1,30),DA)
"^DD",365.021,365.021,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.021,365.021,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.021,365.021,.01,3)
Answer must be 2 characters in length.
"^DD",365.021,365.021,.01,21,0)
^^1^1^3020612^
"^DD",365.021,365.021,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.021,365.021,.01,"DT")
3020517
"^DD",365.021,365.021,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.021,365.021,.02,3)
Answer must be 1-30 characters in length.
"^DD",365.021,365.021,.02,21,0)
^^1^1^3020612^
"^DD",365.021,365.021,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.021,365.021,.02,"DT")
3020517
"^DD",365.021,365.021,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.021,365.021,.03,21,0)
^^2^2^3020612^
"^DD",365.021,365.021,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.021,365.021,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.021,365.021,.03,"DT")
3020603
"^DD",365.1,365.1,0)
FIELD^^2^23
"^DD",365.1,365.1,0,"DDA")
N
"^DD",365.1,365.1,0,"DT")
3021025
"^DD",365.1,365.1,0,"IX","AC",365.1,.04)

"^DD",365.1,365.1,0,"IX","AE",365.1,.06)

"^DD",365.1,365.1,0,"IX","B",365.1,.01)

"^DD",365.1,365.1,0,"IX","C",365.16,.02)

"^DD",365.1,365.1,0,"IX","D",365.1,.05)

"^DD",365.1,365.1,0,"IX","E",365.1,.02)

"^DD",365.1,365.1,0,"IX","F",365.1,.03)

"^DD",365.1,365.1,0,"NM","IIV TRANSMISSION QUEUE")

"^DD",365.1,365.1,0,"PT",365,.05)

"^DD",365.1,365.1,.01,0)
TRANSACTION NUMBER^RNJ9,0^^0;1^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",365.1,365.1,.01,1,0)
^.1
"^DD",365.1,365.1,.01,1,1,0)
365.1^B
"^DD",365.1,365.1,.01,1,1,1)
S ^IBCN(365.1,"B",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.01,1,1,2)
K ^IBCN(365.1,"B",$E(X,1,30),DA)
"^DD",365.1,365.1,.01,3)
Type a Number between 1 and 999999999
"^DD",365.1,365.1,.01,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.01,21,1,0)
This field is a sequential number used to uniquely identify a
"^DD",365.1,365.1,.01,21,2,0)
record when creating an entry in this file.
"^DD",365.1,365.1,.01,"DT")
3020517
"^DD",365.1,365.1,.02,0)
PATIENT^P2'^DPT(^0;2^Q
"^DD",365.1,365.1,.02,1,0)
^.1
"^DD",365.1,365.1,.02,1,1,0)
365.1^E
"^DD",365.1,365.1,.02,1,1,1)
S ^IBCN(365.1,"E",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.02,1,1,2)
K ^IBCN(365.1,"E",$E(X,1,30),DA)
"^DD",365.1,365.1,.02,1,1,"DT")
3020723
"^DD",365.1,365.1,.02,21,0)
^.001^2^2^3030415^^
"^DD",365.1,365.1,.02,21,1,0)
This is the patient who needs to have insurance identification or
"^DD",365.1,365.1,.02,21,2,0)
verification performed.
"^DD",365.1,365.1,.02,"DT")
3021023
"^DD",365.1,365.1,.03,0)
PAYER^P365.12'^IBE(365.12,^0;3^Q
"^DD",365.1,365.1,.03,1,0)
^.1
"^DD",365.1,365.1,.03,1,1,0)
365.1^F
"^DD",365.1,365.1,.03,1,1,1)
S ^IBCN(365.1,"F",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.03,1,1,2)
K ^IBCN(365.1,"F",$E(X,1,30),DA)
"^DD",365.1,365.1,.03,1,1,"%D",0)
^^1^1^3020918^
"^DD",365.1,365.1,.03,1,1,"%D",1,0)
For testing purposes only
"^DD",365.1,365.1,.03,1,1,"DT")
3020918
"^DD",365.1,365.1,.03,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.03,21,1,0)
This is the Payer to whom the insurance identification or
"^DD",365.1,365.1,.03,21,2,0)
verification is to be submitted to.
"^DD",365.1,365.1,.03,"DT")
3021023
"^DD",365.1,365.1,.04,0)
TRANSMISSION STATUS^P365.14'^IBE(365.14,^0;4^Q
"^DD",365.1,365.1,.04,1,0)
^.1
"^DD",365.1,365.1,.04,1,1,0)
365.1^AC
"^DD",365.1,365.1,.04,1,1,1)
S ^IBCN(365.1,"AC",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.04,1,1,2)
K ^IBCN(365.1,"AC",$E(X,1,30),DA)
"^DD",365.1,365.1,.04,1,1,"%D",0)
^^2^2^3020607^
"^DD",365.1,365.1,.04,1,1,"%D",1,0)
This is a standard cross-reference by the Transmission Status.  It
"^DD",365.1,365.1,.04,1,1,"%D",2,0)
will be used to determined records being processed.
"^DD",365.1,365.1,.04,1,1,"DT")
3020607
"^DD",365.1,365.1,.04,21,0)
^.001^1^1^3030409^^
"^DD",365.1,365.1,.04,21,1,0)
This is the current status of a transmission record.
"^DD",365.1,365.1,.04,"DT")
3030409
"^DD",365.1,365.1,.05,0)
BUFFER ENTRY^P355.33'^IBA(355.33,^0;5^Q
"^DD",365.1,365.1,.05,1,0)
^.1
"^DD",365.1,365.1,.05,1,1,0)
365.1^D
"^DD",365.1,365.1,.05,1,1,1)
S ^IBCN(365.1,"D",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.05,1,1,2)
K ^IBCN(365.1,"D",$E(X,1,30),DA)
"^DD",365.1,365.1,.05,1,1,"DT")
3020710
"^DD",365.1,365.1,.05,21,0)
^^3^3^3020612^
"^DD",365.1,365.1,.05,21,1,0)
This field will be populated if either the transmission record
"^DD",365.1,365.1,.05,21,2,0)
was created from a buffer entry or if a problem exists with
"^DD",365.1,365.1,.05,21,3,0)
the transmission record, a buffer entry will be created.
"^DD",365.1,365.1,.05,"DT")
3020710
"^DD",365.1,365.1,.06,0)
DATE/TIME CREATED^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365.1,365.1,.06,1,0)
^.1
"^DD",365.1,365.1,.06,1,1,0)
365.1^AE
"^DD",365.1,365.1,.06,1,1,1)
S ^IBCN(365.1,"AE",$E(X,1,30),DA)=""
"^DD",365.1,365.1,.06,1,1,2)
K ^IBCN(365.1,"AE",$E(X,1,30),DA)
"^DD",365.1,365.1,.06,1,1,"%D",0)
^^2^2^3020711^
"^DD",365.1,365.1,.06,1,1,"%D",1,0)
This cross reference by the date/time created will be used during
"^DD",365.1,365.1,.06,1,1,"%D",2,0)
the purging process.
"^DD",365.1,365.1,.06,1,1,"DT")
3020711
"^DD",365.1,365.1,.06,21,0)
^.001^1^1^3020612^^
"^DD",365.1,365.1,.06,21,1,0)
This is the date and time that the transmission record was created.
"^DD",365.1,365.1,.06,"DT")
3020913
"^DD",365.1,365.1,.07,0)
NO. OF TRANSMISSIONS^NJ2,0^^0;7^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",365.1,365.1,.07,3)
Type a Number between 1 and 99
"^DD",365.1,365.1,.07,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.07,21,1,0)
This field is a count of how many HL7 messages have been
"^DD",365.1,365.1,.07,21,2,0)
generated and transmitted.
"^DD",365.1,365.1,.07,"DT")
3020517
"^DD",365.1,365.1,.08,0)
NO. OF RETRIES^NJ2,0^^0;8^K:+X'=X!(X>10)!(X<0)!(X?.E1"."1N.N) X
"^DD",365.1,365.1,.08,3)
Type a Number between 0 and 10
"^DD",365.1,365.1,.08,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.08,21,1,0)
This field contains the number of retry messages that have
"^DD",365.1,365.1,.08,21,2,0)
been created an re-transmitted.
"^DD",365.1,365.1,.08,"DT")
3020517
"^DD",365.1,365.1,.09,0)
DATE OF FUTURE TRANSMISSION^D^^0;9^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",365.1,365.1,.09,3)
(No range limit on date)
"^DD",365.1,365.1,.09,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.09,21,1,0)
This field contains the date that if the transmission record
"^DD",365.1,365.1,.09,21,2,0)
status is "hold" that the record should be resent.
"^DD",365.1,365.1,.09,"DT")
3020805
"^DD",365.1,365.1,.1,0)
WHICH EXTRACT^S^1:Buffer;2:Appt;3:Nonverified;4:No Insurance;^0;10^Q
"^DD",365.1,365.1,.1,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.1,21,1,0)
This field identifies which data extract that the transmission
"^DD",365.1,365.1,.1,21,2,0)
record was generated from.
"^DD",365.1,365.1,.1,"DT")
3020517
"^DD",365.1,365.1,.11,0)
QUERY FLAG^S^I:Identification;V:Verification;^0;11^Q
"^DD",365.1,365.1,.11,21,0)
^^4^4^3020612^
"^DD",365.1,365.1,.11,21,1,0)
This field identifies whether the transmission record is an
"^DD",365.1,365.1,.11,21,2,0)
identification or a verification record.  Identification records
"^DD",365.1,365.1,.11,21,3,0)
will be checked against the National Insurance Cache to
"^DD",365.1,365.1,.11,21,4,0)
identify any insurance.
"^DD",365.1,365.1,.11,"DT")
3020517
"^DD",365.1,365.1,.12,0)
SERVICE DATE^D^^0;12^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",365.1,365.1,.12,21,0)
^^2^2^3020612^
"^DD",365.1,365.1,.12,21,1,0)
This is the date that was determined by the system to submit to
"^DD",365.1,365.1,.12,21,2,0)
the Payer as the date that service was performed.
"^DD",365.1,365.1,.12,"DT")
3021023
"^DD",365.1,365.1,.13,0)
INSUR RECORD IEN^NJ3,0^^0;13^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1.N) X
"^DD",365.1,365.1,.13,3)
Type a number between 1 and 999, 0 Decimal Digits
"^DD",365.1,365.1,.13,21,0)
^^4^4^3020618^
"^DD",365.1,365.1,.13,21,1,0)
This field is the IEN of the insurance record which the data
"^DD",365.1,365.1,.13,21,2,0)
extract used to determine that a valid payer record was to be
"^DD",365.1,365.1,.13,21,3,0)
placed in the Transmission Queue file.  This is used to help
"^DD",365.1,365.1,.13,21,4,0)
retrieve important information for the HL7 message.
"^DD",365.1,365.1,.13,"DT")
3020702
"^DD",365.1,365.1,.14,0)
OVERRIDE FRESHNESS FLAG^S^1:YES;0:NO;^0;14^Q
"^DD",365.1,365.1,.14,3)
Enter Yes to force an electronic transmission of this entry.
"^DD",365.1,365.1,.14,21,0)
^^5^5^3020702^
"^DD",365.1,365.1,.14,21,1,0)
The presence of this flag will alert the process that
"^DD",365.1,365.1,.14,21,2,0)
electronically transmits the insurance verification request,
"^DD",365.1,365.1,.14,21,3,0)
that this entry should get transmitted to the Payer - 
"^DD",365.1,365.1,.14,21,4,0)
bypassing the National Insurance Cache.  This is regardless
"^DD",365.1,365.1,.14,21,5,0)
of the freshness date or of any other data elements.
"^DD",365.1,365.1,.14,"DT")
3020702
"^DD",365.1,365.1,.15,0)
STATUS DATE^D^^0;15^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",365.1,365.1,.15,3)
(No range limit on date)
"^DD",365.1,365.1,.15,21,0)
^.001^1^1^3020805^^
"^DD",365.1,365.1,.15,21,1,0)
This is the date/time that the status field was changed.
"^DD",365.1,365.1,.15,"DT")
3020805
"^DD",365.1,365.1,.16,0)
HL7 SUBSCRIBER ID FIELD^F^^0;16^K:$L(X)>20!($L(X)<1) X
"^DD",365.1,365.1,.16,3)
Answer must be 1-20 characters in length.
"^DD",365.1,365.1,.16,21,0)
^^3^3^3021002^
"^DD",365.1,365.1,.16,21,1,0)
This is the data that will be used to populate the Subscriber ID field in 
"^DD",365.1,365.1,.16,21,2,0)
the HL7 message for the electronic Insurance Identification and 
"^DD",365.1,365.1,.16,21,3,0)
Verification project.
"^DD",365.1,365.1,.16,"DT")
3021016
"^DD",365.1,365.1,.17,0)
FRESHNESS DATE^D^^0;17^S %DT="E" D ^%DT S X=Y K:Y<1 X
"^DD",365.1,365.1,.17,3)
Enter valid date.
"^DD",365.1,365.1,.17,"DT")
3021010
"^DD",365.1,365.1,.18,0)
PASS BUFFER?^S^1:Yes;0:No;^0;18^Q
"^DD",365.1,365.1,.18,21,0)
^^2^2^3021025^
"^DD",365.1,365.1,.18,21,1,0)
This field is a flag on whether to pass the Buffer IEN on to the
"^DD",365.1,365.1,.18,21,2,0)
Response file.
"^DD",365.1,365.1,.18,"DT")
3021025
"^DD",365.1,365.1,1.02,0)
ORIGINAL INSUR CO NAME^F^^1;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.1,365.1,1.02,3)
Answer must be 1-30 characters in length.
"^DD",365.1,365.1,1.02,21,0)
^^3^3^3020702^
"^DD",365.1,365.1,1.02,21,1,0)
If the transmission record is created from an Insurance Buffer
"^DD",365.1,365.1,1.02,21,2,0)
entry, this is the data value of the equivalent field at time
"^DD",365.1,365.1,1.02,21,3,0)
of creation.
"^DD",365.1,365.1,1.02,"DT")
3020702
"^DD",365.1,365.1,1.03,0)
ORIGINAL GROUP NUMBER^F^^1;3^K:$L(X)>17!($L(X)<1) X
"^DD",365.1,365.1,1.03,3)
Answer must be 1-17 characters in length.
"^DD",365.1,365.1,1.03,21,0)
^^3^3^3020702^
"^DD",365.1,365.1,1.03,21,1,0)
If the transmission record is created from an Insurance Buffer
"^DD",365.1,365.1,1.03,21,2,0)
entry, this is the data value of the equivalent field at time
"^DD",365.1,365.1,1.03,21,3,0)
of creation.
"^DD",365.1,365.1,1.03,"DT")
3020702
"^DD",365.1,365.1,1.04,0)
ORIGINAL GROUP NAME^F^^1;4^K:$L(X)>20!($L(X)<1) X
"^DD",365.1,365.1,1.04,3)
Answer must be 1-20 characters in length.
"^DD",365.1,365.1,1.04,21,0)
^^3^3^3020612^
"^DD",365.1,365.1,1.04,21,1,0)
If the transmission record is created from an Insurance Buffer
"^DD",365.1,365.1,1.04,21,2,0)
entry, this is the data value of the equivalent field at time
"^DD",365.1,365.1,1.04,21,3,0)
of creation.
"^DD",365.1,365.1,1.04,"DT")
3020702
"^DD",365.1,365.1,1.05,0)
ORIGINAL SUBSCRIBER ID^F^^1;5^K:$L(X)>20!($L(X)<1) X
"^DD",365.1,365.1,1.05,3)
Answer must be 1-20 characters in length.
"^DD",365.1,365.1,1.05,21,0)
^^3^3^3020702^
"^DD",365.1,365.1,1.05,21,1,0)
If the transmission record is created from an Insurance Buffer
"^DD",365.1,365.1,1.05,21,2,0)
entry, this is the data value of the equivalent field at time
"^DD",365.1,365.1,1.05,21,3,0)
of creation.
"^DD",365.1,365.1,1.05,"DT")
3020702
"^DD",365.1,365.1,2,0)
HL7 MESSAGES^365.16D^^2;0
"^DD",365.1,365.1,2,21,0)
^.001^2^2^3020612^^
"^DD",365.1,365.1,2,21,1,0)
This is a record of all HL7 messages generated for a transmission
"^DD",365.1,365.1,2,21,2,0)
record.
"^DD",365.1,365.16,0)
HL7 MESSAGES SUB-FIELD^^.03^3
"^DD",365.1,365.16,0,"DT")
3020603
"^DD",365.1,365.16,0,"IX","B",365.16,.01)

"^DD",365.1,365.16,0,"NM","HL7 MESSAGES")

"^DD",365.1,365.16,0,"UP")
365.1
"^DD",365.1,365.16,.01,0)
HL7 DATE/TIME CREATED^MD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365.1,365.16,.01,1,0)
^.1
"^DD",365.1,365.16,.01,1,1,0)
365.16^B
"^DD",365.1,365.16,.01,1,1,1)
S ^IBCN(365.1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",365.1,365.16,.01,1,1,2)
K ^IBCN(365.1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",365.1,365.16,.01,21,0)
^^1^1^3020612^
"^DD",365.1,365.16,.01,21,1,0)
This is the date and time that the HL7 message was created.
"^DD",365.1,365.16,.01,"DT")
3020603
"^DD",365.1,365.16,.02,0)
MESSAGE CONTROL ID^F^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",365.1,365.16,.02,1,0)
^.1
"^DD",365.1,365.16,.02,1,1,0)
365.1^C
"^DD",365.1,365.16,.02,1,1,1)
S ^IBCN(365.1,"C",$E(X,1,30),DA(1),DA)=""
"^DD",365.1,365.16,.02,1,1,2)
K ^IBCN(365.1,"C",$E(X,1,30),DA(1),DA)
"^DD",365.1,365.16,.02,1,1,"%D",0)
^^3^3^3020607^
"^DD",365.1,365.16,.02,1,1,"%D",1,0)
This is a standard FileMan cross-reference.  It is by the HL7
"^DD",365.1,365.16,.02,1,1,"%D",2,0)
message control ID and since that is a multiple, the cross-reference
"^DD",365.1,365.16,.02,1,1,"%D",3,0)
is by the entire file.
"^DD",365.1,365.16,.02,1,1,"DT")
3020607
"^DD",365.1,365.16,.02,3)
Answer must be 1-20 characters in length.
"^DD",365.1,365.16,.02,21,0)
^^2^2^3020612^
"^DD",365.1,365.16,.02,21,1,0)
This is the message control ID number assigned by the HL7
"^DD",365.1,365.16,.02,21,2,0)
package when a message is created.
"^DD",365.1,365.16,.02,"DT")
3020607
"^DD",365.1,365.16,.03,0)
RESPONSE^P365'^IBCN(365,^0;3^Q
"^DD",365.1,365.16,.03,21,0)
^^3^3^3020612^
"^DD",365.1,365.16,.03,21,1,0)
When an HL7 message is created, a corresponding "stub" response
"^DD",365.1,365.16,.03,21,2,0)
message will be created at the same time.  This is a pointer to
"^DD",365.1,365.16,.03,21,3,0)
that "stub" message.
"^DD",365.1,365.16,.03,"DT")
3020603
"^DD",365.11,365.11,0)
FIELD^^.08^8
"^DD",365.11,365.11,0,"DDA")
N
"^DD",365.11,365.11,0,"DT")
3020429
"^DD",365.11,365.11,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.11,365.11,0,"IX","B",365.11,.01)

"^DD",365.11,365.11,0,"IX","C",365.11,.02)

"^DD",365.11,365.11,0,"NM","IIV AUTO MATCH")

"^DD",365.11,365.11,.01,0)
AUTO MATCH VALUE^RFX^^0;1^D ITAM^IBCNEAMI
"^DD",365.11,365.11,.01,.1)
ENTERED NAME
"^DD",365.11,365.11,.01,1,0)
^.1
"^DD",365.11,365.11,.01,1,1,0)
365.11^B
"^DD",365.11,365.11,.01,1,1,1)
S ^IBCN(365.11,"B",$E(X,1,30),DA)=""
"^DD",365.11,365.11,.01,1,1,2)
K ^IBCN(365.11,"B",$E(X,1,30),DA)
"^DD",365.11,365.11,.01,3)
Answer must be 3-30 characters in length
"^DD",365.11,365.11,.01,21,0)
^.001^8^8^3020604^^^
"^DD",365.11,365.11,.01,21,1,0)
This field is the entered name for the insurance company.  This
"^DD",365.11,365.11,.01,21,2,0)
value holds the 'incorrect' insurance company name which needs
"^DD",365.11,365.11,.01,21,3,0)
to get corrected and replaced with the valid insurance company
"^DD",365.11,365.11,.01,21,4,0)
name.  Typical values in this field will include common 
"^DD",365.11,365.11,.01,21,5,0)
spelling mistakes and incorrect insurance company names.  Also
"^DD",365.11,365.11,.01,21,6,0)
allowed here is the "*" wildcard character.  Any entry with a 
"^DD",365.11,365.11,.01,21,7,0)
wildcard character must also contain at least 4 non-wildcard
"^DD",365.11,365.11,.01,21,8,0)
characters.  Multiple asterisks are allowed here.
"^DD",365.11,365.11,.01,"DT")
3020606
"^DD",365.11,365.11,.02,0)
INSURANCE COMPANY NAME^RFX^^0;2^D ITIC^IBCNEAMI
"^DD",365.11,365.11,.02,1,0)
^.1
"^DD",365.11,365.11,.02,1,1,0)
365.11^C
"^DD",365.11,365.11,.02,1,1,1)
S ^IBCN(365.11,"C",$E(X,1,30),DA)=""
"^DD",365.11,365.11,.02,1,1,2)
K ^IBCN(365.11,"C",$E(X,1,30),DA)
"^DD",365.11,365.11,.02,1,1,"%D",0)
^^1^1^3020429^
"^DD",365.11,365.11,.02,1,1,"%D",1,0)
This is an index file by the insurance company name field.
"^DD",365.11,365.11,.02,1,1,"DT")
3020429
"^DD",365.11,365.11,.02,3)
Answer must be 3-30 characters in length
"^DD",365.11,365.11,.02,21,0)
^^4^4^3020708^
"^DD",365.11,365.11,.02,21,1,0)
This is the name of a valid insurance company from the Insurance
"^DD",365.11,365.11,.02,21,2,0)
Company file (file# 36).  The insurance company name entered here must
"^DD",365.11,365.11,.02,21,3,0)
be a currently valid company name meaning that the entry must be
"^DD",365.11,365.11,.02,21,4,0)
active and not scheduled for deletion.
"^DD",365.11,365.11,.02,"DT")
3020708
"^DD",365.11,365.11,.03,0)
DATE/TIME ENTERED^RD^^0;3^S %DT="ESTX" D ^%DT S X=Y K:DT>X X
"^DD",365.11,365.11,.03,3)
TYPE A DATE NOT EARLIER THAN CURRENT DATE
"^DD",365.11,365.11,.03,21,0)
^^2^2^3020612^
"^DD",365.11,365.11,.03,21,1,0)
This is the date and time that the auto match value was
"^DD",365.11,365.11,.03,21,2,0)
created.
"^DD",365.11,365.11,.03,"DT")
3020429
"^DD",365.11,365.11,.04,0)
ENTERED BY^RP200'^VA(200,^0;4^Q
"^DD",365.11,365.11,.04,21,0)
^^1^1^3020612^
"^DD",365.11,365.11,.04,21,1,0)
This is the user who created the auto match value.
"^DD",365.11,365.11,.04,"DT")
3020429
"^DD",365.11,365.11,.05,0)
DATE/TIME LAST EDITED^RD^^0;5^S %DT="ESTX" D ^%DT S X=Y K:DT>X X
"^DD",365.11,365.11,.05,3)
TYPE A DATE NOT EARLIER THAN CURRENT DATE
"^DD",365.11,365.11,.05,21,0)
^^2^2^3020612^
"^DD",365.11,365.11,.05,21,1,0)
This is the date and time that the auto match value
"^DD",365.11,365.11,.05,21,2,0)
was last edited.
"^DD",365.11,365.11,.05,"DT")
3020429
"^DD",365.11,365.11,.06,0)
LAST EDITED BY^RP200'^VA(200,^0;6^Q
"^DD",365.11,365.11,.06,21,0)
^^1^1^3020612^
"^DD",365.11,365.11,.06,21,1,0)
This is the user who last edited the auto match value.
"^DD",365.11,365.11,.06,"DT")
3020429
"^DD",365.11,365.11,.07,0)
ORIGINAL ENTERED VALUE^RF^^0;7^K:$L(X)>30!($L(X)<3) X
"^DD",365.11,365.11,.07,3)
Answer must be 3-30 characters in length
"^DD",365.11,365.11,.07,21,0)
^^4^4^3020429^
"^DD",365.11,365.11,.07,21,1,0)
This is the original value of the 'entered by' field.  The first
"^DD",365.11,365.11,.07,21,2,0)
time an entry is created, this value will get set and then no
"^DD",365.11,365.11,.07,21,3,0)
further updates to this field will be made.  This will provide
"^DD",365.11,365.11,.07,21,4,0)
the original value to this entry.
"^DD",365.11,365.11,.07,"DT")
3020429
"^DD",365.11,365.11,.08,0)
ORIGINAL INSURANCE COMPANY^RF^^0;8^K:$L(X)>30!($L(X)<3) X
"^DD",365.11,365.11,.08,3)
Answer must be 3-30 characters in length
"^DD",365.11,365.11,.08,21,0)
^.001^4^4^3020604^^
"^DD",365.11,365.11,.08,21,1,0)
This is the original, valid, correct insurance company name 
"^DD",365.11,365.11,.08,21,2,0)
at the time this entry was first created.  This is for auditing
"^DD",365.11,365.11,.08,21,3,0)
and historical tracking purposes only.  This field isn't 
"^DD",365.11,365.11,.08,21,4,0)
updated after the original data entry.
"^DD",365.11,365.11,.08,"DT")
3020429
"^DD",365.12,365.12,0)
FIELD^^.06^7
"^DD",365.12,365.12,0,"DDA")
N
"^DD",365.12,365.12,0,"DT")
3030307
"^DD",365.12,365.12,0,"IX","B",365.12,.01)

"^DD",365.12,365.12,0,"IX","C",365.12,.02)

"^DD",365.12,365.12,0,"NM","PAYER")

"^DD",365.12,365.12,0,"PT",36,3.1)

"^DD",365.12,365.12,0,"PT",365,.03)

"^DD",365.12,365.12,0,"PT",365.1,.03)

"^DD",365.12,365.12,.01,0)
PAYER NAME^RFX^^0;1^K:$L(X)>80!($L(X)<1) X
"^DD",365.12,365.12,.01,1,0)
^.1
"^DD",365.12,365.12,.01,1,1,0)
365.12^B
"^DD",365.12,365.12,.01,1,1,1)
S ^IBE(365.12,"B",$E(X,1,30),DA)=""
"^DD",365.12,365.12,.01,1,1,2)
K ^IBE(365.12,"B",$E(X,1,30),DA)
"^DD",365.12,365.12,.01,1,1,"%D",0)
^.101^1^1^3020612^^
"^DD",365.12,365.12,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.12,365.12,.01,3)
Enter the Insurance Payer Name. Answer must be 1-80 characters in length.
"^DD",365.12,365.12,.01,21,0)
^.001^1^1^3030422^^^^
"^DD",365.12,365.12,.01,21,1,0)
This is the Insurance Company Name as named for electronic interface.
"^DD",365.12,365.12,.01,"DT")
3020719
"^DD",365.12,365.12,.02,0)
VA NATIONAL ID^F^^0;2^K:$L(X)>10!($L(X)<1) X
"^DD",365.12,365.12,.02,1,0)
^.1
"^DD",365.12,365.12,.02,1,1,0)
365.12^C
"^DD",365.12,365.12,.02,1,1,1)
S ^IBE(365.12,"C",$E(X,1,30),DA)=""
"^DD",365.12,365.12,.02,1,1,2)
K ^IBE(365.12,"C",$E(X,1,30),DA)
"^DD",365.12,365.12,.02,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.12,365.12,.02,1,1,"%D",1,0)
Cross-reference by the ID assigned by the VA to each Payer.
"^DD",365.12,365.12,.02,1,1,"DT")
3020612
"^DD",365.12,365.12,.02,3)
Answer must be 1-10 characters in length.
"^DD",365.12,365.12,.02,21,0)
^.001^3^3^3020610^^^
"^DD",365.12,365.12,.02,21,1,0)
This field will be created from the list of payers from the
"^DD",365.12,365.12,.02,21,2,0)
Eligibility Communicator which will be used to uniquely identify
"^DD",365.12,365.12,.02,21,3,0)
the Insurance Payers.
"^DD",365.12,365.12,.02,"DT")
3020612
"^DD",365.12,365.12,.03,0)
CMS NATIONAL ID^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",365.12,365.12,.03,3)
Answer must be 1-20 characters in length.
"^DD",365.12,365.12,.03,21,0)
^.001^3^3^3020610^^^
"^DD",365.12,365.12,.03,21,1,0)
If and when the Centers for Medicare and Medicaid services determine
"^DD",365.12,365.12,.03,21,2,0)
what national payer id should be assigned, then this field will get
"^DD",365.12,365.12,.03,21,3,0)
updated with that ID.
"^DD",365.12,365.12,.03,"DT")
3020517
"^DD",365.12,365.12,.04,0)
DATE/TIME CREATED^RD^^0;4^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",365.12,365.12,.04,21,0)
^^1^1^3030110^
"^DD",365.12,365.12,.04,21,1,0)
DATE/TIME THAT THIS ENTRY WAS ADDED TO THE PAYER FILE.
"^DD",365.12,365.12,.04,"DT")
3030110
"^DD",365.12,365.12,.05,0)
EDI ID NUMBER - PROF^F^^0;5^K:$L(X)>30!($L(X)<1) X
"^DD",365.12,365.12,.05,3)
Answer must be 1-30 characters in length.
"^DD",365.12,365.12,.05,21,0)
^^2^2^3030110^
"^DD",365.12,365.12,.05,21,1,0)
This is the ID number used to identify the insurance company for 
"^DD",365.12,365.12,.05,21,2,0)
professional claim transmissions.
"^DD",365.12,365.12,.05,"DT")
3030110
"^DD",365.12,365.12,.06,0)
EDI ID NUMBER - INST^F^^0;6^K:$L(X)>30!($L(X)<1) X
"^DD",365.12,365.12,.06,3)
Answer must be 1-30 characters in length.
"^DD",365.12,365.12,.06,21,0)
^^2^2^3030110^
"^DD",365.12,365.12,.06,21,1,0)
This is the id number used to identify the insurance company for 
"^DD",365.12,365.12,.06,21,2,0)
institutional claim transmissions.
"^DD",365.12,365.12,.06,"DT")
3030110
"^DD",365.12,365.12,1,0)
APPLICATION^365.121P^^1;0
"^DD",365.12,365.121,0)
APPLICATION SUB-FIELD^^.15^15
"^DD",365.12,365.121,0,"DT")
3030307
"^DD",365.12,365.121,0,"IX","B",365.121,.01)

"^DD",365.12,365.121,0,"NM","APPLICATION")

"^DD",365.12,365.121,0,"UP")
365.12
"^DD",365.12,365.121,.01,0)
APPLICATION^MP365.13'^IBE(365.13,^0;1^Q
"^DD",365.12,365.121,.01,1,0)
^.1
"^DD",365.12,365.121,.01,1,1,0)
365.121^B
"^DD",365.12,365.121,.01,1,1,1)
S ^IBE(365.12,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",365.12,365.121,.01,1,1,2)
K ^IBE(365.12,DA(1),1,"B",$E(X,1,30),DA)
"^DD",365.12,365.121,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.12,365.121,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.12,365.121,.01,21,0)
^^2^2^3020604^
"^DD",365.12,365.121,.01,21,1,0)
This field identifies the specific application which may have
"^DD",365.12,365.121,.01,21,2,0)
an interface.
"^DD",365.12,365.121,.01,"DT")
3020517
"^DD",365.12,365.121,.02,0)
NATIONAL ACTIVE^S^0:Not Active;1:Active;^0;2^Q
"^DD",365.12,365.121,.02,21,0)
^^2^2^3020604^
"^DD",365.12,365.121,.02,21,1,0)
This field identifies whether a particular payer is set up and
"^DD",365.12,365.121,.02,21,2,0)
accepting data from the Eligibility Communicator for this application.
"^DD",365.12,365.121,.02,"DT")
3020517
"^DD",365.12,365.121,.03,0)
LOCAL ACTIVE^S^0:Not Active;1:Active;^0;3^Q
"^DD",365.12,365.121,.03,21,0)
^^2^2^3020604^
"^DD",365.12,365.121,.03,21,1,0)
This field identifies whether the local VA facility is allowing for
"^DD",365.12,365.121,.03,21,2,0)
electronic interface for this payer and application.
"^DD",365.12,365.121,.03,"DT")
3020517
"^DD",365.12,365.121,.04,0)
USER EDITED LOCAL^P200'^VA(200,^0;4^Q
"^DD",365.12,365.121,.04,3)

"^DD",365.12,365.121,.04,21,0)
^.001^1^1^3020604^^
"^DD",365.12,365.121,.04,21,1,0)
This is the user who last edited the local active switch.
"^DD",365.12,365.121,.04,"DT")
3020612
"^DD",365.12,365.121,.05,0)
DATE/TIME LOCAL EDITED^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365.12,365.121,.05,21,0)
^^2^2^3020604^
"^DD",365.12,365.121,.05,21,1,0)
This field indicates the date and time the local switch was
"^DD",365.12,365.121,.05,21,2,0)
last edited.
"^DD",365.12,365.121,.05,"DT")
3020517
"^DD",365.12,365.121,.06,0)
DATE/TIME NATIONAL EDITED^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",365.12,365.121,.06,21,0)
^^4^4^3030123^
"^DD",365.12,365.121,.06,21,1,0)
This field indicates the date and time that this payer
"^DD",365.12,365.121,.06,21,2,0)
application was last updated via EC.
"^DD",365.12,365.121,.06,"DT")
3030123
"^DD",365.12,365.121,.07,0)
AUTO-ACCEPT^S^1:YES;0:NO;^0;7^Q
"^DD",365.12,365.121,.07,21,0)
^.001^7^7^3030714^^^^
"^DD",365.12,365.121,.07,21,1,0)
This field indicates whether the site will automatically accept
"^DD",365.12,365.121,.07,21,2,0)
the incoming application information and file it into VISTA
"^DD",365.12,365.121,.07,21,3,0)
rather than storing the information in a temporary file for
"^DD",365.12,365.121,.07,21,4,0)
manual intervention.
"^DD",365.12,365.121,.07,21,5,0)
  
"^DD",365.12,365.121,.07,21,6,0)
For insurance identification and verification, this data will
"^DD",365.12,365.121,.07,21,7,0)
be stored in the Insurance Buffer file.
"^DD",365.12,365.121,.07,"DT")
3020612
"^DD",365.12,365.121,.08,0)
IDENT REQUIRES SUBSCRIBER ID^S^0:NO;1:YES;^0;8^Q
"^DD",365.12,365.121,.08,3)
Enter YES if the Payer requires the Subscriber ID for identification transactions, Enter NO otherwise.
"^DD",365.12,365.121,.08,21,0)
^^3^3^3030123^
"^DD",365.12,365.121,.08,21,1,0)
This flag is set by the Eligibility Communicator (EC).  It should not be 
"^DD",365.12,365.121,.08,21,2,0)
modified via FileMan.  The flag indicates whether or not a payer requires 
"^DD",365.12,365.121,.08,21,3,0)
a Subscriber ID for identification transactions.
"^DD",365.12,365.121,.08,"DT")
3030123
"^DD",365.12,365.121,.09,0)
USE SSN FOR SUBSCRIBER ID^S^0:NO;1:YES;^0;9^Q
"^DD",365.12,365.121,.09,3)
Enter 1 for Yes, if the Payer uses the patient's SSN as the Subscriber ID.  Enter 0 for No, otherwise.
"^DD",365.12,365.121,.09,21,0)
^^3^3^3030123^
"^DD",365.12,365.121,.09,21,1,0)
This flag is set by the Eligibility Communicator (EC).  It should 
"^DD",365.12,365.121,.09,21,2,0)
not be modified via FileMan.  The flag indicates whether or not a
"^DD",365.12,365.121,.09,21,3,0)
payer recognizes a patient's SSN as a valid Subscriber ID.
"^DD",365.12,365.121,.09,"DT")
3030123
"^DD",365.12,365.121,.1,0)
TRANSMIT SSN^S^0:NO;1:YES;^0;10^Q
"^DD",365.12,365.121,.1,3)
Enter YES if the patient's SSN should be transmitted for this payer application, Enter NO otherwise.
"^DD",365.12,365.121,.1,21,0)
^^3^3^3030123^
"^DD",365.12,365.121,.1,21,1,0)
This flag is set by the Eligibility Communicator (EC).  It should
"^DD",365.12,365.121,.1,21,2,0)
not be modified via FileMan.  The flag indicates whether or not a
"^DD",365.12,365.121,.1,21,3,0)
payer accepts a patient's SSN for transactions.
"^DD",365.12,365.121,.1,"DT")
3030123
"^DD",365.12,365.121,.11,0)
DEACTIVATED?^S^0:NO;1:YES;^0;11^Q
"^DD",365.12,365.121,.11,21,0)
^.001^5^5^3020919^^^
"^DD",365.12,365.121,.11,21,1,0)
This field is the flag which determines if a payer and application
"^DD",365.12,365.121,.11,21,2,0)
is no longer active.
"^DD",365.12,365.121,.11,21,3,0)
  
"^DD",365.12,365.121,.11,21,4,0)
This field will be applied by the EC.  Users should not modify
"^DD",365.12,365.121,.11,21,5,0)
this field.
"^DD",365.12,365.121,.11,"DT")
3020919
"^DD",365.12,365.121,.12,0)
DATE/TIME DEACTIVATED^D^^0;12^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",365.12,365.121,.12,21,0)
^^2^2^3020916^
"^DD",365.12,365.121,.12,21,1,0)
This is the date and time that the payer and application were
"^DD",365.12,365.121,.12,21,2,0)
deactivated.
"^DD",365.12,365.121,.12,"DT")
3020916
"^DD",365.12,365.121,.13,0)
DATE/TIME CREATED^D^^0;13^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",365.12,365.121,.13,3)

"^DD",365.12,365.121,.13,21,0)
^^2^2^3030123^
"^DD",365.12,365.121,.13,21,1,0)
This is the date/time that this application was created.
"^DD",365.12,365.121,.13,21,2,0)
This field should not be edited through FileMan.
"^DD",365.12,365.121,.13,"DT")
3030123
"^DD",365.12,365.121,.14,0)
FUTURE SERVICE DAYS^NJ4,0^^0;14^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X
"^DD",365.12,365.121,.14,3)
Type a Number between 0 and 9999
"^DD",365.12,365.121,.14,21,0)
^.001^2^2^3030307^^
"^DD",365.12,365.121,.14,21,1,0)
A service date is acceptable to the payer if the service date is not
"^DD",365.12,365.121,.14,21,2,0)
greater than "T+" this value.
"^DD",365.12,365.121,.14,"DT")
3030307
"^DD",365.12,365.121,.15,0)
PAST SERVICE DAYS^NJ4,0^^0;15^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X
"^DD",365.12,365.121,.15,3)
Type a Number between 0 and 9999
"^DD",365.12,365.121,.15,21,0)
^.001^2^2^3030307^^
"^DD",365.12,365.121,.15,21,1,0)
A service date is acceptable to the payer if the service date is not less
"^DD",365.12,365.121,.15,21,2,0)
than "T-" this value.
"^DD",365.12,365.121,.15,"DT")
3030307
"^DD",365.13,365.13,0)
FIELD^^.01^1
"^DD",365.13,365.13,0,"DDA")
N
"^DD",365.13,365.13,0,"IX","B",365.13,.01)

"^DD",365.13,365.13,0,"NM","PAYER APPLICATION")

"^DD",365.13,365.13,0,"PT",365.121,.01)

"^DD",365.13,365.13,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",365.13,365.13,.01,1,0)
^.1
"^DD",365.13,365.13,.01,1,1,0)
365.13^B
"^DD",365.13,365.13,.01,1,1,1)
S ^IBE(365.13,"B",$E(X,1,30),DA)=""
"^DD",365.13,365.13,.01,1,1,2)
K ^IBE(365.13,"B",$E(X,1,30),DA)
"^DD",365.13,365.13,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.13,365.13,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.13,365.13,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",365.13,365.13,.01,21,0)
^^4^4^3020604^
"^DD",365.13,365.13,.01,21,1,0)
This field identifies any application which may have an electronic
"^DD",365.13,365.13,.01,21,2,0)
interface.
"^DD",365.13,365.13,.01,21,3,0)
  
"^DD",365.13,365.13,.01,21,4,0)
e.g. Pharmacy, Insurance, Claims, etc.
"^DD",365.14,365.14,0)
FIELD^^.01^1
"^DD",365.14,365.14,0,"DDA")
N
"^DD",365.14,365.14,0,"DT")
3020612
"^DD",365.14,365.14,0,"IX","B",365.14,.01)

"^DD",365.14,365.14,0,"NM","IIV TRANSMISSION STATUS")

"^DD",365.14,365.14,0,"PT",365,.06)

"^DD",365.14,365.14,0,"PT",365.1,.04)

"^DD",365.14,365.14,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",365.14,365.14,.01,1,0)
^.1
"^DD",365.14,365.14,.01,1,1,0)
365.14^B
"^DD",365.14,365.14,.01,1,1,1)
S ^IBE(365.14,"B",$E(X,1,30),DA)=""
"^DD",365.14,365.14,.01,1,1,2)
K ^IBE(365.14,"B",$E(X,1,30),DA)
"^DD",365.14,365.14,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.14,365.14,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.14,365.14,.01,3)
Answer must be 3-30 characters in length.
"^DD",365.14,365.14,.01,21,0)
^^1^1^3020612^
"^DD",365.14,365.14,.01,21,1,0)
This field is the full name of the transmission status.
"^DD",365.14,365.14,.01,"DT")
3020612
"^DD",365.15,365.15,0)
FIELD^^.03^4
"^DD",365.15,365.15,0,"DDA")
N
"^DD",365.15,365.15,0,"DT")
3030409
"^DD",365.15,365.15,0,"IX","B",365.15,.01)

"^DD",365.15,365.15,0,"NM","IIV STATUS TABLE")

"^DD",365.15,365.15,0,"PT",355.33,.12)

"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$S($E(Y,1)="D":"Response Received, Coverage Denied",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Coverage Acknowledged",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",1:"")
"^DD",365.15,365.15,.01,2.1)
S Y=$S($E(Y,1)="D":"Response Received, Coverage Denied",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Coverage Acknowledged",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",1:"")
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^^5^5^3030409^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3030411
"^DD",365.15,365.15,.02,0)
ASCII VALUE FOR IIV STATUS^NJ3,0^^0;2^K:+X'=X!(X>126)!(X<32)!(X?.E1"."1.N) X
"^DD",365.15,365.15,.02,3)
Type a number between 32 and 126, 0 Decimal Digits
"^DD",365.15,365.15,.02,21,0)
^^5^5^3030409^
"^DD",365.15,365.15,.02,21,1,0)
This field is the ASCII number representation for the character
"^DD",365.15,365.15,.02,21,2,0)
which should be displayed in the IIV status column in the insurance 
"^DD",365.15,365.15,.02,21,3,0)
buffer list for this entry.  The ASCII value is being stored instead of 
"^DD",365.15,365.15,.02,21,4,0)
the character itself because of the issues involved with storing the "?" 
"^DD",365.15,365.15,.02,21,5,0)
character as a valid symbol.
"^DD",365.15,365.15,.02,"DT")
3030409
"^DD",365.15,365.15,.03,0)
EXPAND ENTRY ACTION^S^1:EE Update is Allowed;0:EE Update is Not Allowed;^0;3^Q
"^DD",365.15,365.15,.03,3)
Can the Expand Entry action overwrite this IIV status?
"^DD",365.15,365.15,.03,21,0)
^^6^6^3030409^
"^DD",365.15,365.15,.03,21,1,0)
This field will determine whether or not the IIV status associated with
"^DD",365.15,365.15,.03,21,2,0)
a buffer entry may get overwritten by the Expand Entry action in
"^DD",365.15,365.15,.03,21,3,0)
the Insurance Buffer application.  Some IIV statuses should stay as they
"^DD",365.15,365.15,.03,21,4,0)
are and not get updated by Expand Entry and other symbols should
"^DD",365.15,365.15,.03,21,5,0)
get updated so the user knows the current status of the buffer entry
"^DD",365.15,365.15,.03,21,6,0)
with regard to the IIV process.
"^DD",365.15,365.15,.03,"DT")
3030409
"^DD",365.15,365.15,1,0)
DESCRIPTION^365.152^^1;0
"^DD",365.15,365.15,1,21,0)
^^3^3^3030409^
"^DD",365.15,365.15,1,21,1,0)
This is the explanation of what the IIV status means.  This
"^DD",365.15,365.15,1,21,2,0)
description will appear in the Expand Entry action of the 
"^DD",365.15,365.15,1,21,3,0)
Insurance Buffer application.
"^DD",365.15,365.151,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.151,0,"DT")
3020603
"^DD",365.15,365.151,0,"NM","DESCRIPTION")

"^DD",365.15,365.151,0,"UP")
365.15
"^DD",365.15,365.151,.01,0)
DESCRIPTION^W^^0;1
"^DD",365.15,365.151,.01,21,0)
^^4^4^3020603^
"^DD",365.15,365.151,.01,21,1,0)
This is the explanation of what the symbol stands for in this
"^DD",365.15,365.151,.01,21,2,0)
instance of this symbol.  The same symbol may have multiple
"^DD",365.15,365.151,.01,21,3,0)
explanations.  This description is displayed during the Expand
"^DD",365.15,365.151,.01,21,4,0)
Entry action in the Insurance Buffer application.
"^DD",365.15,365.151,.01,"DT")
3020603
"^DD",365.15,365.152,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.152,0,"DT")
3020603
"^DD",365.15,365.152,0,"NM","DESCRIPTION")

"^DD",365.15,365.152,0,"UP")
365.15
"^DD",365.15,365.152,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",365.15,365.152,.01,3)
Enter the explanation for this IIV status.
"^DD",365.15,365.152,.01,"DT")
3030409
"^DIC",365,365,0)
IIV RESPONSE^365
"^DIC",365,365,0,"GL")
^IBCN(365,
"^DIC",365,365,"%D",0)
^1.001^4^4^3020916^^^^
"^DIC",365,365,"%D",1,0)
This file holds all responses to HL7 messages generated from
"^DIC",365,365,"%D",2,0)
the IIV Transmission Queue File for Insurance Identification
"^DIC",365,365,"%D",3,0)
and Verification.
"^DIC",365,365,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365,"B","IIV RESPONSE",365)

"^DIC",365.011,365.011,0)
X12 271 ELIGIBILITY/BENEFIT^365.011I
"^DIC",365.011,365.011,0,"GL")
^IBE(365.011,
"^DIC",365.011,365.011,"%",0)
^1.005^^
"^DIC",365.011,365.011,"%D",0)
^^4^4^3030418^
"^DIC",365.011,365.011,"%D",1,0)
This file contains all the corresponding X.12 271 EB01 codes 
"^DIC",365.011,365.011,"%D",2,0)
(Eligibility/Benefits).
"^DIC",365.011,365.011,"%D",3,0)
 
"^DIC",365.011,365.011,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.011,"B","X12 271 ELIGIBILITY/BENEFIT",365.011)

"^DIC",365.012,365.012,0)
X12 271 COVERAGE LEVEL^365.012I
"^DIC",365.012,365.012,0,"GL")
^IBE(365.012,
"^DIC",365.012,365.012,"%",0)
^1.005^^
"^DIC",365.012,365.012,"%D",0)
^^4^4^3030418^
"^DIC",365.012,365.012,"%D",1,0)
This file contains all the corresponding X.12 271 EB02 codes (Coverage 
"^DIC",365.012,365.012,"%D",2,0)
Level).
"^DIC",365.012,365.012,"%D",3,0)
 
"^DIC",365.012,365.012,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.012,"B","X12 271 COVERAGE LEVEL",365.012)

"^DIC",365.013,365.013,0)
X12 271 SERVICE TYPE^365.013I
"^DIC",365.013,365.013,0,"GL")
^IBE(365.013,
"^DIC",365.013,365.013,"%",0)
^1.005^^
"^DIC",365.013,365.013,"%D",0)
^^4^4^3030418^
"^DIC",365.013,365.013,"%D",1,0)
This file contains all the corresponding X.12 271 EB03 codes (Service 
"^DIC",365.013,365.013,"%D",2,0)
Type).
"^DIC",365.013,365.013,"%D",3,0)
 
"^DIC",365.013,365.013,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.013,"B","X12 271 SERVICE TYPE",365.013)

"^DIC",365.014,365.014,0)
X12 271 INSURANCE TYPE^365.014I
"^DIC",365.014,365.014,0,"GL")
^IBE(365.014,
"^DIC",365.014,365.014,"%",0)
^1.005^^
"^DIC",365.014,365.014,"%D",0)
^^4^4^3030418^
"^DIC",365.014,365.014,"%D",1,0)
This file contains all the corresponding X.12 271 EB04 codes (Insurance 
"^DIC",365.014,365.014,"%D",2,0)
Type).
"^DIC",365.014,365.014,"%D",3,0)
 
"^DIC",365.014,365.014,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.014,"B","X12 271 INSURANCE TYPE",365.014)

"^DIC",365.015,365.015,0)
X12 271 TIME PERIOD QUALIFIER^365.015I
"^DIC",365.015,365.015,0,"GL")
^IBE(365.015,
"^DIC",365.015,365.015,"%",0)
^1.005^^
"^DIC",365.015,365.015,"%D",0)
^^4^4^3030418^
"^DIC",365.015,365.015,"%D",1,0)
This file contains all the corresponding X.12 271 EB06 codes (Time 
"^DIC",365.015,365.015,"%D",2,0)
Period Qualifier).
"^DIC",365.015,365.015,"%D",3,0)
 
"^DIC",365.015,365.015,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.015,"B","X12 271 TIME PERIOD QUALIFIER",365.015)

"^DIC",365.016,365.016,0)
X12 271 QUANTITY QUALIFIER^365.016I
"^DIC",365.016,365.016,0,"GL")
^IBE(365.016,
"^DIC",365.016,365.016,"%",0)
^1.005^^
"^DIC",365.016,365.016,"%D",0)
^^4^4^3030418^
"^DIC",365.016,365.016,"%D",1,0)
This file contains all the corresponding X.12 271 EB09 codes (Quantity 
"^DIC",365.016,365.016,"%D",2,0)
Qualifier).
"^DIC",365.016,365.016,"%D",3,0)
 
"^DIC",365.016,365.016,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.016,"B","X12 271 QUANTITY QUALIFIER",365.016)

"^DIC",365.017,365.017,0)
X12 271 ERROR CONDITION^365.017I
"^DIC",365.017,365.017,0,"GL")
^IBE(365.017,
"^DIC",365.017,365.017,"%",0)
^1.005^^
"^DIC",365.017,365.017,"%D",0)
^^5^5^3030418^
"^DIC",365.017,365.017,"%D",1,0)
This file contains all the corresponding X.12 271 AAA03 codes (Error 
"^DIC",365.017,365.017,"%D",2,0)
Conditions).
"^DIC",365.017,365.017,"%D",3,0)
These values are returned because of an error in processing.
"^DIC",365.017,365.017,"%D",4,0)
 
"^DIC",365.017,365.017,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.017,"B","X12 271 ERROR CONDITION",365.017)

"^DIC",365.018,365.018,0)
X12 271 ERROR ACTION^365.018I
"^DIC",365.018,365.018,0,"GL")
^IBE(365.018,
"^DIC",365.018,365.018,"%",0)
^1.005
"^DIC",365.018,365.018,"%D",0)
^^6^6^3030418^
"^DIC",365.018,365.018,"%D",1,0)
This file contains all the corresponding X.12 271 AAA04 codes (Error 
"^DIC",365.018,365.018,"%D",2,0)
Actions).
"^DIC",365.018,365.018,"%D",3,0)
Certain retry actions are programmed based upon the current values
"^DIC",365.018,365.018,"%D",4,0)
in this table.
"^DIC",365.018,365.018,"%D",5,0)
 
"^DIC",365.018,365.018,"%D",6,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.018,"B","X12 271 ERROR ACTION",365.018)

"^DIC",365.021,365.021,0)
X12 271 CONTACT QUALIFIER^365.021
"^DIC",365.021,365.021,0,"GL")
^IBE(365.021,
"^DIC",365.021,365.021,"%",0)
^1.005^^
"^DIC",365.021,365.021,"%D",0)
^^4^4^3030418^
"^DIC",365.021,365.021,"%D",1,0)
This file contains all the corresponding X.12 codes which
"^DIC",365.021,365.021,"%D",2,0)
identify a method for contact.
"^DIC",365.021,365.021,"%D",3,0)
 
"^DIC",365.021,365.021,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.021,"B","X12 271 CONTACT QUALIFIER",365.021)

"^DIC",365.1,365.1,0)
IIV TRANSMISSION QUEUE^365.1
"^DIC",365.1,365.1,0,"GL")
^IBCN(365.1,
"^DIC",365.1,365.1,"%",0)
^1.005^^
"^DIC",365.1,365.1,"%D",0)
^1.001^4^4^3020917^^^^
"^DIC",365.1,365.1,"%D",1,0)
This file contains records which have been selected based on
"^DIC",365.1,365.1,"%D",2,0)
specific criteria to generate an HL7 message.  These messages
"^DIC",365.1,365.1,"%D",3,0)
will be sent to the Eligibility Communicator for processing.
"^DIC",365.1,365.1,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.1,"B","IIV TRANSMISSION QUEUE",365.1)

"^DIC",365.11,365.11,0)
IIV AUTO MATCH^365.11
"^DIC",365.11,365.11,0,"GL")
^IBCN(365.11,
"^DIC",365.11,365.11,"%",0)
^1.005^^0
"^DIC",365.11,365.11,"%D",0)
^1.001^7^7^3030522^^^^
"^DIC",365.11,365.11,"%D",1,0)
The Auto Match file is a VistA facility to help IIV match user-entered 
"^DIC",365.11,365.11,"%D",2,0)
insurance company names to the correct insurance company names in the 
"^DIC",365.11,365.11,"%D",3,0)
insurance company file.  This file links together an Auto Match Value 
"^DIC",365.11,365.11,"%D",4,0)
with a valid insurance company name.  The Auto Match Value may contain 
"^DIC",365.11,365.11,"%D",5,0)
common spelling mistakes and wildcard characters to aid in the selection 
"^DIC",365.11,365.11,"%D",6,0)
of a valid insurance company name.
"^DIC",365.11,365.11,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.11,"B","IIV AUTO MATCH",365.11)

"^DIC",365.12,365.12,0)
PAYER^365.12
"^DIC",365.12,365.12,0,"GL")
^IBE(365.12,
"^DIC",365.12,365.12,"%",0)
^1.005^^
"^DIC",365.12,365.12,"%D",0)
^^10^10^3030422^
"^DIC",365.12,365.12,"%D",1,0)
This is a standard file exported by the IB package.  It contains
"^DIC",365.12,365.12,"%D",2,0)
all payers which can be communicated with electronically for
"^DIC",365.12,365.12,"%D",3,0)
insurance identification and verification.  Do not add, edit or
"^DIC",365.12,365.12,"%D",4,0)
delete these entries except through the provided edit options.
"^DIC",365.12,365.12,"%D",5,0)
  
"^DIC",365.12,365.12,"%D",6,0)
At this time, WebMD is the only vendor VISTA is communicating
"^DIC",365.12,365.12,"%D",7,0)
with electronically and so this file will contain those payers
"^DIC",365.12,365.12,"%D",8,0)
with whom WebMD currently electronically communicates.
"^DIC",365.12,365.12,"%D",9,0)
 
"^DIC",365.12,365.12,"%D",10,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.12,"B","PAYER",365.12)

"^DIC",365.13,365.13,0)
PAYER APPLICATION^365.13
"^DIC",365.13,365.13,0,"GL")
^IBE(365.13,
"^DIC",365.13,365.13,"%D",0)
^^7^7^3020925^
"^DIC",365.13,365.13,"%D",1,0)
This file contains all the different applications that a payer
"^DIC",365.13,365.13,"%D",2,0)
could be contacted electronically for.
"^DIC",365.13,365.13,"%D",3,0)
  
"^DIC",365.13,365.13,"%D",4,0)
Initially there will only be electronic insurance identification
"^DIC",365.13,365.13,"%D",5,0)
and verification as an application.
"^DIC",365.13,365.13,"%D",6,0)
 
"^DIC",365.13,365.13,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.13,"B","PAYER APPLICATION",365.13)

"^DIC",365.14,365.14,0)
IIV TRANSMISSION STATUS^365.14
"^DIC",365.14,365.14,0,"GL")
^IBE(365.14,
"^DIC",365.14,365.14,"%",0)
^1.005^^
"^DIC",365.14,365.14,"%D",0)
^^5^5^3030418^
"^DIC",365.14,365.14,"%D",1,0)
This file contains all of the statuses that an electronic
"^DIC",365.14,365.14,"%D",2,0)
insurance identification or verification transmission or 
"^DIC",365.14,365.14,"%D",3,0)
receiving record can have.
"^DIC",365.14,365.14,"%D",4,0)
 
"^DIC",365.14,365.14,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.14,"B","IIV TRANSMISSION STATUS",365.14)

"^DIC",365.15,365.15,0)
IIV STATUS TABLE^365.15
"^DIC",365.15,365.15,0,"GL")
^IBE(365.15,
"^DIC",365.15,365.15,"%",0)
^1.005^^
"^DIC",365.15,365.15,"%D",0)
^^7^7^3030414^
"^DIC",365.15,365.15,"%D",1,0)
This file contains the various IIV statuses for entries in the Insurance 
"^DIC",365.15,365.15,"%D",2,0)
Buffer.  Also included are the symbols that should appear in the IIV 
"^DIC",365.15,365.15,"%D",3,0)
status column in the Insurance Buffer list, and a more detailed
"^DIC",365.15,365.15,"%D",4,0)
description of the status that is used in the Expand Entry option in the 
"^DIC",365.15,365.15,"%D",5,0)
Insurance Buffer.
"^DIC",365.15,365.15,"%D",6,0)
 
"^DIC",365.15,365.15,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.15,"B","IIV STATUS TABLE",365.15)

**END**
**END**
[3w
