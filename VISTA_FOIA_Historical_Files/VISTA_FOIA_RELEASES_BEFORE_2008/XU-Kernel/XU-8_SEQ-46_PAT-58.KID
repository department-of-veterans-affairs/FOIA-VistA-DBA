Released XU*8*58 SEQ #46
Extracted from mail message
**KIDS**:XU*8.0*58^

**INSTALL NAME**
XU*8.0*58
"BLD",150,0)
XU*8.0*58^KERNEL^0^2970331^n
"BLD",150,1,0)
^^154^154^2970331^^^^
"BLD",150,1,1,0)
 Prerequisites: none
"BLD",150,1,2,0)
=========================================================================== 
"BLD",150,1,3,0)
 This patch contains the following features and corrections:
"BLD",150,1,4,0)
 -An undefined error when installing data and the user said 'NO' to install
"BLD",150,1,5,0)
  the Data Dictionary.  Since the Data Dictionary is not present, the user
"BLD",150,1,6,0)
  gets an error.
"BLD",150,1,7,0)
 -Duplicate FileMan templates were not being installed, even if they were
"BLD",150,1,8,0)
  for two different files.
"BLD",150,1,9,0)
 -The question, 'Want to RUN the Environment Check Routine', will only be
"BLD",150,1,10,0)
  asked if the Build has an Environment Check Routine.
"BLD",150,1,11,0)
 -FAV-1096-72757  Restarting an Install ignores the variable XPDNOQUE, when
"BLD",150,1,12,0)
  the variable is set in an Environment Check Routine.
"BLD",150,1,13,0)
 -The Option 'Compare Transport Global to Current System' will now let you
"BLD",150,1,14,0)
  compare just routines or just the 2nd line of routines.
"BLD",150,1,15,0)
 -An Option or Protocol can now have an 'Action Type' of 'ATTACH TO MENU' or
"BLD",150,1,16,0)
  'DISABLE DURING INSTALL'.
"BLD",150,1,17,0)
 -The user will now be prompted for the Mail Group Coordinator if an Install
"BLD",150,1,18,0)
  is sending Mail Group(s).
"BLD",150,1,19,0)
 -Developers can now send Options and Protocols with the OUT OF ORDER MESSAGE
"BLD",150,1,20,0)
  field already set. The Options and Protocols will remain out of order after
"BLD",150,1,21,0)
  the install has completed.
"BLD",150,1,22,0)

"BLD",150,1,23,0)
=============================================================================
"BLD",150,1,24,0)
                    **** INSTALL INSTRUCTIONS ****
"BLD",150,1,25,0)
=============================================================================
"BLD",150,1,26,0)

"BLD",150,1,27,0)
 This patch can be installed with users on the system, but no other users
"BLD",150,1,28,0)
 should be using KIDS while you install this patch.
"BLD",150,1,29,0)
 Since this patch is an update to KIDS, no other patches should be installed
"BLD",150,1,30,0)
 during the installation of this patch.
"BLD",150,1,31,0)
=============================================================================
"BLD",150,1,32,0)
  
"BLD",150,1,33,0)
INSTALLATION:
"BLD",150,1,34,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",150,1,35,0)
      so you will need to disable mapping for the effected routines.
"BLD",150,1,36,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",150,1,37,0)
      option will load the KIDS Distribution onto your system.
"BLD",150,1,38,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",150,1,39,0)
      system. You now need to use KIDS to install the patch in the Transport
"BLD",150,1,40,0)
      global.
"BLD",150,1,41,0)
  4.  Users can remain on the system. This patch can be queued and installed
"BLD",150,1,42,0)
      at any time.  TaskMan can remain running.
"BLD",150,1,43,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",150,1,44,0)
      options:
"BLD",150,1,45,0)
         2  Verify Checksums in Transport Global
"BLD",150,1,46,0)
         3  Print Transport Global
"BLD",150,1,47,0)
         4  Compare Transport Global to Current System
"BLD",150,1,48,0)
         5  Backup a Transport Global
"BLD",150,1,49,0)
         6  Install Package(s)
"BLD",150,1,50,0)
  6.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",150,1,51,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",150,1,52,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",150,1,53,0)
===========================================================================
"BLD",150,1,54,0)
  
"BLD",150,1,55,0)
ROUTINES:
"BLD",150,1,56,0)
   Checksums obtained using CHECK^XTSUMBLD
"BLD",150,1,57,0)
   The second line of the routine now looks like:
"BLD",150,1,58,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",150,1,59,0)

"BLD",150,1,60,0)
            Before          After           Patch
"BLD",150,1,61,0)
Routine     Checksum        Checksum        List
"BLD",150,1,62,0)
----------------------------------------------------------------------
"BLD",150,1,63,0)
XPDCOM       2299089         5277873        21,58
"BLD",150,1,64,0)
XPDET        5054366         5058369        15,39,41,44,51,58
"BLD",150,1,65,0)
XPDH         2594827         3370027        58
"BLD",150,1,66,0)
XPDI        17816610        13319818        10,21,39,41,44,58
"BLD",150,1,67,0)
XPDI1         new            6631631        58
"BLD",150,1,68,0)
XPDIA       12898389        13293339        10,15,21,28,44,58
"BLD",150,1,69,0)
XPDIA1       7754922         7937994        2,44,51,58
"BLD",150,1,70,0)
XPDIB        2632713         2753452        10,58
"BLD",150,1,71,0)
XPDIK       10192795        14344733        15,58
"BLD",150,1,72,0)
XPDIL       10583214        11156235        15,44,58
"BLD",150,1,73,0)
XPDIP        9769805         9760615        15,21,28,30,41,44,51,58
"BLD",150,1,74,0)
XPDIQ        6693337         7513883        21,28,58
"BLD",150,1,75,0)
XPDIR        2689416         2964712        30,58
"BLD",150,1,76,0)
XPDIU        7856776         8165680        15,41,44,51,58
"BLD",150,1,77,0)
XPDT        19179554        19247892        2,10,28,41,44,51,58
"BLD",150,1,78,0)
XPDTA        7419894         7580607        15,44,58
"BLD",150,1,79,0)
XPDTC       12862739        13401215        10,15,21,39,41,44,58
"BLD",150,1,80,0)
XPDV         9865255        11643577        30,44,58
"BLD",150,1,81,0)
XQOO1       14519526        14826502        10,21,39,41,58
"BLD",150,1,82,0)
===========================================================================
"BLD",150,1,83,0)
DOCUMENTATION:
"BLD",150,1,84,0)
 1.  PARTIAL DD: BUILD #9.6
"BLD",150,1,85,0)
         SUB DD: ENTRIES #9.68
"BLD",150,1,86,0)
          FIELD: ACTION #.03
"BLD",150,1,87,0)
            0        SEND TO SITE
"BLD",150,1,88,0)
            1        DELETE AT SITE
"BLD",150,1,89,0)
            2        USE AS LINK FOR MENU ITEMS
"BLD",150,1,90,0)
            3        MERGE MENU ITEMS
"BLD",150,1,91,0)
            4        ATTACH TO MENU
"BLD",150,1,92,0)
            5        DISABLE DURING INSTALL
"BLD",150,1,93,0)

"BLD",150,1,94,0)

"BLD",150,1,95,0)
 2. The 'Compare Transport Global to Current System' will now let you compare
"BLD",150,1,96,0)
    just the Routines or just the 2nd line of the Routines.
"BLD",150,1,97,0)

"BLD",150,1,98,0)
EXAMPLE:
"BLD",150,1,99,0)
Select Kernel Installation & Distribution System Option: Installation
"BLD",150,1,100,0)

"BLD",150,1,101,0)
Select Installation Option: Compare Transport Global to Current System
"BLD",150,1,102,0)

"BLD",150,1,103,0)
Select INSTALL NAME: TEST 2.2      Loaded from Distribution  2/26/97@13:04:56
"BLD",150,1,104,0)
     => TEST  ;Created on Feb 24, 1997@12:44:26
"BLD",150,1,105,0)

"BLD",150,1,106,0)
     Select one of the following:
"BLD",150,1,107,0)

"BLD",150,1,108,0)
          1         Full Comparison
"BLD",150,1,109,0)
          2         Second line of Routines only
"BLD",150,1,110,0)
          3         Routines only
"BLD",150,1,111,0)

"BLD",150,1,112,0)
Type of Compare: 2  Second line of Routines only
"BLD",150,1,113,0)
DEVICE: HOME// 
"BLD",150,1,114,0)

"BLD",150,1,115,0)

"BLD",150,1,116,0)
 3. When adding Options or Protocols to a Build, you now have 2 new 'Action
"BLD",150,1,117,0)
    Types': 4  ATTACH TO MENU and 5  DISABLE DURING INSTALL.
"BLD",150,1,118,0)
    ATTACH TO MENU should be used to attach an Option or Protocol that you
"BLD",150,1,119,0)
    are not exporting to a Menu you are exporting.
"BLD",150,1,120,0)
    DISABLE DURING INSTALL should be used to designate all the Options and
"BLD",150,1,121,0)
    Protocols that you are not exporting, but you want them put out of order
"BLD",150,1,122,0)
    during the install process.
"BLD",150,1,123,0)

"BLD",150,1,124,0)

"BLD",150,1,125,0)
 4. When a Mail Group is exported with KIDS, the installing user will be
"BLD",150,1,126,0)
    asked for the Mail Group Coordinator when they use the install option.
"BLD",150,1,127,0)
    The Coordinator will only be added to the Mail Group if the Mail Group
"BLD",150,1,128,0)
    is new or there is currently not a Coordinator.  The Mail Group Coordinator
"BLD",150,1,129,0)
    is optional.
"BLD",150,1,130,0)

"BLD",150,1,131,0)
EXAMPLE:
"BLD",150,1,132,0)
Select Kernel Installation & Distribution System Option: Installation
"BLD",150,1,133,0)

"BLD",150,1,134,0)
Select Installation Option: Install Package(s)
"BLD",150,1,135,0)
Select INSTALL NAME:    TEST 2.2        Loaded from Distribution
"BLD",150,1,136,0)

"BLD",150,1,137,0)
This Distribution was loaded on Feb 27, 1997@08:11:04 with header of 
"BLD",150,1,138,0)
TEST  ;Created on Feb 24, 1997@12:44:26
"BLD",150,1,139,0)
It consisted of the following Install(s):
"BLD",150,1,140,0)
TEST 2.2
"BLD",150,1,141,0)

"BLD",150,1,142,0)
   TEST 2.2
"BLD",150,1,143,0)

"BLD",150,1,144,0)
Install Questions for TEST 2.2
"BLD",150,1,145,0)

"BLD",150,1,146,0)
Incoming Mail Groups:
"BLD",150,1,147,0)

"BLD",150,1,148,0)
Enter the Coordinator for Mail Group 'HL7': DIMICELI,RON          RD      
"BLD",150,1,149,0)

"BLD",150,1,150,0)
Enter the Coordinator for Mail Group 'RON TEST': 
"BLD",150,1,151,0)

"BLD",150,1,152,0)
Want to DISABLE Scheduled Options, Menu Options, and Protocols? YES// 
"BLD",150,1,153,0)

"BLD",150,1,154,0)

"BLD",150,4,0)
^9.64PA^9.6^1
"BLD",150,4,9.6,0)
9.6
"BLD",150,4,9.6,2,0)
^9.641^9.68^1
"BLD",150,4,9.6,2,9.68,0)
ENTRIES  (sub-file)
"BLD",150,4,9.6,2,9.68,1,0)
^9.6411^.03^1
"BLD",150,4,9.6,2,9.68,1,.03,0)
ACTION
"BLD",150,4,9.6,222)
y^n^p^^^^n
"BLD",150,4,"APDD",9.6,9.68)

"BLD",150,4,"APDD",9.6,9.68,.03)

"BLD",150,4,"B",9.6,9.6)

"BLD",150,"KRN",0)
^9.67PA^19^18
"BLD",150,"KRN",.4,0)
.4
"BLD",150,"KRN",.401,0)
.401
"BLD",150,"KRN",.402,0)
.402
"BLD",150,"KRN",.403,0)
.403
"BLD",150,"KRN",.5,0)
.5
"BLD",150,"KRN",.84,0)
.84
"BLD",150,"KRN",3.6,0)
3.6
"BLD",150,"KRN",3.8,0)
3.8
"BLD",150,"KRN",9.2,0)
9.2
"BLD",150,"KRN",9.8,0)
9.8
"BLD",150,"KRN",9.8,"NM",0)
^9.68A^19^19
"BLD",150,"KRN",9.8,"NM",1,0)
XPDI^^0^B36091851
"BLD",150,"KRN",9.8,"NM",2,0)
XPDIK^^0^B38981859
"BLD",150,"KRN",9.8,"NM",3,0)
XPDIR^^0^B4714175
"BLD",150,"KRN",9.8,"NM",4,0)
XPDIL^^0^B26129832
"BLD",150,"KRN",9.8,"NM",5,0)
XPDIU^^0^B13281250
"BLD",150,"KRN",9.8,"NM",6,0)
XPDET^^0^B26462961
"BLD",150,"KRN",9.8,"NM",7,0)
XPDV^^0^B33797055
"BLD",150,"KRN",9.8,"NM",8,0)
XPDTC^^0^B38149448
"BLD",150,"KRN",9.8,"NM",9,0)
XPDIA^^0^B53306641
"BLD",150,"KRN",9.8,"NM",10,0)
XPDTA^^0^B18438886
"BLD",150,"KRN",9.8,"NM",11,0)
XQOO1^^0^B75896508
"BLD",150,"KRN",9.8,"NM",12,0)
XPDI1^^0^B13999857
"BLD",150,"KRN",9.8,"NM",13,0)
XPDIB^^0^B4013822
"BLD",150,"KRN",9.8,"NM",14,0)
XPDCOM^^0^B10848573
"BLD",150,"KRN",9.8,"NM",15,0)
XPDH^^0^B5498948
"BLD",150,"KRN",9.8,"NM",16,0)
XPDIQ^^0^B18736954
"BLD",150,"KRN",9.8,"NM",17,0)
XPDIA1^^0^B29250424
"BLD",150,"KRN",9.8,"NM",18,0)
XPDT^^0^B57488847
"BLD",150,"KRN",9.8,"NM",19,0)
XPDIP^^0^B35933190
"BLD",150,"KRN",9.8,"NM","B","XPDCOM",14)

"BLD",150,"KRN",9.8,"NM","B","XPDET",6)

"BLD",150,"KRN",9.8,"NM","B","XPDH",15)

"BLD",150,"KRN",9.8,"NM","B","XPDI",1)

"BLD",150,"KRN",9.8,"NM","B","XPDI1",12)

"BLD",150,"KRN",9.8,"NM","B","XPDIA",9)

"BLD",150,"KRN",9.8,"NM","B","XPDIA1",17)

"BLD",150,"KRN",9.8,"NM","B","XPDIB",13)

"BLD",150,"KRN",9.8,"NM","B","XPDIK",2)

"BLD",150,"KRN",9.8,"NM","B","XPDIL",4)

"BLD",150,"KRN",9.8,"NM","B","XPDIP",19)

"BLD",150,"KRN",9.8,"NM","B","XPDIQ",16)

"BLD",150,"KRN",9.8,"NM","B","XPDIR",3)

"BLD",150,"KRN",9.8,"NM","B","XPDIU",5)

"BLD",150,"KRN",9.8,"NM","B","XPDT",18)

"BLD",150,"KRN",9.8,"NM","B","XPDTA",10)

"BLD",150,"KRN",9.8,"NM","B","XPDTC",8)

"BLD",150,"KRN",9.8,"NM","B","XPDV",7)

"BLD",150,"KRN",9.8,"NM","B","XQOO1",11)

"BLD",150,"KRN",19,0)
19
"BLD",150,"KRN",19.1,0)
19.1
"BLD",150,"KRN",101,0)
101
"BLD",150,"KRN",409.61,0)
409.61
"BLD",150,"KRN",771,0)
771
"BLD",150,"KRN",869.2,0)
869.2
"BLD",150,"KRN",870,0)
870
"BLD",150,"KRN",8994,0)
8994
"BLD",150,"KRN","B",.4,.4)

"BLD",150,"KRN","B",.401,.401)

"BLD",150,"KRN","B",.402,.402)

"BLD",150,"KRN","B",.403,.403)

"BLD",150,"KRN","B",.5,.5)

"BLD",150,"KRN","B",.84,.84)

"BLD",150,"KRN","B",3.6,3.6)

"BLD",150,"KRN","B",3.8,3.8)

"BLD",150,"KRN","B",9.2,9.2)

"BLD",150,"KRN","B",9.8,9.8)

"BLD",150,"KRN","B",19,19)

"BLD",150,"KRN","B",19.1,19.1)

"BLD",150,"KRN","B",101,101)

"BLD",150,"KRN","B",409.61,409.61)

"BLD",150,"KRN","B",771,771)

"BLD",150,"KRN","B",869.2,869.2)

"BLD",150,"KRN","B",870,870)

"BLD",150,"KRN","B",8994,8994)

"BLD",150,"QUES",0)
^9.62^^
"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^n^p^^^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.68)
1
"FIA",9.6,9.68,.03)

"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
58^2970331
"PKG",283,22,1,"PAH",1,1,0)
^^154^154^2970331
"PKG",283,22,1,"PAH",1,1,1,0)
 Prerequisites: none
"PKG",283,22,1,"PAH",1,1,2,0)
=========================================================================== 
"PKG",283,22,1,"PAH",1,1,3,0)
 This patch contains the following features and corrections:
"PKG",283,22,1,"PAH",1,1,4,0)
 -An undefined error when installing data and the user said 'NO' to install
"PKG",283,22,1,"PAH",1,1,5,0)
  the Data Dictionary.  Since the Data Dictionary is not present, the user
"PKG",283,22,1,"PAH",1,1,6,0)
  gets an error.
"PKG",283,22,1,"PAH",1,1,7,0)
 -Duplicate FileMan templates were not being installed, even if they were
"PKG",283,22,1,"PAH",1,1,8,0)
  for two different files.
"PKG",283,22,1,"PAH",1,1,9,0)
 -The question, 'Want to RUN the Environment Check Routine', will only be
"PKG",283,22,1,"PAH",1,1,10,0)
  asked if the Build has an Environment Check Routine.
"PKG",283,22,1,"PAH",1,1,11,0)
 -FAV-1096-72757  Restarting an Install ignores the variable XPDNOQUE, when
"PKG",283,22,1,"PAH",1,1,12,0)
  the variable is set in an Environment Check Routine.
"PKG",283,22,1,"PAH",1,1,13,0)
 -The Option 'Compare Transport Global to Current System' will now let you
"PKG",283,22,1,"PAH",1,1,14,0)
  compare just routines or just the 2nd line of routines.
"PKG",283,22,1,"PAH",1,1,15,0)
 -An Option or Protocol can now have an 'Action Type' of 'ATTACH TO MENU' or
"PKG",283,22,1,"PAH",1,1,16,0)
  'DISABLE DURING INSTALL'.
"PKG",283,22,1,"PAH",1,1,17,0)
 -The user will now be prompted for the Mail Group Coordinator if an Install
"PKG",283,22,1,"PAH",1,1,18,0)
  is sending Mail Group(s).
"PKG",283,22,1,"PAH",1,1,19,0)
 -Developers can now send Options and Protocols with the OUT OF ORDER MESSAGE
"PKG",283,22,1,"PAH",1,1,20,0)
  field already set. The Options and Protocols will remain out of order after
"PKG",283,22,1,"PAH",1,1,21,0)
  the install has completed.
"PKG",283,22,1,"PAH",1,1,22,0)

"PKG",283,22,1,"PAH",1,1,23,0)
=============================================================================
"PKG",283,22,1,"PAH",1,1,24,0)
                    **** INSTALL INSTRUCTIONS ****
"PKG",283,22,1,"PAH",1,1,25,0)
=============================================================================
"PKG",283,22,1,"PAH",1,1,26,0)

"PKG",283,22,1,"PAH",1,1,27,0)
 This patch can be installed with users on the system, but no other users
"PKG",283,22,1,"PAH",1,1,28,0)
 should be using KIDS while you install this patch.
"PKG",283,22,1,"PAH",1,1,29,0)
 Since this patch is an update to KIDS, no other patches should be installed
"PKG",283,22,1,"PAH",1,1,30,0)
 during the installation of this patch.
"PKG",283,22,1,"PAH",1,1,31,0)
=============================================================================
"PKG",283,22,1,"PAH",1,1,32,0)
  
"PKG",283,22,1,"PAH",1,1,33,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,34,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,35,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,36,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,37,0)
      option will load the KIDS Distribution onto your system.
"PKG",283,22,1,"PAH",1,1,38,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,39,0)
      system. You now need to use KIDS to install the patch in the Transport
"PKG",283,22,1,"PAH",1,1,40,0)
      global.
"PKG",283,22,1,"PAH",1,1,41,0)
  4.  Users can remain on the system. This patch can be queued and installed
"PKG",283,22,1,"PAH",1,1,42,0)
      at any time.  TaskMan can remain running.
"PKG",283,22,1,"PAH",1,1,43,0)
  5.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",283,22,1,"PAH",1,1,44,0)
      options:
"PKG",283,22,1,"PAH",1,1,45,0)
         2  Verify Checksums in Transport Global
"PKG",283,22,1,"PAH",1,1,46,0)
         3  Print Transport Global
"PKG",283,22,1,"PAH",1,1,47,0)
         4  Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,48,0)
         5  Backup a Transport Global
"PKG",283,22,1,"PAH",1,1,49,0)
         6  Install Package(s)
"PKG",283,22,1,"PAH",1,1,50,0)
  6.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,51,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",283,22,1,"PAH",1,1,52,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,53,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,54,0)
  
"PKG",283,22,1,"PAH",1,1,55,0)
ROUTINES:
"PKG",283,22,1,"PAH",1,1,56,0)
   Checksums obtained using CHECK^XTSUMBLD
"PKG",283,22,1,"PAH",1,1,57,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,58,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,59,0)

"PKG",283,22,1,"PAH",1,1,60,0)
            Before          After           Patch
"PKG",283,22,1,"PAH",1,1,61,0)
Routine     Checksum        Checksum        List
"PKG",283,22,1,"PAH",1,1,62,0)
----------------------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,63,0)
XPDCOM       2299089         5277873        21,58
"PKG",283,22,1,"PAH",1,1,64,0)
XPDET        5054366         5058369        15,39,41,44,51,58
"PKG",283,22,1,"PAH",1,1,65,0)
XPDH         2594827         3370027        58
"PKG",283,22,1,"PAH",1,1,66,0)
XPDI        17816610        13319818        10,21,39,41,44,58
"PKG",283,22,1,"PAH",1,1,67,0)
XPDI1         new            6631631        58
"PKG",283,22,1,"PAH",1,1,68,0)
XPDIA       12898389        13293339        10,15,21,28,44,58
"PKG",283,22,1,"PAH",1,1,69,0)
XPDIA1       7754922         7937994        2,44,51,58
"PKG",283,22,1,"PAH",1,1,70,0)
XPDIB        2632713         2753452        10,58
"PKG",283,22,1,"PAH",1,1,71,0)
XPDIK       10192795        14344733        15,58
"PKG",283,22,1,"PAH",1,1,72,0)
XPDIL       10583214        11156235        15,44,58
"PKG",283,22,1,"PAH",1,1,73,0)
XPDIP        9769805         9760615        15,21,28,30,41,44,51,58
"PKG",283,22,1,"PAH",1,1,74,0)
XPDIQ        6693337         7513883        21,28,58
"PKG",283,22,1,"PAH",1,1,75,0)
XPDIR        2689416         2964712        30,58
"PKG",283,22,1,"PAH",1,1,76,0)
XPDIU        7856776         8165680        15,41,44,51,58
"PKG",283,22,1,"PAH",1,1,77,0)
XPDT        19179554        19247892        2,10,28,41,44,51,58
"PKG",283,22,1,"PAH",1,1,78,0)
XPDTA        7419894         7580607        15,44,58
"PKG",283,22,1,"PAH",1,1,79,0)
XPDTC       12862739        13401215        10,15,21,39,41,44,58
"PKG",283,22,1,"PAH",1,1,80,0)
XPDV         9865255        11643577        30,44,58
"PKG",283,22,1,"PAH",1,1,81,0)
XQOO1       14519526        14826502        10,21,39,41,58
"PKG",283,22,1,"PAH",1,1,82,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,83,0)
DOCUMENTATION:
"PKG",283,22,1,"PAH",1,1,84,0)
 1.  PARTIAL DD: BUILD #9.6
"PKG",283,22,1,"PAH",1,1,85,0)
         SUB DD: ENTRIES #9.68
"PKG",283,22,1,"PAH",1,1,86,0)
          FIELD: ACTION #.03
"PKG",283,22,1,"PAH",1,1,87,0)
            0        SEND TO SITE
"PKG",283,22,1,"PAH",1,1,88,0)
            1        DELETE AT SITE
"PKG",283,22,1,"PAH",1,1,89,0)
            2        USE AS LINK FOR MENU ITEMS
"PKG",283,22,1,"PAH",1,1,90,0)
            3        MERGE MENU ITEMS
"PKG",283,22,1,"PAH",1,1,91,0)
            4        ATTACH TO MENU
"PKG",283,22,1,"PAH",1,1,92,0)
            5        DISABLE DURING INSTALL
"PKG",283,22,1,"PAH",1,1,93,0)

"PKG",283,22,1,"PAH",1,1,94,0)

"PKG",283,22,1,"PAH",1,1,95,0)
 2. The 'Compare Transport Global to Current System' will now let you compare
"PKG",283,22,1,"PAH",1,1,96,0)
    just the Routines or just the 2nd line of the Routines.
"PKG",283,22,1,"PAH",1,1,97,0)

"PKG",283,22,1,"PAH",1,1,98,0)
EXAMPLE:
"PKG",283,22,1,"PAH",1,1,99,0)
Select Kernel Installation & Distribution System Option: Installation
"PKG",283,22,1,"PAH",1,1,100,0)

"PKG",283,22,1,"PAH",1,1,101,0)
Select Installation Option: Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,102,0)

"PKG",283,22,1,"PAH",1,1,103,0)
Select INSTALL NAME: TEST 2.2      Loaded from Distribution  2/26/97@13:04:56
"PKG",283,22,1,"PAH",1,1,104,0)
     => TEST  ;Created on Feb 24, 1997@12:44:26
"PKG",283,22,1,"PAH",1,1,105,0)

"PKG",283,22,1,"PAH",1,1,106,0)
     Select one of the following:
"PKG",283,22,1,"PAH",1,1,107,0)

"PKG",283,22,1,"PAH",1,1,108,0)
          1         Full Comparison
"PKG",283,22,1,"PAH",1,1,109,0)
          2         Second line of Routines only
"PKG",283,22,1,"PAH",1,1,110,0)
          3         Routines only
"PKG",283,22,1,"PAH",1,1,111,0)

"PKG",283,22,1,"PAH",1,1,112,0)
Type of Compare: 2  Second line of Routines only
"PKG",283,22,1,"PAH",1,1,113,0)
DEVICE: HOME// 
"PKG",283,22,1,"PAH",1,1,114,0)

"PKG",283,22,1,"PAH",1,1,115,0)

"PKG",283,22,1,"PAH",1,1,116,0)
 3. When adding Options or Protocols to a Build, you now have 2 new 'Action
"PKG",283,22,1,"PAH",1,1,117,0)
    Types': 4  ATTACH TO MENU and 5  DISABLE DURING INSTALL.
"PKG",283,22,1,"PAH",1,1,118,0)
    ATTACH TO MENU should be used to attach an Option or Protocol that you
"PKG",283,22,1,"PAH",1,1,119,0)
    are not exporting to a Menu you are exporting.
"PKG",283,22,1,"PAH",1,1,120,0)
    DISABLE DURING INSTALL should be used to designate all the Options and
"PKG",283,22,1,"PAH",1,1,121,0)
    Protocols that you are not exporting, but you want them put out of order
"PKG",283,22,1,"PAH",1,1,122,0)
    during the install process.
"PKG",283,22,1,"PAH",1,1,123,0)

"PKG",283,22,1,"PAH",1,1,124,0)

"PKG",283,22,1,"PAH",1,1,125,0)
 4. When a Mail Group is exported with KIDS, the installing user will be
"PKG",283,22,1,"PAH",1,1,126,0)
    asked for the Mail Group Coordinator when they use the install option.
"PKG",283,22,1,"PAH",1,1,127,0)
    The Coordinator will only be added to the Mail Group if the Mail Group
"PKG",283,22,1,"PAH",1,1,128,0)
    is new or there is currently not a Coordinator.  The Mail Group Coordinator
"PKG",283,22,1,"PAH",1,1,129,0)
    is optional.
"PKG",283,22,1,"PAH",1,1,130,0)

"PKG",283,22,1,"PAH",1,1,131,0)
EXAMPLE:
"PKG",283,22,1,"PAH",1,1,132,0)
Select Kernel Installation & Distribution System Option: Installation
"PKG",283,22,1,"PAH",1,1,133,0)

"PKG",283,22,1,"PAH",1,1,134,0)
Select Installation Option: Install Package(s)
"PKG",283,22,1,"PAH",1,1,135,0)
Select INSTALL NAME:    TEST 2.2        Loaded from Distribution
"PKG",283,22,1,"PAH",1,1,136,0)

"PKG",283,22,1,"PAH",1,1,137,0)
This Distribution was loaded on Feb 27, 1997@08:11:04 with header of 
"PKG",283,22,1,"PAH",1,1,138,0)
TEST  ;Created on Feb 24, 1997@12:44:26
"PKG",283,22,1,"PAH",1,1,139,0)
It consisted of the following Install(s):
"PKG",283,22,1,"PAH",1,1,140,0)
TEST 2.2
"PKG",283,22,1,"PAH",1,1,141,0)

"PKG",283,22,1,"PAH",1,1,142,0)
   TEST 2.2
"PKG",283,22,1,"PAH",1,1,143,0)

"PKG",283,22,1,"PAH",1,1,144,0)
Install Questions for TEST 2.2
"PKG",283,22,1,"PAH",1,1,145,0)

"PKG",283,22,1,"PAH",1,1,146,0)
Incoming Mail Groups:
"PKG",283,22,1,"PAH",1,1,147,0)

"PKG",283,22,1,"PAH",1,1,148,0)
Enter the Coordinator for Mail Group 'HL7': DIMICELI,RON          RD      
"PKG",283,22,1,"PAH",1,1,149,0)

"PKG",283,22,1,"PAH",1,1,150,0)
Enter the Coordinator for Mail Group 'RON TEST': 
"PKG",283,22,1,"PAH",1,1,151,0)

"PKG",283,22,1,"PAH",1,1,152,0)
Want to DISABLE Scheduled Options, Menu Options, and Protocols? YES// 
"PKG",283,22,1,"PAH",1,1,153,0)

"PKG",283,22,1,"PAH",1,1,154,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
19
"RTN","XPDCOM")
0^14^B10848573
"RTN","XPDCOM",1,0)
XPDCOM ;SFISC/RSD - Compare Transport Global ;02/03/97  14:18
"RTN","XPDCOM",2,0)
 ;;8.0;KERNEL;**21,58**;Jul 10, 1995
"RTN","XPDCOM",3,0)
EN1 ;compare to current system
"RTN","XPDCOM",4,0)
 N DIC,DIR,DIRUT,POP,XPD,XPDA,XPDC,XPDNM,Y,Z,%ZIS
"RTN","XPDCOM",5,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I '$P(^(0),U,9),$D(^XTMP(""XPDI"",Y))"
"RTN","XPDCOM",6,0)
 D ^DIC Q:Y<0  S XPDA=+Y,XPDNM=Y(0,0)
"RTN","XPDCOM",7,0)
 S DIR(0)="S^1:Full Comparison;2:Second line of Routines only;3:Routines only",DIR("A")="Type of Compare",DIR("?")="Enter the type of comparison."
"RTN","XPDCOM",8,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","XPDCOM",9,0)
 S XPDC=Y,Y="COM^XPDCOM("_XPDA_")",Z="Transport Global Compare",XPD("XPDNM")="",XPD("XPDC")=""
"RTN","XPDCOM",10,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDCOM",11,0)
 Q
"RTN","XPDCOM",12,0)
COM(XPDA) ;XPDA=ien of package in ^XTMP("XPDI"
"RTN","XPDCOM",13,0)
 Q:'$D(^XTMP("XPDI",$G(XPDA)))
"RTN","XPDCOM",14,0)
 D HDR,COMR(5),EN^XPDCOMG:XPDC=1
"RTN","XPDCOM",15,0)
 Q
"RTN","XPDCOM",16,0)
 ;compare routines
"RTN","XPDCOM",17,0)
COMR(NL) ;NL=number of lines to check ahead
"RTN","XPDCOM",18,0)
 N DL,XL,XPDI,X,XL,Y,YL
"RTN","XPDCOM",19,0)
 S:'$G(NL) NL=5 S XPDI=""
"RTN","XPDCOM",20,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S X=$G(^(XPDI)) D
"RTN","XPDCOM",21,0)
 .I X W:X=1 !!,"DELETE Routine: ",XPDI,! Q
"RTN","XPDCOM",22,0)
 .S X=XPDI X ^%ZOSF("TEST") E  W !!,"ADD Routine: ",XPDI,! Q
"RTN","XPDCOM",23,0)
 .W !!," Routine: ",XPDI
"RTN","XPDCOM",24,0)
 .;check 2nd line only
"RTN","XPDCOM",25,0)
 .I XPDC=2 D  Q
"RTN","XPDCOM",26,0)
 ..S X=$G(^XTMP("XPDI",XPDA,"RTN",XPDI,2,0)),Y=$T(+2^@XPDI)
"RTN","XPDCOM",27,0)
 ..W !,"<TG> ",X,!,"<SYS>",Y Q:X=Y!(X'["**")
"RTN","XPDCOM",28,0)
 ..;check patch string
"RTN","XPDCOM",29,0)
 ..S X=$P(X,"**",2),XL=$L(X,","),Y=$P(Y,"**",2),YL=$L(Y,",")
"RTN","XPDCOM",30,0)
 ..Q:X=Y
"RTN","XPDCOM",31,0)
 ..;incoming has more patches than system, check for missing patches
"RTN","XPDCOM",32,0)
 ..I XL>YL W:$P(X,",",1,(XL-1))'=Y !,"*** WARNING, you are missing one or more Patches ***" Q
"RTN","XPDCOM",33,0)
 ..I YL>XL W !,"*** WARNING, your routine has more patches than the incoming routine ***" Q
"RTN","XPDCOM",34,0)
 .F %=1:1 Q:'$D(^XTMP("XPDI",XPDA,"RTN",XPDI,%))
"RTN","XPDCOM",35,0)
 .;XL=lines in routine in XTMP, DL=line in routine on disk
"RTN","XPDCOM",36,0)
 .S XL=%-1,DL=$$LD(XPDI)
"RTN","XPDCOM",37,0)
 .D COMP K ^TMP($J,XPDI)
"RTN","XPDCOM",38,0)
 Q
"RTN","XPDCOM",39,0)
COMP ;taken from XMPC routine
"RTN","XPDCOM",40,0)
 N D1,DI,I,J,K,X1,XI,Y1
"RTN","XPDCOM",41,0)
 S (XI,DI)=0
"RTN","XPDCOM",42,0)
 ;check each line in the incoming routine,X1, against the routine on disk,D1
"RTN","XPDCOM",43,0)
 F  S XI=XI+1,DI=DI+1 Q:XI>XL!(DI>DL)  D:^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0)'=^TMP($J,XPDI,DI,0)
"RTN","XPDCOM",44,0)
 .S X1=^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0),Y1=0
"RTN","XPDCOM",45,0)
 .;if lines are not the same, look ahead five lines in D1
"RTN","XPDCOM",46,0)
 .F I=DI:1:$S(DI+NL<DL:DI+NL,1:DL) S D1=^TMP($J,XPDI,I,0) D  Q:Y1
"RTN","XPDCOM",47,0)
 ..F K=1:5:26 Q:$L($E(D1,K,K+10))<7  I $F(X1,$E(D1,K,K+10))  D  Q
"RTN","XPDCOM",48,0)
 ...;print the lines upto the line that are the same
"RTN","XPDCOM",49,0)
 ...F J=DI:1:I-1 D WP(^TMP($J,XPDI,J,0),2)
"RTN","XPDCOM",50,0)
 ...;quit if the lines are equal
"RTN","XPDCOM",51,0)
 ...S DI=I,Y1=1 Q:D1=X1
"RTN","XPDCOM",52,0)
 ...;if lines are equal, print old and new
"RTN","XPDCOM",53,0)
 ...D WP(D1,3),WP(X1,4)
"RTN","XPDCOM",54,0)
 .Q:Y1  D WP(X1,1) S DI=DI-1
"RTN","XPDCOM",55,0)
 ;check remaining lines in routines
"RTN","XPDCOM",56,0)
 I XI>XL&(DI<(DL+1)) F I=DI:1:DL D WP(^TMP($J,XPDI,I,0),2)
"RTN","XPDCOM",57,0)
 I DI>DL&(XI<(XL+1)) F I=XI:1:XL D WP(^XTMP("XPDI",XPDA,"RTN",XPDI,I,0),1)
"RTN","XPDCOM",58,0)
 Q
"RTN","XPDCOM",59,0)
WP(X,Y) W !,"* "_$P("ADD^DEL^OLD^NEW",U,Y)_" *  ",X
"RTN","XPDCOM",60,0)
 Q
"RTN","XPDCOM",61,0)
 ;load system routine into TMP global
"RTN","XPDCOM",62,0)
LD(X) N %N,DIF,XCNP
"RTN","XPDCOM",63,0)
 K ^TMP($J,X)
"RTN","XPDCOM",64,0)
 S DIF="^TMP($J,X,",XCNP=0
"RTN","XPDCOM",65,0)
 X ^%ZOSF("LOAD")
"RTN","XPDCOM",66,0)
 Q %N-1
"RTN","XPDCOM",67,0)
 ;
"RTN","XPDCOM",68,0)
HDR S $P(XPDUL,"-",80)=""
"RTN","XPDCOM",69,0)
 W @IOF,"Compare ",XPDNM," to current site",!
"RTN","XPDCOM",70,0)
 I XPDC>1 W:XPDC=2 "2nd Line of " W "Routines Only",!
"RTN","XPDCOM",71,0)
 W XPDUL,!
"RTN","XPDCOM",72,0)
 Q
"RTN","XPDET")
0^6^B26462961
"RTN","XPDET",1,0)
XPDET ;SFISC/RSD - Input tranforms & help for file 9.6 & 9.7 ;01/21/97  14:09
"RTN","XPDET",2,0)
 ;;8.0;KERNEL;**15,39,41,44,51,58**;Jul 10, 1995
"RTN","XPDET",3,0)
 Q
"RTN","XPDET",4,0)
INPUTB(X) ;input tranfrom for NAME in BUILD file
"RTN","XPDET",5,0)
 ;X=user input
"RTN","XPDET",6,0)
 ;name must be unique
"RTN","XPDET",7,0)
 I $L(X)>50!($L(X)<3)!$D(^XPD(9.6,"B",X)) K X Q
"RTN","XPDET",8,0)
 I X["*" K:$P(X,"*",2,3)'?1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.6N X Q
"RTN","XPDET",9,0)
 S %=$L(X," ") I %<2 K X Q
"RTN","XPDET",10,0)
 S %=$P(X," ",%) K:%'?1.2N1"."1.2N.1(1"V",1"T").2N X
"RTN","XPDET",11,0)
 Q
"RTN","XPDET",12,0)
INPUTE(X) ;input transform for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",13,0)
 ;X=user input
"RTN","XPDET",14,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,XPDLK,Y
"RTN","XPDET",15,0)
 S XPDLK=$$GR(D1)
"RTN","XPDET",16,0)
 I XPDLK=""!X["*" K X Q
"RTN","XPDET",17,0)
 S DIC(0)="QEMZ",DIC=XPDLK
"RTN","XPDET",18,0)
 S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",19,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",20,0)
 S X=Y(0,0)
"RTN","XPDET",21,0)
 ;check that this doesn't exist already
"RTN","XPDET",22,0)
 I $D(^XPD(9.6,D0,"KRN",D1,"NM","B",X)) K X Q
"RTN","XPDET",23,0)
 ;if fm file, change X to contain file # of template
"RTN","XPDET",24,0)
 I D1<.404 S X=$$TX(X,$P(Y(0),U,$S(D1=.403:8,1:4)))
"RTN","XPDET",25,0)
 Q
"RTN","XPDET",26,0)
GLOBALE(X) ;input transform for GLOBAL multiple .01 field in file 9.6
"RTN","XPDET",27,0)
 I $L(X)>30!($L(X)<2) K X Q
"RTN","XPDET",28,0)
 I X["(",X'[")" K X Q
"RTN","XPDET",29,0)
 ;change ' back to " for subscripts, they were changed in the Pre-Lookup node of the DD, 7.5. This was done to trick FM, which doesn't allow " in .01 fields
"RTN","XPDET",30,0)
 S X=$TR(X,"'","""")
"RTN","XPDET",31,0)
 I '$D(@("^"_X)) K X
"RTN","XPDET",32,0)
 Q
"RTN","XPDET",33,0)
INPUTMB(X) ;input transform for field 10 and 11 in file 9.6
"RTN","XPDET",34,0)
 ;X=user input
"RTN","XPDET",35,0)
 N D,DD,DIC,DICR,DIX,DIY,DS,DO,Y
"RTN","XPDET",36,0)
 ;can't select a global or multi package or itself (D0)
"RTN","XPDET",37,0)
 S DIC(0)="QEMZ",DIC="^XPD(9.6,",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",38,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",39,0)
 S X=Y(0,0)
"RTN","XPDET",40,0)
 Q
"RTN","XPDET",41,0)
LOOKE(X) ;special lookup for ENTRIES in KERNEL FILES multiple
"RTN","XPDET",42,0)
 Q:X'?1.E1"*"
"RTN","XPDET",43,0)
 N %,XPD,XPDI,XPDIC,XPDF,XPDLK,XPDX,Y
"RTN","XPDET",44,0)
 S XPDLK=$$GR(D1),XPDIC=DIC,XPDF=D1
"RTN","XPDET",45,0)
 I XPDLK="" K X Q
"RTN","XPDET",46,0)
 G:$E(X)="-" DEL
"RTN","XPDET",47,0)
 S XPDX=$P(X,"*"),XPDI("IEN")=0
"RTN","XPDET",48,0)
 D LIST^DIC(D1,"","","","*",.XPDI,XPDX,"","I $$SCR^XPDET(Y)")
"RTN","XPDET",49,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",50,0)
 K ^TMP("XPDX",$J)
"RTN","XPDET",51,0)
 ;loop thru list from lister and file using UPDATE^DIE
"RTN","XPDET",52,0)
 F XPDI=1:1 S X=$G(^TMP("DILIST",$J,1,XPDI)) Q:X=""  D
"RTN","XPDET",53,0)
 .S:D1<.404 %=^TMP("DILIST",$J,2,XPDI)_",",X=$$TX(X,$$GET1^DIQ(D1,%,$$TF(D1),"I"))
"RTN","XPDET",54,0)
 .S Y="+"_XPDI_","_D1_","_D0_",",^TMP("XPDX",$J,9.68,Y,.01)=X,^(.03)=0
"RTN","XPDET",55,0)
 I $D(^TMP("XPDX",$J)) D UPDATE^DIE("","^TMP(""XPDX"",$J)","^TMP(""XPD"",$J)")
"RTN","XPDET",56,0)
 ;if in Screenman then call MLOAD to update screen
"RTN","XPDET",57,0)
 I $D(DDS),$D(^TMP("XPD",$J)) D MLOAD^DDSUTL("^TMP(""XPD"",$J)")
"RTN","XPDET",58,0)
 S X=""
"RTN","XPDET",59,0)
 K ^TMP("XPDX",$J),^TMP("XPD",$J)
"RTN","XPDET",60,0)
 Q
"RTN","XPDET",61,0)
DEL ;delete using wild card
"RTN","XPDET",62,0)
 I X'?1"-"1.E1"*" K X Q
"RTN","XPDET",63,0)
 S X=$E(X,2,$L(X)-1),XPDX=X S:$L(X) XPDI("IEN")=0
"RTN","XPDET",64,0)
 D LIST^DIC(9.68,","_D1_","_D0_",","","","*",.XPDI,XPDX)
"RTN","XPDET",65,0)
 I '$G(^TMP("DILIST",$J,0)) K X Q
"RTN","XPDET",66,0)
 N DIK,DA,D2
"RTN","XPDET",67,0)
 S DIK=XPDIC,DA(1)=D1,DA(2)=D0
"RTN","XPDET",68,0)
 F XPDI=1:1 S (DA,D2)=$G(^TMP("DILIST",$J,2,XPDI)) Q:'DA  D
"RTN","XPDET",69,0)
 .D ^DIK
"RTN","XPDET",70,0)
 I $D(DDS) D MDEL^DDSUTL("^TMP(""DILIST"",$J,2)")
"RTN","XPDET",71,0)
 S X=""
"RTN","XPDET",72,0)
 K ^TMP("DILIST",$J)
"RTN","XPDET",73,0)
 Q
"RTN","XPDET",74,0)
HELP ;executable help of ENTRIES in KERNEL FILE multiple
"RTN","XPDET",75,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",76,0)
 ;file 9.8 is routine file, check that routine exists
"RTN","XPDET",77,0)
 S DIC=$$GR(D1),DIC(0)="M",X="??" Q:DIC=""  S:D1=9.8 DIC("S")="I $T(^@$P(^(0),U))]"""""
"RTN","XPDET",78,0)
 D ^DIC Q
"RTN","XPDET",79,0)
 ;
"RTN","XPDET",80,0)
HELPO ;executable help of INSTALL ORDER in KERNEL FILES multiple
"RTN","XPDET",81,0)
 N Y
"RTN","XPDET",82,0)
 W !,"Numbers in use:  ORDER     FILE#" S Y=0
"RTN","XPDET",83,0)
 F  S Y=$O(^XPD(9.6,D0,"KRN","AC",Y)) Q:'Y  W !,?18,$J(Y,2),?28,$O(^(Y,0))
"RTN","XPDET",84,0)
 W ! Q
"RTN","XPDET",85,0)
 ;
"RTN","XPDET",86,0)
HELPMB ;executable help of fields 10 & 11 in file 9.6
"RTN","XPDET",87,0)
 N D,DIC,DIE,DIX,DIY,DO,DZ,DS,X,Y
"RTN","XPDET",88,0)
 S DIC="^XPD(9.6,",DIC(0)="M",X="??",DIC("S")="I '$P(^(0),U,3),Y'="_D0
"RTN","XPDET",89,0)
 D ^DIC Q
"RTN","XPDET",90,0)
 ;
"RTN","XPDET",91,0)
SCRA(Y) ;screen of ACTION field in ENTRIES multiple in KERNEL FILES multiple, Y=action
"RTN","XPDET",92,0)
 ;Y=0 - send, 1 - delete, 2 - link, 3 - merge, 4 - attach, 5 - disable
"RTN","XPDET",93,0)
 ;all entries can send to site or disable
"RTN","XPDET",94,0)
 Q:Y=5!'Y 1
"RTN","XPDET",95,0)
 ;.5=function file, can't delete, all others can
"RTN","XPDET",96,0)
 I Y=1 Q (D1'=.5)
"RTN","XPDET",97,0)
 ;then rest of code check if it is a Option or Protocal and can have MENU ITEMS
"RTN","XPDET",98,0)
 Q:D1'=19&(D1'=101) 0
"RTN","XPDET",99,0)
 ;all Options and Protocols can be attached
"RTN","XPDET",100,0)
 Q:Y=4 1
"RTN","XPDET",101,0)
 N FGR,X
"RTN","XPDET",102,0)
 S X=$P(^XPD(9.6,D0,"KRN",D1,"NM",D2,0),U),FGR=$$FILE^XPDV(D1)
"RTN","XPDET",103,0)
 Q:X="" 0
"RTN","XPDET",104,0)
 S X=+$O(@FGR@("B",X,0))
"RTN","XPDET",105,0)
 ;if it has ITEMs, node 10 then ok
"RTN","XPDET",106,0)
 I $O(@FGR@(X,10,0)) Q 1
"RTN","XPDET",107,0)
 ;if type is menu,potocol,protocol menu,limited,extended,window suite
"RTN","XPDET",108,0)
 I "MOQLXZ"[$P($G(@FGR@(X,0)),U,4) Q 1
"RTN","XPDET",109,0)
 Q 0
"RTN","XPDET",110,0)
 ;
"RTN","XPDET",111,0)
 ;only Fileman templates need to know what file they are associated with.
"RTN","XPDET",112,0)
 ;this value is also triggered to field .02 in the DD.
"RTN","XPDET",113,0)
TX(X,Y) ;X=template name, Y=file #
"RTN","XPDET",114,0)
 Q X_"    FILE #"_Y
"RTN","XPDET",115,0)
 ;
"RTN","XPDET",116,0)
TF(F) ;F=file, return field of file# for templates
"RTN","XPDET",117,0)
 Q $S(F>.403:"",F<.403:4,1:7)
"RTN","XPDET",118,0)
 ;
"RTN","XPDET",119,0)
GR(X) Q $G(^DIC(X,0,"GL"))
"RTN","XPDET",120,0)
 ;
"RTN","XPDET",121,0)
 ;screens checks that X is not already in the ENTRIES multiple
"RTN","XPDET",122,0)
SCR(Y) ;screen logic for ENTRIES multiple in file 9.6
"RTN","XPDET",123,0)
 N %,X,Z
"RTN","XPDET",124,0)
 S Z=^(0),X=$P(Z,U)
"RTN","XPDET",125,0)
 ;FM files are less than .44
"RTN","XPDET",126,0)
 I XPDF<.44 D  Q:X="" 0
"RTN","XPDET",127,0)
 .S %=$S(XPDF=.403:$P(Z,U,8),1:$P(Z,U,4)),X=X_"    FILE #"_%
"RTN","XPDET",128,0)
 .S:XPDF'=.403&($P(Z,U,8)>2) %=0 S:'% X=""
"RTN","XPDET",129,0)
 ;routine must exist and must be type 'R'
"RTN","XPDET",130,0)
 I XPDF=9.8 Q:$T(^@X)=""!($P(Z,U,2)'="R") 0
"RTN","XPDET",131,0)
 Q '$D(@(XPDIC_"""B"",X)"))
"RTN","XPDET",132,0)
 ;
"RTN","XPDET",133,0)
 ;screen checks that X is not in the exclude list, XPDN(0)
"RTN","XPDET",134,0)
SCR1(Y) ;screen logic for exclude list
"RTN","XPDET",135,0)
 N %,X
"RTN","XPDET",136,0)
 ;if name X is in the exclude list, XPDN(0,X), then fail
"RTN","XPDET",137,0)
 S Y(0)=^(0),X=$P(Y(0),U) Q:$D(XPDN(0,X)) 0
"RTN","XPDET",138,0)
 ;check if X is refered in the namespace by check the subscript
"RTN","XPDET",139,0)
 ;before X, if sub exist and $P(X,sub)="" then it is part of the
"RTN","XPDET",140,0)
 ;namespace, fail and return 0
"RTN","XPDET",141,0)
 S %=$O(XPDN(0,X),-1) I $L(%) Q:$P(X,%)="" 0
"RTN","XPDET",142,0)
 Q $$SCR(.Y)
"RTN","XPDET",143,0)
 ;
"RTN","XPDET",144,0)
 ;screen on PACKAGE LINK field in file 9.6,
"RTN","XPDET",145,0)
PCK(Y) ;check Package File name, Y=ien in package file
"RTN","XPDET",146,0)
 N %,Y,Z
"RTN","XPDET",147,0)
 S Z=^(0)
"RTN","XPDET",148,0)
 ;DA is undef when you are adding a new Build without a version number
"RTN","XPDET",149,0)
 Q:'$D(^XPD(9.6,+$G(DA),0)) 1
"RTN","XPDET",150,0)
 S Y=$L($P(Z,U)),%=$P(^XPD(9.6,DA,0),U),%=$$PKG^XPDUTL(%)
"RTN","XPDET",151,0)
 Q $P(Z,U)=$E(%,1,Y)!($P(Z,U,2)=%)
"RTN","XPDET",152,0)
VOLE(X) ;input transform for VOLUME SET multiple in INSTALL file
"RTN","XPDET",153,0)
 ;X=user input
"RTN","XPDET",154,0)
 N D,DD,DIC,DICR,DIX,DIY,DO,DS,XPD,Y,%
"RTN","XPDET",155,0)
 ;(0;11)=SIGNON/PRODUCTION
"RTN","XPDET",156,0)
 S DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",157,0)
 D ^DIC K:Y<0 X Q:'$D(X)
"RTN","XPDET",158,0)
 S X=Y(0,0)
"RTN","XPDET",159,0)
 Q
"RTN","XPDET",160,0)
VOLH ;executable help for VOLUME SET multiple in INSTALL file
"RTN","XPDET",161,0)
 N D,DD,DIC,DIE,DIX,DIY,DO,DS,DZ,X,Y,%
"RTN","XPDET",162,0)
 S X="??",DIC(0)="QEMZ",DIC="^%ZIS(14.5,",DIC("S")="I $P(^(0),U,11)"
"RTN","XPDET",163,0)
 D ^DIC
"RTN","XPDET",164,0)
 Q
"RTN","XPDET",165,0)
ID97 ;identifier for Install file
"RTN","XPDET",166,0)
 N XPDET,XPD,XPD0,XPD1,XPD2,XPD9
"RTN","XPDET",167,0)
 S XPD0=$G(^(0)),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD9=$P(XPD0,U,9),XPD="" Q:XPD9=""
"RTN","XPDET",168,0)
 D
"RTN","XPDET",169,0)
 .;Loaded, get DATE LOADED
"RTN","XPDET",170,0)
 .I 'XPD9 S XPD=$$FMTE^XLFDT($P(XPD0,U,3),2) Q
"RTN","XPDET",171,0)
 .Q:XPD9>3
"RTN","XPDET",172,0)
 .;Started, get INSTALL START TIME
"RTN","XPDET",173,0)
 .I XPD9=2 S XPD=$$FMTE^XLFDT($P(XPD1,U),2) Q
"RTN","XPDET",174,0)
 .;Completed, get INSTALL COMPLETE TIME
"RTN","XPDET",175,0)
 .I XPD9=3 S XPD=$$FMTE^XLFDT($P(XPD1,U,3),2) Q
"RTN","XPDET",176,0)
 .;Queued, get QUEUED TASK NUMBER
"RTN","XPDET",177,0)
 .I XPD9=1 S XPD="#"_$P(XPD0,U,6) Q
"RTN","XPDET",178,0)
 S XPDET(1)="   "_$$EXTERNAL^DILFD(9.7,.02,"",XPD9)_"  "_XPD,XPDET(1,"F")="?0"
"RTN","XPDET",179,0)
 S:XPD2]"" XPDET(2)="=> "_$E(XPD2,1,70),XPDET(2,"F")="!?5"
"RTN","XPDET",180,0)
 D EN^DDIOL(.XPDET)
"RTN","XPDET",181,0)
 Q
"RTN","XPDET",182,0)
 ;not being used right now,
"RTN","XPDET",183,0)
DEL(Y) ;delete access to file 9.7, 0-can't delete, 1-can
"RTN","XPDET",184,0)
 N %
"RTN","XPDET",185,0)
 S %=$P(^XPD(9.7,Y,0),U,9)
"RTN","XPDET",186,0)
 Q $S(%=3:1,%=2:0,$D(^XPD(9.7,"ASP",Y,1,Y)):1,1:0)
"RTN","XPDH")
0^15^B5498948
"RTN","XPDH",1,0)
XPDH ;SFISC/XAK,RSD - help for answering install questions ;02/14/97  08:01
"RTN","XPDH",2,0)
 ;;8.0;KERNEL;**58**;Jul 10, 1995
"RTN","XPDH",3,0)
REP ;changing your file name
"RTN","XPDH",4,0)
 W !!?5,"If YES, then the incoming file name and Data Dictionary will"
"RTN","XPDH",5,0)
 W !?5,"overwrite the existing file ",FLAG,"."
"RTN","XPDH",6,0)
 W !!?5,"If NO, then the Install Process will abort.",!
"RTN","XPDH",7,0)
 Q
"RTN","XPDH",8,0)
DTA ;help for adding data
"RTN","XPDH",9,0)
 W !!?5,"YES means that the data coming in with this INSTALL process"
"RTN","XPDH",10,0)
 W !?5,"will ",FLAG," the data on file if a match is found."
"RTN","XPDH",11,0)
 W !!?5,"Entries will be added if they do not match exactly"
"RTN","XPDH",12,0)
 W !?5,"on Name and Identifiers."
"RTN","XPDH",13,0)
 W !!?5,"NO means that everything will be left as is."
"RTN","XPDH",14,0)
 Q
"RTN","XPDH",15,0)
OPT ;disable options
"RTN","XPDH",16,0)
 W !!?5,"YES means you want to mark Options and Protocols out of"
"RTN","XPDH",17,0)
 W !?5,"order during the Install Process."
"RTN","XPDH",18,0)
 W !!?5,"NO means no action will be taken."
"RTN","XPDH",19,0)
 Q
"RTN","XPDH",20,0)
RTN ;moving routines
"RTN","XPDH",21,0)
 W !!?5,"YES means you want to update the routines on other CPUs"
"RTN","XPDH",22,0)
 W !?5,"during the Install Process.  This will work only if Taskman"
"RTN","XPDH",23,0)
 W !?5,"is running during the Install Process."
"RTN","XPDH",24,0)
 W !!?5,"NO means that only routines on this CPU will be updated."
"RTN","XPDH",25,0)
 Q
"RTN","XPDH",26,0)
MSG ;creating a Packman message
"RTN","XPDH",27,0)
 W !!?5,"YES means that you are going to send this Package over"
"RTN","XPDH",28,0)
 W !?5,"the Network as a message."
"RTN","XPDH",29,0)
 W !?5,"NO means that a Transport Global will be created."
"RTN","XPDH",30,0)
 Q
"RTN","XPDH",31,0)
MG ;adding Coordinator to a Mail Group
"RTN","XPDH",32,0)
 W !!?5,"Enter the person responsible for maintaining the membership"
"RTN","XPDH",33,0)
 W !?5,"of the incoming Mail Group.  The person must exist in the"
"RTN","XPDH",34,0)
 W !?5,"New Person file, #200.  This person will be the coordinator"
"RTN","XPDH",35,0)
 W !?5,"only if this Mail Group is new on your system."
"RTN","XPDH",36,0)
 Q
"RTN","XPDI")
0^1^B36091851
"RTN","XPDI",1,0)
XPDI ;SFISC/RSD - Install Process ;02/07/97  10:11
"RTN","XPDI",2,0)
 ;;8.0;KERNEL;**10,21,39,41,44,58**;Jul 10, 1995
"RTN","XPDI",3,0)
EN ;install
"RTN","XPDI",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDIT,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDSET1,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDI",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK^XPDI1(%)
"RTN","XPDI",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDI",7,0)
 S XPDIT=0,(XPDSET,XPDSET1)=$P(^XPD(9.7,XPDST,0),U) K ^TMP($J)
"RTN","XPDI",8,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  D  Q:'$D(XPDT)!$D(XPDQUIT)
"RTN","XPDI",9,0)
 .S XPDA=+XPDT(XPDIT),XPDNM=$P(XPDT(XPDIT),U,2),XPDPKG=+$P($G(^XPD(9.7,+XPDT(XPDIT),0)),U,2),%=$P(^(0),U,5)
"RTN","XPDI",10,0)
 .W !?3,XPDNM
"RTN","XPDI",11,0)
 .;check that Install file was created correctly
"RTN","XPDI",12,0)
 .I '$D(^XPD(9.7,XPDA,"INI"))!'$D(^("INIT")) W !,"**INSTALL FILE IS CORRUPTED**",!,*7 S XPDQUIT=1 Q
"RTN","XPDI",13,0)
 .;run enviroment check routine
"RTN","XPDI",14,0)
 .Q:$$ENV^XPDIL1(1)
"RTN","XPDI",15,0)
 .;save variables that are setup in environ. chck. routine
"RTN","XPDI",16,0)
 .I $D(XPDNOQUE)!$D(XPDDIQ) D
"RTN","XPDI",17,0)
 ..S:$D(XPDNOQUE) ^XTMP("XPDI",XPDA,"ENVVAR","XPDNOQUE")=XPDNOQUE
"RTN","XPDI",18,0)
 ..I $D(XPDDIQ) M ^XTMP("XPDI",XPDA,"ENVVAR","XPDDIQ")=XPDDIQ
"RTN","XPDI",19,0)
 .D QUES^XPDI1(XPDA) Q:'$D(XPDT(+XPDIT))!$D(XPDQUIT)
"RTN","XPDI",20,0)
 .;XPDIJ=XPDA if XPDIJ routine is part of Build
"RTN","XPDI",21,0)
 .S:$D(^XTMP("XPDI",XPDA,"RTN","XPDIJ")) XPDIJ=XPDA
"RTN","XPDI",22,0)
 .D XQSET^XPDI1(XPDA)
"RTN","XPDI",23,0)
 ;NONE = no Build to install
"RTN","XPDI",24,0)
 G NONE:'$O(XPDT(""))!$D(XPDQUIT)
"RTN","XPDI",25,0)
 ;check that we have all Builds to install
"RTN","XPDI",26,0)
 S XPDA=XPDST,XPDNM=XPDSET,Y=0
"RTN","XPDI",27,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=+$O(^(Y,0)) I '$D(XPDT("DA",%)) G NONE
"RTN","XPDI",28,0)
 W !
"RTN","XPDI",29,0)
 ;disable options question
"RTN","XPDI",30,0)
 D DIR^XPDIQ("XPZ") I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",31,0)
 ;XPDSET=set name,(also build name), of options that will be disabled
"RTN","XPDI",32,0)
 ;XPDSET1=setname or null if they don't want to disable
"RTN","XPDI",33,0)
 D  I XPDSET1="^" D ABRTALL(2) Q
"RTN","XPDI",34,0)
 .;if they say no, set XPDET1=""
"RTN","XPDI",35,0)
 .S:'$G(XPDQUES("XPZ1")) XPDSET1="",Y=0
"RTN","XPDI",36,0)
 .S ^XTMP("XQOO",XPDSET,0)=XPDSET_" is being installed by KIDS^"_DT_U_DUZ
"RTN","XPDI",37,0)
 .I XPDSET1]"" D  Q:XPDSET1="^"!(XPDSET1="")
"RTN","XPDI",38,0)
 ..;merge the options/protocols that were put in ^TMP($J,"XQOO",build name)
"RTN","XPDI",39,0)
 ..M ^XTMP("XQOO",XPDSET)=^TMP($J,"XQOO",XPDSET)
"RTN","XPDI",40,0)
 ..D INIT^XQOO(.XPDSET1) Q:"^"[XPDSET1
"RTN","XPDI",41,0)
 ..N DIR S DIR(0)="N^0:60:0",DIR("B")=0
"RTN","XPDI",42,0)
 ..S DIR("A")="Delay Install (Minutes)",DIR("?")="Enter the number of minutes to delay the installing of Routines after the Disable of Options"
"RTN","XPDI",43,0)
 ..W ! D ^DIR I $D(DIRUT) S XPDSET1="^"
"RTN","XPDI",44,0)
 .;Y is set in the call to DIR in previous .DO
"RTN","XPDI",45,0)
 .;save setname into first Build and the Delay in minutes, Y
"RTN","XPDI",46,0)
 .K XPD S XPD(9.7,XPDST_",",7)=(XPDSET1]"")_XPDSET,XPD(9.7,XPDST_",",8)=Y
"RTN","XPDI",47,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",48,0)
 ;check if they want to update other CPUs
"RTN","XPDI",49,0)
 I $G(XPDQUES("XPZ2")) D  I $D(DIRUT) D ABRTALL(2) Q
"RTN","XPDI",50,0)
 .N DA,DIE,DIR,DR,I,XPD,X,Y,Z
"RTN","XPDI",51,0)
 .;if they haven't already added Volume Sets, populate the mulitple
"RTN","XPDI",52,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) D  I $D(XPD) D UPDATE^DIE("","XPD")
"RTN","XPDI",53,0)
 ..X ^%ZOSF("UCI") S Y=$P(Y,",",2),(I,Z)=0
"RTN","XPDI",54,0)
 ..F  S I=$O(^%ZIS(14.5,I)) Q:'I  S X=$G(^(I,0)) S:$P(X,U)]""&$P(X,U,11)&($P(X,U)'=Y) Z=Z+1,XPD(9.703,"+"_Z_","_XPDA_",",.01)=$P(X,U)
"RTN","XPDI",55,0)
 .W !!,"I will Update the following VOLUME SETS:",!
"RTN","XPDI",56,0)
 .S I=0 F  S I=$O(^XPD(9.7,XPDA,"VOL",I)) Q:'I  W ?3,$P(^(I,0),U),!
"RTN","XPDI",57,0)
 .W ! S DIR(0)="Y",DIR("A")="Want to edit this list",DIR("B")="NO"
"RTN","XPDI",58,0)
 .D ^DIR Q:$D(DIRUT)  D:Y
"RTN","XPDI",59,0)
 ..S DA=XPDA,DIE="^XPD(9.7,",DR=30,DR(2,9.703)=".01"
"RTN","XPDI",60,0)
 ..D ^DIE
"RTN","XPDI",61,0)
 .I '$O(^XPD(9.7,XPDA,"VOL",0)) W !!,"No VOLUME SETS selected!!" Q
"RTN","XPDI",62,0)
 .Q:$$TM^%ZTLOAD  ;quit if Taskman is running
"RTN","XPDI",63,0)
 .W !!,"TASKMAN is not running. If you install now, you must run the routine XPDCPU",!,"in the production UCI for each of the VOLUME SETS you have listed once"
"RTN","XPDI",64,0)
 .W !,"the installation starts!!",!,"If you Queue the install, the VOLUME SETS will be updated automatically.",*7,*7,!!
"RTN","XPDI",65,0)
DEV S POP=0 S:'$D(^DD(3.5,0)) POP=1
"RTN","XPDI",66,0)
 ;check if home device is defined
"RTN","XPDI",67,0)
 I 'POP S IOP="",%ZIS=0 D ^%ZIS
"RTN","XPDI",68,0)
 ;Kernel Virgin Install
"RTN","XPDI",69,0)
 I POP S XPDA=XPDST D:$G(XPDIJ) XPDIJ^XPDI1 G EN^XPDIJ
"RTN","XPDI",70,0)
 ;set XPDA=starting Build, ask for device for messages
"RTN","XPDI",71,0)
 ;XPDNOQUE is defined means don't let them queue output
"RTN","XPDI",72,0)
 W !!,"Enter the Device you want to print the Install messages."
"RTN","XPDI",73,0)
 W:'$D(XPDNOQUE) !,"You can queue the install by enter a 'Q' at the device prompt."
"RTN","XPDI",74,0)
 W !,"Enter a '^' to abort the install.",!
"RTN","XPDI",75,0)
 S XPDA=XPDST,%ZIS=$P("Q",U,'$D(XPDNOQUE))
"RTN","XPDI",76,0)
 D ^%ZIS G:POP ASKABRT
"RTN","XPDI",77,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDI",78,0)
 S XPDD=$$FMADD^XLFDT(DT,7),^XTMP("XPDI",0)=XPDD_U_DT
"RTN","XPDI",79,0)
 I $D(IO("Q")) D  G ASKABRT:$D(ZTSK)[0 D XPDIJ^XPDI1:$G(XPDIJ),QUIT^XPDI1(XPDST) Q
"RTN","XPDI",80,0)
 .N %DT
"RTN","XPDI",81,0)
 .S %DT="AEFRSX",%DT("A")="Requested Start Time: ",(%DT("B"),%DT(0))="NOW"
"RTN","XPDI",82,0)
 .;queue time must be in the future, but not more than 7 days
"RTN","XPDI",83,0)
 .F  D ^%DT Q:$D(DTOUT)  D:$$FMDIFF^XLFDT(XPDD,Y)<0  Q:Y>0
"RTN","XPDI",84,0)
 ..W !!,"Start Date shouldn't be more than a week in the future!",*7
"RTN","XPDI",85,0)
 ..S Y=-1
"RTN","XPDI",86,0)
 .Q:$D(DTOUT)
"RTN","XPDI",87,0)
 .S ZTDTH=Y,ZTRTN="EN^XPDIJ",ZTDESC="KIDS install",ZTSAVE("XPDA")=""
"RTN","XPDI",88,0)
 .D ^%ZTLOAD,HOME^%ZIS K IO("Q")
"RTN","XPDI",89,0)
 .Q:$D(ZTSK)[0
"RTN","XPDI",90,0)
 .W !,"Install Queued!",!!
"RTN","XPDI",91,0)
 .;save task into first Build
"RTN","XPDI",92,0)
 .K XPD S XPD(9.7,XPDST_",",5)=ZTSK,XPDIT=0
"RTN","XPDI",93,0)
 .F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPD(9.7,+XPDT(XPDIT)_",",.02)=1 D FILE^DIE("","XPD") K XPD
"RTN","XPDI",94,0)
 ;run install
"RTN","XPDI",95,0)
 U IO D XPDIJ^XPDI1:$G(XPDIJ),EN^XPDIJ,QUIT^XPDI1(XPDST)
"RTN","XPDI",96,0)
 Q
"RTN","XPDI",97,0)
 ;
"RTN","XPDI",98,0)
 ;XPDA=ien to del, XPDK=1 kill global, XPDALL=1 deleting all
"RTN","XPDI",99,0)
 ;XPDST=starting package.
"RTN","XPDI",100,0)
ABORT(XPDA,XPDK,XPDALL) ;abort install of Build XPDA
"RTN","XPDI",101,0)
 N %,DA,DIK,XPDJ,XPDNM,Y
"RTN","XPDI",102,0)
 Q:'$D(^XPD(9.7,XPDA,0))  S XPDNM=$P(^(0),U)
"RTN","XPDI",103,0)
 W !,XPDNM," Build will not be installed",$S(XPDK=1:", Transport Global deleted!",1:""),!
"RTN","XPDI",104,0)
 S DIK="^XPD(9.7,",XPDJ=XPDT("NM",XPDNM),DA=XPDA
"RTN","XPDI",105,0)
 ;kill XPDT array, but don't kill global if XPDK=2
"RTN","XPDI",106,0)
 K XPDT("NM",XPDNM),XPDT("DA",XPDA),XPDT(XPDJ),XPDT("GP") Q:XPDK=2
"RTN","XPDI",107,0)
 K ^XTMP("XPDI",XPDA)
"RTN","XPDI",108,0)
 ;if we are not deleting all packages and we are deleting the starting package
"RTN","XPDI",109,0)
 ;set the next package to the starting package. It must always be 1.
"RTN","XPDI",110,0)
 I '$G(XPDALL),XPDA=XPDST S Y=$O(XPDT(0)) D:Y
"RTN","XPDI",111,0)
 .;unlock starting install
"RTN","XPDI",112,0)
 .L -^XPD(9.7,XPDST)
"RTN","XPDI",113,0)
 .S XPDST=+XPDT(Y),XPDT(1)=XPDT(Y),XPDT("DA",XPDST)=1,XPDT("NM",$P(XPDT(Y),U,2))=1,XPDIT=0
"RTN","XPDI",114,0)
 .K XPDT(Y) N XPD
"RTN","XPDI",115,0)
 .S %="XPD(9.7,"""_XPDST_","")",@%@(3)=XPDST,@%@(4)=1
"RTN","XPDI",116,0)
 .;loop thru the rest of the packages and reset the starting package field
"RTN","XPDI",117,0)
 .F  S Y=$O(XPDT(Y)) Q:'Y  D
"RTN","XPDI",118,0)
 ..S XPD(9.7,+XPDT(Y)_",",3)=XPDST
"RTN","XPDI",119,0)
 .D FILE^DIE("","XPD")
"RTN","XPDI",120,0)
 D ^DIK
"RTN","XPDI",121,0)
 Q
"RTN","XPDI",122,0)
ASKABRT ;ask if want to unload distribution
"RTN","XPDI",123,0)
 N DIR,DIRUT,X,Y
"RTN","XPDI",124,0)
 S XPDQUIT=1,DIR(0)="Y",DIR("A")="Install ABORTED, Want to remove the Transport Globals",DIR("B")="YES"
"RTN","XPDI",125,0)
 W ! D ^DIR I Y D ABRTALL(1) Q
"RTN","XPDI",126,0)
 L -^XPD(9.7,XPDST)
"RTN","XPDI",127,0)
 Q
"RTN","XPDI",128,0)
ABRTALL(XPDK) ;abort all Builds
"RTN","XPDI",129,0)
 N XPDA
"RTN","XPDI",130,0)
 S XPDT=0
"RTN","XPDI",131,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  S XPDA=+XPDT(XPDT) D ABORT(XPDA,XPDK,1)
"RTN","XPDI",132,0)
 ;unlock starting install
"RTN","XPDI",133,0)
 L -^XPD(9.7,XPDST)
"RTN","XPDI",134,0)
 Q
"RTN","XPDI",135,0)
NONE W !!,"**NOTHING INSTALLED**",!
"RTN","XPDI",136,0)
 Q
"RTN","XPDI1")
0^12^B13999857
"RTN","XPDI1",1,0)
XPDI1 ;SFISC/RSD - Cont of Install Process ;02/14/97  08:17
"RTN","XPDI1",2,0)
 ;;8.0;KERNEL;**58**;Jul 10, 1995
"RTN","XPDI1",3,0)
 ;lookup into file 9.7, XPDS=DIC("S") for lookup
"RTN","XPDI1",4,0)
 ;return 0-fail or ien, XPDT=array of linked builds
"RTN","XPDI1",5,0)
LOOK(XPDS) ;lookup Install
"RTN","XPDI1",6,0)
 N DIC,Y,XPD,XPDIT,%
"RTN","XPDI1",7,0)
 S DIC(0)="QEAMZ",DIC="^XPD(9.7,"
"RTN","XPDI1",8,0)
 S:$L($G(XPDS)) DIC("S")=XPDS
"RTN","XPDI1",9,0)
 D ^DIC Q:Y<0 0
"RTN","XPDI1",10,0)
 L +^XPD(9.7,+Y):0 E  W !,"Being accessed by another user" Q 0
"RTN","XPDI1",11,0)
 S XPD=+Y,XPDIT=0
"RTN","XPDI1",12,0)
 W !!,"This Distribution was loaded on ",$$FMTE^XLFDT($P(Y(0),U,3))," with header of ",!,$G(^XPD(9.7,XPD,2)),!,"It consisted of the following Install(s):",!
"RTN","XPDI1",13,0)
 ;build XPDT array
"RTN","XPDI1",14,0)
 F  S XPDIT=$O(^XPD(9.7,"ASP",XPD,XPDIT)) Q:'XPDIT  S Y=+$O(^(XPDIT,0)) D
"RTN","XPDI1",15,0)
 .S %=$P($G(^XPD(9.7,Y,0)),U)
"RTN","XPDI1",16,0)
 .I %="" W "**ERROR in Install, You need to remove the Distribution and reload it**",!  S XPDQUIT=1 Q
"RTN","XPDI1",17,0)
 .S XPDT(XPDIT)=Y_U_%,(XPDT("DA",Y),XPDT("NM",%))=XPDIT W %,!
"RTN","XPDI1",18,0)
 I '$O(XPDT(0)) S XPDQUIT=1 D QUIT(XPD)
"RTN","XPDI1",19,0)
 Q XPD
"RTN","XPDI1",20,0)
 ;
"RTN","XPDI1",21,0)
QUIT(Y) ;unlock ien Y
"RTN","XPDI1",22,0)
 L -^XPD(9.7,+Y) Q
"RTN","XPDI1",23,0)
 ;
"RTN","XPDI1",24,0)
QUES(XPDA) ;install questions; XPDA=ien in file 9.7
"RTN","XPDI1",25,0)
 N XPDANS,XPDFIL,XPDFILN,XPDFILO,XPDFLG,XPDNM,XPDQUES,X,Y
"RTN","XPDI1",26,0)
 S XPDNM=$P(^XPD(9.7,XPDA,0),U) W !!,"Install Questions for ",XPDNM,!
"RTN","XPDI1",27,0)
 ;pre-init questions
"RTN","XPDI1",28,0)
 D DIR^XPDIQ("PRE") I $D(XPDQUIT) D ASKABRT^XPDI Q
"RTN","XPDI1",29,0)
 ;file install questions
"RTN","XPDI1",30,0)
 S (XPDFIL,XPDFLG)=0
"RTN","XPDI1",31,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL),X(0)=^(XPDFIL,0),X(1)=^(XPDFIL),XPDFILO=^(0,1) D  Q:$D(XPDQUIT)
"RTN","XPDI1",32,0)
 .;check for DD screening logic
"RTN","XPDI1",33,0)
 .I $G(^(10))]"" N XPDSCR S XPDSCR=^(10) ;^(10) is ref to ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,10) from prev line
"RTN","XPDI1",34,0)
 .;XPDFILN=file name^global ref^partial DD
"RTN","XPDI1",35,0)
 .;XPDANS=new file^DD screen failed^Data exists^update file name^user
"RTN","XPDI1",36,0)
 .;doesn't want to update data  1=yes,0=no
"RTN","XPDI1",37,0)
 .S XPDFILN=X_X(0)_U_X(1),XPDANS='($D(^DIC(XPDFIL,0))#2)_"^^"_''$O(@(X(0)_"0)"))
"RTN","XPDI1",38,0)
 .I 'XPDFLG W !,"Incoming Files:" S XPDFLG=1
"RTN","XPDI1",39,0)
 .W ! D DIR^XPDIQ("XPF",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI1",40,0)
 .S:$G(XPDQUES("XPF"_XPDFIL_"#2"))=0 $P(XPDANS,U,5)=1
"RTN","XPDI1",41,0)
 .S ^XTMP("XPDI",XPDA,"FIA",XPDFIL,0,2)=XPDANS
"RTN","XPDI1",42,0)
 .;kill the answers so we can re-ask for next file
"RTN","XPDI1",43,0)
 .F I=1:1:2 K XPDQUES("XPF"_XPDFIL_"#"_I)
"RTN","XPDI1",44,0)
 ;XPDQUIT is by file questions in previous do loop, set in XPDIQ
"RTN","XPDI1",45,0)
 I $D(XPDQUIT) D ASKABRT^XPDI Q
"RTN","XPDI1",46,0)
 ;ask for coordinators to incoming mail groups
"RTN","XPDI1",47,0)
 S (XPDFIL,XPDFLG)=0
"RTN","XPDI1",48,0)
 F  S XPDFIL=$O(^XTMP("XPDI",XPDA,"KRN",3.8,XPDFIL)) Q:'XPDFIL  S X=^(XPDFIL,0) D  Q:$D(XPDQUIT)
"RTN","XPDI1",49,0)
 .;XPDANS=Mail Group name
"RTN","XPDI1",50,0)
 .S XPDANS=$P(X,U)
"RTN","XPDI1",51,0)
 .I 'XPDFLG W !!,"Incoming Mail Groups:" S XPDFLG=1
"RTN","XPDI1",52,0)
 .W ! D DIR^XPDIQ("XPM",XPDFIL_"#") Q:$D(XPDQUIT)
"RTN","XPDI1",53,0)
 .;kill the answers so we can re-ask for next MG
"RTN","XPDI1",54,0)
 .K XPDQUES("XPM"_XPDFIL_"#1")
"RTN","XPDI1",55,0)
 .Q
"RTN","XPDI1",56,0)
 I $D(XPDQUIT) D ASKABRT^XPDI Q
"RTN","XPDI1",57,0)
 ;post-init questions
"RTN","XPDI1",58,0)
 W ! D DIR^XPDIQ("POS") I $D(DIRUT)!$D(XPDQUIT) D ASKABRT^XPDI Q
"RTN","XPDI1",59,0)
 Q
"RTN","XPDI1",60,0)
 ;
"RTN","XPDI1",61,0)
XQSET(XPDA) ;get options & protocols to disable
"RTN","XPDI1",62,0)
 ;put in ^TMP($J,"XQOO",starting build name)
"RTN","XPDI1",63,0)
 N A,I,X,Y
"RTN","XPDI1",64,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",19,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI1",65,0)
 .S Y=$O(^DIC(19,"B",$P(X,U),0))
"RTN","XPDI1",66,0)
 .;check that option exist and 0=send,1=delete,3=merge or 5=disable
"RTN","XPDI1",67,0)
 .I Y,$D(^DIC(19,Y,0)),$S('A:1,1:A#2) S ^TMP($J,"XQOO",XPDSET,19,Y)=$P(^(0),U,1,2)
"RTN","XPDI1",68,0)
 S I=0 F  S I=$O(^XTMP("XPDI",XPDA,"KRN",101,I)) Q:'I  S X=^(I,0),A=^(-1) D
"RTN","XPDI1",69,0)
 .S Y=$O(^ORD(101,"B",$P(X,U),0))
"RTN","XPDI1",70,0)
 .I Y,$D(^ORD(101,Y,0)),$S(A=3:1,A=5:1,1:'A) S ^TMP($J,"XQOO",XPDSET,101,Y)=$P(^(0),U,1,2)
"RTN","XPDI1",71,0)
 Q
"RTN","XPDI1",72,0)
 ;XPDIJ need to install XPDIJ now & set routine flag to skip
"RTN","XPDI1",73,0)
XPDIJ N DIE,XPDA,XCM,XCN,XCS,X
"RTN","XPDI1",74,0)
 S XPDA=XPDIJ,DIE="^XTMP(""XPDI"",XPDIJ,""RTN"",""XPDIJ"",",XCN=0,X="XPDIJ"
"RTN","XPDI1",75,0)
 X ^%ZOSF("SAVE")
"RTN","XPDI1",76,0)
 S XCN=$$RTNUP^XPDUTL("XPDIJ",2)
"RTN","XPDI1",77,0)
 Q
"RTN","XPDIA")
0^9^B53306641
"RTN","XPDIA",1,0)
XPDIA ;SFISC/RSD - Install Pre/Post Actions for Kernel Files ;03/19/97  13:11
"RTN","XPDIA",2,0)
 ;;8.0;KERNEL;**10,15,21,28,44,58**;Jul 10, 1995
"RTN","XPDIA",3,0)
 Q
"RTN","XPDIA",4,0)
OPTF1 ;options file pre
"RTN","XPDIA",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",6,0)
 Q
"RTN","XPDIA",7,0)
OPTE1 ;options entry pre
"RTN","XPDIA",8,0)
 N %,I
"RTN","XPDIA",9,0)
 ;XPDFL= 0-send,1-delete,2-link,3-merge,4-attach,5-disable
"RTN","XPDIA",10,0)
 ;attach & disable never get here
"RTN","XPDIA",11,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",12,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",13,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",19,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",19,OLDA,10)
"RTN","XPDIA",14,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",15,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",16,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",17,0)
 I $G(XPDNEW) D:XPDSET  Q
"RTN","XPDIA",18,0)
 .;quit if option already has out of order msg.
"RTN","XPDIA",19,0)
 .Q:$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)]""
"RTN","XPDIA",20,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",21,0)
 .D ADD^XQOO1($P(XPDSET,U,2),19,DA)
"RTN","XPDIA",22,0)
 S I=^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),%=^DIC(19,DA,0)
"RTN","XPDIA",23,0)
 ;$P(%,U,3)=out of order message, keep sending ooo msg
"RTN","XPDIA",24,0)
 S:$P(I,U,3)="" $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",25,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",26,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",27,0)
 ;if there is no reverse key, save the old key and flag
"RTN","XPDIA",28,0)
 I $P($G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3)),U)="",$L($P($G(^DIC(19,DA,3)),U)) S $P(I,U,16)=$P(%,U,16),$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3),U)=$P(^(3),U)
"RTN","XPDIA",29,0)
 S ^XTMP("XPDI",XPDA,"KRN",19,OLDA,0)=I
"RTN","XPDIA",30,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",31,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",19,OLDA,1,0)) ^DIC(19,DA,1)
"RTN","XPDIA",32,0)
 ;kill old RCPs (RPC)
"RTN","XPDIA",33,0)
 K ^DIC(19,DA,"RPC")
"RTN","XPDIA",34,0)
 ;if Menu Text, (U;1) is different, kill C x-ref
"RTN","XPDIA",35,0)
 S I=$G(^DIC(19,DA,"U")) I I]"",I'=$G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,"U")) K ^DIC(19,"C",I)
"RTN","XPDIA",36,0)
 S I=0
"RTN","XPDIA",37,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",38,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",39,0)
 ;the file post action as a relink
"RTN","XPDIA",40,0)
 Q:XPDFL=3
"RTN","XPDIA",41,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",42,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",43,0)
 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^DIC(19,"AD",%,DA,I)
"RTN","XPDIA",44,0)
 ;kill Menus (10)
"RTN","XPDIA",45,0)
 K ^DIC(19,DA,10)
"RTN","XPDIA",46,0)
 Q
"RTN","XPDIA",47,0)
OPTF2 ;options file post
"RTN","XPDIA",48,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",49,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",50,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",51,0)
 .;if use as link then goto OPTFL, just update menus
"RTN","XPDIA",52,0)
 .G:ACT=2 OPTFL
"RTN","XPDIA",53,0)
 .;repoint Bulletin (220;1) and Mail Group (220;3)
"RTN","XPDIA",54,0)
 .S Y0=$G(^DIC(19,DA,220)) I Y0]"" S $P(Y0,U)=$$LK("^XMB(3.6)",$P(Y0,U)),$P(Y0,U,3)=$$LK("^XMB(3.8)",$P(Y0,U,3)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",55,0)
 .;repoint RPC (RPC;1)
"RTN","XPDIA",56,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,"RPC",I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",57,0)
 ..S Y=$$LK("^XWB(8994)",Y0)
"RTN","XPDIA",58,0)
 ..I 'Y K ^DIC(19,DA,"RPC",I) D BMES^XPDUTL(" RPC "_Y0_" in Option "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",59,0)
 ..S $P(^DIC(19,DA,"RPC",I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",60,0)
 .S:X $P(^DIC(19,DA,"RPC",0),U,3,4)=X
"RTN","XPDIA",61,0)
 .;repoint Package (0;12) and Help Frame (0;7)
"RTN","XPDIA",62,0)
 .S Y0=^DIC(19,DA,0),$P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),$P(Y0,U,7)=$$LK("^DIC(9.2)",$P(Y0,U,7)),^DIC(19,DA,0)=Y0
"RTN","XPDIA",63,0)
OPTFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",64,0)
 .;merged, they could also be linked menu, but treat like merge
"RTN","XPDIA",65,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",66,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",67,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",68,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",69,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",70,0)
 ...S Y=$$LK("^DIC(19)",Y0)
"RTN","XPDIA",71,0)
 ...K ^DIC(19,DA,10,I,U)
"RTN","XPDIA",72,0)
 ...I 'Y K ^DIC(19,DA,10,I) D BMES^XPDUTL(" Option "_Y0_" in Menu "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",73,0)
 ...S $P(^DIC(19,DA,10,I,0),U)=Y
"RTN","XPDIA",74,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",75,0)
 .S:X $P(^DIC(19,DA,10,0),U,3,4)=X
"RTN","XPDIA",76,0)
 .;re-index this option
"RTN","XPDIA",77,0)
 .D IX1^DIK
"RTN","XPDIA",78,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",79,0)
 Q
"RTN","XPDIA",80,0)
OPTDEL ;option delete
"RTN","XPDIA",81,0)
 D DEL("^DIC(19,",DUZ)
"RTN","XPDIA",82,0)
 D OPT^XPDIA2
"RTN","XPDIA",83,0)
 Q
"RTN","XPDIA",84,0)
PROF1 ;protocols file pre
"RTN","XPDIA",85,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",86,0)
 Q
"RTN","XPDIA",87,0)
PROE1 ;protocols entry pre
"RTN","XPDIA",88,0)
 N %,I
"RTN","XPDIA",89,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",90,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",91,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",101,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",101,OLDA,10)
"RTN","XPDIA",92,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",93,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",94,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",95,0)
 I $G(XPDNEW) D:XPDSET  Q
"RTN","XPDIA",96,0)
 .;quit if option already has out of order msg.
"RTN","XPDIA",97,0)
 .Q:$P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)]""
"RTN","XPDIA",98,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",99,0)
 .D ADD^XQOO1($P(XPDSET,U,2),101,DA)
"RTN","XPDIA",100,0)
 S I=^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),%=^ORD(101,DA,0)
"RTN","XPDIA",101,0)
 ;$P(%,U,3)=disable message,
"RTN","XPDIA",102,0)
 S:$P(I,U,3)]"" $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",103,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",104,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",105,0)
 S ^XTMP("XPDI",XPDA,"KRN",101,OLDA,0)=I
"RTN","XPDIA",106,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",107,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",101,OLDA,1,0)) ^ORD(101,DA,1)
"RTN","XPDIA",108,0)
 ;kill old ACCESS multiple
"RTN","XPDIA",109,0)
 K ^ORD(101,DA,3) S I=0
"RTN","XPDIA",110,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",111,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",112,0)
 ;the file post action as a relink
"RTN","XPDIA",113,0)
 Q:XPDFL=3
"RTN","XPDIA",114,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",115,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",116,0)
 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^ORD(101,"AD",%,DA,I)
"RTN","XPDIA",117,0)
 K ^ORD(101,DA,10)
"RTN","XPDIA",118,0)
 Q
"RTN","XPDIA",119,0)
PROF2 ;protocols file post
"RTN","XPDIA",120,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",121,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",122,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",123,0)
 .;if use as link then goto PROFL, just update menus
"RTN","XPDIA",124,0)
 .G:ACT=2 PROFL
"RTN","XPDIA",125,0)
 .;repoint Package (0;12)
"RTN","XPDIA",126,0)
 .S Y0=^ORD(101,DA,0) S:$L($P(Y0,U,12)) $P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),^ORD(101,DA,0)=Y0
"RTN","XPDIA",127,0)
 .;repoint File Link (5;1), its a variable pointer
"RTN","XPDIA",128,0)
 .S Y0=$P($G(^ORD(101,DA,5)),U),Y=$P(Y0,";",2),Y0=$P(Y0,";")
"RTN","XPDIA",129,0)
 .I Y0,$L(Y) S Y0=$O(@("^"_Y_"""B"","""_Y0_""",0)")),$P(^ORD(101,DA,5),U)=$S(Y0:Y0_";"_Y,1:"")
"RTN","XPDIA",130,0)
 .;repoint HL7 fields, node 770
"RTN","XPDIA",131,0)
 .S Y0=$G(^ORD(101,DA,770)) I $L(Y0) D  S ^ORD(101,DA,770)=Y0
"RTN","XPDIA",132,0)
 ..S $P(Y0,U)=$$LK("^HL(771)",$P(Y0,U)),$P(Y0,U,2)=$$LK("^HL(771)",$P(Y0,U,2))
"RTN","XPDIA",133,0)
 ..S $P(Y0,U,3)=$$LK("^HL(771.2)",$P(Y0,U,3)),$P(Y0,U,11)=$$LK("^HL(771.2)",$P(Y0,U,11))
"RTN","XPDIA",134,0)
 ..S $P(Y0,U,4)=$$LK("^HL(779.001)",$P(Y0,U,4)),$P(Y0,U,7)=$$LK("^HLCS(870)",$P(Y0,U,7))
"RTN","XPDIA",135,0)
 ..S $P(Y0,U,8)=$$LK("^HL(779.003)",$P(Y0,U,8)),$P(Y0,U,9)=$$LK("^HL(779.003)",$P(Y0,U,9))
"RTN","XPDIA",136,0)
 ..S $P(Y0,U,10)=$$LK("^HL(771.5)",$P(Y0,U,10))
"RTN","XPDIA",137,0)
 .;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDIA",138,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,3,I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",139,0)
 ..;Y0=.01 of Access(Security Key)
"RTN","XPDIA",140,0)
 ..S Y=$$LK("^DIC(19.1)",Y0)
"RTN","XPDIA",141,0)
 ..I 'Y K ^ORD(101,DA,3,I) D BMES^XPDUTL(" Key "_Y0_" in Protocol "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",142,0)
 ..S $P(^ORD(101,DA,3,I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",143,0)
 .S:X $P(^ORD(101,DA,3,0),U,3,4)=X
"RTN","XPDIA",144,0)
PROFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",145,0)
 .;merged, they are also linked menu, but treat like merge
"RTN","XPDIA",146,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",147,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",148,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",149,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",150,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",151,0)
 ...S Y=$$LK("^ORD(101)",Y0)
"RTN","XPDIA",152,0)
 ...K ^ORD(101,DA,10,I,U)
"RTN","XPDIA",153,0)
 ...I 'Y K ^ORD(101,DA,10,I) D BMES^XPDUTL(" Protocol "_Y0_" in Protocol Menu "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",154,0)
 ...S $P(^ORD(101,DA,10,I,0),U)=Y
"RTN","XPDIA",155,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",156,0)
 .S:X $P(^ORD(101,DA,10,0),U,3,4)=X
"RTN","XPDIA",157,0)
 .;re-index this option
"RTN","XPDIA",158,0)
 .D IX1^DIK
"RTN","XPDIA",159,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",160,0)
 Q
"RTN","XPDIA",161,0)
PRODEL ;option delete
"RTN","XPDIA",162,0)
 D DEL("^ORD(101,",DUZ)
"RTN","XPDIA",163,0)
 Q
"RTN","XPDIA",164,0)
LK(GR,X) ;lookup, GR=global root, X=lookup value
"RTN","XPDIA",165,0)
 Q:$G(X)="" ""
"RTN","XPDIA",166,0)
 N I S I=$O(@GR@("B",X,0))
"RTN","XPDIA",167,0)
 I I,$D(@GR@(I,0))#2 Q I
"RTN","XPDIA",168,0)
 Q ""
"RTN","XPDIA",169,0)
 ;
"RTN","XPDIA",170,0)
ADD(XPDSDD,XPDSDA,X) ;add to multiple, XPDSDD=sub DD#, XPDSDA=DA, X=value
"RTN","XPDIA",171,0)
 Q:$G(X)=""
"RTN","XPDIA",172,0)
 N XPD
"RTN","XPDIA",173,0)
 S XPD(XPDSDD,"?+1,"_XPDSDA_",",.01)=X
"RTN","XPDIA",174,0)
 D UPDATE^DIE("E","XPD")
"RTN","XPDIA",175,0)
 Q
"RTN","XPDIA",176,0)
 ;this is used to add menu items to an option or protocol
"RTN","XPDIA",177,0)
MENU(DA,X,X0) ;DA=ien of option/protocol, X=Menu item, X0=0 node of menu item
"RTN","XPDIA",178,0)
 N DIC,DLAYGO,DIK,D0,D1,I,Y,Y0
"RTN","XPDIA",179,0)
 S DIC=$S(XPDFIL=19:"^DIC(19,",1:"^ORD(101,")_DA_",10,",DIC(0)="L",DLAYGO=XPDFIL,(D0,DA(1))=DA
"RTN","XPDIA",180,0)
 S:'$D(@(DIC_"0)")) @(DIC_"0)")=U_$P(^DD(XPDFIL,10,0),U,2)
"RTN","XPDIA",181,0)
 S:$L($G(X0)) DIC("DR")="2///"_$P(X0,U,2)_";3///"_$P(X0,U,3)_$S($L($P(X0,U,4)):";4///"_$P(X0,U,4)_";5///"_$P(X0,U,5)_";6///"_$P(X0,U,6),1:"")
"RTN","XPDIA",182,0)
 D ^DIC
"RTN","XPDIA",183,0)
 Q
"RTN","XPDIA",184,0)
DEL(DIK,DUZ) ;delete
"RTN","XPDIA",185,0)
 N DA,XPDI,XPDF
"RTN","XPDIA",186,0)
 S XPDI=0,DUZ(0)="@",XPDF=+$P(DIK,"(",2)
"RTN","XPDIA",187,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D
"RTN","XPDIA",188,0)
 .K ^TMP("DIFIXPT",$J) S DA=XPDI
"RTN","XPDIA",189,0)
 .D ^DIK ;FIXPT^DIA3("D",XPDF,XPDI)
"RTN","XPDIA",190,0)
 .I $D(^TMP("DIFIXPT",$J))  D WP^XPDUTL("^TMP(""DIFIXPT"",$J)")
"RTN","XPDIA",191,0)
 Q
"RTN","XPDIA1")
0^17^B29250424
"RTN","XPDIA1",1,0)
XPDIA1 ;SFISC/RSD - Install Pre/Post Actions for Kernel files cont. ;02/07/97  11:11
"RTN","XPDIA1",2,0)
 ;;8.0;KERNEL;**2,44,51,58**;Jul 10, 1995
"RTN","XPDIA1",3,0)
 Q
"RTN","XPDIA1",4,0)
HLPF1 ;help frames file pre
"RTN","XPDIA1",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",6,0)
 Q
"RTN","XPDIA1",7,0)
HLPE1 ;entry pre
"RTN","XPDIA1",8,0)
 S ^TMP($J,"XPD",DA)="" K ^DIC(9.2,DA,1),^(2),^(3),^(10)
"RTN","XPDIA1",9,0)
 Q
"RTN","XPDIA1",10,0)
HLPF2 ;file post
"RTN","XPDIA1",11,0)
 N DA,DIK,I,X,Y,Y0
"RTN","XPDIA1",12,0)
 ;need to send error message, need to setup message
"RTN","XPDIA1",13,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",14,0)
 .;repoint Related Frame (2;0)
"RTN","XPDIA1",15,0)
 .S I=0 F  S I=$O(^DIC(9.2,DA,2,I)) Q:'I  S Y0=$G(^(I,0)),Y=$$LK^XPDIA("^DIC(9.2)",$P(Y0,U,2)),$P(^DIC(9.2,DA,2,I,0),U,2)=Y
"RTN","XPDIA1",16,0)
 .;repoint OBJECT (10;0)
"RTN","XPDIA1",17,0)
 .S (I,X)=0 F  S I=$O(^DIC(9.2,DA,10,I)) Q:'I  S Y0=$G(^(I,0)) D
"RTN","XPDIA1",18,0)
 ..S Y=$$LK^XPDIA("^MAG",$P(Y0,U)) S:Y $P(^DIC(9.2,DA,10,I,0),U)=Y,X=X+1_U_I
"RTN","XPDIA1",19,0)
 ..K:'Y ^DIC(9.2,DA,10,I)
"RTN","XPDIA1",20,0)
 .I X S $P(^DIC(9.2,DA,10,0),U,3,4)=$P(X,U,2)_U_+X
"RTN","XPDIA1",21,0)
 .D IX1^DIK
"RTN","XPDIA1",22,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",23,0)
 Q
"RTN","XPDIA1",24,0)
HLPDEL ;help frame delete
"RTN","XPDIA1",25,0)
 N DA,DIK,XPDI,XPDJ
"RTN","XPDIA1",26,0)
 S XPDI=0
"RTN","XPDIA1",27,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)),XPDJ=0 Q:'XPDI  D
"RTN","XPDIA1",28,0)
 .S DIK="^DIC(9.2,XPDJ,2,"
"RTN","XPDIA1",29,0)
 .;check other frames that point to this one
"RTN","XPDIA1",30,0)
 .F  S XPDJ=$O(^DIC(9.2,"AE",XPDI,XPDJ)) Q:'XPDJ  S Z=$O(^(XPDJ,0)) D:Z
"RTN","XPDIA1",31,0)
 ..K DA S DA=Z,DA(1)=XPDJ D ^DIK
"RTN","XPDIA1",32,0)
 .;delete this frame
"RTN","XPDIA1",33,0)
 .K DA S DA=XPDI,DIK="^DIC(9.2," D ^DIK
"RTN","XPDIA1",34,0)
 Q
"RTN","XPDIA1",35,0)
BULE1 ;bulletin entry pre
"RTN","XPDIA1",36,0)
 N X,I S I=0
"RTN","XPDIA1",37,0)
 ;save current Mail Groups (2)
"RTN","XPDIA1",38,0)
 I $G(^XMB(3.6,DA,2,0))]"" S X(0)=^(0) F  S I=$O(^XMB(3.6,DA,2,I)) Q:'I  S X(I)=$G(^(I,0))
"RTN","XPDIA1",39,0)
 K ^XMB(3.6,DA)
"RTN","XPDIA1",40,0)
 ;after killing data, put back Mail Groups before data merge
"RTN","XPDIA1",41,0)
 I $D(X) S ^XMB(3.6,DA,2,0)=X(0),I=0 F  S I=$O(X(I)) Q:'I  S ^XMB(3.6,DA,2,I,0)=X(I)
"RTN","XPDIA1",42,0)
 Q
"RTN","XPDIA1",43,0)
BULDEL ;del bulletins
"RTN","XPDIA1",44,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",45,0)
 S XPDI=0,DIK="^XMB(3.6,"
"RTN","XPDIA1",46,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",47,0)
 Q
"RTN","XPDIA1",48,0)
MAILGF1 ;mail groups file pre
"RTN","XPDIA1",49,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",50,0)
 Q
"RTN","XPDIA1",51,0)
MAILGE1 ;mail group entry pre
"RTN","XPDIA1",52,0)
 N I,J
"RTN","XPDIA1",53,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",54,0)
 ;save MEMBER GROUPS (5;0)
"RTN","XPDIA1",55,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5,0)) M ^TMP($J,"XPD",DA,5)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,5)
"RTN","XPDIA1",56,0)
 ;save MEMBER - REMOTE (6;0)
"RTN","XPDIA1",57,0)
 I $O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6,0)) M ^TMP($J,"XPD",DA,6)=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6) K ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,6)
"RTN","XPDIA1",58,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA1",59,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,2,0)) ^XMB(3.8,DA,2)
"RTN","XPDIA1",60,0)
 S I=^XMB(3.8,DA,0),J=^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)
"RTN","XPDIA1",61,0)
 ;save REFERENCE COUNT (0;4) & LAST REFERENCED (0;5)
"RTN","XPDIA1",62,0)
 S:$P(I,U,4) $P(J,U,4)=$P(I,U,4) S:$P(I,U,5) $P(J,U,5)=$P(I,U,5)
"RTN","XPDIA1",63,0)
 ;check COORDINATOR (0;7), if exist then save, else bring in one that was asked during install question
"RTN","XPDIA1",64,0)
 D
"RTN","XPDIA1",65,0)
 .I $P(I,U,7) S $P(J,U,7)=$P(I,U,7) Q
"RTN","XPDIA1",66,0)
 .S %=$O(^XPD(9.7,XPDA,"QUES","B","XPM"_OLDA_"#1",0)) Q:'%
"RTN","XPDIA1",67,0)
 .S:$G(^XPD(9.7,XPDA,"QUES",%,1)) $P(J,U,7)=^(1)
"RTN","XPDIA1",68,0)
 S ^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,0)=J,I=$G(^XMB(3.8,DA,3))
"RTN","XPDIA1",69,0)
 ;save ORGANIZER (3;1)
"RTN","XPDIA1",70,0)
 I $P(I,U) S $P(^XTMP("XPDI",XPDA,"KRN",3.8,OLDA,3),U)=$P(I,U)
"RTN","XPDIA1",71,0)
 Q
"RTN","XPDIA1",72,0)
MAILGF2 ;mail group file post
"RTN","XPDIA1",73,0)
 N DA,DIK,XPDMDA,XPDI,Y
"RTN","XPDIA1",74,0)
 S XPDMDA=0,DIK="^XMB(3.8,"
"RTN","XPDIA1",75,0)
 F  S XPDMDA=$O(^TMP($J,"XPD",XPDMDA)) Q:'XPDMDA  D
"RTN","XPDIA1",76,0)
 .;merge & repoint MEMBER GROUP (5;0)
"RTN","XPDIA1",77,0)
 .S XPDI=0
"RTN","XPDIA1",78,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,5,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.811,XPDMDA,Y)
"RTN","XPDIA1",79,0)
 .;merge & repoint MEMBER - REMOTE (6;0)
"RTN","XPDIA1",80,0)
 .S XPDI=0
"RTN","XPDIA1",81,0)
 .F  S XPDI=$O(^TMP($J,"XPD",XPDMDA,6,XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D:Y]"" ADD^XPDIA(3.812,XPDMDA,Y)
"RTN","XPDIA1",82,0)
 .S DA=XPDMDA D IX1^DIK
"RTN","XPDIA1",83,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",84,0)
 Q
"RTN","XPDIA1",85,0)
HLAPF1 ;HL7 application parameter #771 file pre
"RTN","XPDIA1",86,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",87,0)
 Q
"RTN","XPDIA1",88,0)
HLAPE1 ;HL7 application parameter #771 entry pre
"RTN","XPDIA1",89,0)
 N I,J
"RTN","XPDIA1",90,0)
 S ^TMP($J,"XPD",DA)=""
"RTN","XPDIA1",91,0)
 S I=^HL(771,DA,0),J=^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)
"RTN","XPDIA1",92,0)
 ;save FACILITY NAME (0;3)
"RTN","XPDIA1",93,0)
 S:$P(I,U,3)]"" $P(J,U,3)=$P(I,U,3)
"RTN","XPDIA1",94,0)
 ;repoint MAIL GROUP (0;4)
"RTN","XPDIA1",95,0)
 S:$P(J,U,4)]"" $P(J,U,4)=$$LK^XPDIA("^XMB(3.8)",$P(J,U,4))
"RTN","XPDIA1",96,0)
 ;repoint COUNTRY CODE (0;7)
"RTN","XPDIA1",97,0)
 S:$P(J,U,7)]"" $P(J,U,7)=$$LK^XPDIA("^HL(779.004)",$P(J,U,7))
"RTN","XPDIA1",98,0)
 S ^XTMP("XPDI",XPDA,"KRN",771,OLDA,0)=J
"RTN","XPDIA1",99,0)
 ;remove HL7 SEGMENT (SEG;0), HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",100,0)
 K ^HL(771,DA,"SEG"),^("MSG")
"RTN","XPDIA1",101,0)
 Q
"RTN","XPDIA1",102,0)
HLAPF2 ;HL7 application parameter #771 file post
"RTN","XPDIA1",103,0)
 N DA,DIK,XPDI,X,Y
"RTN","XPDIA1",104,0)
 S DA=0,DIK="^HL(771,"
"RTN","XPDIA1",105,0)
 F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  D
"RTN","XPDIA1",106,0)
 .;repoint HL7 SEGMENT (SEG;0)
"RTN","XPDIA1",107,0)
 .S XPDI=0
"RTN","XPDIA1",108,0)
 .F  S XPDI=$O(^HL(771,DA,"SEG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",109,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",110,0)
 ..I X]"" S $P(^HL(771,DA,"SEG",XPDI,0),U)=X Q
"RTN","XPDIA1",111,0)
 ..K ^HL(771,DA,"SEG",XPDI)
"RTN","XPDIA1",112,0)
 .;repoint HL7 MESSAGE (MSG;0)
"RTN","XPDIA1",113,0)
 .S XPDI=0
"RTN","XPDIA1",114,0)
 .F  S XPDI=$O(^HL(771,DA,"MSG",XPDI)) Q:'XPDI  S Y=$P($G(^(XPDI,0)),U) D
"RTN","XPDIA1",115,0)
 ..S X=$$LK^XPDIA("^HL(771.3)",$P(Y,U))
"RTN","XPDIA1",116,0)
 ..I X]"" S $P(^HL(771,DA,"MSG",XPDI,0),U)=X Q
"RTN","XPDIA1",117,0)
 ..K ^HL(771,DA,"MSG",XPDI)
"RTN","XPDIA1",118,0)
 .D IX1^DIK
"RTN","XPDIA1",119,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA1",120,0)
 Q
"RTN","XPDIA1",121,0)
HLLLPE ;HL7 lower level protocol #869.2 entry pre
"RTN","XPDIA1",122,0)
 N I
"RTN","XPDIA1",123,0)
 S I=$P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)
"RTN","XPDIA1",124,0)
 ;repoint LLP TYPE (0;2)
"RTN","XPDIA1",125,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,0),U,2)=$$LK^XPDIA("^HLCS(869.1)",I)
"RTN","XPDIA1",126,0)
 S I=$P($G(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100)),U)
"RTN","XPDIA1",127,0)
 ;repoint MAIL GROUP (100;1)
"RTN","XPDIA1",128,0)
 S:I]"" $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,100),U)=$$LK^XPDIA("^XMB(3.8)",I)
"RTN","XPDIA1",129,0)
 ;save HLLP DEVICE (200;1)
"RTN","XPDIA1",130,0)
 S I=$G(^HLCS(869.2,DA,200))
"RTN","XPDIA1",131,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,200),U)=$P(I,U)
"RTN","XPDIA1",132,0)
 ;save X3.28 DEVICE (300;1)
"RTN","XPDIA1",133,0)
 S I=$G(^HLCS(869.2,DA,300))
"RTN","XPDIA1",134,0)
 S:I $P(^XTMP("XPDI",XPDA,"KRN",869.2,OLDA,300),U)=$P(I,U)
"RTN","XPDIA1",135,0)
 Q
"RTN","XPDIA1",136,0)
HLLLE ;HL7 logical link #870 entry pre
"RTN","XPDIA1",137,0)
 N I,J
"RTN","XPDIA1",138,0)
 S I=^HLCS(870,DA,0),J=^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)
"RTN","XPDIA1",139,0)
 ;repoint INSTITUTION (0;2)
"RTN","XPDIA1",140,0)
 S:$P(J,U,2)]"" $P(J,U,2)=$$LK^XPDIA("^DIC(4)",$P(J,U,2))
"RTN","XPDIA1",141,0)
 ;repoint LLP PARAMETER (0;3)
"RTN","XPDIA1",142,0)
 S:$P(J,U,3)]"" $P(J,U,3)=$$LK^XPDIA("^HLCS(869.2)",$P(J,U,3))
"RTN","XPDIA1",143,0)
 ;save QUEUE SIZE (0;21)
"RTN","XPDIA1",144,0)
 S:$P(I,U,21)]"" $P(J,U,21)=$P(I,U,21)
"RTN","XPDIA1",145,0)
 S ^XTMP("XPDI",XPDA,"KRN",870,OLDA,0)=J
"RTN","XPDIA1",146,0)
 Q
"RTN","XPDIA1",147,0)
KEYDEL ;del security keys
"RTN","XPDIA1",148,0)
 N XPDI S XPDI=0
"RTN","XPDIA1",149,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D DEL^XPDKEY(XPDI)
"RTN","XPDIA1",150,0)
 Q
"RTN","XPDIA1",151,0)
LMDEL ;del list manager templates
"RTN","XPDIA1",152,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",153,0)
 S XPDI=0,DIK="^SD(409.61,"
"RTN","XPDIA1",154,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",155,0)
 Q
"RTN","XPDIA1",156,0)
RPCDEL ;del Kernel RPCs
"RTN","XPDIA1",157,0)
 N DA,DIK,XPDI
"RTN","XPDIA1",158,0)
 S XPDI=0,DIK="^XWB(8994,"
"RTN","XPDIA1",159,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  S DA=XPDI D ^DIK
"RTN","XPDIA1",160,0)
 Q
"RTN","XPDIB")
0^13^B4013822
"RTN","XPDIB",1,0)
XPDIB ;SFISC/RSD - Backup installed Package ;01/29/97  10:43
"RTN","XPDIB",2,0)
 ;;8.0;KERNEL;**10,58**;Jul 10, 1995
"RTN","XPDIB",3,0)
EN ;
"RTN","XPDIB",4,0)
 N XCNP,DIF,DIR,DIRUT,XMSUB,XMDUZ,XMDISPI,XMZ,XPD,XPDA,XPDNM,XPDQUIT,XPDST,XPDT,X,Y,%
"RTN","XPDIB",5,0)
 S %="I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK^XPDI1(%)
"RTN","XPDIB",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDIB",7,0)
 S DIR(0)="F^3:65",DIR("A")="Subject",DIR("?")="Enter the subject for this Packman Backup Message"
"RTN","XPDIB",8,0)
 D ^DIR I $D(DIRUT) D QUIT^XPDI1(XPDST) Q
"RTN","XPDIB",9,0)
 S XMSUB=Y,XMDUZ=+DUZ
"RTN","XPDIB",10,0)
 D XMZ^XMA2 I XMZ<1 D QUIT^XPDI1(XPDST) Q
"RTN","XPDIB",11,0)
 S Y=$$NOW^XLFDT,%=$$DOW^XLFDT(Y),Y=$$FMTE^XLFDT(Y,2)
"RTN","XPDIB",12,0)
 S X="PACKMAN BACKUP Created on "_%_", "_$P(Y,"@")_" at "_$P(Y,"@",2)
"RTN","XPDIB",13,0)
 I $D(^VA(200,DUZ,0)) S X=X_" by "_$P(^(0),U)_" "
"RTN","XPDIB",14,0)
 S:$D(^XMB("NAME")) X=X_"at "_$P(^("NAME"),U)_" "
"RTN","XPDIB",15,0)
 S ^XMB(3.9,XMZ,2,0)="^3.92A^^^"_DT,^(1,0)="$TXT "_X,XCNP=1
"RTN","XPDIB",16,0)
 S XPDT=0
"RTN","XPDIB",17,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D
"RTN","XPDIB",18,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPD=""
"RTN","XPDIB",19,0)
 .I '$D(^XTMP("XPDI",XPDA,"RTN")) W !,"No routines for ",XPDNM,! Q
"RTN","XPDIB",20,0)
 .W !,"Loading Routines for ",XPDNM
"RTN","XPDIB",21,0)
 .F  S XPD=$O(^XTMP("XPDI",XPDA,"RTN",XPD)) Q:XPD=""  D ROU(XPD) W "."
"RTN","XPDIB",22,0)
 D EN3^XMD,QUIT^XPDI1(XPDST)
"RTN","XPDIB",23,0)
 Q
"RTN","XPDIB",24,0)
 ;
"RTN","XPDIB",25,0)
ROU(X) N %N,DIF
"RTN","XPDIB",26,0)
 X ^%ZOSF("TEST") E  W !,"Routine ",X," is not on the disk." Q
"RTN","XPDIB",27,0)
 S XCNP=XCNP+1,^XMB(3.9,XMZ,2,XCNP,0)="$ROU "_X_" (PACKMAN_BACKUP)",DIF="^XMB(3.9,XMZ,2,"
"RTN","XPDIB",28,0)
 X ^%ZOSF("LOAD")
"RTN","XPDIB",29,0)
 S $P(^XMB(3.9,XMZ,2,0),U,3,4)=XCNP_U_XCNP,^(XCNP,0)="$END ROU "_X_" (PACKMAN-BACKUP)"
"RTN","XPDIB",30,0)
 Q
"RTN","XPDIK")
0^2^B38981859
"RTN","XPDIK",1,0)
XPDIK ;SFISC/RSD - Install Kernel Files & FM Files ;03/21/97  11:41
"RTN","XPDIK",2,0)
 ;;8.0;KERNEL;**15,58**;Jul 10, 1995
"RTN","XPDIK",3,0)
 Q
"RTN","XPDIK",4,0)
KRN ;
"RTN","XPDIK",5,0)
 ;XPDA=package ien in INSTALL FILE, XPDNM=package name, XPDCP= check points
"RTN","XPDIK",6,0)
 N DA,DIC,DIOVRD,EPOS,EPRE,FDEL,FPOS,FPRE,OLDA,ORD,X,XGCEDITR,XPDFIL,XPDFILNM,XPDFL,XPDNEW,XREF,Y,%
"RTN","XPDIK",7,0)
 ;DIOVRD is used to override write protection on a file
"RTN","XPDIK",8,0)
 ;XGCEDITR is check in file 8995, at 'SCR' node of DD
"RTN","XPDIK",9,0)
 S ORD=0,XPDCP="KRN",(DIOVRD,XGCEDITR)=1
"RTN","XPDIK",10,0)
 F  S ORD=$O(^XTMP("XPDI",XPDA,"ORD",ORD)) Q:'ORD  S XPDFIL=+$O(^(ORD,0)),XREF=$G(^(XPDFIL)),XPDFILNM=$G(^(XPDFIL,0)) D:XPDFIL
"RTN","XPDIK",11,0)
 .;sets up EPOS,EPRE,FDEL,FPOS,FPRE variables
"RTN","XPDIK",12,0)
 .F DA=1:1:5 S @$P("FPRE^EPRE^FPOS^EPOS^FDEL",U,DA)=$P(XREF,";",DA+5)
"RTN","XPDIK",13,0)
 .K DIC,^TMP($J,"XPDEL")
"RTN","XPDIK",14,0)
 .S DIC=$G(^DIC(XPDFIL,0,"GL")),XREF=+$P(XREF,";",3)
"RTN","XPDIK",15,0)
 .;check if file, XPDFIL, exist at this site
"RTN","XPDIK",16,0)
 .I $P($G(^DIC(XPDFIL,0)),U)'=XPDFILNM D BMES^XPDUTL(" File "_XPDFIL_" is not "_XPDFILNM_", nothing installed.") Q
"RTN","XPDIK",17,0)
 .;check if XPDFIL has already been installed
"RTN","XPDIK",18,0)
 .I $P(^XPD(9.7,XPDA,"KRN",XPDFIL,0),U,2) D BMES^XPDUTL(" "_XPDFILNM_" already installed.") Q
"RTN","XPDIK",19,0)
 .D BMES^XPDUTL(" Installing "_XPDFILNM),SETTOT^XPDID(XPDFIL)
"RTN","XPDIK",20,0)
 .;do File Pre-install action, continue if ok
"RTN","XPDIK",21,0)
 .;XPDFL= 0-send,1-delete,2-link,3-merge,4-attach,5-disable
"RTN","XPDIK",22,0)
 .;loops thru the entries for this file
"RTN","XPDIK",23,0)
 .I '$$ACT(FPRE) S OLDA=0 F  S OLDA=$O(^XTMP("XPDI",XPDA,"KRN",XPDFIL,OLDA)) Q:'OLDA  S XPDFL=+$G(^(OLDA,-1)),OLDA(0)=^(0) D
"RTN","XPDIK",24,0)
 ..;if we are doing VT graphic display, set counter
"RTN","XPDIK",25,0)
 ..I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIK",26,0)
 ..;quit if disable or attach (4 or 5).  Attach will be processed under the parent menu.
"RTN","XPDIK",27,0)
 ..Q:XPDFL>3
"RTN","XPDIK",28,0)
 ..;if FM file, need to set screening logic
"RTN","XPDIK",29,0)
 ..I XPDFIL<.44 S %=$S(XPDFIL'=.403:4,1:8),DIC("S")="I $P(^(0),U,"_%_")="_$P(OLDA(0),U,%)
"RTN","XPDIK",30,0)
 ..;if deleting at site and a template, reset the lookup value and DIC("S")
"RTN","XPDIK",31,0)
 ..I XPDFL=1,XPDFIL<.44 S %=$P(OLDA(0),U),$P(OLDA(0),U)=$P(%,"    FILE #"),DIC("S")="I $P(^(0),U,"_$S(XPDFIL'=.403:4,1:8)_")="_+$P(%,"    FILE #",2)
"RTN","XPDIK",32,0)
 ..;XPDNEW=1 if entry is new, laygo
"RTN","XPDIK",33,0)
 ..S X=$P(OLDA(0),U),Y=$$DIC(XPDFIL,X,$G(DIC("S")),XPDFL) Q:'Y  S DA=+Y,XPDNEW=$P(Y,U,3)
"RTN","XPDIK",34,0)
 ..;if deleting then save and process after FPOS
"RTN","XPDIK",35,0)
 ..I XPDFL=1 S ^TMP($J,"XPDEL",DA)="" Q
"RTN","XPDIK",36,0)
 ..;do Entries Pre-install action
"RTN","XPDIK",37,0)
 ..Q:$$ACT(EPRE)
"RTN","XPDIK",38,0)
 ..;merges the data, if you want the data deleted before the merge, you must
"RTN","XPDIK",39,0)
 ..;do it in the Entry Pre-install node, EPRE.
"RTN","XPDIK",40,0)
 ..M @(DIC_DA_")")=^XTMP("XPDI",XPDA,"KRN",XPDFIL,OLDA)
"RTN","XPDIK",41,0)
 ..;kill the flag node from the live data node
"RTN","XPDIK",42,0)
 ..K @(DIC_DA_",-1)") Q:$$ACT(EPOS)
"RTN","XPDIK",43,0)
 ..;XREF is flag to x-ref file after each entry, it is set in file 9.6
"RTN","XPDIK",44,0)
 ..I XREF N DIK S DIK=DIC D IX1^DIK
"RTN","XPDIK",45,0)
 .;do File Post Install Action
"RTN","XPDIK",46,0)
 .S %=$$ACT(FPOS)
"RTN","XPDIK",47,0)
 .;process the deleting of entries, FDEL should allow the passing of all entries
"RTN","XPDIK",48,0)
 .;to delete in array ^TMP($J,"XPDEL",DA)=""
"RTN","XPDIK",49,0)
 .I $L(FDEL),$D(^TMP($J,"XPDEL")) S %="^TMP($J,""XPDEL"")" D @FDEL
"RTN","XPDIK",50,0)
 .;complete check point
"RTN","XPDIK",51,0)
 .S %=$$XPCOM(XPDFIL)
"RTN","XPDIK",52,0)
 .K ^TMP($J,"XPDEL")
"RTN","XPDIK",53,0)
 .I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIK",54,0)
 Q
"RTN","XPDIK",55,0)
FIA ;
"RTN","XPDIK",56,0)
 ;XPFIL2=file is new^DD screen failed^data already exists^change file name^don't add data; 1=yes, 0=no
"RTN","XPDIK",57,0)
 N XPGR,XPFIL,XPFILO,XPFIL2,Z
"RTN","XPDIK",58,0)
 S XPFIL=0,XPGR=$NA(^XTMP("XPDI",XPDA))
"RTN","XPDIK",59,0)
 F  S XPFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPFIL)) Q:'XPFIL  S XPFILO=^(XPFIL,0,1),XPFIL2=^(2) D
"RTN","XPDIK",60,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIK",61,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIK",62,0)
 .;file is new, alway install DD
"RTN","XPDIK",63,0)
 .S:XPFIL2 $P(XPFILO,U)="y"
"RTN","XPDIK",64,0)
 .;DD failed screen or update DD question = no & file is not new
"RTN","XPDIK",65,0)
 .I $P(XPFIL2,U,2)!($P(XPFILO,U)'="y"&'XPFIL2) D  Q
"RTN","XPDIK",66,0)
 ..N XPD
"RTN","XPDIK",67,0)
 ..S XPD(1)=" ",XPD(2)="Data Dictionary for File #"_XPFIL_" not installed"_$S($P(XPFIL2,U,2):", failed DD screen.",1:".")
"RTN","XPDIK",68,0)
 ..D MES^XPDUTL(.XPD) S %=$$XPCOM(XPFIL)
"RTN","XPDIK",69,0)
 .;check if XPFIL has already been installed
"RTN","XPDIK",70,0)
 .Q:$P(^XPD(9.7,XPDA,4,XPFIL,0),U,2)
"RTN","XPDIK",71,0)
 .;update file name
"RTN","XPDIK",72,0)
 .I $P(XPFIL2,U,4) D
"RTN","XPDIK",73,0)
 ..N DIE,DR,DA
"RTN","XPDIK",74,0)
 ..S DR=".01////"_^XTMP("XPDI",XPDA,"FIA",XPFIL),DA=XPFIL,DIE=1
"RTN","XPDIK",75,0)
 ..D ^DIE
"RTN","XPDIK",76,0)
 .;move DD and check for errors
"RTN","XPDIK",77,0)
 .D DDIN^DIFROMS(XPFIL,"","",XPGR),DIERR("** ERROR IN DATA DICTIONARY FOR FILE # "_XPFIL_" **"):$D(DIERR)
"RTN","XPDIK",78,0)
 .S %=$$XPCOM(XPFIL)
"RTN","XPDIK",79,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIK",80,0)
 Q
"RTN","XPDIK",81,0)
DAT ;
"RTN","XPDIK",82,0)
 N XPGR,XPFIL,XPFILO,XPFIL2,Z
"RTN","XPDIK",83,0)
 S XPFIL=0,XPGR=$NA(^XTMP("XPDI",XPDA))
"RTN","XPDIK",84,0)
 ;DO if they are sending data
"RTN","XPDIK",85,0)
 F  S XPFIL=$O(^XTMP("XPDI",XPDA,"FIA",XPFIL)) Q:'XPFIL  S XPFILO=^(XPFIL,0,1),XPFIL2=^(2) D:$P(XPFILO,U,7)="y"
"RTN","XPDIK",86,0)
 .;DD failed screen or answer no to adding data or 'Add if new' & data already exists or file doesn't exist
"RTN","XPDIK",87,0)
 .I $P(XPFIL2,U,2)!$P(XPFIL2,U,5)!($P(XPFILO,U,8)="a"&$P(XPFIL2,U,3))!'$D(^DIC(XPFIL,0)) S %=$$XPCOM(XPFIL,1) Q
"RTN","XPDIK",88,0)
 .;check if XPFIL has already been installed or no data to input
"RTN","XPDIK",89,0)
 .Q:$P(^XPD(9.7,XPDA,4,XPFIL,0),U,3)!('$D(^XTMP("XPDI",XPDA,"DATA",XPFIL)))
"RTN","XPDIK",90,0)
 .;bring in Data and check for error
"RTN","XPDIK",91,0)
 .D DATAIN^DIFROMS(XPFIL,"","",XPGR),DIERR("** ERROR IN DATA FOR FILE # "_XPFIL_" **"):$D(DIERR)
"RTN","XPDIK",92,0)
 .S %=$$XPCOM(XPFIL,1)
"RTN","XPDIK",93,0)
 D RP^DIFROMSR("","",XPGR),DIERR("** ERROR IN POINTER RESOLUTION OF DATA **"):$D(DIERR)
"RTN","XPDIK",94,0)
 Q
"RTN","XPDIK",95,0)
 ;record error
"RTN","XPDIK",96,0)
DIERR(XPDI) N XPD
"RTN","XPDIK",97,0)
 D MSG^DIALOG("AE",.XPD) Q:'$D(XPD)
"RTN","XPDIK",98,0)
 D BMES^XPDUTL(XPDI),MES^XPDUTL(.XPD)
"RTN","XPDIK",99,0)
 Q
"RTN","XPDIK",100,0)
 ;
"RTN","XPDIK",101,0)
 ;XPDF=file #,X=input,XPDS=screen logic, XPDACT=action
"RTN","XPDIK",102,0)
DIC(XPDF,XPDX,XPDS,XPDACT) ;
"RTN","XPDIK",103,0)
 N DIC,DIERR,XPD,XPDN
"RTN","XPDIK",104,0)
 S DIC=$G(^DIC(XPDF,0,"GL"))
"RTN","XPDIK",105,0)
 D FIND^DIC(XPDF,"","","XQf",XPDX,5,"",$G(XPDS),"","XPD")
"RTN","XPDIK",106,0)
 ;one or more matches, just return first one
"RTN","XPDIK",107,0)
 I $G(XPD(0)) D:XPD(0)>1  Q XPD(1)
"RTN","XPDIK",108,0)
 .N %
"RTN","XPDIK",109,0)
 .S %(1)=$P($G(^DIC(XPDF,0)),U)_"  "_XPDX_"  is Duplicated,",%(2)=" only ien #"_XPD(1)_" was updated."
"RTN","XPDIK",110,0)
 .D MES^XPDUTL(.%)
"RTN","XPDIK",111,0)
 ;no match and action=(delete,link, or attach), don't write message if deleting
"RTN","XPDIK",112,0)
 I $G(XPDACT),XPDACT'=3 D:XPDACT'=1 BMES^XPDUTL(" "_$P($G(^DIC(XPDF,0)),U)_" "_XPDX_" Lookup failed, NO Action Taken.") Q 0
"RTN","XPDIK",113,0)
 ;add a new entry
"RTN","XPDIK",114,0)
 N DLAYGO,X,Y
"RTN","XPDIK",115,0)
 S X=XPDX,DIC(0)="LX",DLAYGO=XPDF D ^DIC
"RTN","XPDIK",116,0)
 I Y<0 D BMES^XPDUTL(" "_$P($G(^DIC(XPDF,0)),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIK",117,0)
 Q Y
"RTN","XPDIK",118,0)
 ;code can't be used until UPDATE^DIE allows the creation of a record
"RTN","XPDIK",119,0)
 ;without required identifiers
"RTN","XPDIK",120,0)
 ;K XPD,DIERR
"RTN","XPDIK",121,0)
 ;S XPD(XPDF,"+1,",.01)=XPDX
"RTN","XPDIK",122,0)
 ;D UPDATE^DIE("","XPD","XPDN")
"RTN","XPDIK",123,0)
 ;couldn't add as new
"RTN","XPDIK",124,0)
 ;I $D(DIERR) D DIERR(" "_$P($G(^DIC(XPDF,0)),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIK",125,0)
 ;I '$G(XPDN(1)) D BMES^XPDUTL(" "_$P($G(^DIC(XPDF,0)),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIK",126,0)
 ;Q XPDN(1)
"RTN","XPDIK",127,0)
 ;
"RTN","XPDIK",128,0)
ACT(%) ;execute action, returns 0 to continue, 1 to quit
"RTN","XPDIK",129,0)
 ;user can count on DIC,DA,XPDFIL,OLDA,XPDNM,XPDFL,X,Y being around
"RTN","XPDIK",130,0)
 ;XPDNEW is set only for Entry Pre-install action
"RTN","XPDIK",131,0)
 Q:%="" 0
"RTN","XPDIK",132,0)
 N %1,%2,%3 S %1=$G(DIC),%2=$G(DA),%3=$G(OLDA)
"RTN","XPDIK",133,0)
 N DA,DIC,DIOVRD,OLDA,EPOS,EPRE,FPOS,FPRE,ORD,XREF,XPDQUIT
"RTN","XPDIK",134,0)
 S DIC=%1,DA=%2,OLDA=%3
"RTN","XPDIK",135,0)
 S:%'["^" %="^"_%
"RTN","XPDIK",136,0)
 ;XPDQUIT=quit this level of processing
"RTN","XPDIK",137,0)
 D @% Q $D(XPDQUIT)
"RTN","XPDIK",138,0)
 Q
"RTN","XPDIK",139,0)
 ;
"RTN","XPDIK",140,0)
XPCOM(XPDF,XPDJ) ;complete checkpoint for file XPDF
"RTN","XPDIK",141,0)
 ;XPDJ=1 only for data of fm files, it set the field to edit = 2
"RTN","XPDIK",142,0)
 N XPD,%,Z
"RTN","XPDIK",143,0)
 S %=$$NOW^XLFDT,Z=$S(XPDCP="KRN":9.715,1:9.714),XPD(Z,XPDF_","_XPDA_",",$G(XPDJ)+1)=%
"RTN","XPDIK",144,0)
 ;if Build Components, save the ORDer number
"RTN","XPDIK",145,0)
 S:Z=9.715 XPD(Z,XPDF_","_XPDA_",",2)=ORD
"RTN","XPDIK",146,0)
 D FILE^DIE("","XPD")
"RTN","XPDIK",147,0)
 Q 1
"RTN","XPDIK",148,0)
 ;
"RTN","XPDIK",149,0)
XPCK(XPDI) ;setup check points for file type XPDI
"RTN","XPDIK",150,0)
 ;XPDI="KRN"-components, ="FIA"-files
"RTN","XPDIK",151,0)
 N %,XPD,XPDF,XPDJ,XPDK
"RTN","XPDIK",152,0)
 ;XPDK=sub DD
"RTN","XPDIK",153,0)
 S XPDK=$S(XPDI="KRN":9.715,1:9.714),XPDF=0
"RTN","XPDIK",154,0)
 F %=1:1 S XPDF=$O(^XTMP("XPDI",XPDA,XPDI,XPDF)) Q:'XPDF  S (XPDJ(%),XPD(XPDK,"+"_%_","_XPDA_",",.01))=XPDF
"RTN","XPDIK",155,0)
 D:$D(XPD)>9 UPDATE^DIE("","XPD","XPDJ")
"RTN","XPDIK",156,0)
 Q
"RTN","XPDIL")
0^4^B26129832
"RTN","XPDIL",1,0)
XPDIL ;SFISC/RSD - load Distribution Global ; 21 Jan 97 09:27
"RTN","XPDIL",2,0)
 ;;8.0;KERNEL;**15,44,58**;Jul 10, 1995
"RTN","XPDIL",3,0)
EN1 N POP,XPDA,XPDST,XPDIT,XPDT,XPDGP,XPDQUIT,XPDSKPE
"RTN","XPDIL",4,0)
 S:'$D(DT) DT=$$DT^XLFDT S:'$D(U) U="^"
"RTN","XPDIL",5,0)
 S XPDST=0
"RTN","XPDIL",6,0)
 D ST I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE
"RTN","XPDIL",7,0)
 ;XPDST= starting Build
"RTN","XPDIL",8,0)
 ;XPDT("DA",ien)=seq # to install
"RTN","XPDIL",9,0)
 ;XPDT("NM",build name)=seq #
"RTN","XPDIL",10,0)
 ;XPDT(seq #)=ien^Build name
"RTN","XPDIL",11,0)
 ;XPDT("GP",global)= 1-replace, 0-overwrite^ien
"RTN","XPDIL",12,0)
 ;XPDGP=globals from a Global Package
"RTN","XPDIL",13,0)
 ;XPDSKPE=1 don't run Environment Check^has question been asked
"RTN","XPDIL",14,0)
 S XPDIT=0,XPDSKPE="0^0"
"RTN","XPDIL",15,0)
 F  S XPDIT=$O(XPDT(XPDIT)) Q:'XPDIT  S XPDA=+XPDT(XPDIT) D  I '$D(XPDT) Q
"RTN","XPDIL",16,0)
 .;check if this Build has an Envir. Check
"RTN","XPDIL",17,0)
 .I $G(^XTMP("XPDI",XPDA,"PRE"))]"" D  I $G(XPDQUIT) D ABRTALL^XPDI(1) Q
"RTN","XPDIL",18,0)
 ..;quit if we already asked this question
"RTN","XPDIL",19,0)
 ..Q:$P(XPDSKPE,U,2)
"RTN","XPDIL",20,0)
 ..S $P(XPDSKPE,U,2)=1
"RTN","XPDIL",21,0)
 ..N DIR,DIRUT
"RTN","XPDIL",22,0)
 ..S DIR(0)="Y",DIR("A")="Want to RUN the Environment Check Routine",DIR("B")="YES"
"RTN","XPDIL",23,0)
 ..D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",24,0)
 ..S:'Y XPDSKPE="1^1"
"RTN","XPDIL",25,0)
 .D PKG^XPDIL1(XPDA)
"RTN","XPDIL",26,0)
 ;Global Package
"RTN","XPDIL",27,0)
 G:$D(XPDGP) ^XPDIGP
"RTN","XPDIL",28,0)
 I $D(XPDT),$D(^XPD(9.7,+XPDST,0)) W !,"Use INSTALL NAME: ",$P(^(0),U)," to install this Distribution.",!
"RTN","XPDIL",29,0)
 Q
"RTN","XPDIL",30,0)
ST ;global input
"RTN","XPDIL",31,0)
 N DIR,DIRUT,GR,IOP,X,Y,Z,%ZIS
"RTN","XPDIL",32,0)
 G:'$D(^DD(3.5,0)) OPEN
"RTN","XPDIL",33,0)
 I '$D(^%ZIS(1,"B","HFS")) W !!,"You must have a device called 'HFS' in order to load a distribution!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",34,0)
 D HOME^%ZIS
"RTN","XPDIL",35,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to input Distribution."
"RTN","XPDIL",36,0)
 D ^DIR I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",37,0)
 S %ZIS="",%ZIS("HFSNAME")=Y,%ZIS("HFSMODE")="R",IOP="HFS"
"RTN","XPDIL",38,0)
 D ^%ZIS I POP W !,"Couldn't open file or HFS device!!",*7 S XPDQUIT=1 Q
"RTN","XPDIL",39,0)
 ;don't close device if we have a global package, we need to bring in the globals now
"RTN","XPDIL",40,0)
 D GI,^%ZISC:'$D(XPDGP)!$G(XPDQUIT)
"RTN","XPDIL",41,0)
 Q
"RTN","XPDIL",42,0)
 ;
"RTN","XPDIL",43,0)
 ;if no device file, Virgin Install
"RTN","XPDIL",44,0)
OPEN ;use open command
"RTN","XPDIL",45,0)
 N IO,IOPAR,DIR,DIRUT
"RTN","XPDIL",46,0)
 S DIR(0)="F^1:79",DIR("A")="Device Name"
"RTN","XPDIL",47,0)
 S DIR("?",1)="Device Name is either the name of the HFS file or the name of the HFS Device.",DIR("?",2)="i.e.  for MSM enter  51",DIR("?")="      for DSM enter  DISK$USER::[ANONYMOUS]:KRN8.KID"
"RTN","XPDIL",48,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDIL",49,0)
 S IO=Y,DIR(0)="FO^1:79",DIR("A")="Device Parameters"
"RTN","XPDIL",50,0)
 S DIR("?",1)="Device Parameter is the Open parameter this M operating system needs to",DIR("?",2)="open the Device Name.",DIR("?",3)="i.e. for MSM enter  (""B:\KRN8.KID"":""R"")",DIR("?")="     for DSM enter  READONLY"
"RTN","XPDIL",51,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDIL",52,0)
 S IOPAR=Y
"RTN","XPDIL",53,0)
 X "O IO:"_IOPAR_":10" E  U $P W !,"Couldn't open ",IO S POP=1 Q
"RTN","XPDIL",54,0)
 S IO(0)=$P
"RTN","XPDIL",55,0)
 D GI C IO
"RTN","XPDIL",56,0)
 S IO=IO(0)
"RTN","XPDIL",57,0)
 Q
"RTN","XPDIL",58,0)
 ;
"RTN","XPDIL",59,0)
GI N X,XPDSEQ,Y,Z
"RTN","XPDIL",60,0)
 U IO R X:1,Y:1
"RTN","XPDIL",61,0)
 U IO(0) W !!,X,!,"Comment: ",Y
"RTN","XPDIL",62,0)
 S XPDST("H")=Y,XPDST("H1")=Y_"  ;Created on "_$P(X,"KIDS Distribution saved on ",2)
"RTN","XPDIL",63,0)
 ;Z is the string of Builds in this file
"RTN","XPDIL",64,0)
 U IO F X=1:1 R Z:1 S Z=$P(Z,"**KIDS**",2,99) Q:Z=""  S X(X)=Z
"RTN","XPDIL",65,0)
 U IO(0) I $G(X(1))="" W !!,"This is not a Distribution HFS File!" S XPDQUIT=1 Q
"RTN","XPDIL",66,0)
 ;global package, set XPDGP=flag;global^flag;global^...  flag=1 replace
"RTN","XPDIL",67,0)
 I $P(X(1),":")="GLOBALS" S XPDGP=$P(X(1),U,2,99),X(1)=$P(X(1),U)
"RTN","XPDIL",68,0)
 S XPDIT=0,X(1)=$P(X(1),":",2,99)
"RTN","XPDIL",69,0)
 W !!,"This Distribution contains Transport Globals for the following Package(s):"
"RTN","XPDIL",70,0)
 F X=1:1:X-1 F Z=1:1 S Y=$P(X(X),U,Z) Q:Y=""  D  Q:$G(XPDQUIT)
"RTN","XPDIL",71,0)
 .;can't install if global exist, that means Build never finish install
"RTN","XPDIL",72,0)
 .W !?5,Y S XPDIT=XPDIT+1 I '$$INST^XPDIL1(Y) S XPDQUIT=1 Q
"RTN","XPDIL",73,0)
 Q:$G(XPDQUIT)
"RTN","XPDIL",74,0)
 W !
"RTN","XPDIL",75,0)
 D:$D(XPDGP) DISP^XPDIGP
"RTN","XPDIL",76,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIL",77,0)
 D ^DIR I $D(DIRUT)!'Y S XPDQUIT=1 Q
"RTN","XPDIL",78,0)
 W !,"Loading Distribution...",!
"RTN","XPDIL",79,0)
 ;reset expiration date to T+7 on transport global
"RTN","XPDIL",80,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIL",81,0)
 ;start reading the HFS again
"RTN","XPDIL",82,0)
 U IO R X:0,Y:0
"RTN","XPDIL",83,0)
 ;the next read must be the INSTALL NAME
"RTN","XPDIL",84,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) U IO(0) W !!,"ERROR in HFS file format!" S XPDQUIT=1 Q
"RTN","XPDIL",85,0)
 ;XPDSEQ is the disk sequence number
"RTN","XPDIL",86,0)
 S %=XPDT("NM",Y),GR="^XTMP(""XPDI"","_+XPDT(%)_",",XPDSEQ=1
"RTN","XPDIL",87,0)
 ;X=global ref, Y=global value. DIRUT is when user is prompted for next disk in NEXTD and they abort
"RTN","XPDIL",88,0)
 F  R X:0,Y:0 Q:X="**END**"  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIL",89,0)
 .I X="**INSTALL NAME**" D  Q
"RTN","XPDIL",90,0)
 ..S %=+$G(XPDT("NM",Y)) I '% S DIRUT=1 Q
"RTN","XPDIL",91,0)
 ..S GR="^XTMP(""XPDI"","_+XPDT(%)_","
"RTN","XPDIL",92,0)
 .I X="**CONTINUE**" D NEXTD Q
"RTN","XPDIL",93,0)
 .S @(GR_X)=Y
"RTN","XPDIL",94,0)
 U IO(0)
"RTN","XPDIL",95,0)
 Q
"RTN","XPDIL",96,0)
 ;
"RTN","XPDIL",97,0)
NEXTD I ^%ZOSF("OS")'["MSM" U IO(0) W !!,"Error in disk, ABORTING load!!" S XPDQUIT=1 Q
"RTN","XPDIL",98,0)
 N DIR
"RTN","XPDIL",99,0)
 ;close current device
"RTN","XPDIL",100,0)
 C IO U IO(0)
"RTN","XPDIL",101,0)
 S XPDSEQ=XPDSEQ+1,DIR(0)="E",DIR("A")="Insert the next diskette, #"_XPDSEQ_", and Press the return key",DIR("?")="This distribution is continued on another diskette"
"RTN","XPDIL",102,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDIL",103,0)
 W "  OK",!
"RTN","XPDIL",104,0)
 ;MSM specific code to open HFS
"RTN","XPDIL",105,0)
 O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDIL",106,0)
 R X:0,Y:0
"RTN","XPDIL",107,0)
 ;quit if comments are not the same on each diskette
"RTN","XPDIL",108,0)
 G:Y'=XPDST("H") NEXTQ
"RTN","XPDIL",109,0)
 ;quit if not the expected sequence, Z is for the blank line
"RTN","XPDIL",110,0)
 R Y:0,Z:0 G:Y'=("**SEQ**:"_XPDSEQ) NEXTQ
"RTN","XPDIL",111,0)
 Q
"RTN","XPDIL",112,0)
NEXTQ U IO(0) W !!,"This is NOT the correct diskette!!  The comment on this diskette is:",!,X,!!
"RTN","XPDIL",113,0)
 S XPDSEQ=XPDSEQ-1
"RTN","XPDIL",114,0)
 G NEXTD
"RTN","XPDIL",115,0)
 ;
"RTN","XPDIL",116,0)
NONE W !!,"**NOTHING LOADED**",!
"RTN","XPDIL",117,0)
 Q
"RTN","XPDIP")
0^19^B35933190
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;03/27/97  08:54
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21,28,30,41,44,51,58**;Jul 10, 1995
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file, OLDA=old Package ien
"RTN","XPDIP",9,0)
 S Y=$$PKGADD,XPDPKG=$P(Y,U),OLDA=$P(Y,U,2)
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'XPDPKG PKGEND
"RTN","XPDIP",12,0)
 ;update version multiple
"RTN","XPDIP",13,0)
 S DA=XPDPKG D PKGV
"RTN","XPDIP",14,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",15,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",16,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",17,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",18,0)
 ;OERR Package Parameter multiple in file 100.99
"RTN","XPDIP",19,0)
 D:$D(^ORD(100.99))&$D(^XTMP("XPDI",XPDA,"OER",OLDA))
"RTN","XPDIP",20,0)
 .S DA=XPDPKG,DA(1)=1,DIK="^ORD(100.99,1,5," D:$D(^ORD(100.99,1,5,DA)) ^DIK
"RTN","XPDIP",21,0)
 .S:'$D(^ORD(100.99,1,5,0)) ^ORD(100.99,1,5,0)=U_$P(^DD(100.99,5,0),U,2) S $P(^(0),U,3,4)=DA_U_($P(^(0),U,3)+1)
"RTN","XPDIP",22,0)
 .M ^ORD(100.99,1,5,DA)=^XTMP("XPDI",XPDA,"OER",OLDA) S $P(^(DA,0),U)=DA,%=$P(^(0),U,4)
"RTN","XPDIP",23,0)
 .S:$L(%) $P(^ORD(100.99,1,5,DA,0),U,4)=$$LK^XPDIA("^ORD(100.98)",%)
"RTN","XPDIP",24,0)
 .D IX1^DIK
"RTN","XPDIP",25,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",26,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",27,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D
"RTN","XPDIP",28,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",29,0)
 .I $P(%,U)="y",$P(%,U,2)="y",$L($P(%,U,3)) S $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",30,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",31,0)
 Q
"RTN","XPDIP",32,0)
PKGADD() ;check Package file, add if not there
"RTN","XPDIP",33,0)
 ;return new Package file ien^old ien
"RTN","XPDIP",34,0)
 N DA,DIK,XPD,XPDFIL,XPDO,X,Y
"RTN","XPDIP",35,0)
 S DA=+$P(^XPD(9.7,XPDA,0),U,2),XPDO=+$O(^XTMP("XPDI",XPDA,"PKG",0)),X=$P($G(^(XPDO,0)),U)
"RTN","XPDIP",36,0)
 I DA,$D(^DIC(9.4,DA,0)) Q DA_U_XPDO
"RTN","XPDIP",37,0)
 ;quit if there was no package entry sent
"RTN","XPDIP",38,0)
 Q:'XPDO "0^0"
"RTN","XPDIP",39,0)
 S XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,X) Q:'Y "0^0"
"RTN","XPDIP",40,0)
 S DA=+Y
"RTN","XPDIP",41,0)
 ;if new entry in package file, bring in everything
"RTN","XPDIP",42,0)
 I $P(Y,U,3) D
"RTN","XPDIP",43,0)
 .M ^DIC(9.4,DA)=^XTMP("XPDI",XPDA,"PKG",XPDO)
"RTN","XPDIP",44,0)
 .;kill the -1 flag node first
"RTN","XPDIP",45,0)
 .K ^DIC(9.4,DA,-1)
"RTN","XPDIP",46,0)
 .;re-cross ref after adding a new package
"RTN","XPDIP",47,0)
 .S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",48,0)
 ;add package to file 9.7
"RTN","XPDIP",49,0)
 S XPD(9.7,XPDA_",",1)=DA D FILE^DIE("","XPD")
"RTN","XPDIP",50,0)
 Q DA_U_XPDO
"RTN","XPDIP",51,0)
 ;
"RTN","XPDIP",52,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",53,0)
 N %,DA,DIK,XPDFIL,Y
"RTN","XPDIP",54,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",55,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",56,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",57,0)
 S DA=+Y
"RTN","XPDIP",58,0)
 ;Build entry not new, remove old data
"RTN","XPDIP",59,0)
 I '$P(Y,U,3) S %=$P(^XPD(9.6,DA,0),U,2) K ^XPD(9.6,DA) K:% ^XPD(9.6,"C",%,DA)
"RTN","XPDIP",60,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",61,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",62,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",63,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",64,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",65,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",66,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",67,0)
 Q DA
"RTN","XPDIP",68,0)
 ;
"RTN","XPDIP",69,0)
 ;update the version multiple in the package file
"RTN","XPDIP",70,0)
PKGV N %
"RTN","XPDIP",71,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",72,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",73,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",74,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",75,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",76,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",77,0)
 ;update patch history multiple
"RTN","XPDIP",78,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=$P(^(0),U) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",79,0)
 ;check File Comment, %=patch number
"RTN","XPDIP",80,0)
 S:$P(^XPD(9.7,XPDA,2),%,2)?1" SEQ #"1.3N %=%_$P(^(2),%,2)
"RTN","XPDIP",81,0)
 S $P(%,U,2,3)=DT_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",82,0)
 Q
"RTN","XPDIP",83,0)
 ;
"RTN","XPDIP",84,0)
PKGVER(XPDPDA,XPDI) ;update version in package file, XPDPDA=Package file ien, return ien
"RTN","XPDIP",85,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",86,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",87,0)
 N I,X,XPD,XPDIEN,XPDJ,XPDV
"RTN","XPDIP",88,0)
 S XPDIEN=","_XPDPDA_",",XPDV=$$MDIC(9.49,XPDIEN,$P(XPDI,U)) Q:'XPDV 0
"RTN","XPDIP",89,0)
 S XPD(9.4,XPDPDA_",",13)=$P(XPDI,U),X="XPD(9.49,"""_XPDV_XPDIEN_""")"
"RTN","XPDIP",90,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",91,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",92,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",93,0)
 Q XPDV
"RTN","XPDIP",94,0)
 ;
"RTN","XPDIP",95,0)
PKGPAT(XPDPDA,XPDV,XPDI) ;update patch history
"RTN","XPDIP",96,0)
 ;INPUT: XPDPDA=Package file ien, XPDV=version
"RTN","XPDIP",97,0)
 ;XPDI=patch^date installed^install by,   returns version ien^patch ien
"RTN","XPDIP",98,0)
 N I,X,XPD,XPDP,XPDIEN
"RTN","XPDIP",99,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",100,0)
 S XPDIEN=","_XPDPDA_",",XPDV=$$MDIC(9.49,XPDIEN,XPDV) Q:'XPDV 0
"RTN","XPDIP",101,0)
 S XPDIEN=","_XPDV_XPDIEN,XPDP=$$MDIC(9.4901,XPDIEN,$P(XPDI,U)) Q:'XPDP 0
"RTN","XPDIP",102,0)
 S X="XPD(9.4901,"""_XPDP_XPDIEN_""")"
"RTN","XPDIP",103,0)
 F I=.02,.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",104,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",105,0)
 D FILE^DIE("","XPD")
"RTN","XPDIP",106,0)
 Q XPDV_U_XPDP
"RTN","XPDIP",107,0)
 ;
"RTN","XPDIP",108,0)
 ;XPDF=subfile #,XPDIEN=ien string, X=input
"RTN","XPDIP",109,0)
MDIC(XPDF,XPDIEN,XPDX) ;
"RTN","XPDIP",110,0)
 N DIERR,XPD,XPDN
"RTN","XPDIP",111,0)
 D FIND^DIC(XPDF,XPDIEN,"","XQf",XPDX,5,"","","","XPD")
"RTN","XPDIP",112,0)
 ;one or more matches, just return first one
"RTN","XPDIP",113,0)
 I $G(XPD(0)) D:XPD(0)>1  Q XPD(1)
"RTN","XPDIP",114,0)
 .N %
"RTN","XPDIP",115,0)
 .S %(1)=$P(^DD(XPDF,.01,0),U)_"  "_XPDX_"  is Duplicated,",%(2)=" only ien #"_XPD(1)_" was updated."
"RTN","XPDIP",116,0)
 .D MES^XPDUTL(.%)
"RTN","XPDIP",117,0)
 ;add a new entry
"RTN","XPDIP",118,0)
 S XPDN(XPDF,"+1"_XPDIEN,.01)=XPDX K XPD
"RTN","XPDIP",119,0)
 D UPDATE^DIE("","XPDN","XPD")
"RTN","XPDIP",120,0)
 I '$G(XPD(1)) D BMES^XPDUTL(" "_$P(^DD(XPDF,.01,0),U)_" "_XPDX_" **Couldn't Add to file**") Q 0
"RTN","XPDIP",121,0)
 Q XPD(1)
"RTN","XPDIP",122,0)
 ;
"RTN","XPDIP",123,0)
RTN ;move rtns to install file
"RTN","XPDIP",124,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X
"RTN","XPDIP",125,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",126,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ=""
"RTN","XPDIP",127,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",128,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",129,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",130,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",131,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",132,0)
 .;XPDR, build array to update ROUTINE file
"RTN","XPDIP",133,0)
 .S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",134,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",135,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",136,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",137,0)
 .S XPDI=0
"RTN","XPDIP",138,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",139,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",140,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",141,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",142,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",143,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",144,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",145,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",146,0)
 ;compile template routines
"RTN","XPDIP",147,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",148,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",149,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",150,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",151,0)
 ;update Routine file
"RTN","XPDIP",152,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",153,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",154,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",155,0)
 Q
"RTN","XPDIQ")
0^16^B18736954
"RTN","XPDIQ",1,0)
XPDIQ ;SFISC/RSD - Install Questions ;02/26/97  12:44
"RTN","XPDIQ",2,0)
 ;;8.0;KERNEL;**21,28,58**;Jul 10, 1995
"RTN","XPDIQ",3,0)
 Q
"RTN","XPDIQ",4,0)
DIR(XPFR,XPFP) ;XPFR=prefix, XPFP=file no._# or Mail Group ien
"RTN","XPDIQ",5,0)
 ;XPFP is for XPF  or XPM questions
"RTN","XPDIQ",6,0)
 N DIR,DR,XPDI,XPDJ,X,Y,Z
"RTN","XPDIQ",7,0)
 S XPFP=$G(XPFP),XPDI=$S(XPFP:XPFR_XPFP,1:XPFR)
"RTN","XPDIQ",8,0)
 D QUES(XPDI)
"RTN","XPDIQ",9,0)
 ;ask questions
"RTN","XPDIQ",10,0)
 S X=XPFR
"RTN","XPDIQ",11,0)
 F  S X=$O(^XTMP("XPDI",XPDA,"QUES",X)),Z="" Q:X=""!($P(X,XPFR)]"")  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIQ",12,0)
 .S XPDJ=$S('XPFP:X,1:XPDI_$P(X,XPFR,2))
"RTN","XPDIQ",13,0)
 .F  S Z=$O(^XTMP("XPDI",XPDA,"QUES",X,Z)) Q:Z=""  M DIR(Z)=^(Z)
"RTN","XPDIQ",14,0)
 .;if there was a previous answer, reset DIR("B") to external or internal answer
"RTN","XPDIQ",15,0)
 .S:$L($G(XPDQUES(XPDJ))) DIR("B")=$G(XPDQUES(XPDJ,"B"),XPDQUES(XPDJ)) D  Q:'$D(Y)
"RTN","XPDIQ",16,0)
 ..N FLAG,X,Z K Y
"RTN","XPDIQ",17,0)
 ..;this is the M CODE node that was set to DIR("M") in prev for loop
"RTN","XPDIQ",18,0)
 ..;FLAG is used by KIDS questions
"RTN","XPDIQ",19,0)
 ..I $D(DIR("M")) S %=DIR("M"),FLAG="" K DIR("M") X %
"RTN","XPDIQ",20,0)
 ..Q:'$D(DIR)
"RTN","XPDIQ",21,0)
 ..;'|' is used to mark variable in prompt, reset prompt with value of variable
"RTN","XPDIQ",22,0)
 ..S:$G(DIR("A"))["|" DIR("A")=$P(DIR("A"),"|")_@$P(DIR("A"),"|",2)_$P(DIR("A"),"|",3)
"RTN","XPDIQ",23,0)
 ..K:DIR("B")="" DIR("B")
"RTN","XPDIQ",24,0)
 ..D ^DIR
"RTN","XPDIQ",25,0)
 .S %=$P(DIR(0),U)
"RTN","XPDIQ",26,0)
 .;read was optional and didn't timeout and user didn't enter anything
"RTN","XPDIQ",27,0)
 .I %["O",'$D(DTOUT),$S(%["P":Y=-1,1:Y="") K DIRUT Q
"RTN","XPDIQ",28,0)
 .;quit if the user up-arrowed out
"RTN","XPDIQ",29,0)
 .Q:$D(DIRUT)
"RTN","XPDIQ",30,0)
 .;if pointer, reset Y & Y(0)
"RTN","XPDIQ",31,0)
 .I %["P" S Y(0)=$S(%["Z":$P(Y(0),U),1:$P(Y,U,2)),Y=+Y
"RTN","XPDIQ",32,0)
 .;if Y(0) is not defined, but Y is
"RTN","XPDIQ",33,0)
 .S:$D(Y)#2&'($D(Y(0))#2) Y(0)=Y
"RTN","XPDIQ",34,0)
 .S XPDQUES(XPDJ)=Y,XPDQUES(XPDJ,"A")=$G(DIR("A")),XPDQUES(XPDJ,"B")=$G(Y(0))
"RTN","XPDIQ",35,0)
 .K DIR
"RTN","XPDIQ",36,0)
 K XPDJ S XPDI=XPFR
"RTN","XPDIQ",37,0)
 ;code to save XPDQUES to INSTALL ANSWERS in file 9.7, loop thru the answers starting with the from value, XPFR
"RTN","XPDIQ",38,0)
 F Y=1:1 S XPDI=$O(XPDQUES(XPDI)) Q:XPDI=""!($P(XPDI,XPFR)]"")  D
"RTN","XPDIQ",39,0)
 .S X="XPDJ(9.701,""?+"_Y_","_XPDA_","")",@X@(.01)=XPDI,@X@(1)=$G(XPDQUES(XPDI,"A")),@X@(2)=$G(XPDQUES(XPDI,"B")),@X@(3)=XPDQUES(XPDI)
"RTN","XPDIQ",40,0)
 K XPDI D:$D(XPDJ)>9 UPDATE^DIE("","XPDJ","XPDI")
"RTN","XPDIQ",41,0)
 Q
"RTN","XPDIQ",42,0)
 ;
"RTN","XPDIQ",43,0)
QUES(X) ;build XPDQUES array, X="INI","INIT","XPF","XPM"
"RTN","XPDIQ",44,0)
 ;move INSTALL ANSWERS from file 9.7 to XPDQUES
"RTN","XPDIQ",45,0)
 ;XPDQUES(X)=internal answer, XPDQUES(X,"A")=prompt, XPDQUES(X,"B")=external answer.
"RTN","XPDIQ",46,0)
 N Y,Z K XPDQUES S Z=X
"RTN","XPDIQ",47,0)
 F  S Z=$O(^XPD(9.7,XPDA,"QUES","B",Z)) Q:Z=""!($P(Z,X)]"")  S Y=$O(^(Z,0)) D
"RTN","XPDIQ",48,0)
 .Q:'$D(^XPD(9.7,XPDA,"QUES",Y,0))
"RTN","XPDIQ",49,0)
 .S XPDQUES(Z)=$G(^(1)),XPDQUES(Z,"A")=$G(^("A")),XPDQUES(Z,"B")=$G(^("B")) ; ^(1) refer to prev line ^XPD(9.7,XPDA,"QUES","B",Z)
"RTN","XPDIQ",50,0)
 Q
"RTN","XPDIQ",51,0)
 ;codes for install process questions
"RTN","XPDIQ",52,0)
 ;XPDFIL=file #, XPDFILN=file name^global ref^partial DD
"RTN","XPDIQ",53,0)
 ;XPDFILO=update DD^security codes^^^resolve pt^list template^data with file^add,merge,overwrite,replace^user override data update
"RTN","XPDIQ",54,0)
 ;XPDSCR=screen to determine DD update
"RTN","XPDIQ",55,0)
 ;XPDANS is define in QUES^XPDI
"RTN","XPDIQ",56,0)
XPF1 ;write over existing file
"RTN","XPDIQ",57,0)
 N XPDI
"RTN","XPDIQ",58,0)
 W !!?3,XPDFIL,?13,$P(XPDFILN,U),$P("  (Partial Definition)",U,$P(XPDFILN,U,3)),$P("  (including data)",U,$P(XPDFILO,U,7)="y")
"RTN","XPDIQ",59,0)
 ;file doesn't exists
"RTN","XPDIQ",60,0)
 I XPDANS K DIR Q
"RTN","XPDIQ",61,0)
 I $L($G(XPDSCR)) S XPDI=1 D  Q:'XPDI
"RTN","XPDIQ",62,0)
 .X XPDSCR S XPDI=$T Q:XPDI
"RTN","XPDIQ",63,0)
 .W !,"Data Dictionary FAILED the screening logic, file will NOT be installed!"
"RTN","XPDIQ",64,0)
 .S $P(XPDANS,U,2)="1" K DIR
"RTN","XPDIQ",65,0)
 S FLAG=$P($G(^DIC(XPDFIL,0)),U)
"RTN","XPDIQ",66,0)
 ;file exist and has the same name
"RTN","XPDIQ",67,0)
 I $P(FLAG,$P(XPDFILN,U))="" W !,"Note:  You already have the '",$P(XPDFILN,U),"' File." K DIR Q
"RTN","XPDIQ",68,0)
 W *7,!,"*BUT YOU ALREADY HAVE '",FLAG,"' AS FILE #",XPDFIL,"!"
"RTN","XPDIQ",69,0)
 S $P(XPDANS,U,4)=1
"RTN","XPDIQ",70,0)
 Q
"RTN","XPDIQ",71,0)
XPF2 ;data
"RTN","XPDIQ",72,0)
 ;if they don't want to overwrite a file with a different name then set the DIRUT flag and ABORT, this will stop the rest of the questions and abort the install
"RTN","XPDIQ",73,0)
 I $G(XPDQUES("XPF"_XPFP_1))=0 S DIRUT=1 K DIR Q
"RTN","XPDIQ",74,0)
 ;if Data doesn't exists or DD failed screen or data wasn't sent, don't ask question
"RTN","XPDIQ",75,0)
 I '$P(XPDANS,U,3)!$P(XPDANS,U,2)!($P(XPDFILO,U,7)'="y") K DIR Q
"RTN","XPDIQ",76,0)
 S %=$F("amor",$P(XPDFILO,U,8))-1
"RTN","XPDIQ",77,0)
 ;if this is add and file is not new
"RTN","XPDIQ",78,0)
 I %=1 W !,"Data will NOT be added." K DIR Q
"RTN","XPDIQ",79,0)
 ;check if dev. doesn't want to ask user
"RTN","XPDIQ",80,0)
 I $P(XPDFILO,U,9)'="y" W !,"I will ",$P("^MERGE^OVERWRITE^REPLACE",U,%)," your data with mine." K DIR Q
"RTN","XPDIQ",81,0)
 S FLAG=$P("^merged with^to overwrite^to replace",U,%)
"RTN","XPDIQ",82,0)
 Q
"RTN","XPDIQ",83,0)
XPM1 ;mail groups
"RTN","XPDIQ",84,0)
 S FLAG=XPDANS
"RTN","XPDIQ",85,0)
 Q:'$D(XPDDIQ("XPM1"))
"RTN","XPDIQ",86,0)
 I $D(XPDDIQ("XPM1"))#2 S XPDQUES("XPM1")=XPDDIQ("XPM1") K DIR Q
"RTN","XPDIQ",87,0)
 S:$D(XPDDIQ("XPM1","A")) DIR("A")=XPDDIQ("XPM1","A")
"RTN","XPDIQ",88,0)
 S:$D(XPDDIQ("XPM1","B")) DIR("B")=XPDDIQ("XPM1","B")
"RTN","XPDIQ",89,0)
 Q
"RTN","XPDIQ",90,0)
 ;XPDDIQ(name)=internal value, (name,"A")=prompt, (name,"B")=external
"RTN","XPDIQ",91,0)
XPZ1 ;disable options
"RTN","XPDIQ",92,0)
 Q:'$D(XPDDIQ("XPZ1"))
"RTN","XPDIQ",93,0)
 I $D(XPDDIQ("XPZ1"))#2 S XPDQUES("XPZ1")=XPDDIQ("XPZ1") K DIR Q
"RTN","XPDIQ",94,0)
 S:$D(XPDDIQ("XPZ1","A")) DIR("A")=XPDDIQ("XPZ1","A")
"RTN","XPDIQ",95,0)
 S:$D(XPDDIQ("XPZ1","B")) DIR("B")=XPDDIQ("XPZ1","B")
"RTN","XPDIQ",96,0)
 Q
"RTN","XPDIQ",97,0)
XPZ2 ;move routines
"RTN","XPDIQ",98,0)
 N Y
"RTN","XPDIQ",99,0)
 ;if they are not in production UCI don't ask
"RTN","XPDIQ",100,0)
 X ^%ZOSF("UCI") I Y'=^%ZOSF("PROD") K DIR Q
"RTN","XPDIQ",101,0)
 ;if they are not running MSM don't ask
"RTN","XPDIQ",102,0)
 I ^%ZOSF("OS")'["MSM" K DIR Q
"RTN","XPDIQ",103,0)
 Q:'$D(XPDDIQ("XPZ2"))
"RTN","XPDIQ",104,0)
 I $D(XPDDIQ("XPZ2"))#2 S XPDQUES("XPZ2")=XPDDIQ("XPZ2") K DIR Q
"RTN","XPDIQ",105,0)
 S:$D(XPDDIQ("XPZ2","A")) DIR("A")=XPDDIQ("XPZ2","A")
"RTN","XPDIQ",106,0)
 S:$D(XPDDIQ("XPZ2","B")) DIR("B")=XPDDIQ("XPZ2","B")
"RTN","XPDIQ",107,0)
 Q
"RTN","XPDIR")
0^3^B4714175
"RTN","XPDIR",1,0)
XPDIR ;SFISC/RSD - Install Restart; 3 May 96 15:22 ;01/29/97  10:43
"RTN","XPDIR",2,0)
 ;;8.0;KERNEL;**30,58**;Jul 10, 1995
"RTN","XPDIR",3,0)
EN ;restart install
"RTN","XPDIR",4,0)
 N DIR,DIRUT,POP,XPD,XPDA,XPDD,XPDIJ,XPDDIQ,XPDNM,XPDNOQUE,XPDPKG,XPDST,XPDSET,XPDT,XPDQUIT,XPDQUES,Y,ZTSK,%
"RTN","XPDIR",5,0)
 S %="I $P(^(0),U,9)#3,$D(^XPD(9.7,""ASP"",Y,1,Y)),$D(^XTMP(""XPDI"",Y))",XPDST=$$LOOK^XPDI1(%)
"RTN","XPDIR",6,0)
 Q:'XPDST!$D(XPDQUIT)
"RTN","XPDIR",7,0)
 S ZTSK=$P(^XPD(9.7,XPDST,0),U,6) D:ZTSK
"RTN","XPDIR",8,0)
 .;check if task exist or is queued
"RTN","XPDIR",9,0)
 .D ISQED^%ZTLOAD
"RTN","XPDIR",10,0)
 .;task is queued to run
"RTN","XPDIR",11,0)
 .Q:ZTSK(0)
"RTN","XPDIR",12,0)
 .;task doesn't exist, k ZTSK so it can be re-scheduled
"RTN","XPDIR",13,0)
 .I ZTSK(0)="" K ZTSK Q
"RTN","XPDIR",14,0)
 .D STAT^%ZTLOAD
"RTN","XPDIR",15,0)
 .;task is not define
"RTN","XPDIR",16,0)
 .I 'ZTSK(1) K ZTSK Q
"RTN","XPDIR",17,0)
 .;task is queued to run
"RTN","XPDIR",18,0)
 .Q:ZTSK(1)=1
"RTN","XPDIR",19,0)
 .;task is running, set quit flag
"RTN","XPDIR",20,0)
 .I ZTSK(1)=2 S XPDQUIT=1 W !,"Install is currently running, cannot re-install!" Q
"RTN","XPDIR",21,0)
 .;task finished or was interrupted, kill it so it can be rescheduled
"RTN","XPDIR",22,0)
 .D KILL^%ZTLOAD K ZTSK Q
"RTN","XPDIR",23,0)
 ;abort if there is nothing to install or they '^'
"RTN","XPDIR",24,0)
 G:'$O(XPDT(0))!$D(XPDQUIT) ABORT
"RTN","XPDIR",25,0)
 ;clean out old task, so they can reinstall
"RTN","XPDIR",26,0)
 I '$D(ZTSK) D
"RTN","XPDIR",27,0)
 .N XPD
"RTN","XPDIR",28,0)
 .S XPD(9.7,XPDST_",",5)=""  D FILE^DIE("","XPD")
"RTN","XPDIR",29,0)
 I $G(ZTSK) W !!,"This install is already queued as task #",ZTSK,!,"Please use the Taskman Menu if you want to reschedule." G ABORT
"RTN","XPDIR",30,0)
 ;kill XPDT array so that while in XPDI and ABORT is called, nothing is deleted
"RTN","XPDIR",31,0)
 S XPDIJ=0,XPDA=XPDST K XPDT
"RTN","XPDIR",32,0)
 ;restore environment check variables
"RTN","XPDIR",33,0)
 I $D(^XTMP("XPDI",XPDA,"ENVVAR")) D
"RTN","XPDIR",34,0)
 .S:$D(^XTMP("XPDI",XPDA,"ENVVAR","XPDNOQUE")) XPDNOQUE=^("XPDNOQUE")
"RTN","XPDIR",35,0)
 .I $D(^XTMP("XPDI",XPDA,"ENVVAR","XPDDIQ")) M XPDDIQ=^("XPDDIQ")
"RTN","XPDIR",36,0)
 G DEV^XPDI
"RTN","XPDIR",37,0)
 ;
"RTN","XPDIR",38,0)
ABORT W !!,"**RESTART ABORTED**",!
"RTN","XPDIR",39,0)
 L -XPD(9.7,XPDST)
"RTN","XPDIR",40,0)
 Q
"RTN","XPDIU")
0^5^B13281250
"RTN","XPDIU",1,0)
XPDIU ;SFISC/RSD - UNload/Convert/Rollup Distribution Global ;01/29/97  10:44
"RTN","XPDIU",2,0)
 ;;8.0;KERNEL;**15,41,44,51,58**;Jul 10, 1995
"RTN","XPDIU",3,0)
EN1 ;unload
"RTN","XPDIU",4,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDST,XPDT,XPDQ,XPDQUIT,Y
"RTN","XPDIU",5,0)
 ;remove dangling transport globals
"RTN","XPDIU",6,0)
 S DA=0 F  S DA=$O(^XTMP("XPDI",DA)) Q:'DA  I '$D(^XPD(9.7,DA)) K ^XTMP("XPDI",DA)
"RTN","XPDIU",7,0)
 ;must be Loaded or Queued and be the starting package
"RTN","XPDIU",8,0)
 S (DA,XPDST)=$$LOOK^XPDI1("I $P(^(0),U,9)<2,$D(^XPD(9.7,""ASP"",Y,1,Y))") Q:'DA
"RTN","XPDIU",9,0)
 S XPDQ=^XPD(9.7,DA,0),DIR(0)="Y",DIR("A")="Want to continue with the Unload of this Distribution",DIR("B")="NO"
"RTN","XPDIU",10,0)
 S DIR("?")="YES will delete the Transport Global and the entry in the Install file for these Packages."
"RTN","XPDIU",11,0)
 I $P(XPDQ,U,9)=1,$P(XPDQ,U,6) W !,"This Distribution is Queued for Install with task number ",$P(XPDQ,U,6),!,"Don't forget to delete Taskman Task."
"RTN","XPDIU",12,0)
 D ^DIR I 'Y!$D(DIRUT) D QUIT^XPDI1(XPDST) Q
"RTN","XPDIU",13,0)
 S XPD=0,DIK="^XPD(9.7,"
"RTN","XPDIU",14,0)
 ;need to kill the XTMP("XPDI") and the entry in the install file
"RTN","XPDIU",15,0)
 F  S XPD=$O(XPDT(XPD)) Q:'XPD  S DA=+XPDT(XPD) D ^DIK K ^XTMP("XPDI",DA)
"RTN","XPDIU",16,0)
 ;check if Out-Of-Order setname is defined, kill it
"RTN","XPDIU",17,0)
 I $D(^XTMP("XQOO",$P(XPDQ,U))) K ^($P(XPDQ,U))
"RTN","XPDIU",18,0)
 D QUIT^XPDI1(XPDST)
"RTN","XPDIU",19,0)
 Q
"RTN","XPDIU",20,0)
EN2 ;convert
"RTN","XPDIU",21,0)
 N %,DA,DIK,DIR,DIRUT,X,XPD,XPDBLD,XPDI,XPDNM,XPDPKG,XPDPMT,XPDST,XPDT,XPDQUIT,Y
"RTN","XPDIU",22,0)
 S XPDI=$$LOOK^XPDI1("I '$P(^(0),U,9),$D(^XPD(9.7,""ASP"",Y,1,Y))") Q:'XPDI
"RTN","XPDIU",23,0)
 K XPDT("DA"),XPDT("NM")
"RTN","XPDIU",24,0)
 ;make sure transport globals exist
"RTN","XPDIU",25,0)
 S XPDT=0 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D
"RTN","XPDIU",26,0)
 .S Y=+XPDT(XPDT) Q:$D(^XTMP("XPDI",Y))
"RTN","XPDIU",27,0)
 .W !,$P(XPDT(XPDT),U,2),"   ** Transport Global doesn't exist **",$C(7)
"RTN","XPDIU",28,0)
 .K XPDT(XPDT) S XPDQUIT=1
"RTN","XPDIU",29,0)
 I $D(XPDT)'>9!$D(XPDQUIT) D QUIT^XPDI1(XPDI) Q
"RTN","XPDIU",30,0)
 S DIR(0)="Y",DIR("A")="Want to make the Transport Globals Permanet",DIR("B")="NO"
"RTN","XPDIU",31,0)
 S DIR("?",1)="YES will leave the Transport Global so you can transport this TG in mulitple Distributions."
"RTN","XPDIU",32,0)
 S DIR("?")="NO will remove the Transport Global after you transport this TG in the next Distribution."
"RTN","XPDIU",33,0)
 D ^DIR I $D(DIRUT) D QUIT^XPDI1(XPDI) Q
"RTN","XPDIU",34,0)
 S XPDPMT=Y,DIR("A")="Want to continue with the Conversion of the Package(s)",DIR("B")="NO"
"RTN","XPDIU",35,0)
 S DIR("?",1)="YES will convert the Packages to globals that can be transported.",DIR("?")="An entry will be added to the Build file and the entry in the Install file will be deleted."
"RTN","XPDIU",36,0)
 D ^DIR I 'Y!$D(DIRUT) Q
"RTN","XPDIU",37,0)
 S XPDT=0,DIK="^XPD(9.7,"
"RTN","XPDIU",38,0)
 F  S XPDT=$O(XPDT(XPDT)) Q:'XPDT  D  Q:$D(XPDQUIT)
"RTN","XPDIU",39,0)
 .;kill Install file entry
"RTN","XPDIU",40,0)
 .S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDPKG=+$O(^XTMP("XPDI",XPDA,"PKG",0))
"RTN","XPDIU",41,0)
 .;resolve the Package file link
"RTN","XPDIU",42,0)
 .D:XPDPKG
"RTN","XPDIU",43,0)
 ..N DIC,X,Y
"RTN","XPDIU",44,0)
 ..S DIC="^DIC(9.4,",DIC(0)="X",X=$P(^XTMP("XPDI",XPDA,"PKG",XPDPKG,0),U)
"RTN","XPDIU",45,0)
 ..D ^DIC I Y<0 S XPDPKG=0 Q
"RTN","XPDIU",46,0)
 ..S XPDPKG=+Y
"RTN","XPDIU",47,0)
 .S DA=$$BLD^XPDIP(XPDBLD) D:DA
"RTN","XPDIU",48,0)
 ..S ^XTMP("XPDT",DA)=XPDPMT M ^XTMP("XPDT",DA)=^XTMP("XPDI",XPDA)
"RTN","XPDIU",49,0)
 .I 'DA W !,XPDNM,"   ** Couldn't add to Build file **" S XPDQUIT=1 Q
"RTN","XPDIU",50,0)
 .;kill Install file entry
"RTN","XPDIU",51,0)
 .S DA=XPDA D ^DIK
"RTN","XPDIU",52,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIU",53,0)
 ;set expiration date to 1 year if global should be permanent, else 30
"RTN","XPDIU",54,0)
 S ^XTMP("XPDT",0)=$$FMADD^XLFDT(DT,$S(XPDPMT:365,1:30))_U_DT
"RTN","XPDIU",55,0)
 D QUIT^XPDI1(XPDI)
"RTN","XPDIU",56,0)
 W !,"  ** DONE **",!
"RTN","XPDIU",57,0)
 Q
"RTN","XPDT")
0^18^B57488847
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package; 15 Apr 96 10:15 ;03/27/97  08:29
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41,44,51,58**;Jul 10, 1995
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER,X,Y,Z
"RTN","XPDT",9,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",10,0)
 S XPD="First Package Name: ",DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one.",XPDT=0
"RTN","XPDT",11,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",12,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",13,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",14,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",15,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",16,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",17,0)
 .;if type is Global Package, set DIRUT if there is other packages
"RTN","XPDT",18,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q
"RTN","XPDT",19,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",20,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",21,0)
 ..I $D(^XTMP("XPDT",XPDA)) W "  **Cannot have a pre-existing Transport Global**" S DIRUT=1 Q
"RTN","XPDT",22,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",23,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",24,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",25,0)
 ..S XPDERR=1,XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",26,0)
 .Q:$D(XPDERR)
"RTN","XPDT",27,0)
 .;multi-package
"RTN","XPDT",28,0)
 .I $P(Y(0),U,3)=1 D  Q
"RTN","XPDT",29,0)
 ..W "   (Multi-Package)" S X=0
"RTN","XPDT",30,0)
 ..F  S X=$O(^XPD(9.6,XPDA,10,X)) Q:'X  S Z=$P($G(^(X,0)),U) D:Z]""
"RTN","XPDT",31,0)
 ...N XPDA,X
"RTN","XPDT",32,0)
 ...W !?3,Z S XPDA=$O(^XPD(9.6,"B",Z,0))
"RTN","XPDT",33,0)
 ...I 'XPDA W "  **Can't find definition in Build file**" Q
"RTN","XPDT",34,0)
 ...I $D(XPDT("DA",XPDA)) W "  already listed" Q
"RTN","XPDT",35,0)
 ...S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_Z_U,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",36,0)
 ...Q:'$D(^XTMP("XPDT",XPDA))  S Y=$G(^(XPDA))
"RTN","XPDT",37,0)
 ...W "   **Transport Global exists**"
"RTN","XPDT",38,0)
 ...;Y=1 if TG is Permanet
"RTN","XPDT",39,0)
 ...I Y S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",40,0)
 ...D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",41,0)
 .S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",42,0)
 .I $D(^XTMP("XPDT",XPDA)) W "     **Transport Global exists**" D
"RTN","XPDT",43,0)
 ..;if TG is permanet then quit
"RTN","XPDT",44,0)
 ..I $G(^XTMP("XPDT",XPDA)) S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",45,0)
 ..;ask if they want to use TG
"RTN","XPDT",46,0)
 ..D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",47,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",48,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",49,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",50,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",51,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",52,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",53,0)
 S DIR(0)="SAO^HF:Host File;PM:PackMan",DIR("A")="Transport through (HF)Host File or (PM)PackMan: ",DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",54,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",55,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",56,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",57,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",58,0)
 I $D(XPDGP),Y'="HF" W !,"**Global Package can only be sent with a Host File, Transport ABORTED**" Q
"RTN","XPDT",59,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",60,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan." G QUIT
"RTN","XPDT",61,0)
 W !!
"RTN","XPDT",62,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",63,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",64,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",65,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",66,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",67,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",68,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",69,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",70,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",71,0)
 ..;can't send global package in packman message
"RTN","XPDT",72,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",73,0)
 ..;verify global package
"RTN","XPDT",74,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",75,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",76,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",77,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",78,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",79,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",80,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",81,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",82,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",83,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",84,0)
 ;if no device then just create transport global
"RTN","XPDT",85,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",86,0)
 Q
"RTN","XPDT",87,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",88,0)
 D HOME^%ZIS
"RTN","XPDT",89,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",90,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",91,0)
 ;if no file, then quit
"RTN","XPDT",92,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",93,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment"
"RTN","XPDT",94,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",95,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",96,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",97,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",98,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",99,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",100,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",101,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",102,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",103,0)
 ;write date and comment header
"RTN","XPDT",104,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",105,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",106,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",107,0)
 U IO(0) Q
"RTN","XPDT",108,0)
 ;
"RTN","XPDT",109,0)
GO S I=1,Y="" U IO
"RTN","XPDT",110,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",111,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",112,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",113,0)
 E  F  D  W $$SUM("**KIDS**:"_Y),! Q:I=XPDT  S Y="",I=I+1
"RTN","XPDT",114,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",115,0)
 ;after the package list write an extra line feed
"RTN","XPDT",116,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",117,0)
 ;loop thru & write global, don't kill if set to permanent, set in XPDIU
"RTN","XPDT",118,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDT",119,0)
 W "**END**",!
"RTN","XPDT",120,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",121,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",122,0)
 ;we're done with device, close it
"RTN","XPDT",123,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",124,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",125,0)
 Q
"RTN","XPDT",126,0)
GW ;global write
"RTN","XPDT",127,0)
 N GR,GCK,GL
"RTN","XPDT",128,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",129,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",130,0)
 ;the next INSTALL NAME
"RTN","XPDT",131,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",132,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",133,0)
 Q
"RTN","XPDT",134,0)
GPW ;global package write
"RTN","XPDT",135,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",136,0)
 W !
"RTN","XPDT",137,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",138,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",139,0)
 .;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",140,0)
 .;the next GLOBAL
"RTN","XPDT",141,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",142,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",143,0)
 Q
"RTN","XPDT",144,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",145,0)
 Q
"RTN","XPDT",146,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",147,0)
 D QUIT
"RTN","XPDT",148,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",149,0)
 D ^%ZISC
"RTN","XPDT",150,0)
 Q
"RTN","XPDT",151,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",152,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",153,0)
 ;ask for next disk
"RTN","XPDT",154,0)
 ;this code is for MSM system only
"RTN","XPDT",155,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",156,0)
 .;write continue flag at end of this file
"RTN","XPDT",157,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",158,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",159,0)
 .C IO U IO(0)
"RTN","XPDT",160,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",161,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",162,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",163,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",164,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",165,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",166,0)
 .;MSM specific code to open HFS
"RTN","XPDT",167,0)
 .O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDT",168,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",169,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDT",170,0)
 Q X
"RTN","XPDT",171,0)
 ;
"RTN","XPDT",172,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",173,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",174,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",175,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",176,0)
 D @Y Q
"RTN","XPDTA")
0^10^B18438886
"RTN","XPDTA",1,0)
XPDTA ;SFISC/RSD - Build Actions for Kernel Files ;01/28/97  08:48
"RTN","XPDTA",2,0)
 ;;8.0;KERNEL;**15,44,58**;Jul 10, 1995
"RTN","XPDTA",3,0)
 Q
"RTN","XPDTA",4,0)
 ;^XTMP("XPDT",XPDA,"KRN",FILE,DA) is the global root
"RTN","XPDTA",5,0)
 ;DA=ien in ^XTMP,XPDNM=package name, XPDA=package ien in ^XPD(9.6,
"RTN","XPDTA",6,0)
OPT ;options
"RTN","XPDTA",7,0)
 ;if link, kill everything and just process the menu items
"RTN","XPDTA",8,0)
 I XPDFL=2 D  G OPTT
"RTN","XPDTA",9,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,%)) Q:'%  K:%'=10 ^(%)
"RTN","XPDTA",10,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",11,0)
 S %=^XTMP("XPDT",XPDA,"KRN",19,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",12,0)
 ;resolve Help Frame (0;7), kill Permitted Devices (3.96;0) & queue node (200)
"RTN","XPDTA",13,0)
 S $P(%,U,7)=$$PT("^DIC(9.2)",$P(%,U,7)),^XTMP("XPDT",XPDA,"KRN",19,DA,0)=% K ^(3.96),^(200)
"RTN","XPDTA",14,0)
 ;resolve Server Bulletin (220;1), Server Mailgroup (220;3)
"RTN","XPDTA",15,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,220)) S %=^(220),$P(%,U)=$$PT("^XMB(3.6)",+%),$P(%,U,3)=$$PT("^XMB(3.8)",$P(%,U,3)),^XTMP("XPDT",XPDA,"KRN",19,DA,220)=%
"RTN","XPDTA",16,0)
 ;resolve RPC (RPC;0), must be type Broker
"RTN","XPDTA",17,0)
 I $D(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC")) K:$P(^(0),U,4)'="B" ^("RPC") D
"RTN","XPDTA",18,0)
 .;kill  "B"=name x-ref, it will be re-indexed when installed
"RTN","XPDTA",19,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC","B")
"RTN","XPDTA",20,0)
 .;loop thru RPCs and resolve (RPC;1)
"RTN","XPDTA",21,0)
 .S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",22,0)
 ..S %2=$$PT("^XWB(8994)",+%1)
"RTN","XPDTA",23,0)
 ..;if can't resolve then delete
"RTN","XPDTA",24,0)
 ..I %2="" K ^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0) Q
"RTN","XPDTA",25,0)
 ..;save the RPC name
"RTN","XPDTA",26,0)
 ..S $P(^XTMP("XPDT",XPDA,"KRN",19,DA,"RPC",%,0),U)=%2
"RTN","XPDTA",27,0)
 .Q
"RTN","XPDTA",28,0)
OPTT ;Menus can only exist for options of type: menu,protocol,protocol menu,
"RTN","XPDTA",29,0)
 ;extended action, limited, window suite
"RTN","XPDTA",30,0)
 I "LMOQXZ"'[$P(^XTMP("XPDT",XPDA,"KRN",19,DA,0),U,4) K ^(10) Q
"RTN","XPDTA",31,0)
 ;kill  "B"=name, "C"=synonyms x-ref, it will be re-indexed when installed
"RTN","XPDTA",32,0)
 K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,"B"),^("C")
"RTN","XPDTA",33,0)
 ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",34,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",35,0)
 .S %2=$$PT("^DIC(19)",+%1)
"RTN","XPDTA",36,0)
 .;items must be sent by themselves, check "B" x-ref
"RTN","XPDTA",37,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",19,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%,U)=%2 Q
"RTN","XPDTA",38,0)
 .;if I couldn't resolve this option, then kill it
"RTN","XPDTA",39,0)
 .K ^XTMP("XPDT",XPDA,"KRN",19,DA,10,%)
"RTN","XPDTA",40,0)
 Q
"RTN","XPDTA",41,0)
PRO ;protocols
"RTN","XPDTA",42,0)
 ;if link, kill everything and just process the menu items
"RTN","XPDTA",43,0)
 I XPDFL=2 D  G PROT
"RTN","XPDTA",44,0)
 ;resolve Package (0;12), remove Creator (0;5)
"RTN","XPDTA",45,0)
 S %=^XTMP("XPDT",XPDA,"KRN",101,DA,0),$P(%,U,12)=$$PT("^DIC(9.4)",$P(%,U,12)),$P(%,U,5)=""
"RTN","XPDTA",46,0)
 ;kill under Menus (10), "B"=name, "C"=synonyms
"RTN","XPDTA",47,0)
 S ^XTMP("XPDT",XPDA,"KRN",101,DA,0)=% I $D(^(10,0)) K ^("B"),^("C")
"RTN","XPDTA",48,0)
 ;resolve File Link (5;1), its a variable pointer
"RTN","XPDTA",49,0)
 S %=$P($G(^XTMP("XPDT",XPDA,"KRN",101,DA,5)),U),%1=$P(%,";",2)
"RTN","XPDTA",50,0)
 I %,$D(@("^"_%1_+%_",0)")) S $P(^XTMP("XPDT",XPDA,"KRN",101,DA,5),U)=$P(^(0),U)_";"_%1
"RTN","XPDTA",51,0)
 ;resolve HL7 fields, node 770
"RTN","XPDTA",52,0)
 S %=$G(^XTMP("XPDT",XPDA,"KRN",101,DA,770)) I $L(%) D  S ^XTMP("XPDT",XPDA,"KRN",101,DA,770)=%
"RTN","XPDTA",53,0)
 .S $P(%,U)=$$PT("^HL(771)",$P(%,U)),$P(%,U,2)=$$PT("^HL(771)",$P(%,U,2))
"RTN","XPDTA",54,0)
 .S $P(%,U,3)=$$PT("^HL(771.2)",$P(%,U,3)),$P(%,U,11)=$$PT("^HL(771.2)",$P(%,U,11))
"RTN","XPDTA",55,0)
 .S $P(%,U,4)=$$PT("^HL(779.001)",$P(%,U,4)),$P(%,U,7)=$$PT("^HLCS(870)",$P(%,U,7))
"RTN","XPDTA",56,0)
 .S $P(%,U,8)=$$PT("^HL(779.003)",$P(%,U,8)),$P(%,U,9)=$$PT("^HL(779.003)",$P(%,U,9))
"RTN","XPDTA",57,0)
 .S $P(%,U,10)=$$PT("^HL(771.5)",$P(%,U,10))
"RTN","XPDTA",58,0)
PROT ;loop thru 10=Menus and resolve Menu (10;1), kill if it doesn't resolve
"RTN","XPDTA",59,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",60,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",61,0)
 .S %2=$$PT("^ORD(101)",+%1)
"RTN","XPDTA",62,0)
 .;Menu must also be sent by itself, check "B" x-ref
"RTN","XPDTA",63,0)
 .I $L(%2),$D(^XPD(9.6,XPDA,"KRN",101,"NM","B",%2)) S ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,U)=%2,$P(^XTMP("XPDT",XPDA,"KRN",101,DA,10,%,0),U,4)=$$PT("^ORD(101)",$P(%1,U,4)) Q
"RTN","XPDTA",64,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,10,%)
"RTN","XPDTA",65,0)
 ;quit if no Access multiple
"RTN","XPDTA",66,0)
 Q:'$D(^XTMP("XPDT",XPDA,"KRN",101,DA,3,0))  K ^("B")
"RTN","XPDTA",67,0)
 ;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDTA",68,0)
 S %=0 F  S %=$O(^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)) Q:'%  S %1=$G(^(%,0)) D
"RTN","XPDTA",69,0)
 .;%2=.01 of Menu(protocol)
"RTN","XPDTA",70,0)
 .S %2=$$PT("^DIC(19.1)",+%1)
"RTN","XPDTA",71,0)
 .I $L(%2) S ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%,0)=%2 Q
"RTN","XPDTA",72,0)
 .K ^XTMP("XPDT",XPDA,"KRN",101,DA,3,%)
"RTN","XPDTA",73,0)
 Q
"RTN","XPDTA",74,0)
RTNE ;routine entry build action
"RTN","XPDTA",75,0)
 N %,X,XPD
"RTN","XPDTA",76,0)
 ;move routine to ^XTMP("XPDT",DPK1,"RTN",routine name
"RTN","XPDTA",77,0)
 ;routines will have the checksum in XTMP("XPDT",XPDA,"RTN",X) & in
"RTN","XPDTA",78,0)
 ;Build file
"RTN","XPDTA",79,0)
 S X=$P(^XTMP("XPDT",XPDA,"KRN",9.8,DA,0),U),XPD=^(-1)
"RTN","XPDTA",80,0)
 Q:X=""  S %=$$LOAD(X,XPD),$P(^XPD(9.6,XPDA,"KRN",9.8,"NM",+$P(XPD,U,2),0),U,4)=%
"RTN","XPDTA",81,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8,DA)
"RTN","XPDTA",82,0)
 Q
"RTN","XPDTA",83,0)
RTNF ;routine file build action
"RTN","XPDTA",84,0)
 N X,Y,% S Y=0
"RTN","XPDTA",85,0)
 ;the routines that are left in XTMP("XPDT",XPDA,"KRN",9.8) are to be
"RTN","XPDTA",86,0)
 ;deleted at site, move name field to RTN node
"RTN","XPDTA",87,0)
 F  S Y=$O(^XTMP("XPDT",XPDA,"KRN",9.8,Y)) Q:'Y  S %=^(Y,-1),X=^(0) D
"RTN","XPDTA",88,0)
 .I +%=1 S ^XTMP("XPDT",XPDA,"RTN",X)=%,^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",89,0)
 ;kill everything
"RTN","XPDTA",90,0)
 K ^XTMP("XPDT",XPDA,"KRN",9.8)
"RTN","XPDTA",91,0)
 Q
"RTN","XPDTA",92,0)
PT(GR,DA) ;GR=file global ref, DA=ien, return .01 value
"RTN","XPDTA",93,0)
 Q:'DA ""
"RTN","XPDTA",94,0)
 I $D(@GR@(+DA,0))#2 Q $P(^(0),U)
"RTN","XPDTA",95,0)
 Q ""
"RTN","XPDTA",96,0)
 ;
"RTN","XPDTA",97,0)
LOAD(X,XPD) ;load routine X, XPD=action^ien in Build file
"RTN","XPDTA",98,0)
 ;XPD = 0-load, 1-delete, 2-skip, returns checksum
"RTN","XPDTA",99,0)
 ;quit if routine is already saved
"RTN","XPDTA",100,0)
 Q:$D(^XTMP("XPDT",XPDA,"RTN",X)) $P(^(X),U,3)
"RTN","XPDTA",101,0)
 N DIF,XCNP,%N
"RTN","XPDTA",102,0)
 S DIF="^XTMP(""XPDT"",XPDA,""RTN"",X,",XCNP=0
"RTN","XPDTA",103,0)
 X ^%ZOSF("LOAD")
"RTN","XPDTA",104,0)
 ;^XTMP("XPDT",XPDA,"RTN",X)=action^ien in Build^checksum
"RTN","XPDTA",105,0)
 S %N=$$SUMB^XPDRSUM($NA(^XTMP("XPDT",XPDA,"RTN",X))),^XTMP("XPDT",XPDA,"RTN",X)=XPD_U_"B"_%N
"RTN","XPDTA",106,0)
 ;update count node
"RTN","XPDTA",107,0)
 S ^("RTN")=$G(^XTMP("XPDT",XPDA,"RTN"))+1
"RTN","XPDTA",108,0)
 Q "B"_%N
"RTN","XPDTC")
0^8^B38149448
"RTN","XPDTC",1,0)
XPDTC ;SFISC/RSD - Transport calls ;02/14/97  08:26
"RTN","XPDTC",2,0)
 ;;8.0;KERNEL;**10,15,21,39,41,44,58**;Jul 10, 1995
"RTN","XPDTC",3,0)
 Q
"RTN","XPDTC",4,0)
 ;^XTMP("XPDT",XPDA,data type,file #,
"RTN","XPDTC",5,0)
 ;XPDA=ien of File 9.6, XPDNM=.01 field
"RTN","XPDTC",6,0)
DD ;build DD
"RTN","XPDTC",7,0)
 N FILE,FGR,FNAM,Z2,Z3,Z4
"RTN","XPDTC",8,0)
 S FILE=0,FGR="^XTMP(""XPDT"",XPDA)",FNAM=$NA(^XPD(9.6,XPDA,4,"APDD"))
"RTN","XPDTC",9,0)
 F  S FILE=$O(^XPD(9.6,XPDA,4,FILE)) Q:'FILE  D
"RTN","XPDTC",10,0)
 .S Z2=$G(^XPD(9.6,XPDA,4,FILE,222)),Z3=$G(^(223)),Z4=$G(^(224))
"RTN","XPDTC",11,0)
 .Q:'$$DATA^XPDV(FILE,Z2)
"RTN","XPDTC",12,0)
 .D FIA^DIFROMSU(FILE,"",FNAM,FGR,Z2,Z3,Z4,XPDVER),DIERR:$D(DIERR)
"RTN","XPDTC",13,0)
 Q:'$D(^XTMP("XPDT",XPDA,"FIA"))
"RTN","XPDTC",14,0)
 ;send DD and Data
"RTN","XPDTC",15,0)
 D DDOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR),DATAOUT^DIFROMS("","","",FGR),DIERR:$D(DIERR)
"RTN","XPDTC",16,0)
 Q
"RTN","XPDTC",17,0)
 ;XPDERR is checked in XPDT and will abort transport
"RTN","XPDTC",18,0)
DIERR ;record error
"RTN","XPDTC",19,0)
 D MSG^DIALOG("EW",.XPD) S XPDERR=1
"RTN","XPDTC",20,0)
 Q
"RTN","XPDTC",21,0)
KRN ;build Kernel Files
"RTN","XPDTC",22,0)
 ;XPDFILE=file #, XPDOLDA=ien in Build file
"RTN","XPDTC",23,0)
 N %,%1,%2,DA,EACT,FACT,FGR,XPDFILE,XPDFL,XPDOLDA,XPDI
"RTN","XPDTC",24,0)
 F XPDFILE=1:1 S Y0=$P($T(FILES+XPDFILE^XPDE),";;",2,99) Q:Y0=""  S XPDI(+Y0)=Y0
"RTN","XPDTC",25,0)
 ;XPDI(XPDFILE)=file;order;x-ref;fact;eact;fpre;epre;fpos;epos;fdel
"RTN","XPDTC",26,0)
 S XPDFILE=0
"RTN","XPDTC",27,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  S XPDI=$G(XPDI(XPDFILE)),FACT=$P(XPDI,";",4),EACT=$P(XPDI,";",5) D  Q:$D(XPDERR)  D:FACT]"" ACT(FACT)
"RTN","XPDTC",28,0)
 .;need to add code to check if File and data is already being sent in the File
"RTN","XPDTC",29,0)
 .;mult. If it is, don't bother sending it again.  DTL(XPDFILE)
"RTN","XPDTC",30,0)
 .S XPDOLDA=0,FGR=$$FILE^XPDV(XPDFILE) I FGR="" S XPDERR=1 Q
"RTN","XPDTC",31,0)
 .K ^TMP($J,"XPD")
"RTN","XPDTC",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDTC",33,0)
 ..;XPDFL= 0-send,1-delete,2-link,3-merge,4-attach,5-disable
"RTN","XPDTC",34,0)
 ..S XPDFL=$P(Y0,U,3)
"RTN","XPDTC",35,0)
 ..;If deleting at site get an unused DA
"RTN","XPDTC",36,0)
 ..I XPDFL=1 S DA=$O(@FGR@(" "),-1)+1 F DA=DA:1 Q:'$D(^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA))
"RTN","XPDTC",37,0)
 ..;$P(Y0,U,2) is file # for this template, reset Y0 before getting DA
"RTN","XPDTC",38,0)
 ..E  S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY^XPDV(Y0)
"RTN","XPDTC",39,0)
 ..I 'DA S XPDERR=1 Q
"RTN","XPDTC",40,0)
 ..;(-1)=action ^ ien in Build file
"RTN","XPDTC",41,0)
 ..S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,-1)=+XPDFL_"^"_XPDOLDA
"RTN","XPDTC",42,0)
 ..;action 2 - verify children, 4 - verify parent
"RTN","XPDTC",43,0)
 ..I XPDFL=2!(XPDFL=4),'$$MENU^XPDV(XPDFILE,DA,XPDFL) S XPDERR=1 Q
"RTN","XPDTC",44,0)
 ..;if action is 1,4 or 5 then only send .01 field and set checksum to ""
"RTN","XPDTC",45,0)
 ..I XPDFL=1!(XPDFL>3) S ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA,0)=$P(Y0,U),$P(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA),U,4)="" Q
"RTN","XPDTC",46,0)
 ..M ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)=@FGR@(DA)
"RTN","XPDTC",47,0)
 ..;execute entry build action
"RTN","XPDTC",48,0)
 ..D:EACT]"" ACT(EACT)
"RTN","XPDTC",49,0)
 .;quit if no entries were saved
"RTN","XPDTC",50,0)
 .Q:'$O(^XTMP("XPDT",XPDA,"KRN",XPDFILE,0))
"RTN","XPDTC",51,0)
 .;XPDI=XPDI(XPDFILE), build x-ref of order to install
"RTN","XPDTC",52,0)
 .S %=$P(^DIC(XPDFILE,0),U),^XTMP("XPDT",XPDA,"ORD",+$P(XPDI,";",2),XPDFILE)=XPDI,^(XPDFILE,0)=%
"RTN","XPDTC",53,0)
 .Q
"RTN","XPDTC",54,0)
 Q
"RTN","XPDTC",55,0)
QUES ;build from Install Questions multiple
"RTN","XPDTC",56,0)
 N I,J,X,%
"RTN","XPDTC",57,0)
 S X=""
"RTN","XPDTC",58,0)
 ;the "B" x-ref will give me the order of the questions
"RTN","XPDTC",59,0)
 F  S X=$O(^XPD(9.6,XPDA,"QUES","B",X)) Q:X=""  S I=$$QUES^XPDV(X) S:'I XPDERR=1 D:I
"RTN","XPDTC",60,0)
 .S J=0 F  S J=$O(^XPD(9.6,XPDA,"QUES",I,J)) Q:J=""  D
"RTN","XPDTC",61,0)
 ..;tranform J to DIR subscripts
"RTN","XPDTC",62,0)
 ..I $L(J)=1!(J="QQ") S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"1ABQ","0AB?"))=^(J) Q  ;^(J) ref to ^XPD(9.6,XPDA,"QUES",I,J)
"RTN","XPDTC",63,0)
 ..;set the word processing fields into DIR("?",#) structure
"RTN","XPDTC",64,0)
 ..F %=1:1 Q:'$D(^XPD(9.6,XPDA,"QUES",I,J,%,0))  S ^XTMP("XPDT",XPDA,"QUES",X,$TR(J,"AQ10","A?"),%)=^(0)
"RTN","XPDTC",65,0)
 ;send the File questions
"RTN","XPDTC",66,0)
 F I=1:2 S X=$P($T(QUESTION+I),";;",2,99) Q:X=""  S Y=$P($T(QUESTION+I+1),";;",2) D
"RTN","XPDTC",67,0)
 .S ^XTMP("XPDT",XPDA,"QUES",$P(X,";"),0)=$P(X,";",2),^("A")=$P(X,";",3),^("B")=$P(X,";",4),^("??")=$P(X,";",5) S:Y]"" ^("M")=Y
"RTN","XPDTC",68,0)
 Q
"RTN","XPDTC",69,0)
INT ;build pre,post, & enviroment init routines
"RTN","XPDTC",70,0)
 N %,I,X
"RTN","XPDTC",71,0)
 F I="PRE","INI","INIT" I $G(^XPD(9.6,XPDA,I))]"" S X=^(I) D
"RTN","XPDTC",72,0)
 .S ^XTMP("XPDT",XPDA,I)=X,X=$P(X,U,$L(X,U)) Q:$D(^("RTN",X))
"RTN","XPDTC",73,0)
 .I '$$RTN^XPDV(X) W !,"Routine ",X," **NOT FOUND**" S XPDERR=1 Q
"RTN","XPDTC",74,0)
 .S %=$$LOAD^XPDTA(X,"0^")
"RTN","XPDTC",75,0)
 Q
"RTN","XPDTC",76,0)
BLD ;build Build file, Package file and Order Parameter file
"RTN","XPDTC",77,0)
 N %,DIC,X,XPD,XPDI,XPDV,Y
"RTN","XPDTC",78,0)
 ;save version of kernel and fm
"RTN","XPDTC",79,0)
 S ^XTMP("XPDT",XPDA,"VER")=$$VERSION^XPDUTL("XU")_U_$$VERSION^XPDUTL("VA FILEMAN")
"RTN","XPDTC",80,0)
 M ^XTMP("XPDT",XPDA,"BLD",XPDA)=^XPD(9.6,XPDA)
"RTN","XPDTC",81,0)
 ;check national package file pointer
"RTN","XPDTC",82,0)
 S XPDI=$P(^XPD(9.6,XPDA,0),U,2)
"RTN","XPDTC",83,0)
 I XPDI="" W !,"No Package File Link" Q
"RTN","XPDTC",84,0)
 S $P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,2)=$$PT^XPDTA("^DIC(9.4)",XPDI)
"RTN","XPDTC",85,0)
 ;quit if no pointer to package file
"RTN","XPDTC",86,0)
 I '$D(^DIC(9.4,XPDI)) W !,"Package File Link is corrupted" S XPDERR=1 Q
"RTN","XPDTC",87,0)
 ;update version multiple in package file,XPD=version^date distributed
"RTN","XPDTC",88,0)
 S XPD=$$VER^XPDUTL(XPDNM)_U_$P(^XTMP("XPDT",XPDA,"BLD",XPDA,0),U,4)
"RTN","XPDTC",89,0)
 ;XPD(1)=root of description field
"RTN","XPDTC",90,0)
 S:$D(^XTMP("XPDT",XPDA,"BLD",XPDA,1)) XPD(1)=$NA(^(1))
"RTN","XPDTC",91,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,0)=^DIC(9.4,XPDI,0),^XTMP("XPDT",XPDA,"PKG",XPDI,22,0)="^"_$P(^DD(9.4,22,0),U,2)_"^1^1"
"RTN","XPDTC",92,0)
 ;XPDNM'["*" is a version release
"RTN","XPDTC",93,0)
 I XPDNM'["*" D
"RTN","XPDTC",94,0)
 .S XPDV=$$PKGVER^XPDIP(XPDI,.XPD)
"RTN","XPDTC",95,0)
 .;Merge is used to set single nodes and merge multiples
"RTN","XPDTC",96,0)
 .F %=1,5,7,20,"DEV","VERSION" M ^XTMP("XPDT",XPDA,"PKG",XPDI,%)=^DIC(9.4,XPDI,%)
"RTN","XPDTC",97,0)
 .;XPDV=ien of Version Multiple
"RTN","XPDTC",98,0)
 .I $D(^DIC(9.4,XPDI,22,XPDV))'>9 W !!,"**Version multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",99,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1)=^DIC(9.4,XPDI,22,XPDV)
"RTN","XPDTC",100,0)
 ;this is a patch, %=version number, $P(XPD,U)=patch number
"RTN","XPDTC",101,0)
 E  D
"RTN","XPDTC",102,0)
 .S %=$P(XPD,U),$P(XPD,U)=$P(XPDNM,"*",3),XPDV=$$PKGPAT^XPDIP(XPDI,%,.XPD)
"RTN","XPDTC",103,0)
 .S ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,0)=^DIC(9.4,XPDI,22,+XPDV,0)
"RTN","XPDTC",104,0)
 .I $D(^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2)))'>9 W !!,"**Patch multiple in Package file wasn't updated**",!! S XPDERR=1 Q
"RTN","XPDTC",105,0)
 .M ^XTMP("XPDT",XPDA,"PKG",XPDI,22,1,"PAH",1)=^DIC(9.4,XPDI,22,+XPDV,"PAH",+$P(XPDV,U,2))
"RTN","XPDTC",106,0)
 ;M ^XTMP("XPDT",XPDA,"PKG",XPDI)=^DIC(9.4,XPDI)
"RTN","XPDTC",107,0)
 ;save the version ien^patch ien on -1 node
"RTN","XPDTC",108,0)
 S ^XTMP("XPDT",XPDA,"PKG",XPDI,-1)="1^1"
"RTN","XPDTC",109,0)
 ;resolve Primary Help Frame (0;4)
"RTN","XPDTC",110,0)
 S %=+$P(^DIC(9.4,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"PKG",XPDI,0),U,4)=$$PT^XPDTA("^DIC(9.2)",%)
"RTN","XPDTC",111,0)
 ;transport the PACKAGE PARAMETER multiple under file 100.99
"RTN","XPDTC",112,0)
 ;quit of GLOBAL PACKAGE
"RTN","XPDTC",113,0)
 Q:'$D(^ORD(100.99,1,5,XPDI,0))!$D(XPDGP)
"RTN","XPDTC",114,0)
 M ^XTMP("XPDT",XPDA,"OER",XPDI)=^ORD(100.99,1,5,XPDI)
"RTN","XPDTC",115,0)
 ;resolve Display Group Default (0;4)
"RTN","XPDTC",116,0)
 S %=+$P(^ORD(100.99,1,5,XPDI,0),U,4) S:% $P(^XTMP("XPDT",XPDA,"OER",XPDI,0),U,4)=$$PT^XPDTA("^ORD(100.98)",%)
"RTN","XPDTC",117,0)
 Q
"RTN","XPDTC",118,0)
 ;
"RTN","XPDTC",119,0)
ACT(%) ;execute action
"RTN","XPDTC",120,0)
 ;user can count on DA,XPDFILE,XPDFL,XPDNM,XPDOLDA being around
"RTN","XPDTC",121,0)
 ;DA=ien in ^XTMP("XPDT",XPDA,"KRN",XPDFILE,DA)
"RTN","XPDTC",122,0)
 ;XPDOLDA=ien in ^XPD(9.6,XPDA,"KRN",XPDIFLE,"NM",XPDOLDA)
"RTN","XPDTC",123,0)
 N EACT,FACT,FGR,K0,Y0
"RTN","XPDTC",124,0)
 S:%'["^" %="^"_%
"RTN","XPDTC",125,0)
 D @% Q
"RTN","XPDTC",126,0)
 ;
"RTN","XPDTC",127,0)
 ;the following are the default questions for the INSTALL QUESTIONS
"RTN","XPDTC",128,0)
 ;in file 9.6, the format is:
"RTN","XPDTC",129,0)
 ;;field .01;field 1;field 2;field 4;field 7
"RTN","XPDTC",130,0)
 ;;field 10
"RTN","XPDTC",131,0)
QUESTION ;package install questions
"RTN","XPDTC",132,0)
 ;;XPF1;Y;Shall I write over your |FLAG| File;YES;^D REP^XPDH
"RTN","XPDTC",133,0)
 ;;D XPF1^XPDIQ
"RTN","XPDTC",134,0)
 ;;XPF2;Y;Want my data |FLAG| yours;YES;^D DTA^XPDH
"RTN","XPDTC",135,0)
 ;;D XPF2^XPDIQ
"RTN","XPDTC",136,0)
 ;;XPM1;PO^VA(200,:EM;Enter the Coordinator for Mail Group '|FLAG|';;^D MG^XPDH
"RTN","XPDTC",137,0)
 ;;D XPM1^XPDIQ
"RTN","XPDTC",138,0)
 ;;XPZ1;Y;Want to DISABLE Scheduled Options, Menu Options, and Protocols;YES;^D OPT^XPDH
"RTN","XPDTC",139,0)
 ;;D XPZ1^XPDIQ
"RTN","XPDTC",140,0)
 ;;XPZ2;Y;Want to MOVE routines to other CPUs;NO;^D RTN^XPDH
"RTN","XPDTC",141,0)
 ;;D XPZ2^XPDIQ
"RTN","XPDV")
0^7^B33797055
"RTN","XPDV",1,0)
XPDV ;SFISC/RSD - Verify Build ;03/11/97  15:26
"RTN","XPDV",2,0)
 ;;8.0;KERNEL;**30,44,58**;Jul 10, 1995
"RTN","XPDV",3,0)
 ;checks that everything is ready to do a build
"RTN","XPDV",4,0)
 ;XPDA=build ien, loop thru all nodes in ^XPD(9.6,XPDA and verify data
"RTN","XPDV",5,0)
EN ;check a build
"RTN","XPDV",6,0)
 N DA,FGR,TYPE,XPDFILE,XPDOLDA,Y0,Y2 K ^TMP($J)
"RTN","XPDV",7,0)
 S Y0=$G(^XPD(9.6,XPDA,0)),TYPE=$P(Y0,U,3)
"RTN","XPDV",8,0)
 I $P(Y0,U,2)="" W !,"No Package File Link"
"RTN","XPDV",9,0)
 I '$P(Y0,U,2) W !,$P(Y0,U,2)," in Package File Link field is freetext, not a pointer"
"RTN","XPDV",10,0)
 I $P(Y0,U,2),'$D(^DIC(9.4,$P(Y0,U,2),0)) W !,$P(Y0,U,2)," in PACKAGE File  ** NOT FOUND **",*7
"RTN","XPDV",11,0)
 ;type is global package goto CONT
"RTN","XPDV",12,0)
 G CONT:TYPE=2
"RTN","XPDV",13,0)
 I TYPE=1 S Y0=$$MULT(XPDA) G DONE
"RTN","XPDV",14,0)
 S XPDFILE=0
"RTN","XPDV",15,0)
 ;check DD being sent
"RTN","XPDV",16,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,4,XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",17,0)
 .Q:$$FILE(XPDFILE)=""
"RTN","XPDV",18,0)
 .S Y0=0,Y2=$G(^XPD(9.6,XPDA,4,XPDFILE,222))
"RTN","XPDV",19,0)
 .Q:'$$DATA(XPDFILE,Y2)
"RTN","XPDV",20,0)
 .F  S Y0=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0)) Q:'Y0  D
"RTN","XPDV",21,0)
 ..I '$D(^DD(Y0)) W !," SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",22,0)
 ..S XPDOLDA=0
"RTN","XPDV",23,0)
 ..;check fields being sent for partial DD
"RTN","XPDV",24,0)
 ..F  S XPDOLDA=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0,1,XPDOLDA)) Q:'XPDOLDA  D
"RTN","XPDV",25,0)
 ...I '$D(^DD(Y0,XPDOLDA)) W !,"Field #",XPDOLDA," in SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",26,0)
 ;
"RTN","XPDV",27,0)
 ;build components files
"RTN","XPDV",28,0)
 S XPDFILE=0
"RTN","XPDV",29,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",30,0)
 .;if file doesn't exist, save in ^TMP and deleted at end
"RTN","XPDV",31,0)
 .S FGR=$$FILE(XPDFILE),XPDOLDA=0 I FGR="" S ^TMP($J,XPDFILE)="" Q
"RTN","XPDV",32,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDV",33,0)
 ..;check action, quit if deleting at site
"RTN","XPDV",34,0)
 ..Q:$P(Y0,U,3)=1
"RTN","XPDV",35,0)
 ..;check that entry exist
"RTN","XPDV",36,0)
 ..S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY(Y0)
"RTN","XPDV",37,0)
 ..Q:'$P(Y0,U,3)!($P(Y0,U,3)#2)
"RTN","XPDV",38,0)
 ..;if attach check that parent is sent, if link check that child is sent
"RTN","XPDV",39,0)
 ..Q:'$$MENU(XPDFILE,DA,$P(Y0,U,3))
"RTN","XPDV",40,0)
 ;check Install Questions
"RTN","XPDV",41,0)
 S XPDOLDA=0
"RTN","XPDV",42,0)
 F  S XPDOLDA=$O(^XPD(9.6,XPDA,"QUES",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)),Y2=$G(^(1)) D
"RTN","XPDV",43,0)
 .I $P(Y0,U)="" W !,"Zero node doesn't exist for INSTALL QUESTION #",XPDOLDA Q
"RTN","XPDV",44,0)
 .I Y2="" W !,"DIR(0) field is not defined for INSTALL QUESTION ",$P(Y0,U)
"RTN","XPDV",45,0)
 I $O(^XPD(9.6,XPDA,"GLO",0)) W !,"Package cannot contain Globals, Files, & Components."
"RTN","XPDV",46,0)
 ;check for PRE & POST routines
"RTN","XPDV",47,0)
 F DA="INI","INIT" S Y0=$G(^XPD(9.6,XPDA,DA)) I Y0]"",'$$RTN(Y0) W !,"Routine ",Y0," ** NOT FOUND **"
"RTN","XPDV",48,0)
CONT ;
"RTN","XPDV",49,0)
 ;check Environment Check routine
"RTN","XPDV",50,0)
 S Y0=$G(^XPD(9.6,XPDA,"PRE")) I Y0]"",'$$RTN(Y0) W !,"Routine ",Y0," ** NOT FOUND **"
"RTN","XPDV",51,0)
 I TYPE=2 S Y0=$$GLOPKG(XPDA)
"RTN","XPDV",52,0)
DONE I $O(^TMP($J,0)) D
"RTN","XPDV",53,0)
 .N DA,DIK,DIR,DIRUT,Y
"RTN","XPDV",54,0)
 .S DIR(0)="Y",DIR("A")="Do you want to remove the missing Files",DIR("B")="NO"
"RTN","XPDV",55,0)
 .S DIR("?")="Yes means that the missing Files will be removed and you can transport this Build"
"RTN","XPDV",56,0)
 .D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDV",57,0)
 .S DIK="^XPD(9.6,"_XPDA_",""KRN"",",DA(1)=XPDA,DA=0 F  S DA=$O(^TMP($J,DA)) Q:'DA  D ^DIK
"RTN","XPDV",58,0)
 W !!,"  ** DONE **"
"RTN","XPDV",59,0)
 Q
"RTN","XPDV",60,0)
GLOPKG(X) ;GLOBAL PACKAGE
"RTN","XPDV",61,0)
 ;returns 1 if ok, 0 if failed
"RTN","XPDV",62,0)
 N I,J,Y,Z S Z=1
"RTN","XPDV",63,0)
 I $O(^XPD(9.6,X,4,0)) W !,"GLOBAL PACKAGE cannot contain Files" S Z=0
"RTN","XPDV",64,0)
 S I=0 F  S I=$O(^XPD(9.6,X,"KRN",I)) Q:'I  D:$O(^(I,"NM",0))
"RTN","XPDV",65,0)
 .W !,"GLOBAL PACKAGE cannot contain ",$P(^DIC(I,0),U) S Z=0
"RTN","XPDV",66,0)
 I $O(^XPD(9.6,X,"QUES",0)) W !,"GLOBAL PACKAGE cannot contain Install Questions" S Z=0
"RTN","XPDV",67,0)
 I $G(^XPD(9.6,X,"INI"))]"" W !,"GLOBAL PACKAGE cannot have a Pre-Install Routine" S Z=0
"RTN","XPDV",68,0)
 ;I $G(^XPD(9.6,X,"INIT"))]"" W !,"GLOBAL PACKAGE cannot have a Post-Install Routine" S Z=0
"RTN","XPDV",69,0)
 S I=0 F J=0:1 S I=$O(^XPD(9.6,X,"GLO",I)) Q:'I  S Y=$G(^(I,0)) D
"RTN","XPDV",70,0)
 .I $P(Y,U)]"",'$D(@("^"_$P(Y,U))) W !,"Global ",Y," doesn't exist." S Z=0
"RTN","XPDV",71,0)
 I 'J W !,"No Globals to transport" S Z=0
"RTN","XPDV",72,0)
 Q Z
"RTN","XPDV",73,0)
 ;
"RTN","XPDV",74,0)
QUES(X) ;X=.01 of INSTALL QUESTION multiple
"RTN","XPDV",75,0)
 ;returns ien or 0 if failed
"RTN","XPDV",76,0)
 N Y
"RTN","XPDV",77,0)
 S Y=+$O(^XPD(9.6,XPDA,"QUES","B",X,0))
"RTN","XPDV",78,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,0)) W !,"Zero node doesn't exist for INSTALL QUESTION ",X Q 0
"RTN","XPDV",79,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,1)) W !,"DIR(0) field is not defined for INSTALL QUESTION ",X Q 0
"RTN","XPDV",80,0)
 Q Y
"RTN","XPDV",81,0)
 ;
"RTN","XPDV",82,0)
FILE(X) ;check file # X
"RTN","XPDV",83,0)
 ;returns global ref or "" if failed
"RTN","XPDV",84,0)
 N %,Y
"RTN","XPDV",85,0)
 S Y=$G(^DIC(X,0,"GL"))
"RTN","XPDV",86,0)
 I Y="" W !," File #",X,"  ** NOT FOUND **" Q ""
"RTN","XPDV",87,0)
 S %=$E(Y,$L(Y)),X=$E(Y,1,$L(Y)-1)_$S(%="(":"",1:")")
"RTN","XPDV",88,0)
 Q X
"RTN","XPDV",89,0)
 ;
"RTN","XPDV",90,0)
 ;Z only contains the file # for Fileman templates and forms
"RTN","XPDV",91,0)
 ;XPDFILE=file #,FGR=file global ref
"RTN","XPDV",92,0)
ENTRY(Z) ;check entry, Z=name^file
"RTN","XPDV",93,0)
 ;returns ien or 0 if failed
"RTN","XPDV",94,0)
 N F,X,Y
"RTN","XPDV",95,0)
 ;check for X, name, in "B" x-ref of file.
"RTN","XPDV",96,0)
 S X=$P(Z,U),Y=0 F  S Y=$O(@FGR@("B",X,Y)) D  Q:X=""
"RTN","XPDV",97,0)
 .I 'Y W !?3,X,"  in ",$P(^DIC(XPDFILE,0),U)," File   ** NOT FOUND **",*7 S X="" Q
"RTN","XPDV",98,0)
 .;if Y is in x-ref but node doesn't exist, quit and try another
"RTN","XPDV",99,0)
 .;if this is a fileman template, the file associated with it is piece 2 of Z
"RTN","XPDV",100,0)
 .;if Form file check piece 8 else 4
"RTN","XPDV",101,0)
 .Q:'$D(@FGR@(Y,0))  I $P(Z,U,2) S F=^(0) S:$P(Z,U,2)=$P(F,U,(4+(4*(FGR["DIST")))) X="" Q
"RTN","XPDV",102,0)
 .;if it is routine file,9.8, check that routine exist
"RTN","XPDV",103,0)
 .I XPDFILE=9.8 Q:'$$RTN(X)
"RTN","XPDV",104,0)
 .;if this is not a fileman template or routine we found Y
"RTN","XPDV",105,0)
 .S X="" Q
"RTN","XPDV",106,0)
 Q +Y
"RTN","XPDV",107,0)
 ;
"RTN","XPDV",108,0)
DATA(F,Y) ;
"RTN","XPDV",109,0)
 ;return 1 if ok or 0 if failed
"RTN","XPDV",110,0)
 I $P(Y,U,3)="p",$P(Y,U,7)="y" W !,"You can only send Data with a Full Data Dictionary,",!,"** File #",F," cannot be Sent **" Q 0
"RTN","XPDV",111,0)
 Q 1
"RTN","XPDV",112,0)
 ;
"RTN","XPDV",113,0)
RTN(X) ;verify tag^routine exist, 1=yes, 0=no
"RTN","XPDV",114,0)
 N T,R
"RTN","XPDV",115,0)
 I X["^" S T=$P(X,"^"),R=$P(X,"^",2)
"RTN","XPDV",116,0)
 E  S T="",R=X
"RTN","XPDV",117,0)
 Q:(R'?1A.E) 0
"RTN","XPDV",118,0)
 I T="" Q $T(^@R)]""
"RTN","XPDV",119,0)
 Q $T(@T^@R)]""
"RTN","XPDV",120,0)
 ;
"RTN","XPDV",121,0)
MULT(X) ;multi-package
"RTN","XPDV",122,0)
 ;returns 1 if ok or 0 if failed
"RTN","XPDV",123,0)
 N I,J,X,Y,Z
"RTN","XPDV",124,0)
 S I=0,Z=1
"RTN","XPDV",125,0)
 F J=0:1 S I=$O(^XPD(9.6,X,10,I)) Q:'I  S X=$P($G(^(I,0)),U),Y=0 D
"RTN","XPDV",126,0)
 .S:X]"" Y=$O(^XPD(9.6,"B",X,0))
"RTN","XPDV",127,0)
 .I Y,$D(^XPD(9.6,Y,0)) Q
"RTN","XPDV",128,0)
 .W !,"Package ",X," doesn't exist." S Z=0
"RTN","XPDV",129,0)
 I 'J W !,"No Packages to transport" S Z=0
"RTN","XPDV",130,0)
 Q Z
"RTN","XPDV",131,0)
MENU(F,X,Y) ;check for Parent or Children, F=file (19 or 101), X=ien,
"RTN","XPDV",132,0)
 ;Y=action (2=link or 4=attach)
"RTN","XPDV",133,0)
 ;returns 1 if ok or 0 if failed
"RTN","XPDV",134,0)
 Q:'X 0
"RTN","XPDV",135,0)
 N I,J,GR,Z
"RTN","XPDV",136,0)
 S GR=$S(F=19:"^DIC(19)",1:"^ORD(101)"),(I,Z)=0
"RTN","XPDV",137,0)
 ;link, check that at least 1 menu item was sent
"RTN","XPDV",138,0)
 I Y=2 F  S I=$O(@GR@(X,10,"B",I)) Q:'I  S J=$P($G(@GR@(I,0)),U) I J]"",$D(^XPD(9.6,XPDA,"KRN",F,"NM","B",J)) S Z=1 Q
"RTN","XPDV",139,0)
 ;attach, check that the parent was sent
"RTN","XPDV",140,0)
 I Y=4 F  S I=$O(@GR@("AD",X,I)) Q:'I  S J=$P($G(@GR@(I,0)),U) I J]"",$D(^XPD(9.6,XPDA,"KRN",F,"NM","B",J)) S Z=1 Q
"RTN","XPDV",141,0)
 D:'Z
"RTN","XPDV",142,0)
 .W !,$S(F=19:"Option ",1:"Protocol "),$P($G(@GR@(X,0)),U)," has an Action of "
"RTN","XPDV",143,0)
 .W:Y=2 "'USE AS LINK FOR MENU ITEMS' and no 'Menu Items' were sent."
"RTN","XPDV",144,0)
 .W:Y=4 "'ATTACH TO MENU' and a 'Parent Menu' wasn't sent."
"RTN","XPDV",145,0)
 Q Z
"RTN","XQOO1")
0^11^B75896508
"RTN","XQOO1",1,0)
XQOO1 ;SEA/Luke - Out-of-order set calls ;01/28/97  15:00
"RTN","XQOO1",2,0)
 ;;8.0;KERNEL;**10,21,39,41,58**;Jul 10, 1995
"RTN","XQOO1",3,0)
 ;
"RTN","XQOO1",4,0)
OFF(XQSET) ;Mark options and protocols Out Of Order
"RTN","XQOO1",5,0)
 N %,DA,XQMESS,XQN,XQKD
"RTN","XQOO1",6,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",7,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U),XQKD=" is being installed by KIDS"
"RTN","XQOO1",8,0)
 ;
"RTN","XQOO1",9,0)
 S XQN=0
"RTN","XQOO1",10,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,19,XQN)) Q:XQN=""  D
"RTN","XQOO1",11,0)
 .Q:'$D(^DIC(19,XQN,0))#2  S %=$P(^(0),U,3)
"RTN","XQOO1",12,0)
 .;quit if KIDS and option already out by nonKIDS user
"RTN","XQOO1",13,0)
 .Q:$D(XPDSET)&(%]"")&(%'[XQKD)  S %=$P(%,XQKD)
"RTN","XQOO1",14,0)
 .;if KIDS save off current OOO message
"RTN","XQOO1",15,0)
 .I $D(XPDSET),%]"",%'=XQSET,$D(^XTMP("XQOO",%)) S $P(^XTMP("XQOO",XQSET,19,XQN),U,3)=%_XQKD
"RTN","XQOO1",16,0)
 .S $P(^DIC(19,XQN,0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",17,0)
 .Q
"RTN","XQOO1",18,0)
 ;
"RTN","XQOO1",19,0)
 S XQN=0
"RTN","XQOO1",20,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,101,XQN)) Q:XQN=""  D
"RTN","XQOO1",21,0)
 .Q:'$D(^ORD(101,XQN,0))#2  S %=$P(^(0),U,3)
"RTN","XQOO1",22,0)
 .Q:$D(XPDSET)&(%]"")&(%'[XQKD)  S %=$P(%,XQKD)
"RTN","XQOO1",23,0)
 .I $D(XPDSET),%]"",%'=XQSET,$D(^XTMP("XQOO",%)) S $P(^XTMP("XQOO",XQSET,101,XQN),U,3)=%
"RTN","XQOO1",24,0)
 .S $P(^ORD(101,XQN,0),U,3)=XQMESS
"RTN","XQOO1",25,0)
 .Q
"RTN","XQOO1",26,0)
 D OUT
"RTN","XQOO1",27,0)
 D KICK^XQ7
"RTN","XQOO1",28,0)
 Q
"RTN","XQOO1",29,0)
 ;
"RTN","XQOO1",30,0)
ON(XQSET) ;Remove Out Of Order messages from the set XQSET
"RTN","XQOO1",31,0)
 N %,%1,DA,XQN,XQKD
"RTN","XQOO1",32,0)
 I '$D(^XTMP("XQOO",XQSET,0))#2 S XQSET="^" Q
"RTN","XQOO1",33,0)
 ;
"RTN","XQOO1",34,0)
 S XQN=0,XQKD=" is being installed by KIDS"
"RTN","XQOO1",35,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,19,XQN)) Q:XQN=""  S XQMESS=$P(^(XQN),U,3) D
"RTN","XQOO1",36,0)
 .Q:'$D(^DIC(19,XQN,0))#2  S %=$P(^(0),U,3),%1=$S($D(XPDSET):$P(XQMESS,XQKD),1:"")
"RTN","XQOO1",37,0)
 .;quit if OOO message is set by nonKIDS
"RTN","XQOO1",38,0)
 .Q:$D(XPDSET)&(%'[XQKD)  S %=$P(%,XQKD)
"RTN","XQOO1",39,0)
 .I $D(XPDSET),%'=XQSET,%]"",$D(^XTMP("XQOO",%)) Q  ;another set has this option
"RTN","XQOO1",40,0)
 .;if we have another message to restore, check that set still exist
"RTN","XQOO1",41,0)
 .I XQMESS]"" S XQMESS=$S(%1="":"",'$D(^XTMP("XQOO",%1)):"",1:XQMESS)
"RTN","XQOO1",42,0)
 .S $P(^DIC(19,XQN,0),U,3)=XQMESS,DA=XQN D REDO^XQ7
"RTN","XQOO1",43,0)
 .Q
"RTN","XQOO1",44,0)
 ;
"RTN","XQOO1",45,0)
 S XQN=0
"RTN","XQOO1",46,0)
 F  S XQN=$O(^XTMP("XQOO",XQSET,101,XQN)) Q:XQN=""  S XQMESS=$P(^(XQN),U,3) D
"RTN","XQOO1",47,0)
 .Q:'$D(^ORD(101,XQN,0))#2  S %=$P(^(0),U,3),%1=$S($D(XPDSET):$P(XQMESS,XQKD),1:"")
"RTN","XQOO1",48,0)
 .Q:$D(XPDSET)&(%'[XQKD)  S %=$P(%,XQKD)
"RTN","XQOO1",49,0)
 .I $D(XPDSET),%'=XQSET,%]"",$D(^XTMP("XQOO",%)) Q
"RTN","XQOO1",50,0)
 .I XQMESS]"" S XQMESS=$S(%1="":"",'$D(^XTMP("XQOO",%1)):"",1:XQMESS)
"RTN","XQOO1",51,0)
 .S $P(^ORD(101,XQN,0),U,3)=XQMESS
"RTN","XQOO1",52,0)
 .Q
"RTN","XQOO1",53,0)
 ;
"RTN","XQOO1",54,0)
 I '$D(XPDSET) D
"RTN","XQOO1",55,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",56,0)
 .S DIR("A")="Should I remove the option set "_XQSET_" from ^XTMP?"
"RTN","XQOO1",57,0)
 .S DIR("?")=XQSET_" is the list of options and/or protocols you just turned on."
"RTN","XQOO1",58,0)
 .D ^DIR
"RTN","XQOO1",59,0)
 .I Y K ^XTMP("XQOO",XQSET)
"RTN","XQOO1",60,0)
 .K DIR,Y
"RTN","XQOO1",61,0)
 .Q
"RTN","XQOO1",62,0)
 D OUT
"RTN","XQOO1",63,0)
 D KICK^XQ7
"RTN","XQOO1",64,0)
 Q
"RTN","XQOO1",65,0)
 ;
"RTN","XQOO1",66,0)
ADD(XQSET,XQFIL,XQN) ;New option/protocol - add to set and mark it OOO
"RTN","XQOO1",67,0)
 ;Called by KIDS during a build
"RTN","XQOO1",68,0)
 I '$D(^XTMP("XQOO",XQSET,0)) S XQSET="^" D OUT Q
"RTN","XQOO1",69,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",70,0)
 S XQGL=$S(XQFIL=19:"^DIC(",1:"^ORD(")
"RTN","XQOO1",71,0)
 S %=@(XQGL_XQFIL_","_XQN_",0)"),^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(%,U)_"^"_$P(%,U,2)
"RTN","XQOO1",72,0)
 S %=XQGL_XQFIL_","_XQN_",0)",$P(@%,U,3)=XQMESS
"RTN","XQOO1",73,0)
 D OUT
"RTN","XQOO1",74,0)
 Q
"RTN","XQOO1",75,0)
 ;
"RTN","XQOO1",76,0)
KIDS(XQSET,XQFIL,XQNAME,XQFLAG) ;Turn on/off an option or protocol
"RTN","XQOO1",77,0)
 ;Called only from KIDS during an install so OERR would work
"RTN","XQOO1",78,0)
 ;XQFLAG is set to 0 to put an option or protocol out of order,
"RTN","XQOO1",79,0)
 ;1 to turn it on, and I return it as -1 if the request 
"RTN","XQOO1",80,0)
 ;fails.
"RTN","XQOO1",81,0)
 ;
"RTN","XQOO1",82,0)
 N XQGL,XQMESS,XQMES2,XQN
"RTN","XQOO1",83,0)
 I '$D(^XTMP("XQOO",XQSET)) S XQFLAG=-1 Q
"RTN","XQOO1",84,0)
 S XQGL=$S(XQFIL=19:"^DIC(19)",XQFIL=101:"^ORD(101)",1:"")
"RTN","XQOO1",85,0)
 I XQGL="" S XQFLAG=-1 Q
"RTN","XQOO1",86,0)
 I XQNAME=+XQNAME S XQN=XQNAME
"RTN","XQOO1",87,0)
 E  D  I XQFLAG<0 Q
"RTN","XQOO1",88,0)
 .S XQN=$O(@XQGL@("B",XQNAME,0)) I XQN'>0 S XQFLAG=-1
"RTN","XQOO1",89,0)
 .Q
"RTN","XQOO1",90,0)
 S %=@XQGL@(XQN,0) S XQMES2=$P(%,U,3)
"RTN","XQOO1",91,0)
 S XQMESS=$P(^XTMP("XQOO",XQSET,0),U)
"RTN","XQOO1",92,0)
 I XQMESS=XQMES2 S XQMES2=""
"RTN","XQOO1",93,0)
 I '$D(^XTMP("XQOO",XQSET,XQFIL,XQN)) S ^XTMP("XQOO",XQSET,XQFIL,XQN)=$P(@XQGL@(XQN,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",94,0)
 ;
"RTN","XQOO1",95,0)
 I 'XQFLAG D
"RTN","XQOO1",96,0)
 .I XQMES2]"" S $P(^XTMP("XQOO",XQSET,XQFIL,XQN),U,3)=XQMES2
"RTN","XQOO1",97,0)
 .S $P(@XQGL@(XQN,0),U,3)=XQMESS
"RTN","XQOO1",98,0)
 .Q
"RTN","XQOO1",99,0)
 I XQFLAG D
"RTN","XQOO1",100,0)
 .S $P(@XQGL@(XQN,0),U,3)=""
"RTN","XQOO1",101,0)
 .Q
"RTN","XQOO1",102,0)
 ;
"RTN","XQOO1",103,0)
OUT ;Exit point
"RTN","XQOO1",104,0)
 K %,XQFIL,XQGL,XQMESS,XQN,XQS
"RTN","XQOO1",105,0)
 Q
"RTN","XQOO1",106,0)
 ;
"RTN","XQOO1",107,0)
OFFOP ;Option entry for turning off options
"RTN","XQOO1",108,0)
 W !
"RTN","XQOO1",109,0)
 S XQSET=""
"RTN","XQOO1",110,0)
 D GETSET(.XQSET)
"RTN","XQOO1",111,0)
 I XQSET]"" D
"RTN","XQOO1",112,0)
 .S DIR(0)="Y",DIR("B")="N"
"RTN","XQOO1",113,0)
 .S DIR("A")="Mark the options in "_XQSET_" Out-Of Order now"
"RTN","XQOO1",114,0)
 .S DIR("?")="If you answer ""Yes"" you will mark all the options in the set "_XQSET_" Out Of Order."
"RTN","XQOO1",115,0)
 .D ^DIR
"RTN","XQOO1",116,0)
 .I Y D OFF(XQSET)
"RTN","XQOO1",117,0)
 .K DIR,X,Y
"RTN","XQOO1",118,0)
 .Q
"RTN","XQOO1",119,0)
 Q
"RTN","XQOO1",120,0)
 ;
"RTN","XQOO1",121,0)
 ;
"RTN","XQOO1",122,0)
ONOP ;Option entry for turning on options
"RTN","XQOO1",123,0)
 S XQSET=""
"RTN","XQOO1",124,0)
 D GETSET(.XQSET)
"RTN","XQOO1",125,0)
 I XQSET]"" D
"RTN","XQOO1",126,0)
 .S DIR(0)="Y",DIR("B")="Y"
"RTN","XQOO1",127,0)
 .S DIR("A")="Return options in "_XQSET_" to general use"
"RTN","XQOO1",128,0)
 .S DIR("?")="If you answer ""Yes"" you will remove the Out-Of-Order message from the options in the set "_XQSET
"RTN","XQOO1",129,0)
 .D ^DIR
"RTN","XQOO1",130,0)
 .I Y D ON(XQSET)
"RTN","XQOO1",131,0)
 .K DIR,X,Y
"RTN","XQOO1",132,0)
 .Q
"RTN","XQOO1",133,0)
 D KICK^XQ7
"RTN","XQOO1",134,0)
 Q
"RTN","XQOO1",135,0)
 ;
"RTN","XQOO1",136,0)
GETSET(XQSET) ;Get the name of the option set in question
"RTN","XQOO1",137,0)
 I '$D(^XTMP("XQOO")) W !!,"There are currently no option sets definded in ^XTMP." Q
"RTN","XQOO1",138,0)
 S XQI=0
"RTN","XQOO1",139,0)
 D SETS^XQOO2(.XQI)
"RTN","XQOO1",140,0)
 I XQI=1 S XQSET=0,XQSET=$O(^XTMP("XQOO",XQSET)) Q
"RTN","XQOO1",141,0)
 I XQI>1 D
"RTN","XQOO1",142,0)
 .S DIR(0)="NO^1:"_XQI,DIR("B")=XQI
"RTN","XQOO1",143,0)
 .S DIR("A")=" Please enter the number of the option set you want"
"RTN","XQOO1",144,0)
 .S DIR("?")=" Which option set do you want to work with? 1, "_XQI_" etc."
"RTN","XQOO1",145,0)
 .W !
"RTN","XQOO1",146,0)
 .D ^DIR
"RTN","XQOO1",147,0)
 .S XQSET=0 F XQI=1:1:+Y S XQSET=$O(^XTMP("XQOO",XQSET))
"RTN","XQOO1",148,0)
 .Q
"RTN","XQOO1",149,0)
 K XQI
"RTN","XQOO1",150,0)
 Q
"RTN","XQOO1",151,0)
 ;
"RTN","XQOO1",152,0)
 ;
"RTN","XQOO1",153,0)
REBLD ;Rebuild a "lost" set of options and protocols
"RTN","XQOO1",154,0)
 N XQ,XQMESS,XQOP,XQPROT,XQSET
"RTN","XQOO1",155,0)
 S (XQOP,XQPROT)=0
"RTN","XQOO1",156,0)
 ;
"RTN","XQOO1",157,0)
 S DIR(0)="F^3:30"
"RTN","XQOO1",158,0)
 S DIR("A")=" Please enter the exact Out-Of-Order message"
"RTN","XQOO1",159,0)
 S DIR("?")=" All options/protocols with this message are reclaimed into a set in ^XTMP"
"RTN","XQOO1",160,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",161,0)
 S XQMESS=X K DIR
"RTN","XQOO1",162,0)
 ;
"RTN","XQOO1",163,0)
RE1 S DIR(0)="F^1:20"
"RTN","XQOO1",164,0)
 S DIR("A")=" What do you want to name the recovered set? "
"RTN","XQOO1",165,0)
 S DIR("?")=" Enter any name of up to 20 characters"
"RTN","XQOO1",166,0)
 D ^DIR G:$D(DIRUT) OUTRE
"RTN","XQOO1",167,0)
 S XQSET=X K DIR
"RTN","XQOO1",168,0)
 I $D(^XTMP("XQOO",XQSET,0)) D  G RE1
"RTN","XQOO1",169,0)
 .W !,"Sorry, that set already exists.  Use the Create/Modify option to"
"RTN","XQOO1",170,0)
 .W !?3,"modify it, or choose another name."
"RTN","XQOO1",171,0)
 .Q
"RTN","XQOO1",172,0)
 ;
"RTN","XQOO1",173,0)
REFIND ;Find options and protocols with the message XQMESS
"RTN","XQOO1",174,0)
 S XQ=0 F  S XQ=$O(^DIC(19,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",175,0)
 .Q:$P(^DIC(19,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",176,0)
 .S ^XTMP("XQOO",XQSET,19,XQ)=$P(^DIC(19,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",177,0)
 .S XQOP=XQOP+1
"RTN","XQOO1",178,0)
 .Q
"RTN","XQOO1",179,0)
 ;
"RTN","XQOO1",180,0)
 S XQ=0 F  S XQ=$O(^ORD(101,XQ)) Q:XQ'=+XQ!(XQ="")  D
"RTN","XQOO1",181,0)
 .Q:$P(^ORD(101,XQ,0),U,3)'=XQMESS
"RTN","XQOO1",182,0)
 .S ^XTMP("XQOO",XQSET,101,XQ)=$P(^ORD(101,XQ,0),U)_U_$P(^(0),U,2)
"RTN","XQOO1",183,0)
 .S XQPROT=XQPROT+1
"RTN","XQOO1",184,0)
 .Q
"RTN","XQOO1",185,0)
 ;
"RTN","XQOO1",186,0)
 I XQOP>0!(XQPROT>0) D  G OUTRE
"RTN","XQOO1",187,0)
 .D ^XQDATE
"RTN","XQOO1",188,0)
 .S %=$P(^VA(200,DUZ,0),U),%=$P(%,",")
"RTN","XQOO1",189,0)
 .S ^XTMP("XQOO",XQSET,0)=XQMESS_U_%Y_U_%
"RTN","XQOO1",190,0)
 .S ^XTMP("XQOO",0)=DT+7
"RTN","XQOO1",191,0)
 .W !!,"Set named ",XQSET," recovered with ",XQOP," options and ",XQPROT," protocols."
"RTN","XQOO1",192,0)
 .Q
"RTN","XQOO1",193,0)
 E  W !!,"No options or protocols with the message ",XQMESS," were found." G OUTRE
"RTN","XQOO1",194,0)
 Q
"RTN","XQOO1",195,0)
 ;
"RTN","XQOO1",196,0)
OUTRE ;Exit point for REBLD
"RTN","XQOO1",197,0)
 K %,%Y,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,XQ,XQMESS,XQOP,XQPROT,XQSET,Y
"RTN","XQOO1",198,0)
 Q
"RTN","XQOO1",199,0)
 ;
"RTN","XQOO1",200,0)
TOG ;Toggle options and protocols on and off. (XQOOTOG option)
"RTN","XQOO1",201,0)
 N XQ
"RTN","XQOO1",202,0)
 D T1,OUTT,T2,KICK^XQ7
"RTN","XQOO1",203,0)
 ;
"RTN","XQOO1",204,0)
OUTT ;Exit for XQOOTOG
"RTN","XQOO1",205,0)
 K DIC,DTOUT,DUOUT,X,Y
"RTN","XQOO1",206,0)
 Q
"RTN","XQOO1",207,0)
 ;
"RTN","XQOO1",208,0)
T1 ;Toggle options
"RTN","XQOO1",209,0)
 S DIC=19,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of an option: "
"RTN","XQOO1",210,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",211,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",212,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",213,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",214,0)
 ..W !!,"Option ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",215,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",216,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",217,0)
 ..D ^DIR
"RTN","XQOO1",218,0)
 ..I Y S $P(^DIC(19,XQ,0),U,3)="",DA=XQ D REDO^XQ7
"RTN","XQOO1",219,0)
 ..K DIR,X,Y
"RTN","XQOO1",220,0)
 ..Q
"RTN","XQOO1",221,0)
 .E  W ! D
"RTN","XQOO1",222,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this option out of order: "
"RTN","XQOO1",223,0)
 ..S DIR("?")="This option is in service.  Enter a string to remove it from use."
"RTN","XQOO1",224,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",225,0)
 ..I '$D(DIRUT) S $P(^DIC(19,XQ,0),U,3)=Y,DA=XQ D REDO^XQ7
"RTN","XQOO1",226,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",227,0)
 ..Q
"RTN","XQOO1",228,0)
 .Q
"RTN","XQOO1",229,0)
 Q
"RTN","XQOO1",230,0)
 ;
"RTN","XQOO1",231,0)
T2 ;Toggle protocols
"RTN","XQOO1",232,0)
 S DIC=101,DIC(0)="AEMQZ",DIC("A")="Enter the name or menu text of a protocol: "
"RTN","XQOO1",233,0)
 F  W ! D ^DIC Q:$D(DTOUT)!$D(DUOUT)!(Y<0)  D
"RTN","XQOO1",234,0)
 .S XQ=+Y,XQ0=Y(0)
"RTN","XQOO1",235,0)
 .I $P(XQ0,U,3)]"" D
"RTN","XQOO1",236,0)
 ..S XQMESS=$P(XQ0,U,3)
"RTN","XQOO1",237,0)
 ..W !!,"Protocol ",$P(Y(0),U)," is out with the message '",XQMESS,"'",!
"RTN","XQOO1",238,0)
 ..S DIR(0)="Y",DIR("A")="Put it in service",DIR("B")="YES"
"RTN","XQOO1",239,0)
 ..S DIR("?")="If you answer 'YES' the out-of-order message will be killed, putting the option back in service."
"RTN","XQOO1",240,0)
 ..D ^DIR
"RTN","XQOO1",241,0)
 ..I Y S $P(^ORD(101,XQ,0),U,3)=""
"RTN","XQOO1",242,0)
 ..K DA,DIR,X,Y
"RTN","XQOO1",243,0)
 ..Q
"RTN","XQOO1",244,0)
 .E  W ! D
"RTN","XQOO1",245,0)
 ..S DIR(0)="FA^3:50",DIR("A")="Enter a message to put this protocol out of order: "
"RTN","XQOO1",246,0)
 ..S DIR("?")="This protocol is in service.  Enter a string to remove it from use."
"RTN","XQOO1",247,0)
 ..K DIRUT D ^DIR
"RTN","XQOO1",248,0)
 ..I '$D(DIRUT) S $P(^ORD(101,XQ,0),U,3)=Y
"RTN","XQOO1",249,0)
 ..K DIR,DIRUT,X,Y
"RTN","XQOO1",250,0)
 ..Q
"RTN","XQOO1",251,0)
 .Q
"RTN","XQOO1",252,0)
 Q
"UP",9.6,9.68,-2)
9.6^KRN
"UP",9.6,9.68,-1)
9.67^NM
"UP",9.6,9.68,0)
9.68
"VER")
8.0^21.0
"^DD",9.6,9.68,.03,0)
ACTION^R*S^0:SEND TO SITE;1:DELETE AT SITE;2:USE AS LINK FOR MENU ITEMS;3:MERGE MENU ITEMS;4:ATTACH TO MENU;5:DISABLE DURING INSTALL;^0;3^Q
"^DD",9.6,9.68,.03,12)
Enter a number
"^DD",9.6,9.68,.03,12.1)
S DIC("S")="I $$SCRA^XPDET(Y)"
"^DD",9.6,9.68,.03,21,0)
^^2^2^2970121^^^
"^DD",9.6,9.68,.03,21,1,0)
This is the action you want performed at the installing site on
"^DD",9.6,9.68,.03,21,2,0)
the entry of the component you are sending for this package.
"^DD",9.6,9.68,.03,"DT")
2970121
**END**
**END**
