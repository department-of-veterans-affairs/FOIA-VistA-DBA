Released XWB*1.1*1 SEQ #1
Extracted from mail message
**KIDS**:XWB*1.1*1^

**INSTALL NAME**
XWB*1.1*1
"BLD",199,0)
XWB*1.1*1^RPC BROKER^0^2971113^y
"BLD",199,1,0)
^^47^47^2971113^
"BLD",199,1,1,0)
This patch fixes some small problems that were discovered after release.
"BLD",199,1,2,0)

"BLD",199,1,3,0)
XWBTCPL   Remove the SYMBOL_TABLE from the VAX DSM JOB command.
"BLD",199,1,4,0)
XWBTCP    When stopping the Broker, Catch a failure to open a socket.
"BLD",199,1,5,0)

"BLD",199,1,6,0)
XWB BROKER EXAMPLE option was missing its type field.
"BLD",199,1,7,0)

"BLD",199,1,8,0)
                 Checksum
"BLD",199,1,9,0)
Routine         Old       New      2nd Line
"BLD",199,1,10,0)
XWBTCP        8888247   9081629    **1**
"BLD",199,1,11,0)
XWBTCPL       8380513   8215020    **1**
"BLD",199,1,12,0)

"BLD",199,1,13,0)
========================================================================= 
"BLD",199,1,14,0)
Installation:
"BLD",199,1,15,0)

"BLD",199,1,16,0)
  1.  DSM sites - Some of these routines are usually mapped,
"BLD",199,1,17,0)
      so you will need to disable mapping for the effected routines. 
"BLD",199,1,18,0)
     
"BLD",199,1,19,0)
 2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",199,1,20,0)
     option will load the KIDS package onto your system.
"BLD",199,1,21,0)
     
"BLD",199,1,22,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",199,1,23,0)
      system. You now need to use KIDS to install the Transport global.
"BLD",199,1,24,0)
      On the KIDS menu, under the 'Installation' menu, use the following
"BLD",199,1,25,0)
      options:
"BLD",199,1,26,0)
      
"BLD",199,1,27,0)
         Verify Checksum's in Transport Global
"BLD",199,1,28,0)
         Print Transport Global
"BLD",199,1,29,0)
         Compare Transport Global to Current System
"BLD",199,1,30,0)
         Backup a Transport Global
"BLD",199,1,31,0)
     
"BLD",199,1,32,0)
 4.  Users can remain on the system but,
"BLD",199,1,33,0)
     The Listener must be stopped before installing this patch.
"BLD",199,1,34,0)
     
"BLD",199,1,35,0)
 5.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",199,1,36,0)
     option:
"BLD",199,1,37,0)
        Install Package(s)  'XWB*1.1*1'
"BLD",199,1,38,0)
                             =========
"BLD",199,1,39,0)
        
"BLD",199,1,40,0)
 6.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",199,1,41,0)
     other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",199,1,42,0)
     
"BLD",199,1,43,0)
 7.  DSM Sites, after patch has installed, rebuild your map set.
"BLD",199,1,44,0)
 
"BLD",199,1,45,0)
 8.  Restart the Broker Listener
"BLD",199,1,46,0)
 =========================================================================
"BLD",199,1,47,0)

"BLD",199,4,0)
^9.64PA^^
"BLD",199,"KRN",0)
^9.67PA^19^18
"BLD",199,"KRN",.4,0)
.4
"BLD",199,"KRN",.401,0)
.401
"BLD",199,"KRN",.402,0)
.402
"BLD",199,"KRN",.403,0)
.403
"BLD",199,"KRN",.5,0)
.5
"BLD",199,"KRN",.84,0)
.84
"BLD",199,"KRN",3.6,0)
3.6
"BLD",199,"KRN",3.8,0)
3.8
"BLD",199,"KRN",9.2,0)
9.2
"BLD",199,"KRN",9.8,0)
9.8
"BLD",199,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",199,"KRN",9.8,"NM",1,0)
XWBTCP^^0^B38018614
"BLD",199,"KRN",9.8,"NM",2,0)
XWBTCPL^^0^B28922692
"BLD",199,"KRN",9.8,"NM","B","XWBTCP",1)

"BLD",199,"KRN",9.8,"NM","B","XWBTCPL",2)

"BLD",199,"KRN",19,0)
19
"BLD",199,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",199,"KRN",19,"NM",1,0)
XWB BROKER EXAMPLE^^0
"BLD",199,"KRN",19,"NM","B","XWB BROKER EXAMPLE",1)

"BLD",199,"KRN",19.1,0)
19.1
"BLD",199,"KRN",101,0)
101
"BLD",199,"KRN",409.61,0)
409.61
"BLD",199,"KRN",771,0)
771
"BLD",199,"KRN",869.2,0)
869.2
"BLD",199,"KRN",870,0)
870
"BLD",199,"KRN",8994,0)
8994
"BLD",199,"KRN","B",.4,.4)

"BLD",199,"KRN","B",.401,.401)

"BLD",199,"KRN","B",.402,.402)

"BLD",199,"KRN","B",.403,.403)

"BLD",199,"KRN","B",.5,.5)

"BLD",199,"KRN","B",.84,.84)

"BLD",199,"KRN","B",3.6,3.6)

"BLD",199,"KRN","B",3.8,3.8)

"BLD",199,"KRN","B",9.2,9.2)

"BLD",199,"KRN","B",9.8,9.8)

"BLD",199,"KRN","B",19,19)

"BLD",199,"KRN","B",19.1,19.1)

"BLD",199,"KRN","B",101,101)

"BLD",199,"KRN","B",409.61,409.61)

"BLD",199,"KRN","B",771,771)

"BLD",199,"KRN","B",869.2,869.2)

"BLD",199,"KRN","B",870,870)

"BLD",199,"KRN","B",8994,8994)

"BLD",199,"QUES",0)
^9.62^^
"BLD",199,"REQB",0)
^9.611^2^2
"BLD",199,"REQB",1,0)
XU*8.0*59^2
"BLD",199,"REQB",2,0)
RPC BROKER 1.1^2
"BLD",199,"REQB","B","RPC BROKER 1.1",2)

"BLD",199,"REQB","B","XU*8.0*59",1)

"KRN",19,1512,-1)
0^1
"KRN",19,1512,0)
XWB BROKER EXAMPLE^RPC BROKER PROGRAMMING EXAMPLE^^B^^^^^^^^
"KRN",19,1512,1,0)
^^21^21^2971029^^^
"KRN",19,1512,1,1,0)
This option is the RPC Boroker Example appliation context.  RPC Broker
"KRN",19,1512,1,2,0)
Example exists as a teaching tool for someone learning to program using
"KRN",19,1512,1,3,0)
VA Remote Procedure Broker.  The entire application consists of this option,
"KRN",19,1512,1,4,0)
XWBEXMPL routine and
"KRN",19,1512,1,5,0)

"KRN",19,1512,1,6,0)
Remote procedures:
"KRN",19,1512,1,7,0)
     XWB EXAMPLE ECHO STRING  
"KRN",19,1512,1,8,0)
     XWB EXAMPLE GET LIST  
"KRN",19,1512,1,9,0)
     XWB EXAMPLE SORT NUMBERS  
"KRN",19,1512,1,10,0)
     XWB EXAMPLE WPTEXT  
"KRN",19,1512,1,11,0)
     XWB GET VARIABLE VALUE
"KRN",19,1512,1,12,0)

"KRN",19,1512,1,13,0)
Delphi Object Pascal source files:
"KRN",19,1512,1,14,0)
     BrokerExample.DPR 
"KRN",19,1512,1,15,0)
     BrokerExampleFrm.DFM
"KRN",19,1512,1,16,0)
     BrokerExampleFrm.PAS
"KRN",19,1512,1,17,0)
     BrokerExampleAboutFrm.DFM
"KRN",19,1512,1,18,0)
     BrokerExampleAboutFrm.PAS
"KRN",19,1512,1,19,0)

"KRN",19,1512,1,20,0)
Standard VistA infrastructure including Kernel, ToolKit, FileMan and RPC
"KRN",19,1512,1,21,0)
Broker, is required of course.
"KRN",19,1512,"RPC",0)
^19.05P^5^5
"KRN",19,1512,"RPC",1,0)
XWB EXAMPLE ECHO STRING
"KRN",19,1512,"RPC",2,0)
XWB EXAMPLE GET LIST
"KRN",19,1512,"RPC",3,0)
XWB EXAMPLE SORT NUMBERS
"KRN",19,1512,"RPC",4,0)
XWB EXAMPLE WPTEXT
"KRN",19,1512,"RPC",5,0)
XWB GET VARIABLE VALUE
"KRN",19,1512,"U")
RPC BROKER PROGRAMMING EXAMPLE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",285,-1)
1^1
"PKG",285,0)
RPC BROKER^XWB^Remote Procedure Call Broker
"PKG",285,22,0)
^9.49I^1^1
"PKG",285,22,1,0)
1.1^2970918
"PKG",285,22,1,"PAH",1,0)
1^2971113
"PKG",285,22,1,"PAH",1,1,0)
^^47^47^2971113
"PKG",285,22,1,"PAH",1,1,1,0)
This patch fixes some small problems that were discovered after release.
"PKG",285,22,1,"PAH",1,1,2,0)

"PKG",285,22,1,"PAH",1,1,3,0)
XWBTCPL   Remove the SYMBOL_TABLE from the VAX DSM JOB command.
"PKG",285,22,1,"PAH",1,1,4,0)
XWBTCP    When stopping the Broker, Catch a failure to open a socket.
"PKG",285,22,1,"PAH",1,1,5,0)

"PKG",285,22,1,"PAH",1,1,6,0)
XWB BROKER EXAMPLE option was missing its type field.
"PKG",285,22,1,"PAH",1,1,7,0)

"PKG",285,22,1,"PAH",1,1,8,0)
                 Checksum
"PKG",285,22,1,"PAH",1,1,9,0)
Routine         Old       New      2nd Line
"PKG",285,22,1,"PAH",1,1,10,0)
XWBTCP        8888247   9081629    **1**
"PKG",285,22,1,"PAH",1,1,11,0)
XWBTCPL       8380513   8215020    **1**
"PKG",285,22,1,"PAH",1,1,12,0)

"PKG",285,22,1,"PAH",1,1,13,0)
========================================================================= 
"PKG",285,22,1,"PAH",1,1,14,0)
Installation:
"PKG",285,22,1,"PAH",1,1,15,0)

"PKG",285,22,1,"PAH",1,1,16,0)
  1.  DSM sites - Some of these routines are usually mapped,
"PKG",285,22,1,"PAH",1,1,17,0)
      so you will need to disable mapping for the effected routines. 
"PKG",285,22,1,"PAH",1,1,18,0)
     
"PKG",285,22,1,"PAH",1,1,19,0)
 2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",285,22,1,"PAH",1,1,20,0)
     option will load the KIDS package onto your system.
"PKG",285,22,1,"PAH",1,1,21,0)
     
"PKG",285,22,1,"PAH",1,1,22,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",285,22,1,"PAH",1,1,23,0)
      system. You now need to use KIDS to install the Transport global.
"PKG",285,22,1,"PAH",1,1,24,0)
      On the KIDS menu, under the 'Installation' menu, use the following
"PKG",285,22,1,"PAH",1,1,25,0)
      options:
"PKG",285,22,1,"PAH",1,1,26,0)
      
"PKG",285,22,1,"PAH",1,1,27,0)
         Verify Checksum's in Transport Global
"PKG",285,22,1,"PAH",1,1,28,0)
         Print Transport Global
"PKG",285,22,1,"PAH",1,1,29,0)
         Compare Transport Global to Current System
"PKG",285,22,1,"PAH",1,1,30,0)
         Backup a Transport Global
"PKG",285,22,1,"PAH",1,1,31,0)
     
"PKG",285,22,1,"PAH",1,1,32,0)
 4.  Users can remain on the system but,
"PKG",285,22,1,"PAH",1,1,33,0)
     The Listener must be stopped before installing this patch.
"PKG",285,22,1,"PAH",1,1,34,0)
     
"PKG",285,22,1,"PAH",1,1,35,0)
 5.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",285,22,1,"PAH",1,1,36,0)
     option:
"PKG",285,22,1,"PAH",1,1,37,0)
        Install Package(s)  'XWB*1.1*1'
"PKG",285,22,1,"PAH",1,1,38,0)
                             =========
"PKG",285,22,1,"PAH",1,1,39,0)
        
"PKG",285,22,1,"PAH",1,1,40,0)
 6.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",285,22,1,"PAH",1,1,41,0)
     other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",285,22,1,"PAH",1,1,42,0)
     
"PKG",285,22,1,"PAH",1,1,43,0)
 7.  DSM Sites, after patch has installed, rebuild your map set.
"PKG",285,22,1,"PAH",1,1,44,0)
 
"PKG",285,22,1,"PAH",1,1,45,0)
 8.  Restart the Broker Listener
"PKG",285,22,1,"PAH",1,1,46,0)
 =========================================================================
"PKG",285,22,1,"PAH",1,1,47,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XWBTCP")
0^1^B38018614
"RTN","XWBTCP",1,0)
XWBTCP ;ISC-SF/EG - Control TCP listener [ 12/04/94  3:20 PM ] ;10/21/97  14:31
"RTN","XWBTCP",2,0)
 ;;1.1;RPC BROKER;**1**;Mar 28, 1997
"RTN","XWBTCP",3,0)
 ;
"RTN","XWBTCP",4,0)
EN ; -- entry point for interactive use
"RTN","XWBTCP",5,0)
 N X1,X2,XWBTDBG,XWBIP
"RTN","XWBTCP",6,0)
 S XWBIP=""
"RTN","XWBTCP",7,0)
 S:$G(IO("IP"))]"" XWBIP=IO("IP")
"RTN","XWBTCP",8,0)
 W !,"Enter client address: "_XWBIP_"//" R X1:300 Q:'$T  Q:X1="^"
"RTN","XWBTCP",9,0)
 W !,"   Enter client port: " R X2:300 Q:'$T  Q:X2="^"
"RTN","XWBTCP",10,0)
 W ! S XWBTDBG=""
"RTN","XWBTCP",11,0)
 IF X1="" S X1=XWBIP
"RTN","XWBTCP",12,0)
 IF X1'="" D EN^XWBTCPC(X1,X2,"")
"RTN","XWBTCP",13,0)
 Q
"RTN","XWBTCP",14,0)
 ;
"RTN","XWBTCP",15,0)
 ;
"RTN","XWBTCP",16,0)
STATXFRM(STATUS) ;Port STATUS field output transform
"RTN","XWBTCP",17,0)
 ;Don't recall why I needed this entry point.  If in future decide to
"RTN","XWBTCP",18,0)
 ;use it, simply enter "D STATXFRM^XWBTCP(Y)" for the output x-form
"RTN","XWBTCP",19,0)
 ;of the STATUS field.
"RTN","XWBTCP",20,0)
 W !,"Output Transform!",!
"RTN","XWBTCP",21,0)
 W STATUS,!
"RTN","XWBTCP",22,0)
 Q
"RTN","XWBTCP",23,0)
 ;
"RTN","XWBTCP",24,0)
 ;
"RTN","XWBTCP",25,0)
STATSCRN(XWBNEW) ;Port STATUS field screen
"RTN","XWBTCP",26,0)
 ;DA: FileMan DA array.  See STATCHG tag bellow for detailed descr.
"RTN","XWBTCP",27,0)
 ;XWBCUR: Current value of STATUS field
"RTN","XWBTCP",28,0)
 ;XWBNEW: New/requested value of STATUS field
"RTN","XWBTCP",29,0)
 ;        The domain for XWBCUR and XWBNEW is the same as for the
"RTN","XWBTCP",30,0)
 ;        ACTION variable, described at STATCHG tag bellow.
"RTN","XWBTCP",31,0)
 N C,XWBCUR,RESULT
"RTN","XWBTCP",32,0)
 S C=","
"RTN","XWBTCP",33,0)
 S XWBCUR=$$GET1^DIQ(8994.171,DA_C_DA(1)_C_DA(2)_C,"STATUS","I")
"RTN","XWBTCP",34,0)
 S RESULT=0
"RTN","XWBTCP",35,0)
 I XWBCUR=3,XWBNEW=4 S RESULT=1 ;if stopping a running listener
"RTN","XWBTCP",36,0)
 I XWBCUR=6,XWBNEW=1 S RESULT=1 ;if starting a stopped listener
"RTN","XWBTCP",37,0)
 ;    the next two cases are most usefull whenever some error occurs
"RTN","XWBTCP",38,0)
 ;    and the STATUS field is stuck in STARTING or RUNNING state
"RTN","XWBTCP",39,0)
 I XWBCUR=2,XWBNEW=3 S RESULT=1 ;change to RUNNING if it's starting
"RTN","XWBTCP",40,0)
 I XWBCUR=5,XWBNEW=6 S RESULT=1 ;change to STOPPED if it's stopping
"RTN","XWBTCP",41,0)
 Q RESULT
"RTN","XWBTCP",42,0)
 ;
"RTN","XWBTCP",43,0)
 ;
"RTN","XWBTCP",44,0)
STATCHG(DA,ACTION) ;STATUS field X-ref SET logic
"RTN","XWBTCP",45,0)
 ;DA: FileMan DA array
"RTN","XWBTCP",46,0)
 ;  DA    =IEN of the port
"RTN","XWBTCP",47,0)
 ;  DA(1) =IEN of the BOX-VOLUME
"RTN","XWBTCP",48,0)
 ;  DA(2) =IEN of site/domain
"RTN","XWBTCP",49,0)
 ;ACTION: Requested value for the STATUS field.  Possible values are:
"RTN","XWBTCP",50,0)
 ;  1 = START, 2 = STARTING, 3 = RUNNING,
"RTN","XWBTCP",51,0)
 ;  4 = STOP,  5 = STOPPING, 6 = STOPPED
"RTN","XWBTCP",52,0)
 N C,ZTCPU,ZTUCI,XWBPORT,XWBFDA
"RTN","XWBTCP",53,0)
 S C=","
"RTN","XWBTCP",54,0)
 ;
"RTN","XWBTCP",55,0)
 I ACTION=1!(ACTION=4) D
"RTN","XWBTCP",56,0)
 . S ZTCPU=$$GET1^DIQ(8994.17,DA(1)_C_DA(2)_C,"BOX-VOLUME PAIR")
"RTN","XWBTCP",57,0)
 . S XWBPORT=$$GET1^DIQ(8994.171,DA_C_DA(1)_C_DA(2)_C,"PORT")
"RTN","XWBTCP",58,0)
 . ;S ZTUCI=$$GET1^DIQ(8994.171,DA_C_DA(1)_C_DA(2)_C,"UCI")
"RTN","XWBTCP",59,0)
 . ;UCI is no longer derived from the file, but comes from current
"RTN","XWBTCP",60,0)
 . ;environment.  The reason for that is it makes no sense to start
"RTN","XWBTCP",61,0)
 . ;a listener in a UCI where ^XWB can't be reached to change status.
"RTN","XWBTCP",62,0)
 . D GETENV^%ZOSV
"RTN","XWBTCP",63,0)
 . S ZTUCI=$P(Y,U),ZTIO="",ZTREQ="@",ZTDTH=$H ;run it ASAP
"RTN","XWBTCP",64,0)
 . I ACTION=1 D    ; -- START listener
"RTN","XWBTCP",65,0)
 . . S ZTDESC="RPC Broker Listener START on "_ZTUCI_"-"_ZTCPU_", port "_XWBPORT
"RTN","XWBTCP",66,0)
 . . S ZTRTN="EN^XWBTCPL("_XWBPORT_")"
"RTN","XWBTCP",67,0)
 . E  D            ; -- STOP listener
"RTN","XWBTCP",68,0)
 . . S ZTDESC="RPC Broker Listener STOP on "_ZTUCI_"-"_ZTCPU_", port "_XWBPORT
"RTN","XWBTCP",69,0)
 . . S ZTRTN="STOP^XWBTCP("_XWBPORT_")"
"RTN","XWBTCP",70,0)
 . D EN^DDIOL("Task: "_ZTDESC,"","!?10") ;inform user
"RTN","XWBTCP",71,0)
 . D ^%ZTLOAD      ; queue it
"RTN","XWBTCP",72,0)
 . D EN^DDIOL("has been queued as task "_ZTSK,"","!?10") ;inform user
"RTN","XWBTCP",73,0)
 . ; --  change STATUS from START to STARTING or from STOP to STOPPING
"RTN","XWBTCP",74,0)
 . D FDA^DILF(8994.171,DA_C_DA(1)_C_DA(2)_C,1,"R",ACTION+1,"XWBFDA")
"RTN","XWBTCP",75,0)
 . D FILE^DIE("K","XWBFDA")
"RTN","XWBTCP",76,0)
 Q
"RTN","XWBTCP",77,0)
 ;
"RTN","XWBTCP",78,0)
 ;
"RTN","XWBTCP",79,0)
STRT(XWBTSKT) ;start TCP Listener.  Interactive entry point
"RTN","XWBTCP",80,0)
 N IP,REF,Y,%
"RTN","XWBTCP",81,0)
 S U="^" D HOME^%ZIS
"RTN","XWBTCP",82,0)
 W "Start TCP Listener...",!
"RTN","XWBTCP",83,0)
 X ^%ZOSF("UCI") S REF=Y
"RTN","XWBTCP",84,0)
 S IP="0.0.0.0" ;get server IP at some point
"RTN","XWBTCP",85,0)
 IF $G(XWBTSKT)="" S XWBTSKT=9000 ;default service port is 9000
"RTN","XWBTCP",86,0)
 ;
"RTN","XWBTCP",87,0)
 ; -- see if 'running flag' for listener is set
"RTN","XWBTCP",88,0)
 I '$$SEMAPHOR^XWBTCPL(XWBTSKT,"LOCK") W "TCP Listener on port "_XWBTSKT_" appears to be running already.",! Q
"RTN","XWBTCP",89,0)
 S %=$$SEMAPHOR^XWBTCPL(XWBTSKT,"UNLOCK")
"RTN","XWBTCP",90,0)
 ;
"RTN","XWBTCP",91,0)
 ; -- set stop flag to false and start the listener
"RTN","XWBTCP",92,0)
 ;S ^XWB(IP,REF,XWBTSKT,"STOP")=""
"RTN","XWBTCP",93,0)
 S ^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")=""  ;record problem marker
"RTN","XWBTCP",94,0)
 J EN^XWBTCPL(XWBTSKT)::5 ;Used in place of TaskMan, Need to start on any node.
"RTN","XWBTCP",95,0)
 I '$T W "Unable to run TCP Listener in background.",! Q
"RTN","XWBTCP",96,0)
 F %=1:1:5 D  Q:%=0
"RTN","XWBTCP",97,0)
 . W "Checking if TCP Listener has started...",!
"RTN","XWBTCP",98,0)
 . H 3
"RTN","XWBTCP",99,0)
 . L +^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")
"RTN","XWBTCP",100,0)
 . S:'$D(^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")) %=0
"RTN","XWBTCP",101,0)
 . L -^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")
"RTN","XWBTCP",102,0)
 I $D(^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")) D
"RTN","XWBTCP",103,0)
 . W !,"TCP Listener could not be started!",!
"RTN","XWBTCP",104,0)
 . W "Check if port "_XWBTSKT_" is busy on this CPU.",!
"RTN","XWBTCP",105,0)
 . K ^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")   ;clear marker
"RTN","XWBTCP",106,0)
 E  W "TCP Listener started successfully."
"RTN","XWBTCP",107,0)
 Q
"RTN","XWBTCP",108,0)
 ;
"RTN","XWBTCP",109,0)
 ;
"RTN","XWBTCP",110,0)
STRTALL ;XWB LISTENER STARTER option entry point
"RTN","XWBTCP",111,0)
 ;here all listener entries in RPC Broker Site Parameters file that
"RTN","XWBTCP",112,0)
 ;have CONTROLLED BY LISTENER STARTER set to 1/Yes will be started.
"RTN","XWBTCP",113,0)
 N E,LSTN,LSTNID,LSTNIENS,PORTID,XWBSCR,XWBDA
"RTN","XWBTCP",114,0)
 ;XWBDA: Namespaced FileMan DA array
"RTN","XWBTCP",115,0)
 ;  XWBDA    =IEN of the port
"RTN","XWBTCP",116,0)
 ;  XWBDA(1) =IEN of the BOX-VOLUME
"RTN","XWBTCP",117,0)
 ;  XWBDA(2) =IEN of site/domain
"RTN","XWBTCP",118,0)
 S E=""
"RTN","XWBTCP",119,0)
 S XWBDA(2)=1 ;hard set IEN of site/domain
"RTN","XWBTCP",120,0)
 ; -- screen out RUNNING (STATUS=3) listeners and those that aren't controlled by XWB LISTENER STARTER option.
"RTN","XWBTCP",121,0)
 S XWBSCR="I $P(^(0),U,2)'=3,$P(^(0),U,4)"
"RTN","XWBTCP",122,0)
 ; -- get top level listners box-volume
"RTN","XWBTCP",123,0)
 D LIST^DIC(8994.17,",1,",E,E,E,E,E,E,E,E,$NA(LSTN("LSTNR")))
"RTN","XWBTCP",124,0)
 S LSTNID=""
"RTN","XWBTCP",125,0)
 F  S LSTNID=$O(LSTN("LSTNR","DILIST",1,LSTNID)) Q:LSTNID=""  D
"RTN","XWBTCP",126,0)
 . S XWBDA(1)=LSTN("LSTNR","DILIST",2,LSTNID) ;IEN of each listener
"RTN","XWBTCP",127,0)
 . S LSTNIENS=","_XWBDA(1)_","_XWBDA(2)_","
"RTN","XWBTCP",128,0)
 . D LIST^DIC(8994.171,LSTNIENS,E,"P",E,E,E,E,XWBSCR,E,$NA(LSTN("PORT")))
"RTN","XWBTCP",129,0)
 . S PORTID=0
"RTN","XWBTCP",130,0)
 . F  S PORTID=$O(LSTN("PORT","DILIST",PORTID)) Q:PORTID=""  D
"RTN","XWBTCP",131,0)
 . . ;W !,"--------------",! ZW LSTN
"RTN","XWBTCP",132,0)
 . . S XWBDA=$P(LSTN("PORT","DILIST",PORTID,0),U,2)
"RTN","XWBTCP",133,0)
 . . ;W !,"========",! ZW XWBDA
"RTN","XWBTCP",134,0)
 . . D STATCHG(.XWBDA,1) ;use STATUS field X-ref SET logic to queue up start of a listener
"RTN","XWBTCP",135,0)
 Q
"RTN","XWBTCP",136,0)
 ;
"RTN","XWBTCP",137,0)
 ;
"RTN","XWBTCP",138,0)
STOP(XWBTSKT) ;stop TCP Listener.  Interactive and TaskMan entry point
"RTN","XWBTCP",139,0)
 N IP,REF,X,DEV,XWBOS,XWBIP
"RTN","XWBTCP",140,0)
 S U="^" D HOME^%ZIS
"RTN","XWBTCP",141,0)
 W "Stop TCP Listener...",!
"RTN","XWBTCP",142,0)
 X ^%ZOSF("UCI") S REF=Y
"RTN","XWBTCP",143,0)
 S IP="0.0.0.0" ;get server IP
"RTN","XWBTCP",144,0)
 IF $G(XWBTSKT)="" S XWBTSKT=9000 ;default service port is 9000
"RTN","XWBTCP",145,0)
 ;
"RTN","XWBTCP",146,0)
 S XWBOS=$S(^%ZOSF("OS")["DSM":"DSM",^("OS")["MSM":"MSM",^("OS")["OpenM":"OpenM",1:"") ;RWF
"RTN","XWBTCP",147,0)
 ;
"RTN","XWBTCP",148,0)
 ; -- make sure the listener is running
"RTN","XWBTCP",149,0)
 I $$SEMAPHOR^XWBTCPL(XWBTSKT,"LOCK") D  Q
"RTN","XWBTCP",150,0)
 . S %=$$SEMAPHOR^XWBTCPL(XWBTSKT,"UNLOCK")
"RTN","XWBTCP",151,0)
 . D EN^DDIOL("TCP Listener does not appear to be running.")
"RTN","XWBTCP",152,0)
 ;
"RTN","XWBTCP",153,0)
 ; -- set the stop flag
"RTN","XWBTCP",154,0)
 ;S ^XWB(IP,REF,XWBTSKT,"STOP")=1
"RTN","XWBTCP",155,0)
 ;
"RTN","XWBTCP",156,0)
 ; -- send the shutdown message to the TCP Listener process
"RTN","XWBTCP",157,0)
 ;    using loopback address
"RTN","XWBTCP",158,0)
 S XWBIP="127.0.0.1"
"RTN","XWBTCP",159,0)
 D CALL^%ZISTCP("127.0.0.1",XWBTSKT) I POP D  Q
"RTN","XWBTCP",160,0)
 . S %=$$SEMAPHOR^XWBTCPL(XWBTSKT,"UNLOCK")
"RTN","XWBTCP",161,0)
 . D EN^DDIOL("TCP Listener does not appear to be running.")
"RTN","XWBTCP",162,0)
 U IO
"RTN","XWBTCP",163,0)
 ;
"RTN","XWBTCP",164,0)
 S X=$T(+2),X=$P(X,";;",2),X=$P(X,";")
"RTN","XWBTCP",165,0)
 IF X="" S X=0
"RTN","XWBTCP",166,0)
 S X=$C($L(X))_X
"RTN","XWBTCP",167,0)
 W "{XWB}00020|"_X_"00011TCPshutdown",!
"RTN","XWBTCP",168,0)
 ;W "{XWB}00011TCPshutdown",!
"RTN","XWBTCP",169,0)
 R X#3:5
"RTN","XWBTCP",170,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCP",171,0)
 ;D EN^DDIOL("TCP Listener Response to Shutdown Request: "_X)
"RTN","XWBTCP",172,0)
 IF X="ack" D EN^DDIOL("TCP Listener has been shutdown.")
"RTN","XWBTCP",173,0)
 ELSE  D EN^DDIOL("Shutdown Failed!")
"RTN","XWBTCP",174,0)
 ;change process name
"RTN","XWBTCP",175,0)
 D CHPRN^XWBTCPC($J)
"RTN","XWBTCP",176,0)
 Q
"RTN","XWBTCPL")
0^2^B28922692
"RTN","XWBTCPL",1,0)
XWBTCPL ;SLC/KCM - Listener for TCP connects ;10/08/97  14:18
"RTN","XWBTCPL",2,0)
 ;;1.1;RPC BROKER;**1**;Mar 28, 1997
"RTN","XWBTCPL",3,0)
 ;ISC-SF/EG - DHCP Broker
"RTN","XWBTCPL",4,0)
 ;
"RTN","XWBTCPL",5,0)
 ; This routine is the background process that listens for client
"RTN","XWBTCPL",6,0)
 ; requests to connect to M.  When a request is received, This
"RTN","XWBTCPL",7,0)
 ; procedure will job a s small routine to listen for new requests
"RTN","XWBTCPL",8,0)
 ; on the known service port.
"RTN","XWBTCPL",9,0)
 ;
"RTN","XWBTCPL",10,0)
 ; This job may be started in the background with:  D STRT^XWBTCP(PORT)
"RTN","XWBTCPL",11,0)
 ;
"RTN","XWBTCPL",12,0)
 ; When running, this job may be stopped with:      D STOP^XWBTCP(PORT)
"RTN","XWBTCPL",13,0)
 ;
"RTN","XWBTCPL",14,0)
 ; Where port is the known service port to listen for connections
"RTN","XWBTCPL",15,0)
 ;
"RTN","XWBTCPL",16,0)
EN(XWBTSKT) ; -- accept clients and start the individual message handler
"RTN","XWBTCPL",17,0)
 N IP,REF,RETRY,XWBVER
"RTN","XWBTCPL",18,0)
 S U="^"
"RTN","XWBTCPL",19,0)
 S RETRY="START"
"RTN","XWBTCPL",20,0)
 X ^%ZOSF("UCI") S REF=Y
"RTN","XWBTCPL",21,0)
 S IP="0.0.0.0" ;get server IP
"RTN","XWBTCPL",22,0)
 IF $G(XWBTSKT)="" S XWBTSKT=9000 ; default service port
"RTN","XWBTCPL",23,0)
 S XWBTDEV=XWBTSKT
"RTN","XWBTCPL",24,0)
 ;
"RTN","XWBTCPL",25,0)
 D SETNM^%ZOSV($E("RPCB_Port:"_XWBTSKT,1,15)) ;change process name
"RTN","XWBTCPL",26,0)
 N LEN,MSG,XWBOS,DONE,DSMTCP,X
"RTN","XWBTCPL",27,0)
 ; -- check the TCP stop parameter
"RTN","XWBTCPL",28,0)
 ;IF $G(^XWB(IP,REF,XWBTSKT,"STOP")) K ^XWB(IP,REF,XWBTSKT) Q   ; -- change to param file later ***
"RTN","XWBTCPL",29,0)
 Q:'$$SEMAPHOR(XWBTSKT,"LOCK")  ; -- quit if job is already running
"RTN","XWBTCPL",30,0)
 ;
"RTN","XWBTCPL",31,0)
 D UPDTREC(XWBTSKT,3) ;updt RPC BROKER SITE PARAMETER record as RUNNING
"RTN","XWBTCPL",32,0)
 ;
"RTN","XWBTCPL",33,0)
RESTART ;
"RTN","XWBTCPL",34,0)
 S DONE=0
"RTN","XWBTCPL",35,0)
 S XWBOS=$S(^%ZOSF("OS")["DSM":"DSM",^("OS")["MSM":"MSM",^("OS")["OpenM":"OpenM",1:"")
"RTN","XWBTCPL",36,0)
 IF $$NEWERR^%ZTER N $ESTACK S $ETRAP="D ETRAP^XWBTCPL"
"RTN","XWBTCPL",37,0)
 E  S X="ETRAP^XWBTCPL",@^%ZOSF("TRAP")
"RTN","XWBTCPL",38,0)
 ;
"RTN","XWBTCPL",39,0)
 ; -- check the TCP stop parameter
"RTN","XWBTCPL",40,0)
 ;IF $G(^XWB(IP,REF,XWBTSKT,"STOP")) K ^XWB(IP,REF,XWBTSKT) Q   ; -- change to param file later ***
"RTN","XWBTCPL",41,0)
 ;
"RTN","XWBTCPL",42,0)
 I XWBOS="DSM" O XWBTSKT:TCPCHAN:5 ;Open listener
"RTN","XWBTCPL",43,0)
 F  D  Q:DONE
"RTN","XWBTCPL",44,0)
 . L +^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")
"RTN","XWBTCPL",45,0)
 . K ^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")   ;clear problem marker
"RTN","XWBTCPL",46,0)
 . L -^XWB(IP,REF,XWBTSKT,"PROBLEM MARKER")
"RTN","XWBTCPL",47,0)
 . ; -- listen for connect & get the initial message from the client
"RTN","XWBTCPL",48,0)
 . I XWBOS="DSM" U XWBTSKT
"RTN","XWBTCPL",49,0)
 . I XWBOS="MSM" S XWBTDEV=56 O 56 U 56::"TCP" W /SOCKET("",XWBTSKT)
"RTN","XWBTCPL",50,0)
 . I XWBOS="OpenM" S XWBTDEV="|TCP|"_XWBTSKT O XWBTDEV:(:XWBTSKT:"AT") U XWBTDEV R *X
"RTN","XWBTCPL",51,0)
 . S XWBVER=0
"RTN","XWBTCPL",52,0)
 . R LEN#11:3600 IF $E(LEN,1,5)'="{XWB}" Q
"RTN","XWBTCPL",53,0)
 . IF $E(LEN,11,11)="|" D
"RTN","XWBTCPL",54,0)
 . . R X#1:60
"RTN","XWBTCPL",55,0)
 . . R XWBVER#$A(X):60
"RTN","XWBTCPL",56,0)
 . . R LEN#5:60
"RTN","XWBTCPL",57,0)
 . . R MSG#LEN:60
"RTN","XWBTCPL",58,0)
 . ELSE  S X=$E(LEN,11,11),LEN=$E(LEN,6,10)-1 R MSG#LEN:60 S MSG=X_MSG
"RTN","XWBTCPL",59,0)
 . ; -- msg should be:  action^client IP^client port^token
"RTN","XWBTCPL",60,0)
 . ;
"RTN","XWBTCPL",61,0)
 . ; -- if the action is TCPconnect (usual case)
"RTN","XWBTCPL",62,0)
 . I $P(MSG,"^")="TCPconnect" D
"RTN","XWBTCPL",63,0)
 . . ;-- decrypt token
"RTN","XWBTCPL",64,0)
 . . N X,%T S X="",%T=0
"RTN","XWBTCPL",65,0)
 . . ;Job a Server
"RTN","XWBTCPL",66,0)
 . . IF XWBOS="DSM" J EN^XWBTCPC($P(MSG,"^",2),$P(MSG,"^",3),$P(X,"^"),XWBVER,$P(MSG,"^",4))::5 S %T=$T
"RTN","XWBTCPL",67,0)
 . . IF XWBOS="MSM" J EN^XWBTCPC($P(MSG,"^",2),$P(MSG,"^",3),$P(X,"^"),XWBVER,$P(MSG,"^",4)):100000:5 S %T=$T
"RTN","XWBTCPL",68,0)
 . . I XWBOS="OpenM" J EN^XWBTCPC($P(MSG,"^",2),$P(MSG,"^",3),$P(X,"^"),XWBVER,$P(MSG,"^",4))::5 S %T=$T
"RTN","XWBTCPL",69,0)
 . . I %T D SNDERR W "accept",$C(4),!
"RTN","XWBTCPL",70,0)
 . . E  D SNDERR W "reject",$C(4),! S ^TMP("TCP",$P($H,",",2))="REJECT"
"RTN","XWBTCPL",71,0)
 . ;
"RTN","XWBTCPL",72,0)
 . ; -- if the action is TCPdebug (when msg handler run interactively)
"RTN","XWBTCPL",73,0)
 . I $P(MSG,"^")="TCPdebug" D SNDERR W "accept",$C(4),!
"RTN","XWBTCPL",74,0)
 . ;
"RTN","XWBTCPL",75,0)
 . ; -- if the action is TCPshutdown, this listener will quit if the
"RTN","XWBTCPL",76,0)
 . ;    stop flag has been set.  This request comes from an M process.
"RTN","XWBTCPL",77,0)
 . I $P(MSG,"^")="TCPshutdown" S DONE=1 W "ack",!
"RTN","XWBTCPL",78,0)
 . ;Now release the connection.
"RTN","XWBTCPL",79,0)
 . I XWBOS="DSM" U XWBTSKT:DISCONNECT ; release this socket
"RTN","XWBTCPL",80,0)
 . I XWBOS="MSM" C 56
"RTN","XWBTCPL",81,0)
 . I XWBOS="OpenM" C XWBTDEV
"RTN","XWBTCPL",82,0)
 . Q
"RTN","XWBTCPL",83,0)
 ; -- loop end
"RTN","XWBTCPL",84,0)
 ;
"RTN","XWBTCPL",85,0)
 IF XWBOS="DSM" C XWBTSKT
"RTN","XWBTCPL",86,0)
 S %=$$SEMAPHOR(XWBTSKT,"UNLOCK") ; destroy 'running flag'
"RTN","XWBTCPL",87,0)
 ;K ^XWB(IP,REF,XWBTSKT,"STOP")
"RTN","XWBTCPL",88,0)
 D UPDTREC(XWBTSKT,6) ;updt RPC BROKER SITE PARAMETER record as STOPPED
"RTN","XWBTCPL",89,0)
 Q
"RTN","XWBTCPL",90,0)
 ;
"RTN","XWBTCPL",91,0)
ETRAP   ; -- on trapped error, send error info to client
"RTN","XWBTCPL",92,0)
 N XWBERR
"RTN","XWBTCPL",93,0)
 S XWBERR=$C(24)_"M  ERROR="_$$EC^%ZOSV_$C(13,10)_"LAST REF="_$$LGR^%ZOSV_$C(4)
"RTN","XWBTCPL",94,0)
 D ^%ZTER ;Record it
"RTN","XWBTCPL",95,0)
 S RETRY=$G(RETRY)+1 H 3
"RTN","XWBTCPL",96,0)
 IF RETRY=5 H  ;give up trying, server should not restart
"RTN","XWBTCPL",97,0)
 IF $$NEWERR^%ZTER S $ETRAP="Q:($ESTACK&'$QUIT)  Q:$ESTACK 0 S $ECODE="""" G RESTART^XWBTCPL"
"RTN","XWBTCPL",98,0)
 IF XWBOS="DSM" D
"RTN","XWBTCPL",99,0)
 . I $D(XWBTLEN),XWBTLEN,XWBERR'["SYSTEM-F" D SNDERR W XWBERR
"RTN","XWBTCPL",100,0)
 IF XWBOS'="DSM" D  G RESTART
"RTN","XWBTCPL",101,0)
 . D SNDERR W XWBERR
"RTN","XWBTCPL",102,0)
 S $ECODE=",U1," Q  ;Pass error up to pop stack.
"RTN","XWBTCPL",103,0)
 ;
"RTN","XWBTCPL",104,0)
SNDERR ;send error information
"RTN","XWBTCPL",105,0)
 ;XWBSEC is the security packet, XWBERROR is application packet
"RTN","XWBTCPL",106,0)
 N X
"RTN","XWBTCPL",107,0)
 S X=$G(XWBSEC)
"RTN","XWBTCPL",108,0)
 W $C($L(X))_X
"RTN","XWBTCPL",109,0)
 S X=$G(XWBERROR)
"RTN","XWBTCPL",110,0)
 W $C($L(X))_X W !
"RTN","XWBTCPL",111,0)
 S XWBERROR="" ;clears parameters
"RTN","XWBTCPL",112,0)
 Q
"RTN","XWBTCPL",113,0)
 ;
"RTN","XWBTCPL",114,0)
UPDTREC(XWBTSKT,STATE,XWBENV) ; -- update STATUS field and ^%ZIS X-ref of the
"RTN","XWBTCPL",115,0)
 ;RPC BROKER SITE PARAMETER file
"RTN","XWBTCPL",116,0)
 ;XWBTSKT: listener port
"RTN","XWBTCPL",117,0)
 N C,XWBOXIEN,XWBPOIEN,XWBFDA
"RTN","XWBTCPL",118,0)
 S C=",",U="^"
"RTN","XWBTCPL",119,0)
 I $G(XWBENV)'="" S Y=XWBENV
"RTN","XWBTCPL",120,0)
 E  D GETENV^%ZOSV ;get Y=UCI^VOL^NODE^BOXLOOKUP of current system
"RTN","XWBTCPL",121,0)
 ;I STATE=3 S ^%ZIS(8994.171,"RPCB Listener",$P(Y,U,2),$P(Y,U),$P(Y,U,4),XWBTSKT)=$J
"RTN","XWBTCPL",122,0)
 ;I STATE=6 K ^%ZIS(8994.171,"RPCB Listener",$P(Y,U,2),$P(Y,U),$P(Y,U,4),XWBTSKT)
"RTN","XWBTCPL",123,0)
 ;
"RTN","XWBTCPL",124,0)
 S XWBOXIEN=$$FIND1^DIC(8994.17,",1,","",$P(Y,U,4)) ;find rec for box
"RTN","XWBTCPL",125,0)
 S XWBPOIEN=$$FIND1^DIC(8994.171,C_XWBOXIEN_",1,","",XWBTSKT)
"RTN","XWBTCPL",126,0)
 D:XWBPOIEN>0  ;update STATUS field if entry was found
"RTN","XWBTCPL",127,0)
 . D FDA^DILF(8994.171,XWBPOIEN_C_XWBOXIEN_C_1_C,1,"R",STATE,"XWBFDA")
"RTN","XWBTCPL",128,0)
 . D FILE^DIE("","XWBFDA")
"RTN","XWBTCPL",129,0)
 Q
"RTN","XWBTCPL",130,0)
 ;
"RTN","XWBTCPL",131,0)
 ;
"RTN","XWBTCPL",132,0)
SEMAPHOR(XWBTSKT,XWBACT) ;Lock/Unlock listener semaphore
"RTN","XWBTCPL",133,0)
 ;XWBTSKT: listener port, XWBACT: "LOCK" | "UNLOCK" action to perform
"RTN","XWBTCPL",134,0)
 ;if LOCK is requested, it will be attempted with 1 sec timeout and if
"RTN","XWBTCPL",135,0)
 ;lock was obtained RESULT will be 1, otherwise it will be 0.  For
"RTN","XWBTCPL",136,0)
 ;unlock RESULT will always be 1.
"RTN","XWBTCPL",137,0)
 N RESULT
"RTN","XWBTCPL",138,0)
 S U="^",RESULT=1
"RTN","XWBTCPL",139,0)
 D GETENV^%ZOSV ;get Y=UCI^VOL^NODE^BOXLOOKUP of current system
"RTN","XWBTCPL",140,0)
 I XWBACT="LOCK" D
"RTN","XWBTCPL",141,0)
 . L +^%ZIS(8994.171,"RPCB Listener",$P(Y,U,2),$P(Y,U),$P(Y,U,4),XWBTSKT):1
"RTN","XWBTCPL",142,0)
 . S RESULT=$T
"RTN","XWBTCPL",143,0)
 E  L -^%ZIS(8994.171,"RPCB Listener",$P(Y,U,2),$P(Y,U),$P(Y,U,4),XWBTSKT)
"RTN","XWBTCPL",144,0)
 Q RESULT
"VER")
8^21.0
**END**
**END**
