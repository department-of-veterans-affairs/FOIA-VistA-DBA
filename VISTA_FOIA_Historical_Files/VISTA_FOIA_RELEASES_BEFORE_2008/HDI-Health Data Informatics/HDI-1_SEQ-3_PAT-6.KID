Released HDI*1*6 SEQ #3
Extracted from mail message
**KIDS**:HDI*1.0*6^

**INSTALL NAME**
HDI*1.0*6
"BLD",5536,0)
HDI*1.0*6^HEALTH DATA & INFORMATICS^0^3060419^y
"BLD",5536,1,0)
^^1^1^3060120^
"BLD",5536,1,1,0)
See National Patch Module for details
"BLD",5536,4,0)
^9.64PA^^
"BLD",5536,"INIT")

"BLD",5536,"KRN",0)
^9.67PA^8989.52^19
"BLD",5536,"KRN",.4,0)
.4
"BLD",5536,"KRN",.401,0)
.401
"BLD",5536,"KRN",.402,0)
.402
"BLD",5536,"KRN",.403,0)
.403
"BLD",5536,"KRN",.5,0)
.5
"BLD",5536,"KRN",.84,0)
.84
"BLD",5536,"KRN",3.6,0)
3.6
"BLD",5536,"KRN",3.8,0)
3.8
"BLD",5536,"KRN",9.2,0)
9.2
"BLD",5536,"KRN",9.8,0)
9.8
"BLD",5536,"KRN",9.8,"NM",0)
^9.68A^5^5
"BLD",5536,"KRN",9.8,"NM",1,0)
HDISVF09^^0^B70195314
"BLD",5536,"KRN",9.8,"NM",2,0)
HDISVM00^^0^B4708917
"BLD",5536,"KRN",9.8,"NM",3,0)
HDISVM02^^0^B7192540
"BLD",5536,"KRN",9.8,"NM",4,0)
HDISVU01^^0^B3808363
"BLD",5536,"KRN",9.8,"NM",5,0)
HDISVCUT^^0^B15283864
"BLD",5536,"KRN",9.8,"NM","B","HDISVCUT",5)

"BLD",5536,"KRN",9.8,"NM","B","HDISVF09",1)

"BLD",5536,"KRN",9.8,"NM","B","HDISVM00",2)

"BLD",5536,"KRN",9.8,"NM","B","HDISVM02",3)

"BLD",5536,"KRN",9.8,"NM","B","HDISVU01",4)

"BLD",5536,"KRN",19,0)
19
"BLD",5536,"KRN",19.1,0)
19.1
"BLD",5536,"KRN",101,0)
101
"BLD",5536,"KRN",409.61,0)
409.61
"BLD",5536,"KRN",771,0)
771
"BLD",5536,"KRN",870,0)
870
"BLD",5536,"KRN",8989.51,0)
8989.51
"BLD",5536,"KRN",8989.52,0)
8989.52
"BLD",5536,"KRN",8994,0)
8994
"BLD",5536,"KRN","B",.4,.4)

"BLD",5536,"KRN","B",.401,.401)

"BLD",5536,"KRN","B",.402,.402)

"BLD",5536,"KRN","B",.403,.403)

"BLD",5536,"KRN","B",.5,.5)

"BLD",5536,"KRN","B",.84,.84)

"BLD",5536,"KRN","B",3.6,3.6)

"BLD",5536,"KRN","B",3.8,3.8)

"BLD",5536,"KRN","B",9.2,9.2)

"BLD",5536,"KRN","B",9.8,9.8)

"BLD",5536,"KRN","B",19,19)

"BLD",5536,"KRN","B",19.1,19.1)

"BLD",5536,"KRN","B",101,101)

"BLD",5536,"KRN","B",409.61,409.61)

"BLD",5536,"KRN","B",771,771)

"BLD",5536,"KRN","B",870,870)

"BLD",5536,"KRN","B",8989.51,8989.51)

"BLD",5536,"KRN","B",8989.52,8989.52)

"BLD",5536,"KRN","B",8994,8994)

"BLD",5536,"QUES",0)
^9.62^^
"BLD",5536,"REQB",0)
^9.611^1^1
"BLD",5536,"REQB",1,0)
HDI*1.0*2^2
"BLD",5536,"REQB","B","HDI*1.0*2",1)

"MBREQ")
0
"PKG",556,-1)
1^1
"PKG",556,0)
HEALTH DATA & INFORMATICS^HDI^Data Standardization
"PKG",556,20,0)
^9.402P^^
"PKG",556,22,0)
^9.49I^1^1
"PKG",556,22,1,0)
1.0^3050426
"PKG",556,22,1,"PAH",1,0)
6^3060419
"PKG",556,22,1,"PAH",1,1,0)
^^1^1^3060419
"PKG",556,22,1,"PAH",1,1,1,0)
See National Patch Module for details
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","HDISVCUT")
0^5^B15283864^B6418022
"RTN","HDISVCUT",1,0)
HDISVCUT ;CT/GRR ; 19 Apr 2006  10:57 AM
"RTN","HDISVCUT",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**6**;Feb 22, 2005
"RTN","HDISVCUT",3,0)
BLDSTAT(HDISFILE,HDISFN,HDISSC,HDISSDT,HDISARRY) ;
"RTN","HDISVCUT",4,0)
 N HDISOUT,CODE,HDISTDTX,Y
"RTN","HDISVCUT",5,0)
 I HDISFILE=""!(HDISFN="")!(HDISARRY="") S HDISOUT=0_"^Parameter Missing" G QUIT
"RTN","HDISVCUT",6,0)
 K @HDISARRY
"RTN","HDISVCUT",7,0)
 S DIC=7115.3,DIC(0)="Z",X="DOMAIN STATUS UPDATE" D ^DIC K DIC
"RTN","HDISVCUT",8,0)
 I Y<0 S HDISOUT=0_"^DOMAIN STATUS UPDATE Template Missing" G QUIT
"RTN","HDISVCUT",9,0)
 S HDIST=+Y,HDISY=Y,HDISY(0)=Y(0)
"RTN","HDISVCUT",10,0)
 S HDISSRC=$P($$SITE^VASITE(),"^",3)
"RTN","HDISVCUT",11,0)
 S HDISPROD=$$PROD^XUPROD()
"RTN","HDISVCUT",12,0)
 S HDISTDTX=$$FMTXML^HDISVU01(HDISSDT,"","")
"RTN","HDISVCUT",13,0)
 S HDISMD=$G(^XMB("NETNAME"))
"RTN","HDISVCUT",14,0)
 S @HDISARRY@(1)="<?xml version=""1.0"" encoding=""utf-8"" ?>"
"RTN","HDISVCUT",15,0)
 ;S @HDISARRY@(1)=$$XMLHDR^XOBVLIB()
"RTN","HDISVCUT",16,0)
 S @HDISARRY@(2)="<"_$P(HDISY(0),"^",4)_" "_$G(^HDIS(7115.3,HDIST,1))_">"
"RTN","HDISVCUT",17,0)
 N Z K Z D ZINIT
"RTN","HDISVCUT",18,0)
 S Z(20)=HDISSRC
"RTN","HDISVCUT",19,0)
 S Z(22)=HDISPROD
"RTN","HDISVCUT",20,0)
 S Z(30)=HDISMD
"RTN","HDISVCUT",21,0)
 S Z(60)=HDISFILE
"RTN","HDISVCUT",22,0)
 S Z(70)=HDISFN
"RTN","HDISVCUT",23,0)
 S Z(80)=HDISSC
"RTN","HDISVCUT",24,0)
 S Z(90)=HDISTDTX
"RTN","HDISVCUT",25,0)
 D XMLOUT^HDISXML(HDIST,"20,22,30,60,70,80,90,10/","Z",HDISARRY,.HDERR)
"RTN","HDISVCUT",26,0)
 S HDISOUT=1
"RTN","HDISVCUT",27,0)
QUIT Q HDISOUT
"RTN","HDISVCUT",28,0)
 ;
"RTN","HDISVCUT",29,0)
ZINIT S Z(22)="" F Z=10:10:100 S Z(Z)=""
"RTN","HDISVCUT",30,0)
 Q
"RTN","HDISVCUT",31,0)
 ;
"RTN","HDISVCUT",32,0)
 ;
"RTN","HDISVCUT",33,0)
BLDSND(HDISFILE,HDISFN,HDISSTCD,HDISSDT,HDISARRY,HDISINP) ;
"RTN","HDISVCUT",34,0)
 ;Updating of central server disabled (return success)
"RTN","HDISVCUT",35,0)
 I $$GETSDIS^HDISVF03() Q 1
"RTN","HDISVCUT",36,0)
 N HDISOUT
"RTN","HDISVCUT",37,0)
 S:HDISSDT="" HDISSDT=DT
"RTN","HDISVCUT",38,0)
 S:HDISARRY="" HDISARRY=$NA(^TMP("HDISSBUILD",$J))
"RTN","HDISVCUT",39,0)
 S HDISOUT=$$BLDSTAT(HDISFILE,HDISFN,HDISSTCD,HDISSDT,HDISARRY)
"RTN","HDISVCUT",40,0)
 I 'HDISOUT Q HDISOUT
"RTN","HDISVCUT",41,0)
 S HDISOUT=$$SNDXML^HDISVM02(HDISARRY,2,HDISINP)
"RTN","HDISVCUT",42,0)
 Q HDISOUT
"RTN","HDISVCUT",43,0)
 ;
"RTN","HDISVCUT",44,0)
STATUPD(FILE,FIELD,CODE,DATE) ;Encompassing local status update call
"RTN","HDISVCUT",45,0)
 ; Input : FILE - File number
"RTN","HDISVCUT",46,0)
 ;         FIELD - Field number (defaults to .01)
"RTN","HDISVCUT",47,0)
 ;         CODE - Status code to set (defaults to "not started")
"RTN","HDISVCUT",48,0)
 ;         DATE - FileMan date/time to return status for (optional)
"RTN","HDISVCUT",49,0)
 ;                (defaults to NOW)
"RTN","HDISVCUT",50,0)
 ;Output : 1 = Success     0^Text = Failure
"RTN","HDISVCUT",51,0)
 ; Notes : This call will update the local status, build the Status
"RTN","HDISVCUT",52,0)
 ;         Update XML document, and forward the Status Update XML
"RTN","HDISVCUT",53,0)
 ;         document to the centralized server
"RTN","HDISVCUT",54,0)
 ;       : If time is not included with the date, 1 second past
"RTN","HDISVCUT",55,0)
 ;         midnight will be used as the time
"RTN","HDISVCUT",56,0)
 ;       : If an entry for the given file/field and date/time already
"RTN","HDISVCUT",57,0)
 ;         exists, the existing entry will be updated to reflect the
"RTN","HDISVCUT",58,0)
 ;         given status
"RTN","HDISVCUT",59,0)
 N XMLARR,TMPARR,OUTPUT
"RTN","HDISVCUT",60,0)
 ;Check input
"RTN","HDISVCUT",61,0)
 S FILE=+$G(FILE)
"RTN","HDISVCUT",62,0)
 I 'FILE Q "0^Parameter FILE was not passed"
"RTN","HDISVCUT",63,0)
 S FIELD=+$G(FIELD)
"RTN","HDISVCUT",64,0)
 I 'FIELD S FIELD=.01
"RTN","HDISVCUT",65,0)
 S CODE=+$G(CODE)
"RTN","HDISVCUT",66,0)
 S DATE=+$G(DATE)
"RTN","HDISVCUT",67,0)
 I 'DATE S DATE=$$NOW^XLFDT()
"RTN","HDISVCUT",68,0)
 I '$P(DATE,".",2) S $P(DATE,".",2)="000001"
"RTN","HDISVCUT",69,0)
 ;Update local status
"RTN","HDISVCUT",70,0)
 D SETSTAT^HDISVF01(FILE,FIELD,CODE,DATE,1)
"RTN","HDISVCUT",71,0)
 ;Updating of central server disabled (return success)
"RTN","HDISVCUT",72,0)
 I $$GETSDIS^HDISVF03() Q 1
"RTN","HDISVCUT",73,0)
 ;Create status update xml doc and send to central server
"RTN","HDISVCUT",74,0)
 S XMLARR=$NA(^TMP("HDISVCUT",$J,"XML"))
"RTN","HDISVCUT",75,0)
 S TMPARR=$NA(^TMP("HDISVCUT",$J,"HDISINP"))
"RTN","HDISVCUT",76,0)
 K @XMLARR,@TMPARR
"RTN","HDISVCUT",77,0)
 S OUTPUT=$$BLDSND^HDISVCUT(FILE,FIELD,CODE,DATE,XMLARR,TMPARR)
"RTN","HDISVCUT",78,0)
 K @XMLARR,@TMPARR
"RTN","HDISVCUT",79,0)
 Q OUTPUT
"RTN","HDISVCUT",80,0)
 ;
"RTN","HDISVCUT",81,0)
VUID(HDDOM,HDROUT) ;Instantiate VUIDs for set of code fields
"RTN","HDISVCUT",82,0)
 ; Input:
"RTN","HDISVCUT",83,0)
 ;     HDDOM - Domain Name (i.e. ORDERS)
"RTN","HDISVCUT",84,0)
 ;     HDROUT - Routine containing VUID Sets-Of-Code data (i.e. HDI1005B)
"RTN","HDISVCUT",85,0)
 ;Output: 0 = Stop post-install (error)
"RTN","HDISVCUT",86,0)
 ;        1 = Continue with post-install
"RTN","HDISVCUT",87,0)
 N HDIMSG
"RTN","HDISVCUT",88,0)
 S HDIMSG(1)=" "
"RTN","HDISVCUT",89,0)
 S HDIMSG(2)="Seeding XTID VUID FOR SET OF CODES file (#8985.1) with "_HDDOM_" data"
"RTN","HDISVCUT",90,0)
 S HDIMSG(3)=" "
"RTN","HDISVCUT",91,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDISVCUT",92,0)
 I '$$VUIDL^HDISVU02(HDDOM,HDROUT) Q 0
"RTN","HDISVCUT",93,0)
 Q 1
"RTN","HDISVCUT",94,0)
 ;
"RTN","HDISVCUT",95,0)
UPDTDOM(HDDOM,HDISDFFS) ;Add Domain info to the HDIS DOMAIN file
"RTN","HDISVCUT",96,0)
 ;
"RTN","HDISVCUT",97,0)
 ; Input: HDDOM - Domain Name
"RTN","HDISVCUT",98,0)
 ;        HDISDFFS - Array containing File number set equal to Field Number (optional, .01 assumed)
"RTN","HDISVCUT",99,0)
 ;                      (i.e.   HDISDFFS(100.01)="")
"RTN","HDISVCUT",100,0)
 ;Output: HDISERR - Set to 1 when error incurred
"RTN","HDISVCUT",101,0)
 N HDIEN,HDIMSG
"RTN","HDISVCUT",102,0)
 S HDIMSG(1)=" "
"RTN","HDISVCUT",103,0)
 S HDIMSG(2)="Adding "_HDDOM_" Domain and related fields to"
"RTN","HDISVCUT",104,0)
 S HDIMSG(3)="HDIS DOMAIN file (#7115.1)"
"RTN","HDISVCUT",105,0)
 S HDIMSG(4)=" "
"RTN","HDISVCUT",106,0)
 D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDISVCUT",107,0)
 I '$$FINDDOM^HDISVF09(HDDOM,.HDISDFFS,1,.HDISDIEN,.HDISERRM) D  Q 0
"RTN","HDISVCUT",108,0)
 .N HDIEN,HDIMSG
"RTN","HDISVCUT",109,0)
 .S HDIMSG(1)=" "
"RTN","HDISVCUT",110,0)
 .S HDIMSG(2)="Error occurred when updating HDIS DOMAIN file."
"RTN","HDISVCUT",111,0)
 .S HDIMSG(3)=HDISERRM
"RTN","HDISVCUT",112,0)
 .S HDIMSG(4)="  "
"RTN","HDISVCUT",113,0)
 .D MES^XPDUTL(.HDIMSG) K HDIMSG
"RTN","HDISVCUT",114,0)
 Q 1
"RTN","HDISVCUT",115,0)
 ;
"RTN","HDISVCUT",116,0)
 ;
"RTN","HDISVCUT",117,0)
TESTACT() ;Set's the HDIS SYSTEM file fields to reflect a mirrored test account and remove any multiple entries
"RTN","HDISVCUT",118,0)
 ;
"RTN","HDISVCUT",119,0)
 ;Check file for multiple entries and delete if found
"RTN","HDISVCUT",120,0)
 ;PATCH 6
"RTN","HDISVCUT",121,0)
 ;
"RTN","HDISVCUT",122,0)
 I $O(^HDISF(7118.21,1))>0 D  ;multiple entries found
"RTN","HDISVCUT",123,0)
 .N IEN,FDA,DA,DIK
"RTN","HDISVCUT",124,0)
 .S IEN=1
"RTN","HDISVCUT",125,0)
 .F  S IEN=$O(^HDISF(7118.21,IEN)) Q:IEN'>0  D
"RTN","HDISVCUT",126,0)
 ..S DA=IEN
"RTN","HDISVCUT",127,0)
 ..S DIK="^HDISF(7118.21,"
"RTN","HDISVCUT",128,0)
 ..D ^DIK
"RTN","HDISVCUT",129,0)
 K FDA(1)
"RTN","HDISVCUT",130,0)
 S FDA(1,7118.21,"?+1,",.01)=$P($G(^HDISF(7118.21,1,0)),"^",1)
"RTN","HDISVCUT",131,0)
 S FDA(1,7118.21,"?+1,",.02)=$G(^XMB("NETNAME"))
"RTN","HDISVCUT",132,0)
 S FDA(1,7118.21,"?+1,",.03)=$$PROD^XUPROD()
"RTN","HDISVCUT",133,0)
 D UPDATE^DIE("","FDA(1)","RSLT","ERR(1)")
"RTN","HDISVCUT",134,0)
 Q 1
"RTN","HDISVCUT",135,0)
 ;
"RTN","HDISVF09")
0^1^B70195314^B25236145
"RTN","HDISVF09",1,0)
HDISVF09 ;ALB/RMO,ALB/GRR - 7115.1 File Utilities/API Cont.; 2/1/06@09:56:00
"RTN","HDISVF09",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**6**;Feb 22, 2005
"RTN","HDISVF09",3,0)
 ;
"RTN","HDISVF09",4,0)
 ;---- Begin HDIS Domain file (#7115.1) API(s) ----
"RTN","HDISVF09",5,0)
 ;
"RTN","HDISVF09",6,0)
FINDDOM(HDISDOM,HDISDFFS,HDISADDF,HDISDIEN,HDISERRM) ;Find or Add a New Domain Entry
"RTN","HDISVF09",7,0)
 ; Input  -- HDISDOM  Domain Name
"RTN","HDISVF09",8,0)
 ;           HDISDFFS Domain File/Field Array  (Optional)
"RTN","HDISVF09",9,0)
 ;                    Pass by HDISDFFS(File #)=Field # (Field # optional- Default .01)
"RTN","HDISVF09",10,0)
 ;                    Example: HDISDFFS(100.1)=""
"RTN","HDISVF09",11,0)
 ;           HDISADDF Add a New Entry Flag  (Optional- Default 0)
"RTN","HDISVF09",12,0)
 ;                    1=Yes and 0=No
"RTN","HDISVF09",13,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",14,0)
 ;           If Successful:
"RTN","HDISVF09",15,0)
 ;           HDISDIEN  HDIS Domain file IEN
"RTN","HDISVF09",16,0)
 ;           If Failure:
"RTN","HDISVF09",17,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF09",18,0)
 N HDISOKF
"RTN","HDISVF09",19,0)
 ;Initialize output
"RTN","HDISVF09",20,0)
 S (HDISDIEN,HDISERRM)=""
"RTN","HDISVF09",21,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",22,0)
 I $G(HDISDOM)="" D  G FINDDOMQ
"RTN","HDISVF09",23,0)
 . S HDISERRM="Unable to Find or Add Domain.  Required Variable Missing."
"RTN","HDISVF09",24,0)
 ;Check for existing Domain, return entry and exit if it exists
"RTN","HDISVF09",25,0)
 I $D(^HDIS(7115.1,"B",HDISDOM)) D  G FINDDOMQ:$G(HDISDIEN)
"RTN","HDISVF09",26,0)
 . S HDISDIEN=$O(^HDIS(7115.1,"B",HDISDOM,0))
"RTN","HDISVF09",27,0)
 . S HDISOKF=1
"RTN","HDISVF09",28,0)
 ;If flag set, Add a New Domain Entry
"RTN","HDISVF09",29,0)
 I $G(HDISADDF) S HDISOKF=$$ADDDOM(HDISDOM,.HDISDFFS,.HDISDIEN,.HDISERRM)
"RTN","HDISVF09",30,0)
FINDDOMQ Q +$G(HDISOKF)
"RTN","HDISVF09",31,0)
 ;
"RTN","HDISVF09",32,0)
ADDDOM(HDISDOM,HDISDFFS,HDISDIEN,HDISERRM) ;Add a New Domain Entry
"RTN","HDISVF09",33,0)
 ; Input  -- HDISDOM  Domain Name
"RTN","HDISVF09",34,0)
 ;           HDISDFFS Domain File/Field Array  (Optional)
"RTN","HDISVF09",35,0)
 ;                    Pass by HDISDFFS(File #)=Field # (Field # optional- Default .01)
"RTN","HDISVF09",36,0)
 ;                    Example: HDISDFFS(100.1)=""
"RTN","HDISVF09",37,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",38,0)
 ;           If Successful:
"RTN","HDISVF09",39,0)
 ;           HDISDIEN  HDIS Domain file IEN
"RTN","HDISVF09",40,0)
 ;           If Failure:
"RTN","HDISVF09",41,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF09",42,0)
 N HDISFDA,HDISIEN,HDISMSG,HDISOKF
"RTN","HDISVF09",43,0)
 ;Initialize output
"RTN","HDISVF09",44,0)
 S (HDISDIEN,HDISERRM)=""
"RTN","HDISVF09",45,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",46,0)
 I $G(HDISDOM)="" D  G ADDDOMQ
"RTN","HDISVF09",47,0)
 . S HDISERRM="Unable to Add Domain.  Required Variable Missing."
"RTN","HDISVF09",48,0)
 ;Check for existing Domain, return error and exit if it exists
"RTN","HDISVF09",49,0)
 I $D(^HDIS(7115.1,"B",HDISDOM)) D  G ADDDOMQ
"RTN","HDISVF09",50,0)
 . S HDISERRM="Domain already exists."
"RTN","HDISVF09",51,0)
 ;Set array for Domain Name
"RTN","HDISVF09",52,0)
 S HDISFDA(7115.1,"+1,",.01)=$G(HDISDOM)
"RTN","HDISVF09",53,0)
 D UPDATE^DIE("E","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF09",54,0)
 ;Check for error
"RTN","HDISVF09",55,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF09",56,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF09",57,0)
 ELSE  D
"RTN","HDISVF09",58,0)
 . S HDISDIEN=+$G(HDISIEN(1))
"RTN","HDISVF09",59,0)
 . S HDISOKF=1
"RTN","HDISVF09",60,0)
 D CLEAN^DILF
"RTN","HDISVF09",61,0)
 ;If Domain File/Field Array is passed, Add Domain File/Fields
"RTN","HDISVF09",62,0)
 I $G(HDISDIEN)>0,$D(HDISDFFS) S HDISOKF=$$ADDDFFS(HDISDIEN,.HDISDFFS,.HDISERRM)
"RTN","HDISVF09",63,0)
ADDDOMQ Q +$G(HDISOKF)
"RTN","HDISVF09",64,0)
 ;
"RTN","HDISVF09",65,0)
ADDDFFS(HDISDIEN,HDISDFFS,HDISERRM) ;Add Domain File/Fields
"RTN","HDISVF09",66,0)
 ; Input  -- HDISDIEN HDIS Domain file (#7115.1) IEN
"RTN","HDISVF09",67,0)
 ;           HDISDFFS Domain File/Field Array
"RTN","HDISVF09",68,0)
 ;                    Pass by HDISDFFS(File #)=Field # (Field # optional- Default .01)
"RTN","HDISVF09",69,0)
 ;                    Example: HDISDFFS(100.1)=""
"RTN","HDISVF09",70,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",71,0)
 ;           If Failure:
"RTN","HDISVF09",72,0)
 ;           HDISERRM  Error Message  (Optional)
"RTN","HDISVF09",73,0)
 N HDISCNT,HDISFARY,HDISFDA,HDISFFNM,HDISFIEN,HDISFILN,HDISFLDN,HDISIEN,HDISMSG,HDISOKF
"RTN","HDISVF09",74,0)
 ;Initialize output
"RTN","HDISVF09",75,0)
 S HDISERRM=""
"RTN","HDISVF09",76,0)
 ;Check for missing variables, exit if not defined
"RTN","HDISVF09",77,0)
 I $G(HDISDIEN)'>0!('$D(HDISDFFS)) D  G ADDDFFSQ
"RTN","HDISVF09",78,0)
 . S HDISERRM="Unable to Add Domain File/Fields.  Required Variable Missing."
"RTN","HDISVF09",79,0)
 ;Add a new File/Field Entry
"RTN","HDISVF09",80,0)
 S HDISFILN=0
"RTN","HDISVF09",81,0)
 F  S HDISFILN=$O(HDISDFFS(HDISFILN)) Q:'HDISFILN  D  G ADDDFFSQ:HDISERRM'=""
"RTN","HDISVF09",82,0)
 . ;Set Field Number to default of .01, if not defined
"RTN","HDISVF09",83,0)
 . S HDISFLDN=$S($G(HDISDFFS(HDISFILN))>0:$G(HDISDFFS(HDISFILN)),1:.01)
"RTN","HDISVF09",84,0)
 . I $$ADDFFNM^HDISVF05(HDISFILN,HDISFLDN,.HDISFIEN,.HDISERRM) D  Q:HDISERRM'=""
"RTN","HDISVF09",85,0)
 . . S HDISFARY(HDISFIEN)=""
"RTN","HDISVF09",86,0)
 . ELSE  D
"RTN","HDISVF09",87,0)
 . . ;Set error message, if unable to add file/field
"RTN","HDISVF09",88,0)
 . . S HDISERRM="Unable to Add File/Field "_HDISFILN_"~"_HDISFLDN_"."
"RTN","HDISVF09",89,0)
 ;
"RTN","HDISVF09",90,0)
 ;Set array for File/Field
"RTN","HDISVF09",91,0)
 S HDISFIEN=0
"RTN","HDISVF09",92,0)
 S HDISCNT=1
"RTN","HDISVF09",93,0)
 F  S HDISFIEN=$O(HDISFARY(HDISFIEN)) Q:'HDISFIEN  I $D(^HDIS(7115.6,HDISFIEN,0)) S HDISFFNM=$P(^(0),"^",1) D
"RTN","HDISVF09",94,0)
 . S HDISCNT=HDISCNT+1
"RTN","HDISVF09",95,0)
 . S HDISFDA(7115.11,"+"_HDISCNT_","_HDISDIEN_",",.01)=HDISFFNM
"RTN","HDISVF09",96,0)
 D UPDATE^DIE("E","HDISFDA","HDISIEN","HDISMSG")
"RTN","HDISVF09",97,0)
 ;Check for error
"RTN","HDISVF09",98,0)
 I $D(HDISMSG("DIERR")) D
"RTN","HDISVF09",99,0)
 . S HDISERRM=$G(HDISMSG("DIERR",1,"TEXT",1))
"RTN","HDISVF09",100,0)
 ELSE  D
"RTN","HDISVF09",101,0)
 . S HDISOKF=1
"RTN","HDISVF09",102,0)
ADDDFFSQ Q +$G(HDISOKF)
"RTN","HDISVF09",103,0)
 ;
"RTN","HDISVF09",104,0)
GETFILS(HDISDIEN,HDISCODE,HDISFILS) ;Get an Array of Files by Domain and Client Status Code
"RTN","HDISVF09",105,0)
 ; Input  -- HDISDIEN HDIS Domain file (#7115.1) IEN
"RTN","HDISVF09",106,0)
 ;           HDISCODE Client Status Code  (Optional- Default 0=Not Started for Client)
"RTN","HDISVF09",107,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",108,0)
 ;           If Successful:
"RTN","HDISVF09",109,0)
 ;           HDISFILS Array Subscripted by File # (i.e. HDISFILS(120.8)="")
"RTN","HDISVF09",110,0)
 N HDISFIEN,HDISFILN,HDISFLDN
"RTN","HDISVF09",111,0)
 ;Initialize ouput
"RTN","HDISVF09",112,0)
 K HDISFILS
"RTN","HDISVF09",113,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",114,0)
 I $G(HDISDIEN)'>0 G GETFILSQ
"RTN","HDISVF09",115,0)
 ;Set Status Code to default of 0=Not Started for Client, if needed
"RTN","HDISVF09",116,0)
 S HDISCODE=$S('$D(HDISCODE):0,1:HDISCODE)
"RTN","HDISVF09",117,0)
 ;Check Status of File/Fields and build array
"RTN","HDISVF09",118,0)
 S HDISFIEN=0
"RTN","HDISVF09",119,0)
 F  S HDISFIEN=$O(^HDIS(7115.1,HDISDIEN,"FILE","B",HDISFIEN)) Q:'HDISFIEN  D
"RTN","HDISVF09",120,0)
 . I $$GETFF^HDISVF05(HDISFIEN,.HDISFILN,.HDISFLDN),$P($$GETSTAT^HDISVF01(HDISFILN,HDISFLDN),"^",1)=HDISCODE D
"RTN","HDISVF09",121,0)
 . . S HDISFILS(HDISFILN)=""
"RTN","HDISVF09",122,0)
GETFILSQ Q +$S($D(HDISFILS):1,1:0)
"RTN","HDISVF09",123,0)
 ;
"RTN","HDISVF09",124,0)
GETIEN(HDISDOM,HDISDIEN) ;Get IEN for a Domain by Domain
"RTN","HDISVF09",125,0)
 ; Input  -- HDISDOM  Domain Name
"RTN","HDISVF09",126,0)
 ; Output -- 1=Successful and 0=Failure
"RTN","HDISVF09",127,0)
 ;           If Successful:
"RTN","HDISVF09",128,0)
 ;           HDISDIEN HDIS Domain file IEN
"RTN","HDISVF09",129,0)
 ;Initialize ouput
"RTN","HDISVF09",130,0)
 S HDISDIEN=""
"RTN","HDISVF09",131,0)
 ;Check for missing variable, exit if not defined
"RTN","HDISVF09",132,0)
 I $G(HDISDOM)="" G GETIENQ
"RTN","HDISVF09",133,0)
 ;Check for entry by Domain
"RTN","HDISVF09",134,0)
 S HDISDIEN=$O(^HDIS(7115.1,"B",HDISDOM,0))
"RTN","HDISVF09",135,0)
GETIENQ Q +$S($G(HDISDIEN)>0:1,1:0)
"RTN","HDISVF09",136,0)
 ;
"RTN","HDISVF09",137,0)
 ;---- End HDIS Domain file (#7115.1) API(s) ----
"RTN","HDISVF09",138,0)
 ;
"RTN","HDISVF09",139,0)
 ;Error processing utility
"RTN","HDISVF09",140,0)
 ;
"RTN","HDISVF09",141,0)
ERR(HDISP1,HDISP2,HDISP3) ;
"RTN","HDISVF09",142,0)
 ;;Input: HDISP1 - Network Name (parameter 1 of bulletin)
"RTN","HDISVF09",143,0)
 ;;       HDISP2 - Date/Time (parameter 2 of bulletin)
"RTN","HDISVF09",144,0)
 ;;       HDISP3 - Error Message (parameter 3 of bulletin)
"RTN","HDISVF09",145,0)
 ;;Output: None
"RTN","HDISVF09",146,0)
 ;;
"RTN","HDISVF09",147,0)
 N HDISP,HDISTASK,NAME,ERRARR,HDISE
"RTN","HDISVF09",148,0)
 S HDISE="" S ERRARR="HDISE",HDISE(1)=""
"RTN","HDISVF09",149,0)
 S HDISP(1)=HDISP1
"RTN","HDISVF09",150,0)
 S Y=HDISP2 D DD^%DT S HDISP(2)=Y
"RTN","HDISVF09",151,0)
 S HDISP(3)=HDISP3
"RTN","HDISVF09",152,0)
 S NAME="HDIS ERRORS"
"RTN","HDISVF09",153,0)
 S HDISFLAG("FROM")="HDIS DS Client"
"RTN","HDISVF09",154,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",155,0)
 I $G(XMERR) D
"RTN","HDISVF09",156,0)
 .;Error generating bulletin - log error text
"RTN","HDISVF09",157,0)
 .D ERR2XTMP^HDISVU01("HDI-XM","General error bulletin",$NA(^TMP("XMERR",$J)))
"RTN","HDISVF09",158,0)
 .K XMERR,^TMP("XMERR",$J)
"RTN","HDISVF09",159,0)
 Q
"RTN","HDISVF09",160,0)
 ;
"RTN","HDISVF09",161,0)
ERTBULL(HDISP1,HDISP2,HDISP3,HDISP4,HDISP5,HDISP6) ;
"RTN","HDISVF09",162,0)
 N ERRARR,HDISP,NAME,HDISFLAG,HDISTASK
"RTN","HDISVF09",163,0)
 S ERRARR=$NA(^TMP("HDIS ERRORS",$J)),^TMP("HDIS ERRORS",$J,1)=""
"RTN","HDISVF09",164,0)
 S HDISP(1)=HDISP1
"RTN","HDISVF09",165,0)
 S HDISP(2)=HDISP2
"RTN","HDISVF09",166,0)
 N Y S Y=HDISP3 D DD^%DT
"RTN","HDISVF09",167,0)
 S HDISP(3)=Y
"RTN","HDISVF09",168,0)
 S HDISP(4)=HDISP4
"RTN","HDISVF09",169,0)
 S HDISP(5)=HDISP5
"RTN","HDISVF09",170,0)
 S HDISP(6)=HDISP6
"RTN","HDISVF09",171,0)
 S NAME="HDIS NOTIFY ERT"
"RTN","HDISVF09",172,0)
 S HDISFLAG("FROM")="HDIS Data Standardization Server"
"RTN","HDISVF09",173,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",174,0)
 I $G(XMERR) D
"RTN","HDISVF09",175,0)
 .;Error generating bulletin - log error text
"RTN","HDISVF09",176,0)
 .D ERR2XTMP^HDISVU01("HDI-XM","ERT bulletin",$NA(^TMP("XMERR",$J)))
"RTN","HDISVF09",177,0)
 .K XMERR,^TMP("XMERR",$J)
"RTN","HDISVF09",178,0)
 Q
"RTN","HDISVF09",179,0)
 ;
"RTN","HDISVF09",180,0)
MFSUP(HDISFILE,HDISERR,HDISFN) ; Update status to complete and send HDR Bulletin
"RTN","HDISVF09",181,0)
 ;;Input: HDISFILE - File Number of file just updated  (Required)
"RTN","HDISVF09",182,0)
 ;;       HDISERR - Error indicator from MFS (1 or 0) (Required)
"RTN","HDISVF09",183,0)
 ;;       HDISFN - Field number (Optional)
"RTN","HDISVF09",184,0)
 ;;       
"RTN","HDISVF09",185,0)
 ;;Output: None
"RTN","HDISVF09",186,0)
 N HDISCODE,HDISARRY,HDISOUT,HDISNM,HDISMESS,FILE,HDISTASK,NAME,OOPS,SYSTYPE,TMP
"RTN","HDISVF09",187,0)
 S HDISCODE=$$GETSTAT^HDISVF01(HDISFILE)
"RTN","HDISVF09",188,0)
 S FILE=HDISFILE
"RTN","HDISVF09",189,0)
 Q:$P(HDISCODE,"^",1)'=4&($P(HDISCODE,"^",1)'=5)
"RTN","HDISVF09",190,0)
 S HDISARRY=$NA(^TMP("HDIS STATUS",$J))
"RTN","HDISVF09",191,0)
 I $G(HDISERR) S HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),"Error from MFS") S HDISOUT=$$BLDSND^HDISVCUT(HDISFILE,.01,5,$$NOW^XLFDT(),HDISARRY,"") D SETSTAT^HDISVF01(HDISFILE,.01,5,$$NOW^XLFDT()) Q
"RTN","HDISVF09",192,0)
 S HDISOUT=$$BLDSND^HDISVCUT(HDISFILE,.01,6,$$NOW^XLFDT(),HDISARRY,"")
"RTN","HDISVF09",193,0)
 I HDISOUT=0 S HDISMESS="Staus update to complete failed",HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),HDISMESS) Q
"RTN","HDISVF09",194,0)
 D SETSTAT^HDISVF01(HDISFILE,.01,6,$$NOW^XLFDT())
"RTN","HDISVF09",195,0)
 I HDISOUT=0 S HDISMESS="Staus update to complete failed",HDISNM=$G(^XMB("NETNAME")) D ERR^HDISVF09(HDISNM,$$NOW^XLFDT(),HDISMESS) Q
"RTN","HDISVF09",196,0)
 ;Notify HDR that triggers should be turned on
"RTN","HDISVF09",197,0)
 N FACPTR,FACNAME,FACNUM,DOMAIN,SYSTYP,FILENAME,HDISBDT
"RTN","HDISVF09",198,0)
 S OOPS=0
"RTN","HDISVF09",199,0)
 I '$$GETFAC^HDISVF07(,.FACPTR) S OOPS=1
"RTN","HDISVF09",200,0)
 I '$$GETDIP^HDISVF07(,.DOMAIN) S OOPS=1
"RTN","HDISVF09",201,0)
 I '$$GETTYPE^HDISVF07(,,.SYSTYPE) S OOPS=1
"RTN","HDISVF09",202,0)
 I OOPS=1 D
"RTN","HDISVF09",203,0)
 .S FACPTR=$$FACPTR^HDISVF01()
"RTN","HDISVF09",204,0)
 .S DOMAIN=$G(^XMB("NETNAME"))
"RTN","HDISVF09",205,0)
 .S SYSTYPE=$$PROD^XUPROD()
"RTN","HDISVF09",206,0)
 .S SYSTYPE=$S(SYSTYPE:"PRODUCTION",1:"TEST")
"RTN","HDISVF09",207,0)
 S TMP=$$NS^XUAF4(FACPTR)
"RTN","HDISVF09",208,0)
 S FACNAME=$P(TMP,"^",1)
"RTN","HDISVF09",209,0)
 S FACNUM=$P(TMP,"^",2)
"RTN","HDISVF09",210,0)
 I (FACNAME="")!(FACNUM="") D
"RTN","HDISVF09",211,0)
 .S TMP=$$SITE^VASITE()
"RTN","HDISVF09",212,0)
 .S FACNAME=$P(TMP,"^",2)
"RTN","HDISVF09",213,0)
 .S FACNUM=$P(TMP,"^",3)
"RTN","HDISVF09",214,0)
 S FACNAME=FACNAME_" (#"_FACNUM_") with Domain/IP Address "_DOMAIN
"RTN","HDISVF09",215,0)
 S FILENAME=$$GET1^DID(FILE,,,"NAME")
"RTN","HDISVF09",216,0)
 S FILENAME=FILENAME_" (#"_FILE_")"
"RTN","HDISVF09",217,0)
 S HDISBDT=$$NOW^XLFDT()
"RTN","HDISVF09",218,0)
 S ERRARR=$NA(^TMP("HDIS ERRORS",$J)),^TMP("HDIS ERRORS",$J,1)=""
"RTN","HDISVF09",219,0)
 N HDISP
"RTN","HDISVF09",220,0)
 S HDISP(1)=FACNAME
"RTN","HDISVF09",221,0)
 S HDISP(2)=FILENAME
"RTN","HDISVF09",222,0)
 N Y S Y=$$NOW^XLFDT() D DD^%DT
"RTN","HDISVF09",223,0)
 S HDISP(3)=Y
"RTN","HDISVF09",224,0)
 S HDISP(4)=SYSTYPE
"RTN","HDISVF09",225,0)
 S HDISP(5)=FACNUM
"RTN","HDISVF09",226,0)
 S HDISP(6)=FILE
"RTN","HDISVF09",227,0)
 S NAME="HDIS NOTIFY HDR"
"RTN","HDISVF09",228,0)
 S HDISFLAG("FROM")="HDIS Data Standardization Server"
"RTN","HDISVF09",229,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISP,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVF09",230,0)
 I $G(XMERR) D
"RTN","HDISVF09",231,0)
 .;Error generating bulletin - log error text
"RTN","HDISVF09",232,0)
 .D ERR2XTMP^HDISVU01("HDI-XM","HDR bulletin",$NA(^TMP("XMERR",$J)))
"RTN","HDISVF09",233,0)
 .K XMERR,^TMP("XMERR",$J)
"RTN","HDISVF09",234,0)
 Q
"RTN","HDISVM00")
0^2^B4708917^B3587426
"RTN","HDISVM00",1,0)
HDISVM00 ;BPFO/JRP - SERVER TO RECEIVE XML MESSAGE;1/4/2005
"RTN","HDISVM00",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**6**;Feb 22, 2005
"RTN","HDISVM00",3,0)
 ;
"RTN","HDISVM00",4,0)
XML ;Main entry point for XML server options
"RTN","HDISVM00",5,0)
 ; Input: (As defined by MailMan and Kernel)
"RTN","HDISVM00",6,0)
 ;        XMREC - Executable code to "read" next line of message
"RTN","HDISVM00",7,0)
 ;        XQSUB - Subject of received message
"RTN","HDISVM00",8,0)
 ;        XQSOP - Server option name
"RTN","HDISVM00",9,0)
 ;        XQMSG,XMZ - Msg IEN in file 3.9
"RTN","HDISVM00",10,0)
 ;        XQSND,XMFROM - Msg sender
"RTN","HDISVM00",11,0)
 ;Output: None
"RTN","HDISVM00",12,0)
 ;  Note: Input is not checked (assumes existence)
"RTN","HDISVM00",13,0)
 ;
"RTN","HDISVM00",14,0)
 N XMLARR,PRSARR,ERRARR,STOP,LINE,TYPE
"RTN","HDISVM00",15,0)
 ;Establish temporary globals
"RTN","HDISVM00",16,0)
 S XMLARR=$NA(^TMP(XQSOP,$J,"XML"))
"RTN","HDISVM00",17,0)
 S PRSARR=$NA(^TMP(XQSOP,$J,"PARSED"))
"RTN","HDISVM00",18,0)
 S ERRARR=$NA(^TMP(XQSOP,$J,"ERROR"))
"RTN","HDISVM00",19,0)
 K @XMLARR,@PRSARR,@ERRARR
"RTN","HDISVM00",20,0)
 ;Copy message to temporary global
"RTN","HDISVM00",21,0)
 S STOP=0
"RTN","HDISVM00",22,0)
 F LINE=1:1 D  Q:STOP
"RTN","HDISVM00",23,0)
 .X XMREC
"RTN","HDISVM00",24,0)
 .I $D(XMER) I (XMER<0) S STOP=1 Q
"RTN","HDISVM00",25,0)
 .S @XMLARR@(LINE)=XMRG
"RTN","HDISVM00",26,0)
 ;Parse message
"RTN","HDISVM00",27,0)
 D SAX^HDISVM01(XMLARR,PRSARR)
"RTN","HDISVM00",28,0)
 ;Get type of system out of parameter file
"RTN","HDISVM00",29,0)
 S TYPE=+$$GETTYPE^HDISVF02()
"RTN","HDISVM00",30,0)
 ;Process messages on centralized server
"RTN","HDISVM00",31,0)
 I TYPE=2 D MAIN^HDISVS00(PRSARR,ERRARR)
"RTN","HDISVM00",32,0)
 ;Process messages on VistA (client) system
"RTN","HDISVM00",33,0)
 I TYPE=1 D MAIN^HDISVC00(PRSARR,ERRARR)
"RTN","HDISVM00",34,0)
 ;Error(s) occurred
"RTN","HDISVM00",35,0)
 I $D(@ERRARR) D
"RTN","HDISVM00",36,0)
 .;Send error message
"RTN","HDISVM00",37,0)
 .D ERROR(ERRARR,XQMSG,XQSOP,XMFROM)
"RTN","HDISVM00",38,0)
 .;Set message status
"RTN","HDISVM00",39,0)
 .S X=$$SRVTIME^XMS1(XQMSG,"S."_XQSOP,"ERROR FOUND DURING PROCESSING")
"RTN","HDISVM00",40,0)
 ;Delete message (don't delete if errors found)
"RTN","HDISVM00",41,0)
 I '$D(@ERRARR) D ZAPSERV^XMXAPI("S."_XQSOP,XQMSG)
"RTN","HDISVM00",42,0)
 ;Done
"RTN","HDISVM00",43,0)
 K @XMLARR,@PRSARR,@ERRARR
"RTN","HDISVM00",44,0)
 Q
"RTN","HDISVM00",45,0)
 ;
"RTN","HDISVM00",46,0)
ERROR(ERRARR,MSGNUM,SRVR,SNDR) ;Send error message
"RTN","HDISVM00",47,0)
 ; Input : ERRARR - Error array (closed root)
"RTN","HDISVM00",48,0)
 ;         MSGNUM - Message number of received message (XMZ)
"RTN","HDISVM00",49,0)
 ;         SRVR - Name of server option (XQSOP)
"RTN","HDISVM00",50,0)
 ;         SNDR - Sender of message (XMFROM)
"RTN","HDISVM00",51,0)
 ;Output : None
"RTN","HDISVM00",52,0)
 ; Notes : Existance/validity of input assumed (internal call)
"RTN","HDISVM00",53,0)
 N NAME,HDISPRAM,HDISFLAG,HDISTASK
"RTN","HDISVM00",54,0)
 ;Set bulletin parameters
"RTN","HDISVM00",55,0)
 S HDISPRAM(1)=MSGNUM
"RTN","HDISVM00",56,0)
 S HDISPRAM(2)=SNDR
"RTN","HDISVM00",57,0)
 S HDISPRAM(3)=SRVR
"RTN","HDISVM00",58,0)
 ;Send bulletin
"RTN","HDISVM00",59,0)
 S NAME="HDIS XML MSG PROCESS ERROR"
"RTN","HDISVM00",60,0)
 S HDISFLAG("FROM")="HDIS XML MESSAGE SERVER"
"RTN","HDISVM00",61,0)
 D TASKBULL^XMXAPI(DUZ,NAME,.HDISPRAM,ERRARR,,.HDISFLAG,.HDISTASK)
"RTN","HDISVM00",62,0)
 I $G(XMERR) D
"RTN","HDISVM00",63,0)
 .;Error generating bulletin - log error text
"RTN","HDISVM00",64,0)
 .D ERR2XTMP^HDISVU01("HDI-XM","Server error bulletin",$NA(^TMP("XMERR",$J)))
"RTN","HDISVM00",65,0)
 .K XMERR,^TMP("XMERR",$J)
"RTN","HDISVM00",66,0)
 Q
"RTN","HDISVM02")
0^3^B7192540^B6106835
"RTN","HDISVM02",1,0)
HDISVM02 ;;CT/GRR SEND MESSAGE ; 02 Mar 2005  4:25 PM
"RTN","HDISVM02",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**6**;Feb 22, 2005
"RTN","HDISVM02",3,0)
 ;
"RTN","HDISVM02",4,0)
SNDXML(ARRY,SRVR,HDISINP,SYSPTR) ;Send XML document to server
"RTN","HDISVM02",5,0)
 ; Input: ARRY - Array containing XML document (closed root)
"RTN","HDISVM02",6,0)
 ;        SRVR - 1 = VUID Server, 2 = Status Update Server
"RTN","HDISVM02",7,0)
 ;        HDISINP - Array containing additional info (closed root) (optional)
"RTN","HDISVM02",8,0)
 ;                  @HDISINP@(variable) = Value
"RTN","HDISVM02",9,0)
 ;                  @HDISINP@(array,subscript) = Value
"RTN","HDISVM02",10,0)
 ;                  @HDISINP@(array,subscript_1,subscript_2,...) = Value
"RTN","HDISVM02",11,0)
 ;                  
"RTN","HDISVM02",12,0)
 ;                  Example:
"RTN","HDISVM02",13,0)
 ;                    @HDISINP@("TEST1")=1
"RTN","HDISVM02",14,0)
 ;                    @HDISINP@("TEST2")=2
"RTN","HDISVM02",15,0)
 ;                    @HDISINP@("TEST2","SUB1")="2A"
"RTN","HDISVM02",16,0)
 ;                    @HDISINP@("TEST3","SUB1","SUB2")="3B"
"RTN","HDISVM02",17,0)
 ;                  
"RTN","HDISVM02",18,0)
 ;                  Results in the following variables/arrays being set:
"RTN","HDISVM02",19,0)
 ;                    TEST1=1
"RTN","HDISVM02",20,0)
 ;                    TEST2=2
"RTN","HDISVM02",21,0)
 ;                    TEST2("SUB1")="2A"
"RTN","HDISVM02",22,0)
 ;                    TEST3("SUB1","SUB2")="3B"
"RTN","HDISVM02",23,0)
 ;        SYSPTR - Pointer to HDIS System file (optional)
"RTN","HDISVM02",24,0)
 ;                 If passed, the destination information is obtained
"RTN","HDISVM02",25,0)
 ;                 from the HDIS Parameter file entry for the referenced
"RTN","HDISVM02",26,0)
 ;                 system.  By default, the destination information is
"RTN","HDISVM02",27,0)
 ;                 pulled from the HDIS Parameter entry for the current
"RTN","HDISVM02",28,0)
 ;                 system (which contains the destination information for
"RTN","HDISVM02",29,0)
 ;                 the centrally located server)
"RTN","HDISVM02",30,0)
 ;Output: None
"RTN","HDISVM02",31,0)
 ;        XML document sent to Data Standardization server option
"RTN","HDISVM02",32,0)
 ;        at given MailMan domain
"RTN","HDISVM02",33,0)
 ;
"RTN","HDISVM02",34,0)
 I ARRY=""!(SRVR="") Q "0^Required parameter missing"
"RTN","HDISVM02",35,0)
 I SRVR'=1&(SRVR'=2) Q "0^SRVR Parameter invalid"
"RTN","HDISVM02",36,0)
 N SUBJECT,HDITO,HDINSTR,HDIXMZ,SERVER,SRVTYP,MAXLIN,SRVROPT
"RTN","HDISVM02",37,0)
 S SYSPTR=+$G(SYSPTR)
"RTN","HDISVM02",38,0)
 I 'SYSPTR K SYSPTR I '$$CURSYS^HDISVF07(.SYSPTR) Q "0^Unable to determine current system"
"RTN","HDISVM02",39,0)
 ;Get location information for VUID Server
"RTN","HDISVM02",40,0)
 I SRVR=1 D
"RTN","HDISVM02",41,0)
 .S SERVER=$$GETVLOC^HDISVF02(SYSPTR)
"RTN","HDISVM02",42,0)
 .S SRVTYP=$$GETVCON^HDISVF02(SYSPTR)
"RTN","HDISVM02",43,0)
 .S SRVROPT=$$GETVSRV^HDISVF02(SYSPTR)
"RTN","HDISVM02",44,0)
 ;Get location information for Status Server
"RTN","HDISVM02",45,0)
 I SRVR=2 D
"RTN","HDISVM02",46,0)
 .S SERVER=$$GETSLOC^HDISVF03(SYSPTR)
"RTN","HDISVM02",47,0)
 .S SRVTYP=$$GETSCON^HDISVF03(SYSPTR)
"RTN","HDISVM02",48,0)
 .S SRVROPT=$$GETSSRV^HDISVF03(SYSPTR)
"RTN","HDISVM02",49,0)
 ;Instantiate variables included in input array
"RTN","HDISVM02",50,0)
 I $G(HDISINP)]"" D
"RTN","HDISVM02",51,0)
 .N ROOT,RSCNT,NODE,NSCNT,TROOT
"RTN","HDISVM02",52,0)
 .S ROOT=$$OREF^DILF(HDISINP)
"RTN","HDISVM02",53,0)
 .S RSCNT=$QL(HDISINP)
"RTN","HDISVM02",54,0)
 .S NODE=HDISINP
"RTN","HDISVM02",55,0)
 .F  S NODE=$Q(@NODE) Q:(NODE="")!(NODE'[ROOT)  I $D(@NODE)#2 D
"RTN","HDISVM02",56,0)
 ..S NSCNT=$QL(NODE)
"RTN","HDISVM02",57,0)
 ..I (NSCNT-RSCNT)=1 S @$QS(NODE,NSCNT)=$G(@NODE) Q
"RTN","HDISVM02",58,0)
 ..S TROOT=$QS(NODE,RSCNT+1)_"("_$P(NODE,",",RSCNT+2,NSCNT)
"RTN","HDISVM02",59,0)
 ..S @TROOT=$G(@NODE)
"RTN","HDISVM02",60,0)
 ;Set message subject
"RTN","HDISVM02",61,0)
 I $G(SUBJECT)="" S SUBJECT="XML FORMATTED DATA FROM "_$P($$SITE^VASITE(),"^",2)
"RTN","HDISVM02",62,0)
 ;Set message sender
"RTN","HDISVM02",63,0)
 S HDINSTR("FROM")="Data Standardization Toolset"
"RTN","HDISVM02",64,0)
 ;Set recipient list (includes server option on target server)
"RTN","HDISVM02",65,0)
 N HDITO
"RTN","HDISVM02",66,0)
 I SERVER="" S HDITO("S."_SRVROPT)=""
"RTN","HDISVM02",67,0)
 I SERVER'="" S HDITO("S."_SRVROPT_"@"_SERVER)=""
"RTN","HDISVM02",68,0)
 ;Send message to target server
"RTN","HDISVM02",69,0)
 D SENDMSG^XMXAPI(DUZ,SUBJECT,ARRY,.HDITO,.HDINSTR,.HDIXMZ)
"RTN","HDISVM02",70,0)
 I $G(XMERR) D
"RTN","HDISVM02",71,0)
 .;Error sending message - log error text
"RTN","HDISVM02",72,0)
 .D ERR2XTMP^HDISVU01("HDI-XM","Message sending",$NA(^TMP("XMERR",$J)))
"RTN","HDISVM02",73,0)
 .K XMERR,^TMP("XMERR",$J)
"RTN","HDISVM02",74,0)
 Q 1
"RTN","HDISVM02",75,0)
 ;
"RTN","HDISVU01")
0^4^B3808363^B1879599
"RTN","HDISVU01",1,0)
HDISVU01 ;BPFO/JRP - UTILITY CALLS;12/21/2004
"RTN","HDISVU01",2,0)
 ;;1.0;HEALTH DATA & INFORMATICS;**6**;Feb 22, 2005
"RTN","HDISVU01",3,0)
 ;
"RTN","HDISVU01",4,0)
XMLTFM(XMLDT,LTZ) ;Convert XML date/time to FM date/time
"RTN","HDISVU01",5,0)
 ; Input : XMLDT - XML date/time
"RTN","HDISVU01",6,0)
 ;         LTZ - Flag indicating if time should be converted to local
"RTN","HDISVU01",7,0)
 ;               time (XML d/t contains time zone designation)
"RTN","HDISVU01",8,0)
 ;               0 = No (default)     1 = Yes
"RTN","HDISVU01",9,0)
 ;Output : Date/time in FileMan format
"RTN","HDISVU01",10,0)
 ; Notes : Null ("") returned on error
"RTN","HDISVU01",11,0)
 N HL7DT,FMDT
"RTN","HDISVU01",12,0)
 S XMLDT=$G(XMLDT)
"RTN","HDISVU01",13,0)
 I XMLDT="" Q ""
"RTN","HDISVU01",14,0)
 S LTZ=+$G(LTZ)
"RTN","HDISVU01",15,0)
 S LTZ=$S(LTZ:"L",1:"U")
"RTN","HDISVU01",16,0)
 ;Convert to HL7 format
"RTN","HDISVU01",17,0)
 S HL7DT=$TR($P(XMLDT,"T",1),"-")_$TR($P(XMLDT,"T",2),":")
"RTN","HDISVU01",18,0)
 ;Convert HL7 format to FileMan format
"RTN","HDISVU01",19,0)
 S FMDT=$$HL7TFM^XLFDT(HL7DT,LTZ)
"RTN","HDISVU01",20,0)
 I FMDT=-1 S FMDT=""
"RTN","HDISVU01",21,0)
 Q FMDT
"RTN","HDISVU01",22,0)
 ;
"RTN","HDISVU01",23,0)
FMTXML(FMDT,NOTIME,MIDNIGHT) ;Convert FM date/time to XML date/time
"RTN","HDISVU01",24,0)
 ; Input : FMDT - FileMan date/time
"RTN","HDISVU01",25,0)
 ;         NOTIME - Flag indicating if time shouldn't be included
"RTN","HDISVU01",26,0)
 ;                  0 = No (include time)(default)   1 = Yes (no time)
"RTN","HDISVU01",27,0)
 ;         MIDNIGHT - Flag indicating if midnight should be used when
"RTN","HDISVU01",28,0)
 ;                    no time is passed in
"RTN","HDISVU01",29,0)
 ;                    0 = No (leave as is)(default)     1 = Yes
"RTN","HDISVU01",30,0)
 ;Output : Date/time in XML format
"RTN","HDISVU01",31,0)
 ; Notes : Null ("") returned on error
"RTN","HDISVU01",32,0)
 N XTRNDT,XMLDT,FLAG
"RTN","HDISVU01",33,0)
 S NOTIME=+$G(NOTIME)
"RTN","HDISVU01",34,0)
 S MIDNIGHT=+$G(MIDNIGHT)
"RTN","HDISVU01",35,0)
 I $P(FMDT,".",2)="" I 'MIDNIGHT S NOTIME=1
"RTN","HDISVU01",36,0)
 I $P(FMDT,".",2)?1."0" I 'NOTIME S MIDNIGHT=1
"RTN","HDISVU01",37,0)
 ;No time overrides midnight addition
"RTN","HDISVU01",38,0)
 I NOTIME S MIDNIGHT=0
"RTN","HDISVU01",39,0)
 ;Drop time
"RTN","HDISVU01",40,0)
 S FLAG=$S(NOTIME:"7FD",1:"7FS")
"RTN","HDISVU01",41,0)
 ;Convert
"RTN","HDISVU01",42,0)
 S XTRNDT=$$FMTE^XLFDT(FMDT,FLAG)
"RTN","HDISVU01",43,0)
 ;Append midnight
"RTN","HDISVU01",44,0)
 I MIDNIGHT I $P(XTRNDT,"@",2)="" S $P(XTRNDT,"@",2)="00:00:00"
"RTN","HDISVU01",45,0)
 S XMLDT=$TR(XTRNDT,"@ /","T0-")
"RTN","HDISVU01",46,0)
 I 'NOTIME S XMLDT=XMLDT_$$TZ^XLFDT()
"RTN","HDISVU01",47,0)
 Q XMLDT
"RTN","HDISVU01",48,0)
 ;
"RTN","HDISVU01",49,0)
ERR2XTMP(NODE,DESC,TEXTARR) ;Add error info to XTMP global
"RTN","HDISVU01",50,0)
 ; Input : NODE - Namespaced node name to store info off of
"RTN","HDISVU01",51,0)
 ;                (Defaults to "HDI")
"RTN","HDISVU01",52,0)
 ;         DESC - Error description (short text)
"RTN","HDISVU01",53,0)
 ;         TEXTARR - Array containing error text (full global ref)
"RTN","HDISVU01",54,0)
 ;Output : None
"RTN","HDISVU01",55,0)
 ; Notes : Sets the following nodes in XTMP
"RTN","HDISVU01",56,0)
 ;           ^XTMP(NODE,0) = Purge Date (T+10) ^ Create Date (NOW)
"RTN","HDISVU01",57,0)
 ;                           ^ "HDI software issues"
"RTN","HDISVU01",58,0)
 ;           ^XTMP(NODE,x,0) = Create Date (NOW) ^ DESC
"RTN","HDISVU01",59,0)
 ;           ^XTMP(NODE,x,"ERR") = TEXTARR
"RTN","HDISVU01",60,0)
 S NODE=$G(NODE)
"RTN","HDISVU01",61,0)
 S:NODE="" NODE="HDI"
"RTN","HDISVU01",62,0)
 S DESC=$G(DESC)
"RTN","HDISVU01",63,0)
 S TEXTARR=$G(TEXTARR)
"RTN","HDISVU01",64,0)
 N CDATE,PDATE,SUB
"RTN","HDISVU01",65,0)
 ;Set main node in XTMP
"RTN","HDISVU01",66,0)
 S CDATE=$$NOW^XLFDT()
"RTN","HDISVU01",67,0)
 S PDATE=$$FMADD^XLFDT(CDATE,10)
"RTN","HDISVU01",68,0)
 S ^XTMP(NODE,0)=PDATE_"^"_CDATE_"^HDI software issues"
"RTN","HDISVU01",69,0)
 ;Get next error node
"RTN","HDISVU01",70,0)
 S SUB=1+$O(^XTMP(NODE,""),-1)
"RTN","HDISVU01",71,0)
 ;Set main error node
"RTN","HDISVU01",72,0)
 S ^XTMP(NODE,SUB,0)=CDATE_"^"_DESC
"RTN","HDISVU01",73,0)
 ;Store error text
"RTN","HDISVU01",74,0)
 I TEXTARR'="" M ^XTMP(NODE,SUB,"TXT")=@TEXTARR
"RTN","HDISVU01",75,0)
 ;Done
"RTN","HDISVU01",76,0)
 Q
"VER")
8.0^22.0
"BLD",5536,6)
^3
**END**
**END**
