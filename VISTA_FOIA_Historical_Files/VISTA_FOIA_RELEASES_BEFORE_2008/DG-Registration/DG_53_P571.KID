KIDS Distribution saved on Jul 28, 2004@15:06:53
VETERAN ID CARD (VIC) REPLACEMENT DG*5.3*571 (7/28/04)
**KIDS**:DG*5.3*571^

**INSTALL NAME**
DG*5.3*571
"BLD",4667,0)
DG*5.3*571^REGISTRATION^0^3040728^y
"BLD",4667,1,0)
^^2^2^3040601^^
"BLD",4667,1,1,0)
Please refer to patch DG*5.3*571 in the National Patch Module for a 
"BLD",4667,1,2,0)
complete description of this patch.
"BLD",4667,4,0)
^9.64PA^39.7^2
"BLD",4667,4,39.6,0)
39.6
"BLD",4667,4,39.6,222)
y^n^f^^^^n
"BLD",4667,4,39.7,0)
39.7
"BLD",4667,4,39.7,222)
y^n^f^^^^n
"BLD",4667,4,"B",39.6,39.6)

"BLD",4667,4,"B",39.7,39.7)

"BLD",4667,"INIT")
POST^DG53P571
"BLD",4667,"KRN",0)
^9.67PA^8989.52^19
"BLD",4667,"KRN",.4,0)
.4
"BLD",4667,"KRN",.4,"NM",0)
^9.68A^^
"BLD",4667,"KRN",.401,0)
.401
"BLD",4667,"KRN",.402,0)
.402
"BLD",4667,"KRN",.403,0)
.403
"BLD",4667,"KRN",.5,0)
.5
"BLD",4667,"KRN",.84,0)
.84
"BLD",4667,"KRN",3.6,0)
3.6
"BLD",4667,"KRN",3.6,"NM",0)
^9.68A^1^1
"BLD",4667,"KRN",3.6,"NM",1,0)
DGQE HL7ERR^^0
"BLD",4667,"KRN",3.6,"NM","B","DGQE HL7ERR",1)

"BLD",4667,"KRN",3.8,0)
3.8
"BLD",4667,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",4667,"KRN",3.8,"NM",1,0)
DGQE HL7 TRANSMISSION ERRORS^^0
"BLD",4667,"KRN",3.8,"NM","B","DGQE HL7 TRANSMISSION ERRORS",1)

"BLD",4667,"KRN",9.2,0)
9.2
"BLD",4667,"KRN",9.8,0)
9.8
"BLD",4667,"KRN",9.8,"NM",0)
^9.68A^21^17
"BLD",4667,"KRN",9.8,"NM",1,0)
DGQEDEMO^^0^B29593939
"BLD",4667,"KRN",9.8,"NM",2,0)
DGQERPC^^0^B11667506
"BLD",4667,"KRN",9.8,"NM",5,0)
DGQEHLL^^0^B11701600
"BLD",4667,"KRN",9.8,"NM",6,0)
DGQEHLS^^0^B12241827
"BLD",4667,"KRN",9.8,"NM",9,0)
DGQEHLR^^0^B22790856
"BLD",4667,"KRN",9.8,"NM",10,0)
DGQEHLOR^^0^B8348816
"BLD",4667,"KRN",9.8,"NM",11,0)
DGQEHLUT^^0^B16767022
"BLD",4667,"KRN",9.8,"NM",12,0)
DGQEUT1^^0^B12941593
"BLD",4667,"KRN",9.8,"NM",13,0)
DGQEUT2^^0^B39493646
"BLD",4667,"KRN",9.8,"NM",14,0)
DGQEUT3^^0^B14825619
"BLD",4667,"KRN",9.8,"NM",15,0)
DG53P571^^0^B2872044
"BLD",4667,"KRN",9.8,"NM",16,0)
DGQEDD^^0^B489403
"BLD",4667,"KRN",9.8,"NM",17,0)
DGQEBGR^^0^B13847819
"BLD",4667,"KRN",9.8,"NM",18,0)
DGQEREQ^^0^B15944716
"BLD",4667,"KRN",9.8,"NM",19,0)
DGQEHLRQ^^0^B4995351
"BLD",4667,"KRN",9.8,"NM",20,0)
DGPLBL^^0^B27915761
"BLD",4667,"KRN",9.8,"NM",21,0)
DGPLBL1^^0^B3901773
"BLD",4667,"KRN",9.8,"NM","B","DG53P571",15)

"BLD",4667,"KRN",9.8,"NM","B","DGPLBL",20)

"BLD",4667,"KRN",9.8,"NM","B","DGPLBL1",21)

"BLD",4667,"KRN",9.8,"NM","B","DGQEBGR",17)

"BLD",4667,"KRN",9.8,"NM","B","DGQEDD",16)

"BLD",4667,"KRN",9.8,"NM","B","DGQEDEMO",1)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLL",5)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLOR",10)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLR",9)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLRQ",19)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLS",6)

"BLD",4667,"KRN",9.8,"NM","B","DGQEHLUT",11)

"BLD",4667,"KRN",9.8,"NM","B","DGQEREQ",18)

"BLD",4667,"KRN",9.8,"NM","B","DGQERPC",2)

"BLD",4667,"KRN",9.8,"NM","B","DGQEUT1",12)

"BLD",4667,"KRN",9.8,"NM","B","DGQEUT2",13)

"BLD",4667,"KRN",9.8,"NM","B","DGQEUT3",14)

"BLD",4667,"KRN",19,0)
19
"BLD",4667,"KRN",19,"NM",0)
^9.68A^4^4
"BLD",4667,"KRN",19,"NM",1,0)
DGQE VIC RPCS^^0
"BLD",4667,"KRN",19,"NM",2,0)
DGQE BACKGROUND PROCESSING^^0
"BLD",4667,"KRN",19,"NM",3,0)
DG PRINT PATIENT LABEL^^0
"BLD",4667,"KRN",19,"NM",4,0)
DG OUTPUTS MENU^^2
"BLD",4667,"KRN",19,"NM","B","DG OUTPUTS MENU",4)

"BLD",4667,"KRN",19,"NM","B","DG PRINT PATIENT LABEL",3)

"BLD",4667,"KRN",19,"NM","B","DGQE BACKGROUND PROCESSING",2)

"BLD",4667,"KRN",19,"NM","B","DGQE VIC RPCS",1)

"BLD",4667,"KRN",19.1,0)
19.1
"BLD",4667,"KRN",101,0)
101
"BLD",4667,"KRN",101,"NM",0)
^9.68A^2^2
"BLD",4667,"KRN",101,"NM",1,0)
DGQE VIC ORM/O01 EVENT^^0
"BLD",4667,"KRN",101,"NM",2,0)
DGQE VIC ORR/O02 SUBSC^^0
"BLD",4667,"KRN",101,"NM","B","DGQE VIC ORM/O01 EVENT",1)

"BLD",4667,"KRN",101,"NM","B","DGQE VIC ORR/O02 SUBSC",2)

"BLD",4667,"KRN",409.61,0)
409.61
"BLD",4667,"KRN",771,0)
771
"BLD",4667,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",4667,"KRN",771,"NM",1,0)
VIC NCMD RECV^^0
"BLD",4667,"KRN",771,"NM",2,0)
VIC NCMD SEND^^0
"BLD",4667,"KRN",771,"NM","B","VIC NCMD RECV",1)

"BLD",4667,"KRN",771,"NM","B","VIC NCMD SEND",2)

"BLD",4667,"KRN",870,0)
870
"BLD",4667,"KRN",870,"NM",0)
^9.68A^1^1
"BLD",4667,"KRN",870,"NM",1,0)
VIC NCMD^^0
"BLD",4667,"KRN",870,"NM","B","VIC NCMD",1)

"BLD",4667,"KRN",8989.51,0)
8989.51
"BLD",4667,"KRN",8989.51,"NM",0)
^9.68A^2^2
"BLD",4667,"KRN",8989.51,"NM",1,0)
DGQE VIC REQUEST EXPIRATION^^0
"BLD",4667,"KRN",8989.51,"NM",2,0)
DGQE VIC REQUEST PURGE^^0
"BLD",4667,"KRN",8989.51,"NM","B","DGQE VIC REQUEST EXPIRATION",1)

"BLD",4667,"KRN",8989.51,"NM","B","DGQE VIC REQUEST PURGE",2)

"BLD",4667,"KRN",8989.52,0)
8989.52
"BLD",4667,"KRN",8994,0)
8994
"BLD",4667,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",4667,"KRN",8994,"NM",1,0)
DGQE GET PATIENT DEMO^^0
"BLD",4667,"KRN",8994,"NM",2,0)
DGQE SET CARD ID^^0
"BLD",4667,"KRN",8994,"NM","B","DGQE GET PATIENT DEMO",1)

"BLD",4667,"KRN",8994,"NM","B","DGQE SET CARD ID",2)

"BLD",4667,"KRN","B",.4,.4)

"BLD",4667,"KRN","B",.401,.401)

"BLD",4667,"KRN","B",.402,.402)

"BLD",4667,"KRN","B",.403,.403)

"BLD",4667,"KRN","B",.5,.5)

"BLD",4667,"KRN","B",.84,.84)

"BLD",4667,"KRN","B",3.6,3.6)

"BLD",4667,"KRN","B",3.8,3.8)

"BLD",4667,"KRN","B",9.2,9.2)

"BLD",4667,"KRN","B",9.8,9.8)

"BLD",4667,"KRN","B",19,19)

"BLD",4667,"KRN","B",19.1,19.1)

"BLD",4667,"KRN","B",101,101)

"BLD",4667,"KRN","B",409.61,409.61)

"BLD",4667,"KRN","B",771,771)

"BLD",4667,"KRN","B",870,870)

"BLD",4667,"KRN","B",8989.51,8989.51)

"BLD",4667,"KRN","B",8989.52,8989.52)

"BLD",4667,"KRN","B",8994,8994)

"BLD",4667,"PRE")
DG53P571
"BLD",4667,"QUES",0)
^9.62^^
"BLD",4667,"REQB",0)
^9.611^2^2
"BLD",4667,"REQB",1,0)
XU*8.0*205^1
"BLD",4667,"REQB",2,0)
OR*3.0*187^1
"BLD",4667,"REQB","B","OR*3.0*187",2)

"BLD",4667,"REQB","B","XU*8.0*205",1)

"FIA",39.6)
VIC REQUEST
"FIA",39.6,0)
^DGQE(39.6,
"FIA",39.6,0,0)
39.6
"FIA",39.6,0,1)
y^n^f^^^^n
"FIA",39.6,0,10)

"FIA",39.6,0,11)

"FIA",39.6,0,"RLRO")

"FIA",39.6,0,"VR")
5.3^DG
"FIA",39.6,39.6)
0
"FIA",39.7)
VIC HL7 TRANSMISSION LOG
"FIA",39.7,0)
^DGQE(39.7,
"FIA",39.7,0,0)
39.7
"FIA",39.7,0,1)
y^n^f^^^^n
"FIA",39.7,0,10)

"FIA",39.7,0,11)

"FIA",39.7,0,"RLRO")

"FIA",39.7,0,"VR")
5.3^DG
"FIA",39.7,39.7)
0
"INIT")
POST^DG53P571
"IX",39.6,39.6,"APDAT",0)
39.6^APDAT^Index Patient and Request Date^R^^R^IR^I^39.6^^^^^S
"IX",39.6,39.6,"APDAT",1)
S ^DGQE(39.6,"APDAT",X(1),X(2),DA)=""
"IX",39.6,39.6,"APDAT",2)
K ^DGQE(39.6,"APDAT",X(1),X(2),DA)
"IX",39.6,39.6,"APDAT",2.5)
K ^DGQE(39.6,"APDAT")
"IX",39.6,39.6,"APDAT",11.1,0)
^.114IA^2^2
"IX",39.6,39.6,"APDAT",11.1,1,0)
1^F^39.6^.02^^1^F
"IX",39.6,39.6,"APDAT",11.1,1,3)

"IX",39.6,39.6,"APDAT",11.1,2,0)
2^F^39.6^.04^^2^F
"IX",39.6,39.6,"APDAT",11.1,2,3)

"IX",39.6,39.6,"ASTAT",0)
39.6^ASTAT^Index the Card Print Release Status and Request Date/Time^R^^R^IR^I^39.6^^^^^S
"IX",39.6,39.6,"ASTAT",1)
S ^DGQE(39.6,"ASTAT",X(1),X(2),DA)=""
"IX",39.6,39.6,"ASTAT",2)
K ^DGQE(39.6,"ASTAT",X(1),X(2),DA)
"IX",39.6,39.6,"ASTAT",2.5)
K ^DGQE(39.6,"ASTAT")
"IX",39.6,39.6,"ASTAT",11.1,0)
^.114IA^2^2
"IX",39.6,39.6,"ASTAT",11.1,1,0)
1^F^39.6^.03^^1^F
"IX",39.6,39.6,"ASTAT",11.1,1,3)

"IX",39.6,39.6,"ASTAT",11.1,2,0)
2^F^39.6^.04^^2^F
"IX",39.6,39.6,"ASTAT",11.1,2,3)

"IX",39.6,39.6,"ASTAT2XMIT",0)
39.6^ASTAT2XMIT^Trigger TRANSMISSION REQUIRED to YES on STATUS change.^MU^^F^IR^I^39.6^^^^^A
"IX",39.6,39.6,"ASTAT2XMIT",1)
D:X2(1)="H" XMITOFF^DGQEDD(DA) D:X2(1)'="H" XMITON^DGQEDD(DA)
"IX",39.6,39.6,"ASTAT2XMIT",1.4)
S X=X1(1)'=X2(1)
"IX",39.6,39.6,"ASTAT2XMIT",2)
Q
"IX",39.6,39.6,"ASTAT2XMIT",11.1,0)
^.114IA^1^1
"IX",39.6,39.6,"ASTAT2XMIT",11.1,1,0)
1^F^39.6^.03^^^F
"IX",39.6,39.6,"AXMIT",0)
39.6^AXMIT^Index of VIC requests requiring an HL7 transmission^MU^^F^IR^I^39.6^^^^^S
"IX",39.6,39.6,"AXMIT",1)
S ^DGQE(39.6,"AXMIT",DA)=""
"IX",39.6,39.6,"AXMIT",1.4)
S X=X2(1)="Y"
"IX",39.6,39.6,"AXMIT",2)
K ^DGQE(39.6,"AXMIT",DA)
"IX",39.6,39.6,"AXMIT",2.4)

"IX",39.6,39.6,"AXMIT",11.1,0)
^.114IA^1^1
"IX",39.6,39.6,"AXMIT",11.1,1,0)
1^F^39.6^.05^^^F
"IX",39.7,39.7,"ADATE",0)
39.7^ADATE^Index VIC REQUEST and TRANSMISSION DATE^R^^R^IR^I^39.7^^^^^S
"IX",39.7,39.7,"ADATE",1)
S ^DGQE(39.7,"ADATE",X(1),X(2),DA)=""
"IX",39.7,39.7,"ADATE",2)
K ^DGQE(39.7,"ADATE",X(1),X(2),DA)
"IX",39.7,39.7,"ADATE",2.5)
K ^DGQE(39.7,"ADATE")
"IX",39.7,39.7,"ADATE",11.1,0)
^.114IA^2^2
"IX",39.7,39.7,"ADATE",11.1,1,0)
1^F^39.7^.02^^1^F
"IX",39.7,39.7,"ADATE",11.1,1,3)

"IX",39.7,39.7,"ADATE",11.1,2,0)
2^F^39.7^.03^^2^F
"IX",39.7,39.7,"ADATE",11.1,2,3)

"IX",39.7,39.7,"ASTAT",0)
39.7^ASTAT^Index the STATUS (#.04) field^R^^F^IR^I^39.7^^^^^S
"IX",39.7,39.7,"ASTAT",1)
S ^DGQE(39.7,"ASTAT",X,DA)=""
"IX",39.7,39.7,"ASTAT",2)
K ^DGQE(39.7,"ASTAT",X,DA)
"IX",39.7,39.7,"ASTAT",2.5)
K ^DGQE(39.7,"ASTAT")
"IX",39.7,39.7,"ASTAT",11.1,0)
^.114IA^1^1
"IX",39.7,39.7,"ASTAT",11.1,1,0)
1^F^39.7^.04^^1^F
"IX",39.7,39.7,"ASTAT",11.1,1,3)

"KRN",3.6,198,-1)
0^1
"KRN",3.6,198,0)
DGQE HL7ERR^VIC HL7 ERROR^^1
"KRN",3.6,198,1,0)
^^13^13^3040218^
"KRN",3.6,198,1,1,0)
 
"KRN",3.6,198,1,2,0)
* * * *  V I C  H L 7  E R R O R  E N C O U N T E R E D  * * * *
"KRN",3.6,198,1,3,0)
 
"KRN",3.6,198,1,4,0)
A VIC General Order (ORM~O01) HL7 message has been rejected by the 
"KRN",3.6,198,1,5,0)
National Card Management Directory (NCMD) on |1|.
"KRN",3.6,198,1,6,0)
 
"KRN",3.6,198,1,7,0)
                    Patient Name:  |2|
"KRN",3.6,198,1,8,0)
                    NCMD Card ID:  |3|
"KRN",3.6,198,1,9,0)
 
"KRN",3.6,198,1,10,0)
            Action sent to NCMD:  |4|
"KRN",3.6,198,1,11,0)
 
"KRN",3.6,198,1,12,0)
                  HL7 Message ID:  |5|
"KRN",3.6,198,1,13,0)
  Initial transmission date/time:  |6|
"KRN",3.6,198,3,0)
^3.63^2^2^3040218^^^^
"KRN",3.6,198,3,1,0)
This bulletin is used to notify staff that a VIC General Order (ORM~O01) 
"KRN",3.6,198,3,2,0)
HL7 message has been rejected at the National Card Management Directory.
"KRN",3.6,198,4,0)
^3.64A^6^6
"KRN",3.6,198,4,1,0)
1
"KRN",3.6,198,4,1,1,0)
^3.65^1^1^3040218^^
"KRN",3.6,198,4,1,1,1,0)
Time and date that the rejection message was received.
"KRN",3.6,198,4,2,0)
2
"KRN",3.6,198,4,2,1,0)
^3.65^1^1^3040218^^
"KRN",3.6,198,4,2,1,1,0)
Patient's name.
"KRN",3.6,198,4,3,0)
3
"KRN",3.6,198,4,3,1,0)
^3.65^3^3^3040218^^
"KRN",3.6,198,4,3,1,1,0)
Card ID assigned when the initial VIC request was transmitted to the 
"KRN",3.6,198,4,3,1,2,0)
NCMD.  The Card ID acts as the primary identifier for a VIC request at 
"KRN",3.6,198,4,3,1,3,0)
the NCMD.
"KRN",3.6,198,4,4,0)
4
"KRN",3.6,198,4,4,1,0)
^3.65^6^6^3040218^^
"KRN",3.6,198,4,4,1,1,0)
The order control code is the action that the originating HL7 message was 
"KRN",3.6,198,4,4,1,2,0)
communicating to the NCMD.  The action can be one of two choices:
"KRN",3.6,198,4,4,1,3,0)
1.  RL - Release Previous Hold notifies the NCMD that the VIC request can 
"KRN",3.6,198,4,4,1,4,0)
now be processed by the NCMD.
"KRN",3.6,198,4,4,1,5,0)
 
"KRN",3.6,198,4,4,1,6,0)
2.  CA - Cancel notifies the NCMD to cancel the VIC request.
"KRN",3.6,198,4,5,0)
5
"KRN",3.6,198,4,5,1,0)
^^1^1^3040218^
"KRN",3.6,198,4,5,1,1,0)
The HL7 Message ID is the message number of the originating HL7 message.
"KRN",3.6,198,4,6,0)
6
"KRN",3.6,198,4,6,1,0)
^3.65^2^2^3040218^^^
"KRN",3.6,198,4,6,1,1,0)
This is the transmission date/time of the original HL7 message being
"KRN",3.6,198,4,6,1,2,0)
acknowledged.
"KRN",3.8,327,-1)
0^1
"KRN",3.8,327,0)
DGQE HL7 TRANSMISSION ERRORS^PR^^^^^
"KRN",3.8,327,2,0)
^^2^2^3040218^
"KRN",3.8,327,2,1,0)
This mail group receives bulletins when a VIC General Order (ORM~O01) HL7
"KRN",3.8,327,2,2,0)
message is rejected by the National Card Management Directory.
"KRN",3.8,327,3)

"KRN",19,148,-1)
2^4
"KRN",19,148,0)
DG OUTPUTS MENU^ADT Outputs Menu^^M^.5^^^^^^^5
"KRN",19,148,10,0)
^19.01IP^40^19
"KRN",19,148,10,40,0)
11218
"KRN",19,148,10,40,"^")
DG PRINT PATIENT LABEL
"KRN",19,148,"U")
ADT OUTPUTS MENU
"KRN",19,11027,-1)
0^1
"KRN",19,11027,0)
DGQE VIC RPCS^VIC RPC Menu^^B^^^^^^^^REGISTRATION
"KRN",19,11027,1,0)
^19.06^2^2^3040525^^^^
"KRN",19,11027,1,1,0)
This option contains all of the broker calls utilitzed to retrieve data
"KRN",19,11027,1,2,0)
from VistA to create a VIC card.
"KRN",19,11027,"RPC",0)
^19.05P^3^3
"KRN",19,11027,"RPC",1,0)
DGQE GET PATIENT DEMO
"KRN",19,11027,"RPC",2,0)
DGQE SET CARD ID
"KRN",19,11027,"RPC",3,0)
ORWU USERINFO
"KRN",19,11027,"U")
VIC RPC MENU
"KRN",19,11216,-1)
0^2
"KRN",19,11216,0)
DGQE BACKGROUND PROCESSING^VIC Background Processing^^R^^^^^^^^REGISTRATION
"KRN",19,11216,1,0)
^^2^2^3040126^
"KRN",19,11216,1,1,0)
This option calls the background processing driver for the VIC Redesign 
"KRN",19,11216,1,2,0)
project.  The option should be scheduled to run daily using TaskMan.
"KRN",19,11216,25)
EN^DGQEBGR
"KRN",19,11216,"U")
VIC BACKGROUND PROCESSING
"KRN",19,11218,-1)
0^3
"KRN",19,11218,0)
DG PRINT PATIENT LABEL^Print Patient Label^^R^^^^^^^^REGISTRATION
"KRN",19,11218,1,0)
^19.06^3^3^3040408^^
"KRN",19,11218,1,1,0)
This option prints patient labels that contain the Patient Name, Social 
"KRN",19,11218,1,2,0)
Security Number, and Date of Birth.  An optional fourth line contains the 
"KRN",19,11218,1,3,0)
Inpatient Location of the patient.
"KRN",19,11218,25)
EN^DGPLBL
"KRN",19,11218,"U")
PRINT PATIENT LABEL
"KRN",101,3918,-1)
0^1
"KRN",101,3918,0)
DGQE VIC ORM/O01 EVENT^^^E^^^^^^^^
"KRN",101,3918,770)
VIC NCMD SEND^^ORM^O01^^^^NE^AL^2.4^
"KRN",101,3918,772)
D RCV^DGQEHLR
"KRN",101,3918,775,0)
^101.0775PA^1^1
"KRN",101,3918,775,1,0)
3919
"KRN",101,3918,775,1,"^")
DGQE VIC ORR/O02 SUBSC
"KRN",101,3919,-1)
0^2
"KRN",101,3919,0)
DGQE VIC ORR/O02 SUBSC^^^S^^^^^^^^
"KRN",101,3919,770)
^VIC NCMD RECV^^O02^^^VIC NCMD^^^^ORR
"KRN",101,3919,773)
1^1^0
"KRN",771,109,-1)
0^2
"KRN",771,109,0)
VIC NCMD SEND^a^^^^^USA
"KRN",771,109,"EC")

"KRN",771,109,"FS")

"KRN",771,110,-1)
0^1
"KRN",771,110,0)
VIC NCMD RECV^a^NCMD^^^^USA
"KRN",771,110,"EC")

"KRN",771,110,"FS")

"KRN",870,209,-1)
0^1
"KRN",870,209,0)
VIC NCMD^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,209,400)
10.2.48.48^5000^C^^^
"KRN",8989.5,1119,0)
5;DIC(9.4,^DGQE VIC REQUEST PURGE^1
"KRN",8989.5,1119,1)
7
"KRN",8989.5,1120,0)
5;DIC(9.4,^DGQE VIC REQUEST EXPIRATION^1
"KRN",8989.5,1120,1)
90
"KRN",8989.51,357,-1)
0^1
"KRN",8989.51,357,0)
DGQE VIC REQUEST EXPIRATION^VIC Request Expiration^0
"KRN",8989.51,357,1)
N^0:180^How many days should a pending VIC request be retained?
"KRN",8989.51,357,4,0)
^8989.514^^0
"KRN",8989.51,357,20,0)
^8989.512^3^3^3040408^^^^
"KRN",8989.51,357,20,1,0)
This parameter defines the number of days that a VIC Request with a Card
"KRN",8989.51,357,20,2,0)
Print Release Status of "H"old is allowed to remain pending before being 
"KRN",8989.51,357,20,3,0)
cancelled.
"KRN",8989.51,357,30,0)
^8989.513I^1^1
"KRN",8989.51,357,30,1,0)
1^9.4
"KRN",8989.51,358,-1)
0^2
"KRN",8989.51,358,0)
DGQE VIC REQUEST PURGE^VIC Request Purge^0^^^0
"KRN",8989.51,358,1)
N^0:30^How many days should completed VIC requests be retained?
"KRN",8989.51,358,20,0)
^8989.512^4^4^3040408^^
"KRN",8989.51,358,20,1,0)
This value is used by the VIC Background Processing [DGQE BACKGROUND 
"KRN",8989.51,358,20,2,0)
PROCESSING] option to determine how many days to retain completed VIC 
"KRN",8989.51,358,20,3,0)
request transactions in the VIC REQUEST (#39.6) and VIC HL7 TRANSMISSION
"KRN",8989.51,358,20,4,0)
LOG (#39.7) files.
"KRN",8989.51,358,30,0)
^8989.513I^1^1
"KRN",8989.51,358,30,1,0)
1^9.4
"KRN",8994,1968,-1)
0^1
"KRN",8994,1968,0)
DGQE GET PATIENT DEMO^GETDEMO^DGQERPC^2^R^0
"KRN",8994,1968,1,0)
^^14^14^3040211^
"KRN",8994,1968,1,1,0)
This remote procedure retrieves demographic data for a given patient 
"KRN",8994,1968,1,2,0)
needed to create a Veteran ID Card.  As part of the demographic retrieval 
"KRN",8994,1968,1,3,0)
process, the veteran's VIC mailing address is algorithmically selected
"KRN",8994,1968,1,4,0)
from the following addresses in priority order:
"KRN",8994,1968,1,5,0)
 
"KRN",8994,1968,1,6,0)
1. HIPAA Confidential address
"KRN",8994,1968,1,7,0)
2. Temporary address
"KRN",8994,1968,1,8,0)
3. Permanent address
"KRN",8994,1968,1,9,0)
4. Facility address
"KRN",8994,1968,1,10,0)
 
"KRN",8994,1968,1,11,0)
A status value, called the Card Print Release Status, and a single 
"KRN",8994,1968,1,12,0)
remarks text line is returned with the veteran's demographics.  The Card 
"KRN",8994,1968,1,13,0)
Print Release Status can have a value of "P", "H", "I", or "C" for Print, 
"KRN",8994,1968,1,14,0)
Hold, Ineligible, or Cancel.
"KRN",8994,1968,2,0)
^8994.02A^3^1
"KRN",8994,1968,2,3,0)
DGICN^1^12^1^1
"KRN",8994,1968,2,3,1,0)
^8994.021^1^1^3040211^^
"KRN",8994,1968,2,3,1,1,0)
This parameter contains the patient's Integration Control Number.
"KRN",8994,1968,2,"B","DGICN",3)

"KRN",8994,1968,2,"PARAMSEQ",1,3)

"KRN",8994,1968,3,0)
^8994.03^39^39^3040211^^^
"KRN",8994,1968,3,1,0)
The return value is an array of text lines.  Each text line consists of at
"KRN",8994,1968,3,2,0)
least two circumflex("^")-delimited fields.  The first field of each line
"KRN",8994,1968,3,3,0)
contains an XML style tag (e.g. <RESULT>).  The second through nth fields
"KRN",8994,1968,3,4,0)
contain data.
"KRN",8994,1968,3,5,0)
 
"KRN",8994,1968,3,6,0)
Subscript  Field#  Field contents             Description 
"KRN",8994,1968,3,7,0)
---------  ------  -------------------------  ----------------     
"KRN",8994,1968,3,8,0)
    1         1    <RESULT>                   RPC status tag
"KRN",8994,1968,3,9,0)
              2    Card Print Release Status
"KRN",8994,1968,3,10,0)
              3    "VIC"
"KRN",8994,1968,3,11,0)
    2         1    <MSG>                      Remarks tag              
"KRN",8994,1968,3,12,0)
              2    Free text remarks 
"KRN",8994,1968,3,13,0)
    3         1    <NAME>                     Identifier tag
"KRN",8994,1968,3,14,0)
              2    Full Name
"KRN",8994,1968,3,15,0)
              3    Social Security Number
"KRN",8994,1968,3,16,0)
              4    Date of Birth
"KRN",8994,1968,3,17,0)
    4         1    <NAME1>                    Name components tag
"KRN",8994,1968,3,18,0)
              2    Last Name
"KRN",8994,1968,3,19,0)
              3    First Name
"KRN",8994,1968,3,20,0)
              4    Middle Name
"KRN",8994,1968,3,21,0)
              5    Name Suffix
"KRN",8994,1968,3,22,0)
              6    Name Prefix
"KRN",8994,1968,3,23,0)
    5         1    <TYPE>                     Veteran type tag
"KRN",8994,1968,3,24,0)
              2    Service Connected Indicator
"KRN",8994,1968,3,25,0)
    6         1    <PATAS>                    Mailing address tag
"KRN",8994,1968,3,26,0)
              2    Street Line 1
"KRN",8994,1968,3,27,0)
              3    Street Line 2
"KRN",8994,1968,3,28,0)
              4    Street Line 3
"KRN",8994,1968,3,29,0)
    7         1    <PATAZ>                    Mailing address tag
"KRN",8994,1968,3,30,0)
              2    City
"KRN",8994,1968,3,31,0)
              3    State
"KRN",8994,1968,3,32,0)
              4    Zip
"KRN",8994,1968,3,33,0)
    8         1    <MPI>                     Master Patient Index tag
"KRN",8994,1968,3,34,0)
              2    Integration Control Number
"KRN",8994,1968,3,35,0)
              3    DFN
"KRN",8994,1968,3,36,0)
    9         1    <SITE>                    Facility tag
"KRN",8994,1968,3,37,0)
              2    Facility Name
"KRN",8994,1968,3,38,0)
              3    Station Number
"KRN",8994,1968,3,39,0)
              4    VISN
"KRN",8994,2070,-1)
0^2
"KRN",8994,2070,0)
DGQE SET CARD ID^SETID^DGQERPC^1^R^0
"KRN",8994,2070,1,0)
^8994.01^5^5^3040211^^^^
"KRN",8994,2070,1,1,0)
This RPC acts as a callback from the VIC PICS workstation.  The callback
"KRN",8994,2070,1,2,0)
occurs when the workstation has successfully submitted the veteran's
"KRN",8994,2070,1,3,0)
photograph and demographic data to the National Card Management Directory
"KRN",8994,2070,1,4,0)
(NCMD). The callback provides the CARD_CardID value from the PICS
"KRN",8994,2070,1,5,0)
workstation, which is needed for the VistA to NCMD interface.
"KRN",8994,2070,2,0)
^8994.02A^4^3
"KRN",8994,2070,2,2,0)
DGRSTAT^1^1^1^2
"KRN",8994,2070,2,2,1,0)
^^2^2^3040211^
"KRN",8994,2070,2,2,1,1,0)
This parameter is the Card Print Release Status as a single character set 
"KRN",8994,2070,2,2,1,2,0)
of codes: ["C":Cancel,"I":Ineligible,"H":Hold,"P":Print].
"KRN",8994,2070,2,3,0)
DGID^1^60^1^3
"KRN",8994,2070,2,3,1,0)
^8994.021^6^6^3040204^^
"KRN",8994,2070,2,3,1,1,0)
This parameter is the Card ID assigned when the VIC PICS workstation 
"KRN",8994,2070,2,3,1,2,0)
creates a VIC Request entry the National Card Management Directory.  The
"KRN",8994,2070,2,3,1,3,0)
Card ID is unique for each request.
"KRN",8994,2070,2,3,1,4,0)
 
"KRN",8994,2070,2,3,1,5,0)
Card ID format:
"KRN",8994,2070,2,3,1,6,0)
   patient lastname_"-"_patient SSN_"-"_number of patient's card requests
"KRN",8994,2070,2,4,0)
DGICN^1^12^1^1
"KRN",8994,2070,2,4,1,0)
^8994.021^1^1^3040211^^
"KRN",8994,2070,2,4,1,1,0)
This parameter contains the patient's Integration Control Number.
"KRN",8994,2070,2,"B","DGICN",4)

"KRN",8994,2070,2,"B","DGID",3)

"KRN",8994,2070,2,"B","DGRSTAT",2)

"KRN",8994,2070,2,"PARAMSEQ",1,4)

"KRN",8994,2070,2,"PARAMSEQ",2,2)

"KRN",8994,2070,2,"PARAMSEQ",3,3)

"KRN",8994,2070,3,0)
^8994.03^2^2^3040211^^^
"KRN",8994,2070,3,1,0)
A literal "1" will be returned indicating success or a literal "0" will be
"KRN",8994,2070,3,2,0)
returned indicating a failure.
"MBREQ")
0
"ORD",2,3.6)
3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"ORD",2,3.6,0)
BULLETIN
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;HLLLDEL^XPDIA1(%)
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2941102^2941102
"PKG",5,22,1,"PAH",1,0)
571^3040728
"PKG",5,22,1,"PAH",1,1,0)
^^2^2^3040728
"PKG",5,22,1,"PAH",1,1,1,0)
Please refer to patch DG*5.3*571 in the National Patch Module for a 
"PKG",5,22,1,"PAH",1,1,2,0)
complete description of this patch.
"PRE")
DG53P571
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
17
"RTN","DG53P571")
0^15^B2872044
"RTN","DG53P571",1,0)
DG53P571 ;ALB/RPM - PATCH DG*5.3*571 INSTALL UTILITIES ; 12/15/03 4:52pm
"RTN","DG53P571",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DG53P571",3,0)
 ;
"RTN","DG53P571",4,0)
ENV ;Main entry point for Environment check point.
"RTN","DG53P571",5,0)
 ;
"RTN","DG53P571",6,0)
 S XPDABORT=""
"RTN","DG53P571",7,0)
 D PROGCHK(.XPDABORT) ;checks programmer variables
"RTN","DG53P571",8,0)
 I XPDABORT="" K XPDABORT
"RTN","DG53P571",9,0)
 Q
"RTN","DG53P571",10,0)
 ;
"RTN","DG53P571",11,0)
 ;
"RTN","DG53P571",12,0)
PRE ;Main entry point for Pre-init items.
"RTN","DG53P571",13,0)
 ;
"RTN","DG53P571",14,0)
 Q
"RTN","DG53P571",15,0)
 ;
"RTN","DG53P571",16,0)
 ;
"RTN","DG53P571",17,0)
POST ;Main entry point for Post-init items.
"RTN","DG53P571",18,0)
 ;
"RTN","DG53P571",19,0)
 ;set expiration package parameter to 90 days
"RTN","DG53P571",20,0)
 D SETPARM("DGQE VIC REQUEST EXPIRATION",90)
"RTN","DG53P571",21,0)
 ;
"RTN","DG53P571",22,0)
 ;set purge package parameter to 7 days
"RTN","DG53P571",23,0)
 D SETPARM("DGQE VIC REQUEST PURGE",7)
"RTN","DG53P571",24,0)
 Q
"RTN","DG53P571",25,0)
 ;
"RTN","DG53P571",26,0)
SETPARM(DGPARM,DGDAYS) ;set PACKAGE entity parameters
"RTN","DG53P571",27,0)
 ;
"RTN","DG53P571",28,0)
 ;  DBIA: #2263 SUPPORTED PARAMETER TOOL ENTRY POINTS
"RTN","DG53P571",29,0)
 ;
"RTN","DG53P571",30,0)
 ;  Input:
"RTN","DG53P571",31,0)
 ;    DGPARM - PARAMETER DEFINITION name
"RTN","DG53P571",32,0)
 ;    DGDAYS - parameter value
"RTN","DG53P571",33,0)
 ;
"RTN","DG53P571",34,0)
 ;  Output:
"RTN","DG53P571",35,0)
 ;    None
"RTN","DG53P571",36,0)
 ;
"RTN","DG53P571",37,0)
 N DGERR
"RTN","DG53P571",38,0)
 ;
"RTN","DG53P571",39,0)
 D EN^XPAR("PKG",DGPARM,1,DGDAYS,.DGERR)
"RTN","DG53P571",40,0)
 D BMES^XPDUTL("*****")
"RTN","DG53P571",41,0)
 I '$G(DGERR) D
"RTN","DG53P571",42,0)
 . D MES^XPDUTL(DGPARM_" parameter set to "_DGDAYS_" days SUCCESSFULLY")
"RTN","DG53P571",43,0)
 E  D
"RTN","DG53P571",44,0)
 . D MES^XPDUTL(DGPARM_" parameter set FAILED")
"RTN","DG53P571",45,0)
 D MES^XPDUTL("*****")
"RTN","DG53P571",46,0)
 Q
"RTN","DG53P571",47,0)
 ;
"RTN","DG53P571",48,0)
 ;
"RTN","DG53P571",49,0)
PROGCHK(XPDABORT) ;checks for necessary programmer variables
"RTN","DG53P571",50,0)
 ;
"RTN","DG53P571",51,0)
 I '$G(DUZ)!($G(DUZ(0))'="@")!('$G(DT))!($G(U)'="^") DO
"RTN","DG53P571",52,0)
 .D BMES^XPDUTL("*****")
"RTN","DG53P571",53,0)
 .D MES^XPDUTL("Your programming variables are not set up properly.")
"RTN","DG53P571",54,0)
 .D MES^XPDUTL("Installation aborted.")
"RTN","DG53P571",55,0)
 .D MES^XPDUTL("*****")
"RTN","DG53P571",56,0)
 .S XPDABORT=2
"RTN","DG53P571",57,0)
 Q
"RTN","DG53P571",58,0)
 ;
"RTN","DGPLBL")
0^20^B27915761
"RTN","DGPLBL",1,0)
DGPLBL ;ALB/RPM - PATIENT INFORMATION LABELS ; 05/07/04
"RTN","DGPLBL",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGPLBL",3,0)
 ;
"RTN","DGPLBL",4,0)
 ;This routine provides a generic patient demographics label
"RTN","DGPLBL",5,0)
 ;print that includes Patient Name, SSN, DOB and an optional 
"RTN","DGPLBL",6,0)
 ;inpatient location (ward and bed).  Support for various printer
"RTN","DGPLBL",7,0)
 ;types (i.e. bar code, laser, etc.) is provided using the CONTROL
"RTN","DGPLBL",8,0)
 ;CODES (#3.2055) subfile of the TERMINAL TYPE (#3.2) file.  The
"RTN","DGPLBL",9,0)
 ;control code mnemonics are documented in DBIA# 3435.
"RTN","DGPLBL",10,0)
 ;
"RTN","DGPLBL",11,0)
 Q  ;no direct entry
"RTN","DGPLBL",12,0)
 ;
"RTN","DGPLBL",13,0)
EN ;main entry point used by DG PRINT PATIENT LABEL option
"RTN","DGPLBL",14,0)
 ;
"RTN","DGPLBL",15,0)
 N DGDFNS   ;selected patients array
"RTN","DGPLBL",16,0)
 N DGIOCC   ;control codes array
"RTN","DGPLBL",17,0)
 N DGLBCNT  ;label count
"RTN","DGPLBL",18,0)
 N DGLPL    ;lines per label
"RTN","DGPLBL",19,0)
 N DGLOC    ;include location flag (0 or 1)
"RTN","DGPLBL",20,0)
 N DGQVAR   ;queuing variables
"RTN","DGPLBL",21,0)
 ;
"RTN","DGPLBL",22,0)
 ;select list of patients to print
"RTN","DGPLBL",23,0)
 Q:'$$SELPATS("DGDFNS")
"RTN","DGPLBL",24,0)
 ;
"RTN","DGPLBL",25,0)
 S DGLOC=$$ASK("Include Inpatient Location on Label","Y","YES","Answer YES to include the inpatient ward and bed location on the label")
"RTN","DGPLBL",26,0)
 Q:(DGLOC<0)
"RTN","DGPLBL",27,0)
 ;
"RTN","DGPLBL",28,0)
 S DGLBCNT=$$ASK("Number of Labels per patient",1,"NO^1:250:0","Enter the number of labels to print per patient, from 1 to 250")
"RTN","DGPLBL",29,0)
 Q:(DGLBCNT<0)
"RTN","DGPLBL",30,0)
 ;
"RTN","DGPLBL",31,0)
 S DGLPL=$$ASK("Number of Lines per Label",6,"NO^6:25:0","Enter the total number of lines that the label stock can contain (6-25)")
"RTN","DGPLBL",32,0)
 Q:(DGLPL<0)
"RTN","DGPLBL",33,0)
 ;
"RTN","DGPLBL",34,0)
 ;
"RTN","DGPLBL",35,0)
 ;init queued variables and select output device
"RTN","DGPLBL",36,0)
 S DGQVAR("DGDFNS(")=""
"RTN","DGPLBL",37,0)
 S DGQVAR("DGLBCNT")=""
"RTN","DGPLBL",38,0)
 S DGQVAR("DGLPL")=""
"RTN","DGPLBL",39,0)
 S DGQVAR("DGLOC")=""
"RTN","DGPLBL",40,0)
 D EN^XUTMDEVQ("START^DGPLBL","DG PRINT PATIENT LABEL",.DGQVAR)
"RTN","DGPLBL",41,0)
 Q
"RTN","DGPLBL",42,0)
 ;
"RTN","DGPLBL",43,0)
START ;retrieve label field data and print labels
"RTN","DGPLBL",44,0)
 ;
"RTN","DGPLBL",45,0)
 ;  Input:
"RTN","DGPLBL",46,0)
 ;    DGDFNS - array subscripted by pointer to PATIENT (#2) file
"RTN","DGPLBL",47,0)
 ;   DGLBCNT - number of labels to print per patient
"RTN","DGPLBL",48,0)
 ;   DGLPL   - number of lines per label
"RTN","DGPLBL",49,0)
 ;     DGLOC - print ward location flag
"RTN","DGPLBL",50,0)
 ;
"RTN","DGPLBL",51,0)
 ;  Output:
"RTN","DGPLBL",52,0)
 ;    none
"RTN","DGPLBL",53,0)
 ;
"RTN","DGPLBL",54,0)
 N DGDFN    ;pointer to PATIENT file
"RTN","DGPLBL",55,0)
 N DGI,DGJ  ;generic counters
"RTN","DGPLBL",56,0)
 N DGIOCC   ;printer Control Codes
"RTN","DGPLBL",57,0)
 N DGLN     ;line array index
"RTN","DGPLBL",58,0)
 N DGLNCNT  ;line count
"RTN","DGPLBL",59,0)
 N DGLINE   ;line text
"RTN","DGPLBL",60,0)
 ;
"RTN","DGPLBL",61,0)
 ;initialize printer
"RTN","DGPLBL",62,0)
 S DGIOCC=$$LOADCC(.DGIOCC)
"RTN","DGPLBL",63,0)
 I DGIOCC,$G(DGIOCC("FI"))]"" X DGIOCC("FI")  ;format initialize
"RTN","DGPLBL",64,0)
 ;
"RTN","DGPLBL",65,0)
 ;for each patient
"RTN","DGPLBL",66,0)
 S DGDFN=0
"RTN","DGPLBL",67,0)
 F  S DGDFN=$O(DGDFNS(DGDFN)) Q:'DGDFN  D
"RTN","DGPLBL",68,0)
 . ;
"RTN","DGPLBL",69,0)
 . ;build text line array
"RTN","DGPLBL",70,0)
 . S DGLNCNT=$$BLDLNAR(DGDFN,DGLOC,.DGLINE)
"RTN","DGPLBL",71,0)
 . Q:'DGLNCNT
"RTN","DGPLBL",72,0)
 . ;
"RTN","DGPLBL",73,0)
 . ;print patient's labels
"RTN","DGPLBL",74,0)
 . F DGI=1:1:DGLBCNT D
"RTN","DGPLBL",75,0)
 . . I DGIOCC,$G(DGIOCC("SL"))]"" X DGIOCC("SL")  ;start of label
"RTN","DGPLBL",76,0)
 . . ;for each line
"RTN","DGPLBL",77,0)
 . . F DGLN=1:1:DGLNCNT D
"RTN","DGPLBL",78,0)
 . . . I DGIOCC,$G(DGIOCC("ST"))]"" X DGIOCC("ST")  ;start text
"RTN","DGPLBL",79,0)
 . . . I DGIOCC,$G(DGIOCC("STF"))]"" X DGIOCC("STF")  ;start text field
"RTN","DGPLBL",80,0)
 . . . W $G(DGLINE(DGLN))
"RTN","DGPLBL",81,0)
 . . . I DGIOCC,$G(DGIOCC("ETF"))]"" X DGIOCC("ETF")  ;end text field
"RTN","DGPLBL",82,0)
 . . . I DGIOCC,$G(DGIOCC("ET"))]"" X DGIOCC("ET")  ;end text
"RTN","DGPLBL",83,0)
 . . . I 'DGIOCC W !
"RTN","DGPLBL",84,0)
 . . I DGIOCC,$G(DGIOCC("EL"))]"" X DGIOCC("EL")  ;end of label
"RTN","DGPLBL",85,0)
 . . I 'DGIOCC,DGLNCNT<DGLPL F DGJ=1:1:(DGLPL-DGLNCNT) W !
"RTN","DGPLBL",86,0)
 I DGIOCC,$G(DGIOCC("FE"))]"" X DGIOCC("FE")  ;format end
"RTN","DGPLBL",87,0)
 ;
"RTN","DGPLBL",88,0)
 D END
"RTN","DGPLBL",89,0)
 ;
"RTN","DGPLBL",90,0)
 Q
"RTN","DGPLBL",91,0)
 ;
"RTN","DGPLBL",92,0)
SELPATS(DGARR) ;select patient(s) to print
"RTN","DGPLBL",93,0)
 ;
"RTN","DGPLBL",94,0)
 ;  Input:
"RTN","DGPLBL",95,0)
 ;    DGARR - array name to contain returned patients
"RTN","DGPLBL",96,0)
 ;
"RTN","DGPLBL",97,0)
 ;  Output:
"RTN","DGPLBL",98,0)
 ;   Function value - 1 on success; 0 on failure
"RTN","DGPLBL",99,0)
 ;    DGARR - array of returned patients on success
"RTN","DGPLBL",100,0)
 ;
"RTN","DGPLBL",101,0)
 N DIC       ;FM file reference
"RTN","DGPLBL",102,0)
 N VAUTVB    ;contains name of subscripted variable to return
"RTN","DGPLBL",103,0)
 N VAUTNALL  ;define to prevent "ALL" option
"RTN","DGPLBL",104,0)
 N VAUTSTR   ;prompt string following "Select "
"RTN","DGPLBL",105,0)
 N VAUTNI    ;sort type flag [1:alpha if .01 not pointer,2:numeric,
"RTN","DGPLBL",106,0)
 ;            3:alpha]
"RTN","DGPLBL",107,0)
 ;
"RTN","DGPLBL",108,0)
 S DIC="^DPT(",VAUTVB=DGARR,VAUTNALL=1,VAUTNI=2,VAUTSTR="PATIENT"
"RTN","DGPLBL",109,0)
 D FIRST^VAUTOMA
"RTN","DGPLBL",110,0)
 Q $S($O(@DGARR@("")):1,1:0)
"RTN","DGPLBL",111,0)
 ;
"RTN","DGPLBL",112,0)
 ;
"RTN","DGPLBL",113,0)
ASK(DGDIRA,DGDIRB,DGDIR0,DGDIRH) ;
"RTN","DGPLBL",114,0)
 ;  Input
"RTN","DGPLBL",115,0)
 ;    DGDIR0 - DIR(0) string
"RTN","DGPLBL",116,0)
 ;    DGDIRA - DIR("A") string
"RTN","DGPLBL",117,0)
 ;    DGDIRB - DIR("B") string
"RTN","DGPLBL",118,0)
 ;    DGDIRH - DIR("?") string
"RTN","DGPLBL",119,0)
 ;
"RTN","DGPLBL",120,0)
 ;  Output
"RTN","DGPLBL",121,0)
 ;   Function Value - Internal value returned from ^DIR or -1 if user
"RTN","DGPLBL",122,0)
 ;                    up-arrows, double up-arrows or the read times out.
"RTN","DGPLBL",123,0)
 ;
"RTN","DGPLBL",124,0)
 ;          DIR(0) type      Results
"RTN","DGPLBL",125,0)
 ;          ------------     -------------------------------
"RTN","DGPLBL",126,0)
 ;          DD               IEN of selected entry
"RTN","DGPLBL",127,0)
 ;          Numeric          Value of number entered by user
"RTN","DGPLBL",128,0)
 ;          Pointer          IEN of selected entry
"RTN","DGPLBL",129,0)
 ;          Set of Codes     Internal value of code
"RTN","DGPLBL",130,0)
 ;          Yes/No           0 for No, 1 for Yes
"RTN","DGPLBL",131,0)
 ;
"RTN","DGPLBL",132,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y  ;^DIR variables
"RTN","DGPLBL",133,0)
 ;
"RTN","DGPLBL",134,0)
 S DIR(0)=DGDIR0
"RTN","DGPLBL",135,0)
 S DIR("A")=$G(DGDIRA)
"RTN","DGPLBL",136,0)
 I $G(DGDIRB)]"" S DIR("B")=DGDIRB
"RTN","DGPLBL",137,0)
 I $G(DGDIRH)]"" S DIR("?")=DGDIRH
"RTN","DGPLBL",138,0)
 D ^DIR
"RTN","DGPLBL",139,0)
 Q $S($D(DUOUT):-1,$D(DTOUT):-1,$D(DIROUT):-1,X="@":"@",1:$P(Y,U))
"RTN","DGPLBL",140,0)
 ;
"RTN","DGPLBL",141,0)
 ;
"RTN","DGPLBL",142,0)
LOADCC(DGIOCC) ;load control code mnemonics array
"RTN","DGPLBL",143,0)
 ; This function loads values from the CONTROL CODE (#2) subfield of
"RTN","DGPLBL",144,0)
 ; the CONTROL CODES (#55) field of the TERMINAL TYPE (#3.2) file into
"RTN","DGPLBL",145,0)
 ; an array subscripted by the CONTROL CODE ABBREVIATION (#.01) subfield
"RTN","DGPLBL",146,0)
 ; value.
"RTN","DGPLBL",147,0)
 ;
"RTN","DGPLBL",148,0)
 ;  Controlled Subscription DBIA: #3435 CONTROL CODES SUBFILE
"RTN","DGPLBL",149,0)
 ;
"RTN","DGPLBL",150,0)
 ;  Input:
"RTN","DGPLBL",151,0)
 ;    DGIOCC - variable name to contain control codes array
"RTN","DGPLBL",152,0)
 ;
"RTN","DGPLBL",153,0)
 ;  Output:
"RTN","DGPLBL",154,0)
 ;   Function value - 1 when control codes exist, 0 when no control
"RTN","DGPLBL",155,0)
 ;                    codes exist 
"RTN","DGPLBL",156,0)
 ;    DGIOCC - array of control codes
"RTN","DGPLBL",157,0)
 ;
"RTN","DGPLBL",158,0)
 N DGI    ;generic counter
"RTN","DGPLBL",159,0)
 N DGMNE  ;control code abbreviation
"RTN","DGPLBL",160,0)
 ;
"RTN","DGPLBL",161,0)
 S DGI=0
"RTN","DGPLBL",162,0)
 F  S DGI=$O(^%ZIS(2,IOST(0),55,DGI)) Q:'DGI  D
"RTN","DGPLBL",163,0)
 . S DGMNE=$P($G(^%ZIS(2,IOST(0),55,DGI,0)),U)
"RTN","DGPLBL",164,0)
 . I DGMNE]"" S DGIOCC(DGMNE)=^%ZIS(2,IOST(0),55,DGI,1)
"RTN","DGPLBL",165,0)
 ;
"RTN","DGPLBL",166,0)
 Q $S('$D(DGIOCC):0,1:1)
"RTN","DGPLBL",167,0)
 ;
"RTN","DGPLBL",168,0)
BLDLNAR(DGDFN,DGLOC,DGTEXT) ;build array of text lines
"RTN","DGPLBL",169,0)
 ;
"RTN","DGPLBL",170,0)
 ;  Input:
"RTN","DGPLBL",171,0)
 ;    DGDFN - pointer to patient in PATIENT (#2) file
"RTN","DGPLBL",172,0)
 ;    DGLOC - inpatient location flag
"RTN","DGPLBL",173,0)
 ;
"RTN","DGPLBL",174,0)
 ;  Output:
"RTN","DGPLBL",175,0)
 ;   Function value - count of returned lines on success; 0 on failure
"RTN","DGPLBL",176,0)
 ;    DGTEXT - numeric subscripted array of label text lines
"RTN","DGPLBL",177,0)
 ;
"RTN","DGPLBL",178,0)
 N DFN,VA,VADM,VAERR  ;VADPT variables
"RTN","DGPLBL",179,0)
 N DGI  ;line counter
"RTN","DGPLBL",180,0)
 ;
"RTN","DGPLBL",181,0)
 S DGI=0
"RTN","DGPLBL",182,0)
 ;
"RTN","DGPLBL",183,0)
 I +$G(DGDFN),$D(^DPT(DGDFN,0)) D
"RTN","DGPLBL",184,0)
 . S DFN=DGDFN
"RTN","DGPLBL",185,0)
 . D DEM^VADPT
"RTN","DGPLBL",186,0)
 . S DGI=DGI+1
"RTN","DGPLBL",187,0)
 . S DGTEXT(DGI)="Name: "_$G(VADM(1))
"RTN","DGPLBL",188,0)
 . S DGI=DGI+1
"RTN","DGPLBL",189,0)
 . S DGTEXT(DGI)=" SSN: "_$P($G(VADM(2)),U,2)
"RTN","DGPLBL",190,0)
 . S DGI=DGI+1
"RTN","DGPLBL",191,0)
 . S DGTEXT(DGI)=" DOB: "_$$FMTE^XLFDT($P($G(VADM(3)),U),"5Z")
"RTN","DGPLBL",192,0)
 . ;WARD LOCATION and ROOM-BED
"RTN","DGPLBL",193,0)
 . S DGI=DGI+1
"RTN","DGPLBL",194,0)
 . S DGTEXT(DGI)=$S(DGLOC:"Ward: "_$S($D(^DPT(DFN,.1)):^DPT(DFN,.1)_" "_$G(^DPT(DFN,.101)),1:"UNKNOWN"),1:"")
"RTN","DGPLBL",195,0)
 ;
"RTN","DGPLBL",196,0)
 Q DGI
"RTN","DGPLBL",197,0)
 ;
"RTN","DGPLBL",198,0)
END ;cleanup and close device
"RTN","DGPLBL",199,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","DGPLBL",200,0)
 E  D ^%ZISC
"RTN","DGPLBL",201,0)
 Q
"RTN","DGPLBL1")
0^21^B3901773
"RTN","DGPLBL1",1,0)
DGPLBL1 ;ALB/RPM - PATIENT INFORMATION LABEL UTILITIES ; 04/08/04
"RTN","DGPLBL1",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGPLBL1",3,0)
 ;
"RTN","DGPLBL1",4,0)
 ; This routine contains procedures that will define either a
"RTN","DGPLBL1",5,0)
 ; vertical or horizontal format form for printing patient labels
"RTN","DGPLBL1",6,0)
 ; on an Intermec label printer.  The formatting is done using
"RTN","DGPLBL1",7,0)
 ; Intermec Programming Language (IPL).  Use the appropriate entry
"RTN","DGPLBL1",8,0)
 ; point in the OPEN EXECUTE (#6) field of the TERMINAL TYPE (#3.2)
"RTN","DGPLBL1",9,0)
 ; file.
"RTN","DGPLBL1",10,0)
 ;
"RTN","DGPLBL1",11,0)
 ;     Vertical format: VINTERM^DGPLBL1
"RTN","DGPLBL1",12,0)
 ;   Horizontal format: HINTERM^DGPLBL1
"RTN","DGPLBL1",13,0)
 ;
"RTN","DGPLBL1",14,0)
 Q  ;no direct entry
"RTN","DGPLBL1",15,0)
 ;
"RTN","DGPLBL1",16,0)
VINTERM ;vertical label format loader for Intermec Label Printers
"RTN","DGPLBL1",17,0)
 ; This procedure programs the Patient Information label in vertical
"RTN","DGPLBL1",18,0)
 ; format for an Intermec label printer and stores it as format 2.
"RTN","DGPLBL1",19,0)
 ; This procedure must defined in the OPEN EXECUTE field of the
"RTN","DGPLBL1",20,0)
 ; TERMINAL TYPE (#3.2) file for the Intermec printer. 
"RTN","DGPLBL1",21,0)
 ;
"RTN","DGPLBL1",22,0)
 ;        Example:  OPEN EXECUTE: D VINTERM^DGPLBL1
"RTN","DGPLBL1",23,0)
 ; 
"RTN","DGPLBL1",24,0)
 U IO
"RTN","DGPLBL1",25,0)
 W "<STX><ESC>C<ETX>",!  ;operate in "advanced" mode
"RTN","DGPLBL1",26,0)
 W "<STX><ESC>P<ETX>",!  ;enter programming mode
"RTN","DGPLBL1",27,0)
 W "<STX>E2;F2;<ETX>",!  ;erase format 2;create format 2
"RTN","DGPLBL1",28,0)
 W "<STX>H0;o10,70;d0,40;f0;c25;k10;<ETX>",!  ;name field
"RTN","DGPLBL1",29,0)
 W "<STX>H1;o10,110;d0,40;f0;c25;k10;<ETX>",!  ;SSN field
"RTN","DGPLBL1",30,0)
 W "<STX>H2;o10,150;d0,40;f0;c25;k10;<ETX>",!  ;DOB field
"RTN","DGPLBL1",31,0)
 W "<STX>H3;o10,190;d0,40;f0;c25;k10;<ETX>",!  ;inpatient location
"RTN","DGPLBL1",32,0)
 Q
"RTN","DGPLBL1",33,0)
 ;
"RTN","DGPLBL1",34,0)
HINTERM ;horizontal label format loader for Intermec Label Printers
"RTN","DGPLBL1",35,0)
 ; This procedure programs the Patient Information label in horizontal
"RTN","DGPLBL1",36,0)
 ; format for an Intermec label printer and stores it as format 2.
"RTN","DGPLBL1",37,0)
 ; This procedure must defined in the OPEN EXECUTE field of the
"RTN","DGPLBL1",38,0)
 ; TERMINAL TYPE (#3.2) file for the Intermec printer. 
"RTN","DGPLBL1",39,0)
 ;
"RTN","DGPLBL1",40,0)
 ;        Example:  OPEN EXECUTE: D HINTERM^DGPLBL1
"RTN","DGPLBL1",41,0)
 ; 
"RTN","DGPLBL1",42,0)
 U IO
"RTN","DGPLBL1",43,0)
 W "<STX><ESC>C<ETX>",!  ;operate in "advanced" mode
"RTN","DGPLBL1",44,0)
 W "<STX><ESC>P<ETX>",!  ;enter programming mode
"RTN","DGPLBL1",45,0)
 W "<STX>E2;F2;<ETX>",!  ;erase format 2;create format 2
"RTN","DGPLBL1",46,0)
 W "<STX>H0;o210,51;d0,40;f3;c25;k10;<ETX>",!  ;name field
"RTN","DGPLBL1",47,0)
 W "<STX>H1;o170,51;d0,40;f3;c25;k10;<ETX>",!  ;SSN field
"RTN","DGPLBL1",48,0)
 W "<STX>H2;o130,51;d0,40;f3;c25;k10;<ETX>",!  ;DOB field
"RTN","DGPLBL1",49,0)
 W "<STX>H3;o90,51;d0,40;f3;c25;k10;<ETX>",!  ;inpatient location
"RTN","DGPLBL1",50,0)
 Q
"RTN","DGQEBGR")
0^17^B13847819
"RTN","DGQEBGR",1,0)
DGQEBGR ;ALB/RPM - VIC REPLACEMENT BACKGROUND JOB PROCESSOR ; 1/2/2004
"RTN","DGQEBGR",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEBGR",3,0)
 ;
"RTN","DGQEBGR",4,0)
 Q  ;no direct entry
"RTN","DGQEBGR",5,0)
 ;
"RTN","DGQEBGR",6,0)
EN ;main entry point
"RTN","DGQEBGR",7,0)
 ;
"RTN","DGQEBGR",8,0)
 D PURGE   ;purge completed requests over 7 days old
"RTN","DGQEBGR",9,0)
 D CKHOLD  ;check "H"old status requests and update if needed
"RTN","DGQEBGR",10,0)
 D SNDHL7  ;send queued HL7 messages
"RTN","DGQEBGR",11,0)
 Q
"RTN","DGQEBGR",12,0)
 ;
"RTN","DGQEBGR",13,0)
PURGE ;purge completed VIC requests
"RTN","DGQEBGR",14,0)
 ; This subroutine deletes all VIC REQUEST (#39.6) records and their
"RTN","DGQEBGR",15,0)
 ; associated VIC HL7 TRANSMISSION LOG (#39.7) records for all VIC
"RTN","DGQEBGR",16,0)
 ; requests that fulfill the following conditions:
"RTN","DGQEBGR",17,0)
 ;   1. VIC request Card Print Release Status is not "H"old
"RTN","DGQEBGR",18,0)
 ;   2. VIC request is over 7 days old
"RTN","DGQEBGR",19,0)
 ;   3. Last HL7 transmission status associated with the request is
"RTN","DGQEBGR",20,0)
 ;      an Accept acknowledgment
"RTN","DGQEBGR",21,0)
 ;  
"RTN","DGQEBGR",22,0)
 ;  Supported DBIA#: 10103 - $$FMADD^XLFDT, $$NOW^XLFDT
"RTN","DGQEBGR",23,0)
 ;
"RTN","DGQEBGR",24,0)
 ;  Input: none
"RTN","DGQEBGR",25,0)
 ;
"RTN","DGQEBGR",26,0)
 ;  Output: none
"RTN","DGQEBGR",27,0)
 ;
"RTN","DGQEBGR",28,0)
 N DGSTAT  ;card print release status
"RTN","DGQEBGR",29,0)
 N DGCODT  ;purge cutoff date
"RTN","DGQEBGR",30,0)
 N DGIEN   ;VIC REQUEST IEN
"RTN","DGQEBGR",31,0)
 N DGLIEN  ;VIC HL7 TRANSMISSION LOG IEN
"RTN","DGQEBGR",32,0)
 N DGLOG   ;VIC HL7 TRANSMISSION LOG data array
"RTN","DGQEBGR",33,0)
 N DGRQDT  ;VIC request date
"RTN","DGQEBGR",34,0)
 ;
"RTN","DGQEBGR",35,0)
 S DGCODT=$$FMADD^XLFDT($$NOW^XLFDT(),-$$PRGDAYS())
"RTN","DGQEBGR",36,0)
 F DGSTAT="C","I","P" D
"RTN","DGQEBGR",37,0)
 . S DGRQDT=0
"RTN","DGQEBGR",38,0)
 . F  S DGRQDT=$O(^DGQE(39.6,"ASTAT",DGSTAT,DGRQDT)) Q:('DGRQDT!(DGRQDT>DGCODT))  D
"RTN","DGQEBGR",39,0)
 . . S DGIEN=0
"RTN","DGQEBGR",40,0)
 . . F  S DGIEN=$O(^DGQE(39.6,"ASTAT",DGSTAT,DGRQDT,DGIEN)) Q:'DGIEN  D
"RTN","DGQEBGR",41,0)
 . . . S DGLIEN=$$FINDLST^DGQEHLL(DGIEN)
"RTN","DGQEBGR",42,0)
 . . . I $$GETLOG^DGQEHLL(DGLIEN,.DGLOG),$G(DGLOG("XMSTAT"))="A" D
"RTN","DGQEBGR",43,0)
 . . . . ;
"RTN","DGQEBGR",44,0)
 . . . . ;delete the request and HL7 transmission records
"RTN","DGQEBGR",45,0)
 . . . . I $$DELREQ^DGQEREQ(DGIEN)
"RTN","DGQEBGR",46,0)
 ;
"RTN","DGQEBGR",47,0)
 Q
"RTN","DGQEBGR",48,0)
 ;
"RTN","DGQEBGR",49,0)
 ;
"RTN","DGQEBGR",50,0)
CKHOLD ;check all "H"old status requests for updates
"RTN","DGQEBGR",51,0)
 ; This subroutine evaluates the VIC eligibility for all VIC requests
"RTN","DGQEBGR",52,0)
 ; that have a "H"old Card Print Release Status and updates the Status
"RTN","DGQEBGR",53,0)
 ; if needed.  When a VIC request retains a "H"old Card Print Release
"RTN","DGQEBGR",54,0)
 ; Status for more than the value returned by $$EXPDAYS^DGQEUT2(),
"RTN","DGQEBGR",55,0)
 ; the Card Print Release Status is changed to "C"ancel.
"RTN","DGQEBGR",56,0)
 ;
"RTN","DGQEBGR",57,0)
 ;  Supported DBIA: #10103 - $$FMADD^XLFDT, $$NOW^XLFDT
"RTN","DGQEBGR",58,0)
 ;
"RTN","DGQEBGR",59,0)
 ;  Input: none
"RTN","DGQEBGR",60,0)
 ;
"RTN","DGQEBGR",61,0)
 ;  Output: none
"RTN","DGQEBGR",62,0)
 ;
"RTN","DGQEBGR",63,0)
 N DGCODT  ;cutoff date
"RTN","DGQEBGR",64,0)
 N DGDAT   ;request date
"RTN","DGQEBGR",65,0)
 N DGELG   ;eligibility data array
"RTN","DGQEBGR",66,0)
 N DGIEN   ;VIC REQUEST ien
"RTN","DGQEBGR",67,0)
 N DGREQ   ;VIC REQUEST data array
"RTN","DGQEBGR",68,0)
 N DGSTAT  ;card print release status
"RTN","DGQEBGR",69,0)
 ;
"RTN","DGQEBGR",70,0)
 ;set cutoff date for "H"old request expiration
"RTN","DGQEBGR",71,0)
 S DGCODT=$$FMADD^XLFDT($$NOW^XLFDT(),-$$EXPDAYS)
"RTN","DGQEBGR",72,0)
 S DGDAT=0
"RTN","DGQEBGR",73,0)
 F  S DGDAT=$O(^DGQE(39.6,"ASTAT","H",DGDAT)) Q:'DGDAT  D
"RTN","DGQEBGR",74,0)
 . S DGIEN=0
"RTN","DGQEBGR",75,0)
 . F  S DGIEN=$O(^DGQE(39.6,"ASTAT","H",DGDAT,DGIEN)) Q:'DGIEN  D
"RTN","DGQEBGR",76,0)
 . . ;drop out of block on first failure
"RTN","DGQEBGR",77,0)
 . . ;
"RTN","DGQEBGR",78,0)
 . . S DGSTAT=""
"RTN","DGQEBGR",79,0)
 . . ;
"RTN","DGQEBGR",80,0)
 . . ;get request record
"RTN","DGQEBGR",81,0)
 . . Q:'$$GETREQ^DGQEREQ(DGIEN,.DGREQ)
"RTN","DGQEBGR",82,0)
 . . Q:'$G(DGREQ("DFN"))
"RTN","DGQEBGR",83,0)
 . . ;
"RTN","DGQEBGR",84,0)
 . . ;build eligibility data array
"RTN","DGQEBGR",85,0)
 . . Q:'$$GETELIG^DGQEUT1(DGREQ("DFN"),.DGELG)
"RTN","DGQEBGR",86,0)
 . . S DGELG("ICN")=$$GETICN^DGQEDEMO(DGREQ("DFN"))  ;add ICN to array
"RTN","DGQEBGR",87,0)
 . . ;
"RTN","DGQEBGR",88,0)
 . . ;re-evaluate Card Print Release Status
"RTN","DGQEBGR",89,0)
 . . I $$HOLD^DGQEUT2(.DGELG) D
"RTN","DGQEBGR",90,0)
 . . . ;
"RTN","DGQEBGR",91,0)
 . . . ;set Status to "C"ancel when "H"old request expires
"RTN","DGQEBGR",92,0)
 . . . I $G(DGREQ("REQDT"))>0,DGREQ("REQDT")<DGCODT S DGSTAT="C"
"RTN","DGQEBGR",93,0)
 . . E  D
"RTN","DGQEBGR",94,0)
 . . . S DGSTAT=$S($$VICELIG^DGQEUT2(.DGELG):"P",1:"I")
"RTN","DGQEBGR",95,0)
 . . ;
"RTN","DGQEBGR",96,0)
 . . ;store status and queue HL7 message
"RTN","DGQEBGR",97,0)
 . . I DGSTAT]"" D STOSTAT^DGQEREQ(DGIEN,DGSTAT)
"RTN","DGQEBGR",98,0)
 ;
"RTN","DGQEBGR",99,0)
 Q
"RTN","DGQEBGR",100,0)
 ;
"RTN","DGQEBGR",101,0)
 ;
"RTN","DGQEBGR",102,0)
SNDHL7 ;send queued General Order (ORM~O01) HL7 messages to NCMD
"RTN","DGQEBGR",103,0)
 ; This subroutine transmits a General Order (ORM~O01) HL7 message
"RTN","DGQEBGR",104,0)
 ; to the National Card Management Directory for each entry in the
"RTN","DGQEBGR",105,0)
 ; "XMIT" index of the VIC REQUEST (#39.6) file.
"RTN","DGQEBGR",106,0)
 ;
"RTN","DGQEBGR",107,0)
 ;  Input: none
"RTN","DGQEBGR",108,0)
 ;
"RTN","DGQEBGR",109,0)
 ;  Output: none
"RTN","DGQEBGR",110,0)
 ;
"RTN","DGQEBGR",111,0)
 N DGIEN
"RTN","DGQEBGR",112,0)
 ;
"RTN","DGQEBGR",113,0)
 S DGIEN=0
"RTN","DGQEBGR",114,0)
 F  S DGIEN=$O(^DGQE(39.6,"AXMIT",DGIEN)) Q:'DGIEN  D
"RTN","DGQEBGR",115,0)
 . I $$SND^DGQEHLS(DGIEN)
"RTN","DGQEBGR",116,0)
 Q
"RTN","DGQEBGR",117,0)
 ;
"RTN","DGQEBGR",118,0)
EXPDAYS() ;return VIC request expiration days
"RTN","DGQEBGR",119,0)
 ; This function returns the number of days that a pending VIC request
"RTN","DGQEBGR",120,0)
 ; is retained before being automatically cancelled.  The value is
"RTN","DGQEBGR",121,0)
 ; contained in the PACKAGE ("PKG") entity of the DGQE VIC REQUEST
"RTN","DGQEBGR",122,0)
 ; EXPIRATION parameter.
"RTN","DGQEBGR",123,0)
 ;
"RTN","DGQEBGR",124,0)
 ;  Input:
"RTN","DGQEBGR",125,0)
 ;    none
"RTN","DGQEBGR",126,0)
 ;
"RTN","DGQEBGR",127,0)
 ;  Output:
"RTN","DGQEBGR",128,0)
 ;   Function value - DGQE VIC REQUEST EXPIRATION parameter [DEFAULT=90]
"RTN","DGQEBGR",129,0)
 ;
"RTN","DGQEBGR",130,0)
 N DGVAL
"RTN","DGQEBGR",131,0)
 S DGVAL=$$GET^XPAR("PKG","DGQE VIC REQUEST EXPIRATION",1,"Q")
"RTN","DGQEBGR",132,0)
 Q $S(DGVAL="":90,1:DGVAL)
"RTN","DGQEBGR",133,0)
 ;
"RTN","DGQEBGR",134,0)
PRGDAYS() ;return VIC request purge days
"RTN","DGQEBGR",135,0)
 ; This function returns the number of days that a completed VIC request
"RTN","DGQEBGR",136,0)
 ; is retained before being purged.  The value is contained in the
"RTN","DGQEBGR",137,0)
 ; PACKAGE ("PKG") entity of the DGQE VIC REQUEST PURGE parameter.
"RTN","DGQEBGR",138,0)
 ;
"RTN","DGQEBGR",139,0)
 ;  Input:
"RTN","DGQEBGR",140,0)
 ;    none
"RTN","DGQEBGR",141,0)
 ;
"RTN","DGQEBGR",142,0)
 ;  Output:
"RTN","DGQEBGR",143,0)
 ;   Function value - DGQE VIC REQUEST PURGE parameter [DEFAULT=7]
"RTN","DGQEBGR",144,0)
 ;
"RTN","DGQEBGR",145,0)
 N DGVAL
"RTN","DGQEBGR",146,0)
 S DGVAL=$$GET^XPAR("PKG","DGQE VIC REQUEST PURGE",1,"Q")
"RTN","DGQEBGR",147,0)
 Q $S(DGVAL="":7,1:DGVAL)
"RTN","DGQEDD")
0^16^B489403
"RTN","DGQEDD",1,0)
DGQEDD ;ALB/RPM - VIC REPLACEMENT DATA DICTIONARY UTILITIES ; 12/30/03
"RTN","DGQEDD",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEDD",3,0)
 ;
"RTN","DGQEDD",4,0)
 Q  ;no direct entry
"RTN","DGQEDD",5,0)
 ;
"RTN","DGQEDD",6,0)
XMITON(DGIEN) ;turn on the TRANSMISSION REQUIRED flag
"RTN","DGQEDD",7,0)
 ; This procedure sets the TRANSMISSION REQUIRED (#.05) field of the
"RTN","DGQEDD",8,0)
 ; VIC REQUEST (#39.6) file to "YES".
"RTN","DGQEDD",9,0)
 ; The procedure is used by the ASTAT2XMIT trigger on the CARD PRINT
"RTN","DGQEDD",10,0)
 ; RELEASE STATUS (#.03) field of the VIC REQUEST (#39.6) file.
"RTN","DGQEDD",11,0)
 ;
"RTN","DGQEDD",12,0)
 ;  Input:
"RTN","DGQEDD",13,0)
 ;    DGIEN - pointer to VIC REQUEST (#39.6) file
"RTN","DGQEDD",14,0)
 ;
"RTN","DGQEDD",15,0)
 ;  Output:
"RTN","DGQEDD",16,0)
 ;    none
"RTN","DGQEDD",17,0)
 ;
"RTN","DGQEDD",18,0)
 N DGERR
"RTN","DGQEDD",19,0)
 N DGFDA
"RTN","DGQEDD",20,0)
 ;
"RTN","DGQEDD",21,0)
 S DGFDA(39.6,DGIEN_",",.05)="Y"
"RTN","DGQEDD",22,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEDD",23,0)
 Q
"RTN","DGQEDD",24,0)
 ;
"RTN","DGQEDD",25,0)
 ;
"RTN","DGQEDD",26,0)
XMITOFF(DGIEN) ;turn off the TRANSMISSION REQUIRED flag
"RTN","DGQEDD",27,0)
 ; This procedure sets the TRANSMISSION REQUIRED (#.05) field of the
"RTN","DGQEDD",28,0)
 ; VIC REQUEST (#39.6) file to "NO".
"RTN","DGQEDD",29,0)
 ; The procedure is used by the ASTAT2XMIT trigger on the CARD PRINT
"RTN","DGQEDD",30,0)
 ; RELEASE STATUS (#.03) field of the VIC REQUEST (#39.6) file.
"RTN","DGQEDD",31,0)
 ;
"RTN","DGQEDD",32,0)
 ;  Input:
"RTN","DGQEDD",33,0)
 ;    DGIEN - pointer to VIC REQUEST (#39.6) file
"RTN","DGQEDD",34,0)
 ;
"RTN","DGQEDD",35,0)
 ;  Output:
"RTN","DGQEDD",36,0)
 ;    none
"RTN","DGQEDD",37,0)
 ;
"RTN","DGQEDD",38,0)
 N DGERR
"RTN","DGQEDD",39,0)
 N DGFDA
"RTN","DGQEDD",40,0)
 ;
"RTN","DGQEDD",41,0)
 S DGFDA(39.6,DGIEN_",",.05)="N"
"RTN","DGQEDD",42,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEDD",43,0)
 Q
"RTN","DGQEDEMO")
0^1^B29593939
"RTN","DGQEDEMO",1,0)
DGQEDEMO ;ALB/RPM - VIC REPLACEMENT DEMOGRAPHICS GETTER API'S ; 9/19/03
"RTN","DGQEDEMO",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEDEMO",3,0)
 ;
"RTN","DGQEDEMO",4,0)
 ; This routine contains the following patient demographic data
"RTN","DGQEDEMO",5,0)
 ; retrieval procedures and functions:
"RTN","DGQEDEMO",6,0)
 ;   $$GETICN   - retrieves patient's national ICN
"RTN","DGQEDEMO",7,0)
 ;   $$GETIDS   - retrieves patient identifiers
"RTN","DGQEDEMO",8,0)
 ;   $$GETNAMEC - retrieves patient's name components
"RTN","DGQEDEMO",9,0)
 ;   $$GETADDR  - retrieves patient's mailing address
"RTN","DGQEDEMO",10,0)
 ;   GETSITE    - retrieves local station name and number
"RTN","DGQEDEMO",11,0)
 ;
"RTN","DGQEDEMO",12,0)
 Q  ;no direct entry
"RTN","DGQEDEMO",13,0)
 ;
"RTN","DGQEDEMO",14,0)
GETICN(DGDFN) ;retrieve patient national ICN
"RTN","DGQEDEMO",15,0)
 ; This function retrieves the ICN for a patient if the ICN is
"RTN","DGQEDEMO",16,0)
 ; nationally assigned.
"RTN","DGQEDEMO",17,0)
 ;
"RTN","DGQEDEMO",18,0)
 ;  Supported References:
"RTN","DGQEDEMO",19,0)
 ;    DBIA #2701: $$GETICN^MPIF001, $$IFLOCAL^MPIF001
"RTN","DGQEDEMO",20,0)
 ;
"RTN","DGQEDEMO",21,0)
 ;  Input:
"RTN","DGQEDEMO",22,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGQEDEMO",23,0)
 ;
"RTN","DGQEDEMO",24,0)
 ;  Output:
"RTN","DGQEDEMO",25,0)
 ;   Function value - returns National ICN on success, 0 on failure
"RTN","DGQEDEMO",26,0)
 ;
"RTN","DGQEDEMO",27,0)
 N DGICN
"RTN","DGQEDEMO",28,0)
 ;
"RTN","DGQEDEMO",29,0)
 S DGICN=0
"RTN","DGQEDEMO",30,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGQEDEMO",31,0)
 . ;
"RTN","DGQEDEMO",32,0)
 . S DGICN=$$GETICN^MPIF001(DGDFN)
"RTN","DGQEDEMO",33,0)
 . S DGICN=$S(DGICN>0:$P(DGICN,"V",1),1:0)
"RTN","DGQEDEMO",34,0)
 . Q:'DGICN
"RTN","DGQEDEMO",35,0)
 . ;
"RTN","DGQEDEMO",36,0)
 . I $$IFLOCAL^MPIF001(DGDFN) S DGICN=0
"RTN","DGQEDEMO",37,0)
 ;
"RTN","DGQEDEMO",38,0)
 Q DGICN
"RTN","DGQEDEMO",39,0)
 ;
"RTN","DGQEDEMO",40,0)
 ;
"RTN","DGQEDEMO",41,0)
GETIDS(DGDFN,DGIDS) ;retrieve patient identifiers
"RTN","DGQEDEMO",42,0)
 ; This function retrieves identifying information for a patient
"RTN","DGQEDEMO",43,0)
 ; in the PATIENT (#2) file and places it in an array format.
"RTN","DGQEDEMO",44,0)
 ;
"RTN","DGQEDEMO",45,0)
 ; Supported Reference:
"RTN","DGQEDEMO",46,0)
 ;   DBIA #10035: Direct global reference of patient's zero
"RTN","DGQEDEMO",47,0)
 ;                node in the PATIENT (#2) file
"RTN","DGQEDEMO",48,0)
 ;
"RTN","DGQEDEMO",49,0)
 ;  Input:
"RTN","DGQEDEMO",50,0)
 ;   DGDFN - (required) ien of patient in PATIENT (#2) file
"RTN","DGQEDEMO",51,0)
 ;
"RTN","DGQEDEMO",52,0)
 ; Output:
"RTN","DGQEDEMO",53,0)
 ;  Function value - returns 1 on success, 0 on failure
"RTN","DGQEDEMO",54,0)
 ;   DGIDS - output array containing the patient identifying information,
"RTN","DGQEDEMO",55,0)
 ;           on success, pass by reference.
"RTN","DGQEDEMO",56,0)
 ;            Array subscripts are:
"RTN","DGQEDEMO",57,0)
 ;             "DFN"  - ien PATIENT (#2) file
"RTN","DGQEDEMO",58,0)
 ;             "NAME" - patient name
"RTN","DGQEDEMO",59,0)
 ;             "SEX"  - patient gender ("M"/"F")
"RTN","DGQEDEMO",60,0)
 ;             "SSN"  - patient Social Security Number
"RTN","DGQEDEMO",61,0)
 ;             "DOB"  - patient date of birth (FM format)
"RTN","DGQEDEMO",62,0)
 ;
"RTN","DGQEDEMO",63,0)
 N DGNODE
"RTN","DGQEDEMO",64,0)
 N DGRSLT
"RTN","DGQEDEMO",65,0)
 ;
"RTN","DGQEDEMO",66,0)
 S DGRSLT=0
"RTN","DGQEDEMO",67,0)
 ;
"RTN","DGQEDEMO",68,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGQEDEMO",69,0)
 .
"RTN","DGQEDEMO",70,0)
 . ;get zero node of patient record
"RTN","DGQEDEMO",71,0)
 . S DGNODE=$G(^DPT(DGDFN,0))
"RTN","DGQEDEMO",72,0)
 . ;
"RTN","DGQEDEMO",73,0)
 . S DGIDS("DFN")=DGDFN
"RTN","DGQEDEMO",74,0)
 . S DGIDS("NAME")=$P(DGNODE,U)
"RTN","DGQEDEMO",75,0)
 . S DGIDS("SEX")=$P(DGNODE,U,2)
"RTN","DGQEDEMO",76,0)
 . S DGIDS("DOB")=$P(DGNODE,U,3)
"RTN","DGQEDEMO",77,0)
 . S DGIDS("SSN")=$P(DGNODE,U,9)
"RTN","DGQEDEMO",78,0)
 . S DGRSLT=1  ;success
"RTN","DGQEDEMO",79,0)
 ;
"RTN","DGQEDEMO",80,0)
 Q DGRSLT
"RTN","DGQEDEMO",81,0)
 ;
"RTN","DGQEDEMO",82,0)
 ;
"RTN","DGQEDEMO",83,0)
GETNAMC(DGDFN,DGCOMP) ;retrieve name components 
"RTN","DGQEDEMO",84,0)
 ; This function retrieves a given patient's name components from the
"RTN","DGQEDEMO",85,0)
 ; NAME COMPONENT (#20) file and places the components in an array
"RTN","DGQEDEMO",86,0)
 ; format.  The supported API $$HLNAME^XLFNAME is used to retrieve the
"RTN","DGQEDEMO",87,0)
 ; name components, since it is the only supported Name Standardization
"RTN","DGQEDEMO",88,0)
 ; api that both reads from the NAME COMPONENT (#20) file and returns a
"RTN","DGQEDEMO",89,0)
 ; result that can be easily parsed.
"RTN","DGQEDEMO",90,0)
 ;
"RTN","DGQEDEMO",91,0)
 ;  Supported Reference:
"RTN","DGQEDEMO",92,0)
 ;    DBIA #3065: $$HLNAME^XLFNAME
"RTN","DGQEDEMO",93,0)
 ;
"RTN","DGQEDEMO",94,0)
 ;  Input:
"RTN","DGQEDEMO",95,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGQEDEMO",96,0)
 ;
"RTN","DGQEDEMO",97,0)
 ;  Output:
"RTN","DGQEDEMO",98,0)
 ;   Function value - returns 1 on success, 0 on failure
"RTN","DGQEDEMO",99,0)
 ;    DGCOMP - name component array on success, pass by reference
"RTN","DGQEDEMO",100,0)
 ;             Array subscripts are:
"RTN","DGQEDEMO",101,0)
 ;             "LAST"   - Family (last) name
"RTN","DGQEDEMO",102,0)
 ;             "FIRST"  - Given (first) name
"RTN","DGQEDEMO",103,0)
 ;             "MIDDLE" - Middle name
"RTN","DGQEDEMO",104,0)
 ;             "SUFFIX" - Name suffix
"RTN","DGQEDEMO",105,0)
 ;             "PREFIX" - Name prefix
"RTN","DGQEDEMO",106,0)
 ;
"RTN","DGQEDEMO",107,0)
 N DGSUB     ;component array subscripts
"RTN","DGQEDEMO",108,0)
 N DGFLD     ;component field position
"RTN","DGQEDEMO",109,0)
 N DGNAMSTR  ;XLFNAME name component string
"RTN","DGQEDEMO",110,0)
 N DGPAR     ;XLFNAME input parameter array
"RTN","DGQEDEMO",111,0)
 N DGRSLT    ;function value
"RTN","DGQEDEMO",112,0)
 ;
"RTN","DGQEDEMO",113,0)
 S DGRSLT=0
"RTN","DGQEDEMO",114,0)
 ;
"RTN","DGQEDEMO",115,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGQEDEMO",116,0)
 . S DGFLD=0
"RTN","DGQEDEMO",117,0)
 . S DGPAR("FILE")=2,DGPAR("FIELD")=".01",DGPAR("IENS")=DGDFN_","
"RTN","DGQEDEMO",118,0)
 . S DGNAMSTR=$$HLNAME^XLFNAME(.DGPAR,,U)
"RTN","DGQEDEMO",119,0)
 . F DGSUB="LAST","FIRST","MIDDLE","SUFFIX","PREFIX" D
"RTN","DGQEDEMO",120,0)
 . . S DGFLD=DGFLD+1
"RTN","DGQEDEMO",121,0)
 . . S DGCOMP(DGSUB)=$P(DGNAMSTR,U,DGFLD)
"RTN","DGQEDEMO",122,0)
 . S DGRSLT=1  ;success
"RTN","DGQEDEMO",123,0)
 ;
"RTN","DGQEDEMO",124,0)
 Q DGRSLT
"RTN","DGQEDEMO",125,0)
 ;
"RTN","DGQEDEMO",126,0)
 ;
"RTN","DGQEDEMO",127,0)
GETADDR(DGDFN,DGMADR,DGAERR) ;retrieve patient mailing address
"RTN","DGQEDEMO",128,0)
 ; This funtion selects the mailing address for a patient from the
"RTN","DGQEDEMO",129,0)
 ; available HIPAA confidential address, temporary address, permanent
"RTN","DGQEDEMO",130,0)
 ; address.  If the BAD ADDRESS INDICATOR (#.121) of the PATIENT file
"RTN","DGQEDEMO",131,0)
 ; is set, then the facility address will be selected.  The selected
"RTN","DGQEDEMO",132,0)
 ; address is placed in an array format.
"RTN","DGQEDEMO",133,0)
 ;
"RTN","DGQEDEMO",134,0)
 ;  Supported Reference:
"RTN","DGQEDEMO",135,0)
 ;    DBIA  #4080: $$BADADR^DGUTL3
"RTN","DGQEDEMO",136,0)
 ;
"RTN","DGQEDEMO",137,0)
 ;  Input:
"RTN","DGQEDEMO",138,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGQEDEMO",139,0)
 ;
"RTN","DGQEDEMO",140,0)
 ;  Output:
"RTN","DGQEDEMO",141,0)
 ;   Function value - returns 1 on success, 0 on failure
"RTN","DGQEDEMO",142,0)
 ;     DGMADR - array of mailing address fields on success, pass by
"RTN","DGQEDEMO",143,0)
 ;              reference
"RTN","DGQEDEMO",144,0)
 ;              Array subscripts are:
"RTN","DGQEDEMO",145,0)
 ;               "STREET1" - line 1 of street address
"RTN","DGQEDEMO",146,0)
 ;               "STREET2" - line 2 of street address
"RTN","DGQEDEMO",147,0)
 ;               "STREET3" - line 3 of street address
"RTN","DGQEDEMO",148,0)
 ;               "CITY"    - city
"RTN","DGQEDEMO",149,0)
 ;               "STATE"   - state
"RTN","DGQEDEMO",150,0)
 ;               "ZIP"     - zip code
"RTN","DGQEDEMO",151,0)
 ;               "ADRTYPE" - address type
"RTN","DGQEDEMO",152,0)
 ;                           [1:perm.; 2:temp.; 3:conf.; 4:facility]
"RTN","DGQEDEMO",153,0)
 ;     DGAERR - error message text defined on failure, pass by reference
"RTN","DGQEDEMO",154,0)
 ;
"RTN","DGQEDEMO",155,0)
 N DGADDR    ;address array in ADD^VAPDT format
"RTN","DGQEDEMO",156,0)
 N DGRSLT    ;function value
"RTN","DGQEDEMO",157,0)
 N DGTYPE    ;address type
"RTN","DGQEDEMO",158,0)
 ;
"RTN","DGQEDEMO",159,0)
 S DGRSLT=0
"RTN","DGQEDEMO",160,0)
 S DGTYPE=0
"RTN","DGQEDEMO",161,0)
 ;
"RTN","DGQEDEMO",162,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D  ;exit block on first error
"RTN","DGQEDEMO",163,0)
 . ;
"RTN","DGQEDEMO",164,0)
 . ;select between permanent, temporary and confidential addresses
"RTN","DGQEDEMO",165,0)
 . S DGTYPE=$$GETPTCA^DGQEUT3(DGDFN,.DGADDR)
"RTN","DGQEDEMO",166,0)
 . ;
"RTN","DGQEDEMO",167,0)
 . ;get facility address when no address, foreign address, or 
"RTN","DGQEDEMO",168,0)
 . ;bad address indicator is set
"RTN","DGQEDEMO",169,0)
 . I 'DGTYPE!($$ISFRGN^DGQEUT3(.DGADDR))!(+$$BADADR^DGUTL3(DGDFN)>0) D
"RTN","DGQEDEMO",170,0)
 . . S DGTYPE=4  ;facility address
"RTN","DGQEDEMO",171,0)
 . . I '$$GETFADD^DGQEUT3(.DGADDR) D
"RTN","DGQEDEMO",172,0)
 . . . S DGAERR="Unable to retrieve facility address."
"RTN","DGQEDEMO",173,0)
 . Q:$D(DGAERR)
"RTN","DGQEDEMO",174,0)
 . ;
"RTN","DGQEDEMO",175,0)
 . ;load mailing address array with retrieved address
"RTN","DGQEDEMO",176,0)
 . S DGMADR("STREET1")=$G(DGADDR(1))
"RTN","DGQEDEMO",177,0)
 . S DGMADR("STREET2")=$G(DGADDR(2))
"RTN","DGQEDEMO",178,0)
 . S DGMADR("STREET3")=$G(DGADDR(3))
"RTN","DGQEDEMO",179,0)
 . S DGMADR("CITY")=$G(DGADDR(4))
"RTN","DGQEDEMO",180,0)
 . S DGMADR("STATE")=$G(DGADDR(5))
"RTN","DGQEDEMO",181,0)
 . S DGMADR("ZIP")=$G(DGADDR(6))
"RTN","DGQEDEMO",182,0)
 . S DGMADR("ADRTYPE")=DGTYPE
"RTN","DGQEDEMO",183,0)
 . S DGRSLT=1  ;success
"RTN","DGQEDEMO",184,0)
 ;
"RTN","DGQEDEMO",185,0)
 Q DGRSLT
"RTN","DGQEDEMO",186,0)
 ;
"RTN","DGQEDEMO",187,0)
 ;
"RTN","DGQEDEMO",188,0)
GETSITE(DGFAC) ;retrieve the local site station number and name
"RTN","DGQEDEMO",189,0)
 ; This procedure retrieves the local site's name and station number
"RTN","DGQEDEMO",190,0)
 ; and places them in an array format.  A valid DUZ(2) is used to
"RTN","DGQEDEMO",191,0)
 ; determine the station number and name.  $$SITE^VASITE() is used
"RTN","DGQEDEMO",192,0)
 ; when DUZ(2) is undefined or invalid.
"RTN","DGQEDEMO",193,0)
 ;
"RTN","DGQEDEMO",194,0)
 ;  Supported References:
"RTN","DGQEDEMO",195,0)
 ;    DBIA  #2171: $$STA^XUAF4, $$NAME^XUAF4
"RTN","DGQEDEMO",196,0)
 ;    DBIA #10112: $$SITE^VASITE
"RTN","DGQEDEMO",197,0)
 ;
"RTN","DGQEDEMO",198,0)
 ;  Input:
"RTN","DGQEDEMO",199,0)
 ;    none
"RTN","DGQEDEMO",200,0)
 ;
"RTN","DGQEDEMO",201,0)
 ;  Output:
"RTN","DGQEDEMO",202,0)
 ;    DGFAC - array of facility information
"RTN","DGQEDEMO",203,0)
 ;            Array subscripts are:
"RTN","DGQEDEMO",204,0)
 ;             "FACNUM"  - station number
"RTN","DGQEDEMO",205,0)
 ;             "FACNAME" - facility name
"RTN","DGQEDEMO",206,0)
 ;
"RTN","DGQEDEMO",207,0)
 N DGERR
"RTN","DGQEDEMO",208,0)
 N DGIEN
"RTN","DGQEDEMO",209,0)
 N DGINST  ;pointer to INSTITUTION (#4) file
"RTN","DGQEDEMO",210,0)
 ;
"RTN","DGQEDEMO",211,0)
 I $G(DUZ(2))>0,$D(^DIC(4,DUZ(2))) D
"RTN","DGQEDEMO",212,0)
 . S DGINST=DUZ(2)
"RTN","DGQEDEMO",213,0)
 E  D
"RTN","DGQEDEMO",214,0)
 . S DGINST=$P($$SITE^VASITE(),U)
"RTN","DGQEDEMO",215,0)
 ;
"RTN","DGQEDEMO",216,0)
 S DGFAC("FACNUM")=$$STA^XUAF4(DGINST)
"RTN","DGQEDEMO",217,0)
 S DGFAC("FACNAME")=$$NAME^XUAF4(DGINST)
"RTN","DGQEDEMO",218,0)
 S DGFAC("VISN")=$$GETVISN(DGINST)
"RTN","DGQEDEMO",219,0)
 ;
"RTN","DGQEDEMO",220,0)
 Q
"RTN","DGQEDEMO",221,0)
 ;
"RTN","DGQEDEMO",222,0)
GETVISN(DGINST) ;retrieve VISN for an institution
"RTN","DGQEDEMO",223,0)
 ; This function checks for a "VISN" entry in the ASSOCIATIONS
"RTN","DGQEDEMO",224,0)
 ; (#14) multiple field in the INSTITUTION (#4) file for a given
"RTN","DGQEDEMO",225,0)
 ; institution. If a "VISN" entry exists, then the PARENT OF ASSOCIATION
"RTN","DGQEDEMO",226,0)
 ; (#1) subfield value is returned.
"RTN","DGQEDEMO",227,0)
 ;
"RTN","DGQEDEMO",228,0)
 ;  DBIA: #10090 - Read entire INSTITUTION (#4) file with FileMan
"RTN","DGQEDEMO",229,0)
 ;
"RTN","DGQEDEMO",230,0)
 ;  Input:
"RTN","DGQEDEMO",231,0)
 ;    DGINST - pointer to INSTITUTION (#4) file
"RTN","DGQEDEMO",232,0)
 ;
"RTN","DGQEDEMO",233,0)
 ;  Output:
"RTN","DGQEDEMO",234,0)
 ;   Function value - VISN name on success, "" on failure
"RTN","DGQEDEMO",235,0)
 ;
"RTN","DGQEDEMO",236,0)
 N DGERR   ;FM error array
"RTN","DGQEDEMO",237,0)
 N DGVISN  ;function value
"RTN","DGQEDEMO",238,0)
 ;
"RTN","DGQEDEMO",239,0)
 S DGVISN=""
"RTN","DGQEDEMO",240,0)
 I $G(DGINST),$D(^DIC(4,DGINST)) D
"RTN","DGQEDEMO",241,0)
 . S DGIEN=$$FIND1^DIC(4.014,","_DGINST_",","","VISN","B","","DGERR")
"RTN","DGQEDEMO",242,0)
 . Q:('DGIEN!($D(DGERR)))
"RTN","DGQEDEMO",243,0)
 . ;
"RTN","DGQEDEMO",244,0)
 . S DGVISN=$$GET1^DIQ(4.014,DGIEN_","_DGINST_",",1,"E","","DGERR")
"RTN","DGQEDEMO",245,0)
 ;
"RTN","DGQEDEMO",246,0)
 Q DGVISN
"RTN","DGQEHLL")
0^5^B11701600
"RTN","DGQEHLL",1,0)
DGQEHLL ;ALB/RPM - VIC REPLACEMENT VIC HL7 TRAN LOG FILE ACCESS API'S ; 12/09/03
"RTN","DGQEHLL",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLL",3,0)
 ;
"RTN","DGQEHLL",4,0)
 ; This routine contains the functions and procedures used to access
"RTN","DGQEHLL",5,0)
 ; and manipulate the VIC HL7 TRANSMISSION LOG (#39.7) file.
"RTN","DGQEHLL",6,0)
 ;
"RTN","DGQEHLL",7,0)
 ;   $$FINDMID - locate transmission record for a given HL7 message ID
"RTN","DGQEHLL",8,0)
 ;   $$FINDLST - locate last transmission record for a given request
"RTN","DGQEHLL",9,0)
 ;   $$GETLOG  - retrieve a single VIC HL7 TRANSMISSION LOG record
"RTN","DGQEHLL",10,0)
 ;   STOXMIT   - store a new VIC HL7 TRANSMISSION LOG record
"RTN","DGQEHLL",11,0)
 ;   STOACK    - store acknowledgment status and date
"RTN","DGQEHLL",12,0)
 ;   $$DELXMIT - delete a single VIC HL7 TRANSMISSION LOG record
"RTN","DGQEHLL",13,0)
 ;
"RTN","DGQEHLL",14,0)
 Q  ;no direct entry
"RTN","DGQEHLL",15,0)
 ;
"RTN","DGQEHLL",16,0)
FINDMID(DGMID) ;locate record for a given HL7 message ID
"RTN","DGQEHLL",17,0)
 ; This function performs a lookup of the VIC HL7 TRANSMISSION LOG
"RTN","DGQEHLL",18,0)
 ; (#39.7) file for a given HL7 Message ID.
"RTN","DGQEHLL",19,0)
 ;
"RTN","DGQEHLL",20,0)
 ;  Input:
"RTN","DGQEHLL",21,0)
 ;    DGMID - HL7 message ID
"RTN","DGQEHLL",22,0)
 ;
"RTN","DGQEHLL",23,0)
 ;  Output:
"RTN","DGQEHLL",24,0)
 ;   Function value - IEN of VIC HL7 TRANSMISSION LOG (#39.7) on success;
"RTN","DGQEHLL",25,0)
 ;                    0 on failure
"RTN","DGQEHLL",26,0)
 ;
"RTN","DGQEHLL",27,0)
 S DGMID=+$G(DGMID)
"RTN","DGQEHLL",28,0)
 Q +$O(^DGQE(39.7,"B",DGMID,""))
"RTN","DGQEHLL",29,0)
 ;
"RTN","DGQEHLL",30,0)
 ;
"RTN","DGQEHLL",31,0)
FINDLST(DGREQ) ;locate the last transmission record for a given request
"RTN","DGQEHLL",32,0)
 ;
"RTN","DGQEHLL",33,0)
 ;  Input:
"RTN","DGQEHLL",34,0)
 ;    DGIEN - pointer to VIC REQUEST (#39.6) file
"RTN","DGQEHLL",35,0)
 ;
"RTN","DGQEHLL",36,0)
 ;  Output:
"RTN","DGQEHLL",37,0)
 ;   Function value - IEN of VIC HL7 TRANSMISSION LOG (#39.7) on success,
"RTN","DGQEHLL",38,0)
 ;                    0 on failure
"RTN","DGQEHLL",39,0)
 ;
"RTN","DGQEHLL",40,0)
 N DGDAT
"RTN","DGQEHLL",41,0)
 ;
"RTN","DGQEHLL",42,0)
 S DGDAT=+$O(^DGQE(39.7,"ADATE",DGREQ,""),-1)
"RTN","DGQEHLL",43,0)
 Q +$O(^DGQE(39.7,"ADATE",DGREQ,DGDAT,0))
"RTN","DGQEHLL",44,0)
 ;
"RTN","DGQEHLL",45,0)
 ;
"RTN","DGQEHLL",46,0)
GETLOG(DGIEN,DGLOG) ;retrieve a single record
"RTN","DGQEHLL",47,0)
 ; This function retrieves all fields belonging to a single record
"RTN","DGQEHLL",48,0)
 ; in the VIC HL7 TRANSMISSION LOG (#39.7) file for a given IEN.
"RTN","DGQEHLL",49,0)
 ; The field data is placed in an array format.
"RTN","DGQEHLL",50,0)
 ;
"RTN","DGQEHLL",51,0)
 ;  Input:
"RTN","DGQEHLL",52,0)
 ;    DGIEN - VIC HL7 TRANSMISSION LOG (#39.7) file record number
"RTN","DGQEHLL",53,0)
 ;
"RTN","DGQEHLL",54,0)
 ;  Output:
"RTN","DGQEHLL",55,0)
 ;   Function value - 1 on success, 0 on failure
"RTN","DGQEHLL",56,0)
 ;    DGLOG - array of field data
"RTN","DGQEHLL",57,0)
 ;            Array subscripts are:
"RTN","DGQEHLL",58,0)
 ;             "HLMID"  - HL7 Message ID
"RTN","DGQEHLL",59,0)
 ;             "REQIEN" - pointer to request in VIC REQUEST (#39.6) file
"RTN","DGQEHLL",60,0)
 ;             "XMITDT" - HL7 Transmission date/time
"RTN","DGQEHLL",61,0)
 ;             "XMSTAT" - Transmission status
"RTN","DGQEHLL",62,0)
 ;             "ACKDT"  - ACK received date/time
"RTN","DGQEHLL",63,0)
 ;
"RTN","DGQEHLL",64,0)
 N DGERR   ;FM result error message
"RTN","DGQEHLL",65,0)
 N DGFIL   ;FM file number
"RTN","DGQEHLL",66,0)
 N DGFLD   ;FM result field array
"RTN","DGQEHLL",67,0)
 N DGIENS  ;FM IENS value
"RTN","DGQEHLL",68,0)
 N DGRSLT  ;function value
"RTN","DGQEHLL",69,0)
 ;
"RTN","DGQEHLL",70,0)
 S DGRSLT=0
"RTN","DGQEHLL",71,0)
 S DGFIL=39.7
"RTN","DGQEHLL",72,0)
 ;
"RTN","DGQEHLL",73,0)
 I $G(DGIEN),$D(^DGQE(DGFIL,DGIEN)) D
"RTN","DGQEHLL",74,0)
 . S DGIENS=DGIEN_","
"RTN","DGQEHLL",75,0)
 . D GETS^DIQ(DGFIL,DGIENS,"*","I","DGFLD","DGERR")
"RTN","DGQEHLL",76,0)
 . Q:$D(DGERR)
"RTN","DGQEHLL",77,0)
 . S DGLOG("HLMID")=$G(DGFLD(DGFIL,DGIENS,.01,"I"))
"RTN","DGQEHLL",78,0)
 . S DGLOG("REQIEN")=$G(DGFLD(DGFIL,DGIENS,.02,"I"))
"RTN","DGQEHLL",79,0)
 . S DGLOG("XMITDT")=$G(DGFLD(DGFIL,DGIENS,.03,"I"))
"RTN","DGQEHLL",80,0)
 . S DGLOG("XMSTAT")=$G(DGFLD(DGFIL,DGIENS,.04,"I"))
"RTN","DGQEHLL",81,0)
 . S DGLOG("ACKDT")=$G(DGFLD(DGFIL,DGIENS,.05,"I"))
"RTN","DGQEHLL",82,0)
 . S DGRSLT=1  ;success
"RTN","DGQEHLL",83,0)
 ;
"RTN","DGQEHLL",84,0)
 Q DGRSLT
"RTN","DGQEHLL",85,0)
 ;
"RTN","DGQEHLL",86,0)
 ;
"RTN","DGQEHLL",87,0)
STOXMIT(DGMID,DGRIEN) ;create a transmit record
"RTN","DGQEHLL",88,0)
 ; This procedure creates a record in the VIC HL7 TRANSMISSION LOG
"RTN","DGQEHLL",89,0)
 ; (#39.7) file.
"RTN","DGQEHLL",90,0)
 ;
"RTN","DGQEHLL",91,0)
 ;  Input:
"RTN","DGQEHLL",92,0)
 ;    DGMID  - HL7 Message Control ID
"RTN","DGQEHLL",93,0)
 ;    DGRIEN - IEN of record in VIC REQUEST (#39.6) file
"RTN","DGQEHLL",94,0)
 ;
"RTN","DGQEHLL",95,0)
 ;  Output:
"RTN","DGQEHLL",96,0)
 ;    none
"RTN","DGQEHLL",97,0)
 ;
"RTN","DGQEHLL",98,0)
 N DGERR
"RTN","DGQEHLL",99,0)
 N DGFDA
"RTN","DGQEHLL",100,0)
 N DGFIL
"RTN","DGQEHLL",101,0)
 N DGIEN
"RTN","DGQEHLL",102,0)
 N DGIENS
"RTN","DGQEHLL",103,0)
 ;
"RTN","DGQEHLL",104,0)
 ;validate input params
"RTN","DGQEHLL",105,0)
 Q:$G(DGMID)'>0
"RTN","DGQEHLL",106,0)
 Q:'$G(DGRIEN)
"RTN","DGQEHLL",107,0)
 Q:'$D(^DGQE(39.6,DGRIEN))
"RTN","DGQEHLL",108,0)
 ;
"RTN","DGQEHLL",109,0)
 S DGFIL=39.7
"RTN","DGQEHLL",110,0)
 S DGIEN=$$FINDMID(DGMID)
"RTN","DGQEHLL",111,0)
 S DGIENS=$S('DGIEN:"+1,",1:DGIEN_",")
"RTN","DGQEHLL",112,0)
 ;
"RTN","DGQEHLL",113,0)
 S DGFDA(DGFIL,DGIENS,.01)=DGMID
"RTN","DGQEHLL",114,0)
 S DGFDA(DGFIL,DGIENS,.02)=DGRIEN
"RTN","DGQEHLL",115,0)
 S DGFDA(DGFIL,DGIENS,.03)=$$NOW^XLFDT()
"RTN","DGQEHLL",116,0)
 S DGFDA(DGFIL,DGIENS,.04)="T"  ;transmitted
"RTN","DGQEHLL",117,0)
 D UPDATE^DIE("","DGFDA","","DGERR")
"RTN","DGQEHLL",118,0)
 ;
"RTN","DGQEHLL",119,0)
 Q
"RTN","DGQEHLL",120,0)
 ;
"RTN","DGQEHLL",121,0)
 ;
"RTN","DGQEHLL",122,0)
STOACK(DGIEN,DGSTAT) ;update STATUS
"RTN","DGQEHLL",123,0)
 ; This procedure updates the STATUS (#.04) field of the VIC HL7
"RTN","DGQEHLL",124,0)
 ; TRANSMISSION LOG (#39.7) file
"RTN","DGQEHLL",125,0)
 ;
"RTN","DGQEHLL",126,0)
 ;  Input:
"RTN","DGQEHLL",127,0)
 ;    DGIEN  - IEN of record in VIC HL7 TRANSMISSION LOG (#39.7) file
"RTN","DGQEHLL",128,0)
 ;    DGSTAT - transmission status ("A":Accepted,"RJ":Rejected)
"RTN","DGQEHLL",129,0)
 ;
"RTN","DGQEHLL",130,0)
 ;  Output:
"RTN","DGQEHLL",131,0)
 ;    none
"RTN","DGQEHLL",132,0)
 ;
"RTN","DGQEHLL",133,0)
 N DGERR
"RTN","DGQEHLL",134,0)
 N DGFDA
"RTN","DGQEHLL",135,0)
 N DGIENS
"RTN","DGQEHLL",136,0)
 ;
"RTN","DGQEHLL",137,0)
 ;validate input params
"RTN","DGQEHLL",138,0)
 Q:'$G(DGIEN)
"RTN","DGQEHLL",139,0)
 Q:$G(DGSTAT)']""
"RTN","DGQEHLL",140,0)
 Q:$$EXTERNAL^DILFD(39.7,.04,"F",DGSTAT,"")']""
"RTN","DGQEHLL",141,0)
 ;
"RTN","DGQEHLL",142,0)
 S DGIENS=DGIEN_","
"RTN","DGQEHLL",143,0)
 S DGFDA(39.7,DGIENS,.04)=DGSTAT
"RTN","DGQEHLL",144,0)
 S DGFDA(39.7,DGIENS,.05)=$$NOW^XLFDT()
"RTN","DGQEHLL",145,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEHLL",146,0)
 Q
"RTN","DGQEHLL",147,0)
 ;
"RTN","DGQEHLL",148,0)
 ;
"RTN","DGQEHLL",149,0)
DELXMIT(DGIEN) ;delete a single VIC HL7 TRANSMISSION LOG record
"RTN","DGQEHLL",150,0)
 ;
"RTN","DGQEHLL",151,0)
 ;  Input:
"RTN","DGQEHLL",152,0)
 ;    DGIEN - IEN of record in VIC HL7 TRANSMISSION LOG (#39.7) file
"RTN","DGQEHLL",153,0)
 ;
"RTN","DGQEHLL",154,0)
 ;  Output:
"RTN","DGQEHLL",155,0)
 ;    Function value - 1 on success, 0 on failure
"RTN","DGQEHLL",156,0)
 ;
"RTN","DGQEHLL",157,0)
 N DGERR
"RTN","DGQEHLL",158,0)
 N DGFDA
"RTN","DGQEHLL",159,0)
 N DGRSLT  ;function value
"RTN","DGQEHLL",160,0)
 ;
"RTN","DGQEHLL",161,0)
 S DGRSLT=0
"RTN","DGQEHLL",162,0)
 I $G(DGIEN) D
"RTN","DGQEHLL",163,0)
 . S DGFDA(39.7,DGIEN_",",.01)="@"
"RTN","DGQEHLL",164,0)
 . D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEHLL",165,0)
 . Q:$D(DGERR)
"RTN","DGQEHLL",166,0)
 . S DGRSLT=1  ;success
"RTN","DGQEHLL",167,0)
 ;
"RTN","DGQEHLL",168,0)
 Q DGRSLT
"RTN","DGQEHLOR")
0^10^B8348816
"RTN","DGQEHLOR",1,0)
DGQEHLOR ;ALB/RPM - VIC REPLACEMENT HL7 BUILD ORC SEGMENT ; 2/23/04
"RTN","DGQEHLOR",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLOR",3,0)
 ;
"RTN","DGQEHLOR",4,0)
 Q
"RTN","DGQEHLOR",5,0)
 ;
"RTN","DGQEHLOR",6,0)
ORC(DGREQ,DGFLD,DGHL) ;ORC Segment API
"RTN","DGQEHLOR",7,0)
 ;This function wraps the data retrieval and segment creation APIs and
"RTN","DGQEHLOR",8,0)
 ;returns a formatted ORC segment.
"RTN","DGQEHLOR",9,0)
 ;
"RTN","DGQEHLOR",10,0)
 ;  Input:
"RTN","DGQEHLOR",11,0)
 ;     DGREQ - (required) VIC REQUEST data array
"RTN","DGQEHLOR",12,0)
 ;     DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGQEHLOR",13,0)
 ;             to include.  Defaults to all required fields (4).
"RTN","DGQEHLOR",14,0)
 ;      DGHL - HL7 environment array
"RTN","DGQEHLOR",15,0)
 ;
"RTN","DGQEHLOR",16,0)
 ;  Output:
"RTN","DGQEHLOR",17,0)
 ;   Function Value - ORC segment on success, "" on failure
"RTN","DGQEHLOR",18,0)
 ;
"RTN","DGQEHLOR",19,0)
 N DGORC
"RTN","DGQEHLOR",20,0)
 N DGVAL
"RTN","DGQEHLOR",21,0)
 ;
"RTN","DGQEHLOR",22,0)
 S DGORC=""
"RTN","DGQEHLOR",23,0)
 I $D(DGREQ) D
"RTN","DGQEHLOR",24,0)
 . S DGFLD=$$CKSTR^DGQEHLUT("1",DGFLD)  ;validate the field string
"RTN","DGQEHLOR",25,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGQEHLOR",26,0)
 . I $$ORCVAL(DGFLD,.DGREQ,.DGVAL) D
"RTN","DGQEHLOR",27,0)
 . . S DGORC=$$BLDSEG^DGQEHLUT("ORC",.DGVAL,.DGHL)
"RTN","DGQEHLOR",28,0)
 Q DGORC
"RTN","DGQEHLOR",29,0)
 ;
"RTN","DGQEHLOR",30,0)
ORCVAL(DGFLD,DGREQ,DGVAL) ;build ORC value array
"RTN","DGQEHLOR",31,0)
 ;
"RTN","DGQEHLOR",32,0)
 ;  Input:
"RTN","DGQEHLOR",33,0)
 ;     DGFLD - (required) Fields string
"RTN","DGQEHLOR",34,0)
 ;     DGREQ - (required) VIC REQUEST data array
"RTN","DGQEHLOR",35,0)
 ;
"RTN","DGQEHLOR",36,0)
 ;  Output:
"RTN","DGQEHLOR",37,0)
 ;   Function Value - 1 on sucess, 0 on failure
"RTN","DGQEHLOR",38,0)
 ;            DGVAL - ORC field array [SUB1:field, SUB2:repetition,
"RTN","DGQEHLOR",39,0)
 ;                                    SUB3:component, SUB4:sub-component]
"RTN","DGQEHLOR",40,0)
 ;
"RTN","DGQEHLOR",41,0)
 N DGRSLT  ;function value
"RTN","DGQEHLOR",42,0)
 N DGSTAT  ;temp value of DGREQ("CPRSTAT")
"RTN","DGQEHLOR",43,0)
 ;
"RTN","DGQEHLOR",44,0)
 S DGRSLT=0
"RTN","DGQEHLOR",45,0)
 I $G(DGFLD)]"",+$G(DGREQ("DFN"))>0,$G(DGREQ("CARDID"))]"" D
"RTN","DGQEHLOR",46,0)
 . ;
"RTN","DGQEHLOR",47,0)
 . ; seq 1 Order Control
"RTN","DGQEHLOR",48,0)
 . I DGFLD[",1," D   ;required field
"RTN","DGQEHLOR",49,0)
 . . S DGSTAT=$G(DGREQ("CPRSTAT"))
"RTN","DGQEHLOR",50,0)
 . . S DGVAL(1)=$S(DGSTAT="P":"RL",DGSTAT="C":"CA",DGSTAT="I":"CA",1:"")
"RTN","DGQEHLOR",51,0)
 . Q:DGVAL(1)=""
"RTN","DGQEHLOR",52,0)
 . ;
"RTN","DGQEHLOR",53,0)
 . ; seq 2 Placer Order Number
"RTN","DGQEHLOR",54,0)
 . I DGFLD[",2," D
"RTN","DGQEHLOR",55,0)
 . ;
"RTN","DGQEHLOR",56,0)
 . ; seq 3 Filler Order Number
"RTN","DGQEHLOR",57,0)
 . I DGFLD[",3," D
"RTN","DGQEHLOR",58,0)
 . ;
"RTN","DGQEHLOR",59,0)
 . ; seq 4 Placer Group Number
"RTN","DGQEHLOR",60,0)
 . I DGFLD[",4," D
"RTN","DGQEHLOR",61,0)
 . ;
"RTN","DGQEHLOR",62,0)
 . ; seq 5 Order Status
"RTN","DGQEHLOR",63,0)
 . I DGFLD[",5," D
"RTN","DGQEHLOR",64,0)
 . ;
"RTN","DGQEHLOR",65,0)
 . ; seq 6 Response Flag
"RTN","DGQEHLOR",66,0)
 . I DGFLD[",6," D
"RTN","DGQEHLOR",67,0)
 . ;
"RTN","DGQEHLOR",68,0)
 . ; seq 7 Quantity/Timing
"RTN","DGQEHLOR",69,0)
 . I DGFLD[",7," D
"RTN","DGQEHLOR",70,0)
 . ;
"RTN","DGQEHLOR",71,0)
 . ; seq 8 Parent
"RTN","DGQEHLOR",72,0)
 . I DGFLD[",8," D
"RTN","DGQEHLOR",73,0)
 . ;
"RTN","DGQEHLOR",74,0)
 . ; seq 9 Date/Time of Transaction
"RTN","DGQEHLOR",75,0)
 . I DGFLD[",9," D
"RTN","DGQEHLOR",76,0)
 . ;
"RTN","DGQEHLOR",77,0)
 . ; seq 10 Entered By
"RTN","DGQEHLOR",78,0)
 . I DGFLD[",10," D
"RTN","DGQEHLOR",79,0)
 . ;
"RTN","DGQEHLOR",80,0)
 . ; seq 11 Verified By
"RTN","DGQEHLOR",81,0)
 . I DGFLD[",11," D
"RTN","DGQEHLOR",82,0)
 . ;
"RTN","DGQEHLOR",83,0)
 . ; seq 12 Ordering Provider
"RTN","DGQEHLOR",84,0)
 . I DGFLD[",12," D
"RTN","DGQEHLOR",85,0)
 . ;
"RTN","DGQEHLOR",86,0)
 . ; seq 13 Enterer's Location
"RTN","DGQEHLOR",87,0)
 . I DGFLD[",13," D
"RTN","DGQEHLOR",88,0)
 . ;
"RTN","DGQEHLOR",89,0)
 . ; seq 14 Call Back Phone Number
"RTN","DGQEHLOR",90,0)
 . I DGFLD[",14," D
"RTN","DGQEHLOR",91,0)
 . ;
"RTN","DGQEHLOR",92,0)
 . ; seq 15 Order Effective Date/Time
"RTN","DGQEHLOR",93,0)
 . I DGFLD[",15," D
"RTN","DGQEHLOR",94,0)
 . ;
"RTN","DGQEHLOR",95,0)
 . ; seq 16 Order Control Code Reason
"RTN","DGQEHLOR",96,0)
 . I DGFLD[",16," D
"RTN","DGQEHLOR",97,0)
 . ;
"RTN","DGQEHLOR",98,0)
 . ; seq 17 Entering Organization
"RTN","DGQEHLOR",99,0)
 . I DGFLD[",17," D
"RTN","DGQEHLOR",100,0)
 . ;
"RTN","DGQEHLOR",101,0)
 . ; seq 18 Entering Device
"RTN","DGQEHLOR",102,0)
 . I DGFLD[",18," D
"RTN","DGQEHLOR",103,0)
 . ;
"RTN","DGQEHLOR",104,0)
 . ; seq 19 Action By
"RTN","DGQEHLOR",105,0)
 . I DGFLD[",19," D
"RTN","DGQEHLOR",106,0)
 . ;
"RTN","DGQEHLOR",107,0)
 . S DGRSLT=1
"RTN","DGQEHLOR",108,0)
 I 'DGRSLT K DGVAL
"RTN","DGQEHLOR",109,0)
 Q DGRSLT
"RTN","DGQEHLR")
0^9^B22790856
"RTN","DGQEHLR",1,0)
DGQEHLR ;ALB/RPM - VIC REPLACEMENT HL7 RECEIVE DRIVER ; 10/6/03
"RTN","DGQEHLR",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLR",3,0)
 ;
"RTN","DGQEHLR",4,0)
RCV ;
"RTN","DGQEHLR",5,0)
 N DGCNT
"RTN","DGQEHLR",6,0)
 N DGMSGTYP
"RTN","DGQEHLR",7,0)
 N DGSEG
"RTN","DGQEHLR",8,0)
 N DGSEGCNT
"RTN","DGQEHLR",9,0)
 N DGWRK
"RTN","DGQEHLR",10,0)
 ;
"RTN","DGQEHLR",11,0)
 S DGWRK=$NA(^TMP("DGPFHL7",$J))
"RTN","DGQEHLR",12,0)
 K @DGWRK
"RTN","DGQEHLR",13,0)
 ;
"RTN","DGQEHLR",14,0)
 ;load work global with segments
"RTN","DGQEHLR",15,0)
 F DGSEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","DGQEHLR",16,0)
 . S DGCNT=0
"RTN","DGQEHLR",17,0)
 . S @DGWRK@(DGSEGCNT,DGCNT)=HLNODE
"RTN","DGQEHLR",18,0)
 . F  S DGCNT=$O(HLNODE(DGCNT)) Q:'DGCNT  D
"RTN","DGQEHLR",19,0)
 . . S @DGWRK@(DGSEGCNT,DGCNT)=HLNODE(DGCNT)
"RTN","DGQEHLR",20,0)
 ;
"RTN","DGQEHLR",21,0)
 ;get message type from first segment
"RTN","DGQEHLR",22,0)
 I $$NXTSEG^DGQEHLUT(DGWRK,0,HL("FS"),.DGSEG),$G(DGSEG("TYPE"))="MSH" D
"RTN","DGQEHLR",23,0)
 . S DGMSGTYP=$P(DGSEG(9),$E(HL("ECH"),1),1)
"RTN","DGQEHLR",24,0)
 . I DGMSGTYP=HL("MTN") D RCVORR(DGWRK,.HL)
"RTN","DGQEHLR",25,0)
 ;
"RTN","DGQEHLR",26,0)
 ;cleanup
"RTN","DGQEHLR",27,0)
 K @DGWRK
"RTN","DGQEHLR",28,0)
 Q
"RTN","DGQEHLR",29,0)
 ;
"RTN","DGQEHLR",30,0)
RCVORR(DGWRK,DGHL) ;process a single ORR~O02 message
"RTN","DGQEHLR",31,0)
 ;
"RTN","DGQEHLR",32,0)
 ;  Input:
"RTN","DGQEHLR",33,0)
 ;    DGWRK - temporary segment work array
"RTN","DGQEHLR",34,0)
 ;     DGHL - VistA HL7 environment array
"RTN","DGQEHLR",35,0)
 ;
"RTN","DGQEHLR",36,0)
 ;  Output:
"RTN","DGQEHLR",37,0)
 ;    none
"RTN","DGQEHLR",38,0)
 ;
"RTN","DGQEHLR",39,0)
 N DGORR
"RTN","DGQEHLR",40,0)
 N DGLIEN
"RTN","DGQEHLR",41,0)
 N DGSTAT
"RTN","DGQEHLR",42,0)
 ;
"RTN","DGQEHLR",43,0)
 D PARSORR(DGWRK,.DGHL,.DGORR)
"RTN","DGQEHLR",44,0)
 ;
"RTN","DGQEHLR",45,0)
 I +$G(DGORR("MSGID")),$G(DGORR("ACKCODE"))]"" D
"RTN","DGQEHLR",46,0)
 . S DGLIEN=$$FINDMID^DGQEHLL(DGORR("MSGID"))
"RTN","DGQEHLR",47,0)
 . Q:'DGLIEN
"RTN","DGQEHLR",48,0)
 . ;
"RTN","DGQEHLR",49,0)
 . I DGORR("ACKCODE")="AA" S DGSTAT="A"
"RTN","DGQEHLR",50,0)
 . E  D
"RTN","DGQEHLR",51,0)
 . . S DGSTAT="RJ"
"RTN","DGQEHLR",52,0)
 . . ;send bulletin indicating failed NCMD update
"RTN","DGQEHLR",53,0)
 . . D SENDBULL(DGLIEN,.DGORR)
"RTN","DGQEHLR",54,0)
 . ;
"RTN","DGQEHLR",55,0)
 . ;remove "H"old event entry from VIC HL7 TRANSMISSION LOG (#39.6) file
"RTN","DGQEHLR",56,0)
 . D STOACK^DGQEHLL(DGLIEN,DGSTAT)
"RTN","DGQEHLR",57,0)
 ;
"RTN","DGQEHLR",58,0)
 Q
"RTN","DGQEHLR",59,0)
 ;
"RTN","DGQEHLR",60,0)
PARSORR(DGWRK,DGHL,DGORR) ;Parse ORR Message/Segments
"RTN","DGQEHLR",61,0)
 ;
"RTN","DGQEHLR",62,0)
 ;  Input:
"RTN","DGQEHLR",63,0)
 ;    DGWRK - Closed root work global reference
"RTN","DGQEHLR",64,0)
 ;     DGHL - HL7 environment array
"RTN","DGQEHLR",65,0)
 ;
"RTN","DGQEHLR",66,0)
 ;  Output:
"RTN","DGQEHLR",67,0)
 ;    DGORR - array of ACK results
"RTN","DGQEHLR",68,0)
 ;
"RTN","DGQEHLR",69,0)
 N DGFS
"RTN","DGQEHLR",70,0)
 N DGCS
"RTN","DGQEHLR",71,0)
 N DGRS
"RTN","DGQEHLR",72,0)
 N DGSS
"RTN","DGQEHLR",73,0)
 N DGCURLIN
"RTN","DGQEHLR",74,0)
 ;
"RTN","DGQEHLR",75,0)
 S DGFS=DGHL("FS")
"RTN","DGQEHLR",76,0)
 S DGCS=$E(DGHL("ECH"),1)
"RTN","DGQEHLR",77,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGQEHLR",78,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGQEHLR",79,0)
 S DGCURLIN=0
"RTN","DGQEHLR",80,0)
 ;
"RTN","DGQEHLR",81,0)
 ;loop through the message segments and retrieve the field data
"RTN","DGQEHLR",82,0)
 F  D  Q:'DGCURLIN
"RTN","DGQEHLR",83,0)
 . N DGSEG
"RTN","DGQEHLR",84,0)
 . S DGCURLIN=$$NXTSEG^DGQEHLUT(DGWRK,DGCURLIN,DGFS,.DGSEG)
"RTN","DGQEHLR",85,0)
 . Q:'DGCURLIN
"RTN","DGQEHLR",86,0)
 . D @(DGSEG("TYPE")_"(.DGSEG,DGCS,DGRS,DGSS,.DGORR)")
"RTN","DGQEHLR",87,0)
 Q
"RTN","DGQEHLR",88,0)
 ;
"RTN","DGQEHLR",89,0)
MSH(DGSEG,DGCS,DGRS,DGSS,DGORR) ;
"RTN","DGQEHLR",90,0)
 ;
"RTN","DGQEHLR",91,0)
 ;  Input:
"RTN","DGQEHLR",92,0)
 ;    DGSEG - MSH segment field array
"RTN","DGQEHLR",93,0)
 ;     DGCS - HL7 component separator
"RTN","DGQEHLR",94,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGQEHLR",95,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGQEHLR",96,0)
 ;
"RTN","DGQEHLR",97,0)
 ;  Output:
"RTN","DGQEHLR",98,0)
 ;    DGORR - array of ACK results
"RTN","DGQEHLR",99,0)
 ;            "SNDFAC" - sending facility
"RTN","DGQEHLR",100,0)
 ;            "RCVFAC" - receiving facility
"RTN","DGQEHLR",101,0)
 ;            "MSGDTM" - message creation date/time in FileMan format
"RTN","DGQEHLR",102,0)
 ;
"RTN","DGQEHLR",103,0)
 S DGORR("SNDFAC")=$P($G(DGSEG(4)),DGCS,1)
"RTN","DGQEHLR",104,0)
 S DGORR("RCVFAC")=$P($G(DGSEG(6)),DGCS,1)
"RTN","DGQEHLR",105,0)
 S DGORR("MSGDTM")=$$HL7TFM^XLFDT($G(DGSEG(7)))
"RTN","DGQEHLR",106,0)
 Q
"RTN","DGQEHLR",107,0)
 ;
"RTN","DGQEHLR",108,0)
MSA(DGSEG,DGCS,DGRS,DGSS,DGORR) ;
"RTN","DGQEHLR",109,0)
 ;
"RTN","DGQEHLR",110,0)
 ;  Input:
"RTN","DGQEHLR",111,0)
 ;    DGSEG - MSH segment field array
"RTN","DGQEHLR",112,0)
 ;     DGCS - HL7 component separator
"RTN","DGQEHLR",113,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGQEHLR",114,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGQEHLR",115,0)
 ;
"RTN","DGQEHLR",116,0)
 ;  Output:
"RTN","DGQEHLR",117,0)
 ;    DGORR - array of ACK results
"RTN","DGQEHLR",118,0)
 ;            "ACKCODE" - Acknowledgment code
"RTN","DGQEHLR",119,0)
 ;            "MSGID" - Message Control ID of the message being ACK'ed
"RTN","DGQEHLR",120,0)
 ;            "ERR",# - Error field defined on failure
"RTN","DGQEHLR",121,0)
 ;
"RTN","DGQEHLR",122,0)
 N DGCNT
"RTN","DGQEHLR",123,0)
 ;
"RTN","DGQEHLR",124,0)
 S DGORR("ACKCODE")=$G(DGSEG(1))
"RTN","DGQEHLR",125,0)
 S DGORR("MSGID")=$G(DGSEG(2))
"RTN","DGQEHLR",126,0)
 I DGORR("ACKCODE")'="AA",$G(DGSEG(6))]"" D
"RTN","DGQEHLR",127,0)
 . S DGCNT=$O(DGORR("ERR",""),-1),DGCNT=DGCNT+1
"RTN","DGQEHLR",128,0)
 . S DGORR("ERR",DGCNT)=$P(DGSEG(6),DGCS,1)
"RTN","DGQEHLR",129,0)
 Q
"RTN","DGQEHLR",130,0)
 ;
"RTN","DGQEHLR",131,0)
SENDBULL(DGLIEN,DGORR) ;build and send error bulletin
"RTN","DGQEHLR",132,0)
 ;
"RTN","DGQEHLR",133,0)
 ;  Input:
"RTN","DGQEHLR",134,0)
 ;    DGLIEN - IEN of VIC HL7 TRANSMISSION LOG (#39.7)
"RTN","DGQEHLR",135,0)
 ;     DGORR - array of parsed ACK results
"RTN","DGQEHLR",136,0)
 ;            "SNDFAC" - sending facility
"RTN","DGQEHLR",137,0)
 ;            "RCVFAC" - receiving facility
"RTN","DGQEHLR",138,0)
 ;            "MSGDTM" - message creation date/time in FileMan format
"RTN","DGQEHLR",139,0)
 ;            "ACKCODE" - Acknowledgment code
"RTN","DGQEHLR",140,0)
 ;            "MSGID" - Message Control ID of the message being ACK'ed
"RTN","DGQEHLR",141,0)
 ;            "ERR",# - Error field defined on failure
"RTN","DGQEHLR",142,0)
 ;
"RTN","DGQEHLR",143,0)
 ;  Output:
"RTN","DGQEHLR",144,0)
 ;    none
"RTN","DGQEHLR",145,0)
 ;
"RTN","DGQEHLR",146,0)
 N XMB    ;name of bulletin and parameter array
"RTN","DGQEHLR",147,0)
 N XMDUZ  ;sending user
"RTN","DGQEHLR",148,0)
 N XMSUB  ;bulletin subject
"RTN","DGQEHLR",149,0)
 N XMTEXT  ;additional text for rejection reasons
"RTN","DGQEHLR",150,0)
 N DGLOG  ;VIC HL7 TRANSMISSION LOG data array
"RTN","DGQEHLR",151,0)
 N DGREQ  ;VIC REQUEST data array
"RTN","DGQEHLR",152,0)
 ;
"RTN","DGQEHLR",153,0)
 I +$G(DGLIEN) D
"RTN","DGQEHLR",154,0)
 . ;
"RTN","DGQEHLR",155,0)
 . ;retrieve HL7 LOG data
"RTN","DGQEHLR",156,0)
 . Q:'$$GETLOG^DGQEHLL(DGLIEN,.DGLOG)
"RTN","DGQEHLR",157,0)
 . ;
"RTN","DGQEHLR",158,0)
 . ;retrieve VIC REQUEST data
"RTN","DGQEHLR",159,0)
 . Q:'$$GETREQ^DGQEREQ($G(DGLOG("REQIEN")),.DGREQ)
"RTN","DGQEHLR",160,0)
 . ;
"RTN","DGQEHLR",161,0)
 . ;load bulletin params
"RTN","DGQEHLR",162,0)
 . S XMB(1)=$$FMTE^XLFDT($$NOW^XLFDT())
"RTN","DGQEHLR",163,0)
 . S XMB(2)=$G(DGREQ("NAME"))
"RTN","DGQEHLR",164,0)
 . S XMB(3)=$G(DGREQ("CARDID"))
"RTN","DGQEHLR",165,0)
 . S XMB(4)=$S($G(DGREQ("CPRSTAT"))="P":"Release and print previously held VIC request",1:"Cancel VIC request")
"RTN","DGQEHLR",166,0)
 . S XMB(5)=$G(DGLOG("HLMID"))
"RTN","DGQEHLR",167,0)
 . S XMB(6)=$$FMTE^XLFDT($G(DGLOG("XMITDT")))
"RTN","DGQEHLR",168,0)
 . I $D(DGORR("ERR")) D
"RTN","DGQEHLR",169,0)
 . . S XMTEXT=$NA(^TMP("DGQEBULL",$J))
"RTN","DGQEHLR",170,0)
 . . K @XMTEXT
"RTN","DGQEHLR",171,0)
 . . S @XMTEXT@(1)=" "
"RTN","DGQEHLR",172,0)
 . . S @XMTEXT@(2)="  Reason(s) for rejection:"
"RTN","DGQEHLR",173,0)
 . . S DGCNT=0
"RTN","DGQEHLR",174,0)
 . . F  S DGCNT=$O(DGORR("ERR",DGCNT)) Q:'DGCNT  D
"RTN","DGQEHLR",175,0)
 . . . S @XMTEXT@(DGCNT+2)="    #"_DGCNT_":"_" "_DGORR("ERR",DGCNT)
"RTN","DGQEHLR",176,0)
 . ;
"RTN","DGQEHLR",177,0)
 . S XMB="DGQE HL7ERR"
"RTN","DGQEHLR",178,0)
 . S XMDUZ="VIC NCMD HL7 INTERFACE MODULE"
"RTN","DGQEHLR",179,0)
 . S XMSUB="VIC HL7 ERROR"
"RTN","DGQEHLR",180,0)
 . D ^XMB
"RTN","DGQEHLR",181,0)
 . I $G(XMTEXT)]"" K @XMTEXT
"RTN","DGQEHLR",182,0)
 Q
"RTN","DGQEHLRQ")
0^19^B4995351
"RTN","DGQEHLRQ",1,0)
DGQEHLRQ ;ALB/RPM - VIC REPLACEMENT HL7 BUILD RQD SEGMENT ;1/20/04
"RTN","DGQEHLRQ",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLRQ",3,0)
 ;
"RTN","DGQEHLRQ",4,0)
 Q
"RTN","DGQEHLRQ",5,0)
 ;
"RTN","DGQEHLRQ",6,0)
RQD(DGREQ,DGFLD,DGHL) ;RQD Segment API
"RTN","DGQEHLRQ",7,0)
 ;This function wraps the data retrieval and segment creation APIs and
"RTN","DGQEHLRQ",8,0)
 ;returns a formatted RQD segment.
"RTN","DGQEHLRQ",9,0)
 ;
"RTN","DGQEHLRQ",10,0)
 ;  Input:
"RTN","DGQEHLRQ",11,0)
 ;     DGREQ - (required) VIC REQUEST data array
"RTN","DGQEHLRQ",12,0)
 ;     DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGQEHLRQ",13,0)
 ;             to include.  Defaults to all required fields (4).
"RTN","DGQEHLRQ",14,0)
 ;      DGHL - HL7 environment array
"RTN","DGQEHLRQ",15,0)
 ;
"RTN","DGQEHLRQ",16,0)
 ;  Output:
"RTN","DGQEHLRQ",17,0)
 ;   Function Value - RQD segment on success, "" on failure
"RTN","DGQEHLRQ",18,0)
 ;
"RTN","DGQEHLRQ",19,0)
 N DGI
"RTN","DGQEHLRQ",20,0)
 N DGRQD
"RTN","DGQEHLRQ",21,0)
 N DGVAL
"RTN","DGQEHLRQ",22,0)
 ;
"RTN","DGQEHLRQ",23,0)
 S DGRQD=""
"RTN","DGQEHLRQ",24,0)
 I $D(DGREQ) D
"RTN","DGQEHLRQ",25,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGQEHLRQ",26,0)
 . ;validate the field string - at least one of the three fields RQD-2,
"RTN","DGQEHLRQ",27,0)
 . ;RQD-3 or RQD-4 must be valued.
"RTN","DGQEHLRQ",28,0)
 . F DGI=2:1:4 I DGFLD[(","_DGI_",") D  Q
"RTN","DGQEHLRQ",29,0)
 . . I $$RQDVAL(DGFLD,.DGREQ,.DGVAL) D
"RTN","DGQEHLRQ",30,0)
 . . . S DGRQD=$$BLDSEG^DGQEHLUT("RQD",.DGVAL,.DGHL)
"RTN","DGQEHLRQ",31,0)
 Q DGRQD
"RTN","DGQEHLRQ",32,0)
 ;
"RTN","DGQEHLRQ",33,0)
RQDVAL(DGFLD,DGREQ,DGVAL) ;build RQD value array
"RTN","DGQEHLRQ",34,0)
 ;
"RTN","DGQEHLRQ",35,0)
 ;  Input:
"RTN","DGQEHLRQ",36,0)
 ;     DGFLD - (required) Fields string
"RTN","DGQEHLRQ",37,0)
 ;     DGREQ - (required) VIC REQUEST data array
"RTN","DGQEHLRQ",38,0)
 ;
"RTN","DGQEHLRQ",39,0)
 ;  Output:
"RTN","DGQEHLRQ",40,0)
 ;   Function Value - 1 on sucess, 0 on failure
"RTN","DGQEHLRQ",41,0)
 ;            DGVAL - RQD field array [SUB1:field, SUB2:repetition,
"RTN","DGQEHLRQ",42,0)
 ;                                    SUB3:component, SUB4:sub-component]
"RTN","DGQEHLRQ",43,0)
 ;
"RTN","DGQEHLRQ",44,0)
 N DGRSLT  ;function value
"RTN","DGQEHLRQ",45,0)
 ;
"RTN","DGQEHLRQ",46,0)
 S DGRSLT=0
"RTN","DGQEHLRQ",47,0)
 I $G(DGFLD)]"",+$G(DGREQ("DFN"))>0 D
"RTN","DGQEHLRQ",48,0)
 . ;
"RTN","DGQEHLRQ",49,0)
 . ; seq 1 Requisition Line Number
"RTN","DGQEHLRQ",50,0)
 . I DGFLD[",1," D
"RTN","DGQEHLRQ",51,0)
 . . S DGVAL(1)=1  ;always "1"
"RTN","DGQEHLRQ",52,0)
 . ;
"RTN","DGQEHLRQ",53,0)
 . ; seq 2 Item Code - Internal
"RTN","DGQEHLRQ",54,0)
 . I DGFLD[",2," D
"RTN","DGQEHLRQ",55,0)
 . ;
"RTN","DGQEHLRQ",56,0)
 . ; seq 3 Item Code - External  ;required
"RTN","DGQEHLRQ",57,0)
 . I DGFLD[",3," D
"RTN","DGQEHLRQ",58,0)
 . . S DGVAL(3)=$G(DGREQ("CARDID"))
"RTN","DGQEHLRQ",59,0)
 . Q:DGVAL(3)=""
"RTN","DGQEHLRQ",60,0)
 . ;
"RTN","DGQEHLRQ",61,0)
 . ; seq 4 Hospital Item Code
"RTN","DGQEHLRQ",62,0)
 . I DGFLD[",4," D
"RTN","DGQEHLRQ",63,0)
 . ;
"RTN","DGQEHLRQ",64,0)
 . ; seq 5 Requisition Quantity
"RTN","DGQEHLRQ",65,0)
 . I DGFLD[",5," D
"RTN","DGQEHLRQ",66,0)
 . ;
"RTN","DGQEHLRQ",67,0)
 . ; seq 6 Requisition Unit of Measure
"RTN","DGQEHLRQ",68,0)
 . I DGFLD[",6," D
"RTN","DGQEHLRQ",69,0)
 . ;
"RTN","DGQEHLRQ",70,0)
 . ; seq 7 Dept. Cost Center
"RTN","DGQEHLRQ",71,0)
 . I DGFLD[",7," D
"RTN","DGQEHLRQ",72,0)
 . ;
"RTN","DGQEHLRQ",73,0)
 . ; seq 8 Item Natural Account Code
"RTN","DGQEHLRQ",74,0)
 . I DGFLD[",8," D
"RTN","DGQEHLRQ",75,0)
 . ;
"RTN","DGQEHLRQ",76,0)
 . ; seq 9 Deliver To ID
"RTN","DGQEHLRQ",77,0)
 . I DGFLD[",9," D
"RTN","DGQEHLRQ",78,0)
 . ;
"RTN","DGQEHLRQ",79,0)
 . ; seq 10 Date Needed
"RTN","DGQEHLRQ",80,0)
 . I DGFLD[",10," D
"RTN","DGQEHLRQ",81,0)
 . ;
"RTN","DGQEHLRQ",82,0)
 . S DGRSLT=1
"RTN","DGQEHLRQ",83,0)
 I 'DGRSLT K DGVAL
"RTN","DGQEHLRQ",84,0)
 Q DGRSLT
"RTN","DGQEHLS")
0^6^B12241827
"RTN","DGQEHLS",1,0)
DGQEHLS ;ALB/RPM - VIC REPLACEMENT HL7 SEND DRIVER ; 2/23/04
"RTN","DGQEHLS",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLS",3,0)
 ;
"RTN","DGQEHLS",4,0)
 Q  ;no direct entry
"RTN","DGQEHLS",5,0)
 ;
"RTN","DGQEHLS",6,0)
SND(DGRIEN,DGERR) ;Send a single ORM orders message
"RTN","DGQEHLS",7,0)
 ; This function builds and transmits a General Order (ORM~O01)
"RTN","DGQEHLS",8,0)
 ; Message used to either release a hold on a Veteran ID Card (VIC)
"RTN","DGQEHLS",9,0)
 ; request or cancel the VIC request.
"RTN","DGQEHLS",10,0)
 ;
"RTN","DGQEHLS",11,0)
 ;  Input:
"RTN","DGQEHLS",12,0)
 ;    DGRIEN - pointer VIC REQUEST (#39.6) file
"RTN","DGQEHLS",13,0)
 ;
"RTN","DGQEHLS",14,0)
 ;  Output:
"RTN","DGQEHLS",15,0)
 ;    Function result - '1' on success; '0' on failure
"RTN","DGQEHLS",16,0)
 ;    DGERR - undefined on success; error message string on failure
"RTN","DGQEHLS",17,0)
 ;
"RTN","DGQEHLS",18,0)
 N DGERR     ;error text
"RTN","DGQEHLS",19,0)
 N DGHLEID   ;event protocol ID
"RTN","DGQEHLS",20,0)
 N DGHLRSLT  ;result from GENERATE API
"RTN","DGQEHLS",21,0)
 N DGREQ     ;VIC REQUEST data array
"RTN","DGQEHLS",22,0)
 N DGROOT    ;HL7 message text array name
"RTN","DGQEHLS",23,0)
 N DGRSLT    ;function result
"RTN","DGQEHLS",24,0)
 ;
"RTN","DGQEHLS",25,0)
 S DGROOT=$NA(^TMP("HLS",$J))
"RTN","DGQEHLS",26,0)
 K @DGROOT
"RTN","DGQEHLS",27,0)
 ;
"RTN","DGQEHLS",28,0)
 S DGRSLT=0
"RTN","DGQEHLS",29,0)
 ;
"RTN","DGQEHLS",30,0)
 I $G(DGRIEN)>0 D
"RTN","DGQEHLS",31,0)
 . ;
"RTN","DGQEHLS",32,0)
 . ;initialize HL7 environment
"RTN","DGQEHLS",33,0)
 . S DGHLEID=$$INIT^DGQEHLUT("DGQE VIC ORM/O01 EVENT",.DGHL)
"RTN","DGQEHLS",34,0)
 . I 'DGHLEID S DGERR="Unable to initialize HL7 environment"
"RTN","DGQEHLS",35,0)
 . Q:$D(DGERR)
"RTN","DGQEHLS",36,0)
 . ;
"RTN","DGQEHLS",37,0)
 . ;retrieve VIC REQUEST file record
"RTN","DGQEHLS",38,0)
 . I '$$GETREQ^DGQEREQ(DGRIEN,.DGREQ) D
"RTN","DGQEHLS",39,0)
 . . S DGERR="Unable to retrieve VIC REQUEST data"
"RTN","DGQEHLS",40,0)
 . Q:$D(DGERR)
"RTN","DGQEHLS",41,0)
 . ;
"RTN","DGQEHLS",42,0)
 . ;build ORM message
"RTN","DGQEHLS",43,0)
 . I '$$BLDORM(.DGREQ,DGROOT,.DGHL) D
"RTN","DGQEHLS",44,0)
 . . S DGERR="Unable to build ORM message text"
"RTN","DGQEHLS",45,0)
 . Q:$D(DGERR)
"RTN","DGQEHLS",46,0)
 . ;
"RTN","DGQEHLS",47,0)
 . ;transmit the message
"RTN","DGQEHLS",48,0)
 . D GENERATE^HLMA(DGHLEID,$S(DGROOT["^":"GM",1:"LM"),1,.DGHLRSLT)
"RTN","DGQEHLS",49,0)
 . I +$P(DGHLRSLT,U,2) S DGERR=$P(DGHLRSLT,U,2)
"RTN","DGQEHLS",50,0)
 . Q:$D(DGERR)
"RTN","DGQEHLS",51,0)
 . ;
"RTN","DGQEHLS",52,0)
 . ;set transmission log
"RTN","DGQEHLS",53,0)
 . D STOXMIT^DGQEHLL($P(DGHLRSLT,U),DGRIEN)
"RTN","DGQEHLS",54,0)
 . ;
"RTN","DGQEHLS",55,0)
 . ;clear transmission required flag
"RTN","DGQEHLS",56,0)
 . D XMITOFF^DGQEDD(DGRIEN)
"RTN","DGQEHLS",57,0)
 . ;
"RTN","DGQEHLS",58,0)
 . S DGRSLT=1
"RTN","DGQEHLS",59,0)
 ;
"RTN","DGQEHLS",60,0)
 K @DGROOT
"RTN","DGQEHLS",61,0)
 ;
"RTN","DGQEHLS",62,0)
 Q DGRSLT
"RTN","DGQEHLS",63,0)
 ;
"RTN","DGQEHLS",64,0)
BLDORM(DGREQ,DGROOT,DGHL) ;build segments for a single ORM message
"RTN","DGQEHLS",65,0)
 ;
"RTN","DGQEHLS",66,0)
 ;  Input:
"RTN","DGQEHLS",67,0)
 ;    DGREQ - (required) VIC REQUEST data array
"RTN","DGQEHLS",68,0)
 ;   DGROOT - (required) closed root array name to contain segments
"RTN","DGQEHLS",69,0)
 ;     DGHL - VistA HL7 environment array
"RTN","DGQEHLS",70,0)
 ;
"RTN","DGQEHLS",71,0)
 ;  Output:
"RTN","DGQEHLS",72,0)
 ;    Function value - "1" on sucess; "0" on failure
"RTN","DGQEHLS",73,0)
 ;
"RTN","DGQEHLS",74,0)
 N DGPTID    ;Patient ID field 3 of PID segment
"RTN","DGQEHLS",75,0)
 N DGRSLT    ;function result
"RTN","DGQEHLS",76,0)
 N DGSEG     ;segment counter
"RTN","DGQEHLS",77,0)
 N DGSEGSTR  ;formatted segment string
"RTN","DGQEHLS",78,0)
 N DGSTR     ;comma-delimited list of segment fields
"RTN","DGQEHLS",79,0)
 ;
"RTN","DGQEHLS",80,0)
 S DGRSLT=0
"RTN","DGQEHLS",81,0)
 S DGSEG=0
"RTN","DGQEHLS",82,0)
 I $D(DGREQ),$G(DGROOT)]"",$D(DGHL) D
"RTN","DGQEHLS",83,0)
 . Q:'$G(DGREQ("DFN"))
"RTN","DGQEHLS",84,0)
 . Q:'$D(^DPT(DGREQ("DFN")))
"RTN","DGQEHLS",85,0)
 . Q:$G(DGREQ("CARDID"))']""
"RTN","DGQEHLS",86,0)
 . ;
"RTN","DGQEHLS",87,0)
 . ;build PID segment
"RTN","DGQEHLS",88,0)
 . S DGSTR="1,2,3,5,7,19"  ;{3=ICN,5=NAME,7=DOB,19=SSN}
"RTN","DGQEHLS",89,0)
 . S DGSEGSTR=$$EN^VAFHLPID(DGREQ("DFN"),DGSTR,1,1)
"RTN","DGQEHLS",90,0)
 . Q:(DGSEGSTR="")
"RTN","DGQEHLS",91,0)
 . ;set Patient ID field 3 Check Digit component to null
"RTN","DGQEHLS",92,0)
 . S DGPTID=$P(DGSEGSTR,DGHL("FS"),4)
"RTN","DGQEHLS",93,0)
 . S $P(DGPTID,$E(DGHL("ECH")),2)=""
"RTN","DGQEHLS",94,0)
 . S $P(DGSEGSTR,DGHL("FS"),4)=DGPTID
"RTN","DGQEHLS",95,0)
 . S DGSEG=DGSEG+1,@DGROOT@(DGSEG)=DGSEGSTR
"RTN","DGQEHLS",96,0)
 . ;
"RTN","DGQEHLS",97,0)
 . ;build ORC segment
"RTN","DGQEHLS",98,0)
 . S DGSTR="1"
"RTN","DGQEHLS",99,0)
 . S DGSEGSTR=$$ORC^DGQEHLOR(.DGREQ,DGSTR,.DGHL)
"RTN","DGQEHLS",100,0)
 . Q:(DGSEGSTR="")
"RTN","DGQEHLS",101,0)
 . S DGSEG=DGSEG+1,@DGROOT@(DGSEG)=DGSEGSTR
"RTN","DGQEHLS",102,0)
 . ;
"RTN","DGQEHLS",103,0)
 . ;build RQD segment
"RTN","DGQEHLS",104,0)
 . S DGSTR="1,3"
"RTN","DGQEHLS",105,0)
 . S DGSEGSTR=$$RQD^DGQEHLRQ(.DGREQ,DGSTR,.DGHL)
"RTN","DGQEHLS",106,0)
 . Q:(DGSEGSTR="")
"RTN","DGQEHLS",107,0)
 . S DGSEG=DGSEG+1,@DGROOT@(DGSEG)=DGSEGSTR
"RTN","DGQEHLS",108,0)
 . ;
"RTN","DGQEHLS",109,0)
 . ;success
"RTN","DGQEHLS",110,0)
 . S DGRSLT=1
"RTN","DGQEHLS",111,0)
 ;
"RTN","DGQEHLS",112,0)
 Q DGRSLT
"RTN","DGQEHLUT")
0^11^B16767022
"RTN","DGQEHLUT",1,0)
DGQEHLUT ;ALB/RPM - VIC REPLACEMENT HL7 UTILITIES ; 10/6/03
"RTN","DGQEHLUT",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEHLUT",3,0)
 ;This routine contains generic utilities used when building
"RTN","DGQEHLUT",4,0)
 ;or processing received VIC REPLACEMENT HL7 messages.
"RTN","DGQEHLUT",5,0)
 ;
"RTN","DGQEHLUT",6,0)
 Q  ;no supported direct entry
"RTN","DGQEHLUT",7,0)
 ;
"RTN","DGQEHLUT",8,0)
INIT(DGPROT,DGHL) ;Kernel HL7 INIT wrapper
"RTN","DGQEHLUT",9,0)
 ;
"RTN","DGQEHLUT",10,0)
 ;  Supported Reference:
"RTN","DGQEHLUT",11,0)
 ;    DBIA #2161: INIT^HLFNC2
"RTN","DGQEHLUT",12,0)
 ;
"RTN","DGQEHLUT",13,0)
 ;  Input:
"RTN","DGQEHLUT",14,0)
 ;    DGPROT - Event protocol name
"RTN","DGQEHLUT",15,0)
 ;
"RTN","DGQEHLUT",16,0)
 ;  Output:
"RTN","DGQEHLUT",17,0)
 ;    Function value - HLEID on success;0 on failure
"RTN","DGQEHLUT",18,0)
 ;    DGHL - HL array from INIT^HLFNC2 Kernel call
"RTN","DGQEHLUT",19,0)
 ;
"RTN","DGQEHLUT",20,0)
 N DGHLEID
"RTN","DGQEHLUT",21,0)
 S DGHLEID=0
"RTN","DGQEHLUT",22,0)
 S DGHLEID=$$HLEID(DGPROT)
"RTN","DGQEHLUT",23,0)
 I DGHLEID D
"RTN","DGQEHLUT",24,0)
 . D INIT^HLFNC2(DGHLEID,.DGHL)
"RTN","DGQEHLUT",25,0)
 . I $O(DGHL(""))="" S DGHLEID=0
"RTN","DGQEHLUT",26,0)
 Q DGHLEID
"RTN","DGQEHLUT",27,0)
 ;
"RTN","DGQEHLUT",28,0)
 ;
"RTN","DGQEHLUT",29,0)
HLEID(DGPROT) ;return IEN of HL7 protocol
"RTN","DGQEHLUT",30,0)
 ;
"RTN","DGQEHLUT",31,0)
 ;  Input:  
"RTN","DGQEHLUT",32,0)
 ;    DGPROT - Protocol name
"RTN","DGQEHLUT",33,0)
 ;
"RTN","DGQEHLUT",34,0)
 ;  Output:  
"RTN","DGQEHLUT",35,0)
 ;   Function value - IEN of protocol on success, 0 on failure
"RTN","DGQEHLUT",36,0)
 ;
"RTN","DGQEHLUT",37,0)
 I $G(DGPROT)="" Q 0
"RTN","DGQEHLUT",38,0)
 Q +$O(^ORD(101,"B",DGPROT,0))
"RTN","DGQEHLUT",39,0)
 ;
"RTN","DGQEHLUT",40,0)
 ;
"RTN","DGQEHLUT",41,0)
NXTSEG(DGROOT,DGCURR,DGFS,DGFLD) ;retrieves next sequential segment
"RTN","DGQEHLUT",42,0)
 ; This function retrieves the next segment in the work global, returns
"RTN","DGQEHLUT",43,0)
 ; an array of field values and the segment's work global index.  If
"RTN","DGQEHLUT",44,0)
 ; the next segment does not exist, then the function returns a zero.
"RTN","DGQEHLUT",45,0)
 ;
"RTN","DGQEHLUT",46,0)
 ;  Input:
"RTN","DGQEHLUT",47,0)
 ;    DGROOT - close root name of work global
"RTN","DGQEHLUT",48,0)
 ;    DGCURR - index of current segment
"RTN","DGQEHLUT",49,0)
 ;      DGFS - HL7 field separator character
"RTN","DGQEHLUT",50,0)
 ;
"RTN","DGQEHLUT",51,0)
 ;  Output:
"RTN","DGQEHLUT",52,0)
 ;   Function Value  - index of the next segment on success, 0 on failure
"RTN","DGQEHLUT",53,0)
 ;             DGFLD - array of segment field values
"RTN","DGQEHLUT",54,0)
 ;
"RTN","DGQEHLUT",55,0)
 N NXTSEG
"RTN","DGQEHLUT",56,0)
 ;
"RTN","DGQEHLUT",57,0)
 S DGCURR=DGCURR+1
"RTN","DGQEHLUT",58,0)
 S NXTSEG=$G(@DGROOT@(DGCURR,0))
"RTN","DGQEHLUT",59,0)
 I NXTSEG]"" D
"RTN","DGQEHLUT",60,0)
 . D GETFLDS(NXTSEG,DGFS,.DGFLD)
"RTN","DGQEHLUT",61,0)
 E  D
"RTN","DGQEHLUT",62,0)
 . S DGCURR=0
"RTN","DGQEHLUT",63,0)
 Q DGCURR
"RTN","DGQEHLUT",64,0)
 ;
"RTN","DGQEHLUT",65,0)
 ;
"RTN","DGQEHLUT",66,0)
GETFLDS(DGSEG,DGFS,DGFLD) ;retrieve HL7 segment fields into an array
"RTN","DGQEHLUT",67,0)
 ;This procedure parses a single HL7 segment and builds an array
"RTN","DGQEHLUT",68,0)
 ;subscripted by the field number that contains the data for that field.
"RTN","DGQEHLUT",69,0)
 ;An additional subscript node, "TYPE" is created containing the segment
"RTN","DGQEHLUT",70,0)
 ;type.
"RTN","DGQEHLUT",71,0)
 ;
"RTN","DGQEHLUT",72,0)
 ;  Input:
"RTN","DGQEHLUT",73,0)
 ;     DGSEG - HL7 segment to parse
"RTN","DGQEHLUT",74,0)
 ;      DGFS - HL7 field separator
"RTN","DGQEHLUT",75,0)
 ;
"RTN","DGQEHLUT",76,0)
 ;  Output:
"RTN","DGQEHLUT",77,0)
 ;    DGFLD - array of segment field values subscripted by field #
"RTN","DGQEHLUT",78,0)
 ;            Example: DGFLD(2)="DOE,JOHN"
"RTN","DGQEHLUT",79,0)
 ;
"RTN","DGQEHLUT",80,0)
 N DGI
"RTN","DGQEHLUT",81,0)
 ;
"RTN","DGQEHLUT",82,0)
 S DGFLD("TYPE")=$P(DGSEG,DGFS)
"RTN","DGQEHLUT",83,0)
 F DGI=2:1:$L(DGSEG,DGFS) D
"RTN","DGQEHLUT",84,0)
 . S DGFLD($S(DGFLD("TYPE")="MSH":DGI,1:DGI-1))=$P(DGSEG,DGFS,DGI)
"RTN","DGQEHLUT",85,0)
 Q
"RTN","DGQEHLUT",86,0)
 ;
"RTN","DGQEHLUT",87,0)
 ;
"RTN","DGQEHLUT",88,0)
BLDSEG(DGTYP,DGVAL,DGHL) ;generic segment builder
"RTN","DGQEHLUT",89,0)
 ;
"RTN","DGQEHLUT",90,0)
 ;  Input:
"RTN","DGQEHLUT",91,0)
 ;    DGTYP - segment type
"RTN","DGQEHLUT",92,0)
 ;    DGVAL - field data array [SUB1:field, SUB2:repetition,
"RTN","DGQEHLUT",93,0)
 ;                              SUB3:component, SUB4:sub-component] 
"RTN","DGQEHLUT",94,0)
 ;     DGHL - HL7 environment array
"RTN","DGQEHLUT",95,0)
 ;
"RTN","DGQEHLUT",96,0)
 ;  Output:
"RTN","DGQEHLUT",97,0)
 ;   Function Value - Formatted HL7 segment on success, "" on failure
"RTN","DGQEHLUT",98,0)
 ;
"RTN","DGQEHLUT",99,0)
 N DGCMP     ;component subscript
"RTN","DGQEHLUT",100,0)
 N DGCMPVAL  ;component value
"RTN","DGQEHLUT",101,0)
 N DGFLD     ;field subscript
"RTN","DGQEHLUT",102,0)
 N DGFLDVAL  ;field value
"RTN","DGQEHLUT",103,0)
 N DGREP     ;repetition subscript
"RTN","DGQEHLUT",104,0)
 N DGREPVAL  ;repetition value
"RTN","DGQEHLUT",105,0)
 N DGSUB     ;sub-component subscript
"RTN","DGQEHLUT",106,0)
 N DGSUBVAL  ;suc-component value
"RTN","DGQEHLUT",107,0)
 N DGFS      ;field separator
"RTN","DGQEHLUT",108,0)
 N DGCS      ;component separator
"RTN","DGQEHLUT",109,0)
 N DGRS      ;repetition separator
"RTN","DGQEHLUT",110,0)
 N DGSS      ;sub-component separator
"RTN","DGQEHLUT",111,0)
 N DGSEG
"RTN","DGQEHLUT",112,0)
 N DGSEP
"RTN","DGQEHLUT",113,0)
 ;
"RTN","DGQEHLUT",114,0)
 Q:($G(DGTYP)']"") ""
"RTN","DGQEHLUT",115,0)
 ;
"RTN","DGQEHLUT",116,0)
 S DGSEG=DGTYP
"RTN","DGQEHLUT",117,0)
 S DGFS=DGHL("FS")
"RTN","DGQEHLUT",118,0)
 S DGCS=$E(DGHL("ECH"))
"RTN","DGQEHLUT",119,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGQEHLUT",120,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGQEHLUT",121,0)
 ;
"RTN","DGQEHLUT",122,0)
 F DGFLD=1:1:$O(DGVAL(""),-1) D
"RTN","DGQEHLUT",123,0)
 . S DGFLDVAL=$G(DGVAL(DGFLD)),DGSEP=DGFS
"RTN","DGQEHLUT",124,0)
 . D ADD(DGFLDVAL,DGSEP,.DGSEG)
"RTN","DGQEHLUT",125,0)
 . F DGREP=1:1:$O(DGVAL(DGFLD,""),-1)  D
"RTN","DGQEHLUT",126,0)
 . . S DGREPVAL=$G(DGVAL(DGFLD,DGREP))
"RTN","DGQEHLUT",127,0)
 . . S DGSEP=$S(DGREP=1:"",1:DGRS)
"RTN","DGQEHLUT",128,0)
 . . D ADD(DGREPVAL,DGSEP,.DGSEG)
"RTN","DGQEHLUT",129,0)
 . . F DGCMP=1:1:$O(DGVAL(DGFLD,DGREP,""),-1) D
"RTN","DGQEHLUT",130,0)
 . . . S DGCMPVAL=$G(DGVAL(DGFLD,DGREP,DGCMP))
"RTN","DGQEHLUT",131,0)
 . . . S DGSEP=$S(DGCMP=1:"",1:DGCS)
"RTN","DGQEHLUT",132,0)
 . . . D ADD(DGCMPVAL,DGSEP,.DGSEG)
"RTN","DGQEHLUT",133,0)
 . . . F DGSUB=1:1:$O(DGVAL(DGFLD,DGREP,DGCMP,""),-1) D
"RTN","DGQEHLUT",134,0)
 . . . . S DGSUBVAL=$G(DGVAL(DGFLD,DGREP,DGCMP,DGSUB))
"RTN","DGQEHLUT",135,0)
 . . . . S DGSEP=$S(DGSUB=1:"",1:DGSS)
"RTN","DGQEHLUT",136,0)
 . . . . D ADD(DGSUBVAL,DGSEP,.DGSEG)
"RTN","DGQEHLUT",137,0)
 Q DGSEG
"RTN","DGQEHLUT",138,0)
 ;
"RTN","DGQEHLUT",139,0)
 ;
"RTN","DGQEHLUT",140,0)
ADD(DGVAL,DGSEP,DGSEG) ;append a value onto segment
"RTN","DGQEHLUT",141,0)
 ;
"RTN","DGQEHLUT",142,0)
 ;  Input:
"RTN","DGQEHLUT",143,0)
 ;    DGVAL - value to append
"RTN","DGQEHLUT",144,0)
 ;    DGSEP - HL7 separator
"RTN","DGQEHLUT",145,0)
 ;
"RTN","DGQEHLUT",146,0)
 ;  Output:
"RTN","DGQEHLUT",147,0)
 ;    DGSEG - segment passed by reference
"RTN","DGQEHLUT",148,0)
 ;
"RTN","DGQEHLUT",149,0)
 S DGSEP=$G(DGSEP)
"RTN","DGQEHLUT",150,0)
 S DGVAL=$G(DGVAL)
"RTN","DGQEHLUT",151,0)
 S DGSEG=DGSEG_DGSEP_DGVAL
"RTN","DGQEHLUT",152,0)
 Q
"RTN","DGQEHLUT",153,0)
 ;
"RTN","DGQEHLUT",154,0)
CKSTR(DGFLDS,DGSTR) ;validate comma-delimited HL7 field string
"RTN","DGQEHLUT",155,0)
 ;
"RTN","DGQEHLUT",156,0)
 ;  Input:
"RTN","DGQEHLUT",157,0)
 ;    DGFLDS - (required) comma delimited string of required fields
"RTN","DGQEHLUT",158,0)
 ;    DGSTR - (optional) comma delimited string of fields to include
"RTN","DGQEHLUT",159,0)
 ;            in an HL7 segment.
"RTN","DGQEHLUT",160,0)
 ;
"RTN","DGQEHLUT",161,0)
 ;  Output:
"RTN","DGQEHLUT",162,0)
 ;   Function Value - validated string of fields
"RTN","DGQEHLUT",163,0)
 ;
"RTN","DGQEHLUT",164,0)
 N DGI     ;generic index
"RTN","DGQEHLUT",165,0)
 N DGREQ   ;required field
"RTN","DGQEHLUT",166,0)
 ;
"RTN","DGQEHLUT",167,0)
 Q:($G(DGFLDS)']"") ""
"RTN","DGQEHLUT",168,0)
 S DGSTR=$G(DGSTR)
"RTN","DGQEHLUT",169,0)
 F DGI=1:1 S DGREQ=$P(DGFLDS,",",DGI) Q:DGREQ=""  D
"RTN","DGQEHLUT",170,0)
 . I ","_DGSTR_","'[(","_DGREQ_",") S DGSTR=DGSTR_$S($L(DGSTR)>0:",",1:"")_DGREQ
"RTN","DGQEHLUT",171,0)
 Q DGSTR
"RTN","DGQEREQ")
0^18^B15944716
"RTN","DGQEREQ",1,0)
DGQEREQ ;ALB/RPM - VIC REPLACEMENT VIC REQUEST FILE ACCESS API'S ; 12/09/03
"RTN","DGQEREQ",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEREQ",3,0)
 ;
"RTN","DGQEREQ",4,0)
 ; This routine contains the functions and procedures used to access
"RTN","DGQEREQ",5,0)
 ; and manipulate the VIC REQUEST (#39.6) file.
"RTN","DGQEREQ",6,0)
 ;
"RTN","DGQEREQ",7,0)
 ;   $$FINDCID - locate NCMD Card ID
"RTN","DGQEREQ",8,0)
 ;   $$FINDLST - locate last (most recent) VIC request
"RTN","DGQEREQ",9,0)
 ;   $$GETREQ  - retrieve a single VIC REQUEST record
"RTN","DGQEREQ",10,0)
 ;   $$STOCID  - store the NCMD Card ID
"RTN","DGQEREQ",11,0)
 ;   $$STOSTAT - store the Card Print Release Status
"RTN","DGQEREQ",12,0)
 ;   $$DELREQ  - delete a single VIC REQUEST record
"RTN","DGQEREQ",13,0)
 ;
"RTN","DGQEREQ",14,0)
 Q  ;no direct entry
"RTN","DGQEREQ",15,0)
 ;
"RTN","DGQEREQ",16,0)
FINDCID(DGCID) ;locate record for a given NCMD Card ID
"RTN","DGQEREQ",17,0)
 ; This function performs a lookup of the VIC REQUEST (#39.6) file
"RTN","DGQEREQ",18,0)
 ; for a given Card ID.
"RTN","DGQEREQ",19,0)
 ;
"RTN","DGQEREQ",20,0)
 ;  Input:
"RTN","DGQEREQ",21,0)
 ;    DGCID - NCMD Card ID
"RTN","DGQEREQ",22,0)
 ;
"RTN","DGQEREQ",23,0)
 ;  Output:
"RTN","DGQEREQ",24,0)
 ;   Function value - IEN of VIC REQUEST on success;
"RTN","DGQEREQ",25,0)
 ;                    0 on failure
"RTN","DGQEREQ",26,0)
 ;
"RTN","DGQEREQ",27,0)
 Q:$G(DGCID)']"" 0
"RTN","DGQEREQ",28,0)
 Q +$O(^DGQE(39.6,"B",DGCID,""))
"RTN","DGQEREQ",29,0)
 ;
"RTN","DGQEREQ",30,0)
 ;
"RTN","DGQEREQ",31,0)
FINDLST(DGDFN) ;locate the IEN of the last request for a given patient
"RTN","DGQEREQ",32,0)
 ;
"RTN","DGQEREQ",33,0)
 ;  Input:
"RTN","DGQEREQ",34,0)
 ;    DGDFN - pointer to patient in PATIENT (#2) file
"RTN","DGQEREQ",35,0)
 ;
"RTN","DGQEREQ",36,0)
 ;  Output:
"RTN","DGQEREQ",37,0)
 ;   Function value - IEN of VIC REQUEST (#39.6) file on success,
"RTN","DGQEREQ",38,0)
 ;                    0 on failure
"RTN","DGQEREQ",39,0)
 ;
"RTN","DGQEREQ",40,0)
 N DGDAT
"RTN","DGQEREQ",41,0)
 ;
"RTN","DGQEREQ",42,0)
 S DGDFN=+$G(DGDFN)
"RTN","DGQEREQ",43,0)
 S DGDAT=+$O(^DGQE(39.6,"APDAT",DGDFN,""),-1)
"RTN","DGQEREQ",44,0)
 Q +$O(^DGQE(39.6,"APDAT",DGDFN,DGDAT,0))
"RTN","DGQEREQ",45,0)
 ;
"RTN","DGQEREQ",46,0)
 ;
"RTN","DGQEREQ",47,0)
GETREQ(DGIEN,DGREQ) ;retrieve a single record
"RTN","DGQEREQ",48,0)
 ; This function retrieves all fields belonging to a single record
"RTN","DGQEREQ",49,0)
 ; in the VIC REQUEST (#39.6) file for a given IEN.  The field data
"RTN","DGQEREQ",50,0)
 ; is placed in an array format.
"RTN","DGQEREQ",51,0)
 ;
"RTN","DGQEREQ",52,0)
 ;  Input:
"RTN","DGQEREQ",53,0)
 ;    DGIEN - VIC REQUEST (#39.6) file record number
"RTN","DGQEREQ",54,0)
 ;
"RTN","DGQEREQ",55,0)
 ;  Output:
"RTN","DGQEREQ",56,0)
 ;   Function value - 1 on success, 0 on failure
"RTN","DGQEREQ",57,0)
 ;    DGREQ - array of field data
"RTN","DGQEREQ",58,0)
 ;            Array subscripts are:
"RTN","DGQEREQ",59,0)
 ;             "DFN"     - pointer to patient in PATIENT (#2) file
"RTN","DGQEREQ",60,0)
 ;             "CARDID"  - NCMD Card ID
"RTN","DGQEREQ",61,0)
 ;             "NAME"    - patient name
"RTN","DGQEREQ",62,0)
 ;             "CPRSTAT" - card print release status
"RTN","DGQEREQ",63,0)
 ;             "REQDATE" - VIC Request Date in internal format
"RTN","DGQEREQ",64,0)
 ;       
"RTN","DGQEREQ",65,0)
 N DGERR   ;FM result error message
"RTN","DGQEREQ",66,0)
 N DGFIL   ;FM file number
"RTN","DGQEREQ",67,0)
 N DGFLD   ;FM result field array
"RTN","DGQEREQ",68,0)
 N DGIENS  ;FM IENS value
"RTN","DGQEREQ",69,0)
 N DGRSLT  ;Function value
"RTN","DGQEREQ",70,0)
 ;
"RTN","DGQEREQ",71,0)
 S DGRSLT=0
"RTN","DGQEREQ",72,0)
 S DGFIL=39.6
"RTN","DGQEREQ",73,0)
 ;
"RTN","DGQEREQ",74,0)
 I $G(DGIEN),$D(^DGQE(DGFIL,DGIEN)) D
"RTN","DGQEREQ",75,0)
 . S DGIENS=DGIEN_","
"RTN","DGQEREQ",76,0)
 . D GETS^DIQ(DGFIL,DGIENS,"*","IE","DGFLD","DGERR")
"RTN","DGQEREQ",77,0)
 . Q:$D(DGERR)
"RTN","DGQEREQ",78,0)
 . S DGREQ("CARDID")=$G(DGFLD(DGFIL,DGIENS,.01,"I"))
"RTN","DGQEREQ",79,0)
 . S DGREQ("DFN")=$G(DGFLD(DGFIL,DGIENS,.02,"I"))
"RTN","DGQEREQ",80,0)
 . S DGREQ("NAME")=$G(DGFLD(DGFIL,DGIENS,.02,"E"))
"RTN","DGQEREQ",81,0)
 . S DGREQ("CPRSTAT")=$G(DGFLD(DGFIL,DGIENS,.03,"I"))
"RTN","DGQEREQ",82,0)
 . S DGREQ("REQDT")=$G(DGFLD(DGFIL,DGIENS,.04,"I"))
"RTN","DGQEREQ",83,0)
 . S DGRSLT=1  ;success
"RTN","DGQEREQ",84,0)
 ;
"RTN","DGQEREQ",85,0)
 Q DGRSLT
"RTN","DGQEREQ",86,0)
 ;
"RTN","DGQEREQ",87,0)
 ;
"RTN","DGQEREQ",88,0)
STOCID(DGCID,DGDFN,DGSTAT) ;store the NCMD-assigned Card ID
"RTN","DGQEREQ",89,0)
 ; This procedure creates a record in the VIC REQUEST (#39.6) file.
"RTN","DGQEREQ",90,0)
 ;
"RTN","DGQEREQ",91,0)
 ;  Input:
"RTN","DGQEREQ",92,0)
 ;    DGCID  - Card ID [format: lastname_"-"_SSN_"-"_number of requests]
"RTN","DGQEREQ",93,0)
 ;    DGDFN  - pointer to patient in PATIENT(#2) file
"RTN","DGQEREQ",94,0)
 ;    DGSTAT - Card Print Release Status
"RTN","DGQEREQ",95,0)
 ;
"RTN","DGQEREQ",96,0)
 ;  Output:
"RTN","DGQEREQ",97,0)
 ;    none
"RTN","DGQEREQ",98,0)
 ;
"RTN","DGQEREQ",99,0)
 N DGERR
"RTN","DGQEREQ",100,0)
 N DGFDA
"RTN","DGQEREQ",101,0)
 N DGFIL
"RTN","DGQEREQ",102,0)
 N DGIEN
"RTN","DGQEREQ",103,0)
 N DGIENS
"RTN","DGQEREQ",104,0)
 ;
"RTN","DGQEREQ",105,0)
 S DGFIL=39.6
"RTN","DGQEREQ",106,0)
 ;
"RTN","DGQEREQ",107,0)
 ;validate input params
"RTN","DGQEREQ",108,0)
 Q:+$G(DGDFN)'>0
"RTN","DGQEREQ",109,0)
 Q:'$D(^DPT(DGDFN,0))
"RTN","DGQEREQ",110,0)
 Q:$G(DGCID)']""
"RTN","DGQEREQ",111,0)
 Q:$$EXTERNAL^DILFD(DGFIL,.03,"F",$G(DGSTAT),"")']""
"RTN","DGQEREQ",112,0)
 ;
"RTN","DGQEREQ",113,0)
 S DGIEN=$$FINDCID(DGCID)
"RTN","DGQEREQ",114,0)
 S DGIENS=$S('DGIEN:"+1,",1:DGIEN_",")
"RTN","DGQEREQ",115,0)
 ;
"RTN","DGQEREQ",116,0)
 S DGFDA(DGFIL,DGIENS,.01)=DGCID
"RTN","DGQEREQ",117,0)
 S DGFDA(DGFIL,DGIENS,.02)=DGDFN
"RTN","DGQEREQ",118,0)
 S DGFDA(DGFIL,DGIENS,.03)=DGSTAT
"RTN","DGQEREQ",119,0)
 S DGFDA(DGFIL,DGIENS,.04)=$$NOW^XLFDT()
"RTN","DGQEREQ",120,0)
 D UPDATE^DIE("","DGFDA","","DGERR")
"RTN","DGQEREQ",121,0)
 ;
"RTN","DGQEREQ",122,0)
 Q
"RTN","DGQEREQ",123,0)
 ;
"RTN","DGQEREQ",124,0)
 ;
"RTN","DGQEREQ",125,0)
STOSTAT(DGIEN,DGSTAT) ;update CARD PRINT RELEASE STATUS
"RTN","DGQEREQ",126,0)
 ; This procedure is used to update the CARD PRINT RELEASE STATUS(#.03)
"RTN","DGQEREQ",127,0)
 ; field of the VIC REQUEST (#39.6) file.
"RTN","DGQEREQ",128,0)
 ;
"RTN","DGQEREQ",129,0)
 ;  Input:
"RTN","DGQEREQ",130,0)
 ;    DGIEN  - IEN of VIC REQUEST file record
"RTN","DGQEREQ",131,0)
 ;    DGSTAT - card print release status
"RTN","DGQEREQ",132,0)
 ;
"RTN","DGQEREQ",133,0)
 ;  Output:
"RTN","DGQEREQ",134,0)
 ;    none
"RTN","DGQEREQ",135,0)
 ;
"RTN","DGQEREQ",136,0)
 N DGERR
"RTN","DGQEREQ",137,0)
 N DGFDA
"RTN","DGQEREQ",138,0)
 N DGFIL
"RTN","DGQEREQ",139,0)
 ;
"RTN","DGQEREQ",140,0)
 S DGFIL=39.6
"RTN","DGQEREQ",141,0)
 ;
"RTN","DGQEREQ",142,0)
 ;validate input parameters
"RTN","DGQEREQ",143,0)
 Q:'$G(DGIEN)
"RTN","DGQEREQ",144,0)
 Q:$G(DGSTAT)']""
"RTN","DGQEREQ",145,0)
 Q:$$EXTERNAL^DILFD(DGFIL,.03,"F",DGSTAT,"")']""
"RTN","DGQEREQ",146,0)
 ;
"RTN","DGQEREQ",147,0)
 S DGFDA(DGFIL,DGIEN_",",.03)=DGSTAT
"RTN","DGQEREQ",148,0)
 D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEREQ",149,0)
 Q
"RTN","DGQEREQ",150,0)
 ;
"RTN","DGQEREQ",151,0)
 ;
"RTN","DGQEREQ",152,0)
DELREQ(DGIEN) ;delete a single VIC REQUEST record
"RTN","DGQEREQ",153,0)
 ;
"RTN","DGQEREQ",154,0)
 ;  Input:
"RTN","DGQEREQ",155,0)
 ;    DGIEN - IEN of record in VIC REQUEST (#39.6) file
"RTN","DGQEREQ",156,0)
 ;
"RTN","DGQEREQ",157,0)
 ;  Output:
"RTN","DGQEREQ",158,0)
 ;   Function value - 1 on success, 0 on failure
"RTN","DGQEREQ",159,0)
 ;
"RTN","DGQEREQ",160,0)
 N DGDT    ;HL7 transmission date
"RTN","DGQEREQ",161,0)
 N DGERR
"RTN","DGQEREQ",162,0)
 N DGFDA
"RTN","DGQEREQ",163,0)
 N DGLIEN  ;pointer to VIC HL7 TRANSMISSION LOG (#39.7) file
"RTN","DGQEREQ",164,0)
 N DGRSLT  ;function value
"RTN","DGQEREQ",165,0)
 ;
"RTN","DGQEREQ",166,0)
 S DGRSLT=0
"RTN","DGQEREQ",167,0)
 I $G(DGIEN) D
"RTN","DGQEREQ",168,0)
 . S DGFDA(39.6,DGIEN_",",.01)="@"
"RTN","DGQEREQ",169,0)
 . D FILE^DIE("","DGFDA","DGERR")
"RTN","DGQEREQ",170,0)
 . Q:$D(DGERR)
"RTN","DGQEREQ",171,0)
 . ;
"RTN","DGQEREQ",172,0)
 . ;cleanup HL7 TRANSMISSION LOG
"RTN","DGQEREQ",173,0)
 . S DGDT=0
"RTN","DGQEREQ",174,0)
 . F  S DGDT=$O(^DGQE(39.7,"ADATE",DGIEN,DGDT)) Q:'DGDT  D  Q:$D(DGERR)
"RTN","DGQEREQ",175,0)
 . . S DGLIEN=$O(^DGQE(39.7,"ADATE",DGIEN,DGDT,0))
"RTN","DGQEREQ",176,0)
 . . I DGLIEN,'$$DELXMIT^DGQEHLL(DGLIEN) S DGERR=1
"RTN","DGQEREQ",177,0)
 . Q:$D(DGERR)
"RTN","DGQEREQ",178,0)
 . S DGRSLT=1  ;success
"RTN","DGQEREQ",179,0)
 ;
"RTN","DGQEREQ",180,0)
 Q DGRSLT
"RTN","DGQERPC")
0^2^B11667506
"RTN","DGQERPC",1,0)
DGQERPC ;ALB/RPM - VIC REPLACEMENT VISTA TO MAXIMUS RPC ; 02/04/04
"RTN","DGQERPC",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQERPC",3,0)
 ;
"RTN","DGQERPC",4,0)
 ; This routine contains the primary entry points to the 
"RTN","DGQERPC",5,0)
 ; VistA to Maximus interface RPCs.
"RTN","DGQERPC",6,0)
 ;
"RTN","DGQERPC",7,0)
 Q  ;no direct entry
"RTN","DGQERPC",8,0)
 ;
"RTN","DGQERPC",9,0)
GETDEMO(RESULT,DGICN) ;retrieve patient demographics
"RTN","DGQERPC",10,0)
 ;
"RTN","DGQERPC",11,0)
 ; --rpc: DGQE GET PATIENT DEMO
"RTN","DGQERPC",12,0)
 ;
"RTN","DGQERPC",13,0)
 ; This remote procedure retrieves demographic data for a given patient
"RTN","DGQERPC",14,0)
 ; and returns an array of text lines.  Each text line consists of at
"RTN","DGQERPC",15,0)
 ; least two circumflex("^")-delimited fields.  The first field of each
"RTN","DGQERPC",16,0)
 ; line contains an XML style tag (e.g. <RESULT>).  The second through
"RTN","DGQERPC",17,0)
 ; nth fields contain data.
"RTN","DGQERPC",18,0)
 ;
"RTN","DGQERPC",19,0)
 ;  Supported References:                                               
"RTN","DGQERPC",20,0)
 ;    DBIA #2701: $$GETDFN^MPIF001
"RTN","DGQERPC",21,0)
 ;
"RTN","DGQERPC",22,0)
 ;  Input:
"RTN","DGQERPC",23,0)
 ;    DGICN - patient's Integration Control Number
"RTN","DGQERPC",24,0)
 ;
"RTN","DGQERPC",25,0)
 ;  Output:
"RTN","DGQERPC",26,0)
 ;    RESULT - array of tag-labeled patient demographics
"RTN","DGQERPC",27,0)
 ;
"RTN","DGQERPC",28,0)
 ; Subscript  Field#  Field contents             Description
"RTN","DGQERPC",29,0)
 ; ---------  ------  -------------------------  ----------------
"RTN","DGQERPC",30,0)
 ;     1         1    <RESULT>                   RPC status tag
"RTN","DGQERPC",31,0)
 ;               2    Card Print Release Status
"RTN","DGQERPC",32,0)
 ;               3    "VIC"
"RTN","DGQERPC",33,0)
 ;
"RTN","DGQERPC",34,0)
 ;     2         1    <MSG>                      Remarks tag
"RTN","DGQERPC",35,0)
 ;               2    Free text remarks
"RTN","DGQERPC",36,0)
 ;
"RTN","DGQERPC",37,0)
 ;     3         1    <NAME>                     Identifier tag
"RTN","DGQERPC",38,0)
 ;               2    Full Name
"RTN","DGQERPC",39,0)
 ;               3    Social Security Number
"RTN","DGQERPC",40,0)
 ;               4    Date of Birth
"RTN","DGQERPC",41,0)
 ;
"RTN","DGQERPC",42,0)
 ;     4         1    <NAME1>                    Name components tag
"RTN","DGQERPC",43,0)
 ;               2    Last Name
"RTN","DGQERPC",44,0)
 ;               3    First Name
"RTN","DGQERPC",45,0)
 ;               4    Middle Name
"RTN","DGQERPC",46,0)
 ;               5    Name Suffix
"RTN","DGQERPC",47,0)
 ;               6    Name Prefix
"RTN","DGQERPC",48,0)
 ;
"RTN","DGQERPC",49,0)
 ;     5         1    <TYPE>                     Veteran type tag
"RTN","DGQERPC",50,0)
 ;               2    Service Connected Indicator
"RTN","DGQERPC",51,0)
 ;
"RTN","DGQERPC",52,0)
 ;     6         1    <PATAS>                    Mailing address tag
"RTN","DGQERPC",53,0)
 ;               2    Street Line 1
"RTN","DGQERPC",54,0)
 ;               3    Street Line 2
"RTN","DGQERPC",55,0)
 ;               4    Street Line 3
"RTN","DGQERPC",56,0)
 ;
"RTN","DGQERPC",57,0)
 ;     7         1    <PATAZ>                    Mailing address tag
"RTN","DGQERPC",58,0)
 ;               2    City
"RTN","DGQERPC",59,0)
 ;               3    State
"RTN","DGQERPC",60,0)
 ;               4    Zip
"RTN","DGQERPC",61,0)
 ;
"RTN","DGQERPC",62,0)
 ;     8         1    <MPI>                     Master Patient Index tag
"RTN","DGQERPC",63,0)
 ;               2    Integration Control Number
"RTN","DGQERPC",64,0)
 ;               3    DFN
"RTN","DGQERPC",65,0)
 ;
"RTN","DGQERPC",66,0)
 ;     9         1    <SITE>                    Facility tag
"RTN","DGQERPC",67,0)
 ;               2    Facility Name
"RTN","DGQERPC",68,0)
 ;               3    Station Number
"RTN","DGQERPC",69,0)
 ;               4    VISN
"RTN","DGQERPC",70,0)
 ;
"RTN","DGQERPC",71,0)
 N DGDFN   ;pointer to patient in PATIENT (#2) file
"RTN","DGQERPC",72,0)
 N DGVIC   ;patient data array
"RTN","DGQERPC",73,0)
 ;
"RTN","DGQERPC",74,0)
 ;initialize patient data array
"RTN","DGQERPC",75,0)
 D INITARR^DGQEUT1(.DGVIC)
"RTN","DGQERPC",76,0)
 ;
"RTN","DGQERPC",77,0)
 D  ;drop out of block on error
"RTN","DGQERPC",78,0)
 . ;
"RTN","DGQERPC",79,0)
 . ;check for input parameter
"RTN","DGQERPC",80,0)
 . S DGDFN=+$$GETDFN^MPIF001($G(DGICN))
"RTN","DGQERPC",81,0)
 . Q:(DGDFN'>0)
"RTN","DGQERPC",82,0)
 . ;
"RTN","DGQERPC",83,0)
 . ;build patient object
"RTN","DGQERPC",84,0)
 . Q:'$$GETPAT^DGQEUT1(DGDFN,.DGVIC)
"RTN","DGQERPC",85,0)
 . ;
"RTN","DGQERPC",86,0)
 . ;build eligibility object
"RTN","DGQERPC",87,0)
 . Q:'$$GETELIG^DGQEUT1(DGDFN,.DGVIC)
"RTN","DGQERPC",88,0)
 ;
"RTN","DGQERPC",89,0)
 ;determine card print release status and get into array
"RTN","DGQERPC",90,0)
 D CPRSTAT^DGQEUT2(.DGVIC)
"RTN","DGQERPC",91,0)
 ;
"RTN","DGQERPC",92,0)
 ;build results document
"RTN","DGQERPC",93,0)
 D BLDDOC(.DGVIC,.RESULT)
"RTN","DGQERPC",94,0)
 ;
"RTN","DGQERPC",95,0)
 Q
"RTN","DGQERPC",96,0)
 ;
"RTN","DGQERPC",97,0)
 ;
"RTN","DGQERPC",98,0)
SETID(RESULT,DGICN,DGRSTAT,DGID) ;callback RPC from Maximus workstation
"RTN","DGQERPC",99,0)
 ;
"RTN","DGQERPC",100,0)
 ; --rpc: DGQE SET CARD ID
"RTN","DGQERPC",101,0)
 ;
"RTN","DGQERPC",102,0)
 ; This remote procedure provides a "callback" for the VIC PICS
"RTN","DGQERPC",103,0)
 ; Workstation to notify VistA that a patient's VIC request has been
"RTN","DGQERPC",104,0)
 ; successfully forwarded to the National Card Management Directory.
"RTN","DGQERPC",105,0)
 ; The procedure creates an entry in the VIC REQUEST (#39.6) file when
"RTN","DGQERPC",106,0)
 ; the Card Print Release Status is "H" [Hold].
"RTN","DGQERPC",107,0)
 ; 
"RTN","DGQERPC",108,0)
 ;  Supported References:                                               
"RTN","DGQERPC",109,0)
 ;    DBIA #2701: $$GETDFN^MPIF001
"RTN","DGQERPC",110,0)
 ;
"RTN","DGQERPC",111,0)
 ;  Input:
"RTN","DGQERPC",112,0)
 ;     DGICN - patient's Integration Control Number
"RTN","DGQERPC",113,0)
 ;   DGRSTAT - card print release status
"RTN","DGQERPC",114,0)
 ;      DGID - NCMD assigned Card ID
"RTN","DGQERPC",115,0)
 ;
"RTN","DGQERPC",116,0)
 ;  Output:
"RTN","DGQERPC",117,0)
 ;    none
"RTN","DGQERPC",118,0)
 ;
"RTN","DGQERPC",119,0)
 N DGDFN  ;pointer to patient in PATIENT (#2) file
"RTN","DGQERPC",120,0)
 ;
"RTN","DGQERPC",121,0)
 S DGDFN=+$$GETDFN^MPIF001($G(DGICN))
"RTN","DGQERPC",122,0)
 I DGDFN>0,$D(^DPT(DGDFN,0)),$G(DGRSTAT)]"" D
"RTN","DGQERPC",123,0)
 . I $E(DGRSTAT)="H" D STOCID^DGQEREQ(DGID,DGDFN,DGRSTAT)
"RTN","DGQERPC",124,0)
 S RESULT=1
"RTN","DGQERPC",125,0)
 ;
"RTN","DGQERPC",126,0)
 Q
"RTN","DGQERPC",127,0)
 ;
"RTN","DGQERPC",128,0)
 ;
"RTN","DGQERPC",129,0)
BLDDOC(DGPAT,DGRSLT) ;build results document based on DOCMAP table
"RTN","DGQERPC",130,0)
 ; This procedure uses the array subscript to field location table
"RTN","DGQERPC",131,0)
 ; in linetag DOCMAP to format the GETDEMO RPC result array.
"RTN","DGQERPC",132,0)
 ;
"RTN","DGQERPC",133,0)
 ;  Input:
"RTN","DGQERPC",134,0)
 ;    DGPAT - combined patient/eligibility data array
"RTN","DGQERPC",135,0)
 ;
"RTN","DGQERPC",136,0)
 ;  Output:
"RTN","DGQERPC",137,0)
 ;    DGRSLT - RPC result array
"RTN","DGQERPC",138,0)
 ;
"RTN","DGQERPC",139,0)
 N DGFLD    ;table field location
"RTN","DGQERPC",140,0)
 N DGLCNT   ;line count
"RTN","DGQERPC",141,0)
 N DGLINE   ;line content
"RTN","DGQERPC",142,0)
 N DGFLDNM  ;field name
"RTN","DGQERPC",143,0)
 ;
"RTN","DGQERPC",144,0)
 F DGLCNT=1:1 S DGLINE=$T(DOCMAP+DGLCNT) Q:DGLINE=""  D
"RTN","DGQERPC",145,0)
 . S DGRSLT(DGLCNT)="<"_$P(DGLINE,";",3)_">"  ;set TAG
"RTN","DGQERPC",146,0)
 . F DGFLD=4:1 S DGFLDNM=$P(DGLINE,";",DGFLD) Q:DGFLDNM=""  D
"RTN","DGQERPC",147,0)
 . . S DGRSLT(DGLCNT)=DGRSLT(DGLCNT)_"^"_$G(DGPAT(DGFLDNM))
"RTN","DGQERPC",148,0)
 ;
"RTN","DGQERPC",149,0)
 Q
"RTN","DGQERPC",150,0)
 ;
"RTN","DGQERPC",151,0)
 ;
"RTN","DGQERPC",152,0)
DOCMAP ;document field to array subscript map;TAG;FIELD1;FIELD2;...;FIELDn
"RTN","DGQERPC",153,0)
 ;;RESULT;STAT;DOCTYPE
"RTN","DGQERPC",154,0)
 ;;MSG;REMARKS
"RTN","DGQERPC",155,0)
 ;;NAME;NAME;SSN;DOB
"RTN","DGQERPC",156,0)
 ;;NAME1;LAST;FIRST;MIDDLE;SUFFIX;PREFIX
"RTN","DGQERPC",157,0)
 ;;TYPE;SC
"RTN","DGQERPC",158,0)
 ;;PATAS;STREET1;STREET2;STREET3
"RTN","DGQERPC",159,0)
 ;;PATAZ;CITY;STATE;ZIP
"RTN","DGQERPC",160,0)
 ;;MPI;ICN;DFN
"RTN","DGQERPC",161,0)
 ;;SITE;FACNAME;FACNUM;VISN
"RTN","DGQEUT1")
0^12^B12941593
"RTN","DGQEUT1",1,0)
DGQEUT1 ;ALB/RPM - VIC REPLACEMENT UTILITIES #1 ; 12/22/03
"RTN","DGQEUT1",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEUT1",3,0)
 ;
"RTN","DGQEUT1",4,0)
 ; This routine contains the following VIC Redesign API's:
"RTN","DGQEUT1",5,0)
 ;   INITARR   - initialize data array
"RTN","DGQEUT1",6,0)
 ;   $$GETPAT  - build Patient data array
"RTN","DGQEUT1",7,0)
 ;   $$GETELIG - build Patient Eligibility data array
"RTN","DGQEUT1",8,0)
 ;
"RTN","DGQEUT1",9,0)
 Q  ;no direct entry
"RTN","DGQEUT1",10,0)
 ;
"RTN","DGQEUT1",11,0)
INITARR(DGVIC) ;Procedure used to initialize VIC data array nodes.
"RTN","DGQEUT1",12,0)
 ;
"RTN","DGQEUT1",13,0)
 ;  Input:
"RTN","DGQEUT1",14,0)
 ;   none
"RTN","DGQEUT1",15,0)
 ;
"RTN","DGQEUT1",16,0)
 ; Output:
"RTN","DGQEUT1",17,0)
 ;   DGVIC - array of VIC data (pass by reference)
"RTN","DGQEUT1",18,0)
 ;
"RTN","DGQEUT1",19,0)
 N DGSUB ;array subscript
"RTN","DGQEUT1",20,0)
 ;
"RTN","DGQEUT1",21,0)
 ;init patient identifier nodes
"RTN","DGQEUT1",22,0)
 S DGVIC("DFN")=""
"RTN","DGQEUT1",23,0)
 F DGSUB="NAME","SSN","DOB","LAST","FIRST","MIDDLE","SUFFIX","PREFIX" D
"RTN","DGQEUT1",24,0)
 . S DGVIC(DGSUB)=""
"RTN","DGQEUT1",25,0)
 ;
"RTN","DGQEUT1",26,0)
 ;init address nodes
"RTN","DGQEUT1",27,0)
 F DGSUB="STREET1","STREET2","STREET3","CITY","STATE","ZIP","ADRTYPE" D
"RTN","DGQEUT1",28,0)
 . S DGVIC(DGSUB)=""
"RTN","DGQEUT1",29,0)
 ;
"RTN","DGQEUT1",30,0)
 ;init vic eligibilty nodes
"RTN","DGQEUT1",31,0)
 F DGSUB="SC","ENRSTAT","ELIGSTAT","MST","COMBVET" D
"RTN","DGQEUT1",32,0)
 . S DGVIC(DGSUB)=""
"RTN","DGQEUT1",33,0)
 ;
"RTN","DGQEUT1",34,0)
 ;init facility nodes
"RTN","DGQEUT1",35,0)
 F DGSUB="FACNUM","FACNAME","VISN" D
"RTN","DGQEUT1",36,0)
 . S DGVIC(DGSUB)=""
"RTN","DGQEUT1",37,0)
 ;
"RTN","DGQEUT1",38,0)
 ;init card print release status node
"RTN","DGQEUT1",39,0)
 S DGVIC("STAT")=""
"RTN","DGQEUT1",40,0)
 ;
"RTN","DGQEUT1",41,0)
 ;init document type node
"RTN","DGQEUT1",42,0)
 S DGVIC("DOCTYPE")="VIC"
"RTN","DGQEUT1",43,0)
 ;
"RTN","DGQEUT1",44,0)
 Q
"RTN","DGQEUT1",45,0)
 ;
"RTN","DGQEUT1",46,0)
 ;
"RTN","DGQEUT1",47,0)
GETPAT(DGDFN,DGPAT) ;build Patient object
"RTN","DGQEUT1",48,0)
 ; This function retrieves patient demographic data needed to produce
"RTN","DGQEUT1",49,0)
 ; a Veteran ID Card and returns the data in an array format.
"RTN","DGQEUT1",50,0)
 ;
"RTN","DGQEUT1",51,0)
 ;  Supported Reference:
"RTN","DGQEUT1",52,0)
 ;    DBIA #10103: $$FMTE^XLFDT
"RTN","DGQEUT1",53,0)
 ;
"RTN","DGQEUT1",54,0)
 ;  Input:
"RTN","DGQEUT1",55,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGQEUT1",56,0)
 ;
"RTN","DGQEUT1",57,0)
 ;  Output:
"RTN","DGQEUT1",58,0)
 ;    Function value - returns 1 on success, 0 on failure
"RTN","DGQEUT1",59,0)
 ;    DGPAT - array of patient demographics, pass by reference
"RTN","DGQEUT1",60,0)
 ;            Array subscripts are:
"RTN","DGQEUT1",61,0)
 ;             "DFN"     - Pointer to patient in PATIENT (#2) file
"RTN","DGQEUT1",62,0)
 ;             "NAME"    - Patient Full Name
"RTN","DGQEUT1",63,0)
 ;             "SSN"     - Social Security Number
"RTN","DGQEUT1",64,0)
 ;             "DOB"     - Date of Birth (mmddyyyy)
"RTN","DGQEUT1",65,0)
 ;             "LAST"    - Family Name from name components
"RTN","DGQEUT1",66,0)
 ;             "FIRST"   - Given Name from name components
"RTN","DGQEUT1",67,0)
 ;             "MIDDLE"  - Middle Name from name components
"RTN","DGQEUT1",68,0)
 ;             "SUFFIX"  - Suffix from name components
"RTN","DGQEUT1",69,0)
 ;             "PREFIX"  - Prefix from name components
"RTN","DGQEUT1",70,0)
 ;             "STREET1" - Line 1 of mailing address
"RTN","DGQEUT1",71,0)
 ;             "STREET2" - Line 2 of mailing address
"RTN","DGQEUT1",72,0)
 ;             "STREET3" - Line 3 of mailing address
"RTN","DGQEUT1",73,0)
 ;             "CITY"    - Mailing address city
"RTN","DGQEUT1",74,0)
 ;             "STATE"   - Mailing address state
"RTN","DGQEUT1",75,0)
 ;             "ZIP"     - Mailing address ZIP code
"RTN","DGQEUT1",76,0)
 ;             "ADRTYPE" - Mailing address type
"RTN","DGQEUT1",77,0)
 ;                            [0:unable to determine,1:permanent,
"RTN","DGQEUT1",78,0)
 ;                             2:temporary,3:confidential,4:facility]
"RTN","DGQEUT1",79,0)
 ;             "ICN"     - Integration Control Number
"RTN","DGQEUT1",80,0)
 ;             "FACNUM"  - Local Station number
"RTN","DGQEUT1",81,0)
 ;             "FACNAME" - Local Facility name
"RTN","DGQEUT1",82,0)
 ;             "VISN"    - Local Facility's VISN
"RTN","DGQEUT1",83,0)
 ;
"RTN","DGQEUT1",84,0)
 N DGRSLT
"RTN","DGQEUT1",85,0)
 ;
"RTN","DGQEUT1",86,0)
 S DGRSLT=0
"RTN","DGQEUT1",87,0)
 ;
"RTN","DGQEUT1",88,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D  ;drop out of block on first failure
"RTN","DGQEUT1",89,0)
 . ;
"RTN","DGQEUT1",90,0)
 . ;get name, ssn, dob, dfn
"RTN","DGQEUT1",91,0)
 . Q:'$$GETIDS^DGQEDEMO(DGDFN,.DGPAT)
"RTN","DGQEUT1",92,0)
 . ;
"RTN","DGQEUT1",93,0)
 . ;format Date of Birth to mmddyyyy
"RTN","DGQEUT1",94,0)
 . S DGPAT("DOB")=$TR($$FMTE^XLFDT(DGPAT("DOB"),"5Z"),"/","")
"RTN","DGQEUT1",95,0)
 . ;
"RTN","DGQEUT1",96,0)
 . ;get name components
"RTN","DGQEUT1",97,0)
 . Q:'$$GETNAMC^DGQEDEMO(DGDFN,.DGPAT)
"RTN","DGQEUT1",98,0)
 . ;
"RTN","DGQEUT1",99,0)
 . ;get mailing address
"RTN","DGQEUT1",100,0)
 . Q:'$$GETADDR^DGQEDEMO(DGDFN,.DGPAT)
"RTN","DGQEUT1",101,0)
 . ;
"RTN","DGQEUT1",102,0)
 . ;get national ICN
"RTN","DGQEUT1",103,0)
 . S DGPAT("ICN")=$$GETICN^DGQEDEMO(DGDFN)
"RTN","DGQEUT1",104,0)
 . ;
"RTN","DGQEUT1",105,0)
 . ;get facility info
"RTN","DGQEUT1",106,0)
 . D GETSITE^DGQEDEMO(.DGPAT)
"RTN","DGQEUT1",107,0)
 . ;
"RTN","DGQEUT1",108,0)
 . ;success
"RTN","DGQEUT1",109,0)
 . S DGRSLT=1
"RTN","DGQEUT1",110,0)
 ;
"RTN","DGQEUT1",111,0)
 Q DGRSLT
"RTN","DGQEUT1",112,0)
 ;
"RTN","DGQEUT1",113,0)
GETELIG(DGDFN,DGELG) ;build Patient Eligibility object
"RTN","DGQEUT1",114,0)
 ; This function retrieves patient data needed to determine the
"RTN","DGQEUT1",115,0)
 ; patient's VIC eligibility and returns the data in an array format.
"RTN","DGQEUT1",116,0)
 ;
"RTN","DGQEUT1",117,0)
 ;  Supported References:
"RTN","DGQEUT1",118,0)
 ;    DBIA #10061: ELIG^VADPT
"RTN","DGQEUT1",119,0)
 ;    DBIA  #2716: $$GETSTAT^DGMSTAPI
"RTN","DGQEUT1",120,0)
 ;    DBIA  #4156: $$CVEDT^DGCV
"RTN","DGQEUT1",121,0)
 ;
"RTN","DGQEUT1",122,0)
 ;  Input:
"RTN","DGQEUT1",123,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGQEUT1",124,0)
 ;
"RTN","DGQEUT1",125,0)
 ;  Output:
"RTN","DGQEUT1",126,0)
 ;    Function value - returns 1 on success, 0 on failure
"RTN","DGQEUT1",127,0)
 ;    DGELG - array of eligibility indicators, pass by reference
"RTN","DGQEUT1",128,0)
 ;            Array subscripts are:
"RTN","DGQEUT1",129,0)
 ;             "SC"       - Service Connected indicator [0 or 1]
"RTN","DGQEUT1",130,0)
 ;             "ENRSTAT"  - Enrollment Status
"RTN","DGQEUT1",131,0)
 ;             "ELIGSTAT" - Eligibility Status
"RTN","DGQEUT1",132,0)
 ;             "MST"      - Military Sexual Trauma Status
"RTN","DGQEUT1",133,0)
 ;             "COMBVET"  - Combat Veteran Status
"RTN","DGQEUT1",134,0)
 ;
"RTN","DGQEUT1",135,0)
 N DFN     ;input parameter to ELIG^VADPT
"RTN","DGQEUT1",136,0)
 N DGRSLT  ;function value
"RTN","DGQEUT1",137,0)
 N VAEL    ;VADPT return array
"RTN","DGQEUT1",138,0)
 N VAERR   ;VADPT error value
"RTN","DGQEUT1",139,0)
 ;
"RTN","DGQEUT1",140,0)
 S DGRSLT=0
"RTN","DGQEUT1",141,0)
 ;
"RTN","DGQEUT1",142,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGQEUT1",143,0)
 . ;
"RTN","DGQEUT1",144,0)
 . ;get Eligibility Status and Service Connection
"RTN","DGQEUT1",145,0)
 . S DFN=DGDFN
"RTN","DGQEUT1",146,0)
 . D ELIG^VADPT
"RTN","DGQEUT1",147,0)
 . S DGELG("ELIGSTAT")=$P($G(VAEL(8)),U)
"RTN","DGQEUT1",148,0)
 . S DGELG("SC")=+$G(VAEL(3))
"RTN","DGQEUT1",149,0)
 . ;
"RTN","DGQEUT1",150,0)
 . ;get current Enrollment Status
"RTN","DGQEUT1",151,0)
 . S DGELG("ENRSTAT")=$$STATUS^DGENA(DGDFN)
"RTN","DGQEUT1",152,0)
 . ;
"RTN","DGQEUT1",153,0)
 . ;get MST Status
"RTN","DGQEUT1",154,0)
 . S DGELG("MST")=$P($$GETSTAT^DGMSTAPI(DGDFN),U,2)
"RTN","DGQEUT1",155,0)
 . ;
"RTN","DGQEUT1",156,0)
 . ;get Combat Veteran Status
"RTN","DGQEUT1",157,0)
 . S DGELG("COMBVET")=+$$CVEDT^DGCV(DGDFN)
"RTN","DGQEUT1",158,0)
 . ;
"RTN","DGQEUT1",159,0)
 . ;success
"RTN","DGQEUT1",160,0)
 . S DGRSLT=1
"RTN","DGQEUT1",161,0)
 ;
"RTN","DGQEUT1",162,0)
 Q DGRSLT
"RTN","DGQEUT2")
0^13^B39493646
"RTN","DGQEUT2",1,0)
DGQEUT2 ;ALB/RPM - VIC REPLACEMENT UTILITIES #2 ; 07/28/04
"RTN","DGQEUT2",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEUT2",3,0)
 ;
"RTN","DGQEUT2",4,0)
 ; This routine contains the following VIC Redesign API's:
"RTN","DGQEUT2",5,0)
 ;   CPRSTAT   - determine Card Print Release Status
"RTN","DGQEUT2",6,0)
 ;   $$PENDDT  - checks for pending requests and returns request date
"RTN","DGQEUT2",7,0)
 ;   $$REQFLD  - checks for required fields
"RTN","DGQEUT2",8,0)
 ;   $$HOLD    - checks for pending ICN and/or Enrollment
"RTN","DGQEUT2",9,0)
 ;   $$VICELIG - determines applicant's VIC eligibility
"RTN","DGQEUT2",10,0)
 ;
"RTN","DGQEUT2",11,0)
 Q  ;no direct entry
"RTN","DGQEUT2",12,0)
 ;
"RTN","DGQEUT2",13,0)
 ;
"RTN","DGQEUT2",14,0)
CPRSTAT(DGVIC) ;determine card print release status
"RTN","DGQEUT2",15,0)
 ; This procedure is used to determine Card Print Release Status from
"RTN","DGQEUT2",16,0)
 ; the data contained in the input array (DGVIC).  Once determined, the
"RTN","DGQEUT2",17,0)
 ; status and remarks are placed into the VIC data array.
"RTN","DGQEUT2",18,0)
 ;
"RTN","DGQEUT2",19,0)
 ;  Input:
"RTN","DGQEUT2",20,0)
 ;   DGVIC - VIC data array (pass by reference)
"RTN","DGQEUT2",21,0)
 ;
"RTN","DGQEUT2",22,0)
 ; Output: None
"RTN","DGQEUT2",23,0)
 ;
"RTN","DGQEUT2",24,0)
 N DGERR
"RTN","DGQEUT2",25,0)
 ;
"RTN","DGQEUT2",26,0)
 D  ;drop out of DO block when DGVIC("STAT") is known
"RTN","DGQEUT2",27,0)
 . ;
"RTN","DGQEUT2",28,0)
 . ;check if DFN is valid
"RTN","DGQEUT2",29,0)
 . ;set card print release status="C"ancel if not valid
"RTN","DGQEUT2",30,0)
 . I '$D(^DPT(+$G(DGVIC("DFN")),0)) D
"RTN","DGQEUT2",31,0)
 . . S DGVIC("STAT")="C"
"RTN","DGQEUT2",32,0)
 . . S DGVIC("REMARKS")="Unable to find veteran in the database"
"RTN","DGQEUT2",33,0)
 . Q:DGVIC("STAT")]""
"RTN","DGQEUT2",34,0)
 . ;
"RTN","DGQEUT2",35,0)
 . ;check for required fields
"RTN","DGQEUT2",36,0)
 . ;set card print release status="C"ancel if req field is missing
"RTN","DGQEUT2",37,0)
 . I '$$REQFLD(.DGVIC,.DGERR) D
"RTN","DGQEUT2",38,0)
 . . S DGVIC("STAT")="C"
"RTN","DGQEUT2",39,0)
 . . S DGVIC("REMARKS")=$G(DGERR)
"RTN","DGQEUT2",40,0)
 . Q:DGVIC("STAT")]""
"RTN","DGQEUT2",41,0)
 . ;
"RTN","DGQEUT2",42,0)
 . ;check ICN and Enrollment Status
"RTN","DGQEUT2",43,0)
 . ;set card print release status="H"old when either is pending
"RTN","DGQEUT2",44,0)
 . I $$HOLD(.DGVIC,.DGERR) D
"RTN","DGQEUT2",45,0)
 . . S DGVIC("STAT")="H"
"RTN","DGQEUT2",46,0)
 . . S DGVIC("REMARKS")=$G(DGERR)
"RTN","DGQEUT2",47,0)
 . Q:DGVIC("STAT")]""
"RTN","DGQEUT2",48,0)
 . ;
"RTN","DGQEUT2",49,0)
 . ;check if pt is eligible for VIC
"RTN","DGQEUT2",50,0)
 . ;set card print release status="P"rint if eligible, else "I"neligible
"RTN","DGQEUT2",51,0)
 . I $$VICELIG(.DGVIC) S DGVIC("STAT")="P"
"RTN","DGQEUT2",52,0)
 . E  D
"RTN","DGQEUT2",53,0)
 . . S DGVIC("STAT")="I"
"RTN","DGQEUT2",54,0)
 . . S DGVIC("REMARKS")="Veteran does not meet VIC eligibility requirements."
"RTN","DGQEUT2",55,0)
 ;
"RTN","DGQEUT2",56,0)
 Q
"RTN","DGQEUT2",57,0)
 ;
"RTN","DGQEUT2",58,0)
 ;
"RTN","DGQEUT2",59,0)
PENDDT(DGDFN) ;check for pending request date
"RTN","DGQEUT2",60,0)
 ;
"RTN","DGQEUT2",61,0)
 ;  Input:
"RTN","DGQEUT2",62,0)
 ;    DGDFN - pointer to patient in PATIENT (#2) file
"RTN","DGQEUT2",63,0)
 ;
"RTN","DGQEUT2",64,0)
 ;  Output:
"RTN","DGQEUT2",65,0)
 ;   Function value - FM format request date on success, 0 on failure
"RTN","DGQEUT2",66,0)
 ;
"RTN","DGQEUT2",67,0)
 N DGDAT   ;function value
"RTN","DGQEUT2",68,0)
 N DGRIEN  ;VIC REQUEST pointer
"RTN","DGQEUT2",69,0)
 N DGREQ   ;array of request data
"RTN","DGQEUT2",70,0)
 ;
"RTN","DGQEUT2",71,0)
 S DGDAT=0
"RTN","DGQEUT2",72,0)
 ;
"RTN","DGQEUT2",73,0)
 ;get last request
"RTN","DGQEUT2",74,0)
 S DGRIEN=$$FINDLST^DGQEREQ(DGDFN)
"RTN","DGQEUT2",75,0)
 I DGRIEN D
"RTN","DGQEUT2",76,0)
 . Q:'$$GETREQ^DGQEREQ(DGRIEN,.DGREQ)
"RTN","DGQEUT2",77,0)
 . ;
"RTN","DGQEUT2",78,0)
 . ;check Card Print Release Status
"RTN","DGQEUT2",79,0)
 . I $G(DGREQ("CPRSTAT"))="H" S DGDAT=+$G(DGREQ("REQDT"))
"RTN","DGQEUT2",80,0)
 ;
"RTN","DGQEUT2",81,0)
 Q DGDAT
"RTN","DGQEUT2",82,0)
 ;
"RTN","DGQEUT2",83,0)
 ;
"RTN","DGQEUT2",84,0)
REQFLD(DGVIC,DGERR) ;required field check
"RTN","DGQEUT2",85,0)
 ; This function is used to check for required fields in the VIC data
"RTN","DGQEUT2",86,0)
 ; array.
"RTN","DGQEUT2",87,0)
 ;
"RTN","DGQEUT2",88,0)
 ;  Input:
"RTN","DGQEUT2",89,0)
 ;   DGVIC - VIC data array (pass by reference)
"RTN","DGQEUT2",90,0)
 ;
"RTN","DGQEUT2",91,0)
 ; Output:
"RTN","DGQEUT2",92,0)
 ;   Function value - returns 1 on success, 0 on failure.
"RTN","DGQEUT2",93,0)
 ;   DGERR - error msg returned on failure
"RTN","DGQEUT2",94,0)
 ;
"RTN","DGQEUT2",95,0)
 N DGTYPE ;mailing address type
"RTN","DGQEUT2",96,0)
 N DGSUB  ;array subscript
"RTN","DGQEUT2",97,0)
 ;
"RTN","DGQEUT2",98,0)
 D  ;quit DO block on first error
"RTN","DGQEUT2",99,0)
 . ;
"RTN","DGQEUT2",100,0)
 . ;check for required SSN
"RTN","DGQEUT2",101,0)
 . I $G(DGVIC("SSN"))="" S DGERR="Unable to determine veteran's Social Security Number"
"RTN","DGQEUT2",102,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",103,0)
 . ;
"RTN","DGQEUT2",104,0)
 . ;check for required DOB to include month and day
"RTN","DGQEUT2",105,0)
 . I +$G(DGVIC("DOB"))>0 D
"RTN","DGQEUT2",106,0)
 . . I +$E(DGVIC("DOB"),1,2)<1!(+$E(DGVIC("DOB"),3,4)<1) S DGERR="Unable to determine veteran's complete Date of Birth"
"RTN","DGQEUT2",107,0)
 . E  S DGERR="Unable to determine veteran's Date of Birth"
"RTN","DGQEUT2",108,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",109,0)
 . ;
"RTN","DGQEUT2",110,0)
 . ;check for required name components
"RTN","DGQEUT2",111,0)
 . F DGSUB="NAME","LAST","FIRST" D  Q:$D(DGERR)
"RTN","DGQEUT2",112,0)
 . . I $G(DGVIC(DGSUB))="" S DGERR="Unable to determine veteran's Name"
"RTN","DGQEUT2",113,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",114,0)
 . ;
"RTN","DGQEUT2",115,0)
 . ;check for address selection type
"RTN","DGQEUT2",116,0)
 . I '$G(DGVIC("ADRTYPE")) S DGERR="Unable to determine a mailing address"
"RTN","DGQEUT2",117,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",118,0)
 . ;
"RTN","DGQEUT2",119,0)
 . ;check for required pt address components
"RTN","DGQEUT2",120,0)
 . F DGSUB="STREET1","CITY","STATE","ZIP" D  Q:$D(DGERR)
"RTN","DGQEUT2",121,0)
 . . I $G(DGVIC(DGSUB))="" D
"RTN","DGQEUT2",122,0)
 . . . S DGTYPE=$S(DGVIC("ADRTYPE")=1:"permanent",DGVIC("ADRTYPE")=2:"temporary",DGVIC("ADRTYPE")=3:"confidential",1:"facility")
"RTN","DGQEUT2",123,0)
 . . . S DGERR="Unable to determine the "_DGSUB_" field of the "_DGTYPE_" mailing address"
"RTN","DGQEUT2",124,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",125,0)
 . ;
"RTN","DGQEUT2",126,0)
 . ;check for required VIC eligibility factors
"RTN","DGQEUT2",127,0)
 . F DGSUB="SC" D  Q:$D(DGERR)
"RTN","DGQEUT2",128,0)
 . . I $G(DGVIC(DGSUB))="" S DGERR="Unable to determine veteran's Service Connected Indicator"
"RTN","DGQEUT2",129,0)
 . Q:$D(DGERR)
"RTN","DGQEUT2",130,0)
 . ;
"RTN","DGQEUT2",131,0)
 . ;check for required facility data elements
"RTN","DGQEUT2",132,0)
 . F DGSUB="FACNUM","FACNAME","VISN" D  Q:$D(DGERR)
"RTN","DGQEUT2",133,0)
 . . I $G(DGVIC(DGSUB))="" S DGERR="Unable to determine a source facility"
"RTN","DGQEUT2",134,0)
 ;
"RTN","DGQEUT2",135,0)
 Q $S($D(DGERR):0,1:1)
"RTN","DGQEUT2",136,0)
 ;
"RTN","DGQEUT2",137,0)
 ;
"RTN","DGQEUT2",138,0)
HOLD(DGVIC,DGMSG) ;check for pending ICN and/or Enrollment Status
"RTN","DGQEUT2",139,0)
 ; This function checks for a pending ICN and/or Enrollment Status and
"RTN","DGQEUT2",140,0)
 ; builds the appropriate message text when a pending condition exists.
"RTN","DGQEUT2",141,0)
 ;
"RTN","DGQEUT2",142,0)
 ;  Input:
"RTN","DGQEUT2",143,0)
 ;    DGVIC - VIC data array, pass by reference
"RTN","DGQEUT2",144,0)
 ;      Array subscripts are:
"RTN","DGQEUT2",145,0)
 ;          "ICN" - integration control number
"RTN","DGQEUT2",146,0)
 ;                  Note: Must be in format returned by $$GETICN^DGQEDEMO
"RTN","DGQEUT2",147,0)
 ;      "ENRSTAT" - enrollment status
"RTN","DGQEUT2",148,0)
 ;                  Note: Must be in format returned by $$STATUS^DGENA 
"RTN","DGQEUT2",149,0)
 ;
"RTN","DGQEUT2",150,0)
 ;  Output:
"RTN","DGQEUT2",151,0)
 ;   Function value - set of codes if pending data, 0 if no pending data
"RTN","DGQEUT2",152,0)
 ;                   1:National ICN missing
"RTN","DGQEUT2",153,0)
 ;                   2:Enrollment Status missing
"RTN","DGQEUT2",154,0)
 ;                   3:Both National ICN & Enrollment Status missing
"RTN","DGQEUT2",155,0)
 ;    DGMSG - message text containing what data is missing, pass by
"RTN","DGQEUT2",156,0)
 ;            reference
"RTN","DGQEUT2",157,0)
 ;
"RTN","DGQEUT2",158,0)
 N DGENRST  ;validated enrollment status value
"RTN","DGQEUT2",159,0)
 N DGRSLT  ;function value
"RTN","DGQEUT2",160,0)
 ;
"RTN","DGQEUT2",161,0)
 S DGRSLT=0
"RTN","DGQEUT2",162,0)
 S DGENRST=+$G(DGVIC("ENRSTAT"))
"RTN","DGQEUT2",163,0)
 ;
"RTN","DGQEUT2",164,0)
 I '+$G(DGVIC("ICN")) D
"RTN","DGQEUT2",165,0)
 . S DGRSLT=DGRSLT+1
"RTN","DGQEUT2",166,0)
 ;
"RTN","DGQEUT2",167,0)
 I 'DGENRST!(DGENRST=1)!(DGENRST=15)!(DGENRST=16)!(DGENRST=17)!(DGENRST=18) D
"RTN","DGQEUT2",168,0)
 . S DGRSLT=DGRSLT+2
"RTN","DGQEUT2",169,0)
 ;
"RTN","DGQEUT2",170,0)
 I DGRSLT D
"RTN","DGQEUT2",171,0)
 . S DGMSG="Veteran has a pending "
"RTN","DGQEUT2",172,0)
 . S DGMSG=DGMSG_$S(DGRSLT=1:"National ICN",DGRSLT=2:"Enrollment Status",DGRSLT=3:"National ICN and Enrollment Status",1:"")
"RTN","DGQEUT2",173,0)
 ;
"RTN","DGQEUT2",174,0)
 Q DGRSLT
"RTN","DGQEUT2",175,0)
 ;
"RTN","DGQEUT2",176,0)
 ;
"RTN","DGQEUT2",177,0)
VICELIG(DGELG) ;is applicant eligible for a Veteran ID Card?
"RTN","DGQEUT2",178,0)
 ; This function determines if an applicant is eligible for a Veteran
"RTN","DGQEUT2",179,0)
 ; Identification Card (VIC).
"RTN","DGQEUT2",180,0)
 ;
"RTN","DGQEUT2",181,0)
 ;  Input:
"RTN","DGQEUT2",182,0)
 ;    DGELG - eligibility data object array
"RTN","DGQEUT2",183,0)
 ;
"RTN","DGQEUT2",184,0)
 ; Output:
"RTN","DGQEUT2",185,0)
 ;  Function Value - returns 1 if the applicant is eligible for VIC,
"RTN","DGQEUT2",186,0)
 ;                   0 if not eligible 
"RTN","DGQEUT2",187,0)
 ;
"RTN","DGQEUT2",188,0)
 N DGRSLT ;function result
"RTN","DGQEUT2",189,0)
 ;
"RTN","DGQEUT2",190,0)
 ;set default, not eligible
"RTN","DGQEUT2",191,0)
 S DGRSLT=0
"RTN","DGQEUT2",192,0)
 ;
"RTN","DGQEUT2",193,0)
 D  ;apply VIC eligibilty rules
"RTN","DGQEUT2",194,0)
 . I (DGELG("ENRSTAT")=2)!(DGELG("ENRSTAT")=21) S DGRSLT=1 Q
"RTN","DGQEUT2",195,0)
 . ;
"RTN","DGQEUT2",196,0)
 . I (DGELG("ENRSTAT")=7)!(DGELG("ENRSTAT")=19)!(DGELG("ENRSTAT")=20) D  Q:DGRSLT
"RTN","DGQEUT2",197,0)
 . . Q:DGELG("ELIGSTAT")'="V"
"RTN","DGQEUT2",198,0)
 . . I DGELG("MST")="Y" S DGRSLT=1 Q
"RTN","DGQEUT2",199,0)
 . . I DGELG("SC")=1 S DGRSLT=1 Q
"RTN","DGQEUT2",200,0)
 . ;
"RTN","DGQEUT2",201,0)
 . I (DGELG("ENRSTAT")=11)!(DGELG("ENRSTAT")=12)!(DGELG("ENRSTAT")=13)!(DGELG("ENRSTAT")=14)!(DGELG("ENRSTAT")=22) D  Q:DGRSLT
"RTN","DGQEUT2",202,0)
 . . Q:DGELG("ELIGSTAT")'="V"
"RTN","DGQEUT2",203,0)
 . . I DGELG("COMBVET")=1 S DGRSLT=1 Q
"RTN","DGQEUT2",204,0)
 . . I DGELG("SC")=1 S DGRSLT=1 Q
"RTN","DGQEUT2",205,0)
 . . I DGELG("MST")="Y" S DGRSLT=1 Q
"RTN","DGQEUT2",206,0)
 ;
"RTN","DGQEUT2",207,0)
 Q DGRSLT
"RTN","DGQEUT3")
0^14^B14825619
"RTN","DGQEUT3",1,0)
DGQEUT3 ;ALB/RPM - VIC REPLACEMENT UTILITIES #3 ; 12/22/03
"RTN","DGQEUT3",2,0)
 ;;5.3;Registration;**571**;Aug 13, 1993
"RTN","DGQEUT3",3,0)
 ;
"RTN","DGQEUT3",4,0)
 ; This routine contains the following address selection and retrieval
"RTN","DGQEUT3",5,0)
 ; utilities:
"RTN","DGQEUT3",6,0)
 ;  $$GETFADD - retrieves facility address
"RTN","DGQEUT3",7,0)
 ;  $$GETPTCA - retrieves a confidential, temporary or permanent address
"RTN","DGQEUT3",8,0)
 ;  $$ISCONF  - determines if confidential address is active
"RTN","DGQEUT3",9,0)
 ;  $$ISTEMP  - determines if temporary address active
"RTN","DGQEUT3",10,0)
 ;  $$ISFRGN  - determines if selected address is a foreign address
"RTN","DGQEUT3",11,0)
 ;  $$GETABRV - converts pointer to STATE(#5) file to state abbreviation
"RTN","DGQEUT3",12,0)
 ;
"RTN","DGQEUT3",13,0)
 Q  ;no direct entry
"RTN","DGQEUT3",14,0)
 ;
"RTN","DGQEUT3",15,0)
GETFADD(DGFADD) ;retrieve facility address
"RTN","DGQEUT3",16,0)
 ; This function retrieves a facility's address from the INSTITUTION(#4)
"RTN","DGQEUT3",17,0)
 ; file and places the address in an array mapped to be compatible with
"RTN","DGQEUT3",18,0)
 ; the ADD^VADPT call.  A valid DUZ(2) is used to determine the
"RTN","DGQEUT3",19,0)
 ; pointer to the INSTITUTION(#4) file, otherwise, $$SITE^VASITE() is
"RTN","DGQEUT3",20,0)
 ; used.
"RTN","DGQEUT3",21,0)
 ;
"RTN","DGQEUT3",22,0)
 ;  Supported References:
"RTN","DGQEUT3",23,0)
 ;    DBIA  #2171: $$PADD^XUAF4
"RTN","DGQEUT3",24,0)
 ;    DBIA #10112: $$SITE^VASITE
"RTN","DGQEUT3",25,0)
 ;
"RTN","DGQEUT3",26,0)
 ;  Input:
"RTN","DGQEUT3",27,0)
 ;    none
"RTN","DGQEUT3",28,0)
 ;
"RTN","DGQEUT3",29,0)
 ;  Output:
"RTN","DGQEUT3",30,0)
 ;    DGFADD - facility address array, pass by reference
"RTN","DGQEUT3",31,0)
 ;             Array subscripts are:
"RTN","DGQEUT3",32,0)
 ;               "1" - Street Line 1
"RTN","DGQEUT3",33,0)
 ;               "2" - null
"RTN","DGQEUT3",34,0)
 ;               "3" - null
"RTN","DGQEUT3",35,0)
 ;               "4" - City
"RTN","DGQEUT3",36,0)
 ;               "5" - State (2 character abbreviation)
"RTN","DGQEUT3",37,0)
 ;               "6" - Zip
"RTN","DGQEUT3",38,0)
 ;   Function value - address type on success [4:facility]; 0 on failure
"RTN","DGQEUT3",39,0)
 ;
"RTN","DGQEUT3",40,0)
 N DGADR   ;return value of $$PADD api
"RTN","DGQEUT3",41,0)
 N DGINST  ;INSTITUTION (#4) file pointer
"RTN","DGQEUT3",42,0)
 N DGTYPE  ;function value address type
"RTN","DGQEUT3",43,0)
 ;
"RTN","DGQEUT3",44,0)
 S DGTYPE=0
"RTN","DGQEUT3",45,0)
 ;
"RTN","DGQEUT3",46,0)
 I $G(DUZ(2))>0 S DGINST=DUZ(2)
"RTN","DGQEUT3",47,0)
 E  S DGINST=$P($$SITE^VASITE(),U,1)
"RTN","DGQEUT3",48,0)
 ;
"RTN","DGQEUT3",49,0)
 I $D(^DIC(4,DGINST)) D
"RTN","DGQEUT3",50,0)
 . S DGADR=$$PADD^XUAF4(DGINST)
"RTN","DGQEUT3",51,0)
 . ;
"RTN","DGQEUT3",52,0)
 . S DGFADD(1)=$P(DGADR,U,1)   ;street 1
"RTN","DGQEUT3",53,0)
 . S DGFADD(2)=""              ;placeholder
"RTN","DGQEUT3",54,0)
 . S DGFADD(3)=""              ;placeholder
"RTN","DGQEUT3",55,0)
 . S DGFADD(4)=$P(DGADR,U,2)   ;city
"RTN","DGQEUT3",56,0)
 . S DGFADD(5)=$P(DGADR,U,3)   ;state
"RTN","DGQEUT3",57,0)
 . S DGFADD(6)=$P(DGADR,U,4)   ;zip
"RTN","DGQEUT3",58,0)
 . ;
"RTN","DGQEUT3",59,0)
 . ;success
"RTN","DGQEUT3",60,0)
 . S DGTYPE=4
"RTN","DGQEUT3",61,0)
 ;
"RTN","DGQEUT3",62,0)
 Q DGTYPE
"RTN","DGQEUT3",63,0)
 ;
"RTN","DGQEUT3",64,0)
GETPTCA(DGDFN,DGADDR) ;select confidential, temporary or permanent address
"RTN","DGQEUT3",65,0)
 ; This function uses ADD^VADPT to retrieve a patient address array and
"RTN","DGQEUT3",66,0)
 ; selects the address to be used for mailing.  The address selection
"RTN","DGQEUT3",67,0)
 ; priority is as follows:
"RTN","DGQEUT3",68,0)
 ;   1) Active "ELIGIBILITY/ENROLLMENT"-category Confidential Address
"RTN","DGQEUT3",69,0)
 ;   2) Active Temporary Address
"RTN","DGQEUT3",70,0)
 ;   3) Permanent Address
"RTN","DGQEUT3",71,0)
 ; The selected address is returned in an array format.
"RTN","DGQEUT3",72,0)
 ;
"RTN","DGQEUT3",73,0)
 ;  Supported Reference:
"RTN","DGQEUT3",74,0)
 ;    DBIA #10061: ADD^VADPT
"RTN","DGQEUT3",75,0)
 ;
"RTN","DGQEUT3",76,0)
 ;  Input:
"RTN","DGQEUT3",77,0)
 ;    DGDFN - pointer to patient in PATIENT (#2) file
"RTN","DGQEUT3",78,0)
 ;
"RTN","DGQEUT3",79,0)
 ;  Output:
"RTN","DGQEUT3",80,0)
 ;    DGADDR - selected address array, pass by reference
"RTN","DGQEUT3",81,0)
 ;             Array subscripts are:
"RTN","DGQEUT3",82,0)
 ;              "1" - Street Line 1
"RTN","DGQEUT3",83,0)
 ;              "2" - Street Line 2
"RTN","DGQEUT3",84,0)
 ;              "3" - Street Line 3
"RTN","DGQEUT3",85,0)
 ;              "4" - City
"RTN","DGQEUT3",86,0)
 ;              "5" - State (abbreviation)
"RTN","DGQEUT3",87,0)
 ;              "6" - Zip
"RTN","DGQEUT3",88,0)
 ;              "7" - County
"RTN","DGQEUT3",89,0)
 ;    Function value - set of codes for address type [1:permanent,
"RTN","DGQEUT3",90,0)
 ;                     2:temporary,3:confidential]
"RTN","DGQEUT3",91,0)
 ;
"RTN","DGQEUT3",92,0)
 N DFN      ;input parameter for ADD^VADPT
"RTN","DGQEUT3",93,0)
 N DGI      ;generic counter
"RTN","DGQEUT3",94,0)
 N DGLINE1  ;array node of Street Line 1
"RTN","DGQEUT3",95,0)
 N DGSUB    ;return array subscript
"RTN","DGQEUT3",96,0)
 N DGTYPE   ;function value - address type
"RTN","DGQEUT3",97,0)
 N VAERR    ;error return from VADPT
"RTN","DGQEUT3",98,0)
 N VAPA     ;result array from VADPT
"RTN","DGQEUT3",99,0)
 ;
"RTN","DGQEUT3",100,0)
 S DGTYPE=0
"RTN","DGQEUT3",101,0)
 ;
"RTN","DGQEUT3",102,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGQEUT3",103,0)
 . S DFN=DGDFN
"RTN","DGQEUT3",104,0)
 . D ADD^VADPT
"RTN","DGQEUT3",105,0)
 . ;
"RTN","DGQEUT3",106,0)
 . ;determine address type
"RTN","DGQEUT3",107,0)
 . S DGTYPE=$S($$ISCONF(.VAPA,"ELIGIBILITY/ENROLLMENT"):3,$$ISTEMP(.VAPA):2,1:1)
"RTN","DGQEUT3",108,0)
 . ;
"RTN","DGQEUT3",109,0)
 . ;copy VADPT array into return array
"RTN","DGQEUT3",110,0)
 . S DGLINE1=$S(DGTYPE=3:13,1:1)
"RTN","DGQEUT3",111,0)
 . S DGSUB=0
"RTN","DGQEUT3",112,0)
 . F DGI=DGLINE1:1:DGLINE1+6 D
"RTN","DGQEUT3",113,0)
 . . S DGSUB=DGSUB+1
"RTN","DGQEUT3",114,0)
 . . I DGSUB=5 D  ;get state abbreviation
"RTN","DGQEUT3",115,0)
 . . . S DGADDR(DGSUB)=$$GETABRV($P(VAPA(DGI),U))
"RTN","DGQEUT3",116,0)
 . . E  D
"RTN","DGQEUT3",117,0)
 . . . S DGADDR(DGSUB)=$P(VAPA(DGI),U)
"RTN","DGQEUT3",118,0)
 ;
"RTN","DGQEUT3",119,0)
 Q DGTYPE
"RTN","DGQEUT3",120,0)
 ;
"RTN","DGQEUT3",121,0)
 ;
"RTN","DGQEUT3",122,0)
ISCONF(DGADD,DGCAT) ;is confidential address active?
"RTN","DGQEUT3",123,0)
 ; This function accepts an address array returned from a call to 
"RTN","DGQEUT3",124,0)
 ; ADD^VADPT and determines if an active confidential address exists
"RTN","DGQEUT3",125,0)
 ; for the given category.
"RTN","DGQEUT3",126,0)
 ;
"RTN","DGQEUT3",127,0)
 ;  DGADD - VAPA address array from ADD^VADPT
"RTN","DGQEUT3",128,0)
 ;  DGCAT - confidential address category
"RTN","DGQEUT3",129,0)
 ;
"RTN","DGQEUT3",130,0)
 ;  Output:
"RTN","DGQEUT3",131,0)
 ;   Function value - 1:confidential address active,0:confidential
"RTN","DGQEUT3",132,0)
 ;                    address inactive
"RTN","DGQEUT3",133,0)
 ;
"RTN","DGQEUT3",134,0)
 N DGI     ;generic counter
"RTN","DGQEUT3",135,0)
 N DGRSLT  ;function value
"RTN","DGQEUT3",136,0)
 ;
"RTN","DGQEUT3",137,0)
 S DGRSLT=0
"RTN","DGQEUT3",138,0)
 I $G(DGADD(12)),$G(DGCAT)]"" D
"RTN","DGQEUT3",139,0)
 . S DGI=0
"RTN","DGQEUT3",140,0)
 . F  S DGI=$O(DGADD(22,DGI)) Q:'DGI  D  Q:DGRSLT
"RTN","DGQEUT3",141,0)
 . . Q:$P($G(DGADD(22,DGI)),U,2)'=DGCAT
"RTN","DGQEUT3",142,0)
 . . Q:$P($G(DGADD(22,DGI)),U,3)'="Y"
"RTN","DGQEUT3",143,0)
 . . S DGRSLT=1
"RTN","DGQEUT3",144,0)
 ;
"RTN","DGQEUT3",145,0)
 Q DGRSLT
"RTN","DGQEUT3",146,0)
 ;
"RTN","DGQEUT3",147,0)
 ;
"RTN","DGQEUT3",148,0)
ISTEMP(DGADD) ;is temporary address active?
"RTN","DGQEUT3",149,0)
 ; This function determines if an active temporary address exists.
"RTN","DGQEUT3",150,0)
 ;
"RTN","DGQEUT3",151,0)
 ;  Input:
"RTN","DGQEUT3",152,0)
 ;    DGADD - address array in VADPT VAPA format
"RTN","DGQEUT3",153,0)
 ;
"RTN","DGQEUT3",154,0)
 ;  Output:
"RTN","DGQEUT3",155,0)
 ;   Function value - 1 on active temp address, 0 on failure
"RTN","DGQEUT3",156,0)
 ;
"RTN","DGQEUT3",157,0)
 Q $G(DGADD(9))>0
"RTN","DGQEUT3",158,0)
 ;
"RTN","DGQEUT3",159,0)
 ; 
"RTN","DGQEUT3",160,0)
ISFRGN(DGADD) ;is selected address foreign?
"RTN","DGQEUT3",161,0)
 ; This function determines if the address selected by VADPT is a
"RTN","DGQEUT3",162,0)
 ; foreign address.
"RTN","DGQEUT3",163,0)
 ;
"RTN","DGQEUT3",164,0)
 ;  Input:
"RTN","DGQEUT3",165,0)
 ;    DGADD - address aray in VADPT VAPA format
"RTN","DGQEUT3",166,0)
 ;
"RTN","DGQEUT3",167,0)
 ;  Output:
"RTN","DGQEUT3",168,0)
 ;   Function value - returns 1 on foreign address, 0 not a foreign
"RTN","DGQEUT3",169,0)
 ;                    address
"RTN","DGQEUT3",170,0)
 ;
"RTN","DGQEUT3",171,0)
 Q $G(DGADD(7))="999"
"RTN","DGQEUT3",172,0)
 ;
"RTN","DGQEUT3",173,0)
 ;
"RTN","DGQEUT3",174,0)
GETABRV(DGIEN) ;retrieve state abbreviation
"RTN","DGQEUT3",175,0)
 ; This function retrieves the abbreviation for a state from the STAT
"RTN","DGQEUT3",176,0)
 ; (#5) file for a given IEN.
"RTN","DGQEUT3",177,0)
 ;
"RTN","DGQEUT3",178,0)
 ;  Supported Reference:
"RTN","DGQEUT3",179,0)
 ;    DBIA #10056: FileMan Read access to STATE (#5) file
"RTN","DGQEUT3",180,0)
 ;
"RTN","DGQEUT3",181,0)
 ;  Input:
"RTN","DGQEUT3",182,0)
 ;    DGIEN - pointer to a state in the STATE (#5) file
"RTN","DGQEUT3",183,0)
 ;
"RTN","DGQEUT3",184,0)
 ;  Output:
"RTN","DGQEUT3",185,0)
 ;   Function value - state abbreviation on success, "" on failure
"RTN","DGQEUT3",186,0)
 ;
"RTN","DGQEUT3",187,0)
 N DGABRV  ;function value
"RTN","DGQEUT3",188,0)
 N DGERR   ;FM error value
"RTN","DGQEUT3",189,0)
 ;
"RTN","DGQEUT3",190,0)
 S DGABRV=""
"RTN","DGQEUT3",191,0)
 ;
"RTN","DGQEUT3",192,0)
 I $G(DGIEN)>0,$D(^DIC(5,DGIEN,0)) D
"RTN","DGQEUT3",193,0)
 . S DGABRV=$$GET1^DIQ(5,DGIEN_",",1,"","","DGERR")
"RTN","DGQEUT3",194,0)
 . S:$D(DGERR) DGABRV=""
"RTN","DGQEUT3",195,0)
 ;
"RTN","DGQEUT3",196,0)
 Q DGABRV
"VER")
8.0^22.0
"^DD",39.6,39.6,0)
FIELD^^.05^5
"^DD",39.6,39.6,0,"DDA")
N
"^DD",39.6,39.6,0,"DT")
3040211
"^DD",39.6,39.6,0,"IX","B",39.6,.01)

"^DD",39.6,39.6,0,"NM","VIC REQUEST")

"^DD",39.6,39.6,0,"PT",39.7,.02)

"^DD",39.6,39.6,.01,0)
NCMD CARD ID^RF^^0;1^K:$L(X)>60!($L(X)<1) X
"^DD",39.6,39.6,.01,1,0)
^.1
"^DD",39.6,39.6,.01,1,1,0)
39.6^B
"^DD",39.6,39.6,.01,1,1,1)
S ^DGQE(39.6,"B",$E(X,1,30),DA)=""
"^DD",39.6,39.6,.01,1,1,2)
K ^DGQE(39.6,"B",$E(X,1,30),DA)
"^DD",39.6,39.6,.01,3)
Answer must be 1-60 characters in length.
"^DD",39.6,39.6,.01,21,0)
^^7^7^3040204^
"^DD",39.6,39.6,.01,21,1,0)
This field contains the Veteran ID Card (VIC) Card ID that is assigned
"^DD",39.6,39.6,.01,21,2,0)
when a VIC request is stored to the National Card Management Directory.  
"^DD",39.6,39.6,.01,21,3,0)
The VIC Picture Image Capture Software sets this value through an RPC call
"^DD",39.6,39.6,.01,21,4,0)
after successfully submitting a VIC request to the NCMD.
"^DD",39.6,39.6,.01,21,5,0)
                                 
"^DD",39.6,39.6,.01,21,6,0)
Card ID format: 
"^DD",39.6,39.6,.01,21,7,0)
  patient SSN_"-"_patient lastname_"-"_NCMD number
"^DD",39.6,39.6,.01,"DT")
3031229
"^DD",39.6,39.6,.02,0)
PATIENT^RP2'^DPT(^0;2^Q
"^DD",39.6,39.6,.02,1,0)
^.1^^0
"^DD",39.6,39.6,.02,3)
Enter the patient with a missing national ICN or Enrollment Status.
"^DD",39.6,39.6,.02,21,0)
^^2^2^3040205^
"^DD",39.6,39.6,.02,21,1,0)
This field contains the patient that is missing a national ICN or has a 
"^DD",39.6,39.6,.02,21,2,0)
pending Enrollment Status.
"^DD",39.6,39.6,.02,"DT")
3040205
"^DD",39.6,39.6,.03,0)
CARD PRINT RELEASE STATUS^RS^H:HOLD;P:PRINT;C:CANCEL;I:INELIGIBLE;^0;3^Q
"^DD",39.6,39.6,.03,3)
Enter "H" for HOLD, "P" for PRINT, "I" for INELGIBLE, or "C" for CANCEL
"^DD",39.6,39.6,.03,21,0)
^^3^3^3040211^
"^DD",39.6,39.6,.03,21,1,0)
This field contains the VIC request status as a set of codes.  "H"old 
"^DD",39.6,39.6,.03,21,2,0)
status requests are periodically checked to determine if the status can 
"^DD",39.6,39.6,.03,21,3,0)
be modified to either "P"rint, "I"neligible, or "C"ancel.
"^DD",39.6,39.6,.03,"DT")
3040211
"^DD",39.6,39.6,.04,0)
REQUEST DATE/TIME^RD^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",39.6,39.6,.04,3)
Enter the Date and Time that a VIC request is entered.
"^DD",39.6,39.6,.04,21,0)
^^3^3^3031229^
"^DD",39.6,39.6,.04,21,1,0)
This field contains the date and time that a VIC request was successfully 
"^DD",39.6,39.6,.04,21,2,0)
submitted from the VIC Image Capture Workstation to the National Card 
"^DD",39.6,39.6,.04,21,3,0)
Management Directory.
"^DD",39.6,39.6,.04,"DT")
3031230
"^DD",39.6,39.6,.05,0)
TRANSMISSION REQUIRED?^R*S^Y:YES;N:NO;^0;5^Q
"^DD",39.6,39.6,.05,3)
Enter YES or NO.
"^DD",39.6,39.6,.05,12)
YES cannot be selected when the CARD PRINT RELEASE STATUS is "HOLD".
"^DD",39.6,39.6,.05,12.1)
S DIC("S")="I Y=""N""!($P(^DGQE(39.6,DA,0),U,3)'=""H"")"
"^DD",39.6,39.6,.05,21,0)
^.001^2^2^3040226^^
"^DD",39.6,39.6,.05,21,1,0)
This field indicates whether or not the VIC request is to be transmitted 
"^DD",39.6,39.6,.05,21,2,0)
from VistA to the NCMD.
"^DD",39.6,39.6,.05,"DT")
3031231
"^DD",39.7,39.7,0)
FIELD^^.05^5
"^DD",39.7,39.7,0,"DT")
3031229
"^DD",39.7,39.7,0,"IX","B",39.7,.01)

"^DD",39.7,39.7,0,"NM","VIC HL7 TRANSMISSION LOG")

"^DD",39.7,39.7,.01,0)
MESSAGE CONTROL ID^RF^^0;1^K:$L(X)>20!($L(X)<1) X
"^DD",39.7,39.7,.01,1,0)
^.1
"^DD",39.7,39.7,.01,1,1,0)
39.7^B
"^DD",39.7,39.7,.01,1,1,1)
S ^DGQE(39.7,"B",$E(X,1,30),DA)=""
"^DD",39.7,39.7,.01,1,1,2)
K ^DGQE(39.7,"B",$E(X,1,30),DA)
"^DD",39.7,39.7,.01,3)
Answer must be 1-20 characters in length.
"^DD",39.7,39.7,.01,21,0)
^.001^2^2^3031229^^
"^DD",39.7,39.7,.01,21,1,0)
This field contains the HL7 Message ID of the transmitted General 
"^DD",39.7,39.7,.01,21,2,0)
Order (ORM~O01) message.
"^DD",39.7,39.7,.01,"DT")
3031229
"^DD",39.7,39.7,.02,0)
VIC REQUEST^RP39.6'^DGQE(39.6,^0;2^Q
"^DD",39.7,39.7,.02,3)
Enter the corresponding VIC REQUEST for this HL7 transmission.
"^DD",39.7,39.7,.02,21,0)
^^2^2^3040205^
"^DD",39.7,39.7,.02,21,1,0)
This field contains the VIC request that generated the General Order 
"^DD",39.7,39.7,.02,21,2,0)
(ORM~O01) HL7 message transmitted to the NCMD.
"^DD",39.7,39.7,.02,"DT")
3031229
"^DD",39.7,39.7,.03,0)
TRANSMITTED DATE/TIME^RD^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",39.7,39.7,.03,3)
Enter the date and time that the HL7 message is transmitted.
"^DD",39.7,39.7,.03,21,0)
^^2^2^3031229^
"^DD",39.7,39.7,.03,21,1,0)
This field contains the date and time that the General Order (ORM~O01) HL7
"^DD",39.7,39.7,.03,21,2,0)
message is transmitted.
"^DD",39.7,39.7,.03,"DT")
3031229
"^DD",39.7,39.7,.04,0)
STATUS^RS^T:TRANSMITTED;A:ACCEPTED;RJ:REJECTED;RT:RETRANSMITTED;^0;4^Q
"^DD",39.7,39.7,.04,3)
Enter the transmission status ("T", "A", "RJ", or "RT").
"^DD",39.7,39.7,.04,21,0)
^^1^1^3031229^
"^DD",39.7,39.7,.04,21,1,0)
This field contains the status of the HL7 transmission as a set of codes.
"^DD",39.7,39.7,.04,"DT")
3040102
"^DD",39.7,39.7,.05,0)
ACK RECEIVED DATE/TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",39.7,39.7,.05,3)
Enter the date and time of the received General Orders Response.
"^DD",39.7,39.7,.05,21,0)
^^2^2^3031229^
"^DD",39.7,39.7,.05,21,1,0)
This field contains the date and time that a General Order Response 
"^DD",39.7,39.7,.05,21,2,0)
(ORR~O02) HL7 message was received acknowledging the transmission.
"^DD",39.7,39.7,.05,"DT")
3031229
"^DIC",39.6,39.6,0)
VIC REQUEST^39.6
"^DIC",39.6,39.6,0,"GL")
^DGQE(39.6,
"^DIC",39.6,39.6,"%D",0)
^1.001^2^2^3040204^^
"^DIC",39.6,39.6,"%D",1,0)
This file contains records of Veteran ID Card requests that are on "H"old 
"^DIC",39.6,39.6,"%D",2,0)
due to a missing national ICN or pending Enrollment Status.
"^DIC",39.6,"B","VIC REQUEST",39.6)

"^DIC",39.7,39.7,0)
VIC HL7 TRANSMISSION LOG^39.7
"^DIC",39.7,39.7,0,"GL")
^DGQE(39.7,
"^DIC",39.7,39.7,"%D",0)
^^8^8^3040204^
"^DIC",39.7,39.7,"%D",1,0)
This file contains a list of General Order (ORM~O01) HL7 transmissions
"^DIC",39.7,39.7,"%D",2,0)
that have been sent to the National Card Management Directory (NCMD) by 
"^DIC",39.7,39.7,"%D",3,0)
the Veteran ID Card software module.  Entries in this file are
"^DIC",39.7,39.7,"%D",4,0)
created/edited automatically by the VistA to NCMD HL7 interface.
"^DIC",39.7,39.7,"%D",5,0)
 
"^DIC",39.7,39.7,"%D",6,0)
Records in this file should not be added or edited except through the use 
"^DIC",39.7,39.7,"%D",7,0)
of the Veteran ID Card software that is part of Registration. Doing so
"^DIC",39.7,39.7,"%D",8,0)
would likely cause Veteran ID Card database to become corrupted.
"^DIC",39.7,"B","VIC HL7 TRANSMISSION LOG",39.7)

**END**
**END**
