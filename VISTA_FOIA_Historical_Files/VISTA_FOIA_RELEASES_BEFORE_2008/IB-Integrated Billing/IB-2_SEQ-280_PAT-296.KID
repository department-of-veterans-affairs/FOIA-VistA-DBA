Released IB*2*296 SEQ #280
Extracted from mail message
**KIDS**:IB*2.0*296^

**INSTALL NAME**
IB*2.0*296
"BLD",5217,0)
IB*2.0*296^INTEGRATED BILLING^0^3050713^y
"BLD",5217,1,0)
^^115^115^3050713^
"BLD",5217,1,1,0)
Routines: IBCE837, IBCE837A
"BLD",5217,1,2,0)
  Changes to allow test claims to be resubmitted from previously
"BLD",5217,1,3,0)
  transmitted claims.
"BLD",5217,1,4,0)
 
"BLD",5217,1,5,0)
Routines: IBCESRV
"BLD",5217,1,6,0)
  Changes server logic for reports to send test message flag if msg
"BLD",5217,1,7,0)
  received in test queue.
"BLD",5217,1,8,0)
 
"BLD",5217,1,9,0)
Routines: IBCEM01, IBCEM02, IBCEM03
"BLD",5217,1,10,0)
  Allows selection of existing batches or individual claims to be
"BLD",5217,1,11,0)
  re-submitted as test claims from the original EDI resubmit bill/batch
"BLD",5217,1,12,0)
  options.
"BLD",5217,1,13,0)
 
"BLD",5217,1,14,0)
Routine: IBCNSGE
"BLD",5217,1,15,0)
  Insurance Company EDI Parameter Report
"BLD",5217,1,16,0)
 
"BLD",5217,1,17,0)
Routine: IBCEF2
"BLD",5217,1,18,0)
  Pull the id from the insurance company file if the claim is an MRA 
"BLD",5217,1,19,0)
  secondary and the id exists. If there is no id, force PPRNT or IPRNT. 
"BLD",5217,1,20,0)
 
"BLD",5217,1,21,0)
Routine IBCEF21
"BLD",5217,1,22,0)
  Two procedures moved out of IBCEF2 and into IBCEF21 for space.
"BLD",5217,1,23,0)
 
"BLD",5217,1,24,0)
Routine: IBCEF31
"BLD",5217,1,25,0)
  Ensure that the electronic insurance type field for the Medicare (WNR) 
"BLD",5217,1,26,0)
  entry is always 3:MEDICARE.  This is the 3.09 field in file 36.
"BLD",5217,1,27,0)
 
"BLD",5217,1,28,0)
Routine: IBCEF4
"BLD",5217,1,29,0)
  Change to return a true value if the claim is being resubmitted as a
"BLD",5217,1,30,0)
  test claim.
"BLD",5217,1,31,0)
 
"BLD",5217,1,32,0)
Routine: IBCEF
"BLD",5217,1,33,0)
  Bug fix to the $$NOPUNCT function.  Allow the exclusions parameter to 
"BLD",5217,1,34,0)
  function properly.
"BLD",5217,1,35,0)
 
"BLD",5217,1,36,0)
Routine: IBCBB2
"BLD",5217,1,37,0)
  Change to allow 8 diagnoses codes. 
"BLD",5217,1,38,0)
 
"BLD",5217,1,39,0)
Routine: IBY296PR (new)  (pre-install)
"BLD",5217,1,40,0)
  Pre-install changes the data element for entry #1015 in file 364.7
"BLD",5217,1,41,0)
 
"BLD",5217,1,42,0)
Routine: IBCERPT
"BLD",5217,1,43,0)
  Changed to output " * * TEST RESULTS * * " on reports from the MCT queue
"BLD",5217,1,44,0)
 
"BLD",5217,1,45,0)
Routine: IBCEPTU (new)
"BLD",5217,1,46,0)
  Utility code added to allow lookup of last transmitted date when a
"BLD",5217,1,47,0)
  transmission entry is deleted for an entry in file 361.4
"BLD",5217,1,48,0)
 
"BLD",5217,1,49,0)
Routine: IBCEPTR
"BLD",5217,1,50,0)
  Report of data stored in file 361.4.
"BLD",5217,1,51,0)
 
"BLD",5217,1,52,0)
Routine: IBCESRV, IBCESRV2
"BLD",5217,1,53,0)
  Changed to capture the MCT messages for claims resubmitted for test and
"BLD",5217,1,54,0)
  send them to be stored in the new test claim message file
"BLD",5217,1,55,0)
 
"BLD",5217,1,56,0)
Routine: IBCEPTM (new)
"BLD",5217,1,57,0)
  Stores the transmission and test status message data in file 361.4
"BLD",5217,1,58,0)
 
"BLD",5217,1,59,0)
Routines: IBCEPTC, IBCEPTC1, IBCEPTC2 (new)
"BLD",5217,1,60,0)
  New routines for the list manager display and resubmission of
"BLD",5217,1,61,0)
  previously transmitted claims as test claims.
"BLD",5217,1,62,0)
 
"BLD",5217,1,63,0)
Routine IBCE
"BLD",5217,1,64,0)
  Modify the IB nightly job section to call the Purge routine for file 
"BLD",5217,1,65,0)
  361.4.
"BLD",5217,1,66,0)
 
"BLD",5217,1,67,0)
Routines IBCEU0, IBCEU1
"BLD",5217,1,68,0)
  Fix LCOB segment pieces (modifiers and payer id)
"BLD",5217,1,69,0)
 
"BLD",5217,1,70,0)
Routine IBCEOB1
"BLD",5217,1,71,0)
  Fix split MRA filing problem.  Keep track of VistA line numbers across 
"BLD",5217,1,72,0)
  multiple split MRAs in file 361.1.
"BLD",5217,1,73,0)
 
"BLD",5217,1,74,0)
Routine IBCCC2
"BLD",5217,1,75,0)
  Remove the code which deletes the BILL COPIED FROM field when 
"BLD",5217,1,76,0)
  processing an MRA claim into a secondary MRA claim.
"BLD",5217,1,77,0)
 
"BLD",5217,1,78,0)
Routine IBCEP0B
"BLD",5217,1,79,0)
  Added a new parameter to the call PARAMS^IBCNSC1 to fix an undefined 
"BLD",5217,1,80,0)
  variable error that was occuring as a result of Patch 291. 
"BLD",5217,1,81,0)
 
"BLD",5217,1,82,0)
Routine IBCERP3
"BLD",5217,1,83,0)
  Report of bill batches waiting Austin receipt more than 1 day.  
"BLD",5217,1,84,0)
  Modification to routine to make it more similar to routine IBCEBUL by 
"BLD",5217,1,85,0)
  checking to see if there are any bills in the batch before including it 
"BLD",5217,1,86,0)
  on this report.
"BLD",5217,1,87,0)
 
"BLD",5217,1,88,0)
Routine IBCERP5
"BLD",5217,1,89,0)
  Modify the batch status detail report to show claims from test batches 
"BLD",5217,1,90,0)
  stored in file 361.4.
"BLD",5217,1,91,0)
 
"BLD",5217,1,92,0)
New field FILE 364.2:
"BLD",5217,1,93,0)
 .14 CLAIM RESUBMITTED TEST
"BLD",5217,1,94,0)
 
"BLD",5217,1,95,0)
Entries modified in file 364.7:
"BLD",5217,1,96,0)
 #136 (changed entry for group #/group name exclusion CI3-3)
"BLD",5217,1,97,0)
 #137 (changed entry for group #/group name exclusion CI3-4)
"BLD",5217,1,98,0)
 #830 (changed to fix problem with LCOB records)
"BLD",5217,1,99,0)
 #985 (changed to fix problem with LCOB records)
"BLD",5217,1,100,0)
 #1006 (changed data element, ins type OI1-17)
"BLD",5217,1,101,0)
 #1015 (changed data element, version info GEN-7)
"BLD",5217,1,102,0)
 #1039 (new entry for current payer sequence CI1-14)
"BLD",5217,1,103,0)
 #1040 (new entry for MRA secondary indicator CI1-15)
"BLD",5217,1,104,0)
 
"BLD",5217,1,105,0)
Entries modified in file 364.6:
"BLD",5217,1,106,0)
 #1321 (new entry for current payer sequence CI1-14)
"BLD",5217,1,107,0)
 #1322 (new entry for MRA secondary indicator CI1-15)
"BLD",5217,1,108,0)
 
"BLD",5217,1,109,0)
New File: 361.4 EDI TEST CLAIM STATUS MESSAGE
"BLD",5217,1,110,0)
  Holds the test transmission and all test status messages received in
"BLD",5217,1,111,0)
  the test queue (MCT) for claims resubmitted as test.
"BLD",5217,1,112,0)
 
"BLD",5217,1,113,0)
NOIS ENTRIES INCLUDED:
"BLD",5217,1,114,0)
UNY-0205-10041  SYNTAX ERROR 1/31 -MISSING LCOB-02
"BLD",5217,1,115,0)
LEX-0205-40005  SYNTAX ERROR 1/27 - LCOB/LCAS Prob.
"BLD",5217,4,0)
^9.64PA^361.4^4
"BLD",5217,4,361.4,0)
361.4
"BLD",5217,4,361.4,222)
y^n^f^^^^n
"BLD",5217,4,364.2,0)
364.2
"BLD",5217,4,364.2,2,0)
^9.641^364.2^1
"BLD",5217,4,364.2,2,364.2,0)
EDI MESSAGES  (File-top level)
"BLD",5217,4,364.2,2,364.2,1,0)
^9.6411^.14^1
"BLD",5217,4,364.2,2,364.2,1,.14,0)
CLAIM RESUBMITTED TEST
"BLD",5217,4,364.2,222)
y^n^p^^^^n^^n
"BLD",5217,4,364.2,224)

"BLD",5217,4,364.6,0)
364.6
"BLD",5217,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",5217,4,364.6,224)
I +Y=1321!(+Y=1322)
"BLD",5217,4,364.7,0)
364.7
"BLD",5217,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",5217,4,364.7,224)
I $F(".136.137.830.985.1006.1015.1039.1040.","."_+Y_".")
"BLD",5217,4,"APDD",364.2,364.2)

"BLD",5217,4,"APDD",364.2,364.2,.14)

"BLD",5217,4,"B",361.4,361.4)

"BLD",5217,4,"B",364.2,364.2)

"BLD",5217,4,"B",364.6,364.6)

"BLD",5217,4,"B",364.7,364.7)

"BLD",5217,"ABPKG")
n
"BLD",5217,"INI")
IBY296PR
"BLD",5217,"INID")

"BLD",5217,"KRN",0)
^9.67PA^8989.52^19
"BLD",5217,"KRN",.4,0)
.4
"BLD",5217,"KRN",.401,0)
.401
"BLD",5217,"KRN",.402,0)
.402
"BLD",5217,"KRN",.403,0)
.403
"BLD",5217,"KRN",.5,0)
.5
"BLD",5217,"KRN",.84,0)
.84
"BLD",5217,"KRN",3.6,0)
3.6
"BLD",5217,"KRN",3.8,0)
3.8
"BLD",5217,"KRN",9.2,0)
9.2
"BLD",5217,"KRN",9.8,0)
9.8
"BLD",5217,"KRN",9.8,"NM",0)
^9.68A^29^29
"BLD",5217,"KRN",9.8,"NM",1,0)
IBCE837^^0^B81681758
"BLD",5217,"KRN",9.8,"NM",2,0)
IBCE837A^^0^B42933569
"BLD",5217,"KRN",9.8,"NM",3,0)
IBCEM02^^0^B61742795
"BLD",5217,"KRN",9.8,"NM",4,0)
IBCEM03^^0^B45055714
"BLD",5217,"KRN",9.8,"NM",5,0)
IBCEF4^^0^B27604330
"BLD",5217,"KRN",9.8,"NM",6,0)
IBCNSGE^^0^B85166056
"BLD",5217,"KRN",9.8,"NM",7,0)
IBCEF2^^0^B53700884
"BLD",5217,"KRN",9.8,"NM",8,0)
IBCESRV^^0^B67439456
"BLD",5217,"KRN",9.8,"NM",9,0)
IBCBB2^^0^B35010938
"BLD",5217,"KRN",9.8,"NM",10,0)
IBCEM01^^0^B15641446
"BLD",5217,"KRN",9.8,"NM",11,0)
IBCEPTC^^0^B76107532
"BLD",5217,"KRN",9.8,"NM",12,0)
IBCEPTC1^^0^B16175723
"BLD",5217,"KRN",9.8,"NM",13,0)
IBCEPTC2^^0^B95600462
"BLD",5217,"KRN",9.8,"NM",14,0)
IBCESRV2^^0^B58582884
"BLD",5217,"KRN",9.8,"NM",15,0)
IBCERPT^^0^B5569941
"BLD",5217,"KRN",9.8,"NM",16,0)
IBCEPTM^^0^B9752792
"BLD",5217,"KRN",9.8,"NM",17,0)
IBCEPTU^^0^B1378097
"BLD",5217,"KRN",9.8,"NM",18,0)
IBCEU0^^0^B61487243
"BLD",5217,"KRN",9.8,"NM",19,0)
IBCEU1^^0^B41405183
"BLD",5217,"KRN",9.8,"NM",20,0)
IBCEPTR^^0^B75024492
"BLD",5217,"KRN",9.8,"NM",21,0)
IBCEF^^0^B52873320
"BLD",5217,"KRN",9.8,"NM",22,0)
IBCEOB1^^0^B67354030
"BLD",5217,"KRN",9.8,"NM",23,0)
IBCCC2^^0^B55435831
"BLD",5217,"KRN",9.8,"NM",24,0)
IBCERP5^^0^B37501190
"BLD",5217,"KRN",9.8,"NM",25,0)
IBCEP0B^^0^B2444107
"BLD",5217,"KRN",9.8,"NM",26,0)
IBCE^^0^B21210962
"BLD",5217,"KRN",9.8,"NM",27,0)
IBCERP3^^0^B8609666
"BLD",5217,"KRN",9.8,"NM",28,0)
IBCEF31^^0^B7680151
"BLD",5217,"KRN",9.8,"NM",29,0)
IBCEF21^^0^B11282906
"BLD",5217,"KRN",9.8,"NM","B","IBCBB2",9)

"BLD",5217,"KRN",9.8,"NM","B","IBCCC2",23)

"BLD",5217,"KRN",9.8,"NM","B","IBCE",26)

"BLD",5217,"KRN",9.8,"NM","B","IBCE837",1)

"BLD",5217,"KRN",9.8,"NM","B","IBCE837A",2)

"BLD",5217,"KRN",9.8,"NM","B","IBCEF",21)

"BLD",5217,"KRN",9.8,"NM","B","IBCEF2",7)

"BLD",5217,"KRN",9.8,"NM","B","IBCEF21",29)

"BLD",5217,"KRN",9.8,"NM","B","IBCEF31",28)

"BLD",5217,"KRN",9.8,"NM","B","IBCEF4",5)

"BLD",5217,"KRN",9.8,"NM","B","IBCEM01",10)

"BLD",5217,"KRN",9.8,"NM","B","IBCEM02",3)

"BLD",5217,"KRN",9.8,"NM","B","IBCEM03",4)

"BLD",5217,"KRN",9.8,"NM","B","IBCEOB1",22)

"BLD",5217,"KRN",9.8,"NM","B","IBCEP0B",25)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTC",11)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTC1",12)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTC2",13)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTM",16)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTR",20)

"BLD",5217,"KRN",9.8,"NM","B","IBCEPTU",17)

"BLD",5217,"KRN",9.8,"NM","B","IBCERP3",27)

"BLD",5217,"KRN",9.8,"NM","B","IBCERP5",24)

"BLD",5217,"KRN",9.8,"NM","B","IBCERPT",15)

"BLD",5217,"KRN",9.8,"NM","B","IBCESRV",8)

"BLD",5217,"KRN",9.8,"NM","B","IBCESRV2",14)

"BLD",5217,"KRN",9.8,"NM","B","IBCEU0",18)

"BLD",5217,"KRN",9.8,"NM","B","IBCEU1",19)

"BLD",5217,"KRN",9.8,"NM","B","IBCNSGE",6)

"BLD",5217,"KRN",19,0)
19
"BLD",5217,"KRN",19,"NM",0)
^9.68A^7^7
"BLD",5217,"KRN",19,"NM",1,0)
IBCN INSURANCE EDI REPORT^^0
"BLD",5217,"KRN",19,"NM",2,0)
IBCN INSURANCE MGMT MENU^^2
"BLD",5217,"KRN",19,"NM",3,0)
IB SYSTEM DEFINITION MENU^^2
"BLD",5217,"KRN",19,"NM",4,0)
IBCE PREV TRANSMITTED CLAIMS^^0
"BLD",5217,"KRN",19,"NM",5,0)
IBCE 837 EDI MENU^^2
"BLD",5217,"KRN",19,"NM",6,0)
IBCE VIEW PREV TRANS MESSAGE^^0
"BLD",5217,"KRN",19,"NM",7,0)
IBCE 837 EDI REPORTS^^2
"BLD",5217,"KRN",19,"NM","B","IB SYSTEM DEFINITION MENU",3)

"BLD",5217,"KRN",19,"NM","B","IBCE 837 EDI MENU",5)

"BLD",5217,"KRN",19,"NM","B","IBCE 837 EDI REPORTS",7)

"BLD",5217,"KRN",19,"NM","B","IBCE PREV TRANSMITTED CLAIMS",4)

"BLD",5217,"KRN",19,"NM","B","IBCE VIEW PREV TRANS MESSAGE",6)

"BLD",5217,"KRN",19,"NM","B","IBCN INSURANCE EDI REPORT",1)

"BLD",5217,"KRN",19,"NM","B","IBCN INSURANCE MGMT MENU",2)

"BLD",5217,"KRN",19.1,0)
19.1
"BLD",5217,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",5217,"KRN",101,0)
101
"BLD",5217,"KRN",101,"NM",0)
^9.68A^7^7
"BLD",5217,"KRN",101,"NM",1,0)
IBCE VIEW PREV TRANS^^0
"BLD",5217,"KRN",101,"NM",2,0)
IBCE VIEW PREV TRANS EXIT^^0
"BLD",5217,"KRN",101,"NM",3,0)
IBCE VIEW PREV TRANS MENU^^0
"BLD",5217,"KRN",101,"NM",4,0)
IBCE VIEW PREV TRANS REPORT^^0
"BLD",5217,"KRN",101,"NM",5,0)
IBCE VIEW PREV TRANS RESUB^^0
"BLD",5217,"KRN",101,"NM",6,0)
IBCE VIEW PREV TRANS SELECT^^0
"BLD",5217,"KRN",101,"NM",7,0)
IBCE VIEW PREV TRANS BTCH SEL^^0
"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS",1)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS BTCH SEL",7)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS EXIT",2)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS MENU",3)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS REPORT",4)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS RESUB",5)

"BLD",5217,"KRN",101,"NM","B","IBCE VIEW PREV TRANS SELECT",6)

"BLD",5217,"KRN",409.61,0)
409.61
"BLD",5217,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",5217,"KRN",409.61,"NM",1,0)
IBCE VIEW PREV TRANS1^^0
"BLD",5217,"KRN",409.61,"NM",2,0)
IBCE VIEW PREV TRANS2^^0
"BLD",5217,"KRN",409.61,"NM","B","IBCE VIEW PREV TRANS1",1)

"BLD",5217,"KRN",409.61,"NM","B","IBCE VIEW PREV TRANS2",2)

"BLD",5217,"KRN",771,0)
771
"BLD",5217,"KRN",870,0)
870
"BLD",5217,"KRN",8989.51,0)
8989.51
"BLD",5217,"KRN",8989.52,0)
8989.52
"BLD",5217,"KRN",8994,0)
8994
"BLD",5217,"KRN","B",.4,.4)

"BLD",5217,"KRN","B",.401,.401)

"BLD",5217,"KRN","B",.402,.402)

"BLD",5217,"KRN","B",.403,.403)

"BLD",5217,"KRN","B",.5,.5)

"BLD",5217,"KRN","B",.84,.84)

"BLD",5217,"KRN","B",3.6,3.6)

"BLD",5217,"KRN","B",3.8,3.8)

"BLD",5217,"KRN","B",9.2,9.2)

"BLD",5217,"KRN","B",9.8,9.8)

"BLD",5217,"KRN","B",19,19)

"BLD",5217,"KRN","B",19.1,19.1)

"BLD",5217,"KRN","B",101,101)

"BLD",5217,"KRN","B",409.61,409.61)

"BLD",5217,"KRN","B",771,771)

"BLD",5217,"KRN","B",870,870)

"BLD",5217,"KRN","B",8989.51,8989.51)

"BLD",5217,"KRN","B",8989.52,8989.52)

"BLD",5217,"KRN","B",8994,8994)

"BLD",5217,"QUES",0)
^9.62^^
"BLD",5217,"REQB",0)
^9.611^4^3
"BLD",5217,"REQB",2,0)
IB*2.0*199^2
"BLD",5217,"REQB",3,0)
IB*2.0*288^2
"BLD",5217,"REQB",4,0)
IB*2.0*291^2
"BLD",5217,"REQB","B","IB*2.0*199",2)

"BLD",5217,"REQB","B","IB*2.0*288",3)

"BLD",5217,"REQB","B","IB*2.0*291",4)

"DATA",364.6,1321,0)
8^N^^20^1^1^0^14^1^PAYER SEQUENCE^0^1^0
"DATA",364.6,1322,0)
8^N^^20^1^1^0^15^1^MRA SECONDARY INDICATOR^0^1^0
"DATA",364.7,136,0)
190^N^26^^^^N
"DATA",364.7,136,1)
S IBXDATA=$S($G(IBXSAVE("CI3-2"))'="":"",'$$WNRBILL^IBEFUNC(IBXIEN):$$NOPUNCT^IBCEF(IBXDATA),1:"")
"DATA",364.7,136,3,0)
^^2^2^3050113^
"DATA",364.7,136,3,1,0)
The GROUP NAME is not sent if the GROUP NUMBER is present. 
"DATA",364.7,136,3,2,0)
If this is an MRA Request, then nothing is sent. 
"DATA",364.7,137,0)
189^N^27^^^^N
"DATA",364.7,137,1)
S IBXSAVE("CI3-2")=IBXDATA S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,,"/-") I $$WNRBILL^IBEFUNC(IBXIEN) S IBXDATA=""
"DATA",364.7,137,3,0)
^364.73^1^1^3050113^^^^
"DATA",364.7,137,3,1,0)
If the insurance is MEDICARE WNR, do not output the group number.
"DATA",364.7,830,0)
866^N^5^^^^N
"DATA",364.7,830,1)
N Z,A,B K IBXDATA S:'$D(IBXSAVE("LCOB")) IBXNOREQ=1 S (Z,B)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  S:'$O(IBXSAVE("LCOB",Z,"COB",0)) IBXNOREQ=1 S A=0 F  S A=$O(IBXSAVE("LCOB",Z,"COB",A)) Q:'A  S B=B+1,IBXDATA(B)=Z I B>1 D ID^IBCEF2(B,"LCOB")
"DATA",364.7,830,3,0)
^^4^4^2990902^^^^
"DATA",364.7,830,3,1,0)
This data element assumes the existence of the IBXSAVE array for each line
"DATA",364.7,830,3,2,0)
item (LCOB) that was previously extracted.  If the line has COB data
"DATA",364.7,830,3,3,0)
associated with it, output the line # for each COB sequence found for the
"DATA",364.7,830,3,4,0)
line.  For every line output > 1, output the 'LCOB' record id.
"DATA",364.7,985,0)
983^N^5^^^^N
"DATA",364.7,985,1)
N Z,Z0 K IBXDATA I $$COBN^IBCEF(IBXIEN)>1 F Z0="INPT","OUTPT","RX" S Z=0 F  S Z=$O(IBXSAVE(Z0,Z)) K:'Z IBXSAVE(Z0) Q:'Z  I $D(IBXSAVE(Z0,Z,"COB")),$$EOBCNT^IBCEU1(IBXIEN) M IBXSAVE("LCOB",Z)=IBXSAVE(Z0,Z)
"DATA",364.7,985,3,0)
^364.73^4^4^3050511^^^^
"DATA",364.7,985,3,1,0)
The arrays IBXSAVE("INPT"), IBXSAVE("OUTPT") and IBXSAVE("RX") are created
"DATA",364.7,985,3,2,0)
when the line items on the bill are produced.  This field takes the data
"DATA",364.7,985,3,3,0)
from these arrays and creates a new IBXSAVE("LCOB") array with just the COB
"DATA",364.7,985,3,4,0)
data and deletes the original IBXSAVE arrays.
"DATA",364.7,1006,0)
1005^N^234^^^^N
"DATA",364.7,1006,1)
N A,Q,Z S Q=$G(IBXDATA) K IBXDATA I $$FT^IBCEF(IBXIEN)=2 F Z=1,2 S A=$P(Q,U,Z) I $D(^DGCR(399,IBXIEN,"I"_(Z+1))) S IBXDATA(Z)=$S(A=1:"HM",A=2:"C1",A=3:"MB",A=4:"MC",A=5:"GP",1:"OT")
"DATA",364.7,1006,3,0)
^^12^12^3050629^
"DATA",364.7,1006,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1006,3,2,0)
possible for the data element in the IBXDATA array.  If any 'other'
"DATA",364.7,1006,3,3,0)
insurance company data is found, the data is formatted as the insurance type
"DATA",364.7,1006,3,4,0)
of the insurance company in X12 format (see codes below or refer to the
"DATA",364.7,1006,3,5,0)
837 V4010 field 2320/SBR/05 - professional guide)
"DATA",364.7,1006,3,6,0)
 
"DATA",364.7,1006,3,7,0)
     Type codes: = 1:HMO  (HM)
"DATA",364.7,1006,3,8,0)
                   2:COMMERCIAL  (C1)
"DATA",364.7,1006,3,9,0)
                   3:MEDICARE  (MB)
"DATA",364.7,1006,3,10,0)
                   4:MEDICAID  (MC)
"DATA",364.7,1006,3,11,0)
                   5:GROUP POLICY  (GP)
"DATA",364.7,1006,3,12,0)
                   9:OTHER  (OT)
"DATA",364.7,1015,0)
1014^N^5
"DATA",364.7,1015,1)
S IBXDATA="296.0      "
"DATA",364.7,1015,3,0)
^364.73^1^1^3050113^^^^
"DATA",364.7,1015,3,1,0)
 
"DATA",364.7,1039,0)
1321^N^101^^^^N^0
"DATA",364.7,1039,1)
K IBXDATA S IBXDATA=$S($G(IBXSAVE(1))="P":"P",1:"S")
"DATA",364.7,1039,3,0)
^^2^2^3050110^
"DATA",364.7,1039,3,1,0)
Get the current payer sequence from the claim. 
"DATA",364.7,1039,3,2,0)
Output "P" if primary, "S" if secondary or tertiary. 
"DATA",364.7,1040,0)
1322^N^5^^^^N^0
"DATA",364.7,1040,1)
S IBXDATA=$S($$COBN^IBCEF(IBXIEN)=1:"",+$$MRASEC^IBCEF4(IBXIEN):"M",1:"N")
"DATA",364.7,1040,3,0)
^^3^3^3050110^
"DATA",364.7,1040,3,1,0)
If the bill payer is secondary to MEDICARE WNR with an MRA on file
"DATA",364.7,1040,3,2,0)
output 'M'. For non-secondaries, output nothing. 
"DATA",364.7,1040,3,3,0)
For non-MRA secondaries, output 'N'. 
"FIA",361.4)
EDI TEST CLAIM STATUS MESSAGE
"FIA",361.4,0)
^IBM(361.4,
"FIA",361.4,0,0)
361.4P
"FIA",361.4,0,1)
y^n^f^^^^n
"FIA",361.4,0,10)

"FIA",361.4,0,11)

"FIA",361.4,0,"RLRO")

"FIA",361.4,0,"VR")
2.0^IB
"FIA",361.4,361.4)
0
"FIA",361.4,361.41)
0
"FIA",361.4,361.42)
0
"FIA",361.4,361.421)
0
"FIA",364.2)
EDI MESSAGES
"FIA",364.2,0)
^IBA(364.2,
"FIA",364.2,0,0)
364.2I
"FIA",364.2,0,1)
y^n^p^^^^n^^n
"FIA",364.2,0,10)

"FIA",364.2,0,11)

"FIA",364.2,0,"RLRO")

"FIA",364.2,0,"VR")
2.0^IB
"FIA",364.2,364.2)
1
"FIA",364.2,364.2,.14)

"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I +Y=1321!(+Y=1322)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $F(".136.137.830.985.1006.1015.1039.1040.","."_+Y_".")
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"INI")
IBY296PR
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"KRN",19,1221,-1)
2^3
"KRN",19,1221,0)
IB SYSTEM DEFINITION MENU^MCCR System Definition Menu^^M^2441^IB SUPERVISOR^^^^^y^200
"KRN",19,1221,10,0)
^19.01IP^20^20
"KRN",19,1221,10,20,0)
12277^EPR
"KRN",19,1221,10,20,"^")
IBCN INSURANCE EDI REPORT
"KRN",19,1221,"U")
MCCR SYSTEM DEFINITION MENU
"KRN",19,4160,-1)
2^2
"KRN",19,4160,0)
IBCN INSURANCE MGMT MENU^Patient Insurance Menu^^M^.5^^^^^^^266
"KRN",19,4160,10,0)
^19.01IP^20^20
"KRN",19,4160,10,20,0)
12277^EPR^10
"KRN",19,4160,10,20,"^")
IBCN INSURANCE EDI REPORT
"KRN",19,4160,"U")
PATIENT INSURANCE MENU
"KRN",19,6409,-1)
2^5
"KRN",19,6409,0)
IBCE 837 EDI MENU^EDI Menu For Electronic Bills^^M^539^^^^^^^200
"KRN",19,6409,10,0)
^19.01IP^19^19
"KRN",19,6409,10,6,0)
6412^MM^10
"KRN",19,6409,10,6,"^")
IBCE 837 EDI REPORTS
"KRN",19,6409,10,19,0)
12302^PTC
"KRN",19,6409,10,19,"^")
IBCE PREV TRANSMITTED CLAIMS
"KRN",19,6409,"U")
EDI MENU FOR ELECTRONIC BILLS
"KRN",19,6412,-1)
2^7
"KRN",19,6412,0)
IBCE 837 EDI REPORTS^EDI Return Message Management^^M^539^^^^^^^200
"KRN",19,6412,10,0)
^19.01IP^14^8
"KRN",19,6412,10,14,0)
12303^TCS
"KRN",19,6412,10,14,"^")
IBCE VIEW PREV TRANS MESSAGE
"KRN",19,6412,"U")
EDI RETURN MESSAGE MANAGEMENT
"KRN",19,12277,-1)
0^1
"KRN",19,12277,0)
IBCN INSURANCE EDI REPORT^Insurance Company EDI Parameter Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,12277,1,0)
^^2^2^3050113^
"KRN",19,12277,1,1,0)
This report will display EDI related information from the Insurance 
"KRN",19,12277,1,2,0)
Company file (#36).
"KRN",19,12277,25)
EN^IBCNSGE
"KRN",19,12277,"U")
INSURANCE COMPANY EDI PARAMETE
"KRN",19,12302,-1)
0^4
"KRN",19,12302,0)
IBCE PREV TRANSMITTED CLAIMS^View/Resubmit Claims as Test^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,12302,1,0)
^19.06^5^5^3050524^^^^
"KRN",19,12302,1,1,0)
This option allows a user to view or produce a report of claims that
"KRN",19,12302,1,2,0)
were previously transmitted as live claims or that were transmitted as
"KRN",19,12302,1,3,0)
test claims prior to turning EDI on for an insurance company.  If the
"KRN",19,12302,1,4,0)
screen option is selected, the user can selectclaims from the list to
"KRN",19,12302,1,5,0)
be resubmitted as test claims.
"KRN",19,12302,25)
EN^IBCEPTC
"KRN",19,12302,"U")
VIEW/RESUBMIT CLAIMS AS TEST
"KRN",19,12303,-1)
0^6
"KRN",19,12303,0)
IBCE VIEW PREV TRANS MESSAGE^Test Claim EDI Transmission Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,12303,1,0)
^^2^2^3050204^
"KRN",19,12303,1,1,0)
This report will display test claim EDI transmission data and EDI status 
"KRN",19,12303,1,2,0)
message data from file 361.4.
"KRN",19,12303,25)
EN^IBCEPTR
"KRN",19,12303,"U")
TEST CLAIM EDI TRANSMISSION RE
"KRN",101,4054,-1)
0^2
"KRN",101,4054,0)
IBCE VIEW PREV TRANS EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4054,1,0)
^^2^2^2960221^
"KRN",101,4054,1,1,0)
Allows the user to exit the system without quitting through the hierarchy
"KRN",101,4054,1,2,0)
of screens, or the user can exit to the previous screen.
"KRN",101,4054,2,0)
^101.02A^^0
"KRN",101,4054,4)
^^^EX
"KRN",101,4054,20)
D CKSENT^IBCEPTC2(.VALMBCK)
"KRN",101,4054,28)

"KRN",101,4054,99)
59924,44785
"KRN",101,4055,-1)
0^3
"KRN",101,4055,0)
IBCE VIEW PREV TRANS MENU^PREVIOUSLY TRANSMITTED CLAIMS MENU^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4055,1,0)
^^3^3^3050124^
"KRN",101,4055,1,1,0)
This is the menu that contains the actions for the resubmission of
"KRN",101,4055,1,2,0)
previously transmitted claims.  The list is generated by the user
"KRN",101,4055,1,3,0)
using a combination of sort and selection criteria.
"KRN",101,4055,4)
35^2
"KRN",101,4055,10,0)
^101.01PA^7^6
"KRN",101,4055,10,2,0)
4054^^90^
"KRN",101,4055,10,2,"^")
IBCE VIEW PREV TRANS EXIT
"KRN",101,4055,10,3,0)
4056^^10^
"KRN",101,4055,10,3,"^")
IBCE VIEW PREV TRANS SELECT
"KRN",101,4055,10,4,0)
4057^^20^
"KRN",101,4055,10,4,"^")
IBCE VIEW PREV TRANS RESUB
"KRN",101,4055,10,5,0)
4059^^60^
"KRN",101,4055,10,5,"^")
IBCE VIEW PREV TRANS
"KRN",101,4055,10,6,0)
4058^^85^
"KRN",101,4055,10,6,"^")
IBCE VIEW PREV TRANS REPORT
"KRN",101,4055,10,7,0)
4060^^15^
"KRN",101,4055,10,7,"^")
IBCE VIEW PREV TRANS BTCH SEL
"KRN",101,4055,26)
D SHOW^VALM
"KRN",101,4055,28)
Action: 
"KRN",101,4055,99)
59991,61954
"KRN",101,4056,-1)
0^6
"KRN",101,4056,0)
IBCE VIEW PREV TRANS SELECT^Claim(s) Select/De-select^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4056,1,0)
^101.06^1^1^3050210^^^
"KRN",101,4056,1,1,0)
Allows selection of claims in the list to be resubmitted.
"KRN",101,4056,2,0)
^101.02A^^0
"KRN",101,4056,4)
^^^
"KRN",101,4056,20)
D SELECT^IBCEPTC2
"KRN",101,4056,99)
59942,43213
"KRN",101,4057,-1)
0^5
"KRN",101,4057,0)
IBCE VIEW PREV TRANS RESUB^Resubmit Claims as TEST^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4057,1,0)
^101.06^1^1^3050124^^^
"KRN",101,4057,1,1,0)
Resubmits previously transmitted claims selected from the list.
"KRN",101,4057,4)
^^^RC
"KRN",101,4057,20)
D RESUB^IBCEPTC2
"KRN",101,4057,99)
59925,60793
"KRN",101,4058,-1)
0^4
"KRN",101,4058,0)
IBCE VIEW PREV TRANS REPORT^Print Report^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4058,1,0)
^101.06^1^1^3050210^^^^
"KRN",101,4058,1,1,0)
Prints the report for the list of claims in the display.
"KRN",101,4058,4)
^^^
"KRN",101,4058,20)
D REPORT^IBCEPTC2
"KRN",101,4058,99)
59924,50086
"KRN",101,4059,-1)
0^1
"KRN",101,4059,0)
IBCE VIEW PREV TRANS^View Claims Selected^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4059,1,0)
^101.06^2^2^3050124^^^^
"KRN",101,4059,1,1,0)
Displays all claims already selected but not yet resubmitted.
"KRN",101,4059,1,2,0)
Allows deletion of claims that are no longer desired to be resubmitted.
"KRN",101,4059,4)
^^^VC
"KRN",101,4059,20)
D VIEW^IBCEPTC2
"KRN",101,4059,99)
59924,50243
"KRN",101,4060,-1)
0^7
"KRN",101,4060,0)
IBCE VIEW PREV TRANS BTCH SEL^Batch Select/De-select^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4060,1,0)
^101.06^2^2^3050210^^^
"KRN",101,4060,1,1,0)
Allows selection of a batch where all claims in the batch are automatically
"KRN",101,4060,1,2,0)
selected to be resubmitted.
"KRN",101,4060,4)
^^^
"KRN",101,4060,20)
D SELBATCH^IBCEPTC2
"KRN",101,4060,99)
59942,43537
"KRN",409.61,714,-1)
0^2
"KRN",409.61,714,0)
IBCE VIEW PREV TRANS2^1^^134^7^19^1^1^CLAIM^IBCE VIEW PREV TRANS MENU^PREVIOUSLY TRANSMITTED CLAIMS^1^^1
"KRN",409.61,714,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,714,"ARRAY")
 ^TMP("IB_PREV_CLAIM_LIST",$J)
"KRN",409.61,714,"COL",0)
^409.621^9^9
"KRN",409.61,714,"COL",1,0)
CLAIM^7^9^Claim #^^1
"KRN",409.61,714,"COL",2,0)
FORM^17^4^Form
"KRN",409.61,714,"COL",3,0)
TYPE^23^5^Type
"KRN",409.61,714,"COL",4,0)
SEQ^30^3^Seq
"KRN",409.61,714,"COL",5,0)
STATUS^35^15^Status
"KRN",409.61,714,"COL",6,0)
OTHER_PAYERS^52^25^Other Payer(s)
"KRN",409.61,714,"COL",7,0)
LAST_TRANSMIT^81^21^Date Last Transmitted
"KRN",409.61,714,"COL",8,0)
BATCH^104^12^Batch Number
"KRN",409.61,714,"COL",9,0)
NUMBER^1^6^ #
"KRN",409.61,714,"COL","AIDENT",1,1)

"KRN",409.61,714,"COL","B","BATCH",8)

"KRN",409.61,714,"COL","B","CLAIM",1)

"KRN",409.61,714,"COL","B","FORM",2)

"KRN",409.61,714,"COL","B","LAST_TRANSMIT",7)

"KRN",409.61,714,"COL","B","NUMBER",9)

"KRN",409.61,714,"COL","B","OTHER_PAYERS",6)

"KRN",409.61,714,"COL","B","SEQ",4)

"KRN",409.61,714,"COL","B","STATUS",5)

"KRN",409.61,714,"COL","B","TYPE",3)

"KRN",409.61,714,"FNL")
D EXIT^IBCEPTC2
"KRN",409.61,714,"HDR")
D HDR^IBCEPTC2
"KRN",409.61,714,"HLP")
Q
"KRN",409.61,714,"INIT")
D INIT^IBCEPTC2
"KRN",409.61,715,-1)
0^1
"KRN",409.61,715,0)
IBCE VIEW PREV TRANS1^1^^134^7^19^1^1^CLAIM^IBCE VIEW PREV TRANS MENU^PREVIOUSLY TRANSMITTED CLAIMS^1^^1
"KRN",409.61,715,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,715,"ARRAY")
 ^TMP("IB_PREV_CLAIM_LIST",$J)
"KRN",409.61,715,"COL",0)
^409.621^9^9
"KRN",409.61,715,"COL",1,0)
CLAIM^7^9^Claim #^^1
"KRN",409.61,715,"COL",2,0)
FORM^17^4^Form
"KRN",409.61,715,"COL",3,0)
TYPE^23^5^Type
"KRN",409.61,715,"COL",4,0)
SEQ^30^3^Seq
"KRN",409.61,715,"COL",5,0)
STATUS^35^15^Status
"KRN",409.61,715,"COL",6,0)
CURRENT_PAYER^52^25^Current Payer
"KRN",409.61,715,"COL",7,0)
PAYER_ADDRESS^81^32^Payer Address
"KRN",409.61,715,"COL",8,0)
OTHER_PAYERS^115^19^Other Payer(s)
"KRN",409.61,715,"COL",9,0)
NUMBER^1^6^ #
"KRN",409.61,715,"COL","AIDENT",1,1)

"KRN",409.61,715,"COL","B","CLAIM",1)

"KRN",409.61,715,"COL","B","CURRENT_PAYER",6)

"KRN",409.61,715,"COL","B","FORM",2)

"KRN",409.61,715,"COL","B","NUMBER",9)

"KRN",409.61,715,"COL","B","OTHER_PAYERS",8)

"KRN",409.61,715,"COL","B","PAYER_ADDRESS",7)

"KRN",409.61,715,"COL","B","SEQ",4)

"KRN",409.61,715,"COL","B","STATUS",5)

"KRN",409.61,715,"COL","B","TYPE",3)

"KRN",409.61,715,"FNL")
D EXIT^IBCEPTC2
"KRN",409.61,715,"HDR")
D HDR^IBCEPTC2
"KRN",409.61,715,"HLP")
Q
"KRN",409.61,715,"INIT")
D INIT^IBCEPTC2
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
296^3050713
"PKG",200,22,1,"PAH",1,1,0)
^^115^115^3050713
"PKG",200,22,1,"PAH",1,1,1,0)
Routines: IBCE837, IBCE837A
"PKG",200,22,1,"PAH",1,1,2,0)
  Changes to allow test claims to be resubmitted from previously
"PKG",200,22,1,"PAH",1,1,3,0)
  transmitted claims.
"PKG",200,22,1,"PAH",1,1,4,0)
 
"PKG",200,22,1,"PAH",1,1,5,0)
Routines: IBCESRV
"PKG",200,22,1,"PAH",1,1,6,0)
  Changes server logic for reports to send test message flag if msg
"PKG",200,22,1,"PAH",1,1,7,0)
  received in test queue.
"PKG",200,22,1,"PAH",1,1,8,0)
 
"PKG",200,22,1,"PAH",1,1,9,0)
Routines: IBCEM01, IBCEM02, IBCEM03
"PKG",200,22,1,"PAH",1,1,10,0)
  Allows selection of existing batches or individual claims to be
"PKG",200,22,1,"PAH",1,1,11,0)
  re-submitted as test claims from the original EDI resubmit bill/batch
"PKG",200,22,1,"PAH",1,1,12,0)
  options.
"PKG",200,22,1,"PAH",1,1,13,0)
 
"PKG",200,22,1,"PAH",1,1,14,0)
Routine: IBCNSGE
"PKG",200,22,1,"PAH",1,1,15,0)
  Insurance Company EDI Parameter Report
"PKG",200,22,1,"PAH",1,1,16,0)
 
"PKG",200,22,1,"PAH",1,1,17,0)
Routine: IBCEF2
"PKG",200,22,1,"PAH",1,1,18,0)
  Pull the id from the insurance company file if the claim is an MRA 
"PKG",200,22,1,"PAH",1,1,19,0)
  secondary and the id exists. If there is no id, force PPRNT or IPRNT. 
"PKG",200,22,1,"PAH",1,1,20,0)
 
"PKG",200,22,1,"PAH",1,1,21,0)
Routine IBCEF21
"PKG",200,22,1,"PAH",1,1,22,0)
  Two procedures moved out of IBCEF2 and into IBCEF21 for space.
"PKG",200,22,1,"PAH",1,1,23,0)
 
"PKG",200,22,1,"PAH",1,1,24,0)
Routine: IBCEF31
"PKG",200,22,1,"PAH",1,1,25,0)
  Ensure that the electronic insurance type field for the Medicare (WNR) 
"PKG",200,22,1,"PAH",1,1,26,0)
  entry is always 3:MEDICARE.  This is the 3.09 field in file 36.
"PKG",200,22,1,"PAH",1,1,27,0)
 
"PKG",200,22,1,"PAH",1,1,28,0)
Routine: IBCEF4
"PKG",200,22,1,"PAH",1,1,29,0)
  Change to return a true value if the claim is being resubmitted as a
"PKG",200,22,1,"PAH",1,1,30,0)
  test claim.
"PKG",200,22,1,"PAH",1,1,31,0)
 
"PKG",200,22,1,"PAH",1,1,32,0)
Routine: IBCEF
"PKG",200,22,1,"PAH",1,1,33,0)
  Bug fix to the $$NOPUNCT function.  Allow the exclusions parameter to 
"PKG",200,22,1,"PAH",1,1,34,0)
  function properly.
"PKG",200,22,1,"PAH",1,1,35,0)
 
"PKG",200,22,1,"PAH",1,1,36,0)
Routine: IBCBB2
"PKG",200,22,1,"PAH",1,1,37,0)
  Change to allow 8 diagnoses codes. 
"PKG",200,22,1,"PAH",1,1,38,0)
 
"PKG",200,22,1,"PAH",1,1,39,0)
Routine: IBY296PR (new)  (pre-install)
"PKG",200,22,1,"PAH",1,1,40,0)
  Pre-install changes the data element for entry #1015 in file 364.7
"PKG",200,22,1,"PAH",1,1,41,0)
 
"PKG",200,22,1,"PAH",1,1,42,0)
Routine: IBCERPT
"PKG",200,22,1,"PAH",1,1,43,0)
  Changed to output " * * TEST RESULTS * * " on reports from the MCT queue
"PKG",200,22,1,"PAH",1,1,44,0)
 
"PKG",200,22,1,"PAH",1,1,45,0)
Routine: IBCEPTU (new)
"PKG",200,22,1,"PAH",1,1,46,0)
  Utility code added to allow lookup of last transmitted date when a
"PKG",200,22,1,"PAH",1,1,47,0)
  transmission entry is deleted for an entry in file 361.4
"PKG",200,22,1,"PAH",1,1,48,0)
 
"PKG",200,22,1,"PAH",1,1,49,0)
Routine: IBCEPTR
"PKG",200,22,1,"PAH",1,1,50,0)
  Report of data stored in file 361.4.
"PKG",200,22,1,"PAH",1,1,51,0)
 
"PKG",200,22,1,"PAH",1,1,52,0)
Routine: IBCESRV, IBCESRV2
"PKG",200,22,1,"PAH",1,1,53,0)
  Changed to capture the MCT messages for claims resubmitted for test and
"PKG",200,22,1,"PAH",1,1,54,0)
  send them to be stored in the new test claim message file
"PKG",200,22,1,"PAH",1,1,55,0)
 
"PKG",200,22,1,"PAH",1,1,56,0)
Routine: IBCEPTM (new)
"PKG",200,22,1,"PAH",1,1,57,0)
  Stores the transmission and test status message data in file 361.4
"PKG",200,22,1,"PAH",1,1,58,0)
 
"PKG",200,22,1,"PAH",1,1,59,0)
Routines: IBCEPTC, IBCEPTC1, IBCEPTC2 (new)
"PKG",200,22,1,"PAH",1,1,60,0)
  New routines for the list manager display and resubmission of
"PKG",200,22,1,"PAH",1,1,61,0)
  previously transmitted claims as test claims.
"PKG",200,22,1,"PAH",1,1,62,0)
 
"PKG",200,22,1,"PAH",1,1,63,0)
Routine IBCE
"PKG",200,22,1,"PAH",1,1,64,0)
  Modify the IB nightly job section to call the Purge routine for file 
"PKG",200,22,1,"PAH",1,1,65,0)
  361.4.
"PKG",200,22,1,"PAH",1,1,66,0)
 
"PKG",200,22,1,"PAH",1,1,67,0)
Routines IBCEU0, IBCEU1
"PKG",200,22,1,"PAH",1,1,68,0)
  Fix LCOB segment pieces (modifiers and payer id)
"PKG",200,22,1,"PAH",1,1,69,0)
 
"PKG",200,22,1,"PAH",1,1,70,0)
Routine IBCEOB1
"PKG",200,22,1,"PAH",1,1,71,0)
  Fix split MRA filing problem.  Keep track of VistA line numbers across 
"PKG",200,22,1,"PAH",1,1,72,0)
  multiple split MRAs in file 361.1.
"PKG",200,22,1,"PAH",1,1,73,0)
 
"PKG",200,22,1,"PAH",1,1,74,0)
Routine IBCCC2
"PKG",200,22,1,"PAH",1,1,75,0)
  Remove the code which deletes the BILL COPIED FROM field when 
"PKG",200,22,1,"PAH",1,1,76,0)
  processing an MRA claim into a secondary MRA claim.
"PKG",200,22,1,"PAH",1,1,77,0)
 
"PKG",200,22,1,"PAH",1,1,78,0)
Routine IBCEP0B
"PKG",200,22,1,"PAH",1,1,79,0)
  Added a new parameter to the call PARAMS^IBCNSC1 to fix an undefined 
"PKG",200,22,1,"PAH",1,1,80,0)
  variable error that was occuring as a result of Patch 291. 
"PKG",200,22,1,"PAH",1,1,81,0)
 
"PKG",200,22,1,"PAH",1,1,82,0)
Routine IBCERP3
"PKG",200,22,1,"PAH",1,1,83,0)
  Report of bill batches waiting Austin receipt more than 1 day.  
"PKG",200,22,1,"PAH",1,1,84,0)
  Modification to routine to make it more similar to routine IBCEBUL by 
"PKG",200,22,1,"PAH",1,1,85,0)
  checking to see if there are any bills in the batch before including it 
"PKG",200,22,1,"PAH",1,1,86,0)
  on this report.
"PKG",200,22,1,"PAH",1,1,87,0)
 
"PKG",200,22,1,"PAH",1,1,88,0)
Routine IBCERP5
"PKG",200,22,1,"PAH",1,1,89,0)
  Modify the batch status detail report to show claims from test batches 
"PKG",200,22,1,"PAH",1,1,90,0)
  stored in file 361.4.
"PKG",200,22,1,"PAH",1,1,91,0)
 
"PKG",200,22,1,"PAH",1,1,92,0)
New field FILE 364.2:
"PKG",200,22,1,"PAH",1,1,93,0)
 .14 CLAIM RESUBMITTED TEST
"PKG",200,22,1,"PAH",1,1,94,0)
 
"PKG",200,22,1,"PAH",1,1,95,0)
Entries modified in file 364.7:
"PKG",200,22,1,"PAH",1,1,96,0)
 #136 (changed entry for group #/group name exclusion CI3-3)
"PKG",200,22,1,"PAH",1,1,97,0)
 #137 (changed entry for group #/group name exclusion CI3-4)
"PKG",200,22,1,"PAH",1,1,98,0)
 #830 (changed to fix problem with LCOB records)
"PKG",200,22,1,"PAH",1,1,99,0)
 #985 (changed to fix problem with LCOB records)
"PKG",200,22,1,"PAH",1,1,100,0)
 #1006 (changed data element, ins type OI1-17)
"PKG",200,22,1,"PAH",1,1,101,0)
 #1015 (changed data element, version info GEN-7)
"PKG",200,22,1,"PAH",1,1,102,0)
 #1039 (new entry for current payer sequence CI1-14)
"PKG",200,22,1,"PAH",1,1,103,0)
 #1040 (new entry for MRA secondary indicator CI1-15)
"PKG",200,22,1,"PAH",1,1,104,0)
 
"PKG",200,22,1,"PAH",1,1,105,0)
Entries modified in file 364.6:
"PKG",200,22,1,"PAH",1,1,106,0)
 #1321 (new entry for current payer sequence CI1-14)
"PKG",200,22,1,"PAH",1,1,107,0)
 #1322 (new entry for MRA secondary indicator CI1-15)
"PKG",200,22,1,"PAH",1,1,108,0)
 
"PKG",200,22,1,"PAH",1,1,109,0)
New File: 361.4 EDI TEST CLAIM STATUS MESSAGE
"PKG",200,22,1,"PAH",1,1,110,0)
  Holds the test transmission and all test status messages received in
"PKG",200,22,1,"PAH",1,1,111,0)
  the test queue (MCT) for claims resubmitted as test.
"PKG",200,22,1,"PAH",1,1,112,0)
 
"PKG",200,22,1,"PAH",1,1,113,0)
NOIS ENTRIES INCLUDED:
"PKG",200,22,1,"PAH",1,1,114,0)
UNY-0205-10041  SYNTAX ERROR 1/31 -MISSING LCOB-02
"PKG",200,22,1,"PAH",1,1,115,0)
LEX-0205-40005  SYNTAX ERROR 1/27 - LCOB/LCAS Prob.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
30
"RTN","IBCBB2")
0^9^B35010938
"RTN","IBCBB2",1,0)
IBCBB2 ;ALB/ARH - CONTINUATION OF EDIT CHECKS ROUTINE (HCFA 1500) ;04/14/92
"RTN","IBCBB2",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,245,232,296**;21-MAR-94
"RTN","IBCBB2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCBB2",4,0)
 ;
"RTN","IBCBB2",5,0)
 ;MAP TO DGCRBB2
"RTN","IBCBB2",6,0)
 ;
"RTN","IBCBB2",7,0)
EN ;
"RTN","IBCBB2",8,0)
 N IBI,IBJ,IBN,IBY,IBDX,IBDXO,IBDXL,IBCPT,IBCPTL,IBOLAB,Z,IBXSAVE,IBLOC,IBTX,IBPS,IBSP,IBLCT
"RTN","IBCBB2",9,0)
 I '$D(IBER) S IBER=""
"RTN","IBCBB2",10,0)
 S IBTX=$$TXMT^IBCEF4(IBIFN)
"RTN","IBCBB2",11,0)
 ;
"RTN","IBCBB2",12,0)
 ; Warn if no group provider id (MCRWNR is a default)
"RTN","IBCBB2",13,0)
 I '$$WNRBILL^IBEFUNC(IBIFN) D
"RTN","IBCBB2",14,0)
 . S Z=$P($G(^DGCR(399,IBIFN,"M1")),U,$$COBN^IBCEF(IBIFN)+1)
"RTN","IBCBB2",15,0)
 . I Z="" D WARN^IBCBB11("No group prov # for the current ins co - site tax id will be used")
"RTN","IBCBB2",16,0)
 ; Max 4 modifiers per CPT code allowed before warning
"RTN","IBCBB2",17,0)
 K IBXDATA
"RTN","IBCBB2",18,0)
 D F^IBCEF("N-HCFA 1500 MODIFIERS",,,IBIFN) ;Get modifiers
"RTN","IBCBB2",19,0)
 ;
"RTN","IBCBB2",20,0)
 S Z=0 F  S Z=$O(IBZPRC92(Z)) Q:'Z  I $P(IBZPRC92(Z),U)["ICPT(",$L($P(IBZPRC92(Z),U,15),",")>4 S IBI="Proc "_$$PRCD^IBCEF1($P(IBZPRC92(Z),U))_" has > 4 modifiers - only first 4 will be used" D WARN^IBCBB11(IBI)
"RTN","IBCBB2",21,0)
 ; ICD-9 diagnosis, at least 1 required
"RTN","IBCBB2",22,0)
 D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBER=IBER_"IB071;"
"RTN","IBCBB2",23,0)
 S IBI=$O(IBDXO(0))
"RTN","IBCBB2",24,0)
 I IBI,$$INPAT^IBCEF(IBIFN,1),$E($$ICD9^IBACSV(+$P(IBDXO(IBI),U)))="V" S Z="Principal Dx V-code may not be valid" D WARN^IBCBB11(Z)
"RTN","IBCBB2",25,0)
 ;
"RTN","IBCBB2",26,0)
 ; CPT procs must be associated with a dx, must have a defined provider
"RTN","IBCBB2",27,0)
 S (IBLOC,IBN,IBI,IBY)=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:IBI'?1N.N  S IBCPT=^(IBI,0) D  I +IBY S IBN=1
"RTN","IBCBB2",28,0)
 . ;I IBER'["IB089",$P(IBCPT,U,10)=7,$S('$P(IBCPT,U,16):1,1:$P(IBCPT,U,16)#15) S IBER=IBER_"IB089;" ;anesthesia needs minutes in multiple of 15
"RTN","IBCBB2",29,0)
 . I 'IBLOC,$P(IBCPT,U,15)'="",IBTX S Z="At least 1 charge has local box 24K data that will not be transmitted - " S IBLOC=1 D WARN^IBCBB11(Z) S Z="  This data will only print locally" D WARN^IBCBB11(Z)
"RTN","IBCBB2",30,0)
 . I $P(IBCPT,U)'["ICPT(" S:IBER'["IB092" IBER=IBER_"IB092;" Q
"RTN","IBCBB2",31,0)
 . S IBY=1 F IBJ=11:1:14 I +$P(IBCPT,"^",IBJ) S IBCPTL(+$P(IBCPT,"^",IBJ))="",IBY=0
"RTN","IBCBB2",32,0)
 . ;I '$P(IBCPT,U,18) S:IBER'["IB094;" IBER=IBER_"IB094;" Q
"RTN","IBCBB2",33,0)
 I +IBN S IBER=IBER_"IB072;"
"RTN","IBCBB2",34,0)
 ;
"RTN","IBCBB2",35,0)
 I '$$OCC10(IBIFN,.IBDX,2) S IBER=IBER_"IB093;"
"RTN","IBCBB2",36,0)
 ; HCFA 1500: dxs associated with procs must be defined dxs for the bill
"RTN","IBCBB2",37,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI))  Q:'IBI  S IBDXL(IBDX(IBI))=""
"RTN","IBCBB2",38,0)
 S (IBN,IBI)=0 F  S IBI=$O(IBCPTL(IBI)) Q:'IBI  I '$D(IBDXL(IBI)) S IBN=1 Q
"RTN","IBCBB2",39,0)
 I +IBN S IBER=IBER_"IB073;"
"RTN","IBCBB2",40,0)
 ; ejk *296* Change # of diagnoses codes from 4 to 8 on HCFA Claims. 
"RTN","IBCBB2",41,0)
 I IBTX S IBI=8 F  S IBI=$O(IBDXO(IBI)) Q:'IBI  S Z=+$G(IBDX(+$G(IBDXO(IBI)))) I Z,$D(IBCPTL(Z)) D WARN^IBCBB11("Too many diagnoses for claim & will be rejected - consider printing locally")
"RTN","IBCBB2",42,0)
 ;
"RTN","IBCBB2",43,0)
 I $$WNRBILL^IBEFUNC(IBIFN),$$MRATYPE^IBEFUNC(IBIFN)'="B" S IBER=IBER_"IB087;"
"RTN","IBCBB2",44,0)
 ; Only one occurrence code can be present for event date for box 14
"RTN","IBCBB2",45,0)
 S Z=$$EVENT^IBCF22(IBIFN,.IBXSAVE,.IBI)
"RTN","IBCBB2",46,0)
 I IBI S IBER=IBER_"IB099;"
"RTN","IBCBB2",47,0)
 ; unit/charge limits
"RTN","IBCBB2",48,0)
 K IBXDATA
"RTN","IBCBB2",49,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN) ;Get charge lines
"RTN","IBCBB2",50,0)
 S (IBLCT,IBOLAB)=0,IBPS="",IBSP=$$BILLSPEC^IBCEU3(IBIFN)
"RTN","IBCBB2",51,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D  Q:IBER["IB310"!(IBER["IB311")
"RTN","IBCBB2",52,0)
 . S IBLCT=IBLCT+1
"RTN","IBCBB2",53,0)
 . I $P(IBNDU2,U,11) D
"RTN","IBCBB2",54,0)
 .. I '$P(IBXDATA(IBI),U,11) S IBPS=IBPS_$S(IBPS'="":",",1:"")_IBI Q
"RTN","IBCBB2",55,0)
 .. I $P(IBXDATA(IBI),U,14),"24"'[$P(IBNDU2,U,11) D WARN^IBCBB11("Outside lab charges exist on a non-lab NON-VA bill")
"RTN","IBCBB2",56,0)
 . I '$P(IBNDU2,U,11),$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Purchased service amounts are invalid unless this is a NON-VA bill")
"RTN","IBCBB2",57,0)
 . I $D(IBXDATA(IBI,"A")) S IBER=IBER_"IB310;" Q
"RTN","IBCBB2",58,0)
 . I $D(IBXDATA(IBI,"ARX")),IBER'["311;" S IBER=IBER_"IB311;" Q
"RTN","IBCBB2",59,0)
 . I $P(IBXDATA(IBI),U,14) S IBOLAB=IBOLAB+1
"RTN","IBCBB2",60,0)
 . ; Place of service required
"RTN","IBCBB2",61,0)
 . I $G(IBER)'["IB314;",$P(IBXDATA(IBI),U,3)="" S IBER=IBER_"IB314;"
"RTN","IBCBB2",62,0)
 . ; Type of service required
"RTN","IBCBB2",63,0)
 . I $G(IBER)'["IB313;",$P(IBXDATA(IBI),U,4)="" S IBER=IBER_"IB313;"
"RTN","IBCBB2",64,0)
 . ; 43 and 53 are invalid types of service
"RTN","IBCBB2",65,0)
 . I $G(IBER)'["IB110;",($P(IBXDATA(IBI),U,4)=43!($P(IBXDATA(IBI),U,4)=53)) S IBER=IBER_"IB110;"
"RTN","IBCBB2",66,0)
 . ; Units for the line item must be less than 100/1000
"RTN","IBCBB2",67,0)
 . I IBER'["IB088",$P(IBXDATA(IBI),U,9)'<100 D
"RTN","IBCBB2",68,0)
 .. I $P(IBXDATA(IBI),U,4)'=7 S IBER=IBER_"IB088;" Q
"RTN","IBCBB2",69,0)
 .. I $P(IBXDATA(IBI),U,9)'<1000 S IBER=IBER_"IB088;"
"RTN","IBCBB2",70,0)
 . ; Line item total charge must be less than $10,000.00, greater than 0
"RTN","IBCBB2",71,0)
 . I IBER'["IB090",$P(IBXDATA(IBI),U,9)'<10000 S IBER=IBER_"IB090;"
"RTN","IBCBB2",72,0)
 . I '($P(IBXDATA(IBI),U,9)*$P(IBXDATA(IBI),U,8)),$$COBN^IBCEF(IBIFN)'>1 S Z="Procedure "_$P(IBXDATA(IBI),U,5)_" has a 0-charge and will not be transmitted" D WARN^IBCBB11(Z)
"RTN","IBCBB2",73,0)
 . I $G(IBXDATA(IBI,"AUX"))'="",'$G(IBSP(1)),+IBSP'=35,$TR($P(IBXDATA(IBI,"AUX"),U,4,6)_$P(IBXDATA(IBI,"AUX"),U,2),U)'="" S IBSP(1)=1
"RTN","IBCBB2",74,0)
 I IBTX,IBLCT>50 D
"RTN","IBCBB2",75,0)
 . I '$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB308;" Q
"RTN","IBCBB2",76,0)
 . I '$P(IBNDTX,U,9) S IBER=IBER_"IB325;"
"RTN","IBCBB2",77,0)
 I $G(IBSP(1)) D WARN^IBCBB11("Chiropractic service details only valid if provider specialty is '35'")
"RTN","IBCBB2",78,0)
 I IBPS'="" D WARN^IBCBB11("NON-VA facility indicated, but no purchased service charge on line item"_$S(IBPS[",":"s",1:"")_" #"_IBPS)
"RTN","IBCBB2",79,0)
 I $P(IBNDU2,U,11),$P(IBNDU2,U,11)=4,IBOLAB>1 D WARN^IBCBB11("For proper payment, you must bill each outside lab on a separate claim form")
"RTN","IBCBB2",80,0)
 K IBXDATA
"RTN","IBCBB2",81,0)
 ;
"RTN","IBCBB2",82,0)
 Q
"RTN","IBCBB2",83,0)
 ;
"RTN","IBCBB2",84,0)
OCC10(IBIFN,IBARR,IBFT) ; Determine if occurrence code 10 exists for pregnancy dx
"RTN","IBCBB2",85,0)
 ; IBARR=array subscripted by ien of DX code if IBFT=2 (HCFA form)
"RTN","IBCBB2",86,0)
 ;                         by seq # and = ien of DX code if IBFT'=2
"RTN","IBCBB2",87,0)
 ;
"RTN","IBCBB2",88,0)
 N IBN,IBI,IBXDATA,IBXSAVE,IBDX,Z
"RTN","IBCBB2",89,0)
 S IBN=1
"RTN","IBCBB2",90,0)
 ;
"RTN","IBCBB2",91,0)
 I '$D(^TMP($J,"LMD")) D
"RTN","IBCBB2",92,0)
 . D F^IBCEF("N-OCCURRENCE CODES",,,IBIFN)
"RTN","IBCBB2",93,0)
 . S ^TMP($J,"LMD")=""
"RTN","IBCBB2",94,0)
 . S Z=0 F  S Z=$O(IBXSAVE("OCC",Z)) Q:'Z  I +IBXSAVE("OCC",Z)=10 S ^TMP($J,"LMD")=1 Q
"RTN","IBCBB2",95,0)
 ;
"RTN","IBCBB2",96,0)
 I '^TMP($J,"LMD") S IBI=0 F  S IBI=$O(IBARR(IBI))  Q:'IBI  D  Q:'IBN
"RTN","IBCBB2",97,0)
 . N Z,Z1
"RTN","IBCBB2",98,0)
 . ; If a pregnancy DX exists, must be an occurrence code 10 for LMP date
"RTN","IBCBB2",99,0)
 . ; dx ranges are: V22*-V24*, V27*-V28*, 630*-677*
"RTN","IBCBB2",100,0)
 . S IBDX=$S($G(IBFT)'=2:+IBARR(IBI),1:IBI)
"RTN","IBCBB2",101,0)
 . S Z=$E($P($$ICD9^IBACSV(IBDX),U),1,3),Z1=$E(Z,2,3)
"RTN","IBCBB2",102,0)
 . I $S(Z'<630&(Z<678):1,$E(Z)="V":$S(Z1'<22&(Z1<25):1,1:Z1'<27&(Z1<28)),1:0) S IBN=0 ;Pregnancy Dx exists
"RTN","IBCBB2",103,0)
 ;
"RTN","IBCBB2",104,0)
OCC10Q K ^TMP($J,"LMD")
"RTN","IBCBB2",105,0)
 Q IBN
"RTN","IBCBB2",106,0)
 ;
"RTN","IBCCC2")
0^23^B55435831
"RTN","IBCCC2",1,0)
IBCCC2 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
"RTN","IBCCC2",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296**;21-MAR-94
"RTN","IBCCC2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCCC2",4,0)
 ;
"RTN","IBCCC2",5,0)
 ;MAP TO DGCRCC2
"RTN","IBCCC2",6,0)
 ;
"RTN","IBCCC2",7,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC2",8,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC2",9,0)
 ;
"RTN","IBCCC2",10,0)
STEP5 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBCCC2",11,0)
 ;
"RTN","IBCCC2",12,0)
 ;move pure data nodes
"RTN","IBCCC2",13,0)
 F I="I1","I2","I3","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",14,0)
 ;
"RTN","IBCCC2",15,0)
 ;move top level data node. ;Do not move 'TX' node
"RTN","IBCCC2",16,0)
 F I="U","U1","U2","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",17,0)
 ;
"RTN","IBCCC2",18,0)
 ;move multiple level data
"RTN","IBCCC2",19,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",20,0)
 ;
"RTN","IBCCC2",21,0)
 D FTPRV^IBCEU5(IBIFN) ; Ask change prov type if form type not the same
"RTN","IBCCC2",22,0)
 D COBCHG(IBIFN,,.IBCOB)
"RTN","IBCCC2",23,0)
 ;
"RTN","IBCCC2",24,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBCCC2",25,0)
 ;
"RTN","IBCCC2",26,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBCCC2",27,0)
 D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBCCC2",28,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ) G END
"RTN","IBCCC2",29,0)
 ;
"RTN","IBCCC2",30,0)
STEP6 N IBGOEND
"RTN","IBCCC2",31,0)
 I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
"RTN","IBCCC2",32,0)
 ;
"RTN","IBCCC2",33,0)
 ;
"RTN","IBCCC2",34,0)
END K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARST,IBCOB,IBCNCOPY,IBCBCOPY
"RTN","IBCCC2",35,0)
 K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,IBCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
"RTN","IBCCC2",36,0)
 K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
"RTN","IBCCC2",37,0)
 Q
"RTN","IBCCC2",38,0)
 ;
"RTN","IBCCC2",39,0)
 ;
"RTN","IBCCC2",40,0)
IBSCEDT ; call the IB bill edit screens and validate the data
"RTN","IBCCC2",41,0)
 N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
"RTN","IBCCC2",42,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCCC2",43,0)
ST1 S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
"RTN","IBCCC2",44,0)
 S IBAC=1
"RTN","IBCCC2",45,0)
 D ^IBCB1
"RTN","IBCCC2",46,0)
 I $G(IBCIREDT) G ST1
"RTN","IBCCC2",47,0)
IBSCX ;
"RTN","IBCCC2",48,0)
 Q
"RTN","IBCCC2",49,0)
 ;
"RTN","IBCCC2",50,0)
 ;
"RTN","IBCCC2",51,0)
U F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
"RTN","IBCCC2",52,0)
 Q
"RTN","IBCCC2",53,0)
U1 F J=1:1:9,13,14 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
"RTN","IBCCC2",54,0)
 Q
"RTN","IBCCC2",55,0)
U2 F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
"RTN","IBCCC2",56,0)
 Q
"RTN","IBCCC2",57,0)
UF2 F J=1 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
"RTN","IBCCC2",58,0)
 Q
"RTN","IBCCC2",59,0)
UF3 F J=1:1:7 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
"RTN","IBCCC2",60,0)
 Q
"RTN","IBCCC2",61,0)
UF31 F J=1:1:3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
"RTN","IBCCC2",62,0)
 Q
"RTN","IBCCC2",63,0)
C F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
"RTN","IBCCC2",64,0)
 I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
"RTN","IBCCC2",65,0)
 Q
"RTN","IBCCC2",66,0)
M F J=1:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
"RTN","IBCCC2",67,0)
 Q
"RTN","IBCCC2",68,0)
CC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",69,0)
 S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",70,0)
OP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",71,0)
 S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",72,0)
 Q
"RTN","IBCCC2",73,0)
OC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",74,0)
 S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",75,0)
 Q
"RTN","IBCCC2",76,0)
OT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",77,0)
 S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",78,0)
 Q
"RTN","IBCCC2",79,0)
CV ; Don't copy value codes from inpatient inst to inpatient prof bills
"RTN","IBCCC2",80,0)
 I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
"RTN","IBCCC2",81,0)
 S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",82,0)
 S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",83,0)
 Q
"RTN","IBCCC2",84,0)
RC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",85,0)
 S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:15 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
"RTN","IBCCC2",86,0)
 Q
"RTN","IBCCC2",87,0)
CP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",88,0)
 I +$G(IBNOCPT) Q
"RTN","IBCCC2",89,0)
 S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP-AUX")=$G(^("AUX")) D
"RTN","IBCCC2",90,0)
 . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
"RTN","IBCCC2",91,0)
 . I IBND("CP-AUX")'="" F K=1:1:8 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
"RTN","IBCCC2",92,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
"RTN","IBCCC2",93,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
"RTN","IBCCC2",94,0)
 ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier from inst to prof bill
"RTN","IBCCC2",95,0)
 ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
"RTN","IBCCC2",96,0)
CP1 S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
"RTN","IBCCC2",97,0)
 I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D FILE
"RTN","IBCCC2",98,0)
 I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D FILE
"RTN","IBCCC2",99,0)
 I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D FILE
"RTN","IBCCC2",100,0)
 Q
"RTN","IBCCC2",101,0)
 ;
"RTN","IBCCC2",102,0)
PRV S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",103,0)
 N Z,Z0
"RTN","IBCCC2",104,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19)
"RTN","IBCCC2",105,0)
 S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
"RTN","IBCCC2",106,0)
 . S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",107,0)
 . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,J,0),U)=(Z0+1)
"RTN","IBCCC2",108,0)
 Q
"RTN","IBCCC2",109,0)
 ;
"RTN","IBCCC2",110,0)
COB S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
"RTN","IBCCC2",111,0)
 Q
"RTN","IBCCC2",112,0)
 ;
"RTN","IBCCC2",113,0)
FILE N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
"RTN","IBCCC2",114,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCC2",115,0)
 S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
"RTN","IBCCC2",116,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
"RTN","IBCCC2",117,0)
 K DGPROCDT
"RTN","IBCCC2",118,0)
 Q
"RTN","IBCCC2",119,0)
 ;
"RTN","IBCCC2",120,0)
INDEX ;index entire file (set logic)
"RTN","IBCCC2",121,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
"RTN","IBCCC2",122,0)
 Q
"RTN","IBCCC2",123,0)
 ;
"RTN","IBCCC2",124,0)
PRIOR(IBIFN) ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
"RTN","IBCCC2",125,0)
 N IBSEQ,IBSEQN,IBM1,I,IBIFN1
"RTN","IBCCC2",126,0)
 S IBSEQ=$$COB^IBCEF(IBIFN)
"RTN","IBCCC2",127,0)
 S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
"RTN","IBCCC2",128,0)
 ;
"RTN","IBCCC2",129,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
"RTN","IBCCC2",130,0)
 F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
"RTN","IBCCC2",131,0)
 Q
"RTN","IBCCC2",132,0)
 ;
"RTN","IBCCC2",133,0)
COBCHG(IBIFN,IBINS,IBCOB) ; Make changes for a new COB payer for bill
"RTN","IBCCC2",134,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCCC2",135,0)
 ; IBINS = ien of bill's current insurance (optional)
"RTN","IBCCC2",136,0)
 ; IBCOB = array subscripted by node,piece of COB data field change
"RTN","IBCCC2",137,0)
 ;
"RTN","IBCCC2",138,0)
 N I,IBFRMTYP
"RTN","IBCCC2",139,0)
 ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
"RTN","IBCCC2",140,0)
 F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
"RTN","IBCCC2",141,0)
 ;
"RTN","IBCCC2",142,0)
 I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
"RTN","IBCCC2",143,0)
 . ;MCRWNR is current insurance ... move payer only
"RTN","IBCCC2",144,0)
 . N IBCOBN,IBX
"RTN","IBCCC2",145,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCCC2",146,0)
 . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
"RTN","IBCCC2",147,0)
 . S IBCOB("M1",IBCOBN+4)=IBIFN
"RTN","IBCCC2",148,0)
 . S IBCOB("TX",1)="",IBCOB("TX",2)=""
"RTN","IBCCC2",149,0)
 . S IBX=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCCC2",150,0)
 . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
"RTN","IBCCC2",151,0)
 . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
"RTN","IBCCC2",152,0)
 . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
"RTN","IBCCC2",153,0)
 . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
"RTN","IBCCC2",154,0)
 . D PRIOR(IBIFN)
"RTN","IBCCC2",155,0)
 . Q
"RTN","IBCCC2",156,0)
 ;
"RTN","IBCCC2",157,0)
 ;reset fields for next Sequence Payer
"RTN","IBCCC2",158,0)
 F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
"RTN","IBCCC2",159,0)
 ;
"RTN","IBCCC2",160,0)
 ; IB*2.0*211
"RTN","IBCCC2",161,0)
 ; save off Form Type
"RTN","IBCCC2",162,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC2",163,0)
 ;
"RTN","IBCCC2",164,0)
 ; fire xrefs set logic
"RTN","IBCCC2",165,0)
 D INDEX
"RTN","IBCCC2",166,0)
 ;
"RTN","IBCCC2",167,0)
 ; Restore Form Type if changed, but don't restore Form Type if
"RTN","IBCCC2",168,0)
 ;   creating HCFA bill from CTCOPY1^IBCCCB
"RTN","IBCCC2",169,0)
 I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D ^DIE
"RTN","IBCCC2",170,0)
 ;
"RTN","IBCCC2",171,0)
 ; Restore Claim MRA Status field since triggers in fields 101 & 102
"RTN","IBCCC2",172,0)
 ;   will overwrite the correct value when processing the MRA/EOB.
"RTN","IBCCC2",173,0)
 ; If we're processing the MRA/EOB, then a valid MRA has been received.
"RTN","IBCCC2",174,0)
 I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
"RTN","IBCCC2",175,0)
 ;
"RTN","IBCCC2",176,0)
 K IBCOB("TX")
"RTN","IBCCC2",177,0)
 Q
"RTN","IBCCC2",178,0)
 ;
"RTN","IBCE")
0^26^B21210962
"RTN","IBCE",1,0)
IBCE ;ALB/TMP - 837 EDI TRANSMISSION UTILITIES/NIGHTLY JOB ;22-JAN-96
"RTN","IBCE",2,0)
 ;;2.0;INTEGRATED BILLING;**137,283,296**;21-MAR-94
"RTN","IBCE",3,0)
EN ; Run all jobs needed for EDI processing nightly
"RTN","IBCE",4,0)
 ; including transmit bills waiting for extract, batches not sent,
"RTN","IBCE",5,0)
 N IBLAST,IBZ,IBZ0
"RTN","IBCE",6,0)
 D NOTSENT^IBCEBUL
"RTN","IBCE",7,0)
 D EN^IBCE837
"RTN","IBCE",8,0)
 D EN^IBCEMPRG      ; purge status messages from file 361
"RTN","IBCE",9,0)
 D PURGE^IBCEPTU    ; purge transmission detail and claims status data associated with test transmissions after 60 days
"RTN","IBCE",10,0)
 S IBLAST=$G(^IBA(364.2,"ALAST")),^IBA(364.2,"ALAST")=$$NOW^XLFDT()
"RTN","IBCE",11,0)
 ; Clean up ACOB xref in 364
"RTN","IBCE",12,0)
 S IBZ=0
"RTN","IBCE",13,0)
 F  S IBZ=$O(^IBA(364,"ACOB",IBZ)) Q:'IBZ  S IBZ0=0 F  S IBZ0=$O(^IBA(364,"ACOB",IBZ,IBZ0)) Q:'IBZ0  I '$$COBPOSS^IBCECOB(IBZ0) D UPDEDI^IBCEM(IBZ0,"N",1)
"RTN","IBCE",14,0)
 Q
"RTN","IBCE",15,0)
 ;
"RTN","IBCE",16,0)
EN1 ; Manual entry point for transmitting EDI bills
"RTN","IBCE",17,0)
 N DIR,X,Y,IBLAST,IBTASK,IBOPTX,DTOUT,DUOUT
"RTN","IBCE",18,0)
 I '$$MGCHK(1) G EN1Q
"RTN","IBCE",19,0)
 S DIR("A")="Select transmit option: ",DIR("B")="S",DIR(0)="SAM^A:Transmit (A)LL bills in READY FOR EXTRACT status;S:Transmit only (S)ELECTED bills"
"RTN","IBCE",20,0)
 D ^DIR K DIR
"RTN","IBCE",21,0)
 I $D(DTOUT)!$D(DUOUT) G EN1Q
"RTN","IBCE",22,0)
 S IBOPTX=Y
"RTN","IBCE",23,0)
 I Y="A" D  G EN1Q
"RTN","IBCE",24,0)
 . S DIR("A",1)="This option will run a job to transmit ALL bills ready for EDI transmission"
"RTN","IBCE",25,0)
 . S DIR("A",2)="This option's last scheduled run was "_$$FMTE^XLFDT($G(^IBA(364.2,"ALAST")),2)
"RTN","IBCE",26,0)
 . S DIR("A",3)=" "
"RTN","IBCE",27,0)
 . S DIR("A")="Are you absolutely sure this is what you want to do? "
"RTN","IBCE",28,0)
 . S DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCE",29,0)
 . Q:'Y
"RTN","IBCE",30,0)
 . S DIR(0)="YA",DIR("A",1)=" "
"RTN","IBCE",31,0)
 . S DIR("A",2)="Transmission of ALL bills will be run now"
"RTN","IBCE",32,0)
 . S DIR("A")="Is this OK? ",DIR("B")="NO"
"RTN","IBCE",33,0)
 . D ^DIR K DIR
"RTN","IBCE",34,0)
 . Q:'Y
"RTN","IBCE",35,0)
 . D EN1^IBCE837B(.IBTASK)
"RTN","IBCE",36,0)
 . I $G(IBTASK) D
"RTN","IBCE",37,0)
 .. S DIR("A",1)="Task # for this job is: "_IBTASK
"RTN","IBCE",38,0)
 . E  D
"RTN","IBCE",39,0)
 .. I $G(IBTASK)'="" S DIR("A",1)="Error encountered in tasking job - check IRM for reported errors"
"RTN","IBCE",40,0)
 .. S DIR(0)="EA",DIR("A")=" Press RETURN to continue " W !! D ^DIR K DIR
"RTN","IBCE",41,0)
 I IBOPTX="S" D SUB1^IBCEM03 G EN1Q
"RTN","IBCE",42,0)
EN1Q Q
"RTN","IBCE",43,0)
 ;
"RTN","IBCE",44,0)
RESUB(IB364) ; Manually resubmit bill for transmission (ien file 364 = IB364)
"RTN","IBCE",45,0)
 N DIR,X,Y,IBBTCH,DTOUT,DUOUT
"RTN","IBCE",46,0)
 I '$$MGCHK(1) G RESUBQ
"RTN","IBCE",47,0)
 S IBBTCH=""
"RTN","IBCE",48,0)
 W ! S DIR(0)="SA^I:IMMEDIATE TRANSMIT;L:TRANSMIT LATER WITH REST OF READY FOR EXTRACT BILLS",DIR("A")="TRANSMIT (I)MMEDIATELY OR (L)ATER?: ",DIR("B")="L"
"RTN","IBCE",49,0)
 S DIR("?",1)="IF YOU CHOOSE TO TRANSMIT IMMEDIATELY, THE BILL'S DATA WILL BE BATCHED BY",DIR("?",2)=" ITSELF AND SENT OUT IMMEDIATELY.  IF YOU CHOOSE TO TRANSMIT LATER, THE"
"RTN","IBCE",50,0)
 S DIR("?",3)="  BILL'S TRANSMISSION STATUS WILL BE RESET TO 'READY FOR EXTRACT' AND THE BILL'S",DIR("?",4)="  DATA WILL BE EXTRACTED THE NEXT TIME A GENERAL TRANSMISSION OF YOUR BILLS",DIR("?")="  IN READY TO EXTRACT STATUS OCCURS"
"RTN","IBCE",51,0)
 D ^DIR K DIR
"RTN","IBCE",52,0)
 I $D(DTOUT)!$D(DUOUT) G RESUBQ
"RTN","IBCE",53,0)
 I Y="I" D  G:'IBBTCH RESUBQ
"RTN","IBCE",54,0)
 . N Y
"RTN","IBCE",55,0)
 . K ^TMP("IBONE",$J),^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCE",56,0)
 . S ^TMP("IBONE",$J,IB364)="",^TMP("IBONE",$J)=0,^TMP("IBSELX",$J)=""
"RTN","IBCE",57,0)
 . D ONE^IBCE837
"RTN","IBCE",58,0)
 . S IBBTCH=$O(^TMP("IBCE-BATCH",$J,0))                     ; external batch#
"RTN","IBCE",59,0)
 . I IBBTCH'="" S IBBTCH=+$G(^TMP("IBCE-BATCH",$J,IBBTCH))  ; internal batch#
"RTN","IBCE",60,0)
 . K ^TMP("IBONE",$J),^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCE",61,0)
 . I 'IBBTCH D
"RTN","IBCE",62,0)
 .. S DIR("A",1)="BILL NOT RESUBMITTED - CHECK ALERTS/MAIL FOR DETAILS"
"RTN","IBCE",63,0)
 . E  D
"RTN","IBCE",64,0)
 .. N DIE,DR,DA
"RTN","IBCE",65,0)
 .. D UPDEDI^IBCEM(IB364,"R")
"RTN","IBCE",66,0)
 .. S DIE="^IBA(364,",DR=".06////"_+IBBTCH,DA=IB364 D ^DIE
"RTN","IBCE",67,0)
 .. S DIR("A",1)="BILL RESUBMITTED IN BATCH #"_$P($G(^IBA(364.1,IBBTCH,0)),U)
"RTN","IBCE",68,0)
 . S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR
"RTN","IBCE",69,0)
 I Y="L" D
"RTN","IBCE",70,0)
 . N Y
"RTN","IBCE",71,0)
 . D UPDEDI^IBCEM(IB364,"R")
"RTN","IBCE",72,0)
 . ;Add a new transmission record
"RTN","IBCE",73,0)
 . S Y=$$ADDTBILL^IBCB1($P($G(^IBA(364,+IB364,0)),U),1)
"RTN","IBCE",74,0)
 . S DIR("A",1)="BILL'S TRANSMISSION STATUS RESET TO 'READY TO EXTRACT'"
"RTN","IBCE",75,0)
 . S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR
"RTN","IBCE",76,0)
 ;
"RTN","IBCE",77,0)
RESUBQ Q
"RTN","IBCE",78,0)
 ;
"RTN","IBCE",79,0)
MGCHK(DSP) ; Returns 1 if mail group IB EDI has at least 1 local member,
"RTN","IBCE",80,0)
 ; 0 if none found
"RTN","IBCE",81,0)
 ; DSP = flag that if =1, displays error message
"RTN","IBCE",82,0)
 N IB
"RTN","IBCE",83,0)
 S IB=$$GOTLOCAL^XMXAPIG("IB EDI")
"RTN","IBCE",84,0)
 I 'IB,$G(DSP) D
"RTN","IBCE",85,0)
 . ; No local members in mail group for EDI messages
"RTN","IBCE",86,0)
 . S DIR("A",1)="YOU MUST HAVE AT LEAST 1 MEMBER IN THE 'IB EDI' MAIL GROUP TO TRANSMIT A BILL",DIR("A")="PRESS RETURN TO CONTINUE "
"RTN","IBCE",87,0)
 . S DIR(0)="EA" D ^DIR K DIR
"RTN","IBCE",88,0)
 Q IB
"RTN","IBCE",89,0)
 ;
"RTN","IBCE837")
0^1^B81681758
"RTN","IBCE837",1,0)
IBCE837 ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION ;8/6/03 10:48am
"RTN","IBCE837",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,197,232,296**;21-MAR-94
"RTN","IBCE837",3,0)
 ;
"RTN","IBCE837",4,0)
EN ; Auto-txmt
"RTN","IBCE837",5,0)
 N IBSITE8,IBRUN,X,X1,X2,DA,DIE,DR
"RTN","IBCE837",6,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837",7,0)
 S IBSITE8=$G(^IBE(350.9,1,8)),IBRUN=1
"RTN","IBCE837",8,0)
 Q:'$P(IBSITE8,U,3)!'$P(IBSITE8,U,10)
"RTN","IBCE837",9,0)
 I '$$MGCHK^IBCE(0) Q
"RTN","IBCE837",10,0)
 I $P(IBSITE8,U,5) D  Q:'IBRUN
"RTN","IBCE837",11,0)
 . S X2=+$P(IBSITE8,U,3),X1=$P(IBSITE8,U,5) D C^%DTC
"RTN","IBCE837",12,0)
 . I X>DT S IBRUN=0 Q
"RTN","IBCE837",13,0)
 D QTXMT^IBCE837B(IBSITE8)
"RTN","IBCE837",14,0)
 I $P(IBSITE8,U,5)'=DT S DIE="^IBE(350.9,",DR="8.05////"_DT,DA=1 D ^DIE
"RTN","IBCE837",15,0)
 Q
"RTN","IBCE837",16,0)
 ;
"RTN","IBCE837",17,0)
SETUP(IBEXTRP) ; Txmn set up
"RTN","IBCE837",18,0)
 ; IBEXTRP=1 prnt 837 data
"RTN","IBCE837",19,0)
 N IB
"RTN","IBCE837",20,0)
 K ^TMP("IBXMSG",$J),^TMP("IBTXMT",$J),^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXERR",$J),IBXERR,^TMP("IBXINS",$J),^TMP("IBTX",$J),^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCE837",21,0)
 ; Chk extract running
"RTN","IBCE837",22,0)
 Q:$G(IBEXTRP)
"RTN","IBCE837",23,0)
 ; Chk resubmit tst
"RTN","IBCE837",24,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,4) S ^TMP("IBEDI_TEST_BATCH",$J)=1 Q
"RTN","IBCE837",25,0)
 I '$D(^TMP("IBRESUBMIT",$J)),'$D(^TMP("IBONE",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",26,0)
 . L +^IBA(364,0):5
"RTN","IBCE837",27,0)
 . I '$T D  Q
"RTN","IBCE837",28,0)
 .. S IBXERR=1,^TMP("IBXERR",$J,1)="A PREVIOUS EDI EXTRACT IS RUNNING - ANOTHER CANNOT BE STARTED "_$$FMTE^XLFDT($$NOW^XLFDT(),2)
"RTN","IBCE837",29,0)
 ;
"RTN","IBCE837",30,0)
 I $D(^TMP("IBRESUBMIT",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",31,0)
 .N Z,Z0
"RTN","IBCE837",32,0)
 .S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U,2),Z=$$LOCK^IBCEM02(364.1,Z0)
"RTN","IBCE837",33,0)
 .I 'Z D
"RTN","IBCE837",34,0)
 ..S IBXERR=1
"RTN","IBCE837",35,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",36,0)
 .I 'Z D
"RTN","IBCE837",37,0)
 ..S IBXERR=1
"RTN","IBCE837",38,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",39,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",2)="Resubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",40,0)
 I $D(^TMP("IBONE",$J)) S IB=$G(^($J))+1 D  Q:$D(IBXERR)
"RTN","IBCE837",41,0)
 .N Z,Z0
"RTN","IBCE837",42,0)
 .S Z0=$O(^TMP("IBONE",$J,"")),Z=$$LOCK^IBCEM02(364,Z0)
"RTN","IBCE837",43,0)
 .I 'Z D
"RTN","IBCE837",44,0)
 ..S IBXERR=1
"RTN","IBCE837",45,0)
 ..S ^TMP("IBONE",$J,"IBXERR",1)="Another user is currently processing bill "_$P($G(^DGCR(399,+$G(^IBA(364,Z0,0)),0)),U)_".  Bill NOT "_$P("^re",U,IB)_"submitted."
"RTN","IBCE837",46,0)
 ..S ^TMP("IBONE",$J,"IBXERR",2)=$P("S^Res",U,IB)_"ubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",47,0)
 Q
"RTN","IBCE837",48,0)
 ;
"RTN","IBCE837",49,0)
FIND ; Find/sort by HCFA 1500/UB92, test/live, ins ID # & div
"RTN","IBCE837",50,0)
 ;
"RTN","IBCE837",51,0)
 N IBX,IB0,IBCBH,IBINS,IBXIEN,IBNID,IBGBL,IBTXTEST,IBBTYP,IB837R,IBDIV,IBNOTX,IBTXST,IBTEST,IBSEC
"RTN","IBCE837",52,0)
 K ^TMP($J,"BILL"),^TMP("IBICT",$J)
"RTN","IBCE837",53,0)
 ;
"RTN","IBCE837",54,0)
 S IBGBL=$S($D(^TMP("IBONE",$J)):"^TMP(""IBONE"","_$J_")",$D(^TMP("IBSELX",$J)):"^TMP(""IBSELX"","_$J_")",'$D(^TMP("IBRESUBMIT",$J)):"^IBA(364,""ASTAT"",""X"")",1:"^TMP(""IBRESUBMIT"","_$J_")")
"RTN","IBCE837",55,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCE837",56,0)
 ;
"RTN","IBCE837",57,0)
 S IBX="" F  S IBX=$O(@IBGBL@(IBX)) Q:'IBX  D
"RTN","IBCE837",58,0)
 .S IBXIEN=+$G(^IBA(364,IBX,0)),IB0=$G(^DGCR(399,IBXIEN,0))
"RTN","IBCE837",59,0)
 .S IBTXST=$$TXMT^IBCEF4(IBXIEN,.IBNOTX)
"RTN","IBCE837",60,0)
 .Q:IBTXST=""  ; no txmt
"RTN","IBCE837",61,0)
 .Q:$S(IB0="":1,$P(IB0,U,13)>4&'IBTEST:1,1:$D(^TMP($J,"BILL",$P(IB0,U))))
"RTN","IBCE837",62,0)
 .S IBCBH=$P(IB0,U,21) S:"PST"'[IBCBH!(IBCBH="") IBCBH="P"
"RTN","IBCE837",63,0)
 .S IBINS=$P($G(^DGCR(399,IBXIEN,"I"_($F("PST",IBCBH)-1))),U)
"RTN","IBCE837",64,0)
 .S IBTXTEST=$S(IBTEST:2,1:+$$TEST^IBCEF4(IBXIEN))
"RTN","IBCE837",65,0)
 .S IBBTYP=$P("P^I",U,($$FT^IBCEF(IBXIEN)=3)+1)_"-"_IBTXTEST
"RTN","IBCE837",66,0)
 .Q:$$TESTPT^IBCEU($P(IB0,U,2))&'IBTXTEST  ;Test pt
"RTN","IBCE837",67,0)
 .;
"RTN","IBCE837",68,0)
 .I IBTXTEST=1 D TESTLIM^IBCE837A(.IBINS)
"RTN","IBCE837",69,0)
 .;
"RTN","IBCE837",70,0)
 .I IBINS,$P(IB0,U,2) D
"RTN","IBCE837",71,0)
 .. D SETVAR^IBCE837A(IBXIEN,IBINS,IB0,.IBSEC,.IBNID,.IB837R,.IBDIV)
"RTN","IBCE837",72,0)
 ..S:'$D(^TMP("IBXINS",$J,IBDIV_U_IBBTYP,IBNID)) ^(IBNID)=IBINS S ^TMP("IBTXMT",$J,IBDIV_U_IBBTYP,IB837R_U_IBSEC,IBNID,$P(IB0,U,2),IBXIEN_U_IBX)=IBX
"RTN","IBCE837",73,0)
 .;
"RTN","IBCE837",74,0)
 .S ^TMP($J,"BILL",$P(IB0,U))=""
"RTN","IBCE837",75,0)
 ;
"RTN","IBCE837",76,0)
 I $D(^TMP("IBTXMT",$J)) S ^TMP("IBXDATA",$J)=IBNID
"RTN","IBCE837",77,0)
 K ^TMP($J,"BILL")
"RTN","IBCE837",78,0)
 Q
"RTN","IBCE837",79,0)
 ;
"RTN","IBCE837",80,0)
OUTPUT ; 837
"RTN","IBCE837",81,0)
 ;
"RTN","IBCE837",82,0)
 N IB837,IBSITE,IBMAX,IBQUEUE,IBTQUEUE,IBNID,IBCT,IBCTM,IBSIZE,IBBILL,IBLCNT,IBDFN,IBREF,IBSIZEM,IBPARMS,IBD,IBDESC,IBINS,IBQ,IB3,IBBTYP,IBTXTEST,IBDEFPRT,IB837R,IBBTYPX
"RTN","IBCE837",83,0)
 ;
"RTN","IBCE837",84,0)
 K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837",85,0)
 S IBSITE=$G(^IBE(350.9,1,8)),IBMAX=$P(IBSITE,U,4),IB837=+$O(^IBE(353,"B","IB 837 TRANSMISSION",0)),IB837=$S($P($G(^IBE(353,+IB837,2)),U,8):$P(^(2),U,8),1:IB837) S:'IBMAX IBMAX=999
"RTN","IBCE837",86,0)
 ;
"RTN","IBCE837",87,0)
 I 'IB837 D  Q
"RTN","IBCE837",88,0)
 . N IBZ,XMBODY
"RTN","IBCE837",89,0)
 . S XMBODY="IBZ"
"RTN","IBCE837",90,0)
 . S IBZ(1)="The transmission form for sending electronic claims is not in your form file",IBZ(2)="NO CLAIMS WERE OUTPUT - FORM = IB 837 TRANSMISSION"
"RTN","IBCE837",91,0)
 . D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",92,0)
 ;
"RTN","IBCE837",93,0)
 S (IBCT,IBCTM,IBSIZE)=0,IBQUEUE=$P(IBSITE,U),IBTQUEUE=$P(IBSITE,U,9),IBDESC=""
"RTN","IBCE837",94,0)
 ;
"RTN","IBCE837",95,0)
 Q:IBQUEUE=""&(IBTQUEUE="")
"RTN","IBCE837",96,0)
 ;
"RTN","IBCE837",97,0)
 S IBQ="",IBBTYPX=""
"RTN","IBCE837",98,0)
 ; Sort: div_^_bill type_-_test stat,ins co transmission destination^sec status,dfn,claim #
"RTN","IBCE837",99,0)
 F  S IBBTYPX=$O(^TMP("IBTXMT",$J,IBBTYPX)),IBBTYP=$P(IBBTYPX,U,2) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IBBTYPX=""  D
"RTN","IBCE837",100,0)
 . S IBDEFPRT=$S($E(IBBTYP)="P":"SPRINT",1:"SPRINT")
"RTN","IBCE837",101,0)
 . S IBTXTEST=+$P(IBBTYP,"-",2),IBQ=$S('IBTXTEST:IBQUEUE,IBTXTEST=2:"MCT",1:IBTQUEUE)
"RTN","IBCE837",102,0)
 . Q:IBQ=""  ; Queue
"RTN","IBCE837",103,0)
 . ;
"RTN","IBCE837",104,0)
 . S IBD=$S($E(IBBTYP)="P":"PROF",1:"INST")_" CLAIMS-"_$$HTE^XLFDT($H,2)_"  "
"RTN","IBCE837",105,0)
 . S IBDESC=$S('$P(IBSITE,U,7):$S('IBTXTEST:"",1:"TEST ")_IBD,1:"")
"RTN","IBCE837",106,0)
 . ;
"RTN","IBCE837",107,0)
 . S IB837R=""
"RTN","IBCE837",108,0)
 . F  S IB837R=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R)) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IB837R=""  D
"RTN","IBCE837",109,0)
 .. S (IBINS,IBNID)="",IBLCNT=0
"RTN","IBCE837",110,0)
 .. F  S IBNID=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID)) K ^TMP("IBHDR1",$J) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,.IBSIZE) Q:IBNID=""  D
"RTN","IBCE837",111,0)
 ...;
"RTN","IBCE837",112,0)
 ...S IBDFN=0,IBINS=+$G(^TMP("IBXINS",$J,IBBTYPX,IBNID))
"RTN","IBCE837",113,0)
 ... ;
"RTN","IBCE837",114,0)
 ...I $P(IBSITE,U,7) D  ; 1 ins/batch
"RTN","IBCE837",115,0)
 .... S IBLCNT=0
"RTN","IBCE837",116,0)
 .... S IBDESC=$E($S('IBTXTEST:"",1:"TEST ")_IBD_$P($G(^DIC(36,IBINS,0)),U),1,80)
"RTN","IBCE837",117,0)
 ... ;
"RTN","IBCE837",118,0)
 ...F  S IBDFN=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN)) Q:'IBDFN  S IBREF="" F  S IBREF=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN,IBREF)) Q:'IBREF  D
"RTN","IBCE837",119,0)
 ....I '(IBCTM#IBMAX),IBCTM D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 ;exceeds max #
"RTN","IBCE837",120,0)
 ....D BILLPARM^IBCEFG0(+IBREF,.IBPARMS)
"RTN","IBCE837",121,0)
 ....S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",122,0)
 ....I (IBSIZEM+IBSIZE)>30000,IBSIZE D  ; exceeds max size
"RTN","IBCE837",123,0)
 .....D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 K ^TMP("IBXDATA",$J) S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",124,0)
 ....I 'IBSIZEM D:'IBCTM  Q
"RTN","IBCE837",125,0)
 ..... D CHKBTCH^IBCE837A(+$G(^TMP("IBHDR",$J))) K ^TMP("IBHDR",$J)
"RTN","IBCE837",126,0)
 ....S IBCT=IBCT+1,IBCTM=IBCTM+1
"RTN","IBCE837",127,0)
 ....D:$D(^TMP("IBXDATA",$J)) MESSAGE(.IBLCNT,$P(IBREF,U,2),.IBBILL,.IBCTM,.IBSIZE,IBSIZEM,"",IBBTYP,IBINS)
"RTN","IBCE837",128,0)
 ..;
"RTN","IBCE837",129,0)
 ..I $G(IBTXTEST)=1 S IBINS=0 F  S IBINS=$O(^TMP("IBICT",$J,IBINS)) Q:'IBINS  S IB3=$G(^DIC(36,IBINS,3)) D
"RTN","IBCE837",130,0)
 ... N DIE,DA,DR
"RTN","IBCE837",131,0)
 ...S DIE="^DIC(36,",DA=IBINS,DR="3.05////"_DT_";3.07////"_($S($P(IB3,U,5)'=DT:0,1:$P(IB3,U,7))+^TMP("IBICT",$J,IBINS)) D ^DIE
"RTN","IBCE837",132,0)
 ;
"RTN","IBCE837",133,0)
 I $O(^TMP("IBXERR",$J,"")) D  ;Error to mail grp
"RTN","IBCE837",134,0)
 .N XMTO,XMBODY,XMDUZ,XMSUBJ,IBCT,IBERR
"RTN","IBCE837",135,0)
 .K ^TMP("IBXMSG",$J)
"RTN","IBCE837",136,0)
 .S ^TMP("IBXMSG",$J,1)="The following authorized bill(s) were not transmitted due to errors indicated.",^(2)="Once the errors are corrected, the bill(s) will be included in the next run.",^(3)=" "
"RTN","IBCE837",137,0)
 .;
"RTN","IBCE837",138,0)
 .S IBERR=0,IBCT=3
"RTN","IBCE837",139,0)
 .F  S IBERR=$O(^TMP("IBXERR",$J,IBERR)) Q:'IBERR  S IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)="Bill #: "_$P($G(^DGCR(399,IBERR,0)),U),IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)=$J("",5)_^TMP("IBXERR",$J,IBERR)
"RTN","IBCE837",140,0)
 .S XMBODY="^TMP(""IBXMSG"","_$J_")" D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",141,0)
 .;
"RTN","IBCE837",142,0)
 .K ^TMP("IBXMSG",$J),^TMP("IBICT",$J)
"RTN","IBCE837",143,0)
 ;
"RTN","IBCE837",144,0)
 I $O(^TMP("IBCE-BATCH",$J,"")) D
"RTN","IBCE837",145,0)
 .N IB,IB0,IBL,IBT,IBX,XMTO,XMDUZ,XMSUBJ,IBRESUB,IBTESTB,XMZ
"RTN","IBCE837",146,0)
 .S IBRESUB=$D(^TMP("IBRESUBMIT",$J))
"RTN","IBCE837",147,0)
 .;
"RTN","IBCE837",148,0)
 .S IBT(1)="The following batches were "_$S('IBRESUB:"",1:"re-")_"submitted to Austin "_$S(IBTXTEST'=2:"",1:"as TEST ")_$$HTE^XLFDT($H,"2D")_":"
"RTN","IBCE837",149,0)
 .S IBT(2)=$S('IBRESUB:" ",1:"   [Resubmitted by: "_$P($G(^VA(200,+DUZ,0)),U)_" (#"_DUZ_")]") S:IBRESUB IBT(3)=" "
"RTN","IBCE837",150,0)
 .;
"RTN","IBCE837",151,0)
 .S IBL=$S('IBRESUB:2,1:3),IB=""
"RTN","IBCE837",152,0)
 .F  S IB=$O(^TMP("IBCE-BATCH",$J,IB)) Q:IB=""  S IBL=IBL+1,IB0=$G(^(IB)) D
"RTN","IBCE837",153,0)
 .. S IBX=IB
"RTN","IBCE837",154,0)
 .. I $P(IB0,U,3)'="",IBTXTEST=2 S IBX=$P(IB0,U,3)_" (AS BATCH "_IB_")"
"RTN","IBCE837",155,0)
 ..S IBT(IBL)=" "_IBX_" "_$P($G(^IBA(364.1,+IB0,0)),U,8),IBL=IBL+1,IBT(IBL)="    ("_+$P(IB0,U,2)_" bills)"
"RTN","IBCE837",156,0)
 .;
"RTN","IBCE837",157,0)
 .S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="IBT",XMSUBJ="EDI 837 "_$S('IBRESUB:"",1:"RE-")_"SUBMISSION BATCH LIST"_$S(IBTXTEST'=2:"",1:" FOR TEST")
"RTN","IBCE837",158,0)
 .D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837",159,0)
 .;
"RTN","IBCE837",160,0)
 .S:IBRESUB ^TMP("IBRESUBMIT",$J,0)=1
"RTN","IBCE837",161,0)
 Q
"RTN","IBCE837",162,0)
 ;
"RTN","IBCE837",163,0)
CLEANUP ; moved
"RTN","IBCE837",164,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",165,0)
 Q
"RTN","IBCE837",166,0)
 ;
"RTN","IBCE837",167,0)
MESSAGE(IBLCNT,IBIEN,IBBILL,IBCTM,IBSIZE,IBSIZEM,IBDUZ,IBBTYP,IBINS) ; Create msg in ^TMP("IBXMSG",$J)
"RTN","IBCE837",168,0)
 ;IBLCNT = last msg line extracted
"RTN","IBCE837",169,0)
 ;IBIEN = ien file 364 bill entry
"RTN","IBCE837",170,0)
 ;IBBILL = array file 364 ien's of bills being sent
"RTN","IBCE837",171,0)
 ; IBBILL(IEN)=""
"RTN","IBCE837",172,0)
 ;IBSIZE = # bytes in msg
"RTN","IBCE837",173,0)
 ;IBSIZEM = # bytes in record to be added to msg
"RTN","IBCE837",174,0)
 ;IBCTM = # bills in batch
"RTN","IBCE837",175,0)
 ;IBDUZ = user ien running extract (Postmaster if auto)
"RTN","IBCE837",176,0)
 ;IBBTYP = x-y where x = P for prof, I for inst
"RTN","IBCE837",177,0)
 ;         y = 1 for test, 0 for live txmt
"RTN","IBCE837",178,0)
 ;IBINS = ien of 1 ins co for batch
"RTN","IBCE837",179,0)
 ;
"RTN","IBCE837",180,0)
 N IB,IBL,IB1,IB2,IB3,IBQ,IBREC,IBDEL
"RTN","IBCE837",181,0)
 S IBDEL=$O(^IBA(364.5,"B","N-SEGMENT DELIMITER","")),IBDEL=$P($G(^IBA(364.5,+IBDEL,0)),U,8) S:IBDEL="" IBDEL="~"
"RTN","IBCE837",182,0)
 S IBSIZE=IBSIZE+IBSIZEM,IB1="",IBREC=""
"RTN","IBCE837",183,0)
 F  S IB1=$O(^TMP("IBXDATA",$J,1,IB1)) Q:IB1=""  D
"RTN","IBCE837",184,0)
 .S (IBREC,IB2)=""
"RTN","IBCE837",185,0)
 .F  S IB2=$O(^TMP("IBXDATA",$J,1,IB1,IB2)) Q:$S(IB2="":1,IB1=1:"",1:'$O(^(IB2,1)))  D
"RTN","IBCE837",186,0)
 ..S IB3="",IBREC=""
"RTN","IBCE837",187,0)
 ..F  S IB3=$O(^TMP("IBXDATA",$J,1,IB1,IB2,IB3)) D:IB3=""&($L(IBREC)) SETG Q:IB3=""  S:$S(IB3=1:1,1:$P(IBREC,U)'="") $P(IBREC,U,IB3)=$$UP^XLFSTR(^TMP("IBXDATA",$J,1,IB1,IB2,IB3))
"RTN","IBCE837",188,0)
 S IBBILL(IBIEN)=""
"RTN","IBCE837",189,0)
 K ^TMP("IBXDATA",$J)
"RTN","IBCE837",190,0)
 Q
"RTN","IBCE837",191,0)
 ;
"RTN","IBCE837",192,0)
SETHDR ; hdr for curr batch
"RTN","IBCE837",193,0)
 S ^TMP("IBHDR",$J)=$G(^TMP("IBXDATA",$J,1,5,1,2))
"RTN","IBCE837",194,0)
 Q
"RTN","IBCE837",195,0)
 ;
"RTN","IBCE837",196,0)
SETHDR1 ; hdr node for curr ins
"RTN","IBCE837",197,0)
 S ^TMP("IBHDR1",$J)=$G(^TMP("IBXDATA",$J,1,20,1,8))
"RTN","IBCE837",198,0)
 Q
"RTN","IBCE837",199,0)
 ;
"RTN","IBCE837",200,0)
SETG ; msg global for each segment
"RTN","IBCE837",201,0)
 S IBREC=$TR(IBREC,IBDEL)
"RTN","IBCE837",202,0)
 S IBREC=IBREC_IBDEL,IBSIZE=IBSIZE+$L(IBDEL)
"RTN","IBCE837",203,0)
 S IBLCNT=IBLCNT+1,^TMP("IBXMSG",$J,IBLCNT)=IBREC
"RTN","IBCE837",204,0)
 Q
"RTN","IBCE837",205,0)
 ;
"RTN","IBCE837",206,0)
ONE ; Txmt 1 or more bills for test or in 'X' status for live
"RTN","IBCE837",207,0)
 Q:'$$MGCHK^IBCE(0)
"RTN","IBCE837",208,0)
 D SETUP(0)
"RTN","IBCE837",209,0)
 I '$D(IBXERR) D FIND,OUTPUT
"RTN","IBCE837",210,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",211,0)
 Q
"RTN","IBCE837",212,0)
 ;
"RTN","IBCE837A")
0^2^B42933569
"RTN","IBCE837A",1,0)
IBCE837A ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION - CONTINUED ;8/6/03 10:50am
"RTN","IBCE837A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,211,232,296**;21-MAR-94
"RTN","IBCE837A",3,0)
 ;
"RTN","IBCE837A",4,0)
UPD(MSGNUM,BATCH,CNT,BILLS,DESC,IBBTYP,IBINS) ; Upd current batch + bills w/new status
"RTN","IBCE837A",5,0)
 ;MSGNUM = mail msg # for batch
"RTN","IBCE837A",6,0)
 ;BATCH = batch #
"RTN","IBCE837A",7,0)
 ;CNT = # of bills in batch
"RTN","IBCE837A",8,0)
 ;BILLS = array BILLS(bill ien in 364) in batch
"RTN","IBCE837A",9,0)
 ;DESC = 1-80 character description of batch
"RTN","IBCE837A",10,0)
 ;IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",11,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",12,0)
 ;                         or 2 for live claim resubmitted as test
"RTN","IBCE837A",13,0)
 ;IBINS = ien of single insurance company for the batch (optional)
"RTN","IBCE837A",14,0)
 ;
"RTN","IBCE837A",15,0)
 N DIC,DIE,DR,DA,IBBATCH,IBIFN,IBIEN,IBYY,IBTXTEST,IBMRA
"RTN","IBCE837A",16,0)
 S IBBATCH=$O(^IBA(364.1,"B",+BATCH,"")) Q:'IBBATCH
"RTN","IBCE837A",17,0)
 S IBTXTEST=+$P(IBBTYP,"-",2)
"RTN","IBCE837A",18,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",19,0)
 ;
"RTN","IBCE837A",20,0)
 S DIE="^IBA(364.1,",DA=IBBATCH,DR=".02////P;.03///"_CNT_";.04///"_MSGNUM_";.05///0;.07////1;.08///^S X="""_DESC_""""_$S($G(IBINS):";.12////"_IBINS,1:"")
"RTN","IBCE837A",21,0)
 ;
"RTN","IBCE837A",22,0)
 I '$P($G(^TMP("IBRESUBMIT",$J)),U,3) S DR=DR_";1.01///NOW;1.02///.5"
"RTN","IBCE837A",23,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,2) S DR=DR_";.15////"_$P(^($J),U,2)
"RTN","IBCE837A",24,0)
 ;
"RTN","IBCE837A",25,0)
 S DR=DR_";.14////"_$S('IBTXTEST:0,1:1)_";.06////"_$S($E(IBBTYP)="P":2,1:3) D ^DIE ; Update batch
"RTN","IBCE837A",26,0)
 ;
"RTN","IBCE837A",27,0)
 I IBTXTEST=2 D ADDTXM^IBCEPTM(.BILLS,IBBATCH,$$NOW^XLFDT()) Q
"RTN","IBCE837A",28,0)
 I IBTXTEST'=2 S IBIEN=0 F  S IBIEN=$O(BILLS(IBIEN)) Q:'IBIEN  D  ;Update each bill
"RTN","IBCE837A",29,0)
 .S DA=IBIEN,DIE="^IBA(364,",DR=".02////"_IBBATCH_";.03///P;.04///NOW" D ^DIE
"RTN","IBCE837A",30,0)
 .S IBIFN=+$G(^IBA(364,IBIEN,0))
"RTN","IBCE837A",31,0)
 .Q:$D(^TMP("IBRESUBMIT",$J))!($P($G(^DGCR(399,IBIFN,0)),U,13)=4)!(+$$TXMT^IBCEF4(IBIEN)=2)
"RTN","IBCE837A",32,0)
 .S IBMRA=$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCE837A",33,0)
 .I IBMRA="C",$P($G(^DGCR(399,IBIFN,0)),U,13)=2 S IBMRA=1
"RTN","IBCE837A",34,0)
 .I IBIFN D
"RTN","IBCE837A",35,0)
 ..S (DIC,DIE)="^DGCR(399,",DA=$P($G(^IBA(364,IBIEN,0)),U),DR="[IB STATUS]",IBYY=$S('IBMRA:"@91",1:"@911") D:DA ^DIE
"RTN","IBCE837A",36,0)
 ..D BSTAT^IBCDC(IBIFN) ; remove from AB list
"RTN","IBCE837A",37,0)
 Q
"RTN","IBCE837A",38,0)
 ;
"RTN","IBCE837A",39,0)
PRE ; Run before processing a bill entry
"RTN","IBCE837A",40,0)
 K IBXSAVE,IBXERR,^UTILITY("VAPA",$J),^TMP("IBXSAVE",$J),^TMP($J),^TMP("DIERR",$J)
"RTN","IBCE837A",41,0)
 Q
"RTN","IBCE837A",42,0)
 ;
"RTN","IBCE837A",43,0)
POST ; Run after processing a bill entry for cleanup
"RTN","IBCE837A",44,0)
 N Q
"RTN","IBCE837A",45,0)
 I $G(IBXERR)'="" D
"RTN","IBCE837A",46,0)
 .S ^TMP("IBXERR",$J,IBXIEN)=IBXERR K ^TMP("IBXDATA",$J)
"RTN","IBCE837A",47,0)
 .K ^TMP("IBHDR1",$J)
"RTN","IBCE837A",48,0)
 .I $D(^TMP("IBRESUBMIT",$J)),'$G(^TMP("IBEDI_TEST_BATCH",$J)) D  ;Set not resub flag for non-test bill
"RTN","IBCE837A",49,0)
 ..N Z,Z0
"RTN","IBCE837A",50,0)
 ..S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U) Q:Z0=""
"RTN","IBCE837A",51,0)
 ..S Z=$O(^IBA(364,"ABABI",+$O(^IBA(364.1,"B",Z0,"")),IBXIEN,""))
"RTN","IBCE837A",52,0)
 ..I Z S ^TMP("IBNOT",$J,Z)=IBXIEN
"RTN","IBCE837A",53,0)
 K IBXSAVE,IBXNOREQ,^TMP("IBXSAVE",$J),^TMP($J)
"RTN","IBCE837A",54,0)
 S Q="VA" F  S Q=$O(^UTILITY(Q)) Q:$E(Q,1,2)'="VA"  I $D(^(Q,$J)) K ^UTILITY(Q,$J)
"RTN","IBCE837A",55,0)
 D CLEAN^DILF
"RTN","IBCE837A",56,0)
 Q
"RTN","IBCE837A",57,0)
 ;
"RTN","IBCE837A",58,0)
MAILIT(IBQUEUE,IBBILL,IBCTM,IBDUZ,IBDESC,IBBTYP,IBINS) ; Send mail msg, update bills
"RTN","IBCE837A",59,0)
 ;IBQUEUE = mail queue name to send 837 transactions to
"RTN","IBCE837A",60,0)
 ;IBBILL = array of ien's in file 364 of bills in batch - IBBILL(IEN)=""
"RTN","IBCE837A",61,0)
 ;IBCTM = # of bills in batch, returned reset to 0
"RTN","IBCE837A",62,0)
 ;IBDUZ = ien of user 'running' extract (if any)
"RTN","IBCE837A",63,0)
 ;IBDESC = description of batch
"RTN","IBCE837A",64,0)
 ;IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",65,0)
 ;                   Y = 1 or 2 for test or 0 for live transmission
"RTN","IBCE837A",66,0)
 ;IBINS = ien of insurance company if only one/batch option (optional)
"RTN","IBCE837A",67,0)
 ;
"RTN","IBCE837A",68,0)
 N DIK,DA,XMTO,XMZ,XMBODY,XMDUZ,XMSUBJ,IBBDA,IBBNO
"RTN","IBCE837A",69,0)
 ;
"RTN","IBCE837A",70,0)
 S IBBNO=+$P($G(^TMP("IBHDR",$J)),U),IBBDA=$O(^IBA(364.1,"B",IBBNO,""))
"RTN","IBCE837A",71,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",72,0)
 ;
"RTN","IBCE837A",73,0)
 I IBCTM D
"RTN","IBCE837A",74,0)
 . I +$G(^TMP("IBEDI_TEST_BATCH",$J)) S IBQUEUE="MCT"
"RTN","IBCE837A",75,0)
 . I IBQUEUE'="",IBQUEUE'["@" S XMTO("XXX@Q-"_IBQUEUE_".VA.GOV")=""
"RTN","IBCE837A",76,0)
 . I IBQUEUE["@" S XMTO(IBQUEUE)=""
"RTN","IBCE837A",77,0)
 . S XMDUZ=$G(IBDUZ),XMBODY="^TMP(""IBXMSG"","_$J_")",XMSUBJ=$S($P(IBBTYP,U,2):"** TEST"_$S($P(IBBTYP,U,2)=2:"/RESUB OF LIVE",1:""),1:"")_" CLAIM BATCH: "_$S(IBQUEUE'["@":IBQUEUE,1:$P(IBQUEUE,"@"))_"/"_IBBNO
"RTN","IBCE837A",78,0)
 . K XMZ
"RTN","IBCE837A",79,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",80,0)
 . I $G(XMZ) D
"RTN","IBCE837A",81,0)
 .. D UPD(XMZ,$P($G(^TMP("IBHDR",$J)),U),IBCTM,.IBBILL,IBDESC,IBBTYP,IBINS) ;Update batch/bills
"RTN","IBCE837A",82,0)
 .. S ^TMP("IBCE-BATCH",$J,IBBNO)=IBBDA_U_IBCTM_U_$P($G(^TMP("IBRESUBMIT",$J)),U)
"RTN","IBCE837A",83,0)
MAILQ S IBCTM=0
"RTN","IBCE837A",84,0)
 D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",85,0)
 K ^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXMSG",$J),IBBILL
"RTN","IBCE837A",86,0)
 Q
"RTN","IBCE837A",87,0)
 ;
"RTN","IBCE837A",88,0)
CHKNEW(IBQ,IBBILL,IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,IBSIZE) ;
"RTN","IBCE837A",89,0)
 ;  Determine if ok to send msg
"RTN","IBCE837A",90,0)
 ;  Check for one insurance per batch if IBINS defined
"RTN","IBCE837A",91,0)
 ; Returns IBSIZE, IBCTM, IBBILL (pass by reference)
"RTN","IBCE837A",92,0)
 ;
"RTN","IBCE837A",93,0)
 ; IBQ = data queue name
"RTN","IBCE837A",94,0)
 ; IBBILL = the 'list' of bill #'s in the batch
"RTN","IBCE837A",95,0)
 ; IBCTM = the # of claims output so far to the batch
"RTN","IBCE837A",96,0)
 ; IBDESC = the batch description text
"RTN","IBCE837A",97,0)
 ; IBBTYP = X-Y where X = P for professional or I for institution
"RTN","IBCE837A",98,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",99,0)
 ; IBINS = the ien of the single insurance co. for the batch (optional)
"RTN","IBCE837A",100,0)
 ; IBSITE = the '8' node of file 350.9 (IB PARAMETERS)
"RTN","IBCE837A",101,0)
 ; IBSIZE = the 'running' size of the output message
"RTN","IBCE837A",102,0)
 ;
"RTN","IBCE837A",103,0)
 Q:$S($G(IBINS)="":0,1:'$P(IBSITE,U,7))
"RTN","IBCE837A",104,0)
 ;
"RTN","IBCE837A",105,0)
 ; New batch needed
"RTN","IBCE837A",106,0)
 I IBCTM D MAILIT(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0
"RTN","IBCE837A",107,0)
 Q
"RTN","IBCE837A",108,0)
 ;
"RTN","IBCE837A",109,0)
ERRMSG(XMBODY) ; Send bulletin for error message
"RTN","IBCE837A",110,0)
 N XMTO,XMSUBJ
"RTN","IBCE837A",111,0)
 S XMTO("I:G.IB EDI")="",XMSUBJ="EDI 837 TRANSMISSION ERRORS"
"RTN","IBCE837A",112,0)
 ;
"RTN","IBCE837A",113,0)
 D SENDMSG^XMXAPI(,XMSUBJ,XMBODY,.XMTO)
"RTN","IBCE837A",114,0)
 D ALERT("One or more EDI bills were not transmitted.  Check your mail for details","G.IB EDI")
"RTN","IBCE837A",115,0)
 Q
"RTN","IBCE837A",116,0)
 ;
"RTN","IBCE837A",117,0)
CLEANUP ; Cleans up bill transmission environment
"RTN","IBCE837A",118,0)
 ;
"RTN","IBCE837A",119,0)
 N IBTEST
"RTN","IBCE837A",120,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCE837A",121,0)
 L -^IBA(364,0)
"RTN","IBCE837A",122,0)
 I $D(^TMP("IBRESUBMIT",$J,"IBXERR"))!$D(^TMP("IBONE",$J,"IBXERR"))!$D(^TMP("IBSELX",$J,"IBXERR")) D  ;Error message to mail group
"RTN","IBCE837A",123,0)
 . N XMTO,XMBODY,XMDUZ,XMSUBJ,XMZ,IBFUNC
"RTN","IBCE837A",124,0)
 . S IBFUNC=$S($D(^TMP("IBRESUBMIT",$J,"IBXERR")):$S('IBTEST:1,1:4),$D(^TMP("IBONE",$J,"IBXERR")):2,1:3)
"RTN","IBCE837A",125,0)
 . Q:'IBFUNC
"RTN","IBCE837A",126,0)
 . S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="^TMP("""_$S(IBFUNC=1!(IBFUNC=4):"IBRESUBMIT",1:"IBONE")_""","_$J_",""IBXERR"")"
"RTN","IBCE837A",127,0)
 . S XMSUBJ="EDI 837 B"_$P("ATCH^ILL^ILL(s)^ILL(s)",U,IBFUNC)_" NOT "_$S($G(^TMP("IBONE",$J)):"RE",1:"")_"SUBMITTED"_$S('IBTEST:"",1:" AS TEST CLAIMS")
"RTN","IBCE837A",128,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",129,0)
 . K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837A",130,0)
 ;
"RTN","IBCE837A",131,0)
 I $D(^TMP("IBRESUBMIT",$J)),'IBTEST D RESUBUP^IBCEM02 ;Upd resubmtd batch bills
"RTN","IBCE837A",132,0)
 I '$D(^TMP("IBSELX",$J)) K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837A",133,0)
 K ^TMP("IBXERR",$J),IBXERR
"RTN","IBCE837A",134,0)
 I 'IBTEST D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",135,0)
CLEANP ;  Entrypoint for extract data disply
"RTN","IBCE837A",136,0)
 K ^TMP("IBTXMT",$J),^TMP("IBXINS",$J)
"RTN","IBCE837A",137,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBRESUB",$J),^TMP("IBNOT",$J),^TMP("IBONE",$J),^TMP("IBHDR",$J),^TMP("IBTX",$J),^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCE837A",138,0)
 K ^UTILITY("VADM",$J)
"RTN","IBCE837A",139,0)
 D CLEAN^DILF
"RTN","IBCE837A",140,0)
 K ZTREQ S ZTREQ="@"
"RTN","IBCE837A",141,0)
 Q
"RTN","IBCE837A",142,0)
 ;
"RTN","IBCE837A",143,0)
ALERT(XQAMSG,IBGRP) ; Send alert message
"RTN","IBCE837A",144,0)
 N XQA
"RTN","IBCE837A",145,0)
 S XQA(IBGRP)=""
"RTN","IBCE837A",146,0)
 D SETUP^XQALERT
"RTN","IBCE837A",147,0)
 Q
"RTN","IBCE837A",148,0)
CHKBTCH(IBBNO) ; Delete batch whose batch # is IBBNO if no entries in file 364
"RTN","IBCE837A",149,0)
 ; and not a resubmitted batch
"RTN","IBCE837A",150,0)
 N IBZ,DA,DIK
"RTN","IBCE837A",151,0)
 S IBZ=+$O(^IBA(364.1,"B",+IBBNO,""))
"RTN","IBCE837A",152,0)
 I IBZ,'$O(^IBA(364,"C",IBZ,0)),'$P($G(^IBA(364.1,IBZ,0)),U,14) S DA=IBZ,DIK="^IBA(364.1," D ^DIK
"RTN","IBCE837A",153,0)
 Q
"RTN","IBCE837A",154,0)
 ;
"RTN","IBCE837A",155,0)
TESTLIM(IBINS) ; Check for test bill limit per day has been reached
"RTN","IBCE837A",156,0)
 N IB3,DA,DIK
"RTN","IBCE837A",157,0)
 S IB3=$G(^DIC(36,IBINS,3))
"RTN","IBCE837A",158,0)
 I $P(IB3,U,5)'=DT S $P(IB3,U,7)=0
"RTN","IBCE837A",159,0)
 I ($P(IB3,U,7)+$G(^TMP("IBICT",$J,IBINS))+1)>$P(IB3,U,6) D  Q
"RTN","IBCE837A",160,0)
 . S IBINS="" ;max # hit
"RTN","IBCE837A",161,0)
 . S DA=IBX,DIK="^IBA(364," D ^DIK
"RTN","IBCE837A",162,0)
 S ^TMP("IBICT",$J,IBINS)=$G(^TMP("IBICT",$J,IBINS))+1
"RTN","IBCE837A",163,0)
 Q
"RTN","IBCE837A",164,0)
 ;
"RTN","IBCE837A",165,0)
SETVAR(IBXIEN,IBINS,IB0,IBSEC,IBNID,IB837R,IBDIV) ;
"RTN","IBCE837A",166,0)
 ; Set up variables needed for subscripts in sort global
"RTN","IBCE837A",167,0)
 ; ejk added IBSEC logic for patch 296
"RTN","IBCE837A",168,0)
 ; IBSEC=1 if primary bill, 2 if 2nd/non-MRA, 3 if 2nd/MRA
"RTN","IBCE837A",169,0)
 S IBSEC=$S($$COBN^IBCEF(IBXIEN)=1:1,'$$MRASEC^IBCEF4(IBXIEN):2,1:3)
"RTN","IBCE837A",170,0)
 S IBNID=$$PAYERID^IBCEF2(IBXIEN)
"RTN","IBCE837A",171,0)
 S IB837R=$$RECVR^IBCEF2(IBXIEN)
"RTN","IBCE837A",172,0)
 S IBDIV=$P($S($P(IB0,U,22):$$SITE^VASITE(DT,$P(IB0,U,22)),1:$$SITE^VASITE()),U,3)
"RTN","IBCE837A",173,0)
 I IBNID'="","RPIHS"[$E(IBNID),$E(IBNID,2,$L(IBNID))="PRNT" S IBNID=IBNID_"*"_IBINS
"RTN","IBCE837A",174,0)
 I IBNID="" S IBNID="*"_IBINS
"RTN","IBCE837A",175,0)
 S $P(IBNID,"*",3)=$S($P(IB0,U,22):$P(IB0,U,22),1:"")
"RTN","IBCE837A",176,0)
 Q
"RTN","IBCE837A",177,0)
 ;
"RTN","IBCEF")
0^21^B52873320
"RTN","IBCEF",1,0)
IBCEF ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;22-JAN-96
"RTN","IBCEF",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,51,137,288,296**;21-MAR-94
"RTN","IBCEF",3,0)
 ;
"RTN","IBCEF",4,0)
 ;IBIFN = bill ien throughout this routine
"RTN","IBCEF",5,0)
COB(IBIFN) ; Bill seq
"RTN","IBCEF",6,0)
 N A
"RTN","IBCEF",7,0)
 S A=$P($G(^DGCR(399,IBIFN,0)),U,21) S:A="" A="P"
"RTN","IBCEF",8,0)
 Q A
"RTN","IBCEF",9,0)
 ;
"RTN","IBCEF",10,0)
COBN(IBIFN,A) ; Return seq # of selected payer
"RTN","IBCEF",11,0)
 ; A = 'PST' or null to get current bill payer seq #
"RTN","IBCEF",12,0)
 I $G(A)="" S A=$$COB(IBIFN) S:"PST"'[A A="P"
"RTN","IBCEF",13,0)
 I 'A S A=$F("PST",A)-1 S:A<1 A=1
"RTN","IBCEF",14,0)
 Q A
"RTN","IBCEF",15,0)
 ;
"RTN","IBCEF",16,0)
POLICY(IBIFN,IBPC,IBCOBN) ; Return raw data from policy info on bill
"RTN","IBCEF",17,0)
 ; IBPC  = pc # of data element in policy (optional)
"RTN","IBCEF",18,0)
 ;          if null, 0-node is returned
"RTN","IBCEF",19,0)
 ; IBCOBN = bill designation 1-3 or 'PST' (optional)
"RTN","IBCEF",20,0)
 ;          if null, default to current
"RTN","IBCEF",21,0)
 N IBI
"RTN","IBCEF",22,0)
 I "PST"[$G(IBCOBN) S IBCOBN=$$COBN(IBIFN,$G(IBCOBN))
"RTN","IBCEF",23,0)
 S IBI=$G(^DGCR(399,IBIFN,"I"_IBCOBN))
"RTN","IBCEF",24,0)
 I $G(IBPC) S IBI=$P(IBI,U,IBPC)
"RTN","IBCEF",25,0)
POLICYQ Q IBI
"RTN","IBCEF",26,0)
 ;
"RTN","IBCEF",27,0)
INSADDR(IBIFN,IBCOB) ; Return insured's addr in 7 pcs:
"RTN","IBCEF",28,0)
 ; ALL STREET ADDRESSES^CITY^STATE ABBREVIATION^ZIP^STREET ADDRESS 1^
"RTN","IBCEF",29,0)
 ;  STREET ADDRESS 2^STREET ADDRESS 3
"RTN","IBCEF",30,0)
 ; IBIFN = bill ien
"RTN","IBCEF",31,0)
 ; IBCOB = bill designation (P)rimary, (S)econdary, (T)ertiary
"RTN","IBCEF",32,0)
 ;          or 1-2-3. If not defined or null, return current
"RTN","IBCEF",33,0)
 ; If insured is patient or spouse, take from pt file top level
"RTN","IBCEF",34,0)
 ;   flds, then if top-level street addresses blank and policy
"RTN","IBCEF",35,0)
 ;   level flds are not, use policy level
"RTN","IBCEF",36,0)
 ; If insured other than pt/spouse, use policy level flds only
"RTN","IBCEF",37,0)
 N A,B,IBADDR,IBI,DFN,VAPA,VATEST
"RTN","IBCEF",38,0)
 S:$G(IBCOB)="" IBCOB=""
"RTN","IBCEF",39,0)
 I 'IBCOB S IBCOB=$$COBN(IBIFN,$G(IBCOB))
"RTN","IBCEF",40,0)
 S IBI=+$$POLICY(IBIFN,16,IBCOB)
"RTN","IBCEF",41,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",42,0)
 I $S('IBI:1,1:"12"'[IBI) S IBADDR="" G INSADDQ
"RTN","IBCEF",43,0)
 ; insureds addr (pt/spouse) same as pt's
"RTN","IBCEF",44,0)
 S VATEST("ADD",9)=+$G(^DGCR(399,IBIFN,"U")),VATEST("ADD",10)=+$P($G(^("U")),U,2)
"RTN","IBCEF",45,0)
 D ADD^VADPT
"RTN","IBCEF",46,0)
 S IBADDR=VAPA(1)_" "_VAPA(2)_" "_VAPA(3)_U_VAPA(4)_U_$P($G(^DIC(5,+VAPA(5),0)),U,2)_U_VAPA(6)_U_VAPA(1)_U_VAPA(2)_U_VAPA(3)
"RTN","IBCEF",47,0)
INSADDQ S A=$P($G(^DGCR(399,IBIFN,"M")),U,(11+IBCOB))
"RTN","IBCEF",48,0)
 S A=$G(^DPT(DFN,.312,+A,3))
"RTN","IBCEF",49,0)
 I $TR($P(IBADDR,U)," ")="" D
"RTN","IBCEF",50,0)
 .S $P(IBADDR,U)=$P(A,U,6)_" "_$P(A,U,7),$P(IBADDR,U,5,6)=$P(A,U,6,7)
"RTN","IBCEF",51,0)
 .F B=2,4 S $P(IBADDR,U,B)=$P(A,U,B+6)
"RTN","IBCEF",52,0)
 .S $P(IBADDR,U,3)=$P($G(^DIC(5,+$P(A,U,9),0)),U,2)
"RTN","IBCEF",53,0)
 Q IBADDR
"RTN","IBCEF",54,0)
 ;
"RTN","IBCEF",55,0)
PTADDR(IBIFN,ELE) ;Return part of pt's permanent addr
"RTN","IBCEF",56,0)
 ;IBIFN = bill ien
"RTN","IBCEF",57,0)
 ;ELE = subscript in ^UTILITY("VAPA", array for element needed
"RTN","IBCEF",58,0)
 ;
"RTN","IBCEF",59,0)
 I '$D(^UTILITY("VAPA",$J)) D  ; once per pt
"RTN","IBCEF",60,0)
 .N VAHOW,DFN,VAPA
"RTN","IBCEF",61,0)
 .S VAHOW=2,DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2),VAPA("P")=""
"RTN","IBCEF",62,0)
 .D ADD^VADPT
"RTN","IBCEF",63,0)
 Q $P($G(^UTILITY("VAPA",$J,ELE)),U)
"RTN","IBCEF",64,0)
 ;
"RTN","IBCEF",65,0)
PTDEM(IBIFN,ELE,PC) ;Return part of pt's demograpics
"RTN","IBCEF",66,0)
 ;IBIFN = bill ien
"RTN","IBCEF",67,0)
 ;ELE = subscript in ^UTILITY("VADM" array for demographic element needed
"RTN","IBCEF",68,0)
 ;PC = pc of string at subscript ELE to be returned
"RTN","IBCEF",69,0)
 ;
"RTN","IBCEF",70,0)
 I '$G(PC) S PC=1
"RTN","IBCEF",71,0)
 I '$D(^UTILITY("VADM",$J)) D  ; once per pt
"RTN","IBCEF",72,0)
 .N VAHOW,DFN,VADM
"RTN","IBCEF",73,0)
 .S VAHOW=2,DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",74,0)
 .D DEM^VADPT
"RTN","IBCEF",75,0)
 Q $P($G(^UTILITY("VADM",$J,ELE)),U,PC)
"RTN","IBCEF",76,0)
 ;
"RTN","IBCEF",77,0)
PTEMPL(IBIFN,ELE,WHOSE,VAOA) ;Return part of pt's or spouse's employer info
"RTN","IBCEF",78,0)
 ;ELE = subscript in VAOA array for employer element needed
"RTN","IBCEF",79,0)
 ;WHOSE = 6 if spouse's info needed  5 if pt info needed (DEFAULT)
"RTN","IBCEF",80,0)
 ;
"RTN","IBCEF",81,0)
 N DFN
"RTN","IBCEF",82,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2),VAOA("A")=$S($G(WHOSE):WHOSE,1:5)
"RTN","IBCEF",83,0)
 D OAD^VADPT
"RTN","IBCEF",84,0)
 Q $P($G(VAOA(ELE)),U)
"RTN","IBCEF",85,0)
 ;
"RTN","IBCEF",86,0)
INSDEM(IBIFN,IBCOB) ; Return insured's demographics in 6 pieces:
"RTN","IBCEF",87,0)
 ; DATE OF BIRTH^SEX^PHONE^BRANCH pointer^RANK^SSN(no dashes)
"RTN","IBCEF",88,0)
 ; IBIFN = bill ien
"RTN","IBCEF",89,0)
 ; IBCOB = bill designation (P)rimary (default), (S)econdary, (T)ertiary
"RTN","IBCEF",90,0)
 ;          or 1,2,3 ... if not defined or null, return current
"RTN","IBCEF",91,0)
 ; If insured is patient/spouse, take from pt file top level
"RTN","IBCEF",92,0)
 ;   flds, then if top-level are blank and policy level aren't,
"RTN","IBCEF",93,0)
 ;   use policy level
"RTN","IBCEF",94,0)
 ; If insured other than pt/spouse, use policy level flds only
"RTN","IBCEF",95,0)
 N A,B,IBDEM,IBI,DFN,VADM
"RTN","IBCEF",96,0)
 S:$G(IBCOB)="" IBCOB=""
"RTN","IBCEF",97,0)
 S:'IBCOB IBCOB=$$COBN(IBIFN,IBCOB)
"RTN","IBCEF",98,0)
 S IBI=$$WHOSINS(IBIFN,IBCOB)
"RTN","IBCEF",99,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",100,0)
 I $S('IBI:1,1:"12"'[IBI) S IBDEM="" G INSDEM1
"RTN","IBCEF",101,0)
 ; If it gets here, assume insured is pt/spouse
"RTN","IBCEF",102,0)
 S A=$$PTDEM(IBIFN,0),A=$$PTADDR(IBIFN,0)
"RTN","IBCEF",103,0)
 F A=2,3,5 S VADM(A)=$P($G(^UTILITY("VADM",$J,A)),U)
"RTN","IBCEF",104,0)
 S VAPA(8)=$P($G(^UTILITY("VAPA",$J,8)),U)
"RTN","IBCEF",105,0)
 I VADM(5)="",'VADM(3),VAPA(8)="" S IBDEM="" G INSDEM1
"RTN","IBCEF",106,0)
 S:"MF"'[VADM(5) VADM(5)="" S $P(IBDEM,U,2)=$S(IBI=1:VADM(5),1:$S(VADM(5)="M":"F",VADM(5)="F":"M",1:""))
"RTN","IBCEF",107,0)
 S $P(IBDEM,U,3)=VAPA(8),$P(IBDEM,U,6)=VADM(2)
"RTN","IBCEF",108,0)
 I IBI=1,VADM(3) S $P(IBDEM,U)=VADM(3) ;Patient's own policy only
"RTN","IBCEF",109,0)
INSDEM1 S A=$P($G(^DGCR(399,IBIFN,"M")),U,(11+IBCOB))
"RTN","IBCEF",110,0)
 S A=$G(^DPT(DFN,.312,+A,3))
"RTN","IBCEF",111,0)
 S $P(IBDEM,U,4,5)=$P(A,U,2)_U_$P(A,U,3)
"RTN","IBCEF",112,0)
 S:'$P(IBDEM,U) $P(IBDEM,U)=$P(A,U)
"RTN","IBCEF",113,0)
 S:$P(IBDEM,U,3)="" $P(IBDEM,U,3)=$P(A,U,11)
"RTN","IBCEF",114,0)
 S:$P(IBDEM,U,6)="" $P(IBDEM,U,6)=$P(A,U,5)
"RTN","IBCEF",115,0)
 Q IBDEM
"RTN","IBCEF",116,0)
 ;
"RTN","IBCEF",117,0)
INSEMPL(IBIFN,IBCOB) ; Return insured's employer data in 5 pieces:
"RTN","IBCEF",118,0)
 ; EMPLOYER NAME^EMPLOYER CITY^EMPLOYER STATE ABBREVIATION^STATE IEN^STREET 1
"RTN","IBCEF",119,0)
 ; IBCOB = bill designation (P)rimary-default, (S)econdary, (T)ertiary
"RTN","IBCEF",120,0)
 ;            or 123 - if not defined or null, return current
"RTN","IBCEF",121,0)
 N A,IBEMPL,IBI,DFN,VAOA
"RTN","IBCEF",122,0)
 S IBI=$$WHOSINS(IBIFN,$G(IBCOB))
"RTN","IBCEF",123,0)
 I $S('IBI:1,1:"12"'[IBI) S IBEMPL="^^" G INSEMPQ
"RTN","IBCEF",124,0)
 ; insured = pt/spouse
"RTN","IBCEF",125,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",126,0)
 S A=$$PTEMPL(IBIFN,0,IBI+4,.VAOA)
"RTN","IBCEF",127,0)
 S IBEMPL=VAOA(9)_U_VAOA(4)_U_$P($G(^DIC(5,+VAOA(5),0)),U,2)_U_+VAOA(5)_U_VAOA(1)
"RTN","IBCEF",128,0)
INSEMPQ Q IBEMPL
"RTN","IBCEF",129,0)
 ;
"RTN","IBCEF",130,0)
WHOSINS(IBIFN,IBCOB) ; Determine who is insured for bill IBIFN and 
"RTN","IBCEF",131,0)
 ; seq of coverage COB (123 or PST) or if not defined or null, current
"RTN","IBCEF",132,0)
 N Z,Z0,VAEL,DFN
"RTN","IBCEF",133,0)
 S Z=+$$POLICY(IBIFN,16,$G(IBCOB))
"RTN","IBCEF",134,0)
 I 'Z D
"RTN","IBCEF",135,0)
 .S Z0=$$POLICY(IBIFN,6,$G(IBCOB)),DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",136,0)
 .I Z0="v" D ELIG^VADPT I VAEL(4) S Z=1 Q  ;vet is pt
"RTN","IBCEF",137,0)
 .I Z0="s" D ELIG^VADPT I VAEL(4) S Z=2 Q  ;vet is pt, so vets spouse is pt's spouse
"RTN","IBCEF",138,0)
 .S Z=9 ; relationship of insured to pt unknown
"RTN","IBCEF",139,0)
 Q Z
"RTN","IBCEF",140,0)
 ;
"RTN","IBCEF",141,0)
EMPSTAT(IBIFN,WHOSE) ;Return employment status
"RTN","IBCEF",142,0)
 ; IBIFN = bill ien
"RTN","IBCEF",143,0)
 ; WHOSE = v for vet, s for spouse status
"RTN","IBCEF",144,0)
 N STAT,DFN,VAPD
"RTN","IBCEF",145,0)
 S STAT="",DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",146,0)
 I WHOSE="v" D OPD^VADPT S STAT=$P(VAPD(7),U)
"RTN","IBCEF",147,0)
 I WHOSE="s" S STAT=$P($G(^DPT(DFN,.25)),U,15)
"RTN","IBCEF",148,0)
 I STAT="" S STAT=9
"RTN","IBCEF",149,0)
 Q STAT
"RTN","IBCEF",150,0)
 ;
"RTN","IBCEF",151,0)
INPAT(IBIFN,OUT) ; Determine if bill is inpt
"RTN","IBCEF",152,0)
 ; OUT = optional - if 1, return output value based on 
"RTN","IBCEF",153,0)
 ;  in/outpt from UB92 type of bill fld
"RTN","IBCEF",154,0)
 ; Return 1 if inpt, 0 if not inpt or can't be determined
"RTN","IBCEF",155,0)
 N INPT,CODE,CODE0,IB0
"RTN","IBCEF",156,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF",157,0)
 S OUT=+$G(OUT),CODE=+$P(IB0,U,5)
"RTN","IBCEF",158,0)
 I 'OUT S INPT=CODE
"RTN","IBCEF",159,0)
 I OUT D
"RTN","IBCEF",160,0)
 . S CODE0=$P($G(^DGCR(399.1,+$P(IB0,U,25),0)),U,2)
"RTN","IBCEF",161,0)
 . I CODE0=8,$P(IB0,U,24)=1 S INPT=$P(IB0,U,5) Q  ; 18X
"RTN","IBCEF",162,0)
 . I CODE0=9,$P(IB0,U,24)=8 S INPT=$P(IB0,U,5) Q  ; 89X
"RTN","IBCEF",163,0)
 . I CODE0=1,$P(IB0,U,24)=8 S INPT=0 Q  ; 81X
"RTN","IBCEF",164,0)
 . I CODE0=1,$P(IB0,U,24)=7 S INPT=0 Q  ; 71X
"RTN","IBCEF",165,0)
 . I CODE0=2,$P(IB0,U,24)=7 S INPT=0 Q  ; 72X
"RTN","IBCEF",166,0)
 . S INPT=CODE0
"RTN","IBCEF",167,0)
 Q $S(INPT:INPT'>2,1:0)
"RTN","IBCEF",168,0)
 ;
"RTN","IBCEF",169,0)
INSPRF(IBIFN) ; Function to determine if bill is prof or inst
"RTN","IBCEF",170,0)
 ; Return 1 if inst (UB92), 0 if prof (1500)
"RTN","IBCEF",171,0)
 N A
"RTN","IBCEF",172,0)
 S A=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF",173,0)
 I $P(A,U,27)="" S $P(A,U,27)=$S($P(A,U,19)=3:1,1:0)
"RTN","IBCEF",174,0)
 Q $S($P(A,U,27)=1:1,1:0)
"RTN","IBCEF",175,0)
 ;
"RTN","IBCEF",176,0)
F(FLD,IBXRET,IBXERR1,IBIEN) ;Execute extract for data element FLD and bill IBIEN
"RTN","IBCEF",177,0)
 ; If IBXDATA array to be returned as data value(s) of fld
"RTN","IBCEF",178,0)
 ;   D F^IBCEF("FLD NAME","IBXDATA","IBXERR") or D F^IBCEF("FLD NAME") 
"RTN","IBCEF",179,0)
 ; Variable ref-ed by IBXERR1 will contain error message if an error
"RTN","IBCEF",180,0)
 ; @IBXRET always defined on return.  It will be null if error
"RTN","IBCEF",181,0)
 I $G(IBIEN) N IBXIEN S IBXIEN=IBIEN
"RTN","IBCEF",182,0)
 I $G(IBXERR1)="" S IBXERR1="IBXERR"
"RTN","IBCEF",183,0)
 N IBXHOLD
"RTN","IBCEF",184,0)
 S IBXHOLD=""
"RTN","IBCEF",185,0)
 I $G(IBXRET)=""!($G(IBXRET)="IBXDATA") S IBXHOLD="IBXDATA",IBXRET="IBXRET"
"RTN","IBCEF",186,0)
 S @IBXERR1=""
"RTN","IBCEF",187,0)
 ;
"RTN","IBCEF",188,0)
 N FLDN,OFLD,STOP,Z,IBXERR2,IBXRETX
"RTN","IBCEF",189,0)
 ;
"RTN","IBCEF",190,0)
 I '$G(IBXIEN) S @IBXERR1="Invalid entry #" G FQ
"RTN","IBCEF",191,0)
 I '$D(^IBA(364.5,"B",FLD)) S OFLD=FLD,STOP=0 D  I FLD="" S @IBXERR1=OFLD_" Field not found!!" G FQ
"RTN","IBCEF",192,0)
 .F  S FLD=$O(^IBA(364.5,"B",FLD))  D  Q:STOP
"RTN","IBCEF",193,0)
 ..I $E(FLD,1,$L(OFLD))'=OFLD S FLD=""
"RTN","IBCEF",194,0)
 ..S STOP=1
"RTN","IBCEF",195,0)
 ;
"RTN","IBCEF",196,0)
 S Z=0
"RTN","IBCEF",197,0)
 F  S Z=$O(^IBA(364.5,"B",FLD,Z)) Q:'Z  I $P($G(^IBA(364.5,Z,0)),U,5)=399 Q
"RTN","IBCEF",198,0)
 I 'Z S @IBXERR1=FLD_" Field not found!!" G FQ
"RTN","IBCEF",199,0)
 ;
"RTN","IBCEF",200,0)
 S FLDN(1)=Z D EXTONE^IBCEFG0(IBXIEN,.FLDN,""_IBXRET_"",.IBXERR2)
"RTN","IBCEF",201,0)
 ;
"RTN","IBCEF",202,0)
 I $G(IBXERR2)'="" S @IBXERR1=IBXERR2
"RTN","IBCEF",203,0)
FQ S IBXARRY=$S(IBXHOLD="IBXDATA":"IBXDATA",1:""_IBXRET_"")
"RTN","IBCEF",204,0)
 I @IBXERR1'="" K @IBXARRY S @IBXARRY="" Q
"RTN","IBCEF",205,0)
 ;
"RTN","IBCEF",206,0)
 I IBXHOLD="IBXDATA" S IBXRET="IBXRET"
"RTN","IBCEF",207,0)
 M IBXRETX=@IBXRET K @IBXARRY M @IBXARRY=IBXRETX(1)
"RTN","IBCEF",208,0)
 S:'($D(@IBXARRY)#2) @IBXARRY=""
"RTN","IBCEF",209,0)
 Q
"RTN","IBCEF",210,0)
 ;
"RTN","IBCEF",211,0)
SERVDT(IBIFN,LENGTH,FORMAT) ; Return default service dt for 
"RTN","IBCEF",212,0)
 ; outpt/UB92 lines or X12-837 inst lines
"RTN","IBCEF",213,0)
 ; LENGTH = null/8 for 8 digit dt, 6 for 6 digit dt
"RTN","IBCEF",214,0)
 ; FORMAT = 1 = X12 format (YYYYMMDD), 2 = FM internal (NNNNNNN),
"RTN","IBCEF",215,0)
 ;          0 = external (MMDDYY or MMDDYYYY)
"RTN","IBCEF",216,0)
 N IBZ
"RTN","IBCEF",217,0)
 G:$$INPAT^IBCEF(IBIFN,1)!($$FT^IBCEF(IBIFN)'=3) SERVDTQ ;Inpatient claim or billed on a HCFA 1500
"RTN","IBCEF",218,0)
 S LENGTH=$G(LENGTH),FORMAT=$G(FORMAT)
"RTN","IBCEF",219,0)
 D F("N-STATEMENT COVERS FROM DATE","IBZ",,IBIFN)
"RTN","IBCEF",220,0)
 I '$G(IBZ)!(FORMAT=2) G SERVDTQ
"RTN","IBCEF",221,0)
 ;
"RTN","IBCEF",222,0)
 I FORMAT=1 S IBZ=$$DT^IBCEFG1(IBZ,"",$S(LENGTH'=6:"D8",1:"D6")) G SERVDTQ
"RTN","IBCEF",223,0)
 S IBZ=$$DATE^IBCF2(IBZ,$S(LENGTH=6:0,1:1),1)
"RTN","IBCEF",224,0)
 ;
"RTN","IBCEF",225,0)
SERVDTQ Q $G(IBZ)
"RTN","IBCEF",226,0)
 ;
"RTN","IBCEF",227,0)
NOPUNCT(X,SPACE,EXC) ; Strip punctuation from data in X
"RTN","IBCEF",228,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF",229,0)
 ; EXC = list of punct not to strip
"RTN","IBCEF",230,0)
 ;
"RTN","IBCEF",231,0)
 N PUNCT,Z
"RTN","IBCEF",232,0)
 S PUNCT=".,-+(){}[]\/><:;?|=_*&%$#@!~`^'"""
"RTN","IBCEF",233,0)
 I $G(SPACE) S PUNCT=PUNCT_" "
"RTN","IBCEF",234,0)
 I $G(EXC)'="" F Z=1:1:$L(EXC) S PUNCT=$TR(PUNCT,$E(EXC,Z))
"RTN","IBCEF",235,0)
 S X=$TR(X,PUNCT)
"RTN","IBCEF",236,0)
 Q X
"RTN","IBCEF",237,0)
 ;
"RTN","IBCEF",238,0)
FT(IBIFN) ; Internal code for bill form type
"RTN","IBCEF",239,0)
 Q +$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCEF",240,0)
 ;
"RTN","IBCEF",241,0)
COBCT(IBIFN) ; # of payers on claim
"RTN","IBCEF",242,0)
 N CT,Z
"RTN","IBCEF",243,0)
 S CT=0 F Z="I1","I2","I3" Q:'$D(^DGCR(399,IBIFN,Z))  S CT=CT+1
"RTN","IBCEF",244,0)
 Q CT
"RTN","IBCEF",245,0)
 ;
"RTN","IBCEF2")
0^7^B53700884
"RTN","IBCEF2",1,0)
IBCEF2 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;8/6/03 10:54am
"RTN","IBCEF2",2,0)
 ;;2.0;INTEGRATED BILLING;**52,85,51,137,232,155,296**;21-MAR-94
"RTN","IBCEF2",3,0)
 ;
"RTN","IBCEF2",4,0)
HOS(IBIFN) ; Extract rev codes for inst. episode into IBXDATA
"RTN","IBCEF2",5,0)
 ; Moved for space
"RTN","IBCEF2",6,0)
 D HOS^IBCEF22(IBIFN)
"RTN","IBCEF2",7,0)
 Q
"RTN","IBCEF2",8,0)
 ;
"RTN","IBCEF2",9,0)
OTHINS(IBIFN) ;Determine 'other insurance' node (I1,I2)
"RTN","IBCEF2",10,0)
 ; If primary bill, other ins is secondary
"RTN","IBCEF2",11,0)
 ; If sec or tert bill, other ins is primary
"RTN","IBCEF2",12,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",13,0)
 N Z
"RTN","IBCEF2",14,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",15,0)
 Q "I"_$S(Z=1:2,1:1)
"RTN","IBCEF2",16,0)
 ;
"RTN","IBCEF2",17,0)
OTHINS1(IBIFN) ; Returns the COB #'s of all 'other insurance' as a string
"RTN","IBCEF2",18,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",19,0)
 N IBC,Z
"RTN","IBCEF2",20,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",21,0)
 I Z=1 S IBC=$S($D(^DGCR(399,IBIFN,"I2")):$S($D(^DGCR(399,IBIFN,"I3")):23,1:2),1:"") ;Primary=>2 or 23
"RTN","IBCEF2",22,0)
 I Z=2 S IBC="1"_$S($D(^DGCR(399,IBIFN,"I3")):3,1:"") ;Secondary=>1 or 13
"RTN","IBCEF2",23,0)
 I Z=3 S IBC="12" ;Tertiary =>12
"RTN","IBCEF2",24,0)
OTHQ Q IBC
"RTN","IBCEF2",25,0)
 ;
"RTN","IBCEF2",26,0)
RECVR(IBIFN) ; Returns the V.A. internal routing id of the current ins
"RTN","IBCEF2",27,0)
 ; co for 837
"RTN","IBCEF2",28,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",29,0)
 N MCR,NUM,IBPH
"RTN","IBCEF2",30,0)
 S IBPH=$P("P^H",U,$$FT^IBCEF(IBIFN)-1)
"RTN","IBCEF2",31,0)
 S NUM="ENVOY"_IBPH       ; 155 version
"RTN","IBCEF2",32,0)
 ; If rate type is CHAMPVA, send 'CHAMVA'
"RTN","IBCEF2",33,0)
 I $P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U)="CHAMPVA" S NUM="CHAMV"_IBPH
"RTN","IBCEF2",34,0)
 I NUM["ENVOY",$$MCRWNR^IBEFUNC(+$$CURR(IBIFN)) D  ;Find out PART A/B for MEDICARE    155 version
"RTN","IBCEF2",35,0)
 . S MCR=$$MRATYPE^IBEFUNC(IBIFN)
"RTN","IBCEF2",36,0)
 . I MCR'="","AB"[MCR S NUM="PART"_MCR
"RTN","IBCEF2",37,0)
 Q NUM
"RTN","IBCEF2",38,0)
 ;
"RTN","IBCEF2",39,0)
ALLPAYID(IBIFN,IBXDATA,SEQ) ; Returns clearinghouse id for all (SEQ="")
"RTN","IBCEF2",40,0)
 ;  or a specific (SEQ=1,2,3) ins co's for 837 in IBXDATA(n) for bill ien
"RTN","IBCEF2",41,0)
 ;  IBIFN
"RTN","IBCEF2",42,0)
 ; EJK *296* Add IBMRA - MRA Claim type. 
"RTN","IBCEF2",43,0)
 ; EJK *296* Add IBEBI - Electronic Billing ID
"RTN","IBCEF2",44,0)
 N Z,Z0,Z1,A,IBM,IBINST,IBMCR,IBX,IBMRA,IBEBI
"RTN","IBCEF2",45,0)
 S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCEF2",46,0)
 F Z=1:1:3 I $S('$G(SEQ):1,1:Z=SEQ) S Z0=$P(IBM,U,Z) I Z0 D  S:A'="" IBXDATA(Z)=A
"RTN","IBCEF2",47,0)
 . S A=""
"RTN","IBCEF2",48,0)
 . S IBINST=($$FT^IBCEF(IBIFN)=3) ;Is bill UB-92?
"RTN","IBCEF2",49,0)
 . ; EJK *296* Get IBEBI based on Prof. or Inst. claim
"RTN","IBCEF2",50,0)
 . I IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,4)
"RTN","IBCEF2",51,0)
 . I 'IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,2)
"RTN","IBCEF2",52,0)
 . S IBEBI=$$UP^XLFSTR(IBEBI)
"RTN","IBCEF2",53,0)
 . ; EJK *296* If this is a Medicare claim, it may be printed or transmitted. 
"RTN","IBCEF2",54,0)
 . S IBMRA=$$MRASEC^IBCEF4(IBIFN)   ;Is claim 2ndary to an MRA? 
"RTN","IBCEF2",55,0)
 . S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN),Z1=$G(^DGCR(399,IBIFN,"TX"))
"RTN","IBCEF2",56,0)
 . Q:$P(Z1,U,8)=1!$S('$P(Z1,U,9):0,1:$$MRASEC^IBCEF4(IBIFN))  ;Force local prnt
"RTN","IBCEF2",57,0)
 . S A=$S($P(Z1,U,8)'=2:$P($G(^DIC(36,Z0,3)),U,$S(IBINST:4,1:2)),1:"")
"RTN","IBCEF2",58,0)
 . S A=$$UP^XLFSTR(A)
"RTN","IBCEF2",59,0)
 . ;
"RTN","IBCEF2",60,0)
 . ; RPRNT = HCFA 1500 Rx bills
"RTN","IBCEF2",61,0)
 . ; IPRNT = Inst MRA secondary claims
"RTN","IBCEF2",62,0)
 . ; PPRNT = Prof MRA secondary claims
"RTN","IBCEF2",63,0)
 . ; HPRNT = inst printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",64,0)
 . ; SPRNT = prof printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",65,0)
 . ;
"RTN","IBCEF2",66,0)
 . ; Default to appropriate 'xPRNT' if Rx bill or COB bill or forced to
"RTN","IBCEF2",67,0)
 . ;    print - claims must print at clearinghouse
"RTN","IBCEF2",68,0)
 . ;
"RTN","IBCEF2",69,0)
 . ; Rx bills on HCFA 1500
"RTN","IBCEF2",70,0)
 . I 'IBINST,$$ISRX^IBCEF1(IBIFN) S A="RPRNT" Q
"RTN","IBCEF2",71,0)
 . ;
"RTN","IBCEF2",72,0)
 . ; Claim forced to print at clearinghouse
"RTN","IBCEF2",73,0)
 . I $P(Z1,U,8)=2 S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",74,0)
 . ;
"RTN","IBCEF2",75,0)
 . ; EJK *296* Send IBEBI for MRA secondary claims if it exists
"RTN","IBCEF2",76,0)
 . I Z>1,IBMRA,IBEBI'="" S A=IBEBI Q
"RTN","IBCEF2",77,0)
 . ;
"RTN","IBCEF2",78,0)
 . ; MRA secondary claim
"RTN","IBCEF2",79,0)
 . I Z>1,IBMCR=1,$P(Z1,U,5)="C" S A=$S(IBINST:"I",1:"P")_"PRNT" Q
"RTN","IBCEF2",80,0)
 . ;
"RTN","IBCEF2",81,0)
 . ; Medicare is current payer (MRA request claim)
"RTN","IBCEF2",82,0)
 . I $$WNRBILL^IBEFUNC(IBIFN,Z) S A=$S(IBINST:"12M61",1:"SMTX1") Q
"RTN","IBCEF2",83,0)
 . ;
"RTN","IBCEF2",84,0)
 . ; IB*296 - Do not modify the payer ID for CHAMPVA (HAC)
"RTN","IBCEF2",85,0)
 . I A=84146 Q
"RTN","IBCEF2",86,0)
 . I A=84147 Q
"RTN","IBCEF2",87,0)
 . ;
"RTN","IBCEF2",88,0)
 . ; If not a primary bill force to print
"RTN","IBCEF2",89,0)
 . I Z>1,Z=$$COBN^IBCEF(IBIFN) S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",90,0)
 . Q
"RTN","IBCEF2",91,0)
 ;
"RTN","IBCEF2",92,0)
 Q
"RTN","IBCEF2",93,0)
 ;
"RTN","IBCEF2",94,0)
PAYERID(IBIFN) ; Returns clearinghouse id for current ins co
"RTN","IBCEF2",95,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",96,0)
 N NUM,IBSEQ
"RTN","IBCEF2",97,0)
 ; Determine the current ins co's # to identify at WEBMD
"RTN","IBCEF2",98,0)
 ; Envoy changed to WEBMD in patch 232
"RTN","IBCEF2",99,0)
 S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",100,0)
 D ALLPAYID(IBIFN,.NUM,IBSEQ) S NUM=$G(NUM(IBSEQ))
"RTN","IBCEF2",101,0)
 Q $G(NUM)
"RTN","IBCEF2",102,0)
 ;
"RTN","IBCEF2",103,0)
CURR(IBIFN) ; Returns ien of the current insurance
"RTN","IBCEF2",104,0)
 ; company for bill ien IBIFN
"RTN","IBCEF2",105,0)
 Q $$FINDINS^IBCEF1(IBIFN)
"RTN","IBCEF2",106,0)
 ;
"RTN","IBCEF2",107,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF2",108,0)
 D ADMDT^IBCEF21(IBIFN,$G(NOOUTCK))      ; Moved for space
"RTN","IBCEF2",109,0)
 Q
"RTN","IBCEF2",110,0)
 ;
"RTN","IBCEF2",111,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF2",112,0)
 D DISDT^IBCEF21(IBIFN)                  ; Moved for space
"RTN","IBCEF2",113,0)
 Q
"RTN","IBCEF2",114,0)
 ;
"RTN","IBCEF2",115,0)
INDTS(IBIFN) ; Function returns the admit ^ discharge date/time of admission if patient is an inpatient on bill's event date
"RTN","IBCEF2",116,0)
 N Z,Z0,DFN,VAINDT,VAIN S Z0=""
"RTN","IBCEF2",117,0)
 S Z=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(Z,U,2),VAINDT=$P(Z,U,3)
"RTN","IBCEF2",118,0)
 I +DFN,+VAINDT D INP^VADPT I +VAIN(1) S Z0=+VAIN(7)_U_+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF2",119,0)
 Q Z0
"RTN","IBCEF2",120,0)
 ;
"RTN","IBCEF2",121,0)
TXMT(IBIFN) ; Function moved - use new call in IBCEF4
"RTN","IBCEF2",122,0)
 Q $$TXMT^IBCEF4(IBIFN)
"RTN","IBCEF2",123,0)
 ;
"RTN","IBCEF2",124,0)
 ;
"RTN","IBCEF2",125,0)
ID(LN,VAL) ; Set EXTRACT GLOBAL for multi-valued record
"RTN","IBCEF2",126,0)
 ; ids for Austin
"RTN","IBCEF2",127,0)
 ; LN = the line # being extracted
"RTN","IBCEF2",128,0)
 ; VAL = the value of the element being extracted
"RTN","IBCEF2",129,0)
 ;
"RTN","IBCEF2",130,0)
 ; Assumes IBXPG exists
"RTN","IBCEF2",131,0)
 ;
"RTN","IBCEF2",132,0)
 Q:LN<2
"RTN","IBCEF2",133,0)
 D SETGBL^IBCEFG(IBXPG,LN,1,VAL,.IBXSIZE)
"RTN","IBCEF2",134,0)
 Q
"RTN","IBCEF2",135,0)
 ;
"RTN","IBCEF2",136,0)
ID1(LN,DX,CT) ;Special entrypoint for diagnoses to 'save' the fact
"RTN","IBCEF2",137,0)
 ;   a dx code is an e-code.
"RTN","IBCEF2",138,0)
 ; LN is last entry # output, returned as the entry # (IBXLINE) to assign to this entry
"RTN","IBCEF2",139,0)
 ; DX = the actual Dx code array(RECORD ID). Pass by reference, DX returned null if
"RTN","IBCEF2",140,0)
 ;      dx was not output
"RTN","IBCEF2",141,0)
 ; CT = the ct on the 'DC' entry.  pass by reference, returned null if
"RTN","IBCEF2",142,0)
 ;      the end of the valid dx codes has been reached
"RTN","IBCEF2",143,0)
 N IBINS,VAL
"RTN","IBCEF2",144,0)
 S IBINS=($$FT^IBCEF(IBXIEN)=3)
"RTN","IBCEF2",145,0)
 S VAL="DC"_CT                     ; **232**
"RTN","IBCEF2",146,0)
 S VAL=$E(VAL_" ",1,4)
"RTN","IBCEF2",147,0)
 I IBINS D
"RTN","IBCEF2",148,0)
 . I CT>8 S CT="" Q  ;Only 8 codes for institutional/UB  **232**
"RTN","IBCEF2",149,0)
 . ; Check for 'E-code'.  If there, don't extract the first one as a dx,
"RTN","IBCEF2",150,0)
 . ;     but as a special E-code
"RTN","IBCEF2",151,0)
 . I $G(IBXSAVE("DX-E"))="",$E($G(DX))="E" S IBXSAVE("DX-E")=DX,DX=""
"RTN","IBCEF2",152,0)
 I 'IBINS,CT>8 S ^TMP("IBXSAVE",$J,"DX",IBXIEN)=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN))+1,^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(+^TMP("IBXSAVE",$J,"DX",IBXIEN)),U,2))=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN)) S DX="" Q
"RTN","IBCEF2",153,0)
 I CT'="",DX'="" S LN=LN+1 D ID(LN,VAL) S ^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(LN),U,2))=LN,^TMP("IBXSAVE",$J,"DX",IBXIEN)=CT,CT=CT+1 Q
"RTN","IBCEF2",154,0)
 Q
"RTN","IBCEF2",155,0)
 ;
"RTN","IBCEF2",156,0)
M(CT) ; Calculate multi-valued field for 837 extract
"RTN","IBCEF2",157,0)
 ; CT = passed by reference/the record ID counter
"RTN","IBCEF2",158,0)
 S CT=CT+1
"RTN","IBCEF2",159,0)
 Q $E(CT#12+$S(CT#12:0,1:12)_" ",1,2)
"RTN","IBCEF2",160,0)
 ;
"RTN","IBCEF2",161,0)
SVITM(IBA,LINE) ; Saves the linked items from the bill data extract into
"RTN","IBCEF2",162,0)
 ; an array the formatter will use to link Rxs and prosthetics
"RTN","IBCEF2",163,0)
 ; to an SV1 or SV2 line item, if possible.  Kills off IBA array entries
"RTN","IBCEF2",164,0)
 ; after they are 'moved'
"RTN","IBCEF2",165,0)
 ; IBA = array that contains the data to be saved
"RTN","IBCEF2",166,0)
 ;   subscripts are (line #,item type,item pointer)=ct
"RTN","IBCEF2",167,0)
 N Z0,Z1
"RTN","IBCEF2",168,0)
 S Z0="" F  S Z0=$O(IBA("OUTPT",LINE,Z0)) Q:Z0=""  I Z0?1N.N  S Z1="" F  S Z1=$O(IBA("OUTPT",LINE,Z0,Z1)) Q:Z1=""  S ^TMP($J,"IBITEM",Z0,Z1,LINE)=IBA("OUTPT",LINE,Z0,Z1) K IBA("OUTPT",LINE,Z0,Z1)
"RTN","IBCEF2",169,0)
 Q
"RTN","IBCEF2",170,0)
 ;
"RTN","IBCEF2",171,0)
LINK(IBTYP,IBDATA) ; Link the item with a service line, if possible
"RTN","IBCEF2",172,0)
 ; IBTYP = the code for the type of item
"RTN","IBCEF2",173,0)
 ;         returned incremented if no link is made
"RTN","IBCEF2",174,0)
 ; IBDATA = the extracted data string that identifies the item. 
"RTN","IBCEF2",175,0)
 ; Returns the line to link to or null if no link
"RTN","IBCEF2",176,0)
 N IBLN,IBKEY,Z
"RTN","IBCEF2",177,0)
 S IBLN=""
"RTN","IBCEF2",178,0)
 S IBKEY=$S(IBTYP=3:$P(IBDATA,U,9),IBTYP=5:$P(IBDATA,U,4),1:"") Q:IBKEY=""
"RTN","IBCEF2",179,0)
 I $D(^TMP($J,"IBITEM",IBTYP,IBKEY)) D  G:IBLN LINKQ
"RTN","IBCEF2",180,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",181,0)
 I $D(^TMP($J,"IBITEM",IBTYP,0)) S IBKEY=0 D
"RTN","IBCEF2",182,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",183,0)
LINKQ Q IBLN
"RTN","IBCEF2",184,0)
 ;
"RTN","IBCEF2",185,0)
COID(IBIFN) ; Claim office ID - moved for space
"RTN","IBCEF2",186,0)
 Q $$COID^IBCEF21(IBIFN)
"RTN","IBCEF2",187,0)
 ;
"RTN","IBCEF2",188,0)
PPOL(IBIFN,COB) ; return IFN of patient policy on a bill defined by COB (fields 399,112-114)
"RTN","IBCEF2",189,0)
 N X,Y,PPOL S PPOL=""
"RTN","IBCEF2",190,0)
 I +$G(IBIFN) S X=$G(^DGCR(399,+IBIFN,"M")) I +$G(COB),COB<4 S Y=COB+11,PPOL=$P(X,U,Y)
"RTN","IBCEF2",191,0)
 Q PPOL
"RTN","IBCEF2",192,0)
 ;
"RTN","IBCEF2",193,0)
LADJ(SUB,LINE,SEQ1,GRP,IBXSAVE,PIECE) ; Extract line level adjustments
"RTN","IBCEF2",194,0)
 ; SUB     = 1st subscript in IBXSAVE array to use
"RTN","IBCEF2",195,0)
 ; LINE    = 2nd subscript
"RTN","IBCEF2",196,0)
 ; SEQ1    = 4th subscript
"RTN","IBCEF2",197,0)
 ; GRP     = 5th subscript
"RTN","IBCEF2",198,0)
 ; IBXSAVE = array that has the data for COB line level adjustments
"RTN","IBCEF2",199,0)
 ; PIECE   = # of the piece on the 0-node of the line level
"RTN","IBCEF2",200,0)
 ;           adjustment reason to be extracted
"RTN","IBCEF2",201,0)
 ;
"RTN","IBCEF2",202,0)
 N A,B
"RTN","IBCEF2",203,0)
 S (A,B)=0
"RTN","IBCEF2",204,0)
 F  S A=$O(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A)) Q:'A  D
"RTN","IBCEF2",205,0)
 . S B=B+1,IBXDATA(B)=$P(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A),U,PIECE)
"RTN","IBCEF2",206,0)
 Q
"RTN","IBCEF2",207,0)
 ;
"RTN","IBCEF2",208,0)
ESGHPST(IBIFN,COB) ; return insureds employ status if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",209,0)
 Q $$ESGHPST^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",210,0)
 ;
"RTN","IBCEF2",211,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",212,0)
 Q $$ESGHPNL^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",213,0)
 ;
"RTN","IBCEF2",214,0)
AMTOUT(A,B,C,IBXSAVE) ; format output amount
"RTN","IBCEF2",215,0)
 ;
"RTN","IBCEF2",216,0)
 N Z,K,IBZ,IBARR K IBXDATA S (IBZ,K)=0,IBARR="IBXSAVE("""_A_""")" F  S IBZ=$O(@IBARR@(IBZ)) Q:'IBZ  S K=K+1,Z=0 F  S Z=$O(@IBARR@(IBZ,Z)) Q:'Z  I $P($G(@IBARR@(IBZ,Z,B)),U,C) S IBXDATA(K)=$$DOLLAR^IBCEFG1($G(IBXDATA(K))+$P(@IBARR@(IBZ,Z,B),U,C))
"RTN","IBCEF2",217,0)
 Q
"RTN","IBCEF21")
0^29^B11282906
"RTN","IBCEF21",1,0)
IBCEF21 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS CONTINUED ;06-FEB-96
"RTN","IBCEF21",2,0)
 ;;2.0;INTEGRATED BILLING;**51,296**;21-MAR-94
"RTN","IBCEF21",3,0)
 ;
"RTN","IBCEF21",4,0)
COID(IBIFN) ; Claim office ID
"RTN","IBCEF21",5,0)
 N IBCOID,IBCOID1,IBIN
"RTN","IBCEF21",6,0)
 S IBIN=$$CURR^IBCEF2(IBIFN),IBCOID1="",IBCOID=$P($$ADDRESS^IBCNSC0(IBIN,.11,5),U,11)
"RTN","IBCEF21",7,0)
 ;
"RTN","IBCEF21",8,0)
 I IBIN D
"RTN","IBCEF21",9,0)
 . I $D(^IBA(364.2,"C",IBIFN)) S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.18,5),U,11) Q  ;Rx
"RTN","IBCEF21",10,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.12,5),U,11) Q  ;Inpt
"RTN","IBCEF21",11,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)'<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.16,5),U,11) Q  ;Outpt
"RTN","IBCEF21",12,0)
 ;
"RTN","IBCEF21",13,0)
 Q $S(IBCOID1'="":IBCOID1,1:IBCOID)
"RTN","IBCEF21",14,0)
 ;
"RTN","IBCEF21",15,0)
ESGHPST(IBIFN,COB) ; return insureds employment status if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",16,0)
 ; ESGHP FLAG (2.312,2.1) ^ the employment status (2.312,2.11)
"RTN","IBCEF21",17,0)
 ;
"RTN","IBCEF21",18,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",19,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",20,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,11)
"RTN","IBCEF21",21,0)
 Q Y
"RTN","IBCEF21",22,0)
 ;
"RTN","IBCEF21",23,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",24,0)
 ; ESGHP FLAG (2.312,2.1) ^ employer name (2.312,2.015) ^ employer city (2.312,2.05) 
"RTN","IBCEF21",25,0)
 ;                        ^ employer state abbr (2.312,2.06) ^ employer state ifn  (2.312,2.06)
"RTN","IBCEF21",26,0)
 ;
"RTN","IBCEF21",27,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",28,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",29,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,9)_U_$P(X,U,5)_U_$P($G(^DIC(5,+$P(X,U,6),0)),U,2)_U_$P(X,U,6)
"RTN","IBCEF21",30,0)
 Q Y
"RTN","IBCEF21",31,0)
 ;
"RTN","IBCEF21",32,0)
REMARKS(IBIFN) ; Compile array of bill remarks
"RTN","IBCEF21",33,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",34,0)
 N Z,Z0,Z1,IBARRAY,IBSM
"RTN","IBCEF21",35,0)
 S Z=0
"RTN","IBCEF21",36,0)
 ;S:$P($G(^DGCR(399,IBIFN,"U1")),U,2) Z=Z+1,Z0=$P(^("U1"),U,2),IBXDATA(Z)="OFFSET AMOUNT: "_"$"_+$P(Z0,".")_"."_$E($P(Z0,".",2)_"00",1,2)
"RTN","IBCEF21",37,0)
 S:$P($G(^DGCR(399,IBIFN,"U1")),U,8)'="" Z=Z+1,IBXDATA(Z)=$P(^("U1"),U,8) ;Bill comment on bill
"RTN","IBCEF21",38,0)
 S Z0=$G(^DGCR(399,IBIFN,0)),Z1=$G(^DGCR(399.3,+$P(Z0,U,7),0))
"RTN","IBCEF21",39,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF21",40,0)
 I $P($G(IBARRAY),U,2) D  ;Prosthetics
"RTN","IBCEF21",41,0)
 . S Z0=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1,IBXDATA(Z)="Prosthetic: "_$E($P($$PIN^IBCSC5B(Z1),U,2),1,39)_" "_$E(Z0,4,5)_"/"_$E(Z0,6,7)_"/"_$E(Z0,1,2)
"RTN","IBCEF21",42,0)
 Q
"RTN","IBCEF21",43,0)
 ;
"RTN","IBCEF21",44,0)
CREM(IBIFN) ; Compile array of bill remarks common to every bill
"RTN","IBCEF21",45,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",46,0)
 N Z
"RTN","IBCEF21",47,0)
 S Z=0
"RTN","IBCEF21",48,0)
 S:$P($G(^IBE(350.9,1,1)),U,4)'="" Z=Z+1,IBXDATA(Z)=$P(^(1),U,4) ;Site specific 'every bill' comment
"RTN","IBCEF21",49,0)
 Q
"RTN","IBCEF21",50,0)
 ;
"RTN","IBCEF21",51,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF21",52,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",53,0)
 ; NOOUTCK = flag that will:
"RTN","IBCEF21",54,0)
 ;          (1) no check for inpt episode overlap for outpt
"RTN","IBCEF21",55,0)
 ;          (0 or null) performs check for inpt episode overlap for outpt
"RTN","IBCEF21",56,0)
 ;                                      
"RTN","IBCEF21",57,0)
 ; Returns IBXDATA = fileman date format
"RTN","IBCEF21",58,0)
 N Z,Z0,Z1
"RTN","IBCEF21",59,0)
 S Z=$G(^DGCR(399,IBIFN,0)),Z1=$P($G(^("U")),U,20),Z0=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF21",60,0)
 S IBXDATA=$S(Z0&$P(Z,U,8):$P($G(^DGPT(+$P(Z,U,8),0)),U,2),1:"")
"RTN","IBCEF21",61,0)
 S:'IBXDATA IBXDATA=$P(Z,U,3)_$S(Z0&(Z1<25):"."_$E("0",$L(Z1))_Z1,1:"")
"RTN","IBCEF21",62,0)
 ; Check to see if outpt episode (date in event date) overlaps inpt
"RTN","IBCEF21",63,0)
 ;  episode - use admit date if it does
"RTN","IBCEF21",64,0)
 I 'Z0,IBXDATA,'$G(NOOUTCK) D
"RTN","IBCEF21",65,0)
 . N VAINDT,VAIN,DFN
"RTN","IBCEF21",66,0)
 . S VAINDT=IBXDATA,DFN=$P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBCEF21",67,0)
 . D INP^VADPT S IBXDATA=+VAIN(7) S:'IBXDATA IBXDATA=""
"RTN","IBCEF21",68,0)
 I 'IBXDATA,'Z0 S IBXDATA=$$SERVDT^IBCEF(IBIFN,,2)
"RTN","IBCEF21",69,0)
 Q
"RTN","IBCEF21",70,0)
 ;
"RTN","IBCEF21",71,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF21",72,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",73,0)
 N Z,Z0
"RTN","IBCEF21",74,0)
 S Z=$$INPAT^IBCEF(IBIFN,1),Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF21",75,0)
 I Z S IBXDATA=+$G(^DGPT(+$P(Z0,U,8),70)) S:'IBXDATA IBXDATA=$P(Z0,U,16)
"RTN","IBCEF21",76,0)
 I 'Z N VAINDT,VAIN,DFN S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2) D INP^VADPT I VAIN(1) S IBXDATA=+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF21",77,0)
 Q
"RTN","IBCEF21",78,0)
 ;
"RTN","IBCEF31")
0^28^B7680151
"RTN","IBCEF31",1,0)
IBCEF31 ;ALB/ESG - FORMATTER SPECIFIC BILL FLD FUNCTIONS - CONT ;14-NOV-03
"RTN","IBCEF31",2,0)
 ;;2.0;INTEGRATED BILLING;**155,296**;21-MAR-94
"RTN","IBCEF31",3,0)
 ;
"RTN","IBCEF31",4,0)
 Q
"RTN","IBCEF31",5,0)
 ;
"RTN","IBCEF31",6,0)
ALLTYP(IBIFN) ; returns codes to translate to ALL ins types on a bill
"RTN","IBCEF31",7,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",8,0)
 N IBX,Z
"RTN","IBCEF31",9,0)
 F Z=1:1:3 S $P(IBX,U,Z)=$$INSTYP(IBIFN,Z)
"RTN","IBCEF31",10,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",11,0)
 Q IBX
"RTN","IBCEF31",12,0)
 ;
"RTN","IBCEF31",13,0)
INSTYP(IBIFN,SEQ) ; Returns insurance type code for an ins on a bill
"RTN","IBCEF31",14,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",15,0)
 ; SEQ = sequence (1,2,3) of insurance wanted - prim, second, tert
"RTN","IBCEF31",16,0)
 ;       Default is current insurance co
"RTN","IBCEF31",17,0)
 ;
"RTN","IBCEF31",18,0)
 N IBA,Z
"RTN","IBCEF31",19,0)
 ;
"RTN","IBCEF31",20,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",21,0)
 S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ))
"RTN","IBCEF31",22,0)
 ;Codes 1:HMO;2:COMMERCIAL;3:MEDICARE;4:MEDICAID;5:GROUP POLICY;9:OTHER
"RTN","IBCEF31",23,0)
 I Z D
"RTN","IBCEF31",24,0)
 . S IBA=$P($G(^DIC(36,Z,3)),U,9)
"RTN","IBCEF31",25,0)
 . I $$MCRWNR^IBEFUNC(Z) S IBA=3   ; force Medicare (WNR) definition to be correct
"RTN","IBCEF31",26,0)
 . I IBA="" S IBA=5 ;Default is group policy - 5 if blank
"RTN","IBCEF31",27,0)
 ;
"RTN","IBCEF31",28,0)
 Q $G(IBA)
"RTN","IBCEF31",29,0)
 ;
"RTN","IBCEF31",30,0)
POLTYP(IBIFN,IBSEQ) ; Returns ins electronic policy type code for one
"RTN","IBCEF31",31,0)
 ;   ins policy on a bill
"RTN","IBCEF31",32,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",33,0)
 ; IBSEQ = sequence (1,2,3) of ins policy wanted - prim, second, tert
"RTN","IBCEF31",34,0)
 ;       Default is current insurance co
"RTN","IBCEF31",35,0)
 ;
"RTN","IBCEF31",36,0)
 N IBPLAN,IBPLTYP
"RTN","IBCEF31",37,0)
 ;
"RTN","IBCEF31",38,0)
 I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",39,0)
 S IBPLAN=$G(^IBA(355.3,+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U,18),0))
"RTN","IBCEF31",40,0)
 S IBPLTYP=$P(IBPLAN,U,15)
"RTN","IBCEF31",41,0)
 ;
"RTN","IBCEF31",42,0)
 ; esg - 06/30/05 - IB*2.0*296 - Force Medicare (WNR) to be correct
"RTN","IBCEF31",43,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=2 S IBPLTYP="MB"   ; hcfa-1500 --> Medicare Part B
"RTN","IBCEF31",44,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=3 S IBPLTYP="MA"   ; ub92 -------> Medicare Part A
"RTN","IBCEF31",45,0)
 ;
"RTN","IBCEF31",46,0)
 I IBPLTYP="" S IBPLTYP="CI" ;Default is commercial - 'CI'
"RTN","IBCEF31",47,0)
 I IBPLTYP="MX" D
"RTN","IBCEF31",48,0)
 . I $P(IBPLAN,U,14)'="","AB"[$P(IBPLAN,U,14) S IBPLTYP="M"_$P(IBPLAN,U,14) Q
"RTN","IBCEF31",49,0)
 . S IBPLTYP="CI"
"RTN","IBCEF31",50,0)
 Q $G(IBPLTYP)
"RTN","IBCEF31",51,0)
 ;
"RTN","IBCEF31",52,0)
ALLPTYP(IBIFN) ; returns insurance policy type codes for ALL ins on a bill
"RTN","IBCEF31",53,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",54,0)
 N IBX,Z S IBX=""
"RTN","IBCEF31",55,0)
 F Z=1:1:3 I $D(^DGCR(399,IBIFN,"I"_Z)) S $P(IBX,U,Z)=$$POLTYP(IBIFN,Z)
"RTN","IBCEF31",56,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",57,0)
 Q IBX
"RTN","IBCEF31",58,0)
 ;
"RTN","IBCEF31",59,0)
PGDX(DXCNT,IBX0,IBXDA,IBXLN,IBXCOL,IBXSIZE,IBXSAVE) ; Subroutine - Checks for Diagnosis Codes (Dx) beyond 
"RTN","IBCEF31",60,0)
 ; the first four, that relate to the current Dx position passed in DXCNT.
"RTN","IBCEF31",61,0)
 ; This subroutine stores the Diagnosis Codes in output global using display parameters (IBXLN,IBXCOL)
"RTN","IBCEF31",62,0)
 ; If DXCNT is 1, check for Dx's 5,9,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",63,0)
 ; If DXCNT is 2, check for Dx's 6,10,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",64,0)
 ; If DXCNT is 3, check for Dx's 7,11,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",65,0)
 ; If DXCNT is 4, check for Dx's 8,12,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",66,0)
 ;
"RTN","IBCEF31",67,0)
 ; Input: DXCNT= position of current Dx (from 1 to 4)
"RTN","IBCEF31",68,0)
 ;        IBX0= zero-level of file 364.7 of current Dx
"RTN","IBCEF31",69,0)
 ;        IBXDA= ien# of file 364.6 of current Dx
"RTN","IBCEF31",70,0)
 ;        IBXLN IBXCOL= line# & Column# of current Dx
"RTN","IBCEF31",71,0)
 ;        IBXSIZE= size counter
"RTN","IBCEF31",72,0)
 ;        IBXSAVE("DX")= local array with all Dx's on current bill
"RTN","IBCEF31",73,0)
 ;
"RTN","IBCEF31",74,0)
 N JUMP,IBPG,VAL
"RTN","IBCEF31",75,0)
 F JUMP=DXCNT+4:4 Q:'$D(IBXSAVE("DX",JUMP))  D  ;
"RTN","IBCEF31",76,0)
 . ;calculate page number where Dx number JUMP will print
"RTN","IBCEF31",77,0)
 . S IBPG=JUMP\4+(JUMP#4>0)
"RTN","IBCEF31",78,0)
 . S VAL=$P($G(^ICD9(+IBXSAVE("DX",JUMP),0)),U)   ; resolve Dx pointer
"RTN","IBCEF31",79,0)
 . S VAL=$$FORMAT^IBCEF3(VAL,$G(IBX0),$G(IBXDA))  ;format Dx value
"RTN","IBCEF31",80,0)
 . D SETGBL^IBCEFG(IBPG,IBXLN,IBXCOL,VAL,.IBXSIZE) ;store in output global
"RTN","IBCEF31",81,0)
 Q  ;PGDX
"RTN","IBCEF31",82,0)
 ;
"RTN","IBCEF4")
0^5^B27604330
"RTN","IBCEF4",1,0)
IBCEF4 ;ALB/TMP - MRA/EDI ACTIVATED UTILITIES ;06-FEB-96
"RTN","IBCEF4",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232,155,296**;21-MAR-94
"RTN","IBCEF4",3,0)
 ;
"RTN","IBCEF4",4,0)
EDIACTV(IBEDIMRA) ; Returns 0 if EDI or MRA is not active, 
"RTN","IBCEF4",5,0)
 ; otherwise, returns 1
"RTN","IBCEF4",6,0)
 ; IBEDIMRA : 1= checking if EDI is active, 2= checking if MRA is active
"RTN","IBCEF4",7,0)
 N IBEDI
"RTN","IBCEF4",8,0)
 S IBEDI=$P($G(^IBE(350.9,1,8)),U,10)
"RTN","IBCEF4",9,0)
 Q $S('IBEDI:0,IBEDI=3:1,1:IBEDI=IBEDIMRA)
"RTN","IBCEF4",10,0)
 ;
"RTN","IBCEF4",11,0)
RATEOK(IBIFN) ; Returns 1 if rate type of bill IBIFN is transmittable
"RTN","IBCEF4",12,0)
 Q +$P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U,10)
"RTN","IBCEF4",13,0)
 ;
"RTN","IBCEF4",14,0)
INSOK(INS) ; Determine EDI activation status of insurance co
"RTN","IBCEF4",15,0)
 Q +$G(^DIC(36,INS,3))  ;1 = TEST, 2 = LIVE, 0 = NOT ACTIVE FOR EDI
"RTN","IBCEF4",16,0)
 ;
"RTN","IBCEF4",17,0)
BSTATX(IBIFN) ; Returns internal value of bill's latest transmission status
"RTN","IBCEF4",18,0)
 N IBDA
"RTN","IBCEF4",19,0)
 Q $P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,3)
"RTN","IBCEF4",20,0)
 ;
"RTN","IBCEF4",21,0)
LAST364(IBIFN) ; Determine ien of latest transmit bill record for a bill
"RTN","IBCEF4",22,0)
 Q +$O(^IBA(364,"ABDT",IBIFN,+$O(^IBA(364,"ABDT",IBIFN,""),-1),""),-1)
"RTN","IBCEF4",23,0)
 ;
"RTN","IBCEF4",24,0)
TXMT(IBIFN,IBWHY,IBNEW) ; Determine if bill # IBIFN is 'transmittable'
"RTN","IBCEF4",25,0)
 ; IBNEW = flag is 1 if new entry - don't check for entry in file 364
"RTN","IBCEF4",26,0)
 ; Function returns:
"RTN","IBCEF4",27,0)
 ;        0 if not transmittable
"RTN","IBCEF4",28,0)
 ;        if transmittable, the entire node 3 of the insurance company
"RTN","IBCEF4",29,0)
 ;  and, if passed by reference IBWHY = reason not transmittable
"RTN","IBCEF4",30,0)
 ;                    1 if local print
"RTN","IBCEF4",31,0)
 ;                    2 if EDI/MRA not active
"RTN","IBCEF4",32,0)
 ;                    3 if rate type not transmittable
"RTN","IBCEF4",33,0)
 ;                    4 if no transmit for insurance co
"RTN","IBCEF4",34,0)
 ;                    5 if failed txmn rules
"RTN","IBCEF4",35,0)
 ;                      and IBWHY(0) = ien of rule failed
"RTN","IBCEF4",36,0)
 ;                    6 if Rx with missing/invalid NDC format
"RTN","IBCEF4",37,0)
 ;
"RTN","IBCEF4",38,0)
 N IB,IB0,IBOK,IBCOB,IBMCR,X1
"RTN","IBCEF4",39,0)
 S IBOK=1,IB=IBIFN,IBWHY=""
"RTN","IBCEF4",40,0)
 ;
"RTN","IBCEF4",41,0)
 S IBCOB=$$COBN^IBCEF(IB),IB(.07)=+$G(^DGCR(399,IB,"I"_IBCOB))
"RTN","IBCEF4",42,0)
 S IBMCR=$$MCRWNR^IBEFUNC(IB(.07))
"RTN","IBCEF4",43,0)
 ; Does bill have force local print flag set?
"RTN","IBCEF4",44,0)
 I 'IBMCR D  G:IBWHY TXMTQ  ; MCR WNR not curr ins
"RTN","IBCEF4",45,0)
 . I $S($$MRASEC(IBIFN):$P($G(^DGCR(399,IBIFN,"TX")),U,9)=1,1:$P($G(^DGCR(399,IBIFN,"TX")),U,8)=1) S IBOK=0,IBWHY=1
"RTN","IBCEF4",46,0)
 I '$G(IBNEW),'$O(^IBA(364,"B",IBIFN,0)),$P($G(^DGCR(399,IBIFN,0)),U,13)>2,'$$RETN^PRCAFN(IBIFN) S IBOK=0 G TXMTQ ; Not recognized as transmittable when it was authorized
"RTN","IBCEF4",47,0)
 I $O(^IBA(364,"B",IBIFN,0)),$$INSOK(IB(.07)),$$BSTATX(IBIFN)'="X" G TXMTQ ;Already determined to be transmittable - entry exists for bill in transmit bill file
"RTN","IBCEF4",48,0)
 S IB(.03)=$S('IBMCR:1,1:2) ; EDI(1) or MRA(2)
"RTN","IBCEF4",49,0)
 S IB(.04)=$S('$$INPAT^IBCEF(IB,1):1,1:2) ;Outpt(1) or Inpt(2)
"RTN","IBCEF4",50,0)
 S IB(.05)=$S($$FT^IBCEF(IB)=3:1,1:2) ;Inst(1) or Prof(2)
"RTN","IBCEF4",51,0)
 ; Execute unmodifiable, general edits
"RTN","IBCEF4",52,0)
 S X1=$$EDIACTV(IB(.03))
"RTN","IBCEF4",53,0)
 I 'X1 S IBWHY=2
"RTN","IBCEF4",54,0)
 I 'IBWHY S X1=$$RATEOK(IBIFN) S:'X1 IBWHY=3
"RTN","IBCEF4",55,0)
 I 'IBWHY S X1=$$INSOK(+IB(.07)) S:'X1 IBWHY=4
"RTN","IBCEF4",56,0)
 I 'IBWHY,$$ISRX^IBCEF1(IBIFN) D  ;S:'X1 IBWHY=6
"RTN","IBCEF4",57,0)
 . ; Check for Rxs and NDC # format valid (5-4-2)
"RTN","IBCEF4",58,0)
 . ;IF THIS IS A UB92 DO NOT SEND ELECTRONIC
"RTN","IBCEF4",59,0)
 . I $$FT^IBCEF(IBIFN)=3 S IBWHY=1
"RTN","IBCEF4",60,0)
 . ;
"RTN","IBCEF4",61,0)
 . Q  ;;CHECK REMOVAL SO NON NDC FORMAT NUMBERS WILL GO
"RTN","IBCEF4",62,0)
 . N Z,Z0,Z00
"RTN","IBCEF4",63,0)
 . S Z="" F  S Z=$O(^IBA(362.4,"AIFN"_IBIFN,Z)) Q:Z=""!'X1  D  Q:'X1
"RTN","IBCEF4",64,0)
 .. S Z0=0 F  S Z0=$O(^IBA(362.4,"AIFN"_IBIFN,Z,Z0)) Q:'Z0  D  Q:'X1
"RTN","IBCEF4",65,0)
 ... S Z00=$G(^IBA(362.4,Z0,0))
"RTN","IBCEF4",66,0)
 ... Q:$S($P(Z00,U,8)="":1,1:$L($P(Z00,U,8))=11)
"RTN","IBCEF4",67,0)
 ... I $P(Z00,U,9)'=4 S X1=0
"RTN","IBCEF4",68,0)
 ; Only continue if general edits are passed
"RTN","IBCEF4",69,0)
 I IBWHY S IBOK=0 G TXMTQ
"RTN","IBCEF4",70,0)
 S IBOK=$$EDIT(IBIFN,.IB,.IBWHY)
"RTN","IBCEF4",71,0)
 G:'IBOK TXMTQ
"RTN","IBCEF4",72,0)
 ;
"RTN","IBCEF4",73,0)
TXMTQ ;
"RTN","IBCEF4",74,0)
 I IBOK S IBOK=$G(^DIC(36,+IB(.07),3))
"RTN","IBCEF4",75,0)
 Q IBOK
"RTN","IBCEF4",76,0)
 ;
"RTN","IBCEF4",77,0)
MRASEC(IBIFN) ; Returns 1 if current bill is secondary to MCR WNR
"RTN","IBCEF4",78,0)
 N IBSEQ,IB,Z
"RTN","IBCEF4",79,0)
 S IB=0
"RTN","IBCEF4",80,0)
 ; Chk if MCR WNR is prev insurer with MRA on file
"RTN","IBCEF4",81,0)
 S IBSEQ=$$COBN^IBCEF(IBIFN)-1
"RTN","IBCEF4",82,0)
 S Z=$$MCRONBIL^IBEFUNC(IBIFN,IBSEQ) I +Z=1,$P(Z,U,2)=1,$$CHK^IBCEMU1(IBIFN) S IB=1
"RTN","IBCEF4",83,0)
 Q IB
"RTN","IBCEF4",84,0)
 ;
"RTN","IBCEF4",85,0)
EDIT(IBIFN,IB,IBWHY) ; Find, execute edits applying to bill to see if transmittable
"RTN","IBCEF4",86,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",87,0)
 ; IB = array containing necessary data for xref search from bill
"RTN","IBCEF4",88,0)
 ;      subscripted by field # in file 364.4
"RTN","IBCEF4",89,0)
 ;
"RTN","IBCEF4",90,0)
 ;  Matrix entries:
"RTN","IBCEF4",91,0)
 ;    IB(.03): 1=EDI specific, 2=MRA specific
"RTN","IBCEF4",92,0)
 ;    IB(.04): 1=Outpatient or 2=inpatient only (currently defaults to 3)
"RTN","IBCEF4",93,0)
 ;    IB(.05): 1=Only institutional or 2=only professional
"RTN","IBCEF4",94,0)
 ;          X: Anything valid
"RTN","IBCEF4",95,0)
 ;
"RTN","IBCEF4",96,0)
 ;                 MRA-EDI    IN-OUT     INST-PROF
"RTN","IBCEF4",97,0)
 ;  Level          -------    ------     ---------
"RTN","IBCEF4",98,0)
 ;    1               X          X           X
"RTN","IBCEF4",99,0)
 ;    2               X          X        IB(.05)
"RTN","IBCEF4",100,0)
 ;    3               X       IB(.04)        X
"RTN","IBCEF4",101,0)
 ;    4               X       IB(.04)     IB(.05)
"RTN","IBCEF4",102,0)
 ;    5            IB(.03)       X           X
"RTN","IBCEF4",103,0)
 ;    6            IB(.03)       X        IB(.05) 
"RTN","IBCEF4",104,0)
 ;    7            IB(.03)    IB(.04)        X
"RTN","IBCEF4",105,0)
 ;    8            IB(.03)    IB(.04)     IB(.05)
"RTN","IBCEF4",106,0)
 ;
"RTN","IBCEF4",107,0)
 N IB0,IB1,IB2,IB3,IB4,IBDA,IBFT,IBPASS,IBSEQ,IBT,IBNOCK
"RTN","IBCEF4",108,0)
 I '$G(IB(.03)) S IBPASS=0 G EDITQ
"RTN","IBCEF4",109,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEF4",110,0)
 ;
"RTN","IBCEF4",111,0)
 S IBPASS=1
"RTN","IBCEF4",112,0)
 F IBSEQ=1:1:8 D  Q:'IBPASS  ; Loop thru levels in matrix
"RTN","IBCEF4",113,0)
 . F IB1=1:1:3 Q:'IBPASS  F IB2=1:1:3 Q:'IBPASS  F IB3=1:1:3 Q:'IBPASS  D
"RTN","IBCEF4",114,0)
 .. S IB4=0 F  S IB4=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4)) Q:'IB4  I $O(^(IB4,0)) D  Q:'IBPASS
"RTN","IBCEF4",115,0)
 ... S IBDA=0
"RTN","IBCEF4",116,0)
 ... F   S IBDA=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4,IBDA)) Q:'IBDA  S IB0=$G(^IBE(364.4,IBDA,0)) I IB0'="",'$D(IBNOCK(IBDA)) D  Q:'IBPASS
"RTN","IBCEF4",117,0)
 .... I $P(IB0,U,2)>DT S IBNOCK(IBDA)="" Q  ; Not activated yet
"RTN","IBCEF4",118,0)
 .... I $P(IB0,U,6),$P(IB0,U,6)'>DT  S IBNOCK(IBDA)="" Q  ; Inactive
"RTN","IBCEF4",119,0)
 .... I $P(IB0,U,11),IB3'=3,$S(IBFT=3:IB3'=1,IBFT=2:IB3'=2,1:0) S IBNOCK(IBDA)="" Q  ; Form type not included - not used for form type rule (0)
"RTN","IBCEF4",120,0)
 .... I IB4=1,'$D(^IBE(364.4,IBDA,3,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins not included for rule
"RTN","IBCEF4",121,0)
 .... I IB4=2,$D(^IBE(364.4,IBDA,2,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins is excluded from rule
"RTN","IBCEF4",122,0)
 .... S IBT=$G(^IBE(364.4,IBDA,1))
"RTN","IBCEF4",123,0)
 .... ; Code can assume IBIFN, IBDA and IB(.03 thru .05 and .07) exist
"RTN","IBCEF4",124,0)
 .... I IBT'="" X IBT I '$T S IBPASS=0,IBWHY(0)=IBDA,IBWHY=5
"RTN","IBCEF4",125,0)
EDITQ Q IBPASS
"RTN","IBCEF4",126,0)
 ;
"RTN","IBCEF4",127,0)
STATUS(IBIFN) ; Function returns whether or not bill currently has a status
"RTN","IBCEF4",128,0)
 ;  message or EOB message not yet fully reviewed -
"RTN","IBCEF4",129,0)
 ; (only for transmittable bills)
"RTN","IBCEF4",130,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",131,0)
 ; Returns:
"RTN","IBCEF4",132,0)
 ; 0 = None found
"RTN","IBCEF4",133,0)
 ; If found, returns a pieced string as follows:
"RTN","IBCEF4",134,0)
 ;
"RTN","IBCEF4",135,0)
 ;   [1] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",136,0)
 ;       entry in file 361 with an unreviewed status message
"RTN","IBCEF4",137,0)
 ;   [2] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",138,0)
 ;       entry in file 361.1 with an unreviewed EOB
"RTN","IBCEF4",139,0)
 ;
"RTN","IBCEF4",140,0)
 N IB,Z,Z0
"RTN","IBCEF4",141,0)
 S IB=""
"RTN","IBCEF4",142,0)
 S Z="" F  S Z=$O(^IBM(361,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361,Z,0)),U,9)<2,$P(^(0),U,11) S $P(IB,U)=$P(^(0),U,11) Q
"RTN","IBCEF4",143,0)
 ;
"RTN","IBCEF4",144,0)
 S Z="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,16)<2,$P(^(0),U,19) S $P(IB,U,2)=$P(^(0),U,19) Q
"RTN","IBCEF4",145,0)
 ;
"RTN","IBCEF4",146,0)
 Q IB
"RTN","IBCEF4",147,0)
 ;
"RTN","IBCEF4",148,0)
TEST(IBIFN) ; Returns 1 if bill IBIFN is a transmission test bill, 0 if not
"RTN","IBCEF4",149,0)
 Q +$S($G(^TMP("IBEDI_TEST_BATCH",$J)):1,1:+$P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,7))
"RTN","IBCEF4",150,0)
 ;
"RTN","IBCEM01")
0^10^B15641446
"RTN","IBCEM01",1,0)
IBCEM01 ;ALB/TMP - BATCH BILLS LIST TEMPLATE ;11-SEP-96
"RTN","IBCEM01",2,0)
 ;;2.0;INTEGRATED BILLING;**137,296**;21-MAR-94
"RTN","IBCEM01",3,0)
 ;
"RTN","IBCEM01",4,0)
INIT ; -- set up inital variables
"RTN","IBCEM01",5,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCEM01",6,0)
 D BLD
"RTN","IBCEM01",7,0)
 Q
"RTN","IBCEM01",8,0)
 ;
"RTN","IBCEM01",9,0)
BLD ; -- build list of bills for batch entry # IBBDA
"RTN","IBCEM01",10,0)
 Q:'$G(IBBDA)
"RTN","IBCEM01",11,0)
 D REBLD
"RTN","IBCEM01",12,0)
 Q
"RTN","IBCEM01",13,0)
 ;
"RTN","IBCEM01",14,0)
REBLD ; Set up formatted global
"RTN","IBCEM01",15,0)
 ;
"RTN","IBCEM01",16,0)
 N IB,IBCNT,X,IB0,IB00,IBX,IBIFN,IBSTAT,IBSTAT1,IBZ
"RTN","IBCEM01",17,0)
 K ^TMP("IBCEM-BABI",$J),^TMP("IBCEM-BABIDX",$J)
"RTN","IBCEM01",18,0)
 S (VALMCNT,IBCNT)=0,IB=""
"RTN","IBCEM01",19,0)
 F  S IB=$O(^IBA(364,"ABABI",IBBDA,IB)) Q:IB=""  S IBZ=0 F  S IBZ=$O(^IBA(364,"ABABI",IBBDA,IB,IBZ)) Q:'IBZ  S IB0=$G(^IBA(364,IBZ,0)),IB00=$G(^DGCR(399,+IB0,0)) D
"RTN","IBCEM01",20,0)
 . S IBIFN=+$P(IB00,U,2),IBSTAT=$P(IB0,U,3),IBSTAT1=$P(IB00,U,13)
"RTN","IBCEM01",21,0)
 . S IB("S")=$G(^DGCR(399,+IB0,"U"))
"RTN","IBCEM01",22,0)
 . ; -- add to list
"RTN","IBCEM01",23,0)
 . S IBCNT=IBCNT+1,X="" W:'(IBCNT#25) "."
"RTN","IBCEM01",24,0)
 . S X=$$SETFLD^VALM1(IBCNT,X,"NUMBER")
"RTN","IBCEM01",25,0)
 . S X=$$SETFLD^VALM1($S('$G(IBCEFUNC):"",1:$S($D(^TMP("IBNOT",$J,IBZ)):"*",$G(^TMP("IBEDI_TEST_BATCH",$J)):" ","RD"[IBSTAT!'IBSTAT1!(IBSTAT1=7):"#",1:" "))_$P(IB00,U),X,"BILLNO")
"RTN","IBCEM01",26,0)
 . S X=$$SETFLD^VALM1($$EXPAND^IBTRE(399,.02,$P(IB00,U,2)),X,"PAT")
"RTN","IBCEM01",27,0)
 . S X=$$SETFLD^VALM1($P($G(^DPT(+$P(IB00,U,2),0)),U,9),X,"SSN")
"RTN","IBCEM01",28,0)
 . S X=$$SETFLD^VALM1($$FMTE^XLFDT($P(IB("S"),U),2)_"-"_$$FMTE^XLFDT($P(IB("S"),U,2),2),X,"DATES")
"RTN","IBCEM01",29,0)
 . S X=$$SETFLD^VALM1($$EXPAND^IBTRE(399,.05,$P(IB00,U,5)),X,"TYPE")
"RTN","IBCEM01",30,0)
 . S X=$$SETFLD^VALM1($$EXPAND^IBTRE(364,.03,$P(IB0,U,3)),X,"TSTAT")
"RTN","IBCEM01",31,0)
 . D SET(X)
"RTN","IBCEM01",32,0)
 ;
"RTN","IBCEM01",33,0)
 I '$D(^TMP("IBCEM-BABI",$J)) S VALMCNT=2,IBCNT=2,^TMP("IBCEM-BABI",$J,1,0)=" ",^TMP("IBCEM-BABI",$J,2,0)="    No bills found for batch",^TMP("IBCEM-BABI",$J,"IDX",1,1)="",^TMP("IBCEM-BABI",$J,"IDX",2,2)=""
"RTN","IBCEM01",34,0)
 Q
"RTN","IBCEM01",35,0)
 ;
"RTN","IBCEM01",36,0)
EXIT ; -- Clean up list
"RTN","IBCEM01",37,0)
 K ^TMP("IBCEM-BABIDX",$J),^TMP("IBCEM-BABI",$J),IBCEFUNC
"RTN","IBCEM01",38,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBCEM01",39,0)
 Q
"RTN","IBCEM01",40,0)
 ;
"RTN","IBCEM01",41,0)
HDR ; -- Sets up header
"RTN","IBCEM01",42,0)
 N Z
"RTN","IBCEM01",43,0)
 S Z=$G(^IBA(364.1,IBBDA,0))
"RTN","IBCEM01",44,0)
 S VALMHDR(1)="BATCH #: "_$P(Z,U)_"  "_$P(Z,U,8)
"RTN","IBCEM01",45,0)
 S VALMHDR(2)=$S(IBCEFUNC:"     * = Bill excluded"_$S(IBCEFUNC=1:"       # = Bill not in correct status for resubmit",1:""),1:"     * = Bill not able to be edited")
"RTN","IBCEM01",46,0)
 S VALMSG=$G(IBCE("VALMSG"))
"RTN","IBCEM01",47,0)
 Q
"RTN","IBCEM01",48,0)
 ;
"RTN","IBCEM01",49,0)
SET(X) ; -- set arrays for 837 return messages
"RTN","IBCEM01",50,0)
 S VALMCNT=VALMCNT+1,^TMP("IBCEM-BABI",$J,VALMCNT,0)=X
"RTN","IBCEM01",51,0)
 S ^TMP("IBCEM-BABI",$J,"IDX",VALMCNT,IBCNT)=""
"RTN","IBCEM01",52,0)
 S ^TMP("IBCEM-BABIDX",$J,IBCNT)=VALMCNT_U_IB0
"RTN","IBCEM01",53,0)
 Q
"RTN","IBCEM01",54,0)
 ;
"RTN","IBCEM01",55,0)
SEL ; Select batch bill entry(ies) from list
"RTN","IBCEM01",56,0)
 N IBVAR,IBCT
"RTN","IBCEM01",57,0)
 K IBDAB
"RTN","IBCEM01",58,0)
 I $G(IBCEFUNC) D FULL^VALM1
"RTN","IBCEM01",59,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCEM01",60,0)
 S (IBCT,IBDAB)=0 F  S IBDAB=$O(VALMY(IBDAB)) Q:'IBDAB  S IBVAR=$G(^TMP("IBCEM-BABIDX",$J,IBDAB)),IBDAB(IBDAB)=$P(IBVAR,U,2) I $G(IBCEFUNC) D
"RTN","IBCEM01",61,0)
 . N Z,Z0,IBSTAT
"RTN","IBCEM01",62,0)
 . S IBSTAT=$P($G(^DGCR(399,+IBDAB(IBDAB),0)),U,13)
"RTN","IBCEM01",63,0)
 . S Z=+$O(^IBA(364,"ABABI",IBBDA,IBDAB(IBDAB),"")),Z0=$P($G(^DGCR(399,IBDAB(IBDAB),0)),U)
"RTN","IBCEM01",64,0)
 . I $G(IBCEFUNC)'=2,"RD"[$P(IBVAR,U,4)!'IBSTAT!(IBSTAT=7) K IBDAB(IBDAB) W !,"Bill #: ",Z0," already excluded (not in correct status for resubmit)" Q
"RTN","IBCEM01",65,0)
 . I $D(^TMP("IBNOT",$J,Z)) W !,"Bill #: ",Z0," has been included again" K ^TMP("IBNOT",$J,Z) S IBCT=IBCT-1 Q
"RTN","IBCEM01",66,0)
 . S ^TMP("IBNOT",$J,Z)=IBDAB(IBDAB),IBCT=IBCT+1 W !,"Bill #: ",Z0," will be excluded"
"RTN","IBCEM01",67,0)
 I $G(IBCEFUNC) D PAUSE^VALM1
"RTN","IBCEM01",68,0)
 S VALMBCK=$S('$G(IBCEFUNC):"Q",1:$S($O(VALMY("")):"R",1:"Q"))
"RTN","IBCEM01",69,0)
 S ^TMP("IBNOT",$J)=IBCT
"RTN","IBCEM01",70,0)
 I VALMBCK'="Q" D HDR,REBLD
"RTN","IBCEM01",71,0)
 I VALMBCK="Q" D EXIT
"RTN","IBCEM01",72,0)
 Q
"RTN","IBCEM01",73,0)
 ;
"RTN","IBCEM02")
0^3^B61742795
"RTN","IBCEM02",1,0)
IBCEM02 ;ALB/TMP - 837 EDI RESUBMIT BATCH PROCESSING ;12-SEP-96
"RTN","IBCEM02",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,296**;21-MAR-94
"RTN","IBCEM02",3,0)
 Q
"RTN","IBCEM02",4,0)
 ;
"RTN","IBCEM02",5,0)
BATCH2 ; Resubmit a batch of bills not necessarily in error
"RTN","IBCEM02",6,0)
 N DIR,DIC,X,Y,IB
"RTN","IBCEM02",7,0)
 K ^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM02",8,0)
 F  S DIC="^IBA(364.1,",DIC(0)="AEMQ" D ^DIC Q:Y<0  S IB=+Y D  I IB Q:'$$BATCH(+IB)
"RTN","IBCEM02",9,0)
 . N Y,IB0
"RTN","IBCEM02",10,0)
 . S IB0=$G(^IBA(364.1,IB,0)) I $P(IB0,U,14),'$O(^IBA(364,"C",IB,0)) D  Q:'IB
"RTN","IBCEM02",11,0)
 .. S DIR("A",1)="THIS IS A TEST BATCH AND CANNOT BE RESUBMITTED."
"RTN","IBCEM02",12,0)
 .. I +$P(IB0,U,15) S DIR("A",2)="IT WAS CREATED AS A RESULT OF BATCH "_$P($G(^IBA(364.1,+$P(IB0,U,15),0)),U)_" BEING RESUBMITTED.",DIR("A",3)="RESUBMIT THIS ORIGINAL BATCH INSTEAD."
"RTN","IBCEM02",13,0)
 .. S DIR("A")="PRESS RETURN TO CONTINUE: "
"RTN","IBCEM02",14,0)
 .. S DIR(0)="EA"
"RTN","IBCEM02",15,0)
 .. W ! D ^DIR K DIR W !
"RTN","IBCEM02",16,0)
 .. S IB=0
"RTN","IBCEM02",17,0)
 . ;
"RTN","IBCEM02",18,0)
 . S DIR("A")="Are you resubmitting the claims in this batch for testing?: ",DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCEM02",19,0)
 . I $D(DTOUT)!$D(DUOUT) S IB=0 Q
"RTN","IBCEM02",20,0)
 . I +Y S ^TMP("IBEDI_TEST_BATCH",$J)=1 Q
"RTN","IBCEM02",21,0)
 . K ^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM02",22,0)
 K ^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM02",23,0)
 Q
"RTN","IBCEM02",24,0)
 ;
"RTN","IBCEM02",25,0)
BATCH(IBBDA) ;
"RTN","IBCEM02",26,0)
 N DIR,IBOK,IB0,IB1,ZTSK,IBSTAT,IBCE,IBASK,IBSTOP,IBTEST
"RTN","IBCEM02",27,0)
 S IB0=$G(^IBA(364.1,IBBDA,0)),IB1=$G(^(1)),IBSTAT=$P(IB0,U,2),IBASK=0
"RTN","IBCEM02",28,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCEM02",29,0)
 ;
"RTN","IBCEM02",30,0)
 I 'IBTEST,$P(IB0,U,9) D  I 'IBOK S IBASK=1 G BATCHQ
"RTN","IBCEM02",31,0)
 . S IBOK=1,ZTSK=$P(IB0,U,9) D STAT^%ZTLOAD
"RTN","IBCEM02",32,0)
 . I ZTSK(0)=0 S DIE="^IBA(364.1,",DA=IBBDA,DR=".09///@" D ^DIE Q  ;Task not scheduled - delete task #
"RTN","IBCEM02",33,0)
 . I "125"[ZTSK(1) W *7,!,"Cannot resubmit this batch.",!,"This batch is currently ",$S("2"[ZTSK(1):"being resubmitted",1:"scheduled for resubmission")," - Task # is: ",$P(IB0,U,9),! S IBOK=0
"RTN","IBCEM02",34,0)
 ;
"RTN","IBCEM02",35,0)
 W !
"RTN","IBCEM02",36,0)
 S DIR("A",1)=$P(IB0,U,8)
"RTN","IBCEM02",37,0)
 S DIR("A",2)="Current Batch Status: "_$$EXPAND^IBTRE(364.1,.02,IBSTAT)
"RTN","IBCEM02",38,0)
 S DIR("A",3)="         Recorded On: "_$$FMTE^XLFDT($P(IB1,U,6),2)
"RTN","IBCEM02",39,0)
 S DIR("A",4)=" "
"RTN","IBCEM02",40,0)
 S DIR("A",5)="      Date Last Sent: "_$$FMTE^XLFDT($P(IB1,U,3),2)
"RTN","IBCEM02",41,0)
 S DIR("A",6)="        Last Sent By: "_$$EXPAND^IBTRE(364.1,1.04,$P(IB1,U,4))
"RTN","IBCEM02",42,0)
 S DIR("A",7)=" "
"RTN","IBCEM02",43,0)
 S DIR("A",8)="     Date First Sent: "_$$FMTE^XLFDT($P(IB1,U),2)
"RTN","IBCEM02",44,0)
 S DIR("A",9)="       First Sent By: "_$$EXPAND^IBTRE(364.1,1.02,$P(IB1,U,2))
"RTN","IBCEM02",45,0)
 S DIR("A",10)="     Number Of Bills: "_$P(IB0,U,3)
"RTN","IBCEM02",46,0)
 S DIR("A",11)=" "
"RTN","IBCEM02",47,0)
 ;
"RTN","IBCEM02",48,0)
 I $P(IB0,U,13),'IBTEST D  G:IBSTOP BATCHQ
"RTN","IBCEM02",49,0)
 . S DIR("A",12)="BATCH WAS LAST RESUBMITTED ON "_$$FMTE^XLFDT($P(IB0,U,13),2),DIR("A",13)=" "
"RTN","IBCEM02",50,0)
 . S DIR(0)="YA",DIR("A")="ARE YOU SURE YOU WANT TO RESUBMIT IT AGAIN?: ",DIR("B")="NO" D ^DIR K DIR I 'Y!$D(DTOUT)!$D(DUOUT) S IBSTOP=1 Q
"RTN","IBCEM02",51,0)
 . S IBSTOP=0
"RTN","IBCEM02",52,0)
 ;
"RTN","IBCEM02",53,0)
 I IBSTAT'="P",'IBTEST S DIR("A",11)="WARNING - BATCH TRANSMITTED PREVIOUSLY & CONFIRMED RECEIVED BY "_$P("AUSTIN^PAYER/INTERMEDIARY",U,$TR(IBSTAT,"A")+1)
"RTN","IBCEM02",54,0)
 S DIR("A")="ARE YOU SURE YOU WANT TO RESUBMIT THIS BATCH"_$S(IBTEST:" FOR TEST",1:"")_"?: "
"RTN","IBCEM02",55,0)
 S DIR(0)="YA",DIR("B")="NO"
"RTN","IBCEM02",56,0)
 D ^DIR K DIR
"RTN","IBCEM02",57,0)
 S IBSTOP=('Y)
"RTN","IBCEM02",58,0)
 ;
"RTN","IBCEM02",59,0)
 K ^TMP("IBNOT",$J)
"RTN","IBCEM02",60,0)
 W !
"RTN","IBCEM02",61,0)
 I IBSTOP S IBASK=1 G BATCHQ
"RTN","IBCEM02",62,0)
 I IBSTAT'="P"!IBTEST D
"RTN","IBCEM02",63,0)
 . S DIR("A")="Do you want to exclude any bills from being resubmitted?: ",DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCEM02",64,0)
 . I Y D
"RTN","IBCEM02",65,0)
 .. N IBDAB,Z,IBCEFUNC
"RTN","IBCEM02",66,0)
 .. S IBCEFUNC=1,IBCE("VALMSG")="Select bills that should NOT be resubmitted"
"RTN","IBCEM02",67,0)
 .. D EN^VALM("IBCEM BATCH BILL LIST")
"RTN","IBCEM02",68,0)
 W !
"RTN","IBCEM02",69,0)
 D RESUB(IBBDA,$S(IBTEST:0,IBSTAT="P":1,1:0))
"RTN","IBCEM02",70,0)
 ;
"RTN","IBCEM02",71,0)
BATCHQ Q IBASK
"RTN","IBCEM02",72,0)
 ;
"RTN","IBCEM02",73,0)
RESUB(IBBDA,IBOLD) ; Resubmit a batch entry # IBBDA in file 364.1
"RTN","IBCEM02",74,0)
 ;IBOLD = 1 if old batch # should be used   0 if new batch # needed
"RTN","IBCEM02",75,0)
 ;
"RTN","IBCEM02",76,0)
 N IBIFN,IB0,IBS,IBS1,IBSCT,IBEXCT,IBE,IB,DIR,Y,IBT,IBPT,IBB,IBZTSK,IBTEST
"RTN","IBCEM02",77,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBRESUB",$J)
"RTN","IBCEM02",78,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCEM02",79,0)
 S IBOLD=+$G(IBOLD),^TMP("IBRESUB",$J)=$P($G(^IBA(364.1,IBBDA,0)),U)_U_IBBDA_U_IBOLD_U_IBTEST
"RTN","IBCEM02",80,0)
 ;
"RTN","IBCEM02",81,0)
 S (IBE,IBE(0),IBSCT,IBEXCT,IBIFN)=0
"RTN","IBCEM02",82,0)
 F  S IBIFN=$O(^IBA(364,"ABABI",IBBDA,IBIFN)) Q:'IBIFN  S IB=$O(^IBA(364,"ABABI",IBBDA,IBIFN,"")) Q:'IB  S IB0=$G(^IBA(364,IB,0)),IBS=$P($G(^DGCR(399,IBIFN,0)),U,13) D
"RTN","IBCEM02",83,0)
 . I $D(^TMP("IBNOT",$J,IB)) S IBEXCT=IBEXCT+1 Q
"RTN","IBCEM02",84,0)
 . S IBSCT=IBSCT+1,IBS1=$P(IB0,U,3)
"RTN","IBCEM02",85,0)
 . I IBTEST!(IBS>1&(IBS<6)&("CRDZ"'[IBS1)) S ^TMP("IBRESUB",$J,IB)=IBIFN Q
"RTN","IBCEM02",86,0)
 . S IBE(0)=IBE(0)+1
"RTN","IBCEM02",87,0)
 . I IBS1'="","CRDZ"[IBS1 S IBE(IBS1)=$G(IBE(IBS1))+1 Q
"RTN","IBCEM02",88,0)
 . S IBE=IBE+1,^TMP("IBNOT",$J,IB)=IBIFN
"RTN","IBCEM02",89,0)
 ;
"RTN","IBCEM02",90,0)
 I 'IBTEST,'IBE(0),'IBSCT,'$D(^TMP("IBNOT",$J)) D CKRES^IBCESRV2(IBBDA) G RESUBQ
"RTN","IBCEM02",91,0)
 I IBE(0)!'IBSCT S Y=1 D  G:'Y RESUBQ
"RTN","IBCEM02",92,0)
 . I IBE(0)=IBSCT W !,*7,"There are no bill(s) in this batch in a valid status to be resubmitted" W:IBEXCT !,IBEXCT," bill(s) in this batch have been specifically excluded" D PAUSE^VALM1 S Y="" Q
"RTN","IBCEM02",93,0)
 . F Z="C","R","D" I $D(IBE(Z)) W !,*7,IBE(Z)," bill(s) in this batch have been ",$S(Z="C":"cancelled",Z="R":"resubmitted",1:"deleted from batch")," previously"
"RTN","IBCEM02",94,0)
 . I IBE W !,*7,IBE," bill(s) in this batch are not in a valid status to be re-submitted"
"RTN","IBCEM02",95,0)
 . I IBEXCT W !,IBEXCT," bill(s) in this batch have been specifically excluded" Q:'IBE
"RTN","IBCEM02",96,0)
 . K DIR S DIR("A")="Do you want to resubmit the other "_(IBSCT-IBE(0))_" bill(s) in this batch?: ",DIR(0)="YA",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEM02",97,0)
 . W !
"RTN","IBCEM02",98,0)
 . I 'Y W !,*7,"Batch NOT resubmitted" D PAUSE^VALM1 S Y=0,IBSTOP=1 K ^TMP("IBRESUB",$J),^TMP("IBNOT",$J) Q
"RTN","IBCEM02",99,0)
 ;
"RTN","IBCEM02",100,0)
 S IBZTSK=""
"RTN","IBCEM02",101,0)
 I $O(^TMP("IBRESUB",$J,0)) D
"RTN","IBCEM02",102,0)
 . S ^TMP("IBRESUBMIT",$J)=$G(^TMP("IBRESUB",$J))
"RTN","IBCEM02",103,0)
 . S IB="" F  S IB=$O(^TMP("IBRESUB",$J,IB)) Q:'IB  S IBIFN=$P($G(^IBA(364,IB,0)),U),Y=$S('IBOLD&'IBTEST:$$ADDTBILL^IBCB1(IBIFN),1:IB) D
"RTN","IBCEM02",104,0)
 .. I IBTEST Q:$D(^TMP("IBNOT",$J,IB))
"RTN","IBCEM02",105,0)
 .. I 'IBTEST,'IBOLD,'$P(Y,U,3) S ^TMP("IBNOT",$J,IB)=IBIFN K ^TMP("IBRESUB",$J,IB) Q
"RTN","IBCEM02",106,0)
 .. S ^TMP("IBRESUBMIT",$J,+Y)=^TMP("IBRESUB",$J,IB),^TMP("IBRESUBMIT",$J,+Y,"OLD")=$S('IBTEST:IB,1:0)
"RTN","IBCEM02",107,0)
 . D EN1^IBCE837B(.IBZTSK,0)
"RTN","IBCEM02",108,0)
 . I 'IBTEST,$G(^TMP("IBRESUBMIT",$J))="ABORT" D  ; No resubmit - delete entries
"RTN","IBCEM02",109,0)
 .. S IB="" F  S IB=$O(^TMP("IBRESUBMIT",$J,IB)) Q:'IB  S DIK="^IBA(364,",DA=IB D ^DIK
"RTN","IBCEM02",110,0)
 .. K ^TMP("IBRESUBMIT",$J)
"RTN","IBCEM02",111,0)
 I IBZTSK S ^TMP("IBRESUBMIT",$J)=^TMP("IBRESUB",$J),DIE="^IBA(364.1,",DR=".09////"_IBZTSK,DA=$S('IBTEST:+$P($G(^TMP("IBRESUBMIT",$J)),U,2),1:0) D:DA ^DIE ;task was queued
"RTN","IBCEM02",112,0)
 ;
"RTN","IBCEM02",113,0)
RESUBQ Q
"RTN","IBCEM02",114,0)
 ;
"RTN","IBCEM02",115,0)
RESUBUP ; Update old entries in file 364 for resubmitted bills, send bulletin
"RTN","IBCEM02",116,0)
 ; for bills not resubmitted in batch, if any, update new batch(s) with
"RTN","IBCEM02",117,0)
 ; old batch reference
"RTN","IBCEM02",118,0)
 N IBBA,IBE,IBT,IB,IBV,IBB,XMSUBJ,XMBODY,XMTO,XMDUZ
"RTN","IBCEM02",119,0)
 ;
"RTN","IBCEM02",120,0)
 S IBBA=+$P($G(^TMP("IBRESUBMIT",$J)),U,2) ;Original batch entry #
"RTN","IBCEM02",121,0)
 ;
"RTN","IBCEM02",122,0)
 I $O(^TMP("IBNOT",$J,0)) D
"RTN","IBCEM02",123,0)
 . S IBE=5,IB=""
"RTN","IBCEM02",124,0)
 . F  S IB=$O(^TMP("IBNOT",$J,IB)) Q:IB=""  S IBB=+$G(^(IB)),IBV=$$DISP^IBCEM3(IBB,"",1) D
"RTN","IBCEM02",125,0)
 .. Q:"CRDZ"[$P($G(^IBA(364,IB,0)),U,3)
"RTN","IBCEM02",126,0)
 .. S IBE=IBE+1,IBPT=$P(IBV,U,3)
"RTN","IBCEM02",127,0)
 .. S IBT(IBE)="  "_$E($P(IBV,U,2)_$J("",10),1,10)_$E($E($P(IBPT,"("),1,20)_"("_$P(IBPT,"(",2)_$J("",32),1,32)_"  "_$E($P(IBV,U,4)_$J("",10),1,10)_"  "_$$EXPAND^IBTRE(399,.13,$P($G(^DGCR(399,IBB,0)),U,13))
"RTN","IBCEM02",128,0)
 . I IBE>5 D  ;Batch resubmit is still incomplete
"RTN","IBCEM02",129,0)
 .. S IBT(1)="The resubmission of bills in batch "_$P($G(^TMP("IBRESUB",$J)),U)_" was incomplete."
"RTN","IBCEM02",130,0)
 .. S IBT(2)="The following bills were NOT resubmitted:"
"RTN","IBCEM02",131,0)
 .. S IBT(3)=" ",IBT(4)="  BILL #    PATIENT"_$J("",27)_"TYPE        BILL STATUS",IBT(5)="",$P(IBT(5),"-",76)="",IBT(5)="  "_IBT(5)
"RTN","IBCEM02",132,0)
 .. S XMSUBJ="BILLS NOT RESUBMITTED WITH THEIR BATCH",XMBODY="IBT",XMDUZ="",XMTO("I:G.IB EDI")=""
"RTN","IBCEM02",133,0)
 .. D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCEM02",134,0)
 .. I '$P($G(^IBE(364.1,IBBA,0)),U,10) S DIE="^IBA(364.1,",DR=".1////1",DA=IBBA D ^DIE
"RTN","IBCEM02",135,0)
 ;
"RTN","IBCEM02",136,0)
 I $G(^TMP("IBRESUBMIT",$J,0)),'$P($G(^TMP("IBRESUBMIT",$J)),U,3) D
"RTN","IBCEM02",137,0)
 . N IB,IBCT,IBO,IBIFN
"RTN","IBCEM02",138,0)
 . S (IB,IBCT)=0
"RTN","IBCEM02",139,0)
 . F  S IB=$O(^TMP("IBRESUBMIT",$J,IB)) Q:'IB  S IBIFN=+$G(^(IB)),IBO=$G(^(IB,"OLD")) D:IBO
"RTN","IBCEM02",140,0)
 .. S IBCT=IBCT+1
"RTN","IBCEM02",141,0)
 .. D UPDEDI^IBCEM(IBO,"R",1)
"RTN","IBCEM02",142,0)
 . D CTDOWN(IBBA,IBCT)
"RTN","IBCEM02",143,0)
 S DA=IBBA,DIE="^IBA(364.1,",DR=".09///@;.13///NOW;1.03///NOW;1.04////.5" D ^DIE
"RTN","IBCEM02",144,0)
 L -^IBA(364.1,DA)
"RTN","IBCEM02",145,0)
 K ^TMP("IBNOT",$J),^TMP("IBRESUB",$J)
"RTN","IBCEM02",146,0)
 Q
"RTN","IBCEM02",147,0)
 ;
"RTN","IBCEM02",148,0)
CTDOWN(IBBA,IBCT) ; Upd the count, incomplete resubmit status on the batch
"RTN","IBCEM02",149,0)
 ;IBBA = batch file ien
"RTN","IBCEM02",150,0)
 ;IBCT = the # to decrease the count
"RTN","IBCEM02",151,0)
 Q:'IBBA
"RTN","IBCEM02",152,0)
 N IBCT1,IBSTAT,IB0
"RTN","IBCEM02",153,0)
 S IB0=$G(^IBA(364.1,IBBA,0)),IBCT1=$P(IB0,U,3)-IBCT,IBSTAT=$P(IB0,U,10)
"RTN","IBCEM02",154,0)
 S:IBCT1<0 IBCT1=0
"RTN","IBCEM02",155,0)
 S IBINC=$S('IBSTAT:"",1:$$CKINC^IBCEM02(IBBA)),DIE="^IBA(364.1,",DR=".03////"_IBCT1_$S(IBINC'="":";.1////"_IBINC,1:""),DA=IBBA D ^DIE
"RTN","IBCEM02",156,0)
 Q
"RTN","IBCEM02",157,0)
 ;
"RTN","IBCEM02",158,0)
CKINC(IBBA) ;Check to see if batch resubmit is incomplete
"RTN","IBCEM02",159,0)
 ; IBBA = internal file 364.1 entry # of batch to check
"RTN","IBCEM02",160,0)
 N IBZ,IBINC,DR,DA,DIE
"RTN","IBCEM02",161,0)
 S IBZ="",IBINC=0
"RTN","IBCEM02",162,0)
 F  S IBZ=$O(^IBA(364,"ABAST",IBBA,IBZ)) Q:IBZ=""  I "CRD"'[IBZ S IBINC=1 Q
"RTN","IBCEM02",163,0)
 Q IBINC
"RTN","IBCEM02",164,0)
 ;
"RTN","IBCEM02",165,0)
LOCK(FILE,IBBDA) ; Lock file # FILE entry # IBBDA
"RTN","IBCEM02",166,0)
 I IBBDA L +^IBA(FILE,IBBDA):5
"RTN","IBCEM02",167,0)
 Q $T
"RTN","IBCEM02",168,0)
 ;
"RTN","IBCEM03")
0^4^B45055714
"RTN","IBCEM03",1,0)
IBCEM03 ;ALB/TMP - 837 EDI RESUBMIT INDIVIDUAL BILL PROCESSING ;17-SEP-96
"RTN","IBCEM03",2,0)
 ;;2.0;INTEGRATED BILLING;**137,199,296**;21-MAR-94
"RTN","IBCEM03",3,0)
 Q
"RTN","IBCEM03",4,0)
 ;
"RTN","IBCEM03",5,0)
BILL2 ; Resubmit a transmitted bill with a new batch #
"RTN","IBCEM03",6,0)
 N DIC,DIR,DIE,DA,DR,IB,IB0,IBDA,IBDA1,IBE,IBSTAT,IBBDA,IBOK,IBNEW,Y,ZTSK,IBTEST
"RTN","IBCEM03",7,0)
 K ^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM03",8,0)
 ;
"RTN","IBCEM03",9,0)
 S DIR("A")="ARE YOU RESUBMITTING CLAIMS FOR TESTING?: ",DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCEM03",10,0)
 I $D(DTOUT)!$D(DUOUT) Q
"RTN","IBCEM03",11,0)
 I +Y S ^TMP("IBEDI_TEST_BATCH",$J)=1
"RTN","IBCEM03",12,0)
ASK N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBCEM03",13,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCEM03",14,0)
 ; Only auth or printed transmittable bill valid for non-test
"RTN","IBCEM03",15,0)
 ; All previously transmitted valid for test
"RTN","IBCEM03",16,0)
 S DIC="^DGCR(399,",DIC(0)="AEMQ",DIC("S")=$S('IBTEST:"I $P($G(^(""TX"")),U,2),$P($G(^(0)),U,13)'="""",""234""[$P($G(^(0)),U,13)",1:"I $O(^IBA(364,""B"",+Y,0))")
"RTN","IBCEM03",17,0)
 I IBTEST S DIC("A")="Select BILL/CLAIMS BILL NUMBER (FOR RESUBMIT AS TEST): "
"RTN","IBCEM03",18,0)
 D ^DIC K DIC
"RTN","IBCEM03",19,0)
 I Y<0 D  Q
"RTN","IBCEM03",20,0)
 . Q:'IBTEST
"RTN","IBCEM03",21,0)
 . I $O(^TMP("IBEDI_TEST_BATCH",$J,0)) D
"RTN","IBCEM03",22,0)
 .. M ^TMP("IBRESUBMIT",$J)=^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM03",23,0)
 .. D ONE^IBCE837
"RTN","IBCEM03",24,0)
 . ;
"RTN","IBCEM03",25,0)
 . K ^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBRESUBMIT",$J)
"RTN","IBCEM03",26,0)
 ;
"RTN","IBCEM03",27,0)
 S IBIFN=+Y,IBDA=+$$LAST364^IBCEF4(IBIFN),IB0=$G(^IBA(364,IBDA,0)),IBSTAT=$P(IB0,U,3)
"RTN","IBCEM03",28,0)
 ;
"RTN","IBCEM03",29,0)
 I IB0="" W !,"Bill does not exist in BILL TRANSMISSION file" G ASK
"RTN","IBCEM03",30,0)
 I IBTEST,$D(^TMP("IBEDI_TEST_BATCH",$J,IBDA)) W !,"Bill already selected for test transmission" G ASK
"RTN","IBCEM03",31,0)
 I $$COBN^IBCEF(IBIFN)=1,IBTEST S IBOK=1 D  G:'IBOK ASK
"RTN","IBCEM03",32,0)
 . S DIR("A")="BILL IS A PRIMARY BILL, ARE YOU SURE YOU WANT TO SEND IT AS A TEST CLAIM?: "
"RTN","IBCEM03",33,0)
 . S DIR("B")="NO",DIR(0)="YA" W ! D ^DIR K DIR
"RTN","IBCEM03",34,0)
 . I Y'=1 S IBOK=0
"RTN","IBCEM03",35,0)
 ;
"RTN","IBCEM03",36,0)
 I 'IBTEST,IBSTAT="X" W !,"Bill is currently awaiting extract - will be submitted with next batch run" G ASK
"RTN","IBCEM03",37,0)
 S IBBDA=+$P(IB0,U,2),IB=$P($G(^IBA(364.1,IBBDA,0)),U,9)
"RTN","IBCEM03",38,0)
 ;
"RTN","IBCEM03",39,0)
 I IB,'IBTEST D  G:'IBOK ASK
"RTN","IBCEM03",40,0)
 . S IBOK=1,ZTSK=IB D STAT^%ZTLOAD
"RTN","IBCEM03",41,0)
 . I ZTSK(0)=0 S DIE="^IBA(364.1,",DA=IBBDA,DR=".09///@" D ^DIE Q  ;Task not scheduled - delete task #
"RTN","IBCEM03",42,0)
 . I "125"[ZTSK(1) W *7,!,"Cannot resubmit this bill.",!,"This bill's current batch is already ",$S("2"[ZTSK(1):"being resubmitted",1:"scheduled for resubmission")," - Task # is: ",IB,! S IBOK=0
"RTN","IBCEM03",43,0)
 ;
"RTN","IBCEM03",44,0)
 W !
"RTN","IBCEM03",45,0)
 S DIR("A",1)="   Previously In Batch #: "_$$EXPAND^IBTRE(364,.02,$P(IB0,U,2))
"RTN","IBCEM03",46,0)
 S DIR("A",2)="Bill Transmission Status: "_$$EXPAND^IBTRE(364,.03,IBSTAT)
"RTN","IBCEM03",47,0)
 S DIR("A",3)="             Status Date: "_$$FMTE^XLFDT($P(IB0,U,4),2)
"RTN","IBCEM03",48,0)
 S DIR("A",5)=" "
"RTN","IBCEM03",49,0)
 S DIR("A",4)="     Current Bill Status: "_$$EXPAND^IBTRE(399,.13,$P($G(^DGCR(399,+IBIFN,0)),U,13))
"RTN","IBCEM03",50,0)
 I 'IBTEST,IBSTAT'="P" S DIR("A",11)="WARNING - BILL TRANSMITTED PREVIOUSLY" S:IBSTAT?1"A".E DIR("A",11)=DIR("A",11)_" & CONFIRMED AS RECEIVED BY "_$P("AUSTIN^GENTRAN^INTERMEDIARY^CARRIER",U,$TR(IBSTAT,"A")+1)
"RTN","IBCEM03",51,0)
 S DIR("A")="ARE YOU SURE YOU WANT TO RESUBMIT THIS BILL"_$S('IBTEST:"",1:" AS A TEST CLAIM")_"?: "
"RTN","IBCEM03",52,0)
 S DIR(0)="YA",DIR("B")="NO"
"RTN","IBCEM03",53,0)
 D ^DIR K DIR
"RTN","IBCEM03",54,0)
 ;
"RTN","IBCEM03",55,0)
 W ! G:'Y ASK
"RTN","IBCEM03",56,0)
 ;
"RTN","IBCEM03",57,0)
 I IBTEST S ^TMP("IBEDI_TEST_BATCH",$J,IBDA)="" G ASK
"RTN","IBCEM03",58,0)
 ;
"RTN","IBCEM03",59,0)
 S IBDA1=+$$ADDTBILL^IBCB1(IBIFN) ;Add a new transmit bill record
"RTN","IBCEM03",60,0)
 ;
"RTN","IBCEM03",61,0)
 S Y=$$TX1^IBCB1(IBDA1,1)
"RTN","IBCEM03",62,0)
 ;
"RTN","IBCEM03",63,0)
 I 'Y D  G ASK
"RTN","IBCEM03",64,0)
 . W !,*7,"An error has occurred ... bill NOT re-submitted!!"
"RTN","IBCEM03",65,0)
 . S DIK="^IBA(364,",DA=IBDA1 D:DA ^DIK
"RTN","IBCEM03",66,0)
 . L -^IBA(364,IBDA)
"RTN","IBCEM03",67,0)
 ;
"RTN","IBCEM03",68,0)
 S IBNEW=$P($G(^IBA(364,+IBDA1,0)),U,2)
"RTN","IBCEM03",69,0)
 ;
"RTN","IBCEM03",70,0)
 ;Update the old transmit bill record
"RTN","IBCEM03",71,0)
 D UPDEDI^IBCEM(IBDA,"R")
"RTN","IBCEM03",72,0)
 ;
"RTN","IBCEM03",73,0)
 W !,"Bill # ",$P($G(^DGCR(399,+IB0,0)),U)," was re-submitted in batch # ",$P($G(^IBA(364.1,+IBNEW,0)),U)
"RTN","IBCEM03",74,0)
 ;
"RTN","IBCEM03",75,0)
 L -^IBA(364,IBDA)
"RTN","IBCEM03",76,0)
 G ASK
"RTN","IBCEM03",77,0)
 ;
"RTN","IBCEM03",78,0)
PRINT1(IBIFN,IBDA,IB364,IBRESUB) ; Print bill, submit manually as resolution
"RTN","IBCEM03",79,0)
 ; for a returned message
"RTN","IBCEM03",80,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEM03",81,0)
 ; IBDA = array returned from selection of message
"RTN","IBCEM03",82,0)
 ; IB364 = ien of transmit bill entry in file 364
"RTN","IBCEM03",83,0)
 ; IBRESUB = flag to indicate if bill is being resubmitted via print
"RTN","IBCEM03",84,0)
 ;
"RTN","IBCEM03",85,0)
 N IBAC,IBV,IB399,DFN,ZTSK,PRCASV,IBHOLD,IBTXPRT
"RTN","IBCEM03",86,0)
 W !
"RTN","IBCEM03",87,0)
 I IBIFN="" S IBDA="" G PRINT1Q
"RTN","IBCEM03",88,0)
 S IB399=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEM03",89,0)
 I "34"'[$P(IB399,U,13) W !,*7,"Bill status must be AUTHORIZED or PRNT/TX to print the bill" S IBDA="" G PRINT1Q
"RTN","IBCEM03",90,0)
 ;
"RTN","IBCEM03",91,0)
 I $P($G(^DGCR(399,IBIFN,"S")),U,14)=DT W !,*7,"This bill was last printed today.  You must wait at least 1 day from the last",!,"print date to print this bill using this function." S IBDA="" D PAUSE^VALM1 G PRINT1Q
"RTN","IBCEM03",92,0)
 ;
"RTN","IBCEM03",93,0)
 S IBV=1,IBAC=4,DFN=$P(IB399,U,2),IBTXPRT=0
"RTN","IBCEM03",94,0)
 M IBHOLD("IBDA")=IBDA
"RTN","IBCEM03",95,0)
 D 4^IBCB1,ENS^%ZISS
"RTN","IBCEM03",96,0)
 M IBDA=IBHOLD("IBDA")
"RTN","IBCEM03",97,0)
 ;
"RTN","IBCEM03",98,0)
 I 'IBTXPRT W !,"Bill was not printed" S IBDA="" G PRINT1Q
"RTN","IBCEM03",99,0)
 ;
"RTN","IBCEM03",100,0)
 D UPDEDI^IBCEM(IB364,"P")
"RTN","IBCEM03",101,0)
 ;
"RTN","IBCEM03",102,0)
PRINT1Q Q
"RTN","IBCEM03",103,0)
 ;
"RTN","IBCEM03",104,0)
SUB1 ; Select bills in ready for extract status to transmit individually
"RTN","IBCEM03",105,0)
 N IB0,IB399,IBDA,IBIFN,IBSEL,IBU,X,Y,DA,DIC,Z,DIR
"RTN","IBCEM03",106,0)
 K ^TMP("IBSELX",$J)
"RTN","IBCEM03",107,0)
 ;
"RTN","IBCEM03",108,0)
 S IBSEL=""
"RTN","IBCEM03",109,0)
 F  D  Q:'IBSEL
"RTN","IBCEM03",110,0)
 . S DIR("S")="I $P(^(0),U,3)=""X"""
"RTN","IBCEM03",111,0)
 . S DIR(0)="PAO^364:AEMQ",DIR("A")="SELECT "_$S($D(^TMP("IBSELX",$J)):"NEXT ",1:"")_"BILL TO TRANSMIT: "
"RTN","IBCEM03",112,0)
 . S DIR("?")="ONLY BILLS IN 'READY FOR EXTRACT' STATUS CAN BE TRANSMITTED WITH THIS OPTION"
"RTN","IBCEM03",113,0)
 . D ^DIR K DIR
"RTN","IBCEM03",114,0)
 . I Y'>0 K:Y=U ^TMP("IBSELX",$J) S IBSEL="" Q
"RTN","IBCEM03",115,0)
 . S IBSEL=+Y
"RTN","IBCEM03",116,0)
 . S IBDA=+Y,IB0=$G(^IBA(364,IBDA,0)),IBIFN=+IB0,IBU=$G(^DGCR(399,IBIFN,"U")),IB399=$G(^(0))
"RTN","IBCEM03",117,0)
 . S Z=+$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCEM03",118,0)
 . I '$$TXMT^IBCEF4(IBIFN,.IBNOTX),IBNOTX=2 D  Q
"RTN","IBCEM03",119,0)
 .. W !,$S(Z:"MRA",1:"EDI")_" TRANSMISSION PARAMETER HAS BEEN TURNED OFF",!!,"BILL CANNOT BE SELECTED"
"RTN","IBCEM03",120,0)
 . ;
"RTN","IBCEM03",121,0)
 . W !
"RTN","IBCEM03",122,0)
 . S DIR("A",1)="      YOU HAVE SELECTED BILL #: "_$P(IB399,U)_"  ("_$S($$INPAT^IBCEF(IBIFN):"INPATIENT",1:"OUTPATIENT")_"/"_$S($$FT^IBCEF(IBIFN)=3:"UB92",1:"HCFA 1500")_" FORMAT)"
"RTN","IBCEM03",123,0)
 . S DIR("A",2)="                  PATIENT NAME: "_$E($P($G(^DPT(+$P(IB399,U,2),0)),U)_$J("",28),1,28)_"  SSN: "_$P($G(^DPT(+$P(IB399,U,2),0)),U,9)
"RTN","IBCEM03",124,0)
 . S DIR("A",3)="                  CARE DATE(S): "_$$EXPAND^IBTRE(399,151,$P(IBU,U))_" - "_$$EXPAND^IBTRE(399,152,$P(IBU,U,2))
"RTN","IBCEM03",125,0)
 . S DIR("A",4)="'READY TO EXTRACT' STATUS DATE: "_$$EXPAND^IBTRE(364,.04,$P(IB0,U,4))
"RTN","IBCEM03",126,0)
 . S DIR("?",1)=" "
"RTN","IBCEM03",127,0)
 . S DIR("A",5)=" ",DIR("?")="IF THIS IS THE BILL YOU WANT TO TRANSMIT, RESPOND YES, OTHERWISE, RESPOND NO"
"RTN","IBCEM03",128,0)
 . S DIR("A")="ARE YOU SURE THIS IS THE CORRECT BILL TO TRANSMIT?: "
"RTN","IBCEM03",129,0)
 . S DIR(0)="YAO",DIR("B")="NO" D ^DIR K DIR W !
"RTN","IBCEM03",130,0)
 . I Y'=1 W !,"BILL NOT SELECTED" Q
"RTN","IBCEM03",131,0)
 . ;
"RTN","IBCEM03",132,0)
 . S ^TMP("IBSELX",$J,IBDA)=""
"RTN","IBCEM03",133,0)
 ;
"RTN","IBCEM03",134,0)
 I '$O(^TMP("IBSELX",$J,0)) G SUB1Q
"RTN","IBCEM03",135,0)
 ;
"RTN","IBCEM03",136,0)
 W !,"Bills to be transmitted: "
"RTN","IBCEM03",137,0)
 S Z=0 F  S Z=$O(^TMP("IBSELX",$J,Z)) Q:'Z  W !,?8,$P($G(^DGCR(399,+$G(^IBA(364,Z,0)),0)),U)
"RTN","IBCEM03",138,0)
 W !
"RTN","IBCEM03",139,0)
 S DIR("A")="OK TO TRANSMIT NOW?: ",DIR(0)="YA0",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEM03",140,0)
 G:Y'=1 SUB1Q
"RTN","IBCEM03",141,0)
 W !
"RTN","IBCEM03",142,0)
 S ^TMP("IBSELX",$J)=0
"RTN","IBCEM03",143,0)
 D ONE^IBCE837
"RTN","IBCEM03",144,0)
 W !,"BILL(s) TRANSMITTED ... BATCH #(s): "
"RTN","IBCEM03",145,0)
 S Z=0 F  S Z=$O(^TMP("IBCE-BATCH",$J,Z)) Q:'Z  W Z,$S($O(^(Z)):", ",1:"")
"RTN","IBCEM03",146,0)
 I '$O(^TMP("IBCE-BATCH",$J,0)) W !,"NO BILL(S) TRANSMITTED - CHECK ALERTS/MAIL FOR DETAILS"
"RTN","IBCEM03",147,0)
 ;
"RTN","IBCEM03",148,0)
SUB1Q D PAUSE^VALM1
"RTN","IBCEM03",149,0)
 K ^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCEM03",150,0)
 Q
"RTN","IBCEM03",151,0)
 ;
"RTN","IBCEOB1")
0^22^B67354030
"RTN","IBCEOB1",1,0)
IBCEOB1 ;ALB/TMP - 835 EDI EOB MSG PROCESSING ;18-FEB-99
"RTN","IBCEOB1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,135,155,296**;21-MAR-94
"RTN","IBCEOB1",3,0)
 Q
"RTN","IBCEOB1",4,0)
 ;
"RTN","IBCEOB1",5,0)
STORE(A,IB0,IBEOB,LEVEL) ;
"RTN","IBCEOB1",6,0)
 ; A = the string of data to extract and try to store
"RTN","IBCEOB1",7,0)
 ;       each ^ piece is a field to store
"RTN","IBCEOB1",8,0)
 ;         within each ^ piece, there are 5 ';' pieces:
"RTN","IBCEOB1",9,0)
 ;            1 = piece to extract from the data string;
"RTN","IBCEOB1",10,0)
 ;            2 = field to update;
"RTN","IBCEOB1",11,0)
 ;            3 = flag for dollar amt (1=YES);
"RTN","IBCEOB1",12,0)
 ;            4 = flag for 4-slash stuff without transform (1=YES);
"RTN","IBCEOB1",13,0)
 ;            5 = flag for numeric/non-dollar amt (1=Yes, 0=No,
"RTN","IBCEOB1",14,0)
 ;                 Dn = the field is numeric with 'n' decimal places
"RTN","IBCEOB1",15,0)
 ; IB0 = the record being processed
"RTN","IBCEOB1",16,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",17,0)
 ; LEVEL = the array that contains the DIE and DA values if stuffing at a
"RTN","IBCEOB1",18,0)
 ;         level other than the top level
"RTN","IBCEOB1",19,0)
 ;
"RTN","IBCEOB1",20,0)
 N B,IBPC,IBFLD,DA,DR,DIE,X,Y
"RTN","IBCEOB1",21,0)
 S DR=";"
"RTN","IBCEOB1",22,0)
 ;
"RTN","IBCEOB1",23,0)
 I '$G(LEVEL) S DIE="^IBM(361.1,",DA=IBEOB
"RTN","IBCEOB1",24,0)
 ;
"RTN","IBCEOB1",25,0)
 I $G(LEVEL) D
"RTN","IBCEOB1",26,0)
 . N Q
"RTN","IBCEOB1",27,0)
 . S DIE=$G(LEVEL("DIE"))
"RTN","IBCEOB1",28,0)
 . S Q=0 F  S Q=$O(LEVEL(Q)) Q:'Q  S DA(Q)=LEVEL(Q)
"RTN","IBCEOB1",29,0)
 . S DA=LEVEL(0)
"RTN","IBCEOB1",30,0)
 ;
"RTN","IBCEOB1",31,0)
 I $G(DA) F B=1:1:$L(A,U) D
"RTN","IBCEOB1",32,0)
 . S IBPC=$P(A,U,B),IBFLD=$P(IBPC,";",2)
"RTN","IBCEOB1",33,0)
 . I $P(IB0,U,+IBPC)'="",IBFLD D
"RTN","IBCEOB1",34,0)
 .. N VAL
"RTN","IBCEOB1",35,0)
 .. ; For dollar amts, add full cents; For numerics, strip leading
"RTN","IBCEOB1",36,0)
 .. ;   0's; For non-numeric/non-dollar amts, make any ; in data into |
"RTN","IBCEOB1",37,0)
 .. S VAL=$S($P(IBPC,";",3):$$DOLLAR^IBCEOB($P(IB0,U,+IBPC)),$P(IBPC,";",5):+$P(IB0,U,+IBPC),$P($P(IBPC,";",5),"D",2):$P(IB0,U,+IBPC)/(10**$P($P(IBPC,";",5),"D",2)),1:$TR($P(IB0,U,+IBPC),";","|"))
"RTN","IBCEOB1",38,0)
 .. I $P(IBPC,";",3),VAL S VAL=$P(VAL,".")_"."_$E($P(VAL,".",2)_"00",1,2)
"RTN","IBCEOB1",39,0)
 .. S DR=DR_IBFLD_"///"_$S($P(IBPC,";",4):"/",1:"")_VAL_";"
"RTN","IBCEOB1",40,0)
 ;
"RTN","IBCEOB1",41,0)
 S DR=$P(DR,";",2,$L(DR,";")-1)
"RTN","IBCEOB1",42,0)
 I DR'="" D ^DIE
"RTN","IBCEOB1",43,0)
 Q ($D(Y)=0) ;Successfully stored all the data it was sent if $D(Y)=0
"RTN","IBCEOB1",44,0)
 ;
"RTN","IBCEOB1",45,0)
HDR(IB0,IBEGBL,IBEOB) ; Store header data for EOB
"RTN","IBCEOB1",46,0)
 ; IB0 = the record being processed from the msg
"RTN","IBCEOB1",47,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",48,0)
 ;
"RTN","IBCEOB1",49,0)
 N IBDT,IBDTP,DA,DR,DIE,X,Y
"RTN","IBCEOB1",50,0)
 K IBXSAVE("XTRA"),IBZSAVE
"RTN","IBCEOB1",51,0)
 ;
"RTN","IBCEOB1",52,0)
 S IBDT=$P(IB0,U,3),IBDT=$E(IBDT,1,4)-1700_$E(IBDT,5,8)_"."_$P(IB0,U,4)
"RTN","IBCEOB1",53,0)
 S IBDTP=$P(IB0,U,9)
"RTN","IBCEOB1",54,0)
 I IBDTP S IBDTP=$E(IBDTP,1,4)-1700_$E(IBDTP,5,8)
"RTN","IBCEOB1",55,0)
 S DR=$S($P(IB0,U,7)'="":".03////"_$P(IB0,U,7)_";",1:"")_".05////"_IBDT_";.04////"_($P(IB0,U,5)="Y")_";.15///"_$$COBN^IBCEF(+$G(^IBM(361.1,IBEOB,0)))_";.07///"_$P(IB0,U,8)_$S(IBDTP:";.06////"_IBDTP,1:"")
"RTN","IBCEOB1",56,0)
 S DIE="^IBM(361.1,",DA=IBEOB
"RTN","IBCEOB1",57,0)
 D ^DIE
"RTN","IBCEOB1",58,0)
 I $D(Y)'=0 D
"RTN","IBCEOB1",59,0)
 . S ^TMP(IBEGBL,$J,+$O(^TMP(IBEGBL,$J,""),-1)+1)="Bad header data"
"RTN","IBCEOB1",60,0)
 Q ($D(Y)=0)
"RTN","IBCEOB1",61,0)
 ;
"RTN","IBCEOB1",62,0)
FINDLN(IB0,IBEOB,IBZDATA) ; Find the corresponding billed line for the adj
"RTN","IBCEOB1",63,0)
 ; IB0 = the record being processed
"RTN","IBCEOB1",64,0)
 ;       NOTE: pieces 3,4,16 are already reformatted
"RTN","IBCEOB1",65,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",66,0)
 ; IBZDATA = the array from the output formatter containing line
"RTN","IBCEOB1",67,0)
 ;           items for the bill.  This is passed in so this data only has
"RTN","IBCEOB1",68,0)
 ;           to be extracted once for each bill (the first time in, it
"RTN","IBCEOB1",69,0)
 ;           will be undefined)
"RTN","IBCEOB1",70,0)
 ; OUTPUT = Line # in the original bill that this adjustment relates to
"RTN","IBCEOB1",71,0)
 ;          ^ paid procedure code if different from original procedure OR
"RTN","IBCEOB1",72,0)
 ;            paid rev code if different from original and no proc code
"RTN","IBCEOB1",73,0)
 ;
"RTN","IBCEOB1",74,0)
 N IBLN,IBLN1,IBBNDL,OCHG,OCHG2,OPROC,OREVCD,IBIFN,IBXARRAY,IBXARRY,IBXERR,UNITS,UNITS2,UNITS3,IBMOD,Z,Z0,CPT,EOBCHG,IBZVLA
"RTN","IBCEOB1",75,0)
 ;
"RTN","IBCEOB1",76,0)
 S (IBLN,IBLN1)="",IBIFN=+$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEOB1",77,0)
 S EOBCHG=+$$DOLLAR^IBCEOB($P(IB0,U,15))   ; charges on EOB 40 record
"RTN","IBCEOB1",78,0)
 ;
"RTN","IBCEOB1",79,0)
 ; if original procedure exists and is different than the 835 procedure,
"RTN","IBCEOB1",80,0)
 ; the procedure or revenue code originally billed will be in piece 10
"RTN","IBCEOB1",81,0)
 ; of the '40' record of the 835 flat file.  Otherwise, pc 10 is null.
"RTN","IBCEOB1",82,0)
 S IBBNDL=$S($P(IB0,U,10)'="":1,1:0)
"RTN","IBCEOB1",83,0)
 ;
"RTN","IBCEOB1",84,0)
 ; If this is a split MRA, build array of Vista line#'s from other split MRA's
"RTN","IBCEOB1",85,0)
 I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$$SPLIT^IBCEMU1(IBEOB) D
"RTN","IBCEOB1",86,0)
 . N IEN S IEN=0
"RTN","IBCEOB1",87,0)
 . F  S IEN=$O(^IBM(361.1,"B",IBIFN,IEN)) Q:'IEN  I IEN'=IBEOB D
"RTN","IBCEOB1",88,0)
 .. I $P($G(^IBM(361.1,IEN,0)),U,4)'=1 Q    ; not an MRA
"RTN","IBCEOB1",89,0)
 .. I '$$SPLIT^IBCEMU1(IEN) Q               ; not a split EOB
"RTN","IBCEOB1",90,0)
 .. M IBZVLA=^IBM(361.1,IEN,15,"AC")
"RTN","IBCEOB1",91,0)
 .. Q
"RTN","IBCEOB1",92,0)
 . Q
"RTN","IBCEOB1",93,0)
 ;
"RTN","IBCEOB1",94,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,19)=3 D  G FINDLNX     ; UB92 format
"RTN","IBCEOB1",95,0)
 . I '$D(IBZDATA) D F^IBCEF("N-UB92 SERVICE LINE (EDI)","IBZDATA",,IBIFN)
"RTN","IBCEOB1",96,0)
 . I $P(IB0,U,22),$D(IBZDATA(+$P(IB0,U,22))) S IBLN=+$P(IB0,U,22)_U_$P(IB0,U,10) Q
"RTN","IBCEOB1",97,0)
 . ;
"RTN","IBCEOB1",98,0)
 . S Z=0 F  S Z=$O(IBZDATA(Z)) Q:'Z  D  Q:IBLN
"RTN","IBCEOB1",99,0)
 .. ; Quit if processing an MRA and this VistA line# has already been filed
"RTN","IBCEOB1",100,0)
 .. I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$D(^IBM(361.1,IBEOB,15,"AC",Z)) Q
"RTN","IBCEOB1",101,0)
 .. ; Quit if split MRA and this VistA line# has already been filed
"RTN","IBCEOB1",102,0)
 .. I $D(IBZVLA(Z)) Q
"RTN","IBCEOB1",103,0)
 .. I $G(IBZDATA(Z))="" Q
"RTN","IBCEOB1",104,0)
 .. S OCHG=$P(IBZDATA(Z),U,3)*$P(IBZDATA(Z),U,4) ; Total charge from bill
"RTN","IBCEOB1",105,0)
 .. S OCHG2=+$P(IBZDATA(Z),U,5)
"RTN","IBCEOB1",106,0)
 .. I OCHG'=EOBCHG,OCHG2=EOBCHG S OCHG=OCHG2     ; update OCHG
"RTN","IBCEOB1",107,0)
 .. ;
"RTN","IBCEOB1",108,0)
 .. S CPT=$P(IBZDATA(Z),U,2)                        ; proc from bill
"RTN","IBCEOB1",109,0)
 .. I CPT'?.N,CPT'="" S CPT=$O(^ICPT("B",CPT,""))   ; non-numeric proc
"RTN","IBCEOB1",110,0)
 .. S OPROC=$$PRCD^IBCEF1(+CPT_";ICPT(")            ; ext proc code
"RTN","IBCEOB1",111,0)
 .. S OREVCD=+$P($G(^DGCR(399.2,+IBZDATA(Z),0)),U)  ; Rev cd from bill
"RTN","IBCEOB1",112,0)
 .. ;
"RTN","IBCEOB1",113,0)
 .. ; if not bundled/unbundled
"RTN","IBCEOB1",114,0)
 .. I 'IBBNDL D  Q
"RTN","IBCEOB1",115,0)
 ... I OPROC="",OREVCD,OREVCD'=$P(IB0,U,4) Q      ; revenue code
"RTN","IBCEOB1",116,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,3) Q             ; procedure code
"RTN","IBCEOB1",117,0)
 ... I +$P(IBZDATA(Z),U,4)'=$P(IB0,U,16) Q        ; original units
"RTN","IBCEOB1",118,0)
 ... I +OCHG'=EOBCHG Q                            ; original charges
"RTN","IBCEOB1",119,0)
 ... I '$$MODMATCH($P(IBZDATA(Z),U,9),$P(IB0,U,5,8)),'$$MODMATCH($P($P(IBZDATA(Z),U,9),",",1),$P(IB0,U,5)) Q                    ; modifiers
"RTN","IBCEOB1",120,0)
 ... S IBLN=Z
"RTN","IBCEOB1",121,0)
 ... Q
"RTN","IBCEOB1",122,0)
 .. ;
"RTN","IBCEOB1",123,0)
 .. ; if bundled/unbundled
"RTN","IBCEOB1",124,0)
 .. I IBBNDL D  Q
"RTN","IBCEOB1",125,0)
 ... I OPROC="",OREVCD,OREVCD'=+$P(IB0,U,10) Q    ; revenue code
"RTN","IBCEOB1",126,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,10) Q            ; procedure code
"RTN","IBCEOB1",127,0)
 ... I +$P(IBZDATA(Z),U,4)'=$P(IB0,U,16) Q        ; original units
"RTN","IBCEOB1",128,0)
 ... I +OCHG'=EOBCHG Q                            ; original charges
"RTN","IBCEOB1",129,0)
 ... I '$$MODMATCH($P(IBZDATA(Z),U,9),$P(IB0,U,11,14)),'$$MODMATCH($P($P(IBZDATA(Z),U,9),",",1),$P(IB0,U,11)) Q                 ; modifiers
"RTN","IBCEOB1",130,0)
 ... S IBLN=Z_U_$S(OPROC'="":OPROC,1:OREVCD)
"RTN","IBCEOB1",131,0)
 ... Q
"RTN","IBCEOB1",132,0)
 .. Q
"RTN","IBCEOB1",133,0)
 . ; When dealing with Inpatient UB92's, check for revenue code roll-ups
"RTN","IBCEOB1",134,0)
 . I 'IBLN,$$INPAT^IBCEF(IBIFN,1) D RCRU^IBCEOB00(.IBZDATA,IB0,.IBLN)
"RTN","IBCEOB1",135,0)
 . ; If only 1 rev code and charges are the same, assume a match
"RTN","IBCEOB1",136,0)
 . I 'IBLN,'$P($G(^IBM(361.1,IBEOB,0)),U,4),$O(IBZDATA(""),-1)=$O(IBZDATA("")),+OCHG=EOBCHG S IBLN=+$O(IBZDATA(""))_U_OREVCD
"RTN","IBCEOB1",137,0)
 ;
"RTN","IBCEOB1",138,0)
 ; At this point, we can assume the claim is HCFA 1500 format
"RTN","IBCEOB1",139,0)
 I '$D(IBZDATA) D F^IBCEF("N-HCFA 1500 SERVICE LINE (EDI)","IBZDATA",,IBIFN)
"RTN","IBCEOB1",140,0)
 I $P(IB0,U,22),$D(IBZDATA(+$P(IB0,U,22))) S IBLN=+$P(IB0,U,22)_U_$P(IB0,U,10) G FINDLNX
"RTN","IBCEOB1",141,0)
 S Z=0 F  S Z=$O(IBZDATA(Z)) Q:'Z  D  Q:IBLN
"RTN","IBCEOB1",142,0)
 . ; Quit if processing an MRA and this VistA line# has already been filed
"RTN","IBCEOB1",143,0)
 . I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$D(^IBM(361.1,IBEOB,15,"AC",Z)) Q
"RTN","IBCEOB1",144,0)
 . ; Quit if split MRA and this VistA line# has already been filed
"RTN","IBCEOB1",145,0)
 . I $D(IBZVLA(Z)) Q
"RTN","IBCEOB1",146,0)
 . S OCHG=$P(IBZDATA(Z),U,8)*$P(IBZDATA(Z),U,9) ; charge from bill
"RTN","IBCEOB1",147,0)
 . S UNITS=$S('$P(IBZDATA(Z),U,12):$P(IBZDATA(Z),U,9),1:$P(IBZDATA(Z),U,12)/15) ; original units from bill or anethesia minutes calculation
"RTN","IBCEOB1",148,0)
 . I $P(UNITS,".",2) S UNITS=$FN(UNITS,"",1)    ; round to a single decimal place for fractional units
"RTN","IBCEOB1",149,0)
 . I $P($P(IB0,U,16),".",2) S $P(IB0,U,16)=$FN($P(IB0,U,16),"",1)
"RTN","IBCEOB1",150,0)
 . S UNITS2=$P(IBZDATA(Z),U,9)     ; just the units
"RTN","IBCEOB1",151,0)
 . ; UNITS3 is the number of anesthesia minutes divided by 10, or nil.
"RTN","IBCEOB1",152,0)
 . ; Solution to get around the Trailblazers bug for MRAs
"RTN","IBCEOB1",153,0)
 . S UNITS3=""
"RTN","IBCEOB1",154,0)
 . I $P(IBZDATA(Z),U,12) S UNITS3=$P(IBZDATA(Z),U,12)/10
"RTN","IBCEOB1",155,0)
 . ;
"RTN","IBCEOB1",156,0)
 . S CPT=$P(IBZDATA(Z),U,5)        ; proc from bill
"RTN","IBCEOB1",157,0)
 . I CPT'?.N,CPT'="" S CPT=$O(^ICPT("B",CPT,""))   ; non-numeric proc
"RTN","IBCEOB1",158,0)
 . S OPROC=$$PRCD^IBCEF1(+CPT_";ICPT(")            ; ext proc code
"RTN","IBCEOB1",159,0)
 . Q:OPROC'=$S('IBBNDL:$P(IB0,U,3),1:$P(IB0,U,10))
"RTN","IBCEOB1",160,0)
 . ;
"RTN","IBCEOB1",161,0)
 . S MODOK=0
"RTN","IBCEOB1",162,0)
 . I $$DOLLAR^IBCEFG1(OCHG)=+$P(IB0,U,15),UNITS=$P(IB0,U,16)!(UNITS2=$P(IB0,U,16))!(UNITS3=$P(IB0,U,16)),$S($P(IB0,U,19):$P(IB0,U,19)=$P(IBZDATA(Z),U),1:1) D
"RTN","IBCEOB1",163,0)
 .. ;Original procedure/chg/units/date match to get here
"RTN","IBCEOB1",164,0)
 .. ;Check matching original modifiers
"RTN","IBCEOB1",165,0)
 .. S MODOK=$$MODMATCH($$MODLST^IBEFUNC2($P(IBZDATA(Z),U,10)),$S('IBBNDL:$P(IB0,U,5,8),1:$P(IB0,U,11,14)))
"RTN","IBCEOB1",166,0)
 .. I 'MODOK,'IBLN1 S IBLN1=Z_$S(IBBNDL:U_OPROC,1:"")
"RTN","IBCEOB1",167,0)
 .. Q:'MODOK
"RTN","IBCEOB1",168,0)
 .. S IBLN=Z_$S(IBBNDL:U_OPROC,1:"")
"RTN","IBCEOB1",169,0)
 I 'IBLN,IBLN1 S IBLN=IBLN1
"RTN","IBCEOB1",170,0)
 ;
"RTN","IBCEOB1",171,0)
FINDLNX ;
"RTN","IBCEOB1",172,0)
 Q IBLN
"RTN","IBCEOB1",173,0)
 ;
"RTN","IBCEOB1",174,0)
MODMATCH(IB,MODLST) ; Match modifiers
"RTN","IBCEOB1",175,0)
 ; IB = the list of modifiers iens from the bill, comma delimited
"RTN","IBCEOB1",176,0)
 ; MODLST = the 4 '^' pieces of the reported modifiers
"RTN","IBCEOB1",177,0)
 ;
"RTN","IBCEOB1",178,0)
 N MODOK,Q,Z0,IBMOD,MMOD
"RTN","IBCEOB1",179,0)
 S MODOK=1
"RTN","IBCEOB1",180,0)
 I $TR(IB,",")'="" F Q=1:1:$L(IB,",") S Z0=$P(IB,",",Q) I Z0'="" S IBMOD(Z0)=$G(IBMOD(Z0))+1
"RTN","IBCEOB1",181,0)
 I $TR(MODLST,U)="",$O(IBMOD(""))="" G MODQ ; No modifiers used
"RTN","IBCEOB1",182,0)
 ;
"RTN","IBCEOB1",183,0)
 ; No match if no VistA modifiers, but there are MRA modifiers
"RTN","IBCEOB1",184,0)
 I $TR(MODLST,U)'="",$O(IBMOD(""))="" S MODOK=0 G MODQ
"RTN","IBCEOB1",185,0)
 ;
"RTN","IBCEOB1",186,0)
 ; Evaluate each MRA modifier
"RTN","IBCEOB1",187,0)
 F Z0=1:1:4 D
"RTN","IBCEOB1",188,0)
 . S MMOD=$P(MODLST,U,Z0) Q:MMOD=""     ; individual MRA modifier
"RTN","IBCEOB1",189,0)
 . I '$D(IBMOD(MMOD)) Q                 ; not in array so just quit
"RTN","IBCEOB1",190,0)
 . S IBMOD(MMOD)=IBMOD(MMOD)-1          ; decrement array counter
"RTN","IBCEOB1",191,0)
 . I 'IBMOD(MMOD) KILL IBMOD(MMOD)      ; if 0, then kill array entry
"RTN","IBCEOB1",192,0)
 . Q
"RTN","IBCEOB1",193,0)
 ;
"RTN","IBCEOB1",194,0)
 I $O(IBMOD(""))'="" S MODOK=0 ; All submitted mods not matched
"RTN","IBCEOB1",195,0)
MODQ Q MODOK
"RTN","IBCEOB1",196,0)
 ;
"RTN","IBCEP0B")
0^25^B2444107
"RTN","IBCEP0B",1,0)
IBCEP0B ;ALB/TMP - Functions for PROVIDER ID MAINTENANCE ;13-DEC-99
"RTN","IBCEP0B",2,0)
 ;;2.0;INTEGRATED BILLING;**137,296**;21-MAR-94
"RTN","IBCEP0B",3,0)
 ;
"RTN","IBCEP0B",4,0)
EN ; -- main entry point for IBCE PRVINS PARAM DISPLAY
"RTN","IBCEP0B",5,0)
 N IBINS,IBDSP,IBSORT ; Variables should be available throughout actions
"RTN","IBCEP0B",6,0)
 D FULL^VALM1
"RTN","IBCEP0B",7,0)
 D EN^VALM("IBCE PRVINS PARAM DISPLAY")
"RTN","IBCEP0B",8,0)
 Q
"RTN","IBCEP0B",9,0)
 ;
"RTN","IBCEP0B",10,0)
HDR ; -- header code
"RTN","IBCEP0B",11,0)
 K VALMHDR
"RTN","IBCEP0B",12,0)
 I $G(IBINS) S VALMHDR(1)="INSURANCE CO: "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEP0B",13,0)
 Q
"RTN","IBCEP0B",14,0)
 ;
"RTN","IBCEP0B",15,0)
INIT ; Initialization
"RTN","IBCEP0B",16,0)
 D BLD($G(IBINS))
"RTN","IBCEP0B",17,0)
 Q
"RTN","IBCEP0B",18,0)
 ;
"RTN","IBCEP0B",19,0)
BLD(IBINS) ; Build display for insurance co parameter display
"RTN","IBCEP0B",20,0)
 ; IBINS = the ien of the insurance co (file 36)
"RTN","IBCEP0B",21,0)
 ;
"RTN","IBCEP0B",22,0)
 ;ejk 4/20/05 Add IB3 to list of NEWed variables. 
"RTN","IBCEP0B",23,0)
 N IBLCT,IB4,IB3,IBP,Z0
"RTN","IBCEP0B",24,0)
 K ^TMP("IBPRV_INS_PARAM",$J)
"RTN","IBCEP0B",25,0)
 S IB4=$G(^DIC(36,+IBINS,4))
"RTN","IBCEP0B",26,0)
 ;EJK 4/20/05 Create and pass IB3 to fix undefined variable error. 
"RTN","IBCEP0B",27,0)
 S IB3=$G(^DIC(36,+IBINS,3))
"RTN","IBCEP0B",28,0)
 ;
"RTN","IBCEP0B",29,0)
 D PARAMS^IBCNSC1(IB4,IB3,.IBP)
"RTN","IBCEP0B",30,0)
 S (IBLCT,IBP)=0
"RTN","IBCEP0B",31,0)
 F  S IBP=$O(IBP(IBP)) Q:'IBP  D
"RTN","IBCEP0B",32,0)
 . S Z0=$E($J("",+IBP(IBP))_$P(IBP(IBP),U,2),1,79)
"RTN","IBCEP0B",33,0)
 . D SET1(Z0,.IBLCT)
"RTN","IBCEP0B",34,0)
BLDQ S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP0B",35,0)
 Q
"RTN","IBCEP0B",36,0)
 ;
"RTN","IBCEP0B",37,0)
EXPND ;
"RTN","IBCEP0B",38,0)
 Q
"RTN","IBCEP0B",39,0)
 ;
"RTN","IBCEP0B",40,0)
HELP ;
"RTN","IBCEP0B",41,0)
 Q
"RTN","IBCEP0B",42,0)
 ;
"RTN","IBCEP0B",43,0)
EXIT ;
"RTN","IBCEP0B",44,0)
 K ^TMP("IBPRV_INS_PARAM",$J)
"RTN","IBCEP0B",45,0)
 D CLEAN^VALM10
"RTN","IBCEP0B",46,0)
 Q
"RTN","IBCEP0B",47,0)
 ;
"RTN","IBCEP0B",48,0)
EDIT ; Edit provider id insurance co parameters
"RTN","IBCEP0B",49,0)
 N IBY,DA,X,Y,DIE,DR
"RTN","IBCEP0B",50,0)
 D FULL^VALM1
"RTN","IBCEP0B",51,0)
 S IBY=",12,",DIE="^DIC(36,",DA=+$G(IBINS),DR="[IBEDIT INS CO1]"
"RTN","IBCEP0B",52,0)
 I DA>0 D ^DIE,BLD(IBINS)
"RTN","IBCEP0B",53,0)
 ;
"RTN","IBCEP0B",54,0)
 S VALMBCK="R"
"RTN","IBCEP0B",55,0)
 Q
"RTN","IBCEP0B",56,0)
 ;
"RTN","IBCEP0B",57,0)
SET1(Z0,CT) ; Set lines into display array
"RTN","IBCEP0B",58,0)
 S CT=CT+1
"RTN","IBCEP0B",59,0)
 D SET^VALM10(CT,Z0)
"RTN","IBCEP0B",60,0)
 Q
"RTN","IBCEP0B",61,0)
 ;
"RTN","IBCEPTC")
0^11^B76107532
"RTN","IBCEPTC",1,0)
IBCEPTC ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS ; 4/12/05 11:15am
"RTN","IBCEPTC",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTC",3,0)
 ;
"RTN","IBCEPTC",4,0)
EN ; Main entrypoint
"RTN","IBCEPTC",5,0)
 ; IBDT1,IBDT2 = last transmit date range to use
"RTN","IBCEPTC",6,0)
 ; IBSORT = primary sort criteria to use B=BATCH #,I=INS CO NAME
"RTN","IBCEPTC",7,0)
 ; IBFORM = form type to limit selection to U=UB92,H=HCFA 1500,B=BOTH
"RTN","IBCEPTC",8,0)
 ; IBCRIT = the additional sort criteria needed
"RTN","IBCEPTC",9,0)
 ; ^TMP("IB_PREV_CLAIM_INS,$J) = 1 for specific ins co/null for all
"RTN","IBCEPTC",10,0)
 ;                        ^($J,ien)="" for ien of each ins co selected
"RTN","IBCEPTC",11,0)
 ; IBREP = format output should be put in R=report,S=Listman
"RTN","IBCEPTC",12,0)
 ;
"RTN","IBCEPTC",13,0)
 N DIR,DIC,X,Y,Z,Z0,Z1,IBHOW,IBACT,IBCT,IBREP,IBCRIT,IBDT1,IBDT2,IBINS,IBFORM,IBOK,IBQUIT,IBSORT,IBY,DTOUT,DUOUT,%ZIS,ZTSAVE,ZTRTN,ZTDESC,POP
"RTN","IBCEPTC",14,0)
 ;
"RTN","IBCEPTC",15,0)
Q1 ;
"RTN","IBCEPTC",16,0)
 W !!,"*** Please Note ***"
"RTN","IBCEPTC",17,0)
 W ?20,"2 '^' are needed to abort this option (^^)"
"RTN","IBCEPTC",18,0)
 W !?20,"1 '^' brings you back to the previous prompt (^)"
"RTN","IBCEPTC",19,0)
 W !
"RTN","IBCEPTC",20,0)
 ;
"RTN","IBCEPTC",21,0)
 S DIR(0)="SA^C:Claim;B:Batch;L:List",DIR("A")="Select By: (C)laim, (B)atch or see a (L)ist to pick from?: ",DIR("B")="List"
"RTN","IBCEPTC",22,0)
 D ^DIR K DIR
"RTN","IBCEPTC",23,0)
 I $D(DTOUT)!$D(DUOUT) G ENQ
"RTN","IBCEPTC",24,0)
 S IBHOW=Y
"RTN","IBCEPTC",25,0)
 I IBHOW="L" G Q1A
"RTN","IBCEPTC",26,0)
 ;
"RTN","IBCEPTC",27,0)
 S IBQUIT=0,IBCT=0
"RTN","IBCEPTC",28,0)
 K ^TMP($J,IBHOW)
"RTN","IBCEPTC",29,0)
 F  D  Q:IBQUIT
"RTN","IBCEPTC",30,0)
 . I IBHOW="C" S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Claim: ",DIR(0)="PA^364:AEMQZ",DIR("S")="I '$P(^(0),U,7),'$O(^IBA(364,""B"",+^(0),Y))"
"RTN","IBCEPTC",31,0)
 . I IBHOW="B" S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Batch: ",DIR(0)="PA^IBA(364.1,:AEMQ^W ""  "",$P(^(0),U,3),"" Claims""",DIR("S")="I '$P(^(0),U,14)"
"RTN","IBCEPTC",32,0)
 . S DIR("?")="^D SELDSP^IBCEPTC(IBHOW)"
"RTN","IBCEPTC",33,0)
 . S:IBCT $P(DIR(0),U)=$P(DIR(0),U)_"O" ; Optional prompt after one is selected
"RTN","IBCEPTC",34,0)
 . D ^DIR K DIR
"RTN","IBCEPTC",35,0)
 . I Y'>0 S IBQUIT=$S(X="^":2,X="^^":3,1:1) Q
"RTN","IBCEPTC",36,0)
 . S IBY=$S(IBHOW="C":+Y,1:""),Y=$S(IBHOW="C":+Y(0),1:Y)
"RTN","IBCEPTC",37,0)
 . I '$D(^TMP($J,IBHOW,+Y)) S IBCT=IBCT+1,^TMP($J,IBHOW,+Y)=IBY
"RTN","IBCEPTC",38,0)
 ;
"RTN","IBCEPTC",39,0)
 G:IBQUIT=3 ENQ
"RTN","IBCEPTC",40,0)
 G:IBQUIT=2!'$O(^TMP($J,IBHOW,0)) Q1
"RTN","IBCEPTC",41,0)
 S Z=0
"RTN","IBCEPTC",42,0)
 I IBHOW="C" F  S Z=$O(^TMP($J,"C",Z)) Q:'Z  S ^TMP("IB_PREV_CLAIM_SELECT",$J,Z,0)=^TMP($J,"C",Z)
"RTN","IBCEPTC",43,0)
 I IBHOW="B" S (Z,IBCT)=0 F  S Z=$O(^TMP($J,"B",Z)) Q:'Z  D
"RTN","IBCEPTC",44,0)
 . S Z0=0 F  S Z0=$O(^IBA(364,"C",Z,Z0)) Q:'Z0  S Z1=+$G(^IBA(364,Z0,0)) I Z1,'$D(^TMP("IB_PREV_CLAIM_SELECT",$J,Z1,0)) S ^(0)=Z0,IBCT=IBCT+1
"RTN","IBCEPTC",45,0)
 S ^TMP("IB_PREV_CLAIM_SELECT",$J)=IBCT
"RTN","IBCEPTC",46,0)
 D RESUB^IBCEPTC2
"RTN","IBCEPTC",47,0)
 G ENQ
"RTN","IBCEPTC",48,0)
 ;
"RTN","IBCEPTC",49,0)
Q1A K ^TMP("IB_PREV_CLAIM_INS",$J)
"RTN","IBCEPTC",50,0)
 S DIR(0)="SA^A:All Payers;S:Selected Payers"
"RTN","IBCEPTC",51,0)
 S DIR("A")="Run for (A)ll Payers or (S)elected Payers?: " S DIR("B")="Selected Payers"
"RTN","IBCEPTC",52,0)
 W !!,"PAYER SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",53,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",54,0)
 I $D(DTOUT)!$D(DUOUT) G Q1
"RTN","IBCEPTC",55,0)
 ;
"RTN","IBCEPTC",56,0)
 I Y="A" S ^TMP("IB_PREV_CLAIM_INS",$J)="" G Q2
"RTN","IBCEPTC",57,0)
 ;
"RTN","IBCEPTC",58,0)
 S ^TMP("IB_PREV_CLAIM_INS",$J)=1
"RTN","IBCEPTC",59,0)
 S IBQUIT=0
"RTN","IBCEPTC",60,0)
 F  S DIC(0)="AEMQ",DIC="^DIC(36,",DIC("A")="Select Specific Payer: " D ^DIC K DIC D  Q:IBQUIT
"RTN","IBCEPTC",61,0)
 . I Y>0 S ^TMP("IB_PREV_CLAIM_INS",$J,+Y)="" Q
"RTN","IBCEPTC",62,0)
 . I X="",$O(^TMP("IB_PREV_CLAIM_INS",$J,0)) S IBQUIT=1 Q
"RTN","IBCEPTC",63,0)
 . I X="" W !!,"No specific payers selected!!" S IBQUIT=2 Q
"RTN","IBCEPTC",64,0)
 . I X=U S IBQUIT=2 Q
"RTN","IBCEPTC",65,0)
 . I X="^^" S IBQUIT=3 Q
"RTN","IBCEPTC",66,0)
 . I Y'>0 Q
"RTN","IBCEPTC",67,0)
 ;
"RTN","IBCEPTC",68,0)
 I IBQUIT=2 G Q1A
"RTN","IBCEPTC",69,0)
 I IBQUIT=3 G ENQ
"RTN","IBCEPTC",70,0)
 ;
"RTN","IBCEPTC",71,0)
Q2 S DIR(0)="SA^H:HCFA 1500;U:UB92;B:Both",DIR("B")="Both"
"RTN","IBCEPTC",72,0)
 S DIR("A")="Run for (U)B92, (H)CFA 1500 or (B)oth: "
"RTN","IBCEPTC",73,0)
 W !!,"BILL FORM TYPE SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",74,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",75,0)
 I $D(DTOUT)!$D(DUOUT) G Q1A
"RTN","IBCEPTC",76,0)
 S IBFORM=Y
"RTN","IBCEPTC",77,0)
 ;
"RTN","IBCEPTC",78,0)
Q3 S DIR(0)="DA^0:9999999:EPX",DIR("A")="Start with Date Last Transmitted: "
"RTN","IBCEPTC",79,0)
 S DIR("?",1)="This is the earliest date on which a batch that you want to include on this",DIR("?",2)=" report was last transmitted. You may choose a maximum date range of 90 days.",DIR("?")=" "
"RTN","IBCEPTC",80,0)
 W !!,"LAST BATCH TRANSMIT DATE RANGE SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",81,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",82,0)
 I $D(DTOUT)!$D(DUOUT) G Q2
"RTN","IBCEPTC",83,0)
 S IBDT1=Y
"RTN","IBCEPTC",84,0)
 S IBDT2=$$FMADD^XLFDT(IBDT1,90) I IBDT2>DT S IBDT2=DT
"RTN","IBCEPTC",85,0)
 S DIR("?",1)="This is the latest date on which a batch that you want to include on this",DIR("?",2)=" report was last transmitted. You may choose a maximum date range of 90 days.",DIR("?")=" "
"RTN","IBCEPTC",86,0)
 S DIR("B")=$$FMTE^XLFDT(IBDT2,2),DIR(0)="DA^"_IBDT1_":"_IBDT2_":EPX"
"RTN","IBCEPTC",87,0)
 S DIR("A")="Go to Date Last Transmitted:("_$$FMTE^XLFDT(IBDT1,2)_"-"_$$FMTE^XLFDT(IBDT2,2)_"): " D ^DIR K DIR
"RTN","IBCEPTC",88,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",89,0)
 I $D(DTOUT)!$D(DUOUT) G Q3
"RTN","IBCEPTC",90,0)
 S IBDT2=Y
"RTN","IBCEPTC",91,0)
 ;
"RTN","IBCEPTC",92,0)
Q4 ; Additional selection criteria
"RTN","IBCEPTC",93,0)
 S DIR(0)="SAO^1:MRA Secondary Only;2:Primary Claims Only;3:Secondary Claims Only;4:Claims Previously Printed at Clearinghouse"
"RTN","IBCEPTC",94,0)
 S DIR("A",1)="ADDITIONAL SELECTION CRITERIA:",DIR("A",2)=" ",DIR("A",3)="1 - MRA Secondary Only",DIR("A",4)="2 - Primary Claims Only",DIR("A",5)="3 - Secondary Claims Only"
"RTN","IBCEPTC",95,0)
 S DIR("A",6)="4 - Claims Sent to Print at Clearinghouse Only",DIR("A",7)=" ",DIR("A")="Select Additional Limiting Criteria (optional): "
"RTN","IBCEPTC",96,0)
 S DIR("?")="Select one of the listed criteria to further limit the claims to include"
"RTN","IBCEPTC",97,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",98,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",99,0)
 I $D(DTOUT)!$D(DUOUT) G Q3
"RTN","IBCEPTC",100,0)
 S IBCRIT=Y
"RTN","IBCEPTC",101,0)
 ;
"RTN","IBCEPTC",102,0)
Q5 S DIR("L",1)="Select one of the following: ",DIR("L",2)=" ",DIR("L",3)=$J("",10)_"1         Batch By Last Transmitted Date (Claims within a Batch)",DIR("L",4)=$J("",10)_"2         Current Payer (Insurance Company)"
"RTN","IBCEPTC",103,0)
 S DIR("L",5)=" "
"RTN","IBCEPTC",104,0)
 S DIR(0)="SA^1:Batch By Last Transmitted Date (Claims within a Batch);2:Current Payer (Insurance Company)",DIR("B")="Current Payer"
"RTN","IBCEPTC",105,0)
 S DIR("A")="Sort By: "
"RTN","IBCEPTC",106,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",107,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",108,0)
 I $D(DTOUT)!$D(DUOUT) G Q4
"RTN","IBCEPTC",109,0)
 S IBSORT=Y
"RTN","IBCEPTC",110,0)
 ;
"RTN","IBCEPTC",111,0)
Q6 S DIR(0)="SA^R:Report;S:Screen List"
"RTN","IBCEPTC",112,0)
 S DIR("A")="Do you want a (R)eport or a (S)creen List format?: "
"RTN","IBCEPTC",113,0)
 S DIR("B")="Screen List"
"RTN","IBCEPTC",114,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",115,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",116,0)
 I $D(DTOUT)!$D(DUOUT) G Q5
"RTN","IBCEPTC",117,0)
 S IBREP=Y
"RTN","IBCEPTC",118,0)
 ; 
"RTN","IBCEPTC",119,0)
 I IBREP="S" D LIST G ENQ
"RTN","IBCEPTC",120,0)
 ;
"RTN","IBCEPTC",121,0)
Q7 ; Select device
"RTN","IBCEPTC",122,0)
 F  S IBACT=0 D DEVSEL(.IBACT) Q:IBACT
"RTN","IBCEPTC",123,0)
 I IBACT=99 G ENQ
"RTN","IBCEPTC",124,0)
 U IO
"RTN","IBCEPTC",125,0)
 D LIST
"RTN","IBCEPTC",126,0)
 ;
"RTN","IBCEPTC",127,0)
ENQ K ^TMP("IB_PREV_CLAIM_INS",$J),^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC",128,0)
 Q
"RTN","IBCEPTC",129,0)
 ;
"RTN","IBCEPTC",130,0)
LIST ; Queued report format entrypoint
"RTN","IBCEPTC",131,0)
 ; variables pre-defined: IBREP,IBSORT,IBFORM,IBDT1,IBDT2,IBCRIT
"RTN","IBCEPTC",132,0)
 ;  ^TMP("IB_PREV_CLAIM_INS,$J) global
"RTN","IBCEPTC",133,0)
 K ^TMP("IB_PREV_CLAIM",$J)
"RTN","IBCEPTC",134,0)
 N IBBDA,IBBDA0,IBCURI,IBDA,IBDT,IBFT,IBIFN,IBINS,IBS1,IBS2,IBDTX
"RTN","IBCEPTC",135,0)
 I IBREP="R" N IBPAGE,IBSTOP,IBHDRDT S (IBPAGE,IBSTOP)=0
"RTN","IBCEPTC",136,0)
 S IBDT=IBDT1-.1
"RTN","IBCEPTC",137,0)
 S IBINS=+$G(^TMP("IB_PREV_CLAIM_INS",$J))
"RTN","IBCEPTC",138,0)
 F  S IBDT=$O(^IBA(364.1,"ALT",IBDT)) Q:'IBDT!((IBDT\1)>IBDT2)  S IBBDA=0 F  S IBBDA=$O(^IBA(364.1,"ALT",IBDT,IBBDA)) Q:'IBBDA  D
"RTN","IBCEPTC",139,0)
 . S IBDTX=IBDT\1
"RTN","IBCEPTC",140,0)
 . S IBDA=0 F  S IBDA=$O(^IBA(364,"C",IBBDA,IBDA)) Q:'IBDA  S IBIFN=+$G(^IBA(364,IBDA,0)) D
"RTN","IBCEPTC",141,0)
 .. I IBFORM'="B" S IBFT=$$FT^IBCEF(IBIFN) Q:$S(IBFT=3:IBFORM="H",IBFT=2:IBFORM="U",1:1)
"RTN","IBCEPTC",142,0)
 .. S IBCURI=$$CURR^IBCEF2(IBIFN) Q:'IBCURI
"RTN","IBCEPTC",143,0)
 .. I IBINS Q:'$D(^TMP("IB_PREV_CLAIM_INS",$J,IBCURI))
"RTN","IBCEPTC",144,0)
 .. I IBCRIT=1 Q:'$$MRASEC^IBCEF4(IBIFN)
"RTN","IBCEPTC",145,0)
 .. I IBCRIT=2 Q:$$COBN^IBCEF(IBIFN)>1
"RTN","IBCEPTC",146,0)
 .. I IBCRIT=3 Q:$$COBN^IBCEF(IBIFN)=1
"RTN","IBCEPTC",147,0)
 .. I IBCRIT=4 Q:'$P($G(^DGCR(399,IBIFN,"TX")),U,7)
"RTN","IBCEPTC",148,0)
 .. S IBBDA0=$G(^IBA(364.1,+IBBDA,0))
"RTN","IBCEPTC",149,0)
 .. S IBS1=$S(IBSORT=1:(99999999-IBDTX)_U_$P(IBBDA0,U)_U_$P(IBBDA0,U,14)_U_+$P(IBBDA0,U,5),1:$P($G(^DIC(36,+IBCURI,0)),U)_U_+IBCURI),IBS2=$S(IBSORT=1:$P($G(^DGCR(399,IBIFN,0)),U),1:99999999-IBDTX)
"RTN","IBCEPTC",150,0)
 .. ; Meets all selection criteria - extract to sort global
"RTN","IBCEPTC",151,0)
 .. S:IBS1="" IBS1=" " S:IBS2="" IBS2=" "
"RTN","IBCEPTC",152,0)
 .. I '$D(^TMP("IB_PREV_CLAIM",$J,IBS1)) S ^TMP("IB_PREV_CLAIM",$J,IBS1)=$S(IBSORT=1:$$FMTE^XLFDT(IBDTX,"1"),1:IBIFN)
"RTN","IBCEPTC",153,0)
 .. S ^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)=""
"RTN","IBCEPTC",154,0)
 ;
"RTN","IBCEPTC",155,0)
 I IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2) G END  ; Output report
"RTN","IBCEPTC",156,0)
 ;
"RTN","IBCEPTC",157,0)
 D EN^VALM("IBCE VIEW PREV TRANS"_IBSORT) ; List Manager
"RTN","IBCEPTC",158,0)
 ;
"RTN","IBCEPTC",159,0)
END K ^TMP("IB_PREV_CLAIM",$J),^TMP("IB_PREV_CLAIM_INS",$J)
"RTN","IBCEPTC",160,0)
 Q
"RTN","IBCEPTC",161,0)
 ;
"RTN","IBCEPTC",162,0)
DEVSEL(IBACT) ;
"RTN","IBCEPTC",163,0)
 N DIR,POP,X,Y,ZTRTN,ZTSAVE
"RTN","IBCEPTC",164,0)
 W !!,"You will need a 132 column printer for this report!"
"RTN","IBCEPTC",165,0)
 S %ZIS="QM" D ^%ZIS I POP S IBACT=99 G DEVSELQ
"RTN","IBCEPTC",166,0)
 I $G(IOM),IOM<132 S IBOK=1 D  I 'IBOK S IBACT=0 G DEVSELQ
"RTN","IBCEPTC",167,0)
 . S DIR(0)="YA",DIR("A",1)="This report requires output to a 132 column device.",DIR("A",2)="The device you have chosen is only set for "_IOM_".",DIR("A")="Are you sure you want to continue?: ",DIR("B")="No"
"RTN","IBCEPTC",168,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC",169,0)
 . I Y'=1 S IBOK=0 W !
"RTN","IBCEPTC",170,0)
 I $D(IO("Q")) D  S IBACT=99 G DEVSELQ
"RTN","IBCEPTC",171,0)
 . K IO("Q")
"RTN","IBCEPTC",172,0)
 . S ZTRTN="LIST^IBCEPTC",ZTSAVE("IBCRIT(")="",ZTSAVE("IB*")="",ZTSAVE("^TMP(""IB_PREV_CLAIM_INS"",$J)")="",ZTSAVE("^TMP(""IB_PREV_CLAIM_INS"",$J,")="",ZTDESC="IB - Previously Transmitted Claims Report"
"RTN","IBCEPTC",173,0)
 . D ^%ZTLOAD K ZTSK D HOME^%ZIS
"RTN","IBCEPTC",174,0)
 S IBACT=1
"RTN","IBCEPTC",175,0)
DEVSELQ Q
"RTN","IBCEPTC",176,0)
 ;
"RTN","IBCEPTC",177,0)
SELDSP(IBHOW) ; Display list of selected claims/batches
"RTN","IBCEPTC",178,0)
 ; IBHOW = "C" for claims   "B" for batches
"RTN","IBCEPTC",179,0)
 N Z,DIR,CT,QUIT
"RTN","IBCEPTC",180,0)
 I '$O(^TMP($J,IBHOW,0)) Q
"RTN","IBCEPTC",181,0)
 S (CT,QUIT)=0
"RTN","IBCEPTC",182,0)
 W !!,$S(IBHOW="C":"Claims",1:"Batches")," Already Selected:"
"RTN","IBCEPTC",183,0)
 S Z=0 F  S Z=$O(^TMP($J,IBHOW,Z)) Q:'Z!QUIT  S Z0=$G(^(Z)) D  Q:QUIT
"RTN","IBCEPTC",184,0)
 . I IBHOW="C" W !,?3,$P($G(^DGCR(399,Z,0)),U) Q
"RTN","IBCEPTC",185,0)
 . W !,?3,$P($G(^IBA(364.1,Z,0)),U),"  ",$P(^(0),U,3)," Claims"
"RTN","IBCEPTC",186,0)
 . S CT=CT+1
"RTN","IBCEPTC",187,0)
 . I '(CT#10),$O(^TMP($J,IBHOW,Z)) S DIR("A")="Press return for more or '^' to exit ",DIR(0)="EA" W ! D ^DIR K DIR I $D(DTOUT)!$D(DUOUT) S QUIT=1
"RTN","IBCEPTC",188,0)
 W !
"RTN","IBCEPTC",189,0)
 Q
"RTN","IBCEPTC",190,0)
 ;
"RTN","IBCEPTC1")
0^12^B16175723
"RTN","IBCEPTC1",1,0)
IBCEPTC1 ;ALB/TMK - EDI PREV TRANSMITTED CLAIMS REPORT OUTPUT ;01/20/05
"RTN","IBCEPTC1",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTC1",3,0)
 ;
"RTN","IBCEPTC1",4,0)
RPT(IBSORT,IBDT1,IBDT2) ; Output transmitted claims report
"RTN","IBCEPTC1",5,0)
 ; global ^TMP("IB_PREV_CLAIM",$J,srt1,srt2,ien of entry file 364)=""
"RTN","IBCEPTC1",6,0)
 N IBDA,IBIFN,IBPAGE,IBSTOP,IBHDR,IBS1,IBS2,Z,IBZ,IBREP
"RTN","IBCEPTC1",7,0)
 S (IBPAGE,IBSTOP)=0,IBPAGE(0)="",IBPAGE(1)="",IBREP="R"
"RTN","IBCEPTC1",8,0)
 S IBHDR="Transmitted Claims Report for period covering "_$$FMTE^XLFDT(IBDT1,1)_" thru "_$$FMTE^XLFDT(IBDT2,1)_$J("",14)_$$HTE^XLFDT($H,"1M"),IBHDR=IBHDR_$J("",124-$L(IBHDR))_"Page"
"RTN","IBCEPTC1",9,0)
 S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D  Q:IBSTOP
"RTN","IBCEPTC1",10,0)
 . ; First level sort
"RTN","IBCEPTC1",11,0)
 . D:($Y+6)>IOSL!'IBPAGE HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",12,0)
 . S IBPAGE(1)=IBS1,IBPAGE(0)="" ; Hold data for hdr repeated on new pg
"RTN","IBCEPTC1",13,0)
 . D HDR1(IBSORT,IBS1,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",14,0)
 . ;
"RTN","IBCEPTC1",15,0)
 . S IBPAGE(0)=1
"RTN","IBCEPTC1",16,0)
 . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""!IBSTOP  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)) Q:'IBDA!IBSTOP  D
"RTN","IBCEPTC1",17,0)
 .. S IBIFN=+$G(^IBA(364,+IBDA,0))
"RTN","IBCEPTC1",18,0)
 .. ;
"RTN","IBCEPTC1",19,0)
 .. D:($Y+5)>IOSL!'IBPAGE HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",20,0)
 .. D WRT^IBCEPTC2(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,"",.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",21,0)
 . S IBPAGE(0)=""
"RTN","IBCEPTC1",22,0)
 ;
"RTN","IBCEPTC1",23,0)
 G:IBSTOP STOP
"RTN","IBCEPTC1",24,0)
 I 'IBPAGE D WRT^IBCEPTC2("NO PREVIOUSLY TRANSMITTED CLAIMS EXIST TO MATCH THE SEARCH CRITERIA SELECTED","",0,0,IBSORT,IBREP,IBHDR,0,0)
"RTN","IBCEPTC1",25,0)
 ;
"RTN","IBCEPTC1",26,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC1",27,0)
 ;
"RTN","IBCEPTC1",28,0)
STOP I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCEPTC1",29,0)
 I '$D(ZTQUEUED) W ! D ^%ZISC
"RTN","IBCEPTC1",30,0)
 ;
"RTN","IBCEPTC1",31,0)
 Q
"RTN","IBCEPTC1",32,0)
 ;
"RTN","IBCEPTC1",33,0)
HDR1(IBSORT,IBDATA,IBPAGE,IBSTOP) ; First level report sort headers
"RTN","IBCEPTC1",34,0)
 ; IBSORT = sort type
"RTN","IBCEPTC1",35,0)
 ; IBDATA = data at the 1st sort level
"RTN","IBCEPTC1",36,0)
 I ($Y+11)>IOSL D HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",37,0)
 N Z,X,Y,Q
"RTN","IBCEPTC1",38,0)
 I IBSORT=1 D
"RTN","IBCEPTC1",39,0)
 . S Q="Batch Number: "_$P(IBDATA,U,2)_$S('$P(IBDATA,U,4):"",1:"  ** This batch was rejected **")_$S('$P(IBDATA,U,3):"",1:"  ** This batch was a test batch **")
"RTN","IBCEPTC1",40,0)
 . W !!,Q W:$G(IBPAGE(0)) $J("",120-$L(Q)),"(Continued)" W !,"Date Last Transmitted: ",$$FMTE^XLFDT(99999999-IBDATA,1)
"RTN","IBCEPTC1",41,0)
 . S Z="",$P(Z,"=",133)="" W !,Z
"RTN","IBCEPTC1",42,0)
 . W !,"Claim #   Form  Type   Seq  Status",$J("",11),"Current Payer",$J("",16),"Payer Address",$J("",21),"Other Payer(s)",!
"RTN","IBCEPTC1",43,0)
 ;
"RTN","IBCEPTC1",44,0)
 I IBSORT=2 D
"RTN","IBCEPTC1",45,0)
 . N IBZ,IBIFN
"RTN","IBCEPTC1",46,0)
 . S IBIFN=""
"RTN","IBCEPTC1",47,0)
 . I IBDATA'="" S IBIFN=+$G(^TMP("IB_PREV_CLAIM",$J,IBDATA))
"RTN","IBCEPTC1",48,0)
 . S Q="Current Payer: "_$P(IBDATA,U)
"RTN","IBCEPTC1",49,0)
 . D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
"RTN","IBCEPTC1",50,0)
 . S Q=Q_"  "_$G(IBZ(1))_$S($G(IBZ(1))'="":",",1:"")_" "_$G(IBZ(4))_$S($G(IBZ(4))'="":",",1:"")_" "_$P($G(^DIC(5,+$G(IBZ(5)),0)),U,2)
"RTN","IBCEPTC1",51,0)
 . W !!,Q
"RTN","IBCEPTC1",52,0)
 . I $G(IBPAGE(0)) D
"RTN","IBCEPTC1",53,0)
 .. I $L(Q)>119 S Q="" W !
"RTN","IBCEPTC1",54,0)
 .. W $J("",120-$L(Q)),"(Continued)"
"RTN","IBCEPTC1",55,0)
 . S Z="",$P(Z,"=",133)="" W !,Z
"RTN","IBCEPTC1",56,0)
 . W !,"Claim #   Form  Type   Seq  Status",$J("",11),"Other Payer(s)",$J("",15),"Date Last Transmitted  Batch Number",!
"RTN","IBCEPTC1",57,0)
 ;
"RTN","IBCEPTC1",58,0)
 Q
"RTN","IBCEPTC1",59,0)
 ;
"RTN","IBCEPTC1",60,0)
HDR(IBHDR,IBSORT,IBPAGE,IBSTOP) ; Report header
"RTN","IBCEPTC1",61,0)
 ;
"RTN","IBCEPTC1",62,0)
 N Z,DIR,X,Y
"RTN","IBCEPTC1",63,0)
 I IBPAGE D  Q:IBSTOP
"RTN","IBCEPTC1",64,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBSTOP=('Y) Q:IBSTOP
"RTN","IBCEPTC1",65,0)
 . W @IOF
"RTN","IBCEPTC1",66,0)
 S IBPAGE=IBPAGE+1,Z=IBHDR_$J(IBPAGE,4)
"RTN","IBCEPTC1",67,0)
 W !,Z
"RTN","IBCEPTC1",68,0)
 W !,"** A claim may appear on this report multiple times if it has been transmitted more than once. **"
"RTN","IBCEPTC1",69,0)
 I IBSORT=2 D
"RTN","IBCEPTC1",70,0)
 . W !,"** T indicates the claim was transmitted as a test claim prior to turning on EDI live for the payer. **"
"RTN","IBCEPTC1",71,0)
 . W !,"** R indicates that the batch was rejected. **"
"RTN","IBCEPTC1",72,0)
 I IBPAGE>1,$G(IBPAGE(0)) D HDR1(IBSORT,IBPAGE(1),.IBPAGE,.IBSTOP)
"RTN","IBCEPTC1",73,0)
 Q
"RTN","IBCEPTC1",74,0)
 ;
"RTN","IBCEPTC2")
0^13^B95600462
"RTN","IBCEPTC2",1,0)
IBCEPTC2 ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS LIST MGR ;01/20/05
"RTN","IBCEPTC2",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTC2",3,0)
 ;
"RTN","IBCEPTC2",4,0)
HDR ;
"RTN","IBCEPTC2",5,0)
 K VALMHDR
"RTN","IBCEPTC2",6,0)
 S VALMHDR(1)="** A claim may appear multiple times if transmitted more than once. **"
"RTN","IBCEPTC2",7,0)
 I $G(IBSORT)=1 D
"RTN","IBCEPTC2",8,0)
 . S VALMHDR(2)=">>># of Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",9,0)
 I $G(IBSORT)=2 D
"RTN","IBCEPTC2",10,0)
 . S VALMHDR(2)=" ** T=claim was only sent as a test claim   ** R=batch was rejected"
"RTN","IBCEPTC2",11,0)
 . S VALMHDR(3)=" >>># of Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",12,0)
 ;
"RTN","IBCEPTC2",13,0)
 Q
"RTN","IBCEPTC2",14,0)
 ;
"RTN","IBCEPTC2",15,0)
INIT ;
"RTN","IBCEPTC2",16,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCEPTC2",17,0)
 D BLD
"RTN","IBCEPTC2",18,0)
 Q
"RTN","IBCEPTC2",19,0)
 ;
"RTN","IBCEPTC2",20,0)
BLD ; Build display lines
"RTN","IBCEPTC2",21,0)
 N IBDA,IBS1,IBS2,IBIFN,IB0,IBX,IBCNT,IBLEV1,IBBDA
"RTN","IBCEPTC2",22,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J),^TMP("IB_PREV_CLAIM_SELECT",$J),^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",23,0)
 S IBCNT=0
"RTN","IBCEPTC2",24,0)
 I $O(^TMP("IB_PREV_CLAIM",$J,""))="" D  G BLDQ
"RTN","IBCEPTC2",25,0)
 . S IBX=" ** NO PREVIOUSLY TRANSMITTED CLAIMS EXIST FOR SEARCH CRITERIA SELECTED **"
"RTN","IBCEPTC2",26,0)
 . D WRT(IBX,"",0,0,"","S","",.IBCNT,0)
"RTN","IBCEPTC2",27,0)
 ;
"RTN","IBCEPTC2",28,0)
 S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D
"RTN","IBCEPTC2",29,0)
 . ; First level sort
"RTN","IBCEPTC2",30,0)
 . I IBSORT=1 S IBLEV1="Batch: "_$P(IBS1,U,2)_"  Date Last Transmitted: "_$G(^TMP("IB_PREV_CLAIM",$J,IBS1)),IBBDA=+$O(^IBA(364.1,"B",$P(IBS1,U,2),0)) D
"RTN","IBCEPTC2",31,0)
 .. I $P(IBS1,U,3) S IBLEV1=IBLEV1_" ** Test"
"RTN","IBCEPTC2",32,0)
 .. I $P(IBS1,U,4) S IBLEV1=IBLEV1_" ** Rejected"
"RTN","IBCEPTC2",33,0)
 . I IBSORT=2 D
"RTN","IBCEPTC2",34,0)
 .. S IBLEV1="Insurance Co: "_$P(IBS1,U)_"  "_$$CURRINS(+$G(^TMP("IB_PREV_CLAIM",$J,IBS1)))
"RTN","IBCEPTC2",35,0)
 . D WRT(IBLEV1,"",0,0,IBSORT,"S","",IBCNT,0) ; Add header line
"RTN","IBCEPTC2",36,0)
 . ;
"RTN","IBCEPTC2",37,0)
 . I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA)=VALMCNT
"RTN","IBCEPTC2",38,0)
 . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)) Q:'IBDA  D
"RTN","IBCEPTC2",39,0)
 .. S IBIFN=+$G(^IBA(364,+IBDA,0)),IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",40,0)
 .. D WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,"S","",.IBCNT,0)
"RTN","IBCEPTC2",41,0)
 .. I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA,VALMCNT)=IBIFN_U_IBCNT
"RTN","IBCEPTC2",42,0)
 ;
"RTN","IBCEPTC2",43,0)
BLDQ Q
"RTN","IBCEPTC2",44,0)
 ;
"RTN","IBCEPTC2",45,0)
EXIT ; Clean up code
"RTN","IBCEPTC2",46,0)
 ;
"RTN","IBCEPTC2",47,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J)
"RTN","IBCEPTC2",48,0)
 K ^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC2",49,0)
 K ^TMP("IB_PREV_CLAIM_LIST_DX",$J)
"RTN","IBCEPTC2",50,0)
 K ^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",51,0)
 D CLEAR^VALM1
"RTN","IBCEPTC2",52,0)
 Q
"RTN","IBCEPTC2",53,0)
 ;
"RTN","IBCEPTC2",54,0)
SELECT ; Select claims to resubmit
"RTN","IBCEPTC2",55,0)
 N IBIFN,IBZ,IBI,IBQ,DIR,VALMY,X,Y
"RTN","IBCEPTC2",56,0)
 D FULL^VALM1
"RTN","IBCEPTC2",57,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCEPTC2",58,0)
 S IBZ=0 F  S IBZ=$O(VALMY(IBZ)) Q:'IBZ  D
"RTN","IBCEPTC2",59,0)
 . S IBQ=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBZ)),IBI=+$P(IBQ,U,2),IBQ=+IBQ
"RTN","IBCEPTC2",60,0)
 . S IBIFN=+$G(^IBA(364,IBI,0))
"RTN","IBCEPTC2",61,0)
 . Q:'IBIFN
"RTN","IBCEPTC2",62,0)
 . D MARK(IBIFN,IBZ,IBQ,IBI,1,.VALMHDR)
"RTN","IBCEPTC2",63,0)
 S VALMBCK="R"
"RTN","IBCEPTC2",64,0)
 Q
"RTN","IBCEPTC2",65,0)
 ;
"RTN","IBCEPTC2",66,0)
SELBATCH ; Select a batch to resubmit
"RTN","IBCEPTC2",67,0)
 N DIC,DIR,X,Y,Z,IBQ,IBZ,IBI,IBDX,IBASK,IBOK,IBY,DTOUT,DUOUT
"RTN","IBCEPTC2",68,0)
 D FULL^VALM1
"RTN","IBCEPTC2",69,0)
 I IBSORT'=1 D  G SELBQ
"RTN","IBCEPTC2",70,0)
 . S DIR(0)="EA",DIR("A",1)="This action is not available unless you chose to sort by batch",DIR("A")="Press return to continue: "
"RTN","IBCEPTC2",71,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC2",72,0)
 S DIC="^IBA(364.1,",DIC(0)="AEMQ",DIC("S")="I $D(^TMP(""IB_PREV_CLAIM_BATCH"",$J,+Y))"
"RTN","IBCEPTC2",73,0)
 D ^DIC K DIC
"RTN","IBCEPTC2",74,0)
 I Y'>0 G SELBQ
"RTN","IBCEPTC2",75,0)
 S IBY=+Y,VALMBG=+$G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY))
"RTN","IBCEPTC2",76,0)
 ;
"RTN","IBCEPTC2",77,0)
 S (IBOK,IBASK)=1
"RTN","IBCEPTC2",78,0)
 I $G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")) D  G:'IBOK SELBQ
"RTN","IBCEPTC2",79,0)
 . S DIR(0)="YA",DIR("A",1)="This batch was previously selected.",DIR("A")="Do you want to de-select all claims in this batch?: ",DIR("B")="No"
"RTN","IBCEPTC2",80,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC2",81,0)
 . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEPTC2",82,0)
 . I Y S IBASK=0 K ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")
"RTN","IBCEPTC2",83,0)
 ;
"RTN","IBCEPTC2",84,0)
 S IBQ=0      ; last screen row# for claim
"RTN","IBCEPTC2",85,0)
 F  S IBQ=$O(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,IBQ)) Q:'IBQ  D
"RTN","IBCEPTC2",86,0)
 . S IBZ=$G(^(IBQ))      ; IBIFN^selection#
"RTN","IBCEPTC2",87,0)
 . S Z=$P(IBZ,U,2)       ; selection#
"RTN","IBCEPTC2",88,0)
 . S IBDX=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,+Z))   ; 1st screen row# for claim^364 ien
"RTN","IBCEPTC2",89,0)
 . S IBI=$P(IBDX,U,2)    ; 364 ien
"RTN","IBCEPTC2",90,0)
 . D MARK(+IBZ,Z,+IBDX,IBI,IBASK,.VALMHDR)
"RTN","IBCEPTC2",91,0)
 ;
"RTN","IBCEPTC2",92,0)
 I IBASK S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")=1
"RTN","IBCEPTC2",93,0)
 ;
"RTN","IBCEPTC2",94,0)
SELBQ S VALMBCK="R"
"RTN","IBCEPTC2",95,0)
 Q
"RTN","IBCEPTC2",96,0)
 ;
"RTN","IBCEPTC2",97,0)
MARK(IBIFN,IBZ,IBQ,IBI,IBASK,VALMHDR) ; Mark claim as selected for resubmit
"RTN","IBCEPTC2",98,0)
 ; Returns VALMHDR killed if any selections/de-selections made
"RTN","IBCEPTC2",99,0)
 N DIR,X,Y
"RTN","IBCEPTC2",100,0)
 I $D(^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)) D  Q
"RTN","IBCEPTC2",101,0)
 . S Y=1
"RTN","IBCEPTC2",102,0)
 . I IBASK D
"RTN","IBCEPTC2",103,0)
 .. S DIR(0)="YA",DIR("B")="No",DIR("A",1)="Claim "_$P($G(^DGCR(399,IBIFN,0)),U)_" for entry # "_IBZ_" has already been selected",DIR("A")="Do you want to de-select it?: " W ! D ^DIR K DIR
"RTN","IBCEPTC2",104,0)
 . I Y=1 K ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN) S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)=" ",^TMP("IB_PREV_CLAIM_SELECT",$J)=^TMP("IB_PREV_CLAIM_SELECT",$J)-1 K VALMHDR
"RTN","IBCEPTC2",105,0)
 ;
"RTN","IBCEPTC2",106,0)
 S ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)=IBQ,^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN,0)=IBI,^TMP("IB_PREV_CLAIM_SELECT",$J)=$G(^TMP("IB_PREV_CLAIM_SELECT",$J))+1
"RTN","IBCEPTC2",107,0)
 S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)="*" K VALMHDR
"RTN","IBCEPTC2",108,0)
 Q
"RTN","IBCEPTC2",109,0)
 ;
"RTN","IBCEPTC2",110,0)
VIEW ; View claims selected
"RTN","IBCEPTC2",111,0)
 N IBCT,IBQUIT,DIR,X,Y,Z,Z0
"RTN","IBCEPTC2",112,0)
 D FULL^VALM1
"RTN","IBCEPTC2",113,0)
 I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  G VIEWQ
"RTN","IBCEPTC2",114,0)
 . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
"RTN","IBCEPTC2",115,0)
 W @IOF
"RTN","IBCEPTC2",116,0)
 S (IBQUIT,IBCT)=0
"RTN","IBCEPTC2",117,0)
 W !,+^TMP("IB_PREV_CLAIM_SELECT",$J)," claims selected:"
"RTN","IBCEPTC2",118,0)
 S Z="" F  S Z=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,Z)) Q:'Z  S Z0=+$G(^(Z)) D
"RTN","IBCEPTC2",119,0)
 . Q:'$D(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0))
"RTN","IBCEPTC2",120,0)
 . S IBCT=IBCT+1
"RTN","IBCEPTC2",121,0)
 . I '(IBCT#15) S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCEPTC2",122,0)
 .. S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC2",123,0)
 .. I 'Y S IBQUIT=1
"RTN","IBCEPTC2",124,0)
 . W !,"  ",$E(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0),7,51)
"RTN","IBCEPTC2",125,0)
 ;
"RTN","IBCEPTC2",126,0)
 G:IBQUIT VIEWQ
"RTN","IBCEPTC2",127,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC2",128,0)
 ;
"RTN","IBCEPTC2",129,0)
VIEWQ S VALMBCK="R"
"RTN","IBCEPTC2",130,0)
 Q
"RTN","IBCEPTC2",131,0)
 ;
"RTN","IBCEPTC2",132,0)
RESUB ; Resubmit selected claims
"RTN","IBCEPTC2",133,0)
 N DIR,X,Y,Z,Z0,Z1
"RTN","IBCEPTC2",134,0)
 D FULL^VALM1
"RTN","IBCEPTC2",135,0)
 I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  S VALMBCK="R" G RESUBQ
"RTN","IBCEPTC2",136,0)
 . N DIR,X,Y
"RTN","IBCEPTC2",137,0)
 . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
"RTN","IBCEPTC2",138,0)
 ;
"RTN","IBCEPTC2",139,0)
 S DIR(0)="YA",DIR("B")="No",DIR("A",1)="You are about to resubmit "_+^TMP("IB_PREV_CLAIM_SELECT",$J)_" claims as TEST",DIR("A")="Are you sure you want to continue?: " W ! D ^DIR K DIR
"RTN","IBCEPTC2",140,0)
 I Y'=1 S VALMBCK="R" G RESUBQ
"RTN","IBCEPTC2",141,0)
 ;
"RTN","IBCEPTC2",142,0)
RESUB1 ; Entrypoint to resubmit on exit
"RTN","IBCEPTC2",143,0)
 W !,"Resubmission in process ..."
"RTN","IBCEPTC2",144,0)
 S ^TMP("IBEDI_TEST_BATCH",$J)=1
"RTN","IBCEPTC2",145,0)
 S Z=0 F  S Z=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,Z)) Q:'Z  S Z1=+$G(^(Z)),Z0=+$G(^(Z,0)) I Z0 D
"RTN","IBCEPTC2",146,0)
 . S ^TMP("IBEDI_TEST_BATCH",$J,Z0)=""
"RTN","IBCEPTC2",147,0)
 . S:Z1 $E(^TMP("IB_PREV_CLAIM_LIST",$J,Z1,0),6)=" "
"RTN","IBCEPTC2",148,0)
 ;
"RTN","IBCEPTC2",149,0)
 M ^TMP("IBRESUBMIT",$J)=^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEPTC2",150,0)
 S ^TMP("IBRESUBMIT",$J)="^^0^1"
"RTN","IBCEPTC2",151,0)
 D ONE^IBCE837
"RTN","IBCEPTC2",152,0)
 K ^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBRESUBMIT",$J),^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC2",153,0)
 S DIR(0)="EA",DIR("A",1)="Selected claims have been resubmitted as TEST",DIR("A")="Press return to continue " W ! D ^DIR K DIR
"RTN","IBCEPTC2",154,0)
 K VALMHDR S VALMBCK="R"
"RTN","IBCEPTC2",155,0)
 ;
"RTN","IBCEPTC2",156,0)
RESUBQ Q
"RTN","IBCEPTC2",157,0)
 ;
"RTN","IBCEPTC2",158,0)
REPORT ; Print report
"RTN","IBCEPTC2",159,0)
 ; Assumes IBSORT, IBDT1, IBDT2 defined
"RTN","IBCEPTC2",160,0)
 N IBACT,Z
"RTN","IBCEPTC2",161,0)
 D FULL^VALM1
"RTN","IBCEPTC2",162,0)
 F  S IBACT=0 D DEVSEL^IBCEPTC(.IBACT) Q:IBACT 
"RTN","IBCEPTC2",163,0)
 I IBACT'=99 D
"RTN","IBCEPTC2",164,0)
 . N IBREP
"RTN","IBCEPTC2",165,0)
 . S IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2)
"RTN","IBCEPTC2",166,0)
 ;
"RTN","IBCEPTC2",167,0)
 D HOME^%ZIS
"RTN","IBCEPTC2",168,0)
 S VALMBCK="R"
"RTN","IBCEPTC2",169,0)
 Q
"RTN","IBCEPTC2",170,0)
 ;
"RTN","IBCEPTC2",171,0)
WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,IBHDR,IBPAGE,IBSTOP) ; Wrt/output
"RTN","IBCEPTC2",172,0)
 ;
"RTN","IBCEPTC2",173,0)
 N IBX,IB0,Z,IBCNT
"RTN","IBCEPTC2",174,0)
 S IBCNT=IBPAGE
"RTN","IBCEPTC2",175,0)
 ;
"RTN","IBCEPTC2",176,0)
 I 'IBIFN D  G WRTQ
"RTN","IBCEPTC2",177,0)
 . I IBREP="R" D  Q
"RTN","IBCEPTC2",178,0)
 .. S Z="",$P(Z,"=",133)=""
"RTN","IBCEPTC2",179,0)
 .. D SET(Z,1,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",180,0)
 .. D SET(IBS1,2,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",181,0)
 . D SET(IBS1,0,IBDA,IBREP,IBHDR,IBCNT+1,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",182,0)
 ;
"RTN","IBCEPTC2",183,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",184,0)
 S IBX=$E($P(IB0,U)_$J("",8),1,8)
"RTN","IBCEPTC2",185,0)
 S IBX=IBX_$S(IBSORT=2&$P($G(^IBA(364,+IBDA,0)),U,7):"T",1:" ")
"RTN","IBCEPTC2",186,0)
 S IBX=IBX_" "
"RTN","IBCEPTC2",187,0)
 S IBX=IBX_$S($P(IB0,U,19)=2:"HCFA",1:"UB92")_"  "
"RTN","IBCEPTC2",188,0)
 S Z=$$INPAT^IBCEF(IBIFN) S IBX=IBX_$S(Z:"INPT ",1:"OUTPT")_"  "
"RTN","IBCEPTC2",189,0)
 S IBX=IBX_$J($P(IB0,U,21),3)_"  "
"RTN","IBCEPTC2",190,0)
 S IBX=IBX_$E($$EXTERNAL^DILFD(399,.13,"",$P(IB0,U,13))_$J("",15),1,15)_"  "
"RTN","IBCEPTC2",191,0)
 ;
"RTN","IBCEPTC2",192,0)
 I IBSORT=1 D
"RTN","IBCEPTC2",193,0)
 . N Z,IBZ,IBXDATA
"RTN","IBCEPTC2",194,0)
 . ; Print current payer, payer address, other payers
"RTN","IBCEPTC2",195,0)
 . D F^IBCEF("N-CURR INSURANCE COMPANY NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",196,0)
 . S IBX=IBX_$E(IBZ_$J("",25),1,25)_"    "
"RTN","IBCEPTC2",197,0)
 . S IBX=IBX_$$CURRINS(IBIFN)
"RTN","IBCEPTC2",198,0)
 . K IBZ D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",199,0)
 . F Z=1,2 D
"RTN","IBCEPTC2",200,0)
 .. I Z=1 S IBX=IBX_$E($P($G(IBZ(1)),U),1,19),IBCNT=IBCNT+1 D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP) S IBX=""
"RTN","IBCEPTC2",201,0)
 .. I Z=2,$G(IBZ(2))'="" S IBX=$J("",108)_$E($P(IBZ(2),U),1,21) D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",202,0)
 ;
"RTN","IBCEPTC2",203,0)
 I IBSORT=2 D
"RTN","IBCEPTC2",204,0)
 . N Z,IBZ
"RTN","IBCEPTC2",205,0)
 . ; Print other payers, date last trans, batch #, reject flag
"RTN","IBCEPTC2",206,0)
 . D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",207,0)
 . S IBX=IBX_$E($P($G(IBZ(1)),U)_$J("",25),1,25)_"    "
"RTN","IBCEPTC2",208,0)
 . S Z=+$P($G(^IBA(364,+IBDA,0)),U,2) ; Batch ptr
"RTN","IBCEPTC2",209,0)
 . S IBX=IBX_$E($$FMTE^XLFDT($P($G(^IBA(364.1,+Z,1)),U,3)\1,"1")_$J("",21),1,21)_"  "
"RTN","IBCEPTC2",210,0)
 . S IBX=IBX_$E($P($G(^IBA(364.1,Z,0)),U)_$J("",10),1,10)_$S($P($G(^IBA(364.1,Z,0)),U,5):" R",1:"")
"RTN","IBCEPTC2",211,0)
 . S IBCNT=IBCNT+1 D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",212,0)
 . I $G(IBZ(2))'="" S IBX=$J("",45) S IBX=IBX_$E($P(IBZ(2),U),1,25) D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",213,0)
 ;
"RTN","IBCEPTC2",214,0)
WRTQ I IBREP="S" S IBPAGE=IBCNT
"RTN","IBCEPTC2",215,0)
 Q
"RTN","IBCEPTC2",216,0)
 ;
"RTN","IBCEPTC2",217,0)
SET(IBX,IBLINE,IBDA,IBREP,IBHDR,IBCNT,VALMCNT,IBPAGE,IBSTOP) ;
"RTN","IBCEPTC2",218,0)
 N Q,Z,IBZ
"RTN","IBCEPTC2",219,0)
 S IBZ=IBX,IBX=""
"RTN","IBCEPTC2",220,0)
 I IBREP="R" D  Q
"RTN","IBCEPTC2",221,0)
 . D:($Y+5)>IOSL!'IBPAGE HDR^IBCEPTC1(IBHDR,IBSORT,.IBPAGE,.IBSTOP) D
"RTN","IBCEPTC2",222,0)
 . I IBLINE F Z=1:1:IBLINE W !
"RTN","IBCEPTC2",223,0)
 . W:'IBSTOP IBZ
"RTN","IBCEPTC2",224,0)
 . Q
"RTN","IBCEPTC2",225,0)
 ; only display the counter if we have a line with the claim#
"RTN","IBCEPTC2",226,0)
 S VALMCNT=VALMCNT+1,^TMP("IB_PREV_CLAIM_LIST",$J,VALMCNT,0)=$S(IBDA&($TR($E(IBZ,1,8)," ")'=""):$E(IBCNT_"     ",1,5)_" ",1:$J("",6))_IBZ
"RTN","IBCEPTC2",227,0)
 S ^TMP("IB_PREV_CLAIM_LIST",$J,"IDX",VALMCNT,IBCNT)=""
"RTN","IBCEPTC2",228,0)
 I IBDA,$TR($E(IBZ,1,8)," ")'="" S ^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBCNT)=VALMCNT_U_IBDA
"RTN","IBCEPTC2",229,0)
 Q
"RTN","IBCEPTC2",230,0)
 ;
"RTN","IBCEPTC2",231,0)
CURRINS(IBIFN) ; Returns Current insurance address
"RTN","IBCEPTC2",232,0)
 N IBX,IBZ
"RTN","IBCEPTC2",233,0)
 D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
"RTN","IBCEPTC2",234,0)
 S IBX=$E($E($G(IBZ(1)),1,25)_" "_$G(IBZ(4))_" "_$P($G(^DIC(5,+$G(IBZ(5)),0)),U,2)_$J("",32),1,32)_"  "
"RTN","IBCEPTC2",235,0)
 Q IBX
"RTN","IBCEPTC2",236,0)
 ;
"RTN","IBCEPTC2",237,0)
CKSENT(VALMBCK) ; Make sure selected entries are transmitted
"RTN","IBCEPTC2",238,0)
 ;
"RTN","IBCEPTC2",239,0)
 N IBOK,DIR,X,Y
"RTN","IBCEPTC2",240,0)
 S IBOK=1
"RTN","IBCEPTC2",241,0)
 I $O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D
"RTN","IBCEPTC2",242,0)
 . D FULL^VALM1
"RTN","IBCEPTC2",243,0)
 . S DIR(0)="YA",DIR("A",1)="You have selected "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" claims, but have not resubmitted them",DIR("A")="Are you sure you want to quit before you resubmit them?: ",DIR("B")="No"
"RTN","IBCEPTC2",244,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC2",245,0)
 . I Y'=1 S VALMBCK="R",IBOK=0
"RTN","IBCEPTC2",246,0)
 I IBOK S VALMBCK="Q"
"RTN","IBCEPTC2",247,0)
 Q
"RTN","IBCEPTC2",248,0)
 ;
"RTN","IBCEPTM")
0^16^B9752792
"RTN","IBCEPTM",1,0)
IBCEPTM ;ALB/TMK - FILE EDI CLAIMS TEST MESSAGES ;01/27/05
"RTN","IBCEPTM",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTM",3,0)
 Q
"RTN","IBCEPTM",4,0)
 ;
"RTN","IBCEPTM",5,0)
UPDTEST(IBTDA) ; Store test claim status message in file 361.4
"RTN","IBCEPTM",6,0)
 ; IBTDA = ien of the message entry for the status message in 364.2
"RTN","IBCEPTM",7,0)
 N IBT,IBZ,IBZ0,IBZ1,IBE,IBY,IB0,IBMNUM,IBBDA,IBBILL,IB3614,DIC,X,Y,Z,DLAYGO,DO,DD,DA
"RTN","IBCEPTM",8,0)
 ;
"RTN","IBCEPTM",9,0)
 I '$$LOCK^IBCEM(IBTDA) G UPDQ ;Lock message in file 364.2
"RTN","IBCEPTM",10,0)
 ;
"RTN","IBCEPTM",11,0)
 D UPDMSG^IBCESRV2(IBTDA,"U",0)
"RTN","IBCEPTM",12,0)
 ;
"RTN","IBCEPTM",13,0)
 S IB0=$G(^IBA(364.2,IBTDA,0)),IBBDA=$P(IB0,U,4),IBBILL=$P(IB0,U,5)
"RTN","IBCEPTM",14,0)
 S IBMNUM=$P(IB0,U) ; Message number
"RTN","IBCEPTM",15,0)
 ;
"RTN","IBCEPTM",16,0)
 ; esg - 5/12/05 - Update the 364.1 batch status and some other fields even though this is for a test batch
"RTN","IBCEPTM",17,0)
 ;
"RTN","IBCEPTM",18,0)
 I IBBDA,$P($G(^IBA(364.1,+IBBDA,0)),U,2)'="A0" D
"RTN","IBCEPTM",19,0)
 . N DA,DIE,DR
"RTN","IBCEPTM",20,0)
 . S DA=IBBDA,DIE="^IBA(364.1,"
"RTN","IBCEPTM",21,0)
 . S DR=".02////A0;1.06///NOW"
"RTN","IBCEPTM",22,0)
 . I $P(IB0,U,10) S DR=DR_";1.05////"_$P(IB0,U,10)
"RTN","IBCEPTM",23,0)
 . D ^DIE
"RTN","IBCEPTM",24,0)
 . Q
"RTN","IBCEPTM",25,0)
 ;
"RTN","IBCEPTM",26,0)
 ; If a status message references a batch, update the message for all bills in the batch
"RTN","IBCEPTM",27,0)
 I 'IBBDA S IBBILL(+$G(^IBA(364,+IBBILL,0)))=""
"RTN","IBCEPTM",28,0)
 I IBBDA S IBBILL="" F  S IBBILL=$O(^IBM(361.4,"C",+IBBDA,IBBILL)) Q:'IBBILL  S IBBILL(IBBILL)=""
"RTN","IBCEPTM",29,0)
 S IBBILL=0 F  S IBBILL=$O(IBBILL(IBBILL)) Q:'IBBILL  D
"RTN","IBCEPTM",30,0)
 . ;
"RTN","IBCEPTM",31,0)
 . S IB3614=IBBILL
"RTN","IBCEPTM",32,0)
 . ; Create new entry and stuff fields
"RTN","IBCEPTM",33,0)
 . I $D(^IBM(361.4,IB3614,2,"AC",(IBMNUM\1))) Q  ; Msg already there
"RTN","IBCEPTM",34,0)
 . S DIC(0)="L",DLAYGO=361.42,DIC("DR")=".02////"_$S($P($G(^IBE(364.3,+$P(IB0,U,2),0)),U)["REJ":"R",1:"I")_";.03////"_(IBMNUM\1),X=$$NOW^XLFDT()
"RTN","IBCEPTM",35,0)
 . S DA(1)=IB3614,DIC="^IBM(361.4,"_DA(1)_",2,"
"RTN","IBCEPTM",36,0)
 . K DO,DD D FILE^DICN K DIC,DO,DD,DLAYGO
"RTN","IBCEPTM",37,0)
 . I Y'>0 Q
"RTN","IBCEPTM",38,0)
 . S IBY=+Y
"RTN","IBCEPTM",39,0)
 . K IBE("DIERR"),IBT
"RTN","IBCEPTM",40,0)
 . S (IBZ,IBZ0)=0
"RTN","IBCEPTM",41,0)
 . F  S IBZ=$O(^IBA(364.2,IBTDA,2,IBZ)) Q:'IBZ  S IBZ1=$G(^(IBZ,0)) Q:$E(IBZ1,1,2)="##"  S IBZ0=IBZ0+1,IBT(IBZ0)=IBZ1
"RTN","IBCEPTM",42,0)
 . D MSGLNSZ^IBCEST(.IBT)
"RTN","IBCEPTM",43,0)
 . F Z=1:1:20 D WP^DIE(361.42,+IBY_","_+IB3614_",",1,"AK","IBT","IBE") Q:$S('$D(IBE("DIERR")):1,+IBE("DIERR")=1:$G(IBE("DIERR",1))'=110,1:1)  K IBE("DIERR") ; On lock error (110), retry up to 20 times
"RTN","IBCEPTM",44,0)
 ;
"RTN","IBCEPTM",45,0)
 D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEPTM",46,0)
 ;
"RTN","IBCEPTM",47,0)
UPDQ S ZTREQ="@"
"RTN","IBCEPTM",48,0)
 Q
"RTN","IBCEPTM",49,0)
 ;
"RTN","IBCEPTM",50,0)
ADDTXM(IBBILL,IBBATCH,IBDATE) ;  Add an entry to the transmission multiple for
"RTN","IBCEPTM",51,0)
 ; the claim.  Add the claim record, if needed.
"RTN","IBCEPTM",52,0)
 ; IBBILL = array subscripted by iens of file 399
"RTN","IBCEPTM",53,0)
 N DIC,DINUM,DLAYGO,DO,DD,DA,X,Y,IB3614,IBDA
"RTN","IBCEPTM",54,0)
 Q:'IBBATCH!'IBDATE
"RTN","IBCEPTM",55,0)
 S IBDA=0 F  S IBDA=$O(IBBILL(IBDA)) Q:'IBDA  D
"RTN","IBCEPTM",56,0)
 . ;
"RTN","IBCEPTM",57,0)
 . S IB3614=+$G(^IBA(364,IBDA,0))
"RTN","IBCEPTM",58,0)
 . I '$D(^IBM(361.4,IB3614)) D  ; Add the record for the claim
"RTN","IBCEPTM",59,0)
 .. K DO,DD
"RTN","IBCEPTM",60,0)
 .. S DIC(0)="L",DLAYGO=361.4,DIC="^IBM(361.4,",X=IB3614,DINUM=X
"RTN","IBCEPTM",61,0)
 .. D FILE^DICN K DO,DD,DIC,DLAYGO,DINUM
"RTN","IBCEPTM",62,0)
 .. Q:Y>0
"RTN","IBCEPTM",63,0)
 .. S IB3614=0
"RTN","IBCEPTM",64,0)
 . Q:'IB3614
"RTN","IBCEPTM",65,0)
 . ;
"RTN","IBCEPTM",66,0)
 . S DA(1)=IB3614,DIC="^IBM(361.4,"_DA(1)_",1,",X=IBDATE
"RTN","IBCEPTM",67,0)
 . S DIC(0)="L",DLAYGO=361.41,DIC("DR")=".02////"_IBBATCH_";.03////"_DUZ_";.04////"_+$$COBN^IBCEF(IB3614)
"RTN","IBCEPTM",68,0)
 . D FILE^DICN K DO,DD,DIC,DLAYGO
"RTN","IBCEPTM",69,0)
 Q
"RTN","IBCEPTM",70,0)
 ;
"RTN","IBCEPTR")
0^20^B75024492
"RTN","IBCEPTR",1,0)
IBCEPTR ;ALB/ESG - Test Claim Messages Report ;28-JAN-2005
"RTN","IBCEPTR",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTR",3,0)
 ;
"RTN","IBCEPTR",4,0)
 ; eClaims Plus
"RTN","IBCEPTR",5,0)
 ; Report on Test Claim Transmissions and Status Messages
"RTN","IBCEPTR",6,0)
 ;
"RTN","IBCEPTR",7,0)
EN ; Entry Point
"RTN","IBCEPTR",8,0)
 NEW STOP,IBRMETH,IBRDATA
"RTN","IBCEPTR",9,0)
 D SELECT I STOP G EXIT
"RTN","IBCEPTR",10,0)
 D DEVICE
"RTN","IBCEPTR",11,0)
EXIT ; Exit Point
"RTN","IBCEPTR",12,0)
 Q
"RTN","IBCEPTR",13,0)
 ;
"RTN","IBCEPTR",14,0)
SELECT ; Determine which claim#'s or batch#'s to report on
"RTN","IBCEPTR",15,0)
 NEW DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT,D
"RTN","IBCEPTR",16,0)
 S STOP=0
"RTN","IBCEPTR",17,0)
 W @IOF
"RTN","IBCEPTR",18,0)
 W !!?23,"Test Claim EDI Transmission Report"
"RTN","IBCEPTR",19,0)
 W !!?7,"This report will display EDI transmission data and returned status"
"RTN","IBCEPTR",20,0)
 W !?7,"message data for selected test claims.  You may select test claims"
"RTN","IBCEPTR",21,0)
 W !?7,"by either the claim number or by the batch number.  You can choose"
"RTN","IBCEPTR",22,0)
 W !?7,"one or more test claims or batches for this report.",!
"RTN","IBCEPTR",23,0)
 S DIR(0)="SO^C:Claim;B:Batch"
"RTN","IBCEPTR",24,0)
 S DIR("A")="Select by Claim or Batch",DIR("B")="C"
"RTN","IBCEPTR",25,0)
 D ^DIR K DIR
"RTN","IBCEPTR",26,0)
 I $D(DIRUT) S STOP=1 G SELECTX
"RTN","IBCEPTR",27,0)
 S IBRMETH=Y
"RTN","IBCEPTR",28,0)
 I IBRMETH'="C",IBRMETH'="B" S STOP=1 G SELECTX
"RTN","IBCEPTR",29,0)
 ;
"RTN","IBCEPTR",30,0)
 K IBRDATA
"RTN","IBCEPTR",31,0)
 I IBRMETH="C" D
"RTN","IBCEPTR",32,0)
 . F  D  Q:Y'>0
"RTN","IBCEPTR",33,0)
 .. W !
"RTN","IBCEPTR",34,0)
 .. S DIC("A")="Test Claim: "
"RTN","IBCEPTR",35,0)
 .. I $O(IBRDATA("")) S DIC("A")="Another Test Claim: "
"RTN","IBCEPTR",36,0)
 .. S DIC("W")="D CLMLST^IBCEPTR(Y)"
"RTN","IBCEPTR",37,0)
 .. S DIC=361.4,DIC(0)="AEMQ",D="B" D MIX^DIC1
"RTN","IBCEPTR",38,0)
 .. Q:Y'>0
"RTN","IBCEPTR",39,0)
 .. S IBRDATA(+Y)=""
"RTN","IBCEPTR",40,0)
 .. Q
"RTN","IBCEPTR",41,0)
 . Q
"RTN","IBCEPTR",42,0)
 ;
"RTN","IBCEPTR",43,0)
 I IBRMETH="B" D
"RTN","IBCEPTR",44,0)
 . F  D  Q:Y'>0
"RTN","IBCEPTR",45,0)
 .. W !
"RTN","IBCEPTR",46,0)
 .. S DIC("A")="Test Batch: "
"RTN","IBCEPTR",47,0)
 .. I $O(IBRDATA("")) S DIC("A")="Another Test Batch: "
"RTN","IBCEPTR",48,0)
 .. S DIC("S")="I $P(^(0),U,14),$O(^IBM(361.4,""C"",+Y,0))"
"RTN","IBCEPTR",49,0)
 .. S DIC=364.1,DIC(0)="AEMQ",D="B^C" D MIX^DIC1
"RTN","IBCEPTR",50,0)
 .. Q:Y'>0
"RTN","IBCEPTR",51,0)
 .. S IBRDATA(+Y)=""
"RTN","IBCEPTR",52,0)
 .. Q
"RTN","IBCEPTR",53,0)
 . Q
"RTN","IBCEPTR",54,0)
 ;
"RTN","IBCEPTR",55,0)
 I '$O(IBRDATA("")) S STOP=1
"RTN","IBCEPTR",56,0)
 ;
"RTN","IBCEPTR",57,0)
SELECTX ;
"RTN","IBCEPTR",58,0)
 Q
"RTN","IBCEPTR",59,0)
 ;
"RTN","IBCEPTR",60,0)
DEVICE ; standard device selection
"RTN","IBCEPTR",61,0)
 NEW ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCEPTR",62,0)
 W !!!,"This report is 80 characters wide.",!
"RTN","IBCEPTR",63,0)
 S ZTRTN="COMPILE^IBCEPTR"
"RTN","IBCEPTR",64,0)
 S ZTDESC="Test Claim EDI Transmission Report"
"RTN","IBCEPTR",65,0)
 S ZTSAVE("IBRMETH")=""
"RTN","IBCEPTR",66,0)
 S ZTSAVE("IBRDATA")=""
"RTN","IBCEPTR",67,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM")
"RTN","IBCEPTR",68,0)
DEVX ;
"RTN","IBCEPTR",69,0)
 Q
"RTN","IBCEPTR",70,0)
 ;
"RTN","IBCEPTR",71,0)
COMPILE ; compile the data into a scratch global
"RTN","IBCEPTR",72,0)
 NEW RTN,EXTBCH,IBIFN,BCHIEN
"RTN","IBCEPTR",73,0)
 S RTN="IBCEPTR"
"RTN","IBCEPTR",74,0)
 KILL ^TMP($J,RTN)  ; init scratch global
"RTN","IBCEPTR",75,0)
 ;
"RTN","IBCEPTR",76,0)
 I IBRMETH="C" D    ; claim search
"RTN","IBCEPTR",77,0)
 . S EXTBCH=0
"RTN","IBCEPTR",78,0)
 . S IBIFN=0
"RTN","IBCEPTR",79,0)
 . F  S IBIFN=$O(IBRDATA(IBIFN)) Q:'IBIFN  D STORE(IBIFN)
"RTN","IBCEPTR",80,0)
 . Q
"RTN","IBCEPTR",81,0)
 ;
"RTN","IBCEPTR",82,0)
 I IBRMETH="B" D    ; batch search
"RTN","IBCEPTR",83,0)
 . S BCHIEN=0
"RTN","IBCEPTR",84,0)
 . F  S BCHIEN=$O(IBRDATA(BCHIEN)) Q:'BCHIEN  D
"RTN","IBCEPTR",85,0)
 .. S EXTBCH=$P($G(^IBA(364.1,BCHIEN,0)),U,1)
"RTN","IBCEPTR",86,0)
 .. I EXTBCH="" S EXTBCH="~unknown"
"RTN","IBCEPTR",87,0)
 .. S IBIFN=0
"RTN","IBCEPTR",88,0)
 .. F  S IBIFN=$O(^IBM(361.4,"C",BCHIEN,IBIFN)) Q:'IBIFN  D STORE(IBIFN)
"RTN","IBCEPTR",89,0)
 .. Q
"RTN","IBCEPTR",90,0)
 . Q
"RTN","IBCEPTR",91,0)
 ;
"RTN","IBCEPTR",92,0)
 D PRINT                           ; print the report
"RTN","IBCEPTR",93,0)
 D ^%ZISC                          ; close the device
"RTN","IBCEPTR",94,0)
 KILL ^TMP($J,RTN)                 ; clean up scratch global
"RTN","IBCEPTR",95,0)
 I $D(ZTQUEUED) S ZTREQ="@"        ; purge the task record
"RTN","IBCEPTR",96,0)
COMPX ;
"RTN","IBCEPTR",97,0)
 Q
"RTN","IBCEPTR",98,0)
 ;
"RTN","IBCEPTR",99,0)
STORE(IBIFN) ; Input = internal bill#; continue compilation
"RTN","IBCEPTR",100,0)
 NEW IB0,CLAIM,IBRTXD0,TXIEN,SMIEN,DATA,TXDTM
"RTN","IBCEPTR",101,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTR",102,0)
 S CLAIM=$P(IB0,U,1)  ; external claim#
"RTN","IBCEPTR",103,0)
 I CLAIM="" S CLAIM="~unknown"
"RTN","IBCEPTR",104,0)
 S IBRTXD0=99999999   ; initial value for earliest transmission date
"RTN","IBCEPTR",105,0)
 ;
"RTN","IBCEPTR",106,0)
 I IBRMETH="C" D   ; claim search for transmission data (all)
"RTN","IBCEPTR",107,0)
 . S TXIEN=0
"RTN","IBCEPTR",108,0)
 . F  S TXIEN=$O(^IBM(361.4,IBIFN,1,TXIEN)) Q:'TXIEN  D STORETX(IBIFN,TXIEN)
"RTN","IBCEPTR",109,0)
 . Q
"RTN","IBCEPTR",110,0)
 ;
"RTN","IBCEPTR",111,0)
 I IBRMETH="B" D   ; batch search for transmission data ("C" x-ref)
"RTN","IBCEPTR",112,0)
 . S TXIEN=0
"RTN","IBCEPTR",113,0)
 . F  S TXIEN=$O(^IBM(361.4,"C",BCHIEN,IBIFN,TXIEN)) Q:'TXIEN  D STORETX(IBIFN,TXIEN)
"RTN","IBCEPTR",114,0)
 . Q
"RTN","IBCEPTR",115,0)
 ;
"RTN","IBCEPTR",116,0)
 ; loop thru all returned messages for claim
"RTN","IBCEPTR",117,0)
 S SMIEN=0
"RTN","IBCEPTR",118,0)
 F  S SMIEN=$O(^IBM(361.4,IBIFN,2,SMIEN)) Q:'SMIEN  D
"RTN","IBCEPTR",119,0)
 . S DATA=$G(^IBM(361.4,IBIFN,2,SMIEN,0)) Q:DATA=""
"RTN","IBCEPTR",120,0)
 . S TXDTM=$P(DATA,U,1) Q:'TXDTM
"RTN","IBCEPTR",121,0)
 . ;
"RTN","IBCEPTR",122,0)
 . ; Batch only: if this status message was received before the
"RTN","IBCEPTR",123,0)
 . ; earliest transmission for this batch, then don't include it
"RTN","IBCEPTR",124,0)
 . I IBRMETH="B",TXDTM'>IBRTXD0 Q
"RTN","IBCEPTR",125,0)
 . ;
"RTN","IBCEPTR",126,0)
 . ; store it
"RTN","IBCEPTR",127,0)
 . M ^TMP($J,RTN,EXTBCH,CLAIM,TXDTM,2,SMIEN)=^IBM(361.4,IBIFN,2,SMIEN)
"RTN","IBCEPTR",128,0)
 . Q
"RTN","IBCEPTR",129,0)
STOREX ;
"RTN","IBCEPTR",130,0)
 Q
"RTN","IBCEPTR",131,0)
 ;
"RTN","IBCEPTR",132,0)
STORETX(IBIFN,TXIEN) ; store transmission info
"RTN","IBCEPTR",133,0)
 NEW DATA,TXDTM
"RTN","IBCEPTR",134,0)
 S DATA=$G(^IBM(361.4,IBIFN,1,TXIEN,0))
"RTN","IBCEPTR",135,0)
 I DATA="" G STTXXX
"RTN","IBCEPTR",136,0)
 S TXDTM=$P(DATA,U,1)   ; transmit date/time
"RTN","IBCEPTR",137,0)
 I 'TXDTM G STTXXX
"RTN","IBCEPTR",138,0)
 I TXDTM<IBRTXD0 S IBRTXD0=TXDTM
"RTN","IBCEPTR",139,0)
 ;
"RTN","IBCEPTR",140,0)
 ; store it
"RTN","IBCEPTR",141,0)
 M ^TMP($J,RTN,EXTBCH,CLAIM,TXDTM,1,TXIEN)=^IBM(361.4,IBIFN,1,TXIEN)
"RTN","IBCEPTR",142,0)
STTXXX ;
"RTN","IBCEPTR",143,0)
 Q
"RTN","IBCEPTR",144,0)
 ;
"RTN","IBCEPTR",145,0)
PRINT ; print the report to the specified device
"RTN","IBCEPTR",146,0)
 NEW MAXCNT,CRT,PAGECNT,STOP,DIR,X,Y,DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCEPTR",147,0)
 NEW BATCH,CLAIM,IBIFN,CLMD,TXD,TYPE,IEN
"RTN","IBCEPTR",148,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCEPTR",149,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCEPTR",150,0)
 S PAGECNT=0,STOP=0
"RTN","IBCEPTR",151,0)
 ;
"RTN","IBCEPTR",152,0)
 I '$D(^TMP($J,RTN)) D HEADER W !!!?5,"No Data Found"
"RTN","IBCEPTR",153,0)
 ;
"RTN","IBCEPTR",154,0)
 S BATCH=""
"RTN","IBCEPTR",155,0)
 F  S BATCH=$O(^TMP($J,RTN,BATCH)) Q:BATCH=""  D  Q:STOP
"RTN","IBCEPTR",156,0)
 . D HEADER Q:STOP
"RTN","IBCEPTR",157,0)
 . I BATCH'=0 W !!,"Batch#:  ",BATCH
"RTN","IBCEPTR",158,0)
 . S CLAIM=""
"RTN","IBCEPTR",159,0)
 . F  S CLAIM=$O(^TMP($J,RTN,BATCH,CLAIM)) Q:CLAIM=""  D  Q:STOP
"RTN","IBCEPTR",160,0)
 .. I $Y+2>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEPTR",161,0)
 .. I BATCH=0 W !
"RTN","IBCEPTR",162,0)
 .. W !,"Claim#:  ",CLAIM
"RTN","IBCEPTR",163,0)
 .. S IBIFN=+$O(^DGCR(399,"B",CLAIM,""))
"RTN","IBCEPTR",164,0)
 .. I IBIFN S CLMD=$$BT(IBIFN) W ?18,$E($P(CLMD,U,3),1,20),?40,"(",$P(CLMD,U,1),")"
"RTN","IBCEPTR",165,0)
 .. W !,$$RJ^XLFSTR("",80,"-")
"RTN","IBCEPTR",166,0)
 .. ;
"RTN","IBCEPTR",167,0)
 .. S TXD=0
"RTN","IBCEPTR",168,0)
 .. F  S TXD=$O(^TMP($J,RTN,BATCH,CLAIM,TXD)) Q:'TXD!STOP  S TYPE=0 F  S TYPE=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE)) Q:'TYPE!STOP  S IEN=0 F  S IEN=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN)) Q:'IEN!STOP  D  Q:STOP
"RTN","IBCEPTR",169,0)
 ... I TYPE=1 D TXPRT
"RTN","IBCEPTR",170,0)
 ... I TYPE=2 D SMPRT
"RTN","IBCEPTR",171,0)
 ... Q
"RTN","IBCEPTR",172,0)
 .. Q
"RTN","IBCEPTR",173,0)
 . Q
"RTN","IBCEPTR",174,0)
 ;
"RTN","IBCEPTR",175,0)
 I STOP G PRINTX
"RTN","IBCEPTR",176,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G PRINTX
"RTN","IBCEPTR",177,0)
 W !!?5,"*** End of Report ***"
"RTN","IBCEPTR",178,0)
 I CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTR",179,0)
PRINTX ;
"RTN","IBCEPTR",180,0)
 Q
"RTN","IBCEPTR",181,0)
 ;
"RTN","IBCEPTR",182,0)
TXPRT ; print transmission information
"RTN","IBCEPTR",183,0)
 NEW DATA,TXDTM,EXTBCH,TXBY,INSIEN,PAYER,PSEQ
"RTN","IBCEPTR",184,0)
 S DATA=$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,0)) I DATA="" G TXPRTX
"RTN","IBCEPTR",185,0)
 S TXDTM=$$FMTE^XLFDT($P(DATA,U,1),"5Z")
"RTN","IBCEPTR",186,0)
 S EXTBCH=$$EXTERNAL^DILFD(361.41,.02,,$P(DATA,U,2))  ; batch
"RTN","IBCEPTR",187,0)
 S TXBY=$$EXTERNAL^DILFD(361.41,.03,,$P(DATA,U,3))    ; who tx
"RTN","IBCEPTR",188,0)
 S INSIEN=+$$FINDINS^IBCEF1(IBIFN,$P(DATA,U,4))       ; insurance
"RTN","IBCEPTR",189,0)
 S PAYER=$P($G(^DIC(36,INSIEN,0)),U,1)                ; ins name
"RTN","IBCEPTR",190,0)
 S PSEQ=$TR($P(DATA,U,4),"123","PST")                 ; payer seq
"RTN","IBCEPTR",191,0)
 ;
"RTN","IBCEPTR",192,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G TXPRTX
"RTN","IBCEPTR",193,0)
 W !,"Transmission Information"
"RTN","IBCEPTR",194,0)
 W !?1,TXDTM,?22,"Bch#",+$E(EXTBCH,4,99),?33,$E(TXBY,1,15),?50,$E(PAYER,1,20),"  (",PSEQ,")"
"RTN","IBCEPTR",195,0)
 W !
"RTN","IBCEPTR",196,0)
TXPRTX ;
"RTN","IBCEPTR",197,0)
 Q
"RTN","IBCEPTR",198,0)
 ;
"RTN","IBCEPTR",199,0)
SMPRT ; print returned status message information
"RTN","IBCEPTR",200,0)
 NEW DATA,TXDTM,SEVERITY,Z
"RTN","IBCEPTR",201,0)
 S DATA=$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,0)) I DATA="" G SMPRTX
"RTN","IBCEPTR",202,0)
 S TXDTM=$$FMTE^XLFDT($P(DATA,U,1),"5Z")
"RTN","IBCEPTR",203,0)
 S SEVERITY=$$EXTERNAL^DILFD(361.42,.02,,$P(DATA,U,2))  ; msg severity
"RTN","IBCEPTR",204,0)
 ;
"RTN","IBCEPTR",205,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G SMPRTX
"RTN","IBCEPTR",206,0)
 W !,"Status Message Information"
"RTN","IBCEPTR",207,0)
 W !?1,TXDTM,?22,SEVERITY,?65,"Msg#",$P(DATA,U,3)
"RTN","IBCEPTR",208,0)
 S Z=0
"RTN","IBCEPTR",209,0)
 F  S Z=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,1,Z)) Q:'Z  D  Q:STOP
"RTN","IBCEPTR",210,0)
 . I $Y+1>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEPTR",211,0)
 . W !?2,$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,1,Z,0))
"RTN","IBCEPTR",212,0)
 . Q
"RTN","IBCEPTR",213,0)
 W !
"RTN","IBCEPTR",214,0)
SMPRTX ;
"RTN","IBCEPTR",215,0)
 Q
"RTN","IBCEPTR",216,0)
 ;
"RTN","IBCEPTR",217,0)
HEADER ; page break and header
"RTN","IBCEPTR",218,0)
 NEW LIN,HDR,TAB
"RTN","IBCEPTR",219,0)
 S STOP=0
"RTN","IBCEPTR",220,0)
 I CRT,PAGECNT>0,'$D(ZTQUEUED) D  I STOP G HEADX
"RTN","IBCEPTR",221,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCEPTR",222,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTR",223,0)
 . I 'Y S STOP=1 Q
"RTN","IBCEPTR",224,0)
 . Q
"RTN","IBCEPTR",225,0)
 ;
"RTN","IBCEPTR",226,0)
 S PAGECNT=PAGECNT+1
"RTN","IBCEPTR",227,0)
 W @IOF,!
"RTN","IBCEPTR",228,0)
 ;
"RTN","IBCEPTR",229,0)
 W "Test Claim EDI Transmission Report"
"RTN","IBCEPTR",230,0)
 S HDR="Page: "_PAGECNT,TAB=80-$L(HDR)-1
"RTN","IBCEPTR",231,0)
 W ?TAB,HDR
"RTN","IBCEPTR",232,0)
 W !,"Selected ",$S(IBRMETH="B":"Batches",1:"Claims")
"RTN","IBCEPTR",233,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,"1Z"),TAB=80-$L(HDR)-1
"RTN","IBCEPTR",234,0)
 W ?TAB,HDR
"RTN","IBCEPTR",235,0)
 W !,$$RJ^XLFSTR("",80,"=")
"RTN","IBCEPTR",236,0)
 ;
"RTN","IBCEPTR",237,0)
 ; check for a stop request
"RTN","IBCEPTR",238,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  G HEADX
"RTN","IBCEPTR",239,0)
 . S (ZTSTOP,STOP)=1
"RTN","IBCEPTR",240,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCEPTR",241,0)
 . Q
"RTN","IBCEPTR",242,0)
 ;
"RTN","IBCEPTR",243,0)
HEADX ;
"RTN","IBCEPTR",244,0)
 Q
"RTN","IBCEPTR",245,0)
 ;
"RTN","IBCEPTR",246,0)
BT(IBIFN) ; bill type and info
"RTN","IBCEPTR",247,0)
 ; [1] TYPE (form type, charge type, inp/outp)
"RTN","IBCEPTR",248,0)
 ; [2] claim#
"RTN","IBCEPTR",249,0)
 ; [3] patient name
"RTN","IBCEPTR",250,0)
 NEW TYPE,IB0,F,C,S S TYPE=""
"RTN","IBCEPTR",251,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)) I IB0="" Q ""
"RTN","IBCEPTR",252,0)
 S F=$P(IB0,U,19),F=$S(F=2:"Hcfa",1:"UB92")
"RTN","IBCEPTR",253,0)
 S C=$P(IB0,U,27),C=$S(C=1:"Inst",1:"Prof")
"RTN","IBCEPTR",254,0)
 S S=$$INPAT^IBCEF(IBIFN),S=$S(S=1:"Inpat",1:"Outpat")
"RTN","IBCEPTR",255,0)
 S TYPE=F_", "_C_", "_S
"RTN","IBCEPTR",256,0)
 Q TYPE_U_$P(IB0,U,1)_U_$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTR",257,0)
 ;
"RTN","IBCEPTR",258,0)
CLMLST(IBIFN) ; DIC lister
"RTN","IBCEPTR",259,0)
 NEW TYPE,LTD,N1,N2
"RTN","IBCEPTR",260,0)
 S TYPE=$P($$BT(IBIFN),U,1)
"RTN","IBCEPTR",261,0)
 S LTD=$$FMTE^XLFDT($P($G(^IBM(361.4,IBIFN,0)),U,2),"2Z")
"RTN","IBCEPTR",262,0)
 S N1=+$P($G(^IBM(361.4,IBIFN,1,0)),U,4)  ; # transmissions
"RTN","IBCEPTR",263,0)
 S N2=+$P($G(^IBM(361.4,IBIFN,2,0)),U,4)  ; # return messages
"RTN","IBCEPTR",264,0)
 W TYPE,?33," ",LTD,?44," ",N1," Transmission",$S(N1'=1:"s",1:"")
"RTN","IBCEPTR",265,0)
 W ?62," ",N2," Message",$S(N2'=1:"s",1:"")
"RTN","IBCEPTR",266,0)
CLMLSTX ;
"RTN","IBCEPTR",267,0)
 Q
"RTN","IBCEPTR",268,0)
 ;
"RTN","IBCEPTU")
0^17^B1378097
"RTN","IBCEPTU",1,0)
IBCEPTU ;ALB/TMK-TEST TRANSMIT CLAIMS UTILITIES ;25-JAN-2005
"RTN","IBCEPTU",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCEPTU",3,0)
 ;
"RTN","IBCEPTU",4,0)
PURGE ; Purge test claim transmit records over 60 days old
"RTN","IBCEPTU",5,0)
 N IBDAYS,IBDT,IBDELDT,DIK,DA,X
"RTN","IBCEPTU",6,0)
 S IBDAYS=60
"RTN","IBCEPTU",7,0)
 S X1=DT,X2=-IBDAYS D C^%DTC S IBDELDT=X
"RTN","IBCEPTU",8,0)
 S DIK="^IBM(361.4,"
"RTN","IBCEPTU",9,0)
 S IBDT=0 F  S IBDT=$O(^IBM(361.4,"ALT",IBDT)) Q:'IBDT!(IBDT>IBDELDT)  S DA=0 F  S DA=$O(^IBM(361.4,"ALT",IBDT,DA)) Q:'DA  D ^DIK
"RTN","IBCEPTU",10,0)
 Q
"RTN","IBCEPTU",11,0)
 ;
"RTN","IBCEPTU",12,0)
LASTDT(DA) ; Get last txmt dt file 361.4 for xref
"RTN","IBCEPTU",13,0)
 ; DA = array of iens from Fileman
"RTN","IBCEPTU",14,0)
 N Z,Z0,X
"RTN","IBCEPTU",15,0)
 S X=""
"RTN","IBCEPTU",16,0)
 S Z="" F  S Z=$O(^IBM(361.4,DA(1),1,"ALTD",Z),-1) Q:Z=""!X  S Z0=0 F  S Z0=$O(^IBM(361.4,DA(1),1,"ALTD",Z,Z0)) Q:'Z0  I Z0'=DA S X=Z Q
"RTN","IBCEPTU",17,0)
 Q X
"RTN","IBCEPTU",18,0)
 ;
"RTN","IBCERP3")
0^27^B8609666
"RTN","IBCERP3",1,0)
IBCERP3 ;ALB/TMP - EDI BATCHES WAITING MORE THAN 1 DAY REPORT ;30-SEP-96
"RTN","IBCERP3",2,0)
 ;;2.0;INTEGRATED BILLING;**137,296**;21-MAR-94
"RTN","IBCERP3",3,0)
 Q
"RTN","IBCERP3",4,0)
 ;
"RTN","IBCERP3",5,0)
PENDING ;Report of batches not sent after the day the bills in it were extracted
"RTN","IBCERP3",6,0)
 W !
"RTN","IBCERP3",7,0)
 S %ZIS="QM" D ^%ZIS Q:POP
"RTN","IBCERP3",8,0)
 I $D(IO("Q")) K IO("Q") S ZTRTN="EN^IBCERP3",ZTDESC="REPORT OF BILL BATCHES WAITING AUSTIN RECEIPT AFTER 1 DAY" D ^%ZTLOAD K ZTSK D HOME^%ZIS Q
"RTN","IBCERP3",9,0)
 U IO
"RTN","IBCERP3",10,0)
EN ; Queued job entrypoint
"RTN","IBCERP3",11,0)
 N IBPAGE,IBHDRDT,IBLINE,IBSTOP,IBBA,IBBAT,IBCT,IBTYP,IBTYPN,IBV,DIR,Y,IB0,IB1
"RTN","IBCERP3",12,0)
 ;
"RTN","IBCERP3",13,0)
 K ^TMP($J,"IBSORT")
"RTN","IBCERP3",14,0)
 S (IBPAGE,IBBA)=0
"RTN","IBCERP3",15,0)
 ;
"RTN","IBCERP3",16,0)
 ; esg - 5/12/05 - IB*2*296 - Additional check to make sure there are 
"RTN","IBCERP3",17,0)
 ;       bills in the batch in file 364 before including it.  Similar to
"RTN","IBCERP3",18,0)
 ;       existing functionality in routine ^IBCEBUL.
"RTN","IBCERP3",19,0)
 ;
"RTN","IBCERP3",20,0)
 F  S IBBA=$O(^IBA(364.1,"ASTAT","P",IBBA)) Q:'IBBA  S IB0=$G(^IBA(364.1,IBBA,0)),IB1=$G(^(1)) I DT-($P(IB1,U,6)\1)'<1,$P(IB0,U,7)'="",$O(^IBA(364,"C",IBBA,0)) S ^TMP($J,"IBSORT",$P(IB0,U,7),$P(IB0,U),IBBA)=$P(IB1,U,6)_U_$P(IB0,U,4)
"RTN","IBCERP3",21,0)
 ;
"RTN","IBCERP3",22,0)
 W:$E(IOST,1,2)["C-" @IOF ;Only initial form feed for print to screen
"RTN","IBCERP3",23,0)
 I '$D(^TMP($J,"IBSORT")) D HDR1("") W !,?3,"No data found for this report"
"RTN","IBCERP3",24,0)
 S (IBSTOP,IBCT)=0
"RTN","IBCERP3",25,0)
 ;
"RTN","IBCERP3",26,0)
 S IBTYP=""
"RTN","IBCERP3",27,0)
 F  S IBTYP=$O(^TMP($J,"IBSORT",IBTYP)) Q:IBTYP=""  D  G:IBSTOP STOP
"RTN","IBCERP3",28,0)
 . S IBTYPN=$$EXPAND^IBTRE(364.1,.07,IBTYP)
"RTN","IBCERP3",29,0)
 . D HDR1(IBTYPN)
"RTN","IBCERP3",30,0)
 . S IBBAT=""
"RTN","IBCERP3",31,0)
 . F  S IBBAT=$O(^TMP($J,"IBSORT",IBTYP,IBBAT)) Q:'IBBAT!(IBSTOP)  S IBBA=0 F  S IBBA=$O(^TMP($J,"IBSORT",IBTYP,IBBAT,IBBA)) Q:'IBBA  S IBV=$G(^(IBBA)) D  Q:IBSTOP
"RTN","IBCERP3",32,0)
 .. D:IBLINE>(IOSL-5) HDR1(IBTYPN) Q:IBSTOP
"RTN","IBCERP3",33,0)
 .. W !,?6,IBBAT,?20,$$FMTE^XLFDT($P(IBV,U),1),?46,$P(IBV,U,2)
"RTN","IBCERP3",34,0)
 .. S IBCT=IBCT+1,IBLINE=IBLINE+1
"RTN","IBCERP3",35,0)
 ;
"RTN","IBCERP3",36,0)
 W !!,"TOTAL # OF BATCHES: ",IBCT
"RTN","IBCERP3",37,0)
 ;
"RTN","IBCERP3",38,0)
 I $E(IOST,1,2)["C-"  K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IBCERP3",39,0)
STOP I '$D(ZTQUEUED) D ^%ZISC
"RTN","IBCERP3",40,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCERP3",41,0)
 K ^TMP($J,"IBSORT")
"RTN","IBCERP3",42,0)
 Q
"RTN","IBCERP3",43,0)
 ;
"RTN","IBCERP3",44,0)
HDR1(IB) ; Report header
"RTN","IBCERP3",45,0)
 ; IB = the text for the type of batch
"RTN","IBCERP3",46,0)
 N Z,DIR,Y
"RTN","IBCERP3",47,0)
 I 'IBPAGE S IBHDRDT=$$HTE^XLFDT($H,2)
"RTN","IBCERP3",48,0)
 I IBPAGE D  Q:IBSTOP
"RTN","IBCERP3",49,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBSTOP=('Y) Q:IBSTOP
"RTN","IBCERP3",50,0)
 . W @IOF
"RTN","IBCERP3",51,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCERP3",52,0)
 W !,?14,"REPORT OF BATCHES STILL WAITING AUSTIN RECEIPT AFTER 1 DAY",?70,"PAGE: ",IBPAGE,!,?((68-$L(IB))\2),"BATCH TYPE: "_IB
"RTN","IBCERP3",53,0)
 W !,?26,"RUN DATE: ",IBHDRDT,!
"RTN","IBCERP3",54,0)
 W !,?6,"BATCH #",?20,"WAITING SINCE",?46,"MAIL MESSAGE #",!
"RTN","IBCERP3",55,0)
 S Z="",$P(Z,"-",76)="" W ?2,Z,!
"RTN","IBCERP3",56,0)
 S IBLINE=6
"RTN","IBCERP3",57,0)
 Q
"RTN","IBCERP3",58,0)
 ;
"RTN","IBCERP5")
0^24^B37501190
"RTN","IBCERP5",1,0)
IBCERP5 ;ALB/TMP - BATCH LIST ;02-OCT-96
"RTN","IBCERP5",2,0)
 ;;2.0;INTEGRATED BILLING;**137,296**;21-MAR-94
"RTN","IBCERP5",3,0)
 Q
"RTN","IBCERP5",4,0)
LIST ; List batch detail
"RTN","IBCERP5",5,0)
 N DIR,IBS1,Y,IBINCL
"RTN","IBCERP5",6,0)
 S DIR("A")="DO YOU WANT TO INCLUDE A LIST OF BILLS WITH EACH BATCH?: ",DIR(0)="YA",DIR("B")="YES" D ^DIR K DIR
"RTN","IBCERP5",7,0)
 I $D(DTOUT)!($D(DUOUT)) Q
"RTN","IBCERP5",8,0)
 S IBINCL=+Y
"RTN","IBCERP5",9,0)
 S DIR("A")="SORT BY",DIR(0)="SBM^B:BATCH;D:LAST DATE TRANSMITTED;S:LATEST BATCH RECEIPT STATUS",DIR("B")="B" D ^DIR K DIR
"RTN","IBCERP5",10,0)
 I $D(DTOUT)!($D(DUOUT)) Q
"RTN","IBCERP5",11,0)
 S IBS1=Y,(IBS1(1),IBS1(2))=""
"RTN","IBCERP5",12,0)
 ;
"RTN","IBCERP5",13,0)
 I IBS1="B" D  Q:IBS1(1)=""!(IBS1(2)="")  G LISTQ
"RTN","IBCERP5",14,0)
 .F  S DIR("?")="Enter the first 10-digit batch number you want included on the report",DIR("A")="Start with BATCH #: ",DIR("B")="FIRST",DIR(0)="FA" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBS1(1)'=""
"RTN","IBCERP5",15,0)
 ..I Y'="FIRST",Y'?10N W !,*7,"Must enter a 10-digit batch #" Q
"RTN","IBCERP5",16,0)
 ..S IBS1(1)=$S(Y:Y-1,1:0)
"RTN","IBCERP5",17,0)
 .Q:IBS1(1)=""
"RTN","IBCERP5",18,0)
 .F  S DIR("?")="Enter the last 10-digit batch number you want included on the report",DIR("A")="Go to BATCH #: ",DIR("B")="LAST",DIR(0)="FA" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBS1(2)'=""
"RTN","IBCERP5",19,0)
 ..I Y'="LAST",Y'?10N W !,*7,"Must enter a 10-digit batch #" Q
"RTN","IBCERP5",20,0)
 ..S IBS1(2)=$S(Y="LAST":9999999999,1:+Y)
"RTN","IBCERP5",21,0)
 ;
"RTN","IBCERP5",22,0)
 I IBS1="D" D  Q:IBS1(1)=""!(IBS1(2)="")  G LISTQ
"RTN","IBCERP5",23,0)
 .F  S DIR("?")="Enter the first date you want to include on the report",DIR("A")="Start with LAST TRANSMIT DATE: ",DIR("B")="FIRST",DIR(0)="FA" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBS1(1)'=""
"RTN","IBCERP5",24,0)
 ..I Y'="FIRST" S X=Y,%DT="P" D ^%DT I Y<0 W !,*7,"Must enter a valid date" Q
"RTN","IBCERP5",25,0)
 ..S IBS1(1)=$S(Y:Y-.0000001,1:0)
"RTN","IBCERP5",26,0)
 .Q:IBS1(1)=""
"RTN","IBCERP5",27,0)
 .F  S DIR("?")="Enter the last date you want to include on the report",DIR("A")="Go to LAST TRANSMIT DATE: ",DIR("B")="LAST",DIR(0)="FA" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  D  Q:IBS1(2)'=""
"RTN","IBCERP5",28,0)
 ..I Y'="LAST" S X=Y,%DT="P" D ^%DT I Y<0 W !,*7,"Must enter a valid date" Q
"RTN","IBCERP5",29,0)
 ..S IBS1(2)=$S(Y="LAST":9999999,1:Y+.9999)
"RTN","IBCERP5",30,0)
 ;
"RTN","IBCERP5",31,0)
 I IBS1="S" D  Q:IBS1(1)=""  G LISTQ
"RTN","IBCERP5",32,0)
 . N DA
"RTN","IBCERP5",33,0)
 .S DIR("A")="Select BATCH STATUS: ",DIR(0)="364.1,.02A" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)  S (IBS1(1),IBS1(2))=$P(Y,U)
"RTN","IBCERP5",34,0)
 ;
"RTN","IBCERP5",35,0)
 Q
"RTN","IBCERP5",36,0)
 ;
"RTN","IBCERP5",37,0)
LISTQ S %ZIS="QM" D ^%ZIS Q:POP
"RTN","IBCERP5",38,0)
 I $D(IO("Q")) K IO("Q") S ZTRTN="EN^IBCERP5",ZTSAVE("IB*")="",ZTDESC="EDI 837 BATCH DETAIL LIST" D ^%ZTLOAD K ZTSK D HOME^%ZIS Q
"RTN","IBCERP5",39,0)
 U IO
"RTN","IBCERP5",40,0)
EN ; Queued job entrypoint
"RTN","IBCERP5",41,0)
 N IBPAGE,IBLINE,IBHDRDT,IB0,IB1,IBB,IBB0,IBBL,IB399,IBFIRST,IBSTOP,DIR,Y,IBXR,IBX,IBB3614,IBRIN,IBLTDT,IBTRSTAT
"RTN","IBCERP5",42,0)
 W:$E(IOST,1,2)["C-" @IOF ;Only initial form feed for print to screen
"RTN","IBCERP5",43,0)
 S (IBPAGE,IBSTOP)=0 D HDR1
"RTN","IBCERP5",44,0)
 S IBXR=$S(IBS1="B":"B",IBS1="D":"ALT",1:"ASTAT")
"RTN","IBCERP5",45,0)
 ;
"RTN","IBCERP5",46,0)
 S IBV=IBS1(1)
"RTN","IBCERP5",47,0)
 F  S IBV=$S(IBS1'="S":$O(^IBA(364.1,IBXR,IBV)),1:IBV) Q:IBV=""!(IBV]]IBS1(2))  S IB=0 F  S IB=$O(^IBA(364.1,IBXR,IBV,IB)) S:'IB&(IBS1="S") IBV="" Q:'IB  S IB0=$G(^IBA(364.1,IB,0)),IB1=$G(^(1)) D  G:IBSTOP Q
"RTN","IBCERP5",48,0)
 .D:IBLINE>(IOSL-15) HDR1 Q:IBSTOP
"RTN","IBCERP5",49,0)
 .I 'IBFIRST W ! S IBLINE=IBLINE+1
"RTN","IBCERP5",50,0)
 .S:IBFIRST IBFIRST=0 S IBRESUB=$P(IB0,U,13)
"RTN","IBCERP5",51,0)
 . K IBX S IBX=1
"RTN","IBCERP5",52,0)
 . D:$P(IB0,U,10) CKRES^IBCESRV2(IB,0,.IBX)
"RTN","IBCERP5",53,0)
 .W !,"Batch #: ",$P(IB0,U),?40,"Rejected?: ",$P("NO^YES",U,+$P(IB0,U,5)+1),?60,$S(IBRESUB:"Resubmit: "_$S($P(IB0,U,10):"IN",1:"")_"COMPLETE",1:"")
"RTN","IBCERP5",54,0)
 .W !," Batch Type : ",$$EXPAND^IBTRE(364.1,.07,$P(IB0,U,7)),?42,"# Bills: ",$P(IB0,U,3),?60,"Mail Msg: ",$P(IB0,U,4)
"RTN","IBCERP5",55,0)
 .S IBLINE=IBLINE+1
"RTN","IBCERP5",56,0)
 .I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP
"RTN","IBCERP5",57,0)
 .W !," Received in Austin?: "_$S($P(IB0,U,2)="A0":"Yes",1:"No")
"RTN","IBCERP5",58,0)
 .W !," Status Date: ",$$FMTE^XLFDT($P(IB1,U,5),2),?36,"Date Recorded: ",$$FMTE^XLFDT($P(IB1,U,6),2)
"RTN","IBCERP5",59,0)
 .S IBLINE=IBLINE+1
"RTN","IBCERP5",60,0)
 .I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP
"RTN","IBCERP5",61,0)
 .W !," First Sent : ",$$FMTE^XLFDT($P(IB1,U),2),?47,"By: ",$E($$EXPAND^IBTRE(364.1,1.02,$P(IB1,U,2)),1,29)
"RTN","IBCERP5",62,0)
 .S IBLINE=IBLINE+1
"RTN","IBCERP5",63,0)
 .I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP
"RTN","IBCERP5",64,0)
 .I $P(IB1,U)'=$P(IB1,U,3) W !," Last Sent  : ",$$FMTE^XLFDT($P(IB1,U,3),2),?47,"By: ",$E($$EXPAND^IBTRE(364.1,1.02,$P(IB1,U,4)),1,29) S IBLINE=IBLINE+1
"RTN","IBCERP5",65,0)
 .I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP
"RTN","IBCERP5",66,0)
 .I $P(IB0,U,8)'="" W !," ",$E($P(IB0,U,8),1,79) S IBLINE=IBLINE+1
"RTN","IBCERP5",67,0)
 .;EJK 4/5/5 Claim detail can come from 2 source files now. 
"RTN","IBCERP5",68,0)
 .Q:'IBINCL  ;List of bills not wanted
"RTN","IBCERP5",69,0)
 .I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP
"RTN","IBCERP5",70,0)
 .W !,"  **BILLS**",?25,"Number    Transmit Status            Resubmit Batch #"
"RTN","IBCERP5",71,0)
 .I IBLINE>(IOSL-6) D HDR1 Q:IBSTOP
"RTN","IBCERP5",72,0)
 .K ^TMP($J,"IBSORT")
"RTN","IBCERP5",73,0)
 .W !,?2,$S($P(IB0,U,10):"* = NOT RESUBMITTED",1:""),?25,"--------  -------------------------  ----------------" S IBLINE=IBLINE+2
"RTN","IBCERP5",74,0)
 .;EJK 4/5/5 Get E-Claims test data from new file 361.4
"RTN","IBCERP5",75,0)
 .I $O(^IBM(361.4,"C",IB,"")) D
"RTN","IBCERP5",76,0)
 ..S (IBB,IBBL)=0
"RTN","IBCERP5",77,0)
 ..F  S IBB=$O(^IBM(361.4,"C",IB,IBB)) Q:'IBB  D
"RTN","IBCERP5",78,0)
 ...S IBB0=$G(^IBM(361.4,IBB,0))
"RTN","IBCERP5",79,0)
 ...S IB399=$G(^DGCR(399,+IBB0,0))
"RTN","IBCERP5",80,0)
 ...S IBB3614=$P(IBB0,U,1)
"RTN","IBCERP5",81,0)
 ...S IBLTDT=$P(IBB0,U,2)
"RTN","IBCERP5",82,0)
 ...S IBRIN="",IBRIN=$O(^IBM(361.4,IBB,1,"ALTD",IBLTDT,IBRIN),-1)
"RTN","IBCERP5",83,0)
 ...S $P(IBB3614,U,7)=$P($G(^IBM(361.4,IBB,1,IBRIN,0)),U,4)
"RTN","IBCERP5",84,0)
 ...S ^TMP($J,"IBSORT",$P(IB399,U),IBB)=IBB3614
"RTN","IBCERP5",85,0)
 ...Q
"RTN","IBCERP5",86,0)
 ..Q
"RTN","IBCERP5",87,0)
 .I $O(^IBA(364,"C",IB,"")) D
"RTN","IBCERP5",88,0)
 ..S (IBB,IBBL)=0 F  S IBB=$O(^IBA(364,"C",IB,IBB)) Q:'IBB  S IBB0=$G(^IBA(364,IBB,0)),IB399=$G(^DGCR(399,+IBB0,0)) S ^TMP($J,"IBSORT",$P(IB399,U),IBB)=IBB0 S:$D(IBX(IBB)) ^(IBB,1)=1
"RTN","IBCERP5",89,0)
 .S IBB1="" F  S IBB1=$O(^TMP($J,"IBSORT",IBB1)) Q:IBB1=""!(IBSTOP)  S IBB=0 F  S IBB=$O(^TMP($J,"IBSORT",IBB1,IBB)) Q:'IBB  S IBB0=$G(^(IBB)) D  Q:IBSTOP
"RTN","IBCERP5",90,0)
 ..I IBLINE>(IOSL-5) D HDR1 Q:IBSTOP  D
"RTN","IBCERP5",91,0)
 ...W !,"Batch #: ",$$EXPAND^IBTRE(364,.02,$P(IBB0,U,2)),?25,"Number    Transmit Status" W:IBRESUB "            Resubmit Batch #"
"RTN","IBCERP5",92,0)
 ...W !,?9,"(continued)",?25,"--------  -------------------------  ----------------"
"RTN","IBCERP5",93,0)
 ...S IBLINE=IBLINE+2,IBFIRST=0
"RTN","IBCERP5",94,0)
 ..S IBTRSTAT=$$EXPAND^IBTRE(364,.03,$P(IBB0,U,3))
"RTN","IBCERP5",95,0)
 ..W !,?24,$S($G(^TMP($J,"IBSORT",IBB1,IBB,1)):"*",1:" "),IBB1
"RTN","IBCERP5",96,0)
 ..W ?35,$S($G(IBTRSTAT)'="":IBTRSTAT,1:"N/A")
"RTN","IBCERP5",97,0)
 ..W ?65,$$EXPAND^IBTRE(364,.06,$P(IBB0,U,6))
"RTN","IBCERP5",98,0)
 ..S IBLINE=IBLINE+1
"RTN","IBCERP5",99,0)
 G:IBSTOP Q
"RTN","IBCERP5",100,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IBCERP5",101,0)
Q I '$D(ZTQUEUED) D ^%ZISC
"RTN","IBCERP5",102,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCERP5",103,0)
 K ^TMP($J,"IBSORT")
"RTN","IBCERP5",104,0)
 Q
"RTN","IBCERP5",105,0)
 ;
"RTN","IBCERP5",106,0)
HDR1 ; Header code
"RTN","IBCERP5",107,0)
 N Z,DIR,Y
"RTN","IBCERP5",108,0)
 I 'IBPAGE S IBHDRDT=$$HTE^XLFDT($H,"2")
"RTN","IBCERP5",109,0)
 I IBPAGE D  Q:IBSTOP
"RTN","IBCERP5",110,0)
 .I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBSTOP=('Y) Q:IBSTOP
"RTN","IBCERP5",111,0)
 .W @IOF
"RTN","IBCERP5",112,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCERP5",113,0)
 W !,?32,"BATCH DETAIL LIST",?70,"PAGE: ",IBPAGE,!,?27,"RUN DATE: ",IBHDRDT
"RTN","IBCERP5",114,0)
 S Z="",$P(Z,"-",81)="" W !,Z
"RTN","IBCERP5",115,0)
 S IBLINE=3,IBFIRST=1
"RTN","IBCERP5",116,0)
 Q
"RTN","IBCERP5",117,0)
 ;
"RTN","IBCERPT")
0^15^B5569941
"RTN","IBCERPT",1,0)
IBCERPT ;ALB/TMP - 277 EDI ENVOY REPORT MESSAGE PROCESSING ;15-JUL-98
"RTN","IBCERPT",2,0)
 ;;2.0;INTEGRATED BILLING;**137,296**;21-MAR-94
"RTN","IBCERPT",3,0)
 Q
"RTN","IBCERPT",4,0)
 ;
"RTN","IBCERPT",5,0)
RPTHDR(IBD,IBDATE) ; Report message header
"RTN","IBCERPT",6,0)
 ;   ^TMP("IBMSG",$J,"REPORT",0,0)=MESSAGE HEADER DATA STRING
"RTN","IBCERPT",7,0)
 ;                                  ,"D",0,1)=header record raw data
"RTN","IBCERPT",8,0)
 ;                                  ,line #)=report message lines
"RTN","IBCERPT",9,0)
 ;
"RTN","IBCERPT",10,0)
 N X,Y,%DT
"RTN","IBCERPT",11,0)
 S IBD("LINE")=0
"RTN","IBCERPT",12,0)
 S ^TMP("IBMSG",$J,"REPORT",0,0)="REPORT^"_$G(IBD("MSG#"))_U_$G(IBD("SUBJ"))_U_U_U_IBDATE_"^0^ENVOY"
"RTN","IBCERPT",13,0)
 Q
"RTN","IBCERPT",14,0)
 ;
"RTN","IBCERPT",15,0)
REPORT(IBHD,IBDATE,IBD,IBTXN) ; Assemble, store report message
"RTN","IBCERPT",16,0)
 ; Returns IBD array if passed by reference, IBHOLDCT, IBLAST
"RTN","IBCERPT",17,0)
 ;
"RTN","IBCERPT",18,0)
 N IBWANT,IBMCT
"RTN","IBCERPT",19,0)
 S IBMCT=($G(IBD("Q"))="MCT")
"RTN","IBCERPT",20,0)
 S IBWANT=$S($P(IBTXN,U,3)'="":+$P($G(^IBE(361.2,+$O(^IBE(361.2,"B",$P(IBTXN,U,3),0)),0)),U,2),1:1) ; Send report anyway if name is not in the file
"RTN","IBCERPT",21,0)
 D RPTHDR(.IBD,IBDATE)
"RTN","IBCERPT",22,0)
 S (IBD("MESSAGE"),IBD)=IBTXN
"RTN","IBCERPT",23,0)
 I IBWANT D RPTLINE(.IBD,IBHD),RPTLINE(.IBD,IBHD,1,IBMCT)
"RTN","IBCERPT",24,0)
 ;
"RTN","IBCERPT",25,0)
 F  X XMREC Q:XMER<0  D  Q:IBLAST  ;Extract rest of message
"RTN","IBCERPT",26,0)
 . S IBHOLDCT=IBHOLDCT+1,(IBD,^TMP("IB-HOLD",$J,IBHOLDCT))=XMRG
"RTN","IBCERPT",27,0)
 . D:IBWANT RPTLINE(.IBD,IBHD)
"RTN","IBCERPT",28,0)
 . ;
"RTN","IBCERPT",29,0)
 . I $P(XMRG,U)="REPORT" D  Q  ; Add message subject as part of text
"RTN","IBCERPT",30,0)
 .. S IBD("MESSAGE")=XMRG,IBWANT=$S($P(XMRG,U,3)'="":+$P($G(^IBE(361.2,+$O(^IBE(361.2,"B",$P(XMRG,U,3),0)),0)),U,2),1:1)
"RTN","IBCERPT",31,0)
 .. D:IBWANT RPTLINE(.IBD,IBHD,1,IBMCT)
"RTN","IBCERPT",32,0)
 .. ;
"RTN","IBCERPT",33,0)
 . I +XMRG=99,$P(XMRG,U,2)="$" S IBLAST=1 Q
"RTN","IBCERPT",34,0)
 K:'$O(^TMP("IBMSG",$J,"REPORT",0,"D",0,0)) ^TMP("IBMSG",$J,"REPORT")
"RTN","IBCERPT",35,0)
 Q
"RTN","IBCERPT",36,0)
 ;
"RTN","IBCERPT",37,0)
RPTLINE(IBD,IBHD,IBSUB,IBMCT) ;Process report lines
"RTN","IBCERPT",38,0)
 ; INPUT:
"RTN","IBCERPT",39,0)
 ;   IBD must be passed by reference = entire message line
"RTN","IBCERPT",40,0)
 ;   IBHD = the header data from the message
"RTN","IBCERPT",41,0)
 ;   IBSUB = 1 to signify the subject line should be output
"RTN","IBCERPT",42,0)
 ;   IBMCT = 1 if message from the MCT (test) queue
"RTN","IBCERPT",43,0)
 ;
"RTN","IBCERPT",44,0)
 ; OUTPUT:
"RTN","IBCERPT",45,0)
 ;   IBD array returned with processed data
"RTN","IBCERPT",46,0)
 ;      "LINE" = The last line # populated in the message
"RTN","IBCERPT",47,0)
 ;
"RTN","IBCERPT",48,0)
 ;   ^TMP("IBMSG",$J,"REPORT",0,"D",0,line #)=report line data
"RTN","IBCERPT",49,0)
 ;
"RTN","IBCERPT",50,0)
 S IBMCT=+$G(IBMCT)
"RTN","IBCERPT",51,0)
 I $G(IBSUB) S IBD="SUBJECT^WebMD REPORT "_$S('IBMCT:"",1:" * * TEST RESULTS * * ")_$P($G(IBD("MESSAGE")),U,3)_" "_$P(IBHD,U)_" "_$P(IBHD,U,6)
"RTN","IBCERPT",52,0)
 S IBD("LINE")=$G(IBD("LINE"))+1
"RTN","IBCERPT",53,0)
 S ^TMP("IBMSG",$J,"REPORT",0,"D",0,IBD("LINE"))=IBD
"RTN","IBCERPT",54,0)
 Q
"RTN","IBCERPT",55,0)
 ;
"RTN","IBCESRV")
0^8^B67439456
"RTN","IBCESRV",1,0)
IBCESRV ;ALB/TMP - Server interface to IB from Austin ;8/6/03 10:04am
"RTN","IBCESRV",2,0)
 ;;2.0;INTEGRATED BILLING;**137,181,196,232,296**;21-MAR-94
"RTN","IBCESRV",3,0)
 ;
"RTN","IBCESRV",4,0)
SERVER ; Entry point for server option to process EDI msgs received from Austin
"RTN","IBCESRV",5,0)
 ;
"RTN","IBCESRV",6,0)
 N IBEFLG,IBERR,IBTDA,XMER,IBXMZ,IBHOLDCT
"RTN","IBCESRV",7,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J),^TMP("IBMSG-H",$J)
"RTN","IBCESRV",8,0)
 S IBXMZ=$G(XMZ)
"RTN","IBCESRV",9,0)
 S IBEFLG=$$MSG(.XMER,.IBTDA,IBXMZ)
"RTN","IBCESRV",10,0)
 D:$G(IBEFLG) PERROR^IBCESRV1(.IBERR,.IBTDA,"G.IB EDI",IBXMZ)
"RTN","IBCESRV",11,0)
 N ZTREQ
"RTN","IBCESRV",12,0)
 D DKILL^IBCESRV1(IBXMZ) S ZTREQ="@"
"RTN","IBCESRV",13,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J),^TMP("IBMSG-H",$J)
"RTN","IBCESRV",14,0)
 Q
"RTN","IBCESRV",15,0)
 ;
"RTN","IBCESRV",16,0)
MSG(XMER,IBTDA,IBXMZ) ; Read/Store message lines
"RTN","IBCESRV",17,0)
 ;     Return message formats:
"RTN","IBCESRV",18,0)
 ;        Ref:  Your <queue name> message #<msg#> with Austin ID #<id #>,
"RTN","IBCESRV",19,0)
 ;              is assigned confirmation number <confirmation #>.
"RTN","IBCESRV",20,0)
 ;              Generates an 837REC0 message
"RTN","IBCESRV",21,0)
 ;        277STAT - claim status messages - Generates one or more 837REC1
"RTN","IBCESRV",22,0)
 ;                                          837REC2 or 837REJ1 messages
"RTN","IBCESRV",23,0)
 ;        837DEL - bill entry # from File 364
"RTN","IBCESRV",24,0)
 ;        835EOB - Explanation of Benefits messages
"RTN","IBCESRV",25,0)
 ;        REPORT - Free text Envoy report file - may contain one or more
"RTN","IBCESRV",26,0)
 ;                 reports that are turned into bulletins
"RTN","IBCESRV",27,0)
 ;
"RTN","IBCESRV",28,0)
 ; OUTPUT:
"RTN","IBCESRV",29,0)
 ;  Function returns flag ... 0 = no errors    1 = errors
"RTN","IBCESRV",30,0)
 ;  IBTDA - array subscripted by ien of message file entries created
"RTN","IBCESRV",31,0)
 ;          If array entry = 1, the message was only partially stored
"RTN","IBCESRV",32,0)
 ;
"RTN","IBCESRV",33,0)
 N IBLAST,IBTYP,IBTYP1,IB0,IBBTCH,IBDATE,IBHD,IBMG,IBRTN,IBTXN,IBTXND,XMDUZ,IBGBL,IBD,IBEFLG,IBHOLDCT,IBWANT,X,Y,Z
"RTN","IBCESRV",34,0)
 K ^TMP("IBERR",$J),^TMP("IBMSG",$J),^TMP("IBMSGH",$J),^TMP("IB-HOLD",$J)
"RTN","IBCESRV",35,0)
 ;
"RTN","IBCESRV",36,0)
 S (IBEFLG,IBERR,IBTXN)="",IBGBL="IBTXN",IBLAST=0
"RTN","IBCESRV",37,0)
 S IBD("MSG#")=IBXMZ
"RTN","IBCESRV",38,0)
 S IBHD=$$NET^XMRENT(IBXMZ)
"RTN","IBCESRV",39,0)
 S IBD("SUBJ")=$P(IBHD,U,6)
"RTN","IBCESRV",40,0)
 S (X,IBDATE)=$P(IBHD,U)
"RTN","IBCESRV",41,0)
 I X'="" D  ;Reformat date, if needed
"RTN","IBCESRV",42,0)
 . I X'["@" S X=$P(X," ",1,3)_"@"_$P(X," ",4)
"RTN","IBCESRV",43,0)
 . N %DT
"RTN","IBCESRV",44,0)
 . S %DT="XTS" D ^%DT S:Y>0 IBDATE=Y\.0001*.0001
"RTN","IBCESRV",45,0)
 ;
"RTN","IBCESRV",46,0)
 K ^TMP("IB-HOLD",$J) N IBHOLDCT S IBHOLDCT=0
"RTN","IBCESRV",47,0)
 S IBD("Q")=$E(IBD("SUBJ"),1,3)
"RTN","IBCESRV",48,0)
 I $G(IBD("SUBJ"))?.E1(1" MCR",1" MCT",1" MCH")1" Confirmation" D  G MSGQ:$G(IBERR),MSG1
"RTN","IBCESRV",49,0)
 . S IBD("Q")="MC"_$E($P(IBD("SUBJ")," MC",2))
"RTN","IBCESRV",50,0)
 . ;Austin confirmation
"RTN","IBCESRV",51,0)
 . X XMREC ; Line 1 of message
"RTN","IBCESRV",52,0)
 . S:XMER'<0 IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",53,0)
 . I XMER<0 D  Q
"RTN","IBCESRV",54,0)
 .. S IBERR=3
"RTN","IBCESRV",55,0)
 .. S ^TMP("IBERR",$J,"MSG",1)=IBHD
"RTN","IBCESRV",56,0)
 .. S ^TMP("IBERR",$J,"MSG",2)=$G(XMRG)
"RTN","IBCESRV",57,0)
 . S IBTXN=XMRG
"RTN","IBCESRV",58,0)
 . S IBBTCH=+$O(^IBA(364.1,"MSG",+$P(IBTXN,"#",2)\1,""))
"RTN","IBCESRV",59,0)
 . I 'IBBTCH S IBERR=6 D REST(.IBTXN,IBGBL) Q  ;No msgs match conf recpt
"RTN","IBCESRV",60,0)
 . S IBTXN("BATCH",IBBTCH,0)="837REC0^"_IBD("MSG#")_U_+$E($P(IBD("SUBJ")," "),4,14)_"^^"_IBBTCH_U_IBDATE
"RTN","IBCESRV",61,0)
 . ;
"RTN","IBCESRV",62,0)
 . X XMREC ;Get second line of the message
"RTN","IBCESRV",63,0)
 . I XMER<0 S IBERR=2 Q
"RTN","IBCESRV",64,0)
 . S IBTXN("BATCH",IBBTCH,1)=IBTXN_" "_XMRG_"$",IBTXN=IBTXN("BATCH",IBBTCH,0)
"RTN","IBCESRV",65,0)
 . S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",66,0)
 . S IBLAST=1
"RTN","IBCESRV",67,0)
 ;
"RTN","IBCESRV",68,0)
 ; Read header line of non-confirmation message (line 1)
"RTN","IBCESRV",69,0)
 F  X XMREC Q:$S(XMER<0:1,1:$E(XMRG,1,13)'="RACUBOTH RUCH")
"RTN","IBCESRV",70,0)
 S:XMER'<0 IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",71,0)
 I XMER<0 D  G MSGQ
"RTN","IBCESRV",72,0)
 . S IBERR=3
"RTN","IBCESRV",73,0)
 . S ^TMP("IBERR",$J,"MSG",1)=IBHD
"RTN","IBCESRV",74,0)
 . S ^TMP("IBERR",$J,"MSG",2)=$G(XMRG)
"RTN","IBCESRV",75,0)
 ;
"RTN","IBCESRV",76,0)
 S IBTXN=XMRG
"RTN","IBCESRV",77,0)
MSG1 I $E(IBTXN,$L(IBTXN)-3,$L(IBTXN))?3A1"."!(IBTXN="NNNN"),IBHOLDCT>1 S XMER=-1,IBLAST=1 G MSGQ
"RTN","IBCESRV",78,0)
 ;
"RTN","IBCESRV",79,0)
 S IBTYP1=$S($P(IBTXN,U)="277STAT":"837REC1",1:$P(IBTXN,U))
"RTN","IBCESRV",80,0)
 S IBTYP=$S(IBTYP1="":"",1:$O(^IBE(364.3,"B",IBTYP1,"")))
"RTN","IBCESRV",81,0)
 I IBTYP="" S IBERR=1 D REST(.IBTXN,IBGBL) G MSGQ ;Bad msg type
"RTN","IBCESRV",82,0)
 ;
"RTN","IBCESRV",83,0)
 S IB0=$G(^IBE(364.3,IBTYP,0)),IBRTN=$P(IB0,U,3,4),IBMG=$P(IB0,U,2)
"RTN","IBCESRV",84,0)
 I $TR(IBRTN,U)="" S IBERR=5 D REST(.IBTXN,IBGBL) G MSGQ ;No routine defined
"RTN","IBCESRV",85,0)
 ;
"RTN","IBCESRV",86,0)
 S IBWANT=1
"RTN","IBCESRV",87,0)
 I 'IBLAST,XMER'<0 D  G:IBLAST&(XMER<0) MSGQ ;Message is other than Austin confirmation
"RTN","IBCESRV",88,0)
 . S IBGBL="^TMP(""IBMSG"","_$J_")"
"RTN","IBCESRV",89,0)
 . S @IBGBL=$P(IBTXN,U),^TMP("IBMSGH",$J,0)=IBTXN
"RTN","IBCESRV",90,0)
 . ;
"RTN","IBCESRV",91,0)
 . I $P(IBTXN,U)="277STAT" D  Q  ;Claim status message
"RTN","IBCESRV",92,0)
 .. F  X XMREC Q:XMER<0  D  Q:IBLAST  ;Extract rest of message
"RTN","IBCESRV",93,0)
 ... S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",94,0)
 ... I +XMRG=99,$P(XMRG,U,2)="$" S IBLAST=1 Q
"RTN","IBCESRV",95,0)
 ... S IBD=XMRG,Z=+XMRG_"^IBCE277(.IBD)"
"RTN","IBCESRV",96,0)
 ... S IBTXN=XMRG
"RTN","IBCESRV",97,0)
 ... I '$$CKLABEL(Z,.IBTXN,IBGBL) S IBLAST=1,IBWANT=0,XMER=-1,IBERR=7 Q
"RTN","IBCESRV",98,0)
 ... D @Z
"RTN","IBCESRV",99,0)
 . ;
"RTN","IBCESRV",100,0)
 . I $P(IBTXN,U)="835EOB" D  Q  ;Explanation of Benefits message
"RTN","IBCESRV",101,0)
 .. F  X XMREC Q:XMER<0  D  Q:IBLAST  ;Extract rest of message
"RTN","IBCESRV",102,0)
 ... S IBHOLDCT=IBHOLDCT+1,^TMP("IB-HOLD",$J,IBHOLDCT)=XMRG
"RTN","IBCESRV",103,0)
 ... I +XMRG=99,$P(XMRG,U,2)="$" S IBLAST=1 Q
"RTN","IBCESRV",104,0)
 ... S IBD=XMRG,Z=+XMRG_"^IBCE835(.IBD)"
"RTN","IBCESRV",105,0)
 ... S IBTXN=XMRG
"RTN","IBCESRV",106,0)
 ... I '$$CKLABEL(Z,.IBTXN,IBGBL) S IBLAST=1,IBWANT=0,XMER=-1,IBERR=7 Q
"RTN","IBCESRV",107,0)
 ... D @Z
"RTN","IBCESRV",108,0)
 . ;
"RTN","IBCESRV",109,0)
 . I $P(IBTXN,U)="REPORT" D  Q  ; Report file
"RTN","IBCESRV",110,0)
 .. D REPORT^IBCERPT(IBHD,IBDATE,.IBD,IBTXN)
"RTN","IBCESRV",111,0)
 .. I '$O(^TMP("IBMSG",$J,"REPORT",0,"D",0,0)) S IBWANT=0
"RTN","IBCESRV",112,0)
 . ;
"RTN","IBCESRV",113,0)
 . ; ****** Insert code for additional message types here and in ^IBCEM
"RTN","IBCESRV",114,0)
 ;
"RTN","IBCESRV",115,0)
 I IBLAST,IBWANT D ADD(IBGBL,.IBTDA,.IBERR)
"RTN","IBCESRV",116,0)
 ;
"RTN","IBCESRV",117,0)
 I 'IBLAST,'$G(IBERR) K @IBGBL S IBERR=2 ;No $ as last character of message
"RTN","IBCESRV",118,0)
MSGQ I $G(IBERR) D ERRUPD^IBCESRV1(IBGBL,.IBERR) S IBEFLG=1
"RTN","IBCESRV",119,0)
 Q IBEFLG
"RTN","IBCESRV",120,0)
 ;
"RTN","IBCESRV",121,0)
REST(IBTXN,IBGBL) ;Extract raw message data if not id-ed or can't process
"RTN","IBCESRV",122,0)
 N CT,Z
"RTN","IBCESRV",123,0)
 S CT=0
"RTN","IBCESRV",124,0)
 S Z=0 F  S Z=$O(^TMP("IB-HOLD",$J,Z)) Q:'Z  S CT=CT+1,@IBGBL@("BATCH",0,"D",0,CT)="##RAW DATA: "_$G(^TMP("IB-HOLD",$J,Z))
"RTN","IBCESRV",125,0)
 F  X XMREC Q:XMER<0  S:XMRG'="" CT=CT+1,@IBGBL@("BATCH",0,"D",0,CT)="##RAW DATA: "_XMRG
"RTN","IBCESRV",126,0)
 Q
"RTN","IBCESRV",127,0)
 ;
"RTN","IBCESRV",128,0)
ADD(IBGBL,IBTDA,IBERR) ; Add message(s) in @IBGBL to file #364.2
"RTN","IBCESRV",129,0)
 ;   Errors returned in IBERR
"RTN","IBCESRV",130,0)
 ;   Message entry #'s are returned in IBTDA(ien)=""
"RTN","IBCESRV",131,0)
 ;
"RTN","IBCESRV",132,0)
 N IB,IBA,IBB,IBC,IBDATA,IBHDR,IBLINE,IBTYP,IBRTN
"RTN","IBCESRV",133,0)
 S IBA="" F  S IBA=$O(@IBGBL@(IBA)) Q:IBA=""!(IBERR=3)  S IBB="" F  S IBB=$O(@IBGBL@(IBA,IBB)) Q:IBB=""!(IBERR=3)  D
"RTN","IBCESRV",134,0)
 . S IBHDR=$G(@IBGBL@(IBA,IBB,0))
"RTN","IBCESRV",135,0)
 . Q:IBHDR=""
"RTN","IBCESRV",136,0)
 . S IBTYP=$S($P(IBHDR,U)="":"",1:$O(^IBE(364.3,"B",$P(IBHDR,U),""))),IBRTN=$P($G(^IBE(364.3,IBTYP,0)),U,3,4)
"RTN","IBCESRV",137,0)
 . S IBTDA=$$ADDTXN(IBHDR) ;File message hdr data
"RTN","IBCESRV",138,0)
 . I IBTDA'>0 S IBERR=3 Q  ;msg hdr can't be filed
"RTN","IBCESRV",139,0)
 . S IBTDA(IBTDA)=""
"RTN","IBCESRV",140,0)
 . D LOADDET(IBA,IBB,.IBTDA,IBGBL,.IBERR,$P(IBHDR,U,1))
"RTN","IBCESRV",141,0)
 . Q:$G(IBERR)  ;Message not completely filed
"RTN","IBCESRV",142,0)
 . D TRTN^IBCESRV1(IBTDA):$TR(IBRTN,U)'="" ;Task update to run
"RTN","IBCESRV",143,0)
 Q
"RTN","IBCESRV",144,0)
 ;
"RTN","IBCESRV",145,0)
ADDTXN(IBDATA,REPORT) ; Add a trxn for msg in IBDATA to file 364.2
"RTN","IBCESRV",146,0)
 ; REPORT = 1 if storing a report format message
"RTN","IBCESRV",147,0)
 ;Function returns ien of the new entry in file 364.2 or "" if an error
"RTN","IBCESRV",148,0)
 ;
"RTN","IBCESRV",149,0)
 N A,IBDA,IBBTCH,IBBILL,IBDT,IBTEST,DLAYGO,DIC,DD,DO,X,Y,Z
"RTN","IBCESRV",150,0)
 ;
"RTN","IBCESRV",151,0)
 S IBDA="",IBBTCH=$P(IBDATA,U,5),IBBILL=$P(IBDATA,U,4)
"RTN","IBCESRV",152,0)
 S IBDT=$P(IBDATA,U,6)
"RTN","IBCESRV",153,0)
 S IBTEST=0
"RTN","IBCESRV",154,0)
 I $E($G(IBD("Q")),1,3)="MCT" D
"RTN","IBCESRV",155,0)
 . I IBBILL,'$P($G(^IBA(364,IBBILL,0)),U,7) S IBTEST=1 Q  ; Resubmit live claim for test
"RTN","IBCESRV",156,0)
 . I IBBTCH,$O(^IBM(361.4,"C",IBBTCH,0)) S IBTEST=1 Q  ; Resubmit live claim as test batch
"RTN","IBCESRV",157,0)
 ;
"RTN","IBCESRV",158,0)
 S (X,A)=$G(IBD("MSG#")) ; Use msg ID for .01 field
"RTN","IBCESRV",159,0)
 F Z=1:1 Q:'$D(^IBA(364.2,"B",A))  S A=X_"."_Z
"RTN","IBCESRV",160,0)
 S X=A
"RTN","IBCESRV",161,0)
 S DIC(0)="L",DIC="^IBA(364.2,",DLAYGO=364.2
"RTN","IBCESRV",162,0)
 S DIC("DR")=".02///"_$P(IBDATA,U)_";.03///^S X=""NOW"";.08////"_($P(IBDATA,U,7)="Y")_";.13////"_$P(IBDATA,U,8)_$S(IBBILL="":"",1:";.05////"_IBBILL)_";.06////P;.1////"_IBDT_$S(IBBTCH="":"",1:";.04////"_IBBTCH)_";.14////"_IBTEST
"RTN","IBCESRV",163,0)
 D FILE^DICN
"RTN","IBCESRV",164,0)
 S:Y>0 IBDA=+Y
"RTN","IBCESRV",165,0)
 ;
"RTN","IBCESRV",166,0)
 Q IBDA
"RTN","IBCESRV",167,0)
 ;
"RTN","IBCESRV",168,0)
LOADDET(IB1,IB2,IBTDA,IBGBL,IBERR,IBTNM) ; Load the rest of the message text into the message
"RTN","IBCESRV",169,0)
 ; IB1 = "BATCH" or "CLAIM" or "REPORT"
"RTN","IBCESRV",170,0)
 ; IB2 = batch # or claim # or 0
"RTN","IBCESRV",171,0)
 ; IBTDA = ien in file 364.2 being updated
"RTN","IBCESRV",172,0)
 ; IBGBL = name of the array holding the detail message text to be loaded
"RTN","IBCESRV",173,0)
 ; IBTNM = message name (i.e. "835EOB","837REC0","REPORT",etc.)
"RTN","IBCESRV",174,0)
 ;
"RTN","IBCESRV",175,0)
 ; OUTPUT: IBERR if any errors found, pass by reference
"RTN","IBCESRV",176,0)
 ;         IBTDA(IBTDA)=1 if errors - pass by reference
"RTN","IBCESRV",177,0)
 ;
"RTN","IBCESRV",178,0)
 S IBTDA=+$G(IBTDA)
"RTN","IBCESRV",179,0)
 N CT,IB3,IBE,IBZ,Q
"RTN","IBCESRV",180,0)
 ;
"RTN","IBCESRV",181,0)
 K ^TMP("IBTEXT",$J)
"RTN","IBCESRV",182,0)
 ;
"RTN","IBCESRV",183,0)
 S (CT,IB3)=0 ;Put formatted data into msg
"RTN","IBCESRV",184,0)
 F  S IB3=$O(@IBGBL@(IB1,IB2,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,IB3)
"RTN","IBCESRV",185,0)
 ; Add identifying data from hdr record
"RTN","IBCESRV",186,0)
 S IB3=0 F  S IB3=$O(^TMP("IBMSG-H",$J,IB1,IB2,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=^TMP("IBMSG-H",$J,IB1,IB2,IB3)
"RTN","IBCESRV",187,0)
 ;
"RTN","IBCESRV",188,0)
 ; Put raw data into msg
"RTN","IBCESRV",189,0)
 I $G(IBTNM)'="835EOB" D
"RTN","IBCESRV",190,0)
 . S IBZ="" F  S IBZ=$O(@IBGBL@(IB1,IB2,"D",IBZ)) Q:IBZ=""  S IB3=0 F  S IB3=$O(@IBGBL@(IB1,IB2,"D",IBZ,IB3)) Q:'IB3  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,"D",IBZ,IB3)
"RTN","IBCESRV",191,0)
 I $G(IBTNM)="835EOB" D
"RTN","IBCESRV",192,0)
 . S IB3=0 F  S IB3=$O(@IBGBL@(IB1,IB2,"D1",IB3)) Q:'IB3  S IBZ="" F  S IBZ=$O(@IBGBL@(IB1,IB2,"D1",IB3,IBZ)) Q:IBZ=""  S CT=CT+1,^TMP("IBTEXT",$J,CT)=@IBGBL@(IB1,IB2,"D1",IB3,IBZ)
"RTN","IBCESRV",193,0)
 ;
"RTN","IBCESRV",194,0)
 D STOREM^IBCESRV2(IBTDA,"^TMP(""IBTEXT"",$J)",.IBE)
"RTN","IBCESRV",195,0)
 ;
"RTN","IBCESRV",196,0)
 I $D(IBE("DIERR")) D  S:$L($G(IBE)) IBERR(IBTDA,IB1,IB2)=IBE ; Extract error
"RTN","IBCESRV",197,0)
 . D EXTERR^IBCESRV1(.IBERR,.IBTDA,.IBE)
"RTN","IBCESRV",198,0)
 K ^TMP("IBTEXT",$J)
"RTN","IBCESRV",199,0)
 Q
"RTN","IBCESRV",200,0)
 ;
"RTN","IBCESRV",201,0)
CKLABEL(Z,IBTXN,IBGBL) ;  Checks to be sure label in Z exists.
"RTN","IBCESRV",202,0)
 ; If it doesn't exist, files an error and returns 0 
"RTN","IBCESRV",203,0)
 ;  OR  returns 1 if it does exist
"RTN","IBCESRV",204,0)
 N X,LAB
"RTN","IBCESRV",205,0)
 S X=1,LAB=$P(Z,"(")
"RTN","IBCESRV",206,0)
 I $S('LAB!($L($P(LAB,U))>8):1,1:$T(@LAB)="") S X=0 D REST(.IBTXN,IBGBL)
"RTN","IBCESRV",207,0)
 Q X
"RTN","IBCESRV",208,0)
 ;
"RTN","IBCESRV",209,0)
ERROR ; Error condition messages
"RTN","IBCESRV",210,0)
 ;;Message code does not exist in IB MESSAGE ROUTER file (364.3).
"RTN","IBCESRV",211,0)
 ;;This message has no ending $.
"RTN","IBCESRV",212,0)
 ;;Message file problem - no message stored.
"RTN","IBCESRV",213,0)
 ;;Message file problem - message partially stored.
"RTN","IBCESRV",214,0)
 ;;Routine to process this message type does not exist.
"RTN","IBCESRV",215,0)
 ;;Batch does not exist for this confirmation message.
"RTN","IBCESRV",216,0)
 ;;Bad message format found - cannot store message.
"RTN","IBCESRV",217,0)
 ;
"RTN","IBCESRV2")
0^14^B58582884
"RTN","IBCESRV2",1,0)
IBCESRV2 ;ALB/TMP - Server based Auto-update utilities - IB EDI ;03/05/96
"RTN","IBCESRV2",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,155,296**;21-MAR-94
"RTN","IBCESRV2",3,0)
 Q
"RTN","IBCESRV2",4,0)
 ;
"RTN","IBCESRV2",5,0)
CON837 ; Confirmation of 837 batch - auto update
"RTN","IBCESRV2",6,0)
 ;Input expected: IBTDA = the ien of the message entry in file 364.2
"RTN","IBCESRV2",7,0)
 ;
"RTN","IBCESRV2",8,0)
 N IB0,IBBDA,IBBILL,IBMSG,IBFLAG,IBTYP,IBBST,DR,DA,DIE,Z
"RTN","IBCESRV2",9,0)
 Q:'$G(IBTDA)
"RTN","IBCESRV2",10,0)
 S IB0=$G(^IBA(364.2,IBTDA,0)),IBBDA=+$P(IB0,U,4) ;Batch ien
"RTN","IBCESRV2",11,0)
 S IBTYP=$P($G(^IBE(364.3,+$P(IB0,U,2),0)),U)
"RTN","IBCESRV2",12,0)
 ;
"RTN","IBCESRV2",13,0)
 Q:IBTYP'["837REC"
"RTN","IBCESRV2",14,0)
 ;
"RTN","IBCESRV2",15,0)
 I $P(IB0,U,14) D UPDTEST^IBCEPTM(IBTDA) Q  ; Test claim message from claim resubmitted claim
"RTN","IBCESRV2",16,0)
 ;
"RTN","IBCESRV2",17,0)
 ; Austin receipt is '837REC0',
"RTN","IBCESRV2",18,0)
 ;  other non-payer confirmations are '837REC1',
"RTN","IBCESRV2",19,0)
 ;  payer confirmations are '837REC2'
"RTN","IBCESRV2",20,0)
 S IBTYP=+$P(IBTYP,"837REC",2)
"RTN","IBCESRV2",21,0)
 S IBBST=$P($G(^IBA(364.1,IBBDA,0)),U,2)
"RTN","IBCESRV2",22,0)
 ;
"RTN","IBCESRV2",23,0)
 I $S(IBBST?1"A"1N:IBTYP<+$P(IBBST,"A",2),1:0) D  Q
"RTN","IBCESRV2",24,0)
 . ;Don't allow status to go backwards
"RTN","IBCESRV2",25,0)
 . D DELMSG(IBTDA)
"RTN","IBCESRV2",26,0)
 ;
"RTN","IBCESRV2",27,0)
 D UPDCONF(IBBDA,IBTDA,IBTYP,1)
"RTN","IBCESRV2",28,0)
 ;
"RTN","IBCESRV2",29,0)
 Q
"RTN","IBCESRV2",30,0)
 ;
"RTN","IBCESRV2",31,0)
BILLSTAC(IBBILL,IBTYP) ;Change status of transmit bill
"RTN","IBCESRV2",32,0)
 ; IBBILL = the ien of the entry in file 364 to update
"RTN","IBCESRV2",33,0)
 ; IBTYP = code for new status (see field 364;.03 for details)
"RTN","IBCESRV2",34,0)
 ;
"RTN","IBCESRV2",35,0)
 N IBSTAT,DIE,DA,DR,X,Y
"RTN","IBCESRV2",36,0)
 ;
"RTN","IBCESRV2",37,0)
 S IBSTAT=$P($G(^IBA(364,IBBILL,0)),U,3)
"RTN","IBCESRV2",38,0)
 ;
"RTN","IBCESRV2",39,0)
 Q:IBSTAT=IBTYP!(IBTYP="")  ;Status hasn't changed or new status is null
"RTN","IBCESRV2",40,0)
 Q:"CREZ"[IBSTAT  ;Don't update status of completed transmit record
"RTN","IBCESRV2",41,0)
 ;
"RTN","IBCESRV2",42,0)
 ; Don't allow the status to go backwards
"RTN","IBCESRV2",43,0)
 I $E(IBSTAT)="A","PX"[IBTYP Q
"RTN","IBCESRV2",44,0)
 I $E(IBSTAT)="A",$E(IBTYP)="A",$P(IBTYP,"A",2)<$P(IBSTAT,"A",2) Q
"RTN","IBCESRV2",45,0)
 ;
"RTN","IBCESRV2",46,0)
 S DIE="^IBA(364,",DA=IBBILL,DR=".03////"_IBTYP_";.04///NOW" D ^DIE
"RTN","IBCESRV2",47,0)
 Q
"RTN","IBCESRV2",48,0)
 ;
"RTN","IBCESRV2",49,0)
REJ837 ; Rejections 837
"RTN","IBCESRV2",50,0)
 ;Input IBTDA = the ien of the message entry in file 364.2
"RTN","IBCESRV2",51,0)
 ;
"RTN","IBCESRV2",52,0)
 Q:'$G(IBTDA)
"RTN","IBCESRV2",53,0)
 ;
"RTN","IBCESRV2",54,0)
 D UPDREJ(+$P($G(^IBA(364.2,IBTDA,0)),U,4),IBTDA)
"RTN","IBCESRV2",55,0)
 Q
"RTN","IBCESRV2",56,0)
 ;
"RTN","IBCESRV2",57,0)
DELMSG(IBTDA) ;
"RTN","IBCESRV2",58,0)
 ; Delete message after it successfully updates the database.
"RTN","IBCESRV2",59,0)
 ; IBTDA = the ien of the message in file 364.2
"RTN","IBCESRV2",60,0)
 D TRADEL^IBCESRV1(IBTDA)
"RTN","IBCESRV2",61,0)
 Q
"RTN","IBCESRV2",62,0)
 ;
"RTN","IBCESRV2",63,0)
BILLSTAR(IBBILL,IBTDA) ;Change status of transmit bill and bill on rejection
"RTN","IBCESRV2",64,0)
 ; IBBILL = ien of bill (399)
"RTN","IBCESRV2",65,0)
 ; IBTDA = ien of error message
"RTN","IBCESRV2",66,0)
 ;
"RTN","IBCESRV2",67,0)
 N DR,DIE,DA,IBSTAT,IBDA,IBCBH
"RTN","IBCESRV2",68,0)
 ;
"RTN","IBCESRV2",69,0)
 S IBDA=$S($P($G(^IBA(364.2,IBTDA,0)),U,5):$P(^(0),U,5),1:+$O(^IBA(364,"B",IBBILL,""),-1))
"RTN","IBCESRV2",70,0)
 S IBSTAT=$P($G(^IBA(364,IBDA,0)),U,3),IBCBH=$P($G(^DGCR(399,IBBILL,0)),U,21)
"RTN","IBCESRV2",71,0)
 ;
"RTN","IBCESRV2",72,0)
 Q:"CREZ"[IBSTAT  ;Don't update status of completed transmit record
"RTN","IBCESRV2",73,0)
 ;
"RTN","IBCESRV2",74,0)
 I IBSTAT'="E" S DIE="^IBA(364,",DA=IBDA,DR=".03////E;.04///NOW;.05////"_IBTDA D ^DIE
"RTN","IBCESRV2",75,0)
 ;
"RTN","IBCESRV2",76,0)
 ; Don't process further if only testing transmission with insurance co
"RTN","IBCESRV2",77,0)
 Q:+$G(^DIC(36,+$P($G(^DGCR(399,IBBILL,"I"_($F("PST",IBCBH)-1))),U),3))=2
"RTN","IBCESRV2",78,0)
 ;
"RTN","IBCESRV2",79,0)
 ; Suspend bill if waiting for MRA - allows it to be edited
"RTN","IBCESRV2",80,0)
 ;I $P($G(^DGCR(399,IBBILL,0)),U,13)=2,$$NEEDMRA^IBEFUNC(IBBILL)="1N" S DIE="^DGCR(399,",DA=IBBILL,DR=".13////6" D:DA ^DIE
"RTN","IBCESRV2",81,0)
 Q
"RTN","IBCESRV2",82,0)
 ;
"RTN","IBCESRV2",83,0)
UPDMSG(IBTDA,STAT,UPD) ; Update msg with status of 'P','U' or delete message
"RTN","IBCESRV2",84,0)
 ; STAT = 'P' 'U' for pending or updating, 'R' to delete
"RTN","IBCESRV2",85,0)
 ; UPD = flag that says update the data base updated field (.12) if 1
"RTN","IBCESRV2",86,0)
 ;
"RTN","IBCESRV2",87,0)
 N DIE,DA,DR
"RTN","IBCESRV2",88,0)
 ;
"RTN","IBCESRV2",89,0)
 I STAT="R" D DELMSG(IBTDA) Q
"RTN","IBCESRV2",90,0)
 ;
"RTN","IBCESRV2",91,0)
 I $P($G(^IBA(364.2,IBTDA,0)),U,6)'=STAT D
"RTN","IBCESRV2",92,0)
 . S DR=".06////"_STAT_$S($G(UPD):".12////1",1:"")
"RTN","IBCESRV2",93,0)
 . S DIE="^IBA(364.2,",DA=IBTDA
"RTN","IBCESRV2",94,0)
 . I $G(^IBA(364.2,DA,0)) D ^DIE
"RTN","IBCESRV2",95,0)
 Q
"RTN","IBCESRV2",96,0)
 ;
"RTN","IBCESRV2",97,0)
STOREM(IBTDA,IBTEXT,IBE) ;Store message text in file 364.2
"RTN","IBCESRV2",98,0)
 ; INPUT:
"RTN","IBCESRV2",99,0)
 ;   IBTDA = ien in file 364 message field entry #IBTDA
"RTN","IBCESRV2",100,0)
 ;   IBTEXT = name of the array where the message text is retrieved from
"RTN","IBCESRV2",101,0)
 ;            or "@" to delete the text from the message field
"RTN","IBCESRV2",102,0)
 ; OUTPUT:
"RTN","IBCESRV2",103,0)
 ;   IBE = array of errors (IBE("DIERR")) returned, pass by reference
"RTN","IBCESRV2",104,0)
 ;
"RTN","IBCESRV2",105,0)
 N IBZ,X,Y
"RTN","IBCESRV2",106,0)
 ;
"RTN","IBCESRV2",107,0)
 Q:$S($G(IBTEXT)="@":0,1:$D(@IBTEXT)<10)
"RTN","IBCESRV2",108,0)
 ;
"RTN","IBCESRV2",109,0)
 K IBE("DIERR")
"RTN","IBCESRV2",110,0)
 ;
"RTN","IBCESRV2",111,0)
 F IBZ=1:1:20 D WP^DIE(364.2,IBTDA_",",2,"AK",""_IBTEXT_"","IBE") Q:$S('$D(IBE("DIERR")):1,+IBE("DIERR")=1:$G(IBE("DIERR",1))'=110,1:1)  K IBE("DIERR") H .5 ; On lock error, retry up to 20 times
"RTN","IBCESRV2",112,0)
 Q
"RTN","IBCESRV2",113,0)
 ;
"RTN","IBCESRV2",114,0)
CKRES(IBBDA,IBDEF,IBLIST) ;Chk to see if the batch file can be updated to
"RTN","IBCESRV2",115,0)
 ; completely resubmitted based on finding all bills in it
"RTN","IBCESRV2",116,0)
 ; having a status of cancelled, resubmitted, deleted or closed
"RTN","IBCESRV2",117,0)
 ; or if none of these statuses, they at least have a transmission
"RTN","IBCESRV2",118,0)
 ; record for the same bill created at a later date/time.
"RTN","IBCESRV2",119,0)
 ;
"RTN","IBCESRV2",120,0)
 ; IBBDA : Batch # ien in file 364.1
"RTN","IBCESRV2",121,0)
 ; IBDEF : Default to set the batch status to.
"RTN","IBCESRV2",122,0)
 ;         0 or undefined, status will set to 0 (NOT INCOMPLETE)
"RTN","IBCESRV2",123,0)
 ;                         if no incomplete submissions found
"RTN","IBCESRV2",124,0)
 ;         1 status will set to 1 (INCOMPLETE)
"RTN","IBCESRV2",125,0)
 ;                  if any incomplete submissions found
"RTN","IBCESRV2",126,0)
 ;        -1 status will not be updated
"RTN","IBCESRV2",127,0)
 ; IBLIST : If passed by reference and IBLIST=1, returns list of bill
"RTN","IBCESRV2",128,0)
 ;          #'s not resubmitted in IBLIST(ien of file 364)=""
"RTN","IBCESRV2",129,0)
 ;
"RTN","IBCESRV2",130,0)
 N IB,IBINC,IBBILL,DIE,DR,DA,Z,Z0
"RTN","IBCESRV2",131,0)
 ;
"RTN","IBCESRV2",132,0)
 S IBDEF=+$G(IBDEF),IBINC=0
"RTN","IBCESRV2",133,0)
 Q:$S('$G(IBBDA):1,IBDEF'<0:'$P($G(^IBA(364.1,IBBDA,0)),U,10),1:0)
"RTN","IBCESRV2",134,0)
 ;
"RTN","IBCESRV2",135,0)
 I $G(IBLIST) K IBLIST S IBLIST=1
"RTN","IBCESRV2",136,0)
 S IB="" F  S IB=$O(^IBA(364,"ABAST",IBBDA,IB)) Q:IB=""  I "CRDZ"'[IB D  Q:'$G(IBLIST)
"RTN","IBCESRV2",137,0)
 . S Z=0 F  S Z=$O(^IBA(364,"ABAST",IBBDA,IB,Z)) Q:'Z  D
"RTN","IBCESRV2",138,0)
 .. S Z0=($$LAST364^IBCEF4(+$G(^IBA(364,Z,0)))=Z)
"RTN","IBCESRV2",139,0)
 .. I Z0,'$G(IBLIST) S IBINC=1 Q
"RTN","IBCESRV2",140,0)
 .. I $G(IBLIST),Z0 S IBLIST(Z)=""
"RTN","IBCESRV2",141,0)
 ;
"RTN","IBCESRV2",142,0)
 I $S('IBDEF:'IBINC,IBDEF>0:IBINC,1:0) S DA=IBBDA,DIE="^IBA(364.1,",DR=".1////"_IBDEF D ^DIE
"RTN","IBCESRV2",143,0)
 ;
"RTN","IBCESRV2",144,0)
 Q
"RTN","IBCESRV2",145,0)
 ;
"RTN","IBCESRV2",146,0)
UPDCONF(IBBDA,IBTDA,IBTYP,IBAUTO) ; Add status msgs to STATUS file #361
"RTN","IBCESRV2",147,0)
 ;   Update data base from confirmation msg
"RTN","IBCESRV2",148,0)
 ; IBBDA = ien of batch
"RTN","IBCESRV2",149,0)
 ; IBTDA = ien of message
"RTN","IBCESRV2",150,0)
 ; IBTYP = type of message
"RTN","IBCESRV2",151,0)
 ;         (0=Austin confirmation, 1=confirmation by non-payer
"RTN","IBCESRV2",152,0)
 ;          2=confirmation by payer)
"RTN","IBCESRV2",153,0)
 ; IBAUTO = flag for update mode
"RTN","IBCESRV2",154,0)
 ;         0 or null : manual   1 : auto
"RTN","IBCESRV2",155,0)
 ; ^TMP("IBCONF",$J,bill ien)="" where bill ien is the internal entry
"RTN","IBCESRV2",156,0)
 ;         number of any bills in file 364 to be excluded from the
"RTN","IBCESRV2",157,0)
 ;         confirmation due to reported errors
"RTN","IBCESRV2",158,0)
 ;
"RTN","IBCESRV2",159,0)
 N IBBILL,IBIDA,PRCASV,DA,DIE,DR,IBFLAG,IB0,IBS
"RTN","IBCESRV2",160,0)
 ;
"RTN","IBCESRV2",161,0)
 D UPDMSG(IBTDA,"U",0)
"RTN","IBCESRV2",162,0)
 ;
"RTN","IBCESRV2",163,0)
 S IB0=$G(^IBA(364.2,IBTDA,0))
"RTN","IBCESRV2",164,0)
 S IBS="A"_IBTYP
"RTN","IBCESRV2",165,0)
 ;
"RTN","IBCESRV2",166,0)
 S IBBILL="" F  S IBBILL=$O(^IBA(364,"ABABI",+IBBDA,IBBILL)) Q:'IBBILL  D
"RTN","IBCESRV2",167,0)
 . Q:$D(^TMP("IBCONF",$J,IBBILL))  ;Bill was rejected
"RTN","IBCESRV2",168,0)
 . ;Update status of all valid bills in a batch
"RTN","IBCESRV2",169,0)
 . S IBIDA=0 F  S IBIDA=$O(^IBA(364,"ABABI",IBBDA,IBBILL,IBIDA)) Q:'IBIDA  D
"RTN","IBCESRV2",170,0)
 .. D BILLSTAC(IBIDA,IBS)
"RTN","IBCESRV2",171,0)
 . ;
"RTN","IBCESRV2",172,0)
 . I 'IBTYP D
"RTN","IBCESRV2",173,0)
 .. S DR="20///N0W"
"RTN","IBCESRV2",174,0)
 .. S:$P($G(^DGCR(399,IBBILL,"TX")),U,5)="1N" DR=DR_";24///1R"
"RTN","IBCESRV2",175,0)
 .. S DA=IBBILL,DIE="^DGCR(399," D ^DIE
"RTN","IBCESRV2",176,0)
 ;
"RTN","IBCESRV2",177,0)
 I 'IBTYP D DELMSG(IBTDA)
"RTN","IBCESRV2",178,0)
 ;
"RTN","IBCESRV2",179,0)
 I 'IBBDA,$P(IB0,U,5) D
"RTN","IBCESRV2",180,0)
 . N IB
"RTN","IBCESRV2",181,0)
 . S IB=$P($G(^IBA(364,+$P(IB0,U,5),0)),U,2) ; batch
"RTN","IBCESRV2",182,0)
 . D BILLSTAC($P(IB0,U,5),IBS) ;Upd individual transmitted bill entry
"RTN","IBCESRV2",183,0)
 . I $G(^IBA(364.1,+IB,0)),$P($G(^(0)),U,2)'="A0" S DIE="^IBA(364.1,",DA=+IB,DR=".02////A0" D ^DIE
"RTN","IBCESRV2",184,0)
 ;
"RTN","IBCESRV2",185,0)
 I IBBDA,$P($G(^IBA(364.1,+IBBDA,0)),U,2)'=IBS D
"RTN","IBCESRV2",186,0)
 . S DA=IBBDA,DIE="^IBA(364.1,"
"RTN","IBCESRV2",187,0)
 . S DR=".02////"_IBS_$S($G(IBFLAG)'="":";.06////"_IBFLAG,1:"")_";1.05////"_$P(IB0,U,10)_";1.06///NOW"
"RTN","IBCESRV2",188,0)
 . D ^DIE
"RTN","IBCESRV2",189,0)
 ;
"RTN","IBCESRV2",190,0)
 ; Add message to bill status file 361 for bill
"RTN","IBCESRV2",191,0)
 I IBTYP D UPD361^IBCEST(IBTDA)
"RTN","IBCESRV2",192,0)
 ;
"RTN","IBCESRV2",193,0)
 S ZTREQ="@"
"RTN","IBCESRV2",194,0)
 K ^TMP("IBCONF",$J)
"RTN","IBCESRV2",195,0)
 Q
"RTN","IBCESRV2",196,0)
 ;
"RTN","IBCESRV2",197,0)
UPDREJ(IBBDA,IBTDA) ;  Update data base from rejection msg
"RTN","IBCESRV2",198,0)
 ; IBBDA = ien of batch
"RTN","IBCESRV2",199,0)
 ; IBTDA = ien of message
"RTN","IBCESRV2",200,0)
 ;
"RTN","IBCESRV2",201,0)
 N DA,DR,DIE,IBBILL,IBTBILL,IB0
"RTN","IBCESRV2",202,0)
 ;
"RTN","IBCESRV2",203,0)
 D UPDMSG(IBTDA,"U",0)
"RTN","IBCESRV2",204,0)
 ;
"RTN","IBCESRV2",205,0)
 S IB0=$G(^IBA(364.2,IBTDA,0)),IBTBILL=+$P(IB0,U,5),IBBILL=+$G(^IBA(364,IBTBILL,0))
"RTN","IBCESRV2",206,0)
 ;
"RTN","IBCESRV2",207,0)
 I $P(IB0,U,14) D UPDTEST^IBCEPTM(IBTDA) Q  ; Test claim message from claim resubmission - store in test msg file instead
"RTN","IBCESRV2",208,0)
 ;
"RTN","IBCESRV2",209,0)
 I IBBILL D BILLSTAR(IBBILL,IBTDA) ;Update individual bill
"RTN","IBCESRV2",210,0)
 ;
"RTN","IBCESRV2",211,0)
 I IBBDA,'IBBILL D
"RTN","IBCESRV2",212,0)
 . S DA=IBBDA,DIE="^IBA(364.1,"
"RTN","IBCESRV2",213,0)
 . S DR=".11////"_IBTDA_";.06////1;1.05////"_$P(IB0,U,10)_";1.06///NOW;.05////1"
"RTN","IBCESRV2",214,0)
 . D ^DIE ;Batch Rejected
"RTN","IBCESRV2",215,0)
 .;
"RTN","IBCESRV2",216,0)
 . ;Update status of all bills in batch, bill file
"RTN","IBCESRV2",217,0)
 . F  S IBBILL=$O(^IBA(364,"ABABI",IBBDA,IBBILL)) Q:'IBBILL  D BILLSTAR(IBBILL,IBTDA)
"RTN","IBCESRV2",218,0)
 ;
"RTN","IBCESRV2",219,0)
 ;Add message to bill status file 361 for bill
"RTN","IBCESRV2",220,0)
 D UPD361^IBCEST(IBTDA)
"RTN","IBCESRV2",221,0)
 ;
"RTN","IBCESRV2",222,0)
 S ZTREQ="@"
"RTN","IBCESRV2",223,0)
 Q
"RTN","IBCESRV2",224,0)
 ;
"RTN","IBCESRV2",225,0)
MAILIT ; Mails the report text (bulletin) to the IB EDI SUPERVISOR mail grp;
"RTN","IBCESRV2",226,0)
 N IB0,IBHD,IBL,IBZ,IBOK,XMTO,XMSUBJ,XMBODY,XMDUZ,XMZ,Z
"RTN","IBCESRV2",227,0)
 K ^TMP("IBMSG",$J),^TMP("IBMSGH",$J)
"RTN","IBCESRV2",228,0)
 Q:'$G(IBTDA)  ;Assume this exists and is the IEN of the message in 364.2
"RTN","IBCESRV2",229,0)
 S (IBL,IBZ,IBHD)=0,IBOK=1
"RTN","IBCESRV2",230,0)
 F  S IBZ=$O(^IBA(364.2,IBTDA,2,IBZ)) Q:'IBZ  S IB0=$G(^(IBZ,0)) D
"RTN","IBCESRV2",231,0)
 . Q:$P(IB0,U)="REPORT"!($E(IB0,1,4)="99^$")
"RTN","IBCESRV2",232,0)
 . ;
"RTN","IBCESRV2",233,0)
 . I $P(IB0,U)="SUBJECT" D  Q
"RTN","IBCESRV2",234,0)
 .. I $O(^TMP("IBMSG",$J,0)) D SEND(.IBOK) ; send last report
"RTN","IBCESRV2",235,0)
 .. S ^TMP("IBMSGH",$J)=$P(IB0,"SUBJECT^",2)
"RTN","IBCESRV2",236,0)
 . ;
"RTN","IBCESRV2",237,0)
 . I $E(IB0,1,18)="***  NEW PAGE  ***" D  Q
"RTN","IBCESRV2",238,0)
 .. F Z=1:1:5 S IBL=IBL+1,^TMP("IBMSG",$J,IBL)=" "
"RTN","IBCESRV2",239,0)
 .. S ^TMP("IBMSG",$J,IBL)="*** END OF PAGE ***"
"RTN","IBCESRV2",240,0)
 .. F Z=1,2 S IBL=IBL+1,^TMP("IBMSG",$J,IBL)=" "
"RTN","IBCESRV2",241,0)
 . S IBL=IBL+1,^TMP("IBMSG",$J,IBL)=IB0
"RTN","IBCESRV2",242,0)
 . ;
"RTN","IBCESRV2",243,0)
 I $O(^TMP("IBMSG",$J,0)) D SEND(.IBOK)
"RTN","IBCESRV2",244,0)
 I IBOK D DELMSG($G(IBTDA))
"RTN","IBCESRV2",245,0)
 K ^TMP("IBMSG",$J),^TMP($J,"IBMSGH",$J)
"RTN","IBCESRV2",246,0)
 Q
"RTN","IBCESRV2",247,0)
 ;
"RTN","IBCESRV2",248,0)
SEND(IBOK) ; Send actual message for 1 report
"RTN","IBCESRV2",249,0)
 ;
"RTN","IBCESRV2",250,0)
 N XMSUBJ,XMBODY,XMTO,XMZ,XMDUZ
"RTN","IBCESRV2",251,0)
 S XMSUBJ=$G(^TMP("IBMSGH",$J)),XMBODY="^TMP(""IBMSG"",$J)",XMTO("I:G.IB EDI SUPERVISOR")=""
"RTN","IBCESRV2",252,0)
 D SENDMSG^XMXAPI(,$E(XMSUBJ,1,65),XMBODY,.XMTO,,.XMZ)
"RTN","IBCESRV2",253,0)
 I '$G(XMZ) S IBOK=0
"RTN","IBCESRV2",254,0)
 K ^TMP("IBMSG",$J),^TMP("IBMSGH",$J)
"RTN","IBCESRV2",255,0)
 Q
"RTN","IBCESRV2",256,0)
 ;
"RTN","IBCEU0")
0^18^B61487243
"RTN","IBCEU0",1,0)
IBCEU0 ;ALB/TMP - EDI UTILITIES ;02-OCT-96
"RTN","IBCEU0",2,0)
 ;;2.0;INTEGRATED BILLING;**137,197,155,296**;21-MAR-94
"RTN","IBCEU0",3,0)
 ;
"RTN","IBCEU0",4,0)
NOTECHG(IBDA,IBNTEXT) ; Enter who/when review stat change was entered
"RTN","IBCEU0",5,0)
 ; IBDA = ien of entry in file 361.1
"RTN","IBCEU0",6,0)
 ; IBNTEXT = array containing the lines of text to store if not using the
"RTN","IBCEU0",7,0)
 ;           default text  IBNTEXT = # of lines  IBNTEXT(#)=line text
"RTN","IBCEU0",8,0)
 N IBIEN,IBTEXT,DA,X,Y,DIC,DO,DLAYGO,DD
"RTN","IBCEU0",9,0)
 S DA(1)=IBDA,DIC="^IBM(361.1,"_DA(1)_",2,",DIC(0)="L",DLAYGO=361.121
"RTN","IBCEU0",10,0)
 S X=$$NOW^XLFDT
"RTN","IBCEU0",11,0)
 D FILE^DICN K DIC,DD,DO,DLAYGO
"RTN","IBCEU0",12,0)
 Q:Y'>0
"RTN","IBCEU0",13,0)
 S DA(2)=DA(1),DA(1)=+Y,IBIEN=DA(1)_","_DA(2)_","
"RTN","IBCEU0",14,0)
 I $G(IBNTEXT) D
"RTN","IBCEU0",15,0)
 . M IBTEXT=IBNTEXT
"RTN","IBCEU0",16,0)
 E  D
"RTN","IBCEU0",17,0)
 . S IBTEXT(1)="REVIEW STATUS CHANGED TO '"_$$EXTERNAL^DILFD(361.1,.2,,$P(^IBM(361.1,DA(2),0),U,20))_"'  BY: "_$$EXTERNAL^DILFD(361.121,.02,,+$G(DUZ))
"RTN","IBCEU0",18,0)
 D WP^DIE(361.121,IBIEN,.03,,"IBTEXT") K ^TMP("DIERR",$J)
"RTN","IBCEU0",19,0)
 Q
"RTN","IBCEU0",20,0)
 ;
"RTN","IBCEU0",21,0)
LOCK(IBFILE,IBREC) ; Lock record # IBREC in file #IBFILE (361 or 361.1)
"RTN","IBCEU0",22,0)
 N OK
"RTN","IBCEU0",23,0)
 S OK=0
"RTN","IBCEU0",24,0)
 L +^IBM(IBFILE,IBREC):3 I $T S OK=1
"RTN","IBCEU0",25,0)
 I 'OK D
"RTN","IBCEU0",26,0)
 . W !,"Another user has locked this record - try again later"
"RTN","IBCEU0",27,0)
 . D PAUSE^VALM1
"RTN","IBCEU0",28,0)
 Q OK
"RTN","IBCEU0",29,0)
 ;
"RTN","IBCEU0",30,0)
UNLOCK(IBFILE,IBREC) ; Unlock record # IBREC in file #IBFILE
"RTN","IBCEU0",31,0)
 I $G(IBREC) L -^IBM(IBFILE,IBREC)
"RTN","IBCEU0",32,0)
 Q
"RTN","IBCEU0",33,0)
 ;
"RTN","IBCEU0",34,0)
MSTAT ; Enter reviewed by selected range
"RTN","IBCEU0",35,0)
 N IBDAX,IBA,IBCLOSE,IBLOOK,IBOK,IBSTOP,IBREBLD,IBCLOK,DA,DIR,X,Y,DIE,DR
"RTN","IBCEU0",36,0)
 D FULL^VALM1
"RTN","IBCEU0",37,0)
 D SEL^IBCECSA4(.IBDAX)
"RTN","IBCEU0",38,0)
 S IBREBLD=0
"RTN","IBCEU0",39,0)
 I $O(IBDAX(""))="" G MSTATQ
"RTN","IBCEU0",40,0)
 S DIR("?,1")="ONLY SELECT TO CLOSE THE TRANSMIT RECORDS IF YOU KNOW THESE ARE THE FINAL",DIR("?",2)="  ELECTRONIC MESSAGES YOU WILL RECEIVE FOR ALL THE BILLS REFERENCED BY",DIR("?")="  THESE MESSAGES"
"RTN","IBCEU0",41,0)
 S DIR(0)="YA",DIR("A",1)="DO YOU WANT TO AUTOMATICALLY CLOSE THE TRANSMIT RECORDS FOR ANY MESSAGES",DIR("A")=" THAT AREN'T REJECTS?: ",DIR("B")="NO" W ! D ^DIR K DIR W !
"RTN","IBCEU0",42,0)
 G:$D(DIRUT) MSTATQ
"RTN","IBCEU0",43,0)
 S IBCLOSE=(Y=1)
"RTN","IBCEU0",44,0)
 S DIR(0)="YA",DIR("A")="DO YOU WANT TO SEE EACH MESSAGE BEFORE MARKING IT REVIEWED?: ",DIR("B")="NO"
"RTN","IBCEU0",45,0)
 S DIR("?",1)="IF YOU OPT TO SEE EACH MESSAGE, YOU CAN CONTROL WHETHER OR NOT THE MESSAGE",DIR("?",2)="  IS MARKED AS REVIEWED"
"RTN","IBCEU0",46,0)
 I 'IBCLOSE S DIR("?")=DIR("?",2) K DIR("?",2)
"RTN","IBCEU0",47,0)
 I IBCLOSE S DIR("?",2)=DIR("?",2)_" AND, FOR NON-REJECTS, WHETHER OR NOT TO CLOSE THE",DIR("?")="  TRANSMIT RECORD FOR THE BILL"
"RTN","IBCEU0",48,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEU0",49,0)
 G:$D(DIRUT) MSTATQ
"RTN","IBCEU0",50,0)
 S IBLOOK=(Y=1)
"RTN","IBCEU0",51,0)
 S IBDAX=0,IBSTOP=0
"RTN","IBCEU0",52,0)
 F  S IBDAX=+$O(IBDAX(IBDAX)) Q:'IBDAX  D  Q:IBSTOP
"RTN","IBCEU0",53,0)
 . S IBA=$G(IBDAX(IBDAX))
"RTN","IBCEU0",54,0)
 . S DIE="^IBM(361,",DA=$P(IBA,U,2),DR=""
"RTN","IBCEU0",55,0)
 . I DA D
"RTN","IBCEU0",56,0)
 .. S IBOK=1
"RTN","IBCEU0",57,0)
 .. S IBCLOK=$S(IBCLOSE:1,1:0)
"RTN","IBCEU0",58,0)
 .. I IBLOOK D  Q:'IBOK
"RTN","IBCEU0",59,0)
 ... S DIC="^IBM(361," D EN^DIQ
"RTN","IBCEU0",60,0)
 ... I '$$LOCK(361,DA) W ! S IBOK=0 Q
"RTN","IBCEU0",61,0)
 ... S DIR(0)="YA",DIR("A")="OK TO MARK REVIEWED?: ",DIR("B")="YES",DIR("?",1)="IF YOU ENTER YES, THIS MESSAGE WILL BE MARKED REVIEWED"
"RTN","IBCEU0",62,0)
 ... S DIR("?",2)="IF YOU ENTER NO, THIS MESSAGE WILL NOT BE ALTERED",DIR("?",3)="IF YOU ENTER AN ^, THIS MESSAGE WILL NOT BE ALTERED & NONE OF THE",DIR("?")="   REMAINING MESSAGES WILL BE PROCESSED" D ^DIR K DIR
"RTN","IBCEU0",63,0)
 ... I Y'>0 S IBOK=0 S:$D(DIRUT) IBSTOP=1 Q
"RTN","IBCEU0",64,0)
 ... I 'IBCLOSE D
"RTN","IBCEU0",65,0)
 .... S DIR(0)="YA",DIR("A")="OK TO CLOSE THIS BILL'S TRANSMIT RECORD?: ",DIR("B")="NO"
"RTN","IBCEU0",66,0)
 .... S DIR("?",1)="If you respond YES to this prompt, the transmit status of this bill will",DIR("?",2)="  be set to CLOSED.  No further electronic processing of this bill will be"
"RTN","IBCEU0",67,0)
 .... S DIR("?",3)="  allowed.  If you respond NO to this prompt, this electronic message will",DIR("?",4)="  be filed as reviewed, but the bill's transmit status will not be changed."
"RTN","IBCEU0",68,0)
 .... S DIR("?",5)="  You may wish to periodically print a list of bills with a non-final",DIR("?",6)="  (closed/cancelled/etc) status to ensure the electronic processing of all"
"RTN","IBCEU0",69,0)
 .... S DIR("?",7)="  bills has been completed.  Closing the transmit bill record here will",DIR("?")="  eliminate the bill from this list."
"RTN","IBCEU0",70,0)
 .... W ! D ^DIR K DIR W !
"RTN","IBCEU0",71,0)
 .... I Y'=1 S IBCLOK=0
"RTN","IBCEU0",72,0)
 .. I 'IBLOOK,$P($G(^IBM(361,DA,0)),U,3)="R" D  Q:'IBOK
"RTN","IBCEU0",73,0)
 ... S DR="1",DIC="^IBM(361," D EN^DIQ W !,"Bill Number: ",$$EXPAND^IBTRE(361,.01,+^IBM(361,DA,0))
"RTN","IBCEU0",74,0)
 ... S DIR(0)="YA",DIR("A")="THIS IS A REJECTION ... ARE YOU SURE YOU WANT TO MARK IT REVIEWED?: ",DIR("B")="NO"
"RTN","IBCEU0",75,0)
 ... S DIR("?",1)="IF YOU ENTER YES, THIS MESSAGE WILL BE MARKED REVIEWED"
"RTN","IBCEU0",76,0)
 ... S DIR("?",2)="IF YOU ENTER NO, THIS MESSAGE WILL NOT BE ALTERED",DIR("?",3)="IF YOU ENTER AN ^, THIS MESSAGE WILL NOT BE ALTERED & NONE OF THE",DIR("?")="   MESSAGES FOLLOWING THIS ONE WILL BE PROCESSED" D ^DIR K DIR
"RTN","IBCEU0",77,0)
 ... I Y'=1 S IBOK=0 S:$D(DIRUT) IBSTOP=1
"RTN","IBCEU0",78,0)
 .. S:'IBREBLD IBREBLD=1
"RTN","IBCEU0",79,0)
 .. S DR=".09////2;.1////F" D ^DIE
"RTN","IBCEU0",80,0)
 .. N IBUPD
"RTN","IBCEU0",81,0)
 .. S IBUPD=0
"RTN","IBCEU0",82,0)
 .. I $$PRINTUPD($G(^IBM(361,DA,1,1,0)),+$P(^IBM(361,DA,0),U,11)) S IBUPD=1
"RTN","IBCEU0",83,0)
 .. I $G(^IBM(361,DA,1,1,0))["CLAIM SENT TO PAYER" D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),$S(IBCLOK:"Z",1:"A2")) S IBUPD=1
"RTN","IBCEU0",84,0)
 .. I $G(^IBM(361,DA,1,1,0))["CLAIM REJECTED" D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),"E") S IBUPD=1
"RTN","IBCEU0",85,0)
 .. I IBCLOK,'IBUPD D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),"Z")
"RTN","IBCEU0",86,0)
 .. I 'IBLOOK D
"RTN","IBCEU0",87,0)
 ... W !,"Seq #: ",IBDAX,"  Bill number: ",$$EXPAND^IBTRE(361,.01,+^IBM(361,DA,0)),?45,"REVIEWED"
"RTN","IBCEU0",88,0)
 .. D NOTECHG^IBCECSA2(DA,1)
"RTN","IBCEU0",89,0)
 .. D UNLOCK(361,DA)
"RTN","IBCEU0",90,0)
 W !!,"LAST SELECTION PROCESSED",!
"RTN","IBCEU0",91,0)
 D PAUSE^VALM1
"RTN","IBCEU0",92,0)
MSTATQ S VALMBCK="R"
"RTN","IBCEU0",93,0)
 I IBREBLD D BLD^IBCECSA1
"RTN","IBCEU0",94,0)
 Q
"RTN","IBCEU0",95,0)
 ;
"RTN","IBCEU0",96,0)
PRPAY(IBIFN,IBMCR) ; Returns total amount of prior payments applied to
"RTN","IBCEU0",97,0)
 ; bill ien IBIFN
"RTN","IBCEU0",98,0)
 ; IBMCR = flag passed in as 1 if MRA total should be included
"RTN","IBCEU0",99,0)
 ;
"RTN","IBCEU0",100,0)
 N IBTOT,IBZ,IBSEQ
"RTN","IBCEU0",101,0)
 S IBSEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU0",102,0)
 I IBSEQ'>1 S IBTOT=0 G PRPAYQ
"RTN","IBCEU0",103,0)
 D F^IBCEF("N-PRIOR PAYMENTS","IBZ",,IBIFN)
"RTN","IBCEU0",104,0)
 S IBTOT=IBZ
"RTN","IBCEU0",105,0)
 I $G(IBMCR),$$MCRONBIL^IBEFUNC(IBIFN)=1 D  ; MCR on bill before curr ins
"RTN","IBCEU0",106,0)
 . N Z,Z0,Z2,Q
"RTN","IBCEU0",107,0)
 . F Z=1:1:IBSEQ-1 I $$WNRBILL^IBEFUNC(IBIFN,Z) D
"RTN","IBCEU0",108,0)
 .. S IBTOT=+$$MCRPAY(IBIFN)
"RTN","IBCEU0",109,0)
PRPAYQ Q IBTOT
"RTN","IBCEU0",110,0)
 ;
"RTN","IBCEU0",111,0)
PRINTUPD(IBTEXT,IBDA) ; If the status message indicates claim was printed
"RTN","IBCEU0",112,0)
 ;    or the claim record in file 399 says it was, update the transmit
"RTN","IBCEU0",113,0)
 ;    message status to closed
"RTN","IBCEU0",114,0)
 ; IBTEXT = the first line text of the status message (optional)
"RTN","IBCEU0",115,0)
 ; IBDA = the ien of the transmission record in file 364
"RTN","IBCEU0",116,0)
 ;
"RTN","IBCEU0",117,0)
 ; FUNCTION returns 1 if message status changed
"RTN","IBCEU0",118,0)
 ;
"RTN","IBCEU0",119,0)
 N IBP,IBP1
"RTN","IBCEU0",120,0)
 S IBP=0,IBP1=$P($G(^DGCR(399,+$G(^IBA(364,+$G(IBDA),0)),"TX")),U,7)
"RTN","IBCEU0",121,0)
 I $G(IBTEXT)["CLAIM RECEIVED, PRINTED AND MAILED BY PRINT CENTER"!IBP1 D
"RTN","IBCEU0",122,0)
 . N Z
"RTN","IBCEU0",123,0)
 . S Z=$E($P($G(^IBA(364,IBDA,0)),U,3),1)
"RTN","IBCEU0",124,0)
 . I "AP"'[Z Q  ; Only change if status is pending or received/accepted
"RTN","IBCEU0",125,0)
 . D UPDTX^IBCECSA2(IBDA,"Z") S IBP=1
"RTN","IBCEU0",126,0)
 Q IBP
"RTN","IBCEU0",127,0)
 ;
"RTN","IBCEU0",128,0)
MCRPAY(IBIFN) ; Calculate MRA total for the bill IBIFN
"RTN","IBCEU0",129,0)
 N IBPAY,Q,Z0
"RTN","IBCEU0",130,0)
 S IBPAY=0
"RTN","IBCEU0",131,0)
 S Q=0 F  S Q=$O(^IBM(361.1,"B",IBIFN,Q)) Q:'Q  S Z0=$G(^IBM(361.1,Q,0)) I $P(Z0,U,4)=1 S IBPAY=IBPAY+$G(^(1))
"RTN","IBCEU0",132,0)
 Q IBPAY
"RTN","IBCEU0",133,0)
 ;
"RTN","IBCEU0",134,0)
PREOBTOT(IBIFN) ; Function - Calculates Patient Responsibility Amount
"RTN","IBCEU0",135,0)
 ; Input:  IBIFN - ien of Bill Number (ien of file 399)
"RTN","IBCEU0",136,0)
 ; Output Function returns: Patient Responsibility Amount for all EOB's for bill
"RTN","IBCEU0",137,0)
 ;
"RTN","IBCEU0",138,0)
 N FRMTYP,IBPTRES
"RTN","IBCEU0",139,0)
 S IBPTRES=0
"RTN","IBCEU0",140,0)
 ; Form Type 2=HCFA 1500; 3=UB92
"RTN","IBCEU0",141,0)
 S FRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEU0",142,0)
 ;
"RTN","IBCEU0",143,0)
 ; For bills w/HCFA 1500 Form Type, total up Pt Resp amount from top
"RTN","IBCEU0",144,0)
 ; level of EOB (field 1.02) for All MRA type EOB's on file for that
"RTN","IBCEU0",145,0)
 ; bill (IBIFN)
"RTN","IBCEU0",146,0)
 ;  
"RTN","IBCEU0",147,0)
 I FRMTYP=2 D  Q IBPTRES
"RTN","IBCEU0",148,0)
 . N IBEOB,EOBREC,EOBREC1,IBPRTOT
"RTN","IBCEU0",149,0)
 . S (IBEOB,IBPRTOT,IBPTRES)=0
"RTN","IBCEU0",150,0)
 . F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  ;
"RTN","IBCEU0",151,0)
 . . S EOBREC=$G(^IBM(361.1,IBEOB,0)),EOBREC1=$G(^(1))
"RTN","IBCEU0",152,0)
 . . I $P(EOBREC,U,4)'=1 Q  ;make sure it's an MRA
"RTN","IBCEU0",153,0)
 . . ; Total up Pt Resp Amounts on all valid MRA's
"RTN","IBCEU0",154,0)
 . . S IBPTRES=IBPTRES+$P(EOBREC1,U,2)
"RTN","IBCEU0",155,0)
 ;
"RTN","IBCEU0",156,0)
 ; For bills w/UB92 Form Type, loop through all EOB's and sum up amounts
"RTN","IBCEU0",157,0)
 ; on both Line level and on Claim level
"RTN","IBCEU0",158,0)
 N EOBADJ,IBEOB,LNLVL
"RTN","IBCEU0",159,0)
 S IBEOB=0
"RTN","IBCEU0",160,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  ;
"RTN","IBCEU0",161,0)
 . I $P($G(^IBM(361.1,IBEOB,0)),U,4)'=1 Q    ; must be an MRA
"RTN","IBCEU0",162,0)
 . ;
"RTN","IBCEU0",163,0)
 . ; get claim level adjustments
"RTN","IBCEU0",164,0)
 . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEU0",165,0)
 . S IBPTRES=IBPTRES+$$CALCPR(.EOBADJ)
"RTN","IBCEU0",166,0)
 . ;
"RTN","IBCEU0",167,0)
 . ; get line level adjustments
"RTN","IBCEU0",168,0)
 . S LNLVL=0
"RTN","IBCEU0",169,0)
 . F  S LNLVL=$O(^IBM(361.1,IBEOB,15,LNLVL)) Q:'LNLVL  D  ;
"RTN","IBCEU0",170,0)
 . . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,15,LNLVL,1)
"RTN","IBCEU0",171,0)
 . . S IBPTRES=IBPTRES+$$CALCPR(.EOBADJ)
"RTN","IBCEU0",172,0)
 Q IBPTRES
"RTN","IBCEU0",173,0)
 ;
"RTN","IBCEU0",174,0)
CALCPR(EOBADJ) ; Function - Calculate Patient Responsibilty Amount
"RTN","IBCEU0",175,0)
 ; For Group Code PR; Ignore the PR-AAA kludge
"RTN","IBCEU0",176,0)
 ; Input - EOBADJ = Array of Group Codes & Reason Codes from either the Claim
"RTN","IBCEU0",177,0)
 ;                 Level (10) or Service Line Level (15) of EOB file (#361.1)
"RTN","IBCEU0",178,0)
 ; Output - Function returns Patient Responsibility Amount
"RTN","IBCEU0",179,0)
 ;
"RTN","IBCEU0",180,0)
 N GRPLVL,RSNCD,RSNAMT,PTRESP
"RTN","IBCEU0",181,0)
 S (GRPLVL,PTRESP)=0
"RTN","IBCEU0",182,0)
 F  S GRPLVL=$O(EOBADJ(GRPLVL)) Q:'GRPLVL  D
"RTN","IBCEU0",183,0)
 . I $P($G(EOBADJ(GRPLVL,0)),U)'="PR" Q  ;grp code must be PR
"RTN","IBCEU0",184,0)
 . S RSNCD=0
"RTN","IBCEU0",185,0)
 . F  S RSNCD=$O(EOBADJ(GRPLVL,1,RSNCD)) Q:'RSNCD  D
"RTN","IBCEU0",186,0)
 . . I $P($G(EOBADJ(GRPLVL,1,RSNCD,0)),U,1)="AAA" Q   ; ignore PR-AAA
"RTN","IBCEU0",187,0)
 . . S RSNAMT=$P($G(EOBADJ(GRPLVL,1,RSNCD,0)),U,2)
"RTN","IBCEU0",188,0)
 . . S PTRESP=PTRESP+RSNAMT
"RTN","IBCEU0",189,0)
 Q PTRESP
"RTN","IBCEU0",190,0)
 ;
"RTN","IBCEU0",191,0)
COBMOD(IBXSAVE,IBXDATA,SEQ) ; output the modifiers from the COB
"RTN","IBCEU0",192,0)
 ; SEQ is which modifier we're extracting (1-4)
"RTN","IBCEU0",193,0)
 ; Build IBXDATA(line#)=Modifier# SEQ
"RTN","IBCEU0",194,0)
 NEW LN,N,Z,MOD,LNSEQ
"RTN","IBCEU0",195,0)
 KILL IBXDATA
"RTN","IBCEU0",196,0)
 I '$G(SEQ) Q
"RTN","IBCEU0",197,0)
 S (LN,LNSEQ)=0
"RTN","IBCEU0",198,0)
 F  S LN=$O(IBXSAVE("LCOB",LN)) Q:'LN  D
"RTN","IBCEU0",199,0)
 . S LNSEQ=LNSEQ+1
"RTN","IBCEU0",200,0)
 . S (N,Z)=0
"RTN","IBCEU0",201,0)
 . F  S Z=$O(IBXSAVE("LCOB",LN,"COBMOD",Z)) Q:'Z  D
"RTN","IBCEU0",202,0)
 .. S N=N+1
"RTN","IBCEU0",203,0)
 .. S MOD(LNSEQ,N)=$P($G(IBXSAVE("LCOB",LN,"COBMOD",Z,0)),U,1)
"RTN","IBCEU0",204,0)
 .. Q
"RTN","IBCEU0",205,0)
 . S MOD=$G(MOD(LNSEQ,SEQ))
"RTN","IBCEU0",206,0)
 . I MOD'="" S IBXDATA(LNSEQ)=MOD
"RTN","IBCEU0",207,0)
 . Q
"RTN","IBCEU0",208,0)
 Q
"RTN","IBCEU0",209,0)
 ;
"RTN","IBCEU1")
0^19^B41405183
"RTN","IBCEU1",1,0)
IBCEU1 ;ALB/TMP - EDI UTILITIES FOR EOB PROCESSING ;10-FEB-99
"RTN","IBCEU1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,296**;21-MAR-94
"RTN","IBCEU1",3,0)
 ;
"RTN","IBCEU1",4,0)
CCOB1(IBIFN,NODE,SEQ) ; Extract Claim level COB data
"RTN","IBCEU1",5,0)
 ; for a bill IBIFN
"RTN","IBCEU1",6,0)
 ; NODE = the file 361.1 node(s) to be returned, separated by commas
"RTN","IBCEU1",7,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",8,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",9,0)
 ; Returns IBXDATA(COB,n,node)  where COB = COB insurance sequence,
"RTN","IBCEU1",10,0)
 ;  n is the entry number in file 361.1 and node is the node requested
"RTN","IBCEU1",11,0)
 ;   = the requested node's data
"RTN","IBCEU1",12,0)
 ;
"RTN","IBCEU1",13,0)
 N IB,IBN,IBBILL,IBS,A,B,C
"RTN","IBCEU1",14,0)
 ;
"RTN","IBCEU1",15,0)
 K IBXDATA
"RTN","IBCEU1",16,0)
 ;
"RTN","IBCEU1",17,0)
 S:$G(NODE)="" NODE=1
"RTN","IBCEU1",18,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",19,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",20,0)
 ;
"RTN","IBCEU1",21,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",22,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",23,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",24,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",25,0)
 .. F Z=1:1:$L(NODE,",") D
"RTN","IBCEU1",26,0)
 ... S A=$P(NODE,",",Z)
"RTN","IBCEU1",27,0)
 ... Q:A=""
"RTN","IBCEU1",28,0)
 ... S IBN=$G(^IBM(361.1,C,A))
"RTN","IBCEU1",29,0)
 ... I $TR(IBN,U)'="" S IBXDATA(IBS,C,A)=IBN
"RTN","IBCEU1",30,0)
 ;
"RTN","IBCEU1",31,0)
 Q
"RTN","IBCEU1",32,0)
 ;
"RTN","IBCEU1",33,0)
CCAS1(IBIFN,SEQ) ; Extract all MEDICARE COB claim level adjustment data
"RTN","IBCEU1",34,0)
 ; for a bill IBIFN (subfile 361.11 in file 361.1)
"RTN","IBCEU1",35,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",36,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",37,0)
 ; Returns IBXDATA(COB,n)  where COB = COB insurance sequence,
"RTN","IBCEU1",38,0)
 ;       n is the entry number in file 361.1 and
"RTN","IBCEU1",39,0)
 ;       = the 0-node of the subfile entry (361.11)
"RTN","IBCEU1",40,0)
 ;    and IBXDATA(COB,n,m) where m is a sequential # and
"RTN","IBCEU1",41,0)
 ;                         = this level's 0-node
"RTN","IBCEU1",42,0)
 N IB,IBA,IBS,IB0,IB00,IBBILL,B,C,D,E
"RTN","IBCEU1",43,0)
 ;
"RTN","IBCEU1",44,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",45,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",46,0)
 ;
"RTN","IBCEU1",47,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",48,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",49,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",50,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",51,0)
 .. S (IBA,D)=0 F  S D=$O(^IBM(361.1,C,10,D)) Q:'D  S IB0=$G(^(D,0)) D
"RTN","IBCEU1",52,0)
 ... S IBXDATA(IBS,D)=IB0
"RTN","IBCEU1",53,0)
 ... S (IBA,E)=0
"RTN","IBCEU1",54,0)
 ... F  S E=$O(^IBM(361.1,C,10,D,1,E)) Q:'E  S IB00=$G(^(E,0)) D
"RTN","IBCEU1",55,0)
 .... S IBA=IBA+1
"RTN","IBCEU1",56,0)
 .... I $TR(IB00,U)'="" S IBXDATA(IBS,D,IBA)=IB00
"RTN","IBCEU1",57,0)
 ;
"RTN","IBCEU1",58,0)
 Q
"RTN","IBCEU1",59,0)
 ;
"RTN","IBCEU1",60,0)
SEQ(A) ; Translate sequence # A into corresponding letter representation
"RTN","IBCEU1",61,0)
 S A=$E("PST",A)
"RTN","IBCEU1",62,0)
 I $S(A'="":"PST"'[A,1:1) S A="P"
"RTN","IBCEU1",63,0)
 Q A
"RTN","IBCEU1",64,0)
 ;
"RTN","IBCEU1",65,0)
EOBTOT(IBIFN,IBCOBN) ; Total all EOB's for a bill's COB sequence
"RTN","IBCEU1",66,0)
 ; Function returns the total of all EOB's for a specific COB seq
"RTN","IBCEU1",67,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU1",68,0)
 ; IBCOBN = the # of the COB sequence you want EOB/MRA total for (1-3)
"RTN","IBCEU1",69,0)
 ;
"RTN","IBCEU1",70,0)
 N Z,Z0,IBTOT
"RTN","IBCEU1",71,0)
 S IBTOT=0
"RTN","IBCEU1",72,0)
 I $O(^IBM(361.1,"ABS",IBIFN,IBCOBN,0)) D
"RTN","IBCEU1",73,0)
 . ; Set up prior payment field here from MRA/EOB(s)
"RTN","IBCEU1",74,0)
 . S (IBTOT,Z)=0
"RTN","IBCEU1",75,0)
 . F  S Z=$O(^IBM(361.1,"ABS",IBIFN,IBCOBN,Z)) Q:'Z  D
"RTN","IBCEU1",76,0)
 .. S IBTOT=IBTOT+$P($G(^IBM(361.1,Z,1)),U,2)
"RTN","IBCEU1",77,0)
 Q IBTOT
"RTN","IBCEU1",78,0)
 ;
"RTN","IBCEU1",79,0)
 ;
"RTN","IBCEU1",80,0)
LCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the line adjustment reasons COB
"RTN","IBCEU1",81,0)
 ;  line # data for an electronic claim
"RTN","IBCEU1",82,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",83,0)
 ;                   pass by reference
"RTN","IBCEU1",84,0)
 ; COL = the column in the 837 flat file being output for LCAS record
"RTN","IBCEU1",85,0)
 N LINE,COBSEQ,RECCT,GRPCD,SEQ,RCCT,RCPC,DATA,RCREC,SEQLINE K IBXDATA
"RTN","IBCEU1",86,0)
 S (LINE,RECCT)=0
"RTN","IBCEU1",87,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",88,0)
 S RCREC=$S(COL'<4:COL-1\3,1:0)
"RTN","IBCEU1",89,0)
 ;S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",90,0)
 F  S LINE=$O(IBXSAVE("LCOB",LINE)) Q:'LINE  D
"RTN","IBCEU1",91,0)
 . S COBSEQ=0
"RTN","IBCEU1",92,0)
 . F  S COBSEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ)) Q:'COBSEQ  S SEQLINE=0 F  S SEQLINE=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE)) Q:'SEQLINE  S GRPCD="" F  S GRPCD=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD)) Q:GRPCD=""  D
"RTN","IBCEU1",93,0)
 .. S RECCT=RECCT+1
"RTN","IBCEU1",94,0)
 .. I COL=2 S IBXDATA(RECCT)=LINE,DATA=LINE D:RECCT>1 ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",95,0)
 .. I COL=3 S IBXDATA(RECCT)=$TR(GRPCD," ")
"RTN","IBCEU1",96,0)
 .. S (SEQ,RCCT)=0
"RTN","IBCEU1",97,0)
 .. F  S SEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U)'="" D
"RTN","IBCEU1",98,0)
 ... S RCCT=RCCT+1
"RTN","IBCEU1",99,0)
 ... Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",100,0)
 ... S DATA=$S(COL=2:LINE,COL=3:$TR(GRPCD," "),1:$P($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U,RCPC))
"RTN","IBCEU1",101,0)
 ... I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",102,0)
 ... I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"LCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",103,0)
 Q
"RTN","IBCEU1",104,0)
 ;
"RTN","IBCEU1",105,0)
CCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the claim adjustment reasons COB
"RTN","IBCEU1",106,0)
 ;  data for an electronic claim
"RTN","IBCEU1",107,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",108,0)
 ;                   pass by reference
"RTN","IBCEU1",109,0)
 ; COL = the column in the 837 flat file being output for CCAS record
"RTN","IBCEU1",110,0)
 N COBSEQ,RECCT,GRPSEQ,SEQ,RCPC,RCCT,RCREC,DATA K IBXDATA
"RTN","IBCEU1",111,0)
 S RECCT=0
"RTN","IBCEU1",112,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",113,0)
 S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",114,0)
 S COBSEQ=0
"RTN","IBCEU1",115,0)
 F  S COBSEQ=$O(IBXSAVE("CCAS",COBSEQ)) Q:'COBSEQ  S GRPSEQ="" F  S GRPSEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ)) Q:GRPSEQ=""  D
"RTN","IBCEU1",116,0)
 . S RECCT=RECCT+1
"RTN","IBCEU1",117,0)
 . I COL=2 S IBXDATA(RECCT)=COBSEQ D:RECCT>1 ID^IBCEF2(RECCT,"CCAS")
"RTN","IBCEU1",118,0)
 . I COL=3 S IBXDATA(RECCT)=$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U)
"RTN","IBCEU1",119,0)
 . S (SEQ,RCCT)=0
"RTN","IBCEU1",120,0)
 . F  S SEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U)'="" D
"RTN","IBCEU1",121,0)
 .. S RCCT=RCCT+1
"RTN","IBCEU1",122,0)
 .. Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",123,0)
 .. S DATA=$S(COL=2:COBSEQ,COL=3:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U),1:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U,RCPC))
"RTN","IBCEU1",124,0)
 .. I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",125,0)
 .. I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"CCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",126,0)
 Q
"RTN","IBCEU1",127,0)
 ;
"RTN","IBCEU1",128,0)
COBOUT(IBXSAVE,IBXDATA,CL) ;
"RTN","IBCEU1",129,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",130,0)
 S (N,Z,P)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",131,0)
 . S N=N+1
"RTN","IBCEU1",132,0)
 . S M=$O(IBXSAVE("LCOB",Z,"COB",""),-1) Q:'M
"RTN","IBCEU1",133,0)
 . S P=$O(IBXSAVE("LCOB",Z,"COB",M,""),-1) Q:'P
"RTN","IBCEU1",134,0)
 . S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",135,0)
 . S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",136,0)
 . Q
"RTN","IBCEU1",137,0)
 Q
"RTN","IBCEU1",138,0)
 ;
"RTN","IBCEU1",139,0)
COBPYRID(IBXIEN,IBXSAVE,IBXDATA) ; cob insurance company payer id
"RTN","IBCEU1",140,0)
 N CT,Z,N,NUM
"RTN","IBCEU1",141,0)
 K IBXDATA
"RTN","IBCEU1",142,0)
 I '$D(IBXSAVE("LCOB")) G COBPYRX
"RTN","IBCEU1",143,0)
 D ALLPAYID^IBCEF2(IBXIEN,.NUM,1)
"RTN","IBCEU1",144,0)
 S Z=$$COID^IBCEF2(IBXIEN),NUM=$G(NUM(1))
"RTN","IBCEU1",145,0)
 S:Z="" Z="0000"
"RTN","IBCEU1",146,0)
 S NUM=$E(NUM_$J("",5),1,5)_$E(Z_$J("",4),1,4)
"RTN","IBCEU1",147,0)
 S (CT,N)=0
"RTN","IBCEU1",148,0)
 F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  S CT=CT+1,IBXDATA(CT)=NUM
"RTN","IBCEU1",149,0)
COBPYRX ;
"RTN","IBCEU1",150,0)
 Q
"RTN","IBCEU1",151,0)
 ;
"RTN","IBCEU1",152,0)
EOBELIG(IBEOB) ; EOB eligibility for secondary claim
"RTN","IBCEU1",153,0)
 ; Function to decide if EOB entry in file 361.1 (ien=IBEOB) is
"RTN","IBCEU1",154,0)
 ; eligible to be included for secondary claim creation process
"RTN","IBCEU1",155,0)
 ; The EOB is not eligible if the review status is not 3, or if there
"RTN","IBCEU1",156,0)
 ; is no insurance sequence indicator, or if the EOB has been DENIED
"RTN","IBCEU1",157,0)
 ; and the patient responsibility for that EOB is $0.
"RTN","IBCEU1",158,0)
 ;
"RTN","IBCEU1",159,0)
 NEW ELIG,IBDATA,PTRESP
"RTN","IBCEU1",160,0)
 S ELIG=0
"RTN","IBCEU1",161,0)
 I '$G(IBEOB) G EOBELIGX
"RTN","IBCEU1",162,0)
 S IBDATA=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEU1",163,0)
 I $P(IBDATA,U,4)'=1 G EOBELIGX      ; Only MRA EOB's for now
"RTN","IBCEU1",164,0)
 I $P(IBDATA,U,16)'=3 G EOBELIGX     ; review status - accepted-complete
"RTN","IBCEU1",165,0)
 I '$P(IBDATA,U,15) G EOBELIGX       ; insurance sequence must exist
"RTN","IBCEU1",166,0)
 S PTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)     ; Pt Resp Amount for HCFAs
"RTN","IBCEU1",167,0)
 I $$FT^IBCEF(+IBDATA)=3 S PTRESP=$$PTRESPI^IBCECOB1(IBEOB)  ; for UBs
"RTN","IBCEU1",168,0)
 I PTRESP'>0,$P(IBDATA,U,13)=2 G EOBELIGX     ; Denied & No Pt. Resp.
"RTN","IBCEU1",169,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) G EOBELIGX     ; filing error
"RTN","IBCEU1",170,0)
 ;
"RTN","IBCEU1",171,0)
 S ELIG=1
"RTN","IBCEU1",172,0)
EOBELIGX ;
"RTN","IBCEU1",173,0)
 Q ELIG
"RTN","IBCEU1",174,0)
 ;
"RTN","IBCEU1",175,0)
EOBCNT(IBIFN) ; This function counts up the number of EOBs that are eligible
"RTN","IBCEU1",176,0)
 ; for the secondary claim creation process for a given bill#.
"RTN","IBCEU1",177,0)
 NEW CNT,IEN
"RTN","IBCEU1",178,0)
 S (CNT,IEN)=0
"RTN","IBCEU1",179,0)
 F  S IEN=$O(^IBM(361.1,"B",+$G(IBIFN),IEN)) Q:'IEN  D
"RTN","IBCEU1",180,0)
 . I $$EOBELIG(IEN) S CNT=CNT+1
"RTN","IBCEU1",181,0)
 . Q
"RTN","IBCEU1",182,0)
EOBCNTX ;
"RTN","IBCEU1",183,0)
 Q CNT
"RTN","IBCEU1",184,0)
 ;
"RTN","IBCNSGE")
0^6^B85166056
"RTN","IBCNSGE",1,0)
IBCNSGE ;ALB/ESG - Insurance Company EDI Parameter Report ;07-JAN-2005
"RTN","IBCNSGE",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBCNSGE",3,0)
 ;
"RTN","IBCNSGE",4,0)
 ; eClaims Plus
"RTN","IBCNSGE",5,0)
 ; Identify insurance companies and display EDI parameter information.
"RTN","IBCNSGE",6,0)
 ;
"RTN","IBCNSGE",7,0)
 ;
"RTN","IBCNSGE",8,0)
EN ; Entry Point
"RTN","IBCNSGE",9,0)
 NEW IBRINS,IBRBID,IBRINS1,IBRINS2,IBRSORT,STOP
"RTN","IBCNSGE",10,0)
 D SELECT I STOP G EXIT
"RTN","IBCNSGE",11,0)
 D SORT I STOP G EXIT
"RTN","IBCNSGE",12,0)
 D DEVICE
"RTN","IBCNSGE",13,0)
EXIT ;
"RTN","IBCNSGE",14,0)
 Q
"RTN","IBCNSGE",15,0)
 ;
"RTN","IBCNSGE",16,0)
SELECT ; Select insurance companies to include on the report
"RTN","IBCNSGE",17,0)
 NEW DIR,DIC,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,IBQ
"RTN","IBCNSGE",18,0)
SEL1 ;
"RTN","IBCNSGE",19,0)
 S STOP=0,IBQ=0
"RTN","IBCNSGE",20,0)
 W @IOF
"RTN","IBCNSGE",21,0)
 W !!?21,"Insurance Company EDI Parameter Report"
"RTN","IBCNSGE",22,0)
 W !!?5,"This report will display the EDI parameter information for selected"
"RTN","IBCNSGE",23,0)
 W !?5,"insurance companies.  You can specify one company, multiple companies,"
"RTN","IBCNSGE",24,0)
 W !?5,"a range of company names, or all companies on file."
"RTN","IBCNSGE",25,0)
 ;
"RTN","IBCNSGE",26,0)
 S DIR(0)="SO^A:Include All Insurance Companies;S:Select Specific Insurance Companies;R:Specify a Range of Insurance Company Names"
"RTN","IBCNSGE",27,0)
 S DIR("A")="     Method for selecting insurance companies"
"RTN","IBCNSGE",28,0)
 S DIR("B")="A"
"RTN","IBCNSGE",29,0)
 S DIR("?",1)="Enter a code from the list.  This defines how you want to select insurance"
"RTN","IBCNSGE",30,0)
 S DIR("?",2)="companies for this report."
"RTN","IBCNSGE",31,0)
 S DIR("?",3)=""
"RTN","IBCNSGE",32,0)
 S DIR("?",4)="If you choose 'A', then all active companies will be included."
"RTN","IBCNSGE",33,0)
 S DIR("?",5)="If you choose 'S', then one or more specific companies can be selected."
"RTN","IBCNSGE",34,0)
 S DIR("?")="If you choose 'R', then you can enter a range of company names."
"RTN","IBCNSGE",35,0)
 D ^DIR K DIR
"RTN","IBCNSGE",36,0)
 I $D(DIRUT) S STOP=1 G SELX
"RTN","IBCNSGE",37,0)
 S IBRINS=Y
"RTN","IBCNSGE",38,0)
 I '$F(".A.S.R.","."_IBRINS_".") S STOP=1 G SELX
"RTN","IBCNSGE",39,0)
 I IBRINS="S" D MULT I IBQ G SEL1      ; choose one or many
"RTN","IBCNSGE",40,0)
 I IBRINS="R" D RANGE I IBQ G SEL1     ; choose a range
"RTN","IBCNSGE",41,0)
 ;
"RTN","IBCNSGE",42,0)
 W !
"RTN","IBCNSGE",43,0)
 S DIR(0)="YO"
"RTN","IBCNSGE",44,0)
 S DIR("A",1)="Only include Insurance Companies with Electronic"
"RTN","IBCNSGE",45,0)
 S DIR("A")="             Bill ID's that are blank or contain ""PRNT"""
"RTN","IBCNSGE",46,0)
 S DIR("B")="NO"
"RTN","IBCNSGE",47,0)
 S DIR("?",1)="Enter either 'Y' or 'N'.  If you choose 'Y', then this will limit the selection"
"RTN","IBCNSGE",48,0)
 S DIR("?",2)="of insurance companies.  Only those companies in which the Inst ID or the Prof"
"RTN","IBCNSGE",49,0)
 S DIR("?",3)="ID is either blank or contains ""PRNT"" (uppercase or lowercase)"
"RTN","IBCNSGE",50,0)
 S DIR("?")="will be included."
"RTN","IBCNSGE",51,0)
 D ^DIR K DIR
"RTN","IBCNSGE",52,0)
 I $D(DIRUT) S STOP=1 G SELX
"RTN","IBCNSGE",53,0)
 S IBRBID=Y
"RTN","IBCNSGE",54,0)
SELX ;
"RTN","IBCNSGE",55,0)
 Q
"RTN","IBCNSGE",56,0)
 ;
"RTN","IBCNSGE",57,0)
MULT ; select one or many insurance companies
"RTN","IBCNSGE",58,0)
 NEW DIC,X,Y
"RTN","IBCNSGE",59,0)
 K IBRINS S IBRINS="S"
"RTN","IBCNSGE",60,0)
 F  D  Q:Y'>0
"RTN","IBCNSGE",61,0)
 . W ! S DIC("A")="Insurance Company: "
"RTN","IBCNSGE",62,0)
 . S DIC("S")="I $$ACTIVE^IBCNEUT4(Y)"    ; screen out Inactives
"RTN","IBCNSGE",63,0)
 . S DIC=36,DIC(0)="AEQM" D ^DIC
"RTN","IBCNSGE",64,0)
 . Q:Y'>0
"RTN","IBCNSGE",65,0)
 . S IBRINS(+Y)=$P($G(^DIC(36,+Y,0)),U,1)
"RTN","IBCNSGE",66,0)
 . Q
"RTN","IBCNSGE",67,0)
 I $O(IBRINS(""))="" S IBQ=1 G MULTX   ; none selected
"RTN","IBCNSGE",68,0)
MULTX ;
"RTN","IBCNSGE",69,0)
 Q
"RTN","IBCNSGE",70,0)
 ;
"RTN","IBCNSGE",71,0)
RANGE ; select a range of insurance company names
"RTN","IBCNSGE",72,0)
 K IBRINS1,IBRINS2
"RTN","IBCNSGE",73,0)
 W !
"RTN","IBCNSGE",74,0)
 S DIR(0)="FO",DIR("A")="Start with Insurance Company"
"RTN","IBCNSGE",75,0)
 S DIR("?",1)="This response can be free text."
"RTN","IBCNSGE",76,0)
 S DIR("?",2)="Responses are case sensitive."
"RTN","IBCNSGE",77,0)
 S DIR("?")="Example: To find CIGNA, type CIGNA not cigna or Cigna."
"RTN","IBCNSGE",78,0)
 S DIR("B")="First" D ^DIR K DIR
"RTN","IBCNSGE",79,0)
 I $D(DIRUT) S IBQ=1 G RANGEX
"RTN","IBCNSGE",80,0)
 S IBRINS1=Y
"RTN","IBCNSGE",81,0)
 I IBRINS1="First" S IBRINS1=" "
"RTN","IBCNSGE",82,0)
 ;
"RTN","IBCNSGE",83,0)
 W !
"RTN","IBCNSGE",84,0)
 S DIR(0)="FO",DIR("A")="Go to Insurance Company"
"RTN","IBCNSGE",85,0)
 S DIR("?",1)="This response can be free text."
"RTN","IBCNSGE",86,0)
 S DIR("?",2)="Responses are case sensitive."
"RTN","IBCNSGE",87,0)
 S DIR("?")="Example: To find CIGNA, type CIGNA not cigna or Cigna."
"RTN","IBCNSGE",88,0)
 S DIR("B")="Last" D ^DIR K DIR
"RTN","IBCNSGE",89,0)
 I $D(DIRUT) S IBQ=1 G RANGEX
"RTN","IBCNSGE",90,0)
 S IBRINS2=Y
"RTN","IBCNSGE",91,0)
 I IBRINS2="Last" S IBRINS2="~~~~~"
"RTN","IBCNSGE",92,0)
 ;
"RTN","IBCNSGE",93,0)
 I IBRINS1=" ",IBRINS2="~~~~~" D  G RANGEX
"RTN","IBCNSGE",94,0)
 . K IBRINS,IBRINS1,IBRINS2
"RTN","IBCNSGE",95,0)
 . S IBRINS="A"
"RTN","IBCNSGE",96,0)
 . Q
"RTN","IBCNSGE",97,0)
 ;
"RTN","IBCNSGE",98,0)
 I IBRINS1]IBRINS2 D  G RANGE
"RTN","IBCNSGE",99,0)
 . W !!?5,"Sorry ..... Ending name must come after Starting name"
"RTN","IBCNSGE",100,0)
 . W !!?5,"Please try again",*7
"RTN","IBCNSGE",101,0)
 . Q
"RTN","IBCNSGE",102,0)
 ;
"RTN","IBCNSGE",103,0)
RANGEX ;
"RTN","IBCNSGE",104,0)
 Q
"RTN","IBCNSGE",105,0)
 ;
"RTN","IBCNSGE",106,0)
SORT ; Choose the sorting method
"RTN","IBCNSGE",107,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNSGE",108,0)
 W !!?5,"*** Sort Criteria ***"
"RTN","IBCNSGE",109,0)
 S DIR(0)="SO^1:Insurance Company Name;2:Prof Electronic Bill ID;3:Inst Electronic Bill ID;4:Electronic Type;5:Type Of Coverage"
"RTN","IBCNSGE",110,0)
 S DIR("A")="Sort By",DIR("B")=1
"RTN","IBCNSGE",111,0)
 D ^DIR K DIR
"RTN","IBCNSGE",112,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNSGE",113,0)
 S IBRSORT=Y
"RTN","IBCNSGE",114,0)
SORTX ;
"RTN","IBCNSGE",115,0)
 Q
"RTN","IBCNSGE",116,0)
 ;
"RTN","IBCNSGE",117,0)
COMPILE ; Entry point for task; compile scratch global, print, clean-up
"RTN","IBCNSGE",118,0)
 ;
"RTN","IBCNSGE",119,0)
 NEW RTN,INSIEN,INSNM,DATA,ADDR,EDI,PROFID,INSTID,NAME,STREET,CITY
"RTN","IBCNSGE",120,0)
 NEW STATE,TYPCOV,TRANS,INSTYP,SORT,TMP
"RTN","IBCNSGE",121,0)
 ;
"RTN","IBCNSGE",122,0)
 S RTN="IBCNSGE"
"RTN","IBCNSGE",123,0)
 KILL ^TMP($J,RTN)   ; init
"RTN","IBCNSGE",124,0)
 ;
"RTN","IBCNSGE",125,0)
 ; all insurances
"RTN","IBCNSGE",126,0)
 I IBRINS="A" D
"RTN","IBCNSGE",127,0)
 . S INSIEN=0
"RTN","IBCNSGE",128,0)
 . F  S INSIEN=$O(^DIC(36,INSIEN)) Q:'INSIEN  D CALC(INSIEN)
"RTN","IBCNSGE",129,0)
 . Q
"RTN","IBCNSGE",130,0)
 ;
"RTN","IBCNSGE",131,0)
 ; specific insurances
"RTN","IBCNSGE",132,0)
 I IBRINS="S" D
"RTN","IBCNSGE",133,0)
 . S INSIEN=0
"RTN","IBCNSGE",134,0)
 . F  S INSIEN=$O(IBRINS(INSIEN)) Q:'INSIEN  D CALC(INSIEN)
"RTN","IBCNSGE",135,0)
 . Q
"RTN","IBCNSGE",136,0)
 ;
"RTN","IBCNSGE",137,0)
 ; a range of insurances
"RTN","IBCNSGE",138,0)
 I IBRINS="R" D
"RTN","IBCNSGE",139,0)
 . S INSNM=$O(^DIC(36,"B",IBRINS1),-1)
"RTN","IBCNSGE",140,0)
 . F  S INSNM=$O(^DIC(36,"B",INSNM)) Q:INSNM=""  Q:INSNM]IBRINS2  D
"RTN","IBCNSGE",141,0)
 .. S INSIEN=0
"RTN","IBCNSGE",142,0)
 .. F  S INSIEN=$O(^DIC(36,"B",INSNM,INSIEN)) Q:'INSIEN  D CALC(INSIEN)
"RTN","IBCNSGE",143,0)
 .. Q
"RTN","IBCNSGE",144,0)
 . Q
"RTN","IBCNSGE",145,0)
 ;
"RTN","IBCNSGE",146,0)
 D PRINT                           ; print the report
"RTN","IBCNSGE",147,0)
 D ^%ZISC                          ; close the device
"RTN","IBCNSGE",148,0)
 KILL ^TMP($J,RTN)                 ; kill scratch global
"RTN","IBCNSGE",149,0)
 I $D(ZTQUEUED) S ZTREQ="@"        ; purge the task record
"RTN","IBCNSGE",150,0)
COMPX ;
"RTN","IBCNSGE",151,0)
 Q
"RTN","IBCNSGE",152,0)
 ;
"RTN","IBCNSGE",153,0)
CALC(INS) ; extract insurance data for company ien=INS
"RTN","IBCNSGE",154,0)
 ;
"RTN","IBCNSGE",155,0)
 I '$$ACTIVE^IBCNEUT4(INS) G CALCX      ; not active
"RTN","IBCNSGE",156,0)
 S DATA=$G(^DIC(36,INS,0))
"RTN","IBCNSGE",157,0)
 S ADDR=$G(^DIC(36,INS,.11))
"RTN","IBCNSGE",158,0)
 S EDI=$G(^DIC(36,INS,3))
"RTN","IBCNSGE",159,0)
 S PROFID=$P(EDI,U,2)
"RTN","IBCNSGE",160,0)
 S INSTID=$P(EDI,U,4)
"RTN","IBCNSGE",161,0)
 ;
"RTN","IBCNSGE",162,0)
 I IBRBID,PROFID'="",INSTID'="",$$UP^XLFSTR(PROFID)'["PRNT",$$UP^XLFSTR(INSTID)'["PRNT" G CALCX
"RTN","IBCNSGE",163,0)
 ;
"RTN","IBCNSGE",164,0)
 S NAME=$P(DATA,U,1) S:NAME="" NAME="~UNK"
"RTN","IBCNSGE",165,0)
 S STREET=$P(ADDR,U,1)
"RTN","IBCNSGE",166,0)
 S CITY=$P(ADDR,U,4)
"RTN","IBCNSGE",167,0)
 S STATE=+$P(ADDR,U,5)
"RTN","IBCNSGE",168,0)
 S STATE=$S(STATE:$P($G(^DIC(5,STATE,0)),U,2),1:"")
"RTN","IBCNSGE",169,0)
 S TYPCOV=$$EXTERNAL^DILFD(36,.13,,$P(DATA,U,13))
"RTN","IBCNSGE",170,0)
 S TRANS=$$EXTERNAL^DILFD(36,3.01,,$P(EDI,U,1))
"RTN","IBCNSGE",171,0)
 S INSTYP=$$EXTERNAL^DILFD(36,3.09,,$P(EDI,U,9))
"RTN","IBCNSGE",172,0)
 ;
"RTN","IBCNSGE",173,0)
 S SORT=" "
"RTN","IBCNSGE",174,0)
 I IBRSORT=1,NAME'="" S SORT=" "_NAME
"RTN","IBCNSGE",175,0)
 I IBRSORT=2,PROFID'="" S SORT=" "_PROFID
"RTN","IBCNSGE",176,0)
 I IBRSORT=3,INSTID'="" S SORT=" "_INSTID
"RTN","IBCNSGE",177,0)
 I IBRSORT=4,INSTYP'="" S SORT=" "_INSTYP
"RTN","IBCNSGE",178,0)
 I IBRSORT=5,TYPCOV'="" S SORT=" "_TYPCOV
"RTN","IBCNSGE",179,0)
 ;
"RTN","IBCNSGE",180,0)
 S TMP=NAME_U_STREET_U_CITY_U_STATE_U_INSTYP_U_TYPCOV_U_TRANS_U_INSTID_U_PROFID
"RTN","IBCNSGE",181,0)
 S ^TMP($J,RTN,SORT,NAME,INS)=TMP
"RTN","IBCNSGE",182,0)
CALCX ;
"RTN","IBCNSGE",183,0)
 Q
"RTN","IBCNSGE",184,0)
 ;
"RTN","IBCNSGE",185,0)
PRINT ; print the report to the specified device
"RTN","IBCNSGE",186,0)
 NEW MAXCNT,CRT,PAGECNT,STOP,SORT,NAME,INS,DATA,DIR,X,Y,DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSGE",187,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNSGE",188,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNSGE",189,0)
 S PAGECNT=0,STOP=0
"RTN","IBCNSGE",190,0)
 ;
"RTN","IBCNSGE",191,0)
 I '$D(^TMP($J,RTN)) D HEADER W !!!?5,"No Data Found"
"RTN","IBCNSGE",192,0)
 ;
"RTN","IBCNSGE",193,0)
 S SORT=""
"RTN","IBCNSGE",194,0)
 F  S SORT=$O(^TMP($J,RTN,SORT)) Q:SORT=""  D  Q:STOP
"RTN","IBCNSGE",195,0)
 . S NAME=""
"RTN","IBCNSGE",196,0)
 . F  S NAME=$O(^TMP($J,RTN,SORT,NAME)) Q:NAME=""  D  Q:STOP
"RTN","IBCNSGE",197,0)
 .. S INS=0
"RTN","IBCNSGE",198,0)
 .. F  S INS=$O(^TMP($J,RTN,SORT,NAME,INS)) Q:'INS  D  Q:STOP
"RTN","IBCNSGE",199,0)
 ... S DATA=$G(^TMP($J,RTN,SORT,NAME,INS))
"RTN","IBCNSGE",200,0)
 ... I $Y+1>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCNSGE",201,0)
 ... W !,$E($P(DATA,U,1),1,27)       ; name
"RTN","IBCNSGE",202,0)
 ... W ?29,$E($P(DATA,U,2),1,19)     ; address1
"RTN","IBCNSGE",203,0)
 ... W ?50,$E($P(DATA,U,3),1,13)     ; city, st
"RTN","IBCNSGE",204,0)
 ... I $P(DATA,U,3)'="",$P(DATA,U,4)'="" W ", "
"RTN","IBCNSGE",205,0)
 ... W $E($P(DATA,U,4),1,2)
"RTN","IBCNSGE",206,0)
 ... W ?69,$E($P(DATA,U,7),1,8)      ; transmit elec
"RTN","IBCNSGE",207,0)
 ... W ?79,$E($P(DATA,U,8),1,8)      ; inst payer id
"RTN","IBCNSGE",208,0)
 ... W ?89,$E($P(DATA,U,9),1,8)      ; prof payer id
"RTN","IBCNSGE",209,0)
 ... W ?99,$E($P(DATA,U,5),1,12)     ; ins type
"RTN","IBCNSGE",210,0)
 ... W ?113,$E($P(DATA,U,6),1,19)    ; type of cov
"RTN","IBCNSGE",211,0)
 ... Q
"RTN","IBCNSGE",212,0)
 .. Q
"RTN","IBCNSGE",213,0)
 . Q
"RTN","IBCNSGE",214,0)
 ;
"RTN","IBCNSGE",215,0)
 I STOP G PRINTX
"RTN","IBCNSGE",216,0)
 W !!?5,"*** End of Report ***"
"RTN","IBCNSGE",217,0)
 I CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNSGE",218,0)
PRINTX ;
"RTN","IBCNSGE",219,0)
 Q
"RTN","IBCNSGE",220,0)
 ;
"RTN","IBCNSGE",221,0)
HEADER ; page break and report header information
"RTN","IBCNSGE",222,0)
 NEW LIN,HDR,TAB,C1,C2
"RTN","IBCNSGE",223,0)
 S STOP=0
"RTN","IBCNSGE",224,0)
 I CRT,PAGECNT>0,'$D(ZTQUEUED) D  I STOP G HEADX
"RTN","IBCNSGE",225,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNSGE",226,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNSGE",227,0)
 . I 'Y S STOP=1 Q
"RTN","IBCNSGE",228,0)
 . Q
"RTN","IBCNSGE",229,0)
 ;
"RTN","IBCNSGE",230,0)
 S PAGECNT=PAGECNT+1
"RTN","IBCNSGE",231,0)
 W @IOF,!
"RTN","IBCNSGE",232,0)
 ;
"RTN","IBCNSGE",233,0)
 I IBRINS="A" W "All Companies"
"RTN","IBCNSGE",234,0)
 I IBRINS="S" W "Selected Companies"
"RTN","IBCNSGE",235,0)
 I IBRINS="R" D    ; range description
"RTN","IBCNSGE",236,0)
 . S C1=IBRINS1 I C1=" " S C1="First"
"RTN","IBCNSGE",237,0)
 . S C2=IBRINS2 I C2="~~~~~" S C2="Last"
"RTN","IBCNSGE",238,0)
 . W "Companies [",C1,"] through [",C2,"]"
"RTN","IBCNSGE",239,0)
 . Q
"RTN","IBCNSGE",240,0)
 ;
"RTN","IBCNSGE",241,0)
 W ?45,"  Insurance Company EDI Parameter Report"
"RTN","IBCNSGE",242,0)
 S HDR="Page: "_PAGECNT,TAB=132-$L(HDR)-1
"RTN","IBCNSGE",243,0)
 W ?TAB,HDR
"RTN","IBCNSGE",244,0)
 ;
"RTN","IBCNSGE",245,0)
 W !,"Sorted By "
"RTN","IBCNSGE",246,0)
 I IBRSORT=1 W "Ins Company Name"
"RTN","IBCNSGE",247,0)
 I IBRSORT=2 W "Prof ID"
"RTN","IBCNSGE",248,0)
 I IBRSORT=3 W "Inst ID"
"RTN","IBCNSGE",249,0)
 I IBRSORT=4 W "Electronic Type"
"RTN","IBCNSGE",250,0)
 I IBRSORT=5 W "Type of Coverage"
"RTN","IBCNSGE",251,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,"1Z"),TAB=132-$L(HDR)-1
"RTN","IBCNSGE",252,0)
 W ?TAB,HDR
"RTN","IBCNSGE",253,0)
 ;
"RTN","IBCNSGE",254,0)
 W !,"Only Blank or 'PRNT' Bill ID's = ",$S(IBRBID:"YES",1:"NO")
"RTN","IBCNSGE",255,0)
 ;
"RTN","IBCNSGE",256,0)
 W !?69,"Electron",?79,"Inst",?89,"Prof",?99,"Electronic"
"RTN","IBCNSGE",257,0)
 W !,"Insurance Company Name",?29,"Street Address",?50,"City"
"RTN","IBCNSGE",258,0)
 W ?69,"Transmit",?80,"ID",?90,"ID",?102,"Type",?113,"Type of Coverage"
"RTN","IBCNSGE",259,0)
 W !,$$RJ^XLFSTR("",132,"=")
"RTN","IBCNSGE",260,0)
 ;
"RTN","IBCNSGE",261,0)
 ; check for a stop request
"RTN","IBCNSGE",262,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  G HEADX
"RTN","IBCNSGE",263,0)
 . S (ZTSTOP,STOP)=1
"RTN","IBCNSGE",264,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCNSGE",265,0)
 . Q
"RTN","IBCNSGE",266,0)
HEADX ;
"RTN","IBCNSGE",267,0)
 Q
"RTN","IBCNSGE",268,0)
 ;
"RTN","IBCNSGE",269,0)
DEVICE ; Device selection before compile
"RTN","IBCNSGE",270,0)
 NEW ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNSGE",271,0)
 W !!!,"This report is 132 columns wide.  Please choose an appropriate device.",!
"RTN","IBCNSGE",272,0)
 S ZTRTN="COMPILE^IBCNSGE"
"RTN","IBCNSGE",273,0)
 S ZTDESC="Insurance Company EDI Parameter Report"
"RTN","IBCNSGE",274,0)
 S ZTSAVE("IBRINS")=""
"RTN","IBCNSGE",275,0)
 S ZTSAVE("IBRBID")=""
"RTN","IBCNSGE",276,0)
 S ZTSAVE("IBRINS1")=""
"RTN","IBCNSGE",277,0)
 S ZTSAVE("IBRINS2")=""
"RTN","IBCNSGE",278,0)
 S ZTSAVE("IBRSORT")=""
"RTN","IBCNSGE",279,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM")
"RTN","IBCNSGE",280,0)
DEVX ;
"RTN","IBCNSGE",281,0)
 Q
"RTN","IBCNSGE",282,0)
 ;
"RTN","IBY296PR")
0^^B623194
"RTN","IBY296PR",1,0)
IBY296PR ;ALB/TMK - IB*2*296 PRE-INSTALL ;12-JAN-05
"RTN","IBY296PR",2,0)
 ;;2.0;INTEGRATED BILLING;**296**;21-MAR-94
"RTN","IBY296PR",3,0)
 ;
"RTN","IBY296PR",4,0)
 D BMES^XPDUTL("Pre-Installation Updates")
"RTN","IBY296PR",5,0)
 ;
"RTN","IBY296PR",6,0)
 D BMES^XPDUTL("Updating/removing output formatter records")
"RTN","IBY296PR",7,0)
 S DA=1015,DIE="^IBA(364.7,",DR=".03////5" D ^DIE
"RTN","IBY296PR",8,0)
 ;
"RTN","IBY296PR",9,0)
 D ENDST
"RTN","IBY296PR",10,0)
 ;
"RTN","IBY296PR",11,0)
 D END
"RTN","IBY296PR",12,0)
 Q
"RTN","IBY296PR",13,0)
 ;
"RTN","IBY296PR",14,0)
ENDST ;
"RTN","IBY296PR",15,0)
 D BMES^XPDUTL("Step complete")
"RTN","IBY296PR",16,0)
 Q
"RTN","IBY296PR",17,0)
 ;
"RTN","IBY296PR",18,0)
END ;
"RTN","IBY296PR",19,0)
 D BMES^XPDUTL("Pre-install complete")
"RTN","IBY296PR",20,0)
 Q
"RTN","IBY296PR",21,0)
 ;
"VER")
8.0^22.0
"^DD",361.4,361.4,0)
FIELD^^2^4
"^DD",361.4,361.4,0,"DDA")
N
"^DD",361.4,361.4,0,"DT")
3050127
"^DD",361.4,361.4,0,"IX","ALT",361.4,.02)

"^DD",361.4,361.4,0,"IX","ARD",361.42,.01)

"^DD",361.4,361.4,0,"IX","B",361.4,.01)

"^DD",361.4,361.4,0,"IX","C",361.41,.02)

"^DD",361.4,361.4,0,"NM","EDI TEST CLAIM STATUS MESSAGE")

"^DD",361.4,361.4,.01,0)
CLAIM^RP399'X^DGCR(399,^0;1^S DINUM=X Q
"^DD",361.4,361.4,.01,1,0)
^.1
"^DD",361.4,361.4,.01,1,1,0)
361.4^B
"^DD",361.4,361.4,.01,1,1,1)
S ^IBM(361.4,"B",$E(X,1,30),DA)=""
"^DD",361.4,361.4,.01,1,1,2)
K ^IBM(361.4,"B",$E(X,1,30),DA)
"^DD",361.4,361.4,.01,3)
Enter the bill # that was transmitted as test
"^DD",361.4,361.4,.01,"DT")
3050127
"^DD",361.4,361.4,.02,0)
LAST TRANSMIT DATE^D^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",361.4,361.4,.02,1,0)
^.1
"^DD",361.4,361.4,.02,1,1,0)
361.4^ALT
"^DD",361.4,361.4,.02,1,1,1)
S ^IBM(361.4,"ALT",$E(X,1,30),DA)=""
"^DD",361.4,361.4,.02,1,1,2)
K ^IBM(361.4,"ALT",$E(X,1,30),DA)
"^DD",361.4,361.4,.02,1,1,3)
Do not delete
"^DD",361.4,361.4,.02,1,1,"DT")
3050126
"^DD",361.4,361.4,.02,3)
Enter the latest date that this claim was transmitted as test.
"^DD",361.4,361.4,.02,5,1,0)
361.41^.01^2
"^DD",361.4,361.4,.02,21,0)
^^1^1^3050126^
"^DD",361.4,361.4,.02,21,1,0)
This is the latest date the claim was sent as a test claim.
"^DD",361.4,361.4,.02,"DT")
3050126
"^DD",361.4,361.4,1,0)
TRANSMIT DATE/TIME^361.41D^^1;0
"^DD",361.4,361.4,1,21,0)
^^2^2^3050126^
"^DD",361.4,361.4,1,21,1,0)
This multiple contains the date/time, batch and user information for the 
"^DD",361.4,361.4,1,21,2,0)
transmission of previously transmitted claims for test purposes.
"^DD",361.4,361.4,2,0)
MESSAGE^361.42D^^2;0
"^DD",361.4,361.4,2,21,0)
^^2^2^3050126^
"^DD",361.4,361.4,2,21,1,0)
This multiple contains the information about the status messages received
"^DD",361.4,361.4,2,21,2,0)
in the test queue for the test claim.
"^DD",361.4,361.41,0)
TRANSMIT DATE/TIME SUB-FIELD^^.04^4
"^DD",361.4,361.41,0,"DT")
3050127
"^DD",361.4,361.41,0,"IX","ALTD",361.41,.01)

"^DD",361.4,361.41,0,"IX","B",361.41,.01)

"^DD",361.4,361.41,0,"NM","TRANSMIT DATE/TIME")

"^DD",361.4,361.41,0,"UP")
361.4
"^DD",361.4,361.41,.01,0)
TRANSMIT DATE/TIME^MD^^0;1^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",361.4,361.41,.01,1,0)
^.1
"^DD",361.4,361.41,.01,1,1,0)
361.41^B
"^DD",361.4,361.41,.01,1,1,1)
S ^IBM(361.4,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",361.4,361.41,.01,1,1,2)
K ^IBM(361.4,DA(1),1,"B",$E(X,1,30),DA)
"^DD",361.4,361.41,.01,1,2,0)
^^TRIGGER^361.4^.02
"^DD",361.4,361.41,.01,1,2,1)
X ^DD(361.41,.01,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBM(361.4,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=DIV,X=$P(X,".",1) S DIH=$G(^IBM(361.4,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=361.4,DIG=.02 D ^DICR
"^DD",361.4,361.41,.01,1,2,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA S Y(0)=X S Y(1)=$S($D(^IBM(361.4,D0,0)):^(0),1:"") S X=Y(0),X=$P(X,".",1) S X=X>$P(Y(1),U,2)
"^DD",361.4,361.41,.01,1,2,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA S Y(1)=$S($D(^IBM(361.4,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$$LASTDT^IBCEPTU(.DA) X ^DD(361.41,.01,1,2,2.4)
"^DD",361.4,361.41,.01,1,2,2.4)
S DIH=$G(^IBM(361.4,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=361.4,DIG=.02 D ^DICR
"^DD",361.4,361.41,.01,1,2,"CREATE CONDITION")
DATE(TRANSMIT DATE)>LAST TRANSMIT DATE
"^DD",361.4,361.41,.01,1,2,"CREATE VALUE")
DATE(TRANSMIT DATE)
"^DD",361.4,361.41,.01,1,2,"DELETE VALUE")
S X=$$LASTDT^IBCEPTU(.DA)
"^DD",361.4,361.41,.01,1,2,"DIC")

"^DD",361.4,361.41,.01,1,2,"DT")
3050126
"^DD",361.4,361.41,.01,1,2,"FIELD")
LAST TRANSMIT DATE
"^DD",361.4,361.41,.01,1,3,0)
361.41^ALTD^MUMPS
"^DD",361.4,361.41,.01,1,3,1)
S ^IBM(361.4,DA(1),1,"ALTD",X\1,DA)=""
"^DD",361.4,361.41,.01,1,3,2)
K ^IBM(361.4,DA(1),1,"ALTD",X\1,DA)
"^DD",361.4,361.41,.01,1,3,3)
Do not delete
"^DD",361.4,361.41,.01,1,3,"%D",0)
^.101^2^2^3050128^^
"^DD",361.4,361.41,.01,1,3,"%D",1,0)
This xref is used to determine the last transmit date as it is date
"^DD",361.4,361.41,.01,1,3,"%D",2,0)
without time.
"^DD",361.4,361.41,.01,1,3,"DT")
3050128
"^DD",361.4,361.41,.01,3)
Enter the date and time the claim was transmitted as test.
"^DD",361.4,361.41,.01,21,0)
^.001^1^1^3050126^^
"^DD",361.4,361.41,.01,21,1,0)
This is the date and time the claim was transmitted as test.
"^DD",361.4,361.41,.01,"DT")
3050128
"^DD",361.4,361.41,.02,0)
BATCH #^*P364.1'^IBA(364.1,^0;2^S DIC("S")="I $P(^(0),U,14)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",361.4,361.41,.02,1,0)
^.1
"^DD",361.4,361.41,.02,1,1,0)
361.4^C
"^DD",361.4,361.41,.02,1,1,1)
S ^IBM(361.4,"C",$E(X,1,30),DA(1),DA)=""
"^DD",361.4,361.41,.02,1,1,2)
K ^IBM(361.4,"C",$E(X,1,30),DA(1),DA)
"^DD",361.4,361.41,.02,1,1,3)
Do not delete
"^DD",361.4,361.41,.02,1,1,"DT")
3050126
"^DD",361.4,361.41,.02,3)
Enter the batch # this claim was transmitted in.
"^DD",361.4,361.41,.02,12)
Must be flagged as a test batch
"^DD",361.4,361.41,.02,12.1)
S DIC("S")="I $P(^(0),U,14)"
"^DD",361.4,361.41,.02,21,0)
^^1^1^3050126^
"^DD",361.4,361.41,.02,21,1,0)
This is the batch # this claim was transmitted in.
"^DD",361.4,361.41,.02,"DT")
3050126
"^DD",361.4,361.41,.03,0)
TRANSMITTED BY^P200'^VA(200,^0;3^Q
"^DD",361.4,361.41,.03,3)
Enter the user who transmitted the claim as test.
"^DD",361.4,361.41,.03,21,0)
^^1^1^3050126^
"^DD",361.4,361.41,.03,21,1,0)
This is the user who transmitted the claim as test.
"^DD",361.4,361.41,.03,"DT")
3050126
"^DD",361.4,361.41,.04,0)
CURRENT PAYER SEQUENCE^NJ1,0^^0;4^K:+X'=X!(X>3)!(X<1)!(X?.E1"."1N.N) X
"^DD",361.4,361.41,.04,3)
Type a Number between 1 and 3, 0 Decimal Digits
"^DD",361.4,361.41,.04,21,0)
^.001^1^1^3050127^^
"^DD",361.4,361.41,.04,21,1,0)
This is the current payer sequence when this claim was resubmitted.
"^DD",361.4,361.41,.04,"DT")
3050127
"^DD",361.4,361.42,0)
MESSAGE SUB-FIELD^^.03^4
"^DD",361.4,361.42,0,"DT")
3050126
"^DD",361.4,361.42,0,"IX","AC",361.42,.03)

"^DD",361.4,361.42,0,"IX","B",361.42,.01)

"^DD",361.4,361.42,0,"NM","MESSAGE")

"^DD",361.4,361.42,0,"UP")
361.4
"^DD",361.4,361.42,.01,0)
MESSAGE RECEIVED DATE/TIME^MD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",361.4,361.42,.01,1,0)
^.1
"^DD",361.4,361.42,.01,1,1,0)
361.42^B
"^DD",361.4,361.42,.01,1,1,1)
S ^IBM(361.4,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",361.4,361.42,.01,1,1,2)
K ^IBM(361.4,DA(1),2,"B",$E(X,1,30),DA)
"^DD",361.4,361.42,.01,1,2,0)
361.4^ARD
"^DD",361.4,361.42,.01,1,2,1)
S ^IBM(361.4,"ARD",$E(X,1,30),DA(1),DA)=""
"^DD",361.4,361.42,.01,1,2,2)
K ^IBM(361.4,"ARD",$E(X,1,30),DA(1),DA)
"^DD",361.4,361.42,.01,1,2,3)
Do not delete
"^DD",361.4,361.42,.01,1,2,"DT")
3050126
"^DD",361.4,361.42,.01,3)
Enter the date/time the message was received.
"^DD",361.4,361.42,.01,21,0)
^^1^1^3050126^
"^DD",361.4,361.42,.01,21,1,0)
This is the date/time the message was received.
"^DD",361.4,361.42,.01,"DT")
3050126
"^DD",361.4,361.42,.02,0)
MESSAGE SEVERITY^S^R:REJECTION;I:INFORMATION/WARNING;^0;2^Q
"^DD",361.4,361.42,.02,3)
Enter the code that corresponds to the severity of the message.
"^DD",361.4,361.42,.02,21,0)
^^1^1^3050126^
"^DD",361.4,361.42,.02,21,1,0)
This is the code that corresponds to the severity of the message.
"^DD",361.4,361.42,.02,"DT")
3050126
"^DD",361.4,361.42,.03,0)
RETURN MESSAGE ID^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",361.4,361.42,.03,1,0)
^.1
"^DD",361.4,361.42,.03,1,1,0)
361.42^AC
"^DD",361.4,361.42,.03,1,1,1)
S ^IBM(361.4,DA(1),2,"AC",$E(X,1,30),DA)=""
"^DD",361.4,361.42,.03,1,1,2)
K ^IBM(361.4,DA(1),2,"AC",$E(X,1,30),DA)
"^DD",361.4,361.42,.03,1,1,3)
Do not delete
"^DD",361.4,361.42,.03,1,1,"DT")
3050127
"^DD",361.4,361.42,.03,3)
Answer must be 1-20 characters in length.
"^DD",361.4,361.42,.03,21,0)
^^1^1^3050126^
"^DD",361.4,361.42,.03,21,1,0)
This is the VistA mailman message # that the status message was received in.
"^DD",361.4,361.42,.03,"DT")
3050127
"^DD",361.4,361.42,1,0)
MESSAGE^361.421^^1;0
"^DD",361.4,361.42,1,21,0)
^^1^1^3050126^
"^DD",361.4,361.42,1,21,1,0)
This field contains the formatted version of the status message received.
"^DD",361.4,361.421,0)
MESSAGE SUB-FIELD^^.01^1
"^DD",361.4,361.421,0,"DT")
3050126
"^DD",361.4,361.421,0,"NM","MESSAGE")

"^DD",361.4,361.421,0,"UP")
361.42
"^DD",361.4,361.421,.01,0)
MESSAGE^WL^^0;1^Q
"^DD",361.4,361.421,.01,3)
Enter the status message.
"^DD",361.4,361.421,.01,21,0)
^.001^1^1^3050126^^
"^DD",361.4,361.421,.01,21,1,0)
This is the status message received.
"^DD",361.4,361.421,.01,"DT")
3050126
"^DD",364.2,364.2,.14,0)
CLAIM RESUBMITTED TEST^S^0:NO;1:YES;^0;14^Q
"^DD",364.2,364.2,.14,3)
Enter a 1 (YES) if the message was received for a test claim from a resubmission for test.
"^DD",364.2,364.2,.14,21,0)
^.001^4^4^3050321^^
"^DD",364.2,364.2,.14,21,1,0)
This is a flag that indicates if the status message is for a non-TEST
"^DD",364.2,364.2,.14,21,2,0)
claim, a test claim that was sent as TEST only or a live EDI claim that was
"^DD",364.2,364.2,.14,21,3,0)
resubmitted as a test claim.  The first 2 instances will always have a 0
"^DD",364.2,364.2,.14,21,4,0)
(NO) here, while the third instance will have a 1 (YES).
"^DD",364.2,364.2,.14,23,0)
^.001^4^4^3050321^^
"^DD",364.2,364.2,.14,23,1,0)
The way this flag is calcualted is to first look to see if the message
"^DD",364.2,364.2,.14,23,2,0)
was received from the test queue.  If it was not, this field is NO.  If
"^DD",364.2,364.2,.14,23,3,0)
it was, and the last entry for the claim in file 364 indicates it was a
"^DD",364.2,364.2,.14,23,4,0)
test claim, this flag is NO.  Otherwise, the flag is YES.
"^DD",364.2,364.2,.14,"DT")
3050127
"^DD",364.6,364.6,0)
FIELD^^.16^16
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3050504
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"IX","C",364.6,.1)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>30!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1
"^DD",364.6,364.6,.1,1,1,0)
364.6^C
"^DD",364.6,364.6,.1,1,1,1)
S ^IBA(364.6,"C",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.1,1,1,2)
K ^IBA(364.6,"C",$E(X,1,30),DA)
"^DD",364.6,364.6,.1,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.1,1,1,"%D",0)
^^1^1^2960123^
"^DD",364.6,364.6,.1,1,1,"%D",1,0)
Field name lookup
"^DD",364.6,364.6,.1,1,1,"DT")
2960123
"^DD",364.6,364.6,.1,3)
Answer must be 1-30 characters in length.
"^DD",364.6,364.6,.1,21,0)
^^2^2^2951207^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
2960123
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.6,364.6,.14,0)
PUNCTUATION FOR ALPHA NUMERIC^F^^0;14^K:$L(X)>33!($L(X)<1)!'(X?1"NONE"!(X?1"ALL")!$S($E(X,1,2)="--":$P(X,"--",2)'[" "&($P(X,"--",2)?.P),1:X?1P.P)) X
"^DD",364.6,364.6,.14,3)
Answer must be 1-33 characters in length.
"^DD",364.6,364.6,.14,5,1,0)
364.6^.15^1
"^DD",364.6,364.6,.14,21,0)
^.001^10^10^3050504^^^^
"^DD",364.6,364.6,.14,21,1,0)
This is the field where the punctuation that will be allowed in the
"^DD",364.6,364.6,.14,21,2,0)
data for this field is indicated.  A value of NONE means no punctuation is
"^DD",364.6,364.6,.14,21,3,0)
to be allowed.  A value of ALL or null means ALL punctuation is allowed.
"^DD",364.6,364.6,.14,21,4,0)
For only specific punctuation to be allowed, you should enter the actual
"^DD",364.6,364.6,.14,21,5,0)
characters here.  For example, to allow only comma and semicolon, the
"^DD",364.6,364.6,.14,21,6,0)
field will look like ,;
"^DD",364.6,364.6,.14,21,7,0)
To specify punctuation to exclude, the field must start with two dashes
"^DD",364.6,364.6,.14,21,8,0)
(--) and then be followed by the specific punctuation to be excluded.
"^DD",364.6,364.6,.14,21,9,0)
A space cannot be used with the -- syntax.
"^DD",364.6,364.6,.14,21,10,0)
For example, to allow all punctuation EXCEPT the comma, enter --,
"^DD",364.6,364.6,.14,23,0)
^^3^3^3050504^
"^DD",364.6,364.6,.14,23,1,0)
When defining this field, be aware it is only used if the
"^DD",364.6,364.6,.14,23,2,0)
data type for the field is 'AN' as any punctuation would be invalid
"^DD",364.6,364.6,.14,23,3,0)
or the '.' is expected in the data in the other types.
"^DD",364.6,364.6,.14,"DT")
3050504
"^DD",364.6,364.6,.15,0)
DATA TYPE^S^N:NUMBERS ONLY;A:LETTERS ONLY;D:DOLLAR VALUE;AN:NUMBERS, LETTERS, PUNCTUATION;Q:NUMBERS WITH DECIMALS;^0;15^Q
"^DD",364.6,364.6,.15,1,0)
^.1
"^DD",364.6,364.6,.15,1,1,0)
^^TRIGGER^364.6^.14
"^DD",364.6,364.6,.15,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="AN" I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X="" X ^DD(364.6,.15,1,1,1.4)
"^DD",364.6,364.6,.15,1,1,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,14)=DIV,DIH=364.6,DIG=.14 D ^DICR
"^DD",364.6,364.6,.15,1,1,2)
X ^DD(364.6,.15,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,14),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,14)=DIV,DIH=364.6,DIG=.14 D ^DICR
"^DD",364.6,364.6,.15,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(364.6,.15,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59)),X=X S X=X="AN"
"^DD",364.6,364.6,.15,1,1,"CREATE CONDITION")
INTERNAL(DATA TYPE)'="AN"
"^DD",364.6,364.6,.15,1,1,"CREATE VALUE")
@
"^DD",364.6,364.6,.15,1,1,"DELETE CONDITION")
INTERNAL(OLD DATA TYPE)="AN"
"^DD",364.6,364.6,.15,1,1,"DELETE VALUE")
@
"^DD",364.6,364.6,.15,1,1,"FIELD")
#.14
"^DD",364.6,364.6,.15,3)
Enter the code that corresponds to the type of data that is valid in the field.
"^DD",364.6,364.6,.15,21,0)
^.001^2^2^3050504^^^^
"^DD",364.6,364.6,.15,21,1,0)
This is the code that corresponds to the type of data that is valid in the
"^DD",364.6,364.6,.15,21,2,0)
field.
"^DD",364.6,364.6,.15,23,0)
^.001^15^15^3050504^^^
"^DD",364.6,364.6,.15,23,1,0)
VALID VALUES FOR EACH TYPE:
"^DD",364.6,364.6,.15,23,2,0)
 
"^DD",364.6,364.6,.15,23,3,0)
AN = any valid ASCII non-control character is valid. (letters/number/punct)
"^DD",364.6,364.6,.15,23,4,0)
N = only numbers allowed.
"^DD",364.6,364.6,.15,23,5,0)
A = only letters allowed.
"^DD",364.6,364.6,.15,23,6,0)
Q = any numbers and periods are allowed.
"^DD",364.6,364.6,.15,23,7,0)
D = dollar amounts only.  The output will be formatted to strip out the
"^DD",364.6,364.6,.15,23,8,0)
     decimal point, if it exists.  A valid dollar amount must not have
"^DD",364.6,364.6,.15,23,9,0)
     more than 2 numbers to the right of the decimal point.  If no decimal
"^DD",364.6,364.6,.15,23,10,0)
     point is found in the data, the data is padded to the right with 2
"^DD",364.6,364.6,.15,23,11,0)
     zeroes.  If the data contains only 1 number to the right of the
"^DD",364.6,364.6,.15,23,12,0)
     decimal point, a single zero is appended to the right of the data so
"^DD",364.6,364.6,.15,23,13,0)
     there is always 2 numbers representing the decimal portion.
"^DD",364.6,364.6,.15,23,14,0)
 
"^DD",364.6,364.6,.15,23,15,0)
NO DECIMAL POINT IS OUTPUT WITH A DOLLAR AMOUNT DATA TYPE
"^DD",364.6,364.6,.15,"DT")
3050504
"^DD",364.6,364.6,.16,0)
INVALID PUNCTUATION ACTION^SX^S:STRIP PUNCTUATION;E:PRODUCE AN ERROR;R:REPLACE WITH SPACE;^0;16^I $P($G(^IBA(364.6,DA,0)),U,15)'="AN",X="R" K X
"^DD",364.6,364.6,.16,3)
Enter S to strip out any invalid punctuation, R to replace with space or E to cause a runtime error if invalid punctuation.
"^DD",364.6,364.6,.16,21,0)
^.001^7^7^3050504^^^^
"^DD",364.6,364.6,.16,21,1,0)
This code indicates what the system should do if it finds invalid
"^DD",364.6,364.6,.16,21,2,0)
punctuation.  Replace is only valid for AN (Alpha/Numeric) data types.
"^DD",364.6,364.6,.16,21,3,0)
  Options for the data type of AN are Strip the punctuation, Replace the
"^DD",364.6,364.6,.16,21,4,0)
  punctuation with space, or produce an Error.
"^DD",364.6,364.6,.16,21,5,0)
  For all other data types, only Strip and Error are valid.
"^DD",364.6,364.6,.16,21,6,0)
If there is no data in this field, but there IS data in the PUNCTUATION
"^DD",364.6,364.6,.16,21,7,0)
FOR ALPHA NUMERIC, this field defaults to 'E'.
"^DD",364.6,364.6,.16,"DT")
3050504
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DIC",361.4,361.4,0)
EDI TEST CLAIM STATUS MESSAGE^361.4
"^DIC",361.4,361.4,0,"GL")
^IBM(361.4,
"^DIC",361.4,361.4,"%",0)
^1.005^^
"^DIC",361.4,361.4,"%D",0)
^^3^3^3050127^^
"^DIC",361.4,361.4,"%D",1,0)
This file contains the transmission history and return messages that were
"^DIC",361.4,361.4,"%D",2,0)
received via the test queue for claims that were sent initially as EDI
"^DIC",361.4,361.4,"%D",3,0)
claims and have been retransmitted as test claims.
"^DIC",361.4,"B","EDI TEST CLAIM STATUS MESSAGE",361.4)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",5217,6)
^SEQ #280
**END**
**END**
