Released XWB*1.1*43 SEQ #36
Extracted from mail message
**KIDS**:XWB*1.1*43^

**INSTALL NAME**
XWB*1.1*43
"BLD",532,0)
XWB*1.1*43^RPC BROKER^0^3060222^y
"BLD",532,1,0)
^^2^2^3050523^
"BLD",532,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"BLD",532,1,2,0)
XWB*1.1*43  New broker long timeout fix.
"BLD",532,4,0)
^9.64PA^^
"BLD",532,"KRN",0)
^9.67PA^8989.52^19
"BLD",532,"KRN",.4,0)
.4
"BLD",532,"KRN",.401,0)
.401
"BLD",532,"KRN",.402,0)
.402
"BLD",532,"KRN",.403,0)
.403
"BLD",532,"KRN",.5,0)
.5
"BLD",532,"KRN",.84,0)
.84
"BLD",532,"KRN",3.6,0)
3.6
"BLD",532,"KRN",3.8,0)
3.8
"BLD",532,"KRN",9.2,0)
9.2
"BLD",532,"KRN",9.8,0)
9.8
"BLD",532,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",532,"KRN",9.8,"NM",1,0)
XWBTCPM^^0^B54122124
"BLD",532,"KRN",9.8,"NM",2,0)
XWBTCPMT^^0^B8829013
"BLD",532,"KRN",9.8,"NM",3,0)
XWBPRS^^0^B39040367
"BLD",532,"KRN",9.8,"NM","B","XWBPRS",3)
 
"BLD",532,"KRN",9.8,"NM","B","XWBTCPM",1)
 
"BLD",532,"KRN",9.8,"NM","B","XWBTCPMT",2)
 
"BLD",532,"KRN",19,0)
19
"BLD",532,"KRN",19.1,0)
19.1
"BLD",532,"KRN",101,0)
101
"BLD",532,"KRN",409.61,0)
409.61
"BLD",532,"KRN",771,0)
771
"BLD",532,"KRN",870,0)
870
"BLD",532,"KRN",8989.51,0)
8989.51
"BLD",532,"KRN",8989.52,0)
8989.52
"BLD",532,"KRN",8994,0)
8994
"BLD",532,"KRN","B",.4,.4)
 
"BLD",532,"KRN","B",.401,.401)
 
"BLD",532,"KRN","B",.402,.402)
 
"BLD",532,"KRN","B",.403,.403)
 
"BLD",532,"KRN","B",.5,.5)
 
"BLD",532,"KRN","B",.84,.84)
 
"BLD",532,"KRN","B",3.6,3.6)
 
"BLD",532,"KRN","B",3.8,3.8)
 
"BLD",532,"KRN","B",9.2,9.2)
 
"BLD",532,"KRN","B",9.8,9.8)
 
"BLD",532,"KRN","B",19,19)
 
"BLD",532,"KRN","B",19.1,19.1)
 
"BLD",532,"KRN","B",101,101)
 
"BLD",532,"KRN","B",409.61,409.61)
 
"BLD",532,"KRN","B",771,771)
 
"BLD",532,"KRN","B",870,870)
 
"BLD",532,"KRN","B",8989.51,8989.51)
 
"BLD",532,"KRN","B",8989.52,8989.52)
 
"BLD",532,"KRN","B",8994,8994)
 
"BLD",532,"QUES",0)
^9.62^^
"MBREQ")
0
"PKG",7,-1)
1^1
"PKG",7,0)
RPC BROKER^XWB^Remote Procedure Call Broker
"PKG",7,20,0)
^9.402P^^
"PKG",7,22,0)
^9.49I^1^1
"PKG",7,22,1,0)
1.1^2970918^2990407^126
"PKG",7,22,1,"PAH",1,0)
43^3060222
"PKG",7,22,1,"PAH",1,1,0)
^^2^2^3060222
"PKG",7,22,1,"PAH",1,1,1,0)
Please refer to the Description in the FORUM Patch Module for details.
"PKG",7,22,1,"PAH",1,1,2,0)
XWB*1.1*43  New broker long timeout fix.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")
 
"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","XWBPRS")
0^3^B39040367^B38481438
"RTN","XWBPRS",1,0)
XWBPRS ;ISF/STAFF - VISTA BROKER MSG PARSER ;12/08/2004  13:52
"RTN","XWBPRS",2,0)
 ;;1.1;RPC BROKER;**35,43**;Mar 28, 1997
"RTN","XWBPRS",3,0)
 ;XWB holds info from the message used by the RPC
"RTN","XWBPRS",4,0)
CALLP(XWBP,XWBDEBUG) ;make API call using Protocol string
"RTN","XWBPRS",5,0)
 N ERR,S,XWBARY K XWB
"RTN","XWBPRS",6,0)
 S ERR=0
"RTN","XWBPRS",7,0)
 S ERR=$$PRSP("[XWB]") ;Read the rest of the protocol header
"RTN","XWBPRS",8,0)
 I '+ERR S ERR=$$PRSM ;Read and parse message
"RTN","XWBPRS",9,0)
 I $G(XWB(2,"RPC"))="XUS SET SHARED" S XWBSHARE=1 Q
"RTN","XWBPRS",10,0)
 I '+ERR S ERR=$$RPC ;Check the RPC
"RTN","XWBPRS",11,0)
 I +ERR S XWBSEC=$P(ERR,U,2) ;P10 -- dpc
"RTN","XWBPRS",12,0)
 I '+ERR D CHKPRMIT^XWBSEC($G(XWB(2,"RPC"))) ;checks if RPC allowed to run
"RTN","XWBPRS",13,0)
 S:$L($G(XWBSEC)) ERR="-1^"_XWBSEC
"RTN","XWBPRS",14,0)
 I '+ERR D
"RTN","XWBPRS",15,0)
 . D CAPI(.XWBP,XWB("PARAM"))
"RTN","XWBPRS",16,0)
 E  I ($G(XWBTCMD)'="#BYE#") D LOG^XWBTCPM("Bad Msg"_ERR),CLRBUF
"RTN","XWBPRS",17,0)
 I 'XWBDEBUG K XWB
"RTN","XWBPRS",18,0)
 I $D(XWBARY) K @XWBARY,XWBARY
"RTN","XWBPRS",19,0)
 Q
"RTN","XWBPRS",20,0)
 ;
"RTN","XWBPRS",21,0)
PRSP(P) ;ef, Parse Protocol
"RTN","XWBPRS",22,0)
 ;M Extrinsic Function
"RTN","XWBPRS",23,0)
 ;Outputs
"RTN","XWBPRS",24,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",25,0)
 ;
"RTN","XWBPRS",26,0)
 N ERR,C,M,R,X
"RTN","XWBPRS",27,0)
 S R=0,C=";",ERR=0
"RTN","XWBPRS",28,0)
 S P=$$BREAD^XWBRW(4)
"RTN","XWBPRS",29,0)
 IF $L(P)'=4 S ERR="-1^Short Header info"
"RTN","XWBPRS",30,0)
 IF +ERR=0 D
"RTN","XWBPRS",31,0)
 . S XWB(R,"VER")=+$E(P,1)
"RTN","XWBPRS",32,0)
 . S XWB(R,"TYPE")=+$E(P,2)
"RTN","XWBPRS",33,0)
 . S (XWBENVL,XWB(R,"LENV"))=+$E(P,3)
"RTN","XWBPRS",34,0)
 . S (XWBPRT,XWB(R,"RT"))=+$E(P,4)
"RTN","XWBPRS",35,0)
 I XWBENVL<1 S (XWBENVL,XWB(R,"LENV"))=3
"RTN","XWBPRS",36,0)
 Q ERR
"RTN","XWBPRS",37,0)
 ;
"RTN","XWBPRS",38,0)
PRSM() ;ef, Parse message
"RTN","XWBPRS",39,0)
 ;M Extrinsic Function
"RTN","XWBPRS",40,0)
 ;See document on msg format
"RTN","XWBPRS",41,0)
 ;Outputs
"RTN","XWBPRS",42,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",43,0)
 N C,EX1,ERR,R,X,CNK
"RTN","XWBPRS",44,0)
 S R=1,C=";",CNK=0,EX1=0 ;Max buffer
"RTN","XWBPRS",45,0)
 S ERR="-1^Invalid Chunk"
"RTN","XWBPRS",46,0)
 F  S CNK=$$BREAD^XWBRW(1) Q:("12345"'[CNK)  D  Q:EX1
"RTN","XWBPRS",47,0)
 . S EX1=(CNK=5),@("ERR=$$PRS"_CNK)
"RTN","XWBPRS",48,0)
 Q ERR
"RTN","XWBPRS",49,0)
 ;
"RTN","XWBPRS",50,0)
PRS1() ;Parse the HEADER chunk
"RTN","XWBPRS",51,0)
 N %,L,R
"RTN","XWBPRS",52,0)
 S R=1
"RTN","XWBPRS",53,0)
 S XWB(R,"VER")=$$SREAD
"RTN","XWBPRS",54,0)
 S XWB(R,"RETURN")=$$SREAD
"RTN","XWBPRS",55,0)
 Q 0
"RTN","XWBPRS",56,0)
 ;
"RTN","XWBPRS",57,0)
PRS2() ;Parse the RPC chunk
"RTN","XWBPRS",58,0)
 N L,R
"RTN","XWBPRS",59,0)
 S R=2
"RTN","XWBPRS",60,0)
 S (XWBAPVER,XWB(R,"VER"))=$$SREAD ;RPC version
"RTN","XWBPRS",61,0)
 S XWB(R,"RPC")=$$SREAD
"RTN","XWBPRS",62,0)
 I $G(XWBDEBUG)>1 D LOG^XWBTCPM("RPC: "_XWB(R,"RPC"))
"RTN","XWBPRS",63,0)
 Q 0
"RTN","XWBPRS",64,0)
PRS3() ;Parse the Security chunk
"RTN","XWBPRS",65,0)
 N L,R
"RTN","XWBPRS",66,0)
 S R=3
"RTN","XWBPRS",67,0)
 Q 0
"RTN","XWBPRS",68,0)
PRS4() ;Parse the Command chunk
"RTN","XWBPRS",69,0)
 N R
"RTN","XWBPRS",70,0)
 S R=4,XWBTCMD=$$SREAD,XWB(R,"CMD")=XWBTCMD
"RTN","XWBPRS",71,0)
 I $G(XWBDEBUG)>1 D LOG^XWBTCPM("CMD: "_XWBTCMD)
"RTN","XWBPRS",72,0)
 Q ("TCPConnect^#BYE#"[XWBTCMD)
"RTN","XWBPRS",73,0)
 ;
"RTN","XWBPRS",74,0)
PRS5() ;Parse Data Parameter chunk
"RTN","XWBPRS",75,0)
 ;M Extrinsic Function
"RTN","XWBPRS",76,0)
 ;Outputs
"RTN","XWBPRS",77,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",78,0)
 ;
"RTN","XWBPRS",79,0)
 N CONT,DONE,ERR,F,FL,IX,K,L,P1,P2,P3,P4,P5,MAXP,R,TY,VA
"RTN","XWBPRS",80,0)
 S R=5,ERR=0,F=3,IX=0,DONE=0,CONT="f",XWB("PARAM")=""
"RTN","XWBPRS",81,0)
 F  S:CONT="f" TY=$$BREAD^XWBRW(1) D  Q:DONE  S CONT=$$BREAD^XWBRW(1) S:CONT'="t" IX=IX+1
"RTN","XWBPRS",82,0)
 . K VA,P1
"RTN","XWBPRS",83,0)
 . IF TY=$C(4) S DONE=1 Q  ;EOT
"RTN","XWBPRS",84,0)
 . IF TY=0 D  Q  ;literal
"RTN","XWBPRS",85,0)
 . . D LREAD("VA")
"RTN","XWBPRS",86,0)
 . . S XWB(R,"P",IX)=VA(1) D PARAM($NA(XWB(R,"P",IX)))
"RTN","XWBPRS",87,0)
 . . Q
"RTN","XWBPRS",88,0)
 . IF TY=1 D  Q  ;reference
"RTN","XWBPRS",89,0)
 . . D LREAD("VA")
"RTN","XWBPRS",90,0)
 . . S XWB(R,"P",IX)=$$GETV(VA(1)) D PARAM($NA(XWB(R,"P",IX)))
"RTN","XWBPRS",91,0)
 . . Q
"RTN","XWBPRS",92,0)
 . IF TY=2 D  Q  ;list
"RTN","XWBPRS",93,0)
 . . I CONT'="t" D
"RTN","XWBPRS",94,0)
 . . . S XWBARY=$$OARY,XWB(R,"P",IX)="."_XWBARY
"RTN","XWBPRS",95,0)
 . . . D PARAM(XWB(R,"P",IX))
"RTN","XWBPRS",96,0)
 . . D LREAD("P1") Q:P1(1)=""  D LREAD("VA")
"RTN","XWBPRS",97,0)
 . . D LINST(XWBARY,P1(1),VA(1))
"RTN","XWBPRS",98,0)
 . . Q
"RTN","XWBPRS",99,0)
 . IF TY=3 D  Q  ;global
"RTN","XWBPRS",100,0)
 . . I CONT'="t" D
"RTN","XWBPRS",101,0)
 . . . S XWBARY=$NA(^TMP("XWBA",$J,IX)),XWB(R,"P",IX)=XWBARY
"RTN","XWBPRS",102,0)
 . . . K @XWBARY S @XWBARY=""
"RTN","XWBPRS",103,0)
 . . . D PARAM(XWBARY)
"RTN","XWBPRS",104,0)
 . . D LREAD("P1") Q:P1(1)=""  D LREAD("VA")
"RTN","XWBPRS",105,0)
 . . D GINST(XWBARY,P1(1),VA(1))
"RTN","XWBPRS",106,0)
 . . Q
"RTN","XWBPRS",107,0)
 . IF TY=4 D  Q  ;empty - ,,
"RTN","XWBPRS",108,0)
 . . S XWB(R,"XWB",IX)=""
"RTN","XWBPRS",109,0)
 . . Q
"RTN","XWBPRS",110,0)
 . IF TY=5 D  Q
"RTN","XWBPRS",111,0)
 . . ;stream still to be done
"RTN","XWBPRS",112,0)
 . Q  ;End of loop
"RTN","XWBPRS",113,0)
 Q ERR
"RTN","XWBPRS",114,0)
PARAM(NA) ;Add a new parameter to the list
"RTN","XWBPRS",115,0)
 N A
"RTN","XWBPRS",116,0)
 S A=$G(XWB("PARAM")) S:'$L(NA) NA="""""" ;Empty
"RTN","XWBPRS",117,0)
 S A=A_$S($L(A):",",1:"")_$S(TY=3:"$NA(",1:"")_NA_$S(TY=3:")",1:"")
"RTN","XWBPRS",118,0)
 S XWB("PARAM")=A
"RTN","XWBPRS",119,0)
 Q
"RTN","XWBPRS",120,0)
 ;
"RTN","XWBPRS",121,0)
RPC() ;Check the rpc information.
"RTN","XWBPRS",122,0)
 ;M Extrinsic Function
"RTN","XWBPRS",123,0)
 ;Outputs
"RTN","XWBPRS",124,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",125,0)
 ;
"RTN","XWBPRS",126,0)
 N C,DR,ERR,M,R,RPC,T,X
"RTN","XWBPRS",127,0)
 S R=2,C=";",ERR=0,M=512 ;Max buffer
"RTN","XWBPRS",128,0)
 S RPC=$G(XWB(R,"RPC")) I '$L(RPC) Q "-1^No RPC sent"
"RTN","XWBPRS",129,0)
 S T=$O(^XWB(8994,"B",RPC,0))
"RTN","XWBPRS",130,0)
 I '+T Q "-1^Remote Procedure '"_RPC_"' doesn't exist on the server."
"RTN","XWBPRS",131,0)
 S T(0)=$G(^XWB(8994,T,0))
"RTN","XWBPRS",132,0)
 I $P(T(0),U,6)=1!($P(T(0),U,6)=2) Q "-1^Remote Procedure '"_RPC_"' cannot be run at this time."  ;P10. Check INACTIVE field. - dpc.
"RTN","XWBPRS",133,0)
 S XWB(R,"RTAG")=$P(T(0),"^",2)
"RTN","XWBPRS",134,0)
 S XWB(R,"RNAM")=$P(T(0),"^",3)
"RTN","XWBPRS",135,0)
 S XWBPTYPE=$P(T(0),"^",4)
"RTN","XWBPRS",136,0)
 S XWBWRAP=+$P(T(0),"^",8)
"RTN","XWBPRS",137,0)
 Q ERR
"RTN","XWBPRS",138,0)
 ;
"RTN","XWBPRS",139,0)
SREAD() ;Read a S_PACK
"RTN","XWBPRS",140,0)
 N L,V7
"RTN","XWBPRS",141,0)
 S L=$$BREAD^XWBRW(1),L=$A(L)
"RTN","XWBPRS",142,0)
 S V7=$$BREAD^XWBRW(L)
"RTN","XWBPRS",143,0)
 Q V7
"RTN","XWBPRS",144,0)
LREAD(ROOT) ;Read a L_PACK
"RTN","XWBPRS",145,0)
 N L,TL,V7,I,MAX
"RTN","XWBPRS",146,0)
 S I=1,MAX=256,@ROOT@(I)=""
"RTN","XWBPRS",147,0)
 S L=$$BREAD^XWBRW(XWBENVL),(TL,L)=+L
"RTN","XWBPRS",148,0)
 I L>MAX F  S V7=$$BREAD^XWBRW(MAX),L=L-$L(V7),@ROOT@(I)=V7,I=I+1 Q:(L'>MAX)
"RTN","XWBPRS",149,0)
 I L>0 S V7=$$BREAD^XWBRW(L),@ROOT@(I)=V7,I=I+1
"RTN","XWBPRS",150,0)
 Q
"RTN","XWBPRS",151,0)
 ;
"RTN","XWBPRS",152,0)
 ;X can be something like '"TEXT",1,0'.
"RTN","XWBPRS",153,0)
LINST(A,X,XWBY) ;instantiate local array
"RTN","XWBPRS",154,0)
 IF XWBY=$C(1) S XWBY=""
"RTN","XWBPRS",155,0)
 S X=A_"("_X_")"
"RTN","XWBPRS",156,0)
 S @X=XWBY
"RTN","XWBPRS",157,0)
 Q
"RTN","XWBPRS",158,0)
 ;
"RTN","XWBPRS",159,0)
 ;S can be something like '"TEXT",1,0'.
"RTN","XWBPRS",160,0)
GINST(R,S,V) ;instantiate global
"RTN","XWBPRS",161,0)
 N N
"RTN","XWBPRS",162,0)
 I V=$C(1) S V=""
"RTN","XWBPRS",163,0)
 S N=$P(R,")")_","_S_")"
"RTN","XWBPRS",164,0)
 S @N=V
"RTN","XWBPRS",165,0)
 Q
"RTN","XWBPRS",166,0)
 ;
"RTN","XWBPRS",167,0)
GETV(V) ;get value of V - reference parameter
"RTN","XWBPRS",168,0)
 N X
"RTN","XWBPRS",169,0)
 S X=V
"RTN","XWBPRS",170,0)
 IF $E(X,1,2)="$$" Q ""
"RTN","XWBPRS",171,0)
 IF $C(34,36)[$E(V) X "S V="_$$VCHK(V)
"RTN","XWBPRS",172,0)
 E  S V=@V
"RTN","XWBPRS",173,0)
 Q V
"RTN","XWBPRS",174,0)
 ;
"RTN","XWBPRS",175,0)
VCHK(S) ;Parse string for first argument
"RTN","XWBPRS",176,0)
 N C,I,P
"RTN","XWBPRS",177,0)
 F I=1:1 S C=$E(S,I) D VCHKP:C="(",VCHKQ:C=$C(34) Q:" ,"[C
"RTN","XWBPRS",178,0)
 Q $E(S,1,I-1)
"RTN","XWBPRS",179,0)
VCHKP S P=1 ;Find closing paren
"RTN","XWBPRS",180,0)
 F I=I+1:1 S C=$E(S,I) Q:P=0!(C="")  I "()"""[C D VCHKQ:C=$C(34) S P=P+$S("("[C:1,")"[C:-1,1:0)
"RTN","XWBPRS",181,0)
 Q
"RTN","XWBPRS",182,0)
VCHKQ ;Find closing quote
"RTN","XWBPRS",183,0)
 F I=I+1:1 S C=$E(S,I) Q:C=""!(C=$C(34))
"RTN","XWBPRS",184,0)
 Q
"RTN","XWBPRS",185,0)
CLRBUF ;Empties Input buffer
"RTN","XWBPRS",186,0)
 N %
"RTN","XWBPRS",187,0)
 F  R *%:2 Q:'$T!(%=4)  ;!(%=-1)
"RTN","XWBPRS",188,0)
 Q
"RTN","XWBPRS",189,0)
ZZZ(X) ;Convert
"RTN","XWBPRS",190,0)
 N I
"RTN","XWBPRS",191,0)
 F  S I=$F(X,"$C(") Q:'I  S J=$F(X,")",I),X=$E(X,1,I-4)_$C($E(X,I,J-2))_$E(X,J,999)
"RTN","XWBPRS",192,0)
 Q X
"RTN","XWBPRS",193,0)
 ;
"RTN","XWBPRS",194,0)
CAPI(XWBY,PAR) ;make API call
"RTN","XWBPRS",195,0)
 N XWBCALL,T,DX,DY
"RTN","XWBPRS",196,0)
 S XWBCALL=XWB(2,"RTAG")_"^"_XWB(2,"RNAM")_"(.XWBY"_$S($L(PAR):","_PAR,1:"")_")",XWBCALL2=""
"RTN","XWBPRS",197,0)
 K PAR
"RTN","XWBPRS",198,0)
 O XWBNULL U XWBNULL ;Make sure its open
"RTN","XWBPRS",199,0)
 ;
"RTN","XWBPRS",200,0)
 I $G(XWBDEBUG)>2 D LOG^XWBDLOG("Call: "_$E(XWBCALL,1,247))
"RTN","XWBPRS",201,0)
 ;start RUM for RPC
"RTN","XWBPRS",202,0)
 I $G(XWB(2,"CAPI"))]"" D LOGRSRC^%ZOSV(XWB(2,"CAPI"),2,1)
"RTN","XWBPRS",203,0)
 ;
"RTN","XWBPRS",204,0)
 D @XWBCALL S XWBCALL2=XWBCALL ;Save call for debug
"RTN","XWBPRS",205,0)
 ;
"RTN","XWBPRS",206,0)
 ;restart RUM for handler
"RTN","XWBPRS",207,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)
"RTN","XWBPRS",208,0)
 ;
"RTN","XWBPRS",209,0)
 U XWBTDEV
"RTN","XWBPRS",210,0)
 Q
"RTN","XWBPRS",211,0)
 ;
"RTN","XWBPRS",212,0)
OARY() ;create storage array
"RTN","XWBPRS",213,0)
 N A,DONE,I
"RTN","XWBPRS",214,0)
 S I=1+$G(XWB("ARRAY")),XWB("ARRAY")=I
"RTN","XWBPRS",215,0)
 S A="XWBS"_I
"RTN","XWBPRS",216,0)
 K @A ;temp fix for single array
"RTN","XWBPRS",217,0)
 S @A="" ;set naked
"RTN","XWBPRS",218,0)
 Q A
"RTN","XWBPRS",219,0)
 ;
"RTN","XWBPRS",220,0)
CREF(R,P) ;Convert array contained in P to reference A
"RTN","XWBPRS",221,0)
 N I,X,DONE,F1,S
"RTN","XWBPRS",222,0)
 S DONE=0
"RTN","XWBPRS",223,0)
 S S=""
"RTN","XWBPRS",224,0)
 F I=1:1  D  Q:DONE
"RTN","XWBPRS",225,0)
 . IF $P(P,",",I)="" S DONE=1 Q
"RTN","XWBPRS",226,0)
 . S X(I)=$P(P,",",I)
"RTN","XWBPRS",227,0)
 . IF X(I)?1"."1A.E D
"RTN","XWBPRS",228,0)
 . . S F1=$F(X(I),".")
"RTN","XWBPRS",229,0)
 . . S X(I)="."_R
"RTN","XWBPRS",230,0)
 . S S=S_X(I)_","
"RTN","XWBPRS",231,0)
 Q $E(S,1,$L(S)-1)
"RTN","XWBPRS",232,0)
 ;
"RTN","XWBTCPM")
0^1^B54122124^B53101617
"RTN","XWBTCPM",1,0)
XWBTCPM ;ISF/RWF - BROKER TCP/IP PROCESS HANDLER ;01/04/2006  62562.56228
"RTN","XWBTCPM",2,0)
 ;;1.1;RPC BROKER;**35,43**;Mar 28, 1997
"RTN","XWBTCPM",3,0)
 ;Based on: XWBTCPC & XWBTCPL, Modified by ISF/RWF
"RTN","XWBTCPM",4,0)
 ;Changed to be started by UCX or %ZISTCPS
"RTN","XWBTCPM",5,0)
 ;
"RTN","XWBTCPM",6,0)
DSM ;DSM called from ucx, % passed in with device.
"RTN","XWBTCPM",7,0)
 D ESET
"RTN","XWBTCPM",8,0)
 ;Open the device
"RTN","XWBTCPM",9,0)
 S XWBTDEV=% X "O XWBTDEV:(TCPDEV):60" ;Special UCX/DSM open
"RTN","XWBTCPM",10,0)
 ;Go find the connection type
"RTN","XWBTCPM",11,0)
 U XWBTDEV
"RTN","XWBTCPM",12,0)
 G CONNTYPE
"RTN","XWBTCPM",13,0)
 ;
"RTN","XWBTCPM",14,0)
CACHEVMS ;Cache'/VMS tcpip entry point, called from XWBTCP_START.COM file
"RTN","XWBTCPM",15,0)
 D ESET
"RTN","XWBTCPM",16,0)
 S XWBTDEV="SYS$NET"
"RTN","XWBTCPM",17,0)
 ; **Cache'/VMS specific code**
"RTN","XWBTCPM",18,0)
 O XWBTDEV::5
"RTN","XWBTCPM",19,0)
 X "U XWBTDEV:(::""-M"")" ;Packet mode like DSM
"RTN","XWBTCPM",20,0)
 G CONNTYPE
"RTN","XWBTCPM",21,0)
 ;
"RTN","XWBTCPM",22,0)
NT ;entry from ZISTCPS
"RTN","XWBTCPM",23,0)
 ;JOB LISTEN^%ZISTCPS("port","NT^XWBTCPM","stop code")
"RTN","XWBTCPM",24,0)
 D ESET
"RTN","XWBTCPM",25,0)
 S XWBTDEV=IO
"RTN","XWBTCPM",26,0)
 G CONNTYPE
"RTN","XWBTCPM",27,0)
 ;
"RTN","XWBTCPM",28,0)
GTMUCX(%) ;From ucx ZFOO
"RTN","XWBTCPM",29,0)
 ;If called from LISTEN^%ZISTCP(PORT,"GTM^XWBTCPM") S XWBTDEV=IO
"RTN","XWBTCPM",30,0)
 D ESET
"RTN","XWBTCPM",31,0)
 ;GTM specific code
"RTN","XWBTCPM",32,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",33,0)
 S XWBTDEV=% X "O %:(RECORDSIZE=512)"
"RTN","XWBTCPM",34,0)
 G CONNTYPE
"RTN","XWBTCPM",35,0)
 ;
"RTN","XWBTCPM",36,0)
GTMLNX ;From Linux xinetd script
"RTN","XWBTCPM",37,0)
 D ESET
"RTN","XWBTCPM",38,0)
 ;GTM specific code
"RTN","XWBTCPM",39,0)
 S @("$ZINTERRUPT=""I $$JOBEXAM^ZU($ZPOSITION)""")
"RTN","XWBTCPM",40,0)
 S XWBTDEV=$P X "U XWBTDEV:(nowrap:nodelimiter)"
"RTN","XWBTCPM",41,0)
 S %="",@("%=$ZTRNLNM(""REMOTE_HOST"")") S:$L(%) IO("GTM-IP")=%
"RTN","XWBTCPM",42,0)
 G CONNTYPE
"RTN","XWBTCPM",43,0)
 ;
"RTN","XWBTCPM",44,0)
ESET ;Set inital error trap
"RTN","XWBTCPM",45,0)
 S U="^",$ETRAP="D ^%ZTER H" ;Set up the error trap
"RTN","XWBTCPM",46,0)
 Q
"RTN","XWBTCPM",47,0)
 ;Find the type of connection and jump to the processing routine.
"RTN","XWBTCPM",48,0)
CONNTYPE ;
"RTN","XWBTCPM",49,0)
 N XWBDEBUG,XWBAPVER,XWBCLMAN,XWBENVL,XWBLOG,XWBOS,XWBPTYPE
"RTN","XWBTCPM",50,0)
 N XWBTBUF,XWBTIP,XWBTSKT,XWBVER,XWBWRAP,XWBSHARE,XWBT
"RTN","XWBTCPM",51,0)
 N SOCK,TYPE
"RTN","XWBTCPM",52,0)
 D INIT
"RTN","XWBTCPM",53,0)
 S XWB=$$BREAD^XWBRW(5,XWBTIME)
"RTN","XWBTCPM",54,0)
 D LOG("MSG format is "_XWB_" type "_$S(XWB="[XWB]":"NEW",XWB="{XWB}":"OLD",XWB="<?xml":"M2M",1:"Unk"))
"RTN","XWBTCPM",55,0)
 I XWB["[XWB]" G NEW
"RTN","XWBTCPM",56,0)
 I XWB["{XWB}" G OLD^XWBTCPM1
"RTN","XWBTCPM",57,0)
 I XWB["<?xml" G M2M
"RTN","XWBTCPM",58,0)
 I $L($T(OTH^XWBTCPM2)) D OTH^XWBTCPM2 ;See if a special code.
"RTN","XWBTCPM",59,0)
 D LOG("Prefix not known: "_XWB)
"RTN","XWBTCPM",60,0)
 Q
"RTN","XWBTCPM",61,0)
 ;
"RTN","XWBTCPM",62,0)
NEWJOB() ;Check if OK to start a new job, Return 1 if OK, 0 if not OK.
"RTN","XWBTCPM",63,0)
 N X,Y,J,XWBVOL
"RTN","XWBTCPM",64,0)
 D GETENV^%ZOSV S XWBVOL=$P(Y,"^",2)
"RTN","XWBTCPM",65,0)
 S X=$O(^XTV(8989.3,1,4,"B",XWBVOL,0)),J=$S(X>0:^XTV(8989.3,1,4,X,0),1:"ROU^y^1")
"RTN","XWBTCPM",66,0)
 I $G(^%ZIS(14.5,"LOGON",XWBVOL)) Q 0 ;Check INHIBIT LOGONS?
"RTN","XWBTCPM",67,0)
 I $D(^%ZOSF("ACTJ")) X ^("ACTJ") I $P(J,U,3),($P(J,U,3)'>Y) Q 0
"RTN","XWBTCPM",68,0)
 Q 1
"RTN","XWBTCPM",69,0)
 ;
"RTN","XWBTCPM",70,0)
M2M ;M2M Broker
"RTN","XWBTCPM",71,0)
 S XWBRBUF=XWB_XWBRBUF,(IO,IO(0))=XWBTDEV G SPAWN^XWBVLL
"RTN","XWBTCPM",72,0)
 Q
"RTN","XWBTCPM",73,0)
 ;
"RTN","XWBTCPM",74,0)
NEW ;New broker
"RTN","XWBTCPM",75,0)
 S U="^",DUZ=0,DUZ(0)="",XWBVER=1.108
"RTN","XWBTCPM",76,0)
 D SETTIME(1) ;Setup for sign-on timeout
"RTN","XWBTCPM",77,0)
 U XWBTDEV D
"RTN","XWBTCPM",78,0)
 . N XWB,ERR,NATIP,I
"RTN","XWBTCPM",79,0)
 . S ERR=$$PRSP^XWBPRS
"RTN","XWBTCPM",80,0)
 . S ERR=$$PRSM^XWBPRS
"RTN","XWBTCPM",81,0)
 . S MSG=$G(XWB(4,"CMD")) ;Build connect msg.
"RTN","XWBTCPM",82,0)
 . S I="" F  S I=$O(XWB(5,"P",I)) Q:I=""  S MSG=MSG_U_XWB(5,"P",I)
"RTN","XWBTCPM",83,0)
 . ;Get the peer and save that IP.
"RTN","XWBTCPM",84,0)
 . S NATIP=$$GETPEER^%ZOSV S:'$L(NATIP) NATIP=$P(MSG,"^",2)
"RTN","XWBTCPM",85,0)
 . I NATIP'=$P(MSG,"^",2) S $P(MSG,"^",2)=NATIP
"RTN","XWBTCPM",86,0)
 . Q
"RTN","XWBTCPM",87,0)
 S X=$$NEWJOB() D:'X LOG("No New Connects")
"RTN","XWBTCPM",88,0)
 I ($P(MSG,U)'="TCPConnect")!('X) D QSND^XWBRW("reject"),LOG("reject: "_MSG) Q
"RTN","XWBTCPM",89,0)
 D QSND^XWBRW("accept"),LOG("accept") ;Ack
"RTN","XWBTCPM",90,0)
 S IO("IP")=$P(MSG,U,2),XWBTSKT=$P(MSG,U,3),XWBCLMAN=$P(MSG,U,4)
"RTN","XWBTCPM",91,0)
 S XWBTIP=$G(IO("IP"))
"RTN","XWBTCPM",92,0)
 ;start RUM for Broker Handler XWB*1.1*5
"RTN","XWBTCPM",93,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)
"RTN","XWBTCPM",94,0)
 ;GTM
"RTN","XWBTCPM",95,0)
 I $G(XWBT("PCNT")) D
"RTN","XWBTCPM",96,0)
 . S X=$NA(^XUTL("XUSYS",$J,1)) L +@X:0
"RTN","XWBTCPM",97,0)
 . D COUNT^XUSCNT(1),SETLOCK^XUSCNT(X)
"RTN","XWBTCPM",98,0)
 ;We don't use a callback
"RTN","XWBTCPM",99,0)
 K XWB,CON,LEN,MSG ;Clean up
"RTN","XWBTCPM",100,0)
 ;Attempt to share license, Must have TCP port open first.
"RTN","XWBTCPM",101,0)
 U XWBTDEV ;D SHARELIC^%ZOSV(1)
"RTN","XWBTCPM",102,0)
 ;setup null device "NULL"
"RTN","XWBTCPM",103,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS S XWBNULL=IO I POP S XWBERROR="No NULL device" D ^%ZTER,EXIT Q
"RTN","XWBTCPM",104,0)
 D SAVDEV^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",105,0)
 ;change process name
"RTN","XWBTCPM",106,0)
 D CHPRN("ip"_$P(XWBTIP,".",3,4)_":"_XWBTDEV)
"RTN","XWBTCPM",107,0)
 ;
"RTN","XWBTCPM",108,0)
RESTART ;The error trap returns to here
"RTN","XWBTCPM",109,0)
 N $ESTACK S $ETRAP="D ETRAP^XWBTCPM"
"RTN","XWBTCPM",110,0)
 S DT=$$DT^XLFDT,DTIME=30
"RTN","XWBTCPM",111,0)
 U XWBTDEV D MAIN
"RTN","XWBTCPM",112,0)
 D LOG("Exit: "_XWBTBUF)
"RTN","XWBTCPM",113,0)
 ;Turn off the error trap for the exit
"RTN","XWBTCPM",114,0)
 S $ETRAP=""
"RTN","XWBTCPM",115,0)
 D EXIT ;Logout
"RTN","XWBTCPM",116,0)
 K XWBR,XWBARY
"RTN","XWBTCPM",117,0)
 ;stop RUM for handler XWB*1.1*5
"RTN","XWBTCPM",118,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,2)
"RTN","XWBTCPM",119,0)
 D USE^%ZISUTL("XWBNULL"),CLOSE^%ZISUTL("XWBNULL")
"RTN","XWBTCPM",120,0)
 ;Close in the calling script
"RTN","XWBTCPM",121,0)
 K SOCK,TYPE,XWBSND,XWBTYPE,XWBRBUF
"RTN","XWBTCPM",122,0)
 Q
"RTN","XWBTCPM",123,0)
 ;
"RTN","XWBTCPM",124,0)
MAIN ; -- main message processing loop. debug at MAIN+1
"RTN","XWBTCPM",125,0)
 F  D  Q:XWBTBUF="#BYE#"
"RTN","XWBTCPM",126,0)
 . ;Setup
"RTN","XWBTCPM",127,0)
 . S XWBAPVER=0,XWBTBUF="",XWBTCMD="",XWBRBUF=""
"RTN","XWBTCPM",128,0)
 . K XWBR,XWBARY,XWBPRT
"RTN","XWBTCPM",129,0)
 . ; -- read client request
"RTN","XWBTCPM",130,0)
 . S XR=$$BREAD^XWBRW(1,XWBTIME,1)
"RTN","XWBTCPM",131,0)
 . I '$L(XR) D LOG("Timeout: "_XWBTIME) S XWBTBUF="#BYE#" Q
"RTN","XWBTCPM",132,0)
 . S XR=XR_$$BREAD^XWBRW(4)
"RTN","XWBTCPM",133,0)
 . I XR="#BYE#" D  Q  ;Check for exit
"RTN","XWBTCPM",134,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF="#BYE#"
"RTN","XWBTCPM",135,0)
 . . Q
"RTN","XWBTCPM",136,0)
 . S TYPE=(XR="[XWB]")  ;check HDR
"RTN","XWBTCPM",137,0)
 . I 'TYPE D LOG("Bad Header: "_XR) Q
"RTN","XWBTCPM",138,0)
 . D CALLP^XWBPRS(.XWBR,$G(XWBDEBUG)) ;Read the NEW Msg parameters and call RPC
"RTN","XWBTCPM",139,0)
 . IF XWBTCMD="#BYE#" D  Q
"RTN","XWBTCPM",140,0)
 . . D QSND^XWBRW("#BYE#"),LOG("BYE CMD") S XWBTBUF=XWBTCMD
"RTN","XWBTCPM",141,0)
 . . Q
"RTN","XWBTCPM",142,0)
 . U XWBTDEV
"RTN","XWBTCPM",143,0)
 . S XWBPTYPE=$S('$D(XWBPTYPE):1,XWBPTYPE<1:1,XWBPTYPE>6:1,1:XWBPTYPE)
"RTN","XWBTCPM",144,0)
 . ;I $G(XWBPRT) D RETURN^XWBPRS2 Q  ;New msg return
"RTN","XWBTCPM",145,0)
 . I '$G(XWBPRT) D SND^XWBRW ;Return data,flush buffer
"RTN","XWBTCPM",146,0)
 Q  ;End Of Main
"RTN","XWBTCPM",147,0)
 ;
"RTN","XWBTCPM",148,0)
 ;
"RTN","XWBTCPM",149,0)
ETRAP ; -- on trapped error, send error info to client
"RTN","XWBTCPM",150,0)
 N XWBERC,XWBERR
"RTN","XWBTCPM",151,0)
 ;Change trapping during trap.
"RTN","XWBTCPM",152,0)
 S $ETRAP="D ^%ZTER,EXIT^XWBTCPM HALT"
"RTN","XWBTCPM",153,0)
 S XWBERC=$E($$EC^%ZOSV,1,200),XWBERR="M  ERROR="_XWBERC_$C(13,10)_"LAST REF="_$$LGR^%ZOSV
"RTN","XWBTCPM",154,0)
 I $EC["U411" S XWBERROR="U411",XWBSEC="",XWBERR="Data Transfer Error to Server"
"RTN","XWBTCPM",155,0)
 D ^%ZTER ;%ZTER clears $ZE and $ZCODE
"RTN","XWBTCPM",156,0)
 D LOG("In ETRAP: "_XWBERC) ;Log
"RTN","XWBTCPM",157,0)
 I (XWBERC["READ")!(XWBERC["WRITE")!(XWBERC["SYSTEM-F") D EXIT HALT
"RTN","XWBTCPM",158,0)
 U XWBTDEV
"RTN","XWBTCPM",159,0)
 I $G(XWBT("PCNT")) L ^XUTL("XUSYS",$J,0)
"RTN","XWBTCPM",160,0)
 E  L  ;Clear Locks
"RTN","XWBTCPM",161,0)
 ;I XWBOS'="DSM" D
"RTN","XWBTCPM",162,0)
 S XWBPTYPE=1 ;So SNDERR won't check XWBR
"RTN","XWBTCPM",163,0)
 ;D SNDERR^XWBRW,WRITE^XWBRW($C(24)_XWBERR_$C(4))
"RTN","XWBTCPM",164,0)
 D ESND^XWBRW($C(24)_XWBERR_$C(4))
"RTN","XWBTCPM",165,0)
 S $ETRAP="Q:($ESTACK&'$QUIT)  Q:$ESTACK -9 S $ECODE="""" D CLEANP^XWBTCPM G RESTART^XWBTCPM",$ECODE=",U99,"
"RTN","XWBTCPM",166,0)
 Q
"RTN","XWBTCPM",167,0)
 ;
"RTN","XWBTCPM",168,0)
CLEANP ;Clean up the partion
"RTN","XWBTCPM",169,0)
 N XWBTDEV,XWBNULL D KILL^XUSCLEAN
"RTN","XWBTCPM",170,0)
 Q
"RTN","XWBTCPM",171,0)
 ;
"RTN","XWBTCPM",172,0)
STYPE(X,WRAP) ;For backward compatability only
"RTN","XWBTCPM",173,0)
 I $D(WRAP) Q $$RTRNFMT^XWBLIB($G(X),WRAP)
"RTN","XWBTCPM",174,0)
 Q $$RTRNFMT^XWBLIB(X)
"RTN","XWBTCPM",175,0)
 ;
"RTN","XWBTCPM",176,0)
BREAD(L,T) ;read tcp buffer, L is length
"RTN","XWBTCPM",177,0)
 Q $$BREAD^XWBRW(L,$G(T))
"RTN","XWBTCPM",178,0)
 ;
"RTN","XWBTCPM",179,0)
CHPRN(N) ;change process name
"RTN","XWBTCPM",180,0)
 ;Change process name to N
"RTN","XWBTCPM",181,0)
 D SETNM^%ZOSV($E(N,1,15))
"RTN","XWBTCPM",182,0)
 Q
"RTN","XWBTCPM",183,0)
 ;
"RTN","XWBTCPM",184,0)
SETTIME(%) ;Set the Read timeout 0=RPC, 1=sign-on
"RTN","XWBTCPM",185,0)
 S XWBTIME=$S($G(%):90,$G(XWBVER)>1.105:$$BAT^XUPARAM,1:36000),XWBTIME(1)=2
"RTN","XWBTCPM",186,0)
 I $G(%) S XWBTIME=$S($G(XWBVER)>1.1:90,1:36000)
"RTN","XWBTCPM",187,0)
 Q
"RTN","XWBTCPM",188,0)
TIMEOUT ;Do this on MAIN  loop timeout
"RTN","XWBTCPM",189,0)
 I $G(DUZ)>0 D QSND^XWBRW("#BYE#") Q
"RTN","XWBTCPM",190,0)
 ;Sign-on timeout
"RTN","XWBTCPM",191,0)
 S XWBR(0)=0,XWBR(1)=1,XWBR(2)="",XWBR(3)="TIME-OUT",XWBPTYPE=2
"RTN","XWBTCPM",192,0)
 D SND^XWBRW
"RTN","XWBTCPM",193,0)
 Q
"RTN","XWBTCPM",194,0)
 ;
"RTN","XWBTCPM",195,0)
OS() ;Return the OS
"RTN","XWBTCPM",196,0)
 Q $S(^%ZOSF("OS")["DSM":"DSM",^("OS")["UNIX":"UNIX",^("OS")["OpenM":"OpenM",1:"MSM")
"RTN","XWBTCPM",197,0)
 ;
"RTN","XWBTCPM",198,0)
INIT ;Setup
"RTN","XWBTCPM",199,0)
 S U="^",XWBTIME=10,XWBOS=$$OS,XWBDEBUG=0,XWBRBUF=""
"RTN","XWBTCPM",200,0)
 S XWBDEBUG=$$GET^XPAR("SYS","XWBDEBUG")
"RTN","XWBTCPM",201,0)
 S XWBT("BF")=$S(XWBOS="GT.M":"#",1:"!")
"RTN","XWBTCPM",202,0)
 S XWBT("PCNT")=0 I XWBOS="GT.M",$L($T(^XUSCNT)) S XWBT("PCNT")=1
"RTN","XWBTCPM",203,0)
 D LOGSTART^XWBDLOG("XWBTCPM")
"RTN","XWBTCPM",204,0)
 Q
"RTN","XWBTCPM",205,0)
 ;
"RTN","XWBTCPM",206,0)
DEBUG ;Entry point for debug, Build a server to get the connect
"RTN","XWBTCPM",207,0)
 ;DSM sample;ZDEBUG ON S $ZB(1)="SERV+1^XWBTCPM:1",$ZB="ETRAP+1^XWBTCPM:1"
"RTN","XWBTCPM",208,0)
 W !,"Before running this entry point set your debugger to stop at"
"RTN","XWBTCPM",209,0)
 W !,"the place you want to debug. Some spots to use:"
"RTN","XWBTCPM",210,0)
 W !,"'SERV+1^XWBTCPM', 'MAIN+1^XWBTCPM' or 'CAPI+1^XWBPRS.'",!
"RTN","XWBTCPM",211,0)
 W !,"or location of your choice.",!
"RTN","XWBTCPM",212,0)
 W !,"IP Socket to Listen on: " R SOCK:300 Q:'$T!(SOCK["^")
"RTN","XWBTCPM",213,0)
 ;Use %ZISTCP to do a single server
"RTN","XWBTCPM",214,0)
 D LISTEN^%ZISTCP(SOCK,"SERV^XWBTCPM")
"RTN","XWBTCPM",215,0)
 U $P W !,"Done"
"RTN","XWBTCPM",216,0)
 Q
"RTN","XWBTCPM",217,0)
SERV ;Callback from the server
"RTN","XWBTCPM",218,0)
 S XWBTDEV=IO,XWBTIME(1)=3600 D INIT
"RTN","XWBTCPM",219,0)
 S XWBDEBUG=1,MSG=$$BREAD^XWBRW(5,60) ;R MSG#5
"RTN","XWBTCPM",220,0)
 D NEW
"RTN","XWBTCPM",221,0)
 S IO("C")=1 ;Cause the Listenr to stop
"RTN","XWBTCPM",222,0)
 Q
"RTN","XWBTCPM",223,0)
 ;
"RTN","XWBTCPM",224,0)
EXIT ;Close out
"RTN","XWBTCPM",225,0)
 I $G(DUZ) D LOGOUT^XUSRB
"RTN","XWBTCPM",226,0)
 I $G(XWBT("PCNT")) D COUNT^XUSCNT(-1)
"RTN","XWBTCPM",227,0)
 Q
"RTN","XWBTCPM",228,0)
 ;
"RTN","XWBTCPM",229,0)
LOG(MSG) ;Record Debug Info
"RTN","XWBTCPM",230,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG(MSG)
"RTN","XWBTCPM",231,0)
 Q
"RTN","XWBTCPM",232,0)
 ;
"RTN","XWBTCPMT")
0^2^B8829013
"RTN","XWBTCPMT",1,0)
XWBTCPMT ;ISF/RWF - Routine to test a connection ;11/28/2005
"RTN","XWBTCPMT",2,0)
 ;;1.1;RPC BROKER;**43**;Mar 28, 1997
"RTN","XWBTCPMT",3,0)
CALL ;Interactive
"RTN","XWBTCPMT",4,0)
 N IP,PORT,STAT
"RTN","XWBTCPMT",5,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",6,0)
 S U="^",DTIME=$$DTIME^XUP
"RTN","XWBTCPMT",7,0)
 W !,"Interactive Broker Test"
"RTN","XWBTCPMT",8,0)
 R !,"IP ADDRESS: ",IP:DTIME
"RTN","XWBTCPMT",9,0)
 I IP["^" Q
"RTN","XWBTCPMT",10,0)
 R !,"PORT: ",PORT:DTIME
"RTN","XWBTCPMT",11,0)
 I PORT["^" Q
"RTN","XWBTCPMT",12,0)
 S STAT=$$TEST(IP,PORT,1)
"RTN","XWBTCPMT",13,0)
 U $P
"RTN","XWBTCPMT",14,0)
 W !,$S(STAT>0:"Success, response: "_$P(STAT,U,2),1:"Failed: "_$P(STAT,U,2,9))
"RTN","XWBTCPMT",15,0)
 Q
"RTN","XWBTCPMT",16,0)
 ;
"RTN","XWBTCPMT",17,0)
TEST(IP,PORT,TALK) ;
"RTN","XWBTCPMT",18,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N S IP=$$ADDRESS^XLFNSLK(IP)
"RTN","XWBTCPMT",19,0)
 I IP'?1.3N1P1.3N1P1.3N1P1.3N Q "-1^BAD IP"
"RTN","XWBTCPMT",20,0)
 D CALL^%ZISTCP(IP,PORT)
"RTN","XWBTCPMT",21,0)
 I POP Q "-1^Failed to Connect"
"RTN","XWBTCPMT",22,0)
 U IO
"RTN","XWBTCPMT",23,0)
 N $ET S $ET="G ERR^XWBTCPMT"
"RTN","XWBTCPMT",24,0)
 ;TCPConnect
"RTN","XWBTCPMT",25,0)
 W "[XWB]10304"_$C(10)_"TCPConnect5001010.6.17.95f00010f0024ISF-FORTW.vha.med.va.govf"_$C(4),@IOF
"RTN","XWBTCPMT",26,0)
 R RES:10 I '$T S RES="-1^TIMEOUT" G EXIT
"RTN","XWBTCPMT",27,0)
 W "[XWB]10304"_$C(5)_"#BYE#"_$C(4),@IOF
"RTN","XWBTCPMT",28,0)
 R RES2:10 I '$T S RES="-1^TIMEOUT after accept"
"RTN","XWBTCPMT",29,0)
 S RES="1^"_RES
"RTN","XWBTCPMT",30,0)
EXIT ;Close and Exit
"RTN","XWBTCPMT",31,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",32,0)
 Q RES
"RTN","XWBTCPMT",33,0)
 ;
"RTN","XWBTCPMT",34,0)
ERR ;
"RTN","XWBTCPMT",35,0)
 D CLOSE^%ZISTCP
"RTN","XWBTCPMT",36,0)
 U $P
"RTN","XWBTCPMT",37,0)
 Q "-1^"_$$EC^%ZOSV
"RTN","XWBTCPMT",38,0)
 ;
"RTN","XWBTCPMT",39,0)
CHECK ;Check server setup
"RTN","XWBTCPMT",40,0)
 N XPARSYS,XWBDEBUG,XWBOS,XWBT,XWNRBUF,XWBTIME,NEWJOB
"RTN","XWBTCPMT",41,0)
 W !,"This will check for some of the errors that can prevent the Broker"
"RTN","XWBTCPMT",42,0)
 W !,"from getting started.",!
"RTN","XWBTCPMT",43,0)
 D HOME^%ZIS
"RTN","XWBTCPMT",44,0)
 D INIT^XWBTCPM
"RTN","XWBTCPMT",45,0)
 W !,"Debuging is set to ",$S(XWBDEBUG=1:"On",XWBDEBUG=2:"Verbose",XWBDEBUG=3:"Very Verbose",1:"Off")
"RTN","XWBTCPMT",46,0)
 D SETTIME^XWBTCPM(0)
"RTN","XWBTCPMT",47,0)
 W !,"Broker activity timeout is set to ",XWBTIME
"RTN","XWBTCPMT",48,0)
 S %ZIS="MN",IOP="NULL" D ^%ZIS
"RTN","XWBTCPMT",49,0)
 I POP W !,"The NULL device is not setup correctly."
"RTN","XWBTCPMT",50,0)
 I 'POP D ^%ZISC W !,"The NULL device is OK."
"RTN","XWBTCPMT",51,0)
 I $T(SHARELIC^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'SHARELIC'."
"RTN","XWBTCPMT",52,0)
 I $T(GETPEER^%ZOSV)="" W !,"The routine %ZOSV is missing the entry point 'GETPEER'."
"RTN","XWBTCPMT",53,0)
 I $G(XWBT("PCNT")),$T(COUNT^XUSCNT)="" W !,"The routine XUSCNT is missing on a GT.M system."
"RTN","XWBTCPMT",54,0)
 W !,"Checking if new JOB's can start."
"RTN","XWBTCPMT",55,0)
 S ^TMP("XWB",$J)=1 J HOLD^XWBTCPMT($J) H 1
"RTN","XWBTCPMT",56,0)
 I $G(^TMP("XWB",$J))=1 W !,"Doesn't look like a new JOB could start!",!
"RTN","XWBTCPMT",57,0)
 S NEWJOB=$$NEWJOB^XWBTCPM()
"RTN","XWBTCPMT",58,0)
 W !,"New jobs are "_$S('NEWJOB:"not ",1:"")_"allowed."
"RTN","XWBTCPMT",59,0)
 W !,"Done with the checks.",!
"RTN","XWBTCPMT",60,0)
 K ^TMP("XWB",$J)
"RTN","XWBTCPMT",61,0)
 Q
"RTN","XWBTCPMT",62,0)
 ;
"RTN","XWBTCPMT",63,0)
HOLD(MJ) ;Show that a new job is allowed.
"RTN","XWBTCPMT",64,0)
 S ^TMP("XWB",MJ)=5
"RTN","XWBTCPMT",65,0)
 HANG 5
"RTN","XWBTCPMT",66,0)
 Q
"VER")
8.0^22.0
"BLD",532,6)
^36
**END**
**END**
