Released PSX*2*48 SEQ #51
Extracted from mail message
**KIDS**:PSX*2.0*48^

**INSTALL NAME**
PSX*2.0*48
"BLD",4586,0)
PSX*2.0*48^CMOP^0^3060213^y
"BLD",4586,1,0)
^^103^103^3060213^^^
"BLD",4586,1,1,0)
This project involves six different applications that have been significantly
"BLD",4586,1,2,0)
changed to enable VA Medical Centers to perform third party electronic billing
"BLD",4586,1,3,0)
for prescriptions. 
"BLD",4586,1,4,0)
 
"BLD",4586,1,5,0)
Below is a list of all the applications involved in this project along with
"BLD",4586,1,6,0)
their patch number:
"BLD",4586,1,7,0)
  
"BLD",4586,1,8,0)
   APPLICATION/VERSION                                  PATCH
"BLD",4586,1,9,0)
   -----------------------------------------------------------------
"BLD",4586,1,10,0)
   OUTPATIENT PHARMACY (OP) V. 7.0                      PSO*7*148
"BLD",4586,1,11,0)
   INTEGRATED BILLING (IB) V. 2.0                       IB*2*276
"BLD",4586,1,12,0)
   PHARMACY DATA MANAGEMENT (PDM) V. 1.0                PSS*1*90
"BLD",4586,1,13,0)
   CONSOLIDATED MAIL OUTPATIENT PHARMACY (CMOP) V. 2.0  PSX*2*48
"BLD",4586,1,14,0)
   ACCOUNTS RECEIVABLE (AR) V. 4.5                      PRCA*4.5*230
"BLD",4586,1,15,0)
   ELECTRONIC CLAIMS MANAGEMENT ENGINE (ECME) V. 1.0    BPS*1*1
"BLD",4586,1,16,0)
 
"BLD",4586,1,17,0)
Veterans Health Information Systems and Technology Architecture (VistA) 
"BLD",4586,1,18,0)
software applications and infrastructure were enhanced, in order to allow the
"BLD",4586,1,19,0)
electronic transmission of outpatient pharmacy prescription claims (WINDOW and
"BLD",4586,1,20,0)
MAIL fills) to third party payers via the network connections available
"BLD",4586,1,21,0)
through the Austin Automation Center (AAC). VistA will be enhanced to receive
"BLD",4586,1,22,0)
electronic adjudicated responses from the third party payers, which include
"BLD",4586,1,23,0)
real-time processing for Drug Review Utilization and Refill Too Soon rejects.
"BLD",4586,1,24,0)
Reject information will be displayed to the pharmacist as the prescription is
"BLD",4586,1,25,0)
being processed. The pharmacist will have the capability to take the
"BLD",4586,1,26,0)
appropriate action to ensure patient safety or to override the reject and
"BLD",4586,1,27,0)
resubmit the claim to the payer for payment. When a status of "PAYABLE" is
"BLD",4586,1,28,0)
returned by the payer for a released prescription, VistA will automatically 
"BLD",4586,1,29,0)
create the bill in IB, authorize it and immediately create the receivable in
"BLD",4586,1,30,0)
the AR application. Since the exact amount being paid by the payer is known,
"BLD",4586,1,31,0)
a decrease adjustment will be automatically generated and applied so that the
"BLD",4586,1,32,0)
receivable is equal to the net amount due from the payer.
"BLD",4586,1,33,0)
 
"BLD",4586,1,34,0)
The system also provides electronic payment matching capability (for
"BLD",4586,1,35,0)
electronically billable outpatient pharmacy prescriptions) using the existing
"BLD",4586,1,36,0)
Electronic Data Interchange (EDI) Lockbox functionality which processes other
"BLD",4586,1,37,0)
electronic payments from third party payers. This real-time electronic claims
"BLD",4586,1,38,0)
processing capability will be provided in accordance with the Healthcare
"BLD",4586,1,39,0)
Insurance Portability and Accountability Act (HIPAA), EDI transactions and 
"BLD",4586,1,40,0)
the National Council for Prescription Drug Programs (NCPDP) mandated format 
"BLD",4586,1,41,0)
standards, specifically NCPDP Telecommunication Standard V. 5.1. Additional 
"BLD",4586,1,42,0)
functionality delivered with this project includes: 
"BLD",4586,1,43,0)
 
"BLD",4586,1,44,0)
   . Auto-Release/Outpatient Pharmacy Automation Interface (OPAI) Integration.
"BLD",4586,1,45,0)
   . Back-billing capability to allow electronic billing of claims from within 
"BLD",4586,1,46,0)
     the IB application.
"BLD",4586,1,47,0)
   . Capability to MOVE a group of subscribers from one insurance plan to 
"BLD",4586,1,48,0)
     another while automatically "expiring" the old plan, which is a major
"BLD",4586,1,49,0)
     time saver.
"BLD",4586,1,50,0)
   . Pharmacy Dispensed As Written (DAW) prescription processing.
"BLD",4586,1,51,0)
  
"BLD",4586,1,52,0)
Overview of the Process:
"BLD",4586,1,53,0)
  
"BLD",4586,1,54,0)
When a prescription is about to be filled and dispensed by the pharmacy, the 
"BLD",4586,1,55,0)
OP application submits the prescription to the new ECME application. ECME then
"BLD",4586,1,56,0)
contacts IB to verify whether or not the prescription is electronically
"BLD",4586,1,57,0)
billable. If so, ECME gathers the information necessary to generate a NCPDP
"BLD",4586,1,58,0)
claim. The claim information is passed to the VistA Health Level Seven (HL7)
"BLD",4586,1,59,0)
package. The HL7 package then sends the billing information to the AAC, where
"BLD",4586,1,60,0)
it is routed to the corresponding third party insurance via Emdeon (formerly
"BLD",4586,1,61,0)
WebMD).
"BLD",4586,1,62,0)
  
"BLD",4586,1,63,0)
Once the payer processes the information, the response coming back from the
"BLD",4586,1,64,0)
payer is passed back to the site that made the request, and the information
"BLD",4586,1,65,0)
is stored in the ECME package. If the third party payer accepted the claim,
"BLD",4586,1,66,0)
the adjudicated information is passed along to IB. If the claim was rejected
"BLD",4586,1,67,0)
the problem can be worked on and a new claim can be submitted to the payer.
"BLD",4586,1,68,0)
  
"BLD",4586,1,69,0)
For electronically billable CMOP prescription processing, the third party
"BLD",4586,1,70,0)
claim is sent before the prescription information is transmitted to the
"BLD",4586,1,71,0)
CMOP facility to be filled. Once the adjudicating response is electronically 
"BLD",4586,1,72,0)
received from the third party payer, if there are no Drug Utilization Review
"BLD",4586,1,73,0)
or Refill Too Soon rejects, the prescription is then transmitted to the CMOP 
"BLD",4586,1,74,0)
facility. When the CMOP center sends the dispensing information back to VistA,
"BLD",4586,1,75,0)
the National Drug Code (NDC) information is checked against the NDC sent to 
"BLD",4586,1,76,0)
the third party payer and, if different, a new claim is generated in the 
"BLD",4586,1,77,0)
background and is sent to the third party payer. In case the CMOP facility 
"BLD",4586,1,78,0)
indicates that it is unable to fill a "PAYABLE  prescription fill, a reversal
"BLD",4586,1,79,0)
is automatically submitted to the third party payer for the corresponding 
"BLD",4586,1,80,0)
fill.
"BLD",4586,1,81,0)
   
"BLD",4586,1,82,0)
This patch modifies the CMOP application to submit electronic claims for 
"BLD",4586,1,83,0)
prescriptions that are transmitted to CMOP centers to be filled and dispensed 
"BLD",4586,1,84,0)
remotely. All the prescriptions ready to be included on the batch to be
"BLD",4586,1,85,0)
transmitted to CMOP are first transmitted to the third party insurance. Once
"BLD",4586,1,86,0)
this step is completed, the system waits 60 seconds before the actual
"BLD",4586,1,87,0)
transmission to CMOP starts. This process will affect the existing CMOP
"BLD",4586,1,88,0)
functionality in two ways: 
"BLD",4586,1,89,0)
   
"BLD",4586,1,90,0)
 1) If a response from the third party payer is not received by the time the 
"BLD",4586,1,91,0)
    prescription is ready to be transmitted to CMOP, the prescription is
"BLD",4586,1,92,0)
    skipped and remains in the queue for the next CMOP transmission. A Mailman
"BLD",4586,1,93,0)
    message containing all the prescriptions in this category is generated at 
"BLD",4586,1,94,0)
    the end of the process and it is transmitted to all the holders of the 
"BLD",4586,1,95,0)
    PSXMAIL security key. If no users on the system have this key, the Mailman
"BLD",4586,1,96,0)
    message is sent to all the users holding the PSXCMOPMGR security key.
"BLD",4586,1,97,0)
 
"BLD",4586,1,98,0)
 2) If the third party payer rejects the claim due to a DUR (Drug Utilization
"BLD",4586,1,99,0)
    Review) or a 'REFILL TOO SOON' reject, the prescription is not sent to
"BLD",4586,1,100,0)
    CMOP and remains in the queue to be transmitted in the next CMOP 
"BLD",4586,1,101,0)
    transmission. The prescription will not be transmitted to CMOP until the
"BLD",4586,1,102,0)
    reject is resolved by the user through the Outpatient Pharmacy V. 7.0 
"BLD",4586,1,103,0)
    application. No message is generated for prescriptions in this category.
"BLD",4586,4,0)
^9.64PA^^
"BLD",4586,"KRN",0)
^9.67PA^8989.52^19
"BLD",4586,"KRN",.4,0)
.4
"BLD",4586,"KRN",.4,"NM",0)
^9.68A^^
"BLD",4586,"KRN",.401,0)
.401
"BLD",4586,"KRN",.402,0)
.402
"BLD",4586,"KRN",.403,0)
.403
"BLD",4586,"KRN",.5,0)
.5
"BLD",4586,"KRN",.84,0)
.84
"BLD",4586,"KRN",3.6,0)
3.6
"BLD",4586,"KRN",3.8,0)
3.8
"BLD",4586,"KRN",9.2,0)
9.2
"BLD",4586,"KRN",9.8,0)
9.8
"BLD",4586,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",4586,"KRN",9.8,"NM",1,0)
PSXRPPL^^0^B60595738
"BLD",4586,"KRN",9.8,"NM",2,0)
PSXVND^^0^B36240970
"BLD",4586,"KRN",9.8,"NM",3,0)
PSXRXU^^0^B28830470
"BLD",4586,"KRN",9.8,"NM",4,0)
PSXRSUS^^0^B75856096
"BLD",4586,"KRN",9.8,"NM",5,0)
PSXRPPL1^^0^B43603421
"BLD",4586,"KRN",9.8,"NM",6,0)
PSXBPSUT^^0^B699978
"BLD",4586,"KRN",9.8,"NM",7,0)
PSXBPSMS^^0^B11444984
"BLD",4586,"KRN",9.8,"NM","B","PSXBPSMS",7)

"BLD",4586,"KRN",9.8,"NM","B","PSXBPSUT",6)

"BLD",4586,"KRN",9.8,"NM","B","PSXRPPL",1)

"BLD",4586,"KRN",9.8,"NM","B","PSXRPPL1",5)

"BLD",4586,"KRN",9.8,"NM","B","PSXRSUS",4)

"BLD",4586,"KRN",9.8,"NM","B","PSXRXU",3)

"BLD",4586,"KRN",9.8,"NM","B","PSXVND",2)

"BLD",4586,"KRN",19,0)
19
"BLD",4586,"KRN",19.1,0)
19.1
"BLD",4586,"KRN",101,0)
101
"BLD",4586,"KRN",409.61,0)
409.61
"BLD",4586,"KRN",771,0)
771
"BLD",4586,"KRN",870,0)
870
"BLD",4586,"KRN",8989.51,0)
8989.51
"BLD",4586,"KRN",8989.52,0)
8989.52
"BLD",4586,"KRN",8994,0)
8994
"BLD",4586,"KRN","B",.4,.4)

"BLD",4586,"KRN","B",.401,.401)

"BLD",4586,"KRN","B",.402,.402)

"BLD",4586,"KRN","B",.403,.403)

"BLD",4586,"KRN","B",.5,.5)

"BLD",4586,"KRN","B",.84,.84)

"BLD",4586,"KRN","B",3.6,3.6)

"BLD",4586,"KRN","B",3.8,3.8)

"BLD",4586,"KRN","B",9.2,9.2)

"BLD",4586,"KRN","B",9.8,9.8)

"BLD",4586,"KRN","B",19,19)

"BLD",4586,"KRN","B",19.1,19.1)

"BLD",4586,"KRN","B",101,101)

"BLD",4586,"KRN","B",409.61,409.61)

"BLD",4586,"KRN","B",771,771)

"BLD",4586,"KRN","B",870,870)

"BLD",4586,"KRN","B",8989.51,8989.51)

"BLD",4586,"KRN","B",8989.52,8989.52)

"BLD",4586,"KRN","B",8994,8994)

"BLD",4586,"QUES",0)
^9.62^^
"BLD",4586,"REQB",0)
^9.611^3^1
"BLD",4586,"REQB",3,0)
PSX*2.0*57^2
"BLD",4586,"REQB","B","PSX*2.0*57",3)

"MBREQ")
0
"PKG",526,-1)
1^1
"PKG",526,0)
CMOP^PSX^CONSOLIDATED MAIL OUTPATIENT PHARMACY
"PKG",526,22,0)
^9.49I^1^1
"PKG",526,22,1,0)
2.0^3000210^3000217^11853
"PKG",526,22,1,"PAH",1,0)
48^3060213^10000000022
"PKG",526,22,1,"PAH",1,1,0)
^^103^103^3060213
"PKG",526,22,1,"PAH",1,1,1,0)
This project involves six different applications that have been significantly
"PKG",526,22,1,"PAH",1,1,2,0)
changed to enable VA Medical Centers to perform third party electronic billing
"PKG",526,22,1,"PAH",1,1,3,0)
for prescriptions. 
"PKG",526,22,1,"PAH",1,1,4,0)
 
"PKG",526,22,1,"PAH",1,1,5,0)
Below is a list of all the applications involved in this project along with
"PKG",526,22,1,"PAH",1,1,6,0)
their patch number:
"PKG",526,22,1,"PAH",1,1,7,0)
  
"PKG",526,22,1,"PAH",1,1,8,0)
   APPLICATION/VERSION                                  PATCH
"PKG",526,22,1,"PAH",1,1,9,0)
   -----------------------------------------------------------------
"PKG",526,22,1,"PAH",1,1,10,0)
   OUTPATIENT PHARMACY (OP) V. 7.0                      PSO*7*148
"PKG",526,22,1,"PAH",1,1,11,0)
   INTEGRATED BILLING (IB) V. 2.0                       IB*2*276
"PKG",526,22,1,"PAH",1,1,12,0)
   PHARMACY DATA MANAGEMENT (PDM) V. 1.0                PSS*1*90
"PKG",526,22,1,"PAH",1,1,13,0)
   CONSOLIDATED MAIL OUTPATIENT PHARMACY (CMOP) V. 2.0  PSX*2*48
"PKG",526,22,1,"PAH",1,1,14,0)
   ACCOUNTS RECEIVABLE (AR) V. 4.5                      PRCA*4.5*230
"PKG",526,22,1,"PAH",1,1,15,0)
   ELECTRONIC CLAIMS MANAGEMENT ENGINE (ECME) V. 1.0    BPS*1*1
"PKG",526,22,1,"PAH",1,1,16,0)
 
"PKG",526,22,1,"PAH",1,1,17,0)
Veterans Health Information Systems and Technology Architecture (VistA) 
"PKG",526,22,1,"PAH",1,1,18,0)
software applications and infrastructure were enhanced, in order to allow the
"PKG",526,22,1,"PAH",1,1,19,0)
electronic transmission of outpatient pharmacy prescription claims (WINDOW and
"PKG",526,22,1,"PAH",1,1,20,0)
MAIL fills) to third party payers via the network connections available
"PKG",526,22,1,"PAH",1,1,21,0)
through the Austin Automation Center (AAC). VistA will be enhanced to receive
"PKG",526,22,1,"PAH",1,1,22,0)
electronic adjudicated responses from the third party payers, which include
"PKG",526,22,1,"PAH",1,1,23,0)
real-time processing for Drug Review Utilization and Refill Too Soon rejects.
"PKG",526,22,1,"PAH",1,1,24,0)
Reject information will be displayed to the pharmacist as the prescription is
"PKG",526,22,1,"PAH",1,1,25,0)
being processed. The pharmacist will have the capability to take the
"PKG",526,22,1,"PAH",1,1,26,0)
appropriate action to ensure patient safety or to override the reject and
"PKG",526,22,1,"PAH",1,1,27,0)
resubmit the claim to the payer for payment. When a status of "PAYABLE" is
"PKG",526,22,1,"PAH",1,1,28,0)
returned by the payer for a released prescription, VistA will automatically 
"PKG",526,22,1,"PAH",1,1,29,0)
create the bill in IB, authorize it and immediately create the receivable in
"PKG",526,22,1,"PAH",1,1,30,0)
the AR application. Since the exact amount being paid by the payer is known,
"PKG",526,22,1,"PAH",1,1,31,0)
a decrease adjustment will be automatically generated and applied so that the
"PKG",526,22,1,"PAH",1,1,32,0)
receivable is equal to the net amount due from the payer.
"PKG",526,22,1,"PAH",1,1,33,0)
 
"PKG",526,22,1,"PAH",1,1,34,0)
The system also provides electronic payment matching capability (for
"PKG",526,22,1,"PAH",1,1,35,0)
electronically billable outpatient pharmacy prescriptions) using the existing
"PKG",526,22,1,"PAH",1,1,36,0)
Electronic Data Interchange (EDI) Lockbox functionality which processes other
"PKG",526,22,1,"PAH",1,1,37,0)
electronic payments from third party payers. This real-time electronic claims
"PKG",526,22,1,"PAH",1,1,38,0)
processing capability will be provided in accordance with the Healthcare
"PKG",526,22,1,"PAH",1,1,39,0)
Insurance Portability and Accountability Act (HIPAA), EDI transactions and 
"PKG",526,22,1,"PAH",1,1,40,0)
the National Council for Prescription Drug Programs (NCPDP) mandated format 
"PKG",526,22,1,"PAH",1,1,41,0)
standards, specifically NCPDP Telecommunication Standard V. 5.1. Additional 
"PKG",526,22,1,"PAH",1,1,42,0)
functionality delivered with this project includes: 
"PKG",526,22,1,"PAH",1,1,43,0)
 
"PKG",526,22,1,"PAH",1,1,44,0)
   . Auto-Release/Outpatient Pharmacy Automation Interface (OPAI) Integration.
"PKG",526,22,1,"PAH",1,1,45,0)
   . Back-billing capability to allow electronic billing of claims from within 
"PKG",526,22,1,"PAH",1,1,46,0)
     the IB application.
"PKG",526,22,1,"PAH",1,1,47,0)
   . Capability to MOVE a group of subscribers from one insurance plan to 
"PKG",526,22,1,"PAH",1,1,48,0)
     another while automatically "expiring" the old plan, which is a major
"PKG",526,22,1,"PAH",1,1,49,0)
     time saver.
"PKG",526,22,1,"PAH",1,1,50,0)
   . Pharmacy Dispensed As Written (DAW) prescription processing.
"PKG",526,22,1,"PAH",1,1,51,0)
  
"PKG",526,22,1,"PAH",1,1,52,0)
Overview of the Process:
"PKG",526,22,1,"PAH",1,1,53,0)
  
"PKG",526,22,1,"PAH",1,1,54,0)
When a prescription is about to be filled and dispensed by the pharmacy, the 
"PKG",526,22,1,"PAH",1,1,55,0)
OP application submits the prescription to the new ECME application. ECME then
"PKG",526,22,1,"PAH",1,1,56,0)
contacts IB to verify whether or not the prescription is electronically
"PKG",526,22,1,"PAH",1,1,57,0)
billable. If so, ECME gathers the information necessary to generate a NCPDP
"PKG",526,22,1,"PAH",1,1,58,0)
claim. The claim information is passed to the VistA Health Level Seven (HL7)
"PKG",526,22,1,"PAH",1,1,59,0)
package. The HL7 package then sends the billing information to the AAC, where
"PKG",526,22,1,"PAH",1,1,60,0)
it is routed to the corresponding third party insurance via Emdeon (formerly
"PKG",526,22,1,"PAH",1,1,61,0)
WebMD).
"PKG",526,22,1,"PAH",1,1,62,0)
  
"PKG",526,22,1,"PAH",1,1,63,0)
Once the payer processes the information, the response coming back from the
"PKG",526,22,1,"PAH",1,1,64,0)
payer is passed back to the site that made the request, and the information
"PKG",526,22,1,"PAH",1,1,65,0)
is stored in the ECME package. If the third party payer accepted the claim,
"PKG",526,22,1,"PAH",1,1,66,0)
the adjudicated information is passed along to IB. If the claim was rejected
"PKG",526,22,1,"PAH",1,1,67,0)
the problem can be worked on and a new claim can be submitted to the payer.
"PKG",526,22,1,"PAH",1,1,68,0)
  
"PKG",526,22,1,"PAH",1,1,69,0)
For electronically billable CMOP prescription processing, the third party
"PKG",526,22,1,"PAH",1,1,70,0)
claim is sent before the prescription information is transmitted to the
"PKG",526,22,1,"PAH",1,1,71,0)
CMOP facility to be filled. Once the adjudicating response is electronically 
"PKG",526,22,1,"PAH",1,1,72,0)
received from the third party payer, if there are no Drug Utilization Review
"PKG",526,22,1,"PAH",1,1,73,0)
or Refill Too Soon rejects, the prescription is then transmitted to the CMOP 
"PKG",526,22,1,"PAH",1,1,74,0)
facility. When the CMOP center sends the dispensing information back to VistA,
"PKG",526,22,1,"PAH",1,1,75,0)
the National Drug Code (NDC) information is checked against the NDC sent to 
"PKG",526,22,1,"PAH",1,1,76,0)
the third party payer and, if different, a new claim is generated in the 
"PKG",526,22,1,"PAH",1,1,77,0)
background and is sent to the third party payer. In case the CMOP facility 
"PKG",526,22,1,"PAH",1,1,78,0)
indicates that it is unable to fill a "PAYABLE  prescription fill, a reversal
"PKG",526,22,1,"PAH",1,1,79,0)
is automatically submitted to the third party payer for the corresponding 
"PKG",526,22,1,"PAH",1,1,80,0)
fill.
"PKG",526,22,1,"PAH",1,1,81,0)
   
"PKG",526,22,1,"PAH",1,1,82,0)
This patch modifies the CMOP application to submit electronic claims for 
"PKG",526,22,1,"PAH",1,1,83,0)
prescriptions that are transmitted to CMOP centers to be filled and dispensed 
"PKG",526,22,1,"PAH",1,1,84,0)
remotely. All the prescriptions ready to be included on the batch to be
"PKG",526,22,1,"PAH",1,1,85,0)
transmitted to CMOP are first transmitted to the third party insurance. Once
"PKG",526,22,1,"PAH",1,1,86,0)
this step is completed, the system waits 60 seconds before the actual
"PKG",526,22,1,"PAH",1,1,87,0)
transmission to CMOP starts. This process will affect the existing CMOP
"PKG",526,22,1,"PAH",1,1,88,0)
functionality in two ways: 
"PKG",526,22,1,"PAH",1,1,89,0)
   
"PKG",526,22,1,"PAH",1,1,90,0)
 1) If a response from the third party payer is not received by the time the 
"PKG",526,22,1,"PAH",1,1,91,0)
    prescription is ready to be transmitted to CMOP, the prescription is
"PKG",526,22,1,"PAH",1,1,92,0)
    skipped and remains in the queue for the next CMOP transmission. A Mailman
"PKG",526,22,1,"PAH",1,1,93,0)
    message containing all the prescriptions in this category is generated at 
"PKG",526,22,1,"PAH",1,1,94,0)
    the end of the process and it is transmitted to all the holders of the 
"PKG",526,22,1,"PAH",1,1,95,0)
    PSXMAIL security key. If no users on the system have this key, the Mailman
"PKG",526,22,1,"PAH",1,1,96,0)
    message is sent to all the users holding the PSXCMOPMGR security key.
"PKG",526,22,1,"PAH",1,1,97,0)
 
"PKG",526,22,1,"PAH",1,1,98,0)
 2) If the third party payer rejects the claim due to a DUR (Drug Utilization
"PKG",526,22,1,"PAH",1,1,99,0)
    Review) or a 'REFILL TOO SOON' reject, the prescription is not sent to
"PKG",526,22,1,"PAH",1,1,100,0)
    CMOP and remains in the queue to be transmitted in the next CMOP 
"PKG",526,22,1,"PAH",1,1,101,0)
    transmission. The prescription will not be transmitted to CMOP until the
"PKG",526,22,1,"PAH",1,1,102,0)
    reject is resolved by the user through the Outpatient Pharmacy V. 7.0 
"PKG",526,22,1,"PAH",1,1,103,0)
    application. No message is generated for prescriptions in this category.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","PSXBPSMS")
0^7^B11444984
"RTN","PSXBPSMS",1,0)
PSXBPSMS ;BIRM/BSR - BPS (ECME) Utilities ;10/29/98  2:13 PM
"RTN","PSXBPSMS",2,0)
 ;;2.0;CMOP;**48**;11 Apr 97
"RTN","PSXBPSMS",3,0)
 ;Reference to $$RXFLDT^PSOBPSUT supported by IA 4701
"RTN","PSXBPSMS",4,0)
 ;
"RTN","PSXBPSMS",5,0)
EN ;Main entry point.
"RTN","PSXBPSMS",6,0)
 N EMCNT,DFN,ORCNT,PATCNT,DIV,RX,DFN,SSN,PTLST,VADM
"RTN","PSXBPSMS",7,0)
 K ^TMP("PSXEPHOUT",$J)
"RTN","PSXBPSMS",8,0)
 S DIV="",(EMCNT,ORCNT,PATCNT)=0
"RTN","PSXBPSMS",9,0)
 F  S DIV=$O(^TMP("PSXEPHIN",$J,DIV))  Q:DIV=""  D
"RTN","PSXBPSMS",10,0)
 .D HEADER(DIV)
"RTN","PSXBPSMS",11,0)
 .S RX="" F  S RX=$O(^TMP("PSXEPHIN",$J,DIV,RX)) Q:RX=""  D
"RTN","PSXBPSMS",12,0)
 ..S DFN=+$P(^PSRX(RX,0),"^",2) D DEM^VADPT
"RTN","PSXBPSMS",13,0)
 ..S SSN=$E($P(VADM(2),U),6,9),PATNM=(VADM(1))
"RTN","PSXBPSMS",14,0)
 ..S ORCNT=$G(ORCNT)+1 D PATCNT(PATNM_SSN)
"RTN","PSXBPSMS",15,0)
 ..D FORMAT
"RTN","PSXBPSMS",16,0)
 .D FOOTER(DIV)
"RTN","PSXBPSMS",17,0)
 D MAIL,CLEAN
"RTN","PSXBPSMS",18,0)
 Q
"RTN","PSXBPSMS",19,0)
 ;
"RTN","PSXBPSMS",20,0)
 ; Format Row
"RTN","PSXBPSMS",21,0)
FORMAT ;
"RTN","PSXBPSMS",22,0)
 N LTXT,RFL
"RTN","PSXBPSMS",23,0)
 S RFL=+$G(^TMP("PSXEPHIN",$J,DIV,RX)),LTXT=$$GET1^DIQ(52,RX,.01)_"/"_RFL
"RTN","PSXBPSMS",24,0)
 S $E(LTXT,15)=$E(PATNM,1,18)_"("_SSN_")",$E(LTXT,40)=$E($$GET1^DIQ(52,RX,6),1,25)
"RTN","PSXBPSMS",25,0)
 I $$PATCH^XPDUTL("PSO*7.0*148") S $E(LTXT,66)=$$FMTE^XLFDT($$RXFLDT^PSOBPSUT(RX,RFL))
"RTN","PSXBPSMS",26,0)
 D STORELN(LTXT)
"RTN","PSXBPSMS",27,0)
 Q
"RTN","PSXBPSMS",28,0)
 ;
"RTN","PSXBPSMS",29,0)
 ;Count patients.
"RTN","PSXBPSMS",30,0)
PATCNT(NAMSSN) ;
"RTN","PSXBPSMS",31,0)
 I '$D(PTLST(NAMSSN)) D
"RTN","PSXBPSMS",32,0)
 .S PTLST(NAMSSN)=""
"RTN","PSXBPSMS",33,0)
 .S PATCNT=$G(PATCNT)+1
"RTN","PSXBPSMS",34,0)
 Q
"RTN","PSXBPSMS",35,0)
 ;
"RTN","PSXBPSMS",36,0)
 ;Build header.
"RTN","PSXBPSMS",37,0)
HEADER(DIV) ;
"RTN","PSXBPSMS",38,0)
 D STORELN("Division: "_$$GET1^DIQ(59,DIV,.01))
"RTN","PSXBPSMS",39,0)
 D STORELN($TR($J("",79)," ","-"))
"RTN","PSXBPSMS",40,0)
 D STORELN("RX#/Fill      PATIENT(LAST4SSN)        DRUG                      FILL DATE")
"RTN","PSXBPSMS",41,0)
 D STORELN($TR($J("",79)," ","-"))
"RTN","PSXBPSMS",42,0)
 Q
"RTN","PSXBPSMS",43,0)
 ;       
"RTN","PSXBPSMS",44,0)
 ;Output patient count & prescriptions count & division number
"RTN","PSXBPSMS",45,0)
FOOTER(DIVN) ;
"RTN","PSXBPSMS",46,0)
 D STORELN(" ")
"RTN","PSXBPSMS",47,0)
 D STORELN("Total "_$$GET1^DIQ(59,DIVN,.01)_": "_PATCNT_" Patients and "_ORCNT_" Prescriptions.")
"RTN","PSXBPSMS",48,0)
 D STORELN(" ")
"RTN","PSXBPSMS",49,0)
 K PTLST S (ORCNT,PATCNT)=0
"RTN","PSXBPSMS",50,0)
 Q
"RTN","PSXBPSMS",51,0)
 ;
"RTN","PSXBPSMS",52,0)
 ;Build and Send email to provider.
"RTN","PSXBPSMS",53,0)
MAIL ;
"RTN","PSXBPSMS",54,0)
 N PSBMSG,M1,Y,USER,XMTEXT,XMDUZ,XMSUB,XMY
"RTN","PSXBPSMS",55,0)
 S PSBMSG(1)="The prescriptions listed below are third party electronically billable. They"
"RTN","PSXBPSMS",56,0)
 S PSBMSG(2)="have not been transmitted to CMOP because they have been submitted to"
"RTN","PSXBPSMS",57,0)
 S PSBMSG(3)="third party payer but we have not received a response regarding these"
"RTN","PSXBPSMS",58,0)
 S PSBMSG(4)="prescriptions yet. The prescriptions will remain in the CMOP queue to be"
"RTN","PSXBPSMS",59,0)
 S PSBMSG(5)="transmitted in the next transmission if the response from the third party"
"RTN","PSXBPSMS",60,0)
 S PSBMSG(6)="payer has been received."
"RTN","PSXBPSMS",61,0)
 S PSBMSG(7)=" "
"RTN","PSXBPSMS",62,0)
 S M1=8
"RTN","PSXBPSMS",63,0)
 S Y="" F  S Y=$O(^TMP("PSXEPHOUT",$J,"M",Y)) Q:Y=""  D
"RTN","PSXBPSMS",64,0)
 .S PSBMSG(M1)=$P(^TMP("PSXEPHOUT",$J,"M",Y),"^"),M1=M1+1
"RTN","PSXBPSMS",65,0)
 ; Send email to all users who hold a security key
"RTN","PSXBPSMS",66,0)
 S USER=0
"RTN","PSXBPSMS",67,0)
 I $D(^XUSEC("PSXMAIL")) D
"RTN","PSXBPSMS",68,0)
 .F  S USER=$O(^XUSEC("PSXMAIL",USER)) Q:'USER  S XMY(USER)=""
"RTN","PSXBPSMS",69,0)
 E  D
"RTN","PSXBPSMS",70,0)
 .F  S USER=$O(^XUSEC("PSXCMOPMGR",USER)) Q:'USER  S XMY(USER)=""
"RTN","PSXBPSMS",71,0)
 ;
"RTN","PSXBPSMS",72,0)
 S XMTEXT="PSBMSG(",XMSUB="ePharmacy - CMOP Not TRANSMITTED Rx List"
"RTN","PSXBPSMS",73,0)
 S XMDUZ=.5
"RTN","PSXBPSMS",74,0)
 D ^XMD
"RTN","PSXBPSMS",75,0)
 Q
"RTN","PSXBPSMS",76,0)
 ;
"RTN","PSXBPSMS",77,0)
 ;Store E-mail line for later use.
"RTN","PSXBPSMS",78,0)
STORELN(LINE) ;
"RTN","PSXBPSMS",79,0)
 S EMCNT=EMCNT+1
"RTN","PSXBPSMS",80,0)
 S ^TMP("PSXEPHOUT",$J,"M",EMCNT)=LINE
"RTN","PSXBPSMS",81,0)
 Q
"RTN","PSXBPSMS",82,0)
 ;
"RTN","PSXBPSMS",83,0)
 ;Clean all remaining arrays and variables.
"RTN","PSXBPSMS",84,0)
CLEAN ;
"RTN","PSXBPSMS",85,0)
 K ^TMP("PSXEPHOUT",$J),^TMP("PSXEPHIN",$J)
"RTN","PSXBPSMS",86,0)
 Q
"RTN","PSXBPSUT")
0^6^B699978
"RTN","PSXBPSUT",1,0)
PSXBPSUT ;BIR/MFR - BPS (ECME) Utilities ;13 Mar 2002  10:31 AM
"RTN","PSXBPSUT",2,0)
 ;;2.0;CMOP;**48**;11 Apr 97
"RTN","PSXBPSUT",3,0)
 ;Reference to ^PS(52.5, supported by DBIA #1978
"RTN","PSXBPSUT",4,0)
 ;
"RTN","PSXBPSUT",5,0)
XMIT(REC) ; Checks if the prescription will be transmitted to CMOP or not
"RTN","PSXBPSUT",6,0)
 ; Input:  REC  - Pointer to SUSPENSE file (#52.5)
"RTN","PSXBPSUT",7,0)
 ; Output: XMIT - 0 - NO  /  1 - YES 
"RTN","PSXBPSUT",8,0)
 N VADM,DFN,RX
"RTN","PSXBPSUT",9,0)
 I '$D(^PS(52.5,REC,0)) Q 0
"RTN","PSXBPSUT",10,0)
 I $P(^PS(52.5,REC,0),"^",7)="" Q 0
"RTN","PSXBPSUT",11,0)
 S RX=$P($G(^PS(52.5,REC,0)),"^",1) I RX="" Q 0
"RTN","PSXBPSUT",12,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT I $G(VADM(6))'="" Q 0
"RTN","PSXBPSUT",13,0)
 I ($P(^PS(52.5,REC,0),"^",3)'=XDFN) Q 0
"RTN","PSXBPSUT",14,0)
 S DFN=$$GET1^DIQ(52,RX,2,"I") D DEM^VADPT I $G(VADM(6))'="" Q 0
"RTN","PSXBPSUT",15,0)
 S PSXOK=0 D CHKDATA^PSXMISC1 I PSXOK Q 0
"RTN","PSXBPSUT",16,0)
 Q 1
"RTN","PSXRPPL")
0^1^B60595738^B60509656
"RTN","PSXRPPL",1,0)
PSXRPPL ;BIR/WPB,BAB-Gathers data for the CMOP Transmission ;13 Mar 2002  10:31 AM
"RTN","PSXRPPL",2,0)
 ;;2.0;CMOP;**3,23,33,28,40,42,41,48**;11 Apr 97
"RTN","PSXRPPL",3,0)
 ;Reference to ^PS(52.5,  supported by DBIA #1978
"RTN","PSXRPPL",4,0)
 ;Reference to ^PSRX(     supported by DBIA #1977
"RTN","PSXRPPL",5,0)
 ;Reference to ^PSOHLSN1  supported by DBIA #2385
"RTN","PSXRPPL",6,0)
 ;Reference to ^PSORXL    supported by DBIA #1969
"RTN","PSXRPPL",7,0)
 ;Reference to ^PSOLSET   supported by DBIA #1973
"RTN","PSXRPPL",8,0)
 ;Reference to %ZIS(1     supported by DBIA #290
"RTN","PSXRPPL",9,0)
 ;Reference to %ZIS(2     supported by DBIA #2247
"RTN","PSXRPPL",10,0)
 ;Reference to ^PSSLOCK   supported by DBIA #2789
"RTN","PSXRPPL",11,0)
 ;Reference to ^XTMP("ORLK-" supported by DBIA #4001
"RTN","PSXRPPL",12,0)
 ;Reference to ^PSOBPSUT supported by DBIA #4701
"RTN","PSXRPPL",13,0)
 ;Reference to ^PSOREJUT supported by DBIA #4706
"RTN","PSXRPPL",14,0)
 ;Reference to ^BPSUTIL supported by DBIA #4410
"RTN","PSXRPPL",15,0)
 ;Called from PSXRSUS -Builds ^PSX(550.2,,15,"C" , and returns to PSXRSUS or PSXRTRAN
"RTN","PSXRPPL",16,0)
 ;
"RTN","PSXRPPL",17,0)
SDT K ^TMP($J,"PSX"),^TMP($J,"PSXDFN"),ZCNT,PSXBAT D:$D(XRTL) T0^%ZOSV
"RTN","PSXRPPL",18,0)
 S PSXTDIV=PSOSITE,PSXTYP=$S(+$G(PSXCS):"C",1:"N")
"RTN","PSXRPPL",19,0)
 ;
"RTN","PSXRPPL",20,0)
 ; - Submitting prescriptions to ECME (Electronic Claims Mgmt Engine) - 3rd pary
"RTN","PSXRPPL",21,0)
 I $$ECMEON^BPSUTIL(PSXTDIV),$$CMOPON^BPSUTIL(PSXTDIV) D
"RTN","PSXRPPL",22,0)
 . N BPSCNT S BPSCNT=$$SBTECME^PSXRPPL1(PSXTYP,PSXTDIV,PRTDT,PSXDTRG)
"RTN","PSXRPPL",23,0)
 . ; - Wait 15 seconds per prescription sent to ECME (max of 2 hours)
"RTN","PSXRPPL",24,0)
 . I BPSCNT>0 H 60+$S((BPSCNT*15)>7200:7200,1:(BPSCNT*15))
"RTN","PSXRPPL",25,0)
 ;
"RTN","PSXRPPL",26,0)
 ; - Transmitting prescription to CMOP (up to THROUGH DATE)
"RTN","PSXRPPL",27,0)
 K ^TMP("PSXEPHIN",$J)
"RTN","PSXRPPL",28,0)
 S SDT=0 F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)) S XDFN=0 Q:(SDT>PRTDT)!(SDT'>0)  D
"RTN","PSXRPPL",29,0)
 . F  S XDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN)) S REC=0 Q:(XDFN'>0)!(XDFN="")  D
"RTN","PSXRPPL",30,0)
 . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC)) Q:(REC'>0)!(REC="")  D
"RTN","PSXRPPL",31,0)
 . . . D GETDATA D:$G(RXN) PSOUL^PSSLOCK(RXN),OERRLOCK(RXN)
"RTN","PSXRPPL",32,0)
 ;
"RTN","PSXRPPL",33,0)
 ; - Pulling prescriptions ahead (parameter in OUTPATIENT SITE file #59)
"RTN","PSXRPPL",34,0)
 I $G(PSXBAT),'$G(PSXRTRAN) D CHKDFN
"RTN","PSXRPPL",35,0)
 ;
"RTN","PSXRPPL",36,0)
 ; - Sends a Mailman message if there were transmission problems with the 3rd Party Payer
"RTN","PSXRPPL",37,0)
 I $D(^TMP("PSXEPHIN",$J)) D ^PSXBPSMS K ^TMP("PSXEPHIN",$J)
"RTN","PSXRPPL",38,0)
 ;
"RTN","PSXRPPL",39,0)
EXIT ;   
"RTN","PSXRPPL",40,0)
 K SDT,DFN,REC,RXNUM,PSXOK,FILNUM,REF,PNAME,CNAME,DIE,DR,NDFN,%,CNT,COM,DTTM,FILL,JJ,PRTDT,PSXDIV,XDFN,NFLAG,CIND,XDFN
"RTN","PSXRPPL",41,0)
 K CHKDT,DAYS,DRUG,DRUGCHK,NM,OPDT,PHARCLK,PHY,PSTAT,PTRA,PTRB,QTY,REL,RXERR,RXF,SFN,PSXDGST,PSXMC,PSXMDT
"RTN","PSXRPPL",42,0)
 S:$D(XRT0) XRTN=$T(+0) D:$D(XRT0) T1^%ZOSV
"RTN","PSXRPPL",43,0)
 K ^TMP("PSXEPHIN",$J)
"RTN","PSXRPPL",44,0)
 Q
"RTN","PSXRPPL",45,0)
GETDATA ;Screens rxs and builds data
"RTN","PSXRPPL",46,0)
 ;PSXOK=1:NOT CMOP DRUG OR DO NOT MAIL,2:TRADENAME,3:WINDOW,4:PRINTED,5:NOT SUSPENDED
"RTN","PSXRPPL",47,0)
 ;PSXOK=6:ALREADY RELEASED,7:DIFFERENT DIVISION,8:BAD DATA IN 52.5
"RTN","PSXRPPL",48,0)
 ;9:CS Mismatch,10:DEA 1 or 2
"RTN","PSXRPPL",49,0)
 I '$D(^PS(52.5,REC,0)) K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",50,0)
 I $P(^PS(52.5,REC,0),"^",7)="" K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",51,0)
 I ($P(^PS(52.5,REC,0),"^",3)'=XDFN) K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",52,0)
 N DFN S DFN=XDFN D DEM^VADPT
"RTN","PSXRPPL",53,0)
 I $G(VADM(6))'="" D DELETE K VADM Q
"RTN","PSXRPPL",54,0)
 S PSXOK=0,NFLAG=0
"RTN","PSXRPPL",55,0)
 S RXN=$P($G(^PS(52.5,REC,0)),"^",1) I RXN="" S PSXOK=8 Q
"RTN","PSXRPPL",56,0)
 ;
"RTN","PSXRPPL",57,0)
 N EPHQT S RFL=+$$GET1^DIQ(52.5,REC,9,"I"),EPHQT=0
"RTN","PSXRPPL",58,0)
 I $$PATCH^XPDUTL("PSO*7.0*148") D  I EPHQT Q
"RTN","PSXRPPL",59,0)
 . I $$RETRX^PSOBPSUT(RXN,RFL),SDT>DT S EPHQT=1 Q
"RTN","PSXRPPL",60,0)
 . I $$FIND^PSOREJUT(RXN,RFL) S EPHQT=1 Q
"RTN","PSXRPPL",61,0)
 . I $$STATUS^PSOBPSUT(RXN,RFL)="IN PROGRESS" D  Q
"RTN","PSXRPPL",62,0)
 . . S ^TMP("PSXEPHIN",$J,$$RXSITE^PSOBPSUT(RXN),RXN)=RFL,EPHQT=1
"RTN","PSXRPPL",63,0)
 ;
"RTN","PSXRPPL",64,0)
 D CHKDATA^PSXMISC1
"RTN","PSXRPPL",65,0)
SET Q:(PSXOK=7)!(PSXOK=8)!(PSXOK=9)
"RTN","PSXRPPL",66,0)
 S PNAME=$G(VADM(1))
"RTN","PSXRPPL",67,0)
 I ($G(PSXCSRX)=1)&($G(PSXCS)=1) S ^XTMP("PSXCS",PSOSITE,DT,RXN)=""
"RTN","PSXRPPL",68,0)
 I (PSXOK=0)&(PSXFLAG=1) S ^TMP($J,"PSXDFN",XDFN)="",NFLAG=4 D DQUE,RX550215 Q
"RTN","PSXRPPL",69,0)
 I (PSXOK=0)&(PSXFLAG=2) D RX550215 Q
"RTN","PSXRPPL",70,0)
 I (PSXOK>0)&(PSXOK<7)!(PSXOK=10) D DELETE Q
"RTN","PSXRPPL",71,0)
 Q
"RTN","PSXRPPL",72,0)
DELETE ; deletes the CMOP STATUS field in PS(52.5, reindex 'AC' x-ref
"RTN","PSXRPPL",73,0)
 L +^PS(52.5,REC):600 Q:'$T
"RTN","PSXRPPL",74,0)
 N DR,DIE,DA S DIE="^PS(52.5,",DA=REC,DR="3///@" D ^DIE
"RTN","PSXRPPL",75,0)
 S ^PS(52.5,"AC",$P(^PS(52.5,REC,0),"^",3),$P(^PS(52.5,REC,0),"^",2),REC)=""
"RTN","PSXRPPL",76,0)
 L -^PS(52.5,REC)
"RTN","PSXRPPL",77,0)
 Q
"RTN","PSXRPPL",78,0)
 ;the rest of the sub-routines go through the ^PSX(550.2,,15,"C"
"RTN","PSXRPPL",79,0)
 ;global and checks for RXs within the days ahead range and
"RTN","PSXRPPL",80,0)
 ;builds the ^PSX(550.2,PSXBAT,
"RTN","PSXRPPL",81,0)
CHKDFN ; use the patient 'C' index under RX multiple in file 550.2 to GET dfn to gather Patients' future RXs
"RTN","PSXRPPL",82,0)
 I '$D(^PSX(550.2,PSXBAT,15,"C")) Q
"RTN","PSXRPPL",83,0)
 S PSXPTNM="" F  S PSXPTNM=$O(^PSX(550.2,PSXBAT,15,"C",PSXPTNM)) Q:PSXPTNM=""  D
"RTN","PSXRPPL",84,0)
 . S XDFN=0 F  S XDFN=$O(^PSX(550.2,PSXBAT,"15","C",PSXPTNM,XDFN)) Q:(XDFN'>0)  D
"RTN","PSXRPPL",85,0)
 . . S SDT=PRTDT F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)),NDFN=0 Q:(SDT>PSXDTRG)!(SDT="")  D
"RTN","PSXRPPL",86,0)
 . . . F  S NDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN)),REC=0 Q:NDFN'>0  I NDFN=XDFN D
"RTN","PSXRPPL",87,0)
 . . . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN,REC)) Q:REC'>0  D
"RTN","PSXRPPL",88,0)
 . . . . . D GETDATA D:$G(RXN) PSOUL^PSSLOCK(RXN),OERRLOCK(RXN)
"RTN","PSXRPPL",89,0)
 Q
"RTN","PSXRPPL",90,0)
BEGIN ; Select print device
"RTN","PSXRPPL",91,0)
 I '$D(PSOPAR) D ^PSOLSET
"RTN","PSXRPPL",92,0)
 I $D(PSOLAP),($G(PSOLAP)'=ION) S PSLION=PSOLAP G PROFILE
"RTN","PSXRPPL",93,0)
 W ! S %ZIS("A")="PRINTER 'LABEL' DEVICE:  ",%ZIS("B")="",%ZIS="MQN" D ^%ZIS S PSLION=ION G:POP EXIT
"RTN","PSXRPPL",94,0)
 I $G(IOST)["C-" W !,"You must select a printer!",! G BEGIN
"RTN","PSXRPPL",95,0)
 F J=0,1 S @("PSOBAR"_J)="" I $D(^%ZIS(2,^%ZIS(1,IOS,"SUBTYPE"),"BAR"_J)) S @("PSOBAR"_J)=^("BAR"_J)
"RTN","PSXRPPL",96,0)
 S PSOBARS=PSOBAR1]""&(PSOBAR0]"")&$P(PSOPAR,"^",19)
"RTN","PSXRPPL",97,0)
 K PSOION,J D ^%ZISC I $D(IO("Q")) K IO("Q")
"RTN","PSXRPPL",98,0)
PROFILE I $D(PSOPROP),($G(PSOPROP)'=ION) Q
"RTN","PSXRPPL",99,0)
 I $P(PSOPAR,"^",8) S %ZIS="MNQ",%ZIS("A")="Select PROFILE PRINTER: " D ^%ZIS K %ZIS,IO("Q"),IOP G:POP EXIT S PSOPROP=ION D ^%ZISC
"RTN","PSXRPPL",100,0)
 I $G(PSOPROP)=ION W !,"You must select a printer!",! G PROFILE
"RTN","PSXRPPL",101,0)
 Q
"RTN","PSXRPPL",102,0)
PRT ; w auto error trapping
"RTN","PSXRPPL",103,0)
 D NOW^%DTC S DTTM=% K %
"RTN","PSXRPPL",104,0)
 S NM="" F  S NM=$O(^PSX(550.2,PSXBAT,15,"C",NM)) Q:NM=""  D DFN,PPL ;gather patient RXs, print patient RXs
"RTN","PSXRPPL",105,0)
 S DIK="^PSX(550.2,",DA=PSXBAT D ^DIK K PSXBAT
"RTN","PSXRPPL",106,0)
 K CHKDT,CIND,DAYS,DRUG,DRUGCHK,NFLAG,NM,ORD,PDT,PHARCLK,PHY,PSTAT,PTRA,PTRB,QTY,REL,RXERR,RXF,SFN,SIG,SITE,SUS,SUSPT
"RTN","PSXRPPL",107,0)
 Q
"RTN","PSXRPPL",108,0)
DFN S DFN=0,NFLAG=2
"RTN","PSXRPPL",109,0)
 F  S DFN=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN)),RXN=0 Q:(DFN="")!(DFN'>0)  D
"RTN","PSXRPPL",110,0)
 .F  S RXN=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN,RXN)),RXF="" Q:(RXN="")!(RXN'>0)  D
"RTN","PSXRPPL",111,0)
 ..F  S RXF=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN,RXN,RXF)) Q:RXF=""  D BLD
"RTN","PSXRPPL",112,0)
 Q
"RTN","PSXRPPL",113,0)
BLD ;
"RTN","PSXRPPL",114,0)
 S BATRXDA=$O(^PSX(550.2,PSXBAT,15,"B",RXN,0)) D NOW^%DTC S DTTM=%
"RTN","PSXRPPL",115,0)
 S REC=$P(^PSX(550.2,PSXBAT,15,BATRXDA,0),U,5),SUS=$O(^PS(52.5,"B",RXN,0))
"RTN","PSXRPPL",116,0)
 I SUS=REC,+SUS'=0 I 1 ;rx still valid in suspense
"RTN","PSXRPPL",117,0)
 E  D  Q  ;rx gone
"RTN","PSXRPPL",118,0)
 . N DA,DIK S DIK=550.2,DA(1)=PSXBAT,DA=BATRXDA
"RTN","PSXRPPL",119,0)
 . D ^DIK
"RTN","PSXRPPL",120,0)
 S PSOSU(DFN,SUS)=RXN,RXCNTR=$G(RXCNTR)+1,NFLAG=2
"RTN","PSXRPPL",121,0)
 S $P(^PSRX(RXN,0),U,15)=0,$P(^PSRX(RXN,"STA"),U,1)=0
"RTN","PSXRPPL",122,0)
 K % S COM="CMOP Suspense Label "_$S($G(^PS(52.5,SUS,"P"))=0:"Printed",$G(^PS(52.5,SUS,"P"))="":"Printed",1:"Reprinted")_$S($G(^PSRX(RXN,"TYPE"))>0:" (PARTIAL)",1:"")
"RTN","PSXRPPL",123,0)
 D EN^PSOHLSN1(RXN,"SC","ZU",COM)
"RTN","PSXRPPL",124,0)
 S DA=SUS D DQUE K DA
"RTN","PSXRPPL",125,0)
ACTLOG F JJ=0:0 S JJ=$O(^PSRX(RXN,"A",JJ)) Q:'JJ  S CNT=JJ
"RTN","PSXRPPL",126,0)
 S RFCNT=0 F RF=0:0 S RF=$O(^PSRX(RXN,1,RF)) Q:'RF  S RFCNT=RF
"RTN","PSXRPPL",127,0)
 S CNT=CNT+1,^PSRX(RXN,"A",0)="^52.3DA^"_CNT_"^"_CNT
"RTN","PSXRPPL",128,0)
LOCK L +^PSRX(RXN):600 G:'$T LOCK
"RTN","PSXRPPL",129,0)
 S ^PSRX(RXN,"A",CNT,0)=DTTM_"^S^"_DUZ_"^"_RFCNT_"^"_COM L -^PSRX(RXN)
"RTN","PSXRPPL",130,0)
 K CNT,COM,RFCNT,%,JJ,RF,Y,RXCNTR
"RTN","PSXRPPL",131,0)
 Q
"RTN","PSXRPPL",132,0)
PPL K PPL,PPL1 S ORD="" F  S ORD=$O(PSOSU(ORD)) Q:(ORD="")!(ORD'>0)  D PPL1
"RTN","PSXRPPL",133,0)
 Q
"RTN","PSXRPPL",134,0)
PPL1 ; print patient labels
"RTN","PSXRPPL",135,0)
 F SFN=0:0 S SFN=$O(PSOSU(ORD,SFN)) Q:'SFN  D
"RTN","PSXRPPL",136,0)
 . S:$L($G(PPL))<240 PPL=$P(PSOSU(ORD,SFN),"^")_","_$G(PPL)
"RTN","PSXRPPL",137,0)
 . S:$L($G(PPL))>239 PPL1=$P(PSOSU(ORD,SFN),"^")_","_$G(PPL1)
"RTN","PSXRPPL",138,0)
 . S DFN=$P(^PS(52.5,SFN,0),"^",3)
"RTN","PSXRPPL",139,0)
 S SUSPT=1,PSNP=$S($P(PSOPAR,"^",8):1,1:0) S:$D(PSOPROP) PFIO=PSOPROP
"RTN","PSXRPPL",140,0)
 D QLBL^PSORXL
"RTN","PSXRPPL",141,0)
 I $D(PPL1) S PSNP=0,PPL=PPL1 D QLBL^PSORXL
"RTN","PSXRPPL",142,0)
 K PPL,PPL1,PSOSU(ORD)
"RTN","PSXRPPL",143,0)
 Q
"RTN","PSXRPPL",144,0)
DQUE ; sets the CMOP indicator field, and printed field in 52.5
"RTN","PSXRPPL",145,0)
 L +^PS(52.5,REC):600 G:'$T DQUE
"RTN","PSXRPPL",146,0)
 I NFLAG=4 D
"RTN","PSXRPPL",147,0)
 . S DA=REC,DIE="^PS(52.5,",DR="3////L;4////"_DT D ^DIE K DIE,DA,DR L -^PS(52.5,REC)  ; the rest moved into PSXRTR
"RTN","PSXRPPL",148,0)
 S CIND=$S(NFLAG=1:"X",NFLAG=2:"P",NFLAG=3:"@",1:0)
"RTN","PSXRPPL",149,0)
 I $G(NFLAG)'=2 D
"RTN","PSXRPPL",150,0)
 .S DA=REC,DIE="^PS(52.5,",DR="3////"_CIND_";4////"_DT
"RTN","PSXRPPL",151,0)
 .D ^DIE K DIE,DA,DR
"RTN","PSXRPPL",152,0)
 .S ^PS(52.5,REC,"P")=1,^PS(52.5,"ADL",DT,REC)=""
"RTN","PSXRPPL",153,0)
 I $G(NFLAG)=2 D  ;print label cycle
"RTN","PSXRPPL",154,0)
 . S DA=REC,DIE="^PS(52.5,",DR="3////"_CIND_";4////"_DTTM_";5////"_DUZ_";7////"_RXCNTR
"RTN","PSXRPPL",155,0)
 . D ^DIE K DIE,DA,DR
"RTN","PSXRPPL",156,0)
 . S ^PS(52.5,REC,"P")=1,^PS(52.5,"ADL",$E($P(^PS(52.5,REC,0),"^",8),1,7),REC)=""
"RTN","PSXRPPL",157,0)
 L -^PS(52.5,REC)
"RTN","PSXRPPL",158,0)
 I $G(NFLAG)=2 D EN^PSOHLSN1(RXN,"SC","ZU","CMOP Suspense Label Printed")
"RTN","PSXRPPL",159,0)
 Q
"RTN","PSXRPPL",160,0)
RX550215 ; put RX into RX multiple TRANS 550.215 for PSXBAT
"RTN","PSXRPPL",161,0)
 I '$G(PSXBAT) D BATCH^PSXRSYU ; first time through create batch, & return PSXBAT
"RTN","PSXRPPL",162,0)
 K DD,DO,DIC,DA,DR,D0
"RTN","PSXRPPL",163,0)
 S:'$D(^PSX(550.2,PSXBAT,15,0)) ^PSX(550.2,PSXBAT,15,0)="^550.215P^^"
"RTN","PSXRPPL",164,0)
 S X=RXN,DA(1)=PSXBAT
"RTN","PSXRPPL",165,0)
 S DIC="^PSX(550.2,"_PSXBAT_",15,",DIC("DR")=".02////^S X=RXF;.03////^S X=DFN;.05////^S X=REC",DIC(0)="ZF"
"RTN","PSXRPPL",166,0)
 D FILE^DICN
"RTN","PSXRPPL",167,0)
 S PSXRXTDA=+Y ;RX DA within PSXBAT 'T'ransmission
"RTN","PSXRPPL",168,0)
 K DD,DO,DIC,DA,DR,D0
"RTN","PSXRPPL",169,0)
 Q
"RTN","PSXRPPL",170,0)
OERRLOCK(RXN) ; set XTMP for OERR/CPRS order locking
"RTN","PSXRPPL",171,0)
 I $G(PSXBAT),$G(RXN),$G(PSXRXTDA) I 1
"RTN","PSXRPPL",172,0)
 E  Q
"RTN","PSXRPPL",173,0)
 I $P(^PSX(550.2,PSXBAT,15,PSXRXTDA,0),U,1)'=RXN Q
"RTN","PSXRPPL",174,0)
RXNSET ; set ^XTMP("ORLK-"_ORDER per IA 4001 needs RXN
"RTN","PSXRPPL",175,0)
 Q:'$G(RXN)
"RTN","PSXRPPL",176,0)
 N ORD,NOW,NOW1 S ORD=+$P($G(^PSRX(+$G(RXN),"OR1")),"^",2)
"RTN","PSXRPPL",177,0)
 Q:'ORD
"RTN","PSXRPPL",178,0)
 S NOW=$$NOW^XLFDT,NOW1=$$FMADD^XLFDT(NOW,1)
"RTN","PSXRPPL",179,0)
 S ^XTMP("ORLK-"_+ORD,0)=NOW1_U_NOW_"^CPRS/CMOP RX/Order Lock",^(1)=DUZ_U_$J
"RTN","PSXRPPL",180,0)
 Q
"RTN","PSXRPPL",181,0)
RXNCLEAR ; needs RXN
"RTN","PSXRPPL",182,0)
 Q:'$G(RXN)
"RTN","PSXRPPL",183,0)
 N ORD S ORD=+$P($G(^PSRX(+$G(RXN),"OR1")),"^",2) Q:'ORD
"RTN","PSXRPPL",184,0)
 I $D(^XTMP("ORLK-"_ORD,0)),^(0)["CPRS/CMOP" K ^XTMP("ORLK-"_ORD)
"RTN","PSXRPPL",185,0)
 Q
"RTN","PSXRPPL1")
0^5^B43603421^B21197021
"RTN","PSXRPPL1",1,0)
PSXRPPL1 ;BIR/WPB-Resets Suspense to Print/Transmit ;[ 10/02/97  3:13 PM ]
"RTN","PSXRPPL1",2,0)
 ;;2.0;CMOP;**3,48**;11 Apr 97
"RTN","PSXRPPL1",3,0)
 ;Reference to ^PSRX( supported by DBIA #1977
"RTN","PSXRPPL1",4,0)
 ;Reference to File #59 supported by DBIA #1976
"RTN","PSXRPPL1",5,0)
 ;Reference to PSOSURST supported by DBIA #1970
"RTN","PSXRPPL1",6,0)
 ;Reference to ^PS(52.5,  supported by DBIA #1978
"RTN","PSXRPPL1",7,0)
 ;Reference to ^BPSUTIL supported by DBIA #4410
"RTN","PSXRPPL1",8,0)
 ;Reference to ^PSSLOCK   supported by DBIA #2789
"RTN","PSXRPPL1",9,0)
 ;Reference to ^PSOBPSUT supported by DBIA #4701
"RTN","PSXRPPL1",10,0)
 ;Reference to ^PSOBPSU1 supported by DBIA #4702
"RTN","PSXRPPL1",11,0)
 ;Reference to ^PSOREJUT supported by DBIA #4706
"RTN","PSXRPPL1",12,0)
 ;
"RTN","PSXRPPL1",13,0)
 ;This routine will reset the Queued flags and the printed flags in
"RTN","PSXRPPL1",14,0)
 ;PS(52.5 to 'Queued' and 'Printed' respectively and either retransmits
"RTN","PSXRPPL1",15,0)
 ;the data to the CMOP or prints the labels.
"RTN","PSXRPPL1",16,0)
START ;initializes local variables
"RTN","PSXRPPL1",17,0)
 I '$D(^XUSEC("PSXCMOPMGR",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRPPL1",18,0)
 I '$D(^XUSEC("PSX XMIT",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRPPL1",19,0)
 S SWITCH=0
"RTN","PSXRPPL1",20,0)
 K ^TMP($J,"PSX")
"RTN","PSXRPPL1",21,0)
QRY ;initial message and option menu
"RTN","PSXRPPL1",22,0)
 W !
"RTN","PSXRPPL1",23,0)
 S DIR(0)="NAO^1:3:0",DIR("A")="Select (1, 2, 3):  ",DIR("A",1)="  1 - Reset CMOP Batches for Transmission"
"RTN","PSXRPPL1",24,0)
 S DIR("A",2)="  2 - Reprint CMOP Batches",DIR("A",4)="  3 - Standard Reprint Batches from Suspense"
"RTN","PSXRPPL1",25,0)
 S DIR("?")="Enter a number between 1 and 3.",DIR("??")=$S($G(PSXVER):"^D HELP^PSXSRP",1:"^D MSG2^PSXRHLP") D ^DIR K DIR G:(Y<0)!($D(DIRUT)) EXIT S REPLY=Y K Y,X
"RTN","PSXRPPL1",26,0)
 I REPLY=1 S (PSXTRANS,PSXFLAG,SWITCH)=1 G:$G(PSXVER) ^PSXSRST G:'$G(PSXVER) BEGIN
"RTN","PSXRPPL1",27,0)
 I REPLY=2 S (PSXTRANS,PSXFLAG,SWITCH)=2 G:$G(PSXVER) ^PSXSRST G:'$G(PSXVER) BEGIN
"RTN","PSXRPPL1",28,0)
 I REPLY=3 S PSXFLG=1 G START^PSOSURST
"RTN","PSXRPPL1",29,0)
 K REPLY
"RTN","PSXRPPL1",30,0)
 Q
"RTN","PSXRPPL1",31,0)
BEGIN ;confirms CMOP processing, if Yes, checks for active site and status
"RTN","PSXRPPL1",32,0)
 ;in the CMOP System file, if not an active site or the system status
"RTN","PSXRPPL1",33,0)
 ;is not stopped the routine exits and processing stops
"RTN","PSXRPPL1",34,0)
 W !
"RTN","PSXRPPL1",35,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Are you sure you want to continue",DIR("?",1)="No - Exits."
"RTN","PSXRPPL1",36,0)
 S DIR("?")=$S(SWITCH=1:"Yes - Transmits data to the CMOP.",SWITCH=2:"Yes - Prints labels.",1:0) D ^DIR K DIR G:(Y=0)!($D(DIRUT)) EXIT K Y
"RTN","PSXRPPL1",37,0)
 S STATUS=$P($G(^PSX(550,+PSXSYS,0)),"^",3) I STATUS'="H" W !,"There is another job in process, please try again later." G EXIT
"RTN","PSXRPPL1",38,0)
ASK ;gets date for the resets
"RTN","PSXRPPL1",39,0)
 K BEGDATE,ENDDATE W !!,?10,$S($G(SWITCH)=1:"RESET and TRANSMIT CMOP DATA",$G(SWITCH)=2:"RESET and REPRINT CMOP LABELS",1:""),!!!,"**** Date Selection ****",!!
"RTN","PSXRPPL1",40,0)
ASK1 I SWITCH=1 S %DT="AEX",%DT("A")="   BEGIN DATE:  " D ^%DT K %DT,%DT("A") G:Y<0 EXIT S PRTDT=Y
"RTN","PSXRPPL1",41,0)
 I SWITCH=2 S %DT="AEX",%DT("A")="   BEGIN DATE:  " D ^%DT K %DT,%DT("A") G:Y<0 EXIT S PRTDT=Y
"RTN","PSXRPPL1",42,0)
 W !! S %DT="AEX",%DT("A")="   ENDING DATE:  " D ^%DT Q:Y<0  S PSXDTRG=Y K %DT,%DT("A")
"RTN","PSXRPPL1",43,0)
 I $G(PRTDT)>$G(PSXDTRG) W !,"Begin Date must be before Ending Date!" G ASK1
"RTN","PSXRPPL1",44,0)
 I '$O(^PS(52.5,"AP",PRTDT-1))!($O(^(0))>PSXDTRG) W !!,$S(SWITCH=1:"Nothing to Transmit.",SWITCH=2:"Nothing to Reprint.",1:0) G EXIT
"RTN","PSXRPPL1",45,0)
 D SDT S PSXERFLG=0
"RTN","PSXRPPL1",46,0)
 I SWITCH=1 D PSXTRANS Q
"RTN","PSXRPPL1",47,0)
 I SWITCH=2 D PRINT Q
"RTN","PSXRPPL1",48,0)
 S PSXSTAT="H" D PSXSTAT^PSXRSYU
"RTN","PSXRPPL1",49,0)
 G EXIT
"RTN","PSXRPPL1",50,0)
PSXTRANS ;
"RTN","PSXRPPL1",51,0)
 W !!
"RTN","PSXRPPL1",52,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="DO YOU WISH TO TRANSMIT TO THE CMOP NOW",DIR("?",1)="No - Exits the option.",DIR("?")="Yes - Transmits to the CMOP." D ^DIR K DIR Q:(Y=0)!($D(DIRUT))  K Y
"RTN","PSXRPPL1",53,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU,ASK^PSXRSUS
"RTN","PSXRPPL1",54,0)
 Q
"RTN","PSXRPPL1",55,0)
PRINT ;
"RTN","PSXRPPL1",56,0)
 W !!
"RTN","PSXRPPL1",57,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="DO YOU WISH REPRINT CMOP LABELS NOW",DIR("?",1)="No - Exits the option.",DIR("?")="Yes - Reprints CMOP labels." D ^DIR K DIR Q:(Y=0)!($D(DIRUT))  K Y
"RTN","PSXRPPL1",58,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU,ASK^PSXRSUS
"RTN","PSXRPPL1",59,0)
 Q
"RTN","PSXRPPL1",60,0)
SDT ;the following subroutines go through the PS(52.5 global and pull the
"RTN","PSXRPPL1",61,0)
 ;data needed to reset the Queued/Printed nodes
"RTN","PSXRPPL1",62,0)
 S SDT=PRTDT-1 F  S SDT=$O(^PS(52.5,"AP",SDT)),DFN=0 Q:(SDT>PSXDTRG)!(SDT="")  D DFN
"RTN","PSXRPPL1",63,0)
 Q
"RTN","PSXRPPL1",64,0)
DFN ;
"RTN","PSXRPPL1",65,0)
 F  S DFN=$O(^PS(52.5,"AP",SDT,DFN)),REC=0 Q:(DFN="")!(DFN'>0)  D REC
"RTN","PSXRPPL1",66,0)
 Q
"RTN","PSXRPPL1",67,0)
REC ;
"RTN","PSXRPPL1",68,0)
 F  S REC=$O(^PS(52.5,"AP",SDT,DFN,REC)) Q:(REC'>0)!(REC="")  D:$G(^PS(52.5,REC,0)) CHECK
"RTN","PSXRPPL1",69,0)
 K ZDIV
"RTN","PSXRPPL1",70,0)
 Q
"RTN","PSXRPPL1",71,0)
CHECK ;
"RTN","PSXRPPL1",72,0)
 S STAT=$P($G(^PS(52.5,REC,0)),U,7),PRINT=$G(^PS(52.5,REC,"P")),PSXPTR=$P($G(^PS(52.5,REC,0)),U,1)
"RTN","PSXRPPL1",73,0)
 S RXF="" F XXF=0:0 S XXF=$O(^PSRX(PSXPTR,1,XXF)) Q:XXF'>0  S RXF=XXF
"RTN","PSXRPPL1",74,0)
 S ZDIV=$S($G(RXF)>0:$P($G(^PSRX(PSXPTR,1,RXF,0)),U,9),1:$P($G(^PSRX(PSXPTR,2)),U,9)) I $G(ZDIV)'=$G(PSOSITE) Q
"RTN","PSXRPPL1",75,0)
 S:RXF'="" GONE=$P($G(^PSRX(PSXPTR,1,RXF,0)),U,18)
"RTN","PSXRPPL1",76,0)
 S:RXF="" GONE=$P($G(^PSRX(PSXPTR,2)),U,13)
"RTN","PSXRPPL1",77,0)
 I (STAT="P")&(PRINT=1)&($G(GONE)="") D RESET
"RTN","PSXRPPL1",78,0)
 K GONE,RXF,XXF
"RTN","PSXRPPL1",79,0)
 Q
"RTN","PSXRPPL1",80,0)
RESET ;resets the Queued/Printed flags to Queued and not Printed
"RTN","PSXRPPL1",81,0)
 L +^PS(52.5,REC):DTIME Q:'$T
"RTN","PSXRPPL1",82,0)
 S DIE="^PS(52.5,",DA=REC,DR="2////2;3////Q" D ^DIE L -^PS(52.5,REC) K DIE,DR,DA
"RTN","PSXRPPL1",83,0)
 S:$G(PSXVER) $P(^PSRX(PSXPTR,"STA"),U,1)=5 S:'$G(PSXVER) $P(^PSRX(PSXPTR,0),U,15)=5 K ^PS(52.5,"AC",DFN,SDT,REC)
"RTN","PSXRPPL1",84,0)
 Q
"RTN","PSXRPPL1",85,0)
PRTERR ; auto error trap for prt cmop local
"RTN","PSXRPPL1",86,0)
 S XXERR=$$EC^%ZOSV
"RTN","PSXRPPL1",87,0)
 S PSXDIVNM=$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSXRPPL1",88,0)
 ;save an image of the transient file 550.1 for 2 days
"RTN","PSXRPPL1",89,0)
 D NOW^%DTC S DTTM=%
"RTN","PSXRPPL1",90,0)
 S X=$$FMADD^XLFDT(DT,+2) S ^XTMP("PSXERR "_DTTM,0)=X_U_DT_U_"CMOP "_XXERR
"RTN","PSXRPPL1",91,0)
 M ^XTMP("PSXERR "_DTTM,550.1)=^PSX(550.1)
"RTN","PSXRPPL1",92,0)
 S XMSUB="CMOP Error "_PSXDIVNM_" "_$$GET1^DIQ(550.2,+$G(PSXBAT),.01)
"RTN","PSXRPPL1",93,0)
 D GRP1^PSXNOTE
"RTN","PSXRPPL1",94,0)
 ;S XMY(DUZ)=""
"RTN","PSXRPPL1",95,0)
 S XMTEXT="TEXT("
"RTN","PSXRPPL1",96,0)
 S TEXT(1,0)=$S($G(PSXCS):"",1:"NON-")_"CS CMOP Print Local encountered the following error. Please investigate"
"RTN","PSXRPPL1",97,0)
 S TEXT(2,0)="Division:         "_PSXDIVNM
"RTN","PSXRPPL1",98,0)
 S TEXT(3,0)="Type/Batch        "_$S($G(PSXCS):"CS",1:"NON-CS")_" / "_$$GET1^DIQ(550.2,$G(PSXBAT),.01)
"RTN","PSXRPPL1",99,0)
 S TEXT(4,0)="Error:            "_XXERR
"RTN","PSXRPPL1",100,0)
 S TEXT(5,0)="This batch has been set to closed."
"RTN","PSXRPPL1",101,0)
 S TEXT(6,0)="Call NVS to investigate which prescriptions have been printed and which are yet to print."
"RTN","PSXRPPL1",102,0)
 S TEXT(7,0)="A copy of file 550.1 can be found in ^XTMP(""PSXERR "_DTTM_""")"
"RTN","PSXRPPL1",103,0)
 D ^%ZTER
"RTN","PSXRPPL1",104,0)
 D ^XMD
"RTN","PSXRPPL1",105,0)
 I $G(PSXBAT) D
"RTN","PSXRPPL1",106,0)
 . N DA,DIE,DR S DIE="^PSX(550.2,",DA=PSXBAT,DR="1////4"
"RTN","PSXRPPL1",107,0)
 . D ^DIE
"RTN","PSXRPPL1",108,0)
 ;I $E(IOST)="C" F XX=1:1:5 W !,TEXT(XX,0)
"RTN","PSXRPPL1",109,0)
 G UNWIND^%ZTER
"RTN","PSXRPPL1",110,0)
 ;
"RTN","PSXRPPL1",111,0)
SBTECME(PSXTP,PSXDV,THRDT,PULLDT) ; - Sumitting prescriptions to EMCE (3rd Party Billing)
"RTN","PSXRPPL1",112,0)
 ;Input: PSXTP  - Type of prescriptions "C" - Controlled Subs / "N" Non-Controlled Subs
"RTN","PSXRPPL1",113,0)
 ;       PSXDV  - Pointer to DIVSION file (#59)
"RTN","PSXRPPL1",114,0)
 ;       THRDT  - T+N when scheduling the THROUGH DATE to run CMOP Transmission
"RTN","PSXRPPL1",115,0)
 ;       PULLDT - T+N+PULL DAYS parameter in the DIVISION file (#59)
"RTN","PSXRPPL1",116,0)
 ;Output:SBTECME- Number of prescriptions submitted to ECME
"RTN","PSXRPPL1",117,0)
 N RX,RFL,SBTECME,PSOLRX,RESP,SDT,XDFN,REC,PSOLRX,DOS
"RTN","PSXRPPL1",118,0)
 I '$$ECMEON^BPSUTIL(PSXDV)!'$$CMOPON^BPSUTIL(PSXDV) Q
"RTN","PSXRPPL1",119,0)
 S (SDT,SBTECME)=0 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL1",120,0)
 F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT)) S XDFN=0 Q:(SDT>PULLDT)!(SDT'>0)  D
"RTN","PSXRPPL1",121,0)
 . F  S XDFN=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT,XDFN)) S REC=0 Q:(XDFN'>0)!(XDFN="")  D
"RTN","PSXRPPL1",122,0)
 . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT,XDFN,REC)) Q:(REC'>0)!(REC="")  D
"RTN","PSXRPPL1",123,0)
 . . . S (PSOLRX,RX)=+$$GET1^DIQ(52.5,REC,.01,"I") I 'RX Q
"RTN","PSXRPPL1",124,0)
 . . . S RFL=$$GET1^DIQ(52.5,REC,9,"I") I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL1",125,0)
 . . . I $$XMIT^PSXBPSUT(REC) D
"RTN","PSXRPPL1",126,0)
 . . . . I SDT>THRDT,'$D(^TMP("PSXEPHDFN",$J,XDFN)) Q
"RTN","PSXRPPL1",127,0)
 . . . . I $$PATCH^XPDUTL("PSO*7.0*148") D
"RTN","PSXRPPL1",128,0)
 . . . . . I $$RETRX^PSOBPSUT(RX,RFL),SDT>DT Q
"RTN","PSXRPPL1",129,0)
 . . . . . I $$FIND^PSOREJUT(RX,RFL) Q
"RTN","PSXRPPL1",130,0)
 . . . . . I '$$RETRX^PSOBPSUT(RX,RFL),$$STATUS^PSOBPSUT(RX,RFL)'="" Q
"RTN","PSXRPPL1",131,0)
 . . . . . S DOS=$$RXFLDT^PSOBPSUT(RX,RFL) I DOS>DT S DOS=DT
"RTN","PSXRPPL1",132,0)
 . . . . . D ECMESND^PSOBPSU1(RX,RFL,DOS,"PC",,1,,,,.RESP)
"RTN","PSXRPPL1",133,0)
 . . . . . I $D(RESP),'RESP S SBTECME=SBTECME+1
"RTN","PSXRPPL1",134,0)
 . . . . . S ^TMP("PSXEPHDFN",$J,XDFN)=""
"RTN","PSXRPPL1",135,0)
 . . . D PSOUL^PSSLOCK(PSOLRX)
"RTN","PSXRPPL1",136,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL1",137,0)
 Q SBTECME
"RTN","PSXRPPL1",138,0)
 ;
"RTN","PSXRPPL1",139,0)
EXIT ;
"RTN","PSXRPPL1",140,0)
 K DFN,PSXDAYS,PSXDTRG,SWITCH,STAT,PRINT,PSXTRANS,REC,REPLY,SDT,X,X1,X2,Y,ANSWER,STATUS,PSXFLAG,PSXPTR,PSXSTAT
"RTN","PSXRPPL1",141,0)
 K DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","PSXRPPL1",142,0)
 Q
"RTN","PSXRSUS")
0^4^B75856096^B75846164
"RTN","PSXRSUS",1,0)
PSXRSUS ;BIR/WPB,BAB,HTW-CMOP Transmission Handler ;15 Dec 2001
"RTN","PSXRSUS",2,0)
 ;;2.0;CMOP;**2,3,24,23,26,28,41,57,48**;11 Apr 97
"RTN","PSXRSUS",3,0)
 ;Reference to ^PS(52.5 supported by DBIA #1978
"RTN","PSXRSUS",4,0)
 ;Reference to ^PS(59   supported by DBIA #1976
"RTN","PSXRSUS",5,0)
 ;Reference to routine DEV1^PSOSULB1 supported by DBIA #2478
"RTN","PSXRSUS",6,0)
 ;
"RTN","PSXRSUS",7,0)
 ;Select CMOP Rx data from File 52.5,build HL7 segments,
"RTN","PSXRSUS",8,0)
 ;and transmit data
"RTN","PSXRSUS",9,0)
 ; This routine is called from PSOSULB1 'Print from Suspense'
"RTN","PSXRSUS",10,0)
 ;
"RTN","PSXRSUS",11,0)
START I '$D(^XUSEC("PSXCMOPMGR",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRSUS",12,0)
 I '$D(^XUSEC("PSX XMIT",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRSUS",13,0)
 S (PSXFLAG,PSXTRANS)=0
"RTN","PSXRSUS",14,0)
 L +^PSX(550.1):3 I '$T W !,"A lock on the RX QUEUE file was not obtainable. A transmission is in progress, try later." Q
"RTN","PSXRSUS",15,0)
 ; lock on 550.1 obtainable, clear flags
"RTN","PSXRSUS",16,0)
 I $D(^PSX(550,"TR","T")) F  S PSXSYS=$O(^PSX(550,"TR","T",0)) Q:PSXSYS'>0  S PSXSTAT="H" D PSXSTAT^PSXRSYU
"RTN","PSXRSUS",17,0)
 D SET^PSXSYS
"RTN","PSXRSUS",18,0)
 S STATUS=$P($G(^PSX(550,+PSXSYS,0)),"^",3) I STATUS'="H" W !,STATUS," no Manual Transmission nor Print CMOP Suspense allowed at this time" G EXIT
"RTN","PSXRSUS",19,0)
QRY W ! K DIR
"RTN","PSXRSUS",20,0)
 S DIR(0)="NAO^1:5",DIR("A")="Select (1, 2, 3, 4, 5):  "
"RTN","PSXRSUS",21,0)
 S DIR("A",1)="  1 - Initiate Standard CMOP Transmission"
"RTN","PSXRSUS",22,0)
 S DIR("A",2)="  2 - Initiate CS CMOP Transmission"
"RTN","PSXRSUS",23,0)
 S DIR("A",3)="  3 - Print Current Division -  Standard CMOP from Suspense"
"RTN","PSXRSUS",24,0)
 S DIR("A",4)="  4 - Print Current Division -  CS CMOP from Suspense"
"RTN","PSXRSUS",25,0)
 S DIR("A",5)="  5 - Standard Print from Suspense"
"RTN","PSXRSUS",26,0)
 S DIR("A",6)=" "
"RTN","PSXRSUS",27,0)
 S DIR("?")="Enter a number between 1 and 5.",DIR("??")="^D MSG1^PSXRHLP" D ^DIR I (Y<0)!($D(DIRUT)) K DIR G EXIT
"RTN","PSXRSUS",28,0)
 W !!,DIR("A",X),!
"RTN","PSXRSUS",29,0)
 S REPLY=X K Y,X
"RTN","PSXRSUS",30,0)
 K DIRUT,DTOUT,DUOUT,DIROUT,DIR
"RTN","PSXRSUS",31,0)
DIRECT ;Set PSXCS, PSXTRANS & PSXFLAG as per user choice
"RTN","PSXRSUS",32,0)
 I REPLY="5" G DEV1^PSOSULB1
"RTN","PSXRSUS",33,0)
 I "24"[REPLY S PSXCS=1
"RTN","PSXRSUS",34,0)
 I "12"[REPLY S (PSXTRANS,PSXFLAG)=1
"RTN","PSXRSUS",35,0)
 I "34"[REPLY S PSXFLAG=2
"RTN","PSXRSUS",36,0)
 K REPLY
"RTN","PSXRSUS",37,0)
 ;
"RTN","PSXRSUS",38,0)
ASK ;Ask 'all divisions y/n' & date range for data transmission & checks for data
"RTN","PSXRSUS",39,0)
 W !
"RTN","PSXRSUS",40,0)
 ;ask all divisions y/n
"RTN","PSXRSUS",41,0)
 I PSXFLAG=2 S PSXDIVML=0 G ASK2
"RTN","PSXRSUS",42,0)
 K DIR S DIR(0)="Y",DIR("A")="Transmit Data for All Divisions ? ",DIR("B")="YES"
"RTN","PSXRSUS",43,0)
 S DIR("?",1)="Yes - Transmit/Print All Divisions"
"RTN","PSXRSUS",44,0)
 S DIR("?")="No  - Transmit/Print One Division:   "_$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSXRSUS",45,0)
 D ^DIR K DIR
"RTN","PSXRSUS",46,0)
 G:(Y<0)!($D(DIRUT)) EXIT
"RTN","PSXRSUS",47,0)
 N PSXDIVML S PSXDIVML=+Y
"RTN","PSXRSUS",48,0)
ASK2 W !
"RTN","PSXRSUS",49,0)
 S %DT="AEX",%DT("A")=$S(PSXFLAG=1:"TRANSMIT CMOP DATA THRU DATE:  ",PSXFLAG=2:"PRINT CMOP LABELS THRU DATE:  ",1:0),%DT("B")="TODAY" D ^%DT K %DT,%DT("A"),%DT("B")
"RTN","PSXRSUS",50,0)
 S:Y<0 PFLAG=1 G:Y<0 EXIT
"RTN","PSXRSUS",51,0)
 S (PDT,PRTDT,TPRTDT)=Y K Y S Y=PDT X ^DD("DD") S PDT=Y K Y
"RTN","PSXRSUS",52,0)
 S CHKDT=$O(^PS(52.5,"AQ","")) I CHKDT>PRTDT W !!,$S(PSXFLAG=1:"NOTHING THRU THIS DATE TO TRANSMIT.",PSXFLAG=2:"NOTHING THRU THIS DATE TO PRINT.",1:0) S PFLAG=1 G EXIT
"RTN","PSXRSUS",53,0)
 I '$O(^PS(52.5,"AQ",0)) W !!,$S(PSXFLAG=1:"NOTHING THRU THIS DATE TO TRANSMIT.",PSXFLAG=2:"NOTHING THRU THIS DATE TO PRINT.",1:0) S PFLAG=1 G EXIT
"RTN","PSXRSUS",54,0)
 ;
"RTN","PSXRSUS",55,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="NO",DIR("A")="Are you sure you wish to continue" D ^DIR K DIR S STOP=Y G:Y=0!($D(DIRUT))!($D(DUOUT)) EXIT K Y
"RTN","PSXRSUS",56,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU S PFLAG=0 I $G(PSXLOCK)>0 G EX1
"RTN","PSXRSUS",57,0)
 ;
"RTN","PSXRSUS",58,0)
DRIV ;calls the remaining routines to build the data for transmission and
"RTN","PSXRSUS",59,0)
 S PSXDAYS=$P(PSOPAR,"^",27),X1=TPRTDT,X2=PSXDAYS D C^%DTC S PSXDTRG=X K X,X1,X2
"RTN","PSXRSUS",60,0)
 S PSXVENDR=$S($P(^PSX(550,+$G(PSXSYS),0),"^")["HINE":"SI BAKER",$P(^PSX(550,+$G(PSXSYS),0),"^")["MURF":"SI BAKER",1:"ELECTROCOM")
"RTN","PSXRSUS",61,0)
 ;set up queue device PSX or printer
"RTN","PSXRSUS",62,0)
 I PSXFLAG=2 D BEGIN^PSXRPPL G:$G(POP) EXIT ;select printer PSLION
"RTN","PSXRSUS",63,0)
QUE ; QUEUE the group/individual PSOSITE jobs for trans or the single job for print labels one division
"RTN","PSXRSUS",64,0)
 S PSXDESC="CMOP "_$S($G(PSXCS)=1:"CS ",1:"NON-CS ")_"Transmission"
"RTN","PSXRSUS",65,0)
 ;
"RTN","PSXRSUS",66,0)
 S ZTDESC=$S(PSXFLAG=1:$G(PSXDESC),PSXFLAG=2:"Print CMOP Suspense",1:"")
"RTN","PSXRSUS",67,0)
 S:PSXFLAG=1 ZTIO="",ZTRTN="TRANDIVS^PSXRSUS"
"RTN","PSXRSUS",68,0)
 S:PSXFLAG=2 ZTIO=PSLION,ZTRTN="PRT^PSXRSUS"
"RTN","PSXRSUS",69,0)
 ;
"RTN","PSXRSUS",70,0)
 S PSXDUZ=DUZ,(PSOINST,PSXSITE)=+$P($G(PSXSYS),U,2)
"RTN","PSXRSUS",71,0)
 S ZTDTH=$H
"RTN","PSXRSUS",72,0)
 F X="PSXDIVML","PSOSITE","PSOLAP","PSOSYS","PSOPAR","PSXSYS","DUZ","PSXTRANS","PSXFLAG","PRTDT","PSOINST","PSXDUZ","PSXSITE","PSXVER" S ZTSAVE(X)=""
"RTN","PSXRSUS",73,0)
 F X="PSXCS","PSXDAYS","PSXDTRG","PSOBARS","PSOBAR1","PSOBAR0","PSOPROP","PSXVENDR","PSLION","TPRTDT" S ZTSAVE(X)=""
"RTN","PSXRSUS",74,0)
 ;
"RTN","PSXRSUS",75,0)
 K ZTSK
"RTN","PSXRSUS",76,0)
 D ^%ZTLOAD ;****TESTING switch to tasking vs foreground
"RTN","PSXRSUS",77,0)
 W:$G(ZTSK) !,"Tasked ",ZTSK H 4
"RTN","PSXRSUS",78,0)
 ;D @ZTRTN ;****TESTING run foreground, comment out above two lines
"RTN","PSXRSUS",79,0)
 Q
"RTN","PSXRSUS",80,0)
 ;
"RTN","PSXRSUS",81,0)
TRANDIVS ;Entry from transmission tasking; loop all divisions / or process only 1
"RTN","PSXRSUS",82,0)
 ;process/transmit all divisions
"RTN","PSXRSUS",83,0)
LOCK ; >>>**** LOCK OF FILE 550.1 ****<<<
"RTN","PSXRSUS",84,0)
 F I=1:1:3 L +^PSX(550.1):10 I $T S I=100
"RTN","PSXRSUS",85,0)
 I I'=100 D CANMSG G EXIT ; could not get a lock in 18 minutes of waiting
"RTN","PSXRSUS",86,0)
 D STOREVAR^PSXRSUS1 ; store critical variables
"RTN","PSXRSUS",87,0)
 I $D(^PSX(550.2,"AQ")) D EN1^PSXRCVRY
"RTN","PSXRSUS",88,0)
 I PSXDIVML N PSOSITE,PSOPAR D  G EXIT
"RTN","PSXRSUS",89,0)
 . S PSOSITE=0 F  S PSOSITE=$O(^PS(59,PSOSITE)) Q:PSOSITE'>0  D
"RTN","PSXRSUS",90,0)
 .. I '$D(^XTMP("PSXAUTOERR")) N $ETRAP,$ESTACK S $ETRAP="D TRAPERR^PSXRSUS"
"RTN","PSXRSUS",91,0)
 .. D RESETVAR^PSXRSUS1 ;retrieve critical variables
"RTN","PSXRSUS",92,0)
 .. S PSOPAR=^PS(59,PSOSITE,1),PRTDT=TPRTDT
"RTN","PSXRSUS",93,0)
 .. S PSXDAYS=$P(PSOPAR,"^",27),X1=PRTDT,X2=PSXDAYS D C^%DTC S PSXDTRG=X K X,X1,X2 ;adjusts variables per divisional parameters.
"RTN","PSXRSUS",94,0)
 .. D TRANS
"RTN","PSXRSUS",95,0)
 ; process a single division
"RTN","PSXRSUS",96,0)
 D
"RTN","PSXRSUS",97,0)
 . I '$D(^XTMP("PSXAUTOERR")) N $ETRAP,$ESTACK S $ETRAP="D TRAPERR^PSXRSUS"
"RTN","PSXRSUS",98,0)
 . D TRANS
"RTN","PSXRSUS",99,0)
 G EXIT
"RTN","PSXRSUS",100,0)
 ;
"RTN","PSXRSUS",101,0)
 ;Called by Taskman to build CMOP PRINT data
"RTN","PSXRSUS",102,0)
TRANS ;;Called by PSXAUTO Taskman to begin CMOP transmissions one division
"RTN","PSXRSUS",103,0)
 S PSXZTSK=$G(ZTSK),PSXERFLG=0,PSXDUZ=DUZ
"RTN","PSXRSUS",104,0)
 S PSXTST=0,PSXIN=$$GET1^DIQ(59,PSOSITE,2004,"I")
"RTN","PSXRSUS",105,0)
 S:PSXIN'=""&(PSXIN<(DT+.1)) PSXTST=1
"RTN","PSXRSUS",106,0)
 Q:PSXTST  ;division inactivated
"RTN","PSXRSUS",107,0)
 ;VMP OIFO BAY PINES;ELR;PSX*2*57 CK IF ALL NECESSARY ELEMENTS OF DIVISION ARE HERE
"RTN","PSXRSUS",108,0)
 NEW PSXDIVER S PSXPRECK=1 D DIV^PSXBLD1 K PSXPRECK I $G(PSXDIVER) Q
"RTN","PSXRSUS",109,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU
"RTN","PSXRSUS",110,0)
 I $G(PSXCS)=1 S X=$$FMADD^XLFDT(DT,+2) S ^XTMP("PSXCS"_PSOSITE,0)=X_U_DT_U_"CMOP CS TRANSMISSION"
"RTN","PSXRSUS",111,0)
 D SDT^PSXRPPL I PSXERFLG=1 S PSXJOB=7 D ^PSXERR
"RTN","PSXRSUS",112,0)
 I '$G(PSXBAT) D OERRCLR Q  ;no RXs found nor loaded into 550.2
"RTN","PSXRSUS",113,0)
RTR ;
"RTN","PSXRSUS",114,0)
 ;Clear 550.1 of entries (INSURE NO MERGE) prior to transmission
"RTN","PSXRSUS",115,0)
 K DIK,DA S DIK="^PSX(550.1,",DA=0 F  S DA=$O(^PSX(550.1,DA)) Q:DA'>0  D ^DIK ;****TESTING
"RTN","PSXRSUS",116,0)
 D EN^PSXBLD ; build entries into 550.1 by alpha patient
"RTN","PSXRSUS",117,0)
 I PSXERFLG=1 S PFLAG=1 D EN^PSXERR
"RTN","PSXRSUS",118,0)
 D EN^PSXRTR ;complete and send mailman message to CMOP
"RTN","PSXRSUS",119,0)
 ;Clear 550.1 of entries (INSURE NO MERGE) after transmission complete
"RTN","PSXRSUS",120,0)
 K DIK,DA S DIK="^PSX(550.1,",DA=0 F  S DA=$O(^PSX(550.1,DA)) Q:DA'>0  D ^DIK ;****TESTING
"RTN","PSXRSUS",121,0)
 D OERRCLR
"RTN","PSXRSUS",122,0)
 Q
"RTN","PSXRSUS",123,0)
PRT ; print from CMOP suspense
"RTN","PSXRSUS",124,0)
 F I=1:1:3 L +^PSX(550.1):60 I $T S I=100
"RTN","PSXRSUS",125,0)
 I I'=100 D CANMSG G EXIT ; could not get a lock in 3 minutes of waiting
"RTN","PSXRSUS",126,0)
 ; set auto error trapping
"RTN","PSXRSUS",127,0)
 D
"RTN","PSXRSUS",128,0)
 . I '$D(^XTMP("PSXAUTOERR")) N $ETRAP,$ESTACK S $ETRAP="D PRTERR^PSXRPPL1"
"RTN","PSXRSUS",129,0)
 . D PRT1
"RTN","PSXRSUS",130,0)
 D OERRCLR
"RTN","PSXRSUS",131,0)
 G EX1
"RTN","PSXRSUS",132,0)
PRT1 S ZTREQ="@",PSXERFLG=0,NFLAG=2
"RTN","PSXRSUS",133,0)
 D SDT^PSXRPPL
"RTN","PSXRSUS",134,0)
 I $G(PSXBAT),$D(^PSX(550.2,PSXBAT,15)) D PRT^PSXRPPL
"RTN","PSXRSUS",135,0)
 I PSXERFLG=1 S PSXJOB=7 D ^PSXERR
"RTN","PSXRSUS",136,0)
 ;remove the batch from the transmission file as it was used only to hold the RXs for printing and not transmission
"RTN","PSXRSUS",137,0)
 I $G(PSXBAT) K DIK,DA S DA=PSXBAT,DIK="^PSX(550.2," D ^DIK K DIK,DA ;****TESTING
"RTN","PSXRSUS",138,0)
 G EX1
"RTN","PSXRSUS",139,0)
EXIT ;
"RTN","PSXRSUS",140,0)
 I $G(POP) S PSXSTAT="H" D PSXSTAT^PSXRSYU ;exit from 'no printer selected' of print labels CMOP
"RTN","PSXRSUS",141,0)
 ;I $G(PFLAG)=1 S PSXSTAT="H" D PSXSTAT^PSXRSYU
"RTN","PSXRSUS",142,0)
 K DA,DIE,DR
"RTN","PSXRSUS",143,0)
 S DA=+PSXSYS,DIE="^PSX(550,",DR="9///@"
"RTN","PSXRSUS",144,0)
 L +^PSX(550,DA):600 D ^DIE L -^PSX(550,DA)
"RTN","PSXRSUS",145,0)
 K DA,DIE,DR
"RTN","PSXRSUS",146,0)
 S PSXSTAT="H" D PSXSTAT^PSXRSYU
"RTN","PSXRSUS",147,0)
EX1 K ^PSX("CMOP TRAN")
"RTN","PSXRSUS",148,0)
 K CNAME,DFN,FILNUM,PNAME,PSXDAYS,PSXDTRG,^TMP($J,"PSX"),J,Y
"RTN","PSXRSUS",149,0)
 K PSXPTR,REC,REF,REPLY,SDT,X,X1,X2,Y,ANSWER,PSXOK,RXNUM,PSXSITE,DIR,DIRUT,DTOUT,DUOUT,DIROUT,PSXCS,TXT,TEXT
"RTN","PSXRSUS",150,0)
 K XDFN,STATUS,PSXSTAT,^TMP($J,"PSXDFN"),PDT,PSXDUZ,SITE,CHKDT,PSXERFLG,PSXRXERR,RXEX,FDATE,PSXJOB,PFLAG,PSXZTSK,PSXVENDR,ORSUB,ORST
"RTN","PSXRSUS",151,0)
 L -^PSX(550.1)
"RTN","PSXRSUS",152,0)
 Q
"RTN","PSXRSUS",153,0)
OERRCLR ; clear any locks left in ^XTMP("OERR-"
"RTN","PSXRSUS",154,0)
 S (ORST,ORSUB)="ORLK-"
"RTN","PSXRSUS",155,0)
 F  S ORSUB=$O(^XTMP(ORSUB)) Q:ORSUB'[ORST  I ^XTMP(ORSUB,0)["CPRS/CMOP" K ^XTMP(ORSUB)
"RTN","PSXRSUS",156,0)
 Q
"RTN","PSXRSUS",157,0)
CANMSG ; lock on 550.1 not achieved send transmission/print cancelled message
"RTN","PSXRSUS",158,0)
 S PSXCS=+$G(PSXCS)
"RTN","PSXRSUS",159,0)
 S XMSUB=$S($G(PSXCS):"",1:"NON-")_"CS Manual Scheduled Transmission Canceled"
"RTN","PSXRSUS",160,0)
 S:PSXFLAG=2 XMSUB="Print CMOP Suspense Cancelled."
"RTN","PSXRSUS",161,0)
 S XMTEXT="TXT("
"RTN","PSXRSUS",162,0)
 S TXT(1,0)="The "_$S($G(PSXCS):"",1:"NON-")_"CS Manual Transmission was cancelled"
"RTN","PSXRSUS",163,0)
 S:PSXFLAG=2 TXT(1,0)="Print from CMOP Suspense was cancelled"
"RTN","PSXRSUS",164,0)
 S TXT(2,0)="It could not obtain a lock on the RX QUEUE file. #550.1"
"RTN","PSXRSUS",165,0)
 S TXT(3,0)="This indicates that a transmission was in progress."
"RTN","PSXRSUS",166,0)
 S TXT(6,0)=" "
"RTN","PSXRSUS",167,0)
 S TXT(7,0)="If you are getting this message frequently, please contact your IRM Group"
"RTN","PSXRSUS",168,0)
 D GRP1^PSXNOTE
"RTN","PSXRSUS",169,0)
 ;S XMY(DUZ)=""
"RTN","PSXRSUS",170,0)
 D ^XMD
"RTN","PSXRSUS",171,0)
 Q
"RTN","PSXRSUS",172,0)
TRAPERR ; trap/process error
"RTN","PSXRSUS",173,0)
 S XXERR=$$EC^%ZOSV
"RTN","PSXRSUS",174,0)
 S PSXDIVNM=$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSXRSUS",175,0)
 ;save an image of the transient file 550.1 for 2 days
"RTN","PSXRSUS",176,0)
 D NOW^%DTC S DTTM=%
"RTN","PSXRSUS",177,0)
 ;VMP OIFO BAY PINES;ELR;PSX*2*57 CHANGE PURGE DAYS TO T+12 FROM T+2
"RTN","PSXRSUS",178,0)
 S X=$$FMADD^XLFDT(DT,+12) S ^XTMP("PSXERR "_DTTM,0)=X_U_DT_U_"CMOP "_XXERR
"RTN","PSXRSUS",179,0)
 M ^XTMP("PSXERR "_DTTM,550.1)=^PSX(550.1)
"RTN","PSXRSUS",180,0)
 S XMSUB="CMOP Error "_PSXDIVNM_" "_$$GET1^DIQ(550.2,+$G(PSXBAT),.01)
"RTN","PSXRSUS",181,0)
 D GRP1^PSXNOTE
"RTN","PSXRSUS",182,0)
 ;S XMY(DUZ)=""
"RTN","PSXRSUS",183,0)
 S XMTEXT="TEXT("
"RTN","PSXRSUS",184,0)
 S TEXT(1,0)=$S($G(PSXCS):"",1:"NON-")_"CS CMOP Transmission encountered the following error. Please investigate"
"RTN","PSXRSUS",185,0)
 S TEXT(2,0)="Division:         "_PSXDIVNM
"RTN","PSXRSUS",186,0)
 S TEXT(3,0)="Type/Batch        "_$S($G(PSXCS):"CS",1:"NON-CS")_" / "_$$GET1^DIQ(550.2,+$G(PSXBAT),.01)
"RTN","PSXRSUS",187,0)
 S TEXT(4,0)="Error:            "_XXERR
"RTN","PSXRSUS",188,0)
 S TEXT(5,0)="The prescriptions have been reset and other divisions' transmissions are continuing."
"RTN","PSXRSUS",189,0)
 S TEXT(6,0)="A copy of the file 550.1 can be found in ^XTMP(""PSXERR "_DTTM_""")"
"RTN","PSXRSUS",190,0)
 D ^%ZTER
"RTN","PSXRSUS",191,0)
 D ^XMD
"RTN","PSXRSUS",192,0)
 ;I $E(IOST)="C" F XX=1:1:5 W !,TEXT(XX,0)
"RTN","PSXRSUS",193,0)
 S PSXXDIV=PSOSITE
"RTN","PSXRSUS",194,0)
 D EN1^PSXRCVRY ;hopefully no errors will be experienced in recovery
"RTN","PSXRSUS",195,0)
 S PSOSITE=PSXXDIV
"RTN","PSXRSUS",196,0)
 G UNWIND^%ZTER
"RTN","PSXRSUS",197,0)
 Q
"RTN","PSXRSUS",198,0)
STOPET ;disable auto error trapping
"RTN","PSXRSUS",199,0)
 S ^XTMP("PSXAUTOERR",0)=DT_U_DT_U_"disable PSX CMOP auto error trapping for today"
"RTN","PSXRSUS",200,0)
 Q
"RTN","PSXRSUS",201,0)
STARTET ;enable auto error trapping
"RTN","PSXRSUS",202,0)
 K ^XTMP("PSXAUTOERR",0)
"RTN","PSXRSUS",203,0)
 Q
"RTN","PSXRXU")
0^3^B28830470^B27958226
"RTN","PSXRXU",1,0)
PSXRXU ;BIR/WPB,HTW,BAB-Remote Facility File Utilities ;14 Dec 2001
"RTN","PSXRXU",2,0)
 ;;2.0;CMOP;**3,28,41,57,48**;11 Apr 97
"RTN","PSXRXU",3,0)
 ; Reference to ^PS(52.5,  supported by DBIA #1978
"RTN","PSXRXU",4,0)
 ; Reference to ^PSOHLSN1  supported by DBIA #2385
"RTN","PSXRXU",5,0)
 ; Reference to ^PSRX(     supported by DBIA #1977
"RTN","PSXRXU",6,0)
 ; Reference to ^XTMP("ORLK-" supported by DBIA #4001
"RTN","PSXRXU",7,0)
 ; Reference to $$GETNDC^PSONDCUT supported by DBIA #4705
"RTN","PSXRXU",8,0)
START ;files transmission data in file 52 52.5 after transmission is sent
"RTN","PSXRXU",9,0)
 ; and clear OERR lock ^XTMP("ORLK-"
"RTN","PSXRXU",10,0)
 ; setup error trap for updating RXs in 52 & 52.5
"RTN","PSXRXU",11,0)
 D
"RTN","PSXRXU",12,0)
 . I '$D(^XTMP("PSXAUTOERR")) N $ETRAP,$ESTACK S $ETRAP="D RXERR^PSXRXU"
"RTN","PSXRXU",13,0)
 . D START1
"RTN","PSXRXU",14,0)
 Q
"RTN","PSXRXU",15,0)
START1 ;
"RTN","PSXRXU",16,0)
 S PSXNM="",PSXMSG=0
"RTN","PSXRXU",17,0)
 F  S PSXNM=$O(^PSX(550.2,PSXBAT,15,"C",PSXNM)) Q:PSXNM']""  D
"RTN","PSXRXU",18,0)
 . S DFN="" F  S DFN=$O(^PSX(550.2,PSXBAT,15,"C",PSXNM,DFN)) Q:DFN'>0  D
"RTN","PSXRXU",19,0)
 .. S RX=0,PSXMSG=PSXMSG+1 F  S RX=$O(^PSX(550.2,PSXBAT,15,"C",PSXNM,DFN,RX)) Q:RX'>0  D
"RTN","PSXRXU",20,0)
 ... S RXF=$O(^PSX(550.2,PSXBAT,15,"C",PSXNM,DFN,RX,0))
"RTN","PSXRXU",21,0)
 ... D FILE
"RTN","PSXRXU",22,0)
 Q
"RTN","PSXRXU",23,0)
F D FILE^DICN
"RTN","PSXRXU",24,0)
 Q
"RTN","PSXRXU",25,0)
FILE ;files the data in the CMOP event multiple of PSRX(
"RTN","PSXRXU",26,0)
 ;update 52, 52.5 called from PSXBLD RX loop
"RTN","PSXRXU",27,0)
 S FILL=+RXF
"RTN","PSXRXU",28,0)
 S:$G(PSXTDT)="" PSXTDT=$P(^PSX(550.2,PSXBAT,0),"^",6)
"RTN","PSXRXU",29,0)
 Q:'$D(^PSRX(RX,0))
"RTN","PSXRXU",30,0)
 ;S PSXMSG=$P(^PSX(550.1,XX,0),"^")
"RTN","PSXRXU",31,0)
 ; update RX, RX:CMOP multiple
"RTN","PSXRXU",32,0)
 ;If Rx status = suspended (5) set to active (0)
"RTN","PSXRXU",33,0)
 I $P(^PSRX(RX,"STA"),U,1)=5 S $P(^PSRX(RX,"STA"),U,1)=0
"RTN","PSXRXU",34,0)
 D EN^PSOHLSN1(RX,"SC","ZU","Transmitted to CMOP","")
"RTN","PSXRXU",35,0)
 S:'$D(^PSRX(RX,4,0)) ^PSRX(RX,4,0)="^52.01DA^^"
"RTN","PSXRXU",36,0)
 K DD,DO,DIE,DA,DIC,DR
"RTN","PSXRXU",37,0)
 ;VMP OIFO BAY PINES;ELR;PSX*2*57 REMOVE LOCK AND UNLOCK OF PSRX(4
"RTN","PSXRXU",38,0)
 ;L +^PSRX(RX,4,0):600 Q:'$T
"RTN","PSXRXU",39,0)
 S DA(1)=RX,DIC="^PSRX("_RX_",4,",DIC(0)="Z",X=PSXBAT
"RTN","PSXRXU",40,0)
 S DIC("DR")="1////"_$G(PSXMSG)_";2////"_$G(FILL)_";3////0;12///"_$S($$PATCH^XPDUTL("PSO*7.0*148"):$$GETNDC^PSONDCUT(RX,FILL),1:"")
"RTN","PSXRXU",41,0)
 D:'$D(^PSRX(RX,4,"B",PSXBAT)) FILE^DICN I 1
"RTN","PSXRXU",42,0)
 E  S DIE=DIC,DR=DIC("DR"),DA=$O(^PSRX(RX,4,"B",PSXBAT,0)) K DIC D ^DIE
"RTN","PSXRXU",43,0)
 K DIC,DA,DR,DIE
"RTN","PSXRXU",44,0)
 ;L -^PSRX(RX,4,0)
"RTN","PSXRXU",45,0)
 K FAC
"RTN","PSXRXU",46,0)
 S FAC=$$GET1^DIQ(550.2,PSXBAT,3)
"RTN","PSXRXU",47,0)
 S COM=$S($G(PSXRTRN):"Re-",1:"")_"Transmitted to "_FAC_" CMOP"
"RTN","PSXRXU",48,0)
 S:$G(FILL)>5 FILL=$G(FILL)+1
"RTN","PSXRXU",49,0)
 S CNT=0 F JJ=0:0 S JJ=$O(^PSRX(RX,"A",JJ)) Q:'JJ  S CNT=JJ
"RTN","PSXRXU",50,0)
 S CNT=CNT+1,^PSRX(RX,"A",0)="^52.3DA^"_CNT_"^"_CNT
"RTN","PSXRXU",51,0)
 ;VMP OIFO BAY PINES;ELR;PSX*2*57 REMOVE LOCK AND UNLOCK OF PSRX
"RTN","PSXRXU",52,0)
 ;L +^PSRX(RX):600 Q:'$T
"RTN","PSXRXU",53,0)
 S ^PSRX(RX,"A",CNT,0)=PSXTDT_"^B^"_DUZ_"^"_$G(FILL)_"^"_COM
"RTN","PSXRXU",54,0)
 ;L -^PSRX(RX)
"RTN","PSXRXU",55,0)
 S IN525=$O(^PS(52.5,"B",RX,""))
"RTN","PSXRXU",56,0)
 I $G(IN525)]"" K DIE,DA,DR,DIE,DIC S DIE="^PS(52.5,",DR="3////X",DA=IN525 L +^PS(52.5,IN525):600 Q:'$T  D ^DIE L -^PS(52.5,IN525) K DA,DIE,DA,IN525
"RTN","PSXRXU",57,0)
 K DIE,DR,DA
"RTN","PSXRXU",58,0)
 S DA=PSXMSG,DIE="^PSX(550.1,",DR="1////5"
"RTN","PSXRXU",59,0)
 L +^PSX(550.1,PSXMSG):600 Q:'$T
"RTN","PSXRXU",60,0)
 D ^DIE L -^PSX(550.1,PSXMSG) K DA,DR,DIE
"RTN","PSXRXU",61,0)
OERR ;clear ^XTMP("ORLK-" if it is CPRS/CMOP
"RTN","PSXRXU",62,0)
 N ORD S ORD=+$P($G(^PSRX(+$G(RX),"OR1")),"^",2)
"RTN","PSXRXU",63,0)
 I ORD,$D(^XTMP("ORLK-"_ORD,0)),^XTMP("ORLK-"_ORD,0)["CPRS/CMOP" K ^XTMP("ORLK-"_ORD)
"RTN","PSXRXU",64,0)
 Q
"RTN","PSXRXU",65,0)
PRINT D NOW^%DTC S DTTM=% S COM="CMOP Suspense Label "_$S($G(^PS(52.5,REC,"P"))=0:"Printed",1:"RePrinted")_$S($G(^PSRX(PTR,"TYPE"))>0:" (PARTIAL)",1:"")
"RTN","PSXRXU",66,0)
 S CNT=0 F JJ=0:0 S JJ=$O(^PSRX(PTR,"A",JJ)) Q:'JJ  S CNT=JJ
"RTN","PSXRXU",67,0)
 S $P(^PSRX(PTR,"STA"),"^",1)=0,^PS(52.5,REC,"P")=1
"RTN","PSXRXU",68,0)
 S CNT=CNT+1,^PSRX(PTR,"A",0)="^52.3DA^"_CNT_"^"_CNT L +^PSRX(PTR):600 Q:'$T  S ^PSRX(PTR,"A",CNT,0)=DTTM_"^S^"_DUZ_"^"_FILL_"^"_COM L -^PSRX(PTR)
"RTN","PSXRXU",69,0)
 K DTTM,%,COM,CNT,JJ
"RTN","PSXRXU",70,0)
 Q
"RTN","PSXRXU",71,0)
SUSPS ;goes through the PS(550.1 file and gets the pointer for each rx in PSRX
"RTN","PSXRXU",72,0)
 ;CMOP Event entry
"RTN","PSXRXU",73,0)
 S XXX=0 F  S XXX=$O(^PSX(550.1,REC,2,XXX)) Q:XXX'>0  D ACLOG
"RTN","PSXRXU",74,0)
 K XXX
"RTN","PSXRXU",75,0)
 Q
"RTN","PSXRXU",76,0)
ACLOG ;
"RTN","PSXRXU",77,0)
 D NOW^%DTC
"RTN","PSXRXU",78,0)
 S PSXPTR=$P($G(^PSX(550.1,REC,2,XXX,0)),U,1)
"RTN","PSXRXU",79,0)
 F RCC=0:0 S RCC=$O(^PSRX(+PSXPTR,4,"B",OLDBAT,RCC)) Q:RCC=""  S RC=RCC
"RTN","PSXRXU",80,0)
 S TRNN=$P($G(^PSRX(+PSXPTR,4,RC,0)),"^",1)
"RTN","PSXRXU",81,0)
 S FAC=$$GET1^DIQ(550.2,TRNN,3)
"RTN","PSXRXU",82,0)
 S FILL=$P($G(^PSRX(+PSXPTR,4,RC,0)),"^",3)
"RTN","PSXRXU",83,0)
 S CNT=0 F JJ=0:0 S JJ=$O(^PSRX(+PSXPTR,"A",JJ)) Q:'JJ  S CNT=JJ
"RTN","PSXRXU",84,0)
 S COMMENT="Retransmitted to "_FAC_" CMOP"
"RTN","PSXRXU",85,0)
 S CNT=CNT+1,^PSRX(+PSXPTR,"A",0)="^52.3DA^"_CNT_"^"_CNT
"RTN","PSXRXU",86,0)
 L +^PSRX(+PSXPTR):600 Q:'$T
"RTN","PSXRXU",87,0)
 S ^PSRX(+PSXPTR,"A",CNT,0)=%_U_"B"_U_DUZ_U_$S(FILL>5:(FILL+1),1:FILL)_U_COMMENT
"RTN","PSXRXU",88,0)
 L -^PSRX(+PSXPTR)
"RTN","PSXRXU",89,0)
 L +^PSRX(+PSXPTR,4,0):600 Q:'$T
"RTN","PSXRXU",90,0)
 S DA(1)=+PSXPTR,DIE="^PSRX("_+PSXPTR_",4,",DA=RC,DR="3////2"
"RTN","PSXRXU",91,0)
 D ^DIE K DIE,DA,DR,DD,DO
"RTN","PSXRXU",92,0)
 S:'$D(^PSRX(+PSXPTR,4,0)) ^PSRX(+PSXPTR,4,0)="^52.01DA^^"
"RTN","PSXRXU",93,0)
 S DA(1)=+PSXPTR,DIC="^PSRX("_+PSXPTR_",4,",DIC(0)="Z",X=PSXBAT
"RTN","PSXRXU",94,0)
 S DIC("DR")="1////"_REC_";2////"_$G(FILL)_";3////0" D F
"RTN","PSXRXU",95,0)
 L -^PSRX(+PSXPTR,4,0)
"RTN","PSXRXU",96,0)
 K PSXPTR,COMMENT,CNT,JJ,FILL,REF,%,DIC,DA,DIE,DR
"RTN","PSXRXU",97,0)
 S DA=REC,DIE="^PSX(550.1,",DR="1////5" L +^PSX(550.1,REC):600 Q:'$T
"RTN","PSXRXU",98,0)
 D ^DIE L -^PSX(550.1,REC) K DIE,DA,DR,FAC,TRNN
"RTN","PSXRXU",99,0)
 Q
"RTN","PSXRXU",100,0)
RXERR ;auto error processing of RX updating 52 & 52.5
"RTN","PSXRXU",101,0)
 S XXERR=$$EC^%ZOSV
"RTN","PSXRXU",102,0)
 S PSXDIVNM=$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSXRXU",103,0)
 ;save an image of the transient file 550.1 for 2 days
"RTN","PSXRXU",104,0)
 D NOW^%DTC S DTTM=%
"RTN","PSXRXU",105,0)
 ;VMP OIFO BAY PINES;ELR;PSX*2*57 CHANE PURGE DATE TO T+12 FROM T+2
"RTN","PSXRXU",106,0)
 S X=$$FMADD^XLFDT(DT,+12) S ^XTMP("PSXERR "_DTTM,0)=X_U_DT_U_"CMOP "_XXERR
"RTN","PSXRXU",107,0)
 M ^XTMP("PSXERR "_DTTM,550.1)=^PSX(550.1)
"RTN","PSXRXU",108,0)
 S XMSUB="CMOP Error "_PSXDIVNM_" "_$$GET1^DIQ(550.2,+$G(PSXBAT),.01)
"RTN","PSXRXU",109,0)
 D GRP1^PSXNOTE
"RTN","PSXRXU",110,0)
 ;S XMY(DUZ)=""
"RTN","PSXRXU",111,0)
 S XMTEXT="TEXT("
"RTN","PSXRXU",112,0)
 S TEXT(1,0)=$S($G(PSXCS):"",1:"NON-")_"CS CMOP transmission encountered the following error. Please investigate"
"RTN","PSXRXU",113,0)
 S TEXT(2,0)="Division:         "_PSXDIVNM
"RTN","PSXRXU",114,0)
 S TEXT(3,0)="Type/Batch        "_$S($G(PSXCS):"CS",1:"NON-CS")_" / "_$$GET1^DIQ(550.2,$G(PSXBAT),.01)
"RTN","PSXRXU",115,0)
 S TEXT(4,0)="Error:            "_XXERR
"RTN","PSXRXU",116,0)
 S TEXT(5,0)=">>>This batch has been sent <<<"
"RTN","PSXRXU",117,0)
 S TEXT(6,0)="Call NVS to investigate which prescriptions have been updated"
"RTN","PSXRXU",118,0)
 S TEXT(7,0)="or not updated in files Prescription #52 & Suspense 52.5 ."
"RTN","PSXRXU",119,0)
 S TEXT(8,0)="A copy of file 550.1 can be found in ^XTMP(""PSXERR "_DTTM_""")"
"RTN","PSXRXU",120,0)
 D ^%ZTER
"RTN","PSXRXU",121,0)
 D ^XMD
"RTN","PSXRXU",122,0)
 G UNWIND^%ZTER
"RTN","PSXVND")
0^2^B36240970^B34942755
"RTN","PSXVND",1,0)
PSXVND ;BIR/WPB,HTW,PWC-File Release Data at the Remote Facility ;10/29/98  2:13 PM
"RTN","PSXVND",2,0)
 ;;2.0;CMOP;**4,5,14,18,19,15,24,23,27,35,39,36,48**;11 Apr 97
"RTN","PSXVND",3,0)
 ;Reference to ^PSDRUG( supported by DBIA #1983
"RTN","PSXVND",4,0)
 ;Reference to ^PSRX( supported by DBIA #1977
"RTN","PSXVND",5,0)
 ;Reference to ^PS(59 supported by DBIA #1976
"RTN","PSXVND",6,0)
 ;Reference to routine CP^PSOCP supported by DBIA #1974
"RTN","PSXVND",7,0)
 ;Reference to routine EN^PSOHLSN1 supported by DBIA #2385
"RTN","PSXVND",8,0)
 ;Reference to routine EN^RGEQ supported by DBIA #2382
"RTN","PSXVND",9,0)
 ;Reference to routine AUTOREL^PSOBPSUT supported by DBIA #4701
"RTN","PSXVND",10,0)
 ;Called by Taskman to handle release data
"RTN","PSXVND",11,0)
EN H 5 S CNT=1,FROM=XMFROM,ZTREQ="@"
"RTN","PSXVND",12,0)
 S DOMAIN=$S($P(XMFROM,"@",2)'="":"@"_$P(FROM,"@",2),$P(XMFROM,"@",2)="":"",1:""),XMSER="S."_XQSOP,TXMZ=XQMSG
"RTN","PSXVND",13,0)
 S (X,SITE,DA)=$$KSP^XUPARAM("INST"),DIC="4",DIQ(0)="IE",DR=99,DIQ="PSXUTIL" D EN^DIQ1 S HERE=$G(PSXUTIL(4,SITE,99,"I")) K DA,DIC,DIQ(0),DR
"RTN","PSXVND",14,0)
 F  X XMREC I $G(XMRG)'="" S TXMRG=XMRG G:$G(XMER)<0 EXIT1 D:$E(XMRG,1,3)["$RX" GET G:$E(XMRG,1,5)["$$END" MAIL D:$E(XMRG,1,4)["$LOT" LOT S:$E(XMRG,1,5)["$$VND" MSNUM=$P(XMRG,"^",3)
"RTN","PSXVND",15,0)
 G EXIT
"RTN","PSXVND",16,0)
GET Q:$G(XMRG)=""!($E(XMRG,1,3)'["$RX")
"RTN","PSXVND",17,0)
 K FACBAT,BAT,NDC,RELDT,STAT,REASON,XFILL,P515A,P515B,%,RR,ALOT,RXP,RXN,FLAG,FILL,RELD,ZSTAT,RTN,CARRIER,PKGID,SHPDT
"RTN","PSXVND",18,0)
 S RX=$P(XMRG,U,2),FACBAT=$P(XMRG,U,3),BAT=$P(FACBAT,"-",2),NDC=$P(XMRG,U,4),RELDT=$P(XMRG,U,5),STAT=$P(XMRG,U,6),REASON=$P($G(XMRG),U,8),XFILL=$P($G(XMRG),U,7)
"RTN","PSXVND",19,0)
 S P515A=$P(XMRG,U,9),P515B=$P(XMRG,U,10),DRG=$P(XMRG,U,12),QTY=$P(XMRG,U,11),CARRIER=$P(XMRG,U,13),PKGID=$P(XMRG,U,14),SHPDT=$P(XMRG,U,15)
"RTN","PSXVND",20,0)
 S FAC=$P(FACBAT,"-",1)
"RTN","PSXVND",21,0)
 Q:FAC'=HERE
"RTN","PSXVND",22,0)
 I '$O(^PSRX("B",RX,0)) S FLAG=2 D TMP Q
"RTN","PSXVND",23,0)
 S XX=0 F  S XX=$O(^PSRX("B",RX,XX)) Q:XX'>0  S (RXP,RXN)=XX,FLAG=0 D
"RTN","PSXVND",24,0)
 .I '$G(BAT) Q
"RTN","PSXVND",25,0)
 .I '$D(^PSRX(RXN,0)) S FLAG=2 D TMP Q
"RTN","PSXVND",26,0)
 .L +^PSRX(RXN):DTIME I '$T S FLAG=2 D TMP Q
"RTN","PSXVND",27,0)
 .I XFILL>0,('$D(^PSRX(RXN,1,XFILL,0))) S FLAG=6 D TMP Q
"RTN","PSXVND",28,0)
 .I XFILL>0,($P(^PSRX(RXP,1,XFILL,0),"^",18)'="") S FLAG=1,RLDT=$P(^PSRX(RXP,1,XFILL,0),"^",18) S:STAT=1&(RLDT=RELDT) FLAG=0 D:FLAG=0 TMP1 Q:'$G(FLAG)  D:FLAG=1 TMP Q
"RTN","PSXVND",29,0)
 .I XFILL=0,($P(^PSRX(RXP,2),"^",13)'="") S FLAG=1,RLDT=$P(^PSRX(RXP,2),"^",13) S:STAT=1&(RELDT=RLDT) FLAG=0 D:FLAG=0 TMP1 Q:'$G(FLAG)  D:FLAG=1 TMP Q
"RTN","PSXVND",30,0)
 .I STAT=2 D
"RTN","PSXVND",31,0)
 ..S RXDRG=$P(^PSRX(RXN,0),"^",6),DFN=$P(^PSRX(RXN,0),"^",2)
"RTN","PSXVND",32,0)
 ..I $G(RXDRG)]"" S CMOPNM=$P($G(^PSDRUG(RXDRG,0)),"^")
"RTN","PSXVND",33,0)
 ..I '$D(^PSDRUG("AQ",RXDRG)) S CMOPYN=1
"RTN","PSXVND",34,0)
 ..I $D(^PSDRUG(RXDRG,"ND")) S CMOPID=$P($G(^PSDRUG(RXDRG,"ND")),"^",10)
"RTN","PSXVND",35,0)
 ..S DIV=$S(XFILL=0:$P(^PSRX(RXN,2),U,9),XFILL>0:$P(^PSRX(RXN,1,XFILL,0),U,9),1:"")
"RTN","PSXVND",36,0)
 ..S ^TMP("PSXCAN1",$J,DIV,DFN,RX)=$G(CMOPNM)_U_$G(CMOPID)_U_$G(QTY)_U_$G(DRG)_U_$G(CMOPYN)_U_REASON_U_$G(XFILL)_U_$G(BAT)
"RTN","PSXVND",37,0)
 ..K CMOPNM,CMOPID,DRG,RXDRG,MATCH,CMOPYN,NDF1,NDF2,P1,P2,PSDDA
"RTN","PSXVND",38,0)
 .I '$D(^PSRX(RXN,4,0)) S FLAG=5 D TMP Q
"RTN","PSXVND",39,0)
 .I '$D(^PSRX(RXN,4,"B",BAT)) S FLAG=4 D TMP Q
"RTN","PSXVND",40,0)
 .I $D(^PSRX(RXN,4,"B",BAT)) S RECD=$O(^PSRX(RXN,4,"B",BAT,"")),FILL=$P($G(^PSRX(RXN,4,RECD,0)),U,3),ZSTAT=$P(^PSRX(RXN,4,RECD,0),U,4)
"RTN","PSXVND",41,0)
 .I ZSTAT=2 S RTN=0 F  S RTN=$O(^PSRX(RXN,4,RTN)) Q:RTN'>0  I $P(^PSRX(RXN,4,RTN,0),U,3)=FILL&($P(^PSRX(RXN,4,RTN,0),U,1)'=BAT) S DA(1)=RXN,DA=RTN,DIE="^PSRX("_DA(1)_",4,",DR="3////2;8////FILLED IN TRANSMISSION "_BAT D ^DIE K DA,DR,DIE
"RTN","PSXVND",42,0)
 .I FILL'=XFILL S FLAG=3 D TMP Q
"RTN","PSXVND",43,0)
 .S PSXREF=FILL
"RTN","PSXVND",44,0)
 .Q:FLAG>0
"RTN","PSXVND",45,0)
 .S PSXXMZ=XMZ
"RTN","PSXVND",46,0)
 .D:$G(STAT)=1
"RTN","PSXVND",47,0)
 ..N PSOPAR,PSOSITE,X D NOW^%DTC
"RTN","PSXVND",48,0)
 ..I $G(PSXREF)>0 S PSOSITE=$P(^PSRX(RXP,1,PSXREF,0),"^",9) G:$G(PSOSITE) PAR
"RTN","PSXVND",49,0)
 ..S PSOSITE=$P(^PSRX(RXP,2),"^",9),PSQUIT=0
"RTN","PSXVND",50,0)
 ..I '$G(PSOSITE) S Z1=0 F  S Z1=$O(^PS(59,Z1)) Q:Z1=""!(Z1="B")  D  Q:PSQUIT
"RTN","PSXVND",51,0)
 ...I $D(^PS(59,Z1,"I"))&($P($G(^PS(59,Z1,"I")),"^")'="") Q:$P($G(^PS(59,Z1,"I")),"^")'>X
"RTN","PSXVND",52,0)
 ...S PSOSITE=Z1,PSQUIT=1
"RTN","PSXVND",53,0)
 ..Q:'$G(PSOSITE)
"RTN","PSXVND",54,0)
PAR ..S PSOPAR=$G(^PS(59,PSOSITE,1))
"RTN","PSXVND",55,0)
 ..I $G(PSXREF)>0 S YY=PSXREF
"RTN","PSXVND",56,0)
 ..I '$G(PSOSITE)!('$D(PSOPAR)) Q
"RTN","PSXVND",57,0)
 ..D CP^PSOCP K YY,X
"RTN","PSXVND",58,0)
 .S XMZ=PSXXMZ
"RTN","PSXVND",59,0)
 .I $G(FILL)="" Q
"RTN","PSXVND",60,0)
 .I $G(STAT)=1 D
"RTN","PSXVND",61,0)
 ..I FILL=0 S DA=RXN,DIE="^PSRX(",DR="31///"_RELDT D ^DIE K DIE,DA,DR
"RTN","PSXVND",62,0)
 ..I FILL>0 S DA(1)=RXN,DA=FILL,DIE="^PSRX("_RXN_",1,",DR="17///"_RELDT_";10.1///"_RELDT D ^DIE K DIE,DR,DA
"RTN","PSXVND",63,0)
 ..I $$VERSION^XPDUTL("OUTPATIENT PHARMACY")<7 S X="RGEQ" X ^%ZOSF("TEST") I  D EN^RGEQ("RX",RXN)  ;CIRN
"RTN","PSXVND",64,0)
 ..I $$VERSION^XPDUTL("OUTPATIENT PHARMACY")>6 D EN^PSOHLSN1(RXN,"ZD")
"RTN","PSXVND",65,0)
 .S DA(1)=RXN,DA=RECD,DIE="^PSRX("_RXN_",4,"
"RTN","PSXVND",66,0)
 .S DR="3////"_$S(STAT=2:3,STAT=1:1,1:"")_";4////"_NDC_";5////"_$S(STAT=2:RELDT,STAT=1:"",1:"")_";8////"_$S(STAT=2:"^S X=$G(REASON)",STAT=1:"",1:"")_";10////"_$G(CARRIER)_";11////"_$G(PKGID)_";9////"_$G(SHPDT)
"RTN","PSXVND",67,0)
 .D ^DIE K DIE,DA,DR
"RTN","PSXVND",68,0)
 .I $$PATCH^XPDUTL("PSO*7.0*148") D AUTOREL^PSOBPSUT(RXN,FILL,RELDT,NDC,"C",$S(STAT=1:"S",1:"U"),60)
"RTN","PSXVND",69,0)
 I $D(^PSRX(RXN)) L -^PSRX(RXN):0
"RTN","PSXVND",70,0)
TMP1 Q:$G(FLAG)'=0!('$G(BAT))
"RTN","PSXVND",71,0)
 D NOW^%DTC S PSXTM=%
"RTN","PSXVND",72,0)
 S ^TMP($J,"PSXREL",CNT)=RX_"^"_PSXTM_"^"_P515A_"^"_P515B_"^"_XFILL_"^"_HERE
"RTN","PSXVND",73,0)
 S CNT=CNT+1
"RTN","PSXVND",74,0)
 Q
"RTN","PSXVND",75,0)
 ;
"RTN","PSXVND",76,0)
LOT S ALOT=$P(XMRG,"|",2)
"RTN","PSXVND",77,0)
 I $G(ALOT)'="" D
"RTN","PSXVND",78,0)
 .K DD,DO
"RTN","PSXVND",79,0)
 .S:'$D(^PSRX(RXN,5,0)) ^PSRX(RXN,5,0)="^52.0401A^^"
"RTN","PSXVND",80,0)
 .F RR=1:1 Q:$P(ALOT,"\",RR)=""  S LOT1=$P(ALOT,"\",RR),LOT=$P(LOT1,"^",1),EXDT=$P(LOT1,"^",2) D
"RTN","PSXVND",81,0)
 ..S DA(1)=RXN,X=LOT,DIC="^PSRX("_RXN_",5,",DIC("DR")="1////"_EXDT_";2////"_XFILL,DIC(0)="Z"
"RTN","PSXVND",82,0)
FF ..D FILE^DICN K DIC("DR"),DIC,DA,LOT,EXDT
"RTN","PSXVND",83,0)
 Q
"RTN","PSXVND",84,0)
TMP S ^TMP($J,"PSXVND",RX)=FLAG_"^"_XFILL_"^"_P515A_"^"_P515B_"^"_HERE_"^"_$S(FLAG=1:RLDT,1:"") Q
"RTN","PSXVND",85,0)
MAIL S XMSUB="CMOP Release Data Acknowledgement",LCNT=1,XMDUZ=.5
"RTN","PSXVND",86,0)
MM D XMZ^XMA2 G:XMZ<1 MM
"RTN","PSXVND",87,0)
 S ^XMB(3.9,XMZ,2,LCNT,0)="$$RTN^"_MSNUM_"^"_HERE,LCNT=LCNT+1
"RTN","PSXVND",88,0)
 F CC=0:0 S CC=$O(^TMP($J,"PSXREL",CC)) Q:CC'>0  D
"RTN","PSXVND",89,0)
 .S ^XMB(3.9,XMZ,2,LCNT,0)="$RX^"_$G(^TMP($J,"PSXREL",CC)),LCNT=LCNT+1
"RTN","PSXVND",90,0)
 S ^XMB(3.9,XMZ,2,LCNT,0)="$$INV"
"RTN","PSXVND",91,0)
 S CC="" F  S CC=$O(^TMP($J,"PSXVND",CC)) Q:CC=""  S RXN=CC D
"RTN","PSXVND",92,0)
 .S LCNT=LCNT+1 D NOW^%DTC S PSXTM=%   ;added for PSX*2*36
"RTN","PSXVND",93,0)
 .S ^XMB(3.9,XMZ,2,LCNT,0)="$RXN"_"^"_RXN_"^"_$G(^TMP($J,"PSXVND",CC))_"^"_PSXTM
"RTN","PSXVND",94,0)
 S ^XMB(3.9,XMZ,2,LCNT+1,0)="$$ENDINV"
"RTN","PSXVND",95,0)
 S ^XMB(3.9,XMZ,2,0)="^3.92A^"_LCNT_U_LCNT_U_DT,XMDUN="CMOP Manager"
"RTN","PSXVND",96,0)
 K XMY S XMY("S.PSXX CMOP SERVER"_DOMAIN)="" D ENT1^XMD
"RTN","PSXVND",97,0)
 ;D ER6^PSXERR Q
"RTN","PSXVND",98,0)
 D:$D(^TMP("PSXCAN1",$J)) CAN^PSXMSGS
"RTN","PSXVND",99,0)
EXIT S XMSER="S.PSXX CMOP SERVER",XMZ=TXMZ D REMSBMSG^XMA1C
"RTN","PSXVND",100,0)
EXIT1 K XMSUB,XMDUZ,XMDUN,XMY,LCNT,XMZ,CC,PSXREL,CNT,Y,X,RR,LOT,LOT1,EXDT,ALOT
"RTN","PSXVND",101,0)
 K RXN,RX,DLAYGO,FACBAT,FILL,FROM,NDC,P514,REASON,RELDT,STAT,XMREC,XMRG
"RTN","PSXVND",102,0)
 K ^TMP($J,"PSXVND"),^TMP($J,"PSXREL"),RLDT,FLAG,TXMRG,PSXXMZ,ZSTAT,PSXTM
"RTN","PSXVND",103,0)
 K XQMSG,XQSOP,XX,ZZZ,%,DAT,DOMAIN,PSXJOB,PSXREF,RECD,RXP,TXMZ,XMZ,XMER
"RTN","PSXVND",104,0)
 K XMFROM,XMSER,BAT,PSXREFL,XFILL,FAC,HERE,P515A,P515B,SITE,MSNUM
"RTN","PSXVND",105,0)
 K DIQ,DIV,QTY,PSXUTIL,SHPDT,Z1,PSQUIT
"RTN","PSXVND",106,0)
 Q
"VER")
8.0^22.0
"BLD",4586,6)
^51
**END**
**END**
