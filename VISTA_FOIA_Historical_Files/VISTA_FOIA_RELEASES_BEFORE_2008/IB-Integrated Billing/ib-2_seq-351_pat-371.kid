Released IB*2*371 SEQ #351
Extracted from mail message
**KIDS**:IB*2.0*371^

**INSTALL NAME**
IB*2.0*371
"BLD",6548,0)
IB*2.0*371^INTEGRATED BILLING^0^3071026^y
"BLD",6548,1,0)
^^1^1^3070613^
"BLD",6548,1,1,0)
E-CLAIMS PLUS ITERATION 3, PART 1
"BLD",6548,4,0)
^9.64PA^355.33^10
"BLD",6548,4,2,0)
2
"BLD",6548,4,2,2,0)
^9.641^2.312^1
"BLD",6548,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",6548,4,2,2,2.312,1,0)
^9.6411^1^16
"BLD",6548,4,2,2,2.312,1,1,0)
SUBSCRIBER ID
"BLD",6548,4,2,2,2.312,1,5.01,0)
PATIENT ID
"BLD",6548,4,2,2,2.312,1,5.02,0)
SUBSCRIBER'S SEC QUALIFIER(1)
"BLD",6548,4,2,2,2.312,1,5.03,0)
SUBSCRIBER'S SEC ID(1)
"BLD",6548,4,2,2,2.312,1,5.04,0)
SUBSCRIBER'S SEC QUALIFIER(2)
"BLD",6548,4,2,2,2.312,1,5.05,0)
SUBSCRIBER'S SEC ID(2)
"BLD",6548,4,2,2,2.312,1,5.06,0)
SUBSCRIBER'S SEC QUALIFIER(3)
"BLD",6548,4,2,2,2.312,1,5.07,0)
SUBSCRIBER'S SEC ID(3)
"BLD",6548,4,2,2,2.312,1,5.08,0)
PATIENT'S SEC QUALIFIER(1)
"BLD",6548,4,2,2,2.312,1,5.09,0)
PATIENT'S SECONDARY ID(1)
"BLD",6548,4,2,2,2.312,1,5.1,0)
PATIENT'S SEC QUALIFIER(2)
"BLD",6548,4,2,2,2.312,1,5.11,0)
PATIENT'S SECONDARY ID(2)
"BLD",6548,4,2,2,2.312,1,5.12,0)
PATIENT'S SEC QUALIFIER(3)
"BLD",6548,4,2,2,2.312,1,5.13,0)
PATIENT'S SECONDARY ID(3)
"BLD",6548,4,2,2,2.312,1,16,0)
PT. RELATIONSHIP TO INSURED
"BLD",6548,4,2,2,2.312,1,17,0)
NAME OF INSURED
"BLD",6548,4,2,222)
y^y^p^^^^n^^n
"BLD",6548,4,2,224)

"BLD",6548,4,36,0)
36
"BLD",6548,4,36,2,0)
^9.641^36^1
"BLD",6548,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",6548,4,36,2,36,1,0)
^9.6411^.183^26
"BLD",6548,4,36,2,36,1,.111,0)
STREET ADDRESS [LINE 1]
"BLD",6548,4,36,2,36,1,.112,0)
STREET ADDRESS [LINE 2]
"BLD",6548,4,36,2,36,1,.113,0)
STREET ADDRESS [LINE 3]
"BLD",6548,4,36,2,36,1,.121,0)
CLAIMS (INPT) STREET ADDRESS 1
"BLD",6548,4,36,2,36,1,.122,0)
CLAIMS (INPT) STREET ADDRESS 2
"BLD",6548,4,36,2,36,1,.123,0)
CLAIMS (INPT) STREET ADDRESS 3
"BLD",6548,4,36,2,36,1,.141,0)
APPEALS ADDRESS ST. [LINE 1]
"BLD",6548,4,36,2,36,1,.142,0)
APPEALS ADDRESS ST. [LINE 2]
"BLD",6548,4,36,2,36,1,.143,0)
APPEALS ADDRESS ST. [LINE 3]
"BLD",6548,4,36,2,36,1,.151,0)
INQUIRY ADDRESS ST. [LINE 1]
"BLD",6548,4,36,2,36,1,.152,0)
INQUIRY ADDRESS ST. [LINE 2]
"BLD",6548,4,36,2,36,1,.153,0)
INQUIRY ADDRESS ST. [LINE 3]
"BLD",6548,4,36,2,36,1,.161,0)
CLAIMS (OPT) STREET ADDRESS 1
"BLD",6548,4,36,2,36,1,.162,0)
CLAIMS (OPT) STREET ADDRESS 2
"BLD",6548,4,36,2,36,1,.163,0)
CLAIMS (OPT) STREET ADDRESS 3
"BLD",6548,4,36,2,36,1,.181,0)
CLAIMS (RX) STREET ADDRESS 1
"BLD",6548,4,36,2,36,1,.182,0)
CLAIMS (RX) STREET ADDRESS 2
"BLD",6548,4,36,2,36,1,.183,0)
CLAIMS (RX) STREET ADDRESS 3
"BLD",6548,4,36,2,36,1,6.01,0)
EDI INST SECONDARY ID QUAL(1) 
"BLD",6548,4,36,2,36,1,6.02,0)
EDI INST SECONDARY ID(1)
"BLD",6548,4,36,2,36,1,6.03,0)
EDI INST SECONDARY ID QUAL(2)
"BLD",6548,4,36,2,36,1,6.04,0)
EDI INST SECONDARY ID(2)
"BLD",6548,4,36,2,36,1,6.05,0)
EDI PROF SECONDARY ID QUAL(1) 
"BLD",6548,4,36,2,36,1,6.06,0)
EDI PROF SECONDARY ID(1)
"BLD",6548,4,36,2,36,1,6.07,0)
EDI PROF SECONDARY ID QUAL(2)
"BLD",6548,4,36,2,36,1,6.08,0)
EDI PROF SECONDARY ID(2)
"BLD",6548,4,36,222)
y^y^p^^^^n^^n
"BLD",6548,4,36,224)

"BLD",6548,4,350.8,0)
350.8
"BLD",6548,4,350.8,222)
n^n^f^^n^^y^o^n
"BLD",6548,4,350.8,224)
I $$INC3508^IBY371PR(Y)
"BLD",6548,4,355.33,0)
355.33
"BLD",6548,4,355.33,2,0)
^9.641^355.33^1
"BLD",6548,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",6548,4,355.33,2,355.33,1,0)
^9.6411^60.06^3
"BLD",6548,4,355.33,2,355.33,1,60.04,0)
SUBSCRIBER ID
"BLD",6548,4,355.33,2,355.33,1,60.06,0)
PT. RELATIONSHIP TO INSURED
"BLD",6548,4,355.33,2,355.33,1,62.01,0)
PATIENT ID
"BLD",6548,4,355.33,222)
y^y^p^^^^n^^n
"BLD",6548,4,355.33,224)

"BLD",6548,4,355.93,0)
355.93
"BLD",6548,4,355.93,2,0)
^9.641^355.93^1
"BLD",6548,4,355.93,2,355.93,0)
IB NON/OTHER VA BILLING PROVIDER  (File-top level)
"BLD",6548,4,355.93,2,355.93,1,0)
^9.6411^.11^1
"BLD",6548,4,355.93,2,355.93,1,.11,0)
X12 TYPE OF FACILITY
"BLD",6548,4,355.93,222)
y^y^p^^^^n^^n
"BLD",6548,4,355.93,224)

"BLD",6548,4,364.5,0)
364.5
"BLD",6548,4,364.5,222)
n^n^f^^y^^y^o^n
"BLD",6548,4,364.5,224)
I $$INCLUDE^IBY371PR(5,Y)
"BLD",6548,4,364.6,0)
364.6
"BLD",6548,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",6548,4,364.6,224)
I $$INCLUDE^IBY371PR(6,Y)
"BLD",6548,4,364.7,0)
364.7
"BLD",6548,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",6548,4,364.7,224)
I $$INCLUDE^IBY371PR(7,Y)
"BLD",6548,4,399,0)
399
"BLD",6548,4,399,2,0)
^9.641^399.047^4
"BLD",6548,4,399,2,399,0)
BILL/CLAIMS  (File-top level)
"BLD",6548,4,399,2,399,1,0)
^9.6411^402^8
"BLD",6548,4,399,2,399,1,122,0)
PRIMARY PROVIDER #
"BLD",6548,4,399,2,399,1,123,0)
SECONDARY PROVIDER #
"BLD",6548,4,399,2,399,1,124,0)
TERTIARY PROVIDER #
"BLD",6548,4,399,2,399,1,245,0)
LAST XRAY DATE
"BLD",6548,4,399,2,399,1,246,0)
DATE OF INITIAL TREATMENT
"BLD",6548,4,399,2,399,1,247,0)
DATE OF ACUTE MANIFESTATION
"BLD",6548,4,399,2,399,1,248,0)
PATIENT CONDITION CODE
"BLD",6548,4,399,2,399,1,402,0)
BILL REMARKS
"BLD",6548,4,399,2,399.0304,0)
PROCEDURES  (sub-file)
"BLD",6548,4,399,2,399.0304,1,0)
^9.6411^50.02^4
"BLD",6548,4,399,2,399.0304,1,50.02,0)
*LAST XRAY DATE
"BLD",6548,4,399,2,399.0304,1,50.04,0)
*LEVEL OF SUBLUXATION
"BLD",6548,4,399,2,399.0304,1,50.05,0)
*CHIRO TREATMENT SERIES NUM
"BLD",6548,4,399,2,399.0304,1,50.06,0)
*CHIROPRACTIC QUANTITY
"BLD",6548,4,399,2,399.041,0)
OCCURRENCE CODE  (sub-file)
"BLD",6548,4,399,2,399.041,1,0)
^9.6411^.04^1
"BLD",6548,4,399,2,399.041,1,.04,0)
END DATE
"BLD",6548,4,399,2,399.047,0)
VALUE CODE  (sub-file)
"BLD",6548,4,399,2,399.047,1,0)
^9.6411^.02^2
"BLD",6548,4,399,2,399.047,1,.01,0)
VALUE CODE
"BLD",6548,4,399,2,399.047,1,.02,0)
VALUE
"BLD",6548,4,399,222)
y^y^p^^^^n^^n
"BLD",6548,4,399,224)

"BLD",6548,4,399.1,0)
399.1
"BLD",6548,4,399.1,2,0)
^9.641^399.1^1
"BLD",6548,4,399.1,2,399.1,0)
MCCR UTILITY  (File-top level)
"BLD",6548,4,399.1,2,399.1,1,0)
^9.6411^1^2
"BLD",6548,4,399.1,2,399.1,1,.26,0)
VALUE CODE OBSOLETE DATE
"BLD",6548,4,399.1,2,399.1,1,1,0)
VALUE CODE HELP TEXT
"BLD",6548,4,399.1,222)
y^y^p^^^^n^^n
"BLD",6548,4,399.1,224)

"BLD",6548,4,"APDD",2,2.312)

"BLD",6548,4,"APDD",2,2.312,1)

"BLD",6548,4,"APDD",2,2.312,5.01)

"BLD",6548,4,"APDD",2,2.312,5.02)

"BLD",6548,4,"APDD",2,2.312,5.03)

"BLD",6548,4,"APDD",2,2.312,5.04)

"BLD",6548,4,"APDD",2,2.312,5.05)

"BLD",6548,4,"APDD",2,2.312,5.06)

"BLD",6548,4,"APDD",2,2.312,5.07)

"BLD",6548,4,"APDD",2,2.312,5.08)

"BLD",6548,4,"APDD",2,2.312,5.09)

"BLD",6548,4,"APDD",2,2.312,5.1)

"BLD",6548,4,"APDD",2,2.312,5.11)

"BLD",6548,4,"APDD",2,2.312,5.12)

"BLD",6548,4,"APDD",2,2.312,5.13)

"BLD",6548,4,"APDD",2,2.312,16)

"BLD",6548,4,"APDD",2,2.312,17)

"BLD",6548,4,"APDD",36,36)

"BLD",6548,4,"APDD",36,36,.111)

"BLD",6548,4,"APDD",36,36,.112)

"BLD",6548,4,"APDD",36,36,.113)

"BLD",6548,4,"APDD",36,36,.121)

"BLD",6548,4,"APDD",36,36,.122)

"BLD",6548,4,"APDD",36,36,.123)

"BLD",6548,4,"APDD",36,36,.141)

"BLD",6548,4,"APDD",36,36,.142)

"BLD",6548,4,"APDD",36,36,.143)

"BLD",6548,4,"APDD",36,36,.151)

"BLD",6548,4,"APDD",36,36,.152)

"BLD",6548,4,"APDD",36,36,.153)

"BLD",6548,4,"APDD",36,36,.161)

"BLD",6548,4,"APDD",36,36,.162)

"BLD",6548,4,"APDD",36,36,.163)

"BLD",6548,4,"APDD",36,36,.181)

"BLD",6548,4,"APDD",36,36,.182)

"BLD",6548,4,"APDD",36,36,.183)

"BLD",6548,4,"APDD",36,36,6.01)

"BLD",6548,4,"APDD",36,36,6.02)

"BLD",6548,4,"APDD",36,36,6.03)

"BLD",6548,4,"APDD",36,36,6.04)

"BLD",6548,4,"APDD",36,36,6.05)

"BLD",6548,4,"APDD",36,36,6.06)

"BLD",6548,4,"APDD",36,36,6.07)

"BLD",6548,4,"APDD",36,36,6.08)

"BLD",6548,4,"APDD",355.33,355.33)

"BLD",6548,4,"APDD",355.33,355.33,60.04)

"BLD",6548,4,"APDD",355.33,355.33,60.06)

"BLD",6548,4,"APDD",355.33,355.33,62.01)

"BLD",6548,4,"APDD",355.93,355.93)

"BLD",6548,4,"APDD",355.93,355.93,.11)

"BLD",6548,4,"APDD",399,399)

"BLD",6548,4,"APDD",399,399,122)

"BLD",6548,4,"APDD",399,399,123)

"BLD",6548,4,"APDD",399,399,124)

"BLD",6548,4,"APDD",399,399,245)

"BLD",6548,4,"APDD",399,399,246)

"BLD",6548,4,"APDD",399,399,247)

"BLD",6548,4,"APDD",399,399,248)

"BLD",6548,4,"APDD",399,399,402)

"BLD",6548,4,"APDD",399,399.0304)

"BLD",6548,4,"APDD",399,399.0304,50.02)

"BLD",6548,4,"APDD",399,399.0304,50.04)

"BLD",6548,4,"APDD",399,399.0304,50.05)

"BLD",6548,4,"APDD",399,399.0304,50.06)

"BLD",6548,4,"APDD",399,399.041)

"BLD",6548,4,"APDD",399,399.041,.04)

"BLD",6548,4,"APDD",399,399.047)

"BLD",6548,4,"APDD",399,399.047,.01)

"BLD",6548,4,"APDD",399,399.047,.02)

"BLD",6548,4,"APDD",399.1,399.1)

"BLD",6548,4,"APDD",399.1,399.1,.26)

"BLD",6548,4,"APDD",399.1,399.1,1)

"BLD",6548,4,"B",2,2)

"BLD",6548,4,"B",36,36)

"BLD",6548,4,"B",350.8,350.8)

"BLD",6548,4,"B",355.33,355.33)

"BLD",6548,4,"B",355.93,355.93)

"BLD",6548,4,"B",364.5,364.5)

"BLD",6548,4,"B",364.6,364.6)

"BLD",6548,4,"B",364.7,364.7)

"BLD",6548,4,"B",399,399)

"BLD",6548,4,"B",399.1,399.1)

"BLD",6548,6.3)
57
"BLD",6548,"INI")
IBY371PR
"BLD",6548,"INID")
^y^y
"BLD",6548,"INIT")
IBY371PO
"BLD",6548,"KRN",0)
^9.67PA^8989.52^19
"BLD",6548,"KRN",.4,0)
.4
"BLD",6548,"KRN",.4,"NM",0)
^9.68A^^
"BLD",6548,"KRN",.401,0)
.401
"BLD",6548,"KRN",.402,0)
.402
"BLD",6548,"KRN",.402,"NM",0)
^9.68A^4^3
"BLD",6548,"KRN",.402,"NM",1,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",6548,"KRN",.402,"NM",3,0)
IBCN PATIENT INSURANCE    FILE #2^2^0
"BLD",6548,"KRN",.402,"NM",4,0)
IB SCREEN8H    FILE #399^399^0
"BLD",6548,"KRN",.402,"NM","B","IB SCREEN8H    FILE #399",4)

"BLD",6548,"KRN",.402,"NM","B","IBCN PATIENT INSURANCE    FILE #2",3)

"BLD",6548,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",1)

"BLD",6548,"KRN",.403,0)
.403
"BLD",6548,"KRN",.5,0)
.5
"BLD",6548,"KRN",.84,0)
.84
"BLD",6548,"KRN",3.6,0)
3.6
"BLD",6548,"KRN",3.8,0)
3.8
"BLD",6548,"KRN",9.2,0)
9.2
"BLD",6548,"KRN",9.8,0)
9.8
"BLD",6548,"KRN",9.8,"NM",0)
^9.68A^54^53
"BLD",6548,"KRN",9.8,"NM",1,0)
IBCNSC^^0^B24159978
"BLD",6548,"KRN",9.8,"NM",2,0)
IBCNSC0^^0^B9881323
"BLD",6548,"KRN",9.8,"NM",3,0)
IBCNSC01^^0^B54638863
"BLD",6548,"KRN",9.8,"NM",4,0)
IBCNSC02^^0^B55602026
"BLD",6548,"KRN",9.8,"NM",5,0)
IBCNSC1^^0^B79495067
"BLD",6548,"KRN",9.8,"NM",6,0)
IBCEF21^^0^B23659732
"BLD",6548,"KRN",9.8,"NM",7,0)
IBCBB2^^0^B43441310
"BLD",6548,"KRN",9.8,"NM",8,0)
IBCEU3^^0^B61357507
"BLD",6548,"KRN",9.8,"NM",9,0)
IBCEF75^^0^B30751276
"BLD",6548,"KRN",9.8,"NM",10,0)
IBCEF78^^0^B4445010
"BLD",6548,"KRN",9.8,"NM",11,0)
IBCBB^^0^B70083781
"BLD",6548,"KRN",9.8,"NM",12,0)
IBCBB9^^0^B9034446
"BLD",6548,"KRN",9.8,"NM",13,0)
IBCSCE^^0^B14634015
"BLD",6548,"KRN",9.8,"NM",14,0)
IBCSC8H^^0^B34954742
"BLD",6548,"KRN",9.8,"NM",15,0)
IBCU7^^0^B54198894
"BLD",6548,"KRN",9.8,"NM",16,0)
IBCSCH^^0^B62017089
"BLD",6548,"KRN",9.8,"NM",17,0)
IBCSC8A^^0^B7456472
"BLD",6548,"KRN",9.8,"NM",18,0)
IBCCC2^^0^B66229263
"BLD",6548,"KRN",9.8,"NM",19,0)
IBCNSU1^^0^B18337578
"BLD",6548,"KRN",9.8,"NM",20,0)
IBCNSP1^^0^B54597105
"BLD",6548,"KRN",9.8,"NM",21,0)
IBCNSM32^^0^B26481916
"BLD",6548,"KRN",9.8,"NM",22,0)
IBCNSU^^0^B38899795
"BLD",6548,"KRN",9.8,"NM",23,0)
IBCNSP3^^0^B35837178
"BLD",6548,"KRN",9.8,"NM",24,0)
IBCU4^^0^B20355514
"BLD",6548,"KRN",9.8,"NM",25,0)
IBCNSP^^0^B42668156
"BLD",6548,"KRN",9.8,"NM",26,0)
IBCNSP0^^0^B32537201
"BLD",6548,"KRN",9.8,"NM",27,0)
IBCNSP01^^0^B32694224
"BLD",6548,"KRN",9.8,"NM",28,0)
IBCNSEH^^0^B5882362
"BLD",6548,"KRN",9.8,"NM",29,0)
IBCBB1^^0^B66788213
"BLD",6548,"KRN",9.8,"NM",30,0)
IBCBB11^^0^B16826545
"BLD",6548,"KRN",9.8,"NM",31,0)
IBCNS1^^0^B35071030
"BLD",6548,"KRN",9.8,"NM",32,0)
IBCBB3^^0^B41352216
"BLD",6548,"KRN",9.8,"NM",33,0)
IBCNEBF^^0^B29002877
"BLD",6548,"KRN",9.8,"NM",34,0)
IBCEU1^^0^B42998590
"BLD",6548,"KRN",9.8,"NM",35,0)
IBCEU6^^0^B10687368
"BLD",6548,"KRN",9.8,"NM",36,0)
IBCVC^^0^B8423325
"BLD",6548,"KRN",9.8,"NM",37,0)
IBCEF11^^0^B51577775
"BLD",6548,"KRN",9.8,"NM",38,0)
IBCNBLE^^0^B69021746
"BLD",6548,"KRN",9.8,"NM",39,0)
IBCNBMI^^0^B54899476
"BLD",6548,"KRN",9.8,"NM",40,0)
IBCNBCD^^0^B35866486
"BLD",6548,"KRN",9.8,"NM",41,0)
IBCNSP2^^0^B24458638
"BLD",6548,"KRN",9.8,"NM",42,0)
IBCNBEE^^0^B45297417
"BLD",6548,"KRN",9.8,"NM",43,0)
IBCNRDV^^0^B66590171
"BLD",6548,"KRN",9.8,"NM",44,0)
IBCVA0^^0^B10445232
"BLD",6548,"KRN",9.8,"NM",45,0)
IBCVA1^^0^B21105006
"BLD",6548,"KRN",9.8,"NM",46,0)
IBCBB5^^0^B8194886
"BLD",6548,"KRN",9.8,"NM",47,0)
IBCEFG1^^0^B26758325
"BLD",6548,"KRN",9.8,"NM",48,0)
IBCEF^^0^B55741819
"BLD",6548,"KRN",9.8,"NM",49,0)
IBCECSA4^^0^B57240644
"BLD",6548,"KRN",9.8,"NM",50,0)
IBCEF1^^0^B58389025
"BLD",6548,"KRN",9.8,"NM",51,0)
IBCEM^^0^B59477823
"BLD",6548,"KRN",9.8,"NM",52,0)
IBCE^^0^B25142847
"BLD",6548,"KRN",9.8,"NM",54,0)
IBCECSA3^^0^B27586417
"BLD",6548,"KRN",9.8,"NM","B","IBCBB",11)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB1",29)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB11",30)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB2",7)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB3",32)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB5",46)

"BLD",6548,"KRN",9.8,"NM","B","IBCBB9",12)

"BLD",6548,"KRN",9.8,"NM","B","IBCCC2",18)

"BLD",6548,"KRN",9.8,"NM","B","IBCE",52)

"BLD",6548,"KRN",9.8,"NM","B","IBCECSA3",54)

"BLD",6548,"KRN",9.8,"NM","B","IBCECSA4",49)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF",48)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF1",50)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF11",37)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF21",6)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF75",9)

"BLD",6548,"KRN",9.8,"NM","B","IBCEF78",10)

"BLD",6548,"KRN",9.8,"NM","B","IBCEFG1",47)

"BLD",6548,"KRN",9.8,"NM","B","IBCEM",51)

"BLD",6548,"KRN",9.8,"NM","B","IBCEU1",34)

"BLD",6548,"KRN",9.8,"NM","B","IBCEU3",8)

"BLD",6548,"KRN",9.8,"NM","B","IBCEU6",35)

"BLD",6548,"KRN",9.8,"NM","B","IBCNBCD",40)

"BLD",6548,"KRN",9.8,"NM","B","IBCNBEE",42)

"BLD",6548,"KRN",9.8,"NM","B","IBCNBLE",38)

"BLD",6548,"KRN",9.8,"NM","B","IBCNBMI",39)

"BLD",6548,"KRN",9.8,"NM","B","IBCNEBF",33)

"BLD",6548,"KRN",9.8,"NM","B","IBCNRDV",43)

"BLD",6548,"KRN",9.8,"NM","B","IBCNS1",31)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSC",1)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSC0",2)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSC01",3)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSC02",4)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSC1",5)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSEH",28)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSM32",21)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP",25)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP0",26)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP01",27)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP1",20)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP2",41)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSP3",23)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSU",22)

"BLD",6548,"KRN",9.8,"NM","B","IBCNSU1",19)

"BLD",6548,"KRN",9.8,"NM","B","IBCSC8A",17)

"BLD",6548,"KRN",9.8,"NM","B","IBCSC8H",14)

"BLD",6548,"KRN",9.8,"NM","B","IBCSCE",13)

"BLD",6548,"KRN",9.8,"NM","B","IBCSCH",16)

"BLD",6548,"KRN",9.8,"NM","B","IBCU4",24)

"BLD",6548,"KRN",9.8,"NM","B","IBCU7",15)

"BLD",6548,"KRN",9.8,"NM","B","IBCVA0",44)

"BLD",6548,"KRN",9.8,"NM","B","IBCVA1",45)

"BLD",6548,"KRN",9.8,"NM","B","IBCVC",36)

"BLD",6548,"KRN",19,0)
19
"BLD",6548,"KRN",19,"NM",0)
^9.68A^^
"BLD",6548,"KRN",19.1,0)
19.1
"BLD",6548,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",6548,"KRN",101,0)
101
"BLD",6548,"KRN",101,"NM",0)
^9.68A^16^16
"BLD",6548,"KRN",101,"NM",1,0)
IBCNSC INS CO BILLING PARAMETERS^^0
"BLD",6548,"KRN",101,"NM",2,0)
IBCNSP UR INFO^^0
"BLD",6548,"KRN",101,"NM",3,0)
IBCNSP EDIT EFFECTIVE DATES^^0
"BLD",6548,"KRN",101,"NM",4,0)
IBCNSP SUBSCRIBER UPDATE^^0
"BLD",6548,"KRN",101,"NM",5,0)
IBCNSP INSURANCE CONTACT INF^^0
"BLD",6548,"KRN",101,"NM",6,0)
IBCNSP EMPLOYER INFO FOR CLAIMS^^0
"BLD",6548,"KRN",101,"NM",7,0)
IBCNSJ EDIT COVERAGE LIMITS^^0
"BLD",6548,"KRN",101,"NM",8,0)
IBCNSP ADD COMMENT^^0
"BLD",6548,"KRN",101,"NM",9,0)
IBCNSP VERIFY COVERAGE^^0
"BLD",6548,"KRN",101,"NM",10,0)
IBCNSC INS CO APPEALS OFFICE^^0
"BLD",6548,"KRN",101,"NM",11,0)
IBCNSC INS CO INQUIRY OFFICE^^0
"BLD",6548,"KRN",101,"NM",12,0)
IBCNSC INS CO MAIN MAILING ADDRESS^^0
"BLD",6548,"KRN",101,"NM",13,0)
IBCNSC INS CO INPT CLAIMS^^0
"BLD",6548,"KRN",101,"NM",14,0)
IBCNSC INS CO OPT CLAIMS^^0
"BLD",6548,"KRN",101,"NM",15,0)
IBCNSC INS CO RX CLAIMS^^0
"BLD",6548,"KRN",101,"NM",16,0)
IBCNSC INS CO ASSOCIATION^^0
"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO APPEALS OFFICE",10)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO ASSOCIATION",16)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO BILLING PARAMETERS",1)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO INPT CLAIMS",13)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO INQUIRY OFFICE",11)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO MAIN MAILING ADDRESS",12)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO OPT CLAIMS",14)

"BLD",6548,"KRN",101,"NM","B","IBCNSC INS CO RX CLAIMS",15)

"BLD",6548,"KRN",101,"NM","B","IBCNSJ EDIT COVERAGE LIMITS",7)

"BLD",6548,"KRN",101,"NM","B","IBCNSP ADD COMMENT",8)

"BLD",6548,"KRN",101,"NM","B","IBCNSP EDIT EFFECTIVE DATES",3)

"BLD",6548,"KRN",101,"NM","B","IBCNSP EMPLOYER INFO FOR CLAIMS",6)

"BLD",6548,"KRN",101,"NM","B","IBCNSP INSURANCE CONTACT INF",5)

"BLD",6548,"KRN",101,"NM","B","IBCNSP SUBSCRIBER UPDATE",4)

"BLD",6548,"KRN",101,"NM","B","IBCNSP UR INFO",2)

"BLD",6548,"KRN",101,"NM","B","IBCNSP VERIFY COVERAGE",9)

"BLD",6548,"KRN",409.61,0)
409.61
"BLD",6548,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",6548,"KRN",771,0)
771
"BLD",6548,"KRN",771,"NM",0)
^9.68A^^
"BLD",6548,"KRN",870,0)
870
"BLD",6548,"KRN",870,"NM",0)
^9.68A^^
"BLD",6548,"KRN",8989.51,0)
8989.51
"BLD",6548,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",6548,"KRN",8989.52,0)
8989.52
"BLD",6548,"KRN",8994,0)
8994
"BLD",6548,"KRN","B",.4,.4)

"BLD",6548,"KRN","B",.401,.401)

"BLD",6548,"KRN","B",.402,.402)

"BLD",6548,"KRN","B",.403,.403)

"BLD",6548,"KRN","B",.5,.5)

"BLD",6548,"KRN","B",.84,.84)

"BLD",6548,"KRN","B",3.6,3.6)

"BLD",6548,"KRN","B",3.8,3.8)

"BLD",6548,"KRN","B",9.2,9.2)

"BLD",6548,"KRN","B",9.8,9.8)

"BLD",6548,"KRN","B",19,19)

"BLD",6548,"KRN","B",19.1,19.1)

"BLD",6548,"KRN","B",101,101)

"BLD",6548,"KRN","B",409.61,409.61)

"BLD",6548,"KRN","B",771,771)

"BLD",6548,"KRN","B",870,870)

"BLD",6548,"KRN","B",8989.51,8989.51)

"BLD",6548,"KRN","B",8989.52,8989.52)

"BLD",6548,"KRN","B",8994,8994)

"BLD",6548,"QUES",0)
^9.62^^
"BLD",6548,"REQB",0)
^9.611^7^7
"BLD",6548,"REQB",1,0)
IB*2.0*361^2
"BLD",6548,"REQB",2,0)
IB*2.0*349^2
"BLD",6548,"REQB",3,0)
IB*2.0*244^2
"BLD",6548,"REQB",4,0)
IB*2.0*240^2
"BLD",6548,"REQB",5,0)
IB*2.0*320^2
"BLD",6548,"REQB",6,0)
IB*2.0*374^2
"BLD",6548,"REQB",7,0)
IB*2.0*363^2
"BLD",6548,"REQB","B","IB*2.0*240",4)

"BLD",6548,"REQB","B","IB*2.0*244",3)

"BLD",6548,"REQB","B","IB*2.0*320",5)

"BLD",6548,"REQB","B","IB*2.0*349",2)

"BLD",6548,"REQB","B","IB*2.0*361",1)

"BLD",6548,"REQB","B","IB*2.0*363",7)

"BLD",6548,"REQB","B","IB*2.0*374",6)

"DATA",350.8,342,0)
IB139^Chiropractic Condition of A or M requires Date of Acute Manifestation.^IB139^1^1
"DATA",350.8,343,0)
IB269^Patient address is incomplete. Address Line 1 is required.^IB269^1^1
"DATA",350.8,344,0)
IB270^Patient address is incomplete. City is required.^IB270^1^1
"DATA",350.8,345,0)
IB271^Patient address is incomplete. State is required.^IB271^1^1
"DATA",350.8,346,0)
IB272^Patient address is incomplete. ZIP is required.^IB272^1^1
"DATA",350.8,347,0)
IB150^Occurrence Code End Date can not be before the start date.^IB150^1^1
"DATA",350.8,348,0)
IB151^Referring provider must have SSN or EIN defined.^IB151^1^1
"DATA",350.8,349,0)
IB152^Operating provider must have SSN or EIN defined.^IB152^1^1
"DATA",350.8,350,0)
IB153^Supervising provider must have SSN or EIN defined.^IB153^1^1
"DATA",350.8,351,0)
IB154^Other provider must have SSN or EIN defined.^IB154^1^1
"DATA",350.8,352,0)
IB155^End dates are required for occurrence spans.^IB155^1^1
"DATA",350.8,353,0)
IB273^Primary insurance subscriber's name is missing or invalid^IB273^1^1
"DATA",350.8,354,0)
IB274^Secondary insurance subscriber's name is missing or invalid^IB274^1^1
"DATA",350.8,355,0)
IB275^Tertiary insurance subscriber's name is missing or invalid^IB275^1^1
"DATA",350.8,356,0)
IB276^Primary insurance subscriber's ID number is missing^IB276^1^1
"DATA",350.8,357,0)
IB277^Secondary insurance subscriber's ID number is missing^IB277^1^1
"DATA",350.8,358,0)
IB278^Tertiary insurance subscriber's ID number is missing^IB278^1^1
"DATA",350.8,359,0)
IB279^Primary insurance missing PT. RELATIONSHIP TO INSURED^IB279^1^1
"DATA",350.8,360,0)
IB280^Secondary insurance missing PT. RELATIONSHIP TO INSURED^IB280^1^1
"DATA",350.8,361,0)
IB281^Tertiary insurance missing PT. RELATIONSHIP TO INSURED^IB281^1^1
"DATA",350.8,362,0)
IB282^Primary insurance subscriber's address line 1 is missing^IB282^1^1
"DATA",350.8,363,0)
IB283^Secondary insurance subscriber's address line 1 is missing^IB283^1^1
"DATA",350.8,364,0)
IB284^Tertiary insurance subscriber's address line 1 is missing^IB284^1^1
"DATA",350.8,365,0)
IB285^Primary insurance subscriber's CITY is missing^IB285^1^1
"DATA",350.8,366,0)
IB286^Secondary insurance subscriber's CITY is missing^IB286^1^1
"DATA",350.8,367,0)
IB287^Tertiary insurance subscriber's CITY is missing^IB287^1^1
"DATA",350.8,368,0)
IB288^Primary insurance subscriber's STATE is missing^IB288^1^1
"DATA",350.8,369,0)
IB289^Secondary insurance subscriber's STATE is missing^IB289^1^1
"DATA",350.8,370,0)
IB290^Tertiary insurance subscriber's STATE is missing^IB290^1^1
"DATA",350.8,371,0)
IB291^Primary insurance subscriber's ZIPCODE is missing^IB291^1^1
"DATA",350.8,372,0)
IB292^Secondary insurance subscriber's ZIPCODE is missing^IB292^1^1
"DATA",350.8,373,0)
IB293^Tertiary insurance subscriber's ZIPCODE is missing^IB293^1^1
"DATA",350.8,374,0)
IB157^One or more Value Codes has no associated Value.^IB157^1^1
"DATA",350.8,375,0)
IB158^One or more of the value codes has an improper format.^IB158^1^1
"DATA",350.8,376,0)
IB137^Date of Initial Chiropractic Treatment is required.^IB137^1^1
"DATA",350.8,377,0)
IB138^Chiropractic Patient Condition Code is required.^IB138^1^1
"DATA",350.8,378,0)
IB146^The MRA secondary claim must be forced to print locally (3 payer claim).^IB146^1^1
"DATA",350.8,379,0)
IB147^This 3 payer claim must be forced to print locally.^IB147^1^1
"DATA",350.8,380,0)
IB205^Medicare ICN/DCN is required - Replacement MRA Claim.^IB205^1^1
"DATA",350.8,381,0)
IB206^FL-80 Remarks are required - Replacement MRA Claim.^IB206^1^1
"DATA",364.5,12,0)
N-VALUE CODES^N^E^G^399^^^
"DATA",364.5,12,1)
N IBI,IBX,Z,Z0 S (IBI,IBX)=0 F  S IBX=$O(^DGCR(399,IBXIEN,"CV",IBX)) Q:'IBX  S Z=$G(^(IBX,0)),Z0=$G(^DGCR(399.1,+Z,0)) I Z0'="" S IBI=IBI+1,IBFL(39,IBI)=$P(Z0,U,2)_U_$P(Z,U,2)_U_$P(Z0,U,12)_U_+Z
"DATA",364.5,12,2)
IBFL(39)
"DATA",364.5,12,3,0)
^^3^3^3070730^
"DATA",364.5,12,3,1,0)
The value codes associated with bill IBXIEN.
"DATA",364.5,12,3,2,0)
Format is code^amount^dollar amt flag (1=amt,0=quantity)^IEN to 399.1
"DATA",364.5,12,3,3,0)
Data is returned in an array IBFL(39,1-n).
"DATA",364.5,20,0)
N-CMS-1500 PURCH SVC TOTAL^N^E^I^399^^^
"DATA",364.5,20,1)
N IBSUB,IBXSAVE,Z S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT") D B24^IBCEF3(.IBXSAVE,IBXIEN) K IBXDATA S (IBXDATA,Z)=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  S IBXDATA=IBXDATA+$P(IBXSAVE(IBSUB,Z),U,11)
"DATA",364.5,20,3,0)
^^12^12^3070524^
"DATA",364.5,20,3,1,0)
Data element created for IB patch 371.  This data element will work for
"DATA",364.5,20,3,2,0)
either the printed 1500 form or the EDI extract.
"DATA",364.5,20,3,3,0)
 
"DATA",364.5,20,3,4,0)
  EDI usage:  SUB-7
"DATA",364.5,20,3,5,0)
print usage:  CMS-1500, box 20
"DATA",364.5,20,3,6,0)
 
"DATA",364.5,20,3,7,0)
It calculates the total purchased service charge amount by totalling up 
"DATA",364.5,20,3,8,0)
all purchased service charges from all line items on the claim. No checks
"DATA",364.5,20,3,9,0)
are made for outside facility or lab or non-lab or anything else.
"DATA",364.5,20,3,10,0)
 
"DATA",364.5,20,3,11,0)
The returned value is not formatted in any way.  It is just a number with
"DATA",364.5,20,3,12,0)
or without a decimal point.  For example, 86.33, 17, 176.69, 4, etc.
"DATA",364.5,21,0)
N-INITIAL TREATMENT^N^F^I^399^DATE OF INITIAL TREATMENT^I^
"DATA",364.5,21,1)

"DATA",364.5,21,3,0)
^^1^1^3070530^
"DATA",364.5,21,3,1,0)
Data element used to retrieve date of initial treatment for the claim.
"DATA",364.5,22,0)
N-ACUTE MANIFESTATION^N^F^I^399^DATE OF ACUTE MANIFESTATION^I^
"DATA",364.5,22,1)

"DATA",364.5,22,3,0)
^^1^1^3070530^
"DATA",364.5,22,3,1,0)
Data element used to retrieve date of acute manifestation for the claim.
"DATA",364.5,29,0)
N-LAST XRAY^N^F^I^399^LAST XRAY DATE^I^
"DATA",364.5,29,1)

"DATA",364.5,29,3,0)
^^1^1^3070530^
"DATA",364.5,29,3,1,0)
Data element used to retrieve date of last X-ray for the claim.
"DATA",364.5,34,0)
N-OTH INSURED ID^N^E^G^399^^^
"DATA",364.5,34,1)
N Z,Z0,Z1,IBZ D F^IBCEF("N-ALL INSURANCE NUMBER","IBZ") S Z=$$COBN^IBCEF(IBXIEN) S Z0=0 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IBXIEN,"I"_Z1)) S Z0=Z0+1,IBXDATA(Z0)=$G(IBZ(Z1))
"DATA",364.5,34,3,0)
^^9^9^3070524^
"DATA",364.5,34,3,1,0)
All id numbers of other insured for bill IBXIEN.
"DATA",364.5,34,3,2,0)
 
"DATA",364.5,34,3,3,0)
Data is returned in an array IBXDATA(n).  This is a group data element and
"DATA",364.5,34,3,4,0)
up to 2 data elements are returned in the IBXDATA(n) array.  If the primary
"DATA",364.5,34,3,5,0)
insurance is the current responsible, the secondary and tertiary insurance
"DATA",364.5,34,3,6,0)
insured's id numbers are returned.  If the secondary insurance is the
"DATA",364.5,34,3,7,0)
current responsible, the primary and tertiary insurance insured's id numbers
"DATA",364.5,34,3,8,0)
are returned. If the tertiary insurance is the current responsible, the
"DATA",364.5,34,3,9,0)
primary and secondary insurance insured's id numbers are returned.
"DATA",364.5,36,0)
N-PATIENT CONDITION CODE^N^F^I^399^PATIENT CONDITION CODE^I^
"DATA",364.5,36,1)

"DATA",364.5,36,3,0)
^^1^1^3070530^
"DATA",364.5,36,3,1,0)
Data element used to retrieve patient condition code for the claim.
"DATA",364.5,55,0)
N-CURR INS FORM LOC 64^N^E^I^399^^^
"DATA",364.5,55,1)
N Z S Z=$$COBN^IBCEF(IBXIEN) D F^IBCEF("N-UB-04 FORM LOCATOR 64"_$P("^B^C",U,Z))
"DATA",364.5,55,3,0)
^364.53^2^2^3071017^^^^
"DATA",364.5,55,3,1,0)
The form locator 64 data for the current insurance company for bill entry
"DATA",364.5,55,3,2,0)
IBXIEN.
"DATA",364.5,198,0)
N-ALL INSURANCE NUMBER^N^E^G^399^^^
"DATA",364.5,198,1)
N Z F Z=1:1:3 I $S(Z=1:1,1:$D(^DGCR(399,IBXIEN,"I"_Z))) S IBXDATA(Z)=$$POLICY^IBCEF(IBXIEN,2,Z)
"DATA",364.5,198,3,0)
^^3^3^3070522^
"DATA",364.5,198,3,1,0)
Extracts the primary, secondary, and tertiary subscriber ID number into
"DATA",364.5,198,3,2,0)
the IBXDATA(1),(2),(3) array for bill entry IBXIEN. This data is pulled
"DATA",364.5,198,3,3,0)
from the SUBSCRIBER ID field (field#1) in the patient insurance file.
"DATA",364.5,282,0)
N-PURCHASED SERVICE TOTAL^N^E^I^399^^^
"DATA",364.5,282,1)
N Z,T S IBXDATA="" I $$ONLAB^IBCEU3(IBXIEN) D:'$D(IBXSAVE("BOX24")) B24^IBCEF3(.IBXSAVE,IBXIEN) K IBXDATA S IBXDATA="",(Z,T)=0 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:'Z  S T=T+$P(IBXSAVE("BOX24",Z),U,11),IBXDATA=T
"DATA",364.5,282,3,0)
^364.53^2^2^3070523^^
"DATA",364.5,282,3,1,0)
If the facility is an outside non-lab facility, this is the total of all
"DATA",364.5,282,3,2,0)
the charges that the VA paid for the line items for this bill.
"DATA",364.6,5,0)
8^N^^30^1^^0^6^17^BLANK^^1^0
"DATA",364.6,41,0)
8^N^^40^1^^0^15^10^BLANK^^1^0
"DATA",364.6,107,0)
8^N^^105^1^^0^9^2^BLANK^0
"DATA",364.6,191,0)
8^N^^35^1^^0^4^2^BLANK^0
"DATA",364.6,195,0)
8^N^^105^1^^0^12^20^BLANK^^1
"DATA",364.6,196,0)
8^N^^20^1^^0^8^30^BLANK^^1
"DATA",364.6,783,0)
8^N^^55^1^^0^7^15^TOTAL PURCHASED SERVICE AMOUNT^0^1
"DATA",364.6,804,0)
8^N^^105^1^^0^13^2^BLANK^^1
"DATA",364.6,806,0)
8^N^^105^1^^0^15^20^BLANK^^1
"DATA",364.6,935,0)
8^N^^96^1^^0^16^2^BLANK^0^1
"DATA",364.6,951,0)
8^N^^96^1^^0^17^5^BLANK^0^1
"DATA",364.6,958,0)
8^N^^185^1^^0^14^4^BLANK^0^1
"DATA",364.6,977,0)
8^N^^180^1^^0^23^8^BLANK^0^1
"DATA",364.6,979,0)
8^N^^180^1^^0^25^3^BLANK^0^1
"DATA",364.6,980,0)
8^N^^180^1^^0^27^15^BLANK^0^1
"DATA",364.6,981,0)
8^N^^180^1^^0^28^9^BLANK^0^1
"DATA",364.6,1000,0)
8^N^^35^1^^0^10^15^BLANK^^1
"DATA",364.6,1002,0)
8^N^^60^1^^0^19^80^CMS-1500 BOX 19 RAW DATA^^1
"DATA",364.6,1004,0)
8^N^^20^1^^0^11^15^BLANK^0^1
"DATA",364.6,1010,0)
8^N^^180^1^^0^26^3^BLANK^0^1
"DATA",364.6,1194,0)
8^N^^55^1^^0^11^3^QUALIFIER - TOT PURCH SVC AMT^0^1
"DATA",364.6,1315,0)
8^N^^20^1^1^0^9^2^BLANK^0^1
"DATA",364.6,1316,0)
8^N^^20^1^^0^7^20^BLANK^0^1
"DATA",364.6,1471,0)
2^N^^1^37^^1^61^9^PURCHASED SVC CHARGE (BX-20/B)^0
"DATA",364.6,1472,0)
2^N^^1^37^^1^70^9^BLANK (BX-20/C)
"DATA",364.6,1800,0)
8^N^^38^1^^0^1^4^RECORD ID 'CI6 '^0^1
"DATA",364.6,1801,0)
8^N^^38^1^^0^2^3^SUBSCRIBER PRIMARY QUALIFIER^0^1
"DATA",364.6,1802,0)
8^N^^38^1^^0^3^30^SUBSCRIBER PRIMARY ID^0^1
"DATA",364.6,1803,0)
8^N^^38^1^^0^4^3^SUBSCRIBER SECONDARY QUAL(1)^0^1
"DATA",364.6,1804,0)
8^N^^38^1^^0^5^30^SUBSCRIBER SECONDARY ID(1)^0^1
"DATA",364.6,1805,0)
8^N^^38^1^^0^6^3^SUBSCRIBER SECONDARY QUAL(2)^0^1
"DATA",364.6,1806,0)
8^N^^38^1^^0^7^30^SUBSCRIBER SECONDARY ID(2)^0^1
"DATA",364.6,1807,0)
8^N^^38^1^^0^8^3^SUBSCRIBER SECONDARY QUAL(3)^0^1
"DATA",364.6,1808,0)
8^N^^38^1^^0^9^30^SUBSCRIBER SECONDARY ID(3)^0^1
"DATA",364.6,1809,0)
8^N^^46^1^^0^1^4^RECORD ID 'PT3 '^0^1
"DATA",364.6,1810,0)
8^N^^46^1^^0^2^3^PATIENT PRIMARY ID QUALIFIER^0^1
"DATA",364.6,1811,0)
8^N^^46^1^^0^3^30^PATIENT PRIMARY ID^0^1
"DATA",364.6,1812,0)
8^N^^46^1^^0^4^3^PATIENT SECONDARY QUAL(1)^0^1
"DATA",364.6,1813,0)
8^N^^46^1^^0^5^30^PATIENT SECONDARY ID(1)^0^1
"DATA",364.6,1814,0)
8^N^^46^1^^0^6^3^PATIENT SECONDARY QUAL(2)^0^1
"DATA",364.6,1815,0)
8^N^^46^1^^0^7^30^PATIENT SECONDARY ID(2)^0^1
"DATA",364.6,1816,0)
8^N^^46^1^^0^8^3^PATIENT SECONDARY QUAL(3)^0^1
"DATA",364.6,1817,0)
8^N^^46^1^^0^9^30^PATIENT SECONDARY ID(3)^0^1
"DATA",364.6,1818,0)
8^N^^37^1^^0^1^4^RECORD ID 'CI5 '^0^1
"DATA",364.6,1819,0)
8^N^^37^1^^0^2^3^QUALIFIER FOR PAYER PRIMARY ID^0^1
"DATA",364.6,1820,0)
8^N^^37^1^^0^3^20^PAYER PRIMARY ID^0^1
"DATA",364.6,1821,0)
8^N^^110^1^^0^11^3^OTHER INSURED ID QUAL^0^1
"DATA",364.6,1822,0)
8^N^^37^1^^0^4^3^QUAL FOR PAYER SECONDARY ID #1^0^1
"DATA",364.6,1823,0)
8^N^^37^1^^0^5^30^PAYER SECONDARY ID #1^0^1
"DATA",364.6,1824,0)
8^N^^37^1^^0^6^3^QUAL FOR PAYER SECONDARY ID #2^0^1
"DATA",364.6,1825,0)
8^N^^37^1^^0^7^30^PAYER SECONDARY ID #2^0^1
"DATA",364.6,1826,0)
8^N^^37^1^^0^8^3^QUAL FOR PAYER SECONDARY ID #3^0^1
"DATA",364.6,1827,0)
8^N^^37^1^^0^9^30^PAYER SECONDARY ID #3^0^1
"DATA",364.6,1828,0)
8^N^^46^1^^0^1.5^^EXTRACT PATIENT ID's^1
"DATA",364.6,1829,0)
8^N^^38^1^^0^1.5^^EXTRACT SUBSCRIBER ID's^1^1
"DATA",364.6,1830,0)
8^N^^114^1^^0^1^4^RECORD ID 'OI6 '^0^1
"DATA",364.6,1831,0)
8^N^^114^1^^0^2^1^PRIM/SECOND/TERTIARY INDICATOR^0^1
"DATA",364.6,1832,0)
8^N^^114^1^^0^3^3^QUAL FOR OTHER PAYER PRIM ID^0^1
"DATA",364.6,1833,0)
8^N^^111^1^^0^4.5^^OTHER PAYER PATIENT ID EXTRACT^1^1
"DATA",364.6,1834,0)
8^N^^114^1^^0^4^30^OTHER PAYER PRIMARY ID^0^1
"DATA",364.6,1835,0)
8^N^^114^1^^0^5^3^QUAL FOR OTHER PAYER SEC ID #1^0^1
"DATA",364.6,1836,0)
8^N^^114^1^^0^6^30^OTHER PAYER SECONDARY ID #1^0^1
"DATA",364.6,1837,0)
8^N^^114^1^^0^7^3^QUAL FOR OTHER PAYER SEC ID #2^0^1
"DATA",364.6,1838,0)
8^N^^114^1^^0^8^30^OTHER PAYER SECONDARY ID #2^0^1
"DATA",364.6,1839,0)
8^N^^114^1^^0^9^3^QUAL FOR OTHER PAYER SEC ID #3^0^1
"DATA",364.6,1840,0)
8^N^^114^1^^0^10^30^OTHER PAYER SECONDARY ID #3^0^1
"DATA",364.6,1841,0)
8^N^^113^1^^0^8.5^^OTH INS SUBSCRIBER ID EXTRACT^1^1
"DATA",364.6,1842,0)
8^N^^51^1^^0^10^3^INITIAL TREATMENT QUALIFIER^0^1
"DATA",364.6,1843,0)
8^N^^51^1^^0^12^3^ACUTE MANIFESTATION QUALIFIER^0^1
"DATA",364.6,1844,0)
8^N^^51^1^^0^11^3^LAST XRAY QUALIFIER^0^1
"DATA",364.6,1845,0)
8^N^^40^1^^0^20^10^PATIENT NAME SUFFIX^0^1
"DATA",364.6,1846,0)
8^N^^60^1^^0^20^3^REMARKS QUALIFIER^0^1
"DATA",364.6,1847,0)
8^N^^60^1^^0^21^80^REMARKS^0^1
"DATA",364.6,1848,0)
8^N^^104.5^1^^0^17.1^^NPI SERV FAC FLAG CLEAN-UP^1^1
"DATA",364.6,1849,0)
8^N^^104.5^1^^0^13.9^^NPI SERV FAC FLAG SET^1^1
"DATA",364.6,1850,0)
8^N^^114^1^^0^6.9^^PAYER SEC ID CHECK^1^1
"DATA",364.6,1851,0)
8^N^^114^1^^0^8.1^^PAYER SEC ID CLEAR^1^1
"DATA",364.6,1852,0)
8^N^^111^1^^0^99.9^^CLEAN UP OI3^1^1
"DATA",364.7,3,0)
5^N^5^^^^N
"DATA",364.7,3,1)
K IBXDATA
"DATA",364.7,4,0)
6^N^4^^^^N
"DATA",364.7,4,1)
S IBXSAVE("IADR")=IBXDATA
"DATA",364.7,4,3,0)
^364.73^1^1^3070703^^^^
"DATA",364.7,4,3,1,0)
Saves off data element in IBXSAVE array.  No output.
"DATA",364.7,5,0)
7^N^5^^^^N
"DATA",364.7,5,1)
S IBXDATA=$TR($P($G(IBXSAVE("IADR")),U,2),"-/.,()'","  ")
"DATA",364.7,5,3,0)
2^364.73^2^2^3070703^^^^
"DATA",364.7,5,3,1,0)
Retrieves insured city data from IBXSAVE array previously extracted.  If
"DATA",364.7,5,3,2,0)
data element's value is null, do not output.
"DATA",364.7,7,0)
9^N^5^^^^N
"DATA",364.7,7,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,4)
"DATA",364.7,7,3,0)
^364.73^2^2^3070703^^^^
"DATA",364.7,7,3,1,0)
Retrieves insured zip code address data from IBXSAVE array previously
"DATA",364.7,7,3,2,0)
extracted.  If data element's value is null, do not output.
"DATA",364.7,14,0)
17^N^5^^^^N
"DATA",364.7,14,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,5)
"DATA",364.7,14,3,0)
^364.73^2^2^3070703^^^^
"DATA",364.7,14,3,1,0)
Retrieves insured address data from IBXSAVE array previously extracted.  If
"DATA",364.7,14,3,2,0)
data element's value is null, do not output.
"DATA",364.7,62,0)
41^N^5^^^^N
"DATA",364.7,62,1)
K IBXDATA
"DATA",364.7,62,3,0)
^^1^1^2960815^^^^
"DATA",364.7,62,3,1,0)
This element is blank.
"DATA",364.7,88,0)
1029^N^5^^^^N^0
"DATA",364.7,88,1)
S IBXDATA=""
"DATA",364.7,88,3,0)
^364.73^1^1^3041214^^^
"DATA",364.7,88,3,1,0)
Set Unit or Basic for Measurement Code
"DATA",364.7,107,0)
89^N^5^^^^N
"DATA",364.7,107,1)
K IBXDATA N Z,Z0 S Z="" F  S Z=$O(IBXSAVE("VALUE",Z)) Q:'Z  S Z0=$$DOLLAR^IBCEFG1($P(IBXSAVE("VALUE",Z),U,2)) S:Z0'="" IBXDATA(Z)=Z0
"DATA",364.7,107,3,0)
^364.73^3^3^3041222^^^^
"DATA",364.7,107,3,1,0)
Each value code amount found in the IBXSAVE array previously extracted is
"DATA",364.7,107,3,2,0)
formatted into a dollar format that is numeric including cents, without the
"DATA",364.7,107,3,3,0)
decimal.
"DATA",364.7,117,0)
99^N^34^^^^N
"DATA",364.7,117,1)
N Z,IBZ M IBZ=IBXDATA K IBXDATA,IBXSAVE("OIID") F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$G(IBZ(Z))'="" S IBZ(Z)=$$NOPUNCT^IBCEF(IBZ(Z)) I IBZ(Z)'="" S IBXDATA(Z)=IBZ(Z),IBXSAVE("OIID",Z)=1
"DATA",364.7,117,3,0)
^^15^15^3070525^
"DATA",364.7,117,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,117,3,2,0)
possible for the data element in the IBXDATA array.  If any other insured
"DATA",364.7,117,3,3,0)
ID data is found, the data is output.
"DATA",364.7,117,3,4,0)
 
"DATA",364.7,117,3,5,0)
OI2-3
"DATA",364.7,117,3,6,0)
2330A/NM109
"DATA",364.7,117,3,7,0)
 
"DATA",364.7,117,3,8,0)
Merge IBZ=IBXDATA which is the list of other payer subscriber ID's 
"DATA",364.7,117,3,9,0)
returned from data element N-OTH INSURED ID.  Loop thru each of the 
"DATA",364.7,117,3,10,0)
possible other payers on the bill (F Z=1,2).  If that other insurance 
"DATA",364.7,117,3,11,0)
exists on the claim and the subscriber ID is not nil after stripping out 
"DATA",364.7,117,3,12,0)
the punctuation marks, then build IBXDATA(Z) array and also save the 
"DATA",364.7,117,3,13,0)
IBXSAVE("OIID",Z) array entry to indicate that a valid ID is being output 
"DATA",364.7,117,3,14,0)
for this other payer Z.  This is so the qualifier in OI2-11 can be output 
"DATA",364.7,117,3,15,0)
because we have the ID#.
"DATA",364.7,125,0)
107^N^5^^^^N
"DATA",364.7,125,1)
K IBXDATA
"DATA",364.7,125,3,0)
^^2^2^3070524^
"DATA",364.7,125,3,1,0)
Removed with patch 371.  Employment status code is not used by HIPAA and
"DATA",364.7,125,3,2,0)
doesn't exist on the UB-04.
"DATA",364.7,130,0)
111^N^56^^^^N
"DATA",364.7,130,1)
N Z,Z1,IBZ M IBZ=IBXDATA K IBXDATA F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$G(IBZ(Z))'="" S IBXDATA(Z)=IBZ(Z)
"DATA",364.7,130,3,0)
^^10^10^3070910^
"DATA",364.7,130,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,130,3,2,0)
possible for the data element in the IBXDATA array.  If any other insurance
"DATA",364.7,130,3,3,0)
form locator 64 data is found, the data is output.
"DATA",364.7,130,3,4,0)
 
"DATA",364.7,130,3,5,0)
This is OI1-10 also known as the ICN/DCN for the MRA secondary claims.  
"DATA",364.7,130,3,6,0)
If there is data here in OI1-10, then we cannot transmit the Other Payer 
"DATA",364.7,130,3,7,0)
secondary ID and qualifier #2.  This is in the OI6 segment, pieces 7 and 
"DATA",364.7,130,3,8,0)
8.  For this calculation, OI6-6.9 is set-up very similar to this OI1-10 
"DATA",364.7,130,3,9,0)
piece to see if there is an ICN/DCN present.   So any changes here should 
"DATA",364.7,130,3,10,0)
also be made to OI6-6.9 as a calculate only field.
"DATA",364.7,133,0)
191^N^5^^^^N
"DATA",364.7,133,1)
K IBXDATA
"DATA",364.7,133,3,0)
^^2^2^3070524^
"DATA",364.7,133,3,1,0)
Removed with patch 371.  Employment status code is not used by HIPAA and 
"DATA",364.7,133,3,2,0)
it doesn't exist on the UB-04.
"DATA",364.7,135,0)
65^N^5^^^^N
"DATA",364.7,135,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,6)
"DATA",364.7,135,3,0)
^364.73^2^2^3070703^^^^
"DATA",364.7,135,3,1,0)
Retrieves insured address line 2 data from IBXSAVE array previously
"DATA",364.7,135,3,2,0)
extracted.  If data element's value is null, do not output.
"DATA",364.7,144,0)
1032^N^21^^^^N^0
"DATA",364.7,144,1)
S IBXDATA=$$DT^IBCEFG1(IBXDATA,"","D8") S:IBXDATA IBXSAVE("INIT-DATE")=1
"DATA",364.7,144,3,0)
^364.73^2^2^3041216^^^^
"DATA",364.7,144,3,1,0)
INITIAL TREATMENT DATE ON CLAIMS INVOLVING
"DATA",364.7,144,3,2,0)
 SPINAL MANIPULATION FOR MEDICARE PART B
"DATA",364.7,186,0)
1033^N^29^^^^N^0
"DATA",364.7,186,1)
S IBXDATA=$$DT^IBCEFG1(IBXDATA,"","D8") S:IBXDATA IBXSAVE("XRAY-DATE")=1
"DATA",364.7,186,3,0)
^364.73^1^1^3041216^^^^
"DATA",364.7,186,3,1,0)
FIND THE LAST XRAY DATE WHEN CLAIM INVOLVES A SPINAL MANIPULATION
"DATA",364.7,188,0)
195^N^5^^^^N
"DATA",364.7,188,1)
K IBXDATA
"DATA",364.7,188,3,0)
^^1^1^3070808^
"DATA",364.7,188,3,1,0)
This data is being moved to OI6[10] with eClaims Iteration III.
"DATA",364.7,195,0)
196^N^5^^^^N
"DATA",364.7,195,1)
K IBXDATA
"DATA",364.7,195,3,0)
^^1^1^3070808^
"DATA",364.7,195,3,1,0)
This data is being moved to CI5[3] with eClaims Iteration III.
"DATA",364.7,197,0)
1037^N^36^^^^N^0
"DATA",364.7,197,3,0)
^364.73^2^2^3041216^^^^
"DATA",364.7,197,3,1,0)
SPINAL MANIP. CONDITION CODE; A = Acute Condition, C = Chronic Condition, D = Non-Acute
"DATA",364.7,197,3,2,0)
E = Non-Life Threatening, F = Routine, G = Symptomatic, M = Acute Manifestation of a Chronic Condition
"DATA",364.7,198,0)
1038^N^22^^^^N^0
"DATA",364.7,198,1)
S IBXDATA=$$DT^IBCEFG1(IBXDATA,"","D8") S:IBXDATA IBXSAVE("ACUT-DATE")=1
"DATA",364.7,198,3,0)
^364.73^2^2^3041216^^^^
"DATA",364.7,198,3,1,0)
Required when sequence 51 piece 7 (Spinal Manipulation Nature of Condifion Code) = A or M on spinal
"DATA",364.7,198,3,2,0)
manipulation claims and the payer is Medicare
"DATA",364.7,205,0)
1041^N^274^^^^N^0
"DATA",364.7,205,1)
I $G(IBXDATA) N Z S Z=$P($G(^DGCR(399,IBXIEN,"U2")),U,11),IBXDATA=$S($$FT^IBCEF(IBXIEN)=3:"FA",$P($G(^IBA(355.93,+IBXDATA,0)),U,11)'="":$P($G(^(0)),U,11),Z&("24"[Z):"LI",1:"FA")
"DATA",364.7,205,3,0)
^364.73^3^3^3041221^^^^
"DATA",364.7,205,3,1,0)
If the service is performed at an outside facility, output the
"DATA",364.7,205,3,2,0)
service facility type of facility if defined for the outside facility.
"DATA",364.7,205,3,3,0)
If none defined, output the default of 'FA' for non-lab and 'LI' for lab.
"DATA",364.7,366,0)
1085^N^5^^^^N
"DATA",364.7,366,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,2)
"DATA",364.7,366,3,0)
^^3^3^3070529^
"DATA",364.7,366,3,1,0)
OI3-6
"DATA",364.7,366,3,2,0)
2330C/NM109
"DATA",364.7,366,3,3,0)
Other payer patient primary ID
"DATA",364.7,368,0)
1086^N^5^^^^N
"DATA",364.7,368,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,3)
"DATA",364.7,368,3,0)
^^3^3^3070529^
"DATA",364.7,368,3,1,0)
OI3-7
"DATA",364.7,368,3,2,0)
2330C/REF(1)/01
"DATA",364.7,368,3,3,0)
Other payer patient secondary ID qualifier #1
"DATA",364.7,369,0)
1087^N^5^^^^N
"DATA",364.7,369,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,4)
"DATA",364.7,369,3,0)
^^3^3^3070529^
"DATA",364.7,369,3,1,0)
OI3-8
"DATA",364.7,369,3,2,0)
2330C/REF(1)/02
"DATA",364.7,369,3,3,0)
Other payer patient secondary ID #1
"DATA",364.7,370,0)
1088^N^5^^^^N
"DATA",364.7,370,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,5)
"DATA",364.7,370,3,0)
^^3^3^3070529^
"DATA",364.7,370,3,1,0)
OI3-9
"DATA",364.7,370,3,2,0)
2330C/REF(2)/01
"DATA",364.7,370,3,3,0)
Other payer patient secondary ID qualifier #2
"DATA",364.7,371,0)
1089^N^5^^^^N
"DATA",364.7,371,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,6)
"DATA",364.7,371,3,0)
^^3^3^3070529^
"DATA",364.7,371,3,1,0)
OI3-10
"DATA",364.7,371,3,2,0)
2330C/REF(2)/02
"DATA",364.7,371,3,3,0)
Other payer patient secondary ID #2
"DATA",364.7,372,0)
1090^N^5^^^^N
"DATA",364.7,372,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,7)
"DATA",364.7,372,3,0)
^^3^3^3070529^
"DATA",364.7,372,3,1,0)
OI3-11
"DATA",364.7,372,3,2,0)
2330C/REF(3)/01
"DATA",364.7,372,3,3,0)
Other payer patient secondary ID qualifier #3
"DATA",364.7,373,0)
1091^N^5^^^^N
"DATA",364.7,373,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,8)
"DATA",364.7,373,3,0)
^^3^3^3070529^
"DATA",364.7,373,3,1,0)
OI3-12
"DATA",364.7,373,3,2,0)
2330C/REF(3)/02
"DATA",364.7,373,3,3,0)
Other payer patient secondary ID #3
"DATA",364.7,391,0)
1194^N^5^^^^N
"DATA",364.7,391,1)
I $G(IBXSAVE("PS$")) S IBXDATA="NE" K IBXSAVE("PS$")
"DATA",364.7,391,3,0)
^364.73^5^5^3070525^^
"DATA",364.7,391,3,1,0)
SUB-11
"DATA",364.7,391,3,2,0)
(P) 2300/AMT(2)/01
"DATA",364.7,391,3,3,0)
Qualifier for the total purchased services charge amount field.  Output 
"DATA",364.7,391,3,4,0)
the qualifier if IBXSAVE("PS$") is true because this indicates a dollar 
"DATA",364.7,391,3,5,0)
amount exists in SUB-7.
"DATA",364.7,460,0)
1294^N^5^^^^N
"DATA",364.7,460,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,3)
"DATA",364.7,460,3,0)
^^3^3^3070529^
"DATA",364.7,460,3,1,0)
OI5-9
"DATA",364.7,460,3,2,0)
2330A/REF(1)/01
"DATA",364.7,460,3,3,0)
Other payer subscriber secondary ID qualifier #1
"DATA",364.7,461,0)
1295^N^5^^^^N
"DATA",364.7,461,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,4)
"DATA",364.7,461,3,0)
^^3^3^3070529^
"DATA",364.7,461,3,1,0)
OI5-10
"DATA",364.7,461,3,2,0)
2330A/REF(1)/02
"DATA",364.7,461,3,3,0)
Other payer subscriber secondary ID #1
"DATA",364.7,462,0)
1296^N^5^^^^N
"DATA",364.7,462,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,5)
"DATA",364.7,462,3,0)
^^3^3^3070529^
"DATA",364.7,462,3,1,0)
OI5-11
"DATA",364.7,462,3,2,0)
2330A/REF(2)/01
"DATA",364.7,462,3,3,0)
Other payer subscriber secondary ID qualifier #2
"DATA",364.7,463,0)
1297^N^5^^^^N
"DATA",364.7,463,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,6)
"DATA",364.7,463,3,0)
^^3^3^3070529^
"DATA",364.7,463,3,1,0)
OI5-12
"DATA",364.7,463,3,2,0)
2330A/REF(2)/02
"DATA",364.7,463,3,3,0)
Other payer subscriber secondary ID #2
"DATA",364.7,464,0)
1298^N^5^^^^N
"DATA",364.7,464,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,7)
"DATA",364.7,464,3,0)
^^3^3^3070529^
"DATA",364.7,464,3,1,0)
OI5-13
"DATA",364.7,464,3,2,0)
2330A/REF(3)/01
"DATA",364.7,464,3,3,0)
Other payer subscriber secondary ID qualifier #3
"DATA",364.7,465,0)
1299^N^5^^^^N
"DATA",364.7,465,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,8)
"DATA",364.7,465,3,0)
^^3^3^3070529^
"DATA",364.7,465,3,1,0)
OI5-14
"DATA",364.7,465,3,2,0)
2330A/REF(3)/02
"DATA",364.7,465,3,3,0)
Other payer subscriber secondary ID #3
"DATA",364.7,800,0)
789^N^5^^^^N
"DATA",364.7,800,1)
S IBXDATA=$P($G(IBXSAVE("IADR")),U,3)
"DATA",364.7,800,3,0)
^364.73^2^2^3070703^^^^
"DATA",364.7,800,3,1,0)
Retrieves insured state data from IBXSAVE array previously extracted.  If
"DATA",364.7,800,3,2,0)
data element's value is null, do not output.
"DATA",364.7,892,0)
783^N^20^^^^N
"DATA",364.7,892,1)
K IBXSAVE("PS$") K:'$G(IBXDATA) IBXDATA I $G(IBXDATA) S IBXDATA=$$DOLLAR^IBCEFG1(IBXDATA),IBXSAVE("PS$")=1
"DATA",364.7,892,3,0)
^364.73^5^5^3070525^^
"DATA",364.7,892,3,1,0)
SUB-7
"DATA",364.7,892,3,2,0)
(P) 2300/AMT(2)/02
"DATA",364.7,892,3,3,0)
Format the total purchased service charges amount into an EDI dollar 
"DATA",364.7,892,3,4,0)
format before transmitting.  Save the IBXSAVE("PS$") flag to indicate 
"DATA",364.7,892,3,5,0)
that a dollar amount exists and that the qualifier in SUB-11 is needed.
"DATA",364.7,900,0)
804^N^5^^^^N
"DATA",364.7,900,1)
K IBXDATA
"DATA",364.7,900,3,0)
^^1^1^3070808^
"DATA",364.7,900,3,1,0)
This data is being moved to OI6[9] with eClaims Iteration III.
"DATA",364.7,902,0)
806^N^5^^^^N
"DATA",364.7,902,1)
K IBXDATA
"DATA",364.7,902,3,0)
^364.73^1^1^3070522^^^
"DATA",364.7,902,3,1,0)
This data is being moved to OI6[4] with eClaims Iteration III.
"DATA",364.7,933,0)
958^N^5^^^^N
"DATA",364.7,933,1)
K IBXDATA
"DATA",364.7,933,3,0)
^^1^1^3001005^^^^
"DATA",364.7,933,3,1,0)
If data element's value is null, do not output.
"DATA",364.7,939,0)
977^N^5^^^^N
"DATA",364.7,939,1)
K IBXDATA
"DATA",364.7,939,3,0)
^^1^1^2991115^^^^
"DATA",364.7,939,3,1,0)
This element is blank.
"DATA",364.7,941,0)
979^N^5^^^^N
"DATA",364.7,941,1)
K IBXDATA
"DATA",364.7,941,3,0)
^^1^1^2990901^^^^
"DATA",364.7,941,3,1,0)
This element is blank.
"DATA",364.7,942,0)
980^N^5^^^^N
"DATA",364.7,942,1)
K IBXDATA
"DATA",364.7,942,3,0)
^^1^1^2990901^^^^
"DATA",364.7,942,3,1,0)
This element is blank.
"DATA",364.7,943,0)
981^N^5^^^^N
"DATA",364.7,943,1)
K IBXDATA
"DATA",364.7,943,3,0)
^^1^1^2990901^^^^
"DATA",364.7,943,3,1,0)
This element is blank.
"DATA",364.7,1001,0)
1000^N^5^^^^N
"DATA",364.7,1001,1)
K IBXDATA
"DATA",364.7,1003,0)
1002^N^148^^^^N
"DATA",364.7,1003,1)
I $$FT^IBCEF(IBXIEN)'=2 K IBXDATA
"DATA",364.7,1003,3,0)
^^1^1^3071004^
"DATA",364.7,1003,3,1,0)
Claim must be a CMS-1500 claim for this to be transmitted.
"DATA",364.7,1005,0)
1004^N^5^^^^N
"DATA",364.7,1005,1)
K IBXDATA
"DATA",364.7,1011,0)
1010^N^5^^^^N
"DATA",364.7,1011,1)
K IBXDATA
"DATA",364.7,1011,3,0)
^^1^1^2990901^^^^
"DATA",364.7,1011,3,1,0)
This element is blank.
"DATA",364.7,1015,0)
1014^N^5
"DATA",364.7,1015,1)
S IBXDATA="371.0      "
"DATA",364.7,1015,3,0)
^364.73^1^1^3060807^^^^
"DATA",364.7,1015,3,1,0)
 
"DATA",364.7,1026,0)
1084^N^5^^^^N
"DATA",364.7,1026,1)
N Z0 K IBXDATA S Z0=0 F  S Z0=$O(IBXSAVE(Z0)) Q:'Z0  S IBXDATA(Z0)=$P(IBXSAVE(Z0),U,1)
"DATA",364.7,1026,3,0)
^^3^3^3070529^
"DATA",364.7,1026,3,1,0)
OI3-5
"DATA",364.7,1026,3,2,0)
2330C/NM108
"DATA",364.7,1026,3,3,0)
Other payer patient primary ID qualifier
"DATA",364.7,1031,0)
1315^N^5
"DATA",364.7,1031,1)
K IBXDATA
"DATA",364.7,1031,3,0)
^^1^1^3070808^
"DATA",364.7,1031,3,1,0)
This data is being moved to CI5[8] with eClaims Iteration III.
"DATA",364.7,1032,0)
1316^N^5^^^^N
"DATA",364.7,1032,1)
K IBXDATA
"DATA",364.7,1032,3,0)
^^1^1^3070808^
"DATA",364.7,1032,3,1,0)
This data is being moved to CI5[9] with eClaims Iteration III.
"DATA",364.7,1038,0)
1320^N^5
"DATA",364.7,1038,1)
K IBXSAVE N A,L,Z S L=0 F  S L=$O(^TMP("IBXDATA",$J,IBXREC,IBXPG,L)) Q:'L  S A=0 X "S Z=2 F  S Z=$O(^TMP(""IBXDATA"",$J,IBXREC,IBXPG,L,Z)) Q:'Z  I $G(^(Z))'="""" S A=1 Q" I 'A K ^TMP("IBXDATA",$J,IBXREC,IBXPG,L)
"DATA",364.7,1038,3,0)
^364.73^2^2^3070925^^^
"DATA",364.7,1038,3,1,0)
Check all the data elements on the record.  If all but the 1st and second
"DATA",364.7,1038,3,2,0)
are null, force a null into the second element so no output occurs.
"DATA",364.7,1054,0)
1336^N^5^^^^N
"DATA",364.7,1054,1)
Q:'$G(IBXSAVE("SERVFACFLAG"))  I $$SUB1OK^IBCEP8A(IBXIEN) S IBXDATA=$P($G(IBXSAVE("ORGNPI")),U,2)
"DATA",364.7,1055,0)
1337^N^5^^^^N
"DATA",364.7,1055,1)
Q:'$G(IBXSAVE("SERVFACFLAG"))  I $$SUB1OK^IBCEP8A(IBXIEN) S IBXDATA=$P($G(IBXSAVE("ORGTAX")),U,2)
"DATA",364.7,1056,0)
1338^N^5^^^^N
"DATA",364.7,1056,1)
Q:'$G(IBXSAVE("SERVFACFLAG"))  N IBZ,Z,ZSVC S Z=IBXIEN D F^IBCEF("N-RENDERING INSTITUTION","IBZ",,Z) S ZSVC=$P($G(IBZ),U,2) S IBXDATA=$S(ZSVC=1:$P($G(IBXSAVE("ORGNPI")),U,2),ZSVC=0:$P($G(IBXSAVE("ORGNPI")),U,1),1:$P($G(IBXSAVE("ORGNPI")),U,3))
"DATA",364.7,1057,0)
1339^N^5^^^^N
"DATA",364.7,1057,1)
Q:'$G(IBXSAVE("SERVFACFLAG"))  N IBZ,Z,ZSVC S Z=IBXIEN D F^IBCEF("N-RENDERING INSTITUTION","IBZ",,Z) S ZSVC=$P($G(IBZ),U,2) S IBXDATA=$S(ZSVC=1:$P($G(IBXSAVE("ORGTAX")),U,2),ZSVC=0:$P($G(IBXSAVE("ORGTAX")),U,1),1:$P($G(IBXSAVE("ORGTAX")),U,3))
"DATA",364.7,1170,0)
1470^N^5^^^^N
"DATA",364.7,1170,1)
I $P($G(^DGCR(399,IBXIEN,"U2")),U,10) S IBXDATA="X"
"DATA",364.7,1170,3,0)
^^4^4^3070604^
"DATA",364.7,1170,3,1,0)
cms-1500, box 20 Outside Lab=YES
"DATA",364.7,1170,3,2,0)
Changed with IB patch 371
"DATA",364.7,1170,3,3,0)
If there is an outside facility on the claim, then an "X" should display 
"DATA",364.7,1170,3,4,0)
in the YES box.
"DATA",364.7,1171,0)
1471^N^20^^^^N
"DATA",364.7,1171,1)
S IBXDATA=$S('IBXDATA:"",1:$$DOL^IBCEF77(IBXDATA,9)) I '$P($G(^DGCR(399,IBXIEN,"U2")),U,10) K IBXDATA
"DATA",364.7,1171,3,0)
^^4^4^3070606^
"DATA",364.7,1171,3,1,0)
Format the amount in 9 characters with 2 decimals.
"DATA",364.7,1171,3,2,0)
 
"DATA",364.7,1171,3,3,0)
If there is not an Outside facility on the claim, then NO gets the "X" 
"DATA",364.7,1171,3,4,0)
and the charges field will be blank.
"DATA",364.7,1172,0)
1472^N^5^^^^N
"DATA",364.7,1172,1)
K IBXDATA
"DATA",364.7,1172,3,0)
^^2^2^3070604^
"DATA",364.7,1172,3,1,0)
The 1500 instruction manual says that this area should always be left 
"DATA",364.7,1172,3,2,0)
blank.
"DATA",364.7,1220,0)
1520^N^5^^^^N
"DATA",364.7,1220,1)
I '$P($G(^DGCR(399,IBXIEN,"U2")),U,10) S IBXDATA="X"
"DATA",364.7,1220,3,0)
^^4^4^3070604^
"DATA",364.7,1220,3,1,0)
CMS-1500, box 20 Outside Lab=NO.
"DATA",364.7,1220,3,2,0)
Changed with IB patch 371
"DATA",364.7,1220,3,3,0)
If there is not an outside facility on the claim, then the NO box gets 
"DATA",364.7,1220,3,4,0)
the "X".
"DATA",364.7,1276,0)
1576^N^25^^^^N
"DATA",364.7,1276,1)
S IBXDATA=$S(IBXDATA'="01":$P($$INSSECID^IBCEF21(IBXIEN,"PAT"),U,2),1:"")
"DATA",364.7,1276,3,0)
^^6^6^3070717^
"DATA",364.7,1276,3,1,0)
This is the patient identification number as assigned by the current 
"DATA",364.7,1276,3,2,0)
payer for this patient.
"DATA",364.7,1276,3,3,0)
 
"DATA",364.7,1276,3,4,0)
The patient ID in box 8a is situational.  It should be used only when the 
"DATA",364.7,1276,3,5,0)
patient is not the subscriber.  Report if number is different from the 
"DATA",364.7,1276,3,6,0)
subscriber ID in FL-60.  FL-60 holds the subscriber ID#.
"DATA",364.7,1307,0)
1607^N^79^^^^N
"DATA",364.7,1307,1)
S:'IBXDATA IBXDATA=9
"DATA",364.7,1307,3,0)
^^11^11^3070815^
"DATA",364.7,1307,3,1,0)
Admission type:
"DATA",364.7,1307,3,2,0)
1 - Emergency
"DATA",364.7,1307,3,3,0)
2 - Urgent
"DATA",364.7,1307,3,4,0)
3 - Elective
"DATA",364.7,1307,3,5,0)
4 - Newborn
"DATA",364.7,1307,3,6,0)
5 - Trauma
"DATA",364.7,1307,3,7,0)
6-8 - Reserved
"DATA",364.7,1307,3,8,0)
9 - Information not available
"DATA",364.7,1307,3,9,0)
 
"DATA",364.7,1307,3,10,0)
esg - 8/15/07 - FL-14 is always required - even for outpatients - so if 
"DATA",364.7,1307,3,11,0)
IBXDATA does not have a value, set it equal to "9" for local printing.
"DATA",364.7,1362,0)
1662^N^197^^^^N
"DATA",364.7,1362,1)
N Z F Z=1:1:3 I $D(IBXDATA(Z)) S IBXDATA(Z)=$$RELATION^IBCEFG1(IBXDATA(Z))
"DATA",364.7,1362,3,0)
^^2^2^3070717^
"DATA",364.7,1362,3,1,0)
IB patch 371
"DATA",364.7,1362,3,2,0)
Convert the VistA codes into HIPAA codes.  Same as the EDI codes.
"DATA",364.7,1457,0)
1757^N^209^^^^N
"DATA",364.7,1457,1)
N Z S:'IBXDATA IBXDATA=DT S Z=$$DT^IBCEFG1(IBXDATA,"","D6"),IBXDATA=$E(Z,3,6)_$E(Z,1,2)
"DATA",364.7,1457,3,0)
^^5^5^3071010^
"DATA",364.7,1457,3,1,0)
Bill creation date in MMDDYY format.
"DATA",364.7,1457,3,2,0)
esg - 10/9/07 - change this from today's date to be the date first 
"DATA",364.7,1457,3,3,0)
printed.  However, if the claim has never been printed, then the FileMan 
"DATA",364.7,1457,3,4,0)
field 12 - DATE FIRST PRINTED won't be populated yet so in this case, 
"DATA",364.7,1457,3,5,0)
default in today's date.
"DATA",364.7,1500,0)
1800^N^131^^^^N
"DATA",364.7,1500,1)
S IBXDATA="CI6 "
"DATA",364.7,1500,3,0)
^364.73^2^2^3070525^^^
"DATA",364.7,1500,3,1,0)
Piece 1 of the CI6 segment.  Hard code the segment name of "CI6 " taking 
"DATA",364.7,1500,3,2,0)
up 4 characters as is the custom.
"DATA",364.7,1501,0)
1801^N^5^^^^N
"DATA",364.7,1501,1)
S IBXDATA=$P(IBXSAVE,U,1)
"DATA",364.7,1501,3,0)
^364.73^4^4^3070525^^
"DATA",364.7,1501,3,1,0)
Only one value for the subscriber primary ID qualifier.  "MI" - member 
"DATA",364.7,1501,3,2,0)
identification number.  Not stored in the VistA database....hardcoded.
"DATA",364.7,1501,3,3,0)
Qualifier for subscriber primary ID
"DATA",364.7,1501,3,4,0)
2010BA/NM108
"DATA",364.7,1502,0)
1802^N^5^^^^N
"DATA",364.7,1502,1)
S IBXDATA=$P(IBXSAVE,U,2) I $$WNRBILL^IBEFUNC(IBXIEN) S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA)
"DATA",364.7,1502,3,0)
^364.73^4^4^3070525^^^
"DATA",364.7,1502,3,1,0)
Subscriber Primary ID#
"DATA",364.7,1502,3,2,0)
2010BA/NM109
"DATA",364.7,1502,3,3,0)
Carry over the old format code from the old CI2-6 field:  If this is the 
"DATA",364.7,1502,3,4,0)
HIC # for MEDICARE, strip the dashes, if any.
"DATA",364.7,1503,0)
1803^N^5^^^^N
"DATA",364.7,1503,1)
S IBXDATA=$P(IBXSAVE,U,3)
"DATA",364.7,1503,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1503,3,1,0)
Subscriber secondary ID qualifier#1
"DATA",364.7,1503,3,2,0)
2010BA/REF(1)/01
"DATA",364.7,1504,0)
1804^N^5^^^^N
"DATA",364.7,1504,1)
S IBXDATA=$P(IBXSAVE,U,4)
"DATA",364.7,1504,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1504,3,1,0)
Subscriber secondary ID #1
"DATA",364.7,1504,3,2,0)
2010BA/REF(1)/02
"DATA",364.7,1505,0)
1805^N^5^^^^N
"DATA",364.7,1505,1)
S IBXDATA=$P(IBXSAVE,U,5)
"DATA",364.7,1505,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1505,3,1,0)
Subscriber secondary ID qualifier #2
"DATA",364.7,1505,3,2,0)
2010BA/REF(2)/01
"DATA",364.7,1506,0)
1806^N^5^^^^N
"DATA",364.7,1506,1)
S IBXDATA=$P(IBXSAVE,U,6)
"DATA",364.7,1506,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1506,3,1,0)
Subscriber secondary ID#2
"DATA",364.7,1506,3,2,0)
2010BA/REF(2)/02
"DATA",364.7,1507,0)
1807^N^5^^^^N
"DATA",364.7,1507,1)
S IBXDATA=$P(IBXSAVE,U,7)
"DATA",364.7,1507,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1507,3,1,0)
Subscriber secondary ID qualifier#3
"DATA",364.7,1507,3,2,0)
2010BA/REF(3)/01
"DATA",364.7,1508,0)
1808^N^5^^^^N
"DATA",364.7,1508,1)
S IBXDATA=$P(IBXSAVE,U,8) K IBXSAVE
"DATA",364.7,1508,3,0)
^364.73^2^2^3070525^^^
"DATA",364.7,1508,3,1,0)
Subscriber secondary ID#3
"DATA",364.7,1508,3,2,0)
2010BA/REF(3)/02
"DATA",364.7,1509,0)
1809^N^131^^^^N
"DATA",364.7,1509,1)
S IBXDATA="PT3 "
"DATA",364.7,1509,3,0)
^^1^1^3070522^
"DATA",364.7,1509,3,1,0)
Piece 1 of the PT3 record using 4 characters with a trailing space
"DATA",364.7,1510,0)
1810^N^5^^^^N
"DATA",364.7,1510,1)
S IBXDATA=$P(IBXSAVE,U,1)
"DATA",364.7,1510,3,0)
^^3^3^3070525^
"DATA",364.7,1510,3,1,0)
Qualifier for patient primary ID
"DATA",364.7,1510,3,2,0)
2010CA/NM108.  When the patient ID exists, the qualifier is hardcoded to
"DATA",364.7,1510,3,3,0)
be "MI" - Member Identification Number.
"DATA",364.7,1511,0)
1811^N^5^^^^N
"DATA",364.7,1511,1)
S IBXDATA=$P(IBXSAVE,U,2)
"DATA",364.7,1511,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1511,3,1,0)
Patient primary ID#
"DATA",364.7,1511,3,2,0)
2010CA/NM109
"DATA",364.7,1512,0)
1812^N^5^^^^N
"DATA",364.7,1512,1)
S IBXDATA=$P(IBXSAVE,U,3)
"DATA",364.7,1512,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1512,3,1,0)
Patient secondary ID qualifier #1
"DATA",364.7,1512,3,2,0)
2010CA/REF(1)/01
"DATA",364.7,1513,0)
1813^N^5^^^^N
"DATA",364.7,1513,1)
S IBXDATA=$P(IBXSAVE,U,4)
"DATA",364.7,1513,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1513,3,1,0)
Patient secondary ID #1
"DATA",364.7,1513,3,2,0)
2010CA/REF(1)/02
"DATA",364.7,1514,0)
1814^N^5^^^^N
"DATA",364.7,1514,1)
S IBXDATA=$P(IBXSAVE,U,5)
"DATA",364.7,1514,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1514,3,1,0)
Patient secondary ID qualifier #2
"DATA",364.7,1514,3,2,0)
2010CA/REF(2)/01
"DATA",364.7,1515,0)
1815^N^5^^^^N
"DATA",364.7,1515,1)
S IBXDATA=$P(IBXSAVE,U,6)
"DATA",364.7,1515,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1515,3,1,0)
Patient secondary ID #2
"DATA",364.7,1515,3,2,0)
2010CA/REF(2)/02
"DATA",364.7,1516,0)
1816^N^5^^^^N
"DATA",364.7,1516,1)
S IBXDATA=$P(IBXSAVE,U,7)
"DATA",364.7,1516,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1516,3,1,0)
Patient secondary ID qualifier #3
"DATA",364.7,1516,3,2,0)
2010CA/REF(3)/01
"DATA",364.7,1517,0)
1817^N^5^^^^N
"DATA",364.7,1517,1)
S IBXDATA=$P(IBXSAVE,U,8) K IBXSAVE
"DATA",364.7,1517,3,0)
^364.73^2^2^3070525^^
"DATA",364.7,1517,3,1,0)
Patient secondary ID #3
"DATA",364.7,1517,3,2,0)
2010CA/REF(3)/02
"DATA",364.7,1518,0)
1818^N^131^^^^N
"DATA",364.7,1518,1)
I $D(IBXDATA) S IBXDATA="CI5 "
"DATA",364.7,1518,3,0)
^^1^1^3070522^
"DATA",364.7,1518,3,1,0)
RECORD ID 'CI5 '
"DATA",364.7,1519,0)
1819^N^5^^^^N
"DATA",364.7,1519,1)
D CLEANUP^IBCEF78(.IBXSAVE),PAYERIDS^IBCEF78(IBXIEN,.IBXSAVE) S IBXDATA=$P($G(IBXSAVE("CI_PID",1)),U)
"DATA",364.7,1519,3,0)
^364.73^1^1^3070529^^
"DATA",364.7,1519,3,1,0)
Hard-coded Primary Payer ID Qualifier
"DATA",364.7,1520,0)
1820^N^5^^^^N
"DATA",364.7,1520,1)
S IBXDATA=$P($G(IBXSAVE("CI_PID",1)),U,2)
"DATA",364.7,1520,3,0)
^364.73^5^5^3070529^^^^
"DATA",364.7,1520,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,1520,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,1520,3,3,0)
element so there is no output.  Positions 1-5 are the id number as
"DATA",364.7,1520,3,4,0)
assigned by ENVOY, positions 6-9 are the claim office id (default if there
"DATA",364.7,1520,3,5,0)
is none is '0000').   Also don't output data element if its value is null.
"DATA",364.7,1521,0)
1821^N^5^^^^N
"DATA",364.7,1521,1)
N Z K IBXDATA F Z=1,2 S:$G(IBXSAVE("OIID",Z)) IBXDATA(Z)="MI" K IBXSAVE("OIID",Z)
"DATA",364.7,1521,3,0)
^^6^6^3070525^
"DATA",364.7,1521,3,1,0)
OI2-11
"DATA",364.7,1521,3,2,0)
2330A/NM108
"DATA",364.7,1521,3,3,0)
Qualifier for other payer subscriber primary ID number.  This is 
"DATA",364.7,1521,3,4,0)
hardcoded to be "MI" for all other payers on the claim that have a valid 
"DATA",364.7,1521,3,5,0)
ID# extracted in OI2-3.  When IBXSAVE("OIID",Z) is true, this means that 
"DATA",364.7,1521,3,6,0)
other payer has a valid subscriber ID.
"DATA",364.7,1522,0)
1822^N^5^^^^N
"DATA",364.7,1522,1)
S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U)
"DATA",364.7,1523,0)
1823^N^5^^^^N
"DATA",364.7,1523,1)
S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,2)
"DATA",364.7,1524,0)
1824^N^5^^^^N
"DATA",364.7,1524,1)
S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,3)
"DATA",364.7,1525,0)
1825^N^5^^^^N
"DATA",364.7,1525,1)
S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,4) D CLEANUP^IBCEF78(.IBXSAVE)
"DATA",364.7,1526,0)
1826^N^5^^^^N
"DATA",364.7,1526,1)
K IBZSAVE D ALLIDS^IBCEF75(IBXIEN,.IBZSAVE,1) S IBXDATA=$G(IBZSAVE("BILLING PRV",IBXIEN,"C",1,2,"PTQ"))
"DATA",364.7,1527,0)
1827^N^5^^^^N
"DATA",364.7,1527,1)
S IBXDATA=$P($G(IBZSAVE("BILLING PRV",IBXIEN,"C",1,2)),U,2) K IBZSAVE
"DATA",364.7,1528,0)
1828^N^5^^^^N
"DATA",364.7,1528,1)
S IBXSAVE=$$INSSECID^IBCEF21(IBXIEN,"PAT")
"DATA",364.7,1528,3,0)
^^2^2^3070525^
"DATA",364.7,1528,3,1,0)
Build the IBXSAVE string to be used in the rest of this segment.  See the 
"DATA",364.7,1528,3,2,0)
routine comments for details about this function call.
"DATA",364.7,1529,0)
1829^N^5^^^^N
"DATA",364.7,1529,1)
S IBXSAVE=$$INSSECID^IBCEF21(IBXIEN)
"DATA",364.7,1529,3,0)
^^2^2^3070525^
"DATA",364.7,1529,3,1,0)
Extract the current insurance subscriber primary and secondary ID's and 
"DATA",364.7,1529,3,2,0)
qualifiers into the IBXSAVE string.  See the routine for comments.
"DATA",364.7,1530,0)
1830^N^131^^^^N
"DATA",364.7,1530,1)
S IBXDATA="OI6 "
"DATA",364.7,1531,0)
1831^N^101^^^^N
"DATA",364.7,1531,1)
N IBZ,Z,Z0 M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)) Q:'Z  S Z0=Z0+1,IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI6 ")
"DATA",364.7,1532,0)
1832^N^5^^^^N
"DATA",364.7,1532,1)
D CLEANUP^IBCEF78(.IBXSAVE),PAYERIDS^IBCEF78(IBXIEN,.IBXSAVE) N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PID",Z)),U)
"DATA",364.7,1533,0)
1833^N^5^^^^N
"DATA",364.7,1533,1)
N Z,Z0,Z1 K IBXDATA,IBXSAVE S Z=$$COBN^IBCEF(IBXIEN),Z0=0 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IBXIEN,"I"_Z1)) S Z0=Z0+1,IBXSAVE(Z0)=$$INSSECID^IBCEF21(IBXIEN,"PAT",Z1)
"DATA",364.7,1533,3,0)
^^10^10^3070529^
"DATA",364.7,1533,3,1,0)
Extract the string(s) of other payer patient ID information into the 
"DATA",364.7,1533,3,2,0)
IBXSAVE(Z0) array.  This will be used to populate the rest of this OI3 
"DATA",364.7,1533,3,3,0)
segment.
"DATA",364.7,1533,3,4,0)
Z is the current payer sequence number (1,2, or 3)
"DATA",364.7,1533,3,5,0)
Z0 is a counter and subscript of IBXSAVE(1) thru IBXSAVE(2)
"DATA",364.7,1533,3,6,0)
Z1 is the loop variable through all possible insurances on the claim
"DATA",364.7,1533,3,7,0)
 
"DATA",364.7,1533,3,8,0)
If Z1'=Z and insurance is defined for insurance# Z1, then increment the 
"DATA",364.7,1533,3,9,0)
Z0 counter variable and store the string returned from the $$INSSECID 
"DATA",364.7,1533,3,10,0)
function.
"DATA",364.7,1534,0)
1834^N^5^^^^N
"DATA",364.7,1534,1)
N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PID",Z)),U,2)
"DATA",364.7,1535,0)
1835^N^5^^^^N
"DATA",364.7,1535,1)
N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U)
"DATA",364.7,1536,0)
1836^N^5^^^^N
"DATA",364.7,1536,1)
N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U,2)
"DATA",364.7,1537,0)
1837^N^5^^^^N
"DATA",364.7,1537,1)
N Z K IBXDATA F Z=1,2 Q:$D(IBXSAVE("ICN/DCN",Z))  S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U,3)
"DATA",364.7,1538,0)
1838^N^5^^^^N
"DATA",364.7,1538,1)
N Z K IBXDATA F Z=1,2 Q:$D(IBXSAVE("ICN/DCN",Z))  S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U,4)
"DATA",364.7,1539,0)
1839^N^5^^^^N
"DATA",364.7,1539,1)
D CLEANUP^IBCEF75(.IBXSAVE) D ALLIDS^IBCEF75(IBXIEN,.IBXSAVE,1) K IBXDATA N Z F Z=1,2 S IBXDATA(Z)=$G(IBXSAVE("BILLING PRV",IBXIEN,"O",Z,2,"PTQ"))
"DATA",364.7,1540,0)
1840^N^5^^^^N
"DATA",364.7,1540,1)
K IBXDATA N Z F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("BILLING PRV",IBXIEN,"O",Z,2)),U,2) D:Z=2 CLEANUP^IBCEF75(.IBXSAVE)
"DATA",364.7,1541,0)
1841^N^5^^^^N
"DATA",364.7,1541,1)
N Z,Z0,Z1 K IBXDATA,IBXSAVE S Z=$$COBN^IBCEF(IBXIEN),Z0=0 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IBXIEN,"I"_Z1)) S Z0=Z0+1,IBXSAVE(Z0)=$$INSSECID^IBCEF21(IBXIEN,"SUB",Z1)
"DATA",364.7,1541,3,0)
^^1^1^3070530^
"DATA",364.7,1541,3,1,0)
Qualifier for date of initial treatment.
"DATA",364.7,1541,3,2,0)
IBXSAVE(Z0) array.  This will be used to populate pieces 9 thru 14 of this
"DATA",364.7,1541,3,3,0)
OI5 segment.
"DATA",364.7,1541,3,4,0)
 
"DATA",364.7,1541,3,5,0)
Z is the current payer sequence number (1,2, or 3)
"DATA",364.7,1541,3,6,0)
Z0 is a counter and subscript of IBXSAVE(1) thru IBXSAVE(2)
"DATA",364.7,1541,3,7,0)
Z1 is the loop variable through all possible insurances on the claim
"DATA",364.7,1541,3,8,0)
 
"DATA",364.7,1541,3,9,0)
If Z1'=Z and insurance is defined for insurance# Z1, then increment the Z0
"DATA",364.7,1541,3,10,0)
counter variable and store the string returned from the $$INSSECID
"DATA",364.7,1541,3,11,0)
function.
"DATA",364.7,1542,0)
1842^N^5^^^^N
"DATA",364.7,1542,1)
S IBXDATA=$S($G(IBXSAVE("INIT-DATE")):454,1:"") K IBXSAVE("INIT-DATE")
"DATA",364.7,1542,3,0)
^^1^1^3070530^
"DATA",364.7,1542,3,1,0)
Qualifier for date of initial treatment.
"DATA",364.7,1543,0)
1843^N^5^^^^N
"DATA",364.7,1543,1)
S IBXDATA=$S($G(IBXSAVE("ACUT-DATE")):453,1:"") K IBXSAVE("ACUT-DATE")
"DATA",364.7,1543,3,0)
^^1^1^3070530^
"DATA",364.7,1543,3,1,0)
Qualifier for date of acute manifestation.
"DATA",364.7,1544,0)
1844^N^5^^^^N
"DATA",364.7,1544,1)
S IBXDATA=$S($G(IBXSAVE("XRAY-DATE")):455,1:"") K IBXSAVE("XRAY-DATE")
"DATA",364.7,1544,3,0)
^^1^1^3070530^
"DATA",364.7,1544,3,1,0)
Qualifier for date of the last Xray.
"DATA",364.7,1545,0)
1845^N^5^^^^N
"DATA",364.7,1545,1)
S IBXDATA=$P($G(IBXSAVE("PTNM")),U,5)
"DATA",364.7,1545,3,0)
^^1^1^3070530^
"DATA",364.7,1545,3,1,0)
Patient name suffix.
"DATA",364.7,1546,0)
1846^N^5^^^^N
"DATA",364.7,1546,1)
K IBXSAVE("REM") I $$FT^IBCEF(IBXIEN)=3 N Z S Z=$P($G(^DGCR(399,IBXIEN,"UF2")),U,3),IBXDATA="" S:Z'="" IBXDATA="ADD",IBXSAVE("REM")=Z
"DATA",364.7,1546,3,0)
^364.73^2^2^3071004^^
"DATA",364.7,1546,3,1,0)
Get bill remarks from field 399/402, if non-empty save value in 
"DATA",364.7,1546,3,2,0)
IBXSAVE("REM"), and set IBXDATA to "ADD" (qualifier).
"DATA",364.7,1547,0)
1847^N^5^^^^N
"DATA",364.7,1547,1)
S IBXDATA=$G(IBXSAVE("REM")) K IBXSAVE("REM")
"DATA",364.7,1547,3,0)
^^1^1^3070604^
"DATA",364.7,1547,3,1,0)
Bill remarks.
"DATA",364.7,1548,0)
1848^N^5^^^^N^^
"DATA",364.7,1548,1)
K IBXSAVE("SERVFACFLAG")
"DATA",364.7,1549,0)
1849^N^5^^^^N
"DATA",364.7,1549,1)
N IBRET D VAMCFD^IBCEF75(IBXIEN,.IBRET) I $G(IBRET("C",1)) S IBXSAVE("SERVFACFLAG")=IBRET("C",1)
"DATA",364.7,1550,0)
1850^N^56^^^^N
"DATA",364.7,1550,1)
N Z,Z1,IBZ M IBZ=IBXDATA K IBXDATA F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$G(IBZ(Z))'="" S IBXSAVE("ICN/DCN",Z)=1
"DATA",364.7,1550,3,0)
^^8^8^3070910^
"DATA",364.7,1550,3,1,0)
This is OI6-6.9 as a calculate only field.  It is patterned after the 
"DATA",364.7,1550,3,2,0)
OI1-10 data to see if an ICN/DCN number is present for this other payer.  
"DATA",364.7,1550,3,3,0)
Any changes needed should be made both here and in OI1-10.
"DATA",364.7,1550,3,4,0)
 
"DATA",364.7,1550,3,5,0)
If there is an ICN/DCN number in OI1-10, then this piece will set a flag 
"DATA",364.7,1550,3,6,0)
in the IBXSAVE array indicating the existence of an ICN/DCN.  We cannot 
"DATA",364.7,1550,3,7,0)
transmit OI6-7 or 8 if this is true because there is only room for 3 
"DATA",364.7,1550,3,8,0)
payer secondary ID's and qualifiers.
"DATA",364.7,1551,0)
1851^N^5^^^^N
"DATA",364.7,1551,1)
K IBXSAVE("ICN/DCN") D CLEANUP^IBCEF78(.IBXSAVE)
"DATA",364.7,1552,0)
1852^N^5^^^^N
"DATA",364.7,1552,1)
K IBXSAVE N LN S LN=0 F  S LN=$O(^TMP("IBXDATA",$J,IBXREC,IBXPG,LN)) Q:'LN  I $G(^TMP("IBXDATA",$J,IBXREC,IBXPG,LN,6))="" K ^TMP("IBXDATA",$J,IBXREC,IBXPG,LN)
"DATA",364.7,1552,3,0)
^^10^10^3070925^
"DATA",364.7,1552,3,1,0)
OI3 segment clean-up code
"DATA",364.7,1552,3,2,0)
Calculate only field at the end of the OI3 segment.
"DATA",364.7,1552,3,3,0)
 
"DATA",364.7,1552,3,4,0)
Kill IBXSAVE array which was built above in piece 4.5.
"DATA",364.7,1552,3,5,0)
 
"DATA",364.7,1552,3,6,0)
The OI3 segment builds the X12 loop 2330C, but if there is no other payer 
"DATA",364.7,1552,3,7,0)
primary patient ID#, then there should not be an OI3 segment at all.
"DATA",364.7,1552,3,8,0)
 
"DATA",364.7,1552,3,9,0)
So check each OI3 segment for a piece 6.  If piece 6 is nil, then the 
"DATA",364.7,1552,3,10,0)
whole OI3 segment will be discarded.
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,1)

"FIA",2,2.312,5.01)

"FIA",2,2.312,5.02)

"FIA",2,2.312,5.03)

"FIA",2,2.312,5.04)

"FIA",2,2.312,5.05)

"FIA",2,2.312,5.06)

"FIA",2,2.312,5.07)

"FIA",2,2.312,5.08)

"FIA",2,2.312,5.09)

"FIA",2,2.312,5.1)

"FIA",2,2.312,5.11)

"FIA",2,2.312,5.12)

"FIA",2,2.312,5.13)

"FIA",2,2.312,16)

"FIA",2,2.312,17)

"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^y^p^^^^n^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,.111)

"FIA",36,36,.112)

"FIA",36,36,.113)

"FIA",36,36,.121)

"FIA",36,36,.122)

"FIA",36,36,.123)

"FIA",36,36,.141)

"FIA",36,36,.142)

"FIA",36,36,.143)

"FIA",36,36,.151)

"FIA",36,36,.152)

"FIA",36,36,.153)

"FIA",36,36,.161)

"FIA",36,36,.162)

"FIA",36,36,.163)

"FIA",36,36,.181)

"FIA",36,36,.182)

"FIA",36,36,.183)

"FIA",36,36,6.01)

"FIA",36,36,6.02)

"FIA",36,36,6.03)

"FIA",36,36,6.04)

"FIA",36,36,6.05)

"FIA",36,36,6.06)

"FIA",36,36,6.07)

"FIA",36,36,6.08)

"FIA",350.8)
IB ERROR
"FIA",350.8,0)
^IBE(350.8,
"FIA",350.8,0,0)
350.8I
"FIA",350.8,0,1)
n^n^f^^n^^y^o^n
"FIA",350.8,0,10)

"FIA",350.8,0,11)
I $$INC3508^IBY371PR(Y)
"FIA",350.8,0,"RLRO")

"FIA",350.8,0,"VR")
2.0^IB
"FIA",350.8,350.8)
0
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33D
"FIA",355.33,0,1)
y^y^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,60.04)

"FIA",355.33,355.33,60.06)

"FIA",355.33,355.33,62.01)

"FIA",355.93)
IB NON/OTHER VA BILLING PROVIDER
"FIA",355.93,0)
^IBA(355.93,
"FIA",355.93,0,0)
355.93I
"FIA",355.93,0,1)
y^y^p^^^^n^^n
"FIA",355.93,0,10)

"FIA",355.93,0,11)

"FIA",355.93,0,"RLRO")

"FIA",355.93,0,"VR")
2.0^IB
"FIA",355.93,355.93)
1
"FIA",355.93,355.93,.11)

"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^y^^y^o^n
"FIA",364.5,0,10)

"FIA",364.5,0,11)
I $$INCLUDE^IBY371PR(5,Y)
"FIA",364.5,0,"RLRO")

"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I $$INCLUDE^IBY371PR(6,Y)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $$INCLUDE^IBY371PR(7,Y)
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^y^p^^^^n^^n
"FIA",399,0,10)

"FIA",399,0,11)

"FIA",399,0,"RLRO")

"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399,47)

"FIA",399,399,122)

"FIA",399,399,123)

"FIA",399,399,124)

"FIA",399,399,245)

"FIA",399,399,246)

"FIA",399,399,247)

"FIA",399,399,248)

"FIA",399,399,402)

"FIA",399,399.0304)
1
"FIA",399,399.0304,50.02)

"FIA",399,399.0304,50.04)

"FIA",399,399.0304,50.05)

"FIA",399,399.0304,50.06)

"FIA",399,399.041)
1
"FIA",399,399.041,.04)

"FIA",399,399.047)
1
"FIA",399,399.047,.01)

"FIA",399,399.047,.02)

"FIA",399.1)
MCCR UTILITY
"FIA",399.1,0)
^DGCR(399.1,
"FIA",399.1,0,0)
399.1I
"FIA",399.1,0,1)
y^y^p^^^^n^^n
"FIA",399.1,0,10)

"FIA",399.1,0,11)

"FIA",399.1,0,"RLRO")

"FIA",399.1,0,"VR")
2.0^IB
"FIA",399.1,399.1)
1
"FIA",399.1,399.1,.26)

"FIA",399.1,399.1,1)

"FIA",399.1,399.11)
0
"INI")
IBY371PR
"INIT")
IBY371PO
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"IX",399,399.047,"AC",0)
399.047^AC^VALUE field clean up^MU^^F^^I^399.047^^^^^A
"IX",399,399.047,"AC",.1,0)
^^2^2^3070928^
"IX",399,399.047,"AC",.1,1,0)
If the VALUE CODE field is modified, make sure the VALUE field associated
"IX",399,399.047,"AC",.1,2,0)
with it is still VALID.  If not, delete the VALUE.
"IX",399,399.047,"AC",1)
D REMOVE^IBCVC(.DA)
"IX",399,399.047,"AC",1.4)
S X=$$COND^IBCVC(.DA,X1(1),X2(1))
"IX",399,399.047,"AC",2)
Q
"IX",399,399.047,"AC",11.1,0)
^.114IA^1^1
"IX",399,399.047,"AC",11.1,1,0)
1^F^399.047^.01^^^F
"KRN",.402,1080,-1)
0^4
"KRN",.402,1080,0)
IB SCREEN8H^3070806.1534^@^399^^@^3070815
"KRN",.402,1080,"%D",0)
^^1^1^3070110^
"KRN",.402,1080,"%D",1,0)
Billing screen 8 input template for form type CMS-1500.
"KRN",.402,1080,"DIAB",1,0,399,1)
TREATMENT AUTHORIZATION CODE;"PRIMARY AUTHORIZATION CODE"
"KRN",.402,1080,"DIAB",1,0,399,3)
NON-VA FACILITY:
"KRN",.402,1080,"DIAB",4,1,399.0222,5)
PRIM INS PROVIDER ID TYPE;T;REQ
"KRN",.402,1080,"DIAB",5,1,399.0222,5)
PRIMARY INS CO ID NUMBER;T
"KRN",.402,1080,"DIAB",8,0,399,0)
FORM LOCATOR 64A;T
"KRN",.402,1080,"DIAB",8,1,399.0222,5)
SEC INS PROVIDER ID TYPE;T;REQ
"KRN",.402,1080,"DIAB",9,1,399.0222,5)
SECONDARY INS CO ID NUMBER;T
"KRN",.402,1080,"DIAB",10,0,399,0)
FORM LOCATOR 64B;T
"KRN",.402,1080,"DIAB",12,0,399,4)
D ASK19^IBCEU3(DA);X
"KRN",.402,1080,"DIAB",12,1,399.0222,5)
TERT INS PROVIDER ID TYPE;T;REQ
"KRN",.402,1080,"DIAB",13,1,399.0222,5)
TERTIARY INS CO ID NUMBER;T
"KRN",.402,1080,"DR",1,399)
K DIPA S DIPA("I1")=$D(^DGCR(399,DA,"I1")),DIPA("I2")=$D(^("I2")),DIPA("I3")=$D(^("I3"));S:IBDR20'["81" Y="@82";166;167;@82;S:IBDR20'["82" Y="@83";215;453T~;S:'DIPA("I2") Y="@825";454T~;S:'DIPA("I3") Y="@825";455;@825;
"KRN",.402,1080,"DR",1,399,1)
163PRIMARY AUTHORIZATION CODE~;S:'DIPA("I2") Y="@83";230;S:'DIPA("I3") Y="@83";231;@83;S:IBDR20'["83" Y="@84";222;@84;S:IBDR20'["84" Y="@86";232;S DIPA("NVA_FC")=X S:X="" Y="@842";
"KRN",.402,1080,"DR",1,399,2)
S DIPA("NVA_FC-0")=$G(^IBA(355.93,+DIPA("NVA_FC"),0)) S:$P(DIPA("NVA_FC-0"),U,5)'=""&($P(DIPA("NVA_FC-0"),U,6)'="")&($P(DIPA("NVA_FC-0"),U,7)'="") Y="@841";
"KRN",.402,1080,"DR",1,399,3)
^355.93^IBA(355.93,^^S I(0,0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,10),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");@841;244;D DISPTAX^IBCEP81($P($G(^DGCR(399,DA,"U3")),U,3),"Non-VA Facility");233;@842;
"KRN",.402,1080,"DR",1,399,4)
S DIPA("OLDCLIA")=$P($G(^DGCR(399,DA,"U2")),U,13);235;I X="",$G(DIPA("OLDCLIA"))'="" S IBMDOTCN=1;@843;I '$$XRAY^IBCEP8A(DA) S Y="@844";D MAMMODP^IBCEP8A(DA);242;@844;@86;S:IBDR20'["86" Y="@87";459;D ASK19^IBCEU3(DA);236;237;
"KRN",.402,1080,"DR",1,399,5)
238//^S X=$S($$WNRBILL^IBEFUNC(DA):"31",1:"");@87;S:IBDR20'["87" Y="@99";I '$P($G(^DGCR(399,DA,"TX")),U,8),'$$TXMT^IBCEF4(DA) S Y="@872";I $$REQMRA^IBEFUNC(DA) S Y="@8711";27//NO FORCED PRINT;S Y="@872";@8711;28//NO FORCED PRINT;
"KRN",.402,1080,"DR",1,399,6)
@872;@99;
"KRN",.402,1080,"DR",2,355.93)
.05;.1;.06;.07;.08;
"KRN",.402,1080,"DR",2,399.0222)
.01;S DIPA("RF")=X S:$D(^XUSEC("IB PROVIDER EDIT",DUZ)) DLAYGO=355.93;.02;K DLAYGO S DIPA("PRF")=X S:X="" Y="@98";.15;D DISPTAX^IBCEP81($P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,15),"");
"KRN",.402,1080,"DR",2,399.0222,1)
N Z S Z=$$EXPAND^IBTRE(399.0222,.08,$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,8)),DIPA("SPC")=$S(Z'="":Z,1:"UNSPECIFIED") W !,"    Prov Specialty On File: ",DIPA("SPC");S DIPA("CRD")=$$CRED^IBCEU($P(^DGCR(399,DA(1),"PRV",DA,0),U,2));
"KRN",.402,1080,"DR",2,399.0222,2)
.03;K DIPA("W1") S:$G(DIPA("CRD"))'=$P(^DGCR(399,DA(1),"PRV",DA,0),U,3) DIPA("W1")=1;I $G(DIPA("W1")) D WRT1^IBCSC8H($G(DIPA("CRD")));K DIPA("W1");I '$G(DIPA("I1")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,3)
D PROVID^IBCEP2B(DA(1),DA,1,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8382",DIPA("EDIT")=1:"@8391",DIPA("EDIT")=2:"@8371",1:"");@8382;I '$G(DIPA("I2")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,4)
D PROVID^IBCEP2B(DA(1),DA,2,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8383",DIPA("EDIT")=1:"@8392",DIPA("EDIT")=2:"@8372",1:"");@8383;I '$G(DIPA("I3")) S Y="@8305";
"KRN",.402,1080,"DR",2,399.0222,5)
D PROVID^IBCEP2B(DA(1),DA,3,.DIPA) S Y=$S(DIPA("EDIT")<0:"@8305",DIPA("EDIT")=1:"@8393",DIPA("EDIT")=2:"@8373",1:"");S Y="@8305";@8391;.12R~T~;.05T~;S Y="@8382";@8392;.13R~T~;.06T~;S Y="@8383";@8393;.14R~T~;.07T~;S Y="@8305";@8371;
"KRN",.402,1080,"DR",2,399.0222,6)
.12////^S X=DIPA("PRIDT");.05////^S X=DIPA("PRID");S Y="@8382";@8372;.13////^S X=DIPA("PRIDT");.06////^S X=DIPA("PRID");S Y="@8383";@8373;.14////^S X=DIPA("PRIDT");.07////^S X=DIPA("PRID");S Y="@8305";@8305;@98;W @IOF;
"KRN",.402,1080,"ROUOLD")
IBXSC8H
"KRN",.402,2627,-1)
0^3
"KRN",.402,2627,0)
IBCN PATIENT INSURANCE^3070706.1452^@^2^^@^3071026
"KRN",.402,2627,"%D",0)
^^4^4^3070611^
"KRN",.402,2627,"%D",1,0)
esg - 6/11/2007 - IB patch 371
"KRN",.402,2627,"%D",2,0)
 
"KRN",.402,2627,"%D",3,0)
New input template to handle the input/edit of fields in the patient 
"KRN",.402,2627,"%D",4,0)
insurance multiple (2.312) in the patient file.
"KRN",.402,2627,"DIAB",2,1,2.312,0)
INSURANCE TYPE;"INSURANCE COMPANY"
"KRN",.402,2627,"DIAB",7,1,2.312,1)
SUBSCRIBER ID;"SUBSCRIBER PRIMARY ID"
"KRN",.402,2627,"DIAB",8,1,2.312,2)
PATIENT ID;"PATIENT PRIMARY ID"
"KRN",.402,2627,"DR",1,2)
.3121;
"KRN",.402,2627,"DR",2,2.312)
I '$G(IBREG)!'$$KCHK^XUSRB("IB INSURANCE SUPERVISOR") S Y="@10";.01INSURANCE COMPANY~;@10;16;S IBREL=X;I IBREL="" S Y="";I '$G(IBDFN) S Y="";F IBZ="VADM","VAPA" K ^UTILITY(IBZ,$J);17//^S X=$$PIDEF^IBCNSP1($G(IBREL),17,$G(IBDFN));8;
"KRN",.402,2627,"DR",2,2.312,1)
3;4.01;4.02;.2;1.09;W !;1SUBSCRIBER PRIMARY ID~;I '$$ASK^IBCNSP1("Do you want to enter/update Subscriber Secondary IDs") S Y="@30";S IB1ST("ID EDIT")=1;5.02;I X="" S Y="@30";5.03;I X="" S Y="@30";5.04;I X="" S Y="@30";5.05;
"KRN",.402,2627,"DR",2,2.312,2)
I X="" S Y="@30";5.06;I X="" S Y="@30";5.07;@30;I +$G(IBREL)=1 S Y="@20";W !;5.01PATIENT PRIMARY ID~;I '$$ASK^IBCNSP1("Do you want to enter/update Patient Secondary IDs") S Y="@20";S IB1ST("ID EDIT")=1;5.08;I X="" S Y="@20";5.09;
"KRN",.402,2627,"DR",2,2.312,3)
I X="" S Y="@20";5.1;I X="" S Y="@20";5.11;I X="" S Y="@20";5.12;I X="" S Y="@20";5.13;@20;W !;3.01//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.01,$G(IBDFN));3.12//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.12,$G(IBDFN));
"KRN",.402,2627,"DR",2,2.312,4)
3.02//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.02,$G(IBDFN));3.03;3.06//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.06,$G(IBDFN),1);3.07//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.07,$G(IBDFN),1);3.08//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.08,$G(IBDFN),1);
"KRN",.402,2627,"DR",2,2.312,5)
3.09//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.09,$G(IBDFN),1);3.1//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.1,$G(IBDFN),1);3.11//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.11,$G(IBDFN),1);
"KRN",.402,2633,-1)
0^1
"KRN",.402,2633,0)
IBEDIT INS CO1^3070714.1236^@^36^^@^3070731
"KRN",.402,2633,"DIAB",1,0,36,1)
TRANSMIT ELECTRONICALLY;"EDI - Transmit?"
"KRN",.402,2633,"DIAB",1,0,36,2)
EDI ID NUMBER - INST;"EDI - Inst Payer Primary ID"
"KRN",.402,2633,"DIAB",1,0,36,3)
EDI INST SECONDARY ID QUAL(1);"EDI - 1ST Inst Payer Sec. ID Qualifier"
"KRN",.402,2633,"DIAB",1,0,36,7)
EDI INST SECONDARY ID(2);"EDI - 2ND Inst Payer Sec. ID"
"KRN",.402,2633,"DIAB",1,0,36,8)
EDI ID NUMBER - PROF;"EDI - Prof Payer Primary ID"
"KRN",.402,2633,"DIAB",1,0,36,9)
EDI PROF SECONDARY ID QUAL(1);"EDI - 1ST Prof Payer Sec. ID Qualifier"
"KRN",.402,2633,"DIAB",1,0,36,13)
EDI PROF SECONDARY ID(2);"EDI - 2ND Prof Payer Sec. ID"
"KRN",.402,2633,"DIAB",1,0,36,14)
ELECTRONIC INSURANCE TYPE;"EDI - Insurance Type"
"KRN",.402,2633,"DIAB",1,0,36,15)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,2633,"DIAB",1,0,36,16)
REF PROV SEC ID DEF CMS-1500//UPIN;"Default ID (1500)"
"KRN",.402,2633,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,2633,"DIAB",2,0,36,16)
REF PROV SEC ID REQ ON CLAIMS;"Require ID on Claim"
"KRN",.402,2633,"DIAB",2,0,36,17)
SEND LAB OR FAC IDS FOR VAMC//YES;"Send VA Lab/Facility IDs or Facility Data for VAMC?"
"KRN",.402,2633,"DIAB",2,0,36,21)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,2633,"DIAB",3,0,36,22)
INS COMPANY LINK TYPE;T
"KRN",.402,2633,"DIAB",4,0,36,16)
ATT/REND ID BILL SEC ID PROF//NO;"Use Att/Rend ID as Billing Provider Sec. ID (1500)?"
"KRN",.402,2633,"DIAB",4,0,36,18)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,2633,"DIAB",5,0,36,15)
PERF PROV SECOND ID TYPE 1500;"Default ID (1500)"
"KRN",.402,2633,"DIAB",5,0,36,16)
ATT/REND ID BILL SEC ID INST//NO;"Use Att/Rend ID as Billing Provider Sec. ID (UB)?"
"KRN",.402,2633,"DIAB",6,0,36,4)
EDI INST SECONDARY ID(1);"EDI - 1ST Inst Payer Sec. ID"
"KRN",.402,2633,"DIAB",6,0,36,10)
EDI PROF SECONDARY ID(1);"EDI - 1ST Prof Payer Sec. ID"
"KRN",.402,2633,"DIAB",6,0,36,15)
PERF PROV SECOND ID TYPE UB;"Default ID (UB)"
"KRN",.402,2633,"DIAB",6,0,36,23)
INS COMPANY LINK PARENT;T
"KRN",.402,2633,"DIAB",7,0,36,5)
EDI INST SECONDARY ID QUAL(2);"EDI - 2ND Inst Payer Sec. ID Qualifier"
"KRN",.402,2633,"DIAB",7,0,36,11)
EDI PROF SECONDARY ID QUAL(2);"EDI - 2ND Prof Payer Sec. ID Qualifier"
"KRN",.402,2633,"DIAB",7,0,36,15)
SECONDARY ID REQUIREMENTS;"Require ID on Claim"
"KRN",.402,2633,"DIAB",8,0,36,14)
BIN NUMBER;"EDI - Bin Number"
"KRN",.402,2633,"DIAB",12,0,36,20)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,2633,"DIAB",17,0,36,0)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,2633,"DIAB",20,0,36,19)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,2633,"DIAB",24,0,36,18)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,2633,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;.12;.13;.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@171";
"KRN",.402,2633,"DR",1,36,1)
3.01EDI - Transmit?~;S DIPA("IBTX")=X;I X=$G(IBEDIKEY(1))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1721";3.01////^S X=$G(IBEDIKEY(1));I $$EDIKEY^IBCNSC();S Y="@171";@1721;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,2633,"DR",1,36,2)
3.04EDI - Inst Payer Primary ID~;I X=$G(IBEDIKEY(4))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17211";3.04////^S X=$G(IBEDIKEY(4));I $$EDIKEY^IBCNSC();S Y="@171";@17211;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,2633,"DR",1,36,3)
6.01EDI - 1ST Inst Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(3,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";I X=$G(IBEDIKEY(1,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17212";6.01////^S X=$G(IBEDIKEY(1,6));
"KRN",.402,2633,"DR",1,36,4)
6.02////^S X=$G(IBEDIKEY(2,6));I $$EDIKEY^IBCNSC();S Y="@171";@17212;I '$G(DIPA("IBTX")) S Y="@17";6.02EDI - 1ST Inst Payer Sec. ID~;I X=$G(IBEDIKEY(2,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17213";
"KRN",.402,2633,"DR",1,36,5)
6.02////^S X=$G(IBEDIKEY(2,6));6.01////^S X=$G(IBEDIKEY(1,6));I $$EDIKEY^IBCNSC();S Y="@171";@17213;I '$G(DIPA("IBTX")) S Y="@17";6.03EDI - 2ND Inst Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";
"KRN",.402,2633,"DR",1,36,6)
I X=$G(IBEDIKEY(3,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17214";6.03////^S X=$G(IBEDIKEY(3,6));6.04////^S X=$G(IBEDIKEY(4,6));I $$EDIKEY^IBCNSC();S Y="@171";@17214;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,2633,"DR",1,36,7)
6.04EDI - 2ND Inst Payer Sec. ID~;I X=$G(IBEDIKEY(4,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";6.04////^S X=$G(IBEDIKEY(4,6));6.03////^S X=$G(IBEDIKEY(3,6));I $$EDIKEY^IBCNSC();S Y="@171";@1722;
"KRN",.402,2633,"DR",1,36,8)
3.02EDI - Prof Payer Primary ID~;I X=$G(IBEDIKEY(2))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17221";3.02////^S X=$G(IBEDIKEY(2));I $$EDIKEY^IBCNSC();S Y="@171";@17221;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,2633,"DR",1,36,9)
6.05EDI - 1ST Prof Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(7,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(5,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17222";6.05////^S X=$G(IBEDIKEY(5,6));
"KRN",.402,2633,"DR",1,36,10)
6.06////^S X=$G(IBEDIKEY(6,6));I $$EDIKEY^IBCNSC();S Y="@171";@17222;I '$G(DIPA("IBTX")) S Y="@17";6.06EDI - 1ST Prof Payer Sec. ID~;I X=$G(IBEDIKEY(6,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17223";
"KRN",.402,2633,"DR",1,36,11)
6.06////^S X=$G(IBEDIKEY(6,6));6.05////^S X=$G(IBEDIKEY(5,6));I $$EDIKEY^IBCNSC();S Y="@171";@17223;I '$G(DIPA("IBTX")) S Y="@17";6.07EDI - 2ND Prof Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";
"KRN",.402,2633,"DR",1,36,12)
I X=$G(IBEDIKEY(7,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17224";6.07////^S X=$G(IBEDIKEY(7,6));6.08////^S X=$G(IBEDIKEY(8,6));I $$EDIKEY^IBCNSC();S Y="@171";@17224;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,2633,"DR",1,36,13)
6.08EDI - 2ND Prof Payer Sec. ID~;I X=$G(IBEDIKEY(8,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";6.08////^S X=$G(IBEDIKEY(8,6));6.07////^S X=$G(IBEDIKEY(7,6));I $$EDIKEY^IBCNSC();S Y="@171";@1723;@17;
"KRN",.402,2633,"DR",1,36,14)
3.09EDI - Insurance Type~;I X=$G(IBEDIKEY(9))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1724";3.09////^S X=$G(IBEDIKEY(9));I $$EDIKEY^IBCNSC();S Y="@171";@1724;@171;3.03EDI - Bin Number~;I $G(DIPA("IBTX"))'=2 S Y="@18";
"KRN",.402,2633,"DR",1,36,15)
3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@18;S:",6,12,"'[IBY Y="@181";W !!,"Attending/Rendering Provider Secondary ID";4.01Default ID (1500)~;4.02Default ID (UB)~;4.03Require ID on Claim~;W !!,"Referring Provider Secondary ID";
"KRN",.402,2633,"DR",1,36,16)
4.04Default ID (1500)~//UPIN;4.05Require ID on Claim~;W !!,"Billing Provider Secondary IDs";4.06Use Att/Rend ID as Billing Provider Sec. ID (1500)?~//NO;4.08Use Att/Rend ID as Billing Provider Sec. ID (UB)?~//NO;
"KRN",.402,2633,"DR",1,36,17)
W !!,"VA-Laboratory or Facility IDs";4.07Send VA Lab/Facility IDs or Facility Data for VAMC?~//YES;@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";.113;@1;.114;.115;.116;.131;.119;
"KRN",.402,2633,"DR",1,36,18)
S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;S:",10,6,"'[IBY Y="@80";.168T~;
"KRN",.402,2633,"DR",1,36,19)
S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@80;S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;S:X="" Y="@6";.182;S:X="" Y="@6";
"KRN",.402,2633,"DR",1,36,20)
.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;S:IBY["4" Y="@99";@40;
"KRN",.402,2633,"DR",1,36,21)
S:",5,6,"'[IBY Y="@55";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;S:IBY["5" Y="@99";@55;S:",13,6,"'[IBY Y="@60";
"KRN",.402,2633,"DR",1,36,22)
I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@551";I $D(^DIC(36,"APC",+$G(DA))),$P($G(^DIC(36,+$G(DA),3)),U,13)="P" S Y="@551";3.13T~;S DIPA("IBLNK")=X;I X=$G(IBEDIKEY(13))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@552";
"KRN",.402,2633,"DR",1,36,23)
3.13////^S X=$G(IBEDIKEY(13));I $$EDIKEY^IBCNSC();S Y="@551";@552;I $G(DIPA("IBLNK"))'="C" S Y="@551";3.14T~;I X=$G(IBEDIKEY(14))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@553";3.14////^S X=$G(IBEDIKEY(14));I $$EDIKEY^IBCNSC();
"KRN",.402,2633,"DR",1,36,24)
S Y="@551";@553;D COPY^IBCEPCID(+$G(DA));@551;S:IBY=",13," Y="@99";@60;S:",7,6,"'[IBY Y="@50";3.1;@50;S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,2633,"DR",2,36.03)
.01
"KRN",101,886,-1)
0^1
"KRN",101,886,0)
IBCNSC INS CO BILLING PARAMETERS^Billing/EDI Param^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,886,4)
^^^EP
"KRN",101,886,15)
S VALMBG=1
"KRN",101,886,20)
S IBY=",1," D EA^IBCNSC1
"KRN",101,886,99)
60857,47538
"KRN",101,887,-1)
0^12
"KRN",101,887,0)
IBCNSC INS CO MAIN MAILING ADDRESS^Main Mailing Address^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,887,4)
^^^EM
"KRN",101,887,15)
S VALMBG=21
"KRN",101,887,20)
S IBY=",2," D EA^IBCNSC1
"KRN",101,887,99)
60857,47538
"KRN",101,888,-1)
0^10
"KRN",101,888,0)
IBCNSC INS CO APPEALS OFFICE^Appeals Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,888,4)
^^^AA
"KRN",101,888,15)
S VALMBG=48
"KRN",101,888,20)
S IBY=",4," D EA^IBCNSC1
"KRN",101,888,99)
60857,47538
"KRN",101,889,-1)
0^11
"KRN",101,889,0)
IBCNSC INS CO INQUIRY OFFICE^Inquiry Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,889,4)
^^^IA
"KRN",101,889,10,0)
^101.01PA^0^0
"KRN",101,889,15)
S VALMBG=55
"KRN",101,889,20)
S IBY=",5," D EA^IBCNSC1
"KRN",101,889,28)

"KRN",101,889,99)
60857,47538
"KRN",101,891,-1)
0^3
"KRN",101,891,0)
IBCNSP EDIT EFFECTIVE DATES^Effective Dates^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,891,15)
S VALMBG=16
"KRN",101,891,20)
D ED^IBCNSP1
"KRN",101,891,99)
60857,47538
"KRN",101,892,-1)
0^9
"KRN",101,892,0)
IBCNSP VERIFY COVERAGE^Verify Coverage^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,892,15)
S VALMBG=$G(IB1ST("VERIFY"),1)
"KRN",101,892,20)
D VC^IBCNSP1
"KRN",101,892,99)
60857,47538
"KRN",101,893,-1)
0^4
"KRN",101,893,0)
IBCNSP SUBSCRIBER UPDATE^Subscriber Update^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,893,15)
S VALMBG=$S($G(IB1ST("ID EDIT")):$G(IB1ST("ID"),24),1:24)
"KRN",101,893,20)
D SU^IBCNSP1
"KRN",101,893,99)
60857,47538
"KRN",101,894,-1)
0^6
"KRN",101,894,0)
IBCNSP EMPLOYER INFO FOR CLAIMS^Employer Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,894,15)
S VALMBG=24
"KRN",101,894,20)
D EM^IBCNSP3
"KRN",101,894,99)
60857,47538
"KRN",101,895,-1)
0^8
"KRN",101,895,0)
IBCNSP ADD COMMENT^Add Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,895,15)
S VALMBG=$G(IB1ST("COMMENT"),1)
"KRN",101,895,20)
D AC^IBCNSP3
"KRN",101,895,99)
60857,47538
"KRN",101,896,-1)
0^2
"KRN",101,896,0)
IBCNSP UR INFO^UR Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,896,15)
S VALMBG=16
"KRN",101,896,20)
D IT^IBCNSP1
"KRN",101,896,99)
60857,47538
"KRN",101,920,-1)
0^13
"KRN",101,920,0)
IBCNSC INS CO INPT CLAIMS^Inpt Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,920,4)
^^^IC
"KRN",101,920,15)
S VALMBG=27
"KRN",101,920,20)
S IBY=",3," D EA^IBCNSC1
"KRN",101,920,28)
IC
"KRN",101,920,99)
60857,47538
"KRN",101,921,-1)
0^14
"KRN",101,921,0)
IBCNSC INS CO OPT CLAIMS^Opt Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,921,4)
^^^OC
"KRN",101,921,15)
S VALMBG=34
"KRN",101,921,20)
S IBY=",10," D EA^IBCNSC1
"KRN",101,921,99)
60857,47538
"KRN",101,1066,-1)
0^5
"KRN",101,1066,0)
IBCNSP INSURANCE CONTACT INF^Insur. Contact Inf.^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1066,4)
^^^IC
"KRN",101,1066,10,0)
^101.01PA^0^0
"KRN",101,1066,15)
S VALMBG=$G(IB1ST("CONTACT"),1)
"KRN",101,1066,20)
D IC^IBCNSP1
"KRN",101,1066,26)

"KRN",101,1066,28)
IC
"KRN",101,1066,99)
60857,47538
"KRN",101,1102,-1)
0^15
"KRN",101,1102,0)
IBCNSC INS CO RX CLAIMS^Prescr Claims Of^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1102,4)
^^^PC
"KRN",101,1102,10,0)
^101.01PA^0^0
"KRN",101,1102,15)
S VALMBG=41
"KRN",101,1102,20)
S IBY=",11," D EA^IBCNSC1
"KRN",101,1102,99)
60857,47538
"KRN",101,1738,-1)
0^7
"KRN",101,1738,0)
IBCNSJ EDIT COVERAGE LIMITS^Add/Edit Coverage^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1738,15)
S VALMBG=$G(IB1ST("PLIM"),1)
"KRN",101,1738,20)
D CV^IBCNSJ5
"KRN",101,1738,99)
60857,47538
"KRN",101,4288,-1)
0^16
"KRN",101,4288,0)
IBCNSC INS CO ASSOCIATION^Associate Companies^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4288,15)
S VALMBG=62
"KRN",101,4288,20)
S IBY=",13," D EA^IBCNSC1
"KRN",101,4288,99)
60857,47538
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.6,0,20,.2)
NEW FORM DATA ELEMENT^P364.6'^IBA(364.6,^0;20^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
371^3071026^101001
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3071026
"PKG",200,22,1,"PAH",1,1,1,0)
E-CLAIMS PLUS ITERATION 3, PART 1
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
55
"RTN","IBCBB")
0^11^B70083781^B14809145
"RTN","IBCBB",1,0)
IBCBB ;ALB/AAS - EDIT CHECK ROUTINE TO BE INVOKED BEFORE ALL BILL APPROVAL ACTIONS ;2-NOV-89
"RTN","IBCBB",2,0)
 ;;2.0;INTEGRATED BILLING;**80,51,137,288,327,361,371**;21-MAR-94;Build 57
"RTN","IBCBB",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB",4,0)
 ;
"RTN","IBCBB",5,0)
 ;MAP TO DGCRBB
"RTN","IBCBB",6,0)
 ;
"RTN","IBCBB",7,0)
 ;IBNDn = IBND(n) = ^ib(399,n)
"RTN","IBCBB",8,0)
 ;RETURNS:
"RTN","IBCBB",9,0)
 ;IBER=fields with errors separated by semi-colons
"RTN","IBCBB",10,0)
 ;PRCASV("OKAY")=1 if iber="" and $D(prcasv("array")) compete
"RTN","IBCBB",11,0)
 ;
"RTN","IBCBB",12,0)
GVAR ;set up variables for mccr
"RTN","IBCBB",13,0)
 Q:'$D(IBIFN)  F I=0,"M","U","U1","S","MP","TX","UF3","UF31","U2" S @("IBND"_I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCBB",14,0)
 S IBBNO=$P(IBND0,"^"),DFN=$P(IBND0,"^",2),IBEVDT=$P(IBND0,"^",3)
"RTN","IBCBB",15,0)
 S IBLOC=$P(IBND0,"^",4),IBCL=$P(IBND0,"^",5),IBTF=$P(IBND0,"^",6)
"RTN","IBCBB",16,0)
 S IBAT=$P(IBND0,"^",7),IBWHO=$P(IBND0,"^",11),IBST=$P(IBND0,"^",13),IBFT=$P(IBND0,"^",19)
"RTN","IBCBB",17,0)
 S IBFDT=$P(IBNDU,"^",1),IBTDT=$P(IBNDU,"^",2)
"RTN","IBCBB",18,0)
 S IBTC=$P(IBNDU1,"^",1),IBFY=$P(IBNDU1,"^",9),IBFYC=$P(IBNDU1,"^",10)
"RTN","IBCBB",19,0)
 S IBEU=$P(IBNDS,"^",2),IBRU=$P(IBNDS,"^",5),IBAU=$P(IBNDS,"^",8)
"RTN","IBCBB",20,0)
 S IBTOB=$$TOB(IBND0),IBTOB12=$E(IBTOB,1,2)
"RTN","IBCBB",21,0)
 K ^TMP($J,"BILL-WARN")
"RTN","IBCBB",22,0)
 Q
"RTN","IBCBB",23,0)
 ;
"RTN","IBCBB",24,0)
EN ;Entry to check for errors
"RTN","IBCBB",25,0)
 N IBQ,IBXERR,IBXDATA,IBXSAVE,IBZPRC92,IBQUIT,IBISEQ,IDDATA,IBFOR,IBC
"RTN","IBCBB",26,0)
 I $D(IBFL) N IBFL
"RTN","IBCBB",27,0)
 K ^TMP($J)
"RTN","IBCBB",28,0)
 W !
"RTN","IBCBB",29,0)
 S IBER="" D GVAR I '$D(IBND0) S IBER=-1 Q
"RTN","IBCBB",30,0)
 ;
"RTN","IBCBB",31,0)
 ;patient in patient file
"RTN","IBCBB",32,0)
 I DFN="" S IBER=IBER_"IB057;"
"RTN","IBCBB",33,0)
 I DFN]"",'$D(^DPT(DFN)) S IBER=IBER_"IB057;"
"RTN","IBCBB",34,0)
 ;
"RTN","IBCBB",35,0)
 ;Event date in correct format
"RTN","IBCBB",36,0)
 I IBEVDT="" S IBER=IBER_"IB049;"
"RTN","IBCBB",37,0)
 I IBEVDT]"",IBEVDT'?7N&(IBEVDT'?7N1".".N) S IBER=IBER_"IB049;"
"RTN","IBCBB",38,0)
 ;
"RTN","IBCBB",39,0)
 ;Rate Type
"RTN","IBCBB",40,0)
 I IBAT="" S IBER=IBER_"IB059;"
"RTN","IBCBB",41,0)
 I IBAT]"",'$D(^DGCR(399.3,IBAT,0)) S IBER=IBER_"IB059;"
"RTN","IBCBB",42,0)
 I IBAT]"",$D(^DGCR(399.3,IBAT,0)),'$P(^(0),"^",6) S IBER=IBER_"IB059;",IBAT=""
"RTN","IBCBB",43,0)
 I IBAT]"",$P($G(^DGCR(399.3,IBAT,0)),"^",6) S IBARTP=$P($$CATN^PRCAFN($P(^DGCR(399.3,IBAT,0),"^",6)),"^",3)
"RTN","IBCBB",44,0)
 ;Check that AR category expects same debtor as defined in who's responsible.
"RTN","IBCBB",45,0)
 I $D(IBARTP),IBWHO="i"&(IBARTP'="T")!(IBWHO="p"&("PC"'[IBARTP))!(IBWHO="o"&(IBARTP'="N")) S IBER=IBER_"IB058;"
"RTN","IBCBB",46,0)
 ;
"RTN","IBCBB",47,0)
 ;Who's Responsible
"RTN","IBCBB",48,0)
 I IBWHO=""!($L(IBWHO)>1)!("iop"'[IBWHO) S IBER=IBER_"IB065;"
"RTN","IBCBB",49,0)
 S IBMRA=$S($$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)):$$TXMT^IBCEF4(IBIFN)>0,1:0)
"RTN","IBCBB",50,0)
 ;  MCR will not reimburse is only valid if there is subsequent insurance
"RTN","IBCBB",51,0)
 ;   that will reimburse
"RTN","IBCBB",52,0)
 I IBWHO="i" D
"RTN","IBCBB",53,0)
 . I IBMRA D  Q
"RTN","IBCBB",54,0)
 .. N Z,IBZ
"RTN","IBCBB",55,0)
 .. S IBZ=0
"RTN","IBCBB",56,0)
 .. F Z=$$COBN^IBCEF(IBIFN):1:3 I $D(^DGCR(399,IBIFN,"I"_(Z+1))),$P($G(^DIC(36,+$G(^DGCR(399,IBIFN,"I"_(Z+1))),0)),U,2)'="N" S IBZ=1 Q
"RTN","IBCBB",57,0)
 .. I 'IBZ S IBER=IBER_"IB054;" D WARN^IBCBB11("A valid claim for MEDICARE WNR needs subsequent ins. that will reimburse")
"RTN","IBCBB",58,0)
 ..
"RTN","IBCBB",59,0)
 . I $$COB^IBCEF(IBIFN)="S",$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))=1,$D(^DGCR(399,IBIFN,"I3")) Q
"RTN","IBCBB",60,0)
 . I $S('IBNDMP:1,1:$P(IBNDMP,U,2)'=$$BPP^IBCNS2(IBIFN,1)) S IBER=IBER_"IB054;"
"RTN","IBCBB",61,0)
 I IBWHO="o",'$P(IBNDM,"^",11) S IBER=IBER_"IB053;"
"RTN","IBCBB",62,0)
 ;
"RTN","IBCBB",63,0)
 ; All insurance subscribers must have a birth date on file
"RTN","IBCBB",64,0)
 ;  - 11/10/04 - IB*2.0*288
"RTN","IBCBB",65,0)
 ;  - 12/14/06 - IB*2.0*361 - must have INSURED'S SEX too
"RTN","IBCBB",66,0)
 ; IB error codes
"RTN","IBCBB",67,0)
 ;    IB221 - Primary insurance subscriber missing date of birth
"RTN","IBCBB",68,0)
 ;    IB222 - Secondary insurance subscriber missing date of birth
"RTN","IBCBB",69,0)
 ;    IB223 - Tertiary insurance subscriber missing date of birth
"RTN","IBCBB",70,0)
 ;    IB261 - Primary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",71,0)
 ;    IB262 - Secondary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",72,0)
 ;    IB263 - Tertiary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",73,0)
 ;
"RTN","IBCBB",74,0)
 F IBISEQ=1:1:3 D
"RTN","IBCBB",75,0)
 . I '$P($G(^DGCR(399,IBIFN,"I"_IBISEQ)),U,1) Q   ; no insurance here
"RTN","IBCBB",76,0)
 . K ^UTILITY("VADM",$J),^UTILITY("VAPA",$J)
"RTN","IBCBB",77,0)
 . S IDDATA=$$INSDEM^IBCEF(IBIFN,IBISEQ)
"RTN","IBCBB",78,0)
 . K ^UTILITY("VADM",$J),^UTILITY("VAPA",$J)
"RTN","IBCBB",79,0)
 . ;
"RTN","IBCBB",80,0)
 . I '$P(IDDATA,U,1) D ERR(221)   ; birth date missing
"RTN","IBCBB",81,0)
 . ;
"RTN","IBCBB",82,0)
 . I "^M^F^"'[(U_$P(IDDATA,U,2)_U) D ERR(261)  ; sex missing
"RTN","IBCBB",83,0)
 . ;
"RTN","IBCBB",84,0)
 . ; IB*2*371 - esg - check for other missing insurance pieces
"RTN","IBCBB",85,0)
 . ; check insured's name, primary ID#, pt. relationship to insured,
"RTN","IBCBB",86,0)
 . ; and subscriber address data  
"RTN","IBCBB",87,0)
 . N INNAME,SUBID,PTREL,SFA,CAS,LN,FN
"RTN","IBCBB",88,0)
 . ;
"RTN","IBCBB",89,0)
 . ;          IB273 - Primary Insurance name of insured missing
"RTN","IBCBB",90,0)
 . ;          IB274 - Secondary Insurance name of insured missing
"RTN","IBCBB",91,0)
 . ;          IB275 - Tertiary Insurance name of insured missing
"RTN","IBCBB",92,0)
 . S INNAME=$$POLICY^IBCEF(IBIFN,17,IBISEQ)
"RTN","IBCBB",93,0)
 . S LN=$P(INNAME,",",1),FN=$P(INNAME,",",2)   ; last name,first name
"RTN","IBCBB",94,0)
 . S LN=$$NOPUNCT^IBCEF(LN,1)
"RTN","IBCBB",95,0)
 . S FN=$$NOPUNCT^IBCEF(FN,1)
"RTN","IBCBB",96,0)
 . I LN=""!(FN="") D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",97,0)
 . S LN=$$NAME^IBCEFG1(INNAME)  ; additional name checks
"RTN","IBCBB",98,0)
 . S FN=$P(LN,U,2)
"RTN","IBCBB",99,0)
 . S LN=$P(LN,U,1)
"RTN","IBCBB",100,0)
 . I LN=""!(FN="") D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",101,0)
 . ;
"RTN","IBCBB",102,0)
 . ;          IB276 - Primary Insurance subscriber ID missing
"RTN","IBCBB",103,0)
 . ;          IB277 - Secondary Insurance subscriber ID missing
"RTN","IBCBB",104,0)
 . ;          IB278 - Tertiary Insurance subscriber ID missing
"RTN","IBCBB",105,0)
 . S SUBID=$$NOPUNCT^IBCEF($$POLICY^IBCEF(IBIFN,2,IBISEQ),1)
"RTN","IBCBB",106,0)
 . I SUBID="" D ERR(276)     ; subscriber ID# missing
"RTN","IBCBB",107,0)
 . ;
"RTN","IBCBB",108,0)
 . ;          IB279 - Primary Insurance missing pt relationship
"RTN","IBCBB",109,0)
 . ;          IB280 - Secondary Insurance missing pt relationship
"RTN","IBCBB",110,0)
 . ;          IB281 - Tertiary Insurance missing pt relationship
"RTN","IBCBB",111,0)
 . S PTREL=$$POLICY^IBCEF(IBIFN,16,IBISEQ)
"RTN","IBCBB",112,0)
 . I PTREL="" D ERR(279)      ; missing patient relationship to insured
"RTN","IBCBB",113,0)
 . ;
"RTN","IBCBB",114,0)
 . ; subscriber address section
"RTN","IBCBB",115,0)
 . S SFA=$$INSADDR^IBCEF(IBIFN,IBISEQ)     ; full address all pieces
"RTN","IBCBB",116,0)
 . S CAS=$$NOPUNCT^IBCEF($P(SFA,U,2,5),1)  ; string city,st,zip,addr1
"RTN","IBCBB",117,0)
 . ;
"RTN","IBCBB",118,0)
 . ;          IB282 - Primary Insurance address line 1 missing
"RTN","IBCBB",119,0)
 . ;          IB283 - Secondary Insurance address line 1 missing
"RTN","IBCBB",120,0)
 . ;          IB284 - Tertiary Insurance address line 1 missing
"RTN","IBCBB",121,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,5),1)="" D   ; address line 1 is blank
"RTN","IBCBB",122,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",123,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(282) Q
"RTN","IBCBB",124,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",125,0)
 .. I CAS'="" D ERR(282) Q
"RTN","IBCBB",126,0)
 .. Q
"RTN","IBCBB",127,0)
 . ;
"RTN","IBCBB",128,0)
 . ;          IB285 - Primary Insurance city missing
"RTN","IBCBB",129,0)
 . ;          IB286 - Secondary Insurance city missing
"RTN","IBCBB",130,0)
 . ;          IB287 - Tertiary Insurance city missing
"RTN","IBCBB",131,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,2),1)="" D   ; city is blank
"RTN","IBCBB",132,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",133,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(285) Q
"RTN","IBCBB",134,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",135,0)
 .. I CAS'="" D ERR(285) Q
"RTN","IBCBB",136,0)
 .. Q
"RTN","IBCBB",137,0)
 . ;
"RTN","IBCBB",138,0)
 . ;          IB288 - Primary Insurance state missing
"RTN","IBCBB",139,0)
 . ;          IB289 - Secondary Insurance state missing
"RTN","IBCBB",140,0)
 . ;          IB290 - Tertiary Insurance state missing
"RTN","IBCBB",141,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,3),1)="" D   ; state is blank
"RTN","IBCBB",142,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",143,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(288) Q
"RTN","IBCBB",144,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",145,0)
 .. I CAS'="" D ERR(288) Q
"RTN","IBCBB",146,0)
 .. Q
"RTN","IBCBB",147,0)
 . ;
"RTN","IBCBB",148,0)
 . ;          IB291 - Primary Insurance zipcode missing
"RTN","IBCBB",149,0)
 . ;          IB292 - Secondary Insurance zipcode missing
"RTN","IBCBB",150,0)
 . ;          IB293 - Tertiary Insurance zipcode missing
"RTN","IBCBB",151,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,4),1)="" D   ; zipcode is blank
"RTN","IBCBB",152,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",153,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(291) Q
"RTN","IBCBB",154,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",155,0)
 .. I CAS'="" D ERR(291) Q
"RTN","IBCBB",156,0)
 .. Q
"RTN","IBCBB",157,0)
 . ;
"RTN","IBCBB",158,0)
 . Q
"RTN","IBCBB",159,0)
 ;
"RTN","IBCBB",160,0)
 ; esg - IB*2*371 - check patient address fields
"RTN","IBCBB",161,0)
 K ^UTILITY("VAPA",$J)
"RTN","IBCBB",162,0)
 ;
"RTN","IBCBB",163,0)
 S IBFOR=0                              ; foreign address flag
"RTN","IBCBB",164,0)
 S IBC=+$$PTADDR^IBCEF(IBIFN,25)        ; country code ien
"RTN","IBCBB",165,0)
 I IBC D
"RTN","IBCBB",166,0)
 . N CODE
"RTN","IBCBB",167,0)
 . S CODE=$$GET1^DIQ(779.004,IBC,.01)   ; .01 code field file 779.004
"RTN","IBCBB",168,0)
 . I CODE'="",CODE'="USA" S IBFOR=1     ; foreign country exists
"RTN","IBCBB",169,0)
 . Q
"RTN","IBCBB",170,0)
 ;
"RTN","IBCBB",171,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,1),1)="" S IBER=IBER_"IB269;"
"RTN","IBCBB",172,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,4),1)="" S IBER=IBER_"IB270;"
"RTN","IBCBB",173,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,5),1)="",'IBFOR S IBER=IBER_"IB271;"
"RTN","IBCBB",174,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,11),1)="",'IBFOR S IBER=IBER_"IB272;"
"RTN","IBCBB",175,0)
 K ^UTILITY("VAPA",$J)
"RTN","IBCBB",176,0)
 ;
"RTN","IBCBB",177,0)
 ; esg - 9/20/07 - IB patch 371 - prevent EDI transmission for 3 payer
"RTN","IBCBB",178,0)
 ;       claims for all but the first payer.  To be removed with
"RTN","IBCBB",179,0)
 ;       eClaims Plus Iteration 3, phase 2 (IB patch 377)
"RTN","IBCBB",180,0)
 ;
"RTN","IBCBB",181,0)
 I +$G(^DGCR(399,IBIFN,"I2")),+$G(^DGCR(399,IBIFN,"I3")),$$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB",182,0)
 . ; for MRA request claims, make sure the MRA secondary claim is forced to print
"RTN","IBCBB",183,0)
 . I $$REQMRA^IBEFUNC(IBIFN) D  Q
"RTN","IBCBB",184,0)
 .. I '$P($G(^DGCR(399,IBIFN,"TX")),U,9) S IBER=IBER_"IB146;"
"RTN","IBCBB",185,0)
 .. Q
"RTN","IBCBB",186,0)
 . ;
"RTN","IBCBB",187,0)
 . I $$COBN^IBCEF(IBIFN)=1 Q   ; primary payer sequence claims are OK
"RTN","IBCBB",188,0)
 . ;
"RTN","IBCBB",189,0)
 . ; But claims with a payer sequence of 2 or 3 need to print locally
"RTN","IBCBB",190,0)
 . S IBER=IBER_"IB147;"
"RTN","IBCBB",191,0)
 . Q
"RTN","IBCBB",192,0)
 ;
"RTN","IBCBB",193,0)
 D ^IBCBB1
"RTN","IBCBB",194,0)
 Q
"RTN","IBCBB",195,0)
 ;
"RTN","IBCBB",196,0)
EDIT(IBIFN) ; Run edits from within the billing edit screens
"RTN","IBCBB",197,0)
 N IBVIEW,IBDISP,IBNOFIX,DIR,X,Y
"RTN","IBCBB",198,0)
 S (IBNOFIX,IBVIEW,IBDISP)=1
"RTN","IBCBB",199,0)
 D EDITS^IBCB2
"RTN","IBCBB",200,0)
 W ! S DIR("A")="Press RETURN to continue",DIR(0)="E" D ^DIR K DIR
"RTN","IBCBB",201,0)
 Q
"RTN","IBCBB",202,0)
 ;
"RTN","IBCBB",203,0)
TOB(IBND0) ;
"RTN","IBCBB",204,0)
 ; IBND0 = the 0-node of the bill (file 399)
"RTN","IBCBB",205,0)
 Q ($P(IBND0,U,24)_$P($G(^DGCR(399.1,+$P(IBND0,U,25),0)),U,2)_$P(IBND0,U,26))
"RTN","IBCBB",206,0)
 ;
"RTN","IBCBB",207,0)
ERR(Z) ; update IBER variable from the above insurance checks
"RTN","IBCBB",208,0)
 ; Z is the IB error code# for the primary insurance error
"RTN","IBCBB",209,0)
 N IBERRNO
"RTN","IBCBB",210,0)
 S IBERRNO="IB"_(Z+IBISEQ-1)
"RTN","IBCBB",211,0)
 I IBER[IBERRNO Q
"RTN","IBCBB",212,0)
 S IBER=IBER_IBERRNO_";"
"RTN","IBCBB",213,0)
 Q
"RTN","IBCBB",214,0)
 ;
"RTN","IBCBB1")
0^29^B66788213^B70812955
"RTN","IBCBB1",1,0)
IBCBB1 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
"RTN","IBCBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232,280,155,320,343,349,363,371**;21-MAR-94;Build 57
"RTN","IBCBB1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB1",4,0)
 ;
"RTN","IBCBB1",5,0)
 ;MAP TO DGCRBB1
"RTN","IBCBB1",6,0)
 ;
"RTN","IBCBB1",7,0)
% ;Bill Status
"RTN","IBCBB1",8,0)
 N Z,Z0,Z1
"RTN","IBCBB1",9,0)
 I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
"RTN","IBCBB1",10,0)
 ;
"RTN","IBCBB1",11,0)
 ;Statement Covers From
"RTN","IBCBB1",12,0)
 I IBFDT="" S IBER=IBER_"IB061;"
"RTN","IBCBB1",13,0)
 I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
"RTN","IBCBB1",14,0)
 I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
"RTN","IBCBB1",15,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",16,0)
 ; if inpat - from date must not be prior to admit date.
"RTN","IBCBB1",17,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
"RTN","IBCBB1",18,0)
 ;
"RTN","IBCBB1",19,0)
 ;Statement Covers To
"RTN","IBCBB1",20,0)
 I IBTDT="" S IBER=IBER_"IB062;"
"RTN","IBCBB1",21,0)
 I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
"RTN","IBCBB1",22,0)
 I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
"RTN","IBCBB1",23,0)
 S IBTFY=$$FY^IBOUTL(IBTDT)
"RTN","IBCBB1",24,0)
 ;
"RTN","IBCBB1",25,0)
 ;Total Charges
"RTN","IBCBB1",26,0)
 I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
"RTN","IBCBB1",27,0)
 ;
"RTN","IBCBB1",28,0)
 ;Billable charges for secondary claim
"RTN","IBCBB1",29,0)
 I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
"RTN","IBCBB1",30,0)
 ;Fiscal Year 1
"RTN","IBCBB1",31,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",32,0)
 ;
"RTN","IBCBB1",33,0)
 ;Check provider link for current user, enterer, reviewer and Authorizor
"RTN","IBCBB1",34,0)
 I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",35,0)
 I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",36,0)
 I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
"RTN","IBCBB1",37,0)
 I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
"RTN","IBCBB1",38,0)
 ;
"RTN","IBCBB1",39,0)
 I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
"RTN","IBCBB1",40,0)
 ; If ins bill, must have valid COB sequence
"RTN","IBCBB1",41,0)
 I $P(IBND0,U,11)="i",$S($P(IBND0,U,21)="":1,1:"PST"'[$P(IBND0,U,21)) S IBER=IBER_"IB324;"
"RTN","IBCBB1",42,0)
 ;
"RTN","IBCBB1",43,0)
 ; Check for valid sec provider id for current ins
"RTN","IBCBB1",44,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'="" D
"RTN","IBCBB1",45,0)
 . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TERTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
"RTN","IBCBB1",46,0)
 ; Check NPIs
"RTN","IBCBB1",47,0)
 D NPICHK^IBCBB11
"RTN","IBCBB1",48,0)
 ;
"RTN","IBCBB1",49,0)
 ; Check taxonomies
"RTN","IBCBB1",50,0)
 D TAXCHK^IBCBB11
"RTN","IBCBB1",51,0)
 ;
"RTN","IBCBB1",52,0)
 ; Check for Physician Name
"RTN","IBCBB1",53,0)
 K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
"RTN","IBCBB1",54,0)
 I $P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
"RTN","IBCBB1",55,0)
 ;
"RTN","IBCBB1",56,0)
 N FUNCTION,IBINS
"RTN","IBCBB1",57,0)
 S FUNCTION=$S($$FT^IBCEF(IBIFN)=3:4,1:3)
"RTN","IBCBB1",58,0)
 I IBER'["IB303;" D
"RTN","IBCBB1",59,0)
 . F IBINS=1:1:3 D
"RTN","IBCBB1",60,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS)
"RTN","IBCBB1",61,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB1",62,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB1",63,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB1",64,0)
 ... S IBOK=0
"RTN","IBCBB1",65,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB1",66,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB236;",IBINS=2:"IB237;",IBINS=3:"IB238;",1:"")
"RTN","IBCBB1",67,0)
 ;
"RTN","IBCBB1",68,0)
 D PRIIDCHK^IBCBB11
"RTN","IBCBB1",69,0)
 ;
"RTN","IBCBB1",70,0)
 N IBM,IBM1
"RTN","IBCBB1",71,0)
 S IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCBB1",72,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCBB1",73,0)
 I $P(IBM,U),$P($G(^DIC(36,$P(IBM,U),4)),U,6),$P(IBM1,U,2)="" S IBER=IBER_"IB244;"
"RTN","IBCBB1",74,0)
 I $P(IBM,U,2),$P($G(^DIC(36,$P(IBM,U,2),4)),U,6),$P(IBM1,U,3)="" S IBER=IBER_"IB245;"
"RTN","IBCBB1",75,0)
 I $P(IBM,U,3),$P($G(^DIC(36,$P(IBM,U,3),4)),U,6),$P(IBM1,U,4)="" S IBER=IBER_"IB246;"
"RTN","IBCBB1",76,0)
 ;
"RTN","IBCBB1",77,0)
 ; If outside facility, check for ID and qualifier in 355.93
"RTN","IBCBB1",78,0)
 ; 5/15/06 - esg - hard error IB243 turned into warning message instead
"RTN","IBCBB1",79,0)
 S Z=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCBB1",80,0)
 I Z D
"RTN","IBCBB1",81,0)
 . I $P($G(^IBA(355.93,Z,0)),U,9)=""!($P($G(^IBA(355.93,Z,0)),U,13)="") D
"RTN","IBCBB1",82,0)
 .. N Z1,Z2
"RTN","IBCBB1",83,0)
 .. S Z1="Missing Lab or Facility Primary ID for non-VA facility, "
"RTN","IBCBB1",84,0)
 .. S Z2=$$EXTERNAL^DILFD(399,232,,Z)
"RTN","IBCBB1",85,0)
 .. I $L(Z2)'>19 D WARN^IBCBB11(Z1_Z2) Q
"RTN","IBCBB1",86,0)
 .. D WARN^IBCBB11(Z1),WARN^IBCBB11("     "_Z2)
"RTN","IBCBB1",87,0)
 .. Q
"RTN","IBCBB1",88,0)
 . Q
"RTN","IBCBB1",89,0)
 ;
"RTN","IBCBB1",90,0)
 ; Must be one and only one division on bill
"RTN","IBCBB1",91,0)
 S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
"RTN","IBCBB1",92,0)
 I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",93,0)
 ; Division address must be defined in institution file
"RTN","IBCBB1",94,0)
 I $P(IBND0,U,22) D
"RTN","IBCBB1",95,0)
 . N Z,Z0,Z1
"RTN","IBCBB1",96,0)
 . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
"RTN","IBCBB1",97,0)
 . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
"RTN","IBCBB1",98,0)
 . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",99,0)
 . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",100,0)
 ;
"RTN","IBCBB1",101,0)
 ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
"RTN","IBCBB1",102,0)
 S (IBRTCHV,IBPICHV)=0
"RTN","IBCBB1",103,0)
 I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
"RTN","IBCBB1",104,0)
 I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
"RTN","IBCBB1",105,0)
 I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
"RTN","IBCBB1",106,0)
 ;
"RTN","IBCBB1",107,0)
 N IBZPRC,IBZPRCUB
"RTN","IBCBB1",108,0)
 D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
"RTN","IBCBB1",109,0)
 ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
"RTN","IBCBB1",110,0)
 I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
"RTN","IBCBB1",111,0)
 . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
"RTN","IBCBB1",112,0)
 .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
"RTN","IBCBB1",113,0)
 .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
"RTN","IBCBB1",114,0)
 .. I '$P(Z0,U,7) S ZE=1
"RTN","IBCBB1",115,0)
 ;
"RTN","IBCBB1",116,0)
 ; Extract procedures for UB-04
"RTN","IBCBB1",117,0)
 D F^IBCEF("N-UB-04 PROCEDURES","IBZPRCUB",,IBIFN)
"RTN","IBCBB1",118,0)
 ; Does this bill have ANY prescriptions associated with it?
"RTN","IBCBB1",119,0)
 ; Must bill prescriptions separately from other charges
"RTN","IBCBB1",120,0)
 ;
"RTN","IBCBB1",121,0)
 I $$ISRX^IBCEF1(IBIFN) D
"RTN","IBCBB1",122,0)
 . N IBZ,IBRXDEF
"RTN","IBCBB1",123,0)
 . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
"RTN","IBCBB1",124,0)
 . F  S IBZ=$O(IBZPRCUB(IBZ)) Q:'IBZ  I IBZPRCUB(IBZ),+$P(IBZPRCUB(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
"RTN","IBCBB1",125,0)
 . K IBZ
"RTN","IBCBB1",126,0)
 ;
"RTN","IBCBB1",127,0)
 ; Check that COB sequences are not skipped
"RTN","IBCBB1",128,0)
 K Z
"RTN","IBCBB1",129,0)
 F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
"RTN","IBCBB1",130,0)
 F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
"RTN","IBCBB1",131,0)
 K Z
"RTN","IBCBB1",132,0)
 ; HD64676  IB*2*371 - OK for payer sequence to be blank when the Rate
"RTN","IBCBB1",133,0)
 ;    Type is either Interagency or Sharing Agreement
"RTN","IBCBB1",134,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,21)="",$P($G(^DGCR(399,IBIFN,0)),U,7)'=4,$P($G(^DGCR(399,IBIFN,0)),U,7)'=9 S IBER=IBER_"IB323;"
"RTN","IBCBB1",135,0)
 K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
"RTN","IBCBB1",136,0)
 ; Coding method should agree with types of procedure codes
"RTN","IBCBB1",137,0)
 S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
"RTN","IBCBB1",138,0)
 I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK=0 Q
"RTN","IBCBB1",139,0)
 I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
"RTN","IBCBB1",140,0)
 D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
"RTN","IBCBB1",141,0)
 Q:$G(IBQUIT)
"RTN","IBCBB1",142,0)
 ;
"RTN","IBCBB1",143,0)
 ;Other things that could be added:  Rev Code - calculating charges
"RTN","IBCBB1",144,0)
 ;        Diagnosis Coding, if MT copay - check for other co-payments
"RTN","IBCBB1",145,0)
 ;
"RTN","IBCBB1",146,0)
 I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
"RTN","IBCBB1",147,0)
 I $P(IBNDTX,U,8)!$P(IBNDTX,U,9) D WARN^IBCBB11($S($$REQMRA^IBEFUNC(IBIFN)&($P(IBNDTX,U,9)):"MRA Secondary ",1:"")_"Bill has been forced to print "_$S($P(IBNDTX,U,8)=1!($P(IBNDTX,U,9)=1):"locally",1:"at clearinghouse"))
"RTN","IBCBB1",148,0)
 N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IBA(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
"RTN","IBCBB1",149,0)
 . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
"RTN","IBCBB1",150,0)
 ;
"RTN","IBCBB1",151,0)
 D VALNDC^IBCBB11(IBIFN,DFN)  ;validate NDC#
"RTN","IBCBB1",152,0)
 ;
"RTN","IBCBB1",153,0)
 ;Build AR array if no errors and MRA not needed or already rec'd
"RTN","IBCBB1",154,0)
 I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
"RTN","IBCBB1",155,0)
 ;
"RTN","IBCBB1",156,0)
END ;Don't kill IBIFN, IBER, DFN
"RTN","IBCBB1",157,0)
 I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
"RTN","IBCBB1",158,0)
 K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
"RTN","IBCBB1",159,0)
 K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
"RTN","IBCBB1",160,0)
 I $D(IBER),IBER="" W !,"No Errors found for National edits"
"RTN","IBCBB1",161,0)
 Q
"RTN","IBCBB1",162,0)
 ;
"RTN","IBCBB1",163,0)
ARRAY ;Build PRCASV(array)
"RTN","IBCBB1",164,0)
 N IBCOBN,X
"RTN","IBCBB1",165,0)
 K PRCASV
"RTN","IBCBB1",166,0)
 Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
"RTN","IBCBB1",167,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCBB1",168,0)
 S X=IBIFN
"RTN","IBCBB1",169,0)
 S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
"RTN","IBCBB1",170,0)
 S PRCASV("APR")=DUZ
"RTN","IBCBB1",171,0)
 S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
"RTN","IBCBB1",172,0)
 I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
"RTN","IBCBB1",173,0)
 S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
"RTN","IBCBB1",174,0)
 S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
"RTN","IBCBB1",175,0)
 S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
"RTN","IBCBB1",176,0)
 ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11)]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
"RTN","IBCBB1",177,0)
PLUS I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
"RTN","IBCBB1",178,0)
 I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
"RTN","IBCBB1",179,0)
 ;
"RTN","IBCBB1",180,0)
 N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
"RTN","IBCBB1",181,0)
 N IBNDI1
"RTN","IBCBB1",182,0)
 Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
"RTN","IBCBB1",183,0)
 S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
"RTN","IBCBB1",184,0)
 S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
"RTN","IBCBB1",185,0)
 S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
"RTN","IBCBB1",186,0)
 S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
"RTN","IBCBB1",187,0)
 ; Check that this is a secondary or tertiary bill and insurance for previous
"RTN","IBCBB1",188,0)
 ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
"RTN","IBCBB1",189,0)
 I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
"RTN","IBCBB1",190,0)
 Q
"RTN","IBCBB1",191,0)
 ;
"RTN","IBCBB1",192,0)
MRA N IBEOB S IBEOB=0
"RTN","IBCBB1",193,0)
 ;
"RTN","IBCBB1",194,0)
 K PRCASV("MEDURE"),PRCASV("MEDCA")
"RTN","IBCBB1",195,0)
 ; Get EOB data
"RTN","IBCBB1",196,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCBB1",197,0)
 . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
"RTN","IBCBB1",198,0)
 Q  ;MRA
"RTN","IBCBB1",199,0)
 ;
"RTN","IBCBB1",200,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB1",201,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11")
0^30^B16826545^B14703047
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371**;21-MAR-94;Build 57
"RTN","IBCBB11",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
 ; Check for required NPIs
"RTN","IBCBB11",30,0)
NPICHK ;
"RTN","IBCBB11",31,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z
"RTN","IBCBB11",32,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",33,0)
 ; Check providers
"RTN","IBCBB11",34,0)
 S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",35,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",36,0)
 . I IBNPIREQ S IBER=IBER_"IB"_(140+$P(IBNONPI,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",37,0)
 . D WARN("NPI for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,$P(IBNONPI,U,Z))_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",38,0)
 ; Check organizations
"RTN","IBCBB11",39,0)
 S IBNONPI=""
"RTN","IBCBB11",40,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",41,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",42,0)
 . I IBNPIREQ S IBER=IBER_"IB"_(160+$P(IBNONPI,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",43,0)
 . ; PRXM/KJH - Changed descriptions.
"RTN","IBCBB11",44,0)
 . D WARN("NPI for the "_$P("Division^Non-VA Service Facility^Billing Provider",U,$P(IBNONPI,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",45,0)
 Q
"RTN","IBCBB11",46,0)
 ;
"RTN","IBCBB11",47,0)
 ; Check for required taxonomies
"RTN","IBCBB11",48,0)
TAXCHK ;
"RTN","IBCBB11",49,0)
 N IBTAXS,IBNOTAX,IBTAXREQ,Z
"RTN","IBCBB11",50,0)
 S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",51,0)
 ; Check providers
"RTN","IBCBB11",52,0)
 S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",53,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",54,0)
 . I IBTAXREQ S IBER=IBER_"IB"_(250+$P(IBNOTAX,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",55,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,$P(IBNOTAX,U,Z))_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",56,0)
 ; Check organizations
"RTN","IBCBB11",57,0)
 S IBNOTAX=""
"RTN","IBCBB11",58,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",59,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",60,0)
 . I IBTAXREQ S IBER=IBER_"IB"_(164+$P(IBNOTAX,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",61,0)
 . ; PRXM/KJH - Changed descriptions.
"RTN","IBCBB11",62,0)
 . D WARN("Taxonomy for the "_$P("Division^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",63,0)
 Q
"RTN","IBCBB11",64,0)
 ;
"RTN","IBCBB11",65,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB11",66,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB11",67,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB11",68,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB11",69,0)
 N IBX,IBRXCOL
"RTN","IBCBB11",70,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB11",71,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB11",72,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB11",73,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB11",74,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB11",75,0)
 Q
"RTN","IBCBB11",76,0)
 ;
"RTN","IBCBB11",77,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",78,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",79,0)
 ; 
"RTN","IBCBB11",80,0)
 N IBI,IBZ
"RTN","IBCBB11",81,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",82,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",83,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",84,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",85,0)
 Q
"RTN","IBCBB11",86,0)
 ;
"RTN","IBCBB2")
0^7^B43441310^B42055097
"RTN","IBCBB2",1,0)
IBCBB2 ;ALB/ARH - CONTINUATION OF EDIT CHECKS ROUTINE (CMS-1500) ;04/14/92
"RTN","IBCBB2",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,245,232,296,320,349,371**;21-MAR-94;Build 57
"RTN","IBCBB2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB2",4,0)
 ;
"RTN","IBCBB2",5,0)
 ;MAP TO DGCRBB2
"RTN","IBCBB2",6,0)
 ;
"RTN","IBCBB2",7,0)
EN ;
"RTN","IBCBB2",8,0)
 N IBI,IBJ,IBN,IBY,IBDX,IBDXO,IBDXL,IBCPT,IBCPTL,IBOLAB,Z,IBXSAVE,IBLOC,IBTX,IBPS,IBSP,IBLCT,IBNVFLG,IBU3
"RTN","IBCBB2",9,0)
 I '$D(IBER) S IBER=""
"RTN","IBCBB2",10,0)
 S IBTX=$$TXMT^IBCEF4(IBIFN)
"RTN","IBCBB2",11,0)
 ;
"RTN","IBCBB2",12,0)
 ; Max 4 modifiers per CPT code allowed before warning
"RTN","IBCBB2",13,0)
 K IBXDATA
"RTN","IBCBB2",14,0)
 D F^IBCEF("N-HCFA 1500 MODIFIERS",,,IBIFN) ;Get modifiers
"RTN","IBCBB2",15,0)
 ;
"RTN","IBCBB2",16,0)
 S Z=0 F  S Z=$O(IBZPRC92(Z)) Q:'Z  I $P(IBZPRC92(Z),U)["ICPT(",$L($P(IBZPRC92(Z),U,15),",")>4 S IBI="Proc "_$$PRCD^IBCEF1($P(IBZPRC92(Z),U))_" has > 4 modifiers - only first 4 will be used" D WARN^IBCBB11(IBI)
"RTN","IBCBB2",17,0)
 ; ICD-9 diagnosis, at least 1 required
"RTN","IBCBB2",18,0)
 D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBER=IBER_"IB071;"
"RTN","IBCBB2",19,0)
 S IBI=$O(IBDXO(0))
"RTN","IBCBB2",20,0)
 I IBI,$$INPAT^IBCEF(IBIFN,1),$E($$ICD9^IBACSV(+$P(IBDXO(IBI),U)))="V" S Z="Principal Dx V-code may not be valid" D WARN^IBCBB11(Z)
"RTN","IBCBB2",21,0)
 ;
"RTN","IBCBB2",22,0)
 ; CPT procs must be associated with a dx, must have a defined provider
"RTN","IBCBB2",23,0)
 S (IBLOC,IBN,IBI,IBY)=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:IBI'?1N.N  S IBCPT=^(IBI,0) D  I +IBY S IBN=1
"RTN","IBCBB2",24,0)
 . I 'IBLOC,$P(IBCPT,U,15)'="",IBTX S Z="At least 1 charge has local box 24K data that will not be transmitted - " S IBLOC=1 D WARN^IBCBB11(Z) S Z="  This data will only print locally" D WARN^IBCBB11(Z)
"RTN","IBCBB2",25,0)
 . I $P(IBCPT,U)'["ICPT(" S:IBER'["IB092" IBER=IBER_"IB092;" Q
"RTN","IBCBB2",26,0)
 . S IBY=1 F IBJ=11:1:14 I +$P(IBCPT,"^",IBJ) S IBCPTL(+$P(IBCPT,"^",IBJ))="",IBY=0
"RTN","IBCBB2",27,0)
 I +IBN S IBER=IBER_"IB072;"
"RTN","IBCBB2",28,0)
 ;
"RTN","IBCBB2",29,0)
 I '$$OCC10(IBIFN,.IBDX,2) S IBER=IBER_"IB093;"
"RTN","IBCBB2",30,0)
 ; CMS-1500: dxs associated with procs must be defined dxs for the bill
"RTN","IBCBB2",31,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI))  Q:'IBI  S IBDXL(IBDX(IBI))=""
"RTN","IBCBB2",32,0)
 S (IBN,IBI)=0 F  S IBI=$O(IBCPTL(IBI)) Q:'IBI  I '$D(IBDXL(IBI)) S IBN=1 Q
"RTN","IBCBB2",33,0)
 I +IBN S IBER=IBER_"IB073;"
"RTN","IBCBB2",34,0)
 ; ejk *296* Change # of diagnoses codes from 4 to 8 on CMS-1500 Claims. 
"RTN","IBCBB2",35,0)
 I IBTX S IBI=8 F  S IBI=$O(IBDXO(IBI)) Q:'IBI  S Z=+$G(IBDX(+$G(IBDXO(IBI)))) I Z,$D(IBCPTL(Z)) D WARN^IBCBB11("Too many diagnoses for claim & will be rejected - consider printing locally")
"RTN","IBCBB2",36,0)
 ;
"RTN","IBCBB2",37,0)
 I $$WNRBILL^IBEFUNC(IBIFN),$$MRATYPE^IBEFUNC(IBIFN)'="B" S IBER=IBER_"IB087;"
"RTN","IBCBB2",38,0)
 ;
"RTN","IBCBB2",39,0)
 ; IB*320 - CLIA# error/warning - error msg for MRA claims, else warning
"RTN","IBCBB2",40,0)
 I $P(IBNDU2,U,13)="",$$CLIAREQ^IBCEP8A(IBIFN) D
"RTN","IBCBB2",41,0)
 . I $$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB235;" Q
"RTN","IBCBB2",42,0)
 . D WARN^IBCBB11("Claim contains laboratory services. The payer may require a CLIA #.")
"RTN","IBCBB2",43,0)
 . Q
"RTN","IBCBB2",44,0)
 ;
"RTN","IBCBB2",45,0)
 ; Only one occurrence code can be present for event date for box 14
"RTN","IBCBB2",46,0)
 S Z=$$EVENT^IBCF22(IBIFN,.IBXSAVE,.IBI)
"RTN","IBCBB2",47,0)
 I IBI S IBER=IBER_"IB099;"
"RTN","IBCBB2",48,0)
 ;
"RTN","IBCBB2",49,0)
 ; esg - 6/6/07 - warning if missing non-VA care type for outside facility
"RTN","IBCBB2",50,0)
 S IBNVFLG=0
"RTN","IBCBB2",51,0)
 I $P(IBNDU2,U,10),'$P(IBNDU2,U,11) D WARN^IBCBB11("Non-VA facility indicated, but the Non-VA Care Type field is not defined") S IBNVFLG=1
"RTN","IBCBB2",52,0)
 ;
"RTN","IBCBB2",53,0)
 ; unit/charge limits
"RTN","IBCBB2",54,0)
 K IBXDATA
"RTN","IBCBB2",55,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN) ;Get charge lines
"RTN","IBCBB2",56,0)
 S (IBLCT,IBOLAB)=0,IBPS="",IBSP=$$BILLSPEC^IBCEU3(IBIFN)
"RTN","IBCBB2",57,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D  Q:IBER["IB310"!(IBER["IB311")
"RTN","IBCBB2",58,0)
 . S IBLCT=IBLCT+1
"RTN","IBCBB2",59,0)
 . I $P(IBNDU2,U,11) D
"RTN","IBCBB2",60,0)
 .. I '$P(IBXDATA(IBI),U,11) S IBPS=IBPS_$S(IBPS'="":",",1:"")_IBI Q
"RTN","IBCBB2",61,0)
 .. I $P(IBXDATA(IBI),U,14),"24"'[$P(IBNDU2,U,11) D WARN^IBCBB11("Outside lab charges exist on a non-lab NON-VA bill")
"RTN","IBCBB2",62,0)
 . I '$P(IBNDU2,U,11),$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Purchased service amounts are invalid unless this is a NON-VA bill")
"RTN","IBCBB2",63,0)
 . I IBNVFLG,'$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Non-VA facility indicated, but no purchased service charge on line# "_IBI)
"RTN","IBCBB2",64,0)
 . I $D(IBXDATA(IBI,"A")) S IBER=IBER_"IB310;" Q
"RTN","IBCBB2",65,0)
 . I $D(IBXDATA(IBI,"ARX")),IBER'["311;" S IBER=IBER_"IB311;" Q
"RTN","IBCBB2",66,0)
 . I $P(IBXDATA(IBI),U,14) S IBOLAB=IBOLAB+1
"RTN","IBCBB2",67,0)
 . ; Place of service required
"RTN","IBCBB2",68,0)
 . I $G(IBER)'["IB314;",$P(IBXDATA(IBI),U,3)="" S IBER=IBER_"IB314;"
"RTN","IBCBB2",69,0)
 . ; Type of service required
"RTN","IBCBB2",70,0)
 . I $G(IBER)'["IB313;",$P(IBXDATA(IBI),U,4)="" S IBER=IBER_"IB313;"
"RTN","IBCBB2",71,0)
 . ; 43 and 53 are invalid types of service
"RTN","IBCBB2",72,0)
 . I $G(IBER)'["IB110;",($P(IBXDATA(IBI),U,4)=43!($P(IBXDATA(IBI),U,4)=53)) S IBER=IBER_"IB110;"
"RTN","IBCBB2",73,0)
 . ; Units for the line item must be less than 100/1000
"RTN","IBCBB2",74,0)
 . I IBER'["IB088",$P(IBXDATA(IBI),U,9)'<100 D
"RTN","IBCBB2",75,0)
 .. I $P(IBXDATA(IBI),U,4)'=7 S IBER=IBER_"IB088;" Q
"RTN","IBCBB2",76,0)
 .. I $P(IBXDATA(IBI),U,9)'<1000 S IBER=IBER_"IB088;"
"RTN","IBCBB2",77,0)
 . ; Line item total charge must be less than $10,000.00, greater than 0
"RTN","IBCBB2",78,0)
 . I IBER'["IB090",$P(IBXDATA(IBI),U,9)'<10000 S IBER=IBER_"IB090;"
"RTN","IBCBB2",79,0)
 . I '($P(IBXDATA(IBI),U,9)*$P(IBXDATA(IBI),U,8)),$$COBN^IBCEF(IBIFN)'>1 S Z="Procedure "_$P(IBXDATA(IBI),U,5)_" has a 0-charge and will not be transmitted" D WARN^IBCBB11(Z)
"RTN","IBCBB2",80,0)
 I IBTX,IBLCT>50 D
"RTN","IBCBB2",81,0)
 . I '$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB308;" Q
"RTN","IBCBB2",82,0)
 . I '$P(IBNDTX,U,9) S IBER=IBER_"IB325;"
"RTN","IBCBB2",83,0)
 S IBU3=$P($G(^DGCR(399,IBIFN,"U3")),U,4,7) I $TR(IBU3,U)'="" D
"RTN","IBCBB2",84,0)
 .I +IBSP'=35 D WARN^IBCBB11("Chiropractic service details only valid if provider specialty is '35'")
"RTN","IBCBB2",85,0)
 .I $P(IBU3,U,2)="" S IBER=IBER_"IB137;"
"RTN","IBCBB2",86,0)
 .I $P(IBU3,U,4)="" S IBER=IBER_"IB138;" Q
"RTN","IBCBB2",87,0)
 .I $P(IBU3,U,3)="","AM"[$P(IBU3,U,4) S IBER=IBER_"IB139;"
"RTN","IBCBB2",88,0)
 .Q
"RTN","IBCBB2",89,0)
 I IBPS'="" D WARN^IBCBB11("NON-VA facility indicated, but no purchased service charge on line item"_$S(IBPS[",":"s",1:"")_" #"_IBPS)
"RTN","IBCBB2",90,0)
 I $P(IBNDU2,U,11),$P(IBNDU2,U,11)=4,IBOLAB>1 D WARN^IBCBB11("For proper payment, you must bill each outside lab on a separate claim form")
"RTN","IBCBB2",91,0)
 K IBXDATA
"RTN","IBCBB2",92,0)
 ;
"RTN","IBCBB2",93,0)
 ;       ; Check for Physician Name
"RTN","IBCBB2",94,0)
 D F^IBCEF("N-REFERRING PROVIDER NAME",,,IBIFN)
"RTN","IBCBB2",95,0)
 I $P($G(IBXDATA),U)]"" D
"RTN","IBCBB2",96,0)
 .N IBZ,FUNCTION,IBINS
"RTN","IBCBB2",97,0)
 .S FUNCTION=1
"RTN","IBCBB2",98,0)
 .F IBINS=1:1:3 D
"RTN","IBCBB2",99,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS,FUNCTION)
"RTN","IBCBB2",100,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB2",101,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB2",102,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB2",103,0)
 ... S IBOK=0
"RTN","IBCBB2",104,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB2",105,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB239;",IBINS=2:"IB240;",IBINS=3:"IB241;",1:"")
"RTN","IBCBB2",106,0)
 ;
"RTN","IBCBB2",107,0)
 Q
"RTN","IBCBB2",108,0)
 ;
"RTN","IBCBB2",109,0)
OCC10(IBIFN,IBARR,IBFT) ; Determine if occurrence code 10 exists for pregnancy dx
"RTN","IBCBB2",110,0)
 ; IBARR=array subscripted by ien of DX code if IBFT=2 (CMS-1500 form)
"RTN","IBCBB2",111,0)
 ;                         by seq # and = ien of DX code if IBFT'=2
"RTN","IBCBB2",112,0)
 ;
"RTN","IBCBB2",113,0)
 N IBN,IBI,IBXDATA,IBXSAVE,IBDX,Z
"RTN","IBCBB2",114,0)
 S IBN=1
"RTN","IBCBB2",115,0)
 ;
"RTN","IBCBB2",116,0)
 I '$D(^TMP($J,"LMD")) D
"RTN","IBCBB2",117,0)
 . D F^IBCEF("N-OCCURRENCE CODES",,,IBIFN)
"RTN","IBCBB2",118,0)
 . S ^TMP($J,"LMD")=""
"RTN","IBCBB2",119,0)
 . S Z=0 F  S Z=$O(IBXSAVE("OCC",Z)) Q:'Z  I +IBXSAVE("OCC",Z)=10 S ^TMP($J,"LMD")=1 Q
"RTN","IBCBB2",120,0)
 ;
"RTN","IBCBB2",121,0)
 I '^TMP($J,"LMD") S IBI=0 F  S IBI=$O(IBARR(IBI))  Q:'IBI  D  Q:'IBN
"RTN","IBCBB2",122,0)
 . N Z,Z1
"RTN","IBCBB2",123,0)
 . ; If a pregnancy DX exists, must be an occurrence code 10 for LMP date
"RTN","IBCBB2",124,0)
 . ; dx ranges are: V22*-V24*, V27*-V28*, 630*-677*
"RTN","IBCBB2",125,0)
 . S IBDX=$S($G(IBFT)'=2:+IBARR(IBI),1:IBI)
"RTN","IBCBB2",126,0)
 . S Z=$E($P($$ICD9^IBACSV(IBDX),U),1,3),Z1=$E(Z,2,3)
"RTN","IBCBB2",127,0)
 . I $S(Z'<630&(Z<678):1,$E(Z)="V":$S(Z1'<22&(Z1<25):1,1:Z1'<27&(Z1<28)),1:0) S IBN=0 ;Pregnancy Dx exists
"RTN","IBCBB2",128,0)
 ;
"RTN","IBCBB2",129,0)
OCC10Q K ^TMP($J,"LMD")
"RTN","IBCBB2",130,0)
 Q IBN
"RTN","IBCBB2",131,0)
 ;
"RTN","IBCBB3")
0^32^B41352216^B37225304
"RTN","IBCBB3",1,0)
IBCBB3 ;ALB/TMP - CONTINUATION OF EDIT CHECKS ROUTINE (MEDICARE) ;06/23/98
"RTN","IBCBB3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,349,371**;21-MAR-94;Build 57
"RTN","IBCBB3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB3",4,0)
 ;
"RTN","IBCBB3",5,0)
EDITMRA(IBQUIT,IBER,IBIFN,IBFT) ;
"RTN","IBCBB3",6,0)
 ; Requires execution of GVAR^IBCBB, IBIFN defined
"RTN","IBCBB3",7,0)
 ; File IB ERROR (350.8) contains error codes/text
"RTN","IBCBB3",8,0)
 ;
"RTN","IBCBB3",9,0)
 N IBMRATYP,Z,IBZP,IBZP1,IBOK
"RTN","IBCBB3",10,0)
 S IBQUIT=0 ;Flag to say we have too many errors - quit edits
"RTN","IBCBB3",11,0)
 ;
"RTN","IBCBB3",12,0)
 S IBMRATYP=$$MRATYPE^IBEFUNC(IBIFN,"C")
"RTN","IBCBB3",13,0)
 ;
"RTN","IBCBB3",14,0)
 I IBFT=3 D
"RTN","IBCBB3",15,0)
 . D PARTA
"RTN","IBCBB3",16,0)
 ;
"RTN","IBCBB3",17,0)
 I IBFT=2 D PARTB^IBCBB9
"RTN","IBCBB3",18,0)
 ;
"RTN","IBCBB3",19,0)
 K IBXDATA D F^IBCEF("N-ADMITTING DIAGNOSIS",,,IBIFN)
"RTN","IBCBB3",20,0)
 ; Req. for UB-04 type of bills 11x!18x
"RTN","IBCBB3",21,0)
 I $G(IBXDATA)="",IBFT=3 D  Q:IBQUIT
"RTN","IBCBB3",22,0)
 . N Z
"RTN","IBCBB3",23,0)
 . I "^11^18^"[(U_IBTOB12_U) S IBQUIT=$$IBER^IBCBB3(.IBER,231) Q
"RTN","IBCBB3",24,0)
 . I $$INPAT^IBCEF(IBIFN,1) S Z="Admitting Diagnosis may be required by payer, please verify" D WARN^IBCBB11(Z)
"RTN","IBCBB3",25,0)
 ;
"RTN","IBCBB3",26,0)
 D GETPRV^IBCEU(IBIFN,"2,3,4",.Z)
"RTN","IBCBB3",27,0)
 S IBOK=1,Z=0,IBZP=U F  S Z=$O(Z(Z)) Q:'Z  S:$S($P($G(Z(Z,1)),U,3)["VA(200":1,1:0) IBZP=IBZP_+$P(Z(Z,1),U,3)_U
"RTN","IBCBB3",28,0)
 D ALLPROC^IBCVA1(IBIFN,.IBZP1)
"RTN","IBCBB3",29,0)
 S Z=0 F  S Z=$O(IBZP1(Z)) Q:'Z  I $P(IBZP1(Z),U,18),IBZP'[(U_$P(IBZP1(Z),U,18)_U) S IBOK=0 Q
"RTN","IBCBB3",30,0)
 I 'IBOK D WARN^IBCBB11("At least one provider on a procedure does not match your "_$S(IBFT=2:"render",1:"attend")_"ing or operating provider")
"RTN","IBCBB3",31,0)
 I IBFT=2 D EN^IBCBB2
"RTN","IBCBB3",32,0)
 ; edit checks for UB-04 (institutional) forms
"RTN","IBCBB3",33,0)
 I IBFT=3 D EN^IBCBB21(.IBZPRC92)
"RTN","IBCBB3",34,0)
 ;
"RTN","IBCBB3",35,0)
 Q
"RTN","IBCBB3",36,0)
 ;
"RTN","IBCBB3",37,0)
PARTA ; MEDICARE specific edit checks for PART A claims (UB-04 formats)
"RTN","IBCBB3",38,0)
 ;
"RTN","IBCBB3",39,0)
 N IBI,IBJ,IBX,IBCTYP,VADM,VAPA,IBSTOP,IBDXC,IBDXARY,IBPR,IBLABS
"RTN","IBCBB3",40,0)
 N IBS,IBTUNIT,IBCAGE,IBREV1,IBOCCS,IBOCSDT,IBVALCD,IBOCCD,IBNOPR
"RTN","IBCBB3",41,0)
 N IBCCARY1,IBPATST,IBZADMIT,IBZDISCH,IBXIEN,IBXERR,IBXDATA,IBOCSP
"RTN","IBCBB3",42,0)
 N IBCOV,IBNCOV,IBREVC,IBREVDUP,IBBCPT,IBREVC12,IBREVTOT,IBECAT,IBINC
"RTN","IBCBB3",43,0)
 ;
"RTN","IBCBB3",44,0)
 ; Medicare is the current payer, but no diagnosis codes
"RTN","IBCBB3",45,0)
 I $$WNRBILL^IBEFUNC(IBIFN) D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBQUIT=$$IBER(.IBER,120) Q:IBQUIT
"RTN","IBCBB3",46,0)
 ;
"RTN","IBCBB3",47,0)
 ; Type of Bill must be three digits
"RTN","IBCBB3",48,0)
 I IBTOB'?3N S X=$$IBER(.IBER,103) Q
"RTN","IBCBB3",49,0)
 ;
"RTN","IBCBB3",50,0)
 ; Covered Days
"RTN","IBCBB3",51,0)
 S IBCTYP=0
"RTN","IBCBB3",52,0)
 S IBCOV=$P(IBNDU2,U,2),IBNCOV=$P(IBNDU2,U,3)
"RTN","IBCBB3",53,0)
 ;
"RTN","IBCBB3",54,0)
 ; If interim bill, covered days must not be greater than 60
"RTN","IBCBB3",55,0)
 I "23"[$E(IBTOB,3),IBCOV>60 S IBQUIT=$$IBER(.IBER,"096") Q:IBQUIT
"RTN","IBCBB3",56,0)
 ;
"RTN","IBCBB3",57,0)
 ; I bill type is 11x or 18x or 21x then we need covered days
"RTN","IBCBB3",58,0)
 I "^11^18^21^"[(U_IBTOB12_U) S IBCTYP=1 I IBCOV="" S IBQUIT=$$IBER(.IBER,106) Q:IBQUIT
"RTN","IBCBB3",59,0)
 ;
"RTN","IBCBB3",60,0)
 S (IBI,IBJ)=0
"RTN","IBCBB3",61,0)
 K IBXDATA D F^IBCEF("N-CONDITION CODES",,,IBIFN)
"RTN","IBCBB3",62,0)
 ; Re-sort the condition codes by code
"RTN","IBCBB3",63,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  S IBCCARY1($P(IBXDATA(IBI),U))=""
"RTN","IBCBB3",64,0)
 ;
"RTN","IBCBB3",65,0)
 ; for condition code 40, covered days must be 0
"RTN","IBCBB3",66,0)
 I $D(IBCCARY1(40)),IBCOV'=0 S IBQUIT=$$IBER(.IBER,107) Q:IBQUIT
"RTN","IBCBB3",67,0)
 ;
"RTN","IBCBB3",68,0)
 ; cov days+non=to date -from date unless the patient status = 30 (still
"RTN","IBCBB3",69,0)
 ;  pt) or outpatient or if the to date and from date are same then add 1
"RTN","IBCBB3",70,0)
 S IBPATST="",IBX=$P(IBNDU,U,12),IBPATST=$P($G(^DGCR(399.1,+IBX,0)),U,2)
"RTN","IBCBB3",71,0)
 S IBINC=$S(IBPATST=30!(IBFDT=IBTDT):1,1:0)
"RTN","IBCBB3",72,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBCOV+IBNCOV)'=($$FMDIFF^XLFDT(IBTDT,IBFDT)+IBINC) S IBQUIT=$$IBER(.IBER,108) Q:IBQUIT
"RTN","IBCBB3",73,0)
 ;
"RTN","IBCBB3",74,0)
 ; if covered days >100 and type of bill is 21x or 18x error
"RTN","IBCBB3",75,0)
 I IBCOV>100,(IBTOB12=18!(IBTOB12=21)) S IBQUIT=$$IBER(.IBER,109) Q:IBQUIT
"RTN","IBCBB3",76,0)
 ;
"RTN","IBCBB3",77,0)
 S (IBJ,IBTUNIT,IBS,IBREVTOT("AC"),IBREVTOT("AI"),IBREVTOT("AO"),IBREVTOT)=0
"RTN","IBCBB3",78,0)
 ;
"RTN","IBCBB3",79,0)
 K IBXDATA D F^IBCEF("N-UB-04 SERVICE LINE (EDI)",,,IBIFN) ;Get rev codes
"RTN","IBCBB3",80,0)
 ;
"RTN","IBCBB3",81,0)
 ; Re-sort the revenue codes by code
"RTN","IBCBB3",82,0)
 ;>> IBREV1(rev code,x)=Rev code^ptr cpt^unit chg^units^total^tot unc
"RTN","IBCBB3",83,0)
 ;   IBREV1(rev code) = revenue code edit category
"RTN","IBCBB3",84,0)
 ;
"RTN","IBCBB3",85,0)
 ; IBNOPR = flag that determines if there are revenue codes with
"RTN","IBCBB3",86,0)
 ;          charges that do not have a procedure - no need to check
"RTN","IBCBB3",87,0)
 ;          for billable MCR procedures if at least one RC is billable
"RTN","IBCBB3",88,0)
 ;          1 = there is at least one billable revenue code without a
"RTN","IBCBB3",89,0)
 ;              procedure
"RTN","IBCBB3",90,0)
 ;
"RTN","IBCBB3",91,0)
 S (IBNOPR,IBI)=0
"RTN","IBCBB3",92,0)
 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D
"RTN","IBCBB3",93,0)
 . S IBJ=$P(IBXDATA(IBI),U),IBECAT=""
"RTN","IBCBB3",94,0)
 . I 'IBNOPR D
"RTN","IBCBB3",95,0)
 .. I $P(IBXDATA(IBI),U,2)'="" S IBPR($P(IBXDATA(IBI),U,2))=IBI Q
"RTN","IBCBB3",96,0)
 .. S IBNOPR=1 K IBPR
"RTN","IBCBB3",97,0)
 . S:$D(IBREV1(IBJ)) IBECAT=$G(IBREV1(IBJ))
"RTN","IBCBB3",98,0)
 . I '$D(IBREV1(IBJ))!(IBECAT="") D  S IBREV1(IBJ)=IBECAT
"RTN","IBCBB3",99,0)
 . . ;
"RTN","IBCBB3",100,0)
 . . ; Accomodations (AC)
"RTN","IBCBB3",101,0)
 . . I (IBJ'<100&(IBJ'>219))!(IBJ=224) S IBECAT="AC" Q
"RTN","IBCBB3",102,0)
 . . ;
"RTN","IBCBB3",103,0)
 . . ; Ancillary Outpatient (AO)
"RTN","IBCBB3",104,0)
 . . I '$$INPAT^IBCEF(IBIFN,1) S IBECAT="AO" Q
"RTN","IBCBB3",105,0)
 . . ;
"RTN","IBCBB3",106,0)
 . . ; Ancillary Inpatient (AI)
"RTN","IBCBB3",107,0)
 . . S IBECAT="AI"
"RTN","IBCBB3",108,0)
 . ;
"RTN","IBCBB3",109,0)
 . S IBREV1(IBJ,+$O(IBREV1(IBJ,""),-1)+1)=IBXDATA(IBI)
"RTN","IBCBB3",110,0)
 . S IBREVTOT(IBECAT)=IBREVTOT(IBECAT)+$P(IBXDATA(IBI),U,6)
"RTN","IBCBB3",111,0)
 . I IBECAT="AC" S IBTUNIT=IBTUNIT+$P(IBXDATA(IBI),U,4)
"RTN","IBCBB3",112,0)
 ;
"RTN","IBCBB3",113,0)
 I $$NEEDMRA^IBEFUNC(IBIFN),$O(IBPR(""))'="" D  Q:IBQUIT
"RTN","IBCBB3",114,0)
 . ; Don't allow a bill containing only billable procedures for:
"RTN","IBCBB3",115,0)
 . ;    Oxygen, labs, or influenza shots
"RTN","IBCBB3",116,0)
 . ;  OR a bill with prosthetics on it
"RTN","IBCBB3",117,0)
 . ;    to be sent to MEDICARE for an MRA
"RTN","IBCBB3",118,0)
 . D NONMCR(.IBPR,.IBLABS) ; Remove Oxygen, labs, influenza shots
"RTN","IBCBB3",119,0)
 . I $G(IBLABS) D WARN^IBCBB11("The only possible billable procedures on this bill are labs -"),WARN^IBCBB11(" Please verify that MEDICARE does not reimburse these labs at 100%") Q
"RTN","IBCBB3",120,0)
 . I $O(IBPR(""))="" D
"RTN","IBCBB3",121,0)
 .. S IBQUIT=$$IBER(.IBER,"098")
"RTN","IBCBB3",122,0)
 ;
"RTN","IBCBB3",123,0)
 ; covered days+non covered = units of accom rev codes
"RTN","IBCBB3",124,0)
 ; Check room and board
"RTN","IBCBB3",125,0)
 I IBTUNIT,IBTUNIT'=(IBCOV+IBNCOV) S IBQUIT=$$IBER(.IBER,114) Q:IBQUIT
"RTN","IBCBB3",126,0)
 ;
"RTN","IBCBB3",127,0)
 ; Non Covered Days
"RTN","IBCBB3",128,0)
 ;   required when the type of bill is 11x,18x,21x or covered days=0
"RTN","IBCBB3",129,0)
 I IBNCOV="",(IBCTYP!(IBCOV=0)) S IBQUIT=$$IBER(.IBER,115) Q:IBQUIT
"RTN","IBCBB3",130,0)
 ;
"RTN","IBCBB3",131,0)
 ; if cc code=40 then non-covered days must be 1
"RTN","IBCBB3",132,0)
 I $D(IBCCARY1(40)),IBNCOV'=1 S IBQUIT=$$IBER(.IBER,116) Q:IBQUIT
"RTN","IBCBB3",133,0)
 ;
"RTN","IBCBB3",134,0)
 ; Patient Sex
"RTN","IBCBB3",135,0)
 ; must be "M" or "F"
"RTN","IBCBB3",136,0)
 D DEM^VADPT
"RTN","IBCBB3",137,0)
 I $P(VADM(5),U)'="M",$P(VADM(5),U)'="F" S IBQUIT=$$IBER(.IBER,124) Q:IBQUIT
"RTN","IBCBB3",138,0)
 ;
"RTN","IBCBB3",139,0)
 ; esg - 10/17/07 - patch 371
"RTN","IBCBB3",140,0)
 ; For Part A replacement MRA request claims, make sure
"RTN","IBCBB3",141,0)
 ; the Medicare ICN/DCN number is present and also text in FL-80.
"RTN","IBCBB3",142,0)
 I $$REQMRA^IBEFUNC(IBIFN),$F(".137.138.117.118.","."_IBTOB_".") D  Q:IBQUIT
"RTN","IBCBB3",143,0)
 . N IBZ,FL80TXT
"RTN","IBCBB3",144,0)
 . D F^IBCEF("N-CURR INS FORM LOC 64","IBZ",,IBIFN)  ; see CI3-11
"RTN","IBCBB3",145,0)
 . I IBZ="" S IBQUIT=$$IBER(.IBER,205) Q:IBQUIT      ; missing ICN/DCN
"RTN","IBCBB3",146,0)
 . S FL80TXT=$P($G(^DGCR(399,IBIFN,"UF2")),U,3)
"RTN","IBCBB3",147,0)
 . I FL80TXT="" S IBQUIT=$$IBER(.IBER,206) Q:IBQUIT  ; missing FL80 text
"RTN","IBCBB3",148,0)
 . Q
"RTN","IBCBB3",149,0)
 ;
"RTN","IBCBB3",150,0)
 D ^IBCBB4
"RTN","IBCBB3",151,0)
 Q
"RTN","IBCBB3",152,0)
 ;
"RTN","IBCBB3",153,0)
IBER(IBER,ERRNO) ; Sets error list
"RTN","IBCBB3",154,0)
 ; NOTE: add code to check error list > 20 ... If so, display message and
"RTN","IBCBB3",155,0)
 ;   quit so we don't get too many errors at once to handle
"RTN","IBCBB3",156,0)
 ;   Print all if printing list
"RTN","IBCBB3",157,0)
 ;
"RTN","IBCBB3",158,0)
 I '$G(IBQUIT) D
"RTN","IBCBB3",159,0)
 . I ERRNO?1N.N S:$L(ERRNO)<3 ERRNO=$E("00",1,3-$L(ERRNO))_ERRNO
"RTN","IBCBB3",160,0)
 . I $L(IBER,";")>19,'$G(IBPRT("PRT")) S IBER=IBER_"IB999;",IBQUIT=1
"RTN","IBCBB3",161,0)
 . I $G(IBER)'[("IB"_ERRNO_";") S IBER=IBER_"IB"_ERRNO_";"
"RTN","IBCBB3",162,0)
 Q IBQUIT
"RTN","IBCBB3",163,0)
 ;
"RTN","IBCBB3",164,0)
NONMCR(IBPR,IBLABS) ;  Delete all oxygen and lab, flu shot CPT entries from IBPR
"RTN","IBCBB3",165,0)
 ; IBPR = array subscripted by CPT codes from bill
"RTN","IBCBB3",166,0)
 ; IBLABS = flag returned =1 if labs found on bill
"RTN","IBCBB3",167,0)
 N Z S IBLABS=0
"RTN","IBCBB3",168,0)
 ; Oxygen
"RTN","IBCBB3",169,0)
 F Z="A0422","A4575","A4616","A4619","A4620","A4621","E0455","E1353","E1355" K IBPR(Z)
"RTN","IBCBB3",170,0)
 F Z=77:1:85 S Z0="E13"_Z K IBPR(Z0)
"RTN","IBCBB3",171,0)
 ; Labs
"RTN","IBCBB3",172,0)
 S Z="80000" F  S Z=$O(IBPR(Z)) Q:Z'?1"8"4N  S IBLABS=1
"RTN","IBCBB3",173,0)
 ; Flu shots
"RTN","IBCBB3",174,0)
 F Z="90724","G0008","90732","G0009","90657","90658","90659","90660" K IBPR(Z)
"RTN","IBCBB3",175,0)
 Q
"RTN","IBCBB3",176,0)
 ;
"RTN","IBCBB3",177,0)
MCRANUM(IBIFN) ; Determine MEDICARE A provider ID # from bedsection for
"RTN","IBCBB3",178,0)
 ; bill ien IBIFN
"RTN","IBCBB3",179,0)
 N IBX
"RTN","IBCBB3",180,0)
 ; PART A MRA (only) needed - determine if psych/non-psych claim
"RTN","IBCBB3",181,0)
 N IBX,IBI
"RTN","IBCBB3",182,0)
 S IBI=$P($G(^DGCR(399,IBIFN,"U")),U,11)
"RTN","IBCBB3",183,0)
 S IBX=$S($TR($P($G(^DGCR(399.1,+IBI,0)),U),"psych","PSYCH")'["PSYCH":670899,1:674499)
"RTN","IBCBB3",184,0)
 Q IBX
"RTN","IBCBB3",185,0)
 ;
"RTN","IBCBB3",186,0)
MCRACK(IBIFN,X,IBFLD) ; Check for MEDICARE A for bill IBIFN
"RTN","IBCBB3",187,0)
 ; Called from CLAIM STATUS MRA field (#24) xrefs in file 399
"RTN","IBCBB3",188,0)
 ; X = current value of field 399;24
"RTN","IBCBB3",189,0)
 ; IBFLD = 1 for primary ins co, 2 for secondary, 3 for tertiary
"RTN","IBCBB3",190,0)
 N IB
"RTN","IBCBB3",191,0)
 S IB=0
"RTN","IBCBB3",192,0)
 I +X,$$COBN^IBCEF(IBIFN)=IBFLD,$$WNRBILL^IBEFUNC(IBIFN,IBFLD),$$MRATYPE^IBEFUNC(IBIFN,"C")="A" S IB=1
"RTN","IBCBB3",193,0)
 Q IB
"RTN","IBCBB3",194,0)
 ;
"RTN","IBCBB5")
0^46^B8194886^B6359548
"RTN","IBCBB5",1,0)
IBCBB5 ;ALB/BGA - CONT OF MEDICARE EDIT CHECKS ;08/12/98
"RTN","IBCBB5",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,371**;21-MAR-94;Build 57
"RTN","IBCBB5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB5",4,0)
 ;
"RTN","IBCBB5",5,0)
 D F^IBCEF("N-ADMISSION DATE","IBZADMIT",,IBIFN)
"RTN","IBCBB5",6,0)
 D F^IBCEF("N-DISCHARGE DATE","IBZDISCH",,IBIFN)
"RTN","IBCBB5",7,0)
 ;
"RTN","IBCBB5",8,0)
 ; Occurrence Code and Dates
"RTN","IBCBB5",9,0)
 ;   occ codes can not be duplicates for same dates and must have a date
"RTN","IBCBB5",10,0)
 K IBXSAVE,IBXDATA D F^IBCEF("N-OCCURRENCE CODES",,,IBIFN)
"RTN","IBCBB5",11,0)
 ; Returns arrays IBXSAVE("OCC",n) AND IBXSAVE("OCCS",n) =
"RTN","IBCBB5",12,0)
 ;       code^start date^state^end date
"RTN","IBCBB5",13,0)
 ; IBOCS=occ codes ;; IBOCSP=occ span codes
"RTN","IBCBB5",14,0)
 ;
"RTN","IBCBB5",15,0)
 S IBI=0 F  S IBI=$O(IBXSAVE("OCCS",IBI)) Q:'IBI  D
"RTN","IBCBB5",16,0)
 . N IBOCSDT,IBOCSDT1,Z
"RTN","IBCBB5",17,0)
 . S IBOCSDT=$P(IBXSAVE("OCCS",IBI),U,2),IBOCSDT1=$P(IBXSAVE("OCCS",IBI),U,3),IBOCCS=$P(IBXSAVE("OCCS",IBI),U)
"RTN","IBCBB5",18,0)
 . S IBOCSP(IBOCCS,$O(IBOCSP(IBOCCS,""),-1)+1)=IBXSAVE("OCCS",IBI)
"RTN","IBCBB5",19,0)
 . ; Occurrence Code End dates must be > start date and are required for OCCURANCE SPANS
"RTN","IBCBB5",20,0)
 . I 'IBOCSDT1 S IBER=IBER_"IB155;" Q
"RTN","IBCBB5",21,0)
 . I IBOCSDT1<IBOCSDT S IBER=IBER_"IB150;" Q
"RTN","IBCBB5",22,0)
 ;
"RTN","IBCBB5",23,0)
 S IBI=0 F  S IBI=$O(IBXSAVE("OCC",IBI)) Q:'IBI  D
"RTN","IBCBB5",24,0)
 . N Z
"RTN","IBCBB5",25,0)
 . S IBOCCD=$P(IBXSAVE("OCC",IBI),U)
"RTN","IBCBB5",26,0)
 . S IBOCCD(IBOCCD,$O(IBOCCD(IBOCCD,""),-1)+1)=IBXSAVE("OCC",IBI)
"RTN","IBCBB5",27,0)
 . I IBOCCD=10 S ^TMP($J,"LMD")=1
"RTN","IBCBB5",28,0)
 Q:IBQUIT
"RTN","IBCBB5",29,0)
 ;
"RTN","IBCBB5",30,0)
 ; For type of admit = 1 or 2, at least one occ code 1-6, 10, or 11 req
"RTN","IBCBB5",31,0)
 I $P(IBNDU,U,8)=1!($P(IBNDU,U,8)=2) D
"RTN","IBCBB5",32,0)
 . N OK
"RTN","IBCBB5",33,0)
 . S OK=0
"RTN","IBCBB5",34,0)
 . F Z="01","02","03","04","05","06",10,11 I $D(IBOCCD(Z))!($D(IBOCCD(+Z))) S OK=1 Q
"RTN","IBCBB5",35,0)
 . I 'OK S IBQUIT=$$IBER^IBCBB3(.IBER,133)
"RTN","IBCBB5",36,0)
 K IBXDATA D F^IBCEF("N-VALUE CODES",,,IBIFN)
"RTN","IBCBB5",37,0)
 S IBX=0
"RTN","IBCBB5",38,0)
 F  S IBX=$O(IBXDATA(IBX)) Q:'IBX  D  Q:IBQUIT
"RTN","IBCBB5",39,0)
 . I '$D(IBVALCD($P(IBXDATA(IBX),U))) S IBVALCD($P(IBXDATA(IBX),U))=$P(IBXDATA(IBX),U,2)
"RTN","IBCBB5",40,0)
 . ; value code 01 must have a value>0
"RTN","IBCBB5",41,0)
 . I $P(IBXDATA(IBX),U)="01",IBER'["134;",$P(IBXDATA(IBX),U,2)'>0 S IBQUIT=$$IBER^IBCBB3(.IBER,134) Q
"RTN","IBCBB5",42,0)
 . ; value code 02 must have a value=0
"RTN","IBCBB5",43,0)
 . I $P(IBXDATA(IBX),U)="02",IBER'["135;",+$P(IBXDATA(IBX),U,2)'=0 S IBQUIT=$$IBER^IBCBB3(.IBER,135) Q
"RTN","IBCBB5",44,0)
 . ; code^amount^dollar amt flag (1=amt,0=quantity)
"RTN","IBCBB5",45,0)
 . I $P(IBXDATA(IBX),U,2)="",IBER'["157;" S IBQUIT=$$IBER^IBCBB3(.IBER,157) Q
"RTN","IBCBB5",46,0)
 . I '$$CHK^IBCVC($P(IBXDATA(IBX),U,4),$P(IBXDATA(IBX),U,2)),IBER'["158;" S IBQUIT=$$IBER^IBCBB3(.IBER,158) Q
"RTN","IBCBB5",47,0)
 ;
"RTN","IBCBB5",48,0)
 Q:IBQUIT
"RTN","IBCBB5",49,0)
 ; Must have acc hr if accident is indicated on inpatient bill
"RTN","IBCBB5",50,0)
 I $$INPAT^IBCEF(IBIFN,1) D
"RTN","IBCBB5",51,0)
 . I $D(IBOCCD("01"))!$D(IBOCCD("02"))!$D(IBOCCD("03"))!$D(IBOCCD("04"))!$D(IBOCCD("05")) D
"RTN","IBCBB5",52,0)
 .. I '$D(IBVALCD(45)),'$P($G(^DGCR(399,IBIFN,"U")),U,10) S IBQUIT=$$IBER^IBCBB3(.IBER,156)
"RTN","IBCBB5",53,0)
 Q:IBQUIT
"RTN","IBCBB5",54,0)
 ;
"RTN","IBCBB5",55,0)
 D ^IBCBB6
"RTN","IBCBB5",56,0)
 Q
"RTN","IBCBB9")
0^12^B9034446^B10249958
"RTN","IBCBB9",1,0)
IBCBB9 ;ALB/BGA MEDICARE PART B EDIT CHECKS ;10/15/98
"RTN","IBCBB9",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,349,371**;21-MAR-94;Build 57
"RTN","IBCBB9",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB9",4,0)
 ;
"RTN","IBCBB9",5,0)
PARTB ; MEDICARE specific edit checks for PART B claims (CMS-1500)
"RTN","IBCBB9",6,0)
 ;
"RTN","IBCBB9",7,0)
 N IBXDATA,IBXERR,IBXIEN,IBXSAVE,IBPR,IBDTFLG
"RTN","IBCBB9",8,0)
 ;
"RTN","IBCBB9",9,0)
 I $$NEEDMRA^IBEFUNC(IBIFN) D
"RTN","IBCBB9",10,0)
 . K IBXDATA
"RTN","IBCBB9",11,0)
 . D F^IBCEF("N-HCFA 1500 SERVICE LINE (EDI)",,,IBIFN)
"RTN","IBCBB9",12,0)
 . S IBI=0
"RTN","IBCBB9",13,0)
 . F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D
"RTN","IBCBB9",14,0)
 .. S IBJ=$P(IBXDATA(IBI),U,5)
"RTN","IBCBB9",15,0)
 .. I IBJ'="","^CJ^HC^"[(U_$P(IBXDATA(IBI),U,6)_U) S IBPR(IBJ)=""
"RTN","IBCBB9",16,0)
 . I $$REQMRA^IBEFUNC(IBIFN),$O(IBXDATA(""),-1)>12 D WARN^IBCBB11("This claim will be split into multiple EOB'S since there are more than 12"),WARN^IBCBB11("service lines being submitted on the claim.")
"RTN","IBCBB9",17,0)
 . I $$REQMRA^IBEFUNC(IBIFN),$E(IBFDT,1,3)'=$E(IBTDT,1,3) D WARN^IBCBB11("This claim will be split into multiple EOB'S due to the service dates"),WARN^IBCBB11("spanning different calendar years.")
"RTN","IBCBB9",18,0)
 . D NONMCR^IBCBB3(.IBPR,.IBLABS) ; Oxygen, labs, influenza shots
"RTN","IBCBB9",19,0)
 . S Z="80000" F  S Z=$O(IBPR(Z)) Q:Z'?1"8"4N  S IBLABS=1
"RTN","IBCBB9",20,0)
 . I $G(IBLABS) D WARN^IBCBB11("The only possible billable procedures on this bill are labs -"),WARN^IBCBB11(" Please verify that MEDICARE does not reimburse these labs at 100%") Q
"RTN","IBCBB9",21,0)
 . I $O(IBPR(""))="" S IBQUIT=$$IBER^IBCBB3(.IBER,"098")
"RTN","IBCBB9",22,0)
 ;
"RTN","IBCBB9",23,0)
 ; First char of the pat's first and last name must be present and
"RTN","IBCBB9",24,0)
 ; must be an alpha
"RTN","IBCBB9",25,0)
 K IBXDATA D F^IBCEF("N-PATIENT NAME",,,IBIFN)
"RTN","IBCBB9",26,0)
 S IBXDATA=$$NAME^IBCEFG1(IBXDATA)
"RTN","IBCBB9",27,0)
 I $S($G(IBXDATA)="":1,$E($P(IBXDATA,U))=" "!($E($P(IBXDATA,U))'?1A):1,$E($P(IBXDATA,U,2))=" "!($E($P(IBXDATA,U,2))'?1A):1,1:0) S IBQUIT=$$IBER^IBCBB3(.IBER,300) Q:IBQUIT
"RTN","IBCBB9",28,0)
 ;
"RTN","IBCBB9",29,0)
 ; Must be a valid HIC #
"RTN","IBCBB9",30,0)
 I '$$VALID^IBCBB8(IBIFN) S IBQUIT=$$IBER^IBCBB3(.IBER,215) Q:IBQUIT
"RTN","IBCBB9",31,0)
 ;
"RTN","IBCBB9",32,0)
 ; Specialty code 99 is not valid for Medicare MRA request claims
"RTN","IBCBB9",33,0)
 I $$REQMRA^IBEFUNC(IBIFN),$$BILLSPEC^IBCEU3(IBIFN)=99 S IBQUIT=$$IBER^IBCBB3(.IBER,122) Q:IBQUIT
"RTN","IBCBB9",34,0)
 ;
"RTN","IBCBB9",35,0)
 Q
"RTN","IBCBB9",36,0)
 ;
"RTN","IBCCC2")
0^18^B66229263^B66228987
"RTN","IBCCC2",1,0)
IBCCC2 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
"RTN","IBCCC2",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296,320,348,349,371**;21-MAR-94;Build 57
"RTN","IBCCC2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCCC2",4,0)
 ;
"RTN","IBCCC2",5,0)
 ;MAP TO DGCRCC2
"RTN","IBCCC2",6,0)
 ;
"RTN","IBCCC2",7,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC2",8,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC2",9,0)
 ;
"RTN","IBCCC2",10,0)
STEP5 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBCCC2",11,0)
 ;
"RTN","IBCCC2",12,0)
 ;move pure data nodes
"RTN","IBCCC2",13,0)
 F I="I1","I2","I3","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",14,0)
 ;
"RTN","IBCCC2",15,0)
 ;move top level data node. ;Do not move 'TX' node
"RTN","IBCCC2",16,0)
 F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",17,0)
 ;
"RTN","IBCCC2",18,0)
 ;move multiple level data
"RTN","IBCCC2",19,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",20,0)
 ;
"RTN","IBCCC2",21,0)
 D FTPRV^IBCEU5(IBIFN) ; Ask change prov type if form type not the same
"RTN","IBCCC2",22,0)
 D COBCHG(IBIFN,,.IBCOB)
"RTN","IBCCC2",23,0)
 ;
"RTN","IBCCC2",24,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBCCC2",25,0)
 ;
"RTN","IBCCC2",26,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBCCC2",27,0)
 D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBCCC2",28,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ) G END
"RTN","IBCCC2",29,0)
 ;
"RTN","IBCCC2",30,0)
STEP6 N IBGOEND
"RTN","IBCCC2",31,0)
 I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
"RTN","IBCCC2",32,0)
 ;
"RTN","IBCCC2",33,0)
 ;
"RTN","IBCCC2",34,0)
END K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARST,IBCOB,IBCNCOPY,IBCBCOPY
"RTN","IBCCC2",35,0)
 K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,IBCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
"RTN","IBCCC2",36,0)
 K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
"RTN","IBCCC2",37,0)
 Q
"RTN","IBCCC2",38,0)
 ;
"RTN","IBCCC2",39,0)
 ;
"RTN","IBCCC2",40,0)
IBSCEDT ; call the IB bill edit screens and validate the data
"RTN","IBCCC2",41,0)
 N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
"RTN","IBCCC2",42,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCCC2",43,0)
ST1 S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
"RTN","IBCCC2",44,0)
 S IBAC=1
"RTN","IBCCC2",45,0)
 D ^IBCB1
"RTN","IBCCC2",46,0)
 I $G(IBCIREDT) G ST1
"RTN","IBCCC2",47,0)
IBSCX ;
"RTN","IBCCC2",48,0)
 Q
"RTN","IBCCC2",49,0)
 ;
"RTN","IBCCC2",50,0)
 ;
"RTN","IBCCC2",51,0)
U F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
"RTN","IBCCC2",52,0)
 Q
"RTN","IBCCC2",53,0)
U1 F J=1:1:9,13,14 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
"RTN","IBCCC2",54,0)
 Q
"RTN","IBCCC2",55,0)
U2 F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
"RTN","IBCCC2",56,0)
 Q
"RTN","IBCCC2",57,0)
U3 F J=1:1:7 I $P(IBND("U3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U3"),"^",J)=$P(IBND("U3"),"^",J)
"RTN","IBCCC2",58,0)
 Q
"RTN","IBCCC2",59,0)
UF2 F J=1,3 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
"RTN","IBCCC2",60,0)
 Q
"RTN","IBCCC2",61,0)
UF3 F J=1:1:7 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
"RTN","IBCCC2",62,0)
 Q
"RTN","IBCCC2",63,0)
UF31 F J=1:1:3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
"RTN","IBCCC2",64,0)
 Q
"RTN","IBCCC2",65,0)
C F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
"RTN","IBCCC2",66,0)
 I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
"RTN","IBCCC2",67,0)
 Q
"RTN","IBCCC2",68,0)
M F J=1:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
"RTN","IBCCC2",69,0)
 Q
"RTN","IBCCC2",70,0)
CC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",71,0)
 S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",72,0)
OP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",73,0)
 S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",74,0)
 Q
"RTN","IBCCC2",75,0)
OC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",76,0)
 S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",77,0)
 Q
"RTN","IBCCC2",78,0)
OT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",79,0)
 S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",80,0)
 Q
"RTN","IBCCC2",81,0)
CV ; Don't copy value codes from inpatient inst to inpatient prof bills
"RTN","IBCCC2",82,0)
 I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
"RTN","IBCCC2",83,0)
 S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",84,0)
 S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",85,0)
 Q
"RTN","IBCCC2",86,0)
RC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",87,0)
 S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:15 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
"RTN","IBCCC2",88,0)
 Q
"RTN","IBCCC2",89,0)
CP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",90,0)
 I +$G(IBNOCPT) Q
"RTN","IBCCC2",91,0)
 S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP-AUX")=$G(^("AUX")) D
"RTN","IBCCC2",92,0)
 . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
"RTN","IBCCC2",93,0)
 . ; esg - 11/2/06 - IB*2*348 - 50.09 field was added - AUX piece [9]
"RTN","IBCCC2",94,0)
 . I IBND("CP-AUX")'="" F K=1:1:9 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
"RTN","IBCCC2",95,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
"RTN","IBCCC2",96,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
"RTN","IBCCC2",97,0)
 ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier from inst to prof bill
"RTN","IBCCC2",98,0)
 ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
"RTN","IBCCC2",99,0)
CP1 S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
"RTN","IBCCC2",100,0)
 I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D FILE
"RTN","IBCCC2",101,0)
 I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D FILE
"RTN","IBCCC2",102,0)
 I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D FILE
"RTN","IBCCC2",103,0)
 Q
"RTN","IBCCC2",104,0)
 ;
"RTN","IBCCC2",105,0)
PRV S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",106,0)
 N Z,Z0
"RTN","IBCCC2",107,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19)
"RTN","IBCCC2",108,0)
 S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
"RTN","IBCCC2",109,0)
 . S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",110,0)
 . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,J,0),U)=(Z0+1)
"RTN","IBCCC2",111,0)
 Q
"RTN","IBCCC2",112,0)
 ;
"RTN","IBCCC2",113,0)
COB S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
"RTN","IBCCC2",114,0)
 Q
"RTN","IBCCC2",115,0)
 ;
"RTN","IBCCC2",116,0)
FILE N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
"RTN","IBCCC2",117,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCC2",118,0)
 S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
"RTN","IBCCC2",119,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
"RTN","IBCCC2",120,0)
 K DGPROCDT
"RTN","IBCCC2",121,0)
 Q
"RTN","IBCCC2",122,0)
 ;
"RTN","IBCCC2",123,0)
INDEX ;index entire file (set logic)
"RTN","IBCCC2",124,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
"RTN","IBCCC2",125,0)
 Q
"RTN","IBCCC2",126,0)
 ;
"RTN","IBCCC2",127,0)
PRIOR(IBIFN) ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
"RTN","IBCCC2",128,0)
 N IBSEQ,IBSEQN,IBM1,I,IBIFN1
"RTN","IBCCC2",129,0)
 S IBSEQ=$$COB^IBCEF(IBIFN)
"RTN","IBCCC2",130,0)
 S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
"RTN","IBCCC2",131,0)
 ;
"RTN","IBCCC2",132,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
"RTN","IBCCC2",133,0)
 F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
"RTN","IBCCC2",134,0)
 Q
"RTN","IBCCC2",135,0)
 ;
"RTN","IBCCC2",136,0)
COBCHG(IBIFN,IBINS,IBCOB) ; Make changes for a new COB payer for bill
"RTN","IBCCC2",137,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCCC2",138,0)
 ; IBINS = ien of bill's current insurance (optional)
"RTN","IBCCC2",139,0)
 ; IBCOB = array subscripted by node,piece of COB data field change
"RTN","IBCCC2",140,0)
 ;
"RTN","IBCCC2",141,0)
 N I,IBFRMTYP,IBTAXLST
"RTN","IBCCC2",142,0)
 ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
"RTN","IBCCC2",143,0)
 F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
"RTN","IBCCC2",144,0)
 ;
"RTN","IBCCC2",145,0)
 I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
"RTN","IBCCC2",146,0)
 . ;MCRWNR is current insurance ... move payer only
"RTN","IBCCC2",147,0)
 . N IBCOBN,IBX
"RTN","IBCCC2",148,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCCC2",149,0)
 . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
"RTN","IBCCC2",150,0)
 . S IBCOB("M1",IBCOBN+4)=IBIFN
"RTN","IBCCC2",151,0)
 . S IBCOB("TX",1)="",IBCOB("TX",2)=""
"RTN","IBCCC2",152,0)
 . S IBX=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCCC2",153,0)
 . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
"RTN","IBCCC2",154,0)
 . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
"RTN","IBCCC2",155,0)
 . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
"RTN","IBCCC2",156,0)
 . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
"RTN","IBCCC2",157,0)
 . D PRIOR(IBIFN)
"RTN","IBCCC2",158,0)
 . Q
"RTN","IBCCC2",159,0)
 ;
"RTN","IBCCC2",160,0)
 ;reset fields for next Sequence Payer
"RTN","IBCCC2",161,0)
 F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
"RTN","IBCCC2",162,0)
 ;
"RTN","IBCCC2",163,0)
 ; IB*2.0*211
"RTN","IBCCC2",164,0)
 ; save off Form Type
"RTN","IBCCC2",165,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC2",166,0)
 ; Save off Taxonomies for providers.
"RTN","IBCCC2",167,0)
 S I=0 F  S I=$O(^DGCR(399,IBIFN,"PRV",I)) Q:'I  S IBTAXLST(I)=$P($G(^DGCR(399,IBIFN,"PRV",I,0)),U,15)
"RTN","IBCCC2",168,0)
 ;
"RTN","IBCCC2",169,0)
 ; fire xrefs set logic
"RTN","IBCCC2",170,0)
 D INDEX
"RTN","IBCCC2",171,0)
 ;
"RTN","IBCCC2",172,0)
 ; Restore Form Type if changed, but don't restore Form Type if
"RTN","IBCCC2",173,0)
 ;   creating CMS-1500 claim from CTCOPY1^IBCCCB
"RTN","IBCCC2",174,0)
 I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D ^DIE
"RTN","IBCCC2",175,0)
 ;
"RTN","IBCCC2",176,0)
 ; Restore Claim MRA Status field since triggers in fields 101 & 102
"RTN","IBCCC2",177,0)
 ;   will overwrite the correct value when processing the MRA/EOB.
"RTN","IBCCC2",178,0)
 ; If we're processing the MRA/EOB, then a valid MRA has been received.
"RTN","IBCCC2",179,0)
 I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
"RTN","IBCCC2",180,0)
 ;
"RTN","IBCCC2",181,0)
 ; Restore Taxonomies in fields 243 and 244.
"RTN","IBCCC2",182,0)
 S I=$P($G(IBND("U3")),U,2)
"RTN","IBCCC2",183,0)
 I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,2) D
"RTN","IBCCC2",184,0)
 . N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="243////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",185,0)
 S I=$P($G(IBND("U3")),U,3)
"RTN","IBCCC2",186,0)
 I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,3) D
"RTN","IBCCC2",187,0)
 . N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="244////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",188,0)
 ; Restore Taxonomies in field .15 in sub-file 399.0222.
"RTN","IBCCC2",189,0)
 S IBTAXLST=0 F  S IBTAXLST=$O(IBTAXLST(IBTAXLST)) Q:'IBTAXLST  D
"RTN","IBCCC2",190,0)
 . S I=IBTAXLST(IBTAXLST)
"RTN","IBCCC2",191,0)
 . I I=$P($G(^DGCR(399,IBIFN,"PRV",IBTAXLST,0)),U,15) Q  ; No change
"RTN","IBCCC2",192,0)
 . N DA,DIE,DR
"RTN","IBCCC2",193,0)
 . S DA(1)=IBIFN,DA=IBTAXLST
"RTN","IBCCC2",194,0)
 . S DIE="^DGCR(399,"_DA(1)_",""PRV"",",DR=".15////"_$S(I'="":I,1:"@")
"RTN","IBCCC2",195,0)
 . D ^DIE
"RTN","IBCCC2",196,0)
 . Q
"RTN","IBCCC2",197,0)
 ;
"RTN","IBCCC2",198,0)
 K IBCOB("TX")
"RTN","IBCCC2",199,0)
 Q
"RTN","IBCCC2",200,0)
 ;
"RTN","IBCE")
0^52^B25142847^B21210962
"RTN","IBCE",1,0)
IBCE ;ALB/TMP - 837 EDI TRANSMISSION UTILITIES/NIGHTLY JOB ;22-JAN-96
"RTN","IBCE",2,0)
 ;;2.0;INTEGRATED BILLING;**137,283,296,371**;21-MAR-94;Build 57
"RTN","IBCE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCE",4,0)
EN ; Run all jobs needed for EDI processing nightly
"RTN","IBCE",5,0)
 ; including transmit bills waiting for extract, batches not sent,
"RTN","IBCE",6,0)
 N IBLAST,IBZ,IBZ0
"RTN","IBCE",7,0)
 D NOTSENT^IBCEBUL
"RTN","IBCE",8,0)
 D EN^IBCE837
"RTN","IBCE",9,0)
 D EN^IBCEMPRG      ; purge status messages from file 361
"RTN","IBCE",10,0)
 D PURGE^IBCEPTU    ; purge transmission detail and claims status data associated with test transmissions after 60 days
"RTN","IBCE",11,0)
 S IBLAST=$G(^IBA(364.2,"ALAST")),^IBA(364.2,"ALAST")=$$NOW^XLFDT()
"RTN","IBCE",12,0)
 ; Clean up ACOB xref in 364
"RTN","IBCE",13,0)
 S IBZ=0
"RTN","IBCE",14,0)
 F  S IBZ=$O(^IBA(364,"ACOB",IBZ)) Q:'IBZ  S IBZ0=0 F  S IBZ0=$O(^IBA(364,"ACOB",IBZ,IBZ0)) Q:'IBZ0  I '$$COBPOSS^IBCECOB(IBZ0) D UPDEDI^IBCEM(IBZ0,"N",1)
"RTN","IBCE",15,0)
 Q
"RTN","IBCE",16,0)
 ;
"RTN","IBCE",17,0)
EN1 ; Manual entry point for transmitting EDI bills
"RTN","IBCE",18,0)
 N DIR,X,Y,IBLAST,IBTASK,IBOPTX,DTOUT,DUOUT
"RTN","IBCE",19,0)
 I '$$MGCHK(1) G EN1Q
"RTN","IBCE",20,0)
 S DIR("A")="Select transmit option: ",DIR("B")="S",DIR(0)="SAM^A:Transmit (A)LL bills in READY FOR EXTRACT status;S:Transmit only (S)ELECTED bills"
"RTN","IBCE",21,0)
 D ^DIR K DIR
"RTN","IBCE",22,0)
 I $D(DTOUT)!$D(DUOUT) G EN1Q
"RTN","IBCE",23,0)
 S IBOPTX=Y
"RTN","IBCE",24,0)
 I Y="A" D  G EN1Q
"RTN","IBCE",25,0)
 . S DIR("A",1)="This option will run a job to transmit ALL bills ready for EDI transmission"
"RTN","IBCE",26,0)
 . S DIR("A",2)="This option's last scheduled run was "_$$FMTE^XLFDT($G(^IBA(364.2,"ALAST")),2)
"RTN","IBCE",27,0)
 . S DIR("A",3)=" "
"RTN","IBCE",28,0)
 . S DIR("A")="Are you absolutely sure this is what you want to do? "
"RTN","IBCE",29,0)
 . S DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCE",30,0)
 . Q:'Y
"RTN","IBCE",31,0)
 . S DIR(0)="YA",DIR("A",1)=" "
"RTN","IBCE",32,0)
 . S DIR("A",2)="Transmission of ALL bills will be run now"
"RTN","IBCE",33,0)
 . S DIR("A")="Is this OK? ",DIR("B")="NO"
"RTN","IBCE",34,0)
 . D ^DIR K DIR
"RTN","IBCE",35,0)
 . Q:'Y
"RTN","IBCE",36,0)
 . D EN1^IBCE837B(.IBTASK)
"RTN","IBCE",37,0)
 . I $G(IBTASK) D
"RTN","IBCE",38,0)
 .. S DIR("A",1)="Task # for this job is: "_IBTASK
"RTN","IBCE",39,0)
 . E  D
"RTN","IBCE",40,0)
 .. I $G(IBTASK)'="" S DIR("A",1)="Error encountered in tasking job - check IRM for reported errors"
"RTN","IBCE",41,0)
 .. S DIR(0)="EA",DIR("A")=" Press RETURN to continue " W !! D ^DIR K DIR
"RTN","IBCE",42,0)
 I IBOPTX="S" D SUB1^IBCEM03 G EN1Q
"RTN","IBCE",43,0)
EN1Q Q
"RTN","IBCE",44,0)
 ;
"RTN","IBCE",45,0)
RESUB(IB364) ; Manually resubmit bill for transmission (ien file 364 = IB364)
"RTN","IBCE",46,0)
 N DIR,X,Y,IBBTCH,DTOUT,DUOUT,IBIFN,NEW364
"RTN","IBCE",47,0)
 I '$$MGCHK(1) G RESUBQ
"RTN","IBCE",48,0)
 S IBIFN=+$P($G(^IBA(364,+$G(IB364),0)),U,1) I 'IBIFN G RESUBQ
"RTN","IBCE",49,0)
 S IBBTCH=""
"RTN","IBCE",50,0)
 W ! S DIR(0)="SA^I:IMMEDIATE TRANSMIT;L:TRANSMIT LATER WITH REST OF READY FOR EXTRACT BILLS",DIR("A")="TRANSMIT (I)MMEDIATELY OR (L)ATER?: ",DIR("B")="L"
"RTN","IBCE",51,0)
 S DIR("?",1)="IF YOU CHOOSE TO TRANSMIT IMMEDIATELY, THE BILL'S DATA WILL BE BATCHED BY",DIR("?",2)=" ITSELF AND SENT OUT IMMEDIATELY.  IF YOU CHOOSE TO TRANSMIT LATER, THE"
"RTN","IBCE",52,0)
 S DIR("?",3)="  BILL'S TRANSMISSION STATUS WILL BE RESET TO 'READY FOR EXTRACT' AND THE BILL'S",DIR("?",4)="  DATA WILL BE EXTRACTED THE NEXT TIME A GENERAL TRANSMISSION OF YOUR BILLS",DIR("?")="  IN READY TO EXTRACT STATUS OCCURS"
"RTN","IBCE",53,0)
 D ^DIR K DIR
"RTN","IBCE",54,0)
 I $D(DTOUT)!$D(DUOUT) G RESUBQ
"RTN","IBCE",55,0)
 ;
"RTN","IBCE",56,0)
 ; immediate retransmission of claim
"RTN","IBCE",57,0)
 I Y="I" D  G RESUBQ
"RTN","IBCE",58,0)
 . S NEW364=$$ADDTBILL^IBCB1(IBIFN)    ; Add a new transmission record
"RTN","IBCE",59,0)
 . I '$P(NEW364,U,3) D  Q
"RTN","IBCE",60,0)
 .. S DIR("A",1)="FAILED TO ADD A NEW EDI TRANSMISSION",DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE " W ! D ^DIR K DIR
"RTN","IBCE",61,0)
 .. Q
"RTN","IBCE",62,0)
 . ;
"RTN","IBCE",63,0)
 . K ^TMP("IBONE",$J),^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCE",64,0)
 . S ^TMP("IBONE",$J,+NEW364)="",^TMP("IBONE",$J)=0,^TMP("IBSELX",$J)=""
"RTN","IBCE",65,0)
 . D ONE^IBCE837
"RTN","IBCE",66,0)
 . S IBBTCH=$O(^TMP("IBCE-BATCH",$J,0))                     ; external batch#
"RTN","IBCE",67,0)
 . I IBBTCH'="" S IBBTCH=+$G(^TMP("IBCE-BATCH",$J,IBBTCH))  ; internal batch#
"RTN","IBCE",68,0)
 . K ^TMP("IBONE",$J),^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCE",69,0)
 . ;
"RTN","IBCE",70,0)
 . I 'IBBTCH D
"RTN","IBCE",71,0)
 .. S DIR("A",1)="BILL NOT RESUBMITTED - CHECK ALERTS/MAIL FOR DETAILS"
"RTN","IBCE",72,0)
 . E  D
"RTN","IBCE",73,0)
 .. N DIE,DR,DA
"RTN","IBCE",74,0)
 .. D UPDEDI^IBCEM(IB364,"R")   ; update EDI files for old transmission
"RTN","IBCE",75,0)
 .. S DIE="^IBA(364,",DR=".06////"_+IBBTCH,DA=IB364 D ^DIE
"RTN","IBCE",76,0)
 .. S DIR("A",1)="BILL RESUBMITTED IN BATCH #"_$P($G(^IBA(364.1,+IBBTCH,0)),U,1)
"RTN","IBCE",77,0)
 . S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE " W ! D ^DIR K DIR
"RTN","IBCE",78,0)
 . Q
"RTN","IBCE",79,0)
 ;
"RTN","IBCE",80,0)
 ; Later retransmission of claim
"RTN","IBCE",81,0)
 D UPDEDI^IBCEM(IB364,"R")      ; update EDI files for old transmission record
"RTN","IBCE",82,0)
 S Y=$$ADDTBILL^IBCB1(IBIFN)    ; Add a new transmission record
"RTN","IBCE",83,0)
 S DIR("A",1)="BILL'S TRANSMISSION STATUS RESET TO 'READY TO EXTRACT'"
"RTN","IBCE",84,0)
 S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE " W ! D ^DIR K DIR
"RTN","IBCE",85,0)
 ;
"RTN","IBCE",86,0)
RESUBQ Q
"RTN","IBCE",87,0)
 ;
"RTN","IBCE",88,0)
MGCHK(DSP) ; Returns 1 if mail group IB EDI has at least 1 local member,
"RTN","IBCE",89,0)
 ; 0 if none found
"RTN","IBCE",90,0)
 ; DSP = flag that if =1, displays error message
"RTN","IBCE",91,0)
 N IB
"RTN","IBCE",92,0)
 S IB=$$GOTLOCAL^XMXAPIG("IB EDI")
"RTN","IBCE",93,0)
 I 'IB,$G(DSP) D
"RTN","IBCE",94,0)
 . ; No local members in mail group for EDI messages
"RTN","IBCE",95,0)
 . S DIR("A",1)="YOU MUST HAVE AT LEAST 1 MEMBER IN THE 'IB EDI' MAIL GROUP TO TRANSMIT A BILL",DIR("A")="PRESS RETURN TO CONTINUE "
"RTN","IBCE",96,0)
 . S DIR(0)="EA" D ^DIR K DIR
"RTN","IBCE",97,0)
 Q IB
"RTN","IBCE",98,0)
 ;
"RTN","IBCECSA3")
0^54^B27586417^B26519666
"RTN","IBCECSA3",1,0)
IBCECSA3 ;ALB/CXW - CLAIMS STATUS AWAITING RESOLUTION REPORT ;23-JUL-99
"RTN","IBCECSA3",2,0)
 ;;2.0;INTEGRATED BILLING;**137,320,371**;21-MAR-94;Build 57
"RTN","IBCECSA3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCECSA3",4,0)
 Q
"RTN","IBCECSA3",5,0)
EN ; Report of claims status awaiting resolution
"RTN","IBCECSA3",6,0)
 D FULL^VALM1
"RTN","IBCECSA3",7,0)
 W !!,"You will need a 132 column printer for this report!",!
"RTN","IBCECSA3",8,0)
 ;
"RTN","IBCECSA3",9,0)
 N %ZIS,ZTSAVE,ZTRTN,ZTDESC
"RTN","IBCECSA3",10,0)
 S %ZIS="QM" D ^%ZIS Q:POP
"RTN","IBCECSA3",11,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","IBCECSA3",12,0)
 . S ZTRTN="LIST^IBCECSA3"
"RTN","IBCECSA3",13,0)
 . S ZTSAVE("IBSORT1")=""
"RTN","IBCECSA3",14,0)
 . S ZTSAVE("IBSORT2")=""
"RTN","IBCECSA3",15,0)
 . S ZTSAVE("IBSORT3")=""
"RTN","IBCECSA3",16,0)
 . S ZTSAVE("IBSORTOR")=""
"RTN","IBCECSA3",17,0)
 . S ZTSAVE("^TMP(""IBCECSB"",$J,")=""
"RTN","IBCECSA3",18,0)
 . S ZTDESC="IB -Claims Status Awaiting Resolution Report" D ^%ZTLOAD K ZTSK D HOME^%ZIS
"RTN","IBCECSA3",19,0)
 U IO
"RTN","IBCECSA3",20,0)
LIST ; display
"RTN","IBCECSA3",21,0)
 N IBSTOP,X,IBPAGE,IBX,IBDIV,IBDA,IBPAY,IB,IBZ,IBZFT,IBFST,IBX2
"RTN","IBCECSA3",22,0)
 W:$E(IOST,1,2)["C-" @IOF ;Only initial form feed for print to screen
"RTN","IBCECSA3",23,0)
 S (IBSTOP,IBPAGE,IBFST,IBDIV)=0
"RTN","IBCECSA3",24,0)
 I IBSORT1="D" S IBDIV=1
"RTN","IBCECSA3",25,0)
 I '$D(^TMP("IBCECSB",$J)) D  G LISTQ
"RTN","IBCECSA3",26,0)
 . D HDR1 W !,"No entries found for this report"
"RTN","IBCECSA3",27,0)
 S IBX="" F  S IBX=$O(^TMP("IBCECSB",$J,IBX)) Q:IBX=""!IBSTOP  S IBX2="" F  S IBX2=$O(^TMP("IBCECSB",$J,IBX,IBX2)) Q:IBX2=""!IBSTOP  S IBX3="" F  S IBX3=$O(^TMP("IBCECSB",$J,IBX,IBX2,IBX3)) Q:IBX3=""!IBSTOP  D
"RTN","IBCECSA3",28,0)
 . I 'IBFST S IBPAY=$$IBPAY(IBX,IBX2,IBX3) D HDR1 S:'IBDIV IBFST=1 Q:IBSTOP
"RTN","IBCECSA3",29,0)
 . S IBDA=0 F  S IBDA=$O(^TMP("IBCECSB",$J,IBX,IBX2,IBX3,IBDA)) Q:'IBDA!IBSTOP  S IB=$G(^TMP("IBCECSB",$J,IBX,IBX2,IBX3,IBDA)) D
"RTN","IBCECSA3",30,0)
 .. I ($Y+5)>IOSL D HDR1 Q:IBSTOP
"RTN","IBCECSA3",31,0)
 .. W $$BN1^PRCAFN(+IB),$P(IB,U,12),?13,$E($P(IB,U,2),1,25),?40,$E($P(IB,U,3),1,30),?72,$P($P(IB,U,4),"~"),?78,$$DAT1^IBOUTL($P(IB,U,5)),?88,$E($P(IB,U,7),1,10),?100,"$"_$J($P(IB,U,6),0,2),?110,$P(IB,U,10),?122,$P(IB,U,11),!
"RTN","IBCECSA3",32,0)
 .. I $P(IB,U,12)="*" W " ***** CSA REVIEW IN PROCESS *****",!
"RTN","IBCECSA3",33,0)
 .. W " FORM TYPE: "_$P($G(^IBE(353,$P($G(^DGCR(399,+IB,0)),U,19),0)),U),!
"RTN","IBCECSA3",34,0)
 .. I 'IBDIV S X=" DIVISION: "_$P(IB,U,8) W X,$J(" ",40-$L(X))_"AUTHORIZING BILLER: "_$P($P(IB,U,9),"~",1),!
"RTN","IBCECSA3",35,0)
 .. W " MESSAGE TEXT: " S IBZFT=0
"RTN","IBCECSA3",36,0)
 .. S IBZ=0 F  S IBZ=$O(^IBM(361,IBDA,1,IBZ)) Q:'IBZ  D  Q:IBSTOP
"RTN","IBCECSA3",37,0)
 ... W:'IBZFT ?15 S X=$G(^IBM(361,IBDA,1,IBZ,0))
"RTN","IBCECSA3",38,0)
 ... F I=1:131:$L(X) W " "_$E(X,I,I+130),!
"RTN","IBCECSA3",39,0)
 ... S IBZFT=1
"RTN","IBCECSA3",40,0)
 ... I ($Y+5)>IOSL D HDR1 Q:IBSTOP
"RTN","IBCECSA3",41,0)
 .. W !
"RTN","IBCECSA3",42,0)
 G:IBSTOP LISTQ
"RTN","IBCECSA3",43,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IBCECSA3",44,0)
LISTQ I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCECSA3",45,0)
 W ! D ^%ZISC
"RTN","IBCECSA3",46,0)
 Q
"RTN","IBCECSA3",47,0)
IBPAY(IBX,IBX2,IBX3) ; return biller name
"RTN","IBCECSA3",48,0)
 N X
"RTN","IBCECSA3",49,0)
 S X=$O(^TMP("IBCECSB",$J,IBX,IBX2,IBX3,0))
"RTN","IBCECSA3",50,0)
 S X=$G(^TMP("IBCECSB",$J,IBX,IBX2,IBX3,X))
"RTN","IBCECSA3",51,0)
 Q $P($P(X,U,9),"~",1)
"RTN","IBCECSA3",52,0)
HDR1 ;
"RTN","IBCECSA3",53,0)
 N DIR,Y
"RTN","IBCECSA3",54,0)
 I IBPAGE D  Q:IBSTOP
"RTN","IBCECSA3",55,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBSTOP=('Y) Q:IBSTOP
"RTN","IBCECSA3",56,0)
 . W @IOF
"RTN","IBCECSA3",57,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCECSA3",58,0)
 W !,"Sort 1: ",$$SD^IBCECSA(IBSORT1)
"RTN","IBCECSA3",59,0)
 W ?46,"Claims Status Awaiting Resolution Report",?120,$J("Page: "_IBPAGE,11)
"RTN","IBCECSA3",60,0)
 W !,"Sort 2: ",$S($G(IBSORT2)'="":$$SD^IBCECSA(IBSORT2),1:"n/a")
"RTN","IBCECSA3",61,0)
 W ?104,$J("Run Date: "_$$HTE^XLFDT($H,"2Z"),27)
"RTN","IBCECSA3",62,0)
 W !,"Sort 3: ",$S($G(IBSORT3)'="":$$SD^IBCECSA(IBSORT3),1:"n/a")
"RTN","IBCECSA3",63,0)
 I IBDIV W !!,"Division: "_$S($G(IBX)=0:"",1:$G(IBX)),!,"Authorizing Biller: "_$G(IBPAY)
"RTN","IBCECSA3",64,0)
 W !,?72,"Last",?78,"Date of",?88,"Location",?100,"Current",?110,"Source of",?122,"Days Msg"
"RTN","IBCECSA3",65,0)
 W !,"Bill #",?13,"Payer Name",?40,"Patient Name",?72,"4 SSN",?78,"Service",?88,"of Service",?100,"Balance",?110,"Message",?122,"Pending"
"RTN","IBCECSA3",66,0)
 W !,$TR($J("",132)," ","-"),!
"RTN","IBCECSA3",67,0)
 Q
"RTN","IBCECSA3",68,0)
 ;
"RTN","IBCECSA3",69,0)
 ;
"RTN","IBCECSA3",70,0)
RESORT ; CSA screen re-sort action
"RTN","IBCECSA3",71,0)
 NEW DIR,X,Y,Z,IBSAVE,VALMQUIT,IBCURR
"RTN","IBCECSA3",72,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECSA3",73,0)
 W !!?2,"The CSA screen is currently sorted in the following manner:"
"RTN","IBCECSA3",74,0)
 W !!?9,"Primary Sort:  ",$S($G(IBSORT1)'="":$$SD^IBCECSA(IBSORT1),1:"n/a")
"RTN","IBCECSA3",75,0)
 W !?7,"Secondary Sort:  ",$S($G(IBSORT2)'="":$$SD^IBCECSA(IBSORT2),1:"n/a")
"RTN","IBCECSA3",76,0)
 W !?8,"Tertiary Sort:  ",$S($G(IBSORT3)'="":$$SD^IBCECSA(IBSORT3),1:"n/a")
"RTN","IBCECSA3",77,0)
 ;
"RTN","IBCECSA3",78,0)
 W !
"RTN","IBCECSA3",79,0)
 S DIR(0)="Y",DIR("A")="Would you like to change the sort criteria"
"RTN","IBCECSA3",80,0)
 S DIR("B")="Yes" D ^DIR K DIR
"RTN","IBCECSA3",81,0)
 I 'Y G RESORTX
"RTN","IBCECSA3",82,0)
 ;
"RTN","IBCECSA3",83,0)
 ; save the old sort criteria
"RTN","IBCECSA3",84,0)
 S IBSAVE=$G(IBSORT1)_U_$G(IBSORT2)_U_$G(IBSORT3)
"RTN","IBCECSA3",85,0)
 S Z="" F  S Z=$O(IBSORTOR(Z)) Q:Z=""  S IBSAVE=IBSAVE_U_Z_U_IBSORTOR(Z)
"RTN","IBCECSA3",86,0)
 ;
"RTN","IBCECSA3",87,0)
 W !
"RTN","IBCECSA3",88,0)
 K IBSORTOR
"RTN","IBCECSA3",89,0)
 D SORT^IBCECSA(1,$P(IBSAVE,U,1)) I $G(VALMQUIT) G RES1
"RTN","IBCECSA3",90,0)
 D SORT^IBCECSA(2) I $G(VALMQUIT) G RES1
"RTN","IBCECSA3",91,0)
 I $G(IBSORT2)'="" D SORT^IBCECSA(3) I $G(VALMQUIT) G RES1
"RTN","IBCECSA3",92,0)
RES1 ;
"RTN","IBCECSA3",93,0)
 I $G(IBSORT1)="" S IBSORT1=$P(IBSAVE,U,1)   ; need at least one
"RTN","IBCECSA3",94,0)
 ;
"RTN","IBCECSA3",95,0)
 ; see if the sort criteria changed
"RTN","IBCECSA3",96,0)
 S IBCURR=$G(IBSORT1)_U_$G(IBSORT2)_U_$G(IBSORT3)
"RTN","IBCECSA3",97,0)
 S Z="" F  S Z=$O(IBSORTOR(Z)) Q:Z=""  S IBCURR=IBCURR_U_Z_U_IBSORTOR(Z)
"RTN","IBCECSA3",98,0)
 I IBSAVE=IBCURR G RESORTX    ; no sort changes made at all
"RTN","IBCECSA3",99,0)
 ;
"RTN","IBCECSA3",100,0)
 ; time to rebuild the list because sorts have changed
"RTN","IBCECSA3",101,0)
 I $G(IBDAYS)="" S IBDAYS=0
"RTN","IBCECSA3",102,0)
 I $G(IBSEV)="" S IBSEV="R"
"RTN","IBCECSA3",103,0)
 D BLD^IBCECSA1
"RTN","IBCECSA3",104,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCECSA3",105,0)
 ;
"RTN","IBCECSA3",106,0)
RESORTX ;
"RTN","IBCECSA3",107,0)
 Q
"RTN","IBCECSA3",108,0)
 ;
"RTN","IBCECSA3",109,0)
MCS ; Link to the Multiple CSA Message Management option
"RTN","IBCECSA3",110,0)
 NEW IBCSAMCS S IBCSAMCS=1
"RTN","IBCECSA3",111,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECSA3",112,0)
 I '$$KCHK^XUSRB("IB MESSAGE MANAGEMENT") D  G MCSX
"RTN","IBCECSA3",113,0)
 . W !!?5,"You must hold the IB MESSAGE MANAGEMENT key to access this option."
"RTN","IBCECSA3",114,0)
 . D PAUSE^VALM1
"RTN","IBCECSA3",115,0)
 . Q
"RTN","IBCECSA3",116,0)
 ;
"RTN","IBCECSA3",117,0)
 D      ; call the MCS screen
"RTN","IBCECSA3",118,0)
 . NEW IBSORT1,IBSORT2,IBSORT3,IBDAYS,IBSEV     ; protect CSA vars
"RTN","IBCECSA3",119,0)
 . D EN^IBCEMCL
"RTN","IBCECSA3",120,0)
 . Q
"RTN","IBCECSA3",121,0)
 ;
"RTN","IBCECSA3",122,0)
 I $G(IBCSAMCS)=2 D BLD^IBCECSA1 S VALMBG=1     ; rebuild CSA
"RTN","IBCECSA3",123,0)
 S VALMBCK="R"
"RTN","IBCECSA3",124,0)
MCSX ;
"RTN","IBCECSA3",125,0)
 Q
"RTN","IBCECSA3",126,0)
 ;
"RTN","IBCECSA4")
0^49^B57240644^B56824408
"RTN","IBCECSA4",1,0)
IBCECSA4 ;ALB/CXW - IB CLAIMS STATUS AWAITING RESOLUTION SCREEN ;5-AUG-1999
"RTN","IBCECSA4",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,320,371**;21-MAR-1994;Build 57
"RTN","IBCECSA4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCECSA4",4,0)
 ;
"RTN","IBCECSA4",5,0)
SMSG ;select message
"RTN","IBCECSA4",6,0)
 N IBCOM,IBX,IBDAX,IBA
"RTN","IBCECSA4",7,0)
 D SEL(.IBDAX,1)
"RTN","IBCECSA4",8,0)
 I $O(IBDAX(""))="" G SMSGQ
"RTN","IBCECSA4",9,0)
 S IBDAX=+$O(IBDAX(0)),IBA=$G(IBDAX(IBDAX))
"RTN","IBCECSA4",10,0)
 S IBX=$G(^TMP("IBCECSB",$J,$P(IBA,U,3),$P(IBA,U,4),$P(IBA,U,6),$P(IBA,U,2)))
"RTN","IBCECSA4",11,0)
 I IBX'="" D
"RTN","IBCECSA4",12,0)
 . Q:'$$LOCK^IBCEU0(361,$P(IBA,U,2))
"RTN","IBCECSA4",13,0)
 . D EN^VALM("IBCEM CSA MSG")
"RTN","IBCECSA4",14,0)
 . D UNLOCK^IBCEU0(361,$P(IBA,U,2))
"RTN","IBCECSA4",15,0)
SMSGQ S VALMBCK="R"
"RTN","IBCECSA4",16,0)
 I $G(IBFASTXT) S VALMBCK="Q" K IBDAX
"RTN","IBCECSA4",17,0)
 D:$O(IBDAX(0)) BLD^IBCECSA1
"RTN","IBCECSA4",18,0)
 Q
"RTN","IBCECSA4",19,0)
 ;
"RTN","IBCECSA4",20,0)
COB ; COB management link from CSA
"RTN","IBCECSA4",21,0)
 N IBA,IBX
"RTN","IBCECSA4",22,0)
 ;IBX,IBA are killed during cancel execution
"RTN","IBCECSA4",23,0)
 D FULL^VALM1
"RTN","IBCECSA4",24,0)
 D EN^IBCECOB
"RTN","IBCECSA4",25,0)
 I $D(IBFASTXT) K IBFASTXT
"RTN","IBCECSA4",26,0)
 S VALMBCK="R"
"RTN","IBCECSA4",27,0)
 Q
"RTN","IBCECSA4",28,0)
 ;
"RTN","IBCECSA4",29,0)
EDI ;History detail display
"RTN","IBCECSA4",30,0)
 N IBIFN,IBX,IBA
"RTN","IBCECSA4",31,0)
 D FULL^VALM1
"RTN","IBCECSA4",32,0)
 S IBDAX=$O(IBDAX(0)),IBIFN=+$G(IBDAX(IBDAX))
"RTN","IBCECSA4",33,0)
 D EDI2^IBCECOB2(IBIFN)
"RTN","IBCECSA4",34,0)
 S VALMBCK="R"
"RTN","IBCECSA4",35,0)
 Q
"RTN","IBCECSA4",36,0)
EOB ;View an EOB
"RTN","IBCECSA4",37,0)
 N IBIFN,IBA,IBX
"RTN","IBCECSA4",38,0)
 D FULL^VALM1
"RTN","IBCECSA4",39,0)
 S IBDAX=$O(IBDAX(0)),IBIFN=+$G(IBDAX(IBDAX))
"RTN","IBCECSA4",40,0)
 D EN^VALM("IBCEM VIEW EOB")
"RTN","IBCECSA4",41,0)
 Q
"RTN","IBCECSA4",42,0)
 ;
"RTN","IBCECSA4",43,0)
TPJI ;Third Party joint Inquiry
"RTN","IBCECSA4",44,0)
 N IBIFN,IBX,IBA
"RTN","IBCECSA4",45,0)
 D FULL^VALM1
"RTN","IBCECSA4",46,0)
 S IBDAX=$O(IBDAX(0)),IBIFN=+$G(IBDAX(IBDAX))
"RTN","IBCECSA4",47,0)
 D TPJI1^IBCECOB2(IBIFN)
"RTN","IBCECSA4",48,0)
 S VALMBCK="R"
"RTN","IBCECSA4",49,0)
 Q
"RTN","IBCECSA4",50,0)
 ;
"RTN","IBCECSA4",51,0)
PBILL ;Print bill - not for resubmit
"RTN","IBCECSA4",52,0)
 ; IB*320 - allow action for MRA request claims
"RTN","IBCECSA4",53,0)
 N IBIFN,IBX,IBA,IBRESUB
"RTN","IBCECSA4",54,0)
 D FULL^VALM1
"RTN","IBCECSA4",55,0)
 S IBDAX=$O(IBDAX(0)),IBIFN=+$G(IBDAX(+IBDAX))
"RTN","IBCECSA4",56,0)
 I "234"'[$P($G(^DGCR(399,IBIFN,0)),U,13) W !!,"Bill status must be REQUEST MRA, AUTHORIZED or PRNT/TX to print the bill." D PAUSE^VALM1 G PB1
"RTN","IBCECSA4",57,0)
 ;
"RTN","IBCECSA4",58,0)
 ; don't update review status for MRA's
"RTN","IBCECSA4",59,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2 S IBRESUB=1
"RTN","IBCECSA4",60,0)
 E  S IBRESUB=$$RESUB(IBIFN,1,"PX")
"RTN","IBCECSA4",61,0)
 I IBRESUB'>0 W !,*7,"This is not a transmittable bill or review not needed" D PAUSE^VALM1 G PB1
"RTN","IBCECSA4",62,0)
 I IBRESUB=2 D  G PB1
"RTN","IBCECSA4",63,0)
 . N IB364
"RTN","IBCECSA4",64,0)
 . S IB364=+$P($G(IBDAX(IBDAX)),U,5)
"RTN","IBCECSA4",65,0)
 . D PRINT1^IBCEM03(IBIFN,.IBDAX,IB364)
"RTN","IBCECSA4",66,0)
 D PBILL1^IBCECOB2(IBIFN)
"RTN","IBCECSA4",67,0)
PB1 ;
"RTN","IBCECSA4",68,0)
 S VALMBCK="R"
"RTN","IBCECSA4",69,0)
 Q
"RTN","IBCECSA4",70,0)
 ;
"RTN","IBCECSA4",71,0)
CANCEL ;Cancel bill
"RTN","IBCECSA4",72,0)
 N IBIFN,IB364,IBX,IBA,MRACHK
"RTN","IBCECSA4",73,0)
 ; IBX,IBA will be killed during execution - need to protect them
"RTN","IBCECSA4",74,0)
 D FULL^VALM1
"RTN","IBCECSA4",75,0)
 S IBDAX=$O(IBDAX(0)),IBIFN=+$G(IBDAX(+IBDAX))
"RTN","IBCECSA4",76,0)
 ; Check for security key
"RTN","IBCECSA4",77,0)
 I '$$KCHK^XUSRB("IB AUTHORIZE") D  G CANCELQ
"RTN","IBCECSA4",78,0)
 . W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCECSA4",79,0)
 . W !?5,"The necessary key is IB AUTHORIZE.  Please see your manager."
"RTN","IBCECSA4",80,0)
 . D PAUSE^VALM1
"RTN","IBCECSA4",81,0)
 . Q
"RTN","IBCECSA4",82,0)
 D MRACHK I MRACHK G CANCELQ
"RTN","IBCECSA4",83,0)
 S IB364=+$P($G(IBDAX(IBDAX)),U,5)
"RTN","IBCECSA4",84,0)
 D CANCEL^IBCEM3(.IBDAX,IBIFN,IB364)
"RTN","IBCECSA4",85,0)
CANCELQ S VALMBCK="R"
"RTN","IBCECSA4",86,0)
 Q
"RTN","IBCECSA4",87,0)
 ;
"RTN","IBCECSA4",88,0)
CLONE ;'Copy/cancel bill' protocol action
"RTN","IBCECSA4",89,0)
 N IBX,IBA,IB364,MRACHK,IBIFN
"RTN","IBCECSA4",90,0)
 ; IBX,IBA will be killed during execution - need to protect them
"RTN","IBCECSA4",91,0)
 D FULL^VALM1
"RTN","IBCECSA4",92,0)
 S IBDAX=$O(IBDAX("")),IBIFN=+$P($G(IBDAX(IBDAX)),U)
"RTN","IBCECSA4",93,0)
 I IBDAX="" G CLONEQ
"RTN","IBCECSA4",94,0)
 ; Check for security key
"RTN","IBCECSA4",95,0)
 I '$$KCHK^XUSRB("IB AUTHORIZE") D  G CLONEQ
"RTN","IBCECSA4",96,0)
 . W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCECSA4",97,0)
 . W !?5,"The necessary key is IB AUTHORIZE.  Please see your manager."
"RTN","IBCECSA4",98,0)
 . D PAUSE^VALM1
"RTN","IBCECSA4",99,0)
 . Q
"RTN","IBCECSA4",100,0)
 D MRACHK I MRACHK G CLONEQ
"RTN","IBCECSA4",101,0)
 S IB364=+$P($G(IBDAX(IBDAX)),U,5)
"RTN","IBCECSA4",102,0)
 D COPYCLON^IBCECOB2(+$G(IBDAX(IBDAX)),IB364,.IBDAX)
"RTN","IBCECSA4",103,0)
CLONEQ S VALMBCK="R"
"RTN","IBCECSA4",104,0)
 Q
"RTN","IBCECSA4",105,0)
 ;
"RTN","IBCECSA4",106,0)
PRO ; Copy for secondary/tertiary bill
"RTN","IBCECSA4",107,0)
 N IBIFNH,IBIFN,IB364,IBX,IBA,Z,IBCBASK,IBCBCOPY,IBCAN
"RTN","IBCECSA4",108,0)
 D FULL^VALM1
"RTN","IBCECSA4",109,0)
 ;IBDAX - array from selection of message
"RTN","IBCECSA4",110,0)
 S IBA=$G(IBDAX(+$G(IBDAX)))
"RTN","IBCECSA4",111,0)
 G:'IBA PROQ
"RTN","IBCECSA4",112,0)
 S IBX=$G(^TMP("IBCECSB",$J,$P(IBA,U,3),$P(IBA,U,4),$P(IBA,U,6),$P(IBA,U,2))),IBIFN=$P(IBA,U)
"RTN","IBCECSA4",113,0)
 S IB364=+$P(IBA,U,5)
"RTN","IBCECSA4",114,0)
 G:'IBIFN PROQ
"RTN","IBCECSA4",115,0)
 ;
"RTN","IBCECSA4",116,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2 D  G PROQ
"RTN","IBCECSA4",117,0)
 . W !!?4,"This bill is in a status of REQUEST MRA."
"RTN","IBCECSA4",118,0)
 . I $$CHK^IBCEMU1(IBIFN) W !?4,"MRA EOBs must be processed from the MRA management worklist."
"RTN","IBCECSA4",119,0)
 . E  W !?4,"There are no MRA EOBs on file."
"RTN","IBCECSA4",120,0)
 . D PAUSE^VALM1
"RTN","IBCECSA4",121,0)
 . Q
"RTN","IBCECSA4",122,0)
 ;
"RTN","IBCECSA4",123,0)
 D COBCOPY^IBCECOB2(IBIFN,IB364,1,$P(IBA,U,2),"INIT^IBCECSA2")
"RTN","IBCECSA4",124,0)
PROQ S VALMBCK="R"
"RTN","IBCECSA4",125,0)
 Q
"RTN","IBCECSA4",126,0)
 ;
"RTN","IBCECSA4",127,0)
RES ;Resubmit bill by print
"RTN","IBCECSA4",128,0)
 N IBTMP,IB364,IBIFN,IBX,IBA
"RTN","IBCECSA4",129,0)
 D FULL^VALM1
"RTN","IBCECSA4",130,0)
 S (IBTMP,IBDAX)=$O(IBDAX(0)),IBTMP(IBTMP)=IBDAX(IBDAX)
"RTN","IBCECSA4",131,0)
 S IBIFN=$P($G(IBDAX(+IBDAX)),U)
"RTN","IBCECSA4",132,0)
 S IB364=+$P($G(IBDAX(IBDAX)),U,5)
"RTN","IBCECSA4",133,0)
 I IBIFN D PRINT1^IBCEM03(IBIFN,.IBDAX,IB364),PAUSE^VALM1,INIT^IBCECSA2
"RTN","IBCECSA4",134,0)
 S IBDAX(IBTMP)=IBTMP(IBTMP)
"RTN","IBCECSA4",135,0)
 S VALMBCK="R"
"RTN","IBCECSA4",136,0)
 Q
"RTN","IBCECSA4",137,0)
 ;
"RTN","IBCECSA4",138,0)
EBI ;Edit bill
"RTN","IBCECSA4",139,0)
 N IBFLG,IBIFN,IB364,IBX,IBA
"RTN","IBCECSA4",140,0)
 K ^TMP($J,"IBBILL")
"RTN","IBCECSA4",141,0)
 D FULL^VALM1
"RTN","IBCECSA4",142,0)
 S IBDAX=$O(IBDAX(""))
"RTN","IBCECSA4",143,0)
 I IBDAX="" G EDITQ
"RTN","IBCECSA4",144,0)
 S IBIFN=$P(IBDAX(IBDAX),U)
"RTN","IBCECSA4",145,0)
 S IBFLG=1 D  I IBFLG S IBDAX="" D PAUSE^VALM1 G EDITQ
"RTN","IBCECSA4",146,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,13)>2 W !,*7,"An authorized bill can not be edited." Q
"RTN","IBCECSA4",147,0)
 . I '$D(^XUSEC("IB EDIT",DUZ)) W !,*7,"You are not authorized to edit a bill" Q
"RTN","IBCECSA4",148,0)
 . S IBFLG=0
"RTN","IBCECSA4",149,0)
 S IBIFN=+$G(IBDAX(IBDAX))
"RTN","IBCECSA4",150,0)
 S IB364=+$P($G(IBDAX(IBDAX)),U,5)
"RTN","IBCECSA4",151,0)
 D EBILL^IBCEM3(.IBDAX,IBIFN,IB364)
"RTN","IBCECSA4",152,0)
EDITQ S VALMBCK="R"
"RTN","IBCECSA4",153,0)
 Q
"RTN","IBCECSA4",154,0)
 ;
"RTN","IBCECSA4",155,0)
SEL(IBDA,ONE) ; Select entry(s) from list
"RTN","IBCECSA4",156,0)
 ; IBDA = array returned if selections made
"RTN","IBCECSA4",157,0)
 ;    IBDAX(n)=ien of bill selected (file 399)
"RTN","IBCECSA4",158,0)
 ; ONE = if set to 1, only one selection can be made at a time
"RTN","IBCECSA4",159,0)
 N IB
"RTN","IBCECSA4",160,0)
 K IBDA
"RTN","IBCECSA4",161,0)
 D EN^VALM2($G(XQORNOD(0)),$S('$G(ONE):"",1:"S"))
"RTN","IBCECSA4",162,0)
 S IBDA=0 F  S IBDA=$O(VALMY(IBDA)) Q:'IBDA  D
"RTN","IBCECSA4",163,0)
 . S IBDA(IBDA)=$P($G(^TMP("IBCECSA",$J,IBDA)),U,2,7)
"RTN","IBCECSA4",164,0)
 Q
"RTN","IBCECSA4",165,0)
 ;
"RTN","IBCECSA4",166,0)
RESUB(IBIFN,TXMT,IBFUNC,IBTBA) ; Function asks if resubmit as resolution to a
"RTN","IBCECSA4",167,0)
 ;   message is the intention
"RTN","IBCECSA4",168,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCECSA4",169,0)
 ; TXMT = flag if = 1, assume it's transmittable, don't have to check
"RTN","IBCECSA4",170,0)
 ; IBFUNC = code to say where the code is called from
"RTN","IBCECSA4",171,0)
 ;  'E'=edit/authorize  'P'=print 'PX'= print/not to resubmit  'C'=cancel
"RTN","IBCECSA4",172,0)
 ; IBTBA = transmit bill array returned to calling routine.  Optional
"RTN","IBCECSA4",173,0)
 ;    parameter to be passed by reference.
"RTN","IBCECSA4",174,0)
 ;    IBTBA(364ptr)=""
"RTN","IBCECSA4",175,0)
 ;
"RTN","IBCECSA4",176,0)
 ; Returns:
"RTN","IBCECSA4",177,0)
 ; -1 = ^ or timeout at prompt
"RTN","IBCECSA4",178,0)
 ;  0 = not a transmittable bill or review not needed
"RTN","IBCECSA4",179,0)
 ;  1 = don't update the review status (user choice)
"RTN","IBCECSA4",180,0)
 ;  2 = Yes, update the review status (user choice), or resubmit by print
"RTN","IBCECSA4",181,0)
 ;
"RTN","IBCECSA4",182,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,STAT
"RTN","IBCECSA4",183,0)
 KILL IBTBA
"RTN","IBCECSA4",184,0)
 I '$G(TXMT),'$$TXMT^IBCEF4(IBIFN) S Y=0 G RESUB1   ; not transmittable
"RTN","IBCECSA4",185,0)
 ;
"RTN","IBCECSA4",186,0)
 ; Check for any messages or EOB's needing review
"RTN","IBCECSA4",187,0)
 S STAT=$$STATUS^IBCEF4(IBIFN)
"RTN","IBCECSA4",188,0)
 I '$TR(STAT,U) S Y=0 G RESUB1                ; no unreviewed items
"RTN","IBCECSA4",189,0)
 I $P(STAT,U,1) S IBTBA($P(STAT,U,1))=""      ; 364 ien for 361 data
"RTN","IBCECSA4",190,0)
 I $P(STAT,U,2) S IBTBA($P(STAT,U,2))=""      ; 364 ien for 361.1 data
"RTN","IBCECSA4",191,0)
 ;
"RTN","IBCECSA4",192,0)
 I IBFUNC'="P" D
"RTN","IBCECSA4",193,0)
 . S DIR(0)="YA",DIR("A",1)="",DIR("A",2)="This bill is in need of review due to receipt of a status msg or EOB",DIR("A")="OK to update the review status to 'REVIEW COMPLETE' based on this action?: ",DIR("B")="NO"
"RTN","IBCECSA4",194,0)
 . S DIR("?",1)="You have just "_$S(IBFUNC="E":"requested re-transmission of",IBFUNC="C":"cancelled",1:"")_" the bill"
"RTN","IBCECSA4",195,0)
 . S DIR("?",2)="You can update the review status of the unreviewed message to ",DIR("?",3)=" 'REVIEW COMPLETE' if you say YES here"
"RTN","IBCECSA4",196,0)
 . S DIR("?")="Press ENTER to continue "
"RTN","IBCECSA4",197,0)
 . D ^DIR K DIR
"RTN","IBCECSA4",198,0)
 . I $D(DTOUT)!$D(DUOUT) S Y=-1 Q
"RTN","IBCECSA4",199,0)
 . S Y=Y+1
"RTN","IBCECSA4",200,0)
 E  D
"RTN","IBCECSA4",201,0)
 . W !,"The review status of this message will be updated to 'REVIEW COMPLETE'",!,"  based on this action"
"RTN","IBCECSA4",202,0)
 . S Y=2
"RTN","IBCECSA4",203,0)
 ;
"RTN","IBCECSA4",204,0)
RESUB1 Q +Y
"RTN","IBCECSA4",205,0)
 ;
"RTN","IBCECSA4",206,0)
RETXMT ;
"RTN","IBCECSA4",207,0)
 N IB364,IBIFN
"RTN","IBCECSA4",208,0)
 D FULL^VALM1
"RTN","IBCECSA4",209,0)
 S IBDAX=$O(IBDAX(0)),IB364=+$P($G(IBDAX(IBDAX)),U,5),IBIFN=+$P($G(IBDAX(IBDAX)),U)
"RTN","IBCECSA4",210,0)
 I 'IB364!('IBIFN) G RETXMTQ
"RTN","IBCECSA4",211,0)
 D MRACHK I MRACHK G RETXMTQ
"RTN","IBCECSA4",212,0)
 D RESUB^IBCE(IB364)
"RTN","IBCECSA4",213,0)
RETXMTQ S VALMBCK="R"
"RTN","IBCECSA4",214,0)
 Q
"RTN","IBCECSA4",215,0)
 ;
"RTN","IBCECSA4",216,0)
MRACHK ; Restrict access to process REQUEST MRA claims
"RTN","IBCECSA4",217,0)
 S MRACHK=0
"RTN","IBCECSA4",218,0)
 ; At least one MRA EOB appears on the MRA management worklist
"RTN","IBCECSA4",219,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,$$MRAWL^IBCEMU2(IBIFN) S MRACHK=1 D  D PAUSE^VALM1
"RTN","IBCECSA4",220,0)
 . W !,?4,"This bill is in a status of REQUEST MRA and it does appear on"
"RTN","IBCECSA4",221,0)
 . W !,?4,"the MRA Management Worklist.  Please use the MRA Management Menu"
"RTN","IBCECSA4",222,0)
 . W !,?4,"options for all processing related to this bill."
"RTN","IBCECSA4",223,0)
 Q
"RTN","IBCEF")
0^48^B55741819^B53271927
"RTN","IBCEF",1,0)
IBCEF ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;22-JAN-96
"RTN","IBCEF",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,51,137,288,296,361,371**;21-MAR-94;Build 57
"RTN","IBCEF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF",4,0)
 ;
"RTN","IBCEF",5,0)
 ;IBIFN = bill ien throughout this routine
"RTN","IBCEF",6,0)
COB(IBIFN) ; Bill seq
"RTN","IBCEF",7,0)
 N A
"RTN","IBCEF",8,0)
 S A=$P($G(^DGCR(399,IBIFN,0)),U,21) S:A="" A="P"
"RTN","IBCEF",9,0)
 Q A
"RTN","IBCEF",10,0)
 ;
"RTN","IBCEF",11,0)
COBN(IBIFN,A) ; Return seq # of selected payer
"RTN","IBCEF",12,0)
 ; A = 'PST' or null to get current bill payer seq #
"RTN","IBCEF",13,0)
 I $G(A)="" S A=$$COB(IBIFN) S:"PST"'[A A="P"
"RTN","IBCEF",14,0)
 I 'A S A=$F("PST",A)-1 S:A<1 A=1
"RTN","IBCEF",15,0)
 Q A
"RTN","IBCEF",16,0)
 ;
"RTN","IBCEF",17,0)
POLICY(IBIFN,IBPC,IBCOBN) ; Return raw data from policy info on bill
"RTN","IBCEF",18,0)
 ; IBPC  = pc # of data element in policy (optional)
"RTN","IBCEF",19,0)
 ;          if null, 0-node is returned
"RTN","IBCEF",20,0)
 ; IBCOBN = bill designation 1-3 or 'PST' (optional)
"RTN","IBCEF",21,0)
 ;          if null, default to current
"RTN","IBCEF",22,0)
 N IBI
"RTN","IBCEF",23,0)
 I "PST"[$G(IBCOBN) S IBCOBN=$$COBN(IBIFN,$G(IBCOBN))
"RTN","IBCEF",24,0)
 S IBI=$G(^DGCR(399,IBIFN,"I"_IBCOBN))
"RTN","IBCEF",25,0)
 I $G(IBPC) S IBI=$P(IBI,U,IBPC)
"RTN","IBCEF",26,0)
POLICYQ Q IBI
"RTN","IBCEF",27,0)
 ;
"RTN","IBCEF",28,0)
INSADDR(IBIFN,IBCOB) ; Return insured's address in 7 pieces:
"RTN","IBCEF",29,0)
 ; ALL STREET ADDRESSES^CITY^STATE ABBREVIATION^ZIP^STREET ADDRESS 1^
"RTN","IBCEF",30,0)
 ;  STREET ADDRESS 2^STREET ADDRESS 3
"RTN","IBCEF",31,0)
 ; IBIFN = bill ien
"RTN","IBCEF",32,0)
 ; IBCOB = bill designation (P)rimary, (S)econdary, (T)ertiary
"RTN","IBCEF",33,0)
 ;          or 1-2-3. If not defined or null, return current
"RTN","IBCEF",34,0)
 ; If insured is patient or spouse, take from patient file top level
"RTN","IBCEF",35,0)
 ;   fields, then if top-level street addresses are blank and policy
"RTN","IBCEF",36,0)
 ;   level fields are not, use policy level
"RTN","IBCEF",37,0)
 ; If insured is other than patient/spouse, use policy level fields only
"RTN","IBCEF",38,0)
 N A,B,IBADDR,IBI,DFN,VAPA,VATEST
"RTN","IBCEF",39,0)
 S:$G(IBCOB)="" IBCOB=""
"RTN","IBCEF",40,0)
 I 'IBCOB S IBCOB=$$COBN(IBIFN,$G(IBCOB))
"RTN","IBCEF",41,0)
 S IBI=+$$POLICY(IBIFN,16,IBCOB)     ; pt relationship to insured
"RTN","IBCEF",42,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",43,0)
 I $S('IBI:1,1:"12"'[IBI) S IBADDR="" G INSADDQ
"RTN","IBCEF",44,0)
 ; insured's address (patient/spouse) same as patient's
"RTN","IBCEF",45,0)
 S VATEST("ADD",9)=+$G(^DGCR(399,IBIFN,"U")),VATEST("ADD",10)=+$P($G(^("U")),U,2)
"RTN","IBCEF",46,0)
 D ADD^VADPT
"RTN","IBCEF",47,0)
 S IBADDR=VAPA(1)_" "_VAPA(2)_" "_VAPA(3)_U_VAPA(4)_U_$P($G(^DIC(5,+VAPA(5),0)),U,2)_U_VAPA(6)_U_VAPA(1)_U_VAPA(2)_U_VAPA(3)
"RTN","IBCEF",48,0)
INSADDQ S A=$P($G(^DGCR(399,IBIFN,"M")),U,(11+IBCOB))
"RTN","IBCEF",49,0)
 S A=$G(^DPT(DFN,.312,+A,3))
"RTN","IBCEF",50,0)
 I $TR($P(IBADDR,U)," ")="" D PI3
"RTN","IBCEF",51,0)
 I IBI=2,$$NOPUNCT($P(A,U,6,10),1)'="" D PI3
"RTN","IBCEF",52,0)
 Q IBADDR
"RTN","IBCEF",53,0)
 ;
"RTN","IBCEF",54,0)
PI3 ; build IBADDR string from patient insurance 3 node data
"RTN","IBCEF",55,0)
 S $P(IBADDR,U,1)=$P(A,U,6)_" "_$P(A,U,7)
"RTN","IBCEF",56,0)
 S $P(IBADDR,U,5,6)=$P(A,U,6,7)
"RTN","IBCEF",57,0)
 F B=2,4 S $P(IBADDR,U,B)=$P(A,U,B+6)
"RTN","IBCEF",58,0)
 S $P(IBADDR,U,3)=$P($G(^DIC(5,+$P(A,U,9),0)),U,2)
"RTN","IBCEF",59,0)
 S $P(IBADDR,U,7)=""   ; no street address 3 in file 2.312
"RTN","IBCEF",60,0)
 Q
"RTN","IBCEF",61,0)
 ;
"RTN","IBCEF",62,0)
PTADDR(IBIFN,ELE) ;Return part of patient's permanent address
"RTN","IBCEF",63,0)
 ;IBIFN = bill ien
"RTN","IBCEF",64,0)
 ;ELE = subscript in ^UTILITY("VAPA", array for element needed
"RTN","IBCEF",65,0)
 ;
"RTN","IBCEF",66,0)
 I '$D(^UTILITY("VAPA",$J)) D  ; once per pt
"RTN","IBCEF",67,0)
 .N VAHOW,DFN,VAPA
"RTN","IBCEF",68,0)
 .S VAHOW=2,DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2),VAPA("P")=""
"RTN","IBCEF",69,0)
 .D ADD^VADPT
"RTN","IBCEF",70,0)
 Q $P($G(^UTILITY("VAPA",$J,ELE)),U)
"RTN","IBCEF",71,0)
 ;
"RTN","IBCEF",72,0)
PTDEM(IBIFN,ELE,PC) ;Return part of patient's demographics
"RTN","IBCEF",73,0)
 ;IBIFN = bill ien
"RTN","IBCEF",74,0)
 ;ELE = subscript in ^UTILITY("VADM" array for demographic element needed
"RTN","IBCEF",75,0)
 ;PC = pc of string at subscript ELE to be returned
"RTN","IBCEF",76,0)
 ;
"RTN","IBCEF",77,0)
 I '$G(PC) S PC=1
"RTN","IBCEF",78,0)
 I '$D(^UTILITY("VADM",$J)) D  ; once per pt
"RTN","IBCEF",79,0)
 .N VAHOW,DFN,VADM
"RTN","IBCEF",80,0)
 .S VAHOW=2,DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",81,0)
 .D DEM^VADPT
"RTN","IBCEF",82,0)
 Q $P($G(^UTILITY("VADM",$J,ELE)),U,PC)
"RTN","IBCEF",83,0)
 ;
"RTN","IBCEF",84,0)
PTEMPL(IBIFN,ELE,WHOSE,VAOA) ;Return part of pt's or spouse's employer info
"RTN","IBCEF",85,0)
 ;ELE = subscript in VAOA array for employer element needed
"RTN","IBCEF",86,0)
 ;WHOSE = 6 if spouse's info needed  5 if pt info needed (DEFAULT)
"RTN","IBCEF",87,0)
 ;
"RTN","IBCEF",88,0)
 N DFN
"RTN","IBCEF",89,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2),VAOA("A")=$S($G(WHOSE):WHOSE,1:5)
"RTN","IBCEF",90,0)
 D OAD^VADPT
"RTN","IBCEF",91,0)
 Q $P($G(VAOA(ELE)),U)
"RTN","IBCEF",92,0)
 ;
"RTN","IBCEF",93,0)
INSDEM(IBIFN,IBCOB) ; Return insured's demographics in 6 pieces:
"RTN","IBCEF",94,0)
 ; DATE OF BIRTH^SEX^PHONE^BRANCH pointer^RANK^SSN(no dashes)
"RTN","IBCEF",95,0)
 ; IBIFN = bill ien
"RTN","IBCEF",96,0)
 ; IBCOB = bill designation (P)rimary (default), (S)econdary, (T)ertiary
"RTN","IBCEF",97,0)
 ;          or 1,2,3 ... if not defined or null, return current
"RTN","IBCEF",98,0)
 ; If insured is patient/spouse, take from patient file top level
"RTN","IBCEF",99,0)
 ;   fields, then if top-level are blank and policy level aren't,
"RTN","IBCEF",100,0)
 ;   use policy level
"RTN","IBCEF",101,0)
 ; If insured other than patient/spouse, use policy level fields only
"RTN","IBCEF",102,0)
 N A,B,IBDEM,IBI,DFN,VADM
"RTN","IBCEF",103,0)
 S:$G(IBCOB)="" IBCOB=""
"RTN","IBCEF",104,0)
 S:'IBCOB IBCOB=$$COBN(IBIFN,IBCOB)
"RTN","IBCEF",105,0)
 S IBI=$$WHOSINS(IBIFN,IBCOB)
"RTN","IBCEF",106,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",107,0)
 I $S('IBI:1,1:"12"'[IBI) S IBDEM="" G INSDEM1
"RTN","IBCEF",108,0)
 ; If it gets here, assume insured is patient/spouse
"RTN","IBCEF",109,0)
 S A=$$PTDEM(IBIFN,0),A=$$PTADDR(IBIFN,0)
"RTN","IBCEF",110,0)
 F A=2,3,5 S VADM(A)=$P($G(^UTILITY("VADM",$J,A)),U)
"RTN","IBCEF",111,0)
 S VAPA(8)=$P($G(^UTILITY("VAPA",$J,8)),U)
"RTN","IBCEF",112,0)
 I VADM(5)="",'VADM(3),VAPA(8)="" S IBDEM="" G INSDEM1
"RTN","IBCEF",113,0)
 S $P(IBDEM,U,3)=VAPA(8),$P(IBDEM,U,6)=VADM(2)
"RTN","IBCEF",114,0)
 I IBI=1,VADM(3) S $P(IBDEM,U)=VADM(3) ;Patient's own policy only
"RTN","IBCEF",115,0)
INSDEM1 S A=$P($G(^DGCR(399,IBIFN,"M")),U,(11+IBCOB))
"RTN","IBCEF",116,0)
 S A=$G(^DPT(DFN,.312,+A,3))
"RTN","IBCEF",117,0)
 S:"MF"'[$G(VADM(5)) VADM(5)=""
"RTN","IBCEF",118,0)
 S $P(IBDEM,U,2)=$S(IBI=1:VADM(5),1:$P(A,U,12))
"RTN","IBCEF",119,0)
 S $P(IBDEM,U,4,5)=$P(A,U,2)_U_$P(A,U,3)
"RTN","IBCEF",120,0)
 S:'$P(IBDEM,U) $P(IBDEM,U)=$P(A,U)
"RTN","IBCEF",121,0)
 S:$P(IBDEM,U,3)="" $P(IBDEM,U,3)=$P(A,U,11)
"RTN","IBCEF",122,0)
 S:$P(IBDEM,U,6)="" $P(IBDEM,U,6)=$P(A,U,5)
"RTN","IBCEF",123,0)
 Q IBDEM
"RTN","IBCEF",124,0)
 ;
"RTN","IBCEF",125,0)
INSEMPL(IBIFN,IBCOB) ; Return insured's employer data in 5 pieces:
"RTN","IBCEF",126,0)
 ; EMPLOYER NAME^EMPLOYER CITY^EMPLOYER STATE ABBREVIATION^STATE IEN^STREET 1
"RTN","IBCEF",127,0)
 ; IBCOB = bill designation (P)rimary-default, (S)econdary, (T)ertiary
"RTN","IBCEF",128,0)
 ;            or 123 - if not defined or null, return current
"RTN","IBCEF",129,0)
 N A,IBEMPL,IBI,DFN,VAOA
"RTN","IBCEF",130,0)
 S IBI=$$WHOSINS(IBIFN,$G(IBCOB))
"RTN","IBCEF",131,0)
 I $S('IBI:1,1:"12"'[IBI) S IBEMPL="^^" G INSEMPQ
"RTN","IBCEF",132,0)
 ; insured = pt/spouse
"RTN","IBCEF",133,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",134,0)
 S A=$$PTEMPL(IBIFN,0,IBI+4,.VAOA)
"RTN","IBCEF",135,0)
 S IBEMPL=VAOA(9)_U_VAOA(4)_U_$P($G(^DIC(5,+VAOA(5),0)),U,2)_U_+VAOA(5)_U_VAOA(1)
"RTN","IBCEF",136,0)
INSEMPQ Q IBEMPL
"RTN","IBCEF",137,0)
 ;
"RTN","IBCEF",138,0)
WHOSINS(IBIFN,IBCOB) ; Determine who is insured for bill IBIFN and 
"RTN","IBCEF",139,0)
 ; seq of coverage COB (123 or PST) or if not defined or null, current
"RTN","IBCEF",140,0)
 N Z,Z0,VAEL,DFN
"RTN","IBCEF",141,0)
 S Z=+$$POLICY(IBIFN,16,$G(IBCOB))
"RTN","IBCEF",142,0)
 I 'Z D
"RTN","IBCEF",143,0)
 .S Z0=$$POLICY(IBIFN,6,$G(IBCOB)),DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",144,0)
 .I Z0="v" D ELIG^VADPT I VAEL(4) S Z=1 Q  ;vet is pt
"RTN","IBCEF",145,0)
 .I Z0="s" D ELIG^VADPT I VAEL(4) S Z=2 Q  ;vet is pt, so vets spouse is pt's spouse
"RTN","IBCEF",146,0)
 .S Z=9 ; relationship of insured to pt unknown
"RTN","IBCEF",147,0)
 Q Z
"RTN","IBCEF",148,0)
 ;
"RTN","IBCEF",149,0)
EMPSTAT(IBIFN,WHOSE) ;Return employment status
"RTN","IBCEF",150,0)
 ; IBIFN = bill ien
"RTN","IBCEF",151,0)
 ; WHOSE = v for vet, s for spouse status
"RTN","IBCEF",152,0)
 N STAT,DFN,VAPD
"RTN","IBCEF",153,0)
 S STAT="",DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF",154,0)
 I WHOSE="v" D OPD^VADPT S STAT=$P(VAPD(7),U)
"RTN","IBCEF",155,0)
 I WHOSE="s" S STAT=$P($G(^DPT(DFN,.25)),U,15)
"RTN","IBCEF",156,0)
 I STAT="" S STAT=9
"RTN","IBCEF",157,0)
 Q STAT
"RTN","IBCEF",158,0)
 ;
"RTN","IBCEF",159,0)
INPAT(IBIFN,OUT) ; Determine if bill is inpatient
"RTN","IBCEF",160,0)
 ; OUT = optional - if 1, return output value based on 
"RTN","IBCEF",161,0)
 ;  inpatient/outpatient from UB-04 type of bill field
"RTN","IBCEF",162,0)
 ; Return 1 if inpatient, 0 if not inpatient or can't be determined
"RTN","IBCEF",163,0)
 N INPT,CODE,CODE0,IB0
"RTN","IBCEF",164,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF",165,0)
 S OUT=+$G(OUT),CODE=+$P(IB0,U,5)
"RTN","IBCEF",166,0)
 I 'OUT S INPT=CODE
"RTN","IBCEF",167,0)
 I OUT D
"RTN","IBCEF",168,0)
 . S CODE0=$P($G(^DGCR(399.1,+$P(IB0,U,25),0)),U,2)
"RTN","IBCEF",169,0)
 . I CODE0=8,$P(IB0,U,24)=1 S INPT=$P(IB0,U,5) Q  ; 18X
"RTN","IBCEF",170,0)
 . I CODE0=9,$P(IB0,U,24)=8 S INPT=$P(IB0,U,5) Q  ; 89X
"RTN","IBCEF",171,0)
 . I CODE0=1,$P(IB0,U,24)=8 S INPT=0 Q  ; 81X
"RTN","IBCEF",172,0)
 . I CODE0=1,$P(IB0,U,24)=7 S INPT=0 Q  ; 71X
"RTN","IBCEF",173,0)
 . I CODE0=2,$P(IB0,U,24)=7 S INPT=0 Q  ; 72X
"RTN","IBCEF",174,0)
 . S INPT=CODE0
"RTN","IBCEF",175,0)
 Q $S(INPT:INPT'>2,1:0)
"RTN","IBCEF",176,0)
 ;
"RTN","IBCEF",177,0)
INSPRF(IBIFN) ; Function to determine if bill is prof or inst
"RTN","IBCEF",178,0)
 ; Return 1 if institutional (UB-04) claim, 0 if professional (CMS-1500) claim
"RTN","IBCEF",179,0)
 N A
"RTN","IBCEF",180,0)
 S A=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF",181,0)
 I $P(A,U,27)="" S $P(A,U,27)=$S($P(A,U,19)=3:1,1:0)
"RTN","IBCEF",182,0)
 Q $S($P(A,U,27)=1:1,1:0)
"RTN","IBCEF",183,0)
 ;
"RTN","IBCEF",184,0)
F(FLD,IBXRET,IBXERR1,IBIEN) ;Execute extract for data element FLD and bill IBIEN
"RTN","IBCEF",185,0)
 ; If IBXDATA array to be returned as data value(s) of fld
"RTN","IBCEF",186,0)
 ;   D F^IBCEF("FLD NAME","IBXDATA","IBXERR") or D F^IBCEF("FLD NAME") 
"RTN","IBCEF",187,0)
 ; Variable ref-ed by IBXERR1 will contain error message if an error
"RTN","IBCEF",188,0)
 ; @IBXRET always defined on return.  It will be null if error
"RTN","IBCEF",189,0)
 I $G(IBIEN) N IBXIEN S IBXIEN=IBIEN
"RTN","IBCEF",190,0)
 I $G(IBXERR1)="" S IBXERR1="IBXERR"
"RTN","IBCEF",191,0)
 N IBXHOLD
"RTN","IBCEF",192,0)
 S IBXHOLD=""
"RTN","IBCEF",193,0)
 I $G(IBXRET)=""!($G(IBXRET)="IBXDATA") S IBXHOLD="IBXDATA",IBXRET="IBXRET"
"RTN","IBCEF",194,0)
 S @IBXERR1=""
"RTN","IBCEF",195,0)
 ;
"RTN","IBCEF",196,0)
 N FLDN,OFLD,STOP,Z,IBXERR2,IBXRETX
"RTN","IBCEF",197,0)
 ;
"RTN","IBCEF",198,0)
 I '$G(IBXIEN) S @IBXERR1="Invalid entry #" G FQ
"RTN","IBCEF",199,0)
 I '$D(^IBA(364.5,"B",FLD)) S OFLD=FLD,STOP=0 D  I FLD="" S @IBXERR1=OFLD_" Field not found!!" G FQ
"RTN","IBCEF",200,0)
 .F  S FLD=$O(^IBA(364.5,"B",FLD))  D  Q:STOP
"RTN","IBCEF",201,0)
 ..I $E(FLD,1,$L(OFLD))'=OFLD S FLD=""
"RTN","IBCEF",202,0)
 ..S STOP=1
"RTN","IBCEF",203,0)
 ;
"RTN","IBCEF",204,0)
 S Z=0
"RTN","IBCEF",205,0)
 F  S Z=$O(^IBA(364.5,"B",FLD,Z)) Q:'Z  I $P($G(^IBA(364.5,Z,0)),U,5)=399 Q
"RTN","IBCEF",206,0)
 I 'Z S @IBXERR1=FLD_" Field not found!!" G FQ
"RTN","IBCEF",207,0)
 ;
"RTN","IBCEF",208,0)
 S FLDN(1)=Z D EXTONE^IBCEFG0(IBXIEN,.FLDN,""_IBXRET_"",.IBXERR2)
"RTN","IBCEF",209,0)
 ;
"RTN","IBCEF",210,0)
 I $G(IBXERR2)'="" S @IBXERR1=IBXERR2
"RTN","IBCEF",211,0)
FQ S IBXARRY=$S(IBXHOLD="IBXDATA":"IBXDATA",1:""_IBXRET_"")
"RTN","IBCEF",212,0)
 I @IBXERR1'="" K @IBXARRY S @IBXARRY="" Q
"RTN","IBCEF",213,0)
 ;
"RTN","IBCEF",214,0)
 I IBXHOLD="IBXDATA" S IBXRET="IBXRET"
"RTN","IBCEF",215,0)
 M IBXRETX=@IBXRET K @IBXARRY M @IBXARRY=IBXRETX(1)
"RTN","IBCEF",216,0)
 S:'($D(@IBXARRY)#2) @IBXARRY=""
"RTN","IBCEF",217,0)
 Q
"RTN","IBCEF",218,0)
 ;
"RTN","IBCEF",219,0)
SERVDT(IBIFN,LENGTH,FORMAT) ; Return default service date for 
"RTN","IBCEF",220,0)
 ; outpatient/UB-04 lines or X12-837 institutional lines
"RTN","IBCEF",221,0)
 ; LENGTH = null/8 for 8 digit date, 6 for 6 digit date
"RTN","IBCEF",222,0)
 ; FORMAT = 1 = X12 format (YYYYMMDD), 2 = FM internal (NNNNNNN),
"RTN","IBCEF",223,0)
 ;          0 = external (MMDDYY or MMDDYYYY)
"RTN","IBCEF",224,0)
 N IBZ
"RTN","IBCEF",225,0)
 G:$$INPAT^IBCEF(IBIFN,1)!($$FT^IBCEF(IBIFN)'=3) SERVDTQ ;Inpatient claim or billed on a CMS-1500
"RTN","IBCEF",226,0)
 S LENGTH=$G(LENGTH),FORMAT=$G(FORMAT)
"RTN","IBCEF",227,0)
 D F("N-STATEMENT COVERS FROM DATE","IBZ",,IBIFN)
"RTN","IBCEF",228,0)
 I '$G(IBZ)!(FORMAT=2) G SERVDTQ
"RTN","IBCEF",229,0)
 ;
"RTN","IBCEF",230,0)
 I FORMAT=1 S IBZ=$$DT^IBCEFG1(IBZ,"",$S(LENGTH'=6:"D8",1:"D6")) G SERVDTQ
"RTN","IBCEF",231,0)
 S IBZ=$$DATE^IBCF2(IBZ,$S(LENGTH=6:0,1:1),1)
"RTN","IBCEF",232,0)
 ;
"RTN","IBCEF",233,0)
SERVDTQ Q $G(IBZ)
"RTN","IBCEF",234,0)
 ;
"RTN","IBCEF",235,0)
NOPUNCT(X,SPACE,EXC) ; Strip punctuation from data in X
"RTN","IBCEF",236,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF",237,0)
 ; EXC = list of punctuation not to strip
"RTN","IBCEF",238,0)
 ;
"RTN","IBCEF",239,0)
 N PUNCT,Z
"RTN","IBCEF",240,0)
 S PUNCT=".,-+(){}[]\/><:;?|=_*&%$#@!~`^'"""
"RTN","IBCEF",241,0)
 I $G(SPACE) S PUNCT=PUNCT_" "
"RTN","IBCEF",242,0)
 I $G(EXC)'="" F Z=1:1:$L(EXC) S PUNCT=$TR(PUNCT,$E(EXC,Z))
"RTN","IBCEF",243,0)
 S X=$TR(X,PUNCT)
"RTN","IBCEF",244,0)
 Q X
"RTN","IBCEF",245,0)
 ;
"RTN","IBCEF",246,0)
FT(IBIFN) ; Internal code for bill form type
"RTN","IBCEF",247,0)
 Q +$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCEF",248,0)
 ;
"RTN","IBCEF",249,0)
COBCT(IBIFN) ; # of payers on claim
"RTN","IBCEF",250,0)
 N CT,Z
"RTN","IBCEF",251,0)
 S CT=0 F Z="I1","I2","I3" Q:'$D(^DGCR(399,IBIFN,Z))  S CT=CT+1
"RTN","IBCEF",252,0)
 Q CT
"RTN","IBCEF",253,0)
 ;
"RTN","IBCEF1")
0^50^B58389025^B53245090
"RTN","IBCEF1",1,0)
IBCEF1 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF1",2,0)
 ;;2.0;INTEGRATED BILLING;**52,124,51,137,210,155,349,371**;21-MAR-94;Build 57
"RTN","IBCEF1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF1",4,0)
 ;
"RTN","IBCEF1",5,0)
OCC(IBIFN,REL,TEXT) ;Sets up an arrays of occurrence codes for various cks
"RTN","IBCEF1",6,0)
 ;RETURNS 1^additional data for entry IBXSAVE("OCC",n) if REL or TEXT
"RTN","IBCEF1",7,0)
 ;   parameters have been met or null if conditions not met
"RTN","IBCEF1",8,0)
 ;If no REL or TEXT parameters sent, just extract codes array
"RTN","IBCEF1",9,0)
 ; IBIFN = bill ien
"RTN","IBCEF1",10,0)
 ; REL = 'OCC RELATED TO' value to check for
"RTN","IBCEF1",11,0)
 ; TEXT = text to check for the .01 field of 399.1 entry pointed to
"RTN","IBCEF1",12,0)
 ;         by the occurrence code
"RTN","IBCEF1",13,0)
 N OCC,SORT,ARR,N,DATA,CODE,CT
"RTN","IBCEF1",14,0)
 I '$D(IBXSAVE("OCC")),'$D(IBXSAVE("OCCS")) D
"RTN","IBCEF1",15,0)
 .N IBI,Z,CT1,CT2,Z0 S (IBI,CT1,CT2)=0
"RTN","IBCEF1",16,0)
 .F  S IBI=$O(^DGCR(399,IBIFN,"OC",IBI)) Q:'IBI  S Z=$G(^(IBI,0)) D
"RTN","IBCEF1",17,0)
 ..S Z0=$G(^DGCR(399.1,+Z,0))
"RTN","IBCEF1",18,0)
 ..Q:'$P(Z0,U,10)&'$P(Z0,U,4)  ;Not an occurrence code
"RTN","IBCEF1",19,0)
 ..I $P(Z0,U,10) S CT2=CT2+1,IBXSAVE("OCCS",CT2)=$S($P(Z0,U,4):$P(Z0,U,2)_U_$P(Z,U,2),1:U)_U_$P(Z,U,4)_U_$P(Z0,U)_U_$P(Z0,U,9)_U_$P(Z,U,3)_U_$P(Z,U,2)
"RTN","IBCEF1",20,0)
 ..I '$P(Z0,U,10) S CT1=CT1+1,IBXSAVE("OCC",CT1)=$S($P(Z0,U,4):$P(Z0,U,2)_U_$P(Z,U,2),1:U)_U_U_$P(Z0,U)_U_$P(Z0,U,9)_U_$P(Z,U,3)_U_$P(Z,U,2)
"RTN","IBCEF1",21,0)
 I '$D(IBXSAVE("OCC"))&'$D(IBXSAVE("OCCS")) S IBXSAVE("OCC")="" G OCCQ
"RTN","IBCEF1",22,0)
 ;
"RTN","IBCEF1",23,0)
 ; esg - IB*2*349 - order the occurrence codes
"RTN","IBCEF1",24,0)
 ;       Build the SORT array sorted by the occ code
"RTN","IBCEF1",25,0)
 F ARR="OCC","OCCS" S N=0 F  S N=$O(IBXSAVE(ARR,N)) Q:'N  S DATA=$G(IBXSAVE(ARR,N)) I $P(DATA,U,1)'="" S CODE=" "_$P(DATA,U,1),SORT(ARR,CODE,N)=DATA
"RTN","IBCEF1",26,0)
 ;       Loop thru the SORT array and re-build the IBXSAVE array
"RTN","IBCEF1",27,0)
 F ARR="OCC","OCCS" K IBXSAVE(ARR) S CODE="",CT=0 F  S CODE=$O(SORT(ARR,CODE)) Q:CODE=""  S N=0 F  S N=$O(SORT(ARR,CODE,N)) Q:'N  S CT=CT+1,IBXSAVE(ARR,CT)=SORT(ARR,CODE,N)
"RTN","IBCEF1",28,0)
 ;
"RTN","IBCEF1",29,0)
 I $G(REL)'=""!($G(TEXT)'="") D OCC1("",.OCC,$G(REL),$G(TEXT)) D:'$D(OCC) OCC1("S",.OCC,$G(REL),$G(TEXT))
"RTN","IBCEF1",30,0)
OCCQ Q $G(OCC)
"RTN","IBCEF1",31,0)
 ;
"RTN","IBCEF1",32,0)
OCC1(ARR,OCC,REL,TEXT) ; Search thru local array for parameters met
"RTN","IBCEF1",33,0)
 ; ARR = null to search OCC subscript, "S" to search OCCS subscript
"RTN","IBCEF1",34,0)
 N Z
"RTN","IBCEF1",35,0)
 S ARR="OCC"_ARR,Z=0
"RTN","IBCEF1",36,0)
 F  S Z=$O(IBXSAVE(ARR,Z)) Q:'Z  D
"RTN","IBCEF1",37,0)
 .I $G(REL)'="",$P(IBXSAVE(ARR,Z),U,5)=REL S OCC="1"_$S(REL=2:U_$P(IBXSAVE(ARR,Z),U,6),1:"") Q
"RTN","IBCEF1",38,0)
 .I $G(TEXT)'="",$P(IBXSAVE(ARR,Z),U,4)=TEXT S OCC="1^"_$P(IBXSAVE(ARR,Z),U,7)
"RTN","IBCEF1",39,0)
 Q
"RTN","IBCEF1",40,0)
 ;
"RTN","IBCEF1",41,0)
RX(IBIFN) ; Format billable prescription data for refills for 837
"RTN","IBCEF1",42,0)
 N Z,IBXDATA,CT
"RTN","IBCEF1",43,0)
 I '$D(IBXSAVE("BOX24")) D B24^IBCEF3(.IBXSAVE,IBIFN,1)
"RTN","IBCEF1",44,0)
 S Z="",CT=0
"RTN","IBCEF1",45,0)
 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:Z=""  I $D(IBXSAVE("BOX24",Z,"RX")) S CT=CT+1,IBXDATA(Z)=IBXSAVE("BOX24",Z,"RX")
"RTN","IBCEF1",46,0)
RXQ Q CT
"RTN","IBCEF1",47,0)
 ;
"RTN","IBCEF1",48,0)
OTHPAY(IBIFN,SEQ) ; Return the other insurance payment amount for bill
"RTN","IBCEF1",49,0)
 ;  IBIFN and payer sequence SEQ (1-3)
"RTN","IBCEF1",50,0)
 N AMT,IBIFN1
"RTN","IBCEF1",51,0)
 S IBIFN1=$P($G(^DGCR(399,IBIFN,"M1")),U,SEQ+4)
"RTN","IBCEF1",52,0)
 I IBIFN1 D
"RTN","IBCEF1",53,0)
 . I $$MCRWNR^IBEFUNC(+$G(^DGCR(399,IBIFN,"I"_SEQ))) S AMT=$$MCRPAY^IBCEU0(IBIFN) Q
"RTN","IBCEF1",54,0)
 . S AMT=+$$TPR^PRCAFN(IBIFN1) Q:AMT  ; A/R amount
"RTN","IBCEF1",55,0)
 . S AMT=+$P($G(^DGCR(399,IBIFN,"U2")),U,SEQ+3) ; amount on bill
"RTN","IBCEF1",56,0)
 Q $G(AMT)
"RTN","IBCEF1",57,0)
 ;
"RTN","IBCEF1",58,0)
OUTPT(IBIFN,IBPRINT) ; Moved for space
"RTN","IBCEF1",59,0)
 D OUTPT^IBCEF11(IBIFN,$G(IBPRINT))
"RTN","IBCEF1",60,0)
 Q
"RTN","IBCEF1",61,0)
 ;
"RTN","IBCEF1",62,0)
OCC92 ;Reformats IBXSAVE("OCC") and IBXSAVE("OCCS") to fit blocks on UB-04
"RTN","IBCEF1",63,0)
 ; Set up IBXSAVE(32-36) arrays
"RTN","IBCEF1",64,0)
 N IBPG,IB32,IB33,IB34,IB35,IB36,IBFL,Z,Z0,PG
"RTN","IBCEF1",65,0)
 S IBPG=0
"RTN","IBCEF1",66,0)
 F Z=32:1:36 K IBFL(Z) S IBFL(Z)=0
"RTN","IBCEF1",67,0)
 M IB32=IBXSAVE("OCC"),IB36=IBXSAVE("OCCS")
"RTN","IBCEF1",68,0)
 S IB32=$O(IB32(""),-1),IB36=$O(IB36(""),-1),PG=1
"RTN","IBCEF1",69,0)
 D OCC^IBCF32
"RTN","IBCEF1",70,0)
 F Z=32:1:36 S Z0="" F  S Z0=$O(IBFL(Z,Z0)) Q:'Z0  S IBXSAVE("OC92",Z,Z0)=$P(IBFL(Z,Z0),U,1,3)
"RTN","IBCEF1",71,0)
 Q
"RTN","IBCEF1",72,0)
 ;
"RTN","IBCEF1",73,0)
BATCH() ; Moved for space IB*2*349
"RTN","IBCEF1",74,0)
 Q $$BATCH^IBCEF11()
"RTN","IBCEF1",75,0)
 ;
"RTN","IBCEF1",76,0)
PROC(T,TYPE) ; Find procedure code, strip '.' Function returns result
"RTN","IBCEF1",77,0)
 ; T = Procedure internal entry #;file reference
"RTN","IBCEF1",78,0)
 ; TYPE = "CPT" for only CPT/HCPCS valid
"RTN","IBCEF1",79,0)
 ;        "ICD" for only ICD9 valid or null for either
"RTN","IBCEF1",80,0)
 N Q,S
"RTN","IBCEF1",81,0)
 S Q="",S="^"_$P($P(T,";",2),"(")
"RTN","IBCEF1",82,0)
 I $G(TYPE)="" D
"RTN","IBCEF1",83,0)
 . I $E(S,2,3)="IC" S Q=$P($$PRCD(T),U) Q
"RTN","IBCEF1",84,0)
 . I T["DIC(81.3" S Q=$$MOD^ICPTMOD(+T,"I") S Q=$S(Q>0:$P(Q,U,4),1:"")
"RTN","IBCEF1",85,0)
 I $G(TYPE)="CPT",$E(S,2,3)="IC" S Q=$$PRCD(T) Q
"RTN","IBCEF1",86,0)
 I $G(TYPE)="ICD",T["ICD0" S Q=$P($$ICD0^IBACSV(+T),U)
"RTN","IBCEF1",87,0)
 Q $TR(Q,".")
"RTN","IBCEF1",88,0)
 ;
"RTN","IBCEF1",89,0)
FACILITY(IBIFN) ;return the Facility (Institution pointer-#4) for a bill
"RTN","IBCEF1",90,0)
 ; the institution of the Bill Division (399,.22) if defined, otherwise the Facility Name (350.9,.02)
"RTN","IBCEF1",91,0)
 ;
"RTN","IBCEF1",92,0)
 N IB0,IBIN S IBIN=0
"RTN","IBCEF1",93,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)) I +$P(IB0,U,22) S IBIN=$$SITE^VASITE(+$P(IB0,U,3),+$P(IB0,U,22))
"RTN","IBCEF1",94,0)
 I IBIN'>0 S IBIN=+$P($G(^IBE(350.9,1,0)),U,2)
"RTN","IBCEF1",95,0)
 Q +IBIN
"RTN","IBCEF1",96,0)
 ;
"RTN","IBCEF1",97,0)
ISRX(IBIFN) ; Function to determine if bill is a prescription refill bill
"RTN","IBCEF1",98,0)
 ; Returns 0 if no Rx on bill or 1 if there is.
"RTN","IBCEF1",99,0)
 ;
"RTN","IBCEF1",100,0)
 N IBRX
"RTN","IBCEF1",101,0)
 I $D(^IBA(362.4,"AIFN"_IBIFN)) S IBRX=1
"RTN","IBCEF1",102,0)
 Q +$G(IBRX)
"RTN","IBCEF1",103,0)
 ;
"RTN","IBCEF1",104,0)
ISPROS(IBIFN) ; Function to determine if bill is a prosthetics bill
"RTN","IBCEF1",105,0)
 ; Returns 0 if no Prosthetics on bill or 1 if there is.
"RTN","IBCEF1",106,0)
 ;
"RTN","IBCEF1",107,0)
 N IBPROS
"RTN","IBCEF1",108,0)
 I $D(^IBA(362.5,"AIFN"_IBIFN)) S IBPROS=1
"RTN","IBCEF1",109,0)
 Q +$G(IBPROS)
"RTN","IBCEF1",110,0)
 ;
"RTN","IBCEF1",111,0)
FINDINS(IBIFN,IBSEQ) ; Returns the internal entry number of the insurance
"RTN","IBCEF1",112,0)
 ;  company for bill ien IBIFN for payer sequence IBSEQ (or current if
"RTN","IBCEF1",113,0)
 ;  IBSEQ is null)
"RTN","IBCEF1",114,0)
 Q $P($G(^DGCR(399,IBIFN,"I"_$$COBN^IBCEF(IBIFN,$G(IBSEQ)))),U)
"RTN","IBCEF1",115,0)
 ;
"RTN","IBCEF1",116,0)
TOB(IBIFN) ; Returns UB-04 type of bill from data in the output formatter
"RTN","IBCEF1",117,0)
 N IBTOB,IBZ1,IBZ2,IBZ3
"RTN","IBCEF1",118,0)
 D F^IBCEF("N-UB-04 LOCATION OF CARE","IBZ1",,IBIFN)
"RTN","IBCEF1",119,0)
 D F^IBCEF("N-UB-04 BILL CLASSIFICATION","IBZ2",,IBIFN)
"RTN","IBCEF1",120,0)
 D F^IBCEF("N-UB-04 TIMEFRAME OF BILL","IBZ3",,IBIFN)
"RTN","IBCEF1",121,0)
 S IBTOB=IBZ1_IBZ2_IBZ3
"RTN","IBCEF1",122,0)
 Q IBTOB
"RTN","IBCEF1",123,0)
 ;
"RTN","IBCEF1",124,0)
PRCD(PRIEN,ALL,EDT) ; Function returns the code that corresponds to the variable
"RTN","IBCEF1",125,0)
 ; pointer data in PRIEN (ien;file)
"RTN","IBCEF1",126,0)
 ; ALL = if ALL=1, returns the entire $$CPT^ICPTCOD for CPT or
"RTN","IBCEF1",127,0)
 ;       ^code^name format for ICD result
"RTN","IBCEF1",128,0)
 ;       or null if lookup fails
"RTN","IBCEF1",129,0)
 ; EDT = Effective date to check (not used if +$G(ALL)=0)
"RTN","IBCEF1",130,0)
 N CODE,IBX
"RTN","IBCEF1",131,0)
 S CODE=""
"RTN","IBCEF1",132,0)
 ;Modified for Code Set Versioning
"RTN","IBCEF1",133,0)
 I PRIEN["ICPT" S IBX=$$CPT^ICPTCOD(+PRIEN,$G(EDT)) G:IBX'>0 PRCDQ S CODE=$S($G(ALL):IBX,1:$P(IBX,U,2))
"RTN","IBCEF1",134,0)
 I PRIEN["ICD0" S IBX=$$ICD0^IBACSV(+PRIEN,$G(EDT)) G:IBX="" PRCDQ S CODE=$S($G(ALL):U_$P(IBX,U)_U_$P(IBX,U,4),1:$P(IBX,U))
"RTN","IBCEF1",135,0)
PRCDQ Q CODE
"RTN","IBCEF1",136,0)
 ;
"RTN","IBCEF1",137,0)
NFT(FT,IBIFN) ; Returns 1 if bill IBIFN is not of form type FT (internal)
"RTN","IBCEF1",138,0)
 ; so the data element should not be required
"RTN","IBCEF1",139,0)
 S FT=$S($$FT^IBCEF(IBIFN)=FT:0,1:1)
"RTN","IBCEF1",140,0)
 Q FT
"RTN","IBCEF1",141,0)
 ;
"RTN","IBCEF1",142,0)
REQ(FT,INP,IBIFN) ; Determine if bill IBIFN is of form type FT and
"RTN","IBCEF1",143,0)
 ; Inpatient (I) or Outpatient (O) status INP [or either if (null)] 
"RTN","IBCEF1",144,0)
 ;
"RTN","IBCEF1",145,0)
 ;Returns 1 if both conditions FT and INP match for the bill
"RTN","IBCEF1",146,0)
 ; or 0 if either of these conditions are not true
"RTN","IBCEF1",147,0)
 ; I $$REQ^IBCEF1(2,"I",1) would mean if bill entry #1 is
"RTN","IBCEF1",148,0)
 ;                         CMS-1500/inpatient the data would be required
"RTN","IBCEF1",149,0)
 ; I '$$REQ^IBCEF1(2,"I",1) would mean if bill entry #1 is anything but
"RTN","IBCEF1",150,0)
 ;                          CMS-1500/inpatient, the data would not be
"RTN","IBCEF1",151,0)
 ;                          required
"RTN","IBCEF1",152,0)
 N Z
"RTN","IBCEF1",153,0)
 S Z=1
"RTN","IBCEF1",154,0)
 S:$$NFT(FT,IBIFN) Z=0 ; Not the form type for requirement
"RTN","IBCEF1",155,0)
 I Z,$G(INP)'="" D
"RTN","IBCEF1",156,0)
 . S Z0=$$INPAT^IBCEF(IBIFN,1),INP=$G(INP)
"RTN","IBCEF1",157,0)
 . S Z=$S(Z0:INP="I",1:INP="O") ;Check if I/O matches required state
"RTN","IBCEF1",158,0)
 Q Z
"RTN","IBCEF1",159,0)
 ;
"RTN","IBCEF1",160,0)
SET1(IBIFN,A,IBZ,IBXDATA,IBXNOREQ) ; Utility to set variables for output
"RTN","IBCEF1",161,0)
 ; formatter for professional EDI 
"RTN","IBCEF1",162,0)
 ; Returns values of A, IBXDATA, IBZ, IBXNOREQ
"RTN","IBCEF1",163,0)
 N Z,CT
"RTN","IBCEF1",164,0)
 S A="^TMP($J,""IBLCT"")"
"RTN","IBCEF1",165,0)
 S (Z,CT)=0
"RTN","IBCEF1",166,0)
 F  S Z=$O(IBXDATA(Z)) Q:'Z  D  ; Don't transmit 0-charges
"RTN","IBCEF1",167,0)
 . I $P(IBXDATA(Z),U,9),$P(IBXDATA(Z),U,8) S CT=CT+1 M IBZ(CT)=IBXDATA(Z)
"RTN","IBCEF1",168,0)
 K IBXDATA
"RTN","IBCEF1",169,0)
 S IBXNOREQ='$$REQ(2,"O",IBIFN)
"RTN","IBCEF1",170,0)
 Q
"RTN","IBCEF1",171,0)
 ;
"RTN","IBCEF1",172,0)
CIADDR(IBXDATA,IBXSAVE,LINE,FORM) ; Format current ins co address line LINE for FORM
"RTN","IBCEF1",173,0)
 ; FORM = 1 for CMS-1500, 2 for UB-04
"RTN","IBCEF1",174,0)
 ; Called from output formatter - both IBXDATA, IBXSAVE parameters are
"RTN","IBCEF1",175,0)
 ;  passed by reference
"RTN","IBCEF1",176,0)
 ;
"RTN","IBCEF1",177,0)
 K IBXDATA
"RTN","IBCEF1",178,0)
 I $G(FORM)'=1 D
"RTN","IBCEF1",179,0)
 . ;
"RTN","IBCEF1",180,0)
 . ; esg - 11/17/06 - IB*2*349 - UB-04 FL-38 contains the payer name
"RTN","IBCEF1",181,0)
 . ;       and address on 4 lines within this 5 line box.  All 5 lines
"RTN","IBCEF1",182,0)
 . ;       are formatted here into the IBXDATA array.  This is the
"RTN","IBCEF1",183,0)
 . ;       address that shows through the envelope window.
"RTN","IBCEF1",184,0)
 . ;
"RTN","IBCEF1",185,0)
 . ; esg - 9/13/07 - IB*2*371 - Line 1 of this box contains the print
"RTN","IBCEF1",186,0)
 . ;       status (i.e. copy, 2nd notice, 3rd notice, MRA needed).
"RTN","IBCEF1",187,0)
 . ;
"RTN","IBCEF1",188,0)
 . N Z,Z1,LM,Q,ADDR,X,IBPSTAT
"RTN","IBCEF1",189,0)
 . S LM=$P($G(^IBE(350.9,1,1)),U,31)   ; UB address column parameter
"RTN","IBCEF1",190,0)
 . S Z=""
"RTN","IBCEF1",191,0)
 . I LM S $P(Z," ",LM)=""              ; beginning spaces indent
"RTN","IBCEF1",192,0)
 . S ADDR=$G(IBXSAVE("CADR"))          ; address data string
"RTN","IBCEF1",193,0)
 . ;
"RTN","IBCEF1",194,0)
 . D F^IBCEF("N-PRINT BILL SUBMIT STATUS","IBPSTAT",,+$G(IBXIEN))
"RTN","IBCEF1",195,0)
 . S Z1=Z I Z1="" S Z1=" "     ; line 1 can't start in column 1
"RTN","IBCEF1",196,0)
 . S IBXDATA(1)=Z1_$G(IBPSTAT),Q=1             ; line 1 print status
"RTN","IBCEF1",197,0)
 . S Q=Q+1
"RTN","IBCEF1",198,0)
 . S IBXDATA(Q)=Z_$G(IBXSAVE("CADR_NAME"))     ; line 2 payer name
"RTN","IBCEF1",199,0)
 . S X=$P(ADDR,U,1)
"RTN","IBCEF1",200,0)
 . I X'="" S Q=Q+1,IBXDATA(Q)=Z_X              ; address line 1
"RTN","IBCEF1",201,0)
 . S X=$P(ADDR,U,2)
"RTN","IBCEF1",202,0)
 . I X'="" S Q=Q+1,IBXDATA(Q)=Z_X D            ; address line 2
"RTN","IBCEF1",203,0)
 .. S X=$P(ADDR,U,3)
"RTN","IBCEF1",204,0)
 .. I X'="" S IBXDATA(Q)=IBXDATA(Q)_" "_X      ; address line 3
"RTN","IBCEF1",205,0)
 .. Q
"RTN","IBCEF1",206,0)
 . S Q=Q+1                                     ; city,st,zip on last line
"RTN","IBCEF1",207,0)
 . S IBXDATA(Q)=Z_$P(ADDR,U,4)_", "_$$STATE^IBCEFG1($P(ADDR,U,5))_" "_$P(ADDR,U,6)
"RTN","IBCEF1",208,0)
 . KILL IBXSAVE("CADR_NAME"),IBXSAVE("CADR")   ; cleanup
"RTN","IBCEF1",209,0)
 . Q
"RTN","IBCEF1",210,0)
 ;
"RTN","IBCEF1",211,0)
 I $G(FORM)=1 D           ; CMS-1500
"RTN","IBCEF1",212,0)
 . N CT,X,Z
"RTN","IBCEF1",213,0)
 . S:'$D(IBXSAVE("INDENT")) Z="",$P(Z," ",+$P($G(^IBE(350.9,1,1)),U,27)+1)="",IBXSAVE("INDENT")=Z
"RTN","IBCEF1",214,0)
 . S CT=0
"RTN","IBCEF1",215,0)
 . S X=$P(IBXSAVE("CADR"),U) S:X'="" CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_X
"RTN","IBCEF1",216,0)
 . S X=$S($P(IBXSAVE("CADR"),U,2)'="":$P(IBXSAVE("CADR"),U,2),1:"")_$S($P(IBXSAVE("CADR"),U,2)'="":" ",1:"")_$P(IBXSAVE("CADR"),U,3) S:X'="" CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_X
"RTN","IBCEF1",217,0)
 . S CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_$P(IBXSAVE("CADR"),U,4)_", "_$$STATE^IBCEFG1($P(IBXSAVE("CADR"),U,5))_" "_$P(IBXSAVE("CADR"),U,6)
"RTN","IBCEF1",218,0)
 . Q
"RTN","IBCEF1",219,0)
 ;
"RTN","IBCEF1",220,0)
 Q
"RTN","IBCEF1",221,0)
 ;
"RTN","IBCEF11")
0^37^B51577775^B48127699
"RTN","IBCEF11",1,0)
IBCEF11 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371**;21-MAR-94;Build 57
"RTN","IBCEF11",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF11",4,0)
 ;
"RTN","IBCEF11",5,0)
BOX24D(A,IB) ; Returns the lines for boxes 19-24 of the CMS-1500 display
"RTN","IBCEF11",6,0)
 ; IB = flag is 1 if only box 24 is needed
"RTN","IBCEF11",7,0)
 Q $S('$G(IB):"36",1:"44")_"^55"
"RTN","IBCEF11",8,0)
 ;
"RTN","IBCEF11",9,0)
RCBOX() ; Returns the lines for revenue code boxes of the UB-04 display
"RTN","IBCEF11",10,0)
 Q "19^41"
"RTN","IBCEF11",11,0)
 ;
"RTN","IBCEF11",12,0)
OUTPT(IBIFN,IBPRINT) ; Returns an array of service line data from
"RTN","IBCEF11",13,0)
 ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
"RTN","IBCEF11",14,0)
 ; IBPRINT = print flag  1: return print fields
"RTN","IBCEF11",15,0)
 ;                       0: return EDI fields
"RTN","IBCEF11",16,0)
 ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
"RTN","IBCEF11",17,0)
 ;   if it already exists. If not, it builds it from N-DIAGNOSES element
"RTN","IBCEF11",18,0)
 ;
"RTN","IBCEF11",19,0)
 ; For EDI call: Returns IBXDATA(n)=
"RTN","IBCEF11",20,0)
 ;   begin date(YYYYMMDD)^end date(YYYYMMDD)^pos^tos^
"RTN","IBCEF11",21,0)
 ;   proc code/revenue code - if no procedure (not the pointers)^
"RTN","IBCEF11",22,0)
 ;   type of code^dx pointer(s)^unit charge^units^modifiers separated by;
"RTN","IBCEF11",23,0)
 ;   ^purchased charge amount ^anesthesia minutes^emergency indicator^
"RTN","IBCEF11",24,0)
 ;   lab-type service flag.
"RTN","IBCEF11",25,0)
 ;
"RTN","IBCEF11",26,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF11",27,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF11",28,0)
 ;      line in the first '^' piece followed by the '0' node data of file
"RTN","IBCEF11",29,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF11",30,0)
 ;       COB = COB sequence # of adjustment's ins co, m = seq #
"RTN","IBCEF11",31,0)
 ;         -- AND --
"RTN","IBCEF11",32,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF11",33,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEF11",34,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEF11",35,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF11",36,0)
 ;
"RTN","IBCEF11",37,0)
 ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
"RTN","IBCEF11",38,0)
 ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
"RTN","IBCEF11",39,0)
 ;   or procedure code(not the pointer)^ ... refer to EDI call results
"RTN","IBCEF11",40,0)
 ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
"RTN","IBCEF11",41,0)
 ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
"RTN","IBCEF11",42,0)
 ;
"RTN","IBCEF11",43,0)
 ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
"RTN","IBCEF11",44,0)
 ;      -- AND --
"RTN","IBCEF11",45,0)
 ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
"RTN","IBCEF11",46,0)
 ;                   ^chrge^ien of file 362.4^NDC format
"RTN","IBCEF11",47,0)
 ;           If line references a prescription
"RTN","IBCEF11",48,0)
 ;      -- AND --
"RTN","IBCEF11",49,0)
 ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
"RTN","IBCEF11",50,0)
 ;      -- AND --
"RTN","IBCEF11",51,0)
 ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
"RTN","IBCEF11",52,0)
 ;
"RTN","IBCEF11",53,0)
 N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
"RTN","IBCEF11",54,0)
 ;
"RTN","IBCEF11",55,0)
 K ^TMP($J,"IBITEM")
"RTN","IBCEF11",56,0)
 S ^TMP($J,"IBITEM")=""
"RTN","IBCEF11",57,0)
 ; Build diagnosis array if not already built
"RTN","IBCEF11",58,0)
 I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
"RTN","IBCEF11",59,0)
 .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCEF11",60,0)
 .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,$P(IBXDATA(Z),U,2))=Z
"RTN","IBCEF11",61,0)
 ;
"RTN","IBCEF11",62,0)
 S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
"RTN","IBCEF11",63,0)
 S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
"RTN","IBCEF11",64,0)
 I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
"RTN","IBCEF11",65,0)
 I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
"RTN","IBCEF11",66,0)
 ; Returns IBFLD(24) = begin date^end date^pos^tos^
"RTN","IBCEF11",67,0)
 ;     proc/bedsection/revenue code^dx pointer^unit charge^
"RTN","IBCEF11",68,0)
 ;     units^modifiers^ purchased charge amount ^anesthesia minutes^
"RTN","IBCEF11",69,0)
 ;     emergency indicator ^ AND
"RTN","IBCEF11",70,0)
 ;         IBFLD(24,n,type,item)=""
"RTN","IBCEF11",71,0)
 ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
"RTN","IBCEF11",72,0)
 ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
"RTN","IBCEF11",73,0)
 ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
"RTN","IBCEF11",74,0)
 ;                            (can be null)
"RTN","IBCEF11",75,0)
 ;
"RTN","IBCEF11",76,0)
 D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
"RTN","IBCEF11",77,0)
 ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
"RTN","IBCEF11",78,0)
 I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
"RTN","IBCEF11",79,0)
 . N IBRXH
"RTN","IBCEF11",80,0)
 . S IBRXH=IBRX(IBRX,IBRX0)
"RTN","IBCEF11",81,0)
 . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U,6)_U_+IBRXH_U_$P(IBRXH,U,8)
"RTN","IBCEF11",82,0)
 K IBRX
"RTN","IBCEF11",83,0)
 ;
"RTN","IBCEF11",84,0)
 ; for EDI, remove any $0 line items from the IBFLD array before 
"RTN","IBCEF11",85,0)
 ; dropping down into the next loop (IB*2*371)
"RTN","IBCEF11",86,0)
 I '$G(IBPRINT) D
"RTN","IBCEF11",87,0)
 . NEW IBZ,IBI,Z
"RTN","IBCEF11",88,0)
 . M IBZ=IBFLD K IBFLD
"RTN","IBCEF11",89,0)
 . S (IBI,Z)=0
"RTN","IBCEF11",90,0)
 . F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",91,0)
 .. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
"RTN","IBCEF11",92,0)
 .. S Z=Z+1
"RTN","IBCEF11",93,0)
 .. M IBFLD(24,Z)=IBZ(24,IBI)
"RTN","IBCEF11",94,0)
 .. S IBFLD(24)=Z
"RTN","IBCEF11",95,0)
 .. Q
"RTN","IBCEF11",96,0)
 . Q
"RTN","IBCEF11",97,0)
 ;
"RTN","IBCEF11",98,0)
 S IBI=0
"RTN","IBCEF11",99,0)
 F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",100,0)
 . S IBRX1=0
"RTN","IBCEF11",101,0)
 . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
"RTN","IBCEF11",102,0)
 . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
"RTN","IBCEF11",103,0)
 . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
"RTN","IBCEF11",104,0)
 . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
"RTN","IBCEF11",105,0)
 . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
"RTN","IBCEF11",106,0)
 . ;
"RTN","IBCEF11",107,0)
 . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
"RTN","IBCEF11",108,0)
 .. S IBRX1=1
"RTN","IBCEF11",109,0)
 .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text allowed for rx's
"RTN","IBCEF11",110,0)
 .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
"RTN","IBCEF11",111,0)
 ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
"RTN","IBCEF11",112,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2),.01)),1,30)
"RTN","IBCEF11",113,0)
 ... K IBRX1(+IBFLD(24,IBI,"RX"))
"RTN","IBCEF11",114,0)
 ... ; No soft link - must find the first Rx with the same charge
"RTN","IBCEF11",115,0)
 .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
"RTN","IBCEF11",116,0)
 ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",117,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX) Q
"RTN","IBCEF11",118,0)
 ... Q
"RTN","IBCEF11",119,0)
 .. Q
"RTN","IBCEF11",120,0)
 . ;
"RTN","IBCEF11",121,0)
 . I $G(IBFLD(24,IBI,"AUX"))'="" D
"RTN","IBCEF11",122,0)
 .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8),$P(IBFLD(24,IBI,"AUX"),U,8)=""
"RTN","IBCEF11",123,0)
 .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
"RTN","IBCEF11",124,0)
 .. Q
"RTN","IBCEF11",125,0)
 . ;
"RTN","IBCEF11",126,0)
 . I $G(IBPRINT) D
"RTN","IBCEF11",127,0)
 .. I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",128,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",129,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
"RTN","IBCEF11",130,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",131,0)
 ... Q
"RTN","IBCEF11",132,0)
 .. ;
"RTN","IBCEF11",133,0)
 .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
"RTN","IBCEF11",134,0)
 ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
"RTN","IBCEF11",135,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",136,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
"RTN","IBCEF11",137,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",138,0)
 ... Q
"RTN","IBCEF11",139,0)
 .. ;
"RTN","IBCEF11",140,0)
 .. S IBRX=$G(IBXDATA(IBI,"RX"))
"RTN","IBCEF11",141,0)
 .. I IBRX'="" D  ;Format Rx detail
"RTN","IBCEF11",142,0)
 ... N Z
"RTN","IBCEF11",143,0)
 ... S Z=$P(IBRX,U)
"RTN","IBCEF11",144,0)
 ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
"RTN","IBCEF11",145,0)
 ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: "_$P(IBRX,U,7)
"RTN","IBCEF11",146,0)
 ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
"RTN","IBCEF11",147,0)
 ... Q
"RTN","IBCEF11",148,0)
 .. Q
"RTN","IBCEF11",149,0)
 . ;
"RTN","IBCEF11",150,0)
 . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
"RTN","IBCEF11",151,0)
 . Q
"RTN","IBCEF11",152,0)
 ;
"RTN","IBCEF11",153,0)
 I $G(IBPRINT) D
"RTN","IBCEF11",154,0)
 . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
"RTN","IBCEF11",155,0)
 .. S IBI=+$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",156,0)
 .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
"RTN","IBCEF11",157,0)
 .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBRX),U,3)
"RTN","IBCEF11",158,0)
 .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",159,0)
 .. S IBXDATA(IBI,"ARX")=""
"RTN","IBCEF11",160,0)
 .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",161,0)
 .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX)
"RTN","IBCEF11",162,0)
 .. Q
"RTN","IBCEF11",163,0)
 . Q
"RTN","IBCEF11",164,0)
 ;
"RTN","IBCEF11",165,0)
 I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
"RTN","IBCEF11",166,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCEF11",167,0)
 Q
"RTN","IBCEF11",168,0)
 ;
"RTN","IBCEF11",169,0)
ISLAB(LDATA) ; Returns 0/1 if line item data indicates the item is a lab (1)
"RTN","IBCEF11",170,0)
 ; 'LAB' is defined here as type of service = 5
"RTN","IBCEF11",171,0)
 Q $E($P(LDATA,U,4))="5"
"RTN","IBCEF11",172,0)
 ;
"RTN","IBCEF11",173,0)
FMT(DATA,DLEN,FLEN) ; Returns a string in DATA with a max length of DLEN
"RTN","IBCEF11",174,0)
 ;  and a field length of FLEN
"RTN","IBCEF11",175,0)
 Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
"RTN","IBCEF11",176,0)
 ;
"RTN","IBCEF11",177,0)
DATE(X,DEL) ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
"RTN","IBCEF11",178,0)
 S DEL=$G(DEL)
"RTN","IBCEF11",179,0)
 S X=$$DATE^IBCF2(X,1,1)
"RTN","IBCEF11",180,0)
 I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
"RTN","IBCEF11",181,0)
 Q X
"RTN","IBCEF11",182,0)
 ;
"RTN","IBCEF11",183,0)
BATCH() ; Sets up record for and stores/returns the next batch number
"RTN","IBCEF11",184,0)
 N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
"RTN","IBCEF11",185,0)
 ;Keep latest batch number for view/print edi bill extract data option
"RTN","IBCEF11",186,0)
 I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
"RTN","IBCEF11",187,0)
 ;Check for batch resubmit - if yes, use same number as original batch
"RTN","IBCEF11",188,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
"RTN","IBCEF11",189,0)
 L +^IBA(364.1,0):5 I '$T Q 0
"RTN","IBCEF11",190,0)
 S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",191,0)
 I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
"RTN","IBCEF11",192,0)
 . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
"RTN","IBCEF11",193,0)
 . S NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",194,0)
 F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
"RTN","IBCEF11",195,0)
 K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
"RTN","IBCEF11",196,0)
 L -^IBA(364.1,0)
"RTN","IBCEF11",197,0)
BATCHQ Q NUM
"RTN","IBCEF11",198,0)
 ;
"RTN","IBCEF21")
0^6^B23659732^B11282906
"RTN","IBCEF21",1,0)
IBCEF21 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS CONTINUED ;06-FEB-96
"RTN","IBCEF21",2,0)
 ;;2.0;INTEGRATED BILLING;**51,296,371**;21-MAR-94;Build 57
"RTN","IBCEF21",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF21",4,0)
 ;
"RTN","IBCEF21",5,0)
COID(IBIFN) ; Claim office ID
"RTN","IBCEF21",6,0)
 N IBCOID,IBCOID1,IBIN
"RTN","IBCEF21",7,0)
 S IBIN=$$CURR^IBCEF2(IBIFN),IBCOID1="",IBCOID=$P($$ADDRESS^IBCNSC0(IBIN,.11,5),U,11)
"RTN","IBCEF21",8,0)
 ;
"RTN","IBCEF21",9,0)
 I IBIN D
"RTN","IBCEF21",10,0)
 . I $D(^IBA(364.2,"C",IBIFN)) S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.18,5),U,11) Q  ;Rx
"RTN","IBCEF21",11,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.12,5),U,11) Q  ;Inpt
"RTN","IBCEF21",12,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)'<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.16,5),U,11) Q  ;Outpt
"RTN","IBCEF21",13,0)
 ;
"RTN","IBCEF21",14,0)
 Q $S(IBCOID1'="":IBCOID1,1:IBCOID)
"RTN","IBCEF21",15,0)
 ;
"RTN","IBCEF21",16,0)
ESGHPST(IBIFN,COB) ; return insureds employment status if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",17,0)
 ; ESGHP FLAG (2.312,2.1) ^ the employment status (2.312,2.11)
"RTN","IBCEF21",18,0)
 ;
"RTN","IBCEF21",19,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",20,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",21,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,11)
"RTN","IBCEF21",22,0)
 Q Y
"RTN","IBCEF21",23,0)
 ;
"RTN","IBCEF21",24,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",25,0)
 ; ESGHP FLAG (2.312,2.1) ^ employer name (2.312,2.015) ^ employer city (2.312,2.05) 
"RTN","IBCEF21",26,0)
 ;                        ^ employer state abbr (2.312,2.06) ^ employer state ifn  (2.312,2.06)
"RTN","IBCEF21",27,0)
 ;
"RTN","IBCEF21",28,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",29,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",30,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,9)_U_$P(X,U,5)_U_$P($G(^DIC(5,+$P(X,U,6),0)),U,2)_U_$P(X,U,6)
"RTN","IBCEF21",31,0)
 Q Y
"RTN","IBCEF21",32,0)
 ;
"RTN","IBCEF21",33,0)
REMARKS(IBIFN) ; Compile array of bill remarks
"RTN","IBCEF21",34,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",35,0)
 N Z,Z0,Z1,IBARRAY,IBSM
"RTN","IBCEF21",36,0)
 S Z=0
"RTN","IBCEF21",37,0)
 ;S:$P($G(^DGCR(399,IBIFN,"U1")),U,2) Z=Z+1,Z0=$P(^("U1"),U,2),IBXDATA(Z)="OFFSET AMOUNT: "_"$"_+$P(Z0,".")_"."_$E($P(Z0,".",2)_"00",1,2)
"RTN","IBCEF21",38,0)
 S:$P($G(^DGCR(399,IBIFN,"U1")),U,8)'="" Z=Z+1,IBXDATA(Z)=$P(^("U1"),U,8) ;Bill comment on bill
"RTN","IBCEF21",39,0)
 S Z0=$G(^DGCR(399,IBIFN,0)),Z1=$G(^DGCR(399.3,+$P(Z0,U,7),0))
"RTN","IBCEF21",40,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF21",41,0)
 I $P($G(IBARRAY),U,2) D  ;Prosthetics
"RTN","IBCEF21",42,0)
 . S Z0=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1,IBXDATA(Z)="Prosthetic: "_$E($P($$PIN^IBCSC5B(Z1),U,2),1,39)_" "_$E(Z0,4,5)_"/"_$E(Z0,6,7)_"/"_$E(Z0,1,2)
"RTN","IBCEF21",43,0)
 Q
"RTN","IBCEF21",44,0)
 ;
"RTN","IBCEF21",45,0)
CREM(IBIFN) ; Compile array of bill remarks common to every bill
"RTN","IBCEF21",46,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",47,0)
 N Z
"RTN","IBCEF21",48,0)
 S Z=0
"RTN","IBCEF21",49,0)
 S:$P($G(^IBE(350.9,1,1)),U,4)'="" Z=Z+1,IBXDATA(Z)=$P(^(1),U,4) ;Site specific 'every bill' comment
"RTN","IBCEF21",50,0)
 Q
"RTN","IBCEF21",51,0)
 ;
"RTN","IBCEF21",52,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF21",53,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",54,0)
 ; NOOUTCK = flag that will:
"RTN","IBCEF21",55,0)
 ;          (1) no check for inpt episode overlap for outpt
"RTN","IBCEF21",56,0)
 ;          (0 or null) performs check for inpt episode overlap for outpt
"RTN","IBCEF21",57,0)
 ;                                      
"RTN","IBCEF21",58,0)
 ; Returns IBXDATA = fileman date format
"RTN","IBCEF21",59,0)
 N Z,Z0,Z1
"RTN","IBCEF21",60,0)
 S Z=$G(^DGCR(399,IBIFN,0)),Z1=$P($G(^("U")),U,20),Z0=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF21",61,0)
 S IBXDATA=$S(Z0&$P(Z,U,8):$P($G(^DGPT(+$P(Z,U,8),0)),U,2),1:"")
"RTN","IBCEF21",62,0)
 S:'IBXDATA IBXDATA=$P(Z,U,3)_$S(Z0&(Z1<25):"."_$E("0",$L(Z1))_Z1,1:"")
"RTN","IBCEF21",63,0)
 ; Check to see if outpt episode (date in event date) overlaps inpt
"RTN","IBCEF21",64,0)
 ;  episode - use admit date if it does
"RTN","IBCEF21",65,0)
 I 'Z0,IBXDATA,'$G(NOOUTCK) D
"RTN","IBCEF21",66,0)
 . N VAINDT,VAIN,DFN
"RTN","IBCEF21",67,0)
 . S VAINDT=IBXDATA,DFN=$P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBCEF21",68,0)
 . D INP^VADPT S IBXDATA=+VAIN(7) S:'IBXDATA IBXDATA=""
"RTN","IBCEF21",69,0)
 I 'IBXDATA,'Z0 S IBXDATA=$$SERVDT^IBCEF(IBIFN,,2)
"RTN","IBCEF21",70,0)
 Q
"RTN","IBCEF21",71,0)
 ;
"RTN","IBCEF21",72,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF21",73,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",74,0)
 N Z,Z0
"RTN","IBCEF21",75,0)
 S Z=$$INPAT^IBCEF(IBIFN,1),Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF21",76,0)
 I Z S IBXDATA=+$G(^DGPT(+$P(Z0,U,8),70)) S:'IBXDATA IBXDATA=$P(Z0,U,16)
"RTN","IBCEF21",77,0)
 I 'Z N VAINDT,VAIN,DFN S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2) D INP^VADPT I VAIN(1) S IBXDATA=+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF21",78,0)
 Q
"RTN","IBCEF21",79,0)
 ;
"RTN","IBCEF21",80,0)
INSSECID(IBIFN,TYPE,SEQ) ; Extract subscriber and patient prim/sec ID's
"RTN","IBCEF21",81,0)
 ; IBIFN required
"RTN","IBCEF21",82,0)
 ; TYPE is either "PAT" or "SUB" to indicate we need to extract either
"RTN","IBCEF21",83,0)
 ;          patient or subscriber ID information.  Default="SUB".
"RTN","IBCEF21",84,0)
 ; SEQ is the insurance sequence# (1,2,3).  Default is current ins seq#.
"RTN","IBCEF21",85,0)
 ;
"RTN","IBCEF21",86,0)
 ; Output:
"RTN","IBCEF21",87,0)
 ; Function returns an 8-piece string as follows.
"RTN","IBCEF21",88,0)
 ;   [1] primary qualifier
"RTN","IBCEF21",89,0)
 ;   [2] primary ID
"RTN","IBCEF21",90,0)
 ;   [3] secondary qual(1)
"RTN","IBCEF21",91,0)
 ;   [4] secondary ID(1)
"RTN","IBCEF21",92,0)
 ;   [5] secondary qual(2)
"RTN","IBCEF21",93,0)
 ;   [6] secondary ID(2)
"RTN","IBCEF21",94,0)
 ;   [7] secondary qual(3)
"RTN","IBCEF21",95,0)
 ;   [8] secondary ID(3)
"RTN","IBCEF21",96,0)
 ;
"RTN","IBCEF21",97,0)
 NEW DATA,DFN,POL,IB0,IB5,REL
"RTN","IBCEF21",98,0)
 S DATA=""
"RTN","IBCEF21",99,0)
 S IBIFN=+$G(IBIFN) I 'IBIFN G INSSX
"RTN","IBCEF21",100,0)
 I $G(TYPE)="" S TYPE="SUB"               ; default type of ID's to get
"RTN","IBCEF21",101,0)
 I '$F(".PAT.SUB.","."_TYPE_".") G INSSX
"RTN","IBCEF21",102,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)     ; default current ins seq#
"RTN","IBCEF21",103,0)
 I '$F(".1.2.3.","."_SEQ_".") G INSSX
"RTN","IBCEF21",104,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2) I 'DFN G INSSX
"RTN","IBCEF21",105,0)
 S POL=+$P($G(^DGCR(399,IBIFN,"M")),U,SEQ+11) I 'POL G INSSX
"RTN","IBCEF21",106,0)
 S IB0=$G(^DPT(DFN,.312,POL,0)) I IB0="" G INSSX
"RTN","IBCEF21",107,0)
 S IB5=$G(^DPT(DFN,.312,POL,5))
"RTN","IBCEF21",108,0)
 S REL=+$P(IB0,U,16)                      ; pat rel to insured
"RTN","IBCEF21",109,0)
 S $P(DATA,U,1)="MI"
"RTN","IBCEF21",110,0)
 S $P(DATA,U,2)=$P(IB0,U,2)               ; subscriber primary ID
"RTN","IBCEF21",111,0)
 S $P(DATA,U,3,8)=$P(IB5,U,2,7)           ; subscriber secondary data
"RTN","IBCEF21",112,0)
 I TYPE="PAT",REL'=1 D
"RTN","IBCEF21",113,0)
 . S $P(DATA,U,2)=$P(IB5,U,1)             ; patient primary ID
"RTN","IBCEF21",114,0)
 . S $P(DATA,U,3,8)=$P(IB5,U,8,13)        ; patient secondary data
"RTN","IBCEF21",115,0)
 . Q
"RTN","IBCEF21",116,0)
 ;
"RTN","IBCEF21",117,0)
 S DATA=$$SCRUB(DATA)     ; scrub the data
"RTN","IBCEF21",118,0)
INSSX ;
"RTN","IBCEF21",119,0)
 Q DATA
"RTN","IBCEF21",120,0)
 ;
"RTN","IBCEF21",121,0)
SCRUB(DATA) ; Scrub the 8-piece string gathered above
"RTN","IBCEF21",122,0)
 NEW PCE
"RTN","IBCEF21",123,0)
 ;
"RTN","IBCEF21",124,0)
 ; make sure you can't have an ID without a qualifier or a qualifier
"RTN","IBCEF21",125,0)
 ; without an ID.  Check all 4 pairs.
"RTN","IBCEF21",126,0)
 F PCE=1,3,5,7 D
"RTN","IBCEF21",127,0)
 . I $P(DATA,U,PCE)'="",$P(DATA,U,PCE+1)'="" Q
"RTN","IBCEF21",128,0)
 . S ($P(DATA,U,PCE),$P(DATA,U,PCE+1))=""
"RTN","IBCEF21",129,0)
 . Q
"RTN","IBCEF21",130,0)
 ;
"RTN","IBCEF21",131,0)
 ; fill in secondary gaps.  If Set1 and Set2 are blank, but Set3 exists
"RTN","IBCEF21",132,0)
 ; then move Set3 to Set1 and delete Set3.
"RTN","IBCEF21",133,0)
 I $P(DATA,U,3)="",$P(DATA,U,5)="",$P(DATA,U,7)'="" D
"RTN","IBCEF21",134,0)
 . S $P(DATA,U,3)=$P(DATA,U,7),$P(DATA,U,4)=$P(DATA,U,8)
"RTN","IBCEF21",135,0)
 . S ($P(DATA,U,7),$P(DATA,U,8))=""
"RTN","IBCEF21",136,0)
 . Q
"RTN","IBCEF21",137,0)
 ;
"RTN","IBCEF21",138,0)
 ; fill in secondary gaps more generically.
"RTN","IBCEF21",139,0)
 ; If Set(n) is blank, but Set(n+1) exists, then move it up.
"RTN","IBCEF21",140,0)
 F PCE=3,5 D
"RTN","IBCEF21",141,0)
 . I $P(DATA,U,PCE)="",$P(DATA,U,PCE+2)'="" D
"RTN","IBCEF21",142,0)
 .. S $P(DATA,U,PCE)=$P(DATA,U,PCE+2)
"RTN","IBCEF21",143,0)
 .. S $P(DATA,U,PCE+1)=$P(DATA,U,PCE+3)
"RTN","IBCEF21",144,0)
 .. S ($P(DATA,U,PCE+2),$P(DATA,U,PCE+3))=""
"RTN","IBCEF21",145,0)
 .. Q
"RTN","IBCEF21",146,0)
 . Q
"RTN","IBCEF21",147,0)
 ;
"RTN","IBCEF21",148,0)
 Q DATA
"RTN","IBCEF21",149,0)
 ;
"RTN","IBCEF75")
0^9^B30751276^B30617202
"RTN","IBCEF75",1,0)
IBCEF75 ;ALB/WCJ - Provider ID functions ;13 Feb 2006
"RTN","IBCEF75",2,0)
 ;;2.0;INTEGRATED BILLING;**320,371**;21-MAR-94;Build 57
"RTN","IBCEF75",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF75",4,0)
 ;
"RTN","IBCEF75",5,0)
 G AWAY
"RTN","IBCEF75",6,0)
AWAY Q
"RTN","IBCEF75",7,0)
 ;
"RTN","IBCEF75",8,0)
ALLIDS(IBIFN,IBXSAVE,IBSTRIP,SEG) ; Return all of the Provider IDS 
"RTN","IBCEF75",9,0)
 I '$D(IBSTRIP) S IBSTRIP=0
"RTN","IBCEF75",10,0)
 I '$D(SEG) S SEG=""
"RTN","IBCEF75",11,0)
 N IBXIEN,ARINFO,ARID,ARQ,IBFRMTYP,ARIEN,ARINS,Z0,DAT,I,SORT1,SORT2,SORT3,COB,IBCCOB
"RTN","IBCEF75",12,0)
 ;
"RTN","IBCEF75",13,0)
 S IBXIEN=IBIFN
"RTN","IBCEF75",14,0)
 D ALLPROV^IBCEF7    ; Get the Person ID's (Returns IBXSAVE)
"RTN","IBCEF75",15,0)
 S DAT=$$PROVID^IBCEF73(IBIFN)
"RTN","IBCEF75",16,0)
 S DAT("QUAL")=IBXSAVE("ID")  ; this value was also passed back by above function
"RTN","IBCEF75",17,0)
 S SORT1="" F  S SORT1=$O(IBXSAVE("PROVINF",IBIFN,SORT1)) Q:SORT1=""  D
"RTN","IBCEF75",18,0)
 . S SORT2=0 F  S SORT2=$O(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2)) Q:SORT2=""  D
"RTN","IBCEF75",19,0)
 .. S SORT3=0 F  S SORT3=$O(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3))  Q:SORT3=""  D
"RTN","IBCEF75",20,0)
 ... S IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,0)="PRIMARY"_U_U_$$STRIP^IBCEF76($P(DAT("QUAL"),U,SORT3)_U_$P(DAT,U,SORT3),1,U,IBSTRIP)
"RTN","IBCEF75",21,0)
 ... F I=1:1 Q:'$D(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I))  D
"RTN","IBCEF75",22,0)
 .... S $P(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I),U,3,4)=$$STRIP^IBCEF76($P(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I),U,3,4),1,U,IBSTRIP)
"RTN","IBCEF75",23,0)
 ;
"RTN","IBCEF75",24,0)
 D LFIDS^IBCEF76(IBIFN,.IBXSAVE,IBSTRIP,SEG)   ; Get the Lab/Facility IDs
"RTN","IBCEF75",25,0)
 ;
"RTN","IBCEF75",26,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEF75",27,0)
 S ARIEN=$S(IBFRMTYP=2:3,1:4)
"RTN","IBCEF75",28,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEF75",29,0)
 F COB=1:1:3 D
"RTN","IBCEF75",30,0)
 . S SORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEF75",31,0)
 . S SORT2=$S(SORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEF75",32,0)
 . S ARINFO=$G(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,ARIEN,1))
"RTN","IBCEF75",33,0)
 . ;
"RTN","IBCEF75",34,0)
 . D BPIDS(IBIFN,.IBXSAVE,SORT1,SORT2,COB,IBSTRIP,SEG)
"RTN","IBCEF75",35,0)
 Q
"RTN","IBCEF75",36,0)
 ; 
"RTN","IBCEF75",37,0)
BPIDS(IBIFN,IDS,SORT1,SORT2,COB,IBSTRIP,SEG) ; Get all the billing provider IDs and qualifiers from the claim and file 355.92
"RTN","IBCEF75",38,0)
 N DAT,IBFRMTYP,IBCARE,IBDIV,IBINS,MAIN,IBCCOB,USED,PLANTYPE,I,CNT,QUAL,ARF,M1,DEF,IDDIV,IBLIMIT,IEN,ID,IB2
"RTN","IBCEF75",39,0)
 ;
"RTN","IBCEF75",40,0)
 S DAT=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF75",41,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEF75",42,0)
 S IBCARE=$S($$ISRX^IBCEF1(IBIFN):3,1:0) ;if an Rx refill bill
"RTN","IBCEF75",43,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBIFN,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF75",44,0)
 S IBDIV=+$P(DAT,U,22)
"RTN","IBCEF75",45,0)
 S MAIN=$$MAIN^IBCEP2B()  ; get the IEN for main Division
"RTN","IBCEF75",46,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEF75",47,0)
 S IBINS=$P($G(^DGCR(399,IBIFN,"I"_COB)),U)
"RTN","IBCEF75",48,0)
 Q:IBINS=""
"RTN","IBCEF75",49,0)
 ;
"RTN","IBCEF75",50,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2)=$E("PST",COB)
"RTN","IBCEF75",51,0)
 ;
"RTN","IBCEF75",52,0)
 ; Primary ID
"RTN","IBCEF75",53,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,0)=$$STRIP^IBCEF76($$TAXID(),1,U,IBSTRIP)
"RTN","IBCEF75",54,0)
 S USED($P(IDS("BILLING PRV",IBIFN,SORT1,SORT2,0),U))=""
"RTN","IBCEF75",55,0)
 ;
"RTN","IBCEF75",56,0)
 ; Secondary #1 - This is the ID Emdeon uses for sorting
"RTN","IBCEF75",57,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,1)=$$STRIP^IBCEF76($$BPSID1(IBDIV),1,U,IBSTRIP)
"RTN","IBCEF75",58,0)
 S USED($P(IDS("BILLING PRV",IBIFN,SORT1,SORT2,1),U))=""
"RTN","IBCEF75",59,0)
 ;
"RTN","IBCEF75",60,0)
 ; Check if this is a plan type which gets no secondary IDs
"RTN","IBCEF75",61,0)
 S M1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCEF75",62,0)
 ; the following check is the current value of the flag, not when the claim was created. 
"RTN","IBCEF75",63,0)
 S PLANTYPE=$$POLTYP^IBCEF3(IBIFN,COB)
"RTN","IBCEF75",64,0)
 I PLANTYPE]"",$D(^DIC(36,IBINS,13,"B",PLANTYPE)) Q 
"RTN","IBCEF75",65,0)
 ;
"RTN","IBCEF75",66,0)
 ; Secondary #2
"RTN","IBCEF75",67,0)
 ; If there is a ID  send with quailifer (stored or computed)
"RTN","IBCEF75",68,0)
 I $TR($P(M1,U,COB+1)," ")]"" D
"RTN","IBCEF75",69,0)
 . S QUAL=""
"RTN","IBCEF75",70,0)
 . S DAT=$P(M1,U,COB+9)
"RTN","IBCEF75",71,0)
 . I DAT S QUAL=$$STRIP^IBCEF76($P($G(^IBE(355.97,DAT,0)),U,3),1,,IBSTRIP)
"RTN","IBCEF75",72,0)
 . ; the null check is needed to be backwards compatible
"RTN","IBCEF75",73,0)
 . I QUAL=""!(QUAL="1J") S QUAL=$$STRIP^IBCEF76($$OLDWAY(IBIFN,COB),1,,IBSTRIP)
"RTN","IBCEF75",74,0)
 . S IB2=QUAL_U_$$STRIP^IBCEF76($P(M1,U,COB+1),1,,IBSTRIP)
"RTN","IBCEF75",75,0)
 ;
"RTN","IBCEF75",76,0)
 I $TR($P(M1,U,COB+1)," ")="" S IB2=$$STRIP^IBCEF76($$OLDWAY(IBIFN,COB),1,,IBSTRIP)_U_$$STRIP^IBCEF76($$GET1^DIQ(350.9,1,1.05),1,,IBSTRIP)
"RTN","IBCEF75",77,0)
 ;
"RTN","IBCEF75",78,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,2)=IB2
"RTN","IBCEF75",79,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,2,"PTQ")=$$OLDWAY(IBIFN,COB)
"RTN","IBCEF75",80,0)
 S USED($P(IB2,U))=""
"RTN","IBCEF75",81,0)
 ;
"RTN","IBCEF75",82,0)
 S CNT=$S('$D(IDS("BILLING PRV",IBIFN,SORT1,SORT2,2)):2,1:3)
"RTN","IBCEF75",83,0)
 S IBLIMIT=8
"RTN","IBCEF75",84,0)
 S IEN=0 F  S IEN=$O(^IBA(355.92,"B",IBINS,IEN)) Q:IEN=""  D  Q:CNT>IBLIMIT
"RTN","IBCEF75",85,0)
 . S DAT=$G(^IBA(355.92,IEN,0))
"RTN","IBCEF75",86,0)
 . Q:$P(DAT,U,8)'="A"   ; only allow additional IDs
"RTN","IBCEF75",87,0)
 . Q:$P(DAT,U,7)=""  ; No Provider ID
"RTN","IBCEF75",88,0)
 . Q:$P(DAT,U,6)=""  ; No ID Qualifier
"RTN","IBCEF75",89,0)
 . I IBFRMTYP=1 Q:$P(DAT,U,4)=2
"RTN","IBCEF75",90,0)
 . I IBFRMTYP=2 Q:$P(DAT,U,4)=1
"RTN","IBCEF75",91,0)
 . ;
"RTN","IBCEF75",92,0)
 . ; Check if we already have one of these
"RTN","IBCEF75",93,0)
 . S QUAL=$$STRIP^IBCEF76($P(DAT,U,6),1,,IBSTRIP)
"RTN","IBCEF75",94,0)
 . S QUAL=$P($G(^IBE(355.97,QUAL,0)),U,3)
"RTN","IBCEF75",95,0)
 . Q:QUAL=""
"RTN","IBCEF75",96,0)
 . Q:$D(USED(QUAL))
"RTN","IBCEF75",97,0)
 . ;
"RTN","IBCEF75",98,0)
 . S IDS("BILLING PRV",IBIFN,SORT1,SORT2,CNT)=QUAL_U_$$STRIP^IBCEF76($P(DAT,U,7),1,,IBSTRIP)
"RTN","IBCEF75",99,0)
 . S CNT=CNT+1,USED(QUAL)=""
"RTN","IBCEF75",100,0)
 ;
"RTN","IBCEF75",101,0)
 Q
"RTN","IBCEF75",102,0)
 ;
"RTN","IBCEF75",103,0)
OLDWAY(IBIFN,COB) ; Figure out the qualifier the old way if it's not stored with the claim.
"RTN","IBCEF75",104,0)
 ; It's based on the plan type.  This is used for Billing Provider Secondary ID #2
"RTN","IBCEF75",105,0)
 N PLANTYPE
"RTN","IBCEF75",106,0)
 S PLANTYPE=$$POLTYP^IBCEF3(IBIFN,COB)
"RTN","IBCEF75",107,0)
 Q $$SOP^IBCEP2B(IBIFN,PLANTYPE)
"RTN","IBCEF75",108,0)
 ;
"RTN","IBCEF75",109,0)
BPSID1(DIV) ; Return the Billing Provider Secondary ID #1 and qualifier which Emdeon uses to sort IBIFNs
"RTN","IBCEF75",110,0)
 N DATA
"RTN","IBCEF75",111,0)
 S DATA=$P($$SITE^VASITE(DT,$S(DIV:DIV,1:+$$SITE^VASITE())),U,3)
"RTN","IBCEF75",112,0)
 S DATA=$E("0000",1,7-$L(DATA))_$E(DATA,4,7)
"RTN","IBCEF75",113,0)
 Q "G5"_U_DATA
"RTN","IBCEF75",114,0)
 ;
"RTN","IBCEF75",115,0)
TAXID() ; Return the Billing Provider Primary ID and qualifier which is the TAXID for the site and also the qualifier
"RTN","IBCEF75",116,0)
 N DATA
"RTN","IBCEF75",117,0)
 S DATA=$P($G(^IBE(350.9,1,1)),U,5)
"RTN","IBCEF75",118,0)
 S DATA=$$NOPUNCT^IBCEF(DATA,1)
"RTN","IBCEF75",119,0)
 Q 24_U_DATA
"RTN","IBCEF75",120,0)
 ;
"RTN","IBCEF75",121,0)
VAMCFD(IBIFN,IBRET) ;
"RTN","IBCEF75",122,0)
 ;
"RTN","IBCEF75",123,0)
 ; This procedure returns data based on flag in insurance company file which is set in the insurance co editor
"RTN","IBCEF75",124,0)
 ; Send VA Lab/Facility IDs or Facility Data for VAMC?
"RTN","IBCEF75",125,0)
 ; The return value will be set to 1 (yes) if the division in the claim is not the main division (VAMC) or
"RTN","IBCEF75",126,0)
 ; if the flag in the dictionary for that insurance company says to send the data.
"RTN","IBCEF75",127,0)
 ; 
"RTN","IBCEF75",128,0)
 ; Input - IBFN - IEN 399
"RTN","IBCEF75",129,0)
 ; Output - IBRET(IBSORT1,IBSORT2)=FLAG
"RTN","IBCEF75",130,0)
 ;    IBSORT1 = "C"urrent or "O"ther insurance
"RTN","IBCEF75",131,0)
 ;    IBSORT2 = order with IBSORT1
"RTN","IBCEF75",132,0)
 ;    FLAG = 0 No or 1 Yes
"RTN","IBCEF75",133,0)
 ;
"RTN","IBCEF75",134,0)
 N IBDIV,MAIN,IBCCOB,IBSORT1,IBSORT2,DAT,IBINS,COB,OUTFAC
"RTN","IBCEF75",135,0)
 S IBDIV=+$P($G(^DGCR(399,IBIFN,0)),U,22)
"RTN","IBCEF75",136,0)
 S MAIN=$$MAIN^IBCEP2B()  ; get the IEN for main Division
"RTN","IBCEF75",137,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF75",138,0)
 F COB=1:1:3 D
"RTN","IBCEF75",139,0)
 . S IBSORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEF75",140,0)
 . S IBSORT2=$S(IBSORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEF75",141,0)
 . S IBINS=+$G(^DGCR(399,IBIFN,"I"_COB))
"RTN","IBCEF75",142,0)
 . Q:'IBINS
"RTN","IBCEF75",143,0)
 . S IBRET(IBSORT1,IBSORT2)=1
"RTN","IBCEF75",144,0)
 . S OUTFAC=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCEF75",145,0)
 . Q:OUTFAC]""
"RTN","IBCEF75",146,0)
 . Q:IBDIV'=MAIN
"RTN","IBCEF75",147,0)
 . ; [7] Send VA Lab/Facility IDs or Facility Data for VAMC?(0 - NO, 1 - YES)
"RTN","IBCEF75",148,0)
 . S DAT(3647)=$P($G(^DIC(36,IBINS,4)),U,7)
"RTN","IBCEF75",149,0)
 . I DAT(3647) Q
"RTN","IBCEF75",150,0)
 . S IBRET(IBSORT1,IBSORT2)=0
"RTN","IBCEF75",151,0)
 Q
"RTN","IBCEF75",152,0)
 ;
"RTN","IBCEF75",153,0)
CLEANUP(IBXSAVE) ; Clean up 
"RTN","IBCEF75",154,0)
 K IBXSAVE("PROVINF")
"RTN","IBCEF75",155,0)
 K IBXSAVE("LAB/FAC")
"RTN","IBCEF75",156,0)
 K IBXSAVE("BILLING PRV")
"RTN","IBCEF75",157,0)
 K IBXSAVE("ID")
"RTN","IBCEF75",158,0)
 Q
"RTN","IBCEF78")
0^10^B4445010^n/a
"RTN","IBCEF78",1,0)
IBCEF78 ;ALB/WCJ - Provider ID functions ;13 May 2007
"RTN","IBCEF78",2,0)
 ;;2.0;INTEGRATED BILLING;**371**;21-MAR-94;Build 57
"RTN","IBCEF78",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF78",4,0)
 ;;
"RTN","IBCEF78",5,0)
 G AWAY
"RTN","IBCEF78",6,0)
AWAY Q
"RTN","IBCEF78",7,0)
 ;
"RTN","IBCEF78",8,0)
PAYERIDS(IBXIEN,IBRET) ; This function returns all the PAYER IDS for the current and other insurance(s)
"RTN","IBCEF78",9,0)
 ; 
"RTN","IBCEF78",10,0)
 D PRIPAYID(IBXIEN,.IBRET)
"RTN","IBCEF78",11,0)
 D SECPAYID(IBXIEN,.IBRET)
"RTN","IBCEF78",12,0)
 Q
"RTN","IBCEF78",13,0)
 ;
"RTN","IBCEF78",14,0)
PRIPAYID(IBXIEN,IBXRET) ; Primary Payer IDs
"RTN","IBCEF78",15,0)
 ; Incoming:
"RTN","IBCEF78",16,0)
 ; IBXIEN = IEN for File # 399
"RTN","IBCEF78",17,0)
 ; IBXRET = Return Array for Qualifiers and IDs
"RTN","IBCEF78",18,0)
 ;
"RTN","IBCEF78",19,0)
 ; Outgoing
"RTN","IBCEF78",20,0)
 ; IBXRET("CI_PID",1)=QUAL^ID
"RTN","IBCEF78",21,0)
 ; IBXRET("OI_PID",#)=QUAL^ID
"RTN","IBCEF78",22,0)
 ; 
"RTN","IBCEF78",23,0)
 N RET,I
"RTN","IBCEF78",24,0)
 S RET=$$PAYERID^IBCEF2(IBXIEN)
"RTN","IBCEF78",25,0)
 I RET]"" S IBXRET("CI_PID",1)="PI"_U_RET
"RTN","IBCEF78",26,0)
 ;
"RTN","IBCEF78",27,0)
 D OTHINSID^IBCEF72(IBXIEN,.RET)
"RTN","IBCEF78",28,0)
 F I=1,2 I $G(RET(I))]"" S IBXRET("OI_PID",I)="PI"_U_RET(I)
"RTN","IBCEF78",29,0)
 Q
"RTN","IBCEF78",30,0)
 ;
"RTN","IBCEF78",31,0)
 ;
"RTN","IBCEF78",32,0)
SECPAYID(IBXIEN,IBXRET) ; This returns all of the secondary payer IDs from file #36 
"RTN","IBCEF78",33,0)
 ; for the insurance companies on a given claim
"RTN","IBCEF78",34,0)
 ; 
"RTN","IBCEF78",35,0)
 ; Incoming:
"RTN","IBCEF78",36,0)
 ; IBXIEN = IEN for File # 399
"RTN","IBCEF78",37,0)
 ; IBXRET = Return Array for Qualifiers and IDs
"RTN","IBCEF78",38,0)
 ;
"RTN","IBCEF78",39,0)
 ; Outgoing
"RTN","IBCEF78",40,0)
 ; IBXRET("CI_PSIDS",1)=QUAL^ID^QUAL^ID
"RTN","IBCEF78",41,0)
 ; IBXRET("OI_PSIDS",#)=QUAL^ID^QUAL^ID
"RTN","IBCEF78",42,0)
 ;
"RTN","IBCEF78",43,0)
 N Z,C,IBZ,Z0,FT
"RTN","IBCEF78",44,0)
 F Z=1:1:3 S IBZ(Z)=$$POLICY^IBCEF(IBXIEN,1,Z)
"RTN","IBCEF78",45,0)
 S Z0=0,C=$$COBN^IBCEF(IBXIEN),FT=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF78",46,0)
 F Z=1:1:3 S:C'=Z Z0=Z0+1 S IBXRET($S(C=Z:"CI_PSIDS",1:"OI_PSIDS"),$S(C=Z:1,1:Z0))=$$SPIDS(+IBZ(Z),FT)
"RTN","IBCEF78",47,0)
 Q
"RTN","IBCEF78",48,0)
 ;
"RTN","IBCEF78",49,0)
SPIDS(INS,FT) ;
"RTN","IBCEF78",50,0)
 ; FT = FORM TYPE (2 PROFESSIONAL 3 INSTITUTIONAL)
"RTN","IBCEF78",51,0)
 ; INS = INSURANCE COMPANY (FILE #36) IEN
"RTN","IBCEF78",52,0)
 ; Returns String (^ delimited)
"RTN","IBCEF78",53,0)
 ; [1] = QUAL 1
"RTN","IBCEF78",54,0)
 ; [2] = PAYER ID 1
"RTN","IBCEF78",55,0)
 ; [3] = QUAL 2
"RTN","IBCEF78",56,0)
 ; [4] = PAYER ID 2
"RTN","IBCEF78",57,0)
 Q:'+INS ""
"RTN","IBCEF78",58,0)
 ;
"RTN","IBCEF78",59,0)
 N DATA,PCE
"RTN","IBCEF78",60,0)
 S DATA=$S(FT=3:$P($G(^DIC(36,+INS,6)),U,1,4),FT=2:$P($G(^DIC(36,+INS,6)),U,5,8),1:"")
"RTN","IBCEF78",61,0)
 ;
"RTN","IBCEF78",62,0)
 ; Check for dangling IDs/Qualifiers
"RTN","IBCEF78",63,0)
 F PCE=1,3 D
"RTN","IBCEF78",64,0)
 . I $P(DATA,U,PCE)'="",$P(DATA,U,PCE+1)'="" Q
"RTN","IBCEF78",65,0)
 . S ($P(DATA,U,PCE),$P(DATA,U,PCE+1))=""
"RTN","IBCEF78",66,0)
 ;
"RTN","IBCEF78",67,0)
 ; fill in the gap if there is one
"RTN","IBCEF78",68,0)
 I $P(DATA,U,1)="",$P(DATA,U,3)'="" D
"RTN","IBCEF78",69,0)
 . S $P(DATA,U,1)=$P(DATA,U,3)
"RTN","IBCEF78",70,0)
 . S $P(DATA,U,2)=$P(DATA,U,4)
"RTN","IBCEF78",71,0)
 . S ($P(DATA,U,3),$P(DATA,U,4))=""
"RTN","IBCEF78",72,0)
 ;
"RTN","IBCEF78",73,0)
 Q DATA
"RTN","IBCEF78",74,0)
 ;
"RTN","IBCEF78",75,0)
CLEANUP(IBRET) ;
"RTN","IBCEF78",76,0)
 K IBRET("CI_PID"),IBRET("OI_PID"),IBRET("CI_PSIDS"),IBRET("OI_PSIDS")
"RTN","IBCEF78",77,0)
 Q
"RTN","IBCEF78",78,0)
 ;
"RTN","IBCEFG1")
0^47^B26758325^B26630861
"RTN","IBCEFG1",1,0)
IBCEFG1 ;ALB/TMP - OUTPUT FORMATTER DATA DEFINITION UTILITIES ;18-JAN-96
"RTN","IBCEFG1",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,137,181,197,232,288,349,371**;21-MAR-94;Build 57
"RTN","IBCEFG1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEFG1",4,0)
 ;
"RTN","IBCEFG1",5,0)
EDIBILL(IBXFORM,IBXDA,IBINS,IBTYP) ; Find element associated with form fld
"RTN","IBCEFG1",6,0)
 ; IBXFORM = (REQUIRED) actual form being extracted (in file 353)
"RTN","IBCEFG1",7,0)
 ; IBXDA = (REQUIRED) form definition file (364.6) entry to use to find
"RTN","IBCEFG1",8,0)
 ;         extract data element definition entry (in file 364.7)
"RTN","IBCEFG1",9,0)
 ; IBINS = (REQUIRED) insurance co. ien for the current insurance on bill
"RTN","IBCEFG1",10,0)
 ; IBTYP = (REQUIRED) bill type (I/O)
"RTN","IBCEFG1",11,0)
 ;
"RTN","IBCEFG1",12,0)
 ; Returns ien of the entry in file 364.7 if a match on override criteria
"RTN","IBCEFG1",13,0)
 ;  was found.  Returns -1 if a screen form and the criteria fails for a
"RTN","IBCEFG1",14,0)
 ;  field without an override
"RTN","IBCEFG1",15,0)
 ;
"RTN","IBCEFG1",16,0)
 N IBX,IBPARFM,IBSCREEN,IBNMATCH,EDIQ,IB1
"RTN","IBCEFG1",17,0)
 I $G(IBXDA)=""!($G(IBXFORM)="") G EDIQ
"RTN","IBCEFG1",18,0)
 S EDIQ=0
"RTN","IBCEFG1",19,0)
 S IBPARFM=$P($G(^IBE(353,IBXFORM,2)),U,5) S:'IBPARFM IBPARFM=IBXFORM
"RTN","IBCEFG1",20,0)
 S IBSCREEN=($P($G(^IBE(353,+IBXFORM,2)),U,2)="S")
"RTN","IBCEFG1",21,0)
 S IB1=(IBPARFM=IBXFORM) ; Not a local field that is not a parent
"RTN","IBCEFG1",22,0)
 ;
"RTN","IBCEFG1",23,0)
 I $G(IBINS)'="",$G(IBTYP)'="" D:$O(^IBA(364.7,"AINTYP",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",24,0)
 . I '$D(^IBA(364.7,"AINTYP",IBXDA,IBINS,IBTYP)) S IBNMATCH=1 Q
"RTN","IBCEFG1",25,0)
 . S IBX=+$O(^IBA(364.7,"AINTYP",IBXDA,IBINS,IBTYP,"")),EDIQ=1 S:IBX IBNMATCH=0 ;by ins co and type of bill
"RTN","IBCEFG1",26,0)
 ;
"RTN","IBCEFG1",27,0)
 I $G(IBINS)'="" D:$O(^IBA(364.7,"AINS",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",28,0)
 . I '$D(^IBA(364.7,"AINS",IBXDA,IBINS)) S IBNMATCH=1 Q
"RTN","IBCEFG1",29,0)
 . S IBX=+$O(^IBA(364.7,"AINS",IBXDA,IBINS,"")),EDIQ=1 S:IBX IBNMATCH=0 ;ins co only
"RTN","IBCEFG1",30,0)
 ;
"RTN","IBCEFG1",31,0)
 I $G(IBTYP)'="" D:$O(^IBA(364.7,"ATYPE",IBXDA,""))'=""  G:EDIQ EDIQ
"RTN","IBCEFG1",32,0)
 . I '$D(^IBA(364.7,"ATYPE",IBXDA,IBTYP)) S IBNMATCH=1 Q
"RTN","IBCEFG1",33,0)
 . S IBX=+$O(^IBA(364.7,"ATYPE",IBXDA,IBTYP,"")),EDIQ=1 S:IBX IBNMATCH=0 ;type of bill only
"RTN","IBCEFG1",34,0)
 ;
"RTN","IBCEFG1",35,0)
 I IBXFORM,$S(IBXFORM'=IBPARFM:1,1:IBSCREEN) D  G EDIQ
"RTN","IBCEFG1",36,0)
 . S IBX=+$O(^IBA(364.7,"ALL",IBXDA,"")) ; Check for all ins co and types
"RTN","IBCEFG1",37,0)
 . I IBX,+$O(^IBA(364.7,"ALL",IBXDA,IBX)) D  ; Find override for 'ALL'
"RTN","IBCEFG1",38,0)
 .. N Z
"RTN","IBCEFG1",39,0)
 .. S Z=0 F  S Z=$O(^IBA(364.7,"ALL",IBXDA,Z)) Q:'Z  I $P($G(^IBA(364.7,Z,0)),U)'=IBXDA S IBX=Z Q
"RTN","IBCEFG1",40,0)
 . I 'IBX,+$O(^IBA(364.7,"B",IBXDA,"")) S IBX=$O(^(""))
"RTN","IBCEFG1",41,0)
 . S:IBX IBNMATCH=0
"RTN","IBCEFG1",42,0)
 ;
"RTN","IBCEFG1",43,0)
 I IBXFORM,$O(^IBA(364.6,"APAR",IBXFORM,IBXDA,"")) S IBX=+$O(^("")),IBX=+$O(^IBA(364.7,"B",IBX,0)) I IBX G EDIQ
"RTN","IBCEFG1",44,0)
 S IBX=+$O(^IBA(364.7,"B",IBXDA,""))
"RTN","IBCEFG1",45,0)
EDIQ I IBSCREEN,$G(IBNMATCH) S IBX=-1
"RTN","IBCEFG1",46,0)
 Q $G(IBX)
"RTN","IBCEFG1",47,0)
 ;
"RTN","IBCEFG1",48,0)
DT(DATE1,DATE2,FORMAT) ; Return date in DATE1 (and optionally DATE2)
"RTN","IBCEFG1",49,0)
 ;   (input in Fileman format) converted to X12 format
"RTN","IBCEFG1",50,0)
 ; FORMAT (required)
"RTN","IBCEFG1",51,0)
 ; DATE1,DATE2 in FILEMAN date format
"RTN","IBCEFG1",52,0)
 N DATE S DATE=""
"RTN","IBCEFG1",53,0)
 I DATE1=0 S DATE1=""
"RTN","IBCEFG1",54,0)
 I $E(FORMAT)="D" D  G DTQ
"RTN","IBCEFG1",55,0)
 .S DATE=$E(DATE1,2,7) Q:$P(FORMAT,"D",2)=6  ;YYMMDD
"RTN","IBCEFG1",56,0)
 .S:DATE1 DATE=($E(DATE1)+17)_DATE ;CCYYMMDD
"RTN","IBCEFG1",57,0)
 I $E(FORMAT)="R" D
"RTN","IBCEFG1",58,0)
 .S:DATE1 DATE=$E(DATE1,2,7)_"-"_$E($S($G(DATE2):DATE2,1:DATE1),2,7) ;YYMMDD-YYMMDD
"RTN","IBCEFG1",59,0)
 .Q:FORMAT["6"
"RTN","IBCEFG1",60,0)
 .S DATE=($E(DATE1)+17)_DATE,$P(DATE,"-",2)=($E($S($G(DATE2):DATE2,1:DATE1))+17)_$P(DATE,"-",2) ;CCYYMMDD-CCYYMMDD
"RTN","IBCEFG1",61,0)
DTQ Q DATE
"RTN","IBCEFG1",62,0)
 ;
"RTN","IBCEFG1",63,0)
NAME(IBNM1,COMB) ; Parse person's nm into 5 pieces LAST^FIRST^MIDDLE^CRED^SUFFIX
"RTN","IBCEFG1",64,0)
 ; IBNM1 = NAME in LAST,FIRST MIDDLE^vp file ien (200 or 355.93)^bill ien^prv type
"RTN","IBCEFG1",65,0)
 ;      OR         FIRST MIDDLE LAST^vp file ien (200 or 355.93)^bill ien^prv type
"RTN","IBCEFG1",66,0)
 ; COMB = if set to 1, then combine the first and middle name
"RTN","IBCEFG1",67,0)
 ;        if set to 2, combine the last and middle names
"RTN","IBCEFG1",68,0)
 N PC,IBIEN,IBCRED,IBNM,IBNMC,IBPIEN
"RTN","IBCEFG1",69,0)
 S IBIEN=$P(IBNM1,U,2),IBNMC=$P(IBNM1,U)
"RTN","IBCEFG1",70,0)
 S IBPIEN=+$O(^DGCR(399,+$P(IBNM1,U,3),"PRV","B",+$P(IBNM1,U,4),0))
"RTN","IBCEFG1",71,0)
 S IBCRED=$$CRED^IBCEU(IBIEN,+$P(IBNM1,U,3),IBPIEN) ;Degree
"RTN","IBCEFG1",72,0)
 I IBNMC="DEPT VETERANS AFFAIRS" S IBNMC="VETERANS AFFAIRS,DEPT"
"RTN","IBCEFG1",73,0)
 I IBNMC["," D  G NAMEQ
"RTN","IBCEFG1",74,0)
 . S IBNMC=$TR(IBNMC,".") D NAMECOMP^XLFNAME(.IBNMC)
"RTN","IBCEFG1",75,0)
 . S IBNM=$G(IBNMC("FAMILY"))_U_$G(IBNMC("GIVEN"))_U_$G(IBNMC("MIDDLE"))_U_IBCRED_U_$G(IBNMC("SUFFIX"))
"RTN","IBCEFG1",76,0)
 D STDNAME^XLFNAME(.IBNMC,"C")
"RTN","IBCEFG1",77,0)
 S IBNM=$G(IBNMC("FAMILY"))_U_$G(IBNMC("GIVEN"))_U_$G(IBNMC("MIDDLE"))_U_IBCRED_U_$G(IBNMC("SUFFIX"))
"RTN","IBCEFG1",78,0)
 I $P(IBNM1,U,2)["355.93",$P($G(^IBA(355.93,+$P(IBNM1,U,2),0)),U,2)=1 D  G NAMEQ  ; group performing provider
"RTN","IBCEFG1",79,0)
 . S IBNM=$P(IBNM1,U)_U_U_U_IBCRED_U
"RTN","IBCEFG1",80,0)
 I $G(COMB)=1,$G(IBNMC("MIDDLE"))'="" S IBNM=$P(IBNM,U)_U_$P(IBNM,U,2)_" "_$P(IBNM,U,3)_U_IBCRED_U_$P(IBNM,U,5)
"RTN","IBCEFG1",81,0)
 I $G(COMB)=2,$G(IBNMC("MIDDLE"))'="" S IBNM=$P(IBNM,U)_" "_$P(IBNM,U,3)_U_$P(IBNM,U,2)_U_IBCRED_U_$P(IBNM,U,5)
"RTN","IBCEFG1",82,0)
 ;
"RTN","IBCEFG1",83,0)
NAMEQ Q IBNM
"RTN","IBCEFG1",84,0)
 ;
"RTN","IBCEFG1",85,0)
DOLLAR(AMT) ; Format amount in AMT so it is numeric including cents, without
"RTN","IBCEFG1",86,0)
 ; the decimal and commas.
"RTN","IBCEFG1",87,0)
 N DOLR,CENT
"RTN","IBCEFG1",88,0)
 I AMT'="" S AMT=$TR(AMT,","),DOLR=$P(AMT,"."),CENT=$E($P(AMT,".",2)_"00",1,2),AMT=DOLR_CENT
"RTN","IBCEFG1",89,0)
 Q AMT
"RTN","IBCEFG1",90,0)
 ;
"RTN","IBCEFG1",91,0)
STATE(CODE) ;Return state code from state pointer
"RTN","IBCEFG1",92,0)
 Q $P($G(^DIC(5,+CODE,0)),U,2)
"RTN","IBCEFG1",93,0)
 ;
"RTN","IBCEFG1",94,0)
SEX(CODE) ;Return the X12 code for sex
"RTN","IBCEFG1",95,0)
 ; CODE = DHCP code for sex
"RTN","IBCEFG1",96,0)
 Q $S(CODE="":"U","MF"[$E(CODE):$E(CODE),1:"U")
"RTN","IBCEFG1",97,0)
 ;
"RTN","IBCEFG1",98,0)
RELATION(CODE) ;Return the X12 code for relationship
"RTN","IBCEFG1",99,0)
 ; CODE = DHCP code for relationship
"RTN","IBCEFG1",100,0)
 N X12
"RTN","IBCEFG1",101,0)
 S X12=""
"RTN","IBCEFG1",102,0)
 S:CODE'="" X12=$P($S(CODE="01":"18^SELF",CODE="02":"01^SPOUSE",CODE="03":"19^NATURAL CHILD",CODE="08":"20^EMPLOYEE",CODE="32":"32^MOTHER",CODE="33":"33^FATHER",CODE="11":"39^ORGAN DONOR",CODE="15":"41^INJURED PLAINTIFF",1:""),U)
"RTN","IBCEFG1",103,0)
 Q X12
"RTN","IBCEFG1",104,0)
 ;
"RTN","IBCEFG1",105,0)
EMPLST(CODE) ;Return the X12 code for employment status
"RTN","IBCEFG1",106,0)
 ; CODE = DHCP code for employment status
"RTN","IBCEFG1",107,0)
 N X12
"RTN","IBCEFG1",108,0)
 S X12=""
"RTN","IBCEFG1",109,0)
 S:CODE'="" X12=$P($P("1;FT^2;PT^3;NE^4;SE^5;RT^6;AU^9;UK",CODE_";",2),U)
"RTN","IBCEFG1",110,0)
 S:X12="" X12="UK"
"RTN","IBCEFG1",111,0)
 Q X12
"RTN","IBCEFG1",112,0)
 ;
"RTN","IBCEFG1",113,0)
MARITAL(CODE) ;Return the X12 code for marital status
"RTN","IBCEFG1",114,0)
 ; CODE = ien of code for marital status
"RTN","IBCEFG1",115,0)
 N X12
"RTN","IBCEFG1",116,0)
 S X12=$P($G(^DIC(11,+CODE,0)),U,3)
"RTN","IBCEFG1",117,0)
 I X12'="" S X12=$P($P("D;D^M;M^N;I^S;X^W;W^U;K",X12_";",2),U)
"RTN","IBCEFG1",118,0)
 Q X12
"RTN","IBCEFG1",119,0)
 ;
"RTN","IBCEFG1",120,0)
TOS(CODE) ;Return the X12 code for type of service
"RTN","IBCEFG1",121,0)
 ; CODE = DHCP code for type of service
"RTN","IBCEFG1",122,0)
 N X12
"RTN","IBCEFG1",123,0)
 S X12=$S(CODE>0&(CODE<10):CODE,1:$P($P("0;10^A;11^B;13^H;45^L;18^M;15^N;63^V;19^Y;20^Z;21^43;96^53;96",CODE_";",2),U)) S:X12="" X12=CODE
"RTN","IBCEFG1",124,0)
 Q X12
"RTN","IBCEFG1",125,0)
 ;
"RTN","IBCEFG1",126,0)
FIXLEN(DATA,LEN) ; Create a fixed length field from data DATA length LEN
"RTN","IBCEFG1",127,0)
 Q $E(DATA_$J("",LEN),1,LEN)
"RTN","IBCEFG1",128,0)
 ;
"RTN","IBCEFG1",129,0)
RCDT(IBXSAVE,IBXDATA,IBDT) ; Format date for multiple revenue code transmission)
"RTN","IBCEFG1",130,0)
 ;IBXSAVE = array containing the extracted service line data for the UB format bill
"RTN","IBCEFG1",131,0)
 ;IBXDATA = array returned with service line dates formatted in YYYYMMDD format
"RTN","IBCEFG1",132,0)
 ;IBDT = the default date for the revenue codes on the bill
"RTN","IBCEFG1",133,0)
 N Q,W
"RTN","IBCEFG1",134,0)
 S Q=0 F  S Q=$O(IBXSAVE("INPT",Q)) Q:'Q  S W=$$DT($P(IBXSAVE("INPT",1),U,10),,"D8"),IBXDATA(Q)=$S(W:W,1:IBDT)
"RTN","IBCEFG1",135,0)
 Q
"RTN","IBCEM")
0^51^B59477823^B58848548
"RTN","IBCEM",1,0)
IBCEM ;ALB/TMP - 837 EDI RETURN MESSAGE PROCESSING ;17-APR-96
"RTN","IBCEM",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,155,371**;21-MAR-94;Build 57
"RTN","IBCEM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEM",4,0)
 Q
"RTN","IBCEM",5,0)
 ;
"RTN","IBCEM",6,0)
UPD ; Update messages manually from messages list
"RTN","IBCEM",7,0)
 N IBDA,IBOK,IBTDA,ZTSK,IBTSK,IBTYP,IBU,IBU1,IB0
"RTN","IBCEM",8,0)
 D FULL^VALM1
"RTN","IBCEM",9,0)
 D SEL(.IBDA,1)
"RTN","IBCEM",10,0)
 S IBDA=$O(IBDA(""))
"RTN","IBCEM",11,0)
 I IBDA="" G UPDQ
"RTN","IBCEM",12,0)
 S IBTDA=+IBDA(IBDA)
"RTN","IBCEM",13,0)
 I '$$LOCK(IBTDA) G UPDQ
"RTN","IBCEM",14,0)
 S IB0=$G(^IBA(364.2,IBTDA,0))
"RTN","IBCEM",15,0)
 ;
"RTN","IBCEM",16,0)
 I IB0="" D  G UPDQ
"RTN","IBCEM",17,0)
 . W !,*7,"Message ",IBDA," is no longer in return message file" S IBOK=""
"RTN","IBCEM",18,0)
 . D PAUSE^VALM1
"RTN","IBCEM",19,0)
 I $P(IB0,U,11) S IBOK=1 D  G:'IBOK UPDQ
"RTN","IBCEM",20,0)
 . N ZTSK
"RTN","IBCEM",21,0)
 . S ZTSK=$P(IB0,U,11) D STAT^%ZTLOAD Q:ZTSK(0)=0  ;Task not scheduled
"RTN","IBCEM",22,0)
 . I "12"[ZTSK(1) W *7,!,"This message has already been scheduled for update.  Task # is: ",$P(IB0,U,11) S IBOK="" D PAUSE^VALM1
"RTN","IBCEM",23,0)
 ;
"RTN","IBCEM",24,0)
 I $P(IB0,U,6)=""!("UP"'[$P(IB0,U,6)) D  G UPDQ
"RTN","IBCEM",25,0)
 . W !,*7,"Message status ("_$$EXPAND^IBTRE(364.2,.06,$P(IB0,U,6))_") is not appropriate for this action"
"RTN","IBCEM",26,0)
 . D PAUSE^VALM1
"RTN","IBCEM",27,0)
 ;
"RTN","IBCEM",28,0)
 S IBTYP=$P($G(^IBE(364.3,+$P(IB0,U,2),0)),U)
"RTN","IBCEM",29,0)
 S IBU=$S(IBTYP="REPORT":"MAILIT^IBCESRV2",IBTYP["837REC":"CON837^IBCESRV2",IBTYP["837REJ":"REJ837^IBCESRV2",IBTYP["835EOB":"EOB835^IBCESRV3",1:""),IBU1=$S(IBTYP["837":$E(IBTYP,$L(IBTYP)),1:2)
"RTN","IBCEM",30,0)
 I IBU="" W !,*7,"This message has an invalid message type - can't update" D PAUSE^VALM1 G UPDQ
"RTN","IBCEM",31,0)
 S IBTSK=$$TASK(IBU,$P(IB0,U,4),IBTDA,IBU1)
"RTN","IBCEM",32,0)
 I IBTSK W !,"Update has been tasked (#",IBTSK,")"
"RTN","IBCEM",33,0)
 I 'IBTSK W !,*7,"Update could not be tasked.  Please try again later!!!"
"RTN","IBCEM",34,0)
 D PAUSE^VALM1
"RTN","IBCEM",35,0)
 ;
"RTN","IBCEM",36,0)
 D BLD^IBCEM1
"RTN","IBCEM",37,0)
UPDQ I $G(IBTDA) L -^IBA(364.2,IBTDA,0)
"RTN","IBCEM",38,0)
 S VALMBCK="R"
"RTN","IBCEM",39,0)
 Q
"RTN","IBCEM",40,0)
 ;
"RTN","IBCEM",41,0)
VP ; View/Print Return Messages
"RTN","IBCEM",42,0)
 N DHD,DIC,FLDS,BY,FR,TO,DIR,Y,L,IBDA,IBTDA,IBBILLS
"RTN","IBCEM",43,0)
 D FULL^VALM1,SEL(.IBDA,1)
"RTN","IBCEM",44,0)
 S IBDA=$O(IBDA(""))
"RTN","IBCEM",45,0)
 G:'IBDA VPQ
"RTN","IBCEM",46,0)
 S IBTDA=$G(IBDA(IBDA)),IBBILLS=""
"RTN","IBCEM",47,0)
 I $P($G(^IBA(364.2,IBTDA,0)),U,4),'$P(^(0),U,5) D
"RTN","IBCEM",48,0)
 .S DIR(0)="YA",DIR("B")="NO",DIR("A")="Do you want to list all bills for this batch?: " D ^DIR K DIR
"RTN","IBCEM",49,0)
 .I Y S IBBILLS=1
"RTN","IBCEM",50,0)
 S DHD=$S(IBBILLS:"[IBCEM MESSAGE LIST HDR]",1:""),DIC="^IBA(364.2,",FLDS=$S(IBBILLS:"[IBCEM MESSAGE LIST]",1:"[CAPTIONED]"),BY="@NUMBER",(FR,TO)=$G(IBDA(IBDA)),L=0 D EN1^DIP
"RTN","IBCEM",51,0)
 D PAUSE^VALM1
"RTN","IBCEM",52,0)
VPQ S VALMBCK="R"
"RTN","IBCEM",53,0)
 Q
"RTN","IBCEM",54,0)
 ;
"RTN","IBCEM",55,0)
SEL(IBDA,ONE) ; Select entry(s) from list
"RTN","IBCEM",56,0)
 ; IBDA = array returned if selections made
"RTN","IBCEM",57,0)
 ;    IBDA(n)=ien of bill selected in file 399
"RTN","IBCEM",58,0)
 ; ONE = if set to 1, only one selection can be made at a time
"RTN","IBCEM",59,0)
 N IB
"RTN","IBCEM",60,0)
 K IBDA
"RTN","IBCEM",61,0)
 D EN^VALM2($G(XQORNOD(0)),$S('$G(ONE):"",1:"S"))
"RTN","IBCEM",62,0)
 S IBDA=0 F  S IBDA=$O(VALMY(IBDA)) Q:'IBDA  S IB=$G(^TMP("IBCEM-837DX",$J,IBDA)),IBDA(IBDA)=+$P(IB,U,2)
"RTN","IBCEM",63,0)
 Q
"RTN","IBCEM",64,0)
 ;
"RTN","IBCEM",65,0)
UPDEDI(IBDA,FUNC,NOCT) ; Update EDI files - cancel/resubmit/print as
"RTN","IBCEM",66,0)
 ;   resolution to message
"RTN","IBCEM",67,0)
 ; IBDA = transmit bill ien # for bill
"RTN","IBCEM",68,0)
 ; FUNC = "E" for edit/resubmit, "C" for cancel, "R" for resubmit not
"RTN","IBCEM",69,0)
 ;       from edit, "P" for print, "Z" for COB processed , "N" for no
"RTN","IBCEM",70,0)
 ;       further action needed-close record
"RTN","IBCEM",71,0)
 ; NOCT = 1 if not necessary to update batch count, 0 if update needed
"RTN","IBCEM",72,0)
 ;
"RTN","IBCEM",73,0)
 N IB0,IBBA,IBBDA,IBCT,IBM,IBTDA,IBNEW,DA,DIE,DR,Z,IBTEXT,IBZ,IBIFN,IBSTAT
"RTN","IBCEM",74,0)
 S IB0=$G(^IBA(364,+IBDA,0)),IBBA=$P(IB0,U,2)
"RTN","IBCEM",75,0)
 Q:IB0=""  S IBIFN=+IB0
"RTN","IBCEM",76,0)
 ;
"RTN","IBCEM",77,0)
 S IBNEW=$S(FUNC="E"!(FUNC="R"):+$P($G(^IBA(364,+$$LAST364^IBCEF4(+IB0),0)),U,2),1:"") S:IBNEW=IBBA IBNEW=""
"RTN","IBCEM",78,0)
 ;
"RTN","IBCEM",79,0)
 S IBSTAT=$P(IB0,U,3)                ; current status in file 364
"RTN","IBCEM",80,0)
 I '$F(".C.R.E.Z.","."_IBSTAT_".") D   ; don't update if in final status
"RTN","IBCEM",81,0)
 . S DR=".03////"_$S(FUNC="E":"R","NP"'[FUNC:FUNC,1:"Z")_";.04///NOW" S:FUNC="E"!(FUNC="R") DR=DR_$S(IBNEW:";.06////"_IBNEW,1:"")
"RTN","IBCEM",82,0)
 . S DA=+IBDA,DIE="^IBA(364," D ^DIE ;Update the transmit bill record
"RTN","IBCEM",83,0)
 . Q
"RTN","IBCEM",84,0)
 ;
"RTN","IBCEM",85,0)
 I IBBA D CKRES^IBCESRV2(IBBA) ;Update completely resubmitted flags
"RTN","IBCEM",86,0)
 ;
"RTN","IBCEM",87,0)
 I IBBA,(FUNC="P"!(IBNEW&'$G(NOCT))) D CTDOWN^IBCEM02(IBBA,1) ;If resubmitted in a new batch or printed, update old batch
"RTN","IBCEM",88,0)
 ;
"RTN","IBCEM",89,0)
 S IBTEXT(1)=" UPDATED BY: "_$$EXTERNAL^DILFD(361.02,.02,,+$G(DUZ))
"RTN","IBCEM",90,0)
 S IBTEXT(2)="ACTION USED: "_$S(FUNC="E":"BILL EDITED/RESUBMITTED",FUNC="C":"BILL CANCELED",FUNC="R":"BILL RESUBMITTED WITHOUT EDIT",FUNC="P":"PRINT BILL",FUNC="Z":"PROCESS COB",1:"")
"RTN","IBCEM",91,0)
 S IBTEXT(2)=$S(IBTEXT(2)="":"UNSPECIFIED",1:IBTEXT(2)_" - REVIEW MARKED AS COMPLETE")
"RTN","IBCEM",92,0)
 S IBTEXT=2
"RTN","IBCEM",93,0)
 ;
"RTN","IBCEM",94,0)
 ; Update file 361
"RTN","IBCEM",95,0)
 S IBZ=0 F  S IBZ=$O(^IBM(361,"AERR",+IBDA,IBZ)) Q:'IBZ  I $D(^IBM(361,IBZ,0)),$P(^(0),U,10)="",$P(^(0),U,9)<2 D
"RTN","IBCEM",96,0)
 . S DIE="^IBM(361,",DR=".09////2;.1////"_$TR(FUNC,"RCEIBZPN","RCROOFOO"),DA=IBZ D ^DIE
"RTN","IBCEM",97,0)
 . I FUNC'="","ECRPIBZ"[FUNC D  ; Update review status, notes for message
"RTN","IBCEM",98,0)
 .. D NOTECHG^IBCECSA2(IBZ,1,.IBTEXT)
"RTN","IBCEM",99,0)
 ;
"RTN","IBCEM",100,0)
 ; Update file 361.1 with the Cancel Status, to cancel All EOB's on file
"RTN","IBCEM",101,0)
 I FUNC="C" D STAT^IBCEMU2(IBIFN,9,0)
"RTN","IBCEM",102,0)
 ;
"RTN","IBCEM",103,0)
 Q
"RTN","IBCEM",104,0)
 ;
"RTN","IBCEM",105,0)
DEL ; Delete messages from messages list - locked with IB SUPERVISOR key
"RTN","IBCEM",106,0)
 N IBDA,IBOK,IBTDA,IBTYP,IBU,IBU1,IB0,DIR,IBT,IBE,Z,X,Y,XMSUBJ,XMTO,XMBODY,XMDUZ
"RTN","IBCEM",107,0)
 D FULL^VALM1
"RTN","IBCEM",108,0)
 S IBTDA=0
"RTN","IBCEM",109,0)
 I '$D(^XUSEC("IB SUPERVISOR",DUZ)) D  G DELQ
"RTN","IBCEM",110,0)
 . W !,"You don't have authority to use this action. See your supervisr for assistance"
"RTN","IBCEM",111,0)
 . D PAUSE^VALM1
"RTN","IBCEM",112,0)
 D SEL(.IBDA,1)
"RTN","IBCEM",113,0)
 S IBDA=$O(IBDA(""))
"RTN","IBCEM",114,0)
 I IBDA="" G DELQ
"RTN","IBCEM",115,0)
 W !
"RTN","IBCEM",116,0)
 S DIR(0)="YA",DIR("A",1)="This action will PERMANENTLY delete a return message from your system",DIR("A",2)="A bulletin will be sent to report the deletion",DIR("A",3)=" "
"RTN","IBCEM",117,0)
 S DIR("A")="ARE YOU SURE YOU WANT TO CONTINUE? ",DIR("B")="NO"
"RTN","IBCEM",118,0)
 D ^DIR K DIR
"RTN","IBCEM",119,0)
 G:Y'=1 DELQ
"RTN","IBCEM",120,0)
 S IBTDA=+IBDA(IBDA)
"RTN","IBCEM",121,0)
 I '$$LOCK(IBTDA) G DELQ
"RTN","IBCEM",122,0)
 S IB0=$G(^IBA(364.2,IBTDA,0))
"RTN","IBCEM",123,0)
 ;
"RTN","IBCEM",124,0)
 I $P(IB0,U,11) S IBOK=1 D  G:'IBOK DELQ
"RTN","IBCEM",125,0)
 . N ZTSK
"RTN","IBCEM",126,0)
 . S ZTSK=$P(IB0,U,11) D STAT^%ZTLOAD Q:ZTSK(0)=0  ;Task not scheduled
"RTN","IBCEM",127,0)
 . I "12"[ZTSK(1) W *7,!,"This message is currently scheduled for update.  Task # is: ",$P(IB0,U,11) S IBOK="" D PAUSE^VALM1
"RTN","IBCEM",128,0)
 ;
"RTN","IBCEM",129,0)
 I $P(IB0,U,6)=""!("UP"'[$P(IB0,U,6)) D  G DELQ
"RTN","IBCEM",130,0)
 . W !,*7,"Message status ("_$$EXPAND^IBTRE(364.2,.06,$P(IB0,U,6))_") is not appropriate for this action"
"RTN","IBCEM",131,0)
 . D PAUSE^VALM1
"RTN","IBCEM",132,0)
 ;
"RTN","IBCEM",133,0)
 S DIR(0)="YA",DIR("A",1)=" ",DIR("A",2)="",$P(DIR("A",2),"*",54)="",DIR("A",3)="* This message is about to be PERMANENTLY deleted!! *",DIR("A",4)=DIR("A",2),DIR("A",5)=" "
"RTN","IBCEM",134,0)
 S DIR("A")="ARE YOU STILL SURE YOU WANT TO CONTINUE? ",DIR("B")="NO"
"RTN","IBCEM",135,0)
 W ! D ^DIR W ! K DIR
"RTN","IBCEM",136,0)
 I Y'=1 W !!,"Nothing deleted" D PAUSE^VALM1 G DELQ
"RTN","IBCEM",137,0)
 ;
"RTN","IBCEM",138,0)
 K ^TMP("IBMSG",$J)
"RTN","IBCEM",139,0)
 M ^TMP("IBMSG",$J)=^IBA(364.2,IBTDA)
"RTN","IBCEM",140,0)
 D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEM",141,0)
 I $D(^IBA(364.2,IBTDA)) D  G DELQ
"RTN","IBCEM",142,0)
 . W !,"Message not deleted - problem with delete" D PAUSE^VALM1
"RTN","IBCEM",143,0)
 ;
"RTN","IBCEM",144,0)
 S IBT(1)="EDI return message #"_$P(IB0,U)_" has been deleted"
"RTN","IBCEM",145,0)
 S IBT(2)=" "
"RTN","IBCEM",146,0)
 S IBT(3)="DELETED BY: "_$P($G(^VA(200,+$G(DUZ),0)),U)_"   "_$$FMTE^XLFDT($$NOW^XLFDT,2)
"RTN","IBCEM",147,0)
 S Z=$$EXPAND^IBTRE(364.2,.06,$P(IB0,U,6)) S:Z="" Z="??"
"RTN","IBCEM",148,0)
 S IBT(4)="    STATUS: "_$E(Z_$J("",11),1,11)_"  MESSAGE TYPE: "_$P($G(^IBE(364.3,+$P(IB0,U,2),0)),U,5)
"RTN","IBCEM",149,0)
 S IBT(5)=" MESSAGE #: "_$E($P(IB0,U)_$J("",11),1,11)_"   STATUS DATE: "_$$FMTE^XLFDT($P($G(^TMP("IBMSG",$J,1)),U,3))
"RTN","IBCEM",150,0)
 S IBT(6)="   BATCH #: "_$E($P($G(^IBA(364.1,+$P(IB0,U,4),0)),U)_$J("",11),1,11)_"        BILL #: "_$$EXPAND^IBTRE(364.2,.05,$P(IB0,U,5))
"RTN","IBCEM",151,0)
 S IBT(7)=" "
"RTN","IBCEM",152,0)
 S IBT(8)="MESSAGE TEXT:",IBE=8
"RTN","IBCEM",153,0)
 S Z=0 F  S Z=$O(^TMP("IBMSG",$J,2,Z)) Q:'Z  S IBE=IBE+1,IBT(IBE)=$G(^(Z,0))
"RTN","IBCEM",154,0)
 S XMSUBJ="EDI MESSAGE DELETED",XMBODY="IBT",XMDUZ="",XMTO("I:G.IB EDI")=""
"RTN","IBCEM",155,0)
 D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCEM",156,0)
 ;
"RTN","IBCEM",157,0)
 K ^TMP("IBMSG",$J)
"RTN","IBCEM",158,0)
 ;
"RTN","IBCEM",159,0)
 W !,"A bulletin has been sent to report this deletion",!
"RTN","IBCEM",160,0)
 D PAUSE^VALM1
"RTN","IBCEM",161,0)
 ;
"RTN","IBCEM",162,0)
 D BLD^IBCEM1
"RTN","IBCEM",163,0)
DELQ L -^IBA(364.2,IBTDA,0)
"RTN","IBCEM",164,0)
 S VALMBCK="R"
"RTN","IBCEM",165,0)
 Q
"RTN","IBCEM",166,0)
 ;
"RTN","IBCEM",167,0)
TASK(IBRTN,IBBDA,IBTDA,IBTYP) ; Schedule the task to update data base from message
"RTN","IBCEM",168,0)
 ; IBRTN = routine to task
"RTN","IBCEM",169,0)
 ; IBBDA = batch # associated with the message (OPTIONAL)
"RTN","IBCEM",170,0)
 ; IBTDA = internal entry of message
"RTN","IBCEM",171,0)
 ; IBTYP = the number that is the last digit in the message type
"RTN","IBCEM",172,0)
 ;
"RTN","IBCEM",173,0)
 N ZTSK,ZTDESC,ZTIO,ZTDTH,ZTSAVE,DA,DR,DIE
"RTN","IBCEM",174,0)
 S ZTIO="",ZTDTH=$H,ZTDESC="UPDATE DATA BASE FROM EDI RETURN MESSAGE",ZTSAVE("IB*")="",ZTRTN=IBRTN
"RTN","IBCEM",175,0)
 D ^%ZTLOAD
"RTN","IBCEM",176,0)
 I $G(ZTSK),$G(^IBA(364.2,IBTDA,0)) S DIE="^IBA(364.2,",DR=".11////"_ZTSK_";.06////U",DA=IBTDA D ^DIE
"RTN","IBCEM",177,0)
 Q $G(ZTSK)
"RTN","IBCEM",178,0)
 ;
"RTN","IBCEM",179,0)
LOCK(IBTDA) ; Attempt to lock message file entry IBTDA
"RTN","IBCEM",180,0)
 ; Return 1 if successful, 0 if not able to lock
"RTN","IBCEM",181,0)
 ;
"RTN","IBCEM",182,0)
 N OK
"RTN","IBCEM",183,0)
 S OK=1
"RTN","IBCEM",184,0)
 L +^IBA(364.2,IBTDA,0):5
"RTN","IBCEM",185,0)
 I '$T D
"RTN","IBCEM",186,0)
 . I '$D(DIQUIET) W !,*7,"Another user is editing this entry ... try again later" D PAUSE^VALM1
"RTN","IBCEM",187,0)
 . S IBDA="",OK=0
"RTN","IBCEM",188,0)
 Q OK
"RTN","IBCEM",189,0)
 ;
"RTN","IBCEU1")
0^34^B42998590^B41905172
"RTN","IBCEU1",1,0)
IBCEU1 ;ALB/TMP - EDI UTILITIES FOR EOB PROCESSING ;10-FEB-99
"RTN","IBCEU1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,296,349,371**;21-MAR-94;Build 57
"RTN","IBCEU1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEU1",4,0)
 ;
"RTN","IBCEU1",5,0)
CCOB1(IBIFN,NODE,SEQ) ; Extract Claim level COB data
"RTN","IBCEU1",6,0)
 ; for a bill IBIFN
"RTN","IBCEU1",7,0)
 ; NODE = the file 361.1 node(s) to be returned, separated by commas
"RTN","IBCEU1",8,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",9,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",10,0)
 ; Returns IBXDATA(COB,n,node)  where COB = COB insurance sequence,
"RTN","IBCEU1",11,0)
 ;  n is the entry number in file 361.1 and node is the node requested
"RTN","IBCEU1",12,0)
 ;   = the requested node's data
"RTN","IBCEU1",13,0)
 ;
"RTN","IBCEU1",14,0)
 N IB,IBN,IBBILL,IBS,A,B,C
"RTN","IBCEU1",15,0)
 ;
"RTN","IBCEU1",16,0)
 K IBXDATA
"RTN","IBCEU1",17,0)
 ;
"RTN","IBCEU1",18,0)
 S:$G(NODE)="" NODE=1
"RTN","IBCEU1",19,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",20,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",21,0)
 ;
"RTN","IBCEU1",22,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",23,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",24,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",25,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",26,0)
 .. F Z=1:1:$L(NODE,",") D
"RTN","IBCEU1",27,0)
 ... S A=$P(NODE,",",Z)
"RTN","IBCEU1",28,0)
 ... Q:A=""
"RTN","IBCEU1",29,0)
 ... S IBN=$G(^IBM(361.1,C,A))
"RTN","IBCEU1",30,0)
 ... I $TR(IBN,U)'="" S IBXDATA(IBS,C,A)=IBN
"RTN","IBCEU1",31,0)
 ;
"RTN","IBCEU1",32,0)
 Q
"RTN","IBCEU1",33,0)
 ;
"RTN","IBCEU1",34,0)
CCAS1(IBIFN,SEQ) ; Extract all MEDICARE COB claim level adjustment data
"RTN","IBCEU1",35,0)
 ; for a bill IBIFN (subfile 361.11 in file 361.1)
"RTN","IBCEU1",36,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",37,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",38,0)
 ; Returns IBXDATA(COB,n)  where COB = COB insurance sequence,
"RTN","IBCEU1",39,0)
 ;       n is the entry number in file 361.1 and
"RTN","IBCEU1",40,0)
 ;       = the 0-node of the subfile entry (361.11)
"RTN","IBCEU1",41,0)
 ;    and IBXDATA(COB,n,m) where m is a sequential # and
"RTN","IBCEU1",42,0)
 ;                         = this level's 0-node
"RTN","IBCEU1",43,0)
 N IB,IBA,IBS,IB0,IB00,IBBILL,B,C,D,E
"RTN","IBCEU1",44,0)
 ;
"RTN","IBCEU1",45,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",46,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",47,0)
 ;
"RTN","IBCEU1",48,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",49,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",50,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",51,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",52,0)
 .. S (IBA,D)=0 F  S D=$O(^IBM(361.1,C,10,D)) Q:'D  S IB0=$G(^(D,0)) D
"RTN","IBCEU1",53,0)
 ... S IBXDATA(IBS,D)=IB0
"RTN","IBCEU1",54,0)
 ... S (IBA,E)=0
"RTN","IBCEU1",55,0)
 ... F  S E=$O(^IBM(361.1,C,10,D,1,E)) Q:'E  S IB00=$G(^(E,0)) D
"RTN","IBCEU1",56,0)
 .... S IBA=IBA+1
"RTN","IBCEU1",57,0)
 .... I $TR(IB00,U)'="" S IBXDATA(IBS,D,IBA)=IB00
"RTN","IBCEU1",58,0)
 ;
"RTN","IBCEU1",59,0)
 Q
"RTN","IBCEU1",60,0)
 ;
"RTN","IBCEU1",61,0)
SEQ(A) ; Translate sequence # A into corresponding letter representation
"RTN","IBCEU1",62,0)
 S A=$E("PST",A)
"RTN","IBCEU1",63,0)
 I $S(A'="":"PST"'[A,1:1) S A="P"
"RTN","IBCEU1",64,0)
 Q A
"RTN","IBCEU1",65,0)
 ;
"RTN","IBCEU1",66,0)
EOBTOT(IBIFN,IBCOBN) ; Total all EOB's for a bill's COB sequence
"RTN","IBCEU1",67,0)
 ; Function returns the total of all EOB's for a specific COB seq
"RTN","IBCEU1",68,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU1",69,0)
 ; IBCOBN = the # of the COB sequence you want EOB/MRA total for (1-3)
"RTN","IBCEU1",70,0)
 ;
"RTN","IBCEU1",71,0)
 N Z,Z0,IBTOT
"RTN","IBCEU1",72,0)
 S IBTOT=0
"RTN","IBCEU1",73,0)
 I $O(^IBM(361.1,"ABS",IBIFN,IBCOBN,0)) D
"RTN","IBCEU1",74,0)
 . ; Set up prior payment field here from MRA/EOB(s)
"RTN","IBCEU1",75,0)
 . S (IBTOT,Z)=0
"RTN","IBCEU1",76,0)
 . F  S Z=$O(^IBM(361.1,"ABS",IBIFN,IBCOBN,Z)) Q:'Z  D
"RTN","IBCEU1",77,0)
 .. ; HD64841 IB*2*371 - total up the payer paid amounts
"RTN","IBCEU1",78,0)
 .. S IBTOT=IBTOT+$P($G(^IBM(361.1,Z,1)),U,1)
"RTN","IBCEU1",79,0)
 Q IBTOT
"RTN","IBCEU1",80,0)
 ;
"RTN","IBCEU1",81,0)
 ;
"RTN","IBCEU1",82,0)
LCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the line adjustment reasons COB
"RTN","IBCEU1",83,0)
 ;  line # data for an electronic claim
"RTN","IBCEU1",84,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",85,0)
 ;                   pass by reference
"RTN","IBCEU1",86,0)
 ; COL = the column in the 837 flat file being output for LCAS record
"RTN","IBCEU1",87,0)
 N LINE,COBSEQ,RECCT,GRPCD,SEQ,RCCT,RCPC,DATA,RCREC,SEQLINE K IBXDATA
"RTN","IBCEU1",88,0)
 S (LINE,RECCT)=0
"RTN","IBCEU1",89,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",90,0)
 S RCREC=$S(COL'<4:COL-1\3,1:0)
"RTN","IBCEU1",91,0)
 ;S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",92,0)
 F  S LINE=$O(IBXSAVE("LCOB",LINE)) Q:'LINE  D
"RTN","IBCEU1",93,0)
 . S COBSEQ=0
"RTN","IBCEU1",94,0)
 . F  S COBSEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ)) Q:'COBSEQ  S SEQLINE=0 F  S SEQLINE=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE)) Q:'SEQLINE  S GRPCD="" F  S GRPCD=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD)) Q:GRPCD=""  D
"RTN","IBCEU1",95,0)
 .. S RECCT=RECCT+1
"RTN","IBCEU1",96,0)
 .. I COL=2 S IBXDATA(RECCT)=LINE,DATA=LINE D:RECCT>1 ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",97,0)
 .. I COL=3 S IBXDATA(RECCT)=$TR(GRPCD," ")
"RTN","IBCEU1",98,0)
 .. S (SEQ,RCCT)=0
"RTN","IBCEU1",99,0)
 .. F  S SEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U)'="" D
"RTN","IBCEU1",100,0)
 ... S RCCT=RCCT+1
"RTN","IBCEU1",101,0)
 ... Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",102,0)
 ... S DATA=$S(COL=2:LINE,COL=3:$TR(GRPCD," "),1:$P($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U,RCPC))
"RTN","IBCEU1",103,0)
 ... I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",104,0)
 ... I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"LCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",105,0)
 Q
"RTN","IBCEU1",106,0)
 ;
"RTN","IBCEU1",107,0)
CCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the claim adjustment reasons COB
"RTN","IBCEU1",108,0)
 ;  data for an electronic claim
"RTN","IBCEU1",109,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",110,0)
 ;                   pass by reference
"RTN","IBCEU1",111,0)
 ; COL = the column in the 837 flat file being output for CCAS record
"RTN","IBCEU1",112,0)
 N COBSEQ,RECCT,GRPSEQ,SEQ,RCPC,RCCT,RCREC,DATA K IBXDATA
"RTN","IBCEU1",113,0)
 S RECCT=0
"RTN","IBCEU1",114,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",115,0)
 S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",116,0)
 S COBSEQ=0
"RTN","IBCEU1",117,0)
 F  S COBSEQ=$O(IBXSAVE("CCAS",COBSEQ)) Q:'COBSEQ  S GRPSEQ="" F  S GRPSEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ)) Q:GRPSEQ=""  D
"RTN","IBCEU1",118,0)
 . S RECCT=RECCT+1
"RTN","IBCEU1",119,0)
 . I COL=2 S IBXDATA(RECCT)=COBSEQ D:RECCT>1 ID^IBCEF2(RECCT,"CCAS")
"RTN","IBCEU1",120,0)
 . I COL=3 S IBXDATA(RECCT)=$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U)
"RTN","IBCEU1",121,0)
 . S (SEQ,RCCT)=0
"RTN","IBCEU1",122,0)
 . F  S SEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U)'="" D
"RTN","IBCEU1",123,0)
 .. S RCCT=RCCT+1
"RTN","IBCEU1",124,0)
 .. Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",125,0)
 .. S DATA=$S(COL=2:COBSEQ,COL=3:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U),1:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U,RCPC))
"RTN","IBCEU1",126,0)
 .. I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",127,0)
 .. I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"CCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",128,0)
 Q
"RTN","IBCEU1",129,0)
 ;
"RTN","IBCEU1",130,0)
COBOUT(IBXSAVE,IBXDATA,CL) ; build LCOB segment data
"RTN","IBCEU1",131,0)
 ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
"RTN","IBCEU1",132,0)
 ; This is basically the 361.115, but all the piece numbers here in this
"RTN","IBCEU1",133,0)
 ; local array are one higher than the pieces in subfile 361.115.
"RTN","IBCEU1",134,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",135,0)
 S (N,Z,P)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",136,0)
 . S N=N+1
"RTN","IBCEU1",137,0)
 . S M=$O(IBXSAVE("LCOB",Z,"COB",""),-1) Q:'M
"RTN","IBCEU1",138,0)
 . S P=$O(IBXSAVE("LCOB",Z,"COB",M,""),-1) Q:'P
"RTN","IBCEU1",139,0)
 . S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",140,0)
 . S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",141,0)
 . Q
"RTN","IBCEU1",142,0)
 Q
"RTN","IBCEU1",143,0)
 ;
"RTN","IBCEU1",144,0)
COBPYRID(IBXIEN,IBXSAVE,IBXDATA) ; cob insurance company payer id
"RTN","IBCEU1",145,0)
 N CT,N,NUM
"RTN","IBCEU1",146,0)
 K IBXDATA
"RTN","IBCEU1",147,0)
 I '$D(IBXSAVE("LCOB")) G COBPYRX
"RTN","IBCEU1",148,0)
 D ALLPAYID^IBCEF2(IBXIEN,.NUM,1)
"RTN","IBCEU1",149,0)
 S NUM=$G(NUM(1))
"RTN","IBCEU1",150,0)
 S NUM=$E(NUM_$J("",5),1,5)
"RTN","IBCEU1",151,0)
 S (CT,N)=0
"RTN","IBCEU1",152,0)
 F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  S CT=CT+1,IBXDATA(CT)=NUM
"RTN","IBCEU1",153,0)
COBPYRX ;
"RTN","IBCEU1",154,0)
 Q
"RTN","IBCEU1",155,0)
 ;
"RTN","IBCEU1",156,0)
EOBELIG(IBEOB) ; EOB eligibility for secondary claim
"RTN","IBCEU1",157,0)
 ; Function to decide if EOB entry in file 361.1 (ien=IBEOB) is
"RTN","IBCEU1",158,0)
 ; eligible to be included for secondary claim creation process
"RTN","IBCEU1",159,0)
 ; The EOB is not eligible if the review status is not 3, or if there
"RTN","IBCEU1",160,0)
 ; is no insurance sequence indicator, or if the EOB has been DENIED
"RTN","IBCEU1",161,0)
 ; and the patient responsibility for that EOB is $0 and that EOB is
"RTN","IBCEU1",162,0)
 ; not a split EOB.  Split EOB's need to be included (IB*2*371).
"RTN","IBCEU1",163,0)
 ;
"RTN","IBCEU1",164,0)
 NEW ELIG,IBDATA,PTRESP
"RTN","IBCEU1",165,0)
 S ELIG=0
"RTN","IBCEU1",166,0)
 I '$G(IBEOB) G EOBELIGX
"RTN","IBCEU1",167,0)
 S IBDATA=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEU1",168,0)
 I $P(IBDATA,U,4)'=1 G EOBELIGX      ; Only MRA EOB's for now
"RTN","IBCEU1",169,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) G EOBELIGX     ; filing error
"RTN","IBCEU1",170,0)
 I $P(IBDATA,U,16)'=3 G EOBELIGX     ; review status - accepted-complete
"RTN","IBCEU1",171,0)
 I '$P(IBDATA,U,15) G EOBELIGX       ; insurance sequence must exist
"RTN","IBCEU1",172,0)
 S PTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)     ; Pt Resp Amount for 1500s
"RTN","IBCEU1",173,0)
 I $$FT^IBCEF(+IBDATA)=3 S PTRESP=$$PTRESPI^IBCECOB1(IBEOB)  ; for UBs
"RTN","IBCEU1",174,0)
 I PTRESP'>0,$P(IBDATA,U,13)=2,'$$SPLIT^IBCEMU1(IBEOB) G EOBELIGX     ; Denied & No Pt. Resp. & not a split MRA
"RTN","IBCEU1",175,0)
 ;
"RTN","IBCEU1",176,0)
 S ELIG=1
"RTN","IBCEU1",177,0)
EOBELIGX ;
"RTN","IBCEU1",178,0)
 Q ELIG
"RTN","IBCEU1",179,0)
 ;
"RTN","IBCEU1",180,0)
EOBCNT(IBIFN) ; This function counts up the number of EOBs that are eligible
"RTN","IBCEU1",181,0)
 ; for the secondary claim creation process for a given bill#.
"RTN","IBCEU1",182,0)
 NEW CNT,IEN
"RTN","IBCEU1",183,0)
 S (CNT,IEN)=0
"RTN","IBCEU1",184,0)
 F  S IEN=$O(^IBM(361.1,"B",+$G(IBIFN),IEN)) Q:'IEN  D
"RTN","IBCEU1",185,0)
 . I $$EOBELIG(IEN) S CNT=CNT+1
"RTN","IBCEU1",186,0)
 . Q
"RTN","IBCEU1",187,0)
EOBCNTX ;
"RTN","IBCEU1",188,0)
 Q CNT
"RTN","IBCEU1",189,0)
 ;
"RTN","IBCEU3")
0^8^B61357507^B63577235
"RTN","IBCEU3",1,0)
IBCEU3 ;ALB/TMP - EDI UTILITIES FOR 1500 CLAIM FORM ;12/29/05 9:58am
"RTN","IBCEU3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,323,348,371**;21-MAR-94;Build 57
"RTN","IBCEU3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEU3",4,0)
 ;
"RTN","IBCEU3",5,0)
BOX19(IBIFN) ; Returns the text that should print in box 19 of the CMS-1500
"RTN","IBCEU3",6,0)
 ;   for bill ien IBIFN
"RTN","IBCEU3",7,0)
 ; Data is derived from a combo of data throughout
"RTN","IBCEU3",8,0)
 ; the system and is limited to 80 characters.  The hierarchy for
"RTN","IBCEU3",9,0)
 ; including data is as follows (until 80 characters have been used):
"RTN","IBCEU3",10,0)
 ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
"RTN","IBCEU3",11,0)
 ;                      specialty codes = 025,065,073,067,048
"RTN","IBCEU3",12,0)
 ;   LAST X-RAY DATE (chiropractic) specialty code = 35
"RTN","IBCEU3",13,0)
 ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
"RTN","IBCEU3",14,0)
 ;                        a specimen from a homebound patient)
"RTN","IBCEU3",15,0)
 ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
"RTN","IBCEU3",16,0)
 ;   Hearing aid testing (if applicable)
"RTN","IBCEU3",17,0)
 ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
"RTN","IBCEU3",18,0)
 ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
"RTN","IBCEU3",19,0)
 ;                   lung volume reduction surgery study is set
"RTN","IBCEU3",20,0)
 ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
"RTN","IBCEU3",21,0)
 ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
"RTN","IBCEU3",22,0)
 ;     DETAIL
"RTN","IBCEU3",23,0)
 ;
"RTN","IBCEU3",24,0)
 N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM
"RTN","IBCEU3",25,0)
 S IB19="",IBGO=1
"RTN","IBCEU3",26,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEU3",27,0)
 I $D(IBXSAVE(IBSUB)) N IBXSAVE
"RTN","IBCEU3",28,0)
 S IBPRT=(IBSUB["24")
"RTN","IBCEU3",29,0)
 ;
"RTN","IBCEU3",30,0)
 S IBSPEC=$$BILLSPEC(IBIFN)
"RTN","IBCEU3",31,0)
 G:'IBPRT NPRT
"RTN","IBCEU3",32,0)
 ; Check for chiropractic services
"RTN","IBCEU3",33,0)
 I $P($G(^DGCR(399,IBIFN,"U3")),U,5)'="" S:$P($G(^DGCR(399,IBIFN,"U3")),U,4)'="" IBGO=$$LENOK("Last X-ray: "_$TR($$DATE^IBCF2($P(^DGCR(399,IBIFN,"U3"),U,4))," ","/"),.IB19)
"RTN","IBCEU3",34,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",35,0)
 ;
"RTN","IBCEU3",36,0)
 I "^25^65^73^67^48^"[(U_IBSPEC_U) D
"RTN","IBCEU3",37,0)
 . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
"RTN","IBCEU3",38,0)
 . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB19)
"RTN","IBCEU3",39,0)
 .. ; Only print if specialty is OT or PT or proc for routine foot care
"RTN","IBCEU3",40,0)
 .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
"RTN","IBCEU3",41,0)
 ;
"RTN","IBCEU3",42,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",43,0)
 K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
"RTN","IBCEU3",44,0)
 I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
"RTN","IBCEU3",45,0)
 ;
"RTN","IBCEU3",46,0)
 K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
"RTN","IBCEU3",47,0)
 I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
"RTN","IBCEU3",48,0)
 ;
"RTN","IBCEU3",49,0)
 I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
"RTN","IBCEU3",50,0)
 ;
"RTN","IBCEU3",51,0)
 S (IBHAID,IBHOSP,IBXRAY)=0
"RTN","IBCEU3",52,0)
 ;
"RTN","IBCEU3",53,0)
 S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
"RTN","IBCEU3",54,0)
 . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" Units:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
"RTN","IBCEU3",55,0)
 . ;
"RTN","IBCEU3",56,0)
 . Q:'IBGO
"RTN","IBCEU3",57,0)
 . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
"RTN","IBCEU3",58,0)
 .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
"RTN","IBCEU3",59,0)
 . ;
"RTN","IBCEU3",60,0)
 . Q:'IBGO
"RTN","IBCEU3",61,0)
 . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19) Q
"RTN","IBCEU3",62,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",63,0)
 K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
"RTN","IBCEU3",64,0)
 I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
"RTN","IBCEU3",65,0)
 ;
"RTN","IBCEU3",66,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",67,0)
NPRT K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
"RTN","IBCEU3",68,0)
 S IBREM=0
"RTN","IBCEU3",69,0)
 I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
"RTN","IBCEU3",70,0)
 K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
"RTN","IBCEU3",71,0)
 I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
"RTN","IBCEU3",72,0)
 ;
"RTN","IBCEU3",73,0)
BOX19Q Q IB19
"RTN","IBCEU3",74,0)
 ;
"RTN","IBCEU3",75,0)
LENOK(IBDATA,IB19) ; Add text IBDATA to box 19 string (IB19 passed by ref)
"RTN","IBCEU3",76,0)
 ; Check length of box 19 data - truncate at 96 (max length)
"RTN","IBCEU3",77,0)
 ; Returns 0 if max length reached or exceeded, otherwise, 1
"RTN","IBCEU3",78,0)
 N OK
"RTN","IBCEU3",79,0)
 S OK=1
"RTN","IBCEU3",80,0)
 S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
"RTN","IBCEU3",81,0)
 I $L(IB19)'<96 S OK=0,IB19=$E(IB19,1,96) G LENOKQ
"RTN","IBCEU3",82,0)
LENOKQ Q OK
"RTN","IBCEU3",83,0)
 ;
"RTN","IBCEU3",84,0)
ASK19(IBIFN) ; Ask to display CMS-1500 box 19 data for current IBIFN
"RTN","IBCEU3",85,0)
 N DIR,DIC,X,Y,DIE,DR,Z
"RTN","IBCEU3",86,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL CMS-1500 BOX 19?: "
"RTN","IBCEU3",87,0)
 D ^DIR
"RTN","IBCEU3",88,0)
 I Y=1 S Z=$$BOX19(IBIFN) W !!,?4,"19",?20,$E(Z,1,32) W:$L(Z)>32 !,?4,$E(Z,33,80),!
"RTN","IBCEU3",89,0)
 Q
"RTN","IBCEU3",90,0)
 ;
"RTN","IBCEU3",91,0)
ONLAB(IBIFN) ; Functions returns 1 if the bill IBIFN is outside non-lab
"RTN","IBCEU3",92,0)
 N IBP,IBPUR
"RTN","IBCEU3",93,0)
 S IBP=0
"RTN","IBCEU3",94,0)
 S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU3",95,0)
 I IBPUR,"13"[IBPUR S IBP=1
"RTN","IBCEU3",96,0)
 Q IBP
"RTN","IBCEU3",97,0)
 ;
"RTN","IBCEU3",98,0)
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) ; Format the text line of box 24 by fld
"RTN","IBCEU3",99,0)
 ; INPUT:
"RTN","IBCEU3",100,0)
 ;   FLD = the letter of the field in box 24 (A-J)
"RTN","IBCEU3",101,0)
 ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
"RTN","IBCEU3",102,0)
 ;   IBSUB = the subscript of the IBXSAVE array to use.
"RTN","IBCEU3",103,0)
 ;           If null, use "BOX24"
"RTN","IBCEU3",104,0)
 ; OUTPUT:
"RTN","IBCEU3",105,0)
 ;   IBXDATA = passed by reference, set to the correct part of the
"RTN","IBCEU3",106,0)
 ;             text that will print in the field's positions
"RTN","IBCEU3",107,0)
 ;
"RTN","IBCEU3",108,0)
 ; esg - 8/14/06 - modified for the new cms-1500 form - IB*2*348
"RTN","IBCEU3",109,0)
 ;
"RTN","IBCEU3",110,0)
 N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ,IBREN,IBRENQ,IBRENNPI,IBRENSID
"RTN","IBCEU3",111,0)
 K IBXDATA
"RTN","IBCEU3",112,0)
 S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
"RTN","IBCEU3",113,0)
 ;
"RTN","IBCEU3",114,0)
 I FLD="I"!(FLD="J") D   ; extract the Rendering provider data
"RTN","IBCEU3",115,0)
 . I '$G(IBXIEN) Q       ; assume that the claim# exists
"RTN","IBCEU3",116,0)
 . S IBREN=$$CFIDS^IBCEF77(IBXIEN)
"RTN","IBCEU3",117,0)
 . S IBRENQ=$P(IBREN,U,1)    ; qual
"RTN","IBCEU3",118,0)
 . S IBRENSID=$P(IBREN,U,2)  ; id
"RTN","IBCEU3",119,0)
 . S IBRENNPI=$P(IBREN,U,3)  ; npi
"RTN","IBCEU3",120,0)
 . Q
"RTN","IBCEU3",121,0)
 ;
"RTN","IBCEU3",122,0)
 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
"RTN","IBCEU3",123,0)
 . S IBDAT=$G(IBXSAVE(IBSUB,Z))
"RTN","IBCEU3",124,0)
 . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
"RTN","IBCEU3",125,0)
 . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
"RTN","IBCEU3",126,0)
 . S IBZ=$P(IBAUX,U,9)
"RTN","IBCEU3",127,0)
 . I IBZ="" S IBZ="  "
"RTN","IBCEU3",128,0)
 . S IBTEXT=IBZ_IBTEXT
"RTN","IBCEU3",129,0)
 . ;
"RTN","IBCEU3",130,0)
 . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S IBTEXT=""
"RTN","IBCEU3",131,0)
 . ;
"RTN","IBCEU3",132,0)
 . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9 D   ; From date of service
"RTN","IBCEU3",133,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",134,0)
 .. Q
"RTN","IBCEU3",135,0)
 . ;
"RTN","IBCEU3",136,0)
 . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18 D    ; To date of service
"RTN","IBCEU3",137,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",138,0)
 .. Q
"RTN","IBCEU3",139,0)
 . ;
"RTN","IBCEU3",140,0)
 . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21   ; place of service
"RTN","IBCEU3",141,0)
 . I FLD="C" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=22,IBE=24   ; emergency indicator
"RTN","IBCEU3",142,0)
 . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=44 D   ; procedures and modifiers
"RTN","IBCEU3",143,0)
 .. N M S M=$$MODLST^IBEFUNC($P(IBDAT,U,10))       ; modifier list
"RTN","IBCEU3",144,0)
 .. S IBVAL=$$FO^IBCNEUT1(IBVAL,6)_"  "            ; procedure code
"RTN","IBCEU3",145,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",1),3)     ; mod#1
"RTN","IBCEU3",146,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",2),3)     ; mod#2
"RTN","IBCEU3",147,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",3),3)     ; mod#3
"RTN","IBCEU3",148,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",4),3)     ; mod#4
"RTN","IBCEU3",149,0)
 .. Q
"RTN","IBCEU3",150,0)
 . ;
"RTN","IBCEU3",151,0)
 . I FLD="E" S IBVAL=$TR($P(IBDAT,U,7),","),IBS=45,IBE=48  ; diagnosis pointer
"RTN","IBCEU3",152,0)
 . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=57 D
"RTN","IBCEU3",153,0)
 .. ; total charges
"RTN","IBCEU3",154,0)
 .. S IBVAL=$$DOL^IBCEF77(IBVAL,9)
"RTN","IBCEU3",155,0)
 .. Q
"RTN","IBCEU3",156,0)
 . ;
"RTN","IBCEU3",157,0)
 . I FLD="G" S IBVAL=$S($P(IBDAT,U,12):$P(IBDAT,U,12),1:$P(IBDAT,U,9)),IBS=58,IBE=61 D
"RTN","IBCEU3",158,0)
 .. ; days or units or anesthesia minutes
"RTN","IBCEU3",159,0)
 .. S IBVAL=$J(+IBVAL,4)
"RTN","IBCEU3",160,0)
 .. Q
"RTN","IBCEU3",161,0)
 . ;
"RTN","IBCEU3",162,0)
 . ; columns H,I,J don't have any free text supplemental information
"RTN","IBCEU3",163,0)
 . ;
"RTN","IBCEU3",164,0)
 . I FLD="H" D     ; epsdt family plan
"RTN","IBCEU3",165,0)
 .. S IBVAL=$P(IBAUX,U,7),IBS=0,IBE=0,IBTEXT=""   ; line 1 blank
"RTN","IBCEU3",166,0)
 .. I IBVAL S IBVAL="Y"
"RTN","IBCEU3",167,0)
 .. Q
"RTN","IBCEU3",168,0)
 . I FLD="I" D     ; ID qualifier for rendering provider
"RTN","IBCEU3",169,0)
 .. S IBVAL="",IBS=1,IBE=2   ; line 2 blank
"RTN","IBCEU3",170,0)
 .. S IBTEXT=$G(IBRENQ)      ; qualifier on line 1
"RTN","IBCEU3",171,0)
 .. Q
"RTN","IBCEU3",172,0)
 . I FLD="J" D     ; rendering provider ID and NPI
"RTN","IBCEU3",173,0)
 .. S IBTEXT=$G(IBRENSID),IBS=1,IBE=11   ; secondary ID line 1
"RTN","IBCEU3",174,0)
 .. S IBVAL=$G(IBRENNPI)                 ; NPI# line 2
"RTN","IBCEU3",175,0)
 .. Q
"RTN","IBCEU3",176,0)
 . ;
"RTN","IBCEU3",177,0)
 . S IBLINE=IBLINE+1                      ; top line
"RTN","IBCEU3",178,0)
 . S IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE)   ; text in shaded area (top)
"RTN","IBCEU3",179,0)
 . S IBLINE=IBLINE+1             ; bottom line
"RTN","IBCEU3",180,0)
 . S IBXDATA(IBLINE)=IBVAL       ; field value in unshaded area (bottom)
"RTN","IBCEU3",181,0)
 . Q
"RTN","IBCEU3",182,0)
 ;
"RTN","IBCEU3",183,0)
 Q
"RTN","IBCEU3",184,0)
 ;
"RTN","IBCEU3",185,0)
BILLSPEC(IBIFN,IBPRV) ;  Returns the specialty of the provider on bill IBIFN
"RTN","IBCEU3",186,0)
 ; If IBPRV is supplied, returns the data for that provider, otherwise,
"RTN","IBCEU3",187,0)
 ;  returns the specialty of the 'main/required' provider on the bill.
"RTN","IBCEU3",188,0)
 ;  Default = 99 if no valid code found
"RTN","IBCEU3",189,0)
 ; IBPRV = vp of provider (file 200 or 355.93)
"RTN","IBCEU3",190,0)
 N Z,IBSPEC,IBINS,IBDT
"RTN","IBCEU3",191,0)
 S IBSPEC="",IBPRV=$G(IBPRV)
"RTN","IBCEU3",192,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",193,0)
 ;
"RTN","IBCEU3",194,0)
 I $G(IBPRV) D  G SPECQ
"RTN","IBCEU3",195,0)
 . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
"RTN","IBCEU3",196,0)
 ;
"RTN","IBCEU3",197,0)
 ;Get rendering for professional, attending for institutional,
"RTN","IBCEU3",198,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",199,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",200,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",201,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",202,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
"RTN","IBCEU3",203,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",204,0)
 . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
"RTN","IBCEU3",205,0)
 ;
"RTN","IBCEU3",206,0)
SPECQ I IBSPEC="" S IBSPEC="99"
"RTN","IBCEU3",207,0)
 Q IBSPEC
"RTN","IBCEU3",208,0)
 ;
"RTN","IBCEU3",209,0)
CHAMPVA(IBIFN) ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
"RTN","IBCEU3",210,0)
 Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
"RTN","IBCEU3",211,0)
 ;
"RTN","IBCEU3",212,0)
FAC(IBIFN) ; Is facility always to print in box 32 for bill ien IBIFN?
"RTN","IBCEU3",213,0)
 ;  Returns 1 if yes, 0 if no
"RTN","IBCEU3",214,0)
 Q $S($P($G(^DGCR(399,IBIFN,"UF2")),U,2):1,1:$P($G(^IBE(350.9,1,2)),U,12))
"RTN","IBCEU3",215,0)
 ;
"RTN","IBCEU3",216,0)
MCR24K(IBIFN) ;Function returns MEDICARE id# for professional (CMS-1500) box 24k for bill IBIFN if appropriate
"RTN","IBCEU3",217,0)
 Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1)_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCEU6")
0^35^B10687368^B9821242
"RTN","IBCEU6",1,0)
IBCEU6 ;ALB/ESG - EDI UTILITIES FOR EOB PROCESSING ;29-JUL-2003
"RTN","IBCEU6",2,0)
 ;;2.0;INTEGRATED BILLING;**155,371**;21-MAR-94;Build 57
"RTN","IBCEU6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEU6",4,0)
 Q
"RTN","IBCEU6",5,0)
 ;
"RTN","IBCEU6",6,0)
COBLINE(IBIFN,IBI,IBXDATA,SORT,IBXTRA) ; Extract all COB data for line item
"RTN","IBCEU6",7,0)
 ;  from file 361.1 (EOB), subfile 15 into IBXDATA(IBI,"COB",n)
"RTN","IBCEU6",8,0)
 ;
"RTN","IBCEU6",9,0)
 ; IBIFN = bill entry #
"RTN","IBCEU6",10,0)
 ; IBI = VistA outbound line item #
"RTN","IBCEU6",11,0)
 ; IBXDATA = array returned with COB line item data/pass by reference
"RTN","IBCEU6",12,0)
 ; SORT = flag that determines whether the data should be sorted for
"RTN","IBCEU6",13,0)
 ;        output for the 837 record ('PR' group always there and has
"RTN","IBCEU6",14,0)
 ;        a reason code for deductible first and co-insurance second -
"RTN","IBCEU6",15,0)
 ;        even if they are 0).
"RTN","IBCEU6",16,0)
 ;        1 = sort, 0 = no sort needed
"RTN","IBCEU6",17,0)
 ;
"RTN","IBCEU6",18,0)
 ;   Returns IBXDATA(IBI,"COB",COB,n) with COB data for each line item
"RTN","IBCEU6",19,0)
 ;      found in an accepted EOB for the bill and = the '0' node data of
"RTN","IBCEU6",20,0)
 ;      file 361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEU6",21,0)
 ;         -- AND --
"RTN","IBCEU6",22,0)
 ;    IBXDATA(IBI,"COB",COB,n,z,p)=
"RTN","IBCEU6",23,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEU6",24,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEU6",25,0)
 ;               z = this is either piece 1 of the 0-node for subfile
"RTN","IBCEU6",26,0)
 ;                   361.1151 (ADJUSTMENTS)
"RTN","IBCEU6",27,0)
 ;                          OR
"RTN","IBCEU6",28,0)
 ;                   for the 837 COB 'sorted' output, this will be ' PR'
"RTN","IBCEU6",29,0)
 ;                    for the forced/extracted entries for deductible
"RTN","IBCEU6",30,0)
 ;                    and co-insurance so they are always output first
"RTN","IBCEU6",31,0)
 ;                    The space needs to be stripped off on output
"RTN","IBCEU6",32,0)
 ;         -- AND --
"RTN","IBCEU6",33,0)
 ; IBXTRA = array returned if passed by reference if line is found
"RTN","IBCEU6",34,0)
 ;          associated with line IBI due to bundling/unbundling
"RTN","IBCEU6",35,0)
 ;          IBXTRA("ALL",x,paid procedure)=COB SEQ ^ seq # corresponding
"RTN","IBCEU6",36,0)
 ;                        to subscript n in IBXDATA(,"COB",COB,n
"RTN","IBCEU6",37,0)
 ;                (x = line #-original proc-service dt)
"RTN","IBCEU6",38,0)
 ;
"RTN","IBCEU6",39,0)
 N A,B,B1,C,D,IBDATA,IB0,IB00,IBA,IBB,IBDED,IBCOI,IBS,IBN,IBDT
"RTN","IBCEU6",40,0)
 ;
"RTN","IBCEU6",41,0)
 ; If multiple EOB's reference this line for the same COB sequence,
"RTN","IBCEU6",42,0)
 ;   extract only the last one marked accepted containing this line item.
"RTN","IBCEU6",43,0)
 ;
"RTN","IBCEU6",44,0)
 S A=0
"RTN","IBCEU6",45,0)
 F  S A=$O(^IBM(361.1,"B",IBIFN,A)) Q:'A  D
"RTN","IBCEU6",46,0)
 . I '$$EOBELIG^IBCEU1(A) Q   ; eob not eligible for secondary claim
"RTN","IBCEU6",47,0)
 . I '$D(^IBM(361.1,A,15,"AC",IBI)) Q   ; this EOB does not reference VistA line# IBI
"RTN","IBCEU6",48,0)
 . S IBA=0
"RTN","IBCEU6",49,0)
 . S IBDATA=$G(^IBM(361.1,A,0))
"RTN","IBCEU6",50,0)
 . S IBS=$P(IBDATA,U,15)      ; insurance sequence#
"RTN","IBCEU6",51,0)
 . S IBN=+$O(IBXDATA(IBI,"COB",IBS,0))
"RTN","IBCEU6",52,0)
 . I IBN D  Q:IBN  ; check for later EOB
"RTN","IBCEU6",53,0)
 .. I $G(IBDT(IBI,IBS)),IBDT(IBI,IBS)<$P(IBDATA,U,6) K IBDT(IBI,IBS),IBXDATA(IBI,"COB",IBS) S IBN=0
"RTN","IBCEU6",54,0)
 . ;
"RTN","IBCEU6",55,0)
 . S IBDT(IBI,IBS)=$P(IBDATA,U,6)
"RTN","IBCEU6",56,0)
 . S B=0
"RTN","IBCEU6",57,0)
 . F  S B=$O(^IBM(361.1,A,15,"AC",IBI,B)) Q:'B  S IB0=$G(^IBM(361.1,A,15,B,0)),IB0=IB0_U_IBDT(IBI,IBS) D
"RTN","IBCEU6",58,0)
 .. Q:$TR(IB0,U)=""
"RTN","IBCEU6",59,0)
 .. S IBA=IBA+1,IBXDATA(IBI,"COB",IBS,IBA)=IBI_U_IB0
"RTN","IBCEU6",60,0)
 .. ;
"RTN","IBCEU6",61,0)
 .. ; capture the modifiers (361.1152)
"RTN","IBCEU6",62,0)
 .. I $D(^IBM(361.1,A,15,B,2)) M IBXDATA(IBI,"COBMOD")=^IBM(361.1,A,15,B,2)
"RTN","IBCEU6",63,0)
 .. I $P(IB0,U,15)'="" D  ;Line involved in bundling/unbundling
"RTN","IBCEU6",64,0)
 ... N Z0 S Z0=IBI_"-"_$P(IB0,U,15)_"-"_$P(IB0,U,16)
"RTN","IBCEU6",65,0)
 ... S IBXTRA("ALL",Z0,$P(IB0,U,4))=IBS_U_IBA,$P(IBXDATA(IBI,"COB",IBS,IBA),U)=""
"RTN","IBCEU6",66,0)
 .. S C=0,(IBDED(IBA),IBCOI(IBA))="0^0" ;Assume 0 if not found in list
"RTN","IBCEU6",67,0)
 .. F  S C=$O(^IBM(361.1,A,15,B,1,C)) Q:'C  S IB0=$G(^(C,0)) D
"RTN","IBCEU6",68,0)
 ... S D=0
"RTN","IBCEU6",69,0)
 ... F  S D=$O(^IBM(361.1,A,15,B,1,C,1,D)) Q:'D  S IB00=$S($G(SORT):$P($G(^(D,0)),U,1,3),1:$G(^(D,0))) D
"RTN","IBCEU6",70,0)
 .... I $G(SORT),$P(IB0,U)="PR" D  ;Check for deductible or co-ins
"RTN","IBCEU6",71,0)
 ..... I 'IBDED(IBA),$P(IB00,U)=1 S IBDED(IBA)=IB00,IB00="" Q
"RTN","IBCEU6",72,0)
 ..... I 'IBCOI(IBA),$P(IB00,U)=2 S IBCOI(IBA)=IB00,IB00="" Q
"RTN","IBCEU6",73,0)
 .... I $TR(IB00,U)'="" S IBB=$O(IBXDATA(IBI,"COB",IBS,IBA,$P(IB0,U),""),-1)+1,IBXDATA(IBI,"COB",IBS,IBA,$P(IB0,U),IBB)=IB00
"RTN","IBCEU6",74,0)
 .. Q:'$G(SORT)
"RTN","IBCEU6",75,0)
 .. S IBXDATA(IBI,"COB",IBS,IBA," PR",1)=IBDED(IBA)
"RTN","IBCEU6",76,0)
 .. S IBXDATA(IBI,"COB",IBS,IBA," PR",2)=IBCOI(IBA)
"RTN","IBCEU6",77,0)
 Q
"RTN","IBCEU6",78,0)
 ;
"RTN","IBCNBCD")
0^40^B35866486^B35493538
"RTN","IBCNBCD",1,0)
IBCNBCD ;ALB/ARH-Ins Buffer: display/compare buffer and existing ins ;1 Jun 97
"RTN","IBCNBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**82,251,361,371**;21-MAR-94;Build 57
"RTN","IBCNBCD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBCD",4,0)
 ;
"RTN","IBCNBCD",5,0)
INS(IBBUFDA,IBINSDA) ; display a buffer entry's insurance company fields and
"RTN","IBCNBCD",6,0)
 ; an existing insurance company's fields for comparison
"RTN","IBCNBCD",7,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",8,0)
 ;
"RTN","IBCNBCD",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBCD",10,0)
 ;
"RTN","IBCNBCD",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBCD",12,0)
 ;
"RTN","IBCNBCD",13,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBCD",14,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",16,0)
 ;
"RTN","IBCNBCD",17,0)
 D DISPLAY(20.02,36,.131,"Phone Number:")
"RTN","IBCNBCD",18,0)
 D DISPLAY(20.03,36,.132,"Billing Phone:")
"RTN","IBCNBCD",19,0)
 D DISPLAY(20.04,36,.133,"Pre-Cert Phone:")
"RTN","IBCNBCD",20,0)
 D DISPLAY(21.01,36,.111,"Street [Line 1]:")
"RTN","IBCNBCD",21,0)
 D DISPLAY(21.02,36,.112,"Street [Line 2]:")
"RTN","IBCNBCD",22,0)
 D DISPLAY(21.03,36,.113,"Street [Line 3]:")
"RTN","IBCNBCD",23,0)
 D DISPLAY(21.04,36,.114,"City:")
"RTN","IBCNBCD",24,0)
 D DISPLAY(21.05,36,.115,"State:")
"RTN","IBCNBCD",25,0)
 D DISPLAY(21.06,36,.116,"Zip Code:")
"RTN","IBCNBCD",26,0)
 ;
"RTN","IBCNBCD",27,0)
 S IBFLD1="(bold=accepted on Merge)",IBFLD2="(bold=replaced on Overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",28,0)
 Q
"RTN","IBCNBCD",29,0)
 ;
"RTN","IBCNBCD",30,0)
GRP(IBBUFDA,IBGRPDA) ; display a buffer entry's group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBCD",31,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",32,0)
 ;
"RTN","IBCNBCD",33,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBCD",34,0)
 ;
"RTN","IBCNBCD",35,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBCD",36,0)
 ;
"RTN","IBCNBCD",37,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBCD",38,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",39,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",40,0)
 ;
"RTN","IBCNBCD",41,0)
 D DISPLAY(40.02,355.3,.03,"Group Name:")
"RTN","IBCNBCD",42,0)
 D DISPLAY(40.03,355.3,.04,"Group Number:")
"RTN","IBCNBCD",43,0)
 D DISPLAY(40.1,355.3,6.02,"BIN:") ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNBCD",44,0)
 D DISPLAY(40.11,355.3,6.03,"PCN:")
"RTN","IBCNBCD",45,0)
 D DISPLAY(40.04,355.3,.05,"Require UR:")
"RTN","IBCNBCD",46,0)
 D DISPLAY(40.05,355.3,.06,"Require Pre-Cert:")
"RTN","IBCNBCD",47,0)
 D DISPLAY(40.06,355.3,.12,"Require Amb Cert:")
"RTN","IBCNBCD",48,0)
 D DISPLAY(40.07,355.3,.07,"Exclude Pre-Cond:")
"RTN","IBCNBCD",49,0)
 D DISPLAY(40.08,355.3,.08,"Benefits Assign:")
"RTN","IBCNBCD",50,0)
 D DISPLAY(40.09,355.3,.09,"Type of Plan:")
"RTN","IBCNBCD",51,0)
 ;
"RTN","IBCNBCD",52,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",53,0)
 Q
"RTN","IBCNBCD",54,0)
 ;
"RTN","IBCNBCD",55,0)
POLICY(IBBUFDA,IBPOLDA) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBCD",56,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBCD",57,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",58,0)
 ;
"RTN","IBCNBCD",59,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBCD",60,0)
 ;
"RTN","IBCNBCD",61,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBCD",62,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",63,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.03),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",64,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",65,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",66,0)
 ;
"RTN","IBCNBCD",67,0)
 D DISPLAY(60.02,2.312,8,"Effective Date:")
"RTN","IBCNBCD",68,0)
 D DISPLAY(60.03,2.312,3,"Expiration Date:")
"RTN","IBCNBCD",69,0)
 D DISPLAY(60.04,2.312,1,"Subscriber Id:")
"RTN","IBCNBCD",70,0)
 D DISPLAY(60.05,2.312,6,"Whose Insurance:")
"RTN","IBCNBCD",71,0)
 D DISPLAY(60.06,2.312,16,"Relationship:")
"RTN","IBCNBCD",72,0)
 D DISPLAY(60.07,2.312,17,"Name of Insured:")
"RTN","IBCNBCD",73,0)
 D DISPLAY(60.08,2.312,3.01,"Insured's DOB:")
"RTN","IBCNBCD",74,0)
 D DISPLAY(60.09,2.312,3.05,"Insured's SSN:")
"RTN","IBCNBCD",75,0)
 D DISPLAY(60.13,2.312,3.12,"Insured's SEX:")
"RTN","IBCNBCD",76,0)
 D DISPLAY(60.1,2.312,4.01,"Primary Provider:")
"RTN","IBCNBCD",77,0)
 D DISPLAY(60.11,2.312,4.02,"Provider Phone:")
"RTN","IBCNBCD",78,0)
 D DISPLAY(60.12,2.312,.2,"Coor of Benefits:")
"RTN","IBCNBCD",79,0)
 D DISPLAY(61.01,2.312,2.1,"Emp Sponsored?:")
"RTN","IBCNBCD",80,0)
 D DISPLAY(62.01,2.312,5.01,"Patient Id:")
"RTN","IBCNBCD",81,0)
 ;
"RTN","IBCNBCD",82,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP
"RTN","IBCNBCD",83,0)
 ;
"RTN","IBCNBCD",84,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",85,0)
 ;
"RTN","IBCNBCD",86,0)
 Q
"RTN","IBCNBCD",87,0)
 ;
"RTN","IBCNBCD",88,0)
ESGHP ; display employee sponsored group health plan
"RTN","IBCNBCD",89,0)
 W ! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W ! Q:$D(DIRUT)
"RTN","IBCNBCD",90,0)
 ;
"RTN","IBCNBCD",91,0)
 D DISPLAY(61.02,2.312,2.015,"Employer Name:")
"RTN","IBCNBCD",92,0)
 D DISPLAY(61.03,2.312,2.11,"Emp Status:")
"RTN","IBCNBCD",93,0)
 D DISPLAY(61.04,2.312,2.12,"Retirement Date:")
"RTN","IBCNBCD",94,0)
 D DISPLAY(61.05,2.312,2.01,"Send to Employer:")
"RTN","IBCNBCD",95,0)
 D DISPLAY(61.06,2.312,2.02,"Emp Street Ln 1:")
"RTN","IBCNBCD",96,0)
 D DISPLAY(61.07,2.312,2.03,"Emp Street Ln 2:")
"RTN","IBCNBCD",97,0)
 D DISPLAY(61.08,2.312,2.04,"Emp Street Ln 3:")
"RTN","IBCNBCD",98,0)
 D DISPLAY(61.09,2.312,2.05,"Emp City:")
"RTN","IBCNBCD",99,0)
 D DISPLAY(61.1,2.312,2.06,"Emp State:")
"RTN","IBCNBCD",100,0)
 D DISPLAY(61.11,2.312,2.07,"Emp Zip Code:")
"RTN","IBCNBCD",101,0)
 D DISPLAY(61.12,2.312,2.08,"Emp Phone:")
"RTN","IBCNBCD",102,0)
 ;
"RTN","IBCNBCD",103,0)
 Q
"RTN","IBCNBCD",104,0)
 ;
"RTN","IBCNBCD",105,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBCD",106,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG S EXTDATA=""
"RTN","IBCNBCD",107,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBCD",108,0)
 I +IBEXTDA S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBCD",109,0)
 ;
"RTN","IBCNBCD",110,0)
 S IBOVER=$S(BUFDATA'=""&(BUFDATA'=EXTDATA):"B",1:""),IBMERG=$S(EXTDATA="":"B",1:"")
"RTN","IBCNBCD",111,0)
 ;
"RTN","IBCNBCD",112,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG)
"RTN","IBCNBCD",113,0)
 Q
"RTN","IBCNBCD",114,0)
 ;
"RTN","IBCNBCD",115,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBCD",116,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBCD",117,0)
 S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBCD",118,0)
 W !
"RTN","IBCNBCD",119,0)
 D WRTFLD(LABEL,0,19,ATTR),WRTFLD(FLD1,19,29,MERG)
"RTN","IBCNBCD",120,0)
 D WRTFLD(" | ",48,3,ATTR),WRTFLD(FLD2,51,29,OVER)
"RTN","IBCNBCD",121,0)
 Q
"RTN","IBCNBCD",122,0)
 ;
"RTN","IBCNBCD",123,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBCD",124,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBCD",125,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBCD",126,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBCD",127,0)
 ;
"RTN","IBCNBCD",128,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBCD",129,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBCD",130,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBCD",131,0)
 Q
"RTN","IBCNBEE")
0^42^B45297417^B44602878
"RTN","IBCNBEE",1,0)
IBCNBEE ;ALB/ARH-Ins Buffer: add/edit existing entries in buffer ;1 Jun 97
"RTN","IBCNBEE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,252,251,356,361,371**;21-MAR-94;Build 57
"RTN","IBCNBEE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBEE",4,0)
 ;
"RTN","IBCNBEE",5,0)
ADD(IBSOURCE) ; add a new buffer file entry (#355.33), sets only status (0) node data
"RTN","IBCNBEE",6,0)
 N IBARR,IBERR,IBIFN,IBX I '$G(IBSOURCE) S IBSOURCE=1
"RTN","IBCNBEE",7,0)
 ;
"RTN","IBCNBEE",8,0)
 S IBARR(355.33,"+1,",.01)="NOW",IBARR(355.33,"+1,",.03)=IBSOURCE
"RTN","IBCNBEE",9,0)
 D UPDATE^DIE("E","IBARR","IBIFN","IBERR")
"RTN","IBCNBEE",10,0)
 S IBX=+$G(IBIFN(1)) I $D(IBERR) S $P(IBX,U,2)=$G(IBERR("DIERR",1,"TEXT",1))
"RTN","IBCNBEE",11,0)
 Q IBX
"RTN","IBCNBEE",12,0)
 ;
"RTN","IBCNBEE",13,0)
STATUS(IBBUFDA,STATUS,NC,NG,NP) ; edit the status node
"RTN","IBCNBEE",14,0)
 ;
"RTN","IBCNBEE",15,0)
 N IBX,IBARR,IBIFN Q:'$G(IBBUFDA)  S IBIFN=IBBUFDA_","
"RTN","IBCNBEE",16,0)
 D CHK^DIE(355.33,.04,"",$G(STATUS),.IBX) Q:IBX="^"
"RTN","IBCNBEE",17,0)
 ;
"RTN","IBCNBEE",18,0)
 S IBARR(355.33,IBIFN,.04)=STATUS I STATUS="R" S (NC,NG,NP)=0
"RTN","IBCNBEE",19,0)
 S IBARR(355.33,IBIFN,.07)=+$G(NC),IBARR(355.33,IBIFN,.08)=+$G(NG),IBARR(355.33,IBIFN,.09)=+$G(NP)
"RTN","IBCNBEE",20,0)
 D FILE^DIE("E","IBARR")
"RTN","IBCNBEE",21,0)
 Q
"RTN","IBCNBEE",22,0)
 ;
"RTN","IBCNBEE",23,0)
INS(IBBUFDA,FLDS) ; edit the insurance company portion of a buffer file entry
"RTN","IBCNBEE",24,0)
 ;
"RTN","IBCNBEE",25,0)
 N DIC,DIE,DA,DR,X,Y,IBCNEXT1
"RTN","IBCNBEE",26,0)
 I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",27,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",28,0)
 ;
"RTN","IBCNBEE",29,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing
"RTN","IBCNBEE",30,0)
 ;     - the insurance company name in the buffer.  Also added an
"RTN","IBCNBEE",31,0)
 ;     - input transform (see below) to clean up the data coming in.
"RTN","IBCNBEE",32,0)
 ;     - fetch the current buffer ins co name
"RTN","IBCNBEE",33,0)
 ;
"RTN","IBCNBEE",34,0)
 I FLDS="MR" S IBCNEXT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBEE",35,0)
 ;
"RTN","IBCNBEE",36,0)
 S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",37,0)
 ;
"RTN","IBCNBEE",38,0)
 I FLDS="MR" Q:$$INSNAME(IBBUFDA)<0  S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999),DR=$P(DR,";",2,99999)
"RTN","IBCNBEE",39,0)
 ;
"RTN","IBCNBEE",40,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",41,0)
 Q
"RTN","IBCNBEE",42,0)
 ;
"RTN","IBCNBEE",43,0)
GRP(IBBUFDA,FLDS) ; edit the group/plan portion of the buffer file entry
"RTN","IBCNBEE",44,0)
 ;
"RTN","IBCNBEE",45,0)
 N DIC,DIE,DA,DR,X,Y I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",46,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",47,0)
 ;
"RTN","IBCNBEE",48,0)
 S DR=$P($T(@(FLDS_"GRP")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",49,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",50,0)
 Q
"RTN","IBCNBEE",51,0)
 ;
"RTN","IBCNBEE",52,0)
POLICY(IBBUFDA,FLDS) ; edit the patient policy portion of the buffer file entry
"RTN","IBCNBEE",53,0)
 ;
"RTN","IBCNBEE",54,0)
 N DIC,DIE,DA,DR,X,Y,IBZZ I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",55,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",56,0)
 ;
"RTN","IBCNBEE",57,0)
 S DR=$P($T(@(FLDS_"POL")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",58,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",59,0)
 S DIE("NO^")="BACKOUTOK" D ^DIE K DIE,DA,DR Q:$D(Y)
"RTN","IBCNBEE",60,0)
 ;
"RTN","IBCNBEE",61,0)
 I FLDS="MR" D ESGHP(IBBUFDA)
"RTN","IBCNBEE",62,0)
 Q
"RTN","IBCNBEE",63,0)
 ;
"RTN","IBCNBEE",64,0)
ESGHP(IBBUFDA) ; sponsoring employer information
"RTN","IBCNBEE",65,0)
 N DIR,DIRUT,DUOUT,DTOUT,VAOA,VAERR,VA,DFN,IB60,IBE,IBEMPST,IBREL
"RTN","IBCNBEE",66,0)
 ;
"RTN","IBCNBEE",67,0)
 ; if insured is patient or spouse, ask if insured's current employer is the plan's sponsoring employer, if yes auto stuff it
"RTN","IBCNBEE",68,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) W ! S IB60=$G(^IBA(355.33,IBBUFDA,60)) D  Q:$D(DIRUT)
"RTN","IBCNBEE",69,0)
 . ; sponsoring employer is current employer?
"RTN","IBCNBEE",70,0)
 . S DFN=+IB60,IBREL=$P(IB60,U,6),VAOA("A")=$S(IBREL="01":5,IBREL="02":6,1:"") I 'DFN!(VAOA("A")="") Q
"RTN","IBCNBEE",71,0)
 . D OAD^VADPT I $G(VAOA(9))="" Q
"RTN","IBCNBEE",72,0)
 . S DIR("?")="Enter Yes if this plan is sponsored by the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer."
"RTN","IBCNBEE",73,0)
 . S DIR("?",1)="Entering Yes will result in the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer data being",DIR("?",2)="added to the policy as the Sponsoring Employer data.",DIR("?",3)=""
"RTN","IBCNBEE",74,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" D ^DIR W ! I Y'=1 Q
"RTN","IBCNBEE",75,0)
 . ;
"RTN","IBCNBEE",76,0)
 . D DELEMP(IBBUFDA) ; delete any data already contained in these fields
"RTN","IBCNBEE",77,0)
 . ;
"RTN","IBCNBEE",78,0)
 . ; if the insured's current employer sponsors the plan then stuff that employer's address into the buffer
"RTN","IBCNBEE",79,0)
 . S IBE=$S(IBREL="01":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNBEE",80,0)
 . S DR="61.02///"_VAOA(9)_";61.03///"_IBEMPST_";61.06///"_$E(VAOA(1),1,30)_";61.07///"_$E(VAOA(2),1,30)
"RTN","IBCNBEE",81,0)
 . S DR=DR_";61.08///"_$E(VAOA(3),1,30)_";61.09///"_$E(VAOA(4),1,20)_";61.1////"_$P(VAOA(5),U,1)
"RTN","IBCNBEE",82,0)
 . S DR=DR_";61.11////"_$P(VAOA(11),U,1)_";61.12///"_$E(VAOA(8),1,15)
"RTN","IBCNBEE",83,0)
 . S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",84,0)
 ;
"RTN","IBCNBEE",85,0)
 ; if employer sponsored plan, edit buffer entry's sponsoring employer info
"RTN","IBCNBEE",86,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) S DR="61.02:61.12",DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",87,0)
 ;
"RTN","IBCNBEE",88,0)
 ; if not employer sponsored plan, delete any existing sponsoring employer data
"RTN","IBCNBEE",89,0)
 I $D(^IBA(355.33,IBBUFDA,61)),'$G(^IBA(355.33,IBBUFDA,61)) D DELEMP(IBBUFDA)
"RTN","IBCNBEE",90,0)
 Q
"RTN","IBCNBEE",91,0)
 ;
"RTN","IBCNBEE",92,0)
DELEMP(IBBUFDA) ; delete sponsoring employer data
"RTN","IBCNBEE",93,0)
 N DIC,DIE,DA,DR,X,Y Q:'$D(^IBA(355.33,+$G(IBBUFDA),61))
"RTN","IBCNBEE",94,0)
 S DR="61.02///@;61.03///@;61.04///@;61.05///@;61.06///@;61.07///@;61.08///@;61.09///@;61.10///@;61.11///@;61.12///@"
"RTN","IBCNBEE",95,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",96,0)
 Q
"RTN","IBCNBEE",97,0)
 ;
"RTN","IBCNBEE",98,0)
INSHELP ;
"RTN","IBCNBEE",99,0)
 W !!,"------------------------ INSURANCE COMPANY INFORMATION -------------------------",!
"RTN","IBCNBEE",100,0)
 Q
"RTN","IBCNBEE",101,0)
GRPHELP ;
"RTN","IBCNBEE",102,0)
 W !!,"---------------------------- GROUP/PLAN INFORMATION ----------------------------"
"RTN","IBCNBEE",103,0)
 W !," The following data defines a specific Group or Plan provided by an Insurance "
"RTN","IBCNBEE",104,0)
 W !," Company.  This may be either a group plan with many potential members or an "
"RTN","IBCNBEE",105,0)
 W !," individual plan with a single member.",!
"RTN","IBCNBEE",106,0)
 Q
"RTN","IBCNBEE",107,0)
POLHELP ;
"RTN","IBCNBEE",108,0)
 W !!,"---------------------- POLICY AND SUBSCRIBER INFORMATION -----------------------"
"RTN","IBCNBEE",109,0)
 W !," The following data defines the subscriber specific policy information for a "
"RTN","IBCNBEE",110,0)
 W !," particular Insurance Plan.  The subscriber, the insured, and the policy holder "
"RTN","IBCNBEE",111,0)
 W !," all refer to the person who is a member of the plan and therefore holds the "
"RTN","IBCNBEE",112,0)
 W !," policy.  The patient must be covered under the plan but may not be the policy"
"RTN","IBCNBEE",113,0)
 W !," holder.",!
"RTN","IBCNBEE",114,0)
 Q
"RTN","IBCNBEE",115,0)
 ;
"RTN","IBCNBEE",116,0)
INSNAME(IBBUFDA) ;  Reset insurance company name
"RTN","IBCNBEE",117,0)
 N DR,DIE,DA,Y,X,IBX,IBNEW,IBNAME
"RTN","IBCNBEE",118,0)
 S IBX=-1
"RTN","IBCNBEE",119,0)
 S DR=20.01,DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",120,0)
 D ^DIE
"RTN","IBCNBEE",121,0)
 I '$D(Y) S IBNEW=$$CHECK(IBBUFDA)
"RTN","IBCNBEE",122,0)
 I +$G(IBNEW)'<0,$G(IBNEW)'=0,$D(IBNEW) S DR=$P(DR,";",1)_"////"_IBNEW S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR I '$D(Y) S IBX=0
"RTN","IBCNBEE",123,0)
 ; BHS - 10/15/03 - If user entered a caret during $$CHECK still set
"RTN","IBCNBEE",124,0)
 ;                  return value to 0 so the user can edit the other
"RTN","IBCNBEE",125,0)
 ;                  INS fields
"RTN","IBCNBEE",126,0)
 I $G(IBNEW)=0!($G(IBNEW)=-1) S IBX=0
"RTN","IBCNBEE",127,0)
 Q IBX
"RTN","IBCNBEE",128,0)
 ;
"RTN","IBCNBEE",129,0)
CHECK(IBBUFDA) ; Select Insurance Company Name and Automatch
"RTN","IBCNBEE",130,0)
 ; Buffer file (#355.33), field# 20.01.
"RTN","IBCNBEE",131,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing the
"RTN","IBCNBEE",132,0)
 ;       insurance company name.  Also, display the insurance company
"RTN","IBCNBEE",133,0)
 ;       name lookup/lister and the Auto Match lookup/lister.
"RTN","IBCNBEE",134,0)
 ;
"RTN","IBCNBEE",135,0)
 NEW IBNEW,IBNAME,AMLIST
"RTN","IBCNBEE",136,0)
 ;
"RTN","IBCNBEE",137,0)
 S IBNEW=0,IBNAME=$P($G(^IBA(355.33,$G(IBBUFDA),20)),U,1)
"RTN","IBCNBEE",138,0)
 I IBNAME="" G CHECKQ
"RTN","IBCNBEE",139,0)
 ;
"RTN","IBCNBEE",140,0)
 ; Perform an insurance company lookup/lister
"RTN","IBCNBEE",141,0)
 ; BHS - 10/15/03 - Removed quits when user enters a caret to quit the
"RTN","IBCNBEE",142,0)
 ;                  the ins lister or Auto Match lister
"RTN","IBCNBEE",143,0)
 S IBNEW=$$DICINS^IBCNBU1(IBNAME,1,10)
"RTN","IBCNBEE",144,0)
 I IBNEW=0!(IBNEW<0) D
"RTN","IBCNBEE",145,0)
 . I '$$AMLOOK^IBCNEUT1(IBNAME,1,.AMLIST) Q
"RTN","IBCNBEE",146,0)
 . S IBNEW=$$AMSEL^IBCNEUT1(.AMLIST)
"RTN","IBCNBEE",147,0)
 ;
"RTN","IBCNBEE",148,0)
 ; user chose a valid insurance company - possible Auto Match add
"RTN","IBCNBEE",149,0)
 I IBNEW'<0,IBNEW'=0 D AMADD^IBCNEUT6(X,IBCNEXT1)
"RTN","IBCNBEE",150,0)
 ;
"RTN","IBCNBEE",151,0)
CHECKQ Q IBNEW
"RTN","IBCNBEE",152,0)
 ;
"RTN","IBCNBEE",153,0)
MRINS ; Insurance Company fields asked of MCCR users in the Buffer Process options (all buffer ins fields 20.01-21.06)
"RTN","IBCNBEE",154,0)
 ;;20.01;20.05;20.02:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",155,0)
 ;
"RTN","IBCNBEE",156,0)
MRGRP ; Group/Plan fields asked of MCCR users in the Buffer Process options (all buffer grp fields 40.01-40.09) ;;Daou/EEN adding BIN and PCN (40.1,40.11)
"RTN","IBCNBEE",157,0)
 ;;40.01:40.03;40.1;40.11;40.09;40.04:40.08
"RTN","IBCNBEE",158,0)
 ;
"RTN","IBCNBEE",159,0)
MRPOL ; Patient Policy fields asked of MCCR users in the Buffer Process options (all buffer policy fields except ESGHP 60.02-61.01
"RTN","IBCNBEE",160,0)
 ;;60.02;60.03;60.05;60.06//^S X=$S(X="v":"01",X="s":"02",1:"");S IBZZ=X;60.04T;I IBZZ'="01" S Y="@111";60.07///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.08;60.13;62.01T;@112;60.1:60.12;.03;61.01
"RTN","IBCNBEE",161,0)
 ;
"RTN","IBCNBEE",162,0)
OTINS ; Insurance Company fields asked of non-MCCR users entering buffer data from options outside IB (20.01-20.04,21.01-21.06)
"RTN","IBCNBEE",163,0)
 ;;20.01:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",164,0)
 ;
"RTN","IBCNBEE",165,0)
OTGRP ; Group/Plan fields asked of non-MCCR users entering buffer data from options outside IB (40.02,40.03,40.09) ;;Daou/EEN-adding BIN & PCN (40.1,40.11)
"RTN","IBCNBEE",166,0)
 ;;40.02;40.03;40.1;40.11;40.09
"RTN","IBCNBEE",167,0)
 ;
"RTN","IBCNBEE",168,0)
OTPOL ; Patient Policy fields asked of non-MCCR users entering buffer data from options outside IB (60.02-60.08)
"RTN","IBCNBEE",169,0)
 ;;60.02;60.03;60.05;60.06//^S X=$S(X="v":"01",X="s":"02",1:"");S IBZZ=X;60.04T;I IBZZ'="01" S Y="@111";60.07///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.08;60.13;62.01T;@112
"RTN","IBCNBLE")
0^38^B69021746^B68938971
"RTN","IBCNBLE",1,0)
IBCNBLE ;ALB/ARH-Ins Buffer: LM buffer entry screen ;1 Jun 97
"RTN","IBCNBLE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,231,184,251,371**;21-MAR-94;Build 57
"RTN","IBCNBLE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLE",4,0)
 ;
"RTN","IBCNBLE",5,0)
EN ; - main entry point for list manager display
"RTN","IBCNBLE",6,0)
 N DFN
"RTN","IBCNBLE",7,0)
 D EN^VALM("IBCNB INSURANCE BUFFER ENTRY")
"RTN","IBCNBLE",8,0)
 Q
"RTN","IBCNBLE",9,0)
 ;
"RTN","IBCNBLE",10,0)
HDR ; - header code for list manager display
"RTN","IBCNBLE",11,0)
 N IBX,IB0,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLE",12,0)
 I +$G(DFN) D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLE",13,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLE",14,0)
 S IB0=$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNBLE",15,0)
 S IBX=$E($P($G(^VA(200,+$P(IB0,U,2),0)),U,1),1,27)_" ("_$E($$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3)),1,11)_")"
"RTN","IBCNBLE",16,0)
 S IBX="Buffer entry created on "_$$DATE(+IB0)_" by "_IBX,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",17,0)
 S VALMHDR(2)=IBX
"RTN","IBCNBLE",18,0)
 S IBX="" I +$P(IB0,U,10) S IBX="Buffer entry verified on "_$$DATE(+$P(IB0,U,10))_" by "_$E($P($G(^VA(200,+$P(IB0,U,11),0)),U,1),1,27),IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",19,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLE",20,0)
 Q
"RTN","IBCNBLE",21,0)
 ;
"RTN","IBCNBLE",22,0)
INIT ; - initialization of list manager screen, ifn of record to display required IBBUFDA
"RTN","IBCNBLE",23,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",24,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLE",25,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLE",26,0)
 D BLD
"RTN","IBCNBLE",27,0)
 Q
"RTN","IBCNBLE",28,0)
 ;
"RTN","IBCNBLE",29,0)
HELP ; - help text for list manager screen
"RTN","IBCNBLE",30,0)
 D FULL^VALM1
"RTN","IBCNBLE",31,0)
 W !!,"This screen displays all data in a Buffer File entry."
"RTN","IBCNBLE",32,0)
 W !!,"The actions allow editing of all data and verification of coverage."
"RTN","IBCNBLE",33,0)
 W !!,"It is not necessary to use the Verify Entry action, this action is optional.",!,"If the Verify Entry action is not used, the policy will be automatically flagged",!,"as verified when it is Accepted and stored in the main Insurance files."
"RTN","IBCNBLE",34,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLE",35,0)
 Q
"RTN","IBCNBLE",36,0)
 ;
"RTN","IBCNBLE",37,0)
EXIT ; - exit list manager screen
"RTN","IBCNBLE",38,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",39,0)
 D CLEAR^VALM1
"RTN","IBCNBLE",40,0)
 Q
"RTN","IBCNBLE",41,0)
 ;
"RTN","IBCNBLE",42,0)
BLD ; display buffer entry
"RTN","IBCNBLE",43,0)
 N IB0,IB20,IB40,IB60,IB61,IB62,IBL,IBLINE,ADDR,IBI,IBY
"RTN","IBCNBLE",44,0)
 S VALMCNT=0
"RTN","IBCNBLE",45,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNBLE",46,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60)),IB61=$G(^IBA(355.33,IBBUFDA,61)),IB62=$G(^IBA(355.33,IBBUFDA,62))
"RTN","IBCNBLE",47,0)
 ;
"RTN","IBCNBLE",48,0)
 D SET(" ") S IBY=$J("",26)_"Insurance Company Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",49,0)
 S IBL="Name: ",IBY=$P(IB20,U,1) S IBLINE=$$SETL("",IBY,IBL,10,30)
"RTN","IBCNBLE",50,0)
 S IBL="Reimburse?: ",IBY=$$EXPAND^IBTRE(355.33,20.05,$P(IB20,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",51,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",52,0)
 S IBL="Phone: ",IBY=$P(IB20,U,2) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,20)
"RTN","IBCNBLE",53,0)
 S IBL="Billing Phone: ",IBY=$P(IB20,U,3) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",54,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",55,0)
 S IBL="Precert Phone: ",IBY=$P(IB20,U,4) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",56,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",57,0)
 S IBL="Remote Query From: ",IBY=$$EXTERNAL^DILFD(355.33,.14,"",$P(IB0,"^",14)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",58,0)
 D SET(IBLINE) S IBLINE="" D ADDR(21,1)
"RTN","IBCNBLE",59,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69)
"RTN","IBCNBLE",60,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",61,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",62,0)
 ;
"RTN","IBCNBLE",63,0)
 D SET(" ") S IBY=$J("",29)_"Group/Plan Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",64,0)
 S IBL="Group Plan?: ",IBY=$$YN($P(IB40,U,1)) S IBLINE=$$SETL("",IBY,IBL,16,3)
"RTN","IBCNBLE",65,0)
 S IBL="Require UR: ",IBY=$$YN($P(IB40,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",66,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",67,0)
 S IBL="Group Name: ",IBY=$P(IB40,U,2) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",68,0)
 S IBL="Require Amb Cert: ",IBY=$$YN($P(IB40,U,6)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",69,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",70,0)
 S IBL="Group Number: ",IBY=$P(IB40,U,3) S IBLINE=$$SETL("",IBY,IBL,16,17)
"RTN","IBCNBLE",71,0)
 S IBL="Require Pre-Cert: ",IBY=$$YN($P(IB40,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",72,0)
 ;;Daou/EEN - Adding BIN and PCN
"RTN","IBCNBLE",73,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",74,0)
 S IBL="BIN: ",IBY=$P(IB40,U,10) S IBLINE=$$SETL("",IBY,IBL,16,10)
"RTN","IBCNBLE",75,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",76,0)
 S IBL="PCN: ",IBY=$P(IB40,U,11) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",77,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",78,0)
 S IBL="Type of Plan: ",IBY=$P($G(^IBE(355.1,+$P(IB40,U,9),0)),U,1) S IBLINE=$$SETL("",IBY,IBL,16,25)
"RTN","IBCNBLE",79,0)
 S IBL="Exclude Pre-Cond: ",IBY=$$YN($P(IB40,U,7)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",80,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",81,0)
 S IBL="Benefits Assignable: ",IBY=$$YN($P(IB40,U,8)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",82,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",83,0)
 ;
"RTN","IBCNBLE",84,0)
 D SET(" ") S IBY=$J("",26)_"Policy/Subscriber Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",85,0)
 S IBL="Whose Insurance: ",IBY=$$EXPAND^IBTRE(355.33,60.05,$P(IB60,U,5)) S IBLINE=$$SETL("",IBY,IBL,18,7)
"RTN","IBCNBLE",86,0)
 S IBL="Effective: ",IBY=$$DATE($P(IB60,U,2)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,8)
"RTN","IBCNBLE",87,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",88,0)
 S IBL="Insured's Name: ",IBY=$P(IB60,U,7) S IBLINE=$$SETL("",IBY,IBL,18,30)
"RTN","IBCNBLE",89,0)
 S IBL="Expiration: ",IBY=$$DATE($P(IB60,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",90,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",91,0)
 S IBL="Subscriber Id: ",IBY=$P(IB60,U,4) S IBLINE=$$SETL("",IBY,IBL,18,20)
"RTN","IBCNBLE",92,0)
 S IBL="Primary Provider: ",IBY=$P(IB60,U,10) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",93,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",94,0)
 S IBL="Relationship: ",IBY=$$EXPAND^IBTRE(355.33,60.06,$P(IB60,U,6)) S IBLINE=$$SETL("",IBY,IBL,18,16)
"RTN","IBCNBLE",95,0)
 S IBL="Provider Phone: ",IBY=$P(IB60,U,11) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",96,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",97,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,8)'="") S IBL="Insured's DOB: ",IBY=$$DATE($P(IB60,U,8)) S IBLINE=$$SETL("",IBY,IBL,18,8)
"RTN","IBCNBLE",98,0)
 S IBL="Coord of Benefits: ",IBY=$$EXPAND^IBTRE(355.33,60.12,$P(IB60,U,12)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",99,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",100,0)
 I $P(IB62,U)'="" S IBL="Patient Id: ",IBY=$P(IB62,U) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",101,0)
 I IBLINE'="" D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",102,0)
 ;
"RTN","IBCNBLE",103,0)
 I '$P(IB61,U,1) D SET(" ") S IBL="Employer Sponsored Group Health Plan?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,40,3) D SET(IBLINE) S IBLINE="" G NXT
"RTN","IBCNBLE",104,0)
 ;
"RTN","IBCNBLE",105,0)
 D ADDR(61,6)
"RTN","IBCNBLE",106,0)
 D SET(" ") S IBY=$J("",24)_"Subscriber's Employer Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",107,0)
 S IBL="Employer Sponsored?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",108,0)
 S IBL="Employment Status: ",IBY=$$EXPAND^IBTRE(355.33,61.03,$P(IB61,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",109,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",110,0)
 S IBL="Claim to Employer: ",IBY=$$YN($P(IB61,U,5)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",111,0)
 S IBL="Retirement Date: ",IBY=$$DATE($P(IB61,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,8)
"RTN","IBCNBLE",112,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",113,0)
 S IBL="Employer Name: ",IBY=$P(IB61,U,2) S IBLINE=$$SETL("",IBY,IBL,16,30)
"RTN","IBCNBLE",114,0)
 S IBL="Employer Phone: ",IBY=$P(IB61,U,12) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",115,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",116,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64)
"RTN","IBCNBLE",117,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",118,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",119,0)
 ;
"RTN","IBCNBLE",120,0)
NXT ;
"RTN","IBCNBLE",121,0)
 D SET(" ") S IBY=$J("",26)_"Buffer Entry Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",122,0)
 S IBL="Date Entered: ",IBY=$$FMTE^XLFDT($P(IB0,U,1),2) S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",123,0)
 S IBL="Date Verified: ",IBY=$$FMTE^XLFDT($P(IB0,U,10),2) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",124,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",125,0)
 S IBL="Entered By: ",IBY=$$EXPAND^IBTRE(355.33,.02,$P(IB0,U,2)) S IBLINE=$$SETL("",IBY,IBL,18,40)
"RTN","IBCNBLE",126,0)
 S IBL="Verified By: ",IBY=$$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",127,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",128,0)
 ;
"RTN","IBCNBLE",129,0)
 ; esg - 6/25/02   SDD 5.1.2 - modifications to Expand Entry for IIV
"RTN","IBCNBLE",130,0)
 ; move source down one line, eIIV trace # to the left column and add
"RTN","IBCNBLE",131,0)
 ; eIIV processed date to the right column
"RTN","IBCNBLE",132,0)
 ;
"RTN","IBCNBLE",133,0)
 S IBLINE=$$TRACE(IBLINE,IBBUFDA)       ; eIIV trace #
"RTN","IBCNBLE",134,0)
 S IBL="eIIV Processed Date: ",IBY=$S($P(IB0,U,15)="":"",1:$$FMTE^XLFDT($P(IB0,U,15),"2M"))
"RTN","IBCNBLE",135,0)
 S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",136,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",137,0)
 S IBL="Source: ",IBY=$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBLE",138,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",139,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",140,0)
 ;
"RTN","IBCNBLE",141,0)
 ; Call another routine for continuation of list build
"RTN","IBCNBLE",142,0)
 D BLD^IBCNBLE1
"RTN","IBCNBLE",143,0)
 ;
"RTN","IBCNBLE",144,0)
BLDQ Q
"RTN","IBCNBLE",145,0)
 ;
"RTN","IBCNBLE",146,0)
 ;
"RTN","IBCNBLE",147,0)
SETL(LINE,DATA,LABEL,COL,LNG) ;
"RTN","IBCNBLE",148,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNBLE",149,0)
 Q LINE
"RTN","IBCNBLE",150,0)
 ;
"RTN","IBCNBLE",151,0)
SET(LINE,SPEC) ;
"RTN","IBCNBLE",152,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLE",153,0)
 S ^TMP("IBCNBLE",$J,VALMCNT,0)=LINE
"RTN","IBCNBLE",154,0)
 I $G(SPEC)="B" D CNTRL^VALM10(VALMCNT,1,80,IOINHI,IOINORM)
"RTN","IBCNBLE",155,0)
 Q
"RTN","IBCNBLE",156,0)
 ;
"RTN","IBCNBLE",157,0)
DATE(X) ;
"RTN","IBCNBLE",158,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLE",159,0)
 Q Y
"RTN","IBCNBLE",160,0)
 ;
"RTN","IBCNBLE",161,0)
YN(X) ;
"RTN","IBCNBLE",162,0)
 N Y S X=$G(X),Y=$S(X=1:"Yes",X=0:"No",1:"")
"RTN","IBCNBLE",163,0)
 Q Y
"RTN","IBCNBLE",164,0)
 ;
"RTN","IBCNBLE",165,0)
ADDR(NODE,FLD) ; format address for output
"RTN","IBCNBLE",166,0)
 N IBY,IB0,IBCS,IBST,IBZIP,IBJ,IBZ,IBX K ADDR S ADDR(1)=""
"RTN","IBCNBLE",167,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,NODE))
"RTN","IBCNBLE",168,0)
 S IBCS=$P(IB0,U,FLD+3),IBST=$P($G(^DIC(5,+$P(IB0,U,FLD+4),0)),U,2),IBZIP=$P(IB0,U,FLD+5)
"RTN","IBCNBLE",169,0)
 S IBZIP=$E(IBZIP,1,5)_$S($E(IBZIP,6,9)'="":"-"_$E(IBZIP,6,9),1:"")
"RTN","IBCNBLE",170,0)
 S IBST=IBST_$S(IBST=""!(IBZIP=""):"",1:"  ")_IBZIP
"RTN","IBCNBLE",171,0)
 S IBCS=IBCS_$S(IBCS=""!(IBST=""):"",1:", ")_IBST
"RTN","IBCNBLE",172,0)
 ;
"RTN","IBCNBLE",173,0)
 S IBJ=1 F IBY=$P(IB0,U,FLD),$P(IB0,U,(FLD+1)),$P(IB0,U,(FLD+2)),IBCS I IBY'="" S IBX=$G(ADDR(IBJ)),IBZ=", " D
"RTN","IBCNBLE",174,0)
 . S:IBX="" IBZ="" S:($L(IBX)+2+$L(IBY))>64 IBZ="",IBJ=IBJ+1
"RTN","IBCNBLE",175,0)
 . S ADDR(IBJ)=$G(ADDR(IBJ))_IBZ_IBY
"RTN","IBCNBLE",176,0)
 Q
"RTN","IBCNBLE",177,0)
 ;
"RTN","IBCNBLE",178,0)
TRACE(IBLINE,IBBUFDA) ; Add the eIIV Trace Number to the display
"RTN","IBCNBLE",179,0)
 NEW RESP,TRACENUM,IBL,IBY
"RTN","IBCNBLE",180,0)
 I '$G(IBBUFDA) G TRACEX
"RTN","IBCNBLE",181,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)          ; response ien
"RTN","IBCNBLE",182,0)
 S TRACENUM=""
"RTN","IBCNBLE",183,0)
 I RESP S TRACENUM=$P($G(^IBCN(365,RESP,0)),U,9)   ; trace# field
"RTN","IBCNBLE",184,0)
 S IBL="eIIV Trace #: ",IBY=TRACENUM               ; field label/data
"RTN","IBCNBLE",185,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)             ; add it
"RTN","IBCNBLE",186,0)
TRACEX ;
"RTN","IBCNBLE",187,0)
 Q IBLINE
"RTN","IBCNBLE",188,0)
 ;
"RTN","IBCNBMI")
0^39^B54899476^B54212603
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH-Ins Buffer: move buffer data to insurance files ;09 Mar 2005  11:42 AM
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,251,299,345,361,371**;21-MAR-94;Build 57
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.33)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ;
"RTN","IBCNBMI",38,0)
 ;
"RTN","IBCNBMI",39,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",40,0)
 ;
"RTN","IBCNBMI",41,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",42,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",43,0)
 ;
"RTN","IBCNBMI",44,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",46,0)
 ;
"RTN","IBCNBMI",47,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",48,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",49,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",50,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",51,0)
 . ;
"RTN","IBCNBMI",52,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",53,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",54,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",55,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",56,0)
 . ;
"RTN","IBCNBMI",57,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",58,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",59,0)
 ;
"RTN","IBCNBMI",60,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",61,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",62,0)
 Q
"RTN","IBCNBMI",63,0)
 ;
"RTN","IBCNBMI",64,0)
STUFF(SET,IBEXTDA) ; update fields in insurance files that should be automatically set when an entry is edited
"RTN","IBCNBMI",65,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",66,0)
 ;
"RTN","IBCNBMI",67,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",68,0)
 ;
"RTN","IBCNBMI",69,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",70,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",71,0)
 ;
"RTN","IBCNBMI",72,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",73,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",74,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",75,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",76,0)
 ;
"RTN","IBCNBMI",77,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",78,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",79,0)
 Q
"RTN","IBCNBMI",80,0)
 ;
"RTN","IBCNBMI",81,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",82,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",83,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",84,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",85,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",86,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",87,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",88,0)
 Q
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
INSDR ;
"RTN","IBCNBMI",91,0)
 ;;36^20.02:20.04;21.01:21.06^.131;.132;.133;.111:.116
"RTN","IBCNBMI",92,0)
INSFLD ; corresponding fields:  Buffer File (355.33) and Insurance Company file (36)
"RTN","IBCNBMI",93,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",94,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",95,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",96,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",97,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",98,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",99,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",100,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",101,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",102,0)
 ;
"RTN","IBCNBMI",103,0)
GRPDR ;
"RTN","IBCNBMI",104,0)
 ;;355.3^40.02:40.03;40.1;40.11;40.04:40.09;^.03:.04;6.02;6.03;.05:.09;.12
"RTN","IBCNBMI",105,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",106,0)
 ;;40.02^.03^Group Name^              ; Group Name
"RTN","IBCNBMI",107,0)
 ;;40.03^.04^Group Number^            ; Group Number
"RTN","IBCNBMI",108,0)
 ;;40.1^6.02^BIN^                     ; BIN ;;Daou/EEN
"RTN","IBCNBMI",109,0)
 ;;40.11^6.03^PCN^                    ; PCN ;;Daou/EEN
"RTN","IBCNBMI",110,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",111,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",112,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",113,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",114,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",115,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",116,0)
 ;
"RTN","IBCNBMI",117,0)
GRPA ; auto set fields
"RTN","IBCNBMI",118,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",119,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",120,0)
 ;
"RTN","IBCNBMI",121,0)
POLDR ;
"RTN","IBCNBMI",122,0)
 ;;2.312^60.02:62.01^8;3;1;6;16;17;3.01;3.05;4.01;4.02;.2;3.12;2.1;2.015;2.11;2.12;2.01:2.08;5.01
"RTN","IBCNBMI",123,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",124,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",125,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",126,0)
 ;;60.04^1^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",127,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",128,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",129,0)
 ;;60.07^17^Name of Insured^          ; Name of Insured
"RTN","IBCNBMI",130,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",131,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",132,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",133,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",134,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",135,0)
 ;;60.13^3.12^Insured's Sex^          ; Insured's Sex
"RTN","IBCNBMI",136,0)
 ;;  
"RTN","IBCNBMI",137,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",138,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",139,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",140,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",141,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",142,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",143,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",144,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",145,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",146,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",147,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",148,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",149,0)
 ;;62.01^5.01^Patient Id^             ; Patient Id
"RTN","IBCNBMI",150,0)
 ;
"RTN","IBCNBMI",151,0)
POLA ; auto set fields
"RTN","IBCNBMI",152,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",153,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",154,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",155,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",156,0)
 ;
"RTN","IBCNBMI",157,0)
 ;
"RTN","IBCNBMI",158,0)
POLOTH(IBBUFDA,IBPOLDA) ; other special cases that can not be transferred using the generic code above, usually because of dependencies
"RTN","IBCNBMI",159,0)
 N IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",160,0)
 ;
"RTN","IBCNBMI",161,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",162,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",163,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",164,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",165,0)
 ;
"RTN","IBCNBMI",166,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",167,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",168,0)
 Q
"RTN","IBCNBMI",169,0)
 ;
"RTN","IBCNBMI",170,0)
PAT(DFN,IBPOLDA) ; Force DOB, SSN & SEX from Patient file (#2) in to Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",171,0)
 N DA,DR,DIE,DOB,SSN,SEX,IENS,WI
"RTN","IBCNBMI",172,0)
 S IENS=IBPOLDA_","_DFN_","
"RTN","IBCNBMI",173,0)
 S WI=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNBMI",174,0)
 I WI'="v" Q  ; Only use when Whose Insurance is 'v'
"RTN","IBCNBMI",175,0)
 S DOB=$$GET1^DIQ(2,DFN,.03,"I")
"RTN","IBCNBMI",176,0)
 S SSN=$$GET1^DIQ(2,DFN,.09,"I")
"RTN","IBCNBMI",177,0)
 S SEX=$$GET1^DIQ(2,DFN,.02,"I")
"RTN","IBCNBMI",178,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IBPOLDA
"RTN","IBCNBMI",179,0)
 S DR="3.01///^S X=DOB;3.05///^S X=SSN;3.12///^S X=SEX"
"RTN","IBCNBMI",180,0)
 D ^DIE
"RTN","IBCNBMI",181,0)
 Q
"RTN","IBCNEBF")
0^33^B29002877^B27574081
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,361,371**;21-MAR-94;Build 57
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon input values
"RTN","IBCNEBF",7,0)
 ;
"RTN","IBCNEBF",8,0)
 Q
"RTN","IBCNEBF",9,0)
 ;
"RTN","IBCNEBF",10,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data
"RTN","IBCNEBF",11,0)
 ;   from a specific patient and insurance record entry
"RTN","IBCNEBF",12,0)
 ;
"RTN","IBCNEBF",13,0)
 ;  Input Parameters
"RTN","IBCNEBF",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",15,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",16,0)
 ;    SYMBOL = IIV Symbol IEN
"RTN","IBCNEBF",17,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",18,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",19,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",20,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",21,0)
 ;
"RTN","IBCNEBF",22,0)
 I DFN=""!(IRIEN="") Q   ; * do not require SYMBOL or OVRRIDE
"RTN","IBCNEBF",23,0)
 ;
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 NEW VBUF,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",26,0)
 NEW BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",27,0)
 NEW MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",28,0)
 ;
"RTN","IBCNEBF",29,0)
 S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",30,0)
 S INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",31,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3)
"RTN","IBCNEBF",32,0)
 S BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",33,0)
 S NAME=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEBF",34,0)
 S SUBID=$P($G(^DPT(DFN,.312,IRIEN,0)),U,2)
"RTN","IBCNEBF",35,0)
 S PATID=$P($G(^DPT(DFN,.312,IRIEN,5)),U,1)
"RTN","IBCNEBF",36,0)
 S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEBF",37,0)
 S COB=$P($G(^DPT(DFN,.312,IRIEN,0)),U,20)
"RTN","IBCNEBF",38,0)
 S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1)
"RTN","IBCNEBF",39,0)
 S ISSN=$P($G(^DPT(DFN,.312,IRIEN,3)),U,5)
"RTN","IBCNEBF",40,0)
 S ISEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12)
"RTN","IBCNEBF",41,0)
 S EFFDT=$P(^DPT(DFN,.312,IRIEN,0),U,8)
"RTN","IBCNEBF",42,0)
 S EXPDT=$P(^DPT(DFN,.312,IRIEN,0),U,4)
"RTN","IBCNEBF",43,0)
 S REL=$P(^DPT(DFN,.312,IRIEN,0),U,16)
"RTN","IBCNEBF",44,0)
 ;
"RTN","IBCNEBF",45,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",46,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",47,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",48,0)
 ;
"RTN","IBCNEBF",49,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",50,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",51,0)
 ;
"RTN","IBCNEBF",52,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",53,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",54,0)
 ;
"RTN","IBCNEBF",55,0)
 D FIL
"RTN","IBCNEBF",56,0)
 K ADD
"RTN","IBCNEBF",57,0)
 Q
"RTN","IBCNEBF",58,0)
 ;
"RTN","IBCNEBF",59,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",60,0)
 ;
"RTN","IBCNEBF",61,0)
 ;  Input Parameter
"RTN","IBCNEBF",62,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",63,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",64,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",65,0)
 ;
"RTN","IBCNEBF",66,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",67,0)
 ;
"RTN","IBCNEBF",68,0)
 NEW PIEN,RSTYPE
"RTN","IBCNEBF",69,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",70,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",71,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",72,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",73,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",74,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",75,0)
 . I IIEN="" Q
"RTN","IBCNEBF",76,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",77,0)
 S RDATA=$G(^IBCN(365,IEN,1))
"RTN","IBCNEBF",78,0)
 S NAME=$P(RDATA,U,1)
"RTN","IBCNEBF",79,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",80,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",81,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",82,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",83,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",84,0)
 S SUBID=$P(RDATA,U,5)
"RTN","IBCNEBF",85,0)
 S PATID=$P(RDATA,U,18)
"RTN","IBCNEBF",86,0)
 S GNAME=$P(RDATA,U,6)
"RTN","IBCNEBF",87,0)
 S GNUMB=$P(RDATA,U,7)
"RTN","IBCNEBF",88,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",89,0)
 S REL=$P(RDATA,U,9)
"RTN","IBCNEBF",90,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",91,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",92,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",93,0)
 ;
"RTN","IBCNEBF",94,0)
 D FIL
"RTN","IBCNEBF",95,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",96,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",97,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS
"RTN","IBCNEBF",98,0)
 Q
"RTN","IBCNEBF",99,0)
 ;
"RTN","IBCNEBF",100,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",101,0)
 ;
"RTN","IBCNEBF",102,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",103,0)
 ;
"RTN","IBCNEBF",104,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",105,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",106,0)
 ;
"RTN","IBCNEBF",107,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")
"RTN","IBCNEBF",108,0)
 ;
"RTN","IBCNEBF",109,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",110,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",111,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",112,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",113,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",114,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",115,0)
 . S VBUF(40.03)=GNUMB  ; Group Number
"RTN","IBCNEBF",116,0)
 . S VBUF(40.02)=GNAME  ; Group Name
"RTN","IBCNEBF",117,0)
 . S VBUF(60.07)=NAME  ; Name of Insured
"RTN","IBCNEBF",118,0)
 . S VBUF(60.04)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",119,0)
 . S VBUF(62.01)=PATID  ; Patient/Member ID
"RTN","IBCNEBF",120,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",121,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",122,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",123,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",124,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",125,0)
 . S VBUF(60.06)=REL  ;  Patient Relationship
"RTN","IBCNEBF",126,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",127,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",128,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",129,0)
 . S VBUF(60.13)=ISEX  ;  Insured's Sex
"RTN","IBCNEBF",130,0)
 . ;
"RTN","IBCNEBF",131,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",132,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",133,0)
 ;
"RTN","IBCNEBF",134,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",135,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",136,0)
 ;
"RTN","IBCNEBF",137,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",138,0)
 S IBERROR=""
"RTN","IBCNEBF",139,0)
 ;
"RTN","IBCNEBF",140,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",141,0)
 ;
"RTN","IBCNEBF",142,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",143,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",144,0)
 ;
"RTN","IBCNEBF",145,0)
 I $G(ADD) D
"RTN","IBCNEBF",146,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",147,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",148,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",149,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",150,0)
 ;
"RTN","IBCNEBF",151,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",152,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",153,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",154,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",155,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",156,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",157,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",158,0)
 . S MSG(6)="Please log a Remedy Ticket for this problem."
"RTN","IBCNEBF",159,0)
 . S XMSUB="Error creating Buffer Entry."
"RTN","IBCNEBF",160,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",161,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",162,0)
 ;
"RTN","IBCNEBF",163,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",164,0)
 ;
"RTN","IBCNEBF",165,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",166,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",167,0)
 ;  is edited in this case.
"RTN","IBCNEBF",168,0)
 ;
"RTN","IBCNEBF",169,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",170,0)
 ;
"RTN","IBCNEBF",171,0)
 ;  If an error occurred in EDITSTF, the error array is not returned
"RTN","IBCNEBF",172,0)
 ;
"RTN","IBCNEBF",173,0)
 Q
"RTN","IBCNRDV")
0^43^B66590171^B65860108
"RTN","IBCNRDV",1,0)
IBCNRDV ;OAKFO/ELZ - INSURANCE INFORMATION EXCHANGE VIA RDV ;27-MAR-03
"RTN","IBCNRDV",2,0)
 ;;2.0;INTEGRATED BILLING;**214,231,361,371**;21-MAR-94;Build 57
"RTN","IBCNRDV",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNRDV",4,0)
 ;
"RTN","IBCNRDV",5,0)
 ; This routine is used to exchange insurance information between
"RTN","IBCNRDV",6,0)
 ; facilities.
"RTN","IBCNRDV",7,0)
OPT ; Menu option entry point.  This is used to select a patient to request
"RTN","IBCNRDV",8,0)
 ; information about from the remote treating facilities.
"RTN","IBCNRDV",9,0)
 N DFN,DIC,X,Y,DTOUT,DUOUT,IBT,%,%Y,IBX,VADM,IBB,IBD,IBH,IBI,IBICN,IBR,IBRZ,IBX,IBY,IBZ,IBWAIT,IBL,DO,IBTYPE,IB1
"RTN","IBCNRDV",10,0)
 ;
"RTN","IBCNRDV",11,0)
 ; prompt for patient
"RTN","IBCNRDV",12,0)
AGAIN S DIC="^DPT(",DIC(0)="AEMNQ" D ^DIC Q:Y<1  S DFN=+Y
"RTN","IBCNRDV",13,0)
 ;
"RTN","IBCNRDV",14,0)
BACKGND ; background/tasked entry point
"RTN","IBCNRDV",15,0)
 ; IBTYPE is being used as a flag to indicate this is running in background
"RTN","IBCNRDV",16,0)
 ;
"RTN","IBCNRDV",17,0)
 ; look up treating facilities
"RTN","IBCNRDV",18,0)
 K IBT S IBT=$$TFL^IBARXMU(DFN,.IBT)
"RTN","IBCNRDV",19,0)
 I IBT<1,'$D(IBTYPE) W !!,"This patient has no remote treating facilities to query." G AGAIN
"RTN","IBCNRDV",20,0)
 I IBT<1 Q
"RTN","IBCNRDV",21,0)
 ;
"RTN","IBCNRDV",22,0)
 ; display and verify we want to do this
"RTN","IBCNRDV",23,0)
 I '$D(IBTYPE) D DEM^VADPT W !!,"The patient ",VADM(1)," has the following ",IBT," remote facilitie(s)",! S IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1  W !?10,$P(IBT(IBX),"^",2)
"RTN","IBCNRDV",24,0)
 I '$D(IBTYPE) W !!,"Do you want to perform this Remote Query" S %=1 D YN^DICN G:%'=1 AGAIN
"RTN","IBCNRDV",25,0)
 ;
"RTN","IBCNRDV",26,0)
 ; get ICN
"RTN","IBCNRDV",27,0)
 S IBICN=$$ICN^IBARXMU(DFN) I 'IBICN,'$D(IBTYPE) W !!,"No ICN for this patient" G AGAIN
"RTN","IBCNRDV",28,0)
 I 'IBICN Q
"RTN","IBCNRDV",29,0)
 ;
"RTN","IBCNRDV",30,0)
 ; sent off the remote queries and get back handles
"RTN","IBCNRDV",31,0)
 S IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1  D
"RTN","IBCNRDV",32,0)
 . D SEND(.IBH,IBX,IBICN,$S($D(IBTYPE):"IBCN INSURANCE QUERY TASK",1:"IBCN INSURANCE QUERY"))
"RTN","IBCNRDV",33,0)
 . X $S(IBH(0)'="":"S $P(IBT(IBX),U,5)=IBH(0)",1:"W:'$D(IBTYPE) !,""No handle returned for "",$P(IBT(IBX),U,2) K IBT(IBX)")
"RTN","IBCNRDV",34,0)
 ;
"RTN","IBCNRDV",35,0)
 ; no handles returned
"RTN","IBCNRDV",36,0)
 I $D(IBT)<9,'$D(IBTYPE) W !!,"Unable to perform any remote queries.",! G AGAIN
"RTN","IBCNRDV",37,0)
 I $D(IBT)<9 Q
"RTN","IBCNRDV",38,0)
 ;
"RTN","IBCNRDV",39,0)
 ; go through every IBT()
"RTN","IBCNRDV",40,0)
 S IBP="|",IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1!($D(IBT)<9)  D
"RTN","IBCNRDV",41,0)
 . ;
"RTN","IBCNRDV",42,0)
 . ; do I have a return data.
"RTN","IBCNRDV",43,0)
 . F IBWAIT=1:1:60 W:'$D(IBTYPE) "." H 1 D CHECK(.IBR,$P(IBT(IBX),"^",5)) I $G(IBR(0))["Done" Q
"RTN","IBCNRDV",44,0)
 . I $G(IBR(0))'["Done" W:'$D(IBTYPE) !!,"Unable to communicate with ",$P(IBT(IBX),U,2) Q
"RTN","IBCNRDV",45,0)
 . K IBR
"RTN","IBCNRDV",46,0)
 . D RETURN(.IBR,$P(IBT(IBX),"^",5))
"RTN","IBCNRDV",47,0)
 . ;
"RTN","IBCNRDV",48,0)
 . ; no data returned or error message
"RTN","IBCNRDV",49,0)
 . S IBRZ=$S(-1=+$G(IBR):IBR,$G(IBR(0))="":$G(IBR(1)),1:$G(IBR(0)))
"RTN","IBCNRDV",50,0)
 . ;
"RTN","IBCNRDV",51,0)
 . ; no info to proceed
"RTN","IBCNRDV",52,0)
 . I IBRZ<1 W:'$D(IBTYPE) !,"Response from ",$P(IBT(IBX),U,2),!,$P(IBRZ,"^",2) K IBT(IBX) D:IBRZ="-1^No insurance on file" FILE(0) Q
"RTN","IBCNRDV",53,0)
 . ;
"RTN","IBCNRDV",54,0)
 . ; received insurance info, need to file and display message
"RTN","IBCNRDV",55,0)
 . W:'$D(IBTYPE) !,"Received ",$G(IBR(0))," insurance companies from ",$P(IBT(IBX),U,2) D FILE(+IBR(0))
"RTN","IBCNRDV",56,0)
 . ;
"RTN","IBCNRDV",57,0)
 . S IBY=0 F  S IBY=$O(IBR(IBY))  Q:IBY<1  D
"RTN","IBCNRDV",58,0)
 .. F IBL=5:1  S IBT=$P($T(MAP+IBL),";",3) Q:IBT=""  D
"RTN","IBCNRDV",59,0)
 ... ;
"RTN","IBCNRDV",60,0)
 ... ; am I on the right MAP line
"RTN","IBCNRDV",61,0)
 ... I $P(IBT,IBP,3)=$S(IBY#6:IBY#6,1:6) S IBZ=$P(IBR(IBY),"^",$P(IBT,IBP,4)) I $L(IBZ) D
"RTN","IBCNRDV",62,0)
 .... ;
"RTN","IBCNRDV",63,0)
 .... ; xecute code to change external to internal
"RTN","IBCNRDV",64,0)
 .... X:$L($P(IBT,IBP,7)) $P(IBT,IBP,7)
"RTN","IBCNRDV",65,0)
 .... ;
"RTN","IBCNRDV",66,0)
 .... ; put the info in the array for the buffer file
"RTN","IBCNRDV",67,0)
 .... S:$D(IBZ) IBB($P(IBT,IBP,5))=IBZ
"RTN","IBCNRDV",68,0)
 .. ;
"RTN","IBCNRDV",69,0)
 .. ; need to avoid duplicates if possible.
"RTN","IBCNRDV",70,0)
 .. I $G(IBB(20.01))["MEDICARE (WNR)" S X=0 F  S X=$O(^DPT(DFN,.312,X)) Q:X<1  I $P($G(^DIC(36,+$P($G(^DPT(DFN,.312,X,0)),"^"),0)),"^")["MEDICARE (WNR)" K IBB Q
"RTN","IBCNRDV",71,0)
 .. Q:'$D(IBB)
"RTN","IBCNRDV",72,0)
 .. ;
"RTN","IBCNRDV",73,0)
 .. ; file in the buffer file & where else needed
"RTN","IBCNRDV",74,0)
 .. I IBY#6=0 D
"RTN","IBCNRDV",75,0)
 ... I $L($G(IBB(20.01))) D
"RTN","IBCNRDV",76,0)
 .... S IBB(.14)=$$IEN^XUAF4(+IBT(IBX))
"RTN","IBCNRDV",77,0)
 .... S IBB=$$ADDSTF^IBCNBES($G(IBB(.03),1),DFN,.IBB)
"RTN","IBCNRDV",78,0)
 ... I '$D(IB1),$D(IBTYPE),$L($G(IBB(20.01))) D SCH^IBTUTL2(DFN,$G(IBSAVEI),$G(IBSAVEJ)):IBTYPE="TRKR",ADM^IBTUTL($G(IBSAVE1),$G(IBSAVE2),$G(IBSAVE3),$G(IBSAVE4)):IBTYPE="ADM" S IB1=1
"RTN","IBCNRDV",79,0)
 ... W:'$D(IBTYPE)&($L($G(IBB(20.01)))) !,$P($G(IBB),"^")," Buffer File entry for ",$G(IBB(20.01))
"RTN","IBCNRDV",80,0)
 ... K IBB
"RTN","IBCNRDV",81,0)
 ;
"RTN","IBCNRDV",82,0)
 ; flag so I don't do this patient again within 90 days
"RTN","IBCNRDV",83,0)
 S ^IBT(356,"ARDV",DFN,$$FMADD^XLFDT(DT,90))=""
"RTN","IBCNRDV",84,0)
 ;
"RTN","IBCNRDV",85,0)
 Q
"RTN","IBCNRDV",86,0)
 ;
"RTN","IBCNRDV",87,0)
RPC(IBD,IBICN) ; RPC entry for looking up insurance info
"RTN","IBCNRDV",88,0)
 N DFN,IBZ,IBX,IBY,IBP,IBI,IBT,IBZ
"RTN","IBCNRDV",89,0)
 S DFN=$$DFN^IBARXMU(IBICN) I 'DFN S IBD(0)="-1^ICN Not found" Q
"RTN","IBCNRDV",90,0)
 D ALL^IBCNS1(DFN,"IBY",3)
"RTN","IBCNRDV",91,0)
 I '$D(IBY) S IBD(0)="-1^No insurance on file" Q
"RTN","IBCNRDV",92,0)
 ; set up return format
"RTN","IBCNRDV",93,0)
 ; IBD(0)   = # of insurance companies
"RTN","IBCNRDV",94,0)
 S IBD(0)=$G(IBY(0))
"RTN","IBCNRDV",95,0)
 ;
"RTN","IBCNRDV",96,0)
 ; where n starts at 1 and increments to 7 for each insurance company
"RTN","IBCNRDV",97,0)
 ; IBD(n) = 355.33, zero node format
"RTN","IBCNRDV",98,0)
 ; IBD(n+1) = 355.33, 20 node format
"RTN","IBCNRDV",99,0)
 ; IBD(n+2) = 355.33, 21 node format
"RTN","IBCNRDV",100,0)
 ; IBD(n+3) = 355.33, 40 node format
"RTN","IBCNRDV",101,0)
 ; IBD(n+4) = 355.33, 60 node format
"RTN","IBCNRDV",102,0)
 ; IBD(n+5) = 355.33, 61 node format
"RTN","IBCNRDV",103,0)
 ; IBD(n+6) = 355.33, 62 node format
"RTN","IBCNRDV",104,0)
 ;
"RTN","IBCNRDV",105,0)
 S IBP="|"
"RTN","IBCNRDV",106,0)
 S IBI=0 F  S IBI=$O(IBY(IBI))  Q:IBI<1  F IBL=5:1 S IBT=$P($T(MAP+IBL),";",3) Q:IBT=""  D
"RTN","IBCNRDV",107,0)
 . S IBZ=$P($G(IBY(IBI,+IBT)),"^",$P(IBT,IBP,2)) ; set the existing data
"RTN","IBCNRDV",108,0)
 . I $L($P(IBT,IBP,6)) X $P(IBT,IBP,6) ; output transform
"RTN","IBCNRDV",109,0)
 . S $P(IBD(IBI-1*7+$P(IBT,IBP,3)),"^",$P(IBT,IBP,4))=IBZ ; set data IBD
"RTN","IBCNRDV",110,0)
 Q
"RTN","IBCNRDV",111,0)
 ;
"RTN","IBCNRDV",112,0)
MAP ; this is a mapping of data returned from ALL^IBCNS1 to the buffer file
"RTN","IBCNRDV",113,0)
 ; format is:  node number | piece | extract node | extract piece
"RTN","IBCNRDV",114,0)
 ;             | 355.33 field number | format out code (if any)
"RTN","IBCNRDV",115,0)
 ;             | format in code (if any)
"RTN","IBCNRDV",116,0)
 ; the extract nodes will be sequential to match buffer file DD
"RTN","IBCNRDV",117,0)
 ;;0|1|2|1|20.01|N Z X "F Z=0,.11,.13 S IBY(IBI,36+Z)=$G(^DIC(36,IBZ,Z))" S IBZ=$P(IBY(IBI,36),"^");ins co name
"RTN","IBCNRDV",118,0)
 ;;0|2|5|4|60.04;subscriber id
"RTN","IBCNRDV",119,0)
 ;;0|4|5|3|60.03;experation date
"RTN","IBCNRDV",120,0)
 ;;0|6|5|5|60.05;who's insurance
"RTN","IBCNRDV",121,0)
 ;;0|8|5|2|60.02;effective date
"RTN","IBCNRDV",122,0)
 ;;0|16|5|6|60.06;pt relationship to insured
"RTN","IBCNRDV",123,0)
 ;;0|17|5|7|60.07;name of insured
"RTN","IBCNRDV",124,0)
 ;;0|20|5|12|60.12;coordination of benefits
"RTN","IBCNRDV",125,0)
 ;;1|3|1|10|.1||I IBZ<$$FMADD^XLFDT(DT,-180) K IBZ;date (last) verified
"RTN","IBCNRDV",126,0)
 ;;1|9|1|3|.03;source of information
"RTN","IBCNRDV",127,0)
 ;;2|1|6|5|61.05;send bill to employer
"RTN","IBCNRDV",128,0)
 ;;2|2|6|6|61.06;employer claims street address (line 1)
"RTN","IBCNRDV",129,0)
 ;;2|3|6|7|61.07;employer claims street address line 2
"RTN","IBCNRDV",130,0)
 ;;2|4|6|8|61.08;employer claims street address line 3
"RTN","IBCNRDV",131,0)
 ;;2|5|6|9|61.09;employer claims city
"RTN","IBCNRDV",132,0)
 ;;2|6|6|10|61.1|S IBZ=$$EXTERNAL^DILFD(2.312,2.06,"",IBZ)|N DIC,X,Y S DIC="^DIC(5,",X=IBZ,DIC(0)="OX" D ^DIC K:+Y<1 IBZ S:+Y>0 IBZ=+Y;employer claims state
"RTN","IBCNRDV",133,0)
 ;;2|7|6|11|61.11;employer claims zip code
"RTN","IBCNRDV",134,0)
 ;;2|8|6|12|61.12;employer claims phone
"RTN","IBCNRDV",135,0)
 ;;2|10|6|1|61.01;esghp
"RTN","IBCNRDV",136,0)
 ;;2|11|6|3|61.03;employment status
"RTN","IBCNRDV",137,0)
 ;;2|12|6|4|61.04;retirement date
"RTN","IBCNRDV",138,0)
 ;;3|1|5|8|60.08;insured's dob
"RTN","IBCNRDV",139,0)
 ;;3|5|5|9|60.09;insured's ssn
"RTN","IBCNRDV",140,0)
 ;;3|12|5|13|60.13;insured's sex
"RTN","IBCNRDV",141,0)
 ;;4|1|5|10|60.1;primary care provider
"RTN","IBCNRDV",142,0)
 ;;4|2|5|11|60.11;primary provider phone
"RTN","IBCNRDV",143,0)
 ;;5|1|7|1|62.01;patient id
"RTN","IBCNRDV",144,0)
 ;;355.3|2|4|1|40.01;is this a group policy
"RTN","IBCNRDV",145,0)
 ;;355.3|3|4|2|40.02;group name
"RTN","IBCNRDV",146,0)
 ;;355.3|4|4|3|40.03;group number
"RTN","IBCNRDV",147,0)
 ;;355.3|5|4|4|40.04;(is) utilization required
"RTN","IBCNRDV",148,0)
 ;;355.3|6|4|5|40.05;(is) pre-certification required
"RTN","IBCNRDV",149,0)
 ;;355.3|7|4|7|40.07;exclude pre-existing condition
"RTN","IBCNRDV",150,0)
 ;;355.3|8|4|8|40.08;benefits assignable
"RTN","IBCNRDV",151,0)
 ;;355.3|9|4|9|40.09;type of plan
"RTN","IBCNRDV",152,0)
 ;;355.3|12|4|6|40.06;ambulatory care certification
"RTN","IBCNRDV",153,0)
 ;;36|2|2|5|20.05;reimburse
"RTN","IBCNRDV",154,0)
 ;;36.11|1|3|1|21.01;street address line 1
"RTN","IBCNRDV",155,0)
 ;;36.11|2|3|2|21.02;street address line 2
"RTN","IBCNRDV",156,0)
 ;;36.11|3|3|3|21.03;street address line 3
"RTN","IBCNRDV",157,0)
 ;;36.11|4|3|4|21.04;city
"RTN","IBCNRDV",158,0)
 ;;36.11|5|3|5|21.05|S IBZ=$$EXTERNAL^DILFD(36,.115,"",IBZ)|N DIC,X,Y S DIC="^DIC(5,",X=IBZ,DIC(0)="OX" D ^DIC K:+Y<1 IBZ S:+Y>0 IBZ=+Y;state
"RTN","IBCNRDV",159,0)
 ;;36.11|6|3|6|21.06;zip code
"RTN","IBCNRDV",160,0)
 ;;36.13|1|2|2|20.02;phone number
"RTN","IBCNRDV",161,0)
 ;;36.13|2|2|3|20.03;billing phone number
"RTN","IBCNRDV",162,0)
 ;;36.13|3|2|4|20.04;precertification phone number
"RTN","IBCNRDV",163,0)
 ;;
"RTN","IBCNRDV",164,0)
 ;
"RTN","IBCNRDV",165,0)
SEND(IBH,IBX,IBICN,IBRPC) ; called to send off queries
"RTN","IBCNRDV",166,0)
 D EN1^XWB2HL7(.IBH,IBX,IBRPC,"",IBICN)
"RTN","IBCNRDV",167,0)
 Q
"RTN","IBCNRDV",168,0)
 ;
"RTN","IBCNRDV",169,0)
CHECK(IBR,IBH) ; called to check the return status of an RPC
"RTN","IBCNRDV",170,0)
 D RPCCHK^XWB2HL7(.IBR,IBH)
"RTN","IBCNRDV",171,0)
 Q
"RTN","IBCNRDV",172,0)
 ;
"RTN","IBCNRDV",173,0)
RETURN(IBR,IBH) ; called to get the return data and clear the broker
"RTN","IBCNRDV",174,0)
 N IBZ
"RTN","IBCNRDV",175,0)
 D RTNDATA^XWBDRPC(.IBR,IBH),CLEAR^XWBDRPC(.IBZ,IBH)
"RTN","IBCNRDV",176,0)
 Q
"RTN","IBCNRDV",177,0)
 ;
"RTN","IBCNRDV",178,0)
TASK ; queue off task job
"RTN","IBCNRDV",179,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK,ZTSAVE
"RTN","IBCNRDV",180,0)
 S ZTRTN="BACKGND^IBCNRDV",ZTDESC="Query Remote Facilities for Insurance",ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT),(ZTIO,ZTSAVE("DFN"),ZTSAVE("IBSAVE*"),ZTSAVE("IBTYPE"))="" D ^%ZTLOAD
"RTN","IBCNRDV",181,0)
 Q
"RTN","IBCNRDV",182,0)
 ;
"RTN","IBCNRDV",183,0)
TRKR(DFN,IBSAVEI,IBSAVEJ,IBDUZ) ; claims tracking entry
"RTN","IBCNRDV",184,0)
 N IBTYPE,IBT
"RTN","IBCNRDV",185,0)
 Q:$D(^IBT(356,"ARDV",DFN))  ; have already done recently
"RTN","IBCNRDV",186,0)
 Q:'$$TFL^IBARXMU(DFN,.IBT)  ; no remote facilities
"RTN","IBCNRDV",187,0)
 S IBTYPE="TRKR" D
"RTN","IBCNRDV",188,0)
 . I DUZ=.5 N DUZ S DUZ=+$G(IBDUZ),DUZ(2)=+$$SITE^VASITE
"RTN","IBCNRDV",189,0)
 . D TASK
"RTN","IBCNRDV",190,0)
 Q
"RTN","IBCNRDV",191,0)
 ;
"RTN","IBCNRDV",192,0)
ADM(DFN,IBSAVE1,IBSAVE2,IBSAVE3,IBSAVE4) ; admit event entry
"RTN","IBCNRDV",193,0)
 N IBTYPE S IBTYPE="ADM" D TASK
"RTN","IBCNRDV",194,0)
 Q
"RTN","IBCNRDV",195,0)
 ;
"RTN","IBCNRDV",196,0)
FILE(IBX) ; updates data into the log file
"RTN","IBCNRDV",197,0)
 ;IBX = number of insurance co's found
"RTN","IBCNRDV",198,0)
 N DIC,DA,DIE,IBM,DO,X,Y,IBZ,DR
"RTN","IBCNRDV",199,0)
 S IBM=$E($$DT^XLFDT,1,5)_"00",DA=+$O(^IBA(355.34,"B",IBM,0))
"RTN","IBCNRDV",200,0)
 I 'DA K DA L +^IBA(355.34,"B",IBM):10 S X=IBM,DIC="^IBA(355.34,",DIC(0)="F" D FILE^DICN S DA=+Y L -^IBA(355.34,"B",IBM)
"RTN","IBCNRDV",201,0)
 L +^IBA(355.34,DA):10
"RTN","IBCNRDV",202,0)
 S IBZ=^IBA(355.34,DA,0),DIE="^IBA(355.34,"
"RTN","IBCNRDV",203,0)
 S DR=".02///"_($P(IBZ,"^",2)+1)_";.03///"_($P(IBZ,"^",3)+IBX) D ^DIE
"RTN","IBCNRDV",204,0)
 L -^IBA(355.34,DA)
"RTN","IBCNRDV",205,0)
 Q
"RTN","IBCNS1")
0^31^B35071030^B34528689
"RTN","IBCNS1",1,0)
IBCNS1 ;ALB/AAS - INSURANCE MANAGEMENT SUPPORTED FUNCTIONS ;22-JULY-91
"RTN","IBCNS1",2,0)
 ;;2.0;INTEGRATED BILLING;**28,60,52,85,107,51,137,240,371**;21-MAR-94;Build 57
"RTN","IBCNS1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNS1",4,0)
 ;
"RTN","IBCNS1",5,0)
INSURED(DFN,IBINDT) ; -- Is patient insured
"RTN","IBCNS1",6,0)
 ; --Input  DFN     = patient
"RTN","IBCNS1",7,0)
 ;          IBINDT  = (optional) date insured (default = today)
"RTN","IBCNS1",8,0)
 ; -- Output        = 0 - not insured
"RTN","IBCNS1",9,0)
 ;                  = 1 - insured
"RTN","IBCNS1",10,0)
 ;
"RTN","IBCNS1",11,0)
 N J,X,IBINS S IBINS=0,J=0
"RTN","IBCNS1",12,0)
 I '$G(DFN) G INSQ
"RTN","IBCNS1",13,0)
 I '$G(IBINDT) S IBINDT=DT
"RTN","IBCNS1",14,0)
 F  S J=$O(^DPT(DFN,.312,J)) Q:'J  S X=$G(^(J,0)) S IBINS=$$CHK(X,IBINDT) Q:IBINS
"RTN","IBCNS1",15,0)
INSQ Q IBINS
"RTN","IBCNS1",16,0)
 ;
"RTN","IBCNS1",17,0)
PRE(DFN,IBINDT) ; -- is pre-certification required for patient
"RTN","IBCNS1",18,0)
 N X,Y,J,IBPRE
"RTN","IBCNS1",19,0)
 S IBPRE=0,J=0
"RTN","IBCNS1",20,0)
 S:'$G(IBINDT) IBINDT=DT
"RTN","IBCNS1",21,0)
 F  S J=$O(^DPT(DFN,.312,J)) Q:'J  S X=$G(^(J,0)) I $$CHK(X,IBINDT),$P($G(^IBA(355.3,+$P(X,"^",18),0)),"^",6) S IBPRE=1 Q
"RTN","IBCNS1",22,0)
PREQ Q IBPRE
"RTN","IBCNS1",23,0)
 ;
"RTN","IBCNS1",24,0)
UR(DFN,IBINDT) ; -- is ur required for patient
"RTN","IBCNS1",25,0)
 N X,Y,J,IBPRE
"RTN","IBCNS1",26,0)
 S IBUR=0,J=0
"RTN","IBCNS1",27,0)
 S:'$G(IBINDT) IBINDT=DT
"RTN","IBCNS1",28,0)
 F  S J=$O(^DPT(DFN,.312,J)) Q:'J  S X=$G(^(J,0)) I $$CHK(X,IBINDT),$P($G(^IBA(355.3,+$P(X,"^",18),0)),"^",5) S IBUR=1 Q
"RTN","IBCNS1",29,0)
URQ Q IBUR
"RTN","IBCNS1",30,0)
 ;
"RTN","IBCNS1",31,0)
CHK(X,Z,Y) ; -- check one entry for active
"RTN","IBCNS1",32,0)
 ; --  Input   X    = Zeroth node of entry in insurance multiple (2.312)
"RTN","IBCNS1",33,0)
 ;             Z    = date to check
"RTN","IBCNS1",34,0)
 ;             Y    = 2 if want will not reimburse
"RTN","IBCNS1",35,0)
 ;                  = 3 if want will not reimburse AND indemnity plans
"RTN","IBCNS1",36,0)
 ;                  = 4 if want will not reimburse, but only if it's
"RTN","IBCNS1",37,0)
 ;                       MEDICARE
"RTN","IBCNS1",38,0)
 ; --  Output  1    = Insurance Active
"RTN","IBCNS1",39,0)
 ;             0    = Inactive
"RTN","IBCNS1",40,0)
 ;
"RTN","IBCNS1",41,0)
 N Z1,X1
"RTN","IBCNS1",42,0)
 S Z1=0,Y=$G(Y)
"RTN","IBCNS1",43,0)
 I Y'=3,$$INDEM(X) G CHKQ ; is an indemnity policy or company
"RTN","IBCNS1",44,0)
 S X1=$G(^DIC(36,+X,0)) G:X1="" CHKQ ;insurance company entry doesn't exist
"RTN","IBCNS1",45,0)
 I $P(X,"^",8) G:Z<$P(X,"^",8) CHKQ ;effective date later than care
"RTN","IBCNS1",46,0)
 I $P(X,"^",4) G:Z>$P(X,"^",4) CHKQ ;care after expiration date
"RTN","IBCNS1",47,0)
 I $P($G(^IBA(355.3,+$P(X,"^",18),0)),"^",11) G CHKQ ;plan is inactive
"RTN","IBCNS1",48,0)
 G:$P(X1,"^",5) CHKQ ;insurance company inactive
"RTN","IBCNS1",49,0)
 I Y<2 G:$P(X1,"^",2)="N" CHKQ ;insurance company will not reimburse
"RTN","IBCNS1",50,0)
 I Y=4,$P(X1,"^",2)="N",'$$MCRWNR^IBEFUNC(+X) G CHKQ ;only MEDICARE WNR
"RTN","IBCNS1",51,0)
 S Z1=1
"RTN","IBCNS1",52,0)
CHKQ Q Z1
"RTN","IBCNS1",53,0)
 ;
"RTN","IBCNS1",54,0)
ACTIVE(IBCIFN) ; -- is this company active for this patient for this date
"RTN","IBCNS1",55,0)
 ; -- called from input transform and x-refs for fields 101,102,103
"RTN","IBCNS1",56,0)
 ; -- input
"RTN","IBCNS1",57,0)
 N ACTIVE,DFN,IBINDT
"RTN","IBCNS1",58,0)
 S DFN=$P(^DGCR(399,DA,0),"^",2),IBINDT=$S(+$G(^DGCR(399,DA,"U")):+$G(^("U")),1:DT)
"RTN","IBCNS1",59,0)
 ;
"RTN","IBCNS1",60,0)
ACTIVEQ Q ACTIVE
"RTN","IBCNS1",61,0)
 ;
"RTN","IBCNS1",62,0)
DD ;  - called from input transform and x-refs for field 101,102,103
"RTN","IBCNS1",63,0)
 ;  - input requires da=internal entry number in 399
"RTN","IBCNS1",64,0)
 ;  - outputs IBdd(ins co.) array
"RTN","IBCNS1",65,0)
 N DFN S DFN=$P(^DGCR(399,DA,0),"^",2),IBINDT=$S(+$G(^DGCR(399,DA,"U")):+$G(^("U")),1:DT)
"RTN","IBCNS1",66,0)
 D ALLACT
"RTN","IBCNS1",67,0)
DDQ K IBINDT Q
"RTN","IBCNS1",68,0)
 ;
"RTN","IBCNS1",69,0)
 ;
"RTN","IBCNS1",70,0)
ALLACT ; -- return active insurance zeroth nodes in ibdd(ins co,entry in mult)
"RTN","IBCNS1",71,0)
 N X,X1
"RTN","IBCNS1",72,0)
 S (X1,IBDD)=0
"RTN","IBCNS1",73,0)
 F  S X1=$O(^DPT(DFN,.312,X1)) Q:'X1  S X=$G(^(X,0)) I $$CHK(X,IBINDT) S IBDD(+X,X1)=X
"RTN","IBCNS1",74,0)
 ;
"RTN","IBCNS1",75,0)
ALLACTQ Q
"RTN","IBCNS1",76,0)
 ;
"RTN","IBCNS1",77,0)
HDR W !?4,"Insurance Co.",?22,"Policy #",?40,"Group",?52,"Holder",?60,"Effective",?70,"Expires" S X="",$P(X,"=",IOM-4)="" W !?4,X
"RTN","IBCNS1",78,0)
 Q
"RTN","IBCNS1",79,0)
 ;
"RTN","IBCNS1",80,0)
 ;
"RTN","IBCNS1",81,0)
D1 N X Q:'$D(IBINS)
"RTN","IBCNS1",82,0)
 W !?4,$S($D(^DIC(36,+IBINS,0)):$E($P(^(0),"^",1),1,16),1:"UNKNOWN")
"RTN","IBCNS1",83,0)
 W ?22,$E($P(IBINS,"^",2),1,16)
"RTN","IBCNS1",84,0)
 W ?40,$E($$GRP^IBCNS($P(IBINS,"^",18)),1,10)
"RTN","IBCNS1",85,0)
 S X=$P(IBINS,"^",6) W ?52,$S(X="v":"SELF",X="s":"SPOUSE",1:"OTHER")
"RTN","IBCNS1",86,0)
 W ?60,$$DAT1^IBOUTL($P(IBINS,"^",8)),?70,$$DAT1^IBOUTL($P(IBINS,"^",4))
"RTN","IBCNS1",87,0)
 Q
"RTN","IBCNS1",88,0)
 ;
"RTN","IBCNS1",89,0)
ALL(DFN,VAR,ACT,ADT,SOP) ; -- find all insurance data on a patient
"RTN","IBCNS1",90,0)
 ;
"RTN","IBCNS1",91,0)
 ; -- input DFN  = patient
"RTN","IBCNS1",92,0)
 ;          VAR  = variable to output in format of abc
"RTN","IBCNS1",93,0)
 ;                 or abc(dfn)
"RTN","IBCNS1",94,0)
 ;                 or ^tmp($j,"Insurance")
"RTN","IBCNS1",95,0)
 ;          ACT  = 1 if only active ins. desired
"RTN","IBCNS1",96,0)
 ;               = 2 if active and will not reimburse desired
"RTN","IBCNS1",97,0)
 ;               = 3 if active, will not reimburse, and indemnity are
"RTN","IBCNS1",98,0)
 ;                 all desired (for the $$INSTYP function below)
"RTN","IBCNS1",99,0)
 ;               = 4 if only active and MEDICARE WNR only desired
"RTN","IBCNS1",100,0)
 ;          ADT  = if ACT=1 or 4, then ADT is the internal date to check
"RTN","IBCNS1",101,0)
 ;                 active for, default = dt
"RTN","IBCNS1",102,0)
 ;          SOP  = if SOP=1, then sort policies in COB order
"RTN","IBCNS1",103,0)
 ;
"RTN","IBCNS1",104,0)
 ; -- output var(0)   =: number of entries insurance multiple
"RTN","IBCNS1",105,0)
 ;           var(x,0) =: ^dpt(dfn,.312,x,0)
"RTN","IBCNS1",106,0)
 ;           var(x,1) =: ^dpt(dfn,.312,x,1)
"RTN","IBCNS1",107,0)
 ;           var(x,2) =: ^dpt(dfn,.312,x,2)
"RTN","IBCNS1",108,0)
 ;           var(x,3) =: ^dpt(dfn,.312,x,3)
"RTN","IBCNS1",109,0)
 ;           var(x,4) =: ^dpt(dfn,.312,x,4)
"RTN","IBCNS1",110,0)
 ;           var(x,5) =: ^dpt(dfn,.312,x,5)
"RTN","IBCNS1",111,0)
 ;       var(x,355.3) =: ^iba(355.3,$p(var(x,0),"^",18),0)
"RTN","IBCNS1",112,0)
 ;       var("S",COB sequence,x) =: (null) as an xref for COB
"RTN","IBCNS1",113,0)
 ;
"RTN","IBCNS1",114,0)
 N X,IBMRA,IBSP
"RTN","IBCNS1",115,0)
 S X=0 I $G(ACT),$E($G(ADT),1,7)'?7N S ADT=DT
"RTN","IBCNS1",116,0)
 S (IBMRA,IBSP)=0 ;Flag to say if pt has medicare wnr, spouse has policy
"RTN","IBCNS1",117,0)
 F  S X=$O(^DPT(DFN,.312,X)) Q:'X  I $D(^(X,0)) D
"RTN","IBCNS1",118,0)
 .I $G(ACT),'$$CHK(^DPT(DFN,.312,X,0),ADT,$G(ACT)) Q
"RTN","IBCNS1",119,0)
 .S @VAR@(0)=$G(@VAR@(0))+1
"RTN","IBCNS1",120,0)
 .S @VAR@(X,0)=$$ZND(DFN,X)
"RTN","IBCNS1",121,0)
 .S @VAR@(X,1)=$G(^DPT(DFN,.312,X,1))
"RTN","IBCNS1",122,0)
 .S @VAR@(X,2)=$G(^DPT(DFN,.312,X,2))
"RTN","IBCNS1",123,0)
 .S @VAR@(X,3)=$G(^DPT(DFN,.312,X,3))
"RTN","IBCNS1",124,0)
 .S @VAR@(X,4)=$G(^DPT(DFN,.312,X,4))
"RTN","IBCNS1",125,0)
 .S @VAR@(X,5)=$G(^DPT(DFN,.312,X,5))
"RTN","IBCNS1",126,0)
 .S @VAR@(X,355.3)=$G(^IBA(355.3,+$P($G(^DPT(DFN,.312,X,0)),"^",18),0))
"RTN","IBCNS1",127,0)
 .I $G(SOP) D
"RTN","IBCNS1",128,0)
 ..N COB,WHO
"RTN","IBCNS1",129,0)
 ..S COB=$P(@VAR@(X,0),U,20)
"RTN","IBCNS1",130,0)
 ..S WHO=$P(@VAR@(X,0),U,6) S:WHO="s" IBSP=1
"RTN","IBCNS1",131,0)
 ..I $$MCRWNR^IBEFUNC(+@VAR@(X,0)) D
"RTN","IBCNS1",132,0)
 ... S COB=.5,IBMRA=1
"RTN","IBCNS1",133,0)
 ... 
"RTN","IBCNS1",134,0)
 ..S COB=$S(COB'="":COB,WHO="v":1,WHO="s":$S(IBMRA:1,1:2),1:3)
"RTN","IBCNS1",135,0)
 ..S @VAR@("S",COB,X)=""
"RTN","IBCNS1",136,0)
 ..Q
"RTN","IBCNS1",137,0)
 ; Ck for spouse's insurance, move it before any MEDICARE WNR if sorting
"RTN","IBCNS1",138,0)
 I $G(SOP),IBMRA,IBSP D
"RTN","IBCNS1",139,0)
 . ; Shuffle Medicare WNR, if necessary
"RTN","IBCNS1",140,0)
 . S X=0 F  S X=$O(@VAR@("S",.5,X)) Q:'X  S @VAR@("S",2,X)="" K @VAR@("S",.5,X)
"RTN","IBCNS1",141,0)
 . S X=0 F  S X=$O(@VAR@("S",2,X)) Q:'X  I $P(@VAR@(X,0),U,6)="s",'$P(@VAR@(X,0),U,20) S @VAR@("S",1,X)="" K @VAR@("S",2,X)
"RTN","IBCNS1",142,0)
ALLQ Q
"RTN","IBCNS1",143,0)
 ;
"RTN","IBCNS1",144,0)
ALLWNR(DFN,VAR,ADT) ; Returns 'all active and MEDICARE WNR'
"RTN","IBCNS1",145,0)
 D ALL(DFN,VAR,4,ADT)
"RTN","IBCNS1",146,0)
 Q
"RTN","IBCNS1",147,0)
 ;
"RTN","IBCNS1",148,0)
ZND(DFN,NODE) ; -- set group number and group name back into zeroth node of ins. type
"RTN","IBCNS1",149,0)
 N X,Y S (X,Y)=""
"RTN","IBCNS1",150,0)
 I '$G(DFN)!('$G(NODE)) G ZNDQ
"RTN","IBCNS1",151,0)
 S X=$G(^DPT(+DFN,.312,+NODE,0))
"RTN","IBCNS1",152,0)
 S Y=$G(^IBA(355.3,+$P(X,"^",18),0)) I Y="" G ZNDQ
"RTN","IBCNS1",153,0)
 S $P(X,"^",3)=$P(Y,"^",4) ; move group number
"RTN","IBCNS1",154,0)
 S $P(X,"^",15)=$P(Y,"^",3) ; move group name
"RTN","IBCNS1",155,0)
 ;
"RTN","IBCNS1",156,0)
ZNDQ Q X
"RTN","IBCNS1",157,0)
 ;
"RTN","IBCNS1",158,0)
INDEM(X) ; -- is this an indemnity plan
"RTN","IBCNS1",159,0)
 ; -- input zeroth node if insurance type field
"RTN","IBCNS1",160,0)
 N IBINDEM,IBCTP
"RTN","IBCNS1",161,0)
 S IBINDEM=1
"RTN","IBCNS1",162,0)
 I $P($G(^DIC(36,+X,0)),"^",13)=15 G INDEMQ ; company is indemnity co.
"RTN","IBCNS1",163,0)
 S IBCTP=$P($G(^IBA(355.3,+$P(X,"^",18),0)),"^",9)
"RTN","IBCNS1",164,0)
 I IBCTP,$P($G(^IBE(355.1,+IBCTP,0)),"^",3)=9 G INDEMQ ; plan is an indemnity plan
"RTN","IBCNS1",165,0)
 S IBINDEM=0
"RTN","IBCNS1",166,0)
INDEMQ Q IBINDEM
"RTN","IBCNS1",167,0)
 ;
"RTN","IBCNS1",168,0)
 ;
"RTN","IBCNS1",169,0)
INSTYP(DFN,DATE) ; -- return type of insurance policy for patient
"RTN","IBCNS1",170,0)
 ;
"RTN","IBCNS1",171,0)
 ; -- input    dfn := pointer to patient file (required)
"RTN","IBCNS1",172,0)
 ;            date := date of insurance (optional, default = today)
"RTN","IBCNS1",173,0)
 ;
"RTN","IBCNS1",174,0)
 ; -- output   Major Category of type of Plan (file 355.1, field .03)
"RTN","IBCNS1",175,0)
 ;             for policy which would be billed first (cob)
"RTN","IBCNS1",176,0)
 ;               null     no insurance found
"RTN","IBCNS1",177,0)
 ;               1        MAJOR MEDICAL (default)
"RTN","IBCNS1",178,0)
 ;               2        DENTAL
"RTN","IBCNS1",179,0)
 ;               3        HMO
"RTN","IBCNS1",180,0)
 ;               4        PPO
"RTN","IBCNS1",181,0)
 ;               5        MEDICARE
"RTN","IBCNS1",182,0)
 ;               6        MEDICAID
"RTN","IBCNS1",183,0)
 ;               7        TRICARE
"RTN","IBCNS1",184,0)
 ;               8        WORKMANS COMP
"RTN","IBCNS1",185,0)
 ;               9        INDEMNITY
"RTN","IBCNS1",186,0)
 ;              10        PRESCRIPTION
"RTN","IBCNS1",187,0)
 ;              11        MEDICARE SUPPLEMENTAL
"RTN","IBCNS1",188,0)
 ;              12        ALL OTHER
"RTN","IBCNS1",189,0)
 ;
"RTN","IBCNS1",190,0)
 N TYPE,POL,IBCPOL
"RTN","IBCNS1",191,0)
 S TYPE=""
"RTN","IBCNS1",192,0)
 I '$G(DFN) G INSTYPQ
"RTN","IBCNS1",193,0)
 I '$G(DATE) S DATE=DT
"RTN","IBCNS1",194,0)
 D ALL(DFN,"POL",3,DATE)
"RTN","IBCNS1",195,0)
 I $G(POL(0))<1 G INSTYPQ
"RTN","IBCNS1",196,0)
 I $G(POL(0))=1 S IBCPOL=+$O(POL(0))
"RTN","IBCNS1",197,0)
 I $G(POL(0))>1 S IBCPOL=$$COB(.POL)
"RTN","IBCNS1",198,0)
 ;
"RTN","IBCNS1",199,0)
 I IBCPOL S TYPE=$P($G(^IBE(355.1,+$P($G(POL(IBCPOL,355.3)),"^",9),0)),"^",3)
"RTN","IBCNS1",200,0)
 I TYPE="" S TYPE=1 ;default is major medical
"RTN","IBCNS1",201,0)
 ;
"RTN","IBCNS1",202,0)
INSTYPQ Q TYPE
"RTN","IBCNS1",203,0)
 ;
"RTN","IBCNS1",204,0)
COB(POL) ; -- find policy with high coordination of benefits
"RTN","IBCNS1",205,0)
 N I,X,IBC,COB,WHO,IBCOB
"RTN","IBCNS1",206,0)
 ;
"RTN","IBCNS1",207,0)
 S IBC=""
"RTN","IBCNS1",208,0)
 S I=0 F  S I=$O(POL(I)) Q:'I  D
"RTN","IBCNS1",209,0)
 .S WHO=$P($G(POL(I,0)),"^",6),COB=$P($G(POL(I,0)),"^",20)
"RTN","IBCNS1",210,0)
 .S X=$S(COB'="":COB,WHO="v":1,WHO="s":2,1:3)
"RTN","IBCNS1",211,0)
 .I 'IBC S IBC=I,IBCOB=X Q
"RTN","IBCNS1",212,0)
 .I X<IBCOB S IBC=I,IBCOB=X
"RTN","IBCNS1",213,0)
 Q IBC
"RTN","IBCNSC")
0^1^B24159978^B21343309
"RTN","IBCNSC",1,0)
IBCNSC ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 9:42am
"RTN","IBCNSC",2,0)
 ;;2.0;INTEGRATED BILLING;**46,137,184,276,320,371**;21-MAR-94;Build 57
"RTN","IBCNSC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC",4,0)
 ;
"RTN","IBCNSC",5,0)
 ;also used for IA #4694
"RTN","IBCNSC",6,0)
 ;
"RTN","IBCNSC",7,0)
EN ; -- main entry point for IBCNS INSURANCE COMPANY, IBCNS VIEW INS CO
"RTN","IBCNSC",8,0)
 NEW IB1ST
"RTN","IBCNSC",9,0)
 K IBFASTXT,VALMQUIT,VALMEVL,XQORS,^TMP("XQORS",$J),IBCNS
"RTN","IBCNSC",10,0)
 S IBCHANGE="OKAY"
"RTN","IBCNSC",11,0)
 I '$G(IBVIEW) D EN^VALM("IBCNS INSURANCE COMPANY") G ENQ
"RTN","IBCNSC",12,0)
 D EN^VALM("IBCNS VIEW INS CO")
"RTN","IBCNSC",13,0)
ENQ Q
"RTN","IBCNSC",14,0)
 ;
"RTN","IBCNSC",15,0)
HDR ; -- header code
"RTN","IBCNSC",16,0)
 S VALMHDR(1)="Insurance Company Information for: "_$E($P(^DIC(36,IBCNS,0),"^"),1,30)
"RTN","IBCNSC",17,0)
 S VALMHDR(2)="Type of Company: "_$E($P($G(^IBE(355.2,+$P($G(^DIC(36,+IBCNS,0)),"^",13),0)),"^"),1,20)_"                     Currently "_$S(+($P($G(^DIC(36,+IBCNS,0)),"^",5)):"Inactive",1:"Active")
"RTN","IBCNSC",18,0)
 Q
"RTN","IBCNSC",19,0)
 ;
"RTN","IBCNSC",20,0)
INIT ; -- init variables and list array
"RTN","IBCNSC",21,0)
 K VALMQUIT
"RTN","IBCNSC",22,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSC",23,0)
 I '$D(IBCNS) D INSCO Q:$D(VALMQUIT)
"RTN","IBCNSC",24,0)
 D BLD,HDR
"RTN","IBCNSC",25,0)
 Q
"RTN","IBCNSC",26,0)
BLD ; -- list builder
"RTN","IBCNSC",27,0)
 NEW BLNKI
"RTN","IBCNSC",28,0)
 K ^TMP("IBCNSC",$J)
"RTN","IBCNSC",29,0)
 D KILL^VALM10()    ; delete all video attributes
"RTN","IBCNSC",30,0)
 F BLNKI=1:1:54 D BLANK(.BLNKI)     ; 54 blank lines to start with
"RTN","IBCNSC",31,0)
 D PARAM^IBCNSC01      ; billing parameters
"RTN","IBCNSC",32,0)
 D MAIN^IBCNSC01       ; main mailing address
"RTN","IBCNSC",33,0)
 D CLAIMS1^IBCNSC0     ; inpatient claims office
"RTN","IBCNSC",34,0)
 D CLAIMS2^IBCNSC0     ; outpatient claims office
"RTN","IBCNSC",35,0)
 D PRESCR^IBCNSC1      ; prescription claims office
"RTN","IBCNSC",36,0)
 D APPEALS             ; appeals office
"RTN","IBCNSC",37,0)
 D INQUIRY             ; inquiry office
"RTN","IBCNSC",38,0)
 D DISP^IBCNSC02       ; parent/child associations (ESG 11/3/05)
"RTN","IBCNSC",39,0)
 D PROVID^IBCNSC1      ; provider IDs
"RTN","IBCNSC",40,0)
 D PAYER^IBCNSC01      ; payer/payer apps (ESG 7/29/02 IIV project)
"RTN","IBCNSC",41,0)
 D REMARKS^IBCNSC01    ; remarks
"RTN","IBCNSC",42,0)
 D SYN^IBCNSC01        ; synonyms
"RTN","IBCNSC",43,0)
 S VALMCNT=+$O(^TMP("IBCNSC",$J,""),-1)
"RTN","IBCNSC",44,0)
 Q
"RTN","IBCNSC",45,0)
 ;
"RTN","IBCNSC",46,0)
APPEALS ;
"RTN","IBCNSC",47,0)
 N OFFSET,START,IBCNS14,IBADD
"RTN","IBCNSC",48,0)
 S IBCNS14=$$ADDRESS^IBCNSC0(IBCNS,.14,7)
"RTN","IBCNSC",49,0)
 S START=48,OFFSET=2
"RTN","IBCNSC",50,0)
 D SET^IBCNSP(START,OFFSET+25," Appeals Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",51,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS14,"^",7),0)),"^",1))
"RTN","IBCNSC",52,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS14,"^",1))
"RTN","IBCNSC",53,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS14,"^",2))
"RTN","IBCNSC",54,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",55,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS14,"^",3)) S IBADD=1
"RTN","IBCNSC",56,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS14,"^",4),1,15)_$S($P(IBCNS14,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS14,"^",5),0)),"^",2)_" "_$E($P(IBCNS14,"^",6),1,5))
"RTN","IBCNSC",57,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS14,"^",8))
"RTN","IBCNSC",58,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS14,"^",9))
"RTN","IBCNSC",59,0)
 Q
"RTN","IBCNSC",60,0)
 ;
"RTN","IBCNSC",61,0)
INQUIRY ;
"RTN","IBCNSC",62,0)
 ;
"RTN","IBCNSC",63,0)
 N OFFSET,START,IBCNS15,IBADD
"RTN","IBCNSC",64,0)
 S IBCNS15=$$ADDRESS^IBCNSC0(IBCNS,.15,8)
"RTN","IBCNSC",65,0)
 S START=55,OFFSET=2
"RTN","IBCNSC",66,0)
 D SET^IBCNSP(START,OFFSET+25," Inquiry Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",67,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS15,"^",7),0)),"^",1))
"RTN","IBCNSC",68,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS15,"^"))
"RTN","IBCNSC",69,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS15,"^",2))
"RTN","IBCNSC",70,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",71,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS15,"^",3)) S IBADD=1
"RTN","IBCNSC",72,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS15,"^",4),1,15)_$S($P(IBCNS15,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS15,"^",5),0)),"^",2)_" "_$E($P(IBCNS15,"^",6),1,5))
"RTN","IBCNSC",73,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS15,"^",8))
"RTN","IBCNSC",74,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS15,"^",9))
"RTN","IBCNSC",75,0)
 Q
"RTN","IBCNSC",76,0)
 ;
"RTN","IBCNSC",77,0)
HELP ; -- help code
"RTN","IBCNSC",78,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSC",79,0)
 Q
"RTN","IBCNSC",80,0)
 ;
"RTN","IBCNSC",81,0)
EXIT ; -- exit code
"RTN","IBCNSC",82,0)
 K VALMQUIT,IBCNS,IBCHANGE,IBFASTXT
"RTN","IBCNSC",83,0)
 D CLEAN^VALM10
"RTN","IBCNSC",84,0)
 Q
"RTN","IBCNSC",85,0)
 ;
"RTN","IBCNSC",86,0)
INSCO ; -- select insurance company
"RTN","IBCNSC",87,0)
 NEW DLAYGO,DIC,X,Y,DTOUT,DUOUT
"RTN","IBCNSC",88,0)
 I '$D(IBCNS) D  G:$D(VALMQUIT) INSCOQ
"RTN","IBCNSC",89,0)
 .S DIC="^DIC(36,",DIC(0)="AEQMZ",DIC("S")="I '$G(^(5))"
"RTN","IBCNSC",90,0)
 .I '$G(IBVIEW) S DLAYGO=36,DIC(0)=DIC(0)_"L"
"RTN","IBCNSC",91,0)
 .D ^DIC K DIC
"RTN","IBCNSC",92,0)
 .S IBCNS=+Y
"RTN","IBCNSC",93,0)
 I $G(IBCNS)<1 K IBCNS S VALMQUIT="" G INSCOQ
"RTN","IBCNSC",94,0)
INSCOQ ;
"RTN","IBCNSC",95,0)
 K DIC
"RTN","IBCNSC",96,0)
 Q
"RTN","IBCNSC",97,0)
 ;
"RTN","IBCNSC",98,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSC",99,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSC",100,0)
 Q
"RTN","IBCNSC",101,0)
 ;
"RTN","IBCNSC",102,0)
EDIKEY() ; input transform code to determine if user is allowed to edit
"RTN","IBCNSC",103,0)
 ; certain fields in the insurance company file
"RTN","IBCNSC",104,0)
 NEW OK S OK=0
"RTN","IBCNSC",105,0)
 I $$KCHK^XUSRB("IB EDI INSURANCE EDIT") S OK=1 G EDIKEYX
"RTN","IBCNSC",106,0)
 D EN^DDIOL("You must hold the IB EDI INSURANCE EDIT security key to edit this field.",,"!!")
"RTN","IBCNSC",107,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSC",108,0)
EDIKEYX ;
"RTN","IBCNSC",109,0)
 Q OK
"RTN","IBCNSC",110,0)
 ;
"RTN","IBCNSC",111,0)
DUPQUAL(IBCNS,QUAL,FIELD) ; input transform to make sure that the sam qualifier is not used twice for
"RTN","IBCNSC",112,0)
 ; payer secondary IDs.  There are two sets of fields in file 36 that can not be duplicated.
"RTN","IBCNSC",113,0)
 ; 6.01 EDI INST SECONDARY ID QUAL(1) can not be the same as 6.03 EDI INST SECONDARY ID QUAL(2)
"RTN","IBCNSC",114,0)
 ; 6.05 EDI PROF SECONDARY ID QUAL(1) can not be the same as 6.07 EDI PROF SECONDARY ID QUAL(2)
"RTN","IBCNSC",115,0)
 ; 
"RTN","IBCNSC",116,0)
 ; Input:
"RTN","IBCNSC",117,0)
 ; IBCNS is the insurance company internal number
"RTN","IBCNSC",118,0)
 ; QUAL  is the internal code of the value being input.
"RTN","IBCNSC",119,0)
 ; FIELD is the field it is being compare with.
"RTN","IBCNSC",120,0)
 ;
"RTN","IBCNSC",121,0)
 ; Returns:
"RTN","IBCNSC",122,0)
 ; TRUE/1 if they are the same (duplicate)
"RTN","IBCNSC",123,0)
 ; FALSE/0 if they are not
"RTN","IBCNSC",124,0)
 ;
"RTN","IBCNSC",125,0)
 Q:$G(QUAL)="" 0  ; should not happen because this is invoked as an input transform
"RTN","IBCNSC",126,0)
 Q:'+$G(IBCNS) 1  ; stop from editing through fileman
"RTN","IBCNSC",127,0)
 N DUP
"RTN","IBCNSC",128,0)
 S DUP=$$GET1^DIQ(36,+$G(IBCNS)_",",+$G(FIELD),"I")
"RTN","IBCNSC",129,0)
 D CLEAN^DILF
"RTN","IBCNSC",130,0)
 Q QUAL=DUP
"RTN","IBCNSC0")
0^2^B9881323^B9886384
"RTN","IBCNSC0",1,0)
IBCNSC0 ;ALB/NLR - INSURANCE COMPANY EDIT -  ;12-MAR-1993
"RTN","IBCNSC0",2,0)
 ;;2.0; INTEGRATED BILLING ;**371**; 21-MAR-94;Build 57
"RTN","IBCNSC0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC0",4,0)
 ;
"RTN","IBCNSC0",5,0)
CLAIMS1 ; display Inpatient Claims information
"RTN","IBCNSC0",6,0)
 N OFFSET,START,IBCNS12,IBADD
"RTN","IBCNSC0",7,0)
 S START=27,OFFSET=2
"RTN","IBCNSC0",8,0)
 D SET^IBCNSP(START,OFFSET+20," Inpatient Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC0",9,0)
 S IBCNS12=$$ADDRESS(IBCNS,.12,5)
"RTN","IBCNSC0",10,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS12,"^",7),0)),"^",1))
"RTN","IBCNSC0",11,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS12,"^",1))
"RTN","IBCNSC0",12,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS12,"^",2))
"RTN","IBCNSC0",13,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC0",14,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS12,"^",3)) S IBADD=1
"RTN","IBCNSC0",15,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS12,"^",4),1,15)_$S($P(IBCNS12,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS12,"^",5),0)),"^",2)_" "_$E($P(IBCNS12,"^",6),1,5))
"RTN","IBCNSC0",16,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS12,"^",8))
"RTN","IBCNSC0",17,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS12,"^",9))
"RTN","IBCNSC0",18,0)
 Q
"RTN","IBCNSC0",19,0)
 ;
"RTN","IBCNSC0",20,0)
R1Q Q
"RTN","IBCNSC0",21,0)
CLAIMS2 ; display Outpatient Claims information
"RTN","IBCNSC0",22,0)
 ;
"RTN","IBCNSC0",23,0)
 N OFFSET,START,IBCNS16,IBADD
"RTN","IBCNSC0",24,0)
 S START=34,OFFSET=2
"RTN","IBCNSC0",25,0)
 D SET^IBCNSP(START,OFFSET+20," Outpatient Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC0",26,0)
 S IBCNS16=$$ADDRESS(IBCNS,.16,6)
"RTN","IBCNSC0",27,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS16,"^",7),0)),"^",1))
"RTN","IBCNSC0",28,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS16,"^",1))
"RTN","IBCNSC0",29,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS16,"^",2))
"RTN","IBCNSC0",30,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC0",31,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS16,"^",3)) S IBADD=1
"RTN","IBCNSC0",32,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS16,"^",4),1,15)_$S($P(IBCNS16,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS16,"^",5),0)),"^",2)_" "_$E($P(IBCNS16,"^",6),1,5))
"RTN","IBCNSC0",33,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS16,"^",8))
"RTN","IBCNSC0",34,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS16,"^",9))
"RTN","IBCNSC0",35,0)
 Q
"RTN","IBCNSC0",36,0)
 ;
"RTN","IBCNSC0",37,0)
ADDRESS(INS,NODE,PH) ; -- generic find address
"RTN","IBCNSC0",38,0)
 ;
"RTN","IBCNSC0",39,0)
 N IBX,INSSAVE,IBPH,IBFX,IBCNT,IBA
"RTN","IBCNSC0",40,0)
 S IBX="" ;S IBPH="",IBFX="",IBA=""
"RTN","IBCNSC0",41,0)
 ;
"RTN","IBCNSC0",42,0)
REDO ; gather insurance carrier's main address information 
"RTN","IBCNSC0",43,0)
 S IBX=$G(^DIC(36,+INS,.11)),IBPH=$P($G(^DIC(36,+INS,.13)),"^",1),IBFX=$P(IBX,"^",9)
"RTN","IBCNSC0",44,0)
 ;S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC0",45,0)
 ;
"RTN","IBCNSC0",46,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC0",47,0)
 ;I $D(IBCNT(IBCNS)) G ADDREQ
"RTN","IBCNSC0",48,0)
 ;S IBCNT(IBCNS)=""
"RTN","IBCNSC0",49,0)
 ;
"RTN","IBCNSC0",50,0)
 ; -- gather address information from specific office (Claims, Appeals, Inquiry)
"RTN","IBCNSC0",51,0)
 ;
"RTN","IBCNSC0",52,0)
 I $P($G(^DIC(36,+INS,+NODE)),"^",5) S IBX=$G(^DIC(36,+INS,+NODE)),IBPH=$P($G(^DIC(36,+INS,.13)),"^",PH),IBFX=$P($G(IBX),"^",9)
"RTN","IBCNSC0",53,0)
 I $P($G(^DIC(36,+INS,+NODE)),"^",7) S INSSAVE=INS,INS=$P($G(^DIC(36,+INS,+NODE)),"^",7) I INSSAVE'=INS G REDO
"RTN","IBCNSC0",54,0)
 ;
"RTN","IBCNSC0",55,0)
ADDRESQ ; concatenate company name, address, phone and fax 
"RTN","IBCNSC0",56,0)
 S $P(IBA,"^",1,6)=$P($G(IBX),"^",1,6)
"RTN","IBCNSC0",57,0)
 S $P(IBA,"^",7)=INS
"RTN","IBCNSC0",58,0)
 S $P(IBA,"^",8)=IBPH
"RTN","IBCNSC0",59,0)
 S $P(IBA,"^",9)=IBFX
"RTN","IBCNSC0",60,0)
ADDREQ Q IBA
"RTN","IBCNSC01")
0^3^B54638863^B48419928
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371**;21-MAR-94;Build 57
"RTN","IBCNSC01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 ;
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+4,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+5,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",20,0)
 ;
"RTN","IBCNSC01",21,0)
 S OFFSET=45
"RTN","IBCNSC01",22,0)
 D SET^IBCNSP(START+1,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12))
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+2,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+3,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+5,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+6,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",28,0)
 I +IBCNS3=2 D SET^IBCNSP(START+7,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",29,0)
 ;
"RTN","IBCNSC01",30,0)
 S START=11,OFFSET=2
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",34,0)
 D SET^IBCNSP(START+3,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+4,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
"RTN","IBCNSC01",36,0)
 D SET^IBCNSP(START+5,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
"RTN","IBCNSC01",37,0)
 D SET^IBCNSP(START+6,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
"RTN","IBCNSC01",38,0)
 D SET^IBCNSP(START+7,OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3)) ;
"RTN","IBCNSC01",39,0)
 ;
"RTN","IBCNSC01",40,0)
 S OFFSET=41
"RTN","IBCNSC01",41,0)
 D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",42,0)
 D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",43,0)
 D SET^IBCNSP(START+3,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
"RTN","IBCNSC01",44,0)
 D SET^IBCNSP(START+4,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
"RTN","IBCNSC01",45,0)
 D SET^IBCNSP(START+5,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
"RTN","IBCNSC01",46,0)
 D SET^IBCNSP(START+6,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
"RTN","IBCNSC01",47,0)
 Q
"RTN","IBCNSC01",48,0)
 ;
"RTN","IBCNSC01",49,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",50,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",51,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",52,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",53,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",54,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",55,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",56,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",57,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",58,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",59,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",60,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",61,0)
PHONEQ Q IBX
"RTN","IBCNSC01",62,0)
 ;
"RTN","IBCNSC01",63,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",64,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",65,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",66,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",67,0)
 S START=21,OFFSET=25
"RTN","IBCNSC01",68,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",69,0)
 N OFFSET S OFFSET=2
"RTN","IBCNSC01",70,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",71,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",72,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",73,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",74,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC01",75,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",76,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",77,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",78,0)
 Q
"RTN","IBCNSC01",79,0)
 ;
"RTN","IBCNSC01",80,0)
 ;
"RTN","IBCNSC01",81,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",82,0)
 ; this insurance company.
"RTN","IBCNSC01",83,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",84,0)
 ;
"RTN","IBCNSC01",85,0)
 NEW PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",86,0)
 NEW START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",87,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",88,0)
 I PAYERIEN D
"RTN","IBCNSC01",89,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",90,0)
 . S APP=0
"RTN","IBCNSC01",91,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",92,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",93,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",94,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",95,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",96,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",97,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",98,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",99,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",100,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID
"RTN","IBCNSC01",101,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID
"RTN","IBCNSC01",102,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN
"RTN","IBCNSC01",103,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",104,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",105,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",106,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",107,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",108,0)
 .. Q
"RTN","IBCNSC01",109,0)
 . Q
"RTN","IBCNSC01",110,0)
 ;
"RTN","IBCNSC01",111,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC01",112,0)
 S IB1ST("PAYER")=START
"RTN","IBCNSC01",113,0)
 S TITLE=" Payer Information/Electronic Insurance Verification "
"RTN","IBCNSC01",114,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",115,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",116,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",117,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",118,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",119,0)
 S IBLINE=START+2
"RTN","IBCNSC01",120,0)
 ;
"RTN","IBCNSC01",121,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",122,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",123,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",124,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",125,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",126,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",127,0)
 . Q
"RTN","IBCNSC01",128,0)
 ;
"RTN","IBCNSC01",129,0)
 ; Display all the applications
"RTN","IBCNSC01",130,0)
 S APPNAME=""
"RTN","IBCNSC01",131,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",132,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",133,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",134,0)
 . ;
"RTN","IBCNSC01",135,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",136,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",137,0)
 . D SET^IBCNSP(IBLINE,50,"Auto-Accept Info: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",138,0)
 . ;
"RTN","IBCNSC01",139,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",140,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",141,0)
 . D SET^IBCNSP(IBLINE,47,"Ident Req Subscr ID: "_$P(APPDATA(APPNAME),U,4))
"RTN","IBCNSC01",142,0)
 . ;
"RTN","IBCNSC01",143,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",144,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",145,0)
 . D SET^IBCNSP(IBLINE,51,"SSN = Subscr ID: "_$P(APPDATA(APPNAME),U,5))
"RTN","IBCNSC01",146,0)
 . ;
"RTN","IBCNSC01",147,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",148,0)
 . D SET^IBCNSP(IBLINE,8,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",149,0)
 . D SET^IBCNSP(IBLINE,54,"Transmit SSN: "_$P(APPDATA(APPNAME),U,6))
"RTN","IBCNSC01",150,0)
 . ;
"RTN","IBCNSC01",151,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",152,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",153,0)
 . ;
"RTN","IBCNSC01",154,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",155,0)
 . D SET^IBCNSP(IBLINE,13,"D-Date: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",156,0)
 . ;
"RTN","IBCNSC01",157,0)
 . Q
"RTN","IBCNSC01",158,0)
PAYERX ;
"RTN","IBCNSC01",159,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",160,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",161,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",162,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",163,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",164,0)
 Q
"RTN","IBCNSC01",165,0)
 ;
"RTN","IBCNSC01",166,0)
 ;
"RTN","IBCNSC01",167,0)
REMARKS ;
"RTN","IBCNSC01",168,0)
 ;
"RTN","IBCNSC01",169,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",170,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",171,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",172,0)
 ;
"RTN","IBCNSC01",173,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",174,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",175,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",176,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",177,0)
 . Q
"RTN","IBCNSC01",178,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",179,0)
 Q
"RTN","IBCNSC01",180,0)
 ;
"RTN","IBCNSC01",181,0)
SYN ;
"RTN","IBCNSC01",182,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",183,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",184,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",185,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",186,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",187,0)
 Q
"RTN","IBCNSC01",188,0)
 ;
"RTN","IBCNSC02")
0^4^B55602026^B55607158
"RTN","IBCNSC02",1,0)
IBCNSC02 ;ALB/ESG - Insurance Company parent/child management ;01-NOV-2005
"RTN","IBCNSC02",2,0)
 ;;2.0;INTEGRATED BILLING;**320,371**;21-MAR-94;Build 57
"RTN","IBCNSC02",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC02",4,0)
 ;
"RTN","IBCNSC02",5,0)
 Q
"RTN","IBCNSC02",6,0)
 ;
"RTN","IBCNSC02",7,0)
DISP ; entry point for display of parent/child companies
"RTN","IBCNSC02",8,0)
 NEW PCFLG,PARENT,PCDESC,TITLE,START,IBLINE,OFFSET,INSDATA,CNT,TXT
"RTN","IBCNSC02",9,0)
 S PCFLG=$P($G(^DIC(36,+IBCNS,3)),U,13),PARENT=""
"RTN","IBCNSC02",10,0)
 I PCFLG="C" S PARENT=$P($G(^DIC(36,+IBCNS,3)),U,14),PCDESC="Child"
"RTN","IBCNSC02",11,0)
 I PCFLG="P" S PCDESC="Parent"
"RTN","IBCNSC02",12,0)
 S TITLE=" Associated Insurance Companies "
"RTN","IBCNSC02",13,0)
 S (START,IBLINE)=62
"RTN","IBCNSC02",14,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC02",15,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC02",16,0)
 ;
"RTN","IBCNSC02",17,0)
 ; no link - display this and get out
"RTN","IBCNSC02",18,0)
 I PCFLG="" D  G DISPX
"RTN","IBCNSC02",19,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",20,0)
 . D SET^IBCNSP(IBLINE,3,"This insurance company is not defined as either a Parent or a Child.")
"RTN","IBCNSC02",21,0)
 . Q
"RTN","IBCNSC02",22,0)
 ;
"RTN","IBCNSC02",23,0)
 ; display for either parent or child
"RTN","IBCNSC02",24,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",25,0)
 D SET^IBCNSP(IBLINE,3,"This insurance company is defined as a "_PCDESC_" Insurance Company.")
"RTN","IBCNSC02",26,0)
 ;
"RTN","IBCNSC02",27,0)
 ; child display
"RTN","IBCNSC02",28,0)
 I PCFLG="C" D  G DISPX
"RTN","IBCNSC02",29,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",30,0)
 . D SET^IBCNSP(IBLINE,3,"It is associated with the following Parent Insurance Company:")
"RTN","IBCNSC02",31,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",32,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",33,0)
 . S INSDATA=""
"RTN","IBCNSC02",34,0)
 . I 'PARENT S INSDATA="*** Parent Insurance Company not defined ***"
"RTN","IBCNSC02",35,0)
 . I PARENT D
"RTN","IBCNSC02",36,0)
 .. N AD S AD=$$INSADD(PARENT)   ; get parent ins co data
"RTN","IBCNSC02",37,0)
 .. S INSDATA=$P(AD,U,1)_"  "_$P(AD,U,2)_"  "_$P(AD,U,6)
"RTN","IBCNSC02",38,0)
 .. Q
"RTN","IBCNSC02",39,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",40,0)
 . D SET^IBCNSP(IBLINE,8,INSDATA)
"RTN","IBCNSC02",41,0)
 . Q
"RTN","IBCNSC02",42,0)
 ;
"RTN","IBCNSC02",43,0)
 ; parent display
"RTN","IBCNSC02",44,0)
 S CNT=$$PCNT(IBCNS)    ; count # of children
"RTN","IBCNSC02",45,0)
 S TXT="There are "_CNT_" Child Insurance Companies"
"RTN","IBCNSC02",46,0)
 I CNT=1 S TXT="There is 1 Child Insurance Company"
"RTN","IBCNSC02",47,0)
 S TXT=TXT_" associated with it."
"RTN","IBCNSC02",48,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",49,0)
 D SET^IBCNSP(IBLINE,3,TXT)
"RTN","IBCNSC02",50,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",51,0)
 D SET^IBCNSP(IBLINE,3,"Select the ""AC  Associate Companies"" action to enter/edit the children.")
"RTN","IBCNSC02",52,0)
 ;
"RTN","IBCNSC02",53,0)
DISPX ; end with 2 blank lines
"RTN","IBCNSC02",54,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",55,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",56,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",57,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",58,0)
 Q
"RTN","IBCNSC02",59,0)
 ;
"RTN","IBCNSC02",60,0)
PARENT(IBCNS) ; Insurance company parent/child management
"RTN","IBCNSC02",61,0)
 ; Calls ListMan screen for parent insurance companies
"RTN","IBCNSC02",62,0)
 NEW PCFLG
"RTN","IBCNSC02",63,0)
 I '$G(IBCNS) G PARENTX
"RTN","IBCNSC02",64,0)
 S PCFLG=$P($G(^DIC(36,IBCNS,3)),U,13)
"RTN","IBCNSC02",65,0)
 ;
"RTN","IBCNSC02",66,0)
 ; special check to remove 3.13 field if 3.14 field is nil
"RTN","IBCNSC02",67,0)
 I PCFLG="C",'$P($G(^DIC(36,IBCNS,3)),U,14) D
"RTN","IBCNSC02",68,0)
 . N DIE,DA,DR S DIE=36,DA=IBCNS,DR="3.13////@" D ^DIE
"RTN","IBCNSC02",69,0)
 . Q
"RTN","IBCNSC02",70,0)
 ;
"RTN","IBCNSC02",71,0)
 ; get out if not a parent insurance company
"RTN","IBCNSC02",72,0)
 I PCFLG'="P" G PARENTX
"RTN","IBCNSC02",73,0)
 ;
"RTN","IBCNSC02",74,0)
 ; call ListMan for parent/children management
"RTN","IBCNSC02",75,0)
 D EN^VALM("IBCNS ASSOCIATIONS LIST")
"RTN","IBCNSC02",76,0)
 KILL ^TMP($J,"IBCNSL")
"RTN","IBCNSC02",77,0)
PARENTX ;
"RTN","IBCNSC02",78,0)
 Q
"RTN","IBCNSC02",79,0)
 ;
"RTN","IBCNSC02",80,0)
HDR ; List header info
"RTN","IBCNSC02",81,0)
 S VALMHDR(1)="Parent Insurance Company:"
"RTN","IBCNSC02",82,0)
 S VALMHDR(2)="     "_$$INSCO(IBCNS)
"RTN","IBCNSC02",83,0)
 S VALMHDR(3)=""
"RTN","IBCNSC02",84,0)
HDRX ;
"RTN","IBCNSC02",85,0)
 Q
"RTN","IBCNSC02",86,0)
 ;
"RTN","IBCNSC02",87,0)
BLD ; Build list contents
"RTN","IBCNSC02",88,0)
 NEW C,INSDATA,INSNAME,STCITY,ENTRY,NM,ST,IEN,X
"RTN","IBCNSC02",89,0)
 KILL ^TMP($J,"IBCNSL")
"RTN","IBCNSC02",90,0)
 S C=0
"RTN","IBCNSC02",91,0)
 F  S C=$O(^DIC(36,"APC",IBCNS,C)) Q:'C  D
"RTN","IBCNSC02",92,0)
 . S INSDATA=$$INSADD(C)
"RTN","IBCNSC02",93,0)
 . S INSNAME=$P(INSDATA,U,1)
"RTN","IBCNSC02",94,0)
 . I INSNAME="" S INSNAME="~UNKNOWN"
"RTN","IBCNSC02",95,0)
 . S STCITY=$P(INSDATA,U,7)
"RTN","IBCNSC02",96,0)
 . I STCITY="" S STCITY="~UNKNOWN"
"RTN","IBCNSC02",97,0)
 . S ^TMP($J,"IBCNSL",1,INSNAME,STCITY,C)=""
"RTN","IBCNSC02",98,0)
 . Q
"RTN","IBCNSC02",99,0)
 ;
"RTN","IBCNSC02",100,0)
 I '$D(^TMP($J,"IBCNSL",1)) D  G BLDX
"RTN","IBCNSC02",101,0)
 . ; no children insurance companies found
"RTN","IBCNSC02",102,0)
 . S ^TMP($J,"IBCNSL",2,1,0)=""
"RTN","IBCNSC02",103,0)
 . S ^TMP($J,"IBCNSL",2,2,0)="     No Children Insurance Companies Found"
"RTN","IBCNSC02",104,0)
 . S VALMCNT=2
"RTN","IBCNSC02",105,0)
 . Q
"RTN","IBCNSC02",106,0)
 ;
"RTN","IBCNSC02",107,0)
 S VALMCNT=0,ENTRY=0
"RTN","IBCNSC02",108,0)
 S NM=""
"RTN","IBCNSC02",109,0)
 F  S NM=$O(^TMP($J,"IBCNSL",1,NM)) Q:NM=""  D
"RTN","IBCNSC02",110,0)
 . S ST=""
"RTN","IBCNSC02",111,0)
 . F  S ST=$O(^TMP($J,"IBCNSL",1,NM,ST)) Q:ST=""  D
"RTN","IBCNSC02",112,0)
 .. S IEN=0
"RTN","IBCNSC02",113,0)
 .. F  S IEN=$O(^TMP($J,"IBCNSL",1,NM,ST,IEN)) Q:'IEN  D
"RTN","IBCNSC02",114,0)
 ... S VALMCNT=VALMCNT+1,ENTRY=ENTRY+1
"RTN","IBCNSC02",115,0)
 ... S X=$$FO^IBCNEUT1($J(ENTRY,3),5)_$$INSCO(IEN)
"RTN","IBCNSC02",116,0)
 ... S ^TMP($J,"IBCNSL",2,VALMCNT,0)=X
"RTN","IBCNSC02",117,0)
 ... S ^TMP($J,"IBCNSL",2,"IDX",VALMCNT,ENTRY)=""
"RTN","IBCNSC02",118,0)
 ... S ^TMP($J,"IBCNSL",3,ENTRY)=IEN_U_VALMCNT
"RTN","IBCNSC02",119,0)
 ... Q
"RTN","IBCNSC02",120,0)
 .. Q
"RTN","IBCNSC02",121,0)
 . Q
"RTN","IBCNSC02",122,0)
BLDX ;
"RTN","IBCNSC02",123,0)
 Q
"RTN","IBCNSC02",124,0)
 ;
"RTN","IBCNSC02",125,0)
LINK ; action protocol IBCNSL LINK used to associate children insurance
"RTN","IBCNSC02",126,0)
 ; companies to the current parent ins co for the list
"RTN","IBCNSC02",127,0)
 NEW DIC,X,Y,DIE,DR,DA,NEWINS,IBSTOP,PAR,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNSC02",128,0)
 D FULL^VALM1
"RTN","IBCNSC02",129,0)
 I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G LINKX
"RTN","IBCNSC02",130,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC02",131,0)
 . D PAUSE^VALM1
"RTN","IBCNSC02",132,0)
 . Q
"RTN","IBCNSC02",133,0)
 ;
"RTN","IBCNSC02",134,0)
 ; lookup ins company
"RTN","IBCNSC02",135,0)
 W !
"RTN","IBCNSC02",136,0)
 S DIC=36,DIC(0)="AEMQ",DIC("A")="Select Insurance Company: "
"RTN","IBCNSC02",137,0)
 S DIC("W")="D INSLIST^IBCNSC02(Y)"
"RTN","IBCNSC02",138,0)
 ; screen - ins co Y is not a parent and also it is not already in the list of children
"RTN","IBCNSC02",139,0)
 S DIC("S")="I $P($G(^DIC(36,Y,3)),U,13)'=""P""&'$D(^DIC(36,""APC"",IBCNS,Y))"
"RTN","IBCNSC02",140,0)
 D ^DIC K DIC
"RTN","IBCNSC02",141,0)
 I +Y'>0 G LINKX
"RTN","IBCNSC02",142,0)
 S NEWINS=+Y
"RTN","IBCNSC02",143,0)
 ;
"RTN","IBCNSC02",144,0)
 ; check to see if this selected insurance company is already a child
"RTN","IBCNSC02",145,0)
 ; for some other parent
"RTN","IBCNSC02",146,0)
 S PAR=+$P($G(^DIC(36,NEWINS,3)),U,14),IBSTOP=0
"RTN","IBCNSC02",147,0)
 I PAR,PAR'=IBCNS D
"RTN","IBCNSC02",148,0)
 . W !
"RTN","IBCNSC02",149,0)
 . S DIR(0)="YO",DIR("B")="No"
"RTN","IBCNSC02",150,0)
 . S DIR("A",1)="Please Note:  The insurance company you selected is currently identified"
"RTN","IBCNSC02",151,0)
 . S DIR("A",2)="as a Child insurance company associated with the following Parent:"
"RTN","IBCNSC02",152,0)
 . S DIR("A",3)=""
"RTN","IBCNSC02",153,0)
 . S DIR("A",4)="     "_$$INSCO(PAR)
"RTN","IBCNSC02",154,0)
 . S DIR("A",5)=""
"RTN","IBCNSC02",155,0)
 . S DIR("A")="OK to proceed and make this switch"
"RTN","IBCNSC02",156,0)
 . D ^DIR K DIR
"RTN","IBCNSC02",157,0)
 . I Y'=1 S IBSTOP=1 Q
"RTN","IBCNSC02",158,0)
 . Q
"RTN","IBCNSC02",159,0)
 I IBSTOP G LINKX
"RTN","IBCNSC02",160,0)
 ;
"RTN","IBCNSC02",161,0)
 ; lock the potential new child ins company
"RTN","IBCNSC02",162,0)
 L +^DIC(36,NEWINS):0 I '$T D LOCKED^IBTRCD1 G LINKX
"RTN","IBCNSC02",163,0)
 ;
"RTN","IBCNSC02",164,0)
 ; update selected child
"RTN","IBCNSC02",165,0)
 S DIE=36,DA=NEWINS,DR="3.13////C;3.14////"_IBCNS D ^DIE
"RTN","IBCNSC02",166,0)
 ;
"RTN","IBCNSC02",167,0)
 ; Copy the IDs from the parent
"RTN","IBCNSC02",168,0)
 D COPY^IBCEPCID(NEWINS)
"RTN","IBCNSC02",169,0)
 ;
"RTN","IBCNSC02",170,0)
 ; unlock
"RTN","IBCNSC02",171,0)
 L -^DIC(36,NEWINS)
"RTN","IBCNSC02",172,0)
 ;
"RTN","IBCNSC02",173,0)
 D BLD   ; rebuild list of children
"RTN","IBCNSC02",174,0)
LINKX ;
"RTN","IBCNSC02",175,0)
 S VALMBCK="R"
"RTN","IBCNSC02",176,0)
 Q
"RTN","IBCNSC02",177,0)
 ;
"RTN","IBCNSC02",178,0)
UNLINK ; action protocol IBCNSL UNLINK used to disassociate selected children
"RTN","IBCNSC02",179,0)
 ; insurance companies from the list.
"RTN","IBCNSC02",180,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT,IBLST,IBSUB,IBPCE,IBSEL,DA,DIE,DR
"RTN","IBCNSC02",181,0)
 D FULL^VALM1
"RTN","IBCNSC02",182,0)
 I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G UNLINKX
"RTN","IBCNSC02",183,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC02",184,0)
 . D PAUSE^VALM1
"RTN","IBCNSC02",185,0)
 . Q
"RTN","IBCNSC02",186,0)
 ;
"RTN","IBCNSC02",187,0)
 I '$D(^TMP($J,"IBCNSL",3)) D  G UNLINKX
"RTN","IBCNSC02",188,0)
 . W !!?5,"There are no insurance companies to select." D PAUSE^VALM1
"RTN","IBCNSC02",189,0)
 . Q
"RTN","IBCNSC02",190,0)
 S DIR(0)="LO^1:"_+$O(^TMP($J,"IBCNSL",3,""),-1)
"RTN","IBCNSC02",191,0)
 S DIR("A")="Select Insurance Company(s)"
"RTN","IBCNSC02",192,0)
 W ! D ^DIR K DIR
"RTN","IBCNSC02",193,0)
 I $D(DIRUT) G UNLINKX
"RTN","IBCNSC02",194,0)
 M IBLST=Y
"RTN","IBCNSC02",195,0)
 ;
"RTN","IBCNSC02",196,0)
 W !
"RTN","IBCNSC02",197,0)
 S DIR(0)="YO"
"RTN","IBCNSC02",198,0)
 S DIR("A")="OK to proceed",DIR("B")="No"
"RTN","IBCNSC02",199,0)
 D ^DIR K DIR
"RTN","IBCNSC02",200,0)
 I Y'=1 G UNLINKX
"RTN","IBCNSC02",201,0)
 ;
"RTN","IBCNSC02",202,0)
 F IBSUB=0:1 Q:'$D(IBLST(IBSUB))  F IBPCE=1:1 S IBSEL=$P(IBLST(IBSUB),",",IBPCE) Q:'IBSEL  D
"RTN","IBCNSC02",203,0)
 . S DA=+$G(^TMP($J,"IBCNSL",3,IBSEL)) I 'DA Q
"RTN","IBCNSC02",204,0)
 . S DIE=36,DR="3.13////@;3.14////@" D ^DIE
"RTN","IBCNSC02",205,0)
 . Q
"RTN","IBCNSC02",206,0)
 ;
"RTN","IBCNSC02",207,0)
 D BLD   ; rebuild list of children
"RTN","IBCNSC02",208,0)
UNLINKX ;
"RTN","IBCNSC02",209,0)
 S VALMBCK="R"
"RTN","IBCNSC02",210,0)
 Q
"RTN","IBCNSC02",211,0)
 ;
"RTN","IBCNSC02",212,0)
PCNT(Z) ; count number of children for parent ins co Z
"RTN","IBCNSC02",213,0)
 NEW C,CNT
"RTN","IBCNSC02",214,0)
 S C=0,Z=+$G(Z)
"RTN","IBCNSC02",215,0)
 F CNT=0:1 S C=$O(^DIC(36,"APC",Z,C)) Q:'C
"RTN","IBCNSC02",216,0)
 Q CNT
"RTN","IBCNSC02",217,0)
 ;
"RTN","IBCNSC02",218,0)
INSADD(Z) ; function to return ins co address components
"RTN","IBCNSC02",219,0)
 NEW INSDATA,AD,NM,L1,CITY,ST,ZIP,CITYST,STCITY
"RTN","IBCNSC02",220,0)
 S INSDATA=""
"RTN","IBCNSC02",221,0)
 S AD=$G(^DIC(36,+$G(Z),.11))
"RTN","IBCNSC02",222,0)
 S NM=$P($G(^DIC(36,Z,0)),U,1)
"RTN","IBCNSC02",223,0)
 S L1=$P(AD,U,1),CITY=$P(AD,U,4),ST=$P(AD,U,5),ZIP=$P(AD,U,6)
"RTN","IBCNSC02",224,0)
 I ST S ST=$P($G(^DIC(5,ST,0)),U,2)
"RTN","IBCNSC02",225,0)
 S CITYST=$E(CITY,1,15)_" "_ST
"RTN","IBCNSC02",226,0)
 I CITY'="",ST'="" S CITYST=$E(CITY,1,15)_","_ST
"RTN","IBCNSC02",227,0)
 ;
"RTN","IBCNSC02",228,0)
 S $P(STCITY,"|",1)=ST
"RTN","IBCNSC02",229,0)
 I ST="" S $P(STCITY,"|",1)="~~"
"RTN","IBCNSC02",230,0)
 S $P(STCITY,"|",2)=CITY
"RTN","IBCNSC02",231,0)
 I CITY="" S $P(STCITY,"|",2)="~~~~"
"RTN","IBCNSC02",232,0)
 ;
"RTN","IBCNSC02",233,0)
 S INSDATA=NM_U_L1_U_CITY_U_ST_U_ZIP_U_CITYST_U_STCITY
"RTN","IBCNSC02",234,0)
 ;         1    2    3      4    5     6        7
"RTN","IBCNSC02",235,0)
INSADDX ;
"RTN","IBCNSC02",236,0)
 Q INSDATA
"RTN","IBCNSC02",237,0)
 ;
"RTN","IBCNSC02",238,0)
INSCO(Z) ; return display data for ins co Z
"RTN","IBCNSC02",239,0)
 NEW X,Y
"RTN","IBCNSC02",240,0)
 S Y=$$INSADD(Z)
"RTN","IBCNSC02",241,0)
 S X=$$FO^IBCNEUT1($P(Y,U,1),27)
"RTN","IBCNSC02",242,0)
 S X=X_$$FO^IBCNEUT1($P(Y,U,2),26)
"RTN","IBCNSC02",243,0)
 S X=X_$$FO^IBCNEUT1($P(Y,U,6),18)
"RTN","IBCNSC02",244,0)
INSCOX ;
"RTN","IBCNSC02",245,0)
 Q X
"RTN","IBCNSC02",246,0)
 ;
"RTN","IBCNSC02",247,0)
INSLIST(INS) ; insurance company lister for ^DIC call
"RTN","IBCNSC02",248,0)
 NEW Z
"RTN","IBCNSC02",249,0)
 S Z=$$INSADD(INS)
"RTN","IBCNSC02",250,0)
 W ?27,$E($P(Z,U,2),1,20)   ; address line 1
"RTN","IBCNSC02",251,0)
 W ?47,"  ",$P(Z,U,6)       ; city, state
"RTN","IBCNSC02",252,0)
INSLISTX ;
"RTN","IBCNSC02",253,0)
 Q
"RTN","IBCNSC02",254,0)
 ;
"RTN","IBCNSC1")
0^5^B79495067^B65094362
"RTN","IBCNSC1",1,0)
IBCNSC1 ;ALB/NLR - IBCNS INSURANCE COMPANY ;23-MAR-93
"RTN","IBCNSC1",2,0)
 ;;2.0;INTEGRATED BILLING;**62,137,232,291,320,348,349,371**;21-MAR-94;Build 57
"RTN","IBCNSC1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC1",4,0)
 ;
"RTN","IBCNSC1",5,0)
% G EN^IBCNSC
"RTN","IBCNSC1",6,0)
 ;
"RTN","IBCNSC1",7,0)
AI ; -- (In)Activate Company
"RTN","IBCNSC1",8,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",9,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY G EXIT
"RTN","IBCNSC1",10,0)
 D ^IBCNSC2
"RTN","IBCNSC1",11,0)
 G EXIT
"RTN","IBCNSC1",12,0)
CC ; -- Change Insurance Company
"RTN","IBCNSC1",13,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",14,0)
 S IBCNS1=IBCNS K IBCNS D INSCO^IBCNSC
"RTN","IBCNSC1",15,0)
 I '$D(IBCNS) S IBCNS=IBCNS1
"RTN","IBCNSC1",16,0)
 K IBCNS1,VALMQUIT
"RTN","IBCNSC1",17,0)
 G EXIT
"RTN","IBCNSC1",18,0)
EA ; -- Billing,Claims,Appeals,Inquiry,Telephone,Main,Remarks,Synonyms
"RTN","IBCNSC1",19,0)
 D FULL^VALM1
"RTN","IBCNSC1",20,0)
 ;
"RTN","IBCNSC1",21,0)
 ; IB*2*320 - check key for associate company action
"RTN","IBCNSC1",22,0)
 I $G(IBY)=",13,",'$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G EXIT
"RTN","IBCNSC1",23,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC1",24,0)
 . D PAUSE^VALM1
"RTN","IBCNSC1",25,0)
 . Q
"RTN","IBCNSC1",26,0)
 ;
"RTN","IBCNSC1",27,0)
 W !!
"RTN","IBCNSC1",28,0)
 D MAIN
"RTN","IBCNSC1",29,0)
 ;
"RTN","IBCNSC1",30,0)
 ; -- was company deleted
"RTN","IBCNSC1",31,0)
 I '$D(^DIC(36,IBCNS)) W !!,"<DELETED>",!! S VALMQUIT="" Q
"RTN","IBCNSC1",32,0)
 ;
"RTN","IBCNSC1",33,0)
EXIT ;
"RTN","IBCNSC1",34,0)
 D HDR^IBCNSC,BLD^IBCNSC
"RTN","IBCNSC1",35,0)
 S VALMBCK="R"
"RTN","IBCNSC1",36,0)
 Q
"RTN","IBCNSC1",37,0)
MAIN ; -- Call edit template
"RTN","IBCNSC1",38,0)
 N IBEDIKEY,Z
"RTN","IBCNSC1",39,0)
 L +^DIC(36,+IBCNS):5 I '$T D LOCKED^IBTRCD1 G MAINQ
"RTN","IBCNSC1",40,0)
 I $G(IBY)=",12," D FACID
"RTN","IBCNSC1",41,0)
 F Z=1,2,4,9,13,14 S IBEDIKEY(Z)=$P($G(^DIC(36,+IBCNS,3)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",42,0)
 F Z=1:1:8 S IBEDIKEY(Z,6)=$P($G(^DIC(36,+IBCNS,6)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",43,0)
 I $G(IBY)'=",12," N DIE,DA,DR S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="[IBEDIT INS CO1]" D ^DIE K DIE S:$D(Y) IB("^")=1 D:$TR($P($G(^DIC(36,IBCNS,6)),U,1,8),U)]"" CUIDS(IBCNS)
"RTN","IBCNSC1",44,0)
 I $G(IBY)=",12," D EDITID^IBCEP(+IBCNS)
"RTN","IBCNSC1",45,0)
 I $F(",6,13,",$G(IBY)) D PARENT^IBCNSC02(+IBCNS)   ; parent/child management
"RTN","IBCNSC1",46,0)
 L -^DIC(36,+IBCNS)
"RTN","IBCNSC1",47,0)
MAINQ Q
"RTN","IBCNSC1",48,0)
 ;
"RTN","IBCNSC1",49,0)
FACID ; -- Edit facility ids
"RTN","IBCNSC1",50,0)
 D FACID^IBCEP2B(+IBCNS,"E")
"RTN","IBCNSC1",51,0)
 Q
"RTN","IBCNSC1",52,0)
 ;
"RTN","IBCNSC1",53,0)
SORRY ; -- can't inactivate, don't have key
"RTN","IBCNSC1",54,0)
 W !!,"You do not have access to Inactivate entries.  See your application coordinator.",! D PAUSE^VALM1
"RTN","IBCNSC1",55,0)
 Q
"RTN","IBCNSC1",56,0)
PRESCR ;
"RTN","IBCNSC1",57,0)
 N OFFSET,START,IBCNS18,IBADD
"RTN","IBCNSC1",58,0)
 S IBCNS18=$$ADDRESS^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSC1",59,0)
 S START=41,OFFSET=2
"RTN","IBCNSC1",60,0)
 D SET^IBCNSP(START,OFFSET+19," Prescription Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC1",61,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS18,"^",7),0)),"^",1))
"RTN","IBCNSC1",62,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS18,"^",1))
"RTN","IBCNSC1",63,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS18,"^",2))
"RTN","IBCNSC1",64,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS18,"^",11))
"RTN","IBCNSC1",65,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC1",66,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS18,"^",3)) S IBADD=1
"RTN","IBCNSC1",67,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS18,"^",4),1,15)_$S($P(IBCNS18,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS18,"^",5),0)),"^",2)_" "_$E($P(IBCNS18,"^",6),1,5))
"RTN","IBCNSC1",68,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS18,"^",8))
"RTN","IBCNSC1",69,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS18,"^",9))
"RTN","IBCNSC1",70,0)
 Q
"RTN","IBCNSC1",71,0)
 ;
"RTN","IBCNSC1",72,0)
PROVID N OFFSET,START,IBCNS4,IBCNS3,IBDISP,Z,LINE
"RTN","IBCNSC1",73,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC1",74,0)
 S (IB1ST("PROVID"),LINE)=START
"RTN","IBCNSC1",75,0)
 S OFFSET=2,IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3))
"RTN","IBCNSC1",76,0)
 ;       
"RTN","IBCNSC1",77,0)
 D SET^IBCNSP(LINE,OFFSET+25,"Provider IDs",IORVON,IORVOFF)
"RTN","IBCNSC1",78,0)
 N OFFSET
"RTN","IBCNSC1",79,0)
 S LINE=LINE+1,OFFSET=1
"RTN","IBCNSC1",80,0)
 D SET^IBCNSP(LINE,OFFSET,"Billing Provider Secondary ID")
"RTN","IBCNSC1",81,0)
 ;
"RTN","IBCNSC1",82,0)
 N Z,Z0,Z1,IBS,I,DIV,FT,CU,CUF,DIVISION,FORMTYPE,PIDT
"RTN","IBCNSC1",83,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",84,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",85,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",86,0)
 . Q:'($P(Z0,U,8)="E")
"RTN","IBCNSC1",87,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,3),+$P(Z0,U,4))=$P(Z0,U,6)_U_$P(Z0,U,7)
"RTN","IBCNSC1",88,0)
 ;
"RTN","IBCNSC1",89,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",90,0)
 . S DIVISION=$$DIV^IBCEP7(DIV)
"RTN","IBCNSC1",91,0)
 . S CU="",CUF=0 F  S CU=$O(IBS(DIV,CU)) Q:CU=""  D
"RTN","IBCNSC1",92,0)
 .. S FT="" F  S FT=$O(IBS(DIV,CU,FT)) Q:FT=""  D
"RTN","IBCNSC1",93,0)
 ... S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",94,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",95,0)
 ... I 'CUF,+CU S CUF=1 S TEXT=$P(DIVISION,"/")_" Care Units :",OFFSET=5 D SET^IBCNSP(LINE,OFFSET,TEXT) S LINE=LINE+1
"RTN","IBCNSC1",96,0)
 ... I CU=0 S TEXT=DIVISION_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=2
"RTN","IBCNSC1",97,0)
 ... I +CU S TEXT=$$EXPAND^IBTRE(355.92,.03,CU)_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=5
"RTN","IBCNSC1",98,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",99,0)
 ;
"RTN","IBCNSC1",100,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",101,0)
 ;
"RTN","IBCNSC1",102,0)
 K IBS
"RTN","IBCNSC1",103,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",104,0)
 D SET^IBCNSP(LINE,OFFSET,"Additional Billing Provider Secondary IDs")
"RTN","IBCNSC1",105,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",106,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",107,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",108,0)
 . Q:'($P(Z0,U,8)="A")
"RTN","IBCNSC1",109,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",110,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",111,0)
 ;
"RTN","IBCNSC1",112,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",113,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",114,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",115,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",116,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",117,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",118,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",119,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",120,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",121,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",122,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",123,0)
 ;
"RTN","IBCNSC1",124,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",125,0)
 ;
"RTN","IBCNSC1",126,0)
 K IBS
"RTN","IBCNSC1",127,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",128,0)
 D SET^IBCNSP(LINE,OFFSET,"VA-Laboratory or Facility Secondary IDs")
"RTN","IBCNSC1",129,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",130,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",131,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",132,0)
 . Q:'($P(Z0,U,8)="LF")
"RTN","IBCNSC1",133,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",134,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",135,0)
 ;
"RTN","IBCNSC1",136,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",137,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",138,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",139,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",140,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",141,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",142,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",143,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",144,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",145,0)
 ... ;S TEXT=$$EXPAND^IBTRE(355.92,.06,PIDT)_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",146,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",147,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",148,0)
 ;
"RTN","IBCNSC1",149,0)
 ;
"RTN","IBCNSC1",150,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",151,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",152,0)
 S OFFSET=2
"RTN","IBCNSC1",153,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,OFFSET+25,"ID Parameters",IORVON,IORVOFF)
"RTN","IBCNSC1",154,0)
 ;
"RTN","IBCNSC1",155,0)
 S IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3)),OFFSET=1
"RTN","IBCNSC1",156,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.01,+$P(IBCNS4,U))
"RTN","IBCNSC1",157,0)
 S LINE=LINE+1
"RTN","IBCNSC1",158,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",159,0)
 ;
"RTN","IBCNSC1",160,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (UB-04): "_$$EXPAND^IBTRE(36,4.02,+$P(IBCNS4,U,2))
"RTN","IBCNSC1",161,0)
 S LINE=LINE+1
"RTN","IBCNSC1",162,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",163,0)
 ;
"RTN","IBCNSC1",164,0)
 S TEXT="Attending/Rendering Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.03,+$P(IBCNS4,U,3))
"RTN","IBCNSC1",165,0)
 S LINE=LINE+1
"RTN","IBCNSC1",166,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",167,0)
 ;
"RTN","IBCNSC1",168,0)
 S TEXT="Referring Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.04,+$P(IBCNS4,U,4))
"RTN","IBCNSC1",169,0)
 S LINE=LINE+1
"RTN","IBCNSC1",170,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",171,0)
 ;
"RTN","IBCNSC1",172,0)
 S TEXT="Referring Provider Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.05,+$P(IBCNS4,U,5))
"RTN","IBCNSC1",173,0)
 S LINE=LINE+1
"RTN","IBCNSC1",174,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",175,0)
 ;
"RTN","IBCNSC1",176,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (1500): "_$$EXPAND^IBTRE(36,4.06,+$P(IBCNS4,U,6))
"RTN","IBCNSC1",177,0)
 S LINE=LINE+1
"RTN","IBCNSC1",178,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",179,0)
 ;
"RTN","IBCNSC1",180,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (UB-04): "_$$EXPAND^IBTRE(36,4.08,+$P(IBCNS4,U,8))
"RTN","IBCNSC1",181,0)
 S LINE=LINE+1
"RTN","IBCNSC1",182,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",183,0)
 ;
"RTN","IBCNSC1",184,0)
 S TEXT="Send VA Lab/Facility IDs or Facility Data for VAMC?: "_$$EXPAND^IBTRE(36,4.07,+$P(IBCNS4,U,7))
"RTN","IBCNSC1",185,0)
 S LINE=LINE+1
"RTN","IBCNSC1",186,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",187,0)
 ;
"RTN","IBCNSC1",188,0)
 S TEXT="Transmit no Billing Provider Sec. ID for the Electronic Plan Types: "
"RTN","IBCNSC1",189,0)
 S LINE=LINE+1
"RTN","IBCNSC1",190,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",191,0)
 ;
"RTN","IBCNSC1",192,0)
 N TAR,ERR,IBCT
"RTN","IBCNSC1",193,0)
 D LIST^DIC(36.013,","_IBCNS_",",".01",,10,,,,,,"TAR","ERR")
"RTN","IBCNSC1",194,0)
 F IBCT=1:1:+$G(TAR("DILIST",0)) D
"RTN","IBCNSC1",195,0)
 . S TEXT=TAR("DILIST",1,IBCT)
"RTN","IBCNSC1",196,0)
 . S LINE=LINE+1
"RTN","IBCNSC1",197,0)
 . D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",198,0)
 ;
"RTN","IBCNSC1",199,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",200,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",201,0)
 Q
"RTN","IBCNSC1",202,0)
 ;       
"RTN","IBCNSC1",203,0)
INSDEF(IBINS,IBPTYP) ; Returns the default id # for an ins co, if possible
"RTN","IBCNSC1",204,0)
 N X
"RTN","IBCNSC1",205,0)
 S X=""
"RTN","IBCNSC1",206,0)
 I IBINS,IBPTYP S X=$P($G(^IBA(355.91,+$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*","")),0)),U,7)
"RTN","IBCNSC1",207,0)
 Q X
"RTN","IBCNSC1",208,0)
 ;
"RTN","IBCNSC1",209,0)
CUIDS(IBCNS) ;
"RTN","IBCNSC1",210,0)
 N DIE,DA,DR,PIECE,DAT6,Y
"RTN","IBCNSC1",211,0)
 S DAT6=$P(^DIC(36,IBCNS,6),U,1,8) ; get the Payer IDs
"RTN","IBCNSC1",212,0)
 ;
"RTN","IBCNSC1",213,0)
 ; Make sure each qualifier has an ID and vice versa
"RTN","IBCNSC1",214,0)
 F PIECE=1,3,5,7 D
"RTN","IBCNSC1",215,0)
 . I $TR($P(DAT6,U,PIECE,PIECE+1),U)="" Q  ; both blank
"RTN","IBCNSC1",216,0)
 . I $P(DAT6,U,PIECE)]"",$P(DAT6,U,PIECE+1)]"" Q  ; both have data
"RTN","IBCNSC1",217,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="6.0"_$S($P(DAT6,U,PIECE)]"":PIECE,1:PIECE+1)_"////@"
"RTN","IBCNSC1",218,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",219,0)
 ;
"RTN","IBCNSC1",220,0)
 S DAT6=$P($G(^DIC(36,IBCNS,6)),U,1,8) ; get the Payer IDs again since they may have changed above.
"RTN","IBCNSC1",221,0)
 ;
"RTN","IBCNSC1",222,0)
 ; Make sure the first pair of ID/Qual are populated if the 2nd pair is.  If not, move em over.
"RTN","IBCNSC1",223,0)
 ; This is done for institutional then professional
"RTN","IBCNSC1",224,0)
 F PIECE=1,5 D
"RTN","IBCNSC1",225,0)
 . I $P(DAT6,U,PIECE)]"" Q  ; already has set one
"RTN","IBCNSC1",226,0)
 . I $P(DAT6,U,PIECE+2)="" Q  ; has no second set
"RTN","IBCNSC1",227,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS
"RTN","IBCNSC1",228,0)
 . ; deleting the qualifier triggers deletion of the ID
"RTN","IBCNSC1",229,0)
 . S DR="6.0"_PIECE_"////"_$P(DAT6,U,PIECE+2)_";6.0"_(PIECE+1)_"////"_$P(DAT6,U,PIECE+3)_";6.0"_(PIECE+2)_"////@"
"RTN","IBCNSC1",230,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",231,0)
 Q
"RTN","IBCNSEH")
0^28^B5882362^B7694394
"RTN","IBCNSEH",1,0)
IBCNSEH ;ALB/AAS - EXTENDED HELP FOR INSURANCE MANAGEMENT ;28-MAY-93
"RTN","IBCNSEH",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,371**;21-MAR-94;Build 57
"RTN","IBCNSEH",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSEH",4,0)
 ;
"RTN","IBCNSEH",5,0)
INS ; -- Help for Insurance Type
"RTN","IBCNSEH",6,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",7,0)
 W !!,"The way we store and think about patient insurance information has been"
"RTN","IBCNSEH",8,0)
 W !,"dramatically changed.  We are separating out information that is specific"
"RTN","IBCNSEH",9,0)
 W !,"to an insurance company, specific to the patient, specific to the group plan,"
"RTN","IBCNSEH",10,0)
 W !,"specific to the annual benefits available, and the annual benefits already"
"RTN","IBCNSEH",11,0)
 W !,"used."
"RTN","IBCNSEH",12,0)
 W !!,"To start, you must select the insurance company for the patient's policy.",!
"RTN","IBCNSEH",13,0)
 Q
"RTN","IBCNSEH",14,0)
PAT ; -- Help for entering patient specific information
"RTN","IBCNSEH",15,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",16,0)
 W !!,"Now you may enter the patient specific policy information.",!
"RTN","IBCNSEH",17,0)
 Q
"RTN","IBCNSEH",18,0)
POL ; -- Help for policy specific information
"RTN","IBCNSEH",19,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",20,0)
 W !!,"You can now edit information specific to the PLAN.  Remember, updating"
"RTN","IBCNSEH",21,0)
 W !,"PLAN information will affect all patients with this plan, if it is a"
"RTN","IBCNSEH",22,0)
 W !,"group plan, and not just the current patient.",!
"RTN","IBCNSEH",23,0)
 Q
"RTN","IBCNSEH",24,0)
 ;
"RTN","IBCNSEH",25,0)
SEL ; -- help for selecting a new HIP
"RTN","IBCNSEH",26,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",27,0)
 W !!,"Each Insurance policy entry for a patient must be associated with an"
"RTN","IBCNSEH",28,0)
 W !,"Insurance Plan offered by the Insurance company you just selected."
"RTN","IBCNSEH",29,0)
 W !,"You will be given a choice of selecting previously entered Group Plans or"
"RTN","IBCNSEH",30,0)
 W !,"you may enter a new one.  If you enter a new Insurance Plan you"
"RTN","IBCNSEH",31,0)
 W !,"must enter whether or not this is a group or individual plan.",!
"RTN","IBCNSEH",32,0)
 Q
"RTN","IBCNSEH",33,0)
AB ;
"RTN","IBCNSEH",34,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",35,0)
 Q
"RTN","IBCNSEH",36,0)
BU ;
"RTN","IBCNSEH",37,0)
 Q:'$G(IBCNSEH)
"RTN","IBCNSEH",38,0)
 Q
"RTN","IBCNSM32")
0^21^B26481916^B28247845
"RTN","IBCNSM32",1,0)
IBCNSM32 ;ALB/AAS - INSURANCE MANAGEMENT - POLICY EDIT ;23-JAN-95
"RTN","IBCNSM32",2,0)
 ;;2.0;INTEGRATED BILLING;**28,40,52,85,103,133,361,371**;21-MAR-94;Build 57
"RTN","IBCNSM32",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSM32",4,0)
 ;
"RTN","IBCNSM32",5,0)
PATPOL(IBCDFN) ; -- edit patient specific policy info
"RTN","IBCNSM32",6,0)
 I '$G(IBCDFN) G PATPOLQ
"RTN","IBCNSM32",7,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSM32",8,0)
 D POL^IBCNSU41(DFN)
"RTN","IBCNSM32",9,0)
 ;
"RTN","IBCNSM32",10,0)
 ; -- give warning if expired or inactive co.
"RTN","IBCNSM32",11,0)
 I $P(^DPT(DFN,.312,IBCDFN,0),"^",4),$P(^(0),"^",4)'>DT W !,"WARNING:  This appears to be an expired policy!",!
"RTN","IBCNSM32",12,0)
 I $P(^DIC(36,+$P(^DPT(DFN,.312,IBCDFN,0),"^"),0),"^",5) W !,*7,"WARNING:  This insurance company is INACTIVE!",!
"RTN","IBCNSM32",13,0)
 ;
"RTN","IBCNSM32",14,0)
 N IBAD,IBDIF,DA,DR,DIC,DIE,DGSENFLG S DGSENFLG=1
"RTN","IBCNSM32",15,0)
 L +^DPT(DFN,.312,+IBCDFN):5 I '$T D LOCKED^IBTRCD1 G PATPOLQ
"RTN","IBCNSM32",16,0)
 ;
"RTN","IBCNSM32",17,0)
 D EDIT^IBCNSP1(DFN,IBCDFN,.IBQUIT)    ; IB*371 edit 2.312 subfile data
"RTN","IBCNSM32",18,0)
 ;
"RTN","IBCNSM32",19,0)
 ; If the 2.312 subfile entry was deleted then unlock and get out
"RTN","IBCNSM32",20,0)
 I '$D(^DPT(DFN,.312,IBCDFN,0)) L -^DPT(DFN,.312,+IBCDFN) G PATPOLQ
"RTN","IBCNSM32",21,0)
 ;
"RTN","IBCNSM32",22,0)
 ; -- if the company was changed, change the policy plan
"RTN","IBCNSM32",23,0)
 I $G(IBREG),$G(IBCNS),+$G(^DPT(DFN,.312,IBCDFN,0))'=IBCNS D CHPL
"RTN","IBCNSM32",24,0)
 ;
"RTN","IBCNSM32",25,0)
 K IBFUTUR
"RTN","IBCNSM32",26,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSM32",27,0)
 I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSM32",28,0)
 L -^DPT(DFN,.312,+IBCDFN)
"RTN","IBCNSM32",29,0)
 ;
"RTN","IBCNSM32",30,0)
 D FUTURE^IBCNSM31 K Y,IBFUTUR
"RTN","IBCNSM32",31,0)
PATPOLQ Q
"RTN","IBCNSM32",32,0)
 ;
"RTN","IBCNSM32",33,0)
CHPL ; Change policy plan if the policy company differs from plan company.
"RTN","IBCNSM32",34,0)
 ;  Required variable input:
"RTN","IBCNSM32",35,0)
 ;        DFN  --  pointer to the patient in file #2
"RTN","IBCNSM32",36,0)
 ;     IBCDFN  --  pointer to the policy in file #2.312
"RTN","IBCNSM32",37,0)
 ;      IBCNS  --  pointer to the plan company in file #36
"RTN","IBCNSM32",38,0)
 ;
"RTN","IBCNSM32",39,0)
 N IBBU,IBCNS1,IBCPOL1,IBNEWP1,IBPLAN,IBIP,IBT,X
"RTN","IBCNSM32",40,0)
 S X=$G(^DPT(DFN,.312,IBCDFN,0)),IBCNS1=+X
"RTN","IBCNSM32",41,0)
 S IBPLAN=$P(X,"^",18),IBIP='$P($G(^IBA(355.3,IBPLAN,0)),"^",2)
"RTN","IBCNSM32",42,0)
 W !!,"Since you have changed the Insurance Company to ",$E($P($G(^DIC(36,IBCNS1,0)),"^"),1,25),","
"RTN","IBCNSM32",43,0)
 W !,"you must now change the Insurance Plan to which this veteran"
"RTN","IBCNSM32",44,0)
 W !,"is subscribing to one which is offered by this company!",!
"RTN","IBCNSM32",45,0)
 ;
"RTN","IBCNSM32",46,0)
 ; - warn about benefits used
"RTN","IBCNSM32",47,0)
 D BU^IBCNSJ21 I $O(IBBU(0)) D
"RTN","IBCNSM32",48,0)
 .W !,"The current policy plan has Benefits Used associated with it!"
"RTN","IBCNSM32",49,0)
 .W !,"If you add or select another plan to associate with this policy,"
"RTN","IBCNSM32",50,0)
 .W !,"these Benefits Used will be deleted!",!
"RTN","IBCNSM32",51,0)
 ;
"RTN","IBCNSM32",52,0)
 ; - warn about Individual Plans
"RTN","IBCNSM32",53,0)
 I IBIP D
"RTN","IBCNSM32",54,0)
 .W !,"  ***  Please note:  Since the veteran's current plan is an Individual Plan,"
"RTN","IBCNSM32",55,0)
 .W !?21,"this plan will be deleted if you add or select a new"
"RTN","IBCNSM32",56,0)
 .W !?21,"plan to associate with this policy.",!
"RTN","IBCNSM32",57,0)
 ;
"RTN","IBCNSM32",58,0)
 ; - select or add a new plan
"RTN","IBCNSM32",59,0)
 S IBCPOL1=$$LK^IBCNSM31(IBCNS1)
"RTN","IBCNSM32",60,0)
 I 'IBCPOL1 D NEW^IBCNSJ3(IBCNS1,.IBCPOL1) S:IBCPOL1 IBNEWP1=1
"RTN","IBCNSM32",61,0)
 I 'IBCPOL1 D  G CHPLQ
"RTN","IBCNSM32",62,0)
 .W !!,"A new plan was not added or selected!"
"RTN","IBCNSM32",63,0)
 .W !,"Changing the policy company back to ",$E($P($G(^DIC(36,IBCNS,0)),"^"),1,25),"..."
"RTN","IBCNSM32",64,0)
 .S DIE="^DPT(DFN,.312,",DA(1)=DFN,DA=IBCDFN,DR=".01////"_IBCNS_";1.05///NOW;1.06////"_DUZ D ^DIE K DA,DIE,DR
"RTN","IBCNSM32",65,0)
 ;
"RTN","IBCNSM32",66,0)
 W !!,"Changing the policy plan..."
"RTN","IBCNSM32",67,0)
 S DIE="^DPT(DFN,.312,",DA(1)=DFN,DA=IBCDFN,DR=".18////"_IBCPOL1_";1.05///NOW;1.06////"_DUZ D ^DIE K DA,DIE,DR
"RTN","IBCNSM32",68,0)
 I IBIP!$G(IBNEWP) W !!,"Deleting the ",$S(IBIP:"current Individual",1:"previously-added")," plan for ",$E($P($G(^DIC(36,IBCNS,0)),"^"),1,25),"..." D DEL^IBCNSJ(IBPLAN)
"RTN","IBCNSM32",69,0)
 ;
"RTN","IBCNSM32",70,0)
 ; - delete any dangling benefits used
"RTN","IBCNSM32",71,0)
 I $O(IBBU(0)) D
"RTN","IBCNSM32",72,0)
 .N IBDAT
"RTN","IBCNSM32",73,0)
 .W !!,"Deleting current Benefits Used... "
"RTN","IBCNSM32",74,0)
 .S IBDAT="" F  S IBDA=$O(IBBU(IBDAT)) Q:IBDAT=""  D DBU^IBCNSJ(IBBU(IBDAT))
"RTN","IBCNSM32",75,0)
 ;
"RTN","IBCNSM32",76,0)
 ; - repoint all Insurance Reviews to new company
"RTN","IBCNSM32",77,0)
 I $$IR^IBCNSJ21(DFN,IBCDFN) D
"RTN","IBCNSM32",78,0)
 .W !!,"Repointing all Insurance Reviews to ",$E($P($G(^DIC(36,IBCNS1,0)),"^"),1,25),"... "
"RTN","IBCNSM32",79,0)
 .S IBT=0 F  S IBT=$O(^IBT(356.2,"D",DFN,IBT)) Q:'IBT  I $P($G(^IBT(356.2,IBT,1)),"^",5)=IBCDFN,$P($G(^(0)),"^",8)'=IBCNS1 S DA=IBT,DR=".08////"_IBCNS1,DIE="^IBT(356.2," D ^DIE K DA,DR,DIE W "."
"RTN","IBCNSM32",80,0)
 ;
"RTN","IBCNSM32",81,0)
 S IBCNS=IBCNS1,IBNEWP=$G(IBNEWP1)
"RTN","IBCNSM32",82,0)
CHPLQ Q
"RTN","IBCNSM32",83,0)
 ;
"RTN","IBCNSM32",84,0)
PLAN(DFN,IBCDFN,IBCNS) ; Fix policies when identified.
"RTN","IBCNSM32",85,0)
 ;
"RTN","IBCNSM32",86,0)
 ;  This function is invoked from Inactivate Plan or Change Policy Plan,
"RTN","IBCNSM32",87,0)
 ;  when it is recognized that the policy and plan companies are out
"RTN","IBCNSM32",88,0)
 ;  of synch.  If the user doesn't select a new plan to associate with
"RTN","IBCNSM32",89,0)
 ;  the policy, the policy company will be changed to the plan company.
"RTN","IBCNSM32",90,0)
 ;
"RTN","IBCNSM32",91,0)
 ;  The input parameters are defined above.
"RTN","IBCNSM32",92,0)
 ;
"RTN","IBCNSM32",93,0)
 N IBNEWP
"RTN","IBCNSM32",94,0)
 I '$G(DFN)!'$G(IBCDFN)!'$G(IBCNS) G PLANQ
"RTN","IBCNSM32",95,0)
 W !!,*7,"The policy company and plan company are not the same!!"
"RTN","IBCNSM32",96,0)
 W !,"This inconsistency probably occurred in the past when changing"
"RTN","IBCNSM32",97,0)
 W !,"the policy company through Screen 5 of Registration."
"RTN","IBCNSM32",98,0)
 W !!,"You must resolve this inconsistency.  If you do not choose a new plan"
"RTN","IBCNSM32",99,0)
 W !,"offered by the policy company, the policy company will be changed to"
"RTN","IBCNSM32",100,0)
 W !,"the plan company (",$P($G(^DIC(36,IBCNS,0)),"^"),") ...."
"RTN","IBCNSM32",101,0)
 D CHPL
"RTN","IBCNSM32",102,0)
PLANQ Q
"RTN","IBCNSM32",103,0)
HLP ; -- help text for subscriber id
"RTN","IBCNSM32",104,0)
 W !,?5,"Enter Medicare Claim Number (Subscriber ID) exactly as it"
"RTN","IBCNSM32",105,0)
 W !,?5,"appears on the Medicare Insurance Card including All Characters."
"RTN","IBCNSM32",106,0)
 W !,?5,"Valid HICN formats are:  1-3 alpha characters followed by 6 or 9 digits, "
"RTN","IBCNSM32",107,0)
 W !,?5,"or 9 digits followed by 1 alpha character optionally followed by another "
"RTN","IBCNSM32",108,0)
 W !,?5,"alpha character or 1 digit."
"RTN","IBCNSM32",109,0)
 Q
"RTN","IBCNSP")
0^25^B42668156^B31460590
"RTN","IBCNSP",1,0)
IBCNSP ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,43,52,85,251,363,371**;21-MAR-94;Build 57
"RTN","IBCNSP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP",4,0)
% ;
"RTN","IBCNSP",5,0)
EN ; -- main entry point for IBCNS EXPANDED POLICY
"RTN","IBCNSP",6,0)
 N IB1ST
"RTN","IBCNSP",7,0)
 K VALMQUIT,IBPPOL
"RTN","IBCNSP",8,0)
 S IBTOP="IBCNSP"
"RTN","IBCNSP",9,0)
 D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSP",10,0)
 Q
"RTN","IBCNSP",11,0)
 ;
"RTN","IBCNSP",12,0)
HDR ; -- header code
"RTN","IBCNSP",13,0)
 N W,X,Y,Z
"RTN","IBCNSP",14,0)
 S VALMHDR(1)="Expanded Policy Information for: "_$E($P(^DPT(DFN,0),U),1,20)_"  "_$P($$PT^IBEFUNC(DFN),U,2)
"RTN","IBCNSP",15,0)
 S Z=$G(^DPT(DFN,.312,+$P(IBPPOL,U,4),0))
"RTN","IBCNSP",16,0)
 S W=$P($G(^IBA(355.3,+$P(Z,U,18),0)),U,11)
"RTN","IBCNSP",17,0)
 S Y=$E($P($G(^DIC(36,+Z,0)),U),1,20)_" Insurance Company"
"RTN","IBCNSP",18,0)
 S X="** Plan Currently "_$S(W:"Ina",1:"A")_"ctive **"
"RTN","IBCNSP",19,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,Y,48,29)
"RTN","IBCNSP",20,0)
 Q
"RTN","IBCNSP",21,0)
 ;
"RTN","IBCNSP",22,0)
INIT ; -- init variables and list array
"RTN","IBCNSP",23,0)
 K VALMQUIT
"RTN","IBCNSP",24,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSP",25,0)
 I '$D(IBPPOL) D PPOL Q:$D(VALMQUIT)
"RTN","IBCNSP",26,0)
 K ^TMP("IBCNSVP",$J)
"RTN","IBCNSP",27,0)
 D BLD,HDR
"RTN","IBCNSP",28,0)
 Q
"RTN","IBCNSP",29,0)
 ;
"RTN","IBCNSP",30,0)
BLD ; -- list builder
"RTN","IBCNSP",31,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPDX",$J)
"RTN","IBCNSP",32,0)
 D KILL^VALM10()
"RTN","IBCNSP",33,0)
 F I=1:1:20 D BLANK(.I)    ; start with 20 blank lines
"RTN","IBCNSP",34,0)
 N IBCDFND,IBCDFND1,IBCDFND2,IBCDFND4,IBCDFND5
"RTN","IBCNSP",35,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,U,4),0)),IBCDFND1=$G(^(1)),IBCDFND2=$G(^(2)),IBCDFND4=$G(^(4)),IBCDFND5=$G(^(5))
"RTN","IBCNSP",36,0)
 S IBCPOL=+$P(IBCDFND,U,18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,U,4)
"RTN","IBCNSP",37,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,U,18),0)),IBCPOLD1=$G(^(1))
"RTN","IBCNSP",38,0)
 S IBCPOLD2=$G(^IBA(355.3,+$G(IBCPOL),6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSP",39,0)
 ;
"RTN","IBCNSP",40,0)
 D POLICY^IBCNSP0                   ; plan information
"RTN","IBCNSP",41,0)
 D INS^IBCNSP0                      ; insurance company
"RTN","IBCNSP",42,0)
 D UR                               ; utilization review info
"RTN","IBCNSP",43,0)
 D EFFECT                           ; effective dates & source of info
"RTN","IBCNSP",44,0)
 D SUBSC^IBCNSP01                   ; subscriber info
"RTN","IBCNSP",45,0)
 D EMP                              ; subscriber's employer info
"RTN","IBCNSP",46,0)
 D SPON^IBCNSP0                     ; insured person's info
"RTN","IBCNSP",47,0)
 D ID^IBCNSP01                      ; ins co ID numbers (IB*2*371)
"RTN","IBCNSP",48,0)
 D PLIM                             ; plan coverage limitations
"RTN","IBCNSP",49,0)
 D VER^IBCNSP01                     ; user/verifier/editor info
"RTN","IBCNSP",50,0)
 D CONTACT^IBCNSP0                  ; last insurance contact
"RTN","IBCNSP",51,0)
 D COMMENT                          ; comments - policy & plan
"RTN","IBCNSP",52,0)
 D RIDER^IBCNSP01                   ; policy rider info
"RTN","IBCNSP",53,0)
 ;
"RTN","IBCNSP",54,0)
 S VALMCNT=+$O(^TMP("IBCNSVP",$J,""),-1)
"RTN","IBCNSP",55,0)
 Q
"RTN","IBCNSP",56,0)
 ;
"RTN","IBCNSP",57,0)
COMMENT ; -- Comment region
"RTN","IBCNSP",58,0)
 N START,OFFSET,IBL,IBI
"RTN","IBCNSP",59,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",60,0)
 S IB1ST("COMMENT")=START
"RTN","IBCNSP",61,0)
 D SET(START,OFFSET," Comment -- Patient Policy ",IORVON,IORVOFF)
"RTN","IBCNSP",62,0)
 S IBL=IBL+1
"RTN","IBCNSP",63,0)
 D SET(IBL,OFFSET,$S($P(IBCDFND1,U,8)="":"None",1:$P(IBCDFND1,U,8)))
"RTN","IBCNSP",64,0)
 S IBL=IBL+1
"RTN","IBCNSP",65,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",66,0)
 S IBL=IBL+1
"RTN","IBCNSP",67,0)
 D SET(IBL,OFFSET," Comment -- Group Plan ",IORVON,IORVOFF)
"RTN","IBCNSP",68,0)
 S IBI=0 F  S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:IBI<1  D
"RTN","IBCNSP",69,0)
 . S IBL=IBL+1
"RTN","IBCNSP",70,0)
 . D SET(IBL,OFFSET,"  "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSP",71,0)
 . Q
"RTN","IBCNSP",72,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",73,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",74,0)
 Q
"RTN","IBCNSP",75,0)
 ;
"RTN","IBCNSP",76,0)
EFFECT ; -- Effective date region
"RTN","IBCNSP",77,0)
 N START,OFFSET
"RTN","IBCNSP",78,0)
 S START=16,OFFSET=45
"RTN","IBCNSP",79,0)
 D SET(START,OFFSET-4," Effective Dates & Source ",IORVON,IORVOFF)
"RTN","IBCNSP",80,0)
 D SET(START+1,OFFSET," Effective Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,8)))
"RTN","IBCNSP",81,0)
 D SET(START+2,OFFSET,"Expiration Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,4)))
"RTN","IBCNSP",82,0)
 D SET(START+3,OFFSET," Source of Info: "_$$EXPAND^IBTRE(2.312,1.09,$P($G(IBCDFND1),U,9)))
"RTN","IBCNSP",83,0)
 D SET(START+4,OFFSET-4,"Policy Not Billable: "_$S($P($G(^DPT(DFN,.312,IBCDFN,3)),"^",4):"YES",1:"NO"))
"RTN","IBCNSP",84,0)
 Q
"RTN","IBCNSP",85,0)
 ;
"RTN","IBCNSP",86,0)
UR ; -- UR of insurance region
"RTN","IBCNSP",87,0)
 N START,OFFSET
"RTN","IBCNSP",88,0)
 S START=16,OFFSET=2
"RTN","IBCNSP",89,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSP",90,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,U,5)))
"RTN","IBCNSP",91,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,U,12)))
"RTN","IBCNSP",92,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,U,6)))
"RTN","IBCNSP",93,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,U,7)))
"RTN","IBCNSP",94,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,U,8)))
"RTN","IBCNSP",95,0)
 Q
"RTN","IBCNSP",96,0)
EMP ; -- Insurance Employer Region
"RTN","IBCNSP",97,0)
 N OFFSET,START,IBADD
"RTN","IBCNSP",98,0)
 S START=24,OFFSET=40
"RTN","IBCNSP",99,0)
 D SET(START,OFFSET," Subscriber's Employer Information ",IORVON,IORVOFF)
"RTN","IBCNSP",100,0)
 D SET(START+1,OFFSET,"Emp Sponsored Plan: "_$S(+$P(IBCDFND2,U,10):"Yes",1:"No"))
"RTN","IBCNSP",101,0)
 D SET(START+2,OFFSET,"          Employer: "_$P(IBCDFND2,U,9))
"RTN","IBCNSP",102,0)
 D SET(START+3,OFFSET," Employment Status: "_$$EXPAND^IBTRE(2.312,2.11,$P(IBCDFND2,U,11)))
"RTN","IBCNSP",103,0)
 D SET(START+4,OFFSET,"   Retirement Date: "_$$DAT1^IBOUTL($P(IBCDFND2,U,12)))
"RTN","IBCNSP",104,0)
 D SET(START+5,OFFSET,"Claims to Employer: "_$S(+IBCDFND2:"Yes, Send to Employer",1:"No, Send to Insurance Company"))
"RTN","IBCNSP",105,0)
 ;
"RTN","IBCNSP",106,0)
 D SET(START+6,OFFSET,"            Street: "_$P(IBCDFND2,U,2)) S IBADD=1
"RTN","IBCNSP",107,0)
 I $P(IBCDFND2,U,3)'="" D SET(START+7,OFFSET,"          Street 2: "_$P(IBCDFND2,U,3)) S IBADD=2
"RTN","IBCNSP",108,0)
 I $P(IBCDFND2,U,4)'="" D SET(START+8,OFFSET,"          Street 3: "_$P(IBCDFND2,U,4)) S IBADD=3
"RTN","IBCNSP",109,0)
 D SET(START+6+IBADD,OFFSET,"        City/State: "_$E($P(IBCDFND2,U,5),1,15)_$S($P(IBCDFND2,U,5)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFND2,U,6),0)),U,2)_" "_$E($P(IBCDFND2,U,7),1,5))
"RTN","IBCNSP",110,0)
 D SET(START+7+IBADD,OFFSET,"             Phone: "_$P(IBCDFND2,U,8))
"RTN","IBCNSP",111,0)
 ;
"RTN","IBCNSP",112,0)
 ; couple of blank lines to end this section
"RTN","IBCNSP",113,0)
 D SET(START+8+IBADD,2," ")
"RTN","IBCNSP",114,0)
 D SET(START+9+IBADD,2," ")
"RTN","IBCNSP",115,0)
 ;
"RTN","IBCNSP",116,0)
EMPQ Q
"RTN","IBCNSP",117,0)
 ;
"RTN","IBCNSP",118,0)
PLIM ; plan coverage limitations/plan limitation category display
"RTN","IBCNSP",119,0)
 N START,END S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP",120,0)
 S IB1ST("PLIM")=START
"RTN","IBCNSP",121,0)
 D LIMBLD^IBCNSC41(START,2)
"RTN","IBCNSP",122,0)
 S END=$O(^TMP("IBCNSVP",$J,""),-1)  ; last line constructed
"RTN","IBCNSP",123,0)
 D SET(END+1,2," ")    ; 2 blank lines to end this section
"RTN","IBCNSP",124,0)
 D SET(END+2,2," ")
"RTN","IBCNSP",125,0)
PLIMX ;
"RTN","IBCNSP",126,0)
 Q
"RTN","IBCNSP",127,0)
 ; 
"RTN","IBCNSP",128,0)
HELP ; -- help code
"RTN","IBCNSP",129,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSP",130,0)
 Q
"RTN","IBCNSP",131,0)
 ;
"RTN","IBCNSP",132,0)
EXIT ; -- exit code
"RTN","IBCNSP",133,0)
 K IBPPOL,VALMQUIT,IBCNS,IBCPOL,IBCPOLD,IBCPOLD1,IBCPOLD2,IBCDFND,IBCDFND1,IBCDFND2
"RTN","IBCNSP",134,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSP",135,0)
 Q
"RTN","IBCNSP",136,0)
 ;
"RTN","IBCNSP",137,0)
EXPND ; -- expand code
"RTN","IBCNSP",138,0)
 Q
"RTN","IBCNSP",139,0)
 ;
"RTN","IBCNSP",140,0)
PPOL ; -- select patient, select policy
"RTN","IBCNSP",141,0)
 I '$D(DFN) D  G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",142,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP",143,0)
 .S DFN=+Y
"RTN","IBCNSP",144,0)
 I $G(DFN)<1 S VALMQUIT="" G PPOLQ
"RTN","IBCNSP",145,0)
 ;
"RTN","IBCNSP",146,0)
 I '$O(^DPT(DFN,.312,0)) W !!,"Patient doesn't have Insurance" K DFN G PPOL
"RTN","IBCNSP",147,0)
 ;
"RTN","IBCNSP",148,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQMN",DIC("A")="Select Patient Policy: "
"RTN","IBCNSP",149,0)
 D ^DIC I +Y<1 S VALMQUIT=""
"RTN","IBCNSP",150,0)
 G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",151,0)
 S IBPPOL="^2^"_DFN_U_+Y_U_$G(^DPT(DFN,.312,+Y,0))
"RTN","IBCNSP",152,0)
PPOLQ K DIC Q
"RTN","IBCNSP",153,0)
 ;
"RTN","IBCNSP",154,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP",155,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP",156,0)
 Q
"RTN","IBCNSP",157,0)
 ;
"RTN","IBCNSP",158,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP",159,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSP",160,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP",161,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP",162,0)
 W:'(LINE#5) "."
"RTN","IBCNSP",163,0)
 Q
"RTN","IBCNSP0")
0^26^B32537201^B29977117
"RTN","IBCNSP0",1,0)
IBCNSP0 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP0",2,0)
 ;;2.0;INTEGRATED BILLING;**28,43,52,85,93,103,137,229,251,363,371**;21-MAR-94;Build 57
"RTN","IBCNSP0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP0",4,0)
 ;
"RTN","IBCNSP0",5,0)
 ;
"RTN","IBCNSP0",6,0)
CONTACT ; -- Insurance Contact Information
"RTN","IBCNSP0",7,0)
 N OFFSET,START
"RTN","IBCNSP0",8,0)
 ;
"RTN","IBCNSP0",9,0)
 ; The start of this section is designed to start on the same line
"RTN","IBCNSP0",10,0)
 ; as the User Information section (see VER^IBCNSP01).
"RTN","IBCNSP0",11,0)
 ;
"RTN","IBCNSP0",12,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-8
"RTN","IBCNSP0",13,0)
 S IB1ST("CONTACT")=START
"RTN","IBCNSP0",14,0)
 S OFFSET=42
"RTN","IBCNSP0",15,0)
 N IBTRC,IBTRCD,IBTCOD
"RTN","IBCNSP0",16,0)
 S IBTCOD=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP0",17,0)
 ;
"RTN","IBCNSP0",18,0)
 S IBTRC=0,IBTRCD=""
"RTN","IBCNSP0",19,0)
 F  S IBTRC=$O(^IBT(356.2,"D",DFN,IBTRC)) Q:'IBTRC  D
"RTN","IBCNSP0",20,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,1)),"^",5)'=IBCDFN  ; must be same policy
"RTN","IBCNSP0",21,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,0)),"^",4)'=IBTCOD  ; must be ins. ver. type
"RTN","IBCNSP0",22,0)
 .S IBTRCD=$G(^IBT(356.2,+IBTRC,0))
"RTN","IBCNSP0",23,0)
 ;
"RTN","IBCNSP0",24,0)
 D SET(START,OFFSET," Insurance Contact (last) ",IORVON,IORVOFF)
"RTN","IBCNSP0",25,0)
 D SET(START+1,OFFSET," Person Contacted: "_$$EXPAND^IBTRE(356.2,.06,$P(IBTRCD,"^",6)))
"RTN","IBCNSP0",26,0)
 D SET(START+2,OFFSET,"Method of Contact: "_$$EXPAND^IBTRE(356.2,.17,$P(IBTRCD,"^",17)))
"RTN","IBCNSP0",27,0)
 D SET(START+3,OFFSET,"  Contact's Phone: "_$$EXPAND^IBTRE(356.2,.07,$P(IBTRCD,"^",7)))
"RTN","IBCNSP0",28,0)
 D SET(START+4,OFFSET,"    Call Ref. No.: "_$$EXPAND^IBTRE(356.2,.09,$P(IBTRCD,"^",9)))
"RTN","IBCNSP0",29,0)
 D SET(START+5,OFFSET,"     Contact Date: "_$$EXPAND^IBTRE(356.2,.01,$P(IBTRCD,"^")))
"RTN","IBCNSP0",30,0)
 ; no blank lines here because the User Information section is on the
"RTN","IBCNSP0",31,0)
 ; left and it is bigger than this section
"RTN","IBCNSP0",32,0)
 Q
"RTN","IBCNSP0",33,0)
 ;
"RTN","IBCNSP0",34,0)
POLICY ; -- Policy Region
"RTN","IBCNSP0",35,0)
 ; -- if pointer to policy file exists get data from policy file
"RTN","IBCNSP0",36,0)
 N OFFSET,START,IBP,IBX,IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA
"RTN","IBCNSP0",37,0)
 S (IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA)=""
"RTN","IBCNSP0",38,0)
 S START=1,OFFSET=2
"RTN","IBCNSP0",39,0)
 D GPLAN(+IBCPOLD2)
"RTN","IBCNSP0",40,0)
 D SET(START,OFFSET," Plan Information ",IORVON,IORVOFF)
"RTN","IBCNSP0",41,0)
 D SET(START+1,OFFSET,"   Is Group Plan: "_$S($P(IBCPOLD,"^",2)=1:"YES",1:"NO"))
"RTN","IBCNSP0",42,0)
 D SET(START+2,OFFSET,"      Group Name: "_$P(IBCPOLD,"^",3))
"RTN","IBCNSP0",43,0)
 D SET(START+3,OFFSET,"    Group Number: "_$P(IBCPOLD,"^",4))
"RTN","IBCNSP0",44,0)
 D SET(START+4,OFFSET,"             BIN: "_$P(IBCPOLD2,"^",2)) ;;Daou/EEN
"RTN","IBCNSP0",45,0)
 D SET(START+5,OFFSET,"             PCN: "_$P(IBCPOLD2,"^",3)) ;;04/09/04
"RTN","IBCNSP0",46,0)
 D SET(START+6,OFFSET,"    Type of Plan: "_$E($P($G(^IBE(355.1,+$P(IBCPOLD,"^",9),0)),"^"),1,23))
"RTN","IBCNSP0",47,0)
 S IBX=7
"RTN","IBCNSP0",48,0)
 I $P(IBCPOLD,U,14)]"" D
"RTN","IBCNSP0",49,0)
 . D SET(START+IBX,OFFSET,"   Plan Category: "_$$EXPAND^IBTRE(355.3,.14,$P(IBCPOLD,"^",14))) S IBX=IBX+1
"RTN","IBCNSP0",50,0)
 I $P(IBCPOLD,U,15)]"" D
"RTN","IBCNSP0",51,0)
 . D SET(START+IBX,OFFSET," Electronic Type: "_$$EXPAND^IBTRE(355.3,.15,$P(IBCPOLD,"^",15))) S IBX=IBX+1
"RTN","IBCNSP0",52,0)
 D SET(START+IBX,OFFSET,"  Plan Filing TF: "_$P(IBCPOLD,"^",13)) S IBX=IBX+1
"RTN","IBCNSP0",53,0)
 ;
"RTN","IBCNSP0",54,0)
 D SET(START+IBX,OFFSET,"      ePharmacy Plan ID: "_IBPLNID) S IBX=IBX+1
"RTN","IBCNSP0",55,0)
 D SET(START+IBX,OFFSET,"    ePharmacy Plan Name: "_IBPLNNM) S IBX=IBX+1
"RTN","IBCNSP0",56,0)
 D SET(START+IBX,OFFSET,"  ePharmacy Natl Status: "_IBPLNNA) S IBX=IBX+1
"RTN","IBCNSP0",57,0)
 D SET(START+IBX,OFFSET," ePharmacy Local Status: "_IBPLNLA) S IBX=IBX+1
"RTN","IBCNSP0",58,0)
 ;
"RTN","IBCNSP0",59,0)
 ; -- in case pointer is missing
"RTN","IBCNSP0",60,0)
 I '$G(^IBA(355.3,+$P(IBCDFND,"^",18),0)) D
"RTN","IBCNSP0",61,0)
 .D SET(START+1,OFFSET,"Insurance Number: "_$P(IBCDFND,"^",2))
"RTN","IBCNSP0",62,0)
 .D SET(START+2,OFFSET,"      Group Name: "_$P(IBCDFND,"^",15))
"RTN","IBCNSP0",63,0)
 .D SET(START+3,OFFSET,"    Group Number: "_$P(IBCDFND,"^",3))
"RTN","IBCNSP0",64,0)
 .Q
"RTN","IBCNSP0",65,0)
 Q
"RTN","IBCNSP0",66,0)
 ;
"RTN","IBCNSP0",67,0)
INS ; -- Insurance Co. Region
"RTN","IBCNSP0",68,0)
 N OFFSET,START,IBADD,IBCDFNDA,IBCDFNDB
"RTN","IBCNSP0",69,0)
 S START=1,OFFSET=45
"RTN","IBCNSP0",70,0)
 D SET(START,OFFSET," Insurance Company ",IORVON,IORVOFF)
"RTN","IBCNSP0",71,0)
 D SET(START+1,OFFSET,"   Company: "_$P($G(^DIC(36,+IBCDFND,0)),"^"))
"RTN","IBCNSP0",72,0)
 S IBCDFNDA=$G(^DIC(36,+IBCDFND,.11)),IBCDFNDB=$G(^(.13))
"RTN","IBCNSP0",73,0)
 G:IBCDFNDA="" INSQ
"RTN","IBCNSP0",74,0)
 D SET(START+2,OFFSET,"    Street: "_$P(IBCDFNDA,"^")) S IBADD=1
"RTN","IBCNSP0",75,0)
 I $P(IBCDFNDA,"^",2)'="" D SET(START+3,OFFSET,"  Street 2: "_$P(IBCDFNDA,"^",2)) S IBADD=2
"RTN","IBCNSP0",76,0)
 I $P(IBCDFNDA,"^",3)'="" D SET(START+4,OFFSET,"  Street 3: "_$P(IBCDFNDA,"^",3)) S IBADD=3
"RTN","IBCNSP0",77,0)
 D SET(START+2+IBADD,OFFSET,"City/State: "_$E($P(IBCDFNDA,"^",4),1,15)_$S($P(IBCDFNDA,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFNDA,"^",5),0)),"^",2)_" "_$E($P(IBCDFNDA,"^",6),1,5))
"RTN","IBCNSP0",78,0)
 D SET(START+3+IBADD,OFFSET,"Billing Ph: "_$P(IBCDFNDB,"^",2))
"RTN","IBCNSP0",79,0)
 D SET(START+4+IBADD,OFFSET,"Precert Ph: "_$$PHONE^IBCNSC01(IBCDFNDB))
"RTN","IBCNSP0",80,0)
 ;
"RTN","IBCNSP0",81,0)
INSQ Q
"RTN","IBCNSP0",82,0)
 ;
"RTN","IBCNSP0",83,0)
SPON ; -- Sponsor (Insured Person) Region
"RTN","IBCNSP0",84,0)
 N IBC3,IBZIP,START,OFFSET,IBA,DA,DR,DIC,DIQ
"RTN","IBCNSP0",85,0)
 S IBC3=$G(^DPT(DFN,.312,IBCDFN,3))
"RTN","IBCNSP0",86,0)
 S DA=+$P(IBC3,"^",2),DR=.01,DIQ(0)="E",DIC="^DIC(23,",DIQ="IBA" D EN^DIQ1
"RTN","IBCNSP0",87,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=4
"RTN","IBCNSP0",88,0)
 D SET(START,OFFSET," Insured Person's Information (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP0",89,0)
 D SET(START+1,OFFSET,"    Insured's DOB: "_$$DAT3^IBOUTL($P(IBC3,"^")))
"RTN","IBCNSP0",90,0)
 D SET(START+2,OFFSET,"    Insured's Sex: "_$$EXTERNAL^DILFD(2.312,3.12,,$P(IBC3,U,12)))
"RTN","IBCNSP0",91,0)
 D SET(START+3,OFFSET," Insured's Branch: "_$G(IBA(23,DA,.01,"E")))
"RTN","IBCNSP0",92,0)
 D SET(START+4,OFFSET,"   Insured's Rank: "_$P(IBC3,"^",3))
"RTN","IBCNSP0",93,0)
 ;
"RTN","IBCNSP0",94,0)
 S OFFSET=43
"RTN","IBCNSP0",95,0)
 S Y=$P(IBC3,"^",10) D ZIPOUT^VAFADDR S IBZIP=Y
"RTN","IBCNSP0",96,0)
 D SET(START+1,OFFSET," Str 1: "_$P(IBC3,"^",6))
"RTN","IBCNSP0",97,0)
 D SET(START+2,OFFSET," Str 2: "_$P(IBC3,"^",7))
"RTN","IBCNSP0",98,0)
 D SET(START+3,OFFSET,"  City: "_$P(IBC3,"^",8))
"RTN","IBCNSP0",99,0)
 D SET(START+4,OFFSET,"St/Zip: "_$P($G(^DIC(5,+$P(IBC3,"^",9),0)),"^",2)_"  "_IBZIP)
"RTN","IBCNSP0",100,0)
 D SET(START+5,OFFSET," Phone: "_$P(IBC3,"^",11))
"RTN","IBCNSP0",101,0)
 ;
"RTN","IBCNSP0",102,0)
 ; blank lines at end of section
"RTN","IBCNSP0",103,0)
 D SET(START+6,2," ")
"RTN","IBCNSP0",104,0)
 D SET(START+7,2," ")
"RTN","IBCNSP0",105,0)
 Q
"RTN","IBCNSP0",106,0)
 ;
"RTN","IBCNSP0",107,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP0",108,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP0",109,0)
 Q
"RTN","IBCNSP0",110,0)
 ;
"RTN","IBCNSP0",111,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP0",112,0)
 D:'$D(@VALMAR@(LINE,0)) BLANK(.LINE)
"RTN","IBCNSP0",113,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP0",114,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP0",115,0)
 W:'(LINE#5) "."
"RTN","IBCNSP0",116,0)
 Q
"RTN","IBCNSP0",117,0)
 ;
"RTN","IBCNSP0",118,0)
GPLAN(IBPLDA) ; get data from PLAN file (#366.03) related to the
"RTN","IBCNSP0",119,0)
 ; GROUP INSURANCE PLAN file (#355.3) and the INSURANCE COMPANY file (#36)
"RTN","IBCNSP0",120,0)
 ; that is associated with the PATIENT
"RTN","IBCNSP0",121,0)
 ; input - IBPLDA - ien of the PLAN file (#366.03)
"RTN","IBCNSP0",122,0)
 N IBPLN0,IBAIEN,IBAPIEN,IBAP0
"RTN","IBCNSP0",123,0)
 S IBPLN0=$G(^IBCNR(366.03,IBPLDA,0)) ;; Q:'$P(IBPLN0,"^",3) ;quit if payer not defined 
"RTN","IBCNSP0",124,0)
 S IBPLNID=$P(IBPLN0,"^"),IBPLNNM=$P(IBPLN0,"^",2)
"RTN","IBCNSP0",125,0)
 S IBAIEN=$O(^IBCNR(366.13,"B","E-PHARM","")) Q:'IBAIEN
"RTN","IBCNSP0",126,0)
 S IBAPIEN=$O(^IBCNR(366.03,IBPLDA,3,"B",IBAIEN,"")) Q:'IBAPIEN
"RTN","IBCNSP0",127,0)
 S IBAP0=$G(^IBCNR(366.03,IBPLDA,3,IBAPIEN,0))
"RTN","IBCNSP0",128,0)
 S IBPLNNA=$S($P(IBAP0,"^",2)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",129,0)
 S IBPLNLA=$S($P(IBAP0,"^",3)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",130,0)
 Q
"RTN","IBCNSP0",131,0)
 ;
"RTN","IBCNSP0",132,0)
 ;IBCNSP0
"RTN","IBCNSP01")
0^27^B32694224^B19919744
"RTN","IBCNSP01",1,0)
IBCNSP01 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY  ;05-MAR-1993
"RTN","IBCNSP01",2,0)
 ;;2.0;INTEGRATED BILLING;**43,52,85,251,371**;21-MAR-94;Build 57
"RTN","IBCNSP01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP01",4,0)
 ;
"RTN","IBCNSP01",5,0)
 ;
"RTN","IBCNSP01",6,0)
% D SUBSC,RIDER
"RTN","IBCNSP01",7,0)
 Q
"RTN","IBCNSP01",8,0)
 ;
"RTN","IBCNSP01",9,0)
SUBSC ; -- subscriber region
"RTN","IBCNSP01",10,0)
 N OFFSET,START
"RTN","IBCNSP01",11,0)
 S START=24,OFFSET=2
"RTN","IBCNSP01",12,0)
 D SET^IBCNSP(START,OFFSET," Subscriber Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",13,0)
 S Y=$P(IBCDFND,"^",6),C=$P(^DD(2.312,6,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",14,0)
 D SET^IBCNSP(START+1,OFFSET," Whose Insurance: "_Y)
"RTN","IBCNSP01",15,0)
 D SET^IBCNSP(START+2,OFFSET," Subscriber Name: "_$P(IBCDFND,"^",17))
"RTN","IBCNSP01",16,0)
 S Y=$P(IBCDFND,"^",16),C=$P(^DD(2.312,16,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",17,0)
 D SET^IBCNSP(START+3,OFFSET,"    Relationship: "_Y)
"RTN","IBCNSP01",18,0)
 D SET^IBCNSP(START+4,OFFSET,"      Primary ID: "_$P(IBCDFND,"^",2))
"RTN","IBCNSP01",19,0)
 S Y=$P(IBCDFND,"^",20),C=$P(^DD(2.312,.2,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",20,0)
 D SET^IBCNSP(START+5,OFFSET,"Coord.  Benefits: "_Y)
"RTN","IBCNSP01",21,0)
 D SET^IBCNSP(START+6,OFFSET,"Primary Provider: "_$P(IBCDFND4,"^",1))
"RTN","IBCNSP01",22,0)
 D SET^IBCNSP(START+7,OFFSET," Prim Prov Phone: "_$P(IBCDFND4,"^",2))
"RTN","IBCNSP01",23,0)
 Q
"RTN","IBCNSP01",24,0)
 ;
"RTN","IBCNSP01",25,0)
VER ; -- Entered/Verfied Region
"RTN","IBCNSP01",26,0)
 N OFFSET,START
"RTN","IBCNSP01",27,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",28,0)
 S IB1ST("VERIFY")=START
"RTN","IBCNSP01",29,0)
 D SET^IBCNSP(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",30,0)
 D SET^IBCNSP(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCDFND1,"^",2),0)),"^",1),1,20))
"RTN","IBCNSP01",31,0)
 D SET^IBCNSP(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCDFND1))
"RTN","IBCNSP01",32,0)
 D SET^IBCNSP(START+3,OFFSET,"Last Verified By: "_$E($P($G(^VA(200,+$P(IBCDFND1,"^",4),0)),"^",1),1,20))
"RTN","IBCNSP01",33,0)
 D SET^IBCNSP(START+4,OFFSET,"Last Verified On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,"^",3)))
"RTN","IBCNSP01",34,0)
 D SET^IBCNSP(START+5,OFFSET," Last Updated By: "_$E($P($G(^VA(200,+$P(IBCDFND1,"^",6),0)),"^",1),1,20))
"RTN","IBCNSP01",35,0)
 D SET^IBCNSP(START+6,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,"^",5)))
"RTN","IBCNSP01",36,0)
 D SET^IBCNSP(START+7,2," ")   ; 2 blank lines to end section
"RTN","IBCNSP01",37,0)
 D SET^IBCNSP(START+8,2," ")
"RTN","IBCNSP01",38,0)
VERQ Q
"RTN","IBCNSP01",39,0)
 ;
"RTN","IBCNSP01",40,0)
ID ; Subscriber and patient primary and secondary ID's and qualifiers
"RTN","IBCNSP01",41,0)
 NEW START,OFFSET,IBL,G,PCE,QUAL,QUAL1
"RTN","IBCNSP01",42,0)
 S G=IBCDFND5
"RTN","IBCNSP01",43,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",44,0)
 S IB1ST("ID")=START
"RTN","IBCNSP01",45,0)
 D SET^IBCNSP(START,OFFSET," Insurance Company ID Numbers (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP01",46,0)
 S IBL=IBL+1
"RTN","IBCNSP01",47,0)
 D SET^IBCNSP(IBL,OFFSET,"  Subscriber Primary ID: "_$P(IBCDFND,U,2))
"RTN","IBCNSP01",48,0)
 ;
"RTN","IBCNSP01",49,0)
 F PCE=3,5,7 D            ; subscriber secondary IDs
"RTN","IBCNSP01",50,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",51,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",52,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",53,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",54,0)
 . D SET^IBCNSP(IBL,OFFSET,"Subscriber Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",55,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",56,0)
 . Q
"RTN","IBCNSP01",57,0)
 ;
"RTN","IBCNSP01",58,0)
 ; patient=subscriber so skip over patient ID# display
"RTN","IBCNSP01",59,0)
 I +$P(IBCDFND,U,16)=1 G ID1
"RTN","IBCNSP01",60,0)
 ;
"RTN","IBCNSP01",61,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")   ; blank line
"RTN","IBCNSP01",62,0)
 S IBL=IBL+1
"RTN","IBCNSP01",63,0)
 D SET^IBCNSP(IBL,OFFSET,"     Patient Primary ID: "_$P(G,U,1))
"RTN","IBCNSP01",64,0)
 ;
"RTN","IBCNSP01",65,0)
 F PCE=9,11,13 D          ; patient secondary IDs
"RTN","IBCNSP01",66,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",67,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",68,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",69,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",70,0)
 . D SET^IBCNSP(IBL,OFFSET,"   Patient Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",71,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",72,0)
 . Q
"RTN","IBCNSP01",73,0)
 ;
"RTN","IBCNSP01",74,0)
ID1 ; end of section - 2 blank lines
"RTN","IBCNSP01",75,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",76,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",77,0)
IDQ ;
"RTN","IBCNSP01",78,0)
 Q
"RTN","IBCNSP01",79,0)
 ;
"RTN","IBCNSP01",80,0)
RIDER ; -- Personal policy riders
"RTN","IBCNSP01",81,0)
 N OFFSET,START,IBI,IBL,IBPR,IBPRD
"RTN","IBCNSP01",82,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,IBL=0
"RTN","IBCNSP01",83,0)
 D SET^IBCNSP(START,OFFSET," Personal Riders ",IORVON,IORVOFF)
"RTN","IBCNSP01",84,0)
 S IBI="" F  S IBI=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBI)) Q:'IBI  S IBPR=$O(^(IBI,0)),IBPRD=+$G(^IBA(355.7,IBPR,0)),IBL=IBL+1 D
"RTN","IBCNSP01",85,0)
 . D SET^IBCNSP(START+IBL,OFFSET,"   Rider #"_IBL_": "_$$EXPAND^IBTRE(355.7,.01,IBPRD))
"RTN","IBCNSP01",86,0)
 . Q
"RTN","IBCNSP01",87,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",88,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",89,0)
 Q
"RTN","IBCNSP01",90,0)
 ;
"RTN","IBCNSP01",91,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP01",92,0)
 ;    called from ai^ibcnsp1
"RTN","IBCNSP01",93,0)
 ;
"RTN","IBCNSP01",94,0)
 ; -- see if current inpatient
"RTN","IBCNSP01",95,0)
 D INP^VADPT I +VAIN(1) D
"RTN","IBCNSP01",96,0)
 .S IBTRN=$O(^IBT(356,"AD",+VAIN(1),0))
"RTN","IBCNSP01",97,0)
 ;
"RTN","IBCNSP01",98,0)
 S IBXIFN=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP01",99,0)
 ;
"RTN","IBCNSP01",100,0)
 ; -- if not tracking id allow selecting
"RTN","IBCNSP01",101,0)
 I '$G(IBTRN) D  G:IBQUIT AIQ
"RTN","IBCNSP01",102,0)
 .W !,"You can now enter a contact and relate it to a Claims Tracking Admission entry."
"RTN","IBCNSP01",103,0)
 .S DIC("A")="Select RELATED ADMISSION DATE: "
"RTN","IBCNSP01",104,0)
 .S DIC="^IBT(356,",DIC(0)="AEQ",D="ADFN"_DFN,DIC("S")="I $P(^(0),U,5)"
"RTN","IBCNSP01",105,0)
 .D IX^DIC K DA,DR,DIC,DIE I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1 Q
"RTN","IBCNSP01",106,0)
 .I +Y>1 S IBTRN=+Y
"RTN","IBCNSP01",107,0)
 ;
"RTN","IBCNSP01",108,0)
 I '$G(IBTRN) W !!,"Warning: This contact is not associated with any care in Claims Tracking.",!,"You may only edit or view this contact using this action.",!
"RTN","IBCNSP01",109,0)
 ;
"RTN","IBCNSP01",110,0)
 ; -- select date
"RTN","IBCNSP01",111,0)
 S IBOK=0,IBI=0 F  S IBI=$O(^IBT(356.2,"D",DFN,IBI)) Q:'IBI  I $P($G(^IBT(356.2,+IBI,0)),"^",4)=IBXIFN,$P($G(^(1)),"^",5)=IBCDFN S IBOK=1
"RTN","IBCNSP01",112,0)
 I IBOK D  G:IBQUIT AIQ
"RTN","IBCNSP01",113,0)
 .S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: "
"RTN","IBCNSP01",114,0)
 .S X="??",DIC(0)="EQ",DIC("S")="I $P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN" ;,DLAYGO=356.2
"RTN","IBCNSP01",115,0)
 .S D="ADFN"_DFN
"RTN","IBCNSP01",116,0)
 .D IX^DIC K DIC,DR,DA,DIE,D I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1
"RTN","IBCNSP01",117,0)
 ;
"RTN","IBCNSP01",118,0)
 S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: ",DIC("B")="TODAY"
"RTN","IBCNSP01",119,0)
 S DIC("DR")=".02////"_$G(IBTRN)_";.04////"_IBXIFN_";.05////"_DFN_";.19////1;1.01///NOW;1.02////"_DUZ_";1.05////"_IBCDFN
"RTN","IBCNSP01",120,0)
 S DIC(0)="AEQL",DIC("S")="I $P(^(0),U,5)=DFN,$P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN",DLAYGO=356.2
"RTN","IBCNSP01",121,0)
 D ^DIC K DIC
"RTN","IBCNSP01",122,0)
 I $D(DTOUT)!($D(DUOUT))!(+Y<1) G AIQ
"RTN","IBCNSP01",123,0)
 S IBTRC=+Y
"RTN","IBCNSP01",124,0)
 I $G(IBTRC),$G(IBTRN),'$P(^IBT(356.2,+IBTRC,0),"^",2) S DA=IBTRC,DIE="^IBT(356.2,",DR=".02////"_$G(IBTRN) D ^DIE
"RTN","IBCNSP01",125,0)
 ;
"RTN","IBCNSP01",126,0)
 ; -- edit ins ver type
"RTN","IBCNSP01",127,0)
 D EDIT^IBTRCD1("[IBT INS VERIFICATION]",1)
"RTN","IBCNSP01",128,0)
AIQ Q
"RTN","IBCNSP1")
0^20^B54597105^B17268693
"RTN","IBCNSP1",1,0)
IBCNSP1 ;ALB/AAS - INSURANCE MANAGEMENT - policy actions ;22-OCT-92
"RTN","IBCNSP1",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,40,43,52,85,103,361,371**;21-MAR-94;Build 57
"RTN","IBCNSP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP1",4,0)
 ;;ICR#5002 for read of ^DIE input template data
"RTN","IBCNSP1",5,0)
 ;
"RTN","IBCNSP1",6,0)
% G EN^IBCNSP
"RTN","IBCNSP1",7,0)
 ;
"RTN","IBCNSP1",8,0)
EA ; -- Edit all
"RTN","IBCNSP1",9,0)
 N IBCDFN,IBTRC,IBTRN
"RTN","IBCNSP1",10,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",11,0)
 S IBCDFN=$P($G(IBPPOL),"^",4) I 'IBCDFN W !!,"Can't identify the policy!" G EAQ
"RTN","IBCNSP1",12,0)
 S IBCNSEH=1 D PAT^IBCNSEH
"RTN","IBCNSP1",13,0)
 ;
"RTN","IBCNSP1",14,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",15,0)
 D PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSP1",16,0)
 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSP1",17,0)
 ;
"RTN","IBCNSP1",18,0)
 ; -- edit policy data
"RTN","IBCNSP1",19,0)
 D POL^IBCNSEH
"RTN","IBCNSP1",20,0)
 D EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSP1",21,0)
 ;
"RTN","IBCNSP1",22,0)
 W !! D AI
"RTN","IBCNSP1",23,0)
 ;
"RTN","IBCNSP1",24,0)
EAQ D:$G(IBTRC) AIP^IBCNSP02(IBTRC)
"RTN","IBCNSP1",25,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",26,0)
 S VALMBCK="R"
"RTN","IBCNSP1",27,0)
 Q
"RTN","IBCNSP1",28,0)
 ;
"RTN","IBCNSP1",29,0)
AB ; -- Annual Benefits
"RTN","IBCNSP1",30,0)
 S X=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,X,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",31,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ABQ
"RTN","IBCNSP1",32,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",33,0)
 D EN^VALM("IBCNS ANNUAL BENEFITS")
"RTN","IBCNSP1",34,0)
 S VALMBCK="R"
"RTN","IBCNSP1",35,0)
ABQ Q
"RTN","IBCNSP1",36,0)
 ;
"RTN","IBCNSP1",37,0)
BU ; -- Benefits Used
"RTN","IBCNSP1",38,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,IBCDFN,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",39,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G BUQ
"RTN","IBCNSP1",40,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",41,0)
 D EN^VALM("IBCNS BENEFITS USED BY DATE")
"RTN","IBCNSP1",42,0)
 S VALMBCK="R"
"RTN","IBCNSP1",43,0)
BUQ Q
"RTN","IBCNSP1",44,0)
 ;
"RTN","IBCNSP1",45,0)
IT ; -- edit insurance type info from patient policy and plan edit
"RTN","IBCNSP1",46,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",47,0)
 N IBCDFN
"RTN","IBCNSP1",48,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCPOL=+$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)
"RTN","IBCNSP1",49,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ITQ
"RTN","IBCNSP1",50,0)
 D ITEDIT(IBCPOL,IBCDFN)
"RTN","IBCNSP1",51,0)
ITQ S VALMBCK="R" Q
"RTN","IBCNSP1",52,0)
 ;
"RTN","IBCNSP1",53,0)
IT1 ; -- edit insurance type info from patient policy
"RTN","IBCNSP1",54,0)
 D ITEDIT(IBCPOL)
"RTN","IBCNSP1",55,0)
 S VALMBCK="R"
"RTN","IBCNSP1",56,0)
 Q
"RTN","IBCNSP1",57,0)
 ;
"RTN","IBCNSP1",58,0)
ITEDIT(IBCPOL,IBCDFN) ;Edit insurance type info once you have plan (IBCPOL)
"RTN","IBCNSP1",59,0)
 ; IBCDFN = the ifn of the policy multiple for pt in ^DPT, node .312
"RTN","IBCNSP1",60,0)
 ;          only defined for editing via patient policy
"RTN","IBCNSP1",61,0)
 G:'$G(IBCPOL) ITEDITQ
"RTN","IBCNSP1",62,0)
 D SAVE^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",63,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G ITEDITQ
"RTN","IBCNSP1",64,0)
 I $G(IBCDFN) S IBCNSEH=+$G(^IBE(350.9,1,4)) D POL^IBCNSEH
"RTN","IBCNSP1",65,0)
 I $P($G(^IBA(355.3,IBCPOL,0)),"^",11) W !?2,*7,"Please note that this plan is inactive!",!
"RTN","IBCNSP1",66,0)
 S DA=IBCPOL,DIE="^IBA(355.3,",DR=".05;.12;.06;.07;.08"
"RTN","IBCNSP1",67,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",68,0)
 D COMP^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",69,0)
 I IBDIF D UPDATE^IBCNSP3(IBCPOL) D:$G(IBCDFN) UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP D:'$G(IBCDFN) INIT^IBCNSC4
"RTN","IBCNSP1",70,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP1",71,0)
ITEDITQ Q
"RTN","IBCNSP1",72,0)
 ;
"RTN","IBCNSP1",73,0)
ED ; -- Edit effective dates
"RTN","IBCNSP1",74,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",75,0)
 N IBDIF,DA,DR,DIE,DIC
"RTN","IBCNSP1",76,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",77,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",78,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EDQ
"RTN","IBCNSP1",79,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",80,0)
 S DR="8;3;1.09//;3.04"
"RTN","IBCNSP1",81,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",82,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN) I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),UPDCLM(DFN,IBCDFN),AFTER^IBCNSEVT,^IBCNSEVT,BLD^IBCNSP
"RTN","IBCNSP1",83,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",84,0)
EDQ S VALMBCK="R" Q
"RTN","IBCNSP1",85,0)
 ;
"RTN","IBCNSP1",86,0)
VC ; -- Verify Coverage
"RTN","IBCNSP1",87,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",88,0)
 D VFY^IBCNSM2
"RTN","IBCNSP1",89,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",90,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",91,0)
 ;
"RTN","IBCNSP1",92,0)
SU ; -- Subscriber Update
"RTN","IBCNSP1",93,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",94,0)
 ;Patch 40
"RTN","IBCNSP1",95,0)
 N IBDIF,DA,DR,DIC,DIE,DGSENFLG
"RTN","IBCNSP1",96,0)
 S DGSENFLG=1
"RTN","IBCNSP1",97,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",98,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",99,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G SUQ
"RTN","IBCNSP1",100,0)
 ;
"RTN","IBCNSP1",101,0)
 D EDIT(DFN,IBCDFN)   ; IB*371 - edit pat ins 2.312 subfile fields
"RTN","IBCNSP1",102,0)
 ;
"RTN","IBCNSP1",103,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",104,0)
 I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP1",105,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",106,0)
SUQ S VALMBCK="R" Q
"RTN","IBCNSP1",107,0)
 ;
"RTN","IBCNSP1",108,0)
IC ; -- Insurance Contact Information
"RTN","IBCNSP1",109,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",110,0)
 N IBDIF,DA,DR,DIC,DIE,IBTRC,DIR,DUOUT,DTOUT,DIRUT,IBTRN
"RTN","IBCNSP1",111,0)
 D AI
"RTN","IBCNSP1",112,0)
 D:$G(IBTRC) AIP^IBCNSP02(IBTRC),BLD^IBCNSP
"RTN","IBCNSP1",113,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",114,0)
 Q
"RTN","IBCNSP1",115,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP1",116,0)
 N X,Y,I,J,DA,DR,DIC,DIE,DR,DD,DO,VA,VAIN,VAERR,IBQUIT,IBXIFN,IBTRN,DUOUT,IBX,IBQUIT,DTOUT
"RTN","IBCNSP1",117,0)
 Q:'$G(DFN)
"RTN","IBCNSP1",118,0)
 Q:'$G(IBCDFN)  S IBQUIT=0
"RTN","IBCNSP1",119,0)
 D AI^IBCNSP02
"RTN","IBCNSP1",120,0)
 Q
"RTN","IBCNSP1",121,0)
 ;
"RTN","IBCNSP1",122,0)
PIDEF(IBREL,FLD,IBDFN,SPDEF) ; Function to return patient file defaults
"RTN","IBCNSP1",123,0)
 ; Called from input template IBCN PATIENT INSURANCE
"RTN","IBCNSP1",124,0)
 ; IBREL = value from 2.312,16 field - PT. RELATIONSHIP TO INSURED
"RTN","IBCNSP1",125,0)
 ;   FLD = field# in file 2.312
"RTN","IBCNSP1",126,0)
 ; IBDFN = patient ien to file 2
"RTN","IBCNSP1",127,0)
 ; SPDEF = spouse default flag =1 if this field should be defaulted
"RTN","IBCNSP1",128,0)
 ;         when the spouse is the policy holder
"RTN","IBCNSP1",129,0)
 ;
"RTN","IBCNSP1",130,0)
 ; The purpose is to provide a default value for the field when the
"RTN","IBCNSP1",131,0)
 ; patient and the ins. subscriber are the same.
"RTN","IBCNSP1",132,0)
 ;
"RTN","IBCNSP1",133,0)
 NEW VAL
"RTN","IBCNSP1",134,0)
 S VAL=""
"RTN","IBCNSP1",135,0)
 I +$G(IBREL)'=1,+$G(IBREL)'=2 G PIDEFX      ; patient not the insured or spouse, get out
"RTN","IBCNSP1",136,0)
 I +$G(IBREL)=2,'$G(SPDEF) G PIDEFX          ; not a field for spouse default
"RTN","IBCNSP1",137,0)
 I '$G(FLD) G PIDEFX                         ; no field# passed in
"RTN","IBCNSP1",138,0)
 I '$G(IBDFN) G PIDEFX                       ; no patient passed in
"RTN","IBCNSP1",139,0)
 ;
"RTN","IBCNSP1",140,0)
 ; Build the patient demographics area
"RTN","IBCNSP1",141,0)
 I '$D(^UTILITY("VADM",$J)) D
"RTN","IBCNSP1",142,0)
 . N VAHOW,DFN,VADM
"RTN","IBCNSP1",143,0)
 . S VAHOW=2,DFN=IBDFN D DEM^VADPT
"RTN","IBCNSP1",144,0)
 . Q
"RTN","IBCNSP1",145,0)
 ;
"RTN","IBCNSP1",146,0)
 ; Build the patient address area
"RTN","IBCNSP1",147,0)
 I '$D(^UTILITY("VAPA",$J)) D
"RTN","IBCNSP1",148,0)
 . N VAHOW,DFN,VAPA
"RTN","IBCNSP1",149,0)
 . S VAHOW=2,DFN=IBDFN,VAPA("P")="" D ADD^VADPT
"RTN","IBCNSP1",150,0)
 . Q
"RTN","IBCNSP1",151,0)
 ;
"RTN","IBCNSP1",152,0)
 I FLD=17 S VAL=$P($G(^UTILITY("VADM",$J,1)),U,1) G PIDEFX                          ; Name
"RTN","IBCNSP1",153,0)
 I FLD=3.01 S VAL=$$FMTE^XLFDT($P($G(^UTILITY("VADM",$J,3)),U,1),"5Z") G PIDEFX     ; Date of Birth
"RTN","IBCNSP1",154,0)
 I FLD=3.02 S VAL=$$EXTERNAL^DILFD(2,.325,,$P($G(^DPT(IBDFN,.32)),U,5)) G PIDEFX    ; Branch
"RTN","IBCNSP1",155,0)
 I FLD=3.05 S VAL=$P($G(^UTILITY("VADM",$J,2)),U,2) G PIDEFX                        ; SSN
"RTN","IBCNSP1",156,0)
 I FLD=3.06 S VAL=$P($G(^UTILITY("VAPA",$J,1)),U,1) G PIDEFX                        ; Street Address 1
"RTN","IBCNSP1",157,0)
 I FLD=3.07 S VAL=$P($G(^UTILITY("VAPA",$J,2)),U,1) G PIDEFX                        ; Street Address 2
"RTN","IBCNSP1",158,0)
 I FLD=3.08 S VAL=$P($G(^UTILITY("VAPA",$J,4)),U,1) G PIDEFX                        ; City
"RTN","IBCNSP1",159,0)
 I FLD=3.09 S VAL=$P($G(^UTILITY("VAPA",$J,5)),U,2) G PIDEFX                        ; State
"RTN","IBCNSP1",160,0)
 I FLD=3.1 S VAL=$P($G(^UTILITY("VAPA",$J,11)),U,2) G PIDEFX                        ; Zipcode
"RTN","IBCNSP1",161,0)
 I FLD=3.11 S VAL=$P($G(^UTILITY("VAPA",$J,8)),U,1) G PIDEFX                        ; Phone#
"RTN","IBCNSP1",162,0)
 I FLD=3.12 S VAL=$P($G(^UTILITY("VADM",$J,5)),U,2) G PIDEFX                        ; Sex
"RTN","IBCNSP1",163,0)
PIDEFX ;
"RTN","IBCNSP1",164,0)
 Q VAL
"RTN","IBCNSP1",165,0)
 ;
"RTN","IBCNSP1",166,0)
ASK(QUES,DEFLT) ; Function to ask Yes/No Question
"RTN","IBCNSP1",167,0)
 ; Returns 1 (yes), 0 (no, up-arrow, or timeout)
"RTN","IBCNSP1",168,0)
 NEW X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNSP1",169,0)
 S DIR(0)="Y",DIR("A")=$G(QUES)
"RTN","IBCNSP1",170,0)
 S DIR("B")=$S($G(DEFLT):"Yes",1:"No")
"RTN","IBCNSP1",171,0)
 W ! D ^DIR W:Y !
"RTN","IBCNSP1",172,0)
 I $D(DIRUT) S Y=0
"RTN","IBCNSP1",173,0)
ASKX ;
"RTN","IBCNSP1",174,0)
 Q Y
"RTN","IBCNSP1",175,0)
 ;
"RTN","IBCNSP1",176,0)
EDIT(IBDFN,IBCDFN,IBQUIT) ; Main call to edit data in 2.312 pat ins subfile
"RTN","IBCNSP1",177,0)
 ;  IBDFN - patient DFN
"RTN","IBCNSP1",178,0)
 ; IBCDFN - ien for patient insurance policy in subfile 2.312
"RTN","IBCNSP1",179,0)
 ; IBQUIT - Output variable.  Pass by reference.  Will be set to 1 if
"RTN","IBCNSP1",180,0)
 ;          the user entered an up-arrow, timed-out, or deleted the
"RTN","IBCNSP1",181,0)
 ;          2.312 subfile entry by entering "@" at the .01 field
"RTN","IBCNSP1",182,0)
 ; 
"RTN","IBCNSP1",183,0)
 NEW DA,DR,DIE,IBZ,IBY,X,Y,DTOUT
"RTN","IBCNSP1",184,0)
 NEW IDS,SUB,PAT,PCE,SUB1,PAT1
"RTN","IBCNSP1",185,0)
 S DA(1)=+$G(IBDFN)    ; patient IEN
"RTN","IBCNSP1",186,0)
 S DA=+$G(IBCDFN)      ; patient insurance IEN
"RTN","IBCNSP1",187,0)
 I 'DA!'DA(1) G EDITX
"RTN","IBCNSP1",188,0)
 S DIE="^DPT("_IBDFN_",.312,"
"RTN","IBCNSP1",189,0)
 ;
"RTN","IBCNSP1",190,0)
 ; Find the input template IEN for the [IBCN PATIENT INSURANCE] template
"RTN","IBCNSP1",191,0)
 S IBY=+$$FIND1^DIC(.402,,"X","IBCN PATIENT INSURANCE")
"RTN","IBCNSP1",192,0)
 I 'IBY G EDITX
"RTN","IBCNSP1",193,0)
 ;
"RTN","IBCNSP1",194,0)
 ; Build the DR array/string - ICR# 5002
"RTN","IBCNSP1",195,0)
 M DR(1)=^DIE(IBY,"DR",2)
"RTN","IBCNSP1",196,0)
 S DR=$G(DR(1,2.312))
"RTN","IBCNSP1",197,0)
 I DR="" G EDITX
"RTN","IBCNSP1",198,0)
 ;
"RTN","IBCNSP1",199,0)
 S $P(^DIE(IBY,0),U,7)=DT   ; see TEM+2^DIE  ICR# 5002
"RTN","IBCNSP1",200,0)
 ;
"RTN","IBCNSP1",201,0)
 D ^DIE     ; edit subfile data
"RTN","IBCNSP1",202,0)
 ;
"RTN","IBCNSP1",203,0)
 ; If the user entered an up-arrow, or timed-out, or deleted the entry,
"RTN","IBCNSP1",204,0)
 ; then set the output variable IBQUIT
"RTN","IBCNSP1",205,0)
 I $D(Y)!$D(DTOUT)!'$D(DA) S IBQUIT=1
"RTN","IBCNSP1",206,0)
 ;
"RTN","IBCNSP1",207,0)
 F IBZ="VADM","VAPA" K ^UTILITY(IBZ,$J)    ; cleanup scratch global
"RTN","IBCNSP1",208,0)
 ;
"RTN","IBCNSP1",209,0)
 D UPDCLM(IBDFN,IBCDFN)      ; update editable claims
"RTN","IBCNSP1",210,0)
 ;
"RTN","IBCNSP1",211,0)
 ; Cleanup any problems in the secondary ID area
"RTN","IBCNSP1",212,0)
 S IDS=$G(^DPT(IBDFN,.312,IBCDFN,5))           ; whole 5 node
"RTN","IBCNSP1",213,0)
 S (SUB,PAT)=""
"RTN","IBCNSP1",214,0)
 F PCE=3:1:8 S $P(SUB,U,PCE)=$P(IDS,U,PCE-1)   ; subscriber sec ID/qual
"RTN","IBCNSP1",215,0)
 F PCE=3:1:8 S $P(PAT,U,PCE)=$P(IDS,U,PCE+5)   ; patient sec ID/qual
"RTN","IBCNSP1",216,0)
 ; SUB and PAT are 8-piece strings with pieces 1 and 2 being nil
"RTN","IBCNSP1",217,0)
 S SUB1=$$SCRUB^IBCEF21(SUB)                   ; scrub 8-piece string
"RTN","IBCNSP1",218,0)
 S PAT1=$$SCRUB^IBCEF21(PAT)                   ; scrub 8-piece string
"RTN","IBCNSP1",219,0)
 I SUB'=SUB1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,2,7)=$P(SUB1,U,3,8)
"RTN","IBCNSP1",220,0)
 I PAT'=PAT1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,8,13)=$P(PAT1,U,3,8)
"RTN","IBCNSP1",221,0)
 ;
"RTN","IBCNSP1",222,0)
EDITX ;
"RTN","IBCNSP1",223,0)
 Q
"RTN","IBCNSP1",224,0)
 ;
"RTN","IBCNSP1",225,0)
UPDCLM(IBDFN,IBCDFN) ; Update the Insurance nodes of claims that are still editable
"RTN","IBCNSP1",226,0)
 NEW IBIFN
"RTN","IBCNSP1",227,0)
 S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"C",IBDFN,IBIFN)) Q:'IBIFN  D UPDCLM^IBCNSP2(IBIFN,IBDFN,IBCDFN)
"RTN","IBCNSP1",228,0)
 ;
"RTN","IBCNSP1",229,0)
UPDCLMX ;
"RTN","IBCNSP1",230,0)
 Q
"RTN","IBCNSP1",231,0)
 ;
"RTN","IBCNSP2")
0^41^B24458638^B22122714
"RTN","IBCNSP2",1,0)
IBCNSP2 ;ALB/AAS - PATIENT INSURANCE INTERFACE FOR REGISTRATION ;21-JUNE-93
"RTN","IBCNSP2",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,75,82,155,371**;21-MAR-94;Build 57
"RTN","IBCNSP2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP2",4,0)
 ;
"RTN","IBCNSP2",5,0)
% ;
"RTN","IBCNSP2",6,0)
REG ; --Edit Patient insurance from registration, fee and mccr, allow new entries
"RTN","IBCNSP2",7,0)
 ;   only edit policy if new policy
"RTN","IBCNSP2",8,0)
 ;   call event driver if adding a new policy
"RTN","IBCNSP2",9,0)
 ;
"RTN","IBCNSP2",10,0)
 ; -- Input  DFN  = patient
"RTN","IBCNSP2",11,0)
 ;
"RTN","IBCNSP2",12,0)
 I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","IBCNSP2",13,0)
 D REG^IBCNBME(DFN)
"RTN","IBCNSP2",14,0)
 Q
"RTN","IBCNSP2",15,0)
 ;
"RTN","IBCNSP2",16,0)
 N DIC,DIE,DE,DQ,DIR,DA,DR,DIC,DIV,X,Y,I,J,L,D,DIH,DIY,IBSEL,IBDD,IBD,IBNEW,IBNEWP,IBDT,IBQUIT,IBCNS,IBCDFN,IBCNSEH,IBCNP,IBCPOL,IBOK,VALMQUIT,IBCNT,IBEVT1,IBEVTA,VAERR,IBCOVP
"RTN","IBCNSP2",17,0)
 S IBCNP=1
"RTN","IBCNSP2",18,0)
 I '$D(DFN) D  G:$D(VALMQUIT) REGQ
"RTN","IBCNSP2",19,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP2",20,0)
 .S DFN=+Y
"RTN","IBCNSP2",21,0)
 I $G(DFN)<1 S IBQUIT=1,VALMQUIT="" G REGQ
"RTN","IBCNSP2",22,0)
 ;
"RTN","IBCNSP2",23,0)
 I '$$ASKCOVD(DFN,.IBCOV,.IBCOVP) S IBQUIT=1 G REGQ
"RTN","IBCNSP2",24,0)
 ;
"RTN","IBCNSP2",25,0)
R1 S (IBNEW,IBNEWP,IBQUIT)=0
"RTN","IBCNSP2",26,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQLM",DIC("A")="Select INSURANCE COMPANY: "
"RTN","IBCNSP2",27,0)
 S DIC("W")="N IBD S IBD=$G(^DPT(DFN,.312,+Y,0)) W ""  Group: ""_$$GRP^IBCNS($P(IBD,U,18))_""  Whose: ""_$$EXPAND^IBTRE(2.312,6,$P(IBD,U,6))"
"RTN","IBCNSP2",28,0)
 I IBCNP=1 S X=$P($G(^DIC(36,+$G(^DPT(DFN,.312,+$P($G(^DPT(DFN,.312,0)),"^",3),0)),0)),"^") I X'="" S DIC("B")=X
"RTN","IBCNSP2",29,0)
 S DA(1)=DFN
"RTN","IBCNSP2",30,0)
 I $G(^DPT(DFN,.312,0))="" S ^DPT(DFN,.312,0)="^2.312PAI^^"
"RTN","IBCNSP2",31,0)
 D ^DIC K DIC I +Y<1 S IBQUIT=1,VALMQUIT="" G REGQ
"RTN","IBCNSP2",32,0)
 S IBCDFN=+Y,IBCNS=$P(Y,"^",2)
"RTN","IBCNSP2",33,0)
 I $P(Y,"^",3) S IBNEW=1 I $$DUPCO^IBCNSOK1(DFN,IBCNS,IBCDFN,1)
"RTN","IBCNSP2",34,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP2",35,0)
 S IBCNSEH=$P($G(^IBE(350.9,1,4)),"^",1)
"RTN","IBCNSP2",36,0)
 S IBCNP=IBCNP+1
"RTN","IBCNSP2",37,0)
 I 'IBNEW,$P($G(^DPT(DFN,.312,+IBCDFN,0)),"^",18)="" D  G REGQ
"RTN","IBCNSP2",38,0)
 .I '$P($G(^IBE(350.9,1,3)),"^",18) W !,"Insurance conversion not complete, NO EDITING ALLOWED",!! S IBQUIT=1 H 3 Q
"RTN","IBCNSP2",39,0)
 .I $P($G(^IBE(350.9,1,3)),"^",18) W !,"INVALID ENTRY, DELETE AND RE-ENTER, NO EDITING ALLOWED",!! S IBQUIT=1 H 3 Q
"RTN","IBCNSP2",40,0)
 ;
"RTN","IBCNSP2",41,0)
 I $G(IBFEE),'$G(IBNEW) G REGQ ; fee users can add but not edit existing  info
"RTN","IBCNSP2",42,0)
 I $G(IBNEW) D  G:$G(IBQUIT) REGQ
"RTN","IBCNSP2",43,0)
 .D SEL^IBCNSEH
"RTN","IBCNSP2",44,0)
 .S IBCPOL=$$LK^IBCNSM31(IBCNS)
"RTN","IBCNSP2",45,0)
 .I IBCPOL<1 D NEW^IBCNSJ3(IBCNS,.IBCPOL) S:IBCPOL<1 IBQUIT=1 Q:IBQUIT  S IBNEWP=1
"RTN","IBCNSP2",46,0)
 .;  dgprflg is a 1 if called from pre-registration, set default 4
"RTN","IBCNSP2",47,0)
 .;  for pre-reg, otherwise set the default to 1 for interview
"RTN","IBCNSP2",48,0)
 .S DR=".18////"_IBCPOL_";1.09////"_$S($G(DGPRFLG):4,1:1)_";1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP2",49,0)
 .S DA=IBCDFN,DA(1)=DFN,DIE="^DPT("_DFN_",.312," D ^DIE
"RTN","IBCNSP2",50,0)
 .K DIE,DA,DR,DIC
"RTN","IBCNSP2",51,0)
 ;
"RTN","IBCNSP2",52,0)
 ; -- edit patient ins. data
"RTN","IBCNSP2",53,0)
 S IBREG=1 G:$G(IBQUIT) REGQ
"RTN","IBCNSP2",54,0)
 D PAT^IBCNSEH,PATPOL^IBCNSM32(IBCDFN),UPDCLM(+$G(IBIFN),DFN,IBCDFN)
"RTN","IBCNSP2",55,0)
 ;
"RTN","IBCNSP2",56,0)
 ; -- edit policy specific data if new or have key
"RTN","IBCNSP2",57,0)
 I $G(IBNEWP)!($D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ))) D:'$G(IBQUIT) POL^IBCNSEH,EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSP2",58,0)
 K IBREG S IBQUIT=0
"RTN","IBCNSP2",59,0)
 ;
"RTN","IBCNSP2",60,0)
REGQ ; -- exit logic and checks
"RTN","IBCNSP2",61,0)
 ; -- if no policy pointer delete
"RTN","IBCNSP2",62,0)
 I $G(IBNEW),$G(IBCDFN),$P($G(^DPT(DFN,.312,+IBCDFN,0)),"^",18)="" D
"RTN","IBCNSP2",63,0)
 .D DP1^IBCNSM1 W !,"<DELETED>  GROUP INSURANCE PLAN REQUIRED BUT NOT ENTERED" K IBNEW
"RTN","IBCNSP2",64,0)
 ;
"RTN","IBCNSP2",65,0)
 ; -- call event driver
"RTN","IBCNSP2",66,0)
 I $G(IBCDFN),$P($G(^DPT(DFN,.312,+$G(IBCDFN),0)),"^",18) D
"RTN","IBCNSP2",67,0)
 .K IBNEW
"RTN","IBCNSP2",68,0)
 .D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSP2",69,0)
 ;
"RTN","IBCNSP2",70,0)
 K IBCNS,IBCDFN,IBNEW,IBNEWP
"RTN","IBCNSP2",71,0)
 I '$G(IBQUIT) W ! G R1
"RTN","IBCNSP2",72,0)
 D COVERED^IBCNSM31(DFN,$G(IBCOVP))
"RTN","IBCNSP2",73,0)
 K IBQUIT
"RTN","IBCNSP2",74,0)
 Q
"RTN","IBCNSP2",75,0)
 ;
"RTN","IBCNSP2",76,0)
FEE ; -- fee entry point to add patient insurance.
"RTN","IBCNSP2",77,0)
 D FEE^IBCNBME(DFN)
"RTN","IBCNSP2",78,0)
 Q
"RTN","IBCNSP2",79,0)
 ;
"RTN","IBCNSP2",80,0)
MCCR ; -- called from screen 3 of the edit bill option in mccr
"RTN","IBCNSP2",81,0)
 N DLAYGO,DIC,DIE,DE,DQ,DIR,DA,DR,DIC,DIV,X,Y,I,J,L,D,DIH,DIY,IBSEL,IBDD,IBD,IBNEW,IBNEWP,IBDT,IBQUIT,IBCNS,IBCDFN,IBCNSEH,IBCNP,IBCPOL,IBOK,VALMQUIT,IBMCR
"RTN","IBCNSP2",82,0)
 ;
"RTN","IBCNSP2",83,0)
 S IBCNP=1,IBMCR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBCNSP2",84,0)
 S DIE="^DGCR(399,",DA=IBIFN,DR="[IB SCREEN3]" D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP2",85,0)
 ;
"RTN","IBCNSP2",86,0)
 I $G(IBADI)=1 D R1 S IBCNRTN=1 K IBADI G MCCR
"RTN","IBCNSP2",87,0)
 I 'IBMCR,$$WNRBILL^IBEFUNC(IBIFN) S DGRVRCAL=1
"RTN","IBCNSP2",88,0)
 K IBCNRTN
"RTN","IBCNSP2",89,0)
 Q
"RTN","IBCNSP2",90,0)
 ;
"RTN","IBCNSP2",91,0)
UPDCLM(IBIFN,DFN,IBCDFN) ; Update the claim's insurance nodes when edits are made
"RTN","IBCNSP2",92,0)
 ;   to the patient insurance file.
"RTN","IBCNSP2",93,0)
 ;  This procedure is called when a claim is being edited from IB billing
"RTN","IBCNSP2",94,0)
 ;  screen#3 and also when the patient insurance is being edited directly.
"RTN","IBCNSP2",95,0)
 ;
"RTN","IBCNSP2",96,0)
 I '$G(IBIFN)!'$G(DFN)!'$G(IBCDFN) Q         ; missing something
"RTN","IBCNSP2",97,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,2)'=DFN Q     ; mismatch of claim and DFN
"RTN","IBCNSP2",98,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)'=1 Q      ; claim not editable
"RTN","IBCNSP2",99,0)
 I '$D(^DPT(DFN,.312,IBCDFN,0)) Q            ; missing pat ins data
"RTN","IBCNSP2",100,0)
 NEW X,Z,NODE
"RTN","IBCNSP2",101,0)
 S X=IBCDFN
"RTN","IBCNSP2",102,0)
 F Z=1:1:3 I $P($G(^DGCR(399,IBIFN,"M")),U,11+Z)=IBCDFN D  Q
"RTN","IBCNSP2",103,0)
 . S NODE="I"_Z
"RTN","IBCNSP2",104,0)
 . D IX^IBCNS2(IBIFN,NODE)
"RTN","IBCNSP2",105,0)
 . Q
"RTN","IBCNSP2",106,0)
 Q
"RTN","IBCNSP2",107,0)
 ;
"RTN","IBCNSP2",108,0)
DISP ; -- Display Patient insurance policy information for registrations
"RTN","IBCNSP2",109,0)
 Q:'$D(DFN)
"RTN","IBCNSP2",110,0)
 D DISP^IBCNS
"RTN","IBCNSP2",111,0)
DISPQ Q
"RTN","IBCNSP2",112,0)
 ;
"RTN","IBCNSP2",113,0)
ASKCOVD(DFN,IBCOV,IBCOVP) ; ask user if patient covered by insurance (2,.3192), returns true if answered yes
"RTN","IBCNSP2",114,0)
 ;
"RTN","IBCNSP2",115,0)
 N IBX,IBINSD,DIC,DIE,DA,DR,X,Y,DTOUT
"RTN","IBCNSP2",116,0)
 ;
"RTN","IBCNSP2",117,0)
 S IBCOV=$P($G(^DPT(DFN,.31)),"^",11),IBINSD=$$INSURED^IBCNS1(DFN),IBX=1 W !
"RTN","IBCNSP2",118,0)
 ;
"RTN","IBCNSP2",119,0)
 ; -- if covered by ins but none currently active so indicate
"RTN","IBCNSP2",120,0)
 I IBCOV="Y",'IBINSD W !!,"Covered By Health Insurance indicates 'YES' but none currently Active.",!,"Please Review!",!!
"RTN","IBCNSP2",121,0)
 ;
"RTN","IBCNSP2",122,0)
 ; -- ask if covered by insurance
"RTN","IBCNSP2",123,0)
 S DIE="^DPT(",DR=".3192",DA=DFN D ^DIE K DIC,DIE,DA,DR I $D(Y)!($D(DTOUT)) S IBX=0
"RTN","IBCNSP2",124,0)
 ;
"RTN","IBCNSP2",125,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),"^",11) I +IBX,IBCOVP'="Y",'IBINSD S IBX=0
"RTN","IBCNSP2",126,0)
 ;
"RTN","IBCNSP2",127,0)
 Q IBX
"RTN","IBCNSP3")
0^23^B35837178^B34813871
"RTN","IBCNSP3",1,0)
IBCNSP3 ;ALB/AAS - INSURANCE MANAGEMENT EDIT ;06-JUL-93
"RTN","IBCNSP3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,52,85,251,371**;21-MAR-94;Build 57
"RTN","IBCNSP3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP3",4,0)
 ;
"RTN","IBCNSP3",5,0)
% G ^IBCNSM4
"RTN","IBCNSP3",6,0)
 ;
"RTN","IBCNSP3",7,0)
SAVEPT(DFN,DA) ; -- Save the global before editing
"RTN","IBCNSP3",8,0)
 K ^TMP($J,"IBCNSPT")
"RTN","IBCNSP3",9,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)=$G(^DPT(DFN,.312,+DA,0))
"RTN","IBCNSP3",10,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)=$G(^DPT(DFN,.312,+DA,1))
"RTN","IBCNSP3",11,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)=$G(^DPT(DFN,.312,+DA,2))
"RTN","IBCNSP3",12,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)=$G(^DPT(DFN,.312,+DA,3))
"RTN","IBCNSP3",13,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)=$G(^DPT(DFN,.312,+DA,4))
"RTN","IBCNSP3",14,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)=$G(^DPT(DFN,.312,+DA,5))
"RTN","IBCNSP3",15,0)
 Q
"RTN","IBCNSP3",16,0)
 ;
"RTN","IBCNSP3",17,0)
COMPPT(DFN,DA) ; -- Compare before editing with globals
"RTN","IBCNSP3",18,0)
 S IBDIF=0
"RTN","IBCNSP3",19,0)
 I $G(^DPT(DFN,.312,+DA,0))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",20,0)
 I $G(^DPT(DFN,.312,+DA,1))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",21,0)
 I $G(^DPT(DFN,.312,+DA,2))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",22,0)
 I $G(^DPT(DFN,.312,+DA,3))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",23,0)
 I $G(^DPT(DFN,.312,+DA,4))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",24,0)
 I $G(^DPT(DFN,.312,+DA,5))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",25,0)
 ;
"RTN","IBCNSP3",26,0)
COMPPTQ I IBDIF D:'$D(IBCOVP) COVERED^IBCNSM31(DFN,$P($G(^DPT(DFN,.31)),"^",11))
"RTN","IBCNSP3",27,0)
 Q
"RTN","IBCNSP3",28,0)
 ;
"RTN","IBCNSP3",29,0)
UPDATPT(DFN,DA) ; -- enter date and user if editing has taken place
"RTN","IBCNSP3",30,0)
 N DR,DIE,DIC
"RTN","IBCNSP3",31,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN
"RTN","IBCNSP3",32,0)
 S DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",33,0)
 D ^DIE
"RTN","IBCNSP3",34,0)
 Q
"RTN","IBCNSP3",35,0)
 ;
"RTN","IBCNSP3",36,0)
EM ; -- Employer for claims update
"RTN","IBCNSP3",37,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP3",38,0)
 N IBDIF,DA,DR,DIC,DIE
"RTN","IBCNSP3",39,0)
 D SAVEPT(DFN,IBCDFN)
"RTN","IBCNSP3",40,0)
 D VARS
"RTN","IBCNSP3",41,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EMQ
"RTN","IBCNSP3",42,0)
 ;
"RTN","IBCNSP3",43,0)
 ;S DR="2.01;S:'$P($G(^DPT(DFN,.312,+$G(DA),2)),U) Y=""@999"";W !!,""*** If ROI applies, make sure current consent is signed! ***"",!;2.015;2.02;2.03;2.04;2.05;2.06;2.07;2.08;2.09;@999"
"RTN","IBCNSP3",44,0)
 ;
"RTN","IBCNSP3",45,0)
 S DR="2.1" D ^DIE K DIE,DR
"RTN","IBCNSP3",46,0)
 ;
"RTN","IBCNSP3",47,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10),$P($G(^DPT(DFN,.312,+$G(DA),2)),U,9)="" D EMPSET(DFN,$G(DA)) ; curr emp
"RTN","IBCNSP3",48,0)
 ;
"RTN","IBCNSP3",49,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.015;2.11;2.12;2.01;W:+X !!,""*** If ROI applies, make sure current consent is signed! ***"",!!;2.02;2.03;2.04;2.05;2.06;2.07;2.08;@999" D ^DIE K DIE,DR
"RTN","IBCNSP3",50,0)
 ;
"RTN","IBCNSP3",51,0)
 ;I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U) D VARS S DR="2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@" D ^DIE
"RTN","IBCNSP3",52,0)
 ;
"RTN","IBCNSP3",53,0)
 I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.01///@;2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@;2.11///@;2.12///@" D ^DIE
"RTN","IBCNSP3",54,0)
 ;
"RTN","IBCNSP3",55,0)
 D COMPPT(DFN,IBCDFN)
"RTN","IBCNSP3",56,0)
 I IBDIF D UPDATPT(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP3",57,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP3",58,0)
EMQ S VALMBCK="R" Q
"RTN","IBCNSP3",59,0)
 ;
"RTN","IBCNSP3",60,0)
AC ; -- Add Comment
"RTN","IBCNSP3",61,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP3",62,0)
 N IBDIF,DA,DR,DIE,DIC,X,Y
"RTN","IBCNSP3",63,0)
 D SAVEPT(DFN,IBCDFN)
"RTN","IBCNSP3",64,0)
 W !!,"You may now enter a brief comment about this patient's policy"
"RTN","IBCNSP3",65,0)
 D VARS
"RTN","IBCNSP3",66,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G ACQ
"RTN","IBCNSP3",67,0)
 S DR="1.08" D ^DIE
"RTN","IBCNSP3",68,0)
 D COMPPT(DFN,IBCDFN) I IBDIF D UPDATPT(DFN,IBCDFN)
"RTN","IBCNSP3",69,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP3",70,0)
 W !!,"You may now enter comments about this Group Plan that pertains to all Patients"
"RTN","IBCNSP3",71,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G ACQ
"RTN","IBCNSP3",72,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="11" D ^DIE
"RTN","IBCNSP3",73,0)
 D BLD^IBCNSP
"RTN","IBCNSP3",74,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP3",75,0)
ACQ S VALMBCK="R" Q
"RTN","IBCNSP3",76,0)
 ;
"RTN","IBCNSP3",77,0)
BLS(X,Y) ; -- blank a section of lines
"RTN","IBCNSP3",78,0)
 N I
"RTN","IBCNSP3",79,0)
 F I=X:1:Y D BLANK^IBCNSP(.I)
"RTN","IBCNSP3",80,0)
 Q
"RTN","IBCNSP3",81,0)
 ;
"RTN","IBCNSP3",82,0)
VARS ; -- set vars for call to die for .312 node
"RTN","IBCNSP3",83,0)
 S DA(1)=DFN,DA=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",84,0)
 S DIE="^DPT("_DA(1)_",.312,"
"RTN","IBCNSP3",85,0)
 Q
"RTN","IBCNSP3",86,0)
 ;
"RTN","IBCNSP3",87,0)
SAVE(IBCPOL) ; -- Save the global before editing
"RTN","IBCNSP3",88,0)
 K ^TMP($J,"IBCNSP")
"RTN","IBCNSP3",89,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,0)=$G(^IBA(355.3,+IBCPOL,0))
"RTN","IBCNSP3",90,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,1)=$G(^IBA(355.3,+IBCPOL,1))
"RTN","IBCNSP3",91,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",92,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,6)=$G(^IBA(355.3,+IBCPOL,6))
"RTN","IBCNSP3",93,0)
 Q
"RTN","IBCNSP3",94,0)
 ;
"RTN","IBCNSP3",95,0)
COMP(IBCPOL) ; -- Compare before editing with globals
"RTN","IBCNSP3",96,0)
 S IBDIF=0
"RTN","IBCNSP3",97,0)
 I $G(^IBA(355.3,+IBCPOL,0))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,0)) S IBDIF=1 Q
"RTN","IBCNSP3",98,0)
 I $G(^IBA(355.3,+IBCPOL,1))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,1)) S IBDIF=1 Q
"RTN","IBCNSP3",99,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",100,0)
 I $G(^IBA(355.3,+IBCPOL,6))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,6)) S IBDIF=1 Q
"RTN","IBCNSP3",101,0)
 Q
"RTN","IBCNSP3",102,0)
 ;
"RTN","IBCNSP3",103,0)
UPDATE(IBCPOL) ; -- Update last edited by
"RTN","IBCNSP3",104,0)
 N DA,DIC,DIE,DR
"RTN","IBCNSP3",105,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",106,0)
 D ^DIE
"RTN","IBCNSP3",107,0)
 Q
"RTN","IBCNSP3",108,0)
 ;
"RTN","IBCNSP3",109,0)
RIDERS ; -- add/edit personal riders
"RTN","IBCNSP3",110,0)
 ;
"RTN","IBCNSP3",111,0)
 D FULL^VALM1
"RTN","IBCNSP3",112,0)
 N IBDIF,DA,DR,DIE,DIC,X,Y,IBCDFN,IBPRD,IBPRY
"RTN","IBCNSP3",113,0)
 S IBCDFN=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",114,0)
 W ! D DISPR W !
"RTN","IBCNSP3",115,0)
 ;
"RTN","IBCNSP3",116,0)
R1 S DIC="^IBA(355.7,",DIC(0)="AEQML",DLAYGO=355.7
"RTN","IBCNSP3",117,0)
 S DIC("DR")=".02////"_DFN_";.03////"_IBCDFN
"RTN","IBCNSP3",118,0)
 S DIC("S")="I $P(^(0),U,2)=DFN,$P(^(0),U,3)=IBCDFN"
"RTN","IBCNSP3",119,0)
 I $D(IBPRD) S DIC("B")=IBPRD
"RTN","IBCNSP3",120,0)
 D ^DIC K DIC,IBPRD
"RTN","IBCNSP3",121,0)
 I +Y<1 G RIDERQ
"RTN","IBCNSP3",122,0)
 S IBPRY=+Y
"RTN","IBCNSP3",123,0)
 L +^IBA(355.7,IBPRY):5 I '$T D LOCKED^IBTRCD1 G RIDERQ
"RTN","IBCNSP3",124,0)
 S DIE="^IBA(355.7,",DA=+Y,DR=".01",DIDEL=355.7
"RTN","IBCNSP3",125,0)
 D ^DIE K DA,DR,DIE,DIC,DIDEL
"RTN","IBCNSP3",126,0)
 L -^IBA(355.7,IBPRY)
"RTN","IBCNSP3",127,0)
 W ! G R1
"RTN","IBCNSP3",128,0)
RIDERQ S VALMBCK="R"
"RTN","IBCNSP3",129,0)
 Q
"RTN","IBCNSP3",130,0)
 ;
"RTN","IBCNSP3",131,0)
RD ; -- Add riders/ for multiple policies
"RTN","IBCNSP3",132,0)
 D FULL^VALM1
"RTN","IBCNSP3",133,0)
 N I,J,IBXX,VALMY
"RTN","IBCNSP3",134,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSP3",135,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSP3",136,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSP3",137,0)
 .Q:IBPPOL=""
"RTN","IBCNSP3",138,0)
 .D RIDERS
"RTN","IBCNSP3",139,0)
 .Q
"RTN","IBCNSP3",140,0)
 D BLD^IBCNSM
"RTN","IBCNSP3",141,0)
 S VALMBCK="R"
"RTN","IBCNSP3",142,0)
 Q
"RTN","IBCNSP3",143,0)
 ;
"RTN","IBCNSP3",144,0)
DISPR ; -- Display riders
"RTN","IBCNSP3",145,0)
 N IBPR,I,J
"RTN","IBCNSP3",146,0)
 S I=0
"RTN","IBCNSP3",147,0)
 I '$G(IBCDFN)!('$G(DFN)) G DISPRQ
"RTN","IBCNSP3",148,0)
 W !,"Current Personal Riders: "
"RTN","IBCNSP3",149,0)
 F  S I=$O(^IBA(355.7,"APP",DFN,IBCDFN,I)) Q:'I  S J=$O(^(I,0)),IBPR=$G(^IBA(355.7,+J,0)) D
"RTN","IBCNSP3",150,0)
 .S IBPRD=$$EXPAND^IBTRE(355.7,.01,+IBPR)
"RTN","IBCNSP3",151,0)
 .W !?5,IBPRD
"RTN","IBCNSP3",152,0)
 I '$D(IBPRD) W !?5,"None Indicated"
"RTN","IBCNSP3",153,0)
DISPRQ Q
"RTN","IBCNSP3",154,0)
 ;
"RTN","IBCNSP3",155,0)
EMPSET(DFN,IBCPOL) ; insert patient or spouses current employer as ESGHP address if that employer sponsors this plan
"RTN","IBCNSP3",156,0)
 N IBWHOS,VAOA,DIR,IBE,IBEMPST,DR,X,Y
"RTN","IBCNSP3",157,0)
 I +$G(DFN) S IBWHOS=$P($G(^DPT(DFN,.312,+$G(IBCPOL),0)),U,6) S VAOA("A")=$S(IBWHOS="v":5,IBWHOS="s":6,1:"")
"RTN","IBCNSP3",158,0)
 I $G(VAOA("A"))'="" D OAD^VADPT I $G(VAOA(9))'="" D
"RTN","IBCNSP3",159,0)
 . ;
"RTN","IBCNSP3",160,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" W ! D ^DIR W ! Q:'Y  W "...."
"RTN","IBCNSP3",161,0)
 . D VARS S IBE=$S(IBWHOS="v":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNSP3",162,0)
 . ;
"RTN","IBCNSP3",163,0)
 . S DR="2.015///"_VAOA(9)_";2.02///"_VAOA(1)_";2.03///"_VAOA(2)_";2.04///"_VAOA(3)_";2.05///"_VAOA(4) D ^DIE
"RTN","IBCNSP3",164,0)
 . S DR="2.06////"_$P(VAOA(5),U,1)_";2.07////"_$P(VAOA(11),U,1)_";2.08///"_$E(VAOA(8),1,15)_";2.11////"_IBEMPST D ^DIE
"RTN","IBCNSP3",165,0)
 Q
"RTN","IBCNSU")
0^22^B38899795^B31546366
"RTN","IBCNSU",1,0)
IBCNSU ;ALB/AAS - INSURANCE UTILITY ROUTINE ;19-MAY-93
"RTN","IBCNSU",2,0)
 ;;2.0;INTEGRATED BILLING;**28,103,371**; 21-MAR-94;Build 57
"RTN","IBCNSU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSU",4,0)
 ;
"RTN","IBCNSU",5,0)
AB(IBCPOL,IBYR,IBASK) ; -- Return entry in Annual Benefits file
"RTN","IBCNSU",6,0)
 ;  Input:  IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU",7,0)
 ;          IBYR    = fileman internal date, Default = dt
"RTN","IBCNSU",8,0)
 ;          IBASK   = 1 if want to ask okay to add new entry
"RTN","IBCNSU",9,0)
 ;
"RTN","IBCNSU",10,0)
 ; Output:  IBCAB   = pointer to Annual Benefits file if added, else null
"RTN","IBCNSU",11,0)
 ;
"RTN","IBCNSU",12,0)
 N DIR,IBCAB
"RTN","IBCNSU",13,0)
 S IBCAB=""
"RTN","IBCNSU",14,0)
 I $G(IBCPOL)="" G ABQ
"RTN","IBCNSU",15,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU",16,0)
 ;S IBYR=$E(IBYR,1,3)_"0000"
"RTN","IBCNSU",17,0)
 ;
"RTN","IBCNSU",18,0)
 ; -- try to find entry for policy for year
"RTN","IBCNSU",19,0)
 S IBCAB=$O(^IBA(355.4,"APY",IBCPOL,-IBYR,0))
"RTN","IBCNSU",20,0)
 ;
"RTN","IBCNSU",21,0)
 ; -- if no match add new entry
"RTN","IBCNSU",22,0)
 I 'IBCAB D
"RTN","IBCNSU",23,0)
 .I $G(IBASK) S DIR(0)="Y",DIR("A")="Are you adding a new Annual Benefits YEAR",DIR("B")="YES" D ^DIR I $D(DIRUT)!(Y<1) S VALMQUIT="" Q
"RTN","IBCNSU",24,0)
 .S IBCAB=$$ADDB(IBCPOL,IBYR)
"RTN","IBCNSU",25,0)
 .Q
"RTN","IBCNSU",26,0)
ABQ Q IBCAB
"RTN","IBCNSU",27,0)
 ;
"RTN","IBCNSU",28,0)
ADDB(IBCPOL,IBYR) ; -- add entries to Annual Benefits file
"RTN","IBCNSU",29,0)
 ;  Input:  IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU",30,0)
 ;          IBYR    = fileman internal date, Default = dt
"RTN","IBCNSU",31,0)
 ;
"RTN","IBCNSU",32,0)
 ; Output:  IBCAB   = pointer to Annual Benefits file if added, else null
"RTN","IBCNSU",33,0)
 ;
"RTN","IBCNSU",34,0)
 N %DT,IBN1,IBCAB,DIC,DIE,DR,DA,DLAYGO,DO,DD
"RTN","IBCNSU",35,0)
 S IBCAB=""
"RTN","IBCNSU",36,0)
 I $G(IBCPOL)="" G ADDBQ
"RTN","IBCNSU",37,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU",38,0)
 K DD,DO,DIC,DR S DIC="^IBA(355.4,",DIC(0)="L",DLAYGO=355.4
"RTN","IBCNSU",39,0)
 ;
"RTN","IBCNSU",40,0)
 ;S X=$E(IBYR,1,3)_"0000"
"RTN","IBCNSU",41,0)
 S X=IBYR D FILE^DICN I +Y<0 G ADDBQ
"RTN","IBCNSU",42,0)
 S (IBCAB,DA)=+Y,DIE="^IBA(355.4,",DR=".02////"_IBCPOL
"RTN","IBCNSU",43,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSU",44,0)
ADDBQ Q IBCAB
"RTN","IBCNSU",45,0)
 ;
"RTN","IBCNSU",46,0)
CHIP(IBCDFND) ; -- convert node with no hip pointer to one with hip pointer
"RTN","IBCNSU",47,0)
 ;   Input:  IBCDFND  = zeroth node of insurance type multiple
"RTN","IBCNSU",48,0)
 ;                    = ^dpt(dfn,.312,ibcdfn,0)
"RTN","IBCNSU",49,0)
 ;
"RTN","IBCNSU",50,0)
 ;  Output:  IBCPOL   = pointer to policy file
"RTN","IBCNSU",51,0)
 ;
"RTN","IBCNSU",52,0)
 N IBCNS,IBGRP,IBGRNA,IBGRNU
"RTN","IBCNSU",53,0)
 S IBCNS=+IBCDFND,IBGRNA=$P(IBCDFND,"^",15),IBGRNU=$P(IBCDFND,"^",3),IBGRP=0
"RTN","IBCNSU",54,0)
 I IBGRNA'=""!(IBGRNU'="") S IBGRP=1
"RTN","IBCNSU",55,0)
 S IBCPOL=$$HIP(IBCNS,IBGRP,IBGRNA,IBGRNU)
"RTN","IBCNSU",56,0)
CHIPQ Q IBCPOL
"RTN","IBCNSU",57,0)
 ;
"RTN","IBCNSU",58,0)
HIP(IBCNS,IBGRP,IBGRNA,IBGRNU) ; -- find internal entry number in policy file
"RTN","IBCNSU",59,0)
 ;  Input:  IBCNS  = pointer to ins co file
"RTN","IBCNSU",60,0)
 ;          IBGRP  = 1 if group policy, 0 if not
"RTN","IBCNSU",61,0)
 ;          IBGRNA = group name
"RTN","IBCNSU",62,0)
 ;          IBGRNU = group number
"RTN","IBCNSU",63,0)
 ;
"RTN","IBCNSU",64,0)
 ; Output:  IBCPOL = pointer to policy file
"RTN","IBCNSU",65,0)
 ;
"RTN","IBCNSU",66,0)
 N %DT
"RTN","IBCNSU",67,0)
 S IBCPOL=""
"RTN","IBCNSU",68,0)
 I $G(^DIC(36,+$G(IBCNS),0))="" G HIPQ
"RTN","IBCNSU",69,0)
 S IBGRP=+$G(IBGRP) ; if undefine, is not a group policy
"RTN","IBCNSU",70,0)
 I 'IBGRP S IBCPOL=$$ADDH(IBCNS,IBGRP) G HIPQ
"RTN","IBCNSU",71,0)
 ;
"RTN","IBCNSU",72,0)
 S:$G(IBGRNU)="" IBGRNU="IB ZZZZZ"
"RTN","IBCNSU",73,0)
 I IBGRNU'="IB ZZZZZ" S IBCPOL=$O(^IBA(355.3,"AGNU",IBCNS,IBGRNU,0))
"RTN","IBCNSU",74,0)
 I IBCPOL,$P($G(^IBA(355.3,+IBCPOL,0)),"^",3)=IBGRNA G HIPQ ; match both
"RTN","IBCNSU",75,0)
 ;
"RTN","IBCNSU",76,0)
 S:$G(IBGRNA)="" IBGRNA="IB ZZZZZ"
"RTN","IBCNSU",77,0)
 S IBCPOL=$O(^IBA(355.3,"AGNA",IBCNS,IBGRNA,0))
"RTN","IBCNSU",78,0)
 I IBCPOL,$P($G(^IBA(355.3,+IBCPOL,0)),"^",4)=IBGRNU G HIPQ ; match both
"RTN","IBCNSU",79,0)
 ;
"RTN","IBCNSU",80,0)
 I 'IBCPOL S IBCPOL=$$ADDH(IBCNS,IBGRP) D
"RTN","IBCNSU",81,0)
 .I IBGRNA="",IBGRNU="" Q
"RTN","IBCNSU",82,0)
 .S:IBGRNA="IB ZZZZZ" IBGRNA="" S:IBGRNU="IB ZZZZZ" IBGRNU=""
"RTN","IBCNSU",83,0)
 .S DA=IBCPOL,DIE="^IBA(355.3,",DR=".03////"_$$STRIP(IBGRNA,";")_";.04////"_$$STRIP(IBGRNU,";")
"RTN","IBCNSU",84,0)
 .D ^DIE K DA,DR,DIC,DIE
"RTN","IBCNSU",85,0)
HIPQ Q IBCPOL
"RTN","IBCNSU",86,0)
 ;
"RTN","IBCNSU",87,0)
ADDH(IBCNS,IBGRP,IBGNA,IBGNU) ; -- add entries to health insurance policy file (355.3)
"RTN","IBCNSU",88,0)
 ;     Input:  IBCNS  = pointer to ins co file
"RTN","IBCNSU",89,0)
 ;             IBGRP  = 1 if group policy, 0 if no
"RTN","IBCNSU",90,0)
 ;
"RTN","IBCNSU",91,0)
 ;    Output:  IBCPOL = pointer to policy file, if added else null
"RTN","IBCNSU",92,0)
 ;
"RTN","IBCNSU",93,0)
 N %DT,IBN1,IBCAB,DIC,DIE,DR,DA,DLAYGO,DO,DD
"RTN","IBCNSU",94,0)
 S IBCPOL=""
"RTN","IBCNSU",95,0)
 I $G(IBCNS)="" G ADDHQ
"RTN","IBCNSU",96,0)
 K DD,DO,DIC,DR S DIC="^IBA(355.3,",DIC(0)="L",DLAYGO=355.3
"RTN","IBCNSU",97,0)
 ;
"RTN","IBCNSU",98,0)
 S X=IBCNS D FILE^DICN I +Y<0 G ADDHQ
"RTN","IBCNSU",99,0)
 S (DA,IBCPOL)=+Y,DIE="^IBA(355.3,",DR=".02////"_+$G(IBGRP)
"RTN","IBCNSU",100,0)
 I IBGRP=0,$G(DFN) S DR=DR_";.1////"_DFN
"RTN","IBCNSU",101,0)
 I $D(IBGNU) S DR=DR_";.04///^S X=IBGNU"
"RTN","IBCNSU",102,0)
 I $D(IBGNA) S DR=DR_";.03///^S X=IBGNA"
"RTN","IBCNSU",103,0)
 D ^DIE K DA,DR,DIE,DIC
"RTN","IBCNSU",104,0)
 I $G(IBCNTP)'="" S IBCNTP=IBCNTP+1
"RTN","IBCNSU",105,0)
ADDHQ Q IBCPOL
"RTN","IBCNSU",106,0)
 ;
"RTN","IBCNSU",107,0)
ODELP(DFN,INS) ; -- can an insurance policy be deleted
"RTN","IBCNSU",108,0)
 ; -- called by ^dd(2.312,0,"del",.01) and by ibcnsm
"RTN","IBCNSU",109,0)
 ; -- input  dfn: ien of patient in file 2.
"RTN","IBCNSU",110,0)
 ;           ins: ien of ins. co in file 36
"RTN","IBCNSU",111,0)
 ;
"RTN","IBCNSU",112,0)
 ; -- output      1 if no deletion allowed
"RTN","IBCNSU",113,0)
 ;                 0 if deletion allowed
"RTN","IBCNSU",114,0)
 N I,X,Y S X=0
"RTN","IBCNSU",115,0)
 ;
"RTN","IBCNSU",116,0)
 ; -- do not delete if any uncancelled bills
"RTN","IBCNSU",117,0)
 S J=0 F  S J=$O(^DGCR(399,"AE",DFN,INS,J)) Q:'J  I $P(^DGCR(399,J,"S"),"^",17)="" S X=1 Q
"RTN","IBCNSU",118,0)
ODELPQ Q X
"RTN","IBCNSU",119,0)
 ;
"RTN","IBCNSU",120,0)
STRIP(X,X1) ; -- strip characters from string
"RTN","IBCNSU",121,0)
 ;    input:  x  = string
"RTN","IBCNSU",122,0)
 ;            x1 = character to strip (default is ";"
"RTN","IBCNSU",123,0)
 N I,X2
"RTN","IBCNSU",124,0)
 S X2="" S:$G(X1)="" X1=";"
"RTN","IBCNSU",125,0)
 S X1=$E(X1)
"RTN","IBCNSU",126,0)
 F I=1:1 S X2=X2_$P(X,X1,I) Q:($P(X,X1,I+1,999)'[X1)
"RTN","IBCNSU",127,0)
 Q X2
"RTN","IBCNSU",128,0)
 ;
"RTN","IBCNSU",129,0)
 ;
"RTN","IBCNSU",130,0)
DELP(DFN,INS,IBC) ; -- can an insurance policy be deleted
"RTN","IBCNSU",131,0)
 ; -- called by ^dd(2.312,0,"del",.01) and by ibcnsm
"RTN","IBCNSU",132,0)
 ; -- input  dfn: ien of patient in file 2.
"RTN","IBCNSU",133,0)
 ;           ins: ien of ins. co in file 36
"RTN","IBCNSU",134,0)
 ;           ibc: ien of policy in file 2.312 to do a match
"RTN","IBCNSU",135,0)
 ;
"RTN","IBCNSU",136,0)
 ; -- output      1 if no deletion allowed
"RTN","IBCNSU",137,0)
 ;                0 if deletion allowed
"RTN","IBCNSU",138,0)
 ;
"RTN","IBCNSU",139,0)
 N ARR,J,ONEPOL,X
"RTN","IBCNSU",140,0)
 ;
"RTN","IBCNSU",141,0)
 ; - check input
"RTN","IBCNSU",142,0)
 I '$G(DFN)!'$G(INS) S X=1 G DELPQ
"RTN","IBCNSU",143,0)
 ;
"RTN","IBCNSU",144,0)
 ; - see if vet has more than one policy with carrier; set flag
"RTN","IBCNSU",145,0)
 ; - also, if no policy is passed, assume the patient has one policy
"RTN","IBCNSU",146,0)
 I $G(IBC) D
"RTN","IBCNSU",147,0)
 .S J=0  F  S J=$O(^DPT("AB",IBC,DFN,J)) Q:'J  S ARR(J)=$G(^DPT(DFN,.312,J,0))
"RTN","IBCNSU",148,0)
 .S (J,ONEPOL)=0 S J=$O(ARR(J)) I J,'$O(ARR(J)) S ONEPOL=1
"RTN","IBCNSU",149,0)
 E  S ONEPOL=1
"RTN","IBCNSU",150,0)
 ;
"RTN","IBCNSU",151,0)
 ;
"RTN","IBCNSU",152,0)
 ; -- do not delete if any uncancelled bills
"RTN","IBCNSU",153,0)
 S (J,X)=0 F  S J=$O(^DGCR(399,"AE",DFN,INS,J)) Q:'J  D  Q:X
"RTN","IBCNSU",154,0)
 .;
"RTN","IBCNSU",155,0)
 .N ARRP,POL,K,L,M,MP,S,Z
"RTN","IBCNSU",156,0)
 .S Z=$G(^DGCR(399,J,0)),M=$G(^("M")),MP=$G(^("MP")),S=$G(^("S"))
"RTN","IBCNSU",157,0)
 .;
"RTN","IBCNSU",158,0)
 .; - skip cancelled bills
"RTN","IBCNSU",159,0)
 .I $P(S,"^",17)'="" Q
"RTN","IBCNSU",160,0)
 .;
"RTN","IBCNSU",161,0)
 .; - set flag if the patient has just one policy with the company
"RTN","IBCNSU",162,0)
 .I ONEPOL S X=1 Q
"RTN","IBCNSU",163,0)
 .;
"RTN","IBCNSU",164,0)
 .; - if there are no policy pointers in the claim,
"RTN","IBCNSU",165,0)
 .I '$P(M,"^",12),'$P(M,"^",13),'$P(M,"^",14),'$P(MP,"^",2) D  Q
"RTN","IBCNSU",166,0)
 ..;
"RTN","IBCNSU",167,0)
 ..; - find all policies effective on the event date
"RTN","IBCNSU",168,0)
 ..S K=0 F  S K=$O(ARR(K)) Q:'K  S POL=ARR(K) D
"RTN","IBCNSU",169,0)
 ...I $P(POL,"^",8) Q:$P(Z,"^",3)<$P(POL,"^",8)
"RTN","IBCNSU",170,0)
 ...I $P(POL,"^",4) Q:$P(Z,"^",3)>$P(POL,"^",4)
"RTN","IBCNSU",171,0)
 ...S ARRP(K)=""
"RTN","IBCNSU",172,0)
 ..;
"RTN","IBCNSU",173,0)
 ..; - if there are two such policies, trust user judgement and assume
"RTN","IBCNSU",174,0)
 ..; - policy is not related to this claim.
"RTN","IBCNSU",175,0)
 ..S L=$O(ARRP(0)) I L,$O(ARR(L)) Q
"RTN","IBCNSU",176,0)
 ..;
"RTN","IBCNSU",177,0)
 ..; - if there is just one policy, and it is the same as the one
"RTN","IBCNSU",178,0)
 ..; - passed in, do not allow deletion.
"RTN","IBCNSU",179,0)
 ..I L=IBC S X=1
"RTN","IBCNSU",180,0)
 .;
"RTN","IBCNSU",181,0)
 .; - if one of the claim policy pointers is the same as the policy
"RTN","IBCNSU",182,0)
 .; - passed in, do not allow deletion.
"RTN","IBCNSU",183,0)
 .I $P(MP,"^",2)=IBC S X=1 Q
"RTN","IBCNSU",184,0)
 .I $P(M,"^",12)=IBC!($P(M,"^",13)=IBC)!($P(M,"^",14)=IBC) S X=1
"RTN","IBCNSU",185,0)
 ;
"RTN","IBCNSU",186,0)
 ;
"RTN","IBCNSU",187,0)
DELPQ Q X
"RTN","IBCNSU",188,0)
 ;
"RTN","IBCNSU",189,0)
DUPADDRL(DATA,IBCNS,FLD1,FLD2) ; Insurance address lines can not be duplicated
"RTN","IBCNSU",190,0)
 ; DATA - Value being compared
"RTN","IBCNSU",191,0)
 ; FLD1 - First field to check against
"RTN","IBCNSU",192,0)
 ; FLD2 - Second field to check against (OPTIONAL)
"RTN","IBCNSU",193,0)
 ;
"RTN","IBCNSU",194,0)
 ; Returns 1 if this field is a duplicate of another field.
"RTN","IBCNSU",195,0)
 ;
"RTN","IBCNSU",196,0)
 N Z1,Z2
"RTN","IBCNSU",197,0)
 Q:$G(DATA)="" 0  ; should not happen because this is invoked as an input transform
"RTN","IBCNSU",198,0)
 Q:'$G(IBCNS) 1  ; stop from editing through fileman
"RTN","IBCNSU",199,0)
 S DATA=$$UP^XLFSTR($G(DATA)),DATA=$$TRIM^XLFSTR(DATA)
"RTN","IBCNSU",200,0)
 S Z1=$$GET1^DIQ(36,+$G(IBCNS),+$G(FLD1),"I")
"RTN","IBCNSU",201,0)
 S Z1=$$UP^XLFSTR(Z1),Z1=$$TRIM^XLFSTR(Z1)
"RTN","IBCNSU",202,0)
 S Z2=$$GET1^DIQ(36,+$G(IBCNS),+$G(FLD2),"I")
"RTN","IBCNSU",203,0)
 S Z2=$$UP^XLFSTR(Z2),Z2=$$TRIM^XLFSTR(Z2)
"RTN","IBCNSU",204,0)
 I DATA=Z1 D CLEAN^DILF Q 1
"RTN","IBCNSU",205,0)
 I DATA=Z2 D CLEAN^DILF Q 1
"RTN","IBCNSU",206,0)
 D CLEAN^DILF
"RTN","IBCNSU",207,0)
 Q 0
"RTN","IBCNSU",208,0)
 ;
"RTN","IBCNSU1")
0^19^B18337578^B11956107
"RTN","IBCNSU1",1,0)
IBCNSU1 ;ALB/AAS - INSURANCE UTILITY ROUTINE ;19-MAY-93
"RTN","IBCNSU1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,244,371**;21-MAR-94;Build 57
"RTN","IBCNSU1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSU1",4,0)
 ;
"RTN","IBCNSU1",5,0)
RCHK(X) ; -- Input transform for different revenue codes in file 36
"RTN","IBCNSU1",6,0)
 ;    Returns 1 if passes, 0 if not pass input transform
"RTN","IBCNSU1",7,0)
 ;
"RTN","IBCNSU1",8,0)
 N I,Y,RC,NO S Y=0
"RTN","IBCNSU1",9,0)
 I $G(X)="" G RCHKQ
"RTN","IBCNSU1",10,0)
 F I=1:1 S RC=$P(X,",",I) Q:RC=""  I $S(RC?3N:0,RC?5N:0,1:1) S NO=1 Q
"RTN","IBCNSU1",11,0)
 I '$G(NO) S Y=1
"RTN","IBCNSU1",12,0)
RCHKQ Q Y
"RTN","IBCNSU1",13,0)
 ;
"RTN","IBCNSU1",14,0)
BU(DFN,IBCPOL,IBYR,IBCDFN,IBASK) ; -- Return entry in Benefits Used file
"RTN","IBCNSU1",15,0)
 ;     Input:  IBCDFN  = pointer to patient file policy (2.312)
"RTN","IBCNSU1",16,0)
 ;             DFN     = patient pointer        
"RTN","IBCNSU1",17,0)
 ;             IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU1",18,0)
 ;             IBYR    = fileman internal date, year will be calendar
"RTN","IBCNSU1",19,0)
 ;                       year of the internal date, Default = dt
"RTN","IBCNSU1",20,0)
 ;             IBASK   = 1 if want to ask okay to add new entry
"RTN","IBCNSU1",21,0)
 ;
"RTN","IBCNSU1",22,0)
 ;    Output:  IBCBU   = pointer to Benefits Used file if added,
"RTN","IBCNSU1",23,0)
 ;                       else null
"RTN","IBCNSU1",24,0)
 ;
"RTN","IBCNSU1",25,0)
 N DIR,IBCBU
"RTN","IBCNSU1",26,0)
 S IBCBU=""
"RTN","IBCNSU1",27,0)
 I $G(IBCPOL)="" G BUQ
"RTN","IBCNSU1",28,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU1",29,0)
 ;
"RTN","IBCNSU1",30,0)
 ;if no match display message
"RTN","IBCNSU1",31,0)
 I '$O(^IBA(355.4,"APY",IBCPOL,-IBYR,0)) W !!,"You cannot add a new Benefits Used BENEFIT YEAR",!! G BUQ
"RTN","IBCNSU1",32,0)
 ;
"RTN","IBCNSU1",33,0)
 ; -- try to find entry for policy for year
"RTN","IBCNSU1",34,0)
 S IBCBU=$O(^IBA(355.5,"APPY",DFN,IBCPOL,-IBYR,IBCDFN,0))
"RTN","IBCNSU1",35,0)
 ;
"RTN","IBCNSU1",36,0)
 ; -- if no match add new entry
"RTN","IBCNSU1",37,0)
 I 'IBCBU D
"RTN","IBCNSU1",38,0)
 .I $G(IBASK) S DIR(0)="Y",DIR("A")="Are you adding a new Benefits Used YEAR",DIR("B")="YES" D ^DIR I $D(DIRUT)!(Y<1) S VALMQUIT="" Q
"RTN","IBCNSU1",39,0)
 .S IBCBU=$$ADDBU(DFN,IBCPOL,IBYR,IBCDFN)
"RTN","IBCNSU1",40,0)
 .Q
"RTN","IBCNSU1",41,0)
 ;
"RTN","IBCNSU1",42,0)
BUQ Q IBCBU
"RTN","IBCNSU1",43,0)
 ;
"RTN","IBCNSU1",44,0)
ADDBU(DFN,IBCPOL,IBYR,IBCDFN) ; -- add entries to Benefits Used file
"RTN","IBCNSU1",45,0)
 ;     Input:  DFN     = pointer to patient file
"RTN","IBCNSU1",46,0)
 ;             IBCDFN  = point to patient policy (2.312)
"RTN","IBCNSU1",47,0)
 ;             IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU1",48,0)
 ;             IBYR    = fileman internal date, year will be calendar
"RTN","IBCNSU1",49,0)
 ;                       year of the internal date, Default = dt
"RTN","IBCNSU1",50,0)
 ;
"RTN","IBCNSU1",51,0)
 ;    Output:  IBCBU   = pointer to Benefits Used file if added,
"RTN","IBCNSU1",52,0)
 ;                       else null
"RTN","IBCNSU1",53,0)
 ;
"RTN","IBCNSU1",54,0)
 N %DT,IBN1,IBCBU,DIC,DIE,DR,DA,DLAYGO,DO,DD
"RTN","IBCNSU1",55,0)
 S IBCBU=""
"RTN","IBCNSU1",56,0)
 I $G(IBCDFN)="" G ADDBUQ
"RTN","IBCNSU1",57,0)
 I $G(IBCPOL)="" G ADDBUQ
"RTN","IBCNSU1",58,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU1",59,0)
 K DD,DO,DIC,DR S DIC="^IBA(355.5,",DIC(0)="L",DLAYGO=355.5
"RTN","IBCNSU1",60,0)
 ;
"RTN","IBCNSU1",61,0)
 ;S IBYR=$E(IBYR,1,3)_"0000"
"RTN","IBCNSU1",62,0)
 S X=IBCPOL D FILE^DICN I +Y<0 G ADDBUQ
"RTN","IBCNSU1",63,0)
 S (IBCBU,DA)=+Y,DIE="^IBA(355.5,",DR=".02////"_DFN_";.03////"_IBYR_";.17////"_IBCDFN_";1.01///NOW;1.02////"_DUZ
"RTN","IBCNSU1",64,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSU1",65,0)
ADDBUQ Q IBCBU
"RTN","IBCNSU1",66,0)
 ;
"RTN","IBCNSU1",67,0)
VET() ; -- Input Transform for sub-file 2.312, Name of Insured (#17)
"RTN","IBCNSU1",68,0)
 ;    Quit 1 to stuff Patient Name
"RTN","IBCNSU1",69,0)
 ;    Quit 0 to not stuff and allow editing
"RTN","IBCNSU1",70,0)
 ;
"RTN","IBCNSU1",71,0)
 N IBY,IB0 S IBY=0
"RTN","IBCNSU1",72,0)
 G VETQ    ; IB*2*371 - Allow edits to the patient name in all cases
"RTN","IBCNSU1",73,0)
 S IB0=$G(^DPT(+$G(DA(1)),.312,+$G(DA),0))
"RTN","IBCNSU1",74,0)
 I $P(IB0,"^",6)'="v" G VETQ
"RTN","IBCNSU1",75,0)
 I +IB0'=+$$GETWNR^IBCNSMM1 S IBY=1 G VETQ
"RTN","IBCNSU1",76,0)
 I '$D(X),$P(IB0,"^",17)="" S IBY=1
"RTN","IBCNSU1",77,0)
VETQ Q IBY
"RTN","IBCNSU1",78,0)
 ;
"RTN","IBCNSU1",79,0)
 ;
"RTN","IBCNSU1",80,0)
SUBID ; -- Input Transform for sub-file #2.312, Subscriber ID (#1)
"RTN","IBCNSU1",81,0)
 N NODE,L,R,CHAR,X1
"RTN","IBCNSU1",82,0)
 S CHAR="~`!@#$%^&*()_-+={}[]|\/?.,<>;:' """
"RTN","IBCNSU1",83,0)
 S NODE=^DPT(DA(1),.312,DA,0)
"RTN","IBCNSU1",84,0)
 ;
"RTN","IBCNSU1",85,0)
 ; - if the policy is a Medicare policy, make sure the subscriber ID
"RTN","IBCNSU1",86,0)
 ;   is a valid HICN number
"RTN","IBCNSU1",87,0)
 I $P(NODE,U)=+$$GETWNR^IBCNSMM1 S X=$TR(X,"-","") I '$$VALHIC^IBCNSMM(X) D HLP^IBCNSM32 K X Q
"RTN","IBCNSU1",88,0)
 ;
"RTN","IBCNSU1",89,0)
 S R=$P(NODE,U,16)
"RTN","IBCNSU1",90,0)
 S L=$TR($P(^DPT(DA(1),0),U,9),CHAR,"")
"RTN","IBCNSU1",91,0)
 S R=$S(R="01":1,R="":1,1:0)
"RTN","IBCNSU1",92,0)
 ;
"RTN","IBCNSU1",93,0)
 ; - if subscriber ID is the SSN of patient, remove all extraneous
"RTN","IBCNSU1",94,0)
 ;   characters
"RTN","IBCNSU1",95,0)
 S X1=$TR(X,CHAR,"") I X1?9N,X1=L S X=X1
"RTN","IBCNSU1",96,0)
 ;
"RTN","IBCNSU1",97,0)
 K:$L(X)>20!($L(X)<3) X
"RTN","IBCNSU1",98,0)
 Q
"RTN","IBCNSU1",99,0)
 ;
"RTN","IBCNSU1",100,0)
 ;
"RTN","IBCNSU1",101,0)
HICN(DFN) ; -- return Patient's Medicare HIC number
"RTN","IBCNSU1",102,0)
 ;    Return HICN of Medicare WNR Part A or Part B
"RTN","IBCNSU1",103,0)
 ;    Return -1 if none exits
"RTN","IBCNSU1",104,0)
 ;
"RTN","IBCNSU1",105,0)
 N IBWNR,IBX,IBY,IB0
"RTN","IBCNSU1",106,0)
 S IBWNR=$$GETWNR^IBCNSMM1,IBY=""
"RTN","IBCNSU1",107,0)
 I '$O(^DPT(DFN,.312,"B",+IBWNR,0)) S IBY=-1 G HICNQ
"RTN","IBCNSU1",108,0)
 S IBX=0 F  S IBX=$O(^DPT(DFN,.312,"B",+IBWNR,IBX)) Q:('IBX)!(IBY]"")  D
"RTN","IBCNSU1",109,0)
 .S IB0=$G(^DPT(DFN,.312,IBX,0))
"RTN","IBCNSU1",110,0)
 .I $P(IB0,U,18)'=$P(IBWNR,U,3),$P(IB0,U,18)'=$P(IBWNR,U,5) Q
"RTN","IBCNSU1",111,0)
 .; 8/18/2003 - Added translation code to remove hyphens if they exist.
"RTN","IBCNSU1",112,0)
 .I $P(IB0,U,2)]"" S IBY=$TR($P(IB0,U,2),"- ","")
"RTN","IBCNSU1",113,0)
 S:IBY="" IBY=-1
"RTN","IBCNSU1",114,0)
HICNQ Q IBY
"RTN","IBCNSU1",115,0)
 ;
"RTN","IBCNSU1",116,0)
CHKQUAL(DFN,IEN,QUAL,PC1,PC2) ; check for duplicate qualifiers for patient
"RTN","IBCNSU1",117,0)
 ; and subscriber secondary ID's.  All parameters required.
"RTN","IBCNSU1",118,0)
 ;
"RTN","IBCNSU1",119,0)
 ;   DFN - internal patient#
"RTN","IBCNSU1",120,0)
 ;   IEN - ien of 2.312 subfile
"RTN","IBCNSU1",121,0)
 ;  QUAL - passed in response of the user (this is what is being 
"RTN","IBCNSU1",122,0)
 ;         checked to see if it is valid)
"RTN","IBCNSU1",123,0)
 ;   PC1 - this is the piece# for one of the other qualifiers
"RTN","IBCNSU1",124,0)
 ;   PC2 - this is the piece# for one of the other qualifiers
"RTN","IBCNSU1",125,0)
 ;
"RTN","IBCNSU1",126,0)
 ; Function returns 1 if the entered qualifier is OK.
"RTN","IBCNSU1",127,0)
 ; Function returns 0 if the entered qualifier is not OK.  It is either
"RTN","IBCNSU1",128,0)
 ;                    a duplicate or is otherwise invalid.
"RTN","IBCNSU1",129,0)
 ;
"RTN","IBCNSU1",130,0)
 NEW OK,DATA,INS
"RTN","IBCNSU1",131,0)
 S OK=1
"RTN","IBCNSU1",132,0)
 I $G(QUAL)="" G CHKQUALX
"RTN","IBCNSU1",133,0)
 S DATA=$G(^DPT(+$G(DFN),.312,+$G(IEN),5))
"RTN","IBCNSU1",134,0)
 I $G(QUAL)=$P(DATA,U,+$G(PC1)) D CQ1 G CHKQUALX   ; duplicate
"RTN","IBCNSU1",135,0)
 I $G(QUAL)=$P(DATA,U,+$G(PC2)) D CQ1 G CHKQUALX   ; duplicate
"RTN","IBCNSU1",136,0)
 ;
"RTN","IBCNSU1",137,0)
 ; prevent the SSN qualifier when Medicare is the payer
"RTN","IBCNSU1",138,0)
 S INS=+$G(^DPT(+$G(DFN),.312,+$G(IEN),0))
"RTN","IBCNSU1",139,0)
 I $G(QUAL)="SY",$$MCRWNR^IBEFUNC(INS) D CQ2 G CHKQUALX
"RTN","IBCNSU1",140,0)
 ;
"RTN","IBCNSU1",141,0)
CHKQUALX ;
"RTN","IBCNSU1",142,0)
 Q OK
"RTN","IBCNSU1",143,0)
 ;
"RTN","IBCNSU1",144,0)
CQ1 ; specific error message#1
"RTN","IBCNSU1",145,0)
 S OK=0
"RTN","IBCNSU1",146,0)
 D EN^DDIOL("You cannot use the same qualifier more than once.",,"!!")
"RTN","IBCNSU1",147,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSU1",148,0)
 Q
"RTN","IBCNSU1",149,0)
 ;
"RTN","IBCNSU1",150,0)
CQ2 ; specific error message#2
"RTN","IBCNSU1",151,0)
 S OK=0
"RTN","IBCNSU1",152,0)
 D EN^DDIOL("You cannot use qualifier 'SY' for Medicare.",,"!!")
"RTN","IBCNSU1",153,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSU1",154,0)
 Q
"RTN","IBCNSU1",155,0)
 ;
"RTN","IBCSC8A")
0^17^B7456472^n/a
"RTN","IBCSC8A",1,0)
IBCSC8A ;BP/YMG - ADD/ENTER CHIROPRACTIC DATA ;06/08/2007
"RTN","IBCSC8A",2,0)
 ;;2.0;INTEGRATED BILLING;**371**;21-MAR-94;Build 57
"RTN","IBCSC8A",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSC8A",4,0)
 ;
"RTN","IBCSC8A",5,0)
EN ;
"RTN","IBCSC8A",6,0)
 N DAM,DIT,EC,LXD,OK,PCC,PCCI,UO,UR
"RTN","IBCSC8A",7,0)
 S UO="UNSPECIFIED [OPTIONAL]",UR="UNSPECIFIED [REQUIRED]"
"RTN","IBCSC8A",8,0)
 S EC="000"
"RTN","IBCSC8A",9,0)
EN1 ;
"RTN","IBCSC8A",10,0)
 S OK=1
"RTN","IBCSC8A",11,0)
 S DIT=$$GET1^DIQ(399,IBIFN,246) S:DIT="" DIT=UR
"RTN","IBCSC8A",12,0)
 S PCCI=$P($G(^DGCR(399,IBIFN,"U3")),U,7)
"RTN","IBCSC8A",13,0)
 S PCC=$S(PCCI'="":PCCI_" ("_$$EXTERNAL^DILFD(399,248,"",PCCI)_")",1:UR)
"RTN","IBCSC8A",14,0)
 S DAM=$$GET1^DIQ(399,IBIFN,247) S:DAM="" DAM=$S("AM"'[PCCI!(PCCI=""):UO,1:UR)
"RTN","IBCSC8A",15,0)
 S LXD=$$GET1^DIQ(399,IBIFN,245) S:LXD="" LXD=UO
"RTN","IBCSC8A",16,0)
 D DISP,EDIT G:'OK EN1
"RTN","IBCSC8A",17,0)
 D CLEAN^DILF
"RTN","IBCSC8A",18,0)
 Q
"RTN","IBCSC8A",19,0)
 ;
"RTN","IBCSC8A",20,0)
DISP ; display existing values
"RTN","IBCSC8A",21,0)
 W @IOF,!,"============================= CHIROPRACTIC DATA ==============================",!
"RTN","IBCSC8A",22,0)
 D:+EC DSPERR
"RTN","IBCSC8A",23,0)
 W !!,?3,"----------------------  Current values for Bill  -----------------------",!
"RTN","IBCSC8A",24,0)
 W !,?3,"Date of initial treatment   : ",DIT
"RTN","IBCSC8A",25,0)
 W !,?3,"Patient condition code      : ",PCC
"RTN","IBCSC8A",26,0)
 W !,?3,"Date of acute manifestation : ",DAM
"RTN","IBCSC8A",27,0)
 W !,?3,"Last x-ray date             : ",LXD,!
"RTN","IBCSC8A",28,0)
 Q
"RTN","IBCSC8A",29,0)
 ;
"RTN","IBCSC8A",30,0)
EDIT ; edit data
"RTN","IBCSC8A",31,0)
 N DEL,TOUT,UOUT
"RTN","IBCSC8A",32,0)
 S DIE="^DGCR(399,",DR="246;248;247;245",DA=IBIFN D ^DIE S TOUT=$D(DTOUT),UOUT=$D(Y) K DIE,DR,DA D CHK
"RTN","IBCSC8A",33,0)
 ; if all data is valid, we are done here
"RTN","IBCSC8A",34,0)
 Q:'+EC
"RTN","IBCSC8A",35,0)
 ; we get here if:
"RTN","IBCSC8A",36,0)
 ; - all prompts have been answered, but data is invalid, or
"RTN","IBCSC8A",37,0)
 ; - editing was interrupted by user ("^" exit), or
"RTN","IBCSC8A",38,0)
 ; - editing timed out
"RTN","IBCSC8A",39,0)
 ;
"RTN","IBCSC8A",40,0)
 ;if "^"-exit and user doesn't want to discard data, or all prompts answered, go back to the same screen
"RTN","IBCSC8A",41,0)
 I 'TOUT S DEL=1 D  I DEL=0!('UOUT) S OK=0 Q
"RTN","IBCSC8A",42,0)
 .; if "^"-exit, ask if data should be discarded
"RTN","IBCSC8A",43,0)
 .I UOUT S DIR(0)="Y",DIR("A")="Delete Chiropractic Data",DIR("B")="YES" D ^DIR S DEL=$G(Y) K DIR
"RTN","IBCSC8A",44,0)
 .Q
"RTN","IBCSC8A",45,0)
 ; if user requested to delete data or entry prompt timed out, clear out chiro fields
"RTN","IBCSC8A",46,0)
 S DIE="^DGCR(399,",DR="246///@;248///@;247///@;245///@",DA=IBIFN D ^DIE K DIE,DR,DA
"RTN","IBCSC8A",47,0)
 Q
"RTN","IBCSC8A",48,0)
 ;
"RTN","IBCSC8A",49,0)
CHK ; check data integrity
"RTN","IBCSC8A",50,0)
 ; sets 3 char error code in EC, each position containing 0 means no error
"RTN","IBCSC8A",51,0)
 ; positions containing 1 trigger the following errors:
"RTN","IBCSC8A",52,0)
 ; position 1 - Date of Initial Treatment is missing
"RTN","IBCSC8A",53,0)
 ; position 2 - Patient Condition Code is missing
"RTN","IBCSC8A",54,0)
 ; position 3 - Date of Acute manifestation is missing (for Patient Condition Code = A or M)
"RTN","IBCSC8A",55,0)
 N IBX,PCC
"RTN","IBCSC8A",56,0)
 S IBX=$P($G(^DGCR(399,IBIFN,"U3")),U,4,7),EC="000"
"RTN","IBCSC8A",57,0)
 ; chiropractic claim if any of the fields are populated
"RTN","IBCSC8A",58,0)
 S:$TR(IBX,U)'="" PCC=$P(IBX,U,4),$E(EC,1)=($P(IBX,U,2)=""),$E(EC,2)=(PCC=""),$E(EC,3)=($P(IBX,U,3)=""&(PCC]"")&("AM"[PCC))
"RTN","IBCSC8A",59,0)
 Q
"RTN","IBCSC8A",60,0)
DSPERR ; display errors
"RTN","IBCSC8A",61,0)
 W !,?3,"Errors detected:"
"RTN","IBCSC8A",62,0)
 W:+$E(EC,1) !,?5,"Date of Initial Treatment is required"
"RTN","IBCSC8A",63,0)
 W:+$E(EC,2) !,?5,"Patient Condition Code is required"
"RTN","IBCSC8A",64,0)
 W:+$E(EC,3) !,?5,"Condition code A or M requires Date of Acute Manifestation"
"RTN","IBCSC8A",65,0)
 Q
"RTN","IBCSC8H")
0^14^B34954742^B33583237
"RTN","IBCSC8H",1,0)
IBCSC8H ;ALB/ARH - MCCR SCREEN 8 (BILL SPECIFIC INFO) CMS-1500 ;4/21/92
"RTN","IBCSC8H",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,207,210,232,155,320,343,349,371**;21-MAR-94;Build 57
"RTN","IBCSC8H",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSC8H",4,0)
 ; CMS-1500 screen 8
"RTN","IBCSC8H",5,0)
 ;
"RTN","IBCSC8H",6,0)
 ; MAP TO DGCRSC8H
"RTN","IBCSC8H",7,0)
 ;
"RTN","IBCSC8H",8,0)
EN N I,IB,Y,Z
"RTN","IBCSC8H",9,0)
 D ^IBCSCU S IBSR=8,IBSR1="H",IBV1="00000000" S:IBV IBV1="11111111" F I="U","U1","UF2","UF3","U2","M","TX",0,"U3" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCSC8H",10,0)
 N IBZ,IBPRV,IBDATE,IBREQ,IBMRASEC,IBZ1
"RTN","IBCSC8H",11,0)
 ;
"RTN","IBCSC8H",12,0)
 S IBDATE=$$BDATE^IBACSV(IBIFN) ; Date of service for the bill
"RTN","IBCSC8H",13,0)
 S IBPRV=""
"RTN","IBCSC8H",14,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCSC8H",15,0)
 K IB("PRV")
"RTN","IBCSC8H",16,0)
 S IBZ=0 F  S IBZ=$O(IBPRV(IBZ)) Q:'IBZ  I $O(IBPRV(IBZ,0))!$D(IBPRV(IBZ,"NOTOPT")) M IB("PRV",IBZ)=IBPRV(IBZ)
"RTN","IBCSC8H",17,0)
 ;
"RTN","IBCSC8H",18,0)
 D H^IBCSCU
"RTN","IBCSC8H",19,0)
 S Z=1,IBW=1 X IBWW W " Unable To Work From: " S Y=$P(IB("U"),U,16) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC8H",20,0)
 W !?4,"Unable To Work To  : " S Y=$P(IB("U"),U,17) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC8H",21,0)
 S Z=2,IBW=1 X IBWW W " Admitting Dx       : " S IBZ=$$ICD9^IBACSV(+IB("U2"),IBDATE) W $S(IBZ'="":$P(IBZ,U)_" - "_$P(IBZ,U,3),1:IBUN)
"RTN","IBCSC8H",22,0)
 S IBZ="",IBZ=$S($P(IB("UF3"),U,4)]"":"Pri: "_$P(IB("UF3"),U,4),1:"")_$S($P(IB("UF3"),U,5)'="":"  Sec: "_$P(IB("UF3"),U,5),1:"")_$S($P(IB("UF3"),U,6)'="":" Ter: "_$P(IB("UF3"),U,6),1:"")
"RTN","IBCSC8H",23,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC8H",24,0)
 W !,?4,"ICN/DCN(s)         : ",IBZ
"RTN","IBCSC8H",25,0)
 S IBZ=$$CKPROV^IBCEU(IBIFN,3)
"RTN","IBCSC8H",26,0)
 S IBZ="",IBZ=$S($P(IB("U"),U,13)]"":"Pri: "_$P(IB("U"),U,13),1:"")_$S($P(IB("U2"),U,8)'="":"  Sec: "_$P(IB("U2"),U,8),1:"")_$S($P(IB("U2"),U,9)'="":"  Ter: "_$P(IB("U2"),U,9),1:"")
"RTN","IBCSC8H",27,0)
 S:IBZ="" IBZ=IBUN
"RTN","IBCSC8H",28,0)
 W !?4,"Tx Auth. Code(s)   : ",IBZ
"RTN","IBCSC8H",29,0)
 S Z=3,IBW=1 X IBWW
"RTN","IBCSC8H",30,0)
 W " Providers          : ",$S('$O(IB("PRV",0)):IBU,1:"")
"RTN","IBCSC8H",31,0)
 I $D(IB("PRV")) D  ; at least 1 provider found
"RTN","IBCSC8H",32,0)
 . N IBQ,A,A1,IBARR,IBTAX,IBNOTAX,IBSPEC,IBNOSPEC
"RTN","IBCSC8H",33,0)
 . S IBZ=0
"RTN","IBCSC8H",34,0)
 . D DEFSEC^IBCEF74(IBIFN,.IBARR)
"RTN","IBCSC8H",35,0)
 . ; PRXM/KJH - Add Taxonomy code to display for patch 343. Moved secondary IDs slightly (below).
"RTN","IBCSC8H",36,0)
 . S IBTAX=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCSC8H",37,0)
 . S IBSPEC=$$SPECTAX^IBCEF73A(IBIFN,.IBNOSPEC)
"RTN","IBCSC8H",38,0)
 . F  S IBZ=$O(IB("PRV",IBZ)) Q:'IBZ  D
"RTN","IBCSC8H",39,0)
 .. S IBQ=""
"RTN","IBCSC8H",40,0)
 .. W !,?5,"- "
"RTN","IBCSC8H",41,0)
 .. S A=$$EXPAND^IBTRE(399.0222,.01,IBZ)
"RTN","IBCSC8H",42,0)
 .. I $P($G(IB("PRV",IBZ,1)),U,4)'="" S A1=" ("_$E($P(IB("PRV",IBZ,1),U,4),1,3)_")",A=$E(A,1,16-$L(A1))_A1
"RTN","IBCSC8H",43,0)
 .. W $E(A_$J("",16),1,16),": "
"RTN","IBCSC8H",44,0)
 .. I '$P($G(IB("PRV",IBZ,1)),U,3),$P($G(IB("PRV",IBZ,1)),U)="" W IBU Q
"RTN","IBCSC8H",45,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)'="" W:'$G(IB("PRV",IBZ)) $E($P(IB("PRV",IBZ,1),U)_$J("",16),1,16) W:$G(IB("PRV",IBZ)) "(OLD BOX 31 DATA) "_$P(IB("PRV",IBZ,1),U)
"RTN","IBCSC8H",46,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)="",$P($G(IB("PRV",IBZ)),U)'="" W $E($P(IB("PRV",IBZ),U)_$J("",16),1,16)
"RTN","IBCSC8H",47,0)
 .. W "    Taxonomy: ",$S($P(IBTAX,U,IBZ)'="":$P(IBTAX,U,IBZ),1:IBU),$S($P(IBSPEC,U,IBZ)'="":" ("_$P(IBSPEC,U,IBZ)_")",1:"")
"RTN","IBCSC8H",48,0)
 .. F A=1:1:3 I $G(IBARR(IBZ,A))'="" S IBQ=IBQ_"["_$E("PST",A)_"]"_IBARR(IBZ,A)_" "
"RTN","IBCSC8H",49,0)
 .. I $L(IBQ) W !,?30,$E(IBQ,1,49)
"RTN","IBCSC8H",50,0)
 ;
"RTN","IBCSC8H",51,0)
 K IB("PRV")
"RTN","IBCSC8H",52,0)
 ;
"RTN","IBCSC8H",53,0)
 S Z=4,IBW=1 X IBWW
"RTN","IBCSC8H",54,0)
 W " Other Facility (VA/non): " S IBZ=$$EXPAND^IBTRE(399,232,+$P(IB("U2"),U,10))
"RTN","IBCSC8H",55,0)
 W $S(IBZ'="":$E(IBZ,1,23),$$PSRV^IBCEU(IBIFN):IBU,1:IBUN)
"RTN","IBCSC8H",56,0)
 I IBZ'="" D
"RTN","IBCSC8H",57,0)
 . ; PRXM/KJH - Add Taxonomy code to display for patch 343.
"RTN","IBCSC8H",58,0)
 . W ?53,"Taxonomy: "
"RTN","IBCSC8H",59,0)
 . S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,3),"X12 CODE") W $S(IBZ'="":IBZ,1:IBU)
"RTN","IBCSC8H",60,0)
 . S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,3),"SPECIALTY CODE") W $S(IBZ'="":" ("_IBZ_")",1:"")
"RTN","IBCSC8H",61,0)
 . Q
"RTN","IBCSC8H",62,0)
 ;
"RTN","IBCSC8H",63,0)
 ; clia# display - IB patch 320
"RTN","IBCSC8H",64,0)
 S (IBZ,IBZ1)=$P(IB("U2"),U,13)     ; retrieve CLIA# from database
"RTN","IBCSC8H",65,0)
 ;
"RTN","IBCSC8H",66,0)
 I IBZ="" D
"RTN","IBCSC8H",67,0)
 . NEW CLIAREQ,DEFCLIA,DIE,DA,DR
"RTN","IBCSC8H",68,0)
 . S CLIAREQ=$$CLIAREQ^IBCEP8A(IBIFN)
"RTN","IBCSC8H",69,0)
 . I 'CLIAREQ S IBZ1=IBUN Q          ; clia# not needed
"RTN","IBCSC8H",70,0)
 . S DEFCLIA=$$CLIA^IBCEP8A(IBIFN)   ; default clia# for claim
"RTN","IBCSC8H",71,0)
 . I DEFCLIA="" S IBZ1=IBU Q         ; no default found
"RTN","IBCSC8H",72,0)
 . I $G(IBMDOTCN) K IBMDOTCN S IBZ1=IBU Q     ; user @-deleted clia#
"RTN","IBCSC8H",73,0)
 . S IBZ1=DEFCLIA                    ; display and stuff default clia#
"RTN","IBCSC8H",74,0)
 . S DIE=399,DA=IBIFN,DR="235///"_DEFCLIA D ^DIE    ; stuff in default
"RTN","IBCSC8H",75,0)
 . Q
"RTN","IBCSC8H",76,0)
 ;
"RTN","IBCSC8H",77,0)
 W !,?4,"Lab CLIA #         : ",IBZ1
"RTN","IBCSC8H",78,0)
 ;
"RTN","IBCSC8H",79,0)
 ; Mammo# display IB patch 320
"RTN","IBCSC8H",80,0)
 S (IBZ,IBZ1)=$P(IB("U3"),U,1)    ; retrieve mammo# from database
"RTN","IBCSC8H",81,0)
 ;
"RTN","IBCSC8H",82,0)
 ; If mammo# is there, but should not be, then blank it out
"RTN","IBCSC8H",83,0)
 I IBZ'="",'$$XRAY^IBCEP8A(IBIFN) D
"RTN","IBCSC8H",84,0)
 . NEW DIE,DA,DR
"RTN","IBCSC8H",85,0)
 . S IBZ1=IBUN        ; mammo# not needed
"RTN","IBCSC8H",86,0)
 . S DIE=399,DA=IBIFN,DR="242////@" D ^DIE
"RTN","IBCSC8H",87,0)
 . Q
"RTN","IBCSC8H",88,0)
 ;
"RTN","IBCSC8H",89,0)
 I IBZ="" S IBZ1=IBUN
"RTN","IBCSC8H",90,0)
 W !?4,"Mammography Cert # : ",IBZ1
"RTN","IBCSC8H",91,0)
 ;
"RTN","IBCSC8H",92,0)
 S Z=5,IBW=1 X IBWW
"RTN","IBCSC8H",93,0)
 W " Chiropractic Data  : " S Y=$P(IB("U3"),U,5) X ^DD("DD") W $S(Y'="":"INITIAL TREATMENT ON "_Y,1:IBUN)
"RTN","IBCSC8H",94,0)
 ;
"RTN","IBCSC8H",95,0)
 S Z=6,IBW=1 X IBWW
"RTN","IBCSC8H",96,0)
 W " Form Locator 19    : " S IBZ=$P($G(^DGCR(399,IBIFN,"UF31")),U,3) W $S(IBZ'="":IBZ,1:IBUN)
"RTN","IBCSC8H",97,0)
 I $P(IB("U2"),U,14)'="" W !,?4,"Homebound          : ",$$EXPAND^IBTRE(399,236,$P(IB("U2"),U,14))
"RTN","IBCSC8H",98,0)
 I $P(IB("U2"),U,15)'="" W !,?4,"Date Last Seen     : ",$$EXPAND^IBTRE(399,237,$P(IB("U2"),U,15))
"RTN","IBCSC8H",99,0)
 I $P(IB("U2"),U,16)'="" W !,?4,"Spec Prog Indicator: " S IBZ=$$EXPAND^IBTRE(399,238,$P(IB("U2"),U,16)) W $S(IBZ'="":IBZ,$$WNRBILL^IBEFUNC(IBIFN):"31",1:"")
"RTN","IBCSC8H",100,0)
 ;
"RTN","IBCSC8H",101,0)
 S Z=7,IBW=1 X IBWW
"RTN","IBCSC8H",102,0)
 S IBREQ=+$$REQMRA^IBEFUNC(IBIFN) S:IBREQ IBREQ=1
"RTN","IBCSC8H",103,0)
 S IBMRASEC=$$MRASEC^IBCEF4(IBIFN)
"RTN","IBCSC8H",104,0)
 W " ",$S('IBREQ:"Force To Print?    : ",1:"Force MRA Sec Prt? : ")
"RTN","IBCSC8H",105,0)
 S IBZ=$$EXTERNAL^DILFD(399,27+IBREQ,,+$P(IB("TX"),U,8+IBREQ))
"RTN","IBCSC8H",106,0)
 I IBMRASEC,'$P(IB("TX"),U,8),$P(IB("TX"),U,9) S IBZ="FORCED TO PRINT BY MRA PRIMARY",$P(IB("TX"),U,8)=0
"RTN","IBCSC8H",107,0)
 W $S(IBZ'=""&($P(IB("TX"),U,8+IBREQ)'=""):IBZ,'$$TXMT^IBCEF4(IBIFN):"[NOT APPLICABLE - NOT TRANSMITTABLE]",IBREQ:"NO FORCED PRINT",1:IBZ)
"RTN","IBCSC8H",108,0)
 ;
"RTN","IBCSC8H",109,0)
 S Z=8,IBW=1 X IBWW
"RTN","IBCSC8H",110,0)
 W " Provider ID Maint  : (Edit Provider ID information)",!
"RTN","IBCSC8H",111,0)
 G ^IBCSCP
"RTN","IBCSC8H",112,0)
Q Q
"RTN","IBCSC8H",113,0)
 ;
"RTN","IBCSC8H",114,0)
WRT1(IBCRED) ; Write credentials mismatch
"RTN","IBCSC8H",115,0)
 W !,*7,"  **Warning** Credentials differ from those found in NEW PERSON or IB NON VA",!,$J("",14),"BILLING PROVIDER file (",$S(IBCRED="":"none",1:IBCRED),")"
"RTN","IBCSC8H",116,0)
 W !,$J("",14),"Changes will print local, but only credentials on file transmit"
"RTN","IBCSC8H",117,0)
 Q
"RTN","IBCSC8H",118,0)
 ;
"RTN","IBCSC8H",119,0)
NSAME(DA) ; Returns 1 if div on bill is not the default billing facility
"RTN","IBCSC8H",120,0)
 Q ($P($G(^IBE(350.9,1,0)),U,2)'=$P($G(^DG(40.8,+$P(^DGCR(399,DA,0),U,22),0)),U,7))
"RTN","IBCSC8H",121,0)
 ;
"RTN","IBCSC8H",122,0)
 ;IBCSC8H
"RTN","IBCSCE")
0^13^B14634015^B14217145
"RTN","IBCSCE",1,0)
IBCSCE ;ALB/MRL,MJB - MCCR SCREEN EDITS ;07 JUN 88 14:35
"RTN","IBCSCE",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,91,106,51,137,236,245,287,349,371**;21-MAR-94;Build 57
"RTN","IBCSCE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSCE",4,0)
 ;
"RTN","IBCSCE",5,0)
 ;MAP TO DGCRSCE
"RTN","IBCSCE",6,0)
 ; always do procedures last because they are edited upon return to screen routine
"RTN","IBCSCE",7,0)
 I IBDR20["54," S IBDR20=$P(IBDR20,"54,",1)_$P(IBDR20,"54,",2)_"54,"
"RTN","IBCSCE",8,0)
 I IBDR20["44," S IBDR20=$P(IBDR20,"44,",1)_$P(IBDR20,"44,",2)_"44,"
"RTN","IBCSCE",9,0)
LOOP N IBDRLP,IBDRL S IBDRLP=IBDR20 F IBDRL=1:1 S IBDR20=$P(IBDRLP,",",IBDRL) Q:IBDR20=""  D EDIT
"RTN","IBCSCE",10,0)
 Q
"RTN","IBCSCE",11,0)
EDIT N IBQUERY
"RTN","IBCSCE",12,0)
 I (IBDR20["31") D MCCR^IBCNSP2 G ENQ
"RTN","IBCSCE",13,0)
 I (IBDR20["43")!(IBDR20["52") D ^IBCSC4D G ENQ
"RTN","IBCSCE",14,0)
 I (IBDR20["74")!(IBDR20["53") K DR N I D ^IBCOPV S (DA,Y)=IBIFN G TMPL
"RTN","IBCSCE",15,0)
 I (IBDR20["54"),$P($G(^IBE(350.9,1,1)),"^",17) K DR N I D EN1^IBCCPT(.IBQUERY) D CLOSE^IBSDU(.IBQUERY) G TMPL ;
"RTN","IBCSCE",16,0)
 I (IBDR20["55") D ^IBCSC5A G ENQ
"RTN","IBCSCE",17,0)
 I (IBDR20["45")!(IBDR20["56") D ^IBCSC5B G ENQ
"RTN","IBCSCE",18,0)
 I (IBDR20["66")!(IBDR20["76") D EDIT^IBCRBE(IBIFN) D ASKCMB^IBCU65(IBIFN) G ENQ
"RTN","IBCSCE",19,0)
 I IBDR20["85",$$FT^IBCEF(IBIFN)=2 D ^IBCSC8A G ENQ ; chiropractic data
"RTN","IBCSCE",20,0)
 I IBDR20["84",$$FT^IBCEF(IBIFN)=3 D EN1^IBCEP6 G ENQ   ;UB-04
"RTN","IBCSCE",21,0)
 I IBDR20["88",$$FT^IBCEF(IBIFN)=2 D EN1^IBCEP6 G ENQ   ;CMS-1500
"RTN","IBCSCE",22,0)
 F Q=1:1:9 I IBDR20[("9"_Q) D EDIT^IBCSC9 G ENQ
"RTN","IBCSCE",23,0)
TMPL N IBFLIAE S IBFLIAE=1 ;to invoke EN^DGREGAED from [IB SCREEN1]
"RTN","IBCSCE",24,0)
 S DR="[IB SCREEN"_IBSR_IBSR1_"]",(DA,Y)=IBIFN,DIE="^DGCR(399,"
"RTN","IBCSCE",25,0)
 D ^DIE K DIE,DR,DLAYGO
"RTN","IBCSCE",26,0)
 I (IBDR20["61")!(IBDR20["71") I +$G(DGRVRCAL) D PROC^IBCU7A(IBIFN,1)
"RTN","IBCSCE",27,0)
ENQ K DIE,DR,IBDR1,IBDR20,DGDRD,DGDRS,DGDRS1,DA Q
"RTN","IBCSCE",28,0)
 ;
"RTN","IBCSCE",29,0)
 ; W I "^11^12^13^15^14^21^22^23^"[("^"_J_"^") G W1
"RTN","IBCSCE",30,0)
 ; I "^44^"[("^"_J_"^") S DR(2,399.0304)=".01;1;I $D(IBIP),X<$P(IBIP,""^"",2)!($P(IBIP,""^"",6)&(X>$P(IBIP,""^"",6))) K X"
"RTN","IBCSCE",31,0)
 ; I "^64^"[("^"_J_"^") S DR(2,399.042)=".01:.03;"
"RTN","IBCSCE",32,0)
 ; I $T(@J) S DGDRD=$P($T(@J),";;",2) D S S K=(J*10) I $T(@K) S DGDRD=$P($T(@K),";;",2) D S
"RTN","IBCSCE",33,0)
 ; D ^IBCSCE1:("^31^")[("^"_J_"^") Q
"RTN","IBCSCE",34,0)
 ; W1 I @DGDRS["^2^DPT(^^D SET^IBCSCE;" D ^IBCSCE1 Q
"RTN","IBCSCE",35,0)
 ; S DGDRD="^2^DPT(^^D SET^IBCSCE;" D S,^IBCSCE1 Q
"RTN","IBCSCE",36,0)
 ; S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","IBCSCE",37,0)
 ; S DGCT=DGCT+1,DGDRS="DR(1,399,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","IBCSCE",38,0)
 ; Q
"RTN","IBCSCE",39,0)
16 ;;.18;
"RTN","IBCSCE",40,0)
31 ;;.07;S X=$P(^DGCR(399,DA,0),U,11);S Y="@"_$S(X']"":31,X="p":31,X="o":311,1:310);@310;D 1^IBCSCH1 S Y="@"_$S(IBADI=-1:31,'IBADI:312,1:313);@313;^2^DPT(^^D SET^IBCSCE;D UPDT^IBCSCE;@312;
"RTN","IBCSCE",41,0)
310 ;;101;102;103;S Y="@31";@311;D INST^IBCU;111;K DIC("DR"),DLAYGO;@31;
"RTN","IBCSCE",42,0)
32 ;;104;105;106;121;107;108;109
"RTN","IBCSCE",43,0)
41 ;;S:IBPTF Y="@411";159.5;@411;160;159;158;
"RTN","IBCSCE",44,0)
42 ;;162;
"RTN","IBCSCE",45,0)
43 ;;I IBPTF S Y="@943";64;65;66;67;68;S Y="@43";@943;D DX^IBCSC4B;@43;
"RTN","IBCSCE",46,0)
44 ;;S IBZ20=$P(^DGCR(399,DA,0),U,9);.09;D PRO^IBCSC4B;S IBASKCOD=1
"RTN","IBCSCE",47,0)
45 ;;41;
"RTN","IBCSCE",48,0)
46 ;;40;
"RTN","IBCSCE",49,0)
51 ;;.03;
"RTN","IBCSCE",50,0)
999 ;;64;65;66;67;68;
"RTN","IBCSCE",51,0)
52 ;;64;S:X="" Y="@99";65;S:X="" Y="@99";66;S:X="" Y="@99";67;S:X="" Y="@99";68;@99;
"RTN","IBCSCE",52,0)
53 ;;;;same as 74
"RTN","IBCSCE",53,0)
54 ;;S IBZ20=$P(^DGCR(399,DA,0),U,9);.09;S IBASKCOD=1
"RTN","IBCSCE",54,0)
55 ;;41;
"RTN","IBCSCE",55,0)
56 ;;40;
"RTN","IBCSCE",56,0)
61 ;;.06;164;
"RTN","IBCSCE",57,0)
62 ;;155;S:X=0 Y=156;157;156;S:'$D(IBOX) Y="@62";153;@62;
"RTN","IBCSCE",58,0)
63 ;;151;152;
"RTN","IBCSCE",59,0)
64 ;;161;165;
"RTN","IBCSCE",60,0)
65 ;;D RCD^IBCU1;42;202;S:'X Y=201;203;201;I $P(^DGCR(399,DA,"U1"),"^",11)']"" S Y="@65";210;@65;
"RTN","IBCSCE",61,0)
71 ;;.06;164;
"RTN","IBCSCE",62,0)
72 ;;155;S:X=0 Y=156;157;156;S:'$D(IBOX) Y="@72";153;@72;
"RTN","IBCSCE",63,0)
73 ;;151;152;
"RTN","IBCSCE",64,0)
74 ;;S:$D(IBOUT) Y="@999";43;@999;K IBOUT;
"RTN","IBCSCE",65,0)
75 ;;D RCD^IBCU1;42;202;S:'X Y=201;203;201;I $P(^DGCR(399,DA,"U1"),"^",11)']"" S Y="@75";210;@75;
"RTN","IBCSCE",66,0)
81 ;;208;
"RTN","IBCSCE",67,0)
82 ;;204;
"RTN","IBCSCE",68,0)
83 ;;205;
"RTN","IBCSCE",69,0)
84 ;;206;
"RTN","IBCSCE",70,0)
85 ;;207;
"RTN","IBCSCE",71,0)
86 ;;163;
"RTN","IBCSCE",72,0)
 ; AD S X=$S($D(^DPT(DA,.11)):^(.11),1:""),IBPHO=$S($D(^(.13)):$P(^(.13),U,1),1:""),Y=$S($D(^(IBADD)):^(IBADD),1:""),^(IBADD)=$P(Y,U,1)_U_$P(Y,U,2)_U_$P(X,U,1,6)_U_IBPHO_U_$P(Y,U,10) K IBADD,IBPHO Q
"RTN","IBCSCE",73,0)
 ; SET S I(0,0)=D0,Y(1)=$S($D(^DGCR(399,D0,0)):^(0),1:""),X=$P(Y(1),"^",2),D(0)=X,X=$S(D(0)>0:D(0),1:"") Q
"RTN","IBCSCE",74,0)
 ;called by screen 3 (input template)
"RTN","IBCSCE",75,0)
UPDT F IBDD=0:0 S IBDD=$O(^DPT(DFN,.312,IBDD)) Q:IBDD'>0  S IBI1=^DPT(DFN,.312,IBDD,0) I $D(^DIC(36,+IBI1,0)),$P(^(0),"^",2)'="N" S IBDD(+IBI1)=IBI1
"RTN","IBCSCE",76,0)
 F IBAIC=0:0 S IBAIC=$O(^DGCR(399,IBIFN,"AIC",IBAIC)) Q:IBAIC'>0  I $D(IBDD(IBAIC)) F IBI1="I1","I2","I3" I $D(^DGCR(399,IBIFN,IBI1)),+^(IBI1)=IBAIC,^(IBI1)'=IBDD(IBAIC) S ^DGCR(399,IBIFN,IBI1)=IBDD(IBAIC)
"RTN","IBCSCE",77,0)
 K IBAIC,IBDD,IBI1 Q
"RTN","IBCSCE",78,0)
 ;
"RTN","IBCSCE",79,0)
 ;Edit patient's address using DGREGAED API
"RTN","IBCSCE",80,0)
EDADDR(IBDFN) ;
"RTN","IBCSCE",81,0)
 I $G(IBFLIAE)'=1!(IBDFN=0) Q 0
"RTN","IBCSCE",82,0)
 N IBFL S IBFL(1)=1
"RTN","IBCSCE",83,0)
 N X,Y,DIE,DA,DR,DIDEL,DIW,DIEDA,DG,DICR
"RTN","IBCSCE",84,0)
 D EN^DGREGAED(IBDFN,.IBFL)
"RTN","IBCSCE",85,0)
 Q 1
"RTN","IBCSCE",86,0)
 ;IBCSCE
"RTN","IBCSCH")
0^16^B62017089^B61198859
"RTN","IBCSCH",1,0)
IBCSCH ;ALB/MJB - MCCR HELP ROUTINE ;03 JUN 88 15:25
"RTN","IBCSCH",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,106,124,138,51,148,137,161,245,232,287,348,349,374,371**;21-MAR-94;Build 57
"RTN","IBCSCH",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSCH",4,0)
 ;
"RTN","IBCSCH",5,0)
 ;MAP TO DGCRSCH
"RTN","IBCSCH",6,0)
 ;
"RTN","IBCSCH",7,0)
 N I,C,IBSCNNZ,IBQ,IBPRNT,Z S IBSCNNZ=$$UP^XLFSTR($G(IBSCNN)),IBQ=0
"RTN","IBCSCH",8,0)
 I '$D(IBPAR) D  Q:IBQ
"RTN","IBCSCH",9,0)
 . I $F(".?1500.?HCFA.","."_$G(IBSCNNZ)_"."),$$FT^IBCEF(IBIFN)=2 S IBQ=1,IBPRNT=2 D BL24(IBIFN,0) Q
"RTN","IBCSCH",10,0)
 . I $G(IBSCNNZ)="?SC" S IBQ=1 D DISPSC(IBIFN) Q
"RTN","IBCSCH",11,0)
 . I $G(IBSCNNZ)="?INS" S IBQ=1 D INSDSPL(IBIFN) Q
"RTN","IBCSCH",12,0)
 . I $G(IBSCNNZ)="?INX" S IBQ=1 D INSDSPLX(IBIFN) Q
"RTN","IBCSCH",13,0)
 . I $G(IBSCNNZ)="?PRV" S IBQ=1 D DISPROPT(IBIFN) Q
"RTN","IBCSCH",14,0)
 . I $G(IBSCNNZ)="?CHG" S IBQ=1 D DISPCHG^IBCRBH1(IBIFN) Q
"RTN","IBCSCH",15,0)
 . I $G(IBSCNNZ)="?PRC" S IBQ=1 D DISPPRC^IBCSCH1(IBIFN) Q
"RTN","IBCSCH",16,0)
 . I $G(IBSCNNZ)="?CPT" S IBQ=1 D BCPTCHG^IBCRBH2(IBIFN) Q
"RTN","IBCSCH",17,0)
 . I $G(IBSCNNZ)="?INC" S IBQ=1 D EDIT^IBCBB(IBIFN) Q
"RTN","IBCSCH",18,0)
 . I $G(IBSCNNZ)="?CLA",$$CK0^IBCIUT1() S IBQ=1 D CLA^IBCISC(IBIFN) Q
"RTN","IBCSCH",19,0)
 . I $G(IBSCNNZ)="?MRA",$$MCRONBIL^IBEFUNC(IBIFN),$T(SCR^IBCEMVU)'="" S IBQ=1 D SCR^IBCEMVU(IBIFN) Q
"RTN","IBCSCH",20,0)
 . I $G(IBSCNNZ)="?ID" S IBQ=1 D DISPID^IBCEF74(IBIFN) Q
"RTN","IBCSCH",21,0)
 . Q
"RTN","IBCSCH",22,0)
 ;
"RTN","IBCSCH",23,0)
 S IBH("HELP")="" D ^IBCSCU,H^IBCSCU K IBH("HELP") W !,"Enter '^' to stop the display ",$S(IBV:"",1:"and edit "),"of data,"
"RTN","IBCSCH",24,0)
 W:'$D(IBPAR) " '^N' to jump to screen #N (see",!,"listing below), <RET> to continue on to the next available screen" I IBV W "." G M
"RTN","IBCSCH",25,0)
 W " or enter",!,"the field group number(s) you wish to edit using commas and dashes as",!,"delimiters.  Those groups enclosed in brackets ""[]"" are editable while those"
"RTN","IBCSCH",26,0)
 W !,"enclosed in arrows ""<>"" are not."
"RTN","IBCSCH",27,0)
 G:$D(IBPAR) M1
"RTN","IBCSCH",28,0)
M W "  Special help screens:"
"RTN","IBCSCH",29,0)
 W !,?5,"Enter '?SC' to view SC Status and Rated Disabilities."
"RTN","IBCSCH",30,0)
 W !,?5,"Enter '?INS' to view the patients insurance policies."
"RTN","IBCSCH",31,0)
 W !,?5,"Enter '?INX' to view the patients insurance policies with comments."
"RTN","IBCSCH",32,0)
 W !,?5,"Enter '?PRV' to view provider specific information."
"RTN","IBCSCH",33,0)
 W !,?5,"Enter '?PRC' to view all procedures on the bill and related data."
"RTN","IBCSCH",34,0)
 W !,?5,"Enter '?CHG' to view all items on the bill with potential charges."
"RTN","IBCSCH",35,0)
 W !,?5,"Enter '?CPT' to view all charges for selected CPT codes and bill type."
"RTN","IBCSCH",36,0)
 I $$FT^IBCEF(IBIFN)=2 W !,?5,"Enter '?1500' to view how block 24 will print on a CMS-1500."
"RTN","IBCSCH",37,0)
 W !,?5,"Enter '?INC' to execute the edits & view the bill inconsistencies."
"RTN","IBCSCH",38,0)
 I $$CK0^IBCIUT1() W !?5,"Enter '?CLA' to view the ClaimsManager options."
"RTN","IBCSCH",39,0)
 I $$MCRONBIL^IBEFUNC(IBIFN) W !?5,"Enter '?MRA' to view Medicare Remittance Advice EOB's on file."
"RTN","IBCSCH",40,0)
 W !,?5,"Enter '?ID' to view all IDs to be electronically transmitted on this claim."
"RTN","IBCSCH",41,0)
 ;
"RTN","IBCSCH",42,0)
 I +IBSR'=9 S Z="DATA GROUPS ON SCREEN "_+IBSR W ! X IBWW D @(IBSR1_IBSR) D W
"RTN","IBCSCH",43,0)
 D S W ! F I=$Y:1:20 W !
"RTN","IBCSCH",44,0)
 S Z="PRESS <RETURN> KEY" X IBWW W " to RETURN to SCREEN ",+IBSR R X:DTIME Q
"RTN","IBCSCH",45,0)
M1 N I,Z S Z="DATA GROUPS ON PARAMETER SCREEN" W !! X IBWW D @(IBSR1_IBSR) D W W ! F I=$Y:1:20 W !
"RTN","IBCSCH",46,0)
 S Z="PRESS <RETURN> KEY" X IBWW W " to RETURN to PARAMETER SCREEN" R X:DTIME Q
"RTN","IBCSCH",47,0)
1 S X="DOB^Alias Name^Sex, Marital Status^Veteran Status, Eligibility^Address, Temporary Address^SC at Time of Care" Q
"RTN","IBCSCH",48,0)
2 S X="Patient Employer Name, Address^Spouse Employer Name, Address" Q
"RTN","IBCSCH",49,0)
3 S X="Payer Information^Provider Numbers^Mailing Address" Q
"RTN","IBCSCH",50,0)
4 S X="Admission Information^Discharge Information^Diagnosis Code(s)^Coding Method, Inpt Proc Code(s)^Occurrence Code(s)^Condition Code(s)^Value Code(s)" Q
"RTN","IBCSCH",51,0)
5 S X="Event Date^Outpatient Diagnosis^Outpatient Visits^Coding Method, Opt. Pro. Code(s)^Occurrence Code(s)^Condition Code(s)" Q
"RTN","IBCSCH",52,0)
6 S X="Bill Type, Covered/Non-Covered Days^R.O.I., Assignment of Benefits^Statement Covers Period^Bedsection, Length of Stay^Revenue Code(s), Offset, Total^Rate Schedule(s)^Prior Payments/Claims" Q
"RTN","IBCSCH",53,0)
7 S X="Bill Type, Covered/Non-Covered Days^R.O.I., Assignment of Benefits^Statement Covers Period^Outpatient Visits^Revenue Code(s), Offset, Total^Rate Schedule(s)^Prior Payments/Claims" Q
"RTN","IBCSCH",54,0)
8 S X="Bill Remark^Form Locator 2^Form Locator 9^Form Locator 27^Form Locator 45^Form Locator 92^Form Locator 93^Tx Auth. Code" Q
"RTN","IBCSCH",55,0)
9 S X="Locally defined fields" Q
"RTN","IBCSCH",56,0)
28 S X="Bill Remark, ICN/DCN's, Tx Auth. Code, Admit Diagnosis/Source ^Providers^Force to Print^Provider ID Maintenance^Other Facility (VA/non)" Q
"RTN","IBCSCH",57,0)
H8 S X="Period Unable to Work^Admit Dx, ICN/DCN, Tx/Prior Auth. Code^Providers^Non-VA Facility^Chiropractic Data^Form Locator 19^Force to Print^Provider ID Maintenance" Q
"RTN","IBCSCH",58,0)
PAR S X="Fed Tax #, BC/BS #, MAS Svc Pointer^Bill Signer, Billing Supervisor^Security Parameters, Outpatient CPT parameters ^Remarks, Mailgroups^Agent Cashier Address/Phone" Q
"RTN","IBCSCH",59,0)
S N C,I,Z,J W !! S Z="AVAILABLE SCREENS" X IBWW
"RTN","IBCSCH",60,0)
 S X="Demographic^Employment^Payer^Inpatient Event^Outpatient Event^Inpatient Billing - General^Outpatient Billing - General^Billing - Specific^Locally Defined"
"RTN","IBCSCH",61,0)
 S C=0 F I=1:1 S J=$P(X,"^",I) Q:J=""  I '$E(IBVV,I) S C=C+1,Z="^"_I,IBW=(C#2) W:'(C#2) ?41 X IBWW S Z=$S(I?1N:" ",1:" ")_J_" Data" W Z
"RTN","IBCSCH",62,0)
 Q
"RTN","IBCSCH",63,0)
W N I,J,Z
"RTN","IBCSCH",64,0)
 F I=1:1 S J=$P(X,"^",I) Q:J=""  S Z=I,IBW=(I#2) W:'(I#2) ?42 X IBWW W " "_J
"RTN","IBCSCH",65,0)
 W:'(I-1)#2 ! Q
"RTN","IBCSCH",66,0)
 Q
"RTN","IBCSCH",67,0)
 ;IBCSCH
"RTN","IBCSCH",68,0)
 ;
"RTN","IBCSCH",69,0)
 ;
"RTN","IBCSCH",70,0)
BL24(IBIFN,IBNOSHOW) ; display block 24 of CMS-1500
"RTN","IBCSCH",71,0)
 ; IBNOSHOW = 1 for not to show error/warning text line
"RTN","IBCSCH",72,0)
 N X,Y,DIR,IBPG,IBLN,IBCOL,IBX,IBQ,IBLC,IBLIN,IBPFORM,IBD,IBC1,Z,Z0,IBXDATA,IBXSAVE,IBNXPG
"RTN","IBCSCH",73,0)
 K ^TMP("IBXSAVE",$J)
"RTN","IBCSCH",74,0)
 S IBQ=0,IBLC=9 Q:'$G(IBIFN)  K ^TMP("IBXDISP",$J)
"RTN","IBCSCH",75,0)
 ;
"RTN","IBCSCH",76,0)
 S IBLIN=$$BOX24D^IBCEF11()
"RTN","IBCSCH",77,0)
 S IBPFORM=$S($P($G(^IBE(353,2,2)),U,8):$P(^(2),U,8),1:2)
"RTN","IBCSCH",78,0)
 S IBX=$$BILLN^IBCEFG0(0,"1^99",IBLIN,+IBIFN,IBPFORM)
"RTN","IBCSCH",79,0)
 ;
"RTN","IBCSCH",80,0)
 W @IOF,!,"Example of diagnoses, procedures and charges printing on the CMS-1500"
"RTN","IBCSCH",81,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",82,0)
 ;
"RTN","IBCSCH",83,0)
 ; box 19 - lines 36-37
"RTN","IBCSCH",84,0)
 F Z=+IBLIN,IBLIN+1 I $D(^TMP("IBXDISP",$J,1,Z)) S Z0=$G(^TMP("IBXDISP",$J,1,Z,+$O(^TMP("IBXDISP",$J,1,Z,20),-1))) I Z0'="" S:Z=+IBLIN Z0="BOX 19 DATA: "_Z0 W !,Z0
"RTN","IBCSCH",85,0)
 ;
"RTN","IBCSCH",86,0)
 ; box 21 - lines 39-41
"RTN","IBCSCH",87,0)
 W !,"21. diagnosis"
"RTN","IBCSCH",88,0)
 I $D(^TMP("IBXDISP",$J,2,IBLIN+3)) W ?16,"(1st 4 only)"
"RTN","IBCSCH",89,0)
 W !,?5,"1. ",$G(^TMP("IBXDISP",$J,1,IBLIN+3,3)),?25,"3. ",$G(^TMP("IBXDISP",$J,1,IBLIN+3,30))
"RTN","IBCSCH",90,0)
 W !,?5,"2. ",$G(^TMP("IBXDISP",$J,1,IBLIN+5,3)),?25,"4. ",$G(^TMP("IBXDISP",$J,1,IBLIN+5,30))
"RTN","IBCSCH",91,0)
 ;
"RTN","IBCSCH",92,0)
 ; box 24 - lines 44-55
"RTN","IBCSCH",93,0)
 D PG
"RTN","IBCSCH",94,0)
 S IBPG=0 F  S IBPG=$O(^TMP("IBXDISP",$J,IBPG)) Q:'IBPG  D  Q:IBQ
"RTN","IBCSCH",95,0)
 . I '$D(^TMP("IBXDISP",$J,IBPG,IBLIN+9)) Q   ; no line's on this page
"RTN","IBCSCH",96,0)
 . F IBLN=IBLIN+8:1:+$P(IBLIN,U,2) S IBCOL=$O(^TMP("IBXDISP",$J,IBPG,IBLN,0)) Q:'IBCOL&'$O(^TMP("IBXDISP",$J,IBPG,IBLN))  S IBLC=IBLC+1 I IBCOL D  Q:IBQ
"RTN","IBCSCH",97,0)
 .. S IBCOL=0,IBC1=1 F  S IBCOL=$O(^TMP("IBXDISP",$J,IBPG,IBLN,IBCOL)) Q:'IBCOL  I $TR($G(^(IBCOL))," ")'="" D
"RTN","IBCSCH",98,0)
 ... W:IBC1 ! S IBC1=0 W ?(IBCOL-1),$G(^TMP("IBXDISP",$J,IBPG,IBLN,IBCOL))
"RTN","IBCSCH",99,0)
 . S IBNXPG=$O(^TMP("IBXDISP",$J,IBPG))   ; next page
"RTN","IBCSCH",100,0)
 . I 'IBQ,IBNXPG,$D(^TMP("IBXDISP",$J,IBNXPG,IBLIN+9)) S IBLIN=$$BOX24D^IBCEF11(),IBQ=$$PAUSE^IBCSCH1(IBLC) Q:IBQ  S IBLC=9 W @IOF D PG
"RTN","IBCSCH",101,0)
 . Q
"RTN","IBCSCH",102,0)
 ;
"RTN","IBCSCH",103,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",104,0)
 I 'IBPG,'IBQ S IBQ=$$PAUSE^IBCSCH1(IBLC)
"RTN","IBCSCH",105,0)
 K ^TMP("IBXDISP",$J),^TMP("IBXSAVE",$J)
"RTN","IBCSCH",106,0)
 Q
"RTN","IBCSCH",107,0)
 ;
"RTN","IBCSCH",108,0)
PG ; Display box 24 letters at top of charge list
"RTN","IBCSCH",109,0)
 W !,"24. A             B  C    D                 E         F     G H I    J"
"RTN","IBCSCH",110,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",111,0)
 Q
"RTN","IBCSCH",112,0)
 ;
"RTN","IBCSCH",113,0)
INSDSPL(IBIFN) ; Display patient's policies
"RTN","IBCSCH",114,0)
 N DIR,X,Y,IBX,DFN,IBDTIN,IBCOVEXT W @IOF
"RTN","IBCSCH",115,0)
 S IBX=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(IBX,U,2),IBDTIN=$P(IBX,U,3),IBCOVEXT=1
"RTN","IBCSCH",116,0)
 I +DFN D DISPDT^IBCNS W ! S DIR("A")="Press RETURN to continue",DIR(0)="E" D ^DIR K DIR
"RTN","IBCSCH",117,0)
 Q
"RTN","IBCSCH",118,0)
 ;
"RTN","IBCSCH",119,0)
INSDSPLX(IBIFN) ; Display patient's policies extended (?INX)
"RTN","IBCSCH",120,0)
 N IBX,DFN,IBDATE S IBX=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(IBX,U,2),IBDATE=$P(IBX,U,3) D DISP^IBCNS3(DFN,IBDATE,123)
"RTN","IBCSCH",121,0)
 Q
"RTN","IBCSCH",122,0)
 ;
"RTN","IBCSCH",123,0)
DISPSC(IBIFN) ; display patients SC Status and Rated Disabilities
"RTN","IBCSCH",124,0)
 N IB0,DFN,IBSC,IBX,VAEL,VAERR
"RTN","IBCSCH",125,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(IB0,U,2),IBSC=$P(IB0,U,18)
"RTN","IBCSCH",126,0)
 W !,@IOF,!,"SC Status and Rated Disabilities for ",$P($G(^DPT(+$G(DFN),0)),U,1)
"RTN","IBCSCH",127,0)
 W !,"--------------------------------------------------------------------------------",!
"RTN","IBCSCH",128,0)
 I +$G(IBIFN) W !," SC At Time Of Care: ",$S(IBSC=1:"Yes",IBSC=0:"No",1:"")
"RTN","IBCSCH",129,0)
 I +$G(DFN) D ELIG^VADPT D DIS^DGRPDB
"RTN","IBCSCH",130,0)
 W !!,"--------------------------------------------------------------------------------"
"RTN","IBCSCH",131,0)
 S IBX=$$PAUSE^IBCSCH1(19)
"RTN","IBCSCH",132,0)
 Q
"RTN","IBCSCH",133,0)
 ;
"RTN","IBCSCH",134,0)
DISPROPT(IBIFN) ; prompt for VA or Non-VA provider.
"RTN","IBCSCH",135,0)
 N X,Y,DIR
"RTN","IBCSCH",136,0)
 S DIR(0)="SAO^V:VA PROVIDER;N:NON-VA PROVIDER",DIR("A")="(V)A or (N)on-VA Provider: ",DIR("B")="V"
"RTN","IBCSCH",137,0)
 D ^DIR
"RTN","IBCSCH",138,0)
 I Y="V" D DISPPRV^IBCSCH2(IBIFN) Q
"RTN","IBCSCH",139,0)
 I Y="N" D DISPNVA^IBCSCH2(IBIFN)
"RTN","IBCSCH",140,0)
 Q
"RTN","IBCSCH",141,0)
 ;
"RTN","IBCU4")
0^24^B20355514^B17693963
"RTN","IBCU4",1,0)
IBCU4 ;ALB/AAS - BILLING UTILITY ROUTINE (CONTINUED) ;12-FEB-90
"RTN","IBCU4",2,0)
 ;;2.0;INTEGRATED BILLING;**109,122,137,245,349,371**;21-MAR-94;Build 57
"RTN","IBCU4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCU4",4,0)
 ;
"RTN","IBCU4",5,0)
 ;MAP TO DGCRU4
"RTN","IBCU4",6,0)
 ;
"RTN","IBCU4",7,0)
DDAT ;Input transform for Statement Covers From field
"RTN","IBCU4",8,0)
 I '$D(DA) G TO
"RTN","IBCU4",9,0)
 S IB00=+$P(^DGCR(399,+DA,0),"^",3) I +X<$P(IB00,".",1) W !?4,"Cannot precede the 'EVENT DATE'!",*7 K X G DDAT4
"RTN","IBCU4",10,0)
 I +X>(DT_".2359") W !?4,"Cannot bill for future treatment!",*7 K X G DDAT4
"RTN","IBCU4",11,0)
 D PROCDT
"RTN","IBCU4",12,0)
 I DGPRDTB,X>DGPRDTB K X W !?4,"Can't be greater than date of specified Procedures!",*7 G DDAT4
"RTN","IBCU4",13,0)
 G DDAT4
"RTN","IBCU4",14,0)
DDAT1 ;Input transform for Statement covers to
"RTN","IBCU4",15,0)
 I '$D(DA) G FROM
"RTN","IBCU4",16,0)
 S IB00=$S($D(^DGCR(399,+DA,"U")):$P(^("U"),"^",1),1:"") I 'IB00 W !?4,"'Start Date' must be specified first!",*7 K X G DDAT4
"RTN","IBCU4",17,0)
 I +X>DT W !?4,"Cannot bill for future treatment!",*7 K X G DDAT4
"RTN","IBCU4",18,0)
 I +X<IB00 W !?4,"Cannot preceed the 'Start Date'!",*7 K X G DDAT4
"RTN","IBCU4",19,0)
 ;I $S($E(IB00,4,5)<10:$E(IB00,2,3),1:$E(IB00,2,3)+1)'=$S($E(X,4,5)<10:$E(X,2,3),1:$E(X,2,3)+1) K X W !?4,"Must be in same fiscal year!",*7 G DDAT4
"RTN","IBCU4",20,0)
 ;I $$FY(+IB00)'=$$FY(X) K X W !?4,"Must be in same fiscal year!",*7 G DDAT4
"RTN","IBCU4",21,0)
 ;I $E(IB00,1,3)'=$E(X,1,3) K X W !?4,"Must be in same calendar year!",*7 G DDAT4
"RTN","IBCU4",22,0)
 D PROCDT
"RTN","IBCU4",23,0)
 I DGPRDTE,X<DGPRDTE K X W !?4,"Can't be less than date of specified Procedures!",*7 G DDAT4
"RTN","IBCU4",24,0)
 G DDAT4
"RTN","IBCU4",25,0)
 ;
"RTN","IBCU4",26,0)
 ;DDAT2   ;Input transform for OP VISITS DATE(S) field  REPLACED WITH IBCU41 6/15/93
"RTN","IBCU4",27,0)
 ;S IB00=$G(^DGCR(399,IBIFN,"U")) I $P(IB00,"^",1)']"" W !?4,*7,"No 'Start Date' on file...can't enter OP visit dates..." K X G DDAT4
"RTN","IBCU4",28,0)
 ;I $P(IB00,"^",2)']"" W !?4,*7,"No 'End Date' on file...can't enter OP visit dates..." K X G DDAT4
"RTN","IBCU4",29,0)
 ;I X<$P(IB00,"^",1) W !?4,*7,"Can't enter a visit date prior to 'Start Date'..." K X G DDAT4
"RTN","IBCU4",30,0)
 ;I X>$P(IB00,"^",2) W !?4,*7,"Can't enter a visit date later than 'End Date'..." K X G DDAT4
"RTN","IBCU4",31,0)
 ;I $P(^DGCR(399,IBIFN,0),"^",19)'=2,$D(^DGCR(399,"ASC2",IBIFN)),$O(^DGCR(399,IBIFN,"OP",0)) W !?4,*7,"Only 1 visit date allowed on bills with Amb. Surg. Codes!" K X G DDAT4
"RTN","IBCU4",32,0)
 ;D APPT^IBCU3,DUPCHK^IBCU3
"RTN","IBCU4",33,0)
 G DDAT4
"RTN","IBCU4",34,0)
 ;
"RTN","IBCU4",35,0)
DDAT3 ; - x-ref call for to and from dates, REPLACED BY TRIGGERS ON .08, 151, 152 ON 10/18/93
"RTN","IBCU4",36,0)
 ;if inpatient bill return DGNEWLOS to cause recalc of los in IBSC6
"RTN","IBCU4",37,0)
 G DDAT4:'$D(X)
"RTN","IBCU4",38,0)
 I $D(^DGCR(399,DA,0)),$P(^(0),"^",5)<3 S DGNEWLOS=1
"RTN","IBCU4",39,0)
 S IB00=$S($D(^DGCR(399,+DA,"U")):^("U"),1:"") I IB00']"" K X G DDAT4
"RTN","IBCU4",40,0)
 S IB02=$S(+$E(IB00,4,5)<10:$E(IB00,2,3),1:$E(IB00,2,3)+1),IB01=$E(IB00,1)_IB02_"0930",$P(^DGCR(399,DA,"U1"),"^",9)=IB02 ;,$P(^DGCR(399,DA,"U1"),"^",11)=$S($P(IB00,"^",2)>IB01:IB02+1,1:"")
"RTN","IBCU4",41,0)
 ;I $P(^DGCR(399,DA,"U1"),"^",11)="" S $P(^("U1"),"^",12)=""
"RTN","IBCU4",42,0)
 ;
"RTN","IBCU4",43,0)
DDAT4 K IB00,IB01,IB02,IB03,DGX,DGNOAP,DGJ,DGPROC,DGPRDT,DGPRDTE,DGPRDTB Q
"RTN","IBCU4",44,0)
 ;
"RTN","IBCU4",45,0)
OTDAT ; Input transform for Other Care Start Date (399,48,.02)
"RTN","IBCU4",46,0)
 I ('$G(DA(1)))!('$G(X)) Q
"RTN","IBCU4",47,0)
 N IBX S IBX=$G(^DGCR(399,DA(1),"U"))
"RTN","IBCU4",48,0)
 I +X<+IBX W !,?4,"Can Not Precede Bill Start Date!",!,*7 K X Q
"RTN","IBCU4",49,0)
 I +X>+$P(IBX,U,2) W !,?4,"Can not be after Bill End Date!",!,*7 K X Q
"RTN","IBCU4",50,0)
 Q
"RTN","IBCU4",51,0)
 ;
"RTN","IBCU4",52,0)
CHDAT ; Input transform for chiropractics-related dates (399/245,246,247)
"RTN","IBCU4",53,0)
 ; Make sure that date entered is not after end date of the bill
"RTN","IBCU4",54,0)
 Q:'$D(X)
"RTN","IBCU4",55,0)
 N IBX,Y
"RTN","IBCU4",56,0)
 S IBX=$P($G(^DGCR(399,+DA,"U")),U,2)
"RTN","IBCU4",57,0)
 I IBX="" W !?4,*7,"No end date of the bill on file - can't enter chiropractics-related dates " K X Q
"RTN","IBCU4",58,0)
 I X>+IBX S Y=IBX D DD^%DT W !,?4,*7,"This date can not be after the end date of the claim ("_Y_") " K X Q
"RTN","IBCU4",59,0)
 Q
"RTN","IBCU4",60,0)
 ;
"RTN","IBCU4",61,0)
TO ;151 pseudo input x-form
"RTN","IBCU4",62,0)
 I +X_.9<IBIDS(.03) W !?4,"Cannot precede the 'EVENT DATE'!",*7 K X Q
"RTN","IBCU4",63,0)
 I +X>(DT_".2359") W !?4,"Cannot bill for future treatment!",*7 K X
"RTN","IBCU4",64,0)
 Q
"RTN","IBCU4",65,0)
FROM ;152 pseudo input x-form
"RTN","IBCU4",66,0)
 I '$D(IBIDS(151)) W !?4,"'Start Date' must be specified first!",*7 K X Q
"RTN","IBCU4",67,0)
 I +X<IBIDS(151) W !?4,"Cannot preceed the 'Start Date'!",*7 K X Q
"RTN","IBCU4",68,0)
 ;I $S($E(IBIDS(151),4,5)<10:$E(IBIDS(151),2,3),1:$E(IBIDS(151),2,3)+1)'=$S($E(X,4,5)<10:$E(X,2,3),1:$E(X,2,3)+1) K X W !?4,"Must be in same fiscal year!",*7 Q
"RTN","IBCU4",69,0)
 ;I $$FY(IBIDS(151))'=$$FY(X) K X W !?4,"Must be in same fiscal year!",*7 Q
"RTN","IBCU4",70,0)
 ;I $E(IBIDS(151),1,3)'=$E(X,1,3) K X W !?4,"Must be in same calendar year!",*7 Q
"RTN","IBCU4",71,0)
 Q
"RTN","IBCU4",72,0)
 ;
"RTN","IBCU4",73,0)
FY(DATE) ; return a dates Fiscal Year
"RTN","IBCU4",74,0)
 N IBYR,IBFY S IBFY=""
"RTN","IBCU4",75,0)
 I $G(DATE)?7N.E S IBYR=$S($E(DATE,4,5)<10:$E(DATE,1,3),1:$E(DATE,1,3)+1),IBFY=$E(IBYR,2,3)
"RTN","IBCU4",76,0)
 Q IBFY
"RTN","IBCU4",77,0)
 ;
"RTN","IBCU4",78,0)
SPEC ;  - calculate discharge specialty
"RTN","IBCU4",79,0)
 ;  - input  IBids(.08) = ptf record number
"RTN","IBCU4",80,0)
 ;  - output IBids(161) = pointer to billing specialty in 399.1
"RTN","IBCU4",81,0)
 K IBIDS(161)
"RTN","IBCU4",82,0)
 Q:$S('$D(IBIDS(.08)):1,'$D(^DGPT(+IBIDS(.08),70)):1,'$P(^(70),"^",2):1,'$D(^DIC(42.4,+$P(^(70),"^",2),0)):1,1:0)  S IBIDS(161)=$P(^DGPT(IBIDS(.08),70),"^",2)
"RTN","IBCU4",83,0)
 S IBIDS(161)=$P($G(^DIC(42.4,+IBIDS(161),0)),"^",5) I IBIDS(161)="" K IBIDS(161) Q
"RTN","IBCU4",84,0)
 S IBIDS(161)=$O(^DGCR(399.1,"B",IBIDS(161),0))
"RTN","IBCU4",85,0)
 I '$D(^DGCR(399.1,+IBIDS(161),0)) K IBIDS(161)
"RTN","IBCU4",86,0)
 Q
"RTN","IBCU4",87,0)
 ;
"RTN","IBCU4",88,0)
PROCDT ;  - find first and last dates of procedures
"RTN","IBCU4",89,0)
 ;    can't set from and to date inside of this range
"RTN","IBCU4",90,0)
 S (DGPRDT,DGPROC,DGPRDTE,DGPRDTB)=0
"RTN","IBCU4",91,0)
 F  S DGPROC=$O(^DGCR(399,+DA,"CP",DGPROC)) Q:'DGPROC  S DGPRDT=$P($G(^DGCR(399,+DA,"CP",DGPROC,0)),"^",2) D
"RTN","IBCU4",92,0)
 . I DGPRDTB=0!(DGPRDTB>DGPRDT) S DGPRDTB=DGPRDT
"RTN","IBCU4",93,0)
 . I DGPRDTE=0!(DGPRDTE<DGPRDT) S DGPRDTE=DGPRDT
"RTN","IBCU4",94,0)
 . Q
"RTN","IBCU4",95,0)
 Q
"RTN","IBCU4",96,0)
 ;
"RTN","IBCU4",97,0)
TOBIN(Y,DA) ; Screen for UB-04 bill classification based on UB-04 location of care
"RTN","IBCU4",98,0)
 ; Y = internal value of code for field .25 (UB-04 BILL CLASSIFICATION)
"RTN","IBCU4",99,0)
 ; DA = bill ien in file 399
"RTN","IBCU4",100,0)
 N IB0
"RTN","IBCU4",101,0)
 S IB0=$P($G(^DGCR(399,DA,0)),U,24) ; Get UB-04 LOCATION OF CARE value
"RTN","IBCU4",102,0)
 Q $S('IB0:0,(","_$P($G(^DGCR(399.1,+Y,0)),U,24)_",")'[(","_IB0_","):0,1:1)
"RTN","IBCU4",103,0)
 ;
"RTN","IBCU4",104,0)
TRIG05(X,D0) ; Trigger executed on field .05 of file 399 to set field .25
"RTN","IBCU4",105,0)
 ; Find the correct entry in file 399.1 that corresponds to the value in .05
"RTN","IBCU4",106,0)
 ; X = value of field .05, location of care
"RTN","IBCU4",107,0)
 ; D0 = IEN of bill entry in file 399
"RTN","IBCU4",108,0)
 N Z,Z0,IEN,LOC
"RTN","IBCU4",109,0)
 S LOC=$P($G(^DGCR(399,D0,0)),U,4)
"RTN","IBCU4",110,0)
 S IEN="",Z=0
"RTN","IBCU4",111,0)
 I LOC'="" F  S Z=$O(^DGCR(399.1,"C",X,Z)) Q:'Z  S Z0=$P($G(^DGCR(399.1,Z,0)),U,23,24) I +Z0,(","_$P(Z0,U,2)_",")[(","_LOC_",") S IEN=Z Q
"RTN","IBCU4",112,0)
 Q IEN
"RTN","IBCU4",113,0)
 ;
"RTN","IBCU4",114,0)
TOB(IBIFN,POS) ;Function returns the 3 digit type of bill from UB-04
"RTN","IBCU4",115,0)
 ;  fields or the position (1-3) as determined by POS (optional)
"RTN","IBCU4",116,0)
 N Z
"RTN","IBCU4",117,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,24,26),Z=$P(Z,U)_$P($G(^DGCR(399.1,+$P(Z,U,2),0)),U,2)_$P(Z,U,3)
"RTN","IBCU4",118,0)
 Q $S('$G(POS):Z,1:$E(Z,+POS))
"RTN","IBCU4",119,0)
 ;
"RTN","IBCU7")
0^15^B54198894^B54846939
"RTN","IBCU7",1,0)
IBCU7 ;ALB/AAS - INTERCEPT SCREEN INPUT OF PROCEDURE CODES ;29-OCT-91
"RTN","IBCU7",2,0)
 ;;2.0;INTEGRATED BILLING;**62,52,106,125,51,137,210,245,228,260,348,371**;21-MAR-94;Build 57
"RTN","IBCU7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCU7",4,0)
 ;
"RTN","IBCU7",5,0)
 ;MAP TO DGCRU7
"RTN","IBCU7",6,0)
 ;
"RTN","IBCU7",7,0)
CHKX ;  -interception of input x from Additional Procedure input
"RTN","IBCU7",8,0)
 G:X=" " CHKXQ
"RTN","IBCU7",9,0)
 I $$INPAT^IBCEF(DA(1)),'$P($G(^IBE(350.9,1,1)),"^",15),X'?1A1N D  G CHKXQ
"RTN","IBCU7",10,0)
 . K X
"RTN","IBCU7",11,0)
 . D EN^DDIOL("Site param does not allow entry of non-PTF procedures") ;Fileman error here will be: The previous error occurred when performing an action specified in a Pre-lookup transform (7.5 node).
"RTN","IBCU7",12,0)
 G:'$D(^UTILITY($J,"IB")) CHKXQ
"RTN","IBCU7",13,0)
 S M=($A($E(X,1))-64),S=+$E(X,2) Q:'$G(^UTILITY($J,"IB",M,S))  S X="`"_+^(S)
"RTN","IBCU7",14,0)
 I $D(DGPROCDT),DGPROCDT'=$P($G(^UTILITY($J,"IB",M,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) W !!,"Procedure Date: " S Y=DGPROCDT X ^DD("DD") W Y,!
"RTN","IBCU7",15,0)
CHKXQ Q
"RTN","IBCU7",16,0)
 ;
"RTN","IBCU7",17,0)
CODMUL ;Date oriented entry of procedure 
"RTN","IBCU7",18,0)
DELASK I $D(IBZ20),IBZ20,IBZ20'=$P(^DGCR(399,IBIFN,0),U,9) S %=2 W !,"SINCE THE PROCEDURE CODING METHOD HAS BEEN CHANGED, DO YOU WANT TO DELETE ALL",!,"PROCEDURE CODES IN THIS BILL"
"RTN","IBCU7",19,0)
 I  D YN^DICN Q:%=-1  D:%=1 DELADD I %Y?1."?" W !!,"If you answer 'Yes', all procedure codes will be DELETED from this bill.",! G DELASK
"RTN","IBCU7",20,0)
 K %,%Y,DA,IBZ20,DIK ;W !,"Procedure Entry:"
"RTN","IBCU7",21,0)
 ;
"RTN","IBCU7",22,0)
CODDT I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",23,0)
 I $P($G(^DGCR(399,IBIFN,0)),"^",5)<3 S IBZTYPE=1 I $P($G(^UTILITY($J,"IB",1,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) D ASKCOD
"RTN","IBCU7",24,0)
 S X=$$PRCDIV^IBCU71(IBIFN) I +X W !!,$P(X,U,2),!
"RTN","IBCU7",25,0)
 N Z,Z0 S Z=$G(^DGCR(399,IBIFN,"U")),Z0=$$FMTE^XLFDT($P(Z,U),"2D")_"-"_$$FMTE^XLFDT($P(Z,U,2),"2D")
"RTN","IBCU7",26,0)
 W !,"Select PROCEDURE DATE"_$S($TR(Z0,"-")'="":" ("_Z0_")",1:"")_": " R X:DTIME G:'$T!("^"[X) CODQ D:X["?" CODHLP
"RTN","IBCU7",27,0)
 S IBEX=0 D  ; Get procedure date
"RTN","IBCU7",28,0)
 . I X=" ",$D(DGPROCDT),DGPROCDT?7N S Y=DGPROCDT D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",29,0)
 . I X=" ",+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4) S (DGPROCDT,Y)=$O(^DGCR(399,IBIFN,"OP",0)) D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",30,0)
 . S %DT="EXP",%DT(0)=-DT D ^%DT K %DT I Y<1 S IBEX=1 Q
"RTN","IBCU7",31,0)
 . I '$$OPV2^IBCU41(Y,IBIFN,1) S IBEX=1 Q
"RTN","IBCU7",32,0)
 . S:'$G(IBZTYPE) X=$$OPV^IBCU41(Y,IBIFN) S DGPROCDT=Y
"RTN","IBCU7",33,0)
 I 'IBEX D ASKCOD,ADDCPT^IBCU71:$D(DGCPT)
"RTN","IBCU7",34,0)
 K IBEX
"RTN","IBCU7",35,0)
 G CODDT
"RTN","IBCU7",36,0)
 ;
"RTN","IBCU7",37,0)
ASKCOD N Z,Z0,DA,IBACT,IBQUIT
"RTN","IBCU7",38,0)
 K DGCPT
"RTN","IBCU7",39,0)
 S DGCPT=0,DGCPTUP=$P($G(^IBE(350.9,1,1)),"^",19),DGADDVST=0,IBFT=$P($G(^DGCR(399,IBIFN,0)),"^",19)
"RTN","IBCU7",40,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S ^DGCR(399,IBIFN,"CP",0)=U_$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCU7",41,0)
 ;
"RTN","IBCU7",42,0)
 F  S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCU7",43,0)
 . S DIC("A")="   Select PROCEDURE: "
"RTN","IBCU7",44,0)
 . S DIC="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",45,0)
 . S DIC(0)="AEQMNL"
"RTN","IBCU7",46,0)
 . S DIC("S")="I '$D(DIV(""S""))&($P(^(0),U,2)=DGPROCDT)"
"RTN","IBCU7",47,0)
 . S DIC("DR")="1///^S X=DGPROCDT"
"RTN","IBCU7",48,0)
 . S DA(1)=IBIFN,DLAYGO=399
"RTN","IBCU7",49,0)
 . W ! D ^DIC I Y<1 S IBQUIT=1 Q
"RTN","IBCU7",50,0)
 . ; If we just added inactive code - it must be deleted.
"RTN","IBCU7",51,0)
 . S IBACT=0 ; Active flag
"RTN","IBCU7",52,0)
 . I Y["ICD0" S IBACT=$$ICD0ACT^IBACSV(+$P(Y,U,2),DGPROCDT)
"RTN","IBCU7",53,0)
 . I Y["ICPT" S IBACT=$$CPTACT^IBACSV(+$P(Y,U,2),DGPROCDT)
"RTN","IBCU7",54,0)
 . S DGCPTNEW=$P(Y,"^",3) ;Was the procedure just added?
"RTN","IBCU7",55,0)
 . I DGCPTNEW,'IBACT D DELPROC Q
"RTN","IBCU7",56,0)
 . I 'IBACT W !,*7,"Warning:  Procedure code is inactive on this date",!
"RTN","IBCU7",57,0)
 . I DGCPTNEW,$D(^UTILITY($J,"IB")),$$INPAT^IBCEF(IBIFN),Y["ICPT(" D DATA^IBCU74(Y)
"RTN","IBCU7",58,0)
 . S DGADDVST=$S(DGCPTNEW:1,$D(DGADDVST):DGADDVST,1:0)
"RTN","IBCU7",59,0)
 . N IBPRV,IBPRVO,IBPRVN
"RTN","IBCU7",60,0)
 . S IBPRVO=$$MAINPRV^IBCEU(IBIFN),IBPRV=$P(IBPRVO,U,3),IBPRVN=(IBPRVO["IBA(355.93,"),IBPRV=$S(IBPRV="":"",'IBPRVN:$P(IBPRVO,U),1:"")
"RTN","IBCU7",61,0)
 . I IBPRV="",'IBPRVN D
"RTN","IBCU7",62,0)
 .. S IBPRV=0 F  S IBPRV=$O(^DGCR(399,IBIFN,"CP",IBPRV)) S:'IBPRV IBPRV="" Q:'IBPRV  S Z=$P($G(^(IBPRV,0)),U,18) I Z S IBPRV=$P($G(^VA(200,Z,0)),U) Q
"RTN","IBCU7",63,0)
 . S DR="" I Y["ICPT" S DR="16"_$S(IBPRVN:";18///@",1:";18//"_IBPRV)_";6;5//"_$$DEFDIV(IBIFN)_";"
"RTN","IBCU7",64,0)
 . S DR=".01;"_DR_$S(IBFT=2:"8;9;17//NO;",1:"")_3,DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($E($G(Y))=U)
"RTN","IBCU7",65,0)
 . ;
"RTN","IBCU7",66,0)
 . S DR=$$SPCUNIT(IBIFN,IBPROCP) I DR'="" D ^DIE ; miles/minutes/hours
"RTN","IBCU7",67,0)
 . ;
"RTN","IBCU7",68,0)
 . I IBFT=2 D
"RTN","IBCU7",69,0)
 .. D DX^IBCU72(IBIFN,IBPROCP)
"RTN","IBCU7",70,0)
 .. S X=$$ADDTNL(IBIFN,.DA)
"RTN","IBCU7",71,0)
 . Q:$$INPAT^IBCEF(IBIFN)  ;only outpatient bills
"RTN","IBCU7",72,0)
 . ;add procedures to array for download to PCE: dgcpt(assoc clinic,cpt,'provider^first dx^modifiers',cnt)=""
"RTN","IBCU7",73,0)
 . S DGPROC=$G(^DGCR(399,IBIFN,"CP",+DA,0))
"RTN","IBCU7",74,0)
 . S X=$P(DGPROC,U,18)_U_+$G(^IBA(362.3,+$P(DGPROC,U,11),0))_U_$P(DGPROC,U,15)
"RTN","IBCU7",75,0)
 . I 'DGCPTNEW,$P(DGPROC,"^",7)="" S DGCPTNEW=2
"RTN","IBCU7",76,0)
 . I DGCPTUP,DGCPTNEW S DGCPT=DGCPT+1 I $P(DGPROC,"^",7) S DGCPT($P(DGPROC,"^",7),+DGPROC,X,DGCPT)=""
"RTN","IBCU7",77,0)
 . ; add visit date to bill
"RTN","IBCU7",78,0)
 . I DGADDVST S (X,DINUM)=DGPROCDT D VFILE1^IBCOPV1 K DINUM,X,DGNOADD,DGADDVST
"RTN","IBCU7",79,0)
 ; Delete modifers with only a sequence #, no code
"RTN","IBCU7",80,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=0 F  S Z0=$O(^DGCR(399,IBIFN,"CP",Z,"MOD",Z0)) Q:'Z0  I $P($G(^(Z0,0)),U,2)="" S DA(2)=IBIFN,DA(1)=Z,DA=Z0,DIK="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""MOD""," D ^DIK
"RTN","IBCU7",81,0)
 Q
"RTN","IBCU7",82,0)
CODQ K %DT,DGPROC,DIC,DIE,DR,DGPROCDT,IBPROCP,DLAYGO
"RTN","IBCU7",83,0)
 K IBFT,DGNOADD,DGADDVST,DGCPT,DGCPTUP,IBZTYPE,DGCPTNEW
"RTN","IBCU7",84,0)
 Q
"RTN","IBCU7",85,0)
 ;
"RTN","IBCU7",86,0)
DELPROC ; Remove the selected procedure, because of inactive status (cancel selection)
"RTN","IBCU7",87,0)
 W !!,*7,"The Procedure code is inactive on ",$$DAT1^IBOUTL(DGPROCDT),"."
"RTN","IBCU7",88,0)
 W !,"Please select another Procedure."
"RTN","IBCU7",89,0)
 S DA(1)=IBIFN,DA=+Y,DIK="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",90,0)
 D ^DIK
"RTN","IBCU7",91,0)
 Q
"RTN","IBCU7",92,0)
 ;
"RTN","IBCU7",93,0)
DELADD N Z,Z0,DA,DIK,X,Y
"RTN","IBCU7",94,0)
 S DA(1)=IBIFN
"RTN","IBCU7",95,0)
 ;Delete references to proc on rev codes
"RTN","IBCU7",96,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I Z0'="",$P(Z0,U,15)!$S($P(Z0,U,10)=3:$P(Z0,U,11),1:0) S DIE="^DGCR(399,"_DA(1)_",""RC"",",DA=Z,DR=".11///@;.15///@"_$S($P(Z0,U,8):"",1:";.08////1") D ^DIE
"RTN","IBCU7",97,0)
 S DIK="^DGCR(399,"_DA(1)_",""CP""," F DA=0:0 S DA=$O(^DGCR(399,DA(1),"CP",DA)) Q:'DA  D ^DIK
"RTN","IBCU7",98,0)
 S DGRVRCAL=1
"RTN","IBCU7",99,0)
 Q
"RTN","IBCU7",100,0)
 ;
"RTN","IBCU7",101,0)
DTMES ;Message if procedure date not in date range
"RTN","IBCU7",102,0)
 Q:'$D(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"U"))  S DGNODUU=^("U")
"RTN","IBCU7",103,0)
 G:X'<$P(DGNODUU,"^")&(X'>$P(DGNODUU,"^",2)) DTMESQ
"RTN","IBCU7",104,0)
 W *7,!!?3,"Date must be within STATEMENT COVERS FROM and STATEMENT COVERS TO period."
"RTN","IBCU7",105,0)
 S Y=$P(DGNODUU,"^") X ^DD("DD")
"RTN","IBCU7",106,0)
 W !?3,"Enter a date between ",Y," and " S Y=$P(DGNODUU,"^",2) X ^DD("DD") W Y,!
"RTN","IBCU7",107,0)
 K X,Y
"RTN","IBCU7",108,0)
DTMESQ K DGNODUU Q
"RTN","IBCU7",109,0)
 ;
"RTN","IBCU7",110,0)
CODHLP ;Display Additional Procedure codes
"RTN","IBCU7",111,0)
 N I,J,Y,IBMOD
"RTN","IBCU7",112,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) W !!?5,"No Codes Entered!",! Q
"RTN","IBCU7",113,0)
 F I=0:0 S I=$O(^DGCR(399,IBIFN,"CP",I)) Q:'I  S Y=$G(^(I,0)) S Z=$$PRCNM^IBCSCH1($P(Y,"^",1),$P(Y,"^",2)) W !?5,$E($P(Z,"^",2),1,28),?35,"- ",$P(Z,"^") D
"RTN","IBCU7",114,0)
 . N IBY
"RTN","IBCU7",115,0)
 . S IBY=$P(Y,U,2)
"RTN","IBCU7",116,0)
 . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,I,1)
"RTN","IBCU7",117,0)
 . I IBMOD'="" S IBMOD="/"_IBMOD W IBMOD
"RTN","IBCU7",118,0)
 . W ?60,"Date: " S Y=IBY D DT^DIQ
"RTN","IBCU7",119,0)
 ;
"RTN","IBCU7",120,0)
 K Z Q
"RTN","IBCU7",121,0)
 ;
"RTN","IBCU7",122,0)
DICV I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",123,0)
 Q
"RTN","IBCU7",124,0)
 ;
"RTN","IBCU7",125,0)
DEFDIV(IBIFN) ; Find default division for bill IBIFN
"RTN","IBCU7",126,0)
 Q $P($G(^DG(40.8,+$P($G(^DGCR(399,IBIFN,0)),U,22),0)),U)
"RTN","IBCU7",127,0)
 ;
"RTN","IBCU7",128,0)
ADDTNL(IBIFN,DA) ;
"RTN","IBCU7",129,0)
 N DR,IBOK,X,Y,DIR
"RTN","IBCU7",130,0)
 S IBOK=1
"RTN","IBCU7",131,0)
 S DR="19;50.09;50.08" D ^DIE
"RTN","IBCU7",132,0)
 I $D(Y) S IBOK=0 G ADDTNLQ
"RTN","IBCU7",133,0)
 S DIR("B")="NO",DIR("A")="EDIT CMS-1500 SPECIAL PROGRAM FIELDS and BOX 19?: ",DIR("A",1)=" ",DIR(0)="YA"
"RTN","IBCU7",134,0)
 S DIR("?",1)="Respond YES only if you need to add/edit data for chiropractic visits,"
"RTN","IBCU7",135,0)
 S DIR("?")="EPSDT care, or if billing for HOSPICE and attending is not a hospice employee."
"RTN","IBCU7",136,0)
 D ^DIR K DIR
"RTN","IBCU7",137,0)
 I Y'=1 S IBOK=0 G ADDTNLQ
"RTN","IBCU7",138,0)
 S DR="W !,""  <<EPSDT>>"";50.07;W !!,""  <<HOSPICE>>"";50.03"
"RTN","IBCU7",139,0)
 D ^DIE
"RTN","IBCU7",140,0)
 W !
"RTN","IBCU7",141,0)
ADDTNLQ Q IBOK
"RTN","IBCU7",142,0)
 ;
"RTN","IBCU7",143,0)
XTRA1(Y) ;
"RTN","IBCU7",144,0)
 K Y
"RTN","IBCU7",145,0)
 Q
"RTN","IBCU7",146,0)
 ;
"RTN","IBCU7",147,0)
SPCUNIT(IBIFN,DA) ; return fields for special units if applicable, in DR form
"RTN","IBCU7",148,0)
 N IB0,IBCPT,IBDR,IBCT,IBFT,DFN S IBDR=""
"RTN","IBCU7",149,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27),IBFT=$P(IB0,U,19),DFN=$P(IB0,U,2)
"RTN","IBCU7",150,0)
 S IBCPT=$G(^DGCR(399,+$G(IBIFN),"CP",+$G(DA),0)) I IBCPT'["ICPT" G SPCUNTQ
"RTN","IBCU7",151,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,5,IBCT) S IBDR="15;" D SROMIN^IBCU74(IBIFN,DA) G SPCUNTQ ; minutes
"RTN","IBCU7",152,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,4,IBCT) S IBDR="21;" G SPCUNTQ ; miles
"RTN","IBCU7",153,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,6,IBCT) S IBDR="22//"_$$OBSHOUR^IBCU74(DFN,$P(IBCPT,U,2))_";" G SPCUNTQ ; hours
"RTN","IBCU7",154,0)
 I +IBFT=2,$P($G(^IBE(353.2,+$P(IBCPT,U,10),0)),U,2)="ANESTHESIA" S IBDR="15;" ; minutes
"RTN","IBCU7",155,0)
SPCUNTQ Q IBDR
"RTN","IBCVA0")
0^44^B10445232^B13013773
"RTN","IBCVA0",1,0)
IBCVA0 ;ALB/MJB - SET MCCR VARIABLES CONT.  ;04 AUG 88 03:02
"RTN","IBCVA0",2,0)
 ;;2.0;INTEGRATED BILLING;**52,361,371**;21-MAR-94;Build 57
"RTN","IBCVA0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCVA0",4,0)
 ;
"RTN","IBCVA0",5,0)
 ;MAP TO DGCRVA0
"RTN","IBCVA0",6,0)
 ;
"RTN","IBCVA0",7,0)
 Q
"RTN","IBCVA0",8,0)
ALL I $D(DFN) S IBDPT=^DPT(DFN,0) D ADDR ;I IBADD1]"",$L(IBADD1)'>47 S DIE="^DGCR(399,",(DA,Y)=+IBIFN,DR="110///"_IBADD1 D ^DIE K DIE,DR,DA
"RTN","IBCVA0",9,0)
 ;I $D(^DPT(DFN,.11)) S IBST=$P(^(.11),U,5),IBST=$S(IBST'="":$P(^DIC(5,IBST,0),U,2),1:"")
"RTN","IBCVA0",10,0)
 S IBBNO=$P(IB(0),"^"),IBDT=$P(IB(0),"^",3)
"RTN","IBCVA0",11,0)
 D 2^VADPT
"RTN","IBCVA0",12,0)
 ;I $P(IB(0),U,5)<3 S Y=0 F I=1:1 S Y=$O(^DGPM("APTT1",DFN,Y)) Q:'Y  S:$E(Y,1,7)=IBDT IBDA=Y
"RTN","IBCVA0",13,0)
 Q
"RTN","IBCVA0",14,0)
1 ;Demographic variables set
"RTN","IBCVA0",15,0)
 D Q1^IBCVA
"RTN","IBCVA0",16,0)
EN1 Q:'$D(DFN)  S IBMAR=$S($P(IBDPT,U,5)'="":$P(IBDPT,U,5),1:"U") I IBMAR'="U" S IBMAR=$S(IBMAR=6:"S",IBMAR=2:"M",IBMAR=1:"D",IBMAR=4:"W",IBMAR=5:"X",1:"U")
"RTN","IBCVA0",17,0)
 I $D(^DPT(DFN,.121)) S IBTADD=^DPT(DFN,.121),IBTST=$P(IBTADD,U,5),IBTST=$S(IBTST'="":$P(^DIC(5,IBTST,0),U,2),1:"") I $P(IBTADD,U)="" S IBT1="NO TEMPORARY ADDRESS"
"RTN","IBCVA0",18,0)
 Q
"RTN","IBCVA0",19,0)
2 ;Employment variables set
"RTN","IBCVA0",20,0)
 D Q1^IBCVA,Q2^IBCVA
"RTN","IBCVA0",21,0)
EN2 S:'$D(^DPT(DFN,.311)) IBEMPD="" I $D(^DPT(DFN,.311)) I ^DPT(DFN,.311)'="" S IBEMPD=$P(^(.311),U)_"^"_$P(^(.311),U,6)_"^"_$S($P(^(.311),U,7)'="":$P(^(.311),U,7),1:"")_"^"_$P($G(^DPT(DFN,.22)),U,5)_"^"_$P(IB(0),U,9)_"^"_$P(IB(0),U,8)
"RTN","IBCVA0",22,0)
 I $D(IBEMPD) S:IBEMPD'="" IBEC=$P(^DPT(DFN,.311),"^",15)
"RTN","IBCVA0",23,0)
 I $D(^DPT(DFN,.25)) S:$P(^DPT(DFN,.25),U,6)'="" IBSEST=$P(^(.25),U,6),IBSEST=$P(^DIC(5,IBSEST,0),U,2)
"RTN","IBCVA0",24,0)
 Q
"RTN","IBCVA0",25,0)
3 ;Insurance variables set
"RTN","IBCVA0",26,0)
EN3 D 123^IBCVA
"RTN","IBCVA0",27,0)
EN31 ; -IBdd(i) = value of ins node in dpt
"RTN","IBCVA0",28,0)
 I '$D(^DGCR(399,IBIFN,"AIC")) S IBINDT=$S(+$G(IB("U")):+IB("U"),+$G(^DGCR(399,IBIFN,"U")):+$G(^("U")),1:DT) D ALL^IBCNS1(DFN,"IBDD",1,IBINDT) S I="" F  S I=$O(IBDD(I)) Q:'I  D INS
"RTN","IBCVA0",29,0)
 I $D(^DGCR(399,IBIFN,"AIC")) S IBIN="I" F I=1:1:3 S IBIN=$O(^DGCR(399,IBIFN,IBIN)) Q:IBIN'?1"I".N  S IBDD(I,0)=^DGCR(399,IBIFN,IBIN) D INS
"RTN","IBCVA0",30,0)
 Q
"RTN","IBCVA0",31,0)
INS I $P(IBDD(I,0),U,6)="v" S IBISEX(I)=$P(^DPT(DFN,0),U,2)
"RTN","IBCVA0",32,0)
 E  S IBISEX(I)=$P($G(^DPT(DFN,.312,+$P($G(^DGCR(399,IBIFN,"M")),U,I+11),3)),U,12) ; *361 replaces old calculation of insured's sex
"RTN","IBCVA0",33,0)
 S IBISEX(I)=$S(IBISEX(I)="M":"MALE",IBISEX(I)="F":"FEMALE",1:"UNSPECIFIED")
"RTN","IBCVA0",34,0)
 S IBIRN(I)=$P(IBDD(I,0),U,16)
"RTN","IBCVA0",35,0)
 S IBIR(I)=$$EXTERNAL^DILFD(2.312,16,,IBIRN(I))
"RTN","IBCVA0",36,0)
 Q
"RTN","IBCVA0",37,0)
ADDR ;SET ADDRESS
"RTN","IBCVA0",38,0)
 S IBADD1="" I $D(^DGCR(399,IBIFN,"M")),$P(^("M"),"^",10)]"" Q
"RTN","IBCVA0",39,0)
 S X=$S($D(^DPT(DFN,.11)):^(.11),1:"") F I=1:1:4 I $P(X,"^",I)]"" S IBADD1=IBADD1_$P(X,"^",I)_","
"RTN","IBCVA0",40,0)
 I $D(^DIC(5,+$P(X,"^",5),0)) S IBADD1=IBADD1_$P(^(0),"^",2),IBST=$P(^(0),"^",2)
"RTN","IBCVA0",41,0)
 S:$P(X,"^",12)]"" IBADD1=IBADD1_" "_$P(X,"^",12) Q
"RTN","IBCVA0",42,0)
 ;IBCVA0
"RTN","IBCVA1")
0^45^B21105006^B20900613
"RTN","IBCVA1",1,0)
IBCVA1 ;ALB/MJB - SET MCCR VARIABLES CONT. ;09 JUN 88 14:49
"RTN","IBCVA1",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,109,51,137,210,349,371**;21-MAR-94;Build 57
"RTN","IBCVA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCVA1",4,0)
 ;
"RTN","IBCVA1",5,0)
 ;MAP TO DGCRVA1
"RTN","IBCVA1",6,0)
 ;
"RTN","IBCVA1",7,0)
 Q
"RTN","IBCVA1",8,0)
4 ;Event variables set
"RTN","IBCVA1",9,0)
 D 1234^IBCVA
"RTN","IBCVA1",10,0)
 Q:'$D(IBBT)
"RTN","IBCVA1",11,0)
EN4 I $E(IBBT,2)>2 G OCC
"RTN","IBCVA1",12,0)
INP D INP^IBCSC4
"RTN","IBCVA1",13,0)
 ;NOTE (12/1/93): IBDI AND IBDIN ARRAYS WERE NOT UPDATED WITH NEW DX LOCATIONS BECAUSE THEY DO NOT SEEM TO BE USED ANYWHERE
"RTN","IBCVA1",14,0)
OCC I $D(^DGCR(399,IBIFN,"C")) D
"RTN","IBCVA1",15,0)
 . N IBDATE,IBC
"RTN","IBCVA1",16,0)
 . S IBDATE=$$BDATE^IBACSV(IBIFN) ; The date of service
"RTN","IBCVA1",17,0)
 . S IBC=^DGCR(399,IBIFN,"C")
"RTN","IBCVA1",18,0)
 . F I=14:1:18 S IBDI(I)=$P(IBC,U,I) Q:IBDI(I)=""  D
"RTN","IBCVA1",19,0)
 .. S IBDIN(I)=IBDI(I)
"RTN","IBCVA1",20,0)
 .. S IBDI(I)=$P($$ICD9^IBACSV(IBDI(I),IBDATE),U,3)
"RTN","IBCVA1",21,0)
 K IBO S:'$D(^DGCR(399,IBIFN,"OC")) IBO="" G:$D(IBO) COND S IBNO=$P(^DGCR(399,IBIFN,"OC",0),U,3),IBOC=0
"RTN","IBCVA1",22,0)
 S C=0 F I=0:1 S IBOC=$O(^DGCR(399,IBIFN,"OC",I)) Q:IBOC'?1N.N!(C=5)  I $D(^DGCR(399,IBIFN,"OC",I)) S C=C+1 D SOCC
"RTN","IBCVA1",23,0)
 ;
"RTN","IBCVA1",24,0)
COND S IBCC=0,D=0 F I=0:0 S IBCC=$O(^DGCR(399,IBIFN,"CC",IBCC)) Q:IBCC=""!(D=5)  I $D(^DGCR(399,IBIFN,"CC",IBCC,0)) S D=D+1,IBCC(D)=$P(^DGCR(399,IBIFN,"CC",IBCC,0),"^",1) D CONDN
"RTN","IBCVA1",25,0)
 ;
"RTN","IBCVA1",26,0)
 D PROC
"RTN","IBCVA1",27,0)
 ;
"RTN","IBCVA1",28,0)
 ;Q:'$D(^DGCR(399,IBIFN,"C"))  F I=0,"C" S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCVA1",29,0)
 ;I $P(IB(0),"^",9)=4 F I=1:1:3 S:$P(IB("C"),"^",I)'="" IBCPT(I)=$P(IB("C"),"^",I)
"RTN","IBCVA1",30,0)
 ;I $P(IB(0),"^",9)=9 F I=4:1:6 S:$P(IB("C"),"^",I)'="" IBICD(I)=$P(IB("C"),"^",I)
"RTN","IBCVA1",31,0)
 ;I $P(IB(0),"^",9)=5 F I=7:1:9 S:$P(IB("C"),"^",I)]"" IBHC(I)=$P(IB("C"),"^",I),IBHCN(I)=$S($D(^ICPT(IBHC(I),0)):$P(^(0),"^",1),1:"")
"RTN","IBCVA1",32,0)
 Q
"RTN","IBCVA1",33,0)
 ;
"RTN","IBCVA1",34,0)
5 ;Billing variables set
"RTN","IBCVA1",35,0)
 D 123^IBCVA
"RTN","IBCVA1",36,0)
EN5 I '$D(IBIP) G REVC
"RTN","IBCVA1",37,0)
 S IBLS=$S($P(IB("U"),U,15)]"":$P(IB("U"),U,15),1:0),IBBS=$S($P(IB("U"),U,11)]"":$P(IB("U"),U,11),1:IBU) I IBBS'=IBU S IBBS=$P(^DGCR(399.1,IBBS,0),"^",1)
"RTN","IBCVA1",38,0)
REVC S IBREV=0 F I=1:1 S IBREV=$O(^DGCR(399,IBIFN,"RC",IBREV)) Q:IBREV'?1.N  S IBREVC(I)=^DGCR(399,IBIFN,"RC",IBREV,0)
"RTN","IBCVA1",39,0)
 S IBTF=$P(IB(0),U,26),IBTF=$S(IBTF=1:"ADMIT THRU DISCHARGE",IBTF=2:"FIRST CLAIM",IBTF=3:"CONTINUING CLAIM",IBTF=4:"LAST CLAIM",IBTF=5:"LATE CHARGE(S)",IBTF=6:"ADJUSTMENT",IBTF=7:"REPLACEMENT",IBTF=8:"CANCEL",IBTF=0:"ZERO CLAIM",1:"")
"RTN","IBCVA1",40,0)
 S IBBTP1=$E($$EXPAND^IBTRE(399,.24,$P(IB(0),U,24)),1,29)
"RTN","IBCVA1",41,0)
 S IBBTP2=$E($$EXPAND^IBTRE(399,.25,+$P(IB(0),U,25)),1,26)
"RTN","IBCVA1",42,0)
 S IBBTP3=IBTF
"RTN","IBCVA1",43,0)
 Q
"RTN","IBCVA1",44,0)
SOCC S IBO(C)=$P(^DGCR(399,IBIFN,"OC",IBOC,0),"^",1),IBO(C)=$P(^DGCR(399.1,IBO(C),0),"^",2),IBOCN(C)=$P(^(0),"^",1)
"RTN","IBCVA1",45,0)
 S IBOCD(C)=$P(^DGCR(399,IBIFN,"OC",IBOC,0),"^",2),IBOCD2(C)=$P(^DGCR(399,IBIFN,"OC",IBOC,0),"^",4) Q
"RTN","IBCVA1",46,0)
 Q
"RTN","IBCVA1",47,0)
 ;
"RTN","IBCVA1",48,0)
CONDN S IBCC(D)=$P($G(^DGCR(399.1,+IBCC(D),0)),U,2),IBCCN(D)=$P($G(^(0)),U,1)
"RTN","IBCVA1",49,0)
 Q
"RTN","IBCVA1",50,0)
 ;
"RTN","IBCVA1",51,0)
PROCX ; Entrypoint from output formatter
"RTN","IBCVA1",52,0)
 N IBIFN,IBZ
"RTN","IBCVA1",53,0)
 S IBIFN=$G(IBXIEN)
"RTN","IBCVA1",54,0)
 D PROC
"RTN","IBCVA1",55,0)
 D F^IBCEF("N-PROCEDURE CODING METHD","IBZ",,IBIFN)
"RTN","IBCVA1",56,0)
 I IBZ="" K IBPROC S IBPROC=0 Q
"RTN","IBCVA1",57,0)
 S Z=0 F  S Z=$O(IBPROC(Z)) Q:'Z  I $P(IBPROC(Z),U)'[$S(IBZ=9:";ICD",1:";ICP") K IBPROC(Z) S IBPROC=IBPROC-1
"RTN","IBCVA1",58,0)
 Q
"RTN","IBCVA1",59,0)
 ;
"RTN","IBCVA1",60,0)
PROC ;  -build array of procedures in IBPROC
"RTN","IBCVA1",61,0)
 N IBHCFA,IBMOD,I,J,X,X1
"RTN","IBCVA1",62,0)
 S IBHCFA=($$FT^IBCEF(IBIFN)=2)
"RTN","IBCVA1",63,0)
 K IBPROC S IBPROC=0
"RTN","IBCVA1",64,0)
 I '$D(IB("C")) S IB("C")=$G(^DGCR(399,IBIFN,"C"))
"RTN","IBCVA1",65,0)
 S:'$D(IB(0)) IB(0)=$G(^DGCR(399,IBIFN,0)) S J=$P($G(IB(0)),"^",9)
"RTN","IBCVA1",66,0)
 I IB("C")'="" F I=1:1:9 I $P(IB("C"),"^",I)'="" S IBPROC(I)=$P(IB("C"),"^",I)_";"_$S(I<4:"ICPT(",I<7:"ICD0(",1:"ICPT(")_"^"_$P(IB("C"),"^",$S(I#3:10+(I#3),1:13)),IBPROC=IBPROC+1
"RTN","IBCVA1",67,0)
 I $D(^DGCR(399,IBIFN,"CP")) S X=0 F I=100:1 S X=$O(^DGCR(399,IBIFN,"CP",X)) Q:'X  S X1=$G(^(X,0)) Q:'X1  D
"RTN","IBCVA1",68,0)
 . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,X)
"RTN","IBCVA1",69,0)
 . I $TR(IBMOD,",")'="" S $P(X1,U,15)=IBMOD
"RTN","IBCVA1",70,0)
 . S IBPROC($S($P(X1,"^",4):$P(X1,"^",4),1:I))=X1
"RTN","IBCVA1",71,0)
 . I IBHCFA S IBPROC($S($P(X1,"^",4):$P(X1,"^",4),1:I),"AUX")=$G(^DGCR(399,IBIFN,"CP",X,"AUX"))
"RTN","IBCVA1",72,0)
 . S IBPROC=IBPROC+1
"RTN","IBCVA1",73,0)
PROCQ Q
"RTN","IBCVA1",74,0)
 ;
"RTN","IBCVA1",75,0)
ALLPROC(IBIFN,IBPROC) ; Returns all procedures for bill IBIFN in array IBPROC
"RTN","IBCVA1",76,0)
 ;  IBPROC = # of procedures found
"RTN","IBCVA1",77,0)
 ;  IBPROC(prnt order)=0-node of 'CP' entry with piece 15 = the
"RTN","IBCVA1",78,0)
 ;                      modifiers separated by commas
"RTN","IBCVA1",79,0)
 ;  IBPROC(prnt order,"AUX")="AUX" node of 'CP' entry for CMS-1500 forms
"RTN","IBCVA1",80,0)
 ; Pass IBPROC by reference
"RTN","IBCVA1",81,0)
 ;
"RTN","IBCVA1",82,0)
 N IB
"RTN","IBCVA1",83,0)
 K IBPROC
"RTN","IBCVA1",84,0)
 D PROC
"RTN","IBCVA1",85,0)
 Q
"RTN","IBCVA1",86,0)
 ;
"RTN","IBCVA1",87,0)
VC ;returns a bills value codes, IBIFN must be defined: IBVC=count,IBVC(VIFN)=CODE ^ NAME ^ VALUE ^ $$?
"RTN","IBCVA1",88,0)
 N IBY,IBX,IBZ S IBVC=0 Q:'$D(^DGCR(399,IBIFN,"CV"))
"RTN","IBCVA1",89,0)
 S IBX=0 F  S IBX=$O(^DGCR(399,IBIFN,"CV",IBX)) Q:'IBX  S IBY=$G(^DGCR(399,IBIFN,"CV",IBX,0)) I +IBY D
"RTN","IBCVA1",90,0)
 . S IBVC=IBVC+1,IBZ=$G(^DGCR(399.1,+IBY,0)) Q:IBZ=""
"RTN","IBCVA1",91,0)
 . S IBVC(+IBY)=$P(IBZ,U,2)_U_$P(IBZ,U,1)_U_$S($P(IBY,U,2)="":"",+$P(IBZ,U,12):$J($P(IBY,U,2),0,2),1:$P(IBY,U,2))_U_$P(IBZ,U,12)
"RTN","IBCVA1",92,0)
 Q
"RTN","IBCVA1",93,0)
 ;
"RTN","IBCVA1",94,0)
SETMODS(IBMOD,IBZ,IBXSAVE) ; Set modifiers into IBXSAVE
"RTN","IBCVA1",95,0)
 ; IBMOD = the list of modifier iens for the proc, separated by commas
"RTN","IBCVA1",96,0)
 ; IBZ = the line counter to return the data in
"RTN","IBCVA1",97,0)
 ;
"RTN","IBCVA1",98,0)
 ; Output Formatter utility
"RTN","IBCVA1",99,0)
 ;
"RTN","IBCVA1",100,0)
 ; Variables passed by reference, returned
"RTN","IBCVA1",101,0)
 ; IBXSAVE("PROCMODS",IBZ) = Formatter 'save' array for modifiers
"RTN","IBCVA1",102,0)
 ;
"RTN","IBCVA1",103,0)
 N Q,IBQ
"RTN","IBCVA1",104,0)
 I $L(IBMOD) F Q=1:1:$L(IBMOD,",") I $P(IBMOD,",",Q)'="" D
"RTN","IBCVA1",105,0)
 . S IBQ=$$MOD^ICPTMOD(+$P(IBMOD,",",Q),"I")
"RTN","IBCVA1",106,0)
 . S IBXSAVE("PROCMODS",IBZ)=$G(IBXSAVE("PROCMODS",IBZ))_$P(IBQ,U,2)_","
"RTN","IBCVA1",107,0)
 S Q=$L($G(IBXSAVE("PROCMODS",IBZ)))
"RTN","IBCVA1",108,0)
 I 'Q S IBXSAVE("PROCMODS",IBZ)=""
"RTN","IBCVA1",109,0)
 I Q S IBXSAVE("PROCMODS",IBZ)=$E(IBXSAVE("PROCMODS",IBZ),1,Q-1)
"RTN","IBCVA1",110,0)
 Q
"RTN","IBCVA1",111,0)
 ;
"RTN","IBCVC")
0^36^B8423325^n/a
"RTN","IBCVC",1,0)
IBCVC ;ALB/WCJ - VALUE CODE FUNCTIONALITY ;25-JUN-07
"RTN","IBCVC",2,0)
 ;;2.0;INTEGRATED BILLING;**371**;21-MAR-94;Build 57
"RTN","IBCVC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCVC",4,0)
 G AWAY
"RTN","IBCVC",5,0)
AWAY Q
"RTN","IBCVC",6,0)
 ;
"RTN","IBCVC",7,0)
ALLOWVC(IBIFN,Y)   ; see if the value code is obsolete.
"RTN","IBCVC",8,0)
 ; returns 0 = Not Allowed/Obsolete
"RTN","IBCVC",9,0)
 ; returns 1 = Allowed
"RTN","IBCVC",10,0)
 ;
"RTN","IBCVC",11,0)
 N OBSDT,SCF
"RTN","IBCVC",12,0)
 S OBSDT=$$GET1^DIQ(399.1,Y,.26,"I")
"RTN","IBCVC",13,0)
 D CLEAN^DILF
"RTN","IBCVC",14,0)
 Q:'+OBSDT 1  ; If there is no obsolete date, were cool
"RTN","IBCVC",15,0)
 ;
"RTN","IBCVC",16,0)
 S SCF=$$GET1^DIQ(399,IBIFN,151,"I")  ; get the statement covers from date to compare with
"RTN","IBCVC",17,0)
 D CLEAN^DILF
"RTN","IBCVC",18,0)
 I 'SCF Q 0  ; if there is none, not sure where to go with this.  It's required so I say fail.
"RTN","IBCVC",19,0)
 ;
"RTN","IBCVC",20,0)
 I SCF>OBSDT Q 0
"RTN","IBCVC",21,0)
 ;
"RTN","IBCVC",22,0)
 Q 1
"RTN","IBCVC",23,0)
 ;
"RTN","IBCVC",24,0)
HELP ;
"RTN","IBCVC",25,0)
 Q:'$G(DA)
"RTN","IBCVC",26,0)
 Q:'$G(DA(1))
"RTN","IBCVC",27,0)
 Q:'$D(^DGCR(399,DA(1),"CV",DA,0))
"RTN","IBCVC",28,0)
 N VCPTR
"RTN","IBCVC",29,0)
 S VCPTR=$P($G(^DGCR(399,DA(1),"CV",DA,0)),U)
"RTN","IBCVC",30,0)
 Q:VCPTR=""
"RTN","IBCVC",31,0)
 Q:'$D(^DGCR(399.1,VCPTR,1))
"RTN","IBCVC",32,0)
 N LOOP
"RTN","IBCVC",33,0)
 S LOOP=0 F  S LOOP=$O(^DGCR(399.1,VCPTR,1,LOOP)) Q:'+LOOP  D
"RTN","IBCVC",34,0)
 . W !,$G(^(LOOP,0))
"RTN","IBCVC",35,0)
 Q
"RTN","IBCVC",36,0)
 ;
"RTN","IBCVC",37,0)
FORMCHK(X,DA) ; Check to make sure that the VALUE is in the correct format base on the VALUE CODE.
"RTN","IBCVC",38,0)
 ; This tag is the input transform for the VALUE field (Sub-File 399.047, field .02).
"RTN","IBCVC",39,0)
 ; 
"RTN","IBCVC",40,0)
 ; X = data being verified
"RTN","IBCVC",41,0)
 ; DA = subfile entry
"RTN","IBCVC",42,0)
 ; DA(1) = IEN to 399
"RTN","IBCVC",43,0)
 ; 
"RTN","IBCVC",44,0)
 ; returns
"RTN","IBCVC",45,0)
 ; 0 = invalid format
"RTN","IBCVC",46,0)
 ; 1 = valid format
"RTN","IBCVC",47,0)
 ; 
"RTN","IBCVC",48,0)
 Q:'$G(DA) 0
"RTN","IBCVC",49,0)
 Q:'$G(DA(1)) 0
"RTN","IBCVC",50,0)
 Q:'$D(^DGCR(399,DA(1),"CV",DA,0)) 0
"RTN","IBCVC",51,0)
 ;
"RTN","IBCVC",52,0)
 N VCPTR
"RTN","IBCVC",53,0)
 S VCPTR=$P($G(^DGCR(399,DA(1),"CV",DA,0)),U)
"RTN","IBCVC",54,0)
 Q:VCPTR="" 0
"RTN","IBCVC",55,0)
 ; 
"RTN","IBCVC",56,0)
 Q $$CHK(VCPTR,X)
"RTN","IBCVC",57,0)
 ;
"RTN","IBCVC",58,0)
CHK(VCPTR,X) ; This tag is called from the input transform above and also from the IB edit check routines (IBCBB*) 
"RTN","IBCVC",59,0)
 ; This function is passed in:
"RTN","IBCVC",60,0)
 ; VCPTR - pointer into file #399.1
"RTN","IBCVC",61,0)
 ; X - the VALUE being checked
"RTN","IBCVC",62,0)
 ; Returns:
"RTN","IBCVC",63,0)
 ; 0 or false - Invalid format or can't figure it out.
"RTN","IBCVC",64,0)
 ; 1 or true  - valid format (or in the case of 24, defined at the state level)
"RTN","IBCVC",65,0)
 ; 
"RTN","IBCVC",66,0)
 N CODE,OK
"RTN","IBCVC",67,0)
 S CODE=$$GET1^DIQ(399.1,VCPTR_",",.02,"I")
"RTN","IBCVC",68,0)
 D CLEAN^DILF
"RTN","IBCVC",69,0)
 Q:CODE="" 0
"RTN","IBCVC",70,0)
 ;
"RTN","IBCVC",71,0)
 N AMTFLG
"RTN","IBCVC",72,0)
 ;
"RTN","IBCVC",73,0)
 ; Check to see if it goes out as a monetary amount.
"RTN","IBCVC",74,0)
 S AMTFLG=$$GET1^DIQ(399.1,VCPTR_",",.19,"I")
"RTN","IBCVC",75,0)
 D CLEAN^DILF
"RTN","IBCVC",76,0)
 I AMTFLG Q X?1(1.7N,.7N1"."1.2N)
"RTN","IBCVC",77,0)
 ;
"RTN","IBCVC",78,0)
 ; Medicaid Rate Code (This is defined at the state level)
"RTN","IBCVC",79,0)
 Q:CODE=24 1
"RTN","IBCVC",80,0)
 ;
"RTN","IBCVC",81,0)
 ; Accident Hour
"RTN","IBCVC",82,0)
 I CODE=45 Q ".00.01.02.03.04.05.06.07.08.09.10.11.12.13.14.15.16.17.18.19.20.21.22.23.99."[("."_X_".")
"RTN","IBCVC",83,0)
 ;
"RTN","IBCVC",84,0)
 ; Whole Numbers
"RTN","IBCVC",85,0)
 I ".37.38.39.46.50.51.52.53.56.57.58.59.67.68."[("."_CODE_".") Q X?1.7N
"RTN","IBCVC",86,0)
 ;
"RTN","IBCVC",87,0)
 ; Zip
"RTN","IBCVC",88,0)
 I CODE="A0" Q X?5N
"RTN","IBCVC",89,0)
 ;
"RTN","IBCVC",90,0)
 I ".48.49."[("."_CODE_".") S OK=1 D  Q OK
"RTN","IBCVC",91,0)
 . I $P(X,".")'?.2N S OK=0 Q
"RTN","IBCVC",92,0)
 . I $P(X,".",2,999)'?.1N S OK=0 Q
"RTN","IBCVC",93,0)
 . I $E(X,$L(X))="." S OK=0 Q
"RTN","IBCVC",94,0)
 ;
"RTN","IBCVC",95,0)
 ; Alpha Numeric, no punctuation
"RTN","IBCVC",96,0)
 I ".60.61."[("."_CODE_".") Q X?1.7AN
"RTN","IBCVC",97,0)
 Q 1
"RTN","IBCVC",98,0)
 ;
"RTN","IBCVC",99,0)
REMOVE(DA) ; Remove the VALUE field since it's in the wrong format.
"RTN","IBCVC",100,0)
 ; This is called from a NEW STYLE X-REF "AC" in file 399.047 field .01
"RTN","IBCVC",101,0)
 N IENS,FDA
"RTN","IBCVC",102,0)
 Q:'$G(DA)!'$G(DA(1))
"RTN","IBCVC",103,0)
 S IENS=DA_","_DA(1)_","
"RTN","IBCVC",104,0)
 S FDA(399.047,IENS,.02)="@"
"RTN","IBCVC",105,0)
 D FILE^DIE(,"FDA")
"RTN","IBCVC",106,0)
 D CLEAN^DILF
"RTN","IBCVC",107,0)
 Q
"RTN","IBCVC",108,0)
 ;
"RTN","IBCVC",109,0)
COND(DA,OLDVC,NEWVC) ; Check if the VALUE is in a valid format for the new VALUE CODE.
"RTN","IBCVC",110,0)
 ; This is called from a NEW STYLE X-REF "AC" in file 399.047 field .01
"RTN","IBCVC",111,0)
 ; This function will return:
"RTN","IBCVC",112,0)
 ; 1 - Means that this VALUE should be deleted (It's in the wrong format)
"RTN","IBCVC",113,0)
 ; 0 - Means that this VALUE should NOT be deleted
"RTN","IBCVC",114,0)
 Q:'$G(OLDVC) 0
"RTN","IBCVC",115,0)
 Q:'$G(DA)!'$G(DA(1)) 0
"RTN","IBCVC",116,0)
 N OLDVALUE
"RTN","IBCVC",117,0)
 S OLDVALUE=$P($G(^DGCR(399,DA(1),"CV",DA,0)),U,2)
"RTN","IBCVC",118,0)
 Q:OLDVALUE="" 0
"RTN","IBCVC",119,0)
 Q '$$CHK(NEWVC,OLDVALUE)
"RTN","IBY371PO")
0^^B100442292^n/a
"RTN","IBY371PO",1,0)
IBY371PO ;ALB/WCJ - Post Install for IB patch 371 ;17-APR-2007
"RTN","IBY371PO",2,0)
 ;;2.0;INTEGRATED BILLING;**371**;21-MAR-94;Build 57
"RTN","IBY371PO",3,0)
 ;
"RTN","IBY371PO",4,0)
EN ;
"RTN","IBY371PO",5,0)
 N XPDIDTOT S XPDIDTOT=5
"RTN","IBY371PO",6,0)
 D RIT          ; 1. Recompile input templates
"RTN","IBY371PO",7,0)
 D CUINS        ; 2. Clean up duplicate insurance address lines
"RTN","IBY371PO",8,0)
 D MEDWNR       ; 3. Pre-populate Medicare WNR with professional payer ID 2U and station number
"RTN","IBY371PO",9,0)
 D VCHELP       ; 4. Add help text to Value Codes and Deactivate some value codes.
"RTN","IBY371PO",10,0)
 D NEWXREF      ; 5. Add NEW STYLE XREF to Value Code Subfile in 399.047
"RTN","IBY371PO",11,0)
EX ;
"RTN","IBY371PO",12,0)
 Q
"RTN","IBY371PO",13,0)
 ;
"RTN","IBY371PO",14,0)
RIT ; Recompile input templates for billing screens
"RTN","IBY371PO",15,0)
 NEW X,Y,DMAX
"RTN","IBY371PO",16,0)
 D BMES^XPDUTL(" STEP 1 of "_XPDIDTOT)
"RTN","IBY371PO",17,0)
 D MES^XPDUTL("-------------")
"RTN","IBY371PO",18,0)
 D MES^XPDUTL("Recompiling Input Templates for Billing Screens 3 through 7 ....")
"RTN","IBY371PO",19,0)
 S X="IBXSC3",Y=$$FIND1^DIC(.402,,"X","IB SCREEN3","B"),DMAX=8000
"RTN","IBY371PO",20,0)
 I Y D EN^DIEZ
"RTN","IBY371PO",21,0)
 S X="IBXSC4",Y=$$FIND1^DIC(.402,,"X","IB SCREEN4","B"),DMAX=8000
"RTN","IBY371PO",22,0)
 I Y D EN^DIEZ
"RTN","IBY371PO",23,0)
 S X="IBXSC5",Y=$$FIND1^DIC(.402,,"X","IB SCREEN5","B"),DMAX=8000
"RTN","IBY371PO",24,0)
 I Y D EN^DIEZ
"RTN","IBY371PO",25,0)
 S X="IBXSC6",Y=$$FIND1^DIC(.402,,"X","IB SCREEN6","B"),DMAX=8000
"RTN","IBY371PO",26,0)
 I Y D EN^DIEZ
"RTN","IBY371PO",27,0)
 S X="IBXSC7",Y=$$FIND1^DIC(.402,,"X","IB SCREEN7","B"),DMAX=8000
"RTN","IBY371PO",28,0)
 I Y D EN^DIEZ
"RTN","IBY371PO",29,0)
RITX ;
"RTN","IBY371PO",30,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY371PO",31,0)
 D UPDATE^XPDID(1)
"RTN","IBY371PO",32,0)
 Q
"RTN","IBY371PO",33,0)
 ;
"RTN","IBY371PO",34,0)
CUINS ; Clean up Insurance company address line duplicates
"RTN","IBY371PO",35,0)
 ;
"RTN","IBY371PO",36,0)
 D BMES^XPDUTL(" STEP 2 of "_XPDIDTOT)
"RTN","IBY371PO",37,0)
 D MES^XPDUTL("-------------")
"RTN","IBY371PO",38,0)
 D MES^XPDUTL("Removing duplicate address lines in insurance company file")
"RTN","IBY371PO",39,0)
 ;
"RTN","IBY371PO",40,0)
 N INSCO,ADDLOC,I,FIELD,VALUE
"RTN","IBY371PO",41,0)
 S INSCO=0 F  S INSCO=$O(^DIC(36,INSCO))  Q:'+INSCO  D
"RTN","IBY371PO",42,0)
 . F ADDLOC=.11,.12,.14,.15,.16,.18 D
"RTN","IBY371PO",43,0)
 .. N ADDRESS
"RTN","IBY371PO",44,0)
 .. F I=1:1:3 D
"RTN","IBY371PO",45,0)
 ... S FIELD=ADDLOC_I
"RTN","IBY371PO",46,0)
 ... S ADDRESS(I)=$$UP^XLFSTR($$GET1^DIQ(36,INSCO,FIELD))
"RTN","IBY371PO",47,0)
 ... D CLEAN^DILF
"RTN","IBY371PO",48,0)
 .. ;
"RTN","IBY371PO",49,0)
 .. I ADDRESS(3)]"",ADDRESS(3)=ADDRESS(2)!(ADDRESS(3)=ADDRESS(1)) D
"RTN","IBY371PO",50,0)
 ... S VALUE="@",FIELD=ADDLOC_3
"RTN","IBY371PO",51,0)
 ... D POPULATE(INSCO,FIELD,VALUE)
"RTN","IBY371PO",52,0)
 ... S ADDRESS(3)=""
"RTN","IBY371PO",53,0)
 .. ;
"RTN","IBY371PO",54,0)
 .. I ADDRESS(2)]"",ADDRESS(2)=ADDRESS(1) D
"RTN","IBY371PO",55,0)
 ... S FIELD=ADDLOC_2
"RTN","IBY371PO",56,0)
 ... S VALUE=$S(ADDRESS(3)="":"@",1:ADDRESS(3))
"RTN","IBY371PO",57,0)
 ... D POPULATE(INSCO,FIELD,VALUE)
"RTN","IBY371PO",58,0)
 ;
"RTN","IBY371PO",59,0)
CUINSX ;
"RTN","IBY371PO",60,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY371PO",61,0)
 D UPDATE^XPDID(2)
"RTN","IBY371PO",62,0)
 Q
"RTN","IBY371PO",63,0)
 ;
"RTN","IBY371PO",64,0)
POPULATE(INSCO,FLD,VAL) ;
"RTN","IBY371PO",65,0)
 N X,Y,DA,DIE,DR
"RTN","IBY371PO",66,0)
 S DA=INSCO
"RTN","IBY371PO",67,0)
 S DIE=36
"RTN","IBY371PO",68,0)
 S DR=FLD_"////"_VAL
"RTN","IBY371PO",69,0)
 D ^DIE
"RTN","IBY371PO",70,0)
 Q
"RTN","IBY371PO",71,0)
 ;
"RTN","IBY371PO",72,0)
MEDWNR ; Prepopulate Medicare WNR with professional payer ID 2U and station number
"RTN","IBY371PO",73,0)
 ;
"RTN","IBY371PO",74,0)
 D BMES^XPDUTL(" STEP 3 of "_XPDIDTOT)
"RTN","IBY371PO",75,0)
 D MES^XPDUTL("-------------")
"RTN","IBY371PO",76,0)
 D MES^XPDUTL("Prepopulate Medicare WNR with professional payer ID")
"RTN","IBY371PO",77,0)
 ;
"RTN","IBY371PO",78,0)
 N INSCO,SITE
"RTN","IBY371PO",79,0)
 S SITE="VA"_$P($$SITE^VASITE,U,3)
"RTN","IBY371PO",80,0)
 S INSCO=0 F  S INSCO=$O(^DIC(36,"B","MEDICARE (WNR)",INSCO))  Q:'+INSCO  D
"RTN","IBY371PO",81,0)
 . N X,Y,DA,DIE,DR
"RTN","IBY371PO",82,0)
 . S DA=INSCO
"RTN","IBY371PO",83,0)
 . S DIE=36
"RTN","IBY371PO",84,0)
 . S DR="6.05////2U;6.06////"_SITE
"RTN","IBY371PO",85,0)
 . D ^DIE
"RTN","IBY371PO",86,0)
MEDWNRX ;
"RTN","IBY371PO",87,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY371PO",88,0)
 D UPDATE^XPDID(3)
"RTN","IBY371PO",89,0)
 Q
"RTN","IBY371PO",90,0)
 ;
"RTN","IBY371PO",91,0)
VCHELP ;
"RTN","IBY371PO",92,0)
 ;
"RTN","IBY371PO",93,0)
 D BMES^XPDUTL(" STEP 4 of "_XPDIDTOT)
"RTN","IBY371PO",94,0)
 D MES^XPDUTL("-------------")
"RTN","IBY371PO",95,0)
 D MES^XPDUTL("Add help text and obsolete date to value codes")
"RTN","IBY371PO",96,0)
 ;
"RTN","IBY371PO",97,0)
 N VC
"RTN","IBY371PO",98,0)
 S VC("45",1)="Enter the hour when the accident occurred that caused"
"RTN","IBY371PO",99,0)
 S VC("45",2)="the need for medical treatment. "
"RTN","IBY371PO",100,0)
 S VC("45",3)=" "
"RTN","IBY371PO",101,0)
 S VC("45",4)="Enter correct code."
"RTN","IBY371PO",102,0)
 S VC("45",5)="00      12:00-12:59 (Midnight)"
"RTN","IBY371PO",103,0)
 S VC("45",6)="01      01:00-01:59 AM"
"RTN","IBY371PO",104,0)
 S VC("45",7)="02      02:00-02:59 AM"
"RTN","IBY371PO",105,0)
 S VC("45",8)="03      03:00-03:59 AM"
"RTN","IBY371PO",106,0)
 S VC("45",9)="04      04:00-04:59 AM"
"RTN","IBY371PO",107,0)
 S VC("45",10)="05      05:00-05:59 AM"
"RTN","IBY371PO",108,0)
 S VC("45",11)="06      06:00-06:59 AM"
"RTN","IBY371PO",109,0)
 S VC("45",12)="07      07:00-07:59 AM"
"RTN","IBY371PO",110,0)
 S VC("45",13)="08      08:00-08:59 AM"
"RTN","IBY371PO",111,0)
 S VC("45",14)="09      09:00-09:59 AM"
"RTN","IBY371PO",112,0)
 S VC("45",15)="10      10:00-10:59 AM"
"RTN","IBY371PO",113,0)
 S VC("45",16)="11      11:00-11:59 AM"
"RTN","IBY371PO",114,0)
 S VC("45",17)="12      12:00-12:59 (Noon)"
"RTN","IBY371PO",115,0)
 S VC("45",18)="13      01:00-01:59 PM"
"RTN","IBY371PO",116,0)
 S VC("45",19)="14      02:00-02:59 PM"
"RTN","IBY371PO",117,0)
 S VC("45",20)="15      03:00-03:59 PM"
"RTN","IBY371PO",118,0)
 S VC("45",21)="16      04:00-04:59 PM"
"RTN","IBY371PO",119,0)
 S VC("45",22)="17      05:00-05:59 PM"
"RTN","IBY371PO",120,0)
 S VC("45",23)="18      06:00-06:59 PM"
"RTN","IBY371PO",121,0)
 S VC("45",24)="19      07:00-07:59 PM"
"RTN","IBY371PO",122,0)
 S VC("45",25)="20      08:00-08:59 PM"
"RTN","IBY371PO",123,0)
 S VC("45",26)="21      09:00-09:59 PM"
"RTN","IBY371PO",124,0)
 S VC("45",27)="22      10:00-10:59 PM"
"RTN","IBY371PO",125,0)
 S VC("45",28)="23      11:00-11:59 PM"
"RTN","IBY371PO",126,0)
 S VC("45",29)="99      Unknown"
"RTN","IBY371PO",127,0)
 S VC("24",1)="Medicaid-eligibility requirements to be determined at state level."
"RTN","IBY371PO",128,0)
 S VC("37",1)="Enter the total number of pints of whole blood or"
"RTN","IBY371PO",129,0)
 S VC("37",2)="units of packed red cells furnished to the patient."
"RTN","IBY371PO",130,0)
 S VC("38",1)="Enter the total number of pints of whole blood or"
"RTN","IBY371PO",131,0)
 S VC("38",2)="units of packed red cells furnished to the patient."
"RTN","IBY371PO",132,0)
 S VC("46",1)="Enter the number of days determined by the QIO (medical"
"RTN","IBY371PO",133,0)
 S VC("46",2)="necessity reviewer) as needed to arrange for post-discharge"
"RTN","IBY371PO",134,0)
 S VC("46",3)="care."
"RTN","IBY371PO",135,0)
 S VC("48",1)="Enter the most recent hemoglobin reading taken before"
"RTN","IBY371PO",136,0)
 S VC("48",2)="the start of this billing period."
"RTN","IBY371PO",137,0)
 S VC("48",3)="Enter it in the format XX.X."
"RTN","IBY371PO",138,0)
 S VC("49",1)="Enter the most recent hematocrit reading taken before"
"RTN","IBY371PO",139,0)
 S VC("49",2)="the start of this billing period."
"RTN","IBY371PO",140,0)
 S VC("49",3)="Enter it in the format XX.X."
"RTN","IBY371PO",141,0)
 S VC("50",1)="Enter the number of physical therapy visits provided"
"RTN","IBY371PO",142,0)
 S VC("50",2)="from the onset of treatment by this billing provider"
"RTN","IBY371PO",143,0)
 S VC("50",3)="through this billing period."
"RTN","IBY371PO",144,0)
 S VC("51",1)="Enter the number of occupational therapy visits provided"
"RTN","IBY371PO",145,0)
 S VC("51",2)="from the onset of treatment by this billing provider"
"RTN","IBY371PO",146,0)
 S VC("51",3)="through this billing period."
"RTN","IBY371PO",147,0)
 S VC("52",1)="Enter the number of speech therapy visits provided"
"RTN","IBY371PO",148,0)
 S VC("52",2)="from the onset of treatment by this billing provider"
"RTN","IBY371PO",149,0)
 S VC("52",3)="through this billing period."
"RTN","IBY371PO",150,0)
 S VC("53",1)="Enter the number of cardiac rehabilitation visits provided"
"RTN","IBY371PO",151,0)
 S VC("53",2)="from the onset of treatment by this billing provider"
"RTN","IBY371PO",152,0)
 S VC("53",3)="through this billing period."
"RTN","IBY371PO",153,0)
 S VC("56",1)="Enter the number of home visit hours of skilled"
"RTN","IBY371PO",154,0)
 S VC("56",2)="nursing provided during the billing period. Do"
"RTN","IBY371PO",155,0)
 S VC("56",3)="not include travel time. Enter whole hours."
"RTN","IBY371PO",156,0)
 S VC("57",1)="Enter the number of home health aide hours of service"
"RTN","IBY371PO",157,0)
 S VC("57",2)="provided during the billing period. Do"
"RTN","IBY371PO",158,0)
 S VC("57",3)="not include travel time. Enter whole hours."
"RTN","IBY371PO",159,0)
 S VC("58",1)="Enter arterial blood gas value at the beginning of "
"RTN","IBY371PO",160,0)
 S VC("58",2)="each reporting period for oxygen therapy.  Code 58 "
"RTN","IBY371PO",161,0)
 S VC("58",3)="or 59 required on the initial bill and the fourth "
"RTN","IBY371PO",162,0)
 S VC("58",4)="month's bill. Enter the nearest whole number "
"RTN","IBY371PO",163,0)
 S VC("58",5)="(Example: 56.5 is entered as 57.)"
"RTN","IBY371PO",164,0)
 S VC("59",1)="Enter oxygen saturation value at the beginning of "
"RTN","IBY371PO",165,0)
 S VC("59",2)="each reporting period for oxygen therapy.  Code 58 "
"RTN","IBY371PO",166,0)
 S VC("59",3)="or 59 required on the initial bill and the fourth "
"RTN","IBY371PO",167,0)
 S VC("59",4)="month's bill. Enter the nearest whole percent "
"RTN","IBY371PO",168,0)
 S VC("59",5)="(Example: 93.5 is entered as 94.)"
"RTN","IBY371PO",169,0)
 S VC("60",1)="Enter the MSA number in which the HHA branch is located "
"RTN","IBY371PO",170,0)
 S VC("60",2)="when the MSA's branch location is different than the "
"RTN","IBY371PO",171,0)
 S VC("60",3)="HHA's. "
"RTN","IBY371PO",172,0)
 S VC("68",1)="Enter the number of units of EPO administered and/or"
"RTN","IBY371PO",173,0)
 S VC("68",2)="supplied related to this billing period. Enter amount"
"RTN","IBY371PO",174,0)
 S VC("68",3)="in whole units."
"RTN","IBY371PO",175,0)
 S VC("39",1)="Enter the total number of pints of whole blood or"
"RTN","IBY371PO",176,0)
 S VC("39",2)="units of packed red cells furnished to the patient."
"RTN","IBY371PO",177,0)
 S VC("61",1)="Enter MSA or Core Based Statistical Area (CBSA)"
"RTN","IBY371PO",178,0)
 S VC("61",2)="number (or rural state code) of the location"
"RTN","IBY371PO",179,0)
 S VC("61",3)="where the home health or hospice service was "
"RTN","IBY371PO",180,0)
 S VC("61",4)="delivered. Do not include travel time. Enter a "
"RTN","IBY371PO",181,0)
 S VC("61",5)="whole number rounded to the nearest whole hour."
"RTN","IBY371PO",182,0)
 S VC("67",1)="Enter the number of hours of peritoneal dialysis"
"RTN","IBY371PO",183,0)
 S VC("67",2)="provided during the billing period.   "
"RTN","IBY371PO",184,0)
 S VC("A0",1)="Enter the 5 digit ZIP Code of the location at which "
"RTN","IBY371PO",185,0)
 S VC("A0",2)="the beneficiary is initially placed on board the"
"RTN","IBY371PO",186,0)
 S VC("A0",3)="ambulance."
"RTN","IBY371PO",187,0)
 ; defaults
"RTN","IBY371PO",188,0)
 S VC("AMT",1)="Enter a monetary amount associated with this value code."
"RTN","IBY371PO",189,0)
 S VC("AMT",2)="Enter it in the format of dollars and cents (00.00)."
"RTN","IBY371PO",190,0)
 S VC("AMT",3)=" "
"RTN","IBY371PO",191,0)
 S VC("AMT",4)="If you enter only dollars (00), the system will add on .00 cents."
"RTN","IBY371PO",192,0)
 S VC("AMT",5)="Maximum length INCLUDING the cents, is 9 numbers."
"RTN","IBY371PO",193,0)
 ;
"RTN","IBY371PO",194,0)
 N DA,CODE,DAT,AMTFLG
"RTN","IBY371PO",195,0)
 S DA=0 F  S DA=$O(^DGCR(399.1,DA)) Q:DA=""  D
"RTN","IBY371PO",196,0)
 . N HLPTXT,FDA
"RTN","IBY371PO",197,0)
 . S DAT=$G(^(DA,0))
"RTN","IBY371PO",198,0)
 . Q:'$P(DAT,U,11)  ; not a value code
"RTN","IBY371PO",199,0)
 . S CODE=$P(DAT,U,2)
"RTN","IBY371PO",200,0)
 . Q:CODE=""
"RTN","IBY371PO",201,0)
 . I ".E1.E2.E3.F1.F2.F3.G1.G2.G3."[("."_CODE_".") S FDA(399.1,DA_",",.26)=3070301
"RTN","IBY371PO",202,0)
 . S AMTFLG=0
"RTN","IBY371PO",203,0)
 . I '$D(VC(CODE)) S CODE="AMT",AMTFLG=1
"RTN","IBY371PO",204,0)
 . M HLPTXT=VC(CODE)
"RTN","IBY371PO",205,0)
 . S FDA(399.1,DA_",",1)="HLPTXT"
"RTN","IBY371PO",206,0)
 . S FDA(399.1,DA_",",.19)=$S(AMTFLG:1,1:0)
"RTN","IBY371PO",207,0)
 . S FDA="FDA"
"RTN","IBY371PO",208,0)
 . D FILE^DIE("",FDA)
"RTN","IBY371PO",209,0)
 ;
"RTN","IBY371PO",210,0)
VCHELPX ;
"RTN","IBY371PO",211,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY371PO",212,0)
 D UPDATE^XPDID(4)
"RTN","IBY371PO",213,0)
 Q
"RTN","IBY371PO",214,0)
 ;
"RTN","IBY371PO",215,0)
NEWXREF ;
"RTN","IBY371PO",216,0)
 ;
"RTN","IBY371PO",217,0)
 D BMES^XPDUTL(" STEP 5 of "_XPDIDTOT)
"RTN","IBY371PO",218,0)
 D MES^XPDUTL("-------------")
"RTN","IBY371PO",219,0)
 D MES^XPDUTL("Adding new style cross reference")
"RTN","IBY371PO",220,0)
 ;
"RTN","IBY371PO",221,0)
 N ZZWJXR,ZZWJRES,ZZWJOUT
"RTN","IBY371PO",222,0)
 S ZZWJXR("FILE")=399.047
"RTN","IBY371PO",223,0)
 S ZZWJXR("NAME")="AC"
"RTN","IBY371PO",224,0)
 S ZZWJXR("TYPE")="MU"
"RTN","IBY371PO",225,0)
 S ZZWJXR("USE")="A"
"RTN","IBY371PO",226,0)
 S ZZWJXR("EXECUTION")="F"
"RTN","IBY371PO",227,0)
 S ZZWJXR("ACTIVITY")=""
"RTN","IBY371PO",228,0)
 S ZZWJXR("SHORT DESCR")="VALUE field clean up"
"RTN","IBY371PO",229,0)
 S ZZWJXR("DESCR",1)="If the VALUE CODE field is modified, make sure the VALUE field associated"
"RTN","IBY371PO",230,0)
 S ZZWJXR("DESCR",2)="with it is still VALID.  If not, delete the VALUE."
"RTN","IBY371PO",231,0)
 S ZZWJXR("SET")="D REMOVE^IBCVC(.DA)"
"RTN","IBY371PO",232,0)
 S ZZWJXR("KILL")="Q"
"RTN","IBY371PO",233,0)
 S ZZWJXR("SET CONDITION")="S X=$$COND^IBCVC(.DA,X1(1),X2(1))"
"RTN","IBY371PO",234,0)
 S ZZWJXR("VAL",1)=.01
"RTN","IBY371PO",235,0)
 S ZZWJXR("VAL",1,"COLLATION")="F"
"RTN","IBY371PO",236,0)
 D CREIXN^DDMOD(.ZZWJXR,"",.ZZWJRES,"ZZWJOUT")
"RTN","IBY371PO",237,0)
 ;
"RTN","IBY371PO",238,0)
NEWXREFX ;
"RTN","IBY371PO",239,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY371PO",240,0)
 D UPDATE^XPDID(5)
"RTN","IBY371PO",241,0)
 Q
"RTN","IBY371PR")
0^^B24403844^n/a
"RTN","IBY371PR",1,0)
IBY371PR ;ALB/ESG - Pre-Installation for IB patch 371 ;3-May-2006
"RTN","IBY371PR",2,0)
 ;;2.0;INTEGRATED BILLING;**371**;21-MAR-94;Build 57
"RTN","IBY371PR",3,0)
 ;
"RTN","IBY371PR",4,0)
 D DELOF       ; delete all data elements included in build
"RTN","IBY371PR",5,0)
 D DELXREFS    ; delete a trigger that was added on a previous version of the build
"RTN","IBY371PR",6,0)
 ;
"RTN","IBY371PR",7,0)
 Q
"RTN","IBY371PR",8,0)
 ;
"RTN","IBY371PR",9,0)
 ;
"RTN","IBY371PR",10,0)
 ;
"RTN","IBY371PR",11,0)
DELOF ; Delete included output formatter entries
"RTN","IBY371PR",12,0)
 NEW FILE,DIK,LN,TAG,DATA,PCE,DA,Y
"RTN","IBY371PR",13,0)
 F FILE=5,6,7 S DIK="^IBA(364."_FILE_"," F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  D
"RTN","IBY371PR",14,0)
 . F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  I $D(^IBA("364."_FILE,DA,0)) D ^DIK
"RTN","IBY371PR",15,0)
 . Q
"RTN","IBY371PR",16,0)
 ;
"RTN","IBY371PR",17,0)
 ; Also delete output formatter entries which are not going to be
"RTN","IBY371PR",18,0)
 ; re-added later.  These are non-functioning entries in file 364.6.
"RTN","IBY371PR",19,0)
 S DIK="^IBA(364.6,",TAG="DEL6+2",DATA=$P($T(@TAG),";;",2)
"RTN","IBY371PR",20,0)
 I DATA'="" D
"RTN","IBY371PR",21,0)
 . F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  I $D(^IBA(364.6,DA,0)) D ^DIK
"RTN","IBY371PR",22,0)
 . Q
"RTN","IBY371PR",23,0)
 ;
"RTN","IBY371PR",24,0)
 ; Also delete output formatter entries which are not going to be
"RTN","IBY371PR",25,0)
 ; re-added later.  These are non-functioning entries in file 364.7.
"RTN","IBY371PR",26,0)
 S DIK="^IBA(364.7,",TAG="DEL7+2",DATA=$P($T(@TAG),";;",2)
"RTN","IBY371PR",27,0)
 I DATA'="" D
"RTN","IBY371PR",28,0)
 . F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  I $D(^IBA(364.7,DA,0)) D ^DIK
"RTN","IBY371PR",29,0)
 . Q
"RTN","IBY371PR",30,0)
 ;
"RTN","IBY371PR",31,0)
DELOFX ;
"RTN","IBY371PR",32,0)
 Q
"RTN","IBY371PR",33,0)
 ;
"RTN","IBY371PR",34,0)
INCLUDE(FILE,Y) ; function to determine if output formatter entry should be
"RTN","IBY371PR",35,0)
 ; included in the build
"RTN","IBY371PR",36,0)
 ; FILE=5,6,7 indicating file 364.x
"RTN","IBY371PR",37,0)
 ; Y=ien to file
"RTN","IBY371PR",38,0)
 ;
"RTN","IBY371PR",39,0)
 NEW OK,LN,TAG,DATA
"RTN","IBY371PR",40,0)
 S OK=0
"RTN","IBY371PR",41,0)
 F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
"RTN","IBY371PR",42,0)
INCLUDEX ;
"RTN","IBY371PR",43,0)
 Q OK
"RTN","IBY371PR",44,0)
 ;
"RTN","IBY371PR",45,0)
INC3508(Y) ; function to determine if entry in IB ERROR file (350.8) should be included in the build
"RTN","IBY371PR",46,0)
 ; Y - ien to file
"RTN","IBY371PR",47,0)
 N DATA,ENTRY,LN,OK,TAG
"RTN","IBY371PR",48,0)
 S OK=0,ENTRY=U_$P($G(^IBE(350.8,Y,0)),U,3)_U
"RTN","IBY371PR",49,0)
 F LN=2:1 S TAG="ENT3508+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,ENTRY) S OK=1 Q
"RTN","IBY371PR",50,0)
 Q OK
"RTN","IBY371PR",51,0)
 ;
"RTN","IBY371PR",52,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",53,0)
 ; 350.8 entries modified:
"RTN","IBY371PR",54,0)
 ;    IB137: new error for missing Initial Treatment date
"RTN","IBY371PR",55,0)
 ;    IB138: new error for missing Patient Condition code
"RTN","IBY371PR",56,0)
 ;    IB139: new error for missing Acute Manifestation Date
"RTN","IBY371PR",57,0)
 ;    IB146: 3 payers - MRA secondary claim
"RTN","IBY371PR",58,0)
 ;    IB147: 3 payers - payer sequence >1
"RTN","IBY371PR",59,0)
 ;    IB150: Occurrence Code End Date can not be before the start date.
"RTN","IBY371PR",60,0)
 ;    IB151: Referring provider must have SSN or EIN defined.
"RTN","IBY371PR",61,0)
 ;    IB152: Operating provider must have SSN or EIN defined.
"RTN","IBY371PR",62,0)
 ;    IB153: Supervising provider must have SSN or EIN defined.
"RTN","IBY371PR",63,0)
 ;    IB154: Other provider must have SSN or EIN defined.
"RTN","IBY371PR",64,0)
 ;    IB155: End dates are required for occurrence spans.
"RTN","IBY371PR",65,0)
 ;    IB157: One or more Value Codes has no associated Value.
"RTN","IBY371PR",66,0)
 ;    IB158: One or more of the value codes has an improper format.
"RTN","IBY371PR",67,0)
 ;    IB205: ICN/DCN required - MRA replacement claim.
"RTN","IBY371PR",68,0)
 ;    IB206: FL-80 remarks required - MRA replacement claim.
"RTN","IBY371PR",69,0)
 ;    IB269: Patient address is incomplete. Address Line 1 is required.
"RTN","IBY371PR",70,0)
 ;    IB270: Patient address is incomplete. City is required.
"RTN","IBY371PR",71,0)
 ;    IB271: Patient address is incomplete. State is required.
"RTN","IBY371PR",72,0)
 ;    IB272: Patient address is incomplete. ZIP is required.
"RTN","IBY371PR",73,0)
 ;    IB273: Primary insurance subscriber's name is missing or invalid
"RTN","IBY371PR",74,0)
 ;    IB274: Secondary insurance subscriber's name is missing or invalid
"RTN","IBY371PR",75,0)
 ;    IB275: Tertiary insurance subscriber's name is missing or invalid
"RTN","IBY371PR",76,0)
 ;    IB276: Primary insurance subscriber's ID number is missing
"RTN","IBY371PR",77,0)
 ;    IB277: Secondary insurance subscriber's ID number is missing
"RTN","IBY371PR",78,0)
 ;    IB278: Tertiary insurance subscriber's ID number is missing
"RTN","IBY371PR",79,0)
 ;    IB279: Primary insurance missing PT. RELATIONSHIP TO INSURED
"RTN","IBY371PR",80,0)
 ;    IB280: Secondary insurance missing PT. RELATIONSHIP TO INSURED
"RTN","IBY371PR",81,0)
 ;    IB281: Tertiary insurance missing PT. RELATIONSHIP TO INSURED
"RTN","IBY371PR",82,0)
 ;    IB282: Primary insurance subscriber's address line 1 is missing
"RTN","IBY371PR",83,0)
 ;    IB283: Secondary insurance subscriber's address line 1 is missing
"RTN","IBY371PR",84,0)
 ;    IB284: Tertiary insurance subscriber's address line 1 is missing
"RTN","IBY371PR",85,0)
 ;    IB285: Primary insurance subscriber's CITY is missing
"RTN","IBY371PR",86,0)
 ;    IB286: Secondary insurance subscriber's CITY is missing
"RTN","IBY371PR",87,0)
 ;    IB287: Tertiary insurance subscriber's CITY is missing
"RTN","IBY371PR",88,0)
 ;    IB288: Primary insurance subscriber's STATE is missing
"RTN","IBY371PR",89,0)
 ;    IB289: Secondary insurance subscriber's STATE is missing
"RTN","IBY371PR",90,0)
 ;    IB290: Tertiary insurance subscriber's STATE is missing
"RTN","IBY371PR",91,0)
 ;    IB291: Primary insurance subscriber's ZIPCODE is missing
"RTN","IBY371PR",92,0)
 ;    IB292: Secondary insurance subscriber's ZIPCODE is missing
"RTN","IBY371PR",93,0)
 ;    IB293: Tertiary insurance subscriber's ZIPCODE is missing
"RTN","IBY371PR",94,0)
 ;
"RTN","IBY371PR",95,0)
ENT3508 ; entries in file 350.8 to be included
"RTN","IBY371PR",96,0)
 ;
"RTN","IBY371PR",97,0)
 ;;^IB137^IB138^IB139^IB146^IB147^IB150^IB151^IB152^IB153^IB154^IB155^IB157^IB158^IB269^
"RTN","IBY371PR",98,0)
 ;;^IB205^IB206^IB270^IB271^IB272^IB273^IB274^IB275^IB276^IB277^IB278^IB279^IB280^IB281^
"RTN","IBY371PR",99,0)
 ;;^IB282^IB283^IB284^IB285^IB286^IB287^IB288^IB289^IB290^IB291^IB292^IB293^
"RTN","IBY371PR",100,0)
 ;;
"RTN","IBY371PR",101,0)
 ;
"RTN","IBY371PR",102,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",103,0)
 ; 364.5 entries modified:
"RTN","IBY371PR",104,0)
 ;     12:  N-VALUE CODES (added internal number as 4th piece of return array)
"RTN","IBY371PR",105,0)
 ;     20:  N-CMS-1500 PURCH SVC TOTAL - new one for Box 20 and SUB-7
"RTN","IBY371PR",106,0)
 ;     21:  N-INITIAL TREATMENT - new one for CL1A-2
"RTN","IBY371PR",107,0)
 ;     22:  N-ACUTE MANIFESTATION - new one for CL1A-8
"RTN","IBY371PR",108,0)
 ;     29:  N-LAST XRAY - new one for CL1A-3
"RTN","IBY371PR",109,0)
 ;     34:  N-OTH INSURED ID - updated description
"RTN","IBY371PR",110,0)
 ;     36:  N-PATIENT CONDITION CODE - new one for CL1A-7
"RTN","IBY371PR",111,0)
 ;     55:  N-CURR INS FORM LOC 64 - removed blank out for Medicare
"RTN","IBY371PR",112,0)
 ;    198:  N-ALL INSURANCE NUMBER - removed default of patient SSN
"RTN","IBY371PR",113,0)
 ;    282:  N-PURCHASED SERVICE TOTAL - bug fix
"RTN","IBY371PR",114,0)
 ;
"RTN","IBY371PR",115,0)
ENT5 ; output formatter entries in file 364.5 to be included
"RTN","IBY371PR",116,0)
 ;
"RTN","IBY371PR",117,0)
 ;;^12^20^21^22^29^34^36^55^198^282^
"RTN","IBY371PR",118,0)
 ;;
"RTN","IBY371PR",119,0)
 ;
"RTN","IBY371PR",120,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",121,0)
 ; 364.6 entries modified:
"RTN","IBY371PR",122,0)
 ;      5:  CI2-6
"RTN","IBY371PR",123,0)
 ;     41:  PT1-15
"RTN","IBY371PR",124,0)
 ;    107:  OI1-9
"RTN","IBY371PR",125,0)
 ;    191:  CI3-4
"RTN","IBY371PR",126,0)
 ;    195:  OI1-12
"RTN","IBY371PR",127,0)
 ;    196:  CI1-8
"RTN","IBY371PR",128,0)
 ;    783:  SUB-7
"RTN","IBY371PR",129,0)
 ;    804:  OI1-13
"RTN","IBY371PR",130,0)
 ;    806:  OI1-15
"RTN","IBY371PR",131,0)
 ;    935:  OPR-16
"RTN","IBY371PR",132,0)
 ;    951:  OPR-17
"RTN","IBY371PR",133,0)
 ;    958:  INS-14
"RTN","IBY371PR",134,0)
 ;    977:  PRF-23
"RTN","IBY371PR",135,0)
 ;    979:  PRF-25
"RTN","IBY371PR",136,0)
 ;    980:  PRF-27
"RTN","IBY371PR",137,0)
 ;    981:  PRF-28
"RTN","IBY371PR",138,0)
 ;   1000:  CI3-10
"RTN","IBY371PR",139,0)
 ;   1002:  UB1-19
"RTN","IBY371PR",140,0)
 ;   1004:  CI1-11
"RTN","IBY371PR",141,0)
 ;   1010:  PRF-26
"RTN","IBY371PR",142,0)
 ;   1194:  SUB-11
"RTN","IBY371PR",143,0)
 ;   1315:  CI1-9
"RTN","IBY371PR",144,0)
 ;   1316:  CI1-7
"RTN","IBY371PR",145,0)
 ;   1471:  CMS-1500, Box 20 charges
"RTN","IBY371PR",146,0)
 ;   1472:  CMS-1500, Box 20 blank part
"RTN","IBY371PR",147,0)
 ;   1800 thru 1899 are allocated for new entries for this patch
"RTN","IBY371PR",148,0)
 ;
"RTN","IBY371PR",149,0)
ENT6 ; output formatter entries in file 364.6 to be included
"RTN","IBY371PR",150,0)
 ;
"RTN","IBY371PR",151,0)
 ;;^5^41^107^191^195^196^783^804^806^935^951^958^977^979^980^981^1000^1002^1004^1010^1194^1315^1316^1471^1472^
"RTN","IBY371PR",152,0)
 ;;^1800^1801^1802^1803^1804^1805^1806^1807^1808^1809^1810^1811^1812^1813^1814^1815^1816^1817^1818^1819^1820^1821^
"RTN","IBY371PR",153,0)
 ;;^1822^1823^1824^1825^1826^1827^1828^1829^1830^1831^1832^1833^1834^1835^1836^1837^1838^1839^1840^1841^1842^1843^
"RTN","IBY371PR",154,0)
 ;;^1844^1845^1846^1847^1848^1849^1850^1851^1852^
"RTN","IBY371PR",155,0)
 ;;
"RTN","IBY371PR",156,0)
 ;
"RTN","IBY371PR",157,0)
 ;
"RTN","IBY371PR",158,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",159,0)
 ; 364.7 entries modified:
"RTN","IBY371PR",160,0)
 ;      3:  CI2-6
"RTN","IBY371PR",161,0)
 ;      4:  CI2-6.9
"RTN","IBY371PR",162,0)
 ;      5:  CI2-8
"RTN","IBY371PR",163,0)
 ;      7:  CI2-10
"RTN","IBY371PR",164,0)
 ;     14:  CI2-7
"RTN","IBY371PR",165,0)
 ;     62:  PT1-15
"RTN","IBY371PR",166,0)
 ;     88:  PT1-17
"RTN","IBY371PR",167,0)
 ;    107:  VC1-3
"RTN","IBY371PR",168,0)
 ;    117:  OI2-3
"RTN","IBY371PR",169,0)
 ;    125:  OI1-9
"RTN","IBY371PR",170,0)
 ;    130:  OI1-10 (desc only)
"RTN","IBY371PR",171,0)
 ;    133:  CI3-4
"RTN","IBY371PR",172,0)
 ;    135:  CI2-14
"RTN","IBY371PR",173,0)
 ;    144:  CL1A-2
"RTN","IBY371PR",174,0)
 ;    186:  CL1A-3
"RTN","IBY371PR",175,0)
 ;    188:  OI1-12
"RTN","IBY371PR",176,0)
 ;    195:  CI1-8
"RTN","IBY371PR",177,0)
 ;    197:  CL1A-7
"RTN","IBY371PR",178,0)
 ;    198:  CL1A-8
"RTN","IBY371PR",179,0)
 ;    205:  SUB2-2 
"RTN","IBY371PR",180,0)
 ;    366:  OI3-6
"RTN","IBY371PR",181,0)
 ;    368:  OI3-7
"RTN","IBY371PR",182,0)
 ;    369:  OI3-8
"RTN","IBY371PR",183,0)
 ;    370:  OI3-9
"RTN","IBY371PR",184,0)
 ;    371:  OI3-10
"RTN","IBY371PR",185,0)
 ;    372:  OI3-11
"RTN","IBY371PR",186,0)
 ;    373:  OI3-12
"RTN","IBY371PR",187,0)
 ;    391:  SUB-11
"RTN","IBY371PR",188,0)
 ;    460:  OI5-9
"RTN","IBY371PR",189,0)
 ;    461:  OI5-10
"RTN","IBY371PR",190,0)
 ;    462:  OI5-11
"RTN","IBY371PR",191,0)
 ;    463:  OI5-12
"RTN","IBY371PR",192,0)
 ;    464:  OI5-13
"RTN","IBY371PR",193,0)
 ;    465:  OI5-14
"RTN","IBY371PR",194,0)
 ;    800:  CI2-9
"RTN","IBY371PR",195,0)
 ;    892:  SUB-7
"RTN","IBY371PR",196,0)
 ;    900:  OI1-13
"RTN","IBY371PR",197,0)
 ;    902:  OI1-15
"RTN","IBY371PR",198,0)
 ;    933:  INS-14
"RTN","IBY371PR",199,0)
 ;    939:  PRF-23
"RTN","IBY371PR",200,0)
 ;    941:  PRF-25
"RTN","IBY371PR",201,0)
 ;    942:  PRF-27
"RTN","IBY371PR",202,0)
 ;    943:  PRF-28
"RTN","IBY371PR",203,0)
 ;   1001:  CI3-10
"RTN","IBY371PR",204,0)
 ;   1003:  UB1-19
"RTN","IBY371PR",205,0)
 ;   1005:  CI1-11
"RTN","IBY371PR",206,0)
 ;   1011:  PRF-26
"RTN","IBY371PR",207,0)
 ;   1015:  GEN-7 - added patch 371
"RTN","IBY371PR",208,0)
 ;   1026:  OI3-5
"RTN","IBY371PR",209,0)
 ;   1031:  CI1-9
"RTN","IBY371PR",210,0)
 ;   1032:  CI1-7
"RTN","IBY371PR",211,0)
 ;   1038:  OI5-99.9
"RTN","IBY371PR",212,0)
 ;   1054:  NPI-14
"RTN","IBY371PR",213,0)
 ;   1055:  NPI-15
"RTN","IBY371PR",214,0)
 ;   1056:  NPI-16
"RTN","IBY371PR",215,0)
 ;   1057:  NPI-17
"RTN","IBY371PR",216,0)
 ;   1170:  CMS-1500, Box 20, Yes
"RTN","IBY371PR",217,0)
 ;   1171:  CMS-1500, Box 20, Charges
"RTN","IBY371PR",218,0)
 ;   1172:  CMS-1500, Box 20, Blank part
"RTN","IBY371PR",219,0)
 ;   1220:  CMS-1500, Box 20, No
"RTN","IBY371PR",220,0)
 ;   1276:  UB04/FL-8a
"RTN","IBY371PR",221,0)
 ;   1307:  UB04/FL-14
"RTN","IBY371PR",222,0)
 ;   1362:  UB04/FL-59A:C
"RTN","IBY371PR",223,0)
 ;   1457:  UB04/Creation Date
"RTN","IBY371PR",224,0)
 ;   1500 thru 1599 are allocated for new entries for this patch
"RTN","IBY371PR",225,0)
 ;
"RTN","IBY371PR",226,0)
ENT7 ; output formatter entries in file 364.7 to be included
"RTN","IBY371PR",227,0)
 ;
"RTN","IBY371PR",228,0)
 ;;^3^4^5^7^14^62^88^107^117^125^130^133^135^144^186^188^195^197^198^205^366^368^369^370^371^372^373^391^
"RTN","IBY371PR",229,0)
 ;;^460^461^462^463^464^465^800^892^900^902^933^939^941^942^943^1001^1003^1005^1011^1015^1026^1031^1032^1038^
"RTN","IBY371PR",230,0)
 ;;^1054^1055^1056^1057^1170^1171^1172^1220^1276^1307^1362^1457^
"RTN","IBY371PR",231,0)
 ;;^1500^1501^1502^1503^1504^1505^1506^1507^1508^1509^1510^1511^1512^1513^1514^1515^1516^1517^1518^1519^1520^1521^
"RTN","IBY371PR",232,0)
 ;;^1522^1523^1524^1525^1526^1527^1528^1529^1530^1531^1532^1533^1534^1535^1536^1537^1538^1539^1540^1541^1542^1543^
"RTN","IBY371PR",233,0)
 ;;^1544^1545^1546^1547^1548^1549^1550^1551^1552^
"RTN","IBY371PR",234,0)
 ;;
"RTN","IBY371PR",235,0)
 ;
"RTN","IBY371PR",236,0)
 ;
"RTN","IBY371PR",237,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",238,0)
DEL6 ; remove output formatter entries in file 364.6 (not re-added)
"RTN","IBY371PR",239,0)
 ;
"RTN","IBY371PR",240,0)
 ;;^90^208^969^984^1021^1022^1023^1024^1025^1026^1027^1028^1078^1080^1092^
"RTN","IBY371PR",241,0)
 ;;
"RTN","IBY371PR",242,0)
 ;
"RTN","IBY371PR",243,0)
 ;-----------------------------------------------------------------------
"RTN","IBY371PR",244,0)
DEL7 ; remove output formatter entries in file 364.7 (not re-added)
"RTN","IBY371PR",245,0)
 ;
"RTN","IBY371PR",246,0)
 ;;^108^361^362^374^
"RTN","IBY371PR",247,0)
 ;;
"RTN","IBY371PR",248,0)
 ;
"RTN","IBY371PR",249,0)
 Q
"RTN","IBY371PR",250,0)
 ;
"RTN","IBY371PR",251,0)
DELXREFS ;
"RTN","IBY371PR",252,0)
 D BMES^XPDUTL("Removing triggers")
"RTN","IBY371PR",253,0)
 D DELIX^DDMOD(399.047,.01,2)
"RTN","IBY371PR",254,0)
 D MES^XPDUTL("Done")
"RTN","IBY371PR",255,0)
 ;
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",399,399.0304,-1)
399^CP
"UP",399,399.0304,0)
399.0304
"UP",399,399.041,-1)
399^OC
"UP",399,399.041,0)
399.041
"UP",399,399.047,-1)
399^CV
"UP",399,399.047,0)
399.047
"UP",399.1,399.11,-1)
399.1^1
"UP",399.1,399.11,0)
399.11
"VER")
8.0^22.0
"^DD",2,2.312,1,0)
SUBSCRIBER ID^FX^^0;2^D SUBID^IBCNSU1
"^DD",2,2.312,1,.1)
INSURANCE NUMBER
"^DD",2,2.312,1,1,0)
^.1
"^DD",2,2.312,1,1,1,0)
2.312^ADGRU3121^MUMPS
"^DD",2,2.312,1,1,1,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,1,1,1,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,1,1,1,"%D",0)
^^1^1^3000420^
"^DD",2,2.312,1,1,1,"%D",1,0)
RAI/MDS: field monitored for changes.
"^DD",2,2.312,1,1,1,"DT")
3000420
"^DD",2,2.312,1,1,2,0)
2.312^AENR1^MUMPS
"^DD",2,2.312,1,1,2,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,1,1,2,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,1,1,2,3)
 DO NOT DELETE
"^DD",2,2.312,1,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,1,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,1,1,2,"%D",2,0)
enrollment.
"^DD",2,2.312,1,1,2,"DT")
3050913
"^DD",2,2.312,1,3)
Answer must be 3-20 characters in length
"^DD",2,2.312,1,21,0)
^^2^2^3070620^
"^DD",2,2.312,1,21,1,0)
Enter the Subscriber's Primary ID number.  This number is assigned
"^DD",2,2.312,1,21,2,0)
by the payer and can be found on the subscriber's insurance card.
"^DD",2,2.312,1,"DT")
3070620
"^DD",2,2.312,5.01,0)
PATIENT ID^F^^5;1^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.01,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.01,21,0)
^^8^8^3070620^
"^DD",2,2.312,5.01,21,1,0)
This is the patient's primary ID number for this insurance company.
"^DD",2,2.312,5.01,21,2,0)
Enter this field when the patient and the subscriber are different
"^DD",2,2.312,5.01,21,3,0)
and the patient has been given a unique ID number.  If issued by
"^DD",2,2.312,5.01,21,4,0)
this payer, the number should be present on the patient's insurance
"^DD",2,2.312,5.01,21,5,0)
card.
"^DD",2,2.312,5.01,21,6,0)
 
"^DD",2,2.312,5.01,21,7,0)
This data will print in box 8a on the UB-04 for institutional claims
"^DD",2,2.312,5.01,21,8,0)
when the patient and the subscriber are different.
"^DD",2,2.312,5.01,"DT")
3070620
"^DD",2,2.312,5.02,0)
SUBSCRIBER'S SEC QUALIFIER(1)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;2^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,4,6) X Q
"^DD",2,2.312,5.02,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.02,21,0)
^^6^6^3070626^
"^DD",2,2.312,5.02,21,1,0)
Enter the subscriber secondary ID qualifier# 1.  The qualifier
"^DD",2,2.312,5.02,21,2,0)
describes the type of ID number.
"^DD",2,2.312,5.02,21,3,0)
 
"^DD",2,2.312,5.02,21,4,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.02,21,5,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.02,21,6,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.02,"DT")
3070626
"^DD",2,2.312,5.03,0)
SUBSCRIBER'S SEC ID(1)^F^^5;3^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.03,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.03,21,0)
^^2^2^3070626^
"^DD",2,2.312,5.03,21,1,0)
Enter the subscriber's secondary ID #1.  You may enter up to 3 secondary
"^DD",2,2.312,5.03,21,2,0)
ID's and qualifiers.
"^DD",2,2.312,5.03,"DT")
3070626
"^DD",2,2.312,5.04,0)
SUBSCRIBER'S SEC QUALIFIER(2)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;4^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,2,6) X Q
"^DD",2,2.312,5.04,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.04,21,0)
^^6^6^3070626^
"^DD",2,2.312,5.04,21,1,0)
Enter the subscriber secondary ID qualifier# 2.  The qualifier
"^DD",2,2.312,5.04,21,2,0)
describes the type of ID number.
"^DD",2,2.312,5.04,21,3,0)
 
"^DD",2,2.312,5.04,21,4,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.04,21,5,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.04,21,6,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.04,"DT")
3070626
"^DD",2,2.312,5.05,0)
SUBSCRIBER'S SEC ID(2)^F^^5;5^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.05,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.05,21,0)
^^2^2^3070626^
"^DD",2,2.312,5.05,21,1,0)
Enter the subscriber's secondary ID #2.  You may enter up to 3 secondary
"^DD",2,2.312,5.05,21,2,0)
ID's and qualifiers.
"^DD",2,2.312,5.05,"DT")
3070626
"^DD",2,2.312,5.06,0)
SUBSCRIBER'S SEC QUALIFIER(3)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;6^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,2,4) X Q
"^DD",2,2.312,5.06,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.06,21,0)
^^6^6^3070626^
"^DD",2,2.312,5.06,21,1,0)
Enter the subscriber secondary ID qualifier# 3.  The qualifier
"^DD",2,2.312,5.06,21,2,0)
describes the type of ID number.
"^DD",2,2.312,5.06,21,3,0)
 
"^DD",2,2.312,5.06,21,4,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.06,21,5,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.06,21,6,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.06,"DT")
3070626
"^DD",2,2.312,5.07,0)
SUBSCRIBER'S SEC ID(3)^F^^5;7^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.07,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.07,21,0)
^^2^2^3070626^
"^DD",2,2.312,5.07,21,1,0)
Enter the subscriber's secondary ID #3.  You may enter up to 3 secondary
"^DD",2,2.312,5.07,21,2,0)
ID's and qualifiers.
"^DD",2,2.312,5.07,"DT")
3070626
"^DD",2,2.312,5.08,0)
PATIENT'S SEC QUALIFIER(1)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;8^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,10,12) X Q
"^DD",2,2.312,5.08,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.08,21,0)
^^7^7^3070626^
"^DD",2,2.312,5.08,21,1,0)
Enter the patient secondary ID qualifier# 1.  The qualifier
"^DD",2,2.312,5.08,21,2,0)
describes the type of ID number.  This should only be used when
"^DD",2,2.312,5.08,21,3,0)
the patient and the subscriber are different.
"^DD",2,2.312,5.08,21,4,0)
 
"^DD",2,2.312,5.08,21,5,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.08,21,6,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.08,21,7,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.08,"DT")
3070626
"^DD",2,2.312,5.09,0)
PATIENT'S SECONDARY ID(1)^F^^5;9^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.09,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.09,21,0)
^^3^3^3070626^
"^DD",2,2.312,5.09,21,1,0)
Enter the patient secondary ID #1.  You may enter up to 3 secondary
"^DD",2,2.312,5.09,21,2,0)
ID's and qualifiers.  This should only be used when the patient and
"^DD",2,2.312,5.09,21,3,0)
the subscriber are different.
"^DD",2,2.312,5.09,"DT")
3070626
"^DD",2,2.312,5.1,0)
PATIENT'S SEC QUALIFIER(2)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;10^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,8,12) X Q
"^DD",2,2.312,5.1,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.1,21,0)
^^7^7^3070626^
"^DD",2,2.312,5.1,21,1,0)
Enter the patient secondary ID qualifier# 2.  The qualifier
"^DD",2,2.312,5.1,21,2,0)
describes the type of ID number.  This should only be used when
"^DD",2,2.312,5.1,21,3,0)
the patient and the subscriber are different.
"^DD",2,2.312,5.1,21,4,0)
 
"^DD",2,2.312,5.1,21,5,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.1,21,6,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.1,21,7,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.1,"DT")
3070626
"^DD",2,2.312,5.11,0)
PATIENT'S SECONDARY ID(2)^F^^5;11^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.11,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.11,21,0)
^^3^3^3070626^
"^DD",2,2.312,5.11,21,1,0)
Enter the patient secondary ID #2.  You may enter up to 3 secondary
"^DD",2,2.312,5.11,21,2,0)
ID's and qualifiers.  This should only be used when the patient and
"^DD",2,2.312,5.11,21,3,0)
the subscriber are different.
"^DD",2,2.312,5.11,"DT")
3070626
"^DD",2,2.312,5.12,0)
PATIENT'S SEC QUALIFIER(3)^SX^23:Client Number;IG:Insurance Policy Number;SY:Social Security Number;^5;12^K:'$$CHKQUAL^IBCNSU1(DA(1),DA,X,8,10) X Q
"^DD",2,2.312,5.12,3)
Enter a Qualifier to identify the type of ID number.
"^DD",2,2.312,5.12,21,0)
^^7^7^3070626^
"^DD",2,2.312,5.12,21,1,0)
Enter the patient secondary ID qualifier# 3.  The qualifier
"^DD",2,2.312,5.12,21,2,0)
describes the type of ID number.  This should only be used when
"^DD",2,2.312,5.12,21,3,0)
the patient and the subscriber are different.
"^DD",2,2.312,5.12,21,4,0)
 
"^DD",2,2.312,5.12,21,5,0)
Up to 3 secondary ID's and qualifiers may be entered, but you
"^DD",2,2.312,5.12,21,6,0)
cannot use the same qualifier more than once.
"^DD",2,2.312,5.12,21,7,0)
SY is not a valid qualifier when the payer is Medicare.
"^DD",2,2.312,5.12,"DT")
3070626
"^DD",2,2.312,5.13,0)
PATIENT'S SECONDARY ID(3)^F^^5;13^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.312,5.13,3)
Answer must be 1-30 characters in length
"^DD",2,2.312,5.13,21,0)
^^3^3^3070626^
"^DD",2,2.312,5.13,21,1,0)
Enter the patient secondary ID #3.  You may enter up to 3 secondary
"^DD",2,2.312,5.13,21,2,0)
ID's and qualifiers.  This should only be used when the patient and
"^DD",2,2.312,5.13,21,3,0)
the subscriber are different.
"^DD",2,2.312,5.13,"DT")
3070626
"^DD",2,2.312,16,0)
PT. RELATIONSHIP TO INSURED^R*S^01:PATIENT;02:SPOUSE;03:NATURAL CHILD;08:EMPLOYEE;09:DO NOT USE;11:ORGAN DONOR;15:INJURED PLANTIFF;18:DO NOT USE;32:MOTHER;33:FATHER;^0;16^Q
"^DD",2,2.312,16,1,0)
^.1
"^DD",2,2.312,16,1,1,0)
^^TRIGGER^2.312^6
"^DD",2,2.312,16,1,1,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=$S(+X=1:"v",+X=2:"s",1:"o") X ^DD(2.312,16,1,1,1.4)
"^DD",2,2.312,16,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=2.312,DIG=6 D ^DICR
"^DD",2,2.312,16,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=2.312,DIG=6 D ^DICR
"^DD",2,2.312,16,1,1,"%D",0)
^^2^2^3070611^
"^DD",2,2.312,16,1,1,"%D",1,0)
This trigger will set the WHOSE INSURANCE field (#6).  WHOSE INSURANCE 
"^DD",2,2.312,16,1,1,"%D",2,0)
will no longer be asked on user interface screens.
"^DD",2,2.312,16,1,1,"CREATE VALUE")
S X=$S(+X=1:"v",+X=2:"s",1:"o")
"^DD",2,2.312,16,1,1,"DELETE VALUE")
@
"^DD",2,2.312,16,1,1,"DT")
3070611
"^DD",2,2.312,16,1,1,"FIELD")
WHOSE INSURANCE
"^DD",2,2.312,16,3)
Enter the code which indicates the patient's relationship to the insured party.
"^DD",2,2.312,16,12)
Cannot use 09 or 18 anymore
"^DD",2,2.312,16,12.1)
S DIC("S")="I X'=""09"",X'=""18"""
"^DD",2,2.312,16,21,0)
^.001^4^4^3030910^^^^
"^DD",2,2.312,16,21,1,0)
Select the relationship code that describes the relationship this
"^DD",2,2.312,16,21,2,0)
patient has to the holder of this insurance policy. If the policy
"^DD",2,2.312,16,21,3,0)
belongs to the patient enter '01' for patient. If the policy
"^DD",2,2.312,16,21,4,0)
belongs to the spouse enter '02' for spouse, etc.
"^DD",2,2.312,16,"DT")
3070611
"^DD",2,2.312,17,0)
NAME OF INSURED^RFX^^0;17^K:$L(X)>30!($L(X)<2) X K:$G(X)'["," X
"^DD",2,2.312,17,1,0)
^.1
"^DD",2,2.312,17,1,1,0)
2.312^AENR17^MUMPS
"^DD",2,2.312,17,1,1,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,17,1,1,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,17,1,1,3)
 DO NOT DELETE
"^DD",2,2.312,17,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,17,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,17,1,1,"%D",2,0)
enrollment.
"^DD",2,2.312,17,1,1,"DT")
3050913
"^DD",2,2.312,17,3)
ENTER 3-30 CHARACTER NAME OF PERSON WHO HOLDS THIS INSURANCE POLICY
"^DD",2,2.312,17,21,0)
^^5^5^3070613^
"^DD",2,2.312,17,21,1,0)
Enter the name of the individual for which this insurance policy was
"^DD",2,2.312,17,21,2,0)
issued.  If the patient and the insurance subscriber are the same,
"^DD",2,2.312,17,21,3,0)
then this field will be defaulted from the patient name field.
"^DD",2,2.312,17,21,4,0)
 
"^DD",2,2.312,17,21,5,0)
The name must contain a comma and be entered in Last,First format.
"^DD",2,2.312,17,"DT")
3070614
"^DD",36,36,.111,0)
STREET ADDRESS [LINE 1]^RFX^^.11;1^K:$L(X)>35!($L(X)<3) X
"^DD",36,36,.111,1,0)
^.1
"^DD",36,36,.111,1,1,0)
^^TRIGGER^36^.112
"^DD",36,36,.111,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.111,1,1,1.4)
"^DD",36,36,.111,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,2)=DIV,DIH=36,DIG=.112 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.111,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.111,1,1,2.4)
"^DD",36,36,.111,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,2)=DIV,DIH=36,DIG=.112 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.111,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.111,1,1,"%D",1,0)
When changing or deleting STREET ADDRESS [LINE 1] delete STREET
"^DD",36,36,.111,1,1,"%D",2,0)
ADDRESS [LINE 2].
"^DD",36,36,.111,1,1,"CREATE VALUE")
@
"^DD",36,36,.111,1,1,"DELETE VALUE")
@
"^DD",36,36,.111,1,1,"DT")
3000124
"^DD",36,36,.111,1,1,"FIELD")
STREET ADDRESS [LINE 2]
"^DD",36,36,.111,1,2,0)
^^TRIGGER^36^.113
"^DD",36,36,.111,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.111,1,2,1.4)
"^DD",36,36,.111,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,3)=DIV,DIH=36,DIG=.113 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.111,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.111,1,2,2.4)
"^DD",36,36,.111,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,3)=DIV,DIH=36,DIG=.113 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.111,1,2,"%D",0)
^^2^2^3000124^
"^DD",36,36,.111,1,2,"%D",1,0)
When changing or deleting STREET ADDRESS [LINE 1] delete STREET
"^DD",36,36,.111,1,2,"%D",2,0)
ADDRESS [LINE 3].
"^DD",36,36,.111,1,2,"CREATE VALUE")
@
"^DD",36,36,.111,1,2,"DELETE VALUE")
@
"^DD",36,36,.111,1,2,"DT")
3000124
"^DD",36,36,.111,1,2,"FIELD")
STREET ADDRESS [LINE 3]
"^DD",36,36,.111,3)
Enter the first line of this company's street address with 3-35 characters.
"^DD",36,36,.111,21,0)
^^2^2^3070619^
"^DD",36,36,.111,21,1,0)
Enter the first line of this company's street address with 3-35 
"^DD",36,36,.111,21,2,0)
characters.
"^DD",36,36,.111,"DEL",1,0)
I $D(DGINS)
"^DD",36,36,.111,"DT")
3071003
"^DD",36,36,.112,0)
STREET ADDRESS [LINE 2]^FX^^.11;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(DA),.111) X
"^DD",36,36,.112,1,0)
^.1
"^DD",36,36,.112,1,1,0)
^^TRIGGER^36^.113
"^DD",36,36,.112,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.112,1,1,1.4)
"^DD",36,36,.112,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,3)=DIV,DIH=36,DIG=.113 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.112,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.11)):^(.11),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.112,1,1,2.4)
"^DD",36,36,.112,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.11)):^(.11),1:""),DIV=X S $P(^(.11),U,3)=DIV,DIH=36,DIG=.113 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.112,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.112,1,1,"%D",1,0)
When changing or deleting STREET ADDRESS [LINE 2] delete STREET
"^DD",36,36,.112,1,1,"%D",2,0)
ADDRESS [LINE 3].
"^DD",36,36,.112,1,1,"CREATE VALUE")
@
"^DD",36,36,.112,1,1,"DELETE VALUE")
@
"^DD",36,36,.112,1,1,"DT")
3000124
"^DD",36,36,.112,1,1,"FIELD")
STREET ADDRESS [LINE 3]
"^DD",36,36,.112,3)
If the Street Address is longer than one line, enter a second line between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.112,5,1,0)
36^.111^1
"^DD",36,36,.112,21,0)
^^2^2^3070619^
"^DD",36,36,.112,21,1,0)
If the Street Address is longer than one line, enter a second line 
"^DD",36,36,.112,21,2,0)
between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.112,"DT")
3071003
"^DD",36,36,.113,0)
STREET ADDRESS [LINE 3]^FX^^.11;3^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(DA),.111,.112) X
"^DD",36,36,.113,3)
If the Street Address is longer than two lines, enter a third line between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.113,5,1,0)
36^.112^1
"^DD",36,36,.113,5,2,0)
36^.111^2
"^DD",36,36,.113,21,0)
^^2^2^3070619^
"^DD",36,36,.113,21,1,0)
If the Street Address is longer than two lines, enter a third line 
"^DD",36,36,.113,21,2,0)
between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.113,"DT")
3071003
"^DD",36,36,.121,0)
CLAIMS (INPT) STREET ADDRESS 1^FX^^.12;1^K:$L(X)>30!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.121,1,0)
^.1
"^DD",36,36,.121,1,1,0)
^^TRIGGER^36^.122
"^DD",36,36,.121,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.121,1,1,1.4)
"^DD",36,36,.121,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,2)=DIV,DIH=36,DIG=.122 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.121,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.121,1,1,2.4)
"^DD",36,36,.121,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,2)=DIV,DIH=36,DIG=.122 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.121,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.121,1,1,"%D",1,0)
When changing or deleting CLAIMS (INPT) STREET ADDRESS 1 delete
"^DD",36,36,.121,1,1,"%D",2,0)
CLAIMS (INPT) STREET ADDRESS 2.
"^DD",36,36,.121,1,1,"CREATE VALUE")
@
"^DD",36,36,.121,1,1,"DELETE VALUE")
@
"^DD",36,36,.121,1,1,"DT")
3000124
"^DD",36,36,.121,1,1,"FIELD")
CLAIMS (INPT) STREET ADDRESS 2
"^DD",36,36,.121,1,2,0)
^^TRIGGER^36^.123
"^DD",36,36,.121,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.121,1,2,1.4)
"^DD",36,36,.121,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,3)=DIV,DIH=36,DIG=.123 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.121,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.121,1,2,2.4)
"^DD",36,36,.121,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,3)=DIV,DIH=36,DIG=.123 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.121,1,2,"%D",0)
^^2^2^3000124^
"^DD",36,36,.121,1,2,"%D",1,0)
When changing or deleting CLAIMS (INPT) STREET ADDRESS 1 delete
"^DD",36,36,.121,1,2,"%D",2,0)
CLAIMS STREET ADDRESS [LINE 3].
"^DD",36,36,.121,1,2,"CREATE VALUE")
@
"^DD",36,36,.121,1,2,"DELETE VALUE")
@
"^DD",36,36,.121,1,2,"DT")
3000124
"^DD",36,36,.121,1,2,"FIELD")
CLAIMS (INPT) STREET ADDRESS 3
"^DD",36,36,.121,3)
If the inpatient claims process address of this company is different from its main address, enter Line 1 of the inpatient claims street address.  Answer must be 3-30 characters in length.
"^DD",36,36,.121,21,0)
^^3^3^3070619^
"^DD",36,36,.121,21,1,0)
If the inpatient claims process address of this company is different 
"^DD",36,36,.121,21,2,0)
from its main address, enter Line 1 of the inpatient claims street
"^DD",36,36,.121,21,3,0)
address. Answer must be 3-30 characters in length.
"^DD",36,36,.121,"DT")
3070619
"^DD",36,36,.122,0)
CLAIMS (INPT) STREET ADDRESS 2^FX^^.12;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.121) X
"^DD",36,36,.122,1,0)
^.1
"^DD",36,36,.122,1,1,0)
^^TRIGGER^36^.123
"^DD",36,36,.122,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.122,1,1,1.4)
"^DD",36,36,.122,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,3)=DIV,DIH=36,DIG=.123 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.122,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.12)):^(.12),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.122,1,1,2.4)
"^DD",36,36,.122,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.12)):^(.12),1:""),DIV=X S $P(^(.12),U,3)=DIV,DIH=36,DIG=.123 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.122,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.122,1,1,"%D",1,0)
When changing or deleting CLAIMS (INPT) STREET ADDRESS 2 delete
"^DD",36,36,.122,1,1,"%D",2,0)
CLAIMS (INPT) STREET ADDRESS 3.
"^DD",36,36,.122,1,1,"CREATE VALUE")
@
"^DD",36,36,.122,1,1,"DELETE VALUE")
@
"^DD",36,36,.122,1,1,"DT")
3000124
"^DD",36,36,.122,1,1,"FIELD")
CLAIMS (INPT) STREET ADDRESS 3
"^DD",36,36,.122,3)
If the Inpatient Claims Process Address is longer than one line, enter a second line between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.122,5,1,0)
36^.121^1
"^DD",36,36,.122,21,0)
^^3^3^3070619^
"^DD",36,36,.122,21,1,0)
If the Inpatient Claims Process Address is longer than one line, enter
"^DD",36,36,.122,21,2,0)
a second line between 3-30 characters.  It can not be the same as
"^DD",36,36,.122,21,3,0)
Line 1.
"^DD",36,36,.122,"DT")
3070619
"^DD",36,36,.123,0)
CLAIMS (INPT) STREET ADDRESS 3^FX^^.12;3^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.121,.122) X
"^DD",36,36,.123,3)
If the Inpatient Claims Process Address is longer than two lines, enter a third line between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.123,5,1,0)
36^.121^2
"^DD",36,36,.123,5,2,0)
36^.122^1
"^DD",36,36,.123,21,0)
^^3^3^3070619^
"^DD",36,36,.123,21,1,0)
If the Inpatient Claims Process Address is longer than two lines, enter
"^DD",36,36,.123,21,2,0)
a third line between 3-30 characters.  It can not be the same as Line 1
"^DD",36,36,.123,21,3,0)
or Line 2.
"^DD",36,36,.123,"DT")
3070619
"^DD",36,36,.141,0)
APPEALS ADDRESS ST. [LINE 1]^FX^^.14;1^K:$L(X)>30!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.141,1,0)
^.1
"^DD",36,36,.141,1,1,0)
^^TRIGGER^36^.142
"^DD",36,36,.141,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.141,1,1,1.4)
"^DD",36,36,.141,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,2)=DIV,DIH=36,DIG=.142 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.141,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.141,1,1,2.4)
"^DD",36,36,.141,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,2)=DIV,DIH=36,DIG=.142 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.141,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.141,1,1,"%D",1,0)
When changing or deleting APPEALS ADDRESS ST. [LINE 1] delete
"^DD",36,36,.141,1,1,"%D",2,0)
APPEALS ADDRESS ST. [LINE 2].
"^DD",36,36,.141,1,1,"CREATE VALUE")
@
"^DD",36,36,.141,1,1,"DELETE VALUE")
@
"^DD",36,36,.141,1,1,"DT")
3000124
"^DD",36,36,.141,1,1,"FIELD")
APPEALS ADDRESS ST. [LINE 2]
"^DD",36,36,.141,1,2,0)
^^TRIGGER^36^.143
"^DD",36,36,.141,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.141,1,2,1.4)
"^DD",36,36,.141,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,3)=DIV,DIH=36,DIG=.143 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.141,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.141,1,2,2.4)
"^DD",36,36,.141,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,3)=DIV,DIH=36,DIG=.143 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.141,1,2,"%D",0)
^^2^2^3000124^
"^DD",36,36,.141,1,2,"%D",1,0)
When changing or deleting APPEALS ADDRESS ST. [LINE 1] delete
"^DD",36,36,.141,1,2,"%D",2,0)
APPEALS ADDRESS ST. [LINE 3].
"^DD",36,36,.141,1,2,"CREATE VALUE")
@
"^DD",36,36,.141,1,2,"DELETE VALUE")
@
"^DD",36,36,.141,1,2,"DT")
3000124
"^DD",36,36,.141,1,2,"FIELD")
APPEALS ADDRESS ST. [LINE 3]
"^DD",36,36,.141,3)
If the appeals address of this company is different from its main address, enter Line 1 of the appeals street address.  Answer must be 3-30 characters in length.
"^DD",36,36,.141,21,0)
^^3^3^3070619^
"^DD",36,36,.141,21,1,0)
If the appeals address of this company is different from its main 
"^DD",36,36,.141,21,2,0)
address, enter Line 1 of the appeals street address.  Answer must be
"^DD",36,36,.141,21,3,0)
3-30 characters in length.
"^DD",36,36,.141,"DT")
3070619
"^DD",36,36,.142,0)
APPEALS ADDRESS ST. [LINE 2]^FX^^.14;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.141) X
"^DD",36,36,.142,1,0)
^.1
"^DD",36,36,.142,1,1,0)
^^TRIGGER^36^.143
"^DD",36,36,.142,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.142,1,1,1.4)
"^DD",36,36,.142,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,3)=DIV,DIH=36,DIG=.143 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.142,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.14)):^(.14),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.142,1,1,2.4)
"^DD",36,36,.142,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.14)):^(.14),1:""),DIV=X S $P(^(.14),U,3)=DIV,DIH=36,DIG=.143 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.142,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.142,1,1,"%D",1,0)
When changing or deleting APPEALS ADDRESS ST. [LINE 2] delete
"^DD",36,36,.142,1,1,"%D",2,0)
APPEALS ADDRESS ST. [LINE 3].
"^DD",36,36,.142,1,1,"CREATE VALUE")
@
"^DD",36,36,.142,1,1,"DELETE VALUE")
@
"^DD",36,36,.142,1,1,"DT")
3000124
"^DD",36,36,.142,1,1,"FIELD")
APPEALS ADDRESS ST. [LINE 3]
"^DD",36,36,.142,3)
If the Appeals Address is longer than one line, enter a second line between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.142,5,1,0)
36^.141^1
"^DD",36,36,.142,21,0)
^^2^2^3070619^
"^DD",36,36,.142,21,1,0)
If the Appeals Address is longer than one line, enter a second line 
"^DD",36,36,.142,21,2,0)
between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.142,"DT")
3070619
"^DD",36,36,.143,0)
APPEALS ADDRESS ST. [LINE 3]^FX^^.14;3^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.141,.142) X
"^DD",36,36,.143,3)
If the Appeals Address is longer than two lines, enter a third line between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.143,5,1,0)
36^.142^1
"^DD",36,36,.143,5,2,0)
36^.141^2
"^DD",36,36,.143,21,0)
^^2^2^3070619^
"^DD",36,36,.143,21,1,0)
If the Appeals Address is longer than two lines, enter a third line 
"^DD",36,36,.143,21,2,0)
between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.143,"DT")
3070619
"^DD",36,36,.151,0)
INQUIRY ADDRESS ST. [LINE 1]^FX^^.15;1^K:$L(X)>30!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.151,1,0)
^.1
"^DD",36,36,.151,1,1,0)
^^TRIGGER^36^.152
"^DD",36,36,.151,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.151,1,1,1.4)
"^DD",36,36,.151,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,2)=DIV,DIH=36,DIG=.152 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.151,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.151,1,1,2.4)
"^DD",36,36,.151,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,2)=DIV,DIH=36,DIG=.152 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.151,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.151,1,1,"%D",1,0)
When changing or deleting INQUIRY ADDRESS ST. [LINE 1]
"^DD",36,36,.151,1,1,"%D",2,0)
delete INQUIRY ADDRESS ST. [LINE 2].
"^DD",36,36,.151,1,1,"CREATE VALUE")
@
"^DD",36,36,.151,1,1,"DELETE VALUE")
@
"^DD",36,36,.151,1,1,"DT")
3000124
"^DD",36,36,.151,1,1,"FIELD")
INQUIRY ADDRESS ST. [LINE 2]
"^DD",36,36,.151,1,2,0)
^^TRIGGER^36^.153
"^DD",36,36,.151,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.151,1,2,1.4)
"^DD",36,36,.151,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,3)=DIV,DIH=36,DIG=.153 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.151,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.151,1,2,2.4)
"^DD",36,36,.151,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,3)=DIV,DIH=36,DIG=.153 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.151,1,2,"%D",0)
^^2^2^3000124^
"^DD",36,36,.151,1,2,"%D",1,0)
When changing or deleting INQUIRY ADDRESS ST. [LINE 1] delete
"^DD",36,36,.151,1,2,"%D",2,0)
INQUIRY ADDRESS ST. [LINE 3].
"^DD",36,36,.151,1,2,"CREATE VALUE")
@
"^DD",36,36,.151,1,2,"DELETE VALUE")
@
"^DD",36,36,.151,1,2,"DT")
3000124
"^DD",36,36,.151,1,2,"FIELD")
INQUIRY ADDRESS ST. [LINE 3]
"^DD",36,36,.151,3)
If the inquiry address of this company is different from its main address, enter Line 1 of the inquiry street address.  Answer must be 3-30 characters in length.
"^DD",36,36,.151,21,0)
^^3^3^3070619^
"^DD",36,36,.151,21,1,0)
If the inquiry address of this company is different from its main 
"^DD",36,36,.151,21,2,0)
address, enter Line 1 of the inquiry street address.  Answer must be 
"^DD",36,36,.151,21,3,0)
3-30 characters in length.
"^DD",36,36,.151,"DT")
3070619
"^DD",36,36,.152,0)
INQUIRY ADDRESS ST. [LINE 2]^FX^^.15;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.151) X
"^DD",36,36,.152,1,0)
^.1
"^DD",36,36,.152,1,1,0)
^^TRIGGER^36^.153
"^DD",36,36,.152,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.152,1,1,1.4)
"^DD",36,36,.152,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,3)=DIV,DIH=36,DIG=.153 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.152,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.15)):^(.15),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.152,1,1,2.4)
"^DD",36,36,.152,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.15)):^(.15),1:""),DIV=X S $P(^(.15),U,3)=DIV,DIH=36,DIG=.153 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.152,1,1,"%D",0)
^^2^2^3000124^^
"^DD",36,36,.152,1,1,"%D",1,0)
When changing or deleting INQUIRY ADDRESS ST. [LINE 2] delete
"^DD",36,36,.152,1,1,"%D",2,0)
INQUIRY ADDRESS ST. [LINE 3].
"^DD",36,36,.152,1,1,"CREATE VALUE")
@
"^DD",36,36,.152,1,1,"DELETE VALUE")
@
"^DD",36,36,.152,1,1,"DT")
3000124
"^DD",36,36,.152,1,1,"FIELD")
INQUIRY ADDRESS ST. [LINE 3]
"^DD",36,36,.152,3)
If the Inquiry Address is longer than one line, enter a second line between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.152,5,1,0)
36^.151^1
"^DD",36,36,.152,21,0)
^^2^2^3070619^^
"^DD",36,36,.152,21,1,0)
If the Inquiry Address is longer than one line, enter a second line 
"^DD",36,36,.152,21,2,0)
between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.152,"DT")
3070619
"^DD",36,36,.153,0)
INQUIRY ADDRESS ST. [LINE 3]^FX^^.15;3^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.151,.152) X
"^DD",36,36,.153,3)
If the Inquiry Address is longer than two lines, enter a third line between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.153,5,1,0)
36^.151^2
"^DD",36,36,.153,5,2,0)
36^.152^1
"^DD",36,36,.153,21,0)
^^2^2^3070619^
"^DD",36,36,.153,21,1,0)
If the Inquiry Address is longer than two lines, enter a third line 
"^DD",36,36,.153,21,2,0)
between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.153,"DT")
3070619
"^DD",36,36,.161,0)
CLAIMS (OPT) STREET ADDRESS 1^FX^^.16;1^K:$L(X)>35!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.161,1,0)
^.1
"^DD",36,36,.161,1,1,0)
^^TRIGGER^36^.162
"^DD",36,36,.161,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.161,1,1,1.4)
"^DD",36,36,.161,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,2)=DIV,DIH=36,DIG=.162 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.161,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.161,1,1,2.4)
"^DD",36,36,.161,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,2)=DIV,DIH=36,DIG=.162 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.161,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.161,1,1,"%D",1,0)
When changing or deleting CLAIMS (OPT) STREET ADDRESS 1 delete CLAIMS
"^DD",36,36,.161,1,1,"%D",2,0)
(OPT) STREET ADDRESS 2.
"^DD",36,36,.161,1,1,"CREATE VALUE")
@
"^DD",36,36,.161,1,1,"DELETE VALUE")
@
"^DD",36,36,.161,1,1,"DT")
3000124
"^DD",36,36,.161,1,1,"FIELD")
#.162
"^DD",36,36,.161,1,2,0)
^^TRIGGER^36^.163
"^DD",36,36,.161,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.161,1,2,1.4)
"^DD",36,36,.161,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,3)=DIV,DIH=36,DIG=.163 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.161,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.161,1,2,2.4)
"^DD",36,36,.161,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,3)=DIV,DIH=36,DIG=.163 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.161,1,2,"%D",0)
^^2^2^3000124^
"^DD",36,36,.161,1,2,"%D",1,0)
When changing or deleting CLAIMS (OPT) STREET ADDRESS 1 delete CLAIMS
"^DD",36,36,.161,1,2,"%D",2,0)
(OPT) STREET ADDRESS 3.
"^DD",36,36,.161,1,2,"CREATE VALUE")
@
"^DD",36,36,.161,1,2,"DELETE VALUE")
@
"^DD",36,36,.161,1,2,"DT")
3000124
"^DD",36,36,.161,1,2,"FIELD")
#.163
"^DD",36,36,.161,3)
If the outpatient claims process address of this company is different from its main address, enter Line 1 of the outpatient claims street address.  Answer must be 3-35 characters in length.
"^DD",36,36,.161,21,0)
^^3^3^3070619^
"^DD",36,36,.161,21,1,0)
If the outpatient claims process address of this company is different 
"^DD",36,36,.161,21,2,0)
from its main address, enter Line 1 of the outpatient claims street 
"^DD",36,36,.161,21,3,0)
address.  Answer must be 3-35 characters in length.
"^DD",36,36,.161,"DT")
3070619
"^DD",36,36,.162,0)
CLAIMS (OPT) STREET ADDRESS 2^FX^^.16;2^K:$L(X)>35!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.161) X
"^DD",36,36,.162,1,0)
^.1
"^DD",36,36,.162,1,1,0)
^^TRIGGER^36^.163
"^DD",36,36,.162,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.162,1,1,1.4)
"^DD",36,36,.162,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,3)=DIV,DIH=36,DIG=.163 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.162,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.16)):^(.16),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.162,1,1,2.4)
"^DD",36,36,.162,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.16)):^(.16),1:""),DIV=X S $P(^(.16),U,3)=DIV,DIH=36,DIG=.163 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.162,1,1,"%D",0)
^^2^2^3000124^
"^DD",36,36,.162,1,1,"%D",1,0)
When changing or deleting CLAIMS (OPT) STREET ADDRESS 2 delete CLAIMS (OPT)
"^DD",36,36,.162,1,1,"%D",2,0)
STREET ADDRESS 3.
"^DD",36,36,.162,1,1,"CREATE VALUE")
@
"^DD",36,36,.162,1,1,"DELETE VALUE")
@
"^DD",36,36,.162,1,1,"DT")
3000124
"^DD",36,36,.162,1,1,"FIELD")
#.163
"^DD",36,36,.162,3)
If the Outpatient Claims Process Address is longer than one line, enter a second line between 3-35 characters.  It can not be the same as Line 1.
"^DD",36,36,.162,5,1,0)
36^.161^1
"^DD",36,36,.162,21,0)
^^3^3^3070619^
"^DD",36,36,.162,21,1,0)
If the Outpatient Claims Process Address is longer than one line,
"^DD",36,36,.162,21,2,0)
enter a second line between 3-35 characters.  It can not be the same
"^DD",36,36,.162,21,3,0)
as Line 1.
"^DD",36,36,.162,"DT")
3070928
"^DD",36,36,.163,0)
CLAIMS (OPT) STREET ADDRESS 3^FX^^.16;3^K:$L(X)>35!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.161,.162) X
"^DD",36,36,.163,3)
If the Outpatient Claims Process Address is longer than two lines, enter a third line between 3-35 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.163,5,1,0)
36^.161^2
"^DD",36,36,.163,5,2,0)
36^.162^1
"^DD",36,36,.163,21,0)
^^3^3^3070619^
"^DD",36,36,.163,21,1,0)
If the Outpatient Claims Process Address is longer than two lines, 
"^DD",36,36,.163,21,2,0)
enter a third line between 3-35 characters.  It can not be the same
"^DD",36,36,.163,21,3,0)
as Line 1 or Line 2.
"^DD",36,36,.163,"DT")
3070619
"^DD",36,36,.181,0)
CLAIMS (RX) STREET ADDRESS 1^FX^^.18;1^K:$L(X)>30!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.181,1,0)
^.1
"^DD",36,36,.181,1,1,0)
^^TRIGGER^36^.182
"^DD",36,36,.181,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.181,1,1,1.4)
"^DD",36,36,.181,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,2)=DIV,DIH=36,DIG=.182 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.181,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(36,.181,1,1,2.4)
"^DD",36,36,.181,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,2)=DIV,DIH=36,DIG=.182 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.181,1,1,"%D",0)
^^1^1^2940104^^
"^DD",36,36,.181,1,1,"%D",1,0)
When changing or deleting CLAIMS (RX) STREET 1 delete CLAIMS (RX) STREET ADDRESS 1.
"^DD",36,36,.181,1,1,"CREATE VALUE")
@
"^DD",36,36,.181,1,1,"DELETE VALUE")
@
"^DD",36,36,.181,1,1,"FIELD")
#.182
"^DD",36,36,.181,1,2,0)
^^TRIGGER^36^.183
"^DD",36,36,.181,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.181,1,2,1.4)
"^DD",36,36,.181,1,2,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,3)=DIV,DIH=36,DIG=.183 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.181,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.181,1,2,2.4)
"^DD",36,36,.181,1,2,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,3)=DIV,DIH=36,DIG=.183 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.181,1,2,"%D",0)
^^1^1^2940104^
"^DD",36,36,.181,1,2,"%D",1,0)
When changing or deleting CLAIMS (RX) STREET ADDRESS 1 delete CLAIMS (RX) STREET ADDRESS 2.
"^DD",36,36,.181,1,2,"CREATE VALUE")
@
"^DD",36,36,.181,1,2,"DELETE VALUE")
@
"^DD",36,36,.181,1,2,"DT")
2940104
"^DD",36,36,.181,1,2,"FIELD")
#.183
"^DD",36,36,.181,3)
If the prescription claims address of this company is different from its main address, enter Line 1 of the prescription claims address.  Answer must be 3-30 characters in length.
"^DD",36,36,.181,21,0)
^^3^3^3070619^
"^DD",36,36,.181,21,1,0)
If the prescription claims address of this company is different from
"^DD",36,36,.181,21,2,0)
its main address, enter Line 1 of the prescription claims address.
"^DD",36,36,.181,21,3,0)
Answer must be 3-30 characters in length.
"^DD",36,36,.181,"DT")
3070619
"^DD",36,36,.182,0)
CLAIMS (RX) STREET ADDRESS 2^FX^^.18;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.181) X
"^DD",36,36,.182,1,0)
^.1
"^DD",36,36,.182,1,1,0)
^^TRIGGER^36^.183
"^DD",36,36,.182,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.182,1,1,1.4)
"^DD",36,36,.182,1,1,1.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,3)=DIV,DIH=36,DIG=.183 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.182,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.18)):^(.18),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,.182,1,1,2.4)
"^DD",36,36,.182,1,1,2.4)
S DIH=$S($D(^DIC(36,DIV(0),.18)):^(.18),1:""),DIV=X S $P(^(.18),U,3)=DIV,DIH=36,DIG=.183 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",36,36,.182,1,1,"CREATE VALUE")
@
"^DD",36,36,.182,1,1,"DELETE VALUE")
@
"^DD",36,36,.182,1,1,"FIELD")
#.183
"^DD",36,36,.182,3)
If the Prescription Claims Address is longer than one line, enter a second line between 3-30 characters.  It can not be the same as Line 1.
"^DD",36,36,.182,5,1,0)
36^.181^1
"^DD",36,36,.182,21,0)
^^3^3^3070619^
"^DD",36,36,.182,21,1,0)
If the Prescription Claims Address is longer than one line, enter a 
"^DD",36,36,.182,21,2,0)
second line between 3-30 characters.  It can not be the same as 
"^DD",36,36,.182,21,3,0)
Line 1.
"^DD",36,36,.182,"DT")
3070619
"^DD",36,36,.183,0)
CLAIMS (RX) STREET ADDRESS 3^FX^^.18;3^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.181,.182) X
"^DD",36,36,.183,3)
If the Prescription Claims Address is longer than two lines, enter a third line between 3-30 characters.  It can not be the same as Line 1 or Line 2.
"^DD",36,36,.183,5,1,0)
36^.181^2
"^DD",36,36,.183,5,2,0)
36^.182^1
"^DD",36,36,.183,21,0)
^^3^3^3070619^
"^DD",36,36,.183,21,1,0)
If the Prescription Claims Address is longer than two lines, enter a 
"^DD",36,36,.183,21,2,0)
third line between 3-30 characters.  It can not be the same as Line 1
"^DD",36,36,.183,21,3,0)
or Line 2.
"^DD",36,36,.183,"DT")
3070619
"^DD",36,36,6.01,0)
EDI INST SECONDARY ID QUAL(1)^SX^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^6;1^K:$$DUPQUAL^IBCNSC($G(IBCNS),X,6.03) X Q
"^DD",36,36,6.01,1,0)
^.1
"^DD",36,36,6.01,1,1,0)
^^TRIGGER^36^6.02
"^DD",36,36,6.01,1,1,1)
Q
"^DD",36,36,6.01,1,1,2)
X ^DD(36,6.01,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,2)=DIV,DIH=36,DIG=6.02 D ^DICR
"^DD",36,36,6.01,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(36,6.01,0)),U,3),Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,1)_":",2),$C(59))=""
"^DD",36,36,6.01,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.01,1,1,"DELETE CONDITION")
#6.01=""
"^DD",36,36,6.01,1,1,"DELETE VALUE")
@
"^DD",36,36,6.01,1,1,"FIELD")
#6.02
"^DD",36,36,6.01,3)
Enter the qualifier for this secondary Payer ID.  You can not use the same qualifier multiple times for institutional payer IDs.
"^DD",36,36,6.01,5,1,0)
36^6.02^1
"^DD",36,36,6.01,21,0)
^^1^1^3070730^^^
"^DD",36,36,6.01,21,1,0)
Enter a secondary payer ID qualifier if provided by the payer.
"^DD",36,36,6.01,"DT")
3070730
"^DD",36,36,6.02,0)
EDI INST SECONDARY ID(1)^F^^6;2^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,6.02,1,0)
^.1
"^DD",36,36,6.02,1,1,0)
^^TRIGGER^36^6.01
"^DD",36,36,6.02,1,1,1)
Q
"^DD",36,36,6.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,2)="" I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(36,6.02,1,1,2.4)
"^DD",36,36,6.02,1,1,2.4)
S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,1)=DIV,DIH=36,DIG=6.01 D ^DICR
"^DD",36,36,6.02,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.02,1,1,"DELETE CONDITION")
#6.02=""
"^DD",36,36,6.02,1,1,"DELETE VALUE")
@
"^DD",36,36,6.02,1,1,"FIELD")
#6.01
"^DD",36,36,6.02,3)
Answer must be 1-30 characters in length
"^DD",36,36,6.02,5,1,0)
36^6.01^1
"^DD",36,36,6.02,21,0)
^^1^1^3070626^
"^DD",36,36,6.02,21,1,0)
Enter a secondary payer ID number if provided by the payer.
"^DD",36,36,6.02,"DT")
3070626
"^DD",36,36,6.03,0)
EDI INST SECONDARY ID QUAL(2)^SX^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^6;3^K:$$DUPQUAL^IBCNSC($G(IBCNS),X,6.01) X Q
"^DD",36,36,6.03,1,0)
^.1
"^DD",36,36,6.03,1,1,0)
^^TRIGGER^36^6.04
"^DD",36,36,6.03,1,1,1)
Q
"^DD",36,36,6.03,1,1,2)
X ^DD(36,6.03,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,4)=DIV,DIH=36,DIG=6.04 D ^DICR
"^DD",36,36,6.03,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(36,6.03,0)),U,3),Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,3)_":",2),$C(59))=""
"^DD",36,36,6.03,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.03,1,1,"DELETE CONDITION")
#6.03=""
"^DD",36,36,6.03,1,1,"DELETE VALUE")
@
"^DD",36,36,6.03,1,1,"FIELD")
#6.04
"^DD",36,36,6.03,3)
Enter the qualifier for this secondary Payer ID.  You can not use the same qualifier multiple times for institutional payer IDs.
"^DD",36,36,6.03,5,1,0)
36^6.04^1
"^DD",36,36,6.03,21,0)
^^1^1^3070626^
"^DD",36,36,6.03,21,1,0)
Enter a secondary payer ID qualifier if provided by the payer.
"^DD",36,36,6.03,"DT")
3070730
"^DD",36,36,6.04,0)
EDI INST SECONDARY ID(2)^F^^6;4^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,6.04,1,0)
^.1
"^DD",36,36,6.04,1,1,0)
^^TRIGGER^36^6.03
"^DD",36,36,6.04,1,1,1)
Q
"^DD",36,36,6.04,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,4)="" I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(36,6.04,1,1,2.4)
"^DD",36,36,6.04,1,1,2.4)
S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,3)=DIV,DIH=36,DIG=6.03 D ^DICR
"^DD",36,36,6.04,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.04,1,1,"DELETE CONDITION")
#6.04=""
"^DD",36,36,6.04,1,1,"DELETE VALUE")
@
"^DD",36,36,6.04,1,1,"FIELD")
#6.03
"^DD",36,36,6.04,3)
Answer must be 1-30 characters in length
"^DD",36,36,6.04,5,1,0)
36^6.03^1
"^DD",36,36,6.04,21,0)
^^1^1^3070626^
"^DD",36,36,6.04,21,1,0)
Enter a secondary payer ID number if provided by the payer.
"^DD",36,36,6.04,"DT")
3070626
"^DD",36,36,6.05,0)
EDI PROF SECONDARY ID QUAL(1)^SX^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^6;5^K:$$DUPQUAL^IBCNSC($G(IBCNS),X,6.07) X Q
"^DD",36,36,6.05,1,0)
^.1
"^DD",36,36,6.05,1,1,0)
^^TRIGGER^36^6.06
"^DD",36,36,6.05,1,1,1)
Q
"^DD",36,36,6.05,1,1,2)
X ^DD(36,6.05,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,6)=DIV,DIH=36,DIG=6.06 D ^DICR
"^DD",36,36,6.05,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(36,6.05,0)),U,3),Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,5)_":",2),$C(59))=""
"^DD",36,36,6.05,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.05,1,1,"DELETE CONDITION")
#6.05=""
"^DD",36,36,6.05,1,1,"DELETE VALUE")
@
"^DD",36,36,6.05,1,1,"FIELD")
#6.06
"^DD",36,36,6.05,3)
Enter the qualifier for this secondary Payer ID.  You can not use the same qualifier multiple times for professional payer IDs.
"^DD",36,36,6.05,5,1,0)
36^6.06^1
"^DD",36,36,6.05,21,0)
^^1^1^3070626^
"^DD",36,36,6.05,21,1,0)
Enter a secondary payer ID qualifier if provided by the payer.
"^DD",36,36,6.05,"DT")
3070730
"^DD",36,36,6.06,0)
EDI PROF SECONDARY ID(1)^F^^6;6^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,6.06,1,0)
^.1
"^DD",36,36,6.06,1,1,0)
^^TRIGGER^36^6.05
"^DD",36,36,6.06,1,1,1)
Q
"^DD",36,36,6.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,6)="" I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(36,6.06,1,1,2.4)
"^DD",36,36,6.06,1,1,2.4)
S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,5)=DIV,DIH=36,DIG=6.05 D ^DICR
"^DD",36,36,6.06,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.06,1,1,"DELETE CONDITION")
#6.06=""
"^DD",36,36,6.06,1,1,"DELETE VALUE")
@
"^DD",36,36,6.06,1,1,"FIELD")
#6.05
"^DD",36,36,6.06,3)
Answer must be 1-30 characters in length
"^DD",36,36,6.06,5,1,0)
36^6.05^1
"^DD",36,36,6.06,21,0)
^^1^1^3070626^
"^DD",36,36,6.06,21,1,0)
Enter a secondary payer ID number if provided by the payer.
"^DD",36,36,6.06,"DT")
3070626
"^DD",36,36,6.07,0)
EDI PROF SECONDARY ID QUAL(2)^SX^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^6;7^K:$$DUPQUAL^IBCNSC($G(IBCNS),X,6.05) X Q
"^DD",36,36,6.07,1,0)
^.1
"^DD",36,36,6.07,1,1,0)
^^TRIGGER^36^6.08
"^DD",36,36,6.07,1,1,1)
Q
"^DD",36,36,6.07,1,1,2)
X ^DD(36,6.07,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,8)=DIV,DIH=36,DIG=6.08 D ^DICR
"^DD",36,36,6.07,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(36,6.07,0)),U,3),Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,7)_":",2),$C(59))=""
"^DD",36,36,6.07,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.07,1,1,"DELETE CONDITION")
#6.07=""
"^DD",36,36,6.07,1,1,"DELETE VALUE")
@
"^DD",36,36,6.07,1,1,"FIELD")
#6.08
"^DD",36,36,6.07,3)
Enter the qualifier for this secondary Payer ID.  You can not use the same qualifier multiple times for professional payer IDs.
"^DD",36,36,6.07,5,1,0)
36^6.08^1
"^DD",36,36,6.07,21,0)
^^1^1^3070626^
"^DD",36,36,6.07,21,1,0)
Enter a secondary payer ID qualifier if provided by the payer.
"^DD",36,36,6.07,"DT")
3070730
"^DD",36,36,6.08,0)
EDI PROF SECONDARY ID(2)^F^^6;8^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,6.08,1,0)
^.1
"^DD",36,36,6.08,1,1,0)
^^TRIGGER^36^6.07
"^DD",36,36,6.08,1,1,1)
Q
"^DD",36,36,6.08,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,8)="" I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,6)):^(6),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(36,6.08,1,1,2.4)
"^DD",36,36,6.08,1,1,2.4)
S DIH=$G(^DIC(36,DIV(0),6)),DIV=X S $P(^(6),U,7)=DIV,DIH=36,DIG=6.07 D ^DICR
"^DD",36,36,6.08,1,1,"CREATE VALUE")
NO EFFECT
"^DD",36,36,6.08,1,1,"DELETE CONDITION")
#6.08=""
"^DD",36,36,6.08,1,1,"DELETE VALUE")
@
"^DD",36,36,6.08,1,1,"FIELD")
#6.07
"^DD",36,36,6.08,3)
Answer must be 1-30 characters in length
"^DD",36,36,6.08,5,1,0)
36^6.07^1
"^DD",36,36,6.08,21,0)
^^1^1^3070626^
"^DD",36,36,6.08,21,1,0)
Enter a secondary payer ID number if provided by the payer.
"^DD",36,36,6.08,"DT")
3070626
"^DD",350.8,350.8,0)
FIELD^^10^7
"^DD",350.8,350.8,0,"DDA")
N
"^DD",350.8,350.8,0,"DT")
2930322
"^DD",350.8,350.8,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",350.8,350.8,0,"IX","AC",350.8,.03)

"^DD",350.8,350.8,0,"IX","B",350.8,.01)

"^DD",350.8,350.8,0,"IX","C",350.8,.03)

"^DD",350.8,350.8,0,"NM","IB ERROR")
 
"^DD",350.8,350.8,0,"VRPK")
IB
"^DD",350.8,350.8,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",350.8,350.8,.01,1,0)
^.1
"^DD",350.8,350.8,.01,1,1,0)
350.8^B
"^DD",350.8,350.8,.01,1,1,1)
S ^IBE(350.8,"B",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.01,1,1,2)
K ^IBE(350.8,"B",$E(X,1,30),DA)
"^DD",350.8,350.8,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",350.8,350.8,.01,21,0)
^^2^2^2910305^^
"^DD",350.8,350.8,.01,21,1,0)
This is a free text name of the entry.  It should be namespaced with
"^DD",350.8,350.8,.01,21,2,0)
the namespace of the package reporting the error.
"^DD",350.8,350.8,.02,0)
ERROR MESSAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",350.8,350.8,.02,3)
Answer must be 3-80 characters in length.
"^DD",350.8,350.8,.02,21,0)
^^3^3^2940209^^^^
"^DD",350.8,350.8,.02,21,1,0)
This is the text of the message as it will be displayed to a user or
"^DD",350.8,350.8,.02,21,2,0)
posted in a bulletin.  It should be as meaningful as possible to the
"^DD",350.8,350.8,.02,21,3,0)
person seeing the message.
"^DD",350.8,350.8,.03,0)
ERROR CODE^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
"^DD",350.8,350.8,.03,1,0)
^.1
"^DD",350.8,350.8,.03,1,1,0)
350.8^AC
"^DD",350.8,350.8,.03,1,1,1)
S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,1,2)
K ^IBE(350.8,"AC",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,1,2,0)
350.8^C
"^DD",350.8,350.8,.03,1,2,1)
S ^IBE(350.8,"C",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,2,2)
K ^IBE(350.8,"C",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,3)
Answer must be 1-9 characters in length.
"^DD",350.8,350.8,.03,21,0)
^^9^9^2920219^^^^
"^DD",350.8,350.8,.03,21,1,0)
This is the error code that will be passed to or determined by
"^DD",350.8,350.8,.03,21,2,0)
Integrated Billing.  The format for the Error Code should be
"^DD",350.8,350.8,.03,21,3,0)
nnxxx, where nn is the reporting package namespace and xxx are numeric
"^DD",350.8,350.8,.03,21,4,0)
values.
"^DD",350.8,350.8,.03,21,5,0)
 
"^DD",350.8,350.8,.03,21,6,0)
This is the error code that will be passed as the second piece of
"^DD",350.8,350.8,.03,21,7,0)
the variable Y to IB when +Y=-1.  More than one error code can be
"^DD",350.8,350.8,.03,21,8,0)
placed in the second ^ piece of Y delimited by semi-colons.  Applications
"^DD",350.8,350.8,.03,21,9,0)
may call ^IBAERR to display the error message(s).
"^DD",350.8,350.8,.03,"DT")
2920219
"^DD",350.8,350.8,.04,0)
PACKAGE REPORTING ERROR^S^1:INTEGRATED BILLING;2:ACCOUNTS RECEIVABLE;3:PHARMACY;^0;4^Q
"^DD",350.8,350.8,.04,21,0)
^^2^2^2920415^^^
"^DD",350.8,350.8,.04,21,1,0)
This is the package that requested this entry in this file and will
"^DD",350.8,350.8,.04,21,2,0)
report it to IB as an error if the conditions are detected.
"^DD",350.8,350.8,.05,0)
ERROR ACTION^S^1:DISPLAY MESSAGE;2:SEND BULLETIN;3:EDIT FILE;^0;5^Q
"^DD",350.8,350.8,.05,21,0)
^^6^6^2910227^
"^DD",350.8,350.8,.05,21,1,0)
This is the type of action that should be taken when this error is
"^DD",350.8,350.8,.05,21,2,0)
reported to IB.  If action other than displaying a message is indicated
"^DD",350.8,350.8,.05,21,3,0)
then the MUMPS code in the ERROR ACTION field will be executed.
"^DD",350.8,350.8,.05,21,4,0)
 
"^DD",350.8,350.8,.05,21,5,0)
Currently only display actions are implemented.  Please contact the 
"^DD",350.8,350.8,.05,21,6,0)
developing ISC if other action types are desired.
"^DD",350.8,350.8,.06,0)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"^DD",350.8,350.8,.06,21,0)
^^1^1^2940209^
"^DD",350.8,350.8,.06,21,1,0)
This is the type of alert that should be sent when this error occurs.
"^DD",350.8,350.8,.06,"DT")
2930322
"^DD",350.8,350.8,10,0)
EXECUTABLE LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",350.8,350.8,10,3)
This is Standard MUMPS code.
"^DD",350.8,350.8,10,21,0)
^^2^2^2910227^
"^DD",350.8,350.8,10,21,1,0)
This is the MUMPS code that will be executed if an error is reported
"^DD",350.8,350.8,10,21,2,0)
with an ERROR ACTION of other than to display a message.
"^DD",355.33,355.33,60.04,0)
SUBSCRIBER ID^FX^^60;4^K:$L(X)>20!($L(X)<3) X
"^DD",355.33,355.33,60.04,.1)
SUBSCRIBER PRIMARY ID
"^DD",355.33,355.33,60.04,3)
Answer must be 3-20 characters in length
"^DD",355.33,355.33,60.04,21,0)
^^2^2^3070716^
"^DD",355.33,355.33,60.04,21,1,0)
Enter the Subscriber's Primary ID number.  This number is assigned
"^DD",355.33,355.33,60.04,21,2,0)
by the payer and can be found on the subscriber's insurance card.
"^DD",355.33,355.33,60.04,"DT")
3070717
"^DD",355.33,355.33,60.06,0)
PT. RELATIONSHIP TO INSURED^*S^01:PATIENT;02:SPOUSE;03:NATURAL CHILD;08:EMPLOYEE;09:DO NOT USE;11:ORGAN DONOR;15:INJURED PLANTIFF;18:DO NOT USE;32:MOTHER;33:FATHER;^60;6^Q
"^DD",355.33,355.33,60.06,1,0)
^.1
"^DD",355.33,355.33,60.06,1,1,0)
355.33^AI1^MUMPS
"^DD",355.33,355.33,60.06,1,1,1)
Q
"^DD",355.33,355.33,60.06,1,1,2)
Q
"^DD",355.33,355.33,60.06,1,1,"%D",0)
^^1^1^2981017^
"^DD",355.33,355.33,60.06,1,1,"%D",1,0)
Cross reference to force filing of data so input transform will work.
"^DD",355.33,355.33,60.06,1,1,"DT")
2981017
"^DD",355.33,355.33,60.06,3)
Enter the code for the patient's relationship to the insured (or policy holder).
"^DD",355.33,355.33,60.06,12)
Cannot use 09 or 18 anymore
"^DD",355.33,355.33,60.06,12.1)
S DIC("S")="I X'=""09"",X'=""18"""
"^DD",355.33,355.33,60.06,21,0)
^^2^2^3070713^
"^DD",355.33,355.33,60.06,21,1,0)
Enter the code which best describes the patient's relationship to
"^DD",355.33,355.33,60.06,21,2,0)
the person who holds this policy (or insured).
"^DD",355.33,355.33,60.06,"DT")
3070713
"^DD",355.33,355.33,62.01,0)
PATIENT ID^F^^62;1^K:$L(X)>30!($L(X)<1) X
"^DD",355.33,355.33,62.01,.1)
PATIENT PRIMARY ID
"^DD",355.33,355.33,62.01,3)
Answer must be 1-30 characters in length
"^DD",355.33,355.33,62.01,21,0)
^^3^3^3070716^
"^DD",355.33,355.33,62.01,21,1,0)
This is the patient's primary ID number for this insurance company.
"^DD",355.33,355.33,62.01,21,2,0)
Enter this field when the patient and the subscriber are different
"^DD",355.33,355.33,62.01,21,3,0)
and the patient has a unique ID number.
"^DD",355.33,355.33,62.01,"DT")
3070716
"^DD",355.93,355.93,.11,0)
X12 TYPE OF FACILITY^S^77:SERVICE LOCATION;FA:FACILITY;LI:INDEPENDENT LAB;TL:TESTING LAB;^0;11^Q
"^DD",355.93,355.93,.11,3)
Enter a code to describe the type of facility for professional claims. Type Facility (FA) will automatically be sent on institutional claims.
"^DD",355.93,355.93,.11,21,0)
^^4^4^3070619^
"^DD",355.93,355.93,.11,21,1,0)
This is the code for the type of facility as identified in the X12
"^DD",355.93,355.93,.11,21,2,0)
documents.  It is used  to describe the type of facility for 
"^DD",355.93,355.93,.11,21,3,0)
professional claims. Facility (FA) will automatically be sent on
"^DD",355.93,355.93,.11,21,4,0)
institutional claims.
"^DD",355.93,355.93,.11,"DT")
3070619
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)

"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")

"^DD",364.5,364.5,0,"PT",364.7,.03)

"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.04^1
"^DD",364.5,364.5,.06,5,2,0)
364.5^.03^2
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")

"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.6,364.6,0)
FIELD^^.2^14
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3060627
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"IX","C",364.6,.1)

"^DD",364.6,364.6,0,"IX","GUS",364.6,.2)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.6,.2)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>30!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1
"^DD",364.6,364.6,.1,1,1,0)
364.6^C
"^DD",364.6,364.6,.1,1,1,1)
S ^IBA(364.6,"C",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.1,1,1,2)
K ^IBA(364.6,"C",$E(X,1,30),DA)
"^DD",364.6,364.6,.1,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.1,1,1,"%D",0)
^^1^1^2960123^
"^DD",364.6,364.6,.1,1,1,"%D",1,0)
Field name lookup
"^DD",364.6,364.6,.1,1,1,"DT")
2960123
"^DD",364.6,364.6,.1,3)
Answer must be 1-30 characters in length.
"^DD",364.6,364.6,.1,21,0)
^^2^2^2951207^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
2960123
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.6,364.6,.2,0)
NEW FORM DATA ELEMENT^P364.6'^IBA(364.6,^0;20^Q
"^DD",364.6,364.6,.2,1,0)
^.1
"^DD",364.6,364.6,.2,1,1,0)
364.6^GUS
"^DD",364.6,364.6,.2,1,1,1)
S ^IBA(364.6,"GUS",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.2,1,1,2)
K ^IBA(364.6,"GUS",$E(X,1,30),DA)
"^DD",364.6,364.6,.2,1,1,3)
Just a Temporary Field and Index file
"^DD",364.6,364.6,.2,1,1,"%D",0)
^^2^2^3060627^
"^DD",364.6,364.6,.2,1,1,"%D",1,0)
Just a temporary x-ref used to create the new forms.  Only for the 
"^DD",364.6,364.6,.2,1,1,"%D",2,0)
development account.
"^DD",364.6,364.6,.2,1,1,"DT")
3060627
"^DD",364.6,364.6,.2,21,0)
^^4^4^3060627^
"^DD",364.6,364.6,.2,21,1,0)
This is just a temporary field to help in the conversion from the
"^DD",364.6,364.6,.2,21,2,0)
HCFA-1500 and UB-92 forms to the new forms CMS-1500 and UB-04.  This is
"^DD",364.6,364.6,.2,21,3,0)
just a link from the old form data element to the new form data element
"^DD",364.6,364.6,.2,21,4,0)
if there is a link (old field copied into the new field).
"^DD",364.6,364.6,.2,"DT")
3060627
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DD",399,399,47,0)
VALUE CODE^399.047PA^^CV;0
"^DD",399,399,122,0)
PRIMARY PROVIDER #^FX^^M1;2^K:$L(X)>13!($L(X)<3)!($TR(X," ")="") X
"^DD",399,399,122,1,0)
^.1
"^DD",399,399,122,1,1,0)
^^TRIGGER^399^128
"^DD",399,399,122,1,1,1)
Q
"^DD",399,399,122,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,2)="" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" X ^DD(399,122,1,1,2.4)
"^DD",399,399,122,1,1,2.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,10)=DIV,DIH=399,DIG=128 D ^DICR
"^DD",399,399,122,1,1,"%D",0)
^^2^2^3060410^
"^DD",399,399,122,1,1,"%D",1,0)
This trigger will delete the PRIMARY ID QUALIFIER when the PRIMARY 
"^DD",399,399,122,1,1,"%D",2,0)
PROVIDER # is deleted
"^DD",399,399,122,1,1,"CREATE VALUE")
NO EFFECT
"^DD",399,399,122,1,1,"DELETE CONDITION")
PRIMARY PROVIDER #=""
"^DD",399,399,122,1,1,"DELETE VALUE")
@
"^DD",399,399,122,1,1,"FIELD")
PRIMARY ID QUALIFIER
"^DD",399,399,122,3)
Answer must be 3-13 characters in length.
"^DD",399,399,122,5,1,0)
399^101^1
"^DD",399,399,122,5,2,0)
399^.22^1
"^DD",399,399,122,21,0)
^^2^2^3070622^^^
"^DD",399,399,122,21,1,0)
This is the number assigned to the provider by the primary payer.
"^DD",399,399,122,21,2,0)
Printed in Form Locator 57 for the Primary Insurance Carrier on the UB-04.
"^DD",399,399,122,"DT")
3070622
"^DD",399,399,123,0)
SECONDARY PROVIDER #^FX^^M1;3^K:$L(X)>13!($L(X)<3)!($TR(X," ")="") X
"^DD",399,399,123,1,0)
^.1
"^DD",399,399,123,1,1,0)
^^TRIGGER^399^129
"^DD",399,399,123,1,1,1)
Q
"^DD",399,399,123,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,3)="" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" X ^DD(399,123,1,1,2.4)
"^DD",399,399,123,1,1,2.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,11)=DIV,DIH=399,DIG=129 D ^DICR
"^DD",399,399,123,1,1,"%D",0)
^^2^2^3060410^
"^DD",399,399,123,1,1,"%D",1,0)
This trigger will delete the SECONDARY ID QUALIFIER when the SECONDARY
"^DD",399,399,123,1,1,"%D",2,0)
PROVIDER # is deleted
"^DD",399,399,123,1,1,"CREATE VALUE")
NO EFFECT
"^DD",399,399,123,1,1,"DELETE CONDITION")
SECONDARY PROVIDER #=""
"^DD",399,399,123,1,1,"DELETE VALUE")
@
"^DD",399,399,123,1,1,"FIELD")
SECONDARY ID QUALIFIER
"^DD",399,399,123,3)
Answer must be 3-13 characters in length.
"^DD",399,399,123,5,1,0)
399^102^2
"^DD",399,399,123,5,2,0)
399^.22^2
"^DD",399,399,123,21,0)
^^3^3^3070116^
"^DD",399,399,123,21,1,0)
This is the number assigned to the provider by the secondary payer.
"^DD",399,399,123,21,2,0)
Printed in Form Locator 57 for the Secondary Insurance Carrier on the
"^DD",399,399,123,21,3,0)
UB-04.
"^DD",399,399,123,"DT")
3070622
"^DD",399,399,124,0)
TERTIARY PROVIDER #^FX^^M1;4^K:$L(X)>13!($L(X)<3)!($TR(X," ")="") X
"^DD",399,399,124,1,0)
^.1
"^DD",399,399,124,1,1,0)
^^TRIGGER^399^130
"^DD",399,399,124,1,1,1)
Q
"^DD",399,399,124,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,4)="" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" X ^DD(399,124,1,1,2.4)
"^DD",399,399,124,1,1,2.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,12)=DIV,DIH=399,DIG=130 D ^DICR
"^DD",399,399,124,1,1,"%D",0)
^^2^2^3060410^
"^DD",399,399,124,1,1,"%D",1,0)
This trigger will delete the TERTIARY ID QUALIFIER when the TERTIARY
"^DD",399,399,124,1,1,"%D",2,0)
PROVIDER # is deleted
"^DD",399,399,124,1,1,"CREATE VALUE")
NO EFFECT
"^DD",399,399,124,1,1,"DELETE CONDITION")
TERTIARY PROVIDER #=""
"^DD",399,399,124,1,1,"DELETE VALUE")
@
"^DD",399,399,124,1,1,"FIELD")
TERTIARY ID QUALIFIER
"^DD",399,399,124,3)
Answer must be 3-13 characters in length.
"^DD",399,399,124,5,1,0)
399^103^2
"^DD",399,399,124,5,2,0)
399^.22^3
"^DD",399,399,124,21,0)
^^3^3^3070116^
"^DD",399,399,124,21,1,0)
This is the number assigned to the provider by the tertiary payer.
"^DD",399,399,124,21,2,0)
Printed in Form Locator 57 for the Tertiary Insurance Carrier on the
"^DD",399,399,124,21,3,0)
UB-04.
"^DD",399,399,124,"DT")
3070622
"^DD",399,399,245,0)
LAST XRAY DATE^DX^^U3;4^S %DT="EX" D ^%DT S X=Y K:Y<1 X I $D(X) D CHDAT^IBCU4
"^DD",399,399,245,3)
Enter the last date the patient had an Xray  (for chiropractics only).
"^DD",399,399,245,21,0)
^.001^3^3^3070619^^^^
"^DD",399,399,245,21,1,0)
If an Xray was used to demonstrate a subluxation of the spine, enter the
"^DD",399,399,245,21,2,0)
date of the last Xray.
"^DD",399,399,245,21,3,0)
If an Xray date is entered, it will automatically print on CMS-1500.
"^DD",399,399,245,"DT")
3070619
"^DD",399,399,246,0)
DATE OF INITIAL TREATMENT^DX^^U3;5^S %DT="EX" D ^%DT S X=Y K:Y<1 X I $D(X) D CHDAT^IBCU4
"^DD",399,399,246,3)
Enter the date on which the chiropractic treatment began.
"^DD",399,399,246,21,0)
^.001^1^1^3070807^^
"^DD",399,399,246,21,1,0)
Date on which these treatments were started.
"^DD",399,399,246,"DT")
3070619
"^DD",399,399,247,0)
DATE OF ACUTE MANIFESTATION^DX^^U3;6^S %DT="EX" D ^%DT S X=Y K:Y<1 X I $D(X) D CHDAT^IBCU4
"^DD",399,399,247,3)
Enter the date on which the acute chiropractic condition began.
"^DD",399,399,247,21,0)
^.001^3^3^3070806^^^
"^DD",399,399,247,21,1,0)
If the Patient's Condition Code equals Acute Condition or Acute
"^DD",399,399,247,21,2,0)
Manifestation of a Chronic Condition, you must enter the date on which
"^DD",399,399,247,21,3,0)
the acute condition started.
"^DD",399,399,247,"DT")
3070619
"^DD",399,399,248,0)
PATIENT CONDITION CODE^S^A:Acute Condition;C:Chronic Condition;D:Non-acute Condition;E:Non-Life Threatening;F:Routine;G:Symptomatic;M:Acute Manifestation of a Chronic Condition;^U3;7^Q
"^DD",399,399,248,3)
Enter a code describing the chiropractic condition.
"^DD",399,399,248,21,0)
^.001^1^1^3070806^^^^
"^DD",399,399,248,21,1,0)
Enter one of the following required codes;
"^DD",399,399,248,"DT")
3070524
"^DD",399,399,402,0)
BILL REMARKS^F^^UF2;3^K:$L(X)>80!($L(X)<1) X
"^DD",399,399,402,3)
Answer must be 1-80 characters in length
"^DD",399,399,402,21,0)
^^8^8^3070808^
"^DD",399,399,402,21,1,0)
Enter up to 80 characters of free text which will print in FL-80.
"^DD",399,399,402,21,2,0)
 
"^DD",399,399,402,21,3,0)
FL-80 on the UB-04 claim form is a 4-line box.  Line 1 can hold a 
"^DD",399,399,402,21,4,0)
maximum of 19 characters after a mandatory 5 character indentation.  
"^DD",399,399,402,21,5,0)
Lines 2-4 can hold a maximum of 24 characters each.
"^DD",399,399,402,21,6,0)
 
"^DD",399,399,402,21,7,0)
The display of these remarks on billing screen 8 is exactly how
"^DD",399,399,402,21,8,0)
the remarks will appear on the printed claim form.
"^DD",399,399,402,23,0)
^^1^1^3070808^
"^DD",399,399,402,23,1,0)
This field is also transmitted via EDI in the UB1 segment, piece 21.
"^DD",399,399,402,"DT")
3070808
"^DD",399,399.0304,50.02,0)
*LAST XRAY DATE^D^^AUX;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,50.02,3)
This field is obsolete.
"^DD",399,399.0304,50.02,21,0)
^^1^1^3070806^
"^DD",399,399.0304,50.02,21,1,0)
This field has been deactivated and is not in use anymore.
"^DD",399,399.0304,50.02,"DT")
3070524
"^DD",399,399.0304,50.04,0)
*LEVEL OF SUBLUXATION^F^^AUX;4^K:$L(X)>7!($L(X)<2)!'(X?2.3E1"-"2.3E!(X?2.3E&(X'["-"))) X
"^DD",399,399.0304,50.04,3)
This field is obsolete.
"^DD",399,399.0304,50.04,21,0)
^.001^1^1^3070806^^^
"^DD",399,399.0304,50.04,21,1,0)
This field has been deactivated and is not in use anymore.
"^DD",399,399.0304,50.04,"DT")
3070525
"^DD",399,399.0304,50.05,0)
*CHIRO TREATMENT SERIES NUM^NJ5,0^^AUX;5^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1N.N) X
"^DD",399,399.0304,50.05,3)
This field is obsolete.
"^DD",399,399.0304,50.05,21,0)
^^1^1^3070525^
"^DD",399,399.0304,50.05,21,1,0)
This field has been deactivated and is not in use anymore.
"^DD",399,399.0304,50.05,"DT")
3070525
"^DD",399,399.0304,50.06,0)
*CHIROPRACTIC QUANTITY^NJ5,0^^AUX;6^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1N.N) X
"^DD",399,399.0304,50.06,3)
This field is obsolete.
"^DD",399,399.0304,50.06,21,0)
^^1^1^3070525^
"^DD",399,399.0304,50.06,21,1,0)
This field has been deactivated and is not in use anymore.
"^DD",399,399.0304,50.06,"DT")
3070525
"^DD",399,399.041,.04,0)
END DATE^RDX^^0;4^S %DT="EX" D ^%DT S X=Y K:X<1 X I $D(X),X<$P($G(^DGCR(399,DA(1),"OC",DA,0)),U,2) K X
"^DD",399,399.041,.04,3)
The end date is required and can not be before the start date.
"^DD",399,399.041,.04,21,0)
^^1^1^3070625^
"^DD",399,399.041,.04,21,1,0)
The end date is required and can not be before the start date.
"^DD",399,399.041,.04,"DT")
3070625
"^DD",399,399.047,0)
VALUE CODE SUB-FIELD^^.02^2
"^DD",399,399.047,0,"NM","VALUE CODE")

"^DD",399,399.047,.01,0)
VALUE CODE^M*P399.1'X^DGCR(399.1,^0;1^S DIC("S")="I +$P($G(^DGCR(399.1,+Y,0)),U,11),$$ALLOWVC^IBCVC(DA(1),+Y)" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",399,399.047,.01,1,0)
^.1^^-1
"^DD",399,399.047,.01,1,1,0)
399.047^B
"^DD",399,399.047,.01,1,1,1)
S ^DGCR(399,DA(1),"CV","B",$E(X,1,30),DA)=""
"^DD",399,399.047,.01,1,1,2)
K ^DGCR(399,DA(1),"CV","B",$E(X,1,30),DA)
"^DD",399,399.047,.01,3)
Enter a Value Code that applies to this bill.
"^DD",399,399.047,.01,4)

"^DD",399,399.047,.01,12)
Value Codes Only!
"^DD",399,399.047,.01,12.1)
S DIC("S")="I +$P($G(^DGCR(399.1,+Y,0)),U,11),$$ALLOWVC^IBCVC(DA(1),+Y)"
"^DD",399,399.047,.01,"DT")
3070927
"^DD",399,399.047,.02,0)
VALUE^FX^^0;2^K:$L(X)>10!($L(X)<1)!'$$FORMCHK^IBCVC(X,.DA) X
"^DD",399,399.047,.02,3)

"^DD",399,399.047,.02,4)
D HELP^IBCVC
"^DD",399,399.047,.02,"DT")
3070718
"^DD",399.1,399.1,.26,0)
VALUE CODE OBSOLETE DATE^D^^0;26^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",399.1,399.1,.26,3)
(No range limit on date)
"^DD",399.1,399.1,.26,"DT")
3070412
"^DD",399.1,399.1,1,0)
VALUE CODE HELP TEXT^399.11^^1;0
"^DD",399.1,399.11,0)
VALUE CODE HELP TEXT SUB-FIELD^^.01^1
"^DD",399.1,399.11,0,"DT")
3070406
"^DD",399.1,399.11,0,"NM","VALUE CODE HELP TEXT")

"^DD",399.1,399.11,0,"UP")
399.1
"^DD",399.1,399.11,.01,0)
VALUE CODE HELP TEXT^W^^0;1
"^DD",399.1,399.11,.01,21,0)
^^2^2^3070406^
"^DD",399.1,399.11,.01,21,1,0)
This field is for the help text specific to this value code.  It will be 
"^DD",399.1,399.11,.01,21,2,0)
used when adding value codes to the bill.
"^DD",399.1,399.11,.01,"DT")
3070406
"^DIC",350.8,350.8,0)
IB ERROR
"^DIC",350.8,350.8,0,"GL")
^IBE(350.8,
"^DIC",350.8,350.8,"%D",0)
^^11^11^2940214^^^^
"^DIC",350.8,350.8,"%D",1,0)
This file contains errors for billing functions.  It may be used by
"^DIC",350.8,350.8,"%D",2,0)
applications, IB or AR.  The normal format for a routine to return
"^DIC",350.8,350.8,"%D",3,0)
an error is to return the variable:
"^DIC",350.8,350.8,"%D",4,0)
  Y=1^... a successful event occured
"^DIC",350.8,350.8,"%D",5,0)
  Y=-1^error code[;error code;error code...]^additional text
"^DIC",350.8,350.8,"%D",6,0)
The error messages can be displayed by calling routine ^IBAERR.  If
"^DIC",350.8,350.8,"%D",7,0)
the error occurs in a tasked job ($D(ZTQUEUED)'=0) the routine will
"^DIC",350.8,350.8,"%D",8,0)
put the error message in a bulletin and post it to the group defined
"^DIC",350.8,350.8,"%D",9,0)
in the IB SITE PARAMETER FILE.
"^DIC",350.8,350.8,"%D",10,0)
 
"^DIC",350.8,350.8,"%D",11,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",350.8,"B","IB ERROR",350.8)

"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",6548,6)
^351
**END**
**END**
