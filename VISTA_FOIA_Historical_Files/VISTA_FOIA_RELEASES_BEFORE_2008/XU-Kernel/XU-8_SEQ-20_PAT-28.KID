Released XU*8*28 SEQ #20
Extracted from mail message
**KIDS**:XU*8.0*28^

**INSTALL NAME**
XU*8.0*28
"BLD",94,0)
XU*8.0*28^KERNEL^0^2960425^n
"BLD",94,1,0)
^^113^113^2960426^^^^
"BLD",94,1,1,0)
 This Kernel patch  contains the following features:
"BLD",94,1,2,0)

"BLD",94,1,3,0)
-KIDS will now correctly turn off Alpha/Beta testing for a package.
"BLD",94,1,4,0)
-The routine XQABTMP can be used to turn off Alpha/Beta testing for
"BLD",94,1,5,0)
 previously released packages that used KIDS.   i.e. Kernel 8.0,
"BLD",94,1,6,0)
 Radiology 4.5, Toolkit 7.3
"BLD",94,1,7,0)
-Build File Print now pages correctly when displaying the description.
"BLD",94,1,8,0)
-New function $$PATCH^XPDUTL(patch) checks if patch has been installed.
"BLD",94,1,9,0)
-The TYPE field in the OPTION file now contains B:Broker (Client/Server).
"BLD",94,1,10,0)
-A new field, PRE-TRANSPORTATION ROUTINE (#900), is in the BUILD file.
"BLD",94,1,11,0)
-Updates to routines and data dictionary to support the new security features
"BLD",94,1,12,0)
 of the RPC Broker.  This patch is a prerequisite to installing the released
"BLD",94,1,13,0)
 version 1.0 of the RPC Broker.  RPC Broker version 1.0 is scheduled to be
"BLD",94,1,14,0)
 released at the end of May, 1996, and will need to be installed to support
"BLD",94,1,15,0)
 the PCMM with a graphical interface.
"BLD",94,1,16,0)

"BLD",94,1,17,0)
 Please note: The sign-on project that was distributed with the RPC Broker
"BLD",94,1,18,0)
              Developer Preview Kit (version 1T11) will not function after
"BLD",94,1,19,0)
              this patch is installed.  The Preview Kit served the function
"BLD",94,1,20,0)
              of illustrating possible DHCP directions.  It was not intended
"BLD",94,1,21,0)
              for use in production environments.  We are providing this
"BLD",94,1,22,0)
              warning to you as an advisory.
"BLD",94,1,23,0)

"BLD",94,1,24,0)
===========================================================================
"BLD",94,1,25,0)
This patch should be installed during off-peak hours. Users can be on the
"BLD",94,1,26,0)
system, but no user should be using KIDS during the install of this patch.
"BLD",94,1,27,0)
MSM sites must manually move the routine XPDIJ to their other CPUs. KIDS
"BLD",94,1,28,0)
cannot automatically move this routine for you.  
"BLD",94,1,29,0)
===========================================================================
"BLD",94,1,30,0)
  
"BLD",94,1,31,0)
INSTALLATION:
"BLD",94,1,32,0)
  1.  These routines are usually mapped on systems that allow mapping,
"BLD",94,1,33,0)
      so you will need to disable mapping for the effected routines.
"BLD",94,1,34,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"BLD",94,1,35,0)
      option will load the KIDS package onto your system.
"BLD",94,1,36,0)
  3.  The patch has now been loaded into a Transport global on your
"BLD",94,1,37,0)
      system. You now need to use KIDS to install the Transport global.
"BLD",94,1,38,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"BLD",94,1,39,0)
      options:
"BLD",94,1,40,0)
         Print Transport Global
"BLD",94,1,41,0)
         Compare Transport Global to Current System
"BLD",94,1,42,0)
         Verify Checksums in Transport Global
"BLD",94,1,43,0)
         Backup a Transport Global
"BLD",94,1,44,0)
         Install Package(s)
"BLD",94,1,45,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"BLD",94,1,46,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"BLD",94,1,47,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ to your other
"BLD",94,1,48,0)
      CPUs.
"BLD",94,1,49,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"BLD",94,1,50,0)
 ====================================================================  
"BLD",94,1,51,0)
  
"BLD",94,1,52,0)
 ROUTINES:
"BLD",94,1,53,0)
   The second line of the routine now looks like:
"BLD",94,1,54,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"BLD",94,1,55,0)
 
"BLD",94,1,56,0)
 Name           Checksum        Patch List
"BLD",94,1,57,0)
 -----------------------------------------------------------
"BLD",94,1,58,0)
 XPDDP          12181499        21,28
"BLD",94,1,59,0)
 XPDIA          12064759        10,15,21,28
"BLD",94,1,60,0)
 XPDIJ          18206759        2,21,28
"BLD",94,1,61,0)
 XPDIP          8727472         15,21,28
"BLD",94,1,62,0)
 XPDIPM         1817853         21,28
"BLD",94,1,63,0)
 XPDIQ          6693337         21,28
"BLD",94,1,64,0)
 XPDT           17164426        2,10,28
"BLD",94,1,65,0)
 XPDUTL         2564737         21,28
"BLD",94,1,66,0)
 XQABLOAD       13951526        28
"BLD",94,1,67,0)
 XQABTMP        2221215         new
"BLD",94,1,68,0)
 XQCS           9069982         15,28
"BLD",94,1,69,0)
 XQSET          11570399        28
"BLD",94,1,70,0)
 XUSRB          2627976         11,16,28
"BLD",94,1,71,0)
 XUSRB1         9903269         new
"BLD",94,1,72,0)
 ============================================================================
"BLD",94,1,73,0)

"BLD",94,1,74,0)
 DATA DICTIONARY:  Partial DDs
"BLD",94,1,75,0)

"BLD",94,1,76,0)
  File: BUILD #9.6, Field: PRE-TRANSPORTATION ROUTINE #900.
"BLD",94,1,77,0)
    This field contains a [TAG^]ROUTINE that will be run during the
"BLD",94,1,78,0)
    transportation process for the Build.  This will allow a developer
"BLD",94,1,79,0)
    to populate the transport global using the variable XPDGREF.
"BLD",94,1,80,0)

"BLD",94,1,81,0)
  File: OPTION #19, Field: TYPE #4.
"BLD",94,1,82,0)
    This set of codes field has been updated to include the code
"BLD",94,1,83,0)
    B = Broker (Client/Server).    
"BLD",94,1,84,0)
 ===========================================================================
"BLD",94,1,85,0)

"BLD",94,1,86,0)
 FORMS:
"BLD",94,1,87,0)
  XPD EDIT BUILD      (File 9.6)
"BLD",94,1,88,0)
  Was change to add the field, PRE-TRANSPORTATION ROUTINE, to page 1.
"BLD",94,1,89,0)
 ============================================================================
"BLD",94,1,90,0)

"BLD",94,1,91,0)
 DOCUMENTATION:
"BLD",94,1,92,0)
  Developers can now put information in the KIDS Transport Global, which
"BLD",94,1,93,0)
 can be used by the Pre- or Post-install routines. KIDS will run the
"BLD",94,1,94,0)
 [TAG^]ROUTINE in the field  PRE-TRANSPORTATION ROUTINE during the transport
"BLD",94,1,95,0)
 process. This routine can use the variable XPDGREF to set nodes in the
"BLD",94,1,96,0)
 transport global.
"BLD",94,1,97,0)
 i.e.  S @XPDGREF@("My Namespace",1)="Information I need during install"
"BLD",94,1,98,0)

"BLD",94,1,99,0)
  During the install process, in the Pre- or Post-install routines, the
"BLD",94,1,100,0)
 developer can retrieve the data by using the same variable, XPDGREF. Since
"BLD",94,1,101,0)
 these nodes are part of the transport global, they will be removed when the
"BLD",94,1,102,0)
 install is completed.
"BLD",94,1,103,0)

"BLD",94,1,104,0)
  KIDS didn't turn off Alpha/Beta testing when the final version of a package
"BLD",94,1,105,0)
 was released. Because of this bug, Kernel 8.0 and Radiology 4.5 still have
"BLD",94,1,106,0)
 Alpha/Beta testing turned on.  You can run the routine XQABTMP to turn off
"BLD",94,1,107,0)
 testing for those packages.
"BLD",94,1,108,0)

"BLD",94,1,109,0)
  A new function is available to developers, $$PATCH^XPDUTL(patch) will return
"BLD",94,1,110,0)
 1 if patch was loaded on current system and 0 if it wasn't loaded. This
"BLD",94,1,111,0)
 function can be used in your Environment Check routine.
"BLD",94,1,112,0)
 i.e.  I '$$PATCH^XPDUTL("XU*8.0*28") W !,"You must install patch XU*8.0*28"
"BLD",94,1,113,0)

"BLD",94,4,0)
^9.64PA^19^2
"BLD",94,4,9.6,0)
9.6
"BLD",94,4,9.6,2,0)
^9.641^9.6^1
"BLD",94,4,9.6,2,9.6,0)
BUILD  (File-top level)
"BLD",94,4,9.6,2,9.6,1,0)
^9.6411^900^1
"BLD",94,4,9.6,2,9.6,1,900,0)
PRE-TRANSPORTATION ROUTINE
"BLD",94,4,9.6,222)
y^y^p^^^^n
"BLD",94,4,19,0)
19
"BLD",94,4,19,2,0)
^9.641^19^1
"BLD",94,4,19,2,19,0)
OPTION  (File-top level)
"BLD",94,4,19,2,19,1,0)
^9.6411^4^1
"BLD",94,4,19,2,19,1,4,0)
TYPE
"BLD",94,4,19,222)
y^y^p^^^^n
"BLD",94,4,"APDD",9.6,9.6)

"BLD",94,4,"APDD",9.6,9.6,900)

"BLD",94,4,"APDD",19,19)

"BLD",94,4,"APDD",19,19,4)

"BLD",94,4,"B",9.6,9.6)

"BLD",94,4,"B",19,19)

"BLD",94,"KRN",0)
^9.67PA^8994^15
"BLD",94,"KRN",.4,0)
.4
"BLD",94,"KRN",.401,0)
.401
"BLD",94,"KRN",.402,0)
.402
"BLD",94,"KRN",.403,0)
.403
"BLD",94,"KRN",.403,"NM",0)
^9.68A^1^1
"BLD",94,"KRN",.403,"NM",1,0)
XPD EDIT BUILD    FILE #9.6^9.6^0
"BLD",94,"KRN",.403,"NM","B","XPD EDIT BUILD    FILE #9.6",1)

"BLD",94,"KRN",.5,0)
.5
"BLD",94,"KRN",.84,0)
.84
"BLD",94,"KRN",3.6,0)
3.6
"BLD",94,"KRN",9.2,0)
9.2
"BLD",94,"KRN",9.8,0)
9.8
"BLD",94,"KRN",9.8,"NM",0)
^9.68A^14^14
"BLD",94,"KRN",9.8,"NM",1,0)
XQABTMP^^0^B3335020
"BLD",94,"KRN",9.8,"NM",2,0)
XPDIPM^^0^B3078379
"BLD",94,"KRN",9.8,"NM",3,0)
XPDIP^^0^B28400855
"BLD",94,"KRN",9.8,"NM",4,0)
XPDIA^^0^B44652877
"BLD",94,"KRN",9.8,"NM",5,0)
XPDIJ^^0^B67545793
"BLD",94,"KRN",9.8,"NM",6,0)
XPDT^^0^B45135570
"BLD",94,"KRN",9.8,"NM",7,0)
XPDDP^^0^B29716202
"BLD",94,"KRN",9.8,"NM",8,0)
XPDIQ^^0^B13452708
"BLD",94,"KRN",9.8,"NM",9,0)
XQABLOAD^^0^B20716428
"BLD",94,"KRN",9.8,"NM",10,0)
XQCS^^0^B24112928
"BLD",94,"KRN",9.8,"NM",11,0)
XQSET^^0^B17550216
"BLD",94,"KRN",9.8,"NM",12,0)
XUSRB^^0^B6095154
"BLD",94,"KRN",9.8,"NM",13,0)
XUSRB1^^0^B20393718
"BLD",94,"KRN",9.8,"NM",14,0)
XPDUTL^^0^B10805086
"BLD",94,"KRN",9.8,"NM","B","XPDDP",7)

"BLD",94,"KRN",9.8,"NM","B","XPDIA",4)

"BLD",94,"KRN",9.8,"NM","B","XPDIJ",5)

"BLD",94,"KRN",9.8,"NM","B","XPDIP",3)

"BLD",94,"KRN",9.8,"NM","B","XPDIPM",2)

"BLD",94,"KRN",9.8,"NM","B","XPDIQ",8)

"BLD",94,"KRN",9.8,"NM","B","XPDT",6)

"BLD",94,"KRN",9.8,"NM","B","XPDUTL",14)

"BLD",94,"KRN",9.8,"NM","B","XQABLOAD",9)

"BLD",94,"KRN",9.8,"NM","B","XQABTMP",1)

"BLD",94,"KRN",9.8,"NM","B","XQCS",10)

"BLD",94,"KRN",9.8,"NM","B","XQSET",11)

"BLD",94,"KRN",9.8,"NM","B","XUSRB",12)

"BLD",94,"KRN",9.8,"NM","B","XUSRB1",13)

"BLD",94,"KRN",19,0)
19
"BLD",94,"KRN",19.1,0)
19.1
"BLD",94,"KRN",101,0)
101
"BLD",94,"KRN",409.61,0)
409.61
"BLD",94,"KRN",8994,0)
8994
"BLD",94,"KRN",8995,0)
8995
"BLD",94,"KRN","B",.4,.4)

"BLD",94,"KRN","B",.401,.401)

"BLD",94,"KRN","B",.402,.402)

"BLD",94,"KRN","B",.403,.403)

"BLD",94,"KRN","B",.5,.5)

"BLD",94,"KRN","B",.84,.84)

"BLD",94,"KRN","B",3.6,3.6)

"BLD",94,"KRN","B",9.2,9.2)

"BLD",94,"KRN","B",9.8,9.8)

"BLD",94,"KRN","B",19,19)

"BLD",94,"KRN","B",19.1,19.1)

"BLD",94,"KRN","B",101,101)

"BLD",94,"KRN","B",409.61,409.61)

"BLD",94,"KRN","B",8994,8994)

"BLD",94,"KRN","B",8995,8995)

"BLD",94,"QUES",0)
^9.62^^
"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^y^p^^^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.6,900)

"FIA",19)
OPTION
"FIA",19,0)
^DIC(19,
"FIA",19,0,0)
19I
"FIA",19,0,1)
y^y^p^^^^n
"FIA",19,0,10)

"FIA",19,0,11)

"FIA",19,0,"RLRO")

"FIA",19,0,"VR")
8.0^XU
"FIA",19,19)
1
"FIA",19,19,4)

"KRN",.403,40,-1)
0^1
"KRN",.403,40,0)
XPD EDIT BUILD^#^^^2931104^^^9.6^0^0^1
"KRN",.403,40,40,0)
^.4031I^15^15
"KRN",.403,40,40,1,0)
1^^1,1^4
"KRN",.403,40,40,1,1)
Page 1
"KRN",.403,40,40,1,40,0)
^.4032PI^125^2
"KRN",.403,40,40,1,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,1,40,125,0)
XPD EDIT BUILD1^2^1,1^e
"KRN",.403,40,40,2,0)
2^^1,1^14^4
"KRN",.403,40,40,2,1)
Page 2
"KRN",.403,40,40,2,12)

"KRN",.403,40,40,2,40,0)
^.4032PI^154^3
"KRN",.403,40,40,2,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,2,40,126,0)
XPD EDIT BUILD2^2^1,1^e
"KRN",.403,40,40,2,40,154,0)
XPD EDIT BUILD30^3^5,1^e
"KRN",.403,40,40,2,40,154,2)
12^^f^1
"KRN",.403,40,40,3,0)
3^^5,1^^^1^17,79
"KRN",.403,40,40,3,1)
Kernel File^1,3,2
"KRN",.403,40,40,3,40,0)
^.4032PI^132^2
"KRN",.403,40,40,3,40,127,0)
XPD EDIT BUILD3^1^3,2^e
"KRN",.403,40,40,3,40,127,2)
9^^n
"KRN",.403,40,40,3,40,132,0)
XPD EDIT BUILD31^2^1,2^d
"KRN",.403,40,40,4,0)
4^^1,1^2^1
"KRN",.403,40,40,4,1)
File^
"KRN",.403,40,40,4,40,0)
^.4032PI^156^3
"KRN",.403,40,40,4,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,4,40,155,0)
XPD EDIT BUILD40^2^5,1^e
"KRN",.403,40,40,4,40,155,2)
12^^n
"KRN",.403,40,40,4,40,156,0)
XPD EDIT BUILD41^3^1,1^d
"KRN",.403,40,40,5,0)
5^^6,3^^^1^17,77
"KRN",.403,40,40,5,1)
Record Merge^2,2,8
"KRN",.403,40,40,5,40,0)
^.4032PI^129^1
"KRN",.403,40,40,5,40,129,0)
XPD EDIT BUILD5^1^1,3^e
"KRN",.403,40,40,6,0)
6^^1,1^^^1^17,79
"KRN",.403,40,40,6,1)
Install Questions^4,2,2
"KRN",.403,40,40,6,40,0)
^.4032PI^131^1
"KRN",.403,40,40,6,40,131,0)
XPD EDIT BUILD7^1^2,2^e
"KRN",.403,40,40,7,0)
7^^5,1^^^1^17,78
"KRN",.403,40,40,7,1)
Entries^
"KRN",.403,40,40,7,40,0)
^.4032PI^128^1
"KRN",.403,40,40,7,40,128,0)
XPD EDIT BUILD4^2^1,1^e
"KRN",.403,40,40,8,0)
8^^5,2^1^2^1^15,78
"KRN",.403,40,40,8,1)
Package file
"KRN",.403,40,40,8,11)

"KRN",.403,40,40,8,40,0)
^.4032PI^164^3
"KRN",.403,40,40,8,40,130,0)
XPD EDIT BUILD6^2^3,2^e
"KRN",.403,40,40,8,40,130,1)
1
"KRN",.403,40,40,8,40,135,0)
XPD EDIT BUILD8^3^8,2^e
"KRN",.403,40,40,8,40,164,0)
XPD EDIT BUILD60^4^1,2^d
"KRN",.403,40,40,9,0)
9^^4,3^^^1^16,77
"KRN",.403,40,40,9,1)
Page 9
"KRN",.403,40,40,9,12)

"KRN",.403,40,40,9,40,0)
^.4032PI^246^2
"KRN",.403,40,40,9,40,136,0)
XPD EDIT BUILD9^1^1,2^e
"KRN",.403,40,40,9,40,246,0)
XPD EDIT BUILD9A^2^8,2^e
"KRN",.403,40,40,9,40,246,2)
4
"KRN",.403,40,40,10,0)
10^^5,4^^^1^9,76
"KRN",.403,40,40,10,1)
A/B namespace^4,1,9
"KRN",.403,40,40,10,11)

"KRN",.403,40,40,10,12)

"KRN",.403,40,40,10,40,0)
^.4032PI^247^2
"KRN",.403,40,40,10,40,137,0)
XPD EDIT BUILD10^1^1,3^e
"KRN",.403,40,40,10,40,247,0)
XPD EDIT BUILD10A^2^2,2^e
"KRN",.403,40,40,10,40,247,2)
2
"KRN",.403,40,40,11,0)
11^^6,2^^^1^16,77
"KRN",.403,40,40,11,1)
Sub DD
"KRN",.403,40,40,11,40,0)
^.4032PI^159^2
"KRN",.403,40,40,11,40,157,0)
XPD EDIT BUILD42^1^2,3^e
"KRN",.403,40,40,11,40,157,2)
6^!IEN^n^^
"KRN",.403,40,40,11,40,159,0)
XPD EDIT BUILD44^2^1,3^d
"KRN",.403,40,40,12,0)
12^^7,3^^^1^15,76
"KRN",.403,40,40,12,1)
Sub Field
"KRN",.403,40,40,12,40,0)
^.4032PI^160^2
"KRN",.403,40,40,12,40,158,0)
XPD EDIT BUILD43^1^2,3^e
"KRN",.403,40,40,12,40,158,2)
6^!IEN^n
"KRN",.403,40,40,12,40,160,0)
XPD EDIT BUILD45^2^1,2^d
"KRN",.403,40,40,13,0)
13^^6,2^^^1^16,77
"KRN",.403,40,40,13,1)
Page 13
"KRN",.403,40,40,13,40,0)
^.4032PI^161^1
"KRN",.403,40,40,13,40,161,0)
XPD EDIT BUILD46^1^1,1^e
"KRN",.403,40,40,14,0)
14^^1,1^^2
"KRN",.403,40,40,14,1)
Page 14
"KRN",.403,40,40,14,40,0)
^.4032PI^163^3
"KRN",.403,40,40,14,40,124,0)
XPD EDIT BUILD HDR^1^1,1^d
"KRN",.403,40,40,14,40,162,0)
XPD EDIT BUILD11^4^1,1^e
"KRN",.403,40,40,14,40,163,0)
XPD EDIT BUILD12^2^5,1^e
"KRN",.403,40,40,14,40,163,2)
6^^n
"KRN",.403,40,40,15,0)
15^^2,1^^^1^17,79
"KRN",.403,40,40,15,1)
Install questions
"KRN",.403,40,40,15,40,0)
^.4032PI^131^1
"KRN",.403,40,40,15,40,131,0)
XPD EDIT BUILD7^1^1,1^e
"KRN",.404,124,0)
XPD EDIT BUILD HDR^9.6
"KRN",.404,124,40,0)
^.4044I^4^4
"KRN",.404,124,40,1,0)
1^Edit a Build^1^
"KRN",.404,124,40,1,2)
^^1,28^
"KRN",.404,124,40,2,0)
2^Name^3^
"KRN",.404,124,40,2,1)
.01
"KRN",.404,124,40,2,2)
2,7^30^2,1
"KRN",.404,124,40,2,4)
^^^1
"KRN",.404,124,40,3,0)
3^PAGE   OF 4^1^
"KRN",.404,124,40,3,2)
^^1,66^
"KRN",.404,124,40,4,0)
4^!M^1^
"KRN",.404,124,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,124,40,4,2)
^^3,1^
"KRN",.404,125,0)
XPD EDIT BUILD1^9.6
"KRN",.404,125,12)

"KRN",.404,125,40,0)
^.4044I^14^8
"KRN",.404,125,40,1,0)
2^Name^3^
"KRN",.404,125,40,1,1)
.01
"KRN",.404,125,40,1,2)
5,29^50^5,23
"KRN",.404,125,40,5,0)
5^Environment Check Routine^3^
"KRN",.404,125,40,5,1)
913
"KRN",.404,125,40,5,2)
11,29^8^11,2
"KRN",.404,125,40,6,0)
7^Post-Install Routine^3^
"KRN",.404,125,40,6,1)
914
"KRN",.404,125,40,6,2)
15,29^17^15,7
"KRN",.404,125,40,7,0)
6^Pre-Install Routine^3^
"KRN",.404,125,40,7,1)
916
"KRN",.404,125,40,7,2)
13,29^17^13,8
"KRN",.404,125,40,11,0)
4^Description^3^
"KRN",.404,125,40,11,1)
3
"KRN",.404,125,40,11,2)
9,29^1^9,16
"KRN",.404,125,40,12,0)
1^1^1^
"KRN",.404,125,40,12,2)
^^1,71^
"KRN",.404,125,40,13,0)
3^Date Distributed^3
"KRN",.404,125,40,13,1)
.02
"KRN",.404,125,40,13,2)
7,29^11^7,11
"KRN",.404,125,40,14,0)
8^Pre-Transportation Routine^3
"KRN",.404,125,40,14,1)
900
"KRN",.404,125,40,14,2)
17,29^17^17,1
"KRN",.404,126,0)
XPD EDIT BUILD2^9.6
"KRN",.404,126,12)

"KRN",.404,126,40,0)
^.4044I^2^2
"KRN",.404,126,40,1,0)
99^3^1^
"KRN",.404,126,40,1,2)
^^1,71^
"KRN",.404,126,40,2,0)
2^Build Components^1^
"KRN",.404,126,40,2,2)
^^4,28^1
"KRN",.404,127,0)
XPD EDIT BUILD3^9.68
"KRN",.404,127,40,0)
^.4044I^2^2
"KRN",.404,127,40,1,0)
1^^3^
"KRN",.404,127,40,1,1)
.01
"KRN",.404,127,40,1,2)
1,2^45
"KRN",.404,127,40,2,0)
2^^3
"KRN",.404,127,40,2,1)
.03
"KRN",.404,127,40,2,2)
1,50^26
"KRN",.404,127,40,2,3)
SEND TO SITE
"KRN",.404,127,40,2,4)
1
"KRN",.404,128,0)
XPD EDIT BUILD4^9.64
"KRN",.404,128,40,0)
^.4044I^18^7
"KRN",.404,128,40,1,0)
1^ DD Export Options ^1^
"KRN",.404,128,40,1,2)
^^1,27^1
"KRN",.404,128,40,2,0)
2^File^3^
"KRN",.404,128,40,2,1)
.01
"KRN",.404,128,40,2,2)
3,30^45^3,24
"KRN",.404,128,40,7,0)
7^Data Comes With File...^3^
"KRN",.404,128,40,7,1)
222.7
"KRN",.404,128,40,7,2)
12,33^3^12,8
"KRN",.404,128,40,7,3)
NO
"KRN",.404,128,40,7,10)
S:X="y" DDSSTACK=13
"KRN",.404,128,40,7,13)
D:X="y" PUT^DDSVAL(DIE,.DA,222.3,"f","","I")
"KRN",.404,128,40,13,0)
6^Screen to Determine DD Update^3
"KRN",.404,128,40,13,1)
223
"KRN",.404,128,40,13,2)
10,2^76^9,2^1
"KRN",.404,128,40,14,0)
5^Send Security Code^3
"KRN",.404,128,40,14,1)
222.2
"KRN",.404,128,40,14,2)
7,62^3^7,42
"KRN",.404,128,40,14,3)
YES
"KRN",.404,128,40,16,0)
4^Update the Data Dictionary^3
"KRN",.404,128,40,16,1)
222.1
"KRN",.404,128,40,16,2)
7,30^3^7,2
"KRN",.404,128,40,16,3)
YES
"KRN",.404,128,40,18,0)
3^Send Full or Partial DD...^3
"KRN",.404,128,40,18,1)
222.3
"KRN",.404,128,40,18,2)
5,33^7^5,5
"KRN",.404,128,40,18,3)
FULL
"KRN",.404,128,40,18,10)
S:X="p" DDSSTACK=11
"KRN",.404,128,40,18,13)
D:X="p" PUT^DDSVAL(DIE,.DA,222.7,"n","","I")
"KRN",.404,129,0)
XPD EDIT BUILD5^9.402
"KRN",.404,129,40,0)
^.4044I^4^4
"KRN",.404,129,40,1,0)
1^ Affects Record Merge ^1^
"KRN",.404,129,40,1,2)
^^1,23^1
"KRN",.404,129,40,2,0)
2^File Affected^3^
"KRN",.404,129,40,2,1)
.01
"KRN",.404,129,40,2,2)
3,16^45^3,1
"KRN",.404,129,40,3,0)
3^Name of Merge Routine^3^
"KRN",.404,129,40,3,1)
3
"KRN",.404,129,40,3,2)
5,24^8^5,1
"KRN",.404,129,40,4,0)
4^Record has Package Data^3^
"KRN",.404,129,40,4,1)
4
"KRN",.404,129,40,4,2)
10,1^70^8,21^1
"KRN",.404,130,0)
XPD EDIT BUILD6^9.4
"KRN",.404,130,11)
I $G(XPDBR) S DDSBR="COM" K XPDBR
"KRN",.404,130,40,0)
^.4044I^5^2
"KRN",.404,130,40,2,0)
2^Select Affects Record Merge^3^
"KRN",.404,130,40,2,1)
20
"KRN",.404,130,40,2,2)
5,31^30^5,2
"KRN",.404,130,40,2,7)
^
"KRN",.404,130,40,2,10)

"KRN",.404,130,40,5,0)
1^Primary Help Frame^3
"KRN",.404,130,40,5,1)
12
"KRN",.404,130,40,5,2)
3,31^30^3,11
"KRN",.404,131,0)
XPD EDIT BUILD7^9.62
"KRN",.404,131,40,0)
^.4044I^10^10
"KRN",.404,131,40,1,0)
2^Name^3^
"KRN",.404,131,40,1,1)
.01
"KRN",.404,131,40,1,2)
2,12^30^2,6
"KRN",.404,131,40,2,0)
3^DIR(0)^3^
"KRN",.404,131,40,2,1)
1
"KRN",.404,131,40,2,2)
4,12^65^4,4
"KRN",.404,131,40,3,0)
4^DIR(A)^3^
"KRN",.404,131,40,3,1)
2
"KRN",.404,131,40,3,2)
6,12^65^6,4
"KRN",.404,131,40,4,0)
5^DIR(A,#)^3^
"KRN",.404,131,40,4,1)
3
"KRN",.404,131,40,4,2)
7,12^1^7,2
"KRN",.404,131,40,5,0)
6^DIR(B)^3^
"KRN",.404,131,40,5,1)
4
"KRN",.404,131,40,5,2)
9,12^65^9,4
"KRN",.404,131,40,6,0)
7^DIR(?)^3^
"KRN",.404,131,40,6,1)
5
"KRN",.404,131,40,6,2)
11,12^65^11,4
"KRN",.404,131,40,7,0)
8^DIR(?,#)^3^
"KRN",.404,131,40,7,1)
6
"KRN",.404,131,40,7,2)
12,12^1^12,2
"KRN",.404,131,40,8,0)
9^DIR(??)^3^
"KRN",.404,131,40,8,1)
7
"KRN",.404,131,40,8,2)
13,12^64^13,3
"KRN",.404,131,40,9,0)
10^M Code^3
"KRN",.404,131,40,9,1)
10
"KRN",.404,131,40,9,2)
15,12^65^15,4
"KRN",.404,131,40,10,0)
1^ Install Questions ^1^
"KRN",.404,131,40,10,2)
^^1,27^1
"KRN",.404,132,0)
XPD EDIT BUILD31^9.67
"KRN",.404,132,40,0)
^.4044I^1^1
"KRN",.404,132,40,1,0)
1^!M^1^
"KRN",.404,132,40,1,.1)
S Y=" "_$P($G(^DIC(D1,0)),U)_" "
"KRN",.404,132,40,1,2)
^^1,27^
"KRN",.404,135,0)
XPD EDIT BUILD8^9.6
"KRN",.404,135,11)

"KRN",.404,135,40,0)
^.4044I^1^1
"KRN",.404,135,40,1,0)
1^Alpha/Beta Testing...^3
"KRN",.404,135,40,1,1)
20
"KRN",.404,135,40,1,2)
2,31^3^2,8
"KRN",.404,135,40,1,3)
NO
"KRN",.404,135,40,1,10)
S:X="y" DDSSTACK="9"
"KRN",.404,136,0)
XPD EDIT BUILD9^9.6
"KRN",.404,136,40,0)
^.4044I^5^4
"KRN",.404,136,40,1,0)
2^Installation Message^3
"KRN",.404,136,40,1,1)
21
"KRN",.404,136,40,1,2)
3,30^3^3,8
"KRN",.404,136,40,1,3)
NO
"KRN",.404,136,40,2,0)
3^Address for Usage Reporting^3
"KRN",.404,136,40,2,1)
22
"KRN",.404,136,40,2,2)
5,30^44^5,1
"KRN",.404,136,40,4,0)
1^ Alpha/Beta Testing ^1^
"KRN",.404,136,40,4,2)
^^1,26^1
"KRN",.404,136,40,5,0)
4^Package Namespace or Prefix:^1
"KRN",.404,136,40,5,2)
^^7,1
"KRN",.404,137,0)
XPD EDIT BUILD10^9.66
"KRN",.404,137,40,0)
^.4044I^1^1
"KRN",.404,137,40,1,0)
1^ Exclude Namespace or Prefix ^1
"KRN",.404,137,40,1,2)
^^1,20^1
"KRN",.404,154,0)
XPD EDIT BUILD30^9.67
"KRN",.404,154,40,0)
^.4044I^2^2
"KRN",.404,154,40,1,0)
1^^3
"KRN",.404,154,40,1,1)
.01
"KRN",.404,154,40,1,2)
2,1^24
"KRN",.404,154,40,1,4)
^^^2
"KRN",.404,154,40,1,10)
S DDSSTACK=3
"KRN",.404,154,40,1,14)

"KRN",.404,154,40,2,0)
2^^4
"KRN",.404,154,40,2,2)
2,27^5
"KRN",.404,154,40,2,4)
^^1
"KRN",.404,154,40,2,30)
S Y="("_+$P($G(^XPD(9.6,DA(1),"KRN",DA,"NM",0)),U,4)_")"
"KRN",.404,155,0)
XPD EDIT BUILD40^9.64
"KRN",.404,155,40,0)
^.4044I^1^1
"KRN",.404,155,40,1,0)
1^^3
"KRN",.404,155,40,1,1)
.01
"KRN",.404,155,40,1,2)
2,7^45
"KRN",.404,155,40,1,10)
S DDSSTACK=7
"KRN",.404,156,0)
XPD EDIT BUILD41^9.6
"KRN",.404,156,40,0)
^.4044I^3^2
"KRN",.404,156,40,1,0)
1^2^1^
"KRN",.404,156,40,1,2)
^^1,71^
"KRN",.404,156,40,3,0)
2^File List  (Name or Number)^1
"KRN",.404,156,40,3,2)
^^4,28^1
"KRN",.404,157,0)
XPD EDIT BUILD42^9.641
"KRN",.404,157,40,0)
^.4044I^1^1
"KRN",.404,157,40,1,0)
1^^3
"KRN",.404,157,40,1,1)
.01
"KRN",.404,157,40,1,2)
1,1^45
"KRN",.404,157,40,1,10)
S DDSSTACK=12
"KRN",.404,158,0)
XPD EDIT BUILD43^9.6411
"KRN",.404,158,40,0)
^.4044I^1^1
"KRN",.404,158,40,1,0)
1^^3
"KRN",.404,158,40,1,1)
.01
"KRN",.404,158,40,1,2)
1,1^45
"KRN",.404,159,0)
XPD EDIT BUILD44^9.64
"KRN",.404,159,40,0)
^.4044I^1^1
"KRN",.404,159,40,1,0)
1^ Data Dictionary Number ^1^
"KRN",.404,159,40,1,2)
^^1,24^1
"KRN",.404,160,0)
XPD EDIT BUILD45^9.641
"KRN",.404,160,40,0)
^.4044I^1^1
"KRN",.404,160,40,1,0)
1^ Field Number ^1^
"KRN",.404,160,40,1,2)
^^1,24^1
"KRN",.404,161,0)
XPD EDIT BUILD46^9.64
"KRN",.404,161,40,0)
^.4044I^7^6
"KRN",.404,161,40,1,0)
1^ Data Export Options ^1^
"KRN",.404,161,40,1,2)
^^1,29^1
"KRN",.404,161,40,2,0)
2^Site's Data^3
"KRN",.404,161,40,2,1)
222.8
"KRN",.404,161,40,2,2)
3,21^15^3,8
"KRN",.404,161,40,2,3)
OVERWRITE
"KRN",.404,161,40,3,0)
5^Data List^3
"KRN",.404,161,40,3,1)
222.6
"KRN",.404,161,40,3,2)
7,21^30^7,10
"KRN",.404,161,40,4,0)
3^Resolve Pointers^3
"KRN",.404,161,40,4,1)
222.5
"KRN",.404,161,40,4,2)
5,21^3^5,3
"KRN",.404,161,40,4,3)
NO
"KRN",.404,161,40,5,0)
4^May User Override Data Update^3
"KRN",.404,161,40,5,1)
222.9
"KRN",.404,161,40,5,2)
5,68^3^5,37
"KRN",.404,161,40,5,3)
NO
"KRN",.404,161,40,7,0)
6^Screen to Select Data^3
"KRN",.404,161,40,7,1)
224
"KRN",.404,161,40,7,2)
10,3^72^9,3^1
"KRN",.404,162,0)
XPD EDIT BUILD11^9.6
"KRN",.404,162,40,0)
^.4044I^4^4
"KRN",.404,162,40,1,0)
1^4^1^
"KRN",.404,162,40,1,2)
^^1,71^
"KRN",.404,162,40,2,0)
3^Package File Link...^3
"KRN",.404,162,40,2,1)
1
"KRN",.404,162,40,2,2)
15,27^30^15,5
"KRN",.404,162,40,2,10)
S:X]"" DDSSTACK=8
"KRN",.404,162,40,3,0)
4^Track Package Nationally^3
"KRN",.404,162,40,3,1)
5
"KRN",.404,162,40,3,2)
17,27^3^17,1
"KRN",.404,162,40,3,3)
NO
"KRN",.404,162,40,3,10)

"KRN",.404,162,40,3,11)
S:$$GET^DDSVAL(DIE,.DA,1)="" DDSBR="^^COM"
"KRN",.404,162,40,4,0)
2^Install Questions^1^
"KRN",.404,162,40,4,2)
^^4,28^1
"KRN",.404,163,0)
XPD EDIT BUILD12^9.62
"KRN",.404,163,40,0)
^.4044I^1^1
"KRN",.404,163,40,1,0)
1^^3
"KRN",.404,163,40,1,1)
.01
"KRN",.404,163,40,1,2)
2,3^30
"KRN",.404,163,40,1,10)
S DDSSTACK=15
"KRN",.404,164,0)
XPD EDIT BUILD60^9.6
"KRN",.404,164,40,0)
^.4044I^3^3
"KRN",.404,164,40,1,0)
1^ Edit PACKAGE File ^1^
"KRN",.404,164,40,1,2)
^^1,26^1
"KRN",.404,164,40,2,0)
2^Name^3
"KRN",.404,164,40,2,1)
.01
"KRN",.404,164,40,2,2)
2,8^30^2,2
"KRN",.404,164,40,3,0)
3^!M^1^
"KRN",.404,164,40,3,.1)
S $P(Y,"-",76)=""
"KRN",.404,164,40,3,2)
^^3,1^
"KRN",.404,246,0)
XPD EDIT BUILD9A^9.66
"KRN",.404,246,40,0)
^.4044I^1^1
"KRN",.404,246,40,1,0)
1^^3
"KRN",.404,246,40,1,1)
.01
"KRN",.404,246,40,1,2)
2,2^4
"KRN",.404,246,40,1,10)
S DDSSTACK=10
"KRN",.404,247,0)
XPD EDIT BUILD10A^9.661
"KRN",.404,247,40,0)
^.4044I^1^1
"KRN",.404,247,40,1,0)
1^^3
"KRN",.404,247,40,1,1)
.01
"KRN",.404,247,40,1,2)
1,2^4
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"PKG",283,-1)
1^1
"PKG",283,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",283,22,0)
^9.49I^1^1
"PKG",283,22,1,0)
8.0^2950729^2950729^6
"PKG",283,22,1,"PAH",1,0)
28^2960425
"PKG",283,22,1,"PAH",1,1,0)
^^113^113^2960426
"PKG",283,22,1,"PAH",1,1,1,0)
 This Kernel patch  contains the following features:
"PKG",283,22,1,"PAH",1,1,2,0)

"PKG",283,22,1,"PAH",1,1,3,0)
-KIDS will now correctly turn off Alpha/Beta testing for a package.
"PKG",283,22,1,"PAH",1,1,4,0)
-The routine XQABTMP can be used to turn off Alpha/Beta testing for
"PKG",283,22,1,"PAH",1,1,5,0)
 previously released packages that used KIDS.   i.e. Kernel 8.0,
"PKG",283,22,1,"PAH",1,1,6,0)
 Radiology 4.5, Toolkit 7.3
"PKG",283,22,1,"PAH",1,1,7,0)
-Build File Print now pages correctly when displaying the description.
"PKG",283,22,1,"PAH",1,1,8,0)
-New function $$PATCH^XPDUTL(patch) checks if patch has been installed.
"PKG",283,22,1,"PAH",1,1,9,0)
-The TYPE field in the OPTION file now contains B:Broker (Client/Server).
"PKG",283,22,1,"PAH",1,1,10,0)
-A new field, PRE-TRANSPORTATION ROUTINE (#900), is in the BUILD file.
"PKG",283,22,1,"PAH",1,1,11,0)
-Updates to routines and data dictionary to support the new security features
"PKG",283,22,1,"PAH",1,1,12,0)
 of the RPC Broker.  This patch is a prerequisite to installing the released
"PKG",283,22,1,"PAH",1,1,13,0)
 version 1.0 of the RPC Broker.  RPC Broker version 1.0 is scheduled to be
"PKG",283,22,1,"PAH",1,1,14,0)
 released at the end of May, 1996, and will need to be installed to support
"PKG",283,22,1,"PAH",1,1,15,0)
 the PCMM with a graphical interface.
"PKG",283,22,1,"PAH",1,1,16,0)

"PKG",283,22,1,"PAH",1,1,17,0)
 Please note: The sign-on project that was distributed with the RPC Broker
"PKG",283,22,1,"PAH",1,1,18,0)
              Developer Preview Kit (version 1T11) will not function after
"PKG",283,22,1,"PAH",1,1,19,0)
              this patch is installed.  The Preview Kit served the function
"PKG",283,22,1,"PAH",1,1,20,0)
              of illustrating possible DHCP directions.  It was not intended
"PKG",283,22,1,"PAH",1,1,21,0)
              for use in production environments.  We are providing this
"PKG",283,22,1,"PAH",1,1,22,0)
              warning to you as an advisory.
"PKG",283,22,1,"PAH",1,1,23,0)

"PKG",283,22,1,"PAH",1,1,24,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,25,0)
This patch should be installed during off-peak hours. Users can be on the
"PKG",283,22,1,"PAH",1,1,26,0)
system, but no user should be using KIDS during the install of this patch.
"PKG",283,22,1,"PAH",1,1,27,0)
MSM sites must manually move the routine XPDIJ to their other CPUs. KIDS
"PKG",283,22,1,"PAH",1,1,28,0)
cannot automatically move this routine for you.  
"PKG",283,22,1,"PAH",1,1,29,0)
===========================================================================
"PKG",283,22,1,"PAH",1,1,30,0)
  
"PKG",283,22,1,"PAH",1,1,31,0)
INSTALLATION:
"PKG",283,22,1,"PAH",1,1,32,0)
  1.  These routines are usually mapped on systems that allow mapping,
"PKG",283,22,1,"PAH",1,1,33,0)
      so you will need to disable mapping for the effected routines.
"PKG",283,22,1,"PAH",1,1,34,0)
  2.  Use the 'INSTALL/CHECK MESSAGE' option on the PackMan menu. This
"PKG",283,22,1,"PAH",1,1,35,0)
      option will load the KIDS package onto your system.
"PKG",283,22,1,"PAH",1,1,36,0)
  3.  The patch has now been loaded into a Transport global on your
"PKG",283,22,1,"PAH",1,1,37,0)
      system. You now need to use KIDS to install the Transport global.
"PKG",283,22,1,"PAH",1,1,38,0)
  4.  On the KIDS menu, under the 'Installation' menu, use the following
"PKG",283,22,1,"PAH",1,1,39,0)
      options:
"PKG",283,22,1,"PAH",1,1,40,0)
         Print Transport Global
"PKG",283,22,1,"PAH",1,1,41,0)
         Compare Transport Global to Current System
"PKG",283,22,1,"PAH",1,1,42,0)
         Verify Checksums in Transport Global
"PKG",283,22,1,"PAH",1,1,43,0)
         Backup a Transport Global
"PKG",283,22,1,"PAH",1,1,44,0)
         Install Package(s)
"PKG",283,22,1,"PAH",1,1,45,0)
  5.  MSM Sites - Answer YES to the question 'Want to MOVE routines to
"PKG",283,22,1,"PAH",1,1,46,0)
      other CPUs?'. Enter the names of your Compute and Print server(s).
"PKG",283,22,1,"PAH",1,1,47,0)
  6.  MSM Sites - D ^%RCOPY to move the routine XPDIJ to your other
"PKG",283,22,1,"PAH",1,1,48,0)
      CPUs.
"PKG",283,22,1,"PAH",1,1,49,0)
  7.  AXP Sites, after patch has installed, rebuild your map set.
"PKG",283,22,1,"PAH",1,1,50,0)
 ====================================================================  
"PKG",283,22,1,"PAH",1,1,51,0)
  
"PKG",283,22,1,"PAH",1,1,52,0)
 ROUTINES:
"PKG",283,22,1,"PAH",1,1,53,0)
   The second line of the routine now looks like:
"PKG",283,22,1,"PAH",1,1,54,0)
       ;;8.0;KERNEL;**[patch list]**;Jul 10, 1995
"PKG",283,22,1,"PAH",1,1,55,0)
 
"PKG",283,22,1,"PAH",1,1,56,0)
 Name           Checksum        Patch List
"PKG",283,22,1,"PAH",1,1,57,0)
 -----------------------------------------------------------
"PKG",283,22,1,"PAH",1,1,58,0)
 XPDDP          12181499        21,28
"PKG",283,22,1,"PAH",1,1,59,0)
 XPDIA          12064759        10,15,21,28
"PKG",283,22,1,"PAH",1,1,60,0)
 XPDIJ          18206759        2,21,28
"PKG",283,22,1,"PAH",1,1,61,0)
 XPDIP          8727472         15,21,28
"PKG",283,22,1,"PAH",1,1,62,0)
 XPDIPM         1817853         21,28
"PKG",283,22,1,"PAH",1,1,63,0)
 XPDIQ          6693337         21,28
"PKG",283,22,1,"PAH",1,1,64,0)
 XPDT           17164426        2,10,28
"PKG",283,22,1,"PAH",1,1,65,0)
 XPDUTL         2564737         21,28
"PKG",283,22,1,"PAH",1,1,66,0)
 XQABLOAD       13951526        28
"PKG",283,22,1,"PAH",1,1,67,0)
 XQABTMP        2221215         new
"PKG",283,22,1,"PAH",1,1,68,0)
 XQCS           9069982         15,28
"PKG",283,22,1,"PAH",1,1,69,0)
 XQSET          11570399        28
"PKG",283,22,1,"PAH",1,1,70,0)
 XUSRB          2627976         11,16,28
"PKG",283,22,1,"PAH",1,1,71,0)
 XUSRB1         9903269         new
"PKG",283,22,1,"PAH",1,1,72,0)
 ============================================================================
"PKG",283,22,1,"PAH",1,1,73,0)

"PKG",283,22,1,"PAH",1,1,74,0)
 DATA DICTIONARY:  Partial DDs
"PKG",283,22,1,"PAH",1,1,75,0)

"PKG",283,22,1,"PAH",1,1,76,0)
  File: BUILD #9.6, Field: PRE-TRANSPORTATION ROUTINE #900.
"PKG",283,22,1,"PAH",1,1,77,0)
    This field contains a [TAG^]ROUTINE that will be run during the
"PKG",283,22,1,"PAH",1,1,78,0)
    transportation process for the Build.  This will allow a developer
"PKG",283,22,1,"PAH",1,1,79,0)
    to populate the transport global using the variable XPDGREF.
"PKG",283,22,1,"PAH",1,1,80,0)

"PKG",283,22,1,"PAH",1,1,81,0)
  File: OPTION #19, Field: TYPE #4.
"PKG",283,22,1,"PAH",1,1,82,0)
    This set of codes field has been updated to include the code
"PKG",283,22,1,"PAH",1,1,83,0)
    B = Broker (Client/Server).    
"PKG",283,22,1,"PAH",1,1,84,0)
 ===========================================================================
"PKG",283,22,1,"PAH",1,1,85,0)

"PKG",283,22,1,"PAH",1,1,86,0)
 FORMS:
"PKG",283,22,1,"PAH",1,1,87,0)
  XPD EDIT BUILD      (File 9.6)
"PKG",283,22,1,"PAH",1,1,88,0)
  Was change to add the field, PRE-TRANSPORTATION ROUTINE, to page 1.
"PKG",283,22,1,"PAH",1,1,89,0)
 ============================================================================
"PKG",283,22,1,"PAH",1,1,90,0)

"PKG",283,22,1,"PAH",1,1,91,0)
 DOCUMENTATION:
"PKG",283,22,1,"PAH",1,1,92,0)
  Developers can now put information in the KIDS Transport Global, which
"PKG",283,22,1,"PAH",1,1,93,0)
 can be used by the Pre- or Post-install routines. KIDS will run the
"PKG",283,22,1,"PAH",1,1,94,0)
 [TAG^]ROUTINE in the field  PRE-TRANSPORTATION ROUTINE during the transport
"PKG",283,22,1,"PAH",1,1,95,0)
 process. This routine can use the variable XPDGREF to set nodes in the
"PKG",283,22,1,"PAH",1,1,96,0)
 transport global.
"PKG",283,22,1,"PAH",1,1,97,0)
 i.e.  S @XPDGREF@("My Namespace",1)="Information I need during install"
"PKG",283,22,1,"PAH",1,1,98,0)

"PKG",283,22,1,"PAH",1,1,99,0)
  During the install process, in the Pre- or Post-install routines, the
"PKG",283,22,1,"PAH",1,1,100,0)
 developer can retrieve the data by using the same variable, XPDGREF. Since
"PKG",283,22,1,"PAH",1,1,101,0)
 these nodes are part of the transport global, they will be removed when the
"PKG",283,22,1,"PAH",1,1,102,0)
 install is completed.
"PKG",283,22,1,"PAH",1,1,103,0)

"PKG",283,22,1,"PAH",1,1,104,0)
  KIDS didn't turn off Alpha/Beta testing when the final version of a package
"PKG",283,22,1,"PAH",1,1,105,0)
 was released. Because of this bug, Kernel 8.0 and Radiology 4.5 still have
"PKG",283,22,1,"PAH",1,1,106,0)
 Alpha/Beta testing turned on.  You can run the routine XQABTMP to turn off
"PKG",283,22,1,"PAH",1,1,107,0)
 testing for those packages.
"PKG",283,22,1,"PAH",1,1,108,0)

"PKG",283,22,1,"PAH",1,1,109,0)
  A new function is available to developers, $$PATCH^XPDUTL(patch) will return
"PKG",283,22,1,"PAH",1,1,110,0)
 1 if patch was loaded on current system and 0 if it wasn't loaded. This
"PKG",283,22,1,"PAH",1,1,111,0)
 function can be used in your Environment Check routine.
"PKG",283,22,1,"PAH",1,1,112,0)
 i.e.  I '$$PATCH^XPDUTL("XU*8.0*28") W !,"You must install patch XU*8.0*28"
"PKG",283,22,1,"PAH",1,1,113,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","XPDDP")
0^7^B29716202
"RTN","XPDDP",1,0)
XPDDP ;SFISC/RSD - Display a package ;04/16/96  12:47
"RTN","XPDDP",2,0)
 ;;8.0;KERNEL;**21,28**;Jul 05, 1995
"RTN","XPDDP",3,0)
EN1 ;print from Build file
"RTN","XPDDP",4,0)
 N DIC,D0,XPD,Y,Z
"RTN","XPDDP",5,0)
 S DIC="^XPD(9.6,",DIC(0)="AEMQZ" D ^DIC Q:Y'>0
"RTN","XPDDP",6,0)
 S D0=+Y,XPD("D0")="",Y="PNT^XPDDP(""XPD(9.6,D0)"")",Z="Build File Print"
"RTN","XPDDP",7,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",8,0)
 Q
"RTN","XPDDP",9,0)
EN2 ;print from Distribution
"RTN","XPDDP",10,0)
 N D0,DIC,POP,XPD,XPDA,XPDNM,Y,Z,%ZIS
"RTN","XPDDP",11,0)
 S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDP",12,0)
 D ^DIC Q:Y<0
"RTN","XPDDP",13,0)
 S XPD("D0")="",XPD("XPDA")="",XPDA=+Y,Y="PNT^XPDDP(""XTMP(""""XPDI"""",XPDA,""""BLD"""",D0)"")",Z="Transport Global Print",D0=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDDP",14,0)
 Q:'D0
"RTN","XPDDP",15,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDP",16,0)
 Q
"RTN","XPDDP",17,0)
 ;
"RTN","XPDDP",18,0)
PNT(XPDGR) ;print a package, XPDGR=global root
"RTN","XPDDP",19,0)
 ;XPDFL=0 - Build - ^XPD(9.7 global root, 1 - Install - ^XTMP global root
"RTN","XPDDP",20,0)
 ;2 - Packman ^TMP($J, global root
"RTN","XPDDP",21,0)
 N I,J,K,X,XPD,XPDDT,XPDI,XPD0,XPDFL,XPDPG,XPDUL
"RTN","XPDDP",22,0)
 Q:$G(XPDGR)=""  S XPDGR="^"_XPDGR
"RTN","XPDDP",23,0)
 Q:'$D(@XPDGR@(0))  S XPD0=^(0),XPDPG=1,XPDFL=$S($E(XPDGR,1,5)="^TMP(":2,1:$E(XPDGR,1,5)="^XTMP"),$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDP",24,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR W XPDUL,!
"RTN","XPDDP",25,0)
 W "NATIONAL PACKAGE: ",$P($G(^DIC(9.4,+$P(XPD0,U,2),0),$P(XPD0,U,2)),U)
"RTN","XPDDP",26,0)
 W !,"DESCRIPTION:",!
"RTN","XPDDP",27,0)
 S XPDI=0 F  S XPDI=$O(@XPDGR@(1,XPDI)) Q:'XPDI  I $D(^(XPDI,0)) W ^(0),! Q:$$CHK(4)
"RTN","XPDDP",28,0)
 Q:$D(DIRUT)
"RTN","XPDDP",29,0)
 W !,"ENVIRONMENT CHECK : ",$G(@XPDGR@("PRE")),!," PRE-INIT ROUTINE : ",$G(@XPDGR@("INI")),!
"RTN","XPDDP",30,0)
 Q:$$CHK(4)  W "POST-INIT ROUTINE : ",$G(@XPDGR@("INIT")),!,"PRE-TRANSPORT RTN : ",$G(@XPDGR@("PRET")),!
"RTN","XPDDP",31,0)
 I '$O(@XPDGR@(4,0)) Q:$$CHK(4)  G COMP
"RTN","XPDDP",32,0)
 S I=$$CHK(10,1) Q:I  I '$P(I,"^",2) W !! D HDR1 W XPDUL,!
"RTN","XPDDP",33,0)
PNT2 S XPDI=0 F  S XPDI=$O(@XPDGR@(4,XPDI)) Q:'XPDI  S XPD=$G(^(XPDI,222)) Q:$$CHK(4,1)  D
"RTN","XPDDP",34,0)
 .;file number, file name, partial DD
"RTN","XPDDP",35,0)
 .W !,XPDI,?12,$S('XPDFL:$P(^DIC(XPDI,0),U),1:$G(^XTMP("XPDI",XPDA,"FIA",XPDI)))
"RTN","XPDDP",36,0)
 .W ?41,$$EXTERNAL^DILFD(9.64,222.1,"",$P(XPD,U)),?47,$$EXTERNAL^DILFD(9.64,222.2,"",$P(XPD,U,2)),?53,$$EXTERNAL^DILFD(9.64,222.7,"",$P(XPD,U,7))
"RTN","XPDDP",37,0)
 .W ?60,$E($$EXTERNAL^DILFD(9.64,222.8,"",$P(XPD,U,8)),1,4),?67,$$EXTERNAL^DILFD(9.64,222.5,"",$P(XPD,U,5)),?73,$$EXTERNAL^DILFD(9.64,222.9,"",$P(XPD,U,9)),!
"RTN","XPDDP",38,0)
 .;print partial DD information
"RTN","XPDDP",39,0)
 .I $P(XPD,U,3)="p" S J=0 D
"RTN","XPDDP",40,0)
 ..W "Partial DD:"
"RTN","XPDDP",41,0)
 ..F  S J=$O(@XPDGR@(4,"APDD",XPDI,J)) Q:'J  W ?12,"subDD: ",J D  Q:$$CHK(4,1)
"RTN","XPDDP",42,0)
 ...I '$O(@XPDGR@(4,"APDD",XPDI,J,0)) W ! Q
"RTN","XPDDP",43,0)
 ...S I=0 F  S I=$O(@XPDGR@(4,"APDD",XPDI,J,I)) Q:'I  W ?30,"fld: ",I,!
"RTN","XPDDP",44,0)
 .I $D(@XPDGR@(4,XPDI,223)) W ?2,"DD SCREEN  : ",^(223),!
"RTN","XPDDP",45,0)
 .I $D(@XPDGR@(4,XPDI,224)) W ?2,"DATA SCREEN: ",^(224),!
"RTN","XPDDP",46,0)
COMP Q:$D(DIRUT)  W ! Q:$$CHK(3)  S I=0,XPD=$P(^DD(9.68,.03,0),U,3)
"RTN","XPDDP",47,0)
 ;print build components
"RTN","XPDDP",48,0)
 F  S I=$O(@XPDGR@("KRN",I)),K=0,J="" Q:$D(DIRUT)!'I  F  S J=$O(@XPDGR@("KRN",I,"NM","B",J)) Q:J=""  S X=$O(^(J,0)) Q:$$CHK(4)  D:X
"RTN","XPDDP",49,0)
 .S X=$G(@XPDGR@("KRN",I,"NM",X,0)) Q:X=""
"RTN","XPDDP",50,0)
 .;K is flag to write type of component
"RTN","XPDDP",51,0)
 .I 'K W !,$S($D(^DIC(I,0)):$P(^(0),U),XPDFL:$G(^XTMP("XPDI",XPDA,"FIA",I),"UNKNOWN"),1:"UNKNOWN")_":",! S K=1
"RTN","XPDDP",52,0)
 .;write the entry name and write the action
"RTN","XPDDP",53,0)
 .W ?3,$P(X,U),?50,$P($P(XPD,";",$P(X,U,3)+1),":",2),!
"RTN","XPDDP",54,0)
 Q:XPDFL=2
"RTN","XPDDP",55,0)
 ;XPDFL=2 this is a Packman message, called from XMP2 - Summarize
"RTN","XPDDP",56,0)
 ;XPDFL=1 this is a Install, the call backs are already Build Components
"RTN","XPDDP",57,0)
 I XPDFL=1 S I=0 D:$O(^XTMP("XPDI",XPDA,"KRN",8995.8,0))
"RTN","XPDDP",58,0)
 .W !,"WINDOW CALL BACK",!
"RTN","XPDDP",59,0)
 .F  S I=$O(^XTMP("XPDI",XPDA,"KRN",8995.8,I)) Q:'I!$$CHK(4)  S X=$P(^(I,0),U) W ?3,X,?50,"SEND TO SITE",!
"RTN","XPDDP",60,0)
 ;'XPDFL this is a Build, need to get call backs
"RTN","XPDDP",61,0)
 I 'XPDFL D CB
"RTN","XPDDP",62,0)
 Q:$D(DIRUT)  Q:$$CHK(3)  W !,"INSTALL QUESTIONS: " S I=0
"RTN","XPDDP",63,0)
 F  S I=$O(@XPDGR@("QUES",I)) Q:'I  S X=$P(^(I,0),U),J=$G(^(1)),K=$G(^("A")) Q:$$CHK(5)  D
"RTN","XPDDP",64,0)
 .W !?5,"SUBSCIRPT: ",X,!,"DIR(0)=",J W:K]"" !,"DIR(""A"")=",K,!
"RTN","XPDDP",65,0)
 .F J=1:1 Q:'$D(@XPDGR@("QUES",I,"A1",J,0))  W "DIR(""A"",",J,")=",^(0),!
"RTN","XPDDP",66,0)
 .I $G(@XPDGR@("QUES",I,"B"))]"" W "DIR(""B"")=",^("B"),!
"RTN","XPDDP",67,0)
 .I $G(@XPDGR@("QUES",I,"Q"))]"" W "DIR(""?"")=",^("Q"),!
"RTN","XPDDP",68,0)
 .F J=1:1 Q:'$D(@XPDGR@("QUES",I,"Q1",J,0))  W "DIR(""?"",",J,")=",^(0),!
"RTN","XPDDP",69,0)
 .I $G(@XPDGR@("QUES",I,"QQ"))]"" W "DIR(""??"")=",^("QQ"),!
"RTN","XPDDP",70,0)
 .I $G(@XPDGR@("QUES",I,"M"))]"" W "M CODE: ",^("M"),!
"RTN","XPDDP",71,0)
 Q:$D(DIRUT)  Q:$$CHK(3)
"RTN","XPDDP",72,0)
 I $L($G(@XPDGR@("ABPKG"))) S XPD=^("ABPKG") D
"RTN","XPDDP",73,0)
 .W !,"ALPHA/BETA TESTING:",$$EXTERNAL^DILFD(9.6,20,"",$P(XPD,U)),?40,"INSTALLATION MESSAGE: ",$$EXTERNAL^DILFD(9.6,21,"",$P(XPD,U,2))
"RTN","XPDDP",74,0)
 .W !,"ADDRESS: ",$P(XPD,U,3),!!,"INCLUDE NAMESPACE",?30,"EXCLUDE NAMESPACE" S I=0
"RTN","XPDDP",75,0)
 .F  S I=$O(@XPDGR@("ABNS",I)),J=0 Q:'I  W !?5,^(I,0) F  S J=$O(@XPDGR@("ABNS",I,1,J)) Q:'J  W ?35,^(J,0),! Q:$$CHK(3)
"RTN","XPDDP",76,0)
 Q
"RTN","XPDDP",77,0)
CB ;call backs
"RTN","XPDDP",78,0)
 K ^TMP($J,"XPD")
"RTN","XPDDP",79,0)
 S I=""
"RTN","XPDDP",80,0)
 ;I=window object name, J=ien in window object file
"RTN","XPDDP",81,0)
 F  S I=$O(@XPDGR@("KRN",8995,"NM","B",I)) Q:I=""!$D(DIRUT)  D
"RTN","XPDDP",82,0)
 .S J=$O(^XTV(8995,"B",I,0)) Q:'J
"RTN","XPDDP",83,0)
 .D CBENV($NA(^XTV(8995,J,1)))
"RTN","XPDDP",84,0)
 .;loop thru 2=ASSOCIATED OBJECTS (2;0)
"RTN","XPDDP",85,0)
 .S K=0 F  S K=$O(^XTV(8995,J,2,K)) Q:'K  S X=$G(^(K,0)) D CBENV($NA(^XTV(8995,J,2,K,1)))
"RTN","XPDDP",86,0)
 .;loop thru 3=MENU ITEM (3;0)
"RTN","XPDDP",87,0)
 .S K=0 F  S K=$O(^XTV(8995,J,3,K)) Q:'K  S X=$G(^(K,0)) D:$P(X,U,4)
"RTN","XPDDP",88,0)
 ..;^TMP($J,"XPD") will be used to get all call backs
"RTN","XPDDP",89,0)
 ..S X=$$PT^XPDTA("^XTV(8995.8)",$P(X,U,4)) S:$L(X) ^TMP($J,"XPD",X)=""
"RTN","XPDDP",90,0)
 I $L($O(^TMP($J,"XPD",""))) W !,"WINDOW CALL BACK",! D
"RTN","XPDDP",91,0)
 .S I="" F  S I=$O(^TMP($J,"XPD",I)) Q:I=""!$$CHK(4)  W ?3,I,?50,"SEND TO SITE",!
"RTN","XPDDP",92,0)
 K ^TMP($J,"XPD")
"RTN","XPDDP",93,0)
 Q
"RTN","XPDDP",94,0)
 ;this code is taken from GUIEV^XPDTA1
"RTN","XPDDP",95,0)
CBENV(X) ;resolve events & call backs, X=Global root
"RTN","XPDDP",96,0)
 N %,%1
"RTN","XPDDP",97,0)
 ;loop thru 1=EVENTS (1;0)
"RTN","XPDDP",98,0)
 S %=0 F  S %=$O(@X@(%)) Q:'%  S %1=$G(^(%,0)) D:$P(%1,U,2)
"RTN","XPDDP",99,0)
 .;resolve CALL BACK USED (0;2) ^TMP($J,"XPD") will be used to get all call backs
"RTN","XPDDP",100,0)
 .S %1=$$PT^XPDTA("^XTV(8995.8)",$P(%1,U,2)) S:$L(%1) ^TMP($J,"XPD",%1)=""
"RTN","XPDDP",101,0)
 Q
"RTN","XPDDP",102,0)
 ;return 0 if header was not written, else "0^1"
"RTN","XPDDP",103,0)
CHK(Y,XPD) ;Y=excess lines XPD=1 print file header, return 1 to exit
"RTN","XPDDP",104,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDP",105,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDP",106,0)
 .N DIR,I,J,K,X
"RTN","XPDDP",107,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDP",108,0)
 S XPD=$G(XPD),XPDPG=XPDPG+1
"RTN","XPDDP",109,0)
 W @IOF D HDR,HDR1:XPD
"RTN","XPDDP",110,0)
 W XPDUL,!
"RTN","XPDDP",111,0)
 Q "0^1"
"RTN","XPDDP",112,0)
 ;
"RTN","XPDDP",113,0)
XMP2(X,D0) ;called from ^XMP2
"RTN","XPDDP",114,0)
 N XPDA S XPDA=-1
"RTN","XPDDP",115,0)
 D PNT(X) Q
"RTN","XPDDP",116,0)
 ;
"RTN","XPDDP",117,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!
"RTN","XPDDP",118,0)
 Q
"RTN","XPDDP",119,0)
HDR1 W ?41,"UP",?47,"SEND",?53,"DATA",?73,"USER",!,?41,"DATE",?47,"SEC.",?53,"COMES",?60,"SITE",?67,"RSLV",?73,"OVER"
"RTN","XPDDP",120,0)
 W !,"FILE #",?12,"NAME",?41,"DD",?47,"CODE",?53,"W/FILE",?60,"DATA",?67,"PTS",?73,"RIDE",!
"RTN","XPDDP",121,0)
 Q
"RTN","XPDIA")
0^4^B44652877
"RTN","XPDIA",1,0)
XPDIA ;SFISC/RSD - Install Pre/Post Actions for Kernel Files ;04/18/96  11:27
"RTN","XPDIA",2,0)
 ;;8.0;KERNEL;**10,15,21,28**;Jul 10, 1995
"RTN","XPDIA",3,0)
 Q
"RTN","XPDIA",4,0)
OPTF1 ;options file pre
"RTN","XPDIA",5,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",6,0)
 Q
"RTN","XPDIA",7,0)
OPTE1 ;options entry pre
"RTN","XPDIA",8,0)
 N %,I
"RTN","XPDIA",9,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",10,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",11,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",19,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",19,OLDA,10)
"RTN","XPDIA",12,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",13,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",14,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",15,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",16,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",17,0)
 .D ADD^XQOO1($P(XPDSET,U,2),19,DA)
"RTN","XPDIA",18,0)
 S I=^XTMP("XPDI",XPDA,"KRN",19,OLDA,0),%=^DIC(19,DA,0)
"RTN","XPDIA",19,0)
 ;$P(%,U,3)=out of order message, if exist set it back
"RTN","XPDIA",20,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",21,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",22,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",23,0)
 ;if there is no reverse key, save the old key and flag
"RTN","XPDIA",24,0)
 I $P($G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3)),U)="",$L($P($G(^DIC(19,DA,3)),U)) S $P(I,U,16)=$P(%,U,16),$P(^XTMP("XPDI",XPDA,"KRN",19,OLDA,3),U)=$P(^(3),U)
"RTN","XPDIA",25,0)
 S ^XTMP("XPDI",XPDA,"KRN",19,OLDA,0)=I
"RTN","XPDIA",26,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",27,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",19,OLDA,1,0)) ^DIC(19,DA,1)
"RTN","XPDIA",28,0)
 ;kill old RCPs (RPC)
"RTN","XPDIA",29,0)
 K ^DIC(19,DA,"RPC")
"RTN","XPDIA",30,0)
 ;if Menu Text, (U;1) is different, kill C x-ref
"RTN","XPDIA",31,0)
 S I=$G(^DIC(19,DA,"U")) I I]"",I'=$G(^XTMP("XPDI",XPDA,"KRN",19,OLDA,"U")) K ^DIC(19,"C",I)
"RTN","XPDIA",32,0)
 S I=0
"RTN","XPDIA",33,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",34,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",35,0)
 ;the file post action as a relink
"RTN","XPDIA",36,0)
 Q:XPDFL=3
"RTN","XPDIA",37,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",38,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",39,0)
 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^DIC(19,"AD",%,DA,I)
"RTN","XPDIA",40,0)
 ;kill Menus (10)
"RTN","XPDIA",41,0)
 K ^DIC(19,DA,10)
"RTN","XPDIA",42,0)
 Q
"RTN","XPDIA",43,0)
OPTF2 ;options file post
"RTN","XPDIA",44,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",45,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",46,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",47,0)
 .;if use as link then goto OPTFL, just update menus
"RTN","XPDIA",48,0)
 .G:ACT=2 OPTFL
"RTN","XPDIA",49,0)
 .;repoint Bulletin (220;1) and Mail Group (220;3)
"RTN","XPDIA",50,0)
 .S Y0=$G(^DIC(19,DA,220)) I Y0]"" S $P(Y0,U)=$$LK("^XMB(3.6)",$P(Y0,U)),$P(Y0,U,3)=$$LK("^XMB(3.8)",$P(Y0,U,3)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",51,0)
 .;repoint Windows (24;1)
"RTN","XPDIA",52,0)
 .S Y0=$G(^DIC(19,DA,24)) I Y0]"" S $P(Y0,U)=$$LK("^XTV(8995)",$P(Y0,U)),^DIC(19,DA,220)=Y0
"RTN","XPDIA",53,0)
 .;repoint RPC (RPC;1)
"RTN","XPDIA",54,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,"RPC",I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",55,0)
 ..S Y=$$LK("^XWB(8994)",Y0)
"RTN","XPDIA",56,0)
 ..I 'Y K ^DIC(19,DA,"RPC",I) D BMES^XPDUTL(" RPC "_Y0_" in Option "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",57,0)
 ..S $P(^DIC(19,DA,"RPC",I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",58,0)
 .S:X $P(^DIC(19,DA,"RPC",0),U,3,4)=X
"RTN","XPDIA",59,0)
 .;repoint Package (0;12) and Help Frame (0;7)
"RTN","XPDIA",60,0)
 .S Y0=^DIC(19,DA,0),$P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),$P(Y0,U,7)=$$LK("^DIC(9.2)",$P(Y0,U,7)),^DIC(19,DA,0)=Y0
"RTN","XPDIA",61,0)
OPTFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",62,0)
 .;merged, they could also be linked menu, but treat like merge
"RTN","XPDIA",63,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",64,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",65,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",66,0)
 .S (I,X)=0 F  S I=$O(^DIC(19,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",67,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",68,0)
 ...S Y=$$LK("^DIC(19)",Y0)
"RTN","XPDIA",69,0)
 ...K ^DIC(19,DA,10,I,U)
"RTN","XPDIA",70,0)
 ...I 'Y K ^DIC(19,DA,10,I) D BMES^XPDUTL(" Option "_Y0_" in Menu "_$P(^DIC(19,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",71,0)
 ...S $P(^DIC(19,DA,10,I,0),U)=Y
"RTN","XPDIA",72,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",73,0)
 .S:X $P(^DIC(19,DA,10,0),U,3,4)=X
"RTN","XPDIA",74,0)
 .;re-index this option
"RTN","XPDIA",75,0)
 .D IX1^DIK
"RTN","XPDIA",76,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",77,0)
 Q
"RTN","XPDIA",78,0)
OPTDEL ;option delete
"RTN","XPDIA",79,0)
 D DEL("^DIC(19,",DUZ)
"RTN","XPDIA",80,0)
 D OPT^XPDIA2
"RTN","XPDIA",81,0)
 Q
"RTN","XPDIA",82,0)
PROF1 ;protocols file pre
"RTN","XPDIA",83,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",84,0)
 Q
"RTN","XPDIA",85,0)
PROE1 ;protocols entry pre
"RTN","XPDIA",86,0)
 N %,I
"RTN","XPDIA",87,0)
 S ^TMP($J,"XPD",DA)=XPDFL
"RTN","XPDIA",88,0)
 ;if Menu linking or merge save menu mult. and process in FPOS code
"RTN","XPDIA",89,0)
 I XPDFL>1 M ^TMP($J,"XPD",DA,10)=^XTMP("XPDI",XPDA,"KRN",101,OLDA,10) K ^XTMP("XPDI",XPDA,"KRN",101,OLDA,10)
"RTN","XPDIA",90,0)
 ;if Menu link, XPDQUIT prevents data merge
"RTN","XPDIA",91,0)
 I XPDFL=2 S XPDQUIT=1 Q
"RTN","XPDIA",92,0)
 ;if this is new to the site then disable and quit
"RTN","XPDIA",93,0)
 I $P(Y,U,3) D:XPDSET  Q
"RTN","XPDIA",94,0)
 .S $P(^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),U,3)=$P(XPDSET,U,3)
"RTN","XPDIA",95,0)
 .D ADD^XQOO1($P(XPDSET,U,2),101,DA)
"RTN","XPDIA",96,0)
 S I=^XTMP("XPDI",XPDA,"KRN",101,OLDA,0),%=^ORD(101,DA,0)
"RTN","XPDIA",97,0)
 ;$P(%,U,3)=disable message, if exist set it back
"RTN","XPDIA",98,0)
 S $P(I,U,3)=$P(%,U,3)
"RTN","XPDIA",99,0)
 ;if there is no new Security Key, save the old Key
"RTN","XPDIA",100,0)
 S:$P(I,U,6)="" $P(I,U,6)=$P(%,U,6)
"RTN","XPDIA",101,0)
 S ^XTMP("XPDI",XPDA,"KRN",101,OLDA,0)=I
"RTN","XPDIA",102,0)
 ;if there is a new Description, kill the old Description
"RTN","XPDIA",103,0)
 K:$O(^XTMP("XPDI",XPDA,"KRN",101,OLDA,1,0)) ^ORD(101,DA,1)
"RTN","XPDIA",104,0)
 ;kill old ACCESS multiple
"RTN","XPDIA",105,0)
 K ^ORD(101,DA,3) S I=0
"RTN","XPDIA",106,0)
 ;XPDFL=3-merge menu items, Quit
"RTN","XPDIA",107,0)
 ;the new menu items have already been saved into ^TMP, will restore in
"RTN","XPDIA",108,0)
 ;the file post action as a relink
"RTN","XPDIA",109,0)
 Q:XPDFL=3
"RTN","XPDIA",110,0)
 ;we are replacing menu items, kill the old.
"RTN","XPDIA",111,0)
 ;loop thru and kill "AD" x-ref., it will be reset with new options
"RTN","XPDIA",112,0)
 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S %=+$G(^(I,0)) K:% ^ORD(101,"AD",%,DA,I)
"RTN","XPDIA",113,0)
 K ^ORD(101,DA,10)
"RTN","XPDIA",114,0)
 Q
"RTN","XPDIA",115,0)
PROF2 ;protocols file post
"RTN","XPDIA",116,0)
 N ACT,DA,DIK,I,X,Y,Y0
"RTN","XPDIA",117,0)
 ;loop thru all the new incomming options
"RTN","XPDIA",118,0)
 S DA=0,DIK=DIC F  S DA=$O(^TMP($J,"XPD",DA)) Q:'DA  S ACT=^(DA) D
"RTN","XPDIA",119,0)
 .;if use as link then goto PROFL, just update menus
"RTN","XPDIA",120,0)
 .G:ACT=2 PROFL
"RTN","XPDIA",121,0)
 .;repoint Package (0;12)
"RTN","XPDIA",122,0)
 .S Y0=^ORD(101,DA,0) S:$L($P(Y0,U,12)) $P(Y0,U,12)=$$LK("^DIC(9.4)",$P(Y0,U,12)),^ORD(101,DA,0)=Y0
"RTN","XPDIA",123,0)
 .;repoint File Link (5;1), its a variable pointer
"RTN","XPDIA",124,0)
 .S Y0=$P($G(^ORD(101,DA,5)),U),Y=$P(Y0,";",2),Y0=$P(Y0,";")
"RTN","XPDIA",125,0)
 .I Y0,$L(Y) S Y0=$O(@("^"_Y_"""B"","""_Y0_""",0)")),$P(^ORD(101,DA,5),U)=$S(Y0:Y0_";"_Y,1:"")
"RTN","XPDIA",126,0)
 .;loop thru Access and resolve (3;1), kill if it doesn't resolve
"RTN","XPDIA",127,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,3,I)) Q:'I  S Y0=$P($G(^(I,0)),U) D
"RTN","XPDIA",128,0)
 ..;Y0=.01 of Access(Security Key)
"RTN","XPDIA",129,0)
 ..S Y=$$LK("^DIC(19.1)",Y0)
"RTN","XPDIA",130,0)
 ..I 'Y K ^ORD(101,DA,3,I) D BMES^XPDUTL(" Key "_Y0_" in Protocol "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",131,0)
 ..S $P(^ORD(101,DA,3,I,0),U)=Y,X=I_U_(X+1)
"RTN","XPDIA",132,0)
 .S:X $P(^ORD(101,DA,3,0),U,3,4)=X
"RTN","XPDIA",133,0)
PROFL .;need to loop through ^TMP($J,"XPD",DA,10,I) these are menus that need to be
"RTN","XPDIA",134,0)
 .;merged, they are also linked menu, but treat like merge
"RTN","XPDIA",135,0)
 .S I=0 F  S I=$O(^TMP($J,"XPD",DA,10,I)) Q:'I  S Y0=$G(^(I,0)),X=$G(^(U)) D:X]"" MENU(DA,X,Y0)
"RTN","XPDIA",136,0)
 .;loop thru Menu and repoint Option (0;1), text is on ^(U) node
"RTN","XPDIA",137,0)
 .;also need to recount all menus and reset zeroth node, use X
"RTN","XPDIA",138,0)
 .S (I,X)=0 F  S I=$O(^ORD(101,DA,10,I)) Q:'I  S Y0=$G(^(I,U)) D
"RTN","XPDIA",139,0)
 ..I $L(Y0) D  Q:'Y
"RTN","XPDIA",140,0)
 ...S Y=$$LK("^ORD(101)",Y0)
"RTN","XPDIA",141,0)
 ...K ^ORD(101,DA,10,I,U)
"RTN","XPDIA",142,0)
 ...I 'Y K ^ORD(101,DA,10,I) D BMES^XPDUTL(" Protocol "_Y0_" in Protocol Menu "_$P(^ORD(101,DA,0),U)_" **NOT FOUND**") Q
"RTN","XPDIA",143,0)
 ...S $P(^ORD(101,DA,10,I,0),U)=Y
"RTN","XPDIA",144,0)
 ..S X=I_U_(X+1)
"RTN","XPDIA",145,0)
 .S:X $P(^ORD(101,DA,10,0),U,3,4)=X
"RTN","XPDIA",146,0)
 .;re-index this option
"RTN","XPDIA",147,0)
 .D IX1^DIK
"RTN","XPDIA",148,0)
 K ^TMP($J,"XPD")
"RTN","XPDIA",149,0)
 Q
"RTN","XPDIA",150,0)
PRODEL ;option delete
"RTN","XPDIA",151,0)
 D DEL("^ORD(101,",DUZ)
"RTN","XPDIA",152,0)
 Q
"RTN","XPDIA",153,0)
LK(GR,X) ;lookup, GR=global root, X=lookup value
"RTN","XPDIA",154,0)
 Q:$G(X)="" ""
"RTN","XPDIA",155,0)
 N I S I=$O(@GR@("B",X,0))
"RTN","XPDIA",156,0)
 I I,$D(@GR@(I,0))#2 Q I
"RTN","XPDIA",157,0)
 Q ""
"RTN","XPDIA",158,0)
 ;
"RTN","XPDIA",159,0)
 ;this is used to add menu items to an option or protocol
"RTN","XPDIA",160,0)
MENU(DA,X,X0) ;DA=ien of option/protocol, X=Menu item, X0=0 node of menu item
"RTN","XPDIA",161,0)
 N DIC,DLAYGO,DIK,D0,D1,I,Y,Y0
"RTN","XPDIA",162,0)
 S DIC=$S(XPDFIL=19:"^DIC(19,",1:"^ORD(101,")_DA_",10,",DIC(0)="L",DLAYGO=XPDFIL,(D0,DA(1))=DA
"RTN","XPDIA",163,0)
 S:'$D(@(DIC_"0)")) @(DIC_"0)")=U_$P(^DD(XPDFIL,10,0),U,2)
"RTN","XPDIA",164,0)
 S:$L($G(X0)) DIC("DR")="2///"_$P(X0,U,2)_";3///"_$P(X0,U,3)_$S($L($P(X0,U,4)):";4///"_$P(X0,U,4)_";5///"_$P(X0,U,5)_";6///"_$P(X0,U,6),1:"")
"RTN","XPDIA",165,0)
 D ^DIC
"RTN","XPDIA",166,0)
 Q
"RTN","XPDIA",167,0)
DEL(DIK,DUZ) ;delete
"RTN","XPDIA",168,0)
 N DA,XPDI,XPDF
"RTN","XPDIA",169,0)
 S XPDI=0,DUZ(0)="@",XPDF=+$P(DIK,"(",2)
"RTN","XPDIA",170,0)
 F  S XPDI=$O(^TMP($J,"XPDEL",XPDI)) Q:'XPDI  D
"RTN","XPDIA",171,0)
 .K ^TMP("DIFIXPT",$J) S DA=XPDI
"RTN","XPDIA",172,0)
 .D ^DIK ;FIXPT^DIA3("D",XPDF,XPDI)
"RTN","XPDIA",173,0)
 .I $D(^TMP("DIFIXPT",$J))  D WP^XPDUTL("^TMP(""DIFIXPT"",$J)")
"RTN","XPDIA",174,0)
 Q
"RTN","XPDIJ")
0^5^B67545793
"RTN","XPDIJ",1,0)
XPDIJ ;SFISC/RSD - Install Job ;04/16/96  15:34
"RTN","XPDIJ",2,0)
 ;;8.0;KERNEL;**2,21,28**;Jul 10, 1995
"RTN","XPDIJ",3,0)
EN ;install all packages
"RTN","XPDIJ",4,0)
 ;XPDA=ien of first package
"RTN","XPDIJ",5,0)
 N XPD0,XPDSET,XPDQUIT,X,Y,ZTRTN,ZTDTH,ZTIO,ZTDESC,ZTSK
"RTN","XPDIJ",6,0)
 I ^%ZOSF("OS")["VAX DSM" N $ETRAP S $ETRAP="S %ZTER11S=$STACK D ERR^XPDIJ"
"RTN","XPDIJ",7,0)
 E  S X="ERR^XPDIJ",@^%ZOSF("TRAP")
"RTN","XPDIJ",8,0)
 Q:'$D(^XPD(9.7,+$G(XPDA),0))  S XPD0=^(0)
"RTN","XPDIJ",9,0)
 D INIT^XPDID
"RTN","XPDIJ",10,0)
 ;disable options & protocols for setname, XPDSET=1/0^setname^out of order msg.
"RTN","XPDIJ",11,0)
 S Y=$P(XPD0,U,8),XPDSET=+Y_U_$E(Y,2,99)_U_$S($L(Y):$P($G(^XTMP("XQOO",$E(Y,2,99),0)),U),1:"")
"RTN","XPDIJ",12,0)
 ;hang the number of seconds given in 0;10
"RTN","XPDIJ",13,0)
 I XPDSET D OFF^XQOO1($P(XPDSET,U,2)) I $P(XPD0,U,10) H ($P(XPD0,U,10)*60)
"RTN","XPDIJ",14,0)
 S Y=0
"RTN","XPDIJ",15,0)
 ;XPDABORT can be set in pre or post install to abort install
"RTN","XPDIJ",16,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%  Q:$D(XPDABORT)
"RTN","XPDIJ",17,0)
 .N XPD,XPDA,XPDNM,XPDV,XPDV0,XPDX,XPDY,Y
"RTN","XPDIJ",18,0)
 .S XPDA=%,XPDNM=$P($G(^XPD(9.7,XPDA,0)),U) D IN
"RTN","XPDIJ",19,0)
 .;check status of other cpu jobs, do if not this volume
"RTN","XPDIJ",20,0)
 .X ^%ZOSF("UCI") S XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",21,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=^(XPDV,0) D:$P(XPDV0,U)'=XPDY
"RTN","XPDIJ",22,0)
 ..;if completed time,write message and quit
"RTN","XPDIJ",23,0)
 ..I $P(XPDV0,U,2) D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",24,0)
 ..;if job had no start time, write message and quit
"RTN","XPDIJ",25,0)
 ..I '$P(XPDV0,U,3) D  I '$P(XPDV0,U,3)  D BMES^XPDUTL(" ** Job on VOLUME SET "_$P(XPDV0,U)_" never started **"),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **") Q
"RTN","XPDIJ",26,0)
 ...D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to start.")
"RTN","XPDIJ",27,0)
 ...;hang 1 minute, try 5 times
"RTN","XPDIJ",28,0)
 ...F %=1:1:5 H 60 S XPDV0=^XPD(9.7,XPDA,"VOL",XPDV,0) Q:$P(XPDV0,U,3)
"RTN","XPDIJ",29,0)
 ..D BMES^XPDUTL(" Waiting for job on VOLUME SET "_$P(XPDV0,U)_" to complete.")
"RTN","XPDIJ",30,0)
 ..S XPD=0,XPDX=$G(^XPD(9.7,XPDA,"VOL",XPDV,1))
"RTN","XPDIJ",31,0)
 ..;check the last update node
"RTN","XPDIJ",32,0)
 ..F  S Y=$P(^XPD(9.7,XPDA,"VOL",XPDV,0),U,2),X=$G(^(1)),XPD=XPD+1 Q:XPD>20!Y  S:X'=XPDX XPD=0,XPDX=X H 180
"RTN","XPDIJ",33,0)
 ..;quit if we have a complete time
"RTN","XPDIJ",34,0)
 ..I Y D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" Completed.") Q
"RTN","XPDIJ",35,0)
 ..D BMES^XPDUTL(" Job on VOLUME SET "_$P(XPDV0,U)_" has been idle for an hour."),MES^XPDUTL(" ** "_$P(XPDV0,U)_" has NOT been updated! **")
"RTN","XPDIJ",36,0)
 S Y=0
"RTN","XPDIJ",37,0)
 F  S Y=$O(^XPD(9.7,"ASP",XPDA,Y)) Q:'Y  S %=$O(^(Y,0)) D:%
"RTN","XPDIJ",38,0)
 .N Y,XPD
"RTN","XPDIJ",39,0)
 .;update the status field
"RTN","XPDIJ",40,0)
 .S XPD(9.7,%_",",.02)=3
"RTN","XPDIJ",41,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",42,0)
 .;kill transport global
"RTN","XPDIJ",43,0)
 .K ^XTMP("XPDI",XPDA)
"RTN","XPDIJ",44,0)
 ;ZTREQ tells taskman to delete task
"RTN","XPDIJ",45,0)
 I $G(ZTSK) S ZTREQ="@" D
"RTN","XPDIJ",46,0)
 .;remove task # from Install File
"RTN","XPDIJ",47,0)
 .N XPD S XPD(9.7,XPDA_",",5)="@"
"RTN","XPDIJ",48,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",49,0)
 D EXIT^XPDID("Install Completed"),^%ZISC
"RTN","XPDIJ",50,0)
 ;quit if install was aborted
"RTN","XPDIJ",51,0)
 Q:$D(XPDABORT)
"RTN","XPDIJ",52,0)
 ;put option back in order
"RTN","XPDIJ",53,0)
 I $P(XPDSET,U,2)]"" D ON^XQOO1($P(XPDSET,U,2)) K ^XTMP("XQOO",$P(XPDSET,U,2))
"RTN","XPDIJ",54,0)
 ;queue menu rebuild on current CPU
"RTN","XPDIJ",55,0)
 D CHEK^XQ83
"RTN","XPDIJ",56,0)
 ;check if need to queue menu rebuild on other CPUs
"RTN","XPDIJ",57,0)
 D:$O(^XPD(9.7,XPDA,"VOL",0))
"RTN","XPDIJ",58,0)
 .N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU
"RTN","XPDIJ",59,0)
 .X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",60,0)
 .;loop thru VOLUMES SET and don't do current volume set
"RTN","XPDIJ",61,0)
 .F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",62,0)
 ..S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="Install Menu Rebuild",ZTCPU=XPDV0,ZTRTN="CHEK^XQ83" D ^%ZTLOAD
"RTN","XPDIJ",63,0)
 Q
"RTN","XPDIJ",64,0)
IN ;install XPDA
"RTN","XPDIJ",65,0)
 ;XPDA=ien of file 9.7, XPDNM=package name
"RTN","XPDIJ",66,0)
 Q:'$D(^XTMP("XPDI",XPDA))!'$D(^XPD(9.7,XPDA,0))
"RTN","XPDIJ",67,0)
 ;check if already installed
"RTN","XPDIJ",68,0)
 Q:$P($G(^XPD(9.7,XPDA,1)),U,3)
"RTN","XPDIJ",69,0)
 N DIFROM,XPD,XPDBLD,XPDCHECK,XPDCP,XPDI,XPDGREF,XPDIST,XPDIDTOT,XPDIDCNT,XPDIDMOD,XPDRTN
"RTN","XPDIJ",70,0)
 ;XPDBLD subscript for build entry i.e. ^XTMP("XPDI",XPDA,"BLD",XPDBLD
"RTN","XPDIJ",71,0)
 S DIFROM=$$VER^XPDUTL(XPDNM),XPDBLD=$O(^XTMP("XPDI",XPDA,"BLD",0)),XPDGREF="^XTMP(""XPDI"","_XPDA_",""TEMP"")"
"RTN","XPDIJ",72,0)
 D TITLE^XPDID(XPDNM)
"RTN","XPDIJ",73,0)
 I '$$CHK(11) D
"RTN","XPDIJ",74,0)
 .D BMES^XPDUTL(" Install Started for "_XPDNM_" : "),STMP(11)
"RTN","XPDIJ",75,0)
 .;update status and installed by fields
"RTN","XPDIJ",76,0)
 .S XPD(9.7,XPDA_",",.02)=2,XPD(9.7,%_",",9)=DUZ
"RTN","XPDIJ",77,0)
 .D FILE^DIE("","XPD")
"RTN","XPDIJ",78,0)
 E  D BMES^XPDUTL(" Install Restarted for "_XPDNM_" at "_$$HTE^XLFDT($H))
"RTN","XPDIJ",79,0)
 I '$$CHK(12) D
"RTN","XPDIJ",80,0)
 .;jobup RTN^XPDIJ(XPDA), to install routines on other CPU if Taskman is running
"RTN","XPDIJ",81,0)
 .;this multiple should only be set for MSM systems, set in XPZ2^XPDIQ
"RTN","XPDIJ",82,0)
 .D:$O(^XPD(9.7,XPDA,"VOL",0))&$$TM^%ZTLOAD
"RTN","XPDIJ",83,0)
 ..N XPDU,XPDY,XPDV,XPDV0,ZTUCI,ZTCPU,ZTDESC,ZTRTN,ZTDTH,ZTIO,ZTSK
"RTN","XPDIJ",84,0)
 ..X ^%ZOSF("UCI") S XPDU=$P(Y,","),XPDY=$P(Y,",",2),XPDV=0
"RTN","XPDIJ",85,0)
 ..F  S XPDV=$O(^XPD(9.7,XPDA,"VOL",XPDV)) Q:'XPDV  S XPDV0=$P(^(XPDV,0),U) D:XPDV0'=XPDY
"RTN","XPDIJ",86,0)
 ...S ZTUCI=XPDU,ZTDTH=$H,ZTIO="",ZTDESC="KIDS update CPUs "_XPDV0,ZTCPU=XPDV0,ZTRTN="EN^XPDCPU("_XPDA_","_XPDV_")"
"RTN","XPDIJ",87,0)
 ...D ^%ZTLOAD
"RTN","XPDIJ",88,0)
 ...;save task number under Volume set multiple
"RTN","XPDIJ",89,0)
 ...Q:'$G(ZTSK)  K XPD
"RTN","XPDIJ",90,0)
 ...S XPD(9.703,XPDV_","_XPDA_",",3)=ZTSK D FILE^DIE("","XPD")
"RTN","XPDIJ",91,0)
 .D BMES^XPDUTL(" Installing Routines:"),SETTOT^XPDID(9.8),RTN(XPDA),STMP(12)
"RTN","XPDIJ",92,0)
 E  D BMES^XPDUTL(" Routines already installed.")
"RTN","XPDIJ",93,0)
 S XPDCP="INI"
"RTN","XPDIJ",94,0)
 ;check if pre-install has completed
"RTN","XPDIJ",95,0)
 I '$$VERCP^XPDUTL("XPD PREINSTALL COMPLETED") D  Q:$D(XPDABORT)
"RTN","XPDIJ",96,0)
 .;setup XPDQUES array with pre-install questions/answers
"RTN","XPDIJ",97,0)
 .D QUES^XPDIQ("PRE")
"RTN","XPDIJ",98,0)
 .;XPDCHECK=ien of current checkpoint, (0)=name of checkpoint
"RTN","XPDIJ",99,0)
 .;XPDCP="INI"-pre install or "INIT"-post install
"RTN","XPDIJ",100,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ",101,0)
 .S XPDCHECK=1
"RTN","XPDIJ",102,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INI",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D  Q:$D(XPDABORT)
"RTN","XPDIJ",103,0)
 ..;if there is no call back, quit
"RTN","XPDIJ",104,0)
 ..Q:$G(^XPD(9.7,XPDA,"INI",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ",105,0)
 ..;check if checkpoint has been completed
"RTN","XPDIJ",106,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ",107,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Pre-Install Routine: "_XPDRTN)
"RTN","XPDIJ",108,0)
 ..;zero the progress bar
"RTN","XPDIJ",109,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ",110,0)
 ..D @XPDRTN
"RTN","XPDIJ",111,0)
 ..;write message and abort if developer wants
"RTN","XPDIJ",112,0)
 ..I $D(XPDABORT) D BMES^XPDUTL("Install ** ABORTED ** in Pre-Install program") Q
"RTN","XPDIJ",113,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ",114,0)
 .;complete pre-init check point
"RTN","XPDIJ",115,0)
 .S %=$$COMCP^XPDUTL("XPD PREINSTALL COMPLETED")
"RTN","XPDIJ",116,0)
 E  D BMES^XPDUTL(" Pre-Install already finished.")
"RTN","XPDIJ",117,0)
 ;build XPDQUES arrays for all of the FM Files
"RTN","XPDIJ",118,0)
 D QUES^XPDIQ("XPF")
"RTN","XPDIJ",119,0)
 ;check the last file and see if it's already installed
"RTN","XPDIJ",120,0)
 S XPD=$G(^(+$O(^XPD(9.7,XPDA,4,"A"),-1),0))
"RTN","XPDIJ",121,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"FIA"))
"RTN","XPDIJ",122,0)
 .D BMES^XPDUTL(" Installing Data Dictionaries: "),SETTOT^XPDID(4),FIA^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",123,0)
 E  D BMES^XPDUTL(" Data Dictionaries already installed.")
"RTN","XPDIJ",124,0)
 S %=+$O(^XTMP("XPDI",XPDA,"DATA",""),-1),XPD=$G(^XPD(9.7,XPDA,4,%,0))
"RTN","XPDIJ",125,0)
 I '$P(XPD,U,3) D:%
"RTN","XPDIJ",126,0)
 .D BMES^XPDUTL(" Installing Data: "),DAT^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",127,0)
 E  D BMES^XPDUTL(" Data already installed.")
"RTN","XPDIJ",128,0)
 S (%,XPD)=""
"RTN","XPDIJ",129,0)
 F  S %=+$O(^XPD(9.7,XPDA,"KRN",%)) Q:'%  S XPD=$G(^(%,0)) Q:'$P(XPD,U,2)
"RTN","XPDIJ",130,0)
 I '$P(XPD,U,2) D:$D(^XTMP("XPDI",XPDA,"KRN"))
"RTN","XPDIJ",131,0)
 .D BMES^XPDUTL(" Installing PACKAGE COMPONENTS: "),KRN^XPDIK,MES^XPDUTL("               "_$$HTE^XLFDT($H))
"RTN","XPDIJ",132,0)
 E  D BMES^XPDUTL(" PACKAGE COMPONENTS already installed.")
"RTN","XPDIJ",133,0)
 S XPDCP="INIT"
"RTN","XPDIJ",134,0)
 ;check if post-install has completed
"RTN","XPDIJ",135,0)
 I '$$VERCP^XPDUTL("XPD POSTINSTALL COMPLETED") D
"RTN","XPDIJ",136,0)
 .;setup XPDQUES array with post-install questions/answers
"RTN","XPDIJ",137,0)
 .D QUES^XPDIQ("POS")
"RTN","XPDIJ",138,0)
 .;loop thru check points starting with INSTALL STARTED
"RTN","XPDIJ",139,0)
 .S XPDCHECK=1
"RTN","XPDIJ",140,0)
 .F  S XPDCHECK=$O(^XPD(9.7,XPDA,"INIT",XPDCHECK)) Q:'XPDCHECK  S XPD=^(XPDCHECK,0) D
"RTN","XPDIJ",141,0)
 ..;if there is no call back, quit
"RTN","XPDIJ",142,0)
 ..Q:$G(^XPD(9.7,XPDA,"INIT",XPDCHECK,1))=""  S XPDRTN=^(1)
"RTN","XPDIJ",143,0)
 ..;quit if checkpoint has completed time
"RTN","XPDIJ",144,0)
 ..Q:$P(XPD,U,2)
"RTN","XPDIJ",145,0)
 ..I XPDCHECK=2 D BMES^XPDUTL(" Running Post-Install Routine: "_XPDRTN)
"RTN","XPDIJ",146,0)
 ..;zero the progress bar
"RTN","XPDIJ",147,0)
 ..I $D(XPDIDVT) S XPDIDTOT=0 D UPDATE^XPDID(0)
"RTN","XPDIJ",148,0)
 ..D @XPDRTN
"RTN","XPDIJ",149,0)
 ..S %=$$COMCP^XPDUTL(XPDCHECK)
"RTN","XPDIJ",150,0)
 .;complete post-init check point
"RTN","XPDIJ",151,0)
 .S %=$$COMCP^XPDUTL("XPD POSTINSTALL COMPLETED")
"RTN","XPDIJ",152,0)
 E  D BMES^XPDUTL(" Post-Install already finished.")
"RTN","XPDIJ",153,0)
 ;move routines to install file & Routine file
"RTN","XPDIJ",154,0)
 D BMES^XPDUTL(" Updating Routine file..."),SETTOT^XPDID(9.8),RTN^XPDIP
"RTN","XPDIJ",155,0)
 ;XPDIST is flag for site tracking^A/B install message, it is set in PKG^XPDIP
"RTN","XPDIJ",156,0)
 ;install Package file, OERR parameter multiple, and Build file
"RTN","XPDIJ",157,0)
 S XPDIST="" D BMES^XPDUTL(" Updating KIDS files..."),PKG^XPDIP
"RTN","XPDIJ",158,0)
 D BMES^XPDUTL(" "_XPDNM_" Installed. "),STMP(17)
"RTN","XPDIJ",159,0)
 ;sends install messages
"RTN","XPDIJ",160,0)
 I $L(XPDIST) S %=$$EN^XPDIST(XPDA,XPDIST) D BMES^XPDUTL(" "_$P("NO ",U,'$P(%,"#",2))_"Install Message sent "_%)
"RTN","XPDIJ",161,0)
 Q
"RTN","XPDIJ",162,0)
 ;
"RTN","XPDIJ",163,0)
STMP(X) ;timestamp checkpoints in file 9.7, X=field #
"RTN","XPDIJ",164,0)
 N XPD,%
"RTN","XPDIJ",165,0)
 S %=$$NOW^XLFDT,XPD(9.7,XPDA_",",X)=%
"RTN","XPDIJ",166,0)
 D MES^XPDUTL("               "_$$FMTE^XLFDT(%)),FILE^DIE("","XPD")
"RTN","XPDIJ",167,0)
 Q
"RTN","XPDIJ",168,0)
CHK(X) ;check checkpoints in file 9.7, X=field #, returns 1=completed, 0=not completed
"RTN","XPDIJ",169,0)
 Q $$GET1^DIQ(9.7,XPDA_",",X,"I")]""
"RTN","XPDIJ",170,0)
 ;
"RTN","XPDIJ",171,0)
SAVE(X) ;restore routine X
"RTN","XPDIJ",172,0)
 N %,DIE,XCM,XCN,XCS
"RTN","XPDIJ",173,0)
 S DIE="^XTMP(""XPDI"",XPDA,""RTN"",X,",XCN=0
"RTN","XPDIJ",174,0)
 X ^%ZOSF("SAVE")
"RTN","XPDIJ",175,0)
 Q
"RTN","XPDIJ",176,0)
RTN(XPDA) ;restore all routines for package XPDA
"RTN","XPDIJ",177,0)
 ;^XPD("XPDI",XPDA,"RTN",routine name)=0-install, 1-delete, 2-skip^checksum
"RTN","XPDIJ",178,0)
 Q:$G(XPDA)=""
"RTN","XPDIJ",179,0)
 N X,XPDI,XPDJ S XPDI=""
"RTN","XPDIJ",180,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S XPDJ=^(XPDI) D
"RTN","XPDIJ",181,0)
 .;if we are doing VT graphic display, set counter
"RTN","XPDIJ",182,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+1 D:'(XPDIDCNT#XPDIDMOD) UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",183,0)
 .I 'XPDJ D SAVE(XPDI) Q
"RTN","XPDIJ",184,0)
 .;set checksum to null, since routine wasn't loaded
"RTN","XPDIJ",185,0)
 .I $P(XPDJ,U,2) S $P(^XTMP("XPDI",XPDA,"BLD",XPDBLD,"KRN",9.8,"NM",$P(XPDJ,U,2),0),U,4)=""
"RTN","XPDIJ",186,0)
 .I $P(XPDJ,U)=1 S X=XPDI X ^%ZOSF("DEL")
"RTN","XPDIJ",187,0)
 ;if graphic display, update full count
"RTN","XPDIJ",188,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIJ",189,0)
 Q
"RTN","XPDIJ",190,0)
 ;come here on error, record error and then go to error trap
"RTN","XPDIJ",191,0)
ERR D BMES^XPDUTL($$EC^%ZOSV),EXIT^XPDID()
"RTN","XPDIJ",192,0)
 G ERR^ZU
"RTN","XPDIP")
0^3^B28400855
"RTN","XPDIP",1,0)
XPDIP ;SFISC/RSD - Install Package & Routine file ;04/11/96  10:33
"RTN","XPDIP",2,0)
 ;;8.0;KERNEL;**15,21,28**;Jul 10, 1995
"RTN","XPDIP",3,0)
 Q
"RTN","XPDIP",4,0)
PKG ;
"RTN","XPDIP",5,0)
 N %,OLDA,DA,DIK,XPD,XPDFIL,XPDPKG,XPDBLDA,Y
"RTN","XPDIP",6,0)
 ;update variable for graphic display
"RTN","XPDIP",7,0)
 I $D(XPDIDVT) S XPDIDTOT=10,XPDIDMOD=1,XPDIDCNT=0 D:XPDIDVT UPDATE^XPDID(0)
"RTN","XPDIP",8,0)
 ;XPDPKG=ien of Package file
"RTN","XPDIP",9,0)
 S XPDPKG=+$P(^XPD(9.7,XPDA,0),U,2),OLDA=+$O(^XTMP("XPDI",XPDA,"PKG",0)),Y=$G(^(OLDA,0))
"RTN","XPDIP",10,0)
 ;Package file entry not sent, XPDPKG=0
"RTN","XPDIP",11,0)
 G:'OLDA PKGEND
"RTN","XPDIP",12,0)
 ;if package already exist, then update version multiple
"RTN","XPDIP",13,0)
 I XPDPKG,$D(^DIC(9.4,XPDPKG,0)) S DA=XPDPKG D PKGV G PKGH
"RTN","XPDIP",14,0)
 ;PKGEND if Package entry wasn't added
"RTN","XPDIP",15,0)
 D  G:'XPDPKG PKGEND
"RTN","XPDIP",16,0)
 .Q:'$L(Y)
"RTN","XPDIP",17,0)
 .S Y=$P(Y,U),XPDFIL=9.4,Y=$$DIC^XPDIK(9.4,Y) Q:'Y
"RTN","XPDIP",18,0)
 .S (DA,XPDPKG)=+Y
"RTN","XPDIP",19,0)
 .;if new entry in package file, bring in everything
"RTN","XPDIP",20,0)
 .I $P(Y,U,3) D
"RTN","XPDIP",21,0)
 ..M ^DIC(9.4,XPDPKG)=^XTMP("XPDI",XPDA,"PKG",OLDA)
"RTN","XPDIP",22,0)
 ..;kill the -1 flag node first
"RTN","XPDIP",23,0)
 ..K ^DIC(9.4,XPDPKG,-1)
"RTN","XPDIP",24,0)
 ..;re-cross ref after adding a new package
"RTN","XPDIP",25,0)
 ..S DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",26,0)
 .;add package to file 9.7
"RTN","XPDIP",27,0)
 .K XPD S XPD(9.7,XPDA_",",1)=+XPDPKG D FILE^DIE("","XPD")
"RTN","XPDIP",28,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",29,0)
 .D PKGV
"RTN","XPDIP",30,0)
PKGH I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",31,0)
 S %=$P(^DIC(9.4,XPDPKG,0),U,4)
"RTN","XPDIP",32,0)
 ;repoint Help Frame (0;4)
"RTN","XPDIP",33,0)
 I $L(%),'% S $P(^DIC(9.4,XPDPKG,0),U,4)=$$LK^XPDIA("^DIC(9.2)",%),DIK="^DIC(9.4," D IX1^DIK
"RTN","XPDIP",34,0)
 ;OERR Package Parameter multiple in file 100.99
"RTN","XPDIP",35,0)
 D:$D(^ORD(100.99))&$D(^XTMP("XPDI",XPDA,"OER",OLDA))
"RTN","XPDIP",36,0)
 .S DA(1)=1,DIK="^ORD(100.99,1,5," D:$D(^ORD(100.99,1,5,DA)) ^DIK
"RTN","XPDIP",37,0)
 .S:'$D(^ORD(100.99,1,5,0)) ^ORD(100.99,1,5,0)=U_$P(^DD(100.99,5,0),U,2) S $P(^(0),U,3,4)=DA_U_($P(^(0),U,3)+1)
"RTN","XPDIP",38,0)
 .M ^ORD(100.99,1,5,DA)=^XTMP("XPDI",XPDA,"OER",OLDA) S $P(^(DA,0),U)=DA,%=$P(^(0),U,4)
"RTN","XPDIP",39,0)
 .S:$L(%) $P(^ORD(100.99,1,5,DA,0),U,4)=$$LK^XPDIA("^ORD(100.98)",%)
"RTN","XPDIP",40,0)
 .D IX1^DIK
"RTN","XPDIP",41,0)
PKGEND S XPDBLDA=$$BLD(XPDBLD) Q:'XPDBLDA
"RTN","XPDIP",42,0)
 ;move Alpha/Beta testing info to Kernel site para file
"RTN","XPDIP",43,0)
 I XPDPKG S %=$G(^XPD(9.6,XPDBLDA,"ABPKG")) D
"RTN","XPDIP",44,0)
 .;Install message and they have an address, set flag in XPDIST
"RTN","XPDIP",45,0)
 .I $P(%,U)="y",$P(%,U,2)="y",$L($P(%,U,3)) S $P(XPDIST,U,2)=$P(%,U,3)
"RTN","XPDIP",46,0)
 .D EN^XQABLOAD(XPDBLDA)
"RTN","XPDIP",47,0)
 Q
"RTN","XPDIP",48,0)
BLD(XPDBLD) ;add Build entry, XPDBLD=Build ien in ^XTMP("XPDI",XPDA,"BLD",
"RTN","XPDIP",49,0)
 N DA,DIK,XPDFIL,Y
"RTN","XPDIP",50,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",51,0)
 ;XPDBLD=Build ien in ^XTMP, set in XPDIJ
"RTN","XPDIP",52,0)
 S XPDFIL=9.6,Y=$$DIC^XPDIK(9.6,XPDNM) Q:'Y ""
"RTN","XPDIP",53,0)
 S DA=+Y
"RTN","XPDIP",54,0)
 ;XPDPKG=Package file ien, could be 0 if no package file
"RTN","XPDIP",55,0)
 K:'$P(Y,U,3) ^XPD(9.6,DA),^XPD(9.6,"C",XPDPKG,DA)
"RTN","XPDIP",56,0)
 M ^XPD(9.6,DA)=^XTMP("XPDI",XPDA,"BLD",XPDBLD)
"RTN","XPDIP",57,0)
 ;reset Package File Link (0;2)
"RTN","XPDIP",58,0)
 ;XPDIST = national site tracking^A/B install message address
"RTN","XPDIP",59,0)
 S $P(^XPD(9.6,DA,0),U,2)=$S(XPDPKG:XPDPKG,1:"") S:$P(^(0),U,5)="y" XPDIST=1
"RTN","XPDIP",60,0)
 ;re-index cross-ref. on fields .01 and 1
"RTN","XPDIP",61,0)
 S DIK="^XPD(9.6," F Y=.01,1 S DIK(1)=Y D EN1^DIK
"RTN","XPDIP",62,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",63,0)
 Q DA
"RTN","XPDIP",64,0)
 ;
"RTN","XPDIP",65,0)
 ;update the version multiple in the package file
"RTN","XPDIP",66,0)
PKGV N %
"RTN","XPDIP",67,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+2 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",68,0)
 ;%=ien in the Version multiple_U_ien in Patch multiple in ^XTMP
"RTN","XPDIP",69,0)
 S %=$G(^XTMP("XPDI",XPDA,"PKG",OLDA,-1))
"RTN","XPDIP",70,0)
 I XPDNM'["*" D  Q
"RTN","XPDIP",71,0)
 .S %=+% Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,%,0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",72,0)
 .S $P(%,U,3,4)=DT_U_DUZ,%=$$PKGVER(DA,.%)
"RTN","XPDIP",73,0)
 ;update patch history multiple
"RTN","XPDIP",74,0)
 Q:'$D(^XTMP("XPDI",XPDA,"PKG",OLDA,22,+%,"PAH",+$P(%,U,2),0))  S %=^(0) S:$D(^(1)) %(1)=$NA(^(1))
"RTN","XPDIP",75,0)
 S $P(%,U,2,3)=DT_U_DUZ,%=$$PKGPAT(DA,$$VER^XPDUTL(XPDNM),.%)
"RTN","XPDIP",76,0)
 Q
"RTN","XPDIP",77,0)
 ;
"RTN","XPDIP",78,0)
PKGVER(XPDA,XPDI) ;update version in package file, XPDA=ien, return ien
"RTN","XPDIP",79,0)
 ;XPDI=version^date distr.^date installed^install by
"RTN","XPDIP",80,0)
 ;XPDI(1)=root of description field
"RTN","XPDIP",81,0)
 N I,X,XPD,XPDJ
"RTN","XPDIP",82,0)
 S XPD(9.4,XPDA_",",13)=$P(XPDI,U),X="XPD(9.49,""?+1,"_XPDA_","")",@X@(.01)=$P(XPDI,U)
"RTN","XPDIP",83,0)
 F I=1:1:3 S:$P(XPDI,U,I+1)]"" @X@(I)=$P(XPDI,U,I+1)
"RTN","XPDIP",84,0)
 S:$D(XPDI(1)) @X@(41)=XPDI(1)
"RTN","XPDIP",85,0)
 D UPDATE^DIE("","XPD","XPDJ")
"RTN","XPDIP",86,0)
 Q $G(XPDJ(1))
"RTN","XPDIP",87,0)
 ;
"RTN","XPDIP",88,0)
PKGPAT(XPDA,XPDV,XPDI) ;update patch history, XPDA=ien, XPDV=version
"RTN","XPDIP",89,0)
 ;XPDI=patch^date distr.^install by,   returns version ien^patch ien
"RTN","XPDIP",90,0)
 N I,X,XPD,XPDJ
"RTN","XPDIP",91,0)
 ;quit if we can't find the version multiple, resets XPDV=ien of version
"RTN","XPDIP",92,0)
 S XPDV=$$FIND1^DIC(9.49,","_XPDA_",","X",XPDV) Q:'XPDV 0
"RTN","XPDIP",93,0)
 S X="XPD(9.4901,""?+1,"_XPDV_","_XPDA_","")",@X@(.01)=$P(XPDI,U)
"RTN","XPDIP",94,0)
 F I=.01:.01:.03 S:$P(XPDI,U,I*100)]"" @X@(I)=$P(XPDI,U,I*100)
"RTN","XPDIP",95,0)
 S:$D(XPDI(1)) @X@(1)=XPDI(1)
"RTN","XPDIP",96,0)
 D UPDATE^DIE("","XPD","XPDJ")
"RTN","XPDIP",97,0)
 Q XPDV_U_$G(XPDJ(1))
"RTN","XPDIP",98,0)
 ;
"RTN","XPDIP",99,0)
RTN ;move rtns to install file
"RTN","XPDIP",100,0)
 N XPD,XPDC,XPDCR,XPDI,XPDJ,XPDK,XPDL,XPDM,XPDR,XPDRH,X
"RTN","XPDIP",101,0)
 K ^XPD(9.7,XPDA,"RTN"),^TMP($J)
"RTN","XPDIP",102,0)
 S (XPDC,XPDCR,XPDRH)=0,XPDJ=""
"RTN","XPDIP",103,0)
 ;get all routines that were loaded, XPDM=action
"RTN","XPDIP",104,0)
 ;actions are 0=load, 1=delete, 2=skip
"RTN","XPDIP",105,0)
 F  S XPDJ=$O(^XTMP("XPDI",XPDA,"RTN",XPDJ)) Q:XPDJ=""  S XPDM=^(XPDJ) D:'XPDM
"RTN","XPDIP",106,0)
 .;XPD, build array to update ROUTINE multiple in INSTALL file
"RTN","XPDIP",107,0)
 .S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",108,0)
 .;XPDR, build array to update ROUTINE file
"RTN","XPDIP",109,0)
 .S:'$D(^DIC(9.8,"B",XPDJ)) XPDCR=XPDCR+1,^TMP($J,"XPDR",9.8,"?+"_XPDCR_",",.01)=XPDJ,^(1)="R"
"RTN","XPDIP",110,0)
 ;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",111,0)
 I $D(XPDIDVT) S XPDIDCNT=XPDIDTOT*.4 D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",112,0)
 F XPDK="DIKZ","DIEZ","DIPZ" D
"RTN","XPDIP",113,0)
 .S XPDI=0
"RTN","XPDIP",114,0)
 .;loop thru list of compile template routines
"RTN","XPDIP",115,0)
 .;XTMP("XPDI",XPDA,"DIKZ",ien,routine name)
"RTN","XPDIP",116,0)
 .F  S XPDI=$O(^XTMP("XPDI",XPDA,XPDK,XPDI)),XPDJ="" Q:'XPDI  D
"RTN","XPDIP",117,0)
 ..I 'XPDRH D BMES^XPDUTL(" The following Routines were created during this install:") S XPDRH=1
"RTN","XPDIP",118,0)
 ..F  S XPDJ=$O(^XTMP("XPDI",XPDA,XPDK,XPDI,XPDJ)) Q:XPDJ=""  D:'$D(^XTMP("XPDI",XPDA,"RTN",XPDJ))
"RTN","XPDIP",119,0)
 ...S XPDC=XPDC+1,^TMP($J,"XPDL",XPDC)=XPDC,^TMP($J,"XPD",9.704,"+"_XPDC_","_XPDA_",",.01)=XPDJ
"RTN","XPDIP",120,0)
 ...D MES^XPDUTL("     "_XPDJ)
"RTN","XPDIP",121,0)
 ;update routine multiple in Install file with routines and
"RTN","XPDIP",122,0)
 ;compile template routines
"RTN","XPDIP",123,0)
 I $D(^TMP($J,"XPD"))>9 D
"RTN","XPDIP",124,0)
 .D UPDATE^DIE("","^TMP($J,""XPD"")","^TMP($J,""XPDL"")")
"RTN","XPDIP",125,0)
 .;if we are doing VT graphic display, update only 40%
"RTN","XPDIP",126,0)
 .I $D(XPDIDVT) S XPDIDCNT=XPDIDCNT+(XPDIDTOT*.40) D UPDATE^XPDID(XPDIDCNT)
"RTN","XPDIP",127,0)
 ;update Routine file
"RTN","XPDIP",128,0)
 D:$D(^TMP($J,"XPDR"))>9 UPDATE^DIE("","^TMP($J,""XPDR"")")
"RTN","XPDIP",129,0)
 ;if we are doing VT graphic display, update 100%
"RTN","XPDIP",130,0)
 I $D(XPDIDVT) D UPDATE^XPDID(XPDIDTOT)
"RTN","XPDIP",131,0)
 Q
"RTN","XPDIPM")
0^2^B3078379
"RTN","XPDIPM",1,0)
XPDIPM ;SFISC/RSD - Load a Packman Message ; 5 Apr 96 08:51
"RTN","XPDIPM",2,0)
 ;;8.0;KERNEL;**21,28**;Jul 05, 1995
"RTN","XPDIPM",3,0)
 Q:'$D(^XMB(3.9,+$G(XMZ),0))
"RTN","XPDIPM",4,0)
 N X,XPD,Y S XPD=0
"RTN","XPDIPM",5,0)
 F  S XPD=$O(^XMB(3.9,XMZ,2,XPD)) Q:+XPD'=XPD  S X=^(XPD,0) I $E(X,1,11)="$TXT $KIDS " Q
"RTN","XPDIPM",6,0)
 S Y=$P(X,"$KIDS ",2)
"RTN","XPDIPM",7,0)
EN I 'XPD!'$L(Y) W !!,"Couldn't find a KIDS package!!",*7 Q
"RTN","XPDIPM",8,0)
 N DIR,DIRUT,GR,XPDA,XPDST,XPDIT,XPDT,XPDNM,XPDQUIT
"RTN","XPDIPM",9,0)
 S XPDST("H1")=$P(^XMB(3.9,XMZ,0),U),XPDST=0,XPDIT=1
"RTN","XPDIPM",10,0)
 W !?5,Y S XPDA=$$INST^XPDIL1(Y) G:'XPDA NONE^XPDIL
"RTN","XPDIPM",11,0)
 W !
"RTN","XPDIPM",12,0)
 S DIR(0)="Y",DIR("A")="Want to Continue with Load",DIR("B")="YES"
"RTN","XPDIPM",13,0)
 D ^DIR I 'Y!$D(DIRUT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",14,0)
 W !,"Loading Distribution...",!
"RTN","XPDIPM",15,0)
 S ^XTMP("XPDI",0)=$$FMADD^XLFDT(DT,7)_U_DT
"RTN","XPDIPM",16,0)
 D GI I $G(XPDQUIT) D ABRTALL^XPDI(1) G NONE^XPDIL
"RTN","XPDIPM",17,0)
 D PKG^XPDIL1(XPDA)
"RTN","XPDIPM",18,0)
 Q
"RTN","XPDIPM",19,0)
GI D NXT Q:$G(XPDQUIT)
"RTN","XPDIPM",20,0)
 I X'="**INSTALL NAME**"!'$D(XPDT("NM",Y)) S XPDQUIT=1 Q
"RTN","XPDIPM",21,0)
 S GR="^XTMP(""XPDI"","_XPDA_","
"RTN","XPDIPM",22,0)
 F  D NXT Q:X=""!$D(XPDQUIT)  D
"RTN","XPDIPM",23,0)
 .S @(GR_X)=Y
"RTN","XPDIPM",24,0)
 Q
"RTN","XPDIPM",25,0)
NXT S (X,Y)="",XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR S X=^(XPD,0)
"RTN","XPDIPM",26,0)
 I $E(X,1,5)="$END " S X="" Q
"RTN","XPDIPM",27,0)
 S XPD=$O(^XMB(3.9,XMZ,2,XPD)) G:+XPD'=XPD ERR
"RTN","XPDIPM",28,0)
 S Y=^XMB(3.9,XMZ,2,XPD,0)
"RTN","XPDIPM",29,0)
 Q
"RTN","XPDIPM",30,0)
XMP2 ;called from XMP2
"RTN","XPDIPM",31,0)
 N X,XPD,Y
"RTN","XPDIPM",32,0)
 S XPD=XCN,X=$G(^XMB(3.9,XMZ,2,XPD,0)),Y=$P(X,"$KID ",2)
"RTN","XPDIPM",33,0)
 D EN
"RTN","XPDIPM",34,0)
 S XMOUT=1
"RTN","XPDIPM",35,0)
 Q
"RTN","XPDIPM",36,0)
ERR W !!,"Error in Packman Message, ABORTING load!!"
"RTN","XPDIPM",37,0)
 S (X,Y)="",XPDQUIT=1
"RTN","XPDIPM",38,0)
 Q
"RTN","XPDIQ")
0^8^B13452708
"RTN","XPDIQ",1,0)
XPDIQ ;SFISC/RSD - Install Questions ;04/17/96  09:05
"RTN","XPDIQ",2,0)
 ;;8.0;KERNEL;**21,28**;Jul 10, 1995
"RTN","XPDIQ",3,0)
 Q
"RTN","XPDIQ",4,0)
DIR(XPFR,XPFP) ;XPFR=prefix, XPFP=file no._#
"RTN","XPDIQ",5,0)
 N DIR,DR,XPDI,XPDJ,X,Y,Z
"RTN","XPDIQ",6,0)
 S XPFP=$G(XPFP),XPDI=$S(XPFP:XPFR_XPFP,1:XPFR)
"RTN","XPDIQ",7,0)
 D QUES(XPDI)
"RTN","XPDIQ",8,0)
 ;ask questions
"RTN","XPDIQ",9,0)
 S X=XPFR
"RTN","XPDIQ",10,0)
 F  S X=$O(^XTMP("XPDI",XPDA,"QUES",X)),Z="" Q:X=""!($P(X,XPFR)]"")  D  I $D(DIRUT) S XPDQUIT=1 Q
"RTN","XPDIQ",11,0)
 .S XPDJ=$S('XPFP:X,1:XPDI_$P(X,XPFR,2))
"RTN","XPDIQ",12,0)
 .F  S Z=$O(^XTMP("XPDI",XPDA,"QUES",X,Z)) Q:Z=""  M DIR(Z)=^(Z)
"RTN","XPDIQ",13,0)
 .S:$L($G(XPDQUES(XPDJ))) DIR("B")=$G(XPDQUES(XPDJ,"B"),XPDQUES(XPDJ)) D  Q:'$D(Y)!$D(DIRUT)
"RTN","XPDIQ",14,0)
 ..N FLAG,X,Z K Y
"RTN","XPDIQ",15,0)
 ..I $D(DIR("M")) S %=DIR("M"),FLAG="" K DIR("M") X %
"RTN","XPDIQ",16,0)
 ..Q:'$D(DIR)
"RTN","XPDIQ",17,0)
 ..S:$G(DIR("A"))["|" DIR("A")=$P(DIR("A"),"|")_@$P(DIR("A"),"|",2)_$P(DIR("A"),"|",3)
"RTN","XPDIQ",18,0)
 ..D ^DIR
"RTN","XPDIQ",19,0)
 .S:$D(Y)#2&'($D(Y(0))#2) Y(0)=Y
"RTN","XPDIQ",20,0)
 .S XPDQUES(XPDJ)=Y,XPDQUES(XPDJ,"A")=$G(DIR("A")),XPDQUES(XPDJ,"B")=$G(Y(0))
"RTN","XPDIQ",21,0)
 .K DIR
"RTN","XPDIQ",22,0)
 K XPDJ S XPDI=XPFR
"RTN","XPDIQ",23,0)
 F Y=1:1 S XPDI=$O(XPDQUES(XPDI)) Q:XPDI=""!($P(XPDI,XPFR)]"")  D
"RTN","XPDIQ",24,0)
 .S X="XPDJ(9.701,""?+"_Y_","_XPDA_","")",@X@(.01)=XPDI,@X@(1)=$G(XPDQUES(XPDI,"A")),@X@(2)=$G(XPDQUES(XPDI,"B")),@X@(3)=XPDQUES(XPDI)
"RTN","XPDIQ",25,0)
 K XPDI D:$D(XPDJ)>9 UPDATE^DIE("","XPDJ","XPDI")
"RTN","XPDIQ",26,0)
 Q
"RTN","XPDIQ",27,0)
 ;unused code
"RTN","XPDIQ",28,0)
 S DA=XPDA,DIE="^XPD(9.7,",DR="50///^S X=XPDI",DR(2,9.701)="1///^S X=XPDQUES(XPDI,""A"");2///^S X=XPDQUES(XPDI,""B"");3///^S X=XPDQUES(XPDI)",XPDI=XPFR
"RTN","XPDIQ",29,0)
 F  S XPDI=$O(XPDQUES(XPDI)) Q:XPDI=""!($P(XPDI,XPFR)]"")  D ^DIE
"RTN","XPDIQ",30,0)
 Q
"RTN","XPDIQ",31,0)
 ;
"RTN","XPDIQ",32,0)
QUES(X) ;build XPDQUES array, X="INI","INIT","XPF"
"RTN","XPDIQ",33,0)
 N Y,Z K XPDQUES S Z=X
"RTN","XPDIQ",34,0)
 F  S Z=$O(^XPD(9.7,XPDA,"QUES","B",Z)) Q:Z=""!($P(Z,X)]"")  S Y=$O(^(Z,0)) D
"RTN","XPDIQ",35,0)
 .Q:'$D(^XPD(9.7,XPDA,"QUES",Y,0))
"RTN","XPDIQ",36,0)
 .S XPDQUES(Z)=$G(^(1)),XPDQUES(Z,"A")=$G(^("A")),XPDQUES(Z,"B")=$G(^("B")) ; ^(1) refer to prev line ^XPD(9.7,XPDA,"QUES","B",Z)
"RTN","XPDIQ",37,0)
 Q
"RTN","XPDIQ",38,0)
 ;codes for install process questions
"RTN","XPDIQ",39,0)
XPF1 ;write over existing file
"RTN","XPDIQ",40,0)
 N XPDI
"RTN","XPDIQ",41,0)
 W !!?3,XPDFIL,?13,$P(XPDFILN,U),$P("  (Partial Definition)",U,$P(XPDFILN,U,3)),$P("  (including data)",U,$P(XPDFILO,U,7)="y")
"RTN","XPDIQ",42,0)
 I XPDANS K DIR Q
"RTN","XPDIQ",43,0)
 I $L($G(XPDSCR)) S XPDI=1 D  Q:'XPDI
"RTN","XPDIQ",44,0)
 .X XPDSCR S XPDI=$T Q:XPDI
"RTN","XPDIQ",45,0)
 .W !,"Data Dictionary FAILED the screening logic, file will NOT be installed!"
"RTN","XPDIQ",46,0)
 .S $P(XPDANS,U,2)="1" K DIR
"RTN","XPDIQ",47,0)
 S FLAG=$P($G(^DIC(XPDFIL,0)),U)
"RTN","XPDIQ",48,0)
 I $P(FLAG,$P(XPDFILN,U))="" W !,"Note:  You already have the '",$P(XPDFILN,U),"' File." K DIR Q
"RTN","XPDIQ",49,0)
 W *7,!,"*BUT YOU ALREADY HAVE '",FLAG,"' AS FILE #",XPDFIL,"!"
"RTN","XPDIQ",50,0)
 S $P(XPDANS,U,4)=1
"RTN","XPDIQ",51,0)
 Q
"RTN","XPDIQ",52,0)
XPF2 ;data
"RTN","XPDIQ",53,0)
 I $G(XPDQUES("XPF"_XPFP_1))=0 S DIRUT=1 K DIR Q
"RTN","XPDIQ",54,0)
 I '$P(XPDANS,U,3)!$P(XPDANS,U,2)!($P(XPDFILO,U,7)'="y") K DIR Q
"RTN","XPDIQ",55,0)
 S %=$F("amor",$P(XPDFILO,U,8))-1
"RTN","XPDIQ",56,0)
 I %=1 W !,"Data will NOT be added." K DIR Q
"RTN","XPDIQ",57,0)
 I $P(XPDFILO,U,9)'="y" W !,"I will ",$P("^MERGE^OVERWRITE^REPLACE",U,%)," your data with mine." K DIR Q
"RTN","XPDIQ",58,0)
 S FLAG=$P("^merged with^to overwrite^to replace",U,%)
"RTN","XPDIQ",59,0)
 Q
"RTN","XPDIQ",60,0)
XPZ1 ;disable options
"RTN","XPDIQ",61,0)
 Q:'$D(XPDDIQ("XPZ1"))
"RTN","XPDIQ",62,0)
 I $D(XPDDIQ("XPZ1"))#2 S XPDQUES("XPZ1")=XPDDIQ("XPZ1") K DIR Q
"RTN","XPDIQ",63,0)
 S:$D(XPDDIQ("XPZ1","A")) DIR("A")=XPDDIQ("XPZ1","A")
"RTN","XPDIQ",64,0)
 S:$D(XPDDIQ("XPZ1","B")) DIR("B")=XPDDIQ("XPZ1","B")
"RTN","XPDIQ",65,0)
 Q
"RTN","XPDIQ",66,0)
XPZ2 ;move routines
"RTN","XPDIQ",67,0)
 N Y
"RTN","XPDIQ",68,0)
 X ^%ZOSF("UCI") I Y'=^%ZOSF("PROD") K DIR Q
"RTN","XPDIQ",69,0)
 I ^%ZOSF("OS")'["MSM" K DIR Q
"RTN","XPDIQ",70,0)
 Q:'$D(XPDDIQ("XPZ2"))
"RTN","XPDIQ",71,0)
 I $D(XPDDIQ("XPZ2"))#2 S XPDQUES("XPZ2")=XPDDIQ("XPZ2") K DIR Q
"RTN","XPDIQ",72,0)
 S:$D(XPDDIQ("XPZ2","A")) DIR("A")=XPDDIQ("XPZ2","A")
"RTN","XPDIQ",73,0)
 S:$D(XPDDIQ("XPZ2","B")) DIR("B")=XPDDIQ("XPZ2","B")
"RTN","XPDIQ",74,0)
 Q
"RTN","XPDT")
0^6^B45135570
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package; 15 Apr 96 10:15 ;04/19/96  14:38
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28**;Jul 10, 1995
"RTN","XPDT",3,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",4,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",5,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",6,0)
 ;XPDVER=version number^package name
"RTN","XPDT",7,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",8,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER,X,Y,Z
"RTN","XPDT",9,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",10,0)
 S XPD="First Package Name: ",XPDT=0,DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one."
"RTN","XPDT",11,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",12,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",13,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",14,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",15,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",16,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",17,0)
 .;if type is Global Package, quit if there is other packages
"RTN","XPDT",18,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q:$D(DIRUT)
"RTN","XPDT",19,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",20,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",21,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",22,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",23,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",24,0)
 ..S XPDERR=1
"RTN","XPDT",25,0)
 .S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",26,0)
 .I $D(^XTMP("XPDT",XPDA)) W "     **Transport Global exists**" D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",27,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",28,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",29,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",30,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",31,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO",XPDH=""
"RTN","XPDT",32,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",33,0)
 S DIR(0)="SAO^HF:Host File;PM:PackMan",DIR("A")="Transport through (HF)Host File or (PM)PackMan: ",DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",34,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",35,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",36,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",37,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",38,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",39,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan." G QUIT
"RTN","XPDT",40,0)
 W !!
"RTN","XPDT",41,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",42,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",43,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",44,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",45,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",46,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",47,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",48,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",49,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",50,0)
 ..;can't send global package in packman message
"RTN","XPDT",51,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",52,0)
 ..;verify global package
"RTN","XPDT",53,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",54,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",55,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",56,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",57,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",58,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",59,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",60,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",61,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",62,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",63,0)
 ;if no device then just create transport global
"RTN","XPDT",64,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",65,0)
 Q
"RTN","XPDT",66,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",67,0)
 D HOME^%ZIS
"RTN","XPDT",68,0)
 S DIR(0)="F^3:45",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",69,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",70,0)
 ;if no file, then quit
"RTN","XPDT",71,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",72,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment"
"RTN","XPDT",73,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",74,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",75,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",76,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",77,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",78,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",79,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",80,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",81,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",82,0)
 ;write date and comment header
"RTN","XPDT",83,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",84,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",85,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",86,0)
 U IO(0) Q
"RTN","XPDT",87,0)
 ;
"RTN","XPDT",88,0)
GO S I=1,Y="" U IO
"RTN","XPDT",89,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",90,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",91,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",92,0)
 E  F  D  W $$SUM("**KIDS**:"_Y),! Q:I=XPDT  S Y="",I=I+1
"RTN","XPDT",93,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",94,0)
 ;after the package list write an extra line feed
"RTN","XPDT",95,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",96,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW K ^XTMP("XPDT",XPDA)
"RTN","XPDT",97,0)
 W "**END**",!
"RTN","XPDT",98,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",99,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",100,0)
 ;we're done with device, close it
"RTN","XPDT",101,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",102,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",103,0)
 Q
"RTN","XPDT",104,0)
GW ;global write
"RTN","XPDT",105,0)
 N GR,GCK,GL
"RTN","XPDT",106,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",107,0)
 ;INSTALL NAME line will mark the begining of global for all lines until
"RTN","XPDT",108,0)
 ;the next INSTALL NAME
"RTN","XPDT",109,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",110,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",111,0)
 Q
"RTN","XPDT",112,0)
GPW ;global package write
"RTN","XPDT",113,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",114,0)
 W !
"RTN","XPDT",115,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",116,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",117,0)
 ;GLOBAL line will mark the begining of global for all lines until
"RTN","XPDT",118,0)
 ;the next GLOBAL
"RTN","XPDT",119,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",120,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",121,0)
 Q
"RTN","XPDT",122,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",123,0)
 Q
"RTN","XPDT",124,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",125,0)
 D QUIT
"RTN","XPDT",126,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",127,0)
 D ^%ZISC
"RTN","XPDT",128,0)
 Q
"RTN","XPDT",129,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",130,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",131,0)
 ;ask for next disk
"RTN","XPDT",132,0)
 ;this code is for MSM system only
"RTN","XPDT",133,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",134,0)
 .;write continue flag at end of this file
"RTN","XPDT",135,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",136,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",137,0)
 .C IO U IO(0)
"RTN","XPDT",138,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",139,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",140,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",141,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",142,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",143,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",144,0)
 .;MSM specific code to open HFS
"RTN","XPDT",145,0)
 .O @(""""_IO_""":"_IOPAR) U IO
"RTN","XPDT",146,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",147,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDT",148,0)
 Q X
"RTN","XPDT",149,0)
 ;
"RTN","XPDT",150,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",151,0)
 N Y S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",152,0)
 I '$$RTN^XPDV(Y) W !!,"Pre-Transportation Routine DOESN'T EXIST!!",*7 Q
"RTN","XPDT",153,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",154,0)
 D @Y Q
"RTN","XPDUTL")
0^14^B10805086
"RTN","XPDUTL",1,0)
XPDUTL ;SFISC/RSD - KIDS utilities ; 19 Apr 96 11:29
"RTN","XPDUTL",2,0)
 ;;8.0;KERNEL;**21,28**;Jul 10, 1995
"RTN","XPDUTL",3,0)
 Q
"RTN","XPDUTL",4,0)
VERSION(X) ;Get current version from Package file, X=package name or
"RTN","XPDUTL",5,0)
 ;package namespace
"RTN","XPDUTL",6,0)
 N I
"RTN","XPDUTL",7,0)
 S I=$O(^DIC(9.4,"C",X,0)) S:I'>0 I=$O(^DIC(9.4,"B",X,0))
"RTN","XPDUTL",8,0)
 Q $P($G(^DIC(9.4,+I,"VERSION")),"^")
"RTN","XPDUTL",9,0)
 ;
"RTN","XPDUTL",10,0)
VER(X) ;returns version number from Build file, X=build name
"RTN","XPDUTL",11,0)
 Q:X["*" $P(X,"*",2)
"RTN","XPDUTL",12,0)
 Q $P(X," ",$L(X," "))
"RTN","XPDUTL",13,0)
 ;
"RTN","XPDUTL",14,0)
PKG(X) ;returns package name from Build file, X=build name
"RTN","XPDUTL",15,0)
 Q $S(X["*":$P(X,"*"),1:$P(X," ",1,$L(X," ")-1))
"RTN","XPDUTL",16,0)
 ;
"RTN","XPDUTL",17,0)
PATCH(X) ;return 1 if patch X was installed, X=aaaa*nn.nn*nnn
"RTN","XPDUTL",18,0)
 Q:X'?1.4U1"*"1.2N1"."1.2N.1(1"V",1"T").2N1"*"1.3N 0
"RTN","XPDUTL",19,0)
 N I,J
"RTN","XPDUTL",20,0)
 S I=$O(^DIC(9.4,"C",$P(X,"*"),0)) Q:'I 0
"RTN","XPDUTL",21,0)
 S J=$O(^DIC(9.4,I,22,"B",$P(X,"*",2),0)) Q:'J 0
"RTN","XPDUTL",22,0)
 Q ''$O(^DIC(9.4,I,22,J,"PAH","B",$P(X,"*",3),0))
"RTN","XPDUTL",23,0)
 ;
"RTN","XPDUTL",24,0)
NEWCP(XPD,XPDC,XPDP) ;create new check point, returns 0=error or ien
"RTN","XPDUTL",25,0)
 ;XPD=name, XPDC=call back, XPDP=parameters
"RTN","XPDUTL",26,0)
 Q:$G(XPD)="" 0
"RTN","XPDUTL",27,0)
 N %,XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",28,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",29,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713)
"RTN","XPDUTL",30,0)
 S %=$$FIND1^DIC(XPDI,","_XPDA_",","X",XPD) Q:% %
"RTN","XPDUTL",31,0)
 S XPDF="+1,"_XPDA_",",XPDJ(XPDI,XPDF,.01)=XPD
"RTN","XPDUTL",32,0)
 S:$D(XPDC) XPDJ(XPDI,XPDF,2)=XPDC
"RTN","XPDUTL",33,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",34,0)
 D UPDATE^DIE("","XPDJ","XPDY")
"RTN","XPDUTL",35,0)
 Q $G(XPDY(1))
"RTN","XPDUTL",36,0)
 ;
"RTN","XPDUTL",37,0)
UPCP(XPD,XPDP) ;update check point, returns 0=error or ien
"RTN","XPDUTL",38,0)
 ;XPD=name, XPDP=parameters
"RTN","XPDUTL",39,0)
 N XPDI,XPDJ,XPDF,XPDY
"RTN","XPDUTL",40,0)
 ;XPDCP="INI"=Pre-init, "INIT"=Post-init
"RTN","XPDUTL",41,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",42,0)
 Q:'XPDY 0
"RTN","XPDUTL",43,0)
 S XPDF=XPDY_","_XPDA_","
"RTN","XPDUTL",44,0)
 S:$D(XPDP) XPDJ(XPDI,XPDF,3)=XPDP
"RTN","XPDUTL",45,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",46,0)
 Q XPDY
"RTN","XPDUTL",47,0)
 ;
"RTN","XPDUTL",48,0)
COMCP(XPD) ;complete check point, returns 0=error or date/time
"RTN","XPDUTL",49,0)
 ;XPD=name
"RTN","XPDUTL",50,0)
 N XPDD,XPDI,XPDJ,XPDY
"RTN","XPDUTL",51,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",52,0)
 Q:'XPDY 0
"RTN","XPDUTL",53,0)
 S XPDD=$$NOW^XLFDT,XPDJ(XPDI,XPDY_","_XPDA_",",1)=XPDD
"RTN","XPDUTL",54,0)
 D FILE^DIE("","XPDJ")
"RTN","XPDUTL",55,0)
 Q XPDD
"RTN","XPDUTL",56,0)
 ;
"RTN","XPDUTL",57,0)
VERCP(XPD) ;verify check point, returns 1=completed, 0=not
"RTN","XPDUTL",58,0)
 ;-1=doesn't exist
"RTN","XPDUTL",59,0)
 ;XPD=name
"RTN","XPDUTL",60,0)
 N XPDI,XPDY
"RTN","XPDUTL",61,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",62,0)
 Q:'XPDY -1
"RTN","XPDUTL",63,0)
 Q ''$$GET1^DIQ(XPDI,XPDY_","_XPDA_",",1,"I")
"RTN","XPDUTL",64,0)
 ;
"RTN","XPDUTL",65,0)
PARCP(XPD,XPDF) ;returns parameters of check point
"RTN","XPDUTL",66,0)
 ;XPD=name, XPDF="PRE"
"RTN","XPDUTL",67,0)
 N XPDI,XPDY
"RTN","XPDUTL",68,0)
 I $G(XPDF)="PRE" N XPDCP S XPDCP="INI"
"RTN","XPDUTL",69,0)
 S XPDI=$S(XPDCP="INIT":9.716,1:9.713),XPDY=$$DICCP($G(XPD))
"RTN","XPDUTL",70,0)
 Q:'XPDY 0
"RTN","XPDUTL",71,0)
 Q $$GET1^DIQ(XPDI,XPDY_","_XPDA_",",3,"I")
"RTN","XPDUTL",72,0)
 ;
"RTN","XPDUTL",73,0)
CURCP(XPDF) ;returns current check point
"RTN","XPDUTL",74,0)
 ;XPDF flag - 0=externel, 1=internal
"RTN","XPDUTL",75,0)
 Q $S($G(XPDF):XPDCHECK,1:XPDCHECK(0))
"RTN","XPDUTL",76,0)
 ;
"RTN","XPDUTL",77,0)
WP(X) ;X=global ref
"RTN","XPDUTL",78,0)
 N %
"RTN","XPDUTL",79,0)
 Q:'$D(@X)
"RTN","XPDUTL",80,0)
 F %=1:1 Q:'$D(@X@(%))  W !,@X@(%)
"RTN","XPDUTL",81,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A",X)
"RTN","XPDUTL",82,0)
 Q
"RTN","XPDUTL",83,0)
MES(X) ;record message, X=message or an array passed by reference
"RTN","XPDUTL",84,0)
 N %
"RTN","XPDUTL",85,0)
 I $D(X)#2 S %=X K X S X(1)=%
"RTN","XPDUTL",86,0)
 ;write message
"RTN","XPDUTL",87,0)
 F %=1:1 Q:'$D(X(%))  W !,X(%)
"RTN","XPDUTL",88,0)
 Q:'$G(XPDA)  D WP^DIE(9.7,XPDA_",",20,"A","X")
"RTN","XPDUTL",89,0)
 Q
"RTN","XPDUTL",90,0)
BMES(X) ;add blank line before message
"RTN","XPDUTL",91,0)
 N %
"RTN","XPDUTL",92,0)
 I $D(X)#2 S %=X K X S X(1)=" ",X(2)=%
"RTN","XPDUTL",93,0)
 D MES(.X)
"RTN","XPDUTL",94,0)
 Q
"RTN","XPDUTL",95,0)
RTNUP(X,Y) ;update routine action, X=routine, Y=action
"RTN","XPDUTL",96,0)
 ;actions:  1=delete, 2=skip
"RTN","XPDUTL",97,0)
 N %
"RTN","XPDUTL",98,0)
 ;set action to Y
"RTN","XPDUTL",99,0)
 Q:'$G(Y)!'$D(^XTMP("XPDI",$G(XPDA),"RTN",X)) 0 S $P(^(X),U)=+Y
"RTN","XPDUTL",100,0)
 Q 1
"RTN","XPDUTL",101,0)
 ;get Build ien
"RTN","XPDUTL",102,0)
 S Y=$O(^XTMP("XPDI",XPDA,"BLD",0))
"RTN","XPDUTL",103,0)
 ;remove checksum when updating action, since action can only be
"RTN","XPDUTL",104,0)
 ;delete or skip, not sure if we want to do this
"RTN","XPDUTL",105,0)
 S:$P(%,U,2) $P(^XTMP("XPDI",XPDA,"BLD",Y,"KRN",9.8,"NM",$P(%,U,2),0),U,4)=""
"RTN","XPDUTL",106,0)
 Q 1
"RTN","XPDUTL",107,0)
DICCP(X) ;lookup check point, returns ien or 0
"RTN","XPDUTL",108,0)
 Q:$G(X)="" 0
"RTN","XPDUTL",109,0)
 ;if they pass ien, fail if can't find
"RTN","XPDUTL",110,0)
 I X=+X S Y=X Q:'$D(^XPD(9.7,XPDA,XPDCP,Y,0)) 0
"RTN","XPDUTL",111,0)
 E  S Y=$$FIND1^DIC(XPDI,","_XPDA_",","X",X)
"RTN","XPDUTL",112,0)
 Q Y
"RTN","XPDUTL",113,0)
 ;
"RTN","XPDUTL",114,0)
PRODE(XPDN,XPD) ;enable/disable protocols, return 1 for success
"RTN","XPDUTL",115,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",116,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",117,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",118,0)
 D KIDS^XQOO1(XPDSET,101,XPDN,.XPD)
"RTN","XPDUTL",119,0)
 Q $S(XPD<0:0,1:1)
"RTN","XPDUTL",120,0)
 ;
"RTN","XPDUTL",121,0)
OPTDE(XPDN,XPD) ;enable/disable options, return 1 for success
"RTN","XPDUTL",122,0)
 ;XPDN=protocol name, XPD=1-enable, 0-disable
"RTN","XPDUTL",123,0)
 Q:$G(XPDN)="" 0
"RTN","XPDUTL",124,0)
 S XPD=+$G(XPD)
"RTN","XPDUTL",125,0)
 D KIDS^XQOO1(XPDSET,19,XPDN,.XPD)
"RTN","XPDUTL",126,0)
 Q $S(XPD<0:0,1:1)
"RTN","XQABLOAD")
0^9^B20716428
"RTN","XQABLOAD",1,0)
XQABLOAD ;ISC-SF.SEA/JLI - SETUP IF ALPHA/BETA TEST SITE ;04/17/96  13:25
"RTN","XQABLOAD",2,0)
 ;;8.0;KERNEL;**28**;Jul 10, 1995
"RTN","XQABLOAD",3,0)
EN(DAINSTAL) ;
"RTN","XQABLOAD",4,0)
 N DIFROM,XPD0,XPD1,XPD,XPDV,Y,D0,DA,DIC,DIE,DIK,DLAYGO,DR,X,XMY,XMDUZ,XMSUB,XMTEXT
"RTN","XQABLOAD",5,0)
 Q:'$D(^XPD(9.6,+$G(DAINSTAL),0))  S XPD0=^(0)
"RTN","XQABLOAD",6,0)
 S XPD=$P(^DIC(9.4,+$P(XPD0,U,2),0),U)
"RTN","XQABLOAD",7,0)
 S XPDV=$$VER^XPDUTL($P(XPD0,U))
"RTN","XQABLOAD",8,0)
 X ^%ZOSF("UCI") I Y'=^%ZOSF("PROD") G KILL
"RTN","XQABLOAD",9,0)
 S X=$G(^XPD(9.6,DAINSTAL,"ABPKG")) Q:X=""  S XQADRS=$P(X,U,3) G:XQADRS="" KILL G:XQADRS'["@" KILL
"RTN","XQABLOAD",10,0)
 S (X,XQPKG)=XPD G:X="" KILL
"RTN","XQABLOAD",11,0)
 S DIC(0)="MX",DIC="^XTV(8989.3,1,""ABPKG"",",DA(1)=1,D0=1 D ^DIC S XQDA=+Y K DIC
"RTN","XQABLOAD",12,0)
 S Y=$P(^XPD(9.6,DAINSTAL,"ABPKG"),U) I Y'="y" D:XQDA>0 RMVTEST G SENDMESG
"RTN","XQABLOAD",13,0)
 D:XQDA>0 CLROPTS I XQDA'>0 S DA(1)=1,D0=1,DIC(0)="L",DLAYGO=8989.3,DIC="^XTV(8989.3,1,""ABPKG"",",DIC("P")=8989.332 D ^DIC S XQDA=+Y
"RTN","XQABLOAD",14,0)
 D:XQDA>0 SETOPTS
"RTN","XQABLOAD",15,0)
 ;
"RTN","XQABLOAD",16,0)
SENDMESG ;
"RTN","XQABLOAD",17,0)
KILL K X1,X2,X3,XQ0,XQ1,XQ2,XQ3,XQ4,XQA,XQADRS,XQBLNK,XQC,XQD1,XQDA,XQI,XQID,XQJ,XQN,XQPKG,XQZ
"RTN","XQABLOAD",18,0)
 Q
"RTN","XQABLOAD",19,0)
 Q
"RTN","XQABLOAD",20,0)
 ;
"RTN","XQABLOAD",21,0)
SETOPTS ;
"RTN","XQABLOAD",22,0)
 S $P(^XTV(8989.3,1,"ABPKG",XQDA,0),U,2,4)=DT_U_XQADRS_U_XPDV
"RTN","XQABLOAD",23,0)
 F XQI=0:0 S XQI=$O(^XPD(9.6,DAINSTAL,"ABNS",XQI)) Q:XQI'>0  D
"RTN","XQABLOAD",24,0)
 . S X=^XPD(9.6,DAINSTAL,"ABNS",XQI,0),DIC="^XTV(8989.3,1,""ABPKG"",XQDA,1,",DA(1)=XQDA,DA(2)=1,DIC(0)="ML",DLAYGO=8989.3,DIC("P")=8989.3321 D:$E(X)="%" FILE^DICN D:$E(X)'="%" ^DIC K DIC I Y>0 K XQID(X) D SET1
"RTN","XQABLOAD",25,0)
 S XQID="" F XQI=0:0 S XQID=$O(XQID(XQID)) Q:XQID=""  S DIC="^XTV(8989.3,1,""ABPKG"",XQDA,1,",DIC(0)="M",X=XQID,DA(1)=XQDA,DA(2)=1 K XQID(XQID) D ^DIC I Y>0 S DA=+Y,DIE=DIC,DR=".01///@" D ^DIE
"RTN","XQABLOAD",26,0)
 Q
"RTN","XQABLOAD",27,0)
SET1 ;
"RTN","XQABLOAD",28,0)
 S XQD1=+Y F XQJ=0:0 S XQJ=$O(^XBD(9.6,DAINSTAL,"ABNS",XQI,1,XQJ)) Q:XQJ'>0  S X=^(XQJ,0) S DIC="^XTV(8989.3,1,""ABPKG"",XQDA,1,XQD1,1,",DIC(0)="ML",DLAYGO=8989.3,DIC("P")=8989.33211,DA(3)=1,DA(2)=XQDA,DA(1)=XQD1 D ^DIC K DIC
"RTN","XQABLOAD",29,0)
 Q
"RTN","XQABLOAD",30,0)
 ;
"RTN","XQABLOAD",31,0)
RMVTEST D CLROPTS S DIK="^XTV(8989.3,1,""ABPKG"",",DA(1)=1,DA=XQDA D ^DIK I $O(^XTV(8989.3,1,"ABPKG",0))'>0 K ^XTV(8989.3,1,"ABOPT")
"RTN","XQABLOAD",32,0)
 Q
"RTN","XQABLOAD",33,0)
 ;
"RTN","XQABLOAD",34,0)
CLROPTS S $P(XQBLNK," ",30)=" "
"RTN","XQABLOAD",35,0)
 K ^TMP($J,"XQAB"),^("XQOPT")
"RTN","XQABLOAD",36,0)
 S X1=$P(^XTV(8989.3,1,"ABPKG",XQDA,0),U,2),X2=$P(^(0),U,3),X3=$P(^(0),U,4),X3=$S(X3="":$E(XPDV,1,$L(XPDV)-1)_($E(XPDV,$L(XPDV))-1),1:X3)
"RTN","XQABLOAD",37,0)
 S ^TMP($J,"XQAB",1)="  "_XQPKG_"   v"_X3_"    OPTION USAGE SINCE "_$E(X1,4,5)_"-"_$E(X1,6,7)_"-"_$E(X1,2,3),^(2)=" ",XQC=2 D GETDATA I $D(^TMP($J,"XQOPT")) D OUTPUT
"RTN","XQABLOAD",38,0)
 Q
"RTN","XQABLOAD",39,0)
GETDATA ;
"RTN","XQABLOAD",40,0)
 F XQ1=0:0 S XQ1=$O(^XTV(8989.3,1,"ABPKG",XQDA,1,XQ1)) Q:XQ1'>0  S XQID=$P(^(XQ1,0),U),XQID(XQID)="" D CHECK
"RTN","XQABLOAD",41,0)
 Q
"RTN","XQABLOAD",42,0)
 ;
"RTN","XQABLOAD",43,0)
CHECK S XQA=$E(XQID,1,$L(XQID)-1)_$C($A($E(XQID,$L(XQID)))-1)_"z"
"RTN","XQABLOAD",44,0)
 F XQ2=0:0 S XQA=$O(^DIC(19,"B",XQA)) Q:XQA=""!($E(XQA,1,$L(XQID))'=XQID)  I $E(XQA,$L(XQID)+1)'="Z" D CHK2
"RTN","XQABLOAD",45,0)
 Q
"RTN","XQABLOAD",46,0)
 ;
"RTN","XQABLOAD",47,0)
CHK2 F XQ3=0:0 S XQ3=$O(^XTV(8989.3,1,"ABPKG",XQDA,1,XQ1,1,XQ3)) Q:XQ3'>0  S XQ4=$P(^(XQ3,0),U) Q:$E(XQA,1,$L(XQ4))=XQ4
"RTN","XQABLOAD",48,0)
 I XQ3'>0 F XQ4=0:0 S XQ4=$O(^DIC(19,"B",XQA,XQ4)) Q:XQ4'>0  S XQN=$P(^DIC(19,XQ4,0),U,1,4),X=$S($D(^XTV(8989.3,1,"ABOPT",XQ4,0)):+$P(^(0),U,2),1:0) K ^XTV(8989.3,1,"ABOPT",XQ4,0) S ^TMP($J,"XQOPT",XQID,(X+1),XQA,XQ4)=XQ4_U_X_U_XQN
"RTN","XQABLOAD",49,0)
 Q
"RTN","XQABLOAD",50,0)
 ;
"RTN","XQABLOAD",51,0)
OUTPUT S XQID=""
"RTN","XQABLOAD",52,0)
 F XQ0=0:0 S XQID=$O(^TMP($J,"XQOPT",XQID)) Q:XQID=""  D SPACE F XQ1=0:0 S XQ1=$O(^TMP($J,"XQOPT",XQID,XQ1)) Q:XQ1'>0  S XQA="" F XQ2=0:0 S XQA=$O(^TMP($J,"XQOPT",XQID,XQ1,XQA)) Q:XQA=""  D OUTA
"RTN","XQABLOAD",53,0)
 S XMY(XQADRS)="",XMY(DUZ)="",XMDUZ=.5,XMSUB=XQPKG_" "_XQ3_" ALPHA/BETA TEST OPTION USAGE",XMTEXT="^TMP($J,""XQAB""," D ^XMD K ^TMP($J,"XQAB"),^("XQOPT"),XMY,XMDUZ,XMSUB,XMTEXT
"RTN","XQABLOAD",54,0)
 Q
"RTN","XQABLOAD",55,0)
 Q
"RTN","XQABLOAD",56,0)
 ;
"RTN","XQABLOAD",57,0)
SPACE S XQC=XQC+1,^TMP($J,"XQAB",XQC)=" "
"RTN","XQABLOAD",58,0)
 Q
"RTN","XQABLOAD",59,0)
OUTA ;
"RTN","XQABLOAD",60,0)
 F XQ3=0:0 S XQ3=$O(^TMP($J,"XQOPT",XQID,XQ1,XQA,XQ3)) Q:XQ3'>0  S X=^(XQ3),XQZ=$P(X,U,2),Y=$P(X,U,3,99) D MAIL
"RTN","XQABLOAD",61,0)
 Q
"RTN","XQABLOAD",62,0)
MAIL ;
"RTN","XQABLOAD",63,0)
 S XQC=XQC+1,^TMP($J,"XQAB",XQC)=$E($E($P(Y,U),1,24)_XQBLNK,1,26)_$P(Y,U,4)_"    "_$J(+XQZ,6)_"   "_$E($P(Y,U,2),1,38)
"RTN","XQABLOAD",64,0)
 Q
"RTN","XQABLOAD",65,0)
 ;
"RTN","XQABTMP")
0^1^B3335020
"RTN","XQABTMP",1,0)
XQABTMP ;ISC-SF.SEA/JLI - temporary routine for clean up ;04/16/96  10:49
"RTN","XQABTMP",2,0)
 ;;8.0;KERNEL;**28**;Jul 10, 1995
"RTN","XQABTMP",3,0)
 ;This routine can be used to remove Packages from Alpha/Beta testing
"RTN","XQABTMP",4,0)
EN ;ask for Package name and remove A/B testing
"RTN","XQABTMP",5,0)
 N DA,DIC,DIK,DIR,DIRUT,DIROUT,X,XQ1,XQ2,XQ3,XQ4,XQA,XQDA,XQID,Y
"RTN","XQABTMP",6,0)
 S DIC="^XTV(8989.3,1,""ABPKG"",",DIC(0)="AEMQZ"
"RTN","XQABTMP",7,0)
 ;don't allow if there is an address, this can be used to only show
"RTN","XQABTMP",8,0)
 ;you local packages that you want to remove.
"RTN","XQABTMP",9,0)
 ;S DIC("S")="I $P(^(0),U,3)="""""
"RTN","XQABTMP",10,0)
 D ^DIC K DIC Q:Y<0
"RTN","XQABTMP",11,0)
 S XQDA=+Y,DIR(0)="Y",DIR("A")="You want to remove "_Y(0,0)_" from Alpha/Beta Testing"
"RTN","XQABTMP",12,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XQABTMP",13,0)
 D RMVTEST W !,"Done.",!
"RTN","XQABTMP",14,0)
 Q
"RTN","XQABTMP",15,0)
 ;
"RTN","XQABTMP",16,0)
RMVTEST D GETDATA
"RTN","XQABTMP",17,0)
 S DIK="^XTV(8989.3,1,""ABPKG"",",DA(1)=1,DA=XQDA
"RTN","XQABTMP",18,0)
 D ^DIK
"RTN","XQABTMP",19,0)
 I $O(^XTV(8989.3,1,"ABPKG",0))'>0 K ^XTV(8989.3,1,"ABOPT")
"RTN","XQABTMP",20,0)
 Q
"RTN","XQABTMP",21,0)
 ;
"RTN","XQABTMP",22,0)
GETDATA ;
"RTN","XQABTMP",23,0)
 F XQ1=0:0 S XQ1=$O(^XTV(8989.3,1,"ABPKG",XQDA,1,XQ1)) Q:XQ1'>0  S XQID=$P(^(XQ1,0),U),XQID(XQID)="" D CHECK
"RTN","XQABTMP",24,0)
 Q
"RTN","XQABTMP",25,0)
 ;
"RTN","XQABTMP",26,0)
CHECK S XQA=$E(XQID,1,$L(XQID)-1)_$C($A($E(XQID,$L(XQID)))-1)_"z"
"RTN","XQABTMP",27,0)
 F XQ2=0:0 S XQA=$O(^DIC(19,"B",XQA)) Q:XQA=""!($E(XQA,1,$L(XQID))'=XQID)  I $E(XQA,$L(XQID)+1)'="Z" D CHK2
"RTN","XQABTMP",28,0)
 Q
"RTN","XQABTMP",29,0)
 ;
"RTN","XQABTMP",30,0)
CHK2 F XQ3=0:0 S XQ3=$O(^XTV(8989.3,1,"ABPKG",XQDA,1,XQ1,1,XQ3)) Q:XQ3'>0  S XQ4=$P(^(XQ3,0),U) Q:$E(XQA,1,$L(XQ4))=XQ4
"RTN","XQABTMP",31,0)
 I XQ3'>0 F XQ4=0:0 S XQ4=$O(^DIC(19,"B",XQA,XQ4)) Q:XQ4'>0  K ^XTV(8989.3,1,"ABOPT",XQ4,0)
"RTN","XQABTMP",32,0)
 Q
"RTN","XQCS")
0^10^B24112928
"RTN","XQCS",1,0)
XQCS ;Luke/SEA - Client/Server Utilities ;04/17/96  14:02
"RTN","XQCS",2,0)
 ;;8.0;KERNEL;**15,28**;Jul 10, 1995
"RTN","XQCS",3,0)
 ;
"RTN","XQCS",4,0)
CHK(XQUSR,XQOPT,XQRPC) ;Check to see if this user can run this RPC from
"RTN","XQCS",5,0)
 ;this option.
"RTN","XQCS",6,0)
 ;
"RTN","XQCS",7,0)
 ;Input: XQUSR-DUZ of user
"RTN","XQCS",8,0)
 ;       XQOPT - name or IEN of the option
"RTN","XQCS",9,0)
 ;       XQRPC - name or IEN of the remote procedure.  If this
"RTN","XQCS",10,0)
 ;		variable is null no check is made to see if a
"RTN","XQCS",11,0)
 ;		procedure is allowed.  That is, we only look
"RTN","XQCS",12,0)
 ;		to see if the option is there and  if the user
"RTN","XQCS",13,0)
 ;		has been assigned access to it.
"RTN","XQCS",14,0)
 ;
"RTN","XQCS",15,0)
 ;Output: XQMES - returned as 1 if the user is allowed to use this
"RTN","XQCS",16,0)
 ;        option (and RPC is valid if XQRPC input variable is not
"RTN","XQCS",17,0)
 ;        null), or as a message string explaining why the option
"RTN","XQCS",18,0)
 ;        or RPC is not allowed.
"RTN","XQCS",19,0)
 ;
"RTN","XQCS",20,0)
 ;Rules: If M code exsists in ^DIC(19,option#,"RPC",rpc#,1) the
"RTN","XQCS",21,0)
 ;       RULES field for a corresponding RPC, the software sets
"RTN","XQCS",22,0)
 ;       the flag XQRPCOK to 1 and executes the field's code.
"RTN","XQCS",23,0)
 ;       If the flag is returned as less than 1, the request for
"RTN","XQCS",24,0)
 ;       use of that RPC is denied.  Rules are written by the
"RTN","XQCS",25,0)
 ;       package developer and are not required.
"RTN","XQCS",26,0)
 ;
"RTN","XQCS",27,0)
 ;
"RTN","XQCS",28,0)
 N %,XQKEY,XQRPCOK
"RTN","XQCS",29,0)
 ;
"RTN","XQCS",30,0)
 S XQMES=1
"RTN","XQCS",31,0)
 D OPT I 'XQMES Q XQMES
"RTN","XQCS",32,0)
 ;D USER I 'XQMES Q XQMES
"RTN","XQCS",33,0)
 D:XQUSR>0 USER I 'XQMES Q XQMES
"RTN","XQCS",34,0)
 S %=$G(XQRPC) I %]"" S XQRPC=% D RPC I 'XQMES Q XQMES
"RTN","XQCS",35,0)
 Q XQMES
"RTN","XQCS",36,0)
 ;
"RTN","XQCS",37,0)
 ;
"RTN","XQCS",38,0)
OPT ;See if the option is there and is a broker type option
"RTN","XQCS",39,0)
 I XQOPT'=+XQOPT S XQOPT=$O(^DIC(19,"B",XQOPT,0)) I XQOPT'>0 S XQMES="No such option in the ""B"" cross reference of the Option File." Q
"RTN","XQCS",40,0)
 I '$D(^DIC(19,XQOPT,0)) S XQMES="No such option in the Option File." Q
"RTN","XQCS",41,0)
 I $P(^DIC(19,XQOPT,0),U,4)'="B" S XQMES="This option is not a Client/Server-type option." Q
"RTN","XQCS",42,0)
 Q
"RTN","XQCS",43,0)
 ;
"RTN","XQCS",44,0)
 ;
"RTN","XQCS",45,0)
RPC     ;See if rpc exsists, is registered, is locked, etc.
"RTN","XQCS",46,0)
 I '$D(^DIC(19,XQOPT,"RPC",0)) S XQMES="No RPC subfile defined for the option "_$P(^DIC(19,XQOPT,0),U)_"." Q
"RTN","XQCS",47,0)
 I $P(^DIC(19,XQOPT,"RPC",0),U,4)<1 S XQMES="No remote procedure calls registered for the option "_$P(^DIC(19,XQOPT,0),U)_"." Q
"RTN","XQCS",48,0)
 I XQRPC'=+XQRPC S XQRPC=$O(^XWB(8994,"B",XQRPC,0)) I XQRPC'>0 S XQMES="No RPC by that name in the ""B"" cross-reference of the Remote Procedure File." Q
"RTN","XQCS",49,0)
 I '$D(^XWB(8994,XQRPC,0)) S XQMES="No such procedure in the Remote Procedure File." Q
"RTN","XQCS",50,0)
 I '$D(^DIC(19,XQOPT,"RPC","B",XQRPC)) S XQMES="The remote procedure "_$P(^XWB(8994,XQRPC,0),U)_" is not registered to the option "_$P(^DIC(19,XQOPT,0),U)_"." Q
"RTN","XQCS",51,0)
 S %=$O(^DIC(19,XQOPT,"RPC","B",XQRPC,0)),XQKEY=$P(^DIC(19,XQOPT,"RPC",%,0),U,2)
"RTN","XQCS",52,0)
 I $L(XQKEY) I '$D(^XUSEC(XQKEY,XQUSR)) S XQMES="Remote procedure is locked." Q
"RTN","XQCS",53,0)
 ;
"RTN","XQCS",54,0)
RULES ;Check the rules for this RPC
"RTN","XQCS",55,0)
 S %=$O(^DIC(19,XQOPT,"RPC","B",XQRPC,0))
"RTN","XQCS",56,0)
 I $D(^DIC(19,XQOPT,"RPC",%,1)),$L(^(1)) D
"RTN","XQCS",57,0)
 .S XQRPCOK=1
"RTN","XQCS",58,0)
 .X ^DIC(19,XQOPT,"RPC",%,1)
"RTN","XQCS",59,0)
 .I XQRPCOK<1 S XQMES="Remote procedure request failed rules test."
"RTN","XQCS",60,0)
 .Q
"RTN","XQCS",61,0)
 Q
"RTN","XQCS",62,0)
 ;
"RTN","XQCS",63,0)
 ;
"RTN","XQCS",64,0)
 ;
"RTN","XQCS",65,0)
USER ;See if XQUSR has been assigned access this option or not
"RTN","XQCS",66,0)
 ;
"RTN","XQCS",67,0)
 S XQMES=1,(XQSMY,%)=0
"RTN","XQCS",68,0)
 ;
"RTN","XQCS",69,0)
TOP ;See if XQOPT is on top level of a tree: primary, secondary, or common
"RTN","XQCS",70,0)
 S XQPM=+^VA(200,XQUSR,201) I XQOPT=XQPM Q
"RTN","XQCS",71,0)
 ;
"RTN","XQCS",72,0)
 I $D(^VA(200,XQUSR,203,0)),$P(^(0),U,4)>0 S XQSMY=1 D
"RTN","XQCS",73,0)
 .S XQDIC="U"_XQUSR I $S('$D(^XUTL("XQO",XQDIC,0)):1,'$D(^VA(200,XQUSR,203.1)):1,1:^VA(200,XQUSR,203.1)'=$P(^XUTL("XQO",XQDIC,0),U,2)) D ^XQSET
"RTN","XQCS",74,0)
 .S (XQSM,%)=0
"RTN","XQCS",75,0)
 .F  Q:%  S XQSM=$O(^XUTL("XQO",XQDIC,"^",XQSM)) Q:XQSM=""  I XQSM=XQOPT S %=1 Q
"RTN","XQCS",76,0)
 .Q
"RTN","XQCS",77,0)
 I % Q
"RTN","XQCS",78,0)
 ;
"RTN","XQCS",79,0)
 I $D(^DIC(19,"B","XUCOMMAND")) D
"RTN","XQCS",80,0)
 .S XQCOM=$O(^DIC(19,"B","XUCOMMAND",0))
"RTN","XQCS",81,0)
 .I $S('$D(^XUTL("XQO","PXU",0)):1,'$D(^DIC(19,XQCOM,99.1)):1,(^XUTL("XQO","PXU",0)'=^DIC(19,XQCOM,99.1)):1,1:0) D BLDPXU
"RTN","XQCS",82,0)
 .S %=0
"RTN","XQCS",83,0)
 .I $D(^XUTL("XQO","PXU","^",XQOPT)) S %=1
"RTN","XQCS",84,0)
 .Q
"RTN","XQCS",85,0)
 I % Q
"RTN","XQCS",86,0)
 ;
"RTN","XQCS",87,0)
DEEP ;See if it's under the top somewhere - start with primary tree
"RTN","XQCS",88,0)
 S XQDIC="P"_XQPM
"RTN","XQCS",89,0)
 I $P(^DIC(19,XQPM,0),U,4)="M",'$D(^XUTL("XQO",XQDIC,0)) D BUILD
"RTN","XQCS",90,0)
 I $D(^XUTL("XQO",XQDIC,"^",XQOPT)) Q
"RTN","XQCS",91,0)
 ;
"RTN","XQCS",92,0)
 ;Check secondary trees
"RTN","XQCS",93,0)
 S (XQSM,%)=0
"RTN","XQCS",94,0)
 I XQSMY F  Q:%  S XQSM=$O(^XUTL("XQO","U"_XQUSR,"^",XQSM)) Q:XQSM=""  D
"RTN","XQCS",95,0)
 .S XQDIC="P"_XQSM
"RTN","XQCS",96,0)
 .I $P(^DIC(19,XQSM,0),U,4)="M",'$D(^XUTL("XQO",XQDIC,0)) D BUILD
"RTN","XQCS",97,0)
 .I $D(^XUTL("XQO",XQDIC,"^",XQOPT)) S %=1 Q
"RTN","XQCS",98,0)
 .Q
"RTN","XQCS",99,0)
 I % Q
"RTN","XQCS",100,0)
 S XQMES="User "_$P(^VA(200,XQUSR,0),U)_" does not have access to option "_$p(^DIC(19,XQOPT,0),U) Q
"RTN","XQCS",101,0)
 ;
"RTN","XQCS",102,0)
 ;End of main program
"RTN","XQCS",103,0)
 ;
"RTN","XQCS",104,0)
BUILD ;Build a single menu tree (XQDIC e.g. "P"_nnn) on the fly
"RTN","XQCS",105,0)
 Q:'$D(XQDIC)
"RTN","XQCS",106,0)
 K ^XUTL("XQO",XQDIC)
"RTN","XQCS",107,0)
 N %,%H,%TG,%Y,D,I,J,K,L,UU,V,X,Y,Z
"RTN","XQCS",108,0)
 N XQL,XQN,XQRE,XQK,XQI,XQPX,XQXUF,XQSAV,XQDATE,XQP,XQR,XQJ
"RTN","XQCS",109,0)
 N XQA,XQD,XQE,XQF,XQFL,XQSAVE ;From PMOK^XQ8
"RTN","XQCS",110,0)
 S XQXUF=1 D REBLD^XQ8
"RTN","XQCS",111,0)
 Q
"RTN","XQCS",112,0)
 ;
"RTN","XQCS",113,0)
BLDPXU ;Build ^XUTL("XQO","PXU") the XUCOMMAND compiled options tree
"RTN","XQCS",114,0)
 S:'$D(XQDIC) XQDIC="PXU"
"RTN","XQCS",115,0)
 N %,%H,%TG,%Y,D,I,J,K,L,UU,V,X,Y,Z
"RTN","XQCS",116,0)
 N XQCOM,XQDATE,XQI,XQJ,XQK,XQL,XQN,XQP,XQPX,XQR,XQRE,XQSAV
"RTN","XQCS",117,0)
 N XQA,XQD,XQE,XQF,XQFL,XQSAVE ;From PMOK^XQ8
"RTN","XQCS",118,0)
 K ^XUTL("XQO","PXU")
"RTN","XQCS",119,0)
 S XQSAV=XQDIC
"RTN","XQCS",120,0)
 S XQDIC="PXU",XQCOM=$O(^DIC(19,"B","XUCOMMAND",0)) Q:XQCOM'>0 
"RTN","XQCS",121,0)
 S Y=XQCOM,%="",(L,X(0))=0,(XQPX,XQD)=Y D TREE1^XQ8
"RTN","XQCS",122,0)
 S %H=$H,^XUTL("XQO","PXU",0)=%H,^DIC(19,XQCOM,99.1)=%H
"RTN","XQCS",123,0)
 S XQDIC=XQSAV
"RTN","XQCS",124,0)
 Q
"RTN","XQSET")
0^11^B17550216
"RTN","XQSET",1,0)
XQSET ;MJM/SEA - Rebuild display/user XUTL("XQO") ;04/17/96  14:01
"RTN","XQSET",2,0)
 ;;8.0;KERNEL;**28**;Jul 10, 1995
"RTN","XQSET",3,0)
SET ;Rebuild the +XQDIC and "U"_DUZ nodes
"RTN","XQSET",4,0)
 K ^XUTL("XQO",XQDIC)
"RTN","XQSET",5,0)
 I XQDIC=+XQDIC,'$D(^DIC(19,XQDIC,0)) Q
"RTN","XQSET",6,0)
 F XQSI=0:0 S XQSI=$S(+XQDIC:$O(^DIC(19,XQDIC,10,XQSI)),1:$O(^VA(200,DUZ,203,XQSI))) Q:XQSI'>0  I $D(^(XQSI,0)) S XQSY=^(0) D SET1
"RTN","XQSET",7,0)
 S XQSK=250,XQSD="",XQSM=1,XQSY=0,XQNO=0
"RTN","XQSET",8,0)
 F XQSI=0:0 S XQSY=$O(XQST(XQSY)) Q:XQSY=""!($E(XQSY,1,4)="ZZZZ")  D
"RTN","XQSET",9,0)
 .S XQS0=+XQST(XQSY)
"RTN","XQSET",10,0)
 .D DIS
"RTN","XQSET",11,0)
 .S:(XQSK<$L(XQS0)) ^XUTL("XQO",XQDIC,0,XQSM)=XQSD,XQSD="",XQSK=250,XQSM=XQSM+1 
"RTN","XQSET",12,0)
 .I XQNO S XQNO=0 Q
"RTN","XQSET",13,0)
 .S XQSD=XQSD_XQS0,XQSK=XQSK-$L(XQS0)
"RTN","XQSET",14,0)
 .Q
"RTN","XQSET",15,0)
 I XQDIC=+XQDIC,$D(^DIC(19,XQDIC,0))#2 S:'$D(^DIC(19,XQDIC,99)) ^DIC(19,XQDIC,99)=$H S %H=^DIC(19,XQDIC,99)
"RTN","XQSET",16,0)
 I XQDIC'=+XQDIC S:'$D(^VA(200,DUZ,203.1)) ^VA(200,DUZ,203.1)=$H S %H=^VA(200,DUZ,203.1)
"RTN","XQSET",17,0)
 S ^XUTL("XQO",XQDIC,0,XQSM)=XQSD,^XUTL("XQO",XQDIC,0)=XQSM_U_%H
"RTN","XQSET",18,0)
 S XQSY=0 F XQSI=0:0 S XQSY=$O(XQST(XQSY)) Q:XQSY=""  S %=XQST(XQSY),XQSK=$E(XQSY,5,99) D:$E(XQSK,1)=" " XBLK S:$L(XQSK) ^XUTL("XQO",XQDIC,XQSK)=%
"RTN","XQSET",19,0)
 K %,%H,X,XQSA,XQSB,XQSD,XQSDO,XQSI,XQSL,XQSK,XQS0,XQSOO,XQSPR,XQSN,XQST,XQSM,XQSX,XQSZ,XQSY
"RTN","XQSET",20,0)
 Q
"RTN","XQSET",21,0)
 ;
"RTN","XQSET",22,0)
SET1 Q:'$D(^DIC(19,+XQSY,0))  S XQS0=^(0),X=$S($D(^("U")):^("U"),1:"") I X="" S X=$E($P(XQS0,U,2),1,30) D UP S ^("U")=X
"RTN","XQSET",23,0)
 S XQSOO=$P(XQS0,U,3),XQS0=$P(XQS0,U,1,2)_U_($S($P(XQS0,U,3)]"":1,1:""))_U_$P(XQS0,U,4,99)
"RTN","XQSET",24,0)
 S (XQSX,XQSZ)="",%=$P(XQS0,U,9) I %]"",$L(%)>2 S XQSX=%_"MO-FR",XQSZ="MO-FR "_%
"RTN","XQSET",25,0)
 I $D(^DIC(19,+XQSY,3.91)) F XQSL=0:0 S XQSL=$O(^DIC(19,+XQSY,3.91,XQSL)) Q:XQSL'>0  I ^(XQSL,0)]"" S XQSX=$S(XQSX'="":XQSX_";",1:"")_$P(^(0),U,1)_$P(^(0),U,2),XQSZ=$S(XQSZ'="":XQSZ_"; ",1:"")_$P(^(0),U,2)_" "_$P(^(0),U,1)
"RTN","XQSET",26,0)
 I XQSX]"" S $P(XQS0,U,9)=XQSX
"RTN","XQSET",27,0)
 S XQSX="" I $P(XQS0,U,16),$D(^DIC(19,+XQSY,3)) S XQSX=$P(^(3),U) I XQSX'="" S $P(XQS0,U,16)=XQSX
"RTN","XQSET",28,0)
 S XQSN=$P(XQSY,U,2),XQSDO=$P(XQSY,U,3),^XUTL("XQO",XQDIC,"^",+XQSY)=XQSN_U_$P(XQS0,U,1,4)_"^^"_$P(XQS0,U,6,99)
"RTN","XQSET",29,0)
 I $L(X) S:X?.N X=" "_X S X=$S($L(XQSN):"ZZZZ",$L(XQSDO):$E(0,1,($L(XQSDO*100)=3))_(XQSDO*100),1:"BBBB")_X D:$D(XQST(X)) SET3 S:$P(XQS0,U,4)'="B" XQST(X)=+XQSY_"^1"
"RTN","XQSET",30,0)
 I $L(XQSN) S X=XQSN D UP Q:'$L(X)  S:X?.N X=$E("    ",1,5-$L(X))_X S X=$S($L(XQSDO):$E(0,1,($L(XQSDO*100)=3))_(XQSDO*100),1:"AAAA")_X D:$D(XQST(X)) SET3 S:$P(XQS0,U,4)'="B" XQST(X)=+XQSY_"^0"
"RTN","XQSET",31,0)
 S:XQSOO]"" XQST(X,"OO")=XQSOO
"RTN","XQSET",32,0)
 S:XQSZ]"" XQST(X,"TM")=XQSZ
"RTN","XQSET",33,0)
 Q
"RTN","XQSET",34,0)
SET3 S XQSD=X F I=0:0 S XQSM=$O(XQST(XQSD)) Q:($P(XQSM,U,1)'=X)  S XQSD=XQSM
"RTN","XQSET",35,0)
 S I=+$P(XQSD,U,2) S X=X_U_(I+1) Q
"RTN","XQSET",36,0)
CK ;
"RTN","XQSET",37,0)
 S %=$P(^DIC(19,D0,0),U,6),%Y=$P(^DIC(19,D0,0),U,1) I $S($L(%):$D(^XUSEC(%,DUZ)),1:1)
"RTN","XQSET",38,0)
 Q:'$T
"RTN","XQSET",39,0)
 I DUZ(0)="@"!$D(^XUSEC("XUMGR",DUZ))!$D(^VA(200,DUZ,19.5,Y,0))
"RTN","XQSET",40,0)
 Q:'$T
"RTN","XQSET",41,0)
CK1 S %=$P(^DIC(19,D0,0),U,4),%Y=$P(^DIC(19,Y,0),U,4) I $S((%'="O"&(%'="Q"))&(%Y'="Q"):1,(%="O"&(%Y="O")):1,(%="Q"&((%Y="O")!(%Y="Q"))):1,1:0)
"RTN","XQSET",42,0)
 Q
"RTN","XQSET",43,0)
DEV ;See if device is legit for this option
"RTN","XQSET",44,0)
 S (%,XQSJ)=0 Q:'$D(^DIC(19,+XQSW,3.96,0))
"RTN","XQSET",45,0)
 F XQSL=1:1 S %=$O(^DIC(19,+XQSW,3.96,%)) Q:%=""!(%'=+%)  S:XQSIO=^(%,0) XQSJ=1
"RTN","XQSET",46,0)
 Q
"RTN","XQSET",47,0)
UP F XQSA=1:1 Q:X?.NUP  S %=$A(X,XQSA) I %<123,%>96 S X=$E(X,1,XQSA-1)_$C(%-32)_$E(X,XQSA+1,255)
"RTN","XQSET",48,0)
 Q
"RTN","XQSET",49,0)
XBLK F XASB=0:0 S XQSW=$E(XQSK,1) Q:XQSW'=" "  S XQSK=$E(XQSK,2,99)
"RTN","XQSET",50,0)
 Q
"RTN","XQSET",51,0)
DIS ;Create display nodes
"RTN","XQSET",52,0)
 S %=$S($D(^XUTL("XQO",XQDIC,"^",XQS0)):^(XQS0),1:"") S:$L(%) XQS0=% I '$L(%) S %=$O(^DIC(19,XQDIC,10,"B",XQS0,%)),%=$P(^DIC(19,XQDIC,10,%,0),U,2),XQS0=%_U_^DIC(19,XQS0,0)
"RTN","XQSET",53,0)
 I "MO"[$P(XQS0,U,5) S $P(XQS0,U,3)=$P(XQS0,U,3)_" ..."
"RTN","XQSET",54,0)
 I "SB"[$P(XQS0,U,5) S XQNO=1 ;Don't Display servers or broker-type options
"RTN","XQSET",55,0)
 S XQS0=$P(XQS0,U,1,3)_U_$S($D(XQST(XQSY,"OO")):XQST(XQSY,"OO"),1:"")_U_$P(XQS0,U,7)_U_$S($D(XQST(XQSY,"TM")):XQST(XQSY,"TM"),1:"")_U_$P(XQS0,U,11)_U_$P(XQS0,U,17)_U
"RTN","XQSET",56,0)
 Q
"RTN","XUSRB")
0^12^B6095154
"RTN","XUSRB",1,0)
XUSRB ;ISCSF/RWF - Request Broker ;04/25/96  07:52
"RTN","XUSRB",2,0)
 ;;8.0;KERNEL;**11,16,28**;Jul 05, 1995
"RTN","XUSRB",3,0)
 Q  ;No entry from top
"RTN","XUSRB",4,0)
 ;
"RTN","XUSRB",5,0)
 ;DATA BROKER calls, First parameter is always call-by-reference
"RTN","XUSRB",6,0)
VALIDAV(RESULT,AVCODE) ;Check a users access
"RTN","XUSRB",7,0)
 ;Return DUZ^Invalid code(0=OK)^verify needs changing
"RTN","XUSRB",8,0)
 N X,XUSER,XUF,XUNOW,XUDEV,XUM,XUMSG,%1 K DUZ
"RTN","XUSRB",9,0)
 S AVCODE=$$DECRYP^XUSRB1(AVCODE),DUZ=0
"RTN","XUSRB",10,0)
 S U="^",XUNOW=$$NOW^XLFDT(),DT=$P(XUNOW,"."),XUDEV=0
"RTN","XUSRB",11,0)
 S XOPT=$$STATE^XWBSEC("XUS XOPT"),XUT=$$STATE^XWBSEC("XUS CNT")
"RTN","XUSRB",12,0)
 S XUF=0,XUM=0,XUMSG=0,DUZ=$$CHECKAV^XUS(AVCODE,.XUSER)
"RTN","XUSRB",13,0)
 S XUT=$G(XUT)+1 D SET^XWBSEC(XUT,"XUS CNT")
"RTN","XUSRB",14,0)
 I XUT>$P(XOPT,U,2) S XUM=1,XUMSG=7 H 5 G VAX
"RTN","XUSRB",15,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX
"RTN","XUSRB",16,0)
 I DUZ>0 S XUMSG=$$POST() 
"RTN","XUSRB",17,0)
VAX S:XUMSG>0 DUZ=0
"RTN","XUSRB",18,0)
 S RESULT(0)=DUZ,RESULT(1)=XUM,RESULT(2)=$$VCVALID,RESULT(3)=$S(XUMSG:$P($T(@XUMSG^XUS3),";",4),1:"")
"RTN","XUSRB",19,0)
 Q
"RTN","XUSRB",20,0)
 ;
"RTN","XUSRB",21,0)
INTRO(RESULT) ;Return INTRO TEXT.
"RTN","XUSRB",22,0)
 D INTRO^XUS1A("RESULT")
"RTN","XUSRB",23,0)
 Q
"RTN","XUSRB",24,0)
 ;
"RTN","XUSRB",25,0)
VCVALID() ;Check if the Verify code needs changing.
"RTN","XUSRB",26,0)
 Q:'$G(DUZ) 1
"RTN","XUSRB",27,0)
 Q $G(^VA(200,DUZ,.1))+$P(^XTV(8989.3,1,"XUS"),"^",15)'>(+$H)
"RTN","XUSRB",28,0)
 ;
"RTN","XUSRB",29,0)
CVC(RESULT,XU1) ;change VC
"RTN","XUSRB",30,0)
 S RESULT=0 Q:$G(DUZ)'>0  N XU2 S U="^",XU2=$P(XU1,U,2),XU1=$P(XU1,U)
"RTN","XUSRB",31,0)
 ;S XU1=$$DECRYP^XUSRB1(XU1),XU2=$$DECRYP^XUSRB1(XU2)
"RTN","XUSRB",32,0)
 Q $$XXCVC^XUS2(XU1,XU2)
"RTN","XUSRB",33,0)
 ;
"RTN","XUSRB",34,0)
POST() ;Finish setup partition
"RTN","XUSRB",35,0)
 N X,XUM,IO,RESULT S IO="",IO("ZIO")="RPC BROKER"
"RTN","XUSRB",36,0)
 K ^UTILITY($J),^TMP($J),^XUTL("XQ",$J)
"RTN","XUSRB",37,0)
 S RESULT=0
"RTN","XUSRB",38,0)
 S XUM=$$USER^XUS1A Q:XUM>0 XUM ;User can't sign on for some reason.
"RTN","XUSRB",39,0)
 S RESULT=1 M RESULT(1)=XUTXT K XUTXT
"RTN","XUSRB",40,0)
 D DUZ^XUS1A,LOG^XUS1,SAVE^XUS1,KILL^XWBSEC("XUS CNT"),KILL^XWBSEC("XUS XOPT"),ABT^XQ12
"RTN","XUSRB",41,0)
 Q 0
"RTN","XUSRB",42,0)
 ;
"RTN","XUSRB",43,0)
LOGOUT ;Finish logout of user.
"RTN","XUSRB",44,0)
 D BYE^XUSCLEAN
"RTN","XUSRB",45,0)
 Q
"RTN","XUSRB",46,0)
 ;
"RTN","XUSRB",47,0)
SETUP(RESULT) ;sets up environment for GUI signon
"RTN","XUSRB",48,0)
 D SET1^XUS(0),SET^XWBSEC(XOPT,"XUS XOPT")
"RTN","XUSRB",49,0)
 S RESULT(0)=$P(XUENV,U,3)   ;server name
"RTN","XUSRB",50,0)
 S RESULT(1)=$P(XUVOL,U)     ;volume
"RTN","XUSRB",51,0)
 S RESULT(2)=XUCI            ;uci
"RTN","XUSRB",52,0)
 S RESULT(3)=$I              ;device
"RTN","XUSRB",53,0)
 S RESULT(4)=$P(XOPT,U,2)    ;# attempts
"RTN","XUSRB",54,0)
 Q
"RTN","XUSRB",55,0)
 ;
"RTN","XUSRB",56,0)
OWNSKEY(RESULT,LIST) ;Does user have Key
"RTN","XUSRB",57,0)
 N I,K S I=""
"RTN","XUSRB",58,0)
 I $G(DUZ)'>0 S RESULT=0 Q
"RTN","XUSRB",59,0)
 I $D(LIST)#2 S RESULT=$$KCHK(LIST) Q
"RTN","XUSRB",60,0)
 F  S I=$O(LIST(I)) Q:I=""  S RESULT(I)=$$KCHK(LIST(I))
"RTN","XUSRB",61,0)
 Q
"RTN","XUSRB",62,0)
KCHK(%) Q $S($G(DUZ)>0:$D(^XUSEC(%,DUZ)),1:0) ;Key Check
"RTN","XUSRB",63,0)
 ;
"RTN","XUSRB",64,0)
SENDKEYS(RESULT) ;send encryption keys to the client
"RTN","XUSRB",65,0)
 D SENDKEYS(.RESULT)
"RTN","XUSRB",66,0)
 Q
"RTN","XUSRB1")
0^13^B20393718
"RTN","XUSRB1",1,0)
XUSRB1 ;iscSF/RWF - More Request Broker ;04/17/96  14:03
"RTN","XUSRB1",2,0)
 ;;8.0;KERNEL;**28**;Jul 05, 1995
"RTN","XUSRB1",3,0)
 Q  ;No entry from top
"RTN","XUSRB1",4,0)
 ;
"RTN","XUSRB1",5,0)
DECRYP(S) ;decrypt passed string
"RTN","XUSRB1",6,0)
 ;VYD 5/19/95
"RTN","XUSRB1",7,0)
 N ASSOCIX,IDIX,ASSOCSTR,IDSTR
"RTN","XUSRB1",8,0)
 S ASSOCIX=$A($E(S,$L(S)))-31           ;get associator string index
"RTN","XUSRB1",9,0)
 S IDIX=$A($E(S))-31                    ;get identifier string index
"RTN","XUSRB1",10,0)
 S ASSOCSTR=$P($T(Z+ASSOCIX),";",3,9)   ;get associator string
"RTN","XUSRB1",11,0)
 S IDSTR=$P($T(Z+IDIX),";",3,9)         ;get identifier string
"RTN","XUSRB1",12,0)
 Q $TR($E(S,2,$L(S)-1),ASSOCSTR,IDSTR)  ;translated result
"RTN","XUSRB1",13,0)
 ;
"RTN","XUSRB1",14,0)
ENCRYP(S) ;RWF 2/5/96
"RTN","XUSRB1",15,0)
 N %,ASSOCIX,IDIX,ASSOCSTR,IDSTR
"RTN","XUSRB1",16,0)
 S %=72439+$R(10000)
"RTN","XUSRB1",17,0)
 S ASSOCIX=%#20 ;get associator index
"RTN","XUSRB1",18,0)
 S IDIX=$E(%,2,3)#20 ;get identifier index
"RTN","XUSRB1",19,0)
 S ASSOCSTR=$P($T(Z+ASSOCIX),";",3,9)   ;get associator string
"RTN","XUSRB1",20,0)
 S IDSTR=$P($T(Z+IDIX),";",3,9)         ;get identifier string
"RTN","XUSRB1",21,0)
 ;translated result
"RTN","XUSRB1",22,0)
 Q $C(IDIX+31)_$TR(S,IDSTR,ASSOCSTR)_$C(ASSOCIX+31)
"RTN","XUSRB1",23,0)
 ;
"RTN","XUSRB1",24,0)
SENDKEYS(RESULT) ;send encryption keys to the client
"RTN","XUSRB1",25,0)
 ;VYD 5/19/95
"RTN","XUSRB1",26,0)
 N %,X
"RTN","XUSRB1",27,0)
 S %=1
"RTN","XUSRB1",28,0)
 F  S X=$P($T(Z+%),";",3,9) Q:X=""  S RESULT(%)=X,%=%+1
"RTN","XUSRB1",29,0)
 Q
"RTN","XUSRB1",30,0)
 ;
"RTN","XUSRB1",31,0)
BLDDRUM Q  ;don't run this tag
"RTN","XUSRB1",32,0)
 N I,%,ALLCHARS,RNDMSTR,CHAR
"RTN","XUSRB1",33,0)
 X "ZP Z"                      ;position insertion point
"RTN","XUSRB1",34,0)
 F I=1:1:20 D
"RTN","XUSRB1",35,0)
 . S ALLCHARS="" F %=32:1:126 S:$C(%)'="^" ALLCHARS=ALLCHARS_$C(%)
"RTN","XUSRB1",36,0)
 . S RNDMSTR=""
"RTN","XUSRB1",37,0)
 . F %=1:1:94 D
"RTN","XUSRB1",38,0)
 . . S POS=$R($L(ALLCHARS))+1,CHAR=$E(ALLCHARS,POS)
"RTN","XUSRB1",39,0)
 . . S RNDMSTR=RNDMSTR_CHAR
"RTN","XUSRB1",40,0)
 . . S ALLCHARS=$P(ALLCHARS,CHAR,1)_$P(ALLCHARS,CHAR,2) ;compress by 1
"RTN","XUSRB1",41,0)
 . X "ZI "" ;;""_RNDMSTR"      ;save random string in routine
"RTN","XUSRB1",42,0)
 X "ZS"                        ;save routine
"RTN","XUSRB1",43,0)
 Q
"RTN","XUSRB1",44,0)
 ;
"RTN","XUSRB1",45,0)
 ;
"RTN","XUSRB1",46,0)
Z ;;
"RTN","XUSRB1",47,0)
 ;;wkEo-ZJt!dG)49K{nX1BS$vH<&:Myf*>Ae0jQW=;|#PsO`'%+rmb[gpqN,l6/hFC@DcUa ]z~R}"V\iIxu?872.(TYL5_3
"RTN","XUSRB1",48,0)
 ;;rKv`R;M/9BqAF%&tSs#Vh)dO1DZP> *fX'u[.4lY=-mg_ci802N7LTG<]!CWo:3?{+,5Q}(@jaExn$~p\IyHwzU"|k6Jeb
"RTN","XUSRB1",49,0)
 ;;\pV(ZJk"WQmCn!Y,y@1d+~8s?[lNMxgHEt=uw|X:qSLjAI*}6zoF{T3#;ca)/h5%`P4$r]G'9e2if_>UDKb7<v0&- RBO.
"RTN","XUSRB1",50,0)
 ;;depjt3g4W)qD0V~NJar\B "?OYhcu[<Ms%Z`RIL_6:]AX-zG.#}$@vk7/5x&*m;(yb2Fn+l'PwUof1K{9,|EQi>H=CT8S!
"RTN","XUSRB1",51,0)
 ;;NZW:1}K$byP;jk)7'`x90B|cq@iSsEnu,(l-hf.&Y_?J#R]+voQXU8mrV[!p4tg~OMez CAaGFD6H53%L/dT2<*>"{\wI=
"RTN","XUSRB1",52,0)
 ;;vCiJ<oZ9|phXVNn)m K`t/SI%]A5qOWe\&?;jT~M!fz1l>[D_0xR32c*4.P"G{r7}E8wUgyudF+6-:B=$(sY,LkbHa#'@Q
"RTN","XUSRB1",53,0)
 ;;hvMX,'4Ty;[a8/{6l~F_V"}qLI\!@x(D7bRmUH]W15J%N0BYPkrs&9:$)Zj>u|zwQ=ieC-oGA.#?tfdcO3gp`S+En K2*<
"RTN","XUSRB1",54,0)
 ;;jd!W5[];4'<C$/&x|rZ(k{>?ghBzIFN}fAK"#`p_TqtD*1E37XGVs@0nmSe+Y6Qyo-aUu%i8c=H2vJ\) R:MLb.9,wlO~P
"RTN","XUSRB1",55,0)
 ;;2ThtjEM+!=xXb)7,ZV{*ci3"8@_l-HS69L>]\AUF/Q%:qD?1~m(yvO0e'<#o$p4dnIzKP|`NrkaGg.ufCRB[; sJYwW}5&
"RTN","XUSRB1",56,0)
 ;;vB\5/zl-9y:Pj|=(R'7QJI *&CTX"p0]_3.idcuOefVU#omwNZ`$Fs?L+1Sk<,b)hM4A6[Y%aDrg@~KqEW8t>H};n!2xG{
"RTN","XUSRB1",57,0)
 ;;sFz0Bo@_HfnK>LR}qWXV+D6`Y28=4Cm~G/7-5A\b9!a#rP.l&M$hc3ijQk;),TvUd<[:I"u1'NZSOw]*gxtE{eJp|y (?%
"RTN","XUSRB1",58,0)
 ;;M@,D}|LJyGO8`$*ZqH .j>c~h<d=fimszv[#-53F!+a;NC'6T91IV?(0x&/{B)w"]Q\YUWprk4:ol%g2nE7teRKbAPuS_X
"RTN","XUSRB1",59,0)
 ;;.mjY#_0*H<B=Q+FML6]s;r2:e8R}[ic&KA 1w{)vV5d,$u"~xD/Pg?IyfthO@CzWp%!`N4Z'3-(o|J9XUE7k\TlqSb>anG
"RTN","XUSRB1",60,0)
 ;;xVa1']_GU<X`|\NgM?LS9{"jT%s$}y[nvtlefB2RKJW~(/cIDCPow4,>#zm+:5b@06O3Ap8=*7ZFY!H-uEQk; .q)i&rhd
"RTN","XUSRB1",61,0)
 ;;I]Jz7AG@QX."%3Lq>METUo{Pp_ |a6<0dYVSv8:b)~W9NK`(r'4fs&wim\kReC2hg=HOj$1B*/nxt,;c#y+![?lFuZ-5D}
"RTN","XUSRB1",62,0)
 ;;Rr(Ge6F Hx>q$m&C%M~Tn,:"o'tX/*yP.{lZ!YkiVhuw_<KE5a[;}W0gjsz3]@7cI2\QN?f#4p|vb1OUBD9)=-LJA+d`S8
"RTN","XUSRB1",63,0)
 ;;I~k>y|m};d)-7DZ"Fe/Y<B:xwojR,Vh]O0Sc[`$sg8GXE!1&Qrzp._W%TNK(=J 3i*2abuHA4C'?Mv\Pq{n#56LftUl@9+
"RTN","XUSRB1",64,0)
 ;;~A*>9 WidFN,1KsmwQ)GJM{I4:C%}#Ep(?HB/r;t.&U8o|l['Lg"2hRDyZ5`nbf]qjc0!zS-TkYO<_=76a\X@$Pe3+xVvu
"RTN","XUSRB1",65,0)
 ;;yYgjf"5VdHc#uA,W1i+v'6|@pr{n;DJ!8(btPGaQM.LT3oe?NB/&9>Z`-}02*%x<7lsqz4OS ~E$\R]KI[:UwC_=h)kXmF
"RTN","XUSRB1",66,0)
 ;;5:iar.{YU7mBZR@-K|2 "+~`M%8sq4JhPo<_X\Sg3WC;Tuxz,fvEQ1p9=w}FAI&j/keD0c?)LN6OHV]lGy'$*>nd[(tb!#
"VER")
8.0^21.0
"^DD",9.6,9.6,900,0)
PRE-TRANSPORTATION ROUTINE^FX^^PRET;E1,240^K:$L(X)>17!(X'?.1UP.7UN.1"^"1UP.7UN) X
"^DD",9.6,9.6,900,3)
Enter a routine, [TAG^]ROUTINE.
"^DD",9.6,9.6,900,21,0)
^^5^5^2960415^^
"^DD",9.6,9.6,900,21,1,0)
The name of the routine which is run before the Transport Global
"^DD",9.6,9.6,900,21,2,0)
is sent. You can use this routine to add nodes to the Transport
"^DD",9.6,9.6,900,21,3,0)
Global.  The variable XPDGREF will be defined to a closed global
"^DD",9.6,9.6,900,21,4,0)
root that could be used to set the nodes.
"^DD",9.6,9.6,900,21,5,0)
 examble: S @XPDGREF@("mydata",1,0)="node one of data"
"^DD",9.6,9.6,900,"DT")
2960415
"^DD",19,19,4,0)
TYPE^RS^A:action;E:edit;I:inquire;M:menu;P:print;R:run routine;O:protocol;Q:protocol menu;X:extended action;S:server;L:limited;C:ScreenMan;W:Window;Z:Window Suite;B:Broker (Client/Server);^0;4^Q
"^DD",19,19,4,.1)
THE TYPE OF OPTION
"^DD",19,19,4,1,0)
^.1
"^DD",19,19,4,1,1,0)
19^AOR^MUMPS
"^DD",19,19,4,1,1,1)
I X="O"!(X="Q") S ^DIC(19,"AOR",$P(^DIC(19,DA,0),U,2),DA)=""
"^DD",19,19,4,1,1,2)
K ^DIC(19,"AOR",$P(^DIC(19,DA,0),U,2),DA)
"^DD",19,19,4,1,1,"%D",0)
^^2^2^2920519
"^DD",19,19,4,1,1,"%D",1,0)
This sets the "AOR" cross-reference on the file if the option type is either 
"^DD",19,19,4,1,1,"%D",2,0)
a protocol or a protocol menu.
"^DD",19,19,4,1,2,0)
19^AOH^MUMPS
"^DD",19,19,4,1,2,1)
D REDO^XQ7
"^DD",19,19,4,1,2,2)
D REDO^XQ7
"^DD",19,19,4,1,2,"%D",0)
^^3^3^2920519
"^DD",19,19,4,1,2,"%D",1,0)
This cross-reference causes the option to be flagged for updating in the menu 
"^DD",19,19,4,1,2,"%D",2,0)
trees so that the changes effecting display and/or access to the option are 
"^DD",19,19,4,1,2,"%D",3,0)
correctly updated.
"^DD",19,19,4,21,0)
^^7^7^2951212^
"^DD",19,19,4,21,1,0)
    This field indicates the 'category' or type of option. A print-type
"^DD",19,19,4,21,2,0)
option, for instance, will call FileMan to print something. Menu-type
"^DD",19,19,4,21,3,0)
options point to other options in the tree-structured menu system. The
"^DD",19,19,4,21,4,0)
other fields in the options file are filled in depending on the type.
"^DD",19,19,4,21,5,0)
There are several fields that will tell a print-type option what to print
"^DD",19,19,4,21,6,0)
and how to print it, for example.  These same fields may be meaningless to
"^DD",19,19,4,21,7,0)
another options type.
"^DD",19,19,4,22)
TYPE
"^DD",19,19,4,"DT")
2951212
**END**
**END**
