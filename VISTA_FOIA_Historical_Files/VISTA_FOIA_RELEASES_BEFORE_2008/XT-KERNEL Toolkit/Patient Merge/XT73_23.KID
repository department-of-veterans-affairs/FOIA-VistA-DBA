KIDS Distribution saved on May 22, 1998@17:36:39
Patient Merge
**KIDS**:XT*7.3*23^

**INSTALL NAME**
XT*7.3*23
"BLD",4,0)
XT*7.3*23^TOOLKIT^0^2980430^y
"BLD",4,1,0)
^^278^278^2980522^
"BLD",4,1,1,0)
Associated patches:    DI*21*41
"BLD",4,1,2,0)
                       DI*21*42 
"BLD",4,1,3,0)
                       PSJ*4.5*43
"BLD",4,1,4,0)
                       DG*5.3*156
"BLD",4,1,5,0)
                       IMR*2.1*2
"BLD",4,1,6,0)
                       IB*2*94
"BLD",4,1,7,0)
                       IB*2*97
"BLD",4,1,8,0)
                       LR*5.2*205
"BLD",4,1,9,0)
Associated package:    NDBI v 1.0
"BLD",4,1,10,0)
 
"BLD",4,1,11,0)
Subject:  XT*7.3*23 Duplicate Record Merge:  Patient Merge
"BLD",4,1,12,0)
 
"BLD",4,1,13,0)
Category:
"BLD",4,1,14,0)
       - Enhancement (Mandatory)
"BLD",4,1,15,0)
 
"BLD",4,1,16,0)
Description:
"BLD",4,1,17,0)
=========
"BLD",4,1,18,0)
Patient Merge provides an automated method to eliminate duplicate patient
"BLD",4,1,19,0)
records within the VISTA database.  It is an operational implementation of
"BLD",4,1,20,0)
the Duplicate Resolution Utilities released to the field with Toolkit
"BLD",4,1,21,0)
version 7.2.  The overall process consists of the search for potential
"BLD",4,1,22,0)
duplicate record pairs, review and verification of those pairs, and the
"BLD",4,1,23,0)
merge process.  The search and identification of potential duplicate
"BLD",4,1,24,0)
records performs comparisons on key fields in the PATIENT file.  (This is
"BLD",4,1,25,0)
a long process and can exceed 100 hours.)  When evaluated as a potential
"BLD",4,1,26,0)
duplicate, the pair is entered into file 15 (Duplicate Record File) and is
"BLD",4,1,27,0)
available for review and verification.  The review allows for two levels
"BLD",4,1,28,0)
of review; a primary reviewer - focussing on patient demographics - and an
"BLD",4,1,29,0)
ancillary reviewer - focussing on ancillary service data.  Once verified,
"BLD",4,1,30,0)
the merge process can be initiated.  (This is a long process and can
"BLD",4,1,31,0)
exceed 15 hours.)
"BLD",4,1,32,0)
 
"BLD",4,1,33,0)
Software and a complete set of documentation (Release Notes, Installation
"BLD",4,1,34,0)
Guide, User Manual, and Technical Manual) may be obtained using FTP from
"BLD",4,1,35,0)
the appropriate Customer Service directory:
"BLD",4,1,36,0)
 
"BLD",4,1,37,0)
       IRM FIELD OFFICE        FTP ADDRESS     DIRECTORY
"BLD",4,1,38,0)
       =============================================================
"BLD",4,1,39,0)
       ALBANY                  152.127.1.5     anonymous.software
"BLD",4,1,40,0)
       HINES                   152.129.1.110   anonymous.software
"BLD",4,1,41,0)
       SALT LAKE               152.131.2.1     anonymous.software
"BLD",4,1,42,0)
 
"BLD",4,1,43,0)
Release Notes file name:       xt_73_p23_rn.pdf
"BLD",4,1,44,0)
Installation Guide file name:  xt_73_p23_ig.pdf
"BLD",4,1,45,0)
User Manual file name:         xt_73_p23_um.pdf
"BLD",4,1,46,0)
Technical Manual file name:    xt_73_p23_tm.pdf
"BLD",4,1,47,0)
Software file name:    XT73_23.KID
"BLD",4,1,48,0)
 
"BLD",4,1,49,0)
File Information:
"BLD",4,1,50,0)
============
"BLD",4,1,51,0)
This patch contains three new files and changes to the existing files.
"BLD",4,1,52,0)
 
"BLD",4,1,53,0)
DUPLICATE RECORD       ^VA(15,
"BLD",4,1,54,0)
This file contains information about duplicate records in any file defined
"BLD",4,1,55,0)
in the two variable pointer fields; RECORD1 and RECORD2 (.01 and .02).
"BLD",4,1,56,0)
The status of an entry in this file may be 'potential duplicate,
"BLD",4,1,57,0)
unverified', 'verified, not a duplicate', or 'verified duplicate'.
"BLD",4,1,58,0)
 
"BLD",4,1,59,0)
DUPLICATE RESOLUTION   ^VA(15.1,
"BLD",4,1,60,0)
This file is used to handle duplicate checking and merging of files that
"BLD",4,1,61,0)
have entries in the Duplicate Record File.  It is meant to provide the
"BLD",4,1,62,0)
overall control information that would be used to first identify
"BLD",4,1,63,0)
duplicates within a file, e.g. Patient File, and then to merge the
"BLD",4,1,64,0)
entries.
"BLD",4,1,65,0)
 
"BLD",4,1,66,0)
XDR MERGE PROCESS      ^VA(15.2,       New file.
"BLD",4,1,67,0)
When a merge process is set up, all its information is stored in this
"BLD",4,1,68,0)
file.  Once a merge process has completed, that entry may be purged using
"BLD",4,1,69,0)
the Purge Merge Process File option in the managers menu.
"BLD",4,1,70,0)
 
"BLD",4,1,71,0)
XDR REPOINTED ENTRY    ^VA(15.3,       New file.
"BLD",4,1,72,0)
This file is used to record the entry number of the FROM record that is
"BLD",4,1,73,0)
merged into the TO record.  This can be used for FileMan to determine
"BLD",4,1,74,0)
which entries were merged, so the IEN of the FROM record will not be
"BLD",4,1,75,0)
reused.
"BLD",4,1,76,0)
 
"BLD",4,1,77,0)
MERGE IMAGES           ^XDRM           New file.
"BLD",4,1,78,0)
File 15.4 stores an image of the pairs of entries in files that were
"BLD",4,1,79,0)
merged immediately prior to the actual merge.  In addition, there is also
"BLD",4,1,80,0)
a record of the locations of pointer values that were changed during the
"BLD",4,1,81,0)
merge process.
"BLD",4,1,82,0)
 
"BLD",4,1,83,0)
Option Information:
"BLD",4,1,84,0)
===============
"BLD",4,1,85,0)
This patch contains 27 options:
"BLD",4,1,86,0)
XDR ADD VERIFIED DUPS
"BLD",4,1,87,0)
XDR ANCILLARY REVIEW
"BLD",4,1,88,0)
XDR APPROVE FOR MERGE
"BLD",4,1,89,0)
XDR CHECK MERGE PROCESS STATUS
"BLD",4,1,90,0)
XDR CHECK PAIR
"BLD",4,1,91,0)
XDR DISPLAY SEARCH STATUS
"BLD",4,1,92,0)
XDR EDIT DUP RECORD STATUS
"BLD",4,1,93,0)
XDR EDIT DUP RESOLUTION FILE
"BLD",4,1,94,0)
XDR FIND POTENTIAL DUPLICATES
"BLD",4,1,95,0)
XDR MAIN MENU  (Locked with XDR key)
"BLD",4,1,96,0)
XDR MANAGER UTILITIES  (Locked with XDRMGR key)
"BLD",4,1,97,0)
XDR MERGE READY DUPLICATES
"BLD",4,1,98,0)
XDR OPERATIONS MENU
"BLD",4,1,99,0)
XDR PRELIMINARY SCAN
"BLD",4,1,100,0)
XDR PRELIMINARY SCAN LIST
"BLD",4,1,101,0)
XDR PRINT LIST
"BLD",4,1,102,0)
XDR PURGE
"BLD",4,1,103,0)
XDR PURGE2
"BLD",4,1,104,0)
XDR RESTART MERGE PROCESS
"BLD",4,1,105,0)
XDR SCAN POSSIBLE DUPLICATES
"BLD",4,1,106,0)
XDR SEARCH ALL
"BLD",4,1,107,0)
XDR STOP MERGE PROCESS
"BLD",4,1,108,0)
XDR TALLY STATUS FIELDS
"BLD",4,1,109,0)
XDR UTILITIES MENU
"BLD",4,1,110,0)
XDR VALID CHECK
"BLD",4,1,111,0)
XDR VERIFY ALL
"BLD",4,1,112,0)
XDR VIEW DUPLICATE RECORD
"BLD",4,1,113,0)
 
"BLD",4,1,114,0)
The menu option Duplicate Resolution System [XDR MAIN MENU] will appear as
"BLD",4,1,115,0)
a sub-menu on the Application Utilities menu [XTMENU].
"BLD",4,1,116,0)
The menu option Operations [XDR OPERATIONS MENU] will appear as a sub-menu
"BLD",4,1,117,0)
on the [XDR MAIN MENU].
"BLD",4,1,118,0)
The menu option Utilities [XDR UTILITIES MENU] will appear as a sub-menu
"BLD",4,1,119,0)
on the [XDR MAIN MENU].
"BLD",4,1,120,0)
The menu option Manager Utilities [XDR MANAGER UTILITIES] will appear as a
"BLD",4,1,121,0)
sub-menu on the [XDR MAIN MENU].
"BLD",4,1,122,0)
 
"BLD",4,1,123,0)
Post-init information:
"BLD",4,1,124,0)
================
"BLD",4,1,125,0)
This patch does not contain a post-init routine.
"BLD",4,1,126,0)
 
"BLD",4,1,127,0)
NOIS Messages Covered:
"BLD",4,1,128,0)
====================
"BLD",4,1,129,0)
There are three NOIS calls, all with a Referred, Awaiting Patch status.
"BLD",4,1,130,0)
These all have to do with sites wanting to merge patient records.  The
"BLD",4,1,131,0)
release of this patch will serve to close these calls.  The NOIS calls
"BLD",4,1,132,0)
are:
"BLD",4,1,133,0)
       CAS-0797-12438, duplicate pts and pt demo missing
"BLD",4,1,134,0)
       SPO-0298-51628, HOW TO MERGE DUPLICATE ENTRIES
"BLD",4,1,135,0)
       NYN-0398-11634, Site needs help with Duplicate Resolution
"BLD",4,1,136,0)
 
"BLD",4,1,137,0)
Print Templates
"BLD",4,1,138,0)
============
"BLD",4,1,139,0)
XDR BRIEF LIST    FILE #15 
"BLD",4,1,140,0)
XDR MERGED LIST    FILE #15
"BLD",4,1,141,0)
 
"BLD",4,1,142,0)
Sort Templates
"BLD",4,1,143,0)
============
"BLD",4,1,144,0)
XDR MERGED LIST    FILE #15
"BLD",4,1,145,0)
XDR NOT READY TO MERGE LIST    FILE #15
"BLD",4,1,146,0)
XDR POTENTIAL DUPLICATE LIST    FILE #15
"BLD",4,1,147,0)
XDR READY TO MERGE LIST    FILE #15
"BLD",4,1,148,0)
 
"BLD",4,1,149,0)
Forms
"BLD",4,1,150,0)
=====
"BLD",4,1,151,0)
XDR RESFILE FORM    FILE #15.1
"BLD",4,1,152,0)
 
"BLD",4,1,153,0)
Routine Summary:
"BLD",4,1,154,0)
===============
"BLD",4,1,155,0)
 
"BLD",4,1,156,0)
The following is a list of routines included in this patch.
"BLD",4,1,157,0)
 
"BLD",4,1,158,0)
The second line of each of these routines will look like:
"BLD",4,1,159,0)
       <tab>;;7.3;;TOOLKIT;**[patch list]**; Apr 25, 1995
"BLD",4,1,160,0)
 
"BLD",4,1,161,0)
    CHECK^XTSUMBLD results
"BLD",4,1,162,0)
Routine name   Before Patch    After Patch     Patch List
"BLD",4,1,163,0)
===========    ==========      =========       ========
"BLD",4,1,164,0)
XDR2NULL       N/A             213286          23
"BLD",4,1,165,0)
XDRCNT         7651887         7742313         23
"BLD",4,1,166,0)
XDRDADD        8133407         8530927         23
"BLD",4,1,167,0)
XDRDCOMP       4431965         4873221         23
"BLD",4,1,168,0)
XDRDDATA       N/A             893537          23
"BLD",4,1,169,0)
XDRDEDT        N/A             9827533         23
"BLD",4,1,170,0)
XDRDLIST       7786460         9241915         23
"BLD",4,1,171,0)
XDRDMAIN       5700890         6747860         23
"BLD",4,1,172,0)
XDRDPICK       N/A             17800586        23
"BLD",4,1,173,0)
XDRDPRE1       N/A             5745643         23
"BLD",4,1,174,0)
XDRDPREL       N/A             5988721         23
"BLD",4,1,175,0)
XDRDPRG2       N/A             1096260         23
"BLD",4,1,176,0)
XDRDPRGE       3959904         3975142         23
"BLD",4,1,177,0)
XDRDQUE        9275556         9693871         23
"BLD",4,1,178,0)
XDRDSHOW       N/A             7608889         23
"BLD",4,1,179,0)
XDRDSTAT       2676366         5551016         23
"BLD",4,1,180,0)
XDRDUP         3547600         4515332         23
"BLD",4,1,181,0)
XDRDVAL        N/A             8556766         23
"BLD",4,1,182,0)
XDRDVAL1       N/A             12083072        23
"BLD",4,1,183,0)
XDRDVAL2       N/A             12453467        23
"BLD",4,1,184,0)
XDREMSG        4302480         4339222         23
"BLD",4,1,185,0)
XDRMADD        6382715         12378004        23
"BLD",4,1,186,0)
XDRMAIN        7563507         8572792         23
"BLD",4,1,187,0)
XDRMAINI       14611797        15245931        23
"BLD",4,1,188,0)
XDRMERG        N/A             11028391        23
"BLD",4,1,189,0)
XDRMERG0       N/A             11419853        23
"BLD",4,1,190,0)
XDRMERG1       N/A             5837142         23
"BLD",4,1,191,0)
XDRMERG2       N/A             15382760        23
"BLD",4,1,192,0)
XDRMERGA       N/A             17080288        23
"BLD",4,1,193,0)
XDRMERGB       N/A             16160853        23
"BLD",4,1,194,0)
XDRMVFY        1318075         1157832         23
"BLD",4,1,195,0)
XDRPREL1       N/A             766751          23
"BLD",4,1,196,0)
XDRPTCAN       N/A             7251504         23
"BLD",4,1,197,0)
XDRPTCLN       N/A             1819429         23
"BLD",4,1,198,0)
XDRPTDOB       N/A             1857839         23
"BLD",4,1,199,0)
XDRPTDOD       N/A             498220          23
"BLD",4,1,200,0)
XDRPTLSD       N/A             803980          23
"BLD",4,1,201,0)
XDRPTMMN       N/A             1478218         23
"BLD",4,1,202,0)
XDRPTN         N/A             6440837         23
"BLD",4,1,203,0)
XDRPTSSN       N/A             3615316         23
"BLD",4,1,204,0)
XDRPTSX        N/A             573526          23
"BLD",4,1,205,0)
XDRRMRG0       N/A             4444660         23
"BLD",4,1,206,0)
XDRRMRG1       N/A             19616376        23
"BLD",4,1,207,0)
XDRRMRG2       N/A             5315420         23
"BLD",4,1,208,0)
XDRUTL         N/A             927605          23
"BLD",4,1,209,0)
XDRVCHEK       N/A             4108217         23
"BLD",4,1,210,0)
 
"BLD",4,1,211,0)
 
"BLD",4,1,212,0)
Installation Instructions:
"BLD",4,1,213,0)
==================
"BLD",4,1,214,0)
1.  Recommend the patch installer review the Installation Guide
"BLD",4,1,215,0)
documentation for detailed installation and implementation information.
"BLD",4,1,216,0)
 
"BLD",4,1,217,0)
2.  This patch can be loaded with users on the system.  Installation will
"BLD",4,1,218,0)
take less than 1 minute.
"BLD",4,1,219,0)
 
"BLD",4,1,220,0)
3.  Review your mapped set.  If any of the routines listed in the ROUTINE
"BLD",4,1,221,0)
SUMMARY section are mapped, they should be removed from the mapped set at
"BLD",4,1,222,0)
this time.
"BLD",4,1,223,0)
 
"BLD",4,1,224,0)
4.  Impacts of files:
"BLD",4,1,225,0)
       a.  The size of File 15 is dependent upon the number of potential
"BLD",4,1,226,0)
duplicates found and is thus also dependent upon the size of the Patient
"BLD",4,1,227,0)
File.  It may be purged using the application options, however note that
"BLD",4,1,228,0)
information regarding those pairs already merged will not be purged.
"BLD",4,1,229,0)
 
"BLD",4,1,230,0)
       b.  The size of File 15.1 is minimal.  This file contains the
"BLD",4,1,231,0)
working components of Duplicate Resolution as they pertain to a primary
"BLD",4,1,232,0)
file.  It will expand as additional primary files are added.
"BLD",4,1,233,0)
 
"BLD",4,1,234,0)
       c.  The size of File 15.2 is minimal.  It may be purged using the
"BLD",4,1,235,0)
application options.
"BLD",4,1,236,0)
 
"BLD",4,1,237,0)
       d.  The size of File 15.3 is minimal.  The number of entries is
"BLD",4,1,238,0)
dependent upon the number of record pairs merged.
"BLD",4,1,239,0)
 
"BLD",4,1,240,0)
       e.  The size of File 15.4 is dependent upon the number of record
"BLD",4,1,241,0)
pairs merged and their associated data.  Note that not all associated data
"BLD",4,1,242,0)
is retained, but rather pointer values.  This is an independent global
"BLD",4,1,243,0)
with the intent that it can be saved off to a static environment for
"BLD",4,1,244,0)
archive purposes.
"BLD",4,1,245,0)
 
"BLD",4,1,246,0)
5.  This patch contains 46 routines.  The following routines are necessary
"BLD",4,1,247,0)
for the operation of Patient Merge, but are not included with this patch
"BLD",4,1,248,0)
as they were previously released as part of Toolkit:
"BLD",4,1,249,0)
       XDRDADJ                 XDRDFPD         XDRDPDTI        XDRDSCOR
"BLD",4,1,250,0)
       XDRMPACK                XDRMRG          XDRMRG1         XDRMSG
"BLD",4,1,251,0)
       XDRU1
"BLD",4,1,252,0)
 
"BLD",4,1,253,0)
6.  From the Kernel Installation and Distribution System Menu, select the
"BLD",4,1,254,0)
Installation menu.
"BLD",4,1,255,0)
 
"BLD",4,1,256,0)
7.  From this menu, you may elect to use the following options (when
"BLD",4,1,257,0)
prompted for the INSTALL NAME, enter XT*7.3*23):
"BLD",4,1,258,0)
 
"BLD",4,1,259,0)
       a.  Backup a Transport Global - this option will create a backup
"BLD",4,1,260,0)
message of any routines exported with the patch.  It will NOT backup any
"BLD",4,1,261,0)
of the other changes.
"BLD",4,1,262,0)
 
"BLD",4,1,263,0)
       b.  Compare Transport Global to Current System - this option will
"BLD",4,1,264,0)
allow you to view all changes that will be made when the patch is
"BLD",4,1,265,0)
installed.  It compares all components of the patch (routines and
"BLD",4,1,266,0)
options).
"BLD",4,1,267,0)
 
"BLD",4,1,268,0)
       c.  Verify Checksums in Transport Global - this option will allow
"BLD",4,1,269,0)
you to ensure the integrity of the routines that are in the transport
"BLD",4,1,270,0)
global.
"BLD",4,1,271,0)
 
"BLD",4,1,272,0)
8.  Use the Install Package(s) option and select the package XT*7.3*23.
"BLD",4,1,273,0)
 
"BLD",4,1,274,0)
9.  When prompted "Want to DISABLE Scheduled Options, Menu Options, and
"BLD",4,1,275,0)
Protocols? YES//" respond "NO".
"BLD",4,1,276,0)
 
"BLD",4,1,277,0)
10.  If any routines were unmapped as a part of step 3, they should be
"BLD",4,1,278,0)
returned to the mapped set once the installation has run to completion.
"BLD",4,4,0)
^9.64PA^15^5
"BLD",4,4,15,0)
15
"BLD",4,4,15,222)
y^y^f^^^^n
"BLD",4,4,15.1,0)
15.1
"BLD",4,4,15.1,222)
y^y^f^^n^^y^m^n
"BLD",4,4,15.2,0)
15.2
"BLD",4,4,15.2,222)
y^y^f^^^^n
"BLD",4,4,15.3,0)
15.3
"BLD",4,4,15.3,222)
y^y^f^^^^n
"BLD",4,4,15.4,0)
15.4
"BLD",4,4,15.4,222)
y^y^f^^^^n
"BLD",4,4,"B",15,15)

"BLD",4,4,"B",15.1,15.1)

"BLD",4,4,"B",15.2,15.2)

"BLD",4,4,"B",15.3,15.3)

"BLD",4,4,"B",15.4,15.4)

"BLD",4,"ABNS",0)
^9.66A^2^1
"BLD",4,"ABNS",2,0)
XDR
"BLD",4,"ABNS",2,1,0)
^9.661A^^
"BLD",4,"ABNS","B","XDR",2)

"BLD",4,"ABPKG")
n^y^G.MERGE@ISC-SF.VA.GOV
"BLD",4,"INIT")

"BLD",4,"KRN",0)
^9.67PA^771^15
"BLD",4,"KRN",.4,0)
.4
"BLD",4,"KRN",.4,"NM",0)
^9.68A^2^2
"BLD",4,"KRN",.4,"NM",1,0)
XDR BRIEF LIST    FILE #15^15^0
"BLD",4,"KRN",.4,"NM",2,0)
XDR MERGED LIST    FILE #15^15^0
"BLD",4,"KRN",.4,"NM","B","XDR BRIEF LIST    FILE #15",1)

"BLD",4,"KRN",.4,"NM","B","XDR MERGED LIST    FILE #15",2)

"BLD",4,"KRN",.401,0)
.401
"BLD",4,"KRN",.401,"NM",0)
^9.68A^4^4
"BLD",4,"KRN",.401,"NM",1,0)
XDR MERGED LIST    FILE #15^15^0
"BLD",4,"KRN",.401,"NM",2,0)
XDR NOT READY TO MERGE LIST    FILE #15^15^0
"BLD",4,"KRN",.401,"NM",3,0)
XDR POTENTIAL DUPLICATE LIST    FILE #15^15^0
"BLD",4,"KRN",.401,"NM",4,0)
XDR READY TO MERGE LIST    FILE #15^15^0
"BLD",4,"KRN",.401,"NM","B","XDR MERGED LIST    FILE #15",1)

"BLD",4,"KRN",.401,"NM","B","XDR NOT READY TO MERGE LIST    FILE #15",2)

"BLD",4,"KRN",.401,"NM","B","XDR POTENTIAL DUPLICATE LIST    FILE #15",3)

"BLD",4,"KRN",.401,"NM","B","XDR READY TO MERGE LIST    FILE #15",4)

"BLD",4,"KRN",.402,0)
.402
"BLD",4,"KRN",.402,"NM",0)
^9.68A^^
"BLD",4,"KRN",.403,0)
.403
"BLD",4,"KRN",.403,"NM",0)
^9.68A^1^1
"BLD",4,"KRN",.403,"NM",1,0)
XDR RESFILE FORM    FILE #15.1^15.1^0
"BLD",4,"KRN",.403,"NM","B","XDR RESFILE FORM    FILE #15.1",1)

"BLD",4,"KRN",.5,0)
.5
"BLD",4,"KRN",.5,"NM",0)
^9.68A^^
"BLD",4,"KRN",.84,0)
.84
"BLD",4,"KRN",3.6,0)
3.6
"BLD",4,"KRN",3.8,0)
3.8
"BLD",4,"KRN",9.2,0)
9.2
"BLD",4,"KRN",9.8,0)
9.8
"BLD",4,"KRN",9.8,"NM",0)
^9.68A^69^46
"BLD",4,"KRN",9.8,"NM",2,0)
XDR2NULL^^0^B288977
"BLD",4,"KRN",9.8,"NM",3,0)
XDRCNT^^0^B18892090
"BLD",4,"KRN",9.8,"NM",4,0)
XDRDADD^^0^B14713626
"BLD",4,"KRN",9.8,"NM",6,0)
XDRDCOMP^^0^B11858573
"BLD",4,"KRN",9.8,"NM",7,0)
XDRDDATA^^0^B1463733
"BLD",4,"KRN",9.8,"NM",9,0)
XDRDLIST^^0^B15430835
"BLD",4,"KRN",9.8,"NM",10,0)
XDRDMAIN^^0^B16784550
"BLD",4,"KRN",9.8,"NM",12,0)
XDRDPICK^^0^B75940679
"BLD",4,"KRN",9.8,"NM",13,0)
XDRDPRE1^^0^B12673607
"BLD",4,"KRN",9.8,"NM",14,0)
XDRDPREL^^0^B14472442
"BLD",4,"KRN",9.8,"NM",15,0)
XDRDPRG2^^0^B2141984
"BLD",4,"KRN",9.8,"NM",17,0)
XDRDQUE^^0^B18704513
"BLD",4,"KRN",9.8,"NM",19,0)
XDRDSHOW^^0^B21839000
"BLD",4,"KRN",9.8,"NM",20,0)
XDRDSTAT^^0^B11839944
"BLD",4,"KRN",9.8,"NM",21,0)
XDRDUP^^0^B9631874
"BLD",4,"KRN",9.8,"NM",22,0)
XDREMSG^^0^B8765373
"BLD",4,"KRN",9.8,"NM",26,0)
XDRMADD^^0^B35442806
"BLD",4,"KRN",9.8,"NM",28,0)
XDRMAINI^^0^B27169537
"BLD",4,"KRN",9.8,"NM",29,0)
XDRMERG^^0^B49078199
"BLD",4,"KRN",9.8,"NM",30,0)
XDRMERG0^^0^B40922646
"BLD",4,"KRN",9.8,"NM",31,0)
XDRMERG1^^0^B11317275
"BLD",4,"KRN",9.8,"NM",32,0)
XDRMERG2^^0^B69650318
"BLD",4,"KRN",9.8,"NM",33,0)
XDRMERGA^^0^B72382993
"BLD",4,"KRN",9.8,"NM",38,0)
XDRMVFY^^0^B2426142
"BLD",4,"KRN",9.8,"NM",42,0)
XDRPREL1^^0^B1097728
"BLD",4,"KRN",9.8,"NM",43,0)
XDRPTCAN^^0^B12464314
"BLD",4,"KRN",9.8,"NM",44,0)
XDRPTCLN^^0^B3167297
"BLD",4,"KRN",9.8,"NM",45,0)
XDRPTDOB^^0^B2889892
"BLD",4,"KRN",9.8,"NM",46,0)
XDRPTDOD^^0^B742889
"BLD",4,"KRN",9.8,"NM",50,0)
XDRPTLSD^^0^B1264374
"BLD",4,"KRN",9.8,"NM",51,0)
XDRPTMMN^^0^B1853250
"BLD",4,"KRN",9.8,"NM",52,0)
XDRPTN^^0^B14769218
"BLD",4,"KRN",9.8,"NM",53,0)
XDRPTSSN^^0^B7111734
"BLD",4,"KRN",9.8,"NM",54,0)
XDRPTSX^^0^B967390
"BLD",4,"KRN",9.8,"NM",55,0)
XDRRMRG0^^0^B9182782
"BLD",4,"KRN",9.8,"NM",56,0)
XDRRMRG1^^0^B84128265
"BLD",4,"KRN",9.8,"NM",57,0)
XDRRMRG2^^0^B14478811
"BLD",4,"KRN",9.8,"NM",60,0)
XDRUTL^^0^B2519774
"BLD",4,"KRN",9.8,"NM",61,0)
XDRVCHEK^^0^B9014483
"BLD",4,"KRN",9.8,"NM",62,0)
XDRDEDT^^0^B30458394
"BLD",4,"KRN",9.8,"NM",63,0)
XDRDPRGE^^0^B8276200
"BLD",4,"KRN",9.8,"NM",64,0)
XDRMERGB^^0^B76785661
"BLD",4,"KRN",9.8,"NM",66,0)
XDRDVAL^^0^B27476444
"BLD",4,"KRN",9.8,"NM",67,0)
XDRDVAL1^^0^B45647037
"BLD",4,"KRN",9.8,"NM",68,0)
XDRDVAL2^^0^B36896923
"BLD",4,"KRN",9.8,"NM",69,0)
XDRMAIN^^0^B16902409
"BLD",4,"KRN",9.8,"NM","B","XDR2NULL",2)

"BLD",4,"KRN",9.8,"NM","B","XDRCNT",3)

"BLD",4,"KRN",9.8,"NM","B","XDRDADD",4)

"BLD",4,"KRN",9.8,"NM","B","XDRDCOMP",6)

"BLD",4,"KRN",9.8,"NM","B","XDRDDATA",7)

"BLD",4,"KRN",9.8,"NM","B","XDRDEDT",62)

"BLD",4,"KRN",9.8,"NM","B","XDRDLIST",9)

"BLD",4,"KRN",9.8,"NM","B","XDRDMAIN",10)

"BLD",4,"KRN",9.8,"NM","B","XDRDPICK",12)

"BLD",4,"KRN",9.8,"NM","B","XDRDPRE1",13)

"BLD",4,"KRN",9.8,"NM","B","XDRDPREL",14)

"BLD",4,"KRN",9.8,"NM","B","XDRDPRG2",15)

"BLD",4,"KRN",9.8,"NM","B","XDRDPRGE",63)

"BLD",4,"KRN",9.8,"NM","B","XDRDQUE",17)

"BLD",4,"KRN",9.8,"NM","B","XDRDSHOW",19)

"BLD",4,"KRN",9.8,"NM","B","XDRDSTAT",20)

"BLD",4,"KRN",9.8,"NM","B","XDRDUP",21)

"BLD",4,"KRN",9.8,"NM","B","XDRDVAL",66)

"BLD",4,"KRN",9.8,"NM","B","XDRDVAL1",67)

"BLD",4,"KRN",9.8,"NM","B","XDRDVAL2",68)

"BLD",4,"KRN",9.8,"NM","B","XDREMSG",22)

"BLD",4,"KRN",9.8,"NM","B","XDRMADD",26)

"BLD",4,"KRN",9.8,"NM","B","XDRMAIN",69)

"BLD",4,"KRN",9.8,"NM","B","XDRMAINI",28)

"BLD",4,"KRN",9.8,"NM","B","XDRMERG",29)

"BLD",4,"KRN",9.8,"NM","B","XDRMERG0",30)

"BLD",4,"KRN",9.8,"NM","B","XDRMERG1",31)

"BLD",4,"KRN",9.8,"NM","B","XDRMERG2",32)

"BLD",4,"KRN",9.8,"NM","B","XDRMERGA",33)

"BLD",4,"KRN",9.8,"NM","B","XDRMERGB",64)

"BLD",4,"KRN",9.8,"NM","B","XDRMVFY",38)

"BLD",4,"KRN",9.8,"NM","B","XDRPREL1",42)

"BLD",4,"KRN",9.8,"NM","B","XDRPTCAN",43)

"BLD",4,"KRN",9.8,"NM","B","XDRPTCLN",44)

"BLD",4,"KRN",9.8,"NM","B","XDRPTDOB",45)

"BLD",4,"KRN",9.8,"NM","B","XDRPTDOD",46)

"BLD",4,"KRN",9.8,"NM","B","XDRPTLSD",50)

"BLD",4,"KRN",9.8,"NM","B","XDRPTMMN",51)

"BLD",4,"KRN",9.8,"NM","B","XDRPTN",52)

"BLD",4,"KRN",9.8,"NM","B","XDRPTSSN",53)

"BLD",4,"KRN",9.8,"NM","B","XDRPTSX",54)

"BLD",4,"KRN",9.8,"NM","B","XDRRMRG0",55)

"BLD",4,"KRN",9.8,"NM","B","XDRRMRG1",56)

"BLD",4,"KRN",9.8,"NM","B","XDRRMRG2",57)

"BLD",4,"KRN",9.8,"NM","B","XDRUTL",60)

"BLD",4,"KRN",9.8,"NM","B","XDRVCHEK",61)

"BLD",4,"KRN",19,0)
19
"BLD",4,"KRN",19,"NM",0)
^9.68A^30^27
"BLD",4,"KRN",19,"NM",1,0)
XDR ADD VERIFIED DUPS^^0
"BLD",4,"KRN",19,"NM",2,0)
XDR ANCILLARY REVIEW^^0
"BLD",4,"KRN",19,"NM",3,0)
XDR APPROVE FOR MERGE^^0
"BLD",4,"KRN",19,"NM",5,0)
XDR CHECK MERGE PROCESS STATUS^^0
"BLD",4,"KRN",19,"NM",6,0)
XDR CHECK PAIR^^0
"BLD",4,"KRN",19,"NM",7,0)
XDR DISPLAY SEARCH STATUS^^0
"BLD",4,"KRN",19,"NM",8,0)
XDR EDIT DUP RECORD STATUS^^0
"BLD",4,"KRN",19,"NM",9,0)
XDR EDIT DUP RESOLUTION FILE^^0
"BLD",4,"KRN",19,"NM",10,0)
XDR FIND POTENTIAL DUPLICATES^^0
"BLD",4,"KRN",19,"NM",11,0)
XDR MAIN MENU^^0
"BLD",4,"KRN",19,"NM",12,0)
XDR MANAGER UTILITIES^^0
"BLD",4,"KRN",19,"NM",13,0)
XDR MERGE READY DUPLICATES^^0
"BLD",4,"KRN",19,"NM",15,0)
XDR OPERATIONS MENU^^0
"BLD",4,"KRN",19,"NM",16,0)
XDR PRELIMINARY SCAN^^0
"BLD",4,"KRN",19,"NM",17,0)
XDR PRELIMINARY SCAN LIST^^0
"BLD",4,"KRN",19,"NM",18,0)
XDR PRINT LIST^^0
"BLD",4,"KRN",19,"NM",19,0)
XDR PURGE^^0
"BLD",4,"KRN",19,"NM",20,0)
XDR PURGE2^^0
"BLD",4,"KRN",19,"NM",21,0)
XDR RESTART MERGE PROCESS^^0
"BLD",4,"KRN",19,"NM",22,0)
XDR SCAN POSSIBLE DUPLICATES^^0
"BLD",4,"KRN",19,"NM",23,0)
XDR SEARCH ALL^^0
"BLD",4,"KRN",19,"NM",24,0)
XDR STOP MERGE PROCESS^^0
"BLD",4,"KRN",19,"NM",25,0)
XDR TALLY STATUS FIELDS^^0
"BLD",4,"KRN",19,"NM",26,0)
XDR UTILITIES MENU^^0
"BLD",4,"KRN",19,"NM",27,0)
XDR VERIFY ALL^^0
"BLD",4,"KRN",19,"NM",29,0)
XDR VIEW DUPLICATE RECORD^^0
"BLD",4,"KRN",19,"NM",30,0)
XDR VALID CHECK^^0
"BLD",4,"KRN",19,"NM","B","XDR ADD VERIFIED DUPS",1)

"BLD",4,"KRN",19,"NM","B","XDR ANCILLARY REVIEW",2)

"BLD",4,"KRN",19,"NM","B","XDR APPROVE FOR MERGE",3)

"BLD",4,"KRN",19,"NM","B","XDR CHECK MERGE PROCESS STATUS",5)

"BLD",4,"KRN",19,"NM","B","XDR CHECK PAIR",6)

"BLD",4,"KRN",19,"NM","B","XDR DISPLAY SEARCH STATUS",7)

"BLD",4,"KRN",19,"NM","B","XDR EDIT DUP RECORD STATUS",8)

"BLD",4,"KRN",19,"NM","B","XDR EDIT DUP RESOLUTION FILE",9)

"BLD",4,"KRN",19,"NM","B","XDR FIND POTENTIAL DUPLICATES",10)

"BLD",4,"KRN",19,"NM","B","XDR MAIN MENU",11)

"BLD",4,"KRN",19,"NM","B","XDR MANAGER UTILITIES",12)

"BLD",4,"KRN",19,"NM","B","XDR MERGE READY DUPLICATES",13)

"BLD",4,"KRN",19,"NM","B","XDR OPERATIONS MENU",15)

"BLD",4,"KRN",19,"NM","B","XDR PRELIMINARY SCAN",16)

"BLD",4,"KRN",19,"NM","B","XDR PRELIMINARY SCAN LIST",17)

"BLD",4,"KRN",19,"NM","B","XDR PRINT LIST",18)

"BLD",4,"KRN",19,"NM","B","XDR PURGE",19)

"BLD",4,"KRN",19,"NM","B","XDR PURGE2",20)

"BLD",4,"KRN",19,"NM","B","XDR RESTART MERGE PROCESS",21)

"BLD",4,"KRN",19,"NM","B","XDR SCAN POSSIBLE DUPLICATES",22)

"BLD",4,"KRN",19,"NM","B","XDR SEARCH ALL",23)

"BLD",4,"KRN",19,"NM","B","XDR STOP MERGE PROCESS",24)

"BLD",4,"KRN",19,"NM","B","XDR TALLY STATUS FIELDS",25)

"BLD",4,"KRN",19,"NM","B","XDR UTILITIES MENU",26)

"BLD",4,"KRN",19,"NM","B","XDR VALID CHECK",30)

"BLD",4,"KRN",19,"NM","B","XDR VERIFY ALL",27)

"BLD",4,"KRN",19,"NM","B","XDR VIEW DUPLICATE RECORD",29)

"BLD",4,"KRN",19.1,0)
19.1
"BLD",4,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",4,"KRN",101,0)
101
"BLD",4,"KRN",409.61,0)
409.61
"BLD",4,"KRN",771,0)
771
"BLD",4,"KRN","B",.4,.4)

"BLD",4,"KRN","B",.401,.401)

"BLD",4,"KRN","B",.402,.402)

"BLD",4,"KRN","B",.403,.403)

"BLD",4,"KRN","B",.5,.5)

"BLD",4,"KRN","B",.84,.84)

"BLD",4,"KRN","B",3.6,3.6)

"BLD",4,"KRN","B",3.8,3.8)

"BLD",4,"KRN","B",9.2,9.2)

"BLD",4,"KRN","B",9.8,9.8)

"BLD",4,"KRN","B",19,19)

"BLD",4,"KRN","B",19.1,19.1)

"BLD",4,"KRN","B",101,101)

"BLD",4,"KRN","B",409.61,409.61)

"BLD",4,"KRN","B",771,771)

"BLD",4,"QUES",0)
^9.62^^
"BLD",4,"REQB",0)
^9.611^9^9
"BLD",4,"REQB",1,0)
PSJ*4.5*43^2
"BLD",4,"REQB",2,0)
DI*21.0*42^2
"BLD",4,"REQB",3,0)
DI*21.0*41^2
"BLD",4,"REQB",4,0)
DG*5.3*156^2
"BLD",4,"REQB",5,0)
IMR*2.1*2^2
"BLD",4,"REQB",6,0)
IB*2.0*94^2
"BLD",4,"REQB",7,0)
LR*5.2*205^2
"BLD",4,"REQB",8,0)
NDBI 1.0^2
"BLD",4,"REQB",9,0)
IB*2.0*97^2
"BLD",4,"REQB","B","DG*5.3*156",4)

"BLD",4,"REQB","B","DI*21.0*41",3)

"BLD",4,"REQB","B","DI*21.0*42",2)

"BLD",4,"REQB","B","IB*2.0*94",6)

"BLD",4,"REQB","B","IB*2.0*97",9)

"BLD",4,"REQB","B","IMR*2.1*2",5)

"BLD",4,"REQB","B","LR*5.2*205",7)

"BLD",4,"REQB","B","NDBI 1.0",8)

"BLD",4,"REQB","B","PSJ*4.5*43",1)

"DATA",15.1,2,0)
2^c^2980321.191248^2980322.033438^BASIC^^66596^7144445^XDRPTCAN^30298^^1551^5^5^60^^^^^^^^^^0^^^^
"DATA",15.1,2,1)
3^44;52;2;50.8
"DATA",15.1,2,2,0)
^15.12^3^3
"DATA",15.1,2,2,1,0)
LABORATORY^^63
"DATA",15.1,2,2,1,1,0)
^15.121P^^0
"DATA",15.1,2,2,1,2)
1;.085;2;4;5;8;9^Bld Bank;Transfusn;EM;Lab Tests;Microbiol;Surg Pathol;Cytology
"DATA",15.1,2,2,2,0)
RADIOLOGY^^70
"DATA",15.1,2,2,2,1,0)
^15.121P^^0
"DATA",15.1,2,2,2,2)
2^Radiology
"DATA",15.1,2,2,3,0)
PHARMACY^^55
"DATA",15.1,2,2,3,1,0)
^15.121P^^0
"DATA",15.1,2,3)

"DATA",15.1,2,11,0)
^15.111A^9^8
"DATA",15.1,2,11,1,0)
NAME^1^XDRPTN^2^.01^100^-60
"DATA",15.1,2,11,2,0)
SSN^5^XDRPTSSN^2^.09^100^-60
"DATA",15.1,2,11,3,0)
SEX^10^XDRPTSX^2^.02^20^-90
"DATA",15.1,2,11,5,0)
DATE OF DEATH^20^XDRPTDOD^2^.351^50^-50
"DATA",15.1,2,11,6,0)
MOTHER'S MAIDEN NAME^25^XDRPTMMN^2^.2403^50^-90
"DATA",15.1,2,11,7,0)
LAST SEPARATION DATE^31^XDRPTLSD^2^.327^50^-40
"DATA",15.1,2,11,8,0)
CLAIM NUMBER^32^XDRPTCLN^2^.313^80^-60
"DATA",15.1,2,11,9,0)
DATE OF BIRTH^17^XDRPTDOB^2^.03^60^-40
"FIA",15)
DUPLICATE RECORD
"FIA",15,0)
^VA(15,
"FIA",15,0,0)
15IsV
"FIA",15,0,1)
y^y^f^^^^n
"FIA",15,0,10)

"FIA",15,0,11)

"FIA",15,0,"RLRO")

"FIA",15,0,"VR")
7.3^XT
"FIA",15,15)
0
"FIA",15,15.01101)
0
"FIA",15,15.013)
0
"FIA",15,15.02)
0
"FIA",15,15.02101)
0
"FIA",15,15.03)
0
"FIA",15,15.031)
0
"FIA",15.1)
DUPLICATE RESOLUTION
"FIA",15.1,0)
^VA(15.1,
"FIA",15.1,0,0)
15.1P
"FIA",15.1,0,1)
y^y^f^^n^^y^m^n
"FIA",15.1,0,10)

"FIA",15.1,0,11)

"FIA",15.1,0,"RLRO")

"FIA",15.1,0,"VR")
7.3^XT
"FIA",15.1,15.1)
0
"FIA",15.1,15.111)
0
"FIA",15.1,15.112)
0
"FIA",15.1,15.12)
0
"FIA",15.1,15.121)
0
"FIA",15.2)
XDR MERGE PROCESS
"FIA",15.2,0)
^VA(15.2,
"FIA",15.2,0,0)
15.2O
"FIA",15.2,0,1)
y^y^f^^^^n
"FIA",15.2,0,10)

"FIA",15.2,0,11)

"FIA",15.2,0,"RLRO")

"FIA",15.2,0,"VR")
7.3^XT
"FIA",15.2,15.2)
0
"FIA",15.2,15.22)
0
"FIA",15.2,15.23)
0
"FIA",15.2,15.232)
0
"FIA",15.3)
XDR REPOINTED ENTRY
"FIA",15.3,0)
^VA(15.3,
"FIA",15.3,0,0)
15.3
"FIA",15.3,0,1)
y^y^f^^^^n
"FIA",15.3,0,10)

"FIA",15.3,0,11)

"FIA",15.3,0,"RLRO")

"FIA",15.3,0,"VR")
7.3^XT
"FIA",15.3,15.3)
0
"FIA",15.3,15.31)
0
"FIA",15.4)
MERGE IMAGES
"FIA",15.4,0)
^XDRM(
"FIA",15.4,0,0)
15.4
"FIA",15.4,0,1)
y^y^f^^^^n
"FIA",15.4,0,10)

"FIA",15.4,0,11)

"FIA",15.4,0,"RLRO")

"FIA",15.4,0,"VR")
7.3^XT
"FIA",15.4,15.4)
0
"FIA",15.4,15.41)
0
"FIA",15.4,15.411)
0
"FIA",15.4,15.42)
0
"FIA",15.4,15.421)
0
"FIA",15.4,15.43)
0
"KRN",.4,2571,-1)
0^2
"KRN",.4,2571,0)
XDR MERGED LIST^2910619.0924^^15^^^2971230^
"KRN",.4,2571,"%D",0)
^^2^2^2970513^^
"KRN",.4,2571,"%D",1,0)
This template prints a list of merged duplicates form the duplicate
"KRN",.4,2571,"%D",2,0)
record file.
"KRN",.4,2571,"F",1)
"RECORD 1: ";S1;C1~.01;X~"RECORD 2: ";C40~.02;X~"STATUS: ";C3~.03;X~"MERGE DIRECTION: ";C40~.04;X~"MERGE STATUS: ";C3~.05;X~"DATE FOUND: ";C40~.06;X~
"KRN",.4,2571,"F",2)
"DATE VERIFIED: ";C3~.07;X~"DATE RESOLVED: ";C40~.08;X~"WHO CREATED: ";C3~.09;X~"WHO VERIFIED: ";C40~.11;X~"DC TOTAL POSSIBLE SCORE: ";C3~.15;X~
"KRN",.4,2571,"F",3)
"DC POTENTIAL DUPE THRESHOLD %: ";C40~.17;X~"DC DUPE MATCH SCORE: ";C3~.18;X~"DC DUPE MATCH PERCENTILE: ";C40~.19;X~"REMARKS: ";C3~1;X~
"KRN",.4,2571,"H")
DUPLICATE RECORD LIST
"KRN",.4,2847,-1)
0^1
"KRN",.4,2847,0)
XDR BRIEF LIST^2971209.1733^@^15^^@^2980408
"KRN",.4,2847,"F",1)
"IEN: ";S1;C8~0;X~"RECORD 1: ";C3~.01;X~S X=+^VA(15,D0,0) W " [IEN: "_X_"]";X;Z;"S X=+^VA(15,D0,0) W " [IEN: "_X_"]""~
"KRN",.4,2847,"F",2)
S X=$P(^DPT(+^VA(15,D0,0),0),U,9) W "   SSN: "_X;X;Z;"S X=$P(^DPT(+^VA(15,D0,0),0),U,9) W "   SSN: "_X"~"RECORD 2: ";C3~.02;X~
"KRN",.4,2847,"F",3)
S X=+$P(^VA(15,D0,0),U,2) W " [IEN: "_X_"]";X;Z;"S X=+$P(^VA(15,D0,0),U,2) W " [IEN: "_X_"]""~
"KRN",.4,2847,"F",4)
S X=$P(^DPT(+$P(^VA(15,D0,0),U,2),0),U,9) W "   SSN: "_X;X;Z;"S X=$P(^DPT(+$P(^VA(15,D0,0),U,2),0),U,9) W "   SSN: "_X"~"STATUS: ";C5~.03;X~
"KRN",.4,2847,"F",5)
"SCORE %: ";C4~.19;X;L3~
"KRN",.4,2847,"H")
DUPLICATE RECORD LIST
"KRN",.401,2464,-1)
0^3
"KRN",.401,2464,0)
XDR POTENTIAL DUPLICATE LIST^2971203.1202^^15^^^2980408
"KRN",.401,2464,2,0)
^.4014^3^3
"KRN",.401,2464,2,1,0)
15^^STATUS="POTENTIAL DUPLICATE, UNVERIFIED"^@"@B^;L1;L1^^^^^4
"KRN",.401,2464,2,1,"CM")
S Y(2)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,3)_":",2),$C(59),1)="POTENTIAL DUPLICATE, UNVERIFIED" I D0>0 S DISX(1)=X
"KRN",.401,2464,2,1,"F")
0
"KRN",.401,2464,2,1,"GET")
S Y(2)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,3)_":",2),$C(59),1)="POTENTIAL DUPLICATE, UNVERIFIED" I D0>0 S DISX(1)=X
"KRN",.401,2464,2,1,"QCON")
I DISX(1)
"KRN",.401,2464,2,1,"T")
1
"KRN",.401,2464,2,1,"TXT")
STATUS=""POTENTIAL DUPLICATE, UNVERIFIED""
"KRN",.401,2464,2,2,0)
15^.19^DC DUPE MATCH PERCENTILE^@-^^^^^^2
"KRN",.401,2464,2,2,"GET")
S DISX(2)=$P($G(^VA(15,D0,0)),U,19)
"KRN",.401,2464,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,2464,2,2,"TXT")
DC DUPE MATCH PERCENTILE not null
"KRN",.401,2464,2,3,0)
15^.06^DATE FOUND^@^^^^^^1
"KRN",.401,2464,2,3,"GET")
S DISX(3)=$P($G(^VA(15,D0,0)),U,6)
"KRN",.401,2464,2,3,"QCON")
I DISX(3)'=""
"KRN",.401,2464,2,3,"TXT")
DATE FOUND not null
"KRN",.401,2464,2,"B",15,1)

"KRN",.401,2464,2,"B",15,2)

"KRN",.401,2464,2,"B",15,3)

"KRN",.401,2464,"%D",0)
^^2^2^2971203^^^
"KRN",.401,2464,"%D",1,0)
This template is used to produce a listing of all Potential, Unverified
"KRN",.401,2464,"%D",2,0)
Duplicates of a given file of the Duplicate Record File.
"KRN",.401,2465,-1)
0^2
"KRN",.401,2465,0)
XDR NOT READY TO MERGE LIST^2971203.1201^^15^^^2971230
"KRN",.401,2465,2,0)
^.4014^4^4
"KRN",.401,2465,2,1,0)
15^.03^STATUS^@^^^^^^3
"KRN",.401,2465,2,1,"GET")
S DISX(1)=$P($G(^VA(15,D0,0)),U,3)
"KRN",.401,2465,2,1,"QCON")
I DISX(1)'=""
"KRN",.401,2465,2,1,"SER")
0.0000^0.0000
"KRN",.401,2465,2,1,"TXT")
STATUS not null
"KRN",.401,2465,2,2,0)
15^.05^MERGE STATUS^@^^^^^^3
"KRN",.401,2465,2,2,"GET")
S DISX(2)=$P($G(^VA(15,D0,0)),U,5)
"KRN",.401,2465,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,2465,2,2,"SER")
0.7030^0.7030
"KRN",.401,2465,2,2,"TXT")
MERGE STATUS not null
"KRN",.401,2465,2,3,0)
15^.19^DC DUPE MATCH PERCENTILE^@-^^^^^^2
"KRN",.401,2465,2,3,"GET")
S DISX(3)=$P($G(^VA(15,D0,0)),U,19)
"KRN",.401,2465,2,3,"QCON")
I DISX(3)'=""
"KRN",.401,2465,2,3,"SER")
0.0099^0.0099
"KRN",.401,2465,2,3,"TXT")
DC DUPE MATCH PERCENTILE not null
"KRN",.401,2465,2,4,0)
15^.06^DATE FOUND^@^^^^^^1
"KRN",.401,2465,2,4,"GET")
S DISX(4)=$P($G(^VA(15,D0,0)),U,6)
"KRN",.401,2465,2,4,"QCON")
I DISX(4)'=""
"KRN",.401,2465,2,4,"SER")
0.0000^0.0000
"KRN",.401,2465,2,4,"TXT")
DATE FOUND not null
"KRN",.401,2465,2,"B",15,1)

"KRN",.401,2465,2,"B",15,2)

"KRN",.401,2465,2,"B",15,3)

"KRN",.401,2465,2,"B",15,4)

"KRN",.401,2465,"%D",0)
^^2^2^2971203^^^
"KRN",.401,2465,"%D",1,0)
This template is used to print out Verified Duplicates that have a
"KRN",.401,2465,"%D",2,0)
'Merge Status' of Not Ready.
"KRN",.401,2466,-1)
0^4
"KRN",.401,2466,0)
XDR READY TO MERGE LIST^2971203.1203^^15^^^2980408
"KRN",.401,2466,2,0)
^.4014^4^4
"KRN",.401,2466,2,1,0)
15^.03^STATUS^@^^^^^^3
"KRN",.401,2466,2,1,"GET")
S DISX(1)=$P($G(^VA(15,D0,0)),U,3)
"KRN",.401,2466,2,1,"QCON")
I DISX(1)'=""
"KRN",.401,2466,2,1,"SER")
0.0000^0.0000
"KRN",.401,2466,2,1,"TXT")
STATUS not null
"KRN",.401,2466,2,2,0)
15^.05^MERGE STATUS^@^^^^^^3
"KRN",.401,2466,2,2,"GET")
S DISX(2)=$P($G(^VA(15,D0,0)),U,5)
"KRN",.401,2466,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,2466,2,2,"SER")
0.7723^0.7723
"KRN",.401,2466,2,2,"TXT")
MERGE STATUS not null
"KRN",.401,2466,2,3,0)
15^.19^DC DUPE MATCH PERCENTILE^@-^^^^^^2
"KRN",.401,2466,2,3,"GET")
S DISX(3)=$P($G(^VA(15,D0,0)),U,19)
"KRN",.401,2466,2,3,"QCON")
I DISX(3)'=""
"KRN",.401,2466,2,3,"SER")
0.0099^0.0099
"KRN",.401,2466,2,3,"TXT")
DC DUPE MATCH PERCENTILE not null
"KRN",.401,2466,2,4,0)
15^.06^DATE FOUND^@^^^^^^1
"KRN",.401,2466,2,4,"GET")
S DISX(4)=$P($G(^VA(15,D0,0)),U,6)
"KRN",.401,2466,2,4,"QCON")
I DISX(4)'=""
"KRN",.401,2466,2,4,"SER")
0.0000^0.0000
"KRN",.401,2466,2,4,"TXT")
DATE FOUND not null
"KRN",.401,2466,2,"B",15,1)

"KRN",.401,2466,2,"B",15,2)

"KRN",.401,2466,2,"B",15,3)

"KRN",.401,2466,2,"B",15,4)

"KRN",.401,2466,"%D",0)
^^3^3^2971203^^
"KRN",.401,2466,"%D",1,0)
This template is used to produce a listing of all Verified Duplicates that
"KRN",.401,2466,"%D",2,0)
have a merge status of Ready for a given file from the Duplicate Record
"KRN",.401,2466,"%D",3,0)
File.
"KRN",.401,2743,-1)
0^1
"KRN",.401,2743,0)
XDR MERGED LIST^2971203.1159^^15^^^2980408
"KRN",.401,2743,2,0)
^.4014^3^3
"KRN",.401,2743,2,1,0)
15^.05^MERGE STATUS^@^^^^^^3
"KRN",.401,2743,2,1,"GET")
S DISX(1)=$P($G(^VA(15,D0,0)),U,5)
"KRN",.401,2743,2,1,"QCON")
I DISX(1)'=""
"KRN",.401,2743,2,1,"SER")
0.7723^0.7723
"KRN",.401,2743,2,1,"TXT")
MERGE STATUS not null
"KRN",.401,2743,2,2,0)
15^.19^DC DUPE MATCH PERCENTILE^@-^^^^^^2
"KRN",.401,2743,2,2,"GET")
S DISX(2)=$P($G(^VA(15,D0,0)),U,19)
"KRN",.401,2743,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,2743,2,2,"SER")
0.0099^0.0099
"KRN",.401,2743,2,2,"TXT")
DC DUPE MATCH PERCENTILE not null
"KRN",.401,2743,2,3,0)
15^.08^DATE RESOLVED^@^^^^^^1
"KRN",.401,2743,2,3,"GET")
S DISX(3)=$P($G(^VA(15,D0,0)),U,8)
"KRN",.401,2743,2,3,"QCON")
I DISX(3)'=""
"KRN",.401,2743,2,3,"SER")
0.8020^0.8020
"KRN",.401,2743,2,3,"TXT")
DATE RESOLVED not null
"KRN",.401,2743,2,"B",15,1)

"KRN",.401,2743,2,"B",15,2)

"KRN",.401,2743,2,"B",15,3)

"KRN",.401,2743,"%D",0)
^^2^2^2971203^^
"KRN",.401,2743,"%D",1,0)
This template is used to print out a listing of all merged entries
"KRN",.401,2743,"%D",2,0)
from the duplicate record file.
"KRN",.403,30,-1)
0^1
"KRN",.403,30,0)
XDR RESFILE FORM^^^^2951117.1044^^^15.1^0^0^1
"KRN",.403,30,15,0)
^^2^2^2970805^
"KRN",.403,30,15,1,0)
This form is used to edited site parameters.  This form is used in the
"KRN",.403,30,15,2,0)
option, Edit Duplicate Resolution File, which is locked by the XDRMGR key.
"KRN",.403,30,40,0)
^.4031I^3^3
"KRN",.403,30,40,1,0)
1^XDR RESFILE HEADER^1,1^2^
"KRN",.403,30,40,1,1)
Page 1
"KRN",.403,30,40,1,15,0)
^^3^3^2960306^
"KRN",.403,30,40,1,15,1,0)
This is 1 of 2 pages for this form.  This page contains two sub-pages
"KRN",.403,30,40,1,15,2,0)
that are linked to it and two blocks, a header block and a data block.
"KRN",.403,30,40,1,15,3,0)
Entries are made into one file, 15.1.
"KRN",.403,30,40,1,40,0)
^.4032IP^100^3
"KRN",.403,30,40,1,40,92,0)
XDR RESFILE HEADER^1^1,1^d
"KRN",.403,30,40,1,40,93,0)
XDR RESFILE DATA^2^2,1^e
"KRN",.403,30,40,1,40,100,0)
XDR RESFILE RPT-BLK1^3^12,1^e
"KRN",.403,30,40,1,40,100,2)
4
"KRN",.403,30,40,2,0)
1.1^^5,15^^^1^15,75
"KRN",.403,30,40,2,1)
Page 1.1
"KRN",.403,30,40,2,15,0)
^^1^1^2960305^
"KRN",.403,30,40,2,15,1,0)
This is a pop-up page for the Duplicate Test multiple (page 1.1).
"KRN",.403,30,40,2,40,0)
^.4032IP^94^1
"KRN",.403,30,40,2,40,94,0)
XDR RESFILE SUB-BLK1^1^1,1^e
"KRN",.403,30,40,3,0)
1.2^^5,10^^^1^17,78
"KRN",.403,30,40,3,1)
Page 1.2
"KRN",.403,30,40,3,15,0)
^^2^2^2960920^
"KRN",.403,30,40,3,15,1,0)
 
"KRN",.403,30,40,3,15,2,0)
This page is used for the multiple field, ancillary service.
"KRN",.403,30,40,3,40,0)
^.4032IP^96^2
"KRN",.403,30,40,3,40,95,0)
XDR RESFILE SUB-BLK2^1^1,1^e
"KRN",.403,30,40,3,40,96,0)
XDR RESFILE SUB-BLK3^2^9,30^e
"KRN",.403,30,40,3,40,96,2)
4
"KRN",.404,92,0)
XDR RESFILE HEADER^15.1^
"KRN",.404,92,15,0)
^^1^1^2960306^
"KRN",.404,92,15,1,0)
This is a header block for the main data entry page (page 1).
"KRN",.404,92,40,0)
^.4044I^3^3
"KRN",.404,92,40,1,0)
1^DUPLICATE RESOLUTION FILE^1
"KRN",.404,92,40,1,2)
^^1,28^1
"KRN",.404,92,40,2,0)
2^_______________________________________________________________________________^1
"KRN",.404,92,40,2,2)
^^3,1^1
"KRN",.404,92,40,3,0)
3^FILE TO BE CHECKED^3
"KRN",.404,92,40,3,1)
.01
"KRN",.404,92,40,3,2)
2,21^20^2,1
"KRN",.404,92,40,3,4)
1^^^1
"KRN",.404,93,0)
XDR RESFILE DATA^15.1
"KRN",.404,93,15,0)
^^1^1^2960305^
"KRN",.404,93,15,1,0)
This is a data block for the main page (page 1).
"KRN",.404,93,40,0)
^.4044I^20^9
"KRN",.404,93,40,2,0)
4^DUPLICATE MANAGER MAIL GROUP^3
"KRN",.404,93,40,2,1)
.11
"KRN",.404,93,40,2,2)
5,37^30^5,7
"KRN",.404,93,40,3,0)
6^POTENTIAL DUPLICATE THRESHOLD%^3
"KRN",.404,93,40,3,1)
.15
"KRN",.404,93,40,3,2)
6,37^3^6,5
"KRN",.404,93,40,13,0)
8^DAYS BEFORE FINAL VERIFY^3
"KRN",.404,93,40,13,1)
.13
"KRN",.404,93,40,13,2)
7,37^2^7,11
"KRN",.404,93,40,14,0)
10^DAYS BETWEEN VERIFY AND MERGE^3
"KRN",.404,93,40,14,1)
.14
"KRN",.404,93,40,14,2)
8,37^2^8,6
"KRN",.404,93,40,15,0)
12^NUMBER OF THREADS^3
"KRN",.404,93,40,15,1)
1.01
"KRN",.404,93,40,15,2)
9,37^1^9,18
"KRN",.404,93,40,17,0)
18^^1
"KRN",.404,93,40,18,0)
19^ANCILLARY SERVICE^1
"KRN",.404,93,40,18,2)
^^11,26^1
"KRN",.404,93,40,19,0)
20^-----------------^1
"KRN",.404,93,40,19,2)
^^12,26^1
"KRN",.404,93,40,20,0)
2^MERGE MAIL GROUP^3
"KRN",.404,93,40,20,1)
.29
"KRN",.404,93,40,20,2)
4,37^30^4,19
"KRN",.404,94,0)
XDR RESFILE SUB-BLK1^15.111
"KRN",.404,94,15,0)
^^1^1^2960305^
"KRN",.404,94,15,1,0)
This is a block in the pop-up page used for the multiple Duplicate Test.
"KRN",.404,94,40,0)
^.4044I^8^7
"KRN",.404,94,40,1,0)
1^DUPLICATE RESOLUTION TESTS^1
"KRN",.404,94,40,1,2)
^^2,3^1
"KRN",.404,94,40,2,0)
2^DUPLICATE TEST^3
"KRN",.404,94,40,2,1)
.01
"KRN",.404,94,40,2,2)
4,30^25^4,14
"KRN",.404,94,40,4,0)
4^DUPLICATE TEST ROUTINE^3
"KRN",.404,94,40,4,1)
.03
"KRN",.404,94,40,4,2)
5,30^17^5,6
"KRN",.404,94,40,5,0)
5^FILE FOR INFORMATION^3
"KRN",.404,94,40,5,1)
.04
"KRN",.404,94,40,5,2)
6,30^26^6,8
"KRN",.404,94,40,6,0)
6^FIELD TO BE CHECKED^3
"KRN",.404,94,40,6,1)
.05
"KRN",.404,94,40,6,2)
7,30^18^7,9
"KRN",.404,94,40,7,0)
7^SUCCESSFUL MATCH WEIGHT^3
"KRN",.404,94,40,7,1)
.06
"KRN",.404,94,40,7,2)
8,30^5^8,5
"KRN",.404,94,40,8,0)
8^UNSUCCESSFUL MATCH WEIGHT^3
"KRN",.404,94,40,8,1)
.07
"KRN",.404,94,40,8,2)
9,30^4^9,3
"KRN",.404,95,0)
XDR RESFILE SUB-BLK2^15.12
"KRN",.404,95,15,0)
^^1^1^2960209^
"KRN",.404,95,15,1,0)
This is the data block the pop-up page.
"KRN",.404,95,40,0)
^.4044I^8^7
"KRN",.404,95,40,1,0)
2^ANCILLARY SERVICE INFORMATION^1
"KRN",.404,95,40,1,2)
^^2,3^1
"KRN",.404,95,40,2,0)
4^ANCILLARY SERVICE^3
"KRN",.404,95,40,2,1)
.01
"KRN",.404,95,40,2,2)
4,31^25^4,12
"KRN",.404,95,40,3,0)
12^MAIL GROUP NAME^3
"KRN",.404,95,40,3,1)
.02
"KRN",.404,95,40,3,2)
8,31^25^8,14
"KRN",.404,95,40,4,0)
6^PRIMARY FILE NUMBER^3
"KRN",.404,95,40,4,1)
.03
"KRN",.404,95,40,4,2)
5,31^12^5,10
"KRN",.404,95,40,6,0)
8^SUBFILES (FIELD NUMBERS)^3
"KRN",.404,95,40,6,1)
2.01
"KRN",.404,95,40,6,2)
6,31^15^6,5
"KRN",.404,95,40,7,0)
10^DISPLAY NAMES FOR SUBFILES^3
"KRN",.404,95,40,7,1)
2.02
"KRN",.404,95,40,7,2)
7,31^35^7,3
"KRN",.404,95,40,8,0)
14^INDIVIDUALS FOR ALERTS:^1
"KRN",.404,95,40,8,2)
^^9,7
"KRN",.404,96,0)
XDR RESFILE SUB-BLK3^15.121
"KRN",.404,96,15,0)
^^1^1^2960306^
"KRN",.404,96,15,1,0)
This block is a repeating block for the multiple Individual.
"KRN",.404,96,40,0)
^.4044I^1^1
"KRN",.404,96,40,1,0)
1^^3
"KRN",.404,96,40,1,1)
.01
"KRN",.404,96,40,1,2)
1,2^29
"KRN",.404,96,40,1,7)
^
"KRN",.404,100,0)
XDR RESFILE RPT-BLK1^15.12
"KRN",.404,100,15,0)
^^4^4^2960918^
"KRN",.404,100,15,1,0)
 
"KRN",.404,100,15,2,0)
 
"KRN",.404,100,15,3,0)
 
"KRN",.404,100,15,4,0)
This is a repeating block for the multiple Ancillary services.
"KRN",.404,100,40,0)
^.4044I^1^1
"KRN",.404,100,40,1,0)
1^^3
"KRN",.404,100,40,1,1)
.01
"KRN",.404,100,40,1,2)
3,26^25
"KRN",.404,100,40,1,7)
^1.2
"KRN",19,9156,-1)
0^23
"KRN",19,9156,0)
XDR SEARCH ALL^Start/Halt Duplicate Search^^R^^^XDR IDENTIFY^^^^^TOOLKIT
"KRN",19,9156,1,0)
^^8^8^2971122^
"KRN",19,9156,1,1,0)
This utility searches a selected file for potential duplicates.
"KRN",19,9156,1,2,0)
A search on a selected file seeking potential duplicates is performed
"KRN",19,9156,1,3,0)
using one of two methods: 1) A Basic search, which checks all records from
"KRN",19,9156,1,4,0)
the beginning of the file, and 2) a New search, which checks only those
"KRN",19,9156,1,5,0)
records that have been added or edited since the last search was run based
"KRN",19,9156,1,6,0)
on a user specified cross-reference.
"KRN",19,9156,1,7,0)
This is a tasked job that can be started and halted until
"KRN",19,9156,1,8,0)
the entire file has been checked.
"KRN",19,9156,25)
XDRDQUE
"KRN",19,9156,99)
55439,32579
"KRN",19,9156,"U")
START/HALT DUPLICATE SEARCH
"KRN",19,9157,-1)
0^18
"KRN",19,9157,0)
XDR PRINT LIST^Print List of File Duplicates^^R^^^XDR PRINTLIST^^^^^TOOLKIT
"KRN",19,9157,1,0)
^^4^4^2971112^^^
"KRN",19,9157,1,1,0)
This utility prints a list of file duplicates.  You may choose
"KRN",19,9157,1,2,0)
to print potential duplicates, verified ready to merge duplicates, not
"KRN",19,9157,1,3,0)
ready to merge verified duplicates and merged verified duplicates.  You
"KRN",19,9157,1,4,0)
may choose to print a brief listing or a captioned listing.
"KRN",19,9157,25)
XDRDLIST
"KRN",19,9157,"U")
PRINT LIST OF FILE DUPLICATES
"KRN",19,9158,-1)
0^27
"KRN",19,9158,0)
XDR VERIFY ALL^Verify Potential Duplicates^^R^^^XDR VERIFY ALL^^^^^TOOLKIT
"KRN",19,9158,1,0)
^^7^7^2970724^^^
"KRN",19,9158,1,1,0)
This option is used to mark a potential duplicate as an actual duplicate
"KRN",19,9158,1,2,0)
(OR mark a potential duplicate pair as VERIFIED - NOT DUPLICATES).
"KRN",19,9158,1,3,0)
The 'from' and 'to' records are identified and all top level
"KRN",19,9158,1,4,0)
patient file fields resolved and a bulletin generated informing
"KRN",19,9158,1,5,0)
the Verified Duplicate mailgroup of the actual duplicate.
"KRN",19,9158,1,6,0)
If there is no interactive package merge that needs to
"KRN",19,9158,1,7,0)
take place the merge process will also occur.
"KRN",19,9158,25)
XDRDPICK
"KRN",19,9158,"U")
VERIFY POTENTIAL DUPLICATES
"KRN",19,9159,-1)
0^15
"KRN",19,9159,0)
XDR OPERATIONS MENU^Operations^^M^^^^^^^^TOOLKIT^^1^1
"KRN",19,9159,1,0)
^^2^2^2971231^^
"KRN",19,9159,1,1,0)
This menu contains options for operations.  These options are used by the
"KRN",19,9159,1,2,0)
primary reviewer along with the utilities menu.
"KRN",19,9159,10,0)
^19.01PI^7^7
"KRN",19,9159,10,2,0)
9158^VPD^4
"KRN",19,9159,10,2,"^")
XDR VERIFY ALL
"KRN",19,9159,10,6,0)
10266^ADR^6
"KRN",19,9159,10,6,"^")
XDR ANCILLARY REVIEW
"KRN",19,9159,10,7,0)
10267^APP^2
"KRN",19,9159,10,7,"^")
XDR APPROVE FOR MERGE
"KRN",19,9159,15)
W:$D(IOF) @IOF W !,"Duplicate Resolution System Menu",!
"KRN",19,9159,20)
W:$D(IOF) @IOF W !,"Duplicate Resolution Operations Menu",!
"KRN",19,9159,99)
57438,51851
"KRN",19,9159,99.1)
53418,43881
"KRN",19,9159,"U")
OPERATIONS
"KRN",19,9160,-1)
0^6
"KRN",19,9160,0)
XDR CHECK PAIR^Check Pair of Records to see if Duplicates^^R^^^XDR CHECK PAIR^^^^^TOOLKIT
"KRN",19,9160,1,0)
^^4^4^2971002^^^^
"KRN",19,9160,1,1,0)
This option allows an operator to input two records and then
"KRN",19,9160,1,2,0)
run them through the duplicate resolution software and see
"KRN",19,9160,1,3,0)
what there Match Score would be.  It does not add records to the
"KRN",19,9160,1,4,0)
Duplicate Record file.
"KRN",19,9160,20)

"KRN",19,9160,25)
XDRDCOMP
"KRN",19,9160,"U")
CHECK PAIR OF RECORDS TO SEE I
"KRN",19,9161,-1)
0^9
"KRN",19,9161,0)
XDR EDIT DUP RESOLUTION FILE^Edit Site Parameters^^C^^^XDR EDIT DUP RESOLUTION FILE^^^^^TOOLKIT
"KRN",19,9161,1,0)
^^4^4^2970806^^^^
"KRN",19,9161,1,1,0)
This option allows you to edit the values used by the duplicate resolution
"KRN",19,9161,1,2,0)
software for determining whether to add an entry or not.  Once you
"KRN",19,9161,1,3,0)
find the sequence of scores that best fit your facility, it is
"KRN",19,9161,1,4,0)
recommended that you don't change these values.
"KRN",19,9161,30)
VA(15.1,
"KRN",19,9161,31)
AELMQ
"KRN",19,9161,40)
[XDR RESFILE FORM]
"KRN",19,9161,41)
15.1
"KRN",19,9161,50)
VA(15.1,
"KRN",19,9161,51)
[XDR EDIT DUP RESOLUTION FILE]
"KRN",19,9161,52)

"KRN",19,9161,"U")
EDIT SITE PARAMETERS
"KRN",19,9162,-1)
0^29
"KRN",19,9162,0)
XDR VIEW DUPLICATE RECORD^View Duplicate Record Entries^^I^^^^^^^^TOOLKIT
"KRN",19,9162,1,0)
^^2^2^2971113^^^^
"KRN",19,9162,1,1,0)
This option is used to view Duplicate Record entries in a
"KRN",19,9162,1,2,0)
captioned format.
"KRN",19,9162,25)

"KRN",19,9162,30)
VA(15,
"KRN",19,9162,31)
QEAM
"KRN",19,9162,32)
Select a POTENTIAL DUPLICATE ENTRY:
"KRN",19,9162,60)

"KRN",19,9162,61)

"KRN",19,9162,80)
VA(15,
"KRN",19,9162,81)
0;1;11;21
"KRN",19,9162,"U")
VIEW DUPLICATE RECORD ENTRIES
"KRN",19,9163,-1)
0^8
"KRN",19,9163,0)
XDR EDIT DUP RECORD STATUS^Edit the Status Field of a Duplicate Record^^R^^^^^^^^TOOLKIT
"KRN",19,9163,1,0)
^^4^4^2980204^^^
"KRN",19,9163,1,1,0)
This option is used to edit the status field of the
"KRN",19,9163,1,2,0)
Duplicate Record entry.  It would be used when a pair
"KRN",19,9163,1,3,0)
was identified as Verified Duplicate or Verified Not A Duplicate and
"KRN",19,9163,1,4,0)
you want to change the status back to Potential Duplicate,Unverified.
"KRN",19,9163,25)
XDRDEDT
"KRN",19,9163,30)

"KRN",19,9163,31)

"KRN",19,9163,32)

"KRN",19,9163,50)

"KRN",19,9163,51)

"KRN",19,9163,"U")
EDIT THE STATUS FIELD OF A DUP
"KRN",19,9164,-1)
0^19
"KRN",19,9164,0)
XDR PURGE^Purge Duplicate Record File^^R^^^XDR PURGE^^^^^TOOLKIT
"KRN",19,9164,1,0)
^^4^4^2971117^^^^
"KRN",19,9164,1,1,0)
This option is used to purge entries in the
"KRN",19,9164,1,2,0)
Duplicate Record File, you may
"KRN",19,9164,1,3,0)
purge just the Potential Duplicates, or the Verified Non-Duplicates,
"KRN",19,9164,1,4,0)
or both.  This should only be used by the Site Manager.
"KRN",19,9164,25)
XDRDPRGE
"KRN",19,9164,"U")
PURGE DUPLICATE RECORD FILE
"KRN",19,9165,-1)
0^13
"KRN",19,9165,0)
XDR MERGE READY DUPLICATES^Schedule Process to Merge Verified Duplicates^^R^^^XDR MERGE VERIFIED DUPLICATES^^^^^TOOLKIT
"KRN",19,9165,1,0)
^^2^2^2971231^^^
"KRN",19,9165,1,1,0)
This option merges all entries which currently are ready to merge verified
"KRN",19,9165,1,2,0)
duplicate pairs that are not included in another merge process.
"KRN",19,9165,25)
QUE^XDRMERG0
"KRN",19,9165,"U")
SCHEDULE PROCESS TO MERGE VERI
"KRN",19,9169,-1)
0^1
"KRN",19,9169,0)
XDR ADD VERIFIED DUPS^Add Verified Duplicate Pair^^R^^^XDR ADD VERIFIED^^^^^TOOLKIT
"KRN",19,9169,1,0)
^^12^12^2970926^
"KRN",19,9169,1,1,0)
This option allow the user to add a pair of records that are not already
"KRN",19,9169,1,2,0)
identified as potential or verified duplicate to the Duplicate
"KRN",19,9169,1,3,0)
Record File.  The pair will go through comparisons (Duplicate Tests).  The
"KRN",19,9169,1,4,0)
comparison results in a computed value based on similarity of one
"KRN",19,9169,1,5,0)
record to the other.  The resulting value is measured against the
"KRN",19,9169,1,6,0)
Potential Duplicate Threshold Percentage.  When the record pair
"KRN",19,9169,1,7,0)
scores evaluate above this percentage, they are considered to be
"KRN",19,9169,1,8,0)
potential duplicates and are placed in the Duplicate Record File.
"KRN",19,9169,1,9,0)
 
"KRN",19,9169,1,10,0)
If the user has the XUMGR key, the user has the option to bypass the
"KRN",19,9169,1,11,0)
Potential Duplicate Threshold Percentage thereby adding the pair directly
"KRN",19,9169,1,12,0)
to the Duplicate Record File.
"KRN",19,9169,25)
XDRMADD
"KRN",19,9169,"U")
ADD VERIFIED DUPLICATE PAIR
"KRN",19,9170,-1)
0^26
"KRN",19,9170,0)
XDR UTILITIES MENU^Utilities^^M^^^^^^^y^TOOLKIT^^1^1
"KRN",19,9170,1,0)
^^1^1^2980408^^^^
"KRN",19,9170,1,1,0)
This menu gives access to various Duplicate Resolution Utilities.
"KRN",19,9170,10,0)
^19.01PI^12^12
"KRN",19,9170,10,1,0)
9160^CHCK^6
"KRN",19,9170,10,1,"^")
XDR CHECK PAIR
"KRN",19,9170,10,2,0)
9169^ADD^2
"KRN",19,9170,10,2,"^")
XDR ADD VERIFIED DUPS
"KRN",19,9170,10,3,0)
9163^EDIT^10
"KRN",19,9170,10,3,"^")
XDR EDIT DUP RECORD STATUS
"KRN",19,9170,10,5,0)
9162^VIEW^20
"KRN",19,9170,10,5,"^")
XDR VIEW DUPLICATE RECORD
"KRN",19,9170,10,6,0)
9157^PRNT^14
"KRN",19,9170,10,6,"^")
XDR PRINT LIST
"KRN",19,9170,10,7,0)
9174^FIND^12
"KRN",19,9170,10,7,"^")
XDR FIND POTENTIAL DUPLICATES
"KRN",19,9170,10,8,0)
9175^TSF^18
"KRN",19,9170,10,8,"^")
XDR TALLY STATUS FIELDS
"KRN",19,9170,10,9,0)
9173^DSS^8
"KRN",19,9170,10,9,"^")
XDR DISPLAY SEARCH STATUS
"KRN",19,9170,10,10,0)
10255^CMP^4
"KRN",19,9170,10,10,"^")
XDR CHECK MERGE PROCESS STATUS
"KRN",19,9170,10,11,0)
10252^SCAN^16
"KRN",19,9170,10,11,"^")
XDR SCAN POSSIBLE DUPLICATES
"KRN",19,9170,10,12,0)
10304^VAL^13
"KRN",19,9170,10,12,"^")
XDR VALID CHECK
"KRN",19,9170,15)
W:$D(IOF) @IOF W !,"Duplicate Resolution System Menu",!
"KRN",19,9170,20)
W:$D(IOF) @IOF W !,"Duplicate Resolution Utilities Menu",!
"KRN",19,9170,99)
57441,40564
"KRN",19,9170,"U")
UTILITIES
"KRN",19,9171,-1)
0^12
"KRN",19,9171,0)
XDR MANAGER UTILITIES^Manager Utilities^^M^^XDRMGR^^^^^^TOOLKIT^^1^1
"KRN",19,9171,1,0)
^^4^4^2971231^^^^
"KRN",19,9171,1,1,0)
This option controls access to various manager utilities.  These
"KRN",19,9171,1,2,0)
utilities include: Automatically merging ready to merge duplicates,
"KRN",19,9171,1,3,0)
Editing the Duplicate Resolution File, and Purging the Duplicate
"KRN",19,9171,1,4,0)
Record File.
"KRN",19,9171,10,0)
^19.01PI^10^10
"KRN",19,9171,10,2,0)
9161^EDT^2
"KRN",19,9171,10,2,"^")
XDR EDIT DUP RESOLUTION FILE
"KRN",19,9171,10,3,0)
9164^PRGE^8
"KRN",19,9171,10,3,"^")
XDR PURGE
"KRN",19,9171,10,4,0)
10251^SCN^6
"KRN",19,9171,10,4,"^")
XDR PRELIMINARY SCAN
"KRN",19,9171,10,5,0)
9165^SCH^14
"KRN",19,9171,10,5,"^")
XDR MERGE READY DUPLICATES
"KRN",19,9171,10,6,0)
10269^RES^12
"KRN",19,9171,10,6,"^")
XDR RESTART MERGE PROCESS
"KRN",19,9171,10,7,0)
10268^STOP^18
"KRN",19,9171,10,7,"^")
XDR STOP MERGE PROCESS
"KRN",19,9171,10,8,0)
9156^SRCH^16
"KRN",19,9171,10,8,"^")
XDR SEARCH ALL
"KRN",19,9171,10,9,0)
10270^LIST^4
"KRN",19,9171,10,9,"^")
XDR PRELIMINARY SCAN LIST
"KRN",19,9171,10,10,0)
10271^PRGM^10
"KRN",19,9171,10,10,"^")
XDR PURGE2
"KRN",19,9171,15)
W:$D(IOF) @IOF W !,"Duplicate Resolution System Menu",!
"KRN",19,9171,20)
W:$D(IOF) @IOF W !,"Duplicate Manager Utilities Menu",!
"KRN",19,9171,99)
57438,51851
"KRN",19,9171,"U")
MANAGER UTILITIES
"KRN",19,9172,-1)
0^11
"KRN",19,9172,0)
XDR MAIN MENU^Duplicate Resolution System^^M^^XDR^^^^^^TOOLKIT^^1^1
"KRN",19,9172,1,0)
^^1^1^2970806^^^^
"KRN",19,9172,1,1,0)
This is the main menu for the Duplicate Resolution System.
"KRN",19,9172,10,0)
^19.01PI^3^3
"KRN",19,9172,10,1,0)
9159^XDRO^1
"KRN",19,9172,10,1,"^")
XDR OPERATIONS MENU
"KRN",19,9172,10,2,0)
9170^XDRU^2
"KRN",19,9172,10,2,"^")
XDR UTILITIES MENU
"KRN",19,9172,10,3,0)
9171^XDRM^3
"KRN",19,9172,10,3,"^")
XDR MANAGER UTILITIES
"KRN",19,9172,15)
W:$D(IOF) @IOF K AUPNLK("ALL")
"KRN",19,9172,20)
W:$D(IOF) @IOF W !,"Duplicate Resolution System Menu",! S AUPNLK("ALL")=""
"KRN",19,9172,99)
57438,51851
"KRN",19,9172,99.1)
56649,64814
"KRN",19,9172,"U")
DUPLICATE RESOLUTION SYSTEM
"KRN",19,9173,-1)
0^7
"KRN",19,9173,0)
XDR DISPLAY SEARCH STATUS^Display Search Status^^R^^^^^^^^TOOLKIT
"KRN",19,9173,1,0)
^^9^9^2970725^^
"KRN",19,9173,1,1,0)
This option will display the status of a selected search for duplicates.
"KRN",19,9173,1,2,0)
 
"KRN",19,9173,1,3,0)
The status may be RUNNING, HALTED, ERROE(STOP) or
"KRN",19,9173,1,4,0)
COMPLETED.  If you are checking
"KRN",19,9173,1,5,0)
the status to make sure the Duplicate Checking software is running
"KRN",19,9173,1,6,0)
you must make sure that not only is the STATUS stated to be RUNNING
"KRN",19,9173,1,7,0)
but also that the COUNT (which is the number of records that have been
"KRN",19,9173,1,8,0)
checked for duplicates) is also steadily increasing.  If the COUNT is
"KRN",19,9173,1,9,0)
not increasing notify your site manager.
"KRN",19,9173,25)
XDRDSTAT
"KRN",19,9173,"U")
DISPLAY SEARCH STATUS
"KRN",19,9174,-1)
0^10
"KRN",19,9174,0)
XDR FIND POTENTIAL DUPLICATES^Find Potential Duplicates for an Entry in a File^^R^^^^^^^^TOOLKIT
"KRN",19,9174,1,0)
^^4^4^2971106^^^^
"KRN",19,9174,1,1,0)
This option will find all potential duplicates for an entry in a file.
"KRN",19,9174,1,2,0)
Any potential duplicate pairs are then added to the Duplicate Record File.
"KRN",19,9174,1,3,0)
This user is prompted to enter the File and then to select an entry
"KRN",19,9174,1,4,0)
within that file.
"KRN",19,9174,25)
XDRDFPD
"KRN",19,9174,"U")
FIND POTENTIAL DUPLICATES FOR 
"KRN",19,9175,-1)
0^25
"KRN",19,9175,0)
XDR TALLY STATUS FIELDS^Tally STATUS and MERGE STATUS Fields^^R^^^^^^^^TOOLKIT
"KRN",19,9175,1,0)
^^4^4^2971205^^^^
"KRN",19,9175,1,1,0)
 
"KRN",19,9175,1,2,0)
This is a summary report of how many records are verified duplicates or
"KRN",19,9175,1,3,0)
verified not duplicates or potential duplicates unverified.  The total
"KRN",19,9175,1,4,0)
number of records merged and ready to be merged will be displayed.
"KRN",19,9175,25)
XDRCNT
"KRN",19,9175,"U")
TALLY STATUS AND MERGE STATUS 
"KRN",19,10251,-1)
0^16
"KRN",19,10251,0)
XDR PRELIMINARY SCAN^Preliminary Scan of File for Errors^^R^^^^^^^^TOOLKIT
"KRN",19,10251,1,0)
^^3^3^2971231^^^
"KRN",19,10251,1,1,0)
Scan through a file selected for Duplicate Resolution to check for
"KRN",19,10251,1,2,0)
entries within the file which are missing identifiers (which are presumed
"KRN",19,10251,1,3,0)
to be significant data elements) or have other problems.
"KRN",19,10251,25)
XDRDPREL
"KRN",19,10251,"U")
PRELIMINARY SCAN OF FILE FOR E
"KRN",19,10252,-1)
0^22
"KRN",19,10252,0)
XDR SCAN POSSIBLE DUPLICATES^Scan Possible Duplicates^^R^^^^^^^^TOOLKIT
"KRN",19,10252,1,0)
^^5^5^2971122^^^
"KRN",19,10252,1,1,0)
This option provides a rapid scan of possible duplicates by listing
"KRN",19,10252,1,2,0)
the zero node of the patient file for each individual.
"KRN",19,10252,1,3,0)
 
"KRN",19,10252,1,4,0)
If the output is not queued to a printer, then the data will be sent
"KRN",19,10252,1,5,0)
to the FM Browser for examination.
"KRN",19,10252,25)
XDRDDATA
"KRN",19,10252,"U")
SCAN POSSIBLE DUPLICATES
"KRN",19,10255,-1)
0^5
"KRN",19,10255,0)
XDR CHECK MERGE PROCESS STATUS^Check Merge Process Status^^R^^^^^^^^TOOLKIT
"KRN",19,10255,1,0)
^^5^5^2971001^^^^
"KRN",19,10255,1,1,0)
This option indicates the status of a selected merge process (or all
"KRN",19,10255,1,2,0)
of them) displaying the information provided by the last checkpoint
"KRN",19,10255,1,3,0)
during its operation.  This information includes the file that is
"KRN",19,10255,1,4,0)
being processed, which stage it is in, and the last internal entry
"KRN",19,10255,1,5,0)
processed.
"KRN",19,10255,25)
CHECK^XDRMERG2
"KRN",19,10255,"U")
CHECK MERGE PROCESS STATUS
"KRN",19,10266,-1)
0^2
"KRN",19,10266,0)
XDR ANCILLARY REVIEW^Ancillary Data Review^^R^^^^^^^^TOOLKIT
"KRN",19,10266,1,0)
^^2^2^2970806^
"KRN",19,10266,1,1,0)
   This option is use by the ancillary services to verify potential
"KRN",19,10266,1,2,0)
duplicate.  This option is used when a user is not notified by an alert.
"KRN",19,10266,25)
XDRRMRG0
"KRN",19,10266,99.1)
57202,39798
"KRN",19,10266,"U")
ANCILLARY DATA REVIEW
"KRN",19,10267,-1)
0^3
"KRN",19,10267,0)
XDR APPROVE FOR MERGE^Approve verified duplicates for merging^^R^^^^^^^^TOOLKIT
"KRN",19,10267,1,0)
^^3^3^2970724^^
"KRN",19,10267,1,1,0)
This option is used by the coordinator or team responsible for duplicate
"KRN",19,10267,1,2,0)
resolution to give final approval for selected duplicate pairs to be
"KRN",19,10267,1,3,0)
included in the next merge process.
"KRN",19,10267,25)
APPROVE^XDRMERGA
"KRN",19,10267,"U")
APPROVE VERIFIED DUPLICATES FO
"KRN",19,10268,-1)
0^24
"KRN",19,10268,0)
XDR STOP MERGE PROCESS^STOP an Active Merge Process^^R^^^^^^^^TOOLKIT
"KRN",19,10268,1,0)
^^2^2^2970724^^
"KRN",19,10268,1,1,0)
This option is used to stop a currently running merge process and
"KRN",19,10268,1,2,0)
any associated threads.
"KRN",19,10268,25)
STOP^XDRMERGA
"KRN",19,10268,"U")
STOP AN ACTIVE MERGE PROCESS
"KRN",19,10269,-1)
0^21
"KRN",19,10269,0)
XDR RESTART MERGE PROCESS^Restart a Merge Process^^R^^^^^^^^TOOLKIT
"KRN",19,10269,1,0)
^^2^2^2970725^^
"KRN",19,10269,1,1,0)
This option is used to schedule the restart of a merge process at the
"KRN",19,10269,1,2,0)
current time, or at some point in the future.
"KRN",19,10269,25)
RESTART^XDRMERGA
"KRN",19,10269,"U")
RESTART A MERGE PROCESS
"KRN",19,10270,-1)
0^17
"KRN",19,10270,0)
XDR PRELIMINARY SCAN LIST^List File Entries Identified in Preliminary Scan^^R^^^^^^^^TOOLKIT
"KRN",19,10270,1,0)
^^3^3^2971231^^^^
"KRN",19,10270,1,1,0)
This option is used to generate a list of those entries in the file which
"KRN",19,10270,1,2,0)
were identified as lacking a zero node, having a bad SSN value, or missing
"KRN",19,10270,1,3,0)
one or more of the identifiers in the file.
"KRN",19,10270,25)
XDRDPRE1
"KRN",19,10270,"U")
LIST FILE ENTRIES IDENTIFIED I
"KRN",19,10271,-1)
0^20
"KRN",19,10271,0)
XDR PURGE2^Purge Merge Process File^^R^^^^^^^^TOOLKIT
"KRN",19,10271,1,0)
^^3^3^2971112^^^
"KRN",19,10271,1,1,0)
This option is used to purge selected entries
"KRN",19,10271,1,2,0)
in the Merge Process FIle.  This
"KRN",19,10271,1,3,0)
option should only be used by the Site Manager.
"KRN",19,10271,25)
XDRDPRG2
"KRN",19,10271,"U")
PURGE MERGE PROCESS FILE
"KRN",19,10304,-1)
0^30
"KRN",19,10304,0)
XDR VALID CHECK^Identify Potential Merge Problems^^R^^^^^^^^MERGE/DUPLICATE RESOLUTION
"KRN",19,10304,25)
EN^XDRDVAL1
"KRN",19,10304,"U")
IDENTIFY POTENTIAL MERGE PROBL
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",6,.401)
.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"ORD",6,.401,0)
SORT TEMPLATE
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",350,-1)
1^1
"PKG",350,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP
"PKG",350,22,0)
^9.49I^1^1
"PKG",350,22,1,0)
7.3^2950403^2960131
"PKG",350,22,1,"PAH",1,0)
23^2980430
"PKG",350,22,1,"PAH",1,1,0)
^^278^278^2980522
"PKG",350,22,1,"PAH",1,1,1,0)
Associated patches:    DI*21*41
"PKG",350,22,1,"PAH",1,1,2,0)
                       DI*21*42 
"PKG",350,22,1,"PAH",1,1,3,0)
                       PSJ*4.5*43
"PKG",350,22,1,"PAH",1,1,4,0)
                       DG*5.3*156
"PKG",350,22,1,"PAH",1,1,5,0)
                       IMR*2.1*2
"PKG",350,22,1,"PAH",1,1,6,0)
                       IB*2*94
"PKG",350,22,1,"PAH",1,1,7,0)
                       IB*2*97
"PKG",350,22,1,"PAH",1,1,8,0)
                       LR*5.2*205
"PKG",350,22,1,"PAH",1,1,9,0)
Associated package:    NDBI v 1.0
"PKG",350,22,1,"PAH",1,1,10,0)
 
"PKG",350,22,1,"PAH",1,1,11,0)
Subject:  XT*7.3*23 Duplicate Record Merge:  Patient Merge
"PKG",350,22,1,"PAH",1,1,12,0)
 
"PKG",350,22,1,"PAH",1,1,13,0)
Category:
"PKG",350,22,1,"PAH",1,1,14,0)
       - Enhancement (Mandatory)
"PKG",350,22,1,"PAH",1,1,15,0)
 
"PKG",350,22,1,"PAH",1,1,16,0)
Description:
"PKG",350,22,1,"PAH",1,1,17,0)
=========
"PKG",350,22,1,"PAH",1,1,18,0)
Patient Merge provides an automated method to eliminate duplicate patient
"PKG",350,22,1,"PAH",1,1,19,0)
records within the VISTA database.  It is an operational implementation of
"PKG",350,22,1,"PAH",1,1,20,0)
the Duplicate Resolution Utilities released to the field with Toolkit
"PKG",350,22,1,"PAH",1,1,21,0)
version 7.2.  The overall process consists of the search for potential
"PKG",350,22,1,"PAH",1,1,22,0)
duplicate record pairs, review and verification of those pairs, and the
"PKG",350,22,1,"PAH",1,1,23,0)
merge process.  The search and identification of potential duplicate
"PKG",350,22,1,"PAH",1,1,24,0)
records performs comparisons on key fields in the PATIENT file.  (This is
"PKG",350,22,1,"PAH",1,1,25,0)
a long process and can exceed 100 hours.)  When evaluated as a potential
"PKG",350,22,1,"PAH",1,1,26,0)
duplicate, the pair is entered into file 15 (Duplicate Record File) and is
"PKG",350,22,1,"PAH",1,1,27,0)
available for review and verification.  The review allows for two levels
"PKG",350,22,1,"PAH",1,1,28,0)
of review; a primary reviewer - focussing on patient demographics - and an
"PKG",350,22,1,"PAH",1,1,29,0)
ancillary reviewer - focussing on ancillary service data.  Once verified,
"PKG",350,22,1,"PAH",1,1,30,0)
the merge process can be initiated.  (This is a long process and can
"PKG",350,22,1,"PAH",1,1,31,0)
exceed 15 hours.)
"PKG",350,22,1,"PAH",1,1,32,0)
 
"PKG",350,22,1,"PAH",1,1,33,0)
Software and a complete set of documentation (Release Notes, Installation
"PKG",350,22,1,"PAH",1,1,34,0)
Guide, User Manual, and Technical Manual) may be obtained using FTP from
"PKG",350,22,1,"PAH",1,1,35,0)
the appropriate Customer Service directory:
"PKG",350,22,1,"PAH",1,1,36,0)
 
"PKG",350,22,1,"PAH",1,1,37,0)
       IRM FIELD OFFICE        FTP ADDRESS     DIRECTORY
"PKG",350,22,1,"PAH",1,1,38,0)
       =============================================================
"PKG",350,22,1,"PAH",1,1,39,0)
       ALBANY                  152.127.1.5     anonymous.software
"PKG",350,22,1,"PAH",1,1,40,0)
       HINES                   152.129.1.110   anonymous.software
"PKG",350,22,1,"PAH",1,1,41,0)
       SALT LAKE               152.131.2.1     anonymous.software
"PKG",350,22,1,"PAH",1,1,42,0)
 
"PKG",350,22,1,"PAH",1,1,43,0)
Release Notes file name:       xt_73_p23_rn.pdf
"PKG",350,22,1,"PAH",1,1,44,0)
Installation Guide file name:  xt_73_p23_ig.pdf
"PKG",350,22,1,"PAH",1,1,45,0)
User Manual file name:         xt_73_p23_um.pdf
"PKG",350,22,1,"PAH",1,1,46,0)
Technical Manual file name:    xt_73_p23_tm.pdf
"PKG",350,22,1,"PAH",1,1,47,0)
Software file name:    XT73_23.KID
"PKG",350,22,1,"PAH",1,1,48,0)
 
"PKG",350,22,1,"PAH",1,1,49,0)
File Information:
"PKG",350,22,1,"PAH",1,1,50,0)
============
"PKG",350,22,1,"PAH",1,1,51,0)
This patch contains three new files and changes to the existing files.
"PKG",350,22,1,"PAH",1,1,52,0)
 
"PKG",350,22,1,"PAH",1,1,53,0)
DUPLICATE RECORD       ^VA(15,
"PKG",350,22,1,"PAH",1,1,54,0)
This file contains information about duplicate records in any file defined
"PKG",350,22,1,"PAH",1,1,55,0)
in the two variable pointer fields; RECORD1 and RECORD2 (.01 and .02).
"PKG",350,22,1,"PAH",1,1,56,0)
The status of an entry in this file may be 'potential duplicate,
"PKG",350,22,1,"PAH",1,1,57,0)
unverified', 'verified, not a duplicate', or 'verified duplicate'.
"PKG",350,22,1,"PAH",1,1,58,0)
 
"PKG",350,22,1,"PAH",1,1,59,0)
DUPLICATE RESOLUTION   ^VA(15.1,
"PKG",350,22,1,"PAH",1,1,60,0)
This file is used to handle duplicate checking and merging of files that
"PKG",350,22,1,"PAH",1,1,61,0)
have entries in the Duplicate Record File.  It is meant to provide the
"PKG",350,22,1,"PAH",1,1,62,0)
overall control information that would be used to first identify
"PKG",350,22,1,"PAH",1,1,63,0)
duplicates within a file, e.g. Patient File, and then to merge the
"PKG",350,22,1,"PAH",1,1,64,0)
entries.
"PKG",350,22,1,"PAH",1,1,65,0)
 
"PKG",350,22,1,"PAH",1,1,66,0)
XDR MERGE PROCESS      ^VA(15.2,       New file.
"PKG",350,22,1,"PAH",1,1,67,0)
When a merge process is set up, all its information is stored in this
"PKG",350,22,1,"PAH",1,1,68,0)
file.  Once a merge process has completed, that entry may be purged using
"PKG",350,22,1,"PAH",1,1,69,0)
the Purge Merge Process File option in the managers menu.
"PKG",350,22,1,"PAH",1,1,70,0)
 
"PKG",350,22,1,"PAH",1,1,71,0)
XDR REPOINTED ENTRY    ^VA(15.3,       New file.
"PKG",350,22,1,"PAH",1,1,72,0)
This file is used to record the entry number of the FROM record that is
"PKG",350,22,1,"PAH",1,1,73,0)
merged into the TO record.  This can be used for FileMan to determine
"PKG",350,22,1,"PAH",1,1,74,0)
which entries were merged, so the IEN of the FROM record will not be
"PKG",350,22,1,"PAH",1,1,75,0)
reused.
"PKG",350,22,1,"PAH",1,1,76,0)
 
"PKG",350,22,1,"PAH",1,1,77,0)
MERGE IMAGES           ^XDRM           New file.
"PKG",350,22,1,"PAH",1,1,78,0)
File 15.4 stores an image of the pairs of entries in files that were
"PKG",350,22,1,"PAH",1,1,79,0)
merged immediately prior to the actual merge.  In addition, there is also
"PKG",350,22,1,"PAH",1,1,80,0)
a record of the locations of pointer values that were changed during the
"PKG",350,22,1,"PAH",1,1,81,0)
merge process.
"PKG",350,22,1,"PAH",1,1,82,0)
 
"PKG",350,22,1,"PAH",1,1,83,0)
Option Information:
"PKG",350,22,1,"PAH",1,1,84,0)
===============
"PKG",350,22,1,"PAH",1,1,85,0)
This patch contains 27 options:
"PKG",350,22,1,"PAH",1,1,86,0)
XDR ADD VERIFIED DUPS
"PKG",350,22,1,"PAH",1,1,87,0)
XDR ANCILLARY REVIEW
"PKG",350,22,1,"PAH",1,1,88,0)
XDR APPROVE FOR MERGE
"PKG",350,22,1,"PAH",1,1,89,0)
XDR CHECK MERGE PROCESS STATUS
"PKG",350,22,1,"PAH",1,1,90,0)
XDR CHECK PAIR
"PKG",350,22,1,"PAH",1,1,91,0)
XDR DISPLAY SEARCH STATUS
"PKG",350,22,1,"PAH",1,1,92,0)
XDR EDIT DUP RECORD STATUS
"PKG",350,22,1,"PAH",1,1,93,0)
XDR EDIT DUP RESOLUTION FILE
"PKG",350,22,1,"PAH",1,1,94,0)
XDR FIND POTENTIAL DUPLICATES
"PKG",350,22,1,"PAH",1,1,95,0)
XDR MAIN MENU  (Locked with XDR key)
"PKG",350,22,1,"PAH",1,1,96,0)
XDR MANAGER UTILITIES  (Locked with XDRMGR key)
"PKG",350,22,1,"PAH",1,1,97,0)
XDR MERGE READY DUPLICATES
"PKG",350,22,1,"PAH",1,1,98,0)
XDR OPERATIONS MENU
"PKG",350,22,1,"PAH",1,1,99,0)
XDR PRELIMINARY SCAN
"PKG",350,22,1,"PAH",1,1,100,0)
XDR PRELIMINARY SCAN LIST
"PKG",350,22,1,"PAH",1,1,101,0)
XDR PRINT LIST
"PKG",350,22,1,"PAH",1,1,102,0)
XDR PURGE
"PKG",350,22,1,"PAH",1,1,103,0)
XDR PURGE2
"PKG",350,22,1,"PAH",1,1,104,0)
XDR RESTART MERGE PROCESS
"PKG",350,22,1,"PAH",1,1,105,0)
XDR SCAN POSSIBLE DUPLICATES
"PKG",350,22,1,"PAH",1,1,106,0)
XDR SEARCH ALL
"PKG",350,22,1,"PAH",1,1,107,0)
XDR STOP MERGE PROCESS
"PKG",350,22,1,"PAH",1,1,108,0)
XDR TALLY STATUS FIELDS
"PKG",350,22,1,"PAH",1,1,109,0)
XDR UTILITIES MENU
"PKG",350,22,1,"PAH",1,1,110,0)
XDR VALID CHECK
"PKG",350,22,1,"PAH",1,1,111,0)
XDR VERIFY ALL
"PKG",350,22,1,"PAH",1,1,112,0)
XDR VIEW DUPLICATE RECORD
"PKG",350,22,1,"PAH",1,1,113,0)
 
"PKG",350,22,1,"PAH",1,1,114,0)
The menu option Duplicate Resolution System [XDR MAIN MENU] will appear as
"PKG",350,22,1,"PAH",1,1,115,0)
a sub-menu on the Application Utilities menu [XTMENU].
"PKG",350,22,1,"PAH",1,1,116,0)
The menu option Operations [XDR OPERATIONS MENU] will appear as a sub-menu
"PKG",350,22,1,"PAH",1,1,117,0)
on the [XDR MAIN MENU].
"PKG",350,22,1,"PAH",1,1,118,0)
The menu option Utilities [XDR UTILITIES MENU] will appear as a sub-menu
"PKG",350,22,1,"PAH",1,1,119,0)
on the [XDR MAIN MENU].
"PKG",350,22,1,"PAH",1,1,120,0)
The menu option Manager Utilities [XDR MANAGER UTILITIES] will appear as a
"PKG",350,22,1,"PAH",1,1,121,0)
sub-menu on the [XDR MAIN MENU].
"PKG",350,22,1,"PAH",1,1,122,0)
 
"PKG",350,22,1,"PAH",1,1,123,0)
Post-init information:
"PKG",350,22,1,"PAH",1,1,124,0)
================
"PKG",350,22,1,"PAH",1,1,125,0)
This patch does not contain a post-init routine.
"PKG",350,22,1,"PAH",1,1,126,0)
 
"PKG",350,22,1,"PAH",1,1,127,0)
NOIS Messages Covered:
"PKG",350,22,1,"PAH",1,1,128,0)
====================
"PKG",350,22,1,"PAH",1,1,129,0)
There are three NOIS calls, all with a Referred, Awaiting Patch status.
"PKG",350,22,1,"PAH",1,1,130,0)
These all have to do with sites wanting to merge patient records.  The
"PKG",350,22,1,"PAH",1,1,131,0)
release of this patch will serve to close these calls.  The NOIS calls
"PKG",350,22,1,"PAH",1,1,132,0)
are:
"PKG",350,22,1,"PAH",1,1,133,0)
       CAS-0797-12438, duplicate pts and pt demo missing
"PKG",350,22,1,"PAH",1,1,134,0)
       SPO-0298-51628, HOW TO MERGE DUPLICATE ENTRIES
"PKG",350,22,1,"PAH",1,1,135,0)
       NYN-0398-11634, Site needs help with Duplicate Resolution
"PKG",350,22,1,"PAH",1,1,136,0)
 
"PKG",350,22,1,"PAH",1,1,137,0)
Print Templates
"PKG",350,22,1,"PAH",1,1,138,0)
============
"PKG",350,22,1,"PAH",1,1,139,0)
XDR BRIEF LIST    FILE #15 
"PKG",350,22,1,"PAH",1,1,140,0)
XDR MERGED LIST    FILE #15
"PKG",350,22,1,"PAH",1,1,141,0)
 
"PKG",350,22,1,"PAH",1,1,142,0)
Sort Templates
"PKG",350,22,1,"PAH",1,1,143,0)
============
"PKG",350,22,1,"PAH",1,1,144,0)
XDR MERGED LIST    FILE #15
"PKG",350,22,1,"PAH",1,1,145,0)
XDR NOT READY TO MERGE LIST    FILE #15
"PKG",350,22,1,"PAH",1,1,146,0)
XDR POTENTIAL DUPLICATE LIST    FILE #15
"PKG",350,22,1,"PAH",1,1,147,0)
XDR READY TO MERGE LIST    FILE #15
"PKG",350,22,1,"PAH",1,1,148,0)
 
"PKG",350,22,1,"PAH",1,1,149,0)
Forms
"PKG",350,22,1,"PAH",1,1,150,0)
=====
"PKG",350,22,1,"PAH",1,1,151,0)
XDR RESFILE FORM    FILE #15.1
"PKG",350,22,1,"PAH",1,1,152,0)
 
"PKG",350,22,1,"PAH",1,1,153,0)
Routine Summary:
"PKG",350,22,1,"PAH",1,1,154,0)
===============
"PKG",350,22,1,"PAH",1,1,155,0)
 
"PKG",350,22,1,"PAH",1,1,156,0)
The following is a list of routines included in this patch.
"PKG",350,22,1,"PAH",1,1,157,0)
 
"PKG",350,22,1,"PAH",1,1,158,0)
The second line of each of these routines will look like:
"PKG",350,22,1,"PAH",1,1,159,0)
       <tab>;;7.3;;TOOLKIT;**[patch list]**; Apr 25, 1995
"PKG",350,22,1,"PAH",1,1,160,0)
 
"PKG",350,22,1,"PAH",1,1,161,0)
    CHECK^XTSUMBLD results
"PKG",350,22,1,"PAH",1,1,162,0)
Routine name   Before Patch    After Patch     Patch List
"PKG",350,22,1,"PAH",1,1,163,0)
===========    ==========      =========       ========
"PKG",350,22,1,"PAH",1,1,164,0)
XDR2NULL       N/A             213286          23
"PKG",350,22,1,"PAH",1,1,165,0)
XDRCNT         7651887         7742313         23
"PKG",350,22,1,"PAH",1,1,166,0)
XDRDADD        8133407         8530927         23
"PKG",350,22,1,"PAH",1,1,167,0)
XDRDCOMP       4431965         4873221         23
"PKG",350,22,1,"PAH",1,1,168,0)
XDRDDATA       N/A             893537          23
"PKG",350,22,1,"PAH",1,1,169,0)
XDRDEDT        N/A             9827533         23
"PKG",350,22,1,"PAH",1,1,170,0)
XDRDLIST       7786460         9241915         23
"PKG",350,22,1,"PAH",1,1,171,0)
XDRDMAIN       5700890         6747860         23
"PKG",350,22,1,"PAH",1,1,172,0)
XDRDPICK       N/A             17800586        23
"PKG",350,22,1,"PAH",1,1,173,0)
XDRDPRE1       N/A             5745643         23
"PKG",350,22,1,"PAH",1,1,174,0)
XDRDPREL       N/A             5988721         23
"PKG",350,22,1,"PAH",1,1,175,0)
XDRDPRG2       N/A             1096260         23
"PKG",350,22,1,"PAH",1,1,176,0)
XDRDPRGE       3959904         3975142         23
"PKG",350,22,1,"PAH",1,1,177,0)
XDRDQUE        9275556         9693871         23
"PKG",350,22,1,"PAH",1,1,178,0)
XDRDSHOW       N/A             7608889         23
"PKG",350,22,1,"PAH",1,1,179,0)
XDRDSTAT       2676366         5551016         23
"PKG",350,22,1,"PAH",1,1,180,0)
XDRDUP         3547600         4515332         23
"PKG",350,22,1,"PAH",1,1,181,0)
XDRDVAL        N/A             8556766         23
"PKG",350,22,1,"PAH",1,1,182,0)
XDRDVAL1       N/A             12083072        23
"PKG",350,22,1,"PAH",1,1,183,0)
XDRDVAL2       N/A             12453467        23
"PKG",350,22,1,"PAH",1,1,184,0)
XDREMSG        4302480         4339222         23
"PKG",350,22,1,"PAH",1,1,185,0)
XDRMADD        6382715         12378004        23
"PKG",350,22,1,"PAH",1,1,186,0)
XDRMAIN        7563507         8572792         23
"PKG",350,22,1,"PAH",1,1,187,0)
XDRMAINI       14611797        15245931        23
"PKG",350,22,1,"PAH",1,1,188,0)
XDRMERG        N/A             11028391        23
"PKG",350,22,1,"PAH",1,1,189,0)
XDRMERG0       N/A             11419853        23
"PKG",350,22,1,"PAH",1,1,190,0)
XDRMERG1       N/A             5837142         23
"PKG",350,22,1,"PAH",1,1,191,0)
XDRMERG2       N/A             15382760        23
"PKG",350,22,1,"PAH",1,1,192,0)
XDRMERGA       N/A             17080288        23
"PKG",350,22,1,"PAH",1,1,193,0)
XDRMERGB       N/A             16160853        23
"PKG",350,22,1,"PAH",1,1,194,0)
XDRMVFY        1318075         1157832         23
"PKG",350,22,1,"PAH",1,1,195,0)
XDRPREL1       N/A             766751          23
"PKG",350,22,1,"PAH",1,1,196,0)
XDRPTCAN       N/A             7251504         23
"PKG",350,22,1,"PAH",1,1,197,0)
XDRPTCLN       N/A             1819429         23
"PKG",350,22,1,"PAH",1,1,198,0)
XDRPTDOB       N/A             1857839         23
"PKG",350,22,1,"PAH",1,1,199,0)
XDRPTDOD       N/A             498220          23
"PKG",350,22,1,"PAH",1,1,200,0)
XDRPTLSD       N/A             803980          23
"PKG",350,22,1,"PAH",1,1,201,0)
XDRPTMMN       N/A             1478218         23
"PKG",350,22,1,"PAH",1,1,202,0)
XDRPTN         N/A             6440837         23
"PKG",350,22,1,"PAH",1,1,203,0)
XDRPTSSN       N/A             3615316         23
"PKG",350,22,1,"PAH",1,1,204,0)
XDRPTSX        N/A             573526          23
"PKG",350,22,1,"PAH",1,1,205,0)
XDRRMRG0       N/A             4444660         23
"PKG",350,22,1,"PAH",1,1,206,0)
XDRRMRG1       N/A             19616376        23
"PKG",350,22,1,"PAH",1,1,207,0)
XDRRMRG2       N/A             5315420         23
"PKG",350,22,1,"PAH",1,1,208,0)
XDRUTL         N/A             927605          23
"PKG",350,22,1,"PAH",1,1,209,0)
XDRVCHEK       N/A             4108217         23
"PKG",350,22,1,"PAH",1,1,210,0)
 
"PKG",350,22,1,"PAH",1,1,211,0)
 
"PKG",350,22,1,"PAH",1,1,212,0)
Installation Instructions:
"PKG",350,22,1,"PAH",1,1,213,0)
==================
"PKG",350,22,1,"PAH",1,1,214,0)
1.  Recommend the patch installer review the Installation Guide
"PKG",350,22,1,"PAH",1,1,215,0)
documentation for detailed installation and implementation information.
"PKG",350,22,1,"PAH",1,1,216,0)
 
"PKG",350,22,1,"PAH",1,1,217,0)
2.  This patch can be loaded with users on the system.  Installation will
"PKG",350,22,1,"PAH",1,1,218,0)
take less than 1 minute.
"PKG",350,22,1,"PAH",1,1,219,0)
 
"PKG",350,22,1,"PAH",1,1,220,0)
3.  Review your mapped set.  If any of the routines listed in the ROUTINE
"PKG",350,22,1,"PAH",1,1,221,0)
SUMMARY section are mapped, they should be removed from the mapped set at
"PKG",350,22,1,"PAH",1,1,222,0)
this time.
"PKG",350,22,1,"PAH",1,1,223,0)
 
"PKG",350,22,1,"PAH",1,1,224,0)
4.  Impacts of files:
"PKG",350,22,1,"PAH",1,1,225,0)
       a.  The size of File 15 is dependent upon the number of potential
"PKG",350,22,1,"PAH",1,1,226,0)
duplicates found and is thus also dependent upon the size of the Patient
"PKG",350,22,1,"PAH",1,1,227,0)
File.  It may be purged using the application options, however note that
"PKG",350,22,1,"PAH",1,1,228,0)
information regarding those pairs already merged will not be purged.
"PKG",350,22,1,"PAH",1,1,229,0)
 
"PKG",350,22,1,"PAH",1,1,230,0)
       b.  The size of File 15.1 is minimal.  This file contains the
"PKG",350,22,1,"PAH",1,1,231,0)
working components of Duplicate Resolution as they pertain to a primary
"PKG",350,22,1,"PAH",1,1,232,0)
file.  It will expand as additional primary files are added.
"PKG",350,22,1,"PAH",1,1,233,0)
 
"PKG",350,22,1,"PAH",1,1,234,0)
       c.  The size of File 15.2 is minimal.  It may be purged using the
"PKG",350,22,1,"PAH",1,1,235,0)
application options.
"PKG",350,22,1,"PAH",1,1,236,0)
 
"PKG",350,22,1,"PAH",1,1,237,0)
       d.  The size of File 15.3 is minimal.  The number of entries is
"PKG",350,22,1,"PAH",1,1,238,0)
dependent upon the number of record pairs merged.
"PKG",350,22,1,"PAH",1,1,239,0)
 
"PKG",350,22,1,"PAH",1,1,240,0)
       e.  The size of File 15.4 is dependent upon the number of record
"PKG",350,22,1,"PAH",1,1,241,0)
pairs merged and their associated data.  Note that not all associated data
"PKG",350,22,1,"PAH",1,1,242,0)
is retained, but rather pointer values.  This is an independent global
"PKG",350,22,1,"PAH",1,1,243,0)
with the intent that it can be saved off to a static environment for
"PKG",350,22,1,"PAH",1,1,244,0)
archive purposes.
"PKG",350,22,1,"PAH",1,1,245,0)
 
"PKG",350,22,1,"PAH",1,1,246,0)
5.  This patch contains 46 routines.  The following routines are necessary
"PKG",350,22,1,"PAH",1,1,247,0)
for the operation of Patient Merge, but are not included with this patch
"PKG",350,22,1,"PAH",1,1,248,0)
as they were previously released as part of Toolkit:
"PKG",350,22,1,"PAH",1,1,249,0)
       XDRDADJ                 XDRDFPD         XDRDPDTI        XDRDSCOR
"PKG",350,22,1,"PAH",1,1,250,0)
       XDRMPACK                XDRMRG          XDRMRG1         XDRMSG
"PKG",350,22,1,"PAH",1,1,251,0)
       XDRU1
"PKG",350,22,1,"PAH",1,1,252,0)
 
"PKG",350,22,1,"PAH",1,1,253,0)
6.  From the Kernel Installation and Distribution System Menu, select the
"PKG",350,22,1,"PAH",1,1,254,0)
Installation menu.
"PKG",350,22,1,"PAH",1,1,255,0)
 
"PKG",350,22,1,"PAH",1,1,256,0)
7.  From this menu, you may elect to use the following options (when
"PKG",350,22,1,"PAH",1,1,257,0)
prompted for the INSTALL NAME, enter XT*7.3*23):
"PKG",350,22,1,"PAH",1,1,258,0)
 
"PKG",350,22,1,"PAH",1,1,259,0)
       a.  Backup a Transport Global - this option will create a backup
"PKG",350,22,1,"PAH",1,1,260,0)
message of any routines exported with the patch.  It will NOT backup any
"PKG",350,22,1,"PAH",1,1,261,0)
of the other changes.
"PKG",350,22,1,"PAH",1,1,262,0)
 
"PKG",350,22,1,"PAH",1,1,263,0)
       b.  Compare Transport Global to Current System - this option will
"PKG",350,22,1,"PAH",1,1,264,0)
allow you to view all changes that will be made when the patch is
"PKG",350,22,1,"PAH",1,1,265,0)
installed.  It compares all components of the patch (routines and
"PKG",350,22,1,"PAH",1,1,266,0)
options).
"PKG",350,22,1,"PAH",1,1,267,0)
 
"PKG",350,22,1,"PAH",1,1,268,0)
       c.  Verify Checksums in Transport Global - this option will allow
"PKG",350,22,1,"PAH",1,1,269,0)
you to ensure the integrity of the routines that are in the transport
"PKG",350,22,1,"PAH",1,1,270,0)
global.
"PKG",350,22,1,"PAH",1,1,271,0)
 
"PKG",350,22,1,"PAH",1,1,272,0)
8.  Use the Install Package(s) option and select the package XT*7.3*23.
"PKG",350,22,1,"PAH",1,1,273,0)
 
"PKG",350,22,1,"PAH",1,1,274,0)
9.  When prompted "Want to DISABLE Scheduled Options, Menu Options, and
"PKG",350,22,1,"PAH",1,1,275,0)
Protocols? YES//" respond "NO".
"PKG",350,22,1,"PAH",1,1,276,0)
 
"PKG",350,22,1,"PAH",1,1,277,0)
10.  If any routines were unmapped as a part of step 3, they should be
"PKG",350,22,1,"PAH",1,1,278,0)
returned to the mapped set once the installation has run to completion.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
46
"RTN","XDR2NULL")
0^2^B288977
"RTN","XDR2NULL",1,0)
XDR2NULL ;SF-IRMFO,SEA/JLI - IDENTIFY ENTRIES WITH NULL SSN ;
"RTN","XDR2NULL",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDR2NULL",3,0)
 ;;
"RTN","XDR2NULL",4,0)
 ;;
"RTN","XDR2NULL",5,0)
EN ;
"RTN","XDR2NULL",6,0)
 K ^TMP("XDR2NULL",$J)
"RTN","XDR2NULL",7,0)
 F I=0:0 S I=$O(^DPT(I)) Q:I'>0  S X=$G(^(I,0)) D
"RTN","XDR2NULL",8,0)
 . I X="" S ^TMP("XDR2NULL",$J,0,"BAD NODE",I)=""
"RTN","XDR2NULL",9,0)
 . I $P(X,U,9)="" S ^TMP("XDR2NULL",$J,I)=""
"RTN","XDR2NULL",10,0)
 Q
"RTN","XDRCNT")
0^3^B18892090
"RTN","XDRCNT",1,0)
XDRCNT ;SF-IRMFO/OHPRD/LAB - Count/Tally records by status/merged status;   [ 08/13/92  09:50 AM ] ;11/10/93  13:28 [5/2/96 11:50am]
"RTN","XDRCNT",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRCNT",3,0)
 ;;
"RTN","XDRCNT",4,0)
START ;
"RTN","XDRCNT",5,0)
 D EN^XDRVCHEK
"RTN","XDRCNT",6,0)
 D INFORM
"RTN","XDRCNT",7,0)
 D INIT
"RTN","XDRCNT",8,0)
 D GETFILE
"RTN","XDRCNT",9,0)
 G:XDRQFLG EOJ
"RTN","XDRCNT",10,0)
 D ZIS
"RTN","XDRCNT",11,0)
 G:XDRQFLG EOJ
"RTN","XDRCNT",12,0)
 D PROCESS
"RTN","XDRCNT",13,0)
 D EOJ
"RTN","XDRCNT",14,0)
 Q
"RTN","XDRCNT",15,0)
EOJ ;Eoj cleanup
"RTN","XDRCNT",16,0)
 K XDRQFLG,XDRD,XDRFL,XDRCNT
"RTN","XDRCNT",17,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XDRCNT",18,0)
 K ZTSK,POP,I,S
"RTN","XDRCNT",19,0)
 W:$D(IOF) @IOF
"RTN","XDRCNT",20,0)
 D ^%ZISC
"RTN","XDRCNT",21,0)
 Q
"RTN","XDRCNT",22,0)
INIT ;initialize variables
"RTN","XDRCNT",23,0)
 S XDRQFLG=0,XDRCNT("PG")=0
"RTN","XDRCNT",24,0)
 S X=$G(^DD(15,.03,0)) I X="" W !!,$C(7),"Dictionary error!!  Notify a programmer!" S XDRQFLG=1 Q
"RTN","XDRCNT",25,0)
 S X=$P(X,U,3)
"RTN","XDRCNT",26,0)
 F I=1:1 S S=$P(X,";",I) Q:S=""  S XDRCNT("STATUS",$P(S,":",1),"CNT")=0,XDRCNT("STATUS",$P(S,":",1),"NAME")=$P(S,":",2)
"RTN","XDRCNT",27,0)
 I '$D(XDRCNT("STATUS")) S XDRQFLG=1 W !!,"Dictionary error!!  Notify a programmer!" Q
"RTN","XDRCNT",28,0)
 S X=$G(^DD(15,.05,0)) I X="" W !!,$C(7),"Dictionary error!!  Notify a programmer!" S XDRQFLG=1 Q
"RTN","XDRCNT",29,0)
 S X=$P(X,U,3)
"RTN","XDRCNT",30,0)
 F I=1:1 S S=$P(X,";",I) Q:S=""  S XDRCNT("MERGE STATUS",$P(S,":",1),"CNT")=0,XDRCNT("MERGE STATUS",$P(S,":",1),"NAME")=$P(S,":",2)
"RTN","XDRCNT",31,0)
 I '$D(XDRCNT("MERGE STATUS")) S XDRQFLG=1 W !!,"Dictionary error!!  Notify a programmer!" Q
"RTN","XDRCNT",32,0)
 S XDRCNT("TOTAL RECS")=0
"RTN","XDRCNT",33,0)
 Q
"RTN","XDRCNT",34,0)
 ;
"RTN","XDRCNT",35,0)
GETFILE ;get file to tally records fo
"RTN","XDRCNT",36,0)
 K XDRFL
"RTN","XDRCNT",37,0)
 S DIC("A")="Tally duplicate entries for which file? " D FILE^XDRDQUE
"RTN","XDRCNT",38,0)
 Q:XDRQFLG
"RTN","XDRCNT",39,0)
 S XDRCNT("GBL")=^DIC(XDRFL,0,"GL"),XDRCNT("GBL")=$P(XDRCNT("GBL"),U,2)
"RTN","XDRCNT",40,0)
 Q
"RTN","XDRCNT",41,0)
ZIS W !! K ZTSK,ZTQUEUED,IOP S %ZIS="PQM" D ^%ZIS
"RTN","XDRCNT",42,0)
 I POP S XDRQFLG=1 Q
"RTN","XDRCNT",43,0)
 I $D(IO("Q")) D TSKMN
"RTN","XDRCNT",44,0)
 Q
"RTN","XDRCNT",45,0)
TSKMN ;
"RTN","XDRCNT",46,0)
 S ZTIO=$S($D(ION):ION,1:IO) I $D(IOST)#2,IOST]"" S ZTIO=ZTIO_";"_IOST
"RTN","XDRCNT",47,0)
 I $D(IO("DOC")),IO("DOC")]"" S ZTIO=ZTIO_";"_IO("DOC")
"RTN","XDRCNT",48,0)
 I $D(IOM)#2,IOM S ZTIO=ZTIO_";"_IOM I $D(IOSL)#2,IOSL S ZTIO=ZTIO_";"_IOSL
"RTN","XDRCNT",49,0)
 K ZTSAVE S ZTSAVE("*")=""
"RTN","XDRCNT",50,0)
 S ZTRTN="PROCESS^XDRCNT",ZTDTH="",ZTDESC="TALLY DUPLICATE RECORD STATUS" D ^%ZTLOAD S XDRQFLG=1
"RTN","XDRCNT",51,0)
 Q
"RTN","XDRCNT",52,0)
PROCESS ;
"RTN","XDRCNT",53,0)
 NEW X,D,S
"RTN","XDRCNT",54,0)
 ;S X=0_";"_XDRCNT("GBL") F  S X=$O(^VA(15,"B",X)) Q:X=""!($P(X,";",2)'=XDRCNT("GBL"))  D
"RTN","XDRCNT",55,0)
 S X=0_";"_XDRCNT("GBL") F  S X=$O(^VA(15,"B",X)) Q:X=""  I $P(X,";",2)=XDRCNT("GBL") D
"RTN","XDRCNT",56,0)
 . S D=0 F  S D=$O(^VA(15,"B",X,D)) Q:D'=+D   D
"RTN","XDRCNT",57,0)
 . . Q:^VA(15,"B",X,D)=1
"RTN","XDRCNT",58,0)
 . . S XDRCNT("TOTAL RECS")=XDRCNT("TOTAL RECS")+1
"RTN","XDRCNT",59,0)
 . . S S=$P(^VA(15,D,0),U,3)
"RTN","XDRCNT",60,0)
 . . I S=""
"RTN","XDRCNT",61,0)
 . . E  S XDRCNT("STATUS",S,"CNT")=$G(XDRCNT("STATUS",S,"CNT"))+1
"RTN","XDRCNT",62,0)
 . . I S="V" D
"RTN","XDRCNT",63,0)
 . . . S S=+$P(^VA(15,D,0),U,5)
"RTN","XDRCNT",64,0)
 . . . S XDRCNT("MERGE STATUS",S,"CNT")=XDRCNT("MERGE STATUS",S,"CNT")+1
"RTN","XDRCNT",65,0)
 . . Q
"RTN","XDRCNT",66,0)
 .Q
"RTN","XDRCNT",67,0)
PRINT ;print report
"RTN","XDRCNT",68,0)
 U IO
"RTN","XDRCNT",69,0)
 D HEADER
"RTN","XDRCNT",70,0)
 W !!,"Total Number of Duplicate Records for File ",$E(XDRD(0,0),1,18),":  ",?65,$J(XDRCNT("TOTAL RECS"),6),!
"RTN","XDRCNT",71,0)
 W !?5,"STATUS field:" S X=0 F  S X=$O(XDRCNT("STATUS",X)) Q:X=""  D
"RTN","XDRCNT",72,0)
 .I $Y>(IOSL-5) D HEADER Q:$D(XDRCNT("QUIT"))  W !
"RTN","XDRCNT",73,0)
 .W ?26,$E(XDRCNT("STATUS",X,"NAME"),1,34),?65,$J(XDRCNT("STATUS",X,"CNT"),6),!
"RTN","XDRCNT",74,0)
 W !?5,"MERGE STATUS field:" S X="" F  S X=$O(XDRCNT("MERGE STATUS",X)) Q:X=""  D
"RTN","XDRCNT",75,0)
 .I $Y>(IOSL-5) D HEADER Q:$D(XDRCNT("QUIT"))  W !
"RTN","XDRCNT",76,0)
 .W ?26,$E(XDRCNT("MERGE STATUS",X,"NAME"),1,34),?65,$J(XDRCNT("MERGE STATUS",X,"CNT"),6),!
"RTN","XDRCNT",77,0)
 .Q
"RTN","XDRCNT",78,0)
 I $E(IOST)="C" W !!,"End of Report.  Press return to exit" R X:DTIME
"RTN","XDRCNT",79,0)
 Q
"RTN","XDRCNT",80,0)
HEADER ;print header information
"RTN","XDRCNT",81,0)
 N DIR,X,Y
"RTN","XDRCNT",82,0)
 I 'XDRCNT("PG") G HEADER1
"RTN","XDRCNT",83,0)
 I $E(IOST)="C",IO=IO(0) W ! S DIR(0)="EO" D ^DIR K DIR I Y=0!(Y="^")!($D(DTOUT)) S XDRCNT("QUIT")="" Q
"RTN","XDRCNT",84,0)
HEADER1 ;
"RTN","XDRCNT",85,0)
 W:$D(IOF) @IOF S XDRCNT("PG")=XDRCNT("PG")+1
"RTN","XDRCNT",86,0)
 W !?3,$P(^DIC(4,DUZ(2),0),U) S Y=DT D DD^%DT W ?50,Y,?70,"Page ",XDRCNT("PG"),?78,!
"RTN","XDRCNT",87,0)
 W !?12,"TALLY OF DUPLICATE RECORDS' STATUS/MERGE STATUS FIELDS"
"RTN","XDRCNT",88,0)
 S XDRCNT("LENG")=7+$L(XDRD(0,0))
"RTN","XDRCNT",89,0)
 W !?((80-XDRCNT("LENG"))/2),"FILE:  ",XDRD(0,0),?78,!
"RTN","XDRCNT",90,0)
 W !,$TR($J("",80)," ","-")
"RTN","XDRCNT",91,0)
 Q
"RTN","XDRCNT",92,0)
INFORM ;inform user
"RTN","XDRCNT",93,0)
 W !!,"This report will tally the Status and Merge Status fields for all",!,"entries in the Duplicate record file for the file that you select.",!
"RTN","XDRCNT",94,0)
 Q
"RTN","XDRDADD")
0^4^B14713626
"RTN","XDRDADD",1,0)
XDRDADD ;SF-IRMFO/IHS/OHPRD/JCM - ADDS RECORDS TO DUPLICATE RECORD FILE ;2/20/97  10:41
"RTN","XDRDADD",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDADD",3,0)
 ;;
"RTN","XDRDADD",4,0)
START ;
"RTN","XDRDADD",5,0)
 D INIT ; Sets up the duplicate percentile score and FR and TO DFN's
"RTN","XDRDADD",6,0)
 I '$D(XDRDPDA) D ADD I 1 ; Adds entrys during background search
"RTN","XDRDADD",7,0)
 E  D EDIT
"RTN","XDRDADD",8,0)
END D EOJ ; Cleans up variables
"RTN","XDRDADD",9,0)
 Q  ;End of routine
"RTN","XDRDADD",10,0)
 ;
"RTN","XDRDADD",11,0)
INIT ;
"RTN","XDRDADD",12,0)
 S XDRDADD("DUPSCORE%")=XDRD("DUPSCORE")/XDRDSCOR("MAX")
"RTN","XDRDADD",13,0)
 S XDRDADD("DUPSCORE%")=$J(XDRDADD("DUPSCORE%"),1,2)
"RTN","XDRDADD",14,0)
 S XDRDADD("DUPSCORE%")=$S(XDRDADD("DUPSCORE%")<0:0,XDRDADD("DUPSCORE%")<1:$E(XDRDADD("DUPSCORE%"),3,4),1:100)
"RTN","XDRDADD",15,0)
 S XDRDADD("FR")=$S(XDRCD<XDRCD2:XDRCD,1:XDRCD2)
"RTN","XDRDADD",16,0)
 S XDRDADD("TO")=$S(XDRDADD("FR")=XDRCD:XDRCD2,1:XDRCD)
"RTN","XDRDADD",17,0)
 I $D(XDRDSCOR("VDT")) S XDRDADD("STATUS")=$S(XDRD("DUPSCORE")'<XDRDSCOR("VDT"):"V",1:"P")
"RTN","XDRDADD",18,0)
 E  S XDRDADD("STATUS")="P"
"RTN","XDRDADD",19,0)
 Q
"RTN","XDRDADD",20,0)
 ;
"RTN","XDRDADD",21,0)
ADD ;
"RTN","XDRDADD",22,0)
 ;ADD TO DUPLICATE RECORD FILE
"RTN","XDRDADD",23,0)
 S DIC="^VA(15,",DIC(0)="L",X=XDRDADD("FR")_";"_$P(XDRGL,U,2),DLAYGO=15
"RTN","XDRDADD",24,0)
 S XDRDADDX=XDRDADD("TO")_";"_$P(XDRGL,U,2)
"RTN","XDRDADD",25,0)
 S DIC("DR")=".02////^S X=XDRDADDX"_";.03////"_XDRDADD("STATUS")
"RTN","XDRDADD",26,0)
 S:XDRDADD("STATUS")="V" DIC("DR")=DIC("DR")_";.04////2"
"RTN","XDRDADD",27,0)
 S DIC("DR")=DIC("DR")_";.06////"_DT
"RTN","XDRDADD",28,0)
 S DIC("DR")=DIC("DR")_";.15////"_XDRDSCOR("MAX")_";.17////"_XDRDSCOR("PDT%")_";.18////"_XDRD("DUPSCORE")_";.19////"_XDRDADD("DUPSCORE%")
"RTN","XDRDADD",29,0)
 S:$D(XDRDSCOR("VDT%")) DIC("DR")=DIC("DR")_";.16////"_XDRDSCOR("VDT%")
"RTN","XDRDADD",30,0)
 D
"RTN","XDRDADD",31,0)
 . N I,X1,X2,X3
"RTN","XDRDADD",32,0)
 . S X1=X_U_XDRDADDX,X2=XDRDADDX_U_X
"RTN","XDRDADD",33,0)
 . F I=0:0 S I=$O(^VA(15,"B",X,I)) Q:I'>0  S X3=$P($G(^VA(15,I,0)),U,1,2) I X3=X1!(X3=X2) K X Q
"RTN","XDRDADD",34,0)
 S Y=-1 I $D(X) D FILE^DICN
"RTN","XDRDADD",35,0)
 K DIC,DR,X,DLAYGO
"RTN","XDRDADD",36,0)
 Q:Y'>0  S DIE="^VA(15,",(XDRDPDA,DA)=+Y
"RTN","XDRDADD",37,0)
 F XDRDORD=0:0 S XDRDORD=$O(XDRDTEST(XDRDORD)) Q:'XDRDORD  S DR="2101///"_$P(XDRDTEST(XDRDORD),U),DR(2,15.02101)=".02////"_XDRDUP("TEST SCORE",XDRDORD) D ^DIE K DR
"RTN","XDRDADD",38,0)
 ;I XDRDADD("STATUS")="V" D MERGE ; MODIFIED 1/12/96 JLI TO PREVENT AUTO MERGE
"RTN","XDRDADD",39,0)
 D
"RTN","XDRDADD",40,0)
 . N DA,DIE,DR
"RTN","XDRDADD",41,0)
 . S DA=XDRFL,DIE="^VA(15.1,"
"RTN","XDRDADD",42,0)
 . S DR=".12///"_($P(^VA(15.1,XDRFL,0),U,12)+1)
"RTN","XDRDADD",43,0)
 . D ^DIE
"RTN","XDRDADD",44,0)
ADDX K DIE,DR,DA,XDRDORD,XDRDADDX,XDRDPDA
"RTN","XDRDADD",45,0)
 Q
"RTN","XDRDADD",46,0)
MERGE Q
"RTN","XDRDADD",47,0)
 S XDRMPAIR=XDRDADD("FR")_"^"_XDRDADD("TO"),XDRM("AUTO")=""
"RTN","XDRDADD",48,0)
 S XDRMPDA=XDRDPDA
"RTN","XDRDADD",49,0)
 D EN^XDRMAIN
"RTN","XDRDADD",50,0)
MERGEX K XDRM,XDRMPAIR
"RTN","XDRDADD",51,0)
 Q
"RTN","XDRDADD",52,0)
EDIT ;
"RTN","XDRDADD",53,0)
 NEW D,D0,DA,DB,DC,DE,DG,DH,DI,DIC,DICR,DIE,DIEL,DIFLD,DIG,DIH,DIK,DINAME,DIP,DIU,DIV,DIW,DK,DL,DM,DOV,DP,DQ,DR,DSC,DU,DV,DW,DXS,X,Y
"RTN","XDRDADD",54,0)
 S DIE="^VA(15,",DA=XDRDPDA
"RTN","XDRDADD",55,0)
 S DR=".15////"_XDRDSCOR("MAX")_";.17////"_XDRDSCOR("PDT%")_";.18////"_XDRD("DUPSCORE")_";.19////"_XDRDADD("DUPSCORE%") I $D(XDRDSCOR("VDT%")) S:$D(XDRDSCOR("VDT%")) DR=DR_";.16////"_XDRDSCOR("VDT%")
"RTN","XDRDADD",56,0)
 D ^DIE K DIE,DA,DR
"RTN","XDRDADD",57,0)
 F XDRDORD=0:0 S XDRDORD=$O(^VA(15,XDRDPDA,21,0)) Q:'XDRDORD  S DA=XDRDORD,DA(1)=XDRDPDA,DIK="^VA(15,"_DA(1)_",21," S XDRDRTN="^DIK" D IDO K DA,DIK
"RTN","XDRDADD",58,0)
 K XDRDORD
"RTN","XDRDADD",59,0)
 F XDRDORD=0:0 S XDRDORD=$O(XDRDTEST(XDRDORD)) Q:'XDRDORD  S DR="2101///"_$P(XDRDTEST(XDRDORD),U),DR(2,15.02101)=".02////"_$P(XDRDTEST(XDRDORD),U,7),DIE="^VA(15,",DA=XDRDPDA,XDRDRTN="^DIE" D IDO K DIE,DA,DR
"RTN","XDRDADD",60,0)
 K XDRDORD
"RTN","XDRDADD",61,0)
 Q
"RTN","XDRDADD",62,0)
IDO NEW D,D0,DB,DC,DE,DG,DH,DI,DIC,DICR,DIEL,DIFLD,DIG,DIH,DINAME,DIP,DIU,DIV,DIW,DK,DL,DM,DOV,DP,DQ,DSC,DU,DV,DW,DXS,X,Y
"RTN","XDRDADD",63,0)
 D @XDRDRTN K XDRDRTN
"RTN","XDRDADD",64,0)
 Q
"RTN","XDRDADD",65,0)
EOJ ;
"RTN","XDRDADD",66,0)
 K XDRDADD,X,Y
"RTN","XDRDADD",67,0)
 Q
"RTN","XDRDCOMP")
0^6^B11858573
"RTN","XDRDCOMP",1,0)
XDRDCOMP ;SF-IRMFO/IHS/OHPRD/JCM - COMPARE TWO PATIENTS VIA DUP CHECKER ;12/1/97  16:34
"RTN","XDRDCOMP",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDCOMP",3,0)
 ;;
"RTN","XDRDCOMP",4,0)
 ; This routine will compare two records (patients), and will result with
"RTN","XDRDCOMP",5,0)
 ; a score (0 - 100%) as to how they match up.  You can not compare the
"RTN","XDRDCOMP",6,0)
 ; same record.
"RTN","XDRDCOMP",7,0)
 ;
"RTN","XDRDCOMP",8,0)
START ;
"RTN","XDRDCOMP",9,0)
 S XDRQFLG=0
"RTN","XDRDCOMP",10,0)
 S XDRFL=$$FILE^XDRDPICK() Q:XDRFL'>0
"RTN","XDRDCOMP",11,0)
 G:XDRQFLG END
"RTN","XDRDCOMP",12,0)
 S XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRDCOMP",13,0)
 S XDRDTYPE="BASIC" ; ADDED 4/11/96  JLI
"RTN","XDRDCOMP",14,0)
 D LKUP G:XDRQFLG END
"RTN","XDRDCOMP",15,0)
 S %ZIS="Q" D ^%ZIS G:POP END
"RTN","XDRDCOMP",16,0)
 S (IOP,XDRDCOMP("DEVICE"))=ION_";"_IOM_";"_IOSL
"RTN","XDRDCOMP",17,0)
 I $D(IO("Q")) D  G:XDRQFLG END
"RTN","XDRDCOMP",18,0)
 .S ZTRTN="DQ^XDRDCOMP",ZTIO=ION,ZTDESC=$P(^DIC(XDRFL,0),U)_" COMPARISON LIST"
"RTN","XDRDCOMP",19,0)
 .F %="XDRCD","XDRCD2","XDRFL","XDRDTYPE","XDRGL","XDRD(","XDRDCOMP(" S ZTSAVE(%)=""
"RTN","XDRDCOMP",20,0)
 .D ^%ZTLOAD W:$D(ZTSK) !,"Queued as task "_ZTSK,!
"RTN","XDRDCOMP",21,0)
 .S XDRQFLG=1
"RTN","XDRDCOMP",22,0)
DQ ; Entry Point for Taskman
"RTN","XDRDCOMP",23,0)
 U IO W @IOF
"RTN","XDRDCOMP",24,0)
 D ^XDRDSCOR
"RTN","XDRDCOMP",25,0)
 D ^XDRDUP ;S XDRD("NOADD")="" D ^XDRDUP
"RTN","XDRDCOMP",26,0)
 D DITC
"RTN","XDRDCOMP",27,0)
 D SCORE
"RTN","XDRDCOMP",28,0)
 D ^%ZISC
"RTN","XDRDCOMP",29,0)
END D EOJ
"RTN","XDRDCOMP",30,0)
 Q
"RTN","XDRDCOMP",31,0)
 ;
"RTN","XDRDCOMP",32,0)
LKUP ;Look up both reocord.
"RTN","XDRDCOMP",33,0)
 S DIC=XDRGL,DIC(0)="QEAM"
"RTN","XDRDCOMP",34,0)
 S DIC("A")="COMPARE "_$P(^DIC(XDRFL,0),U)_": "
"RTN","XDRDCOMP",35,0)
 D ^DIC ;W !,"X: ",X,"Y: ",Y
"RTN","XDRDCOMP",36,0)
 I $D(DIRUT)!(Y=-1) K DIC,DA S XDRQFLG=1 G LKUPX
"RTN","XDRDCOMP",37,0)
 S XDRCD=+Y S DIT(1)=+Y
"RTN","XDRDCOMP",38,0)
LKUP2 S DIC("A")="    WITH "_$P(^DIC(XDRFL,0),U)_": "
"RTN","XDRDCOMP",39,0)
 D ^DIC K DIC,DA
"RTN","XDRDCOMP",40,0)
 G:$D(DIRUT)!(Y=-1) LKUP
"RTN","XDRDCOMP",41,0)
 S XDRCD2=+Y S DIT(2)=+Y
"RTN","XDRDCOMP",42,0)
 I XDRCD=XDRCD2 W *7,!!,"    CAN NOT COMPARE SAME PATIENT!!  ",!! G LKUP
"RTN","XDRDCOMP",43,0)
LKUPX Q
"RTN","XDRDCOMP",44,0)
 ;
"RTN","XDRDCOMP",45,0)
DITC ;
"RTN","XDRDCOMP",46,0)
 D SHOW^XDRDSHOW(XDRFL,XDRCD,XDRCD2)
"RTN","XDRDCOMP",47,0)
 ;S DFF=XDRFL,DIC=XDRGL,DIT(1)=XDRCD,DIT(2)=XDRCD2,DDIF=2
"RTN","XDRDCOMP",48,0)
 ;S IOP=XDRDCOMP("DEVICE")
"RTN","XDRDCOMP",49,0)
 ;D EN^DITC K DIC,DFF,DIT,IOP,DDIF
"RTN","XDRDCOMP",50,0)
 Q
"RTN","XDRDCOMP",51,0)
SCORE ;
"RTN","XDRDCOMP",52,0)
 S:XDRDSCOR("MAX")>0 XDRD("DUPSCORE%")=XDRD("DUPSCORE")/XDRDSCOR("MAX")
"RTN","XDRDCOMP",53,0)
 S:XDRDSCOR("MAX")=0 XDRD("DUPSCORE%")=0
"RTN","XDRDCOMP",54,0)
 S XDRD("DUPSCORE%")=$J(XDRD("DUPSCORE%"),1,2)
"RTN","XDRDCOMP",55,0)
 S XDRD("DUPSCORE%")=$S(XDRD("DUPSCORE%")<0:0,XDRD("DUPSCORE%")<1:$E(XDRD("DUPSCORE%"),3,4),1:100)
"RTN","XDRDCOMP",56,0)
 ;S IOP=XDRDCOMP("DEVICE") D ^%ZIS U IO
"RTN","XDRDCOMP",57,0)
 W !! F I=0:0 S I=$O(XDRDUP("TEST SCORE",I)) Q:I'>0  I +XDRDUP("TEST SCORE",I)'=0 S J=XDRDTEST(I) W !,$P(J,U),?25,"VALUE = ",$J(XDRDUP("TEST SCORE",I),3,0),"   MAX POSSIBLE = ",$J($P(J,U,6),3,0)
"RTN","XDRDCOMP",58,0)
 W !!,?40,"DUPLICATE THRESHOLD % ",XDRDSCOR("PDT%")
"RTN","XDRDCOMP",59,0)
 W !,?40,"DUPLICATE SCORE % ",$G(XDRD("DUPSCORE%")),!
"RTN","XDRDCOMP",60,0)
 K %,XDRDCNT
"RTN","XDRDCOMP",61,0)
 I '$D(ZTQUEUED),$E(IOST,1,2)'="P-" S DIR(0)="E" D ^DIR K DIR S:X=U XDRQFLG=1
"RTN","XDRDCOMP",62,0)
 ;D ^%ZISC
"RTN","XDRDCOMP",63,0)
 Q
"RTN","XDRDCOMP",64,0)
QUEUE ;** Remove after testing **
"RTN","XDRDCOMP",65,0)
 I '$D(IOP),'$D(XDRDCOMP("DEVICE")) S %ZIS="QMN" D ^%ZIS
"RTN","XDRDCOMP",66,0)
 I POP S XDRQFLG=1 G QUEUEX
"RTN","XDRDCOMP",67,0)
 I $D(IO("Q")),IO=IO(0) W !!,"Sorry, you can't queue to your screen or a slave device.",! K IO("Q") G QUEUE
"RTN","XDRDCOMP",68,0)
 S (IOP,XDRDCOMP("DEVICE"))=ION_";"_IOM_";"_IOSL K %ZIS
"RTN","XDRDCOMP",69,0)
 I '$D(IO("Q")) G QUEUEX
"RTN","XDRDCOMP",70,0)
 S ZTRTN="DQ^XDRDCOMP",ZTIO=ION,ZTDESC=$P(^DIC(XDRFL,0),U)_" COMPARISON LIST"
"RTN","XDRDCOMP",71,0)
 F %="XDRCD","XDRCD2","XDRFL","XDRDTYPE","XDRGL","XDRD(","XDRDCOMP(" S ZTSAVE(%)=""
"RTN","XDRDCOMP",72,0)
 K %
"RTN","XDRDCOMP",73,0)
 ;S XYY=AAA ***************************
"RTN","XDRDCOMP",74,0)
 D ^%ZTLOAD W:$D(ZTSK) !,"Queued as task "_ZTSK,!
"RTN","XDRDCOMP",75,0)
 S XDRQFLG=1
"RTN","XDRDCOMP",76,0)
 K ZTSK
"RTN","XDRDCOMP",77,0)
QUEUEX Q
"RTN","XDRDCOMP",78,0)
 ;
"RTN","XDRDCOMP",79,0)
EOJ ;
"RTN","XDRDCOMP",80,0)
 K XDRDCOMP,XDRDUP,XDRD,XDRFL,XDRGL,XDRQFLG,XDRDTEST,XDRDSCOR
"RTN","XDRDCOMP",81,0)
 K XDRCD,XDRCD2,%IS,POP,IO("C"),IOP,IO("Q"),X,Y,ZTSK
"RTN","XDRDCOMP",82,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XDRDCOMP",83,0)
 Q
"RTN","XDRDDATA")
0^7^B1463733
"RTN","XDRDDATA",1,0)
XDRDDATA ;SF-IRMFO.SEA/JLI - LIST BASIC DATA ON POTENTIAL DUPLICATES ;12/2/96  11:21
"RTN","XDRDDATA",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDDATA",3,0)
 ;;
"RTN","XDRDDATA",4,0)
EN ;
"RTN","XDRDDATA",5,0)
 S DIC="^VA(15.1,",DIC(0)="AEQM" D ^DIC G:Y'>0 EXIT S XDRFL=+Y
"RTN","XDRDDATA",6,0)
 S XDRFL=$P(^DIC(XDRFL,0,"GL"),U,2)
"RTN","XDRDDATA",7,0)
 S %ZIS="QN" D ^%ZIS Q:POP  I $D(IO("Q")) G QUEIT
"RTN","XDRDDATA",8,0)
 S IOP="BROWSER" D ^%ZIS Q:POP
"RTN","XDRDDATA",9,0)
 G DQ
"RTN","XDRDDATA",10,0)
 ;
"RTN","XDRDDATA",11,0)
QUEIT ;
"RTN","XDRDDATA",12,0)
 S ZTRTN="DQ^XDRDDATA",ZTDESC="LIST POTENTIAL DUPLICATES - XDRDDATA",ZTSAVE("XDRFL")="" D ^%ZTLOAD Q
"RTN","XDRDDATA",13,0)
 ;
"RTN","XDRDDATA",14,0)
DQ ;
"RTN","XDRDDATA",15,0)
 U IO
"RTN","XDRDDATA",16,0)
 S XL=0
"RTN","XDRDDATA",17,0)
 ;S IPAIR="" F  S IPAIR=$O(^VA(15,"APOT",XDRFL,IPAIR)) Q:IPAIR=""  D
"RTN","XDRDDATA",18,0)
 W !!!!
"RTN","XDRDDATA",19,0)
 F I=0:0 S I=$O(^VA(15,I)) Q:I'>0  S IPAIR=^(I,0) D
"RTN","XDRDDATA",20,0)
 . I $P(IPAIR,U,3)'="P" Q
"RTN","XDRDDATA",21,0)
 . I $P($P(IPAIR,U),";",2)'=XDRFL Q
"RTN","XDRDDATA",22,0)
 . S X1=+IPAIR,X2=+$P(IPAIR,U,2)
"RTN","XDRDDATA",23,0)
 . I X1'=XL W !!!,$G(@(U_XDRFL_X1_",0)")) S XL=X1
"RTN","XDRDDATA",24,0)
 . W !,$G(@(U_XDRFL_X2_",0)"))
"RTN","XDRDDATA",25,0)
 D ^%ZISC
"RTN","XDRDDATA",26,0)
 I $D(ZTQUEUED) Q
"RTN","XDRDDATA",27,0)
 ;
"RTN","XDRDDATA",28,0)
DISP ;
"RTN","XDRDDATA",29,0)
 Q
"RTN","XDRDDATA",30,0)
 ;
"RTN","XDRDDATA",31,0)
 ;. S X2=+$P(IPAIR,U,2)
"RTN","XDRDDATA",32,0)
 D ^%ZISC
"RTN","XDRDDATA",33,0)
 I $D(ZTQUEUED) Q
"RTN","XDRDDATA",34,0)
 ;
"RTN","XDRDDATA",35,0)
EXIT ;
"RTN","XDRDDATA",36,0)
 Q
"RTN","XDRDEDT")
0^62^B30458394
"RTN","XDRDEDT",1,0)
XDRDEDT ;SF-IRMFO/REM - EDIT STATUS FIELD IN FILE 15 ;4/8/98  10:25
"RTN","XDRDEDT",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDEDT",3,0)
EN ;;
"RTN","XDRDEDT",4,0)
 N XDRFIL,X,X1,X2,N1,N2,XDRDELET
"RTN","XDRDEDT",5,0)
EN2 K DIE,DIC
"RTN","XDRDEDT",6,0)
 S XDRFIL=$$FILE^XDRDPICK() Q:XDRFIL'>0  S XDRGLB=$G(^DIC(XDRFIL,0,"GL")) Q:XDRGLB=""
"RTN","XDRDEDT",7,0)
 F  D  Q:DA'>0
"RTN","XDRDEDT",8,0)
 . S DIC="^VA(15,",DIC(0)="AEQZ",DIC("S")="I $$SCRN^XDRDEDT(+Y,XDRGLB)"
"RTN","XDRDEDT",9,0)
 . S DIC("A")="Select an Entry to "_$S($D(XDRDELET):"DELETE: ",1:"RESET TO POTENTIAL DUPLICATES: ")
"RTN","XDRDEDT",10,0)
 . D ^DIC S DA=+Y Q:DA<0
"RTN","XDRDEDT",11,0)
 . I $P(^VA(15,DA,0),U,4)<2 S X1=+^VA(15,DA,0),X2=+$P(^(0),U,2)
"RTN","XDRDEDT",12,0)
 . E  S X1=+$P(^VA(15,DA,0),U,2),X2=+^(0)
"RTN","XDRDEDT",13,0)
 . S N1=$P(@(XDRGLB_X1_",0)"),U),N2=$P(@(XDRGLB_X2_",0)"),U)
"RTN","XDRDEDT",14,0)
 . S N1=$$PEELNAM(N1),N2=$$PEELNAM(N2)
"RTN","XDRDEDT",15,0)
 .W !!!,"  Duplicate Record File Entry ",DA," for the ",$P(^DIC(XDRFIL,0),U)," FILE"
"RTN","XDRDEDT",16,0)
 . N XX D  W !?10,X1,?20,N1,!?10,X2,?20,N2,!!?10,"Currently listed as ",XX,!!
"RTN","XDRDEDT",17,0)
 . . N DIC,DIQ,DR,XDRQ
"RTN","XDRDEDT",18,0)
 . . S DIC="^VA(15,",DIQ="XDRQ",DIQ(0)="E",DR=.03
"RTN","XDRDEDT",19,0)
 . . D EN^DIQ1
"RTN","XDRDEDT",20,0)
 . . S XX=$G(XDRQ(15,DA,.03,"E"))
"RTN","XDRDEDT",21,0)
 . . Q
"RTN","XDRDEDT",22,0)
 . S DIR(0)="Y",DIR("A")="Do you really want to "_$S($D(XDRDELET):"DELETE THIS DUPLICATE RECORD ENTRY",1:"RESET to POTENTIAL DUPLICATE"),DIR("B")="NO" D ^DIR Q:Y'>0
"RTN","XDRDEDT",23,0)
 . D NAME(DA)
"RTN","XDRDEDT",24,0)
 . I $D(XDRDELET) D
"RTN","XDRDEDT",25,0)
 . . N DIK
"RTN","XDRDEDT",26,0)
 . . S DIK="^VA(15," D ^DIK
"RTN","XDRDEDT",27,0)
 . I '$D(XDRDELET) D
"RTN","XDRDEDT",28,0)
 . . K DIE S DIE="^VA(15,",DR=".03///P;.04///@;.05///@;.07///@;.08///@;.1///@;.13///@;.14///@;" D ^DIE K DIE
"RTN","XDRDEDT",29,0)
 . . S:$D(DUZ) $P(^VA(15,DA,0),U,12)=DUZ
"RTN","XDRDEDT",30,0)
 . . K ^VA(15,DA,2)
"RTN","XDRDEDT",31,0)
 . . K ^VA(15,DA,3)
"RTN","XDRDEDT",32,0)
 . W !!,"   ",$S($D(XDRDELET):"Entry DELETED!",1:"Status RESET to POTENTIAL DUPLICATE RECORD."),!!,*7
"RTN","XDRDEDT",33,0)
 . Q
"RTN","XDRDEDT",34,0)
 K DA,DR,DIC,DIE
"RTN","XDRDEDT",35,0)
 Q
"RTN","XDRDEDT",36,0)
SCRN(DA,GLOBAL) ;Screen for verified dup. or verified not dup.
"RTN","XDRDEDT",37,0)
 I $P(^(0),U,5)>1 Q 0 ; But don't take merged or merge in progress!
"RTN","XDRDEDT",38,0)
 I '$D(XDRDELET),$P(^(0),U,3)="P"!($P(^(0),U,3)="O") Q 0 ; DON'T NEED TO SET BACK
"RTN","XDRDEDT",39,0)
 I (U_$P($P(^(0),U),";",2))'=GLOBAL Q 0 ; Take only the specified file
"RTN","XDRDEDT",40,0)
 ;I $P(^(0),U,3)="V" Q 1
"RTN","XDRDEDT",41,0)
 ;I $P(^(0),U,3)="N" Q 1
"RTN","XDRDEDT",42,0)
 Q 1
"RTN","XDRDEDT",43,0)
 ;
"RTN","XDRDEDT",44,0)
NAME(DA) ;
"RTN","XDRDEDT",45,0)
 N X,X1,X2,N,N1,N2
"RTN","XDRDEDT",46,0)
 S X=^VA(15,DA,0),X1=+X,X2=+$P(X,U,2),X=$P($P(X,U),";",2)
"RTN","XDRDEDT",47,0)
 S N1=$P($G(@(U_X_X1_",0)")),U)
"RTN","XDRDEDT",48,0)
 S N2=$P($G(@(U_X_X2_",0)")),U)
"RTN","XDRDEDT",49,0)
 S N=$$PEELNAM(N1)
"RTN","XDRDEDT",50,0)
 I N'=N1 S $P(@(U_X_X1_",0)"),U)=N
"RTN","XDRDEDT",51,0)
 S N=$$PEELNAM(N2)
"RTN","XDRDEDT",52,0)
 I N'=N2 S $P(@(U_X_X2_",0)"),U)=N
"RTN","XDRDEDT",53,0)
 Q
"RTN","XDRDEDT",54,0)
PEELNAM(NAME) ;
"RTN","XDRDEDT",55,0)
 F  Q:NAME'["MERGING INTO"  S NAME=$P($P(NAME,"(",2,10),")",1,$L(NAME,")")-1)
"RTN","XDRDEDT",56,0)
 Q NAME
"RTN","XDRDEDT",57,0)
 ;
"RTN","XDRDEDT",58,0)
DELETE ;
"RTN","XDRDEDT",59,0)
 N XDRFIL,X,X1,X2,N1,N2,XDRDELET
"RTN","XDRDEDT",60,0)
 S XDRDELET=1
"RTN","XDRDEDT",61,0)
 D EN2
"RTN","XDRDEDT",62,0)
 Q
"RTN","XDRDEDT",63,0)
 ;
"RTN","XDRDEDT",64,0)
LOOKUP(FILE) ; FIND PAIRS IN DUPLICATE RECORD FILE
"RTN","XDRDEDT",65,0)
 N FILENAM,NAME,NAME1,NAME2,NAMEA,XDRDIC,DIR,Y,I,J,XDR1,IEN,N,X,FILID,IEN1
"RTN","XDRDEDT",66,0)
 S FILENAM=$P(^DIC(FILE,0),U) I FILENAM="" G NOFILE
"RTN","XDRDEDT",67,0)
 S XDRDIC=$G(^DIC(FILE,0,"GL")) I XDRDIC="" G NOFILE
"RTN","XDRDEDT",68,0)
 S XDRDIC=";"_$E(XDRDIC,2,99)
"RTN","XDRDEDT",69,0)
 ;
"RTN","XDRDEDT",70,0)
LOOK1 K DIR S DIR("A")="Select "_FILENAM,DIR(0)="FO^2" D ^DIR K DIR ; GET PART OF A NAME
"RTN","XDRDEDT",71,0)
 I X="" Q -1
"RTN","XDRDEDT",72,0)
 I $D(DIRUT)!(Y="^") Q -1
"RTN","XDRDEDT",73,0)
 ;
"RTN","XDRDEDT",74,0)
 ; GET A LIST OF NAMES IN THE FILE STARTING WITH THE USERS INPUT AND WHICH HAVE AN IEN THAT IS
"RTN","XDRDEDT",75,0)
 ; IN THE DUPLICATE RECORD FILE
"RTN","XDRDEDT",76,0)
 ;
"RTN","XDRDEDT",77,0)
 S NAME=$NA(^TMP($J,"XDRLIST")) K @NAME
"RTN","XDRDEDT",78,0)
 D LIST^DIC(FILE,"","","","","",X,"","I $D(^VA(15,""B"",(Y_XDRDIC)))","",NAME)
"RTN","XDRDEDT",79,0)
 ;
"RTN","XDRDEDT",80,0)
 S NAME1=$NA(@NAME@("DILIST"))
"RTN","XDRDEDT",81,0)
 ;
"RTN","XDRDEDT",82,0)
 ; NOW GO THROUGH THE LIST OF MATCHING NAMES AND CHECK FOR THOSE WHICH HAVE THE DESIRED STATUS
"RTN","XDRDEDT",83,0)
 ;    USE THE DATA UNDER THE 2 NODE WHICH IS THE IEN
"RTN","XDRDEDT",84,0)
 ;
"RTN","XDRDEDT",85,0)
 F I=0:0 S I=$O(@NAME1@(2,I)) Q:I'>0  S IEN=^(I) D
"RTN","XDRDEDT",86,0)
 . S XDR1=IEN_XDRDIC
"RTN","XDRDEDT",87,0)
 . F J=0:0 S J=$O(^VA(15,"B",XDR1,J)) Q:J'>0  I $P(^VA(15,J,0),U,3)="P" Q
"RTN","XDRDEDT",88,0)
 . ; IF NOT AT LEAST ONE WITH THE DESIRED STATUS, THEN REMOVE IT FROM THE ARRAY
"RTN","XDRDEDT",89,0)
 . I J'>0 F J=1,2,"ID" K @NAME1@(J,I)
"RTN","XDRDEDT",90,0)
 . Q
"RTN","XDRDEDT",91,0)
 ;
"RTN","XDRDEDT",92,0)
 S J=$O(@NAME1@(2,0)) I J'>0 G NONAME
"RTN","XDRDEDT",93,0)
 ;
"RTN","XDRDEDT",94,0)
 S NAME2=$NA(^TMP($J,"XDRLI1")) K @NAME2
"RTN","XDRDEDT",95,0)
 S N=0 F I=0:0 S I=$O(@NAME1@(1,I)) Q:I'>0  D
"RTN","XDRDEDT",96,0)
 . S N=N+1
"RTN","XDRDEDT",97,0)
 . S X=@NAME1@(1,I)_" [ien="_@NAME1@(2,I)_"]" F J=0:0 S J=$O(@NAME1@("ID",I,J)) Q:J'>0  S FILID(J)="" S X=X_"  "_@NAME1@("ID",I,J)
"RTN","XDRDEDT",98,0)
 . S @NAME2@(N)=X,@NAME2@(N,"IEN")=@NAME1@(2,I)
"RTN","XDRDEDT",99,0)
 S X=$$ASK(NAME2) I X'>0 G NONAME
"RTN","XDRDEDT",100,0)
 I N>1 W @NAME2@(X)
"RTN","XDRDEDT",101,0)
 S IEN1=@NAME2@(X,"IEN")_XDRDIC K @NAME2,@NAME
"RTN","XDRDEDT",102,0)
 S X=$$PAIR(IEN1,"FILID") I X'>0 G NONAME
"RTN","XDRDEDT",103,0)
 Q X
"RTN","XDRDEDT",104,0)
 ;
"RTN","XDRDEDT",105,0)
PAIR(IENDIC,IDARR) ;
"RTN","XDRDEDT",106,0)
 N FILE,IEN,NAME,XDRN,IEN2,XDRX1,XDRJ,XDRX
"RTN","XDRDEDT",107,0)
 S NAME=$NA(^TMP($J,"XDRPAIR")) K @NAME
"RTN","XDRDEDT",108,0)
 S FILE=+$P(@(U_$P(IENDIC,";",2)_"0)"),U,2),XDRN=0
"RTN","XDRDEDT",109,0)
 F IEN=0:0 S IEN=$O(^VA(15,"B",IENDIC,IEN)) Q:IEN'>0  I $P(^VA(15,IEN,0),U,3)="P" D
"RTN","XDRDEDT",110,0)
 . S XDRN=XDRN+1
"RTN","XDRDEDT",111,0)
 . S XDRX=^VA(15,IEN,0)
"RTN","XDRDEDT",112,0)
 . S IEN2=$P(XDRX,U) I IEN2=IENDIC S IEN2=$P(XDRX,U,2)
"RTN","XDRDEDT",113,0)
 . S IEN2=+IEN2,IENS=IEN2_","
"RTN","XDRDEDT",114,0)
 . S XDRX1=$$GET1^DIQ(FILE,IENS,.01)_" [iens="_IEN2_"]"
"RTN","XDRDEDT",115,0)
 . F XDRJ=0:0 S XDRJ=$O(@IDARR@(XDRJ)) Q:XDRJ'>0  S XDRX1=XDRX1_"  "_$$GET1^DIQ(FILE,IENS,XDRJ)
"RTN","XDRDEDT",116,0)
 . S @NAME@(XDRN)=XDRX1,@NAME@(XDRN,"IEN")=IEN
"RTN","XDRDEDT",117,0)
 I XDRN>1 W !!,"This entry is paired with more than one other record.",!,"Select which pair from the following list:",!
"RTN","XDRDEDT",118,0)
 S XDRX=$$ASK(NAME) I XDRX>0 S XDRX=@NAME@(XDRX,"IEN")
"RTN","XDRDEDT",119,0)
 K @NAME
"RTN","XDRDEDT",120,0)
 Q XDRX
"RTN","XDRDEDT",121,0)
 ;
"RTN","XDRDEDT",122,0)
ASK(ARRAY) ;
"RTN","XDRDEDT",123,0)
 N N,I,N1,NCHOICE
"RTN","XDRDEDT",124,0)
 W !
"RTN","XDRDEDT",125,0)
 S N=0 F I=0:0 S I=$O(@ARRAY@(I)) Q:I'>0  S N=N+1
"RTN","XDRDEDT",126,0)
 I N'>1 S I=+$O(@ARRAY@(0)) W:I>0 @ARRAY@(I) Q I
"RTN","XDRDEDT",127,0)
 I N>5 W "There are "_N_" choices.",!!
"RTN","XDRDEDT",128,0)
 S N1=0,NCHOICE=0
"RTN","XDRDEDT",129,0)
 F I=0:0 S I=$O(@ARRAY@(I)) Q:I'>0  S N1=N1+1 W !,N1,".  ",@ARRAY@(I) I '(N1#5) S NCHOICE=$$ASKEM(N1,N) Q:NCHOICE  Q:$D(DIRUT)
"RTN","XDRDEDT",130,0)
 I 'NCHOICE,'$D(DIRUT) S NCHOICE=$$ASKEM(N1,N1)
"RTN","XDRDEDT",131,0)
 Q NCHOICE
"RTN","XDRDEDT",132,0)
 ;
"RTN","XDRDEDT",133,0)
ASKEM(NCUR,NMAX) ;
"RTN","XDRDEDT",134,0)
 N DIR,Y
"RTN","XDRDEDT",135,0)
 W !! I NCUR<NMAX W !,"Choose from 1 to "_NCUR S DIR("A")="Or return to continue: ",DIR(0)="NO^1:"_NCUR
"RTN","XDRDEDT",136,0)
 E  S DIR("A")="Choose from 1 to "_NCUR,DIR(0)="N^1:"_NCUR
"RTN","XDRDEDT",137,0)
 D ^DIR W ! I $D(DIRUT),'$D(DTOUT),'$D(DUOUT) K DIRUT
"RTN","XDRDEDT",138,0)
 Q $S(Y>0:Y,1:0)
"RTN","XDRDEDT",139,0)
 ;
"RTN","XDRDEDT",140,0)
NOFILE ;
"RTN","XDRDEDT",141,0)
 W !,"FILE ",FILE," NOT FOUND",$C(7),!!
"RTN","XDRDEDT",142,0)
 Q -1
"RTN","XDRDEDT",143,0)
 ;
"RTN","XDRDEDT",144,0)
NONAME ;
"RTN","XDRDEDT",145,0)
 W $C(7),"??"
"RTN","XDRDEDT",146,0)
 G LOOK1
"RTN","XDRDEDT",147,0)
 ;
"RTN","XDRDLIST")
0^9^B15430835
"RTN","XDRDLIST",1,0)
XDRDLIST ;SF-IRMFO/IHS/OHPRD/JCM - PRINT POTENTIAL AND VERIFIED DUPLICATES;    [ 08/13/92  09:50 AM ] ;4/8/98  10:21
"RTN","XDRDLIST",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDLIST",3,0)
 ;;
"RTN","XDRDLIST",4,0)
 N XDRFL,XDRFLD
"RTN","XDRDLIST",5,0)
START ;
"RTN","XDRDLIST",6,0)
 S XDRQFLG=0
"RTN","XDRDLIST",7,0)
 ;W !!,"Choose type of list."
"RTN","XDRDLIST",8,0)
 S DIR("?")="BRIEF prints the fields: RECORD1, RECORD2 and the IEN for each entry.  CAPTIONED is FileMan's CAPTIONED format."
"RTN","XDRDLIST",9,0)
 S DIR("A")="Choose type of list",DIR(0)="SO^1:BRIEF;2:CAPTIONED" D ^DIR K DIR G:$D(DIRUT) END
"RTN","XDRDLIST",10,0)
 S XDRFLD=Y
"RTN","XDRDLIST",11,0)
 I '$D(XDRFL) S DIC("A")="Select File you wish to list for: " D FILE^XDRDQUE G:XDRQFLG END
"RTN","XDRDLIST",12,0)
 D ASK G:XDRQFLG END ; Asks which type of listing you want
"RTN","XDRDLIST",13,0)
 D @$S(XDRDLIST("ASK")=1:"POT",XDRDLIST("ASK")=2:"NOT",XDRDLIST("ASK")=3:"VER",1:"MERGED")
"RTN","XDRDLIST",14,0)
 G:'XDRQFLG START
"RTN","XDRDLIST",15,0)
END D EOJ ; End of job and cleans up variables
"RTN","XDRDLIST",16,0)
 Q  ; End of routine
"RTN","XDRDLIST",17,0)
 ;
"RTN","XDRDLIST",18,0)
ASK ;
"RTN","XDRDLIST",19,0)
 K XDRDLIST("ASK")
"RTN","XDRDLIST",20,0)
 S XDRDLIST("GL")=$S($D(^DIC(XDRFL,0,"GL")):$P(^DIC(XDRFL,0,"GL"),U,2),1:"")
"RTN","XDRDLIST",21,0)
 I XDRDLIST("GL")']"" S XDRQFLG=1 G ASKX
"RTN","XDRDLIST",22,0)
 W !!,"This utility provides reports on verified and unverified potential duplicates."
"RTN","XDRDLIST",23,0)
WHCH S DIR("A")="report",DIR(0)="SO^1:UNVERIFIED potential duplicates;2:NOT READY TO MERGE VERIFIED duplicates;3:READY TO MERGE VERIFIED duplicates;4:MERGED VERIFIED duplicates" D ^DIR K DIR
"RTN","XDRDLIST",24,0)
 I $D(DIRUT) S XDRQFLG=1 G ASKX
"RTN","XDRDLIST",25,0)
 I Y=" " S XDRQFLG=1 G ASKX
"RTN","XDRDLIST",26,0)
 S XDRDLIST("ASK")=$S(Y=1:1,Y=2:2,Y=3:3,1:4)
"RTN","XDRDLIST",27,0)
 I XDRDLIST("ASK")=1,'$D(^VA(15,"APOT",XDRDLIST("GL"))) W !,"There are no unverified potential duplicates at this time.",$C(7) K XDRDLIST("ASK") G WHCH
"RTN","XDRDLIST",28,0)
 I XDRDLIST("ASK")=3,'$D(^VA(15,"AMRG",XDRDLIST("GL"),1)) W !,"There are no READY TO MERGE verified duplicates at this time.",$C(7) K XDRDLIST("ASK") G WHCH
"RTN","XDRDLIST",29,0)
 I XDRDLIST("ASK")=2,'$D(^VA(15,"AMRG",XDRDLIST("GL"),0)) W !,"There are no NOT READY TO MERGE verified duplicates at this time.",$C(7) K XDRDLIST("ASK") G WHCH
"RTN","XDRDLIST",30,0)
 I XDRDLIST("ASK")=4,'$D(^VA(15,"AFR",XDRDLIST("GL"))) W !,"There are no MERGED VERIFIED duplicates at this time.",$C(7) K XDRDLIST("ASK") G WHCH
"RTN","XDRDLIST",31,0)
 ;
"RTN","XDRDLIST",32,0)
ASKX ;
"RTN","XDRDLIST",33,0)
 Q
"RTN","XDRDLIST",34,0)
 ;
"RTN","XDRDLIST",35,0)
POT ;
"RTN","XDRDLIST",36,0)
 S DIC="^VA(15,",L="",FLDS=$S(XDRFLD=1:"[XDR BRIEF LIST]",1:"[CAPTIONED]")
"RTN","XDRDLIST",37,0)
 S BY="[XDR POTENTIAL DUPLICATE LIST]"
"RTN","XDRDLIST",38,0)
 S DIS(0)="I $P($P(^VA(15,D0,0),U),"";"",2)=XDRDLIST(""GL"")"
"RTN","XDRDLIST",39,0)
 S DHD="Unverified Potential Duplicates"
"RTN","XDRDLIST",40,0)
 D EN1^DIP K DIC,DIS,DHD,L,FLDS,BY
"RTN","XDRDLIST",41,0)
 Q
"RTN","XDRDLIST",42,0)
 ;
"RTN","XDRDLIST",43,0)
VER ;
"RTN","XDRDLIST",44,0)
 S DIC="^VA(15,",L="",FLDS=$S(XDRFLD=1:"[XDR BRIEF LIST]",1:"[CAPTIONED]")
"RTN","XDRDLIST",45,0)
 ;S DIC="^VA(15,",L="",FLDS="[CAPTIONED]"
"RTN","XDRDLIST",46,0)
 S BY="[XDR READY TO MERGE LIST]"
"RTN","XDRDLIST",47,0)
 S DIS(0)="I $P($P(^VA(15,D0,0),U),"";"",2)=XDRDLIST(""GL"")"
"RTN","XDRDLIST",48,0)
 S DHD="Verified Duplicates Ready to Merge"
"RTN","XDRDLIST",49,0)
 D EN1^DIP K DIC,DIS,DHD,L,FLDS,BY
"RTN","XDRDLIST",50,0)
 Q
"RTN","XDRDLIST",51,0)
 ;
"RTN","XDRDLIST",52,0)
NOT ;
"RTN","XDRDLIST",53,0)
 S DIC="^VA(15,",L="",FLDS=$S(XDRFLD=1:"[XDR BRIEF LIST]",1:"[CAPTIONED]")
"RTN","XDRDLIST",54,0)
 ;S DIC="^VA(15,",L="",FLDS="[CAPTIONED]"
"RTN","XDRDLIST",55,0)
 S BY="[XDR NOT READY TO MERGE LIST]"
"RTN","XDRDLIST",56,0)
 S DIS(0)="I $P($P(^VA(15,D0,0),U),"";"",2)=XDRDLIST(""GL"")"
"RTN","XDRDLIST",57,0)
 S DHD="Verified Duplicates Not Ready to Merge"
"RTN","XDRDLIST",58,0)
 D EN1^DIP K DIC,DIS,DHD,L,FLDS,BY
"RTN","XDRDLIST",59,0)
 Q
"RTN","XDRDLIST",60,0)
MERGED ;
"RTN","XDRDLIST",61,0)
 S DIC="^VA(15,",L="",FLDS=$S(XDRFLD=1:"[XDR BRIEF LIST]",1:"[XDR MERGED LIST]")
"RTN","XDRDLIST",62,0)
 ;S DIC="^VA(15,",L="",FLDS="[XDR MERGED LIST]"
"RTN","XDRDLIST",63,0)
 S BY="[XDR MERGED LIST]"
"RTN","XDRDLIST",64,0)
 S DIS(0)="I $P($P(^VA(15,D0,0),U),"";"",2)=XDRDLIST(""GL"")"
"RTN","XDRDLIST",65,0)
 S DHD="Verified Duplicates that are Merged"
"RTN","XDRDLIST",66,0)
 D EN1^DIP K DIC,DIS,DHD,L,FLDS,BY
"RTN","XDRDLIST",67,0)
 Q
"RTN","XDRDLIST",68,0)
EOJ ;
"RTN","XDRDLIST",69,0)
 K XDRDLIST,DIRUT,X,Y,DTOUT,DUOUT,XDRD,XDRFL,XDRQFLG
"RTN","XDRDLIST",70,0)
 Q
"RTN","XDRDMAIN")
0^10^B16784550
"RTN","XDRDMAIN",1,0)
XDRDMAIN ;SF-IRMFO/IHS/OHPRD/JCM - MAIN DRIVER FOR DUPLICATE CHECKING SOFTWARE ;1/5/98  13:27
"RTN","XDRDMAIN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDMAIN",3,0)
 ;;
"RTN","XDRDMAIN",4,0)
START ;
"RTN","XDRDMAIN",5,0)
 S XDRQFLG=0
"RTN","XDRDMAIN",6,0)
 S XDRMAINI="DUP" D ^XDRMAINI G:XDRQFLG END
"RTN","XDRDMAIN",7,0)
 I $$NEWERR^%ZTER() N $ETRAP,$ESTACK S $ETRAP="D ERR^XDRDMAIN"
"RTN","XDRDMAIN",8,0)
 E  S X="ERR^XDRDMAIN",@^%ZOSF("TRAP")
"RTN","XDRDMAIN",9,0)
 K ^XTMP("XDRERR",XDRFL) S ^XTMP("XDRERR",0)=($$FMADD^XLFDT(DT,30))_U_DT
"RTN","XDRDMAIN",10,0)
 I $D(^VA(15.1,XDRFL,"APDTI")) D ^XDRDPDTI,COMPLETE G END
"RTN","XDRDMAIN",11,0)
 D:$D(XDRDTYPE) @XDRDTYPE
"RTN","XDRDMAIN",12,0)
 D COMPLETE ;I $P(^VA(15.1,XDRFL,0),U,2)="r" D COMPLETE
"RTN","XDRDMAIN",13,0)
END D EOJ
"RTN","XDRDMAIN",14,0)
 Q
"RTN","XDRDMAIN",15,0)
ERR ;
"RTN","XDRDMAIN",16,0)
 S XDRQERR=1
"RTN","XDRDMAIN",17,0)
 S XDREMSG=$ZE
"RTN","XDRDMAIN",18,0)
 S XDRQERR=1
"RTN","XDRDMAIN",19,0)
 D ^%ZTER
"RTN","XDRDMAIN",20,0)
 D COMPLETE
"RTN","XDRDMAIN",21,0)
 G UNWIND^%ZTER
"RTN","XDRDMAIN",22,0)
 ;
"RTN","XDRDMAIN",23,0)
BASIC ;
"RTN","XDRDMAIN",24,0)
 S XDRD("GL")=XDRGL_"XDRCD)"
"RTN","XDRDMAIN",25,0)
 I $P(XDRD(0),U,6)]"" S XDRD("NEW GL")=XDRGL_""""_$P(XDRD(0),U,6)_""""_",XDRCD)"
"RTN","XDRDMAIN",26,0)
 F XDRDI1=0:0 S $P(^VA(15.1,XDRFL,3),U)=$$NOW^XLFDT() S XDRCD=$O(@XDRD("GL")) Q:'XDRCD!($P(^VA(15.1,XDRFL,0),U,2)="h")!(XDRQFLG)  D POSDUPS D:$D(^TMP("XDRD",$J,XDRFL)) BCHECK D COUNT K:$D(XDRD("NEW GL")) @XDRD("NEW GL")
"RTN","XDRDMAIN",27,0)
 I $P(^VA(15.1,XDRFL,0),U,2)="h" S XDRQFLG=1
"RTN","XDRDMAIN",28,0)
 K XDRDI1
"RTN","XDRDMAIN",29,0)
 Q
"RTN","XDRDMAIN",30,0)
NEW ;
"RTN","XDRDMAIN",31,0)
 ;I $P(XDRD(0),U,6)="" S XDRERR=17 D ^XDREMSG Q  ; COMMENTED OUT 1/5/98 JLI
"RTN","XDRDMAIN",32,0)
 ;S XDRD("GL")=XDRGL_""""_$P(XDRD(0),U,6)_""""_",XDRCD)" ; COMMENTED OUT 1/5/98 JLI
"RTN","XDRDMAIN",33,0)
 ;F XDRDI1=0:0 S $P(^VA(15.1,XDRFL,3),U)=$$NOW^XLFDT() S XDRCD=$O(@XDRD("GL")) Q:'XDRCD!($P(^VA(15.1,XDRFL,0),U,2)="h")!(XDRQFLG)  D POSDUPS D:$D(^TMP("XDRD",$J,XDRFL)) NCHECK K @XDRD("GL") D COUNT ; COMMENTED OUT 1/5/98 JLI
"RTN","XDRDMAIN",34,0)
 ; ABOVE LINES USE A SPECIAL CROSS REFERENCE FOR NEW SEARCH, INSTEAD THE
"RTN","XDRDMAIN",35,0)
 ; FOLLOWING LINES USE THE HIGHEST NUMBER PREVIOUSLY FOUND AS A POTENTIAL
"RTN","XDRDMAIN",36,0)
 ; DUPLICATE AS THE STARTING POINT FOR THE NEW SEARCH.
"RTN","XDRDMAIN",37,0)
 S XDRD("GL")=XDRGL_",XDRCD)" D  ; ADDED 1/5/98 JLI
"RTN","XDRDMAIN",38,0)
 . N I,X,XGL
"RTN","XDRDMAIN",39,0)
 . S XGL=$E(XDRGL,2,$L(XDRGL))
"RTN","XDRDMAIN",40,0)
 . S I="",X=0
"RTN","XDRDMAIN",41,0)
 . F  S I=$O(^VA(15,"B",I)) Q:I=""  I $P(I,";",2)=XGL,I>X S X=+I
"RTN","XDRDMAIN",42,0)
 . S XDRCD=X
"RTN","XDRDMAIN",43,0)
 G BASIC
"RTN","XDRDMAIN",44,0)
 ;I $P(^VA(15.1,XDRFL,0),U,2)="h" S XDRQFLG=1 ; COMMENTED OUT 1/5/98
"RTN","XDRDMAIN",45,0)
 ;K XDRDI1 ; COMMENTED OUT 1/5/98
"RTN","XDRDMAIN",46,0)
 Q
"RTN","XDRDMAIN",47,0)
POSDUPS ;
"RTN","XDRDMAIN",48,0)
 K ^TMP("XDRD",$J,XDRFL)
"RTN","XDRDMAIN",49,0)
 G:$D(^VA(15,"AFR",$P(XDRGL,U,2),XDRCD)) POSDUPSX
"RTN","XDRDMAIN",50,0)
 ; *** Above I check to see if the record has already been merged.  I
"RTN","XDRDMAIN",51,0)
 ; would have preferred to check some node within the file being
"RTN","XDRDMAIN",52,0)
 ; checked since the Duplicate Record file may be purged, Fileman at
"RTN","XDRDMAIN",53,0)
 ; some point in the future will provide a merged node.
"RTN","XDRDMAIN",54,0)
 ; ***
"RTN","XDRDMAIN",55,0)
 ; We will pass the variable XDRCD for them to then get the candidates
"RTN","XDRDMAIN",56,0)
 ; Expect the routine to send back the possibles in
"RTN","XDRDMAIN",57,0)
 ; ^TMP("XDRD",$J,XDRFL
"RTN","XDRDMAIN",58,0)
 ;
"RTN","XDRDMAIN",59,0)
 I '$D(@(XDRGL_XDRCD_",0)")) G POSDUPSX
"RTN","XDRDMAIN",60,0)
 S X=$P(XDRD("COLLECTION ROUTINE"),U,2) X ^%ZOSF("TEST") K X I '$T S XDRERR=2 D ^XDREMSG G POSDUPSX
"RTN","XDRDMAIN",61,0)
 D @XDRD("COLLECTION ROUTINE")
"RTN","XDRDMAIN",62,0)
POSDUPSX Q
"RTN","XDRDMAIN",63,0)
 ;
"RTN","XDRDMAIN",64,0)
BCHECK ;
"RTN","XDRDMAIN",65,0)
 F XDRCD2=0:0 S XDRCD2=$O(^TMP("XDRD",$J,XDRFL,XDRCD2)) Q:'XDRCD2!(XDRQFLG)  I $S(XDRDTYPE="BASIC":XDRCD2>XDRCD,1:1) D CHECK ; MODIFIED 1/5/98 JLI
"RTN","XDRDMAIN",66,0)
 K ^TMP("XDRD",$J,XDRFL) F %=0:0 S %=$O(XDRCD(0)) Q:'%  K XDRCD(%)
"RTN","XDRDMAIN",67,0)
 K %
"RTN","XDRDMAIN",68,0)
 Q
"RTN","XDRDMAIN",69,0)
 ;
"RTN","XDRDMAIN",70,0)
NCHECK ;
"RTN","XDRDMAIN",71,0)
 F XDRCD2=0:0 S XDRCD2=$O(^TMP("XDRD",$J,XDRFL,XDRCD2)) Q:'XDRCD2!(XDRQFLG)  S XDRD("GL2")=XDRGL_""""_$P(XDRD(0),U,6)_""""_",XDRCD2)" D:'$D(@XDRD("GL2")) CHECK
"RTN","XDRDMAIN",72,0)
 K ^TMP("XDRD",$J,XDRFL) F %=0:0 S %=$O(XDRCD(0)) Q:'%  K XDRCD(%)
"RTN","XDRDMAIN",73,0)
 K %,XDRD("GL2")
"RTN","XDRDMAIN",74,0)
 Q
"RTN","XDRDMAIN",75,0)
CHECK ;
"RTN","XDRDMAIN",76,0)
 S XDRDMAIN("DUPFLG")=0
"RTN","XDRDMAIN",77,0)
 I $D(^VA(15,"AFR",$P(XDRGL,U,2),XDRCD2)) G CHECKX
"RTN","XDRDMAIN",78,0)
 S XDRDPAIR=$S(XDRCD<XDRCD2:XDRCD_U_XDRCD2,1:XDRCD2_U_XDRCD)
"RTN","XDRDMAIN",79,0)
 F XDRDI="APOT","ANOT","AVDUP" I $D(^VA(15,XDRDI,$P(XDRGL,U,2),XDRDPAIR)) S:XDRDTYPE'="NEW" XDRDMAIN("DUPFLG")=1 D:XDRDTYPE="NEW" DIK
"RTN","XDRDMAIN",80,0)
 K XDRDI,XDRDPAIR
"RTN","XDRDMAIN",81,0)
 D:'XDRDMAIN("DUPFLG") ^XDRDUP
"RTN","XDRDMAIN",82,0)
CHECKX ;
"RTN","XDRDMAIN",83,0)
 Q
"RTN","XDRDMAIN",84,0)
DIK ;
"RTN","XDRDMAIN",85,0)
 ; If a new search type deletes any verified non-duplicates or potential
"RTN","XDRDMAIN",86,0)
 ; duplicate entries involving the two records.
"RTN","XDRDMAIN",87,0)
 S DA=$O(^VA(15,XDRDI,$P(XDRGL,U,2),XDRDPAIR,0)),DIK="^VA(15,"
"RTN","XDRDMAIN",88,0)
 D ^DIK K DIK,DA
"RTN","XDRDMAIN",89,0)
 Q
"RTN","XDRDMAIN",90,0)
COUNT ;
"RTN","XDRDMAIN",91,0)
 S XDRDCNT=XDRDCNT+1
"RTN","XDRDMAIN",92,0)
 S DIE="^VA(15.1,",DA=XDRFL,DR=".07////"_XDRDCNT_";.08////"_XDRCD
"RTN","XDRDMAIN",93,0)
 D ^DIE K DIE,DR,DA,D0
"RTN","XDRDMAIN",94,0)
 Q
"RTN","XDRDMAIN",95,0)
COMPLETE ;
"RTN","XDRDMAIN",96,0)
 N DIE,DA,DR,%,X,Y
"RTN","XDRDMAIN",97,0)
 S DIE="^VA(15.1,",DA=XDRFL
"RTN","XDRDMAIN",98,0)
 S DR=$S($D(XDRQERR):".02////e",XDRQFLG:".02////h",1:".02////c")
"RTN","XDRDMAIN",99,0)
 D NOW^%DTC
"RTN","XDRDMAIN",100,0)
 S DR=DR_";.04////"_%
"RTN","XDRDMAIN",101,0)
 S DR=DR_";.1////"_($P(^VA(15.1,XDRFL,0),U,10)+$$FMDIFF^XLFDT(%,$P(^(0),U,3),2))
"RTN","XDRDMAIN",102,0)
 D ^DIE
"RTN","XDRDMAIN",103,0)
 S $P(^VA(15.1,XDRFL,3),U)=""
"RTN","XDRDMAIN",104,0)
 I $D(XDREMSG) S ^XTMP("XDRERR",XDRFL)=XDREMSG
"RTN","XDRDMAIN",105,0)
 Q
"RTN","XDRDMAIN",106,0)
EOJ ;
"RTN","XDRDMAIN",107,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XDRDMAIN",108,0)
 K XDRDSCOR,XDRDTEST,XDRDMAIN,XDRD,XDRDCNT,XDRCD,XDRCD2,XDRDTYPE
"RTN","XDRDMAIN",109,0)
 K XDRFL,XDRGL,XDRDPDTI,XDRDPAIR,XDRQFLG,XDRDTYPE,XDRDNSTA
"RTN","XDRDMAIN",110,0)
 Q
"RTN","XDRDPICK")
0^12^B75940679
"RTN","XDRDPICK",1,0)
XDRDPICK ;SF-IRMFO.SEA/JLI - SELECT A PAIR OF POTENTIAL DUPLICATES AND VIEW ;4/6/98  09:38
"RTN","XDRDPICK",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDPICK",3,0)
 ;;
"RTN","XDRDPICK",4,0)
EN ;
"RTN","XDRDPICK",5,0)
 N XDRFL,CMORS1,CMORS2,D0,DA,DIC,DIE,DIR,ICNT,ICNT1,JCNT,LCNT,NCNT,PNCT,TMPGLA,TMPGLB,XDRDA,XDRFILN,XDRGLB,Y
"RTN","XDRDPICK",6,0)
 ; D EN^XDRVCHEK
"RTN","XDRDPICK",7,0)
 S XDRFL=$$FILE() Q:XDRFL'>0  S XDRGLB=$P(^DIC(XDRFL,0,"GL"),U,2),XDRFILN=$P(^DIC(XDRFL,0),U)
"RTN","XDRDPICK",8,0)
LOOP ;
"RTN","XDRDPICK",9,0)
 W !!!,"At the following prompt select a POTENTIAL DUPLICATE ENTRY.  If a selection"
"RTN","XDRDPICK",10,0)
 W !,"is not made, you will be given a chance to select from a list if you"
"RTN","XDRDPICK",11,0)
 W !,"want to.  Otherwise, you will be returned to the menu system."
"RTN","XDRDPICK",12,0)
 W !
"RTN","XDRDPICK",13,0)
 S Y=$$LOOKUP^XDRDEDT(XDRFL)
"RTN","XDRDPICK",14,0)
 S XDRDA=+Y I Y>0 D SHOW G LOOP
"RTN","XDRDPICK",15,0)
 S DIR(0)="Y"
"RTN","XDRDPICK",16,0)
 S DIR("A")="Do you want to select from a list of potential duplicates"
"RTN","XDRDPICK",17,0)
 S DIR("B")="YES"
"RTN","XDRDPICK",18,0)
 D ^DIR K DIR Q:Y'>0
"RTN","XDRDPICK",19,0)
 S TMPGLB=$NA(^TMP("XDRDPICK",$J)),TMPGLA=$NA(^TMP("XDRDPICA",$J))
"RTN","XDRDPICK",20,0)
 K @TMPGLB,@TMPGLA
"RTN","XDRDPICK",21,0)
 D ASK
"RTN","XDRDPICK",22,0)
 I XDRDA>0 G LOOP
"RTN","XDRDPICK",23,0)
 K PCNT
"RTN","XDRDPICK",24,0)
 Q
"RTN","XDRDPICK",25,0)
 ;
"RTN","XDRDPICK",26,0)
GETLIST ;
"RTN","XDRDPICK",27,0)
 I XDRGLB="DPT(",$O(^DPT("ACMORS",0))>0 D CMORS Q
"RTN","XDRDPICK",28,0)
 N FLG
"RTN","XDRDPICK",29,0)
 F ICNT=ICNT:0 S ICNT=$O(^VA(15,ICNT)) Q:ICNT'>0  S X=^(ICNT,0) D  Q:'(NCNT#4)&(NCNT>0)&FLG
"RTN","XDRDPICK",30,0)
 . S FLG=1 ;This flag is when NCNT is set from previous call and STATUS is not "P" the first time- - so loop will not quit with (NCNT#4)
"RTN","XDRDPICK",31,0)
 . I $P(X,U,3)'="P" S:PCNT=NCNT FLG=0 Q
"RTN","XDRDPICK",32,0)
 . I $P($P(X,U),";",2)'=XDRGLB Q
"RTN","XDRDPICK",33,0)
 . S NCNT=NCNT+1,X1=+$P(X,U),X2=+$P(X,U,2)
"RTN","XDRDPICK",34,0)
 . I '($D(@(U_XDRGLB_X1_",0)"))#2)!'($D(@(U_XDRGLB_X2_",0)"))#2) S NCNT=NCNT-1 Q
"RTN","XDRDPICK",35,0)
 . S @TMPGLB@(NCNT)=ICNT_U_X1_U_X2
"RTN","XDRDPICK",36,0)
 . S @TMPGLB@(NCNT,1)=@(U_XDRGLB_X1_",0)")
"RTN","XDRDPICK",37,0)
 . S @TMPGLB@(NCNT,2)=@(U_XDRGLB_X2_",0)")
"RTN","XDRDPICK",38,0)
 Q
"RTN","XDRDPICK",39,0)
 ;
"RTN","XDRDPICK",40,0)
ASK ;
"RTN","XDRDPICK",41,0)
 S NCNT=0,ICNT=0,ICNT1=0,JCNT=0,XDRDA=0,PCNT=0
"RTN","XDRDPICK",42,0)
 F  D  D CHEK Q:XDRDA'=0  Q:JCNT'>0
"RTN","XDRDPICK",43,0)
 . D GETLIST
"RTN","XDRDPICK",44,0)
 . S PCNT=NCNT
"RTN","XDRDPICK",45,0)
 . F JCNT=JCNT:0 S JCNT=$O(@TMPGLB@(JCNT)) Q:JCNT'>0  D  Q:'(JCNT#4)
"RTN","XDRDPICK",46,0)
 . . W !!!,$J(JCNT,5),".  ",@TMPGLB@(JCNT,1)
"RTN","XDRDPICK",47,0)
 . . W !,?8,@TMPGLB@(JCNT,2)
"RTN","XDRDPICK",48,0)
 I XDRDA>0 S XDRDA=+@TMPGLB@(XDRDA) D SHOW
"RTN","XDRDPICK",49,0)
 Q
"RTN","XDRDPICK",50,0)
 ;
"RTN","XDRDPICK",51,0)
CHEK ;
"RTN","XDRDPICK",52,0)
 W !
"RTN","XDRDPICK",53,0)
 I JCNT'>0 S DIR(0)="N"
"RTN","XDRDPICK",54,0)
 E  S DIR(0)="NO",DIR("A",1)="Enter Return to continue listing or"
"RTN","XDRDPICK",55,0)
 S DIR("A")="Select the desired entry by number"
"RTN","XDRDPICK",56,0)
 S DIR(0)=DIR(0)_"^1:"_NCNT
"RTN","XDRDPICK",57,0)
 D ^DIR K DIR
"RTN","XDRDPICK",58,0)
 I Y>0 S XDRDA=+Y
"RTN","XDRDPICK",59,0)
 I $D(DUOUT)!$D(DTOUT) S XDRDA=-1 K DTOUT,DUOUT
"RTN","XDRDPICK",60,0)
 K DIRUT
"RTN","XDRDPICK",61,0)
 Q
"RTN","XDRDPICK",62,0)
 ;
"RTN","XDRDPICK",63,0)
SHOW ;
"RTN","XDRDPICK",64,0)
 ;L +^VA(15,+XDRDA,0):30 I '$T G BUSY
"RTN","XDRDPICK",65,0)
 ;I $P(^VA(15,+XDRDA,0),U,3)'="P" L -^VA(15,+XDRDA,0) G BUSY ; NOT AVAILABLE
"RTN","XDRDPICK",66,0)
 ;N XDRXX S XDRXX(15,(+XDRDA)_",",.03)="X"
"RTN","XDRDPICK",67,0)
 ;D FILE^DIE("","XDRXX")
"RTN","XDRDPICK",68,0)
 ;L -^VA(15,+XDRDA,0)
"RTN","XDRDPICK",69,0)
 I '$D(XDRGLB) N XDRGLB S XDRGLB=$P($P(^VA(15,XDRDA,0),U),";",2)
"RTN","XDRDPICK",70,0)
 I $D(@(XDRGLB_(+^VA(15,XDRDA,0))_",-9)"))!$D(@(XDRGLB_(+$P(^VA(15,XDRDA,0),U,2))_",-9)")) W !,$C(7),"One of these entries has already been merged.  Pick another pair.",!! D RESET(XDRDA) Q
"RTN","XDRDPICK",71,0)
 S XQAID=""
"RTN","XDRDPICK",72,0)
 S X=^VA(15,+XDRDA,0)
"RTN","XDRDPICK",73,0)
 S X1=+X,X2=+$P(X,U,2)
"RTN","XDRDPICK",74,0)
 I $$COUNT^XDRRMRG2(XDRFL,X1,X2)>1 S X1=X2,X2=+X
"RTN","XDRDPICK",75,0)
 S XQADATA=XDRDA_U_X1_";"_X2_U_"PRIMARY"_U_XDRFL
"RTN","XDRDPICK",76,0)
 D ^XDRRMRG1
"RTN","XDRDPICK",77,0)
 S DA=$$FIND1^DIC(15.02,","_XDRDA_",","X","PRIMARY")
"RTN","XDRDPICK",78,0)
 I DA>0 D
"RTN","XDRDPICK",79,0)
 . S X=$P(^VA(15,XDRDA,0),U,3)
"RTN","XDRDPICK",80,0)
 . I X="N"!(X="V") Q
"RTN","XDRDPICK",81,0)
 . S X=^VA(15,XDRDA,2,DA,0)
"RTN","XDRDPICK",82,0)
 . I $P(X,U,2)="V" D
"RTN","XDRDPICK",83,0)
 . . S DR=".03///X;.1///"_DT_";"
"RTN","XDRDPICK",84,0)
 . . S DIE="^VA(15,",DA=XDRDA D ^DIE K DIE,DR
"RTN","XDRDPICK",85,0)
 . . D SETUP^XDRRMRG1(XDRDA)
"RTN","XDRDPICK",86,0)
 . . D CHEKVER^XDRRMRG1
"RTN","XDRDPICK",87,0)
 Q
"RTN","XDRDPICK",88,0)
 ;
"RTN","XDRDPICK",89,0)
BUSY ;
"RTN","XDRDPICK",90,0)
 W !!,$C(7),"Record is being processed by someone else.",!!
"RTN","XDRDPICK",91,0)
 Q
"RTN","XDRDPICK",92,0)
 ;
"RTN","XDRDPICK",93,0)
FILE() ;
"RTN","XDRDPICK",94,0)
 N X
"RTN","XDRDPICK",95,0)
 S X=0
"RTN","XDRDPICK",96,0)
 F I=0:0 S I=$O(^VA(15.1,I)) Q:I'>0  S X=X+1,X(I)=""
"RTN","XDRDPICK",97,0)
 I X=1 Q $O(X(""))
"RTN","XDRDPICK",98,0)
 K DIC S DIC=15.1,DIC(0)="AEQM",DIC("A")="Which FILE are the potential duplicates in (e.g., PATIENT)? ",DIC("B")="PATIENT" D ^DIC K DIC
"RTN","XDRDPICK",99,0)
 Q +Y
"RTN","XDRDPICK",100,0)
 ;
"RTN","XDRDPICK",101,0)
CMORS ; RETURN DATA RANKED BY CMORS (HIGH VALUES FIRST)
"RTN","XDRDPICK",102,0)
 I '$D(^VA(15,"ACMORS")) D SETCMOR
"RTN","XDRDPICK",103,0)
 I $G(^VA(15,"ACMORS",0))'>0 D SETCMOR
"RTN","XDRDPICK",104,0)
 I $G(^VA(15,"ACMORS",0))>0,$$FMDIFF^XLFDT(DT,^(0))>7 D ASKCMOR
"RTN","XDRDPICK",105,0)
 I ICNT1>0 S ICNT=ICNT-1
"RTN","XDRDPICK",106,0)
 S LCNT=0
"RTN","XDRDPICK",107,0)
 F ICNT=ICNT:0 S ICNT=$O(^VA(15,"ACMORS",ICNT)) Q:ICNT'>0  D  Q:('(NCNT#4))&(LCNT>0)
"RTN","XDRDPICK",108,0)
 . F ICNT1=+ICNT1:0 S ICNT1=$O(^VA(15,"ACMORS",ICNT,ICNT1)) Q:ICNT1'>0  D  Q:('(NCNT#4))&(LCNT>0)
"RTN","XDRDPICK",109,0)
 . . S X=$G(^VA(15,ICNT1,0)) Q:X=""  Q:$P(X,U,3)'="P"  S X1=+X,X2=+$P(X,U,2)
"RTN","XDRDPICK",110,0)
 . . I $D(@TMPGLA@(X1,X2)) Q
"RTN","XDRDPICK",111,0)
 . . S @TMPGLA@(X1,X2)=""
"RTN","XDRDPICK",112,0)
 . . S NCNT=NCNT+1,LCNT=LCNT+1
"RTN","XDRDPICK",113,0)
 . . S @TMPGLB@(NCNT)=ICNT1_U_X1_U_X2
"RTN","XDRDPICK",114,0)
 . . S CMORS1=$P($G(^DPT(X1,"MPI")),U,6),CMORS2=$P($G(^DPT(X2,"MPI")),U,6)
"RTN","XDRDPICK",115,0)
 . . S @TMPGLB@(NCNT,1)=@(U_XDRGLB_X1_",0)")_" (CMOR SCORE = "_$S(CMORS1="":"NULL",1:CMORS1)_")"
"RTN","XDRDPICK",116,0)
 . . S @TMPGLB@(NCNT,2)=@(U_XDRGLB_X2_",0)")_" (CMOR SCORE = "_$S(CMORS2="":"NULL",1:CMORS2)_")"
"RTN","XDRDPICK",117,0)
 Q
"RTN","XDRDPICK",118,0)
 ;
"RTN","XDRDPICK",119,0)
SETCMOR ;
"RTN","XDRDPICK",120,0)
 N I,X,X1,X2,SCOR
"RTN","XDRDPICK",121,0)
 K ^VA(15,"ACMORS")
"RTN","XDRDPICK",122,0)
 F I=0:0 S I=$O(^VA(15,I)) Q:I'>0  S X=^(I,0) D
"RTN","XDRDPICK",123,0)
 . I $P(X,U,3)'="P" Q
"RTN","XDRDPICK",124,0)
 . I $P($P(X,U),";",2)'="DPT(" Q
"RTN","XDRDPICK",125,0)
 . S X1=+X,X2=+$P(X,U,2)
"RTN","XDRDPICK",126,0)
 . S SCOR=$P($G(^DPT(X1,"MPI")),U,6) I SCOR'>0 S SCOR=0
"RTN","XDRDPICK",127,0)
 . S ^VA(15,"ACMORS",(9999999-SCOR),I)=""
"RTN","XDRDPICK",128,0)
 . S SCOR=$P($G(^DPT(X2,"MPI")),U,6) I SCOR'>0 S SCOR=0
"RTN","XDRDPICK",129,0)
 . S ^VA(15,"ACMORS",(9999999-SCOR),I)=""
"RTN","XDRDPICK",130,0)
 S ^VA(15,"ACMORS",0)=DT
"RTN","XDRDPICK",131,0)
 Q
"RTN","XDRDPICK",132,0)
 ;
"RTN","XDRDPICK",133,0)
ASKCMOR ;
"RTN","XDRDPICK",134,0)
 N DIR
"RTN","XDRDPICK",135,0)
 S DIR(0)="Y",DIR("A")="The CMOR scores for activity haven't been checked recently.  Do you want to update these (It might take a couple of minutes)"
"RTN","XDRDPICK",136,0)
 S DIR("B")="YES"
"RTN","XDRDPICK",137,0)
 D ^DIR I Y>0 D SETCMOR
"RTN","XDRDPICK",138,0)
 Q
"RTN","XDRDPICK",139,0)
 ;
"RTN","XDRDPICK",140,0)
SET1 ; HANDLES SETTING OF X-REF ON CMOR SCORES FOR POTENTIAL DUPLICATES
"RTN","XDRDPICK",141,0)
 I X'="P" Q
"RTN","XDRDPICK",142,0)
 N XDRXVAL,XDRXVAL1
"RTN","XDRDPICK",143,0)
 S XDRXVAL=^VA(15,D0,0)
"RTN","XDRDPICK",144,0)
 I $P($P(XDRXVAL,U),";",2)'="DPT(" Q
"RTN","XDRDPICK",145,0)
 S XDRXVAL1=$P($G(^DPT(+XDRXVAL,"MPI")),U,6) I XDRXVAL1="" S XDRXVAL1=-1
"RTN","XDRDPICK",146,0)
 S ^VA(15,"ACMORS",(9999999-XDRXVAL1),D0)=""
"RTN","XDRDPICK",147,0)
 S XDRXVAL1=$P($G(^DPT(+$P(XDRXVAL,U,2),"MPI")),U,6) I XDRXVAL1="" S XDRXVAL1=-1
"RTN","XDRDPICK",148,0)
 S ^VA(15,"ACMORS",(9999999-XDRXVAL1),D0)=""
"RTN","XDRDPICK",149,0)
 Q
"RTN","XDRDPICK",150,0)
 ;
"RTN","XDRDPICK",151,0)
KILL1 ; HANDLES KILLING OF X-REF ON CMOR SCORES FOR POTENTIAL DUPLICATES
"RTN","XDRDPICK",152,0)
 I X'="P" Q
"RTN","XDRDPICK",153,0)
 N XDRXVAL,XDRXVAL1
"RTN","XDRDPICK",154,0)
 S XDRXVAL=^VA(15,D0,0)
"RTN","XDRDPICK",155,0)
 I $P($P(XDRXVAL,U),";",2)'="DPT(" Q
"RTN","XDRDPICK",156,0)
 S XDRXVAL1=+$P($G(^DPT(+XDRXVAL,"MPI")),U,6) I XDRXVAL1="" S XDRXVAL1=-1
"RTN","XDRDPICK",157,0)
 K ^VA(15,"ACMORS",(9999999-XDRXVAL1),D0)
"RTN","XDRDPICK",158,0)
 S XDRXVAL1=+$P($G(^DPT(+$P(XDRXVAL,U,2),"MPI")),U,6) I XDRXVAL1="" S XDRXVAL1=-1
"RTN","XDRDPICK",159,0)
 K ^VA(15,"ACMORS",(9999999-XDRXVAL1),D0)
"RTN","XDRDPICK",160,0)
 Q
"RTN","XDRDPICK",161,0)
 ;
"RTN","XDRDPICK",162,0)
OTHERS ; CHECKS AND MARKS OTHER PAIRS SO ONLY ONE CAN BE PROCESSED AT A TIME
"RTN","XDRDPICK",163,0)
 Q  ; NOT USED CURRENTLY
"RTN","XDRDPICK",164,0)
 ;
"RTN","XDRDPICK",165,0)
 ;   P   CLEAR ALL RELATED
"RTN","XDRDPICK",166,0)
 ;
"RTN","XDRDPICK",167,0)
 ;   X   MARK ALL RELATED
"RTN","XDRDPICK",168,0)
 ;
"RTN","XDRDPICK",169,0)
 ;   V   CLEAR TO
"RTN","XDRDPICK",170,0)
 ;
"RTN","XDRDPICK",171,0)
 ;   O   NOTHING
"RTN","XDRDPICK",172,0)
 ;
"RTN","XDRDPICK",173,0)
 ;   R   MARK ALL RELATED
"RTN","XDRDPICK",174,0)
 ;
"RTN","XDRDPICK",175,0)
 ;  MERGED  CLEAR TO   REALIGN FROM
"RTN","XDRDPICK",176,0)
 I X="O" Q
"RTN","XDRDPICK",177,0)
 N OLDDA,OLDX S OLDDA=DA,OLDX=X N DA,X
"RTN","XDRDPICK",178,0)
 N XDRENTR,IENVAL,XDRPAIR,DONE,XDR0,STATUS,DIREC
"RTN","XDRDPICK",179,0)
 I $D(XDROTHER) Q
"RTN","XDRDPICK",180,0)
 N XDROTHER S XDROTHER=1
"RTN","XDRDPICK",181,0)
 I OLDX="P"!(OLDX="N") D  Q
"RTN","XDRDPICK",182,0)
 . F XDRENTR=$P(^VA(15,OLDDA,0),U),$P(^VA(15,OLDDA,0),U,2) F IENVAL=0:0 S IENVAL=$O(^VA(15,"B",XDRENTR,IENVAL)) Q:IENVAL'>0  I IENVAL'=OLDDA,$P(^VA(15,IENVAL,0),U,3)="O" D
"RTN","XDRDPICK",183,0)
 . . ; Have to check on whether the other member of the pair in process as well.
"RTN","XDRDPICK",184,0)
 . . S XDRPAIR=$P(^VA(15,IENVAL,0),U) IF XDRPAIR=XDRENTR S XDRPAIR=$P(^(0),U,2)
"RTN","XDRDPICK",185,0)
 . . S DONE=0 F IENPAIR=0:0 S IENPAIR=$O(^VA(15,"B",XDRPAIR,IENPAIR)) Q:IENPAIR'>0  I IENPAIR'=IENVAL D  Q:DONE
"RTN","XDRDPICK",186,0)
 . . . S XDR0=^VA(15,IENPAIR,0)
"RTN","XDRDPICK",187,0)
 . . . S STATUS=$P(XDR0,U,3)
"RTN","XDRDPICK",188,0)
 . . . I STATUS="X"!(STATUS="R") S DONE=1 Q
"RTN","XDRDPICK",189,0)
 . . . I STATUS="V" D  Q:DONE
"RTN","XDRDPICK",190,0)
 . . . . S DIREC=$P(XDR0,U,4)
"RTN","XDRDPICK",191,0)
 . . . . I $P(XDR0,U,DIREC)=XDRPAIR S DONE=1 Q  ; IT IS THE 'FROM' ENTRY
"RTN","XDRDPICK",192,0)
 . . . . Q
"RTN","XDRDPICK",193,0)
 . . . Q
"RTN","XDRDPICK",194,0)
 . . D RESET(IENVAL)
"RTN","XDRDPICK",195,0)
 . . Q
"RTN","XDRDPICK",196,0)
 . Q
"RTN","XDRDPICK",197,0)
 I OLDX="X"!(OLDX="R") D  Q
"RTN","XDRDPICK",198,0)
 . F XDRENTR=$P(^VA(15,OLDDA,0),U),$P(^VA(15,OLDDA,0),U,2) F IENVAL=0:0 S IENVAL=$O(^VA(15,"B",XDRENTR,IENVAL)) Q:IENVAL'>0  I IENVAL'=OLDDA,$P(^VA(15,IENVAL,0),U,3)="P" D
"RTN","XDRDPICK",199,0)
 . . N XDRXX S XDRXX(15,IENVAL_",",.03)="O"
"RTN","XDRDPICK",200,0)
 . . D FILE^DIE("","XDRXX")
"RTN","XDRDPICK",201,0)
 . Q
"RTN","XDRDPICK",202,0)
 I OLDX="V"&$D(XDRDADJX) D  Q  ; IF MERGED (XDRDADJX IS SET IN XDRDAJD AND IS RUN BY A CROSS-REFERENCE FOR MERGE STATUS SET TO 'MERGED')
"RTN","XDRDPICK",203,0)
 . F XDRENTR=$P(^VA(15,OLDDA,0),U),$P(^VA(15,OLDDA,0),U,2) D
"RTN","XDRDPICK",204,0)
 . . S DIREC=$P(^VA(15,OLDDA,0),U,4)
"RTN","XDRDPICK",205,0)
 . . F IENVAL=0:0 S IENVAL=$O(^VA(15,"B",XDRENTR,IENVAL)) Q:IENVAL'>0  I IENVAL'=OLDDA,$P(^VA(15,IENVAL,0),U,3)="O" D
"RTN","XDRDPICK",206,0)
 . . . ; Have to check on whether the other member of the pair in process as well.
"RTN","XDRDPICK",207,0)
 . . . S XDRPAIR=$P(^VA(15,IENVAL,0),U) IF XDRPAIR=XDRENTR S XDRPAIR=$P(^(0),U,2)
"RTN","XDRDPICK",208,0)
 . . . S DONE=0 F IENPAIR=0:0 S IENPAIR=$O(^VA(15,"B",XDRPAIR,IENPAIR)) Q:IENPAIR'>0  I IENPAIR'=IENVAL D  Q:DONE
"RTN","XDRDPICK",209,0)
 . . . . S XDR0=^VA(15,IENPAIR,0)
"RTN","XDRDPICK",210,0)
 . . . . S STATUS=$P(XDR0,U,3)
"RTN","XDRDPICK",211,0)
 . . . . I STATUS="X"!(STATUS="R") S DONE=1 Q
"RTN","XDRDPICK",212,0)
 . . . . I STATUS="V" D  Q:DONE
"RTN","XDRDPICK",213,0)
 . . . . . S DIREC=$P(XDR0,U,4)
"RTN","XDRDPICK",214,0)
 . . . . . I $P(XDR0,U,DIREC)=XDRPAIR S DONE=1 Q  ; IT IS THE 'FROM' ENTRY
"RTN","XDRDPICK",215,0)
 . . . . . Q
"RTN","XDRDPICK",216,0)
 . . . . Q
"RTN","XDRDPICK",217,0)
 . . . D RESET(IENVAL) ; RESET TO "P"
"RTN","XDRDPICK",218,0)
 . . . Q
"RTN","XDRDPICK",219,0)
 . . Q
"RTN","XDRDPICK",220,0)
 . Q
"RTN","XDRDPICK",221,0)
 Q
"RTN","XDRDPICK",222,0)
 ;
"RTN","XDRDPICK",223,0)
RESET(DA) ;
"RTN","XDRDPICK",224,0)
 N XDRXX,IENS,X
"RTN","XDRDPICK",225,0)
 I $P(^VA(15,DA,0),U,5)>1 Q
"RTN","XDRDPICK",226,0)
 D NAME^XDRDEDT(DA)
"RTN","XDRDPICK",227,0)
 S X=^VA(15,DA,0)
"RTN","XDRDPICK",228,0)
 S IENS=DA_","
"RTN","XDRDPICK",229,0)
 S XDRXX(15,IENS,.03)="P"
"RTN","XDRDPICK",230,0)
 I $P(X,U,4)'="" S XDRXX(15,IENS,.04)="@"
"RTN","XDRDPICK",231,0)
 I $P(X,U,5)'="" S XDRXX(15,IENS,.05)="@"
"RTN","XDRDPICK",232,0)
 I $P(X,U,7)'="" S XDRXX(15,IENS,.07)="@"
"RTN","XDRDPICK",233,0)
 I $P(X,U,8)'="" S XDRXX(15,IENS,.08)="@"
"RTN","XDRDPICK",234,0)
 I $P(X,U,10)'="" S XDRXX(15,IENS,.1)="@"
"RTN","XDRDPICK",235,0)
 I $P(X,U,13)'="" S XDRXX(15,IENS,.13)="@"
"RTN","XDRDPICK",236,0)
 I $P(X,U,14)'="" S XDRXX(15,IENS,.14)="@"
"RTN","XDRDPICK",237,0)
 D FILE^DIE("","XDRXX")
"RTN","XDRDPICK",238,0)
 S:$D(DUZ) $P(^VA(15,DA,0),U,12)=DUZ
"RTN","XDRDPICK",239,0)
 K ^VA(15,DA,2)
"RTN","XDRDPICK",240,0)
 K ^VA(15,DA,3)
"RTN","XDRDPICK",241,0)
 Q
"RTN","XDRDPRE1")
0^13^B12673607
"RTN","XDRDPRE1",1,0)
XDRDPRE1 ;SF-IRMFO.SEA/JLI - GENERATE LISTS OF PATIENTS IDENTIFIED BY THE PRELIMINARY SCAN ;
"RTN","XDRDPRE1",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDPRE1",3,0)
 ;;
"RTN","XDRDPRE1",4,0)
EN ;
"RTN","XDRDPRE1",5,0)
 S XDRFL=+$$FILE^XDRDPICK() G:XDRFL'>0 EXIT S XDRFNAM=$P(^DIC(XDRFL,0),U)
"RTN","XDRDPRE1",6,0)
 I '$D(^XTMP("XDRDPREL",XDRFL," DONE")) D  Q:XDRFL=0
"RTN","XDRDPRE1",7,0)
 . I $D(^XTMP("XDRDPREL",XDRFL," TIME")) D  Q:XDRFL=0
"RTN","XDRDPRE1",8,0)
 . . I $$HDIFF^XLFDT($H,^XTMP("XDRDPREL",XDRFL," TIME"),2)>300 Q
"RTN","XDRDPRE1",9,0)
 . . W !!,"There appears to be a job already running.  You may either"
"RTN","XDRDPRE1",10,0)
 . . W !,"view those data or check back in about 5 minutes.",!!
"RTN","XDRDPRE1",11,0)
 . . S XDRFL=0
"RTN","XDRDPRE1",12,0)
 . W !!,$C(7),"There is no available data to generate a list from.  You will need to accumulate",!,"the data.",!!
"RTN","XDRDPRE1",13,0)
 . D ^XDRDPREL
"RTN","XDRDPRE1",14,0)
 . S XDRFL=0
"RTN","XDRDPRE1",15,0)
 D SELECT I XDRSELEC="" Q
"RTN","XDRDPRE1",16,0)
 S %ZIS="Q" D ^%ZIS Q:POP
"RTN","XDRDPRE1",17,0)
 I $D(IO("Q")) S ZTSAVE("XDRFL")="",ZTSAVE("XDRSELEC")="",ZTIO=ION,ZTRTN="DQ^XDRDPRE1",ZTDESC="XDRDPRE1 LIST OF PROBLEMS" D ^%ZTLOAD W:$D(ZTSK) !,"Queued as task "_ZTSK,! Q
"RTN","XDRDPRE1",18,0)
 ;
"RTN","XDRDPRE1",19,0)
DQ ;
"RTN","XDRDPRE1",20,0)
 U IO W @IOF
"RTN","XDRDPRE1",21,0)
 S XDRTMP="^XTMP(""XDRDPREL"",XDRFL,XDRSELEC,XDRDA)"
"RTN","XDRDPRE1",22,0)
 S XDRGLB=^DIC(XDRFL,0,"GL")_"XDRDA)"
"RTN","XDRDPRE1",23,0)
 S XDRDR=".01;"
"RTN","XDRDPRE1",24,0)
 F XDRI=0:0 S XDRI=$O(^DD(XDRFL,0,"ID",XDRI)) Q:XDRI'>0  S XDRDR=XDRDR_XDRI_";"
"RTN","XDRDPRE1",25,0)
 I XDRSELEC'="NO ZERO NODE" D SIZE
"RTN","XDRDPRE1",26,0)
 D HEADER
"RTN","XDRDPRE1",27,0)
 F XDRDA=0:0 S XDRDA=$O(@XDRTMP) Q:XDRDA'>0  D  Q:$D(DIRUT)
"RTN","XDRDPRE1",28,0)
 . I (IOSL-$Y)<6 D:IOST["C-"  Q:$D(DIRUT)  W @IOF,!!
"RTN","XDRDPRE1",29,0)
 . . W ! S DIR(0)="E" D ^DIR
"RTN","XDRDPRE1",30,0)
 . W !,$J(XDRDA,10)
"RTN","XDRDPRE1",31,0)
 . I XDRSELEC="NO ZERO NODE" Q
"RTN","XDRDPRE1",32,0)
 . S DR=XDRDR
"RTN","XDRDPRE1",33,0)
 . S DA=XDRDA,DIC=XDRFL,DIQ(0)="I",DIQ="XDRX" K XDRX
"RTN","XDRDPRE1",34,0)
 . D EN^DIQ1
"RTN","XDRDPRE1",35,0)
 . S X=XDRX(XDRFL,XDRDA,.01,"I")
"RTN","XDRDPRE1",36,0)
 . F  Q:X'["MERGING INTO"  S X=$P(X,"(",2,99),X=$E(X,1,$L(X)-1)
"RTN","XDRDPRE1",37,0)
 . W "  ",$E(X,1,28),?40
"RTN","XDRDPRE1",38,0)
 . F I=0:0 S I=$O(XDRX(XDRFL,XDRDA,I)) Q:I'>0  I I'=.01 D
"RTN","XDRDPRE1",39,0)
 . . S Y=$P(^DD(XDRFL,I,0),U,2)
"RTN","XDRDPRE1",40,0)
 . . S X=XDRX(XDRFL,XDRDA,I,"I")
"RTN","XDRDPRE1",41,0)
 . . I Y["D" S N=10 I X'="" S X=$$FMTE^XLFDT(X,"2D")
"RTN","XDRDPRE1",42,0)
 . . I Y'["D",$D(NSIZE(I)) S N=NSIZE(I)+2 W $J(X,N)
"RTN","XDRDPRE1",43,0)
 . .; W $J(X,N)
"RTN","XDRDPRE1",44,0)
 D ^%ZISC
"RTN","XDRDPRE1",45,0)
 Q
"RTN","XDRDPRE1",46,0)
 ;
"RTN","XDRDPRE1",47,0)
SIZE ;
"RTN","XDRDPRE1",48,0)
 N XDRDA,NC,DR,DA,DIC,DIQ,I,L
"RTN","XDRDPRE1",49,0)
 S NC=0
"RTN","XDRDPRE1",50,0)
 F XDRDA=0:0 S XDRDA=$O(@XDRGLB) Q:XDRDA'>0  S NC=NC+1 Q:NC>50  D
"RTN","XDRDPRE1",51,0)
 . S DR=XDRDR
"RTN","XDRDPRE1",52,0)
 . S DA=XDRDA,DIC=XDRFL,DIQ(0)="I",DIQ="XDRX" K XDRX
"RTN","XDRDPRE1",53,0)
 . D EN^DIQ1
"RTN","XDRDPRE1",54,0)
 . F I=0:0 S I=$O(XDRX(XDRFL,XDRDA,I)) Q:I'>0  D
"RTN","XDRDPRE1",55,0)
 . . S L=$L(XDRX(XDRFL,XDRDA,I,"I")) I L>$G(NSIZE(I)) S NSIZE(I)=L
"RTN","XDRDPRE1",56,0)
 Q
"RTN","XDRDPRE1",57,0)
 ;
"RTN","XDRDPRE1",58,0)
HEADER ;
"RTN","XDRDPRE1",59,0)
 W "LISTING OF ENTRIES IN FILE ",XDRFL," WITH IDENTIFIER OR OTHER PROBLEMS"
"RTN","XDRDPRE1",60,0)
 W ?10,"SELECTED LISTING: ",XDRSELEC
"RTN","XDRDPRE1",61,0)
 W !!!,"DATA LISTED ACROSS THE PAGE IN THE FOLLOWING ORDER:",!!,"INTERNAL ENTRY NUMBER"
"RTN","XDRDPRE1",62,0)
 I XDRSELEC="NO ZERO NODE" W !! Q
"RTN","XDRDPRE1",63,0)
 F I=0:0 S I=$O(NSIZE(I)) Q:I'>0  W !,$P(^DD(XDRFL,I,0),U)
"RTN","XDRDPRE1",64,0)
 W !!,"XXXXXXXXXX  XXXXXXXXXXXXXXXXXXXXXXXXXXX",?40
"RTN","XDRDPRE1",65,0)
 F I=.01:0 S I=$O(NSIZE(I)) Q:I'>0  D
"RTN","XDRDPRE1",66,0)
 . S X=$P(^DD(XDRFL,I,0),U,2) I X["D" S NSIZE(I)=8
"RTN","XDRDPRE1",67,0)
 . S X=$E("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",1,NSIZE(I))
"RTN","XDRDPRE1",68,0)
 . W $J(X,NSIZE(I)+2)
"RTN","XDRDPRE1",69,0)
 W !
"RTN","XDRDPRE1",70,0)
 Q
"RTN","XDRDPRE1",71,0)
 ;
"RTN","XDRDPRE1",72,0)
SELECT ;
"RTN","XDRDPRE1",73,0)
 N NC,N,XDRX,I,DIR,Y
"RTN","XDRDPRE1",74,0)
 S NC=0
"RTN","XDRDPRE1",75,0)
 S N="A" F  S N=$O(^XTMP("XDRDPREL",XDRFL,N)) Q:N=""  S NC=NC+1,XDRX(NC)=N
"RTN","XDRDPRE1",76,0)
 W !!,"Enter the number of the desired list to output:",!
"RTN","XDRDPRE1",77,0)
 F I=0:0 S I=$O(XDRX(I)) Q:I'>0  W !,$J(I,2),"  ",XDRX(I)
"RTN","XDRDPRE1",78,0)
 W !! S DIR(0)="N^1:"_NC,DIR("A")="List number" D ^DIR
"RTN","XDRDPRE1",79,0)
 S XDRSELEC=""
"RTN","XDRDPRE1",80,0)
 I Y>0 S XDRSELEC=XDRX(+Y)
"RTN","XDRDPRE1",81,0)
 Q
"RTN","XDRDPRE1",82,0)
 ;
"RTN","XDRDPRE1",83,0)
EXIT ;
"RTN","XDRDPRE1",84,0)
 Q
"RTN","XDRDPREL")
0^14^B14472442
"RTN","XDRDPREL",1,0)
XDRDPREL ;SF-IRMFO.SEA/JLI - PRELIMINARY IDENTIFICATION OF ENTRIES WITH BAD DATA ;9/19/96  09:19
"RTN","XDRDPREL",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDPREL",3,0)
 ;;
"RTN","XDRDPREL",4,0)
 ;;
"RTN","XDRDPREL",5,0)
EN ;
"RTN","XDRDPREL",6,0)
 S XDRFL=+$$FILE^XDRDPICK() G:XDRFL'>0 EXIT S XDRFNAM=$P(^DIC(XDRFL,0),U)
"RTN","XDRDPREL",7,0)
 I $D(^XTMP("XDRDPREL",XDRFL," DONE")) D  Q:XDRFL=0  I 1
"RTN","XDRDPREL",8,0)
 . W !!,"A run was completed on "_$$HTE^XLFDT(^XTMP("XDRDPREL",XDRFL," DONE")),!!
"RTN","XDRDPREL",9,0)
 . S DIR(0)="Y",DIR("A")="Do you want to view those results",DIR("B")="YES" D ^DIR K DIR
"RTN","XDRDPREL",10,0)
 . I Y>0 D
"RTN","XDRDPREL",11,0)
 . . D VIEW(XDRFL)
"RTN","XDRDPREL",12,0)
 . . S XDRFL=0
"RTN","XDRDPREL",13,0)
 E  I $D(^XTMP("XDRDPREL",XDRFL," TIME")) D  Q:XDRFL=0
"RTN","XDRDPREL",14,0)
 . I $$HDIFF^XLFDT($H,^XTMP("XDRDPREL",XDRFL," TIME"),2)>300 Q
"RTN","XDRDPREL",15,0)
 . W !!,"There appears to be a job already running.  You may either"
"RTN","XDRDPREL",16,0)
 . W !,"view those data or check back in about 5 minutes.",!!
"RTN","XDRDPREL",17,0)
 . S DIR(0)="Y",DIR("A")="Do you want to view the running job",DIR("B")="YES" D ^DIR K DIR
"RTN","XDRDPREL",18,0)
 . I Y>0 D VIEW(XDRFL)
"RTN","XDRDPREL",19,0)
 . S XDRFL=0
"RTN","XDRDPREL",20,0)
 S ZTRTN="DQ^XDRDPREL",ZTIO="",ZTSAVE("XDRFL")="",ZTDESC="XDRDPREL - PRELIM SCAN" D ^%ZTLOAD
"RTN","XDRDPREL",21,0)
 I $D(ZTSK) W !!,"Queued as task ",ZTSK,!
"RTN","XDRDPREL",22,0)
 Q
"RTN","XDRDPREL",23,0)
DQ ;
"RTN","XDRDPREL",24,0)
 S XDRGLB=^DIC(XDRFL,0,"GL")_"XDRDA)"
"RTN","XDRDPREL",25,0)
 S XDRDR=""
"RTN","XDRDPREL",26,0)
 F XDRI=0:0 S XDRI=$O(^DD(XDRFL,0,"ID",XDRI)) Q:XDRI'>0  S XDRDR=XDRDR_XDRI_";"
"RTN","XDRDPREL",27,0)
 S XDRTMP="^XTMP(""XDRDPREL"",XDRFL)"
"RTN","XDRDPREL",28,0)
 K @XDRTMP,XDRNV,XDRN S NTOT=0,@XDRTMP@(" TIME")=$H,@XDRTMP@(" START")=$H
"RTN","XDRDPREL",29,0)
 F XDRDA=0:0 S XDRDA=$O(@XDRGLB) Q:XDRDA'>0  D
"RTN","XDRDPREL",30,0)
 . I $D(@XDRGLB@(-9)) Q
"RTN","XDRDPREL",31,0)
 . S @XDRTMP@(" CURR")=XDRDA,^(" TIME")=$H
"RTN","XDRDPREL",32,0)
 . S NTOT=NTOT+1
"RTN","XDRDPREL",33,0)
 . S @XDRTMP@(" TOTAL")=NTOT
"RTN","XDRDPREL",34,0)
 . I '$D(@XDRGLB@(0)) D  Q
"RTN","XDRDPREL",35,0)
 . . S XXX="NO ZERO NODE"
"RTN","XDRDPREL",36,0)
 . . S ^(XXX)=$G(@XDRTMP@(XXX))+1
"RTN","XDRDPREL",37,0)
 . . S @XDRTMP@(XXX,XDRDA)=""
"RTN","XDRDPREL",38,0)
 . I XDRDR'="" D
"RTN","XDRDPREL",39,0)
 . . S DR=XDRDR
"RTN","XDRDPREL",40,0)
 . . S DA=XDRDA,DIC=XDRFL,DIQ(0)="I",DIQ="XDRX" K XDRX
"RTN","XDRDPREL",41,0)
 . . D EN^DIQ1
"RTN","XDRDPREL",42,0)
 . . S N=0
"RTN","XDRDPREL",43,0)
 . . F I=0:0 S I=$O(XDRX(XDRFL,XDRDA,I)) Q:I'>0  D
"RTN","XDRDPREL",44,0)
 . . . I XDRX(XDRFL,XDRDA,I,"I")="" D
"RTN","XDRDPREL",45,0)
 . . . . S N=N+1
"RTN","XDRDPREL",46,0)
 . . . . S XXX="MISSING #"_I
"RTN","XDRDPREL",47,0)
 . . . . S @XDRTMP@(XXX)=$G(@XDRTMP@(XXX))+1
"RTN","XDRDPREL",48,0)
 . . . . S @XDRTMP@(XXX,XDRDA)=""
"RTN","XDRDPREL",49,0)
 . . S XXX=$G(XDRX(XDRFL,XDRDA,$S(XDRFL=2:.09,XDRFL=200:9,1:0),"I"))
"RTN","XDRDPREL",50,0)
 . . I XXX'="" D
"RTN","XDRDPREL",51,0)
 . . . I XXX'?9N.E D
"RTN","XDRDPREL",52,0)
 . . . . S XXX="BAD SSN"
"RTN","XDRDPREL",53,0)
 . . . . S @XDRTMP@(XXX)=$G(@XDRTMP@(XXX))+1
"RTN","XDRDPREL",54,0)
 . . . . S @XDRTMP@(XXX,XDRDA)=""
"RTN","XDRDPREL",55,0)
 . . . . S N=N+1
"RTN","XDRDPREL",56,0)
 . . I N>0 D
"RTN","XDRDPREL",57,0)
 . . . S XXX="MISSING "_N_" VAL"_$S(N>1:"S",1:"")
"RTN","XDRDPREL",58,0)
 . . . S @XDRTMP@(XXX)=$G(@XDRTMP@(XXX))+1
"RTN","XDRDPREL",59,0)
 . . . S @XDRTMP@(XXX,XDRDA)=""
"RTN","XDRDPREL",60,0)
 S @XDRTMP@(" DONE")=$H
"RTN","XDRDPREL",61,0)
 K @XDRTMP@(" TIME")
"RTN","XDRDPREL",62,0)
 Q
"RTN","XDRDPREL",63,0)
VIEW(XDRFL) ;
"RTN","XDRDPREL",64,0)
 N XDRTMP,X,Y,XTIME
"RTN","XDRDPREL",65,0)
 S XDRTMP="^XTMP(""XDRDPREL"",XDRFL)"
"RTN","XDRDPREL",66,0)
 I '$D(@XDRTMP) Q
"RTN","XDRDPREL",67,0)
 L +@XDRTMP
"RTN","XDRDPREL",68,0)
 S X=""
"RTN","XDRDPREL",69,0)
 F  S X=$O(@XDRTMP@(X)) Q:X=""  S X(X)=@XDRTMP@(X)
"RTN","XDRDPREL",70,0)
 L -@XDRTMP
"RTN","XDRDPREL",71,0)
 S XRUN=$$HDIFF^XLFDT($S($D(X(" DONE")):X(" DONE"),1:X(" TIME")),X(" START"),2)
"RTN","XDRDPREL",72,0)
 S XTIME=(XRUN\3600)_":"_$S((XRUN#3600\60)<10:"0",1:"")_(XRUN#3600\60)_":"_$S((XRUN#60)<10:"0",1:"")_(XRUN#60)
"RTN","XDRDPREL",73,0)
 W @IOF
"RTN","XDRDPREL",74,0)
 W !!!,"RUN TIME: ",XTIME,"     CURRENT IEN: ",X(" CURR"),"     FILE ENTRIES: ",X(" TOTAL")
"RTN","XDRDPREL",75,0)
 W !
"RTN","XDRDPREL",76,0)
 S X="" F  S X=$O(X(X)) Q:X=""  I X["#" D
"RTN","XDRDPREL",77,0)
 . S Y=+$P(X,"#",2)
"RTN","XDRDPREL",78,0)
 . W !,$J(X(X),10)," ",XDRFNAM," entries are missing field # ",Y,"  ",$P(^DD(XDRFL,Y,0),U)
"RTN","XDRDPREL",79,0)
 I $D(X("NO ZERO NODE")) W !,$J(X("NO ZERO NODE"),10)," ",XDRFNAM," entries have NO zero node!"
"RTN","XDRDPREL",80,0)
 I $D(X("BAD SSN")) W !,$J(X("BAD SSN"),10)," ",XDRFNAM," entries have bad SSN values (non-numeric, etc.)"
"RTN","XDRDPREL",81,0)
 S X="" W !
"RTN","XDRDPREL",82,0)
 F  S X=$O(X(X)) Q:X=""  I X["VAL" D
"RTN","XDRDPREL",83,0)
 . S Y=+$P(X," ",2)
"RTN","XDRDPREL",84,0)
 . W !,$J(X(X),10)," ",XDRFNAM," entries are missing ",Y," of the fields above"
"RTN","XDRDPREL",85,0)
 W ! K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","XDRDPREL",86,0)
 Q
"RTN","XDRDPREL",87,0)
 ;
"RTN","XDRDPREL",88,0)
EXIT Q
"RTN","XDRDPRG2")
0^15^B2141984
"RTN","XDRDPRG2",1,0)
XDRDPRG2 ;SF-IRMFO/REM - PURGE MERGE PROCESS FILE; 9/26/96
"RTN","XDRDPRG2",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDPRG2",3,0)
 ;;
"RTN","XDRDPRG2",4,0)
 ;;
"RTN","XDRDPRG2",5,0)
EN ;
"RTN","XDRDPRG2",6,0)
 N Y
"RTN","XDRDPRG2",7,0)
 Q:$$CHK(15.2)
"RTN","XDRDPRG2",8,0)
 ;W ! K DIR S DIR(0)="Y",DIR("A")="Do you wish to Queue this purging (Y/N)"
"RTN","XDRDPRG2",9,0)
 ;D ^DIR K DIR I $D(DIRUT) Q
"RTN","XDRDPRG2",10,0)
 ;I Y D QUEUE Q
"RTN","XDRDPRG2",11,0)
 D ASK
"RTN","XDRDPRG2",12,0)
 Q
"RTN","XDRDPRG2",13,0)
 ;
"RTN","XDRDPRG2",14,0)
QUEUE ;Queues the process.
"RTN","XDRDPRG2",15,0)
 S ZTRTN="START^XDRDPRG2",ZTIO="",ZTDESC="Merge Process File Purge"
"RTN","XDRDPRG2",16,0)
 D ^%ZTLOAD
"RTN","XDRDPRG2",17,0)
QUEUEX Q
"RTN","XDRDPRG2",18,0)
 ;
"RTN","XDRDPRG2",19,0)
CHK(XDRFL) ;Checks if data in file.
"RTN","XDRDPRG2",20,0)
 N XDRGL
"RTN","XDRDPRG2",21,0)
 S XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRDPRG2",22,0)
 I $D(@(XDRGL_"""B"""_")")) Q 0
"RTN","XDRDPRG2",23,0)
 W *7,!!,"THERE IS NO DATA IN FILE!",!!
"RTN","XDRDPRG2",24,0)
 Q 1
"RTN","XDRDPRG2",25,0)
 ;
"RTN","XDRDPRG2",26,0)
ASK ;Ask user for entries to purge then purge.
"RTN","XDRDPRG2",27,0)
 N Y,DA,DIC,DIR,DIK,NAME
"RTN","XDRDPRG2",28,0)
 F  D  Q:Y<0
"RTN","XDRDPRG2",29,0)
 .W ! S DIC=15.2,DIC(0)="AEMZ",DIC("A")="Select Merge Process to Purge: "
"RTN","XDRDPRG2",30,0)
 .S DIC("S")="I $P(^(0),U,4)=""C""" ;Scrn for only Completed ones.
"RTN","XDRDPRG2",31,0)
 .D ^DIC Q:+Y<0  S NAME=Y(0,0),DA=+Y
"RTN","XDRDPRG2",32,0)
 .S DIR(0)="Y",DIR("B")="NO",DIR("A")="Are you sure you want to delete """_NAME_""""
"RTN","XDRDPRG2",33,0)
 .D ^DIR Q:$D(DIRUT)!('Y)
"RTN","XDRDPRG2",34,0)
 .S DIK="^VA(15.2," D ^DIK
"RTN","XDRDPRG2",35,0)
 .W !!,*7,?3,""""_NAME_"""","  DELETED!",!
"RTN","XDRDPRG2",36,0)
 Q
"RTN","XDRDPRGE")
0^63^B8276200
"RTN","XDRDPRGE",1,0)
XDRDPRGE ;SF-IRMFO/IHS/OHPRD/JCM - PURGE DUPLICATE RECORD FILE;   [ 08/13/92  09:50 AM ]
"RTN","XDRDPRGE",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDPRGE",3,0)
 ;;
"RTN","XDRDPRGE",4,0)
START ;
"RTN","XDRDPRGE",5,0)
 D INIT G:XDRQFLG END
"RTN","XDRDPRGE",6,0)
 D ASK G:XDRQFLG END
"RTN","XDRDPRGE",7,0)
DQ ; Entry point for Tasked job
"RTN","XDRDPRGE",8,0)
 I XDRDPRGE("CHOICE")="BOTH" D BOTH I 1
"RTN","XDRDPRGE",9,0)
 E  D XREF
"RTN","XDRDPRGE",10,0)
END D EOJ
"RTN","XDRDPRGE",11,0)
 Q
"RTN","XDRDPRGE",12,0)
 ;
"RTN","XDRDPRGE",13,0)
INIT ;
"RTN","XDRDPRGE",14,0)
 S XDRQFLG=0
"RTN","XDRDPRGE",15,0)
 D:'$D(XDRFL) FILE
"RTN","XDRDPRGE",16,0)
 G:XDRQFLG INITX
"RTN","XDRDPRGE",17,0)
 S XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRDPRGE",18,0)
INITX Q
"RTN","XDRDPRGE",19,0)
 ;
"RTN","XDRDPRGE",20,0)
FILE ;
"RTN","XDRDPRGE",21,0)
 ;S DIC("S")=
"RTN","XDRDPRGE",22,0)
 S DIC(0)="QEAZ"
"RTN","XDRDPRGE",23,0)
 S DIC("A")="Select File to Be Checked to purge: "
"RTN","XDRDPRGE",24,0)
 S DIC="^VA(15.1," D ^DIC K DIC,X
"RTN","XDRDPRGE",25,0)
 I Y=-1 S XDRQFLG=1 G FILEX
"RTN","XDRDPRGE",26,0)
 S XDRFL=$P(Y(0),U) K Y
"RTN","XDRDPRGE",27,0)
FILEX Q
"RTN","XDRDPRGE",28,0)
 ;
"RTN","XDRDPRGE",29,0)
ASK ;
"RTN","XDRDPRGE",30,0)
 S DIR(0)="S^1:POTENTIAL DUPLICATES PURGE;2:VERIFIED NOT DUPLICATES PURGE;3:ALL RECORDS EXCEPT VERIFIED DUPLICATES PURGE"
"RTN","XDRDPRGE",31,0)
 S DIR("A")="Choice "
"RTN","XDRDPRGE",32,0)
 S DIR("?",1)="Enter a 1 if you wish to purge only the potential non-verified duplicates"
"RTN","XDRDPRGE",33,0)
 S DIR("?",2)="Enter a 2 if you wish to purge only Verified Non-Duplicates"
"RTN","XDRDPRGE",34,0)
 S DIR("?",3)="Enter a 3 if you wish to purge everything except verifed duplicates"
"RTN","XDRDPRGE",35,0)
 D ^DIR K DIR
"RTN","XDRDPRGE",36,0)
 I $D(DIRUT) S XDRQFLG=1 G ASKX
"RTN","XDRDPRGE",37,0)
 S (XDRDPRGE("XREF"),XDRDPRGE("CHOICE"))=$S(Y=1:"APOT",Y=2:"ANOT",1:"BOTH") K Y
"RTN","XDRDPRGE",38,0)
 S DIR(0)="Y"
"RTN","XDRDPRGE",39,0)
 S DIR("A")="Do you wish to Queue this purging (Y/N)"
"RTN","XDRDPRGE",40,0)
 D ^DIR K DIR
"RTN","XDRDPRGE",41,0)
 I $D(DIRUT) S XDRQFLG=1 G ASKX
"RTN","XDRDPRGE",42,0)
 I Y D QUEUE
"RTN","XDRDPRGE",43,0)
ASKX K Y
"RTN","XDRDPRGE",44,0)
 Q
"RTN","XDRDPRGE",45,0)
 ;
"RTN","XDRDPRGE",46,0)
QUEUE ;
"RTN","XDRDPRGE",47,0)
 S ZTRTN="DQ^XDRDPRGE",ZTIO="",ZTDESC="Duplicate Record Purge"
"RTN","XDRDPRGE",48,0)
 F %="XDRFL","XDRGL","XDRDPRGE(" S ZTSAVE(%)=""
"RTN","XDRDPRGE",49,0)
 D ^%ZTLOAD K ZTSK
"RTN","XDRDPRGE",50,0)
 S XDRQFLG=1
"RTN","XDRDPRGE",51,0)
 Q
"RTN","XDRDPRGE",52,0)
 ;
"RTN","XDRDPRGE",53,0)
BOTH ;
"RTN","XDRDPRGE",54,0)
 S XDRDPRGE("XREF")="APOT" D XREF
"RTN","XDRDPRGE",55,0)
 S XDRDPRGE("XREF")="ANOT" D XREF
"RTN","XDRDPRGE",56,0)
 Q
"RTN","XDRDPRGE",57,0)
 ;
"RTN","XDRDPRGE",58,0)
XREF ;
"RTN","XDRDPRGE",59,0)
 G:'$D(^VA(15,XDRDPRGE("XREF"))) XREFX
"RTN","XDRDPRGE",60,0)
 S XDRDPRGE("GL")="^VA(15,"_""""_XDRDPRGE("XREF")_""""_","_""""_$P(XDRGL,U,2)_""""_","
"RTN","XDRDPRGE",61,0)
 S XDRDPRGE("RCDS")=0,DIK="^VA(15," F XDRDI1=0:0 S XDRDPRGE("RCDS")=$O(@(XDRDPRGE("GL")_"XDRDPRGE(""RCDS""))")) Q:XDRDPRGE("RCDS")=""  S DA=$O(@(XDRDPRGE("GL")_"XDRDPRGE(""RCDS""),0)")) D ^DIK
"RTN","XDRDPRGE",62,0)
XREFX K XDRDI1,DIK,DA,XDRDPRGE("GL")
"RTN","XDRDPRGE",63,0)
 Q
"RTN","XDRDPRGE",64,0)
 ;
"RTN","XDRDPRGE",65,0)
EOJ ;
"RTN","XDRDPRGE",66,0)
 K XDRFL,XDRGL,XDRDPRGE
"RTN","XDRDPRGE",67,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XDRDPRGE",68,0)
 Q
"RTN","XDRDQUE")
0^17^B18704513
"RTN","XDRDQUE",1,0)
XDRDQUE ;SF-IRMFO/IHS/OHPRD/JCM - START AND STOP DUPLICATE CHECKER SEARCH ;4/6/98  09:19
"RTN","XDRDQUE",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDQUE",3,0)
 ;;
"RTN","XDRDQUE",4,0)
START ;
"RTN","XDRDQUE",5,0)
 S XDRQFLG=0
"RTN","XDRDQUE",6,0)
 ;*** following commented line to be removed from Toolkit ver after 7.3
"RTN","XDRDQUE",7,0)
 ;S XDRDQUE("TASKMAN STATUS")=$P(@$Q(^%ZTSCH("STATUS","")),U,2) I XDRDQUE("TASKMAN STATUS")'="RUN" W !!,"Taskman does not seem to be running properly, Please notify your site manager.",!! G END
"RTN","XDRDQUE",8,0)
 S XDRDQUE("TASKMAN STATUS")=$$TM^%ZTLOAD
"RTN","XDRDQUE",9,0)
 I 'XDRDQUE("TASKMAN STATUS") W !!,"Taskman does not seem to be running properly, Please notify your site manager.",!! G END
"RTN","XDRDQUE",10,0)
 D FILE G:XDRQFLG END ; Asks user which file to check for dups
"RTN","XDRDQUE",11,0)
 D CHECK^XDRU1 G:XDRQFLG END ; Checks the Duplicate Resolution file
"RTN","XDRDQUE",12,0)
 D ASK G:XDRQFLG END ; Asks user what action and type of search
"RTN","XDRDQUE",13,0)
 D QUEUE G:XDRQFLG END ; Queues search
"RTN","XDRDQUE",14,0)
 I XDRDNSTA="r" D ASK3 D:'XDRQFLG QUEUE
"RTN","XDRDQUE",15,0)
END D EOJ ; Clean up variables
"RTN","XDRDQUE",16,0)
 Q
"RTN","XDRDQUE",17,0)
 ;
"RTN","XDRDQUE",18,0)
FILE ; EP - Called by XDRDCOMP,XDRDLIST,XDRDSCOR,XDRMADD,XDRCNT
"RTN","XDRDQUE",19,0)
 K DIC("B")
"RTN","XDRDQUE",20,0)
 K X S:$D(XDRFL) X=XDRFL
"RTN","XDRDQUE",21,0)
 S DIC(0)=$S($D(X):"Z",1:"QEAZ")
"RTN","XDRDQUE",22,0)
 S:'$D(DIC("A")) DIC("A")="Select file to be checked for duplicates: "
"RTN","XDRDQUE",23,0)
 S DIC="^VA(15.1," D ^DIC K DIC,X
"RTN","XDRDQUE",24,0)
 I Y=-1 S XDRQFLG=1 G FILEX
"RTN","XDRDQUE",25,0)
 S XDRD(0)=Y(0),XDRD(0,0)=Y(0,0),XDRFL=$P(Y(0),U) K Y
"RTN","XDRDQUE",26,0)
 W:'$D(ZTQUEUED) !!
"RTN","XDRDQUE",27,0)
FILEX Q
"RTN","XDRDQUE",28,0)
 ;
"RTN","XDRDQUE",29,0)
ASK ;
"RTN","XDRDQUE",30,0)
 D DISP
"RTN","XDRDQUE",31,0)
 D ASK1 G:XDRQFLG ASKX
"RTN","XDRDQUE",32,0)
 I XDRDSTA="c"&($D(^VA(15.1,XDRFL,"APDTI"))) S XDRDPDTI="" W !!,"Since the Potential Duplicate Threshold has been raised",!,"I will only go through the Potential Duplicates and see if they",!,"meet the new threshold." G ASKX
"RTN","XDRDQUE",33,0)
 D:XDRDSTA="c"&('XDRQFLG) ASK2
"RTN","XDRDQUE",34,0)
ASKX ;
"RTN","XDRDQUE",35,0)
 Q
"RTN","XDRDQUE",36,0)
DISP ;
"RTN","XDRDQUE",37,0)
 D DISP^XDRDSTAT
"RTN","XDRDQUE",38,0)
 S XDRDSTA=$P(XDRD(0),U,2)
"RTN","XDRDQUE",39,0)
 S XDRDTYPE=$P(XDRD(0),U,5)
"RTN","XDRDQUE",40,0)
 Q
"RTN","XDRDQUE",41,0)
ASK1 ;
"RTN","XDRDQUE",42,0)
 S:XDRDSTA']"" XDRDSTA="c"
"RTN","XDRDQUE",43,0)
 S DIR(0)="Y",DIR("A")="Do You wish to "_$S(XDRDSTA="h":"CONTINUE",XDRDSTA="e":"CONTINUE",XDRDSTA="r":"HALT",1:"RUN")_" "_$S(XDRDSTA="r":"this",XDRDSTA="h":"this",XDRDSTA="e":"this",1:"a")_" search (Y/N)"
"RTN","XDRDQUE",44,0)
 D ^DIR K DIR D OUT
"RTN","XDRDQUE",45,0)
 I 'XDRQFLG,'Y,$S(XDRDSTA="r":0,XDRDSTA="c":0,1:1) D  S Y=0
"RTN","XDRDQUE",46,0)
 . S DIR(0)="Y",DIR("A")="Do you wish to mark this run COMPLETED (Y/N)",DIR("B")="NO" D ^DIR K DIR D OUT
"RTN","XDRDQUE",47,0)
 . I Y,'XDRQFLG S DIE="^VA(15.1,",DA=XDRFL,DR=".02////c" D ^DIE K DA,DIE,DR
"RTN","XDRDQUE",48,0)
 S:'Y XDRQFLG=1
"RTN","XDRDQUE",49,0)
 K XDRDNSTA
"RTN","XDRDQUE",50,0)
 S:'XDRQFLG XDRDNSTA=$S(XDRDSTA="h":"r",XDRDSTA="r":"h",1:"r")
"RTN","XDRDQUE",51,0)
 Q
"RTN","XDRDQUE",52,0)
ASK2 ;
"RTN","XDRDQUE",53,0)
 K XDRDTYPE
"RTN","XDRDQUE",54,0)
 S DIR(0)="15.1,.05A",DIR("A")="Which type of Search do you wish to run ? (BASIC/NEW) "
"RTN","XDRDQUE",55,0)
 S DIR("B")="BASIC",DIR("?")="A 'BASIC' search starts at the beginning of the file.  A 'NEW' search uses a cross-reference you specify to determine which entries to test."
"RTN","XDRDQUE",56,0)
 D ^DIR K DIR D OUT
"RTN","XDRDQUE",57,0)
 S XDRDTYPE=$S(Y="b":"BASIC",1:"NEW")
"RTN","XDRDQUE",58,0)
 I XDRDTYPE="BASIC" D
"RTN","XDRDQUE",59,0)
 . N DIR S DIR(0)="Y"
"RTN","XDRDQUE",60,0)
 . S DIR("A",1)="This process will take a **LONG** time (known to exceed 100  hours),"
"RTN","XDRDQUE",61,0)
 . S DIR("A",2)="but you CAN stop and restart the process when you want using"
"RTN","XDRDQUE",62,0)
 . S DIR("A")="the options  OK"
"RTN","XDRDQUE",63,0)
 . D ^DIR S:Y'>0 XDRQFLG=1
"RTN","XDRDQUE",64,0)
 . Q
"RTN","XDRDQUE",65,0)
 Q
"RTN","XDRDQUE",66,0)
 ;
"RTN","XDRDQUE",67,0)
ASK3 ;
"RTN","XDRDQUE",68,0)
 W !
"RTN","XDRDQUE",69,0)
 S DIR(0)="Y",DIR("A")="Do You wish to schedule a time to HALT this search (Y/N)"
"RTN","XDRDQUE",70,0)
 D ^DIR K DIR D OUT
"RTN","XDRDQUE",71,0)
 S:'Y XDRQFLG=1
"RTN","XDRDQUE",72,0)
 G:XDRQFLG ASK3X
"RTN","XDRDQUE",73,0)
 S XDRDNSTA="h"
"RTN","XDRDQUE",74,0)
ASK3X Q
"RTN","XDRDQUE",75,0)
 ;
"RTN","XDRDQUE",76,0)
QUEUE ;
"RTN","XDRDQUE",77,0)
 S ZTRTN="XDRDMAIN",ZTIO="",ZTDESC="Duplicate "_XDRD(0,0)_" Search"
"RTN","XDRDQUE",78,0)
 S:XDRDNSTA="h" ZTDESC="Halt "_ZTDESC
"RTN","XDRDQUE",79,0)
 S ZTSAVE("XDRFL")="" S:$D(XDRDPDTI) ZTSAVE("XDRDPDTI")=""
"RTN","XDRDQUE",80,0)
 S ZTSAVE("XDRDTYPE")="",ZTSAVE("XDRDNSTA")=""
"RTN","XDRDQUE",81,0)
 D ^%ZTLOAD
"RTN","XDRDQUE",82,0)
 S:'$D(ZTQUEUED) XDRQFLG=1
"RTN","XDRDQUE",83,0)
 K ZTSK
"RTN","XDRDQUE",84,0)
QUEUEX Q
"RTN","XDRDQUE",85,0)
 ;
"RTN","XDRDQUE",86,0)
OUT ;
"RTN","XDRDQUE",87,0)
 ; Common point to take care of DIR,DIC, and DIE calls
"RTN","XDRDQUE",88,0)
 I ($D(DTOUT))!($D(DUOUT))!($D(DIRUT)) K DTOUT,DUOUT,DIRUT S XDRQFLG=1
"RTN","XDRDQUE",89,0)
 Q
"RTN","XDRDQUE",90,0)
EOJ ;
"RTN","XDRDQUE",91,0)
 K X,Y,XDRFL,XDRDNSTA,XDRDSTA,XDRQFLG,XDRD,XDRDPDTI,XDRDQUE
"RTN","XDRDQUE",92,0)
 Q
"RTN","XDRDSHOW")
0^19^B21839000
"RTN","XDRDSHOW",1,0)
XDRDSHOW ;SF-IRMFO.SEA/JLI - DISPLAY DATA IN FIELDS, GET OVERWRITES ;5/13/98  15:49
"RTN","XDRDSHOW",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDSHOW",3,0)
 ;;
"RTN","XDRDSHOW",4,0)
SHOW(FILE,REC1,REC2,FLDS,REVIEW) ;
"RTN","XDRDSHOW",5,0)
 N FILDIC,MULT,DDVAL,NAMIEN1,NAMIEN2,NAMREC1,NAMREC2
"RTN","XDRDSHOW",6,0)
 S FILDIC=$G(^DIC(FILE,0,"GL")) Q:FILDIC=""
"RTN","XDRDSHOW",7,0)
 S REVIEW=+$G(REVIEW)
"RTN","XDRDSHOW",8,0)
 S FILREC1=FILDIC_"REC1)"
"RTN","XDRDSHOW",9,0)
 S FILREC2=FILDIC_"REC2)"
"RTN","XDRDSHOW",10,0)
 S NAMREC1=$P($G(@FILREC1@(0)),U) I NAMREC1="" Q
"RTN","XDRDSHOW",11,0)
 S NAMREC2=$P($G(@FILREC2@(0)),U) I NAMREC2="" Q
"RTN","XDRDSHOW",12,0)
 I FILE=63 D
"RTN","XDRDSHOW",13,0)
 . S NAMIEN1=+$P(@FILREC1@(0),U,3),NAMIEN2=+$P(@FILREC2@(0),U,3)
"RTN","XDRDSHOW",14,0)
 . S NAMREC1=$P(^DPT(NAMIEN1,0),U),NAMREC2=$P(^DPT(NAMIEN2,0),U)
"RTN","XDRDSHOW",15,0)
 I $P(^DD(FILE,.01,0),U,2)["P" D
"RTN","XDRDSHOW",16,0)
 . N XFIL
"RTN","XDRDSHOW",17,0)
 . S XFIL=+$P($P($G(^DD(FILE,.01,0)),U,2),"P",2) Q:XFIL'>0
"RTN","XDRDSHOW",18,0)
 . S XFIL=$G(^DIC(XFIL,0,"GL")) Q:XFIL=""
"RTN","XDRDSHOW",19,0)
 . S NAMREC1=$P(@(XFIL_NAMREC1_",0)"),U)
"RTN","XDRDSHOW",20,0)
 . S NAMREC2=$P(@(XFIL_NAMREC2_",0)"),U)
"RTN","XDRDSHOW",21,0)
 ;
"RTN","XDRDSHOW",22,0)
 D HEADER
"RTN","XDRDSHOW",23,0)
LOOP ;
"RTN","XDRDSHOW",24,0)
 S FLD=0
"RTN","XDRDSHOW",25,0)
 F FLD=0:0 S FLD=$O(^DD(FILE,FLD)) Q:FLD'>0  D  I NLIN<6 D PAGE Q:$D(DIRUT)  D HEADER
"RTN","XDRDSHOW",26,0)
 . I FILE=63,$P($G(^DD(FILE,FLD,0)),U)="NAME" Q  ;scrn patient file data. From Lab
"RTN","XDRDSHOW",27,0)
 . I FILE'=2,$P($G(^DD(FILE,FLD,0)),U,2)["P2" Q  ;From DINUM pointers.
"RTN","XDRDSHOW",28,0)
 . S DDVAL=$G(^DD(FILE,FLD,0))
"RTN","XDRDSHOW",29,0)
 . S NODE=$P($P(DDVAL,U,4),";")
"RTN","XDRDSHOW",30,0)
 . S PIECE=$P($P(DDVAL,U,4),";",2)
"RTN","XDRDSHOW",31,0)
 . I PIECE=0 S MULT(FLD)=""
"RTN","XDRDSHOW",32,0)
 . I PIECE>0 D
"RTN","XDRDSHOW",33,0)
 . . S X1=$P($G(@FILREC1@(NODE)),U,PIECE),X1=$$TYPE(X1,$P(DDVAL,U,2),DDVAL,REC1)
"RTN","XDRDSHOW",34,0)
 . . S X2=$P($G(@FILREC2@(NODE)),U,PIECE),X2=$$TYPE(X2,$P(DDVAL,U,2),DDVAL,REC2)
"RTN","XDRDSHOW",35,0)
 . . I X1'=""!(X2'="") D
"RTN","XDRDSHOW",36,0)
 . . . S X0="    "
"RTN","XDRDSHOW",37,0)
 . . . S XN=$P(DDVAL,U)
"RTN","XDRDSHOW",38,0)
 . . . S XDRA=0
"RTN","XDRDSHOW",39,0)
 . . . I X1'=""&(X2'=""),X1'=X2 S X0=$S($D(FLDS(FLD)):"||||",1:"****"),NDIFFS=NDIFFS+1,DIFFS(NDIFFS)=FLD,XDRA=1 I REVIEW S NLIN=NLIN-1
"RTN","XDRDSHOW",40,0)
 . . . I 'REVIEW!XDRA D
"RTN","XDRDSHOW",41,0)
 . . . . W ! S NLIN=NLIN-1
"RTN","XDRDSHOW",42,0)
 . . . . F  Q:XN=""&(X1="")&(X2="")  D
"RTN","XDRDSHOW",43,0)
 . . . . . W !,X0,"  ",$E(XN,1,20),?30,$E(X1,1,20),?55,$E(X2,1,20)
"RTN","XDRDSHOW",44,0)
 . . . . . S NLIN=NLIN-1
"RTN","XDRDSHOW",45,0)
 . . . . . S X0="    ",XN=$E(XN,21,$L(XN))
"RTN","XDRDSHOW",46,0)
 . . . . . S X1=$E(X1,21,$L(X1))
"RTN","XDRDSHOW",47,0)
 . . . . . S X2=$E(X2,21,$L(X2))
"RTN","XDRDSHOW",48,0)
MULT I '$D(DIRUT) D
"RTN","XDRDSHOW",49,0)
 . I $G(NDIFFS)>0 D PAGE Q:$D(DIRUT)  D HEADER
"RTN","XDRDSHOW",50,0)
 . I $D(MULT) D
"RTN","XDRDSHOW",51,0)
 . . F FLD=0:0 S FLD=$O(MULT(FLD)) Q:FLD'>0  D  I NLIN<6 D PAGE Q:$D(DIRUT)  D HEADER
"RTN","XDRDSHOW",52,0)
 . . . S DDVAL=^DD(FILE,FLD,0)
"RTN","XDRDSHOW",53,0)
 . . . S NAME=$P(DDVAL,U)
"RTN","XDRDSHOW",54,0)
 . . . S NODE=$P($P(DDVAL,U,4),";")
"RTN","XDRDSHOW",55,0)
 . . . S NOD1=$NA(@FILREC1@(NODE))
"RTN","XDRDSHOW",56,0)
 . . . S NOD2=$NA(@FILREC2@(NODE))
"RTN","XDRDSHOW",57,0)
 . . . S N1=0,N2=0
"RTN","XDRDSHOW",58,0)
 . . . F I=0:0 S I=$O(@NOD1@(I)) Q:I'>0  S N1=N1+1
"RTN","XDRDSHOW",59,0)
 . . . F I=0:0 S I=$O(@NOD2@(I)) Q:I'>0  S N2=N2+1
"RTN","XDRDSHOW",60,0)
 . . . I N1'=0!(N2'=0) D
"RTN","XDRDSHOW",61,0)
 . . . . S N1=$S(N1>1:N1_" entries",N1>0:N1_" entry",1:"---")
"RTN","XDRDSHOW",62,0)
 . . . . S N2=$S(N2>1:N2_" entries",N2>0:N2_" entry",1:"---")
"RTN","XDRDSHOW",63,0)
 . . . . W !!,$E(NAME,1,25),?30,N1,?55,N2
"RTN","XDRDSHOW",64,0)
 . . . . S NLIN=NLIN-2
"RTN","XDRDSHOW",65,0)
 Q
"RTN","XDRDSHOW",66,0)
PAGE ;
"RTN","XDRDSHOW",67,0)
 I IOST'["C-"!$D(ZTQUEUED) Q
"RTN","XDRDSHOW",68,0)
 W !
"RTN","XDRDSHOW",69,0)
 I '$D(DIFFS)!'REVIEW S DIR(0)="E" D ^DIR K DIR
"RTN","XDRDSHOW",70,0)
 I $D(DIFFS)&REVIEW D
"RTN","XDRDSHOW",71,0)
 . S DIR(0)="LO^1:"_NDIFFS,DIR("A")="OVERWRITE data for selected fields"
"RTN","XDRDSHOW",72,0)
 . F I=1:1:NDIFFS W !,I,"  ",$P(^DD(FILE,DIFFS(I),0),U)
"RTN","XDRDSHOW",73,0)
 . W ! D ^DIR K DIR
"RTN","XDRDSHOW",74,0)
 . I X="",$D(DIRUT) K DIRUT
"RTN","XDRDSHOW",75,0)
 . S I="" F  S I=$O(Y(I)) Q:I=""  S Y=Y(I) K Y(I) D
"RTN","XDRDSHOW",76,0)
 . . F  Q:Y=","  Q:Y=""  S X=$D(FLDS(DIFFS(+Y))) K:X=1 FLDS(DIFFS(+Y)) S:X=0 FLDS(DIFFS(+Y))="" S Y=$P(Y,",",2,999)
"RTN","XDRDSHOW",77,0)
 Q
"RTN","XDRDSHOW",78,0)
 ;
"RTN","XDRDSHOW",79,0)
HEADER ;
"RTN","XDRDSHOW",80,0)
 W:$D(IOF) @IOF
"RTN","XDRDSHOW",81,0)
 K DIFFS S NDIFFS=0
"RTN","XDRDSHOW",82,0)
 S NLIN=IOSL-3
"RTN","XDRDSHOW",83,0)
 I '$D(PACKAGE) S PACKAGE="PRIMARY"
"RTN","XDRDSHOW",84,0)
 ;REM - modified next two lines to include IENs in review display
"RTN","XDRDSHOW",85,0)
 W !,?30,$S(PACKAGE="PRIMARY":"RECORD1 [#"_REC1_"]",PACKAGE="LABORATORY":"MERGE FROM [#"_NAMIEN1_"]",1:"MERGE FROM [#"_REC1_"]")
"RTN","XDRDSHOW",86,0)
 W ?55,$S(PACKAGE="PRIMARY":"RECORD2 [#"_REC2_"]",PACKAGE="LABORATORY":"MERGE TO [#"_NAMIEN2_"]",1:"MERGE TO [#"_REC2_"]")
"RTN","XDRDSHOW",87,0)
 ;I FILE=63 W !?38,"[#"_NAMIEN1_"]",?55,"[#"_NAMIEN2_"]"
"RTN","XDRDSHOW",88,0)
 W !,?30,$E(NAMREC1,1,20),?55,$E(NAMREC2,1,20)
"RTN","XDRDSHOW",89,0)
 S NLIN=NLIN-2
"RTN","XDRDSHOW",90,0)
 I $E(NAMREC1,21,40)'=""!($E(NAMREC2,21,40)'="") D
"RTN","XDRDSHOW",91,0)
 . W !,?30,$E(NAMREC1,21,40),?55,$E(NAMREC2,21,40)
"RTN","XDRDSHOW",92,0)
 . S NLIN=NLIN-1
"RTN","XDRDSHOW",93,0)
 W !,"----------------------------------------------------------------------------"
"RTN","XDRDSHOW",94,0)
 S NLIN=NLIN-1
"RTN","XDRDSHOW",95,0)
 Q
"RTN","XDRDSHOW",96,0)
 ;
"RTN","XDRDSHOW",97,0)
POINT(VAL,FILE) ;
"RTN","XDRDSHOW",98,0)
 N X,Y
"RTN","XDRDSHOW",99,0)
 I +VAL'=VAL Q "BAD POINTER VALUE IN FILE"
"RTN","XDRDSHOW",100,0)
 S Y=$G(^DIC(FILE,0,"GL")) Q:Y="" ""
"RTN","XDRDSHOW",101,0)
 S Y=Y_VAL_",0)"
"RTN","XDRDSHOW",102,0)
 S Y=$P($G(@Y),U) I Y'=""&($P(^DD(FILE,.01,0),U,2)["P") S Y=$$POINT(Y,+$P($P(^DD(FILE,.01,0),U,2),"P",2))
"RTN","XDRDSHOW",103,0)
 S:Y="" Y="** Missing Entry in File "_FILE_"." ;REM - 9/6/96 When a pointer node is missing. 
"RTN","XDRDSHOW",104,0)
 Q Y
"RTN","XDRDSHOW",105,0)
TYPE(VAL,TYPE,DDNODE0,REC) ;
"RTN","XDRDSHOW",106,0)
 I TYPE["O",$D(^DD(FILE,FLD,2)) S Y=VAL,D0=REC X ^DD(FILE,FLD,2) S VAL=Y Q VAL
"RTN","XDRDSHOW",107,0)
 I TYPE["F",VAL'="" S VAL=""""_VAL_"""" Q VAL
"RTN","XDRDSHOW",108,0)
 I TYPE["P",VAL>0 S VAL=$$POINT(VAL,+$P(TYPE,"P",2)) Q VAL
"RTN","XDRDSHOW",109,0)
 I TYPE["D",VAL>0 D  Q VAL
"RTN","XDRDSHOW",110,0)
 . S VAL=$TR($$FMTE^XLFDT(VAL,2),"@"," ")
"RTN","XDRDSHOW",111,0)
 I TYPE["S" D  Q VAL
"RTN","XDRDSHOW",112,0)
 . N X S X=";"_$P(DDNODE0,U,3)
"RTN","XDRDSHOW",113,0)
 . S X=$P($P(X,(";"_VAL_":"),2),";")
"RTN","XDRDSHOW",114,0)
 . I X'="" S VAL=X
"RTN","XDRDSHOW",115,0)
 Q VAL
"RTN","XDRDSTAT")
0^20^B11839944
"RTN","XDRDSTAT",1,0)
XDRDSTAT ;SF-IRMFO/IHS/OHPRD/JCM - DISPLAY STATUS OF SEARCH;   [ 08/13/92  09:50 AM ] ;2/6/98  10:23
"RTN","XDRDSTAT",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDSTAT",3,0)
 ;;
"RTN","XDRDSTAT",4,0)
 ;
"RTN","XDRDSTAT",5,0)
START ;
"RTN","XDRDSTAT",6,0)
 N XDRDISP
"RTN","XDRDSTAT",7,0)
 S XDRQFLG=0,XDRDISP=1
"RTN","XDRDSTAT",8,0)
 ;D FILE G:XDRQFLG END
"RTN","XDRDSTAT",9,0)
 W:$D(IOF) @IOF
"RTN","XDRDSTAT",10,0)
 F XDRICNT=0:0 S XDRICNT=$O(^VA(15.1,XDRICNT)) Q:XDRICNT'>0!(XDRQFLG)  D
"RTN","XDRDSTAT",11,0)
 . S XDRFL=+XDRICNT
"RTN","XDRDSTAT",12,0)
 . S XDRD(0)=^VA(15.1,XDRICNT,0)
"RTN","XDRDSTAT",13,0)
 . S XDRD(0,0)=$P(^DIC(XDRICNT,0),U)
"RTN","XDRDSTAT",14,0)
 . K X,Y
"RTN","XDRDSTAT",15,0)
 . D DISP
"RTN","XDRDSTAT",16,0)
 ;D DISP
"RTN","XDRDSTAT",17,0)
END D EOJ
"RTN","XDRDSTAT",18,0)
 Q
"RTN","XDRDSTAT",19,0)
 ;
"RTN","XDRDSTAT",20,0)
FILE ;
"RTN","XDRDSTAT",21,0)
 W !!
"RTN","XDRDSTAT",22,0)
 S DIC(0)="QEAZ"
"RTN","XDRDSTAT",23,0)
 S DIC("A")="Select duplicate search file to check status for: "
"RTN","XDRDSTAT",24,0)
 S DIC="^VA(15.1," D ^DIC K DIC,X
"RTN","XDRDSTAT",25,0)
 I Y=-1 S XDRQFLG=1 G FILEX
"RTN","XDRDSTAT",26,0)
 S XDRFL=+Y
"RTN","XDRDSTAT",27,0)
 S XDRD(0)=Y(0),XDRD(0,0)=Y(0,0) K Y
"RTN","XDRDSTAT",28,0)
 W !!
"RTN","XDRDSTAT",29,0)
FILEX Q
"RTN","XDRDSTAT",30,0)
 ;
"RTN","XDRDSTAT",31,0)
ASK ;
"RTN","XDRDSTAT",32,0)
 Q
"RTN","XDRDSTAT",33,0)
 ;
"RTN","XDRDSTAT",34,0)
DISP ;
"RTN","XDRDSTAT",35,0)
 N XLABEL
"RTN","XDRDSTAT",36,0)
 F XDRDI=.02,.03,.04,.05,.07,.08,".10" S Y=$P(XDRD(0),U,+$P(XDRDI,".",2)),C=$P(^DD(15.1,+XDRDI,0),U,2) D Y^DIQ S XDRD(+XDRDI)=Y K Y,DIQ,C
"RTN","XDRDSTAT",37,0)
 I XDRD(.02)["RUN",+$G(^VA(15.1,XDRFL,3))>0,($$NOW^XLFDT()-^VA(15.1,XDRFL,3))>.0015 D
"RTN","XDRDSTAT",38,0)
 . S $P(^VA(15.1,XDRFL,0),U,2)="e"
"RTN","XDRDSTAT",39,0)
 . S XDRD(.02)="ERROR(STOP)"
"RTN","XDRDSTAT",40,0)
 . S $P(^VA(15.1,XDRFL,0),U,10)=$P(^VA(15.1,XDRFL,0),U,10)+$$FMDIFF^XLFDT($P(^(3),U),$P(^(0),U,3),2)
"RTN","XDRDSTAT",41,0)
 . S $P(^VA(15.1,XDRFL,3),U)=""
"RTN","XDRDSTAT",42,0)
 K XDRDI
"RTN","XDRDSTAT",43,0)
 S G=^DIC(XDRFL,0,"GL")_"0)",XDRD("TOT")=$P(@G,U,4) S:XDRD("TOT")<XDRD(.07)!(XDRD(.02)["COMP") XDRD("TOT")=XDRD(.07) S XDRD("%")=$J((XDRD(.07)/XDRD("TOT")*100),5,1)
"RTN","XDRDSTAT",44,0)
 S XLABEL="Date Completed"
"RTN","XDRDSTAT",45,0)
 I XDRD(.02)["COMP" S XDRD(.03)=XDRD(.04)
"RTN","XDRDSTAT",46,0)
 D
"RTN","XDRDSTAT",47,0)
 . N X,%DT,Y
"RTN","XDRDSTAT",48,0)
 . S XLABEL="   hours:min  "
"RTN","XDRDSTAT",49,0)
 . S XDRD(.04)=+XDRD(.1)
"RTN","XDRDSTAT",50,0)
 . I XDRD(.02)["RUN" D
"RTN","XDRDSTAT",51,0)
 . . S X=XDRD(.03),%DT="TS" D ^%DT
"RTN","XDRDSTAT",52,0)
 . . S XDRD(.04)=XDRD(.04)+$$FMDIFF^XLFDT($$NOW^XLFDT(),Y,2)
"RTN","XDRDSTAT",53,0)
 . S T=XDRD(.04)\3600,XDRD(.04)=XDRD(.04)-(T*3600)
"RTN","XDRDSTAT",54,0)
 . S XDRD(.04)=(XDRD(.04)\60)
"RTN","XDRDSTAT",55,0)
 . I XDRD(.04)<10 S XDRD(.04)="0"_XDRD(.04)
"RTN","XDRDSTAT",56,0)
 . S XDRD(.04)=T_":"_XDRD(.04)
"RTN","XDRDSTAT",57,0)
 . S XDRD(.04)=$E("         ",1,(18-$L(XDRD(.04)\2)))_XDRD(.04)
"RTN","XDRDSTAT",58,0)
 W !!!!,?28,"Duplicate ",XDRD(0,0)," Search",!!
"RTN","XDRDSTAT",59,0)
 W "Search Type",?$S(XDRD(.1)>0:13,1:14),"Date ",$S(XDRD(.02)["COMP":"Completed",XDRD(.1)>0:"Restarted",1:"Started"),?32,"Status",?42,XLABEL,?61,"# Records Checked",!
"RTN","XDRDSTAT",60,0)
 S $P(XDRDLINE,"-",18)=""
"RTN","XDRDSTAT",61,0)
 W $E(XDRDLINE,1,11),?13,$E(XDRDLINE,1,14),?32,$E(XDRDLINE,1,6),?42,$E(XDRDLINE,1,14),?61,XDRDLINE,!!
"RTN","XDRDSTAT",62,0)
 W XDRD(.05),?13,$P(XDRD(.03),":",1,2),?32,XDRD(.02),?42,$P(XDRD(.04),":",1,2),?61,XDRD(.07) W:XDRD(.07)]"" "/",XDRD("TOT")," ",XDRD("%"),"%" W !!
"RTN","XDRDSTAT",63,0)
 W !,+$P(^VA(15.1,XDRFL,0),U,12)," Potential Duplicate pairs found",!
"RTN","XDRDSTAT",64,0)
 K XDRDLINE
"RTN","XDRDSTAT",65,0)
 I $D(^XTMP("XDRERR",XDRFL)) W !!,"ERROR: ",^(XDRFL),!!
"RTN","XDRDSTAT",66,0)
 I $D(XDRDISP) D
"RTN","XDRDSTAT",67,0)
 .W !!,"Press RETURN to continue or '^' to exit: " R X:DTIME S:'$T X=U
"RTN","XDRDSTAT",68,0)
 .S:X=U XDRQFLG=1
"RTN","XDRDSTAT",69,0)
 .W:$D(IOF) @IOF
"RTN","XDRDSTAT",70,0)
 Q
"RTN","XDRDSTAT",71,0)
 ;
"RTN","XDRDSTAT",72,0)
EOJ ;
"RTN","XDRDSTAT",73,0)
 K XDRD,XDRQFLG
"RTN","XDRDSTAT",74,0)
 Q
"RTN","XDRDUP")
0^21^B9631874
"RTN","XDRDUP",1,0)
XDRDUP ;SF-IRMFO/IHS/OHPRD/JCM - COMPARES TWO RECORDS TO SEE IF DUP OF EACH OTHER;   [ 08/13/92  09:50 AM ] ;1/31/97  10:04
"RTN","XDRDUP",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDUP",3,0)
 ;;
"RTN","XDRDUP",4,0)
START ;
"RTN","XDRDUP",5,0)
 K % S XDRQFLG=0
"RTN","XDRDUP",6,0)
 I '$D(XDRCD)!('$D(XDRCD2)) S XDRERR=7 D ^XDREMSG G END
"RTN","XDRDUP",7,0)
 I '$D(XDRDSCOR) D ^XDRDSCOR G:XDRQFLG END
"RTN","XDRDUP",8,0)
 F %="MAX","PDT" S XDRDSCOR(%)=0
"RTN","XDRDUP",9,0)
 S:$D(XDRDSCOR("VDT%")) XDRDSCOR("VDT")=0
"RTN","XDRDUP",10,0)
 D VALUE I $D(XDRCD2)'>1 Q
"RTN","XDRDUP",11,0)
 I XDRFL=2,$E(XDRCD2(2,XDRCD2,.09,"I"),1,5)="00000" Q
"RTN","XDRDUP",12,0)
 D MAIN
"RTN","XDRDUP",13,0)
END D EOJ
"RTN","XDRDUP",14,0)
 Q
"RTN","XDRDUP",15,0)
 ;
"RTN","XDRDUP",16,0)
MAIN ;
"RTN","XDRDUP",17,0)
 F XDRDUPFL=0:0 S XDRDUPFL=$O(XDRDSCOR("DR",XDRDUPFL)) Q:'XDRDUPFL  D DIQ1
"RTN","XDRDUP",18,0)
 K XDRDUPFL
"RTN","XDRDUP",19,0)
 I $D(XDRCD2)'>0 S ^XTMP("XDRERR",2,XDRDTYPE,"NO DATA",XDRCD2)="" Q
"RTN","XDRDUP",20,0)
 S XDRD("DUPSCORE")=0
"RTN","XDRDUP",21,0)
 F XDRDTO=0:0 S XDRDTO=$O(XDRDTEST(XDRDTO)) Q:'XDRDTO!(XDRQFLG)  D TEST
"RTN","XDRDUP",22,0)
 K XDRDTO F %=0:0 S %=$O(XDRCD2(%)) Q:'%  K XDRCD2(%)
"RTN","XDRDUP",23,0)
 K %
"RTN","XDRDUP",24,0)
 S XDRDSCOR("PDT")="."_XDRDSCOR("PDT%")*XDRDSCOR("MAX")
"RTN","XDRDUP",25,0)
 S:$D(XDRDSCOR("VDT%")) XDRDSCOR("VDT")="."_XDRDSCOR("VDT%")*XDRDSCOR("MAX")
"RTN","XDRDUP",26,0)
 I XDRDSCOR("MAX")>0 D
"RTN","XDRDUP",27,0)
 . N J1,J2
"RTN","XDRDUP",28,0)
 . S J1=+$J(XDRD("DUPSCORE")/XDRDSCOR("MAX"),1,2)
"RTN","XDRDUP",29,0)
 . S (^(J1),J2)=$G(^TMP("XDRDUPSC",XDRFL,XDRDTYPE,J1))+1
"RTN","XDRDUP",30,0)
 . I J1>.6 S ^TMP("XDRDUPS1",XDRFL,XDRDTYPE,J1,J2)=XDRCD_U_XDRCD2
"RTN","XDRDUP",31,0)
 I '$D(XDRD("NOADD")),XDRD("DUPSCORE")'<XDRDSCOR("PDT"),'$D(XDRDCOMP) D ^XDRDADD
"RTN","XDRDUP",32,0)
MAINX Q
"RTN","XDRDUP",33,0)
 ;
"RTN","XDRDUP",34,0)
DIQ1 ;
"RTN","XDRDUP",35,0)
 S DIC=XDRDUPFL,DIQ(0)="I",DR=XDRDSCOR("DR",XDRDUPFL)
"RTN","XDRDUP",36,0)
 I '$D(XDRCD(XDRDUPFL)) S DA=XDRCD,DIQ="XDRCD" D EN^DIQ1 K DA,D0
"RTN","XDRDUP",37,0)
 S DA=XDRCD2,DIQ="XDRCD2" D EN^DIQ1 K DIC,DR,DIQ,DA,D0
"RTN","XDRDUP",38,0)
 Q
"RTN","XDRDUP",39,0)
 ;
"RTN","XDRDUP",40,0)
TEST ;
"RTN","XDRDUP",41,0)
 S XDRD("TEST ROUTINE")=$S($P($P(XDRDTEST(XDRDTO),U,3),"-",2)]"":$P($P(XDRDTEST(XDRDTO),U,3),"-")_"^"_$P($P(XDRDTEST(XDRDTO),U,3),"-",2),1:U_$P(XDRDTEST(XDRDTO),U,3))
"RTN","XDRDUP",42,0)
 S X=$P(XDRD("TEST ROUTINE"),U,2) X ^%ZOSF("TEST") K X I '$T S XDRERR=8 D ^XDREMSG G TESTX
"RTN","XDRDUP",43,0)
 S XDRD("TEST SCORE")=0
"RTN","XDRDUP",44,0)
 D @XDRD("TEST ROUTINE")
"RTN","XDRDUP",45,0)
 S XDRDUP("TEST SCORE",XDRDTO)=XDRD("TEST SCORE")
"RTN","XDRDUP",46,0)
 S XDRD("DUPSCORE")=XDRD("DUPSCORE")+(XDRD("TEST SCORE"))
"RTN","XDRDUP",47,0)
 S:+XDRD("TEST SCORE")'=0 XDRDSCOR("MAX")=XDRDSCOR("MAX")+($P(XDRDTEST(XDRDTO),U,6))
"RTN","XDRDUP",48,0)
TESTX K XDRD("TEST ROUTINE")
"RTN","XDRDUP",49,0)
 Q
"RTN","XDRDUP",50,0)
 ;
"RTN","XDRDUP",51,0)
EN ; EP - Called by XDRDADJ,XDRDPDTI
"RTN","XDRDUP",52,0)
 ;
"RTN","XDRDUP",53,0)
 S XDRCD=+$P(^VA(15,XDRDPDA,0),U)
"RTN","XDRDUP",54,0)
 S XDRCD2=+$P(^VA(15,XDRDPDA,0),U,2)
"RTN","XDRDUP",55,0)
 S XDRFL=$O(^VA(15.1,"AGL",$P($P(^VA(15,XDRDPDA,0),U),";",2),0))
"RTN","XDRDUP",56,0)
 I 'XDRFL S XDRERR=6 D ^XDREMSG G ENX
"RTN","XDRDUP",57,0)
 S:XDRFL XDRD(0)=^VA(15.1,XDRFL,0)
"RTN","XDRDUP",58,0)
 D START
"RTN","XDRDUP",59,0)
ENX Q
"RTN","XDRDUP",60,0)
 ;
"RTN","XDRDUP",61,0)
EOJ ;
"RTN","XDRDUP",62,0)
 I $D(XDRDPDA),'$D(XDRDPDTI) K XDRFL,XDRDSCOR,XDRDTEST,XDRD,XDRQFLG,XDRCD,XDRCD2
"RTN","XDRDUP",63,0)
 Q
"RTN","XDRDUP",64,0)
VALUE ;
"RTN","XDRDUP",65,0)
 S DA=XDRCD2 K XDRCD2 S XDRCD2=DA
"RTN","XDRDUP",66,0)
 F XDRI=0:0 S XDRI=$O(XDRDSCOR("DR",XDRI)) Q:XDRI'>0  D
"RTN","XDRDUP",67,0)
 . S DIC=XDRI,DA=XDRCD2,DIQ(0)="I",DIQ="XX",DR=XDRDSCOR("DR",XDRI)
"RTN","XDRDUP",68,0)
 . K XX
"RTN","XDRDUP",69,0)
 . D EN^DIQ1
"RTN","XDRDUP",70,0)
 . M XDRCD2=XX K XX,DA,DIC,DR,DIQ
"RTN","XDRDUP",71,0)
 Q
"RTN","XDRDVAL")
0^66^B27476444
"RTN","XDRDVAL",1,0)
XDRDVAL ;CIOFO-SF.SEA/JLI - Check validity of data elements ;4/6/98  09:20
"RTN","XDRDVAL",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDVAL",3,0)
 ;;
"RTN","XDRDVAL",4,0)
 Q
"RTN","XDRDVAL",5,0)
 ;
"RTN","XDRDVAL",6,0)
DOENTRY(FILE,IEN,OUTROOT,HELP) ; ENTRY POINT TO PROCESS A SINGLE ENTRY
"RTN","XDRDVAL",7,0)
 ;N DATAROOT,MESGROOT,TEMPROOT,IENS,FIELD,X
"RTN","XDRDVAL",8,0)
 N ZTQUEUED ;S ZTQUEUED=1
"RTN","XDRDVAL",9,0)
 S DATAROOT=$NA(^TMP($J,"XDRDVAL","DATA"))
"RTN","XDRDVAL",10,0)
 S MESGROOT=$NA(^TMP($J,"XDRDVAL","MESG"))
"RTN","XDRDVAL",11,0)
 S TEMPROOT=$NA(^TMP($J,"XDRDVAL","TEMP"))
"RTN","XDRDVAL",12,0)
 K @DATAROOT,@MESGROOT,@TEMPROOT
"RTN","XDRDVAL",13,0)
 D DOGETS
"RTN","XDRDVAL",14,0)
 I $D(@TEMPROOT) D VALIDATE(TEMPROOT,$NA(@MESGROOT@(IEN,"VAL")))
"RTN","XDRDVAL",15,0)
 M @OUTROOT@(IEN)=@MESGROOT@(IEN)
"RTN","XDRDVAL",16,0)
 Q
"RTN","XDRDVAL",17,0)
DOGETS ;
"RTN","XDRDVAL",18,0)
 D GETS^DIQ(FILE,IEN,"**","EIN",DATAROOT,MESGROOT)
"RTN","XDRDVAL",19,0)
 ;I $D(@MESGROOT@("DIERR"))>1 M @OUTROOT@(FILE,IEN,"GET","DIERR")=@MESGROOT@("DIERR")
"RTN","XDRDVAL",20,0)
 K @MESGROOT
"RTN","XDRDVAL",21,0)
 F FILE=0:0 S FILE=$O(@DATAROOT@(FILE)) Q:FILE'>0  D
"RTN","XDRDVAL",22,0)
 . S IENS="" F  S IENS=$O(@DATAROOT@(FILE,IENS)) Q:IENS=""  D
"RTN","XDRDVAL",23,0)
 . . F FIELD=0:0 S FIELD=$O(@DATAROOT@(FILE,IENS,FIELD)) Q:FIELD'>0  D
"RTN","XDRDVAL",24,0)
 . . . I FILE=70.03,FIELD=.01 Q  ; RADIOLOGY LOGIC REQUIRES USER INPUT
"RTN","XDRDVAL",25,0)
 . . . I $O(@DATAROOT@(FILE,IENS,FIELD,""))>0 K @DATAROOT@(FILE,IENS,FIELD) Q  ; WORD PROCESSING FIELDS - SKIP
"RTN","XDRDVAL",26,0)
 . . . S Y=$G(@DATAROOT@(FILE,IENS,FIELD,"I")) I Y="" Q  ; SKIP COMPUTED FIELDS
"RTN","XDRDVAL",27,0)
 . . . S X=$G(@DATAROOT@(FILE,IENS,FIELD,"E"))
"RTN","XDRDVAL",28,0)
 . . . S @TEMPROOT@(FILE,IENS,FIELD)=$S(X=Y:X,1:X_U_Y)
"RTN","XDRDVAL",29,0)
 . . . Q
"RTN","XDRDVAL",30,0)
 . . Q
"RTN","XDRDVAL",31,0)
 . Q
"RTN","XDRDVAL",32,0)
 Q
"RTN","XDRDVAL",33,0)
 ;
"RTN","XDRDVAL",34,0)
VALIDATE(DATA,MESG) ; VALIDATE DATA IN 'DATA' RETURN ERRORS IN 'MESG'
"RTN","XDRDVAL",35,0)
 ;N FILE,FIELD,RESULT,VAL,IENS,I,XDRDVALF,TOPFILE,FIRSTLVL
"RTN","XDRDVAL",36,0)
 S XDRDVALF=1
"RTN","XDRDVAL",37,0)
 F FILE=0:0 S FILE=$O(@DATA@(FILE)) Q:FILE'>0  D
"RTN","XDRDVAL",38,0)
 . S TOPFILE=($G(^DD(FILE,0,"UP"))'>0),FIRSTLVL=0
"RTN","XDRDVAL",39,0)
 . I 'TOPFILE S I=$G(^DD(FILE,0,"UP")) I $G(^DD(I,0,"UP"))'>0 S FIRSTLVL=1
"RTN","XDRDVAL",40,0)
 . S IENS="" F  S IENS=$O(@DATA@(FILE,IENS)) Q:IENS=""  D
"RTN","XDRDVAL",41,0)
 . . F FIELD=0:0 S FIELD=$O(@DATA@(FILE,IENS,FIELD)) Q:FIELD'>0  D
"RTN","XDRDVAL",42,0)
 . . . S (X,VAL)=$P(@DATA@(FILE,IENS,FIELD),U)
"RTN","XDRDVAL",43,0)
 . . . S YVAL=$S(@DATA@(FILE,IENS,FIELD)[U:$P(@DATA@(FILE,IENS,FIELD),U,2),1:X)
"RTN","XDRDVAL",44,0)
 . . . I 'TOPFILE,(FIRSTLVL&(FIELD'=.01))!'FIRSTLVL Q
"RTN","XDRDVAL",45,0)
 . . . I FILE=2.101,FIELD=.01 Q  ; DISPOSITON DATE/TIME HAS SPCL PROCESSING
"RTN","XDRDVAL",46,0)
 . . . I FILE=2,FIELD=63 Q  ; LAB POINTER HAS SPCL PROCESSING
"RTN","XDRDVAL",47,0)
 . . . I FILE=2,FIELD=.09 Q  ; SSN WILL BE ENTERED AS INTERNAL VALUE
"RTN","XDRDVAL",48,0)
 . . . I FILE=354,FIELD=.03 Q  ; COPAY EXEMPT STATUS DATE -- BAD
"RTN","XDRDVAL",49,0)
 . . . D CHKVALID(MESG,FILE,IENS,FIELD,VAL,YVAL)
"RTN","XDRDVAL",50,0)
 . . . Q
"RTN","XDRDVAL",51,0)
 . . Q
"RTN","XDRDVAL",52,0)
 . Q
"RTN","XDRDVAL",53,0)
 Q
"RTN","XDRDVAL",54,0)
 ;
"RTN","XDRDVAL",55,0)
CHKVALID(MESG,FILE,IENS,FIELD,EXTVAL,INTVAL,HELP) ;
"RTN","XDRDVAL",56,0)
 ;
"RTN","XDRDVAL",57,0)
 I $$NEWERR^%ZTER() N $ETRAP,$ESTACK S $ETRAP="D ERR^XDRDVAL"
"RTN","XDRDVAL",58,0)
 E  S X="ERR^XDRDVAL",@^%ZOSF("TRAP")
"RTN","XDRDVAL",59,0)
 S IOP="XDRBROWSER1" D ^%ZIS Q:POP  U IO
"RTN","XDRDVAL",60,0)
 S XMESG=$NA(^TMP("XDRDVAL-M")) K @XMESG
"RTN","XDRDVAL",61,0)
 S ^TMP($J,"LAST","FILE")=FILE,^("IENS")=IENS,^("FIELD")=FIELD,^("X")=EXTVAL,^("Y")=INTVAL
"RTN","XDRDVAL",62,0)
 S Y1=EXTVAL D
"RTN","XDRDVAL",63,0)
 . S RESULT="^"
"RTN","XDRDVAL",64,0)
 . I $P(^DD(FILE,FIELD,0),U,2)["S" S Y1=INTVAL
"RTN","XDRDVAL",65,0)
 . I $P(^DD(FILE,FIELD,0),U,2)["V" D
"RTN","XDRDVAL",66,0)
 . . N Z S Z=$P(INTVAL,";",2) Q:Z=""
"RTN","XDRDVAL",67,0)
 . . S Z=$P($G(@("^"_Z_"0)")),U,1)
"RTN","XDRDVAL",68,0)
 . . S Y1=Z_".`"_$P(INTVAL,";")
"RTN","XDRDVAL",69,0)
 . . Q
"RTN","XDRDVAL",70,0)
 . N DA,D0,DIC,DIE
"RTN","XDRDVAL",71,0)
 . D MAKEGLO(FILE,IENS,.DIC,.DA) Q:DA'>0
"RTN","XDRDVAL",72,0)
 . S D0=$P(IENS,",",$L(IENS,",")-1),DIE=DIC,DIC(0)=""
"RTN","XDRDVAL",73,0)
 . S EXCODE=$P(^DD(FILE,FIELD,0),U,5,999)
"RTN","XDRDVAL",74,0)
 . I $P(^DD(FILE,FIELD,0),U,2)["P" S Y1=$S(FILE=2.001:"",1:"`")_INTVAL,Y=INTVAL S Z=U_$P(^(0),U,3),DIC=Z I $D(@(Z_INTVAL_",0)"))
"RTN","XDRDVAL",75,0)
 . S X=Y1,FILEA=FILE X EXCODE I $D(X) S RESULT=""
"RTN","XDRDVAL",76,0)
 . Q
"RTN","XDRDVAL",77,0)
 I $G(RESULT)="^",$G(HELP)["E" M @MESG@(FILE,IENS,FIELD)=^TMP("XDRDVAL-M")
"RTN","XDRDVAL",78,0)
 K @XMESG
"RTN","XDRDVAL",79,0)
 I RESULT="",FIELD=.01 D CHKNM ; CHECK FOR ,0,"NM", PROBLEM
"RTN","XDRDVAL",80,0)
 I $G(RESULT)="^" S @MESG@(FILE,IENS,FIELD,"INVALID")=INTVAL_$S(INTVAL'=EXTVAL:U_EXTVAL,1:"")
"RTN","XDRDVAL",81,0)
 U IO D ^%ZISC K ^TMP("DDB",$J,1)
"RTN","XDRDVAL",82,0)
 F I=2:1 Q:'$D(^TMP("DDB",$J,I))  S ^(I-1)=^TMP("DDB",$J,I) K ^(I)
"RTN","XDRDVAL",83,0)
 I $D(^TMP("DDB",$J)) M @MESG@(FILE,IENS,FIELD,"NOTE")=^TMP("DDB",$J)
"RTN","XDRDVAL",84,0)
 Q
"RTN","XDRDVAL",85,0)
 ;
"RTN","XDRDVAL",86,0)
MAKEGLO(FILENUM,IENS,GLOB,DASTR) ;
"RTN","XDRDVAL",87,0)
 N I,ERRFLG,DAVAL,J,FILE,FLD,NODE
"RTN","XDRDVAL",88,0)
 S GLOB="",ERRFLG=0 K DASTR
"RTN","XDRDVAL",89,0)
 F I=1:1 S FILE=FILENUM,DAVAL(I)=+IENS Q:$D(^DIC(FILE,0,"GL"))  D  Q:ERRFLG
"RTN","XDRDVAL",90,0)
 . S FILENUM=$G(^DD(FILE,0,"UP")) I FILENUM="" S ERRFLG=1 Q
"RTN","XDRDVAL",91,0)
 . S FLD=$O(^DD(FILENUM,"SB",FILE,0)) I FLD'>0 S ERRFLG=1 Q
"RTN","XDRDVAL",92,0)
 . S NODE=$P($P($G(^DD(FILENUM,FLD,0)),U,4),";") I NODE="" S ERRFLG=1 Q
"RTN","XDRDVAL",93,0)
 . S GLOB=""""_NODE_""","_$S(GLOB="":"",1:DAVAL(I)_",")_GLOB
"RTN","XDRDVAL",94,0)
 . S IENS=$P(IENS,",",2,99)
"RTN","XDRDVAL",95,0)
 . Q
"RTN","XDRDVAL",96,0)
 I ERRFLG S DASTR=-1,GLOB="" Q
"RTN","XDRDVAL",97,0)
 S GLOB=^DIC(FILE,0,"GL")_$S(GLOB="":"",1:DAVAL(I)_",")_GLOB
"RTN","XDRDVAL",98,0)
 F J=2:1:I S DASTR(J-1)=DAVAL(J)
"RTN","XDRDVAL",99,0)
 S DASTR=DAVAL(1)
"RTN","XDRDVAL",100,0)
 Q
"RTN","XDRDVAL",101,0)
 ;
"RTN","XDRDVAL",102,0)
CHKNM ; CHECK FOR PROBLEM WITH NM NODE OF SUBFILE NOT BEING CORRECT
"RTN","XDRDVAL",103,0)
 N UFILE,UNAME,UFLD
"RTN","XDRDVAL",104,0)
 S UFILE=$G(^DD(FILE,0,"UP")) I UFILE'>0 Q
"RTN","XDRDVAL",105,0)
 S UFLD=$O(^DD(UFILE,"SB",FILE,"")) Q:UFLD'>0
"RTN","XDRDVAL",106,0)
 S UNAME=$P(^DD(UFILE,UFLD,0),U)
"RTN","XDRDVAL",107,0)
 I $O(^DD(FILE,0,"NM",""))'=UNAME D
"RTN","XDRDVAL",108,0)
 . S RESULT="^"
"RTN","XDRDVAL",109,0)
 . W !,"First entry in ^DD("_FILE_",0,""NM"", does not match field name "_UNAME_" in file "_UFILE_".  This will be rejected by UPDATE^DIE."
"RTN","XDRDVAL",110,0)
 Q
"RTN","XDRDVAL",111,0)
 ;
"RTN","XDRDVAL",112,0)
ERR ; On an error mark status as error, and save the error message
"RTN","XDRDVAL",113,0)
 ;
"RTN","XDRDVAL",114,0)
 K X S RESULT="^"
"RTN","XDRDVAL",115,0)
 S $ECODE=""
"RTN","XDRDVAL",116,0)
 S ^TMP("DDB",$J,2)=$ZE
"RTN","XDRDVAL",117,0)
 Q
"RTN","XDRDVAL",118,0)
 ;
"RTN","XDRDVAL",119,0)
OPEN ;
"RTN","XDRDVAL",120,0)
 S DDBRZIS=1,DDBDMSG=""
"RTN","XDRDVAL",121,0)
 I '$D(XDRDVALF) U IO(0) W !,"...ONE MOMENT..." U IO
"RTN","XDRDVAL",122,0)
 Q
"RTN","XDRDVAL",123,0)
 ;
"RTN","XDRDVAL",124,0)
CLOSE ;
"RTN","XDRDVAL",125,0)
 S DDBRZIS=$G(DDBRZIS,1)
"RTN","XDRDVAL",126,0)
 N C,CHAR,DDBROS,EOF,X
"RTN","XDRDVAL",127,0)
 K ^TMP("DDB",$J)
"RTN","XDRDVAL",128,0)
 S DDBROS=^%ZOSF("OS"),EOF="EOF-End Of File"
"RTN","XDRDVAL",129,0)
 S CHAR="" F I=1:1:31 S CHAR=CHAR_$C(I)
"RTN","XDRDVAL",130,0)
 U IO W !,EOF,!
"RTN","XDRDVAL",131,0)
 S DDBRZIS("REWIND")=$$REWIND^%ZIS(IO,IOT,IOPAR)
"RTN","XDRDVAL",132,0)
 I 'DDBRZIS("REWIND") S DDBRZIS=0 U IO(0) W $C(7),!!?5,"<< UNABLE TO REWIND FILE>>",! H 3 Q
"RTN","XDRDVAL",133,0)
 U IO
"RTN","XDRDVAL",134,0)
 S C=0
"RTN","XDRDVAL",135,0)
 F  R X:1 Q:X="EOF-End Of File"  D
"RTN","XDRDVAL",136,0)
 .S X=$TR(X,CHAR)
"RTN","XDRDVAL",137,0)
 .S:X']"" X=" "
"RTN","XDRDVAL",138,0)
 .S C=C+1,^TMP("DDB",$J,C)=$E(X,1,255) Q
"RTN","XDRDVAL",139,0)
 .Q
"RTN","XDRDVAL",140,0)
 Q
"RTN","XDRDVAL",141,0)
 Q
"RTN","XDRDVAL1")
0^67^B45647037
"RTN","XDRDVAL1",1,0)
XDRDVAL1 ;SF-CIOFO/JLI - CHECK SPECIFIED ENTRY FOR PROBLEMS ;4/6/98  09:21
"RTN","XDRDVAL1",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDVAL1",3,0)
EN ;
"RTN","XDRDVAL1",4,0)
 N MFILE,FILENAME,DIR,XDR,FILE,XDRY,FILEDIC
"RTN","XDRDVAL1",5,0)
 ;
"RTN","XDRDVAL1",6,0)
 D ^%ZIS Q:POP  I IO'=IO(0) S XDRION=ION U IO D ^%ZISC
"RTN","XDRDVAL1",7,0)
LOOP ;
"RTN","XDRDVAL1",8,0)
 S DATA=$NA(^TMP($J,"BB"))
"RTN","XDRDVAL1",9,0)
 K @DATA
"RTN","XDRDVAL1",10,0)
 U IO(0)
"RTN","XDRDVAL1",11,0)
 S MFILE=$$FILE^XDRDPICK() Q:MFILE'>0  S FILENAME=$P(^DIC(MFILE,0),U),FILEDIC=^DIC(MFILE,0,"GL")
"RTN","XDRDVAL1",12,0)
 W !!! S DIC=MFILE,DIC(0)="AEM" ;K DIR S DIR(0)="PO^"_MFILE_":AEM",DIR("A")="Select "_FILENAME
"RTN","XDRDVAL1",13,0)
 D ^DIC I Y'>0 U IO D ^%ZISC Q  ;D ^DIR K DIR I Y'>0 U IO D ^%ZISC Q
"RTN","XDRDVAL1",14,0)
 S XDRY=Y
"RTN","XDRDVAL1",15,0)
 W !,"    .... WORKING HARD (may take a while)...",!
"RTN","XDRDVAL1",16,0)
 D EN1(MFILE,+XDRY,DATA)
"RTN","XDRDVAL1",17,0)
 I $D(XDRION) S IOP=XDRION D ^%ZIS I 1
"RTN","XDRDVAL1",18,0)
 E  S IO=IO(0)
"RTN","XDRDVAL1",19,0)
 U IO W @IOF,!!!
"RTN","XDRDVAL1",20,0)
 W !!,"DFN=",+XDRY,"    ",$P(@(FILEDIC_(+XDRY)_",0)"),U) I MFILE=2!(MFILE=200) W "  [",$P(^(0),U,9),"]"
"RTN","XDRDVAL1",21,0)
 I '$D(@DATA) W !?10,"No Problems Found....",!! G LOOP
"RTN","XDRDVAL1",22,0)
 D LISTPROB($NA(@DATA@(+XDRY,"VAL")))
"RTN","XDRDVAL1",23,0)
 I $D(XDRION) U IO D ^%ZISC
"RTN","XDRDVAL1",24,0)
 G LOOP
"RTN","XDRDVAL1",25,0)
 Q
"RTN","XDRDVAL1",26,0)
 ;
"RTN","XDRDVAL1",27,0)
EN1(FILE,IEN,ARRAY) ;
"RTN","XDRDVAL1",28,0)
 D SETUP^XDRMERG(FILE)
"RTN","XDRDVAL1",29,0)
 D DOENTRY^XDRDVAL(FILE,IEN,ARRAY)
"RTN","XDRDVAL1",30,0)
 F FILEX=0:0 S FILEX=$O(^TMP($J,"XFIL",FILEX)) Q:FILEX'>0  S GLOB=^(FILEX) D
"RTN","XDRDVAL1",31,0)
 . S X1=$G(^TMP($J,"XGLOB",GLOB,0,1)) Q:X1=""
"RTN","XDRDVAL1",32,0)
 . I $P(X1,U,3)'="DINUM" Q
"RTN","XDRDVAL1",33,0)
 . D DOENTRY^XDRDVAL(FILEX,IEN,ARRAY)
"RTN","XDRDVAL1",34,0)
 . Q
"RTN","XDRDVAL1",35,0)
 Q
"RTN","XDRDVAL1",36,0)
 ;
"RTN","XDRDVAL1",37,0)
LISTPROB(DATA) ;
"RTN","XDRDVAL1",38,0)
 S XDREXIT=0
"RTN","XDRDVAL1",39,0)
 F FILE=0:0 S FILE=$O(@DATA@(FILE)) Q:FILE'>0  D  Q:XDREXIT
"RTN","XDRDVAL1",40,0)
 . S FILENAME=$$FILENAME(FILE),NEWHEAD=1
"RTN","XDRDVAL1",41,0)
 . S IENS="" F  S IENS=$O(@DATA@(FILE,IENS)) Q:IENS=""  D  Q:XDREXIT
"RTN","XDRDVAL1",42,0)
 . . F FIELD=0:0 S FIELD=$O(@DATA@(FILE,IENS,FIELD)) Q:FIELD'>0  D  Q:XDREXIT
"RTN","XDRDVAL1",43,0)
 . . . S X=$G(@DATA@(FILE,IENS,FIELD,"INVALID")) Q:X=""
"RTN","XDRDVAL1",44,0)
 . . . S NNOTES=0 I $D(@DATA@(FILE,IENS,FIELD,"NOTE")) D
"RTN","XDRDVAL1",45,0)
 . . . . F NNOTE=0:0 S NNOTE=$O(@DATA@(FILE,IENS,FIELD,"NOTE",NNOTE)) Q:NNOTE'>0  S NNOTES=NNOTES+1
"RTN","XDRDVAL1",46,0)
 . . . . Q
"RTN","XDRDVAL1",47,0)
 . . . S NLINES=NNOTES+3
"RTN","XDRDVAL1",48,0)
 . . . I (IOSL-$Y-4)'>NLINES D:$E(IOST)["C"  Q:XDREXIT  W @IOF S NEWHEAD=1
"RTN","XDRDVAL1",49,0)
 . . . . N DIR,Y,X
"RTN","XDRDVAL1",50,0)
 . . . . S DIR(0)="E" D ^DIR I 'Y S XDREXIT=1
"RTN","XDRDVAL1",51,0)
 . . . . Q
"RTN","XDRDVAL1",52,0)
 . . . W:NEWHEAD !!!,FILENAME S NEWHEAD=0
"RTN","XDRDVAL1",53,0)
 . . . W !,"Field ",FIELD," [",$P(^DD(FILE,FIELD,0),U),"]    IENS=",IENS
"RTN","XDRDVAL1",54,0)
 . . . W !," value: ",X
"RTN","XDRDVAL1",55,0)
 . . . F NNOTE=0:0 S NNOTE=$O(@DATA@(FILE,IENS,FIELD,"NOTE",NNOTE)) Q:NNOTE'>0  W !,"    ",^(NNOTE)
"RTN","XDRDVAL1",56,0)
 . . . Q
"RTN","XDRDVAL1",57,0)
 . . Q
"RTN","XDRDVAL1",58,0)
 . Q
"RTN","XDRDVAL1",59,0)
 Q
"RTN","XDRDVAL1",60,0)
 ;
"RTN","XDRDVAL1",61,0)
FILENAME(FILE) ;
"RTN","XDRDVAL1",62,0)
 N FILENAME,NFILE
"RTN","XDRDVAL1",63,0)
 S FILENAME="",NFILE=FILE
"RTN","XDRDVAL1",64,0)
 F  Q:$D(^DIC(FILE,0))  S FILENAME=FILENAME_$O(^DD(FILE,0,"NM",""))_" subfile of " S FILE=$G(^DD(FILE,0,"UP")) Q:FILE'>0
"RTN","XDRDVAL1",65,0)
 I FILE>0 S FILENAME="File "_NFILE_" ["_FILENAME_$P($G(^DIC(FILE,0)),U)_" file]"
"RTN","XDRDVAL1",66,0)
 Q FILENAME
"RTN","XDRDVAL1",67,0)
 ;
"RTN","XDRDVAL1",68,0)
ENPAIR(FILE,ARRAY,MERGEFLG) ; ENTRY POINT FOR CHECKING AN ARRAY OF PAIRS AT START OF MERGE
"RTN","XDRDVAL1",69,0)
 N XDRMESG,FROM,TO,TOVARBL,FRVARBL,DUPIEN,DATA,NLINES,XDRFDA1
"RTN","XDRDVAL1",70,0)
 ;
"RTN","XDRDVAL1",71,0)
 S XDRMESG=$NA(^TMP("XDRVALMESG",$J)) K @XDRMESG
"RTN","XDRDVAL1",72,0)
 S XDRVDATA=$NA(^TMP("XDRVALDATA",$J)) K @XDRVDATA
"RTN","XDRDVAL1",73,0)
 I $G(MERGEFLG)>0 S XDRFDA1=$$FIND1^DIC(15.23,","_MERGEFLG_",","Q","DATA CHECKING")
"RTN","XDRDVAL1",74,0)
 ;
"RTN","XDRDVAL1",75,0)
 F FROM=0:0 S FROM=$O(@ARRAY@(FROM)) Q:FROM'>0  D
"RTN","XDRDVAL1",76,0)
 . I $G(MERGEFLG)>0 S ^VA(15.2,MERGEFLG,3,XDRFDA1,1)=$$NOW^XLFDT()_U_U_FROM
"RTN","XDRDVAL1",77,0)
 . S TO=$O(@ARRAY@(FROM,0))
"RTN","XDRDVAL1",78,0)
 . D CHKMERG^XDRDVAL2(FILE,FROM,TO,$NA(@XDRVDATA@(FROM,"VAL"))) ; GET BACK ANY PROBLEMS
"RTN","XDRDVAL1",79,0)
 . F  S TO=$O(@ARRAY@(FROM,TO)) Q:TO'>0  D  ;   FROM CAN'T POINT TO MORE THAN ONE PLACE
"RTN","XDRDVAL1",80,0)
 . . S FRVARBL=$O(@ARRAY@(FROM,TO,0)) I FRVARBL="" S FRVARBL=0
"RTN","XDRDVAL1",81,0)
 . . S TOVARBL=$O(@ARRAY@(FROM,TO,FRVARBL,0)) I TOVARBL="" S TOVARBL=0
"RTN","XDRDVAL1",82,0)
 . . I TOVARBL=0 S DUPIEN=+$G(@ARRAY@(FROM,TO))
"RTN","XDRDVAL1",83,0)
 . . E  S DUPIEN=+$G(@ARRAY@(FROM,TO,FRVARBL,TOVARBL))
"RTN","XDRDVAL1",84,0)
 . . D RMOVPAIR(FROM,TO,DUPIEN,ARRAY)
"RTN","XDRDVAL1",85,0)
 . . Q
"RTN","XDRDVAL1",86,0)
 . Q
"RTN","XDRDVAL1",87,0)
 I $D(@XDRVDATA) D  ;   GOT BACK PROBLEMS ON ONE OR MORE FIELDS
"RTN","XDRDVAL1",88,0)
 . I $G(MERGEFLG)>0 N XDRDVALF S XDRDVALF=1 S IOP="XDRBROWSER1" D ^%ZIS
"RTN","XDRDVAL1",89,0)
 . I $G(MERGEFLG)'>0,$G(XDRION)'="" S IOP=XDRION D ^%ZIS
"RTN","XDRDVAL1",90,0)
 . U IO
"RTN","XDRDVAL1",91,0)
 . F FROM=0:0 S FROM=$O(@XDRVDATA@(FROM)) Q:FROM'>0  D
"RTN","XDRDVAL1",92,0)
 . . S TO=$O(@ARRAY@(FROM,0))
"RTN","XDRDVAL1",93,0)
 . . S FRVARBL=$O(@ARRAY@(FROM,TO,0)) I FRVARBL="" S FRVARBL=0
"RTN","XDRDVAL1",94,0)
 . . S TOVARBL=$O(@ARRAY@(FROM,TO,FRVARBL,0)) I TOVARBL="" S TOVARBL=0
"RTN","XDRDVAL1",95,0)
 . . I TOVARBL=0 S DUPIEN=+$G(@ARRAY@(FROM,TO))
"RTN","XDRDVAL1",96,0)
 . . E  S DUPIEN=+$G(@ARRAY@(FROM,TO,FRVARBL,TOVARBL))
"RTN","XDRDVAL1",97,0)
 . . W !!
"RTN","XDRDVAL1",98,0)
 . . I DUPIEN>0 D  ;     HAS AN ENTRY IN FILE 15
"RTN","XDRDVAL1",99,0)
 . . . N X,DIRECT,ORIGTO,ORIGFR
"RTN","XDRDVAL1",100,0)
 . . . S X=^VA(15,DUPIEN,0) S DIRECT=$P(X,U,4)
"RTN","XDRDVAL1",101,0)
 . . . I DIRECT=1 S ORIGFR=+X,ORIGTO=+$P(X,U,2)
"RTN","XDRDVAL1",102,0)
 . . . E  S ORIGFR=+$P(X,U,2),ORIGTO=+X
"RTN","XDRDVAL1",103,0)
 . . . ;
"RTN","XDRDVAL1",104,0)
 . . . I ORIGTO'=TO D  ;  THE ENTRY WAS REPOINTED TO THE CURRENT 'TO' ENTRY
"RTN","XDRDVAL1",105,0)
 . . . . D PAIRID(FILE,ORIGFR,ORIGTO,DUPIEN) ; OUPUT ORIGINAL PAIR ID
"RTN","XDRDVAL1",106,0)
 . . . . W !,"       ********  REDIRECTED TO"
"RTN","XDRDVAL1",107,0)
 . . . . Q
"RTN","XDRDVAL1",108,0)
 . . . Q
"RTN","XDRDVAL1",109,0)
 . . ;
"RTN","XDRDVAL1",110,0)
 . . D PAIROUT(FILE,FROM,TO,DUPIEN,$NA(@XDRVDATA@(FROM,"VAL"))) ; OUTPUT PAIR ID AND PROBLEMS
"RTN","XDRDVAL1",111,0)
 . . ;
"RTN","XDRDVAL1",112,0)
 . . D RMOVPAIR(FROM,TO,DUPIEN,ARRAY) ; REMOVE PAIR FROM MERGE - NOT FROM FILE 15
"RTN","XDRDVAL1",113,0)
 . . Q
"RTN","XDRDVAL1",114,0)
 . U IO D ^%ZISC
"RTN","XDRDVAL1",115,0)
 . I $G(MERGEFLG)>0 D
"RTN","XDRDVAL1",116,0)
 . . N XMSUB,XMTEXT
"RTN","XDRDVAL1",117,0)
 . . S XMSUB="MERGE PAIRS EXCLUDED DUE TO DATA PROBLEMS"
"RTN","XDRDVAL1",118,0)
 . . S XMTEXT="^TMP(""DDB"",$J,"
"RTN","XDRDVAL1",119,0)
 . . D SENDMESG(XMSUB,XMTEXT)
"RTN","XDRDVAL1",120,0)
 . . Q
"RTN","XDRDVAL1",121,0)
 . Q
"RTN","XDRDVAL1",122,0)
 Q
"RTN","XDRDVAL1",123,0)
 ;
"RTN","XDRDVAL1",124,0)
SENDMESG(XMSUB,XMTEXT) ;
"RTN","XDRDVAL1",125,0)
 N XMY,XDRGRP,XDRGRPN,XMDUZ,XMCHAN
"RTN","XDRDVAL1",126,0)
 S XDRGRP=$$GET1^DIQ(15.1,"2,",.29,"I")
"RTN","XDRDVAL1",127,0)
 S:XDRGRP>0 XDRGRPN=$$GET1^DIQ(3.8,XDRGRP,.01)
"RTN","XDRDVAL1",128,0)
 S XDRGRP=$S(XDRGRP>0:"G."_XDRGRPN,1:"")
"RTN","XDRDVAL1",129,0)
 S:XDRGRP'="" XMY(XDRGRP)=""
"RTN","XDRDVAL1",130,0)
 S:XDRGRP="" XMY(.5)="" ;If no mail grp found, send msg to postmaster
"RTN","XDRDVAL1",131,0)
 S XMDUZ=.5,XMCHAN=1
"RTN","XDRDVAL1",132,0)
 D ^XMD
"RTN","XDRDVAL1",133,0)
 Q
"RTN","XDRDVAL1",134,0)
 ;
"RTN","XDRDVAL1",135,0)
RMOVPAIR(FROM,TO,IEN,ARRAY) ;
"RTN","XDRDVAL1",136,0)
 N X,MERGE,IENS,XXX,DA,DIK
"RTN","XDRDVAL1",137,0)
 S JLICNT=$G(JLICNT)+1,^TMP("XDRRMOV",JLICNT,$H,1)=FROM_U_TO_U_IEN_U_ARRAY
"RTN","XDRDVAL1",138,0)
 I IEN>0 D  ; ENTRY IS IN FILE 15
"RTN","XDRDVAL1",139,0)
 . S IENS=IEN_","
"RTN","XDRDVAL1",140,0)
 . S X=^VA(15,IEN,0),MERGE=$P(X,U,20) ; GET MERGE NUMBER
"RTN","XDRDVAL1",141,0)
 . S JLICNT=$G(JLICNT)+1,^TMP("XDRRMOV",JLICNT,$H,2)=MERGE_U_X
"RTN","XDRDVAL1",142,0)
 . S XXX(15,IENS,.05)=1 ; SET MERGE STATUS BACK TO READY
"RTN","XDRDVAL1",143,0)
 . S XXX(15,IENS,.13)=0 ; REMOVE APPROVAL FOR MERGE
"RTN","XDRDVAL1",144,0)
 . S XXX(15,IENS,.14)="@" ; AND INDICATOR OF WHO APPROVED
"RTN","XDRDVAL1",145,0)
 . S XXX(15,IENS,.2)="@" ; REMOVE MERGE PROCESS
"RTN","XDRDVAL1",146,0)
 . D FILE^DIE("","XXX")
"RTN","XDRDVAL1",147,0)
 . ;
"RTN","XDRDVAL1",148,0)
 . ;S IENS=","_MERGE_",",DA=$$FIND1^DIC(15.22,IENS,"",FROM) ; GET IEN FOR THIS ENTRY IN
"RTN","XDRDVAL1",149,0)
 . F DA=0:0 S DA=$O(^VA(15.2,MERGE,2,DA)) Q:DA'>0  I $P(^(DA,0),U,3)=IEN Q
"RTN","XDRDVAL1",150,0)
 . I DA>0 S DIK="^VA(15.2,"_MERGE_",2,",DA(1)=MERGE D ^DIK ;    LIST OF PAIRS, AND DELETE IT
"RTN","XDRDVAL1",151,0)
 ;
"RTN","XDRDVAL1",152,0)
 K @ARRAY@(FROM,TO) ; AND KILL THE ACTUAL ENTRY IN ARRAY
"RTN","XDRDVAL1",153,0)
 Q
"RTN","XDRDVAL1",154,0)
 ;
"RTN","XDRDVAL1",155,0)
PAIROUT(FILE,FROM,TO,IEN,DATA) ;
"RTN","XDRDVAL1",156,0)
 D PAIRID(FILE,FROM,TO,IEN)
"RTN","XDRDVAL1",157,0)
 D LISTPROB^XDRDVAL1(DATA)
"RTN","XDRDVAL1",158,0)
 Q
"RTN","XDRDVAL1",159,0)
 ;
"RTN","XDRDVAL1",160,0)
PAIRID(FILE,FROM,TO,IEN) ;
"RTN","XDRDVAL1",161,0)
 N FRNAME,FRSSN,TONAME,TOSSN,FILEDIC
"RTN","XDRDVAL1",162,0)
 S FILEDIC=^DIC(FILE,0,"GL")
"RTN","XDRDVAL1",163,0)
 S FRNAME=$P($G(@(FILEDIC_FROM_",0)")),U),FRSSN=$P($G(^(0)),U,9),FRNAME=$$STRIP(FRNAME)
"RTN","XDRDVAL1",164,0)
 S TONAME=$P($G(@(FILEDIC_TO_",0)")),U),TOSSN=$P($G(^(0)),U,9),TONAME=$$STRIP(TONAME)
"RTN","XDRDVAL1",165,0)
 W !,"FROM: DFN=",FROM,"   ",FRNAME W:FILE=2!(FILE=200) " [",FRSSN,"]" I IEN>0 W "    FILE 15 IEN: ",IEN
"RTN","XDRDVAL1",166,0)
 W !,"TO:   DFN=",TO,"    ",TONAME W:FILE=2!(FILE=200) " [",TOSSN,"]"
"RTN","XDRDVAL1",167,0)
 Q
"RTN","XDRDVAL1",168,0)
 ;
"RTN","XDRDVAL1",169,0)
STRIP(X1) ;
"RTN","XDRDVAL1",170,0)
 F  Q:X1'["MERGING INTO"  S X1=$P($P(X1,"(",2,10),")",1,$L(X1,")")-1)
"RTN","XDRDVAL1",171,0)
 Q X1
"RTN","XDRDVAL2")
0^68^B36896923
"RTN","XDRDVAL2",1,0)
XDRDVAL2 ;SF-IRMFO.SEA/JLI - IDENTIFY FIELDS THAT NEED CHECKING FOR MERGE ;5/15/98  14:33
"RTN","XDRDVAL2",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRDVAL2",3,0)
 ;;
"RTN","XDRDVAL2",4,0)
 Q
"RTN","XDRDVAL2",5,0)
 ;
"RTN","XDRDVAL2",6,0)
CHKMERG(FILENUM,IENFROM,IENTO,ARRAY) ;
"RTN","XDRDVAL2",7,0)
 N XDRDVALF
"RTN","XDRDVAL2",8,0)
 S XDRDVALF=1
"RTN","XDRDVAL2",9,0)
 S FILE=FILENUM D SETUP^XDRMERG(2)
"RTN","XDRDVAL2",10,0)
 D CHKFMERG(FILE,IENFROM,IENTO,ARRAY)
"RTN","XDRDVAL2",11,0)
 S XGLOB="" F  S XGLOB=$O(^TMP($J,"XGLOB",XGLOB)) Q:XGLOB=""  D
"RTN","XDRDVAL2",12,0)
 . I $P($G(^TMP($J,"XGLOB",XGLOB,0,1)),U,3)="DINUM" S F=$P(^(1),U) D CHKFMERG(F,IENFROM,IENTO,ARRAY)
"RTN","XDRDVAL2",13,0)
 Q
"RTN","XDRDVAL2",14,0)
 ;
"RTN","XDRDVAL2",15,0)
CHKFMERG(XFILNO,IENFROM,IENTO,LOCATION) ; CHECK VALIDITY FOR MERGE OF TWO ENTRIES IN FILE
"RTN","XDRDVAL2",16,0)
 N F,FILE,FILENUM,XGLOB,NODE,NODE1,NODE2,NODEA,SFILE,XDRFROM,XDRTO,NODEA,VALUE,XVALUE,XDRXX,NODEB,DIK,DA,I,Y,VREF,XNN,IENTOSTR,DFN,XDRZZ
"RTN","XDRDVAL2",17,0)
 N XDRAA ; DEBUG STATEMENT
"RTN","XDRDVAL2",18,0)
 ;
"RTN","XDRDVAL2",19,0)
 S XDRDIC=$G(^DIC(XFILNO,0,"GL")) Q:XDRDIC=""
"RTN","XDRDVAL2",20,0)
 S IENTOSTR=IENTO_","
"RTN","XDRDVAL2",21,0)
 S DFN=IENTO
"RTN","XDRDVAL2",22,0)
 ;
"RTN","XDRDVAL2",23,0)
 ; CHECK FOR BROKEN LR NODES IF PATIENT FILE
"RTN","XDRDVAL2",24,0)
 ;
"RTN","XDRDVAL2",25,0)
 I XFILNO=2 F I=IENFROM,IENTO S J=$G(^DPT(I,"LR")) I J>0,($P(^LR(J,0),U,2)'=2)!($P(^LR(J,0),U,3)'=I) W !,"Broken ""LR"" node pointers for PATIENT file and LAB DATA FILE - DFN=",I,"   LRFN=",J
"RTN","XDRDVAL2",26,0)
 ;
"RTN","XDRDVAL2",27,0)
 ; NOW MERGE DATA GOING NODE BY NODE
"RTN","XDRDVAL2",28,0)
 ;
"RTN","XDRDVAL2",29,0)
 S NODE=""
"RTN","XDRDVAL2",30,0)
 F  D  Q:NODE=""
"RTN","XDRDVAL2",31,0)
 . S NODE1=$O(@(XDRDIC_IENFROM_","""_NODE_""")"))
"RTN","XDRDVAL2",32,0)
 . I NODE1="" S NODE="" Q  ; NOTHING MORE TO MOVE OVER
"RTN","XDRDVAL2",33,0)
 . S NODE2=$O(@(XDRDIC_IENTO_","""_NODE_""")"))
"RTN","XDRDVAL2",34,0)
 . I NODE2'="",NODE1]NODE2 S NODE=NODE2 Q  ; NODE ON TO, BUT NOT ON FROM - GO TO NEXT
"RTN","XDRDVAL2",35,0)
 . S NODE=NODE1
"RTN","XDRDVAL2",36,0)
 . I $D(@(XDRDIC_IENFROM_","""_NODE_""")"))=1 D  Q  ; SINGLE NODE, MERGE DATA
"RTN","XDRDVAL2",37,0)
 . . I NODE2]NODE1!(NODE2="") D  Q  ;  MISSING NODE, JUST MOVE IT OVER
"RTN","XDRDVAL2",38,0)
 . . . N XDRXX,FLD,N,J
"RTN","XDRDVAL2",39,0)
 . . . F N=0:0 S N=$O(^DD(XFILNO,"GL",NODE,N)) Q:N'>0  S FLD=$O(^(N,0)) I $O(^DD(XFILNO,FLD,1,0))>0 D
"RTN","XDRDVAL2",40,0)
 . . . . S X=0 F J=0:0 S J=$O(^DD(XFILNO,FLD,1,J)) Q:J'>0  I $O(^(J,0))>0 S X=1 Q
"RTN","XDRDVAL2",41,0)
 . . . . I X>0 D
"RTN","XDRDVAL2",42,0)
 . . . . . S XDRXX(XFILNO,IENTOSTR,FLD)=$$GETEXT(XDRDIC,IENFROM,XFILNO,FLD)
"RTN","XDRDVAL2",43,0)
 . . . I $D(XDRXX) D CHEKFDA("XDRXX",LOCATION)
"RTN","XDRDVAL2",44,0)
 . . I $D(@(XDRDIC_IENTO_","""_NODE_""")"))>1 Q  ; MISMATCH SKIP
"RTN","XDRDVAL2",45,0)
 . . N XDRXX,FLD
"RTN","XDRDVAL2",46,0)
 . . S X1=@(XDRDIC_IENFROM_","""_NODE_""")")
"RTN","XDRDVAL2",47,0)
 . . S (X2,X3)=@(XDRDIC_IENTO_","""_NODE_""")")
"RTN","XDRDVAL2",48,0)
 . . F XDRI=1:1 Q:X1=""  S X=$P(X1,U),X1=$P(X1,U,2,999) I X'="" D
"RTN","XDRDVAL2",49,0)
 . . . S Y=$P(X2,U,XDRI)
"RTN","XDRDVAL2",50,0)
 . . . I Y=""  D
"RTN","XDRDVAL2",51,0)
 . . . . S $P(X2,U,XDRI)=X
"RTN","XDRDVAL2",52,0)
 . . . . S FLD=$O(^DD(XFILNO,"GL",NODE,XDRI,0)) S JXFLD=FLD
"RTN","XDRDVAL2",53,0)
 . . . . I FLD>0,$O(^DD(XFILNO,FLD,1,0))>0 S XDRXX(XFILNO,IENTOSTR,FLD)=$$GETEXT(XDRDIC,IENFROM,XFILNO,FLD)
"RTN","XDRDVAL2",54,0)
 . . I X2'=X3 D
"RTN","XDRDVAL2",55,0)
 . . . I $D(XDRXX) D
"RTN","XDRDVAL2",56,0)
 . . . . N X2 D CHEKFDA("XDRXX",LOCATION)
"RTN","XDRDVAL2",57,0)
 . ;
"RTN","XDRDVAL2",58,0)
 . ; THE FOLLOWING HANDLES NODES THAT HAVE MULTIPLES
"RTN","XDRDVAL2",59,0)
 . ;
"RTN","XDRDVAL2",60,0)
 . S XDRFROM=XDRDIC_IENFROM_","""_NODE_""","
"RTN","XDRDVAL2",61,0)
 . S XDRTO=XDRDIC_IENTO_","""_NODE_""","
"RTN","XDRDVAL2",62,0)
 . I NODE="DIS",XFILNO=2 Q
"RTN","XDRDVAL2",63,0)
 . S IENTOSTR=IENTO_","
"RTN","XDRDVAL2",64,0)
 . D CHKSUBS(XDRFROM,XDRTO,IENTOSTR,IENTO)
"RTN","XDRDVAL2",65,0)
 Q
"RTN","XDRDVAL2",66,0)
 ;
"RTN","XDRDVAL2",67,0)
CHKSUBS(XDRFROM,XDRTO,IENTOSTR,XDRDASEQ) ;
"RTN","XDRDVAL2",68,0)
 N NODEA,SFILE,VALUE,XVALUE,XDRXX,XDRYY,YVALUE,XENTOSTR
"RTN","XDRDVAL2",69,0)
 N XDRAA,XDRZZ ; DEBUG STATEMENT
"RTN","XDRDVAL2",70,0)
 S SFILE=+$P($G(@(XDRFROM_"0)")),U,2)
"RTN","XDRDVAL2",71,0)
 I SFILE'>0 Q  ; NO FILE NUMBER, NOT FILE MANAGER COMPATIBLE
"RTN","XDRDVAL2",72,0)
 I $P($G(^DD(SFILE,.01,0)),U,2)["W" Q  ; HANDLE WORD PROCESSING FIELDS
"RTN","XDRDVAL2",73,0)
 F NODEA=0:0 S NODEA=$O(@(XDRFROM_NODEA_")")) Q:NODEA'>0  D
"RTN","XDRDVAL2",74,0)
 . S VALUE=$P($G(@(XDRFROM_NODEA_",0)")),U) ; GET .01 VALUE
"RTN","XDRDVAL2",75,0)
 . N XDRDT S XDRDT=^DD(SFILE,.01,0)
"RTN","XDRDVAL2",76,0)
 . I $P(XDRDT,U,2)["D" S XDRDT=$P(XDRDT,U,5,999),XDRDINUM=$S(XDRDT["DINUM":1,1:0) I XDRDINUM S XDRDT=0 D DINUMDAT Q:XDRDT  ; HANDLE DINUMED DATES BY SIMPLY MOVING THEM
"RTN","XDRDVAL2",77,0)
 . S YVALUE=0,XVALUE=0 I $D(^DD(SFILE,.001,0)) S YVALUE=NODEA I $D(@(XDRTO_NODEA_")")) S XVALUE=YVALUE
"RTN","XDRDVAL2",78,0)
 . I XVALUE=0,$P(^DD(SFILE,.01,0),U,5,99)["DINUM",$D(@(XDRTO_NODEA_")")) S XVALUE=NODEA
"RTN","XDRDVAL2",79,0)
 . I XVALUE=0 S XVALUE=+$$FIND1^DIC(SFILE,(","_IENTOSTR),"Q",VALUE) ; FIND CURRENT ENTRY NUMBER, IF PRESENT
"RTN","XDRDVAL2",80,0)
 . I XVALUE>0 D  Q  ; SUBFILE EXISTS IN IENTO, CHECK FOR LOWER SUBFILES
"RTN","XDRDVAL2",81,0)
 . . N X,X1,NODE,NEWFROM,NEWTO,NEWTOIEN
"RTN","XDRDVAL2",82,0)
 . . S NODE=""
"RTN","XDRDVAL2",83,0)
 . . F  S NODE=$O(@(XDRFROM_NODEA_","""_NODE_""")")) Q:NODE=""  D
"RTN","XDRDVAL2",84,0)
 . . . I $D(@(XDRFROM_NODEA_","""_NODE_""")"))'>1 Q
"RTN","XDRDVAL2",85,0)
 . . . S NEWFROM=XDRFROM_NODEA_","""_NODE_""","
"RTN","XDRDVAL2",86,0)
 . . . S NEWTO=XDRTO_XVALUE_","""_NODE_""","
"RTN","XDRDVAL2",87,0)
 . . . S NEWTOIEN=XVALUE_","_IENTOSTR
"RTN","XDRDVAL2",88,0)
 . . . D CHKSUBS(NEWFROM,NEWTO,NEWTOIEN,(XVALUE_U_XDRDASEQ))
"RTN","XDRDVAL2",89,0)
 . K XDRYY I YVALUE>0 S XDRYY(1)=YVALUE
"RTN","XDRDVAL2",90,0)
 . S XENTOSTR="+1,"_IENTOSTR
"RTN","XDRDVAL2",91,0)
 . S XDRFILTY=$P($G(^DD(SFILE,.01,0)),U,2)
"RTN","XDRDVAL2",92,0)
 . ;I XDRFILTY["P",SFILE'=2.011 S VALUE="`"_VALUE
"RTN","XDRDVAL2",93,0)
 . ;I XDRFILTY["V" D
"RTN","XDRDVAL2",94,0)
 . ;. N Y S Y=$P(VALUE,";",2) Q:Y=""
"RTN","XDRDVAL2",95,0)
 . ;. S Y=$P($G(@("^"_Y_"0)")),U) Q:Y=""
"RTN","XDRDVAL2",96,0)
 . ;. S VALUE=Y_".`"_(+VALUE)
"RTN","XDRDVAL2",97,0)
 . ;. Q
"RTN","XDRDVAL2",98,0)
 . S VALUE=$$GETEXT(XDRFROM,NODEA,SFILE) ;I XDRFILTY'["P"&(XDRFILTY'["V"),XDRFILTY'["D",SFILE'=2.011 S VALUE=$$GETEXT(XDRFROM,NODEA,SFILE)
"RTN","XDRDVAL2",99,0)
 . S XDRXX(SFILE,XENTOSTR,.01)=VALUE
"RTN","XDRDVAL2",100,0)
 . D CHEKFDA("XDRXX",LOCATION)
"RTN","XDRDVAL2",101,0)
 . F XDRID=0:0 S XDRID=$O(^DD(SFILE,0,"ID",XDRID)) Q:XDRID'>0  D
"RTN","XDRDVAL2",102,0)
 . . S VALUE=$$GETEXT(XDRFROM,NODEA,SFILE,XDRID)
"RTN","XDRDVAL2",103,0)
 . . I VALUE="" W !,"PROBLEM WITH IDENTIFIER  FILE=",SFILE,"  IENSTR=",XENTOSTR,"   FIELD=",FIELD
"RTN","XDRDVAL2",104,0)
 Q
"RTN","XDRDVAL2",105,0)
 ;
"RTN","XDRDVAL2",106,0)
GETEXT(DICA,DA,FILNUM,FIELD,TYPE) ; GET EXTERNAL VALUE FOR .01 FIELD
"RTN","XDRDVAL2",107,0)
 N DIC,DIQ,DR,XDRQ,TEMP
"RTN","XDRDVAL2",108,0)
 I $G(FIELD)="" S FIELD=.01
"RTN","XDRDVAL2",109,0)
 I $G(TYPE)="" S TYPE="E"
"RTN","XDRDVAL2",110,0)
 S DIC=DICA,DIC("P")=FILNUM,DR=FIELD,DIQ="XDRQ",DIQ(0)="I"
"RTN","XDRDVAL2",111,0)
 D EN^DIQ1
"RTN","XDRDVAL2",112,0)
 S TEMP=$G(XDRQ(FILNUM,DA,FIELD,"I")) I TEMP="" Q ""
"RTN","XDRDVAL2",113,0)
 S DIC=DICA,DIC("P")=FILNUM,DR=FIELD,DIQ="XDRQ",DIQ(0)="E" K XDRQ
"RTN","XDRDVAL2",114,0)
 D EN^DIQ1
"RTN","XDRDVAL2",115,0)
 Q TEMP_U_$G(XDRQ(FILNUM,DA,FIELD,"E"))
"RTN","XDRDVAL2",116,0)
 Q $G(XDRQ(FILNUM,DA,FIELD,TYPE))
"RTN","XDRDVAL2",117,0)
 ;
"RTN","XDRDVAL2",118,0)
DINUMDAT ; PROCESS ENTRIES WITH SAMPLE DATE/TIMES WITH SECONDS, NEEDS DINUM
"RTN","XDRDVAL2",119,0)
 I $D(@(XDRTO_NODEA_")")) Q
"RTN","XDRDVAL2",120,0)
 S XDRDT=1
"RTN","XDRDVAL2",121,0)
 Q
"RTN","XDRDVAL2",122,0)
 ;
"RTN","XDRDVAL2",123,0)
CHEKFDA(FDA,LOCATION) ;
"RTN","XDRDVAL2",124,0)
 N FILE,IENS,FIELD,VAL,VALEXT
"RTN","XDRDVAL2",125,0)
 F FILE=0:0 S FILE=$O(@FDA@(FILE)) Q:FILE'>0  D
"RTN","XDRDVAL2",126,0)
 . S IENS="" F  S IENS=$O(@FDA@(FILE,IENS)) Q:IENS=""  D
"RTN","XDRDVAL2",127,0)
 . . F FIELD=0:0 S FIELD=$O(@FDA@(FILE,IENS,FIELD)) Q:FIELD'>0  D
"RTN","XDRDVAL2",128,0)
 . . . S VAL=@FDA@(FILE,IENS,FIELD),VALEXT=$P(VAL,U,2),VAL=$P(VAL,U) I VAL="" Q
"RTN","XDRDVAL2",129,0)
 . . . I FILE=2,FIELD=.09 Q  ; SSN NUMBER IS ENTERED AS INTERNAL
"RTN","XDRDVAL2",130,0)
 . . . I FILE=354,FIELD=.03!(FIELD=.05) Q  ; THIS ONE IS TOUGH, DON'T WORRY ABOUT IT
"RTN","XDRDVAL2",131,0)
 . . . I FILE=2,FIELD=63 Q  ; LAB DATA POINTER HAS SPECIAL PROCESSING
"RTN","XDRDVAL2",132,0)
 . . . S MESGROOT=$NA(^TMP($J,"MESG")) K @MESGROOT
"RTN","XDRDVAL2",133,0)
 . . . D CHKVALID^XDRDVAL(MESGROOT,FILE,IENS,FIELD,VALEXT,VAL)
"RTN","XDRDVAL2",134,0)
 . . . I $D(@MESGROOT) M @LOCATION=@MESGROOT K @MESGROOT
"RTN","XDRDVAL2",135,0)
 . . . Q
"RTN","XDRDVAL2",136,0)
 . . Q
"RTN","XDRDVAL2",137,0)
 . Q
"RTN","XDRDVAL2",138,0)
 Q
"RTN","XDREMSG")
0^22^B8765373
"RTN","XDREMSG",1,0)
XDREMSG ;SF-IRMFO/IHS/OHPRD/JCM - ERROR MESSAGE PROCESSOR ;12/2/96  12:58
"RTN","XDREMSG",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDREMSG",3,0)
 ;;
"RTN","XDREMSG",4,0)
START ;
"RTN","XDREMSG",5,0)
 S XDRQFLG=1
"RTN","XDREMSG",6,0)
 S XDREMSG=$P($T(ERRTXT+XDRERR),";; ",2)
"RTN","XDREMSG",7,0)
 S ^XTMP("XDRERR",XDRFL)=XDREMSG
"RTN","XDREMSG",8,0)
 I '$D(ZTQUEUED) W !,XDREMSG,!
"RTN","XDREMSG",9,0)
 E  D BULL
"RTN","XDREMSG",10,0)
END D EOJ
"RTN","XDREMSG",11,0)
 Q
"RTN","XDREMSG",12,0)
 ;
"RTN","XDREMSG",13,0)
BULL ;
"RTN","XDREMSG",14,0)
 G:'$D(XDRD("DMAILGRP")) BULLX
"RTN","XDREMSG",15,0)
 F XDRI=0:0 S XDRI=$O(XDRD("DMAILGRP",XDRI)) Q:'XDRI  S XMY(XDRI)=""
"RTN","XDREMSG",16,0)
 K XDRI
"RTN","XDREMSG",17,0)
 S XMB="XDR ERROR"
"RTN","XDREMSG",18,0)
 S:$D(XDRFL) XMB(1)=$P(^DIC(XDRFL,0),U)
"RTN","XDREMSG",19,0)
 S:$D(XDRMRG("FR")) XMB(2)=XDRMRG("FR")
"RTN","XDREMSG",20,0)
 S:$D(XDRMRG("TO")) XMB(3)=XDRMRG("TO")
"RTN","XDREMSG",21,0)
 I $D(XDRGL),$D(XDRMRG("FR")),$D(@(XDRGL_XDRMRG("FR")_",0)")) S XMB(4)=$P(@(XDRGL_XDRMRG("FR")_",0)"),U)
"RTN","XDREMSG",22,0)
 I $D(XDRGL),$D(XDRMRG("TO")),$D(@(XDRGL_XDRMRG("TO")_",0)")) S XMB(5)=$P(@(XDRGL_XDRMRG("TO")_",0)"),U)
"RTN","XDREMSG",23,0)
 S XMB(6)=XDREMSG,XMDUZ=.5
"RTN","XDREMSG",24,0)
 D ^XMB K XMB,XMDUZ
"RTN","XDREMSG",25,0)
BULLX Q
"RTN","XDREMSG",26,0)
 ;
"RTN","XDREMSG",27,0)
EOJ ;
"RTN","XDREMSG",28,0)
 K XMB,XDREMSG,XDRERR
"RTN","XDREMSG",29,0)
 Q
"RTN","XDREMSG",30,0)
ERRTXT ;;
"RTN","XDREMSG",31,0)
 ;; The Candidate Collection Routine is Undefined
"RTN","XDREMSG",32,0)
 ;; The Candidate Collection Routine is not present
"RTN","XDREMSG",33,0)
 ;; The Potential Duplicate Threshold is Undefined
"RTN","XDREMSG",34,0)
 ;; There are no Duplicate Tests entered for this Duplicate Resolution entry
"RTN","XDREMSG",35,0)
 ;; The Global root node in DIC is undefined
"RTN","XDREMSG",36,0)
 ;; No entry in Duplicate Resolution file for this file
"RTN","XDREMSG",37,0)
 ;; The From and To Record are undefined
"RTN","XDREMSG",38,0)
 ;; The test routine is not present
"RTN","XDREMSG",39,0)
 ;; The routine defined as the Pre-Merge routine is not present
"RTN","XDREMSG",40,0)
 ;; The routine defined as the Post-Merge routine is not present
"RTN","XDREMSG",41,0)
 ;; The routine defined as the Verified Msg routine is not present
"RTN","XDREMSG",42,0)
 ;; The routine defined as the Merged Msg routine is not present
"RTN","XDREMSG",43,0)
 ;; You can not have a 'Non-Interactive' merge style with entries in the Dinum Files multiple
"RTN","XDREMSG",44,0)
 ;; The file for checking duplicates is not defined (XDRFL)
"RTN","XDREMSG",45,0)
 ;; The entry for checking duplicates is not defined (XDRCD)
"RTN","XDREMSG",46,0)
 ;; The routine defined as the Merge Direction input transform routine is not present
"RTN","XDREMSG",47,0)
 ;; The NEW x-ref has not been entered for this Duplicate Resolution entry
"RTN","XDRMADD")
0^26^B35442806
"RTN","XDRMADD",1,0)
XDRMADD ;SF-IRMFO/IHS/OHPRD/JCM,JLI,REM -  USER CREATED VERIFIED DUPLICATE PAIR ENTRY ;4/6/98  09:24
"RTN","XDRMADD",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMADD",3,0)
 ;;
"RTN","XDRMADD",4,0)
 N XDRFL,XDRCNTR
"RTN","XDRMADD",5,0)
 S XDRCNTR=0
"RTN","XDRMADD",6,0)
START ;
"RTN","XDRMADD",7,0)
 N XDRADFLG
"RTN","XDRMADD",8,0)
 K DIC
"RTN","XDRMADD",9,0)
 S (XDRQFLG,XDRADFLG)=0
"RTN","XDRMADD",10,0)
 I '$D(XDRFL) S DIC("A")="Add entries from which File: " D FILE^XDRDQUE
"RTN","XDRMADD",11,0)
 G:XDRQFLG END
"RTN","XDRMADD",12,0)
 S XDRDTYPE=$P(XDRD(0),U,5)
"RTN","XDRMADD",13,0)
 I XDRDTYPE="" D  ;REM -8/20/96 when XDRDTYPE is null set it to basic.
"RTN","XDRMADD",14,0)
 .S $P(^VA(15.1,XDRFL,0),U,5)="b",XDRDTYPE="b"
"RTN","XDRMADD",15,0)
 S XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRMADD",16,0)
 D:XDRCNTR>0  G:XDRQFLG END
"RTN","XDRMADD",17,0)
 .W ! K DIR S DIR(0)="Y",DIR("A")="Do you want to ADD another pair (Y/N)"
"RTN","XDRMADD",18,0)
 .D ^DIR K DIR S:$D(DIRUT)!('Y) XDRQFLG=1
"RTN","XDRMADD",19,0)
 S XDRCNTR=XDRCNTR+1
"RTN","XDRMADD",20,0)
 D BYPASS G:XDRQFLG END
"RTN","XDRMADD",21,0)
 D LKUP G:XDRQFLG END
"RTN","XDRMADD",22,0)
 D CHECK G:XDRQFLG<0 START
"RTN","XDRMADD",23,0)
 D ^XDRDSCOR S:XDRADFLG XDRDSCOR("PDT%")=0 ;REM -8/23/96 to bypass PDT%
"RTN","XDRMADD",24,0)
 S XDRD("NOADD")="" D ^XDRDUP
"RTN","XDRMADD",25,0)
 K XDRDTYPE
"RTN","XDRMADD",26,0)
 D SCORE
"RTN","XDRMADD",27,0)
 I XDRMADD("DUPSCORE%")<XDRDSCOR("PDT%") D  G START ; JLI 4/11/96
"RTN","XDRMADD",28,0)
 . W !!,$C(7),"This pair of patients has a duplicate percentage of only ",XDRMADD("DUPSCORE%"),"% which"
"RTN","XDRMADD",29,0)
 . W !,"is less than the minimal percentage for potential duplicates (",XDRDSCOR("PDT%"),"%)."
"RTN","XDRMADD",30,0)
 . W !!?30,"Patients not added!!!",!!
"RTN","XDRMADD",31,0)
 S XDRDA=+XDRDFLG I XDRDA'>0 D ADD
"RTN","XDRMADD",32,0)
 G:XDRQFLG START
"RTN","XDRMADD",33,0)
 D SHOW^XDRDPICK ; D MERGE ; CHANGED TO CURRENT VERIF METHOD, NOT MERGE 4/11/96  JLI
"RTN","XDRMADD",34,0)
 G START ; ADDED 4/11/96 JLI
"RTN","XDRMADD",35,0)
END D EOJ
"RTN","XDRMADD",36,0)
 Q
"RTN","XDRMADD",37,0)
 ;
"RTN","XDRMADD",38,0)
LKUP ;Looks up the records to add.
"RTN","XDRMADD",39,0)
 K XDRCD,XDRCD2
"RTN","XDRMADD",40,0)
 S DIC=XDRGL,DIC(0)="QEAM"
"RTN","XDRMADD",41,0)
 S DIC("S")="I '$D(^VA(15,""AFR"",$P(XDRGL,U,2),Y))"
"RTN","XDRMADD",42,0)
 S DIC("A")="Select "_$P(^DIC(XDRFL,0),U,1)_": "
"RTN","XDRMADD",43,0)
 D ^DIC K DIC,DA
"RTN","XDRMADD",44,0)
 I $D(DIRUT)!(Y=-1) S XDRQFLG=1 G LKUPX
"RTN","XDRMADD",45,0)
 S XDRCD=+Y
"RTN","XDRMADD",46,0)
LKUP2 S DIC=XDRGL,DIC(0)="QEAM"
"RTN","XDRMADD",47,0)
 S DIC("S")="I '$D(^VA(15,""AFR"",$P(XDRGL,U,2),Y))"
"RTN","XDRMADD",48,0)
 S DIC("A")="    Another  "_$P(^DIC(XDRFL,0),U,1)_": "
"RTN","XDRMADD",49,0)
 D ^DIC K DIC,DA
"RTN","XDRMADD",50,0)
 G:$D(DIRUT)!(Y=-1) LKUP
"RTN","XDRMADD",51,0)
 S XDRCD2=+Y
"RTN","XDRMADD",52,0)
 I XDRCD=XDRCD2 W !!,"Please do not try and merge the same patients together.",!! K XDRCD2 G LKUP2
"RTN","XDRMADD",53,0)
 S XDRMADD("REC1")=$S(XDRCD<XDRCD2:XDRCD,1:XDRCD2)
"RTN","XDRMADD",54,0)
 S XDRMADD("REC2")=$S(XDRMADD("REC1")=XDRCD:XDRCD2,1:XDRCD)
"RTN","XDRMADD",55,0)
 S XDRCD=XDRMADD("REC1"),XDRCD2=XDRMADD("REC2")
"RTN","XDRMADD",56,0)
 W !!,"You will be adding the following pair of records to the duplicate record file:",!
"RTN","XDRMADD",57,0)
 W !?5,"RECORD1:  ",$P(@(XDRGL_XDRCD_",0)"),U)
"RTN","XDRMADD",58,0)
 W !?5,"RECORD2:  ",$P(@(XDRGL_XDRCD2_",0)"),U)
"RTN","XDRMADD",59,0)
 W !! K DIR S DIR(0)="E" D ^DIR K DIR I $D(DIRUT) S XDRQFLG=1 Q
"RTN","XDRMADD",60,0)
 W "  Ok, continuing, hold on ...",!
"RTN","XDRMADD",61,0)
 ;W !!,"Hit return to continue " R XDRMADD("ANS"):DTIME W "  Okay, continuing, hold on ...",!
"RTN","XDRMADD",62,0)
LKUPX Q
"RTN","XDRMADD",63,0)
 ;
"RTN","XDRMADD",64,0)
CHECK ;
"RTN","XDRMADD",65,0)
 S XDRDFLG=0 F XDRDI="APOT","ANOT","AVDUP" I $D(^VA(15,XDRDI,$P(XDRGL,U,2),XDRCD_U_XDRCD2))!($D(^VA(15,XDRDI,$P(XDRGL,U,2),XDRCD2_U_XDRCD))) S XDRDFLG=-1 I XDRDI="APOT" D
"RTN","XDRMADD",66,0)
 . I $D(^VA(15,XDRDI,$P(XDRGL,U,2),XDRCD_U_XDRCD2)) S XDRDFLG=$O(^(XDRCD_U_XDRCD2,0)) Q
"RTN","XDRMADD",67,0)
 . S XDRDFLG=$O(^VA(15,XDRDI,$P(XDRGL,U,2),XDRCD2_U_XDRCD,0))
"RTN","XDRMADD",68,0)
 I XDRDFLG W !!,"They are already entered in Duplicate Record file.",!!
"RTN","XDRMADD",69,0)
 K XDRDI
"RTN","XDRMADD",70,0)
 Q
"RTN","XDRMADD",71,0)
 ;
"RTN","XDRMADD",72,0)
SCORE ;
"RTN","XDRMADD",73,0)
 S XDRMADD("DUPSCORE%")=$S($G(XDRDSCOR("MAX"))=0:0,1:(XDRD("DUPSCORE")/XDRDSCOR("MAX")))
"RTN","XDRMADD",74,0)
 S XDRMADD("DUPSCORE%")=$J(XDRMADD("DUPSCORE%"),1,2)
"RTN","XDRMADD",75,0)
 S XDRMADD("DUPSCORE%")=$S(XDRMADD("DUPSCORE%")<0:0,XDRMADD("DUPSCORE%")<1:$E(XDRMADD("DUPSCORE%"),3,4),1:100)
"RTN","XDRMADD",76,0)
 S XDRDFR=$S(XDRCD<XDRCD2:XDRCD,1:XDRCD2)
"RTN","XDRMADD",77,0)
 S XDRDTO=$S(XDRDFR=XDRCD:XDRCD2,1:XDRCD)
"RTN","XDRMADD",78,0)
 S XDRMADD("STATUS")="X"
"RTN","XDRMADD",79,0)
 Q
"RTN","XDRMADD",80,0)
 ;
"RTN","XDRMADD",81,0)
ADD ;
"RTN","XDRMADD",82,0)
 ;ADD TO DUPLICATE RECORD FILE
"RTN","XDRMADD",83,0)
 S XDRMAINI="MERGE" D ^XDRMAINI ;LAB/OHPRD ADDED THIS
"RTN","XDRMADD",84,0)
 S DIC="^VA(15,",DIC(0)="L",X=XDRDFR_";"_$P(XDRGL,U,2),DLAYGO=15
"RTN","XDRMADD",85,0)
 S XDRMADDX=XDRDTO_";"_$P(XDRGL,U,2)
"RTN","XDRMADD",86,0)
 S DIC("DR")=".02////^S X=XDRMADDX"_";.03////"_XDRMADD("STATUS")
"RTN","XDRMADD",87,0)
 ;S DIC("DR")=DIC("DR")_";.04//2" ;REM -10/2/96 this will be asked in XDRRMRG!
"RTN","XDRMADD",88,0)
 S DIC("DR")=DIC("DR")_";.03///P"_";.06////"_DT_";.09////"_DUZ
"RTN","XDRMADD",89,0)
 S DIC("DR")=DIC("DR")_";.15////"_XDRDSCOR("MAX")_";.17////"_XDRDSCOR("PDT%")_";.18////"_XDRD("DUPSCORE")_";.19////"_XDRMADD("DUPSCORE%")
"RTN","XDRMADD",90,0)
 S:$D(XDRDSCOR("VDT%")) DIC("DR")=DIC("DR")_";.16////"_XDRDSCOR("VDT%")
"RTN","XDRMADD",91,0)
 D
"RTN","XDRMADD",92,0)
 . N I,X1,X2,X3
"RTN","XDRMADD",93,0)
 . S X1=X_U_XDRMADDX,X2=XDRMADDX_U_X
"RTN","XDRMADD",94,0)
 . F I=0:0 S I=$O(^VA(15,"B",X,I)) Q:I'>0  S X3=$P($G(^VA(15,I,0)),U,1,2) I X3=X1!(X3=X2) K X Q
"RTN","XDRMADD",95,0)
 S Y=-1 I $D(X) D FILE^DICN
"RTN","XDRMADD",96,0)
 K DIC,DR,X,DLAYGO
"RTN","XDRMADD",97,0)
 I Y'>0 S XDRQFLG=1 K XDRCD,XDRCD2 G ADDX
"RTN","XDRMADD",98,0)
 S DIE="^VA(15,",(XDRDA,XDRMPDA,DA)=+Y ; ADDED XDRDA TO LIST 4/11/96 JLI
"RTN","XDRMADD",99,0)
 F XDRMORD=0:0 S XDRMORD=$O(XDRDTEST(XDRMORD)) Q:'XDRMORD  S DR="2101///"_$P(XDRDTEST(XDRMORD),U,1),DR(2,15.02101)=".02////"_XDRDUP("TEST SCORE",XDRMORD) D ^DIE K DR
"RTN","XDRMADD",100,0)
ADDX K DIE,DR,DA,XDRMORD,XDRMADDX,XDRDUP("TEST SCORE")
"RTN","XDRMADD",101,0)
 Q
"RTN","XDRMADD",102,0)
 ;
"RTN","XDRMADD",103,0)
MERGE Q  ;
"RTN","XDRMADD",104,0)
 S XDRMPAIR=XDRDFR_"^"_XDRDTO,XDRM("NOVERIFY")=""
"RTN","XDRMADD",105,0)
 D EN^XDRMAIN
"RTN","XDRMADD",106,0)
MERGEX K XDRM
"RTN","XDRMADD",107,0)
 Q
"RTN","XDRMADD",108,0)
 ;
"RTN","XDRMADD",109,0)
BYPASS ;REM -8/20/96 Add record directly into file 15, bypass threshold.
"RTN","XDRMADD",110,0)
 N X,XDRKEY
"RTN","XDRMADD",111,0)
 S (X,XDRKEY)=0 F  S X=$O(^VA(200,DUZ,51,"B",X)) Q:X'>0!(XDRKEY)  D
"RTN","XDRMADD",112,0)
 .I $$GET1^DIQ(19.1,X,.01)="XDRMGR" S XDRKEY=1 Q
"RTN","XDRMADD",113,0)
 Q:'XDRKEY
"RTN","XDRMADD",114,0)
 S DIR(0)="Y",DIR("A")="Do you want to bypass the potential duplicate threshold % check (Y/N)"
"RTN","XDRMADD",115,0)
 S DIR("??")="^W !!,""This will add the pair of records to the Duplicate Record file without checking the potential duplicate threshold %."""
"RTN","XDRMADD",116,0)
 D ^DIR K DIR S XDRADFLG=Y I $D(DTOUT)!($D(DUOUT)) S XDRQFLG=1 Q
"RTN","XDRMADD",117,0)
 I 'XDRADFLG W !!,*7,"Potential duplicate threshold % will NOT be bypassed!",!
"RTN","XDRMADD",118,0)
 I XDRADFLG D
"RTN","XDRMADD",119,0)
 .W !!,"This will add the pair of records directly into the Duplicate Record file."
"RTN","XDRMADD",120,0)
 .S DIR(0)="YO",DIR("A")="Are you sure you want to continue",DIR("B")="NO"
"RTN","XDRMADD",121,0)
 .D ^DIR K DIR S XDRADFLG=Y W ! I $D(DIRUT) S XDRQFLG=1 Q
"RTN","XDRMADD",122,0)
 .I 'XDRADFLG W *7,!!,"Potential duplicate threshold % will NOT be bypassed!",!
"RTN","XDRMADD",123,0)
 Q
"RTN","XDRMADD",124,0)
 ;
"RTN","XDRMADD",125,0)
EOJ ;
"RTN","XDRMADD",126,0)
 K XDRMADD,XDRMORD,XDRDFR,XDRDTO,X,Y,XDRCD,XDRCD2,XDRD,XDRFL,XDRGL
"RTN","XDRMADD",127,0)
 K XDRFL,XDRMPAIR,XDRMPDA,XDRQFLG,XDRDSCOR,XDRDTEST
"RTN","XDRMADD",128,0)
 Q
"RTN","XDRMAIN")
0^69^B16902409
"RTN","XDRMAIN",1,0)
XDRMAIN ;SF-IRMFO/IHS/OHPRD/JCM - MAIN DRIVER FOR DUPLICATE MERGE SOFTWARE;    [ 08/13/92  09:50 AM ]
"RTN","XDRMAIN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMAIN",3,0)
 ;;
"RTN","XDRMAIN",4,0)
START ;
"RTN","XDRMAIN",5,0)
 S XDRMAINI="MERGE" D ^XDRMAINI G:XDRQFLG END
"RTN","XDRMAIN",6,0)
 F XDRMI1=0:0 S XDRMPAIR=$O(@XDRM("GL")) Q:'XDRMPAIR!(XDRQFLG)  S XDRMPDA="^VA(15,""APOT"","_""""_$P(XDRGL,U,2)_""""_",XDRMPAIR,0)" S XDRMPDA=$O(@XDRMPDA) D MAIN D:'$D(XDRM("NOTALK")) ASK
"RTN","XDRMAIN",7,0)
END D EOJ
"RTN","XDRMAIN",8,0)
 Q
"RTN","XDRMAIN",9,0)
 ;
"RTN","XDRMAIN",10,0)
MAIN ;
"RTN","XDRMAIN",11,0)
 S XDRMCD=$P(XDRMPAIR,U,1),XDRMCD2=$P(XDRMPAIR,U,2)
"RTN","XDRMAIN",12,0)
 S XDRMRG("LCK")="+" D LOCK^XDRU1 K XDRMRG("LCK") I $D(XDRMLOCK) G MAINX
"RTN","XDRMAIN",13,0)
 I '$D(XDRM("NOVERIFY")) S XDRMRG=0 D ^XDRMVFY G:'XDRMRG!(XDRQFLG) MAINX
"RTN","XDRMAIN",14,0)
 S (XDRMRG("FR"),XDRMAIN("FR"))=$S($P(^VA(15,XDRMPDA,0),U,4)=2:XDRMCD2,1:XDRMCD)
"RTN","XDRMAIN",15,0)
 S (XDRMRG("TO"),XDRMAIN("TO"))=$S(XDRMRG("FR")=XDRMCD2:XDRMCD,1:XDRMCD2)
"RTN","XDRMAIN",16,0)
 D ^XDRMPACK
"RTN","XDRMAIN",17,0)
 I '$P(^VA(15,XDRMPDA,0),U,5),'$D(XDRM("NOVERIFY")) S XDRMSG="VERIFY" D ^XDRMSG I 1
"RTN","XDRMAIN",18,0)
 E  D ^XDRMRG I $P(^VA(15,XDRMPDA,0),U,5)=2 S XDRMSG="MERGED" D ^XDRMSG
"RTN","XDRMAIN",19,0)
MAINX S XDRMRG("LCK")="-" D LOCK^XDRU1 K XDRMRG("LCK"),XDRMLOCK
"RTN","XDRMAIN",20,0)
 Q
"RTN","XDRMAIN",21,0)
 ;
"RTN","XDRMAIN",22,0)
EN Q  ; EP - Entry Point for Automatic Merge, Called by XDRDADD,XDRMADD
"RTN","XDRMAIN",23,0)
 I '$D(XDRMPDA) G ENX
"RTN","XDRMAIN",24,0)
 I '$D(XDRMPAIR) S XDRMPAIR=+$P(^VA(15,XDRMPDA,0),U,1)_U_+$P(^(0),U,2)
"RTN","XDRMAIN",25,0)
 S XDRMAINI="MERGE" D ^XDRMAINI G:XDRQFLG ENX
"RTN","XDRMAIN",26,0)
 D MAIN
"RTN","XDRMAIN",27,0)
ENX D EOJ
"RTN","XDRMAIN",28,0)
 Q
"RTN","XDRMAIN",29,0)
 ;
"RTN","XDRMAIN",30,0)
EN1 Q  ; EP - Entry point for looping through Verified ready to merge duplicates
"RTN","XDRMAIN",31,0)
 S:'$D(XDRM("NOVERIFY")) XDRM("NOVERIFY")=""
"RTN","XDRMAIN",32,0)
 S XDRMAINI="MERGE" D ^XDRMAINI G:XDRQFLG EN1X
"RTN","XDRMAIN",33,0)
 I $D(XDRM("NON-INTERACTIVE")) S DIE="^VA(15.1,",DA=XDRFL,DR=".32///@" D ^DIE K DA,DR,DIE
"RTN","XDRMAIN",34,0)
 S XDRMPDA=0
"RTN","XDRMAIN",35,0)
 S XDRM("GL")="^VA(15,""AMRG"","_""""_$P(XDRGL,U,2)_""""_",1,XDRMPDA)"
"RTN","XDRMAIN",36,0)
 F XDRMI1=0:0 S XDRMPDA=$O(@XDRM("GL")) Q:'XDRMPDA!(XDRQFLG)!($D(XDRM("NON-INTERACTIVE"))&($P(^VA(15.1,XDRFL,0),U,32)))  S XDRMPAIR=+$P(^VA(15,XDRMPDA,0),U,1)_U_+$P(^VA(15,XDRMPDA,0),U,2) D MAIN D:'$D(XDRM("NOTALK")) ASK
"RTN","XDRMAIN",37,0)
EN1X D EOJ
"RTN","XDRMAIN",38,0)
 Q
"RTN","XDRMAIN",39,0)
 ;
"RTN","XDRMAIN",40,0)
ASK ;
"RTN","XDRMAIN",41,0)
 S XDRQFLG=0
"RTN","XDRMAIN",42,0)
 G:$D(XDRMLOCK) ASKX
"RTN","XDRMAIN",43,0)
 W !!
"RTN","XDRMAIN",44,0)
 S DIR(0)="YO",DIR("A")="Do you wish to continue with the next pair of records",DIR("B")="Y"
"RTN","XDRMAIN",45,0)
 D ^DIR
"RTN","XDRMAIN",46,0)
 I $D(DTOUT)!($D(DUOUT)) S XDRQFLG=1 G ASKX
"RTN","XDRMAIN",47,0)
 I 'Y S XDRQFLG=1
"RTN","XDRMAIN",48,0)
ASKX K DIR,DA,Y,XDRMLOCK
"RTN","XDRMAIN",49,0)
 Q
"RTN","XDRMAIN",50,0)
 ;
"RTN","XDRMAIN",51,0)
EN2 Q  ; EP - Entry point to select Verified Ready to Merge Duplicate Pair
"RTN","XDRMAIN",52,0)
 S:'$D(XDRM("NOVERIFY")) XDRM("NOVERIFY")=""
"RTN","XDRMAIN",53,0)
 S XDRMAINI="MERGE" D ^XDRMAINI G:XDRQFLG EN2X
"RTN","XDRMAIN",54,0)
 I '$D(XDRM("NOTALK")),$D(XDRM("NON-INTERACTIVE")) S XDRM("NOTALK")=""
"RTN","XDRMAIN",55,0)
 S:$P(XDRM(0),U,25) (XDRM("NON-INTERACTIVE"),XDRM("NOTALK"))=""
"RTN","XDRMAIN",56,0)
 S DIC("S")="I $P($P(^VA(15,Y,0),U,1),"";"",2)=$P(XDRGL,U,2),$P(^VA(15,Y,0),U,5)=1"
"RTN","XDRMAIN",57,0)
 S DIC="^VA(15,",DIC(0)="QEAM"
"RTN","XDRMAIN",58,0)
 D ^DIC K DIC,DA I U[X S XDRQFLG=1 G EN2X
"RTN","XDRMAIN",59,0)
 S XDRMPDA=+Y,XDRMPAIR=+$P(^VA(15,XDRMPDA,0),U,1)_U_+$P(^(0),U,2)
"RTN","XDRMAIN",60,0)
 D MAIN
"RTN","XDRMAIN",61,0)
 I $D(XDRMLOCK) W !!,"Records currently busy, Please try again later.",!! K XDRMLOCK
"RTN","XDRMAIN",62,0)
EN2X D EOJ
"RTN","XDRMAIN",63,0)
 Q
"RTN","XDRMAIN",64,0)
 ;
"RTN","XDRMAIN",65,0)
EN3 Q  ; EP - Entry point to select Unverified Potential Duplicate Pair
"RTN","XDRMAIN",66,0)
 S XDRMAINI="MERGE" D ^XDRMAINI G:XDRQFLG EN3X
"RTN","XDRMAIN",67,0)
 S DIC("S")="I $P($P(^VA(15,Y,0),U,1),"";"",2)=$P(XDRGL,U,2),$P(^VA(15,Y,0),U,3)=""P"""
"RTN","XDRMAIN",68,0)
 S DIC="^VA(15,",DIC(0)="QEAM"
"RTN","XDRMAIN",69,0)
 D ^DIC K DIC,DA I U[X S XDRQFLG=1 G EN3X
"RTN","XDRMAIN",70,0)
 S XDRMPDA=+Y,XDRMPAIR=+$P(^VA(15,XDRMPDA,0),U,1)_U_+$P(^(0),U,2)
"RTN","XDRMAIN",71,0)
 D MAIN
"RTN","XDRMAIN",72,0)
 I $D(XDRMLOCK) W !!,"Records currently busy, Please try again later.",!! K XDRMLOCK
"RTN","XDRMAIN",73,0)
EN3X D EOJ
"RTN","XDRMAIN",74,0)
 Q
"RTN","XDRMAIN",75,0)
 ;
"RTN","XDRMAIN",76,0)
EOJ ;
"RTN","XDRMAIN",77,0)
 K:'$D(XDRDADD) XDRFL,XDRGL,XDRD
"RTN","XDRMAIN",78,0)
 K XDRM,XDRMAIN,XDRM("DEVICE"),XDRMPAIR,XDRMI1,XDRMCD,XDRMCD2
"RTN","XDRMAIN",79,0)
 K XDRMPDA,XDRM("POST-MERGE"),XDRM("PRE-MERGE"),XDRQFLG,XDRMRG,XDRM("VERIFYMSG"),XDRM("MERGEMSG")
"RTN","XDRMAIN",80,0)
 Q
"RTN","XDRMAINI")
0^28^B27169537
"RTN","XDRMAINI",1,0)
XDRMAINI ;SF-IRMFO/IHS/OHPRD/JCM - INITIALIZATION ROUTINE FOR XDRMAIN;   [ 10/19/92  10:25 AM ] ;1/22/97  10:48
"RTN","XDRMAINI",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMAINI",3,0)
 ;;
"RTN","XDRMAINI",4,0)
 ;
"RTN","XDRMAINI",5,0)
START ;
"RTN","XDRMAINI",6,0)
 S XDRQFLG=0
"RTN","XDRMAINI",7,0)
 D:'$D(XDRFL) FILE
"RTN","XDRMAINI",8,0)
 G:XDRQFLG END
"RTN","XDRMAINI",9,0)
 I XDRMAINI="DUP" D DUP I 1
"RTN","XDRMAINI",10,0)
 E  D MERGE
"RTN","XDRMAINI",11,0)
 K XDRMAINI
"RTN","XDRMAINI",12,0)
END Q
"RTN","XDRMAINI",13,0)
 ;
"RTN","XDRMAINI",14,0)
FILE ;
"RTN","XDRMAINI",15,0)
 K DIC("B")
"RTN","XDRMAINI",16,0)
 S DIC("A")=$S(XDRMAINI="DUP":"Select file to be checked for duplicates: ",'$D(XDRM("NOVERIFY")):"Select file to verify potential duplicates: ",1:"Select file to merge ready to merge duplicates: ")
"RTN","XDRMAINI",17,0)
 S DIC="^VA(15.1,",DIC(0)="QEAZ" D ^DIC K DIC
"RTN","XDRMAINI",18,0)
 I Y=-1 S XDRQFLG=1 G FILEX
"RTN","XDRMAINI",19,0)
 S XDRFL=$P(Y(0),U,1) K Y
"RTN","XDRMAINI",20,0)
FILEX Q
"RTN","XDRMAINI",21,0)
 ;
"RTN","XDRMAINI",22,0)
DUP ;
"RTN","XDRMAINI",23,0)
 I '$D(^VA(15.1,XDRFL,0)) S XDRERR=6 D ^XDREMSG G DUPX
"RTN","XDRMAINI",24,0)
 S XDRD(0)=^VA(15.1,XDRFL,0)
"RTN","XDRMAINI",25,0)
 I $D(XDRDNSTA) D STATUS G:XDRQFLG DUPX
"RTN","XDRMAINI",26,0)
 S XDRCD=$S($P(^VA(15.1,XDRFL,0),U,8):$P(^VA(15.1,XDRFL,0),U,8),1:0)
"RTN","XDRMAINI",27,0)
 S XDRDCNT=$S($P(^VA(15.1,XDRFL,0),U,7):$P(^VA(15.1,XDRFL,0),U,7),1:0)
"RTN","XDRMAINI",28,0)
 S XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRMAINI",29,0)
 S XDRD("COLLECTION ROUTINE")=$S($P($P(XDRD(0),U,9),"-",2)]"":$P($P(XDRD(0),U,9),"-")_"^"_$P($P(XDRD(0),U,9),"-",2),1:U_$P(XDRD(0),U,9))
"RTN","XDRMAINI",30,0)
 I '$D(XDRD("DMAILGRP")),$D(XDRD(0)),$P(XDRD(0),U,11),$D(^XMB(3.8,$P(XDRD(0),U,11),1,"B")) F XDRI=0:0 S XDRI=$O(^XMB(3.8,$P(XDRD(0),U,11),1,"B",XDRI)) Q:'XDRI  S XDRD("DMAILGRP",XDRI)=""
"RTN","XDRMAINI",31,0)
 K XDRI
"RTN","XDRMAINI",32,0)
 D ^XDRDSCOR ; Sets up Duplicate Test Scores
"RTN","XDRMAINI",33,0)
DUPX Q
"RTN","XDRMAINI",34,0)
 ;
"RTN","XDRMAINI",35,0)
STATUS ;
"RTN","XDRMAINI",36,0)
 I $P(XDRD(0),U,2)="c",XDRDNSTA="h" S XDRQFLG=1 G STATUSX
"RTN","XDRMAINI",37,0)
 K DIE,DA
"RTN","XDRMAINI",38,0)
 S DIE=15.1,DA=$P(XDRD(0),U,1)
"RTN","XDRMAINI",39,0)
 S DR=".02////"_XDRDNSTA
"RTN","XDRMAINI",40,0)
 I XDRDNSTA="r",'$D(XDRDPDTI) S DR=DR_";.03///"_$$NOW^XLFDT()_";.04///@" K ^XTMP("XDRERR",XDRFL) S ^XTMP("XDRERR",0)=($$FMADD^XLFDT(DT,30))_U_DT
"RTN","XDRMAINI",41,0)
 S $P(^VA(15.1,XDRFL,3),U)=""
"RTN","XDRMAINI",42,0)
 I $P(XDRD(0),U,2)="c"!($P(XDRD(0),U,2)=""),XDRDNSTA="r",'$D(XDRDPDTI) S DR=DR_";.05////"_XDRDTYPE_";.07///@;.08///@;.1///@;.12///@"
"RTN","XDRMAINI",43,0)
 D ^DIE K DIE,DA,D0,DR
"RTN","XDRMAINI",44,0)
 S:XDRDNSTA="h" XDRQFLG=1
"RTN","XDRMAINI",45,0)
STATUSX Q
"RTN","XDRMAINI",46,0)
 ;
"RTN","XDRMAINI",47,0)
MERGE ;
"RTN","XDRMAINI",48,0)
 I '$D(^VA(15.1,XDRFL,0)) S XDRERR=6 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",49,0)
 S XDRM(0)=^VA(15.1,XDRFL,0),XDRGL=^DIC(XDRFL,0,"GL")
"RTN","XDRMAINI",50,0)
 I $O(^VA(15.1,XDRFL,12,0)) S XDRM("TOP FILE")=XDRFL F XDRI=0:0 S XDRI=$O(^(XDRI)) Q:'XDRI  S XDRM("DINUMS",XDRI)=""
"RTN","XDRMAINI",51,0)
 I '$D(XDRM("AUTO")),$P(XDRM(0),U,25) S XDRM("NON-INTERACTIVE")=""
"RTN","XDRMAINI",52,0)
 S:$D(XDRM("AUTO")) (XDRM("NON-INTERACTIVE"),XDRM("NOTALK"),XDRM("NOVERIFY"))=""
"RTN","XDRMAINI",53,0)
 S:'$D(XDRMPAIR) XDRMPAIR=0
"RTN","XDRMAINI",54,0)
 S XDRM("PRE-MERGE")=$S($P($P(XDRM(0),U,27),"-",2)]"":$P($P(XDRM(0),U,27),"-")_"^"_$P($P(XDRM(0),U,27),"-",2),$P(XDRM(0),U,27)]"":U_$P(XDRM(0),U,27),1:"")
"RTN","XDRMAINI",55,0)
 I XDRM("PRE-MERGE")]"" S X=$P(XDRM("PRE-MERGE"),U,2) D TEST I '$T S XDRERR=9 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",56,0)
 S XDRM("POST-MERGE")=$S($P($P(XDRM(0),U,28),"-",2)]"":$P($P(XDRM(0),U,28),"-")_"^"_$P($P(XDRM(0),U,28),"-",2),$P(XDRM(0),U,28)]"":U_$P(XDRM(0),U,28),1:"")
"RTN","XDRMAINI",57,0)
 I XDRM("POST-MERGE")]"" S X=$P(XDRM("POST-MERGE"),U,2) D TEST I '$T S XDRERR=10 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",58,0)
 I $P(XDRM(0),U,17)]"" S XDRM("VERIFY-MSG")=$S($P($P(XDRM(0),U,17),"-",2)]"":$P($P(XDRM(0),U,17),"-")_"^"_$P($P(XDRM(0),U,17),"-",2),1:U_$P(XDRM(0),U,17))
"RTN","XDRMAINI",59,0)
 I $D(XDRM("VERIFY-MSG")) S X=$P(XDRM("VERIFY-MSG"),U,2) D TEST I '$T S XDRERR=11 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",60,0)
 I $P(XDRM(0),U,33)]"" S XDRM("MD-IT")=$S($P($P(XDRM(0),U,33),"-",2)]"":$P($P(XDRM(0),U,33),"-")_"^"_$P($P(XDRM(0),U,33),"-",2),1:U_$P(XDRM(0),U,33))
"RTN","XDRMAINI",61,0)
 I $D(XDRM("MD-IT")) S X=$P(XDRM("MD-IT"),U,2) D TEST I '$T S XDRERR=11 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",62,0)
 I $P(XDRM(0),U,31)]"" S XDRM("MERGE-MSG")=$S($P($P(XDRM(0),U,31),"-",2)]"":$P($P(XDRM(0),U,31),"-")_"^"_$P($P(XDRM(0),U,31),"-",2),1:U_$P(XDRM(0),U,31)) I 1
"RTN","XDRMAINI",63,0)
 I $D(XDRM("MERGE-MSG")) S X=$P(XDRM("MERGE-MSG"),U,2) D TEST I '$T S XDRERR=12 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",64,0)
 I '$D(XDRM("NOVERIFY")) S XDRM("GL")="^VA(15,""APOT"","_""""_$P(XDRGL,U,2)_""""_",XDRMPAIR)"
"RTN","XDRMAINI",65,0)
 I $O(^VA(15.1,XDRFL,12,0))&($P(XDRM(0),U,25)) S XDRERR=13 D ^XDREMSG G MERGEX
"RTN","XDRMAINI",66,0)
 D MAILGRP
"RTN","XDRMAINI",67,0)
MERGEX Q
"RTN","XDRMAINI",68,0)
 ;
"RTN","XDRMAINI",69,0)
TEST ;
"RTN","XDRMAINI",70,0)
 X ^%ZOSF("TEST") K X
"RTN","XDRMAINI",71,0)
 Q
"RTN","XDRMAINI",72,0)
 ;
"RTN","XDRMAINI",73,0)
MAILGRP ;
"RTN","XDRMAINI",74,0)
 I '$D(XDRM("VERIFY-MSG")),'$D(XDRM("VMAILGRP")),$D(XDRM(0)),$P(XDRM(0),U,16),$D(^XMB(3.8,$P(XDRM(0),U,16),1,"B")) F XDRI=0:0 S XDRI=$O(^XMB(3.8,$P(XDRM(0),U,16),1,"B",XDRI)) Q:'XDRI  S XDRM("VMAILGRP",XDRI)=""
"RTN","XDRMAINI",75,0)
 I '$D(XDRM("MERGE-MSG")),'$D(XDRM("MMAILGRP")),$D(XDRM(0)),$P(XDRM(0),U,29),$D(^XMB(3.8,$P(XDRM(0),U,29),1,"B")) F XDRI=0:0 S XDRI=$O(^XMB(3.8,$P(XDRM(0),U,29),1,"B",XDRI)) Q:'XDRI  S XDRM("MMAILGRP",XDRI)=""
"RTN","XDRMAINI",76,0)
 I '$D(XDRD("DMAILGRP")),$D(XDRM(0)),$P(XDRM(0),U,11),$D(^XMB(3.8,$P(XDRM(0),U,11),1,"B")) F XDRI=0:0 S XDRI=$O(^XMB(3.8,$P(XDRM(0),U,11),1,"B",XDRI)) Q:'XDRI  S XDRD("DMAILGRP",XDRI)=""
"RTN","XDRMAINI",77,0)
 K XDRI
"RTN","XDRMAINI",78,0)
 Q
"RTN","XDRMERG")
0^29^B49078199
"RTN","XDRMERG",1,0)
XDRMERG ;SF-IRMFO.SEA/JLI - TENATIVE UPDATE POINTER NODES ;4/6/98  14:01
"RTN","XDRMERG",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERG",3,0)
 ;;
"RTN","XDRMERG",4,0)
 Q
"RTN","XDRMERG",5,0)
 ;
"RTN","XDRMERG",6,0)
 ; FILE is the file NUMBER of the file in which the pointed to fields
"RTN","XDRMERG",7,0)
 ;        are being merged (e.g., 2 or 200)
"RTN","XDRMERG",8,0)
 ; FROM is a root under which paired arrays of FROM and TO ien values
"RTN","XDRMERG",9,0)
 ;        may be found.  If internal entry number 275 were being merged
"RTN","XDRMERG",10,0)
 ;        merged into ien 75, and the array name to be used was XX,
"RTN","XDRMERG",11,0)
 ;        the data would be stored as ARRYNAME(FROMIEN,TOIEN) OR
"RTN","XDRMERG",12,0)
 ;        XX(275,75).  The call would be
"RTN","XDRMERG",13,0)
 ;
"RTN","XDRMERG",14,0)
 ;          D ENTRY^XDRMERG(2,"XX")
"RTN","XDRMERG",15,0)
 ;
"RTN","XDRMERG",16,0)
 ;    Any number of pairs may be in the From/To array, and the higher
"RTN","XDRMERG",17,0)
 ;    this number, the more efficient the conversion will be.
"RTN","XDRMERG",18,0)
 ;
"RTN","XDRMERG",19,0)
EN(FILE,FROM) ;
"RTN","XDRMERG",20,0)
 D RESTART(FILE,FROM)
"RTN","XDRMERG",21,0)
 Q
"RTN","XDRMERG",22,0)
 ;
"RTN","XDRMERG",23,0)
 ; The restart entry point permits the user to specify locations for
"RTN","XDRMERG",24,0)
 ; continuation of a previously interrupted merge process.  The
"RTN","XDRMERG",25,0)
 ; first two arguments are as indicated above for the EN entry point.
"RTN","XDRMERG",26,0)
 ; The next three arguments are optional, and should only be set for
"RTN","XDRMERG",27,0)
 ;    a restart of a merge which was interrupted in progress.  Even
"RTN","XDRMERG",28,0)
 ;    then these values could be omitted with minimal impact on the
"RTN","XDRMERG",29,0)
 ;    first two phases of the merge operation.
"RTN","XDRMERG",30,0)
 ;
"RTN","XDRMERG",31,0)
 ; XDRTYPE is an indicator of the phase of the merge process
"RTN","XDRMERG",32,0)
 ;
"RTN","XDRMERG",33,0)
 ; SFILE indicates the pointer file number from which processing
"RTN","XDRMERG",34,0)
 ;    should be continued.
"RTN","XDRMERG",35,0)
 ;
"RTN","XDRMERG",36,0)
 ; SENTRY indicates the internal entry number within SFILE from which
"RTN","XDRMERG",37,0)
 ;    processing should be continued
"RTN","XDRMERG",38,0)
 ;
"RTN","XDRMERG",39,0)
RESTART(FILE,FROM,XDRTYPE,SFILE,SENTRY) ;
"RTN","XDRMERG",40,0)
 ;
"RTN","XDRMERG",41,0)
 N XBASIS,CURRTYPE,CURRFIL,XBASE,X,XDRXT,XDRH1,XDRH2,XDRH3,XTYPE
"RTN","XDRMERG",42,0)
 N XDRFGLOB,VAFCA08,XDRDVALF
"RTN","XDRMERG",43,0)
 S VAFCA08=1,XDRDVALF=1
"RTN","XDRMERG",44,0)
 ;
"RTN","XDRMERG",45,0)
 S XDRFGLOB=$G(^DIC(FILE,0,"GL")) Q:XDRFGLOB=""
"RTN","XDRMERG",46,0)
 ;
"RTN","XDRMERG",47,0)
 I $G(XDRTYPE)<2 D CHKFROM^XDRMERG2(FROM,FILE) ; check for self-pointers, circular, etc.
"RTN","XDRMERG",48,0)
 ;
"RTN","XDRMERG",49,0)
 S XDRGID=$O(@FROM@("")) I XDRGID="" Q
"RTN","XDRMERG",50,0)
 S XDRGID=FILE_U_XDRGID_U_$O(@FROM@(XDRGID,""))
"RTN","XDRMERG",51,0)
 S ^XTMP("XDRSTAT",0)=$$FMADD^XLFDT(DT,30)_U_DT
"RTN","XDRMERG",52,0)
 S ^XTMP("XDRSTAT",XDRGID,"START",$J)=$$NOW^XLFDT()
"RTN","XDRMERG",53,0)
 ;
"RTN","XDRMERG",54,0)
 I $G(XDRTYPE)<2 D
"RTN","XDRMERG",55,0)
 . S XDRTYPE=1
"RTN","XDRMERG",56,0)
 . D DOMAIN^XDRMERG2(FILE,FROM)
"RTN","XDRMERG",57,0)
 . S XDRTYPE=2
"RTN","XDRMERG",58,0)
 I $D(ZTSTOP) Q
"RTN","XDRMERG",59,0)
 ;
"RTN","XDRMERG",60,0)
LOOP ;
"RTN","XDRMERG",61,0)
 I $G(SFILE)="" S SFILE=0
"RTN","XDRMERG",62,0)
 I $G(SENTRY)="" S SENTRY=0
"RTN","XDRMERG",63,0)
 S CURRTYPE=XDRTYPE
"RTN","XDRMERG",64,0)
 ;
"RTN","XDRMERG",65,0)
 D SETUP(XDRTYPE) ; identify files and fields to be processed
"RTN","XDRMERG",66,0)
 ;
"RTN","XDRMERG",67,0)
 F CURRFIL=SFILE-.0000001:0 Q:$D(ZTSTOP)  S CURRFIL=$O(^TMP($J,"XFIL",CURRFIL)) Q:CURRFIL'>0  D
"RTN","XDRMERG",68,0)
 . I CURRFIL=1 Q
"RTN","XDRMERG",69,0)
 . I CURRFIL=15!(CURRFIL=15.4) Q
"RTN","XDRMERG",70,0)
 . I FILE=63,CURRFIL=2 Q
"RTN","XDRMERG",71,0)
 . ;
"RTN","XDRMERG",72,0)
 . I $D(XDRTHRED)>1,'$D(XDRTHRED(CURRFIL)) Q
"RTN","XDRMERG",73,0)
 . ;
"RTN","XDRMERG",74,0)
 . ;
"RTN","XDRMERG",75,0)
 . S XBASIS=^TMP($J,"XFIL",CURRFIL)
"RTN","XDRMERG",76,0)
 . I '$D(^TMP($J,"XGLOB",XBASIS)) D  I X'[XBASIS Q
"RTN","XDRMERG",77,0)
 . . S X=$O(^TMP($J,"XGLOB",XBASIS))
"RTN","XDRMERG",78,0)
 . S XDRXT=$$NOW^XLFDT()
"RTN","XDRMERG",79,0)
 . I $D(XDRFDA) D  I 1
"RTN","XDRMERG",80,0)
 . . S ^VA(15.2,XDRFDA,3,XDRFDA1,1)=XDRXT_U_CURRTYPE_U_CURRFIL_U
"RTN","XDRMERG",81,0)
 . E  D
"RTN","XDRMERG",82,0)
 . . S ^XTMP("XDRSTAT",XDRGID,"TIME",$J)=XDRXT_U_CURRTYPE_U_CURRFIL_U
"RTN","XDRMERG",83,0)
 . S XDRH1=XDRXT
"RTN","XDRMERG",84,0)
 . S ^XTMP("XDRSTAT",XDRGID,"FIL",XDRTYPE,CURRFIL)=XDRH1
"RTN","XDRMERG",85,0)
 . S XTYPE=$$TYPE^XDRMERG1(XBASIS) D  Q:$D(ZTSTOP)
"RTN","XDRMERG",86,0)
 . . I XDRTYPE=2 D  Q
"RTN","XDRMERG",87,0)
 . . . I XTYPE="DINUM" D DINUM^XDRMERG2(XBASIS,XBASIS,"") Q
"RTN","XDRMERG",88,0)
 . . . I XTYPE'="" D XREFS^XDRMERG2(XBASIS,XBASIS,"")
"RTN","XDRMERG",89,0)
 . . D CHASE^XDRMERG1(XBASIS,XBASIS,"")
"RTN","XDRMERG",90,0)
 . S XDRH2=$$NOW^XLFDT()
"RTN","XDRMERG",91,0)
 . S XDRH3=$$FMDIFF^XLFDT(XDRH2,XDRH1,2)
"RTN","XDRMERG",92,0)
 . S ^XTMP("XDRSTAT",XDRGID,"FIL",XDRTYPE,CURRFIL)=XDRH1_U_XDRH2_U_XDRH3
"RTN","XDRMERG",93,0)
 ;
"RTN","XDRMERG",94,0)
 I '$D(ZTSTOP),XDRTYPE=2  D  G LOOP ; NOW DO THE ONES WE HAVE TO HUNT
"RTN","XDRMERG",95,0)
 . S XDRTYPE=3
"RTN","XDRMERG",96,0)
 . S (SFILE,SENTRY)=0
"RTN","XDRMERG",97,0)
 . K XDRTHRD
"RTN","XDRMERG",98,0)
 . N I,MAXTHRED,THREADS S MAXTHRED=$P($G(^VA(15.1,FILE,1)),U),THREADS=$P($G(^(1)),U,2) S:'$D(XDRFDA) MAXTHRED=1 Q:MAXTHRED'>1  D SETUP(XDRTYPE)
"RTN","XDRMERG",99,0)
 . F I=1:1:MAXTHRED S XDRTHRD=$P(THREADS,";",I) Q:XDRTHRD'>0  D
"RTN","XDRMERG",100,0)
 . . S XDRTHRD(I,XDRTHRD)="" K ^TMP($J,"XFIL",XDRTHRD)
"RTN","XDRMERG",101,0)
 . S XDRTHRD=0 F  S I=$S(I'<MAXTHRED:1,1:I+1) S XDRTHRD=$O(^TMP($J,"XFIL",XDRTHRD)) Q:XDRTHRD'>0  S XDRTHRD(I,XDRTHRD)="" K ^TMP($J,"XFIL",XDRTHRD)
"RTN","XDRMERG",102,0)
 . F XDRTHRD=2:1:MAXTHRED,1 D
"RTN","XDRMERG",103,0)
 . . K XDRTHRED M XDRTHRED=XDRTHRD(XDRTHRD) S XDRTHRED=XDRTHRD
"RTN","XDRMERG",104,0)
 . . I XDRTHRD=1 D  Q
"RTN","XDRMERG",105,0)
 . . . F XDRTHRED=0:0 S XDRTHRED=$O(XDRTHRED(XDRTHRED)) Q:XDRTHRED'>0  S ^VA(15.2,XDRFDA,3,XDRFDA1,2,XDRTHRED,0)=XDRTHRED
"RTN","XDRMERG",106,0)
 . . S ZTRTN="DQTHREAD^XDRMERG0",ZTIO="",ZTDTH=$$NOW^XLFDT()
"RTN","XDRMERG",107,0)
 . . S ZTDESC="MERGE THREAD FOR "_XDRTHRD,ZTSAVE("XDRFDA")=""
"RTN","XDRMERG",108,0)
 . . S ZTSAVE("XDRTHRED")="",ZTSAVE("XDRTHRED(")="",ZTSAVE("XDRFILE")=FILE
"RTN","XDRMERG",109,0)
 . . D ^%ZTLOAD
"RTN","XDRMERG",110,0)
 . S XDRTHRED=""
"RTN","XDRMERG",111,0)
 ;
"RTN","XDRMERG",112,0)
 I $D(ZTSTOP) S ^XTMP("XDRSTAT",XDRGID,"HALT",$J)=$$NOW^XLFDT()
"RTN","XDRMERG",113,0)
 E  I '$D(XDRFDA) D
"RTN","XDRMERG",114,0)
 . D CLOSEIT
"RTN","XDRMERG",115,0)
 . S ^XTMP("XDRSTAT",XDRGID,"DONE",$J)=$$NOW^XLFDT()
"RTN","XDRMERG",116,0)
 Q
"RTN","XDRMERG",117,0)
CLOSEIT ;
"RTN","XDRMERG",118,0)
 I $D(XDRXFLG) Q  ; DON'T CLOSE IF JUST CHECKING
"RTN","XDRMERG",119,0)
 S:'$D(FILE) FILE=XDRFILE
"RTN","XDRMERG",120,0)
 S:'$D(FROM) FROM=$NA(^TMP("XDRFROM",$J)) ;FROM="XDRZZZ"
"RTN","XDRMERG",121,0)
 D SETUP(2)
"RTN","XDRMERG",122,0)
 S I="" F  S I=$O(^TMP($J,"XGLOB",I)) Q:I=""  D
"RTN","XDRMERG",123,0)
 . I I'["DA,",$P($G(^TMP($J,"XGLOB",I,0,1)),U,3)="DINUM" D
"RTN","XDRMERG",124,0)
 . . F XDRFR=0:0 S XDRFR=$O(@FROM@(XDRFR)) Q:XDRFR'>0  D
"RTN","XDRMERG",125,0)
 . . . K @(I_XDRFR_")")
"RTN","XDRMERG",126,0)
 I FILE'=2 D
"RTN","XDRMERG",127,0)
 . S I=^DIC(FILE,0,"GL")
"RTN","XDRMERG",128,0)
 . F XDRFR=0:0 S XDRFR=$O(@FROM@(XDRFR)) Q:XDRFR'>0  D
"RTN","XDRMERG",129,0)
 . . K @(I_XDRFR_")")
"RTN","XDRMERG",130,0)
 Q
"RTN","XDRMERG",131,0)
 ;
"RTN","XDRMERG",132,0)
SETUP(XDRTYPE) ; XDRTYPE=3 DOES NON-.01 FIELDS (AND .01 WITH NO DINUM OR X-REF)
"RTN","XDRMERG",133,0)
 N PFILE,PUFILE,PXFILE,PGLOB,PUFLD,PFLD,PNODE,PUNODE,NODE,PIECE,XREF,XGLOB,N,I
"RTN","XDRMERG",134,0)
 ;
"RTN","XDRMERG",135,0)
 K ^TMP($J,"XGLO"),^TMP($J,"XGLOB"),^TMP($J,"XFIL")
"RTN","XDRMERG",136,0)
 N XDRDINUM S XDRDINUM(FILE)=""
"RTN","XDRMERG",137,0)
 N FILE
"RTN","XDRMERG",138,0)
 S FILE=""
"RTN","XDRMERG",139,0)
 F  S FILE=$O(XDRDINUM(FILE)) Q:FILE=""  D
"RTN","XDRMERG",140,0)
 . F PFILE=0:0 S PFILE=$O(^DD(FILE,0,"PT",PFILE)) Q:PFILE'>0  D
"RTN","XDRMERG",141,0)
 . . S PUFILE=PFILE,N=0
"RTN","XDRMERG",142,0)
 . . F  Q:$D(^DIC(PUFILE,0,"GL"))  D  Q:PXFILE=""
"RTN","XDRMERG",143,0)
 . . . S PXFILE=$G(^DD(PUFILE,0,"UP")) I PXFILE="" Q
"RTN","XDRMERG",144,0)
 . . . S PUFLD=$O(^DD(PXFILE,"SB",PUFILE,0)) I PUFLD'>0 S PXFILE="" Q
"RTN","XDRMERG",145,0)
 . . . S PUNODE=$P($P(^DD(PXFILE,PUFLD,0),U,4),";")
"RTN","XDRMERG",146,0)
 . . . I PUNODE'=+PUNODE S PUNODE=""""_PUNODE_""""
"RTN","XDRMERG",147,0)
 . . . S N=N+1
"RTN","XDRMERG",148,0)
 . . . S PNODE(N)=PUNODE
"RTN","XDRMERG",149,0)
 . . . S PUFILE=PXFILE
"RTN","XDRMERG",150,0)
 . . I '$D(^DIC(PUFILE,0,"GL")) Q
"RTN","XDRMERG",151,0)
 . . K PGLOB
"RTN","XDRMERG",152,0)
 . . S PGLOB(0)=^DIC(PUFILE,0,"GL")
"RTN","XDRMERG",153,0)
 . . S ^TMP($J,"XFIL",PUFILE)=PGLOB(0)
"RTN","XDRMERG",154,0)
 . . S XGLOB=PGLOB(0)
"RTN","XDRMERG",155,0)
 . . F I=1:1 Q:N=0  D
"RTN","XDRMERG",156,0)
 . . . S PGLOB(I)=PGLOB(I-1)_"DA,"_PNODE(N)_","
"RTN","XDRMERG",157,0)
 . . . S N=N-1
"RTN","XDRMERG",158,0)
 . . . S ^TMP($J,"XGLO",PGLOB(I))=""
"RTN","XDRMERG",159,0)
 . . . S XGLOB=PGLOB(I)
"RTN","XDRMERG",160,0)
 . . F PFLD=0:0 S PFLD=$O(^DD(FILE,0,"PT",PFILE,PFLD)) Q:PFLD'>0  D
"RTN","XDRMERG",161,0)
 . . . I '$D(^DD(PFILE,PFLD,0)) Q
"RTN","XDRMERG",162,0)
 . . . I $P(^DD(PFILE,PFLD,0),U,2)'["V",$P(^(0),U,3)'=$E(^DIC(FILE,0,"GL"),2,200),PFILE'=53.51 Q  ; MAKE SURE POINTER IS 'REALLY' POINTING TO FILE (E.G., FIELD 400 IN FILE 60)
"RTN","XDRMERG",163,0)
 . . . S NODE=$P($G(^DD(PFILE,PFLD,0)),U,4)
"RTN","XDRMERG",164,0)
 . . . I NODE="" Q
"RTN","XDRMERG",165,0)
 . . . S PIECE=$P(NODE,";",2)
"RTN","XDRMERG",166,0)
 . . . S NODE=$P(NODE,";")
"RTN","XDRMERG",167,0)
 . . . I NODE'=+NODE S NODE=""""_NODE_""""
"RTN","XDRMERG",168,0)
 . . . S XREF=""
"RTN","XDRMERG",169,0)
 . . . I PFLD=.01 D
"RTN","XDRMERG",170,0)
 . . . . I ^DD(PFILE,PFLD,0)["DINUM" D
"RTN","XDRMERG",171,0)
 . . . . . S XREF="DINUM"
"RTN","XDRMERG",172,0)
 . . . . . S XDRDINUM(PFILE)=""
"RTN","XDRMERG",173,0)
 . . . . I $D(^DIC(PFILE,0,"GL")) D
"RTN","XDRMERG",174,0)
 . . . . . N J,K,L,X1
"RTN","XDRMERG",175,0)
 . . . . . F J=0:0 Q:XREF'=""  S J=$O(^DD(PFILE,PFLD,1,J)) Q:J'>0  D
"RTN","XDRMERG",176,0)
 . . . . . . S X1=$P($G(^DD(PFILE,PFLD,1,J,0)),U,2)
"RTN","XDRMERG",177,0)
 . . . . . . Q:X1=""
"RTN","XDRMERG",178,0)
 . . . . . . I X1'=+X1 S X1=""""_X1_""""
"RTN","XDRMERG",179,0)
 . . . . . . S K=$O(@(XGLOB_X1_","""")")) Q:K=""
"RTN","XDRMERG",180,0)
 . . . . . . S L=$O(@(XGLOB_X1_",K,"""")")) Q:L'>0
"RTN","XDRMERG",181,0)
 . . . . . . I $P($G(@(XGLOB_L_",0)")),U)=K S XREF=X1
"RTN","XDRMERG",182,0)
 . . . I XREF'=""&(XDRTYPE'=3),XGLOB'["DA," S ^TMP($J,"XGLOB",XGLOB,NODE,PIECE)=PFILE_U_PFLD_U_XREF
"RTN","XDRMERG",183,0)
 . . . I (XREF=""&(XDRTYPE=3))!(XGLOB["DA,") S ^TMP($J,"XGLOB",XGLOB,NODE,PIECE)=$S(XDRTYPE'=3:PFILE_U_PFLD_U_XREF,$O(^DD(PFILE,PFLD,1,0))>0:PFILE_U_PFLD,1:"")
"RTN","XDRMERG",184,0)
 Q
"RTN","XDRMERG",185,0)
 ;
"RTN","XDRMERG0")
0^30^B40922646
"RTN","XDRMERG0",1,0)
XDRMERG0 ;SF-IRMFO.SEA/JLI - START OF NON-INTERACTIVE BATCH MERGE ;4/8/98  16:24
"RTN","XDRMERG0",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERG0",3,0)
 ;;
"RTN","XDRMERG0",4,0)
 Q
"RTN","XDRMERG0",5,0)
QUE ; This is the entry point for queueing a merge process
"RTN","XDRMERG0",6,0)
 ;
"RTN","XDRMERG0",7,0)
 D EN^XDRVCHEK ; update verified and/or ready to merge statuses if necessary
"RTN","XDRMERG0",8,0)
 ;
"RTN","XDRMERG0",9,0)
 G QUE^XDRMERGB ; CODE MOVED TO KEEP DOWN SIZE OF ROUTINE
"RTN","XDRMERG0",10,0)
 ;
"RTN","XDRMERG0",11,0)
DQ ; This is the entry point for actually processing the merge task
"RTN","XDRMERG0",12,0)
 ; Either as the initial entry or on restart.
"RTN","XDRMERG0",13,0)
 ;
"RTN","XDRMERG0",14,0)
 N XDRZZZ,XDRFILE,XDRPACK,XDRPACKN,XDRSFILE,XDRFDA1,XDRPACKN
"RTN","XDRMERG0",15,0)
 N XDRROU,XDRCODE,XDRGLOB,XDRDVALF
"RTN","XDRMERG0",16,0)
 S XDRDVALF=1,XDRZZZ=$NA(^TMP("XDRFROM",$J)) K @XDRZZZ
"RTN","XDRMERG0",17,0)
 ;
"RTN","XDRMERG0",18,0)
 I $$NEWERR^%ZTER() N $ETRAP,$ESTACK S $ETRAP="D ERR^XDRMERG0"
"RTN","XDRMERG0",19,0)
 E  S X="ERR^XDRMERG0",@^%ZOSF("TRAP")
"RTN","XDRMERG0",20,0)
 S XDRGLOB=^DIC($P(^VA(15.2,XDRFDA,0),U,2),0,"GL"),XDRGLOB=";"_$E(XDRGLOB,2,$L(XDRGLOB))
"RTN","XDRMERG0",21,0)
 F I=0:0 S I=$O(^VA(15.2,XDRFDA,2,I)) Q:I'>0  S X=^(I,0) D
"RTN","XDRMERG0",22,0)
 . S @XDRZZZ@(+X,$P(X,U,2),((+X)_XDRGLOB),$P(X,U,2)_XDRGLOB)=$P(X,U,3) ; REVISED WITH 4 SUBSCRIPTS TO SAVE MERGE IMAGE IN FM STRUCTURED FILE
"RTN","XDRMERG0",23,0)
 ;
"RTN","XDRMERG0",24,0)
 ; DO DATA CHECKING BEFORE STARTING MERGE
"RTN","XDRMERG0",25,0)
 ;
"RTN","XDRMERG0",26,0)
 S XDRPRE=1 D
"RTN","XDRMERG0",27,0)
 . S XDRFDA1=$$ADDSPECL("DATA CHECKING")
"RTN","XDRMERG0",28,0)
 . I $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="C" Q
"RTN","XDRMERG0",29,0)
 . S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,2,9)=$$NOW^XLFDT()_"^A^^^^"
"RTN","XDRMERG0",30,0)
 . D ENPAIR^XDRDVAL1($P(^VA(15.2,XDRFDA,0),U,2),XDRZZZ,XDRFDA) ; CHECK FOR DATA VALIDITY PROBLEMS, REMOVE ANY PAIRS THAT HAVE PROBLEMS
"RTN","XDRMERG0",31,0)
 . D CHKFROM^XDRMERG2(XDRZZZ,$P(^VA(15.2,XDRFDA,0),U,2))
"RTN","XDRMERG0",32,0)
 . I '$D(@XDRZZZ) D
"RTN","XDRMERG0",33,0)
 . . D SETCOMPL ; MARK DATA CHECKING COMPLETE
"RTN","XDRMERG0",34,0)
 . . S XDRFDA1=$$ADDSPECL("NO PAIRS LEFT") D SETCOMPL
"RTN","XDRMERG0",35,0)
 . . S XDRFDA1=$$ADDSPECL("**STOPPED**")
"RTN","XDRMERG0",36,0)
 . . K XDRPRE ; AND MAKE IT CLOSE WHOLE PROCESS
"RTN","XDRMERG0",37,0)
 . D SETCOMPL
"RTN","XDRMERG0",38,0)
 . Q
"RTN","XDRMERG0",39,0)
 ;
"RTN","XDRMERG0",40,0)
 I '$D(@XDRZZZ) Q
"RTN","XDRMERG0",41,0)
 S XDRFILE=$P(^VA(15.2,XDRFDA,0),U,2) Q:XDRFILE'>0
"RTN","XDRMERG0",42,0)
 I $P(^VA(15.2,XDRFDA,0),U,4)="S" S $P(^(0),U,3,4)=$$NOW^XLFDT()_U_"A"
"RTN","XDRMERG0",43,0)
 E  S I=$P(^VA(15.2,XDRFDA,0),U,7),$P(^(0),U,4,7)="A"_U_$$NOW^XLFDT()_U_U_(I+1)
"RTN","XDRMERG0",44,0)
 ;
"RTN","XDRMERG0",45,0)
 ; PROCESS ANY SPECIAL HANDLING INDICATED FOR PACKAGES
"RTN","XDRMERG0",46,0)
 ;
"RTN","XDRMERG0",47,0)
 F XDRPACK=0:0 S XDRPACK=$O(^DIC(9.4,XDRPACK)) Q:XDRPACK'>0  D
"RTN","XDRMERG0",48,0)
 . F XDRSFILE=0:0 S XDRSFILE=$O(^DIC(9.4,XDRPACK,20,XDRSFILE)) Q:XDRSFILE'>0  D
"RTN","XDRMERG0",49,0)
 . . I $P(^DIC(9.4,XDRPACK,20,XDRSFILE,0),U)=XDRFILE D
"RTN","XDRMERG0",50,0)
 . . . S X=^DIC(9.4,XDRPACK,20,XDRSFILE,0)
"RTN","XDRMERG0",51,0)
 . . . S XDRPACKN=$P(^DIC(9.4,XDRPACK,0),U)
"RTN","XDRMERG0",52,0)
 . . . S XDRROU=$P(X,U,2,3)
"RTN","XDRMERG0",53,0)
 . . . S XDRCODE=$G(^DIC(9.4,XDRPACK,20,XDRSFILE,1))
"RTN","XDRMERG0",54,0)
 . . . S XDRFDA1=$$ADDSPECL(XDRPACKN)
"RTN","XDRMERG0",55,0)
 . . . I $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="C" Q
"RTN","XDRMERG0",56,0)
 . . . S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,2,9)=$$NOW^XLFDT()_"^A^^^^"_ZTSK_U_XDRROU
"RTN","XDRMERG0",57,0)
 . . . D DQ1
"RTN","XDRMERG0",58,0)
 K XDRPRE
"RTN","XDRMERG0",59,0)
 ;
"RTN","XDRMERG0",60,0)
 ; NOW PROCESS THE MAIN FILE AND ITS DEPENDENCIES
"RTN","XDRMERG0",61,0)
 ;
"RTN","XDRMERG0",62,0)
 I '$D(ZSTOP) D
"RTN","XDRMERG0",63,0)
 . S XDRFDA1=$$ADDSPECL($P(^DIC(XDRFILE,0),U)_" FILE")
"RTN","XDRMERG0",64,0)
 . I $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="C" Q
"RTN","XDRMERG0",65,0)
 . S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,2,7)=$$NOW^XLFDT()_U_"A^^^^"_$G(ZTSK)
"RTN","XDRMERG0",66,0)
 . S $P(^VA(15.2,XDRFDA,3,XDRFDA1,1),U)=$$NOW^XLFDT()
"RTN","XDRMERG0",67,0)
 . S X=^VA(15.2,XDRFDA,3,XDRFDA1,1)
"RTN","XDRMERG0",68,0)
 . S XDRCSTAT=$P(X,U,2),XDRCFIL=$P(X,U,3),XDRCENT=$P(X,U,4)
"RTN","XDRMERG0",69,0)
 . ;
"RTN","XDRMERG0",70,0)
 . I XDRCSTAT'="" Q
"RTN","XDRMERG0",71,0)
 . I $D(ZTSTOP) S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="H"
"RTN","XDRMERG0",72,0)
 ;
"RTN","XDRMERG0",73,0)
 I '$D(ZTSTOP) D
"RTN","XDRMERG0",74,0)
 . S XDRFDA2=XDRFDA1
"RTN","XDRMERG0",75,0)
 . F  S XDRFDA1=$O(^VA(15.2,XDRFDA,3,XDRFDA1)) Q:XDRFDA1'>0  D
"RTN","XDRMERG0",76,0)
 . . S ZTRTN="RETHREAD^XDRMERG0",ZTIO="",ZTDESC="MERGE THREAD"
"RTN","XDRMERG0",77,0)
 . . S ZTSAVE("XDRFDA")="",ZTSAVE("XDRFDA1")="",ZTDTH=$$NOW^XLFDT()
"RTN","XDRMERG0",78,0)
 . . D ^%ZTLOAD
"RTN","XDRMERG0",79,0)
 . I $P(^VA(15.2,XDRFDA,3,XDRFDA2,0),U,3)="C" Q
"RTN","XDRMERG0",80,0)
 . S XDRFDA1=XDRFDA2 K XDRTHRED F I=0:0 S I=$O(^VA(15.2,XDRFDA,3,XDRFDA1,2,I)) Q:I'>0  S J=^(I,0) S XDRTHRED(J)=""
"RTN","XDRMERG0",81,0)
 . S ^VA(15.2,XDRFDA,1)=$$NOW^XLFDT()
"RTN","XDRMERG0",82,0)
 . D RESTART^XDRMERG(XDRFILE,$NA(^TMP("XDRFROM",$J)),XDRCSTAT,XDRCFIL,XDRCENT)
"RTN","XDRMERG0",83,0)
 ;
"RTN","XDRMERG0",84,0)
 I $D(ZTSTOP) S $P(^VA(15.2,XDRFDA,0),U,4)="H"
"RTN","XDRMERG0",85,0)
 E  D SETCOMPL
"RTN","XDRMERG0",86,0)
 Q
"RTN","XDRMERG0",87,0)
 ;
"RTN","XDRMERG0",88,0)
DQTHREAD ; START POINT FOR EXTRA THREADS
"RTN","XDRMERG0",89,0)
 N XDRNAME,XDRFDA1,I,X,XDRZZZ
"RTN","XDRMERG0",90,0)
 S XDRZZZ=$NA(^TMP("XDRFROM",$J)) K @XDRZZZ
"RTN","XDRMERG0",91,0)
 ;
"RTN","XDRMERG0",92,0)
 S XDRFILE=$P($G(^VA(15.2,XDRFDA,0)),U,2) Q:XDRFILE'>0
"RTN","XDRMERG0",93,0)
 S XDRNAME="  THREAD "_XDRTHRED
"RTN","XDRMERG0",94,0)
 S XDRFDA1=$$ADDSPECL(XDRNAME)
"RTN","XDRMERG0",95,0)
 I $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="C" Q
"RTN","XDRMERG0",96,0)
 S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,2,7)=$$NOW^XLFDT()_U_"A^^^^"_$G(ZTSK)
"RTN","XDRMERG0",97,0)
 S XDRGLOB=^DIC($P(^VA(15.2,XDRFDA,0),U,2),0,"GL"),XDRGLOB=";"_$E(XDRGLOB,2,$L(XDRGLOB))
"RTN","XDRMERG0",98,0)
 F I=0:0 S I=$O(^VA(15.2,XDRFDA,2,I)) Q:I'>0  S X=^(I,0) D
"RTN","XDRMERG0",99,0)
 . ; S @XDRZZZ@(+X,+$P(X,U,2))=$P(X,U,3) ; ORIGINAL VERSION WITH 2 SUBSCRIPTS
"RTN","XDRMERG0",100,0)
 . S @XDRZZZ@(+X,$P(X,U,2),((+X)_XDRGLOB),$P(X,U,2)_XDRGLOB)=$P(X,U,3) ; REVISED WITH 4 SUBSCRIPTS TO SAVE MERGE IMAGE IN FM STRUCTURED FILE
"RTN","XDRMERG0",101,0)
 F I=0:0 S I=$O(XDRTHRED(I)) Q:I'>0  D
"RTN","XDRMERG0",102,0)
 . S ^VA(15.2,XDRFDA,3,XDRFDA1,2,I,0)=I
"RTN","XDRMERG0",103,0)
 S X=$G(^VA(15.2,XDRFDA,3,XDRFDA1,1))
"RTN","XDRMERG0",104,0)
 S XDRCFIL=+$P(X,U,3),XDRCENT=+$P(X,U,4)
"RTN","XDRMERG0",105,0)
 D RESTART^XDRMERG(XDRFILE,$NA(^TMP("XDRFROM",$J)),3,XDRCFIL,XDRCENT)
"RTN","XDRMERG0",106,0)
 I $D(ZTSTOP) S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="H"
"RTN","XDRMERG0",107,0)
 E  D SETCOMPL
"RTN","XDRMERG0",108,0)
 Q
"RTN","XDRMERG0",109,0)
 ;
"RTN","XDRMERG0",110,0)
RETHREAD ; RESTART THREADS
"RTN","XDRMERG0",111,0)
 N I
"RTN","XDRMERG0",112,0)
 K XDRTHRED
"RTN","XDRMERG0",113,0)
 F I=0:0 S I=$O(^VA(15.2,XDRFDA,3,XDRFDA1,2,I)) Q:I'>0  S J=^(I,0),XDRTHRED(J)=""
"RTN","XDRMERG0",114,0)
 S XDRTHRED=$P($P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U)," THREAD ",2)
"RTN","XDRMERG0",115,0)
 D DQTHREAD
"RTN","XDRMERG0",116,0)
 Q
"RTN","XDRMERG0",117,0)
 ;
"RTN","XDRMERG0",118,0)
DQ1 ; HANDLE MERGE OF SPECIAL FILES
"RTN","XDRMERG0",119,0)
 N X,XDRROU
"RTN","XDRMERG0",120,0)
 S X=$G(^VA(15.2,XDRFDA,3,XDRFDA1,0))
"RTN","XDRMERG0",121,0)
 I $P(X,U,3)="C" Q
"RTN","XDRMERG0",122,0)
 S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,2,7)=$$NOW^XLFDT()_U_"A^^^^"_$G(ZTSK)
"RTN","XDRMERG0",123,0)
 S $P(^VA(15.2,XDRFDA,3,XDRFDA1,1),U)=$$NOW^XLFDT()
"RTN","XDRMERG0",124,0)
 S X=^VA(15.2,XDRFDA,3,XDRFDA1,1)
"RTN","XDRMERG0",125,0)
 S XDRCSTAT=$P(X,U,2),XDRCFIL=$P(X,U,3),XDRCENT=$P(X,U,4)
"RTN","XDRMERG0",126,0)
 S XDRROU=$P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,8,9) Q:XDRROU=""
"RTN","XDRMERG0",127,0)
 I $P(XDRROU,U)="" S XDRROU="EN"_XDRROU
"RTN","XDRMERG0",128,0)
 D @(XDRROU_"(XDRZZZ)")
"RTN","XDRMERG0",129,0)
 I $D(ZTSTOP) S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="H"
"RTN","XDRMERG0",130,0)
 E  D SETCOMPL
"RTN","XDRMERG0",131,0)
 Q
"RTN","XDRMERG0",132,0)
 ;
"RTN","XDRMERG0",133,0)
SETCOMPL ; Indicate that a component of the process was completed
"RTN","XDRMERG0",134,0)
 ;
"RTN","XDRMERG0",135,0)
 S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,5)=$$NOW^XLFDT()
"RTN","XDRMERG0",136,0)
 S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="C"
"RTN","XDRMERG0",137,0)
 K ^VA(15.2,XDRFDA,3,XDRFDA1,1)
"RTN","XDRMERG0",138,0)
 S J=1 F I=0:0 S I=$O(^VA(15.2,XDRFDA,3,I)) Q:I'>0  I $P(^(I,0),U,3)'="C" S J=0 Q
"RTN","XDRMERG0",139,0)
 I J=1,+$G(XDRPRE)=0 D  ; All threads have completed
"RTN","XDRMERG0",140,0)
 . S $P(^VA(15.2,XDRFDA,0),U,6)=$$NOW^XLFDT()
"RTN","XDRMERG0",141,0)
 . S $P(^VA(15.2,XDRFDA,0),U,4)="C"
"RTN","XDRMERG0",142,0)
 . F XDRXX=0:0 S XDRXX=$O(@XDRZZZ@(XDRXX)) Q:XDRXX'>0  D
"RTN","XDRMERG0",143,0)
 . . S XDRYY=$O(@XDRZZZ@(XDRXX,0)),XDRY1=$O(@XDRZZZ@(XDRXX,XDRYY,"")),XDRY2=$O(@XDRZZZ@(XDRXX,XDRYY,XDRY1,""))
"RTN","XDRMERG0",144,0)
 . . S XDRK=@XDRZZZ@(XDRXX,XDRYY,XDRY1,XDRY2)
"RTN","XDRMERG0",145,0)
 . . N XDRAA S XDRAA(15,(XDRK_","),.05)=2
"RTN","XDRMERG0",146,0)
 . . D UPDATE^DIE("","XDRAA")
"RTN","XDRMERG0",147,0)
 . S (FILE,XDRFILE)=$P(^VA(15.2,XDRFDA,0),U,2)
"RTN","XDRMERG0",148,0)
 . S FROM=$NA(^TMP("XDRFROM",$J))
"RTN","XDRMERG0",149,0)
 . D CLOSEIT^XDRMERG
"RTN","XDRMERG0",150,0)
 . D SNDMSG^XDRMERGB(XDRFDA)
"RTN","XDRMERG0",151,0)
 Q
"RTN","XDRMERG0",152,0)
 ;
"RTN","XDRMERG0",153,0)
ADDSPECL(PACKAGE) ; Add a package identifier to merge process
"RTN","XDRMERG0",154,0)
 ;  if already present, simply return the internal entry number
"RTN","XDRMERG0",155,0)
 ;  (it would be present if re-starting)
"RTN","XDRMERG0",156,0)
 ;
"RTN","XDRMERG0",157,0)
 N Y,XDRZZ,XDRXX
"RTN","XDRMERG0",158,0)
 S Y=$$FIND1^DIC(15.23,","_XDRFDA_",","Q",PACKAGE)
"RTN","XDRMERG0",159,0)
 I Y'>0 D
"RTN","XDRMERG0",160,0)
 . S XDRZZ(15.23,"+1,"_XDRFDA_",",.01)=PACKAGE
"RTN","XDRMERG0",161,0)
 . D UPDATE^DIE("","XDRZZ","XDRXX")
"RTN","XDRMERG0",162,0)
 . S Y=XDRXX(1)
"RTN","XDRMERG0",163,0)
 Q +Y
"RTN","XDRMERG0",164,0)
 ;
"RTN","XDRMERG0",165,0)
 ;
"RTN","XDRMERG0",166,0)
ERR ; On an error mark status as error, and save the error message
"RTN","XDRMERG0",167,0)
 ;
"RTN","XDRMERG0",168,0)
 S XDRZE=$ZE
"RTN","XDRMERG0",169,0)
 D ^%ZTER
"RTN","XDRMERG0",170,0)
 I $D(XDRFDA),$D(XDRFDA1) D
"RTN","XDRMERG0",171,0)
 . S $P(^VA(15.2,XDRFDA,3,XDRFDA1,0),U,3)="E",^(2)=XDRZE
"RTN","XDRMERG0",172,0)
 G UNWIND^%ZTER
"RTN","XDRMERG0",173,0)
 ;
"RTN","XDRMERG1")
0^31^B11317275
"RTN","XDRMERG1",1,0)
XDRMERG1 ;SF-IRMFO.SEA/JLI - TENATIVE UPDATE POINTER NODES ;11/19/97  10:48
"RTN","XDRMERG1",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERG1",3,0)
 ;;
"RTN","XDRMERG1",4,0)
 ;;
"RTN","XDRMERG1",5,0)
CHASE(XVAL,RVAL,XDRIENS) ;
"RTN","XDRMERG1",6,0)
 N XDRYT,XDRYTT,NODE,X,PC,Y,XDRTO,XDRIEN,XV,XN,XXV,XTYPE,X
"RTN","XDRMERG1",7,0)
 N DA,XV,XXV
"RTN","XDRMERG1",8,0)
 F DA=SENTRY:0 Q:$D(ZTSTOP)  S DA=$O(@(XVAL_DA_")")) Q:DA'>0  D
"RTN","XDRMERG1",9,0)
 . I $$S^%ZTLOAD S ZTSTOP=1 D  Q
"RTN","XDRMERG1",10,0)
 . . I '$D(XDRFDA) Q
"RTN","XDRMERG1",11,0)
 . . I $P(^VA(15.2,XDRFDA,0),U,9)="" S $P(^(0),U,9)=1
"RTN","XDRMERG1",12,0)
 . I $D(XDRFDA),$P(^VA(15.2,XDRFDA,0),U,9)=1 S ZTSTOP=1 Q
"RTN","XDRMERG1",13,0)
 . I XDRIENS="" D
"RTN","XDRMERG1",14,0)
 . . S XDRYT=$$NOW^XLFDT()
"RTN","XDRMERG1",15,0)
 . . I $$FMDIFF^XLFDT(XDRYT,XDRXT,2)>5 D  ;60 D
"RTN","XDRMERG1",16,0)
 . . . I $D(XDRFDA) D  I 1
"RTN","XDRMERG1",17,0)
 . . . . S ^VA(15.2,XDRFDA,3,XDRFDA1,1)=XDRYT_U_CURRTYPE_U_CURRFIL_U_DA
"RTN","XDRMERG1",18,0)
 . . . E  D
"RTN","XDRMERG1",19,0)
 . . . . S ^XTMP("XDRSTAT",XDRGID,"TIME",$J)=XDRYT_U_CURRTYPE_U_CURRFIL_U_DA
"RTN","XDRMERG1",20,0)
 . . . S XDRXT=XDRYT
"RTN","XDRMERG1",21,0)
 . I $D(^TMP($J,"XGLOB",RVAL)) D
"RTN","XDRMERG1",22,0)
 . . S NODE="" F  S NODE=$O(^TMP($J,"XGLOB",RVAL,NODE)) Q:NODE=""  D
"RTN","XDRMERG1",23,0)
 . . . S X=$G(@(XVAL_DA_","_NODE_")")) Q:X=""
"RTN","XDRMERG1",24,0)
 . . . F PC=0:0 S PC=$O(^TMP($J,"XGLOB",RVAL,NODE,PC)) Q:PC'>0  D
"RTN","XDRMERG1",25,0)
 . . . . S Y=$P(X,U,PC),XDRFR=Y
"RTN","XDRMERG1",26,0)
 . . . . I Y>0,$D(XDRXFLG),$D(@FROM@(+Y))=1 S @FROM@(+Y,"R",CURRFIL)=$G(@FROM@(+Y,"R",CURRFIL))+1 Q  ; USED TO DETERMINE WHICH ENTRIES AREN'T POINTED TO.
"RTN","XDRMERG1",27,0)
 . . . . I Y>0 S XDRTO=$O(@FROM@(+Y,"")) I XDRTO>0 D
"RTN","XDRMERG1",28,0)
 . . . . . I +Y'=Y D  Q:Y'>0
"RTN","XDRMERG1",29,0)
 . . . . . . I $P(Y,";",2)'=$E(XDRFGLOB,2,99) S Y=0 Q
"RTN","XDRMERG1",30,0)
 . . . . . . S XDRTO=XDRTO_";"_$E(XDRFGLOB,2,99)
"RTN","XDRMERG1",31,0)
 . . . . . I $P(^TMP($J,"XGLOB",RVAL,NODE,PC),U,3)="DINUM" D  Q
"RTN","XDRMERG1",32,0)
 . . . . . . D DINUM^XDRMERG2(XVAL,RVAL,XDRIENS)
"RTN","XDRMERG1",33,0)
 . . . . . I ^TMP($J,"XGLOB",RVAL,NODE,PC)>0 D  Q
"RTN","XDRMERG1",34,0)
 . . . . . . S XDRIEN=DA_","_XDRIENS
"RTN","XDRMERG1",35,0)
 . . . . . . N DA,XDRFILE,XDRFLD,XDR
"RTN","XDRMERG1",36,0)
 . . . . . . S XDRFILE=+^TMP($J,"XGLOB",RVAL,NODE,PC)
"RTN","XDRMERG1",37,0)
 . . . . . . S XDRFLD=+$P(^TMP($J,"XGLOB",RVAL,NODE,PC),U,2)
"RTN","XDRMERG1",38,0)
 . . . . . . S XDR(XDRFILE,XDRIEN,XDRFLD)=XDRTO
"RTN","XDRMERG1",39,0)
 . . . . . . ; S ^XDRM(+XDRFR,"P",XDRFILE,XDRIEN,XDRFLD)=XDRFR ; ORIGINAL VERSION SIMPLY STORE DATA ON POINTER CHANGE
"RTN","XDRMERG1",40,0)
 . . . . . . D SAVEPNTR^XDRMERGB(+XDRFR,+XDRTO,XDRFILE,XDRIEN,XDRFLD,XDRFR) ; REVISED TO STORE POINTER CHANGE IN FM COMPATIBLE STRUCTURE
"RTN","XDRMERG1",41,0)
 . . . . . . D FILE^DIE("","XDR")
"RTN","XDRMERG1",42,0)
 . . . . . S $P(@(XVAL_DA_","_NODE_")"),U,PC)=XDRTO
"RTN","XDRMERG1",43,0)
 . . . . . S XDRFILE=+$P(@(XVAL_"0)"),U,2)
"RTN","XDRMERG1",44,0)
 . . . . . S XDRFLD=$O(@("^DD("_XDRFILE_",""GL"","_NODE_","_PC_",0)"))
"RTN","XDRMERG1",45,0)
 . . . . . S XDRIEN=DA_","_XDRIENS
"RTN","XDRMERG1",46,0)
 . . . . . ; S ^XDRM(+XDRFR,"P",XDRFILE,XDRIEN,XDRFLD)=XDRFR ; ORIGINAL VERSION SIMPLY STORE DATA ON POINTER CHANGE
"RTN","XDRMERG1",47,0)
 . . . . . D SAVEPNTR^XDRMERGB(+XDRFR,+XDRTO,XDRFILE,XDRIEN,XDRFLD,XDRFR)
"RTN","XDRMERG1",48,0)
 . S XV=RVAL
"RTN","XDRMERG1",49,0)
 . F  S XV=$O(^TMP($J,"XGLO",XV)) Q:XV'[RVAL  D
"RTN","XDRMERG1",50,0)
 . . S XN=$P(XV,RVAL,2),XN=DA_","_$P(XN,"DA,",2)
"RTN","XDRMERG1",51,0)
 . . S XXV=XVAL_XN
"RTN","XDRMERG1",52,0)
 . . S XTYPE=$$TYPE(XV)
"RTN","XDRMERG1",53,0)
 . . I XTYPE="DINUM" D DINUM^XDRMERG2(XXV,XV,DA_","_XDRIENS) Q
"RTN","XDRMERG1",54,0)
 . . I XTYPE'="" D XREFS^XDRMERG2(XXV,XV,DA_","_XDRIENS) Q
"RTN","XDRMERG1",55,0)
 . . D CHASE(XXV,XV,DA_","_XDRIENS)
"RTN","XDRMERG1",56,0)
 S SENTRY=0
"RTN","XDRMERG1",57,0)
 Q
"RTN","XDRMERG1",58,0)
 ;
"RTN","XDRMERG1",59,0)
TYPE(GLOB) ;
"RTN","XDRMERG1",60,0)
 N I,J
"RTN","XDRMERG1",61,0)
 S I=$O(^TMP($J,"XGLOB",GLOB,"")) Q:I="" ""
"RTN","XDRMERG1",62,0)
 S J=$O(^TMP($J,"XGLOB",GLOB,I,"")) Q:J="" ""
"RTN","XDRMERG1",63,0)
 Q $P(^TMP($J,"XGLOB",GLOB,I,J),U,3)
"RTN","XDRMERG1",64,0)
 ;
"RTN","XDRMERG2")
0^32^B69650318
"RTN","XDRMERG2",1,0)
XDRMERG2 ;SF-IRMFO.SEA/JLI - TENATIVE UPDATE POINTER NODES ;4/6/98  09:27
"RTN","XDRMERG2",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERG2",3,0)
 ;;
"RTN","XDRMERG2",4,0)
 Q
"RTN","XDRMERG2",5,0)
 ;
"RTN","XDRMERG2",6,0)
 ; XDRXFLG is referenced in a few places, but not defined - it was
"RTN","XDRMERG2",7,0)
 ;    used where it was set at the time the run started to identify
"RTN","XDRMERG2",8,0)
 ;    entries which were referenced in one or more files and to
"RTN","XDRMERG2",9,0)
 ;    remove them from a list of entries which were not referenced
"RTN","XDRMERG2",10,0)
 ;    by any files within the database
"RTN","XDRMERG2",11,0)
 ;
"RTN","XDRMERG2",12,0)
DINUM(XVAL,XR,XDRIENS) ; FIND AND MERGE DINUMMED POINTERS
"RTN","XDRMERG2",13,0)
 N IENOLD,IENNEW,FILEI,FLDJ,XREF,VREF
"RTN","XDRMERG2",14,0)
 ;
"RTN","XDRMERG2",15,0)
 D SETVALS
"RTN","XDRMERG2",16,0)
 F IENOLD=0:0 S IENOLD=$O(@FROM@(IENOLD)) Q:IENOLD'>0  D
"RTN","XDRMERG2",17,0)
 . I '$D(@(XVAL_IENOLD_",0)")) Q
"RTN","XDRMERG2",18,0)
 . I $D(XDRXFLG) S @FROM@(IENOLD,"R",FILEI)=$G(@FROM@(IENOLD,"R",FILEI))+1 Q  ; POINTER WAS FOUND MARK ENTRY FOR FILE
"RTN","XDRMERG2",19,0)
 . S IENNEW=$O(@FROM@(IENOLD,"")) Q:IENNEW'>0
"RTN","XDRMERG2",20,0)
 . ; N I F I=IENOLD,IENNEW M @("^XDRM(I,""M"",FILEI,I)="_XVAL_I_")") ; OLD SAVE IMAGE BY SIMPLY MERGING
"RTN","XDRMERG2",21,0)
 . D SAVEMERG^XDRMERGB(FILEI,IENOLD,IENNEW)
"RTN","XDRMERG2",22,0)
 . I '$D(@(XVAL_IENNEW_",0)")) D
"RTN","XDRMERG2",23,0)
 . . N DD,DO,DIC,X,DINUM,DA
"RTN","XDRMERG2",24,0)
 . . S DIC=XVAL,DIC(0)="L",X=IENNEW,DINUM=IENNEW D FILE^DICN Q:Y'>0
"RTN","XDRMERG2",25,0)
 . D OVRWRI(FILEI,IENOLD,IENNEW)
"RTN","XDRMERG2",26,0)
 . D MERGEIT(XVAL,IENOLD,IENNEW)
"RTN","XDRMERG2",27,0)
 . D TIMSTAMP(2,FILEI,IENOLD)
"RTN","XDRMERG2",28,0)
 Q
"RTN","XDRMERG2",29,0)
MERGEIT(XDRDIC,IENFROM,IENTO) ; MERGE TWO ENTRIES IN FILE
"RTN","XDRMERG2",30,0)
 N NODE,NODE1,NODE2,NODEA,SFILE,XDRFROM,XDRTO,NODEA,VALUE,XVALUE,XDRXX,XDRYY,NODEB,DIK,DA,I,Y,VREF,XNN,XFILNO,IENTOSTR,DFN
"RTN","XDRMERG2",31,0)
 ;
"RTN","XDRMERG2",32,0)
 D MERGEIT^XDRMERGB
"RTN","XDRMERG2",33,0)
 Q
"RTN","XDRMERG2",34,0)
TIMSTAMP(PHASE,FILE,IEN) ;
"RTN","XDRMERG2",35,0)
 S XDRYT=$$NOW^XLFDT()
"RTN","XDRMERG2",36,0)
 I $$FMDIFF^XLFDT(XDRYT,+$G(XDRXT),2)>5 D
"RTN","XDRMERG2",37,0)
 . I $D(XDRFDA) D  I 1
"RTN","XDRMERG2",38,0)
 . . S ^VA(15.2,XDRFDA,3,XDRFDA1,1)=XDRYT_U_PHASE_U_FILE_U_IEN
"RTN","XDRMERG2",39,0)
 . E  D
"RTN","XDRMERG2",40,0)
 . . S ^XTMP("XDRSTAT",XDRGID,"TIME",$J)=XDRYT_U_PHASE_U_FILE_U_IEN
"RTN","XDRMERG2",41,0)
 . S XDRXT=XDRYT
"RTN","XDRMERG2",42,0)
 Q
"RTN","XDRMERG2",43,0)
XREFS(XVAL,XR,XDRIENS) ; FIND POINTERS BASED ON KNOWN X-REFS FOR FILE
"RTN","XDRMERG2",44,0)
 N IENOLD,IENNEW,IENVAL,FILEI,FLDJ,XREF,XDRXX,VREF
"RTN","XDRMERG2",45,0)
 N XDRZZ,XDRAA ; DEBUG STATEMENT
"RTN","XDRMERG2",46,0)
 D SETVALS
"RTN","XDRMERG2",47,0)
 S XDRXX=$NA(^TMP($J,"XDRXX"))
"RTN","XDRMERG2",48,0)
 K @XDRXX
"RTN","XDRMERG2",49,0)
 F IENOLD=0:0 S IENOLD=$O(@FROM@(IENOLD)) Q:IENOLD'>0  D
"RTN","XDRMERG2",50,0)
 . S IENNEW=$O(@FROM@(IENOLD,"")) Q:IENNEW'>0&'$D(XDRXFLG)
"RTN","XDRMERG2",51,0)
 . S IENVAL=0
"RTN","XDRMERG2",52,0)
 . F  S IENVAL=$O(@(XVAL_XREF_","""_IENOLD_VREF_""","_IENVAL_")")) Q:IENVAL'>0  D
"RTN","XDRMERG2",53,0)
 . . I $D(XDRXFLG) S @FROM@(IENOLD,"R",FILEI)=$G(@FROM@(IENOLD,"R",FILEI))+1 Q  ; POINTER WAS FOUND, MARK ENTRY FOR FILE
"RTN","XDRMERG2",54,0)
 . . S @XDRXX@(FILEI,IENVAL_","_XDRIENS,FLDJ)=IENNEW_VREF
"RTN","XDRMERG2",55,0)
 . . ; S ^XDRP(IENOLD,FILEI,FLDJ,(IENVAL_","_XDRIENS))=""
"RTN","XDRMERG2",56,0)
 . . D SAVEPNTR^XDRMERGB(+IENOLD,+IENNEW,FILEI,(IENVAL_","_XDRIENS),FLDJ,(IENOLD_VREF))
"RTN","XDRMERG2",57,0)
 K XDRAA,XDRZZ I $D(XDRTESTK) M XDRAA=@XDRXX ; DEBUG STATEMENT
"RTN","XDRMERG2",58,0)
 I $D(@XDRXX) D FILE^DIE("",XDRXX)
"RTN","XDRMERG2",59,0)
 I $D(XDRZZ),$D(XDRTESTK) S XDRTESTK=XDRTESTK+1 M ^XTMP("XDRTESTK",$$NOW^XLFDT(),XDRTESTK,"XX")=XDRAA,^("ZZ")=XDRZZ K XDRAA,XDRZZ ; DEBUG STATEMENT
"RTN","XDRMERG2",60,0)
 Q
"RTN","XDRMERG2",61,0)
 ;
"RTN","XDRMERG2",62,0)
SETVALS ; IDENTIFY THE LOCATIONS OF POINTERS (NODE, PIECE, AND X-REF I ANY)
"RTN","XDRMERG2",63,0)
 S FILEI=$O(^TMP($J,"XGLOB",XR,"")),FLDJ=$O(^TMP($J,"XGLOB",XR,FILEI,""))
"RTN","XDRMERG2",64,0)
 S FILEI=^TMP($J,"XGLOB",XR,FILEI,FLDJ),FLDJ=+$P(FILEI,U,2)
"RTN","XDRMERG2",65,0)
 S XREF=$P(FILEI,U,3),FILEI=+FILEI
"RTN","XDRMERG2",66,0)
 S VREF="" I $P(^DD(FILEI,FLDJ,0),U,2)["V" S VREF=";"_$E(XDRFGLOB,2,99)
"RTN","XDRMERG2",67,0)
 Q
"RTN","XDRMERG2",68,0)
 ;
"RTN","XDRMERG2",69,0)
DOMAIN(FILE,FROM) ; MERGE ACTUAL ENTRIES IN THE FILE (THE ONES POINTED TO)
"RTN","XDRMERG2",70,0)
 N IENFROM,IENTO,XDRVAL,XDRIENS
"RTN","XDRMERG2",71,0)
 I '$D(XDRTESTK) S XDRTESTK=0 S ^XTMP("XDRTESTK",0)=$$FMADD^XLFDT(DT,30)_U_DT ; DEBUG STATEMENT
"RTN","XDRMERG2",72,0)
 S XFILNO=FILE
"RTN","XDRMERG2",73,0)
 I $D(XDRXFLG) Q
"RTN","XDRMERG2",74,0)
 S XDRIENS=""
"RTN","XDRMERG2",75,0)
 S XDRDIC=$G(^DIC(FILE,0,"GL")) Q:XDRDIC=""
"RTN","XDRMERG2",76,0)
 S IENFROM=0
"RTN","XDRMERG2",77,0)
 F  S IENFROM=$O(@FROM@(IENFROM)) Q:IENFROM'>0  D
"RTN","XDRMERG2",78,0)
 . I '$D(@(XDRDIC_IENFROM_")")) Q
"RTN","XDRMERG2",79,0)
 . S IENTO=$O(@FROM@(IENFROM,"")) Q:IENTO'>0
"RTN","XDRMERG2",80,0)
 . I $D(@(XDRDIC_IENFROM_",-9)"))!$D(@(XDRDIC_IENTO_",-9)")) Q  ; ALREADY MERGED
"RTN","XDRMERG2",81,0)
 . S XDRVAL=$P($G(@(XDRDIC_IENFROM_",0)")),U)
"RTN","XDRMERG2",82,0)
 . S XDRVAL=$P($G(@(XDRDIC_IENFROM_",0)")),U)
"RTN","XDRMERG2",83,0)
 . I $E(XDRVAL,1,12)="MERGING INTO" D
"RTN","XDRMERG2",84,0)
 . . N X S X=XDRVAL
"RTN","XDRMERG2",85,0)
 . . F  Q:X'["MERGING INTO"  S X=$P(X,"(",2,99),X=$E(X,1,$L(X)-1)
"RTN","XDRMERG2",86,0)
 . . S $P(@(XDRDIC_IENFROM_",0)"),U)=X
"RTN","XDRMERG2",87,0)
 . . S XDRVAL=X
"RTN","XDRMERG2",88,0)
 . D GETSSN ; GET SSN FOR SELECTED MAIN FILES
"RTN","XDRMERG2",89,0)
 . S IENTO=$O(@FROM@(IENFROM,"")) Q:IENTO'>0  S DFN=IENTO D
"RTN","XDRMERG2",90,0)
 . . ; N I F I=IENFROM,IENTO M @("^XDRM(I,""M"",FILE,I)="_XDRDIC_I_")") ; ORIGINAL VERSION SAVE IMAGE BY SIMPLY MERGING
"RTN","XDRMERG2",91,0)
 . . D SAVEMERG^XDRMERGB(FILE,IENFROM,IENTO) ; SAVE IMAGE IN FM COMPATIBLE STRUCTURE
"RTN","XDRMERG2",92,0)
 . . N XDRVAL
"RTN","XDRMERG2",93,0)
 . . D OVRWRI(XFILNO,IENFROM,IENTO) ;       LOOK FOR DATA TO BE OVERWRITTEN
"RTN","XDRMERG2",94,0)
 . . D MERGEIT(XDRDIC,IENFROM,IENTO)
"RTN","XDRMERG2",95,0)
 . S @(XDRDIC_IENFROM_",0)")=XDRVAL
"RTN","XDRMERG2",96,0)
 . S @(XDRDIC_IENFROM_",-9)")=IENTO
"RTN","XDRMERG2",97,0)
 . D SETALIAS ; SET UP ALIAS ENTRY IN SELECTED FILES
"RTN","XDRMERG2",98,0)
 . N VALUE,XDRXX,XDRYY
"RTN","XDRMERG2",99,0)
 . S VALUE=$$FIND1^DIC(15.3,",","Q",FILE)
"RTN","XDRMERG2",100,0)
 . I VALUE'>0 D
"RTN","XDRMERG2",101,0)
 . . S XDRXX(15.3,"+1,",.01)=FILE
"RTN","XDRMERG2",102,0)
 . . K XDRYY S XDRYY(1)=FILE
"RTN","XDRMERG2",103,0)
 . . D UPDATE^DIE("","XDRXX","XDRYY")
"RTN","XDRMERG2",104,0)
 . K XDRXX,XDRYY
"RTN","XDRMERG2",105,0)
 . S XDRXX(15.31,"+1,"_FILE_",",.01)=IENFROM
"RTN","XDRMERG2",106,0)
 . S XDRXX(15.31,"+1,"_FILE_",",.02)=IENTO
"RTN","XDRMERG2",107,0)
 . D UPDATE^DIE("","XDRXX","XDRYY","XDRMM")
"RTN","XDRMERG2",108,0)
 . D TIMSTAMP(1,FILE,IENFROM)
"RTN","XDRMERG2",109,0)
 Q
"RTN","XDRMERG2",110,0)
 ;
"RTN","XDRMERG2",111,0)
CHKFROM(FROM,FILE) ;
"RTN","XDRMERG2",112,0)
 D CHKFROM^XDRMERGA(FROM,FILE)
"RTN","XDRMERG2",113,0)
 Q
"RTN","XDRMERG2",114,0)
 ;
"RTN","XDRMERG2",115,0)
GETSSN ; For files 2 and 200, get SSN value for XDRFROM entry
"RTN","XDRMERG2",116,0)
 I FILE=2 S XDRVAL("SSN")=$P(^DPT(IENFROM,0),U,9) Q
"RTN","XDRMERG2",117,0)
 I FILE=200 S XDRVAL("SSN")=$P(^VA(200,IENFROM,1),U,9) Q
"RTN","XDRMERG2",118,0)
 Q
"RTN","XDRMERG2",119,0)
 ;
"RTN","XDRMERG2",120,0)
OVRWRI(FILE,IENFR,IENTO) ;
"RTN","XDRMERG2",121,0)
 N XNI,XDRARR,XDRARR1,IENSF,I,XNN,IENA,IENB ;      THIS WOULD BE ONLY TOP LEVEL
"RTN","XDRMERG2",122,0)
 ;
"RTN","XDRMERG2",123,0)
 S IENA=$O(@FROM@(IENFR,IENTO,"")) Q:IENA=""
"RTN","XDRMERG2",124,0)
 S IENB=$O(@FROM@(IENFR,IENTO,IENA,"")) Q:IENB=""
"RTN","XDRMERG2",125,0)
 S XNN=@FROM@(IENFR,IENTO,IENA,IENB) Q:XNN'>0
"RTN","XDRMERG2",126,0)
 S XNI="",IENSF=IENFR_","
"RTN","XDRMERG2",127,0)
 F I=0:0 S I=$O(^VA(15,XNN,3,FILE,1,I)) Q:I'>0  S XNI=XNI_^(I,0)_";"
"RTN","XDRMERG2",128,0)
 I XNI'="" D
"RTN","XDRMERG2",129,0)
 . D GETS^DIQ(FILE,IENSF,XNI,"I","XDRARR")
"RTN","XDRMERG2",130,0)
 . F I=0:0 S I=$O(XDRARR(FILE,IENSF,I)) Q:I'>0  D
"RTN","XDRMERG2",131,0)
 . . S XDRARR1(FILE,(IENTO_","),I)=XDRARR(FILE,IENSF,I,"I")
"RTN","XDRMERG2",132,0)
 . I FILE=2!(FILE=200),$D(XDRARR1(FILE,(IENTO_","),$S(FILE=2:.09,1:9))) D
"RTN","XDRMERG2",133,0)
 . . N IENST,XDRARR2 S IENST=IENTO_","
"RTN","XDRMERG2",134,0)
 . . D GETS^DIQ(FILE,IENST,$S(FILE=2:.09,1:9),"I","XDRARR2")
"RTN","XDRMERG2",135,0)
 . . I $D(XDRARR2(FILE,IENST,$S(FILE=2:.09,1:9),"I")) D
"RTN","XDRMERG2",136,0)
 . . . S XDRARR1(FILE,IENSF,$S(FILE=2:.09,1:9))=XDRARR2(FILE,IENST,$S(FILE=2:.09,1:9),"I")
"RTN","XDRMERG2",137,0)
 . . . Q
"RTN","XDRMERG2",138,0)
 . . Q
"RTN","XDRMERG2",139,0)
 . D FILE^DIE("","XDRARR1")
"RTN","XDRMERG2",140,0)
 Q
"RTN","XDRMERG2",141,0)
SETALIAS ; For selected files place data into alias field of TO entry
"RTN","XDRMERG2",142,0)
 N XDRARR
"RTN","XDRMERG2",143,0)
 I FILE=2 D
"RTN","XDRMERG2",144,0)
 . S XDRARR(2.01,"+1,"_IENTO_",",.01)=XDRVAL
"RTN","XDRMERG2",145,0)
 . S XDRARR(2.01,"+1,"_IENTO_",",1)=XDRVAL("SSN")
"RTN","XDRMERG2",146,0)
 . D UPDATE^DIE("","XDRARR")
"RTN","XDRMERG2",147,0)
 I FILE=200 D
"RTN","XDRMERG2",148,0)
 . S XDRARR(200.04,"+1,"_IENTO_",",.01)=XDRVAL
"RTN","XDRMERG2",149,0)
 . D FILE^DIE("","XDRARR")
"RTN","XDRMERG2",150,0)
 Q
"RTN","XDRMERG2",151,0)
 ;
"RTN","XDRMERG2",152,0)
CHKLOCAL ; CHECK STATUS FOR LOCAL MERGE PROCESSES (EVEN IF SOME DATA EXISTS IN MERGE PROCESS FILE)
"RTN","XDRMERG2",153,0)
 N XJOB,X,N,XNAME,XSTAT,XDRFIL,DIRUT,CHKLOCAL
"RTN","XDRMERG2",154,0)
 S CHKLOCAL=1,XDRFIL="^XTMP(""XDRSTAT"","
"RTN","XDRMERG2",155,0)
 G CHK1
"RTN","XDRMERG2",156,0)
 ;
"RTN","XDRMERG2",157,0)
CHECK ;
"RTN","XDRMERG2",158,0)
 N XJOB,X,N,XNAME,XSTAT,XDRFIL,DIRUT
"RTN","XDRMERG2",159,0)
CHK1 ;
"RTN","XDRMERG2",160,0)
 I '$D(CHKLOCAL) S XDRFIL=$S($O(^VA(15.2,0))>0:"^VA(15.2,",1:"^XTMP(""XDRSTAT"",")
"RTN","XDRMERG2",161,0)
 S N=0
"RTN","XDRMERG2",162,0)
 W @IOF
"RTN","XDRMERG2",163,0)
 S XJOB=0 F  S XJOB=$O(@(XDRFIL_""""_XJOB_""")")) Q:XJOB'>0  D
"RTN","XDRMERG2",164,0)
 . I XDRFIL["VA(15.2",$P(^VA(15.2,XJOB,0),U,4)="S" Q
"RTN","XDRMERG2",165,0)
 . S XDRFIL1=$S(XDRFIL["VA":$NA(@(XDRFIL_XJOB_")")),1:$NA(^XTMP("XDRSTAT",XJOB)))
"RTN","XDRMERG2",166,0)
 . S N=$S($D(XSTAT(N)):N+1,1:N) S XNAME(N)="",XJOB(N)="",N=N+1
"RTN","XDRMERG2",167,0)
 . D ONESET(XDRFIL1,0)
"RTN","XDRMERG2",168,0)
 . I XDRFIL["VA" D
"RTN","XDRMERG2",169,0)
 . . F J=0:0 S J=$O(@XDRFIL1@(3,J)) Q:J'>0  D
"RTN","XDRMERG2",170,0)
 . . . S XDRFIL2=$NA(@XDRFIL1@(3,J))
"RTN","XDRMERG2",171,0)
 . . . D ONESET(XDRFIL2,1)
"RTN","XDRMERG2",172,0)
 D HEADER
"RTN","XDRMERG2",173,0)
 F N=0:0 S N=$O(XJOB(N)) Q:N'>0  D  Q:$D(DIRUT)
"RTN","XDRMERG2",174,0)
 .I (IOSL-$Y)<6 D:IOST["C-"  Q:$D(DIRUT)  W @IOF,! D HEADER ;REM -9/25/96 page breaks
"RTN","XDRMERG2",175,0)
 ..W ! S DIR(0)="E" D ^DIR K DIR
"RTN","XDRMERG2",176,0)
 . S:XNAME(N)["THREAD" XNAME(N)="  "_XNAME(N)
"RTN","XDRMERG2",177,0)
 . W !,XNAME(N) Q:XNAME(N)=""  I $L(XNAME(N))>18 W !
"RTN","XDRMERG2",178,0)
 . S X=START(N) D DATE8 W ?20,X,"  ",XSTAT(N)
"RTN","XDRMERG2",179,0)
 . S X=$P(XJOB(N),U) I X'="" D DATE8 W ?36,X
"RTN","XDRMERG2",180,0)
 . I X="" D
"RTN","XDRMERG2",181,0)
 . . S X=$P(XJOB(N),U,2) D DATE8 W ?36,X
"RTN","XDRMERG2",182,0)
 . . W ?50,$P(XJOB(N),U,3),?55,$P(XJOB(N),U,4),?64," ",$P(XJOB(N),U,5)
"RTN","XDRMERG2",183,0)
 . . I XSTAT(N)="E" S N=N+1 W !?5,"ERROR: ",$E(XSTAT(N),1,230)
"RTN","XDRMERG2",184,0)
 Q
"RTN","XDRMERG2",185,0)
 ;
"RTN","XDRMERG2",186,0)
HEADER ;REM -9/25/96 Write header.
"RTN","XDRMERG2",187,0)
 W !,?55,"Current",?65,"Current"
"RTN","XDRMERG2",188,0)
 W !,"Merge Set             Start    Stat   Last Chk  Phase  File      Entry",!
"RTN","XDRMERG2",189,0)
 Q
"RTN","XDRMERG2",190,0)
 ;
"RTN","XDRMERG2",191,0)
DATE8 ;
"RTN","XDRMERG2",192,0)
 N X1
"RTN","XDRMERG2",193,0)
 I X="" S X="           " Q
"RTN","XDRMERG2",194,0)
 S X1=X
"RTN","XDRMERG2",195,0)
 S X=$E(X1,4,5)_"/"_$E(X1,6,7)_" "
"RTN","XDRMERG2",196,0)
 S X1=$P(X1,".",2)_"000000"
"RTN","XDRMERG2",197,0)
 S X=X_$E(X1,1,2)_":"_$E(X1,3,4)
"RTN","XDRMERG2",198,0)
 Q
"RTN","XDRMERG2",199,0)
 ;
"RTN","XDRMERG2",200,0)
ONESET(FILE,SPECIAL) ;
"RTN","XDRMERG2",201,0)
 N JOBNUM,JVAL
"RTN","XDRMERG2",202,0)
 I FILE'["VA" S JVAL=0 F JOBNUM=0:0 S JOBNUM=$O(@FILE@("START",JOBNUM)) Q:JOBNUM'>0  S JVAL=JVAL+1 D LOOP
"RTN","XDRMERG2",203,0)
 I FILE'["VA" Q
"RTN","XDRMERG2",204,0)
LOOP S N=N+1 I $D(XSTAT(N)) G LOOP
"RTN","XDRMERG2",205,0)
 I 'SPECIAL S START(N)=$S(FILE'["VA":@FILE@("START",JOBNUM),$P(@FILE@(0),U,5)>0:$P(^(0),U,5),1:$P(^(0),U,3)) I 1
"RTN","XDRMERG2",206,0)
 I SPECIAL S START(N)=$S($P(@FILE@(0),U,4)>0:$P(^(0),U,4),1:$P(^(0),U,2))
"RTN","XDRMERG2",207,0)
 S XNAME(N)=$S(XDRFIL'["VA":XJOB_" J"_JVAL_"  ",'SPECIAL:$P(@FILE@(0),U),1:"  "_$E($P(@FILE@(0),U),1,15))
"RTN","XDRMERG2",208,0)
 I XDRFIL["VA" S XSTAT(N)=$S('SPECIAL:$P(@FILE@(0),U,4),1:$P(@FILE@(0),U,3))
"RTN","XDRMERG2",209,0)
 E  S XSTAT(N)=$S($D(@FILE@("DONE",JOBNUM)):"C",1:"A")
"RTN","XDRMERG2",210,0)
 I XSTAT(N)="E" S XSTAT(N+1)=$G(@FILE@(2))
"RTN","XDRMERG2",211,0)
 S XJOB(N)=$S(XDRFIL'["VA":$G(@FILE@("DONE",JOBNUM)),'SPECIAL:$P(@FILE@(0),U,6),1:$P(@FILE@(0),U,5))
"RTN","XDRMERG2",212,0)
 I XJOB(N)="" D
"RTN","XDRMERG2",213,0)
 . S XJOB(N)=XJOB(N)_U_$S(XDRFIL'["VA":$G(@FILE@("TIME",JOBNUM)),1:$G(@FILE@(1)))
"RTN","XDRMERG2",214,0)
 . I XDRFIL'["VA"!SPECIAL,XSTAT(N)="A",$$FMDIFF^XLFDT($$NOW^XLFDT(),$P(XJOB(N),U,2),2)>1800 D
"RTN","XDRMERG2",215,0)
 . . S XSTAT(N)="U"
"RTN","XDRMERG2",216,0)
 . . I XDRFIL["VA" D
"RTN","XDRMERG2",217,0)
 . . . S $P(@FILE@(0),U,3)="U"
"RTN","XDRMERG2",218,0)
 . I XSTAT(N)="U",XDRFIL["VA",SPECIAL,$$FMDIFF^XLFDT($$NOW^XLFDT(),$P(XJOB(N),U,2),2)'>1800 S XSTAT(N)="A",$P(@FILE@(0),U,3)="A"
"RTN","XDRMERG2",219,0)
 Q
"RTN","XDRMERGA")
0^33^B72382993
"RTN","XDRMERGA",1,0)
XDRMERGA ;SF-IRMFO.SEA/JLI - START OF NON-INTERACTIVE BATCH MERGE ;5/22/98  16:09
"RTN","XDRMERGA",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERGA",3,0)
 ;;
"RTN","XDRMERGA",4,0)
 Q
"RTN","XDRMERGA",5,0)
APPROVE ; This is the entry point for approving a duplicate pair for merge
"RTN","XDRMERGA",6,0)
 K DIRUT,DUOUT,DTOUT ;
"RTN","XDRMERGA",7,0)
 D EN^XDRVCHEK ; update verified and/or ready to merge statuses if necessary
"RTN","XDRMERGA",8,0)
 ;
"RTN","XDRMERGA",9,0)
 N XDRXX,XDRYY,XDRMA,DIE,DIC,DIR,DR,ZTDTH,ZTSK
"RTN","XDRMERGA",10,0)
 N XDRX,XDRY,XDRFIL,XDRGLOB,X,Y,XDRNAME
"RTN","XDRMERGA",11,0)
 N XDRFDA,XDRIENS,XDRI,XDRJ,XDRK,DA,DIK
"RTN","XDRMERGA",12,0)
 ;
"RTN","XDRMERGA",13,0)
 S XDRFIL=$$FILE^XDRDPICK() Q:XDRFIL'>0
"RTN","XDRMERGA",14,0)
 S XDRDIC=^DIC(XDRFIL,0,"GL")
"RTN","XDRMERGA",15,0)
 S XDRGLOB=$E(XDRDIC,2,999)
"RTN","XDRMERGA",16,0)
 S X=""
"RTN","XDRMERGA",17,0)
 S XNCNT=0,XNCNT0=0
"RTN","XDRMERGA",18,0)
 F  S X=$O(^VA(15,"AVDUP",XDRGLOB,X)) Q:X=""  S Y=$O(^(X,0)) D
"RTN","XDRMERGA",19,0)
 . N YVAL S YVAL=^VA(15,Y,0)
"RTN","XDRMERGA",20,0)
 . I $P(YVAL,U,20)>0 Q  ; ALREADY DONE OR SCHEDULED
"RTN","XDRMERGA",21,0)
 . I $P(YVAL,U,3)'="V" Q  ; TAKE ONLY VERIFIED
"RTN","XDRMERGA",22,0)
 . I $P(YVAL,U,5)'=1 Q  ; TAKE ONLY IF MARKED READY TO MERGE
"RTN","XDRMERGA",23,0)
 . I $P(YVAL,U,4)="" D  Q  ; MAKE SURE MERGE DIRECTION IS DEFINED
"RTN","XDRMERGA",24,0)
 . . W !,"Entry `",Y," DOES NOT HAVE MERGE DIRECTION DEFINED - CAN'T APPROVE"
"RTN","XDRMERGA",25,0)
 . . N XDRDICA S XDRDICA=U_$P($P(YVAL,U),";",2)
"RTN","XDRMERGA",26,0)
 . . I '$D(@(XDRDICA_(+YVAL)_",0)"))!$D(@(XDRDICA_(+YVAL)_",-9)"))!'$D(@(XDRDICA_(+$P(YVAL,U,2))_",0)"))!$D(@(XDRDICA_(+$P(YVAL,U,2))_",-9)")) D  Q
"RTN","XDRMERGA",27,0)
 . . . D RESET^XDRDPICK(Y)
"RTN","XDRMERGA",28,0)
 . I $P(YVAL,U,13)'>0 D
"RTN","XDRMERGA",29,0)
 . . I $P(YVAL,U,4)'=2 S XDRY(+YVAL,+$P(YVAL,U,2))=Y
"RTN","XDRMERGA",30,0)
 . . E  S XDRY(+$P(YVAL,U,2),+YVAL)=Y
"RTN","XDRMERGA",31,0)
 . . S XNCNT0=XNCNT0+1
"RTN","XDRMERGA",32,0)
 I XNCNT0>0 W !!,XNCNT0,"  Entries are awaiting approval for merging  Return to continue..." R X:DTIME
"RTN","XDRMERGA",33,0)
 I $D(XDRY) D CHKBKUP I $D(DUOUT)!$D(DTOUT) Q
"RTN","XDRMERGA",34,0)
 K XDRY
"RTN","XDRMERGA",35,0)
 Q
"RTN","XDRMERGA",36,0)
 ;
"RTN","XDRMERGA",37,0)
STOP ;
"RTN","XDRMERGA",38,0)
 N XDRI,DIE,DA,DR,DIR,XDRC
"RTN","XDRMERGA",39,0)
 S XDRC=0 F XDRI=0:0 S XDRI=$O(^VA(15.2,XDRI)) Q:XDRI'>0  I $P(^(XDRI,0),U,4)="A" D
"RTN","XDRMERGA",40,0)
 . S XDRC=XDRC+1
"RTN","XDRMERGA",41,0)
 . S DIR(0)="Y",DIR("A")="Do you want to stop "_$P(^VA(15.2,XDRI,0),U)
"RTN","XDRMERGA",42,0)
 . D ^DIR K DIR I Y'>0 Q
"RTN","XDRMERGA",43,0)
 . S DIE="^VA(15.2,",DA=XDRI,DR=".09///1" D ^DIE
"RTN","XDRMERGA",44,0)
 . K DIE,DR
"RTN","XDRMERGA",45,0)
 I XDRC'>0 W !!,$C(7),"No active merge processes were found.",!!
"RTN","XDRMERGA",46,0)
 Q
"RTN","XDRMERGA",47,0)
 ;
"RTN","XDRMERGA",48,0)
CHKBKUP ; Check if backups have been generated for outstanding pairs
"RTN","XDRMERGA",49,0)
 N I,J,X,Y,X1,X2,XNCNT,I,J,K,L,M,N,XX
"RTN","XDRMERGA",50,0)
 K DIR
"RTN","XDRMERGA",51,0)
 ;S DIR("A")="Do you want to check pairs awaiting backups (Y/N)"
"RTN","XDRMERGA",52,0)
 ;S DIR("?")="Indication that a backup of the data for the entries for a duplicate pair is required prior to merging the entries.  You may review entries to see if any should be marked as completed."
"RTN","XDRMERGA",53,0)
 ;S DIR(0)="Y" D ^DIR K DIR Q:Y'>0
"RTN","XDRMERGA",54,0)
 S ASKNAME="ASK1" D CHECK
"RTN","XDRMERGA",55,0)
 Q
"RTN","XDRMERGA",56,0)
 ;
"RTN","XDRMERGA",57,0)
CHECK ;
"RTN","XDRMERGA",58,0)
 W @IOF
"RTN","XDRMERGA",59,0)
 S XNCNT=0
"RTN","XDRMERGA",60,0)
 F I=0:0 S I=$O(XDRY(I)) Q:I'>0  D  Q:$D(DUOUT)!$D(DTOUT)
"RTN","XDRMERGA",61,0)
 . F J=0:0 S J=$O(XDRY(I,J)) Q:J'>0  D  Q:$D(DUOUT)!$D(DTOUT)
"RTN","XDRMERGA",62,0)
 . . S X01=$G(@(XDRDIC_I_",0)")),X1=$P(X01,U),X1S=$P(X01,U,9),X1S=$E(X1S,1,3)_"-"_$E(X1S,4,5)_"-"_$E(X1S,6,15)
"RTN","XDRMERGA",63,0)
 . . S X02=$G(@(XDRDIC_J_",0)")),X2=$P(X02,U),X2S=$P(X02,U,9),X2S=$E(X2S,1,3)_"-"_$E(X2S,4,5)_"-"_$E(X2S,6,15)
"RTN","XDRMERGA",64,0)
 . . I X1=""!(X2="") K XDRY(I,J) Q
"RTN","XDRMERGA",65,0)
 . . F  Q:X1'["MERGING INTO"  S X1=$P($P(X1,"(",2,10),")",1,$L(X1,")")-1)
"RTN","XDRMERGA",66,0)
 . . S XNCNT=XNCNT+1,XX(XNCNT)=I_U_J
"RTN","XDRMERGA",67,0)
 . . W !!,$J(XNCNT,3),"  ",?8,X1,?42,X1S,?60,"[",I,"]"
"RTN","XDRMERGA",68,0)
 . . W !,?8,X2,?42,X2S,?60,"[",J,"]"
"RTN","XDRMERGA",69,0)
 . . I '(XNCNT#6) D @ASKNAME Q:$D(DUOUT)!$D(DTOUT)  W @IOF
"RTN","XDRMERGA",70,0)
 I '($D(DUOUT)!$D(DTOUT)) D @ASKNAME
"RTN","XDRMERGA",71,0)
 Q
"RTN","XDRMERGA",72,0)
 ;
"RTN","XDRMERGA",73,0)
ASK1 ;
"RTN","XDRMERGA",74,0)
 W ! S DIR(0)="LO^1:"_XNCNT,DIR("A")="Select entries to approve them for merging"
"RTN","XDRMERGA",75,0)
 ;W !,"TEST"
"RTN","XDRMERGA",76,0)
 D ^DIR K DIR K DIRUT Q:$D(DUOUT)!$D(DTOUT)
"RTN","XDRMERGA",77,0)
 S K="" F  S K=$O(Y(K)) Q:K=""  S Y=Y(K) K Y(K) D
"RTN","XDRMERGA",78,0)
 . F M=1:1 S N=$P(Y,",",M) Q:N=""  D
"RTN","XDRMERGA",79,0)
 . . S N1=+XX(N),N2=$P(XX(N),U,2)
"RTN","XDRMERGA",80,0)
 . . S (DA,XDRX(N1,N2))=XDRY(N1,N2)
"RTN","XDRMERGA",81,0)
 . . N I,J,K,M,N,N1,N2,X1,X2,X,DIE,DR,Y
"RTN","XDRMERGA",82,0)
 . . S DIE="^VA(15,"
"RTN","XDRMERGA",83,0)
 . . S X=DT,X=$$FMTE^XLFDT(X,"2D")
"RTN","XDRMERGA",84,0)
 . . S X=XQUSER_" (DUZ="_DUZ_") "_X
"RTN","XDRMERGA",85,0)
 . . S DR=".13///1;.14///"_X
"RTN","XDRMERGA",86,0)
 . . D ^DIE
"RTN","XDRMERGA",87,0)
 Q
"RTN","XDRMERGA",88,0)
 ;
"RTN","XDRMERGA",89,0)
RESTART ;  Entry point to restart non-completed merges
"RTN","XDRMERGA",90,0)
 N NC,N S NC=0
"RTN","XDRMERGA",91,0)
 F XDRFDA=0:0 S XDRFDA=$O(^VA(15.2,XDRFDA)) Q:XDRFDA'>0  D
"RTN","XDRMERGA",92,0)
 . S X=$P(^VA(15.2,XDRFDA,0),U,4) I X="C"!(X="A") S N=1 D  Q:N=1
"RTN","XDRMERGA",93,0)
 . . F J=0:0 S J=$O(^VA(15.2,XDRFDA,3,J)) Q:J'>0  I "CA"'[$P(^(J,0),U,3) S N=0 Q
"RTN","XDRMERGA",94,0)
 . S NC=NC+1
"RTN","XDRMERGA",95,0)
 . S DIR(0)="Y",DIR("A")="Do you want to RESTART merge process "_$P(^VA(15.2,XDRFDA,0),U),DIR("B")="NO"
"RTN","XDRMERGA",96,0)
 . D ^DIR K DIR Q:Y'>0
"RTN","XDRMERGA",97,0)
 . S ZTRTN="DQ^XDRMERG0",ZTSAVE("XDRFDA")="",ZTIO=""
"RTN","XDRMERGA",98,0)
 . D ^%ZTLOAD I '$D(ZTSK) W !!,$C(7),"RESTART **NOT** QUEUED" Q
"RTN","XDRMERGA",99,0)
 . S $P(^VA(15.2,XDRFDA,0),U,8,9)=ZTSK_U ; SET TASK NUMBER AND REMOVE HALT FLAG IF SET
"RTN","XDRMERGA",100,0)
 . W !,"Restart queued as task ",ZTSK,!
"RTN","XDRMERGA",101,0)
 I NC'>0 W !!,$C(7),"No merge processes found that needed restarting.",!!
"RTN","XDRMERGA",102,0)
 Q
"RTN","XDRMERGA",103,0)
 ;
"RTN","XDRMERGA",104,0)
 ;
"RTN","XDRMERGA",105,0)
DOSUBS(XDRFROM,XDRTO,IENTOSTR,XDRDASEQ) ;
"RTN","XDRMERGA",106,0)
 N NODEA,SFILE,VALUE,XVALUE,XDRXX,XDRYY,YVALUE,XENTOSTR
"RTN","XDRMERGA",107,0)
 N XDRAA,XDRZZ ; DEBUG STATEMENT
"RTN","XDRMERGA",108,0)
 S SFILE=+$P($G(@(XDRFROM_"0)")),U,2)
"RTN","XDRMERGA",109,0)
 I SFILE'>0 Q  ; NO FILE NUMBER, NOT FILE MANAGER COMPATIBLE
"RTN","XDRMERGA",110,0)
 I $P($G(^DD(SFILE,.01,0)),U,2)["W" D  Q  ; HANDLE WORD PROCESSING FIELDS
"RTN","XDRMERGA",111,0)
 . N XF,XT S XT=$E(XDRTO,1,$L(XDRTO)-1)_")"
"RTN","XDRMERGA",112,0)
 . I '$D(@XT) D
"RTN","XDRMERGA",113,0)
 . . S XF=$E(XDRFROM,1,$L(XDRFROM)-1)_")"
"RTN","XDRMERGA",114,0)
 . . M @XT=@XF
"RTN","XDRMERGA",115,0)
 . . Q
"RTN","XDRMERGA",116,0)
 . Q
"RTN","XDRMERGA",117,0)
 F NODEA=0:0 S NODEA=$O(@(XDRFROM_NODEA_")")) Q:NODEA'>0  D
"RTN","XDRMERGA",118,0)
 . S VALUE=$P($G(@(XDRFROM_NODEA_",0)")),U) D  ; GET .01 VALUE
"RTN","XDRMERGA",119,0)
 . N XDRDT S XDRDT=^DD(SFILE,.01,0)
"RTN","XDRMERGA",120,0)
 . I $P(XDRDT,U,2)["D" S XDRDT=$P(XDRDT,U,5,999),XDRDINUM=$S(XDRDT["DINUM":1,1:0) I XDRDINUM S XDRDT=0 D DINUMDAT Q:XDRDT  ; HANDLE DINUMED DATES BY SIMPLY MOVING THEM
"RTN","XDRMERGA",121,0)
 . S YVALUE=0,XVALUE=0 I $D(^DD(SFILE,.001,0)) S YVALUE=NODEA I $D(@(XDRTO_NODEA_")")) S XVALUE=YVALUE
"RTN","XDRMERGA",122,0)
 . I XVALUE=0,$P(^DD(SFILE,.01,0),U,5,99)["DINUM",$D(@(XDRTO_NODEA_")")) S XVALUE=NODEA
"RTN","XDRMERGA",123,0)
 . I XVALUE=0 S XVALUE=+$$FIND1^DIC(SFILE,(","_IENTOSTR),"Q",VALUE) ; FIND CURRENT ENTRY NUMBER, IF PRESENT
"RTN","XDRMERGA",124,0)
 . I XVALUE>0 D  Q  ; SUBFILE EXISTS IN IENTO, CHECK FOR LOWER SUBFILES
"RTN","XDRMERGA",125,0)
 . . N X,X1,NODE,NEWFROM,NEWTO,NEWTOIEN
"RTN","XDRMERGA",126,0)
 . . S NODE=""
"RTN","XDRMERGA",127,0)
 . . F  S NODE=$O(@(XDRFROM_NODEA_","""_NODE_""")")) Q:NODE=""  D
"RTN","XDRMERGA",128,0)
 . . . I $D(@(XDRFROM_NODEA_","""_NODE_""")"))'>1 Q
"RTN","XDRMERGA",129,0)
 . . . S NEWFROM=XDRFROM_NODEA_","""_NODE_""","
"RTN","XDRMERGA",130,0)
 . . . S NEWTO=XDRTO_XVALUE_","""_NODE_""","
"RTN","XDRMERGA",131,0)
 . . . S NEWTOIEN=XVALUE_","_IENTOSTR
"RTN","XDRMERGA",132,0)
 . . . D DOSUBS(NEWFROM,NEWTO,NEWTOIEN,(XVALUE_U_XDRDASEQ))
"RTN","XDRMERGA",133,0)
 . K XDRYY I YVALUE>0 S XDRYY(1)=YVALUE
"RTN","XDRMERGA",134,0)
 . S XENTOSTR="+1,"_IENTOSTR
"RTN","XDRMERGA",135,0)
 . S XDRFILTY=$P($G(^DD(SFILE,.01,0)),U,2)
"RTN","XDRMERGA",136,0)
 . I XDRFILTY["P" S VALUE="`"_VALUE
"RTN","XDRMERGA",137,0)
 . I XDRFILTY["V" D
"RTN","XDRMERGA",138,0)
 . . N Y S Y=$P(VALUE,";",2) Q:Y=""
"RTN","XDRMERGA",139,0)
 . . S Y=$P($G(@("^"_Y_"0)")),U) Q:Y=""
"RTN","XDRMERGA",140,0)
 . . S VALUE=Y_".`"_(+VALUE)
"RTN","XDRMERGA",141,0)
 . . Q
"RTN","XDRMERGA",142,0)
 . I XDRFILTY'["P"&(XDRFILTY'["V"),XDRFILTY'["D" S VALUE=$$GETEXT(XDRFROM,NODEA,SFILE)
"RTN","XDRMERGA",143,0)
 . S XDRXX(SFILE,XENTOSTR,.01)=VALUE
"RTN","XDRMERGA",144,0)
 . I $O(^DD(SFILE,0,"ID",0))>0  D
"RTN","XDRMERGA",145,0)
 . . ;CODE FOR ADDING IDENTIFIERS
"RTN","XDRMERGA",146,0)
 . . N I,N,XDRFROM1,IENFR
"RTN","XDRMERGA",147,0)
 . . S N=0,I=SFILE F  S I=$G(^DD(I,0,"UP")) Q:I'>0  S N=N+1
"RTN","XDRMERGA",148,0)
 . . S XDRFROM1=$P(XDRFROM,"(",2,99),IENFR=NODEA_","
"RTN","XDRMERGA",149,0)
 . . F I=$L(XDRFROM1,",")-2:-2 Q:N'>0  S IENFR=IENFR_$P(XDRFROM1,",",I)_",",N=N-1
"RTN","XDRMERGA",150,0)
 . . ;
"RTN","XDRMERGA",151,0)
 . . F XDRID=0:0 S XDRID=$O(^DD(SFILE,0,"ID",XDRID)) Q:XDRID'>0  D
"RTN","XDRMERGA",152,0)
 . . . S N=$$GET1^DIQ(SFILE,IENFR,XDRID)
"RTN","XDRMERGA",153,0)
 . . . I N'="" S XDRXX(SFILE,XENTOSTR,XDRID)=N
"RTN","XDRMERGA",154,0)
 . . . Q
"RTN","XDRMERGA",155,0)
 . . Q
"RTN","XDRMERGA",156,0)
 . ;
"RTN","XDRMERGA",157,0)
 . K XDRAA,XDRZZ I $D(XDRTESTK) M XDRAA=XDRXX ; DEBUG STATEMENT
"RTN","XDRMERGA",158,0)
 . ; DATES THAT ARE DINUMED HAVE BEEN HANDLED ABOVE, SO CAN PASS A DATE IN AS AN INTERNAL VALUE
"RTN","XDRMERGA",159,0)
 . D UPDATE^DIE($S(XDRFILTY["D":"",1:"E"),"XDRXX","XDRYY","XDRZZ") ; CREATE A NEW ENTRY IN IENTO FOR VALUE
"RTN","XDRMERGA",160,0)
 . I $D(XDRZZ),$D(XDRTESTK),SFILE'=2.0361 S XDRTESTK=XDRTESTK+1 M ^XTMP("XDRTESTK",$$NOW^XLFDT(),XDRTESTK,"XX")=XDRAA,^("ZZ")=XDRZZ ; DEBUG STATEMENT
"RTN","XDRMERGA",161,0)
 . S NODEB=$G(XDRYY(1)) I NODEB'>0 Q
"RTN","XDRMERGA",162,0)
 . M @(XDRTO_NODEB_")")=@(XDRFROM_NODEA_")")
"RTN","XDRMERGA",163,0)
 . S DIK=XDRTO,DA=NODEB D  D IX^DIK
"RTN","XDRMERGA",164,0)
 . . F I=1:1 S DA(I)=$P(XDRDASEQ,U,I) I DA(I)="" K DA(I) Q
"RTN","XDRMERGA",165,0)
 Q
"RTN","XDRMERGA",166,0)
 ;
"RTN","XDRMERGA",167,0)
GETEXT(DICA,DA,FILNUM) ; GET EXTERNAL VALUE FOR .01 FIELD
"RTN","XDRMERGA",168,0)
 N DIC,DIQ,DR,XDRQ
"RTN","XDRMERGA",169,0)
 S DIC=DICA,DIC("P")=FILNUM,DR=.01,DIQ="XDRQ",DIQ(0)="E"
"RTN","XDRMERGA",170,0)
 D EN^DIQ1
"RTN","XDRMERGA",171,0)
 Q $G(XDRQ(FILNUM,DA,.01,"E"))
"RTN","XDRMERGA",172,0)
 ;
"RTN","XDRMERGA",173,0)
DINUMDAT ; PROCESS ENTRIES WITH SAMPLE DATE/TIMES WITH SECONDS, NEEDS DINUM
"RTN","XDRMERGA",174,0)
 I $D(@(XDRTO_NODEA_")")) Q
"RTN","XDRMERGA",175,0)
 M @(XDRTO_NODEA_")")=@(XDRFROM_NODEA_")")
"RTN","XDRMERGA",176,0)
 S DIK=XDRTO,DA=NODEA D  D IX^DIK
"RTN","XDRMERGA",177,0)
 . F I=1:1 S DA(I)=$P(XDRDASEQ,U,I) I DA(I)="" K DA(I) Q
"RTN","XDRMERGA",178,0)
 Q
"RTN","XDRMERGA",179,0)
 ;
"RTN","XDRMERGA",180,0)
DODIS ; CODE TO HANDLE DISPOSITION ENTRIES IN PATIENT FILE
"RTN","XDRMERGA",181,0)
 N XDRI,DA,DIK
"RTN","XDRMERGA",182,0)
 F XDRI=0:0 S XDRI=$O(@(XDRDIC_IENFROM_",""DIS"","_XDRI_")")) Q:XDRI'>0  D
"RTN","XDRMERGA",183,0)
 . I $D(@(XDRDIC_IENTO_",""DIS"","_XDRI_")")) Q
"RTN","XDRMERGA",184,0)
 . M @(XDRDIC_IENTO_",""DIS"","_XDRI_")")=@(XDRDIC_IENFROM_",""DIS"","_XDRI_")")
"RTN","XDRMERGA",185,0)
 . S DA=XDRI,DA(1)=IENTO,DIK=XDRDIC_IENTO_",""DIS""," D IX^DIK
"RTN","XDRMERGA",186,0)
 . Q
"RTN","XDRMERGA",187,0)
 Q
"RTN","XDRMERGA",188,0)
 ;
"RTN","XDRMERGA",189,0)
CHKFROM(FROM,FILE) ;
"RTN","XDRMERGA",190,0)
 ;
"RTN","XDRMERGA",191,0)
 ; The following code is used to identify any pairs which have a same internal number in them and to
"RTN","XDRMERGA",192,0)
 ; exclude any after the first occurence of the internal number from the current merge
"RTN","XDRMERGA",193,0)
 ; the first occurrence is that based on the lowest ien for the FROM entry and the lowest ien for a
"RTN","XDRMERGA",194,0)
 ; TO entry associated with it.  Any other pairs involving either of these iens is then excluded.
"RTN","XDRMERGA",195,0)
 ;
"RTN","XDRMERGA",196,0)
 ; The XDRBROWSER1 device is used to capture any output generated due to exclusion of pairs and is
"RTN","XDRMERGA",197,0)
 ; then sent as a mail message.
"RTN","XDRMERGA",198,0)
 ;
"RTN","XDRMERGA",199,0)
 N FRA,TOA,FR,TO
"RTN","XDRMERGA",200,0)
 S IOP="XDRBROWSER1" D ^%ZIS
"RTN","XDRMERGA",201,0)
 U IO
"RTN","XDRMERGA",202,0)
 F FRA=0:0 S FRA=$O(@FROM@(FRA)) Q:FRA'>0  D
"RTN","XDRMERGA",203,0)
 . S TOA=$O(@FROM@(FRA,0))
"RTN","XDRMERGA",204,0)
 . F FR=FRA,TOA F TO=0:0 S TO=$O(@FROM@(FR,TO)) Q:TO=""  I FR'=FRA!(TO'=TOA) D EXCLUDE(FILE,FROM,FR,TO,FR,(TO=FRA))
"RTN","XDRMERGA",205,0)
 . F FR=0:0 S FR=$O(@FROM@(FR)) Q:FR'>0  D:$D(@FROM@(FR,FRA)) EXCLUDE(FILE,FROM,FR,FRA,FRA,1) I FR'=FRA D:$D(@FROM@(FR,TOA)) EXCLUDE(FILE,FROM,FR,TOA,TOA,0)
"RTN","XDRMERGA",206,0)
 D ^%ZISC K ^TMP("DDB",$J,1)
"RTN","XDRMERGA",207,0)
 I $D(^TMP("DDB",$J)) D SENDMESG^XDRDVAL1("PAIRS EXCLUDED FROM MERGE DUE TO MULTIPLE REFERENCES","^TMP(""DDB"",$J,")
"RTN","XDRMERGA",208,0)
 Q
"RTN","XDRMERGA",209,0)
 ;
"RTN","XDRMERGA",210,0)
EXCLUDE(FILE,FROM,FR,TO,WHICH,FROMREF) ;
"RTN","XDRMERGA",211,0)
 N VREF,VFR,VTO
"RTN","XDRMERGA",212,0)
 S VREF=""
"RTN","XDRMERGA",213,0)
 S VFR=$O(@FROM@(FR,TO,"")) I VFR="" S VFR=0,VREF=@FROM@(FR,TO)
"RTN","XDRMERGA",214,0)
 S VTO=$O(@FROM@(FR,TO,VFR,"")) S:VTO="" VTO=0
"RTN","XDRMERGA",215,0)
 I VTO>0 S VREF=@FROM@(FR,TO,VFR,VTO)
"RTN","XDRMERGA",216,0)
 D RMOVPAIR^XDRDVAL1(FR,TO,VREF,FROM)
"RTN","XDRMERGA",217,0)
 D PAIRID^XDRDVAL1(FILE,FR,TO,VREF)
"RTN","XDRMERGA",218,0)
 W !,"   Excluded as a multiple pair including ien=",WHICH,!
"RTN","XDRMERGA",219,0)
 I FROMREF>0,VREF>0 D RESET^XDRDPICK(VREF)
"RTN","XDRMERGA",220,0)
 Q
"RTN","XDRMERGA",221,0)
 ;
"RTN","XDRMERGB")
0^64^B76785661
"RTN","XDRMERGB",1,0)
XDRMERGB ;SF-IRMFO.SEA/JLI - TENATIVE UPDATE POINTER NODES ;5/14/98  10:30
"RTN","XDRMERGB",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMERGB",3,0)
 ;;
"RTN","XDRMERGB",4,0)
 Q
"RTN","XDRMERGB",5,0)
 ;
"RTN","XDRMERGB",6,0)
MERGEIT ; MERGE TWO ENTRIES IN FILE
"RTN","XDRMERGB",7,0)
 N NODE,NODE1,NODE2,NODEA,SFILE,XDRFROM,XDRTO,NODEA,VALUE,XVALUE,XDRXX,NODEB,DIK,DA,I,Y,VREF,XNN,XFILNO,IENTOSTR,DFN,XDRZZ
"RTN","XDRMERGB",8,0)
 N XDRAA ; DEBUG STATEMENT
"RTN","XDRMERGB",9,0)
 ;
"RTN","XDRMERGB",10,0)
 S XFILNO=+$P(@(XDRDIC_"0)"),U,2)
"RTN","XDRMERGB",11,0)
 S IENTOSTR=IENTO_","_XDRIENS
"RTN","XDRMERGB",12,0)
 S DFN=IENTO
"RTN","XDRMERGB",13,0)
 ;
"RTN","XDRMERGB",14,0)
 ; NOW MERGE DATA GOING NODE BY NODE
"RTN","XDRMERGB",15,0)
 ;
"RTN","XDRMERGB",16,0)
 S NODE=""
"RTN","XDRMERGB",17,0)
 F  D  Q:NODE=""
"RTN","XDRMERGB",18,0)
 . S NODE1=$O(@(XDRDIC_IENFROM_","""_NODE_""")"))
"RTN","XDRMERGB",19,0)
 . I NODE1="" S NODE="" Q  ; NOTHING MORE TO MOVE OVER
"RTN","XDRMERGB",20,0)
 . S NODE2=$O(@(XDRDIC_IENTO_","""_NODE_""")"))
"RTN","XDRMERGB",21,0)
 . I NODE2'="",NODE1]NODE2 S NODE=NODE2 Q  ; NODE ON TO, BUT NOT ON FROM - GO TO NEXT
"RTN","XDRMERGB",22,0)
 . S NODE=NODE1
"RTN","XDRMERGB",23,0)
 . I $D(@(XDRDIC_IENFROM_","""_NODE_""")"))=1 D  Q  ; SINGLE NODE, MERGE DATA
"RTN","XDRMERGB",24,0)
 . . I NODE2]NODE1!(NODE2="") D  Q  ;  MISSING NODE, JUST MOVE IT OVER
"RTN","XDRMERGB",25,0)
 . . . N XDRXX,FLD,N,J
"RTN","XDRMERGB",26,0)
 . . . F N=0:0 S N=$O(^DD(XFILNO,"GL",NODE,N)) Q:N'>0  S FLD=$O(^(N,0)) I $O(^DD(XFILNO,FLD,1,0))>0 D
"RTN","XDRMERGB",27,0)
 . . . . S X=0 F J=0:0 S J=$O(^DD(XFILNO,FLD,1,J)) Q:J'>0  I $O(^(J,0))>0 S X=1 Q
"RTN","XDRMERGB",28,0)
 . . . . I X>0 D
"RTN","XDRMERGB",29,0)
 . . . . . S XDRXX(XFILNO,IENTOSTR,FLD)=$P(@(XDRDIC_IENFROM_","""_NODE_""")"),U,N)
"RTN","XDRMERGB",30,0)
 . . . K XDRAA I $D(XDRTESTK),$D(XDRXX) M XDRAA=XDRXX ; DEBUT STATEMENT
"RTN","XDRMERGB",31,0)
 . . . K XDRZZ
"RTN","XDRMERGB",32,0)
 . . . I $D(XDRXX) D FILE^DIE("","XDRXX","XDRZZ")
"RTN","XDRMERGB",33,0)
 . . . I $D(XDRTESTK),$D(XDRZZ) S XDRTESTK=XDRTESTK+1 M ^XTMP("XDRTESTK",$$NOW^XLFDT(),XDRTESTK,"XX")=XDRAA,^("ZZ")=XDRZZ ; DEBUG STATMENT
"RTN","XDRMERGB",34,0)
 . . . M @(XDRDIC_IENTO_","""_NODE_""")")=@(XDRDIC_IENFROM_","""_NODE_""")")
"RTN","XDRMERGB",35,0)
 . . I $D(@(XDRDIC_IENTO_","""_NODE_""")"))>1 Q  ; MISMATCH SO QUIT
"RTN","XDRMERGB",36,0)
 . . N XDRXX,FLD
"RTN","XDRMERGB",37,0)
 . . S X1=@(XDRDIC_IENFROM_","""_NODE_""")")
"RTN","XDRMERGB",38,0)
 . . S (X2,X3)=@(XDRDIC_IENTO_","""_NODE_""")")
"RTN","XDRMERGB",39,0)
 . . F I=1:1 Q:X1=""  S X=$P(X1,U),X1=$P(X1,U,2,999) I X'="" D
"RTN","XDRMERGB",40,0)
 . . . S Y=$P(X2,U,I)
"RTN","XDRMERGB",41,0)
 . . . I Y=""  D
"RTN","XDRMERGB",42,0)
 . . . . S $P(X2,U,I)=X
"RTN","XDRMERGB",43,0)
 . . . . S FLD=$O(^DD(XFILNO,"GL",NODE,I,0)) S JXFLD=FLD
"RTN","XDRMERGB",44,0)
 . . . . I FLD>0,$O(^DD(XFILNO,FLD,1,0))>0 S XDRXX(XFILNO,IENTOSTR,FLD)=X
"RTN","XDRMERGB",45,0)
 . . I X2'=X3 D
"RTN","XDRMERGB",46,0)
 . . . I $D(XDRXX) D
"RTN","XDRMERGB",47,0)
 . . . . K XDRAA I $D(XDRTESTK) M XDRAA=XDRXX ; DEBUG STATEMENT
"RTN","XDRMERGB",48,0)
 . . . . K XDRZZ
"RTN","XDRMERGB",49,0)
 . . . . N X2 D FILE^DIE("","XDRXX","XDRZZ")
"RTN","XDRMERGB",50,0)
 . . . . I $D(XDRTESTK),$D(XDRZZ) S XDRTESTK=XDRTESTK+1 M ^XTMP("XDRTESTK",$$NOW^XLFDT(),XDRTESTK,"XX")=XDRAA,^("ZZ")=XDRZZ ; DEBUG STATMENT
"RTN","XDRMERGB",51,0)
 . . . S @(XDRDIC_IENTO_","""_NODE_""")")=X2 ; SET MERGED DATA ON NODE
"RTN","XDRMERGB",52,0)
 . ;
"RTN","XDRMERGB",53,0)
 . ; THE FOLLOWING HANDLES NODES THAT HAVE MULTIPLES
"RTN","XDRMERGB",54,0)
 . ;
"RTN","XDRMERGB",55,0)
 . S XDRFROM=XDRDIC_IENFROM_","""_NODE_""","
"RTN","XDRMERGB",56,0)
 . S XDRTO=XDRDIC_IENTO_","""_NODE_""","
"RTN","XDRMERGB",57,0)
 . I NODE="DIS",XFILNO=2 D DODIS^XDRMERGA Q
"RTN","XDRMERGB",58,0)
 . S IENTOSTR=IENTO_","_XDRIENS
"RTN","XDRMERGB",59,0)
 . D DOSUBS^XDRMERGA(XDRFROM,XDRTO,IENTOSTR,IENTO)
"RTN","XDRMERGB",60,0)
 S XDRXX=$P(@(XDRDIC_IENFROM_",0)"),U)
"RTN","XDRMERGB",61,0)
 K DA N DIU S DIU(0)=1 S DIK=XDRDIC,DA=IENFROM,DFN=DA D ^DIK ; KILL OFF MERGED FROM ENTRY
"RTN","XDRMERGB",62,0)
 S @(XDRDIC_IENFROM_",0)")=XDRXX
"RTN","XDRMERGB",63,0)
 Q
"RTN","XDRMERGB",64,0)
 ;
"RTN","XDRMERGB",65,0)
SAVEMERG(FILE,IENFROM,IENTO) ;
"RTN","XDRMERGB",66,0)
 N IENS,XDRFILE,YYY,ZZZ,XDRFDA,FROMARG,TOARG,XDRDA,Q,Q1,IENVAL,XDRSUB
"RTN","XDRMERGB",67,0)
 S FROMARG=$O(@FROM@(IENFROM,IENTO,"")) Q:FROMARG=""
"RTN","XDRMERGB",68,0)
 S TOARG=$O(@FROM@(IENFROM,IENTO,FROMARG,""))
"RTN","XDRMERGB",69,0)
 S XDRDA=$$FIND1^DIC(15.4,"","Q",FROMARG)
"RTN","XDRMERGB",70,0)
 I XDRDA>0,$P(^XDRM(XDRDA,0),U)'=FROMARG S XDRDA=0
"RTN","XDRMERGB",71,0)
 I XDRDA'>0 D
"RTN","XDRMERGB",72,0)
 . N XDRFDA
"RTN","XDRMERGB",73,0)
 . S XDRFDA(15.4,"+1,",.01)=FROMARG
"RTN","XDRMERGB",74,0)
 . S XDRFDA(15.4,"+1,",.02)=TOARG
"RTN","XDRMERGB",75,0)
 . S XDRFDA(15.4,"+1,",.03)=DT
"RTN","XDRMERGB",76,0)
 . D UPDATE^DIE("","XDRFDA","YYY") S IENS=YYY(1)
"RTN","XDRMERGB",77,0)
 . S XDRDA=YYY(1)
"RTN","XDRMERGB",78,0)
 S XDRFILE=$P(^DIC(FILE,0),U)
"RTN","XDRMERGB",79,0)
 S IENS=$$FIND1^DIC(15.41,","_XDRDA_",","Q",XDRFILE)
"RTN","XDRMERGB",80,0)
 I IENS'>0 D
"RTN","XDRMERGB",81,0)
 . S IENS="+1,"_XDRDA_","
"RTN","XDRMERGB",82,0)
 . S XDRFDA(15.41,IENS,.01)=XDRFILE
"RTN","XDRMERGB",83,0)
 . I IENFROM>0 S XDRFDA(15.41,IENS,.02)=IENFROM
"RTN","XDRMERGB",84,0)
 . K YYY
"RTN","XDRMERGB",85,0)
 . D UPDATE^DIE("","XDRFDA","YYY","ZZZ") S IENS=YYY(1)
"RTN","XDRMERGB",86,0)
 I IENFROM>0 D
"RTN","XDRMERGB",87,0)
 . S XDRSUB=15.411,IENVAL=IENFROM
"RTN","XDRMERGB",88,0)
 . D STORMERG
"RTN","XDRMERGB",89,0)
 K XDRFDA
"RTN","XDRMERGB",90,0)
 S IENS=$$FIND1^DIC(15.42,","_XDRDA_",","Q",XDRFILE)
"RTN","XDRMERGB",91,0)
 I IENS'>0 D
"RTN","XDRMERGB",92,0)
 . S IENS="+1,"_XDRDA_","
"RTN","XDRMERGB",93,0)
 . S XDRFDA(15.42,IENS,.01)=XDRFILE
"RTN","XDRMERGB",94,0)
 . I IENTO>0 S XDRFDA(15.42,IENS,.02)=IENTO
"RTN","XDRMERGB",95,0)
 . K YYY,ZZZ
"RTN","XDRMERGB",96,0)
 . D UPDATE^DIE("","XDRFDA","YYY","ZZZ") S IENS=YYY(1)
"RTN","XDRMERGB",97,0)
 I IENTO>0 D
"RTN","XDRMERGB",98,0)
 . S XDRSUB=15.421,IENVAL=IENTO
"RTN","XDRMERGB",99,0)
 . D STORMERG
"RTN","XDRMERGB",100,0)
 Q
"RTN","XDRMERGB",101,0)
STORMERG ;
"RTN","XDRMERGB",102,0)
 K ^VA(15.4,XDRDA,$S(XDRSUB=15.411:1,1:2),IENS,1) ; REMOVE ANY PREVIOUS TRIES
"RTN","XDRMERGB",103,0)
 S IENS="+1,"_IENS_","_XDRDA_","
"RTN","XDRMERGB",104,0)
 S Q=^DIC(FILE,0,"GL")_IENVAL_")",Q1=$E(Q,1,$L(Q)-1)
"RTN","XDRMERGB",105,0)
 F  S Q=$Q(@Q) Q:Q'[Q1  D
"RTN","XDRMERGB",106,0)
 . K XDRFDA
"RTN","XDRMERGB",107,0)
 . S XDRFDA(XDRSUB,IENS,.01)=$E(Q,2,$L(Q))
"RTN","XDRMERGB",108,0)
 . I @Q'="" S XDRFDA(XDRSUB,IENS,1.01)=@Q
"RTN","XDRMERGB",109,0)
 . D UPDATE^DIE("","XDRFDA")
"RTN","XDRMERGB",110,0)
 Q
"RTN","XDRMERGB",111,0)
 ;
"RTN","XDRMERGB",112,0)
SAVEPNTR(IENFROM,IENTO,FILE,IENS,FIELD,VALUE) ;
"RTN","XDRMERGB",113,0)
 N XDRFDA,XDRDA,FROMARG
"RTN","XDRMERGB",114,0)
 S FROMARG=$O(@FROM@(IENFROM,IENTO,"")) Q:FROMARG=""
"RTN","XDRMERGB",115,0)
 S XDRDA=$$FIND1^DIC(15.4,"","Q",FROMARG)
"RTN","XDRMERGB",116,0)
 S X=FILE_";"_IENS_";"_FIELD
"RTN","XDRMERGB",117,0)
 S XDRFDA(15.43,"+1,"_XDRDA_",",.01)=X
"RTN","XDRMERGB",118,0)
 S XDRFDA(15.43,"+1,"_XDRDA_",",1.01)=VALUE
"RTN","XDRMERGB",119,0)
 D UPDATE^DIE("","XDRFDA")
"RTN","XDRMERGB",120,0)
 Q
"RTN","XDRMERGB",121,0)
SNDMSG(XDRFDA) ;Sends msg when merge process has completed.
"RTN","XDRMERGB",122,0)
 N XDRGRP,XMTEXT,XMSUB,XMDUZ,XDRNAME
"RTN","XDRMERGB",123,0)
 S XDRNAME=$$GET1^DIQ(15.2,XDRFDA,.01)
"RTN","XDRMERGB",124,0)
 S R(1,0)=XDRNAME_" merge process has completed."
"RTN","XDRMERGB",125,0)
 S XDRGRP=$$GET1^DIQ(15.1,"2,",.29,"I")
"RTN","XDRMERGB",126,0)
 S:XDRGRP>0 XDRGRPN=$$GET1^DIQ(3.8,XDRGRP,.01)
"RTN","XDRMERGB",127,0)
 S XDRGRP=$S(XDRGRP>0:"G."_XDRGRPN,1:"")
"RTN","XDRMERGB",128,0)
 S:XDRGRP'="" XMY(XDRGRP)=""
"RTN","XDRMERGB",129,0)
 S:XDRGRP="" XMY(.5)="" ;If no mail grp found, send msg to postmaster
"RTN","XDRMERGB",130,0)
 S XMTEXT="R(",XMSUB=XDRNAME_" Completed",XMDUZ=.5,XMCHAN=1
"RTN","XDRMERGB",131,0)
 D ^XMD
"RTN","XDRMERGB",132,0)
 Q
"RTN","XDRMERGB",133,0)
 ;
"RTN","XDRMERGB",134,0)
QUE ;  (Moved from XDRMERG0)
"RTN","XDRMERGB",135,0)
 ;
"RTN","XDRMERGB",136,0)
 N XDRXX,XDRYY,XDRMA,DIE,DIC,DIR,DR,ZTDTH,ZTSK
"RTN","XDRMERGB",137,0)
 N XDRX,XDRY,XDRFIL,XDRGLOB,X,Y,XDRNAME
"RTN","XDRMERGB",138,0)
 N XDRFDA,XDRIENS,XDRI,XDRJ,XDRK,DA,DIK
"RTN","XDRMERGB",139,0)
 ;
"RTN","XDRMERGB",140,0)
 S XDRFIL=$$FILE^XDRDPICK() Q:XDRFIL'>0
"RTN","XDRMERGB",141,0)
 I XDRFIL=2 D  Q:Y
"RTN","XDRMERGB",142,0)
 . N X,XDRKEY
"RTN","XDRMERGB",143,0)
 . S (X,XDRKEY)=0 F  S X=$O(^VA(200,DUZ,51,"B",X)) Q:X'>0!(XDRKEY)  D
"RTN","XDRMERGB",144,0)
 . . I $$GET1^DIQ(19.1,X,.01)="DG ELIGIBILITY" S XDRKEY=1
"RTN","XDRMERGB",145,0)
 . . Q
"RTN","XDRMERGB",146,0)
 . S Y=0 I 'XDRKEY W !!,"You should hold the 'DG ELIGIBILITY' key to run a patient file merge." S Y=1
"RTN","XDRMERGB",147,0)
 . Q
"RTN","XDRMERGB",148,0)
 S XDRDIC=^DIC(XDRFIL,0,"GL")
"RTN","XDRMERGB",149,0)
 S XDRGLOB=$E(XDRDIC,2,999)
"RTN","XDRMERGB",150,0)
 S X=""
"RTN","XDRMERGB",151,0)
 S XNCNT=0,XNCNT0=0
"RTN","XDRMERGB",152,0)
 F  S X=$O(^VA(15,"AVDUP",XDRGLOB,X)) Q:X=""  S Y=$O(^(X,0)) D
"RTN","XDRMERGB",153,0)
 . N YVAL S YVAL=^VA(15,Y,0)
"RTN","XDRMERGB",154,0)
 . I $P(YVAL,U,20)>0 Q  ; ALREADY DONE OR SCHEDULED
"RTN","XDRMERGB",155,0)
 . I $P(YVAL,U,3)'="V" Q  ; TAKE ONLY VERIFIED
"RTN","XDRMERGB",156,0)
 . I $P(YVAL,U,5)'=1 Q  ; TAKE ONLY IF MARKED READY TO MERGE
"RTN","XDRMERGB",157,0)
 . I $P(YVAL,U,13)>0 D
"RTN","XDRMERGB",158,0)
 . . I '$D(@(XDRDIC_(+YVAL)_",0)"))!'$D(@(XDRDIC_(+$P(YVAL,U,2))_",0)")) Q
"RTN","XDRMERGB",159,0)
 . . I $P(YVAL,U,4)'=2 S XDRX(+YVAL,+$P(YVAL,U,2))=Y ; get ien numbers from duplicate file
"RTN","XDRMERGB",160,0)
 . . E  S XDRX(+$P(YVAL,U,2),+YVAL)=Y ; Reverse - merge to switched
"RTN","XDRMERGB",161,0)
 . . S XNCNT=XNCNT+1
"RTN","XDRMERGB",162,0)
 W !!,XNCNT,"  Entries Ready to be included in merge"
"RTN","XDRMERGB",163,0)
 I $O(XDRX(0))'>0 D  Q
"RTN","XDRMERGB",164,0)
 . W !!?15,$C(7),"No Verified Duplicates included in merge",$C(7),!!
"RTN","XDRMERGB",165,0)
 ;
"RTN","XDRMERGB",166,0)
 K DIR S DIR(0)="Y"
"RTN","XDRMERGB",167,0)
 S DIR("A",1)="This process will take a **LONG** time (usually over 15 hours, and sometimes"
"RTN","XDRMERGB",168,0)
 S DIR("A",2)="considerably longer), but you CAN stop and restart the process when you"
"RTN","XDRMERGB",169,0)
 S DIR("A")="want using the options.  OK"
"RTN","XDRMERGB",170,0)
 D ^DIR K DIR Q:Y'>0
"RTN","XDRMERGB",171,0)
NAME W !! S DIR(0)="F^2:30"
"RTN","XDRMERGB",172,0)
 S DIR("A")="Name for Merge Process"
"RTN","XDRMERGB",173,0)
 S DIR("?",1)="Enter a unique name by which the MERGE PROCESS will be identified"
"RTN","XDRMERGB",174,0)
 S DIR("?")="This name should be 2 to 30 characters in length"
"RTN","XDRMERGB",175,0)
 D ^DIR
"RTN","XDRMERGB",176,0)
 K DIR Q:Y=U  S XDRNAME=Y
"RTN","XDRMERGB",177,0)
 I $$FIND1^DIC(15.2,",","Q",XDRNAME)>0 D  G NAME
"RTN","XDRMERGB",178,0)
 . W !!,$C(7),"The name entered has already been used.  The name must be unique.",!!
"RTN","XDRMERGB",179,0)
 ;
"RTN","XDRMERGB",180,0)
 ; CREATE PROCESS ENTRY
"RTN","XDRMERGB",181,0)
 ;
"RTN","XDRMERGB",182,0)
 S XDRXX(15.2,"+1,",.01)=XDRNAME
"RTN","XDRMERGB",183,0)
 S XDRXX(15.2,"+1,",.02)=XDRFIL
"RTN","XDRMERGB",184,0)
 D UPDATE^DIE("","XDRXX","XDRYY","XDRMA")
"RTN","XDRMERGB",185,0)
 S XDRFDA=$G(XDRYY(1))
"RTN","XDRMERGB",186,0)
 ;
"RTN","XDRMERGB",187,0)
 ; NOW MOVE LIST OF DUPLICATES TO BE PROCESSED INTO THIS ENTRY
"RTN","XDRMERGB",188,0)
 S XDRIENS="+1,"_XDRFDA_","
"RTN","XDRMERGB",189,0)
 F XDRI=0:0 S XDRI=$O(XDRX(XDRI)) Q:XDRI'>0  D
"RTN","XDRMERGB",190,0)
 . S XDRJ=$O(XDRX(XDRI,0))
"RTN","XDRMERGB",191,0)
 . S XDRK=XDRX(XDRI,XDRJ)
"RTN","XDRMERGB",192,0)
 . K XDRXX,XDRYY
"RTN","XDRMERGB",193,0)
 . S XDRXX(15.22,XDRIENS,.01)=XDRI ; IEN1
"RTN","XDRMERGB",194,0)
 . S XDRXX(15.22,XDRIENS,.02)=XDRJ ; IEN2
"RTN","XDRMERGB",195,0)
 . S XDRXX(15.22,XDRIENS,.03)=XDRK ; ENTRY # IN FILE 15
"RTN","XDRMERGB",196,0)
 . D UPDATE^DIE("","XDRXX","XDRYY","XDRMA")
"RTN","XDRMERGB",197,0)
 . K XDRXX,XDRYY,XDRMA
"RTN","XDRMERGB",198,0)
 . ;    AND MARK THEM AS IN THIS MERGE PROCESS IN FILE 15
"RTN","XDRMERGB",199,0)
 . S XDRXX(15,XDRK_",",.05)=3
"RTN","XDRMERGB",200,0)
 . S XDRXX(15,XDRK_",",.2)=XDRFDA
"RTN","XDRMERGB",201,0)
 . D FILE^DIE("","XDRXX")
"RTN","XDRMERGB",202,0)
 . ; JLI 3/12/98 - FOR SOME REASON THE .05 FIELD STILL DOESN'T SEEM TO BE GETTING SET TO 3, SO CHECK IT AND IF THAT IS THE CASE, HARDSET IT.
"RTN","XDRMERGB",203,0)
 . I $P(^VA(15,XDRK,0),U,5)'=3 S $P(^(0),U,5)=3
"RTN","XDRMERGB",204,0)
 ;
"RTN","XDRMERGB",205,0)
 K DR S DR=".03;.04///S;" ; GET DESIRED START TIME AND MARK PROCESS AS SCHEDULED
"RTN","XDRMERGB",206,0)
 S DIE="^VA(15.2,"
"RTN","XDRMERGB",207,0)
 S DA=XDRFDA
"RTN","XDRMERGB",208,0)
 D ^DIE
"RTN","XDRMERGB",209,0)
 S ZTDTH=$P(^VA(15.2,XDRFDA,0),U,3) ; TAKE DESIRED TIME
"RTN","XDRMERGB",210,0)
 I ZTDTH>0 D  Q:$G(ZTSK)>0  ;         AND SET UP TASK
"RTN","XDRMERGB",211,0)
 . S ZTRTN="DQ^XDRMERG0",ZTDESC="MERGE PROCESS "_XDRNAME
"RTN","XDRMERGB",212,0)
 . S ZTIO="NULL",ZTSAVE("XDRFDA")=""
"RTN","XDRMERGB",213,0)
 . D ^%ZTLOAD
"RTN","XDRMERGB",214,0)
 . I $G(ZTSK)>0 D
"RTN","XDRMERGB",215,0)
 . . K DR S DR=".08///"_ZTSK_";",DIE="^VA(15.2,",DA=XDRFDA D ^DIE
"RTN","XDRMERGB",216,0)
 . . W !!,"Merge process '",$P(^VA(15.2,XDRFDA,0),U),"' for Verified Duplicates in File ",XDRFIL," scheduled",!,"as task ",ZTSK,".",!
"RTN","XDRMERGB",217,0)
 ;
"RTN","XDRMERGB",218,0)
 ;  TASK INFO, TIME, ETC. NOT COMPLETE - SO REVERSE IT
"RTN","XDRMERGB",219,0)
 ;
"RTN","XDRMERGB",220,0)
 F XDRI=0:0 S XDRI=$O(XDRX(XDRI)) Q:XDRI'>0  D
"RTN","XDRMERGB",221,0)
 . S XDRJ=$O(XDRX(XDRI,0))
"RTN","XDRMERGB",222,0)
 . S XDRK=XDRX(XDRI,XDRJ)
"RTN","XDRMERGB",223,0)
 . K XDRXX,XDRYY
"RTN","XDRMERGB",224,0)
 . S XDRXX(15,XDRK_",",.2)="@" ; UNMARK ENTRY IN FILE 15
"RTN","XDRMERGB",225,0)
 . S XDRXX(15,XDRK_",",.05)=1
"RTN","XDRMERGB",226,0)
 . D UPDATE^DIE("","XDRXX")
"RTN","XDRMERGB",227,0)
 S DA=XDRFDA
"RTN","XDRMERGB",228,0)
 S DIK="^VA(15.2,"
"RTN","XDRMERGB",229,0)
 D ^DIK
"RTN","XDRMERGB",230,0)
 W !!,$C(7),"The Merge Process has been aborted, no changes made."
"RTN","XDRMERGB",231,0)
 Q
"RTN","XDRMERGB",232,0)
 ;
"RTN","XDRMVFY")
0^38^B2426142
"RTN","XDRMVFY",1,0)
XDRMVFY ;SF-IRMFO/IHS/OHPRD/JCM - VERIFY POTENTIAL DUPLICATES ;10/29/93  09:58
"RTN","XDRMVFY",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRMVFY",3,0)
 ;;
"RTN","XDRMVFY",4,0)
 ; Inserted DITC+4-6 IHS/OHPRD/JCM 3/26/91
"RTN","XDRMVFY",5,0)
START ;
"RTN","XDRMVFY",6,0)
 D DITC
"RTN","XDRMVFY",7,0)
 G:XDRQFLG END
"RTN","XDRMVFY",8,0)
 D VERIFY
"RTN","XDRMVFY",9,0)
 G:XDRQFLG!(XDRMSTAT="") END
"RTN","XDRMVFY",10,0)
 D STATUS
"RTN","XDRMVFY",11,0)
END D EOJ
"RTN","XDRMVFY",12,0)
 Q
"RTN","XDRMVFY",13,0)
 ;
"RTN","XDRMVFY",14,0)
DITC ;
"RTN","XDRMVFY",15,0)
 S DIT(1)=XDRMCD,DIT(2)=XDRMCD2,DFF=XDRFL,IOP=IO(0)
"RTN","XDRMVFY",16,0)
 D EN^DITC K IOP
"RTN","XDRMVFY",17,0)
 I $D(DUOUT)!($D(DTOUT))!($D(DIRUT)) S XDRQFLG=1 K DIRUT,DUOUT,DTOUT
"RTN","XDRMVFY",18,0)
 ;*********************************
"RTN","XDRMVFY",19,0)
 ;I $G(DUZ("AG"))="I",'XDRQFLG,XDRFL=2 D ^DPTDZCH ;IHS/OHPRD/JCM 3/26/91
"RTN","XDRMVFY",20,0)
 ;*********************************
"RTN","XDRMVFY",21,0)
 Q
"RTN","XDRMVFY",22,0)
 ;
"RTN","XDRMVFY",23,0)
VERIFY ; Verifies if duplicate or not.
"RTN","XDRMVFY",24,0)
 S XDRMSTAT=""
"RTN","XDRMVFY",25,0)
 S DIR(0)="S^V:VERIFIED DUPLICATE;N:VERIFIED, NOT A DUPLICATE;U:UNABLE TO MAKE DETERMINATION"
"RTN","XDRMVFY",26,0)
 S DIR("A")="Verification status of potential duplicate pair"
"RTN","XDRMVFY",27,0)
 D ^DIR K DIR
"RTN","XDRMVFY",28,0)
 I $D(DUOUT)!($D(DTOUT)) S XDRQFLG=1 G VERIFYX
"RTN","XDRMVFY",29,0)
 S XDRMSTAT=$S(Y="V":"V",Y="N":"N",1:"")
"RTN","XDRMVFY",30,0)
VERIFYX Q
"RTN","XDRMVFY",31,0)
 ;
"RTN","XDRMVFY",32,0)
STATUS ;
"RTN","XDRMVFY",33,0)
 S DIE="^VA(15,",DA=XDRMPDA,DIE("NO^")=1,DR=".03///"_XDRMSTAT
"RTN","XDRMVFY",34,0)
 S:XDRMSTAT="V" XDRMRG=1,DR=DR_";.04//2"
"RTN","XDRMVFY",35,0)
 D ^DIE K DIE,DR,DA
"RTN","XDRMVFY",36,0)
 Q
"RTN","XDRMVFY",37,0)
 ;
"RTN","XDRMVFY",38,0)
EOJ ;
"RTN","XDRMVFY",39,0)
 K DIT,DFF,IOP,XDRMSTAT,DIRUT
"RTN","XDRMVFY",40,0)
 Q
"RTN","XDRMVFY",41,0)
 ;********************************************
"RTN","XDRMVFY",42,0)
 ; EN entry point added specifically for APMFVFY for MFI
"RTN","XDRMVFY",43,0)
EN ;
"RTN","XDRMVFY",44,0)
 S XDRQFLG=0
"RTN","XDRMVFY",45,0)
 D DITC
"RTN","XDRMVFY",46,0)
 G:XDRQFLG ENX
"RTN","XDRMVFY",47,0)
 D VERIFY
"RTN","XDRMVFY",48,0)
ENX K DIT,DFF,IOP
"RTN","XDRMVFY",49,0)
 Q
"RTN","XDRPREL1")
0^42^B1097728
"RTN","XDRPREL1",1,0)
XDRPREL1 ;SF-IRMFO.SEA/JLI - IDENTIFY PROBLEM ENTRIES WHICH ARE **NOT** POINTED TO ;
"RTN","XDRPREL1",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPREL1",3,0)
 ;;
"RTN","XDRPREL1",4,0)
 ;;
"RTN","XDRPREL1",5,0)
EN ;
"RTN","XDRPREL1",6,0)
 M ^TMP("XDRPREL1",$J,2)=^TMP("XDRDPREL",$J,2)
"RTN","XDRPREL1",7,0)
 S NODE=""
"RTN","XDRPREL1",8,0)
 F  S NODE=$O(^TMP("XDRPREL1",$J,2,NODE)) Q:NODE=""  D
"RTN","XDRPREL1",9,0)
 . M ^TMP("XDRPREL1",$J,"BB")=^TMP("XDRPREL1",$J,2,NODE)
"RTN","XDRPREL1",10,0)
 S XDRXFLG=1
"RTN","XDRPREL1",11,0)
 D EN^XDRMERG(2,$NA(^TMP("XDRPREL1",$J,"BB")))
"RTN","XDRPREL1",12,0)
 S NODE=""
"RTN","XDRPREL1",13,0)
 F  S NODE=$O(^TMP("XDRPREL1",$J,2,NODE)) Q:NODE=""  D
"RTN","XDRPREL1",14,0)
 . F J=0:0 S J=$O(^TMP("XDRPREL1",$J,2,NODE,J)) Q:J'>0  D
"RTN","XDRPREL1",15,0)
 . . I '$D(^TMP("XDRPREL1",$J,"BB",J)) K ^TMP("XDRPREL1",$J,2,NODE,J) Q
"RTN","XDRPREL1",16,0)
 . . S $P(^(NODE),U,2)=$P(^TMP("XDRPREL1",$J,2,NODE),U,2)+1
"RTN","XDRPTCAN")
0^43^B12464314
"RTN","XDRPTCAN",1,0)
XDRPTCAN ;SF-IRMFO/IHS/OHPRD/JCM/JLI ;5/30/97  10:28
"RTN","XDRPTCAN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTCAN",3,0)
 ;;
"RTN","XDRPTCAN",4,0)
 ;
"RTN","XDRPTCAN",5,0)
 ; Calls: EN^DIQ1
"RTN","XDRPTCAN",6,0)
 ;
"RTN","XDRPTCAN",7,0)
START ;
"RTN","XDRPTCAN",8,0)
 K ^TMP("XDRD",$J,XDRFL),XDRDCAN
"RTN","XDRPTCAN",9,0)
 Q:$P(^DPT(XDRCD,0),U,19)
"RTN","XDRPTCAN",10,0)
 D VALUE
"RTN","XDRPTCAN",11,0)
 I $E(XDRDCAN(2,XDRCD,.09,"I"),1,5)="00000" Q
"RTN","XDRPTCAN",12,0)
 D NAME
"RTN","XDRPTCAN",13,0)
 D SSN
"RTN","XDRPTCAN",14,0)
 D DOB
"RTN","XDRPTCAN",15,0)
END D EOJ
"RTN","XDRPTCAN",16,0)
 Q
"RTN","XDRPTCAN",17,0)
 ;
"RTN","XDRPTCAN",18,0)
VALUE ;
"RTN","XDRPTCAN",19,0)
 S DA=XDRCD K XDRCD S XDRCD=DA
"RTN","XDRPTCAN",20,0)
 N XDRI F XDRI=0:0 S XDRI=$O(XDRDSCOR("DR",XDRI)) Q:XDRI'>0  D
"RTN","XDRPTCAN",21,0)
 . S DIC=XDRI,DA=XDRCD,DIQ(0)="I",DIQ="XDRDCAN",DR=XDRDSCOR("DR",XDRI)
"RTN","XDRPTCAN",22,0)
 . D EN^DIQ1 K DIC,DR,DIQ
"RTN","XDRPTCAN",23,0)
 . M XDRCD=XDRDCAN K DA
"RTN","XDRPTCAN",24,0)
 Q
"RTN","XDRPTCAN",25,0)
 ;
"RTN","XDRPTCAN",26,0)
NAME ;
"RTN","XDRPTCAN",27,0)
 G:XDRDCAN(XDRFL,XDRCD,.01,"I")']"" NAMEX
"RTN","XDRPTCAN",28,0)
 F  Q:XDRDCAN(XDRFL,XDRCD,.01,"I")'["MERGING INTO"  S XDRDCAN(XDRFL,XDRCD,.01,"I")=$P(XDRDCAN(XDRFL,XDRCD,.01,"I"),"(",2,99),XDRDCAN(XDRFL,XDRCD,.01,"I")=$E(XDRDCAN(XDRFL,XDRCD,.01,"I"),1,$L(XDRDCAN(XDRFL,XDRCD,.01,"I"))-1)
"RTN","XDRPTCAN",29,0)
 S XDRDCAN("NAME")=XDRDCAN(XDRFL,XDRCD,.01,"I")
"RTN","XDRPTCAN",30,0)
 S XDRDCAN("LNAME&FI")=$P(XDRDCAN("NAME"),",",1)_","_$E($P(XDRDCAN("NAME"),",",2),1)_"AAA"
"RTN","XDRPTCAN",31,0)
 S XDRDCAN("BNAME")=XDRDCAN("LNAME&FI")
"RTN","XDRPTCAN",32,0)
 F I=0:0 S XDRDCAN("BNAME")=$O(^DPT("B",XDRDCAN("BNAME"))) Q:XDRDCAN("BNAME")=""!(($P(XDRDCAN("NAME"),",",1)_","_$E($P(XDRDCAN("NAME"),",",2),1))'=($P(XDRDCAN("BNAME"),",",1)_","_$E($P(XDRDCAN("BNAME"),",",2),1)))  D
"RTN","XDRPTCAN",33,0)
 . S XDRDCAN("FIND")=XDRCD
"RTN","XDRPTCAN",34,0)
 . F  S XDRDCAN("FIND")=$O(^DPT("B",XDRDCAN("BNAME"),XDRDCAN("FIND"))) Q:XDRDCAN("FIND")'>0  S ^TMP("XDRD",$J,XDRFL,XDRDCAN("FIND"))=""
"RTN","XDRPTCAN",35,0)
 . ;S:$O(^DPT("B",XDRDCAN("BNAME"),""))'=XDRCD ^TMP("XDRD",$J,XDRFL,$O(^DPT("B",XDRDCAN("BNAME"),"")))=""
"RTN","XDRPTCAN",36,0)
 . Q
"RTN","XDRPTCAN",37,0)
NAMEX Q
"RTN","XDRPTCAN",38,0)
 ;
"RTN","XDRPTCAN",39,0)
SSN ;Get patients with same last four digits of ssn
"RTN","XDRPTCAN",40,0)
 I XDRDCAN(XDRFL,XDRCD,.09,"I")']"" S ^XTMP("XDRERR","BADSSN",XDRCD)="" G SSNX
"RTN","XDRPTCAN",41,0)
 I XDRDCAN(XDRFL,XDRCD,.09,"I")'?9N.E S ^XTMP("XDRERR","BADSSN",XDRCD)="" G SSNX
"RTN","XDRPTCAN",42,0)
 S XDRDCAN("SSN")=XDRDCAN(XDRFL,XDRCD,.09,"I")
"RTN","XDRPTCAN",43,0)
 S XDRDCAN("L4SSN")=$E(XDRDCAN("SSN"),6,9)
"RTN","XDRPTCAN",44,0)
 S XDRDCAN("BL4SSN")=XDRCD
"RTN","XDRPTCAN",45,0)
 F %=0:0 S XDRDCAN("BL4SSN")=$O(^DPT("BS",XDRDCAN("L4SSN"),XDRDCAN("BL4SSN"))) Q:'XDRDCAN("BL4SSN")  S ^TMP("XDRD",$J,XDRFL,XDRDCAN("BL4SSN"))=""
"RTN","XDRPTCAN",46,0)
 ;
"RTN","XDRPTCAN",47,0)
 ; Check SSNS with same first five digits
"RTN","XDRPTCAN",48,0)
 ; Commented out the following line, is not specific enough for IHS
"RTN","XDRPTCAN",49,0)
 ; but would be useful for the VA
"RTN","XDRPTCAN",50,0)
 ;
"RTN","XDRPTCAN",51,0)
 ;S XDRDCAN("F5SSN")=$E(XDRDCAN("SSN"),1,5)_"0000",XDRDCAN("5SSN")=XDRDCAN("F5SSN") D
"RTN","XDRPTCAN",52,0)
 ;. F %=0:0 S XDRDCAN("5SSN")=$O(^DPT("SSN",XDRDCAN("5SSN"))) Q:XDRDCAN("5SSN")'=+XDRDCAN("5SSN")!($E(XDRDCAN("5SSN"),1,5)'=$E(XDRDCAN("SSN"),1,5))  S ^TMP("XDRDCAN",$J,XDRFL,$O(^DPT("SSN",XDRDCAN("5SSN"),"")))=""
"RTN","XDRPTCAN",53,0)
 ;. Q
"RTN","XDRPTCAN",54,0)
SSNX Q
"RTN","XDRPTCAN",55,0)
 ;
"RTN","XDRPTCAN",56,0)
DOB ;Get patients with same date of birth
"RTN","XDRPTCAN",57,0)
 G:XDRDCAN(XDRFL,XDRCD,.03,"I")']"" DOBX
"RTN","XDRPTCAN",58,0)
 S XDRDCAN("DOB")=XDRDCAN(XDRFL,XDRCD,.03,"I")
"RTN","XDRPTCAN",59,0)
 S XDRDCAN("BDOB")=XDRCD
"RTN","XDRPTCAN",60,0)
 F %=0:0 S XDRDCAN("BDOB")=$O(^DPT("ADOB",XDRDCAN("DOB"),XDRDCAN("BDOB"))) Q:'XDRDCAN("BDOB")  S ^TMP("XDRD",$J,XDRFL,XDRDCAN("BDOB"))=""
"RTN","XDRPTCAN",61,0)
 ;
"RTN","XDRPTCAN",62,0)
 ;Transpose day of birth and get patients with same date of birth
"RTN","XDRPTCAN",63,0)
 ;
"RTN","XDRPTCAN",64,0)
 S XDRDCAN("TDOB")=$E(XDRDCAN("DOB"),1,5)_$E(XDRDCAN("DOB"),7)_$E(XDRDCAN("DOB"),6)
"RTN","XDRPTCAN",65,0)
 S XDRDCAN("BDOB")=XDRCD
"RTN","XDRPTCAN",66,0)
 F %=0:0 S XDRDCAN("BDOB")=$O(^DPT("ADOB",XDRDCAN("TDOB"),XDRDCAN("BDOB"))) Q:'XDRDCAN("BDOB")  S ^TMP("XDRD",$J,XDRFL,XDRDCAN("BDOB"))=""
"RTN","XDRPTCAN",67,0)
DOBX Q
"RTN","XDRPTCAN",68,0)
 ;
"RTN","XDRPTCAN",69,0)
EOJ ;
"RTN","XDRPTCAN",70,0)
 K XDRDCAN,%
"RTN","XDRPTCAN",71,0)
 Q
"RTN","XDRPTCLN")
0^44^B3167297
"RTN","XDRPTCLN",1,0)
XDRPTCLN ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES CLAIM NUMBERS; ;4/18/97  11:04
"RTN","XDRPTCLN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTCLN",3,0)
 ;;
"RTN","XDRPTCLN",4,0)
START ;
"RTN","XDRPTCLN",5,0)
 D INIT
"RTN","XDRPTCLN",6,0)
EN ; EP - Entry point for comparing dates
"RTN","XDRPTCLN",7,0)
 D COMPARE
"RTN","XDRPTCLN",8,0)
END D EOJ
"RTN","XDRPTCLN",9,0)
 Q
"RTN","XDRPTCLN",10,0)
 ;
"RTN","XDRPTCLN",11,0)
INIT ;
"RTN","XDRPTCLN",12,0)
 K XDRCLN,XDRCLN2
"RTN","XDRPTCLN",13,0)
 S XDRCLN=$G(XDRCD(XDRFL,XDRCD,.313,"I")),XDRCLN2=$G(XDRCD2(XDRFL,XDRCD2,.313,"I"))
"RTN","XDRPTCLN",14,0)
 S XDRCLN("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTCLN",15,0)
 S XDRCLN("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTCLN",16,0)
 Q
"RTN","XDRPTCLN",17,0)
 ;
"RTN","XDRPTCLN",18,0)
COMPARE ;
"RTN","XDRPTCLN",19,0)
 S XDRD("TEST SCORE")=$$NUMCOMP(XDRCLN,XDRCLN2,XDRCLN("MATCH"),XDRCLN("NO MATCH"),.8)
"RTN","XDRPTCLN",20,0)
 Q
"RTN","XDRPTCLN",21,0)
 ;
"RTN","XDRPTCLN",22,0)
NUMCOMP(VAL1,VAL2,MATCHVAL,NOMATCH,PARTIAL) ;
"RTN","XDRPTCLN",23,0)
 I VAL1']""!(VAL2']"") Q 0
"RTN","XDRPTCLN",24,0)
 I VAL1=VAL2 Q MATCHVAL
"RTN","XDRPTCLN",25,0)
 I '$D(PARTIAL)!($G(PARTIAL)>1) S PARTIAL=.8
"RTN","XDRPTCLN",26,0)
 N CNT,I,J,K  S CNT=0
"RTN","XDRPTCLN",27,0)
 F I=1:1 Q:CNT>2  S J=$E(VAL1,I),K=$E(VAL2,I) Q:J=""&(K="")  I J'=K S CNT=CNT+1
"RTN","XDRPTCLN",28,0)
 ; THE FOLLOWING CODE WAS ADDED TO IDENTIFY THOSE VALUES IN WHICH
"RTN","XDRPTCLN",29,0)
 ; TWO ADJACENT DIGITS WERE TRANSPOSED
"RTN","XDRPTCLN",30,0)
 I CNT=2 D
"RTN","XDRPTCLN",31,0)
 . ;N C11,C12,C21,C22,X1,X2,A1,A2
"RTN","XDRPTCLN",32,0)
 . S X1="",X2=""
"RTN","XDRPTCLN",33,0)
 . F I=1:1 S A1=$E(VAL1,I),A2=$E(VAL2,I) Q:A1=""&(A2="")  I A1'=A2!(X1'="")!(X2'="") S X1=X1_A1,X2=X2_A2
"RTN","XDRPTCLN",34,0)
 . S CNT=1
"RTN","XDRPTCLN",35,0)
 . F I=2:1 S C12=$E(X1,I),C22=$E(X2,I) Q:C12=""&(C22="")  S C11=$E(X1,I-1),C21=$E(X2,I-1) I C12'=C22,C11'=C22!(C12'=C21) S CNT=2 Q
"RTN","XDRPTCLN",36,0)
 Q $S(CNT>1:NOMATCH,1:(MATCHVAL*PARTIAL))
"RTN","XDRPTCLN",37,0)
 ;
"RTN","XDRPTCLN",38,0)
EOJ ;
"RTN","XDRPTCLN",39,0)
 K XDRCLN,XDRCLN2
"RTN","XDRPTCLN",40,0)
 Q
"RTN","XDRPTDOB")
0^45^B2889892
"RTN","XDRPTDOB",1,0)
XDRPTDOB ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES DATE OF BIRTHS; ;1/27/97  15:11
"RTN","XDRPTDOB",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTDOB",3,0)
 ;;
"RTN","XDRPTDOB",4,0)
START ;
"RTN","XDRPTDOB",5,0)
 D INIT
"RTN","XDRPTDOB",6,0)
EN ; EP - Entry point for comparing dates
"RTN","XDRPTDOB",7,0)
 D COMPARE
"RTN","XDRPTDOB",8,0)
END D EOJ
"RTN","XDRPTDOB",9,0)
 Q
"RTN","XDRPTDOB",10,0)
 ;
"RTN","XDRPTDOB",11,0)
INIT ;
"RTN","XDRPTDOB",12,0)
 K XDRDOB,XDRDOB2
"RTN","XDRPTDOB",13,0)
 S XDRDOB=XDRCD(XDRFL,XDRCD,.03,"I"),XDRDOB2=XDRCD2(XDRFL,XDRCD2,.03,"I")
"RTN","XDRPTDOB",14,0)
 S XDRDOB("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTDOB",15,0)
 S XDRDOB("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTDOB",16,0)
 Q
"RTN","XDRPTDOB",17,0)
 ;
"RTN","XDRPTDOB",18,0)
COMPARE ;
"RTN","XDRPTDOB",19,0)
 S XDRD("TEST SCORE")=$$DATECOMP(XDRDOB,XDRDOB2,XDRDOB("MATCH"),XDRDOB("NO MATCH"),.8,.6)
"RTN","XDRPTDOB",20,0)
 Q
"RTN","XDRPTDOB",21,0)
 ;
"RTN","XDRPTDOB",22,0)
DATECOMP(DATE1,DATE2,MATCH,NOMATCH,VAL1,VAL2) ;
"RTN","XDRPTDOB",23,0)
 N Y
"RTN","XDRPTDOB",24,0)
 S Y=$$NUMCOMP^XDRPTCLN(DATE1,DATE2,MATCH,NOMATCH,VAL1)
"RTN","XDRPTDOB",25,0)
 I Y=NOMATCH D
"RTN","XDRPTDOB",26,0)
 . I $E(DATE1,4,5)="00"!($E(DATE2,4,5)="00") S DATE1=$E(DATE1,1,3)_"0000",DATE2=$E(DATE2,1,3)_"0000" S MATCH=VAL2*MATCH
"RTN","XDRPTDOB",27,0)
 . I $E(DATE1,4,5)'="00",$E(DATE1,6,7)="00"!($E(DATE2,6,7)="00") S DATE1=$E(DATE1,1,5)_"00",DATE2=$E(DATE2,1,5)_"00" S MATCH=VAL1*MATCH
"RTN","XDRPTDOB",28,0)
 . S Y=$$NUMCOMP^XDRPTCLN(DATE1,DATE2,MATCH,NOMATCH,(NOMATCH/MATCH))
"RTN","XDRPTDOB",29,0)
 Q Y
"RTN","XDRPTDOB",30,0)
 ;
"RTN","XDRPTDOB",31,0)
EOJ ;
"RTN","XDRPTDOB",32,0)
 K XDRDOB,XDRDOB2
"RTN","XDRPTDOB",33,0)
 Q
"RTN","XDRPTDOD")
0^46^B742889
"RTN","XDRPTDOD",1,0)
XDRPTDOD ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES DATE OF DEATH'S; ;8/28/96  10:35
"RTN","XDRPTDOD",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTDOD",3,0)
 ;;
"RTN","XDRPTDOD",4,0)
 ;
"RTN","XDRPTDOD",5,0)
 ; Calls: EN^XDRPTDOB
"RTN","XDRPTDOD",6,0)
 ;
"RTN","XDRPTDOD",7,0)
START ;
"RTN","XDRPTDOD",8,0)
 I XDRCD(XDRFL,XDRCD,.351,"I")']""!(XDRCD2(XDRFL,XDRCD2,.351,"I")']"") G END
"RTN","XDRPTDOD",9,0)
 D INIT
"RTN","XDRPTDOD",10,0)
 D EN^XDRPTDOB
"RTN","XDRPTDOD",11,0)
END Q
"RTN","XDRPTDOD",12,0)
 ;
"RTN","XDRPTDOD",13,0)
INIT ;
"RTN","XDRPTDOD",14,0)
 K XDRDOB,XDRDOB2
"RTN","XDRPTDOD",15,0)
 S XDRDOB=XDRCD(XDRFL,XDRCD,.351,"I"),XDRDOB2=XDRCD2(XDRFL,XDRCD2,.351,"I")
"RTN","XDRPTDOD",16,0)
 S XDRDOB("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTDOD",17,0)
 S XDRDOB("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTDOD",18,0)
 Q
"RTN","XDRPTLSD")
0^50^B1264374
"RTN","XDRPTLSD",1,0)
XDRPTLSD ;SF-IRMFO/IHS/OHPRD/JCM.JLI - COMPARE LAST SERVICE SEPARATION DATES ;1/31/97  15:14
"RTN","XDRPTLSD",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTLSD",3,0)
 ;;
"RTN","XDRPTLSD",4,0)
 ;; DATE OF LAST DISCHARGE ("SEPARATION DATE-SERVICE [LAST]"
"RTN","XDRPTLSD",5,0)
 ;; FILE = 2
"RTN","XDRPTLSD",6,0)
 ;; FIELD = .327
"RTN","XDRPTLSD",7,0)
 ;; ROUTINE = XDRDLD
"RTN","XDRPTLSD",8,0)
START ;
"RTN","XDRPTLSD",9,0)
 D INIT
"RTN","XDRPTLSD",10,0)
 D COMPARE
"RTN","XDRPTLSD",11,0)
END D EOJ
"RTN","XDRPTLSD",12,0)
 Q
"RTN","XDRPTLSD",13,0)
 ;
"RTN","XDRPTLSD",14,0)
INIT ;
"RTN","XDRPTLSD",15,0)
 K XDRDLD,XDRDLD2
"RTN","XDRPTLSD",16,0)
 S XDRDLD=XDRCD(XDRFL,XDRCD,.327,"I"),XDRDLD2=XDRCD2(XDRFL,XDRCD2,.327,"I")
"RTN","XDRPTLSD",17,0)
 S XDRDLD("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTLSD",18,0)
 S XDRDLD("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTLSD",19,0)
 Q
"RTN","XDRPTLSD",20,0)
 ;
"RTN","XDRPTLSD",21,0)
COMPARE ;
"RTN","XDRPTLSD",22,0)
 S XDRD("TEST SCORE")=$$DATECOMP^XDRPTDOB(XDRDLD,XDRDLD2,XDRDLD("MATCH"),XDRDLD("NO MATCH"),.8,.6)
"RTN","XDRPTLSD",23,0)
COMPAREX Q
"RTN","XDRPTLSD",24,0)
 ;
"RTN","XDRPTLSD",25,0)
EOJ ;
"RTN","XDRPTLSD",26,0)
 K XDRDLD,XDRDLD2
"RTN","XDRPTLSD",27,0)
 Q
"RTN","XDRPTMMN")
0^51^B1853250
"RTN","XDRPTMMN",1,0)
XDRPTMMN ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES MOTHER'S MAIDEN NAME; ;1/16/97  12:55
"RTN","XDRPTMMN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTMMN",3,0)
 ;;
"RTN","XDRPTMMN",4,0)
 ;
"RTN","XDRPTMMN",5,0)
 ; Calls: EN^XDRPTN
"RTN","XDRPTMMN",6,0)
START ;
"RTN","XDRPTMMN",7,0)
 I XDRCD(XDRFL,XDRCD,.2403,"I")']""!(XDRCD2(XDRFL,XDRCD2,.2403,"I")']"") G END
"RTN","XDRPTMMN",8,0)
 D INIT
"RTN","XDRPTMMN",9,0)
 D EN^XDRPTN
"RTN","XDRPTMMN",10,0)
END Q
"RTN","XDRPTMMN",11,0)
 ;
"RTN","XDRPTMMN",12,0)
INIT ;
"RTN","XDRPTMMN",13,0)
 S XDRDN("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTMMN",14,0)
 S XDRDN("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTMMN",15,0)
 S XDRDN=XDRCD(XDRFL,XDRCD,.2403,"I"),XDRDN2=XDRCD2(XDRFL,XDRCD2,.2403,"I")
"RTN","XDRPTMMN",16,0)
 S XDRDN=$P(XDRDN,"("),XDRDN2=$P(XDRDN2,"(") S XDRDN=$S(XDRDN[",":$P(XDRDN,",")_",",1:$P(XDRDN," ",$L(XDRDN," "))),XDRDN2=$S(XDRDN2[",":$P(XDRDN2,",")_",",1:$P(XDRDN2," ",$L(XDRDN2," ")))
"RTN","XDRPTMMN",17,0)
 Q
"RTN","XDRPTN")
0^52^B14769218
"RTN","XDRPTN",1,0)
XDRPTN ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES NAMES; ;11/6/97  16:14
"RTN","XDRPTN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTN",3,0)
 ;;
"RTN","XDRPTN",4,0)
 ;
"RTN","XDRPTN",5,0)
 ; Calls: SOU^DICM1
"RTN","XDRPTN",6,0)
 ;
"RTN","XDRPTN",7,0)
START ;
"RTN","XDRPTN",8,0)
 D INIT
"RTN","XDRPTN",9,0)
 D NAME
"RTN","XDRPTN",10,0)
 I $O(^DPT(XDRCD,.01,0)) D OTHER
"RTN","XDRPTN",11,0)
END D EOJ
"RTN","XDRPTN",12,0)
 Q
"RTN","XDRPTN",13,0)
 ;
"RTN","XDRPTN",14,0)
EN ; EP - Entry Point for any routines comparing names
"RTN","XDRPTN",15,0)
 ;
"RTN","XDRPTN",16,0)
 D INIT1
"RTN","XDRPTN",17,0)
 D COMPARE
"RTN","XDRPTN",18,0)
 D EOJ
"RTN","XDRPTN",19,0)
 Q
"RTN","XDRPTN",20,0)
 ;
"RTN","XDRPTN",21,0)
INIT ;
"RTN","XDRPTN",22,0)
 D EOJ
"RTN","XDRPTN",23,0)
 S XDRDN("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTN",24,0)
 S XDRDN("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTN",25,0)
 S XDRDN=XDRCD(XDRFL,XDRCD,.01,"I"),XDRDN2=XDRCD2(XDRFL,XDRCD2,.01,"I")
"RTN","XDRPTN",26,0)
 ;
"RTN","XDRPTN",27,0)
INIT1 S XDRDN=$$CHKNAM(XDRDN),XDRDN2=$$CHKNAM(XDRDN2)
"RTN","XDRPTN",28,0)
 S XDRDNL=$P(XDRDN,","),XDRDNF=$P($P(XDRDN,",",2)," "),XDRDNFI=$E(XDRDNF),XDRDNM=$P($P(XDRDN,",",2)," ",2),XDRDNMI=$E(XDRDNM)
"RTN","XDRPTN",29,0)
 ;
"RTN","XDRPTN",30,0)
INIT2 S XDRDNL2=$P(XDRDN2,","),XDRDNF2=$P($P(XDRDN2,",",2)," "),XDRDNFI2=$E(XDRDNF2),XDRDNM2=$P($P(XDRDN2,",",2)," ",2),XDRDNMI2=$E(XDRDNM2)
"RTN","XDRPTN",31,0)
 Q
"RTN","XDRPTN",32,0)
 ;
"RTN","XDRPTN",33,0)
NAME ;
"RTN","XDRPTN",34,0)
 D COMPARE
"RTN","XDRPTN",35,0)
 D:$O(^DPT(XDRCD2,.01,0)) OTHER2
"RTN","XDRPTN",36,0)
 Q
"RTN","XDRPTN",37,0)
 ;
"RTN","XDRPTN",38,0)
OTHER ;
"RTN","XDRPTN",39,0)
 F XDRDNO=0:0 S XDRDNO=$O(^DPT(XDRCD,.01,XDRDNO)) Q:'XDRDNO  S XDRDN=$P(^DPT(XDRCD,.01,XDRDNO,0),U,1) S:'$D(XDRDN2) XDRDN2=XDRCD2(XDRFL,XDRCD2,.01,"I") D INIT1,NAME
"RTN","XDRPTN",40,0)
 Q
"RTN","XDRPTN",41,0)
 ;
"RTN","XDRPTN",42,0)
OTHER2 ;
"RTN","XDRPTN",43,0)
 F XDRDNO2=0:0 S XDRDNO2=$O(^DPT(XDRCD2,.01,XDRDNO2)) Q:'XDRDNO2  S XDRDN2=$P(^DPT(XDRCD2,.01,XDRDNO2,0),U,1) D INIT2,COMPARE
"RTN","XDRPTN",44,0)
 Q
"RTN","XDRPTN",45,0)
 ;
"RTN","XDRPTN",46,0)
COMPARE ;
"RTN","XDRPTN",47,0)
 S:'$D(XDRDN("TEST SCORE")) XDRDN("TEST SCORE")=XDRDN("NO MATCH")
"RTN","XDRPTN",48,0)
 I XDRDN=XDRDN2 S XDRDN("TEST SCORE2")=XDRDN("MATCH") G COMPAREX
"RTN","XDRPTN",49,0)
 I XDRDNF=XDRDNF2,XDRDNL=XDRDNL2 S XDRDN("TEST SCORE2")=XDRDN("MATCH")*.8 G COMPAREX
"RTN","XDRPTN",50,0)
 S X=XDRDNL D SOU^DICM1 S XDRDNLS=X S X=XDRDNL2 D SOU^DICM1 S XDRDNL2S=X
"RTN","XDRPTN",51,0)
 S X=XDRDNF D SOU^DICM1 S XDRDNFS=X S X=XDRDNF2 D SOU^DICM1 S XDRDNF2S=X
"RTN","XDRPTN",52,0)
 I XDRDNLS=XDRDNL2S,XDRDNFS=XDRDNF2S S XDRDN("TEST SCORE2")=XDRDN("MATCH")*.6 G COMPAREX
"RTN","XDRPTN",53,0)
 I XDRDNFI=XDRDNFI2,XDRDNL=XDRDNL2 S XDRDN("TEST SCORE2")=XDRDN("MATCH")*.5 G COMPAREX ; CHANGED FROM .6 TO .5 04/15/96 JLI
"RTN","XDRPTN",54,0)
 I XDRDNL=XDRDNL2 S XDRDN("TEST SCORE2")=XDRDN("MATCH")*.4 G COMPAREX
"RTN","XDRPTN",55,0)
 I XDRDNFS=XDRDNF2S S XDRDN("TEST SCORE2")=XDRDN("MATCH")*.2 G COMPAREX
"RTN","XDRPTN",56,0)
 S XDRDN("TEST SCORE2")=XDRDN("NO MATCH")
"RTN","XDRPTN",57,0)
COMPAREX ;
"RTN","XDRPTN",58,0)
 S:XDRDN("TEST SCORE2")>(XDRDN("TEST SCORE")) XDRDN("TEST SCORE")=XDRDN("TEST SCORE2")
"RTN","XDRPTN",59,0)
 K X,XDRDNLS,XDRDNL2S,XDRDNFS,XDRDNF2S,XDRDN("TEST SCORE2")
"RTN","XDRPTN",60,0)
 Q
"RTN","XDRPTN",61,0)
 ;
"RTN","XDRPTN",62,0)
CHKNAM(NAME) ;
"RTN","XDRPTN",63,0)
 N X,XXX,YYY
"RTN","XDRPTN",64,0)
 S NAME=$$UP^XLFSTR(NAME)
"RTN","XDRPTN",65,0)
 I $E(NAME,1,2)="ZZ" D
"RTN","XDRPTN",66,0)
 . F  Q:$E(NAME,1)'="Z"  S NAME=$E(NAME,2,$L(NAME)) ;S NAME=$E(NAME,3,$L(NAME)) -- MODIFIED 11/06/97 JLI
"RTN","XDRPTN",67,0)
 S NAME=$$NOSPAC(NAME)
"RTN","XDRPTN",68,0)
 I $E(NAME,$L(NAME))="." S NAME=$E(NAME,1,$L(NAME)-1)
"RTN","XDRPTN",69,0)
 S X=$$NOSPAC($P(NAME,",",2))
"RTN","XDRPTN",70,0)
 I X'="",",JR,SR,II,III,3RD,"[(","_X_",") S NAME=$P(NAME,",")
"RTN","XDRPTN",71,0)
 I NAME'="",NAME'["," D
"RTN","XDRPTN",72,0)
 . I $L(NAME," ")=1 Q
"RTN","XDRPTN",73,0)
LOOP . S X=$P(NAME," ",$L(NAME," ")),NAME=$P(NAME," ",1,$L(NAME," ")-1)
"RTN","XDRPTN",74,0)
 . I ",JR,SR,II,III,3RD,"[(","_X_",") G LOOP
"RTN","XDRPTN",75,0)
 . I NAME'="" S NAME=X_","_NAME
"RTN","XDRPTN",76,0)
 Q NAME
"RTN","XDRPTN",77,0)
 ;
"RTN","XDRPTN",78,0)
NOSPAC(X) ;
"RTN","XDRPTN",79,0)
 F  Q:X=""  Q:$E(X)'=" "  S X=$E(X,2,$L(X))
"RTN","XDRPTN",80,0)
 Q X
"RTN","XDRPTN",81,0)
 ;
"RTN","XDRPTN",82,0)
EOJ ;
"RTN","XDRPTN",83,0)
 S:$D(XDRDN("TEST SCORE")) XDRD("TEST SCORE")=XDRDN("TEST SCORE")
"RTN","XDRPTN",84,0)
 K XDRDN,XDRDN2,XDRDNF,XDRDNF2,XDRDNL,XDRDNL2,XDRDNM,XDRDNM2
"RTN","XDRPTN",85,0)
 K XDRDNMI,XDRDNMI2,XDRDNFI,XDRDNFI2,XDRDNO,XDRDNO2
"RTN","XDRPTN",86,0)
 Q
"RTN","XDRPTSSN")
0^53^B7111734
"RTN","XDRPTSSN",1,0)
XDRPTSSN ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES SSN'S; ;1/27/97  15:20
"RTN","XDRPTSSN",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTSSN",3,0)
 ;;
"RTN","XDRPTSSN",4,0)
 ;
"RTN","XDRPTSSN",5,0)
START ;
"RTN","XDRPTSSN",6,0)
 I XDRCD(XDRFL,XDRCD,.09,"I")']""!(XDRCD2(XDRFL,XDRCD2,.09,"I")']"") G END
"RTN","XDRPTSSN",7,0)
 D INIT
"RTN","XDRPTSSN",8,0)
 D COMPARE
"RTN","XDRPTSSN",9,0)
END D EOJ
"RTN","XDRPTSSN",10,0)
 Q
"RTN","XDRPTSSN",11,0)
 ;
"RTN","XDRPTSSN",12,0)
INIT ;
"RTN","XDRPTSSN",13,0)
 D EOJ
"RTN","XDRPTSSN",14,0)
 S XDRDSSN("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTSSN",15,0)
 S XDRDSSN("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTSSN",16,0)
 S XDRDSN=XDRCD(XDRFL,XDRCD,.09,"I")
"RTN","XDRPTSSN",17,0)
 I XDRDSN'?9N.E S XDRDSN="",^XTMP("XDRERR","BADSSN",XDRCD)=""
"RTN","XDRPTSSN",18,0)
 S XDRDSN2=XDRCD2(XDRFL,XDRCD2,.09,"I")
"RTN","XDRPTSSN",19,0)
 I XDRDSN2'?9N.E S XDRDSN="",^XTMP("XDRERR","BADSSN",XDRCD2)=""
"RTN","XDRPTSSN",20,0)
 S XDRDSNF=$E(XDRDSN,1,3),XDRDSN2F=$E(XDRDSN2,1,3)
"RTN","XDRPTSSN",21,0)
 S XDRDSNS=$E(XDRDSN,4,5),XDRDSN2S=$E(XDRDSN2,4,5)
"RTN","XDRPTSSN",22,0)
 S XDRDSNT=$E(XDRDSN,6,9),XDRDSN2T=$E(XDRDSN2,6,9)
"RTN","XDRPTSSN",23,0)
 Q
"RTN","XDRPTSSN",24,0)
 ;
"RTN","XDRPTSSN",25,0)
COMPARE ;
"RTN","XDRPTSSN",26,0)
 I XDRDSN=""!(XDRDSN2="") G COMPAREX
"RTN","XDRPTSSN",27,0)
 ; SKIP SSN'S IF THEY ARE PSEUDOS
"RTN","XDRPTSSN",28,0)
 I $E(XDRDSN,10)="P"!($E(XDRDSN2,10)="P") G COMPAREX
"RTN","XDRPTSSN",29,0)
 ; SKIP SSN'S IF THEY ARE NOT REAL (I.E., 00000NNNN)
"RTN","XDRPTSSN",30,0)
 I $E(XDRDSN,1,5)="00000"!($E(XDRDSN2,1,5)="00000") G COMPAREX
"RTN","XDRPTSSN",31,0)
 ; ADDED LOGIC TO DETERMINE IF ONLY ONE DIGIT IS CHANGED, OR TWO
"RTN","XDRPTSSN",32,0)
 ; DIGITS SWITCHED
"RTN","XDRPTSSN",33,0)
 ;   THIS IS ASSIGNED THE MAXIMUM MATCH VALUE, AND LAST 4, ETC LESS.
"RTN","XDRPTSSN",34,0)
 ;
"RTN","XDRPTSSN",35,0)
 N N
"RTN","XDRPTSSN",36,0)
 S N=$$NUMCOMP^XDRPTCLN(XDRDSN,XDRDSN2,XDRDSSN("MATCH"),XDRDSSN("NO MATCH"),1) I N=XDRDSSN("MATCH") S XDRD("TEST SCORE")=XDRDSSN("MATCH") G COMPAREX
"RTN","XDRPTSSN",37,0)
 ;CHECK TO SEE IF LAST FOUR MATCH OR TWO OF THREE PARTS MATCH
"RTN","XDRPTSSN",38,0)
 I XDRDSNT=XDRDSN2T D  G COMPAREX
"RTN","XDRPTSSN",39,0)
 . S XDRD("TEST SCORE")=.6*XDRDSSN("MATCH")
"RTN","XDRPTSSN",40,0)
 . I $E($P(^DPT(XDRCD,0),U))=$E($P(^DPT(XDRCD2,0),U)) D
"RTN","XDRPTSSN",41,0)
 . . S XDRD("TEST SCORE")=.8*XDRDSSN("MATCH")
"RTN","XDRPTSSN",42,0)
 S XDRDSSN("CNT")=0
"RTN","XDRPTSSN",43,0)
 I XDRDSNF=XDRDSN2F S XDRDSSN("CNT")=XDRDSSN("CNT")+1
"RTN","XDRPTSSN",44,0)
 I XDRDSNS=XDRDSN2S S XDRDSSN("CNT")=XDRDSSN("CNT")+1
"RTN","XDRPTSSN",45,0)
 I XDRDSSN("CNT")>1 S XDRD("TEST SCORE")=XDRDSSN("MATCH")*.4 K XDRDSSN("CNT") G COMPAREX
"RTN","XDRPTSSN",46,0)
 ;
"RTN","XDRPTSSN",47,0)
 ;CHECK POSITIONAL RELATIONSHIP OF LAST FOUR DIGITS OF SSN'S
"RTN","XDRPTSSN",48,0)
 S XDRDSSN("PCNT")=0
"RTN","XDRPTSSN",49,0)
 F XDRDSSN("I")=1:1:4 Q:(XDRDSSN("PCNT")>2)  I $E(XDRDSNT,XDRDSSN("I"))'=$E(XDRDSN2T,XDRDSSN("I")) S XDRDSSN("PCNT")=XDRDSSN("PCNT")+1
"RTN","XDRPTSSN",50,0)
 I XDRDSSN("PCNT")'>2,XDRDSSN("CNT")>0 S XDRD("TEST SCORE")=XDRDSSN("MATCH")*.2 G COMPAREX
"RTN","XDRPTSSN",51,0)
 ;
"RTN","XDRPTSSN",52,0)
 ;ASSIGN NEGATIVE VALUE FOR NO SSN MATCH
"RTN","XDRPTSSN",53,0)
 S XDRD("TEST SCORE")=XDRDSSN("NO MATCH")
"RTN","XDRPTSSN",54,0)
COMPAREX ;
"RTN","XDRPTSSN",55,0)
 Q
"RTN","XDRPTSSN",56,0)
 ;
"RTN","XDRPTSSN",57,0)
EOJ ;
"RTN","XDRPTSSN",58,0)
 K XDRDSN,XDRDSN2,XDRDSNF,XDRDSN2F,XDRDSNS,XDRDSN2S,XDRDSNT,XDRDSN2T
"RTN","XDRPTSSN",59,0)
 K XDRDSSN
"RTN","XDRPTSSN",60,0)
 Q
"RTN","XDRPTSX")
0^54^B967390
"RTN","XDRPTSX",1,0)
XDRPTSX ;SF-IRMFO/IHS/OHPRD/JCM;COMPARES THE SEX OF TWO PATIENTS; ;8/28/96  09:26
"RTN","XDRPTSX",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRPTSX",3,0)
 ;;
"RTN","XDRPTSX",4,0)
START ;
"RTN","XDRPTSX",5,0)
 D INIT
"RTN","XDRPTSX",6,0)
 D COMPARE
"RTN","XDRPTSX",7,0)
END D EOJ
"RTN","XDRPTSX",8,0)
 Q
"RTN","XDRPTSX",9,0)
 ;
"RTN","XDRPTSX",10,0)
INIT ;
"RTN","XDRPTSX",11,0)
 D EOJ
"RTN","XDRPTSX",12,0)
 S XDRDSX=XDRCD(XDRFL,XDRCD,.02,"I"),XDRDSX2=XDRCD2(XDRFL,XDRCD2,.02,"I")
"RTN","XDRPTSX",13,0)
 S XDRDSX("MATCH")=$P(XDRDTEST(XDRDTO),U,6)
"RTN","XDRPTSX",14,0)
 S XDRDSX("NO MATCH")=$P(XDRDTEST(XDRDTO),U,7)
"RTN","XDRPTSX",15,0)
 Q
"RTN","XDRPTSX",16,0)
 ;
"RTN","XDRPTSX",17,0)
COMPARE ;
"RTN","XDRPTSX",18,0)
 I XDRDSX']""!(XDRDSX2']"") G COMPAREX
"RTN","XDRPTSX",19,0)
 I XDRDSX=XDRDSX2 S XDRD("TEST SCORE")=XDRDSX("MATCH") G COMPAREX
"RTN","XDRPTSX",20,0)
 S XDRD("TEST SCORE")=XDRDSX("NO MATCH")
"RTN","XDRPTSX",21,0)
COMPAREX Q
"RTN","XDRPTSX",22,0)
 ;
"RTN","XDRPTSX",23,0)
EOJ ;
"RTN","XDRPTSX",24,0)
 K XDRDSX,XDRDSX2
"RTN","XDRPTSX",25,0)
 Q
"RTN","XDRRMRG0")
0^55^B9182782
"RTN","XDRRMRG0",1,0)
XDRRMRG0 ;SF-IRMFO/REM - DUP VERIFICATION FOR ANCILLARY SERVICES ;4/23/98  15:54
"RTN","XDRRMRG0",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRRMRG0",3,0)
 ;;
"RTN","XDRRMRG0",4,0)
EN ;
"RTN","XDRRMRG0",5,0)
 N XDRNAME,XDRY,XQADATA,XDRFILE,DFNFR,DFNTO,XDRNOD2,XDRDA,X,Y,XDRAID,ZXQAID
"RTN","XDRRMRG0",6,0)
 K DIC S DIC="^VA(15.1,2,2,",DIC("S")="I $$SCRN2^XDRRMRG0(+Y)"
"RTN","XDRRMRG0",7,0)
 S DIC(0)="AEQZ" D ^DIC K DIC Q:+Y'>0
"RTN","XDRRMRG0",8,0)
 S XDRNAME=Y(0,0),XDRFILE=$P(Y(0),U,3),XDRAID=+Y
"RTN","XDRRMRG0",9,0)
 K DIC S DIC("S")="I $$SCRN^XDRRMRG0(XDRNAME,+Y)",DIC("A")="Select a POTENTIAL DUPLICATE ENTRY: "
"RTN","XDRRMRG0",10,0)
 S DIC=15,DIC(0)="AEQZ" D ^DIC K DIC S XDRY=+Y Q:XDRY'>0 
"RTN","XDRRMRG0",11,0)
 G:$$CHKSTAT(XDRY,XDRNAME) END
"RTN","XDRRMRG0",12,0)
 S X=^VA(15,XDRY,0)
"RTN","XDRRMRG0",13,0)
 I $P($G(^VA(15,XDRY,2,1,0)),U,5)=2 S DFNTO=+X,DFNFR=+$P(X,U,2)
"RTN","XDRRMRG0",14,0)
 E  S DFNFR=+X,DFNTO=+$P(X,U,2)
"RTN","XDRRMRG0",15,0)
 S XDRDA=$O(^VA(15.1,2,2,"B",XDRNAME,0)) Q:XDRDA'>0
"RTN","XDRRMRG0",16,0)
 S XDRNOD2=$G(^VA(15.1,2,2,XDRDA,2))
"RTN","XDRRMRG0",17,0)
 S XQADATA=XDRY_U_DFNFR_";"_DFNTO_U_XDRNAME_U_XDRFILE_U_$P(XDRNOD2,U)_U_$P(XDRNOD2,U,2)
"RTN","XDRRMRG0",18,0)
 S (XQAID,ZXQAID)="XDR,"_DFNFR_"/"_DFNTO_","_XDRAID
"RTN","XDRRMRG0",19,0)
 D ^XDRRMRG1
"RTN","XDRRMRG0",20,0)
 I XDRY="V" S XQAID=ZXQAID D DELETEA^XQALERT
"RTN","XDRRMRG0",21,0)
END W ! K DIR S DIR(0)="Y",DIR("A")="Do you want to process another",DIR("B")="YES"
"RTN","XDRRMRG0",22,0)
 ;S DIR("?")="  Enter 'Y' to proceed, 'N' or '^' to stop." 
"RTN","XDRRMRG0",23,0)
 D ^DIR K DIR
"RTN","XDRRMRG0",24,0)
 G:Y EN Q:$D(DIRUT)
"RTN","XDRRMRG0",25,0)
 Q
"RTN","XDRRMRG0",26,0)
 ;
"RTN","XDRRMRG0",27,0)
CHKSTAT(DA,NAME) ;Check ancillary Service Determination fld.
"RTN","XDRRMRG0",28,0)
 N X
"RTN","XDRRMRG0",29,0)
 S X=$O(@("^VA(15,"_DA_",2,""B"","_""""_NAME_""""_",0)")) I X'>0 Q 0
"RTN","XDRRMRG0",30,0)
 I $$GET1^DIQ(15.02,X_","_DA_",",.02,"I")="V" D  Q 1
"RTN","XDRRMRG0",31,0)
 .W !!,*7,"  This pair has already been processed as VERIFIED, DUPLICATE by your service!",!
"RTN","XDRRMRG0",32,0)
 Q 0
"RTN","XDRRMRG0",33,0)
 ;
"RTN","XDRRMRG0",34,0)
SCRN(NAME,DA) ;Screen ancillary service with no data.
"RTN","XDRRMRG0",35,0)
 N IEN
"RTN","XDRRMRG0",36,0)
 I $P(^(0),U,3)'="X"&($P(^(0),U,3)'="R") Q 0 ; NAKED GLOBAL FROM FILEMAN DIC CALL
"RTN","XDRRMRG0",37,0)
 S IEN=$O(^(2,"B",NAME,0)) Q:IEN'>0 1
"RTN","XDRRMRG0",38,0)
 I $P(^VA(15,DA,2,IEN,0),U,2)="D" Q 0
"RTN","XDRRMRG0",39,0)
 Q 1
"RTN","XDRRMRG0",40,0)
 ;
"RTN","XDRRMRG0",41,0)
SCRN2(DA2) ;Check if user part of ancillary service mailgrp.
"RTN","XDRRMRG0",42,0)
 N XDRGRP,X,XDRFLG
"RTN","XDRRMRG0",43,0)
 S XDRFLG=0
"RTN","XDRRMRG0",44,0)
 S XDRGRP=$P(^(0),U,2) I XDRGRP="" Q XDRFLG
"RTN","XDRRMRG0",45,0)
 S X=0 F  S X=$O(^XMB(3.8,XDRGRP,1,X)) Q:X'>0!(XDRFLG)  D
"RTN","XDRRMRG0",46,0)
 . I +$G(^XMB(3.8,XDRGRP,1,X,0))=DUZ S XDRFLG=1
"RTN","XDRRMRG0",47,0)
 Q XDRFLG
"RTN","XDRRMRG0",48,0)
 ;
"RTN","XDRRMRG0",49,0)
SEND ;REM - 9/9/96 using mail msgs instead of alerts.
"RTN","XDRRMRG0",50,0)
 I '$D(XDRGL) S XDRGL="^DPT(" ;*Take out after alpha.
"RTN","XDRRMRG0",51,0)
 S XQAID="XDR,"_DFNFR_"/"_DFNTO_","_XDRAID
"RTN","XDRRMRG0",52,0)
 S XQAROU="XDRRMRG1"
"RTN","XDRRMRG0",53,0)
 S (XMSUB,XQAMSG)=XDRNAME_" possible duplicates: "_$P(@(XDRGL_DFNFR_",0)"),U)_" AND "_$P(@(XDRGL_DFNTO_",0)"),U)
"RTN","XDRRMRG0",54,0)
 D SETUP^XQALERT
"RTN","XDRRMRG0",55,0)
 S XMDUZ=.5,XMCHAN=1 D:XDRGRP'="" ^XMD
"RTN","XDRRMRG0",56,0)
 Q
"RTN","XDRRMRG0",57,0)
 ;
"RTN","XDRRMRG0",58,0)
SETARY ;REM - 9/9/96 Sets the R array for the text of the mail msg.
"RTN","XDRRMRG0",59,0)
 N SSNFR,SSNTO
"RTN","XDRRMRG0",60,0)
 I '$D(XDRGL) S XDRGL="^DPT(" ;*Take out after alpha.
"RTN","XDRRMRG0",61,0)
 S SSNFR=$$GET1^DIQ(2,DFNFR,.09)
"RTN","XDRRMRG0",62,0)
 S SSNTO=$$GET1^DIQ(2,DFNTO,.09)
"RTN","XDRRMRG0",63,0)
 S R(1,0)="FROM Record              "_SSNFR_"  "_$P(@(XDRGL_DFNFR_",0)"),U)_"  [#"_DFNFR_"]"
"RTN","XDRRMRG0",64,0)
 S R(2,0)="INTO Record              "_SSNTO_"  "_$P(@(XDRGL_DFNTO_",0)"),U)_"  [#"_DFNTO_"]"
"RTN","XDRRMRG0",65,0)
 S R(2.1,0)=""
"RTN","XDRRMRG0",66,0)
 S R(2.2,0)="Ancillary service name:  "_XDRNAME
"RTN","XDRRMRG0",67,0)
 Q
"RTN","XDRRMRG1")
0^56^B84128265
"RTN","XDRRMRG1",1,0)
XDRRMRG1 ;SF-IRMFO.SEA/JLI - DUP VERIFICATION FOR ANCILLARY SERVICES ;3/9/98  13:49
"RTN","XDRRMRG1",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRRMRG1",3,0)
 ;
"RTN","XDRRMRG1",4,0)
EN ;
"RTN","XDRRMRG1",5,0)
 I '$D(XQADATA) Q
"RTN","XDRRMRG1",6,0)
 N OVERWRIT,XDRDA,DFNFR,DFNTO,DFNFRX,DFNTOX,REVIEW,XDRGL
"RTN","XDRRMRG1",7,0)
 S REVIEW=0
"RTN","XDRRMRG1",8,0)
 S XDRGL=$P($P($G(^VA(15,+XQADATA,0)),U),";",2) Q:XDRGL=""  S XDRGL=U_XDRGL
"RTN","XDRRMRG1",9,0)
 S XDRDA=$P(XQADATA,U)
"RTN","XDRRMRG1",10,0)
 S DFNFR=$P(XQADATA,U,2)
"RTN","XDRRMRG1",11,0)
 S (DFNTOX,DFNTO)=$P(DFNFR,";",2)
"RTN","XDRRMRG1",12,0)
 S (DFNFRX,DFNFR)=$P(DFNFR,";")
"RTN","XDRRMRG1",13,0)
 S PACKAGE=$P(XQADATA,U,3)
"RTN","XDRRMRG1",14,0)
 S SUBFILES=$P(XQADATA,U,5)
"RTN","XDRRMRG1",15,0)
 S SUBNAMES=$P(XQADATA,U,6)
"RTN","XDRRMRG1",16,0)
 S XDRFILE=$P(XQADATA,U,4)
"RTN","XDRRMRG1",17,0)
 S FILEDIC=^DIC(XDRFILE,0,"GL")_"DFN)"
"RTN","XDRRMRG1",18,0)
 I XDRGL="^DPT(" D
"RTN","XDRRMRG1",19,0)
 . S DFN=DFNFR D ^VADPT M DFNFR=VADM K VA,VADM
"RTN","XDRRMRG1",20,0)
 . S DFN=DFNTO D ^VADPT M DFNTO=VADM K VA,VADM
"RTN","XDRRMRG1",21,0)
 I XDRFILE=63 D
"RTN","XDRRMRG1",22,0)
 . S DFNFR=$G(^DPT(DFNFR,"LR"))
"RTN","XDRRMRG1",23,0)
 . S DFNTO=$G(^DPT(DFNTO,"LR"))
"RTN","XDRRMRG1",24,0)
 I DFNFR'>0!(DFNTO'>0) W !,$C(7),"NO DATA TO REVIEW....",!! Q
"RTN","XDRRMRG1",25,0)
LDATE F XDRI=1,2 S DFN=$S(XDRI=1:DFNFR,1:DFNTO) S DFNNAM=$S(XDRI=1:"DFNFR",1:"DFNTO") D
"RTN","XDRRMRG1",26,0)
 . S I=5 F  S I=$O(@DFNNAM@(I)) Q:I=""  K @DFNNAM@(I)
"RTN","XDRRMRG1",27,0)
 . F ISUBS=1:1 S SUBSCR=$P(SUBFILES,";",ISUBS) Q:SUBSCR=""  D
"RTN","XDRRMRG1",28,0)
 . . S XX=$G(^DD(XDRFILE,SUBSCR,0))
"RTN","XDRRMRG1",29,0)
 . . I $P(XX,U,2)'["D" Q
"RTN","XDRRMRG1",30,0)
 . . I $P($P(XX,U,4),";",2)'=0 Q
"RTN","XDRRMRG1",31,0)
 . . S SUBSCR=$P($P(XX,U,4),";")
"RTN","XDRRMRG1",32,0)
 . . N XDAT1 S XDAT1=0
"RTN","XDRRMRG1",33,0)
 . . I DFN>0 F I=0:0 S I=$O(@FILEDIC@(SUBSCR,I)) Q:I'>0  D
"RTN","XDRRMRG1",34,0)
 . . . S X=$P($G(@FILEDIC@(SUBSCR,I,0)),U)
"RTN","XDRRMRG1",35,0)
 . . . I X<DT,X>XDAT1 S XDAT1=X
"RTN","XDRRMRG1",36,0)
 . . S LASTNAM="LAST "_$P(SUBNAMES,";",ISUBS)
"RTN","XDRRMRG1",37,0)
 . . S @DFNNAM@(LASTNAM)=""
"RTN","XDRRMRG1",38,0)
 . . I XDAT1>0 S @DFNNAM@(LASTNAM)=$$FMTE^XLFDT(XDAT1\1)
"RTN","XDRRMRG1",39,0)
 . I @DFNNAM'="",'$D(@FILEDIC) S @DFNNAM=""
"RTN","XDRRMRG1",40,0)
 D SHOW
"RTN","XDRRMRG1",41,0)
 S:XDRFILE'=63 DFNFR=DFNFRX,DFNTO=DFNTOX ;REM - LAB is handled differently
"RTN","XDRRMRG1",42,0)
 I IOST'["C-" Q
"RTN","XDRRMRG1",43,0)
 D CHK
"RTN","XDRRMRG1",44,0)
 Q
"RTN","XDRRMRG1",45,0)
 ;
"RTN","XDRRMRG1",46,0)
SHOW ;
"RTN","XDRRMRG1",47,0)
 N NAMIEN1,NAMIEN2
"RTN","XDRRMRG1",48,0)
 S N1=$$COUNT^XDRRMRG2(XDRFILE,DFNFRX,DFNTOX)
"RTN","XDRRMRG1",49,0)
 W @IOF I N1>0,PACKAGE="PRIMARY" W !!,"         RECORD"_N1_" contains fewer data elements, usually this would indicate",!,"                 that this record would be merged INTO the other.",!!
"RTN","XDRRMRG1",50,0)
 S LABEL(1)="NAME",LABEL(2)="SSN",LABEL(3)="BIRTH DATE"
"RTN","XDRRMRG1",51,0)
 S LABEL(4)="AGE",LABEL(5)="SEX",LABEL("LASTDAT")="LAST DATE"
"RTN","XDRRMRG1",52,0)
 W !!,"Determine if these entries ARE or ARE NOT duplicates."
"RTN","XDRRMRG1",53,0)
 W !!!
"RTN","XDRRMRG1",54,0)
 ;REM - Modified next three lines to include IENs by patient name.
"RTN","XDRRMRG1",55,0)
 I XDRFILE=63 S NAMIEN1=$$LABIEN^XDRRMRG2(XDRFILE,DFNFR),NAMIEN2=$$LABIEN^XDRRMRG2(XDRFILE,DFNTO)
"RTN","XDRRMRG1",56,0)
 W !,?20,$S(PACKAGE="PRIMARY":"RECORD1 [#"_DFNFR_"]",PACKAGE="LABORATORY":"MERGE FROM [#"_NAMIEN1_"]",1:"MERGE FROM [#"_DFNFR_"]")
"RTN","XDRRMRG1",57,0)
 W ?45,$S(PACKAGE="PRIMARY":"RECORD2 [#"_DFNTO_"]",PACKAGE="LABORATORY":"MERGE TO [#"_NAMIEN2_"]",1:"MERGE TO [#"_DFNTO_"]")
"RTN","XDRRMRG1",58,0)
 S I="" F  S I=$O(DFNFR(I)) Q:I=""  D
"RTN","XDRRMRG1",59,0)
 . I DFNFR(I)=""&(DFNTO(I)="") Q
"RTN","XDRRMRG1",60,0)
 . S DFNFR(I)=$S($P(DFNFR(I),U,2)'="":$P(DFNFR(I),U,2),1:$P(DFNFR(I),U))
"RTN","XDRRMRG1",61,0)
 . S DFNTO(I)=$S($P(DFNTO(I),U,2)'="":$P(DFNTO(I),U,2),1:$P(DFNTO(I),U))
"RTN","XDRRMRG1",62,0)
 . W !,$S($D(LABEL(I)):LABEL(I),1:I),?20,$E(DFNFR(I),1,20),?45,$E(DFNTO(I),1,20)
"RTN","XDRRMRG1",63,0)
 . I I=1!(I=5) W !
"RTN","XDRRMRG1",64,0)
 I DFNFR=""!(DFNTO="") D
"RTN","XDRRMRG1",65,0)
 . I DFNFR=""&(DFNTO="") W !!,"There is NO DATA in the "_PACKAGE_" file for either entry." Q
"RTN","XDRRMRG1",66,0)
 . I DFNFR="" W !!,"There is NO DATA in the "_PACKAGE_" file for (",DFNFRX,")  ",DFNFR(1),"   ",DFNFR(2)
"RTN","XDRRMRG1",67,0)
 . I DFNTO="" W !!,"There is NO DATA in the "_PACKAGE_" file for (",DFNTOX,")  ",DFNTO(1),"   ",DFNTO(2)
"RTN","XDRRMRG1",68,0)
 S DIR(0)="E" D ^DIR K DIR Q:$D(DIRUT)
"RTN","XDRRMRG1",69,0)
 I DFNFR=""!(DFNTO="") Q
"RTN","XDRRMRG1",70,0)
 ;S DIT(1)=DFNFR,DIT(2)=DFNTO,IOP=IO(0),DFF=XDRFILE,DIC=XDRFILE
"RTN","XDRRMRG1",71,0)
 D SHOW^XDRDSHOW(XDRFILE,DFNFR,DFNTO,.OVERWRIT,REVIEW) ;D EN^DITC K IOP
"RTN","XDRRMRG1",72,0)
 Q
"RTN","XDRRMRG1",73,0)
 ;
"RTN","XDRRMRG1",74,0)
CHK ;
"RTN","XDRRMRG1",75,0)
 N DIR
"RTN","XDRRMRG1",76,0)
CHK1 K DIR
"RTN","XDRRMRG1",77,0)
 S DIR(0)="S^V:VERIFIED DUPLICATE;N:VERIFIED, NOT A DUPLICATE;U:UNABLE TO DETERMINE;H:HEALTH SUMMARY;R:REVIEW DATA AGAIN;S:SELECT/REVIEW OVERWRITES",DIR("A")="Select Action",DIR("B")="HEALTH SUMMARY"
"RTN","XDRRMRG1",78,0)
 D ^DIR K DIR S XDRY=Y I $D(DIRUT) K XQAKILL Q
"RTN","XDRRMRG1",79,0)
 I XDRY="R" S REVIEW=0 D SHOW G CHK1
"RTN","XDRRMRG1",80,0)
 I XDRY="S" S REVIEW=1 D SHOW G CHK1
"RTN","XDRRMRG1",81,0)
 I XDRY'="H" D  Q
"RTN","XDRRMRG1",82,0)
 . K XQAKILL
"RTN","XDRRMRG1",83,0)
 . I XDRY'="^" D
"RTN","XDRRMRG1",84,0)
 . . S XQAKILL=$S(XDRY'="U":0,1:1)
"RTN","XDRRMRG1",85,0)
 . . S XDRDIR=""
"RTN","XDRRMRG1",86,0)
 . . I XDRY="V",PACKAGE="PRIMARY" D
"RTN","XDRRMRG1",87,0)
 . . . S DIR=0 F DFN=DFNFRX,DFNTOX I $D(@FILEDIC) S DIR=DIR+1
"RTN","XDRRMRG1",88,0)
 . . . I DIR'>1 K DIR Q  ; DON'T NEED TO SELECT DIRECTION UNLESS DATA IN BOTH ENTRIES
"RTN","XDRRMRG1",89,0)
 . . . S DIR("B")=$$COUNT^XDRRMRG2(XDRFILE,DFNFRX,DFNTOX)
"RTN","XDRRMRG1",90,0)
 . . . S DIR("B")=$S(DIR("B")'>1:"RECORD1 INTO RECORD2",1:"RECORD2 INTO RECORD1")
"RTN","XDRRMRG1",91,0)
 . . . I DIR("B")=0 K DIR("B")
"RTN","XDRRMRG1",92,0)
 . . . S DIR(0)="S^1:RECORD1 INTO RECORD2;2:RECORD2 INTO RECORD1"
"RTN","XDRRMRG1",93,0)
 . . . W !!!,?20,"RECORD1 [#"_DFNFR_"]",?45,"RECORD2 [#"_DFNTO_"]"
"RTN","XDRRMRG1",94,0)
 . . . W !,?20,DFNFR(1),?45,DFNTO(1)
"RTN","XDRRMRG1",95,0)
 . . . S DIR("A")="Which record (1 or 2) should be MERGED INTO the other record"
"RTN","XDRRMRG1",96,0)
 . . . D ^DIR K DIR I Y>0 S XDRDIR=+Y
"RTN","XDRRMRG1",97,0)
 . . . I $D(DIRUT) S XDRY="^" W !!!,$C(7),"VERIFICATION ABORTED!",! Q
"RTN","XDRRMRG1",98,0)
 . . . I DFNFRX'=+^VA(15,XDRDA,0) S XDRDIR=$S(XDRDIR'>0:2,XDRDIR=1:2,1:1)
"RTN","XDRRMRG1",99,0)
 . . N XDRFDA,XDRDA1
"RTN","XDRRMRG1",100,0)
 . . S XDRDA1=$$FIND1^DIC(15.02,","_XDRDA_",","X",PACKAGE)
"RTN","XDRRMRG1",101,0)
 . . S XDRDA1=$S(XDRDA1>0:XDRDA1_",",1:"+1,")_XDRDA_","
"RTN","XDRRMRG1",102,0)
 . . S XDRFDA(15.02,XDRDA1,.01)=PACKAGE
"RTN","XDRRMRG1",103,0)
 . . S XDRFDA(15.02,XDRDA1,.02)=XDRY
"RTN","XDRRMRG1",104,0)
 . . S XDRFDA(15.02,XDRDA1,.03)=DUZ
"RTN","XDRRMRG1",105,0)
 . . S XDRFDA(15.02,XDRDA1,.04)=$$NOW^XLFDT()
"RTN","XDRRMRG1",106,0)
 . . I XDRDIR'="" S XDRFDA(15.02,XDRDA1,.05)=XDRDIR
"RTN","XDRRMRG1",107,0)
 . . D UPDATE^DIE("S","XDRFDA")
"RTN","XDRRMRG1",108,0)
 . . ;
"RTN","XDRRMRG1",109,0)
 . . I $D(OVERWRIT)!(XDRDIR=2&(PACKAGE'="PRIMARY")) D
"RTN","XDRRMRG1",110,0)
 . . . N I
"RTN","XDRRMRG1",111,0)
 . . . S XDRDA1=$$FIND1^DIC(15.03,","_XDRDA_",","X",XDRFILE)
"RTN","XDRRMRG1",112,0)
 . . . I XDRDA1'>0 D
"RTN","XDRRMRG1",113,0)
 . . . . S XDRDA1="+1,"_XDRDA_","
"RTN","XDRRMRG1",114,0)
 . . . . K XDRFDA,XDRDAX
"RTN","XDRRMRG1",115,0)
 . . . . S XDRDAX(1)=XDRFILE
"RTN","XDRRMRG1",116,0)
 . . . . S XDRFDA(15.03,XDRDA1,.01)=XDRFILE
"RTN","XDRRMRG1",117,0)
 . . . . I XDRDIR=2,PACKAGE'="PRIMARY" D
"RTN","XDRRMRG1",118,0)
 . . . . . S XDRFDA(15.03,XDRDA1,.02)=2
"RTN","XDRRMRG1",119,0)
 . . . . D UPDATE^DIE("S","XDRFDA","XDRDAX")
"RTN","XDRRMRG1",120,0)
 . . . . S XDRDA1=XDRDAX(1)
"RTN","XDRRMRG1",121,0)
 . . . S XDRDA1="+1,"_XDRDA1_","_XDRDA_","
"RTN","XDRRMRG1",122,0)
 . . . F I=0:0 S I=$O(OVERWRIT(I)) Q:I'>0  D
"RTN","XDRRMRG1",123,0)
 . . . . K XDRFDA,XDRDAX
"RTN","XDRRMRG1",124,0)
 . . . . S XDRDAX(1)=I
"RTN","XDRRMRG1",125,0)
 . . . . S XDRFDA(15.031,XDRDA1,.01)=I
"RTN","XDRRMRG1",126,0)
 . . . . D UPDATE^DIE("S","XDRFDA","XDRDAX")
"RTN","XDRRMRG1",127,0)
 . I XDRY="V" D
"RTN","XDRRMRG1",128,0)
 . . D CHEKVER
"RTN","XDRRMRG1",129,0)
 . I XDRY="N" D
"RTN","XDRRMRG1",130,0)
 . . S XDRAID=$G(XQAID) N XQAID,I
"RTN","XDRRMRG1",131,0)
 . . F I=0:0 S I=$O(^VA(15.1,2,2,I)) Q:I'>0  D
"RTN","XDRRMRG1",132,0)
 . . . S XQAID=$P(XDRAID,",",1,2)_","_I
"RTN","XDRRMRG1",133,0)
 . . . S XQAKILL=0
"RTN","XDRRMRG1",134,0)
 . . . D DELETEA^XQALERT
"RTN","XDRRMRG1",135,0)
 . . N XDRFDA
"RTN","XDRRMRG1",136,0)
 . . S XDRFDA(15,XDRDA_",",.03)="N"
"RTN","XDRRMRG1",137,0)
 . . S XDRFDA(15,XDRDA_",",.07)=$$NOW^XLFDT()
"RTN","XDRRMRG1",138,0)
 . . S XDRFDA(15,XDRDA_",",.11)=DUZ
"RTN","XDRRMRG1",139,0)
 . . D UPDATE^DIE("S","XDRFDA")
"RTN","XDRRMRG1",140,0)
 S ABORT=0 D ASK^XDRRMRG2(.QLIST,.ABORT) ;REM -Reset ABORT to 0
"RTN","XDRRMRG1",141,0)
 ;
"RTN","XDRRMRG1",142,0)
 ;For health summary, user has the option of using the Browser to view 
"RTN","XDRRMRG1",143,0)
 ;both records or use may select any other device for each record.
"RTN","XDRRMRG1",144,0)
 ;
"RTN","XDRRMRG1",145,0)
 I '$G(ABORT) D  D PRINT2^XDRRMRG2
"RTN","XDRRMRG1",146,0)
 . Q
"RTN","XDRRMRG1",147,0)
 . N XDRIOP
"RTN","XDRRMRG1",148,0)
 . W ! S DIR(0)="Y",DIR("A",1)="Would you like to use the FM Browser to"
"RTN","XDRRMRG1",149,0)
 . S DIR("A")="view the record pair"
"RTN","XDRRMRG1",150,0)
 . S DIR("B")="YES",DIR("?")="You may use FM Browser to view the record pair else you will be prompted to select a device for each record."
"RTN","XDRRMRG1",151,0)
 . D ^DIR S:Y=1 XDRIOP=1 Q:$D(DIRUT)
"RTN","XDRRMRG1",152,0)
 . K ^TMP("XDRRMRG1",$J),^TMP("XDRRMRG",$J)
"RTN","XDRRMRG1",153,0)
 . ;S IOP="XDRBROWSER1" D ^%ZIS Q:POP  ;Old code, delete after testing
"RTN","XDRRMRG1",154,0)
 . S:$D(XDRIOP) IOP="XDRBROWSER1" S:'$D(XDRIOP) %ZIS="QM"
"RTN","XDRRMRG1",155,0)
 . S %ZIS("A")="DEVICE FOR FIRST RECORD: "
"RTN","XDRRMRG1",156,0)
 . W ! D ^%ZIS Q:POP
"RTN","XDRRMRG1",157,0)
 . I $D(IO("Q"))
"RTN","XDRRMRG1",158,0)
 . U IO(0) W:$D(XDRIOP) "    Getting first entry ",!
"RTN","XDRRMRG1",159,0)
 . D ENX^GMTSDVR(DFNFR,QLIST("TYPE"))
"RTN","XDRRMRG1",160,0)
 . U IO D ^%ZISC
"RTN","XDRRMRG1",161,0)
 . S ^TMP("XDRRMRG",$J,"ENTER <PF1>S  TO VIEW OTHER- "_$E($G(DFNFR(1)),1,30)_"  "_$G(DFNFR(2))_" ("_DFNFR_")")="^TMP(""XDRRMRG1"",$J,1)"
"RTN","XDRRMRG1",162,0)
 . M ^TMP("XDRRMRG1",$J,1)=^TMP("DDB",$J)
"RTN","XDRRMRG1",163,0)
 . ;S IOP="XDRBROWSER1" D ^%ZIS Q:POP  ;old code delete after testing
"RTN","XDRRMRG1",164,0)
 . S:$D(XDRIOP) IOP="XDRBROWSER1" S:'$D(XDRIOP) %ZIS="QM"
"RTN","XDRRMRG1",165,0)
 . S %ZIS("A")="DEVICE FOR SECOND RECORD: "
"RTN","XDRRMRG1",166,0)
 . W ! D ^%ZIS Q:POP
"RTN","XDRRMRG1",167,0)
 . U IO(0) W:$D(XDRIOP) "     Getting second entry ",!
"RTN","XDRRMRG1",168,0)
 . D ENX^GMTSDVR(DFNTO,QLIST("TYPE"))
"RTN","XDRRMRG1",169,0)
 . D ^%ZISC U IO(0)
"RTN","XDRRMRG1",170,0)
 . S ^TMP("XDRRMRG",$J,"ENTER <PF1>S  TO VIEW OTHER- "_$E($G(DFNTO(1)),1,30)_"  "_$G(DFNTO(2))_" ("_DFNTO_")")="^TMP(""XDRRMRG1"",$J,2)"
"RTN","XDRRMRG1",171,0)
 . M ^TMP("XDRRMRG1",$J,2)=^TMP("DDB",$J)
"RTN","XDRRMRG1",172,0)
 . D DOCLIST^DDBR($NA(^TMP("XDRRMRG",$J)),"R")
"RTN","XDRRMRG1",173,0)
 . K ^TMP("XDRRMRG1",$J),^TMP("XDRRMRG",$J)
"RTN","XDRRMRG1",174,0)
 G CHK1
"RTN","XDRRMRG1",175,0)
 Q
"RTN","XDRRMRG1",176,0)
 ;
"RTN","XDRRMRG1",177,0)
CHEKVER ;
"RTN","XDRRMRG1",178,0)
 N R
"RTN","XDRRMRG1",179,0)
 S XVER=1
"RTN","XDRRMRG1",180,0)
 F I=0:0 S I=$O(^VA(15.1,2,2,I)) Q:I'>0  D  Q:'XVER
"RTN","XDRRMRG1",181,0)
 . S X1=+$P(^VA(15.1,2,2,I,0),U,2)
"RTN","XDRRMRG1",182,0)
 . S XN=$P(^VA(15.1,2,2,I,0),U)
"RTN","XDRRMRG1",183,0)
 . I X1>0 D
"RTN","XDRRMRG1",184,0)
 . . F R=1,5,6,7,0 I $O(^XMB(3.8,X1,R,0))>0 Q  ;REM -changed I to R in FOR loop 
"RTN","XDRRMRG1",185,0)
 . . I R'>0 S X1=0
"RTN","XDRRMRG1",186,0)
 . I X1'>0,$O(^VA(15.1,2,2,I,1,0))'>0 Q
"RTN","XDRRMRG1",187,0)
 . S X1=$$FIND1^DIC(15.02,","_XDRDA_",","X",XN)
"RTN","XDRRMRG1",188,0)
 . S XVER=$S(X1'>0:0,$P(^VA(15,XDRDA,2,X1,0),U,2)="V":1,$P(^(0),U,2)="D":1,1:0)
"RTN","XDRRMRG1",189,0)
 I XVER D FINALVER^XDRVCHEK(XDRDA)
"RTN","XDRRMRG1",190,0)
 Q
"RTN","XDRRMRG1",191,0)
 ;
"RTN","XDRRMRG1",192,0)
SETUP(XDRDA) ;
"RTN","XDRRMRG1",193,0)
 N XDRGRPN,XDRSSN,PRIFILE
"RTN","XDRRMRG1",194,0)
 S X=^VA(15,XDRDA,0)
"RTN","XDRRMRG1",195,0)
 I $P($G(^VA(15,XDRDA,2,1,0)),U,5)=2 S DFNTO=+X,DFNFR=+$P(X,U,2)
"RTN","XDRRMRG1",196,0)
 E  S DFNFR=+X,DFNTO=+$P(X,U,2)
"RTN","XDRRMRG1",197,0)
 S PRIFILE=$P($P(X,U),";",2),PRIFILE=+$P(@(U_PRIFILE_"0)"),U,2)
"RTN","XDRRMRG1",198,0)
 F XDRAID=0:0 S XDRAID=$O(^VA(15.1,PRIFILE,2,XDRAID)) Q:XDRAID'>0  D
"RTN","XDRRMRG1",199,0)
 . S XDRNODE=^VA(15.1,PRIFILE,2,XDRAID,0)
"RTN","XDRRMRG1",200,0)
 . S XDRNOD2=$G(^VA(15.1,PRIFILE,2,XDRAID,2))
"RTN","XDRRMRG1",201,0)
 . S XDRNAME=$P(XDRNODE,U)
"RTN","XDRRMRG1",202,0)
 . S XDRGRP=$P(XDRNODE,U,2)
"RTN","XDRRMRG1",203,0)
 . S:XDRGRP>0 XDRGRPN=$$GET1^DIQ(3.8,XDRGRP,.01) ;REM -8/2/96 Get the name of mail group
"RTN","XDRRMRG1",204,0)
 . S XDRGRP=$S(XDRGRP>0:"G."_XDRGRPN,1:"")
"RTN","XDRRMRG1",205,0)
 . S XDRFILE=$P(XDRNODE,U,3) D  Q:'$D(XDRNODE)
"RTN","XDRRMRG1",206,0)
 . . N XDRDIC,XDRFR,XDRTO
"RTN","XDRRMRG1",207,0)
 . . S XDRDIC=^DIC(XDRFILE,0,"GL")
"RTN","XDRRMRG1",208,0)
 . . S XDRFR=$S(XDRFILE'=63:DFNFR,1:$G(^DPT(DFNFR,"LR")))
"RTN","XDRRMRG1",209,0)
 . . S XDRTO=$S(XDRFILE'=63:DFNTO,1:$G(^DPT(DFNTO,"LR")))
"RTN","XDRRMRG1",210,0)
 . . I XDRFR'>0!(XDRTO'>0) K XDRNODE
"RTN","XDRRMRG1",211,0)
 . . I $D(XDRNODE),'$D(@(XDRDIC_XDRFR_",0)"))!'$D(@(XDRDIC_XDRTO_",0)")) K XDRNODE
"RTN","XDRRMRG1",212,0)
 . . I '$D(XDRNODE) D
"RTN","XDRRMRG1",213,0)
 . . . N XDRARR I $$FIND1^DIC(15.02,","_XDRDA_",","X",XDRNAME)>0 Q
"RTN","XDRRMRG1",214,0)
 . . . S XDRARR(15.02,"+1,"_XDRDA_",",.01)=XDRNAME
"RTN","XDRRMRG1",215,0)
 . . . S XDRARR(15.02,"+1,"_XDRDA_",",.02)="D"
"RTN","XDRRMRG1",216,0)
 . . . D UPDATE^DIE("","XDRARR")
"RTN","XDRRMRG1",217,0)
 . S XQADATA=XDRDA_U_DFNFR_";"_DFNTO_U_XDRNAME_U_XDRFILE_U_$P(XDRNOD2,U)_U_$P(XDRNOD2,U,2)
"RTN","XDRRMRG1",218,0)
 . ;S R(1)=XDRDA_U_DFNFR_";"_DFNTO_U_XDRNAME_U_XDRFILE_U_$P(XDRNOD2,U)_U_$P(XDRNOD2,U,2)
"RTN","XDRRMRG1",219,0)
 . D SETARY^XDRRMRG0 S XMTEXT="R("
"RTN","XDRRMRG1",220,0)
 . S:XDRGRP'="" XMY(XDRGRP)=""
"RTN","XDRRMRG1",221,0)
 . S:XDRGRP="" XMY(.5)="" ;If no mail grp found, msg sent to postmaster
"RTN","XDRRMRG1",222,0)
 . F I=0:0 S I=$O(^VA(15.1,PRIFILE,2,XDRAID,1,I)) Q:I'>0  S X=^(I,0) D
"RTN","XDRRMRG1",223,0)
 . . S XQA(X)=""
"RTN","XDRRMRG1",224,0)
 . D SEND^XDRRMRG0 K R
"RTN","XDRRMRG1",225,0)
 Q
"RTN","XDRRMRG2")
0^57^B14478811
"RTN","XDRRMRG2",1,0)
XDRRMRG2 ;SF-IRMFO/GB,JLI - GET PATIENT HEALTH SUMMARY ;3/9/98  11:01
"RTN","XDRRMRG2",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRRMRG2",3,0)
 ;;
"RTN","XDRRMRG2",4,0)
ASK(QLIST,ABORT) ; Report-specific questions
"RTN","XDRRMRG2",5,0)
 N DIC,Y,DTOUT,DUOUT
"RTN","XDRRMRG2",6,0)
 ; Which patient?
"RTN","XDRRMRG2",7,0)
 ; S DIC="^SPNL(154,"
"RTN","XDRRMRG2",8,0)
 ; S DIC("S")="I $P(^(0),U,3)=""A"""  ; Select only from active patients
"RTN","XDRRMRG2",9,0)
 ; S DIC(0)="AEQM"
"RTN","XDRRMRG2",10,0)
 ; S DIC("A")="Select SCD Patient:  "
"RTN","XDRRMRG2",11,0)
 ; S DIC("?")="Select the patient for whom you want the Health Summary"
"RTN","XDRRMRG2",12,0)
 ; D ^DIC I $D(DTOUT)!($D(DUOUT))!(Y<0) S ABORT=1 Q
"RTN","XDRRMRG2",13,0)
 ; S QLIST("DFN")=+Y     ; IEN's are DINUM'd to the ^DPT
"RTN","XDRRMRG2",14,0)
 K DIC
"RTN","XDRRMRG2",15,0)
 ; Which Health Summary Type?
"RTN","XDRRMRG2",16,0)
 S DIC="^GMT(142,"
"RTN","XDRRMRG2",17,0)
 S DIC(0)="AEQM"
"RTN","XDRRMRG2",18,0)
 S DIC("A")="Select Health Summary Type Name:  "
"RTN","XDRRMRG2",19,0)
 ;S DIC("?")="Choose one, if you aren't sure, experiment!"
"RTN","XDRRMRG2",20,0)
 D ^DIC I $D(DTOUT)!($D(DUOUT))!(Y<0) S ABORT=1 Q
"RTN","XDRRMRG2",21,0)
 S QLIST("TYPE")=+Y
"RTN","XDRRMRG2",22,0)
ASKX Q
"RTN","XDRRMRG2",23,0)
 ;
"RTN","XDRRMRG2",24,0)
GATHER(DFN,FDATE,TDATE,HIUSERS,QLIST) ; No need to gather
"RTN","XDRRMRG2",25,0)
 Q
"RTN","XDRRMRG2",26,0)
 ;
"RTN","XDRRMRG2",27,0)
PRINT(QLIST) ;Call to print health summary
"RTN","XDRRMRG2",28,0)
 D ENX^GMTSDVR(QLIST("DFN"),QLIST("TYPE"))
"RTN","XDRRMRG2",29,0)
PRINTX Q
"RTN","XDRRMRG2",30,0)
 ;
"RTN","XDRRMRG2",31,0)
PRINT2 ;Prints the record pair using the Browser of to a device.
"RTN","XDRRMRG2",32,0)
 N XDRIOP
"RTN","XDRRMRG2",33,0)
 W ! S DIR(0)="Y",DIR("A",1)="Would you like to use the FM Browser to"
"RTN","XDRRMRG2",34,0)
 S DIR("A")="view the record pair"
"RTN","XDRRMRG2",35,0)
 S DIR("B")="YES",DIR("?")="You may use FM Browser to view the record pair else you will be prompted to select a device for each record."
"RTN","XDRRMRG2",36,0)
 D ^DIR S:Y=1 XDRIOP=1 Q:$D(DIRUT)
"RTN","XDRRMRG2",37,0)
 K ^TMP("XDRRMRG1",$J),^TMP("XDRRMRG",$J)
"RTN","XDRRMRG2",38,0)
 ;S IOP="XDRBROWSER1" D ^%ZIS Q:POP  ;Old code, delete after testing
"RTN","XDRRMRG2",39,0)
REC1 S:$D(XDRIOP) IOP="XDRBROWSER1" S:'$D(XDRIOP) %ZIS="QM"
"RTN","XDRRMRG2",40,0)
 S %ZIS("A")="DEVICE FOR FIRST RECORD: "
"RTN","XDRRMRG2",41,0)
 W ! D ^%ZIS Q:POP
"RTN","XDRRMRG2",42,0)
 I $D(IO("Q")) D  G REC2 ;Will queue to TaskMan
"RTN","XDRRMRG2",43,0)
 . S ZTRTN="QUEUE^XDRRMRG2",ZTIO=ION,ZTDESC="XDR Health Summary for first patient."
"RTN","XDRRMRG2",44,0)
 . S DFN=DFNFR,TYPE=QLIST("TYPE"),ZTSAVE("DFN")="",ZTSAVE("TYPE")=""
"RTN","XDRRMRG2",45,0)
 . D ^%ZTLOAD W:$D(ZTSK) !!,"Queued as task "_ZTSK,!
"RTN","XDRRMRG2",46,0)
 . Q
"RTN","XDRRMRG2",47,0)
 U IO(0) W:$D(XDRIOP) "    Getting first entry ",!
"RTN","XDRRMRG2",48,0)
 D ENX^GMTSDVR(DFNFR,QLIST("TYPE"))
"RTN","XDRRMRG2",49,0)
 U IO D ^%ZISC
"RTN","XDRRMRG2",50,0)
 S ^TMP("XDRRMRG",$J,"ENTER <PF1>S  TO VIEW OTHER- "_$E($G(DFNFR(1)),1,30)_"  "_$G(DFNFR(2))_" ("_DFNFR_")")="^TMP(""XDRRMRG1"",$J,1)"
"RTN","XDRRMRG2",51,0)
 M ^TMP("XDRRMRG1",$J,1)=^TMP("DDB",$J)
"RTN","XDRRMRG2",52,0)
 ;S IOP="XDRBROWSER1" D ^%ZIS Q:POP  ;old code delete after testing
"RTN","XDRRMRG2",53,0)
REC2 S:$D(XDRIOP) IOP="XDRBROWSER1" S:'$D(XDRIOP) %ZIS="QM"
"RTN","XDRRMRG2",54,0)
 S %ZIS("A")="DEVICE FOR SECOND RECORD: "
"RTN","XDRRMRG2",55,0)
 W ! D ^%ZIS Q:POP
"RTN","XDRRMRG2",56,0)
 I $D(IO("Q")) D  G PRINTX ;Will queue to TaskMan
"RTN","XDRRMRG2",57,0)
 . S ZTRTN="QUEUE^XDRRMRG2",ZTIO=ION,ZTDESC="XDR Health Summary for second patient."
"RTN","XDRRMRG2",58,0)
 . S DFN=DFNTO,TYPE=QLIST("TYPE"),ZTSAVE("DFN")="",ZTSAVE("TYPE")=""
"RTN","XDRRMRG2",59,0)
 . D ^%ZTLOAD W:$D(ZTSK) !!,"Queued as task "_ZTSK,!
"RTN","XDRRMRG2",60,0)
 . Q
"RTN","XDRRMRG2",61,0)
 U IO(0) W:$D(XDRIOP) "     Getting second entry ",!
"RTN","XDRRMRG2",62,0)
 D ENX^GMTSDVR(DFNTO,QLIST("TYPE"))
"RTN","XDRRMRG2",63,0)
 D ^%ZISC U IO(0)
"RTN","XDRRMRG2",64,0)
 S ^TMP("XDRRMRG",$J,"ENTER <PF1>S  TO VIEW OTHER- "_$E($G(DFNTO(1)),1,30)_"  "_$G(DFNTO(2))_" ("_DFNTO_")")="^TMP(""XDRRMRG1"",$J,2)"
"RTN","XDRRMRG2",65,0)
 M ^TMP("XDRRMRG1",$J,2)=^TMP("DDB",$J)
"RTN","XDRRMRG2",66,0)
 D DOCLIST^DDBR($NA(^TMP("XDRRMRG",$J)),"R")
"RTN","XDRRMRG2",67,0)
 K ^TMP("XDRRMRG1",$J),^TMP("XDRRMRG",$J)
"RTN","XDRRMRG2",68,0)
PRINT2X Q
"RTN","XDRRMRG2",69,0)
 ;
"RTN","XDRRMRG2",70,0)
QUEUE ;Will process the print task for patients' health summaries.
"RTN","XDRRMRG2",71,0)
 D ENX^GMTSDVR(DFN,TYPE)
"RTN","XDRRMRG2",72,0)
QUEUEX Q
"RTN","XDRRMRG2",73,0)
 ;
"RTN","XDRRMRG2",74,0)
COUNT(XDRFILE,FROM,TO)  ;
"RTN","XDRRMRG2",75,0)
 N X,I,FIL1,FIL2,NOD,PIECE,X1,X2,N1,N2
"RTN","XDRRMRG2",76,0)
 S N1=0,N2=0
"RTN","XDRRMRG2",77,0)
 S FIL2=^DIC(XDRFILE,0,"GL")
"RTN","XDRRMRG2",78,0)
 S FIL1=FIL2_"FROM)"
"RTN","XDRRMRG2",79,0)
 S FIL2=FIL2_"TO)"
"RTN","XDRRMRG2",80,0)
 F I=0:0 S I=$O(^DD(XDRFILE,I)) Q:I'>0  S X=^(I,0) D
"RTN","XDRRMRG2",81,0)
 . S NOD=$P($P(X,U,4),";")
"RTN","XDRRMRG2",82,0)
 . S PIECE=$P($P(X,U,4),";",2)
"RTN","XDRRMRG2",83,0)
 . I PIECE>0 D
"RTN","XDRRMRG2",84,0)
 . . S X1=$P($G(@FIL1@(NOD)),U,PIECE)
"RTN","XDRRMRG2",85,0)
 . . S X2=$P($G(@FIL2@(NOD)),U,PIECE)
"RTN","XDRRMRG2",86,0)
 . . I X1'="",X2="" S N1=N1+1
"RTN","XDRRMRG2",87,0)
 . . I X2'="",X1="" S N2=N2+1
"RTN","XDRRMRG2",88,0)
COUNTX Q $S(N1>N2:2,N2>N1:1,1:0)
"RTN","XDRRMRG2",89,0)
 ;
"RTN","XDRRMRG2",90,0)
LABIEN(FILE,REC) ;REM - Resolve LABs DFNFR and DFNTO.
"RTN","XDRRMRG2",91,0)
 S NAMREC=""
"RTN","XDRRMRG2",92,0)
 S FILDIC=$G(^DIC(FILE,0,"GL")) Q:FILDIC="" NAMREC
"RTN","XDRRMRG2",93,0)
 S FILREC=FILDIC_"REC)"
"RTN","XDRRMRG2",94,0)
 S NAMREC=+$P(@FILREC@(0),U,3)
"RTN","XDRRMRG2",95,0)
LABIENX Q NAMREC
"RTN","XDRUTL")
0^60^B2519774
"RTN","XDRUTL",1,0)
XDRUTL ;SF-IRMFO/RSD - XDR utilities ;11/3/95  16:32
"RTN","XDRUTL",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRUTL",3,0)
 ;;
"RTN","XDRUTL",4,0)
 Q
"RTN","XDRUTL",5,0)
 ;
"RTN","XDRUTL",6,0)
NEWCP(XDR,XDRP) ;create new check point, returns 0=error or ien
"RTN","XDRUTL",7,0)
 ;XDR=name, XDRP=parameters
"RTN","XDRUTL",8,0)
 Q:$G(XDR)="" 0
"RTN","XDRUTL",9,0)
 N %,XDRI,XDRJ,XDRF,XDRY
"RTN","XDRUTL",10,0)
 S %=$$FIND1^DIC(15.013,","_XDRMPDA_",","X",XDR) Q:% %
"RTN","XDRUTL",11,0)
 S XDRF="+1,"_XDRMPDA_",",XDRJ(15.013,XDRF,.01)=XDR
"RTN","XDRUTL",12,0)
 S:$D(XDRP) XDRJ(15.013,XDRF,1)=XDRP
"RTN","XDRUTL",13,0)
 D UPDATE^DIE("","XDRJ","XDRY")
"RTN","XDRUTL",14,0)
 Q $G(XDRY(1))
"RTN","XDRUTL",15,0)
 ;
"RTN","XDRUTL",16,0)
UPCP(XDR,XDRP) ;update check point, returns 0=error or ien
"RTN","XDRUTL",17,0)
 ;XDR=name, XDRP=parameters
"RTN","XDRUTL",18,0)
 N XDRI,XDRJ,XDRF,XDRY
"RTN","XDRUTL",19,0)
 S XDRY=$$DICCP($G(XDR))
"RTN","XDRUTL",20,0)
 Q:'XDRY 0
"RTN","XDRUTL",21,0)
 S XDRF=XDRY_","_XDRMPDA_","
"RTN","XDRUTL",22,0)
 S:$D(XDRP) XDRJ(15.013,XDRF,1)=XDRP
"RTN","XDRUTL",23,0)
 D FILE^DIE("","XDRJ")
"RTN","XDRUTL",24,0)
 Q XDRY
"RTN","XDRUTL",25,0)
 ;
"RTN","XDRUTL",26,0)
COMCP(XDR) ;complete check point, returns 0=error or date/time
"RTN","XDRUTL",27,0)
 ;XDR=name
"RTN","XDRUTL",28,0)
 N XDRD,XDRI,XDRJ,XDRY
"RTN","XDRUTL",29,0)
 S XDRY=$$DICCP($G(XDR))
"RTN","XDRUTL",30,0)
 Q:'XDRY 0
"RTN","XDRUTL",31,0)
 S XDRD=$$NOW^XLFDT,XDRJ(15.013,XDRY_","_XDRMPDA_",",1)=XDRD
"RTN","XDRUTL",32,0)
 D FILE^DIE("","XDRJ")
"RTN","XDRUTL",33,0)
 Q XDRD
"RTN","XDRUTL",34,0)
 ;
"RTN","XDRUTL",35,0)
VERCP(XDR) ;verify check point exists, returns 1=exist, 0=doesn't
"RTN","XDRUTL",36,0)
 ;XDR=name
"RTN","XDRUTL",37,0)
 N XDRI,XDRY
"RTN","XDRUTL",38,0)
 S XDRY=$$DICCP($G(XDR))
"RTN","XDRUTL",39,0)
 Q $S('XDRY:0,1:1)
"RTN","XDRUTL",40,0)
 ;
"RTN","XDRUTL",41,0)
PARCP(XDR,XDRF) ;returns parameters of check point
"RTN","XDRUTL",42,0)
 ;XDR=name, XDRF="PRE"
"RTN","XDRUTL",43,0)
 N XDRI,XDRY
"RTN","XDRUTL",44,0)
 I $G(XDRF)="PRE" N XDRCP S XDRCP="INI"
"RTN","XDRUTL",45,0)
 S XDRY=$$DICCP($G(XDR))
"RTN","XDRUTL",46,0)
 Q:'XDRY 0
"RTN","XDRUTL",47,0)
 Q $$GET1^DIQ(15.013,XDRY_","_XDRMPDA_",",1,"I")
"RTN","XDRUTL",48,0)
 ;
"RTN","XDRUTL",49,0)
DICCP(X) ;lookup check point, returns ien or 0
"RTN","XDRUTL",50,0)
 Q:$G(X)="" 0
"RTN","XDRUTL",51,0)
 I X=+X S Y=X Q:'$D(^VA(15,XDRMPDA,"CP",Y,0)) 0
"RTN","XDRUTL",52,0)
 E  S Y=$$FIND1^DIC(15.013,","_XDRMPDA_",","X",X)
"RTN","XDRUTL",53,0)
 Q Y
"RTN","XDRVCHEK")
0^61^B9014483
"RTN","XDRVCHEK",1,0)
XDRVCHEK ;SF-IRMFO.SEA/JLI - CHECK FOR ENTRIES WHICH HAVE PASSED THE NUMBER OF DAYS REQUIRED FOR VERIFICATION ;4/6/98  09:35
"RTN","XDRVCHEK",2,0)
 ;;7.3;TOOLKIT;**23**;Apr 25, 1995
"RTN","XDRVCHEK",3,0)
 ;;
"RTN","XDRVCHEK",4,0)
 ;;
"RTN","XDRVCHEK",5,0)
EN ;
"RTN","XDRVCHEK",6,0)
 N XDRDAYS,XDRGLB,XDRI,XDRJ,XDRK,XDRX,DIE,DA,DR,XDRDA,XDRXREF
"RTN","XDRVCHEK",7,0)
 F XDRI=0:0 S XDRI=$O(^VA(15.1,XDRI)) Q:XDRI'>0  D
"RTN","XDRVCHEK",8,0)
 . S XDRGLB=$P(^DIC(XDRI,0,"GL"),U,2)
"RTN","XDRVCHEK",9,0)
 . S XDRDAYS=$P(^VA(15.1,XDRI,0),U,13)
"RTN","XDRVCHEK",10,0)
 . F XDRXREF="AXDUP","ARDUP1" F XDRJ=0:0 S XDRJ=$O(^VA(15,XDRXREF,XDRGLB,XDRJ)) Q:XDRJ'>0  D
"RTN","XDRVCHEK",11,0)
 . . S XDRX=$P(^VA(15,XDRJ,0),U,7)
"RTN","XDRVCHEK",12,0)
 . . I XDRX>0,$$FMDIFF^XLFDT(DT,XDRX)'<XDRDAYS D FINALVER(XDRJ)
"RTN","XDRVCHEK",13,0)
 D CHKREADY
"RTN","XDRVCHEK",14,0)
 Q
"RTN","XDRVCHEK",15,0)
FINALVER(XDRDA) ;
"RTN","XDRVCHEK",16,0)
 N XDRFDA,X,XDRX1,XDRX2,NAME,FILE
"RTN","XDRVCHEK",17,0)
 S XDRFDA=$$FIND1^DIC(15.02,","_XDRDA_",","X","PRIMARY")
"RTN","XDRVCHEK",18,0)
 S X=$S(XDRFDA>0:^VA(15,XDRDA,2,XDRFDA,0),1:"") Q:X=""
"RTN","XDRVCHEK",19,0)
 I $P(X,U,2)'="V" Q
"RTN","XDRVCHEK",20,0)
 S XDRFDA(15,XDRDA_",",.04)=$P(X,U,5) Q:$P(X,U,5)'>0
"RTN","XDRVCHEK",21,0)
 D FILE^DIE("","XDRFDA") K XDRFDA ; SET DIRECTION IN BEFORE SETTING STATUS
"RTN","XDRVCHEK",22,0)
 S FILE=$P($P(^VA(15,XDRDA,0),U),";",2),FILE=+$P(@(U_FILE_"0)"),U,2)
"RTN","XDRVCHEK",23,0)
 S XDRX1="V" F XDRFDA=0:0 S XDRFDA=$O(^VA(15.1,FILE,2,XDRFDA)) Q:XDRFDA'>0  S NAME=$P(^(XDRFDA,0),U) S NAME=$$FIND1^DIC(15.02,","_XDRDA_",","X",NAME) I NAME'>0 S XDRX1="R" Q
"RTN","XDRVCHEK",24,0)
 ;S XDRX1="V" F XDRFDA=0:0 S XDRFDA=$O(^VA(15,XDRDA,2,XDRFDA)) Q:XDRFDA'>0  I $P(^(XDRFDA,0),U,2)'="V",$P(^(0),U,2)'="D" S XDRX1="R" Q
"RTN","XDRVCHEK",25,0)
 K XDRFDA S XDRFDA(15,XDRDA_",",.03)=XDRX1
"RTN","XDRVCHEK",26,0)
 I XDRX1="V" D
"RTN","XDRVCHEK",27,0)
 . S XDRFDA(15,XDRDA_",",.07)=($$NOW^XLFDT()\1)
"RTN","XDRVCHEK",28,0)
 . S XDRFDA(15,XDRDA_",",.11)=$S(X'="":$P(X,U,3),1:DUZ)
"RTN","XDRVCHEK",29,0)
 D FILE^DIE("","XDRFDA")
"RTN","XDRVCHEK",30,0)
 I XDRX1'="V" Q
"RTN","XDRVCHEK",31,0)
NAME ;
"RTN","XDRVCHEK",32,0)
 S X=^VA(15,XDRDA,0)
"RTN","XDRVCHEK",33,0)
 I $P(X,U,4)=2 D
"RTN","XDRVCHEK",34,0)
 . S XDRX1=+$P(X,U,2)
"RTN","XDRVCHEK",35,0)
 . S XDRX2=+$P(X,U)
"RTN","XDRVCHEK",36,0)
 E  D
"RTN","XDRVCHEK",37,0)
 . S XDRX1=+$P(X,U)
"RTN","XDRVCHEK",38,0)
 . S XDRX2=+$P(X,U,2)
"RTN","XDRVCHEK",39,0)
 S X=U_$P($P(X,U),";",2)_"XDRX1,0)"
"RTN","XDRVCHEK",40,0)
 S NAME=$P(@X,U)
"RTN","XDRVCHEK",41,0)
 F  Q:NAME'["MERGING INTO"  S NAME=$P($P(NAME,"(",2,10),")",1,$L(NAME,")")-1)
"RTN","XDRVCHEK",42,0)
 S NAME="MERGING INTO `"_XDRX2_" USE THAT ENTRY ("_NAME_")"
"RTN","XDRVCHEK",43,0)
 S $P(@X,U)=NAME
"RTN","XDRVCHEK",44,0)
 Q
"RTN","XDRVCHEK",45,0)
 ;
"RTN","XDRVCHEK",46,0)
CHKREADY ; Check whether the status with respect to merge can be changed
"RTN","XDRVCHEK",47,0)
 ; from NOT READY to READY based on the minimum number of days prior to
"RTN","XDRVCHEK",48,0)
 ; merging
"RTN","XDRVCHEK",49,0)
 ;
"RTN","XDRVCHEK",50,0)
 F XDRFILE=0:0 S XDRFILE=$O(^VA(15.1,XDRFILE)) Q:XDRFILE'>0  D
"RTN","XDRVCHEK",51,0)
 . S XDRGLOB=$P(^DIC(XDRFILE,0,"GL"),U,2)
"RTN","XDRVCHEK",52,0)
 . S XDRDAYS=+$P($G(^VA(15.1,XDRFILE,0)),U,14)
"RTN","XDRVCHEK",53,0)
 . S XDRDAYS=$S(XDRDAYS>0:XDRDAYS,1:-1)
"RTN","XDRVCHEK",54,0)
 . S XDRDATE=$$FMADD^XLFDT(DT,-XDRDAYS)
"RTN","XDRVCHEK",55,0)
 . S XDRI="" F  S XDRI=$O(^VA(15,"AVDUP",XDRGLOB,XDRI)) Q:XDRI=""  D
"RTN","XDRVCHEK",56,0)
 . . S XDRJ=$O(^VA(15,"AVDUP",XDRGLOB,XDRI,0))
"RTN","XDRVCHEK",57,0)
 . . S XDRJV=$G(^VA(15,XDRJ,0)) I XDRJV="" K ^VA(15,"AVDUP",XDRGLOB,XDRI,XDRJ) Q
"RTN","XDRVCHEK",58,0)
 . . I $P(XDRJV,U,5)'=2,$P(XDRJV,U,7)<XDRDATE D
"RTN","XDRVCHEK",59,0)
 . . . S DIE=15,DA=XDRJ,DR=".05///1;" D ^DIE K DIE,DA,DR
"RTN","XDRVCHEK",60,0)
 ;
"RTN","XDRVCHEK",61,0)
CLEAN ;
"RTN","XDRVCHEK",62,0)
 N I,J,X,Y
"RTN","XDRVCHEK",63,0)
 F I=0:0 S I=$O(^VA(15,I)) Q:I'>0  D
"RTN","XDRVCHEK",64,0)
 . S V=$G(^VA(15,I,0)) I $P(V,U,3)'="V" Q
"RTN","XDRVCHEK",65,0)
 . S Y=$P(V,U,4)
"RTN","XDRVCHEK",66,0)
 . S Y=$S(Y>0:Y,1:1)
"RTN","XDRVCHEK",67,0)
 . S X=$P(V,U,Y)
"RTN","XDRVCHEK",68,0)
 . F J=0:0 S J=$O(^VA(15,"B",X,J)) Q:J'>0  I J'=I D
"RTN","XDRVCHEK",69,0)
 . . S Y=$P($G(^VA(15,J,0)),U,3)
"RTN","XDRVCHEK",70,0)
 . . I Y="P"!(Y="") D
"RTN","XDRVCHEK",71,0)
 . . . S DA=J
"RTN","XDRVCHEK",72,0)
 . . . N I,J,X,Y,V
"RTN","XDRVCHEK",73,0)
 . . . S DIK="^VA(15,"
"RTN","XDRVCHEK",74,0)
 . . . D ^DIK
"RTN","XDRVCHEK",75,0)
 Q
"SEC","^DIC",15,15,0,"AUDIT")
#
"SEC","^DIC",15,15,0,"DD")
@
"SEC","^DIC",15,15,0,"DEL")
@
"SEC","^DIC",15,15,0,"LAYGO")
@
"SEC","^DIC",15,15,0,"RD")
#
"SEC","^DIC",15,15,0,"WR")
@
"SEC","^DIC",15.1,15.1,0,"AUDIT")
#
"SEC","^DIC",15.1,15.1,0,"DD")
@
"SEC","^DIC",15.1,15.1,0,"DEL")
@
"SEC","^DIC",15.1,15.1,0,"LAYGO")
@
"SEC","^DIC",15.1,15.1,0,"RD")
#
"SEC","^DIC",15.1,15.1,0,"WR")
@
"SEC","^DIC",15.2,15.2,0,"AUDIT")
#
"SEC","^DIC",15.2,15.2,0,"DD")
@
"SEC","^DIC",15.2,15.2,0,"DEL")
#
"SEC","^DIC",15.2,15.2,0,"LAYGO")
#
"SEC","^DIC",15.2,15.2,0,"WR")
#
"SEC","^DIC",15.3,15.3,0,"AUDIT")
#
"SEC","^DIC",15.3,15.3,0,"DD")
@
"SEC","^DIC",15.3,15.3,0,"DEL")
#
"SEC","^DIC",15.3,15.3,0,"LAYGO")
#
"SEC","^DIC",15.3,15.3,0,"WR")
#
"SEC","^DIC",15.4,15.4,0,"AUDIT")
@
"SEC","^DIC",15.4,15.4,0,"DD")
@
"SEC","^DIC",15.4,15.4,0,"DEL")
@
"SEC","^DIC",15.4,15.4,0,"LAYGO")
@
"SEC","^DIC",15.4,15.4,0,"RD")
@
"SEC","^DIC",15.4,15.4,0,"WR")
@
"VER")
8.0^21.0
"^DD",15,15,0)
FIELD^^999999904^33
"^DD",15,15,0,"DDA")
N
"^DD",15,15,0,"DT")
2980219
"^DD",15,15,0,"ID",.02)
S DIY=$S($D(@(DIC_(+Y)_",""0"")")):$P(^("0"),U,2),1:"") D NAME^DICM2 N XDRXX S @("XDRXX=$E("_DIC_"Y,0),0)") D EN^DDIOL("   "_DINAME_XDRXX,"","?0")
"^DD",15,15,0,"ID",.03)
N XDRXX S @("XDRXX=$P($P($C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:0)_$E("_DIC_"Y,0),0),$C(59)_$P(^(0),U,3)_"":"",2),$C(59),1)") D EN^DDIOL("   "_XDRXX,"","?0")
"^DD",15,15,0,"IX","ACMORS",15,.03)

"^DD",15,15,0,"IX","ADJ",15,.05)

"^DD",15,15,0,"IX","AFR",15,.04)

"^DD",15,15,0,"IX","AFR",15,.05)

"^DD",15,15,0,"IX","ALK",15,.03)

"^DD",15,15,0,"IX","ALK2",15,.04)

"^DD",15,15,0,"IX","ALK3",15,.05)

"^DD",15,15,0,"IX","AMFIC",15,999999901)

"^DD",15,15,0,"IX","AMFIP",15,999999903)

"^DD",15,15,0,"IX","AMFIP2",15,999999902)

"^DD",15,15,0,"IX","AMFIR",15,999999902)

"^DD",15,15,0,"IX","AMRG",15,.05)

"^DD",15,15,0,"IX","ANOT",15,.03)

"^DD",15,15,0,"IX","AODUP",15,.03)

"^DD",15,15,0,"IX","APOT",15,.03)

"^DD",15,15,0,"IX","ARDUP",15,.03)

"^DD",15,15,0,"IX","ARDUP1",15,.03)

"^DD",15,15,0,"IX","ATO",15,.04)

"^DD",15,15,0,"IX","ATO",15,.05)

"^DD",15,15,0,"IX","AVCHG",15,.12)

"^DD",15,15,0,"IX","AVDUP",15,.03)

"^DD",15,15,0,"IX","AXDUP",15,.03)

"^DD",15,15,0,"IX","AXDUP1",15,.03)

"^DD",15,15,0,"IX","B",15,.01)

"^DD",15,15,0,"IX","B",15,.02)

"^DD",15,15,0,"NM","DUPLICATE RECORD")

"^DD",15,15,0,"PT",15.22,.03)

"^DD",15,15,0,"SCR")
I 1 Q:$D(APMFCTL)  Q:'$D(^VA(15,Y,9999999))  I '+^(9999999)
"^DD",15,15,0,"VRPK")
XT
"^DD",15,15,.01,0)
RECORD1^RVXI^^0;1^I $D(^VA(15,"AFR",$P(X,";",2),+X)) S %=$O(^(+X,0)),%=+$P(^VA(15,%,0),U,$P(^VA(15,%,0),U,4)#2+1),%=$P(@(U_$P(X,";",2)_%_",0)"),U,1) K X W !?5,"Already merged to "_% Q
"^DD",15,15,.01,1,0)
^.1^^-1
"^DD",15,15,.01,1,1,0)
15^B
"^DD",15,15,.01,1,1,1)
S ^VA(15,"B",$E(X,1,30),DA)=""
"^DD",15,15,.01,1,1,2)
K ^VA(15,"B",$E(X,1,30),DA)
"^DD",15,15,.01,1,2,0)
^^TRIGGER^15^.06
"^DD",15,15,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$D(DIU(0))=0 I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(15,.01,1,2,1.4)
"^DD",15,15,.01,1,2,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=15,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.01,1,2,2)
Q
"^DD",15,15,.01,1,2,"%D",0)
^^2^2^2900607^
"^DD",15,15,.01,1,2,"%D",1,0)
This TRIGGER sets the DATE FOUND field when an entry is added to this
"^DD",15,15,.01,1,2,"%D",2,0)
file.
"^DD",15,15,.01,1,2,"CREATE CONDITION")
S X=$D(DIU(0))=0
"^DD",15,15,.01,1,2,"CREATE VALUE")
TODAY
"^DD",15,15,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",15,15,.01,1,2,"FIELD")
DATE FOUND
"^DD",15,15,.01,1,3,0)
^^TRIGGER^15^.09
"^DD",15,15,.01,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$D(DIU(0))=0 I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(15,.01,1,3,1.4)
"^DD",15,15,.01,1,3,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=15,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.01,1,3,2)
Q
"^DD",15,15,.01,1,3,"%D",0)
^^2^2^2900607^
"^DD",15,15,.01,1,3,"%D",1,0)
This TRIGGER sets the WHO CREATED field when an entry is added to this
"^DD",15,15,.01,1,3,"%D",2,0)
file.
"^DD",15,15,.01,1,3,"CREATE CONDITION")
S X=$D(DIU(0))=0
"^DD",15,15,.01,1,3,"CREATE VALUE")
S X=DUZ
"^DD",15,15,.01,1,3,"DELETE VALUE")
NO EFFECT
"^DD",15,15,.01,1,3,"FIELD")
WHO CREATED
"^DD",15,15,.01,1,4,0)
^^TRIGGER^9002099.3^.01
"^DD",15,15,.01,1,4,1)
Q
"^DD",15,15,.01,1,4,2)
Q  X ^DD(15,.01,1,4,2.3) I X S X=DIV X ^DD(15,.01,1,4,89.2) S Y(101)=$S($D(^APMM(99.3,D0,0)):^(0),1:"") S X=$P(Y(101),U,1) S D0=I(0,0) S DIU=X K Y I DIV(0)>0 S DIK(0)=DA,DIK="^APMM(99.3,",DA=DIV(0) D ^DIK S DA=DIK(0) K DIK
"^DD",15,15,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$S(X["DPT("&('$D(DIU(0))):1,1:0)
"^DD",15,15,.01,1,4,89.2)
X $P(^DD(15,99993,0),U,5,99) S Y(1)=X S I(0,0)=$S($D(D0):D0,1:"") S X=Y(1),X=X S X=X K DIC S DIC="^APMM(99.3,",DIC(0)="NMF" D ^DIC S (D,D0,DIV(0))=+Y
"^DD",15,15,.01,1,4,"%D",0)
^^3^3^2900607^
"^DD",15,15,.01,1,4,"%D",1,0)
This TRIGGER fires only for file 2, and then only on the kill side.  Its
"^DD",15,15,.01,1,4,"%D",2,0)
purpose is to delete the corresponding entry in the DUPLICATE RECORD VALUE
"^DD",15,15,.01,1,4,"%D",3,0)
file, if there is one.
"^DD",15,15,.01,1,4,"CREATE VALUE")
NO EFFECT
"^DD",15,15,.01,1,4,"DELETE CONDITION")
S X=$S(X["DPT("&('$D(DIU(0))):1,1:0)
"^DD",15,15,.01,1,4,"DELETE VALUE")
@
"^DD",15,15,.01,1,4,"DIC")
LOOKUP
"^DD",15,15,.01,1,4,"DIK")
DELETE
"^DD",15,15,.01,1,4,"FIELD")
LOOKUP3:DUPLICATE RECORD VALUE:DUPLICATES
"^DD",15,15,.01,3)

"^DD",15,15,.01,21,0)
^^2^2^2961002^^^^
"^DD",15,15,.01,21,1,0)
This field contains one of the potential duplicate pair.  This is a
"^DD",15,15,.01,21,2,0)
variable pointer.
"^DD",15,15,.01,23,0)
^^1^1^2961002^^^^
"^DD",15,15,.01,23,1,0)
One of the potential duplicate pair.
"^DD",15,15,.01,"DT")
2900906
"^DD",15,15,.01,"V",0)
^.12P^^0
"^DD",15,15,.01,"V",1,0)
2^PATIENT^1^P^n^n
"^DD",15,15,.02,0)
RECORD2^RVXI^^0;2^S %=$P(^VA(15,DA,0),U,1) K:X=%!($P(X,";",2)'=$P(%,";",2))!($P(^(0),U,5)=2) X X:$D(X) $P(^DD(15,.01,0),U,5,99)
"^DD",15,15,.02,1,0)
^.1
"^DD",15,15,.02,1,1,0)
15^B^MNEMONIC
"^DD",15,15,.02,1,1,1)
S:'$D(^VA(15,"B",$E(X,1,30),DA)) ^(DA)=1
"^DD",15,15,.02,1,1,2)
I $D(^VA(15,"B",$E(X,1,30),DA)),^(DA) K ^(DA)
"^DD",15,15,.02,3)

"^DD",15,15,.02,21,0)
^^1^1^2921217^
"^DD",15,15,.02,21,1,0)
The second of the potential duplicate pair.  This is a variable pointer.
"^DD",15,15,.02,23,0)
^^1^1^2900830^^^
"^DD",15,15,.02,23,1,0)
One of the potential duplicate pair.
"^DD",15,15,.02,"DT")
2890725
"^DD",15,15,.02,"V",0)
^.12P^1^1
"^DD",15,15,.02,"V",1,0)
2^PATIENT^1^P^n^n
"^DD",15,15,.03,0)
STATUS^R*S^P:POTENTIAL DUPLICATE, UNVERIFIED;N:VERIFIED, NOT A DUPLICATE;V:VERIFIED DUPLICATE;X:VERIFICATION IN PROCESS;R:REQUIRES RESOLUTION;^0;3^Q
"^DD",15,15,.03,1,0)
^.1^^-1
"^DD",15,15,.03,1,1,0)
15^APOT^MUMPS
"^DD",15,15,.03,1,1,1)
I X="P" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"APOT",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,1,2)
Q:X'="P"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"APOT",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,1,"%D",0)
^^7^7^2900607^
"^DD",15,15,.03,1,1,"%D",1,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,1,"%D",2,0)

"^DD",15,15,.03,1,1,"%D",3,0)
^VA(15,"APOT","DPT(",fe#1^fe#2,DA)="" and the fe#s will be in the order
"^DD",15,15,.03,1,1,"%D",4,0)
                                      low^high.
"^DD",15,15,.03,1,1,"%D",5,0)

"^DD",15,15,.03,1,1,"%D",6,0)
This xref will be killed when the STATUS field is changed to any other
"^DD",15,15,.03,1,1,"%D",7,0)
value.
"^DD",15,15,.03,1,2,0)
15^ANOT^MUMPS
"^DD",15,15,.03,1,2,1)
I X="N" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"ANOT",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,2,2)
Q:X'="N"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"ANOT",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,2,"%D",0)
^^9^9^2900607^
"^DD",15,15,.03,1,2,"%D",1,0)
This xref will exist only when the STATUS is VERIFIED, NOT A DUPLICATE.
"^DD",15,15,.03,1,2,"%D",2,0)

"^DD",15,15,.03,1,2,"%D",3,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,2,"%D",4,0)

"^DD",15,15,.03,1,2,"%D",5,0)
^VA(15,"ANOT","DPT(","fe#1^fe#2,DA)="" where the order of the fe#s will be
"^DD",15,15,.03,1,2,"%D",6,0)
                                       low^high
"^DD",15,15,.03,1,2,"%D",7,0)

"^DD",15,15,.03,1,2,"%D",8,0)
This xref will be killed when the STATUS field is changed to any other
"^DD",15,15,.03,1,2,"%D",9,0)
value.
"^DD",15,15,.03,1,3,0)
15^AVDUP^MUMPS
"^DD",15,15,.03,1,3,1)
I X="V" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"AVDUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,3,2)
Q:X'="V"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"AVDUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,3,"%D",0)
^^7^7^2950109^^
"^DD",15,15,.03,1,3,"%D",1,0)
This xref permanently exists for all entries in this file that are verified
"^DD",15,15,.03,1,3,"%D",2,0)
duplicates.
"^DD",15,15,.03,1,3,"%D",3,0)

"^DD",15,15,.03,1,3,"%D",4,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,3,"%D",5,0)

"^DD",15,15,.03,1,3,"%D",6,0)
^VA(15,"AVDUP","DPT(","fe#1^fe#2",DA)="" where the order of the fe#s will
"^DD",15,15,.03,1,3,"%D",7,0)
                                         low^high.
"^DD",15,15,.03,1,3,"DT")
2980331
"^DD",15,15,.03,1,4,0)
15^ALK^MUMPS
"^DD",15,15,.03,1,4,1)
Q:X="N"  S %=X="V",X=$P(^VA(15,DA,0),U,1,2),^VA(15,"ALK",$P($P(X,";",2),U,1),+X,%+1,+$P(X,U,2),DA)="" S:'% ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,2),1,+X,DA)=""
"^DD",15,15,.03,1,4,2)
Q:X="N"  S %=X="V",X=$P(^VA(15,DA,0),U,1,2) K ^VA(15,"ALK",$P($P(X,";",2),U,1),+X,%+1,+$P(X,U,2),DA) K:'% ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,2),1,+X,DA)
"^DD",15,15,.03,1,4,"%D",0)
^^14^14^2900607^^^^
"^DD",15,15,.03,1,4,"%D",1,0)
This xref will exist, in one form or the other, from the time an entry is
"^DD",15,15,.03,1,4,"%D",2,0)
made in this file until the records are merged or verified as not a
"^DD",15,15,.03,1,4,"%D",3,0)
duplicate.
"^DD",15,15,.03,1,4,"%D",4,0)

"^DD",15,15,.03,1,4,"%D",5,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,4,"%D",6,0)

"^DD",15,15,.03,1,4,"%D",7,0)
^VA(15,"ALK",^DPT(",fe#1,n,fe#2,DA)="" where 'n' will be 1 for a potential
"^DD",15,15,.03,1,4,"%D",8,0)
duplicate and 2 for a verified duplicate.
"^DD",15,15,.03,1,4,"%D",9,0)

"^DD",15,15,.03,1,4,"%D",10,0)
When 'n' is 1 there will be two "ALK" xrefs with the fe#s reversed.  When
"^DD",15,15,.03,1,4,"%D",11,0)
'n' is 2 there will be only one "ALK" xref and the fe#s will be in the
"^DD",15,15,.03,1,4,"%D",12,0)
order RECORD1 RECORD2.  The "ALK2" xref on MERGE DIRECTION will reset this
"^DD",15,15,.03,1,4,"%D",13,0)
xref to be in the order 'from' 'to'.  Once merged the "ALK" xref for this
"^DD",15,15,.03,1,4,"%D",14,0)
entry will be killed by the "ALK3" xref on the MERGE STATUS field..
"^DD",15,15,.03,1,5,0)
^^TRIGGER^15^.07
"^DD",15,15,.03,1,5,1)
X ^DD(15,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(15,.03,1,5,1.4)
"^DD",15,15,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)'="POTENTIAL DUPLICATE, UNVERIFIED" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,5,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=15,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,5,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$D(DIU(0))=0 I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(15,.03,1,5,2.4)
"^DD",15,15,.03,1,5,2.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=15,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,5,"%D",0)
^^4^4^2900607^
"^DD",15,15,.03,1,5,"%D",1,0)
This TRIGGER sets the DATE VERIFIED field.  It is not fired for a status
"^DD",15,15,.03,1,5,"%D",2,0)
of 'potential duplicate, unverified'.  If the status is changed from
"^DD",15,15,.03,1,5,"%D",3,0)
verified the DATE VERIFIED field is deleted and will be reset if
"^DD",15,15,.03,1,5,"%D",4,0)
appropriate.
"^DD",15,15,.03,1,5,"CREATE CONDITION")
STATUS'="POTENTIAL DUPLICATE, UNVERIFIED"
"^DD",15,15,.03,1,5,"CREATE VALUE")
TODAY
"^DD",15,15,.03,1,5,"DELETE CONDITION")
S X=$D(DIU(0))=0
"^DD",15,15,.03,1,5,"DELETE VALUE")
@
"^DD",15,15,.03,1,5,"DT")
2980331
"^DD",15,15,.03,1,5,"FIELD")
DATE VERIFIED
"^DD",15,15,.03,1,6,0)
^^TRIGGER^15^.11
"^DD",15,15,.03,1,6,1)
X ^DD(15,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(15,.03,1,6,1.4)
"^DD",15,15,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)'="POTENTIAL DUPLICATE, UNVERIFIED" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,6,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=15,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,6,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$D(DIU(0))=0 I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" X ^DD(15,.03,1,6,2.4)
"^DD",15,15,.03,1,6,2.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=15,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,6,"%D",0)
^^6^6^2900613^^
"^DD",15,15,.03,1,6,"%D",1,0)
This TRIGGER sets the WHO VERIFIED field.  It is not fired for a status
"^DD",15,15,.03,1,6,"%D",2,0)
of 'potential duplicate, unverified'.  If the status is changed from
"^DD",15,15,.03,1,6,"%D",3,0)
verified the WHO VERIFIED field is deleted and reset as appropriate.
"^DD",15,15,.03,1,6,"%D",4,0)

"^DD",15,15,.03,1,6,"%D",5,0)
The conditional logic on this TRIGGER was modified, using ^%GEDIT, to
"^DD",15,15,.03,1,6,"%D",6,0)
prevent firing during a RE-INDEX.
"^DD",15,15,.03,1,6,"CREATE CONDITION")
STATUS'="POTENTIAL DUPLICATE, UNVERIFIED"
"^DD",15,15,.03,1,6,"CREATE VALUE")
S X=DUZ
"^DD",15,15,.03,1,6,"DELETE CONDITION")
S X=$D(DIU(0))=0
"^DD",15,15,.03,1,6,"DELETE VALUE")
@
"^DD",15,15,.03,1,6,"FIELD")
WHO VERIFIED
"^DD",15,15,.03,1,7,0)
^^TRIGGER^15^.04
"^DD",15,15,.03,1,7,1)
Q
"^DD",15,15,.03,1,7,2)
X ^DD(15,.03,1,7,2.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=15,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,7,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1)="VERIFIED DUPLICATE" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,7,"%D",0)
^^5^5^2900613^^
"^DD",15,15,.03,1,7,"%D",1,0)
This TRIGGER deletes the MERGE DIRECTION field when the status is being
"^DD",15,15,.03,1,7,"%D",2,0)
changed from 'verified duplicate' to any other value.
"^DD",15,15,.03,1,7,"%D",3,0)

"^DD",15,15,.03,1,7,"%D",4,0)
The conditional logic on this TRIGGER was modified, using ^%GEDIT, to
"^DD",15,15,.03,1,7,"%D",5,0)
prevent firing during a RE-INDEX.
"^DD",15,15,.03,1,7,"CREATE VALUE")
NO EFFECT
"^DD",15,15,.03,1,7,"DELETE CONDITION")
OLD STATUS="VERIFIED DUPLICATE"
"^DD",15,15,.03,1,7,"DELETE VALUE")
@
"^DD",15,15,.03,1,7,"FIELD")
MERGE DIRECTION
"^DD",15,15,.03,1,8,0)
^^TRIGGER^15^.05
"^DD",15,15,.03,1,8,1)
X ^DD(15,.03,1,8,1.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=0 X ^DD(15,.03,1,8,1.4)
"^DD",15,15,.03,1,8,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="VERIFIED DUPLICATE" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,8,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=15,DIG=.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,8,2)
X ^DD(15,.03,1,8,2.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=15,DIG=.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,8,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1)="VERIFIED DUPLICATE" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,8,"%D",0)
^^6^6^2900613^^
"^DD",15,15,.03,1,8,"%D",1,0)
This TRIGGER sets the MERGE STATUS field to 0=NOT READY when the status
"^DD",15,15,.03,1,8,"%D",2,0)
is set to 'verified duplicate'.  The MERGE STATUS field is deleted when
"^DD",15,15,.03,1,8,"%D",3,0)
the status is changed from 'verified duplicate' to any other value.
"^DD",15,15,.03,1,8,"%D",4,0)

"^DD",15,15,.03,1,8,"%D",5,0)
The conditional logic on this TRIGGER was modified, using ^%GEDIT, to
"^DD",15,15,.03,1,8,"%D",6,0)
prevent firing during a RE-INDEX.
"^DD",15,15,.03,1,8,"CREATE CONDITION")
STATUS="VERIFIED DUPLICATE"
"^DD",15,15,.03,1,8,"CREATE VALUE")
S X=0
"^DD",15,15,.03,1,8,"DELETE CONDITION")
OLD STATUS="VERIFIED DUPLICATE"
"^DD",15,15,.03,1,8,"DELETE VALUE")
@
"^DD",15,15,.03,1,8,"FIELD")
MERGE STATUS
"^DD",15,15,.03,1,9,0)
^^TRIGGER^15^.08
"^DD",15,15,.03,1,9,1)
X ^DD(15,.03,1,9,1.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(15,.03,1,9,1.4)
"^DD",15,15,.03,1,9,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="VERIFIED, NOT A DUPLICATE" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,9,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=15,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,9,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$D(DIU(0))=0 I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(15,.03,1,9,2.4)
"^DD",15,15,.03,1,9,2.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=15,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,9,"%D",0)
^^3^3^2900607^
"^DD",15,15,.03,1,9,"%D",1,0)
This TRIGGER sets the DATE RESOLVED field when the status is set to
"^DD",15,15,.03,1,9,"%D",2,0)
'verified, not a duplicate'.  The DATE RESOLVED field is deleted when
"^DD",15,15,.03,1,9,"%D",3,0)
the status is changed to any other value.
"^DD",15,15,.03,1,9,"CREATE CONDITION")
STATUS="VERIFIED, NOT A DUPLICATE"
"^DD",15,15,.03,1,9,"CREATE VALUE")
TODAY
"^DD",15,15,.03,1,9,"DELETE CONDITION")
S X=$D(DIU(0))=0
"^DD",15,15,.03,1,9,"DELETE VALUE")
@
"^DD",15,15,.03,1,9,"FIELD")
DATE RESOLVED
"^DD",15,15,.03,1,10,0)
^^TRIGGER^15^.12
"^DD",15,15,.03,1,10,1)
Q
"^DD",15,15,.03,1,10,2)
X ^DD(15,.03,1,10,2.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(15,.03,1,10,2.4)
"^DD",15,15,.03,1,10,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.03,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_X_":",2),$C(59),1)="VERIFIED DUPLICATE" S:X X=$D(DIU(0))=0
"^DD",15,15,.03,1,10,2.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,12)=DIV,DIH=15,DIG=.12 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.03,1,10,"%D",0)
^^5^5^2900613^^
"^DD",15,15,.03,1,10,"%D",1,0)
This TRIGGER sets the WHO CHANGED field to the user number any time the
"^DD",15,15,.03,1,10,"%D",2,0)
status is changed from 'verified duplicate' to any other value.
"^DD",15,15,.03,1,10,"%D",3,0)

"^DD",15,15,.03,1,10,"%D",4,0)
The conditional logic on this TRIGGER was modified, using ^%GEDIT, to
"^DD",15,15,.03,1,10,"%D",5,0)
prevent firing during a RE-INDEX.
"^DD",15,15,.03,1,10,"CREATE VALUE")
NO EFFECT
"^DD",15,15,.03,1,10,"DELETE CONDITION")
OLD STATUS="VERIFIED DUPLICATE"
"^DD",15,15,.03,1,10,"DELETE VALUE")
S X=DUZ
"^DD",15,15,.03,1,10,"FIELD")
WHO CHANGED
"^DD",15,15,.03,1,11,0)
15^AXDUP^MUMPS
"^DD",15,15,.03,1,11,1)
I X="X" S X=$P($P(^VA(15,DA,0),U),";",2) S ^VA(15,"AXDUP",X,DA)=""
"^DD",15,15,.03,1,11,2)
Q:X'="X"  S X=$P($P(^VA(15,DA,0),U),";",2) K ^VA(15,"AXDUP",X,DA)
"^DD",15,15,.03,1,11,3)
THIS X-REF IS USED TO IDENTIFY POTENTIAL DUPLICATES IN THE VERIFICATION PROCESS.  IT IS USED TO RAPIDLY CHECK ENTRIES FOR THE NUMBER OF DAYS SINCE THEY ENTERED THE VERIFICATION PROCESS.
"^DD",15,15,.03,1,11,"%D",0)
^^3^3^2960214^
"^DD",15,15,.03,1,11,"%D",1,0)
This X-REF (AXDUP) on field .03 is used to identify potential duplicates
"^DD",15,15,.03,1,11,"%D",2,0)
in the verification process.  It is used to rapidly check entries for the
"^DD",15,15,.03,1,11,"%D",3,0)
number of days since they entered the verification process.
"^DD",15,15,.03,1,11,"DT")
2960214
"^DD",15,15,.03,1,12,0)
15^ACMORS^MUMPS
"^DD",15,15,.03,1,12,1)
Q
"^DD",15,15,.03,1,12,2)
Q
"^DD",15,15,.03,1,12,3)
THIS SETS UP THE ACMORS X-REFERENCE ON CMOR SCORES FOR THE FIRST ENTRY
"^DD",15,15,.03,1,12,"DT")
2980112
"^DD",15,15,.03,1,13,0)
15^ARDUP^MUMPS
"^DD",15,15,.03,1,13,1)
I X="R" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"ARDUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,13,2)
Q:X'="R"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"ARDUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,13,"%D",0)
^^8^8^2980325^
"^DD",15,15,.03,1,13,"%D",1,0)
 
"^DD",15,15,.03,1,13,"%D",2,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,13,"%D",3,0)
 
"^DD",15,15,.03,1,13,"%D",4,0)
^VA(15,"ARDUP","DPT(",fe#1^fe#2,DA)="" and the fe#s will be in the order
"^DD",15,15,.03,1,13,"%D",5,0)
                                       low^high.
"^DD",15,15,.03,1,13,"%D",6,0)
 
"^DD",15,15,.03,1,13,"%D",7,0)
This xref will be killed when the STATUS field is changed to any other
"^DD",15,15,.03,1,13,"%D",8,0)
value.
"^DD",15,15,.03,1,13,"DT")
2980325
"^DD",15,15,.03,1,14,0)
15^AXDUP1^MUMPS
"^DD",15,15,.03,1,14,1)
I X="X" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"AXDUP1",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,14,2)
Q:X'="X"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"AXDUP1",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,14,"%D",0)
^^7^7^2980325^
"^DD",15,15,.03,1,14,"%D",1,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,14,"%D",2,0)
 
"^DD",15,15,.03,1,14,"%D",3,0)
^VA(15,"AXDUP1","DPT(",fe#1^fe#2,DA)="" and the fe#s will be in the order
"^DD",15,15,.03,1,14,"%D",4,0)
                                       low^high.
"^DD",15,15,.03,1,14,"%D",5,0)
 
"^DD",15,15,.03,1,14,"%D",6,0)
This xref will be killed when the STATUS field is changed to any other
"^DD",15,15,.03,1,14,"%D",7,0)
value.
"^DD",15,15,.03,1,14,"DT")
2980325
"^DD",15,15,.03,1,15,0)
15^AODUP^MUMPS
"^DD",15,15,.03,1,15,1)
I X="O" S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) S ^VA(15,"AODUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)=""
"^DD",15,15,.03,1,15,2)
Q:X'="O"  S X=$P(^VA(15,DA,0),U,1,2) S:+X>+$P(X,U,2) X=$P(X,U,2)_U_$P(X,U,1) K ^VA(15,"AODUP",$P($P(X,";",2),U,1),+X_U_+$P(X,U,2),DA)
"^DD",15,15,.03,1,15,"%D",0)
^^7^7^2980325^
"^DD",15,15,.03,1,15,"%D",1,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.03,1,15,"%D",2,0)
 
"^DD",15,15,.03,1,15,"%D",3,0)
^VA(15,"AODUP","DPT(",fe#1^fe#2,DA)="" and the fe#s will be in the order
"^DD",15,15,.03,1,15,"%D",4,0)
                                       low^high.
"^DD",15,15,.03,1,15,"%D",5,0)
 
"^DD",15,15,.03,1,15,"%D",6,0)
This xref will be killed when the STATUS field is changed to any other
"^DD",15,15,.03,1,15,"%D",7,0)
value.
"^DD",15,15,.03,1,15,"DT")
2980325
"^DD",15,15,.03,1,17,0)
15^ARDUP1^MUMPS
"^DD",15,15,.03,1,17,1)
Q:X'="R"  S X=$P($P(^VA(15,DA,0),U),";",2) S ^VA(15,"ARDUP1",X,DA)=""
"^DD",15,15,.03,1,17,2)
Q:X'="R"  S X=$P($P(^VA(15,DA,0),U),";",2) K ^VA(15,"ARDUP1",X,DA)
"^DD",15,15,.03,1,17,"%D",0)
^^3^3^2980331^
"^DD",15,15,.03,1,17,"%D",1,0)
This X-REF (RXDUP1) on field .03 is used to identify potential duplicates
"^DD",15,15,.03,1,17,"%D",2,0)
in the verification process.  It is used to rapidly check entries for the
"^DD",15,15,.03,1,17,"%D",3,0)
number of days since they entered the verification process.
"^DD",15,15,.03,1,17,"DT")
2980331
"^DD",15,15,.03,3)
This indicates the status of the pair of entries
"^DD",15,15,.03,12)
Cannot be modified once MERGE STATUS is set to 2=MERGED or 3=IN PROCESS
"^DD",15,15,.03,12.1)
S DIC("S")="I $P(^VA(15,DA,0),U,5)'>1"
"^DD",15,15,.03,21,0)
^^5^5^2971211^^^^
"^DD",15,15,.03,21,1,0)
This field indicates the status of this duplicate record pair.  It may be
"^DD",15,15,.03,21,2,0)
'potential duplicate, unverified', 'verified, not a duplicate', or
"^DD",15,15,.03,21,3,0)
'verified duplicate'.
"^DD",15,15,.03,21,4,0)

"^DD",15,15,.03,21,5,0)
This field cannot be modified once MERGE STATUS is set to 2=MERGED.
"^DD",15,15,.03,23,0)
^^5^5^2971211^^^^
"^DD",15,15,.03,23,1,0)
This field indicates the status of this duplicate record pair.  It may be
"^DD",15,15,.03,23,2,0)
'potential duplicate, unverified', 'verified, not a duplicate', or
"^DD",15,15,.03,23,3,0)
'verified duplicate'.
"^DD",15,15,.03,23,4,0)

"^DD",15,15,.03,23,5,0)
This field cannot be modified once MERGE STATUS is set to 2=MERGED.
"^DD",15,15,.03,"DT")
2980405
"^DD",15,15,.04,0)
MERGE DIRECTION^R*SI^1:RECORD1 to RECORD2;2:RECORD2 to RECORD1;^0;4^Q
"^DD",15,15,.04,1,0)
^.1^^-1
"^DD",15,15,.04,1,1,0)
15^ALK2^MUMPS
"^DD",15,15,.04,1,1,1)
S %=X,X=$P(^VA(15,DA,0),U,1,2) K ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,%#2+1),2,+$P(X,U,%),DA) S ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,%),2,+$P(X,U,%#2+1),DA)=""
"^DD",15,15,.04,1,1,2)
Q:X=""  S %=X,X=$P(^VA(15,DA,0),U,1,2) K ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,%),2,+$P(X,U,%#2+1),DA)
"^DD",15,15,.04,1,1,"%D",0)
^^2^2^2900607^
"^DD",15,15,.04,1,1,"%D",1,0)
This xref kills the existing "ALK" xref for this entry and resets it to be
"^DD",15,15,.04,1,1,"%D",2,0)
in order 'from' 'to'.  See "ALK" xref on STATUS field for more info.
"^DD",15,15,.04,1,2,0)
15^AFR^MUMPS
"^DD",15,15,.04,1,2,1)
S:X="V" X=$P(^VA(15,DA,0),U,1),^VA(15,"AFR",$P(X,";",2),+X,DA)=""
"^DD",15,15,.04,1,2,2)
Q:X'="V"  S X=$P(^VA(15,DA,0),U,1) K ^VA(15,"AFR",$P(X,";",2),+X,DA)
"^DD",15,15,.04,1,3,0)
15^ATO^MUMPS
"^DD",15,15,.04,1,3,1)
S:X="V" X=$P(^VA(15,DA,0),U,2),^VA(15,"ATO",$P(X,";",2),+X,DA)=""
"^DD",15,15,.04,1,3,2)
Q:X'="V"  S X=$P(^VA(15,DA,0),U,2) K ^VA(15,"ATO",$P(X,";",2),+X,DA)
"^DD",15,15,.04,4)
S %=$P(^VA(15,DA,0),U,1,2) W !,?5,"RECORD1=",$P(@(U_$P($P(%,U,1),";",2)_+%_",0)"),U,1),!,?5,"RECORD2=",$P(@(U_$P($P(%,U,2),";",2)_+$P(%,U,2)_",0)"),U,1),!
"^DD",15,15,.04,5,1,0)
15^.03^7
"^DD",15,15,.04,12)
Must be verified duplicate
"^DD",15,15,.04,12.1)
S DIC("S")="I $P(^VA(15,DA,0),U,3)=""V"""
"^DD",15,15,.04,21,0)
^^5^5^2960213^^^^
"^DD",15,15,.04,21,1,0)
This field indicates in which direction the merge is to occur, RECORD1 to
"^DD",15,15,.04,21,2,0)
RECORD2 or RECORD2 to RECORD1.  This field cannot be modified once set.
"^DD",15,15,.04,21,3,0)

"^DD",15,15,.04,21,4,0)
Note:  Q:X=""  on kill side of "ALK2" xref is because deleting an entry
"^DD",15,15,.04,21,5,0)
       using ^DIK may set this field to NULL via a TRIGGER.
"^DD",15,15,.04,23,0)
^^5^5^2960213^^^^
"^DD",15,15,.04,23,1,0)
This field indicates in which direction the merge is to occur, RECORD1 to
"^DD",15,15,.04,23,2,0)
RECORD2 or RECORD2 to RECORD1.  This field cannot be modified once set.
"^DD",15,15,.04,23,3,0)

"^DD",15,15,.04,23,4,0)
Note:  Q:X=""  on kill side of "ALK2" xref is because deleting an entry
"^DD",15,15,.04,23,5,0)
       using ^DIK may set this field to NULL via a TRIGGER.
"^DD",15,15,.04,"DT")
2900709
"^DD",15,15,.05,0)
MERGE STATUS^*S^0:NOT READY;1:READY;2:MERGED;3:IN PROGRESS;^0;5^Q
"^DD",15,15,.05,1,0)
^.1^^-1
"^DD",15,15,.05,1,1,0)
15^AFR^MUMPS
"^DD",15,15,.05,1,1,1)
Q:X'=2  S X=$P(^VA(15,DA,0),U,1,2),%=+$P(^(0),U,4),^VA(15,"AFR",$P($P(X,";",2),U,1),+$P(X,U,%),DA)=""
"^DD",15,15,.05,1,1,2)
Q:X'=2  S X=$P(^VA(15,DA,0),U,1,2) K ^VA(15,"AFR",$P($P(X,";",2),U,1),+$P(X,U,1),DA),^VA(15,"AFR",$P($P(X,";",2),U,1),+$P(X,U,2),DA)
"^DD",15,15,.05,1,1,"%D",0)
^^12^12^2900607^^^
"^DD",15,15,.05,1,1,"%D",1,0)
This xref is permanent and exists for all merged entries.  It indicates
"^DD",15,15,.05,1,1,"%D",2,0)
which file entry was the 'from' entry.  It is used by the INPUT TRANSFORMS
"^DD",15,15,.05,1,1,"%D",3,0)
on the .01 and .02 fields to prevent entering a file entry that has
"^DD",15,15,.05,1,1,"%D",4,0)
already been merged away.
"^DD",15,15,.05,1,1,"%D",5,0)

"^DD",15,15,.05,1,1,"%D",6,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.05,1,1,"%D",7,0)

"^DD",15,15,.05,1,1,"%D",8,0)
^VA(15,"AFR","DPT(",fe#,DA)=""  where fe# is the 'from' file entry.
"^DD",15,15,.05,1,1,"%D",9,0)

"^DD",15,15,.05,1,1,"%D",10,0)
Note that the kill side of this xref kills all possible combinations
"^DD",15,15,.05,1,1,"%D",11,0)
because deleting an entry in this file using ^DIK results in the MERGE
"^DD",15,15,.05,1,1,"%D",12,0)
DIRECTION field being NULL when this xref is fired.
"^DD",15,15,.05,1,2,0)
15^ATO^MUMPS
"^DD",15,15,.05,1,2,1)
Q:X'=2  S X=$P(^VA(15,DA,0),U,1,2),%=+$P(^(0),U,4)#2+1,^VA(15,"ATO",$P($P(X,";",2),U,1),+$P(X,U,%),DA)=""
"^DD",15,15,.05,1,2,2)
Q:X'=2  S X=$P(^VA(15,DA,0),U,1,2) K ^VA(15,"ATO",$P($P(X,";",2),U,1),+$P(X,U,1),DA),^VA(15,"ATO",$P($P(X,";",2),U,1),+$P(X,U,2),DA)
"^DD",15,15,.05,1,2,"%D",0)
^^11^11^2900607^
"^DD",15,15,.05,1,2,"%D",1,0)
This xref is permanent and exists for all merged entires.  It indicates
"^DD",15,15,.05,1,2,"%D",2,0)
which file entry was the 'to' entry.  It is currently not used by the
"^DD",15,15,.05,1,2,"%D",3,0)
dictionary.
"^DD",15,15,.05,1,2,"%D",4,0)

"^DD",15,15,.05,1,2,"%D",5,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.05,1,2,"%D",6,0)

"^DD",15,15,.05,1,2,"%D",7,0)
^VA(15,"ATO","DPT(",fe#,DA)="" where fe# is the 'to' file entry.
"^DD",15,15,.05,1,2,"%D",8,0)

"^DD",15,15,.05,1,2,"%D",9,0)
Note that the kill side of this xref kills all possible combinations
"^DD",15,15,.05,1,2,"%D",10,0)
because deleting an entry in this file using ^DIK results in the MERGE
"^DD",15,15,.05,1,2,"%D",11,0)
DIRECTION field being NULL when this xref is fired.
"^DD",15,15,.05,1,3,0)
15^AMRG^MUMPS
"^DD",15,15,.05,1,3,1)
Q:X=2  S %=$P($P(^VA(15,DA,0),U,1),";",2),^VA(15,"AMRG",%,X,DA)=""
"^DD",15,15,.05,1,3,2)
S %=$P($P(^VA(15,DA,0),U,1),";",2) K ^VA(15,"AMRG",%,X,DA)
"^DD",15,15,.05,1,3,"%D",0)
^^9^9^2900607^
"^DD",15,15,.05,1,3,"%D",1,0)
This xref is short lived and exists only for entries that are verified
"^DD",15,15,.05,1,3,"%D",2,0)
duplicates that have not yet been merged.
"^DD",15,15,.05,1,3,"%D",3,0)

"^DD",15,15,.05,1,3,"%D",4,0)
The form of this xref, using file 2 as an example, is:
"^DD",15,15,.05,1,3,"%D",5,0)

"^DD",15,15,.05,1,3,"%D",6,0)
^VA(15,"AMRG","DPT(",n,DA)="" where 'n' will be 0 for a MERGE STATUS of
"^DD",15,15,.05,1,3,"%D",7,0)
                              NOT READY and a 1 for READY.
"^DD",15,15,.05,1,3,"%D",8,0)

"^DD",15,15,.05,1,3,"%D",9,0)
Once merged the "AMRG" xref for this entry will be killed.
"^DD",15,15,.05,1,4,0)
15^ALK3^MUMPS
"^DD",15,15,.05,1,4,1)
Q:X'=2  S X=$P(^VA(15,DA,0),U,1,2),%=$P(^(0),U,4) K ^VA(15,"ALK",$P($P(X,";",2),U,1),+$P(X,U,%),2,+$P(X,U,%#2+1),DA)
"^DD",15,15,.05,1,4,2)
Q
"^DD",15,15,.05,1,4,"%D",0)
^^2^2^2900607^
"^DD",15,15,.05,1,4,"%D",1,0)
This xref kills the "ALK" xref for this entry.  See the "ALK" xref on the
"^DD",15,15,.05,1,4,"%D",2,0)
STATUS field for more info.
"^DD",15,15,.05,1,5,0)
^^TRIGGER^15^.08
"^DD",15,15,.05,1,5,1)
X ^DD(15,.05,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(15,.05,1,5,1.4)
"^DD",15,15,.05,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(15,.05,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1)="MERGED" S:X X=$D(DIU(0))=0
"^DD",15,15,.05,1,5,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=15,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,.05,1,5,2)
Q
"^DD",15,15,.05,1,5,"%D",0)
^^5^5^2900613^^
"^DD",15,15,.05,1,5,"%D",1,0)
This TRIGGER sets the DATE RESOLVED field when the merge status is set
"^DD",15,15,.05,1,5,"%D",2,0)
to 'merged'.
"^DD",15,15,.05,1,5,"%D",3,0)

"^DD",15,15,.05,1,5,"%D",4,0)
The conditional logic on this TRIGGER was modified, using ^%GEDIT, to
"^DD",15,15,.05,1,5,"%D",5,0)
prevent firing during a RE-INDEX.
"^DD",15,15,.05,1,5,"CREATE CONDITION")
MERGE STATUS="MERGED"
"^DD",15,15,.05,1,5,"CREATE VALUE")
TODAY
"^DD",15,15,.05,1,5,"DELETE VALUE")
NO EFFECT
"^DD",15,15,.05,1,5,"FIELD")
DATE RESOLVED
"^DD",15,15,.05,1,6,0)
15^ADJ^MUMPS
"^DD",15,15,.05,1,6,1)
Q:X'=2  S X="XDRDADJ" X ^%ZOSF("TEST") D:$T ^XDRDADJ
"^DD",15,15,.05,1,6,2)
Q
"^DD",15,15,.05,1,6,"%D",0)
^^8^8^2900830^^^^
"^DD",15,15,.05,1,6,"%D",1,0)
This xref is fired only when an entry has been merged.  The routine ^XDRDADJ
"^DD",15,15,.05,1,6,"%D",2,0)
then looks at the file to determine if any other file entry pairs need to
"^DD",15,15,.05,1,6,"%D",3,0)
be adjusted.  For example, using file 2, if patient 5 was merged to patient
"^DD",15,15,.05,1,6,"%D",4,0)
10, and there was a potential duplicate entry for patient 5 and patient 15,
"^DD",15,15,.05,1,6,"%D",5,0)
that entry would be changed to patient 10 and patient 15.
"^DD",15,15,.05,1,6,"%D",6,0)

"^DD",15,15,.05,1,6,"%D",7,0)
There are other possible situations that are far more complex than the
"^DD",15,15,.05,1,6,"%D",8,0)
above example.
"^DD",15,15,.05,1,6,"DT")
2900830
"^DD",15,15,.05,3)
This field indicates the status of verified duplicate entries with respect to merging.
"^DD",15,15,.05,5,1,0)
15.01101^.02^2
"^DD",15,15,.05,5,2,0)
15^.03^8
"^DD",15,15,.05,12)
Must be verified duplicate and once merged cannot be modified
"^DD",15,15,.05,12.1)
S DIC("S")="I $P(^VA(15,DA,0),U,3)=""V"",$P(^(0),U,5)'=2"
"^DD",15,15,.05,21,0)
^^8^8^2890725^^^^
"^DD",15,15,.05,21,1,0)
This field is set when a duplicate record pair is verified as a duplicate.
"^DD",15,15,.05,21,2,0)
The actual merge will not occur until this field is set to READY (1).  The
"^DD",15,15,.05,21,3,0)
merge routine will set this field to MERGED (2).  Once set to MERGED (2)
"^DD",15,15,.05,21,4,0)
this field cannot be modified.
"^DD",15,15,.05,21,5,0)

"^DD",15,15,.05,21,6,0)
Note:  Kill side of "AFR" and "ATO" xref kill all possible combinations of
"^DD",15,15,.05,21,7,0)
       xref because deleting an entry in this file using ^DIK results in
"^DD",15,15,.05,21,8,0)
       the .04 field being NULL when these xrefs are fired.
"^DD",15,15,.05,23,0)
^^8^8^2900830^^^^
"^DD",15,15,.05,23,1,0)
This field is set when a duplicate record pair is verified as a duplicate.
"^DD",15,15,.05,23,2,0)
The actual merge will not occur until this field is set to READY (1).  The
"^DD",15,15,.05,23,3,0)
merge routine will set this field to MERGED (2).  Once set to MERGED (2)
"^DD",15,15,.05,23,4,0)
this field cannot be modified.
"^DD",15,15,.05,23,5,0)

"^DD",15,15,.05,23,6,0)
Note:  Kill side of "AFR" and "ATO" xref kill all possible combinations of
"^DD",15,15,.05,23,7,0)
       xref because deleting an entry in this file using ^DIK results in
"^DD",15,15,.05,23,8,0)
       the .04 field being NULL when these xrefs are fired.
"^DD",15,15,.05,"DEL",.05,0)
I 1
"^DD",15,15,.05,"DT")
2960505
"^DD",15,15,.06,0)
DATE FOUND^RD^^0;6^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",15,15,.06,5,1,0)
15^.01^2
"^DD",15,15,.06,9)
^
"^DD",15,15,.06,21,0)
^^2^2^2890717^
"^DD",15,15,.06,21,1,0)
This field indicates the date this duplicate record pair was added to this
"^DD",15,15,.06,21,2,0)
file.
"^DD",15,15,.06,23,0)
^^2^2^2900830^^
"^DD",15,15,.06,23,1,0)
This field indicates the date this duplicate record pair was added to this
"^DD",15,15,.06,23,2,0)
file.
"^DD",15,15,.06,"DT")
2870402
"^DD",15,15,.07,0)
DATE VERIFIED^DX^^0;7^S %DT="ETX" D ^%DT S X=Y K:Y<1 X I $D(X),$P(^VA(15,DA,0),U,3)="P" W " Not verified! " K X
"^DD",15,15,.07,3)

"^DD",15,15,.07,5,1,0)
15^.03^5
"^DD",15,15,.07,9)
^
"^DD",15,15,.07,21,0)
^^3^3^2890721^^
"^DD",15,15,.07,21,1,0)
This field contains the date this duplicate record pair was verified.
"^DD",15,15,.07,21,2,0)
The STATUS field must be set to "N" or "V" before data can be entered
"^DD",15,15,.07,21,3,0)
in this field.
"^DD",15,15,.07,23,0)
^^3^3^2900830^^^
"^DD",15,15,.07,23,1,0)
This field contains the date this duplicate record pair was verified.
"^DD",15,15,.07,23,2,0)
The STATUS field must be set to "N" or "V" before data can be entered
"^DD",15,15,.07,23,3,0)
in this field.
"^DD",15,15,.07,"DT")
2890718
"^DD",15,15,.08,0)
DATE RESOLVED^D^^0;8^S %DT="ETX" D ^%DT S X=Y K:Y<1 X
"^DD",15,15,.08,3)

"^DD",15,15,.08,5,1,0)
15^.03^9
"^DD",15,15,.08,5,2,0)
15^.05^5
"^DD",15,15,.08,9)
^
"^DD",15,15,.08,21,0)
^^3^3^2960213^^^
"^DD",15,15,.08,21,1,0)
This field indicates the date this duplicate record pair was resolved.
"^DD",15,15,.08,21,2,0)
This field will be set by the dictionary when the STATUS field is set
"^DD",15,15,.08,21,3,0)
to "N" or the MERGE STATUS field is set to MERGED.
"^DD",15,15,.08,23,0)
^^3^3^2960213^^^^
"^DD",15,15,.08,23,1,0)
This field indicates the date this duplicate record pair was resolved.
"^DD",15,15,.08,23,2,0)
This field will be set by the dictionary when the STATUS field is set
"^DD",15,15,.08,23,3,0)
to "N" or the MERGE STATUS field is set to MERGED.
"^DD",15,15,.08,"DT")
2870408
"^DD",15,15,.09,0)
WHO CREATED^P200'^VA(200,^0;9^Q
"^DD",15,15,.09,5,1,0)
15^.01^3
"^DD",15,15,.09,9)
^
"^DD",15,15,.09,21,0)
^^2^2^2890717^
"^DD",15,15,.09,21,1,0)
This field contains the user who created this entry.  If the entry was
"^DD",15,15,.09,21,2,0)
created by software this field will be NULL.
"^DD",15,15,.09,23,0)
^^2^2^2900830^^
"^DD",15,15,.09,23,1,0)
This field contains the user who created this entry.  If the entry was
"^DD",15,15,.09,23,2,0)
created by software this field will be NULL.
"^DD",15,15,.09,"DT")
2910618
"^DD",15,15,.1,0)
VERIF STARTED DATE^D^^0;10^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",15,15,.1,3)
This is the date on which the status changed from POTENTIAL DUPLICATE to VERIFICATION IN PROGRESS
"^DD",15,15,.1,21,0)
^^2^2^2960410^
"^DD",15,15,.1,21,1,0)
This is the date on which the status changed from POTENTIAL DUPLICATE to
"^DD",15,15,.1,21,2,0)
VERIFICATION IN PROGRESS.
"^DD",15,15,.1,"DT")
2960410
"^DD",15,15,.11,0)
WHO VERIFIED^P200'X^VA(200,^0;11^S %=$P(^VA(15,DA,0),U,3)="P" W:% " Not verified! " K:% X
"^DD",15,15,.11,5,1,0)
15^.03^6
"^DD",15,15,.11,9)
^
"^DD",15,15,.11,21,0)
^^3^3^2890721^^
"^DD",15,15,.11,21,1,0)
This field indicates the user who verified this duplicate record pair.
"^DD",15,15,.11,21,2,0)
The STATUS must be set to "N" or "V" before data can be entered in
"^DD",15,15,.11,21,3,0)
this field.
"^DD",15,15,.11,23,0)
^^3^3^2900830^^^
"^DD",15,15,.11,23,1,0)
This field indicates the user who verified this duplicate record pair.
"^DD",15,15,.11,23,2,0)
The STATUS must be set to "N" or "V" before data can be entered in
"^DD",15,15,.11,23,3,0)
this field.
"^DD",15,15,.11,"DT")
2890718
"^DD",15,15,.12,0)
WHO CHANGED^P200'I^VA(200,^0;12^Q
"^DD",15,15,.12,1,0)
^.1
"^DD",15,15,.12,1,1,0)
15^AVCHG
"^DD",15,15,.12,1,1,1)
S ^VA(15,"AVCHG",$E(X,1,30),DA)=""
"^DD",15,15,.12,1,1,2)
K ^VA(15,"AVCHG",$E(X,1,30),DA)
"^DD",15,15,.12,1,1,"%D",0)
^^8^8^2900607^
"^DD",15,15,.12,1,1,"%D",1,0)
This xref is set only when the STATUS field is changed from "V" to any
"^DD",15,15,.12,1,1,"%D",2,0)
other value.  This is because the WHO CHANGED is set only by a TRIGGER
"^DD",15,15,.12,1,1,"%D",3,0)
under the above conditon.  The reason this is critical is other packages
"^DD",15,15,.12,1,1,"%D",4,0)
may have been notified to do the merge.
"^DD",15,15,.12,1,1,"%D",5,0)

"^DD",15,15,.12,1,1,"%D",6,0)
The form of this xref is:
"^DD",15,15,.12,1,1,"%D",7,0)

"^DD",15,15,.12,1,1,"%D",8,0)
^VA(15,"AVCHG",n,DA)="" where 'n' is the user number.
"^DD",15,15,.12,5,1,0)
15^.03^10
"^DD",15,15,.12,9)
^
"^DD",15,15,.12,21,0)
^^3^3^2970219^^
"^DD",15,15,.12,21,1,0)
This field is set when the STATUS field is changed from "V" to any other
"^DD",15,15,.12,21,2,0)
value.  The reason this is so important is other packages have been
"^DD",15,15,.12,21,3,0)
notified and may have already done the merge.
"^DD",15,15,.12,23,0)
^^3^3^2970219^^^
"^DD",15,15,.12,23,1,0)
This field is set when the STATUS field is changed from "V" to any other
"^DD",15,15,.12,23,2,0)
value.  The reason this is so important is other packages have been
"^DD",15,15,.12,23,3,0)
notified and may have already done the merge.
"^DD",15,15,.12,"DT")
2910618
"^DD",15,15,.13,0)
APPROVED FOR BACK UP^S^0:NO;1:YES;^0;13^Q
"^DD",15,15,.13,3)
Select YES only if the records of both the entry being merged and the entry being merged into have been fully backed up.
"^DD",15,15,.13,21,0)
^^2^2^2960503^
"^DD",15,15,.13,21,1,0)
This field is used to document that a backup of the records has been
"^DD",15,15,.13,21,2,0)
generated.  This is required prior to merging the records.
"^DD",15,15,.13,"DT")
2970218
"^DD",15,15,.14,0)
BACKUP INDICATED BY^F^^0;14^K:$L(X)>60!($L(X)<3) X
"^DD",15,15,.14,3)
Answer must be 3-60 characters in length.
"^DD",15,15,.14,21,0)
^^3^3^2960503^
"^DD",15,15,.14,21,1,0)
This field is used to document the user who indicates that the backup has
"^DD",15,15,.14,21,2,0)
been generated and/or the fact that the backup was generated by the
"^DD",15,15,.14,21,3,0)
duplicate merge system.
"^DD",15,15,.14,"DT")
2970210
"^DD",15,15,.15,0)
DC TOTAL POSSIBLE SCORE^NJ2,0^^0;15^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",15,15,.15,3)
Type a Number between 1 and 99, 0 Decimal Digits
"^DD",15,15,.15,21,0)
^^3^3^2931216^
"^DD",15,15,.15,21,1,0)

"^DD",15,15,.15,21,2,0)
This is the maximum possible score if this entry matches exactly to its
"^DD",15,15,.15,21,3,0)
couterpart.
"^DD",15,15,.15,23,0)
^^2^2^2900830^
"^DD",15,15,.15,23,1,0)
This field contains the highest possible score that can be computed
"^DD",15,15,.15,23,2,0)
for this 'duplicate record' entry.
"^DD",15,15,.15,"DT")
2900830
"^DD",15,15,.16,0)
DC VERIFIED DUPE THRESHOLD %^NJ3,0^^0;16^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15,15,.16,3)
Type a Number between 0 and 100, 0 Decimal Digits
"^DD",15,15,.16,21,0)
^^3^3^2931216^
"^DD",15,15,.16,21,1,0)

"^DD",15,15,.16,21,2,0)
This is the lowest % possible that will mark this entry as 'verified
"^DD",15,15,.16,21,3,0)
duplicate'.
"^DD",15,15,.16,23,0)
^^4^4^2901002^^
"^DD",15,15,.16,23,1,0)
This field contains the percent of the highest possible score that
"^DD",15,15,.16,23,2,0)
will cause this 'duplicate record' entry to become a 'verified duplicate'.
"^DD",15,15,.16,23,3,0)
If no score, no matter how high, should cause an entry to be a 'verified
"^DD",15,15,.16,23,4,0)
duplicate', this field should be left empty.
"^DD",15,15,.16,"DT")
2901002
"^DD",15,15,.17,0)
DC POTENTIAL DUPE THRESHOLD %^NJ3,0^^0;17^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15,15,.17,3)
Type a Number between 0 and 100, 0 Decimal Digits
"^DD",15,15,.17,21,0)
^^3^3^2931216^
"^DD",15,15,.17,21,1,0)

"^DD",15,15,.17,21,2,0)
This is the lowest possible % of the total duplicate score that would mark
"^DD",15,15,.17,21,3,0)
this entry as 'potential duplicate/unverified'.
"^DD",15,15,.17,23,0)
^^3^3^2901002^^
"^DD",15,15,.17,23,1,0)
This field contains the percent of the highest possible score that
"^DD",15,15,.17,23,2,0)
will cause this 'duplicate record' entry to become a 'potential duplicate/
"^DD",15,15,.17,23,3,0)
unverified'.
"^DD",15,15,.17,"DT")
2901002
"^DD",15,15,.18,0)
DC DUPE MATCH SCORE^NJ3,0^^0;18^K:+X'=X!(X>500)!(X<0)!(X?.E1"."1N.N) X
"^DD",15,15,.18,3)
Type a Number between 0 and 500, 0 Decimal Digits
"^DD",15,15,.18,21,0)
^^2^2^2931216^
"^DD",15,15,.18,21,1,0)

"^DD",15,15,.18,21,2,0)
Actual duplicate score computed.
"^DD",15,15,.18,23,0)
^^2^2^2901002^^
"^DD",15,15,.18,23,1,0)
This field contains the actual score computed when this 'duplicate record'
"^DD",15,15,.18,23,2,0)
entry was analyzed by the duplicate resolution software.
"^DD",15,15,.18,"DT")
2900830
"^DD",15,15,.19,0)
DC DUPE MATCH PERCENTILE^NJ3,0^^0;19^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15,15,.19,3)
Type a Number between 0 and 100, 0 Decimal Digits
"^DD",15,15,.19,21,0)
^^2^2^2931216^
"^DD",15,15,.19,21,1,0)

"^DD",15,15,.19,21,2,0)
This is the % of the total possible match score.
"^DD",15,15,.19,23,0)
^^3^3^2901002^^
"^DD",15,15,.19,23,1,0)
This field contains the percent of the total possible score computed
"^DD",15,15,.19,23,2,0)
for this 'duplicate record' entry when it was analyzed by the duplicate
"^DD",15,15,.19,23,3,0)
resolution software.
"^DD",15,15,.19,"DT")
2901002
"^DD",15,15,.2,0)
MERGE PROCESS^P15.2'^VA(15.2,^0;20^Q
"^DD",15,15,.2,3)
This is the Merge Process which is associated with the merge of this duplicate pair
"^DD",15,15,.2,21,0)
^^4^4^2951201^
"^DD",15,15,.2,21,1,0)
This field indicates which entry is the XDR MERGE PROCESS file this entry
"^DD",15,15,.2,21,2,0)
is associated with.  The merge process contains information on the status
"^DD",15,15,.2,21,3,0)
of the merge of the duplicate pair(s) included within the given process
"^DD",15,15,.2,21,4,0)
and the extent of completion.
"^DD",15,15,.2,"DT")
2951201
"^DD",15,15,1,0)
REMARKS^F^^1;1^K:$L(X)>50!($L(X)<1) X
"^DD",15,15,1,3)
ANSWER MUST BE 1-50 CHARACTERS IN LENGTH
"^DD",15,15,1,21,0)
^^2^2^2931216^
"^DD",15,15,1,21,1,0)

"^DD",15,15,1,21,2,0)
This field contains special comments about the duplicate record.
"^DD",15,15,1,"DT")
2870406
"^DD",15,15,2,0)
IDENTIFYING SERVICE^15.02^^2;0
"^DD",15,15,3,0)
OVERWRITE IN FILE^15.03A^^3;0
"^DD",15,15,1101,0)
MERGE PACKAGES^15.01101P^^11;0
"^DD",15,15,1101,21,0)
^^9^9^2890724^^
"^DD",15,15,1101,21,1,0)
This multiple contains an entry for each package from the package file
"^DD",15,15,1101,21,2,0)
that is affected by the merging of entries in the file specified in
"^DD",15,15,1101,21,3,0)
this files .01 field.  The STATUS field of this multiple will be set
"^DD",15,15,1101,21,4,0)
to 0=NOT READY if the package has the 'from' entry in the subject file
"^DD",15,15,1101,21,5,0)
and does not have a merge routine specified in the package file.  The
"^DD",15,15,1101,21,6,0)
STATUS field will be set to 1=READY if the package has the 'from' entry
"^DD",15,15,1101,21,7,0)
and also has a merge routine specified in the package file.  It will be
"^DD",15,15,1101,21,8,0)
set to 2=NO FROM ENTRY if the package does not have the 'from' entry,
"^DD",15,15,1101,21,9,0)
regardless of whether the package has a merge routine or not.
"^DD",15,15,1101,23,0)
^^9^9^2900830^^^
"^DD",15,15,1101,23,1,0)
This multiple contains an entry for each package from the package file
"^DD",15,15,1101,23,2,0)
that is affected by the merging of entries in the file specified in
"^DD",15,15,1101,23,3,0)
this files .01 field.  The STATUS field of this multiple will be set
"^DD",15,15,1101,23,4,0)
to 0=NOT READY if the package has the 'from' entry in the subject file
"^DD",15,15,1101,23,5,0)
and does not have a merge routine specified in the package file.  The
"^DD",15,15,1101,23,6,0)
STATUS field will be set to 1=READY if the package has the 'from' entry
"^DD",15,15,1101,23,7,0)
and also has a merge routine specified in the package file.  It will be
"^DD",15,15,1101,23,8,0)
set to 2=NO FROM ENTRY if the package does not have the 'from' entry,
"^DD",15,15,1101,23,9,0)
regardless of whether the package has a merge routine or not.
"^DD",15,15,1300,0)
CHECK POINTS^15.013^^CP;0
"^DD",15,15,2101,0)
DUPLICATE TESTS/SCORES^15.02101A^^21;0
"^DD",15,15,2101,21,0)
^^2^2^2931216^
"^DD",15,15,2101,21,1,0)

"^DD",15,15,2101,21,2,0)
This field contains the comparison tests and the scores.
"^DD",15,15,2101,23,0)
^^3^3^2900830^
"^DD",15,15,2101,23,1,0)
This multiple contains the individual tests, and their resulting scores,
"^DD",15,15,2101,23,2,0)
when this 'duplicate record' entry was analyzed by the duplicate
"^DD",15,15,2101,23,3,0)
resolution software.
"^DD",15,15,99991,0)
LOOKUP1^CJ8^^ ; ^S X="`"_+^VA(15,D0,0)
"^DD",15,15,99991,9)
^
"^DD",15,15,99991,9.01)

"^DD",15,15,99991,9.1)
S X="`"_+^VA(15,D0,0)
"^DD",15,15,99991,21,0)
^^1^1^2890717^^
"^DD",15,15,99991,21,1,0)
This field is used to navigate to the file pointed to by RECORD1.
"^DD",15,15,99991,23,0)
^^1^1^2900830^^^^
"^DD",15,15,99991,23,1,0)
This field is used to navigate to the file pointed to by RECORD1.
"^DD",15,15,99992,0)
LOOKUP2^CJ8^^ ; ^S X="`"_+$P(^VA(15,D0,0),U,2)
"^DD",15,15,99992,9)
^
"^DD",15,15,99992,9.01)

"^DD",15,15,99992,9.1)
S X="`"_+$P(^VA(15,D0,0),U,2)
"^DD",15,15,99992,21,0)
^^1^1^2890717^^
"^DD",15,15,99992,21,1,0)
This field is used to navigate to the file pointed to by RECORD2.
"^DD",15,15,99992,23,0)
^^1^1^2900830^^^
"^DD",15,15,99992,23,1,0)
This field is used to navigate to the file pointed to by RECORD2.
"^DD",15,15,99993,0)
LOOKUP3^CJ8^^ ; ^S X="`"_D0
"^DD",15,15,99993,9)
^
"^DD",15,15,99993,9.01)

"^DD",15,15,99993,9.1)
S X="`"_D0
"^DD",15,15,99993,21,0)
^^2^2^2890727^
"^DD",15,15,99993,21,1,0)
This computed field provides navigational capability to any file that points
"^DD",15,15,99993,21,2,0)
to this file and has a DINUM relationship.
"^DD",15,15,99993,23,0)
^^2^2^2900830^^
"^DD",15,15,99993,23,1,0)
This computed field provides navigational capability to any file that points
"^DD",15,15,99993,23,2,0)
to this file and has a DINUM relationship.
"^DD",15,15,99993,"DT")
2890808
"^DD",15,15,999999901,0)
MFI CONTROLLED^SI^1:MERGE;2:INSTALL;^9999999;1^Q
"^DD",15,15,999999901,1,0)
^.1
"^DD",15,15,999999901,1,1,0)
15^AMFIC
"^DD",15,15,999999901,1,1,1)
S ^VA(15,"AMFIC",$E(X,1,30),DA)=""
"^DD",15,15,999999901,1,1,2)
K ^VA(15,"AMFIC",$E(X,1,30),DA)
"^DD",15,15,999999901,1,1,"%D",0)
^^2^2^2900816^^^^
"^DD",15,15,999999901,1,1,"%D",1,0)
This xref is set to allow the MFI duplicate resolution software direct
"^DD",15,15,999999901,1,1,"%D",2,0)
access to MFI controlled entries.
"^DD",15,15,999999901,1,1,"DT")
2900703
"^DD",15,15,999999901,1,2,0)
^^TRIGGER^15^999999902
"^DD",15,15,999999901,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^VA(15,D0,9999999)):^(9999999),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=0 X ^DD(15,999999901,1,2,1.4)
"^DD",15,15,999999901,1,2,1.4)
S DIH=$S($D(^VA(15,DIV(0),9999999)):^(9999999),1:""),DIV=X S $P(^(9999999),U,2)=DIV,DIH=15,DIG=999999902 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15,999999901,1,2,2)
Q
"^DD",15,15,999999901,1,2,"%D",0)
^^3^3^2900703^
"^DD",15,15,999999901,1,2,"%D",1,0)
This trigger sets the MFI RESOLVED field to 0=UNRESOLVED when a value
"^DD",15,15,999999901,1,2,"%D",2,0)
is entered into this field.  It has no effect on the change/delete side
"^DD",15,15,999999901,1,2,"%D",3,0)
because this field is uneditable.
"^DD",15,15,999999901,1,2,"CREATE VALUE")
S X=0
"^DD",15,15,999999901,1,2,"DELETE VALUE")
NO EFFECT
"^DD",15,15,999999901,1,2,"DT")
2900703
"^DD",15,15,999999901,1,2,"FIELD")
MFI RESOLVED
"^DD",15,15,999999901,3)

"^DD",15,15,999999901,21,0)
^^2^2^2931216^
"^DD",15,15,999999901,21,1,0)

"^DD",15,15,999999901,21,2,0)
This field is for MultiFacility Integration software use only.
"^DD",15,15,999999901,23,0)
^^8^8^2900703^^^^
"^DD",15,15,999999901,23,1,0)
This field is set for entries entered by MFI software.  Any entry with a
"^DD",15,15,999999901,23,2,0)
value in this field is under MFI control and cannot be seen by any user
"^DD",15,15,999999901,23,3,0)
other than the MFI manager.  The value of this field indicates whether
"^DD",15,15,999999901,23,4,0)
this entry was created by an 'install' or a 'merge' command.
"^DD",15,15,999999901,23,5,0)

"^DD",15,15,999999901,23,6,0)
If the local site is an integration site this field may have either
"^DD",15,15,999999901,23,7,0)
value.  If the local site is a facility all entries will be for 'merge'
"^DD",15,15,999999901,23,8,0)
commands.
"^DD",15,15,999999901,"DT")
2900703
"^DD",15,15,999999902,0)
MFI RESOLVED^S^0:UNRESOLVED;1:RESOLVED;^9999999;2^Q
"^DD",15,15,999999902,1,0)
^.1
"^DD",15,15,999999902,1,1,0)
15^AMFIR
"^DD",15,15,999999902,1,1,1)
S:'X ^VA(15,"AMFIR",$E(X,1,30),DA)=""
"^DD",15,15,999999902,1,1,2)
K ^VA(15,"AMFIR",$E(X,1,30),DA)
"^DD",15,15,999999902,1,1,"%D",0)
^^2^2^2900816^^^
"^DD",15,15,999999902,1,1,"%D",1,0)
This xref is set for unresolved entries only.  When the entry is changed
"^DD",15,15,999999902,1,1,"%D",2,0)
to resolved this xref is deleted.
"^DD",15,15,999999902,1,1,"DT")
2900703
"^DD",15,15,999999902,1,2,0)
15^AMFIP2^MUMPS
"^DD",15,15,999999902,1,2,1)
I X S %=^VA(15,DA,9999999),%=$P(%,U,3) S:% ^VA(15,"AMFIP",%,DA)=X
"^DD",15,15,999999902,1,2,2)
I X S %=^VA(15,DA,9999999),%=$P(%,U,3) S:% ^VA(15,"AMFIP",%,DA)=""
"^DD",15,15,999999902,1,2,"%D",0)
^^2^2^2900703^
"^DD",15,15,999999902,1,2,"%D",1,0)
This xref sets the value of the "AMFIP" xref to 1 once this entry is
"^DD",15,15,999999902,1,2,"%D",2,0)
resolved.  It sets it back to "" if this field is changed from resolved.
"^DD",15,15,999999902,1,2,"DT")
2900703
"^DD",15,15,999999902,5,1,0)
15^999999901^2
"^DD",15,15,999999902,21,0)
^^2^2^2931216^
"^DD",15,15,999999902,21,1,0)

"^DD",15,15,999999902,21,2,0)
This field is for MultiFacility Integration software use only.
"^DD",15,15,999999902,23,0)
^^3^3^2900703^^^
"^DD",15,15,999999902,23,1,0)
This field is for MFI use only and is set to 0 by a trigger when the MFI
"^DD",15,15,999999902,23,2,0)
CONTROLLED field is set.  It is then set to 1 by the MFI duplicate
"^DD",15,15,999999902,23,3,0)
resolution/merge software once it has completed this entry.
"^DD",15,15,999999902,"DT")
2900703
"^DD",15,15,999999903,0)
MFI PATIENT^P2'^DPT(^9999999;3^Q
"^DD",15,15,999999903,1,0)
^.1
"^DD",15,15,999999903,1,1,0)
15^AMFIP
"^DD",15,15,999999903,1,1,1)
S ^VA(15,"AMFIP",$E(X,1,30),DA)=""
"^DD",15,15,999999903,1,1,2)
K ^VA(15,"AMFIP",$E(X,1,30),DA)
"^DD",15,15,999999903,1,1,"%D",0)
^^2^2^2900703^
"^DD",15,15,999999903,1,1,"%D",1,0)
This xref contains the controlled patient when an entry in this file
"^DD",15,15,999999903,1,1,"%D",2,0)
is under MFI control because of an 'install' command.
"^DD",15,15,999999903,1,1,"DT")
2900703
"^DD",15,15,999999903,21,0)
^^2^2^2931216^
"^DD",15,15,999999903,21,1,0)

"^DD",15,15,999999903,21,2,0)
This field is for MultiFacility Integration software use only.
"^DD",15,15,999999903,23,0)
^^6^6^2900703^^
"^DD",15,15,999999903,23,1,0)
This field is for MFI use only and contains the controlled patient for
"^DD",15,15,999999903,23,2,0)
an 'install' command.
"^DD",15,15,999999903,23,3,0)

"^DD",15,15,999999903,23,4,0)
So long as a patient is unresolved and under MFI control data for that
"^DD",15,15,999999903,23,5,0)
patient will not be forwarded to other sites within an integration domain
"^DD",15,15,999999903,23,6,0)
by the integration site.
"^DD",15,15,999999903,"DT")
2900703
"^DD",15,15,999999904,0)
MFI FROM SITE^F^^9999999;4^K:$L(X)>6!($L(X)<6)!'(X?6N) X
"^DD",15,15,999999904,3)
Answer must be 6 numeric characters in length.
"^DD",15,15,999999904,21,0)
^^2^2^2931216^
"^DD",15,15,999999904,21,1,0)

"^DD",15,15,999999904,21,2,0)
This field is for MultiFacility Integration software use only.
"^DD",15,15,999999904,23,0)
^^3^3^2900711^
"^DD",15,15,999999904,23,1,0)
This field is for MFI use only and contains the six digit IHS standard
"^DD",15,15,999999904,23,2,0)
code for the site that originated the install or merge command that
"^DD",15,15,999999904,23,3,0)
caused this duplicate recored entry to be created.
"^DD",15,15,999999904,"DT")
2900709
"^DD",15,15.01101,0)
MERGE PACKAGES SUB-FIELD^^.03^4
"^DD",15,15.01101,0,"DT")
2900906
"^DD",15,15.01101,0,"IX","ANR",15.01101,.02)

"^DD",15,15.01101,0,"NM","MERGE PACKAGES")

"^DD",15,15.01101,0,"UP")
15
"^DD",15,15.01101,.01,0)
PACKAGE^*P9.4'IX^DIC(9.4,^0;1^S DIC("S")="I $D(^DIC(9.4,Y,20,+$P(@(""^""_$P($P(^VA(15,D0,0),U),"";"",2)_""0)""),U,2)))" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X S:$D(X) DINUM=X
"^DD",15,15.01101,.01,1,0)
^.1^^0
"^DD",15,15.01101,.01,12)
Package must be affected by file being merged
"^DD",15,15.01101,.01,12.1)
S DIC("S")="I $D(^DIC(9.4,Y,20,+$P(@""^""_$P($P(^VA(15,D0,0),U),"";"",2)_""0)""),U,2)))"
"^DD",15,15.01101,.01,21,0)
^^2^2^2890724^^^^
"^DD",15,15.01101,.01,21,1,0)
Package interested in pending merge.  In order to enter a package in this
"^DD",15,15.01101,.01,21,2,0)
field the package must be affected by file being merged.
"^DD",15,15.01101,.01,23,0)
^^2^2^2900830^^^^
"^DD",15,15.01101,.01,23,1,0)
Package interested in pending merge.  In order to enter a package in this
"^DD",15,15.01101,.01,23,2,0)
field the package must be affected by file being merged.
"^DD",15,15.01101,.01,"DT")
2900906
"^DD",15,15.01101,.02,0)
STATUS^RS^0:NOT READY;1:READY;2:NO FROM ENTRY;^0;2^Q
"^DD",15,15.01101,.02,1,0)
^.1
"^DD",15,15.01101,.02,1,1,0)
15.01101^ANR^MUMPS
"^DD",15,15.01101,.02,1,1,1)
Q:X  S ^VA(15,DA(1),11,"ANR",X,DA)=""
"^DD",15,15.01101,.02,1,1,2)
Q:X  K ^VA(15,DA(1),11,"ANR",X,DA)
"^DD",15,15.01101,.02,1,1,"%D",0)
^^4^4^2900607^
"^DD",15,15.01101,.02,1,1,"%D",1,0)
This xref is set only when the status is 'not ready'.  It is used to
"^DD",15,15.01101,.02,1,1,"%D",2,0)
determine when all entries in this subfile are ready, which means the
"^DD",15,15.01101,.02,1,1,"%D",3,0)
primary file entries in the DUPLICATE RECORD file entry may now be
"^DD",15,15.01101,.02,1,1,"%D",4,0)
merged.
"^DD",15,15.01101,.02,1,2,0)
^^TRIGGER^15^.05
"^DD",15,15.01101,.02,1,2,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA S Y(1)=$S($D(^VA(15,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y X ^DD(15.01101,.02,1,2,1.1) X ^DD(15.01101,.02,1,2,1.4)
"^DD",15,15.01101,.02,1,2,1.1)
S X=DIV X $P(^DD(15.01101,.0299,0),U,5,99) S Y(1)=X S X=Y(1)
"^DD",15,15.01101,.02,1,2,1.4)
S DIH=$S($D(^VA(15,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=15,DIG=.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",15,15.01101,.02,1,2,2)
Q
"^DD",15,15.01101,.02,1,2,"%D",0)
^^8^8^2900607^
"^DD",15,15.01101,.02,1,2,"%D",1,0)
This TRIGGER sets the MERGE STATUS field in this subfiles parent file.
"^DD",15,15.01101,.02,1,2,"%D",2,0)
The MERGE STATUS field is set to a value computed by the computed field
"^DD",15,15.01101,.02,1,2,"%D",3,0)
READY in this subfile.  The value will compute to 0=NOT READY if there
"^DD",15,15.01101,.02,1,2,"%D",4,0)
is any entry in this subfile that is not ready.  It will compute to
"^DD",15,15.01101,.02,1,2,"%D",5,0)
1=READY only after all entries in this subfile have said they are
"^DD",15,15.01101,.02,1,2,"%D",6,0)
ready.
"^DD",15,15.01101,.02,1,2,"%D",7,0)

"^DD",15,15.01101,.02,1,2,"%D",8,0)
This TRIGGER must not be modified to fire on the kill side.
"^DD",15,15.01101,.02,1,2,"CREATE VALUE")
READY
"^DD",15,15.01101,.02,1,2,"DELETE VALUE")
NO EFFECT
"^DD",15,15.01101,.02,1,2,"FIELD")
MERGE STATUS
"^DD",15,15.01101,.02,21,0)
^^6^6^2890725^^
"^DD",15,15.01101,.02,21,1,0)
This field set to 0=NOT READY if package does its own interactive merge;
"^DD",15,15.01101,.02,21,2,0)
1=READY if package has 'from' entry and has a merge routine specified in
"^DD",15,15.01101,.02,21,3,0)
the package file; 2=NO FROM ENTRY if the package does not have the 'from'
"^DD",15,15.01101,.02,21,4,0)
entry, regardless of whether it has a merge routine or not.
"^DD",15,15.01101,.02,21,5,0)

"^DD",15,15.01101,.02,21,6,0)
The TRIGGER on this field must not be modified to fire on the delete side.
"^DD",15,15.01101,.02,23,0)
^^6^6^2900830^^^^
"^DD",15,15.01101,.02,23,1,0)
This field is set to 0=NOT READY if package does its own interactive merge;
"^DD",15,15.01101,.02,23,2,0)
1=READY if package has 'from' entry and has a merge routine specified in
"^DD",15,15.01101,.02,23,3,0)
the package file; 2=NO FROM ENTRY if the package does not have the 'from'
"^DD",15,15.01101,.02,23,4,0)
entry, regardless of whether it has a merge routine or not.
"^DD",15,15.01101,.02,23,5,0)

"^DD",15,15.01101,.02,23,6,0)
The TRIGGER on this field must not be modified to fire on the delete side.
"^DD",15,15.01101,.02,"DT")
2890725
"^DD",15,15.01101,.0299,0)
READY^CJ8^^ ; ^S X=$S($D(^VA(15,D0,11,"ANR")):0,1:1)
"^DD",15,15.01101,.0299,9)
^
"^DD",15,15.01101,.0299,9.01)

"^DD",15,15.01101,.0299,9.1)
S X=$S($D(^VA(15,D0,11,"ANR")):0,1:1)
"^DD",15,15.01101,.0299,21,0)
^^4^4^2940523^
"^DD",15,15.01101,.0299,21,1,0)
This field is set to 0 (not ready) if any of the entries in the MERGE
"^DD",15,15.01101,.0299,21,2,0)
PACKAGES multiple indicate via STATUS field that this duplicate record
"^DD",15,15.01101,.0299,21,3,0)
is not ready to be merged.  If all packages are ready for this record
"^DD",15,15.01101,.0299,21,4,0)
to be merged than this field will contain 1 (ready).
"^DD",15,15.01101,.0299,23,0)
^^3^3^2900607^
"^DD",15,15.01101,.0299,23,1,0)
This computed field computes a value of 0 or 1.  The value will be 0
"^DD",15,15.01101,.0299,23,2,0)
if any entry in this subfile has a STATUS of 'not ready', otherwise,
"^DD",15,15.01101,.0299,23,3,0)
the value will be 1.
"^DD",15,15.01101,.0299,"DT")
2900405
"^DD",15,15.01101,.03,0)
ERROR MESSAGE^FI^^0;3^K:$L(X)>60!($L(X)<3) X
"^DD",15,15.01101,.03,3)
Answer must be 3-60 characters in length.
"^DD",15,15.01101,.03,21,0)
^^2^2^2890727^
"^DD",15,15.01101,.03,21,1,0)
This field contains system error messages trapped during the execution
"^DD",15,15.01101,.03,21,2,0)
of package merge routines.
"^DD",15,15.01101,.03,23,0)
^^2^2^2900830^^
"^DD",15,15.01101,.03,23,1,0)
This field contains system error messages trapped during the execution
"^DD",15,15.01101,.03,23,2,0)
of package merge routines.
"^DD",15,15.01101,.03,"DT")
2890727
"^DD",15,15.013,0)
CHECK POINTS SUB-FIELD^^1^2
"^DD",15,15.013,0,"DT")
2951102
"^DD",15,15.013,0,"IX","B",15.013,.01)

"^DD",15,15.013,0,"NM","CHECK POINTS")

"^DD",15,15.013,0,"UP")
15
"^DD",15,15.013,.01,0)
CHECK POINTS^F^^0;1^K:$L(X)>30!($L(X)<3)!'(X?1A.E) X
"^DD",15,15.013,.01,1,0)
^.1
"^DD",15,15.013,.01,1,1,0)
15.013^B
"^DD",15,15.013,.01,1,1,1)
S ^VA(15,DA(1),"CP","B",$E(X,1,30),DA)=""
"^DD",15,15.013,.01,1,1,2)
K ^VA(15,DA(1),"CP","B",$E(X,1,30),DA)
"^DD",15,15.013,.01,3)
Answer must be 3-30 characters in length.
"^DD",15,15.013,.01,21,0)
^^1^1^2951102^
"^DD",15,15.013,.01,21,1,0)
This sub file hold check point information about the merge.
"^DD",15,15.013,.01,"DT")
2951102
"^DD",15,15.013,1,0)
PARAMETERS^F^^1;E1,245^K:$L(X)>245!($L(X)<1) X
"^DD",15,15.013,1,3)
Answer must be 1-245 characters in length.
"^DD",15,15.013,1,21,0)
^^2^2^2951102^
"^DD",15,15.013,1,21,1,0)
This field is were the MERGE routines can store parameters for
"^DD",15,15.013,1,21,2,0)
restart and tracking.
"^DD",15,15.013,1,"DT")
2951102
"^DD",15,15.02,0)
IDENTIFYING SERVICE SUB-FIELD^^.05^5
"^DD",15,15.02,0,"DT")
2960426
"^DD",15,15.02,0,"IX","B",15.02,.01)

"^DD",15,15.02,0,"NM","IDENTIFYING SERVICE")

"^DD",15,15.02,0,"UP")
15
"^DD",15,15.02,.01,0)
IDENTIFYING SERVICE^MF^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",15,15.02,.01,1,0)
^.1
"^DD",15,15.02,.01,1,1,0)
15.02^B
"^DD",15,15.02,.01,1,1,1)
S ^VA(15,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",15,15.02,.01,1,1,2)
K ^VA(15,DA(1),2,"B",$E(X,1,30),DA)
"^DD",15,15.02,.01,3)
Answer must be 3-30 characters in length.
"^DD",15,15.02,.01,21,0)
^^2^2^2960206^^
"^DD",15,15.02,.01,21,1,0)
This field is the name of the service with respect to the patient
"^DD",15,15.02,.01,21,2,0)
pair being duplicates.
"^DD",15,15.02,.01,"DT")
2960206
"^DD",15,15.02,.02,0)
SERVICE DETERMINATION^S^V:VERIFIED DUPLICATE;N:VERIFIED, NOT A DUPLICATE;U:UNKNOWN;D:NO DATA IN FILE;^0;2^Q
"^DD",15,15.02,.02,3)
This entry indicates the services indication of the status of this duplicate pair (D - NO DATA IN FILE is entered automatically if no data is available for the service to base a decision).
"^DD",15,15.02,.02,21,0)
^^2^2^2960206^
"^DD",15,15.02,.02,21,1,0)
This field determines if the patient pair entries are duplicates
"^DD",15,15.02,.02,21,2,0)
or not for each identifying service.
"^DD",15,15.02,.02,"DT")
2960426
"^DD",15,15.02,.03,0)
WHO DETERMINED^P200'^VA(200,^0;3^Q
"^DD",15,15.02,.03,"DT")
2960206
"^DD",15,15.02,.04,0)
WHEN DETERMINED^D^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15,15.02,.04,"DT")
2960206
"^DD",15,15.02,.05,0)
DIRECTION OF MERGE^S^1:RECORD1 INTO RECORD2;2:RECORD2 INTO RECORD1;^0;5^Q
"^DD",15,15.02,.05,3)
Indicate the record which does not have the best data (1=RECORD1 or 2=RECORD2) which should be merged into the other record.
"^DD",15,15.02,.05,21,0)
^^2^2^2960213^
"^DD",15,15.02,.05,21,1,0)
This field is used for the identifying service to indicate the preference
"^DD",15,15.02,.05,21,2,0)
for which record should be merged into the other record.
"^DD",15,15.02,.05,"DT")
2960213
"^DD",15,15.02101,0)
DUPLICATE TESTS/SCORES SUB-FIELD^^.02^2
"^DD",15,15.02101,0,"DT")
2900830
"^DD",15,15.02101,0,"IX","B",15.02101,.01)

"^DD",15,15.02101,0,"NM","DUPLICATE TESTS/SCORES")

"^DD",15,15.02101,0,"UP")
15
"^DD",15,15.02101,.01,0)
DUPLICATE TEST^F^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",15,15.02101,.01,1,0)
^.1
"^DD",15,15.02101,.01,1,1,0)
15.02101^B
"^DD",15,15.02101,.01,1,1,1)
S ^VA(15,DA(1),21,"B",$E(X,1,30),DA)=""
"^DD",15,15.02101,.01,1,1,2)
K ^VA(15,DA(1),21,"B",$E(X,1,30),DA)
"^DD",15,15.02101,.01,3)
Answer must be 3-30 characters in length.
"^DD",15,15.02101,.01,23,0)
^^2^2^2900830^
"^DD",15,15.02101,.01,23,1,0)
This field is the name of a test in the 'duplicate test' multiple of
"^DD",15,15.02101,.01,23,2,0)
the 'duplicate resolution' file.
"^DD",15,15.02101,.01,"DT")
2900830
"^DD",15,15.02101,.02,0)
DUPLICATE SCORE^RNJ3,0^^0;2^K:+X'=X!(X>500)!(X<-500)!(X?.E1"."1N.N) X
"^DD",15,15.02101,.02,3)
Type a Number between -500 and 500, 0 Decimal Digits
"^DD",15,15.02101,.02,21,0)
^^3^3^2940523^
"^DD",15,15.02101,.02,21,1,0)
This field contains the score computed for this test at the time this
"^DD",15,15.02101,.02,21,2,0)
'duplicate record' entry was analyzed by the duplicate resolution
"^DD",15,15.02101,.02,21,3,0)
software.
"^DD",15,15.02101,.02,23,0)
^^3^3^2900830^
"^DD",15,15.02101,.02,23,1,0)
This field contains the score computed for this test at the time
"^DD",15,15.02101,.02,23,2,0)
this 'duplicate record' entry was analyzed by the duplicate resolution
"^DD",15,15.02101,.02,23,3,0)
software.
"^DD",15,15.02101,.02,"DT")
2900830
"^DD",15,15.03,0)
OVERWRITE IN FILE SUB-FIELD^^1^3
"^DD",15,15.03,0,"DT")
2960423
"^DD",15,15.03,0,"IX","B",15.03,.01)

"^DD",15,15.03,0,"NM","OVERWRITE IN FILE")

"^DD",15,15.03,0,"UP")
15
"^DD",15,15.03,.01,0)
OVERWRITE IN FILE^MNJ15,3^^0;1^K:+X'=X!(X>99999999999)!(X<.001)!(X?.E1"."4N.N) X
"^DD",15,15.03,.01,1,0)
^.1
"^DD",15,15.03,.01,1,1,0)
15.03^B
"^DD",15,15.03,.01,1,1,1)
S ^VA(15,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",15,15.03,.01,1,1,2)
K ^VA(15,DA(1),3,"B",$E(X,1,30),DA)
"^DD",15,15.03,.01,3)
Enter File Number in which one or more fields are to be overwritten during the merge process by data from the merged from entry.
"^DD",15,15.03,.01,21,0)
^^3^3^2960402^
"^DD",15,15.03,.01,21,1,0)
This multiple field is used to indicate a file number in which one or more
"^DD",15,15.03,.01,21,2,0)
fields in the 'merged to' entry are to be overwritten with data from the
"^DD",15,15.03,.01,21,3,0)
'merged from' entry.
"^DD",15,15.03,.01,"DT")
2960402
"^DD",15,15.03,.02,0)
MERGE DIRECTION^S^1:MERGE REC1 TO REC2;2:REVERSE MERGE;^0;2^Q
"^DD",15,15.03,.02,3)
This entry indicates whether the merge is processed in the normal direction, or reversed
"^DD",15,15.03,.02,21,0)
^^2^2^2960423^
"^DD",15,15.03,.02,21,1,0)
This field is used to determine whethe the merge process is handled in
"^DD",15,15.03,.02,21,2,0)
the normal direction, or is reversed.
"^DD",15,15.03,.02,"DT")
2960423
"^DD",15,15.03,1,0)
FIELD TO OVERWRITE^15.031A^^1;0
"^DD",15,15.031,0)
FIELD TO OVERWRITE SUB-FIELD^^.01^1
"^DD",15,15.031,0,"DT")
2960402
"^DD",15,15.031,0,"IX","B",15.031,.01)

"^DD",15,15.031,0,"NM","FIELD TO OVERWRITE")

"^DD",15,15.031,0,"UP")
15.03
"^DD",15,15.031,.01,0)
FIELD TO OVERWRITE^MNJ19,7^^0;1^K:+X'=X!(X>99999999999)!(X<.0000001)!(X?.E1"."8N.N) X
"^DD",15,15.031,.01,1,0)
^.1
"^DD",15,15.031,.01,1,1,0)
15.031^B
"^DD",15,15.031,.01,1,1,1)
S ^VA(15,DA(2),3,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15,15.031,.01,1,1,2)
K ^VA(15,DA(2),3,DA(1),1,"B",$E(X,1,30),DA)
"^DD",15,15.031,.01,3)
Enter a field number for which the data in the 'merged to' entry is to be overwritten with data from the 'merged from' entry.
"^DD",15,15.031,.01,21,0)
^^2^2^2960402^
"^DD",15,15.031,.01,21,1,0)
This multiple field is used to indicate the field(s) which in the parent
"^DD",15,15.031,.01,21,2,0)
file that are to be overwritten with data from the 'merged from' entry.
"^DD",15,15.031,.01,"DT")
2960402
"^DD",15.1,15.1,0)
FIELD^^1200^32
"^DD",15.1,15.1,0,"DDA")
N
"^DD",15.1,15.1,0,"DT")
2980210
"^DD",15.1,15.1,0,"IX","AGL",15.1,.01)

"^DD",15.1,15.1,0,"IX","APDTI",15.1,.15)

"^DD",15.1,15.1,0,"IX","B",15.1,.01)

"^DD",15.1,15.1,0,"NM","DUPLICATE RESOLUTION")

"^DD",15.1,15.1,0,"VRPK")
XT
"^DD",15.1,15.1,.01,0)
FILE TO BE CHECKED^R*P1'X^DIC(^0;1^S DIC("S")="I $D(^DD(15,.01,""V"",""B"",Y))" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X S:$D(X) DINUM=X
"^DD",15.1,15.1,.01,1,0)
^.1
"^DD",15.1,15.1,.01,1,1,0)
15.1^B
"^DD",15.1,15.1,.01,1,1,1)
S ^VA(15.1,"B",$E(X,1,30),DA)=""
"^DD",15.1,15.1,.01,1,1,2)
K ^VA(15.1,"B",$E(X,1,30),DA)
"^DD",15.1,15.1,.01,1,2,0)
15.1^AGL^MUMPS
"^DD",15.1,15.1,.01,1,2,1)
S ^VA(15.1,"AGL",$P(^DIC(X,0,"GL"),U,2),DA)=""
"^DD",15.1,15.1,.01,1,2,2)
K ^VA(15.1,"AGL",$P(^DIC(X,0,"GL"),U,2),DA)
"^DD",15.1,15.1,.01,1,2,"%D",0)
^^2^2^2901123^
"^DD",15.1,15.1,.01,1,2,"%D",1,0)
This cross reference is utilized by the XDRDUP when adjusting
"^DD",15.1,15.1,.01,1,2,"%D",2,0)
existing score values for a Duplicate Record entry.
"^DD",15.1,15.1,.01,1,2,"DT")
2901123
"^DD",15.1,15.1,.01,3)
Please enter a file name or file number.
"^DD",15.1,15.1,.01,12)
MUST BE VARIABLE POINTER FILE IN FIELD .01 OF FILE 15
"^DD",15.1,15.1,.01,12.1)
S DIC("S")="I $D(^DD(15,.01,""V"",""B"",Y))"
"^DD",15.1,15.1,.01,21,0)
^^2^2^2960531^^^
"^DD",15.1,15.1,.01,21,1,0)
This is the file that is being checked for duplicates and if duplicates
"^DD",15.1,15.1,.01,21,2,0)
are found, to be merged.
"^DD",15.1,15.1,.01,"DT")
2921221
"^DD",15.1,15.1,.02,0)
DUPLICATE SEARCH STATUS^RS^c:COMPLETED;h:HALTED;r:RUNNING;e:ERROR(STOP);^0;2^Q
"^DD",15.1,15.1,.02,3)
This is the status of the duplicate checker at any given time.
"^DD",15.1,15.1,.02,21,0)
^^2^2^2970724^^
"^DD",15.1,15.1,.02,21,1,0)

"^DD",15.1,15.1,.02,21,2,0)
This is the status of the duplicate checker at any given time.
"^DD",15.1,15.1,.02,23,0)
^^6^6^2970724^^
"^DD",15.1,15.1,.02,23,1,0)
This field is set by the duplicate checker software.  It is set to
"^DD",15.1,15.1,.02,23,2,0)
running when the search is first initiated, set to halt if a person
"^DD",15.1,15.1,.02,23,3,0)
wants to stop the search, and to completed when the search is finished.
"^DD",15.1,15.1,.02,23,4,0)

"^DD",15.1,15.1,.02,23,5,0)
If for some reason the search aborts you will need to set this field to
"^DD",15.1,15.1,.02,23,6,0)
halted from running in order for you to restart the search.
"^DD",15.1,15.1,.02,"DT")
2960202
"^DD",15.1,15.1,.03,0)
SEARCH BEGINNING DATE^D^^0;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",15.1,15.1,.03,3)
No entry is required in this field.  It will automatically be filled in for you by the search software.
"^DD",15.1,15.1,.03,21,0)
^^3^3^2960305^^
"^DD",15.1,15.1,.03,21,1,0)
This is the date and time that the present search started.  This field
"^DD",15.1,15.1,.03,21,2,0)
does not require user input, it is automatically filled in when you
"^DD",15.1,15.1,.03,21,3,0)
start the search.
"^DD",15.1,15.1,.03,23,0)
^^2^2^2960305^^
"^DD",15.1,15.1,.03,23,1,0)
This field is automatically stuffed with the date and time that the
"^DD",15.1,15.1,.03,23,2,0)
search is queued by the search queueing software.
"^DD",15.1,15.1,.03,"DT")
2900830
"^DD",15.1,15.1,.04,0)
SEARCH COMPLETION DATE^D^^0;4^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",15.1,15.1,.04,3)
You do not need to fill in this field.  It will automatically be done for you by the search software.
"^DD",15.1,15.1,.04,21,0)
^^2^2^2900829^
"^DD",15.1,15.1,.04,21,1,0)
This field is used to store the date and time that the duplicate search
"^DD",15.1,15.1,.04,21,2,0)
is completed.
"^DD",15.1,15.1,.04,23,0)
^^2^2^2900829^
"^DD",15.1,15.1,.04,23,1,0)
This field is automatically stuffed by the search software upon completion
"^DD",15.1,15.1,.04,23,2,0)
of the search.
"^DD",15.1,15.1,.04,"DT")
2900830
"^DD",15.1,15.1,.05,0)
TYPE OF SEARCH^S^b:BASIC;n:NEW;^0;5^Q
"^DD",15.1,15.1,.05,3)
This is the type of search that is currently being run or has been completed.
"^DD",15.1,15.1,.05,21,0)
^^4^4^2900914^^
"^DD",15.1,15.1,.05,21,1,0)
This field describes the type of search the Duplicate Resolution
"^DD",15.1,15.1,.05,21,2,0)
software will conduct.  A 'BASIC' search starts at the beginning of
"^DD",15.1,15.1,.05,21,3,0)
a file while the 'NEW' search will only check those newly added
"^DD",15.1,15.1,.05,21,4,0)
entries.
"^DD",15.1,15.1,.05,23,0)
^^5^5^2900914^^
"^DD",15.1,15.1,.05,23,1,0)
This field is used to describe the type of search that is currently
"^DD",15.1,15.1,.05,23,2,0)
being run or has been completed.  The Basic search type is used
"^DD",15.1,15.1,.05,23,3,0)
whenever you are starting at the very beginning of a file and searching
"^DD",15.1,15.1,.05,23,4,0)
for duplicates.  The New search type is used to take records from a
"^DD",15.1,15.1,.05,23,5,0)
defined cross reference to check for duplicates in the file.
"^DD",15.1,15.1,.05,"DT")
2900829
"^DD",15.1,15.1,.06,0)
CROSS-REF FOR NEW SEARCH^F^^0;6^K:$L(X)>10!($L(X)<1) X
"^DD",15.1,15.1,.06,3)
Answer must be 1-10 characters in length.
"^DD",15.1,15.1,.06,21,0)
^^4^4^2900912^^
"^DD",15.1,15.1,.06,21,1,0)
This is the name of the cross reference that should be
"^DD",15.1,15.1,.06,21,2,0)
utilized to separate out any records that you wish to run
"^DD",15.1,15.1,.06,21,3,0)
through the Duplicate Resolution software checking to see
"^DD",15.1,15.1,.06,21,4,0)
if any potential duplicates.
"^DD",15.1,15.1,.06,23,0)
^^7^7^2900912^^
"^DD",15.1,15.1,.06,23,1,0)
If the operator chooses to do a 'NEW' search this cross reference
"^DD",15.1,15.1,.06,23,2,0)
will be $Ordered through checking each record against a gathered
"^DD",15.1,15.1,.06,23,3,0)
group of records to determine if any potential duplicates.
"^DD",15.1,15.1,.06,23,4,0)

"^DD",15.1,15.1,.06,23,5,0)
The 'NEW' search will be utilized almost exclusively once the
"^DD",15.1,15.1,.06,23,6,0)
file has gone through a basic cleaning up phase utilizing the
"^DD",15.1,15.1,.06,23,7,0)
'BASIC' search type.
"^DD",15.1,15.1,.06,"DT")
2900829
"^DD",15.1,15.1,.07,0)
NUMBER OF RECORDS PROCESSED^NJ9,0^^0;7^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.07,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",15.1,15.1,.07,21,0)
^^2^2^2900829^
"^DD",15.1,15.1,.07,21,1,0)
This is the number of records that have been checked for duplicates
"^DD",15.1,15.1,.07,21,2,0)
by the duplicate checking software.
"^DD",15.1,15.1,.07,23,0)
^^2^2^2900829^
"^DD",15.1,15.1,.07,23,1,0)
This field is stuffed by the duplicate checking software whenever
"^DD",15.1,15.1,.07,23,2,0)
the search is stopped or completed.
"^DD",15.1,15.1,.07,"DT")
2900829
"^DD",15.1,15.1,.08,0)
LAST RECORD PROCESSED^NJ15,0^^0;8^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.08,3)
Type a Number between 0 and 999999999999999, 0 Decimal Digits
"^DD",15.1,15.1,.08,21,0)
^^2^2^2971217^^^^
"^DD",15.1,15.1,.08,21,1,0)
This is the last record that was processed by the duplicate checking
"^DD",15.1,15.1,.08,21,2,0)
software.
"^DD",15.1,15.1,.08,23,0)
^^8^8^2971217^^^^
"^DD",15.1,15.1,.08,23,1,0)
This field is utilized by the duplicate software as a starting point
"^DD",15.1,15.1,.08,23,2,0)
whenever the duplicate search is started up from a halted status.
"^DD",15.1,15.1,.08,23,3,0)
This means that if the search was stopped either by a user or some
"^DD",15.1,15.1,.08,23,4,0)
other reason, the search would start up again starting with this
"^DD",15.1,15.1,.08,23,5,0)
record number.
"^DD",15.1,15.1,.08,23,6,0)

"^DD",15.1,15.1,.08,23,7,0)
This field is updated every time a record is checked for duplicates by
"^DD",15.1,15.1,.08,23,8,0)
the duplicate checking software.
"^DD",15.1,15.1,.08,"DT")
2971217
"^DD",15.1,15.1,.09,0)
CANDIDATE COLLECTION ROUTINE^RF^^0;9^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.1,.09,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.1,.09,21,0)
^^3^3^2900912^^^^
"^DD",15.1,15.1,.09,21,1,0)
This is the name of the routine which will be used to
"^DD",15.1,15.1,.09,21,2,0)
gather any potential duplicate records which should be checked
"^DD",15.1,15.1,.09,21,3,0)
by the Duplicate Resolution software.
"^DD",15.1,15.1,.09,23,0)
^^5^5^2900912^^
"^DD",15.1,15.1,.09,23,1,0)
Enter the routine name without the '^' character.  A label entry
"^DD",15.1,15.1,.09,23,2,0)
point reference is allowed but you must use a '-' instead of the
"^DD",15.1,15.1,.09,23,3,0)
normal '^', ex. ENTRY POINT-ROUTINE.  This entry will be executed by
"^DD",15.1,15.1,.09,23,4,0)
the Kernel duplicate resolution software after transforming the '-'
"^DD",15.1,15.1,.09,23,5,0)
into a '^'.
"^DD",15.1,15.1,.09,"DT")
2921217
"^DD",15.1,15.1,.1,0)
SECONDS SEARCHED^NJ7,0^^0;10^K:+X'=X!(X>9999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.1,3)
This value is entered when the search process is stopped for any reason.
"^DD",15.1,15.1,.1,21,0)
^^5^5^2960202^
"^DD",15.1,15.1,.1,21,1,0)
This field is used to track the number of seconds that the search process
"^DD",15.1,15.1,.1,21,2,0)
was running PRIOR TO the most current start (or restart).  The value is
"^DD",15.1,15.1,.1,21,3,0)
determined at the time the process stops for any reason (completed, halt,
"^DD",15.1,15.1,.1,21,4,0)
or error).  While the search is running it does NOT include time for the
"^DD",15.1,15.1,.1,21,5,0)
current process.
"^DD",15.1,15.1,.1,"DT")
2960202
"^DD",15.1,15.1,.11,0)
DUPLICATE MANAGER MAIL GROUP^P3.8'^XMB(3.8,^0;11^Q
"^DD",15.1,15.1,.11,3)
Enter the name of the mail group to which you want to send a bulletin when some error causes the halting of the duplicate search or merge process.  The name must be in the Mail Group file.
"^DD",15.1,15.1,.11,21,0)
^^3^3^2970718^^
"^DD",15.1,15.1,.11,21,1,0)
This is the mail group that will be sent a bulletin whenever
"^DD",15.1,15.1,.11,21,2,0)
any known problems occur during the duplicate checking or
"^DD",15.1,15.1,.11,21,3,0)
merging process.
"^DD",15.1,15.1,.11,"DT")
2901127
"^DD",15.1,15.1,.12,0)
NUMBER SELECTED^NJ7,0^^0;12^K:+X'=X!(X>9999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.12,3)
This number indicates the number of patients that have been selected during the current search.
"^DD",15.1,15.1,.12,21,0)
^^2^2^2960306^^
"^DD",15.1,15.1,.12,21,1,0)
This field is used to indicate the number of potential duplicates that
"^DD",15.1,15.1,.12,21,2,0)
have been found in the current search.
"^DD",15.1,15.1,.12,"DT")
2960213
"^DD",15.1,15.1,.13,0)
DAYS BEFORE FINAL VERIFY^NJ2,0^^0;13^K:+X'=X!(X>30)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.13,3)
Type a Number between 0 and 30, 0 Decimal Digits
"^DD",15.1,15.1,.13,21,0)
^^7^7^2970812^
"^DD",15.1,15.1,.13,21,1,0)
The value of this field is the number of days available for ancillary
"^DD",15.1,15.1,.13,21,2,0)
reviewers to conduct their reviews. If action is still pending by any
"^DD",15.1,15.1,.13,21,3,0)
ancillary reviewers after this period, the site may take alternative
"^DD",15.1,15.1,.13,21,4,0)
action; notify designated persons via a mail group, establish an
"^DD",15.1,15.1,.13,21,5,0)
additional reviewer, or otherwise resolve the review. All reviews must be
"^DD",15.1,15.1,.13,21,6,0)
resolved prior to merging the affected record pair. The default with this
"^DD",15.1,15.1,.13,21,7,0)
application release is five days.  Days 1 to 30.
"^DD",15.1,15.1,.13,"DT")
2980210
"^DD",15.1,15.1,.14,0)
DAYS BETWEEN VERIFY AND MERGE^NJ2,0^^0;14^K:+X'=X!(X>30)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,.14,3)
Enter the number of days (0 to 30) which must pass after a patient pair is marked as completely verified as a duplicate pair before the pair may be merged.
"^DD",15.1,15.1,.14,21,0)
^^7^7^2970417^^
"^DD",15.1,15.1,.14,21,1,0)
This field contains the sites determination on the number of days that
"^DD",15.1,15.1,.14,21,2,0)
MUST pass before a completely verified duplicate pair may be merged.
"^DD",15.1,15.1,.14,21,3,0)
This time period is included to provide for outstanding tests which
"^DD",15.1,15.1,.14,21,4,0)
might have been ordered for the entry which is to be merged into the
"^DD",15.1,15.1,.14,21,5,0)
other one to be completed prior to the merge, so that data are not
"^DD",15.1,15.1,.14,21,6,0)
entered for the merged entry after the merge has been completed.
"^DD",15.1,15.1,.14,21,7,0)
 
"^DD",15.1,15.1,.14,"DT")
2960213
"^DD",15.1,15.1,.15,0)
POTENTIAL DUPLICATE THRESHOLD%^RNJ3,0X^^0;15^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X K:$P(^VA(15.1,DA,0),U,2)="r" X
"^DD",15.1,15.1,.15,1,0)
^.1
"^DD",15.1,15.1,.15,1,1,0)
15.1^APDTI^MUMPS
"^DD",15.1,15.1,.15,1,1,1)
I $D(XDR("APDTI")),XDR("APDTI"),X>XDR("APDTI") S ^VA(15.1,DA,"APDTI")="" K XDR("APDTI")
"^DD",15.1,15.1,.15,1,1,2)
I $D(X),X S XDR("APDTI")=X
"^DD",15.1,15.1,.15,1,1,"%D",0)
^^11^11^2900913^^^
"^DD",15.1,15.1,.15,1,1,"%D",1,0)
This cross reference is set whenever the Potential Duplicate Threshold
"^DD",15.1,15.1,.15,1,1,"%D",2,0)
is increased.  This Xref is utilized by the Duplicate Resolution software
"^DD",15.1,15.1,.15,1,1,"%D",3,0)
to let it know to go through the existing Non-verified Potential Duplicates
"^DD",15.1,15.1,.15,1,1,"%D",4,0)
and see if the duplicate record pair meet the increased Potential Duplicate
"^DD",15.1,15.1,.15,1,1,"%D",5,0)
Threshold.  If not, the duplicate record pair entry is deleted from the
"^DD",15.1,15.1,.15,1,1,"%D",6,0)
file.
"^DD",15.1,15.1,.15,1,1,"%D",7,0)

"^DD",15.1,15.1,.15,1,1,"%D",8,0)
The variable XDR("APDTI") is left around if somebody deletes the entry
"^DD",15.1,15.1,.15,1,1,"%D",9,0)
from the Duplicate Resolution file.   This is due to Fileman never
"^DD",15.1,15.1,.15,1,1,"%D",10,0)
allowing you to know if a person is just editing, adding, or deleting
"^DD",15.1,15.1,.15,1,1,"%D",11,0)
an entry.
"^DD",15.1,15.1,.15,1,1,"DT")
2900913
"^DD",15.1,15.1,.15,3)
Type a Number between 0 and 100, 0 Decimal Digits.  You cannot edit if a Search is running.
"^DD",15.1,15.1,.15,21,0)
^^3^3^2970812^^^^
"^DD",15.1,15.1,.15,21,1,0)
This is the percentage of the total possible score that needs to be
"^DD",15.1,15.1,.15,21,2,0)
obtained before a duplicate record pair is placed in the Duplicate
"^DD",15.1,15.1,.15,21,3,0)
Record file as a Potential Non-Verified Duplicate pair.
"^DD",15.1,15.1,.15,23,0)
^^2^2^2900926^^
"^DD",15.1,15.1,.15,23,1,0)
This field has a input transform that prevents the user from editing
"^DD",15.1,15.1,.15,23,2,0)
the field if the Duplicate Search Status is set to 'Running'.
"^DD",15.1,15.1,.15,"DT")
2901002
"^DD",15.1,15.1,.16,0)
VERIFIED DUPLICATE MAIL GROUP^P3.8'^XMB(3.8,^0;16^Q
"^DD",15.1,15.1,.16,3)
Enter the name of the mail group to which you want to send a bulletin when the record is verified a duplicate.  The name must be in the Mail Group file.
"^DD",15.1,15.1,.16,21,0)
^^3^3^2900829^
"^DD",15.1,15.1,.16,21,1,0)
This is the mail group that will be sent a bulletin
"^DD",15.1,15.1,.16,21,2,0)
whenever a Potential Non-Verified Duplicate is changed to
"^DD",15.1,15.1,.16,21,3,0)
a Verified Duplicate status.
"^DD",15.1,15.1,.16,23,0)
^^6^6^2900829^
"^DD",15.1,15.1,.16,23,1,0)
This is the mail group that will be sent a bulletin saying
"^DD",15.1,15.1,.16,23,2,0)
that a Potential Non-Verified Duplicate pair has been
"^DD",15.1,15.1,.16,23,3,0)
verified as a Duplicate pair.  The bulletin will be sent
"^DD",15.1,15.1,.16,23,4,0)
immediately after the status has been changed to Verified
"^DD",15.1,15.1,.16,23,5,0)
Duplicate unless it is okay to proceed immediately with merging
"^DD",15.1,15.1,.16,23,6,0)
the records.
"^DD",15.1,15.1,.16,"DT")
2900829
"^DD",15.1,15.1,.17,0)
VERIFIED DUPLICATE MSG ROUTINE^F^^0;17^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.1,.17,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.1,.17,21,0)
^^3^3^2901231^^^^
"^DD",15.1,15.1,.17,21,1,0)
Enter the name of the routine which will be called to send a bulletin
"^DD",15.1,15.1,.17,21,2,0)
to members of the Verified Duplicate Mail Group. No '^' should be
"^DD",15.1,15.1,.17,21,3,0)
included.
"^DD",15.1,15.1,.17,23,0)
^^13^13^2901231^^^^
"^DD",15.1,15.1,.17,23,1,0)
This optional field is to allow a package developer to send a
"^DD",15.1,15.1,.17,23,2,0)
customized bulletin notifying the Verified Duplicate Mail Group
"^DD",15.1,15.1,.17,23,3,0)
about verified duplicates.  If nothing is entered the Kernel
"^DD",15.1,15.1,.17,23,4,0)
Duplicate Resolution software will send a brief bulletin to the
"^DD",15.1,15.1,.17,23,5,0)
members of the mail group.  This bulletin will only provide the
"^DD",15.1,15.1,.17,23,6,0)
.01 value and the DFN numbers of the two records.  The duplicate
"^DD",15.1,15.1,.17,23,7,0)
resolution software will pass the routine XDRMFR and XDRMTO and
"^DD",15.1,15.1,.17,23,8,0)
it will be up to this routine to gather any other information it
"^DD",15.1,15.1,.17,23,9,0)
wants to send in the bulletin and also to send the bulletin to
"^DD",15.1,15.1,.17,23,10,0)
the Verified Duplicate Mail Group.  A label entry point is allowed
"^DD",15.1,15.1,.17,23,11,0)
but you must use a '-' instead of the normal '^', ex. ENTRY POINT-
"^DD",15.1,15.1,.17,23,12,0)
ROUTINE.  This entry point will be executed by the duplicate
"^DD",15.1,15.1,.17,23,13,0)
resolution software after transforming the '-' into a '^'.
"^DD",15.1,15.1,.17,"DT")
2901231
"^DD",15.1,15.1,.18,0)
VERIFIED DUPLICATE THRESHOLD%^NJ3,0X^^0;18^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X K:$P(^VA(15.1,DA,0),U,2)="r" X
"^DD",15.1,15.1,.18,3)
Type a Number between 0 and 100, 0 Decimal Digits.  You cannot edit if a search is running.
"^DD",15.1,15.1,.18,21,0)
^^3^3^2901002^^^^
"^DD",15.1,15.1,.18,21,1,0)
This is the percentage that needs to be obtained before a duplicate record
"^DD",15.1,15.1,.18,21,2,0)
pair is placed in the Duplicate Record file as a Verified Potential
"^DD",15.1,15.1,.18,21,3,0)
Duplicate pair.
"^DD",15.1,15.1,.18,23,0)
^^16^16^2901002^^^^
"^DD",15.1,15.1,.18,23,1,0)
There is a input transform that does not allow the user to edit this
"^DD",15.1,15.1,.18,23,2,0)
field if the Duplicate Search Status is set to 'Running'.
"^DD",15.1,15.1,.18,23,3,0)

"^DD",15.1,15.1,.18,23,4,0)
It is unknown in the early phases of the Duplicate Resolution software
"^DD",15.1,15.1,.18,23,5,0)
whether there will be a percentage which no user interaction will be
"^DD",15.1,15.1,.18,23,6,0)
required to look at a potential duplicate and make the determination
"^DD",15.1,15.1,.18,23,7,0)
that the pair truly are duplicates.
"^DD",15.1,15.1,.18,23,8,0)

"^DD",15.1,15.1,.18,23,9,0)
However if someone does enter a percentage in this field and the Duplicate
"^DD",15.1,15.1,.18,23,10,0)
Checker score exceeds this percentage, the duplicate resolution software
"^DD",15.1,15.1,.18,23,11,0)
will enter the pair as verified non-duplicates and will send the message
"^DD",15.1,15.1,.18,23,12,0)
to the Verified Duplicate Mail Group.
"^DD",15.1,15.1,.18,23,13,0)

"^DD",15.1,15.1,.18,23,14,0)
The merge will not occur at this time, it will either be started up
"^DD",15.1,15.1,.18,23,15,0)
via the automatic merge option or be done at the completion of the
"^DD",15.1,15.1,.18,23,16,0)
duplicate checker.
"^DD",15.1,15.1,.18,"DT")
2901002
"^DD",15.1,15.1,.25,0)
MERGE STYLE^RS^0:INTERACTIVE;1:NON-INTERACTIVE;^0;25^Q
"^DD",15.1,15.1,.25,3)
Enter 'Interactive' if during the merge process you wish to be able to select certain field values of the From record to replace in the To record
"^DD",15.1,15.1,.25,21,0)
^^3^3^2901213^^
"^DD",15.1,15.1,.25,21,1,0)
This field is used to define whether during the merge process the operator
"^DD",15.1,15.1,.25,21,2,0)
will be able to select certain field values to transfer (Interactive) or
"^DD",15.1,15.1,.25,21,3,0)
if the merge will occur automatically (Non-interactive).
"^DD",15.1,15.1,.25,23,0)
^^9^9^2901213^^
"^DD",15.1,15.1,.25,23,1,0)
If you enter 'Interactive' the utilities of DITC will be utilized to
"^DD",15.1,15.1,.25,23,2,0)
display both records and different fields in a columnar format on the
"^DD",15.1,15.1,.25,23,3,0)
screen.  The operator will then be able to select field values of the
"^DD",15.1,15.1,.25,23,4,0)
From record to replace the corresponding fields in the To record.
"^DD",15.1,15.1,.25,23,5,0)

"^DD",15.1,15.1,.25,23,6,0)
If you choose 'Non-interactive' the operator will not see a display
"^DD",15.1,15.1,.25,23,7,0)
of the records and the To field values will be retained with the
"^DD",15.1,15.1,.25,23,8,0)
fields that are empty being replaced by any corresponding From field
"^DD",15.1,15.1,.25,23,9,0)
value.
"^DD",15.1,15.1,.25,"DT")
2901213
"^DD",15.1,15.1,.26,0)
DELETE FROM ENTRY^S^0:NO;1:YES;^0;26^Q
"^DD",15.1,15.1,.26,3)
If you wish to delete the From record entry enter a 'YES', if you wish to keep the From entry or have done any manipulation of the From entry in the Post-Merge Routine enter a 'NO'.
"^DD",15.1,15.1,.26,21,0)
^^2^2^2900829^
"^DD",15.1,15.1,.26,21,1,0)
This field is used to tell the Duplicate Resolution software whether
"^DD",15.1,15.1,.26,21,2,0)
or not you wish to delete the From entry in this file.
"^DD",15.1,15.1,.26,23,0)
^^7^7^2900829^
"^DD",15.1,15.1,.26,23,1,0)
This field is used to tell the Duplicate Resolution software whether or
"^DD",15.1,15.1,.26,23,2,0)
not the From entry should be deleted from the file.  The From entry will
"^DD",15.1,15.1,.26,23,3,0)
be deleted using DIK and it should also be remebered that any files pointing
"^DD",15.1,15.1,.26,23,4,0)
to the From entry will have been repointed before the entry is deleted.
"^DD",15.1,15.1,.26,23,5,0)

"^DD",15.1,15.1,.26,23,6,0)
Also if you wish to leave some sort of stub or cross reference of the From
"^DD",15.1,15.1,.26,23,7,0)
entry, this should be accomplished in the Post-Merge Routine.
"^DD",15.1,15.1,.26,"DT")
2900829
"^DD",15.1,15.1,.27,0)
PRE-MERGE ROUTINE^F^^0;27^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.1,.27,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.1,.27,21,0)
^^3^3^2900912^^^^
"^DD",15.1,15.1,.27,21,1,0)
This field is utilized to name a routine that should be done
"^DD",15.1,15.1,.27,21,2,0)
prior to the merging process.
"^DD",15.1,15.1,.27,21,3,0)
This may be a entry point call to a routine or just a routine name.
"^DD",15.1,15.1,.27,23,0)
^^5^5^2900912^^^
"^DD",15.1,15.1,.27,23,1,0)
This field will be executed by the duplicate resolution software.
"^DD",15.1,15.1,.27,23,2,0)
The routine should be entered without a '^' if an entry point is
"^DD",15.1,15.1,.27,23,3,0)
utilized use a '-' to separate the entry point from the routine name.
"^DD",15.1,15.1,.27,23,4,0)
The duplicate resolution software will execute this field after
"^DD",15.1,15.1,.27,23,5,0)
transforming the '-' to a '^'.
"^DD",15.1,15.1,.27,"DT")
2900912
"^DD",15.1,15.1,.28,0)
POST-MERGE ROUTINE^F^^0;28^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.1,.28,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.1,.28,21,0)
^^3^3^2900912^
"^DD",15.1,15.1,.28,21,1,0)
This field is utilized to name a routine that should be done after
"^DD",15.1,15.1,.28,21,2,0)
the completion of the merge process.  This may be a entry point call
"^DD",15.1,15.1,.28,21,3,0)
to a routine or just a routine name.
"^DD",15.1,15.1,.28,23,0)
^^5^5^2900912^
"^DD",15.1,15.1,.28,23,1,0)
This field will be executed by the duplicate resolution software.
"^DD",15.1,15.1,.28,23,2,0)
The routine should be entered without a '^', if an entry point is
"^DD",15.1,15.1,.28,23,3,0)
utilized use a '-' to separate the entry point from the routine
"^DD",15.1,15.1,.28,23,4,0)
name.  The duplicate resolution software will execute this field after
"^DD",15.1,15.1,.28,23,5,0)
transforming the '-' to a '^'.
"^DD",15.1,15.1,.28,"DT")
2900912
"^DD",15.1,15.1,.29,0)
MERGE MAIL GROUP^P3.8'^XMB(3.8,^0;29^Q
"^DD",15.1,15.1,.29,3)
Enter the name of the mail group to which you want to send a bulletin when a duplicate record pair has completed being merged.  The name must be in the Mail Group file.
"^DD",15.1,15.1,.29,21,0)
^^2^2^2970718^^
"^DD",15.1,15.1,.29,21,1,0)
This is the mail group that will be sent a bulletin whenever
"^DD",15.1,15.1,.29,21,2,0)
the merge process has been completed for a duplicate record pair.
"^DD",15.1,15.1,.29,23,0)
^^4^4^2970718^^
"^DD",15.1,15.1,.29,23,1,0)
This is the mail group that will be sent a bulletin saying that
"^DD",15.1,15.1,.29,23,2,0)
a duplicate record pair has been merged.  Generally it will
"^DD",15.1,15.1,.29,23,3,0)
be the same mail group as specified in the Verified Duplicate
"^DD",15.1,15.1,.29,23,4,0)
Mail Group field (#.16).
"^DD",15.1,15.1,.29,"DT")
2900830
"^DD",15.1,15.1,.31,0)
MERGE MSG ROUTINE^F^^0;31^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.1,.31,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.1,.31,21,0)
^^3^3^2901231^^^^
"^DD",15.1,15.1,.31,21,1,0)
Enter the name of the routine which will be called to send a
"^DD",15.1,15.1,.31,21,2,0)
bulletin to members of the Merge Mail Group.  No '^' should be
"^DD",15.1,15.1,.31,21,3,0)
included.
"^DD",15.1,15.1,.31,23,0)
^^13^13^2901231^
"^DD",15.1,15.1,.31,23,1,0)
This optional field is to allow a package developer to send a
"^DD",15.1,15.1,.31,23,2,0)
customized bulletin notifying the Merge Mail Group about
"^DD",15.1,15.1,.31,23,3,0)
merged duplicate pairs.  If nothing is entered, the Kernel
"^DD",15.1,15.1,.31,23,4,0)
duplicate resolution software will send a brief bulletin to
"^DD",15.1,15.1,.31,23,5,0)
the members of the mail group.  The Kernel Bulletin will
"^DD",15.1,15.1,.31,23,6,0)
only provide the .01 values and the DFN's of the two records.
"^DD",15.1,15.1,.31,23,7,0)
The duplicate resolution software will pass this routine
"^DD",15.1,15.1,.31,23,8,0)
XDRMFR and XDRMTO and it will be up to the routine to gather
"^DD",15.1,15.1,.31,23,9,0)
any information it wants to send in the bulletin and also to
"^DD",15.1,15.1,.31,23,10,0)
send the bulletin to the Merge Mail Group.  A label entry point is
"^DD",15.1,15.1,.31,23,11,0)
allowed but you must use a '-' instead of the normal '^', ex.
"^DD",15.1,15.1,.31,23,12,0)
ENTRY POINT-ROUTINE.  This entry point will be executed by the
"^DD",15.1,15.1,.31,23,13,0)
duplicate resolution software after transforming the '-' into a '^'.
"^DD",15.1,15.1,.31,"DT")
2901231
"^DD",15.1,15.1,.32,0)
AUTO MERGE STATUS^S^0:RUN;1:STOP;^0;32^Q
"^DD",15.1,15.1,.32,3)
"Enter 'S' if you are currently automatically merging all Ready to Merge Duplicates and want to stop the process."
"^DD",15.1,15.1,.32,21,0)
^^2^2^2901212^
"^DD",15.1,15.1,.32,21,1,0)
This field is used by the Kernel Merge routines to determine if it
"^DD",15.1,15.1,.32,21,2,0)
should stop automatically merging the Ready to Merge Verified Duplicates.
"^DD",15.1,15.1,.32,23,0)
^^5^5^2901212^
"^DD",15.1,15.1,.32,23,1,0)
This field is used as a quit flag for the EN1 entry point in XDRMAIN.
"^DD",15.1,15.1,.32,23,2,0)
It is used to stop the looping of the ^VA(15,"AMRG", X-ref which
"^DD",15.1,15.1,.32,23,3,0)
is utilized to merge the verified duplicates that could not be merged
"^DD",15.1,15.1,.32,23,4,0)
at the time of verification due to package interactions.  It only
"^DD",15.1,15.1,.32,23,5,0)
comes into play when the MERGE STYLE field is set to Non-Interactive.
"^DD",15.1,15.1,.32,"DT")
2901212
"^DD",15.1,15.1,.33,0)
MERGE DIRECTION INP TRANSFORM^F^^0;33^K:$L(X)>17!($L(X)<2) X
"^DD",15.1,15.1,.33,3)
Answer must be 2-17 characters in length. No '^' allowed.  Use a "-" in place of a "^".
"^DD",15.1,15.1,.33,21,0)
^^4^4^2921217^
"^DD",15.1,15.1,.33,21,1,0)
This field contains the routine that will be executed by the input
"^DD",15.1,15.1,.33,21,2,0)
transform on the merge directions field of the Duplicate record file.
"^DD",15.1,15.1,.33,21,3,0)
This routine will execute code that will help the user decide whether
"^DD",15.1,15.1,.33,21,4,0)
or not they have selected the best record to be the target record.
"^DD",15.1,15.1,.33,23,0)
^^3^3^2921217^
"^DD",15.1,15.1,.33,23,1,0)
A routine or entry point_"-"_routine.
"^DD",15.1,15.1,.33,23,2,0)
This field is optional.
"^DD",15.1,15.1,.33,23,3,0)
Called from the input transform on .04 field of file 15.
"^DD",15.1,15.1,.33,"DT")
2921019
"^DD",15.1,15.1,1.01,0)
NUMBER OF THREADS^NJ1,0^^1;1^K:+X'=X!(X>5)!(X<1)!(X?.E1"."1N.N) X
"^DD",15.1,15.1,1.01,3)
Enter the maximum number of threads you want running during phase 3.  Enter 1 for only the main process or enter up to 5 for the main process and 4 other threads.
"^DD",15.1,15.1,1.01,21,0)
^^7^7^2970721^
"^DD",15.1,15.1,1.01,21,1,0)
This field is used to indicate the number of threads that should be used
"^DD",15.1,15.1,1.01,21,2,0)
during the longest phase of the merge process.  Entry of 1 would indicate
"^DD",15.1,15.1,1.01,21,3,0)
that only the main process (the same as null) would be running.  Entry of
"^DD",15.1,15.1,1.01,21,4,0)
2 to 5 indicates that the main process along with 1 to 4 other threads
"^DD",15.1,15.1,1.01,21,5,0)
should be used during this phase.  Each additional thread will be used to
"^DD",15.1,15.1,1.01,21,6,0)
process one of the most time consuming files.  Which will reduce the
"^DD",15.1,15.1,1.01,21,7,0)
amount of time that the main process takes.
"^DD",15.1,15.1,1.01,"DT")
2960510
"^DD",15.1,15.1,1.02,0)
THREAD FILES^F^^1;2^K:$L(X)>20!($L(X)<1) X
"^DD",15.1,15.1,1.02,3)
Enter the file numbers which should be threaded in the order in which they should be used (i.e., most time consuming first) separated by semi-colons, e.g., 44;52;50.8  .
"^DD",15.1,15.1,1.02,21,0)
^^6^6^2960510^
"^DD",15.1,15.1,1.02,21,1,0)
This field is used to indicate the preference for files which be used
"^DD",15.1,15.1,1.02,21,2,0)
as separate threads during the 3rd phase of the merge if extra threads
"^DD",15.1,15.1,1.02,21,3,0)
are indicated in field 1.01.  The files to be threaded should be those
"^DD",15.1,15.1,1.02,21,4,0)
which take the longest during this phase of the merge process with
"^DD",15.1,15.1,1.02,21,5,0)
the most time consuming file indicated first.  The files are indicated
"^DD",15.1,15.1,1.02,21,6,0)
by file numbers separated by semi-colons, e.g.,  44;52;50.8;
"^DD",15.1,15.1,1.02,"DT")
2960510
"^DD",15.1,15.1,2,0)
ANCILLARY SERVICE^15.12^^2;0
"^DD",15.1,15.1,2,21,0)
^^2^2^2970721^^^
"^DD",15.1,15.1,2,21,1,0)
Ancillary Service is a multiple of the service packages that are
"^DD",15.1,15.1,2,21,2,0)
associated with the duplicates.
"^DD",15.1,15.1,3.01,0)
LAST TIME NOTED^D^^3;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.1,15.1,3.01,3)
This field is entered and updated during the Search for Potential Duplicates.
"^DD",15.1,15.1,3.01,21,0)
^^6^6^2970122^
"^DD",15.1,15.1,3.01,21,1,0)
This field is entered and updated during the search for potential
"^DD",15.1,15.1,3.01,21,2,0)
duplicates.  It is entered and updated by XDRDMAIN on each entry of the
"^DD",15.1,15.1,3.01,21,3,0)
file that is being searched for duplicates.  It is used by XDRDSTAT to
"^DD",15.1,15.1,3.01,21,4,0)
determine if an apparently running process has stopped processing.  If
"^DD",15.1,15.1,3.01,21,5,0)
this is the case, the process is marked as having errored out after
"^DD",15.1,15.1,3.01,21,6,0)
15 minutes of no recorded activity.
"^DD",15.1,15.1,3.01,"DT")
2970122
"^DD",15.1,15.1,1100,0)
DUPLICATE TESTS^15.111A^^11;0
"^DD",15.1,15.1,1100,21,0)
^^2^2^2960305^^^
"^DD",15.1,15.1,1100,21,1,0)
Enter the name of the duplicate test you wish to
"^DD",15.1,15.1,1100,21,2,0)
run to determine if a pair of records are duplicates.
"^DD",15.1,15.1,1100,"DT")
2900830
"^DD",15.1,15.1,1200,0)
DINUM FILES FOR MERGE^15.112PA^^12;0
"^DD",15.1,15.1,1200,12)
File has to be a Dinum file pointing to the 'FILE TO BE CHECKED' file.
"^DD",15.1,15.1,1200,12.1)
S DIC("S")="I $P(^DD(XY,.01,0),U,2)[(""P""_D0),$P(^(0),U,5,99)[""DINUM"""
"^DD",15.1,15.1,1200,21,0)
^^14^14^2950210^^^^
"^DD",15.1,15.1,1200,21,1,0)
This multiple contains files that you want an operator to
"^DD",15.1,15.1,1200,21,2,0)
be able to compare and merge specific fields from prior to
"^DD",15.1,15.1,1200,21,3,0)
the merging and deletion of the duplicate record From entry.
"^DD",15.1,15.1,1200,21,4,0)
You may only enter files that point to and are dinum with
"^DD",15.1,15.1,1200,21,5,0)
the file you specified in the File to Be Checked field (#.01).
"^DD",15.1,15.1,1200,21,6,0)

"^DD",15.1,15.1,1200,21,7,0)
You should only place entries in this multiple if you have
"^DD",15.1,15.1,1200,21,8,0)
chosen 'Interactive' for the type of merge in the Merge Style
"^DD",15.1,15.1,1200,21,9,0)
field (#.25).
"^DD",15.1,15.1,1200,21,10,0)

"^DD",15.1,15.1,1200,21,11,0)
It uses Fileman's Compare and Merge option to display the
"^DD",15.1,15.1,1200,21,12,0)
duplicate record pair side by side allowing the operator
"^DD",15.1,15.1,1200,21,13,0)
to merge specific fields from the From entry to the To entry.
"^DD",15.1,15.1,1200,21,14,0)

"^DD",15.1,15.111,0)
DUPLICATE TEST SUB-FIELD^^.07^7
"^DD",15.1,15.111,0,"DT")
2970127
"^DD",15.1,15.111,0,"IX","AO",15.111,.02)

"^DD",15.1,15.111,0,"IX","AZ1",15.111,.04)

"^DD",15.1,15.111,0,"IX","B",15.111,.01)

"^DD",15.1,15.111,0,"NM","DUPLICATE TEST")

"^DD",15.1,15.111,0,"UP")
15.1
"^DD",15.1,15.111,.01,0)
DUPLICATE TEST^MF^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",15.1,15.111,.01,1,0)
^.1
"^DD",15.1,15.111,.01,1,1,0)
15.111^B
"^DD",15.1,15.111,.01,1,1,1)
S ^VA(15.1,DA(1),11,"B",$E(X,1,30),DA)=""
"^DD",15.1,15.111,.01,1,1,2)
K ^VA(15.1,DA(1),11,"B",$E(X,1,30),DA)
"^DD",15.1,15.111,.01,3)
Answer must be 3-30 characters in length.
"^DD",15.1,15.111,.01,21,0)
^^2^2^2960305^
"^DD",15.1,15.111,.01,21,1,0)
Enter the name of the duplicate test you wish to
"^DD",15.1,15.111,.01,21,2,0)
run to determine if a pair of records are duplicates.
"^DD",15.1,15.111,.01,"DT")
2910604
"^DD",15.1,15.111,.02,0)
ORDER OF TEST^RNJ2,0^^0;2^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",15.1,15.111,.02,1,0)
^.1
"^DD",15.1,15.111,.02,1,1,0)
15.111^AO
"^DD",15.1,15.111,.02,1,1,1)
S ^VA(15.1,DA(1),11,"AO",$E(X,1,30),DA)=""
"^DD",15.1,15.111,.02,1,1,2)
K ^VA(15.1,DA(1),11,"AO",$E(X,1,30),DA)
"^DD",15.1,15.111,.02,1,1,"%D",0)
^^2^2^2900927^
"^DD",15.1,15.111,.02,1,1,"%D",1,0)
This cross reference is used to place the duplicate resolution tests in
"^DD",15.1,15.111,.02,1,1,"%D",2,0)
the order the programmers want them to be executed.
"^DD",15.1,15.111,.02,1,1,"DT")
2900927
"^DD",15.1,15.111,.02,3)
Type a Number between 1 and 99, 0 Decimal Digits
"^DD",15.1,15.111,.02,21,0)
^^3^3^2960619^^^^
"^DD",15.1,15.111,.02,21,1,0)
Enter a number to represent whether you want this test run first, second,
"^DD",15.1,15.111,.02,21,2,0)
third, etc. to help in determining if a pair of records are potential
"^DD",15.1,15.111,.02,21,3,0)
duplicates.
"^DD",15.1,15.111,.02,"DT")
2921217
"^DD",15.1,15.111,.03,0)
DUPLICATE TEST ROUTINE^RF^^0;3^K:$L(X)>17!($L(X)<1) X
"^DD",15.1,15.111,.03,3)
Answer must be 1-17 characters in length.  No '^' allowed.
"^DD",15.1,15.111,.03,21,0)
^^3^3^2921217^^^
"^DD",15.1,15.111,.03,21,1,0)
Enter the name of the routine which will be called to do the
"^DD",15.1,15.111,.03,21,2,0)
actual comparison of the two records for a specific field.
"^DD",15.1,15.111,.03,21,3,0)
No '^' should be included in the name.
"^DD",15.1,15.111,.03,23,0)
^^5^5^2921217^^^
"^DD",15.1,15.111,.03,23,1,0)
Enter the routine name without the '^' character. A label entry
"^DD",15.1,15.111,.03,23,2,0)
point reference is allowed but you must use a '-' instead of the
"^DD",15.1,15.111,.03,23,3,0)
normal '^', ex. ENTRY POINT-ROUTINE.  This entry will be executed
"^DD",15.1,15.111,.03,23,4,0)
by the Kernel duplicate resolution software after transforming
"^DD",15.1,15.111,.03,23,5,0)
the '-' into a '^'.
"^DD",15.1,15.111,.03,"DT")
2900926
"^DD",15.1,15.111,.04,0)
FILE FOR INFORMATION^P1'^DIC(^0;4^Q
"^DD",15.1,15.111,.04,1,0)
^.1
"^DD",15.1,15.111,.04,1,1,0)
15.111^AZ1^MUMPS
"^DD",15.1,15.111,.04,1,1,1)
Q
"^DD",15.1,15.111,.04,1,1,2)
Q
"^DD",15.1,15.111,.04,1,1,"%D",0)
^^3^3^2910306^
"^DD",15.1,15.111,.04,1,1,"%D",1,0)
This cross reference is just used to make Fileman log the response so
"^DD",15.1,15.111,.04,1,1,"%D",2,0)
that the input transform on the FIELD TO BE CHECKED can refer to
"^DD",15.1,15.111,.04,1,1,"%D",3,0)
the $P value of this field.
"^DD",15.1,15.111,.04,1,1,"DT")
2910306
"^DD",15.1,15.111,.04,3)
Enter the File from which to get the information you want to compare.
"^DD",15.1,15.111,.04,4)
I $D(DZ),DZ="??" F I=0:0 S I=$O(^DD(D0,I)) Q:I'=+I  W:$P(^(I,0),U,2)'["C"&('+$P(^(0),U,2)) !,I,"  ",$P(^(0),U,1)
"^DD",15.1,15.111,.04,21,0)
^^3^3^2900830^^^^
"^DD",15.1,15.111,.04,21,1,0)
This is the field that you wish to compare and assign a
"^DD",15.1,15.111,.04,21,2,0)
matching value.  You cannot compare computed fields or any
"^DD",15.1,15.111,.04,21,3,0)
fields that are in a multiple.
"^DD",15.1,15.111,.04,23,0)
^^7^7^2900830^^
"^DD",15.1,15.111,.04,23,1,0)
This field represents the field number that you wish to
"^DD",15.1,15.111,.04,23,2,0)
compare values to help in determining if a potential
"^DD",15.1,15.111,.04,23,3,0)
duplicate record pair.  No multiples or computed fields are
"^DD",15.1,15.111,.04,23,4,0)
allowed.  There is a screen preventing their selection.
"^DD",15.1,15.111,.04,23,5,0)

"^DD",15.1,15.111,.04,23,6,0)
If the user enters a '??' the executable help will display all
"^DD",15.1,15.111,.04,23,7,0)
the fields that are valid choices.
"^DD",15.1,15.111,.04,"DT")
2910306
"^DD",15.1,15.111,.05,0)
FIELD TO BE CHECKED^RNJ18,9X^^0;5^S %=$S('$P(^VA(15.1,DA(1),11,DA,0),U,4):DA(1),1:$P(^(0),U,4)) X "I $D(^DD(%,X,0)) S %=^(0) I $P(%,U,2)'[""C"",$P($P(%,U,4),"";"",2)" K:'$T X
"^DD",15.1,15.111,.05,3)
Enter a field # (e.g.  .05), it cannot be a computed field or a multiple.  If you enter a '??' you will get a list of possible fields.
"^DD",15.1,15.111,.05,4)
I $D(DZ),DZ="??" S %=$S('$P(^VA(15.1,DA(1),11,DA,0),U,4):DA(1),1:$P(^(0),U,4)) F I=0:0 S I=$O(^DD(%,I)) Q:I'=+I  W:$P(^(I,0),U,2)'["C"&('+$P(^(0),U,2)) !,I,"  ",$P(^(0),U,1)
"^DD",15.1,15.111,.05,21,0)
^^3^3^2900830^^^^
"^DD",15.1,15.111,.05,21,1,0)
This is the field that you wish to compare and assign a
"^DD",15.1,15.111,.05,21,2,0)
matching value.  You cannot compare computed fields or any
"^DD",15.1,15.111,.05,21,3,0)
fields that are in a multiple.
"^DD",15.1,15.111,.05,23,0)
^^7^7^2900830^^
"^DD",15.1,15.111,.05,23,1,0)
This field represents the field number that you wish to
"^DD",15.1,15.111,.05,23,2,0)
compare values to help in determining if a potential
"^DD",15.1,15.111,.05,23,3,0)
duplicate record pair.  No multiples or computed fields are
"^DD",15.1,15.111,.05,23,4,0)
allowed.  There is a screen preventing their selection.
"^DD",15.1,15.111,.05,23,5,0)

"^DD",15.1,15.111,.05,23,6,0)
If the user enters a '??' the executable help will display all
"^DD",15.1,15.111,.05,23,7,0)
the fields that are valid choices.
"^DD",15.1,15.111,.05,"DT")
2921217
"^DD",15.1,15.111,.06,0)
SUCCESSFUL MATCH WEIGHT^RNJ3,0^^0;6^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.1,15.111,.06,3)
Type a Number between 0 and 100, 0 Decimal Digits
"^DD",15.1,15.111,.06,21,0)
^^2^2^2900829^
"^DD",15.1,15.111,.06,21,1,0)
This is the value given towards determing if a pair of records are
"^DD",15.1,15.111,.06,21,2,0)
potential duplicates.
"^DD",15.1,15.111,.06,21,3,0)
duplicates.
"^DD",15.1,15.111,.06,23,0)
^^6^6^2900829^
"^DD",15.1,15.111,.06,23,1,0)
This is the value given towards determing if a pair of records are
"^DD",15.1,15.111,.06,23,2,0)
potential duplicates.  This should be the maximum number of points
"^DD",15.1,15.111,.06,23,3,0)
awarded if the field from both records exactly matched.
"^DD",15.1,15.111,.06,23,4,0)

"^DD",15.1,15.111,.06,23,5,0)
In the Duplicate Test routine fractions of this value will be awarded
"^DD",15.1,15.111,.06,23,6,0)
based on whether there was an exact match or some partial match.
"^DD",15.1,15.111,.06,"DT")
2970127
"^DD",15.1,15.111,.07,0)
UNSUCCESSFUL MATCH WEIGHT^RNJ1,0^^0;7^K:+X'=X!(X>0)!(X<-100)!(X?.E1"."1N.N) X
"^DD",15.1,15.111,.07,3)
Type a Number between -100 and 0, 0 Decimal Digits
"^DD",15.1,15.111,.07,21,0)
^^3^3^2950109^^
"^DD",15.1,15.111,.07,21,1,0)
This is the value that should be subtracted from the total number
"^DD",15.1,15.111,.07,21,2,0)
of points awarded in determining if a pair of records are potential
"^DD",15.1,15.111,.07,21,3,0)
duplicates.
"^DD",15.1,15.111,.07,23,0)
^^6^6^2950109^^
"^DD",15.1,15.111,.07,23,1,0)
This is the value that should be subtracted from the total number of
"^DD",15.1,15.111,.07,23,2,0)
points awarded in determing if a pair of records are potential duplicates.
"^DD",15.1,15.111,.07,23,3,0)

"^DD",15.1,15.111,.07,23,4,0)
In other words, when there is no type of match that can be made on the
"^DD",15.1,15.111,.07,23,5,0)
field in the two records this negative score will be assigned to the
"^DD",15.1,15.111,.07,23,6,0)
checking algorithm.
"^DD",15.1,15.111,.07,"DT")
2970127
"^DD",15.1,15.112,0)
DINUM FILES FOR MERGE SUB-FIELD^^.01^1
"^DD",15.1,15.112,0,"DT")
2900906
"^DD",15.1,15.112,0,"IX","B",15.112,.01)

"^DD",15.1,15.112,0,"NM","DINUM FILES FOR MERGE")

"^DD",15.1,15.112,0,"UP")
15.1
"^DD",15.1,15.112,.01,0)
DINUM FILE FOR MERGE^M*P1'^DIC(^0;1^S DIC("S")="I $P(^DD(Y,.01,0),U,2)[""P"",+$P($P(^(0),U,2),""P"",2)=D0,$P(^(0),U,5,99)[""DINUM""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",15.1,15.112,.01,1,0)
^.1
"^DD",15.1,15.112,.01,1,1,0)
15.112^B
"^DD",15.1,15.112,.01,1,1,1)
S ^VA(15.1,DA(1),12,"B",$E(X,1,30),DA)=""
"^DD",15.1,15.112,.01,1,1,2)
K ^VA(15.1,DA(1),12,"B",$E(X,1,30),DA)
"^DD",15.1,15.112,.01,3)
Enter a file number or name that points to and is dinum with the File to Be Checked field (#.01).
"^DD",15.1,15.112,.01,12)
Must point to primary file and be DINUM
"^DD",15.1,15.112,.01,12.1)
S DIC("S")="I $P(^DD(Y,.01,0),U,2)[""P"",+$P($P(^(0),U,2),""P"",2)=D0,$P(^(0),U,5,99)[""DINUM"""
"^DD",15.1,15.112,.01,21,0)
^^6^6^2950210^^^
"^DD",15.1,15.112,.01,21,1,0)
This is a file that points to the File to Be Checked entry and is
"^DD",15.1,15.112,.01,21,2,0)
Dinum with it.
"^DD",15.1,15.112,.01,21,3,0)

"^DD",15.1,15.112,.01,21,4,0)
During an Interactive style of merge the duplicate record pair
"^DD",15.1,15.112,.01,21,5,0)
entries for this file will be displayed side by side allowing an
"^DD",15.1,15.112,.01,21,6,0)
operator to merge selected fields in these entries.
"^DD",15.1,15.112,.01,"DT")
2910105
"^DD",15.1,15.12,0)
ANCILLARY SERVICE SUB-FIELD^^2.02^6
"^DD",15.1,15.12,0,"DT")
2960207
"^DD",15.1,15.12,0,"IX","B",15.12,.01)

"^DD",15.1,15.12,0,"NM","ANCILLARY SERVICE")

"^DD",15.1,15.12,0,"UP")
15.1
"^DD",15.1,15.12,.01,0)
ANCILLARY SERVICE^MF^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",15.1,15.12,.01,1,0)
^.1
"^DD",15.1,15.12,.01,1,1,0)
15.12^B
"^DD",15.1,15.12,.01,1,1,1)
S ^VA(15.1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",15.1,15.12,.01,1,1,2)
K ^VA(15.1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",15.1,15.12,.01,3)
Answer must be 3-30 characters in length.
"^DD",15.1,15.12,.01,21,0)
^^1^1^2960305^
"^DD",15.1,15.12,.01,21,1,0)
The name of the ancillary service that is associated with each duplicate.
"^DD",15.1,15.12,.01,"DT")
2960206
"^DD",15.1,15.12,.02,0)
MAIL GROUP^P3.8'^XMB(3.8,^0;2^Q
"^DD",15.1,15.12,.02,21,0)
^^3^3^2970721^^
"^DD",15.1,15.12,.02,21,1,0)
This field is the name of the ancillary mail group that the mail messages
"^DD",15.1,15.12,.02,21,2,0)
will be sent too.  The mail messages are used to notify ancillary services
"^DD",15.1,15.12,.02,21,3,0)
to process potential duplicate.
"^DD",15.1,15.12,.02,"DT")
2960920
"^DD",15.1,15.12,.03,0)
PRIMARY FILE NUMBER^RNJ18,4^^0;3^K:+X'=X!(X>9999999999999)!(X<0)!(X?.E1"."5N.N) X
"^DD",15.1,15.12,.03,3)
Enter the file NUMBER for the primary file to be used for identifying duplicates for this ancillary package (e.g., LAB DATA (63), RADIOLOGY PATIENT (70), PHARMACY PATIENT (55), etc.)
"^DD",15.1,15.12,.03,21,0)
^^2^2^2960305^
"^DD",15.1,15.12,.03,21,1,0)
This is the file number mostly related to the ancillary
"^DD",15.1,15.12,.03,21,2,0)
service (package).
"^DD",15.1,15.12,.03,"DT")
2960207
"^DD",15.1,15.12,1,0)
INDIVIDUAL^15.121P^^1;0
"^DD",15.1,15.12,1,21,0)
^^2^2^2960305^
"^DD",15.1,15.12,1,21,1,0)
This multiple is a pointer to the New Person file which is used to include
"^DD",15.1,15.12,1,21,2,0)
individuals that are not part of the mail group.
"^DD",15.1,15.12,2.01,0)
SUBFILES (FIELD NUMBERS)^F^^2;1^K:$L(X)>60!($L(X)<1) X
"^DD",15.1,15.12,2.01,3)
Enter field numbers for subfiles (with DATE values in the .01 field) to be displayed separated by a semicolon, e.g., 1;.085;2;4;5
"^DD",15.1,15.12,2.01,21,0)
^^18^18^2960305^^^
"^DD",15.1,15.12,2.01,21,1,0)
This field is used to indicate one or more subfiles within the primary
"^DD",15.1,15.12,2.01,21,2,0)
file which should have a .01 field as a date and can be used to display
"^DD",15.1,15.12,2.01,21,3,0)
the last date associated with the subfiles's data for the potential
"^DD",15.1,15.12,2.01,21,4,0)
duplicate patients.  The field numbers in the primary file for the desired
"^DD",15.1,15.12,2.01,21,5,0)
subfiles should be entered and separated by a semicolon.
"^DD",15.1,15.12,2.01,21,6,0)

"^DD",15.1,15.12,2.01,21,7,0)
For example, in the laboratory data file (63), entry of
"^DD",15.1,15.12,2.01,21,8,0)

"^DD",15.1,15.12,2.01,21,9,0)
   1;.085;2;4;5;8;9
"^DD",15.1,15.12,2.01,21,10,0)

"^DD",15.1,15.12,2.01,21,11,0)
would indicate field 1 in file 63, which is the Blood Bank subfile
"^DD",15.1,15.12,2.01,21,12,0)
field .085, which is the Tranfusion Record subfile
"^DD",15.1,15.12,2.01,21,13,0)
field 2, which is the EM subfile
"^DD",15.1,15.12,2.01,21,14,0)
field 4, which is the CHEM, HEM, TOX, ..., etc. subfile
"^DD",15.1,15.12,2.01,21,15,0)
field 5, which is the Microbiology subfile
"^DD",15.1,15.12,2.01,21,16,0)
field 8, which is the Surgical Pathology subfile
"^DD",15.1,15.12,2.01,21,17,0)
and
"^DD",15.1,15.12,2.01,21,18,0)
field 9, which is the Cytopathology subfile
"^DD",15.1,15.12,2.01,"DT")
2960207
"^DD",15.1,15.12,2.02,0)
DISPLAY NAMES FOR SUBFILES^F^^2;2^K:$L(X)>120!($L(X)<1) X
"^DD",15.1,15.12,2.02,3)
Enter the names which are to be associated with the subfiles, separating each by a semicolon, e.g., Bld Bank;Transfusn;EM;Lab Tests;Microbiol
"^DD",15.1,15.12,2.02,21,0)
^^13^13^2960305^^
"^DD",15.1,15.12,2.02,21,1,0)
This field is used to specify names to be displayed for any subfiles which
"^DD",15.1,15.12,2.02,21,2,0)
are listed in the SUBFILES (FIELD NUMBERS). The names should be entered in
"^DD",15.1,15.12,2.02,21,3,0)
the same order as the field numbers for the subfiles are entered and a
"^DD",15.1,15.12,2.02,21,4,0)
semicolon should be used to separate each name.
"^DD",15.1,15.12,2.02,21,5,0)

"^DD",15.1,15.12,2.02,21,6,0)
For example the following might be entered for SUBFILES (FIELD NUMBERS)
"^DD",15.1,15.12,2.02,21,7,0)
for file 63
"^DD",15.1,15.12,2.02,21,8,0)

"^DD",15.1,15.12,2.02,21,9,0)
    1;.085;2;4;5;8;9
"^DD",15.1,15.12,2.02,21,10,0)

"^DD",15.1,15.12,2.02,21,11,0)
and the entry for the DISPLAY NAMES FOR SUBFILES might be
"^DD",15.1,15.12,2.02,21,12,0)

"^DD",15.1,15.12,2.02,21,13,0)
   Bld Bank;Transfusn;EM;Lab Tests;Microbiol;Surg Pathol;Cytology
"^DD",15.1,15.12,2.02,"DT")
2960207
"^DD",15.1,15.121,0)
INDIVIDUAL SUB-FIELD^^.01^1
"^DD",15.1,15.121,0,"DT")
2960206
"^DD",15.1,15.121,0,"IX","B",15.121,.01)

"^DD",15.1,15.121,0,"NM","INDIVIDUAL")

"^DD",15.1,15.121,0,"UP")
15.12
"^DD",15.1,15.121,.01,0)
INDIVIDUAL^MP200'^VA(200,^0;1^Q
"^DD",15.1,15.121,.01,1,0)
^.1
"^DD",15.1,15.121,.01,1,1,0)
15.121^B
"^DD",15.1,15.121,.01,1,1,1)
S ^VA(15.1,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15.1,15.121,.01,1,1,2)
K ^VA(15.1,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",15.1,15.121,.01,21,0)
^^2^2^2960305^^
"^DD",15.1,15.121,.01,21,1,0)
This field is the individual/individuals that the alerts would be sent
"^DD",15.1,15.121,.01,21,2,0)
to.
"^DD",15.1,15.121,.01,"DT")
2960206
"^DD",15.2,15.2,0)
FIELD^^3^11
"^DD",15.2,15.2,0,"DDA")
N
"^DD",15.2,15.2,0,"DT")
2960920
"^DD",15.2,15.2,0,"IX","B",15.2,.01)

"^DD",15.2,15.2,0,"NM","XDR MERGE PROCESS")

"^DD",15.2,15.2,0,"PT",15,.2)

"^DD",15.2,15.2,0,"VRPK")
XT
"^DD",15.2,15.2,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",15.2,15.2,.01,1,0)
^.1
"^DD",15.2,15.2,.01,1,1,0)
15.2^B
"^DD",15.2,15.2,.01,1,1,1)
S ^VA(15.2,"B",$E(X,1,30),DA)=""
"^DD",15.2,15.2,.01,1,1,2)
K ^VA(15.2,"B",$E(X,1,30),DA)
"^DD",15.2,15.2,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",15.2,15.2,.02,0)
MERGE FILE NUMBER^F^^0;2^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.2,15.2,.02,3)
Answer must be 1-20 characters in length and indicate the primary FILE NUMBER in which entries are being merged.
"^DD",15.2,15.2,.02,21,0)
^^2^2^2960416^
"^DD",15.2,15.2,.02,21,1,0)
This field indicates the primary file for which this merge process is
"^DD",15.2,15.2,.02,21,2,0)
being run.
"^DD",15.2,15.2,.02,"DT")
2960416
"^DD",15.2,15.2,.03,0)
START DATE/TIME^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.2,.03,3)
This field indicates the date/time on which the merge process originally started (or is scheduled to start, if in the future).
"^DD",15.2,15.2,.03,21,0)
^^2^2^2960416^
"^DD",15.2,15.2,.03,21,1,0)
This field indicates the original date and time when the merge process
"^DD",15.2,15.2,.03,21,2,0)
began, or if in the future, is scheduled to start.
"^DD",15.2,15.2,.03,"DT")
2960416
"^DD",15.2,15.2,.04,0)
STATUS^S^S:SCHEDULED;A:ACTIVE NOW;C:COMPLETED;U:UNKNOWN-LOST;R:RESCHEDULED;^0;4^Q
"^DD",15.2,15.2,.04,3)
This field indicates the current status of this merge process.
"^DD",15.2,15.2,.04,21,0)
^^18^18^2951129^
"^DD",15.2,15.2,.04,21,1,0)
This field is used to track the current status of the merge process.  The
"^DD",15.2,15.2,.04,21,2,0)
choices are:
"^DD",15.2,15.2,.04,21,3,0)
  SCHEDULED -  this process is scheduled to run as a task - the start
"^DD",15.2,15.2,.04,21,4,0)
               date/time should be indicated in field .03
"^DD",15.2,15.2,.04,21,5,0)

"^DD",15.2,15.2,.04,21,6,0)
  ACTIVE    -  the process is currently running and is actively updating
"^DD",15.2,15.2,.04,21,7,0)
               the current time value for the process.
"^DD",15.2,15.2,.04,21,8,0)

"^DD",15.2,15.2,.04,21,9,0)
  COMPLETED -  the process ran through the all entries to normal
"^DD",15.2,15.2,.04,21,10,0)
               completion.
"^DD",15.2,15.2,.04,21,11,0)

"^DD",15.2,15.2,.04,21,12,0)
  UNKNOWN-LOST - this is an abnormal status and is set when a supposedly
"^DD",15.2,15.2,.04,21,13,0)
                 active process is no longer updating the current time
"^DD",15.2,15.2,.04,21,14,0)
                 value for the process (and has not for a period of time).
"^DD",15.2,15.2,.04,21,15,0)

"^DD",15.2,15.2,.04,21,16,0)
  RESCHEDULED  - the process is scheduled to restart and continue from its
"^DD",15.2,15.2,.04,21,17,0)
                 last checkpointed location.  The restart time should be
"^DD",15.2,15.2,.04,21,18,0)
                 indicated in field .05
"^DD",15.2,15.2,.04,"DT")
2951129
"^DD",15.2,15.2,.05,0)
RESTART DATE/TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.2,.05,3)
This value indicates the date and time at which the LAST restart for the merge process began or is scheduled (if in the future).
"^DD",15.2,15.2,.05,21,0)
^^5^5^2951129^
"^DD",15.2,15.2,.05,21,1,0)
This value indicates the date and time when the merge process was last
"^DD",15.2,15.2,.05,21,2,0)
restarted or, if in the future, is scheduled to restart.  A restart
"^DD",15.2,15.2,.05,21,3,0)
date/time would only be entered if the merge process was not successful in
"^DD",15.2,15.2,.05,21,4,0)
completing in its first run.  If multiple restarts are required to reach
"^DD",15.2,15.2,.05,21,5,0)
completion, only the last restart would be indicated.
"^DD",15.2,15.2,.05,"DT")
2951129
"^DD",15.2,15.2,.06,0)
COMPLETION DATE/TIME^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.2,.06,3)
This value indicates the Date and Time when the merge process was completed
"^DD",15.2,15.2,.06,21,0)
^^2^2^2951129^
"^DD",15.2,15.2,.06,21,1,0)
This value indicates the date and time when the merge process was
"^DD",15.2,15.2,.06,21,2,0)
successfully completed.
"^DD",15.2,15.2,.06,"DT")
2951129
"^DD",15.2,15.2,.07,0)
NUMBER OF RESTARTS^NJ3,0^^0;7^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.2,15.2,.07,3)
This value indicates the number of times  that the merge process was restarted.
"^DD",15.2,15.2,.07,21,0)
^^2^2^2951129^
"^DD",15.2,15.2,.07,21,1,0)
This field is a simple count of the number of restarts which were required
"^DD",15.2,15.2,.07,21,2,0)
prior to completion of the merge process.
"^DD",15.2,15.2,.07,"DT")
2951129
"^DD",15.2,15.2,.08,0)
TASK NUMBER^F^^0;8^K:$L(X)>20!($L(X)<1)!'(X?1.N) X
"^DD",15.2,15.2,.08,3)
This field contains the task number currently associated with the merge process (scheduled, active, or completed).
"^DD",15.2,15.2,.08,21,0)
^^2^2^2951129^
"^DD",15.2,15.2,.08,21,1,0)
This field shows the task number currently associated with this merge
"^DD",15.2,15.2,.08,21,2,0)
process (scheduled, active, or completed).
"^DD",15.2,15.2,.08,"DT")
2951129
"^DD",15.2,15.2,.09,0)
HALT FLAG^S^1:HALT;^0;9^Q
"^DD",15.2,15.2,.09,3)
This flag is set if the merge process is to halt.
"^DD",15.2,15.2,.09,21,0)
^^5^5^2960617^
"^DD",15.2,15.2,.09,21,1,0)
This field is a flag which is set if the merge process is supposed to
"^DD",15.2,15.2,.09,21,2,0)
halt.  While the flag might be set manually, it normally would be set
"^DD",15.2,15.2,.09,21,3,0)
by the process when taskmanager indicates the process is to halt, or if
"^DD",15.2,15.2,.09,21,4,0)
a halt merge process option sets the flag.  The flag is necessary to
"^DD",15.2,15.2,.09,21,5,0)
permit communication to multiple threads during processing of phase 3.
"^DD",15.2,15.2,.09,"DT")
2960617
"^DD",15.2,15.2,2,0)
MERGE ENTRY^15.22A^^2;0
"^DD",15.2,15.2,3,0)
PACKAGE BEING MERGED^15.23A^^3;0
"^DD",15.2,15.2,3,"DT")
2960417
"^DD",15.2,15.22,0)
MERGE ENTRY SUB-FIELD^^.03^3
"^DD",15.2,15.22,0,"DT")
2960419
"^DD",15.2,15.22,0,"IX","B",15.22,.01)

"^DD",15.2,15.22,0,"NM","MERGE ENTRY")

"^DD",15.2,15.22,0,"UP")
15.2
"^DD",15.2,15.22,.01,0)
MERGE ENTRY^MF^^0;1^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.2,15.22,.01,1,0)
^.1
"^DD",15.2,15.22,.01,1,1,0)
15.22^B
"^DD",15.2,15.22,.01,1,1,1)
S ^VA(15.2,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",15.2,15.22,.01,1,1,2)
K ^VA(15.2,DA(1),2,"B",$E(X,1,30),DA)
"^DD",15.2,15.22,.01,3)
This is the internal entry number to be merged in the merge process.
"^DD",15.2,15.22,.01,21,0)
^^1^1^2951129^
"^DD",15.2,15.22,.01,21,1,0)
This is the internal entry number to be merged during the merge process.
"^DD",15.2,15.22,.01,"DT")
2951129
"^DD",15.2,15.22,.02,0)
MERGE TO^F^^0;2^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.2,15.22,.02,3)
This is the internal entry number to which the MERGE ENTRY is being merged.
"^DD",15.2,15.22,.02,21,0)
^^2^2^2951129^
"^DD",15.2,15.22,.02,21,1,0)
This is the internal entry number to which the MERGE ENTRY (field .01) is
"^DD",15.2,15.22,.02,21,2,0)
being merged.
"^DD",15.2,15.22,.02,"DT")
2951129
"^DD",15.2,15.22,.03,0)
DUPLICATE FILE ENTRY^P15'^VA(15,^0;3^Q
"^DD",15.2,15.22,.03,3)
This is a pointer back to the Duplicate File Entry for this pair.
"^DD",15.2,15.22,.03,21,0)
^^2^2^2960419^
"^DD",15.2,15.22,.03,21,1,0)
This pointer back to the entry in the duplicate file for this pair is used
"^DD",15.2,15.22,.03,21,2,0)
to easily mark the correct entries on completion of the merge.
"^DD",15.2,15.22,.03,"DT")
2960419
"^DD",15.2,15.23,0)
PACKAGE BEING MERGED SUB-FIELD^^2^14
"^DD",15.2,15.23,0,"DT")
2960920
"^DD",15.2,15.23,0,"IX","B",15.23,.01)

"^DD",15.2,15.23,0,"NM","PACKAGE BEING MERGED")

"^DD",15.2,15.23,0,"UP")
15.2
"^DD",15.2,15.23,.01,0)
PACKAGE BEING MERGED^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",15.2,15.23,.01,1,0)
^.1
"^DD",15.2,15.23,.01,1,1,0)
15.23^B
"^DD",15.2,15.23,.01,1,1,1)
S ^VA(15.2,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",15.2,15.23,.01,1,1,2)
K ^VA(15.2,DA(1),3,"B",$E(X,1,30),DA)
"^DD",15.2,15.23,.01,3)
Answer must be 1-30 characters in length.
"^DD",15.2,15.23,.01,21,0)
^^5^5^2960416^
"^DD",15.2,15.23,.01,21,1,0)
During a merge process, there is the merge of the primary file.  There may
"^DD",15.2,15.23,.01,21,2,0)
also be merges of related files which require special processing (as
"^DD",15.2,15.23,.01,21,3,0)
indicated by entries within the 'Affects Merge' multiple of the package
"^DD",15.2,15.23,.01,21,4,0)
file).  This entry indicates which file merge the associated data is
"^DD",15.2,15.23,.01,21,5,0)
related to.  The entry is a file number for which a merge is being run.
"^DD",15.2,15.23,.01,"DT")
2960417
"^DD",15.2,15.23,.02,0)
START DATE/TIME^RD^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.23,.02,3)
This value indicates the date and time that the merge process was actually initiated or is scheduled to be started (if it is in the future).
"^DD",15.2,15.23,.02,21,0)
^^1^1^2960416^
"^DD",15.2,15.23,.02,21,1,0)
The date and time at which the merge process actually began.
"^DD",15.2,15.23,.02,"DT")
2960416
"^DD",15.2,15.23,.03,0)
STATUS^S^A:ACTIVE;C:COMPLETED;U:UNKNOWN-LOST;R:RESCHEDULED;S:SCHEDULED;H:HALTED;E:ERROR EXIT;^0;3^Q
"^DD",15.2,15.23,.03,3)
This field indicates the current status of this merge process.
"^DD",15.2,15.23,.03,21,0)
^^18^18^2980514^
"^DD",15.2,15.23,.03,21,1,0)
This field is used to track the current status of the merge process.  The
"^DD",15.2,15.23,.03,21,2,0)
choices are:
"^DD",15.2,15.23,.03,21,3,0)
  SCHEDULED -  this process is scheduled to run as a task - the start
"^DD",15.2,15.23,.03,21,4,0)
               date/time should be indicated in field .02
"^DD",15.2,15.23,.03,21,5,0)
 
"^DD",15.2,15.23,.03,21,6,0)
  ACTIVE    -  the process is currently running and is actively updating
"^DD",15.2,15.23,.03,21,7,0)
               the current time value for the process.
"^DD",15.2,15.23,.03,21,8,0)
 
"^DD",15.2,15.23,.03,21,9,0)
  COMPLETED -  the process ran through the all entries to normal
"^DD",15.2,15.23,.03,21,10,0)
               completion.
"^DD",15.2,15.23,.03,21,11,0)
 
"^DD",15.2,15.23,.03,21,12,0)
  UNKNOWN-LOST - this is an abnormal status and is set when a supposedly
"^DD",15.2,15.23,.03,21,13,0)
                 active process is no longer updating the current time
"^DD",15.2,15.23,.03,21,14,0)
                 value for the process (and has not for a period of time).
"^DD",15.2,15.23,.03,21,15,0)
 
"^DD",15.2,15.23,.03,21,16,0)
  RESCHEDULED  - the process is scheduled to restart and continue from its
"^DD",15.2,15.23,.03,21,17,0)
                 last checkpointed location.  The restart time should be
"^DD",15.2,15.23,.03,21,18,0)
                 indicated in field .05
"^DD",15.2,15.23,.03,"DT")
2960418
"^DD",15.2,15.23,.04,0)
RESTART DATE/TIME^D^^0;4^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.23,.04,3)
This value indicates the date and time at which the LAST restart for the merge process began or is scheduled (if in the future).
"^DD",15.2,15.23,.04,21,0)
^^5^5^2960416^
"^DD",15.2,15.23,.04,21,1,0)
This value indicates the date and time when the merge process was last
"^DD",15.2,15.23,.04,21,2,0)
restarted or, if in the future, is scheduled to restart.  A restart
"^DD",15.2,15.23,.04,21,3,0)
date/time would only be entered if the merge process was not successful
"^DD",15.2,15.23,.04,21,4,0)
in completing in its first run.  If multiple restarts are required to
"^DD",15.2,15.23,.04,21,5,0)
reach completion, only the last restart would be indicated.
"^DD",15.2,15.23,.04,"DT")
2960416
"^DD",15.2,15.23,.05,0)
COMPLETION DATE/TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.23,.05,3)
This value indicates the Date and Time when the merge process was completed.
"^DD",15.2,15.23,.05,21,0)
^^2^2^2960416^
"^DD",15.2,15.23,.05,21,1,0)
This value indicates the Date and Time when the merge process was 
"^DD",15.2,15.23,.05,21,2,0)
successfully completed.
"^DD",15.2,15.23,.05,"DT")
2960416
"^DD",15.2,15.23,.06,0)
NUMBER OF RESTARTS^NJ3,0^^0;6^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.2,15.23,.06,3)
This value indicates the number of times that the merge process was restarted.
"^DD",15.2,15.23,.06,21,0)
^^2^2^2960416^
"^DD",15.2,15.23,.06,21,1,0)
This field is a simple count of the number of restarts which were required
"^DD",15.2,15.23,.06,21,2,0)
prior to completion of the merge process.
"^DD",15.2,15.23,.06,"DT")
2960416
"^DD",15.2,15.23,.07,0)
TASK NUMBER^F^^0;7^K:$L(X)>20!($L(X)<1)!'(X?1.N) X
"^DD",15.2,15.23,.07,3)
This field contains the task number currently associated with the merge process (scheduled, active, or completed).
"^DD",15.2,15.23,.07,21,0)
^^2^2^2960416^
"^DD",15.2,15.23,.07,21,1,0)
This field shows the task number currently associated with this merge
"^DD",15.2,15.23,.07,21,2,0)
process (scheduled, active, or completed).
"^DD",15.2,15.23,.07,"DT")
2960416
"^DD",15.2,15.23,.08,0)
TAG FOR MERGE ROUTINE^F^^0;8^K:$L(X)>8!($L(X)<1)!'(X?1U.7UN) X
"^DD",15.2,15.23,.08,3)
This indicates the TAG to be used for entry into the merge routine.
"^DD",15.2,15.23,.08,21,0)
^^1^1^2960419^
"^DD",15.2,15.23,.08,21,1,0)
This field contains the TAG for entry into the merge routine for the package.  This will generally be in the form of TAG^ROUTINE(ARRAY)
"^DD",15.2,15.23,.08,"DT")
2960419
"^DD",15.2,15.23,.09,0)
PACKAGE ROUTINE^F^^0;9^K:$L(X)>8!($L(X)<3) X
"^DD",15.2,15.23,.09,3)
Answer must be 3-8 characters in length.
"^DD",15.2,15.23,.09,21,0)
^^3^3^2960417^
"^DD",15.2,15.23,.09,21,1,0)
This is the name of the routine as specified in the package file under
"^DD",15.2,15.23,.09,21,2,0)
the 'Affects Merge' entry that specifies special processing for this
"^DD",15.2,15.23,.09,21,3,0)
package.
"^DD",15.2,15.23,.09,"DT")
2960417
"^DD",15.2,15.23,1.01,0)
CURRENT TIME^D^^1;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",15.2,15.23,1.01,3)
This value indicates the most recent date/time checkpoint of the active process.
"^DD",15.2,15.23,1.01,21,0)
^^3^3^2960416^
"^DD",15.2,15.23,1.01,21,1,0)
This value indicates the last date/time recorded as a checkpoint by the
"^DD",15.2,15.23,1.01,21,2,0)
process.  This value is used to determine whether the process is still
"^DD",15.2,15.23,1.01,21,3,0)
active or not.
"^DD",15.2,15.23,1.01,"DT")
2960416
"^DD",15.2,15.23,1.02,0)
STAGE - CURRENT^S^0:FASTER;1:LATTER;^1;2^Q
"^DD",15.2,15.23,1.02,3)
This field is used to indicate which processing stage it currently is in.
"^DD",15.2,15.23,1.02,21,0)
^^10^10^2960416^
"^DD",15.2,15.23,1.02,21,1,0)
This field is used to indicate which processing stage this merge process
"^DD",15.2,15.23,1.02,21,2,0)
is currently in.  The merge process goes through three stages, but
"^DD",15.2,15.23,1.02,21,3,0)
since the first is rapid and doesn't require any effort to repeat
"^DD",15.2,15.23,1.02,21,4,0)
(since the entries have already been merged) only two stages are recorded.
"^DD",15.2,15.23,1.02,21,5,0)
The FASTER (or EARLY) stage indicates the processing of pointers which
"^DD",15.2,15.23,1.02,21,6,0)
either DINUMmed or cross-referenced so that they can be identified
"^DD",15.2,15.23,1.02,21,7,0)
rapidly.  The LATTER stage indicates the processing of pointers which
"^DD",15.2,15.23,1.02,21,8,0)
can only be found by stepping through each entry within a file - these
"^DD",15.2,15.23,1.02,21,9,0)
are the pointers which require longer periods to sucessfully complete
"^DD",15.2,15.23,1.02,21,10,0)
the re-pointing.
"^DD",15.2,15.23,1.02,"DT")
2960416
"^DD",15.2,15.23,1.03,0)
FILE - CURRENT^F^^1;3^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.2,15.23,1.03,3)
This field indicates the current file being processed as indicated at the last checkpoint of the active merge process.
"^DD",15.2,15.23,1.03,21,0)
^^2^2^2960416^
"^DD",15.2,15.23,1.03,21,1,0)
This value indicates the file currently being processed as recorded at
"^DD",15.2,15.23,1.03,21,2,0)
the last checkpoint by the active merge process.
"^DD",15.2,15.23,1.03,"DT")
2960416
"^DD",15.2,15.23,1.04,0)
ENTRY-CURRENT^F^^1;4^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.2,15.23,1.04,3)
This value indicates the most recent internal entry number as checkpointed within the FILE - CURRENT file by the active merge process.
"^DD",15.2,15.23,1.04,21,0)
^^6^6^2951129^
"^DD",15.2,15.23,1.04,21,1,0)
This value indicates the last internal entry number recorded as a
"^DD",15.2,15.23,1.04,21,2,0)
checkpoint (within the checkpointed file) by the active merge process.
"^DD",15.2,15.23,1.04,21,3,0)
This value (in conjunction with the other checkpoint data) is intended for
"^DD",15.2,15.23,1.04,21,4,0)
use in tracking the progress of the merge process and, if necessary, to
"^DD",15.2,15.23,1.04,21,5,0)
permit the merge process to be restarted in the vicinity where it was last
"^DD",15.2,15.23,1.04,21,6,0)
processing.
"^DD",15.2,15.23,1.04,"DT")
2960416
"^DD",15.2,15.23,2,0)
FILE FOR THREAD^15.232A^^2;0
"^DD",15.2,15.232,0)
FILE FOR THREAD SUB-FIELD^^.01^1
"^DD",15.2,15.232,0,"DT")
2960920
"^DD",15.2,15.232,0,"IX","B",15.232,.01)

"^DD",15.2,15.232,0,"NM","FILE FOR THREAD")

"^DD",15.2,15.232,0,"UP")
15.23
"^DD",15.2,15.232,.01,0)
FILE FOR THREAD^F^^0;1^K:$L(X)>10!($L(X)<1) X
"^DD",15.2,15.232,.01,1,0)
^.1
"^DD",15.2,15.232,.01,1,1,0)
15.232^B
"^DD",15.2,15.232,.01,1,1,1)
S ^VA(15.2,DA(2),3,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",15.2,15.232,.01,1,1,2)
K ^VA(15.2,DA(2),3,DA(1),2,"B",$E(X,1,30),DA)
"^DD",15.2,15.232,.01,3)
This is the file number for one file to be processed by this thread.
"^DD",15.2,15.232,.01,21,0)
^^3^3^2960920^
"^DD",15.2,15.232,.01,21,1,0)
Entries in this sub-file are created during the merge processing when a
"^DD",15.2,15.232,.01,21,2,0)
new thread is created to assist in processing the third phase.  The values
"^DD",15.2,15.232,.01,21,3,0)
are removed upon completion of the processing.
"^DD",15.2,15.232,.01,"DT")
2960920
"^DD",15.3,15.3,0)
FIELD^^1^2
"^DD",15.3,15.3,0,"DT")
2951129
"^DD",15.3,15.3,0,"IX","B",15.3,.01)

"^DD",15.3,15.3,0,"NM","XDR REPOINTED ENTRY")

"^DD",15.3,15.3,0,"VRPK")
XT
"^DD",15.3,15.3,.01,0)
FILE NUMBER^RFX^^0;1^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N)!'(X=+X) X I $D(X) S DINUM=X
"^DD",15.3,15.3,.01,1,0)
^.1
"^DD",15.3,15.3,.01,1,1,0)
15.3^B
"^DD",15.3,15.3,.01,1,1,1)
S ^VA(15.3,"B",$E(X,1,30),DA)=""
"^DD",15.3,15.3,.01,1,1,2)
K ^VA(15.3,"B",$E(X,1,30),DA)
"^DD",15.3,15.3,.01,3)
Answer must be 1-20 characters in length and must be a file number
"^DD",15.3,15.3,.01,21,0)
^^7^7^2980514^
"^DD",15.3,15.3,.01,21,1,0)
This field indicates the file in which one or more entries were merged.
"^DD",15.3,15.3,.01,21,2,0)
Whether an unused internal entry number is the result of merging an entry
"^DD",15.3,15.3,.01,21,3,0)
into another one can be determined by testing for an entry for the file
"^DD",15.3,15.3,.01,21,4,0)
number, and then under that entry an entry for the internal entry number.
"^DD",15.3,15.3,.01,21,5,0)
If the internal entry number is present as a .01 field value in the
"^DD",15.3,15.3,.01,21,6,0)
subfile under the file number, then it is the result of merging two
"^DD",15.3,15.3,.01,21,7,0)
entries.
"^DD",15.3,15.3,.01,"DT")
2951129
"^DD",15.3,15.3,1,0)
MERGED ENTRY^15.31A^^1;0
"^DD",15.3,15.3,1,21,0)
^^3^3^2980514^
"^DD",15.3,15.3,1,21,1,0)
This is the internal entry number of an entry which was merged into
"^DD",15.3,15.3,1,21,2,0)
another entry in the file which this field is associated with (the .01
"^DD",15.3,15.3,1,21,3,0)
field value in file 15.3).
"^DD",15.3,15.31,0)
MERGED ENTRY SUB-FIELD^^.02^2
"^DD",15.3,15.31,0,"DT")
2951129
"^DD",15.3,15.31,0,"IX","B",15.31,.01)

"^DD",15.3,15.31,0,"NM","MERGED ENTRY")

"^DD",15.3,15.31,0,"UP")
15.3
"^DD",15.3,15.31,.01,0)
MERGED ENTRY^MRFX^^0;1^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N)!'(X=+X) X I $D(X) S DINUM=X
"^DD",15.3,15.31,.01,1,0)
^.1
"^DD",15.3,15.31,.01,1,1,0)
15.31^B
"^DD",15.3,15.31,.01,1,1,1)
S ^VA(15.3,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15.3,15.31,.01,1,1,2)
K ^VA(15.3,DA(1),1,"B",$E(X,1,30),DA)
"^DD",15.3,15.31,.01,3)
Answer must be 1-20 characters in length must be a number.
"^DD",15.3,15.31,.01,21,0)
^^3^3^2980514^
"^DD",15.3,15.31,.01,21,1,0)
This is the internal entry number of an entry which was merged intoanother
"^DD",15.3,15.31,.01,21,2,0)
entry in the file which this field is associated with (the .01field value
"^DD",15.3,15.31,.01,21,3,0)
in file 15.3).
"^DD",15.3,15.31,.01,"DT")
2951129
"^DD",15.3,15.31,.02,0)
MERGED TO ENTRY^RF^^0;2^K:$L(X)>20!($L(X)<1)!'(X?.N.".".N) X
"^DD",15.3,15.31,.02,3)
Answer must be 1-20 characters in length and must be the internal number to which the merged entry was moved.
"^DD",15.3,15.31,.02,21,0)
^^2^2^2980514^
"^DD",15.3,15.31,.02,21,1,0)
This field indicates the internal entry number of the file entry into
"^DD",15.3,15.31,.02,21,2,0)
which the entry indicated by the .01 field value was merged.
"^DD",15.3,15.31,.02,"DT")
2951129
"^DD",15.4,15.4,0)
FIELD^^.03^6
"^DD",15.4,15.4,0,"DDA")
N
"^DD",15.4,15.4,0,"DT")
2980514
"^DD",15.4,15.4,0,"IX","B",15.4,.01)

"^DD",15.4,15.4,0,"IX","B",15.4,.02)

"^DD",15.4,15.4,0,"IX","C",15.4,.02)

"^DD",15.4,15.4,0,"NM","MERGE IMAGES")

"^DD",15.4,15.4,0,"VRPK")
XT
"^DD",15.4,15.4,.01,0)
MERGED FROM^RV^^0;1^Q
"^DD",15.4,15.4,.01,1,0)
^.1
"^DD",15.4,15.4,.01,1,1,0)
15.4^B
"^DD",15.4,15.4,.01,1,1,1)
S ^XDRM("B",$E(X,1,30),DA)=""
"^DD",15.4,15.4,.01,1,1,2)
K ^XDRM("B",$E(X,1,30),DA)
"^DD",15.4,15.4,.01,3)
This is the FROM entry of the MERGE Pair
"^DD",15.4,15.4,.01,21,0)
^^2^2^2980514^^
"^DD",15.4,15.4,.01,21,1,0)
This field contains a variable pointer reference to the location in the
"^DD",15.4,15.4,.01,21,2,0)
primary merge file of the entry which was merged into another entry.
"^DD",15.4,15.4,.01,"DT")
2971204
"^DD",15.4,15.4,.01,"V",0)
^.12P^1^1
"^DD",15.4,15.4,.01,"V",1,0)
2^  ^1^XDRM^^n
"^DD",15.4,15.4,.02,0)
MERGED TO^V^^0;2^Q
"^DD",15.4,15.4,.02,1,0)
^.1
"^DD",15.4,15.4,.02,1,1,0)
15.4^B
"^DD",15.4,15.4,.02,1,1,1)
S ^XDRM("B",$E(X,1,30),DA)=""
"^DD",15.4,15.4,.02,1,1,2)
K ^XDRM("B",$E(X,1,30),DA)
"^DD",15.4,15.4,.02,1,1,"DT")
2971205
"^DD",15.4,15.4,.02,3)
This is the entry that was merged into
"^DD",15.4,15.4,.02,21,0)
^^3^3^2980514^
"^DD",15.4,15.4,.02,21,1,0)
This field contains a variable pointer reference to the entry in the
"^DD",15.4,15.4,.02,21,2,0)
primary file for the merge, into which the entry indicated by the MERGED
"^DD",15.4,15.4,.02,21,3,0)
FROM (#.01) field was merged.
"^DD",15.4,15.4,.02,"DT")
2971205
"^DD",15.4,15.4,.02,"V",0)
^.12P^1^1
"^DD",15.4,15.4,.02,"V",1,0)
2^  ^1^  ^^n
"^DD",15.4,15.4,.03,0)
DATE MERGED^D^^0;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",15.4,15.4,.03,3)
This is the date on which the entries were merged.
"^DD",15.4,15.4,.03,21,0)
^^3^3^2980514^^
"^DD",15.4,15.4,.03,21,1,0)
This field indicates the date on which the entry indicated by the MERGED
"^DD",15.4,15.4,.03,21,2,0)
FROM (#.01) field was merged into the entry indicated by the MERGED TO
"^DD",15.4,15.4,.03,21,3,0)
(#.02) field.
"^DD",15.4,15.4,.03,"DT")
2980514
"^DD",15.4,15.4,1,0)
FROM FILE#^15.41PA^^1;0
"^DD",15.4,15.4,1,21,0)
^^2^2^2980514^^
"^DD",15.4,15.4,1,21,1,0)
This field specifies a file for which a data image was recorded for the
"^DD",15.4,15.4,1,21,2,0)
entry specified by the MERGED FROM (#.01) field.
"^DD",15.4,15.4,2,0)
TO FILE#^15.42PA^^2;0
"^DD",15.4,15.4,2,21,0)
^^2^2^2980514^
"^DD",15.4,15.4,2,21,1,0)
This field specifies a file for which a data image was recorded for
"^DD",15.4,15.4,2,21,2,0)
the entry specified by the MERGED TO (#.02) field.
"^DD",15.4,15.4,3,0)
POINTERS CHANGED^15.43A^^3;0
"^DD",15.4,15.4,3,21,0)
^^6^6^2980514^
"^DD",15.4,15.4,3,21,1,0)
This multiple field contains data on locations where a pointer value was
"^DD",15.4,15.4,3,21,2,0)
changed.  The #.01 field contains the information which would be specified
"^DD",15.4,15.4,3,21,3,0)
as subscripts in the array passed in a call to FILE^DIE.  The array
"^DD",15.4,15.4,3,21,4,0)
subscripts are separated by a ';', and are in the form FILE;IENS;FIELD.
"^DD",15.4,15.4,3,21,5,0)
The value which was present before the data was changed is stored in field
"^DD",15.4,15.4,3,21,6,0)
#1.01.
"^DD",15.4,15.41,0)
FROM FILE# SUB-FIELD^^1^3
"^DD",15.4,15.41,0,"DT")
2971204
"^DD",15.4,15.41,0,"IX","B",15.41,.01)

"^DD",15.4,15.41,0,"NM","FROM FILE#")

"^DD",15.4,15.41,0,"UP")
15.4
"^DD",15.4,15.41,.01,0)
FROM FILE#^P1'^DIC(^0;1^Q
"^DD",15.4,15.41,.01,1,0)
^.1
"^DD",15.4,15.41,.01,1,1,0)
15.41^B
"^DD",15.4,15.41,.01,1,1,1)
S ^XDRM(DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15.4,15.41,.01,1,1,2)
K ^XDRM(DA(1),1,"B",$E(X,1,30),DA)
"^DD",15.4,15.41,.01,3)
Selects one of the files that was merged
"^DD",15.4,15.41,.01,21,0)
^^3^3^2980514^^
"^DD",15.4,15.41,.01,21,1,0)
This field specifies a file for which a data image was recorded for
"^DD",15.4,15.41,.01,21,2,0)
the entry specified by the MERGED FROM (#.01) field in the parent file
"^DD",15.4,15.41,.01,21,3,0)
(MERGE IMAGES, 15.4).
"^DD",15.4,15.41,.01,"DT")
2971204
"^DD",15.4,15.41,.02,0)
IEN IN FILE^NJ10,0^^0;2^K:+X'=X!(X>9999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.4,15.41,.02,3)
This is the internal entry number for the FROM entry in the current file.
"^DD",15.4,15.41,.02,21,0)
^^6^6^2980514^
"^DD",15.4,15.41,.02,21,1,0)
This is the internal entry number (IEN) associated with the MERGED FROM
"^DD",15.4,15.41,.02,21,2,0)
(#.01 field in file 15.4) entry in the current file (FROM FILE#, #.01).
"^DD",15.4,15.41,.02,21,3,0)
While this is normally the same as the IEN of the entry indicated by
"^DD",15.4,15.41,.02,21,4,0)
MERGED FROM, there are some files which are not associated by DINUMed
"^DD",15.4,15.41,.02,21,5,0)
values and for which the IEN is different.  This field contains the proper
"^DD",15.4,15.41,.02,21,6,0)
IEN for the entry in the current file (FROM FILE#, #.01).
"^DD",15.4,15.41,.02,"DT")
2971204
"^DD",15.4,15.41,1,0)
GLOBAL DATA^15.411A^^1;0
"^DD",15.4,15.41,1,21,0)
^^6^6^2980514^
"^DD",15.4,15.41,1,21,1,0)
This multiple field contains the global nodes (lacking the beginning '^')
"^DD",15.4,15.41,1,21,2,0)
for the MERGED FROM entry in the current file (FROM FILE#, #.01).  The
"^DD",15.4,15.41,1,21,3,0)
global prior to the merge can be reconstructed by setting the value in
"^DD",15.4,15.41,1,21,4,0)
field #1.01 of the subfile into the global location specified by the data
"^DD",15.4,15.41,1,21,5,0)
in the current field (#.01).  If there is no field #1.01 associated with a
"^DD",15.4,15.41,1,21,6,0)
global location, the value was NULL.
"^DD",15.4,15.411,0)
GLOBAL DATA SUB-FIELD^^1.01^2
"^DD",15.4,15.411,0,"DT")
2971204
"^DD",15.4,15.411,0,"IX","B",15.411,.01)

"^DD",15.4,15.411,0,"NM","GLOBAL DATA")

"^DD",15.4,15.411,0,"UP")
15.41
"^DD",15.4,15.411,.01,0)
GLOBAL NODE^F^^0;1^K:$L(X)>245!($L(X)<2) X
"^DD",15.4,15.411,.01,1,0)
^.1
"^DD",15.4,15.411,.01,1,1,0)
15.411^B
"^DD",15.4,15.411,.01,1,1,1)
S ^XDRM(DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15.4,15.411,.01,1,1,2)
K ^XDRM(DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",15.4,15.411,.01,3)
This is the global node for which the data is given
"^DD",15.4,15.411,.01,21,0)
^^6^6^2980514^
"^DD",15.4,15.411,.01,21,1,0)
This field contains global node (lacking the beginning '^') for the MERGED
"^DD",15.4,15.411,.01,21,2,0)
FROM entry in the current file (FROM FILE#, #.01). The global prior to the
"^DD",15.4,15.411,.01,21,3,0)
merge can be reconstructed by setting the value in field #1.01 into the
"^DD",15.4,15.411,.01,21,4,0)
global location specified by the data inthe current field (#.01).  If
"^DD",15.4,15.411,.01,21,5,0)
there is no field #1.01 associated with a global location, the value was
"^DD",15.4,15.411,.01,21,6,0)
NULL.
"^DD",15.4,15.411,.01,"DT")
2971204
"^DD",15.4,15.411,1.01,0)
DATA VALUE^F^^1;E1,245^K:$L(X)>245!($L(X)<1) X
"^DD",15.4,15.411,1.01,3)
This is the value associated with the current global node
"^DD",15.4,15.411,1.01,21,0)
^^3^3^2980514^^
"^DD",15.4,15.411,1.01,21,1,0)
This field contains the data value associated with the global location
"^DD",15.4,15.411,1.01,21,2,0)
specified in GLOBAL NODE (#.01).  If there is no data in the current
"^DD",15.4,15.411,1.01,21,3,0)
field, then the value associated with the global was NULL.
"^DD",15.4,15.411,1.01,"DT")
2971204
"^DD",15.4,15.42,0)
TO FILE# SUB-FIELD^^1^3
"^DD",15.4,15.42,0,"DT")
2971204
"^DD",15.4,15.42,0,"IX","B",15.42,.01)

"^DD",15.4,15.42,0,"NM","TO FILE#")

"^DD",15.4,15.42,0,"UP")
15.4
"^DD",15.4,15.42,.01,0)
TO FILE#^P1'^DIC(^0;1^Q
"^DD",15.4,15.42,.01,1,0)
^.1
"^DD",15.4,15.42,.01,1,1,0)
15.42^B
"^DD",15.4,15.42,.01,1,1,1)
S ^XDRM(DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",15.4,15.42,.01,1,1,2)
K ^XDRM(DA(1),2,"B",$E(X,1,30),DA)
"^DD",15.4,15.42,.01,3)
Selects one of the files that was merged
"^DD",15.4,15.42,.01,21,0)
^^3^3^2980514^^
"^DD",15.4,15.42,.01,21,1,0)
This field specifies a file for which a data image was recorded for the
"^DD",15.4,15.42,.01,21,2,0)
entry specified by the MERGED TO (#.02 ) field in the parent file (MERGE
"^DD",15.4,15.42,.01,21,3,0)
IMAGES, 15.4).
"^DD",15.4,15.42,.01,"DT")
2971204
"^DD",15.4,15.42,.02,0)
IEN IN FILE^NJ10,0^^0;2^K:+X'=X!(X>9999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",15.4,15.42,.02,3)
This is the internal entry number for the TO entry in the current file.
"^DD",15.4,15.42,.02,21,0)
^^6^6^2980514^^
"^DD",15.4,15.42,.02,21,1,0)
This is the internal entry number (IEN) associated with the MERGED TO
"^DD",15.4,15.42,.02,21,2,0)
(#.02 field in file 15.4) entry in the current file (TO FILE#, #.01).
"^DD",15.4,15.42,.02,21,3,0)
While this is normally the same as the IEN of the entry indicated by
"^DD",15.4,15.42,.02,21,4,0)
MERGED TO, there are some files which are not associated by DINUMed values
"^DD",15.4,15.42,.02,21,5,0)
and for which the IEN is different.  This field contains the proper IEN
"^DD",15.4,15.42,.02,21,6,0)
for the entry in the current file (TO FILE#, .01).
"^DD",15.4,15.42,.02,"DT")
2971204
"^DD",15.4,15.42,1,0)
GLOBAL DATA^15.421A^^1;0
"^DD",15.4,15.42,1,21,0)
^^6^6^2980514^^
"^DD",15.4,15.42,1,21,1,0)
This multiple field contains the global nodes (lacking the beginning
"^DD",15.4,15.42,1,21,2,0)
'^') for the MERGED TO entry in the current file (TO FILE#, #.01).
"^DD",15.4,15.42,1,21,3,0)
The global prior to the merge can be reconstructed by setting the value
"^DD",15.4,15.42,1,21,4,0)
in field #1.01 of the subfile into the global location specified by the
"^DD",15.4,15.42,1,21,5,0)
data in the current field (#.01).  If there is no field #1.01 associated
"^DD",15.4,15.42,1,21,6,0)
with a global location, the value was NULL.
"^DD",15.4,15.421,0)
GLOBAL DATA SUB-FIELD^^1.01^2
"^DD",15.4,15.421,0,"DT")
2971204
"^DD",15.4,15.421,0,"IX","B",15.421,.01)

"^DD",15.4,15.421,0,"NM","GLOBAL DATA")

"^DD",15.4,15.421,0,"UP")
15.42
"^DD",15.4,15.421,.01,0)
GLOBAL NODE^F^^0;1^K:$L(X)>245!($L(X)<2) X
"^DD",15.4,15.421,.01,1,0)
^.1
"^DD",15.4,15.421,.01,1,1,0)
15.421^B
"^DD",15.4,15.421,.01,1,1,1)
S ^XDRM(DA(2),2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",15.4,15.421,.01,1,1,2)
K ^XDRM(DA(2),2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",15.4,15.421,.01,3)
This is the global node for which the data is given
"^DD",15.4,15.421,.01,21,0)
^^6^6^2980514^
"^DD",15.4,15.421,.01,21,1,0)
This field contains a global node (lacking the beginning'^') for the
"^DD",15.4,15.421,.01,21,2,0)
MERGED TO entry in the current file (TO FILE#, #.01).    The global prior
"^DD",15.4,15.421,.01,21,3,0)
to the merge can be reconstructed by setting the value in field #1.01 of
"^DD",15.4,15.421,.01,21,4,0)
the subfile into the global location specified by the data in the current
"^DD",15.4,15.421,.01,21,5,0)
field (#.01).  If there is no field #1.01 associated with a global
"^DD",15.4,15.421,.01,21,6,0)
location, the value was NULL.
"^DD",15.4,15.421,.01,"DT")
2971204
"^DD",15.4,15.421,1.01,0)
DATA VALUE^F^^1;E1,245^K:$L(X)>245!($L(X)<1) X
"^DD",15.4,15.421,1.01,3)
This is the value associated with the current global node
"^DD",15.4,15.421,1.01,21,0)
^^3^3^2980514^^
"^DD",15.4,15.421,1.01,21,1,0)
This field contains the data value associated with the global
"^DD",15.4,15.421,1.01,21,2,0)
location specified in GLOBAL NODE (#.01).  If there is no data in the
"^DD",15.4,15.421,1.01,21,3,0)
current field, then the value associated with the global was NULL.
"^DD",15.4,15.421,1.01,"DT")
2971204
"^DD",15.4,15.43,0)
POINTERS CHANGED SUB-FIELD^^1.01^2
"^DD",15.4,15.43,0,"DT")
2971205
"^DD",15.4,15.43,0,"IX","B",15.43,.01)

"^DD",15.4,15.43,0,"NM","POINTERS CHANGED")

"^DD",15.4,15.43,0,"UP")
15.4
"^DD",15.4,15.43,.01,0)
POINTERS CHANGED^F^^0;1^K:$L(X)>100!($L(X)<1) X
"^DD",15.4,15.43,.01,1,0)
^.1
"^DD",15.4,15.43,.01,1,1,0)
15.43^B
"^DD",15.4,15.43,.01,1,1,1)
S ^XDRM(DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",15.4,15.43,.01,1,1,2)
K ^XDRM(DA(1),3,"B",$E(X,1,30),DA)
"^DD",15.4,15.43,.01,3)
Value is file number;field number;IEN string  where file number may be a subfile number
"^DD",15.4,15.43,.01,21,0)
^^6^6^2980514^^
"^DD",15.4,15.43,.01,21,1,0)
This field contains data on a location where a pointer value was changed.
"^DD",15.4,15.43,.01,21,2,0)
The #.01 field contains the information which would be specified as
"^DD",15.4,15.43,.01,21,3,0)
subscripts in the array passed in a call to FILE^DIE.  The array
"^DD",15.4,15.43,.01,21,4,0)
subscripts are separated by a ';', and are in the form FILE;IENS;FIELD.
"^DD",15.4,15.43,.01,21,5,0)
The value which was present before the data was changed is stored in field
"^DD",15.4,15.43,.01,21,6,0)
#1.01.
"^DD",15.4,15.43,.01,"DT")
2971205
"^DD",15.4,15.43,1.01,0)
ORIGINAL VALUE^F^^1;1^K:$L(X)>200!($L(X)<1) X
"^DD",15.4,15.43,1.01,3)
This is the pointer value before it was changed
"^DD",15.4,15.43,1.01,21,0)
^^3^3^2980514^^
"^DD",15.4,15.43,1.01,21,1,0)
This field contains the pointer value which was present at the location
"^DD",15.4,15.43,1.01,21,2,0)
specified by the #.01 field, prior to the value being changed during the
"^DD",15.4,15.43,1.01,21,3,0)
merge.
"^DD",15.4,15.43,1.01,"DT")
2971205
"^DIC",15,15,0)
DUPLICATE RECORD^15V
"^DIC",15,15,0,"GL")
^VA(15,
"^DIC",15,15,"%",0)
^1.005^1^1
"^DIC",15,15,"%",1,0)
XU
"^DIC",15,15,"%","B","XU",1)

"^DIC",15,15,"%D",0)
^^110^110^2970730^^
"^DIC",15,15,"%D",1,0)
This file contains information about duplicate records in any file defined
"^DIC",15,15,"%D",2,0)
in the two variable pointer fields; RECORD1 and RECORD2 (.01 and .02).  The
"^DIC",15,15,"%D",3,0)
status of an entry in this file may be 'potential duplicate, unverified',
"^DIC",15,15,"%D",4,0)
'verified, not a duplicate', or 'verified duplicate'.
"^DIC",15,15,"%D",5,0)
 
"^DIC",15,15,"%D",6,0)
The envisioned sequence of events is software would identify potential
"^DIC",15,15,"%D",7,0)
duplicates from a file and add an entry in this file containing the two
"^DIC",15,15,"%D",8,0)
potential duplicate records and set the status field to 'potential
"^DIC",15,15,"%D",9,0)
duplicate, unverified'.  A user would then make the determination of whether
"^DIC",15,15,"%D",10,0)
the two entries were truely duplicates and change the status field
"^DIC",15,15,"%D",11,0)
appropriately.
"^DIC",15,15,"%D",12,0)
 
"^DIC",15,15,"%D",13,0)
If the user changed the status to 'verified duplicate' he/she would then
"^DIC",15,15,"%D",14,0)
be asked whether to merge RECORD1 to RECORD2 or RECORD2 to RECORD1.  The
"^DIC",15,15,"%D",15,0)
records would then be merged accordingly.
"^DIC",15,15,"%D",16,0)
 
"^DIC",15,15,"%D",17,0)
This user interaction is controlled by the merge software and the dictionary
"^DIC",15,15,"%D",18,0)
supports a merge methodology that will notify the appropriate packages
"^DIC",15,15,"%D",19,0)
affected by the merging of the two entries and wait for their concurrence
"^DIC",15,15,"%D",20,0)
prior to actually merging the two entries.  If this approach is not desired
"^DIC",15,15,"%D",21,0)
the software can set the appropriate fields and immediatley do the merge.
"^DIC",15,15,"%D",22,0)
This methodology requires the two fields defined below.
"^DIC",15,15,"%D",23,0)
 
"^DIC",15,15,"%D",24,0)
The MERGE STATUS field is a SET where 0=not ready, 1=ready, and 2=merged.
"^DIC",15,15,"%D",25,0)
This field would be set to 0=not ready and a bulletin would be sent to
"^DIC",15,15,"%D",26,0)
the appropriate package users.
"^DIC",15,15,"%D",27,0)
 
"^DIC",15,15,"%D",28,0)
The MERGE PACKAGES field is a multiple which contains a list of packages
"^DIC",15,15,"%D",29,0)
that are affected by the merging of entries in the subject file.  The
"^DIC",15,15,"%D",30,0)
STATUS field of this multiple will be set to 0=not ready if the package
"^DIC",15,15,"%D",31,0)
has the 'from' entry and does an interactive merge.  It will be set to
"^DIC",15,15,"%D",32,0)
1=ready if the package has the 'from' entry but does an automatic merge.
"^DIC",15,15,"%D",33,0)
It will be set to 2=no from entry if the package does not have the 'from'
"^DIC",15,15,"%D",34,0)
entry, regardless of whether they do an interactive or automatic merge.
"^DIC",15,15,"%D",35,0)
If the package has a merge routine in the package file the merge is
"^DIC",15,15,"%D",36,0)
automatic.  If not, the merge is interactive.  The ERROR MESSAGE field of
"^DIC",15,15,"%D",37,0)
this multiple will contain any errors encountered during the execution of
"^DIC",15,15,"%D",38,0)
that packages merge routine.
"^DIC",15,15,"%D",39,0)
 
"^DIC",15,15,"%D",40,0)
Once all entries in the MERGE PACKAGES multiple have a STATUS'=0 the MERGE
"^DIC",15,15,"%D",41,0)
STATUS field is set to 1=ready via a TRIGGER.
"^DIC",15,15,"%D",42,0)
 
"^DIC",15,15,"%D",43,0)
Once the MERGE STATUS is set to 1=ready the actual merge will occur.  When
"^DIC",15,15,"%D",44,0)
it is complete the MERGE STATUS will be set to 2=merged.  Once set to 2
"^DIC",15,15,"%D",45,0)
most fields cannot be modified.
"^DIC",15,15,"%D",46,0)
 
"^DIC",15,15,"%D",47,0)
The following fields are set by TRIGGERs and are never seen by the user:
"^DIC",15,15,"%D",48,0)
DATE FOUND, DATE VERIFIED, DATE RESOLVED, WHO CREATED, WHO VERIFIED,
"^DIC",15,15,"%D",49,0)
and WHO CHANGED.  Also, the MERGE DIRECTION and MERGE STATUS fields will be
"^DIC",15,15,"%D",50,0)
deleted by a TRIGGER if the STATUS field is modified from 'verified
"^DIC",15,15,"%D",51,0)
duplicate' to any other status.
"^DIC",15,15,"%D",52,0)
 
"^DIC",15,15,"%D",53,0)
The fields LOOKUP1 and LOOKUP2 provide navigational capability from this
"^DIC",15,15,"%D",54,0)
file to either the RECORD1 or RECORD2 entries in the file specified in
"^DIC",15,15,"%D",55,0)
the variable pointer fields.  The field LOOKUP3 provides navigational
"^DIC",15,15,"%D",56,0)
capability to any file that points to this file and has a DINUM
"^DIC",15,15,"%D",57,0)
relationship.
"^DIC",15,15,"%D",58,0)
 
"^DIC",15,15,"%D",59,0)
A lookup on the "B" xref will get any file entry that is part of a duplicate
"^DIC",15,15,"%D",60,0)
record pair because the "B" xref is set by a REGULAR xref on the .01 field
"^DIC",15,15,"%D",61,0)
and by a MNEMONIC xref on the .02 field.
"^DIC",15,15,"%D",62,0)
 
"^DIC",15,15,"%D",63,0)
The "AFR" xref is used by the INPUT TRANSFORMS on the .01 and .02 field to
"^DIC",15,15,"%D",64,0)
prevent entering a file entry that has already been merged away.
"^DIC",15,15,"%D",65,0)
 
"^DIC",15,15,"%D",66,0)
All xrefs that have subscripts consisting of 'RECORD^RECORD' pairs will be
"^DIC",15,15,"%D",67,0)
'low DFN^high DFN'.
"^DIC",15,15,"%D",68,0)
 
"^DIC",15,15,"%D",69,0)
The "ALK" xref is short lived and contains entries that are unresolved
"^DIC",15,15,"%D",70,0)
potential duplicates or verified duplicates that have not yet been merged.
"^DIC",15,15,"%D",71,0)
Its form, using file 2 as an example, is ^VA(15,"ALK","DPT(",fe#1,1,fe#2,DA)
"^DIC",15,15,"%D",72,0)
or ^VA(15,"ALK","DPT(",fe#1,2,fe#2,DA) where the 5th subscript has the
"^DIC",15,15,"%D",73,0)
following meaning: 1=potential duplicate, 2=verified duplicate.  When the
"^DIC",15,15,"%D",74,0)
5th subscript is a 1 there will be two "ALK" entries with the two fe#s
"^DIC",15,15,"%D",75,0)
reversed.  When the 5th subscript is a 2 there will be only 1 "ALK" entry
"^DIC",15,15,"%D",76,0)
and fe#s will be in the order 'from' 'to'.  Once merged the "ALK" xref
"^DIC",15,15,"%D",77,0)
for that entry will be killed.
"^DIC",15,15,"%D",78,0)
 
"^DIC",15,15,"%D",79,0)
The "AMRG" xref is also short lived and contains one "AMRG" entry for
"^DIC",15,15,"%D",80,0)
each entry in this file that has a MERGE STATUS of 0=not ready or
"^DIC",15,15,"%D",81,0)
1=ready.  Once merged the "AMRG" xref for that entry will be killed.
"^DIC",15,15,"%D",82,0)
The form of the "AMRG xref, using file 2 as an example, is
"^DIC",15,15,"%D",83,0)
^VA(15,"AMRG","DPT(",0,DA) or ^VA(15,"AMRG","DPT(",1,DA) where the value
"^DIC",15,15,"%D",84,0)
of the 4th subscript has the following meaning; 0=not ready, 1=ready.
"^DIC",15,15,"%D",85,0)
 
"^DIC",15,15,"%D",86,0)
The "AVCHG" xref is set by the WHO CHANGED field which is itself only set
"^DIC",15,15,"%D",87,0)
when the STATUS field is changed from "V" to any other value.  If this xref
"^DIC",15,15,"%D",88,0)
exists action needs to be taken because other packages have been notified
"^DIC",15,15,"%D",89,0)
to merge the two entries.
"^DIC",15,15,"%D",90,0)
 
"^DIC",15,15,"%D",91,0)
All TRIGGERs fire forward except the TRIGGER on the STATUS field of the
"^DIC",15,15,"%D",92,0)
MERGE PACKAGES multiple which fires backward to set the MERGE STATUS field.
"^DIC",15,15,"%D",93,0)
However, that TRIGGER has no effect on the kill side.  TRIGGER direction can
"^DIC",15,15,"%D",94,0)
be relevent when deleting entries using ^DIK.
"^DIC",15,15,"%D",95,0)
 
"^DIC",15,15,"%D",96,0)
The .01 and .02 fields are 'uneditable' so entries can only be deleted from
"^DIC",15,15,"%D",97,0)
this file using ^DIK.
"^DIC",15,15,"%D",98,0)
 
"^DIC",15,15,"%D",99,0)
Most TRIGGERs will not fire during a RE-INDEX of this file.  Also, many
"^DIC",15,15,"%D",100,0)
are conditional upon external SET values.  Modify this dictionary with
"^DIC",15,15,"%D",101,0)
extreme caution.
"^DIC",15,15,"%D",102,0)
 
"^DIC",15,15,"%D",103,0)
Several TRIGGERs have been modified using ^%GEDIT to add MUMPS code to
"^DIC",15,15,"%D",104,0)
the conditional logic to prevent firing during a RE-INDEX.  This was done
"^DIC",15,15,"%D",105,0)
only for TRIGGERs that already had human readable conditional logic.
"^DIC",15,15,"%D",106,0)
 
"^DIC",15,15,"%D",107,0)
***** W A R N I N G *****
"^DIC",15,15,"%D",108,0)
When you add a file to a variable pointer field FileMan deletes the
"^DIC",15,15,"%D",109,0)
input transform so save it off before the change and restore it after
"^DIC",15,15,"%D",110,0)
the change.
"^DIC",15,"B","DUPLICATE RECORD",15)

"^DIC",15.1,15.1,0)
DUPLICATE RESOLUTION^15.1P
"^DIC",15.1,15.1,0,"GL")
^VA(15.1,
"^DIC",15.1,15.1,"%D",0)
^^5^5^2980413^
"^DIC",15.1,15.1,"%D",1,0)
This file is used to handle duplicate checking and merging of files that
"^DIC",15.1,15.1,"%D",2,0)
have entries in the Duplicate Record File.  It is meant to provide the
"^DIC",15.1,15.1,"%D",3,0)
overall control information that would be used to first identify
"^DIC",15.1,15.1,"%D",4,0)
duplicates within a file, e.g. Patient File, and then to merge the
"^DIC",15.1,15.1,"%D",5,0)
entries.
"^DIC",15.1,"B","DUPLICATE RESOLUTION",15.1)

"^DIC",15.2,15.2,0)
XDR MERGE PROCESS^15.2O
"^DIC",15.2,15.2,0,"GL")
^VA(15.2,
"^DIC",15.2,15.2,"%D",0)
^^3^3^2980514^^^^
"^DIC",15.2,15.2,"%D",1,0)
When a merge process is set up, all its information is stored in this
"^DIC",15.2,15.2,"%D",2,0)
file.  Once a merge process has completed, that entry may be purged using
"^DIC",15.2,15.2,"%D",3,0)
the Purge Merge Process File option in the managers menu.
"^DIC",15.2,"B","XDR MERGE PROCESS",15.2)

"^DIC",15.3,15.3,0)
XDR REPOINTED ENTRY^15.3
"^DIC",15.3,15.3,0,"GL")
^VA(15.3,
"^DIC",15.3,15.3,"%D",0)
^^4^4^2980514^^
"^DIC",15.3,15.3,"%D",1,0)
This file is used to record the entry number of the FROM record that is
"^DIC",15.3,15.3,"%D",2,0)
merged into the TO record.  This can be used for FileMan to determine
"^DIC",15.3,15.3,"%D",3,0)
which entries were merged, so the IEN of the FROM record will not be
"^DIC",15.3,15.3,"%D",4,0)
reused.
"^DIC",15.3,"B","XDR REPOINTED ENTRY",15.3)

"^DIC",15.4,15.4,0)
MERGE IMAGES^15.4
"^DIC",15.4,15.4,0,"GL")
^XDRM(
"^DIC",15.4,15.4,"%D",0)
^^4^4^2980413^
"^DIC",15.4,15.4,"%D",1,0)
File 15.4 stores an image of the pairs of entries in files that were
"^DIC",15.4,15.4,"%D",2,0)
merged immediately prior to the actual merge.  In addition, there is also
"^DIC",15.4,15.4,"%D",3,0)
a record of the locations of pointer values that were changed during the
"^DIC",15.4,15.4,"%D",4,0)
merge process.
"^DIC",15.4,"B","MERGE IMAGES",15.4)

**END**
**END**
