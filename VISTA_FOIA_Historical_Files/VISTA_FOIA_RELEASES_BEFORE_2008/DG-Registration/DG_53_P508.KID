KIDS Distribution saved on Mar 12, 2004@15:08:45
DG*5.3*508 AND SD*5.3*293
**KIDS**:DG*5.3*508^SD*5.3*293^

**INSTALL NAME**
DG*5.3*508
"BLD",3943,0)
DG*5.3*508^REGISTRATION^0^3040312^y
"BLD",3943,4,0)
^9.64PA^^
"BLD",3943,"ABPKG")
n
"BLD",3943,"INID")
^n
"BLD",3943,"INIT")
POST^DG53508
"BLD",3943,"KRN",0)
^9.67PA^8989.52^19
"BLD",3943,"KRN",.4,0)
.4
"BLD",3943,"KRN",.4,"NM",0)
^9.68A^^
"BLD",3943,"KRN",.401,0)
.401
"BLD",3943,"KRN",.402,0)
.402
"BLD",3943,"KRN",.403,0)
.403
"BLD",3943,"KRN",.5,0)
.5
"BLD",3943,"KRN",.84,0)
.84
"BLD",3943,"KRN",3.6,0)
3.6
"BLD",3943,"KRN",3.8,0)
3.8
"BLD",3943,"KRN",9.2,0)
9.2
"BLD",3943,"KRN",9.8,0)
9.8
"BLD",3943,"KRN",9.8,"NM",0)
^9.68A^13^11
"BLD",3943,"KRN",9.8,"NM",1,0)
DGRPP1^^0^B6097232
"BLD",3943,"KRN",9.8,"NM",4,0)
DGRPU1^^0^B6183317
"BLD",3943,"KRN",9.8,"NM",5,0)
VAFCPID^^0^B12777319
"BLD",3943,"KRN",9.8,"NM",6,0)
VAFHLPID^^0^B9694943
"BLD",3943,"KRN",9.8,"NM",7,0)
VAFHLPI2^^0^B10042427
"BLD",3943,"KRN",9.8,"NM",8,0)
VAFHLU^^0^B2808509
"BLD",3943,"KRN",9.8,"NM",9,0)
VAFCA04^^0^B18154827
"BLD",3943,"KRN",9.8,"NM",10,0)
VAFCMSG4^^0^B15046042
"BLD",3943,"KRN",9.8,"NM",11,0)
VAFCADT2^^0^B24728932
"BLD",3943,"KRN",9.8,"NM",12,0)
DGRPE^^0^B42202544
"BLD",3943,"KRN",9.8,"NM",13,0)
DG53508^^0^B1498910
"BLD",3943,"KRN",9.8,"NM","B","DG53508",13)

"BLD",3943,"KRN",9.8,"NM","B","DGRPE",12)

"BLD",3943,"KRN",9.8,"NM","B","DGRPP1",1)

"BLD",3943,"KRN",9.8,"NM","B","DGRPU1",4)

"BLD",3943,"KRN",9.8,"NM","B","VAFCA04",9)

"BLD",3943,"KRN",9.8,"NM","B","VAFCADT2",11)

"BLD",3943,"KRN",9.8,"NM","B","VAFCMSG4",10)

"BLD",3943,"KRN",9.8,"NM","B","VAFCPID",5)

"BLD",3943,"KRN",9.8,"NM","B","VAFHLPI2",7)

"BLD",3943,"KRN",9.8,"NM","B","VAFHLPID",6)

"BLD",3943,"KRN",9.8,"NM","B","VAFHLU",8)

"BLD",3943,"KRN",19,0)
19
"BLD",3943,"KRN",19,"NM",0)
^9.68A^^
"BLD",3943,"KRN",19.1,0)
19.1
"BLD",3943,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",3943,"KRN",101,0)
101
"BLD",3943,"KRN",101,"NM",0)
^9.68A^^
"BLD",3943,"KRN",409.61,0)
409.61
"BLD",3943,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",3943,"KRN",771,0)
771
"BLD",3943,"KRN",870,0)
870
"BLD",3943,"KRN",8989.51,0)
8989.51
"BLD",3943,"KRN",8989.52,0)
8989.52
"BLD",3943,"KRN",8994,0)
8994
"BLD",3943,"KRN","B",.4,.4)

"BLD",3943,"KRN","B",.401,.401)

"BLD",3943,"KRN","B",.402,.402)

"BLD",3943,"KRN","B",.403,.403)

"BLD",3943,"KRN","B",.5,.5)

"BLD",3943,"KRN","B",.84,.84)

"BLD",3943,"KRN","B",3.6,3.6)

"BLD",3943,"KRN","B",3.8,3.8)

"BLD",3943,"KRN","B",9.2,9.2)

"BLD",3943,"KRN","B",9.8,9.8)

"BLD",3943,"KRN","B",19,19)

"BLD",3943,"KRN","B",19.1,19.1)

"BLD",3943,"KRN","B",101,101)

"BLD",3943,"KRN","B",409.61,409.61)

"BLD",3943,"KRN","B",771,771)

"BLD",3943,"KRN","B",870,870)

"BLD",3943,"KRN","B",8989.51,8989.51)

"BLD",3943,"KRN","B",8989.52,8989.52)

"BLD",3943,"KRN","B",8994,8994)

"BLD",3943,"QUES",0)
^9.62^^
"BLD",3943,"REQB",0)
^9.611^7^5
"BLD",3943,"REQB",1,0)
DG*5.3*484^2
"BLD",3943,"REQB",4,0)
DG*5.3*527^2
"BLD",3943,"REQB",5,0)
DG*5.3*489^2
"BLD",3943,"REQB",6,0)
DG*5.3*415^2
"BLD",3943,"REQB",7,0)
DG*5.3*555^2
"BLD",3943,"REQB","B","DG*5.3*415",6)

"BLD",3943,"REQB","B","DG*5.3*484",1)

"BLD",3943,"REQB","B","DG*5.3*489",5)

"BLD",3943,"REQB","B","DG*5.3*527",4)

"BLD",3943,"REQB","B","DG*5.3*555",7)

"INIT")
POST^DG53508
"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
508^3040312
"PKG",5,22,1,"PAH",1,1,0)
^^3^3^3030522
"PKG",5,22,1,"PAH",1,1,1,0)
 
"PKG",5,22,1,"PAH",1,1,2,0)
 
"PKG",5,22,1,"PAH",1,1,3,0)
Messaging changes for HIPAA confidential address communications
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
11
"RTN","DG53508")
0^13^B1498910
"RTN","DG53508",1,0)
DG53508 ;BPFO/JRP - POST-INIT ROUTINE;6/11/2003
"RTN","DG53508",2,0)
 ;;5.3;Registration;**508**;Aug 13, 1993
"RTN","DG53508",3,0)
 ;
"RTN","DG53508",4,0)
 ; - This was copied from SD*5.3*239
"RTN","DG53508",5,0)
 ;
"RTN","DG53508",6,0)
POST ;Main entry point for post init
"RTN","DG53508",7,0)
 ;Change HL7 application name
"RTN","DG53508",8,0)
 D HLAPP("NPTF-484","NPTF-508")
"RTN","DG53508",9,0)
 Q
"RTN","DG53508",10,0)
 ;
"RTN","DG53508",11,0)
HLAPP(OLDNAME,NEWNAME) ;Change HL7 application name
"RTN","DG53508",12,0)
 ;Input  : OLDNAME - Name of HL7 application to change
"RTN","DG53508",13,0)
 ;         NEWNAME - New name for HL7 application
"RTN","DG53508",14,0)
 ;Output : None
"RTN","DG53508",15,0)
 ;Notes  : Call designed to be used as a KIDS pre/post init
"RTN","DG53508",16,0)
 S OLDNAME=$G(OLDNAME) Q:OLDNAME=""
"RTN","DG53508",17,0)
 S NEWNAME=$G(NEWNAME) Q:NEWNAME=""
"RTN","DG53508",18,0)
 N DIE,DIC,DA,DR,X,Y
"RTN","DG53508",19,0)
 D BMES^XPDUTL("Changing HL7 Application name from "_OLDNAME_" to "_NEWNAME)
"RTN","DG53508",20,0)
 S DIC="^HL(771,"
"RTN","DG53508",21,0)
 S DIC(0)="X"
"RTN","DG53508",22,0)
 S X=OLDNAME
"RTN","DG53508",23,0)
 D ^DIC
"RTN","DG53508",24,0)
 I (Y<0) D  Q
"RTN","DG53508",25,0)
 .D BMES^XPDUTL("   *** "_OLDNAME_" application not found ***")
"RTN","DG53508",26,0)
 S DIE=DIC
"RTN","DG53508",27,0)
 S DA=+Y
"RTN","DG53508",28,0)
 S DR=".01///^S X=NEWNAME"
"RTN","DG53508",29,0)
 D ^DIE
"RTN","DG53508",30,0)
 D MES^XPDUTL("HL7 application name successfully changed to "_NEWNAME)
"RTN","DG53508",31,0)
 Q
"RTN","DGRPE")
0^12^B42202544
"RTN","DGRPE",1,0)
DGRPE ;ALB/MRL - REGISTRATIONS EDITS ; 11/19/03 10:53am
"RTN","DGRPE",2,0)
 ;;5.3;Registration;**32,114,139,169,175,247,190,343,397,342,454,415,489,506,244,547,522,528,555,508**;Aug 13, 1993
"RTN","DGRPE",3,0)
 ;
"RTN","DGRPE",4,0)
 ;DGDR contains a string of edits; edit=screen*10+item #
"RTN","DGRPE",5,0)
 ;
"RTN","DGRPE",6,0)
 ;line tag screen*10+item*1000 = continuation line
"RTN","DGRPE",7,0)
 ;
"RTN","DGRPE",8,0)
 I DGRPS=8 D ^DGRPEIS,Q Q  ; family demographic edit...not conventional!!  :)
"RTN","DGRPE",9,0)
 I DGRPS=9 D EDIT9^DGRPEIS2,Q Q  ; income screening data ($$$)
"RTN","DGRPE",10,0)
 I DGRPS=5,DGDR["501," D
"RTN","DGRPE",11,0)
 .I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","DGRPE",12,0)
 .D REG^IBCNBME(DFN)
"RTN","DGRPE",13,0)
 .Q
"RTN","DGRPE",14,0)
 ;-- Tricare screen #15
"RTN","DGRPE",15,0)
 I DGRPS=15 D EDIT^DGRP15,Q Q
"RTN","DGRPE",16,0)
 ;
"RTN","DGRPE",17,0)
 N DGPH,DGPHFLG
"RTN","DGRPE",18,0)
 K DR S (DA,Y)=DFN,DIE="^DPT(",DR="",DGDRS="DR",DGCT=0 G ^DGRPE1:DGRPS>6
"RTN","DGRPE",19,0)
 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  F J1=J,J*1000,J*1000+1,J*1000+2 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE",20,0)
 D ^DIE
"RTN","DGRPE",21,0)
 ;check for Combat Vet status
"RTN","DGRPE",22,0)
 I $G(DGCVFLG)=1,($P($$CVEDT^DGCV(DFN),U,2)']"") D
"RTN","DGRPE",23,0)
 . W !!,"**NOTE-Change(s) made in this session deleted the veteran's Combat Vet status!"
"RTN","DGRPE",24,0)
 . S DIR(0)="EA" D ^DIR K DIR
"RTN","DGRPE",25,0)
 I $G(DGPHFLG)>0 D EDITPH1^DGRPLE()
"RTN","DGRPE",26,0)
Q K DA,DIE,DR,DGCT,DGCVFLG,DGDR,DGDRD,DGDRS,DGRPADI,I,J,J1
"RTN","DGRPE",27,0)
 Q
"RTN","DGRPE",28,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE",29,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE",30,0)
 Q
"RTN","DGRPE",31,0)
101 ;;K DG20NAME;.01;.01///^S X=$$NCEDIT^DPTNAME(DFN,,.DG20NAME);K DG20NAME;.09;.03;
"RTN","DGRPE",32,0)
102 ;;1;
"RTN","DGRPE",33,0)
103 ;;.091;
"RTN","DGRPE",34,0)
104 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPE",35,0)
105 ;;.12105//NO;S:X="N" Y="@15" S:X="Y" DIE("NO^")="";.1217;I X']"" W !?4,$C(7),"But I need a Start Date for this Temporary Address." S Y=.12105;.1218;.1211;I X']"" W !?4,$C(7),"But I need at least one line of a Temporary address." S Y=.12105;
"RTN","DGRPE",36,0)
111 ;;.14105//NO;S:X="N" Y="@111" S:X="Y" DIE("NO^")="";.1417;I X']"" W !?4,$C(7),"But I need a Start Date." S Y=.14105;.1418;D DR111^DGRPE;.141;I '$P($$CAACT^DGRPCADD(DFN),U,2) W !?4,"But I need at least one active category." S Y=.14105;
"RTN","DGRPE",37,0)
111000 ;;K DR(2,2.141);.1411;I X']"" W !?4,$C(7),"I need at least one line of Address." S Y=.14105;.1412;S:X']"" Y=.1414;.1413;.1414;.1415;.1416;Q;.14111;@111;K DIE("NO^");
"RTN","DGRPE",38,0)
109 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);.02;D DR109^DGRPE;6;2;K DR(2,2.02),DR(2,2.06);.05;.08;K DIE("NO^");
"RTN","DGRPE",39,0)
105000 ;;.1212;S:X']"" Y=.1214;.1213:.1215;.12112;Q;.12111;.1219;@15;K DIE("NO^");
"RTN","DGRPE",40,0)
201 ;;.02;.05;.08;.092;.093;.2401:.2403;57.4//NOT APPLICABLE;
"RTN","DGRPE",41,0)
202 ;;1010.15//NO;S:X'="Y" Y="@22";S DIE("NO^")="";1010.152;I X']"" W !?4,*7,"But I need to know where you were treated most recently." S Y=1010.15;1010.151;1010.154;S:X']"" Y="@22";1010.153;@22;K DIE("NO^");
"RTN","DGRPE",42,0)
203 ;;D DR203^DGRPE;6ETHNICITY;2RACE;K DR(2,2.02),DR(2,2.06);
"RTN","DGRPE",43,0)
301 ;;.211;S:X']"" Y="@31";.212;.2125//NO;I X="Y" S DGADD=".21" D AD^DGRPE S Y=.21011;.213;S:X']"" Y=.216;.214;S:X']"" Y=.216;.215:.217;.2207;.219;.21011;@31;
"RTN","DGRPE",44,0)
302 ;;.2191;S:X']"" Y="@32";.2192;.21925//NO;I X="Y" S DGADD=".211" D AD^DGRPE S Y=.211011;
"RTN","DGRPE",45,0)
302000 ;;.2193;S:X']"" Y=.2196;.2194;S:X']"" Y=.2196;.2195:.2197;.2203;.2199;.211011;@32;
"RTN","DGRPE",46,0)
303 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@33";.3305//NO;I X="Y" S Y="@34",DGX1=1;@33;S:$D(^DPT(DFN,.22)) $P(^(.22),U,1)=$P(^(.22),U,7);.331;S:X']"" DGX1=2,Y="@34";.332;@34;
"RTN","DGRPE",47,0)
303000 ;;S:$G(DGX1) Y="@341";.333;S:X']"" Y=.336;.334;S:X']"" Y=.336;.335:.337;.2201;.339;.33011;S DGX1=2;@341;
"RTN","DGRPE",48,0)
303001 ;;S:$G(DGX1)=2 Y="@35";S DGX2=$G(^DPT(DA,.21));.331///^S X=$P(DGX2,U);.332///^S X=$P(DGX2,U,2);.333////^S X=$P(DGX2,U,3);.334///^S X=$P(DGX2,U,4);@35;
"RTN","DGRPE",49,0)
303002 ;;S:$G(DGX1)=2 Y="@351";.335///^S X=$P(DGX2,U,5);.336///^S X=$P(DGX2,U,6);.337///^S X=$P(DGX2,U,7);.338///^S X=$P(DGX2,U,8);.339///^S X=$P(DGX2,U,9);.33011///^S X=$P(DGX2,U,11);@351;K DGX1,DGX2;
"RTN","DGRPE",50,0)
304 ;;.3311;S:X']"" Y="@36";.3312;.3313;S:X']"" Y=.3316;.3314;S:X']"" Y=.3316;.3315:.3317;.2204;.3319;.331011;@36;        
"RTN","DGRPE",51,0)
305 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@37";.3405//NO;I X="Y" S DGX1=1,Y="@371";@37;S:$D(^DPT(DFN,.22)) $P(^(.22),U,2)=$P(^(.22),U,7);.341;S:X']"" DGX1=2,Y="@371";.342;@371;
"RTN","DGRPE",52,0)
305000 ;;S:$G(DGX1) Y="@38";.343;S:X']"" Y=.346;.344;S:X']"" Y=.346;.345:.347;.2202;.349;.34011;S DGX1=2;@38;
"RTN","DGRPE",53,0)
305001 ;;S:$G(DGX1)=2 Y="@381";S DGX2=$G(^DPT(DA,.21));.341///^S X=$P(DGX2,U);.342///^S X=$P(DGX2,U,2);.343///^S X=$P(DGX2,U,3);.344///^S X=$P(DGX2,U,4);@381
"RTN","DGRPE",54,0)
305002 ;;S:$G(DGX1)=2 Y="@39";.345///^S X=$P(DGX2,U,5);.346///^S X=$P(DGX2,U,6);.347///^S X=$P(DGX2,U,7);.348///^S X=$P(DGX2,U,8);.349///^S X=$P(DGX2,U,9);.34011///^S X=$P(DGX2,U,11);@39;K DGX1,DGX2;
"RTN","DGRPE",55,0)
401 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@41";.3111;S:X']"" Y="@41";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@41;
"RTN","DGRPE",56,0)
402 ;;.2514;.2515;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@42";.251;S:X']"" Y="@42";.252;S:X']"" Y=.255;.253;S:X']"" Y=.255;.254:.256;.2206;.258;@42;
"RTN","DGRPE",57,0)
501 ;;
"RTN","DGRPE",58,0)
502 ;;.381;.382///NOW;
"RTN","DGRPE",59,0)
503 ;;.383;
"RTN","DGRPE",60,0)
601 ;;.325;S:X']"" Y="@61";.328;.326;.327;.324;.3285//NO;S:X'="Y" Y="@61";.3291;S:X']"" Y="@61";.3294;.3292;.3293;.329;.32945//NO;S:X'="Y" Y="@61";.3296;S:X']"" Y="@61";.3299;.3297;.3298;.3295;@61;
"RTN","DGRPE",61,0)
602 ;;.525//NO;S:X'="Y" Y="@62";.526:.528;@62;
"RTN","DGRPE",62,0)
603 ;;.5291//NO;S:X'="Y" Y="@63";.5292:.5294;@63;
"RTN","DGRPE",63,0)
604 ;;.32101//NO;S:X'="Y" Y="@64";.32104;.32105;@64;
"RTN","DGRPE",64,0)
605 ;;.32102//NO;S:X'="Y" Y="@65";.32107;.32109;.3211;.3213;@65;
"RTN","DGRPE",65,0)
606 ;;.32103//NO;S:X'="Y" Y="@66";.3212;.32111;@66;
"RTN","DGRPE",66,0)
607 ;;.3221//NO;S:X'="Y" Y="@67";.3222;Q;.3223;@67;
"RTN","DGRPE",67,0)
608 ;;.3224//NO;S:X'="Y" Y="@68";.3225;Q;.3226;@68;
"RTN","DGRPE",68,0)
609 ;;.3227//NO;S:X'="Y" Y="@69";.3228;Q;.3229;@69;
"RTN","DGRPE",69,0)
610 ;;.32201//NO;S:X'="Y" Y="@610";.322011;Q;.322012;@610;
"RTN","DGRPE",70,0)
611 ;;.322016//NO;S:X'="Y" Y="@611";.322017;Q;.322018;@611;
"RTN","DGRPE",71,0)
612 ;;.322013//NO;S:X'="Y" Y="@612";.322014;Q;.322015;@612;
"RTN","DGRPE",72,0)
613 ;;.362;
"RTN","DGRPE",73,0)
614 ;;.368//NO;.369//NO;I $S('$D(^DPT(DA,.36)):1,$P(^(.36),U,8)="Y"!($P(^(.36),U,9)="Y"):0,1:1) S Y="@614";.37;@614;
"RTN","DGRPE",74,0)
615 ;;.322019//NO;S:X'="Y" Y="@615";.32202;Q;.322021;@615;
"RTN","DGRPE",75,0)
616 ;;S DGPHFLG=0;.531;S:X'="Y" DGX=X,Y="@616";.532///^S X="PENDING";S Y="@6161";@616;S:DGX'="N" Y="@6162";.533///^S X="VAMC";@6161;S DGPHFLG=1;.535///^S X=$$DIV^DGRPLE();@6162;
"RTN","DGRPE",76,0)
617 ;;D REG^DGNTQ(DFN);
"RTN","DGRPE",77,0)
AD N DGZ4,DGPC
"RTN","DGRPE",78,0)
 S X=$S($D(^DPT(DA,.11)):^(.11),1:""),DGZ4=$P(X,U,12),DGPHONE=$S($D(^(.13)):$P(^(.13),U,1),1:""),Y=$S($D(^(DGADD)):^(DGADD),1:""),^(DGADD)=$P(Y,U,1)_U_$P(Y,U,2)_U_$P(X,U,1,6)_U_DGPHONE_U_$P(Y,U,10)
"RTN","DGRPE",79,0)
 I DGZ4 S DGPC=$S((DGADD=.33):1,(DGADD=.34):2,(DGADD=.211):3,(DGADD=.331):4,(DGADD=.311):5,(DGADD=.25):6,(DGADD=.21):7,1:0) S:DGPC $P(^DPT(DFN,.22),U,DGPC)=DGZ4
"RTN","DGRPE",80,0)
 K DGADD,DGPHONE Q
"RTN","DGRPE",81,0)
DR109 ;Drop through (use same logic as DR203)
"RTN","DGRPE",82,0)
DR203 S DR(2,2.02)=".01RACE;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.02,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2031"";.02;@2031;"
"RTN","DGRPE",83,0)
 S DR(2,2.06)=".01ETHNICITY;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.06,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2032"";.02;@2032;"
"RTN","DGRPE",84,0)
 Q
"RTN","DGRPE",85,0)
DR111 ;Set DR string for Confidential Address categories
"RTN","DGRPE",86,0)
 S DR(2,2.141)=".01;1//YES;"
"RTN","DGRPE",87,0)
 Q
"RTN","DGRPP1")
0^1^B6097232
"RTN","DGRPP1",1,0)
DGRPP1 ;ALB/MRL - REGISTRATION SCREEN PROCESSOR (CONTINUED) ;06 JUN 88@2300
"RTN","DGRPP1",2,0)
 ;;5.3;Registration;**489,508**;Aug 13, 1993
"RTN","DGRPP1",3,0)
 ;
"RTN","DGRPP1",4,0)
STR ;write string of selectable items on the bottom of the screen
"RTN","DGRPP1",5,0)
 ;
"RTN","DGRPP1",6,0)
 ;DGRPANP = string to print of selectable items (on bottom of screen)
"RTN","DGRPP1",7,0)
 ;K = 1 if all items are not selectable (DGRPANP=x,y,z,)
"RTN","DGRPP1",8,0)
 ;    0 if whole range is selectable (DGRPANP=x-y)
"RTN","DGRPP1",9,0)
 ;K1 = first item
"RTN","DGRPP1",10,0)
 ;K2 = last item
"RTN","DGRPP1",11,0)
 ;
"RTN","DGRPP1",12,0)
 S (K,K1,K2)="" F I=1:1 S J=+$P(DGRPAN,",",I) Q:'J  S K2=+J S:I=1 K1=J I +$P(DGRPAN,",",I+1),+$P(DGRPAN,",",I+1)'=(J+1) S K=1
"RTN","DGRPP1",13,0)
 S DGRPANP=$S(K:$E(DGRPAN,1,$L(DGRPAN)-1),K1=K2:K1,1:K1_"-"_K2)
"RTN","DGRPP1",14,0)
 K K,K1,K2,I,J,I1
"RTN","DGRPP1",15,0)
 Q
"RTN","DGRPP1",16,0)
 ;
"RTN","DGRPP1",17,0)
LT ;local registration template questions
"RTN","DGRPP1",18,0)
 I '$D(^DG(43,1,0)) W !!,*7,"Your MAS PARAMETER file is not properly set up!" Q
"RTN","DGRPP1",19,0)
 S XX=$S($D(^DIE(+$P(^DG(43,1,0),"^",35),0)):$P(^(0),"^",1),1:"") I XX']"" Q
"RTN","DGRPP1",20,0)
 W @IOF S DGRPCM=1,Z="LOCAL REGISTRATION QUESTIONS",X=25 D W^DGRPU
"RTN","DGRPP1",21,0)
 S X1="",$P(X1,"=",81)="" W !,X1,!!
"RTN","DGRPP1",22,0)
 S DR="["_XX_"]",DIE="^DPT(",(DA,Y)=DFN D ^DIE
"RTN","DGRPP1",23,0)
 K XX Q
"RTN","DGRPP1",24,0)
 ;
"RTN","DGRPP1",25,0)
JUMP ;jump screens (^N)
"RTN","DGRPP1",26,0)
 S X=+$E(DGRPANN,2,99) I $D(DGRPVV(X)) S X1=$E(DGRPVV,$P(X,".")) I X1]"",'X1 G @$S(X=1.1:"^DGRPCADD",1:"^DGRP"_X)
"RTN","DGRPP1",27,0)
 S Z="INVALID SCREEN NUMBER...VALID SCREENS ARE " F I=1,1.1,2:1:DGRPLAST I '$E(DGRPVV,I) S Z=Z_$S(I=DGRPLAST:" and ",1:"")_I_$S(I<DGRPLAST:",",1:".")
"RTN","DGRPP1",28,0)
 W !,*7 D W H 2
"RTN","DGRPP1",29,0)
 G:DGRPS'=1.1 @("^DGRP"_DGRPS) G:DGRPS=1.1 ^DGRPCADD  ;return to same screen
"RTN","DGRPP1",30,0)
 ;
"RTN","DGRPP1",31,0)
WHICH ; if screen 9, which elements can be edited (vet, spouse, dependents)
"RTN","DGRPP1",32,0)
 I DGRPS'=9 S DGRPSEL="" Q
"RTN","DGRPP1",33,0)
 S DGRPSEL="V" I $D(DGREL("S")) S DGRPSEL=DGRPSEL_"S"
"RTN","DGRPP1",34,0)
 I $O(DGREL("D",0)) S DGRPSEL=DGRPSEL_"D"
"RTN","DGRPP1",35,0)
 Q
"RTN","DGRPP1",36,0)
 ;
"RTN","DGRPP1",37,0)
MOREHLP ; print additional help prompt for screen 9
"RTN","DGRPP1",38,0)
 I DGRPVV(9)'["0"!+$G(DGRPV) Q  ;view only
"RTN","DGRPP1",39,0)
 W !,"(To edit only veteran income, precede selection with 'V' [ex. 'V1-3']" I DGRPSEL]"V" W $S(DGRPSEL["SD":",",1:" or"),!
"RTN","DGRPP1",40,0)
 I DGRPSEL["S" W "precede with 'S' to edit spouse" I DGRPSEL["D" W ", or "
"RTN","DGRPP1",41,0)
 I DGRPSEL["D" W "precede with 'D' to edit dependents"
"RTN","DGRPP1",42,0)
 W "): "
"RTN","DGRPP1",43,0)
 Q
"RTN","DGRPP1",44,0)
 ;
"RTN","DGRPP1",45,0)
W ;write highlighted text on screen (if parameter on)
"RTN","DGRPP1",46,0)
 I IOST="C-QUME",$L(DGVI)'=2 W Z
"RTN","DGRPP1",47,0)
 E  W @DGVI,Z,@DGVO
"RTN","DGRPP1",48,0)
 Q
"RTN","DGRPU1")
0^4^B6183317
"RTN","DGRPU1",1,0)
DGRPU1 ;ALB/REW CUSTOM LOAD/EDIT SCREEN UTILITIES ;9-FEB-92
"RTN","DGRPU1",2,0)
 ;;5.3;Registration;**139,169,415,527,508**;Aug 13, 1993
"RTN","DGRPU1",3,0)
 ;
"RTN","DGRPU1",4,0)
QUES(DFN,DGQCODE) ; EDIT SPECIFIC PORTIONS OF REGISTRATION DATA
"RTN","DGRPU1",5,0)
 ;
"RTN","DGRPU1",6,0)
 ;  INPUT:
"RTN","DGRPU1",7,0)
 ;     DFN
"RTN","DGRPU1",8,0)
 ;     DGQCODE = Code for question(s) to be asked
"RTN","DGRPU1",9,0)
 ;  OUTPUT:
"RTN","DGRPU1",10,0)
 ;     DGERR   = ERROR VARIABLE
"RTN","DGRPU1",11,0)
 ;     DGCHANGE= 1 IF DATA MODIFIED 0 O/W
"RTN","DGRPU1",12,0)
 ;  USED:
"RTN","DGRPU1",13,0)
 ;     DGPTND  = Prior value(s) of Patient File node(s) [array]
"RTN","DGRPU1",14,0)
 ;     DGQNODES= Node(s) used above
"RTN","DGRPU1",15,0)
 ;     DGNODE  = Single node
"RTN","DGRPU1",16,0)
 ;     DGDR    = edit=screen*10+item #
"RTN","DGRPU1",17,0)
 ;     DGRPS   = Screen #
"RTN","DGRPU1",18,0)
 ;     DGCODE  = CODE used by ^DGRPE
"RTN","DGRPU1",19,0)
 ;     DGQ     = String of ^DGCODE^DGCODE etc.
"RTN","DGRPU1",20,0)
 ;     DGPC    = Piece Number
"RTN","DGRPU1",21,0)
 ;     DGX     = Line Tag offset
"RTN","DGRPU1",22,0)
 ;
"RTN","DGRPU1",23,0)
 N D,D0,DI,DIC,DGCODE,DGDR,DGNODE,DGQNODES,DGPC,DGPTND,DGRPS,DGQ,DGX
"RTN","DGRPU1",24,0)
 N DQ,N,X,Y,%Y,DGPTNDM
"RTN","DGRPU1",25,0)
 S (DGERR,DGRPS,DGCHANGE)=0
"RTN","DGRPU1",26,0)
 I '($G(DFN)&$D(DGQCODE)) G QTE
"RTN","DGRPU1",27,0)
 F DGX=1:1 S DGQ=$T(QDES+DGX) Q:DGQ[(U_DGQCODE_U)!(DGQ']"")
"RTN","DGRPU1",28,0)
 F DGPC=2:1 S DGCODE=$P(DGQ,U,DGPC) Q:(DGCODE']"")!(DGCODE=DGQCODE)
"RTN","DGRPU1",29,0)
 G:DGCODE']"" QTE
"RTN","DGRPU1",30,0)
 S DGDR=$P($T(QNUM+DGX),U,DGPC)
"RTN","DGRPU1",31,0)
 S DGRPS=DGDR\100
"RTN","DGRPU1",32,0)
 S DGQNODES=$P($T(QNODE+DGX),U,DGPC)
"RTN","DGRPU1",33,0)
 F N=1:1 S DGNODE=$P(DGQNODES,"~",N) Q:DGNODE']""  S DGPTND(DGNODE)=$G(^DPT(DFN,DGNODE))
"RTN","DGRPU1",34,0)
 S DGQNODES=$P($T(MNODE+DGX),U,DGPC)
"RTN","DGRPU1",35,0)
 F N=1:1 S DGNODE=$P(DGQNODES,"~",N) Q:DGNODE']""  M DGPTNDM(DGNODE)=^DPT(DFN,DGNODE) S DGPTNDM(DGNODE)=""
"RTN","DGRPU1",36,0)
 D ^DGRPE
"RTN","DGRPU1",37,0)
 F DGNODE=0:0 S DGNODE=$O(DGPTND(DGNODE)) Q:DGNODE']""  S:$G(^DPT(DFN,DGNODE))'=(DGPTND(DGNODE)) DGCHANGE=1
"RTN","DGRPU1",38,0)
 S DGNODE="" F  S DGNODE=$O(DGPTNDM(DGNODE)) Q:DGNODE']""  D  Q:DGCHANGE
"RTN","DGRPU1",39,0)
 .S X=0 F  S X=$O(DGPTNDM(DGNODE,X)) Q:'X  D  Q:DGCHANGE
"RTN","DGRPU1",40,0)
 ..S Y="" F  S Y=$O(DGPTNDM(DGNODE,X,Y)) Q:Y']""  D  Q:DGCHANGE
"RTN","DGRPU1",41,0)
 ...I $G(^DPT(DFN,DGNODE,X,Y))'=DGPTNDM(DGNODE,X,Y) S DGCHANGE=1
"RTN","DGRPU1",42,0)
 .Q:DGCHANGE
"RTN","DGRPU1",43,0)
 .S X=0 F  S X=$O(^DPT(DGNODE,X)) Q:'X  D  Q:DGCHANGE
"RTN","DGRPU1",44,0)
 ..S Y="" F  S Y=$O(^DPT(DGNODE,X,Y)) Q:Y']""  D  Q:DGCHANGE
"RTN","DGRPU1",45,0)
 ...I $G(^DPT(DFN,DGNODE,X,Y))'=DGPTNDM(DGNODE,X,Y) S DGCHANGE=1
"RTN","DGRPU1",46,0)
QTE I 'DGRPS S DGERR=1
"RTN","DGRPU1",47,0)
QTQ Q
"RTN","DGRPU1",48,0)
QDES ;MNEMONIC - DGQCODE should match with one of these
"RTN","DGRPU1",49,0)
 ;;^ADD1^ADD2^ADD^ADD3^ADD4^
"RTN","DGRPU1",50,0)
QNUM ;REFERENCE NUMBERS USED TO SET DGDR FOR USE BY ^DGRPE
"RTN","DGRPU1",51,0)
 ;;^104^105^109,105^109,105,111^111^
"RTN","DGRPU1",52,0)
 ;;
"RTN","DGRPU1",53,0)
QNODE ;;NODES OF THE PATIENT FILE
"RTN","DGRPU1",54,0)
 ;;^.11~.13^.121^.11~.121~.13^.11~.121~.13~.141^.141^
"RTN","DGRPU1",55,0)
 ;;
"RTN","DGRPU1",56,0)
MNODE ;;MULTIPLES OF THE PATIENT FILE
"RTN","DGRPU1",57,0)
 ;;^^^.02~.06^.02~.06~.14^.14^
"RTN","VAFCA04")
0^9^B18154827
"RTN","VAFCA04",1,0)
VAFCA04 ;ALB/RJS-Creates the Registration Message ; 26 Mar 2003  3:13 PM
"RTN","VAFCA04",2,0)
 ;;5.3;Registration;**91,209,149,261,298,415,484,508**;Aug 13, 1993
"RTN","VAFCA04",3,0)
 ;
"RTN","VAFCA04",4,0)
 ;07/07/00 ACS - Added sequence 21 (physical treating specialty - ward
"RTN","VAFCA04",5,0)
 ;location) and sequence 39 (facility+suffix) to the inpatient string
"RTN","VAFCA04",6,0)
 ;of fields.  Added sequence 39 to the outpatient string of fields.
"RTN","VAFCA04",7,0)
 ;
"RTN","VAFCA04",8,0)
EN(DFN,VAFCDATE,USER,PIVOTPTR) ;
"RTN","VAFCA04",9,0)
 Q:($G(DFN)="")!($G(VAFCDATE)="") "-1^Missing required parameter(s)"
"RTN","VAFCA04",10,0)
 N ERR,VCCI,SITE,FS,VAFCDT,VAFHPIV,REP,DGREL,DGINC,DGINR,DGDEP,VAFSTR
"RTN","VAFCA04",11,0)
 N ICN,CHKSUM,SETICN,SETLOC,HLA,HLRST,PV1,LIN
"RTN","VAFCA04",12,0)
 ;
"RTN","VAFCA04",13,0)
 ;check HL7 V2.3 messaging flag
"RTN","VAFCA04",14,0)
 N SEND S SEND=$P($$SEND^VAFHUTL(),"^",2)
"RTN","VAFCA04",15,0)
 Q:SEND=0 "-1^Stop HL7 V2.3 messaging flag is set"
"RTN","VAFCA04",16,0)
 ;
"RTN","VAFCA04",17,0)
 S USER=+$G(USER)
"RTN","VAFCA04",18,0)
 I 'USER,$D(DUZ) S USER=DUZ
"RTN","VAFCA04",19,0)
 I 'USER,'$D(DUZ) S USER=0
"RTN","VAFCA04",20,0)
 S PIVOTPTR=+$G(PIVOTPTR)
"RTN","VAFCA04",21,0)
 I 'PIVOTPTR D
"RTN","VAFCA04",22,0)
 .S VAFHPIV=+$$PIVNW^VAFHPIVT(DFN,VAFCDATE,3,DFN_";DPT(")
"RTN","VAFCA04",23,0)
 .Q:+VAFHPIV<0
"RTN","VAFCA04",24,0)
 .S PIVOTPTR=+$O(^VAT(391.71,"D",VAFHPIV,0))
"RTN","VAFCA04",25,0)
 ;
"RTN","VAFCA04",26,0)
 Q:+$G(VAFHPIV)<0 "-1^Could Not Create ADT/HL7 Pivot file entry"
"RTN","VAFCA04",27,0)
 K ERR
"RTN","VAFCA04",28,0)
 ;log edited field(s) in the ADT/HL7
"RTN","VAFCA04",29,0)
 I $D(VAFCFLDS) D
"RTN","VAFCA04",30,0)
 . S VAFCFLDS=$$PROCESS^VAFCDD01()
"RTN","VAFCA04",31,0)
 . Q:VAFCFLDS'=-1
"RTN","VAFCA04",32,0)
 . D REGEDIT^VAFCDD01(PIVOTPTR,VAFCFLDS)
"RTN","VAFCA04",33,0)
 ;Messaging flag set to SUSPEND - flag entry in ADT/HL7 Pivot file
"RTN","VAFCA04",34,0)
 ; for transmission and quit
"RTN","VAFCA04",35,0)
 I SEND=2 D TRANSMIT^VAFCDD01(PIVOTPTR) Q 1
"RTN","VAFCA04",36,0)
 K VAFCFLDS
"RTN","VAFCA04",37,0)
 D INIT^HLFNC2("VAFC ADT-A04 SERVER",.HL)
"RTN","VAFCA04",38,0)
 Q:$G(HL)]"" "-1^VAFC A04 SERVER NOT DEFINED PROPERLY"
"RTN","VAFCA04",39,0)
 S FS=HL("FS"),REP=$E(HL("ECH"))
"RTN","VAFCA04",40,0)
 ;
"RTN","VAFCA04",41,0)
 S VAFCDT=$$HLDATE^HLFNC(VAFCDATE,"TS")
"RTN","VAFCA04",42,0)
 S HLA("HLS",1)="EVN"_HLFS_"A04"_HLFS_VAFCDT_HLFS_HLFS_HLFS_USER_REP
"RTN","VAFCA04",43,0)
 S DIC="^VA(200,",DIC(0)="MZO",X="`"_USER D ^DIC K DIC
"RTN","VAFCA04",44,0)
 N DGNAME S DGNAME("FILE")=200,DGNAME("IENS")=USER,DGNAME("FIELD")=.01
"RTN","VAFCA04",45,0)
 I USER'=0 S HLA("HLS",1)=HLA("HLS",1)_$$HLNAME^XLFNAME(.DGNAME,"",$E($G(HLECH)))
"RTN","VAFCA04",46,0)
 ; ^ possible to not have a user defined
"RTN","VAFCA04",47,0)
 S LIN=1
"RTN","VAFCA04",48,0)
 K Y S VAFSTR=$$COMMANUM^VAFCADT2(1,9)_",10B,11PC,"_$$COMMANUM^VAFCADT2(13,21)_",22B,"_$$COMMANUM^VAFCADT2(23,30)
"RTN","VAFCA04",49,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFCPID(DFN,VAFSTR)
"RTN","VAFCA04",50,0)
 ;CHECK IF PATIENT HAS AN ICN
"RTN","VAFCA04",51,0)
 I $P(HLA("HLS",LIN),HLFS,3)=HLQ D
"RTN","VAFCA04",52,0)
 . N X S X="MPIF001" X ^%ZOSF("TEST") Q:'$T
"RTN","VAFCA04",53,0)
 . ; if patient does not have an ICN still pass HLQ
"RTN","VAFCA04",54,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","VAFCA04",55,0)
 . I +ICN>0 S $P(HLA("HLS",LIN),HLFS,3)=ICN
"RTN","VAFCA04",56,0)
 MERGE HLA("HLS",LIN)=VAFPID K VAFPID
"RTN","VAFCA04",57,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,12)
"RTN","VAFCA04",58,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLPD1(DFN,VAFSTR)
"RTN","VAFCA04",59,0)
 S VAFHPIV=$P($G(^VAT(391.71,PIVOTPTR,0)),"^",2)
"RTN","VAFCA04",60,0)
 Q:VAFHPIV'>0 "-1^COULDN'T FIND PIVOT ENTRY"
"RTN","VAFCA04",61,0)
 I $G(^DPT(DFN,.1))]"" D
"RTN","VAFCA04",62,0)
 . S PV1=$$EN^VAFHAPV1(DFN,VAFCDATE,",2,3,7,8,10,18,21,39,44,45,50")
"RTN","VAFCA04",63,0)
 . S HLA("HLS",$$ADD(.LIN,1))=PV1
"RTN","VAFCA04",64,0)
 . S VAFSTR=$$COMMANUM^VAFCADT2(1,4)
"RTN","VAFCA04",65,0)
 . N HLAROL
"RTN","VAFCA04",66,0)
 . D BLDROL^VAFCROL("HLAROL",DFN,VAFCDATE,VAFSTR,VAFHPIV)
"RTN","VAFCA04",67,0)
 . N I,J,K
"RTN","VAFCA04",68,0)
 . S I=""
"RTN","VAFCA04",69,0)
 . F K=1:1 S I=+$O(HLAROL(I)) Q:('I)  D
"RTN","VAFCA04",70,0)
 . . S J=""
"RTN","VAFCA04",71,0)
 . . F  S J=$O(HLAROL(I,J)) Q:(J="")  D
"RTN","VAFCA04",72,0)
 . . . S:('J) HLA("HLS",LIN+K)=HLAROL(I,J)
"RTN","VAFCA04",73,0)
 . . . S:(J) HLA("HLS",LIN+K,J)=HLAROL(I,J)
"RTN","VAFCA04",74,0)
 . S LIN=LIN+K-1
"RTN","VAFCA04",75,0)
 E  D
"RTN","VAFCA04",76,0)
 . S PV1=$$OPV1^VAFHCPV(DFN,+VAFHPIV,VAFCDATE,DFN_";DPT(",",2,3,7,18,39,45,50",1)
"RTN","VAFCA04",77,0)
 . S HLA("HLS",$$ADD(.LIN,1))=PV1
"RTN","VAFCA04",78,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLOBX(DFN)
"RTN","VAFCA04",79,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,21)
"RTN","VAFCA04",80,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZPD(DFN,VAFSTR)
"RTN","VAFCA04",81,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,5)
"RTN","VAFCA04",82,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZSP(DFN)
"RTN","VAFCA04",83,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,22)
"RTN","VAFCA04",84,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEL(DFN,VAFSTR)
"RTN","VAFCA04",85,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7,8,9")
"RTN","VAFCA04",86,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEM(DFN,"1,2,3,4,5,6,7,8")
"RTN","VAFCA04",87,0)
 S HLA("HLS",$$ADD(.LIN,1))="ZFF"_HL("FS")_2_HL("FS")_$P($G(^VAT(391.71,+$G(PIVOTPTR),2)),U)
"RTN","VAFCA04",88,0)
 D ALL^DGMTU21(DFN,"V",VAFCDATE,"R")
"RTN","VAFCA04",89,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,13)
"RTN","VAFCA04",90,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZIR(+$G(DGINR("V")),VAFSTR,1)
"RTN","VAFCA04",91,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(1,10)
"RTN","VAFCA04",92,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEN(DFN,VAFSTR,1,HL("Q"),HL("FS"))
"RTN","VAFCA04",93,0)
 D GENERATE^HLMA("VAFC ADT-A04 SERVER","LM",1,.HLRST,"",.HL)
"RTN","VAFCA04",94,0)
 ;Store result in pivot file
"RTN","VAFCA04",95,0)
 S HLRST=$S(+HLRST:HLRST,1:$P(HLRST,U,3))
"RTN","VAFCA04",96,0)
 I +HLRST>0 D MESSAGE^VAFCDD01(PIVOTPTR,+HLRST)
"RTN","VAFCA04",97,0)
 D FILERM^VAFCUTL($O(^VAT(391.71,"D",+VAFHPIV,0)),HLRST)
"RTN","VAFCA04",98,0)
 ;
"RTN","VAFCA04",99,0)
EX ; 
"RTN","VAFCA04",100,0)
 Q 1
"RTN","VAFCA04",101,0)
 ;
"RTN","VAFCA04",102,0)
ADD(LINE,COUNTER) ;Increments Line = Line + Counter
"RTN","VAFCA04",103,0)
 ;Input    :  LINE   - Line number
"RTN","VAFCA04",104,0)
 ;            COUNTER - Increment number
"RTN","VAFCA04",105,0)
 ;Output   :  Updated LINE value
"RTN","VAFCA04",106,0)
 ;
"RTN","VAFCA04",107,0)
 S LINE=$G(LINE),COUNTER=$G(COUNTER)
"RTN","VAFCA04",108,0)
 S LINE=LINE+COUNTER
"RTN","VAFCA04",109,0)
 Q LINE
"RTN","VAFCA04",110,0)
 ;
"RTN","VAFCA04",111,0)
HL7A04(PIVOTNUM,IEN) ;
"RTN","VAFCA04",112,0)
 ;A new Registration was created capture the key demographic data.
"RTN","VAFCA04",113,0)
 ;Create an HL7 V2.3 entry in the ADT/HL PIVOT file so that the 
"RTN","VAFCA04",114,0)
 ;demographic data can be broadcasted.
"RTN","VAFCA04",115,0)
 ; VAFCFLDS is set in routine VAFCDD01. It contains the
"RTN","VAFCA04",116,0)
 ; fields that were edited.
"RTN","VAFCADT2")
0^11^B24728932
"RTN","VAFCADT2",1,0)
VAFCADT2 ;ALB/RJS - HL7 ADT MESSAGE BUILDING ROUTINE ; 3/26/03 5:00 PM
"RTN","VAFCADT2",2,0)
 ;;5.3;Registration;**91,179,209,415,494,484,508**;Aug 13, 1993
"RTN","VAFCADT2",3,0)
 ;hl7v1.6
"RTN","VAFCADT2",4,0)
 ;
"RTN","VAFCADT2",5,0)
 ;This routine builds ADT HL7 messages: A01 = Admission
"RTN","VAFCADT2",6,0)
 ;                                      A02 = Transfer
"RTN","VAFCADT2",7,0)
 ;                                      A03 = Discharge
"RTN","VAFCADT2",8,0)
 ;                                      A08 = Treating Specialty Update
"RTN","VAFCADT2",9,0)
 ;                                      A11 = Cancel Admission
"RTN","VAFCADT2",10,0)
 ;                                      A12 = Cancel Transfer
"RTN","VAFCADT2",11,0)
 ;                                      A13 = Cancel Discharge
"RTN","VAFCADT2",12,0)
 ;
"RTN","VAFCADT2",13,0)
 ;It is called by VAFCADT1, which is itself is called by the
"RTN","VAFCADT2",14,0)
 ;DGPM patient movement event driver.
"RTN","VAFCADT2",15,0)
 ;
"RTN","VAFCADT2",16,0)
 ;
"RTN","VAFCADT2",17,0)
BLDMSG(DFN,EVENT,VAFHDT,EVCODE,IEN,PIVOT,PV1) ;
"RTN","VAFCADT2",18,0)
 ;Required Variables are:   DFN = IEN of Patient File
"RTN","VAFCADT2",19,0)
 ;                        EVENT = HL7 Event, A01, A02, A03, etc.
"RTN","VAFCADT2",20,0)
 ;                       VAFHDT = Date/Time of Admission, Transfer, etc
"RTN","VAFCADT2",21,0)
 ;
"RTN","VAFCADT2",22,0)
 ;Optional Variables are: Event Code = (EVCODE):A string literal which is
"RTN","VAFCADT2",23,0)
 ;                                     inserted in the Event Reason
"RTN","VAFCADT2",24,0)
 ;                                     Code Field of the EVN segment
"RTN","VAFCADT2",25,0)
 ;                                     of the message. This serves to
"RTN","VAFCADT2",26,0)
 ;                                     indicate that the message might
"RTN","VAFCADT2",27,0)
 ;                                     need to be processed in a special
"RTN","VAFCADT2",28,0)
 ;                                     way. PIMS ADT software uses the
"RTN","VAFCADT2",29,0)
 ;                                     Event Code to indicate whether
"RTN","VAFCADT2",30,0)
 ;                                     the message is the most recent
"RTN","VAFCADT2",31,0)
 ;                                     "Snapshot" of the data "05" or
"RTN","VAFCADT2",32,0)
 ;                                     a "Snapshot" of data that is
"RTN","VAFCADT2",33,0)
 ;                                     followed by more recent data "04"
"RTN","VAFCADT2",34,0)
 ;
"RTN","VAFCADT2",35,0)
 ;                         
"RTN","VAFCADT2",36,0)
 ;                               IEN = The IEN of the Patient Movement
"RTN","VAFCADT2",37,0)
 ;                                     that the HL7 message is being
"RTN","VAFCADT2",38,0)
 ;                                     built from. This is especially
"RTN","VAFCADT2",39,0)
 ;                                     useful for Discharge Movements
"RTN","VAFCADT2",40,0)
 ;                                     where date/time (VAFHDT) is not
"RTN","VAFCADT2",41,0)
 ;                                     enough information to retrieve
"RTN","VAFCADT2",42,0)
 ;                                     the movement
"RTN","VAFCADT2",43,0)
 ;
"RTN","VAFCADT2",44,0)
 ;                             PIVOT = The PIMS Pivot number that
"RTN","VAFCADT2",45,0)
 ;                                     uniquely identifies the ADMISSION
"RTN","VAFCADT2",46,0)
 ;
"RTN","VAFCADT2",47,0)
 ;                               PV1 = In the case of a "Deleted
"RTN","VAFCADT2",48,0)
 ;                                     Admission" the record in the 
"RTN","VAFCADT2",49,0)
 ;                                     Patient Movement File has already
"RTN","VAFCADT2",50,0)
 ;                                     been deleted. But, a PV1 segment
"RTN","VAFCADT2",51,0)
 ;                                     can be built from the DGPMP
"RTN","VAFCADT2",52,0)
 ;                                     variable that has been saved off
"RTN","VAFCADT2",53,0)
 ;                                     by the DGPM Event Driver. This
"RTN","VAFCADT2",54,0)
 ;                                     PV1 segment is passed a string
"RTN","VAFCADT2",55,0)
 ;                                     literal that is built by a call
"RTN","VAFCADT2",56,0)
 ;                                     to DGBUILD^VAFHAPV1 previous to 
"RTN","VAFCADT2",57,0)
 ;                                     calling this software.
"RTN","VAFCADT2",58,0)
 ;
"RTN","VAFCADT2",59,0)
 K HLA N VAFDIAG,LIN,VAFSTR,DGREL,DGINC,DGINR,DGDEP,VAFZEL
"RTN","VAFCADT2",60,0)
 ;Q:($G(EVCODE)'="05")
"RTN","VAFCADT2",61,0)
 ;
"RTN","VAFCADT2",62,0)
 K HL
"RTN","VAFCADT2",63,0)
 I EVENT="A08" D INIT^HLFNC2("VAFC ADT-A08-TSP SERVER",.HL)
"RTN","VAFCADT2",64,0)
 I EVENT'="A08" D INIT^HLFNC2("VAFC ADT-"_EVENT_" SERVER",.HL)
"RTN","VAFCADT2",65,0)
 I $D(HL)#2 G EXIT
"RTN","VAFCADT2",66,0)
 S LIN=1
"RTN","VAFCADT2",67,0)
 S VAFSTR=$$COMMANUM^VAFCADT2(2,9)_",10B,11PC,"_$$COMMANUM^VAFCADT2(13,21)_",22B,"_$$COMMANUM^VAFCADT2(23,30)
"RTN","VAFCADT2",68,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFCPID(DFN,VAFSTR)
"RTN","VAFCADT2",69,0)
 I +HLA("HLS",LIN)=-1 K HLA("HLS",2) G EXIT
"RTN","VAFCADT2",70,0)
 ;I $G(VAFPID(1))]"" S HLA("HLS",LIN,1)=VAFPID(1)
"RTN","VAFCADT2",71,0)
 ;I $G(VAFPID(2))]"" S HLA("HLS",LIN,2)=VAFPID(2)
"RTN","VAFCADT2",72,0)
 MERGE HLA("HLS",LIN)=VAFPID K VAFPID
"RTN","VAFCADT2",73,0)
 S $P(HLA("HLS",LIN),HLFS,2)=1 ;SET ID
"RTN","VAFCADT2",74,0)
 S VAFSTR=$$COMMANUM(1,12)
"RTN","VAFCADT2",75,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLPD1(DFN,VAFSTR)
"RTN","VAFCADT2",76,0)
 S VAFSTR=$$COMMANUM(1,21)
"RTN","VAFCADT2",77,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZPD(DFN,VAFSTR)
"RTN","VAFCADT2",78,0)
 S $P(HLA("HLS",LIN),HLFS,2)=1 ;SET ID
"RTN","VAFCADT2",79,0)
 I EVENT="A11" D  G NEXT
"RTN","VAFCADT2",80,0)
 . S HLA("HLS",$$ADD(.LIN,1))=PV1
"RTN","VAFCADT2",81,0)
 . S $P(HLA("HLS",LIN),HLFS,51)=$G(PIVOT) ;              VISIT&SET ID'S
"RTN","VAFCADT2",82,0)
 I EVENT="A01"!(EVENT="A03")!(EVENT="A08")!(EVENT="A12")!(EVENT="A13") D  G NEXT
"RTN","VAFCADT2",83,0)
 . S VAFSTR=$$COMMANUM(2,5)_","_$$COMMANUM(7,45)
"RTN","VAFCADT2",84,0)
 . S HLA("HLS",$$ADD(.LIN,1))=$$IN^VAFHLPV1(DFN,VAFHDT,VAFSTR,$G(IEN),PIVOT,"",.VAFDIAG)
"RTN","VAFCADT2",85,0)
 I EVENT="A02" D  G NEXT
"RTN","VAFCADT2",86,0)
 . S VAFSTR=$$COMMANUM(2,45)
"RTN","VAFCADT2",87,0)
 . S HLA("HLS",$$ADD(.LIN,1))=$$IN^VAFHLPV1(DFN,VAFHDT,VAFSTR,$G(IEN),PIVOT,"",.VAFDIAG)
"RTN","VAFCADT2",88,0)
 G EXIT
"RTN","VAFCADT2",89,0)
NEXT ;
"RTN","VAFCADT2",90,0)
 S $P(HLA("HLS",LIN),HLFS,2)=1 ;PV1 SET ID
"RTN","VAFCADT2",91,0)
 S HLA("HLS",1)="EVN"_HLFS_EVENT_HLFS_$$HLDATE^HLFNC(VAFHDT,"TS")_HLFS
"RTN","VAFCADT2",92,0)
 S HLA("HLS",1)=HLA("HLS",1)_HLFS_$G(EVCODE) ;,1
"RTN","VAFCADT2",93,0)
 S VAFSTR=$$COMMANUM(1,4)
"RTN","VAFCADT2",94,0)
 N HLAROL
"RTN","VAFCADT2",95,0)
 D BLDROL^VAFCROL("HLAROL",DFN,VAFHDT,VAFSTR,$G(PIVOT),$G(IEN))
"RTN","VAFCADT2",96,0)
 N I,J,K
"RTN","VAFCADT2",97,0)
 S I=""
"RTN","VAFCADT2",98,0)
 F K=1:1 S I=+$O(HLAROL(I)) Q:('I)  D
"RTN","VAFCADT2",99,0)
 . S J=""
"RTN","VAFCADT2",100,0)
 . F  S J=$O(HLAROL(I,J)) Q:(J="")  D
"RTN","VAFCADT2",101,0)
 . . S:('J) HLA("HLS",LIN+K)=HLAROL(I,J)
"RTN","VAFCADT2",102,0)
 . . S:(J) HLA("HLS",LIN+K,J)=HLAROL(I,J)
"RTN","VAFCADT2",103,0)
 S LIN=LIN+K-1
"RTN","VAFCADT2",104,0)
 I (EVENT="A01")!(EVENT="A08")!(EVENT="A11")!(EVENT="A12")!(EVENT="A13") DO
"RTN","VAFCADT2",105,0)
 . S HLA("HLS",$$ADD(.LIN,1))="DG1"_HLFS_1_HLFS_HLFS_HLFS_$$HLQ^VAFHUTL($G(VAFDIAG))
"RTN","VAFCADT2",106,0)
 S VAFSTR=$$COMMANUM(1,5)
"RTN","VAFCADT2",107,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZSP(DFN,1,1)
"RTN","VAFCADT2",108,0)
 S VAFSTR=$$COMMANUM(1,22)
"RTN","VAFCADT2",109,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEL(DFN,VAFSTR,2)
"RTN","VAFCADT2",110,0)
 S VAFSTR=$$COMMANUM(1,9)
"RTN","VAFCADT2",111,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZCT(DFN,VAFSTR,1)
"RTN","VAFCADT2",112,0)
 S VAFSTR=$$COMMANUM(1,8)
"RTN","VAFCADT2",113,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEM(DFN,VAFSTR,1,1)
"RTN","VAFCADT2",114,0)
 D ALL^DGMTU21(DFN,"V",VAFHDT,"R")
"RTN","VAFCADT2",115,0)
 S VAFSTR=$$COMMANUM(1,13)
"RTN","VAFCADT2",116,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZIR(+$G(DGINR("V")),VAFSTR,1)
"RTN","VAFCADT2",117,0)
 S VAFSTR=$$COMMANUM(1,10)
"RTN","VAFCADT2",118,0)
 S HLA("HLS",$$ADD(.LIN,1))=$$EN^VAFHLZEN(DFN,VAFSTR,1,HL("Q"),HL("FS"))
"RTN","VAFCADT2",119,0)
 D:$D(VATRACE) LOOP
"RTN","VAFCADT2",120,0)
 ;
"RTN","VAFCADT2",121,0)
 S COUNTER=""
"RTN","VAFCADT2",122,0)
 F  S COUNTER=$O(HLA("HLS",COUNTER)) Q:COUNTER'>0  D
"RTN","VAFCADT2",123,0)
 .; I +(HLA("HLS",COUNTER))=-1 S HLERR="Bad "_COUNTER_" Segment"
"RTN","VAFCADT2",124,0)
 .  I +(HLA("HLS",COUNTER))=-1 S HL="Bad "_COUNTER_" Segment"
"RTN","VAFCADT2",125,0)
 .
"RTN","VAFCADT2",126,0)
 ;
"RTN","VAFCADT2",127,0)
EXIT ;
"RTN","VAFCADT2",128,0)
 ;I $D(HL)=1 DO
"RTN","VAFCADT2",129,0)
 ;.  S HLERR(1)=HL
"RTN","VAFCADT2",130,0)
 ;.  D EBULL^VAFHUTL2(DFN,VAFHDT,PIVOT,"HLERR(")
"RTN","VAFCADT2",131,0)
 I $D(HL)>1,$D(HLA("HLS")) DO
"RTN","VAFCADT2",132,0)
 . I EVENT="A08" DO
"RTN","VAFCADT2",133,0)
 .  . D GENERATE^HLMA("VAFC ADT-A08-TSP SERVER","LM",1,.HLRST,"")
"RTN","VAFCADT2",134,0)
 . E  D GENERATE^HLMA("VAFC ADT-"_EVENT_" SERVER","LM",1,.HLRST,"")
"RTN","VAFCADT2",135,0)
 .
"RTN","VAFCADT2",136,0)
 D KVAR^VADPT,KVAR^VAFHLPV1 K HLA,HLERR
"RTN","VAFCADT2",137,0)
 Q
"RTN","VAFCADT2",138,0)
LOOP ;
"RTN","VAFCADT2",139,0)
 ;
"RTN","VAFCADT2",140,0)
 ;
"RTN","VAFCADT2",141,0)
 W !!
"RTN","VAFCADT2",142,0)
 N XX S XX=0
"RTN","VAFCADT2",143,0)
 F  S XX=$O(HLA("HLS",XX)) Q:XX=""  W !,HLA("HLS",XX)
"RTN","VAFCADT2",144,0)
 Q
"RTN","VAFCADT2",145,0)
 ;
"RTN","VAFCADT2",146,0)
COMMANUM(FROM,TO) ;Build comma separated list of numbers
"RTN","VAFCADT2",147,0)
 ;Input  : FROM - Starting number (default = 1)
"RTN","VAFCADT2",148,0)
 ;         TO - Ending number (default = FROM)
"RTN","VAFCADT2",149,0)
 ;Output : Comma separated list of numbers between FROM and TO
"RTN","VAFCADT2",150,0)
 ;         (Ex: 1,2,3)
"RTN","VAFCADT2",151,0)
 ;Notes  : Call assumes FROM <= TO
"RTN","VAFCADT2",152,0)
 ;
"RTN","VAFCADT2",153,0)
 S FROM=$G(FROM) S:(FROM="") FROM=1
"RTN","VAFCADT2",154,0)
 S TO=$G(TO) S:(TO="") TO=FROM
"RTN","VAFCADT2",155,0)
 N OUTPUT,X
"RTN","VAFCADT2",156,0)
 S OUTPUT=FROM
"RTN","VAFCADT2",157,0)
 F X=(FROM+1):1:TO S OUTPUT=(OUTPUT_","_X)
"RTN","VAFCADT2",158,0)
 Q OUTPUT
"RTN","VAFCADT2",159,0)
 ;
"RTN","VAFCADT2",160,0)
ADD(LINE,COUNTER) ;Increments Line = Line + Counter
"RTN","VAFCADT2",161,0)
 ;Input      :  LINE      - Line number
"RTN","VAFCADT2",162,0)
 ;              COUNTER   - Increment number
"RTN","VAFCADT2",163,0)
 ;Output     :  Updated LINE value
"RTN","VAFCADT2",164,0)
 ;
"RTN","VAFCADT2",165,0)
 S LINE=$G(LINE),COUNTER=$G(COUNTER)
"RTN","VAFCADT2",166,0)
 S LINE=LINE+COUNTER
"RTN","VAFCADT2",167,0)
 Q LINE
"RTN","VAFCMSG4")
0^10^B15046042
"RTN","VAFCMSG4",1,0)
VAFCMSG4 ;ALB/JRP-MESSAGE BUILDER UTILITIES ;26-MAR-2003
"RTN","VAFCMSG4",2,0)
 ;;5.3;Registration;**91,209,149,415,484,508**;Jun 06, 1996
"RTN","VAFCMSG4",3,0)
 ;
"RTN","VAFCMSG4",4,0)
SEGMENTS(EVNTTYPE,SEGARRY) ;Build list of HL7 segments for given event type
"RTN","VAFCMSG4",5,0)
 ;
"RTN","VAFCMSG4",6,0)
 ;Input  : EVNTTYPE - Event type to build list for (Defaults to A08)
"RTN","VAFCMSG4",7,0)
 ;                    Currently supported events:
"RTN","VAFCMSG4",8,0)
 ;                      A04, A08, A28
"RTN","VAFCMSG4",9,0)
 ;         SEGARRY - Array to place output in (full global reference)
"RTN","VAFCMSG4",10,0)
 ;                   (Defaults to ^TMP("VAFC SEGMENTS",$J))
"RTN","VAFCMSG4",11,0)
 ;Output : None
"RTN","VAFCMSG4",12,0)
 ;           SEGARRY(Seq,Name) = Fields
"RTN","VAFCMSG4",13,0)
 ;           SEGARRY(Name,"BLD") = Executable code to build HL7 segment
"RTN","VAFCMSG4",14,0)
 ;           SEGARRY(Name,"CPY") = Executable code to copy HL7 segment
"RTN","VAFCMSG4",15,0)
 ;                                 into HL7 message
"RTN","VAFCMSG4",16,0)
 ;           SEGARRY(Name,"DEL") = Executable code to delete variables
"RTN","VAFCMSG4",17,0)
 ;                                 used to build HL7 segment
"RTN","VAFCMSG4",18,0)
 ;             Seq - Sequencing number to order the segments as
"RTN","VAFCMSG4",19,0)
 ;                   they should be placed in the HL7 message
"RTN","VAFCMSG4",20,0)
 ;             Name - Name of HL7 segment
"RTN","VAFCMSG4",21,0)
 ;             Fields - List of fields used by segment
"RTN","VAFCMSG4",22,0)
 ;                      VAFSTR would be set to this value
"RTN","VAFCMSG4",23,0)
 ;Notes  : MSH segment is not included
"RTN","VAFCMSG4",24,0)
 ;       : SEGARRY will be KILLed on entry
"RTN","VAFCMSG4",25,0)
 ;
"RTN","VAFCMSG4",26,0)
 ;Check input
"RTN","VAFCMSG4",27,0)
 S EVNTTYPE=$G(EVNTTYPE)
"RTN","VAFCMSG4",28,0)
 S:(EVNTTYPE="") EVNTTYPE="A08"
"RTN","VAFCMSG4",29,0)
 S SEGARRY=$G(SEGARRY)
"RTN","VAFCMSG4",30,0)
 S:(SEGARRY="") SEGARRY="^TMP(""VAFC SEGMENTS"","_$J_")"
"RTN","VAFCMSG4",31,0)
 K @SEGARRY
"RTN","VAFCMSG4",32,0)
 ;Declare variables
"RTN","VAFCMSG4",33,0)
 N X,OK
"RTN","VAFCMSG4",34,0)
 ;Check for supported event
"RTN","VAFCMSG4",35,0)
 S OK=0
"RTN","VAFCMSG4",36,0)
 F X="A04","A08","A28" I X=EVNTTYPE S OK=1 Q
"RTN","VAFCMSG4",37,0)
 Q:('OK)
"RTN","VAFCMSG4",38,0)
 ;Segments used by A04, A08, A28
"RTN","VAFCMSG4",39,0)
 S @SEGARRY@(1,"EVN")="1,2,4"
"RTN","VAFCMSG4",40,0)
 S @SEGARRY@("EVN","BLD")="D BLDEVN^VAFCMSG3"
"RTN","VAFCMSG4",41,0)
 S @SEGARRY@("EVN","CPY")="D CPYEVN^VAFCMSG3"
"RTN","VAFCMSG4",42,0)
 S @SEGARRY@("EVN","DEL")="D DELEVN^VAFCMSG3"
"RTN","VAFCMSG4",43,0)
 S @SEGARRY@(2,"PID")=$$COMMANUM^VAFCADT2(1,9)_",10B,11PC,"_$$COMMANUM^VAFCADT2(13,21)_",22B,"_$$COMMANUM^VAFCADT2(23,30)
"RTN","VAFCMSG4",44,0)
 S @SEGARRY@("PID","BLD")="D BLDPID^VAFCMSG3"
"RTN","VAFCMSG4",45,0)
 S @SEGARRY@("PID","CPY")="D CPYPID^VAFCMSG3"
"RTN","VAFCMSG4",46,0)
 S @SEGARRY@("PID","DEL")="D DELPID^VAFCMSG3"
"RTN","VAFCMSG4",47,0)
 S @SEGARRY@(3,"PD1")=$$COMMANUM^VAFCADT2(1,12)
"RTN","VAFCMSG4",48,0)
 S @SEGARRY@("PD1","BLD")="D BLDPD1^VAFCMSG3"
"RTN","VAFCMSG4",49,0)
 S @SEGARRY@("PD1","CPY")="D CPYPD1^VAFCMSG3"
"RTN","VAFCMSG4",50,0)
 S @SEGARRY@("PD1","DEL")="D DELPD1^VAFCMSG3"
"RTN","VAFCMSG4",51,0)
 S @SEGARRY@(4,"PV1")="2,3,6,7,10,18,44,45,50"
"RTN","VAFCMSG4",52,0)
 S @SEGARRY@("PV1","BLD")="D BLDPV1^VAFCMSG3"
"RTN","VAFCMSG4",53,0)
 S @SEGARRY@("PV1","CPY")="D CPYPV1^VAFCMSG3"
"RTN","VAFCMSG4",54,0)
 S @SEGARRY@("PV1","DEL")="D DELPV1^VAFCMSG3"
"RTN","VAFCMSG4",55,0)
 S @SEGARRY@(5,"ROL")="1,2,3,4"
"RTN","VAFCMSG4",56,0)
 S @SEGARRY@("ROL","BLD")="D BLDROL^VAFCMSG3"
"RTN","VAFCMSG4",57,0)
 S @SEGARRY@("ROL","CPY")="D CPYROL^VAFCMSG3"
"RTN","VAFCMSG4",58,0)
 S @SEGARRY@("ROL","DEL")="D DELROL^VAFCMSG3"
"RTN","VAFCMSG4",59,0)
 S @SEGARRY@(6,"OBX")=""
"RTN","VAFCMSG4",60,0)
 S @SEGARRY@("OBX","BLD")="D BLDOBX^VAFCMSG3"
"RTN","VAFCMSG4",61,0)
 S @SEGARRY@("OBX","CPY")="D CPYOBX^VAFCMSG3"
"RTN","VAFCMSG4",62,0)
 S @SEGARRY@("OBX","DEL")="D DELOBX^VAFCMSG3"
"RTN","VAFCMSG4",63,0)
 S @SEGARRY@(7,"ZPD")=$$COMMANUM^VAFCADT2(1,21)
"RTN","VAFCMSG4",64,0)
 S @SEGARRY@("ZPD","BLD")="D BLDZPD^VAFCMSG3"
"RTN","VAFCMSG4",65,0)
 S @SEGARRY@("ZPD","CPY")="D CPYZPD^VAFCMSG3"
"RTN","VAFCMSG4",66,0)
 S @SEGARRY@("ZPD","DEL")="D DELZPD^VAFCMSG3"
"RTN","VAFCMSG4",67,0)
 S @SEGARRY@(8,"ZSP")="1,2,3,4,5"
"RTN","VAFCMSG4",68,0)
0 S @SEGARRY@("ZSP","BLD")="D BLDZSP^VAFCMSG3"
"RTN","VAFCMSG4",69,0)
 S @SEGARRY@("ZSP","CPY")="D CPYZSP^VAFCMSG3"
"RTN","VAFCMSG4",70,0)
 S @SEGARRY@("ZSP","DEL")="D DELZSP^VAFCMSG3"
"RTN","VAFCMSG4",71,0)
 S @SEGARRY@(9,"ZEL")=$$COMMANUM^VAFCADT2(1,22)
"RTN","VAFCMSG4",72,0)
 S @SEGARRY@("ZEL","BLD")="D BLDZEL^VAFCMSG3"
"RTN","VAFCMSG4",73,0)
 S @SEGARRY@("ZEL","CPY")="D CPYZEL^VAFCMSG3"
"RTN","VAFCMSG4",74,0)
 S @SEGARRY@("ZEL","DEL")="D DELZEL^VAFCMSG3"
"RTN","VAFCMSG4",75,0)
 S @SEGARRY@(10,"ZCT")="1,2,3,4,5,6,7,8,9"
"RTN","VAFCMSG4",76,0)
 S @SEGARRY@("ZCT","BLD")="D BLDZCT^VAFCMSG3"
"RTN","VAFCMSG4",77,0)
 S @SEGARRY@("ZCT","CPY")="D CPYZCT^VAFCMSG3"
"RTN","VAFCMSG4",78,0)
 S @SEGARRY@("ZCT","DEL")="D DELZCT^VAFCMSG3"
"RTN","VAFCMSG4",79,0)
 S @SEGARRY@(11,"ZEM")="1,2,3,4,5,6,7,8"
"RTN","VAFCMSG4",80,0)
 S @SEGARRY@("ZEM","BLD")="D BLDZEM^VAFCMSG3"
"RTN","VAFCMSG4",81,0)
 S @SEGARRY@("ZEM","CPY")="D CPYZEM^VAFCMSG3"
"RTN","VAFCMSG4",82,0)
 S @SEGARRY@("ZEM","DEL")="D DELZEM^VAFCMSG3"
"RTN","VAFCMSG4",83,0)
 S @SEGARRY@(12,"ZFF")=""
"RTN","VAFCMSG4",84,0)
 S @SEGARRY@("ZFF","BLD")="D BLDZFF^VAFCMSG3"
"RTN","VAFCMSG4",85,0)
 S @SEGARRY@("ZFF","CPY")="D CPYZFF^VAFCMSG3"
"RTN","VAFCMSG4",86,0)
 S @SEGARRY@("ZFF","DEL")="D DELZFF^VAFCMSG3"
"RTN","VAFCMSG4",87,0)
 S @SEGARRY@(13,"ZIR")=$$COMMANUM^VAFCADT2(1,13)
"RTN","VAFCMSG4",88,0)
 S @SEGARRY@("ZIR","BLD")="D BLDZIR^VAFCMSG3"
"RTN","VAFCMSG4",89,0)
 S @SEGARRY@("ZIR","CPY")="D CPYZIR^VAFCMSG3"
"RTN","VAFCMSG4",90,0)
 S @SEGARRY@("ZIR","DEL")="D DELZIR^VAFCMSG3"
"RTN","VAFCMSG4",91,0)
 S @SEGARRY@(14,"ZEN")=$$COMMANUM^VAFCADT2(1,10)
"RTN","VAFCMSG4",92,0)
 S @SEGARRY@("ZEN","BLD")="D BLDZEN^VAFCMSG3"
"RTN","VAFCMSG4",93,0)
 S @SEGARRY@("ZEN","CPY")="D CPYZEN^VAFCMSG3"
"RTN","VAFCMSG4",94,0)
 S @SEGARRY@("ZEN","DEL")="D DELZEN^VAFCMSG3"
"RTN","VAFCMSG4",95,0)
 Q
"RTN","VAFCPID")
0^5^B12777319
"RTN","VAFCPID",1,0)
VAFCPID ;ALB/MLI,PKE-Create generic PID segment ; 21 Nov 2002  3:13 PM
"RTN","VAFCPID",2,0)
 ;;5.3;Registration;**91,149,190,415,508**;Aug 13, 1993
"RTN","VAFCPID",3,0)
 ;
"RTN","VAFCPID",4,0)
 ; This routine returns the HL7 defined PID segment with its
"RTN","VAFCPID",5,0)
 ; mappings to DHCP PATIENT file fields.
"RTN","VAFCPID",6,0)
 ;
"RTN","VAFCPID",7,0)
EN(DFN,VAFSTR,VAFNUM) ; returns PID segment
"RTN","VAFCPID",8,0)
 ;  Input - DFN as internal entry number of the PATIENT file
"RTN","VAFCPID",9,0)
 ;          VAFSTR as string of fields requested separated by commas
"RTN","VAFCPID",10,0)
 ;          VAFNUM as sequential number for SET ID (default=1)
"RTN","VAFCPID",11,0)
 ;
"RTN","VAFCPID",12,0)
 ;      ****Also assumes all HL7 variables returned from****
"RTN","VAFCPID",13,0)
 ;          INIT^HLTRANS are defined
"RTN","VAFCPID",14,0)
 ;
"RTN","VAFCPID",15,0)
 ; Output - String containing the desired components of the PID segment
"RTN","VAFCPID",16,0)
 ;          VAFPID(n) - if the string is longer than 245, the remaining
"RTN","VAFCPID",17,0)
 ;                      characters will be returned in VAFPID(n) where
"RTN","VAFCPID",18,0)
 ;                      n is a sequential number beginning with 1
"RTN","VAFCPID",19,0)
 ;
"RTN","VAFCPID",20,0)
 ; WARNING: This routine makes external calls to VADPT.  Non-namespaced
"RTN","VAFCPID",21,0)
 ;          variables may be altered.
"RTN","VAFCPID",22,0)
 ;
"RTN","VAFCPID",23,0)
 N I,VAFY,VA,VADM,X,X1,Y,OUTPUT,DGNAME,VAPA ; calls VADPT...have to NEW
"RTN","VAFCPID",24,0)
 S VAFSTR=$G(VAFSTR) ; if not defined, just return required fields
"RTN","VAFCPID",25,0)
 S DFN=$G(DFN)
"RTN","VAFCPID",26,0)
 I DFN']"" G QUIT
"RTN","VAFCPID",27,0)
 ;Get demographics and permanent address
"RTN","VAFCPID",28,0)
 S VAPA("P")="" D 4^VADPT
"RTN","VAFCPID",29,0)
 S VAFSTR=","_VAFSTR_","
"RTN","VAFCPID",30,0)
 K VAFY
"RTN","VAFCPID",31,0)
 ;Set ID (#1)
"RTN","VAFCPID",32,0)
 I VAFSTR[",1," S VAFY(1)=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFCPID",33,0)
 ;External ID (#2 - always included)
"RTN","VAFCPID",34,0)
 S X=$$GETICN^MPIF001(DFN) S:(+X=-1) X="" S VAFY(2)=$S(X]"":X,1:HLQ)
"RTN","VAFCPID",35,0)
 ;Patient ID (#3 - req)
"RTN","VAFCPID",36,0)
 S VAFY(3)=$$M10^HLFNC(DFN)
"RTN","VAFCPID",37,0)
 ;Alternate ID (#4)
"RTN","VAFCPID",38,0)
 I VAFSTR[",4," S X=$G(VA("BID")),VAFY(4)=$S(X]"":X,1:HLQ)
"RTN","VAFCPID",39,0)
 ;Name (#5 - req)
"RTN","VAFCPID",40,0)
 S DGNAME("FILE")=2,DGNAME("IENS")=DFN,DGNAME("FIELD")=.01
"RTN","VAFCPID",41,0)
 S X=$$HLNAME^XLFNAME(.DGNAME,"",$E(HLECH)),VAFY(5)=$S(X]"":X,1:HLQ)
"RTN","VAFCPID",42,0)
 ;Mother's maiden name (#6)
"RTN","VAFCPID",43,0)
 I VAFSTR[",6," S X=$P($G(^DPT(DFN,.24)),"^",3),VAFY(6)=$S(X]"":X,1:HLQ)
"RTN","VAFCPID",44,0)
 ;Date of birth (#7)
"RTN","VAFCPID",45,0)
 I VAFSTR[",7," S VAFY(7)=$$HLDATE^HLFNC(+VADM(3))
"RTN","VAFCPID",46,0)
 ;Sex (#8)
"RTN","VAFCPID",47,0)
 I VAFSTR[",8," S X=$P(VADM(5),"^",1),VAFY(8)=$S("^M^F^"[("^"_X_"^"):X,1:"U")
"RTN","VAFCPID",48,0)
 ;Race (#10)
"RTN","VAFCPID",49,0)
 I VAFSTR[10 D
"RTN","VAFCPID",50,0)
 .N HOW
"RTN","VAFCPID",51,0)
 .S Y=$F(VAFSTR,"10")
"RTN","VAFCPID",52,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFCPID",53,0)
 .D SEQ10^VAFHLPI1(HOW,HLQ)
"RTN","VAFCPID",54,0)
 ;Address (#11)
"RTN","VAFCPID",55,0)
 I VAFSTR[11 D
"RTN","VAFCPID",56,0)
 .N HOW
"RTN","VAFCPID",57,0)
 .S Y=$F(VAFSTR,"11")
"RTN","VAFCPID",58,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFCPID",59,0)
 .D SEQ11^VAFHLPI2(HOW,HLQ)
"RTN","VAFCPID",60,0)
 ;County (#12)
"RTN","VAFCPID",61,0)
 I VAFSTR[12 S X1=$P($G(^DIC(5,+$G(VAPA(5)),1,+$G(VAPA(7)),0)),"^",3),VAFY(12)=$S(X1]"":X1,1:HLQ)
"RTN","VAFCPID",62,0)
 S X=$G(^DPT(DFN,.13))
"RTN","VAFCPID",63,0)
 ;Home phone (#13)
"RTN","VAFCPID",64,0)
 I VAFSTR[13 S X1=$$HLPHONE^HLFNC($P(X,"^",1)),VAFY(13)=$S(X1]"":X1,1:HLQ)
"RTN","VAFCPID",65,0)
 ;Business phone (#14)
"RTN","VAFCPID",66,0)
 I VAFSTR[14 S X1=$$HLPHONE^HLFNC($P(X,"^",2)),VAFY(14)=$S(X1]"":X1,1:HLQ)
"RTN","VAFCPID",67,0)
 ;Marital status (#16)
"RTN","VAFCPID",68,0)
 I VAFSTR[16 S X=$P($G(^DIC(11,+VADM(10),0)),"^",3),VAFY(16)=$S(X="M":"M",X="N":"S",X="S":"A",X]"":X,1:HLQ)
"RTN","VAFCPID",69,0)
 ;Religious preference (#17) (if blank send 29 (UNKNOWN))
"RTN","VAFCPID",70,0)
 I VAFSTR[17 S X=$P($G(^DIC(13,+VADM(9),0)),"^",4),VAFY(17)=$S(X]"":X,1:29)
"RTN","VAFCPID",71,0)
 ;SSN (#19)
"RTN","VAFCPID",72,0)
 I VAFSTR[19 S X=$P(VADM(2),"^",1),VAFY(19)=$S(X]"":X,1:HLQ)
"RTN","VAFCPID",73,0)
 ;Ethnicity (#22)
"RTN","VAFCPID",74,0)
 I VAFSTR[22 D
"RTN","VAFCPID",75,0)
 .N HOW
"RTN","VAFCPID",76,0)
 .S Y=$F(VAFSTR,"22")
"RTN","VAFCPID",77,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFCPID",78,0)
 .D SEQ22^VAFHLPI1(HOW,HLQ)
"RTN","VAFCPID",79,0)
 ;Birth place (#23)
"RTN","VAFCPID",80,0)
 I VAFSTR[23 D
"RTN","VAFCPID",81,0)
 .N DGBC,DGBS
"RTN","VAFCPID",82,0)
 .S DGBC=$$GET1^DIQ(2,DFN,.092,"I")
"RTN","VAFCPID",83,0)
 .S DGBS=$$GET1^DIQ(2,DFN,.093,"E")
"RTN","VAFCPID",84,0)
 .S VAFY(23)=DGBC_" "_DGBS
"RTN","VAFCPID",85,0)
 ;Date of death (#29) & Death indicator (#30) (always included if dead)
"RTN","VAFCPID",86,0)
 S X=+VADM(6) I X D
"RTN","VAFCPID",87,0)
 .S VAFY(29)=$$HLDATE^HLFNC(X)
"RTN","VAFCPID",88,0)
 .S VAFY(30)="Y"
"RTN","VAFCPID",89,0)
 ;
"RTN","VAFCPID",90,0)
QUIT D KVA^VADPT
"RTN","VAFCPID",91,0)
 D MAKEIT^VAFHLU("PID",.VAFY,.OUTPUT,.VAFPID)
"RTN","VAFCPID",92,0)
 Q OUTPUT
"RTN","VAFCPID",93,0)
 ;
"RTN","VAFCPID",94,0)
ADDR(VAFADDR,VAFCOUNT) ;Return HL7 address
"RTN","VAFCPID",95,0)
 ; Input  - VAFADDR as address in format:
"RTN","VAFCPID",96,0)
 ;            line1^line2^line3^city^state^zip+4
"RTN","VAFCPID",97,0)
 ;          VAFCOUNT as internal value of county (optional)
"RTN","VAFCPID",98,0)
 ; Output - HL7 v2.3 formatted Address_HLFS_County Code
"RTN","VAFCPID",99,0)
 ;
"RTN","VAFCPID",100,0)
 ;      ****Also assumes all HL7 variables returned from****
"RTN","VAFCPID",101,0)
 ;          INIT^HLTRANS are defined
"RTN","VAFCPID",102,0)
 ;
"RTN","VAFCPID",103,0)
 N X,Y,Z S X=$E(HLECH)
"RTN","VAFCPID",104,0)
 ;Street address (line 1)
"RTN","VAFCPID",105,0)
 S $P(Y,X,1)=$P(VAFADDR,"^",1)
"RTN","VAFCPID",106,0)
 ;Other designation (line 2)
"RTN","VAFCPID",107,0)
 S $P(Y,X,2)=$P(VAFADDR,"^",2)
"RTN","VAFCPID",108,0)
 ;City
"RTN","VAFCPID",109,0)
 S $P(Y,X,3)=$P(VAFADDR,"^",4)
"RTN","VAFCPID",110,0)
 ;State
"RTN","VAFCPID",111,0)
 S $P(Y,X,4)=$P($G(^DIC(5,+$P(VAFADDR,"^",5),0)),"^",2)
"RTN","VAFCPID",112,0)
 ;Zip
"RTN","VAFCPID",113,0)
 S $P(Y,X,5)=$P(VAFADDR,"^",6)
"RTN","VAFCPID",114,0)
 ;Other geographic designation (line 3)
"RTN","VAFCPID",115,0)
 S $P(Y,X,8)=$P(VAFADDR,"^",3)
"RTN","VAFCPID",116,0)
 ;County
"RTN","VAFCPID",117,0)
 S $P(Y,X,9)=$P($G(^DIC(5,+$P(VAFADDR,"^",5),1,+$G(VAFCOUNT),0)),"^",3)
"RTN","VAFCPID",118,0)
 F Z=1,2,3,4,5,8,9 I $P(Y,X,Z)="" S $P(Y,X,Z)=HLQ
"RTN","VAFCPID",119,0)
 I $G(VAFCOUNT) D
"RTN","VAFCPID",120,0)
 .S $P(Y,HLFS,2)=$P(Y,X,9)
"RTN","VAFCPID",121,0)
 Q Y
"RTN","VAFHLPI2")
0^7^B10042427
"RTN","VAFHLPI2",1,0)
VAFHLPI2 ;ALB/BWF - EXTENSION OF PID SEGMENT BUILDER ;23-APR-2003
"RTN","VAFHLPI2",2,0)
 ;;5.3;Registration;**508**;Aug 13, 1993
"RTN","VAFHLPI2",3,0)
 ;
"RTN","VAFHLPI2",4,0)
 Q
"RTN","VAFHLPI2",5,0)
 ;
"RTN","VAFHLPI2",6,0)
SEQ11(TYPE,HLQ) ;Patient Address (seq #11)
"RTN","VAFHLPI2",7,0)
 ;
"RTN","VAFHLPI2",8,0)
 ;Input  : TYPE - Qualifiers denoting which type of address to return
"RTN","VAFHLPI2",9,0)
 ;                P = Include permanent address
"RTN","VAFHLPI2",10,0)
 ;                C = Include confidential address
"RTN","VAFHLPI2",11,0)
 ;               "" = Only return permanent address (default)
"RTN","VAFHLPI2",12,0)
 ;         HLQ - HL7 null designation
"RTN","VAFHLPI2",13,0)
 ;Assumed: VAPA() - Output of call to ADD^VADPT
"RTN","VAFHLPI2",14,0)
 ;Output : None - sets nodes in array VAFY
"RTN","VAFHLPI2",15,0)
 ;         VAFY(11,1,1..X) = Primary address
"RTN","VAFHLPI2",16,0)
 ;         VAFY(11,2..X,1..X) = Confidential Address
"RTN","VAFHLPI2",17,0)
 ;Notes  : Validity and existance of input is assumed
"RTN","VAFHLPI2",18,0)
 ;       : Assumes no individual component is greater than 245
"RTN","VAFHLPI2",19,0)
 ;         characters long
"RTN","VAFHLPI2",20,0)
 ;       : If TYPE = "", line 3 of the permanent address will be added
"RTN","VAFHLPI2",21,0)
 ;         to the end of line 2 (instead of being returned separately)
"RTN","VAFHLPI2",22,0)
 ;
"RTN","VAFHLPI2",23,0)
 ;Declare variables
"RTN","VAFHLPI2",24,0)
 N NODE
"RTN","VAFHLPI2",25,0)
 K VAFY(11)
"RTN","VAFHLPI2",26,0)
 I '$D(HLQ) S HLQ=$C(34,34)
"RTN","VAFHLPI2",27,0)
 S TYPE=$G(TYPE)
"RTN","VAFHLPI2",28,0)
 I (TYPE'["P"),(TYPE'["C") S TYPE=""
"RTN","VAFHLPI2",29,0)
 S NODE=1
"RTN","VAFHLPI2",30,0)
 I TYPE="" D PERMADD
"RTN","VAFHLPI2",31,0)
 I (TYPE["P") D PERMADD
"RTN","VAFHLPI2",32,0)
 I (TYPE["C") D CONFADD
"RTN","VAFHLPI2",33,0)
 Q
"RTN","VAFHLPI2",34,0)
 ;
"RTN","VAFHLPI2",35,0)
PERMADD ; Put permanent address into output array
"RTN","VAFHLPI2",36,0)
 N X
"RTN","VAFHLPI2",37,0)
 S VAFY(11,NODE,1)=$S(VAPA(1)'="":VAPA(1),1:HLQ)
"RTN","VAFHLPI2",38,0)
 S VAFY(11,NODE,2)=$S(VAPA(2)'="":VAPA(2),1:HLQ)
"RTN","VAFHLPI2",39,0)
 I TYPE'["P" S X=VAPA(2)_" "_VAPA(3),VAFY(11,NODE,2)=$S(X'=" ":X,1:HLQ)
"RTN","VAFHLPI2",40,0)
 S VAFY(11,NODE,3)=$S(VAPA(4)'="":VAPA(4),1:HLQ)
"RTN","VAFHLPI2",41,0)
 S X=$P($G(^DIC(5,+VAPA(5),0)),"^",2)
"RTN","VAFHLPI2",42,0)
 S VAFY(11,NODE,4)=$S(X'="":X,1:HLQ)
"RTN","VAFHLPI2",43,0)
 S VAFY(11,NODE,5)=$S($P(VAPA(6),U,1)'="":$P(VAPA(6),U,1),1:HLQ)
"RTN","VAFHLPI2",44,0)
 I TYPE["P" D
"RTN","VAFHLPI2",45,0)
 .S VAFY(11,NODE,6)=""
"RTN","VAFHLPI2",46,0)
 .S VAFY(11,NODE,7)="P"
"RTN","VAFHLPI2",47,0)
 .S VAFY(11,NODE,8)=$S(VAPA(3)'="":VAPA(3),1:HLQ)
"RTN","VAFHLPI2",48,0)
 .S X=$P($G(^DIC(5,+VAPA(5),1,+VAPA(7),0)),"^",3)
"RTN","VAFHLPI2",49,0)
 .S VAFY(11,NODE,9)=$S(X'="":X,1:HLQ)
"RTN","VAFHLPI2",50,0)
 S NODE=NODE+1
"RTN","VAFHLPI2",51,0)
 Q
"RTN","VAFHLPI2",52,0)
CONFADD ;Put confidential address into output array
"RTN","VAFHLPI2",53,0)
 N LOOP,ADDTYPE,CSTATE,CCOUNTY,CSTDATE,CENDATE
"RTN","VAFHLPI2",54,0)
 S CSTATE=$P($G(^DIC(5,+VAPA(17),0)),"^",2)
"RTN","VAFHLPI2",55,0)
 S CCOUNTY=$P($G(^DIC(5,+VAPA(17),1,+VAPA(19),0)),"^",3)
"RTN","VAFHLPI2",56,0)
 S CSTDATE=$$HLDATE^HLFNC($P(VAPA(20),"^",1))
"RTN","VAFHLPI2",57,0)
 S CENDATE=$$HLDATE^HLFNC($P(VAPA(21),"^",1))
"RTN","VAFHLPI2",58,0)
 F ADDTYPE=1:1:5 D
"RTN","VAFHLPI2",59,0)
 .I +VAPA(12) I $P($G(VAPA(22,ADDTYPE)),"^",3)="Y" D CONFACT Q
"RTN","VAFHLPI2",60,0)
 .D CONFIN
"RTN","VAFHLPI2",61,0)
 Q
"RTN","VAFHLPI2",62,0)
CONFACT ;Active confidential address type
"RTN","VAFHLPI2",63,0)
 S VAFY(11,NODE,1)=$S(VAPA(13)'="":VAPA(13),1:HLQ)
"RTN","VAFHLPI2",64,0)
 S VAFY(11,NODE,2)=$S(VAPA(14)'="":VAPA(14),1:HLQ)
"RTN","VAFHLPI2",65,0)
 S VAFY(11,NODE,3)=$S(VAPA(16)'="":VAPA(16),1:HLQ)
"RTN","VAFHLPI2",66,0)
 S VAFY(11,NODE,4)=$S(CSTATE'="":CSTATE,1:HLQ)
"RTN","VAFHLPI2",67,0)
 S X=$P(VAPA(18),"^",1),VAFY(11,NODE,5)=$S(X'="":X,1:HLQ)
"RTN","VAFHLPI2",68,0)
 S VAFY(11,NODE,6)=""
"RTN","VAFHLPI2",69,0)
 S VAFY(11,NODE,7)=$S(ADDTYPE=1:"VACAE",ADDTYPE=2:"VACAA",ADDTYPE=3:"VACAC",ADDTYPE=4:"VACAM",ADDTYPE=5:"VACAO",1:HLQ)
"RTN","VAFHLPI2",70,0)
 S VAFY(11,NODE,8)=$S(VAPA(15)'="":VAPA(15),1:HLQ)
"RTN","VAFHLPI2",71,0)
 S VAFY(11,NODE,9)=$S(CCOUNTY'="":CCOUNTY,1:HLQ)
"RTN","VAFHLPI2",72,0)
 S VAFY(11,NODE,10)=""
"RTN","VAFHLPI2",73,0)
 S VAFY(11,NODE,11)=""
"RTN","VAFHLPI2",74,0)
 S VAFY(11,NODE,12,1)=$S(CSTDATE'="":CSTDATE,1:HLQ)
"RTN","VAFHLPI2",75,0)
 S VAFY(11,NODE,12,2)=$S(CENDATE'="":CENDATE,1:HLQ)
"RTN","VAFHLPI2",76,0)
 S NODE=NODE+1
"RTN","VAFHLPI2",77,0)
 Q
"RTN","VAFHLPI2",78,0)
CONFIN ;Inactive confidential address type
"RTN","VAFHLPI2",79,0)
 N X
"RTN","VAFHLPI2",80,0)
 F X=1,2,3,4,5,8,9 S VAFY(11,NODE,X)=HLQ
"RTN","VAFHLPI2",81,0)
 F X=6,10,11 S VAFY(11,NODE,X)=""
"RTN","VAFHLPI2",82,0)
 S VAFY(11,NODE,7)=$S(ADDTYPE=1:"VACAE",ADDTYPE=2:"VACAA",ADDTYPE=3:"VACAC",ADDTYPE=4:"VACAM",ADDTYPE=5:"VACAO",1:HLQ)
"RTN","VAFHLPI2",83,0)
 S VAFY(11,NODE,12,1)=HLQ
"RTN","VAFHLPI2",84,0)
 S VAFY(11,NODE,12,2)=HLQ
"RTN","VAFHLPI2",85,0)
 S NODE=NODE+1
"RTN","VAFHLPI2",86,0)
 Q
"RTN","VAFHLPID")
0^6^B9694943
"RTN","VAFHLPID",1,0)
VAFHLPID ;ALB/MLI/ESD - Create generic PID segment ; 21 Nov 2002  3:13 PM
"RTN","VAFHLPID",2,0)
 ;;5.3;Registration;**68,94,415,508**;Aug 13, 1993
"RTN","VAFHLPID",3,0)
 ;
"RTN","VAFHLPID",4,0)
 ; This routine returns the HL7 defined PID segment with its
"RTN","VAFHLPID",5,0)
 ; mappings to DHCP PATIENT file fields.
"RTN","VAFHLPID",6,0)
 ;
"RTN","VAFHLPID",7,0)
EN(DFN,VAFSTR,VAFNUM,PTID) ; returns PID segment
"RTN","VAFHLPID",8,0)
 ;  Input - DFN as internal entry number of the PATIENT file
"RTN","VAFHLPID",9,0)
 ;          VAFSTR as string of fields requested separated by commas
"RTN","VAFHLPID",10,0)
 ;          VAFNUM as sequential number for SET ID (default=1)
"RTN","VAFHLPID",11,0)
 ;          PTID is flag denoting which Patient ID (seq 3) to use
"RTN","VAFHLPID",12,0)
 ;              0 - Use DFN formatted as data type CK (default)
"RTN","VAFHLPID",13,0)
 ;              1 - Use ICN
"RTN","VAFHLPID",14,0)
 ;              2 - Use DFN formatted as data type CX
"RTN","VAFHLPID",15,0)
 ;              3 - Use SSN (with dashes)
"RTN","VAFHLPID",16,0)
 ;
"RTN","VAFHLPID",17,0)
 ;      ****Also assumes all HL7 variables returned from****
"RTN","VAFHLPID",18,0)
 ;          INIT^HLTRANS are defined
"RTN","VAFHLPID",19,0)
 ;
"RTN","VAFHLPID",20,0)
 ; Output - String containing the desired components of the PID segment
"RTN","VAFHLPID",21,0)
 ;          VAFPID(n) - if the string is longer than 245, the remaining
"RTN","VAFHLPID",22,0)
 ;                      characters will be returned in VAFPID(n) where
"RTN","VAFHLPID",23,0)
 ;                      n is a sequential number beginning with 1
"RTN","VAFHLPID",24,0)
 ;
"RTN","VAFHLPID",25,0)
 ; WARNING: This routine makes external calls to VADPT.  Non-namespaced
"RTN","VAFHLPID",26,0)
 ;          variables may be altered.
"RTN","VAFHLPID",27,0)
 ;
"RTN","VAFHLPID",28,0)
 N I,VAFY,VA,VADM,X,X1,Y,OUTPUT,DGNAME,VAPA ; calls VADPT...have to NEW
"RTN","VAFHLPID",29,0)
 S VAFSTR=$G(VAFSTR) ; if not defined, just return required fields
"RTN","VAFHLPID",30,0)
 S DFN=$G(DFN)
"RTN","VAFHLPID",31,0)
 I DFN']"" G QUIT
"RTN","VAFHLPID",32,0)
 ;Get demographics and permanent address
"RTN","VAFHLPID",33,0)
 S VAPA("P")="" D 4^VADPT
"RTN","VAFHLPID",34,0)
 S VAFSTR=","_VAFSTR_","
"RTN","VAFHLPID",35,0)
 K VAFY
"RTN","VAFHLPID",36,0)
 ;Set ID (#1)
"RTN","VAFHLPID",37,0)
 I VAFSTR[",1," S VAFY(1)=$S($G(VAFNUM):VAFNUM,1:1)
"RTN","VAFHLPID",38,0)
 ;External ID (#2)
"RTN","VAFHLPID",39,0)
 I VAFSTR[",2," S X=$G(VA("PID")),VAFY(2)=$S(X]"":$$M10^HLFNC(X),1:HLQ)
"RTN","VAFHLPID",40,0)
 ;Patient ID (#3 - req)
"RTN","VAFHLPID",41,0)
 S PTID=+$G(PTID)
"RTN","VAFHLPID",42,0)
 I 'PTID S VAFY(3)=$$M10^HLFNC(DFN)
"RTN","VAFHLPID",43,0)
 I PTID D
"RTN","VAFHLPID",44,0)
 .S X=$S(PTID=1:"NI",PTID=2:"PI",PTID=3:"SS")
"RTN","VAFHLPID",45,0)
 .S VAFY(3)=$$SEQ3^VAFHLPI1(DFN,X,HLECH,HLQ)
"RTN","VAFHLPID",46,0)
 ;Alternate ID (#4)
"RTN","VAFHLPID",47,0)
 I VAFSTR[",4," S X=$G(VA("BID")),VAFY(4)=$S(X]"":X,1:HLQ)
"RTN","VAFHLPID",48,0)
 ;Name (#5 - req)
"RTN","VAFHLPID",49,0)
 S DGNAME("FILE")=2,DGNAME("IENS")=DFN,DGNAME("FIELD")=.01
"RTN","VAFHLPID",50,0)
 S X=$$HLNAME^XLFNAME(.DGNAME,"",$E(HLECH)),VAFY(5)=$S(X]"":X,1:HLQ)
"RTN","VAFHLPID",51,0)
 ;Mother's maiden name (#6)
"RTN","VAFHLPID",52,0)
 I VAFSTR[",6," S X=$P($G(^DPT(DFN,.24)),"^",3),VAFY(6)=$S(X]"":X,1:HLQ)
"RTN","VAFHLPID",53,0)
 ;Date of birth (#7)
"RTN","VAFHLPID",54,0)
 I VAFSTR[",7," S VAFY(7)=$$HLDATE^HLFNC(+VADM(3))
"RTN","VAFHLPID",55,0)
 ;Sex (#8)
"RTN","VAFHLPID",56,0)
 I VAFSTR[",8," S X=$P(VADM(5),"^",1),VAFY(8)=$S("^M^F^"[("^"_X_"^"):X,1:"U")
"RTN","VAFHLPID",57,0)
 ;Race (#10)
"RTN","VAFHLPID",58,0)
 I VAFSTR[10 D
"RTN","VAFHLPID",59,0)
 .N HOW
"RTN","VAFHLPID",60,0)
 .S Y=$F(VAFSTR,"10")
"RTN","VAFHLPID",61,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFHLPID",62,0)
 .D SEQ10^VAFHLPI1(HOW,HLQ)
"RTN","VAFHLPID",63,0)
 ;Address (#11)
"RTN","VAFHLPID",64,0)
 I VAFSTR[11 D
"RTN","VAFHLPID",65,0)
 .N HOW
"RTN","VAFHLPID",66,0)
 .S Y=$F(VAFSTR,"11")
"RTN","VAFHLPID",67,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFHLPID",68,0)
 .D SEQ11^VAFHLPI2(HOW,HLQ)
"RTN","VAFHLPID",69,0)
 ;County (#12)
"RTN","VAFHLPID",70,0)
 I VAFSTR[12 S X1=$P($G(^DIC(5,+$G(VAPA(5)),1,+$G(VAPA(7)),0)),"^",3),VAFY(12)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLPID",71,0)
 S X=$G(^DPT(DFN,.13))
"RTN","VAFHLPID",72,0)
 ;Home phone (#13)
"RTN","VAFHLPID",73,0)
 I VAFSTR[13 S X1=$$HLPHONE^HLFNC($P(X,"^",1)),VAFY(13)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLPID",74,0)
 ;Business phone (#14)
"RTN","VAFHLPID",75,0)
 I VAFSTR[14 S X1=$$HLPHONE^HLFNC($P(X,"^",2)),VAFY(14)=$S(X1]"":X1,1:HLQ)
"RTN","VAFHLPID",76,0)
 ;Marital status (#16)
"RTN","VAFHLPID",77,0)
 I VAFSTR[16 S X=$P($G(^DIC(11,+VADM(10),0)),"^",3),VAFY(16)=$S(X="N":"S",X="U":"",X="":HLQ,1:X)
"RTN","VAFHLPID",78,0)
 ;Religious preference (#17) (if blank send 29 (UNKNOWN))
"RTN","VAFHLPID",79,0)
 I VAFSTR[17 S X=$P($G(^DIC(13,+VADM(9),0)),"^",4),VAFY(17)=$S(X]"":X,1:29)
"RTN","VAFHLPID",80,0)
 ;SSN (#19)
"RTN","VAFHLPID",81,0)
 I VAFSTR[19 S X=$P(VADM(2),"^",1),VAFY(19)=$S(X]"":X,1:HLQ)
"RTN","VAFHLPID",82,0)
 ;Ethnicity (#22)
"RTN","VAFHLPID",83,0)
 I VAFSTR[22 D
"RTN","VAFHLPID",84,0)
 .N HOW
"RTN","VAFHLPID",85,0)
 .S Y=$F(VAFSTR,"22")
"RTN","VAFHLPID",86,0)
 .S HOW=$P($E(VAFSTR,Y,$F(VAFSTR,",",Y)),",",1)
"RTN","VAFHLPID",87,0)
 .D SEQ22^VAFHLPI1(HOW,HLQ)
"RTN","VAFHLPID",88,0)
 ;
"RTN","VAFHLPID",89,0)
QUIT D KVA^VADPT
"RTN","VAFHLPID",90,0)
 D MAKEIT^VAFHLU("PID",.VAFY,.OUTPUT,.VAFPID)
"RTN","VAFHLPID",91,0)
 Q OUTPUT
"RTN","VAFHLU")
0^8^B2808509
"RTN","VAFHLU",1,0)
VAFHLU ;BPFO/JRP - SEGMENT BUILDING UTILTIES ;7/12/2002
"RTN","VAFHLU",2,0)
 ;;5.3;Registration;**415,508**;Aug 13, 1993
"RTN","VAFHLU",3,0)
 ;
"RTN","VAFHLU",4,0)
 Q
"RTN","VAFHLU",5,0)
MAKEIT(SEGNAME,SEGARR,FIRST245,ADTLNODE)        ;Make segment
"RTN","VAFHLU",6,0)
 ;Input  : SEGNAME - Name of segment being built
"RTN","VAFHLU",7,0)
 ;         SEGARR - Array continue segment data (pass by value)
"RTN","VAFHLU",8,0)
 ;           SEGARR(X) = Value for sequence N
"RTN","VAFHLU",9,0)
 ;           SEGARR(X,Y) = Repetition Y of sequence X
"RTN","VAFHLU",10,0)
 ;           SEGARR(X,Y,Z) = Component Z of repetition Y of sequence X
"RTN","VAFHLU",11,0)
 ;           SEGARR(X,Y,Z,A) = Subcomponent A of component Z of
"RTN","VAFHLU",12,0)
 ;                             repetition Y of sequence X
"RTN","VAFHLU",13,0)
 ;         FIRST245 - Variable to return first 245 characters of
"RTN","VAFHLU",14,0)
 ;                    segment in (pass by value)
"RTN","VAFHLU",15,0)
 ;         ADTLNODE - Array for continuation nodes (pass by value)
"RTN","VAFHLU",16,0)
 ;Assumed: HL7 encoding chars (output of INIT^HLFNC2 or INIT^HLTRANS)
"RTN","VAFHLU",17,0)
 ;Output : None
"RTN","VAFHLU",18,0)
 ;         FIRST245 = First 245 characters of segment
"RTN","VAFHLU",19,0)
 ;         ADTLNODE(1..n) = Continuation of segment
"RTN","VAFHLU",20,0)
 ;Notes  : Validity & existance of input is assumed
"RTN","VAFHLU",21,0)
 ;       : Assumes no single element contained in SEGARR is greater
"RTN","VAFHLU",22,0)
 ;         than 245 characters
"RTN","VAFHLU",23,0)
 ;       : Continuation nodes are added at element boundaries
"RTN","VAFHLU",24,0)
 ;
"RTN","VAFHLU",25,0)
 ;Declare variables
"RTN","VAFHLU",26,0)
 N SUB1,SUB2,SUB3,CS,RS,FS,SS,OUTREF,X
"RTN","VAFHLU",27,0)
 K FIRST245,ADTLNODE
"RTN","VAFHLU",28,0)
 ;Get HL7 separators (attempts to use HL() array)
"RTN","VAFHLU",29,0)
 S FS=$S($D(HL("FS")):HL("FS"),1:HLFS)
"RTN","VAFHLU",30,0)
 S X=$S($D(HL("ECH")):HL("ECH"),1:HLECH)
"RTN","VAFHLU",31,0)
 S CS=$E(X,1),RS=$E(X,2),SS=$E(X,4)
"RTN","VAFHLU",32,0)
 ;Build output
"RTN","VAFHLU",33,0)
 S OUTREF=$NA(FIRST245)
"RTN","VAFHLU",34,0)
 S @OUTREF=SEGNAME
"RTN","VAFHLU",35,0)
 I '$O(SEGARR(0)) S X="",Y=FS D ADD Q
"RTN","VAFHLU",36,0)
 F SUB1=1:1:$O(SEGARR(""),-1) D
"RTN","VAFHLU",37,0)
 .S X=$G(SEGARR(SUB1)),Y=FS D ADD
"RTN","VAFHLU",38,0)
 .F SUB2=1:1:$O(SEGARR(SUB1,""),-1) D
"RTN","VAFHLU",39,0)
 ..S X=$G(SEGARR(SUB1,SUB2)),Y=$S(SUB2=1:"",1:RS) D ADD
"RTN","VAFHLU",40,0)
 ..F SUB3=1:1:$O(SEGARR(SUB1,SUB2,""),-1) D
"RTN","VAFHLU",41,0)
 ...S X=$G(SEGARR(SUB1,SUB2,SUB3)),Y=$S(SUB3=1:"",1:CS) D ADD
"RTN","VAFHLU",42,0)
 ...F SUB4=1:1:$O(SEGARR(SUB1,SUB2,SUB3,""),-1) D
"RTN","VAFHLU",43,0)
 ....S X=$G(SEGARR(SUB1,SUB2,SUB3,SUB4)),Y=$S(SUB4=1:"",1:SS) D ADD
"RTN","VAFHLU",44,0)
 Q
"RTN","VAFHLU",45,0)
ADD ;Add to output - account for continuation node
"RTN","VAFHLU",46,0)
 I ($L(@OUTREF)+$L(X)+1)>245 D
"RTN","VAFHLU",47,0)
 .S X1=1+$O(ADTLNODE(""),-1)
"RTN","VAFHLU",48,0)
 .S OUTREF=$NA(ADTLNODE(X1))
"RTN","VAFHLU",49,0)
 .S @OUTREF=""
"RTN","VAFHLU",50,0)
 S @OUTREF=@OUTREF_Y_X
"RTN","VAFHLU",51,0)
 Q
"VER")
8.0^22.0
**INSTALL NAME**
SD*5.3*293
"BLD",3923,0)
SD*5.3*293^SCHEDULING^0^3040312^y
"BLD",3923,4,0)
^9.64PA^409.76^1
"BLD",3923,4,409.76,0)
409.76
"BLD",3923,4,409.76,222)
n^n^f^^n^^y^o^n
"BLD",3923,4,409.76,224)
S ZJRP=$P(^(0),"^",1) I ((ZJRP>239)&(ZJRP<249))!((ZJRP>2399)&(ZJRP<2490))
"BLD",3923,4,"B",409.76,409.76)

"BLD",3923,"ABPKG")
n
"BLD",3923,"INI")
PRE^SD53293
"BLD",3923,"INID")
^n^n
"BLD",3923,"INIT")
POST^SD53293
"BLD",3923,"KRN",0)
^9.67PA^8989.52^19
"BLD",3923,"KRN",.4,0)
.4
"BLD",3923,"KRN",.4,"NM",0)
^9.68A^^
"BLD",3923,"KRN",.401,0)
.401
"BLD",3923,"KRN",.402,0)
.402
"BLD",3923,"KRN",.403,0)
.403
"BLD",3923,"KRN",.5,0)
.5
"BLD",3923,"KRN",.84,0)
.84
"BLD",3923,"KRN",3.6,0)
3.6
"BLD",3923,"KRN",3.8,0)
3.8
"BLD",3923,"KRN",9.2,0)
9.2
"BLD",3923,"KRN",9.8,0)
9.8
"BLD",3923,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",3923,"KRN",9.8,"NM",1,0)
SCMSVPID^^0^B18492738
"BLD",3923,"KRN",9.8,"NM",2,0)
SCMSVUT2^^0^B23018269
"BLD",3923,"KRN",9.8,"NM",3,0)
SCMSVUT0^^0^B39319319
"BLD",3923,"KRN",9.8,"NM",4,0)
SCDXMSG1^^0^B72827896
"BLD",3923,"KRN",9.8,"NM",5,0)
SCMSVUT5^^0^B6829971
"BLD",3923,"KRN",9.8,"NM",6,0)
SD53293^^0^B20972844
"BLD",3923,"KRN",9.8,"NM",7,0)
SCMCHLS^^0^B5637692
"BLD",3923,"KRN",9.8,"NM","B","SCDXMSG1",4)

"BLD",3923,"KRN",9.8,"NM","B","SCMCHLS",7)

"BLD",3923,"KRN",9.8,"NM","B","SCMSVPID",1)

"BLD",3923,"KRN",9.8,"NM","B","SCMSVUT0",3)

"BLD",3923,"KRN",9.8,"NM","B","SCMSVUT2",2)

"BLD",3923,"KRN",9.8,"NM","B","SCMSVUT5",5)

"BLD",3923,"KRN",9.8,"NM","B","SD53293",6)

"BLD",3923,"KRN",19,0)
19
"BLD",3923,"KRN",19,"NM",0)
^9.68A^^
"BLD",3923,"KRN",19.1,0)
19.1
"BLD",3923,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",3923,"KRN",101,0)
101
"BLD",3923,"KRN",101,"NM",0)
^9.68A^^
"BLD",3923,"KRN",409.61,0)
409.61
"BLD",3923,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",3923,"KRN",771,0)
771
"BLD",3923,"KRN",870,0)
870
"BLD",3923,"KRN",8989.51,0)
8989.51
"BLD",3923,"KRN",8989.52,0)
8989.52
"BLD",3923,"KRN",8994,0)
8994
"BLD",3923,"KRN","B",.4,.4)

"BLD",3923,"KRN","B",.401,.401)

"BLD",3923,"KRN","B",.402,.402)

"BLD",3923,"KRN","B",.403,.403)

"BLD",3923,"KRN","B",.5,.5)

"BLD",3923,"KRN","B",.84,.84)

"BLD",3923,"KRN","B",3.6,3.6)

"BLD",3923,"KRN","B",3.8,3.8)

"BLD",3923,"KRN","B",9.2,9.2)

"BLD",3923,"KRN","B",9.8,9.8)

"BLD",3923,"KRN","B",19,19)

"BLD",3923,"KRN","B",19.1,19.1)

"BLD",3923,"KRN","B",101,101)

"BLD",3923,"KRN","B",409.61,409.61)

"BLD",3923,"KRN","B",771,771)

"BLD",3923,"KRN","B",870,870)

"BLD",3923,"KRN","B",8989.51,8989.51)

"BLD",3923,"KRN","B",8989.52,8989.52)

"BLD",3923,"KRN","B",8994,8994)

"BLD",3923,"QUES",0)
^9.62^^
"BLD",3923,"REQB",0)
^9.611^3^3
"BLD",3923,"REQB",1,0)
SD*5.3*254^2
"BLD",3923,"REQB",2,0)
SD*5.3*286^2
"BLD",3923,"REQB",3,0)
SD*5.3*212^2
"BLD",3923,"REQB","B","SD*5.3*212",3)

"BLD",3923,"REQB","B","SD*5.3*254",1)

"BLD",3923,"REQB","B","SD*5.3*286",2)

"DATA",409.76,276,0)
240^N
"DATA",409.76,276,1)
Conf. Address - Line 1 contains all numbers
"DATA",409.76,276,2,0)
^409.7621^2^2^3030403^^
"DATA",409.76,276,2,1,0)
Correct the Confidential Address - Line 1 through the 
"DATA",409.76,276,2,2,0)
Patient Demographics protocol.
"DATA",409.76,276,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,277,0)
241^N
"DATA",409.76,277,1)
Conf. Address - Line 2 contains all numbers.
"DATA",409.76,277,2,0)
^409.7621^2^2^3030403^^^
"DATA",409.76,277,2,1,0)
Correct the Confidential Address - Line 2 through the 
"DATA",409.76,277,2,2,0)
Patient Demographics protocol.
"DATA",409.76,277,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,278,0)
2400^V
"DATA",409.76,278,1)
Conf. Address line 1 is invalid.
"DATA",409.76,278,2,0)
^409.7621^2^2^3030403^^^
"DATA",409.76,278,2,1,0)
Correct the Confidential Address - Line 1 through the 
"DATA",409.76,278,2,2,0)
Patient Demographics protocol.
"DATA",409.76,278,"CHK")
S RES=$$STR1^SCMSVUT0(DATA)
"DATA",409.76,278,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,280,0)
242^N
"DATA",409.76,280,1)
Conf. Address City is missing or invalid.
"DATA",409.76,280,2,0)
^409.7621^2^2^3030611^^^
"DATA",409.76,280,2,1,0)
Correct the Confidential City name through the Patient Demographics 
"DATA",409.76,280,2,2,0)
protocol.
"DATA",409.76,280,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,281,0)
243^N
"DATA",409.76,281,1)
Conf. Address State code is missing or invalid.
"DATA",409.76,281,2,0)
^^1^1^3030403^
"DATA",409.76,281,2,1,0)
Correct the Confidential State through the Patient Demographis protocol.
"DATA",409.76,281,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,282,0)
244^N
"DATA",409.76,282,1)
Conf. Address zip code is missing or invalid.
"DATA",409.76,282,2,0)
^^2^2^3030403^
"DATA",409.76,282,2,1,0)
Correct the Confidential Zip Code through the Patients Demographic 
"DATA",409.76,282,2,2,0)
protocol.
"DATA",409.76,282,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,283,0)
245^N
"DATA",409.76,283,1)
Conf. Address County code is invalid.
"DATA",409.76,283,2,0)
^^2^2^3030403^
"DATA",409.76,283,2,1,0)
Correct the Confidential County Code through the Patient Demographics 
"DATA",409.76,283,2,2,0)
protocol.
"DATA",409.76,283,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,284,0)
2410^V
"DATA",409.76,284,1)
Conf. Address line 2 is invalid.
"DATA",409.76,284,2,0)
^409.7621^2^2^3030403^^
"DATA",409.76,284,2,1,0)
Correct the Confidential Address - Line 2 through the Patient Demographic 
"DATA",409.76,284,2,2,0)
protocol.
"DATA",409.76,284,"CHK")
S RES=$$STR2^SCMSVUT0(DATA)
"DATA",409.76,284,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,285,0)
2420^V
"DATA",409.76,285,1)
Conf. Address City is missing or invalid.
"DATA",409.76,285,2,0)
^^2^2^3030403^
"DATA",409.76,285,2,1,0)
Correct the Confidential City name through the Patient Demographic 
"DATA",409.76,285,2,2,0)
protocol.
"DATA",409.76,285,"CHK")
S RES=$$CITY^SCMSVUT0(DATA)
"DATA",409.76,285,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,286,0)
2430^V
"DATA",409.76,286,1)
Conf. Address State code is missing or invalid.
"DATA",409.76,286,2,0)
^^2^2^3030403^
"DATA",409.76,286,2,1,0)
Correct the Confidential State code through the Patient Demographics 
"DATA",409.76,286,2,2,0)
protocol.
"DATA",409.76,286,"CHK")
S RES=$$STATE^SCMSVUT0(DATA)
"DATA",409.76,286,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,287,0)
2440^V
"DATA",409.76,287,1)
Conf. Address zip code is missing or invalid.
"DATA",409.76,287,2,0)
^^1^1^3030403^
"DATA",409.76,287,2,1,0)
Correct Confidential Zip Code through the Patient Demographics protocol.
"DATA",409.76,287,"CHK")
S RES=$$ZIP^SCMSVUT0(DATA)
"DATA",409.76,287,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,289,0)
2450^V
"DATA",409.76,289,1)
Conf. Address county code is invalid.
"DATA",409.76,289,2,0)
^^2^2^3030403^
"DATA",409.76,289,2,1,0)
Correct the Confidential County code through the Patient Demographics 
"DATA",409.76,289,2,2,0)
protocol.
"DATA",409.76,289,"CHK")
S RES=$$COUNTY^SCMSVUT0(DATA,STATE)
"DATA",409.76,289,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,291,0)
246^V
"DATA",409.76,291,1)
Conf. Address Inactive State/County Code
"DATA",409.76,291,2,0)
^409.7621^2^2^3030611^^^
"DATA",409.76,291,2,1,0)
Correct the Confidential State/County codes through the
"DATA",409.76,291,2,2,0)
Patient Demographics protocol.
"DATA",409.76,291,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,292,0)
247^N
"DATA",409.76,292,1)
Conf. Address Category is missing or invalid.
"DATA",409.76,292,2,0)
^409.7621^2^2^3030611^^^^
"DATA",409.76,292,2,1,0)
Correct the Confidential Address Category through the Patient 
"DATA",409.76,292,2,2,0)
Demographics protocol.
"DATA",409.76,292,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,293,0)
248^N
"DATA",409.76,293,1)
Conf. Address Start Date is missing or the Start/End Dates are invalid.
"DATA",409.76,293,2,0)
^409.7621^2^2^3030611^^^^
"DATA",409.76,293,2,1,0)
Correct the Confidential Address Start and Stop dates through the Patient 
"DATA",409.76,293,2,2,0)
Demographics protocol.
"DATA",409.76,293,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,294,0)
2470^V
"DATA",409.76,294,1)
Conf. Address Category is missing or invalid.
"DATA",409.76,294,2,0)
^409.7621^2^2^3030611^^^^
"DATA",409.76,294,2,1,0)
Correct the Confidential Address Category through the Patient Demographics 
"DATA",409.76,294,2,2,0)
protocol.
"DATA",409.76,294,"CHK")
S RES=$$CONFCAT^SCMSVUT2(DATA)
"DATA",409.76,294,"COR")
S RTN=$$DEM1^SCENIA1
"DATA",409.76,295,0)
2480^V
"DATA",409.76,295,1)
Conf. Address Start Date is missing or the Conf. Start/End Dates are invalid.
"DATA",409.76,295,2,0)
^409.7621^2^2^3030611^^^^
"DATA",409.76,295,2,1,0)
Correct the Confidential Address Start and Stop Dates through the
"DATA",409.76,295,2,2,0)
Patient Demographics protocol.
"DATA",409.76,295,"CHK")
S RES=$$CONFDT^SCMSVUT2(DATA,$E(HLECH,4))
"DATA",409.76,295,"COR")
S RTN=$$DEM1^SCENIA1
"FIA",409.76)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE
"FIA",409.76,0)
^SD(409.76,
"FIA",409.76,0,0)
409.76I
"FIA",409.76,0,1)
n^n^f^^n^^y^o^n
"FIA",409.76,0,10)

"FIA",409.76,0,11)
S ZJRP=$P(^(0),"^",1) I ((ZJRP>239)&(ZJRP<249))!((ZJRP>2399)&(ZJRP<2490))
"FIA",409.76,0,"RLRO")

"FIA",409.76,0,"VR")
5.3^SD
"FIA",409.76,409.76)
0
"FIA",409.76,409.7621)
0
"INI")
PRE^SD53293
"INIT")
POST^SD53293
"MBREQ")
0
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,20,0)
^9.402P^^
"PKG",16,22,0)
^9.49I^1^1
"PKG",16,22,1,0)
5.3^2930813
"PKG",16,22,1,"PAH",1,0)
293^3040312
"PKG",16,22,1,"PAH",1,1,0)
^^1^1^3030522
"PKG",16,22,1,"PAH",1,1,1,0)
Confidential Address Imm
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","SCDXMSG1")
0^4^B72827896
"RTN","SCDXMSG1",1,0)
SCDXMSG1 ;ALB/JRP - AMB CARE MESSAGE BUILDER UTILS;08-MAY-1996 ; 5/2/02 2:08pm
"RTN","SCDXMSG1",2,0)
 ;;5.3;Scheduling;**44,55,70,77,85,66,143,142,162,172,180,239,245,254,293**;AUG 13, 1993
"RTN","SCDXMSG1",3,0)
 ;
"RTN","SCDXMSG1",4,0)
 ;-- Line tags for building HL7 segment
"RTN","SCDXMSG1",5,0)
BLDEVN S VAFEVN=$$EN^VAFHLEVN(EVNTHL7,EVNTDATE,VAFSTR,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",6,0)
 Q
"RTN","SCDXMSG1",7,0)
BLDPID S VAFPID=$$EN^VAFHLPID(DFN,VAFSTR)
"RTN","SCDXMSG1",8,0)
 D SETMAR^SCMSVUT0(.VAFPID,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",9,0)
 Q
"RTN","SCDXMSG1",10,0)
BLDZPD S VAFZPD=$$EN^VAFHLZPD(DFN,VAFSTR)
"RTN","SCDXMSG1",11,0)
 S VAFZPD=$$SETPOW^SCMSVUT0(DFN,$G(VAFZPD),HL("Q"),HL("FS"))
"RTN","SCDXMSG1",12,0)
 Q
"RTN","SCDXMSG1",13,0)
BLDPV1 D SETID^SCMSVUT0(ENCPTR,DELPTR)
"RTN","SCDXMSG1",14,0)
 S VAFPV1=$$EN^VAFHLPV1(ENCPTR,DELPTR,VAFSTR,1,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",15,0)
 Q
"RTN","SCDXMSG1",16,0)
BLDDG1 K @VAFARRY
"RTN","SCDXMSG1",17,0)
 D EN^VAFHLDG1(ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",18,0)
 Q
"RTN","SCDXMSG1",19,0)
BLDPR1 K @VAFARRY
"RTN","SCDXMSG1",20,0)
 D SETPRTY^SCMSVUT0(ENCPTR)
"RTN","SCDXMSG1",21,0)
 D EN^VAFHLPR1(ENCPTR,VAFSTR,HL("Q"),HL("FS"),HL("ECH"),VAFARRY)
"RTN","SCDXMSG1",22,0)
 Q
"RTN","SCDXMSG1",23,0)
BLDZEL N ELCOD,ELIGENC,I,VAFMSTDT
"RTN","SCDXMSG1",24,0)
 S VAFMSTDT=ENCDT
"RTN","SCDXMSG1",25,0)
 D EN1^VAFHLZEL(DFN,VAFSTR,1,.VAFZEL)
"RTN","SCDXMSG1",26,0)
 S ELCOD=$P($G(^SCE(ENCPTR,0)),"^",13),ELIGENC=$P($G(^DIC(8,+ELCOD,0)),"^",9)
"RTN","SCDXMSG1",27,0)
 S $P(VAFZEL(1),HL("FS"),3)=ELIGENC
"RTN","SCDXMSG1",28,0)
 Q
"RTN","SCDXMSG1",29,0)
BLDZIR K DGREL,DGINC,DGINR,DGDEP
"RTN","SCDXMSG1",30,0)
 D ALL^DGMTU21(DFN,"V",ENCDT,"R")
"RTN","SCDXMSG1",31,0)
 S VAFZIR=$$EN^VAFHLZIR(+$G(DGINR("V")),VAFSTR,1,ENCPTR)
"RTN","SCDXMSG1",32,0)
 K DGREL,DGINC,DGINR,DGDEP
"RTN","SCDXMSG1",33,0)
 Q
"RTN","SCDXMSG1",34,0)
BLDZCL K @VAFARRY
"RTN","SCDXMSG1",35,0)
 D EN^VAFHLZCL(DFN,ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",36,0)
 Q
"RTN","SCDXMSG1",37,0)
BLDZSC K @VAFARRY
"RTN","SCDXMSG1",38,0)
 D EN^VAFHLZSC(ENCPTR,VAFSTR,HL("Q"),HL("FS"),VAFARRY)
"RTN","SCDXMSG1",39,0)
 Q
"RTN","SCDXMSG1",40,0)
BLDZSP S VAFZSP=$$EN^VAFHLZSP(DFN,1,1)
"RTN","SCDXMSG1",41,0)
 S VAFZSP=$$SETVSI^SCMSVUT0(DFN,$G(VAFZSP),HL("Q"),HL("FS"))
"RTN","SCDXMSG1",42,0)
 Q
"RTN","SCDXMSG1",43,0)
BLDROL K @VAFARRY
"RTN","SCDXMSG1",44,0)
 N SCDXPRV,SCDXPAR,SCDXROL,PTRPRV,NODE,PRVNUM,TMP
"RTN","SCDXMSG1",45,0)
 D GETPRV^SDOE(ENCPTR,"SCDXPRV")
"RTN","SCDXMSG1",46,0)
 S PTRPRV=0
"RTN","SCDXMSG1",47,0)
 F PRVNUM=1:1  S PTRPRV=+$O(SCDXPRV(PTRPRV)) Q:('PTRPRV)  D
"RTN","SCDXMSG1",48,0)
 .K SCDXPAR,SCDXROL
"RTN","SCDXMSG1",49,0)
 .S NODE=SCDXPRV(PTRPRV)
"RTN","SCDXMSG1",50,0)
 .S SCDXPAR("PTR200")=+NODE
"RTN","SCDXMSG1",51,0)
 .S SCDXPAR("INSTID")=$$VID4XMIT^SCDXFU11(XMITPTR)_"-"_(+NODE)_"*"_PRVNUM
"RTN","SCDXMSG1",52,0)
 .S SCDXPAR("ACTION")="CO"
"RTN","SCDXMSG1",53,0)
 .S SCDXPAR("ALTROLE")=($TR($P(NODE,"^",4),"PS","10"))_$E(HL("ECH"),1)_HL("Q")_$E(HL("ECH"),1)_"VA01"
"RTN","SCDXMSG1",54,0)
 .S SCDXPAR("CODEONLY")=0
"RTN","SCDXMSG1",55,0)
 .S SCDXPAR("RDATE")=ENCDT
"RTN","SCDXMSG1",56,0)
 .D OUTPAT^VAFHLROL("SCDXPAR","SCDXROL",VAFSTR,HL("FS"),HL("ECH"),HL("Q"),240)
"RTN","SCDXMSG1",57,0)
 .K SCDXROL("ERROR"),SCDXROL("WARNING")
"RTN","SCDXMSG1",58,0)
 .M @VAFARRY@(PRVNUM)=SCDXROL
"RTN","SCDXMSG1",59,0)
 Q
"RTN","SCDXMSG1",60,0)
BLDPD1 S VAFPD1=$$EN^VAFHLPD1(DFN,VAFSTR)
"RTN","SCDXMSG1",61,0)
 Q
"RTN","SCDXMSG1",62,0)
BLDZEN S VAFZEN=$$EN^VAFHLZEN(DFN,VAFSTR,1,HL("Q"),HL("FS"))
"RTN","SCDXMSG1",63,0)
 Q
"RTN","SCDXMSG1",64,0)
 ;
"RTN","SCDXMSG1",65,0)
 ;-- Line tags for validating HL7 segments
"RTN","SCDXMSG1",66,0)
VLDEVN S ERROR=$$EN^SCMSVEVN(VAFEVN,HL("Q"),HL("FS"),VALERR)
"RTN","SCDXMSG1",67,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",68,0)
 Q
"RTN","SCDXMSG1",69,0)
VLDPID S ERROR=$$EN^SCMSVPID(.VAFPID,HL("Q"),HL("FS"),HL("ECH"),VALERR,ENCDT,EVNTHL7)
"RTN","SCDXMSG1",70,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",71,0)
 Q
"RTN","SCDXMSG1",72,0)
VLDZPD S ERROR=$$EN^SCMSVZPD(VAFZPD,HL("Q"),HL("FS"),VALERR,ENCDT,NODE)
"RTN","SCDXMSG1",73,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",74,0)
 Q
"RTN","SCDXMSG1",75,0)
VLDPV1 S ERROR=$$EN^SCMSVPV1(VAFPV1,HL("Q"),HL("FS"),VALERR,NODE,EVNTHL7)
"RTN","SCDXMSG1",76,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",77,0)
 Q
"RTN","SCDXMSG1",78,0)
VLDDG1 S ERROR=$$EN^SCMSVDG1(VAFARRY,HL("Q"),HL("FS"),ENCPTR,VALERR,ENCDT)
"RTN","SCDXMSG1",79,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",80,0)
 Q
"RTN","SCDXMSG1",81,0)
VLDPR1 S ERROR=$$EN^SCMSVPR1(VAFARRY,HL("Q"),HL("FS"),HL("ECH"),VALERR,ENCDT)
"RTN","SCDXMSG1",82,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",83,0)
 Q
"RTN","SCDXMSG1",84,0)
VLDZEL S ERROR=$$EN^SCMSVZEL(.VAFZEL,HL("Q"),HL("FS"),VALERR,DFN)
"RTN","SCDXMSG1",85,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",86,0)
 Q
"RTN","SCDXMSG1",87,0)
VLDZIR S ERROR=$$EN^SCMSVZIR(VAFZIR,HL("Q"),HL("FS"),VALERR)
"RTN","SCDXMSG1",88,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",89,0)
 Q
"RTN","SCDXMSG1",90,0)
VLDZCL S ERROR=$$EN^SCMSVZCL(VAFARRY,HL("Q"),HL("FS"),VALERR,DFN)
"RTN","SCDXMSG1",91,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",92,0)
 Q
"RTN","SCDXMSG1",93,0)
VLDZSC S ERROR=$$EN^SCMSVZSC(VAFARRY,HL("Q"),HL("FS"),VALERR,ENCPTR)
"RTN","SCDXMSG1",94,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",95,0)
 Q
"RTN","SCDXMSG1",96,0)
VLDZSP S ERROR=$$EN^SCMSVZSP(VAFZSP,HL("Q"),HL("FS"),VALERR,DFN)
"RTN","SCDXMSG1",97,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",98,0)
 Q
"RTN","SCDXMSG1",99,0)
VLDROL S ERROR=$$EN^SCMSVROL(VAFARRY,HL("Q"),HL("FS"),HL("ECH"),VALERR)
"RTN","SCDXMSG1",100,0)
 S:(ERROR>0) ERROR=0
"RTN","SCDXMSG1",101,0)
 Q
"RTN","SCDXMSG1",102,0)
VLDPD1 S ERROR=0
"RTN","SCDXMSG1",103,0)
 Q
"RTN","SCDXMSG1",104,0)
VLDZEN S ERROR=0
"RTN","SCDXMSG1",105,0)
 Q
"RTN","SCDXMSG1",106,0)
 ;
"RTN","SCDXMSG1",107,0)
 ;-- Line tags for copying HL7 segments into HL7 message
"RTN","SCDXMSG1",108,0)
CPYEVN N I
"RTN","SCDXMSG1",109,0)
 S @XMITARRY@(CURLINE)=VAFEVN
"RTN","SCDXMSG1",110,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",111,0)
 S I=""
"RTN","SCDXMSG1",112,0)
 F  S I=+$O(VAFEVN(I)) Q:('I)  D
"RTN","SCDXMSG1",113,0)
 .S @XMITARRY@(CURLINE,I)=VAFEVN(I)
"RTN","SCDXMSG1",114,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",115,0)
 Q
"RTN","SCDXMSG1",116,0)
CPYPID N I
"RTN","SCDXMSG1",117,0)
 S @XMITARRY@(CURLINE)=VAFPID
"RTN","SCDXMSG1",118,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",119,0)
 S I=""
"RTN","SCDXMSG1",120,0)
 F  S I=+$O(VAFPID(I)) Q:('I)  D
"RTN","SCDXMSG1",121,0)
 .S @XMITARRY@(CURLINE,I)=VAFPID(I)
"RTN","SCDXMSG1",122,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",123,0)
 Q
"RTN","SCDXMSG1",124,0)
CPYZPD N I
"RTN","SCDXMSG1",125,0)
 S @XMITARRY@(CURLINE)=VAFZPD
"RTN","SCDXMSG1",126,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",127,0)
 S I=""
"RTN","SCDXMSG1",128,0)
 F  S I=+$O(VAFZPD(I)) Q:('I)  D
"RTN","SCDXMSG1",129,0)
 .S @XMITARRY@(CURLINE,I)=VAFZPD(I)
"RTN","SCDXMSG1",130,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",131,0)
 Q
"RTN","SCDXMSG1",132,0)
CPYPV1 N I
"RTN","SCDXMSG1",133,0)
 S @XMITARRY@(CURLINE)=VAFPV1
"RTN","SCDXMSG1",134,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",135,0)
 S I=""
"RTN","SCDXMSG1",136,0)
 F  S I=+$O(VAFPV1(I)) Q:('I)  D
"RTN","SCDXMSG1",137,0)
 .S @XMITARRY@(CURLINE,I)=VAFPV1(I)
"RTN","SCDXMSG1",138,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",139,0)
 Q
"RTN","SCDXMSG1",140,0)
CPYDG1 N I,J,K
"RTN","SCDXMSG1",141,0)
 S I=""
"RTN","SCDXMSG1",142,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",143,0)
 .S J=""
"RTN","SCDXMSG1",144,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",145,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",146,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",147,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",148,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",149,0)
 Q
"RTN","SCDXMSG1",150,0)
CPYPR1 N I,J,K
"RTN","SCDXMSG1",151,0)
 S I=""
"RTN","SCDXMSG1",152,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",153,0)
 .S J=""
"RTN","SCDXMSG1",154,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",155,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",156,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",157,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",158,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",159,0)
 Q
"RTN","SCDXMSG1",160,0)
CPYZEL N I
"RTN","SCDXMSG1",161,0)
 S @XMITARRY@(CURLINE)=VAFZEL(1)
"RTN","SCDXMSG1",162,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",163,0)
 S I=""
"RTN","SCDXMSG1",164,0)
 F  S I=+$O(VAFZEL(1,I)) Q:('I)  D
"RTN","SCDXMSG1",165,0)
 .S @XMITARRY@(CURLINE,I)=VAFZEL(1,I)
"RTN","SCDXMSG1",166,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",167,0)
 Q
"RTN","SCDXMSG1",168,0)
CPYZIR N I
"RTN","SCDXMSG1",169,0)
 S @XMITARRY@(CURLINE)=VAFZIR
"RTN","SCDXMSG1",170,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",171,0)
 N I
"RTN","SCDXMSG1",172,0)
 S I=""
"RTN","SCDXMSG1",173,0)
 F  S I=+$O(VAFZIR(I)) Q:('I)  D
"RTN","SCDXMSG1",174,0)
 .S @XMITARRY@(CURLINE,I)=VAFZIR(I)
"RTN","SCDXMSG1",175,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",176,0)
 Q
"RTN","SCDXMSG1",177,0)
CPYZCL N I,J,K
"RTN","SCDXMSG1",178,0)
 S I=""
"RTN","SCDXMSG1",179,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",180,0)
 .S J=""
"RTN","SCDXMSG1",181,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",182,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",183,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",184,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",185,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",186,0)
 Q
"RTN","SCDXMSG1",187,0)
CPYZSC N I,J,K
"RTN","SCDXMSG1",188,0)
 S I=""
"RTN","SCDXMSG1",189,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",190,0)
 .S J=""
"RTN","SCDXMSG1",191,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",192,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",193,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",194,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",195,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",196,0)
 Q
"RTN","SCDXMSG1",197,0)
CPYZSP N I
"RTN","SCDXMSG1",198,0)
 S @XMITARRY@(CURLINE)=VAFZSP
"RTN","SCDXMSG1",199,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",200,0)
 S I=""
"RTN","SCDXMSG1",201,0)
 F  S I=+$O(VAFZSP(I)) Q:('I)  D
"RTN","SCDXMSG1",202,0)
 .S @XMITARRY@(CURLINE,I)=VAFZSP(I)
"RTN","SCDXMSG1",203,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",204,0)
 Q
"RTN","SCDXMSG1",205,0)
CPYROL N I,J,K
"RTN","SCDXMSG1",206,0)
 S I=""
"RTN","SCDXMSG1",207,0)
 F K=0:1 S I=+$O(@VAFARRY@(I)) Q:('I)  D
"RTN","SCDXMSG1",208,0)
 .S J=""
"RTN","SCDXMSG1",209,0)
 .F  S J=$O(@VAFARRY@(I,J)) Q:(J="")  D
"RTN","SCDXMSG1",210,0)
 ..S:('J) @XMITARRY@(CURLINE+K)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",211,0)
 ..S:(J) @XMITARRY@(CURLINE+K,J)=@VAFARRY@(I,J)
"RTN","SCDXMSG1",212,0)
 ..S LINESADD=LINESADD+1
"RTN","SCDXMSG1",213,0)
 S CURLINE=CURLINE+K-1
"RTN","SCDXMSG1",214,0)
 Q
"RTN","SCDXMSG1",215,0)
CPYPD1 N I
"RTN","SCDXMSG1",216,0)
 S @XMITARRY@(CURLINE)=VAFPD1
"RTN","SCDXMSG1",217,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",218,0)
 S I=""
"RTN","SCDXMSG1",219,0)
 F  S I=+$O(VAFPD1(I)) Q:('I)  D
"RTN","SCDXMSG1",220,0)
 .S @XMITARRY@(CURLINE,I)=VAFPD1(I)
"RTN","SCDXMSG1",221,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",222,0)
 Q
"RTN","SCDXMSG1",223,0)
CPYZEN N I
"RTN","SCDXMSG1",224,0)
 S @XMITARRY@(CURLINE)=VAFZEN
"RTN","SCDXMSG1",225,0)
 S LINESADD=LINESADD+1
"RTN","SCDXMSG1",226,0)
 S I=""
"RTN","SCDXMSG1",227,0)
 F  S I=+$O(VAFZEN(I)) Q:('I)  D
"RTN","SCDXMSG1",228,0)
 .S @XMITARRY@(CURLINE,I)=VAFZEN(I)
"RTN","SCDXMSG1",229,0)
 .S LINESADD=LINESADD+1
"RTN","SCDXMSG1",230,0)
 Q
"RTN","SCDXMSG1",231,0)
 ;
"RTN","SCDXMSG1",232,0)
 ;-- Line tags for deleting HL7 segments
"RTN","SCDXMSG1",233,0)
DELEVN K VAFEVN
"RTN","SCDXMSG1",234,0)
 Q
"RTN","SCDXMSG1",235,0)
DELPID K VAFPID
"RTN","SCDXMSG1",236,0)
 Q
"RTN","SCDXMSG1",237,0)
DELZPD K VAFZPD
"RTN","SCDXMSG1",238,0)
 Q
"RTN","SCDXMSG1",239,0)
DELPV1 K VAFPV1
"RTN","SCDXMSG1",240,0)
 Q
"RTN","SCDXMSG1",241,0)
DELDG1 K @VAFARRY
"RTN","SCDXMSG1",242,0)
 Q
"RTN","SCDXMSG1",243,0)
DELPR1 K @VAFARRY
"RTN","SCDXMSG1",244,0)
 Q
"RTN","SCDXMSG1",245,0)
DELZEL K VAFZEL
"RTN","SCDXMSG1",246,0)
 Q
"RTN","SCDXMSG1",247,0)
DELZIR K VAFZIR
"RTN","SCDXMSG1",248,0)
 Q
"RTN","SCDXMSG1",249,0)
DELZCL K @VAFARRY
"RTN","SCDXMSG1",250,0)
 Q
"RTN","SCDXMSG1",251,0)
DELZSC K @VAFARRY
"RTN","SCDXMSG1",252,0)
 Q
"RTN","SCDXMSG1",253,0)
DELZSP K VAFZSP
"RTN","SCDXMSG1",254,0)
 Q
"RTN","SCDXMSG1",255,0)
DELROL K @VAFARRY
"RTN","SCDXMSG1",256,0)
 Q
"RTN","SCDXMSG1",257,0)
DELPD1 K VAFPD1
"RTN","SCDXMSG1",258,0)
 Q
"RTN","SCDXMSG1",259,0)
DELZEN K VAFZEN
"RTN","SCDXMSG1",260,0)
 Q
"RTN","SCDXMSG1",261,0)
 ;
"RTN","SCDXMSG1",262,0)
 ;
"RTN","SCDXMSG1",263,0)
SEGMENTS(EVNTTYPE,SEGARRY) ;Build list of HL7 segments for a given
"RTN","SCDXMSG1",264,0)
 ; event type
"RTN","SCDXMSG1",265,0)
 ;
"RTN","SCDXMSG1",266,0)
 ;Input  : EVNTTYPE - Event type to build list for
"RTN","SCDXMSG1",267,0)
 ;                    A08 & A23 are the only types currently supported
"RTN","SCDXMSG1",268,0)
 ;                    (Defaults to A08)
"RTN","SCDXMSG1",269,0)
 ;         SEGARRY - Array to place output in (full global reference)
"RTN","SCDXMSG1",270,0)
 ;                   (Defaults to ^TMP("SCDX SEGMENTS",$J))
"RTN","SCDXMSG1",271,0)
 ;Output : None
"RTN","SCDXMSG1",272,0)
 ;           SEGARRY(Seq,Name) = Fields
"RTN","SCDXMSG1",273,0)
 ;             Seq - Sequencing number to order the segments as
"RTN","SCDXMSG1",274,0)
 ;                   they should be placed in the HL7 message
"RTN","SCDXMSG1",275,0)
 ;             Name - Name of HL7 segment
"RTN","SCDXMSG1",276,0)
 ;             Fields - List of fields used by Ambulatory Care
"RTN","SCDXMSG1",277,0)
 ;                      VAFSTR would be set to this value
"RTN","SCDXMSG1",278,0)
 ;       : MSH segment is not included
"RTN","SCDXMSG1",279,0)
 ;
"RTN","SCDXMSG1",280,0)
 ;Check input
"RTN","SCDXMSG1",281,0)
 S EVNTTYPE=$G(EVNTTYPE)
"RTN","SCDXMSG1",282,0)
 S:(EVNTTYPE'="A23") EVNTTYPE="A08"
"RTN","SCDXMSG1",283,0)
 S SEGARRY=$G(SEGARRY)
"RTN","SCDXMSG1",284,0)
 S:(SEGARRY="") SEGARRY="^TMP(""SCDX SEGMENTS"","_$J_")"
"RTN","SCDXMSG1",285,0)
 ;Segments used by A08 & A23
"RTN","SCDXMSG1",286,0)
 S @SEGARRY@(1,"EVN")="1,2"
"RTN","SCDXMSG1",287,0)
 S @SEGARRY@(2,"PID")="1,2,3,4,5,6,7,8,10N,11PC,13,14,16,17,19,22N"
"RTN","SCDXMSG1",288,0)
 S @SEGARRY@(3,"PD1")="3,4"
"RTN","SCDXMSG1",289,0)
 S @SEGARRY@(4,"PV1")="1,2,4,14,19,39,44,50"
"RTN","SCDXMSG1",290,0)
 ;Building list for A23 - add ZPD segment and quit
"RTN","SCDXMSG1",291,0)
 I (EVNTTYPE="A23") D  Q
"RTN","SCDXMSG1",292,0)
 .S @SEGARRY@(5,"ZPD")="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"
"RTN","SCDXMSG1",293,0)
 S @SEGARRY@(5,"DG1")="1,2,3,4,5,15"
"RTN","SCDXMSG1",294,0)
 S @SEGARRY@(6,"PR1")="1,3,16"
"RTN","SCDXMSG1",295,0)
 S @SEGARRY@(7,"ROL")="1,2,3,4"
"RTN","SCDXMSG1",296,0)
 S @SEGARRY@(8,"ZPD")="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21"
"RTN","SCDXMSG1",297,0)
 S @SEGARRY@(9,"ZEL")="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29"
"RTN","SCDXMSG1",298,0)
 S @SEGARRY@(10,"ZIR")="1,2,3,4,5,6,7,8,9,10,11,12,13"
"RTN","SCDXMSG1",299,0)
 S @SEGARRY@(11,"ZCL")="1,2,3"
"RTN","SCDXMSG1",300,0)
 S @SEGARRY@(12,"ZSC")="1,2,3"
"RTN","SCDXMSG1",301,0)
 S @SEGARRY@(13,"ZSP")="1,2,3,4"
"RTN","SCDXMSG1",302,0)
 S @SEGARRY@(14,"ZEN")="1,2,3,4,5,6,7,8,9,10"
"RTN","SCDXMSG1",303,0)
 Q
"RTN","SCDXMSG1",304,0)
 ;
"RTN","SCDXMSG1",305,0)
UNWIND(XMITARRY,INSRTPNT) ;Remove all data that was put into HL7 message
"RTN","SCDXMSG1",306,0)
 ;
"RTN","SCDXMSG1",307,0)
 ;Input  : XMITARRY - Array containing HL7 message (full global ref)
"RTN","SCDXMSG1",308,0)
 ;                    (Defaults to ^TMP("HLS",$J))
"RTN","SCDXMSG1",309,0)
 ;         INSRTPNT - Where to begin deletion from (Defaults to 1)
"RTN","SCDXMSG1",310,0)
 ;Output : None
"RTN","SCDXMSG1",311,0)
 ;
"RTN","SCDXMSG1",312,0)
 ;Check input
"RTN","SCDXMSG1",313,0)
 S XMITARRY=$G(XMITARRY)
"RTN","SCDXMSG1",314,0)
 S:(XMITARRY="") XMITARRY="^TMP(""HLS"","_$J_")"
"RTN","SCDXMSG1",315,0)
 S INSRTPNT=$G(INSRTPNT)
"RTN","SCDXMSG1",316,0)
 S:(INSRTPNT="") INSRTPNT=1
"RTN","SCDXMSG1",317,0)
 ;Remove insertion point from array
"RTN","SCDXMSG1",318,0)
 K @XMITARRY@(INSRTPNT)
"RTN","SCDXMSG1",319,0)
 ;Remove everything from insertion point to end of array
"RTN","SCDXMSG1",320,0)
 F  S INSRTPNT=$O(@XMITARRY@(INSRTPNT)) Q:(INSRTPNT="")  K @XMITARRY@(INSRTPNT)
"RTN","SCDXMSG1",321,0)
 ;Done
"RTN","SCDXMSG1",322,0)
 Q
"RTN","SCMCHLS")
0^7^B5637692
"RTN","SCMCHLS",1,0)
SCMCHLS ;BP/DJB - PCMM HL7 Segment Utils ; 12/13/99 12:40pm
"RTN","SCMCHLS",2,0)
 ;;5.3;Scheduling;**177,210,212,293**;AUG 13, 1993
"RTN","SCMCHLS",3,0)
 ;
"RTN","SCMCHLS",4,0)
 ;Ref rtn: SCDXMSG1
"RTN","SCMCHLS",5,0)
 ;
"RTN","SCMCHLS",6,0)
 ;--> Build HL7 segments
"RTN","SCMCHLS",7,0)
BLDEVN ;Build EVN segment
"RTN","SCMCHLS",8,0)
 S VAFEVN=$$EN^VAFHLEVN(EVNTHL7,EVNTDATE,VAFSTR,HL("Q"),HL("FS"))
"RTN","SCMCHLS",9,0)
 Q
"RTN","SCMCHLS",10,0)
BLDPID ;Build PID segment
"RTN","SCMCHLS",11,0)
 ;S VAFPID=$$EN^VAFHLPID(DFN,VAFSTR)
"RTN","SCMCHLS",12,0)
 S VAFPID=$$EN^VAFCPID(DFN,VAFSTR) ;Use CIRN version
"RTN","SCMCHLS",13,0)
 D SETMAR^SCMSVUT0(.VAFPID,HL("Q"),HL("FS"))
"RTN","SCMCHLS",14,0)
 Q
"RTN","SCMCHLS",15,0)
BLDZPC ;Build ZPC segment
"RTN","SCMCHLS",16,0)
 ;djb/bp Patch 210. Sequentially number multiple ZPC segments.
"RTN","SCMCHLS",17,0)
 ;new code begin
"RTN","SCMCHLS",18,0)
 S SCSEQ=$G(SCSEQ)+1 ;Increment ZPC sequence number.
"RTN","SCMCHLS",19,0)
 S VAFZPC=$$ZPC^SCMCHLZ("",ID,DATA,SCSEQ)
"RTN","SCMCHLS",20,0)
 ;new code end
"RTN","SCMCHLS",21,0)
 ;old code begin
"RTN","SCMCHLS",22,0)
 ;S VAFZPC=$$ZPC^SCMCHLZ("",ID,DATA)
"RTN","SCMCHLS",23,0)
 ;old code end
"RTN","SCMCHLS",24,0)
 Q
"RTN","SCMCHLS",25,0)
 ;
"RTN","SCMCHLS",26,0)
 ;--> Copy HL7 segments into HL7 message
"RTN","SCMCHLS",27,0)
CPYEVN ;Copy EVN segment
"RTN","SCMCHLS",28,0)
 ;Add 1 as 3rd subscript so number of subscripts matches ZPC segment
"RTN","SCMCHLS",29,0)
 M @XMITARRY@(SUB,SEGNAME,1)=VAFEVN
"RTN","SCMCHLS",30,0)
 Q
"RTN","SCMCHLS",31,0)
CPYPID ;Copy PID segment
"RTN","SCMCHLS",32,0)
 ;Add 1 as 3rd subscript so number of subscripts matches ZPC segment
"RTN","SCMCHLS",33,0)
 M @XMITARRY@(SUB,SEGNAME,1)=VAFPID
"RTN","SCMCHLS",34,0)
 Q
"RTN","SCMCHLS",35,0)
CPYZPC ;Copy ZPC segment
"RTN","SCMCHLS",36,0)
 M @XMITARRY@($P(ID,"-",1),"ZPC",ID)=VAFZPC
"RTN","SCMCHLS",37,0)
 Q
"RTN","SCMCHLS",38,0)
 ;
"RTN","SCMCHLS",39,0)
 ;--> Delete HL7 segment variables
"RTN","SCMCHLS",40,0)
DELEVN ;Delete EVN variable
"RTN","SCMCHLS",41,0)
 KILL VAFEVN
"RTN","SCMCHLS",42,0)
 Q
"RTN","SCMCHLS",43,0)
DELPID ;Delete PID variable
"RTN","SCMCHLS",44,0)
 KILL VAFPID
"RTN","SCMCHLS",45,0)
 Q
"RTN","SCMCHLS",46,0)
DELZPC ;Delete ZPC variable
"RTN","SCMCHLS",47,0)
 KILL VAFZPC
"RTN","SCMCHLS",48,0)
 Q
"RTN","SCMCHLS",49,0)
 ;
"RTN","SCMCHLS",50,0)
SEGMENTS(EVNTTYPE,SEGARRY) ;Build list of HL7 segments for a given event type
"RTN","SCMCHLS",51,0)
 ;
"RTN","SCMCHLS",52,0)
 ; Input: EVNTTYPE - Event type to build list for A08 & A23 are the
"RTN","SCMCHLS",53,0)
 ;                   only types currently supported.
"RTN","SCMCHLS",54,0)
 ;                   Default=A08
"RTN","SCMCHLS",55,0)
 ;         SEGARRY - Array to place output in (full global reference)
"RTN","SCMCHLS",56,0)
 ;                   Defaul=^TMP("SCMC SEGMENTS",$J)
"RTN","SCMCHLS",57,0)
 ;Output: SEGARRY(Seq,Name)=Fields
"RTN","SCMCHLS",58,0)
 ;             Seq - Sequence number to order segments as they should
"RTN","SCMCHLS",59,0)
 ;                   be placed in the HL7 message.
"RTN","SCMCHLS",60,0)
 ;            Name - Name of HL7 segment.
"RTN","SCMCHLS",61,0)
 ;          Fields - List of fields used by PCMM. VAFSTR would be set
"RTN","SCMCHLS",62,0)
 ;                   to this value.
"RTN","SCMCHLS",63,0)
 ;  Note: MSH segment is not included
"RTN","SCMCHLS",64,0)
 ;
"RTN","SCMCHLS",65,0)
 ;Check input
"RTN","SCMCHLS",66,0)
 S EVNTTYPE=$G(EVNTTYPE)
"RTN","SCMCHLS",67,0)
 S:(EVNTTYPE'="A23") EVNTTYPE="A08"
"RTN","SCMCHLS",68,0)
 S SEGARRY=$G(SEGARRY)
"RTN","SCMCHLS",69,0)
 S:(SEGARRY="") SEGARRY="^TMP(""SCMC SEGMENTS"","_$J_")"
"RTN","SCMCHLS",70,0)
 ;
"RTN","SCMCHLS",71,0)
 ;Segments used by A08
"RTN","SCMCHLS",72,0)
 S @SEGARRY@(1,"EVN")="1,2"
"RTN","SCMCHLS",73,0)
 S @SEGARRY@(2,"PID")="1,2,3,4,5,6,7,8,10N,11,12,13,14,16,17,19,22"
"RTN","SCMCHLS",74,0)
 S @SEGARRY@(3,"ZPC")="1,2,3,4,5,6,8" ;bp/ar and alb/rpm Patch 212
"RTN","SCMCHLS",75,0)
 Q
"RTN","SCMCHLS",76,0)
 ;
"RTN","SCMCHLS",77,0)
UNWIND(XMITARRY,INSRTPNT) ;Remove all data that was put into transmit array.
"RTN","SCMCHLS",78,0)
 ;
"RTN","SCMCHLS",79,0)
 ; Input: XMITARRY - Array containing HL7 message (full global ref).
"RTN","SCMCHLS",80,0)
 ;                   Default=^TMP("HLS",$J).
"RTN","SCMCHLS",81,0)
 ;        INSRTPNT - Where to begin deletion from.
"RTN","SCMCHLS",82,0)
 ;                   Default=1
"RTN","SCMCHLS",83,0)
 ;Output: None
"RTN","SCMCHLS",84,0)
 ;
"RTN","SCMCHLS",85,0)
 ;Check input
"RTN","SCMCHLS",86,0)
 S:$G(XMITARRY)="" XMITARRY="^TMP(""HLS"","_$J_")"
"RTN","SCMCHLS",87,0)
 S:$G(INSRTPNT)="" INSRTPNT=1
"RTN","SCMCHLS",88,0)
 ;
"RTN","SCMCHLS",89,0)
 ;Remove insertion point from array
"RTN","SCMCHLS",90,0)
 KILL @XMITARRY@(INSRTPNT)
"RTN","SCMCHLS",91,0)
 ;Remove everything from insertion point to end of array
"RTN","SCMCHLS",92,0)
 F  S INSRTPNT=$O(@XMITARRY@(INSRTPNT)) Q:INSRTPNT=""  KILL @XMITARRY@(INSRTPNT)
"RTN","SCMCHLS",93,0)
 ;Done
"RTN","SCMCHLS",94,0)
 Q
"RTN","SCMCHLS",95,0)
COUNT(VALER) ;counts the number of errored encounters found.
"RTN","SCMCHLS",96,0)
 ;
"RTN","SCMCHLS",97,0)
 ; Input: VALER - Array containing error messages.
"RTN","SCMCHLS",98,0)
 ;Output: Number of errors
"RTN","SCMCHLS",99,0)
 ;
"RTN","SCMCHLS",100,0)
 NEW VAR,CNT
"RTN","SCMCHLS",101,0)
 S CNT=0
"RTN","SCMCHLS",102,0)
 S VAR=""
"RTN","SCMCHLS",103,0)
 F  S VAR=$O(@VALER@(VAR)) Q:VAR']""  S CNT=CNT+1
"RTN","SCMCHLS",104,0)
 Q CNT
"RTN","SCMSVPID")
0^1^B18492738
"RTN","SCMSVPID",1,0)
SCMSVPID ;ALB/ESD HL7 PID Segment Validation ; 23 Oct 98  3:36 PM
"RTN","SCMSVPID",2,0)
 ;;5.3;Scheduling;**44,66,162,254,293**;Aug 13, 1993
"RTN","SCMSVPID",3,0)
 ;
"RTN","SCMSVPID",4,0)
 ;
"RTN","SCMSVPID",5,0)
EN(PIDSEG,HLQ,HLFS,HLECH,VALERR,ENCDT,EVNTHL7) ;
"RTN","SCMSVPID",6,0)
 ; Entry point to return the HL7 PID (Patient ID) validation segment
"RTN","SCMSVPID",7,0)
 ;
"RTN","SCMSVPID",8,0)
 ;  Input:  PIDSEG  - Array containing PID segment (pass by ref)
"RTN","SCMSVPID",9,0)
 ;                    PIDSEG = First 245 characters
"RTN","SCMSVPID",10,0)
 ;                    PIDSEG(1..n) = Continuation nodes
"RTN","SCMSVPID",11,0)
 ;             HLQ  - HL7 null variable
"RTN","SCMSVPID",12,0)
 ;            HLFS  - HL7 field separator
"RTN","SCMSVPID",13,0)
 ;           HLECH  - HL7 encoding characters
"RTN","SCMSVPID",14,0)
 ;          VALERR  - The array name to put the errors in
"RTN","SCMSVPID",15,0)
 ;           ENCDT  - The date/time of the encounter.
"RTN","SCMSVPID",16,0)
 ;         EVNTHL7  - Event type ("A08" for add/edit, "A23" for delete)
"RTN","SCMSVPID",17,0)
 ;
"RTN","SCMSVPID",18,0)
 ; Output:  1 if PID passed validity check
"RTN","SCMSVPID",19,0)
 ;          Error message if PID failed validity check in form of:
"RTN","SCMSVPID",20,0)
 ;          -1^"xxx failed validity check" (xxx=element in PID segment)
"RTN","SCMSVPID",21,0)
 ;
"RTN","SCMSVPID",22,0)
 ;Declare variables
"RTN","SCMSVPID",23,0)
 N MSG,SEQ,SD,PARSEG,SEG
"RTN","SCMSVPID",24,0)
 S PARSEG=$NA(^TMP("SCMSVPID",$J,"PARSEG"))
"RTN","SCMSVPID",25,0)
 K @PARSEG
"RTN","SCMSVPID",26,0)
 S MSG="-1^Element in PID segment failed validity check"
"RTN","SCMSVPID",27,0)
 ;-Set encoding chars to standard HL7 encoding chars if not passed in
"RTN","SCMSVPID",28,0)
 I '$D(HLQ) S HLQ=$C(34,34)
"RTN","SCMSVPID",29,0)
 S HLECH=$G(HLECH)
"RTN","SCMSVPID",30,0)
 S:HLECH="" HLECH="~|\&"
"RTN","SCMSVPID",31,0)
 ;-Create array of elements to validate
"RTN","SCMSVPID",32,0)
 F SEQ=3,5,7,8,10,11,16,17,19,22 S SD(SEQ)=""  ;Elements for 'add' or 'edit' transactions
"RTN","SCMSVPID",33,0)
 I $G(EVNTHL7)="A23" K SD F I=3,19 S SD(SEQ)=""  ;Elements for 'delete' transactions
"RTN","SCMSVPID",34,0)
 ;
"RTN","SCMSVPID",35,0)
 S SEG="PID"
"RTN","SCMSVPID",36,0)
 D VALIDATE^SCMSVUT0(SEG,$G(PIDSEG),"0006",VALERR,.CNT)
"RTN","SCMSVPID",37,0)
 I $D(@VALERR@(SEG)) G ENQ
"RTN","SCMSVPID",38,0)
 ;-Parse out fields
"RTN","SCMSVPID",39,0)
 D SEGPRSE^SCMSVUT5("PIDSEG",PARSEG,HLFS)
"RTN","SCMSVPID",40,0)
 ;-Remember DFN
"RTN","SCMSVPID",41,0)
 ;S DFN=$$CONVERT^SCMSVUT0($G(@PARSEG@(3)),$E(HLECH,1),HLQ)
"RTN","SCMSVPID",42,0)
 ;S DFN=+$P(DFN,$E(HLECH,1),1)
"RTN","SCMSVPID",43,0)
 ;-Validate segment name
"RTN","SCMSVPID",44,0)
 S CNT=1
"RTN","SCMSVPID",45,0)
 D VALIDATE^SCMSVUT0(SEG,$G(@PARSEG@(0)),$P($T(0),";",3),VALERR,.CNT)
"RTN","SCMSVPID",46,0)
 ;-Validate fields
"RTN","SCMSVPID",47,0)
 S SEQ=0
"RTN","SCMSVPID",48,0)
 F  S SEQ=+$O(SD(SEQ)) Q:'SEQ  D
"RTN","SCMSVPID",49,0)
 .I SEQ=11 D ADDRCHK(SEG,VALERR,.CNT) Q
"RTN","SCMSVPID",50,0)
 .I (SEQ=10)!(SEQ=22) D  Q
"RTN","SCMSVPID",51,0)
 ..N PARSEQ,REP,COMP
"RTN","SCMSVPID",52,0)
 ..S PARSEQ=$NA(^TMP("SCMSVPID",$J,"PARSEQ"))
"RTN","SCMSVPID",53,0)
 ..K @PARSEQ
"RTN","SCMSVPID",54,0)
 ..D SEQPRSE^SCMSVUT5($NA(@PARSEG@(SEQ)),PARSEQ,HLECH)
"RTN","SCMSVPID",55,0)
 ..S REP=0
"RTN","SCMSVPID",56,0)
 ..F  S REP=+$O(@PARSEQ@(REP)) Q:'REP  D
"RTN","SCMSVPID",57,0)
 ...S DATA=$$CONVERT^SCMSVUT0($G(@PARSEQ@(REP,1)),$E(HLECH,4),HLQ)
"RTN","SCMSVPID",58,0)
 ...D VALIDATE^SCMSVUT0(SEG,$P(DATA,$E(HLECH,1),1),$P($T(@(SEQ)),";",3),VALERR,.CNT)
"RTN","SCMSVPID",59,0)
 ..K @PARSEQ
"RTN","SCMSVPID",60,0)
 .S DATA=$G(@PARSEG@(SEQ))
"RTN","SCMSVPID",61,0)
 .S DATA=$$CONVERT^SCMSVUT0(DATA,$E(HLECH,1),HLQ)
"RTN","SCMSVPID",62,0)
 .S:SEQ=3 DATA=$P(DATA,$E(HLECH,1),1)
"RTN","SCMSVPID",63,0)
 .S:SEQ=5 DATA=$$FMNAME^HLFNC(DATA)
"RTN","SCMSVPID",64,0)
 .S:SEQ=7 DATA=$$FMDATE^HLFNC(DATA)
"RTN","SCMSVPID",65,0)
 .D VALIDATE^SCMSVUT0(SEG,DATA,$P($T(@(SEQ)),";",3),VALERR,.CNT)
"RTN","SCMSVPID",66,0)
 ;
"RTN","SCMSVPID",67,0)
ENQ K @PARSEG
"RTN","SCMSVPID",68,0)
 Q $S($D(@VALERR@(SEG,1)):MSG,1:1)
"RTN","SCMSVPID",69,0)
 ;
"RTN","SCMSVPID",70,0)
 ;
"RTN","SCMSVPID",71,0)
ADDRCHK(SEG,VALERR,CNT) ;- Validity check for address (seq 11)
"RTN","SCMSVPID",72,0)
 ;
"RTN","SCMSVPID",73,0)
 ;Declare variables
"RTN","SCMSVPID",74,0)
 N PARSEQ,REP,COMP,DATA,TYPE,OFFSET,CODE,STATE,SKIP
"RTN","SCMSVPID",75,0)
 ;Parse sequence into repeated components
"RTN","SCMSVPID",76,0)
 S PARSEQ=$NA(^TMP("SCMSVPID",$J,"PARSEQ"))
"RTN","SCMSVPID",77,0)
 K @PARSEQ
"RTN","SCMSVPID",78,0)
 D SEQPRSE^SCMSVUT5($NA(@PARSEG@(11)),PARSEQ,HLECH)
"RTN","SCMSVPID",79,0)
 ;Validate
"RTN","SCMSVPID",80,0)
 S REP=0
"RTN","SCMSVPID",81,0)
 F  S REP=+$O(@PARSEQ@(REP)) Q:'REP  D
"RTN","SCMSVPID",82,0)
 .;Get address type
"RTN","SCMSVPID",83,0)
 .S TYPE=$$CONVERT^SCMSVUT0($G(@PARSEQ@(REP,7)),$E(HLECH,4),HLQ)
"RTN","SCMSVPID",84,0)
 .S:TYPE="" TYPE="P" S:TYPE'="P" TYPE="VACA"
"RTN","SCMSVPID",85,0)
 .;Calculate error code offset
"RTN","SCMSVPID",86,0)
 .S OFFSET=$S($E(TYPE,1,4)="VACA":200,TYPE="P":0,1:0)
"RTN","SCMSVPID",87,0)
 .;If it's a confidential address, everything is allowed to be empty
"RTN","SCMSVPID",88,0)
 .I $E(TYPE,1,4)="VACA" S SKIP=1 D  Q:SKIP
"RTN","SCMSVPID",89,0)
 ..F SEQ=1,2,3,4,5,8,9,12 D  Q:'SKIP
"RTN","SCMSVPID",90,0)
 ...S DATA=$$CONVERT^SCMSVUT0($G(@PARSEQ@(REP,SEQ)),$E(HLECH,4),HLQ)
"RTN","SCMSVPID",91,0)
 ...I SEQ=12 Q:DATA=$E(HLECH,4)  S SKIP=0 Q
"RTN","SCMSVPID",92,0)
 ...I DATA'="" S SKIP=0
"RTN","SCMSVPID",93,0)
 .;Validate components
"RTN","SCMSVPID",94,0)
 .S STATE=0
"RTN","SCMSVPID",95,0)
 .F SEQ=1,2,3,4,5,7,9,12 D
"RTN","SCMSVPID",96,0)
 ..I TYPE="P" Q:((SEQ=7)!(SEQ=12))
"RTN","SCMSVPID",97,0)
 ..S DATA=$$CONVERT^SCMSVUT0($G(@PARSEQ@(REP,SEQ)),$E(HLECH,4),HLQ)
"RTN","SCMSVPID",98,0)
 ..I SEQ=9 S STATE=$G(@PARSEQ@(REP,4)) I STATE'="" S STATE=+$O(^DIC(5,"C",STATE,""))
"RTN","SCMSVPID",99,0)
 ..S CODE=$S(SEQ<10:"110",1:"11")_SEQ
"RTN","SCMSVPID",100,0)
 ..S CODE=OFFSET+$P($T(@(CODE)),";",3)
"RTN","SCMSVPID",101,0)
 ..D VALIDATE^SCMSVUT0(SEG,DATA,CODE,VALERR,.CNT)
"RTN","SCMSVPID",102,0)
 K @PARSEQ
"RTN","SCMSVPID",103,0)
 Q
"RTN","SCMSVPID",104,0)
 ;
"RTN","SCMSVPID",105,0)
ERR ;;Invalid or missing patient ID data for encounter (HL7 PID data segment)
"RTN","SCMSVPID",106,0)
 ;
"RTN","SCMSVPID",107,0)
 ;
"RTN","SCMSVPID",108,0)
 ;- PID data elements validated
"RTN","SCMSVPID",109,0)
 ;
"RTN","SCMSVPID",110,0)
0 ;;0035;HL7 SEGMENT NAME
"RTN","SCMSVPID",111,0)
3 ;;2030;PATIENT ID (INTERNAL)
"RTN","SCMSVPID",112,0)
5 ;;2000;NAME
"RTN","SCMSVPID",113,0)
7 ;;2050;DATE OF BIRTH
"RTN","SCMSVPID",114,0)
8 ;;2100;SEX
"RTN","SCMSVPID",115,0)
10 ;;2150;RACE
"RTN","SCMSVPID",116,0)
1101 ;;2200;STREET ADDRESS 1
"RTN","SCMSVPID",117,0)
1102 ;;2210;STREET ADDRESS 2
"RTN","SCMSVPID",118,0)
1103 ;;2220;CITY
"RTN","SCMSVPID",119,0)
1104 ;;2230;STATE
"RTN","SCMSVPID",120,0)
1105 ;;2240;ZIP CODE
"RTN","SCMSVPID",121,0)
1107 ;;2270;ADDRESS TYPE
"RTN","SCMSVPID",122,0)
1109 ;;2250;COUNTY CODE
"RTN","SCMSVPID",123,0)
1112 ;;2280;ADDRESS START/STOP DATE
"RTN","SCMSVPID",124,0)
16 ;;2300;MARITAL STATUS
"RTN","SCMSVPID",125,0)
17 ;;2330;RELIGION
"RTN","SCMSVPID",126,0)
19 ;;2360;SSN
"RTN","SCMSVPID",127,0)
22 ;;2380;ETHNICITY
"RTN","SCMSVUT0")
0^3^B39319319
"RTN","SCMSVUT0",1,0)
SCMSVUT0 ;ALB/ESD HL7 Segment Validation Utilities ;05/09/96
"RTN","SCMSVUT0",2,0)
 ;;5.3;Scheduling;**44,55,66,132,245,254,293**;Aug 13, 1993
"RTN","SCMSVUT0",3,0)
 ;
"RTN","SCMSVUT0",4,0)
 ;
"RTN","SCMSVUT0",5,0)
CONVERT(SEG,HLFS,HLQ) ; Convert HLQ ("") to null in segment
"RTN","SCMSVUT0",6,0)
 ;      Input:  SEG  = HL7 segment
"RTN","SCMSVUT0",7,0)
 ;             HLFS  = HL7 field separator
"RTN","SCMSVUT0",8,0)
 ;              HLQ  = HL7 "" character
"RTN","SCMSVUT0",9,0)
 ;
"RTN","SCMSVUT0",10,0)
 ;     Output:  SEG  = Segment where HLQ replaced with null
"RTN","SCMSVUT0",11,0)
 ;
"RTN","SCMSVUT0",12,0)
 ;
"RTN","SCMSVUT0",13,0)
 N I
"RTN","SCMSVUT0",14,0)
 F I=1:1:55 I $P(SEG,HLFS,I)=HLQ S $P(SEG,HLFS,I)=""
"RTN","SCMSVUT0",15,0)
 Q SEG
"RTN","SCMSVUT0",16,0)
 ;
"RTN","SCMSVUT0",17,0)
SETID(SDOE,SDDELOE) ; Set PCE Unique Visit Number in field #.2 of #409.68
"RTN","SCMSVUT0",18,0)
 ;      Input:   SDOE = IEN of Outpatient Encounter (#409.68) file
"RTN","SCMSVUT0",19,0)
 ;            SDDELOE = IEN of Deleted Outpatient Encounter (#409.74) file
"RTN","SCMSVUT0",20,0)
 ;
"RTN","SCMSVUT0",21,0)
 ;     Output:   Unique Visit Number set in field #.2 of #409.68
"RTN","SCMSVUT0",22,0)
 ;               or field #.2 of #409.74
"RTN","SCMSVUT0",23,0)
 ;
"RTN","SCMSVUT0",24,0)
 ;
"RTN","SCMSVUT0",25,0)
 N SDOEC,SDARRY
"RTN","SCMSVUT0",26,0)
 S SDOEC=0
"RTN","SCMSVUT0",27,0)
 S SDOE=+$G(SDOE)
"RTN","SCMSVUT0",28,0)
 S SDDELOE=+$G(SDDELOE)
"RTN","SCMSVUT0",29,0)
 ;
"RTN","SCMSVUT0",30,0)
 ;-Outpatient Enc pointer passed in; use file #409.68
"RTN","SCMSVUT0",31,0)
 S SDARRY="^SCE("_SDOE_",0)"
"RTN","SCMSVUT0",32,0)
 ;
"RTN","SCMSVUT0",33,0)
 ;-Deleted Outpatient Enc pointer passed in; use file #409.74
"RTN","SCMSVUT0",34,0)
 S:(SDDELOE) SDARRY="^SD(409.74,"_SDDELOE_",1)"
"RTN","SCMSVUT0",35,0)
 ;
"RTN","SCMSVUT0",36,0)
 ;-Quit if no encounter record or deleted encounter record
"RTN","SCMSVUT0",37,0)
 Q:($G(@SDARRY)="")
"RTN","SCMSVUT0",38,0)
 ;-Add unique ID to parent
"RTN","SCMSVUT0",39,0)
 D GETID
"RTN","SCMSVUT0",40,0)
 ;
"RTN","SCMSVUT0",41,0)
 ;-Add unique ID to children for Outpatient Enc only (quit if no child encounter record)
"RTN","SCMSVUT0",42,0)
 I (SDOE) F  S SDOEC=+$O(^SCE("APAR",SDOE,SDOEC)) Q:'SDOEC  S SDARRY="^SCE("_SDOEC_",0)" Q:($G(@SDARRY)="")  D GETID
"RTN","SCMSVUT0",43,0)
 Q
"RTN","SCMSVUT0",44,0)
 ;
"RTN","SCMSVUT0",45,0)
GETID ;Get unique visit ID
"RTN","SCMSVUT0",46,0)
 S:$P($G(@SDARRY),"^",20)="" $P(@SDARRY,"^",20)=$$IEN2VID^VSIT($P(@SDARRY,"^",5))
"RTN","SCMSVUT0",47,0)
 Q
"RTN","SCMSVUT0",48,0)
 ;
"RTN","SCMSVUT0",49,0)
SETPRTY(SDOE) ;Set outpatient provider type in field #.06 of V PROVIDER
"RTN","SCMSVUT0",50,0)
 ;      Input:  SDOE = IEN of Outpatient Encounter (#409.68) file
"RTN","SCMSVUT0",51,0)
 ;
"RTN","SCMSVUT0",52,0)
 ;     Output:  Provider Type set in field #.06 of V PROVIDER
"RTN","SCMSVUT0",53,0)
 ;
"RTN","SCMSVUT0",54,0)
 ;
"RTN","SCMSVUT0",55,0)
 N SDPRTYP,SDVPRV,SDPRVS
"RTN","SCMSVUT0",56,0)
 S SDOE=+$G(SDOE),SDVPRV=0
"RTN","SCMSVUT0",57,0)
 ;
"RTN","SCMSVUT0",58,0)
 ;- Get all provider IENs for encounter
"RTN","SCMSVUT0",59,0)
 D GETPRV^SDOE(SDOE,"SDPRVS")
"RTN","SCMSVUT0",60,0)
 F  S SDVPRV=+$O(SDPRVS(SDVPRV)) Q:'SDVPRV  D
"RTN","SCMSVUT0",61,0)
 . S SDPRTYP=0
"RTN","SCMSVUT0",62,0)
 . ;
"RTN","SCMSVUT0",63,0)
 . ;- If no prov type, call API and add provider type to record
"RTN","SCMSVUT0",64,0)
 . S:$P(SDPRVS(SDVPRV),"^",6)="" SDPRTYP=$$GET^XUA4A72(+SDPRVS(SDVPRV),+$G(^SCE(SDOE,0)))
"RTN","SCMSVUT0",65,0)
 . I +$G(SDPRTYP)>0 D PCLASS^PXAPIOE(SDVPRV)
"RTN","SCMSVUT0",66,0)
 Q
"RTN","SCMSVUT0",67,0)
 ;
"RTN","SCMSVUT0",68,0)
SETMAR(PIDSEG,HLQ,HLFS) ; Set marital status prior to PID segment validation
"RTN","SCMSVUT0",69,0)
 ;Input:   PIDSEG = Array containing PID segment (pass by reference)
"RTN","SCMSVUT0",70,0)
 ;                  PIDSEG = First 245 characters
"RTN","SCMSVUT0",71,0)
 ;                  PIDSEG(1..n) = Continuation nodes
"RTN","SCMSVUT0",72,0)
 ;            HLQ = HL7 null variable
"RTN","SCMSVUT0",73,0)
 ;           HLFS = HL7 field separator
"RTN","SCMSVUT0",74,0)
 ;Output:  Marital status changed from null to "U" (UNKNOWN) prior to
"RTN","SCMSVUT0",75,0)
 ;         validation of PID segment and transmittal to AAC
"RTN","SCMSVUT0",76,0)
 ;Note: Assumes all input exists and is valid
"RTN","SCMSVUT0",77,0)
 ;
"RTN","SCMSVUT0",78,0)
 ;Declare variables
"RTN","SCMSVUT0",79,0)
 N REBLD,TMPARR,X
"RTN","SCMSVUT0",80,0)
 ;Parse segment
"RTN","SCMSVUT0",81,0)
 D SEGPRSE^SCMSVUT5($NA(PIDSEG),"TMPARR",HLFS)
"RTN","SCMSVUT0",82,0)
 ;Change marital status (if needed)
"RTN","SCMSVUT0",83,0)
 S REBLD=0
"RTN","SCMSVUT0",84,0)
 S X=$G(TMPARR(16))
"RTN","SCMSVUT0",85,0)
 I ((X="")!(X=HLQ)) S TMPARR(16)="U",REBLD=1
"RTN","SCMSVUT0",86,0)
 ;Rebuild segment (if needed)
"RTN","SCMSVUT0",87,0)
 I REBLD K TMPARR(0),PIDSEG D MAKEIT^VAFHLU("PID",.TMPARR,.PIDSEG,.PIDSEG)
"RTN","SCMSVUT0",88,0)
 Q
"RTN","SCMSVUT0",89,0)
 ;
"RTN","SCMSVUT0",90,0)
SETPOW(DFN,ZPDSEG,HLQ,HLFS)     ; Set POW Status Indicated field prior to ZPD segment validation
"RTN","SCMSVUT0",91,0)
 ;
"RTN","SCMSVUT0",92,0)
 ;     Input:      DFN = IEN of Patient (#2) file
"RTN","SCMSVUT0",93,0)
 ;              ZPDSEG = HL7 ZPD segment
"RTN","SCMSVUT0",94,0)
 ;                 HLQ = HL7 null variable
"RTN","SCMSVUT0",95,0)
 ;                HLFS = HL7 field separator
"RTN","SCMSVUT0",96,0)
 ;
"RTN","SCMSVUT0",97,0)
 ;    Output:  If Veteran and POW Status Indicated field = null, set to
"RTN","SCMSVUT0",98,0)
 ;              U (Unknown)
"RTN","SCMSVUT0",99,0)
 ;             If Non-Veteran, set to null
"RTN","SCMSVUT0",100,0)
 ;
"RTN","SCMSVUT0",101,0)
 S DFN=$G(DFN),ZPDSEG=$G(ZPDSEG)
"RTN","SCMSVUT0",102,0)
 G SETPOWQ:(DFN="")!(ZPDSEG="")
"RTN","SCMSVUT0",103,0)
 I $P($G(^DPT(DFN,"VET")),"^")="Y",($P(ZPDSEG,HLFS,18)=""!($P(ZPDSEG,HLFS,18)=HLQ)) S $P(ZPDSEG,HLFS,18)="U"
"RTN","SCMSVUT0",104,0)
 I $P($G(^DPT(DFN,"VET")),"^")="N" S $P(ZPDSEG,HLFS,18)=HLQ
"RTN","SCMSVUT0",105,0)
 ;
"RTN","SCMSVUT0",106,0)
SETPOWQ Q ZPDSEG
"RTN","SCMSVUT0",107,0)
 ;
"RTN","SCMSVUT0",108,0)
 ;
"RTN","SCMSVUT0",109,0)
SETVSI(DFN,ZSPSEG,HLQ,HLFS) ;Set Vietnam Service Indicated field prior to ZSP segment validation
"RTN","SCMSVUT0",110,0)
 ;
"RTN","SCMSVUT0",111,0)
 ;     Input:      DFN = IEN of Patient (#2) file
"RTN","SCMSVUT0",112,0)
 ;              ZSPSEG = HL7 ZSP segment
"RTN","SCMSVUT0",113,0)
 ;                 HLQ = HL7 null variable
"RTN","SCMSVUT0",114,0)
 ;                HLFS = HL7 field separator
"RTN","SCMSVUT0",115,0)
 ;
"RTN","SCMSVUT0",116,0)
 ;    Output:  If Veteran and Vietnam Service Indicated field = null,
"RTN","SCMSVUT0",117,0)
 ;              set to U (Unknown)
"RTN","SCMSVUT0",118,0)
 ;             If Non-Veteran, set to null
"RTN","SCMSVUT0",119,0)
 ;
"RTN","SCMSVUT0",120,0)
 S DFN=$G(DFN),ZSPSEG=$G(ZSPSEG)
"RTN","SCMSVUT0",121,0)
 G SETVSIQ:(DFN="")!(ZSPSEG="")
"RTN","SCMSVUT0",122,0)
 I $P($G(^DPT(DFN,"VET")),"^")="Y",($P(ZSPSEG,HLFS,6)=""!($P(ZSPSEG,HLFS,6)=HLQ)) S $P(ZSPSEG,HLFS,6)="U"
"RTN","SCMSVUT0",123,0)
 I $P($G(^DPT(DFN,"VET")),"^")="N" S $P(ZSPSEG,HLFS,6)=HLQ
"RTN","SCMSVUT0",124,0)
 ;
"RTN","SCMSVUT0",125,0)
SETVSIQ Q ZSPSEG
"RTN","SCMSVUT0",126,0)
 ;
"RTN","SCMSVUT0",127,0)
 ;
"RTN","SCMSVUT0",128,0)
 ;
"RTN","SCMSVUT0",129,0)
 ;The following subroutines all have to do with the validation of
"RTN","SCMSVUT0",130,0)
 ;data using the same edit checks that are used by Austin.
"RTN","SCMSVUT0",131,0)
 ;
"RTN","SCMSVUT0",132,0)
HL7SEGNM(SEG,DATA) ;checks the validity of the HL7 segment name passed in.
"RTN","SCMSVUT0",133,0)
 ;INPUT    SEG  - the HL7 segment name
"RTN","SCMSVUT0",134,0)
 ;         DATA - the data to compare. In this case the HL7 segment name.
"RTN","SCMSVUT0",135,0)
 ;
"RTN","SCMSVUT0",136,0)
 ;OUTPUT   0 (ZERO) if not validate
"RTN","SCMSVUT0",137,0)
 ;         1 if validated
"RTN","SCMSVUT0",138,0)
 ;
"RTN","SCMSVUT0",139,0)
 I '$D(SEG)!('$D(DATA)) Q 0
"RTN","SCMSVUT0",140,0)
 Q $S(SEG=DATA:1,1:0)
"RTN","SCMSVUT0",141,0)
 ;
"RTN","SCMSVUT0",142,0)
EVTTYP(SEG,DATA) ;checks the event type of the segment passed in.
"RTN","SCMSVUT0",143,0)
 ;INPUT  SEG  - The HL7 segment name in question
"RTN","SCMSVUT0",144,0)
 ;       DATA - The event type from the HL7 segment in question.
"RTN","SCMSVUT0",145,0)
 ;
"RTN","SCMSVUT0",146,0)
 ;OUTPUT   0 (ZERO) if not validate
"RTN","SCMSVUT0",147,0)
 ;         1 if validated
"RTN","SCMSVUT0",148,0)
 ;
"RTN","SCMSVUT0",149,0)
 I '$D(SEG)!('$D(DATA)) Q 0
"RTN","SCMSVUT0",150,0)
 I SEG="EVN"&(DATA="A08"!(DATA="A23")) Q 1
"RTN","SCMSVUT0",151,0)
 Q 0
"RTN","SCMSVUT0",152,0)
 ;
"RTN","SCMSVUT0",153,0)
EVTDTTM(DATA) ;Checks the date and time to ensure it is correct.
"RTN","SCMSVUT0",154,0)
 ;INPUT  DATA - this is the date and time in quesiton.
"RTN","SCMSVUT0",155,0)
 ;
"RTN","SCMSVUT0",156,0)
 ;OUTPUT  0 (ZERO) if not validate
"RTN","SCMSVUT0",157,0)
 ;        1 if validated
"RTN","SCMSVUT0",158,0)
 ;
"RTN","SCMSVUT0",159,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",160,0)
 N STRTDT,%DT,X,Y
"RTN","SCMSVUT0",161,0)
 S STRTDT=+$O(^SD(404.91,0))
"RTN","SCMSVUT0",162,0)
 S STRTDT=$P($G(^SD(404.91,STRTDT,"AMB")),U,2)
"RTN","SCMSVUT0",163,0)
 I 'STRTDT Q 0
"RTN","SCMSVUT0",164,0)
 S %DT="T",%DT(0)=STRTDT,X=DATA
"RTN","SCMSVUT0",165,0)
 D ^%DT
"RTN","SCMSVUT0",166,0)
 Q $S(Y=-1:0,1:1)
"RTN","SCMSVUT0",167,0)
 ;
"RTN","SCMSVUT0",168,0)
VALIDATE(SEG,DATA,ERRCOD,VALERR,CTR) ;
"RTN","SCMSVUT0",169,0)
 ;
"RTN","SCMSVUT0",170,0)
 N ERRIEN,ERRCHK,RES
"RTN","SCMSVUT0",171,0)
 S ERRIEN=+$O(^SD(409.76,"B",ERRCOD,""))
"RTN","SCMSVUT0",172,0)
 I 'ERRIEN S @VALERR@(SEG,CTR)=ERRCOD D INCR Q
"RTN","SCMSVUT0",173,0)
 S ERRCHK=$G(^SD(409.76,ERRIEN,"CHK"))
"RTN","SCMSVUT0",174,0)
 I ERRCHK="" S @VALERR@(SEG,CTR)=ERRCOD D INCR Q
"RTN","SCMSVUT0",175,0)
 X ERRCHK
"RTN","SCMSVUT0",176,0)
 I 'RES S @VALERR@(SEG,CTR)=ERRCOD D INCR
"RTN","SCMSVUT0",177,0)
 Q
"RTN","SCMSVUT0",178,0)
 ;
"RTN","SCMSVUT0",179,0)
DFN(DATA) ;
"RTN","SCMSVUT0",180,0)
 ;INPUT   DATA - the DFN of the patient
"RTN","SCMSVUT0",181,0)
 ;
"RTN","SCMSVUT0",182,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",183,0)
 I DATA=""!(DATA=0) Q 0
"RTN","SCMSVUT0",184,0)
 I DATA'?1.N.".".N Q 0
"RTN","SCMSVUT0",185,0)
 Q 1
"RTN","SCMSVUT0",186,0)
 ;
"RTN","SCMSVUT0",187,0)
PATNM(DATA) ;
"RTN","SCMSVUT0",188,0)
 ;INPUT  DATA - The name of the patient
"RTN","SCMSVUT0",189,0)
 ;
"RTN","SCMSVUT0",190,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",191,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",192,0)
 I DATA?.N.",".N Q 0
"RTN","SCMSVUT0",193,0)
 I DATA?1.C Q 0
"RTN","SCMSVUT0",194,0)
 Q 1
"RTN","SCMSVUT0",195,0)
 ;
"RTN","SCMSVUT0",196,0)
DOB(DATA,ENCDT) ;
"RTN","SCMSVUT0",197,0)
 ;INPUT  DATA - The DOB to be tested.
"RTN","SCMSVUT0",198,0)
 ;      ENCDT - The date/time of the encounter
"RTN","SCMSVUT0",199,0)
 ;
"RTN","SCMSVUT0",200,0)
 N %DT,X,Y
"RTN","SCMSVUT0",201,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",202,0)
 I '$D(ENCDT) Q 0
"RTN","SCMSVUT0",203,0)
 I DATA'?1.N Q 0
"RTN","SCMSVUT0",204,0)
 S %DT="T",%DT(0)=-ENCDT,X=DATA
"RTN","SCMSVUT0",205,0)
 D ^%DT
"RTN","SCMSVUT0",206,0)
 Q $S(Y=-1:0,1:1)
"RTN","SCMSVUT0",207,0)
 ;
"RTN","SCMSVUT0",208,0)
SEX(DATA) ;
"RTN","SCMSVUT0",209,0)
 ;INPUT  DATA - The sex code to be validated
"RTN","SCMSVUT0",210,0)
 ;
"RTN","SCMSVUT0",211,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",212,0)
 I "FMUO"'[DATA Q 0
"RTN","SCMSVUT0",213,0)
 Q 1
"RTN","SCMSVUT0",214,0)
 ;
"RTN","SCMSVUT0",215,0)
RACE(DATA) ;
"RTN","SCMSVUT0",216,0)
 ;INPUT  DATA - the race code to be validated (NNNN-C-XXX)
"RTN","SCMSVUT0",217,0)
 ;
"RTN","SCMSVUT0",218,0)
 N VAL,MTHD
"RTN","SCMSVUT0",219,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",220,0)
 I DATA="" Q 1
"RTN","SCMSVUT0",221,0)
 S VAL=$P(DATA,"-",1,2)
"RTN","SCMSVUT0",222,0)
 S MTHD=$P(DATA,"-",3)
"RTN","SCMSVUT0",223,0)
 I VAL'?4N1"-"1N Q 0
"RTN","SCMSVUT0",224,0)
 I ",SLF,UNK,PRX,OBS,"'[MTHD Q 0
"RTN","SCMSVUT0",225,0)
 Q 1
"RTN","SCMSVUT0",226,0)
 ;
"RTN","SCMSVUT0",227,0)
STR1(DATA) ;
"RTN","SCMSVUT0",228,0)
 ;INPUT   DATA - Street address line 1
"RTN","SCMSVUT0",229,0)
 ;
"RTN","SCMSVUT0",230,0)
 N LP,VAR
"RTN","SCMSVUT0",231,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",232,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",233,0)
 I DATA?1.N Q 0
"RTN","SCMSVUT0",234,0)
 I DATA=" " Q 0
"RTN","SCMSVUT0",235,0)
 F LP=1:1:$L(DATA) S VAR=$E(DATA,LP,LP) I $A(VAR)>32,($A(VAR)<127) S LP="Y" Q
"RTN","SCMSVUT0",236,0)
 Q $S(LP="Y":1,1:0)
"RTN","SCMSVUT0",237,0)
 ;
"RTN","SCMSVUT0",238,0)
STR2(DATA) ;
"RTN","SCMSVUT0",239,0)
 ;INPUT  DATA - Street address line 2
"RTN","SCMSVUT0",240,0)
 I DATA?1.N Q 0
"RTN","SCMSVUT0",241,0)
 Q 1
"RTN","SCMSVUT0",242,0)
 ;
"RTN","SCMSVUT0",243,0)
CITY(DATA) ;
"RTN","SCMSVUT0",244,0)
 ;INPUT  DATA - The city code to be validated
"RTN","SCMSVUT0",245,0)
 ;
"RTN","SCMSVUT0",246,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",247,0)
 I DATA?1.N Q 0
"RTN","SCMSVUT0",248,0)
 Q 1
"RTN","SCMSVUT0",249,0)
 ;
"RTN","SCMSVUT0",250,0)
STATE(DATA) ;
"RTN","SCMSVUT0",251,0)
 ;INPUT  DATA - State code to be validated.
"RTN","SCMSVUT0",252,0)
 ;
"RTN","SCMSVUT0",253,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",254,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",255,0)
 I '$D(^DIC(5,"C",DATA)) Q 0
"RTN","SCMSVUT0",256,0)
 Q 1
"RTN","SCMSVUT0",257,0)
 ;
"RTN","SCMSVUT0",258,0)
ZIP(DATA) ;
"RTN","SCMSVUT0",259,0)
 ;INPUT  DATA - The zipo code to be validated
"RTN","SCMSVUT0",260,0)
 ;
"RTN","SCMSVUT0",261,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",262,0)
 I $E(DATA,1,5)="00000" Q 0
"RTN","SCMSVUT0",263,0)
 I DATA'?5N."-".4N Q 0
"RTN","SCMSVUT0",264,0)
 Q 1
"RTN","SCMSVUT0",265,0)
 ;
"RTN","SCMSVUT0",266,0)
COUNTY(DATA,STATE) ;
"RTN","SCMSVUT0",267,0)
 ;INPUT  DATA  - The county code to be validated
"RTN","SCMSVUT0",268,0)
 ;       STATE - STATE file IEN 
"RTN","SCMSVUT0",269,0)
 ;
"RTN","SCMSVUT0",270,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",271,0)
 I STATE="" Q 0
"RTN","SCMSVUT0",272,0)
 I '$D(^DIC(5,+$G(STATE),1,"C",DATA)) Q 0
"RTN","SCMSVUT0",273,0)
 Q 1
"RTN","SCMSVUT0",274,0)
 ;
"RTN","SCMSVUT0",275,0)
MARITAL(DATA) ;
"RTN","SCMSVUT0",276,0)
 ;INPUT   DATA - The marital status code to be validated.
"RTN","SCMSVUT0",277,0)
 ;
"RTN","SCMSVUT0",278,0)
 I $L(DATA)>1 Q 0
"RTN","SCMSVUT0",279,0)
 I "ADMSWU"'[DATA Q 0
"RTN","SCMSVUT0",280,0)
 Q 1
"RTN","SCMSVUT0",281,0)
 ;
"RTN","SCMSVUT0",282,0)
REL(DATA) ;
"RTN","SCMSVUT0",283,0)
 ;INPUT   DATA - The religion abbreviation to the validated
"RTN","SCMSVUT0",284,0)
 ;
"RTN","SCMSVUT0",285,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",286,0)
 I DATA="" Q 0
"RTN","SCMSVUT0",287,0)
 I '$D(^DIC(13,"C",+DATA)) Q 0
"RTN","SCMSVUT0",288,0)
 Q 1
"RTN","SCMSVUT0",289,0)
 ;
"RTN","SCMSVUT0",290,0)
SSN(DATA,NOPCHK) ;
"RTN","SCMSVUT0",291,0)
 ;INPUT   DATA - The SSN to be validated
"RTN","SCMSVUT0",292,0)
 ;        NOPCHK - O = Check pseudo indicator (default)
"RTN","SCMSVUT0",293,0)
 ;                 1 = Don't check pseudo indicator
"RTN","SCMSVUT0",294,0)
 ;
"RTN","SCMSVUT0",295,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT0",296,0)
 N SSN,PSD
"RTN","SCMSVUT0",297,0)
 S SSN=$E(DATA,1,9),PSD=$E(DATA,10)
"RTN","SCMSVUT0",298,0)
 I SSN'?9N Q 0
"RTN","SCMSVUT0",299,0)
 I '$G(NOPCHK) I (PSD'=" "),(PSD'=""),(PSD'="P") Q 0
"RTN","SCMSVUT0",300,0)
 I $E(SSN,1,5)="00000" Q 0
"RTN","SCMSVUT0",301,0)
 Q 1
"RTN","SCMSVUT0",302,0)
 ;
"RTN","SCMSVUT0",303,0)
INCR ;increases the counter
"RTN","SCMSVUT0",304,0)
 S CTR=CTR+1
"RTN","SCMSVUT0",305,0)
 Q
"RTN","SCMSVUT0",306,0)
 ;
"RTN","SCMSVUT0",307,0)
REMOVE(SEG,ERR,VALERR,CNT) ;
"RTN","SCMSVUT0",308,0)
 ;INPUT SEG - The segment being worked on
"RTN","SCMSVUT0",309,0)
 ;    VALERR - The array holding the information
"RTN","SCMSVUT0",310,0)
 ;      CNT - the counter to use
"RTN","SCMSVUT0",311,0)
 ;      ERR - error code to remove
"RTN","SCMSVUT0",312,0)
 ;
"RTN","SCMSVUT0",313,0)
 N LP
"RTN","SCMSVUT0",314,0)
 F LP=1:1:CNT I $G(@VALERR@(SEG,LP))=ERR K @VALERR@(SEG,LP)
"RTN","SCMSVUT0",315,0)
 Q
"RTN","SCMSVUT0",316,0)
 ;
"RTN","SCMSVUT0",317,0)
DECR(CNT) ;
"RTN","SCMSVUT0",318,0)
 S CNT=CNT-1
"RTN","SCMSVUT0",319,0)
 Q
"RTN","SCMSVUT0",320,0)
 ;
"RTN","SCMSVUT2")
0^2^B23018269
"RTN","SCMSVUT2",1,0)
SCMSVUT2 ;ALB/JLU;Utility routine for AMBCARE;06/28/99
"RTN","SCMSVUT2",2,0)
 ;;5.3;Scheduling;**66,180,254,293**;AUG 13,1993
"RTN","SCMSVUT2",3,0)
 ;06/28/99 ACS Added CPT modifier validation
"RTN","SCMSVUT2",4,0)
 ;
"RTN","SCMSVUT2",5,0)
COUNT(VALER) ;counts the number of errored encounters found.
"RTN","SCMSVUT2",6,0)
 ;INPUT VALER - The array containing the errors.
"RTN","SCMSVUT2",7,0)
 ;OUTPUT the number of errors
"RTN","SCMSVUT2",8,0)
 ;
"RTN","SCMSVUT2",9,0)
 N VAR,CNT
"RTN","SCMSVUT2",10,0)
 S VAR="",CNT=0
"RTN","SCMSVUT2",11,0)
 F  S VAR=$O(@VALER@(VAR)) Q:VAR']""  S CNT=CNT+1
"RTN","SCMSVUT2",12,0)
 Q CNT
"RTN","SCMSVUT2",13,0)
 ;
"RTN","SCMSVUT2",14,0)
FILEVERR(PTR,VALERR) ;files the errors found for an encounter
"RTN","SCMSVUT2",15,0)
 ;INPUT  PTR - The pointer to the entry in the transmission file 409.73
"RTN","SCMSVUT2",16,0)
 ;      VALERR - The array holding the errors for the encounter.
"RTN","SCMSVUT2",17,0)
 ;OUTPUT  0 - did not file
"RTN","SCMSVUT2",18,0)
 ;        1 - did file
"RTN","SCMSVUT2",19,0)
 N SEG,FILE
"RTN","SCMSVUT2",20,0)
 I '$D(VALERR) Q 0
"RTN","SCMSVUT2",21,0)
 S SEG="",FILE=-1
"RTN","SCMSVUT2",22,0)
 F  S SEG=$O(@VALERR@(SEG)) Q:SEG']""  D FILE(VALERR,SEG,PTR,.FILE)
"RTN","SCMSVUT2",23,0)
 Q $S(FILE=1:1,1:0)
"RTN","SCMSVUT2",24,0)
 ;
"RTN","SCMSVUT2",25,0)
FILE(VALERR,SEG,PTR,FILE) ;
"RTN","SCMSVUT2",26,0)
 N NBR
"RTN","SCMSVUT2",27,0)
 S NBR=0
"RTN","SCMSVUT2",28,0)
 F  S NBR=$O(@VALERR@(SEG,NBR)) Q:'NBR  DO
"RTN","SCMSVUT2",29,0)
 .N CODPTR
"RTN","SCMSVUT2",30,0)
 .S CODE=$G(@VALERR@(SEG,NBR))
"RTN","SCMSVUT2",31,0)
 .I CODE']"" Q
"RTN","SCMSVUT2",32,0)
 .S CODPTR=$O(^SD(409.76,"B",CODE,""))
"RTN","SCMSVUT2",33,0)
 .I 'CODPTR Q
"RTN","SCMSVUT2",34,0)
 .I $D(^SD(409.75,"AER",PTR,CODPTR)) S FILE=1 Q
"RTN","SCMSVUT2",35,0)
 .S FILE=$$CRTERR^SCDXFU02(PTR,CODE)
"RTN","SCMSVUT2",36,0)
 .Q
"RTN","SCMSVUT2",37,0)
 Q
"RTN","SCMSVUT2",38,0)
 ;
"RTN","SCMSVUT2",39,0)
VALWL(CLIN) ;WORKLOAD VALIDATION AT CHECK OUT
"RTN","SCMSVUT2",40,0)
 ;INPUT CLIN - IEN OF CLINIC
"RTN","SCMSVUT2",41,0)
 ;OUTPUT 0 - DO NOT VALIDATE WORKLOAD
"RTN","SCMSVUT2",42,0)
 ;       1 - VALIDATE CLINIC WORKLOAD
"RTN","SCMSVUT2",43,0)
 N A1
"RTN","SCMSVUT2",44,0)
 I '$D(CLIN) S CLIN=0
"RTN","SCMSVUT2",45,0)
 S A1=$P($G(^SC(+CLIN,0)),U,30)
"RTN","SCMSVUT2",46,0)
 Q $S(A1=1:1,1:0)
"RTN","SCMSVUT2",47,0)
 ;
"RTN","SCMSVUT2",48,0)
VALIDATE(XMITPTR) ;validates data that has a entry in the transmit file.
"RTN","SCMSVUT2",49,0)
 ;
"RTN","SCMSVUT2",50,0)
 ;INPUT    XMITPTR - This is the point to an entry in file 409.73.
"RTN","SCMSVUT2",51,0)
 ;
"RTN","SCMSVUT2",52,0)
 ;OUTPUT    -1 - the was a problem with the inputs
"RTN","SCMSVUT2",53,0)
 ;           0 - no errors were found
"RTN","SCMSVUT2",54,0)
 ;           1 - errors were found
"RTN","SCMSVUT2",55,0)
 ;
"RTN","SCMSVUT2",56,0)
 N VALERR,ERR,HL,HLEID,DFN
"RTN","SCMSVUT2",57,0)
 S ANS=-1
"RTN","SCMSVUT2",58,0)
 S XMITPTR=+$G(XMITPTR)
"RTN","SCMSVUT2",59,0)
 I $G(^SD(409.73,XMITPTR,0))']"" G VALQ
"RTN","SCMSVUT2",60,0)
 D PATDFN^SCDXUTL2(XMITPTR)
"RTN","SCMSVUT2",61,0)
 ;
"RTN","SCMSVUT2",62,0)
 S HL7XMIT="^TMP(""HLS"","_$J_")",VALERR="^TMP(""SCDXVALID"","_$J_","_XMITPTR_")"
"RTN","SCMSVUT2",63,0)
 ;Initialze HL7 variables
"RTN","SCMSVUT2",64,0)
 S HLEID=+$O(^ORD(101,"B","SCDX AMBCARE SEND SERVER FOR ADT-Z00",0))
"RTN","SCMSVUT2",65,0)
 I ('HLEID) G VALQ
"RTN","SCMSVUT2",66,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","SCMSVUT2",67,0)
 I ($O(HL(""))="") G VALQ
"RTN","SCMSVUT2",68,0)
 ;
"RTN","SCMSVUT2",69,0)
 S ERR=$$BUILDHL7^SCDXMSG0(XMITPTR,.HL,1,HL7XMIT,1,VALERR)
"RTN","SCMSVUT2",70,0)
 ;
"RTN","SCMSVUT2",71,0)
 I ERR<0,$O(@VALERR@(0))']"" D VALIDATE^SCMSVUT0("INTERNAL","","V900",VALERR,0)
"RTN","SCMSVUT2",72,0)
 S ANS=0
"RTN","SCMSVUT2",73,0)
 D DELAERR^SCDXFU02(XMITPTR,0)
"RTN","SCMSVUT2",74,0)
 D DEMUPDT(DFN,VALERR,"DEMO")
"RTN","SCMSVUT2",75,0)
 I $O(@VALERR@(0))]"" DO
"RTN","SCMSVUT2",76,0)
 .N FILE
"RTN","SCMSVUT2",77,0)
 .S ANS=1
"RTN","SCMSVUT2",78,0)
 .S FILE=$$FILEVERR(XMITPTR,VALERR)
"RTN","SCMSVUT2",79,0)
 .Q
"RTN","SCMSVUT2",80,0)
 ;
"RTN","SCMSVUT2",81,0)
 K @VALERR,@HL7XMIT
"RTN","SCMSVUT2",82,0)
 ;
"RTN","SCMSVUT2",83,0)
VALQ Q ANS
"RTN","SCMSVUT2",84,0)
 ;
"RTN","SCMSVUT2",85,0)
DEMUPDT(DFN,VALERR,TYP) ;
"RTN","SCMSVUT2",86,0)
 ;This entry point updates all the other encoutners for this patient
"RTN","SCMSVUT2",87,0)
 ;that HAVE errors with a new set or demographic errors or deletes all
"RTN","SCMSVUT2",88,0)
 ;the demographic errors if none were found.
"RTN","SCMSVUT2",89,0)
 ;INPUT DFN - The patient's DFN
"RTN","SCMSVUT2",90,0)
 ;   VALERR - errors to log
"RTN","SCMSVUT2",91,0)
 ;      TYP - The type of errors to delete and log.
"RTN","SCMSVUT2",92,0)
 ;            Right now demographic errors are the only kind "DEMO"
"RTN","SCMSVUT2",93,0)
 ;
"RTN","SCMSVUT2",94,0)
 S DFN=$G(DFN),TYP=$G(TYP),VALERR=$G(VALERR)
"RTN","SCMSVUT2",95,0)
 I DFN=""!(TYP="")!(VALERR="") Q
"RTN","SCMSVUT2",96,0)
 N PTRS,RNG,LP,PTR
"RTN","SCMSVUT2",97,0)
 S RNG=$P($T(@(TYP)),";;",2),PTRS=""
"RTN","SCMSVUT2",98,0)
 D CLEAN(DFN,RNG,.PTRS)
"RTN","SCMSVUT2",99,0)
 I '$D(@VALERR@("PID")) Q
"RTN","SCMSVUT2",100,0)
 I PTRS']"" Q
"RTN","SCMSVUT2",101,0)
 F LP=1:1 S PTR=$P(PTRS,U,LP) Q:PTR']""  DO
"RTN","SCMSVUT2",102,0)
 .I '$D(^SD(409.73,PTR,0)) Q
"RTN","SCMSVUT2",103,0)
 .N FILE
"RTN","SCMSVUT2",104,0)
 .D FILE(VALERR,"PID",PTR,.FILE)
"RTN","SCMSVUT2",105,0)
 .Q
"RTN","SCMSVUT2",106,0)
 Q
"RTN","SCMSVUT2",107,0)
 ;
"RTN","SCMSVUT2",108,0)
CLEAN(DFN,RNG,PTRS) ;This subroutine cleans out all errors for a pateint
"RTN","SCMSVUT2",109,0)
 ;and returns a string of which entries in 409.73 were cleaned of errors
"RTN","SCMSVUT2",110,0)
 ;
"RTN","SCMSVUT2",111,0)
 N LP,COD,LP2,IEN
"RTN","SCMSVUT2",112,0)
 F LP=1:1 S COD=$P(RNG,U,LP) Q:COD']""  I $D(^SD(409.75,"ACOD",DFN,COD)) S IEN="" F LP2=1:1 S IEN=$O(^SD(409.75,"ACOD",DFN,COD,IEN)) Q:IEN']""  DO
"RTN","SCMSVUT2",113,0)
 .N VAR,RES
"RTN","SCMSVUT2",114,0)
 .S VAR=$P($G(^SD(409.75,IEN,0)),U,1)_"^"
"RTN","SCMSVUT2",115,0)
 .I $P(VAR,U,1)="" S PTR="" Q
"RTN","SCMSVUT2",116,0)
 .S RES=$$DELERR^SCDXFU02(IEN)
"RTN","SCMSVUT2",117,0)
 .I PTRS[VAR Q
"RTN","SCMSVUT2",118,0)
 .S PTRS=PTRS_VAR
"RTN","SCMSVUT2",119,0)
 .Q
"RTN","SCMSVUT2",120,0)
 Q
"RTN","SCMSVUT2",121,0)
 ;
"RTN","SCMSVUT2",122,0)
MODCODE(DATA,ENCDT) ;
"RTN","SCMSVUT2",123,0)
 ;
"RTN","SCMSVUT2",124,0)
 ;---------------------------------------------------------------
"RTN","SCMSVUT2",125,0)
 ;    VALIDATE MODIFIER AND CPT+MODIFIER COMBINATION
"RTN","SCMSVUT2",126,0)
 ;
"RTN","SCMSVUT2",127,0)
 ; INPUT: DATA - The procedure and modifier code to be checked 
"RTN","SCMSVUT2",128,0)
 ;               format: CPT~modifier
"RTN","SCMSVUT2",129,0)
 ;       ENCDT - The date of the encounter
"RTN","SCMSVUT2",130,0)
 ;
"RTN","SCMSVUT2",131,0)
 ;OUTPUT:    1 - valid modifier and CPT+modifier combination
"RTN","SCMSVUT2",132,0)
 ;           0 - invalid modifier or CPT+modifier combination
"RTN","SCMSVUT2",133,0)
 ;
"RTN","SCMSVUT2",134,0)
 ;**NOTE**   This call makes the assumption that leading zeros are
"RTN","SCMSVUT2",135,0)
 ;           intact in the input.
"RTN","SCMSVUT2",136,0)
 ;---------------------------------------------------------------
"RTN","SCMSVUT2",137,0)
 ;
"RTN","SCMSVUT2",138,0)
 ;- validate modifier only
"RTN","SCMSVUT2",139,0)
 N DATAMOD
"RTN","SCMSVUT2",140,0)
 S DATAMOD=$P(DATA,"~",2)
"RTN","SCMSVUT2",141,0)
 I '$D(DATAMOD) Q 0
"RTN","SCMSVUT2",142,0)
 I $$MOD^ICPTMOD(DATAMOD,"E",ENCDT,1)'>0 Q 0
"RTN","SCMSVUT2",143,0)
 ;
"RTN","SCMSVUT2",144,0)
 ;- validate CPT+modifier pair
"RTN","SCMSVUT2",145,0)
 N DATAPROC
"RTN","SCMSVUT2",146,0)
 S DATAPROC=$P(DATA,"~",1)
"RTN","SCMSVUT2",147,0)
 I '$D(DATAPROC) Q 0
"RTN","SCMSVUT2",148,0)
 I $$MODP^ICPTMOD(DATAPROC,DATAMOD,"E",ENCDT,1)'>0 Q 0
"RTN","SCMSVUT2",149,0)
 Q 1
"RTN","SCMSVUT2",150,0)
 ;
"RTN","SCMSVUT2",151,0)
MODMETH(DATA) ;
"RTN","SCMSVUT2",152,0)
 ;
"RTN","SCMSVUT2",153,0)
 ;---------------------------------------------------------------
"RTN","SCMSVUT2",154,0)
 ;    VALIDATE MODIFIER CODING METHOD
"RTN","SCMSVUT2",155,0)
 ;
"RTN","SCMSVUT2",156,0)
 ; INPUT: DATA - The modifier coding method to be checked 
"RTN","SCMSVUT2",157,0)
 ;
"RTN","SCMSVUT2",158,0)
 ;OUTPUT:    1 - valid modifier coding method
"RTN","SCMSVUT2",159,0)
 ;           0 - invalid modifier coding method
"RTN","SCMSVUT2",160,0)
 ;
"RTN","SCMSVUT2",161,0)
 ; Valid modifier coding methods: C and H
"RTN","SCMSVUT2",162,0)
 ;---------------------------------------------------------------
"RTN","SCMSVUT2",163,0)
 ;
"RTN","SCMSVUT2",164,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT2",165,0)
 S DATA=","_DATA_","
"RTN","SCMSVUT2",166,0)
 I ",C,H,"'[DATA Q 0
"RTN","SCMSVUT2",167,0)
 Q 1
"RTN","SCMSVUT2",168,0)
 ;
"RTN","SCMSVUT2",169,0)
ETHNIC(DATA)    ;
"RTN","SCMSVUT2",170,0)
 ;INPUT  DATA - the ethnicity code to be validated (NNNN-C-XXX)
"RTN","SCMSVUT2",171,0)
 ;
"RTN","SCMSVUT2",172,0)
 N VAL,MTHD
"RTN","SCMSVUT2",173,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT2",174,0)
 I DATA="" Q 1
"RTN","SCMSVUT2",175,0)
 S VAL=$P(DATA,"-",1,2)
"RTN","SCMSVUT2",176,0)
 S MTHD=$P(DATA,"-",3)
"RTN","SCMSVUT2",177,0)
 I VAL'?4N1"-"1N Q 0
"RTN","SCMSVUT2",178,0)
 I ",SLF,UNK,PRX,OBS,"'[MTHD Q 0
"RTN","SCMSVUT2",179,0)
 Q 1
"RTN","SCMSVUT2",180,0)
CONFDT(DATA,SUB)    ;CONFIDENTIAL ADDRESS START/STOP DATE
"RTN","SCMSVUT2",181,0)
 N X,Y,%DT,DTOUT,STDT,ENDT
"RTN","SCMSVUT2",182,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT2",183,0)
 S STDT=$P(DATA,SUB,1)
"RTN","SCMSVUT2",184,0)
 S ENDT=$P(DATA,SUB,2)
"RTN","SCMSVUT2",185,0)
 I STDT="" Q 0
"RTN","SCMSVUT2",186,0)
 S STDT=$$FMDATE^HLFNC(STDT)
"RTN","SCMSVUT2",187,0)
 S X=STDT D ^%DT I Y=-1 Q 0
"RTN","SCMSVUT2",188,0)
 I ENDT="" Q 1
"RTN","SCMSVUT2",189,0)
 S ENDT=$$FMDATE^HLFNC(ENDT)
"RTN","SCMSVUT2",190,0)
 S X=ENDT D ^%DT I Y=-1 Q 0
"RTN","SCMSVUT2",191,0)
 I $$FMDIFF^XLFDT(ENDT,STDT,1)<0 Q 0
"RTN","SCMSVUT2",192,0)
 Q 1
"RTN","SCMSVUT2",193,0)
 ;
"RTN","SCMSVUT2",194,0)
CONFCAT(DATA)             ;CONFIDENTIAL ADDRESS CATEGORY TYPE
"RTN","SCMSVUT2",195,0)
 I '$D(DATA) Q 0
"RTN","SCMSVUT2",196,0)
 I DATA="" Q 0
"RTN","SCMSVUT2",197,0)
 N VAL,GOOD
"RTN","SCMSVUT2",198,0)
 S GOOD=0
"RTN","SCMSVUT2",199,0)
 F VAL="VACAA","VACAC","VACAE","VACAM","VACAO" I DATA=VAL S GOOD=1 Q
"RTN","SCMSVUT2",200,0)
 Q GOOD
"RTN","SCMSVUT2",201,0)
 ;
"RTN","SCMSVUT2",202,0)
DEMO ;;2000^2030^2050^2100^2150^2200^2210^2220^2230^2240^2250^2300^2330^2360
"RTN","SCMSVUT5")
0^5^B6829971
"RTN","SCMSVUT5",1,0)
SCMSVUT5 ;BPFO/JRP - IEMM UTILTIES (CONT);7/29/2002
"RTN","SCMSVUT5",2,0)
 ;;5.3;Scheduling;**254,293**;Aug 13, 1993
"RTN","SCMSVUT5",3,0)
 ;
"RTN","SCMSVUT5",4,0)
PARSE(INARR,OUTARR,SEP,SUB,MAX) ;Parse array into individual fields
"RTN","SCMSVUT5",5,0)
 ;Input  : INARR - Array containing data to parse (full global ref)
"RTN","SCMSVUT5",6,0)
 ;                   INARR = First 245 characters of data
"RTN","SCMSVUT5",7,0)
 ;                   INARR(1..n) = Continuation nodes
"RTN","SCMSVUT5",8,0)
 ;                        OR
"RTN","SCMSVUT5",9,0)
 ;                   INARR(x) = First 245 characters of data
"RTN","SCMSVUT5",10,0)
 ;                   INARR(x,1..n) = Continuation nodes
"RTN","SCMSVUT5",11,0)
 ;         OUTARR - Array to put parsed data into (full global ref)
"RTN","SCMSVUT5",12,0)
 ;         SEP - Field separator (defaults to ^) (1 character)
"RTN","SCMSVUT5",13,0)
 ;         SUB - Starting subscript of OUTARR (defaults to 0)
"RTN","SCMSVUT5",14,0)
 ;         MAX - Maximum length of output node (defaults to 245)
"RTN","SCMSVUT5",15,0)
 ;Output : None
"RTN","SCMSVUT5",16,0)
 ;         OUTARR(SUB) = First piece (MAX characters)
"RTN","SCMSVUT5",17,0)
 ;         OUTARR(SUB,1..n) = Continuation nodes
"RTN","SCMSVUT5",18,0)
 ;         OUTARR(SUB+X) = Xth piece (MAX characters)
"RTN","SCMSVUT5",19,0)
 ;         OUTARR(SUB+X,1..n) = Continuation nodes
"RTN","SCMSVUT5",20,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","SCMSVUT5",21,0)
 ;       : Assumes that INARR and OUTARR are defined and valid
"RTN","SCMSVUT5",22,0)
 ;
"RTN","SCMSVUT5",23,0)
 ;Declare variables
"RTN","SCMSVUT5",24,0)
 N NODE,STOP,DATA,INFO,FLD,SEPCNT,CN,OUT,TMP,ROOT,OUTNODE
"RTN","SCMSVUT5",25,0)
 K @OUTARR
"RTN","SCMSVUT5",26,0)
 S SEP=$G(SEP) S SEP=$E(SEP,1) S:SEP="" SEP="^"
"RTN","SCMSVUT5",27,0)
 S SUB=+$G(SUB)
"RTN","SCMSVUT5",28,0)
 S MAX=+$G(MAX) S:'MAX MAX=245
"RTN","SCMSVUT5",29,0)
 S NODE=INARR
"RTN","SCMSVUT5",30,0)
 S INFO=$G(@NODE)
"RTN","SCMSVUT5",31,0)
 S ROOT=$$OREF^DILF(INARR)
"RTN","SCMSVUT5",32,0)
 S FLD=1
"RTN","SCMSVUT5",33,0)
 S SEPCNT=$L(INFO,SEP)
"RTN","SCMSVUT5",34,0)
 S STOP=0
"RTN","SCMSVUT5",35,0)
 S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","SCMSVUT5",36,0)
 S CN=0
"RTN","SCMSVUT5",37,0)
 F  S DATA=$P(INFO,SEP,FLD) D  Q:STOP
"RTN","SCMSVUT5",38,0)
 .I FLD=SEPCNT D  Q
"RTN","SCMSVUT5",39,0)
 ..D ADDNODE
"RTN","SCMSVUT5",40,0)
 ..S NODE=$Q(@NODE)
"RTN","SCMSVUT5",41,0)
 ..I (NODE="")!(NODE'[ROOT) S STOP=1 Q
"RTN","SCMSVUT5",42,0)
 ..S INFO=$G(@NODE)
"RTN","SCMSVUT5",43,0)
 ..S SEPCNT=$L(INFO,SEP)
"RTN","SCMSVUT5",44,0)
 ..S FLD=1
"RTN","SCMSVUT5",45,0)
 .D ADDNODE
"RTN","SCMSVUT5",46,0)
 .S SUB=SUB+1
"RTN","SCMSVUT5",47,0)
 .S CN=0
"RTN","SCMSVUT5",48,0)
 .S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","SCMSVUT5",49,0)
 .S FLD=FLD+1
"RTN","SCMSVUT5",50,0)
 Q
"RTN","SCMSVUT5",51,0)
ADDNODE ;Used by PARSE to add data to output node (handles continuation nodes)
"RTN","SCMSVUT5",52,0)
 S TMP=$G(@OUTNODE)
"RTN","SCMSVUT5",53,0)
 I ($L(TMP)+$L(DATA))<(MAX+1) S @OUTNODE=TMP_DATA Q
"RTN","SCMSVUT5",54,0)
 S @OUTNODE=TMP_$E(DATA,1,(MAX-$L(TMP)))
"RTN","SCMSVUT5",55,0)
 S CN=CN+1
"RTN","SCMSVUT5",56,0)
 S DATA=$E(DATA,(MAX-$L(TMP)+1),$L(DATA))
"RTN","SCMSVUT5",57,0)
 S OUTNODE=$NA(@OUTARR@(SUB,CN))
"RTN","SCMSVUT5",58,0)
 I DATA'="" D ADDNODE
"RTN","SCMSVUT5",59,0)
 Q
"RTN","SCMSVUT5",60,0)
 ;
"RTN","SCMSVUT5",61,0)
 ;
"RTN","SCMSVUT5",62,0)
SEGPRSE(SEGMENT,OUTARR,FS)      ;Parse HL7 segment by field separator
"RTN","SCMSVUT5",63,0)
 ;Input  : SEGMENT - Array containing HL7 segment to parse
"RTN","SCMSVUT5",64,0)
 ;                   (full global ref)
"RTN","SCMSVUT5",65,0)
 ;                   SEGMENT = First 245 characters of segment
"RTN","SCMSVUT5",66,0)
 ;                   SEGMENT(1..n) = Continuation nodes
"RTN","SCMSVUT5",67,0)
 ;                        OR
"RTN","SCMSVUT5",68,0)
 ;                   SEGMENT(x) = First 245 characters of segment
"RTN","SCMSVUT5",69,0)
 ;                   SEGMENT(x,1..n) = Continuation nodes
"RTN","SCMSVUT5",70,0)
 ;         OUTARR - Array to put parsed segment into (full global ref)
"RTN","SCMSVUT5",71,0)
 ;         FS - HL7 field separator (defaults to ^) (1 character)
"RTN","SCMSVUT5",72,0)
 ;Output : None
"RTN","SCMSVUT5",73,0)
 ;         OUTARR(0) = Segment name
"RTN","SCMSVUT5",74,0)
 ;         OUTARR(seq#) = Data (first 245 characters)
"RTN","SCMSVUT5",75,0)
 ;         OUTARR(seq#,1..n) Continuation nodes
"RTN","SCMSVUT5",76,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","SCMSVUT5",77,0)
 ;       : Assumes SEGMENT and OUTARR are defined and valid
"RTN","SCMSVUT5",78,0)
 ;
"RTN","SCMSVUT5",79,0)
 D PARSE($G(SEGMENT),$G(OUTARR),$G(FS),0,245)
"RTN","SCMSVUT5",80,0)
 Q
"RTN","SCMSVUT5",81,0)
 ;
"RTN","SCMSVUT5",82,0)
SEQPRSE(SEQDATA,OUTARR,ENCODE)  ;Parse HL7 sequence by component
"RTN","SCMSVUT5",83,0)
 ;Input  : SEQDATA - Array containing seq to parse (full global ref)
"RTN","SCMSVUT5",84,0)
 ;                   SEQDATA = First 245 characters of sequence
"RTN","SCMSVUT5",85,0)
 ;                   SEQDATA(1..n) = Continuation nodes
"RTN","SCMSVUT5",86,0)
 ;                        OR
"RTN","SCMSVUT5",87,0)
 ;                   SEQDATA(x) = First 245 characters of sequence
"RTN","SCMSVUT5",88,0)
 ;                   SEQDATA(x,1..n) = Continuation nodes
"RTN","SCMSVUT5",89,0)
 ;         OUTARR - Array to put parsed sequence into (full global ref)
"RTN","SCMSVUT5",90,0)
 ;         ENCODE - HL7 encoding characters (defaults to ~|\&) (4 chars)
"RTN","SCMSVUT5",91,0)
 ;Output : None
"RTN","SCMSVUT5",92,0)
 ;         OUTARR(rep#,comp#) = Data (first 245 characters)
"RTN","SCMSVUT5",93,0)
 ;         OUTARR(rep#,comp#,1..n) = Continuation nodes
"RTN","SCMSVUT5",94,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","SCMSVUT5",95,0)
 ;       : Assumes SEQDATA and OUTARR are defined and valid
"RTN","SCMSVUT5",96,0)
 ;
"RTN","SCMSVUT5",97,0)
 ;Declare variables
"RTN","SCMSVUT5",98,0)
 N RS,CS,INFO,DATA,REP,COMP
"RTN","SCMSVUT5",99,0)
 S ENCODE=$G(ENCODE,"~|\&")
"RTN","SCMSVUT5",100,0)
 S ENCODE=$E(ENCODE,1,4) S:$L(ENCODE)'=4 ENCODE="~|\&"
"RTN","SCMSVUT5",101,0)
 S CS=$E(ENCODE,1)
"RTN","SCMSVUT5",102,0)
 S RS=$E(ENCODE,2)
"RTN","SCMSVUT5",103,0)
 S INFO=$NA(^TMP("SCMSVUT5",$J,"SEQPRSE"))
"RTN","SCMSVUT5",104,0)
 D PARSE($G(SEQDATA),INFO,RS,1,245)
"RTN","SCMSVUT5",105,0)
 S REP=0
"RTN","SCMSVUT5",106,0)
 F  S REP=+$O(@INFO@(REP)) Q:'REP  D PARSE($NA(@INFO@(REP)),$NA(@OUTARR@(REP)),CS,1,245)
"RTN","SCMSVUT5",107,0)
 K @INFO
"RTN","SCMSVUT5",108,0)
 Q
"RTN","SCMSVUT5",109,0)
        
"RTN","SD53293")
0^6^B20972844
"RTN","SD53293",1,0)
SD53293 ;BPFO/JRP - PRE/POST INIT ROUTINE;5/29/2001
"RTN","SD53293",2,0)
 ;;5.3;Scheduling;**293**;Aug 13, 1993
"RTN","SD53293",3,0)
 ;
"RTN","SD53293",4,0)
 ;This routine was copied from routine SD53239P
"RTN","SD53293",5,0)
 ;
"RTN","SD53293",6,0)
PRE ;Main entry point for pre init
"RTN","SD53293",7,0)
 ;Remove ERROR CODE DESCRIPTION (field #11) as an identifier of the
"RTN","SD53293",8,0)
 ; TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE file (#409.76)
"RTN","SD53293",9,0)
 ; (this causes problems when installing error codes)
"RTN","SD53293",10,0)
 I ($D(^DD(409.76,0,"ID",11))) D
"RTN","SD53293",11,0)
 .N TMP,X
"RTN","SD53293",12,0)
 .S X(1)=" "
"RTN","SD53293",13,0)
 .S X(2)="Removing ERROR CODE DESCRIPTION (field #11) as an identifier"
"RTN","SD53293",14,0)
 .S X(3)="of the TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE file"
"RTN","SD53293",15,0)
 .S X(4)="(#409.76) as it causes problems when installing error codes."
"RTN","SD53293",16,0)
 .S X(5)=" "
"RTN","SD53293",17,0)
 .D MES^XPDUTL(.X) K X
"RTN","SD53293",18,0)
 .K ^DD(409.76,0,"ID",11)
"RTN","SD53293",19,0)
 .Q:($D(^DD(409.76,0,"ID")))
"RTN","SD53293",20,0)
 .S TMP=$P(^SD(409.76,0),U,2)
"RTN","SD53293",21,0)
 .S TMP=$TR(TMP,"I","")
"RTN","SD53293",22,0)
 .S $P(^SD(409.76,0),U,2)=TMP
"RTN","SD53293",23,0)
 .Q
"RTN","SD53293",24,0)
 Q
"RTN","SD53293",25,0)
 ;
"RTN","SD53293",26,0)
POST ;Main entry point of post init
"RTN","SD53293",27,0)
 N X,ZTRTN,ZTSK,ZTDESC,ZTDTH,ZTIO,ZTSK
"RTN","SD53293",28,0)
 ;Make ERROR CODE DESCRIPTION (field #11) an identifier of the
"RTN","SD53293",29,0)
 ; TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE file (#409.76)
"RTN","SD53293",30,0)
 ; (this was removed by the pre init routine)
"RTN","SD53293",31,0)
 I ('$D(^DD(409.76,0,"ID",11))) D
"RTN","SD53293",32,0)
 .N TMP
"RTN","SD53293",33,0)
 .S X(1)=" "
"RTN","SD53293",34,0)
 .S X(2)="Restoring ERROR CODE DESCRIPTION (field #11) as an identifier"
"RTN","SD53293",35,0)
 .S X(3)="of the TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE file"
"RTN","SD53293",36,0)
 .S X(4)="(#409.76) as it was removed by the pre init."
"RTN","SD53293",37,0)
 .S X(5)=" "
"RTN","SD53293",38,0)
 .D MES^XPDUTL(.X) K X
"RTN","SD53293",39,0)
 .S ^DD(409.76,0,"ID",11)="D EN^DDIOL($P(^(1),U,1))"
"RTN","SD53293",40,0)
 .S TMP=$P(^SD(409.76,0),U,2)
"RTN","SD53293",41,0)
 .S TMP=$TR(TMP,"I","")
"RTN","SD53293",42,0)
 .S $P(^SD(409.76,0),U,2)=TMP_"I"
"RTN","SD53293",43,0)
 ;Change HL7 application name
"RTN","SD53293",44,0)
 D HLAPP("AMBCARE-DH239","AMBCARE-DH293")
"RTN","SD53293",45,0)
 D HLAPP("PCMM-213","PCMM-293")
"RTN","SD53293",46,0)
 ;Queue changing of HL7 message statuses
"RTN","SD53293",47,0)
 S ZTRTN="QHLM^SD53293"
"RTN","SD53293",48,0)
 S ZTDESC="Change status of unacked AmbCare messages to SUCCESSFULLY COMPLETED"
"RTN","SD53293",49,0)
 S ZTIO=""
"RTN","SD53293",50,0)
 S ZTDTH=$H
"RTN","SD53293",51,0)
 D ^%ZTLOAD
"RTN","SD53293",52,0)
 K X
"RTN","SD53293",53,0)
 S X(1)=" "
"RTN","SD53293",54,0)
 S X(2)="Updating status of AmbCare messages that have not been acknowledged"
"RTN","SD53293",55,0)
 S X(3)="queued as task number "_$G(ZTSK)
"RTN","SD53293",56,0)
 S X(4)=" "
"RTN","SD53293",57,0)
 I '$G(ZTSK) D
"RTN","SD53293",58,0)
 .S X(1)=" "
"RTN","SD53293",59,0)
 .S X(2)="***** Updating status of AmbCare messages that have not been"
"RTN","SD53293",60,0)
 .S X(3)="***** acknowledged was not queued.  This process must be done"
"RTN","SD53293",61,0)
 .S X(4)="***** in order for these messages to be properly purged."
"RTN","SD53293",62,0)
 .S X(5)="***** Use entry point QHLM^SD53293 to do this process."
"RTN","SD53293",63,0)
 .S X(6)=" "
"RTN","SD53293",64,0)
 D MES^XPDUTL(.X) K X
"RTN","SD53293",65,0)
 Q
"RTN","SD53293",66,0)
 ;
"RTN","SD53293",67,0)
HLAPP(OLDNAME,NEWNAME) ;Change HL7 application name
"RTN","SD53293",68,0)
 ;Input  : OLDNAME - Name of HL7 application to change
"RTN","SD53293",69,0)
 ;         NEWNAME - New name for HL7 application
"RTN","SD53293",70,0)
 ;Output : None
"RTN","SD53293",71,0)
 ;Notes  : Call designed to be used as a KIDS pre/post init
"RTN","SD53293",72,0)
 S OLDNAME=$G(OLDNAME) Q:OLDNAME=""
"RTN","SD53293",73,0)
 S NEWNAME=$G(NEWNAME) Q:NEWNAME=""
"RTN","SD53293",74,0)
 N DIE,DIC,DA,DR,X,Y
"RTN","SD53293",75,0)
 D BMES^XPDUTL("Changing HL7 Application name from "_OLDNAME_" to "_NEWNAME)
"RTN","SD53293",76,0)
 S DIC="^HL(771,"
"RTN","SD53293",77,0)
 S DIC(0)="X"
"RTN","SD53293",78,0)
 S X=OLDNAME
"RTN","SD53293",79,0)
 D ^DIC
"RTN","SD53293",80,0)
 I (Y<0) D  Q
"RTN","SD53293",81,0)
 .D BMES^XPDUTL("   *** "_OLDNAME_" application not found ***")
"RTN","SD53293",82,0)
 S DIE=DIC
"RTN","SD53293",83,0)
 S DA=+Y
"RTN","SD53293",84,0)
 S DR=".01///^S X=NEWNAME"
"RTN","SD53293",85,0)
 D ^DIE
"RTN","SD53293",86,0)
 D MES^XPDUTL("HL7 application name successfully changed to "_NEWNAME)
"RTN","SD53293",87,0)
 Q
"RTN","SD53293",88,0)
 ;
"RTN","SD53293",89,0)
QHLM ;Entry point for queued changing of HL7 messages
"RTN","SD53293",90,0)
 D HLM("AMBCARE-DH293")
"RTN","SD53293",91,0)
 D HLM("PCMM-293")
"RTN","SD53293",92,0)
 Q
"RTN","SD53293",93,0)
HLM(APPNAME) ;Change status of HL7 messages to '3' (SUCCESSFULLY COMPLETED)
"RTN","SD53293",94,0)
 ; to enable purging of message
"RTN","SD53293",95,0)
 ;Input  : APPNAME - Name of application generating message
"RTN","SD53293",96,0)
 ;Output : None
"RTN","SD53293",97,0)
 ;Notes  : Call must be used within KIDS (updates progress bar)
"RTN","SD53293",98,0)
 S APPNAME=$G(APPNAME) Q:APPNAME=""
"RTN","SD53293",99,0)
 N DA,DIC,DIE,DR,X,Y,SDAPP,HLMID,XPDIDTOT,HLPTR,COUNT,TEXT
"RTN","SD53293",100,0)
 N XMDUZ,XMSUB,XMTEXT,XMY,XMZ
"RTN","SD53293",101,0)
 K ^TMP("SD53293",$J)
"RTN","SD53293",102,0)
 S X=$$NOW^XLFDT()
"RTN","SD53293",103,0)
 S Y=$$FMTE^XLFDT(X)
"RTN","SD53293",104,0)
 S TEXT="Updating of HL7 Message Text file (#772) began on "
"RTN","SD53293",105,0)
 S TEXT=TEXT_$P(Y,"@",1)_" @ "_$P(Y,"@",2)
"RTN","SD53293",106,0)
 S ^TMP("SD53293",$J,1,0)=TEXT
"RTN","SD53293",107,0)
 S DIC="^HL(771,"
"RTN","SD53293",108,0)
 S DIC(0)="M"
"RTN","SD53293",109,0)
 S X=APPNAME
"RTN","SD53293",110,0)
 D ^DIC
"RTN","SD53293",111,0)
 I (Y<0) D  G HLMQ
"RTN","SD53293",112,0)
 .S ^TMP("SD53293",$J,2,0)="   *** "_APPNAME_" application not found"
"RTN","SD53293",113,0)
 .S ^TMP("SD53293",$J,3,0)="   *** Process aborted"
"RTN","SD53293",114,0)
 S SDAPP=+Y
"RTN","SD53293",115,0)
 S HLMID=""
"RTN","SD53293",116,0)
 S COUNT=0
"RTN","SD53293",117,0)
 F  S HLMID=$O(^HL(772,"AH",SDAPP,HLMID)) Q:(HLMID="")  D
"RTN","SD53293",118,0)
 .S HLPTR=0
"RTN","SD53293",119,0)
 .F  S HLPTR=+$O(^HL(772,"AH",SDAPP,HLMID,HLPTR)) Q:('HLPTR)  D
"RTN","SD53293",120,0)
 ..S DIE="^HL(772,"
"RTN","SD53293",121,0)
 ..S DA=HLPTR
"RTN","SD53293",122,0)
 ..S DR="20////3"
"RTN","SD53293",123,0)
 ..D ^DIE
"RTN","SD53293",124,0)
 ..S COUNT=COUNT+1
"RTN","SD53293",125,0)
 S X=$$NOW^XLFDT()
"RTN","SD53293",126,0)
 S Y=$$FMTE^XLFDT(X)
"RTN","SD53293",127,0)
 S TEXT="Updating of HL7 Message Text file completed on "
"RTN","SD53293",128,0)
 S TEXT=TEXT_$P(Y,"@",1)_" @ "_$P(Y,"@",2)
"RTN","SD53293",129,0)
 S ^TMP("SD53293",$J,2,0)=TEXT
"RTN","SD53293",130,0)
 S ^TMP("SD53293",$J,3,0)=COUNT_" entries were updated"
"RTN","SD53293",131,0)
HLMQ S XMDUZ="Patch SD*5.3*293"
"RTN","SD53293",132,0)
 S XMSUB="Updating of HL7 Message Text file"
"RTN","SD53293",133,0)
 S XMTEXT="^TMP(""SD53293"",$J,"
"RTN","SD53293",134,0)
 S XMY(DUZ)=""
"RTN","SD53293",135,0)
 D ^XMD
"RTN","SD53293",136,0)
 S ZTREQ="@"
"RTN","SD53293",137,0)
 Q
"VER")
8.0^22.0
"^DD",409.76,409.76,0)
FIELD^^41^6
"^DD",409.76,409.76,0,"DDA")
N
"^DD",409.76,409.76,0,"DT")
2970710
"^DD",409.76,409.76,0,"ID",11)
D EN^DDIOL($P(^(1),U,1))
"^DD",409.76,409.76,0,"IX","B",409.76,.01)

"^DD",409.76,409.76,0,"IX","D",409.76,11)

"^DD",409.76,409.76,0,"NM","TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE")

"^DD",409.76,409.76,0,"PT",409.75,.02)

"^DD",409.76,409.76,0,"VRPK")
SD
"^DD",409.76,409.76,.01,0)
ERROR CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",409.76,409.76,.01,.1)
Error Code
"^DD",409.76,409.76,.01,1,0)
^.1
"^DD",409.76,409.76,.01,1,1,0)
409.76^B
"^DD",409.76,409.76,.01,1,1,1)
S ^SD(409.76,"B",$E(X,1,30),DA)=""
"^DD",409.76,409.76,.01,1,1,2)
K ^SD(409.76,"B",$E(X,1,30),DA)
"^DD",409.76,409.76,.01,3)
Enter an error code to use (1-10 characters)
"^DD",409.76,409.76,.01,21,0)
^^2^2^2970623^^^
"^DD",409.76,409.76,.01,21,1,0)
Error code denoting why an entry in the Transmitted Outpatient Encounter
"^DD",409.76,409.76,.01,21,2,0)
file could not be transmitted or successfully processed.
"^DD",409.76,409.76,.01,23,0)
^^1^1^2970623^
"^DD",409.76,409.76,.01,23,1,0)
 
"^DD",409.76,409.76,.01,"DT")
2960430
"^DD",409.76,409.76,.02,0)
SOURCE OF ERROR^RS^N:NPCD;V:VISTA;T:HL7 TRANSMISSION;^0;2^Q
"^DD",409.76,409.76,.02,3)
Enter the source of the error.
"^DD",409.76,409.76,.02,21,0)
^^1^1^2970710^
"^DD",409.76,409.76,.02,21,1,0)
This set of codes indicates the source of the error.
"^DD",409.76,409.76,.02,"DT")
2970710
"^DD",409.76,409.76,11,0)
ERROR CODE DESCRIPTION^F^^1;1^K:$L(X)>80!($L(X)<1) X
"^DD",409.76,409.76,11,.1)
Error Code Description
"^DD",409.76,409.76,11,1,0)
^.1^^-1
"^DD",409.76,409.76,11,1,2,0)
409.76^D
"^DD",409.76,409.76,11,1,2,1)
S ^SD(409.76,"D",$E(X,1,30),DA)=""
"^DD",409.76,409.76,11,1,2,2)
K ^SD(409.76,"D",$E(X,1,30),DA)
"^DD",409.76,409.76,11,1,2,"%D",0)
^^1^1^2971210^
"^DD",409.76,409.76,11,1,2,"%D",1,0)
This is used to aid in the lookup of error codes.
"^DD",409.76,409.76,11,1,2,"DT")
2971210
"^DD",409.76,409.76,11,3)
Enter a description of the error code (1-80 characters)
"^DD",409.76,409.76,11,21,0)
^^1^1^2960524^^
"^DD",409.76,409.76,11,21,1,0)
Free text description of the error code.
"^DD",409.76,409.76,11,"DT")
2980205
"^DD",409.76,409.76,21,0)
CORRECTIVE ACTION DESCRIPTION^409.7621^^2;0
"^DD",409.76,409.76,21,21,0)
^^3^3^2971022^
"^DD",409.76,409.76,21,21,1,0)
This field describes the actions necessary to correct the error.
"^DD",409.76,409.76,21,21,2,0)
This is the text which would be viewed by a user when using the Incomplete
"^DD",409.76,409.76,21,21,3,0)
Encounter Management Tools.
"^DD",409.76,409.76,31,0)
VALIDATION LOGIC^K^^CHK;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.76,409.76,31,3)
Enter routine entry point to perform error validation
"^DD",409.76,409.76,31,9)
@
"^DD",409.76,409.76,31,21,0)
^^13^13^2971022^
"^DD",409.76,409.76,31,21,1,0)
This field should not be modifed except as directed.
"^DD",409.76,409.76,31,21,2,0)
 
"^DD",409.76,409.76,31,21,3,0)
This contains the logic that needs to be executed in order to validate the
"^DD",409.76,409.76,31,21,4,0)
data.  If the data does not validate correctly the error code from this
"^DD",409.76,409.76,31,21,5,0)
entry will be used.  The function call contained within this field uses
"^DD",409.76,409.76,31,21,6,0)
the following variables:
"^DD",409.76,409.76,31,21,7,0)
    Input
"^DD",409.76,409.76,31,21,8,0)
       Data - The value being validated.
"^DD",409.76,409.76,31,21,9,0)
 
"^DD",409.76,409.76,31,21,10,0)
    Returns
"^DD",409.76,409.76,31,21,11,0)
       RES - Result of the function call
"^DD",409.76,409.76,31,21,12,0)
              1 if entry passed validation
"^DD",409.76,409.76,31,21,13,0)
              0 if entry does not pass validation
"^DD",409.76,409.76,31,"DT")
2970605
"^DD",409.76,409.76,41,0)
CORRECTION LOGIC^K^^COR;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",409.76,409.76,41,3)
This is the code that will need to be executed to correct this error.
"^DD",409.76,409.76,41,9)
@
"^DD",409.76,409.76,41,21,0)
^^16^16^2971022^
"^DD",409.76,409.76,41,21,1,0)
This field should not be modifed except as directed.
"^DD",409.76,409.76,41,21,2,0)
 
"^DD",409.76,409.76,41,21,3,0)
This contains the logic that needs to be executed in order to allow the
"^DD",409.76,409.76,41,21,4,0)
user to correct the error.  The function call contained within this field
"^DD",409.76,409.76,41,21,5,0)
uses the following variables:
"^DD",409.76,409.76,41,21,6,0)
    Returns
"^DD",409.76,409.76,41,21,7,0)
       RES - Result of the function call
"^DD",409.76,409.76,41,21,8,0)
             0 - if the corrective action was not successful
"^DD",409.76,409.76,41,21,9,0)
             1 - if the corrective action succeeded
"^DD",409.76,409.76,41,21,10,0)
 
"^DD",409.76,409.76,41,21,11,0)
This function call makes the assumption that the ^TMP("SCENI XMT",$J,0)
"^DD",409.76,409.76,41,21,12,0)
global from the Incomplete Encounter Management List Manager tool is
"^DD",409.76,409.76,41,21,13,0)
available to retrieve the pointer from the TRANSMITTED OUTPATIENT
"^DD",409.76,409.76,41,21,14,0)
ENCOUNTER FILE (#409.73) which is used to check the entry and
"^DD",409.76,409.76,41,21,15,0)
retreive the entry from the TRANSMITTED OUTPATIENT ENCOUNTER ERROR FILE
"^DD",409.76,409.76,41,21,16,0)
(#409.75).
"^DD",409.76,409.76,41,"DT")
2970710
"^DD",409.76,409.7621,0)
CORRECTIVE ACTION DESCRIPTION SUB-FIELD^^.01^1
"^DD",409.76,409.7621,0,"DT")
2970710
"^DD",409.76,409.7621,0,"NM","CORRECTIVE ACTION DESCRIPTION")

"^DD",409.76,409.7621,0,"UP")
409.76
"^DD",409.76,409.7621,.01,0)
CORRECTIVE ACTION DESCRIPTION^W^^0;1^Q
"^DD",409.76,409.7621,.01,3)
Enter the corrective action a user will need to take in order to correct this error.
"^DD",409.76,409.7621,.01,21,0)
^^1^1^2971022^^^
"^DD",409.76,409.7621,.01,21,1,0)
This is the corrective action needed to correct this error situation.
"^DD",409.76,409.7621,.01,"DT")
2970710
"^DIC",409.76,409.76,0)
TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE^409.76
"^DIC",409.76,409.76,0,"GL")
^SD(409.76,
"^DIC",409.76,409.76,"%D",0)
^^6^6^2970623^^^^
"^DIC",409.76,409.76,"%D",1,0)
This table file contains a list of all error codes that the National
"^DIC",409.76,409.76,"%D",2,0)
Patient Care Database will report when processing an encounter.
"^DIC",409.76,409.76,"%D",3,0)
 
"^DIC",409.76,409.76,"%D",4,0)
If an entry needs to be added, modified or deleted a patch will be issued
"^DIC",409.76,409.76,"%D",5,0)
instructing the site how to make the change.  Otherwise, this table should
"^DIC",409.76,409.76,"%D",6,0)
not be edited in anyway by the site.  
"^DIC",409.76,"B","TRANSMITTED OUTPATIENT ENCOUNTER ERROR CODE",409.76)

**END**
**END**
