Released XU*8*389 SEQ #363
Extracted from mail message
**KIDS**:XU*8.0*389^

**INSTALL NAME**
XU*8.0*389
"BLD",876,0)
XU*8.0*389^KERNEL^0^3060118^y
"BLD",876,4,0)
^9.64PA^^
"BLD",876,6.3)
1
"BLD",876,"KRN",0)
^9.67PA^8989.52^19
"BLD",876,"KRN",.4,0)
.4
"BLD",876,"KRN",.401,0)
.401
"BLD",876,"KRN",.402,0)
.402
"BLD",876,"KRN",.403,0)
.403
"BLD",876,"KRN",.5,0)
.5
"BLD",876,"KRN",.84,0)
.84
"BLD",876,"KRN",3.6,0)
3.6
"BLD",876,"KRN",3.8,0)
3.8
"BLD",876,"KRN",9.2,0)
9.2
"BLD",876,"KRN",9.8,0)
9.8
"BLD",876,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",876,"KRN",9.8,"NM",1,0)
XUTMDEVQ^^0^15686330
"BLD",876,"KRN",9.8,"NM","B","XUTMDEVQ",1)

"BLD",876,"KRN",19,0)
19
"BLD",876,"KRN",19.1,0)
19.1
"BLD",876,"KRN",101,0)
101
"BLD",876,"KRN",409.61,0)
409.61
"BLD",876,"KRN",771,0)
771
"BLD",876,"KRN",870,0)
870
"BLD",876,"KRN",8989.51,0)
8989.51
"BLD",876,"KRN",8989.52,0)
8989.52
"BLD",876,"KRN",8994,0)
8994
"BLD",876,"KRN","B",.4,.4)

"BLD",876,"KRN","B",.401,.401)

"BLD",876,"KRN","B",.402,.402)

"BLD",876,"KRN","B",.403,.403)

"BLD",876,"KRN","B",.5,.5)

"BLD",876,"KRN","B",.84,.84)

"BLD",876,"KRN","B",3.6,3.6)

"BLD",876,"KRN","B",3.8,3.8)

"BLD",876,"KRN","B",9.2,9.2)

"BLD",876,"KRN","B",9.8,9.8)

"BLD",876,"KRN","B",19,19)

"BLD",876,"KRN","B",19.1,19.1)

"BLD",876,"KRN","B",101,101)

"BLD",876,"KRN","B",409.61,409.61)

"BLD",876,"KRN","B",771,771)

"BLD",876,"KRN","B",870,870)

"BLD",876,"KRN","B",8989.51,8989.51)

"BLD",876,"KRN","B",8989.52,8989.52)

"BLD",876,"KRN","B",8994,8994)

"MBREQ")
0
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3051215^2970507^.5
"PKG",3,22,1,"PAH",1,0)
389^3060118
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","XUTMDEVQ")
0^1^B15686330^B13760584
"RTN","XUTMDEVQ",1,0)
XUTMDEVQ ;ISCSF/RWF - Device call and Queue in one place ;01/18/2006
"RTN","XUTMDEVQ",2,0)
 ;;8.0;KERNEL;**20,120,275,389**;Jul 10, 1995;Build 1
"RTN","XUTMDEVQ",3,0)
 ;  this routine has four entry points:  EN, DEV, NODEV, QQ
"RTN","XUTMDEVQ",4,0)
 ;  usage:
"RTN","XUTMDEVQ",5,0)
 ;D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,[.]%ZIS,[FLAG])
"RTN","XUTMDEVQ",6,0)
 ;S X=$$DEV^XUTMQUE(ZTRTN,ZTDESC,[.]%VAR,.%VOTH,[.]%ZIS,IOP,%WR)
"RTN","XUTMDEVQ",7,0)
 ;S X=$$NODEV^XUTMQUE(ZTRTN,ZTDESC,[.]%VAR,.%VOTH,%WR)
"RTN","XUTMDEVQ",8,0)
 ;S X=$$QQ(%RTN,%DESC,[.]%VAR1,.%VOTH1,.%ZIS,IOP,%WR,%RTN2,%DESC2,[.]%VAR2,.%VOTH2)
"RTN","XUTMDEVQ",9,0)
 ;EN
"RTN","XUTMDEVQ",10,0)
 ;Call with %ZTLOAD parameters and it will call $ZIS and
"RTN","XUTMDEVQ",11,0)
 ;run or queue the output.
"RTN","XUTMDEVQ",12,0)
 ;
"RTN","XUTMDEVQ",13,0)
EN(ZTRTN,ZTDESC,ZTSAVE,%ZIS,%) ;ZTSAVE AND %ZIS pass by reference.
"RTN","XUTMDEVQ",14,0)
 Q:$G(ZTRTN)=""
"RTN","XUTMDEVQ",15,0)
 N %RET,ZTIO,ZTDTH,ZTSYNC,ZTCPU,ZTUCI N:'$G(%) ZTSK K IO("Q")
"RTN","XUTMDEVQ",16,0)
 D ZIS I POP G KILL
"RTN","XUTMDEVQ",17,0)
 I '$D(IO("Q")) D RUN G KILL
"RTN","XUTMDEVQ",18,0)
 D ZTLOAD
"RTN","XUTMDEVQ",19,0)
KILL K ZTDTH,ZTSAVE
"RTN","XUTMDEVQ",20,0)
 Q
"RTN","XUTMDEVQ",21,0)
ZIS ;
"RTN","XUTMDEVQ",22,0)
 S:$G(%ZIS)'["Q" %ZIS=$G(%ZIS)_"Q"
"RTN","XUTMDEVQ",23,0)
 D ^%ZIS
"RTN","XUTMDEVQ",24,0)
 Q
"RTN","XUTMDEVQ",25,0)
ZTLOAD ;
"RTN","XUTMDEVQ",26,0)
 K IO("Q"),ZTSK
"RTN","XUTMDEVQ",27,0)
 D ^%ZTLOAD,HOME^%ZIS
"RTN","XUTMDEVQ",28,0)
 S:$D(ZTSK) %RET=ZTSK
"RTN","XUTMDEVQ",29,0)
 Q
"RTN","XUTMDEVQ",30,0)
RUN ;
"RTN","XUTMDEVQ",31,0)
 U IO
"RTN","XUTMDEVQ",32,0)
 D @ZTRTN
"RTN","XUTMDEVQ",33,0)
 D ^%ZISC
"RTN","XUTMDEVQ",34,0)
 Q
"RTN","XUTMDEVQ",35,0)
 ;
"RTN","XUTMDEVQ",36,0)
DEV(ZTRTN,ZTDESC,%VAR,%VOTH,%ZIS,IOP,%WR) ;  single que ask for device
"RTN","XUTMDEVQ",37,0)
 ;  ZTRTN - required - [tag]^routine that taskman will run
"RTN","XUTMDEVQ",38,0)
 ; ZTDESC - optional - default to name of [tag]~routine
"RTN","XUTMDEVQ",39,0)
 ;   %VAR - optional - single value or passed by reference
"RTN","XUTMDEVQ",40,0)
 ;          this will be used to S ZTSAVE()
"RTN","XUTMDEVQ",41,0)
 ;          can be a string of variable names separated by ';'
"RTN","XUTMDEVQ",42,0)
 ;            each ;-piece will be used as a subscript in ztsave
"RTN","XUTMDEVQ",43,0)
 ;  %VOTH - optional - passed by reference
"RTN","XUTMDEVQ",44,0)
 ;          %voth(sub)="" or explicit value
"RTN","XUTMDEVQ",45,0)
 ;             sub - this is any other %ZTLOAD variable besides 
"RTN","XUTMDEVQ",46,0)
 ;                   ZTRTN,ZTDESC,ZTIO,ZTSAVE
"RTN","XUTMDEVQ",47,0)
 ;                   example:  %VOTH("ZTDTH")=$H
"RTN","XUTMDEVQ",48,0)
 ;   %ZIS - optional - default value "MQ" - passed by reference
"RTN","XUTMDEVQ",49,0)
 ;          standard %ZIS variable array for calling device handler
"RTN","XUTMDEVQ",50,0)
 ;    IOP - optional - IOP variable as defined in Kernel device handler
"RTN","XUTMDEVQ",51,0)
 ;    %WR - optional - if %WR>0 then write text to the screen as to
"RTN","XUTMDEVQ",52,0)
 ;                     whether or not the queueing was successful
"RTN","XUTMDEVQ",53,0)
 ;
"RTN","XUTMDEVQ",54,0)
 ;  return: ZTSK value if successfully queued
"RTN","XUTMDEVQ",55,0)
 ;          0 if run ztrtn without queuing
"RTN","XUTMDEVQ",56,0)
 ;         -1 if unsuccessful device call or failed %ztload call
"RTN","XUTMDEVQ",57,0)
 ;
"RTN","XUTMDEVQ",58,0)
 N ZTIO,ZTDTH,ZTSYNC,ZTCPU,ZTUCI,ZTSAVE,ZTSK,ZTPRI,ZTKIL,%RET,POP
"RTN","XUTMDEVQ",59,0)
 S %RET=-1 I $G(ZTRTN)="" G OUT
"RTN","XUTMDEVQ",60,0)
 D SETUP,ZIS I POP G OUT
"RTN","XUTMDEVQ",61,0)
 I '$D(IO("Q")) D RUN S %RET=0
"RTN","XUTMDEVQ",62,0)
 D ZTLOAD
"RTN","XUTMDEVQ",63,0)
OUT I $G(%WR),%RET'=0,'$D(ZTQUEUED) D
"RTN","XUTMDEVQ",64,0)
 .W !! I %RET<0 W "Request Aborted",!
"RTN","XUTMDEVQ",65,0)
 .E  W "Task queued ["_(+%RET)_"]",!
"RTN","XUTMDEVQ",66,0)
 .I $P(%RET,U,2) W !,"Second task queued ["_$P(%RET,U,2)_"]",!
"RTN","XUTMDEVQ",67,0)
 .Q
"RTN","XUTMDEVQ",68,0)
 Q %RET
"RTN","XUTMDEVQ",69,0)
 ;
"RTN","XUTMDEVQ",70,0)
NODEV(ZTRTN,ZTDESC,%VAR,%VOTH,%WR) ;  single que no device needed
"RTN","XUTMDEVQ",71,0)
 ;  see DEV for parameter descriptions and return values
"RTN","XUTMDEVQ",72,0)
 N ZTIO,ZTDTH,ZTSYNC,ZTCPU,ZTUCI,ZTSAVE,ZTSK,ZTKIL,ZTPRI,%RET,POP
"RTN","XUTMDEVQ",73,0)
 S %RET=-1 I $G(ZTRTN)]"" S ZTIO="" D SETUP,ZTLOAD
"RTN","XUTMDEVQ",74,0)
 G OUT
"RTN","XUTMDEVQ",75,0)
 ;
"RTN","XUTMDEVQ",76,0)
QQ(%RTN,%DESC,%VAR1,%VOTH1,%ZIS,IOP,%WR,%RTN2,%DESC2,%VAR2,%VOTH2) ;
"RTN","XUTMDEVQ",77,0)
 ;  double queuing - queue up the second routine to device, but do not
"RTN","XUTMDEVQ",78,0)
 ;                   schedule the task in Taskman
"RTN","XUTMDEVQ",79,0)
 ;    queue up the first job to ZTIO="" and schedule it
"RTN","XUTMDEVQ",80,0)
 ;  %RTN - required - [tag]^routine for the 1st job to be run (usually a
"RTN","XUTMDEVQ",81,0)
 ;                    search and build sorted data type process)
"RTN","XUTMDEVQ",82,0)
 ; %DESC - optional - ZTDESC value for 1st job (default [tag]~routine)
"RTN","XUTMDEVQ",83,0)
 ; %VAR1 - optional - ZTSAVE values for 1st job - see %VAR descript above
"RTN","XUTMDEVQ",84,0)
 ;%VOTH1 - optional - 1st job - see %VOTH description above
"RTN","XUTMDEVQ",85,0)
 ;  %ZIS - optional - see %ZIS description above, except for one diff
"RTN","XUTMDEVQ",86,0)
 ;         the 2nd job will be tasked to this device call
"RTN","XUTMDEVQ",87,0)
 ;         exception: IF $D(%ZIS)=0 then default value is "MQ" and call
"RTN","XUTMDEVQ",88,0)
 ;                    device handler
"RTN","XUTMDEVQ",89,0)
 ;                    IF $D(%ZIS)=1,%ZIS="" then queue 2nd job also with
"RTN","XUTMDEVQ",90,0)
 ;                       ZTIO=""  i.e., do not do device handler call
"RTN","XUTMDEVQ",91,0)
 ;   IOP - optional - see above - default value "Q" - if IOP is passed
"RTN","XUTMDEVQ",92,0)
 ;                    and IOP does not start with "Q;" then "Q;" will
"RTN","XUTMDEVQ",93,0)
 ;                    be added
"RTN","XUTMDEVQ",94,0)
 ;   %WR - optional - see above
"RTN","XUTMDEVQ",95,0)
 ; %RTN2 - required - [tag]^routine for the 2nd job to be run (usually a
"RTN","XUTMDEVQ",96,0)
 ;                    print job)
"RTN","XUTMDEVQ",97,0)
 ;%DESC2 - optional - ZTDESC value for 2nd job (default [tag]~routine)
"RTN","XUTMDEVQ",98,0)
 ; %VAR2 - optional - ZTSAVE values for 2nd job - see %VAR descript above
"RTN","XUTMDEVQ",99,0)
 ;         if %VAR1 is not passed and $D(%VAR) then also send %VAR
"RTN","XUTMDEVQ",100,0)
 ;         data to 2nd tasked job.  If $D(%VAR1) then do not send %VAR
"RTN","XUTMDEVQ",101,0)
 ;         data to 2nd tasked job.
"RTN","XUTMDEVQ",102,0)
 ;%VOTH2 - optional - 2nd job - see %VOTH description above - usually not
"RTN","XUTMDEVQ",103,0)
 ;         needed - note: if %VOTH1("ZTDTH") is passed it will be ignored
"RTN","XUTMDEVQ",104,0)
 ;         as it is necessary to S ZTDTH="@" for the 2nd job - this will
"RTN","XUTMDEVQ",105,0)
 ;          create the task but not schedule it
"RTN","XUTMDEVQ",106,0)
 ;
"RTN","XUTMDEVQ",107,0)
 ;  return: if successfully queued, return ztsk1^ztsk2 where
"RTN","XUTMDEVQ",108,0)
 ;           ztsk1 = ZTSK value of 1st job, ztsk2 = ZTSK value of 2nd job
"RTN","XUTMDEVQ",109,0)
 ;         -1 if unsuccessful device call or failed %ztload call
"RTN","XUTMDEVQ",110,0)
 ;
"RTN","XUTMDEVQ",111,0)
 N ZTIO,ZTDTH,ZTSYNC,ZTCPU,ZTUCI,ZTSAVE,ZTSK,ZTPRI,ZTKIL,ZTDESC,%RET,POP
"RTN","XUTMDEVQ",112,0)
 N %VAR,%VOTH,%TMP S %RET=-1
"RTN","XUTMDEVQ",113,0)
 I $G(%RTN)=""!($G(%RTN2)="") G OUT
"RTN","XUTMDEVQ",114,0)
 ;  setup 2nd job to %ZIS
"RTN","XUTMDEVQ",115,0)
 S ZTRTN=%RTN2
"RTN","XUTMDEVQ",116,0)
 I $D(%VAR2) M %VAR=%VAR2
"RTN","XUTMDEVQ",117,0)
 I '$D(%VAR),$D(%VAR1) M %VAR=%VAR1
"RTN","XUTMDEVQ",118,0)
 I $D(%VOTH2) M %VOTH=%VOTH2
"RTN","XUTMDEVQ",119,0)
 I $G(%DESC2)]"" S ZTDESC=%DESC2
"RTN","XUTMDEVQ",120,0)
 I $D(%ZIS)=1,%ZIS="" S ZTIO=""
"RTN","XUTMDEVQ",121,0)
 E  D
"RTN","XUTMDEVQ",122,0)
 .I $D(IOP),IOP'?1"Q;".E S IOP="Q;"_IOP
"RTN","XUTMDEVQ",123,0)
 .I '$D(IOP) S IOP="Q"
"RTN","XUTMDEVQ",124,0)
 .Q
"RTN","XUTMDEVQ",125,0)
 D SETUP,ZIS:'$D(ZTIO) I $G(POP) G OUT
"RTN","XUTMDEVQ",126,0)
 S ZTDTH="@" D ZTLOAD
"RTN","XUTMDEVQ",127,0)
 K %VAR,%VOTH,%ZIS,IOP S %TMP=%RET
"RTN","XUTMDEVQ",128,0)
 S ZTRTN=%RTN
"RTN","XUTMDEVQ",129,0)
 I $D(%VAR1) M %VAR=%VAR1
"RTN","XUTMDEVQ",130,0)
 I $D(%VOTH1) M %VOTH=%VOTH1
"RTN","XUTMDEVQ",131,0)
 I $G(%DESC)]"" S ZTDESC=%DESC
"RTN","XUTMDEVQ",132,0)
 D SETUP S ZTIO="",%RET=-1,ZTSAVE("XUTMQQ")=%TMP D ZTLOAD I %RET>0 S %RET=%RET_U_%TMP
"RTN","XUTMDEVQ",133,0)
 G OUT
"RTN","XUTMDEVQ",134,0)
 ;
"RTN","XUTMDEVQ",135,0)
REQQ(ZTSK,ZTDTH,%VAR) ;Reschedule the second part of a QQ task.
"RTN","XUTMDEVQ",136,0)
 ;The task to work on should be in XUTMQQ.
"RTN","XUTMDEVQ",137,0)
 N ZTIO,ZTDESC,ZTRTN,ZTSYNC,ZTCPU,ZTUCI,ZTSAVE,ZTPRI,ZTKIL,ZTREQ
"RTN","XUTMDEVQ",138,0)
 I $G(ZTSK)=""!($G(ZTDTH)="") Q 0
"RTN","XUTMDEVQ",139,0)
 D VAR
"RTN","XUTMDEVQ",140,0)
 D REQ^%ZTLOAD
"RTN","XUTMDEVQ",141,0)
 Q $G(ZTSK(0),0)  ;Return 1 for rescheduled, 0 for fail.
"RTN","XUTMDEVQ",142,0)
 ;
"RTN","XUTMDEVQ",143,0)
SETUP ;  setup %ztload variables
"RTN","XUTMDEVQ",144,0)
 K ZTDTH,ZTSYNC,ZTCPU,ZTUCI,ZTSAVE,ZTPRI,ZTKIL,ZTSK,IO("Q") N I,X,Y
"RTN","XUTMDEVQ",145,0)
 D VAR
"RTN","XUTMDEVQ",146,0)
 I $D(%VOTH) F  S X=$O(%VOTH(X)) Q:X=""  S:'$D(@X) @X=%VOTH(X)
"RTN","XUTMDEVQ",147,0)
 I '$D(ZTDESC) S ZTDESC=$TR($P(ZTRTN,"("),U,"~")
"RTN","XUTMDEVQ",148,0)
 Q
"RTN","XUTMDEVQ",149,0)
 ;
"RTN","XUTMDEVQ",150,0)
VAR ;Setup ZTSAVE
"RTN","XUTMDEVQ",151,0)
 I $D(%VAR)#2 F I=1:1:$L(%VAR,";") S X=$P(%VAR,";",I),ZTSAVE(X)=""
"RTN","XUTMDEVQ",152,0)
 S X="" F  S X=$O(%VAR(X)) Q:X=""  S ZTSAVE(X)=%VAR(X)
"RTN","XUTMDEVQ",153,0)
 Q
"VER")
8.0^22.0
"BLD",876,6)
^363
**END**
**END**
