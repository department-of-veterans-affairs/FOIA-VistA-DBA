KIDS Distribution saved on Aug 20, 2004@11:02:50
DG*5.3*451 IVM*2*56 EAS*1*38
**KIDS**:DG*5.3*451^IVM*2.0*56^EAS*1.0*38^

**INSTALL NAME**
DG*5.3*451
"BLD",4368,0)
DG*5.3*451^REGISTRATION^0^3040820^y
"BLD",4368,4,0)
^9.64PA^27.16^3
"BLD",4368,4,2,0)
2
"BLD",4368,4,2,2,0)
^9.641^2.04^2
"BLD",4368,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",4368,4,2,2,2,1,0)
^9.6411^.5294^35
"BLD",4368,4,2,2,2,1,.32104,0)
VIETNAM FROM DATE
"BLD",4368,4,2,2,2,1,.32105,0)
VIETNAM TO DATE
"BLD",4368,4,2,2,2,1,.3214,0)
FILIPINO VETERAN PROOF
"BLD",4368,4,2,2,2,1,.322011,0)
PERSIAN GULF FROM DATE
"BLD",4368,4,2,2,2,1,.322012,0)
PERSIAN GULF TO DATE
"BLD",4368,4,2,2,2,1,.322017,0)
SOMALIA FROM DATE
"BLD",4368,4,2,2,2,1,.322018,0)
SOMALIA TO DATE
"BLD",4368,4,2,2,2,1,.32202,0)
YUGOSLAVIA FROM DATE
"BLD",4368,4,2,2,2,1,.322021,0)
YUGOSLAVIA TO DATE
"BLD",4368,4,2,2,2,1,.3222,0)
LEBANON FROM DATE
"BLD",4368,4,2,2,2,1,.3223,0)
LEBANON TO DATE
"BLD",4368,4,2,2,2,1,.3225,0)
GRENADA FROM DATE
"BLD",4368,4,2,2,2,1,.3226,0)
GRENADA TO DATE
"BLD",4368,4,2,2,2,1,.3228,0)
PANAMA FROM DATE
"BLD",4368,4,2,2,2,1,.3229,0)
PANAMA TO DATE
"BLD",4368,4,2,2,2,1,.324,0)
SERVICE DISCHARGE TYPE [LAST]
"BLD",4368,4,2,2,2,1,.325,0)
SERVICE BRANCH [LAST]
"BLD",4368,4,2,2,2,1,.326,0)
SERVICE ENTRY DATE [LAST]
"BLD",4368,4,2,2,2,1,.327,0)
SERVICE SEPARATION DATE [LAST]
"BLD",4368,4,2,2,2,1,.3285,0)
SERVICE SECOND EPISODE?
"BLD",4368,4,2,2,2,1,.329,0)
SERVICE DISCHARGE TYPE [NTL]
"BLD",4368,4,2,2,2,1,.3291,0)
SERVICE BRANCH [NTL]
"BLD",4368,4,2,2,2,1,.3292,0)
SERVICE ENTRY DATE [NTL]
"BLD",4368,4,2,2,2,1,.3293,0)
SERVICE SEPARATION DATE [NTL]
"BLD",4368,4,2,2,2,1,.32945,0)
SERVICE THIRD EPISODE?
"BLD",4368,4,2,2,2,1,.3295,0)
SERVICE DISCHARGE TYPE [NNTL]
"BLD",4368,4,2,2,2,1,.3296,0)
SERVICE BRANCH [NNTL]
"BLD",4368,4,2,2,2,1,.3297,0)
SERVICE ENTRY DATE [NNTL]
"BLD",4368,4,2,2,2,1,.3298,0)
SERVICE SEPARATION DATE [NNTL]
"BLD",4368,4,2,2,2,1,.526,0)
POW CONFINEMENT LOCATION
"BLD",4368,4,2,2,2,1,.527,0)
POW FROM DATE
"BLD",4368,4,2,2,2,1,.528,0)
POW TO DATE
"BLD",4368,4,2,2,2,1,.5292,0)
COMBAT SERVICE LOCATION
"BLD",4368,4,2,2,2,1,.5293,0)
COMBAT FROM DATE
"BLD",4368,4,2,2,2,1,.5294,0)
COMBAT TO DATE
"BLD",4368,4,2,2,2.04,0)
RATED DISABILITIES (VA)  (sub-file)
"BLD",4368,4,2,2,2.04,1,0)
^9.6411^3^3
"BLD",4368,4,2,2,2.04,1,.01,0)
RATED DISABILITIES (VA)
"BLD",4368,4,2,2,2.04,1,2,0)
DISABILITY %
"BLD",4368,4,2,2,2.04,1,3,0)
SERVICE CONNECTED
"BLD",4368,4,2,222)
y^y^p^^^^n^^n
"BLD",4368,4,2,224)

"BLD",4368,4,23,0)
23
"BLD",4368,4,23,222)
y^y^f^^^^n
"BLD",4368,4,27.16,0)
27.16
"BLD",4368,4,27.16,2,0)
^9.641^27.16^1
"BLD",4368,4,27.16,2,27.16,0)
ENROLLMENT GROUP THRESHOLD  (File-top level)
"BLD",4368,4,27.16,2,27.16,1,0)
^9.6411^.08^1
"BLD",4368,4,27.16,2,27.16,1,.08,0)
INACTIVE?
"BLD",4368,4,27.16,222)
y^y^p^^^^n^^n
"BLD",4368,4,27.16,224)

"BLD",4368,4,"APDD",2,2)

"BLD",4368,4,"APDD",2,2,.32104)

"BLD",4368,4,"APDD",2,2,.32105)

"BLD",4368,4,"APDD",2,2,.3214)

"BLD",4368,4,"APDD",2,2,.322011)

"BLD",4368,4,"APDD",2,2,.322012)

"BLD",4368,4,"APDD",2,2,.322017)

"BLD",4368,4,"APDD",2,2,.322018)

"BLD",4368,4,"APDD",2,2,.32202)

"BLD",4368,4,"APDD",2,2,.322021)

"BLD",4368,4,"APDD",2,2,.3222)

"BLD",4368,4,"APDD",2,2,.3223)

"BLD",4368,4,"APDD",2,2,.3225)

"BLD",4368,4,"APDD",2,2,.3226)

"BLD",4368,4,"APDD",2,2,.3228)

"BLD",4368,4,"APDD",2,2,.3229)

"BLD",4368,4,"APDD",2,2,.324)

"BLD",4368,4,"APDD",2,2,.325)

"BLD",4368,4,"APDD",2,2,.326)

"BLD",4368,4,"APDD",2,2,.327)

"BLD",4368,4,"APDD",2,2,.3285)

"BLD",4368,4,"APDD",2,2,.329)

"BLD",4368,4,"APDD",2,2,.3291)

"BLD",4368,4,"APDD",2,2,.3292)

"BLD",4368,4,"APDD",2,2,.3293)

"BLD",4368,4,"APDD",2,2,.32945)

"BLD",4368,4,"APDD",2,2,.3295)

"BLD",4368,4,"APDD",2,2,.3296)

"BLD",4368,4,"APDD",2,2,.3297)

"BLD",4368,4,"APDD",2,2,.3298)

"BLD",4368,4,"APDD",2,2,.526)

"BLD",4368,4,"APDD",2,2,.527)

"BLD",4368,4,"APDD",2,2,.528)

"BLD",4368,4,"APDD",2,2,.5292)

"BLD",4368,4,"APDD",2,2,.5293)

"BLD",4368,4,"APDD",2,2,.5294)

"BLD",4368,4,"APDD",2,2.04)

"BLD",4368,4,"APDD",2,2.04,.01)

"BLD",4368,4,"APDD",2,2.04,2)

"BLD",4368,4,"APDD",2,2.04,3)

"BLD",4368,4,"APDD",27.16,27.16)

"BLD",4368,4,"APDD",27.16,27.16,.08)

"BLD",4368,4,"B",2,2)

"BLD",4368,4,"B",23,23)

"BLD",4368,4,"B",27.16,27.16)

"BLD",4368,"INI")
DG53P451
"BLD",4368,"INIT")
EP^DG53S451
"BLD",4368,"KRN",0)
^9.67PA^8989.52^19
"BLD",4368,"KRN",.4,0)
.4
"BLD",4368,"KRN",.401,0)
.401
"BLD",4368,"KRN",.402,0)
.402
"BLD",4368,"KRN",.403,0)
.403
"BLD",4368,"KRN",.5,0)
.5
"BLD",4368,"KRN",.84,0)
.84
"BLD",4368,"KRN",3.6,0)
3.6
"BLD",4368,"KRN",3.8,0)
3.8
"BLD",4368,"KRN",9.2,0)
9.2
"BLD",4368,"KRN",9.8,0)
9.8
"BLD",4368,"KRN",9.8,"NM",0)
^9.68A^40^29
"BLD",4368,"KRN",9.8,"NM",1,0)
DGENA3^^0^B47246291
"BLD",4368,"KRN",9.8,"NM",2,0)
DGENCD^^0^B21215216
"BLD",4368,"KRN",9.8,"NM",3,0)
DGENCD1^^0^B19075915
"BLD",4368,"KRN",9.8,"NM",4,0)
DGENCDA^^0^B6940264
"BLD",4368,"KRN",9.8,"NM",5,0)
DGENEGT^^0^B62171290
"BLD",4368,"KRN",9.8,"NM",6,0)
DGENEGT1^^0^B48869165
"BLD",4368,"KRN",9.8,"NM",7,0)
DGENEGT3^^0^B6184064
"BLD",4368,"KRN",9.8,"NM",8,0)
DGENELA^^0^B20466515
"BLD",4368,"KRN",9.8,"NM",9,0)
DGENELA1^^0^B73071196
"BLD",4368,"KRN",9.8,"NM",16,0)
DGRPC1^^0^B13069220
"BLD",4368,"KRN",9.8,"NM",17,0)
DGRPC2^^0^B60630120
"BLD",4368,"KRN",9.8,"NM",18,0)
DGRPCE^^0^B28283114
"BLD",4368,"KRN",9.8,"NM",19,0)
DGRPE1^^0^B8220513
"BLD",4368,"KRN",9.8,"NM",20,0)
DGRPV^^0^B16180030
"BLD",4368,"KRN",9.8,"NM",24,0)
DGENUPL3^^0^B15297045
"BLD",4368,"KRN",9.8,"NM",25,0)
DGENUPL4^^0^B64852706
"BLD",4368,"KRN",9.8,"NM",26,0)
DGENUPL9^^0^B7463748
"BLD",4368,"KRN",9.8,"NM",27,0)
DGENUPLA^^0^B27750398
"BLD",4368,"KRN",9.8,"NM",28,0)
DGMTU^^0^B54348475
"BLD",4368,"KRN",9.8,"NM",29,0)
DGRPMS^^0^B34568461
"BLD",4368,"KRN",9.8,"NM",30,0)
DGRP6^^0^B21986606
"BLD",4368,"KRN",9.8,"NM",31,0)
DGRPE^^0^B45747315
"BLD",4368,"KRN",9.8,"NM",33,0)
DGMSCK^^0^B6019031
"BLD",4368,"KRN",9.8,"NM",35,0)
DGRPCE1^^0^B52778143
"BLD",4368,"KRN",9.8,"NM",36,0)
DG53E451^^0^B11437371
"BLD",4368,"KRN",9.8,"NM",37,0)
DGRPC3^^0^B15185592
"BLD",4368,"KRN",9.8,"NM",38,0)
DGRPC^^0^B20975204
"BLD",4368,"KRN",9.8,"NM",39,0)
DGENELA4^^0^B39068020
"BLD",4368,"KRN",9.8,"NM",40,0)
DGENCDA1^^0^B46291453
"BLD",4368,"KRN",9.8,"NM","B","DG53E451",36)

"BLD",4368,"KRN",9.8,"NM","B","DGENA3",1)

"BLD",4368,"KRN",9.8,"NM","B","DGENCD",2)

"BLD",4368,"KRN",9.8,"NM","B","DGENCD1",3)

"BLD",4368,"KRN",9.8,"NM","B","DGENCDA",4)

"BLD",4368,"KRN",9.8,"NM","B","DGENCDA1",40)

"BLD",4368,"KRN",9.8,"NM","B","DGENEGT",5)

"BLD",4368,"KRN",9.8,"NM","B","DGENEGT1",6)

"BLD",4368,"KRN",9.8,"NM","B","DGENEGT3",7)

"BLD",4368,"KRN",9.8,"NM","B","DGENELA",8)

"BLD",4368,"KRN",9.8,"NM","B","DGENELA1",9)

"BLD",4368,"KRN",9.8,"NM","B","DGENELA4",39)

"BLD",4368,"KRN",9.8,"NM","B","DGENUPL3",24)

"BLD",4368,"KRN",9.8,"NM","B","DGENUPL4",25)

"BLD",4368,"KRN",9.8,"NM","B","DGENUPL9",26)

"BLD",4368,"KRN",9.8,"NM","B","DGENUPLA",27)

"BLD",4368,"KRN",9.8,"NM","B","DGMSCK",33)

"BLD",4368,"KRN",9.8,"NM","B","DGMTU",28)

"BLD",4368,"KRN",9.8,"NM","B","DGRP6",30)

"BLD",4368,"KRN",9.8,"NM","B","DGRPC",38)

"BLD",4368,"KRN",9.8,"NM","B","DGRPC1",16)

"BLD",4368,"KRN",9.8,"NM","B","DGRPC2",17)

"BLD",4368,"KRN",9.8,"NM","B","DGRPC3",37)

"BLD",4368,"KRN",9.8,"NM","B","DGRPCE",18)

"BLD",4368,"KRN",9.8,"NM","B","DGRPCE1",35)

"BLD",4368,"KRN",9.8,"NM","B","DGRPE",31)

"BLD",4368,"KRN",9.8,"NM","B","DGRPE1",19)

"BLD",4368,"KRN",9.8,"NM","B","DGRPMS",29)

"BLD",4368,"KRN",9.8,"NM","B","DGRPV",20)

"BLD",4368,"KRN",19,0)
19
"BLD",4368,"KRN",19.1,0)
19.1
"BLD",4368,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",4368,"KRN",19.1,"NM",1,0)
DGENCD ADD/EDIT^^0
"BLD",4368,"KRN",19.1,"NM","B","DGENCD ADD/EDIT",1)

"BLD",4368,"KRN",101,0)
101
"BLD",4368,"KRN",101,"NM",0)
^9.68A^2^2
"BLD",4368,"KRN",101,"NM",1,0)
DGENCD ADD/EDIT CATASTROPHIC DISABILITY^^0
"BLD",4368,"KRN",101,"NM",2,0)
DGENCD DELETE CATASTROPHIC DISABILITY^^0
"BLD",4368,"KRN",101,"NM","B","DGENCD ADD/EDIT CATASTROPHIC DISABILITY",1)

"BLD",4368,"KRN",101,"NM","B","DGENCD DELETE CATASTROPHIC DISABILITY",2)

"BLD",4368,"KRN",409.61,0)
409.61
"BLD",4368,"KRN",771,0)
771
"BLD",4368,"KRN",870,0)
870
"BLD",4368,"KRN",8989.51,0)
8989.51
"BLD",4368,"KRN",8989.52,0)
8989.52
"BLD",4368,"KRN",8994,0)
8994
"BLD",4368,"KRN","B",.4,.4)

"BLD",4368,"KRN","B",.401,.401)

"BLD",4368,"KRN","B",.402,.402)

"BLD",4368,"KRN","B",.403,.403)

"BLD",4368,"KRN","B",.5,.5)

"BLD",4368,"KRN","B",.84,.84)

"BLD",4368,"KRN","B",3.6,3.6)

"BLD",4368,"KRN","B",3.8,3.8)

"BLD",4368,"KRN","B",9.2,9.2)

"BLD",4368,"KRN","B",9.8,9.8)

"BLD",4368,"KRN","B",19,19)

"BLD",4368,"KRN","B",19.1,19.1)

"BLD",4368,"KRN","B",101,101)

"BLD",4368,"KRN","B",409.61,409.61)

"BLD",4368,"KRN","B",771,771)

"BLD",4368,"KRN","B",870,870)

"BLD",4368,"KRN","B",8989.51,8989.51)

"BLD",4368,"KRN","B",8989.52,8989.52)

"BLD",4368,"KRN","B",8994,8994)

"BLD",4368,"QUES",0)
^9.62^^
"BLD",4368,"REQB",0)
^9.611^20^20
"BLD",4368,"REQB",1,0)
DG*5.3*514^2
"BLD",4368,"REQB",2,0)
DG*5.3*387^2
"BLD",4368,"REQB",3,0)
DG*5.3*513^2
"BLD",4368,"REQB",4,0)
DG*5.3*497^2
"BLD",4368,"REQB",5,0)
DG*5.3*404^2
"BLD",4368,"REQB",6,0)
DG*5.3*378^2
"BLD",4368,"REQB",7,0)
DG*5.3*519^2
"BLD",4368,"REQB",8,0)
DG*5.3*508^2
"BLD",4368,"REQB",9,0)
DG*5.3*327^2
"BLD",4368,"REQB",10,0)
DG*5.3*545^2
"BLD",4368,"REQB",11,0)
DG*5.3*232^2
"BLD",4368,"REQB",12,0)
DG*5.3*417^2
"BLD",4368,"REQB",13,0)
DG*5.3*314^2
"BLD",4368,"REQB",14,0)
DG*5.3*342^2
"BLD",4368,"REQB",15,0)
DG*5.3*505^2
"BLD",4368,"REQB",16,0)
DG*5.3*528^2
"BLD",4368,"REQB",17,0)
DG*5.3*522^2
"BLD",4368,"REQB",18,0)
DG*5.3*602^2
"BLD",4368,"REQB",19,0)
DG*5.3*603^2
"BLD",4368,"REQB",20,0)
DG*5.3*491^2
"BLD",4368,"REQB","B","DG*5.3*232",11)

"BLD",4368,"REQB","B","DG*5.3*314",13)

"BLD",4368,"REQB","B","DG*5.3*327",9)

"BLD",4368,"REQB","B","DG*5.3*342",14)

"BLD",4368,"REQB","B","DG*5.3*378",6)

"BLD",4368,"REQB","B","DG*5.3*387",2)

"BLD",4368,"REQB","B","DG*5.3*404",5)

"BLD",4368,"REQB","B","DG*5.3*417",12)

"BLD",4368,"REQB","B","DG*5.3*491",20)

"BLD",4368,"REQB","B","DG*5.3*497",4)

"BLD",4368,"REQB","B","DG*5.3*505",15)

"BLD",4368,"REQB","B","DG*5.3*508",8)

"BLD",4368,"REQB","B","DG*5.3*513",3)

"BLD",4368,"REQB","B","DG*5.3*514",1)

"BLD",4368,"REQB","B","DG*5.3*519",7)

"BLD",4368,"REQB","B","DG*5.3*522",17)

"BLD",4368,"REQB","B","DG*5.3*528",16)

"BLD",4368,"REQB","B","DG*5.3*545",10)

"BLD",4368,"REQB","B","DG*5.3*602",18)

"BLD",4368,"REQB","B","DG*5.3*603",19)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.32104)

"FIA",2,2,.32105)

"FIA",2,2,.3214)

"FIA",2,2,.322011)

"FIA",2,2,.322012)

"FIA",2,2,.322017)

"FIA",2,2,.322018)

"FIA",2,2,.32202)

"FIA",2,2,.322021)

"FIA",2,2,.3222)

"FIA",2,2,.3223)

"FIA",2,2,.3225)

"FIA",2,2,.3226)

"FIA",2,2,.3228)

"FIA",2,2,.3229)

"FIA",2,2,.324)

"FIA",2,2,.325)

"FIA",2,2,.326)

"FIA",2,2,.327)

"FIA",2,2,.3285)

"FIA",2,2,.329)

"FIA",2,2,.3291)

"FIA",2,2,.3292)

"FIA",2,2,.3293)

"FIA",2,2,.32945)

"FIA",2,2,.3295)

"FIA",2,2,.3296)

"FIA",2,2,.3297)

"FIA",2,2,.3298)

"FIA",2,2,.3721)

"FIA",2,2,.526)

"FIA",2,2,.527)

"FIA",2,2,.528)

"FIA",2,2,.5292)

"FIA",2,2,.5293)

"FIA",2,2,.5294)

"FIA",2,2.04)
1
"FIA",2,2.04,.01)

"FIA",2,2.04,2)

"FIA",2,2.04,3)

"FIA",23)
BRANCH OF SERVICE
"FIA",23,0)
^DIC(23,
"FIA",23,0,0)
23s
"FIA",23,0,1)
y^y^f^^^^n
"FIA",23,0,10)

"FIA",23,0,11)

"FIA",23,0,"RLRO")

"FIA",23,0,"VR")
5.3^DG
"FIA",23,23)
0
"FIA",27.16)
ENROLLMENT GROUP THRESHOLD
"FIA",27.16,0)
^DGEN(27.16,
"FIA",27.16,0,0)
27.16DO
"FIA",27.16,0,1)
y^y^p^^^^n^^n
"FIA",27.16,0,10)

"FIA",27.16,0,11)

"FIA",27.16,0,"RLRO")

"FIA",27.16,0,"VR")
5.3^DG
"FIA",27.16,27.16)
1
"FIA",27.16,27.16,.08)

"INI")
DG53P451
"INIT")
EP^DG53S451
"IX",2,2,"ACVCOM",0)
2^ACVCOM^Update Combat Vet Eligibility End Date^MU^^R^^I^2^^^^^A
"IX",2,2,"ACVCOM",.1,0)
^^11^11^3030613^
"IX",2,2,"ACVCOM",.1,1,0)
This multi-level MUMPS x-ref will trigger an update to the Combat Vet 
"IX",2,2,"ACVCOM",.1,2,0)
Eligibility End Date field under the following conditions:
"IX",2,2,"ACVCOM",.1,3,0)
  1) Service Separation Date [Last] is precise and > 2981111 AND EITHER
"IX",2,2,"ACVCOM",.1,4,0)
  2) Combat To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,5,0)
     Persian Gulf To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,6,0)
     Somalia To Date is after 11/11/98 OR
"IX",2,2,"ACVCOM",.1,7,0)
     Yugoslavia To Date is after 11/11/98
"IX",2,2,"ACVCOM",.1,8,0)
 
"IX",2,2,"ACVCOM",.1,9,0)
The Combat vet field will be set to the Service Separation Date + 2 
"IX",2,2,"ACVCOM",.1,10,0)
years, and will only be updated if information in these fields has 
"IX",2,2,"ACVCOM",.1,11,0)
changed.
"IX",2,2,"ACVCOM",1)
D SETCV^DGCV(DA,X2(1))
"IX",2,2,"ACVCOM",1.4)
S X=$$CVELIG^DGCV(DA)
"IX",2,2,"ACVCOM",2)
D DELCV^DGCV(DA)
"IX",2,2,"ACVCOM",2.4)
I '$$CVELIG^DGCV(DA) S X=1
"IX",2,2,"ACVCOM",11.1,0)
^.114IA^9^9
"IX",2,2,"ACVCOM",11.1,1,0)
1^F^2^.327^^^F
"IX",2,2,"ACVCOM",11.1,2,0)
2^F^2^.5294^^^F
"IX",2,2,"ACVCOM",11.1,3,0)
3^F^2^.322021^^^F
"IX",2,2,"ACVCOM",11.1,4,0)
4^F^2^.322018^^^F
"IX",2,2,"ACVCOM",11.1,5,0)
5^F^2^.322012^^^F
"IX",2,2,"ACVCOM",11.1,6,0)
6^F^2^.5291^^^F
"IX",2,2,"ACVCOM",11.1,7,0)
7^F^2^.322019^^^F
"IX",2,2,"ACVCOM",11.1,8,0)
8^F^2^.322016^^^F
"IX",2,2,"ACVCOM",11.1,9,0)
9^F^2^.32201^^^F
"IX",2,2,"AMSEL",0)
2^AMSEL^DELETE MSE (LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSEL",1)
Q
"IX",2,2,"AMSEL",2)
D DELMSE^DGRPMS(DFN,1)
"IX",2,2,"AMSEL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSEL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSEL",11.1,1,0)
1^F^2^.325^^^F
"IX",2,2,"AMSENL",0)
2^AMSENL^DELETE MSE (NEXT TO LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSENL",1)
Q
"IX",2,2,"AMSENL",2)
D DELMSE^DGRPMS(DFN,2)
"IX",2,2,"AMSENL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSENL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSENL",11.1,1,0)
1^F^2^.3291^^^F
"IX",2,2,"AMSENNL",0)
2^AMSENNL^DELETE MSE (NEXT TO NEXT TO LAST) FIELDS^MU^^F^^I^2^^^^^A
"IX",2,2,"AMSENNL",1)
Q
"IX",2,2,"AMSENNL",2)
D DELMSE^DGRPMS(DFN,3)
"IX",2,2,"AMSENNL",2.4)
S X=X2(1)=""
"IX",2,2,"AMSENNL",11.1,0)
^.114IA^1^1
"IX",2,2,"AMSENNL",11.1,1,0)
1^F^2^.3296^^^F
"IX",2,2.04,"ARD",0)
2.04^ARD^Rated Disabilities modification^MU^^F^^I^2.04^^^^^A
"IX",2,2.04,"ARD",1)
S DGRDCHG=1
"IX",2,2.04,"ARD",1.4)
I (X1(1)'=X2(1))!(X1(2)'=X2(2))!(X1(3)'=X2(3))
"IX",2,2.04,"ARD",2)
S DGRDCHG=1
"IX",2,2.04,"ARD",2.4)
I (X1(1)'=X2(1))!(X1(2)'=X2(2))!(X1(3)'=X2(3))
"IX",2,2.04,"ARD",2.5)
S DGRDCHG=1
"IX",2,2.04,"ARD",11.1,0)
^.114IA^3^3
"IX",2,2.04,"ARD",11.1,1,0)
1^F^2.04^.01^^^F
"IX",2,2.04,"ARD",11.1,2,0)
2^F^2.04^2^^^F
"IX",2,2.04,"ARD",11.1,3,0)
3^F^2.04^3^^^F
"KRN",19.1,435,-1)
0^1
"KRN",19.1,435,0)
DGENCD ADD/EDIT^Add/Edit CD
"KRN",19.1,435,1,0)
^^2^2^3030804^
"KRN",19.1,435,1,1,0)
This key is given to those who have the ability to add and edit 
"KRN",19.1,435,1,2,0)
Catastrophic Disability Evaluations.
"KRN",101,1980,-1)
0^1
"KRN",101,1980,0)
DGENCD ADD/EDIT CATASTROPHIC DISABILITY^Add/Edit Catastrophic Disability^^A^^DGENCD ADD/EDIT^^^^^^REGISTRATION
"KRN",101,1980,1,0)
^101.06^3^3^3030804^^^^
"KRN",101,1980,1,1,0)
This action will allow the catastrophic disability information for a patient
"KRN",101,1980,1,2,0)
to be added or edited, but not deleted.  If catastrophic disability information
"KRN",101,1980,1,3,0)
is added, the Catastrophically Disabled eligibility code is added.
"KRN",101,1980,20)
D ADDCD^DGENCD1
"KRN",101,1980,24)
I $$VET^DGENPTA(DFN)
"KRN",101,1980,99)
58128,35224
"KRN",101,1981,-1)
0^2
"KRN",101,1981,0)
DGENCD DELETE CATASTROPHIC DISABILITY^Delete Catastrophic Disability^^A^^CD DELETE^^^^^^REGISTRATION
"KRN",101,1981,1,0)
^^3^3^2990624^^^^
"KRN",101,1981,1,1,0)
This action will allow the catastrophic disability information for a patient
"KRN",101,1981,1,2,0)
to be deleted.  If catastrophic disability information is deleted, the
"KRN",101,1981,1,3,0)
Catastrophically Disabled eligibility code is also deleted.
"KRN",101,1981,20)
D DELETECD^DGENCD1
"KRN",101,1981,24)
 
"KRN",101,1981,99)
58128,35224
"MBREQ")
0
"ORD",3,19.1)
19.1;3;1;;KEY^XPDTA1;;;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
451^3040820
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
31
"RTN","DG53E451")
0^36^B11437371
"RTN","DG53E451",1,0)
DG53E451 ;BRM - Patch DG*5.3*451 Install Utility Routine #2 ; 4/14/04 8:16am
"RTN","DG53E451",2,0)
 ;;5.3;Registration;**451**; Aug 13,1993
"RTN","DG53E451",3,0)
 ;
"RTN","DG53E451",4,0)
 Q
"RTN","DG53E451",5,0)
 ;
"RTN","DG53E451",6,0)
EDITINC ; edit a few entries to the INCONSISTENT DATA ELEMENTS file (#38.6)
"RTN","DG53E451",7,0)
 N DGK,DGWP,ROOT,DGFDA,DGWP,DGIEN,DGERR,DGTITL
"RTN","DG53E451",8,0)
 D BMES^XPDUTL("  >> Editing entries 37-40 in the INCONSISTENT DATA ELEMENTS file (#38.6)")
"RTN","DG53E451",9,0)
 F DGK=37:1:40  D
"RTN","DG53E451",10,0)
 .K DGFDA,ROOT,DGWP
"RTN","DG53E451",11,0)
 .S ROOT="DGFDA(38.6,"""_DGK_","")"
"RTN","DG53E451",12,0)
 .D @DGK Q:'$D(DGFDA)
"RTN","DG53E451",13,0)
 .S DGIEN(1)=DGK
"RTN","DG53E451",14,0)
 .S DGTITL=@ROOT@(.01)
"RTN","DG53E451",15,0)
 .D UPDATE^DIE("E","DGFDA","DGIEN","DGERR")
"RTN","DG53E451",16,0)
 .I $D(DGERR) D BMES^XPDUTL("   >>> ERROR! "_DGTITL_" could not be edited in file #38.6"),MES^XPDUTL(DGERR("DIERR",1)_": "_DGERR("DIERR",1,"TEXT",1)) Q
"RTN","DG53E451",17,0)
 .D BMES^XPDUTL("      "_DGTITL_" successfully edited.")
"RTN","DG53E451",18,0)
 Q
"RTN","DG53E451",19,0)
37 ;
"RTN","DG53E451",20,0)
 S @ROOT@(.01)="POW DATA MISSING OR INCOMPLETE"
"RTN","DG53E451",21,0)
 S @ROOT@(2)="PRISONER OF WAR STATUS INDICATED, RELATED DATA MISSING OR INCOMPLETE"
"RTN","DG53E451",22,0)
 S @ROOT@(3)=3
"RTN","DG53E451",23,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53E451",24,0)
 S DGWP(1,0)="Inconsistency results when the user responds YES to the WERE YOU A"
"RTN","DG53E451",25,0)
 S DGWP(2,0)="PRISONER OF WAR prompt and any (or all) of the following prompts are"
"RTN","DG53E451",26,0)
 S DGWP(3,0)="left unanswered:  POW WAR, POW FROM DATE, POW TO DATE. This inconsistency "
"RTN","DG53E451",27,0)
 S DGWP(4,0)="also results when an imprecise date (without at least month and year "
"RTN","DG53E451",28,0)
 S DGWP(5,0)="precision) is entered."
"RTN","DG53E451",29,0)
 Q
"RTN","DG53E451",30,0)
38 ;
"RTN","DG53E451",31,0)
 S @ROOT@(.01)="POW DATES INCONSISTENT"
"RTN","DG53E451",32,0)
 S @ROOT@(2)="'PRISONER OF WAR' STATUS INDICATED, TO DATE PRECEDES FROM DATE"
"RTN","DG53E451",33,0)
 S @ROOT@(3)=3
"RTN","DG53E451",34,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53E451",35,0)
 S DGWP(1,0)="Inconsistency results when the user responds YES to the WERE YOU A"
"RTN","DG53E451",36,0)
 S DGWP(2,0)="A PRISONER OF WAR prompt and the 'from' date does not precede the 'to'"
"RTN","DG53E451",37,0)
 S DGWP(3,0)="date."
"RTN","DG53E451",38,0)
 Q
"RTN","DG53E451",39,0)
39 ;
"RTN","DG53E451",40,0)
 S @ROOT@(.01)="COMBAT DATA MISSING/INCOMPLETE"
"RTN","DG53E451",41,0)
 S @ROOT@(2)="COMBAT SERVICE INDICATED, RELATED DATA MISSING OR INCOMPLETE"
"RTN","DG53E451",42,0)
 S @ROOT@(3)=3
"RTN","DG53E451",43,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53E451",44,0)
 S DGWP(1,0)="Inconsistency results when the user responds YES to the IN COMBAT (Y/N)"
"RTN","DG53E451",45,0)
 S DGWP(2,0)="and any (or all) of the following prompts are left unanswered:  COMBAT"
"RTN","DG53E451",46,0)
 S DGWP(3,0)="WHERE, COMBAT FROM DATE, COMBAT TO DATE.  This inconsistency also results"
"RTN","DG53E451",47,0)
 S DGWP(4,0)="when an imprecise date (without at least month and year precision) is"
"RTN","DG53E451",48,0)
 S DGWP(5,0)="entered."
"RTN","DG53E451",49,0)
 Q
"RTN","DG53E451",50,0)
40 ;
"RTN","DG53E451",51,0)
 S @ROOT@(.01)="COMBAT DATES INCONSISTENT"
"RTN","DG53E451",52,0)
 S @ROOT@(2)="COMBAT SERVICE INDICATED, TO DATE PRECEDES FROM DATE"
"RTN","DG53E451",53,0)
 S @ROOT@(3)=3
"RTN","DG53E451",54,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53E451",55,0)
 S DGWP(1,0)="Inconsistency results when the COMBAT (Y/N) prompt is answered YES"
"RTN","DG53E451",56,0)
 S DGWP(2,0)="but the 'to' date precedes the 'from' date of service."
"RTN","DG53E451",57,0)
 Q
"RTN","DG53P451")
0^^B89479313
"RTN","DG53P451",1,0)
DG53P451 ;TDM/BRM - Patch DG*5.3*451 Install Utility Routine ; 4/27/04 2:14pm
"RTN","DG53P451",2,0)
 ;;5.3;Registration;**451**; Aug 13,1993
"RTN","DG53P451",3,0)
 ;
"RTN","DG53P451",4,0)
 D CHKBOS Q:$G(XPDABORT)=2
"RTN","DG53P451",5,0)
 D ADDBOS
"RTN","DG53P451",6,0)
 D ADDINC Q:$G(XPDABORT)=2
"RTN","DG53P451",7,0)
 D EDITINC^DG53E451
"RTN","DG53P451",8,0)
 Q
"RTN","DG53P451",9,0)
CHKBOS ;Check to ensure that Merchant Seaman and B.E.C. are in the BOS file
"RTN","DG53P451",10,0)
 ;
"RTN","DG53P451",11,0)
 K XPDABORT
"RTN","DG53P451",12,0)
 N BOS
"RTN","DG53P451",13,0)
 F BOS="MERCHANT SEAMAN","B.E.C." Q:$D(XPDABORT)  D
"RTN","DG53P451",14,0)
 .Q:$D(^DIC(23,"B",BOS))
"RTN","DG53P451",15,0)
 .S XPDABORT=2
"RTN","DG53P451",16,0)
 .D BMES^XPDUTL("     >>> ERROR: Branch of Service File (#23) needs to be reviewed by NVS! <<<")
"RTN","DG53P451",17,0)
 .D MES^XPDUTL("           The National Entry for '"_BOS_"' does not exist!")
"RTN","DG53P451",18,0)
 .D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53P451",19,0)
 Q
"RTN","DG53P451",20,0)
ADDBOS ;Add new entries to BRANCH OF SERVICE file (#23)
"RTN","DG53P451",21,0)
 N ARY,BOS,FDA,ERR,MSG
"RTN","DG53P451",22,0)
 S ARY(1)="F.COMMONWEALTH"
"RTN","DG53P451",23,0)
 S ARY(2)="F.GUERILLA"
"RTN","DG53P451",24,0)
 S ARY(3)="F.SCOUTS NEW"
"RTN","DG53P451",25,0)
 S ARY(4)="F.SCOUTS OLD"
"RTN","DG53P451",26,0)
 ;
"RTN","DG53P451",27,0)
 D BMES^XPDUTL("  >> Adding New Branch Of Service Entries.")
"RTN","DG53P451",28,0)
 S BOS="" F  S BOS=$O(ARY(BOS)) Q:BOS=""  D
"RTN","DG53P451",29,0)
 .K FDA,ERR
"RTN","DG53P451",30,0)
 .S MSG="     "_ARY(BOS)_" - "
"RTN","DG53P451",31,0)
 .I $$FIND1^DIC(23,"","X",ARY(BOS)) D BMES^XPDUTL(MSG_"entry already exists!") Q
"RTN","DG53P451",32,0)
 .S FDA(23,"+1,",.01)=ARY(BOS)
"RTN","DG53P451",33,0)
 .D UPDATE^DIE("","FDA","","ERR")
"RTN","DG53P451",34,0)
 .I $D(ERR) D BMES^XPDUTL(MSG_"not added!  ERROR:"),MES^XPDUTL(ERR("DIERR",1)_": "_ERR("DIERR",1,"TEXT",1)) Q
"RTN","DG53P451",35,0)
 .D MES^XPDUTL(MSG_"successfully added.")
"RTN","DG53P451",36,0)
 Q
"RTN","DG53P451",37,0)
 ;
"RTN","DG53P451",38,0)
ADDINC ; add new entries to the INCONSISTENT DATA ELEMENTS file (#38.6)
"RTN","DG53P451",39,0)
 N DGK,DGWP,ROOT,DGFDA,DGWP,DGERR,DGIEN,DGTITL
"RTN","DG53P451",40,0)
 K XPDABORT
"RTN","DG53P451",41,0)
 D BMES^XPDUTL("  >> Adding entries 72-85 into the INCONSISTENT DATA ELEMENTS file (#38.6)")
"RTN","DG53P451",42,0)
 F DGK=72:1:85 Q:$G(XPDABORT)=2  D
"RTN","DG53P451",43,0)
 .I $D(^DGIN(38.6,DGK)) D  Q
"RTN","DG53P451",44,0)
 ..D BMES^XPDUTL("     Internal Entry # "_DGK_" already exists in file #38.6")
"RTN","DG53P451",45,0)
 ..S ROOT="DGFDA(38.6,"""_DGK_","")" D @DGK
"RTN","DG53P451",46,0)
 ..I $P($G(^DGIN(38.6,DGK,0)),"^")=$G(@ROOT@(.01)) D MES^XPDUTL("     Entry "_DGK_" matches incoming entry - OK") Q
"RTN","DG53P451",47,0)
 ..D MES^XPDUTL("     >>> ERROR: Entry # "_DGK_" needs to be reviewed by NVS! <<<")
"RTN","DG53P451",48,0)
 ..D MES^XPDUTL("           Existing entry: "_$P($G(^DGIN(38.6,DGK,0)),"^"))
"RTN","DG53P451",49,0)
 ..D MES^XPDUTL("           Incoming entry: "_$G(@ROOT@(.01)))
"RTN","DG53P451",50,0)
 ..D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53P451",51,0)
 ..S XPDABORT=2
"RTN","DG53P451",52,0)
 .K DGFDA,ROOT,DGWP
"RTN","DG53P451",53,0)
 .S ROOT="DGFDA(38.6,""?+1,"")"
"RTN","DG53P451",54,0)
 .D @DGK Q:'$D(DGFDA)
"RTN","DG53P451",55,0)
 .S DGIEN(1)=DGK
"RTN","DG53P451",56,0)
 .S DGTITL=@ROOT@(.01)
"RTN","DG53P451",57,0)
 .D UPDATE^DIE("","DGFDA","DGIEN","DGERR")
"RTN","DG53P451",58,0)
 .I $D(DGERR) D  Q
"RTN","DG53P451",59,0)
 ..D BMES^XPDUTL("   >>> ERROR! "_DGTITL_" not added to file #38.6")
"RTN","DG53P451",60,0)
 ..D MES^XPDUTL("     "_DGERR("DIERR",1)_": "_DGERR("DIERR",1,"TEXT",1))
"RTN","DG53P451",61,0)
 ..D BMES^XPDUTL("                        <<<< INSTALLATION ABORTED >>>>")
"RTN","DG53P451",62,0)
 ..S XPDABORT=2
"RTN","DG53P451",63,0)
 .D BMES^XPDUTL("      "_DGTITL_" successfully added.")
"RTN","DG53P451",64,0)
 Q
"RTN","DG53P451",65,0)
72 ;
"RTN","DG53P451",66,0)
 S @ROOT@(.01)="MSE DATA MISSING/INCOMPLETE"
"RTN","DG53P451",67,0)
 S @ROOT@(2)="MSE REQUIRED DATA FIELDS ARE MISSING OR INCOMPLETE"
"RTN","DG53P451",68,0)
 S @ROOT@(3)=3
"RTN","DG53P451",69,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",70,0)
 S DGWP(1,0)="Inconsistency results when any of the required MSE data fields are "
"RTN","DG53P451",71,0)
 S DGWP(2,0)="either left blank or an imprecise date (less than month/year precision) "
"RTN","DG53P451",72,0)
 S DGWP(3,0)="is entered.  The following fields are required for any given Military "
"RTN","DG53P451",73,0)
 S DGWP(4,0)="Service Episode: BRANCH OF SERVICE, SERVICE ENTRY DATE, SERVICE "
"RTN","DG53P451",74,0)
 S DGWP(5,0)="SEPARATION DATE, DISCHARGE TYPE."
"RTN","DG53P451",75,0)
 Q
"RTN","DG53P451",76,0)
73 ;
"RTN","DG53P451",77,0)
 S @ROOT@(.01)="MSE DATES INCONSISTENT"
"RTN","DG53P451",78,0)
 S @ROOT@(2)="SERVICE SEPARATION DATE PRECEDES SERVICE ENTRY DATE"
"RTN","DG53P451",79,0)
 S @ROOT@(3)=3
"RTN","DG53P451",80,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",81,0)
 S DGWP(1,0)="Inconsistency results when a SERVICE ENTRY DATE is found to be after the"
"RTN","DG53P451",82,0)
 S DGWP(2,0)="SERVICE SEPARATION DATE."
"RTN","DG53P451",83,0)
 Q
"RTN","DG53P451",84,0)
74 ;
"RTN","DG53P451",85,0)
 S @ROOT@(.01)="CONFLICT DT MISSING/INCOMPLETE"
"RTN","DG53P451",86,0)
 S @ROOT@(2)="CONFLICT DATE IS MISSING OR INCOMPLETE"
"RTN","DG53P451",87,0)
 S @ROOT@(3)=3
"RTN","DG53P451",88,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",89,0)
 S DGWP(1,0)="This inconsistency results when a conflict date is either missing or "
"RTN","DG53P451",90,0)
 S DGWP(2,0)="incomplete (imprecise dates must have at least month and year).  The "
"RTN","DG53P451",91,0)
 S DGWP(3,0)="following date fields can trigger this inconsistency: SOMALIA FROM DATE,"
"RTN","DG53P451",92,0)
 S DGWP(4,0)="SOMALIA TO DATE, YUGOSLAVIA FROM DATE, YUGOSLAVIA TO DATE, PANAMA FROM "
"RTN","DG53P451",93,0)
 S DGWP(5,0)="DATE, PANAMA TO DATE, GRENADA FROM DATE, GRENADA TO DATE, LEBANON FROM "
"RTN","DG53P451",94,0)
 S DGWP(6,0)="DATE, LEBANON TO DATE, VIETNAM FROM DATE, VIETNAM TO DATE, GULF WAR FROM"
"RTN","DG53P451",95,0)
 S DGWP(7,0)="DATE, GULF WAR TO DATE."
"RTN","DG53P451",96,0)
 Q
"RTN","DG53P451",97,0)
75 ;
"RTN","DG53P451",98,0)
 S @ROOT@(.01)="CONFLICT TO DT BEFORE FROM DT"
"RTN","DG53P451",99,0)
 S @ROOT@(2)="CONFLICT TO DATE PRECEDES THE CONFLICT FROM DATE"
"RTN","DG53P451",100,0)
 S @ROOT@(3)=3
"RTN","DG53P451",101,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",102,0)
 S DGWP(1,0)="This inconsistency results when a conflict to date is prior to a conflict "
"RTN","DG53P451",103,0)
 S DGWP(2,0)="from date.  The following date fields can trigger this inconsistency:"
"RTN","DG53P451",104,0)
 S DGWP(3,0)="SOMALIA FROM DATE, SOMALIA TO DATE, YUGOSLAVIA FROM DATE, YUGOSLAVIA TO"
"RTN","DG53P451",105,0)
 S DGWP(4,0)="DATE, PANAMA FROM DATE, PANAMA TO DATE, GRENADA FROM DATE, GRENADA TO"
"RTN","DG53P451",106,0)
 S DGWP(5,0)="DATE, LEBANON FROM DATE, LEBANON TO DATE, VIETNAM FROM DATE, VIETNAM TO"
"RTN","DG53P451",107,0)
 S DGWP(6,0)="DATE, GULF WAR FROM DATE, GULF WAR TO DATE."
"RTN","DG53P451",108,0)
 Q
"RTN","DG53P451",109,0)
76 ;
"RTN","DG53P451",110,0)
 S @ROOT@(.01)="INACCURATE CONFLICT DATE"
"RTN","DG53P451",111,0)
 S @ROOT@(2)="CONFLICT DATE IS NOT WITHIN THE ACCEPTABLE CONFLICT DATE RANGE"
"RTN","DG53P451",112,0)
 S @ROOT@(3)=3
"RTN","DG53P451",113,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",114,0)
 S DGWP(1,0)="This inconsistency results when a conflict from and/or to date is not "
"RTN","DG53P451",115,0)
 S DGWP(2,0)="within the designated date ranges for the specific conflict."
"RTN","DG53P451",116,0)
 S DGWP(3,0)=" "
"RTN","DG53P451",117,0)
 S DGWP(4,0)="The following date fields can trigger this inconsistency:"
"RTN","DG53P451",118,0)
 S DGWP(5,0)="SOMALIA FROM DATE, SOMALIA TO DATE, YUGOSLAVIA FROM DATE, YUGOSLAVIA TO"
"RTN","DG53P451",119,0)
 S DGWP(6,0)="DATE, PANAMA FROM DATE, PANAMA TO DATE, GRENADA FROM DATE, GRENADA TO"
"RTN","DG53P451",120,0)
 S DGWP(7,0)="DATE, LEBANON FROM DATE, LEBANON TO DATE, VIETNAM FROM DATE, VIETNAM TO"
"RTN","DG53P451",121,0)
 S DGWP(8,0)="DATE, GULF WAR FROM DATE, GULF WAR TO DATE."
"RTN","DG53P451",122,0)
 Q
"RTN","DG53P451",123,0)
77 ;
"RTN","DG53P451",124,0)
 S @ROOT@(.01)="INACCURATE POW DT/LOCATION"
"RTN","DG53P451",125,0)
 S @ROOT@(2)="POW DATE(S) AND LOCATION DO NOT MATCH"
"RTN","DG53P451",126,0)
 S @ROOT@(3)=3
"RTN","DG53P451",127,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",128,0)
 S DGWP(1,0)="This inconsistency results when the POW from and/or to date is not "
"RTN","DG53P451",129,0)
 S DGWP(2,0)="within the designated date range for the specified POW LOCATION."
"RTN","DG53P451",130,0)
 Q
"RTN","DG53P451",131,0)
78 ;
"RTN","DG53P451",132,0)
 S @ROOT@(.01)="INACCURATE COMBAT DT/LOC"
"RTN","DG53P451",133,0)
 S @ROOT@(2)="COMBAT DATES ARE NOT VALID FOR SPECIFIED LOCATION"
"RTN","DG53P451",134,0)
 S @ROOT@(3)=3
"RTN","DG53P451",135,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",136,0)
 S DGWP(1,0)="This inconsistency results when the COMBAT from and/or to date is "
"RTN","DG53P451",137,0)
 S DGWP(2,0)="not within the designated date range for the specified COMBAT LOCATION."
"RTN","DG53P451",138,0)
 Q
"RTN","DG53P451",139,0)
79 ;
"RTN","DG53P451",140,0)
 S @ROOT@(.01)="MSE DATES OVERLAP"
"RTN","DG53P451",141,0)
 S @ROOT@(2)="MSE DATES OVERLAP"
"RTN","DG53P451",142,0)
 S @ROOT@(3)=3
"RTN","DG53P451",143,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",144,0)
 S DGWP(1,0)="This inconsistency results when more than one Military Service "
"RTN","DG53P451",145,0)
 S DGWP(2,0)="Episode exists for this patient on a single day."
"RTN","DG53P451",146,0)
 Q
"RTN","DG53P451",147,0)
80 ;
"RTN","DG53P451",148,0)
 S @ROOT@(.01)="POW DT NOT WITHIN MSE"
"RTN","DG53P451",149,0)
 S @ROOT@(2)="POW DATES ARE NOT WITHIN THE MSE RANGE"
"RTN","DG53P451",150,0)
 S @ROOT@(3)=3
"RTN","DG53P451",151,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",152,0)
 S DGWP(1,0)="This inconsistency results when the entered POW From/To Dates are not "
"RTN","DG53P451",153,0)
 S DGWP(2,0)="within the patient's military service episodes."
"RTN","DG53P451",154,0)
 Q
"RTN","DG53P451",155,0)
81 ;
"RTN","DG53P451",156,0)
 S @ROOT@(.01)="COMBAT DT NOT WITHIN MSE"
"RTN","DG53P451",157,0)
 S @ROOT@(2)="COMBAT DATE IS NOT WITHIN THE MSE RANGE"
"RTN","DG53P451",158,0)
 S @ROOT@(3)=3
"RTN","DG53P451",159,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",160,0)
 S DGWP(1,0)="This inconsistency results when the entered COMBAT From/To Dates are not"
"RTN","DG53P451",161,0)
 S DGWP(2,0)="within the patient's military service episodes."
"RTN","DG53P451",162,0)
 Q
"RTN","DG53P451",163,0)
82 ;
"RTN","DG53P451",164,0)
 S @ROOT@(.01)="CONFLICT DT NOT WITHIN MSE"
"RTN","DG53P451",165,0)
 S @ROOT@(2)="CONFLICT DATES ARE NOT WITHIN MSE DATE RANGE"
"RTN","DG53P451",166,0)
 S @ROOT@(3)=3
"RTN","DG53P451",167,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",168,0)
 S DGWP(1,0)="This inconsistency results when the entered Conflict From/To Dates are not"
"RTN","DG53P451",169,0)
 S DGWP(2,0)="within the patient's military service episodes."
"RTN","DG53P451",170,0)
 S DGWP(3,0)=" "
"RTN","DG53P451",171,0)
 S DGWP(4,0)="The following fields could cause this inconsistency to occur:  SOMALIA"
"RTN","DG53P451",172,0)
 S DGWP(5,0)="FROM DATE, SOMALIA TO DATE, YUGOSLAVIA FROM DATE, YUGOSLAVIA TO DATE,"
"RTN","DG53P451",173,0)
 S DGWP(6,0)="PANAMA FROM DATE, PANAMA TO DATE, GRENADA FROM DATE, GRENADA TO DATE,"
"RTN","DG53P451",174,0)
 S DGWP(7,0)="LEBANON FROM DATE, LEBANON TO DATE, VIETNAM FROM DATE, VIETNAM TO DATE,"
"RTN","DG53P451",175,0)
 S DGWP(8,0)="GULF WAR FROM DATE, GULF WAR TO DATE."
"RTN","DG53P451",176,0)
 Q
"RTN","DG53P451",177,0)
83 ;
"RTN","DG53P451",178,0)
 S @ROOT@(.01)="BOS REQUIRES DATE W/IN WWII"
"RTN","DG53P451",179,0)
 S @ROOT@(2)="MERCH SEA OR FILIPINO VET BOS REQUIRES SERVICE DATES DURING WWII"
"RTN","DG53P451",180,0)
 S @ROOT@(3)=3
"RTN","DG53P451",181,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",182,0)
 S DGWP(1,0)="Inconsistency results when the Branch of Service is MERCHANT SEAMAN or"
"RTN","DG53P451",183,0)
 S DGWP(2,0)="one of the Filipino Veteran branches of service (F.COMMONWEALTH,"
"RTN","DG53P451",184,0)
 S DGWP(3,0)="F.GUERILLA, F.SCOUTS NEW, F.SCOUTS OLD) but neither the Military"
"RTN","DG53P451",185,0)
 S DGWP(4,0)="Service Start Date nor the Service End Date is within World War II"
"RTN","DG53P451",186,0)
 S DGWP(5,0)="(12/7/1941 - 8/15/1945)."
"RTN","DG53P451",187,0)
 Q
"RTN","DG53P451",188,0)
84 ;
"RTN","DG53P451",189,0)
 S @ROOT@(.01)="FILIPINO VET, PROOF MISSING"
"RTN","DG53P451",190,0)
 S @ROOT@(2)="FILIPINO VETERAN BOS WAS ENTERED, FILIPINO VET PROOF IS MISSING"
"RTN","DG53P451",191,0)
 S @ROOT@(3)=3
"RTN","DG53P451",192,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",193,0)
 S DGWP(1,0)="Inconsistency results if a Filipino Veteran branch of service is entered"
"RTN","DG53P451",194,0)
 S DGWP(2,0)="(F.COMMONWEATH, F.GUERILLA, or F.SCOUTS NEW) but the FILIPINO VET PROOF"
"RTN","DG53P451",195,0)
 S DGWP(3,0)="field is left blank."
"RTN","DG53P451",196,0)
 Q
"RTN","DG53P451",197,0)
85 ;
"RTN","DG53P451",198,0)
 S @ROOT@(.01)="FILIPINO VET SHOULD BE VET='Y'"
"RTN","DG53P451",199,0)
 S @ROOT@(2)="VERIFIED FILIPINO VETERAN SHOULD HAVE A VETERAN STATUS OF 'YES'"
"RTN","DG53P451",200,0)
 S @ROOT@(3)=3
"RTN","DG53P451",201,0)
 S @ROOT@(50)="DGWP"
"RTN","DG53P451",202,0)
 S DGWP(1,0)="Inconsistency results if a veteran has a Filipino Veteran branch of"
"RTN","DG53P451",203,0)
 S DGWP(2,0)="service (F.COMMONWEALTH, F.GUERILLA, F.SCOUTS NEW, or F.SCOUTS OLD),"
"RTN","DG53P451",204,0)
 S DGWP(3,0)="military service dates during World War II, proof of F.Vet eligibility"
"RTN","DG53P451",205,0)
 S DGWP(4,0)="(for the first three BOS only), but the Veteran Status is not 'YES'."
"RTN","DG53P451",206,0)
 Q
"RTN","DG53S451")
0^^B24269496
"RTN","DG53S451",1,0)
DG53S451 ;ALB/TDM - Combat Veteran End Date Synchronization ; 6/3/04 3:43pm
"RTN","DG53S451",2,0)
 ;;5.3;Registration;**451**; Aug 13,1993
"RTN","DG53S451",3,0)
 ;This post install routine will loop through the "E" cross reference
"RTN","DG53S451",4,0)
 ;of the PATIENT (#2) file and trigger a Z07 message to the HEC system
"RTN","DG53S451",5,0)
 ;for all entries that have a value in the COMBAT VETERAN END DATE
"RTN","DG53S451",6,0)
 ;(#.5295) field that is less than 1/17/03.
"RTN","DG53S451",7,0)
 Q
"RTN","DG53S451",8,0)
 ;
"RTN","DG53S451",9,0)
EP ;Entry point
"RTN","DG53S451",10,0)
 N OK
"RTN","DG53S451",11,0)
 D CHK Q:'OK
"RTN","DG53S451",12,0)
 D MSG
"RTN","DG53S451",13,0)
 D QUETASK
"RTN","DG53S451",14,0)
 Q
"RTN","DG53S451",15,0)
 ;
"RTN","DG53S451",16,0)
QUETASK ;Queue the task
"RTN","DG53S451",17,0)
 N TXT,ZTRTN,ZTDESC,ZTSK,ZTIO,ZTDTH
"RTN","DG53S451",18,0)
 S ZTRTN="EP1^DG53S451",ZTIO="",ZTDTH=$$NOW^XLFDT()
"RTN","DG53S451",19,0)
 S ZTDESC="COMBAT VETERAN END DATE SYNCHRONIZATION PROCESS"
"RTN","DG53S451",20,0)
 K ^XTMP("DG53S451")
"RTN","DG53S451",21,0)
 D ^%ZTLOAD S ^XTMP("DG53S451","TASK")=ZTSK
"RTN","DG53S451",22,0)
 S TXT(1)="Task: "_ZTSK_" Queued."
"RTN","DG53S451",23,0)
 D BMES^XPDUTL(.TXT)
"RTN","DG53S451",24,0)
 Q
"RTN","DG53S451",25,0)
 ;
"RTN","DG53S451",26,0)
EP1 ;Entry point
"RTN","DG53S451",27,0)
 N X1,X2,X,XCVDT,XIEN,TOT,CNT,EVENT,IYR
"RTN","DG53S451",28,0)
 S X1=DT,X2=60 D C^%DTC
"RTN","DG53S451",29,0)
 S ^XTMP("DG53S451",0)=X_"^"_$$DT^XLFDT_"^DG*5.3*451 HVE PHASE II POST INSTALL"
"RTN","DG53S451",30,0)
 S $P(^XTMP("DG53S451","DATE"),"^")=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","DG53S451",31,0)
 ;
"RTN","DG53S451",32,0)
 ;Create index by patient.
"RTN","DG53S451",33,0)
 I $D(^DPT("E")) D
"RTN","DG53S451",34,0)
 . S (XCVDT,XIEN)=0
"RTN","DG53S451",35,0)
 . F  S XCVDT=$O(^DPT("E",XCVDT)) Q:XCVDT=""  D
"RTN","DG53S451",36,0)
 . . F  S XIEN=$O(^DPT("E",XCVDT,XIEN)) Q:XIEN=""  D
"RTN","DG53S451",37,0)
 . . . S ^XTMP("DG53S451","INDEX",XIEN)=""
"RTN","DG53S451",38,0)
 ;
"RTN","DG53S451",39,0)
 ;Loop through ^XTMP("DG53S451","INDEX") index.
"RTN","DG53S451",40,0)
 I $D(^XTMP("DG53S451","INDEX")) D
"RTN","DG53S451",41,0)
 . S (XIEN,TOT,CNT)=0,EVENT("ENROLL")=1
"RTN","DG53S451",42,0)
 . F  S XIEN=$O(^XTMP("DG53S451","INDEX",XIEN)) Q:+XIEN=0  D
"RTN","DG53S451",43,0)
 . . S CVDT=$P($G(^DPT(XIEN,.52)),"^",15) Q:'CVDT    ;No CV End Date
"RTN","DG53S451",44,0)
 . . S TOT=TOT+1,$P(^XTMP("DG53S451",1),"^")=TOT     ;Tot records
"RTN","DG53S451",45,0)
 . . Q:(CVDT>3030116)                                ;CVEDT>01/16/03
"RTN","DG53S451",46,0)
 . . S IYR=$$INCYR(XIEN) Q:'$$LOG^IVMPLOG(XIEN,IYR,.EVENT)  ;Queue Z07
"RTN","DG53S451",47,0)
 . . S CNT=CNT+1,$P(^XTMP("DG53S451",1),"^",2)=CNT   ;Tot Z07's queued
"RTN","DG53S451",48,0)
 . . S ^XTMP("DG53S451","INDEX",XIEN)="Z07 Queued"
"RTN","DG53S451",49,0)
 S $P(^XTMP("DG53S451","DATE"),"^",2)=$$FMTE^XLFDT($$NOW^XLFDT(),"5P")
"RTN","DG53S451",50,0)
 S ^XTMP("DG53S451","COMPLETED")=1
"RTN","DG53S451",51,0)
 D MAIL  ;send mailman message to User
"RTN","DG53S451",52,0)
 D BMES^XPDUTL("Post install process for Combat Veteran End Date synchronization is complete.")
"RTN","DG53S451",53,0)
 Q
"RTN","DG53S451",54,0)
 ;
"RTN","DG53S451",55,0)
CHK ;check for completion
"RTN","DG53S451",56,0)
 N TXT,TASKNUM,STAT
"RTN","DG53S451",57,0)
 S OK=1
"RTN","DG53S451",58,0)
 I $D(^XTMP("DG53S451","COMPLETED")) D
"RTN","DG53S451",59,0)
 . S OK=0
"RTN","DG53S451",60,0)
 . N TXT
"RTN","DG53S451",61,0)
 . S TXT(1)="The Combat Veteran End Date synchronization process was completed in a"
"RTN","DG53S451",62,0)
 . S TXT(2)="previous run.  Nothing Done!"
"RTN","DG53S451",63,0)
 . D BMES^XPDUTL(.TXT)
"RTN","DG53S451",64,0)
 ;
"RTN","DG53S451",65,0)
 S TASKNUM=$G(^XTMP("DG53S451","TASK"))
"RTN","DG53S451",66,0)
 I +TASKNUM D  Q
"RTN","DG53S451",67,0)
 . S STAT=$$ACTIVE(TASKNUM)
"RTN","DG53S451",68,0)
 . I STAT>0 D
"RTN","DG53S451",69,0)
 . . S OK=0
"RTN","DG53S451",70,0)
 . . S TXT(1)="Task: "_TASKNUM_" is currently running the Combat Veteran End Date"
"RTN","DG53S451",71,0)
 . . S TXT(2)="synchronization process. Duplicate processes cannot be started."
"RTN","DG53S451",72,0)
 . . D BMES^XPDUTL(.TXT)
"RTN","DG53S451",73,0)
 Q
"RTN","DG53S451",74,0)
 ;
"RTN","DG53S451",75,0)
MSG ;create bulletin message in install file.
"RTN","DG53S451",76,0)
 N TXT
"RTN","DG53S451",77,0)
 S TXT(1)="This Post Install routine will queue a Z07 HL7 message to be sent to the"
"RTN","DG53S451",78,0)
 S TXT(2)="Health Eligibility Center (HEC) for all entries in the PATIENT (#2) file"
"RTN","DG53S451",79,0)
 S TXT(3)="that have a value in the COMBAT VETERAN END DATE (#.5295) field that is"
"RTN","DG53S451",80,0)
 S TXT(4)="prior to 1/17/03. "
"RTN","DG53S451",81,0)
 S TXT(5)=" "
"RTN","DG53S451",82,0)
 D BMES^XPDUTL(.TXT)
"RTN","DG53S451",83,0)
 Q
"RTN","DG53S451",84,0)
 ;
"RTN","DG53S451",85,0)
MAIL N SITE,STATN,SITENM,XMDUZ,XMSUB,XMY,XMTEXT,MSG
"RTN","DG53S451",86,0)
 S SITE=$$SITE^VASITE,STATN=$P($G(SITE),"^",3),SITENM=$P($G(SITE),"^",2)
"RTN","DG53S451",87,0)
 S:$$GET1^DIQ(869.3,"1,",.03,"I")'="P" STATN=STATN_" [TEST]"
"RTN","DG53S451",88,0)
 S XMDUZ="CV END DATE SYNCHRONIZATION",XMSUB=XMDUZ_" - "_STATN_" (DG*5.3*451)"
"RTN","DG53S451",89,0)
 S (XMY(DUZ),XMY(.5))=""
"RTN","DG53S451",90,0)
 S XMY("terry.moore3@med.va.gov")="",XMY("pat.wilson@med.va.gov")=""
"RTN","DG53S451",91,0)
 S XMTEXT="MSG("
"RTN","DG53S451",92,0)
 S MSG(1)="Combat Veteran End Date synchronization process has completed successfully."
"RTN","DG53S451",93,0)
 S MSG(1.5)="Task: "_$G(^XTMP("DG53S451","TASK"))
"RTN","DG53S451",94,0)
 S MSG(2)=""
"RTN","DG53S451",95,0)
 S MSG(3)="Site Station number: "_STATN
"RTN","DG53S451",96,0)
 S MSG(4)="Site Name: "_SITENM
"RTN","DG53S451",97,0)
 S MSG(5)=""
"RTN","DG53S451",98,0)
 S MSG(6)="Process started at           : "_$P($G(^XTMP("DG53S451","DATE")),"^",1)
"RTN","DG53S451",99,0)
 S MSG(7)="Process completed at         : "_$P($G(^XTMP("DG53S451","DATE")),"^",2)
"RTN","DG53S451",100,0)
 S MSG(8)="Total Veterans processed     : "_+$P($G(^XTMP("DG53S451",1)),"^",1)
"RTN","DG53S451",101,0)
 S MSG(9)="Total Veterans queued for Z07: "_+$P($G(^XTMP("DG53S451",1)),"^",2)
"RTN","DG53S451",102,0)
 D ^XMD
"RTN","DG53S451",103,0)
 Q
"RTN","DG53S451",104,0)
 ;
"RTN","DG53S451",105,0)
INCYR(XIEN) ;Get valid income year
"RTN","DG53S451",106,0)
 N I,LMT,TMP,INCYR
"RTN","DG53S451",107,0)
 I $D(^IVM(301.5,"APT",XIEN)) Q $O(^IVM(301.5,"APT",XIEN,""),-1)
"RTN","DG53S451",108,0)
 F I=1,2,4 S LMT=$$LST^DGMTU(XIEN,,I) S:+$G(LMT) TMP($P(LMT,"^",2))=""
"RTN","DG53S451",109,0)
 I $D(TMP) S LMT=$O(TMP(""),-1),INCYR=($E(LMT,1,3)-1)_"0000" Q INCYR
"RTN","DG53S451",110,0)
 S INCYR=($E(DT,1,3)-1)_"0000"
"RTN","DG53S451",111,0)
 Q INCYR
"RTN","DG53S451",112,0)
 ;
"RTN","DG53S451",113,0)
ACTIVE(TASK) ;Checks if task is running
"RTN","DG53S451",114,0)
 ;  input  --  The taskman ID
"RTN","DG53S451",115,0)
 ;  output --  1=The task is running
"RTN","DG53S451",116,0)
 ;             0=The task is not running
"RTN","DG53S451",117,0)
 N STAT,ZTSK,Y
"RTN","DG53S451",118,0)
 S STAT=0,ZTSK=+TASK
"RTN","DG53S451",119,0)
 D STAT^%ZTLOAD
"RTN","DG53S451",120,0)
 S Y=ZTSK(1)
"RTN","DG53S451",121,0)
 I Y=0 S STAT=-1
"RTN","DG53S451",122,0)
 I ",1,2,"[(","_Y_",") S STAT=1
"RTN","DG53S451",123,0)
 I ",3,5,"[(","_Y_",") S STAT=0
"RTN","DG53S451",124,0)
 Q STAT
"RTN","DGENA3")
0^1^B47246291
"RTN","DGENA3",1,0)
DGENA3 ;ALB/CJM,ISA/KWP,RTK,TDM,LBD,PHH,PJR - Enrollment API - Consistency check 05/05/99 ; 7/16/04 1:33pm
"RTN","DGENA3",2,0)
 ;;5.3;Registration;**232,306,327,367,417,454,456,491,514,451**;Aug 13,1993
"RTN","DGENA3",3,0)
 ;CHECKand TESTVAL moved from DGENA1
"RTN","DGENA3",4,0)
CHECK(DGENR,DGPAT,ERRMSG) ;
"RTN","DGENA3",5,0)
 ;Phase II consistency checks do not include INACTIVE(3),REJECTED(4),SUSPENDED(5),EXPIRED(8),PENDING(9) enrollment statuses.  References to these statuses have been removed.
"RTN","DGENA3",6,0)
 ;Description: Does validation checks on the enrollment contained in the
"RTN","DGENA3",7,0)
 ;     DGENR array.
"RTN","DGENA3",8,0)
 ;Input:
"RTN","DGENA3",9,0)
 ;  DGENR - this local array contains an enrollment and should be passed
"RTN","DGENA3",10,0)
 ;      by reference
"RTN","DGENA3",11,0)
 ;  DGPAT - this local array contains the patient object, it is optional
"RTN","DGENA3",12,0)
 ;          If not passed,the database is referenced. (pass by reference)
"RTN","DGENA3",13,0)
 ;Output:
"RTN","DGENA3",14,0)
 ;  Function Value - returns 1 if all validation checks passed, 0
"RTN","DGENA3",15,0)
 ;     otherwise
"RTN","DGENA3",16,0)
 ;  ERRMSG - if the consistency checks fail, an error msg is returned (pass by reference)
"RTN","DGENA3",17,0)
 N VALID,DGELGSUB,SUB,PRIGRP
"RTN","DGENA3",18,0)
 S VALID=0
"RTN","DGENA3",19,0)
 S ERRMSG=""
"RTN","DGENA3",20,0)
 D  ;drops out of block if invalid condition found
"RTN","DGENA3",21,0)
 .I '$G(DGENR("DFN")) S ERRMSG="PATIENT NOT FOUND IN DATABASE" Q
"RTN","DGENA3",22,0)
 .I '$D(^DPT(DGENR("DFN"),0)) S ERRMSG="PATIENT NOT FOUND IN DATABASE" Q
"RTN","DGENA3",23,0)
 .;if it points to a prior record, the DFN must match
"RTN","DGENA3",24,0)
 .I DGENR("PRIORREC") D  Q:(ERRMSG'="")
"RTN","DGENA3",25,0)
 ..N DFN
"RTN","DGENA3",26,0)
 ..S DFN=$P($G(^DGEN(27.11,DGENR("PRIORREC"),0)),"^",2)
"RTN","DGENA3",27,0)
 ..I DFN,DFN'=DGENR("DFN") S ERRMSG="PATIENT'S PRIOR ENROLLMENT BELONGS TO ANOTHER PATIENT"
"RTN","DGENA3",28,0)
 .;check for required fields
"RTN","DGENA3",29,0)
 .F SUB="APP","SOURCE","STATUS","EFFDATE" I $G(DGENR(SUB))="" S ERRMSG="ENROLLMENT FIELD "_$$GET1^DID(27.11,$$FIELD^DGENU(SUB),"","LABEL")_" IS MISSING" Q
"RTN","DGENA3",30,0)
 .Q:(ERRMSG'="")
"RTN","DGENA3",31,0)
 .;if the enrollment priority is present, it must be correct
"RTN","DGENA3",32,0)
 .M DGELGSUB=DGENR("ELIG")
"RTN","DGENA3",33,0)
 .;Phase II if the enrollment priority is present it must be correct based on the eligibility factors (SRS 6.5.1.2 d)
"RTN","DGENA3",34,0)
 .;  ** temporarily commented out for HVE Phase II and III **
"RTN","DGENA3",35,0)
 .;I DGENR("PRIORITY") D  Q:(ERRMSG'="")
"RTN","DGENA3",36,0)
 .;.S PRIGRP=$$PRI^DGENELA4(DGENR("ELIG","CODE"),.DGELGSUB,DGENR("DATE"),$G(DGENR("APP")))
"RTN","DGENA3",37,0)
 .;.;check priority
"RTN","DGENA3",38,0)
 .;.I DGENR("STATUS")=6 Q     ; do not check priority for deceased
"RTN","DGENA3",39,0)
 .;.I DGENR("PRIORITY")'=$P(PRIGRP,"^") D  Q
"RTN","DGENA3",40,0)
 .;..I $G(DGCDIS("VCD"))'="" Q
"RTN","DGENA3",41,0)
 .;..S ERRMSG="ENROLLMENT PRIORITY IS INCONSISTENT WITH ELIGIBILITY DATA - PRIORITY SHOULD BE "_$P(PRIGRP,"^")_$$EXTERNAL^DILFD(27.11,.12,"F",$P(PRIGRP,"^",2))
"RTN","DGENA3",42,0)
 .;.;check subgroup if priority = 7 or 8
"RTN","DGENA3",43,0)
 .;.Q:DGENR("PRIORITY")<7
"RTN","DGENA3",44,0)
 .;.; sub-priority "e" can be overridden with "a" at HEC
"RTN","DGENA3",45,0)
 .;.I "^1^1^5^5^1^"[("^"_DGENR("SUBGRP")_"^"_$P(PRIGRP,"^",2)_"^") Q
"RTN","DGENA3",46,0)
 .;.; sub-priority "g" can be overridden with "c" at HEC
"RTN","DGENA3",47,0)
 .;.I "^3^3^7^7^3^"[("^"_DGENR("SUBGRP")_"^"_$P(PRIGRP,"^",2)_"^") Q
"RTN","DGENA3",48,0)
 .;.S ERRMSG="ENROLLMENT PRIORITY IS INCONSISTENT WITH ELIGIBILITY DATA - PRIORITY SHOULD BE "_$P(PRIGRP,"^")_$$EXTERNAL^DILFD(27.11,.12,"F",$P(PRIGRP,"^",2))
"RTN","DGENA3",49,0)
 .; end of temporary comments
"RTN","DGENA3",50,0)
 .;
"RTN","DGENA3",51,0)
 .;Phase II require priority if status is VERIFIED(2),REJECTED-INITIAL APP(14),REJECTED-FISCAL YEAR(11),REJECTED-MIDCYCLE(12),REJECTED-STOP ENROLL(13),REJECTED BELOW EGT THRESHOLD(SRS 6.5.1.2 b)
"RTN","DGENA3",52,0)
 .I (DGENR("STATUS")=2)!(DGENR("STATUS")=14)!(DGENR("STATUS")=11)!(DGENR("STATUS")=12)!(DGENR("STATUS")=13)!(DGENR("STATUS")=22),DGENR("PRIORITY")="" D  Q
"RTN","DGENA3",53,0)
 ..S ERRMSG="ENROLLMENT PRIORITY IS REQUIRED WITH ENROLLMENT STATUSES: VERIFIED,REJECTED-INITIAL APPLICATION BY VAMC,REJECTED-FISCAL YEAR,REJECTED-MID-CYCLE,REJECTED-STOP NEW ENROLLMENTS,REJECTED-BELOW EGT"
"RTN","DGENA3",54,0)
 .;Phase II require enrollment date when status is verified(2)(SRS 6.5.1.2 d)
"RTN","DGENA3",55,0)
 .I DGENR("STATUS")=2,DGENR("DATE")="" S ERRMSG="ENROLLMENT DATE IS REQUIRED WHEN STATUS IS VERIFIED" Q
"RTN","DGENA3",56,0)
 .;Phase II if enrollment date present with statuses other than verified then veteran must be previously VERIFIED(2) and enrolled (SRS 6.5.1.2 d)
"RTN","DGENA3",57,0)
 .N CURIEN S CURIEN=$$FINDCUR^DGENA(DGENR("DFN"))
"RTN","DGENA3",58,0)
 .I DGENR("DATE"),DGENR("DATE")'="@",DGENR("STATUS")'=2,'CURIEN S ERRMSG="ENROLLMENT DATE IS PRESENT WITH STATUS OTHER THAN VERIFIED AND THE VETERAN WAS NOT PREVIOUSLY ENROLLED." Q
"RTN","DGENA3",59,0)
 .I DGENR("DATE"),DGENR("DATE")'="@",DGENR("STATUS")'=2,CURIEN,$P($G(^DGEN(27.11,CURIEN,0)),"^",4)'=2 S ERRMSG="ENROLLMENT DATE IS PRESENT WITH STATUS OTHER THAN VERIFIED WAS PREVIOUSLY ENROLLED BUT THE PREVIOUS STATUS WAS NOT VERIFIED." Q
"RTN","DGENA3",60,0)
 .;if status is not CANCELED/DECLINED, the REASON field should be ""
"RTN","DGENA3",61,0)
 .I (DGENR("STATUS")'=7),DGENR("REASON") S ERRMSG="ENROLLMENT STATUS OF OTHER THAN CANCELED/DECLINED IS INCONSISTENT WITH REASON CANCELED/DECLINED" Q
"RTN","DGENA3",62,0)
 .;if not an eligible vet, enrollment must not have status of VERIFIED, or UNVERIFIED
"RTN","DGENA3",63,0)
 .;if status is CANCELED/DECLINED, then reason is required
"RTN","DGENA3",64,0)
 .I (DGENR("STATUS")=7),'DGENR("REASON") S ERRMSG="STATUS OF CANCELED/DECLINED REQUIRES REASON" Q
"RTN","DGENA3",65,0)
 .;if status is DECEASED and Date of Death is missing, send bulletin
"RTN","DGENA3",66,0)
 .I DGENR("STATUS")=6 D
"RTN","DGENA3",67,0)
 ..I $D(DGPAT),'DGPAT("DEATH") D BULLETIN
"RTN","DGENA3",68,0)
 ..I '$D(DGPAT),'$$DEATH^DGENPTA(DGENR("DFN")) D BULLETIN
"RTN","DGENA3",69,0)
 .Q:(ERRMSG'="")
"RTN","DGENA3",70,0)
 .;certain statuses not allowed for a dead patient
"RTN","DGENA3",71,0)
 .I $D(DGPAT),DGPAT("DEATH"),(DGENR("STATUS")=1)!(DGENR("STATUS")=2) S ERRMSG="ENROLLMENT STATUS OF VERIFIED OR UNVERIFIED NOT ALLOWED FOR A DECEASED PATIENT" Q
"RTN","DGENA3",72,0)
 .I '$D(DGPAT),$$DEATH^DGENPTA(DGENR("DFN")),(DGENR("STATUS")=1)!(DGENR("STATUS")=2) S ERRMSG="ENROLLMENT STATUS OF VERIFIED OR UNVERIFIED NOT ALLOWED FOR A DECEASED PATIENT" Q
"RTN","DGENA3",73,0)
 .;all the field values must be valid
"RTN","DGENA3",74,0)
 .S SUB="" F  S SUB=$O(DGENR(SUB)) Q:((ERRMSG'="")!(SUB=""))  D
"RTN","DGENA3",75,0)
 ..I SUB'="ELIG",(SUB'="DATE"),(SUB'="FACREC") I '$$TESTVAL(SUB,DGENR(SUB)) S ERRMSG="ENROLLMENT FIELD "_$$GET1^DID(27.11,$$FIELD^DGENU(SUB),"","LABEL")_" IS NOT VALID"
"RTN","DGENA3",76,0)
 .Q:(ERRMSG'="")
"RTN","DGENA3",77,0)
 .S SUB="" F  S SUB=$O(DGENR("ELIG",SUB)) Q:((ERRMSG'="")!(SUB=""))  D
"RTN","DGENA3",78,0)
 ..I '$$TESTVAL(SUB,DGENR("ELIG",SUB)) S ERRMSG="ENROLLMENT FIELD  "_$$GET1^DID(27.11,$$FIELD^DGENU(SUB),"","LABEL")_" IS NOT VALID"
"RTN","DGENA3",79,0)
 .;if this point is reached it's valid
"RTN","DGENA3",80,0)
 .S VALID=1
"RTN","DGENA3",81,0)
 Q VALID
"RTN","DGENA3",82,0)
TESTVAL(SUB,VAL) ;
"RTN","DGENA3",83,0)
 ;Description: returns 1 if VAL is a valid value for subscript SUB
"RTN","DGENA3",84,0)
 N DISPLAY,FIELD,RESULT,VALID
"RTN","DGENA3",85,0)
 S VALID=1
"RTN","DGENA3",86,0)
 I (VAL'="") D
"RTN","DGENA3",87,0)
 .S FIELD=$$FIELD^DGENU(SUB)
"RTN","DGENA3",88,0)
 .;if there is no external value then it is not valid
"RTN","DGENA3",89,0)
 .S DISPLAY=$$EXTERNAL^DILFD(27.11,FIELD,"F",VAL)
"RTN","DGENA3",90,0)
 .I (DISPLAY="") S VALID=0 Q
"RTN","DGENA3",91,0)
 .I $$GET1^DID(27.11,FIELD,"","TYPE")'="POINTER" D
"RTN","DGENA3",92,0)
 ..D CHK^DIE(27.11,FIELD,,VAL,.RESULT) I RESULT="^" S VALID=0 Q
"RTN","DGENA3",93,0)
 Q VALID
"RTN","DGENA3",94,0)
BULLETIN ; Status vs. Date of Death Data Discrepancy Bulletin
"RTN","DGENA3",95,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGENA3",96,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGENA3",97,0)
 Q:'DGMGRP
"RTN","DGENA3",98,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGENA3",99,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGENA3",100,0)
 S XMTEXT="DGBULL("
"RTN","DGENA3",101,0)
 S XMSUB="STATUS VS. DATE OF DEATH DATA DISCREPANCY"
"RTN","DGENA3",102,0)
 S DGLINE=0
"RTN","DGENA3",103,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGENA3",104,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGENA3",105,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENA3",106,0)
 D LINE^DGEN("This Veteran's Enrollment Status is Deceased,",.DGLINE)
"RTN","DGENA3",107,0)
 D LINE^DGEN("however, there is no Date of Death on file for VistA.",.DGLINE)
"RTN","DGENA3",108,0)
 D LINE^DGEN("Actions you should take:",.DGLINE)
"RTN","DGENA3",109,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENA3",110,0)
 D LINE^DGEN("- Add Date of Death Information in VistA, or",.DGLINE)
"RTN","DGENA3",111,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENA3",112,0)
 D LINE^DGEN("- Contact the HEC to remove an erroneous Date of Death.",.DGLINE)
"RTN","DGENA3",113,0)
 D ^XMD
"RTN","DGENA3",114,0)
 Q
"RTN","DGENCD")
0^2^B21215216
"RTN","DGENCD",1,0)
DGENCD ;ALB/CJM,Zoltan,ISA/KWP,JAN,BRM - Catastrophic Disability Enter/Edit Option;May 24, 1999,Nov 14, 2001 ; 8/4/03 3:01pm
"RTN","DGENCD",2,0)
 ;;5.3;Registration;**121,122,232,237,302,387,451**;Aug 13,1993
"RTN","DGENCD",3,0)
 ;
"RTN","DGENCD",4,0)
EN ;
"RTN","DGENCD",5,0)
 ;Description: Entry point used for enter/edit catastrophic disability
"RTN","DGENCD",6,0)
 ;  information.
"RTN","DGENCD",7,0)
 ;
"RTN","DGENCD",8,0)
 N DFN,QUIT,ERROR
"RTN","DGENCD",9,0)
 S QUIT=0
"RTN","DGENCD",10,0)
 S DFN=$$PATIENT
"RTN","DGENCD",11,0)
 D:DFN EN^DGENLCD(DFN)
"RTN","DGENCD",12,0)
 Q
"RTN","DGENCD",13,0)
 ;
"RTN","DGENCD",14,0)
EDITCD(DFN) ;
"RTN","DGENCD",15,0)
 ;Description: For a given patient, used for enter/edit catastrophic 
"RTN","DGENCD",16,0)
 ; disability information.
"RTN","DGENCD",17,0)
 ;
"RTN","DGENCD",18,0)
 Q:'$G(DFN)
"RTN","DGENCD",19,0)
 N QUIT,ERROR
"RTN","DGENCD",20,0)
 S QUIT=0
"RTN","DGENCD",21,0)
 I $$GET^DGENCDA(DFN,.DGCDIS) D  ; If GET CD succeeds ...
"RTN","DGENCD",22,0)
 . ; Set up default values.
"RTN","DGENCD",23,0)
 . S DGCDIS("FACDET")=$$INST^DGENU()
"RTN","DGENCD",24,0)
 . I 'DGCDIS("DATE") S DGCDIS("DATE")=$G(DT)
"RTN","DGENCD",25,0)
 . I 'DGCDIS("REVDTE") S DGCDIS("REVDTE")=DGCDIS("DATE")
"RTN","DGENCD",26,0)
 . I DGCDIS("METDET")="" S DGCDIS("METDET")=""
"RTN","DGENCD",27,0)
 . ; Keep editing until storage succeeds or user gives up ...
"RTN","DGENCD",28,0)
 . F  D  Q:QUIT
"RTN","DGENCD",29,0)
 . . ; Quit if the editing process isn't completed.
"RTN","DGENCD",30,0)
 . . I '$$EDIT(.DGCDIS) S QUIT=1 Q
"RTN","DGENCD",31,0)
 . . ; Quit if storage is successful.
"RTN","DGENCD",32,0)
 . . I $$STORE^DGENCDA2(DFN,.DGCDIS,.ERROR) S QUIT=1 Q
"RTN","DGENCD",33,0)
 . . ; Quit if the user elects not to try again.
"RTN","DGENCD",34,0)
 . . I '$$AGAIN(.ERROR) S QUIT=1
"RTN","DGENCD",35,0)
 Q
"RTN","DGENCD",36,0)
 ;
"RTN","DGENCD",37,0)
AGAIN(ERROR) ;
"RTN","DGENCD",38,0)
 ;Description: Asks user whether to try again.
"RTN","DGENCD",39,0)
 ;
"RTN","DGENCD",40,0)
 N DIR,Y
"RTN","DGENCD",41,0)
 W !!,$S(('$L($G(ERROR))):">>> Catastrophic disability information not valid.<<< ",1:">>> "_ERROR_" <<<")
"RTN","DGENCD",42,0)
 S DIR(0)="Y",DIR("A")="Try again",DIR("B")="YES"
"RTN","DGENCD",43,0)
 D ^DIR
"RTN","DGENCD",44,0)
 Q $S(Y=1:1,1:0)
"RTN","DGENCD",45,0)
 ;
"RTN","DGENCD",46,0)
PATIENT() ;
"RTN","DGENCD",47,0)
 ;Description: Asks user to select a patient.
"RTN","DGENCD",48,0)
 ;
"RTN","DGENCD",49,0)
 N DFN,QUIT
"RTN","DGENCD",50,0)
 S (DFN,QUIT)=""
"RTN","DGENCD",51,0)
 F  D  Q:(QUIT!DFN)
"RTN","DGENCD",52,0)
 . D GETPAT^DGRPTU(,,.DFN)
"RTN","DGENCD",53,0)
 . I '(DFN>0) S DFN="",QUIT=1 Q
"RTN","DGENCD",54,0)
 . I DFN,'$$VET^DGENPTA(DFN) D
"RTN","DGENCD",55,0)
 . . W !!,"Catastrophic disability can only be entered for eligible veterans!"
"RTN","DGENCD",56,0)
 . . S DFN=""
"RTN","DGENCD",57,0)
 Q DFN
"RTN","DGENCD",58,0)
 ;
"RTN","DGENCD",59,0)
EDIT(DGCDIS) ;
"RTN","DGENCD",60,0)
 ;Description: Allows user to enter values in DGCDIS array
"RTN","DGENCD",61,0)
 ; which is passed by reference.
"RTN","DGENCD",62,0)
 N SUB,OK,RESPONSE,FLST,EXIT,SUBEXIT,ITEM,FILENUM,FLDNUM,GETOUT,REQ,VAL
"RTN","DGENCD",63,0)
 S OK=1
"RTN","DGENCD",64,0)
 F VAL="BY^1","DATE^1","REVDTE^1","METDET^1" D  Q:'OK
"RTN","DGENCD",65,0)
 . S SUB=$P(VAL,"^",1)
"RTN","DGENCD",66,0)
 . S REQ=$P(VAL,"^",2)
"RTN","DGENCD",67,0)
 . S FILENUM=$$FILE^DGENCDU(SUB)
"RTN","DGENCD",68,0)
 . S FLDNUM=$$FLD^DGENCDU(SUB)
"RTN","DGENCD",69,0)
 . I '$$PROMPT^DGENU(FILENUM,FLDNUM,DGCDIS(SUB),.RESPONSE,REQ) S OK=0
"RTN","DGENCD",70,0)
 . E  D
"RTN","DGENCD",71,0)
 . . I $P(VAL,"^",1)="BY" S RESPONSE=$$UPPER^DGUTL(RESPONSE)
"RTN","DGENCD",72,0)
 . . S DGCDIS(SUB)=RESPONSE
"RTN","DGENCD",73,0)
 I 'OK Q OK
"RTN","DGENCD",74,0)
 S GETOUT=0
"RTN","DGENCD",75,0)
 F FLST="DIAG","PROC;EXT","COND;SCORE;PERM" D  Q:'OK!GETOUT
"RTN","DGENCD",76,0)
 . N LOOKUP
"RTN","DGENCD",77,0)
 . S ITEM="",SUB=$P(FLST,";")
"RTN","DGENCD",78,0)
 . F  S ITEM=$O(DGCDIS(SUB,ITEM)) Q:ITEM=""  S LOOKUP(DGCDIS(SUB,ITEM))=ITEM
"RTN","DGENCD",79,0)
 . S EXIT=0
"RTN","DGENCD",80,0)
 . S ITEM=1
"RTN","DGENCD",81,0)
 . W !
"RTN","DGENCD",82,0)
 . F  D  Q:EXIT
"RTN","DGENCD",83,0)
 . . N PC
"RTN","DGENCD",84,0)
 . . S SUB=$P(FLST,";")
"RTN","DGENCD",85,0)
 . . S FILENUM=$$FILE^DGENCDU(SUB)
"RTN","DGENCD",86,0)
 . . S FLDNUM=$$FLD^DGENCDU(SUB)
"RTN","DGENCD",87,0)
 . . W !
"RTN","DGENCD",88,0)
 . . I '$$PROMPT^DGENU(FILENUM,FLDNUM,$G(DGCDIS(SUB,ITEM)),.RESPONSE,0) S (EXIT,GETOUT)=1 Q
"RTN","DGENCD",89,0)
 . . I RESPONSE="" D  Q
"RTN","DGENCD",90,0)
 . . . F PC=1:1:$L(FLST,";") K DGCDIS($P(FLST,";",PC),ITEM)
"RTN","DGENCD",91,0)
 . . . S ITEM=$O(DGCDIS(SUB,ITEM))
"RTN","DGENCD",92,0)
 . . . I ITEM="" S EXIT=1
"RTN","DGENCD",93,0)
 . . I $G(LOOKUP(RESPONSE)) S ITEM=LOOKUP(RESPONSE)
"RTN","DGENCD",94,0)
 . . E  S ITEM=$O(DGCDIS(SUB,""),-1)+1,LOOKUP(RESPONSE)=ITEM
"RTN","DGENCD",95,0)
 . . S DGCDIS(SUB,ITEM)=RESPONSE
"RTN","DGENCD",96,0)
 . . S SUBEXIT=0
"RTN","DGENCD",97,0)
 . . F PC=2:1:$L(FLST,";") D  Q:SUBEXIT
"RTN","DGENCD",98,0)
 . . . S SUB=$P(FLST,";",PC)
"RTN","DGENCD",99,0)
 . . . S FLDNUM=$$FLD^DGENCDU(SUB)
"RTN","DGENCD",100,0)
 . . . I '$$PROMPT^DGENU(FILENUM,FLDNUM,$G(DGCDIS(SUB,ITEM)),.RESPONSE,1) S SUBEXIT=1 Q
"RTN","DGENCD",101,0)
 . . . I RESPONSE="" S (EXIT,SUBEXIT)=1 Q
"RTN","DGENCD",102,0)
 . . . I SUB="EXT" D  Q
"RTN","DGENCD",103,0)
 . . . . I '$D(DGCDIS(SUB,ITEM,1)) S DGCDIS(SUB,ITEM,1)=RESPONSE
"RTN","DGENCD",104,0)
 . . . . E  S:DGCDIS(SUB,ITEM,1)'=RESPONSE DGCDIS(SUB,ITEM,2)=RESPONSE
"RTN","DGENCD",105,0)
 . . . I SUB="SCORE",'$$VALID^DGENA5(DGCDIS("COND",ITEM),RESPONSE) D  Q
"RTN","DGENCD",106,0)
 . . . . W !,"ERROR: This is not a valid test score.",!
"RTN","DGENCD",107,0)
 . . . . Q:$G(DGCDIS("SCORE",ITEM))
"RTN","DGENCD",108,0)
 . . . . K LOOKUP(DGCDIS("COND",ITEM))
"RTN","DGENCD",109,0)
 . . . . F PC=1:1:$L(FLST,";") K DGCDIS($P(FLST,";",PC),ITEM)
"RTN","DGENCD",110,0)
 . . . . S PC=$L(FLST,";")
"RTN","DGENCD",111,0)
 . . . I SUB="SCORE",'$$RANGEMET^DGENA5(DGCDIS("COND",ITEM),RESPONSE,1) D  Q
"RTN","DGENCD",112,0)
 . . . . S PC=$L(FLST,";")
"RTN","DGENCD",113,0)
 . . . . S DGCDIS("SCORE",ITEM)=RESPONSE
"RTN","DGENCD",114,0)
 . . . . S DGCDIS("PERM",ITEM)=""
"RTN","DGENCD",115,0)
 . . . S DGCDIS(SUB,ITEM)=RESPONSE
"RTN","DGENCD",116,0)
 . . S ITEM=ITEM+'SUBEXIT
"RTN","DGENCD",117,0)
 S DGCDIS("VCD")="Y"
"RTN","DGENCD",118,0)
 S DGCDIS("VCD")=$S($$ISCD^DGENCDA1(.DGCDIS):"Y",1:"N")
"RTN","DGENCD",119,0)
 S OK=$$PROMPT^DGENU(2,.39,DGCDIS("VCD"),.RESPONSE,0) ; Is Veteran CD?
"RTN","DGENCD",120,0)
 I OK S DGCDIS("VCD")=RESPONSE
"RTN","DGENCD",121,0)
 Q OK
"RTN","DGENCD1")
0^3^B19075915
"RTN","DGENCD1",1,0)
DGENCD1 ;ALB/CJM,Zoltan,PHH,BRM - Catastrophic Disability Protocols;16 JUN 1997 01:30 pm ; 8/5/03 3:50pm
"RTN","DGENCD1",2,0)
 ;;5.3;Registration;**121,232,387,451**;Aug 13,1993
"RTN","DGENCD1",3,0)
 ;
"RTN","DGENCD1",4,0)
EN(DFN) ;Entry point for DGENCD CATASTROPHIC DISABILITY protocol
"RTN","DGENCD1",5,0)
 D EN^DGENLCD(DFN)
"RTN","DGENCD1",6,0)
 D:DFN BLD^DGENL
"RTN","DGENCD1",7,0)
 Q
"RTN","DGENCD1",8,0)
 ;
"RTN","DGENCD1",9,0)
ADDCD ;Entry point for DGENCD ADD/EDIT CATASTROPHIC DISABILITY protocol 
"RTN","DGENCD1",10,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGENCD1",11,0)
 ; Output -- VALMBCK  R   =Refresh screen
"RTN","DGENCD1",12,0)
 N YN,EXIT,PRI,CDSITE
"RTN","DGENCD1",13,0)
 S VALMBCK="",EXIT=0
"RTN","DGENCD1",14,0)
 D FULL^VALM1
"RTN","DGENCD1",15,0)
 I $$CDTYPE^DGENCDA(DFN) D  ;was determination by physical exam?
"RTN","DGENCD1",16,0)
 .S CDSITE=$$CHKSITE^DGENCDA(DFN)
"RTN","DGENCD1",17,0)
 .I CDSITE D  ;CD was determined by this site
"RTN","DGENCD1",18,0)
 ..D BMES^XPDUTL("This veteran is currently determined to be Catastrophically")
"RTN","DGENCD1",19,0)
 ..D MES^XPDUTL("Disabled.  You may not change this evaluation unless it is due")
"RTN","DGENCD1",20,0)
 ..D MES^XPDUTL("to an error in data entry.")
"RTN","DGENCD1",21,0)
 ..S YN=$$YN("Is this edit due to an error in data entry")
"RTN","DGENCD1",22,0)
 ..D:"N^"[$E($G(YN))
"RTN","DGENCD1",23,0)
 ...D BMES^XPDUTL("Additional CD evaluations are not necessary for this")
"RTN","DGENCD1",24,0)
 ...D MES^XPDUTL("Veteran, as they are currently determined to be CD.  If")
"RTN","DGENCD1",25,0)
 ...D MES^XPDUTL("this is an edit due to an error, please return to the")
"RTN","DGENCD1",26,0)
 ...D MES^XPDUTL("Add/Edit action and answer YES to this prompt.")
"RTN","DGENCD1",27,0)
 ...S EXIT=1
"RTN","DGENCD1",28,0)
 .E  D  ;  CD was determined by another site
"RTN","DGENCD1",29,0)
 ..S SITEINF=$$NS^XUAF4($P(CDSITE,"^",2))
"RTN","DGENCD1",30,0)
 ..D BMES^XPDUTL("This Catastrophic Disability evaluation was entered at Site:"_$P(SITEINF,"^",2))
"RTN","DGENCD1",31,0)
 ..D MES^XPDUTL("Please Contact Site "_$P(SITEINF,"^"))
"RTN","DGENCD1",32,0)
 ..D MES^XPDUTL("if it is necessary to edit this evaluation.")
"RTN","DGENCD1",33,0)
 ..S EXIT=1
"RTN","DGENCD1",34,0)
 ..S DIR(0)="EA",DIR("A")="Press return to continue..." D ^DIR
"RTN","DGENCD1",35,0)
 I EXIT S VALMBCK="R" Q
"RTN","DGENCD1",36,0)
 ;
"RTN","DGENCD1",37,0)
 S PRI=$$PRIORITY^DGENA(DFN)
"RTN","DGENCD1",38,0)
 I PRI,PRI'>4 D
"RTN","DGENCD1",39,0)
 . W:$X !
"RTN","DGENCD1",40,0)
 . W !,"According to the veteran's current enrollment record, the",!
"RTN","DGENCD1",41,0)
 . W "assignment of a Catastrophically Disabled Status will not",!
"RTN","DGENCD1",42,0)
 . W "improve his/her enrollment priority.",!!
"RTN","DGENCD1",43,0)
 . S YN=$$YN("Do you still want to perform a review")
"RTN","DGENCD1",44,0)
 . I "N^"[$E($G(YN)) S EXIT=1
"RTN","DGENCD1",45,0)
 I 'EXIT D EDITCD^DGENCD(DFN),INIT^DGENLCD
"RTN","DGENCD1",46,0)
 S VALMBCK="R"
"RTN","DGENCD1",47,0)
 Q
"RTN","DGENCD1",48,0)
 ;
"RTN","DGENCD1",49,0)
DELETECD ;Entry point for DGENCD DELETE CATASTROPHIC DISABILITY protocol 
"RTN","DGENCD1",50,0)
 ; Input  -- DFN      Patient IEN
"RTN","DGENCD1",51,0)
 ; Output -- VALMBCK  R   =Refresh screen
"RTN","DGENCD1",52,0)
 S VALMBCK=""
"RTN","DGENCD1",53,0)
 D FULL^VALM1
"RTN","DGENCD1",54,0)
 I $$RUSURE(DFN) D
"RTN","DGENCD1",55,0)
 .I $$DELETE^DGENCDA1(DFN)
"RTN","DGENCD1",56,0)
 D INIT^DGENLCD
"RTN","DGENCD1",57,0)
 S VALMBCK="R"
"RTN","DGENCD1",58,0)
 Q
"RTN","DGENCD1",59,0)
 ;
"RTN","DGENCD1",60,0)
RUSURE(DFN) ;
"RTN","DGENCD1",61,0)
 ;Description: Asks user 'Are you sure?'
"RTN","DGENCD1",62,0)
 ;Input: DFN is the patient ien
"RTN","DGENCD1",63,0)
 ;Output: Function Value returns 0 or 1
"RTN","DGENCD1",64,0)
 ;
"RTN","DGENCD1",65,0)
 N DIR,SITE,SITEINF,DIROUT,DIRUT,DTOUT,DUOUT,NOERR
"RTN","DGENCD1",66,0)
 S SITE=$$CHKSITE^DGENCDA(DFN)
"RTN","DGENCD1",67,0)
 I '$P(SITE,"^") D  Q 0   ;CD was not determined at this site
"RTN","DGENCD1",68,0)
 .S SITEINF=$$NS^XUAF4($P(SITE,"^",2))
"RTN","DGENCD1",69,0)
 .D BMES^XPDUTL("This Catastrophic Disability evaluation was entered at Site:"_$P(SITEINF,"^",2))
"RTN","DGENCD1",70,0)
 .D MES^XPDUTL("Please Contact Site "_$P(SITEINF,"^"))
"RTN","DGENCD1",71,0)
 .D MES^XPDUTL("if it is necessary to delete this evaluation.")
"RTN","DGENCD1",72,0)
 ; was this entered in error?
"RTN","DGENCD1",73,0)
 I $$CDTYPE^DGENCDA(DFN) D  Q:$G(NOERR) 0
"RTN","DGENCD1",74,0)
 .D BMES^XPDUTL("This Veteran is currently determined to be Catastrophically Disabled, you")
"RTN","DGENCD1",75,0)
 .D MES^XPDUTL("may not delete this evaluation unless it is due to an error in data entry.")
"RTN","DGENCD1",76,0)
 .S DIR(0)="Y",DIR("B")="NO"
"RTN","DGENCD1",77,0)
 .S DIR("A")="Is this deletion due to an error in data entry"
"RTN","DGENCD1",78,0)
 .D ^DIR
"RTN","DGENCD1",79,0)
 .I $G(DIRUT)!$G(DUOUT)!$G(DIROUT)!$G(DTOUT)!('$G(Y)) S NOERR=1
"RTN","DGENCD1",80,0)
 .K DIR,Y
"RTN","DGENCD1",81,0)
 ;
"RTN","DGENCD1",82,0)
 S DIR(0)="Y"
"RTN","DGENCD1",83,0)
 S DIR("A")="Are you sure that the Catastrophic Disability should be deleted"
"RTN","DGENCD1",84,0)
 S DIR("B")="NO"
"RTN","DGENCD1",85,0)
 I $$HASCAT^DGENCDA(DFN) D
"RTN","DGENCD1",86,0)
 . W !!,">>> Deleting the Catastrophic Disability information will also delete all <<<",!
"RTN","DGENCD1",87,0)
 . W ">>>  supporting fields, including Diagnoses, Procedures and Conditions.   <<<",!
"RTN","DGENCD1",88,0)
 D ^DIR
"RTN","DGENCD1",89,0)
 Q:$D(DIRUT) 0
"RTN","DGENCD1",90,0)
 Q Y
"RTN","DGENCD1",91,0)
 ;
"RTN","DGENCD1",92,0)
YN(PROMPT,DFLT) ; Ask user a yes/no question.
"RTN","DGENCD1",93,0)
 S DFLT=$E($G(DFLT,"N"))
"RTN","DGENCD1",94,0)
 N YN,%,%Y
"RTN","DGENCD1",95,0)
 F  D  Q:"YN^"[YN
"RTN","DGENCD1",96,0)
 . W PROMPT
"RTN","DGENCD1",97,0)
 . S %=$S(DFLT="N":2,DFLT="Y":1,1:0)
"RTN","DGENCD1",98,0)
 . D YN^DICN
"RTN","DGENCD1",99,0)
 . W !
"RTN","DGENCD1",100,0)
 . S YN=$S(%=-1:"^",%=1:"Y",%=2:"N",1:"?")
"RTN","DGENCD1",101,0)
 . I YN["?" W ?5,"You can just enter 'Y' or 'N'.",!!
"RTN","DGENCD1",102,0)
 Q YN
"RTN","DGENCDA")
0^4^B6940264
"RTN","DGENCDA",1,0)
DGENCDA ;ALB/CJM,Zoltan,JAN,BRM - Catastrophic Disability API - Retrieve Data;May 24, 1999;Nov 14, 2001 ; 7/6/04 5:36pm
"RTN","DGENCDA",2,0)
 ;;5.3;Registration;**121,147,232,387,451**;Aug 13,1993
"RTN","DGENCDA",3,0)
 ;
"RTN","DGENCDA",4,0)
GET(DFN,DGCDIS) ;
"RTN","DGENCDA",5,0)
 ;Description: Get catastrophic disability information for a patient
"RTN","DGENCDA",6,0)
 ;Input:
"RTN","DGENCDA",7,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA",8,0)
 ;Output:     
"RTN","DGENCDA",9,0)
 ;  DGCDIS - the catastrophic disability array, passed by reference
"RTN","DGENCDA",10,0)
 ;   subscripts:
"RTN","DGENCDA",11,0)
 ;   "BY"     Decided By
"RTN","DGENCDA",12,0)
 ;   "DATE"     Date of Decision
"RTN","DGENCDA",13,0)
 ;   "FACDET"     Facility Making Determination
"RTN","DGENCDA",14,0)
 ;   "REVDTE"     Review Date
"RTN","DGENCDA",15,0)
 ;
"RTN","DGENCDA",16,0)
 N SUB,ITEM,SITEM,SIEN,IND
"RTN","DGENCDA",17,0)
 K DGCDIS S DGCDIS=""
"RTN","DGENCDA",18,0)
 I '$G(DFN) D  Q 0
"RTN","DGENCDA",19,0)
 . F SUB="VCD","BY","DATE","FACDET","REVDTE","METDET" S DGCDIS(SUB)=""
"RTN","DGENCDA",20,0)
 ; .39 VETERAN CATASTROPHICALLY DISABLED? field.
"RTN","DGENCDA",21,0)
 S DGCDIS("VCD")=$P($G(^DPT(DFN,.39)),"^",6)
"RTN","DGENCDA",22,0)
 ; .391 DECIDED BY field.
"RTN","DGENCDA",23,0)
 S DGCDIS("BY")=$P($G(^DPT(DFN,.39)),"^",1)
"RTN","DGENCDA",24,0)
 ; .392 DATE OF DECISION field.
"RTN","DGENCDA",25,0)
 S DGCDIS("DATE")=$P($G(^DPT(DFN,.39)),"^",2)
"RTN","DGENCDA",26,0)
 ; .393 FACILITY MAKING DETERMINATION field.
"RTN","DGENCDA",27,0)
 S DGCDIS("FACDET")=$P($G(^DPT(DFN,.39)),"^",3)
"RTN","DGENCDA",28,0)
 ; .394 REVIEW DATE field.
"RTN","DGENCDA",29,0)
 S DGCDIS("REVDTE")=$P($G(^DPT(DFN,.39)),"^",4)
"RTN","DGENCDA",30,0)
 ; .395 METHOD OF DETERMINATION field.
"RTN","DGENCDA",31,0)
 S DGCDIS("METDET")=$P($G(^DPT(DFN,.39)),"^",5)
"RTN","DGENCDA",32,0)
 ; .396 CD STATUS DIAGNOSES field (multiple):
"RTN","DGENCDA",33,0)
 S SIEN=0
"RTN","DGENCDA",34,0)
 F ITEM=1:1 S SIEN=$O(^DPT(DFN,.396,SIEN)) Q:'SIEN  D
"RTN","DGENCDA",35,0)
 . ; .01 CD STATUS DIAGNOSES sub-field.
"RTN","DGENCDA",36,0)
 . S DGCDIS("DIAG",ITEM)=$P($G(^DPT(DFN,.396,SIEN,0)),"^",1)
"RTN","DGENCDA",37,0)
 ; .397 CD STATUS PROCEDURES field (multiple):
"RTN","DGENCDA",38,0)
 S (ITEM,SITEM,SIEN)=0
"RTN","DGENCDA",39,0)
 F  S ITEM=$O(^DPT(DFN,.397,"B",ITEM)) Q:'ITEM  D
"RTN","DGENCDA",40,0)
 . S IND=0,SIEN=SIEN+1
"RTN","DGENCDA",41,0)
 . F  S SITEM=$O(^DPT(DFN,.397,"B",ITEM,SITEM)) Q:'SITEM  D
"RTN","DGENCDA",42,0)
 . . ; .01 CD STATUS PROCEDURES sub-field.
"RTN","DGENCDA",43,0)
 . . S DGCDIS("PROC",SIEN)=$P($G(^DPT(DFN,.397,SITEM,0)),"^",1)
"RTN","DGENCDA",44,0)
 . . ; 1 AFFECTED EXTREMITY sub-field.
"RTN","DGENCDA",45,0)
 . . S DGCDIS("EXT",SIEN)=$P($G(^DPT(DFN,.397,SITEM,0)),"^",2)
"RTN","DGENCDA",46,0)
 . . S IND=IND+1,DGCDIS("EXT",SIEN,IND)=$P($G(^DPT(DFN,.397,SITEM,0)),"^",2)
"RTN","DGENCDA",47,0)
 ; - .398 CD STATUS CONDITIONS field (multiple):
"RTN","DGENCDA",48,0)
 S SIEN=0
"RTN","DGENCDA",49,0)
 F ITEM=1:1 S SIEN=$O(^DPT(DFN,.398,SIEN)) Q:'SIEN  D
"RTN","DGENCDA",50,0)
 . ; .01 CD STATUS CONDITIONS sub-field.
"RTN","DGENCDA",51,0)
 . S DGCDIS("COND",ITEM)=$P($G(^DPT(DFN,.398,SIEN,0)),"^",1)
"RTN","DGENCDA",52,0)
 . ; 1 SCORE sub-field.
"RTN","DGENCDA",53,0)
 . S DGCDIS("SCORE",ITEM)=$P($G(^DPT(DFN,.398,SIEN,0)),"^",2)
"RTN","DGENCDA",54,0)
 . ; 2 PERMANENT INDICATOR sub-field.
"RTN","DGENCDA",55,0)
 . S DGCDIS("PERM",ITEM)=$P($G(^DPT(DFN,.398,SIEN,0)),"^",3)
"RTN","DGENCDA",56,0)
 Q 1
"RTN","DGENCDA",57,0)
 ;
"RTN","DGENCDA",58,0)
DISABLED(DFN) ;
"RTN","DGENCDA",59,0)
 ;Description: Returns whether the patient is catastrophically disabled.
"RTN","DGENCDA",60,0)
 ;
"RTN","DGENCDA",61,0)
 ;Input:
"RTN","DGENCDA",62,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA",63,0)
 ;Output:
"RTN","DGENCDA",64,0)
 ;  Function Value - returns 1 if the patient is catastrophically
"RTN","DGENCDA",65,0)
 ;     disabled, otherwise 0
"RTN","DGENCDA",66,0)
 ;
"RTN","DGENCDA",67,0)
 Q $$HASCAT(DFN)
"RTN","DGENCDA",68,0)
 ;
"RTN","DGENCDA",69,0)
HASCAT(DFN) ;
"RTN","DGENCDA",70,0)
 ;Description: returns 1 if the patient is CATASTROPHICALLY DISABLED
"RTN","DGENCDA",71,0)
 ;
"RTN","DGENCDA",72,0)
 Q:'$G(DFN) 0
"RTN","DGENCDA",73,0)
 Q $P($G(^DPT(DFN,.39)),"^",6)="Y"
"RTN","DGENCDA",74,0)
 ;
"RTN","DGENCDA",75,0)
CHKSITE(DFN) ;is this the facility that made the CD determination?
"RTN","DGENCDA",76,0)
 ; 
"RTN","DGENCDA",77,0)
 ;Input:
"RTN","DGENCDA",78,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA",79,0)
 ;Output:
"RTN","DGENCDA",80,0)
 ;  Function Value - returns 1 if CD evaluation was entered at local
"RTN","DGENCDA",81,0)
 ;     site, otherwise 0^SITE #
"RTN","DGENCDA",82,0)
 ;
"RTN","DGENCDA",83,0)
 Q:'$G(DFN) 0
"RTN","DGENCDA",84,0)
 N SITE
"RTN","DGENCDA",85,0)
 S SITE=$$SITE^VASITE
"RTN","DGENCDA",86,0)
 Q:$P($G(^DPT(DFN,.39)),"^",3)=$P(SITE,"^") 1
"RTN","DGENCDA",87,0)
 Q "0^"_$P($G(^DPT(DFN,.39)),"^",3)
"RTN","DGENCDA",88,0)
 ;
"RTN","DGENCDA",89,0)
CDTYPE(DFN) ; Was the method of determination "Physical Exam"?
"RTN","DGENCDA",90,0)
 ;
"RTN","DGENCDA",91,0)
 ;Input:
"RTN","DGENCDA",92,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA",93,0)
 ;Output:
"RTN","DGENCDA",94,0)
 ;  Function Value - returns 1 if CD='Yes' & Method='Physical Exam'
"RTN","DGENCDA",95,0)
 ;     otherwise 0
"RTN","DGENCDA",96,0)
 ;
"RTN","DGENCDA",97,0)
 Q:'$G(DFN) 0
"RTN","DGENCDA",98,0)
 Q:'$$HASCAT(DFN) 0
"RTN","DGENCDA",99,0)
 Q $P($G(^DPT(DFN,.39)),"^",5)=3
"RTN","DGENCDA",100,0)
 ;
"RTN","DGENCDA1")
0^40^B46291453
"RTN","DGENCDA1",1,0)
DGENCDA1 ;ALB/CJM,RMM Zoltan,JAN,PHH,BRM - Catastrophic Disabilty API - File Data;Sep 16, 2002 ; 7/7/04 11:29am
"RTN","DGENCDA1",2,0)
 ;;5.3;Registration;**121,147,232,302,356,387,475,451**;Aug 13,1993
"RTN","DGENCDA1",3,0)
 ;
"RTN","DGENCDA1",4,0)
LOCK(DFN) ;
"RTN","DGENCDA1",5,0)
 ;Description: Locks the catastrophic disability record for a patient
"RTN","DGENCDA1",6,0)
 ;Input:
"RTN","DGENCDA1",7,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA1",8,0)
 ;Output:     
"RTN","DGENCDA1",9,0)
 ;  Function Value - returns 1 if the patient is catastrophic disability
"RTN","DGENCDA1",10,0)
 ;     record can be locked, otherwise 0
"RTN","DGENCDA1",11,0)
 I $G(DFN) L +^DPT(DFN,.39):2
"RTN","DGENCDA1",12,0)
 Q $T
"RTN","DGENCDA1",13,0)
 ;
"RTN","DGENCDA1",14,0)
UNLOCK(DFN) ;
"RTN","DGENCDA1",15,0)
 ;Description: Unlocks the catastrophic disability record for a patient
"RTN","DGENCDA1",16,0)
 ;Input:
"RTN","DGENCDA1",17,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA1",18,0)
 ;Output:     
"RTN","DGENCDA1",19,0)
 ;  None
"RTN","DGENCDA1",20,0)
 I $G(DFN) L -^DPT(DFN,.39)
"RTN","DGENCDA1",21,0)
 Q
"RTN","DGENCDA1",22,0)
 ;
"RTN","DGENCDA1",23,0)
CHECK(DGCDIS,ERROR) ;
"RTN","DGENCDA1",24,0)
 ;Description: Validity checks on the catastrophic disability contained
"RTN","DGENCDA1",25,0)
 ;   in the DGCDIS array
"RTN","DGENCDA1",26,0)
 ;Input:
"RTN","DGENCDA1",27,0)
 ;  DGCDIS - the catastrophic disability array, passed by reference
"RTN","DGENCDA1",28,0)
 ;Output:
"RTN","DGENCDA1",29,0)
 ;  Function Value - returns 1 if validation checks passed, 0 otherwise
"RTN","DGENCDA1",30,0)
 ;  ERROR - if validation fails an error mssg is returned, pass by
"RTN","DGENCDA1",31,0)
 ;          reference
"RTN","DGENCDA1",32,0)
 N VALID,RESULT,EXTERNAL,ITEM,EIEN,EXIT,OK,ISCD,POP,FLD
"RTN","DGENCDA1",33,0)
 S ERROR=""
"RTN","DGENCDA1",34,0)
 Q:DGCDIS("VCD")="@" 1  ;this is a deletion
"RTN","DGENCDA1",35,0)
 D  ;drops out of block if invalid condition found
"RTN","DGENCDA1",36,0)
 . S VALID=0 ; Usually invalid if it exits early.
"RTN","DGENCDA1",37,0)
 . ; CD Flag must have a value if any other CD field is populated
"RTN","DGENCDA1",38,0)
 . S POP=0
"RTN","DGENCDA1",39,0)
 . I DGCDIS("VCD")="" D  Q:POP
"RTN","DGENCDA1",40,0)
 . . F FLD="BY","DATE","FACDET","REVDTE","METDET" D  Q:POP
"RTN","DGENCDA1",41,0)
 . . . I $G(DGCDIS(FLD))]"" S POP=1
"RTN","DGENCDA1",42,0)
 . . I POP S ERROR="'VETERAN CATASTROPHICALLY DISABLED?' FIELD MUST HAVE A RESPONSE" Q
"RTN","DGENCDA1",43,0)
 . . I $G(DGCDIS("DIAG",1))]""!($G(DGCDIS("COND",1))]"")!($G(DGCDIS("PROC",1))]"") D
"RTN","DGENCDA1",44,0)
 . . . S POP=1,ERROR="'VETERAN CATASTROPHICALLY DISABLED?' FIELD MUST HAVE A RESPONSE" Q
"RTN","DGENCDA1",45,0)
 . ; Decided by.
"RTN","DGENCDA1",46,0)
 . I DGCDIS("VCD")'="",$G(DGCDIS("BY"))="" S ERROR="CATASTROPHIC DISABILITY 'DECIDED BY' REQUIRED" Q
"RTN","DGENCDA1",47,0)
 . I $G(DGCDIS("BY"))'="",($L(DGCDIS("BY"))<3)!($L(DGCDIS("BY"))>35) S ERROR="CATASTROPHIC DISABILITY 'DECIDED BY' NOT VALID" Q
"RTN","DGENCDA1",48,0)
 . I $$UPPER^DGUTL($G(DGCDIS("BY")))="HINQ" S ERROR="CATASTROPHIC DISABILITY 'DECIDED BY' CAN NOT BE 'HINQ'" Q
"RTN","DGENCDA1",49,0)
 . ; Date of Decision
"RTN","DGENCDA1",50,0)
 . S OK=1,EXTERNAL=""
"RTN","DGENCDA1",51,0)
 . I DGCDIS("VCD")'="",$G(DGCDIS("DATE"))="" S ERROR="'DATE OF CATASTOPHIC DISABILITY DECISION' REQUIRED" Q
"RTN","DGENCDA1",52,0)
 . I $G(DGCDIS("DATE"))'="" D
"RTN","DGENCDA1",53,0)
 . . I 'DGCDIS("DATE") S OK=0 Q
"RTN","DGENCDA1",54,0)
 . . S EXTERNAL=$$EXTERNAL^DILFD(2,.392,"",DGCDIS("DATE"))
"RTN","DGENCDA1",55,0)
 . . I EXTERNAL="" S OK=0
"RTN","DGENCDA1",56,0)
 . . D CHK^DIE(2,.392,,EXTERNAL,.RESULT)
"RTN","DGENCDA1",57,0)
 . . I RESULT="^" S OK=0
"RTN","DGENCDA1",58,0)
 . I 'OK S ERROR="'DATE OF CATASTOPHIC DISABILITY DECISION' NOT VALID" Q
"RTN","DGENCDA1",59,0)
 . ; Facility Making Determination.
"RTN","DGENCDA1",60,0)
 . I DGCDIS("VCD")'=""!(DGCDIS("FACDET")'=""),$$EXTERNAL^DILFD(2,.393,"",$G(DGCDIS("FACDET")))="" S ERROR="'FACILITY MAKING CATASTROPHIC DISABILITY DETERMINATION' NOT VALID" Q
"RTN","DGENCDA1",61,0)
 . ; Review Date
"RTN","DGENCDA1",62,0)
 . I DGCDIS("VCD")'="",$G(DGCDIS("REVDTE"))="" S ERROR="'CATASTROPHIC DISABILITY REVIEW DATE' REQUIRED" Q
"RTN","DGENCDA1",63,0)
 . I DGCDIS("REVDTE")'="" D  Q:ERROR'=""
"RTN","DGENCDA1",64,0)
 . . S EXTERNAL=$$EXTERNAL^DILFD(2,.394,"",DGCDIS("REVDTE"))
"RTN","DGENCDA1",65,0)
 . . I EXTERNAL="" S ERROR="'CATASTROPHIC DISABILITY REVIEW DATE' NOT VALID" Q
"RTN","DGENCDA1",66,0)
 . . D CHK^DIE(2,.394,,EXTERNAL,.RESULT)
"RTN","DGENCDA1",67,0)
 . . I RESULT="^" S ERROR="'CATASTROPHIC DISABILTY REVIEW DATE' INVALID" Q
"RTN","DGENCDA1",68,0)
 . . I $G(DGCDIS("DATE")),DGCDIS("REVDTE")>DGCDIS("DATE") S ERROR="'CD REVIEW DATE' GREATER THAN 'CD DATE OF DETERMINATION'." Q
"RTN","DGENCDA1",69,0)
 . ; Method of Determination
"RTN","DGENCDA1",70,0)
 . I $G(DGCDIS("METDET"))="",DGCDIS("VCD")'="" S ERROR="'METHOD OF DETERMINATION' IS A REQUIRED VALUE." Q
"RTN","DGENCDA1",71,0)
 . I "..2.3."'[("."_$G(DGCDIS("METDET"))_".") S ERROR="'METHOD OF DETERMINATION' NOT VALID" Q
"RTN","DGENCDA1",72,0)
 . S ITEM="",EXIT=0
"RTN","DGENCDA1",73,0)
 . ; Diagnoses
"RTN","DGENCDA1",74,0)
 . F  S ITEM=$O(DGCDIS("DIAG",ITEM)) Q:'ITEM  Q:EXIT  D
"RTN","DGENCDA1",75,0)
 . . I DGCDIS("DIAG",ITEM)="" Q
"RTN","DGENCDA1",76,0)
 . . I $$TYPE^DGENA5(DGCDIS("DIAG",ITEM))'="D" S EXIT=1,ERROR="'CD STATUS DIAGNOSES' NOT VALID"
"RTN","DGENCDA1",77,0)
 . Q:EXIT
"RTN","DGENCDA1",78,0)
 . ; Procedures
"RTN","DGENCDA1",79,0)
 . F  S ITEM=$O(DGCDIS("PROC",ITEM)) Q:'ITEM  Q:EXIT  D
"RTN","DGENCDA1",80,0)
 . . I DGCDIS("PROC",ITEM)="" Q
"RTN","DGENCDA1",81,0)
 . . I $$TYPE^DGENA5(DGCDIS("PROC",ITEM))'="P" S EXIT=1,ERROR="'CD STATUS PROCEDURE' NOT VALID" Q
"RTN","DGENCDA1",82,0)
 . . S EIEN="" F  S EIEN=$O(DGCDIS("EXT",ITEM,EIEN)) Q:EIEN=""  D
"RTN","DGENCDA1",83,0)
 . . . I '$$LIMBOK^DGENA5(DGCDIS("PROC",ITEM),DGCDIS("EXT",ITEM,EIEN)) S EXIT=1,ERROR="'CD STATUS AFFECTED EXTREMITY' INVALID"
"RTN","DGENCDA1",84,0)
 . Q:EXIT
"RTN","DGENCDA1",85,0)
 . ; Conditions
"RTN","DGENCDA1",86,0)
 . F  S ITEM=$O(DGCDIS("COND",ITEM)) Q:'ITEM  Q:EXIT  D
"RTN","DGENCDA1",87,0)
 . . I DGCDIS("COND",ITEM)="" Q
"RTN","DGENCDA1",88,0)
 . . I $$TYPE^DGENA5(DGCDIS("COND",ITEM))'="C" S EXIT=1,ERROR="'' NOT VALID" Q
"RTN","DGENCDA1",89,0)
 . . I '$$VALID^DGENA5(DGCDIS("COND",ITEM),DGCDIS("SCORE",ITEM)) S EXIT=1,ERROR="'CD CONDITION SCORE' NOT VALID" Q
"RTN","DGENCDA1",90,0)
 . . I ".1.2.3."'[("."_DGCDIS("PERM",ITEM)_".") S ERROR="'PERMANENT STATUS INDICATOR' NOT VALID" Q
"RTN","DGENCDA1",91,0)
 . Q:EXIT
"RTN","DGENCDA1",92,0)
 . ; No reason present?
"RTN","DGENCDA1",93,0)
 . I DGCDIS("VCD")="Y",'($D(DGCDIS("DIAG"))!$D(DGCDIS("PROC"))!$D(DGCDIS("COND"))) S ERROR="'CD STATUS REASON' NOT PRESENT" Q
"RTN","DGENCDA1",94,0)
 . ; VCD doesn't match determination status?
"RTN","DGENCDA1",95,0)
 . S ISCD=$$ISCD(.DGCDIS)
"RTN","DGENCDA1",96,0)
 . I DGCDIS("VCD")="Y",'ISCD S ERROR="Not enough diagnoses/procedures/conditions to qualify for CD Status." Q
"RTN","DGENCDA1",97,0)
 . I DGCDIS("VCD")="N",ISCD S ERROR="Veteran has enough diagnoses/procedures/conditions to qualify for CD Status." Q
"RTN","DGENCDA1",98,0)
 . S VALID=1
"RTN","DGENCDA1",99,0)
 Q VALID
"RTN","DGENCDA1",100,0)
 ;
"RTN","DGENCDA1",101,0)
ISCD(DGCDIS) ; Returns 1/0, is the patient CD?
"RTN","DGENCDA1",102,0)
 ; DGCDIS("DIAG",N)=CD REASON for Diagnosis.
"RTN","DGENCDA1",103,0)
 ; DGCDIS("COND",N)=CD REASON for Condition.
"RTN","DGENCDA1",104,0)
 ; DGCDIS("SCORE",N)=SCORE (for condition.)
"RTN","DGENCDA1",105,0)
 ; DGCDIS("PERM",N)=Permanant Indicator (for condition).
"RTN","DGENCDA1",106,0)
 ; DGCDIS("PROC",N)=CD REASON for procedure.
"RTN","DGENCDA1",107,0)
 ; DGCDIS("EXT",N)=Affected Extremity (for procedure.)
"RTN","DGENCDA1",108,0)
 N CD S CD=0 ; True if patient is CD.
"RTN","DGENCDA1",109,0)
 N SUB,LIMB,LCODE,EXT,LIEN,EXCLUDE
"RTN","DGENCDA1",110,0)
 S SUB=""
"RTN","DGENCDA1",111,0)
 F  S SUB=$O(DGCDIS("DIAG",SUB)) Q:SUB=""  D
"RTN","DGENCDA1",112,0)
 . I $$TYPE^DGENA5($G(DGCDIS("DIAG",SUB)))'="D" Q
"RTN","DGENCDA1",113,0)
 . S CD=CD+1
"RTN","DGENCDA1",114,0)
 F  S SUB=$O(DGCDIS("PROC",SUB)) Q:SUB=""  D
"RTN","DGENCDA1",115,0)
 . I $$TYPE^DGENA5($G(DGCDIS("PROC",SUB)))'="P" Q
"RTN","DGENCDA1",116,0)
 . S LCODE=0
"RTN","DGENCDA1",117,0)
 . F  S LCODE=$O(DGCDIS("EXT",SUB,LCODE)) Q:'LCODE  D
"RTN","DGENCDA1",118,0)
 . . S EXT=DGCDIS("EXT",SUB,LCODE)
"RTN","DGENCDA1",119,0)
 . . Q:EXT=""
"RTN","DGENCDA1",120,0)
 . . S LIEN=$O(^DGEN(27.17,DGCDIS("PROC",SUB),1,"B",EXT,0))
"RTN","DGENCDA1",121,0)
 . . Q:LIEN=""
"RTN","DGENCDA1",122,0)
 . . S LIMB=$$LIMBCODE^DGENA5(DGCDIS("PROC",SUB),LIEN)
"RTN","DGENCDA1",123,0)
 . . I LIMB'=EXT Q
"RTN","DGENCDA1",124,0)
 . . I $D(EXCLUDE(SUB,LIMB)) Q
"RTN","DGENCDA1",125,0)
 . . S EXCLUDE(SUB,LIMB)=""
"RTN","DGENCDA1",126,0)
 . . S CD=CD+.5
"RTN","DGENCDA1",127,0)
 F  S SUB=$O(DGCDIS("COND",SUB)) Q:SUB=""  D
"RTN","DGENCDA1",128,0)
 . I $$TYPE^DGENA5($G(DGCDIS("COND",SUB)))'="C" Q
"RTN","DGENCDA1",129,0)
 . I '$$RANGEMET^DGENA5(DGCDIS("COND",SUB),DGCDIS("SCORE",SUB),DGCDIS("PERM",SUB)) Q
"RTN","DGENCDA1",130,0)
 . S CD=CD+1
"RTN","DGENCDA1",131,0)
 S CD=(CD'<1)
"RTN","DGENCDA1",132,0)
 ;S DGCDIS("VCD")=$E("NY",CD+1)
"RTN","DGENCDA1",133,0)
 Q CD
"RTN","DGENCDA1",134,0)
 ;
"RTN","DGENCDA1",135,0)
ERRDISP(FILE) ; Display error.
"RTN","DGENCDA1",136,0)
 N LINE
"RTN","DGENCDA1",137,0)
 S LINE=0
"RTN","DGENCDA1",138,0)
 W:$X !
"RTN","DGENCDA1",139,0)
 W "ERROR updating ",$S(FILE=2.396:"CD DIAGNOSES",FILE=2.397:"CD PROCEDURES",FILE=2.398:"CD CONDITIONS",FILE=2.399!(FILE=2.409):"CD HISTORY",1:"PATIENT CD DATA"),!
"RTN","DGENCDA1",140,0)
 F  S LINE=$O(DGCDERR("DIERR",1,"TEXT",LINE)) Q:'LINE  W ?5,DGCDERR("DIERR",1,"TEXT",LINE),!
"RTN","DGENCDA1",141,0)
 W !
"RTN","DGENCDA1",142,0)
 Q
"RTN","DGENCDA1",143,0)
 ;
"RTN","DGENCDA1",144,0)
DELETE(DFN) ;
"RTN","DGENCDA1",145,0)
 ;Description: Delete a catastrophic disability record for a patient
"RTN","DGENCDA1",146,0)
 ;Input:
"RTN","DGENCDA1",147,0)
 ;  DFN - Patient IEN
"RTN","DGENCDA1",148,0)
 ;Output:
"RTN","DGENCDA1",149,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENCDA1",150,0)
 N SUCCESS,DIE,DR,DA,D0,DIC
"RTN","DGENCDA1",151,0)
 S SUCCESS=1
"RTN","DGENCDA1",152,0)
 D  ;drops out if invalid condition found
"RTN","DGENCDA1",153,0)
 . I $G(DFN),$D(^DPT(DFN,0))
"RTN","DGENCDA1",154,0)
 . E  S SUCCESS=0 Q
"RTN","DGENCDA1",155,0)
 . I '$$LOCK(DFN) S SUCCESS=0 Q
"RTN","DGENCDA1",156,0)
 . S DIE="^DPT("
"RTN","DGENCDA1",157,0)
 . S DR=".39////@"
"RTN","DGENCDA1",158,0)
 . S DR=DR_";.391////@"
"RTN","DGENCDA1",159,0)
 . S DR=DR_";.392////@"
"RTN","DGENCDA1",160,0)
 . S DR=DR_";.393////@"
"RTN","DGENCDA1",161,0)
 . S DR=DR_";.394////@"
"RTN","DGENCDA1",162,0)
 . S DR=DR_";.395////@"
"RTN","DGENCDA1",163,0)
 . S DA=DFN
"RTN","DGENCDA1",164,0)
 . D ^DIE
"RTN","DGENCDA1",165,0)
 . N SIEN,SUBFILE
"RTN","DGENCDA1",166,0)
 . F SUBFILE=.396,.397,.398 I $D(^DPT(DFN,SUBFILE)) D
"RTN","DGENCDA1",167,0)
 . . S SIEN=0
"RTN","DGENCDA1",168,0)
 . . F  S SIEN=$O(^DPT(DFN,SUBFILE,SIEN)) Q:'SIEN  D
"RTN","DGENCDA1",169,0)
 . . . N DA,DIE,DR
"RTN","DGENCDA1",170,0)
 . . . S DIE="^DPT("_DFN_","_SUBFILE_","
"RTN","DGENCDA1",171,0)
 . . . S DR=".01////@"
"RTN","DGENCDA1",172,0)
 . . . S DA=SIEN,DA(1)=DFN
"RTN","DGENCDA1",173,0)
 . . . D ^DIE
"RTN","DGENCDA1",174,0)
 . ; Note -- CD HISTORY field (#.399) must not be deleted.
"RTN","DGENCDA1",175,0)
 D UNLOCK(DFN)
"RTN","DGENCDA1",176,0)
 Q SUCCESS
"RTN","DGENEGT")
0^5^B62171290
"RTN","DGENEGT",1,0)
DGENEGT ;ALB/KCL/RGL - Enrollment Group Threshold API's ; 11/20/03 3:39pm
"RTN","DGENEGT",2,0)
 ;;5.3;Registration;**232,451**;Aug 13, 1993
"RTN","DGENEGT",3,0)
 ;
"RTN","DGENEGT",4,0)
 ;
"RTN","DGENEGT",5,0)
LOCK(IEN) ;
"RTN","DGENEGT",6,0)
 ; Description: Used to lock the ENROLLMENT GROUP THRESHOLD record.
"RTN","DGENEGT",7,0)
 ;
"RTN","DGENEGT",8,0)
 ;  Input:
"RTN","DGENEGT",9,0)
 ;   IEN - internal entry number of record in the ENROLLMENT GROUP TRHESHOLD file
"RTN","DGENEGT",10,0)
 ;
"RTN","DGENEGT",11,0)
 ; Output:
"RTN","DGENEGT",12,0)
 ;   Function Value: Returns 1 if the ENROLLMENT GROUP THRESHOLD record
"RTN","DGENEGT",13,0)
 ;                   can be locked, otherwise returns 0 on failure
"RTN","DGENEGT",14,0)
 ;
"RTN","DGENEGT",15,0)
 I $G(IEN) L +^DGEN(27.16,IEN,0):2
"RTN","DGENEGT",16,0)
 Q $T
"RTN","DGENEGT",17,0)
 ;
"RTN","DGENEGT",18,0)
 ;
"RTN","DGENEGT",19,0)
UNLOCK(IEN) ;
"RTN","DGENEGT",20,0)
 ; Description: Used to unlock the ENROLLMENT GROUP THRESHOLD record.
"RTN","DGENEGT",21,0)
 ;
"RTN","DGENEGT",22,0)
 ;  Input:
"RTN","DGENEGT",23,0)
 ;   IEN - internal entry number of record in the ENROLLMENT GROUP TRHESHOLD file
"RTN","DGENEGT",24,0)
 ;
"RTN","DGENEGT",25,0)
 ; Output:
"RTN","DGENEGT",26,0)
 ;   None
"RTN","DGENEGT",27,0)
 ;
"RTN","DGENEGT",28,0)
 I $G(IEN) L -^DGEN(27.16,IEN,0)
"RTN","DGENEGT",29,0)
 Q
"RTN","DGENEGT",30,0)
 ;
"RTN","DGENEGT",31,0)
 ;
"RTN","DGENEGT",32,0)
FINDCUR(ENRDT) ;
"RTN","DGENEGT",33,0)
 ; Description: Used to find a record in the ENROLLMENT GROUP THRESHOLD file.
"RTN","DGENEGT",34,0)
 ;
"RTN","DGENEGT",35,0)
 ;  Input: Enrollment Date (optional - if not specified, today is assumed)
"RTN","DGENEGT",36,0)
 ;
"RTN","DGENEGT",37,0)
 ; Output:
"RTN","DGENEGT",38,0)
 ;   Function Value: If successful, returns internal entry number of
"RTN","DGENEGT",39,0)
 ;                   record in the ENROLLMENT GROUP THRESHOLD file,
"RTN","DGENEGT",40,0)
 ;                   otherwise returns 0 on failure
"RTN","DGENEGT",41,0)
 ;
"RTN","DGENEGT",42,0)
 N DGEGTDT,STOP,DGEGTIEN,DGEGTF
"RTN","DGENEGT",43,0)
 S DGEGTDT=$G(ENRDT)+.000001,STOP=0,DGEGTIEN=""
"RTN","DGENEGT",44,0)
 S:'$G(ENRDT) DGEGTDT=$$DT^XLFDT+DGEGTDT
"RTN","DGENEGT",45,0)
 F  S DGEGTDT=$O(^DGEN(27.16,"B",DGEGTDT),-1) Q:STOP!(DGEGTDT="")  D
"RTN","DGENEGT",46,0)
 .F  S DGEGTIEN=$O(^(DGEGTDT,DGEGTIEN),-1) Q:DGEGTIEN=""!STOP  D
"RTN","DGENEGT",47,0)
 ..S:'$P($G(^DGEN(27.16,+DGEGTIEN,0)),"^",8) STOP=DGEGTIEN
"RTN","DGENEGT",48,0)
 S DGEGTF=1
"RTN","DGENEGT",49,0)
 I $G(ENRDT),ENRDT'>DT,$$INACT(STOP)  ;inactivate old EGT settings
"RTN","DGENEGT",50,0)
 Q +STOP
"RTN","DGENEGT",51,0)
 ;
"RTN","DGENEGT",52,0)
 ;
"RTN","DGENEGT",53,0)
GET(EGTIEN,DGEGT) ;
"RTN","DGENEGT",54,0)
 ; Description: Used to obtain a record in the ENROLLMENT GROUP THRESHOLD file.  The values will be returned in the DGEGT() array.
"RTN","DGENEGT",55,0)
 ;
"RTN","DGENEGT",56,0)
 ;  Input:
"RTN","DGENEGT",57,0)
 ;   EGTIEN - internal entry number of record in the ENROLLMENT GROUP THRESHOLD file
"RTN","DGENEGT",58,0)
 ;
"RTN","DGENEGT",59,0)
 ; Output:     
"RTN","DGENEGT",60,0)
 ;  DGEGT - The ENROLLMENT GROUP THRESHOLD array, passed by reference
"RTN","DGENEGT",61,0)
 ;
"RTN","DGENEGT",62,0)
 ;       Subscript     Field
"RTN","DGENEGT",63,0)
 ;       ---------     ---------------------
"RTN","DGENEGT",64,0)
 ;       "EFFDATE"     EGT EFFECTIVE DATE
"RTN","DGENEGT",65,0)
 ;       "PRIORITY"    EGT PRIORITY
"RTN","DGENEGT",66,0)
 ;       "SUBGRP"      EGT SUBGROUP
"RTN","DGENEGT",67,0)
 ;       "TYPE"        EGT TYPE
"RTN","DGENEGT",68,0)
 ;       "FEDDATE"     FEDERAL REGISTER DATE
"RTN","DGENEGT",69,0)
 ;       "ENTDATE"     DATE ENTERED
"RTN","DGENEGT",70,0)
 ;       "SOURCE"      SOURCE OF EGT
"RTN","DGENEGT",71,0)
 ;       "REMARKS"     REMARKS
"RTN","DGENEGT",72,0)
 ;
"RTN","DGENEGT",73,0)
 N SUB,NODE
"RTN","DGENEGT",74,0)
 K DGEGT S DGEGT=""
"RTN","DGENEGT",75,0)
 ;
"RTN","DGENEGT",76,0)
 I '$G(EGTIEN) D  Q 0
"RTN","DGENEGT",77,0)
 .F SUB="EFFDATE","PRIORITY","SUBGRP","TYPE","FEDDATE","ENTDATE","SOURCE","REMARKS" S DGEGT(SUB)=""
"RTN","DGENEGT",78,0)
 ;
"RTN","DGENEGT",79,0)
 S NODE=$G(^DGEN(27.16,EGTIEN,0))
"RTN","DGENEGT",80,0)
 S DGEGT("EFFDATE")=$P(NODE,"^")
"RTN","DGENEGT",81,0)
 S DGEGT("PRIORITY")=$P(NODE,"^",2)
"RTN","DGENEGT",82,0)
 S DGEGT("SUBGRP")=$P(NODE,"^",3)
"RTN","DGENEGT",83,0)
 S DGEGT("TYPE")=$P(NODE,"^",4)
"RTN","DGENEGT",84,0)
 S DGEGT("FEDDATE")=$P(NODE,"^",5)
"RTN","DGENEGT",85,0)
 S DGEGT("ENTDATE")=$P(NODE,"^",6)
"RTN","DGENEGT",86,0)
 S DGEGT("SOURCE")=$P(NODE,"^",7)
"RTN","DGENEGT",87,0)
 S NODE=$G(^DGEN(27.16,EGTIEN,"R"))
"RTN","DGENEGT",88,0)
 S DGEGT("REMARKS")=$P(NODE,"^")
"RTN","DGENEGT",89,0)
 ;
"RTN","DGENEGT",90,0)
 Q 1
"RTN","DGENEGT",91,0)
 ;
"RTN","DGENEGT",92,0)
 ;
"RTN","DGENEGT",93,0)
STORE(DGEGT,ERROR,CHKFLG) ;
"RTN","DGENEGT",94,0)
 ; Description: Creates a new entry in the ENROLLMENT GROUP THRESHOLD file.
"RTN","DGENEGT",95,0)
 ;
"RTN","DGENEGT",96,0)
 ;  Input:
"RTN","DGENEGT",97,0)
 ;    DGEGT - the ENROLLMENT GROUP THRESHOLD array, passed by reference
"RTN","DGENEGT",98,0)
 ;   CHKFLG - a flag, if set to 1 means that field validation checks
"RTN","DGENEGT",99,0)
 ;            were completed, 0 indicates field validation checks should
"RTN","DGENEGT",100,0)
 ;            be performed (optional) 
"RTN","DGENEGT",101,0)
 ;
"RTN","DGENEGT",102,0)
 ; Output:
"RTN","DGENEGT",103,0)
 ;  Function Value - Returns internal entry number of record created, or 0 on failure
"RTN","DGENEGT",104,0)
 ;           ERROR - if not successful, an error message is returned,
"RTN","DGENEGT",105,0)
 ;                   pass by reference (optional)
"RTN","DGENEGT",106,0)
 ;
"RTN","DGENEGT",107,0)
 ;
"RTN","DGENEGT",108,0)
 S ERROR=""
"RTN","DGENEGT",109,0)
 I $G(CHKFLG)'=1 Q:'$$VALID(.DGEGT,.ERROR) 0
"RTN","DGENEGT",110,0)
 ;
"RTN","DGENEGT",111,0)
 N ADD,DATA,OLDEGT,INACT
"RTN","DGENEGT",112,0)
 S OLDEGT=$$FINDCUR()
"RTN","DGENEGT",113,0)
 S DATA(.01)=DGEGT("EFFDATE")
"RTN","DGENEGT",114,0)
 S DATA(.02)=DGEGT("PRIORITY")
"RTN","DGENEGT",115,0)
 S DATA(.03)=DGEGT("SUBGRP")
"RTN","DGENEGT",116,0)
 S DATA(.04)=DGEGT("TYPE")
"RTN","DGENEGT",117,0)
 S DATA(.05)=DGEGT("FEDDATE")
"RTN","DGENEGT",118,0)
 S DATA(.06)=DGEGT("ENTDATE")
"RTN","DGENEGT",119,0)
 S DATA(.07)=DGEGT("SOURCE")
"RTN","DGENEGT",120,0)
 S DATA(25)=DGEGT("REMARKS")
"RTN","DGENEGT",121,0)
 S ADD=$$ADD^DGENDBS(27.16,,.DATA,.ERROR)
"RTN","DGENEGT",122,0)
 ;
"RTN","DGENEGT",123,0)
 ; inactivate "old" EGT settings
"RTN","DGENEGT",124,0)
 S INACT=$$INACT(ADD,.OLDEGT,.DGEGT)
"RTN","DGENEGT",125,0)
 ;
"RTN","DGENEGT",126,0)
 Q +ADD
"RTN","DGENEGT",127,0)
 ;
"RTN","DGENEGT",128,0)
 ;
"RTN","DGENEGT",129,0)
UPDATE(EGTIEN,DGEGT,ERROR) ;
"RTN","DGENEGT",130,0)
 ; Description: Updates an Enrollment Group Threshold record in the
"RTN","DGENEGT",131,0)
 ; ENROLLMENT GROUP THRESHOLD file.  This function locks the Enrollment
"RTN","DGENEGT",132,0)
 ; Group Threshold record and releases the lock when the update is
"RTN","DGENEGT",133,0)
 ; complete. 
"RTN","DGENEGT",134,0)
 ;
"RTN","DGENEGT",135,0)
 ;  Input:
"RTN","DGENEGT",136,0)
 ;   EGTIEN - internal entry number of record in the ENROLLMENT GROUP THRESHOLD file
"RTN","DGENEGT",137,0)
 ;    DGEGT - the ENROLLMENT GROUP THRESHOLD array, passed by reference
"RTN","DGENEGT",138,0)
 ;
"RTN","DGENEGT",139,0)
 ; Output:
"RTN","DGENEGT",140,0)
 ;  Function Value - Returns 1 if successful, otherwise 0
"RTN","DGENEGT",141,0)
 ;           ERROR - if not successful, an error message is returned,
"RTN","DGENEGT",142,0)
 ;                   pass by reference
"RTN","DGENEGT",143,0)
 ;
"RTN","DGENEGT",144,0)
 N SUCCESS,DATA
"RTN","DGENEGT",145,0)
 S SUCCESS=1
"RTN","DGENEGT",146,0)
 S ERROR=""
"RTN","DGENEGT",147,0)
 ;
"RTN","DGENEGT",148,0)
 D  ; drops out of do block if invalid condition is found
"RTN","DGENEGT",149,0)
 .I $G(EGTIEN),$D(^DGEN(27.16,EGTIEN,0))
"RTN","DGENEGT",150,0)
 .E  S SUCCESS=0,ERROR="ENROLLMENT GROUP THRESHOLD RECORD NOT FOUND" Q
"RTN","DGENEGT",151,0)
 .I '$$LOCK(EGTIEN) S SUCCESS=0,ERROR="ENROLLMENT GROUP THRESHOLD RECORD IS LOCKED, CAN'T BE EDITED" Q
"RTN","DGENEGT",152,0)
 .;
"RTN","DGENEGT",153,0)
 .S DATA(.01)=DGEGT("EFFDATE")
"RTN","DGENEGT",154,0)
 .S DATA(.02)=DGEGT("PRIORITY")
"RTN","DGENEGT",155,0)
 .S DATA(.03)=DGEGT("SUBGRP")
"RTN","DGENEGT",156,0)
 .S DATA(.04)=DGEGT("TYPE")
"RTN","DGENEGT",157,0)
 .S DATA(.05)=DGEGT("FEDDATE")
"RTN","DGENEGT",158,0)
 .S DATA(.06)=DGEGT("ENTDATE")
"RTN","DGENEGT",159,0)
 .S DATA(.07)=DGEGT("SOURCE")
"RTN","DGENEGT",160,0)
 .S DATA(25)=DGEGT("REMARKS")
"RTN","DGENEGT",161,0)
 .;
"RTN","DGENEGT",162,0)
 .I '$$UPD^DGENDBS(27.16,EGTIEN,.DATA) S ERROR="FILEMAN UNABLE TO PERFORM UPDATE",SUCCESS=0 Q
"RTN","DGENEGT",163,0)
 ;
"RTN","DGENEGT",164,0)
 D UNLOCK(EGTIEN)
"RTN","DGENEGT",165,0)
 ;
"RTN","DGENEGT",166,0)
 Q SUCCESS
"RTN","DGENEGT",167,0)
 ;
"RTN","DGENEGT",168,0)
 ;
"RTN","DGENEGT",169,0)
DELETE(EGTIEN) ; Description: This function will delete a record in the ENROLLMENT GROUP THRESHOLD file.
"RTN","DGENEGT",170,0)
 ;
"RTN","DGENEGT",171,0)
 ;  Input:
"RTN","DGENEGT",172,0)
 ;   EGTIEN - as internal entry number of record to delete 
"RTN","DGENEGT",173,0)
 ;
"RTN","DGENEGT",174,0)
 ; Outpu:
"RTN","DGENEGT",175,0)
 ;  Function Value - Returns 1 if successful, otherwise 0
"RTN","DGENEGT",176,0)
 ;
"RTN","DGENEGT",177,0)
 Q:'$G(EGTIEN) 0
"RTN","DGENEGT",178,0)
 N DIK,DA
"RTN","DGENEGT",179,0)
 S DIK="^DGEN(27.16,"
"RTN","DGENEGT",180,0)
 S DA=EGTIEN
"RTN","DGENEGT",181,0)
 D ^DIK
"RTN","DGENEGT",182,0)
 Q 1
"RTN","DGENEGT",183,0)
 ;
"RTN","DGENEGT",184,0)
 ;
"RTN","DGENEGT",185,0)
VALID(DGEGT,ERROR) ;
"RTN","DGENEGT",186,0)
 ; Description: Performs validation checks on ENROLLMENT GROUP THRESHOLD record contained in the DGEGT array.
"RTN","DGENEGT",187,0)
 ;
"RTN","DGENEGT",188,0)
 ;  Input:
"RTN","DGENEGT",189,0)
 ;   DGEGT - the ENROLLMENT GROUP THRESHOLD array, passed by reference
"RTN","DGENEGT",190,0)
 ;
"RTN","DGENEGT",191,0)
 ; Output:
"RTN","DGENEGT",192,0)
 ;   Function Value - Returns 1 if validation checks passed, 0 otherwise
"RTN","DGENEGT",193,0)
 ;            ERROR - if validation checks fail, an error message is
"RTN","DGENEGT",194,0)
 ;                    returned, pass by reference
"RTN","DGENEGT",195,0)
 ;
"RTN","DGENEGT",196,0)
 N VALID,EXTERNAL,RESULT
"RTN","DGENEGT",197,0)
 S VALID=1
"RTN","DGENEGT",198,0)
 S ERROR=""
"RTN","DGENEGT",199,0)
 ;
"RTN","DGENEGT",200,0)
 D  ; drops out of DO block if an invalid condition found
"RTN","DGENEGT",201,0)
 .;
"RTN","DGENEGT",202,0)
 .; check for required fields
"RTN","DGENEGT",203,0)
 .I $G(DGEGT("EFFDATE"))="" S VALID=0,ERROR="REQUIRED FIELD 'EGT EFFECTIVE DATE' MISSING" Q
"RTN","DGENEGT",204,0)
 .I $G(DGEGT("PRIORITY"))="" S VALID=0,ERROR="REQUIRED FIELD 'EGT PRIORITY' MISSING" Q
"RTN","DGENEGT",205,0)
 .I $G(DGEGT("TYPE"))="" S VALID=0,ERROR="REQUIRED FIELD 'EGT TYPE' MISSING" Q
"RTN","DGENEGT",206,0)
 .I $G(DGEGT("ENTDATE"))="" S VALID=0,ERROR="REQUIRED FIELD 'DATE ENTERED' MISSING" Q
"RTN","DGENEGT",207,0)
 .I $G(DGEGT("SOURCE"))="" S VALID=0,ERROR="REQUIRED FIELD 'SOURCE OF EGT' MISSING" Q
"RTN","DGENEGT",208,0)
 .;
"RTN","DGENEGT",209,0)
 .; check if field values are valid
"RTN","DGENEGT",210,0)
 .I '$$TESTVAL("EFFDATE",DGEGT("EFFDATE")) S VALID=0,ERROR="'EGT EFFECTIVE DATE' NOT VALID" Q
"RTN","DGENEGT",211,0)
 .I '$$TESTVAL("PRIORITY",DGEGT("PRIORITY")) S VALID=0,ERROR="'EGT PRIORITY' NOT VALID" Q
"RTN","DGENEGT",212,0)
 .I '$$TESTVAL("SUBGRP",DGEGT("SUBGRP")) S VALID=0,ERROR="'EGT SUBGRP' NOT VALID" Q
"RTN","DGENEGT",213,0)
 .I '$$TESTVAL("TYPE",DGEGT("TYPE")) S VALID=0,ERROR="'EGT TYPE' NOT VALID" Q
"RTN","DGENEGT",214,0)
 .I '$$TESTVAL("FEDDATE",DGEGT("FEDDATE")) S VALID=0,ERROR="'FEDERAL REGISTER DATE' NOT VALID" Q
"RTN","DGENEGT",215,0)
 .I '$$TESTVAL("ENTDATE",DGEGT("ENTDATE")) S VALID=0,ERROR="'DATE ENTERED' NOT VALID" Q
"RTN","DGENEGT",216,0)
 .I '$$TESTVAL("SOURCE",DGEGT("SOURCE")) S VALID=0,ERROR="'SOURCE OF EGT' NOT VALID" Q
"RTN","DGENEGT",217,0)
 .I ($G(DGEGT("REMARKS"))'="")&($L($G(DGEGT("REMARKS")))<3)!($L($G(DGEGT("REMARKS")))>80) S VALID=0,ERROR="'REMARKS' NOT VALID" Q
"RTN","DGENEGT",218,0)
 ;
"RTN","DGENEGT",219,0)
 Q VALID
"RTN","DGENEGT",220,0)
 ;
"RTN","DGENEGT",221,0)
 ;
"RTN","DGENEGT",222,0)
TESTVAL(SUB,VAL) ; Description: Used to determine if a field value is valid.
"RTN","DGENEGT",223,0)
 ;
"RTN","DGENEGT",224,0)
 ;  Input:
"RTN","DGENEGT",225,0)
 ;     SUB - as the field subscript
"RTN","DGENEGT",226,0)
 ;     VAL - as the field value
"RTN","DGENEGT",227,0)
 ;
"RTN","DGENEGT",228,0)
 ; Output:
"RTN","DGENEGT",229,0)
 ;  Function value: Returns 1 if the field value (VAL) is valid for
"RTN","DGENEGT",230,0)
 ;                  the subscript (SUB), returns 0 otherwise.
"RTN","DGENEGT",231,0)
 ;
"RTN","DGENEGT",232,0)
 N DISPLAY,FIELD,RESULT,VALID
"RTN","DGENEGT",233,0)
 ;
"RTN","DGENEGT",234,0)
 S VALID=1
"RTN","DGENEGT",235,0)
 ;
"RTN","DGENEGT",236,0)
 I (VAL'="") D
"RTN","DGENEGT",237,0)
 .S FIELD=$$FIELD(SUB)
"RTN","DGENEGT",238,0)
 .; if there is no external value then not valid
"RTN","DGENEGT",239,0)
 .S DISPLAY=$$EXTERNAL^DILFD(27.16,FIELD,"F",VAL)
"RTN","DGENEGT",240,0)
 .I (DISPLAY="") S VALID=0 Q
"RTN","DGENEGT",241,0)
 .I $$GET1^DID(27.16,FIELD,"","TYPE")'="POINTER" D
"RTN","DGENEGT",242,0)
 ..D CHK^DIE(27.16,FIELD,,VAL,.RESULT) I RESULT="^" S VALID=0 Q
"RTN","DGENEGT",243,0)
 ;
"RTN","DGENEGT",244,0)
 Q VALID
"RTN","DGENEGT",245,0)
 ;
"RTN","DGENEGT",246,0)
 ;
"RTN","DGENEGT",247,0)
FIELD(SUB) ; Description: Used to determine the field number for a given subscript in the EGT array.
"RTN","DGENEGT",248,0)
 ;
"RTN","DGENEGT",249,0)
 ;  Input:
"RTN","DGENEGT",250,0)
 ;     SUB - as the field subscript
"RTN","DGENEGT",251,0)
 ;
"RTN","DGENEGT",252,0)
 ; Output:
"RTN","DGENEGT",253,0)
 ;  Function value: Returns the field number for the given subscript,
"RTN","DGENEGT",254,0)
 ;                  otherwise null is returned.
"RTN","DGENEGT",255,0)
 ;
"RTN","DGENEGT",256,0)
 ;
"RTN","DGENEGT",257,0)
 N FLD
"RTN","DGENEGT",258,0)
 S FLD=""
"RTN","DGENEGT",259,0)
 ;
"RTN","DGENEGT",260,0)
 D  ; drops out of DO block once SUB is determined
"RTN","DGENEGT",261,0)
 .I SUB="EFFDATE" S FLD=.01 Q
"RTN","DGENEGT",262,0)
 .I SUB="PRIORITY" S FLD=.02 Q
"RTN","DGENEGT",263,0)
 .I SUB="SUBGRP" S FLD=.03 Q
"RTN","DGENEGT",264,0)
 .I SUB="TYPE" S FLD=.04 Q
"RTN","DGENEGT",265,0)
 .I SUB="FEDDATE" S FLD=.05 Q
"RTN","DGENEGT",266,0)
 .I SUB="ENTDATE" S FLD=.06 Q
"RTN","DGENEGT",267,0)
 .I SUB="SOURCE" S FLD=.07 Q
"RTN","DGENEGT",268,0)
 .I SUB="REMARKS" S FLD=25 Q
"RTN","DGENEGT",269,0)
 ;
"RTN","DGENEGT",270,0)
 Q FLD
"RTN","DGENEGT",271,0)
 ;
"RTN","DGENEGT",272,0)
INACT(EGTIEN,OLDIEN,DGEGT) ;inactivate EGT settings that are currently not in effect
"RTN","DGENEGT",273,0)
 ;
"RTN","DGENEGT",274,0)
 ; input: EGTIEN -Current EGT ien from 27.16
"RTN","DGENEGT",275,0)
 ;        DGEGT (optional array) - Current EGT setting information
"RTN","DGENEGT",276,0)
 ;        DGEGTF (optional) - do not inactivate future EGT
"RTN","DGENEGT",277,0)
 ;
"RTN","DGENEGT",278,0)
 Q:'$G(EGTIEN) 0
"RTN","DGENEGT",279,0)
 N EGTFDA,EGTDT,EGTREC,ERR
"RTN","DGENEGT",280,0)
 S:'$G(OLDIEN) OLDIEN=""
"RTN","DGENEGT",281,0)
 I '$D(DGEGT),'$$GET(EGTIEN,.DGEGT) Q 0
"RTN","DGENEGT",282,0)
 S:DGEGT("EFFDATE")>$$DT^XLFDT EGTF=1  ;future EGT setting
"RTN","DGENEGT",283,0)
 S EGTDT=""
"RTN","DGENEGT",284,0)
 F  S EGTDT=$O(^DGEN(27.16,"B",EGTDT),-1) Q:'EGTDT  D
"RTN","DGENEGT",285,0)
 .S EGTREC=""
"RTN","DGENEGT",286,0)
 .F  S EGTREC=$O(^DGEN(27.16,"B",EGTDT,EGTREC),-1) Q:'EGTREC  D
"RTN","DGENEGT",287,0)
 ..Q:EGTREC=EGTIEN  ;new EGT setting
"RTN","DGENEGT",288,0)
 ..Q:$G(EGTF)&(EGTREC=OLDIEN)
"RTN","DGENEGT",289,0)
 ..I $P($G(^DGEN(27.16,EGTREC,0)),"^")>DT D  Q
"RTN","DGENEGT",290,0)
 ...Q:$G(DGEGTF)
"RTN","DGENEGT",291,0)
 ...Q:$$DELETE(EGTREC)
"RTN","DGENEGT",292,0)
 ..S EGTFDA(27.16,EGTREC_",",.08)=1
"RTN","DGENEGT",293,0)
 D:$D(EGTFDA) UPDATE^DIE("","EGTFDA","","ERR")
"RTN","DGENEGT",294,0)
 Q 1
"RTN","DGENEGT1")
0^6^B48869165
"RTN","DGENEGT1",1,0)
DGENEGT1 ;ALB/KCL,ISA/KWP,LBD,RGL,BRM - Enrollment Group Threshold API's ; 7/21/04 2:43pm
"RTN","DGENEGT1",2,0)
 ;;5.3;Registration;**232,417,454,491,513,451**;Aug 13, 1993
"RTN","DGENEGT1",3,0)
 ;
"RTN","DGENEGT1",4,0)
 ;
"RTN","DGENEGT1",5,0)
NOTIFY(DGEGT,OLDEGT) ;
"RTN","DGENEGT1",6,0)
 ; Description: This is used to send a message to local mail group.
"RTN","DGENEGT1",7,0)
 ; The notification is used to communicate changes in the Enrollment
"RTN","DGENEGT1",8,0)
 ; Group Threshold (EGT) setting to users at the local site.
"RTN","DGENEGT1",9,0)
 ;
"RTN","DGENEGT1",10,0)
 ;  Input:
"RTN","DGENEGT1",11,0)
 ;    DGEGT - the new Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",12,0)
 ;   OLDEGT - the previous Enrollment Group Threshold array, passed by reference
"RTN","DGENEGT1",13,0)
 ;
"RTN","DGENEGT1",14,0)
 ; Output: None
"RTN","DGENEGT1",15,0)
 ;
"RTN","DGENEGT1",16,0)
 N TEXT,XMDUN,XMDUZ,XMTEXT,XMROU,XMSTRIP,XMSUB,XMY,XMZ,OLDPRI
"RTN","DGENEGT1",17,0)
 ;
"RTN","DGENEGT1",18,0)
 ; init subject and sender
"RTN","DGENEGT1",19,0)
 S XMSUB="Enrollment Group Threshold (EGT) Changed"
"RTN","DGENEGT1",20,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENEGT1",21,0)
 ;
"RTN","DGENEGT1",22,0)
 ; recipient
"RTN","DGENEGT1",23,0)
 S XMY("G.DGEN EGT UPDATES")=""
"RTN","DGENEGT1",24,0)
 ;
"RTN","DGENEGT1",25,0)
 ; get old EGT priority
"RTN","DGENEGT1",26,0)
 S OLDPRI=$G(OLDEGT("PRIORITY"))
"RTN","DGENEGT1",27,0)
 ;
"RTN","DGENEGT1",28,0)
 S XMTEXT="TEXT("
"RTN","DGENEGT1",29,0)
 S TEXT(1)="The Secretary of the VA has officially changed the enrollment priority"
"RTN","DGENEGT1",30,0)
 S TEXT(2)="grouping of veterans who shall receive care.  This change may place"
"RTN","DGENEGT1",31,0)
 S TEXT(3)="veterans under your facilities care into a 'Not Enrolled' category."
"RTN","DGENEGT1",32,0)
 S TEXT(4)=""
"RTN","DGENEGT1",33,0)
 S TEXT(5)=""
"RTN","DGENEGT1",34,0)
 S TEXT(6)="           Prior EGT Priority:  "_$S($G(OLDPRI):$$EXTERNAL^DILFD(27.16,.02,"F",OLDPRI),1:"N/A")_$S($G(OLDEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",OLDEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",35,0)
 S TEXT(7)=""
"RTN","DGENEGT1",36,0)
 S TEXT(8)=""
"RTN","DGENEGT1",37,0)
 S TEXT(9)="  New Enrollment Group Threshold (EGT) Settings:"
"RTN","DGENEGT1",38,0)
 S TEXT(10)=""
"RTN","DGENEGT1",39,0)
 S TEXT(11)="                 EGT Priority:  "_$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY"))_$S($G(DGEGT("SUBGRP")):$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")),1:"")
"RTN","DGENEGT1",40,0)
 S TEXT(12)="                     EGT Type:  "_$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE"))
"RTN","DGENEGT1",41,0)
 S TEXT(13)="           EGT Effective Date:  "_$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("EFFDATE"))
"RTN","DGENEGT1",42,0)
 ;
"RTN","DGENEGT1",43,0)
 ; mailman deliverey
"RTN","DGENEGT1",44,0)
 D ^XMD
"RTN","DGENEGT1",45,0)
 ;
"RTN","DGENEGT1",46,0)
 Q
"RTN","DGENEGT1",47,0)
 ;
"RTN","DGENEGT1",48,0)
 ;
"RTN","DGENEGT1",49,0)
DISPLAY() ;
"RTN","DGENEGT1",50,0)
 ; Description: Display Enrollment Group Threshold (EGT) settings.
"RTN","DGENEGT1",51,0)
 ;
"RTN","DGENEGT1",52,0)
 ;  Input: None
"RTN","DGENEGT1",53,0)
 ;
"RTN","DGENEGT1",54,0)
 ; Output: None
"RTN","DGENEGT1",55,0)
 ;
"RTN","DGENEGT1",56,0)
 N DGEGT
"RTN","DGENEGT1",57,0)
 ;
"RTN","DGENEGT1",58,0)
 W !
"RTN","DGENEGT1",59,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT) W !,"Enrollment Group Threshold (EGT) settings not found."
"RTN","DGENEGT1",60,0)
 E  D
"RTN","DGENEGT1",61,0)
 .W !,?3,"Enrollment Group Threshold (EGT) Settings"
"RTN","DGENEGT1",62,0)
 .W !,?3,"========================================="
"RTN","DGENEGT1",63,0)
 .W !
"RTN","DGENEGT1",64,0)
 .W !?5,"Date Entered",?25,": ",$S('$G(DGEGT("ENTERED")):"-none-",1:$$EXTERNAL^DILFD(27.16,.01,"F",DGEGT("ENTERED")))
"RTN","DGENEGT1",65,0)
 .W !?5,"EGT Priority",?25,": ",$S('$G(DGEGT("PRIORITY")):"-none-",1:$$EXTERNAL^DILFD(27.16,.02,"F",DGEGT("PRIORITY")))_$S($G(DGEGT("SUBGRP"))="":"",1:$$EXTERNAL^DILFD(27.16,.03,"F",DGEGT("SUBGRP")))
"RTN","DGENEGT1",66,0)
 .W !?5,"EGT Type",?25,": ",$S($G(DGEGT("TYPE"))="":"-none-",1:$$EXTERNAL^DILFD(27.16,.04,"F",DGEGT("TYPE")))
"RTN","DGENEGT1",67,0)
 .W !?5,"EGT Effective Date",?25,": ",$S('$G(DGEGT("EFFDATE")):"-none-",1:$$EXTERNAL^DILFD(27.16,.05,"F",DGEGT("EFFDATE")))
"RTN","DGENEGT1",68,0)
 ;
"RTN","DGENEGT1",69,0)
 Q
"RTN","DGENEGT1",70,0)
 ;
"RTN","DGENEGT1",71,0)
ABOVE(DPTDFN,ENRPRI,ENRGRP,EGTPRI,EGTGRP,EGTFLG) ;
"RTN","DGENEGT1",72,0)
 ; Description: This function will determine if the enrollment is above
"RTN","DGENEGT1",73,0)
 ; the threshold.
"RTN","DGENEGT1",74,0)
 ;
"RTN","DGENEGT1",75,0)
 ;Input:
"RTN","DGENEGT1",76,0)
 ; DPTDFN - Patient File IEN
"RTN","DGENEGT1",77,0)
 ; ENRPRI - Enrollment Priority
"RTN","DGENEGT1",78,0)
 ; ENRGRP - Enrollment Sub-Group
"RTN","DGENEGT1",79,0)
 ; EGTPRI - EGT Priority (optional) - not used
"RTN","DGENEGT1",80,0)
 ; EGTGRP - EGT Sub-Group (optional) - not used
"RTN","DGENEGT1",81,0)
 ; EGTFLG - Flag to bypass additional EGT type 2 check (optional)
"RTN","DGENEGT1",82,0)
 ;          It is used by $$ABOVE2 to prevent re-entering the
"RTN","DGENEGT1",83,0)
 ;          sub-priority API ($$SUBPRI^DGENELA4)
"RTN","DGENEGT1",84,0)
 ; Output:
"RTN","DGENEGT1",85,0)
 ; Returns 1 if above 0 below. 
"RTN","DGENEGT1",86,0)
 ;
"RTN","DGENEGT1",87,0)
 I $G(ENRGRP)="" S ENRGRP=""
"RTN","DGENEGT1",88,0)
 I $G(ENRPRI)="" S ENRPRI=""
"RTN","DGENEGT1",89,0)
 N ABOVE,EGT,TODAY,X
"RTN","DGENEGT1",90,0)
 I '$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) Q 1
"RTN","DGENEGT1",91,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",92,0)
 I TODAY<EGT("EFFDATE") Q 1
"RTN","DGENEGT1",93,0)
 ;
"RTN","DGENEGT1",94,0)
 ;EGT type 2 - Stop New Enrollments
"RTN","DGENEGT1",95,0)
 ; or EGT type 4 - Enrollment Decision (ESP DG*5.3*491)
"RTN","DGENEGT1",96,0)
 I EGT("TYPE")=2!(EGT("TYPE")=4) D  Q ABOVE
"RTN","DGENEGT1",97,0)
 .S ABOVE=0
"RTN","DGENEGT1",98,0)
 .;check previous enrollment record for EGT Override
"RTN","DGENEGT1",99,0)
 .I $$OVRRIDE(.DPTDFN,.EGT) S ABOVE=1 Q
"RTN","DGENEGT1",100,0)
 .;do check for priorities 7 and 8
"RTN","DGENEGT1",101,0)
 .I ENRPRI>6&(ENRPRI=EGT("PRIORITY")) D  Q
"RTN","DGENEGT1",102,0)
 ..I ENRGRP'>EGT("SUBGRP") S ABOVE=1
"RTN","DGENEGT1",103,0)
 ..Q:$G(EGTFLG)
"RTN","DGENEGT1",104,0)
 ..I EGT("TYPE")=4,ENRPRI=EGT("PRIORITY"),ENRGRP'=$$SUBPRI^DGENELA4(DPTDFN,ENRPRI,ENRGRP) S ABOVE=0 Q
"RTN","DGENEGT1",105,0)
 ..I ENRGRP=EGT("SUBGRP"),ENRGRP'=$$SUBPRI^DGENELA4(DPTDFN,ENRPRI,ENRGRP) S ABOVE=0
"RTN","DGENEGT1",106,0)
 .I ENRPRI'>EGT("PRIORITY") S ABOVE=1 Q
"RTN","DGENEGT1",107,0)
 ;
"RTN","DGENEGT1",108,0)
 ;EGT types 1 & 3
"RTN","DGENEGT1",109,0)
 ;do check for priorities 7 and 8
"RTN","DGENEGT1",110,0)
 I ENRPRI>6&(ENRPRI=EGT("PRIORITY")) S ABOVE=0 D  Q ABOVE
"RTN","DGENEGT1",111,0)
 .I ENRGRP'>(EGT("SUBGRP")) S ABOVE=1
"RTN","DGENEGT1",112,0)
 I ENRPRI'>(EGT("PRIORITY")) Q 1
"RTN","DGENEGT1",113,0)
 Q 0
"RTN","DGENEGT1",114,0)
 ;
"RTN","DGENEGT1",115,0)
ABOVE2(DPTDFN,ENRDT,PRIORITY,SUBGRP) ;
"RTN","DGENEGT1",116,0)
 ;
"RTN","DGENEGT1",117,0)
 ; Input: DPTDFN    - Patient File IEN
"RTN","DGENEGT1",118,0)
 ;        ENRDT     - enrollment effective date
"RTN","DGENEGT1",119,0)
 ;        PRIORITY  - enrollment priority
"RTN","DGENEGT1",120,0)
 ;        SUBGRP    - enrollment sub-priority (internal numeric value)
"RTN","DGENEGT1",121,0)
 ;
"RTN","DGENEGT1",122,0)
 ; Output: 1 or 0 for above or below EGT threshold
"RTN","DGENEGT1",123,0)
 ;
"RTN","DGENEGT1",124,0)
 N ABOVE,TODAY,X,EGT
"RTN","DGENEGT1",125,0)
 S ABOVE=1
"RTN","DGENEGT1",126,0)
 S:'$G(SUBGRP) SUBGRP=""
"RTN","DGENEGT1",127,0)
 S:'$G(PRIORITY) PRIORITY=""
"RTN","DGENEGT1",128,0)
 S:'$G(ENRDT) ENRDT=""
"RTN","DGENEGT1",129,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENEGT1",130,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(ENRDT),.EGT) 1
"RTN","DGENEGT1",131,0)
 Q:'$G(EGT("EFFDATE")) 1
"RTN","DGENEGT1",132,0)
 Q:TODAY<EGT("EFFDATE") 1
"RTN","DGENEGT1",133,0)
 Q:EGT("TYPE")#2 $$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1)  ;If EGT type 1 or 3
"RTN","DGENEGT1",134,0)
 I '$$ABOVE(DPTDFN,PRIORITY,SUBGRP,"","",1) Q 0
"RTN","DGENEGT1",135,0)
 I PRIORITY=EGT("PRIORITY"),ENRDT,ENRDT'<EGT("EFFDATE") D
"RTN","DGENEGT1",136,0)
 .I $$OVRRIDE(.DPTDFN,.EGT) S ABOVE=1 Q
"RTN","DGENEGT1",137,0)
 .I EGT("TYPE")=4 S ABOVE=0 Q
"RTN","DGENEGT1",138,0)
 .I SUBGRP=EGT("SUBGRP") S ABOVE=0
"RTN","DGENEGT1",139,0)
 Q ABOVE
"RTN","DGENEGT1",140,0)
 ;
"RTN","DGENEGT1",141,0)
OVRRIDE(DPTDFN,EGT) ;check for previous EGT override by HEC and new rules
"RTN","DGENEGT1",142,0)
 N ENRCAT,ENRDT,EGTENR,ENRIEN,RTN
"RTN","DGENEGT1",143,0)
 S RTN=0
"RTN","DGENEGT1",144,0)
 S ENRIEN=$$FINDCUR^DGENA(.DPTDFN)
"RTN","DGENEGT1",145,0)
 F  Q:RTN  D
"RTN","DGENEGT1",146,0)
 .I 'ENRIEN S RTN=-1 Q  ;cannot check if no current enrollment
"RTN","DGENEGT1",147,0)
 .I '$$GET^DGENA(ENRIEN,.EGTENR) S RTN=-1 Q  ;need enr info to proceed
"RTN","DGENEGT1",148,0)
 .S ENRIEN=$$FINDPRI^DGENA(ENRIEN)
"RTN","DGENEGT1",149,0)
 .S ENRDT=$G(EGTENR("APP")) S:'ENRDT ENRDT=$G(EGTENR("EFFDATE"))
"RTN","DGENEGT1",150,0)
 .S ENRCAT=$P($G(^DGEN(27.15,+EGTENR("STATUS"),0)),"^",2)
"RTN","DGENEGT1",151,0)
 .I EGTENR("SOURCE")=2,ENRDT'<EGT("EFFDATE"),ENRCAT="E",EGTENR("PRIORITY")'<EGT("PRIORITY") S RTN=1 Q
"RTN","DGENEGT1",152,0)
 .I $$RULES(DPTDFN,.EGTENR,.EGT,ENRCAT) S RTN=1 Q
"RTN","DGENEGT1",153,0)
 Q RTN>0
"RTN","DGENEGT1",154,0)
 ;
"RTN","DGENEGT1",155,0)
RULES(DPTDFN,EGTENR,EGT,ENRCAT) ;check for new cont enrollment rules
"RTN","DGENEGT1",156,0)
 N RTN,ENRIEN,ENRVER,NODE0,NODEE
"RTN","DGENEGT1",157,0)
 S RTN=0
"RTN","DGENEGT1",158,0)
 D  Q:RTN>0 RTN
"RTN","DGENEGT1",159,0)
 .Q:ENRCAT'="E"
"RTN","DGENEGT1",160,0)
 .I (EGTENR("ELIG","POW")="Y")!(EGTENR("ELIG","A&A")="Y")!(EGTENR("ELIG","HB")="Y")!(EGTENR("ELIG","VAPEN")="Y")!EGTENR("ELIG","VACKAMT") Q
"RTN","DGENEGT1",161,0)
 .I EGTENR("ELIG","DISRET")!EGTENR("ELIG","MEDICAID")!EGTENR("ELIG","SCPER")!(EGTENR("ELIG","AO")="Y")!(EGTENR("ELIG","IR")="Y")!(EGTENR("ELIG","EC")="Y") Q
"RTN","DGENEGT1",162,0)
 .I "^3^5^"'[("^"_EGTENR("ELIG","CODE")_"^") Q
"RTN","DGENEGT1",163,0)
 .I "^4^6^"[("^"_EGTENR("PRIORITY")_"^") Q
"RTN","DGENEGT1",164,0)
 .I EGTENR("ELIG","PH")="Y" Q
"RTN","DGENEGT1",165,0)
 .S RTN=1
"RTN","DGENEGT1",166,0)
 S RTN=0
"RTN","DGENEGT1",167,0)
 D  Q:RTN>0 RTN
"RTN","DGENEGT1",168,0)
 .S ENRIEN="",ENRVER=$O(^DGEN(27.15,"B","VERIFIED",""))
"RTN","DGENEGT1",169,0)
 .F  S ENRIEN=$O(^DGEN(27.11,"C",DPTDFN,ENRIEN)) Q:'ENRIEN!(RTN'=0)  D
"RTN","DGENEGT1",170,0)
 ..Q:'$D(^DGEN(27.11,ENRIEN))  S NODE0=$G(^DGEN(27.11,ENRIEN,0))
"RTN","DGENEGT1",171,0)
 ..Q:$P(NODE0,"^",4)'=ENRVER  S RTN=-1
"RTN","DGENEGT1",172,0)
 ..S NODEE=$G(^DGEN(27.11,ENRIEN,"E"))
"RTN","DGENEGT1",173,0)
 ..I $P(NODEE,"^",3)!($P(NODEE,"^",5)="Y")!($P(NODEE,"^",6)="Y")!($P(NODEE,"^",7)="Y")!$P(NODEE,"^",10) S RTN=1 Q  ;sc 10-100%,a&a,hb,va pen,medicaid
"RTN","DGENEGT1",174,0)
 ..I $$GET1^DIQ(2,DPTDFN_",",.5295,"I") S RTN=1 Q  ;CV date exists
"RTN","DGENEGT1",175,0)
 ..S ENRDT=$G(EGTENR("APP")) S:'ENRDT ENRDT=$G(EGTENR("EFFDATE"))
"RTN","DGENEGT1",176,0)
 ..I ENRDT'>$$AOECDT(),($P(NODEE,"^",11)="Y")!($P(NODEE,"^",13)="Y") S RTN=1 Q
"RTN","DGENEGT1",177,0)
 S RTN=0
"RTN","DGENEGT1",178,0)
 D  Q:RTN>0 RTN
"RTN","DGENEGT1",179,0)
 .S ENRDT=$P(NODE0,"^") S:'ENRDT ENRDT=$P(NODE0,"^",8)
"RTN","DGENEGT1",180,0)
 .I ENRDT<$$AOECDT(),EGTENR("ELIG","AO")!EGTENR("ELIG","EC") S RTN=1 Q
"RTN","DGENEGT1",181,0)
 Q 0
"RTN","DGENEGT1",182,0)
 ;
"RTN","DGENEGT1",183,0)
AOECDT() ;  set AO/EC sunset date (not known at time of coding)
"RTN","DGENEGT1",184,0)
 Q 3991231
"RTN","DGENEGT1",185,0)
 ;
"RTN","DGENEGT3")
0^7^B6184064
"RTN","DGENEGT3",1,0)
DGENEGT3 ;ALB/KCL/RGL - PROCESS INCOMING MFN HL7 MSGS; 04-MAY-1999 ; 7/23/03 4:49pm
"RTN","DGENEGT3",2,0)
 ;;5.3;Registration;**232,306,417,451**;Aug 13, 1993
"RTN","DGENEGT3",3,0)
 ;
"RTN","DGENEGT3",4,0)
 ;
"RTN","DGENEGT3",5,0)
MFI ; Description: This procedure parses the MFI segment type.
"RTN","DGENEGT3",6,0)
 ;
"RTN","DGENEGT3",7,0)
 ;  Input: 
"RTN","DGENEGT3",8,0)
 ;     SEG - array containing the HL7 segment
"RTN","DGENEGT3",9,0)
 ;   MSGID - message control id of HL7 msg in the MSH segment
"RTN","DGENEGT3",10,0)
 ;
"RTN","DGENEGT3",11,0)
 ; Output:
"RTN","DGENEGT3",12,0)
 ;  DGMFI - array containing needed fields of MFI segment
"RTN","DGENEGT3",13,0)
 ;  ERROR - flag set if an error is encountered during parse
"RTN","DGENEGT3",14,0)
 ;
"RTN","DGENEGT3",15,0)
 S DGMFI("MASTERID")=$$CONVERT^DGENUPL1(SEG(1))
"RTN","DGENEGT3",16,0)
 S DGMFI("EVENT")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENEGT3",17,0)
 ;
"RTN","DGENEGT3",18,0)
 Q
"RTN","DGENEGT3",19,0)
 ;
"RTN","DGENEGT3",20,0)
 ;
"RTN","DGENEGT3",21,0)
MFE ; Description: This procedure parses the MFE segment.
"RTN","DGENEGT3",22,0)
 ;
"RTN","DGENEGT3",23,0)
 ;  Input: 
"RTN","DGENEGT3",24,0)
 ;     SEG - array containing the HL7 segment
"RTN","DGENEGT3",25,0)
 ;   MSGID - message control id of HL7 msg in the MSH segment
"RTN","DGENEGT3",26,0)
 ;
"RTN","DGENEGT3",27,0)
 ; Output:
"RTN","DGENEGT3",28,0)
 ;  DGMFE - array containing needed fields of MFE segment
"RTN","DGENEGT3",29,0)
 ;  ERROR - flag set if an error is encountered during parse
"RTN","DGENEGT3",30,0)
 ;
"RTN","DGENEGT3",31,0)
 S DGMFE("RECEVNT")=$$CONVERT^DGENUPL1(SEG(1))
"RTN","DGENEGT3",32,0)
 S DGMFE("CNTRLNUM")=$$CONVERT^DGENUPL1(SEG(2))
"RTN","DGENEGT3",33,0)
 S DGEGT("PRIMKEY")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENEGT3",34,0)
 ;
"RTN","DGENEGT3",35,0)
 Q
"RTN","DGENEGT3",36,0)
 ;
"RTN","DGENEGT3",37,0)
 ;
"RTN","DGENEGT3",38,0)
ZEG ; Description: This procedure parses the ZEG segment.
"RTN","DGENEGT3",39,0)
 ;
"RTN","DGENEGT3",40,0)
 ;  Input: 
"RTN","DGENEGT3",41,0)
 ;     SEG - array containing the HL7 segment
"RTN","DGENEGT3",42,0)
 ;   MSGID - message control id of HL7 msg in the MSH segment
"RTN","DGENEGT3",43,0)
 ;   DGMFE - array containing fields of MFE segment needed for MFK
"RTN","DGENEGT3",44,0)
 ;   DGMFI - array containing fields of MFI segment needed for MFK
"RTN","DGENEGT3",45,0)
 ;
"RTN","DGENEGT3",46,0)
 ; Output:
"RTN","DGENEGT3",47,0)
 ;  DGEGT - array containing the EGT record in FileMan format
"RTN","DGENEGT3",48,0)
 ;  ERROR - flag set if an error is encountered during parse
"RTN","DGENEGT3",49,0)
 ;
"RTN","DGENEGT3",50,0)
 N SUB
"RTN","DGENEGT3",51,0)
 ;
"RTN","DGENEGT3",52,0)
 S DGEGT("EFFDATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENEGT3",53,0)
 I ERROR D  Q
"RTN","DGENEGT3",54,0)
 .D ADDERROR^DGENEGT2(MSGID,"BAD VALUE, ZEG SEGMENT SEQ 2",.ERRCOUNT,.DGMFI,.DGMFE) Q
"RTN","DGENEGT3",55,0)
 S DGEGT("PRIORITY")=$$CONVERT^DGENUPL1(+SEG(1))
"RTN","DGENEGT3",56,0)
 S DGEGT("SUBGRP")=$$CONVERT^DGENUPL1($P(SEG(7),$E(HLECH)))
"RTN","DGENEGT3",57,0)
 S DGEGT("TYPE")=$$CONVERT^DGENUPL1(+SEG(3))
"RTN","DGENEGT3",58,0)
 S DGEGT("FEDDATE")=$$CONVERT^DGENUPL1(SEG(6),"DATE",.ERROR)
"RTN","DGENEGT3",59,0)
 I ERROR D  Q
"RTN","DGENEGT3",60,0)
 .D ADDERROR^DGENEGT2(MSGID,"BAD VALUE, ZEG SEGMENT SEQ 6",.ERRCOUNT,.DGMFI,.DGMFE) Q
"RTN","DGENEGT3",61,0)
 S DGEGT("REMARKS")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENEGT3",62,0)
 ;
"RTN","DGENEGT3",63,0)
 ; convert '@' to null values in DGEGT() array
"RTN","DGENEGT3",64,0)
 S SUB=""
"RTN","DGENEGT3",65,0)
 F  S SUB=$O(DGEGT(SUB)) Q:(SUB="")  I ($G(DGEGT(SUB))="@") S DGEGT(SUB)=""
"RTN","DGENEGT3",66,0)
 ;
"RTN","DGENEGT3",67,0)
 Q
"RTN","DGENEGT3",68,0)
 ;
"RTN","DGENEGT3",69,0)
UPLDEGT(DGEGT,ERROR) ;
"RTN","DGENEGT3",70,0)
 ; Description: This procedure is used to upload the Enrollment Group
"RTN","DGENEGT3",71,0)
 ; Threshold (EGT) received from the HEC.  The validation/consitency
"RTN","DGENEGT3",72,0)
 ; checks should already have been completed.
"RTN","DGENEGT3",73,0)
 ;
"RTN","DGENEGT3",74,0)
 ;  Inputs:
"RTN","DGENEGT3",75,0)
 ;      DGEGT - array containing the EGT record (pass by reference)
"RTN","DGENEGT3",76,0)
 ;
"RTN","DGENEGT3",77,0)
 ; Outputs: None
"RTN","DGENEGT3",78,0)
 ;
"RTN","DGENEGT3",79,0)
 ; Store EGT from HEC and quit.
"RTN","DGENEGT3",80,0)
 ;
"RTN","DGENEGT3",81,0)
 I $$STORE^DGENEGT(.DGEGT,,1)
"RTN","DGENEGT3",82,0)
 ;
"RTN","DGENEGT3",83,0)
 ;  Old code removed per DG*5.3*451
"RTN","DGENEGT3",84,0)
 ;;
"RTN","DGENEGT3",85,0)
 ;N CURIEN
"RTN","DGENEGT3",86,0)
 ;;
"RTN","DGENEGT3",87,0)
 ;; is there a current EGT setting?
"RTN","DGENEGT3",88,0)
 ;S CURIEN=$$FINDCUR^DGENEGT()
"RTN","DGENEGT3",89,0)
 ;;
"RTN","DGENEGT3",90,0)
 ;; if there is no current EGT, store EGT from HEC and quit
"RTN","DGENEGT3",91,0)
 ;I 'CURIEN D  Q
"RTN","DGENEGT3",92,0)
 ;.I $$STORE^DGENEGT(.DGEGT,,1)
"RTN","DGENEGT3",93,0)
 ;;
"RTN","DGENEGT3",94,0)
 ;; if there is a current EGT, delete current, and store EGT from HEC
"RTN","DGENEGT3",95,0)
 ;I $$DELETE^DGENEGT(CURIEN) D
"RTN","DGENEGT3",96,0)
 ;.I $$STORE^DGENEGT(.DGEGT,,1)
"RTN","DGENEGT3",97,0)
 ;
"RTN","DGENEGT3",98,0)
 Q
"RTN","DGENELA")
0^8^B20466515
"RTN","DGENELA",1,0)
DGENELA ;ALB/CJM,KCL,Zoltan/PJR,RGL - Patient Eligibility API ; 2/20/04 1:15pm
"RTN","DGENELA",2,0)
 ;;5.3;Registration;**121,147,232,314,451**;Aug 13,1993
"RTN","DGENELA",3,0)
 ;
"RTN","DGENELA",4,0)
GET(DFN,DGELG) ;
"RTN","DGENELA",5,0)
 ;Description: Used to obtain the patient eligibility data.
"RTN","DGENELA",6,0)
 ;  The data is placed in the local DGELG array.
"RTN","DGENELA",7,0)
 ;Input:
"RTN","DGENELA",8,0)
 ;  DFN - internal entry number of a record in the PATIENT file
"RTN","DGENELA",9,0)
 ;Output:
"RTN","DGENELA",10,0)
 ;  Function Value - returns 1 on success, 0 on failure
"RTN","DGENELA",11,0)
 ;  DGELG - this is  a local array that will be used to return patient eligibility data. The array subscripts and the fields mapped to are defined below. (pass by reference)
"RTN","DGENELA",12,0)
 ;
"RTN","DGENELA",13,0)
 ;suscript             field name
"RTN","DGENELA",14,0)
 ;"DFN"                ien Patient record
"RTN","DGENELA",15,0)
 ;"ELIG","CODE"        Primary Eligibility Code
"RTN","DGENELA",16,0)
 ;"ELIG","CODE",<ien>  Patient Eligibilities
"RTN","DGENELA",17,0)
 ;"SC"                 Service Connected
"RTN","DGENELA",18,0)
 ;"SCPER"              Service Connected Percentage
"RTN","DGENELA",19,0)
 ;"POW"                POW Status Indicated
"RTN","DGENELA",20,0)
 ;"A&A"                Receiving A&A Benefits
"RTN","DGENELA",21,0)
 ;"HB"                 Receiving Housebound Benefits
"RTN","DGENELA",22,0)
 ;"VAPEN"              Receiving a VA Pension
"RTN","DGENELA",23,0)
 ;"VACKAMT"            Total Annual VA Check Amount
"RTN","DGENELA",24,0)
 ;"DISRET"             Disability Ret. From Military
"RTN","DGENELA",25,0)
 ;"MEDICAID"           Medicaid
"RTN","DGENELA",26,0)
 ;"AO"                 Exposed to Agent Orange
"RTN","DGENELA",27,0)
 ;"IR"                 Radiation Exposure Indicated
"RTN","DGENELA",28,0)
 ;"EC"                 Environmental Contaminants
"RTN","DGENELA",29,0)
 ;"MTSTA"              Means Test Status
"RTN","DGENELA",30,0)
 ;P&T                  P&T
"RTN","DGENELA",31,0)
 ;POS                  PERIOD OF SERVICE
"RTN","DGENELA",32,0)
 ;UNEMPLOY             UNEMPLOYABLE
"RTN","DGENELA",33,0)
 ;SCAWDATE             SC AWARD DATE
"RTN","DGENELA",34,0)
 ;RATEINC              RATED INCOMPETENT
"RTN","DGENELA",35,0)
 ;CLAIMNUM             CLAIM NUMBER
"RTN","DGENELA",36,0)
 ;** removed ***     CLAIMLOC             *CLAIM FOLDER LOCATION
"RTN","DGENELA",37,0)
 ;VADISAB              RECEIVING VA DISABILITY?
"RTN","DGENELA",38,0)
 ;ELIGSTA              ELIGIBILITY STATUS
"RTN","DGENELA",39,0)
 ;ELIGSTADATE          ELIGIBILITY STATUS DATE
"RTN","DGENELA",40,0)
 ;ELIGVERIF            ELIGIBILITY VERIF. METHOD
"RTN","DGENELA",41,0)
88 ;ELIGVSITE            ELIGIBILITY VERIFICATION SITE
"RTN","DGENELA",42,0)
 ;ELIGENTBY            ELIGIBILITY STATUS ENTERED BY
"RTN","DGENELA",43,0)
 ;RATEDIS
"RTN","DGENELA",44,0)
 ;  <COUNT>,"RD"      RATED DISABILITY
"RTN","DGENELA",45,0)
 ;  <COUNT>,"PER"      DISABILITY %
"RTN","DGENELA",46,0)
 ;  <COUNT>,"RDSC"     SERVICE CONNECTED
"RTN","DGENELA",47,0)
 ;"VCD"               Veteran Catastrophically Disabled? (#.39)
"RTN","DGENELA",48,0)
 ;"PH"                PURPLE HEART INDICATED
"RTN","DGENELA",49,0)
 ;"AOEXPLOC"          AGENT ORANGE EXPOSURE LOCATION
"RTN","DGENELA",50,0)
 ;
"RTN","DGENELA",51,0)
 K DGELG
"RTN","DGENELA",52,0)
 S DGELG=""
"RTN","DGENELA",53,0)
 Q:'$D(^DPT(DFN)) 0
"RTN","DGENELA",54,0)
 N NODE,SUBREC,COUNT,CODE,IEN
"RTN","DGENELA",55,0)
 ;
"RTN","DGENELA",56,0)
 S DGELG("DFN")=DFN
"RTN","DGENELA",57,0)
 S DGELG("VCD")=$$VCD^DGENA5(DFN)
"RTN","DGENELA",58,0)
 ;
"RTN","DGENELA",59,0)
 ;
"RTN","DGENELA",60,0)
 S NODE=$G(^DPT(DFN,.29))
"RTN","DGENELA",61,0)
 S DGELG("RATEINC")=$P(NODE,"^",12)
"RTN","DGENELA",62,0)
 ;
"RTN","DGENELA",63,0)
 S NODE=$G(^DPT(DFN,.3))
"RTN","DGENELA",64,0)
 S DGELG("SC")=$P(NODE,"^")
"RTN","DGENELA",65,0)
 S DGELG("SCPER")=$P(NODE,"^",2)
"RTN","DGENELA",66,0)
 S DGELG("P&T")=$P(NODE,"^",4)
"RTN","DGENELA",67,0)
 S DGELG("UNEMPLOY")=$P(NODE,"^",5)
"RTN","DGENELA",68,0)
 S DGELG("SCAWDATE")=$P(NODE,"^",12)
"RTN","DGENELA",69,0)
 S DGELG("VADISAB")=$P(NODE,"^",11)
"RTN","DGENELA",70,0)
 ;
"RTN","DGENELA",71,0)
 S NODE=$G(^DPT(DFN,.31))
"RTN","DGENELA",72,0)
 S DGELG("CLAIMNUM")=$P(NODE,"^",3)
"RTN","DGENELA",73,0)
 ;S DGELG("CLAIMLOC")=$P(NODE,"^",2) ;removed
"RTN","DGENELA",74,0)
 ;
"RTN","DGENELA",75,0)
 S NODE=$G(^DPT(DFN,.32))
"RTN","DGENELA",76,0)
 S DGELG("POS")=$P(NODE,"^",3)
"RTN","DGENELA",77,0)
 ;
"RTN","DGENELA",78,0)
 S NODE=$G(^DPT(DFN,.36))
"RTN","DGENELA",79,0)
 S DGELG("ELIG","CODE")=$P(NODE,"^") ;primary eligibility
"RTN","DGENELA",80,0)
 S DGELG("DISRET")=$P(NODE,"^",2)
"RTN","DGENELA",81,0)
 ;
"RTN","DGENELA",82,0)
 S NODE=$G(^DPT(DFN,.38))
"RTN","DGENELA",83,0)
 S DGELG("MEDICAID")=$P(NODE,"^")
"RTN","DGENELA",84,0)
 ;
"RTN","DGENELA",85,0)
 S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",86,0)
 S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",87,0)
 S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",88,0)
 S DGELG("ELIGVERIF")=$P(NODE,"^",5)
"RTN","DGENELA",89,0)
 S DGELG("ELIGENTBY")=$P(NODE,"^",6)
"RTN","DGENELA",90,0)
 ;
"RTN","DGENELA",91,0)
 S NODE=$G(^DPT(DFN,.362))
"RTN","DGENELA",92,0)
 S DGELG("VACKAMT")=$P(NODE,"^",20)
"RTN","DGENELA",93,0)
 S DGELG("VAPEN")=$P(NODE,"^",14)
"RTN","DGENELA",94,0)
 S DGELG("A&A")=$P(NODE,"^",12)
"RTN","DGENELA",95,0)
 S DGELG("HB")=$P(NODE,"^",13)
"RTN","DGENELA",96,0)
 ;
"RTN","DGENELA",97,0)
 ;
"RTN","DGENELA",98,0)
 S NODE=$G(^DPT(DFN,.321))
"RTN","DGENELA",99,0)
 S DGELG("AO")=$P(NODE,"^",2)
"RTN","DGENELA",100,0)
 S DGELG("IR")=$P(NODE,"^",3)
"RTN","DGENELA",101,0)
 S DGELG("AOEXPLOC")=$P(NODE,"^",13)
"RTN","DGENELA",102,0)
 ;
"RTN","DGENELA",103,0)
 S NODE=$G(^DPT(DFN,.322))
"RTN","DGENELA",104,0)
 S DGELG("EC")=$P(NODE,"^",13)
"RTN","DGENELA",105,0)
 ;
"RTN","DGENELA",106,0)
 S NODE=$G(^DPT(DFN,.52))
"RTN","DGENELA",107,0)
 S DGELG("POW")=$P(NODE,"^",5)
"RTN","DGENELA",108,0)
 ;
"RTN","DGENELA",109,0)
 ; Purple Heart Indicator
"RTN","DGENELA",110,0)
 S NODE=$G(^DPT(DFN,.53))
"RTN","DGENELA",111,0)
 S DGELG("PH")=$P(NODE,"^")
"RTN","DGENELA",112,0)
 ;
"RTN","DGENELA",113,0)
 ;means test category
"RTN","DGENELA",114,0)
 S DGELG("MTSTA")=""
"RTN","DGENELA",115,0)
 S IEN=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA",116,0)
 I IEN S DGELG("MTSTA")=$P($G(^DGMT(408.31,IEN,0)),"^",3)
"RTN","DGENELA",117,0)
 ;
"RTN","DGENELA",118,0)
 ;get the other eligibilities multiple
"RTN","DGENELA",119,0)
 S SUBREC=0
"RTN","DGENELA",120,0)
 F  S SUBREC=$O(^DPT(DFN,"E",SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",121,0)
 .S CODE=+$G(^DPT(DFN,"E",SUBREC,0))
"RTN","DGENELA",122,0)
 .;
"RTN","DGENELA",123,0)
 .;need to check the "B" x-ref, because when a code is deleted from the multiple, the kill logic is executed BEFORE the data is actuall removed - but the "B" x-ref has been deleted at this point
"RTN","DGENELA",124,0)
 .I CODE,$D(^DPT(DFN,"E","B",CODE)) S DGELG("ELIG","CODE",CODE)=SUBREC
"RTN","DGENELA",125,0)
 ;
"RTN","DGENELA",126,0)
 ;rated disability multiple
"RTN","DGENELA",127,0)
 S SUBREC=0,COUNT=0
"RTN","DGENELA",128,0)
 F  S SUBREC=$O(^DPT(DFN,.372,SUBREC)) Q:'SUBREC  D
"RTN","DGENELA",129,0)
 .S NODE=$G(^DPT(DFN,.372,SUBREC,0))
"RTN","DGENELA",130,0)
 .Q:'$P(NODE,"^")
"RTN","DGENELA",131,0)
 .S COUNT=COUNT+1
"RTN","DGENELA",132,0)
 .S DGELG("RATEDIS",COUNT,"RD")=$P(NODE,"^")
"RTN","DGENELA",133,0)
 .S DGELG("RATEDIS",COUNT,"PER")=$P(NODE,"^",2)
"RTN","DGENELA",134,0)
 .S DGELG("RATEDIS",COUNT,"RDSC")=$P(NODE,"^",3)
"RTN","DGENELA",135,0)
 ;
"RTN","DGENELA",136,0)
 Q 1
"RTN","DGENELA",137,0)
 ;
"RTN","DGENELA",138,0)
NATNAME(CODE) ;
"RTN","DGENELA",139,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",140,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file,
"RTN","DGENELA",141,0)
 ;  and returns the name
"RTN","DGENELA",142,0)
 ;Input:
"RTN","DGENELA",143,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",144,0)
 ;Output:
"RTN","DGENELA",145,0)
 ;  Function Value - name of corresponding code in file #8.1
"RTN","DGENELA",146,0)
 ;
"RTN","DGENELA",147,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",148,0)
 Q $$CODENAME($P($G(^DIC(8,CODE,0)),"^",9))
"RTN","DGENELA",149,0)
 ;
"RTN","DGENELA",150,0)
NATCODE(CODE) ;
"RTN","DGENELA",151,0)
 ;Description: Given an entry in file #8, Eligibility Code file,
"RTN","DGENELA",152,0)
 ;  finds the corresponding entry in file 8.1, MAS Eligbility Code file
"RTN","DGENELA",153,0)
 ;Input:
"RTN","DGENELA",154,0)
 ;  CODE - pointer to file #8
"RTN","DGENELA",155,0)
 ;Output:
"RTN","DGENELA",156,0)
 ;  Function Value - pointer to file #8.1
"RTN","DGENELA",157,0)
 ;
"RTN","DGENELA",158,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",159,0)
 Q $P($G(^DIC(8,CODE,0)),"^",9)
"RTN","DGENELA",160,0)
 ;
"RTN","DGENELA",161,0)
CODENAME(CODE) ;
"RTN","DGENELA",162,0)
 ;Description: Given a pointer to file #8.1, MAS Eligibility Code file,
"RTN","DGENELA",163,0)
 ;  it returns the name of the code 
"RTN","DGENELA",164,0)
 ;Input:
"RTN","DGENELA",165,0)
 ;  CODE - pointer to file #8.1
"RTN","DGENELA",166,0)
 ;Output:
"RTN","DGENELA",167,0)
 ;  Function Value - name of the code pointed to
"RTN","DGENELA",168,0)
 ;
"RTN","DGENELA",169,0)
 Q:'$G(CODE) ""
"RTN","DGENELA",170,0)
 Q $P($G(^DIC(8.1,CODE,0)),"^")
"RTN","DGENELA",171,0)
 ;
"RTN","DGENELA",172,0)
ELIGSTAT(DFN,DGELG) ;
"RTN","DGENELA",173,0)
 ;Description: Used to get the ELIGIBILITY STATUS and the 
"RTN","DGENELA",174,0)
 ;ELIGIBILITY STATUS DATE of the patient.
"RTN","DGENELA",175,0)
 ;
"RTN","DGENELA",176,0)
 ;Input:
"RTN","DGENELA",177,0)
 ;  DFN - ien of patient record
"RTN","DGENELA",178,0)
 ;
"RTN","DGENELA",179,0)
 ;Ouput:
"RTN","DGENELA",180,0)
 ;  Function Value - 1 on success, 0 on failure
"RTN","DGENELA",181,0)
 ;  DGELG array (pass by reference)
"RTN","DGENELA",182,0)
 ;    "ELIGSTA" - ELIGIBILITY STATUS
"RTN","DGENELA",183,0)
 ;    "ELIGSTADATE" - ELIGIBILITY STATUS DATE
"RTN","DGENELA",184,0)
 ;
"RTN","DGENELA",185,0)
 N NODE,SUCCESS
"RTN","DGENELA",186,0)
 D
"RTN","DGENELA",187,0)
 .S SUCCESS=1
"RTN","DGENELA",188,0)
 .I '$G(DFN) S SUCCESS=0 Q
"RTN","DGENELA",189,0)
 .S NODE=$G(^DPT(DFN,.361))
"RTN","DGENELA",190,0)
 .S DGELG("ELIGSTA")=$P(NODE,"^")
"RTN","DGENELA",191,0)
 .S DGELG("ELIGSTADATE")=$P(NODE,"^",2)
"RTN","DGENELA",192,0)
 Q SUCCESS
"RTN","DGENELA1")
0^9^B73071196
"RTN","DGENELA1",1,0)
DGENELA1 ;ALB/CJM ,RTK,TDM,PJR,RGL - Patient Eligibility API ; 2/20/04 1:18pm
"RTN","DGENELA1",2,0)
 ;;5.3;Registration;**147,327,314,367,497,451**;Aug 13,1993
"RTN","DGENELA1",3,0)
 ;
"RTN","DGENELA1",4,0)
CHECK(DGELG,DGPAT,DGCDIS,ERRMSG) ;
"RTN","DGENELA1",5,0)
 ;Does validation checks on the eligibility contained in the DGELG array.
"RTN","DGENELA1",6,0)
 ;
"RTN","DGENELA1",7,0)
 ;Input:
"RTN","DGENELA1",8,0)
 ;  DGELG - array containing eligibility data (pass by reference)
"RTN","DGENELA1",9,0)
 ;  DGPAT - array containing patient data (pass by reference)
"RTN","DGENELA1",10,0)
 ;  DGCDIS - array containing catastrophic disability determination (pass by reference)
"RTN","DGENELA1",11,0)
 ;
"RTN","DGENELA1",12,0)
 ;Output:
"RTN","DGENELA1",13,0)
 ;  Function Value - returns 1 if all validation checks passed, 0 otherwise
"RTN","DGENELA1",14,0)
 ;  ERRMSG - returns a message if validations fail (pass by reference)
"RTN","DGENELA1",15,0)
 ;
"RTN","DGENELA1",16,0)
 N SUCCESS,NATCODE,BAD,SUB,CODE,DGONV,DGTEXT,INELDATE
"RTN","DGENELA1",17,0)
 S SUCCESS=0
"RTN","DGENELA1",18,0)
 S ERRMSG=""
"RTN","DGENELA1",19,0)
 ;
"RTN","DGENELA1",20,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",21,0)
 .;
"RTN","DGENELA1",22,0)
 .;get optional arrays if not there
"RTN","DGENELA1",23,0)
 .I '$D(DGPAT),'$$GET^DGENPTA(DGELG("DFN"),.DGPAT) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",24,0)
 .I '$D(DGCDIS),'$$GET^DGENCDA(DGELG("DFN"),.DGCDIS) S ERRMSG="PATIENT NOT FOUND" Q
"RTN","DGENELA1",25,0)
 .;
"RTN","DGENELA1",26,0)
 .;do field level checks
"RTN","DGENELA1",27,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I SUB'="ELIG",SUB'="RATEDIS",'$$CHKFIELD(SUB,DGELG(SUB)) S ERRMSG="BAD VALUE, FIELD = "_$$GET1^DID(2,$$FIELD(SUB),"","LABEL") Q
"RTN","DGENELA1",28,0)
 .;
"RTN","DGENELA1",29,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",30,0)
 .;
"RTN","DGENELA1",31,0)
 .;also check SC % field of Rated Disabilities
"RTN","DGENELA1",32,0)
 .S SUB="" F  S SUB=$O(DGELG("RATEDIS",SUB)) Q:(SUB="")  I '$$CHKFIELD("PER",DGELG("RATEDIS",SUB,"PER")) S ERRMSG="BAD VALUE, FIELD = DISABILITY % OF THE RATED DISABILITIES MULTIPLE" Q
"RTN","DGENELA1",33,0)
 .Q:(SUB'="")  ;didn't finish the loop
"RTN","DGENELA1",34,0)
 .;
"RTN","DGENELA1",35,0)
 .I DGELG("SC")="Y",DGELG("SCPER")="" S ERRMSG="SC% UNSPECIFIED FOR SC VET" Q
"RTN","DGENELA1",36,0)
 .;
"RTN","DGENELA1",37,0)
 .;!! put this check back when POS is added to the Z11 message
"RTN","DGENELA1",38,0)
 .;I DGPAT("VETERAN")="Y",'DGELG("POS") S ERRMSG="POS UNSPECIFIED" Q 
"RTN","DGENELA1",39,0)
 .;
"RTN","DGENELA1",40,0)
 .I 'DGELG("ELIG","CODE") S ERRMSG="PRIMARY ELIGIBILITY IS UNSPECIFIED" Q
"RTN","DGENELA1",41,0)
 .;
"RTN","DGENELA1",42,0)
 .I (DGELG("VACKAMT")>0),(DGELG("A&A")_DGELG("HB")_DGELG("VAPEN")_DGELG("VADISAB")'["Y") S ERRMSG="VA CHECK AMOUNT > 0 BUT INCOME INDICATORS ALL SHOW 'NO'" Q
"RTN","DGENELA1",43,0)
 .;
"RTN","DGENELA1",44,0)
 .;
"RTN","DGENELA1",45,0)
 .;
"RTN","DGENELA1",46,0)
 .I (DGELG("SC")="N"),(DGELG("VADISAB")="Y") S ERRMSG="NSC VETERANS CAN NOT BE RECEIVING VA DISABILITY BENEFITS" Q
"RTN","DGENELA1",47,0)
 .;
"RTN","DGENELA1",48,0)
 .S BAD=1 D  Q:BAD  ;check primary eligibility
"RTN","DGENELA1",49,0)
 ..S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA1",50,0)
 ..Q:'NATCODE
"RTN","DGENELA1",51,0)
 ..;
"RTN","DGENELA1",52,0)
 ..I NATCODE=21 S ERRMSG="CATASTROPHICALLY DISABLED NOT ALLOWED AS PRIMARY ELIGIBILITY" Q
"RTN","DGENELA1",53,0)
 ..;
"RTN","DGENELA1",54,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")<50),(NATCODE'=3) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",55,0)
 ..;
"RTN","DGENELA1",56,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(DGELG("SCPER")>49),(NATCODE'=1) S ERRMSG="PRIMARY ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTED PERCENTAGE" Q
"RTN","DGENELA1",57,0)
 ..;
"RTN","DGENELA1",58,0)
 ..S DGONV=$O(^DIC(21,"B","OTHER NON-VETERANS","")),INELDATE=$P($G(^DPT(DFN,.15)),"^",2)
"RTN","DGENELA1",59,0)
 ..I INELDATE'="",DGPAT("INELDATE")'>0,DGELG("POS"),DGELG("POS")=DGONV,'$D(^DIC(21,DGELG("POS"),"E",DGELG("ELIG","CODE"))) D
"RTN","DGENELA1",60,0)
 ...S DGTEXT="Patient was previously determined to be ineligible for VA health care.  Upon review, the individual is now determined to be eligible for "
"RTN","DGENELA1",61,0)
 ...S DGTEXT=DGTEXT_"VA care.  Please update period of service and complete a new application for enrollment in VistA."
"RTN","DGENELA1",62,0)
 ...D ADDMSG^DGENUPL3(.MSGS,DGTEXT,0)
"RTN","DGENELA1",63,0)
 ..;
"RTN","DGENELA1",64,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("SC")="Y"),(NATCODE=1)!(NATCODE=3) S BAD=0 Q  ;primary eligibility OK
"RTN","DGENELA1",65,0)
 ..;
"RTN","DGENELA1",66,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE'=18 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PRISONER OF WAR" Q
"RTN","DGENELA1",67,0)
 ..;
"RTN","DGENELA1",68,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("POW")="Y"),NATCODE=18 S BAD=0 Q
"RTN","DGENELA1",69,0)
 ..;
"RTN","DGENELA1",70,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE'=22 S ERRMSG="PRIMARY ELIGIBILITY SHOULD BE PURPLE HEART RECIPIENT" Q
"RTN","DGENELA1",71,0)
 ..;
"RTN","DGENELA1",72,0)
 ..I (DGPAT("VETERAN")="Y"),(DGELG("PH")="Y"),NATCODE=22 S BAD=0 Q
"RTN","DGENELA1",73,0)
 ..;
"RTN","DGENELA1",74,0)
 ..; disabled DG*5.3*367, for Inel
"RTN","DGENELA1",75,0)
 ..;I (DGPAT("VETERAN")'=$P($G(^DIC(8.1,NATCODE,0)),"^",5)) S ERRMSG="PRIMARY ELIGIBILTY NOT CONSISTENT WITH VETERAN STATUS" Q
"RTN","DGENELA1",76,0)
 ..;
"RTN","DGENELA1",77,0)
 ..I DGELG("A&A")'="Y",NATCODE=2 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH A&A INDICATOR" Q
"RTN","DGENELA1",78,0)
 ..;
"RTN","DGENELA1",79,0)
 ..I DGELG("HB")'="Y",NATCODE=15 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH HOUSEBOUND INDICATOR" Q
"RTN","DGENELA1",80,0)
 ..;
"RTN","DGENELA1",81,0)
 ..I DGELG("VAPEN")'="Y",NATCODE=4 S ERRMSG="PRIMARY ELIGIBILITY INCONSISTENT WITH VA PENSION INDICATOR" Q
"RTN","DGENELA1",82,0)
 ..;
"RTN","DGENELA1",83,0)
 ..I DGELG("SC")="Y",((NATCODE=4)!(NATCODE=5)) S ERRMSG="NSC ELIGIBILITY CODE INCONSISTENT WITH SERVICE CONNECTION INDICATOR" Q
"RTN","DGENELA1",84,0)
 ..;
"RTN","DGENELA1",85,0)
 ..I (DGPAT("DOB")>2061231),(NATCODE=16) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF MEXICAN BORDER WAR" Q
"RTN","DGENELA1",86,0)
 ..;
"RTN","DGENELA1",87,0)
 ..I (DGPAT("DOB")>2071231),(NATCODE=17) S ERRMSG="DOB IS INCONSISTENT WITH ELIGIBILITY OF WORLD WAR I" Q
"RTN","DGENELA1",88,0)
 ..;
"RTN","DGENELA1",89,0)
 ..;primary eligibility is good
"RTN","DGENELA1",90,0)
 ..S BAD=0
"RTN","DGENELA1",91,0)
 .;
"RTN","DGENELA1",92,0)
 .S SUCCESS=1
"RTN","DGENELA1",93,0)
 .;check eligibilities multiple
"RTN","DGENELA1",94,0)
 .S CODE=0 F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:'CODE  D  Q:('SUCCESS)
"RTN","DGENELA1",95,0)
 ..S NATCODE=$$NATCODE^DGENELA(CODE)
"RTN","DGENELA1",96,0)
 ..Q:'NATCODE
"RTN","DGENELA1",97,0)
 ..I NATCODE=21,'DGCDIS("DATE") S SUCCESS=0,ERRMSG="CATASTROPHICALLY DISABLED ELIGIBILITY REQUIRES CATASTROPHICALLY DISABLED DETERMINATION DATE" Q
"RTN","DGENELA1",98,0)
 .;
"RTN","DGENELA1",99,0)
 Q SUCCESS
"RTN","DGENELA1",100,0)
 ;
"RTN","DGENELA1",101,0)
STORE(DGELG,DGPAT,DGCDIS,ERROR,SKIPCHK) ;
"RTN","DGENELA1",102,0)
 ;Stores an eligibility record for a patient. The patient record must
"RTN","DGENELA1",103,0)
 ;already exist. A lock on the Patient record is required, and is
"RTN","DGENELA1",104,0)
 ;released upon completion.
"RTN","DGENELA1",105,0)
 ;
"RTN","DGENELA1",106,0)
 ;Input:
"RTN","DGENELA1",107,0)
 ;  DGELG - eligibility array (pass by reference)
"RTN","DGENELA1",108,0)
 ;  DGPAT - patient array (optional, pass by reference)
"RTN","DGENELA1",109,0)
 ;  DGCDIS - array containing the catastrophic disability determination (optional, pass by reference)
"RTN","DGENELA1",110,0)
 ;  SKIPCHK - flag, set to 1 means that the consistency checks
"RTN","DGENELA1",111,0)
 ;            were already done & should be skipped
"RTN","DGENELA1",112,0)
 ;
"RTN","DGENELA1",113,0)
 ;Output:
"RTN","DGENELA1",114,0)
 ;  Function Value - returns 1 if successful, otherwise 0
"RTN","DGENELA1",115,0)
 ;  ERROR - in event of failure returns an error message (pass by reference, optional)
"RTN","DGENELA1",116,0)
 ;
"RTN","DGENELA1",117,0)
 N SUCCESS,DATA,FIELD,DA,DFN,COUNT
"RTN","DGENELA1",118,0)
 S DFN=$G(DGELG("DFN"))
"RTN","DGENELA1",119,0)
 S SUCCESS=0
"RTN","DGENELA1",120,0)
 S ERROR=""
"RTN","DGENELA1",121,0)
 ;
"RTN","DGENELA1",122,0)
 D  ;drops out of block on failure
"RTN","DGENELA1",123,0)
 .I '$$LOCK^DGENPTA1(DFN) S ERROR="UNABLE TO LOCK PATIENT RECORD" Q
"RTN","DGENELA1",124,0)
 .I $G(SKIPCHK)'=1,'$$CHECK(.DGELG,.DGPAT,.DGCDIS,.ERROR) Q
"RTN","DGENELA1",125,0)
 .S SUB="" F  S SUB=$O(DGELG(SUB)) Q:SUB=""  D
"RTN","DGENELA1",126,0)
 ..I SUB'="ELIG",SUB'="RATEDIS",SUB'="DFN" S FIELD=$$FIELD(SUB) I FIELD S DATA(FIELD)=DGELG(SUB)
"RTN","DGENELA1",127,0)
 .;
"RTN","DGENELA1",128,0)
 .;don't add the Primary Eligibility unless different, so as to not
"RTN","DGENELA1",129,0)
 .;fire off x-refs unless necessary
"RTN","DGENELA1",130,0)
 .I $P($G(^DPT(DFN,.36)),"^")'=DGELG("ELIG","CODE") S DATA(.361)=DGELG("ELIG","CODE")
"RTN","DGENELA1",131,0)
 .;
"RTN","DGENELA1",132,0)
 .; Only update User Enrollee fields if the incoming UE status is
"RTN","DGENELA1",133,0)
 .; greater than the USER ENROLLEE VALID THROUGH on file.
"RTN","DGENELA1",134,0)
 .I $G(DATA(.3617))<$P($G(^DPT(DFN,.361)),"^",7) K DATA(.3617),DATA(.3618)
"RTN","DGENELA1",135,0)
 .;
"RTN","DGENELA1",136,0)
 .I '$$UPD^DGENDBS(2,DFN,.DATA) S ERROR="FILEMAN FAILED TO UPDATE THE PATIENT RECORD" Q
"RTN","DGENELA1",137,0)
 .;
"RTN","DGENELA1",138,0)
 .;
"RTN","DGENELA1",139,0)
 .;delete eligibilities that do not belong
"RTN","DGENELA1",140,0)
 .D DELELIG^DGENELA2(DFN,.DGELG)
"RTN","DGENELA1",141,0)
 .;
"RTN","DGENELA1",142,0)
 .;overlay Rated Disabilities
"RTN","DGENELA1",143,0)
 .Q:'$$OVERLAY()
"RTN","DGENELA1",144,0)
 .;
"RTN","DGENELA1",145,0)
 .;Add the new Patient Eligibilities
"RTN","DGENELA1",146,0)
 .;Don't add the an eligibility unless different - so as to not
"RTN","DGENELA1",147,0)
 .;fire off the x-refs unless necessary.
"RTN","DGENELA1",148,0)
 .;Also, try to assign ien = the code (see input tranform of the field).
"RTN","DGENELA1",149,0)
 .K DA,DATA
"RTN","DGENELA1",150,0)
 .S DA(1)=DFN
"RTN","DGENELA1",151,0)
 .S DATA(.01)=0
"RTN","DGENELA1",152,0)
 .F  S DATA(.01)=$O(DGELG("ELIG","CODE",DATA(.01))) Q:'DATA(.01)  I '$D(^DPT(DFN,"E","B",DATA(.01))) I '$$ADD^DGENDBS(2.0361,.DA,.DATA,,$S($D(^DPT(DFN,"E",DATA(.01))):0,1:DATA(.01))) S ERROR="FILEMAN FAILED TO ADD PATIENT ELIGIBILITY" Q
"RTN","DGENELA1",153,0)
 .;
"RTN","DGENELA1",154,0)
 .S SUCCESS=1
"RTN","DGENELA1",155,0)
 ;
"RTN","DGENELA1",156,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGENELA1",157,0)
 Q SUCCESS
"RTN","DGENELA1",158,0)
 ;
"RTN","DGENELA1",159,0)
FIELD(SUB) ;
"RTN","DGENELA1",160,0)
 ;given a subscript from the ELIGIBILITY array, returns the field number
"RTN","DGENELA1",161,0)
 ;
"RTN","DGENELA1",162,0)
 Q:SUB="CODE" .361
"RTN","DGENELA1",163,0)
 Q:SUB="SC" .301
"RTN","DGENELA1",164,0)
 Q:SUB="SCPER" .302
"RTN","DGENELA1",165,0)
 Q:SUB="POW" .525
"RTN","DGENELA1",166,0)
 Q:SUB="PH" .531
"RTN","DGENELA1",167,0)
 Q:SUB="A&A" .36205
"RTN","DGENELA1",168,0)
 Q:SUB="HB" .36215
"RTN","DGENELA1",169,0)
 Q:SUB="VAPEN" .36235
"RTN","DGENELA1",170,0)
 Q:SUB="VACKAMT" .36295
"RTN","DGENELA1",171,0)
 Q:SUB="DISRET" .362
"RTN","DGENELA1",172,0)
 Q:SUB="MEDICAID" .381
"RTN","DGENELA1",173,0)
 Q:SUB="AO" .32102
"RTN","DGENELA1",174,0)
 Q:SUB="IR" .32103
"RTN","DGENELA1",175,0)
 Q:SUB="EC" .322013
"RTN","DGENELA1",176,0)
 Q:SUB="MTSTA" ""  ;don't map Means Test Category
"RTN","DGENELA1",177,0)
 Q:SUB="P&T" .304
"RTN","DGENELA1",178,0)
 Q:SUB="POS" .323
"RTN","DGENELA1",179,0)
 Q:SUB="UNEMPLOY" .305
"RTN","DGENELA1",180,0)
 Q:SUB="SCAWDATE" .3012
"RTN","DGENELA1",181,0)
 Q:SUB="RATEINC" .293
"RTN","DGENELA1",182,0)
 Q:SUB="CLAIMNUM" .313
"RTN","DGENELA1",183,0)
 ;Q:SUB="CLAIMLOC" .312 ; ** removed **
"RTN","DGENELA1",184,0)
 Q:SUB="VADISAB" .3025
"RTN","DGENELA1",185,0)
 Q:SUB="ELIGSTA" .3611
"RTN","DGENELA1",186,0)
 Q:SUB="ELIGSTADATE" .3612
"RTN","DGENELA1",187,0)
 Q:SUB="ELIGVERIF" .3615
"RTN","DGENELA1",188,0)
 Q:SUB="ELIGENTBY" .3616
"RTN","DGENELA1",189,0)
 Q:SUB="RD" .01
"RTN","DGENELA1",190,0)
 Q:SUB="PER" 2
"RTN","DGENELA1",191,0)
 Q:SUB="RDSC" 3
"RTN","DGENELA1",192,0)
 Q:SUB="UEYEAR" .3617
"RTN","DGENELA1",193,0)
 Q:SUB="UESITE" .3618
"RTN","DGENELA1",194,0)
 Q:SUB="AOEXPLOC" .3213
"RTN","DGENELA1",195,0)
 ;
"RTN","DGENELA1",196,0)
 Q ""
"RTN","DGENELA1",197,0)
 ;
"RTN","DGENELA1",198,0)
CHKFIELD(SUB,VAL) ;
"RTN","DGENELA1",199,0)
 ;Description: Does field level validation of the value. Returns 1
"RTN","DGENELA1",200,0)
 ;if the value is good, 0 otherwise.
"RTN","DGENELA1",201,0)
 ;
"RTN","DGENELA1",202,0)
 Q:($G(VAL)="") 1  ;for now, all NULL values assumed okay
"RTN","DGENELA1",203,0)
 ;
"RTN","DGENELA1",204,0)
 N BAD S BAD=0
"RTN","DGENELA1",205,0)
 I (SUB="SCPER")!(SUB="PER"),(+VAL'=VAL)!(VAL>100)!(VAL<0)!(VAL?.E1"."1N.N) S BAD=1
"RTN","DGENELA1",206,0)
 I SUB="VACKAMT",+VAL'=VAL&(VAL'?.N1"."2N)!(VAL>99999)!(VAL<0) S BAD=1
"RTN","DGENELA1",207,0)
 I SUB="DISRET",VAL'=0,VAL'=1,VAL'=2,VAL'=3 S BAD=1
"RTN","DGENELA1",208,0)
 I SUB="MEDICAID",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",209,0)
 I SUB="RATEINC",VAL'=0,VAL'=1 S BAD=1
"RTN","DGENELA1",210,0)
 I SUB="CLAIMLOC",(VAL["""")!($A(VAL)=45)!($L(VAL)>40)!($L(VAL)<2) S BAD=1
"RTN","DGENELA1",211,0)
 I SUB="ELIGSTA",VAL'="P",VAL'="R",VAL'="V" S BAD=1
"RTN","DGENELA1",212,0)
 I SUB="POW",VAL'="Y",VAL'="N",VAL'="U" S BAD=1
"RTN","DGENELA1",213,0)
 Q 'BAD
"RTN","DGENELA1",214,0)
 ;
"RTN","DGENELA1",215,0)
 ;
"RTN","DGENELA1",216,0)
OVERLAY() ;
"RTN","DGENELA1",217,0)
 ;Description: Overlay the local Rated Disabilities with whatever HEC
"RTN","DGENELA1",218,0)
 ;sent.
"RTN","DGENELA1",219,0)
 ;
"RTN","DGENELA1",220,0)
 N SUCCESS S SUCCESS=1
"RTN","DGENELA1",221,0)
 ;
"RTN","DGENELA1",222,0)
 ;delete the rated disabilties multiple
"RTN","DGENELA1",223,0)
 D DELRDIS^DGENELA2(DFN)
"RTN","DGENELA1",224,0)
 ;
"RTN","DGENELA1",225,0)
 ;add the rated disabilities
"RTN","DGENELA1",226,0)
 K DATA,DA
"RTN","DGENELA1",227,0)
 S DA(1)=DFN
"RTN","DGENELA1",228,0)
 S COUNT=0
"RTN","DGENELA1",229,0)
 F  S COUNT=$O(DGELG("RATEDIS",COUNT)) Q:'COUNT  D
"RTN","DGENELA1",230,0)
 .S DATA(.01)=DGELG("RATEDIS",COUNT,"RD")
"RTN","DGENELA1",231,0)
 .I DATA(.01) S DATA(2)=DGELG("RATEDIS",COUNT,"PER"),DATA(3)=DGELG("RATEDIS",COUNT,"RDSC") I '$$ADD^DGENDBS(2.04,.DA,.DATA) S ERROR="FILEMAN FAILED TO ADD RATED DISABILTIES",SUCCESS=0
"RTN","DGENELA1",232,0)
 Q SUCCESS
"RTN","DGENELA4")
0^39^B39068020
"RTN","DGENELA4",1,0)
DGENELA4 ;ALB/CJM,KCL,RTK,LBD - Patient Eligibility API ; 6/9/04 3:47pm
"RTN","DGENELA4",2,0)
 ;;5.3;Registration;**232,275,306,327,314,367,417,437,456,491,451**;Aug 13,1993
"RTN","DGENELA4",3,0)
 ;
"RTN","DGENELA4",4,0)
 ;
"RTN","DGENELA4",5,0)
PRIORITY(DFN,DGELG,DGELGSUB,ENRDATE,APPDATE) ;
"RTN","DGENELA4",6,0)
 ; Description: Used to compute the priority group and subgroup for a
"RTN","DGENELA4",7,0)
 ; patient, also returning the subset of the eligibility data on which 
"RTN","DGENELA4",8,0)
 ; the priority subgroup is based.
"RTN","DGENELA4",9,0)
 ;
"RTN","DGENELA4",10,0)
 ;Input:
"RTN","DGENELA4",11,0)
 ;      DFN - ien of patient
"RTN","DGENELA4",12,0)
 ;    DGELG - ELIGIBILITY object array (optional, pass by reference)
"RTN","DGENELA4",13,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",14,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",15,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",16,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",17,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",18,0)
 ;
"RTN","DGENELA4",19,0)
 ;Output:
"RTN","DGENELA4",20,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",21,0)
 ;    function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",22,0)
 ;  DGELGSUB - this local array will contain the eligibility data on
"RTN","DGENELA4",23,0)
 ;    which the priority determination was based, pass by reference
"RTN","DGENELA4",24,0)
 ;    if needed.
"RTN","DGENELA4",25,0)
 ;
"RTN","DGENELA4",26,0)
 N CODE,HICODE,PRI,HIPRI,PRIORITY,SUBGRP,HISUB,SUB,DGPAT
"RTN","DGENELA4",27,0)
 K DGELGSUB S DGELGSUB=""
"RTN","DGENELA4",28,0)
 S (HICODE,HIPRI,SUBGRP,HISUB)=""
"RTN","DGENELA4",29,0)
 D
"RTN","DGENELA4",30,0)
 .I '$D(DGELG),'$$GET^DGENELA(DFN,.DGELG) Q  ;can not procede with eligiblity
"RTN","DGENELA4",31,0)
 .; can't proceed without an Enrollment Date or Application Date
"RTN","DGENELA4",32,0)
 .I '$G(ENRDATE),'$G(APPDATE) Q
"RTN","DGENELA4",33,0)
 .I $$GET^DGENPTA(DFN,.DGPAT)
"RTN","DGENELA4",34,0)
 .; determine priority/subgroup based on primary eligibility
"RTN","DGENELA4",35,0)
 .S HICODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE"))
"RTN","DGENELA4",36,0)
 .S PRIORITY=$$PRI(HICODE,.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",37,0)
 .S HIPRI=$P(PRIORITY,"^"),HISUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",38,0)
 .S CODE=""
"RTN","DGENELA4",39,0)
 .;
"RTN","DGENELA4",40,0)
 .; determine if other eligibilities result in higher priority/subgroup
"RTN","DGENELA4",41,0)
 .F  S CODE=$O(DGELG("ELIG","CODE",CODE)) Q:('CODE!(HIPRI=1))  D
"RTN","DGENELA4",42,0)
 ..S PRIORITY=$$PRI($$NATCODE^DGENELA(CODE),.DGELG,$G(ENRDATE),$G(APPDATE))
"RTN","DGENELA4",43,0)
 ..S PRI=$P(PRIORITY,"^"),SUB=$P(PRIORITY,"^",2)
"RTN","DGENELA4",44,0)
 ..S:((PRI>0)&((PRI<HIPRI)!(HIPRI=""))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",45,0)
 ..S:((PRI=HIPRI)&((SUB>0)&(SUB<HISUB))) HIPRI=PRI,HICODE=$$NATCODE^DGENELA(CODE),HISUB=SUB
"RTN","DGENELA4",46,0)
 .;
"RTN","DGENELA4",47,0)
 .;set the DGELGSUB() array with the eligibility information used in the
"RTN","DGENELA4",48,0)
 .;priority determination
"RTN","DGENELA4",49,0)
 .S DGELGSUB("CODE")=HICODE,DGELGSUB("SC")=DGELG("SC"),DGELGSUB("SCPER")=DGELG("SCPER"),DGELGSUB("POW")=DGELG("POW"),DGELGSUB("A&A")=DGELG("A&A"),DGELGSUB("HB")=DGELG("HB")
"RTN","DGENELA4",50,0)
 .S DGELGSUB("VAPEN")=DGELG("VAPEN"),DGELGSUB("VACKAMT")=DGELG("VACKAMT"),DGELGSUB("DISRET")=DGELG("DISRET")
"RTN","DGENELA4",51,0)
 .S DGELGSUB("MEDICAID")=DGELG("MEDICAID"),DGELGSUB("AO")=DGELG("AO"),DGELGSUB("IR")=DGELG("IR"),DGELGSUB("EC")=DGELG("EC"),DGELGSUB("MTSTA")=DGELG("MTSTA")
"RTN","DGENELA4",52,0)
 .;Purple Heart Added to DGELGSUB
"RTN","DGENELA4",53,0)
 .S DGELGSUB("VCD")=DGELG("VCD"),DGELGSUB("PH")=DGELG("PH")
"RTN","DGENELA4",54,0)
 .;
"RTN","DGENELA4",55,0)
 .I $G(DGPAT("INELDATE"))'="" S (HIPRI,HISUB)=""
"RTN","DGENELA4",56,0)
 ;
"RTN","DGENELA4",57,0)
 Q HIPRI_$S(HIPRI:"^"_HISUB,1:"")
"RTN","DGENELA4",58,0)
 ;
"RTN","DGENELA4",59,0)
 ;
"RTN","DGENELA4",60,0)
PRI(CODE,DGELG,ENRDATE,APPDATE) ;
"RTN","DGENELA4",61,0)
 ; Description: Returns the priority group and subgroup based on a
"RTN","DGENELA4",62,0)
 ; single eligibilty code.
"RTN","DGENELA4",63,0)
 ;Input -
"RTN","DGENELA4",64,0)
 ;  CODE - pointer to file #8.1, MAS Eligbility Code
"RTN","DGENELA4",65,0)
 ;  DGELG - local array otained by calling $$GET, pass by reference
"RTN","DGENELA4",66,0)
 ;  ENRDATE - The Enrollment Date. This date is used in the priority
"RTN","DGENELA4",67,0)
 ;            determination only if the application date is not passed.
"RTN","DGENELA4",68,0)
 ;  APPDATE - The Enrollment Application Date.  This date is used
"RTN","DGENELA4",69,0)
 ;            to determine the priority. If the application date
"RTN","DGENELA4",70,0)
 ;            is not passed then the enrollment date (ENRDATE) is used.
"RTN","DGENELA4",71,0)
 ;
"RTN","DGENELA4",72,0)
 ;Output -
"RTN","DGENELA4",73,0)
 ;  Function Value - returns the priority and subgroup computed by the
"RTN","DGENELA4",74,0)
 ;   function as a 2 piece string 'PRIORITY^SUBGROUP'
"RTN","DGENELA4",75,0)
 ;
"RTN","DGENELA4",76,0)
 N CODENAME,PRIORITY,MTSTA,SUBGRP,DGEGT,PRISUB,DGMTI,MTTHR,GMTTHR
"RTN","DGENELA4",77,0)
 S SUBGRP=""
"RTN","DGENELA4",78,0)
 ;
"RTN","DGENELA4",79,0)
 ; use the Application Date when determining the priority, otherwise use
"RTN","DGENELA4",80,0)
 ; the Enrollment Date (ESP DG*5,3*491)
"RTN","DGENELA4",81,0)
 S ENRDATE=$S($G(APPDATE):APPDATE,1:$G(ENRDATE))
"RTN","DGENELA4",82,0)
 ;
"RTN","DGENELA4",83,0)
 ;get the name of the national eligibility code
"RTN","DGENELA4",84,0)
 S CODENAME=$$CODENAME^DGENELA(CODE)
"RTN","DGENELA4",85,0)
 ;
"RTN","DGENELA4",86,0)
 ;get the means test code
"RTN","DGENELA4",87,0)
 S MTSTA=""
"RTN","DGENELA4",88,0)
 I DGELG("MTSTA") S MTSTA=$P($G(^DG(408.32,DGELG("MTSTA"),0)),"^",2)
"RTN","DGENELA4",89,0)
 ;
"RTN","DGENELA4",90,0)
 ;get MT and GMT thresholds
"RTN","DGENELA4",91,0)
 S DGMTI=$P($$LST^DGMTU(DFN),"^")
"RTN","DGENELA4",92,0)
 S MTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",12)
"RTN","DGENELA4",93,0)
 S GMTTHR=$P($G(^DGMT(408.31,+DGMTI,0)),"^",27)
"RTN","DGENELA4",94,0)
 ;
"RTN","DGENELA4",95,0)
 ;get the Enrollment Group Threshold (EGT) setting
"RTN","DGENELA4",96,0)
 S DGEGT=""
"RTN","DGENELA4",97,0)
 I $$GET^DGENEGT($$FINDCUR^DGENEGT(),.DGEGT)
"RTN","DGENELA4",98,0)
 ;
"RTN","DGENELA4",99,0)
 D  ;drops out when priority determined
"RTN","DGENELA4",100,0)
 .S PRIORITY=""
"RTN","DGENELA4",101,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>49))!(CODENAME="SERVICE CONNECTED 50% to 100%") S PRIORITY=1 Q
"RTN","DGENELA4",102,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>29)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=2 Q
"RTN","DGENELA4",103,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")>9)&(CODENAME="SC LESS THAN 50%"))!(DGELG("POW")="Y")!(CODENAME="PRISONER OF WAR")!(DGELG("DISRET")=2)!(DGELG("DISRET")=1)!(CODENAME="PURPLE HEART RECIPIENT")!(DGELG("PH")="Y") S PRIORITY=3 Q
"RTN","DGENELA4",104,0)
 .I (DGELG("A&A")="Y")!(CODENAME="AID & ATTENDANCE")!(DGELG("HB")="Y")!(CODENAME="HOUSEBOUND")!(DGELG("VCD")="Y") S PRIORITY=4 Q
"RTN","DGENELA4",105,0)
 .I (MTSTA="A")!(DGELG("MEDICAID")=1)!(DGELG("VAPEN")="Y")!(CODENAME="NSC, VA PENSION") S PRIORITY=5 Q
"RTN","DGENELA4",106,0)
 .I (CODENAME="WORLD WAR I")!(CODENAME="MEXICAN BORDER WAR")!(DGELG("AO")="Y")!(DGELG("IR")="Y")!(DGELG("EC")="Y")!(DGELG("VACKAMT")>0) S PRIORITY=6 Q
"RTN","DGENELA4",107,0)
 .I (MTSTA="G")!((MTSTA="P")&(GMTTHR>MTTHR)) S PRIORITY=7 D  Q
"RTN","DGENELA4",108,0)
 ..I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",109,0)
 ..S SUBGRP=$$SUBPRI(DFN,.PRIORITY,3)
"RTN","DGENELA4",110,0)
 .I ((DGELG("SC")="Y")&(DGELG("SCPER")=0)&(DGELG("VACKAMT")<1)&(CODENAME="SC LESS THAN 50%")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,.PRIORITY,1) Q
"RTN","DGENELA4",111,0)
 .I ((MTSTA="C")!(MTSTA="P")) S PRIORITY=8,SUBGRP=$$SUBPRI(DFN,PRIORITY,3) Q
"RTN","DGENELA4",112,0)
 ;
"RTN","DGENELA4",113,0)
 Q PRIORITY_$S(PRIORITY:"^"_SUBGRP,1:"")
"RTN","DGENELA4",114,0)
 ;
"RTN","DGENELA4",115,0)
SUBPRI(DFN,PRIORITY,SUBGRP) ;calculate sub-priority if under EGT
"RTN","DGENELA4",116,0)
 ;
"RTN","DGENELA4",117,0)
 N PRVPRI,DONE,PRVENST,ENRDT,DGENRIEN,EGT,DGENRC,TODAY,X
"RTN","DGENELA4",118,0)
 Q:'$G(DFN)
"RTN","DGENELA4",119,0)
 S U="^"
"RTN","DGENELA4",120,0)
 S:$G(PRIORITY)="" PRIORITY=""
"RTN","DGENELA4",121,0)
 S:$G(SUBGRP)="" SUBGRP=""
"RTN","DGENELA4",122,0)
 D NOW^%DTC S TODAY=X
"RTN","DGENELA4",123,0)
 Q:'$$GET^DGENEGT($$FINDCUR^DGENEGT(),.EGT) SUBGRP  ;EGT isn't set
"RTN","DGENELA4",124,0)
 Q:TODAY<EGT("EFFDATE") SUBGRP  ;EGT is not in effect
"RTN","DGENELA4",125,0)
 I "^1^3^"[(U_EGT("TYPE")_U) Q SUBGRP
"RTN","DGENELA4",126,0)
 I EGT("TYPE")=2,(PRIORITY+(SUBGRP*.01))<(EGT("PRIORITY")+(EGT("SUBGRP")*.01)) Q SUBGRP
"RTN","DGENELA4",127,0)
 I EGT("TYPE")=4 Q:(PRIORITY<EGT("PRIORITY")) SUBGRP  Q:(PRIORITY>EGT("PRIORITY")) $$SUBCNV(SUBGRP)
"RTN","DGENELA4",128,0)
 ;I $G(ENRDATE) Q:$$ABOVE2^DGENEGT1(ENRDATE,PRIORITY,SUBGRP) SUBGRP
"RTN","DGENELA4",129,0)
 S DGENRIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENELA4",130,0)
 I 'DGENRIEN,$G(ENRDATE),ENRDATE<EGT("EFFDATE") Q SUBGRP
"RTN","DGENELA4",131,0)
 S DONE=0
"RTN","DGENELA4",132,0)
 F  Q:DONE  D
"RTN","DGENELA4",133,0)
 .I 'DGENRIEN S DONE=2 Q
"RTN","DGENELA4",134,0)
 .I '$$GET^DGENA(DGENRIEN,.DGENRC) S DONE=2 Q
"RTN","DGENELA4",135,0)
 .S DGENRIEN=$$FINDPRI^DGENA(DGENRIEN)
"RTN","DGENELA4",136,0)
 .Q:DGENRC("STATUS")=6   ;deceased
"RTN","DGENELA4",137,0)
 .I $P($G(^DGEN(27.15,+DGENRC("STATUS"),0)),"^",2)="N" S DONE=2 Q
"RTN","DGENELA4",138,0)
 .S ENRDT=$G(DGENRC("APP")) S:'ENRDT ENRDT=$G(DGENRC("EFFDATE"))
"RTN","DGENELA4",139,0)
 .I ENRDT,ENRDT<EGT("EFFDATE") S DONE=1 Q
"RTN","DGENELA4",140,0)
 .; HEC is the authoritative source on continuous enrollment
"RTN","DGENELA4",141,0)
 .I $$OVRRIDE^DGENEGT1(DFN,.EGT)  S DONE=1
"RTN","DGENELA4",142,0)
 ;
"RTN","DGENELA4",143,0)
 Q $S(DONE=2:$$SUBCNV(SUBGRP),1:SUBGRP)
"RTN","DGENELA4",144,0)
 ;
"RTN","DGENELA4",145,0)
SUBCNV(SUBGRP) ;return new subgrp
"RTN","DGENELA4",146,0)
 I SUBGRP=1 Q 5
"RTN","DGENELA4",147,0)
 I SUBGRP=3 Q 7
"RTN","DGENELA4",148,0)
 Q SUBGRP
"RTN","DGENUPL3")
0^24^B15297045
"RTN","DGENUPL3",1,0)
DGENUPL3 ;ALB/CJM,ISA/KWP,AEG,BRM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 8/5/03 3:30pm
"RTN","DGENUPL3",2,0)
 ;;5.3;REGISTRATION;**147,230,232,377,404,451**;Aug 13,1993
"RTN","DGENUPL3",3,0)
 ;
"RTN","DGENUPL3",4,0)
 ;
"RTN","DGENUPL3",5,0)
ADDMSG(MSGS,MESSAGE,TOHEC) ;
"RTN","DGENUPL3",6,0)
 ;Description: Used to add a message to an array of messages to be sent.
"RTN","DGENUPL3",7,0)
 ;
"RTN","DGENUPL3",8,0)
 ;Input:
"RTN","DGENUPL3",9,0)
 ;  MSGS - the array to store the message (pass by reference)
"RTN","DGENUPL3",10,0)
 ;  MESSAGE - the message to store
"RTN","DGENUPL3",11,0)
 ;  TOHEC - a flag, if set to 1 it means that HEC should also receive notification
"RTN","DGENUPL3",12,0)
 ;
"RTN","DGENUPL3",13,0)
 ;Output: none
"RTN","DGENUPL3",14,0)
 ;
"RTN","DGENUPL3",15,0)
 I MESSAGE["DATE OF DEATH" Q
"RTN","DGENUPL3",16,0)
 S MSGS(0)=($G(MSGS(0))+1)
"RTN","DGENUPL3",17,0)
 S MSGS(MSGS(0))=MESSAGE
"RTN","DGENUPL3",18,0)
 I ($G(TOHEC)=1) S MSGS("HEC")=1
"RTN","DGENUPL3",19,0)
 Q
"RTN","DGENUPL3",20,0)
 ;
"RTN","DGENUPL3",21,0)
 ;
"RTN","DGENUPL3",22,0)
NOTIFY(DGPAT,MSGS) ;
"RTN","DGENUPL3",23,0)
 ;Description: This is used to send a message to the local mail group
"RTN","DGENUPL3",24,0)
 ;defined by the MAS Parameter ELIGIBILITY UPLOAD MAIL GROUP.The
"RTN","DGENUPL3",25,0)
 ;notification is to be used when specific problems or conditions
"RTN","DGENUPL3",26,0)
 ;regarding the upload of the enrollment or eligibility data.
"RTN","DGENUPL3",27,0)
 ;
"RTN","DGENUPL3",28,0)
 ;Input: 
"RTN","DGENUPL3",29,0)
 ;  OLDPAT -used if the DGPAT elements have not been built
"RTN","DGENUPL3",30,0)
 ;  DGPAT - patient array (pass by reference)
"RTN","DGENUPL3",31,0)
 ;  MSGS - the an array of messages that should be included in the
"RTN","DGENUPL3",32,0)
 ;         notification (pass by reference). If MSGS("HEC")=1
"RTN","DGENUPL3",33,0)
 ;         it means that HEC should also receive notification.
"RTN","DGENUPL3",34,0)
 ;
"RTN","DGENUPL3",35,0)
 ;Output:   none
"RTN","DGENUPL3",36,0)
 ;
"RTN","DGENUPL3",37,0)
 N TEXT,XMDUZ,XMTEXT,XMSUB,XMSTRIP,XMROU,XMY,XMZ,XMDF,COUNT
"RTN","DGENUPL3",38,0)
 N HEADER,NSC,POW,TMPSTR,MAILGRP,ELIG,CD
"RTN","DGENUPL3",39,0)
 ;
"RTN","DGENUPL3",40,0)
 ;if there are no alerts, then quit
"RTN","DGENUPL3",41,0)
 Q:'$G(MSGS(0))
"RTN","DGENUPL3",42,0)
 ;
"RTN","DGENUPL3",43,0)
 ;Get reason for alert.  If there is more than one reason decide which 
"RTN","DGENUPL3",44,0)
 ;reason to display.  'NON-SERVICE' alerts have a higher priority than
"RTN","DGENUPL3",45,0)
 ;other alerts and are therefore displayed before other alerts in the 
"RTN","DGENUPL3",46,0)
 ;subject line, followed by 'POW' alerts in priority.
"RTN","DGENUPL3",47,0)
 S (ELIG,NSC,POW,CD)=0
"RTN","DGENUPL3",48,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT!NSC  D
"RTN","DGENUPL3",49,0)
 .I MSGS(COUNT)["PREVIOUSLY ELIGIBLE" S ELIG=1 Q
"RTN","DGENUPL3",50,0)
 .I MSGS(COUNT)["NON-SERVICE" S NSC=1 Q
"RTN","DGENUPL3",51,0)
 .I MSGS(COUNT)["POW" S POW=1 Q
"RTN","DGENUPL3",52,0)
 .I MSGS(COUNT)["CD EVALUATION" S CD=1 Q
"RTN","DGENUPL3",53,0)
 .S HEADER=MSGS(COUNT)
"RTN","DGENUPL3",54,0)
 .Q
"RTN","DGENUPL3",55,0)
 D
"RTN","DGENUPL3",56,0)
 .I ELIG S HEADER="Ineligibility Alert: " Q
"RTN","DGENUPL3",57,0)
 .I NSC S HEADER="NSC Alert: " Q
"RTN","DGENUPL3",58,0)
 .I POW&'NSC S HEADER="POW Alert: " Q
"RTN","DGENUPL3",59,0)
 .I CD S HEADER="CD Alert: " Q
"RTN","DGENUPL3",60,0)
 .Q
"RTN","DGENUPL3",61,0)
 ;
"RTN","DGENUPL3",62,0)
 S XMDF=""
"RTN","DGENUPL3",63,0)
 S (XMDUN,XMDUZ)="Registration Enrollment Module"
"RTN","DGENUPL3",64,0)
 ;Phase II Re-Enrollment
"RTN","DGENUPL3",65,0)
 ;DGPAT("SSN") is built by the parser.  DGPAT("NAME"),DGPAT("SEX"),DGPAT("DOB")(are merged into DGPAT from OLDPAT.
"RTN","DGENUPL3",66,0)
 ;The checks below are to setup the DGPAT elements from OLDPAT if NOTIFY is called before the merge. 
"RTN","DGENUPL3",67,0)
 I '$D(DGPAT("NAME")) S DGPAT("NAME")=$G(OLDPAT("NAME"))
"RTN","DGENUPL3",68,0)
 I '$D(DGPAT("SEX")) S DGPAT("SEX")=$G(OLDPAT("SEX"))
"RTN","DGENUPL3",69,0)
 I '$D(DGPAT("DOB")) S DGPAT("DOB")=$G(OLDPAT("DOB"))
"RTN","DGENUPL3",70,0)
 S TMPSTR=" ("_$E(DGPAT("NAME"),1,1)
"RTN","DGENUPL3",71,0)
 S TMPSTR=TMPSTR_$E(DGPAT("SSN"),$L(DGPAT("SSN"))-3,1000)_")"
"RTN","DGENUPL3",72,0)
 S XMSUB=$E(HEADER,1,30)_$E(DGPAT("NAME"),1,25)_TMPSTR
"RTN","DGENUPL3",73,0)
 ;
"RTN","DGENUPL3",74,0)
 ; send msg to local mail group specified in IVM SITE PARAMETER file
"RTN","DGENUPL3",75,0)
 S MAILGRP=+$P($G(^IVM(301.9,1,0)),"^",9)
"RTN","DGENUPL3",76,0)
 S MAILGRP=$$EXTERNAL^DILFD(301.9,.09,"F",MAILGRP)
"RTN","DGENUPL3",77,0)
 I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",78,0)
 ;
"RTN","DGENUPL3",79,0)
 ; if flag is set, send msg to remote mail group specified in
"RTN","DGENUPL3",80,0)
 ; the IVM SITE PARAMETER file
"RTN","DGENUPL3",81,0)
 I $G(MSGS("HEC"))=1 D
"RTN","DGENUPL3",82,0)
 .S MAILGRP=$P($G(^IVM(301.9,1,0)),"^",10)
"RTN","DGENUPL3",83,0)
 .S MAILGRP=$$EXTERNAL^DILFD(301.9,.10,"F",MAILGRP)
"RTN","DGENUPL3",84,0)
 .I MAILGRP]"" S XMY("G."_MAILGRP)=""
"RTN","DGENUPL3",85,0)
 ;
"RTN","DGENUPL3",86,0)
 ;
"RTN","DGENUPL3",87,0)
 S XMTEXT="TEXT("
"RTN","DGENUPL3",88,0)
 S TEXT(1)="The enrollment/eligibility upload produced the following alerts:"
"RTN","DGENUPL3",89,0)
 S TEXT(2)="  "
"RTN","DGENUPL3",90,0)
 S TEXT(3)="Patient Name   :     "_DGPAT("NAME")
"RTN","DGENUPL3",91,0)
 S TEXT(4)="SSN            :     "_DGPAT("SSN")
"RTN","DGENUPL3",92,0)
 S TEXT(5)="DOB            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("DOB"),"F",DGPAT("DOB"))
"RTN","DGENUPL3",93,0)
 S TEXT(6)="SEX            :     "_$$EXTERNAL^DILFD(2,$$FIELD^DGENPTA1("SEX"),"F",DGPAT("SEX"))
"RTN","DGENUPL3",94,0)
 S TEXT(7)=" "
"RTN","DGENUPL3",95,0)
 ;
"RTN","DGENUPL3",96,0)
 S TEXT(8)=" ** Alerts **"
"RTN","DGENUPL3",97,0)
 S TEXT(9)=" "
"RTN","DGENUPL3",98,0)
 S COUNT=0 F  S COUNT=$O(MSGS(COUNT)) Q:'COUNT  S TEXT(10+COUNT)=COUNT_") "_MSGS(COUNT)
"RTN","DGENUPL3",99,0)
 ;
"RTN","DGENUPL3",100,0)
 D ^XMD
"RTN","DGENUPL3",101,0)
 Q
"RTN","DGENUPL3",102,0)
 ;
"RTN","DGENUPL3",103,0)
BEGUPLD(DFN) ;
"RTN","DGENUPL3",104,0)
 ;Description: Sets a lock used to determine if an eligibility/enrollment
"RTN","DGENUPL3",105,0)
 ;upload is in progress. 
"RTN","DGENUPL3",106,0)
 ;
"RTN","DGENUPL3",107,0)
 ;Input:
"RTN","DGENUPL3",108,0)
 ;   DFN - ien, Patient record
"RTN","DGENUPL3",109,0)
 ;
"RTN","DGENUPL3",110,0)
 ;Output:
"RTN","DGENUPL3",111,0)
 ;  Function value - returns 1 if the lock was obtained, 0 otherwise.
"RTN","DGENUPL3",112,0)
 ;
"RTN","DGENUPL3",113,0)
 Q:'$G(DFN) 1
"RTN","DGENUPL3",114,0)
 L +^DGEN("ELIGIBILITY UPLOAD",DFN):3
"RTN","DGENUPL3",115,0)
 Q $T
"RTN","DGENUPL3",116,0)
 ;
"RTN","DGENUPL3",117,0)
ENDUPLD(DFN) ;
"RTN","DGENUPL3",118,0)
 ;Description: Releases the lock obtained by calling $$BEGUPLD(DFN)
"RTN","DGENUPL3",119,0)
 ;
"RTN","DGENUPL3",120,0)
 Q:'$G(DFN)
"RTN","DGENUPL3",121,0)
 L -^DGEN("ELIGIBILITY UPLOAD",DFN)
"RTN","DGENUPL3",122,0)
 Q
"RTN","DGENUPL3",123,0)
 ;
"RTN","DGENUPL3",124,0)
CKUPLOAD(DFN) ;
"RTN","DGENUPL3",125,0)
 ;Description: Checks if an upload is in progress.  If so, it pauses
"RTN","DGENUPL3",126,0)
 ;until it is completed.
"RTN","DGENUPL3",127,0)
 ;The enrollment/eligibility upload can take a while to accomplish.
"RTN","DGENUPL3",128,0)
 ;If the lock is not obtained initially, it is assumed that the upload
"RTN","DGENUPL3",129,0)
 ;is in progress, and a message is displayed to the user.
"RTN","DGENUPL3",130,0)
 ;
"RTN","DGENUPL3",131,0)
 ;Input: DFN
"RTN","DGENUPL3",132,0)
 ;Output: none
"RTN","DGENUPL3",133,0)
 ;
"RTN","DGENUPL3",134,0)
 N I
"RTN","DGENUPL3",135,0)
 I '$$BEGUPLD(DFN) D
"RTN","DGENUPL3",136,0)
 .W !!,"Upload of patient enrollment/eligibility data is in progress ..."
"RTN","DGENUPL3",137,0)
 .D UNLOCK^DGENPTA1(DFN)
"RTN","DGENUPL3",138,0)
 .F I=1:1:50 Q:$$BEGUPLD(DFN)  W "."
"RTN","DGENUPL3",139,0)
 .W !,"Upload of patient enrollment/eligibility data is completed.",!
"RTN","DGENUPL3",140,0)
 D ENDUPLD(DFN)
"RTN","DGENUPL3",141,0)
 Q
"RTN","DGENUPL4")
0^25^B64852706
"RTN","DGENUPL4",1,0)
DGENUPL4 ;ALB/CJM,RTK,ISA/KWP,ISD/GSN,PHH,RGL,PJR,BRM - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 8/3/04 12:47pm
"RTN","DGENUPL4",2,0)
 ;;5.3;REGISTRATION;**147,177,232,253,327,367,377,514,451**;Aug 13,1993
"RTN","DGENUPL4",3,0)
 ;
"RTN","DGENUPL4",4,0)
UOBJECTS(DFN,DGPAT,DGELG,DGCDIS,MSGID,ERRCOUNT,MSGS,OLDPAT,OLDELG,OLDCDIS) ;
"RTN","DGENUPL4",5,0)
 ;Description: Used to update the PATIENT, ELIGIBILITY, and CATASTROPHIC
"RTN","DGENUPL4",6,0)
 ;DISABILITY objects 'in memory'.
"RTN","DGENUPL4",7,0)
 ;
"RTN","DGENUPL4",8,0)
 ;Input:
"RTN","DGENUPL4",9,0)
 ;  DFN - ien of record in the PATIENT file
"RTN","DGENUPL4",10,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",11,0)
 ;  DGELG - ELIGIBILITY object array (pass by reference)
"RTN","DGENUPL4",12,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by reference)
"RTN","DGENUPL4",13,0)
 ;  MSGID - message control id of the HL7 message being processed
"RTN","DGENUPL4",14,0)
 ;  ERRCOUNT - count of errors (pass by reference)
"RTN","DGENUPL4",15,0)
 ;  MSGS - array of messages for the site (pass by reference)
"RTN","DGENUPL4",16,0)
 ;
"RTN","DGENUPL4",17,0)
 ;Output:
"RTN","DGENUPL4",18,0)
 ;  Function Value: 1 if the update was successful 'in memory',
"RTN","DGENUPL4",19,0)
 ;           consistency checks pass and the objects can be stored in
"RTN","DGENUPL4",20,0)
 ;           the local database, 0 otherwise.
"RTN","DGENUPL4",21,0)
 ;  DGPAT - PATIENT object array (pass by reference)
"RTN","DGENUPL4",22,0)
 ;  DGELG - ELIGIBILITY object array (pass by reference)
"RTN","DGENUPL4",23,0)
 ;  DGCDIS - CATASTROPHIC DISABILITY object array (pass by reference)
"RTN","DGENUPL4",24,0)
 ;  ERRCOUNT - count of errors (pass by reference)
"RTN","DGENUPL4",25,0)
 ;  MSGS - array of messages for the site (pass by reference)
"RTN","DGENUPL4",26,0)
 ;  OLDPAT - patient object array as it currently exists in database before the update (pass by reference)
"RTN","DGENUPL4",27,0)
 ;  OLDELG - eligibility object array as it currently exists in database before the update (pass by reference)
"RTN","DGENUPL4",28,0)
 ;  OLDCDIS - catastrophically disability object array as it currently exists in database before the update (pass by reference)
"RTN","DGENUPL4",29,0)
 ;
"RTN","DGENUPL4",30,0)
 N DGPAT3,DGELG3,DGCDIS3,SUCCESS
"RTN","DGENUPL4",31,0)
 S SUCCESS=1
"RTN","DGENUPL4",32,0)
 D
"RTN","DGENUPL4",33,0)
 .;first get the local site's current data
"RTN","DGENUPL4",34,0)
 .I ('$$GET^DGENPTA(DFN,.OLDPAT))!('$$GET^DGENELA(DFN,.OLDELG))!('$$GET^DGENCDA(DFN,.OLDCDIS)) D  Q
"RTN","DGENUPL4",35,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"UNABLE TO ACCESS PATIENT RECORD",.ERRCOUNT)
"RTN","DGENUPL4",36,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",37,0)
 .;
"RTN","DGENUPL4",38,0)
 .;Phase II CD Consistency Checks (SRS 6.5.1.4) check VISTA against HEC
"RTN","DGENUPL4",39,0)
 .S SUCCESS=$$CDCHECK^DGENUPL9()
"RTN","DGENUPL4",40,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",41,0)
 .;
"RTN","DGENUPL4",42,0)
 .;now merge with the update
"RTN","DGENUPL4",43,0)
 .D MERGE
"RTN","DGENUPL4",44,0)
 .;
"RTN","DGENUPL4",45,0)
 .;add the assumed values
"RTN","DGENUPL4",46,0)
 .D ADD
"RTN","DGENUPL4",47,0)
 .;
"RTN","DGENUPL4",48,0)
 .;now do the consistency checks
"RTN","DGENUPL4",49,0)
 .S SUCCESS=$$CHECK()
"RTN","DGENUPL4",50,0)
 .Q:'SUCCESS
"RTN","DGENUPL4",51,0)
 .;
"RTN","DGENUPL4",52,0)
 .;replace input arrays with fully updated versions
"RTN","DGENUPL4",53,0)
 .K DGPAT M DGPAT=DGPAT3
"RTN","DGENUPL4",54,0)
 .K DGELG M DGELG=DGELG3
"RTN","DGENUPL4",55,0)
 .K DGCDIS M DGCDIS=DGCDIS3
"RTN","DGENUPL4",56,0)
 ;
"RTN","DGENUPL4",57,0)
 I SUCCESS D
"RTN","DGENUPL4",58,0)
 .;
"RTN","DGENUPL4",59,0)
 .;list of required notifications
"RTN","DGENUPL4",60,0)
 .;
"RTN","DGENUPL4",61,0)
 .;change in date of death
"RTN","DGENUPL4",62,0)
 .I DGPAT("DEATH"),$P(OLDPAT("DEATH"),".")'=$P(DGPAT("DEATH"),".") D
"RTN","DGENUPL4",63,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS DATE OF DEATH = "_$$FMTE^XLFDT(DGPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",64,0)
 ..D ADDMSG^DGENUPL3(.MSGS,$S('OLDPAT("DEATH"):"SITE DOES NOT HAVE DATE OF DEATH",1:"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1")),1)
"RTN","DGENUPL4",65,0)
 .;
"RTN","DGENUPL4",66,0)
 .I OLDPAT("DEATH"),'DGPAT("DEATH") D
"RTN","DGENUPL4",67,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"HEC SHOWS NO DATE OF DEATH",1)
"RTN","DGENUPL4",68,0)
 ..D ADDMSG^DGENUPL3(.MSGS,"SITE HAS DATE OF DEATH = "_$$FMTE^XLFDT(OLDPAT("DEATH"),"1"),1)
"RTN","DGENUPL4",69,0)
 .;
"RTN","DGENUPL4",70,0)
 .;change in POW
"RTN","DGENUPL4",71,0)
 .I OLDELG("POW")="N",DGELG("POW")="Y" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO YES")
"RTN","DGENUPL4",72,0)
 .I OLDELG("POW")="Y",DGELG("POW")="N" D ADDMSG^DGENUPL3(.MSGS,"POW STATUS CHANGED TO NO")
"RTN","DGENUPL4",73,0)
 .;
"RTN","DGENUPL4",74,0)
 .;SC to NSC
"RTN","DGENUPL4",75,0)
 .I OLDELG("SC")="Y",DGELG("SC")="N" D ADDMSG^DGENUPL3(.MSGS,"VETERAN CHANGED TO NON-SERVICE CONNECTED",1)
"RTN","DGENUPL4",76,0)
 .;
"RTN","DGENUPL4",77,0)
 .; Change from Eligible to Ineligible
"RTN","DGENUPL4",78,0)
 .I 'OLDPAT("INELDATE"),DGPAT("INELDATE") D ADDMSG^DGENUPL3(.MSGS,"VETERAN PREVIOUSLY ELIGIBLE FOR VA HEALTH CARE, NOW INELIGIBLE.",1)
"RTN","DGENUPL4",79,0)
 .;
"RTN","DGENUPL4",80,0)
 .; Check for erroneous CD deletion
"RTN","DGENUPL4",81,0)
 .I OLDCDIS("VCD")="","@"[DGCDIS("VCD") Q  ;no notification is needed
"RTN","DGENUPL4",82,0)
 .;
"RTN","DGENUPL4",83,0)
 .; CD Determination Changed
"RTN","DGENUPL4",84,0)
 .I OLDCDIS("VCD")'=DGCDIS("VCD") D ADDMSG^DGENUPL3(.MSGS,"VETERANS CD EVALUATION HAS CHANGED.")
"RTN","DGENUPL4",85,0)
 Q SUCCESS
"RTN","DGENUPL4",86,0)
 ;
"RTN","DGENUPL4",87,0)
ADD ;
"RTN","DGENUPL4",88,0)
 ;Description: adds computed and assumed values to the updated objects
"RTN","DGENUPL4",89,0)
 ;
"RTN","DGENUPL4",90,0)
 ;Input: DGELG3(),DGPAT3() created in the UOBJECTS procedure.
"RTN","DGENUPL4",91,0)
 ;
"RTN","DGENUPL4",92,0)
 N SUB,TYPE,DATA
"RTN","DGENUPL4",93,0)
 S DGELG3("ELIGENTBY")=.5
"RTN","DGENUPL4",94,0)
 S SUB=0 F  S SUB=$O(DGELG3("RATEDIS",SUB)) Q:'SUB  S DGELG3("RATEDIS",SUB,"RDSC")=1
"RTN","DGENUPL4",95,0)
 ;
"RTN","DGENUPL4",96,0)
 ; Default Patient Types
"RTN","DGENUPL4",97,0)
 I DGELG3("SC")="N" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","NSC VETERAN",0))
"RTN","DGENUPL4",98,0)
 I DGELG3("SC")="Y" S DGPAT3("VETERAN")="Y",DGPAT3("PATYPE")=$O(^DG(391,"B","SC VETERAN",0))
"RTN","DGENUPL4",99,0)
 ;
"RTN","DGENUPL4",100,0)
 ; If Ineldate apply the business rules
"RTN","DGENUPL4",101,0)
 I DGPAT3("INELDATE"),DGELG3("SC")'="Y" D
"RTN","DGENUPL4",102,0)
 .S DGPAT3("VETERAN")="N",DGPAT3("PATYPE")=$O(^DG(391,"B","NON-VETERAN (OTHER)",0))
"RTN","DGENUPL4",103,0)
 .S DGELG3("POS")=$O(^DIC(21,"B","OTHER NON-VETERANS",0))
"RTN","DGENUPL4",104,0)
 ;
"RTN","DGENUPL4",105,0)
 ;update/set ELIGIBILITY VERIF. SOURCE field (Ineligible Project):
"RTN","DGENUPL4",106,0)
 I DGELG3("ELIGVERIF")["VIVA" S DATA(.3613)="H"
"RTN","DGENUPL4",107,0)
 E  S DATA(.3613)="V"
"RTN","DGENUPL4",108,0)
 ;
"RTN","DGENUPL4",109,0)
 ; File the data fields modified by Ineligible Business Rules
"RTN","DGENUPL4",110,0)
 I $$UPD^DGENDBS(2,DFN,.DATA,.ERROR)
"RTN","DGENUPL4",111,0)
 Q
"RTN","DGENUPL4",112,0)
 ;
"RTN","DGENUPL4",113,0)
MERGE ;
"RTN","DGENUPL4",114,0)
 ;Description: merges arrays with current patient data with the updates
"RTN","DGENUPL4",115,0)
 ; Merges DGPAT() + OLDPAT() -> DGPAT3()
"RTN","DGENUPL4",116,0)
 ;        DGELG() + OLDELG() -> DGELG3()
"RTN","DGENUPL4",117,0)
 ;        DGCDIS() + OLDCDIS() -> DGCDIS3()
"RTN","DGENUPL4",118,0)
 ;
"RTN","DGENUPL4",119,0)
 ;Input:
"RTN","DGENUPL4",120,0)
 ;  DGPAT,DGELG,DGCDIS,OLDPAT,OLDELG,OLDCDIS arrays
"RTN","DGENUPL4",121,0)
 ;
"RTN","DGENUPL4",122,0)
 ;Output:
"RTN","DGENUPL4",123,0)
 ;  DGPAT3,DGELG3,DGCDIS3 arrays
"RTN","DGENUPL4",124,0)
 ;
"RTN","DGENUPL4",125,0)
 N SUB,SUB2,LOC,HEC,NATCODE
"RTN","DGENUPL4",126,0)
 M DGPAT3=OLDPAT,DGELG3=OLDELG,DGCDIS3=OLDCDIS
"RTN","DGENUPL4",127,0)
 ;
"RTN","DGENUPL4",128,0)
 ;discard MT status from local database - don't ever want to use it during upload
"RTN","DGENUPL4",129,0)
 S DGELG3("MTSTA")=DGELG("MTSTA")
"RTN","DGENUPL4",130,0)
 ;
"RTN","DGENUPL4",131,0)
 ;patient array
"RTN","DGENUPL4",132,0)
 S SUB=""
"RTN","DGENUPL4",133,0)
 F  S SUB=$O(DGPAT(SUB)) Q:(SUB="")  I (DGPAT(SUB)'="") S DGPAT3(SUB)=$S((DGPAT(SUB)="@"):"",1:DGPAT(SUB))
"RTN","DGENUPL4",134,0)
 ;
"RTN","DGENUPL4",135,0)
 ;Allow Ineligible info deletion (Ineligible Project):
"RTN","DGENUPL4",136,0)
 I $D(DGPAT("INELDEC")),DGPAT("INELDEC")="" S DGPAT("INELDEC")="@"
"RTN","DGENUPL4",137,0)
 I $D(DGPAT("INELREA")),DGPAT("INELREA")="" S DGPAT("INELREA")="@"
"RTN","DGENUPL4",138,0)
 I $D(DGPAT("INELDATE")),DGPAT("INELDATE")="" S DGPAT("INELDATE")="@"
"RTN","DGENUPL4",139,0)
 ;
"RTN","DGENUPL4",140,0)
 ;catastrophic disability array
"RTN","DGENUPL4",141,0)
 S SUB=""
"RTN","DGENUPL4",142,0)
 F  S SUB=$O(DGCDIS(SUB)) Q:(SUB="")  D
"RTN","DGENUPL4",143,0)
 .I $D(DGCDIS(SUB))=1 I ($G(DGCDIS(SUB))'="") S DGCDIS3(SUB)=DGCDIS(SUB)
"RTN","DGENUPL4",144,0)
 .I $D(DGCDIS(SUB))=10 D
"RTN","DGENUPL4",145,0)
 ..S SUB2=""
"RTN","DGENUPL4",146,0)
 ..F  S SUB2=$O(DGCDIS(SUB,SUB2)) Q:SUB2=""  D
"RTN","DGENUPL4",147,0)
 ...I ($G(DGCDIS(SUB,SUB2))'="") S DGCDIS3(SUB,SUB2)=DGCDIS(SUB,SUB2)
"RTN","DGENUPL4",148,0)
 ...I SUB="PROC" D
"RTN","DGENUPL4",149,0)
 ....N CDPROC,CDEXT,LIEN
"RTN","DGENUPL4",150,0)
 ....S CDPROC=$G(DGCDIS3("PROC",SUB2))
"RTN","DGENUPL4",151,0)
 ....Q:CDPROC=""
"RTN","DGENUPL4",152,0)
 ....S CDEXT=DGCDIS3("EXT",SUB2)
"RTN","DGENUPL4",153,0)
 ....Q:CDEXT=""
"RTN","DGENUPL4",154,0)
 ....S LIEN=$O(^DGEN(27.17,CDPROC,1,"B",CDEXT,0))
"RTN","DGENUPL4",155,0)
 ....Q:LIEN=""
"RTN","DGENUPL4",156,0)
 ....K DGCDIS3("EXT",SUB2)
"RTN","DGENUPL4",157,0)
 ....S DGCDIS3("EXT",SUB2,LIEN)=CDEXT
"RTN","DGENUPL4",158,0)
 ;
"RTN","DGENUPL4",159,0)
 ;eligibility array
"RTN","DGENUPL4",160,0)
 F  S SUB=$O(DGELG(SUB)) Q:(SUB="")  I ($G(DGELG(SUB))'="") S DGELG3(SUB)=$S((DGELG(SUB)="@"):"",1:DGELG(SUB))
"RTN","DGENUPL4",161,0)
 ;
"RTN","DGENUPL4",162,0)
 ;rated disabilities from HEC should replace local sites
"RTN","DGENUPL4",163,0)
 D
"RTN","DGENUPL4",164,0)
 .K DGELG3("RATEDIS")
"RTN","DGENUPL4",165,0)
 .M DGELG3("RATEDIS")=DGELG("RATEDIS")
"RTN","DGENUPL4",166,0)
 ;
"RTN","DGENUPL4",167,0)
 ;primary eligibility
"RTN","DGENUPL4",168,0)
 I (DGELG("ELIG","CODE")'="") S DGELG3("ELIG","CODE")=$S((DGELG("ELIG","CODE")="@"):"",($$NATCODE^DGENELA(DGELG("ELIG","CODE"))=$$NATCODE^DGENELA(DGELG3("ELIG","CODE"))):DGELG3("ELIG","CODE"),1:DGELG("ELIG","CODE"))
"RTN","DGENUPL4",169,0)
 ;
"RTN","DGENUPL4",170,0)
 ;patient eligibilities multiple
"RTN","DGENUPL4",171,0)
 ;delete the veteran type codes not mapped to national codes sent by HEC, but leave the non-veteran types and the codes where there is a match
"RTN","DGENUPL4",172,0)
 ;first find all the local codes already in the patient file and the ones sent from HEC, keep in arrays LOC and HEC
"RTN","DGENUPL4",173,0)
 S NATCODE=$$NATCODE^DGENELA(DGELG("ELIG","CODE")) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",174,0)
 S SUB=0 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S HEC(NATCODE)=""
"RTN","DGENUPL4",175,0)
 S SUB=0 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  S NATCODE=$$NATCODE^DGENELA(SUB) I NATCODE S LOC(NATCODE)=""
"RTN","DGENUPL4",176,0)
 ;Now discard the codes in the local patient database that don't map to a national code sent by HEC, as well as HUMANIARIAN EMERGENCY code if not sent by HEC: 
"RTN","DGENUPL4",177,0)
 S SUB=0
"RTN","DGENUPL4",178,0)
 F  S SUB=$O(DGELG3("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",179,0)
 .I $P($G(^DIC(8,SUB,0)),"^",5)="Y"!($P($G(^DIC(8,SUB,0)),"^")["HUMANITARIAN EMERGENCY"),'$D(HEC($$NATCODE^DGENELA(SUB))) K DGELG3("ELIG","CODE",SUB)
"RTN","DGENUPL4",180,0)
 ;now add the codes included in the update that the local database does not already contain
"RTN","DGENUPL4",181,0)
 S SUB=0
"RTN","DGENUPL4",182,0)
 F  S SUB=$O(DGELG("ELIG","CODE",SUB)) Q:'SUB  D
"RTN","DGENUPL4",183,0)
 .I '$D(LOC($$NATCODE^DGENELA(SUB))) S DGELG3("ELIG","CODE",SUB)=SUB
"RTN","DGENUPL4",184,0)
 ;Agent Orange Exp. Location, use local database when upload is NULL
"RTN","DGENUPL4",185,0)
 D AO^DGENUPL9
"RTN","DGENUPL4",186,0)
 Q
"RTN","DGENUPL4",187,0)
 ;
"RTN","DGENUPL4",188,0)
CHECK() ;
"RTN","DGENUPL4",189,0)
 ;Description: Does the consistency checks on the PATIENT, ELIGIBILITY, and CATASTROPHIC DISABILITY objects.
"RTN","DGENUPL4",190,0)
 ;
"RTN","DGENUPL4",191,0)
 ;Input:
"RTN","DGENUPL4",192,0)
 ;  OLDPAT,DGPAT3,DGELG3,DGCDIS3,ERRCOUNT,MSGID
"RTN","DGENUPL4",193,0)
 ;  DGENR -Enrollment Array
"RTN","DGENUPL4",194,0)
 ;  DGPAT -Patient Array
"RTN","DGENUPL4",195,0)
 ;  MSGS  -Warning and Error Message array   
"RTN","DGENUPL4",196,0)
 ;
"RTN","DGENUPL4",197,0)
 ;Output:
"RTN","DGENUPL4",198,0)
 ;  Function Value - 1 if consistency checks passed, 0 otherwise
"RTN","DGENUPL4",199,0)
 ;
"RTN","DGENUPL4",200,0)
 N SUCCESS,ALIVE,ERRMSG,DGENR
"RTN","DGENUPL4",201,0)
 S SUCCESS=1
"RTN","DGENUPL4",202,0)
 S ERRMSG=""
"RTN","DGENUPL4",203,0)
 ;
"RTN","DGENUPL4",204,0)
 ;if upload includes date of death, check for indications that the patient is alive
"RTN","DGENUPL4",205,0)
 I DGPAT3("DEATH"),'OLDPAT("DEATH") D  S:ALIVE SUCCESS=0
"RTN","DGENUPL4",206,0)
 .;
"RTN","DGENUPL4",207,0)
 .;determine if the patient is at the moment being registered
"RTN","DGENUPL4",208,0)
 .S ALIVE=$$IFREG^DGREG(DFN)
"RTN","DGENUPL4",209,0)
 .;
"RTN","DGENUPL4",210,0)
 .;check if an inpatient
"RTN","DGENUPL4",211,0)
 .I 'ALIVE,$$INPAT^DGENPTA(DFN,DT,DT) S ALIVE=1
"RTN","DGENUPL4",212,0)
 .;
"RTN","DGENUPL4",213,0)
 .;Phase II locally enrolled with enrollment date after death date and status of unverified and rejected-initial application by vamc (SRS 6.5.1.2 e)
"RTN","DGENUPL4",214,0)
 .N CURIEN,CURENR
"RTN","DGENUPL4",215,0)
 .S CURIEN=$$FINDCUR^DGENA(DFN)
"RTN","DGENUPL4",216,0)
 .I CURIEN,$$GET^DGENA(CURIEN,.CURENR),CURENR("DATE")>DGPAT3("DEATH"),CURENR("STATUS")=1!(CURENR("STATUS")=14) S ALIVE=1
"RTN","DGENUPL4",217,0)
 .;there is an indication that he patient may not be dead
"RTN","DGENUPL4",218,0)
 .D:ALIVE ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"LOCAL SITE VERIFY PATIENT DEATH",.ERRCOUNT),ADDMSG^DGENUPL3(.MSGS,"ELIBILITY UPLOAD CONTAINED DATE OF DEATH AND WAS REJECTED, PLEASE VERIFY PATIENT DEATH",1),NOTIFY^DGENUPL3(.DGPAT,.MSGS)
"RTN","DGENUPL4",219,0)
 ;
"RTN","DGENUPL4",220,0)
 ;only do the consistency checks on this data if it is verified
"RTN","DGENUPL4",221,0)
 I SUCCESS,(DGELG3("ELIGSTA")="V") D
"RTN","DGENUPL4",222,0)
 .I $$CHECK^DGENPTA1(.DGPAT3,.ERRMSG),$$CHECK^DGENELA1(.DGELG3,.DGPAT3,.DGCDIS3,.ERRMSG),$$CHECK^DGENCDA1(.DGCDIS3,.ERRMSG)
"RTN","DGENUPL4",223,0)
 .E  D
"RTN","DGENUPL4",224,0)
 ..S SUCCESS=0
"RTN","DGENUPL4",225,0)
 ..D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),ERRMSG,.ERRCOUNT)
"RTN","DGENUPL4",226,0)
 Q SUCCESS
"RTN","DGENUPL9")
0^26^B7463748
"RTN","DGENUPL9",1,0)
DGENUPL9 ;ISA/KWP,JAN,BRM,PJR - CD CONSISTENCY CHECKS ; 9/16/03 2:54pm
"RTN","DGENUPL9",2,0)
 ;;5.3;REGISTRATION;**232,378,451**;Aug 13,1993
"RTN","DGENUPL9",3,0)
 ;
"RTN","DGENUPL9",4,0)
CDCHECK() ;
"RTN","DGENUPL9",5,0)
 ;Description: Does the consistency checks on the CATASTROPHIC DISABILITY objects.
"RTN","DGENUPL9",6,0)
 ;Input:
"RTN","DGENUPL9",7,0)
 ;  MSGS -Error messages
"RTN","DGENUPL9",8,0)
 ;  DGPAT -Patient array
"RTN","DGENUPL9",9,0)
 ;  MSGID -HL7 Message ID
"RTN","DGENUPL9",10,0)
 ;  OLDCDIS -CD array with data from file
"RTN","DGENUPL9",11,0)
 ;  DGCDIS -CD Array
"RTN","DGENUPL9",12,0)
 ;  ERRCOUNT -number of errors
"RTN","DGENUPL9",13,0)
 ;Output:
"RTN","DGENUPL9",14,0)
 ;  1 if consistency checks passed, 0 otherwise
"RTN","DGENUPL9",15,0)
 ;
"RTN","DGENUPL9",16,0)
 ; VistA Changes (DG*5.3*451) added CCs listed below in place of the
"RTN","DGENUPL9",17,0)
 ; previous Consistency Checks based on new business rules.
"RTN","DGENUPL9",18,0)
 ;
"RTN","DGENUPL9",19,0)
 N CDERR
"RTN","DGENUPL9",20,0)
 ; Reject CD update if required fields are missing
"RTN","DGENUPL9",21,0)
 I DGCDIS("VCD")="Y",'$$CHECK^DGENCDA1(.DGCDIS,.CDERR) D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: "_CDERR,.ERRCOUNT) Q 0
"RTN","DGENUPL9",22,0)
 ;
"RTN","DGENUPL9",23,0)
 ; If CD is Yes on VISTA and update is Yes and the current Date of
"RTN","DGENUPL9",24,0)
 ; Decision is more recent than the incoming one, reject update.
"RTN","DGENUPL9",25,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="Y",DGCDIS("DATE")<OLDCDIS("DATE") D ADDERROR^DGENUPL(MSGID,DGPAT("SSN"),"CD Error: Date of Decision is more recent at site",.ERRCOUNT) Q 0
"RTN","DGENUPL9",26,0)
 ;
"RTN","DGENUPL9",27,0)
 ; CD evaluation of 'NO' shall not overwrite a CD evaluation of
"RTN","DGENUPL9",28,0)
 ; 'YES' unless it is from the originating site.
"RTN","DGENUPL9",29,0)
 I OLDCDIS("VCD")="Y",DGCDIS("VCD")="N",OLDCDIS("FACDET")'=DGCDIS("FACDET") Q 0  ;no error message when this occurs per bus. rules
"RTN","DGENUPL9",30,0)
 ;
"RTN","DGENUPL9",31,0)
 Q 1
"RTN","DGENUPL9",32,0)
AO ;Agent Orange Exp. Location - overflow code from MERGE^DGENUPL4
"RTN","DGENUPL9",33,0)
 I DGELG("AOEXPLOC")="",DGELG("AO")'="" D
"RTN","DGENUPL9",34,0)
 . I DGELG("AO")="Y",DGELG3("AOEXPLOC")="" D
"RTN","DGENUPL9",35,0)
 . . S DGELG("AOEXPLOC")="V" D BULLETIN
"RTN","DGENUPL9",36,0)
 . I DGELG("AO")="N"!(DGELG("AO")="U"),DGELG3("AOEXPLOC")'="" D
"RTN","DGENUPL9",37,0)
 . . S DGELG("AOEXPLOC")="@" D BULLETIN
"RTN","DGENUPL9",38,0)
 Q
"RTN","DGENUPL9",39,0)
BULLETIN ;Agent Orange Exposure Location Change
"RTN","DGENUPL9",40,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGENUPL9",41,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGENUPL9",42,0)
 Q:'DGMGRP
"RTN","DGENUPL9",43,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGENUPL9",44,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGENUPL9",45,0)
 S XMTEXT="DGBULL("
"RTN","DGENUPL9",46,0)
 S XMSUB="AGENT ORANGE EXPOSURE LOCATION CHANGE"
"RTN","DGENUPL9",47,0)
 S DGLINE=0
"RTN","DGENUPL9",48,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGENUPL9",49,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGENUPL9",50,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGENUPL9",51,0)
 D LINE^DGEN("This veteran's Agent Orange Exposure Location has been changed.",.DGLINE)
"RTN","DGENUPL9",52,0)
 D LINE^DGEN("Contact the HEC by phone if you have questions or believe",.DGLINE)
"RTN","DGENUPL9",53,0)
 D LINE^DGEN("this information to be incorrect.",.DGLINE)
"RTN","DGENUPL9",54,0)
 D ^XMD
"RTN","DGENUPL9",55,0)
 Q
"RTN","DGENUPLA")
0^27^B27750398
"RTN","DGENUPLA",1,0)
DGENUPLA ;ALB/CKN,TDM,PJR,RGL - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 2/20/04 1:24pm
"RTN","DGENUPLA",2,0)
 ;;5.3;REGISTRATION;**397,379,497,451**;Aug 13,1993
"RTN","DGENUPLA",3,0)
 ;
"RTN","DGENUPLA",4,0)
 ;***************************************************************
"RTN","DGENUPLA",5,0)
 ; This routine was created because DGENUPL2 had reached it's
"RTN","DGENUPLA",6,0)
 ; maximum size, therefore no new code could not be added.  All
"RTN","DGENUPLA",7,0)
 ; code that existed in the ZEL and OBX tags of DGENUPL2 has
"RTN","DGENUPLA",8,0)
 ; been moved to the ZEL and OBX tags of DGENUPLA.  A line of code
"RTN","DGENUPLA",9,0)
 ; was placed in ZEL^DGENUPL2 to call ZEL^DGENUPLA.  A line of
"RTN","DGENUPLA",10,0)
 ; code was placed in OBX^DGENUPL2 to call OBX^DGENUPLA.
"RTN","DGENUPLA",11,0)
 ; Any routine that calls ZEL^DGENUPL2 or OBX^DGENUPL2 will not
"RTN","DGENUPLA",12,0)
 ; be affected by this change.
"RTN","DGENUPLA",13,0)
 ;***************************************************************
"RTN","DGENUPLA",14,0)
 ;
"RTN","DGENUPLA",15,0)
 ;***************************************************************
"RTN","DGENUPLA",16,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPLA",17,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPLA",18,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGNTR(),DGMST(),ERROR
"RTN","DGENUPLA",19,0)
 ;***************************************************************
"RTN","DGENUPLA",20,0)
 ;
"RTN","DGENUPLA",21,0)
 ;
"RTN","DGENUPLA",22,0)
ZEL(COUNT) ;
"RTN","DGENUPLA",23,0)
 N CODE
"RTN","DGENUPLA",24,0)
 S CODE=$$CONVERT^DGENUPL1(SEG(2),"ELIGIBILITY",.ERROR)
"RTN","DGENUPLA",25,0)
 I ERROR D  Q
"RTN","DGENUPLA",26,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ELIGIBILITY CODE "_SEG(2)_" NOT FOUND IN ELIGIBILTIY CODE FILE",.ERRCOUNT)
"RTN","DGENUPLA",27,0)
 I COUNT=1 D
"RTN","DGENUPLA",28,0)
 .S DGELG("ELIG","CODE")=CODE
"RTN","DGENUPLA",29,0)
 .S DGELG("DISRET")=$$CONVERT^DGENUPL1(SEG(5))
"RTN","DGENUPLA",30,0)
 .S DGELG("CLAIMNUM")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPLA",31,0)
 .;
"RTN","DGENUPLA",32,0)
 .;** removed **
"RTN","DGENUPLA",33,0)
 .;S DGELG("CLAIMLOC")=$$CONVERT^DGENUPL1(SEG(7))
"RTN","DGENUPLA",34,0)
 .;
"RTN","DGENUPLA",35,0)
 .S DGPAT("VETERAN")=$$CONVERT^DGENUPL1(SEG(8),"Y/N",.ERROR)
"RTN","DGENUPLA",36,0)
 .I ERROR D  Q
"RTN","DGENUPLA",37,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPLA",38,0)
 .S DGELG("ELIGSTA")=$$CONVERT^DGENUPL1(SEG(10))
"RTN","DGENUPLA",39,0)
 .S DGELG("ELIGSTADATE")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPLA",40,0)
 .I ERROR D  Q
"RTN","DGENUPLA",41,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPLA",42,0)
 .S DGELG("ELIGVERIF")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPLA",43,0)
 .S DGELG("A&A")=$$CONVERT^DGENUPL1(SEG(14),"Y/N",.ERROR)
"RTN","DGENUPLA",44,0)
 .I ERROR D  Q
"RTN","DGENUPLA",45,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 14",.ERRCOUNT)
"RTN","DGENUPLA",46,0)
 .S DGELG("HB")=$$CONVERT^DGENUPL1(SEG(15),"Y/N",.ERROR)
"RTN","DGENUPLA",47,0)
 .I ERROR D  Q
"RTN","DGENUPLA",48,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 15",.ERRCOUNT)
"RTN","DGENUPLA",49,0)
 .S DGELG("VAPEN")=$$CONVERT^DGENUPL1(SEG(16),"Y/N",.ERROR)
"RTN","DGENUPLA",50,0)
 .I ERROR D  Q
"RTN","DGENUPLA",51,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 16",.ERRCOUNT)
"RTN","DGENUPLA",52,0)
 .S DGELG("VADISAB")=$$CONVERT^DGENUPL1(SEG(17),"Y/N",.ERROR)
"RTN","DGENUPLA",53,0)
 .I ERROR D  Q
"RTN","DGENUPLA",54,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 17",.ERRCOUNT)
"RTN","DGENUPLA",55,0)
 .S DGELG("AO")=$$CONVERT^DGENUPL1(SEG(18),"Y/N",.ERROR)
"RTN","DGENUPLA",56,0)
 .N AOERR S AOERR=ERROR            ;  See SEG(29) below.
"RTN","DGENUPLA",57,0)
 .I ERROR D  Q
"RTN","DGENUPLA",58,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 18",.ERRCOUNT)
"RTN","DGENUPLA",59,0)
 .S DGELG("IR")=$$CONVERT^DGENUPL1(SEG(19),"Y/N",.ERROR)
"RTN","DGENUPLA",60,0)
 .I ERROR D  Q
"RTN","DGENUPLA",61,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 19",.ERRCOUNT)
"RTN","DGENUPLA",62,0)
 .S DGELG("EC")=$$CONVERT^DGENUPL1(SEG(20),"Y/N",.ERROR)
"RTN","DGENUPLA",63,0)
 .I ERROR D  Q
"RTN","DGENUPLA",64,0)
 ..D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 20",.ERROR)
"RTN","DGENUPLA",65,0)
 .;
"RTN","DGENUPLA",66,0)
 .S DGELG("VACKAMT")=$$CONVERT^DGENUPL1(SEG(21))
"RTN","DGENUPLA",67,0)
 .;
"RTN","DGENUPLA",68,0)
 .;Parse MST data into DGMST array from sequences 23, 24, 25 of ZEL segment
"RTN","DGENUPLA",69,0)
 . S DGMST("MSTSTAT")=SEG(23)
"RTN","DGENUPLA",70,0)
 . S DGMST("MSTDT")=$$CONVERT^DGENUPL1(SEG(24),"TS",.ERROR)
"RTN","DGENUPLA",71,0)
 . I ERROR D  Q
"RTN","DGENUPLA",72,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 24",.ERROR)
"RTN","DGENUPLA",73,0)
 . S DGMST("MSTST")=$$CONVERT^DGENUPL1(SEG(25),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",74,0)
 . I ERROR D  Q
"RTN","DGENUPLA",75,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 25",.ERROR)
"RTN","DGENUPLA",76,0)
 .;
"RTN","DGENUPLA",77,0)
 . S DGELG("AOEXPLOC")=SEG(29)
"RTN","DGENUPLA",78,0)
 .; Logic enhanced during SQA of patch 451.  AOERR from SEG(18) above.
"RTN","DGENUPLA",79,0)
 . I 'AOERR,DGELG("AO")'="Y",DGELG("AOEXPLOC")="" S DGELG("AOEXPLOC")="@"
"RTN","DGENUPLA",80,0)
 . S DGELG("UEYEAR")=$$CONVERT^DGENUPL1(SEG(34),"DATE",.ERROR)
"RTN","DGENUPLA",81,0)
 . I ERROR D  Q
"RTN","DGENUPLA",82,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 34",.ERRCOUNT)
"RTN","DGENUPLA",83,0)
 . S DGELG("UESITE")=$$CONVERT^DGENUPL1(SEG(35),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",84,0)
 . I ERROR D  Q
"RTN","DGENUPLA",85,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEL SEGMENT, SEQ 35",.ERRCOUNT)
"RTN","DGENUPLA",86,0)
 ;
"RTN","DGENUPLA",87,0)
 I COUNT>1 D
"RTN","DGENUPLA",88,0)
 .S DGELG("ELIG","CODE",CODE)=""
"RTN","DGENUPLA",89,0)
 Q
"RTN","DGENUPLA",90,0)
 ;
"RTN","DGENUPLA",91,0)
OBX ;
"RTN","DGENUPLA",92,0)
 N OBXPCE,OBXVAL,OBXTBL,I,CS,SS,RS
"RTN","DGENUPLA",93,0)
 I $G(HLECH)'="~|\&" N HLECH S HLECH="~|\&"
"RTN","DGENUPLA",94,0)
 I $G(HLFS)="" N HLFS S HLFS="^"
"RTN","DGENUPLA",95,0)
 S CS=$E(HLECH,1),SS=$E(HLECH,4),RS=$E(HLECH,2)
"RTN","DGENUPLA",96,0)
 I $G(SEG(3))=("38.1"_$E(HLECH)_"SECURITY LOG") D
"RTN","DGENUPLA",97,0)
 . N LEVEL
"RTN","DGENUPLA",98,0)
 . S LEVEL=$P(SEG(5),$E(HLECH))
"RTN","DGENUPLA",99,0)
 . S DGSEC("LEVEL")=$$CONVERT^DGENUPL1(LEVEL,"1/0",.ERROR)
"RTN","DGENUPLA",100,0)
 . I ERROR D  Q
"RTN","DGENUPLA",101,0)
 . . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, OBX SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPLA",102,0)
 . S DGSEC("SOURCE")=$$CONVERT^DGENUPL1(SEG(16))
"RTN","DGENUPLA",103,0)
 ;
"RTN","DGENUPLA",104,0)
 I $G(SEG(3))=("VISTA"_CS_"28.11") D
"RTN","DGENUPLA",105,0)
 . S OBXTBL(1)="NTR^Y",OBXTBL(2)="AVI^Y",OBXTBL(3)="SUB^Y"
"RTN","DGENUPLA",106,0)
 . S OBXTBL(4)="HNC^Y",OBXTBL(5)="NTR^N",OBXTBL(6)="AVI^N"
"RTN","DGENUPLA",107,0)
 . S OBXTBL(7)="SUB^N",OBXTBL(8)="HNC^N",OBXTBL(9)="NTR^U"
"RTN","DGENUPLA",108,0)
 . F I=1:1:$L($G(SEG(5)),RS) D
"RTN","DGENUPLA",109,0)
 . . S OBXPCE=$P($G(SEG(5)),RS,I),OBXVAL=$P($G(OBXPCE),CS)
"RTN","DGENUPLA",110,0)
 . . S DGNTR($P($G(OBXTBL(OBXVAL)),"^"))=$P($G(OBXTBL(OBXVAL)),"^",2)
"RTN","DGENUPLA",111,0)
 . I $G(SEG(12))'="" S DGNTR("HDT")=$$CONVERT^DGENUPL1(SEG(12),"TS",.ERROR)
"RTN","DGENUPLA",112,0)
 . S DGNTR("VDT")=$$CONVERT^DGENUPL1(SEG(14),"TS",.ERROR)
"RTN","DGENUPLA",113,0)
 . S DGNTR("VSIT")=$$CONVERT^DGENUPL1(SEG(15),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",114,0)
 . S DGNTR("HSIT")=$P($P($G(SEG(16)),CS,14),SS,2)
"RTN","DGENUPLA",115,0)
 . I DGNTR("HSIT")'="" S DGNTR("HSIT")=$$CONVERT^DGENUPL1($G(DGNTR("HSIT")),"INSTITUTION",.ERROR)
"RTN","DGENUPLA",116,0)
 . S DGNTR("VER")=$P($G(SEG(17)),CS)
"RTN","DGENUPLA",117,0)
 Q
"RTN","DGMSCK")
0^33^B6019031
"RTN","DGMSCK",1,0)
DGMSCK ;ALB/PJR - CONSISTENCY API'S FROM DGRPC3 ; 4/19/04 10:24am
"RTN","DGMSCK",2,0)
 ;;5.3;Registration;**451**;Mar 12, 2004
"RTN","DGMSCK",3,0)
0 Q  ;; Must be called at a tag (API)
"RTN","DGMSCK",4,0)
 ;;
"RTN","DGMSCK",5,0)
MSCK(MSECHK) ;; Check MSE API
"RTN","DGMSCK",6,0)
 N I1,I2,MSE
"RTN","DGMSCK",7,0)
 S (MSERR,MSDATERR)=0,ANYMSE="" F I1=1:1:3 S ANYMSE(I1)=0
"RTN","DGMSCK",8,0)
 F MSE="4;5;6;7","9;10;11;12","14;15;16;17" D ANY
"RTN","DGMSCK",9,0)
 ;; ANYMSE Saved for use with checks 79 through 82
"RTN","DGMSCK",10,0)
 S ANYMSE="" F I1=1:1:3 I ANYMSE(I1) S ANYMSE=ANYMSE_I1
"RTN","DGMSCK",11,0)
 Q 1
"RTN","DGMSCK",12,0)
ANY S ANYMSE=0 F I2=1:1:4 I $P(DGP(.32),"^",$P(MSE,";",I2))]"" S ANYMSE=1 Q
"RTN","DGMSCK",13,0)
 I 'ANYMSE Q
"RTN","DGMSCK",14,0)
 S ANYMSE(MSE+1\5)=1 ;; Set ANY Data found for Last, NTL, and NNTL
"RTN","DGMSCK",15,0)
 F I2=1:1:4 I $P(DGP(.32),"^",$P(MSE,";",I2))']"" S MSERR=1 S:I2>2 MSDATERR=1
"RTN","DGMSCK",16,0)
 I MSDATERR Q
"RTN","DGMSCK",17,0)
 F I2=3,4 I $E($P(DGP(.32),"^",$P(MSE,";",I2)),4,7)="0000" S (MSERR,MSDATERR)=1 Q
"RTN","DGMSCK",18,0)
 Q
"RTN","DGMSCK",19,0)
CNCK(CONCHK) ;; Check Conflicts API
"RTN","DGMSCK",20,0)
 N I1,I2,DATA,DATE,FROMPC,LOC,NODE,TOPC,YESNO
"RTN","DGMSCK",21,0)
 S CONERR=0 F I1=1:1:7 S I2=$T(CNFLT+I1) D LOC
"RTN","DGMSCK",22,0)
 Q 1
"RTN","DGMSCK",23,0)
LOC ;;
"RTN","DGMSCK",24,0)
 S LOC=$P(I2,";;",2),DATA=$P(I2,";;",3),CONSPEC(LOC)=DATA
"RTN","DGMSCK",25,0)
 S NODE=$P(DATA,",",1),YESNO=$P(DATA,",",2)
"RTN","DGMSCK",26,0)
 S FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGMSCK",27,0)
 S CONARR(LOC)=0 I $P(DGP(NODE),"^",YESNO)'="Y" Q
"RTN","DGMSCK",28,0)
 S CONARR(LOC)=1
"RTN","DGMSCK",29,0)
 F I2=FROMPC,TOPC S DATE=$P(DGP(NODE),"^",I2) I 'DATE!($E(DATE,4,7)="0000") S CONERR=1,CONARR(LOC)=2 Q
"RTN","DGMSCK",30,0)
 Q
"RTN","DGMSCK",31,0)
RANGE(RANSET) ;; Set Conflict Date Ranges
"RTN","DGMSCK",32,0)
 N I1,I2,I3
"RTN","DGMSCK",33,0)
 S I1="WWI,WWIIE,WWIIP,KOR,VIET,LEB,GREN,PAN,GULF,SOM,YUG,OTHER"
"RTN","DGMSCK",34,0)
 F I2=1:1:12 S I3=$P(I1,",",I2),RANGE(I3)=$$GETCNFDT^DGRPDT(I3)
"RTN","DGMSCK",35,0)
 Q 1
"RTN","DGMSCK",36,0)
MSFROMTO(MSESET) ;; Set first and last overall MSE from/to dates
"RTN","DGMSCK",37,0)
 N MSEFROM,MSETO,I1,I2
"RTN","DGMSCK",38,0)
 S MSEFROM=9999999,MSETO=0 ;; Initialize from/to dates
"RTN","DGMSCK",39,0)
 ;;
"RTN","DGMSCK",40,0)
 ;; Find first MSE FROM Date and last MSE TO date
"RTN","DGMSCK",41,0)
 I $G(ANYMSE) D
"RTN","DGMSCK",42,0)
 .F I1=6,11,16 S I2=$P(DGP(.32),"^",I1) I I2,I2<MSEFROM S MSEFROM=I2
"RTN","DGMSCK",43,0)
 .F I1=7,12,17 S I2=$P(DGP(.32),"^",I1) I I2,I2>MSETO S MSETO=I2
"RTN","DGMSCK",44,0)
 Q MSEFROM_"^"_MSETO
"RTN","DGMSCK",45,0)
 ;;
"RTN","DGMSCK",46,0)
CNFLT ;;
"RTN","DGMSCK",47,0)
 ;;SOM;;.322,16,17,18
"RTN","DGMSCK",48,0)
 ;;YUG;;.322,19,20,21
"RTN","DGMSCK",49,0)
 ;;PAN;;.322,7,8,9
"RTN","DGMSCK",50,0)
 ;;GREN;;.322,4,5,6
"RTN","DGMSCK",51,0)
 ;;LEB;;.322,1,2,3
"RTN","DGMSCK",52,0)
 ;;VIET;;.321,1,4,5
"RTN","DGMSCK",53,0)
 ;;GULF;;.322,10,11,12
"RTN","DGMTU")
0^28^B54348475
"RTN","DGMTU",1,0)
DGMTU ;ALB/RMO,LBD,BRM - Means Test Utilities ; 12/9/03 9:26am
"RTN","DGMTU",2,0)
 ;;5.3;Registration;**4,33,182,277,290,374,358,420,426,411,332,433,456,476,519,451**;Aug 13, 1993
"RTN","DGMTU",3,0)
 ;
"RTN","DGMTU",4,0)
LST(DFN,DGDT,DGMTYPT) ;Last means test for a patient
"RTN","DGMTU",5,0)
 ;         Input  -- DFN   Patient IEN
"RTN","DGMTU",6,0)
 ;                   DGDT  Date/Time  (Optional- default today@2359)
"RTN","DGMTU",7,0)
 ;                DGMTYPT  Type of Test (Optional - if not defined 
"RTN","DGMTU",8,0)
 ;                                       Means Test will be assumed)
"RTN","DGMTU",9,0)
 ;         Output -- Annual Means Test IEN^Date of Test
"RTN","DGMTU",10,0)
 ;                   ^Status Name^Status Code^Source of Test
"RTN","DGMTU",11,0)
 N DGIDT,DGMTFL1,DGMTI,DGNOD,Y I '$D(DGMTYPT) S DGMTYPT=1
"RTN","DGMTU",12,0)
 S DGIDT=$S($G(DGDT)>0:-DGDT,1:-DT) S:'$P(DGIDT,".",2) DGIDT=DGIDT_.2359
"RTN","DGMTU",13,0)
 F  S DGIDT=+$O(^DGMT(408.31,"AID",DGMTYPT,DFN,DGIDT)) Q:'DGIDT!$G(DGMTFL1)  D
"RTN","DGMTU",14,0)
 .F DGMTI=0:0 S DGMTI=+$O(^DGMT(408.31,"AID",DGMTYPT,DFN,DGIDT,DGMTI)) Q:'DGMTI!$G(DGMTFL1)  D
"RTN","DGMTU",15,0)
 ..S DGNOD=$G(^DGMT(408.31,DGMTI,0)) I DGNOD,$G(^("PRIM"))!(DGMTYPT=4) S DGMTFL1=1,Y=DGMTI_"^"_$P(^(0),"^")_"^"_$$MTS(DFN,+$P(^(0),"^",3))_"^"_$P(DGNOD,"^",23) ; chk for primary MT
"RTN","DGMTU",16,0)
 Q $G(Y)
"RTN","DGMTU",17,0)
 ;
"RTN","DGMTU",18,0)
LVMT(DFN,DGDT) ;Last valid means test (status other than required)
"RTN","DGMTU",19,0)
 ;          Input  -- DFN    Patient IEN
"RTN","DGMTU",20,0)
 ;                    DGDT   Date (Optional - default today)
"RTN","DGMTU",21,0)
 ;          Output -- Annual Means Test IEN^Date of Test^Status Name
"RTN","DGMTU",22,0)
 ;                     ^Status Code
"RTN","DGMTU",23,0)
 N DGMT,DGMTL
"RTN","DGMTU",24,0)
 S:'$D(DGDT) DGDT=DT S DGMTL=$$LST^DGMTU(DFN,DGDT)
"RTN","DGMTU",25,0)
 I $P(DGMTL,"^",4)="R" F  S DGMT=$$LST^DGMTU(DFN,DGDT) Q:DGMT']""!($P(DGMT,U,4)'="R")  S DGDT=$P(DGMT,U,2)-1
"RTN","DGMTU",26,0)
 Q $S($G(DGMT)]"":DGMT,1:$G(DGMTL))
"RTN","DGMTU",27,0)
 ;
"RTN","DGMTU",28,0)
NVMT(DFN,DGDT) ;Next valid means test (status other than required)
"RTN","DGMTU",29,0)
 ;          Input  -- DFN    Patient IEN
"RTN","DGMTU",30,0)
 ;                    DGDT   Date (Required)
"RTN","DGMTU",31,0)
 ;          Output -- Annual Means Test IEN^Date of Test^Status Name
"RTN","DGMTU",32,0)
 ;                     ^Status Code
"RTN","DGMTU",33,0)
 N DGDTE,DGMT,DGMT0,DGMTI,DGMTPR,DGMTS
"RTN","DGMTU",34,0)
 S DGDTE=DGDT
"RTN","DGMTU",35,0)
 F  S DGDTE=$O(^DGMT(408.31,"AD",1,DFN,DGDTE)) Q:'DGDTE!$G(DGMT)  D
"RTN","DGMTU",36,0)
 .F DGMTI=0:0 S DGMTI=$O(^DGMT(408.31,"AD",1,DFN,DGDTE,DGMTI)) Q:'DGMTI  S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGMTS=+$P(DGMT0,"^",3),DGMTPR=$G(^("PRIM")) I +DGMT0,DGMTS'=1,DGMTPR S DGMT=DGMTI_"^"_+DGMT0_"^"_$$MTS^DGMTU(DFN,DGMTS) Q
"RTN","DGMTU",37,0)
 Q $G(DGMT)
"RTN","DGMTU",38,0)
 ;
"RTN","DGMTU",39,0)
MTS(DFN,DGMTS) ;Means test status -- default current
"RTN","DGMTU",40,0)
 ;         Input  -- DFN    Patient IEN
"RTN","DGMTU",41,0)
 ;                   DGMTS  Means Test Status IEN  (Optional)
"RTN","DGMTU",42,0)
 ;         Output -- Status Name^Status Code
"RTN","DGMTU",43,0)
 N Y
"RTN","DGMTU",44,0)
 S DGMTS=$S($G(DGMTS)>0:DGMTS,1:$P($G(^DPT(DFN,0)),"^",14))
"RTN","DGMTU",45,0)
 I DGMTS S Y=$P($G(^DG(408.32,DGMTS,0)),"^",1,2)
"RTN","DGMTU",46,0)
 Q $G(Y)
"RTN","DGMTU",47,0)
 ;
"RTN","DGMTU",48,0)
DIS(DFN) ;Display patients current means test status,
"RTN","DGMTU",49,0)
 ;        eligibility for care, deductible information,
"RTN","DGMTU",50,0)
 ;        date of test and date of completion
"RTN","DGMTU",51,0)
 ;         Input  -- DFN    Patient IEN
"RTN","DGMTU",52,0)
 ;         Output -- None
"RTN","DGMTU",53,0)
 N DGCS,DGDED,DGMTI,DGMT0
"RTN","DGMTU",54,0)
 S DGCS=$P($G(^DPT(DFN,0)),"^",14) G DISQ:DGCS=""
"RTN","DGMTU",55,0)
 S DGMTI=+$$LST^DGMTU(DFN),DGMT0=$G(^DGMT(408.31,DGMTI,0))
"RTN","DGMTU",56,0)
 S MTSIG=$P(DGMT0,"^",29)
"RTN","DGMTU",57,0)
 W !,"Means Test Signed?: ",$S(MTSIG=1:"YES",MTSIG=0:"NO",MTSIG=9:"DELETED",1:"")
"RTN","DGMTU",58,0)
 I DGCS=1 W !!,"Patient Requires a Means Test"
"RTN","DGMTU",59,0)
 I DGCS=2 W !!,"Patient's Means Test is Pending Adjudication for "_$$PA^DGMTUTL(DGMTI)
"RTN","DGMTU",60,0)
 I DGCS=3 W !!,"Means Test Not Required"
"RTN","DGMTU",61,0)
 I ("^4^5^6^16^")[("^"_DGCS_"^") W !!,"Patient's status is ",$$GETNAME^DGMTH(DGCS)," based on primary means test"
"RTN","DGMTU",62,0)
 I $D(^DG(408.32,DGCS,"MSG")) W !,^("MSG")
"RTN","DGMTU",63,0)
 I DGCS=6 S DGDED=$P(DGMT0,"^",11) W ! W:DGDED]"" "Has",$S(DGDED:"",1:" not")," agreed to pay the deductible"
"RTN","DGMTU",64,0)
 S Y=$P(DGMT0,"^") X ^DD("DD") W !,"Primary Means Test ",$S(DGCS=1:"Required from",1:"Last Applied")," '",Y,"'"
"RTN","DGMTU",65,0)
 I ("^2^4^5^6^16^")[("^"_DGCS_"^") S Y=$P(DGMT0,"^",7) X ^DD("DD") W " (COMPLETED: ",Y,")"
"RTN","DGMTU",66,0)
 I DGCS=3 S Y=$P(DGMT0,"^",17) X ^DD("DD") W " (NO LONGER REQUIRED: ",Y,")"
"RTN","DGMTU",67,0)
DISQ Q
"RTN","DGMTU",68,0)
 ;
"RTN","DGMTU",69,0)
EDT(DFN,DGDT) ;Display patients current means test information and provide
"RTN","DGMTU",70,0)
 ;        the user with the option of proceeding with a required
"RTN","DGMTU",71,0)
 ;        means test or editing an existing means test
"RTN","DGMTU",72,0)
 ;         Input  -- DFN    Patient IEN
"RTN","DGMTU",73,0)
 ;                   DGDT   Date/Time
"RTN","DGMTU",74,0)
 ;         Output -- None
"RTN","DGMTU",75,0)
 ;
"RTN","DGMTU",76,0)
 ; obtain lock used to synchronize local MT/CT options with income test upload
"RTN","DGMTU",77,0)
 I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTU",78,0)
 ;
"RTN","DGMTU",79,0)
 D DIS(DFN)
"RTN","DGMTU",80,0)
 S DGMTI=+$$LST(DFN,DGDT) G EDTQ:'DGMTI!(DGMTI'=+$$LST^DGMTU(DFN))
"RTN","DGMTU",81,0)
 S DGMT0=$G(^DGMT(408.31,DGMTI,0)),DGMTDT=+DGMT0,DGMTS=$P(DGMT0,"^",3)
"RTN","DGMTU",82,0)
 S DIR("A")="Do you wish to "_$S(DGMTS=1:"proceed with",1:"edit")_" the means test at this time"
"RTN","DGMTU",83,0)
 S DIR("B")=$S(DGMTS=1:"YES",1:"NO"),DIR(0)="Y"
"RTN","DGMTU",84,0)
 W ! D ^DIR G EDTQ:$D(DTOUT)!($D(DUOUT))
"RTN","DGMTU",85,0)
 I Y S DGMTYPT=1,DGMTACT="EDT",DGMTROU="EDTQ^DGMTU" G EN^DGMTSC
"RTN","DGMTU",86,0)
EDTQ K DGMT0,DGMTACT,DGMTDT,DGMTI,DGMTROU,DGMTS,DIR,DTOUT,DUOUT,Y
"RTN","DGMTU",87,0)
 ;
"RTN","DGMTU",88,0)
 ; release lock
"RTN","DGMTU",89,0)
 D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTU",90,0)
 ;
"RTN","DGMTU",91,0)
 Q
"RTN","DGMTU",92,0)
 ;
"RTN","DGMTU",93,0)
CMTS(DFN) ;Get Current Means Test Status - query HEC if necessary
"RTN","DGMTU",94,0)
 ;
"RTN","DGMTU",95,0)
 ;        Input: DFN=patient ien
"RTN","DGMTU",96,0)
 ;       Output: MT IEN^Date of Test^Status Name
"RTN","DGMTU",97,0)
 ;                 ^Status Code^Source of Test
"RTN","DGMTU",98,0)
 ;
"RTN","DGMTU",99,0)
 N X,Y,DGMTDATA,DGQSENT,DGDOD,NODE0,DGRET,DGMFLG,DGTAG,DGMTYPT
"RTN","DGMTU",100,0)
 D CHKPT^DGMTU4(DFN)
"RTN","DGMTU",101,0)
 S DGMTYPT=1,DGMTDATA=$$LST(DFN,"",DGMTYPT)
"RTN","DGMTU",102,0)
 ;Next line checks to see if patient has expired, if so, Query not initiated
"RTN","DGMTU",103,0)
 S DGDOD=$P($G(^DPT(DFN,.35)),U)
"RTN","DGMTU",104,0)
 I +DGDOD Q DGMTDATA
"RTN","DGMTU",105,0)
 ;Next line checks to see if current test exists, if not, Query not initiated 
"RTN","DGMTU",106,0)
 I '$G(DGMTDATA) Q DGMTDATA
"RTN","DGMTU",107,0)
 D:+$$QFLG(DGMTDATA)
"RTN","DGMTU",108,0)
 .I $G(IVMZ10)'="UPLOAD IN PROGRESS",'$$OPEN^IVMCQ2(DFN),'$$SENT^IVMCQ2(DFN),$G(DGMFLG)'=0 D
"RTN","DGMTU",109,0)
 ..I $$LOCK^DGMTUTL(DFN)
"RTN","DGMTU",110,0)
 ..D QRYQUE2^IVMCQ2(DFN,$G(DUZ),0,$G(XQY)) S DGQSENT=1
"RTN","DGMTU",111,0)
 ..I '$D(ZTQUEUED),'$G(DGMSGF),$G(DGQSENT) W !!,"Financial query queued to be sent to HEC...",! H .5
"RTN","DGMTU",112,0)
 ..D UNLOCK^DGMTUTL(DFN)
"RTN","DGMTU",113,0)
 .S DGMTDATA=$$LST(DFN,"",DGMTYPT)
"RTN","DGMTU",114,0)
 D:+$$MFLG(DGMTDATA)
"RTN","DGMTU",115,0)
 .S DGMFLG=$$MFLG(DGMTDATA)
"RTN","DGMTU",116,0)
 .S DGTAG=$S(DGMFLG=1:"MSG"_DGMFLG,DGMFLG=2:"MSG"_DGMFLG,1:0)
"RTN","DGMTU",117,0)
 .I DGTAG["MSG",'$G(DGMSGF) D @DGTAG
"RTN","DGMTU",118,0)
 Q DGMTDATA   ;return most current MT data
"RTN","DGMTU",119,0)
MFLG(DGMTDATA) ;Set up appropriate informational message flag for user's
"RTN","DGMTU",120,0)
 ;benefit.
"RTN","DGMTU",121,0)
 ;Input        -     DGMTDATA as defined by $$LST function.
"RTN","DGMTU",122,0)
 ;Output       -     DGRETV
"RTN","DGMTU",123,0)
 ;     1 = Current Test is REQUIRED
"RTN","DGMTU",124,0)
 ;     2 = Test is > 365 days old and is in a status of
"RTN","DGMTU",125,0)
 ;         other than REQUIRED or NO LONGER REQUIRED
"RTN","DGMTU",126,0)
 ;     2 = Pend Adj for GMT, test date is 10/6/99 or
"RTN","DGMTU",127,0)
 ;         greater and agreed to the deductible
"RTN","DGMTU",128,0)
 ;     0 = CAT C/Pend Adj for MT, test date is 10/6/99
"RTN","DGMTU",129,0)
 ;         or greater and agreed to the deductible.
"RTN","DGMTU",130,0)
 ; OR  0 = Cat C, declined income info and agreed
"RTN","DGMTU",131,0)
 ;         to pay deductible.
"RTN","DGMTU",132,0)
 ; OR  0 = Has a future dated Means Test
"RTN","DGMTU",133,0)
 N DGRETV,FTST,DGMT0
"RTN","DGMTU",134,0)
 S DGRETV=0 I '$G(DGMTDATA) Q DGRETV
"RTN","DGMTU",135,0)
 S DGMT0=$G(^DGMT(408.31,+DGMTDATA,0))
"RTN","DGMTU",136,0)
 I $P(DGMTDATA,U,4)="R" S DGRETV=1
"RTN","DGMTU",137,0)
 I $$OLD^DGMTU4($P(DGMTDATA,U,2)),($P(DGMTDATA,U,4)'="N")&($P(DGMTDATA,U,4)'="R") S DGRETV=2
"RTN","DGMTU",138,0)
 I ($P(DGMTDATA,U,4)="C")!($P(DGMTDATA,U,4)="P"&($P(DGMT0,U,12)'<$P(DGMT0,U,27))),$P(DGMTDATA,U,2)>2991005,$P(DGMT0,U,11)=1 S DGRETV=0
"RTN","DGMTU",139,0)
 I ($P(DGMTDATA,U,4)="C"),+$P(DGMT0,U,14),+$P(DGMT0,U,11) S DGRETV=0
"RTN","DGMTU",140,0)
 D DOM^DGMTR I $G(DGDOM) S DGRETV=0
"RTN","DGMTU",141,0)
 S FTST=$$FUT(DFN)
"RTN","DGMTU",142,0)
 I DGRETV,FTST,$P(^DGMT(408.31,+FTST,0),U,19)=1 S DGRETV=0
"RTN","DGMTU",143,0)
 Q DGRETV
"RTN","DGMTU",144,0)
MSG1 ;Informational message 1
"RTN","DGMTU",145,0)
 N NODE0,Y
"RTN","DGMTU",146,0)
 S NODE0=$G(^DGMT(408.31,+DGMTDATA,0))
"RTN","DGMTU",147,0)
 W !!,$C(7),?15,"*** Patient Requires a Means Test ***",!
"RTN","DGMTU",148,0)
 S Y=$P(NODE0,U) X ^DD("DD") W !,?14,"Primary Means Test Required from "_Y,!
"RTN","DGMTU",149,0)
 I $G(IOST)["C-" R !!,"Enter <RETURN> to continue.",DGRET:DTIME
"RTN","DGMTU",150,0)
 Q
"RTN","DGMTU",151,0)
MSG2 ;Informational message 2
"RTN","DGMTU",152,0)
 N NODE0,Y
"RTN","DGMTU",153,0)
 S NODE0=$G(^DGMT(408.31,+DGMTDATA,0))
"RTN","DGMTU",154,0)
 W !!,$C(7),?17,"*** Patient Requires a Means Test ***",!
"RTN","DGMTU",155,0)
 S Y=$P(NODE0,U) X ^DD("DD") W !,?10,"Patient's Test dated "_Y_" is "_$P(DGMTDATA,U,3)_"."_" The test"
"RTN","DGMTU",156,0)
 W !,?10,"date is greater than 365 days old.  Please update."
"RTN","DGMTU",157,0)
 I $G(IOST)["C-" R !!,"Enter <RETURN> to continue.",DGRET:DTIME
"RTN","DGMTU",158,0)
 Q
"RTN","DGMTU",159,0)
QFLG(DGMTDATA) ;
"RTN","DGMTU",160,0)
 ;INPUT - DGMTDATA
"RTN","DGMTU",161,0)
 ;OUTPUT- IVMQFLG 1 if query is necessary 0 if not
"RTN","DGMTU",162,0)
 N IVMQFLG,DGMT0
"RTN","DGMTU",163,0)
 S IVMQFLG=0 I '$G(DGMTDATA) Q IVMQFLG
"RTN","DGMTU",164,0)
 S DGMT0=$G(^DGMT(408.31,+DGMTDATA,0))
"RTN","DGMTU",165,0)
 ;Set flag to 1 if Means test is Required.
"RTN","DGMTU",166,0)
 I $P(DGMTDATA,U,4)="R" S IVMQFLG=1
"RTN","DGMTU",167,0)
 ;Set flag to 1 if Means test older than 365 days and status is not
"RTN","DGMTU",168,0)
 ;NO LONGER REQUIRED and not REQUIRED.
"RTN","DGMTU",169,0)
 I $$OLD^DGMTU4($P(DGMTDATA,U,2)),($P(DGMTDATA,U,4)'="N")&($P(DGMTDATA,U,4)'="R") S IVMQFLG=1
"RTN","DGMTU",170,0)
 ;If Cat C/Pend Adj for MT, older than 365 days, agreed to pay, test
"RTN","DGMTU",171,0)
 ;date > 10/5/99 reset flag to 0 - no query is necessary.
"RTN","DGMTU",172,0)
 I ($P(DGMTDATA,U,4)="C")!($P(DGMTDATA,U,4)="P"&($P(DGMT0,U,12)'<$P(DGMT0,U,27))),$P(DGMTDATA,U,2)>2991005,$P(DGMT0,U,11)=1 S IVMQFLG=0
"RTN","DGMTU",173,0)
 ;If patient is Cat C, declined to provide income but has agreed to
"RTN","DGMTU",174,0)
 ;pay deductible, no query necessary - reset flag to 0
"RTN","DGMTU",175,0)
 I ($P(DGMTDATA,U,4)="C"),+$P(DGMT0,U,14),+$P(DGMT0,U,11) S DGRETV=0
"RTN","DGMTU",176,0)
 ;If patient is on a DOM ward, don't initiate query
"RTN","DGMTU",177,0)
 D DOM^DGMTR I $G(DGDOM) S IVMQFLG=0
"RTN","DGMTU",178,0)
 Q IVMQFLG
"RTN","DGMTU",179,0)
 ;
"RTN","DGMTU",180,0)
FUT(DFN,DGDT,DGMTYPT) ; Future Means Tests for a patient
"RTN","DGMTU",181,0)
 ; Input:
"RTN","DGMTU",182,0)
 ;       DFN      Patient IEN
"RTN","DGMTU",183,0)
 ;       DGDT     Date (Optional- default to today)
"RTN","DGMTU",184,0)
 ;       DGMTYPT  Type of Test (Optional - default to MT)
"RTN","DGMTU",185,0)
 ; Output:
"RTN","DGMTU",186,0)
 ;       If a DCD test was performed it will be returned, else the
"RTN","DGMTU",187,0)
 ;       current future dated test for the Income Year.
"RTN","DGMTU",188,0)
 ;       MT IEN^Date of Test^Status Name^Status Code^Source
"RTN","DGMTU",189,0)
 ;
"RTN","DGMTU",190,0)
 N DGIDT,Y,MTIEN,SRCE,DONE,MTNOD,ARR,LAST,TYPTST
"RTN","DGMTU",191,0)
 S:'$D(DGMTYPT) DGMTYPT=1
"RTN","DGMTU",192,0)
 S TYPTST=$S(DGMTYPT=2:"AF",1:"AE")
"RTN","DGMTU",193,0)
 S DGIDT=$S($G(DGDT)>0:DGDT,1:DT),DONE=0
"RTN","DGMTU",194,0)
 S (ARR,LAST,Y)=""
"RTN","DGMTU",195,0)
 S:$P(DGIDT,".",2) DGIDT=$P(DGIDT,".")
"RTN","DGMTU",196,0)
 F  S DGIDT=$O(^IVM(301.5,TYPTST,DFN,DGIDT)) Q:'DGIDT!(DONE)  D
"RTN","DGMTU",197,0)
 .S MTIEN=0
"RTN","DGMTU",198,0)
 .F  S MTIEN=$O(^IVM(301.5,TYPTST,DFN,DGIDT,MTIEN)) Q:'MTIEN!(DONE)  D
"RTN","DGMTU",199,0)
 ..Q:'$D(^DGMT(408.31,MTIEN,0))
"RTN","DGMTU",200,0)
 ..S MTNOD=^DGMT(408.31,MTIEN,0),SRCE=$P(MTNOD,U,23)
"RTN","DGMTU",201,0)
 ..I SRCE'=1 S DONE=1,Y=MTIEN_U_$P(MTNOD,U)_U_$$MTS^DGMTU(DFN,+$P(MTNOD,U,3))_U_$P(MTNOD,U,23) Q
"RTN","DGMTU",202,0)
 ..I 'DONE,'$D(ARR($P(MTNOD,U),MTIEN)) S ARR($P(MTNOD,U),MTIEN)=MTIEN_U_$P(MTNOD,U)_U_$$MTS^DGMTU(DFN,+$P(MTNOD,U,3))_U_$P(MTNOD,U,23)
"RTN","DGMTU",203,0)
 I 'DONE S LAST=$O(ARR(""),-1) I LAST S Y=ARR(LAST,$O(ARR(LAST,""),-1))
"RTN","DGMTU",204,0)
 Q $G(Y)
"RTN","DGRP6")
0^30^B21986606
"RTN","DGRP6",1,0)
DGRP6 ;ALB/MRL,LBD - REGISTRATION SCREEN 6/SERVICE INFORMATION ;06 JUN 88@2300
"RTN","DGRP6",2,0)
 ;;5.3;Registration;**161,247,343,397,342,451**;Aug 13, 1993
"RTN","DGRP6",3,0)
 S DGRPS=6 D H^DGRPU F I=.32,.321,.322,.36,.52,.53 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRP6",4,0)
 S (DGRPW,Z)=1 D WW^DGRPV S Z=" Service Branch",Z1=24 D WW1^DGRPV S Z="Service #",Z1=19 D WW1^DGRPV S Z="Entered",Z1=12 D WW1^DGRPV S Z="Separated",Z1=12 D WW1^DGRPV W "Discharge"
"RTN","DGRP6",5,0)
 W !?4,"--------------",?27,"---------",?46,"-------",?58,"---------",?70,"---------"
"RTN","DGRP6",6,0)
 S DGRPX=DGRP(.32),DGRPSV=4 D S I $P(DGRPX,"^",19)="Y" S DGRPSV=9 D S I $P(DGRPX,"^",20)="Y" S DGRPSV=14 D S
"RTN","DGRP6",7,0)
 S Z=2,DGRPX=DGRP(.52) D WW^DGRPV W "           POW: " S X=5,Z1=6 D YN W "From: " S X=7,Z1=13 D DAT W "To: " S X=8,Z1=12 D DAT W "War: ",$S($D(^DIC(22,+$P(DGRPX,"^",6),0)):$P(^(0),"^",2),1:"")
"RTN","DGRP6",8,0)
 S Z=3 D WW^DGRPV W "        Combat: " S X=11,Z1=6 D YN W "From: " S X=13,Z1=13 D DAT W "To: " S X=14,Z1=12 D DAT W "Loc: ",$S($D(^DIC(22,+$P(DGRPX,"^",12),0)):$P(^(0),"^",2),1:"")
"RTN","DGRP6",9,0)
 S Z=4,DGRPX=DGRP(.321) D WW^DGRPV W "       Vietnam: " S X=1,Z1=6 D YN W "From: " S X=4,Z1=13 D DAT W "To: " S X=5,X1=13 D DAT
"RTN","DGRP6",10,0)
 S Z=5 D WW^DGRPV W "      A/O Exp.: " S X=2,Z1=7 D YN W "Reg: " S X=7,Z1=11 D DAT W "Exam: " S X=9,Z1=11 D DAT W "A/O#: " S Z=$P(DGRPX,"^",10),Z1=8 D WW1^DGRPV S Z=$P(DGRPX,"^",13) W $S(Z="K":" DMZ",Z="V":"VIET",1:"")
"RTN","DGRP6",11,0)
 S Z=6 D WW^DGRPV W "      ION Rad.: " S X=3,Z1=7 D YN W "Reg: " S X=11,Z1=9 D DAT W "Method: " S X=$P(DGRPX,"^",12) W $S(X="B":"BOTH",X="T":"NUCLEAR TESTING",X="N":"NAGASAKI/HIROSHIMA",1:"")
"RTN","DGRP6",12,0)
 S DGRPX=DGRP(.322)
"RTN","DGRP6",13,0)
 F DGX=1,4,7,10 S X=DGX,Z=DGX-1/3+7 D WW^DGRPV W:DGX<10 " " W $S(DGX=1:"      Lebanon",DGX=4:"      Grenada",DGX=7:"       Panama",1:"     Gulf War"),": " S Z1=6 D YN W "From: " S X=DGX+1,Z1=13 D DAT W "To: " S X=DGX+2,Z1=12 D DAT
"RTN","DGRP6",14,0)
 S Z=11 D WW^DGRPV W "      Somalia: " S (DGX,X)=16,Z1=6 D YN W "From: " S X=17,Z1=13 D DAT W "To: " S X=18,Z1=12 D DAT
"RTN","DGRP6",15,0)
 S Z=12 D WW^DGRPV W "   Env Contam: " S X=13,Z1=7 D YN W "Reg: " S X=14,Z1=11 D DAT W "Exam: " S X=15,Z1=10 D DAT
"RTN","DGRP6",16,0)
 S Z=13 D WW^DGRPV S X=$P(DGRP(.36),"^",2)
"RTN","DGRP6",17,0)
 W "    Mil Disab: ",$S(X=0:"NO",X=1:"YES",X=2:"YES",X=3:"UNK",1:"UNANSWERED") I X]"",(X'=3) W ", Applicant is ",$S('X:"NOT ",1:""),"retired from military due to disability." I X=2 D MR
"RTN","DGRP6",18,0)
 ;W !
"RTN","DGRP6",19,0)
 S Z=14 D WW^DGRPV W "     Dent Inj: " S DGRPX=DGRP(.36),X=8,Z1=28 D YN W "Teeth Extracted: " S X=9,Z1=9 D YN S DGRPD=0 I $P(DGRPX,"^",8)="Y",$P(DGRPX,"^",9)="Y" S DGRPD=1
"RTN","DGRP6",20,0)
 I DGRPD S I1="" F I=0:0 S I=$O(^DPT(DFN,.37,I)) Q:'I  S I1=1,DGRPX=^(I,0) D DEN
"RTN","DGRP6",21,0)
 S DGRPX=DGRP(.322)
"RTN","DGRP6",22,0)
 S Z=15 D WW^DGRPV W "   Yugoslavia: " S (DGX,X)=19,Z1=6 D YN W "From: " S X=20,Z1=13 D DAT W "To: " S X=21,Z1=12 D DAT
"RTN","DGRP6",23,0)
 S Z=16 D WW^DGRPV W " Purple Heart: " S DGRPX=DGRP(.53),X=1 D YN D
"RTN","DGRP6",24,0)
 . I $P($G(DGRPX),U)="Y",($P($G(DGRPX),U,2)]"") W ?26,"PH Status: "_$S($P($G(DGRPX),U,2)="1":"Pending",$P($G(DGRPX),U,2)="2":"In Process",$P($G(DGRPX),U,2)="3":"Confirmed",1:"")
"RTN","DGRP6",25,0)
 I $P($G(DGRPX),U)="N" D
"RTN","DGRP6",26,0)
 . S DGX=$P(DGRPX,U,3)
"RTN","DGRP6",27,0)
 . S DGX=$S($G(DGX)=1:"UNACCEPTABLE DOCUMENTATION",$G(DGX)=2:"NO DOCUMENTATION REC'D",$G(DGX)=3:"ENTERED IN ERROR",$G(DGX)=4:"UNSUPPORTED PURPLE HEART",$G(DGX)=5:"VAMC",$G(DGX)=6:"UNDELIVERABLE MAIL",1:"")
"RTN","DGRP6",28,0)
 . I $G(DGX)]"" W ?26,"PH Remarks: "_$S($G(DGX)]"":$G(DGX),1:"")
"RTN","DGRP6",29,0)
 S Z=17 D WW^DGRPV W "   N/T Radium: " D     ;N/T Radium Treatment expos.
"RTN","DGRP6",30,0)
 . N DGNT S DGRPX=$$GETCUR^DGNTAPI(DFN,"DGNT") W $G(DGNT("INTRP"))
"RTN","DGRP6",31,0)
Q K DGRPD,DGRPSV
"RTN","DGRP6",32,0)
 G ^DGRPP
"RTN","DGRP6",33,0)
YN S Z=$S($P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNK",1:"") D WW1^DGRPV Q
"RTN","DGRP6",34,0)
DAT S Z=$P(DGRPX,"^",X) I Z']"" S Z=""
"RTN","DGRP6",35,0)
 E  S Z=$$FMTE^XLFDT(Z,"5DZ")
"RTN","DGRP6",36,0)
 D WW1^DGRPV Q
"RTN","DGRP6",37,0)
DEN W !?3," Trt Date: " S X=1,Z1=10 D DAT W "Cond.: ",$E($P(DGRPX,"^",2),1,45) Q
"RTN","DGRP6",38,0)
S N DGRPSB S DGRPSB=+$P(DGRPX,U,DGRPSV+1)  ;Service Branch
"RTN","DGRP6",39,0)
 W !?4,$S($D(^DIC(23,DGRPSB,0)):$E($P(^(0),"^",1),1,15),1:DGRPU) W:$$FV^DGRPMS(DGRPSB)=1 ?20,"("_$P(DGRP(.321),U,14)_")"
"RTN","DGRP6",40,0)
 W ?27,$S($P(DGRPX,"^",DGRPSV+4)]"":$P(DGRPX,"^",DGRPSV+4),1:DGRPU)
"RTN","DGRP6",41,0)
 F I=2,3 S X=$P(DGRPX,"^",DGRPSV+I),X=$S(X]"":$$FMTE^XLFDT(X,"5DZ"),1:"UNKNOWN") W ?$S(I=2:46,1:58),X
"RTN","DGRP6",42,0)
 W ?70,$S($D(^DIC(25,+$P(DGRPX,"^",DGRPSV),0)):$E($P(^(0),"^",1),1,9),1:"UNKNOWN") Q
"RTN","DGRP6",43,0)
MR W !?19,"Receiving Military retirement in lieu of VA Compensation." Q
"RTN","DGRPC")
0^38^B20975204
"RTN","DGRPC",1,0)
DGRPC ;ALB/MRL/PJR - CHECK CONSISTENCY OF PATIENT DATA ; 4/19/04 10:24am
"RTN","DGRPC",2,0)
 ;;5.3;Registration;**108,121,314,301,470,489,505,451**;Aug 13, 1993
"RTN","DGRPC",3,0)
 ;
"RTN","DGRPC",4,0)
 ;linetags in routines correspond to IEN of file 38.6
"RTN","DGRPC",5,0)
 ;
"RTN","DGRPC",6,0)
 ;variables:  DGVT = 1 if VETERAN? = YES, 0 if NO
"RTN","DGRPC",7,0)
 ;            DGSC = 1 if SC? = YES, 0 if NO
"RTN","DGRPC",8,0)
 ;            DGCD = 0 node of file EC file (#8)
"RTN","DGRPC",9,0)
 ;        DGRPCOLD = old inconsistencies for pt (separated by ,s)
"RTN","DGRPC",10,0)
 ;           DGCHK = #s to check (separated by ,s)
"RTN","DGRPC",11,0)
 ;           DGLST = next # to check
"RTN","DGRPC",12,0)
 ;            DGER = inconsistencies found (separated by ,s)
"RTN","DGRPC",13,0)
 ;           DGNCK = 1 if missing key elig data...can't process further
"RTN","DGRPC",14,0)
 ;
"RTN","DGRPC",15,0)
 N ANYMSE,CONARR,CONCHK,CONERR,CONSPEC,LOC
"RTN","DGRPC",16,0)
 N MSECHK,MSESET,MSERR,MSDATERR,RANGE,RANSET
"RTN","DGRPC",17,0)
 D ON I $S(('$D(DFN)#2):1,'$D(^DPT(DFN,0)):1,DGER:1,1:0) G KVAR^DGRPCE:DGER
"RTN","DGRPC",18,0)
EN S:'$D(DGEDCN)#2 DGEDCN=0 I DGEDCN W !!,"Checking data for consistency..."
"RTN","DGRPC",19,0)
 D START:DGEDCN
"RTN","DGRPC",20,0)
 F I=0,.13,.141,.22,.24,.3,.31,.311,.32,.321,.322,.33,.35,.36,.362,.38,.39,.52,.53,"TYPE","VET" S DGP(I)=$G(^DPT(DFN,I))
"RTN","DGRPC",21,0)
 ;get old inconsistencies
"RTN","DGRPC",22,0)
 S DGRPCOLD="," I $D(^DGIN(38.5,DFN)) F I=0:0 S I=$O(^DGIN(38.5,DFN,"I",I)) Q:'I  S DGRPCOLD=DGRPCOLD_I_","
"RTN","DGRPC",23,0)
 ;find consistencies to check/not check
"RTN","DGRPC",24,0)
 S DGCHK="," F I=0:0 S I=$O(^DGIN(38.6,I)) Q:'I  I $D(^(I,0)),$S(I=2:0,I=51:0,I=9:1,I=10:1,I=13:1,I=14:1,I=22:1,I=52:1,I=53:1,'$P(^(0),"^",5):1,1:0),I'=99 S DGCHK=DGCHK_I_","
"RTN","DGRPC",25,0)
 S DGVT=$S(DGP("VET")="Y":1,1:0),DGSC=$S($P(DGP(.3),"^",1)="Y":1,1:0),DGCD=$S($D(^DIC(8,+DGP(.36),0)):^(0),1:""),(DGCT,DGER,DGNCK)="" I 'DGVT,$D(^DG(391,+DGP("TYPE"),0)),$P(^(0),"^",2) S DGVT=2
"RTN","DGRPC",26,0)
 S DGLST=+$P(DGCHK,",",2) G @DGLST
"RTN","DGRPC",27,0)
1 S DGD=$P(DGP(0),"^",1) I DGD?1L.E!(DGD?.E1L.E)!(DGD="") S X=1 D COMB,NEXT I +DGLST'=2 G @DGLST
"RTN","DGRPC",28,0)
 S I1=0 F I=1:1:$L(DGD) Q:I1  S J=$E(DGD,I) I J?1NP,$A(J)>32,J'=",",J'="-",J'=".",J'="'" S I1=1
"RTN","DGRPC",29,0)
 I I1 S X=1 D COMB
"RTN","DGRPC",30,0)
 D NEXT I +DGLST'=2 G @DGLST
"RTN","DGRPC",31,0)
2 S I1=0 F I=0:0 S I=$O(^DPT(DFN,.01,I)) Q:'I!(I1)  I $P(^(I,0),"^",1)'?1A.E S I1=1
"RTN","DGRPC",32,0)
 I I1 S X=2 D COMB
"RTN","DGRPC",33,0)
 D NEXT I +DGLST>7!('DGLST) G @DGLST
"RTN","DGRPC",34,0)
3 ;
"RTN","DGRPC",35,0)
4 ;
"RTN","DGRPC",36,0)
5 ;
"RTN","DGRPC",37,0)
6 ;
"RTN","DGRPC",38,0)
7 F I=2,3,5,8,9 I $P(DGP(0),"^",I)="" S X=$S(I=2:3,I=3:4,I=5:5,I=8:6,1:7) D COMB:DGCHK[(","_X_",")
"RTN","DGRPC",39,0)
 S DGLST=7 G:DGCHK'[",7," FIND^DGRPC2 D NEXT I +DGLST'=8 G @DGLST
"RTN","DGRPC",40,0)
8 S I1=0,DGD=$G(^DPT(DFN,.11)) F I=1,4,5,6,7 Q:I1  I $P(DGD,"^",I)="" S I1=1
"RTN","DGRPC",41,0)
 I I1 S X=8 D COMB
"RTN","DGRPC",42,0)
 D NEXT I +DGLST'=9 G @DGLST
"RTN","DGRPC",43,0)
9 I DGP("VET")="" S X=9,DGNCK=1 D COMB
"RTN","DGRPC",44,0)
 D NEXT I +DGLST'=10 G @DGLST
"RTN","DGRPC",45,0)
10 I $P(DGP(.3),"^",1)="" S X=10,DGNCK=1 D COMB
"RTN","DGRPC",46,0)
 D NEXT I +DGLST'=11 G @DGLST
"RTN","DGRPC",47,0)
11 I 'DGVT,DGSC S X=11 D COMB
"RTN","DGRPC",48,0)
 D NEXT I +DGLST'=12 G @DGLST
"RTN","DGRPC",49,0)
12 I DGSC,DGVT,$P(DGP(.3),"^",2)="" S X=12 D COMB
"RTN","DGRPC",50,0)
 D NEXT I +DGLST'=13 G @DGLST
"RTN","DGRPC",51,0)
13 I '$D(^DIC(21,+$P(DGP(.32),"^",3),0)) S X=13,DGNCK=1 D COMB
"RTN","DGRPC",52,0)
 D NEXT I +DGLST'=14 G @DGLST
"RTN","DGRPC",53,0)
14 I $P(DGCD,"^",1)="" S X=14,DGNCK=1 D COMB
"RTN","DGRPC",54,0)
 ;
"RTN","DGRPC",55,0)
 ;Check Patient Eligibilities multiple if Primary Elig Code defined
"RTN","DGRPC",56,0)
 I DGP(.36),'$D(^DPT(DFN,"E",+DGP(.36),0)) D PRI^VADPT60 ;5.3*301
"RTN","DGRPC",57,0)
 ;
"RTN","DGRPC",58,0)
 D NEXT I +DGLST'=15 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",59,0)
15 I $P($G(^DPT(DFN,.15)),"^",2)]"",$P(DGP(.3),"^",7)="" S X=15 D COMB
"RTN","DGRPC",60,0)
 D NEXT I +DGLST'=16 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",61,0)
16 D H^DGUTL I +DGP(.35)>DGTIME S X=16 D COMB
"RTN","DGRPC",62,0)
 D NEXT I +DGLST'=17 G FIND^DGRPC2:+DGLST=35,@DGLST
"RTN","DGRPC",63,0)
17 K DGDATE,DGTIME S I1=0 I +DGP(.35) S DGD=DT F I=0:0 S DGD=$O(^DPT(DFN,"S",DGD)) Q:DGD=""!(I1)  S X=$P(^(DGD,0),"^",2) I X=""!(X="I") S I1=1
"RTN","DGRPC",64,0)
 I I1 S X=17 D COMB
"RTN","DGRPC",65,0)
 ;
"RTN","DGRPC",66,0)
END ; end of routine...find next check to execute (or goto end)
"RTN","DGRPC",67,0)
 S:DGNCK DGLST=35 G:DGCHK'[",35,"&(DGNCK) FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC",68,0)
 ;
"RTN","DGRPC",69,0)
COMB ;record inconsistency
"RTN","DGRPC",70,0)
 S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC",71,0)
 Q
"RTN","DGRPC",72,0)
 ;
"RTN","DGRPC",73,0)
NEXT ; find the next consistency check to check (goto end if can't process further)
"RTN","DGRPC",74,0)
 S I=$F(DGCHK,(","_DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,DGLST<18 Q
"RTN","DGRPC",75,0)
 I +DGLST,DGNCK,+DGLST>17,+DGLST<36 S DGLST=35 Q:DGCHK'[",35,"  G NEXT
"RTN","DGRPC",76,0)
 S:'+DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC"_$S(+DGLST<43:1,+DGLST<79:2,1:3)
"RTN","DGRPC",77,0)
 Q
"RTN","DGRPC",78,0)
 ;
"RTN","DGRPC",79,0)
PAT ;check inconsistencies for a selected patient
"RTN","DGRPC",80,0)
 D ON G KVAR^DGRPCE:DGER W !! S DIC="^DPT(",DIC(0)="AEQMZ",DIC("A")="Check consistency for which PATIENT: " D ^DIC K DIC G KVAR^DGRPCE:Y'>0 S DFN=+Y,DGEDCN=1 D DGRPC G PAT
"RTN","DGRPC",81,0)
 ;
"RTN","DGRPC",82,0)
START ;record start time for checker
"RTN","DGRPC",83,0)
 S DGSTART=$H Q
"RTN","DGRPC",84,0)
 ;
"RTN","DGRPC",85,0)
TIME ;record end time for checker
"RTN","DGRPC",86,0)
 Q:'$D(DGSTART)#2  S DGEND=$H,X=$P(DGSTART,",",2),X1=$P(DGEND,",",2)
"RTN","DGRPC",87,0)
 I +DGSTART=+DGEND S DGTIME=X1-X
"RTN","DGRPC",88,0)
 E  S DGTIME=(5184000-X)+X1
"RTN","DGRPC",89,0)
 I $S(DGCT:0,DGCON=1:1,1:0) G TIMEQ
"RTN","DGRPC",90,0)
 W !!,"===> ",$S(DGCT:DGCT,DGCON<2:"No",1:"All")," inconsistenc",$S(DGCT=1:"y",1:"ies")," ",$S('DGCON:"found",DGCON=1:"filed",1:"removed")," in ",DGTIME," second",$S(DGTIME=1:"",1:"s"),"..." H 1
"RTN","DGRPC",91,0)
TIMEQ K DGSTART,DGEND,DGTIME,X,X1,DGCON Q
"RTN","DGRPC",92,0)
 ;
"RTN","DGRPC",93,0)
ON ;check if checker is on
"RTN","DGRPC",94,0)
 S DGER=0 I $S('$D(^DG(43,1,0)):1,'$P(^(0),"^",37):1,1:0) S DGER=1
"RTN","DGRPC",95,0)
 S:'$D(DGEDCN) DGEDCN=0 W:DGER !!,"CONSISTENCY CHECKER TURNED OFF!!",$C(7) Q
"RTN","DGRPC1")
0^16^B13069220
"RTN","DGRPC1",1,0)
DGRPC1 ;ALB/MRL/PJR - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 5/4/04 7:57pm
"RTN","DGRPC1",2,0)
 ;;5.3;Registration;**314,342,451**;Aug 13, 1993
"RTN","DGRPC1",3,0)
18 ;
"RTN","DGRPC1",4,0)
19 S X=$S($P(DGCD,"^",5)="Y":1,1:0) I $S(X=DGVT:0,DGVT=2&('X):0,1:1) S X=$S(DGVT:18,1:19) I DGCHK[(","_X_",") D COMB
"RTN","DGRPC1",5,0)
 S:'DGVT DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&'DGVT FIND^DGRPC2 D NEXT I DGLST>20!('DGLST) G @DGLST
"RTN","DGRPC1",6,0)
20 I DGVT,DGSC S DGD=$S(+$P(DGP(.3),"^",2)>49:1,1:3) I $P(DGCD,"^",4)'=DGD!($P(DGCD,"^",5)="N") S X=20 D COMB
"RTN","DGRPC1",7,0)
 S:DGSC DGLST=$S(+DGLST>22:+DGLST,1:22) G:DGCHK'[",22,"&DGSC FIND^DGRPC2 D NEXT I +DGLST'=21 G @DGLST
"RTN","DGRPC1",8,0)
21 ; off
"RTN","DGRPC1",9,0)
 D NEXT I +DGLST'=22 G @DGLST
"RTN","DGRPC1",10,0)
22 I $P(DGP("VET"),"^",1)'="Y" G 221
"RTN","DGRPC1",11,0)
 S DGSTR="^"
"RTN","DGRPC1",12,0)
 I DGSC S DGSTR=DGSTR_$S($P(DGP(.3),"^",2)<50:3,1:1)_"^" G 220 ;only appropriate sc type
"RTN","DGRPC1",13,0)
 I $P(DGP(.52),"^",5)="Y" S DGSTR=DGSTR_"18^" G 220 ;pow only
"RTN","DGRPC1",14,0)
 I $P(DGP(.53),"^",1)="Y" S DGSTR=DGSTR_"22^" G 220 ;Purple Heart
"RTN","DGRPC1",15,0)
 I $P(DGP(0),"^",3)'>2061231 S DGSTR=DGSTR_"16^" ;mex border
"RTN","DGRPC1",16,0)
 I $P(DGP(0),"^",3)'>2071231 S DGSTR=DGSTR_"17^" ;allow WWI
"RTN","DGRPC1",17,0)
 S DGFL=0 I $P(DGP(.362),"^",12)="Y" S DGSTR=DGSTR_"2^",DGFL=1 ; a&a
"RTN","DGRPC1",18,0)
 I $P(DGP(.362),"^",13)="Y" S DGSTR=DGSTR_"15^",DGFL=1 ; hb
"RTN","DGRPC1",19,0)
 I DGFL=1 G 220
"RTN","DGRPC1",20,0)
 I $P(DGP(.362),"^",14)="Y" S DGSTR=DGSTR_"4^" G 220 ;nsc, va pen
"RTN","DGRPC1",21,0)
 S DGSTR=DGSTR_"5^" ;nsc
"RTN","DGRPC1",22,0)
220 I DGSTR'[("^"_$P(DGCD,"^",9)_"^") S X=22 D COMB
"RTN","DGRPC1",23,0)
 K DGSTR
"RTN","DGRPC1",24,0)
221 D NEXT I +DGLST'=23 G @DGLST
"RTN","DGRPC1",25,0)
23 S DGD=$G(^DPT(DFN,.361)) I $P(DGD,"^",1)="V",$P(DGD,"^",2)="" S X=23 D COMB
"RTN","DGRPC1",26,0)
 D NEXT I +DGLST'=24 G @DGLST
"RTN","DGRPC1",27,0)
24 I '$D(^DIC(21,+$P(DGP(.32),"^",3),"E",+$P(DGP(.36),"^",1))) S X=24 D COMB
"RTN","DGRPC1",28,0)
 D NEXT I +DGLST'=25 G @DGLST
"RTN","DGRPC1",29,0)
25 I DGVT,$P(DGP(.321),"^",2)="Y",$P($G(^DIC(21,+$P(DGP(.32),"^",3),0)),"^",3)'=7 S X=25 D COMB
"RTN","DGRPC1",30,0)
 S:DGVT DGLST=35 G:DGCHK'[",35,"&DGVT FIND^DGRPC2 D NEXT I +DGLST'=26 G @DGLST
"RTN","DGRPC1",31,0)
26 ;off
"RTN","DGRPC1",32,0)
27 ;off
"RTN","DGRPC1",33,0)
28 ;off
"RTN","DGRPC1",34,0)
 D NEXT I +DGLST>32!('DGLST) G @DGLST
"RTN","DGRPC1",35,0)
29 ;
"RTN","DGRPC1",36,0)
30 ;
"RTN","DGRPC1",37,0)
31 ;
"RTN","DGRPC1",38,0)
 ;
"RTN","DGRPC1",39,0)
32 I 'DGVT S DGD=DGP(.362),X=28 F I=12,13,14,16 S X=X+1 I $P(DGD,"^",I)="Y",(DGCHK[(","_X_",")) D COMB
"RTN","DGRPC1",40,0)
 S DGLST=32 G:DGCHK'[",32," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",41,0)
33 ;off
"RTN","DGRPC1",42,0)
 S DGLST=33 G:DGCHK'[",33," FIND^DGRPC2 D NEXT I +DGLST>35!('DGLST) G @DGLST
"RTN","DGRPC1",43,0)
 ;
"RTN","DGRPC1",44,0)
34 I 'DGVT,$P(DGP(.52),"^",5)="Y",DGCHK[(","_34_",") D COMB S DGLST=34 G:DGCHK'[",34," FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",45,0)
35 ;off
"RTN","DGRPC1",46,0)
 S DGLST=35 G:DGCHK'[",35," FIND^DGRPC2 D NEXT I +DGLST'=36 G @DGLST
"RTN","DGRPC1",47,0)
36 I '$D(^DG(391,+DGP("TYPE"),0)) S X=36 D COMB
"RTN","DGRPC1",48,0)
 ;;S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",49,0)
 D NEXT I +DGLST>40!('DGLST) G @DGLST
"RTN","DGRPC1",50,0)
37 ;
"RTN","DGRPC1",51,0)
38 ;
"RTN","DGRPC1",52,0)
39 ;
"RTN","DGRPC1",53,0)
40 F I=5,11 S I2=0,X=$S(I=5:37,1:39) I $P(DGP(.52),"^",I)="Y" D PC
"RTN","DGRPC1",54,0)
 ;;
"RTN","DGRPC1",55,0)
41 ;; Inconsistencies 41 and 42 are superseded by 72 through 82
"RTN","DGRPC1",56,0)
42 ;;
"RTN","DGRPC1",57,0)
 ;;
"RTN","DGRPC1",58,0)
 S DGLST=42 S:'DGVT DGLST=48 G:DGCHK'[",48,"&'DGVT FIND^DGRPC2 D NEXT G @DGLST
"RTN","DGRPC1",59,0)
 ;
"RTN","DGRPC1",60,0)
PC I DGCHK[(","_X_",") F I1=I+1:1:I+3 I $P(DGP(.52),"^",I1)="",'I2 D COMB S I2=1
"RTN","DGRPC1",61,0)
 I DGCHK[(","_X_",") F I1=I+2:1:I+3 I $E($P(DGP(.52),"^",I1),4,7)="0000",'I2 D COMB S I2=1
"RTN","DGRPC1",62,0)
 S X=X+1 I DGCHK[(","_X_","),$P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),'$$B4^DGRPDT($P(DGP(.52),"^",I+2),$P(DGP(.52),"^",I+3),1) D COMB
"RTN","DGRPC1",63,0)
 Q
"RTN","DGRPC1",64,0)
 ;
"RTN","DGRPC1",65,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC1",66,0)
 Q
"RTN","DGRPC1",67,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<41 Q
"RTN","DGRPC1",68,0)
 I +DGLST,+DGLST<79 S DGLST=DGLST_"^DGRPC2" Q
"RTN","DGRPC1",69,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC1",70,0)
 Q
"RTN","DGRPC2")
0^17^B60630120
"RTN","DGRPC2",1,0)
DGRPC2 ;ALB/MRL/SCK/PJR - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 4/19/04 10:24am
"RTN","DGRPC2",2,0)
 ;;5.3;Registration;**45,69,108,121,205,218,342,387,470,467,489,505,507,528,451**;Aug 13, 1993
"RTN","DGRPC2",3,0)
 ;
"RTN","DGRPC2",4,0)
43 ;off
"RTN","DGRPC2",5,0)
44 ;off
"RTN","DGRPC2",6,0)
45 ;off
"RTN","DGRPC2",7,0)
46 ;off
"RTN","DGRPC2",8,0)
47 ;off
"RTN","DGRPC2",9,0)
 S DGLST=$S(DGCHK[",47,":47,DGCHK[",46,":46,DGCHK[",45,":45,DGCHK[",44,":44,1:DGLST)
"RTN","DGRPC2",10,0)
 D NEXT G @DGLST
"RTN","DGRPC2",11,0)
48 I DGVT S DGD=DGP(.362) I DGCHK[(",48,"),($P(DGD,"^",17)="Y"),($P(DGD,"^",6)="") S X=48 D COMB
"RTN","DGRPC2",12,0)
 D NEXT G @DGLST
"RTN","DGRPC2",13,0)
49 ;
"RTN","DGRPC2",14,0)
50 ; insurance checks
"RTN","DGRPC2",15,0)
 I DGCHK[",49,"!(DGCHK[",50,") D  S DGLST=$S(DGCHK["50":50,1:49)
"RTN","DGRPC2",16,0)
 . N COV,INS,X
"RTN","DGRPC2",17,0)
 . S X=0,COV=$S($P(DGP(.31),"^",11)="Y":1,1:0)
"RTN","DGRPC2",18,0)
 . D ALL^IBCNS1(DFN,"INS",2,DT)
"RTN","DGRPC2",19,0)
 . I COV,'$G(INS(0)) S X=49 ; yes, but none
"RTN","DGRPC2",20,0)
 . I 'COV,$G(INS(0)) S X=50 ; not yes, but some
"RTN","DGRPC2",21,0)
 . I DGCHK[(","_X_",") D COMB
"RTN","DGRPC2",22,0)
 D NEXT G @DGLST
"RTN","DGRPC2",23,0)
51 D NEXT G @DGLST ; 51 disabled
"RTN","DGRPC2",24,0)
 S X=$S($D(^DIC(21,+$P(DGP(.32),"^",3),0)):$P(^(0),"^",3),1:"")
"RTN","DGRPC2",25,0)
 I X="Z"&($P(DGP(.32),"^",5)'=7)&($P(DGP(.32),"^",10)'=7)&($P(DGP(.32),"^",15)'=7)!($P(DGP(.32),"^",5)=7&(X'="Z")) S X=51 D COMB
"RTN","DGRPC2",26,0)
 ;
"RTN","DGRPC2",27,0)
52 I $P(DGP(.31),"^",11)']"" S X=52 D COMB ;automatically on
"RTN","DGRPC2",28,0)
 D NEXT G @DGLST
"RTN","DGRPC2",29,0)
53 I $P(DGP(.311),"^",15)']"" S X=53 D COMB ;automatically on
"RTN","DGRPC2",30,0)
 D NEXT G @DGLST
"RTN","DGRPC2",31,0)
54 ;
"RTN","DGRPC2",32,0)
55 ;BELOW IS USED BY BOTH 54 & 55
"RTN","DGRPC2",33,0)
 S DGLST=$S(DGCHK["55":55,1:54)
"RTN","DGRPC2",34,0)
 I $G(^DPT(DFN,.35)),(^(.35)<+($E(DT,1,3)_"0000")) D NEXT G @DGLST ; patient died before current year
"RTN","DGRPC2",35,0)
 N DGE S DGE=+$O(^DIC(8.1,"B","SERVICE CONNECTED 50% to 100%",0))
"RTN","DGRPC2",36,0)
 I $P($G(^DPT(DFN,.3)),U,2)'<50!($P($G(^DIC(8,+$G(^DPT(DFN,.36)),0)),U,9)=DGE) D NEXT G @DGLST ;50-100% SC
"RTN","DGRPC2",37,0)
 S DGPTYP=$G(^DG(391,+DGP("TYPE"),"S")),DGISYR=$E(DT,1,3)-1_"0000" I '$P(DGPTYP,"^",8)&('$P(DGPTYP,"^",9)) K DGPTYP,DGISYR D NEXT G @DGLST ; screens 8 and 9 off
"RTN","DGRPC2",38,0)
 D ALL^DGMTU21(DFN,"VSD",DT,"IP")
"RTN","DGRPC2",39,0)
 I '$P(DGPTYP,"^",8)!(DGCHK'["54") G JUST55 ; screen 8 off OR JUST 55 IN CHK
"RTN","DGRPC2",40,0)
 S DGFL=0 I $D(DGREL("S")),($$SSN^DGMTU1(+DGREL("S"))']"") S DGFL=1
"RTN","DGRPC2",41,0)
 I 'DGFL F I=0:0 S I=$O(DGREL("D",I)) Q:'I  I $$SSN^DGMTU1(+DGREL("D",I))']"" S DGFL=1 Q
"RTN","DGRPC2",42,0)
 I DGFL S X=54 D COMB
"RTN","DGRPC2",43,0)
JUST55 I DGCHK'["55" D NEXT G @DGLST
"RTN","DGRPC2",44,0)
 S DGLST=55
"RTN","DGRPC2",45,0)
 I '$P(DGPTYP,"^",9) D NEXT G @DGLST ; screen 9 off
"RTN","DGRPC2",46,0)
 D TOT^DGRP9(.DGINC) S DGFL=0
"RTN","DGRPC2",47,0)
 F DGD="V","S","D" I $D(DGTOT(DGD)) F I=8:1:17 I $P(DGTOT(DGD),"^",I)]"" S DGFL=1 Q
"RTN","DGRPC2",48,0)
 I 'DGFL N DGAPD,DG55 D  I 'DGAPD&('DG55)  S X=55 D COMB
"RTN","DGRPC2",49,0)
 . S DGAPD=+$$LST^DGMTU(DFN),DGAPD=+$P($G(^DGMT(408.31,+DGAPD,0)),U,11)
"RTN","DGRPC2",50,0)
 . S DG55=$$CHECK55(DFN) ; **507, Additional Income Checks
"RTN","DGRPC2",51,0)
 D NEXT G @DGLST
"RTN","DGRPC2",52,0)
56 I DGVT S DGD=DGP(.3) I DGCHK[(",56,"),($P(DGD,"^",11)="Y"),($P(DGP(.362),"^",20)="") S X=56 D COMB
"RTN","DGRPC2",53,0)
 D NEXT G END^DGRPC3:$S('+DGLST:1,+DGLST=99:1,1:0)
"RTN","DGRPC2",54,0)
57 I $P(DGP(.38),U,1) D
"RTN","DGRPC2",55,0)
 .N X1,X2
"RTN","DGRPC2",56,0)
 .S X1=$P(DGP(.38),U,2)
"RTN","DGRPC2",57,0)
 .S X=$P($G(^DG(43,1,0)),U,46) S X2=$S(X:X,1:365) D C^%DTC
"RTN","DGRPC2",58,0)
 .I X<DT S X=57 D COMB
"RTN","DGRPC2",59,0)
 D NEXT G @DGLST
"RTN","DGRPC2",60,0)
58 ;58 - EC Claim - No Gulf/Som Svc
"RTN","DGRPC2",61,0)
 I $P(DGP(.322),U,13)="Y" D
"RTN","DGRPC2",62,0)
 . I $P(DGP(.322),U,10)="Y"!($P(DGP(.322),U,16)="Y") Q
"RTN","DGRPC2",63,0)
 . S X=58 D COMB
"RTN","DGRPC2",64,0)
 D NEXT G @DGLST
"RTN","DGRPC2",65,0)
59 ;59 - incomplete Catastrophic Disability info
"RTN","DGRPC2",66,0)
 I $$HASCAT^DGENCDA(DFN) D
"RTN","DGRPC2",67,0)
 .I '$P(DGP(.39),"^",2) S X=59 D COMB
"RTN","DGRPC2",68,0)
 D NEXT G @DGLST
"RTN","DGRPC2",69,0)
60 ;60 - Location of agent orange exposure unanswered
"RTN","DGRPC2",70,0)
 I DGVT,$P(DGP(.321),"^",2)="Y",$P(DGP(.321),"^",13)="" S X=60 D COMB
"RTN","DGRPC2",71,0)
 D NEXT G @DGLST
"RTN","DGRPC2",72,0)
61 ;61 - Incomplete Phone Number
"RTN","DGRPC2",73,0)
 I $P(DGP(.13),"^")=""!($P(DGP(.13),"^",2)="") S X=61 D COMB
"RTN","DGRPC2",74,0)
 D NEXT G @DGLST
"RTN","DGRPC2",75,0)
62 ;62 - Missing Emergency Contact Name
"RTN","DGRPC2",76,0)
 I $P(DGP(.33),"^")="" S X=62 D COMB
"RTN","DGRPC2",77,0)
 D NEXT G @DGLST
"RTN","DGRPC2",78,0)
63 ;Confidential Address check
"RTN","DGRPC2",79,0)
 I $P($$CAACT^DGRPCADD(DFN),U) D
"RTN","DGRPC2",80,0)
 .N DGI,DGERR
"RTN","DGRPC2",81,0)
 .S DGERR=0
"RTN","DGRPC2",82,0)
 .F DGI=1,4,5,6 Q:DGERR  I $P(DGP(.141),U,DGI)="" S DGERR=1
"RTN","DGRPC2",83,0)
 .I DGERR S X=63 D COMB
"RTN","DGRPC2",84,0)
 D NEXT G @DGLST
"RTN","DGRPC2",85,0)
64 ;64 - Place of Birth City/State Missing ;**505
"RTN","DGRPC2",86,0)
 I $P(DGP(0),"^",11)=""!($P(DGP(0),"^",12)="") S X=64 D COMB
"RTN","DGRPC2",87,0)
 D NEXT G @DGLST
"RTN","DGRPC2",88,0)
65 ;65 - Mother's Maiden Name Missing ;**505
"RTN","DGRPC2",89,0)
 I $P(DGP(.24),"^",3)="" S X=65 D COMB
"RTN","DGRPC2",90,0)
 D NEXT G @DGLST
"RTN","DGRPC2",91,0)
66 ;66 - Pseudo SSN in use ;**505
"RTN","DGRPC2",92,0)
 I $P(DGP(0),"^",9)["P" S X=66 D COMB
"RTN","DGRPC2",93,0)
 D NEXT G @DGLST
"RTN","DGRPC2",94,0)
67 ;67 - Serv Sep Date [Last] missing or imprecise, patch 528
"RTN","DGRPC2",95,0)
 N DGG
"RTN","DGRPC2",96,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",97,0)
 I $G(DGG)["A"!($G(DGG)["F") S X=67 D COMB
"RTN","DGRPC2",98,0)
 D NEXT G @DGLST
"RTN","DGRPC2",99,0)
68 ;used for 68-71, for Combat Vet, DG*5.3*528
"RTN","DGRPC2",100,0)
69 ;
"RTN","DGRPC2",101,0)
70 ;
"RTN","DGRPC2",102,0)
71 ;
"RTN","DGRPC2",103,0)
 ;68 - Combat To Date missing or imprecise, patch 528
"RTN","DGRPC2",104,0)
 ;69 - Yugoslavia To Date missing or imprecise, patch 528
"RTN","DGRPC2",105,0)
 ;70 - Somalia To Date missing or imprecise, patch 528
"RTN","DGRPC2",106,0)
 ;71 - Persian Gulf To Date missing or imprecise, patch 528
"RTN","DGRPC2",107,0)
 N DGG
"RTN","DGRPC2",108,0)
 S DGG=$$CVELIG^DGCV(DFN)
"RTN","DGRPC2",109,0)
 I DGG["B"!(DGG["G") S X=68 D COMB
"RTN","DGRPC2",110,0)
 I DGG["C"!(DGG["H") S X=69 D COMB
"RTN","DGRPC2",111,0)
 I DGG["D"!(DGG["I") S X=70 D COMB
"RTN","DGRPC2",112,0)
 I DGG["E"!(DGG["J") S X=71 D COMB
"RTN","DGRPC2",113,0)
 S DGLST=71
"RTN","DGRPC2",114,0)
 D NEXT G @DGLST
"RTN","DGRPC2",115,0)
72 ;; MSE - Required Fields
"RTN","DGRPC2",116,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSERR S X=72 D COMB
"RTN","DGRPC2",117,0)
 D NEXT G @DGLST
"RTN","DGRPC2",118,0)
73 ;; An MSE FROM date precedes an MSE TO date
"RTN","DGRPC2",119,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSDATERR D NEXT G @DGLST
"RTN","DGRPC2",120,0)
 F I1=6,11,16 I '$$B4^DGRPDT($P(DGP(.32),"^",I1),$P(DGP(.32),"^",I1+1),1) S X=73 D COMB S (MSERR,MSDATERR)=1 Q
"RTN","DGRPC2",121,0)
 D NEXT G @DGLST
"RTN","DGRPC2",122,0)
74 ;; Conflict Date Missing or Incomplete
"RTN","DGRPC2",123,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK I CONERR S X=74 D COMB
"RTN","DGRPC2",124,0)
 D NEXT G @DGLST
"RTN","DGRPC2",125,0)
75 ;; Conflict TO date precedes FROM date
"RTN","DGRPC2",126,0)
76 ;; Conflict Date out of range for conflict
"RTN","DGRPC2",127,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK
"RTN","DGRPC2",128,0)
 S LOC="",(I5,I6)=0 F I1=1:1 S LOC=$O(CONSPEC(LOC)) Q:LOC=""  I CONARR(LOC)=1 D
"RTN","DGRPC2",129,0)
 .N FROMDAT,FROMPC,TODAT,TOPC,NODE,DATA
"RTN","DGRPC2",130,0)
 .S DATA=CONSPEC(LOC)
"RTN","DGRPC2",131,0)
 .S NODE=$P(DATA,",",1),FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGRPC2",132,0)
 .S FROMDAT=$P(DGP(NODE),"^",FROMPC),TODAT=$P(DGP(NODE),"^",TOPC)
"RTN","DGRPC2",133,0)
 .I '$$B4^DGRPDT(FROMDAT,TODAT,1) S X=75 D COMB:'I5&(DGCHK[(",75,")) S CONARR(LOC)=2,I5=1 Q
"RTN","DGRPC2",134,0)
 .I DGCHK'[(",76,") Q
"RTN","DGRPC2",135,0)
 .S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",136,0)
 .I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),FROMDAT,TODAT) S X=76 D COMB:'I6 S CONARR(LOC)=2,I6=1
"RTN","DGRPC2",137,0)
 .Q
"RTN","DGRPC2",138,0)
 S DGLST=76 D NEXT G @DGLST
"RTN","DGRPC2",139,0)
77 ;; Date out of range for POW Location
"RTN","DGRPC2",140,0)
 S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",141,0)
 ;; Don't check if POW Data Incomplete or if POW TO precedes FROM
"RTN","DGRPC2",142,0)
 I ((","_DGER_",")[(",37,"))!((","_DGER_",")[(",38,")) D NEXT G @DGLST
"RTN","DGRPC2",143,0)
 I $P(DGP(.52),"^",5)'="Y" D NEXT G @DGLST ;; Don't check if no POW
"RTN","DGRPC2",144,0)
 S LOC=$$COMPOW^DGRPMS($P(DGP(.52),"^",6)) I LOC="" D NEXT G @DGLST
"RTN","DGRPC2",145,0)
 I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),$P(DGP(.52),"^",7),$P(DGP(.52),"^",8)) S X=77 D COMB
"RTN","DGRPC2",146,0)
 D NEXT G @DGLST
"RTN","DGRPC2",147,0)
78 ;; Date out of range for Combat Location
"RTN","DGRPC2",148,0)
 S:'$G(RANSET) RANSET=$$RANGE^DGMSCK
"RTN","DGRPC2",149,0)
 ;; Don't check if Combat Data Incomplete or if Combat TO precedes FROM
"RTN","DGRPC2",150,0)
 I ((","_DGER_",")[(",39,"))!((","_DGER_",")[(",40,")) D NEXT G @DGLST
"RTN","DGRPC2",151,0)
 I $P(DGP(.52),"^",11)'="Y" D NEXT G @DGLST ;; Don't check if no COMBAT
"RTN","DGRPC2",152,0)
 S LOC=$$COMPOW^DGRPMS($P(DGP(.52),"^",12)) I LOC="" D NEXT G @DGLST
"RTN","DGRPC2",153,0)
 I '$$RWITHIN^DGRPDT($P(RANGE(LOC),"^",1),$P(RANGE(LOC),"^",2),$P(DGP(.52),"^",13),$P(DGP(.52),"^",14)) S X=78 D COMB
"RTN","DGRPC2",154,0)
 D NEXT G @DGLST
"RTN","DGRPC2",155,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC2",156,0)
 ;
"RTN","DGRPC2",157,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) I +DGLST,+DGLST<79 Q
"RTN","DGRPC2",158,0)
 S:'DGLST DGLST="END^DGRPC3" I +DGLST S DGLST=DGLST_"^DGRPC3"
"RTN","DGRPC2",159,0)
 Q
"RTN","DGRPC2",160,0)
FIND F I=DGLST:1:99 I DGCHK[(","_I_",") Q
"RTN","DGRPC2",161,0)
 I DGNCK,(I>17),(I<36) S DGLST=36 G FIND
"RTN","DGRPC2",162,0)
 I I,I<99 S DGLST=I G @(DGLST_$S(DGLST>78:"^DGRPC3",DGLST>42:"",DGLST>17:"^DGRPC1",1:"^DGRPC"))
"RTN","DGRPC2",163,0)
 G END^DGRPC3
"RTN","DGRPC2",164,0)
 ;
"RTN","DGRPC2",165,0)
CHECK55(DFN) ;Buisness rules for additional 55-INCOME DATA MISSING checks
"RTN","DGRPC2",166,0)
 ;  Modeled from DGMTR checks.
"RTN","DGRPC2",167,0)
 ;  Input  DFN - IEN from PATIENT File #2
"RTN","DGRPC2",168,0)
 ;
"RTN","DGRPC2",169,0)
 ;  Output 1 - If Income check passes additional buisness rules
"RTN","DGRPC2",170,0)
 ;         0 - If Income check fails additional buisness rules
"RTN","DGRPC2",171,0)
 ;
"RTN","DGRPC2",172,0)
 N VAMB,VASV,VA,VADMVT,VAEL,VAINDT,DGRTN,DGMED,DG,DG1,DGWARD,DGSRVC
"RTN","DGRPC2",173,0)
 ;
"RTN","DGRPC2",174,0)
 S DGRTN=0
"RTN","DGRPC2",175,0)
 D MB^VADPT I +VAMB(7) S DGRTN=1 G Q55  ; Check if receiving VA Disability
"RTN","DGRPC2",176,0)
 D SVC^VADPT I +VASV(4) S DGRTN=1 G Q55  ; check if POW status indicated
"RTN","DGRPC2",177,0)
 I +VASV(9),(+VASV(9,1)=3) S DGRTN=1 G Q55  ; Check if Purple Heart Status is Confirmed
"RTN","DGRPC2",178,0)
 D GETS^DIQ(2,DFN_",",".381:.383","I","DGMED")
"RTN","DGRPC2",179,0)
 I $G(DGMED(2,DFN_",",.381,"I")) S DGRTN=1 G Q55  ; Check if eligible for Medicaid
"RTN","DGRPC2",180,0)
 D ADM^VADPT2 ; Check for current admission to DOM ward 
"RTN","DGRPC2",181,0)
 I +$G(VADMVT) D  G:DGRTN Q55
"RTN","DGRPC2",182,0)
 . Q:'$$GET1^DIQ(43,1,16,"I")  ; Has Dom wards?
"RTN","DGRPC2",183,0)
 . S DGWARD=$$GET1^DIQ(405,VADMVT,.06,"I") ; Get ward location
"RTN","DGRPC2",184,0)
 . S DGSRVC=$$GET1^DIQ(42,DGWARD,.03,"I") ; Get ward service
"RTN","DGRPC2",185,0)
 . S:DGSRVC="D" DGRTN=1 ; If ward service is 'D', then return 1
"RTN","DGRPC2",186,0)
 ;
"RTN","DGRPC2",187,0)
 ; Additional checks for 0% SC
"RTN","DGRPC2",188,0)
 D ELIG^VADPT
"RTN","DGRPC2",189,0)
 I +VAEL(3),'$P(VAEL(3),U,2) D  ; Check if service connected with % of zero
"RTN","DGRPC2",190,0)
 . I +VAMB(4) S DGRTN=1 Q  ; Check if receiving a VA pension
"RTN","DGRPC2",191,0)
 . S DG=0 ; Check for secondary eligibilities
"RTN","DGRPC2",192,0)
 . F  S DG=$O(VAEL(1,DG)) Q:'DG  D  Q:DGRTN
"RTN","DGRPC2",193,0)
 . . F DG1=2,4,15,16,17,18 I DG=DG1 S DGRTN=1 Q
"RTN","DGRPC2",194,0)
 ;
"RTN","DGRPC2",195,0)
Q55 D KVAR^VADPT
"RTN","DGRPC2",196,0)
 Q $G(DGRTN)
"RTN","DGRPC3")
0^37^B15185592
"RTN","DGRPC3",1,0)
DGRPC3 ;ALB/PJR,LBD - CHECK CONSISTENCY OF PATIENT DATA (CONT) ; 5/17/04 9:00am
"RTN","DGRPC3",2,0)
 ;;5.3;Registration;**451**;Aug 13, 1993
"RTN","DGRPC3",3,0)
 ;
"RTN","DGRPC3",4,0)
79 ;; MSE Dates overlap
"RTN","DGRPC3",5,0)
 ;; Don't check if MSE Dates Incomplete or if MSE TO precedes FROM
"RTN","DGRPC3",6,0)
 ;; or unless at least 2 ranges
"RTN","DGRPC3",7,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK I MSDATERR!($L(ANYMSE)<2) D NEXT G @DGLST
"RTN","DGRPC3",8,0)
 I ANYMSE[1,'$$OVRLPCHK^DGRPDT(DFN,$P(DGP(.32),"^",6),$P(DGP(.32),"^",7),1,".326^.327") S X=79 D COMB S MSERR=1 D NEXT G @DGLST
"RTN","DGRPC3",9,0)
 I ANYMSE'[1,'$$OVRLPCHK^DGRPDT(DFN,$P(DGP(.32),"^",11),$P(DGP(.32),"^",12),1,".3292^.3293") S X=79 D COMB S MSERR=1 D NEXT G @DGLST
"RTN","DGRPC3",10,0)
 D NEXT G @DGLST
"RTN","DGRPC3",11,0)
80 ;; POW Dates not within MSE
"RTN","DGRPC3",12,0)
 I '$P(DGP(.52),"^",6) D NEXT G @DGLST ;; Don't check if no POW Data
"RTN","DGRPC3",13,0)
 ;; Don't check if POW Data Incomplete or if POW TO precedes FROM
"RTN","DGRPC3",14,0)
 I ((","_DGER_",")[(",37,"))!((","_DGER_",")[(",38,")) D NEXT G @DGLST
"RTN","DGRPC3",15,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK S:'$G(MSESET) MSESET=$$MSFROMTO^DGMSCK
"RTN","DGRPC3",16,0)
 ;; If POW, but no MSE, then Range is NOT within MSE
"RTN","DGRPC3",17,0)
 I 'ANYMSE S X=80 D COMB D NEXT G @DGLST
"RTN","DGRPC3",18,0)
 I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),$P(DGP(.52),"^",7),$P(DGP(.52),"^",8)) S X=80 D COMB
"RTN","DGRPC3",19,0)
 D NEXT G @DGLST
"RTN","DGRPC3",20,0)
81 ;; Combat Dates not within MSE
"RTN","DGRPC3",21,0)
 I '$P(DGP(.52),"^",12) D NEXT G @DGLST ;; Don't check if no COMBAT Data
"RTN","DGRPC3",22,0)
 ;; Don't check if COMBAT Data Incomplete or if COMBAT TO precedes FROM
"RTN","DGRPC3",23,0)
 I ((","_DGER_",")[(",39,"))!((","_DGER_",")[(",40,")) D NEXT G @DGLST
"RTN","DGRPC3",24,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK S:'$G(MSESET) MSESET=$$MSFROMTO^DGMSCK
"RTN","DGRPC3",25,0)
 ;; If COMBAT, but no MSE, then Range is NOT within MSE
"RTN","DGRPC3",26,0)
 I 'ANYMSE S X=81 D COMB D NEXT G @DGLST
"RTN","DGRPC3",27,0)
 I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),$P(DGP(.52),"^",13),$P(DGP(.52),"^",14)) S X=81 D COMB
"RTN","DGRPC3",28,0)
 D NEXT G @DGLST
"RTN","DGRPC3",29,0)
82 ;; Conflict Dates not within MSE
"RTN","DGRPC3",30,0)
 S:'$G(CONCHK) CONCHK=$$CNCK^DGMSCK
"RTN","DGRPC3",31,0)
 S:'$G(MSECHK) MSECHK=$$MSCK^DGMSCK S:'$G(MSESET) MSESET=$$MSFROMTO^DGMSCK
"RTN","DGRPC3",32,0)
 S LOC="",I2=0 F I1=1:1 S LOC=$O(CONSPEC(LOC)) Q:LOC=""  I CONARR(LOC)=1 D
"RTN","DGRPC3",33,0)
 .N FROMDAT,FROMPC,TODAT,TOPC,NODE,DATA
"RTN","DGRPC3",34,0)
 .S DATA=CONSPEC(LOC)
"RTN","DGRPC3",35,0)
 .S NODE=$P(DATA,",",1),FROMPC=$P(DATA,",",3),TOPC=$P(DATA,",",4)
"RTN","DGRPC3",36,0)
 .S FROMDAT=$P(DGP(NODE),"^",FROMPC),TODAT=$P(DGP(NODE),"^",TOPC)
"RTN","DGRPC3",37,0)
 .I '$$RWITHIN^DGRPDT($P(MSESET,"^",1),$P(MSESET,"^",2),FROMDAT,TODAT) S X=82 D COMB:'I2 S CONARR(LOC)=2,I2=1
"RTN","DGRPC3",38,0)
 .Q
"RTN","DGRPC3",39,0)
 D NEXT G @DGLST
"RTN","DGRPC3",40,0)
83 ;Merchant Seaman or Filipino Vet BOS requires service dates during WWII
"RTN","DGRPC3",41,0)
 N BOS,BOSN,MS,MSE,OUT
"RTN","DGRPC3",42,0)
 F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",43,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",44,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",45,0)
 .S BOS=$P(DGP(.32),U,(5*MS)) Q:'BOS  S BOSN=$P($G(^DIC(23,BOS,0)),U)
"RTN","DGRPC3",46,0)
 .S MSE=$S(MS=1:"MSL",MS=2:"MSNTL",1:"MSNNTL")
"RTN","DGRPC3",47,0)
 .I $$BRANCH^DGRPMS(BOS_U_BOSN),'$$WWII^DGRPMS(DFN,"",MSE) S X=83 D COMB S OUT=1 Q
"RTN","DGRPC3",48,0)
 D NEXT G @DGLST
"RTN","DGRPC3",49,0)
84 ;Filipino Vet BOS requires Filipino Vet Proof
"RTN","DGRPC3",50,0)
 N MS,BOS,OUT
"RTN","DGRPC3",51,0)
 F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",52,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",53,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",54,0)
 .S BOS=$P(DGP(.32),U,(5*MS))
"RTN","DGRPC3",55,0)
 .I $$FV^DGRPMS(BOS)=1,$P(DGP(.321),U,14)="" S X=84 D COMB S OUT=1 Q
"RTN","DGRPC3",56,0)
 D NEXT G @DGLST
"RTN","DGRPC3",57,0)
85 ;Eligible Filipino Vet should have Veteran status = 'YES'
"RTN","DGRPC3",58,0)
 N MS,BOS,FV,MSE,OUT
"RTN","DGRPC3",59,0)
 I 'DGVT F MS=1:1:3 D  Q:$G(OUT)
"RTN","DGRPC3",60,0)
 .I MS=2,$P(DGP(.32),U,19)'="Y" S OUT=1 Q
"RTN","DGRPC3",61,0)
 .I MS=3,$P(DGP(.32),U,20)'="Y" S OUT=1 Q
"RTN","DGRPC3",62,0)
 .S BOS=$P(DGP(.32),U,(5*MS)),FV=$$FV^DGRPMS(BOS) Q:'FV
"RTN","DGRPC3",63,0)
 .S MSE=$S(MS=1:"MSL",MS=2:"MSNTL",1:"MSNNTL")
"RTN","DGRPC3",64,0)
 .Q:'$$WWII^DGRPMS(DFN,"",MSE)
"RTN","DGRPC3",65,0)
 .I FV=2 S X=85 D COMB S OUT=1 Q
"RTN","DGRPC3",66,0)
 .I FV=1,$S($P(DGP(.321),U,14)="":0,$P(DGP(.321),U,14)="NO":0,1:1) S X=85 D COMB S OUT=1 Q
"RTN","DGRPC3",67,0)
 D NEXT G @DGLST
"RTN","DGRPC3",68,0)
99 ; synonymous with END
"RTN","DGRPC3",69,0)
END I DGNCK S X=99 D COMB
"RTN","DGRPC3",70,0)
 I DGEDCN S DGCON=0 D TIME^DGRPC
"RTN","DGRPC3",71,0)
 K C,C1,C2,DGCD,DGD,DGD1,DGD2,DGDATE,DGDEP,DGCHK,DGFL,DGINC,DGISYR,DGLST,DGMS,DGNCK,DGP,DGPTYP,DGREL,DGSCT,DGT,DGTIME,DGTOT,DGVT,I,I2,I2,J,VAIN,X,X1
"RTN","DGRPC3",72,0)
 G ^DGRPCF
"RTN","DGRPC3",73,0)
 ;
"RTN","DGRPC3",74,0)
COMB S DGCT=DGCT+1,DGER=DGER_X_",",DGLST=X Q
"RTN","DGRPC3",75,0)
 ;;
"RTN","DGRPC3",76,0)
NEXT S I=$F(DGCHK,(","_+DGLST_",")),DGLST=+$E(DGCHK,I,999) S:'DGLST DGLST="END"
"RTN","DGRPC3",77,0)
 Q
"RTN","DGRPCE")
0^18^B28283114
"RTN","DGRPCE",1,0)
DGRPCE ;ALB/MRL,KV,PJR - CONSISTENCY CHECKER, EDIT INCONSISTENCIES ; 4/6/04 4:54pm
"RTN","DGRPCE",2,0)
 ;;5.3;Registration;**121,122,175,297,342,451**;Aug 13, 1993
"RTN","DGRPCE",3,0)
 ;
"RTN","DGRPCE",4,0)
 ;KV;11/15/00;DG*5.3*297;Disable addition of CD Elig Code in Reg. Screens
"RTN","DGRPCE",5,0)
 ;                      ;Adding CD Elig Codes in Load/Edit Screen used to
"RTN","DGRPCE",6,0)
 ;                      ;cause undefined line tag error.
"RTN","DGRPCE",7,0)
 ;
"RTN","DGRPCE",8,0)
 S DGVTYN=$P($G(^DPT(DFN,"VET")),"^",1),DGDR="DR",(DR,DGD,DGDRC,DGCCF)="",DGASK=",",DGER=","_DGER D ^DGRPCE1
"RTN","DGRPCE",9,0)
 S DGEK=0 F I=9,10,11,12,13,14,18,19,20,22,24,36,51 Q:DGEK  I DGER[(","_I_",") S DGEK=1 Q
"RTN","DGRPCE",10,0)
 I 'DGKEY(1) D:DGEK ELDR S I=15 D SASK S I=23 D SASK
"RTN","DGRPCE",11,0)
 F I=29,30,31,32,33,43,44,45,48,56 D SASK,MON:DGCCF S DGCCF=0
"RTN","DGRPCE",12,0)
 G NKEY:DGKEY(3) F I=25,26,27,28,34,35 D SASK
"RTN","DGRPCE",13,0)
 I DGASK'[26 F I=41,42 I DGASK'[41 D SASK
"RTN","DGRPCE",14,0)
 I DGASK'[27 S I=60 I DGASK'[25 D SASK
"RTN","DGRPCE",15,0)
 I DGASK'[34 F I=37,38 I DGASK'[37 D SASK
"RTN","DGRPCE",16,0)
 I DGASK'[35 F I=39,40 I DGASK'[39 D SASK
"RTN","DGRPCE",17,0)
NKEY D ^DGRPCE1
"RTN","DGRPCE",18,0)
 I $S(DGER[49:1,(DGER[50):1,(DGER[52):1,1:0) D
"RTN","DGRPCE",19,0)
 .I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","DGRPCE",20,0)
 .D REG^IBCNBME(DFN)
"RTN","DGRPCE",21,0)
 .Q
"RTN","DGRPCE",22,0)
 D Q S DIE="^DPT(",(DA,Y)=DFN D ^DIE:$D(DR)
"RTN","DGRPCE",23,0)
 I DGER[54 D GETREL^DGMTU11(DFN,"SD",$$LYR^DGMTSCU1(DT)) D
"RTN","DGRPCE",24,0)
 . I $D(DGREL("S")),($$SSN^DGMTU1(+DGREL("S"))']"") D ASKSSN(DGREL("S"))
"RTN","DGRPCE",25,0)
 . F DGDEP=0:0 S DGDEP=$O(DGREL("D",DGDEP)) Q:'DGDEP  I $$SSN^DGMTU1(+DGREL("D",DGDEP))']"" D ASKSSN(DGREL("D",DGDEP))
"RTN","DGRPCE",26,0)
 ;
"RTN","DGRPCE",27,0)
 I DGER[59 D CATDIB
"RTN","DGRPCE",28,0)
 ;
"RTN","DGRPCE",29,0)
 K DGREL,DGDEP
"RTN","DGRPCE",30,0)
KVAR K DR,DGEDCN,DGCT,DGER,DGINC55,DGRPADI,DGRPOUT,DGVTYN
"RTN","DGRPCE",31,0)
Q K %,C,DA,DGASK,DGCCF,DGCT1,DGCT2,DGCT3,DGD,DGD1,DGD2,DGDR,DGDRC,DGECODE,DGEDIT,DGEK,DGKEY,DGP,DGRPADI,DGRPE,DIC,DIE,DIK,I,I1,J,X,X1,X2 D KVAR^VADPT Q
"RTN","DGRPCE",32,0)
 Q
"RTN","DGRPCE",33,0)
SASK I DGER[(","_I_","),DGASK'[(","_I_",") S DGD=$P($T(@I),";;",2,999),DGASK=DGASK_I_",",DGCCF=1 D SAVE
"RTN","DGRPCE",34,0)
 Q
"RTN","DGRPCE",35,0)
SAVE I $L(@DGDR)+$L(DGD)<241 S @DGDR=@DGDR_DGD,DGD="" Q
"RTN","DGRPCE",36,0)
 S DGDRC=DGDRC+1,DGDR="DR(1,2,"_DGDRC_")",@DGDR=DGD,DGD="" Q
"RTN","DGRPCE",37,0)
ELDR S DGASK=DGASK_"9,10,11,12,13,14,18,19,20,24,29,30,31,34,36,37,38,"
"RTN","DGRPCE",38,0)
 I 'DGKEY(1) S DGD="391;1901;S DGVTYN=$S($D(^DPT(DFN,""VET"")):$P(^(""VET""),""^"",1),1:"""");S:X'=""Y"" Y=""@1"";.301;S:X'=""Y"" Y=""@1"";.302;@1;" D SAVE
"RTN","DGRPCE",39,0)
 I 'DGKEY(2) F I=29,30,31 S DGD=$P($T(@I),";;",2,999) D SAVE
"RTN","DGRPCE",40,0)
 D:DGD]"" SAVE I 'DGKEY(3) S DGD=$P($T(34),";;",2,999) D SAVE S DGD=$P($T(51),";;",2,999) D SAVE
"RTN","DGRPCE",41,0)
 I 'DGKEY(1) D ELIG^DGRPCE1
"RTN","DGRPCE",42,0)
 Q
"RTN","DGRPCE",43,0)
MON I $S(I<40:1,I=56:1,1:0) D SAVE Q
"RTN","DGRPCE",44,0)
 I $S(I<46:1,1:0),DGASK'[(","_(I-14)_",") D SAVE Q
"RTN","DGRPCE",45,0)
 I DGASK'[(","_(I-15)_",") D SAVE
"RTN","DGRPCE",46,0)
 Q
"RTN","DGRPCE",47,0)
 ;
"RTN","DGRPCE",48,0)
15 ;;.152;S:X']"" Y="@15";S DIE("NO^")="";.307;I X']"" W !!,*7,"But I need a reason why this applicant is ineligible!" S Y=.152;@15;K DIE("NO^");
"RTN","DGRPCE",49,0)
23 ;;.3611;S:X'="V" Y="@23";.3612;S DIE("NO^")="";I X']"" W !!,*7,"But I need to know the date eligibility was verifed!";@23;K DIE("NO^");
"RTN","DGRPCE",50,0)
25 ;;.323;.32102;S:X'="Y" Y="@25";.32107;.3211;.32109;.3213;@25;
"RTN","DGRPCE",51,0)
26 ;;
"RTN","DGRPCE",52,0)
27 ;;
"RTN","DGRPCE",53,0)
28 ;;
"RTN","DGRPCE",54,0)
29 ;;.36205;S:X'="Y" Y="@29";I DGVTYN'="Y" W !,"Patient not a veteran-can't claim A&A" S Y=.36205;.36295;@29;
"RTN","DGRPCE",55,0)
30 ;;.36215;S:X'="Y" Y="@30";I DGVTYN'="Y" W !,"Patient not a veteran-can't claim HOUSEBOUND" S Y=.36215;.36295;@30;
"RTN","DGRPCE",56,0)
31 ;;.36235;S:X'="Y" Y="@31";I DGVTYN'="Y" W !,"Patient not a veteran-can't claim VA PENSION" S Y=.36235;.36295;@31;
"RTN","DGRPCE",57,0)
32 ;;.36255;S:X'="Y" Y="@32";I DGVTYN'="Y" W !,"Patient not a veteran-can't claim MIL. RET." S Y=.36255;.3625;@32;
"RTN","DGRPCE",58,0)
33 ;;
"RTN","DGRPCE",59,0)
34 ;;.525;S:X'="Y" Y="@34";I DGVTYN'="Y" W !,"Patient not a veteran-can't claim POW STATUS" S Y=.525;.526:.528;@34;
"RTN","DGRPCE",60,0)
35 ;;
"RTN","DGRPCE",61,0)
37 ;;.525;S:X'="Y" Y="@37";.526:.528;@37;
"RTN","DGRPCE",62,0)
38 ;;.525;S:X'="Y" Y="@38";.526:.528;@38;
"RTN","DGRPCE",63,0)
39 ;;.5291;S:X'="Y" Y="@39";.5292:.5294;@39;
"RTN","DGRPCE",64,0)
40 ;;.5291;S:X'="Y" Y="@40";.5292:.5294;@40;
"RTN","DGRPCE",65,0)
41 ;;.32101;S:X'="Y" Y="@41";.32104;.32105;@41;
"RTN","DGRPCE",66,0)
42 ;;.32101;S:X'="Y" Y="@42";.32104;.32105;@42;
"RTN","DGRPCE",67,0)
43 ;;
"RTN","DGRPCE",68,0)
44 ;;
"RTN","DGRPCE",69,0)
45 ;;
"RTN","DGRPCE",70,0)
46 ;;
"RTN","DGRPCE",71,0)
47 ;;
"RTN","DGRPCE",72,0)
48 ;;.36265;S:X'="Y" Y="@48";.3626;@48;
"RTN","DGRPCE",73,0)
51 ;;I DGVTYN'="Y" S Y="@51";.324:.328;@51;
"RTN","DGRPCE",74,0)
56 ;;.3025;S:X'="Y" Y="@56";.36295;@56;
"RTN","DGRPCE",75,0)
60 ;;.32102;S:X'="Y" Y="@60";.32107;.3211;.32109;.3213;@60;
"RTN","DGRPCE",76,0)
 ;
"RTN","DGRPCE",77,0)
 ; NOTE: #46 & 47 REMOVED WITH PIMS5.3
"RTN","DGRPCE",78,0)
 ;
"RTN","DGRPCE",79,0)
ASKSSN(DEP) ;edit ssns if missing
"RTN","DGRPCE",80,0)
 ;
"RTN","DGRPCE",81,0)
 ; input:  DEP as string for dependent (from GETREL)
"RTN","DGRPCE",82,0)
 ;
"RTN","DGRPCE",83,0)
 W !,$$NAME^DGMTU1(+DEP)
"RTN","DGRPCE",84,0)
 S DA=+$P(DEP,"^",2),DIE="^DGPR(408.13,",DR=.09 D ^DIE
"RTN","DGRPCE",85,0)
 K DA,DR,DIE
"RTN","DGRPCE",86,0)
 Q
"RTN","DGRPCE",87,0)
 ;
"RTN","DGRPCE",88,0)
CATDIB ;
"RTN","DGRPCE",89,0)
 ;Could be inconsistent because there is the catastrophic disability
"RTN","DGRPCE",90,0)
 ;code without supporting information, or visa versa
"RTN","DGRPCE",91,0)
 ;
"RTN","DGRPCE",92,0)
 N DGCDIS,CODE,INFO
"RTN","DGRPCE",93,0)
 S (INFO,CODE)=0
"RTN","DGRPCE",94,0)
 I $$GET^DGENCDA(DFN,.DGCDIS),DGCDIS("DATE") S INFO=1
"RTN","DGRPCE",95,0)
 S CODE=$$HASCAT^DGENCDA(DFN)
"RTN","DGRPCE",96,0)
 I CODE D  Q
"RTN","DGRPCE",97,0)
 .W !!,">>> Catastrophically Disabled eligibilty requires additional information <<<"
"RTN","DGRPCE",98,0)
 .D EDITCD^DGENCD(DFN)
"RTN","DGRPCE",99,0)
 I INFO D
"RTN","DGRPCE",100,0)
 . ;KV;11/15/00;DG*5.3*297;Start of modifications
"RTN","DGRPCE",101,0)
 . W !!,"The patient record indicates that a  determination was made "
"RTN","DGRPCE",102,0)
 . W "that the patient",!,"is catastrophically disabled."
"RTN","DGRPCE",103,0)
 . W !!,"To add Catastrophic Disability Eligibility Code(s), please use "
"RTN","DGRPCE",104,0)
 . W "the menu option",!,"DGEN PATIENT ENROLLMENT.",!!
"RTN","DGRPCE",105,0)
 .I $$ASKDEL() D
"RTN","DGRPCE",106,0)
 .. I $$DELETE^DGENCDA1(DFN) D
"RTN","DGRPCE",107,0)
 ...W !,">>> Determination Deleted <<<"
"RTN","DGRPCE",108,0)
 ..;
"RTN","DGRPCE",109,0)
 ..;could fail if lock could not be obtained
"RTN","DGRPCE",110,0)
 ..E  W !,"Catastrophic disability determination can not be deleted at this time.",!,"Please try again later."
"RTN","DGRPCE",111,0)
 ;KV;11/15/00;DG*5.3*297;End of modifications
"RTN","DGRPCE",112,0)
 Q
"RTN","DGRPCE",113,0)
 ;
"RTN","DGRPCE",114,0)
ASKDEL() ;
"RTN","DGRPCE",115,0)
 ;ask whether to delete catastrphic disability determination
"RTN","DGRPCE",116,0)
 N DIR
"RTN","DGRPCE",117,0)
 S DIR(0)="Y"
"RTN","DGRPCE",118,0)
 ;KV;11/15/00;DG*5.3*297;Cosmetic change for DIR("A")
"RTN","DGRPCE",119,0)
 S DIR("A")="Do you want to delete the determination showing that patient is catastrophically disabled"
"RTN","DGRPCE",120,0)
 S DIR("B")="YES"
"RTN","DGRPCE",121,0)
 D ^DIR
"RTN","DGRPCE",122,0)
 Q:$D(DIRUT) 0
"RTN","DGRPCE",123,0)
 Q $S(Y=1:1,1:0)
"RTN","DGRPCE1")
0^35^B52778143
"RTN","DGRPCE1",1,0)
DGRPCE1 ;ALB/MIR/BRM/LBD - CONSISTENCY CHECKER EDIT ; 6/21/04 8:47am
"RTN","DGRPCE1",2,0)
 ;;5.3;Registration;**108,226,470,454,489,505,522,451**;Aug 13, 1993
"RTN","DGRPCE1",3,0)
 N I,J F I=1:1:8,16,53,57,58,61:1:85 D SASK
"RTN","DGRPCE1",4,0)
 ;F I=49,50,52 D SASK ;BELOW REPLACED WITH ^IBCNSP2 CALL
"RTN","DGRPCE1",5,0)
 ;OLDS DR(2,2.312)="S DGRPADI="""";.01;1;2;15;8;7;3;6;S DGRPADI=X;I DGRPADI'=""v"" S Y=""@2312"";17///^S X=""`""_DFN;16///^S X=""01"";S Y=""@23121"";@2312;17;16//^S X=$S(DGRPADI=""s"":""02"",1:"""");@23121;9:14;"
"RTN","DGRPCE1",6,0)
 Q
"RTN","DGRPCE1",7,0)
SASK I DGER[(","_I_","),DGASK'[(","_I_",") F J=I,I*1000:1 Q:'$T(@J)  S DGD=DGD_$P($T(@J),";;",2,999) D SAVE
"RTN","DGRPCE1",8,0)
 S DGASK=DGASK_I_","
"RTN","DGRPCE1",9,0)
 Q
"RTN","DGRPCE1",10,0)
SAVE I $L(@DGDR)+$L(DGD)<241 S @DGDR=@DGDR_DGD,DGD="" Q
"RTN","DGRPCE1",11,0)
 S DGDRC=DGDRC+1,DGDR="DR(1,2,"_DGDRC_")",@DGDR=DGD,DGD="" Q
"RTN","DGRPCE1",12,0)
 ;
"RTN","DGRPCE1",13,0)
 ;
"RTN","DGRPCE1",14,0)
ELIG ;eligibility code...if M11+, use compiled template, otherwise DR string
"RTN","DGRPCE1",15,0)
 I ^%ZOSF("OS")'["M/11+" S DGD=$P($T(14),";;",2,999) D SAVE Q
"RTN","DGRPCE1",16,0)
 N DA,DIE,DR S DIE="^DPT(",DA=DFN,DR="[DG CONSISTENCY CHECKER]" D ^DIE
"RTN","DGRPCE1",17,0)
 Q
"RTN","DGRPCE1",18,0)
 ;
"RTN","DGRPCE1",19,0)
 ;
"RTN","DGRPCE1",20,0)
1 ;;.01;
"RTN","DGRPCE1",21,0)
2 ;;1;
"RTN","DGRPCE1",22,0)
3 ;;.02;
"RTN","DGRPCE1",23,0)
4 ;;.03;
"RTN","DGRPCE1",24,0)
5 ;;.05;
"RTN","DGRPCE1",25,0)
6 ;;.08;
"RTN","DGRPCE1",26,0)
7 ;;.09;
"RTN","DGRPCE1",27,0)
8 ;;N FLG S FLG(2)=1 S:$G(DGER)[",61," FLG(1)=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPCE1",28,0)
14 ;;.361;S DGECODE=$S($D(^DIC(8,+X,0)):$P(^(0),"^",1),1:"");S:$S(DGECODE["ALLIED":0,DGECODE["FEDERAL":0,1:1) Y=.323;.309;.323;D ^DGYZODS;S:'DGODS Y="@14";11500.02;11500.03;@14;
"RTN","DGRPCE1",29,0)
16 ;;.351;
"RTN","DGRPCE1",30,0)
53 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@53";.3111;S:X']"" Y="@53";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@53;
"RTN","DGRPCE1",31,0)
57 ;;.381;.382///NOW;
"RTN","DGRPCE1",32,0)
58 ;;.322013;S:X'="Y" Y="@589";.322014;.322015;.32201;S:X'="Y" Y="@581";.322011;.322012;@581;.322016;S:X'="Y" Y="@589";.322017;.322018;@589;
"RTN","DGRPCE1",33,0)
61 ;;S:$G(DGER)[",8," Y="@619";.131;.132;@619;
"RTN","DGRPCE1",34,0)
62 ;;.331;
"RTN","DGRPCE1",35,0)
63 ;;.1411;S DIE("NO^")="OUTOK";S:X']"" Y=.1414;.1412;S:X']"" Y=.1414;.1413;.1414;.1415;.1416;Q;.14111;K DIE("NO^");
"RTN","DGRPCE1",36,0)
64 ;;.092;.093;
"RTN","DGRPCE1",37,0)
65 ;;.2403;
"RTN","DGRPCE1",38,0)
66 ;;.09;
"RTN","DGRPCE1",39,0)
67 ;;S:$$DGERCK^DGRPCE1("73^79^80^81^82",.DGER) Y="@67";W !!,$C(7),"SERVICE SEPARATION DATE [LAST] must be a precise date to determine CV Elig",!;.325;.326;.327;@67;
"RTN","DGRPCE1",40,0)
68 ;;S:$$DGERCK^DGRPCE1("39^40",.DGER) Y="@68";W !!,$C(7),"COMBAT TO DATE must be a precise date to determine CV Eligibility",!;.5291;S:X'="Y" Y="@68";.5292;.5293;.5294;@68;
"RTN","DGRPCE1",41,0)
69 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@69";W !!,$C(7),"YUGOSLAVIA TO DATE must be a precise date to determine CV Eligibility",!;.322019;S:X'="Y" Y="@69";.32202;.322021;@69;
"RTN","DGRPCE1",42,0)
70 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@70";W !!,$C(7),"SOMALIA TO DATE must be a precise date to determine CV Eligibility",!;.322016;S:X'="Y" Y="@70";.322017;.322018,@70;
"RTN","DGRPCE1",43,0)
71 ;;S:$$DGERCK^DGRPCE1("74^75^76",.DGER) Y="@71";W !!,$C(7),"PERSIAN GULF TO DATE must be a precise date to determine CV Eligibility",!;.32201;S:X'="Y" Y="@71";.322011;.322012;@71;
"RTN","DGRPCE1",44,0)
72 ;;.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7201";.3291;.3292;.3293;.329;@7201;S:'$$YN^DGRPCE1(.32945) Y="@7202";.3296;.3297;.3298;.3295;@7202;
"RTN","DGRPCE1",45,0)
 ;
"RTN","DGRPCE1",46,0)
73 ;;S:$$DGERCK^DGRPCE1(72,.DGER) Y="@7302";.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7301";.3291;.3292;.3293;.329;@7301;S:'$$YN^DGRPCE1(.32945) Y="@7302";.3296;.3297;.3298;.3295;@7302;
"RTN","DGRPCE1",47,0)
74 ;;S:'$$YN^DGRPCE1(.32101) Y="@7401";.32101;S:X'="Y" Y="@7401";.32104;.32105;@7401;S:'$$YN^DGRPCE1(.322016) Y="@7402";.322016;S:X'="Y" Y="@7402";.322017;.322018;@7402;
"RTN","DGRPCE1",48,0)
74000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7403";.322019;S:X'="Y" Y="@7403";.32202;.322021;@7403;S:'$$YN^DGRPCE1(.3221) Y="@7404";.3221;S:X'="Y" Y="@7404";.3222;.3223;@7404;
"RTN","DGRPCE1",49,0)
74001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7405";.3224;S:X'="Y" Y="@7405";.3225;.3226;@7405;S:'$$YN^DGRPCE1(.3227) Y="@7406";.3227;S:X'="Y" Y="@7406";.3228;.3229;@7406;
"RTN","DGRPCE1",50,0)
74002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7407";.32201;S:X'="Y" Y="@7407";.322011;.322012;@7407;
"RTN","DGRPCE1",51,0)
75 ;;S:$$DGERCK^DGRPCE1(74,.DGER) Y="@7507";S:'$$YN^DGRPCE1(.32101) Y="@7501";.32101;S:X'="Y" Y="@7501";.32104;.32105;@7501;S:'$$YN^DGRPCE1(.322016) Y="@7502";.322016;S:X'="Y" Y="@7502";.322017;.322018;@7502;
"RTN","DGRPCE1",52,0)
75000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7503";.322019;S:X'="Y" Y="@7503";.32202;.322021;@7503;S:'$$YN^DGRPCE1(.3221) Y="@7504";.3221;S:X'="Y" Y="@7504";.3222;.3223;@7504;
"RTN","DGRPCE1",53,0)
75001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7505";.3224;S:X'="Y" Y="@7505";.3225;.3226;@7505;S:'$$YN^DGRPCE1(.3227) Y="@7506";.3227;S:X'="Y" Y="@7506";.3228;.3229;@7506;
"RTN","DGRPCE1",54,0)
75002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7507";.32201;S:X'="Y" Y="@7507";.322011;.322012;@7507;
"RTN","DGRPCE1",55,0)
76 ;;S:$$DGERCK^DGRPCE1("74^75",.DGER) Y="@7607";S:'$$YN^DGRPCE1(.32101) Y="@7601";.32101;S:X'="Y" Y="@7601";.32104;.32105;@7601;S:'$$YN^DGRPCE1(.322016) Y="@7602";.322016;S:X'="Y" Y="@7602";.322017;.322018;@7602;
"RTN","DGRPCE1",56,0)
76000 ;;S:'$$YN^DGRPCE1(.322019) Y="@7603";.322019;S:X'="Y" Y="@7603";.32202;.322021;@7603;S:'$$YN^DGRPCE1(.3221) Y="@7604";.3221;S:X'="Y" Y="@7604";.3222;.3223;@7604;
"RTN","DGRPCE1",57,0)
76001 ;;S:'$$YN^DGRPCE1(.3224) Y="@7605";.3224;S:X'="Y" Y="@7605";.3225;.3226;@7605;S:'$$YN^DGRPCE1(.3227) Y="@7606";.3227;S:X'="Y" Y="@7606";.3228;.3229;@7606;
"RTN","DGRPCE1",58,0)
76002 ;;S:'$$YN^DGRPCE1(.32201) Y="@7607";.32201;S:X'="Y" Y="@7607";.322011;.322012;@7607;
"RTN","DGRPCE1",59,0)
77 ;;S:(($$DGERCK^DGRPCE1("37^38",.DGER))!('$$YN^DGRPCE1(.525))) Y="@77";.525;S:X'="Y" Y="@77";.526;.527;.528;@77;
"RTN","DGRPCE1",60,0)
78 ;;S:(($$DGERCK^DGRPCE1("39^40^68",.DGER))!('$$YN^DGRPCE1(.5291))) Y="@78";.5291;S:X'="Y" Y="@78";.5292;.5293;.5294;@78;
"RTN","DGRPCE1",61,0)
79 ;;S:$$DGERCK^DGRPCE1("72^73",.DGER) Y="@7902";.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@7901";.3291;.3292;.3293;.329;@7901;S:'$$YN^DGRPCE1(.32945) Y="@7902";.3296;.3297;.3298;.3295;@7902;
"RTN","DGRPCE1",62,0)
80 ;;S:(($$DGERCK^DGRPCE1("37^38^77",.DGER))!('$$YN^DGRPCE1(.525))) Y="@8001";.525;S:X'="Y" Y="@8001";.526;.527;.528;@8001;S:$$DGERCK^DGRPCE1("72^73^79",.DGER) Y="@8003";
"RTN","DGRPCE1",63,0)
80000 ;;.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8002";.3291;.3292;.3293;.329;@8002;S:'$$YN^DGRPCE1(.32945) Y="@8003";.3296;.3297;.3298;.3295;@8003;
"RTN","DGRPCE1",64,0)
81 ;;S:(($$DGERCK^DGRPCE1("39^40^78",.DGER))!('$$YN^DGRPCE1(.5291))) Y="@8101";.5291;S:X'="Y" Y="@8101";.5292;.5293;.5294;@8101;S:$$DGERCK^DGRPCE1("72^73^79^80",.DGER) Y="@8103";
"RTN","DGRPCE1",65,0)
81000 ;;.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8102";.3291;.3292;.3293;.329;@8102;S:'$$YN^DGRPCE1(.32945) Y="@8103";.3296;.3297;.3298;.3295;@8103;
"RTN","DGRPCE1",66,0)
82 ;;S:($$DGERCK^DGRPCE1("74^75^76",.DGER)) Y="@8207";S:'$$YN^DGRPCE1(.32101) Y="@8201";.32101;S:X'="Y" Y="@8201";.32104;.32105;@8201;S:'$$YN^DGRPCE1(.322016) Y="@8202";.322016;
"RTN","DGRPCE1",67,0)
82000 ;;S:X'="Y" Y="@8202";.322017;.322018;@8202;S:'$$YN^DGRPCE1(.322019) Y="@8203";.322019;S:X'="Y" Y="@8203";.32202;.322021;@8203;S:'$$YN^DGRPCE1(.3221) Y="@8204";.3221;
"RTN","DGRPCE1",68,0)
82001 ;;S:X'="Y" Y="@8204";.3222;.3223;@8204;S:'$$YN^DGRPCE1(.3224) Y="@8205";.3224;S:X'="Y" Y="@8205";.3225;.3226;@8205;S:'$$YN^DGRPCE1(.3227) Y="@8206";.3227;S:X'="Y" Y="@8206";
"RTN","DGRPCE1",69,0)
82002 ;;.3228;.3229;@8206;S:'$$YN^DGRPCE1(.32201) Y="@8207";.32201;S:X'="Y" Y="@8207";.322011;.322012;@8207;S:($$DGERCK^DGRPCE1("72^73^79^80^81",.DGER)) Y="@8209";
"RTN","DGRPCE1",70,0)
82003 ;;.325;.326;.327;.324;S:'$$YN^DGRPCE1(.3285) Y="@8208";.3291;.3292;.3293;.329;@8208;S:'$$YN^DGRPCE1(.32945) Y="@8209";.3296;.3297;.3298;.3295;@8209;
"RTN","DGRPCE1",71,0)
83 ;;S:$$DGERCK^DGRPCE1(73,.DGER) Y="@83";@8295;.325;S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y="@8296";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y="@8295";@8296;.326;.327;
"RTN","DGRPCE1",72,0)
83000 ;;.3285//NO;S:X'="Y" Y="@83";.3291;S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y=".3292";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3291";.3292;.3293;
"RTN","DGRPCE1",73,0)
83001 ;;.32945//NO;S:X'="Y" Y="@83";.3296;S:X']"" Y="@83";S:$$FV^DGRPMS(X)'=1 Y=".3297";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3296";.3297;.3298;@83;
"RTN","DGRPCE1",74,0)
84 ;;.3214;
"RTN","DGRPCE1",75,0)
85 ;;1901;
"RTN","DGRPCE1",76,0)
 ;
"RTN","DGRPCE1",77,0)
YN(FLD,DFN,FILE) ; return binary for YES/NO flds in the Patient (#2) file
"RTN","DGRPCE1",78,0)
 N RTN
"RTN","DGRPCE1",79,0)
 Q:$G(FLD)']"" ""
"RTN","DGRPCE1",80,0)
 S:$G(FILE)="" FILE=2 S:$G(DFN)="" DFN=$G(DA) Q:$G(DFN)']"" ""
"RTN","DGRPCE1",81,0)
 S RTN=$$GET1^DIQ(FILE,DFN_",",FLD,"I")
"RTN","DGRPCE1",82,0)
 Q $S(RTN=1:1,RTN=0:0,RTN="Y":1,RTN="N":0,1:"")
"RTN","DGRPCE1",83,0)
 ;
"RTN","DGRPCE1",84,0)
DGERCK(STR,DGER) ;do any of the STR errors exist in DGER?
"RTN","DGRPCE1",85,0)
 N RTN,X
"RTN","DGRPCE1",86,0)
 Q:$G(STR)']"" 0  Q:$G(DGER)']"" 0
"RTN","DGRPCE1",87,0)
 S RTN=0 F X=1:1 Q:RTN!($P(STR,"^",X)="")  I DGER[(","_$P(STR,"^",X)_",") S RTN=1
"RTN","DGRPCE1",88,0)
 Q RTN
"RTN","DGRPE")
0^31^B45747315
"RTN","DGRPE",1,0)
DGRPE ;ALB/MRL,LBD - REGISTRATIONS EDITS ; 11/19/03 10:53am
"RTN","DGRPE",2,0)
 ;;5.3;Registration;**32,114,139,169,175,247,190,343,397,342,454,415,489,506,244,547,522,528,555,508,451**;Aug 13, 1993
"RTN","DGRPE",3,0)
 ;
"RTN","DGRPE",4,0)
 ;DGDR contains a string of edits; edit=screen*10+item #
"RTN","DGRPE",5,0)
 ;
"RTN","DGRPE",6,0)
 ;line tag screen*10+item*1000 = continuation line
"RTN","DGRPE",7,0)
 ;
"RTN","DGRPE",8,0)
 I DGRPS=8 D ^DGRPEIS,Q Q  ; family demographic edit...not conventional!!  :)
"RTN","DGRPE",9,0)
 I DGRPS=9 D EDIT9^DGRPEIS2,Q Q  ; income screening data ($$$)
"RTN","DGRPE",10,0)
 I DGRPS=5,DGDR["501," D
"RTN","DGRPE",11,0)
 .I $G(DGPRFLG) D PREG^IBCNBME(DFN) Q
"RTN","DGRPE",12,0)
 .D REG^IBCNBME(DFN)
"RTN","DGRPE",13,0)
 .Q
"RTN","DGRPE",14,0)
 ;-- Tricare screen #15
"RTN","DGRPE",15,0)
 I DGRPS=15 D EDIT^DGRP15,Q Q
"RTN","DGRPE",16,0)
 ;
"RTN","DGRPE",17,0)
 N DGPH,DGPHFLG
"RTN","DGRPE",18,0)
 K DR S (DA,Y)=DFN,DIE="^DPT(",DR="",DGDRS="DR",DGCT=0 G ^DGRPE1:DGRPS>6
"RTN","DGRPE",19,0)
 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  F J1=J,J*1000,J*1000+1,J*1000+2 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE",20,0)
 D ^DIE
"RTN","DGRPE",21,0)
 ;check for Combat Vet status
"RTN","DGRPE",22,0)
 I $G(DGCVFLG)=1,($P($$CVEDT^DGCV(DFN),U,2)']"") D
"RTN","DGRPE",23,0)
 . W !!,"**NOTE-Change(s) made in this session deleted the veteran's Combat Vet status!"
"RTN","DGRPE",24,0)
 . S DIR(0)="EA" D ^DIR K DIR
"RTN","DGRPE",25,0)
 I $G(DGPHFLG)>0 D EDITPH1^DGRPLE()
"RTN","DGRPE",26,0)
Q K DA,DIE,DR,DGCT,DGCVFLG,DGDR,DGDRD,DGDRS,DGRPADI,I,J,J1
"RTN","DGRPE",27,0)
 Q
"RTN","DGRPE",28,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE",29,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE",30,0)
 Q
"RTN","DGRPE",31,0)
101 ;;K DG20NAME;.01;.01///^S X=$$NCEDIT^DPTNAME(DFN,,.DG20NAME);K DG20NAME;.09;.03;
"RTN","DGRPE",32,0)
102 ;;1;
"RTN","DGRPE",33,0)
103 ;;.091;
"RTN","DGRPE",34,0)
104 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);
"RTN","DGRPE",35,0)
105 ;;.12105//NO;S:X="N" Y="@15" S:X="Y" DIE("NO^")="";.1217;I X']"" W !?4,$C(7),"But I need a Start Date for this Temporary Address." S Y=.12105;.1218;.1211;I X']"" W !?4,$C(7),"But I need at least one line of a Temporary address." S Y=.12105;
"RTN","DGRPE",36,0)
111 ;;.14105//NO;S:X="N" Y="@111" S:X="Y" DIE("NO^")="";.1417;I X']"" W !?4,$C(7),"But I need a Start Date." S Y=.14105;.1418;D DR111^DGRPE;.141;I '$P($$CAACT^DGRPCADD(DFN),U,2) W !?4,"But I need at least one active category." S Y=.14105;
"RTN","DGRPE",37,0)
111000 ;;K DR(2,2.141);.1411;I X']"" W !?4,$C(7),"I need at least one line of Address." S Y=.14105;.1412;S:X']"" Y=.1414;.1413;.1414;.1415;.1416;Q;.14111;@111;K DIE("NO^");
"RTN","DGRPE",38,0)
109 ;;N FLG S (FLG(1),FLG(2))=1 D EN^DGREGAED(DFN,.FLG);.02;D DR109^DGRPE;6;2;K DR(2,2.02),DR(2,2.06);.05;.08;K DIE("NO^");
"RTN","DGRPE",39,0)
105000 ;;.1212;S:X']"" Y=.1214;.1213:.1215;.12112;Q;.12111;.1219;@15;K DIE("NO^");
"RTN","DGRPE",40,0)
201 ;;.02;.05;.08;.092;.093;.2401:.2403;57.4//NOT APPLICABLE;
"RTN","DGRPE",41,0)
202 ;;1010.15//NO;S:X'="Y" Y="@22";S DIE("NO^")="";1010.152;I X']"" W !?4,*7,"But I need to know where you were treated most recently." S Y=1010.15;1010.151;1010.154;S:X']"" Y="@22";1010.153;@22;K DIE("NO^");
"RTN","DGRPE",42,0)
203 ;;D DR203^DGRPE;6ETHNICITY;2RACE;K DR(2,2.02),DR(2,2.06);
"RTN","DGRPE",43,0)
301 ;;.211;S:X']"" Y="@31";.212;.2125//NO;I X="Y" S DGADD=".21" D AD^DGRPE S Y=.21011;.213;S:X']"" Y=.216;.214;S:X']"" Y=.216;.215:.217;.2207;.219;.21011;@31;
"RTN","DGRPE",44,0)
302 ;;.2191;S:X']"" Y="@32";.2192;.21925//NO;I X="Y" S DGADD=".211" D AD^DGRPE S Y=.211011;
"RTN","DGRPE",45,0)
302000 ;;.2193;S:X']"" Y=.2196;.2194;S:X']"" Y=.2196;.2195:.2197;.2203;.2199;.211011;@32;
"RTN","DGRPE",46,0)
303 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@33";.3305//NO;I X="Y" S Y="@34",DGX1=1;@33;S:$D(^DPT(DFN,.22)) $P(^(.22),U,1)=$P(^(.22),U,7);.331;S:X']"" DGX1=2,Y="@34";.332;@34;
"RTN","DGRPE",47,0)
303000 ;;S:$G(DGX1) Y="@341";.333;S:X']"" Y=.336;.334;S:X']"" Y=.336;.335:.337;.2201;.339;.33011;S DGX1=2;@341;
"RTN","DGRPE",48,0)
303001 ;;S:$G(DGX1)=2 Y="@35";S DGX2=$G(^DPT(DA,.21));.331///^S X=$P(DGX2,U);.332///^S X=$P(DGX2,U,2);.333////^S X=$P(DGX2,U,3);.334///^S X=$P(DGX2,U,4);@35;
"RTN","DGRPE",49,0)
303002 ;;S:$G(DGX1)=2 Y="@351";.335///^S X=$P(DGX2,U,5);.336///^S X=$P(DGX2,U,6);.337///^S X=$P(DGX2,U,7);.338///^S X=$P(DGX2,U,8);.339///^S X=$P(DGX2,U,9);.33011///^S X=$P(DGX2,U,11);@351;K DGX1,DGX2;
"RTN","DGRPE",50,0)
304 ;;.3311;S:X']"" Y="@36";.3312;.3313;S:X']"" Y=.3316;.3314;S:X']"" Y=.3316;.3315:.3317;.2204;.3319;.331011;@36;        
"RTN","DGRPE",51,0)
305 ;;N DGX1,DGX2;I '$L($P($G(^DPT(DFN,.21)),U)) S Y="@37";.3405//NO;I X="Y" S DGX1=1,Y="@371";@37;S:$D(^DPT(DFN,.22)) $P(^(.22),U,2)=$P(^(.22),U,7);.341;S:X']"" DGX1=2,Y="@371";.342;@371;
"RTN","DGRPE",52,0)
305000 ;;S:$G(DGX1) Y="@38";.343;S:X']"" Y=.346;.344;S:X']"" Y=.346;.345:.347;.2202;.349;.34011;S DGX1=2;@38;
"RTN","DGRPE",53,0)
305001 ;;S:$G(DGX1)=2 Y="@381";S DGX2=$G(^DPT(DA,.21));.341///^S X=$P(DGX2,U);.342///^S X=$P(DGX2,U,2);.343///^S X=$P(DGX2,U,3);.344///^S X=$P(DGX2,U,4);@381
"RTN","DGRPE",54,0)
305002 ;;S:$G(DGX1)=2 Y="@39";.345///^S X=$P(DGX2,U,5);.346///^S X=$P(DGX2,U,6);.347///^S X=$P(DGX2,U,7);.348///^S X=$P(DGX2,U,8);.349///^S X=$P(DGX2,U,9);.34011///^S X=$P(DGX2,U,11);@39;K DGX1,DGX2;
"RTN","DGRPE",55,0)
401 ;;.07;.31115;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@41";.3111;S:X']"" Y="@41";.3113;S:X']"" Y=.3116;.3114;S:X']"" Y=.3116;.3115:.3117;.2205;.3119;@41;
"RTN","DGRPE",56,0)
402 ;;.2514;.2515;I $S(X']"":1,X=3:1,X=9:1,1:0) S Y="@42";.251;S:X']"" Y="@42";.252;S:X']"" Y=.255;.253;S:X']"" Y=.255;.254:.256;.2206;.258;@42;
"RTN","DGRPE",57,0)
501 ;;
"RTN","DGRPE",58,0)
502 ;;.381;.382///NOW;
"RTN","DGRPE",59,0)
503 ;;.383;
"RTN","DGRPE",60,0)
601 ;;.325;S:X']"" Y="@61";S:$$FV^DGRPMS(X)'=1 Y=".328";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".325";.328;.326;.327;.324;
"RTN","DGRPE",61,0)
601000 ;;.3285//NO;S:X'="Y" Y="@61";.3291;S:X']"" Y="@61";S:$$FV^DGRPMS(X)'=1 Y=".3294";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3291";.3294;.3292;.3293;.329;
"RTN","DGRPE",62,0)
601001 ;;.32945//NO;S:X'="Y" Y="@61";.3296;S:X']"" Y="@61";S:$$FV^DGRPMS(X)'=1 Y=".3299";.3214;I X']"" W !?4,$C(7),"Proof is required for Filipino Vet." S Y=".3296";.3299;.3297;.3298;.3295;@61;
"RTN","DGRPE",63,0)
602 ;;.525//NO;S:X'="Y" Y="@62";.526:.528;@62;
"RTN","DGRPE",64,0)
603 ;;.5291//NO;S:X'="Y" Y="@63";.5292:.5294;@63;
"RTN","DGRPE",65,0)
604 ;;.32101//NO;S:X'="Y" Y="@64";.32104;.32105;@64;
"RTN","DGRPE",66,0)
605 ;;.32102//NO;S:X'="Y" Y="@65";.32107;.32109;.3211;.3213;@65;
"RTN","DGRPE",67,0)
606 ;;.32103//NO;S:X'="Y" Y="@66";.3212;.32111;@66;
"RTN","DGRPE",68,0)
607 ;;.3221//NO;S:X'="Y" Y="@67";.3222;Q;.3223;@67;
"RTN","DGRPE",69,0)
608 ;;.3224//NO;S:X'="Y" Y="@68";.3225;Q;.3226;@68;
"RTN","DGRPE",70,0)
609 ;;.3227//NO;S:X'="Y" Y="@69";.3228;Q;.3229;@69;
"RTN","DGRPE",71,0)
610 ;;.32201//NO;S:X'="Y" Y="@610";.322011;Q;.322012;@610;
"RTN","DGRPE",72,0)
611 ;;.322016//NO;S:X'="Y" Y="@611";.322017;Q;.322018;@611;
"RTN","DGRPE",73,0)
612 ;;.322013//NO;S:X'="Y" Y="@612";.322014;Q;.322015;@612;
"RTN","DGRPE",74,0)
613 ;;.362;
"RTN","DGRPE",75,0)
614 ;;.368//NO;.369//NO;I $S('$D(^DPT(DA,.36)):1,$P(^(.36),U,8)="Y"!($P(^(.36),U,9)="Y"):0,1:1) S Y="@614";.37;@614;
"RTN","DGRPE",76,0)
615 ;;.322019//NO;S:X'="Y" Y="@615";.32202;Q;.322021;@615;
"RTN","DGRPE",77,0)
616 ;;S DGPHFLG=0;.531;S:X'="Y" DGX=X,Y="@616";.532///^S X="PENDING";S Y="@6161";@616;S:DGX'="N" Y="@6162";.533///^S X="VAMC";@6161;S DGPHFLG=1;.535///^S X=$$DIV^DGRPLE();@6162;
"RTN","DGRPE",78,0)
617 ;;D REG^DGNTQ(DFN);
"RTN","DGRPE",79,0)
AD N DGZ4,DGPC
"RTN","DGRPE",80,0)
 S X=$S($D(^DPT(DA,.11)):^(.11),1:""),DGZ4=$P(X,U,12),DGPHONE=$S($D(^(.13)):$P(^(.13),U,1),1:""),Y=$S($D(^(DGADD)):^(DGADD),1:""),^(DGADD)=$P(Y,U,1)_U_$P(Y,U,2)_U_$P(X,U,1,6)_U_DGPHONE_U_$P(Y,U,10)
"RTN","DGRPE",81,0)
 I DGZ4 S DGPC=$S((DGADD=.33):1,(DGADD=.34):2,(DGADD=.211):3,(DGADD=.331):4,(DGADD=.311):5,(DGADD=.25):6,(DGADD=.21):7,1:0) S:DGPC $P(^DPT(DFN,.22),U,DGPC)=DGZ4
"RTN","DGRPE",82,0)
 K DGADD,DGPHONE Q
"RTN","DGRPE",83,0)
DR109 ;Drop through (use same logic as DR203)
"RTN","DGRPE",84,0)
DR203 S DR(2,2.02)=".01RACE;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.02,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2031"";.02;@2031;"
"RTN","DGRPE",85,0)
 S DR(2,2.06)=".01ETHNICITY;I $P($G(^DIC(10.3,+$P($G(^DPT(DA(1),.06,DA,0)),""^"",2),0)),""^"",2)=""S"" S Y=""@2032"";.02;@2032;"
"RTN","DGRPE",86,0)
 Q
"RTN","DGRPE",87,0)
DR111 ;Set DR string for Confidential Address categories
"RTN","DGRPE",88,0)
 S DR(2,2.141)=".01;1//YES;"
"RTN","DGRPE",89,0)
 Q
"RTN","DGRPE1")
0^19^B8220513
"RTN","DGRPE1",1,0)
DGRPE1 ;ALB/MRL,RTK,BRM,RGL - REGISTRATIONS EDITS (CONTINUED) ; 2/20/04 1:26pm
"RTN","DGRPE1",2,0)
 ;;5.3;Registration;**114,327,451**;Aug 13, 1993
"RTN","DGRPE1",3,0)
 ;
"RTN","DGRPE1",4,0)
 ;***CONTAINS ISM SPECIFIC CODE TO AVOID STORE ERRORS WITH ELIG.***
"RTN","DGRPE1",5,0)
 ;
"RTN","DGRPE1",6,0)
 I DGRPS'=7 F I=1:1 S J=$P(DGDR,",",I) Q:J=""  F J1=J,J*1000 Q:'$T(@J1)  S DGDRD=$P($T(@J1),";;",2) D S
"RTN","DGRPE1",7,0)
 I DGRPS=7 S DR="[DG LOAD EDIT SCREEN 7]"
"RTN","DGRPE1",8,0)
 ;S DR(2,2.0361)=".01"
"RTN","DGRPE1",9,0)
 D ^DIE K DIE,DR,DGCT,DGDR,DGDRD,DGDRS,I,J,J1
"RTN","DGRPE1",10,0)
 ;update/set ELIGIBILITY VERIF. SOURCE field (327/Ineligible Project)
"RTN","DGRPE1",11,0)
 I $D(^DPT(DFN,.361)) S DGELG=^DPT(DFN,.361) D
"RTN","DGRPE1",12,0)
 .I $P(DGELG,U,5)["VIVA",$P(DGELG,U,6)=.5 S DATA(.3613)="H"
"RTN","DGRPE1",13,0)
 .E  S DATA(.3613)="V"
"RTN","DGRPE1",14,0)
 .I '$$UPD^DGENDBS(2,DFN,.DATA)
"RTN","DGRPE1",15,0)
 Q
"RTN","DGRPE1",16,0)
S I $L(@DGDRS)+$L(DGDRD)<241 S @DGDRS=@DGDRS_DGDRD Q
"RTN","DGRPE1",17,0)
 S DGCT=DGCT+1,DGDRS="DR(1,2,"_DGCT_")",@DGDRS=DGDRD Q
"RTN","DGRPE1",18,0)
701 ;;391;D SC7^DGRPV;1901;.301;S:X'="Y" Y=.313;.302;.313;.312;
"RTN","DGRPE1",19,0)
702 ;;.361;D AAC1^DGLOCK2 S:DGAAC(1)']"" Y=361;.309;361;.323;D ^DGYZODS;S:'DGODS Y=.36265;11500.02;11500.03;.36265;S:X='"Y" Y="@72";.3626;@72;
"RTN","DGRPE1",20,0)
703 ;;.3731;
"RTN","DGRPE1",21,0)
1001 ;;.152;S:X="" Y="@101";.1651;.1653;.1654;.307;.1656;@101;
"RTN","DGRPE1",22,0)
1002 ;;.153;S:X="" Y="@102";.1657:.1659;.16;@102;
"RTN","DGRPE1",23,0)
1101 ;;.3611;.3612;.3614;.3615;
"RTN","DGRPE1",24,0)
1102 ;;.306;
"RTN","DGRPE1",25,0)
1103 ;;.322;
"RTN","DGRPE1",26,0)
1104 ;;S:$S('$D(^DPT(DFN,"VET")):0,^("VET")="Y":1,1:0) Y="@114";S:'$S('$D(^("TYPE")):1,'$D(^DG(391,+^("TYPE"),0)):1,$P(^(0),"^",2):0,1:1) Y="@114";D MSG^DGRPE1 H 3 S Y=0;@114;K DGRDCHG;.3721;D:$G(DGRDCHG) BULL^DGRPE1;K DGRDCHG
"RTN","DGRPE1",27,0)
MSG W !,"Patient is not a veteran.  Can't enter rated disabilities",! Q
"RTN","DGRPE1",28,0)
 ;
"RTN","DGRPE1",29,0)
BULL ; Rated Disabilities update bulletin
"RTN","DGRPE1",30,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","DGRPE1",31,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","DGRPE1",32,0)
 Q:'DGMGRP
"RTN","DGRPE1",33,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","DGRPE1",34,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","DGRPE1",35,0)
 S XMTEXT="DGBULL("
"RTN","DGRPE1",36,0)
 S XMSUB="RATED DISABILITY UPDATED"
"RTN","DGRPE1",37,0)
 S DGLINE=0
"RTN","DGRPE1",38,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","DGRPE1",39,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","DGRPE1",40,0)
 D LINE^DGEN("",.DGLINE)
"RTN","DGRPE1",41,0)
 D LINE^DGEN("Send updates to SC Disabilities to HEC via fax or HECAlert",.DGLINE)
"RTN","DGRPE1",42,0)
 D LINE^DGEN("Outlook mail group so that they can be entered into VHA's",.DGLINE)
"RTN","DGRPE1",43,0)
 D LINE^DGEN("Authoritative Database.  SC Disability information entered directly",.DGLINE)
"RTN","DGRPE1",44,0)
 D LINE^DGEN("into VistA may be overlaid.",.DGLINE)
"RTN","DGRPE1",45,0)
 D ^XMD
"RTN","DGRPE1",46,0)
 Q
"RTN","DGRPMS")
0^29^B34568461
"RTN","DGRPMS",1,0)
DGRPMS ;ALB/BRM,LBD - MILITARY SERVICE APIS ; 7/21/04 2:33pm
"RTN","DGRPMS",2,0)
 ;;5.3;Registration;**451**;Aug 13, 1993
"RTN","DGRPMS",3,0)
 ;
"RTN","DGRPMS",4,0)
VALCON(DFN,CNFLCT,CDATE,FRTO) ;is this a valid conflict input?
"RTN","DGRPMS",5,0)
 ;
"RTN","DGRPMS",6,0)
 ;INPUT:
"RTN","DGRPMS",7,0)
 ;      FRTO - 0=FRDT 1=TODT  (defaults to FRDT if FRTO="")
"RTN","DGRPMS",8,0)
 ;
"RTN","DGRPMS",9,0)
 N RTN,X,Y,FRDT,TODT,CNFLCTV,IGNORE,COMPOW,MSG,DTCHK
"RTN","DGRPMS",10,0)
 Q:'$D(DFN) "0^INVALID PATIENT"
"RTN","DGRPMS",11,0)
 Q:'$D(^DPT(DFN)) "0^INVALID PATIENT"
"RTN","DGRPMS",12,0)
 Q:'$$VALID^DGRPDT(.CDATE) "0^INVALID DATE"
"RTN","DGRPMS",13,0)
 S FRTO=+$G(FRTO)
"RTN","DGRPMS",14,0)
 S ^XTMP("TDM","DGRPMS",1)=DFN_"^"_$P($G(^DPT(DFN,.321)),"^",4)
"RTN","DGRPMS",15,0)
 S ^XTMP("TDM","DGRPMS",2)=$G(XTMPTDM)
"RTN","DGRPMS",16,0)
 I 'FRTO S TODT=$$GETDT(DFN,.CNFLCT),FRDT=CDATE K DGFRDT
"RTN","DGRPMS",17,0)
 E  S FRDT=$$GETDT(DFN,.CNFLCT,FRTO) S:'FRDT FRDT=$G(DGFRDT) S TODT=CDATE
"RTN","DGRPMS",18,0)
 S DTCHK=$$DTUTIL^DGRPDT(CDATE,$$GETDT(DFN,.CNFLCT,'FRTO),1)
"RTN","DGRPMS",19,0)
 I 'DTCHK D MSG($P(DTCHK,"^",2),2,2) Q DTCHK
"RTN","DGRPMS",20,0)
 I CNFLCT="COMB"!(CNFLCT="POW") D
"RTN","DGRPMS",21,0)
 .S COMPOW=$S(CNFLCT="COMB":1,1:2)
"RTN","DGRPMS",22,0)
 .S CNFLCT=$$COMPOW($S($G(DGCOMLOC):$P(DGCOMLOC,"^"),1:$$GETDT(DFN,CNFLCT,3)))
"RTN","DGRPMS",23,0)
 S CNFLCTV=""
"RTN","DGRPMS",24,0)
 I CNFLCT]"" S CNFLCTV=$$CNFLCTDT^DGRPDT(FRDT,$S(FRTO:TODT,1:""),.CNFLCT)
"RTN","DGRPMS",25,0)
 I ('CNFLCTV) D MSG($P(CNFLCTV,"^",2),2,1) Q CNFLCTV  ;dates are not within conflict
"RTN","DGRPMS",26,0)
 ;
"RTN","DGRPMS",27,0)
 S MSG=$S('$G(COMPOW):"Conflict",$G(COMPOW)=2:"POW",1:"Combat")
"RTN","DGRPMS",28,0)
 I FRDT,TODT,'$$B4^DGRPDT(FRDT,TODT,0) D MSG((MSG_" From Date is not Before "_MSG_" To Date"),2,1) Q "0^"_MSG_" From Date is not Before "_MSG_" To Date"
"RTN","DGRPMS",29,0)
 S IGNORE=$P($P($T(@(CNFLCT)),";;",2),"^",FRTO+1)
"RTN","DGRPMS",30,0)
 I $G(COMPOW) S RTN=$$OVRLPCHK^DGRPDT(DFN,FRDT,TODT,-1,IGNORE)
"RTN","DGRPMS",31,0)
 E  S RTN=$$COVRLP2^DGRPDT(DFN,FRDT,TODT,IGNORE)
"RTN","DGRPMS",32,0)
 Q:RTN RTN
"RTN","DGRPMS",33,0)
 D MSG($P(RTN,"^",2),2,1)
"RTN","DGRPMS",34,0)
 Q RTN
"RTN","DGRPMS",35,0)
 ;
"RTN","DGRPMS",36,0)
VALMSE(DFN,MDATE,FRTO,FLD) ;is this a valid Military Service Episode date?
"RTN","DGRPMS",37,0)
 ;
"RTN","DGRPMS",38,0)
 ;INPUT:
"RTN","DGRPMS",39,0)
 ;      FRTO - 0=FRDT 1=TODT  (defaults to FRDT if FRTO="")
"RTN","DGRPMS",40,0)
 ;       FLD - MSE field being edited/added (MSL,MSNTL,MSNNTL)
"RTN","DGRPMS",41,0)
 ;
"RTN","DGRPMS",42,0)
 N RTN,X,Y,FRDT,TODT,IGNORE,DTCHK
"RTN","DGRPMS",43,0)
 Q:'$D(DFN) "0^INVALID PATIENT"
"RTN","DGRPMS",44,0)
 Q:'$D(^DPT(DFN)) "0^INVALID PATIENT"
"RTN","DGRPMS",45,0)
 Q:'$$VALID^DGRPDT(.MDATE) "0^INVALID DATE"
"RTN","DGRPMS",46,0)
 S FRTO=+$G(FRTO)
"RTN","DGRPMS",47,0)
 I 'FRTO S FRDT=MDATE,TODT=$$GETDT(DFN,.FLD,FRTO) K DGFRDT
"RTN","DGRPMS",48,0)
 E  S FRDT=$$GETDT(DFN,.FLD,FRTO) S:'FRDT FRDT=$G(DGFRDT) S TODT=MDATE
"RTN","DGRPMS",49,0)
 S DTCHK=$$DTUTIL^DGRPDT(MDATE,$$GETDT(DFN,.FLD,'FRTO),1)
"RTN","DGRPMS",50,0)
 I 'DTCHK D MSG($P(DTCHK,"^",2),2,2) Q DTCHK
"RTN","DGRPMS",51,0)
 I FRTO,FRDT,TODT,'$$B4^DGRPDT(.FRDT,.TODT,0) D MSG("Service Entry Date is not before Service Separation Date",2,1) Q "0^Service Entry Date is not before Service Separation Date"
"RTN","DGRPMS",52,0)
 S IGNORE=$P($P($T(@(FLD)),";;",2),"^",FRTO+1)
"RTN","DGRPMS",53,0)
 S RTN=$$OVRLPCHK^DGRPDT(.DFN,.FRDT,.TODT,1,.IGNORE)
"RTN","DGRPMS",54,0)
 I $G(DGCOMBR)']"" S DGCOMBR=$$GETDT(DFN,.FLD,4)
"RTN","DGRPMS",55,0)
 I RTN,FRTO,$$BRANCH(.DGCOMBR),('$$WWII(DFN,TODT,.FLD)) D MSG("Branch of Service Requires WWII Dates of Service",2,1) Q "0^BOS Requires WWII Dates"
"RTN","DGRPMS",56,0)
 Q:RTN RTN
"RTN","DGRPMS",57,0)
 D MSG($P(RTN,"^",2),2,1)
"RTN","DGRPMS",58,0)
 Q RTN
"RTN","DGRPMS",59,0)
 ;
"RTN","DGRPMS",60,0)
BRANCH(DGCOMBR) ;branches of service that require WWII service dates
"RTN","DGRPMS",61,0)
 N BRANCH
"RTN","DGRPMS",62,0)
 Q:'$G(DGCOMBR) 0
"RTN","DGRPMS",63,0)
 S BRANCH=$P(DGCOMBR,"^",2)
"RTN","DGRPMS",64,0)
 Q:BRANCH="MERCHANT SEAMAN" 1
"RTN","DGRPMS",65,0)
 Q:BRANCH="F.COMMONWEALTH" 1
"RTN","DGRPMS",66,0)
 Q:BRANCH="F.GUERILLA" 1
"RTN","DGRPMS",67,0)
 Q:BRANCH="F.SCOUTS NEW" 1
"RTN","DGRPMS",68,0)
 Q:BRANCH="F.SCOUTS OLD" 1
"RTN","DGRPMS",69,0)
 Q 0
"RTN","DGRPMS",70,0)
 ;
"RTN","DGRPMS",71,0)
GETDT(DFN,CNFLCT,FRTO) ; get from date, to date, or location from patient file
"RTN","DGRPMS",72,0)
 ;
"RTN","DGRPMS",73,0)
 N CFLDS,CFLD
"RTN","DGRPMS",74,0)
 Q:'$D(DFN) ""
"RTN","DGRPMS",75,0)
 Q:'$D(^DPT(DFN)) ""
"RTN","DGRPMS",76,0)
 Q:$G(CNFLCT)="" ""
"RTN","DGRPMS",77,0)
 S:$G(FRTO)="" FRTO=0
"RTN","DGRPMS",78,0)
 S CFLDS=$P($T(@(CNFLCT)),";;",2) Q:CFLDS']"" ""
"RTN","DGRPMS",79,0)
 S CFLD=$S('FRTO:$P(CFLDS,"^",2),FRTO=1:$P(CFLDS,"^"),1:$P(CFLDS,"^",3))
"RTN","DGRPMS",80,0)
 Q:'CFLD ""
"RTN","DGRPMS",81,0)
 S RTN=$$GET1^DIQ(2,DFN_",",CFLD,"I")
"RTN","DGRPMS",82,0)
 I FRTO=4 S RTN=RTN_"^"_$$EXTERNAL^DILFD(2,CFLD,"",RTN)
"RTN","DGRPMS",83,0)
 Q RTN
"RTN","DGRPMS",84,0)
 ;
"RTN","DGRPMS",85,0)
WWII(DFN,TODT,FLD) ; was this patient in WWII?
"RTN","DGRPMS",86,0)
 ;  this API assumes the WWII period to be from 12/07/41-12/31/46
"RTN","DGRPMS",87,0)
 ;
"RTN","DGRPMS",88,0)
 N OK,NODE,DATA,WWIIS,WWIIE,PATDT,PATE,PATS
"RTN","DGRPMS",89,0)
 Q:'$G(DFN) "-1^UNKNOWN"
"RTN","DGRPMS",90,0)
 S NODE(.32)=".326,.327,.3285,.3292,.3293,.32945,.3297,.3298"
"RTN","DGRPMS",91,0)
 S WWIIS=2411207,WWIIE=2461231
"RTN","DGRPMS",92,0)
 D GETDAT^DGRPDT(DFN,.NODE,.DATA)
"RTN","DGRPMS",93,0)
 S PATDT=$G(FLD) Q:PATDT']"" 0
"RTN","DGRPMS",94,0)
 S PATS=$P($G(DATA(PATDT)),"^"),PATE=$P($G(DATA(PATDT)),"^",2)
"RTN","DGRPMS",95,0)
 S:'$G(TODT) TODT=PATE
"RTN","DGRPMS",96,0)
 S OK=0
"RTN","DGRPMS",97,0)
 S OK=$$WITHIN^DGRPDT(WWIIS,WWIIE,PATS)
"RTN","DGRPMS",98,0)
 S:'OK OK=$$WITHIN^DGRPDT(WWIIS,WWIIE,TODT)
"RTN","DGRPMS",99,0)
 S:'OK OK=$$RWITHIN^DGRPDT(PATS,TODT,WWIIS,WWIIE)
"RTN","DGRPMS",100,0)
 Q $G(OK)
"RTN","DGRPMS",101,0)
DELMSE(DFN,TYPE) ; delete MSE from patient
"RTN","DGRPMS",102,0)
 ;
"RTN","DGRPMS",103,0)
 ; Input: DFN - Internal entry number for the Patient File (#2)
"RTN","DGRPMS",104,0)
 ;       TYPE - 1=Last MSE  2=Next to Last MSE  3=Next to Next to Last
"RTN","DGRPMS",105,0)
 ;
"RTN","DGRPMS",106,0)
 Q:'$G(TYPE)
"RTN","DGRPMS",107,0)
 Q:(('$G(DFN))!'$D(^DPT(DFN)))
"RTN","DGRPMS",108,0)
 N IENS,FDA,X,X1,X2,Y,ZZ,ROOT
"RTN","DGRPMS",109,0)
 S IENS=DFN_",",ROOT="FDA(2,IENS)",X=""
"RTN","DGRPMS",110,0)
 I TYPE=1 F ZZ=.324,.326,.327,.328 S @ROOT@(ZZ)=X
"RTN","DGRPMS",111,0)
 I TYPE=2 F ZZ=.329,.3292,.3293,.3294 S @ROOT@(ZZ)=X
"RTN","DGRPMS",112,0)
 I TYPE=3 F ZZ=.3295,.3297,.3298,.3299 S @ROOT@(ZZ)=X
"RTN","DGRPMS",113,0)
 D FILE^DIE("K","FDA","ERR")
"RTN","DGRPMS",114,0)
 Q
"RTN","DGRPMS",115,0)
 ;
"RTN","DGRPMS",116,0)
COMPOW(VAL) ;convert POW and Combat Location fields
"RTN","DGRPMS",117,0)
 ;
"RTN","DGRPMS",118,0)
 N ABRV
"RTN","DGRPMS",119,0)
 Q:'$G(VAL) ""
"RTN","DGRPMS",120,0)
 S ABRV=$$GET1^DIQ(22,VAL_",",1,"I")
"RTN","DGRPMS",121,0)
 Q:ABRV="WWI" "WWI"
"RTN","DGRPMS",122,0)
 Q:ABRV="WWII-EUROPE" "WWIIE"
"RTN","DGRPMS",123,0)
 Q:ABRV="WWII-PACIFIC" "WWIIP"
"RTN","DGRPMS",124,0)
 Q:ABRV="KOREAN" "KOR"
"RTN","DGRPMS",125,0)
 Q:ABRV="VIETNAM" "VIET"
"RTN","DGRPMS",126,0)
 Q:ABRV="OTHER" "OTHER"
"RTN","DGRPMS",127,0)
 Q:ABRV="PERSIAN GULF" "GULF"
"RTN","DGRPMS",128,0)
 Q:ABRV="YUGOSLAVIA" "YUG"
"RTN","DGRPMS",129,0)
 Q:ABRV="SOMALIA" "SOM"
"RTN","DGRPMS",130,0)
 Q ""
"RTN","DGRPMS",131,0)
 ;
"RTN","DGRPMS",132,0)
FV(X) ;Is this a Filipino Vet branch of service?
"RTN","DGRPMS",133,0)
 ;Added for HVE II (DG*5.3*451)
"RTN","DGRPMS",134,0)
 ;INPUT:  X = IEN Branch of Service file #23
"RTN","DGRPMS",135,0)
 ;OUTPUT: 1 = Filipino Vet BOS (F.COMMONWEALTH, F.GUERILLA, F.SCOUTS NEW)
"RTN","DGRPMS",136,0)
 ;        2 = Filipino Vet BOS (F.SCOUTS OLD)
"RTN","DGRPMS",137,0)
 ;        0 = Not Filipino Vet BOS
"RTN","DGRPMS",138,0)
 N FV
"RTN","DGRPMS",139,0)
 I '$G(X) Q 0
"RTN","DGRPMS",140,0)
 S FV=$P($G(^DIC(23,X,0)),U,1)
"RTN","DGRPMS",141,0)
 Q $S(FV="F.SCOUTS OLD":2,$E(FV,1,2)="F.":1,1:0)
"RTN","DGRPMS",142,0)
 ;
"RTN","DGRPMS",143,0)
FVP ;MUMPS cross-reference "AFV1" on Service Branch [Last] (#.325), "AFV2"
"RTN","DGRPMS",144,0)
 ;on Service Branch [NTL] (#.3291), and "AFV3" on Service Branch [NNTL]
"RTN","DGRPMS",145,0)
 ;(#.3296) in the Patient file #2.  If the Service Branch fields do not
"RTN","DGRPMS",146,0)
 ;contain a Filipino Veteran branch of service, the Filipino Vet Proof
"RTN","DGRPMS",147,0)
 ;field (#.3214) will be deleted.
"RTN","DGRPMS",148,0)
 Q:'$G(DA)
"RTN","DGRPMS",149,0)
 N BOS,MS,FV,IENS,FDA
"RTN","DGRPMS",150,0)
 S MS=$G(^DPT(DA,.32))
"RTN","DGRPMS",151,0)
 F BOS=5,10,15 S FV=$$FV($P(MS,U,BOS)) Q:FV=1
"RTN","DGRPMS",152,0)
 I FV=1 Q  ;Filipino Vet BOS found, quit
"RTN","DGRPMS",153,0)
 ;Delete Filipino Vet Proof
"RTN","DGRPMS",154,0)
 S IENS=DA_",",FDA(2,IENS,.3214)="@"
"RTN","DGRPMS",155,0)
 D FILE^DIE("","FDA")
"RTN","DGRPMS",156,0)
 Q
"RTN","DGRPMS",157,0)
 ;
"RTN","DGRPMS",158,0)
MSG(MSGTXT,LF1,LF2) ; This api will format the output text in order to utilize
"RTN","DGRPMS",159,0)
 ; the EN^DDIOL utility.
"RTN","DGRPMS",160,0)
 ;INPUT:  MSGTXT = Message text to display
"RTN","DGRPMS",161,0)
 ;           LF1 = Number of line feeds to preceed the message
"RTN","DGRPMS",162,0)
 ;           L2F = Number of line feeds to follow the message
"RTN","DGRPMS",163,0)
 ;        
"RTN","DGRPMS",164,0)
 N MSGARY,LFSTR
"RTN","DGRPMS",165,0)
 S $P(LFSTR,"!",50)="!"
"RTN","DGRPMS",166,0)
 S:$G(LF1)'="" MSGARY(.5,"F")=$E(LFSTR,1,(LF1-1))
"RTN","DGRPMS",167,0)
 S MSGARY(1)=MSGTXT
"RTN","DGRPMS",168,0)
 S:$G(LF2)'="" MSGARY(2,"F")=$E(LFSTR,1,LF2)
"RTN","DGRPMS",169,0)
 D EN^DDIOL(.MSGARY)
"RTN","DGRPMS",170,0)
 Q
"RTN","DGRPMS",171,0)
 ;
"RTN","DGRPMS",172,0)
CNFLCT ;; ***  DO NOT REMOVE BELOW CONFLICT FIELD LOCATIONS  ***
"RTN","DGRPMS",173,0)
 ;; FROM DATE^TO DATE
"RTN","DGRPMS",174,0)
WWI ;;
"RTN","DGRPMS",175,0)
WWIIE ;;
"RTN","DGRPMS",176,0)
WWIIP ;;
"RTN","DGRPMS",177,0)
KOR ;;
"RTN","DGRPMS",178,0)
VIET ;;.32104^.32105
"RTN","DGRPMS",179,0)
LEB ;;.3222^.3223
"RTN","DGRPMS",180,0)
GREN ;;.3225^.3226
"RTN","DGRPMS",181,0)
PAN ;;.3228^.3229
"RTN","DGRPMS",182,0)
GULF ;;.322011^.322012
"RTN","DGRPMS",183,0)
SOM ;;.322017^.322018
"RTN","DGRPMS",184,0)
YUG ;;.32202^.322021
"RTN","DGRPMS",185,0)
 ;;
"RTN","DGRPMS",186,0)
 ;;  **BELOW VALUES ARE USED FOR MSE CHECKS - DO NOT REMOVE ***
"RTN","DGRPMS",187,0)
 ;; ENTRY DATE^SEPERATION DATE
"RTN","DGRPMS",188,0)
MSL ;;.326^.327^.325
"RTN","DGRPMS",189,0)
MSNTL ;;.3292^.3293^.3291
"RTN","DGRPMS",190,0)
MSNNTL ;;.3297^.3298^.3296
"RTN","DGRPMS",191,0)
 ;;
"RTN","DGRPMS",192,0)
 ;;  **BELOW VALUES ARE USED FOR POW AND COMBAT CHECKS - DO NOT REMOVE
"RTN","DGRPMS",193,0)
 ;; FROM DATE^TO DATE^LOCATION
"RTN","DGRPMS",194,0)
COMB ;;.5293^.5294^.5292
"RTN","DGRPMS",195,0)
POW ;;.527^.528^.526
"RTN","DGRPMS",196,0)
 ;;
"RTN","DGRPV")
0^20^B16180030
"RTN","DGRPV",1,0)
DGRPV ;ALB/MRL,RTK,PJR - REGISTRATION DEFINE VARIABLES ON ENTRY ; 3/5/04 11:40am
"RTN","DGRPV",2,0)
 ;;5.3;Registration;**109,114,247,190,327,365,343,397,415,489,546,545,451**;Aug 13, 1993
"RTN","DGRPV",3,0)
 ;
"RTN","DGRPV",4,0)
 ;
"RTN","DGRPV",5,0)
 ;set up variables for registration screen processing
"RTN","DGRPV",6,0)
 ;
"RTN","DGRPV",7,0)
 ;DGRPVV   :string of 15 ones and zeros each character corresponding to
"RTN","DGRPV",8,0)
 ;          a particular screen (0 means allow edit, 1 means don't)
"RTN","DGRPV",9,0)
 ;
"RTN","DGRPV",10,0)
 ;DGRPVV(n):where n=screen number.  String of x ones and zeros where
"RTN","DGRPV",11,0)
 ;          x is the number of elements on screen n (0=edit, 1=don't)
"RTN","DGRPV",12,0)
 ;
"RTN","DGRPV",13,0)
 ;DGVI     :Turn on high intensity
"RTN","DGRPV",14,0)
 ;DGVO     :Turn off high intensity
"RTN","DGRPV",15,0)
 ;
"RTN","DGRPV",16,0)
EN D DT^DICRW I '$D(DVBGUI) D HOME^%ZIS
"RTN","DGRPV",17,0)
 S (DGVI,DGVO)="""""" I $S('$D(IOST(0)):1,'$D(^DG(43,1,0)):1,'$P(^DG(43,1,0),"^",36):1,$D(^DG(43,1,"TERM",IOST(0))):1,1:0) G M ;goto M if not high intensity
"RTN","DGRPV",18,0)
 I $D(^%ZIS(2,IOST(0),7)) S I=^(7),X=$S($P(I,"^",3)]"":3,1:2) I $L($P(I,"^",1)),$L($P(I,"^",X)) S DGVI=$P(I,"^",1),DGVO=$P(I,"^",X)
"RTN","DGRPV",19,0)
M I $L(DGVI_DGVO)>4 S X=132 X ^%ZOSF("RM")
"RTN","DGRPV",20,0)
 S DGRPW=1,DGRPCM=0,DGRPU="UNANSWERED",DGRPNA="NOT APPLICABLE",DGRPV=$S($D(DGRPV):DGRPV,1:1)
"RTN","DGRPV",21,0)
SC7 S X=$S('$D(^DPT(DFN,"TYPE")):0,1:+^("TYPE")) S:'$D(DGELVER) DGELVER=0
"RTN","DGRPV",22,0)
 S DGRPTYPE=$S($D(^DG(391,+X,0)):^(0),1:""),(DGRPSC,DGRPSCE,DGRPSCE1)="" S:'$D(DGELVER) DGELVER=0
"RTN","DGRPV",23,0)
 I DGRPTYPE'="" S DGRPSC=$G(^DG(391,+X,"S")),DGRPSCE=$G(^("E")),DGRPSCE1=$G(^("E10"))
"RTN","DGRPV",24,0)
 ;
"RTN","DGRPV",25,0)
 S DGPH=$P($G(^DPT(DFN,.53)),U)  ;Purple Heart Indicator
"RTN","DGRPV",26,0)
 I $G(DGPRFLG)=1 D
"RTN","DGRPV",27,0)
 . S DGRPVV="000001111111111"
"RTN","DGRPV",28,0)
 E  D
"RTN","DGRPV",29,0)
 . S DGRPVV="000000000000000"
"RTN","DGRPV",30,0)
 S X="5^3^5^2^3^17^4^2^10^2^4^5^5^2^1"
"RTN","DGRPV",31,0)
 F I=1:1:15 S J=+$P(X,"^",I),DGRPVV(I)=$S((I<12)!(I=15):$E("00000000000000000",1,J),1:$E("11111111111111111",1,J))
"RTN","DGRPV",32,0)
 S DGRPVV(1.1)=0
"RTN","DGRPV",33,0)
 S DGRPVV(2)="0001"
"RTN","DGRPV",34,0)
 I $G(DGPH)]"" S $E(DGRPVV(6),16)=1
"RTN","DGRPV",35,0)
 I $$GETSTAT^DGNTAPI1(DFN)>2,'$D(^XUSEC("DGNT VERIFY",DUZ)) D
"RTN","DGRPV",36,0)
 . S $E(DGRPVV(6),17)=1
"RTN","DGRPV",37,0)
 ;
"RTN","DGRPV",38,0)
 F I=3,6,8,9,10,11 S J=+$P(DGRPSC,"^",I) I 'J S DGRPVV=$E(DGRPVV,0,I-1)_1_$E(DGRPVV,I+1,99)
"RTN","DGRPV",39,0)
 ;
"RTN","DGRPV",40,0)
 ;-- if patient type is TRICARE then turn off screens 2,4
"RTN","DGRPV",41,0)
 ;
"RTN","DGRPV",42,0)
 ;-- modified 08/20/2003 for NOIS Calls MAC-0400-61574 & AMA-0700-71769 
"RTN","DGRPV",43,0)
 ;-- commented the line to allow screens 2 & 4 to display for Tricare
"RTN","DGRPV",44,0)
 ;I DGRPTYPE["TRICARE" F I=2,4 S J=+$P(DGRPSC,"^",I) I 'J S DGRPVV=$E(DGRPVV,0,I-1)_1_$E(DGRPVV,I+1,99)
"RTN","DGRPV",45,0)
 ;
"RTN","DGRPV",46,0)
 F I=31:0 S I=$O(^DD(391,I)) Q:I=""!(I>99)  I $D(^(I,0)),($E(^(0),1)'="*"),'+$P(DGRPSCE,"^",I) S X1=$E(I),X2=$E(I,2) I +X1 S DGRPVV(X1)=$E(DGRPVV(X1),0,X2-1)_1_$E(DGRPVV(X1),X2+1,99)
"RTN","DGRPV",47,0)
 I $G(^DPT(DFN,.35)),(^(.35)<+($E(DT,1,3)_"0000")) S DGRPVV=$E(DGRPVV,0,7)_11_$E(DGRPVV,10,99)
"RTN","DGRPV",48,0)
 K DIRUT,DUOUT,DTOUT
"RTN","DGRPV",49,0)
 ;
"RTN","DGRPV",50,0)
 ;Fields are numbered screen_item and put in that piece position.
"RTN","DGRPV",51,0)
 ;Because FM does not allow more than 100 pieces on a node, it was
"RTN","DGRPV",52,0)
 ;necessary to start a new node E10 for fields on screens 10 or higher.
"RTN","DGRPV",53,0)
 ;In these instances, the piece position will be screen_item-100 so,
"RTN","DGRPV",54,0)
 ;for example, screen 11, item 2 would be field 112, but piece 12.
"RTN","DGRPV",55,0)
 ;Items on screens <10 will be found on node E.
"RTN","DGRPV",56,0)
 ;
"RTN","DGRPV",57,0)
 F I=100:0 S I=$O(^DD(391,I)) Q:I=""!(I>150)  I $D(^(I,0)),($E(^(0),1)'="*"),'+$P(DGRPSCE1,"^",I-100) S X1=$E(I,1,2),X2=$E(I,3) I +X1 S DGRPVV(X1)=$E(DGRPVV(X1),0,X2-1)_1_$E(DGRPVV(X1),X2+1,99)
"RTN","DGRPV",58,0)
 ;
"RTN","DGRPV",59,0)
 I $S('($D(DUZ)#2):0,'$D(^XUSEC("DG ELIGIBILITY",DUZ)):0,1:1) G ELVER ;if user holds eligibility key, skip
"RTN","DGRPV",60,0)
 F I=.3,.32,.361 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","DGRPV",61,0)
 S DGRPVV(10)=11 I $P(DGRP(.361),"^",1)="V" S DGRPVV(7)=111,DGRPVV(1)=1_$E(DGRPVV(1),2,99) ;if elig verified, can't edit elig data, name, ssn, or dob
"RTN","DGRPV",62,0)
 I $P(DGRP(.3),"^",6)]"" S DGRPVV(8)=11 ;if monetary ben. verified, can't edit income screening data
"RTN","DGRPV",63,0)
 I $P(DGRP(.32),"^",2)]"" S DGRPVV(6)=11111111111111111 ;if service data verified, can't edit service screen
"RTN","DGRPV",64,0)
 ;
"RTN","DGRPV",65,0)
ELVER ;set up variables for eligibility verification
"RTN","DGRPV",66,0)
 ;if elig ver option, only edit screens 1, 2, and 7 (and 6, 8, 9, 10,
"RTN","DGRPV",67,0)
 ;   and 11 if they're turned on).
"RTN","DGRPV",68,0)
 ;
"RTN","DGRPV",69,0)
 I $P($G(^DPT(DFN,.361)),U,3)="H" S DGRPVV(10)=10,DGRPVV(11)=1000
"RTN","DGRPV",70,0)
 S:'DGELVER DGRPLAST=$S($G(DGPRFLG)=1:5,1:15)
"RTN","DGRPV",71,0)
 I DGELVER S DGRPVV="00111"_$E(DGRPVV,6,11)_"1111" F I=1:1:11 S J=$E(DGRPVV,I) I 'J S DGRPLAST=I
"RTN","DGRPV",72,0)
Q K DGRPSC,DGRPSCE
"RTN","DGRPV",73,0)
 Q
"RTN","DGRPV",74,0)
 ;
"RTN","DGRPV",75,0)
WW ;Write number on screens for display and/or edit (Z=number)
"RTN","DGRPV",76,0)
 W:DGRPW ! S Z=$S(DGRPCM:Z,DGRPV:"<"_Z_">",$E(DGRPVV(DGRPS),Z):"<"_Z_">",1:"["_Z_"]")
"RTN","DGRPV",77,0)
 I DGRPCM!($E(Z)="[") W @DGVI,Z,@DGVO
"RTN","DGRPV",78,0)
 I 'DGRPCM&($E(Z)'="[") W Z
"RTN","DGRPV",79,0)
 Q
"RTN","DGRPV",80,0)
 ;
"RTN","DGRPV",81,0)
WW1 ;spacing for screen display (Z=item to print)
"RTN","DGRPV",82,0)
 F Z2=1:1:(Z1-$L(Z)) S Z=Z_" "
"RTN","DGRPV",83,0)
 W Z K Z2
"RTN","DGRPV",84,0)
 Q
"SEC","^DIC",23,23,0,"DD")
@
"SEC","^DIC",23,23,0,"DEL")
@
"SEC","^DIC",23,23,0,"LAYGO")
@
"SEC","^DIC",23,23,0,"RD")
d
"SEC","^DIC",23,23,0,"WR")
@
"UP",2,2.04,-1)
2^.372
"UP",2,2.04,0)
2.04
"VER")
8.0^22
"^DD",2,2,.32104,0)
VIETNAM FROM DATE^RDX^^.321;4^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"VIET",X,0) X I $D(X) S DFN=DA D VN^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.32104,.1)

"^DD",2,2,.32104,3)
Enter the date this patient commenced service in the Republic of Vietnam.
"^DD",2,2,.32104,5,1,0)
2^.32101^1
"^DD",2,2,.32104,20,0)
^.3LA^1^1
"^DD",2,2,.32104,20,1,0)
VN
"^DD",2,2,.32104,21,0)
^^6^6^3040402^
"^DD",2,2,.32104,21,1,0)
For this veteran applicant who served in the Republic of Vietnam (DID
"^DD",2,2,.32104,21,2,0)
YOU SERVE IN VIETNAM prompt must be answered YES) enter the date on which
"^DD",2,2,.32104,21,3,0)
service in vietnam commenced [between February 28, 1961 and May 7, 1975].
"^DD",2,2,.32104,21,4,0)
Once the service record is verified only users who hold the designated
"^DD",2,2,.32104,21,5,0)
security key may enter/edit this field.  As long as Vietnam service is
"^DD",2,2,.32104,21,6,0)
indicated this date may not be deleted.                                
"^DD",2,2,.32104,"DEL",1,0)
S DFN=DA D VND^DGLOCK1 I '$D(X)
"^DD",2,2,.32104,"DT")
3040721
"^DD",2,2,.32105,0)
VIETNAM TO DATE^RDX^^.321;5^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"VIET",X,1) X I $D(X) S DFN=DA D VN^DGLOCK
"^DD",2,2,.32105,.1)

"^DD",2,2,.32105,3)
Enter the date this patient ended service in the Republic of Vietnam.
"^DD",2,2,.32105,5,1,0)
2^.32101^2
"^DD",2,2,.32105,20,0)
^.3LA^1^1
"^DD",2,2,.32105,20,1,0)
VN
"^DD",2,2,.32105,21,0)
^^6^6^3040407^
"^DD",2,2,.32105,21,1,0)
For this veteran applicant who served in the Republic of Vietnam (DID
"^DD",2,2,.32105,21,2,0)
YOU SERVE IN VIETNAM prompt must be answered YES) enter the date on which
"^DD",2,2,.32105,21,3,0)
service in Vietnam ended [between February 28, 1961 and May 7, 1975]. Once
"^DD",2,2,.32105,21,4,0)
the service record is verified only user who hold the designated security
"^DD",2,2,.32105,21,5,0)
key may enter/edit this field.  As long as Vietnam service is indicated
"^DD",2,2,.32105,21,6,0)
this date may not be deleted.
"^DD",2,2,.32105,"DEL",1,0)
S DFN=DA D VND^DGLOCK1 I '$D(X)
"^DD",2,2,.32105,"DT")
3040407
"^DD",2,2,.3214,0)
FILIPINO VETERAN PROOF^S^PP:US PASSPORT;BC:US BIRTH CERTIFICATE;BA:REPORT OF BIRTH ABROAD OF US CITIZEN;NA:VERIFICATION OF NATURALIZATION;PR:VERIFICATION OF PERMANENT RESIDENCY;VA:VA COMPENSATION AT FULL DOLLAR RATE;NO:NO PROOF;^.321;14^Q
"^DD",2,2,.3214,21,0)
^.001^5^5^3040303^^^^
"^DD",2,2,.3214,21,1,0)
Enter in this field the documentation that was provided in order to
"^DD",2,2,.3214,21,2,0)
establish US citizenship, lawful permanent US residency, and/or VA
"^DD",2,2,.3214,21,3,0)
Compensation at full-dollar rate for a Filipino Veteran (i.e., a 
"^DD",2,2,.3214,21,4,0)
veteran whose Branch of Service is F. Commonwealth, F. Guerilla, or F.
"^DD",2,2,.3214,21,5,0)
Scouts New)
"^DD",2,2,.3214,"DT")
3040303
"^DD",2,2,.322011,0)
PERSIAN GULF FROM DATE^RDX^^.322;11^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GULF",X) X I $D(X) S DFN=DA,DGX=10 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.322011,3)
TYPE A DATE BETWEEN 8/2/1990 AND TODAY INDICATING THE DATE THIS PATIENT BEGAN SERVING IN THE PERSIAN GULF.
"^DD",2,2,.322011,5,1,0)
2^.32201^1
"^DD",2,2,.322011,21,0)
^^3^3^2930302^^^
"^DD",2,2,.322011,21,1,0)
If this patient served in the Persian Gulf during the war (PERSIAN
"^DD",2,2,.322011,21,2,0)
GULF SERVICE? is answered YES), respond with the date the patient
"^DD",2,2,.322011,21,3,0)
began serving there.  The date must be on or after August 2, 1990.
"^DD",2,2,.322011,"DEL",1,0)
S DFN=DA,DGX=10 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.322011,"DT")
3040721
"^DD",2,2,.322012,0)
PERSIAN GULF TO DATE^RDX^^.322;12^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GULF",X,1) X I $D(X) S DFN=DA,DGX=10 D SVED^DGLOCK
"^DD",2,2,.322012,3)
Enter the date this patient's service in the Persian Gulf ended.  Date must either be null or in the past.
"^DD",2,2,.322012,5,1,0)
2^.32201^2
"^DD",2,2,.322012,21,0)
^^4^4^2920417^^
"^DD",2,2,.322012,21,1,0)
If this patient served in the Persian Gulf during the war, enter the date
"^DD",2,2,.322012,21,2,0)
the patient's service in that region ended.  The date must be after the
"^DD",2,2,.322012,21,3,0)
date selected as PERSIAN GULF FROM DATE which must be on or after August
"^DD",2,2,.322012,21,4,0)
2, 1990.
"^DD",2,2,.322012,"DEL",1,0)
S DFN=DA,DGX=10 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.322012,"DT")
3040303
"^DD",2,2,.322017,0)
SOMALIA FROM DATE^RDX^^.322;17^S %DT="E" D ^%DT S X=Y K:Y<1 X I $D(X) K:'$$VALCON^DGRPMS(DA,"SOM",X) X I $D(X) S DFN=DA,DGX=16 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.322017,3)
Enter the date veteran's service in Somalia began.
"^DD",2,2,.322017,5,1,0)
2^.322016^1
"^DD",2,2,.322017,21,0)
^^3^3^3040402^
"^DD",2,2,.322017,21,1,0)
If this patient served in Somalia (SOMALIA SERVICE INDICATED? is 
"^DD",2,2,.322017,21,2,0)
answered YES), enter the date this patient's service in Somalia
"^DD",2,2,.322017,21,3,0)
began.  This date must be on or after September 28, 1992.
"^DD",2,2,.322017,23,0)
^^1^1^2990802^^^^
"^DD",2,2,.322017,23,1,0)
This is the date Somalia service began.
"^DD",2,2,.322017,"DT")
3040721
"^DD",2,2,.322018,0)
SOMALIA TO DATE^RDX^^.322;18^S %DT="E" D ^%DT S X=Y I $D(X) K:'$$VALCON^DGRPMS(DA,"SOM",X,1) X I $D(X) S DFN=DA,DGX=16 D SVED^DGLOCK
"^DD",2,2,.322018,3)
Enter the date veteran's service in Somalia ended.
"^DD",2,2,.322018,5,1,0)
2^.322016^2
"^DD",2,2,.322018,21,0)
^^2^2^3040402^
"^DD",2,2,.322018,21,1,0)
This is the last date of service in Somalia.  This date must be on or 
"^DD",2,2,.322018,21,2,0)
after September 28, 1992.
"^DD",2,2,.322018,"DT")
3040402
"^DD",2,2,.32202,0)
YUGOSLAVIA FROM DATE^RDX^^.322;20^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"YUG",X) X I $D(X) S DFN=DA,DGX=19 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.32202,3)
Type a date between June 22, 1992 and today indicating the date this patient began serving in the Yugoslavia Conflict.
"^DD",2,2,.32202,5,1,0)
2^.322019^1
"^DD",2,2,.32202,21,0)
^^2^2^3040402^
"^DD",2,2,.32202,21,1,0)
Enter the date that service in the Yugoslavia Conflict began for this
"^DD",2,2,.32202,21,2,0)
patient.  Earliest possible date is 6/22/1992.
"^DD",2,2,.32202,"DT")
3040721
"^DD",2,2,.322021,0)
YUGOSLAVIA TO DATE^RDX^^.322;21^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"YUG",X,1) X I $D(X) S DFN=DA,DGX=19 D SVED^DGLOCK
"^DD",2,2,.322021,3)
Enter the date this patient's service in the Yugoslavia Conflict ended.  Date must be after June 22, 1992.
"^DD",2,2,.322021,5,1,0)
2^.322019^2
"^DD",2,2,.322021,21,0)
^^1^1^3040402^
"^DD",2,2,.322021,21,1,0)
The date service in the Yugoslavia Conflict ended for this patient.
"^DD",2,2,.322021,"DT")
3040402
"^DD",2,2,.3222,0)
LEBANON FROM DATE^RDX^^.322;2^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"LEB",X) X I $D(X) S DFN=DA,DGX=1 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3222,3)
TYPE A DATE AFTER OCTOBER 1, 1983 TO INDICATE THE DATE THIS PATIENT BEGAN HIS SERVICE IN LEBANON
"^DD",2,2,.3222,5,1,0)
2^.3221^1
"^DD",2,2,.3222,21,0)
^^4^4^3040402^
"^DD",2,2,.3222,21,1,0)
For this veteran applicant who served in Lebanon, enter the date which
"^DD",2,2,.3222,21,2,0)
the applicant's service in Lebanon began.  The date must be on or after
"^DD",2,2,.3222,21,3,0)
October 1, 1983.
"^DD",2,2,.3222,21,4,0)
.
"^DD",2,2,.3222,"DEL",1,0)
S DFN=DA,DGX=1 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3222,"DT")
3040721
"^DD",2,2,.3223,0)
LEBANON TO DATE^RDX^^.322;3^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"LEB",X,1) X I $D(X) S DFN=DA,DGX=1 D SVED^DGLOCK
"^DD",2,2,.3223,3)
TYPE A DATE AFTER OCTOBER 1, 1983 INDICATING THE DATE THIS PATIENT'S SERVICE IN LEBANON ENDED.
"^DD",2,2,.3223,5,1,0)
2^.3221^2
"^DD",2,2,.3223,21,0)
^^3^3^3040407^
"^DD",2,2,.3223,21,1,0)
For this patient, enter the date the patient's service in Lebanon ended.
"^DD",2,2,.3223,21,2,0)
The 'LEBANON SERVICE INDICATED?' field must be answered yes and the date
"^DD",2,2,.3223,21,3,0)
in this field must be after October 1, 1983.
"^DD",2,2,.3223,"DEL",1,0)
S DFN=DA,DGX=1 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3223,"DT")
3040407
"^DD",2,2,.3225,0)
GRENADA FROM DATE^RDX^^.322;5^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GREN",X) X I $D(X) S DFN=DA,DGX=4 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3225,3)
TYPE A DATE BETWEEN 10/23/1983 AND 11/21/1983 INDICATING THE DATE THIS PATIENT'S SERVICE IN GRENADA BEGAN.
"^DD",2,2,.3225,5,1,0)
2^.3224^1
"^DD",2,2,.3225,21,0)
^^3^3^2920115^
"^DD",2,2,.3225,21,1,0)
Enter the date which this patient began service in Grenada.  The
"^DD",2,2,.3225,21,2,0)
'GRENADA SERVICE INDICATED?' field must be answered YES and the date
"^DD",2,2,.3225,21,3,0)
entered here must be between October 23, 1983 and November 21, 1983.
"^DD",2,2,.3225,"DEL",1,0)
S DFN=DA,DGX=4 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3225,"DT")
3040721
"^DD",2,2,.3226,0)
GRENADA TO DATE^RDX^^.322;6^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"GREN",X,1) X I $D(X) S DFN=DA,DGX=4 D SVED^DGLOCK
"^DD",2,2,.3226,3)
TYPE A DATE BETWEEN 10/23/1983 AND 11/21/1983 INDICATING THE DATE THE PATIENT'S SERVICE IN GRENADA ENDED.
"^DD",2,2,.3226,5,1,0)
2^.3224^2
"^DD",2,2,.3226,21,0)
^^3^3^2920115^
"^DD",2,2,.3226,21,1,0)
Enter the date which this patient's service in Grenada ended.  The
"^DD",2,2,.3226,21,2,0)
'GRENADA SERVICE INDICATED?' field must be yes and this date must be
"^DD",2,2,.3226,21,3,0)
between October 23, 1983 and November 21, 1983.
"^DD",2,2,.3226,"DEL",1,0)
S DFN=DA,DGX=4 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3226,"DT")
3040303
"^DD",2,2,.3228,0)
PANAMA FROM DATE^RDX^^.322;8^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"PAN",X) X I $D(X) S DFN=DA,DGX=7 D SVED^DGLOCK S:$D(X) DGFRDT=X
"^DD",2,2,.3228,3)
TYPE A DATE BETWEEN 12/20/1989 AND 1/31/1990 INDICATING THE DATE THIS PATIENT BEGAN SERVICE IN PANAMA.
"^DD",2,2,.3228,5,1,0)
2^.3227^1
"^DD",2,2,.3228,21,0)
^^3^3^2920115^
"^DD",2,2,.3228,21,1,0)
If this patient served in Panama (PANAMA SERVICE INDICATED? is answered
"^DD",2,2,.3228,21,2,0)
YES), enter the date this patient's service in Panama began.  The date
"^DD",2,2,.3228,21,3,0)
must be between December 20, 1989 and January 31, 1990.
"^DD",2,2,.3228,"DEL",1,0)
S DFN=DA,DGX=7 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3228,"DT")
3040721
"^DD",2,2,.3229,0)
PANAMA TO DATE^RDX^^.322;9^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"PAN",X,1) X I $D(X) S DFN=DA,DGX=7 D SVED^DGLOCK
"^DD",2,2,.3229,3)
TYPE A DATE BETWEEN 12/20/1989 AND 1/31/1990 INDICATING THE DATE THIS PATIENT'S SERVICE IN PANAMA ENDED.
"^DD",2,2,.3229,5,1,0)
2^.3227^2
"^DD",2,2,.3229,21,0)
^^3^3^2920115^
"^DD",2,2,.3229,21,1,0)
If this patient served during the conflict in Panama (PANAMA SERVICE
"^DD",2,2,.3229,21,2,0)
INDICATED? is YES), enter the date the patient's service there ended.
"^DD",2,2,.3229,21,3,0)
The date must be between December 20, 1989 and January 31, 1990.
"^DD",2,2,.3229,"DEL",1,0)
S DFN=DA,DGX=7 D SVDEL^DGLOCK1 I '$D(X)
"^DD",2,2,.3229,"DT")
3040303
"^DD",2,2,.324,0)
SERVICE DISCHARGE TYPE [LAST]^RP25'X^DIC(25,^.32;4^S DFN=DA I $D(X) D SV^DGLOCK Q
"^DD",2,2,.324,.1)
DISCHARGE TYPE-SERVICE [LAST]
"^DD",2,2,.324,3)
Select from the listing the discharge type from this patient's last episode of military service.
"^DD",2,2,.324,20,0)
^.3LA^1^1
"^DD",2,2,.324,20,1,0)
SVC
"^DD",2,2,.324,21,0)
^^5^5^2920604^^^^
"^DD",2,2,.324,21,1,0)
For this veteran applicant select from the available listing
"^DD",2,2,.324,21,2,0)
the discharge type which s/he received for his/her most recent
"^DD",2,2,.324,21,3,0)
episode of military service.  Once the service record is verified
"^DD",2,2,.324,21,4,0)
only those users who hold the designated security key may enter/edit
"^DD",2,2,.324,21,5,0)
this field.
"^DD",2,2,.324,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.324,"DT")
3040322
"^DD",2,2,.325,0)
SERVICE BRANCH [LAST]^P23'X^DIC(23,^.32;5^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SV^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.325,.1)
BRANCH OF SERVICE, LAST
"^DD",2,2,.325,1,0)
^.1
"^DD",2,2,.325,1,1,0)
2^AODS4^MUMPS
"^DD",2,2,.325,1,1,1)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.325,1,1,2)
S A1B2TAG="PAT" D ^A1B2XFR
"^DD",2,2,.325,1,2,0)
2^AFV1^MUMPS
"^DD",2,2,.325,1,2,1)
Q
"^DD",2,2,.325,1,2,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.325,1,2,"%D",0)
^.101^4^4^3040325^^^^
"^DD",2,2,.325,1,2,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.325,1,2,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.325,1,2,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.325,1,2,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.325,1,2,"DT")
3040325
"^DD",2,2,.325,3)
Select from the listing the branch in which this patient served during his last episode of military service.
"^DD",2,2,.325,20,0)
^.3LA^1^1
"^DD",2,2,.325,20,1,0)
SVC
"^DD",2,2,.325,21,0)
^^5^5^2861007^
"^DD",2,2,.325,21,1,0)
For this veteran applicant select from the available listing
"^DD",2,2,.325,21,2,0)
the branch of service served in during his/her most recent
"^DD",2,2,.325,21,3,0)
episode of military service.  Once the service record is verified
"^DD",2,2,.325,21,4,0)
only those users who hold the designated security key may
"^DD",2,2,.325,21,5,0)
enter/edit this field.
"^DD",2,2,.325,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.325,"DT")
3040412
"^DD",2,2,.326,0)
SERVICE ENTRY DATE [LAST]^RDX^^.32;6^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SV^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=1 D POS^DGINP
"^DD",2,2,.326,.1)
ENTRY DATE-SERVICE [LAST]
"^DD",2,2,.326,1,0)
^.1
"^DD",2,2,.326,1,1,0)
2^AE^MUMPS
"^DD",2,2,.326,1,1,1)
Q
"^DD",2,2,.326,1,1,2)
Q
"^DD",2,2,.326,1,992,0)
2^ADGRU326^MUMPS
"^DD",2,2,.326,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.326,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.326,1,992,"%D",0)
^^9^9^2990921^
"^DD",2,2,.326,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.326,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.326,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.326,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.326,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.326,1,992,"%D",6,0)
interface.
"^DD",2,2,.326,1,992,"%D",7,0)
 
"^DD",2,2,.326,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.326,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.326,1,992,"DT")
2990921
"^DD",2,2,.326,3)
Enter the date the patient entered his last episode of military service.
"^DD",2,2,.326,20,0)
^.3LA^1^1
"^DD",2,2,.326,20,1,0)
SVC
"^DD",2,2,.326,21,0)
^^4^4^2861007^^
"^DD",2,2,.326,21,1,0)
For this veteran applicant enter the date s/he commenced his/her
"^DD",2,2,.326,21,2,0)
most recent episode of military service.  Once the service
"^DD",2,2,.326,21,3,0)
record is verified only those users who hold the designated
"^DD",2,2,.326,21,4,0)
security key may enter/edit this field.
"^DD",2,2,.326,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.326,"DT")
3040721
"^DD",2,2,.327,0)
SERVICE SEPARATION DATE [LAST]^RDX^^.32;7^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SV^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSL") X I $D(X),$D(^DG(43,1)) S SD1=1 D PS^DGINP
"^DD",2,2,.327,.1)
SEPARATION DATE-SERVICE [LAST]
"^DD",2,2,.327,1,0)
^.1
"^DD",2,2,.327,1,992,0)
2^ADGRU327^MUMPS
"^DD",2,2,.327,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.327,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.327,1,992,"%D",0)
^^9^9^2990921^
"^DD",2,2,.327,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.327,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.327,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.327,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.327,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.327,1,992,"%D",6,0)
interface.
"^DD",2,2,.327,1,992,"%D",7,0)
 
"^DD",2,2,.327,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.327,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.327,1,992,"DT")
2990921
"^DD",2,2,.327,3)
Enter the date on which this patient was separated from his last episode of military service.
"^DD",2,2,.327,20,0)
^.3LA^1^1
"^DD",2,2,.327,20,1,0)
SVC
"^DD",2,2,.327,21,0)
^^4^4^2861007^
"^DD",2,2,.327,21,1,0)
For this veteran applicant enter the date s/he ended his/her
"^DD",2,2,.327,21,2,0)
most recent episode of military service.  Once the service
"^DD",2,2,.327,21,3,0)
record is verified only those users who hold the designated
"^DD",2,2,.327,21,4,0)
security key may enter/edit this field.
"^DD",2,2,.327,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.327,"DT")
3040301
"^DD",2,2,.3285,0)
SERVICE SECOND EPISODE?^RSX^Y:YES;N:NO;^.32;19^S DFN=DA D SV^DGLOCK
"^DD",2,2,.3285,.1)
SECOND EPISODE OF SERVICE?
"^DD",2,2,.3285,1,0)
^.1
"^DD",2,2,.3285,1,1,0)
2^AXR9^MUMPS
"^DD",2,2,.3285,1,1,1)
I X'="Y" S DGXRF=.3285 D ^DGDDC Q
"^DD",2,2,.3285,1,1,2)
Q
"^DD",2,2,.3285,1,1,"DT")
3040331
"^DD",2,2,.3285,1,2,0)
^^TRIGGER^2^.32945
"^DD",2,2,.3285,1,2,1)
X ^DD(2,.3285,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P(Y(1),U,20),X=X S DIU=X K Y S X=DIV S X="N" X ^DD(2,.3285,1,2,1.4)
"^DD",2,2,.3285,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$S($D(^DD(2,.3285,0)):$P(^(0),U,3),1:"") S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59),1),X=$E(X)'="Y"
"^DD",2,2,.3285,1,2,1.4)
S DIH=$S($D(^DPT(DIV(0),.32)):^(.32),1:""),DIV=X X "F %=0:0 Q:$L($P(DIH,U,19,99))  S DIH=DIH_U" S %=$P(DIH,U,21,999),DIU=$P(DIH,U,20),^(.32)=$P(DIH,U,1,19)_U_DIV_$S(%]"":U_%,1:""),DIH=2,DIG=.32945 D ^DICR:$N(^DD(DIH,DIG,1,0))>0
"^DD",2,2,.3285,1,2,2)
Q
"^DD",2,2,.3285,1,2,"CREATE CONDITION")
$E(#.3285)'="Y"
"^DD",2,2,.3285,1,2,"CREATE VALUE")
"N"
"^DD",2,2,.3285,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.3285,1,2,"FIELD")
#.32945
"^DD",2,2,.3285,1,3,0)
^^TRIGGER^2^.3291
"^DD",2,2,.3285,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.3285,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="YES" I X S X=DIV S Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" X ^DD(2,.3285,1,3,1.4)
"^DD",2,2,.3285,1,3,1.4)
S DIH=$G(^DPT(DIV(0),.32)),DIV=X S $P(^(.32),U,10)=DIV,DIH=2,DIG=.3291 D ^DICR
"^DD",2,2,.3285,1,3,2)
X ^DD(2,.3285,1,3,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.32)),DIV=X S $P(^(.32),U,10)=DIV,DIH=2,DIG=.3291 D ^DICR
"^DD",2,2,.3285,1,3,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(2,.3285,0)),U,3),Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,19)_":",2),$C(59))'="YES"
"^DD",2,2,.3285,1,3,"CREATE CONDITION")
#.3285'="YES"
"^DD",2,2,.3285,1,3,"CREATE VALUE")
@
"^DD",2,2,.3285,1,3,"DELETE CONDITION")
#.3285'="YES"
"^DD",2,2,.3285,1,3,"DELETE VALUE")
@
"^DD",2,2,.3285,1,3,"DT")
3040407
"^DD",2,2,.3285,1,3,"FIELD")
#.3291
"^DD",2,2,.3285,3)
Enter YES if this patient has more than one episode of military service otherwise enter NO.
"^DD",2,2,.3285,20,0)
^.3LA^1^1
"^DD",2,2,.3285,20,1,0)
SVC
"^DD",2,2,.3285,21,0)
^^3^3^2861006^
"^DD",2,2,.3285,21,1,0)
For this veteran applicant enter 'Y' if s/he has more than one episode of
"^DD",2,2,.3285,21,2,0)
military service, or 'N' if not.  Once the service record is verified
"^DD",2,2,.3285,21,3,0)
only users who hold the designated security key may enter/edit this field.
"^DD",2,2,.3285,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3285,"DT")
3040407
"^DD",2,2,.329,0)
SERVICE DISCHARGE TYPE [NTL]^RP25'X^DIC(25,^.32;9^S DFN=DA D SER1^DGLOCK
"^DD",2,2,.329,.1)
DISCHARGE TYPE-SERVICE [NTL]
"^DD",2,2,.329,3)
Enter the type of discharge given this patient from his next-to-last episode of military service.
"^DD",2,2,.329,20,0)
^.3LA^1^1
"^DD",2,2,.329,20,1,0)
SVC
"^DD",2,2,.329,21,0)
^^7^7^2920604^^^^
"^DD",2,2,.329,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.329,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.329,21,3,0)
select from the available listing the type of discharge received from
"^DD",2,2,.329,21,4,0)
his/her next to last episode of military service.  Once the service
"^DD",2,2,.329,21,5,0)
record is verified only those users who hold the designated security
"^DD",2,2,.329,21,6,0)
key may enter/edit this field.  This field cannot be deleted as long
"^DD",2,2,.329,21,7,0)
as more than one episode of military service is indicated.
"^DD",2,2,.329,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.329,"DT")
3040303
"^DD",2,2,.3291,0)
SERVICE BRANCH [NTL]^P23'X^DIC(23,^.32;10^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SER1^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.3291,.1)
BRANCH OF SERVICE, NTL
"^DD",2,2,.3291,1,0)
^.1
"^DD",2,2,.3291,1,1,0)
2^AFV2^MUMPS
"^DD",2,2,.3291,1,1,1)
Q
"^DD",2,2,.3291,1,1,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.3291,1,1,"%D",0)
^.101^4^4^3040331^^
"^DD",2,2,.3291,1,1,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.3291,1,1,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.3291,1,1,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.3291,1,1,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.3291,1,1,"DT")
3040325
"^DD",2,2,.3291,3)
Enter the branch of service in which the patient served in his next-to-last episode of military service.
"^DD",2,2,.3291,5,1,0)
2^.3285^3
"^DD",2,2,.3291,20,0)
^.3LA^1^1
"^DD",2,2,.3291,20,1,0)
SVC
"^DD",2,2,.3291,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3291,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3291,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3291,21,3,0)
select from the available listing the branch of service s/he served
"^DD",2,2,.3291,21,4,0)
in during his/her next to last episode of military service.  Once the
"^DD",2,2,.3291,21,5,0)
service record is verified only those users who hold the designated
"^DD",2,2,.3291,21,6,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3291,21,7,0)
as long as more than one episode of military service is indicated.
"^DD",2,2,.3291,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3291,"DT")
3040412
"^DD",2,2,.3292,0)
SERVICE ENTRY DATE [NTL]^RDX^^.32;11^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER1^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSNTL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=2 D POS^DGINP
"^DD",2,2,.3292,.1)
ENTRY DATE-SERVICE [NTL]
"^DD",2,2,.3292,1,0)
^.1^^-1
"^DD",2,2,.3292,1,1,0)
2^AF^MUMPS
"^DD",2,2,.3292,1,1,1)
Q
"^DD",2,2,.3292,1,1,2)
Q
"^DD",2,2,.3292,3)
Enter the date this patient commenced his next-to-last episode of military service.
"^DD",2,2,.3292,20,0)
^.3LA^1^1
"^DD",2,2,.3292,20,1,0)
SVC
"^DD",2,2,.3292,21,0)
^^7^7^2880927^^^^
"^DD",2,2,.3292,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3292,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3292,21,3,0)
enter the date on which the next to last episode of service commenced.
"^DD",2,2,.3292,21,4,0)
Once the service record is verified only those users who hold the
"^DD",2,2,.3292,21,5,0)
designated security key may enter/edit this field.  This field cannot
"^DD",2,2,.3292,21,6,0)
be deleted as long as more than one episode of military service is
"^DD",2,2,.3292,21,7,0)
indicated.
"^DD",2,2,.3292,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3292,"DT")
3040721
"^DD",2,2,.3293,0)
SERVICE SEPARATION DATE [NTL]^RDX^^.32;12^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER1^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSNTL") X I $D(X),$D(^DG(43,1)) S SD1=2 D PS^DGINP
"^DD",2,2,.3293,.1)
SEPARATION DATE-SERVICE [NTL]
"^DD",2,2,.3293,3)
Enter the date this patient ended his next-to-last episode of military service.
"^DD",2,2,.3293,20,0)
^.3LA^1^1
"^DD",2,2,.3293,20,1,0)
SVC
"^DD",2,2,.3293,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3293,21,1,0)
For this veteran applicant who has at least two episodes of military
"^DD",2,2,.3293,21,2,0)
service (ANY OTHER PERIODS OF SERVICE prompt must be answered YES)
"^DD",2,2,.3293,21,3,0)
enter the date on which the next to last episode of service ended.
"^DD",2,2,.3293,21,4,0)
Once the service record is verified only those users who hold the
"^DD",2,2,.3293,21,5,0)
designated security key may enter/edit this field.  This field cannot
"^DD",2,2,.3293,21,6,0)
be deleted as long as more than one episode of military service is
"^DD",2,2,.3293,21,7,0)
indicated.
"^DD",2,2,.3293,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3293,"DT")
3040517
"^DD",2,2,.32945,0)
SERVICE THIRD EPISODE?^RSX^Y:YES;N:NO;^.32;20^S DFN=DA D SV^DGLOCK I "N"'[$G(X),$D(^DPT(DFN,.32)),$P(^(.32),U,19)'="Y" W !?4,*7,"Other Periods of service are not indicated...NO EDITING!" K X
"^DD",2,2,.32945,.1)
THIRD EPISODE OF SERVICE?
"^DD",2,2,.32945,1,0)
^.1
"^DD",2,2,.32945,1,1,0)
2^AXR10^MUMPS
"^DD",2,2,.32945,1,1,1)
I X'="Y" S DGXRF=.32945 D ^DGDDC Q
"^DD",2,2,.32945,1,1,2)
Q
"^DD",2,2,.32945,1,2,0)
^^TRIGGER^2^.3296
"^DD",2,2,.32945,1,2,1)
X ^DD(2,.32945,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.32)),DIV=X S $P(^(.32),U,15)=DIV,DIH=2,DIG=.3296 D ^DICR
"^DD",2,2,.32945,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(2,.32945,0)),U,3) S X=$P($P(Y(1),$C(59)_Y(0)_":",2),$C(59))'="YES"
"^DD",2,2,.32945,1,2,2)
X ^DD(2,.32945,1,2,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P(Y(1),U,15),X=X S DIU=X K Y S X="" S DIH=$G(^DPT(DIV(0),.32)),DIV=X S $P(^(.32),U,15)=DIV,DIH=2,DIG=.3296 D ^DICR
"^DD",2,2,.32945,1,2,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$C(59)_$P($G(^DD(2,.32945,0)),U,3),Y(1)=$S($D(^DPT(D0,.32)):^(.32),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,20)_":",2),$C(59))'="YES"
"^DD",2,2,.32945,1,2,"CREATE CONDITION")
#.32945'="YES"
"^DD",2,2,.32945,1,2,"CREATE VALUE")
@
"^DD",2,2,.32945,1,2,"DELETE CONDITION")
#.32945'="YES"
"^DD",2,2,.32945,1,2,"DELETE VALUE")
@
"^DD",2,2,.32945,1,2,"DT")
3040407
"^DD",2,2,.32945,1,2,"FIELD")
#.3296
"^DD",2,2,.32945,3)
Enter YES if this patient served more than two episodes of military service otherwise enter NO.
"^DD",2,2,.32945,5,1,0)
2^.3285^2
"^DD",2,2,.32945,20,0)
^.3LA^1^1
"^DD",2,2,.32945,20,1,0)
SVC
"^DD",2,2,.32945,21,0)
^^5^5^2980702^^^^
"^DD",2,2,.32945,21,1,0)
Enter 'Y' if this veteran applicant has at least three episodes of
"^DD",2,2,.32945,21,2,0)
military service, or 'N' if not.  The ANY OTHER PERIODS OF SERVICE
"^DD",2,2,.32945,21,3,0)
prompt must be answered YES in order to enter a third episode of
"^DD",2,2,.32945,21,4,0)
military service.  Once the service record is verified only those
"^DD",2,2,.32945,21,5,0)
users who hold the designated security key may enter/edit this field.
"^DD",2,2,.32945,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.32945,"DT")
3040407
"^DD",2,2,.3295,0)
SERVICE DISCHARGE TYPE [NNTL]^RP25'X^DIC(25,^.32;14^S DFN=DA D SER2^DGLOCK
"^DD",2,2,.3295,.1)
DISCHARGE TYPE-SERVICE [NNTL]
"^DD",2,2,.3295,1,0)
^.1^^0
"^DD",2,2,.3295,3)
For this third episode of military service enter the discharge type given this patient.
"^DD",2,2,.3295,5,1,0)
2^.32945^1
"^DD",2,2,.3295,20,0)
^.3LA^1^1
"^DD",2,2,.3295,20,1,0)
SVC
"^DD",2,2,.3295,21,0)
^^7^7^2920604^^^^
"^DD",2,2,.3295,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3295,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) select
"^DD",2,2,.3295,21,3,0)
from the available listing the discharge type received from the third most
"^DD",2,2,.3295,21,4,0)
recent episode of military service.  Once the service record is verified
"^DD",2,2,.3295,21,5,0)
only those users who hold the designated security key may enter/edit
"^DD",2,2,.3295,21,6,0)
this field.  This field cannot be deleted as long as more than two
"^DD",2,2,.3295,21,7,0)
episodes of military service are indicated.
"^DD",2,2,.3295,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3295,"DT")
3040303
"^DD",2,2,.3296,0)
SERVICE BRANCH [NNTL]^P23'X^DIC(23,^.32;15^S DFN=DA K:X=$O(^DIC(23,"B","B.E.C.","")) X I $D(X) D SER2^DGLOCK S DGCOMBR=$G(Y) Q
"^DD",2,2,.3296,.1)
BRANCH OF SERVICE, NNTL
"^DD",2,2,.3296,1,0)
^.1
"^DD",2,2,.3296,1,1,0)
2^AFV3^MUMPS
"^DD",2,2,.3296,1,1,1)
Q
"^DD",2,2,.3296,1,1,2)
I $P($G(^DPT(DA,.321)),U,14)]"" D FVP^DGRPMS
"^DD",2,2,.3296,1,1,"%D",0)
^^4^4^3040325^
"^DD",2,2,.3296,1,1,"%D",1,0)
This MUMPS cross-reference acts like a trigger cross-reference.
"^DD",2,2,.3296,1,1,"%D",2,0)
If the Service Branch [Last], Service Branch [NTL] and Service Branch [NNTL]
"^DD",2,2,.3296,1,1,"%D",3,0)
fields do not contain a Filipino Veteran branch of service, the Filipino
"^DD",2,2,.3296,1,1,"%D",4,0)
Vet Proof field (#.3214) is deleted.
"^DD",2,2,.3296,1,1,"DT")
3040325
"^DD",2,2,.3296,3)
For this third episode of military service enter the branch in which this patient served.
"^DD",2,2,.3296,5,1,0)
2^.32945^2
"^DD",2,2,.3296,20,0)
^.3LA^1^1
"^DD",2,2,.3296,20,1,0)
SVC
"^DD",2,2,.3296,21,0)
^^7^7^2861008^^^^
"^DD",2,2,.3296,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3296,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) select
"^DD",2,2,.3296,21,3,0)
from the available listing the service branch served in during his/her
"^DD",2,2,.3296,21,4,0)
third most recent episode of service.  Once the service record is
"^DD",2,2,.3296,21,5,0)
verified only those users who hold the designated security key may
"^DD",2,2,.3296,21,6,0)
enter/edit this field.  This field cannot be deleted as long as more
"^DD",2,2,.3296,21,7,0)
than two episodes of military service are indicated.
"^DD",2,2,.3296,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3296,"DT")
3040412
"^DD",2,2,.3297,0)
SERVICE ENTRY DATE [NNTL]^RDX^^.32;16^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER2^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,0,"MSNNTL") X I $D(X) S DGFRDT=X I $D(^DG(43,1)) S SD1=3 D POS^DGINP
"^DD",2,2,.3297,.1)
ENTRY DATE-SERVICE [NNTL]
"^DD",2,2,.3297,3)
For this third episode of military service enter the date on which the patient commenced serving.
"^DD",2,2,.3297,20,0)
^.3LA^1^1
"^DD",2,2,.3297,20,1,0)
SVC
"^DD",2,2,.3297,21,0)
^^6^6^2861008^^^
"^DD",2,2,.3297,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3297,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) enter
"^DD",2,2,.3297,21,3,0)
the date on which the third most recent episode of service commenced.  Once
"^DD",2,2,.3297,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.3297,21,5,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3297,21,6,0)
as long as more than two episodes of military service are indicated.
"^DD",2,2,.3297,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3297,"DT")
3040721
"^DD",2,2,.3298,0)
SERVICE SEPARATION DATE [NNTL]^RDX^^.32;17^S %DT="E",%DT(0)=-DT D ^%DT K %DT S X=Y K:Y<1 X I $D(X) S DFN=DA D SER2^DGLOCK I $D(X) K:'$$VALMSE^DGRPMS(DFN,X,1,"MSNNTL") X I $D(X),$D(^DG(43,1)) S SD1=3 D PS^DGINP
"^DD",2,2,.3298,.1)
SEPARATION DATE-SERVICE [NNTL]
"^DD",2,2,.3298,3)
For this third episode of military service enter the date on which the service terminated.
"^DD",2,2,.3298,20,0)
^.3LA^1^1
"^DD",2,2,.3298,20,1,0)
SVC
"^DD",2,2,.3298,21,0)
^^6^6^2861008^^
"^DD",2,2,.3298,21,1,0)
For this veteran applicant who has at least three episodes of military
"^DD",2,2,.3298,21,2,0)
service (ANOTHER PERIOD OF SERVICE prompt must be answered YES) enter
"^DD",2,2,.3298,21,3,0)
the date on which the third most recent episode of service ended.  Once
"^DD",2,2,.3298,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.3298,21,5,0)
security key may enter/edit this field.  This field cannot be deleted
"^DD",2,2,.3298,21,6,0)
as long as more than two episodes of military service are indicated.
"^DD",2,2,.3298,"DEL",1,0)
S DFN=DA D SV^DGLOCK I '$D(X)
"^DD",2,2,.3298,"DT")
3040517
"^DD",2,2,.3721,0)
RATED DISABILITIES (VA)^2.04P^^.372;0
"^DD",2,2,.3721,3)
Choose from the available listing those disabilities fro which this patient has been rated by the VA.
"^DD",2,2,.3721,20,0)
^.3LA^1^1
"^DD",2,2,.3721,20,1,0)
DIS1
"^DD",2,2,.3721,21,0)
^^3^3^2911214^^^^
"^DD",2,2,.3721,21,1,0)
From the available listing choose and enter conditions for which the
"^DD",2,2,.3721,21,2,0)
applicant has been verified as being service connected.  Only users who
"^DD",2,2,.3721,21,3,0)
hold the designated security key may enter/edit this field.
"^DD",2,2,.526,0)
POW CONFINEMENT LOCATION^RP22'X^DIC(22,^.52;6^S DFN=DA,DGCOMLOC=X D POW^DGLOCK
"^DD",2,2,.526,.1)
POW WAR
"^DD",2,2,.526,3)
For this former POW enter the war in which confined.
"^DD",2,2,.526,5,1,0)
2^.525^1
"^DD",2,2,.526,20,0)
^.3LA^1^1
"^DD",2,2,.526,20,1,0)
PW
"^DD",2,2,.526,21,0)
^^6^6^2981123^^^^
"^DD",2,2,.526,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.526,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.526,21,3,0)
war during which confined.  Once the service record is verified only
"^DD",2,2,.526,21,4,0)
those users who hold the designated security key may enter/edit this
"^DD",2,2,.526,21,5,0)
field.  This field cannot be deleted as long as applicant is
"^DD",2,2,.526,21,6,0)
identified as a former POW.
"^DD",2,2,.526,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.526,"DT")
3040322
"^DD",2,2,.527,0)
POW FROM DATE^RDX^^.52;7^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"POW",X) X I $D(X) S DFN=DA D POW^DGLOCK I $D(X) S DGFRDT=X D DOB^DGHELP
"^DD",2,2,.527,.1)

"^DD",2,2,.527,3)
For this former POW enter the date confinement commenced.
"^DD",2,2,.527,5,1,0)
2^.525^2
"^DD",2,2,.527,20,0)
^.3LA^1^1
"^DD",2,2,.527,20,1,0)
PW
"^DD",2,2,.527,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.527,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.527,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.527,21,3,0)
date on which confinement commenced.  Once
"^DD",2,2,.527,21,4,0)
the service record is verified only those users who hold the designated
"^DD",2,2,.527,21,5,0)
security key may enter/edit this field.  This field cannot be
"^DD",2,2,.527,21,6,0)
deleted as long as applicant is identified as a former POW.
"^DD",2,2,.527,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.527,"DT")
3040721
"^DD",2,2,.528,0)
POW TO DATE^RDX^^.52;8^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"POW",X,1) X I $D(X) S DFN=DA D POW^DGLOCK I $D(X) D DOB^DGHELP
"^DD",2,2,.528,.1)

"^DD",2,2,.528,3)
For this former POW enter the date confinement ended.
"^DD",2,2,.528,5,1,0)
2^.525^3
"^DD",2,2,.528,20,0)
^.3LA^1^1
"^DD",2,2,.528,20,1,0)
PW
"^DD",2,2,.528,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.528,21,1,0)
For this veteran applicant who was confined as a prisoner of war
"^DD",2,2,.528,21,2,0)
(WERE YOU A PRISONER OF WAR prompt must be answered YES) enter the
"^DD",2,2,.528,21,3,0)
date on which confinement ended.  Once the
"^DD",2,2,.528,21,4,0)
service record is verified only those users who hold the designated
"^DD",2,2,.528,21,5,0)
security key may enter/edit this field.  This field cannot be
"^DD",2,2,.528,21,6,0)
deleted as long as applicant is identified as a former POW.
"^DD",2,2,.528,"DEL",1,0)
S DFN=DA D POWD^DGLOCK1 I '$D(X)
"^DD",2,2,.528,"DT")
3040303
"^DD",2,2,.5292,0)
COMBAT SERVICE LOCATION^RP22'X^DIC(22,^.52;12^S DFN=DA S DGCOMLOC=X D COM^DGLOCK
"^DD",2,2,.5292,.1)
COMBAT WHERE
"^DD",2,2,.5292,3)
For this combat veteran enter the war in which combat service was incurred.
"^DD",2,2,.5292,5,1,0)
2^.5291^1
"^DD",2,2,.5292,20,0)
^.3LA^1^1
"^DD",2,2,.5292,20,1,0)
CS
"^DD",2,2,.5292,21,0)
^^6^6^2861007^^^
"^DD",2,2,.5292,21,1,0)
For this veteran applicant who served in a combat zone (IN COMBAT
"^DD",2,2,.5292,21,2,0)
prompt must be answered YES) enter the zone in which s/he
"^DD",2,2,.5292,21,3,0)
served.  Once the service record is verified only those users
"^DD",2,2,.5292,21,4,0)
who hold the designated security key may enter/edit this field.
"^DD",2,2,.5292,21,5,0)
This field cannot be deleted as long as combat service is
"^DD",2,2,.5292,21,6,0)
indicated.
"^DD",2,2,.5292,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5292,"DT")
3040408
"^DD",2,2,.5293,0)
COMBAT FROM DATE^RDX^^.52;13^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"COMB",X) X I $D(X) S DFN=DA D COM^DGLOCK I $D(X) S DGFRDT=X D DOB^DGHELP
"^DD",2,2,.5293,.1)

"^DD",2,2,.5293,3)
For this combat veteran enter the date combat service commenced.
"^DD",2,2,.5293,5,1,0)
2^.5291^2
"^DD",2,2,.5293,20,0)
^.3LA^1^1
"^DD",2,2,.5293,20,1,0)
CS
"^DD",2,2,.5293,21,0)
^^6^6^2910116^^^^
"^DD",2,2,.5293,21,1,0)
For this veteran who served in a combat zone (IN COMBAT prompt
"^DD",2,2,.5293,21,2,0)
must be answered YES) enter the date on which combat service
"^DD",2,2,.5293,21,3,0)
commenced.  Once the service record is
"^DD",2,2,.5293,21,4,0)
verified only those users who hold the designated security key
"^DD",2,2,.5293,21,5,0)
may enter/edit this field.  This field cannot be deleted as long
"^DD",2,2,.5293,21,6,0)
as combat service is indicated.
"^DD",2,2,.5293,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5293,"DT")
3040721
"^DD",2,2,.5294,0)
COMBAT TO DATE^RDX^^.52;14^S %DT="E" D ^%DT S X=Y K:'$$VALCON^DGRPMS(DA,"COMB",X,1) X I $D(X) S DFN=DA D COM^DGLOCK I $D(X) D DOB^DGHELP
"^DD",2,2,.5294,.1)

"^DD",2,2,.5294,3)
For this combat veteran enter the date combat service ended.
"^DD",2,2,.5294,5,1,0)
2^.5291^3
"^DD",2,2,.5294,20,0)
^.3LA^1^1
"^DD",2,2,.5294,20,1,0)
CS
"^DD",2,2,.5294,21,0)
^^6^6^2910116^^^
"^DD",2,2,.5294,21,1,0)
For this veteran who served in a combat zone (IN COMBAT prompt must
"^DD",2,2,.5294,21,2,0)
be answered YES) enter the date on which combat service ended.
"^DD",2,2,.5294,21,3,0)
Once the service record is verified
"^DD",2,2,.5294,21,4,0)
only those users who hold the designated security key may
"^DD",2,2,.5294,21,5,0)
enter/edit this field.  This field cannot be deleted as long as
"^DD",2,2,.5294,21,6,0)
combat service is indicated.
"^DD",2,2,.5294,"DEL",1,0)
S DFN=DA D COMD^DGLOCK1 I '$D(X)
"^DD",2,2,.5294,"DT")
3040408
"^DD",2,2.04,0)
RATED DISABILITIES (VA) SUB-FIELD^NL^3^3
"^DD",2,2.04,0,"NM","RATED DISABILITIES (VA)")

"^DD",2,2.04,.01,0)
RATED DISABILITIES (VA)^MP31'X^DIC(31,^0;1^I $D(X) D EK^DGLOCK Q
"^DD",2,2.04,.01,3)
Enter the disability conditions for this patient.  Select from the available list.
"^DD",2,2.04,.01,21,0)
^^2^2^2860930^
"^DD",2,2.04,.01,21,1,0)
From the available listing choose and enter conditions for which the
"^DD",2,2.04,.01,21,2,0)
applicant has been verified as being service connected.
"^DD",2,2.04,.01,"DEL",1,0)
D EK^DGLOCK I '$D(X)
"^DD",2,2.04,.01,"DT")
3030722
"^DD",2,2.04,2,0)
DISABILITY %^RNJ3,0X^^0;2^K:+X'=X!(X>100)!(X<0)!(X?.E1"."1N.N) X I $D(X) D EK^DGLOCK
"^DD",2,2.04,2,3)
Enter the disability % for this condition on this patient.
"^DD",2,2.04,2,21,0)
^^3^3^2911214^
"^DD",2,2.04,2,21,1,0)
Enter the percentage at which the VA rated this disability for this
"^DD",2,2.04,2,21,2,0)
patient.  Only users who hold the designated security key may enter/edit
"^DD",2,2.04,2,21,3,0)
this field.
"^DD",2,2.04,2,"DEL",1,0)
D EK^DGLOCK I '$D(X)
"^DD",2,2.04,2,"DT")
3030722
"^DD",2,2.04,3,0)
SERVICE CONNECTED^SX^0:NO;1:YES;^0;3^S DFN=DA(1) D:X SC^DGLOCK1 I $D(X) D EK^DGLOCK 
"^DD",2,2.04,3,3)
Enter 'Y' if the patient is service connected for this disability, 'N' if not.
"^DD",2,2.04,3,21,0)
^^2^2^2911214^
"^DD",2,2.04,3,21,1,0)
Enter whether or not this rated disability was rated as service connected.
"^DD",2,2.04,3,21,2,0)
Only users who hold the designated security key may enter/edit this field.
"^DD",2,2.04,3,"DEL",1,0)
D EK^DGLOCK I '$D(X)
"^DD",2,2.04,3,"DT")
3030722
"^DD",23,23,0)
FIELD^NL^1^3
"^DD",23,23,0,"DDA")
N
"^DD",23,23,0,"DT")
3040224
"^DD",23,23,0,"IX","B",23,.01)

"^DD",23,23,0,"IX","C",23,1)

"^DD",23,23,0,"NM","BRANCH OF SERVICE")

"^DD",23,23,0,"PT",2,.325)

"^DD",23,23,0,"PT",2,.3291)

"^DD",23,23,0,"PT",2,.3296)

"^DD",23,23,0,"PT",2.312,3.02)

"^DD",23,23,0,"PT",210.06,1)

"^DD",23,23,0,"PT",355.8,.03)

"^DD",23,23,0,"PT",500,30.02)

"^DD",23,23,0,"PT",500,30.08)

"^DD",23,23,0,"PT",500,30.14)

"^DD",23,23,0,"PT",11500.1,.04)

"^DD",23,23,0,"SCR")
I X'["B.E.C."
"^DD",23,23,.001,0)
NUMBER^NJ2,0^^ ^K:+X'=X!(X>14)!(X<1)!(X?.E1"."1N.N) X
"^DD",23,23,.001,3)
Type a Number between 1 and 14, 0 Decimal Digits
"^DD",23,23,.001,21,0)
^.001^5^5^3040224^^^^
"^DD",23,23,.001,21,1,0)
This filed contains the internal entry number for this branch of
"^DD",23,23,.001,21,2,0)
service.  This number may be used by various software packages.
"^DD",23,23,.001,21,3,0)
This must not be edited and entries must not be added or deleted
"^DD",23,23,.001,21,4,0)
unless done through a software upgrade of the MAS package.
"^DD",23,23,.001,21,5,0)
|
"^DD",23,23,.001,"DT")
3040224
"^DD",23,23,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<2) X
"^DD",23,23,.01,1,0)
^.1
"^DD",23,23,.01,1,1,0)
23^B
"^DD",23,23,.01,1,1,1)
S ^DIC(23,"B",$E(X,1,30),DA)=""
"^DD",23,23,.01,1,1,2)
K ^DIC(23,"B",$E(X,1,30),DA)
"^DD",23,23,.01,3)
Answer must be 2-30 characters in length.
"^DD",23,23,.01,21,0)
^.001^4^4^3040224^^^^
"^DD",23,23,.01,21,1,0)
This field contains that NAME of the Branch of Service.  It should
"^DD",23,23,.01,21,2,0)
not be altered or deleted unless done through an upgrade of an MAS
"^DD",23,23,.01,21,3,0)
package installation.
"^DD",23,23,.01,21,4,0)
|
"^DD",23,23,.01,"DT")
3040224
"^DD",23,23,1,0)
ABBREVIATION^F^^0;2^K:X[""""!(X'?.ANP)!(X<0) X I $D(X) K:$L(X)>10!($L(X)<1) X
"^DD",23,23,1,1,0)
^.1
"^DD",23,23,1,1,1,0)
23^C
"^DD",23,23,1,1,1,1)
S ^DIC(23,"C",$E(X,1,30),DA)=""
"^DD",23,23,1,1,1,2)
K ^DIC(23,"C",$E(X,1,30),DA)
"^DD",23,23,1,3)
ANSWER MUST BE 1-10 CHARACTERS IN LENGTH
"^DD",23,23,1,21,0)
^^3^3^2930127^^^
"^DD",23,23,1,21,1,0)
This field contains a synonym or shortened name associated with a
"^DD",23,23,1,21,2,0)
specific branch of service.
"^DD",23,23,1,21,3,0)
|
"^DD",27.16,27.16,.08,0)
INACTIVE?^S^1:YES;^0;8^Q
"^DD",27.16,27.16,.08,3)
Should this EGT setting be inactivated?
"^DD",27.16,27.16,.08,21,0)
^^2^2^3031120^
"^DD",27.16,27.16,.08,21,1,0)
This field is populated automatically when a new Enrollment Group 
"^DD",27.16,27.16,.08,21,2,0)
Threshold is set, to prevent problems with future EGT settings.
"^DD",27.16,27.16,.08,"DT")
3031120
"^DIC",23,23,0)
BRANCH OF SERVICE^23s
"^DIC",23,23,0,"GL")
^DIC(23,
"^DIC",23,23,"%D",0)
^1.001^2^2^3040323^^^^
"^DIC",23,23,"%D",1,0)
The file contains the branches of service in which a person may have
"^DIC",23,23,"%D",2,0)
served (or be serving) in the military.
"^DIC",23,"B","BRANCH OF SERVICE",23)

**INSTALL NAME**
IVM*2.0*56
"BLD",4379,0)
IVM*2.0*56^INCOME VERIFICATION MATCH^0^3040820^y
"BLD",4379,4,0)
^9.64PA^^
"BLD",4379,"ABPKG")
n
"BLD",4379,"INIT")

"BLD",4379,"KRN",0)
^9.67PA^8989.52^19
"BLD",4379,"KRN",.4,0)
.4
"BLD",4379,"KRN",.401,0)
.401
"BLD",4379,"KRN",.402,0)
.402
"BLD",4379,"KRN",.403,0)
.403
"BLD",4379,"KRN",.5,0)
.5
"BLD",4379,"KRN",.84,0)
.84
"BLD",4379,"KRN",3.6,0)
3.6
"BLD",4379,"KRN",3.8,0)
3.8
"BLD",4379,"KRN",9.2,0)
9.2
"BLD",4379,"KRN",9.8,0)
9.8
"BLD",4379,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",4379,"KRN",9.8,"NM",1,0)
IVMPRECA^^0^B16308390
"BLD",4379,"KRN",9.8,"NM",2,0)
IVMPTRN8^^0^B51807026
"BLD",4379,"KRN",9.8,"NM",3,0)
IVMLDEM4^^0^B32076695
"BLD",4379,"KRN",9.8,"NM","B","IVMLDEM4",3)

"BLD",4379,"KRN",9.8,"NM","B","IVMPRECA",1)

"BLD",4379,"KRN",9.8,"NM","B","IVMPTRN8",2)

"BLD",4379,"KRN",19,0)
19
"BLD",4379,"KRN",19.1,0)
19.1
"BLD",4379,"KRN",101,0)
101
"BLD",4379,"KRN",409.61,0)
409.61
"BLD",4379,"KRN",771,0)
771
"BLD",4379,"KRN",870,0)
870
"BLD",4379,"KRN",8989.51,0)
8989.51
"BLD",4379,"KRN",8989.52,0)
8989.52
"BLD",4379,"KRN",8994,0)
8994
"BLD",4379,"KRN","B",.4,.4)

"BLD",4379,"KRN","B",.401,.401)

"BLD",4379,"KRN","B",.402,.402)

"BLD",4379,"KRN","B",.403,.403)

"BLD",4379,"KRN","B",.5,.5)

"BLD",4379,"KRN","B",.84,.84)

"BLD",4379,"KRN","B",3.6,3.6)

"BLD",4379,"KRN","B",3.8,3.8)

"BLD",4379,"KRN","B",9.2,9.2)

"BLD",4379,"KRN","B",9.8,9.8)

"BLD",4379,"KRN","B",19,19)

"BLD",4379,"KRN","B",19.1,19.1)

"BLD",4379,"KRN","B",101,101)

"BLD",4379,"KRN","B",409.61,409.61)

"BLD",4379,"KRN","B",771,771)

"BLD",4379,"KRN","B",870,870)

"BLD",4379,"KRN","B",8989.51,8989.51)

"BLD",4379,"KRN","B",8989.52,8989.52)

"BLD",4379,"KRN","B",8994,8994)

"BLD",4379,"QUES",0)
^9.62^^
"BLD",4379,"REQB",0)
^9.611^3^3
"BLD",4379,"REQB",1,0)
IVM*2.0*10^2
"BLD",4379,"REQB",2,0)
IVM*2.0*58^2
"BLD",4379,"REQB",3,0)
IVM*2.0*98^2
"BLD",4379,"REQB","B","IVM*2.0*10",1)

"BLD",4379,"REQB","B","IVM*2.0*58",2)

"BLD",4379,"REQB","B","IVM*2.0*98",3)

"MBREQ")
0
"PKG",220,-1)
1^1
"PKG",220,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",220,20,0)
^9.402P^^
"PKG",220,22,0)
^9.49I^1^1
"PKG",220,22,1,0)
2.0^2941021
"PKG",220,22,1,"PAH",1,0)
56^3040820
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","IVMLDEM4")
0^3^B32076695
"RTN","IVMLDEM4",1,0)
IVMLDEM4 ;ALB/KCL,PJR - IVM DEMOGRAPHIC UPLOAD/DELETE FIELDS ; 6/29/04 5:28pm
"RTN","IVMLDEM4",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**5,10,56**; 21-OCT-94
"RTN","IVMLDEM4",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMLDEM4",4,0)
 ;
"RTN","IVMLDEM4",5,0)
 ;
"RTN","IVMLDEM4",6,0)
UF ; - (action) select uploadable demographic fields for filing
"RTN","IVMLDEM4",7,0)
 ;
"RTN","IVMLDEM4",8,0)
 ;  Input:  IVMWHERE  --  as where the action is coming from 
"RTN","IVMLDEM4",9,0)
 ;
"RTN","IVMLDEM4",10,0)
 ;                    --  If action from UPLOADABLE list:
"RTN","IVMLDEM4",11,0)
 ;                          array of uploadable fields as
"RTN","IVMLDEM4",12,0)
 ;                          ^TMP("IVMUPLOAD",$J,"IDX",CTR,CTR)=dfn^da(2)^da(1)^da^ivm field value^pointer to file (#1)^dhcp field number^dhcp field name
"RTN","IVMLDEM4",13,0)
 ;
"RTN","IVMLDEM4",14,0)
 ;
"RTN","IVMLDEM4",15,0)
 ; - generic seletor used within list manager action
"RTN","IVMLDEM4",16,0)
 N VALMY
"RTN","IVMLDEM4",17,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IVMLDEM4",18,0)
 Q:'$D(VALMY)
"RTN","IVMLDEM4",19,0)
 ;
"RTN","IVMLDEM4",20,0)
 D CHECKS
"RTN","IVMLDEM4",21,0)
 ;
"RTN","IVMLDEM4",22,0)
 S IVMENT4=0 F  S IVMENT4=$O(VALMY(IVMENT4)) Q:'IVMENT4  D
"RTN","IVMLDEM4",23,0)
 .;
"RTN","IVMLDEM4",24,0)
 .S IVMINDEX=$G(^TMP("IVMUPLOAD",$J,"IDX",IVMENT4,IVMENT4)) I IVMINDEX']"" Q
"RTN","IVMLDEM4",25,0)
 .;
"RTN","IVMLDEM4",26,0)
 .; - check to see if selection is an address field
"RTN","IVMLDEM4",27,0)
 .S IVMADDR=$$ADDR^IVMLDEM6(+IVMINDEX,$P(IVMINDEX,"^",2),$P(IVMINDEX,"^",3),$P(IVMINDEX,"^",4),IVMPPICK)
"RTN","IVMLDEM4",28,0)
 .;
"RTN","IVMLDEM4",29,0)
 .Q:IVMADDR
"RTN","IVMLDEM4",30,0)
 .;
"RTN","IVMLDEM4",31,0)
 .; - ask user if they are sure they want to update field
"RTN","IVMLDEM4",32,0)
 .D RUSURE^IVMLDEMU($P(IVMINDEX,"^",8),"update") I IVMOUT!'IVMSURE Q
"RTN","IVMLDEM4",33,0)
 .;
"RTN","IVMLDEM4",34,0)
 .W !,"Updating "_$P(IVMINDEX,"^",8)_" field... "
"RTN","IVMLDEM4",35,0)
 .;
"RTN","IVMLDEM4",36,0)
 .; - upload value received from IVM into DHCP field
"RTN","IVMLDEM4",37,0)
 .D UPLOAD^IVMLDEMU(DFN,$P(IVMINDEX,"^",6),$P(IVMINDEX,"^",7),$P(IVMINDEX,"^",5))
"RTN","IVMLDEM4",38,0)
 .;
"RTN","IVMLDEM4",39,0)
 .; - remove entry from file (#301.5)
"RTN","IVMLDEM4",40,0)
 .D DELENT^IVMLDEMU($P(IVMINDEX,"^",2),$P(IVMINDEX,"^",3),$P(IVMINDEX,"^",4)) W "completed."
"RTN","IVMLDEM4",41,0)
 .;
"RTN","IVMLDEM4",42,0)
 ;
"RTN","IVMLDEM4",43,0)
 ; - hold display before building list
"RTN","IVMLDEM4",44,0)
 D PAUSE^VALM1
"RTN","IVMLDEM4",45,0)
 ;
"RTN","IVMLDEM4",46,0)
 ; - init the list and re-display to the user
"RTN","IVMLDEM4",47,0)
 D INIT^IVMLDEM2
"RTN","IVMLDEM4",48,0)
 ;
"RTN","IVMLDEM4",49,0)
DEQ ; clean-up variables
"RTN","IVMLDEM4",50,0)
 D QACTION
"RTN","IVMLDEM4",51,0)
 Q
"RTN","IVMLDEM4",52,0)
 ;
"RTN","IVMLDEM4",53,0)
 ;
"RTN","IVMLDEM4",54,0)
DF ; - (action) select uploadable/non-uploadable demographic fields for deletion
"RTN","IVMLDEM4",55,0)
 ;
"RTN","IVMLDEM4",56,0)
 ;  Input:  IVMWHERE  --  as where the action is coming from 
"RTN","IVMLDEM4",57,0)
 ;
"RTN","IVMLDEM4",58,0)
 ;                    --  If action from UPLOADABLE list:
"RTN","IVMLDEM4",59,0)
 ;                          array of uploadable fields as
"RTN","IVMLDEM4",60,0)
 ;                          ^TMP("IVMUPLOAD",$J,"IDX",CTR,CTR)=dfn^da(2)^da(1)^da^ivm field value^pointer to file (#1)^dhcp field number^dhcp field name
"RTN","IVMLDEM4",61,0)
 ;
"RTN","IVMLDEM4",62,0)
 ;                        OR
"RTN","IVMLDEM4",63,0)
 ;
"RTN","IVMLDEM4",64,0)
 ;                    --  If action from NON-UPLOADABLE list:
"RTN","IVMLDEM4",65,0)
 ;                          array of non-uploadable fields as
"RTN","IVMLDEM4",66,0)
 ;                          ^TMP("IVMNONUP",$J,"IDX",CTR,CTR)=dfn^da(2)^da(1)^da^ivm field value^pointer to file (#1)^dhcp field number^dhcp field name
"RTN","IVMLDEM4",67,0)
 ;
"RTN","IVMLDEM4",68,0)
 ;
"RTN","IVMLDEM4",69,0)
 ; Output:  None
"RTN","IVMLDEM4",70,0)
 ;
"RTN","IVMLDEM4",71,0)
 ; - generic seletor used within list manager action
"RTN","IVMLDEM4",72,0)
 N VALMY
"RTN","IVMLDEM4",73,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IVMLDEM4",74,0)
 Q:'$D(VALMY)
"RTN","IVMLDEM4",75,0)
 ;
"RTN","IVMLDEM4",76,0)
 ; - determine array depending on variable IVMWHERE
"RTN","IVMLDEM4",77,0)
 S IVMARRAY=$S(IVMWHERE="UP":"IVMUPLOAD",1:"IVMNONUP")
"RTN","IVMLDEM4",78,0)
 ;
"RTN","IVMLDEM4",79,0)
 N IVMPKDOD D CHECKS,CHECKDOD
"RTN","IVMLDEM4",80,0)
 ;
"RTN","IVMLDEM4",81,0)
 S IVMENT4=0 F  S IVMENT4=$O(VALMY(IVMENT4)) Q:'IVMENT4  D
"RTN","IVMLDEM4",82,0)
 .;
"RTN","IVMLDEM4",83,0)
 .I IVMWHERE="NON" D DF^IVMLDEM8 Q  ; non-uploadable fields
"RTN","IVMLDEM4",84,0)
 .;
"RTN","IVMLDEM4",85,0)
 .; - get selected entry for uploadable fields
"RTN","IVMLDEM4",86,0)
 .S IVMINDEX=$G(^TMP(IVMARRAY,$J,"IDX",IVMENT4,IVMENT4)) Q:IVMINDEX']""
"RTN","IVMLDEM4",87,0)
 .;
"RTN","IVMLDEM4",88,0)
 .; - check to see if selection is an address field
"RTN","IVMLDEM4",89,0)
 .S IVMADDR=$$ADDR^IVMLDEM7(+IVMINDEX,$P(IVMINDEX,"^",2),$P(IVMINDEX,"^",3),$P(IVMINDEX,"^",4),IVMPPICK)
"RTN","IVMLDEM4",90,0)
 .;
"RTN","IVMLDEM4",91,0)
 .Q:IVMADDR
"RTN","IVMLDEM4",92,0)
 .;
"RTN","IVMLDEM4",93,0)
 .; - ask user if they are sure they want to delete field
"RTN","IVMLDEM4",94,0)
 .D RUSURE^IVMLDEMU($P(IVMINDEX,"^",8),"delete") I IVMOUT!'IVMSURE Q
"RTN","IVMLDEM4",95,0)
 .;
"RTN","IVMLDEM4",96,0)
 .W !,"Deleting "_$P(IVMINDEX,"^",8)_" field from the list... "
"RTN","IVMLDEM4",97,0)
 .;
"RTN","IVMLDEM4",98,0)
 .;if Date of Death is Deleted, send bulletin
"RTN","IVMLDEM4",99,0)
 .I IVMPKDOD D BULLETIN
"RTN","IVMLDEM4",100,0)
 .;- remove entry from file (#301.5)
"RTN","IVMLDEM4",101,0)
 .D DELENT^IVMLDEMU($P(IVMINDEX,"^",2),$P(IVMINDEX,"^",3),$P(IVMINDEX,"^",4)) W "completed."
"RTN","IVMLDEM4",102,0)
 ;
"RTN","IVMLDEM4",103,0)
 ; - hold display before re-building list
"RTN","IVMLDEM4",104,0)
 D PAUSE^VALM1
"RTN","IVMLDEM4",105,0)
 ;
"RTN","IVMLDEM4",106,0)
 ; - init the list and re-display to the user
"RTN","IVMLDEM4",107,0)
 D @$S(IVMWHERE="UP":"INIT^IVMLDEM2",1:"INIT^IVMLDEM3")
"RTN","IVMLDEM4",108,0)
 ;
"RTN","IVMLDEM4",109,0)
DFQ ; clean-up variables
"RTN","IVMLDEM4",110,0)
 D QACTION
"RTN","IVMLDEM4",111,0)
 Q
"RTN","IVMLDEM4",112,0)
 ;
"RTN","IVMLDEM4",113,0)
 ;
"RTN","IVMLDEM4",114,0)
CHECKS ; check if residence phone number selected
"RTN","IVMLDEM4",115,0)
 ; check if another address field selected
"RTN","IVMLDEM4",116,0)
 ; IVMPPICK=0 phone or an address field not selected
"RTN","IVMLDEM4",117,0)
 ;          1 address field(s) selected
"RTN","IVMLDEM4",118,0)
 ;          2 phone selected
"RTN","IVMLDEM4",119,0)
 ;          3 both address field(s) and phone selected
"RTN","IVMLDEM4",120,0)
 ;
"RTN","IVMLDEM4",121,0)
 N IVMPPIC1,IVMPPIC2
"RTN","IVMLDEM4",122,0)
 S (IVMPPICK,IVMPPIC2)=0
"RTN","IVMLDEM4",123,0)
 Q:IVMWHERE'="UP"
"RTN","IVMLDEM4",124,0)
 S IVMENT4=0 F  S IVMENT4=$O(VALMY(IVMENT4)) Q:'IVMENT4  D
"RTN","IVMLDEM4",125,0)
 .I $G(^TMP("IVMUPLOAD",$J,"IDX",IVMENT4,IVMENT4))["PHONE NUMBER [RESIDENCE]" S IVMPPICK=2 Q
"RTN","IVMLDEM4",126,0)
 .S IVMINDEX=$G(^TMP("IVMUPLOAD",$J,"IDX",IVMENT4,IVMENT4)) I IVMINDEX']"" Q
"RTN","IVMLDEM4",127,0)
 .S IVMPPIC1=+$G(^IVM(301.5,+$P(IVMINDEX,"^",2),"IN",+$P(IVMINDEX,"^",3),"DEM",+$P(IVMINDEX,"^",4),0)) Q:'IVMPPIC1
"RTN","IVMLDEM4",128,0)
 .S:$D(^IVM(301.92,"AD",+IVMPPIC1)) IVMPPIC2=1
"RTN","IVMLDEM4",129,0)
 .Q
"RTN","IVMLDEM4",130,0)
 S IVMPPICK=IVMPPICK+IVMPPIC2
"RTN","IVMLDEM4",131,0)
 Q
"RTN","IVMLDEM4",132,0)
 ;
"RTN","IVMLDEM4",133,0)
CHECKDOD ; check if date of death was selected
"RTN","IVMLDEM4",134,0)
 ; IVMPKDOD=0 date of death not selected
"RTN","IVMLDEM4",135,0)
 ;          1 date of death selected
"RTN","IVMLDEM4",136,0)
 ;
"RTN","IVMLDEM4",137,0)
 ;
"RTN","IVMLDEM4",138,0)
 S IVMPKDOD=0
"RTN","IVMLDEM4",139,0)
 Q:IVMWHERE'="UP"
"RTN","IVMLDEM4",140,0)
 S IVMENT4=0 F  S IVMENT4=$O(VALMY(IVMENT4)) Q:'IVMENT4  D
"RTN","IVMLDEM4",141,0)
 .I $G(^TMP("IVMUPLOAD",$J,"IDX",IVMENT4,IVMENT4))["DATE OF DEATH" S IVMPKDOD=1 Q
"RTN","IVMLDEM4",142,0)
 Q
"RTN","IVMLDEM4",143,0)
BULLETIN ; Non-Acceptance of Date of Death Data Bulletin
"RTN","IVMLDEM4",144,0)
 N DGBULL,DGLINE,DGMGRP,DGNAME,DIFROM,VA,VAERR,XMTEXT,XMSUB,XMDUZ
"RTN","IVMLDEM4",145,0)
 S DGMGRP=$O(^XMB(3.8,"B","DGEN ELIGIBILITY ALERT",""))
"RTN","IVMLDEM4",146,0)
 Q:'DGMGRP
"RTN","IVMLDEM4",147,0)
 D XMY^DGMTUTL(DGMGRP,0,1)
"RTN","IVMLDEM4",148,0)
 S DGNAME=$P($G(^DPT(DFN,0)),"^"),DGSSN=$P($G(^DPT(DFN,0)),"^",9)
"RTN","IVMLDEM4",149,0)
 S XMTEXT="DGBULL("
"RTN","IVMLDEM4",150,0)
 S XMSUB="NON-ACCEPTANCE OF DATE OF DEATH DATA"
"RTN","IVMLDEM4",151,0)
 S DGLINE=0
"RTN","IVMLDEM4",152,0)
 D LINE^DGEN("Patient: "_DGNAME,.DGLINE)
"RTN","IVMLDEM4",153,0)
 D LINE^DGEN("SSN: "_DGSSN,.DGLINE)
"RTN","IVMLDEM4",154,0)
 D LINE^DGEN("",.DGLINE)
"RTN","IVMLDEM4",155,0)
 D LINE^DGEN("This Veteran's Enrollment Record contains a Date of Death,",.DGLINE)
"RTN","IVMLDEM4",156,0)
 D LINE^DGEN("however, you did not upload this information into VistA.",.DGLINE)
"RTN","IVMLDEM4",157,0)
 D LINE^DGEN("Contact the HEC by phone or by fax with the reason for",.DGLINE)
"RTN","IVMLDEM4",158,0)
 D LINE^DGEN("non-acceptance.  The HEC will delete erroneous Date of Death",.DGLINE)
"RTN","IVMLDEM4",159,0)
 D LINE^DGEN("information and update the veteran's enrollment record.",.DGLINE)
"RTN","IVMLDEM4",160,0)
 D ^XMD
"RTN","IVMLDEM4",161,0)
 Q
"RTN","IVMLDEM4",162,0)
QACTION ; - kill variables used from all protocols
"RTN","IVMLDEM4",163,0)
 S VALMBCK="R"
"RTN","IVMLDEM4",164,0)
 K IVMADDR,IVMARRAY,IVMENT4,IVMINDEX,IVMOUT,IVMPPICK,IVMSURE
"RTN","IVMLDEM4",165,0)
 Q
"RTN","IVMPRECA")
0^1^B16308390
"RTN","IVMPRECA",1,0)
IVMPRECA ;ALB/KCL/BRM/PJR/RGL - DEMOGRAPHICS MESSAGE CONSISTENCY CHECK ; 2/4/04 10:00am
"RTN","IVMPRECA",2,0)
 ;;2.0; INCOME VERIFICATION MATCH ;**5,6,12,34,58,56**; 21-OCT-94
"RTN","IVMPRECA",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMPRECA",4,0)
 ;
"RTN","IVMPRECA",5,0)
 ; This routine will perform data validation checks on uploadable
"RTN","IVMPRECA",6,0)
 ; demographic fields received from the IVM Center to ensure they
"RTN","IVMPRECA",7,0)
 ; are acurate prior to their upload into DHCP.
"RTN","IVMPRECA",8,0)
 ;
"RTN","IVMPRECA",9,0)
 ;
"RTN","IVMPRECA",10,0)
 ; Called from routine IVMPREC6 before uploadable demographic fields
"RTN","IVMPRECA",11,0)
 ; are stored in DHCP.
"RTN","IVMPRECA",12,0)
 ;
"RTN","IVMPRECA",13,0)
 ;
"RTN","IVMPRECA",14,0)
EN ; - Entry point to create temp array and perform msg consistency checks
"RTN","IVMPRECA",15,0)
 ;
"RTN","IVMPRECA",16,0)
 N DFN,IVMCNTY,IVMCR,IVMEG,IVMFLAG,IVMFLD,IVMNUM,IVMSTR,IVMSTPTR,X
"RTN","IVMPRECA",17,0)
 S IVMNUM=IVMDA ; 'current' line in ^HL(772,"IN",...
"RTN","IVMPRECA",18,0)
 ;
"RTN","IVMPRECA",19,0)
 ; - check the format of the HL7 demographic message
"RTN","IVMPRECA",20,0)
 D NEXT I $E(IVMSTR,1,3)'="PID" S HLERR="Missing PID segment" G ENQ
"RTN","IVMPRECA",21,0)
 S IVMSTR("PID")=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",22,0)
 D NEXT I $E(IVMSTR,1,3)'="ZPD" S HLERR="Missing ZPD segment" G ENQ
"RTN","IVMPRECA",23,0)
 S IVMSTR("ZPD")=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",24,0)
 D NEXT I $E(IVMSTR,1,3)="ZEL" S HLERR="ZEL segment should not be sent in Z05 message" G ENQ
"RTN","IVMPRECA",25,0)
 I $E(IVMSTR,1,3)'="ZGD" S HLERR="Missing ZGD segment" G ENQ
"RTN","IVMPRECA",26,0)
 S IVMSTR("ZGD")=$P(IVMSTR,HLFS,2,999)
"RTN","IVMPRECA",27,0)
 ;
"RTN","IVMPRECA",28,0)
 ; - perform field validation checks for PID segment
"RTN","IVMPRECA",29,0)
 S DFN=$P($P(IVMSTR("PID"),HLFS,3),$E(HLECH),1)
"RTN","IVMPRECA",30,0)
 I ('DFN!(DFN'=+DFN)!('$D(^DPT(+DFN,0)))) S HLERR="Invalid DFN" G ENQ
"RTN","IVMPRECA",31,0)
 I $P(IVMSTR("PID"),HLFS,19)'=$P(^DPT(DFN,0),"^",9) S HLERR="Couldn't match IVM SSN with DHCP SSN" G ENQ
"RTN","IVMPRECA",32,0)
 ;
"RTN","IVMPRECA",33,0)
 S X=$P(IVMSTR("PID"),HLFS,7) I X]"",($$FMDATE^HLFNC(X)>DT) S HLERR="Date of Birth greater than current date" G ENQ
"RTN","IVMPRECA",34,0)
 ;
"RTN","IVMPRECA",35,0)
 S X=$P(IVMSTR("PID"),HLFS,8) I X]"",X'="M",X'="F" S HLERR="Invalid code sent for Patient sex" G ENQ
"RTN","IVMPRECA",36,0)
 ;
"RTN","IVMPRECA",37,0)
 ; - if address - perform validation checks on addr fields
"RTN","IVMPRECA",38,0)
 S X=$P(IVMSTR("PID"),HLFS,11)
"RTN","IVMPRECA",39,0)
 S IVMFLAG=0 F IVMFLD=1:1:5 I $P(X,$E(HLECH),IVMFLD)]"" S IVMFLAG=1 Q
"RTN","IVMPRECA",40,0)
 I IVMFLAG D ADDRCHK
"RTN","IVMPRECA",41,0)
 G ENQ:$D(HLERR)
"RTN","IVMPRECA",42,0)
 ;
"RTN","IVMPRECA",43,0)
 S X=$P(IVMSTR("PID"),HLFS,13) I X]"",(($L(X)>20)!($L(X)<4)) S HLERR="Invalid phone number" G ENQ
"RTN","IVMPRECA",44,0)
 ;
"RTN","IVMPRECA",45,0)
 ; - perform field validation check for ZPD and ZGD segment
"RTN","IVMPRECA",46,0)
 ; - I X]"" was changed to I X below for IVM*2*56
"RTN","IVMPRECA",47,0)
 S X=$P(IVMSTR("ZPD"),HLFS,9) I X,($$FMDATE^HLFNC(X)<$P($G(^DPT(+DFN,0)),"^",3))!($$FMDATE^HLFNC(X)>$$DT^XLFDT) S HLERR="Invalid date of death" G ENQ
"RTN","IVMPRECA",48,0)
 S X=$P(IVMSTR("ZGD"),HLFS,2) I X,X'=1 S HLERR="Invalid Guardian Type" G ENQ
"RTN","IVMPRECA",49,0)
 ;
"RTN","IVMPRECA",50,0)
 ;
"RTN","IVMPRECA",51,0)
ENQ ; - send acknowledgement (ACK) 'AE' msg to the IVM Center
"RTN","IVMPRECA",52,0)
 I $D(HLERR) D ACK^IVMPREC
"RTN","IVMPRECA",53,0)
 Q
"RTN","IVMPRECA",54,0)
 ;
"RTN","IVMPRECA",55,0)
 ;
"RTN","IVMPRECA",56,0)
ADDRCHK ; - validate address fields sent by IVM Center
"RTN","IVMPRECA",57,0)
 ;
"RTN","IVMPRECA",58,0)
 I $P(X,$E(HLECH),1)']"" S HLERR="Invalid address - Missing street address [line 1]" Q
"RTN","IVMPRECA",59,0)
 I $P(X,$E(HLECH),3)']"" S HLERR="Invalid address - Missing city" Q
"RTN","IVMPRECA",60,0)
 I $P(X,$E(HLECH),4)']"" S HLERR="Invalid address - Missing state abbreviation" Q
"RTN","IVMPRECA",61,0)
 I $P(X,$E(HLECH),5)']"" S HLERR="Invalid address - Missing zip code" Q
"RTN","IVMPRECA",62,0)
 S IVMCNTY=$P(IVMSTR("PID"),HLFS,12)
"RTN","IVMPRECA",63,0)
 I IVMCNTY']"" S HLERR="Invalid address - Missing county code" Q
"RTN","IVMPRECA",64,0)
 I $L($P(X,$E(HLECH),1))>35!($L($P(X,$E(HLECH),1))<3) S HLERR="Invalid street address [line 1]" Q
"RTN","IVMPRECA",65,0)
 I $P(X,$E(HLECH),2)]"",(($L($P(X,$E(HLECH),2))>30)!($L($P(X,$E(HLECH),2))<3)) S HLERR="Invalid street address [line 2]" Q
"RTN","IVMPRECA",66,0)
 I $L($P(X,$E(HLECH),3))>15!($L($P(X,$E(HLECH),3))<2) S HLERR="Invalid city" Q
"RTN","IVMPRECA",67,0)
 ;
"RTN","IVMPRECA",68,0)
 ; - save state pointer for county code validation
"RTN","IVMPRECA",69,0)
 S IVMSTPTR=+$O(^DIC(5,"C",$P(X,$E(HLECH),4),0))
"RTN","IVMPRECA",70,0)
 I 'IVMSTPTR S HLERR="Invalid state abbreviation" Q
"RTN","IVMPRECA",71,0)
 I '$O(^DIC(5,IVMSTPTR,1,"C",IVMCNTY,0)) D  Q:$G(HLERR)]""
"RTN","IVMPRECA",72,0)
 .N STFIPS
"RTN","IVMPRECA",73,0)
 .S STFIPS=IVMSTPTR
"RTN","IVMPRECA",74,0)
 .S:$L(STFIPS)<2 STFIPS="0"_STFIPS
"RTN","IVMPRECA",75,0)
 .Q:$$FIPSCHK^XIPUTIL(STFIPS_IVMCNTY)  ;county code is valid
"RTN","IVMPRECA",76,0)
 .S HLERR="Invalid county code"
"RTN","IVMPRECA",77,0)
 ;
"RTN","IVMPRECA",78,0)
 S X=$P(X,$E(HLECH),5) D ZIPIN^VAFADDR I $D(X)[0 S HLERR="Invalid zip code" Q
"RTN","IVMPRECA",79,0)
 Q
"RTN","IVMPRECA",80,0)
 ;
"RTN","IVMPRECA",81,0)
 ;
"RTN","IVMPRECA",82,0)
NEXT ; - get the next HL7 segment in the message from HL7 Transmission (#772) file
"RTN","IVMPRECA",83,0)
 S IVMNUM=$O(^TMP($J,IVMRTN,IVMNUM)),IVMSTR=$G(^(+IVMNUM,0))
"RTN","IVMPRECA",84,0)
 Q
"RTN","IVMPTRN8")
0^2^B51807026
"RTN","IVMPTRN8",1,0)
IVMPTRN8 ;ALB/RKS/PDJ/BRM/TDM - HL7 FULL DATA TRANSMISSION (Z07) BUILDER ; 5/18/04 12:45pm
"RTN","IVMPTRN8",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**9,11,19,12,21,17,24,36,37,47,48,42,34,77,76,75,79,85,89,98,56**; 21-OCT-94
"RTN","IVMPTRN8",3,0)
 ;
"RTN","IVMPTRN8",4,0)
 ;
"RTN","IVMPTRN8",5,0)
BUILD(DFN,IVMMTDT,IVMCT,IVMQUERY) ; --
"RTN","IVMPTRN8",6,0)
 ;  Description: This entry point will be used to create an HL7 
"RTN","IVMPTRN8",7,0)
 ;  "Full Data Transmission" message for a patient.
"RTN","IVMPTRN8",8,0)
 ;
"RTN","IVMPTRN8",9,0)
 ;  Input:
"RTN","IVMPTRN8",10,0)
 ;        DFN - Patient IEN
"RTN","IVMPTRN8",11,0)
 ;    IVMMTDT - date of the patient's Means Test or Copay Test
"RTN","IVMPTRN8",12,0)
 ;      IVMCT - count of hl7 segments transmitted, pass by reference
"RTN","IVMPTRN8",13,0)
 ;   IVMQUERY - array passed in by reference where
"RTN","IVMPTRN8",14,0)
 ;    IVMQUERY("LTD") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",15,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",16,0)
 ;                last treatment date
"RTN","IVMPTRN8",17,0)
 ;    IVMQUERY("OVIS") -- # of the QUERY that is currently open or
"RTN","IVMPTRN8",18,0)
 ;                undefined, zero, or null if no QUERY opened for
"RTN","IVMPTRN8",19,0)
 ;                finding outpatient visits
"RTN","IVMPTRN8",20,0)
 ;
"RTN","IVMPTRN8",21,0)
 ;  HL7 variables as defined by call to INIT^IVMUFNC:
"RTN","IVMPTRN8",22,0)
 ;      HLEVN - HL7 message event counter 
"RTN","IVMPTRN8",23,0)
 ;      HLSDT - a flag that indicates that the data to be sent is
"RTN","IVMPTRN8",24,0)
 ;              stored in the ^TMP("HLS") global array.
"RTN","IVMPTRN8",25,0)
 ;
"RTN","IVMPTRN8",26,0)
 ;  The following variables returned by the INIT^HLTRANS entry point:
"RTN","IVMPTRN8",27,0)
 ;    HLNDAP - Non-DHCP Application Pointer from file 770
"RTN","IVMPTRN8",28,0)
 ;   HLNDAP0 - Zero node from file 770 corresponding to HLNDAP
"RTN","IVMPTRN8",29,0)
 ;     HLDAP - DHCP Application Pointer from file 771
"RTN","IVMPTRN8",30,0)
 ;     HLDAN - The DHCP Application Name (.01 field, file 771) for HLDAP
"RTN","IVMPTRN8",31,0)
 ;     HLPID - HL7 processing ID from file 770
"RTN","IVMPTRN8",32,0)
 ;     HLVER - HL7 version number from file 770
"RTN","IVMPTRN8",33,0)
 ;      HLFS - HL7 Field Separator from the 'FS' node of file 771
"RTN","IVMPTRN8",34,0)
 ;     HLECH - HL7 Encoding Characters from the 'EC' node of file 771
"RTN","IVMPTRN8",35,0)
 ;       HLQ - Double quotes ("") for use in building HL7 segments
"RTN","IVMPTRN8",36,0)
 ;     HLERR - if an error is encountered, an error message is returned
"RTN","IVMPTRN8",37,0)
 ;             in the HLERR variable.
"RTN","IVMPTRN8",38,0)
 ;      HLDA - the internal entry number for the entry created in
"RTN","IVMPTRN8",39,0)
 ;             file #772.
"RTN","IVMPTRN8",40,0)
 ;      HLDT - transmission date/time (associated with the entry in file
"RTN","IVMPTRN8",41,0)
 ;             #772 identified by HLDA) in internal VA FileMan format.
"RTN","IVMPTRN8",42,0)
 ;     HLDT1 - the same transmission date/time as the HLDT variable, 
"RTN","IVMPTRN8",43,0)
 ;             only in HL7 format.
"RTN","IVMPTRN8",44,0)
 ;
"RTN","IVMPTRN8",45,0)
 ; Output:
"RTN","IVMPTRN8",46,0)
 ;  ^TMP("HLS",$J,IVMCT) - global array containing all segments of the HL7 message that the VistA application wishes to send.  The HLSDT variable is defined above and the IVMCT variable is a sequential number incremented by 1.
"RTN","IVMPTRN8",47,0)
 ;
"RTN","IVMPTRN8",48,0)
 ;
"RTN","IVMPTRN8",49,0)
 N DGINC,DGIR,DGREL,I,IVMNTE,IVMPID,IVMSUB,IVMZRD,VAFPID,VAFZEL,FBZFE,IVMZCD,DELETE,NODE,IVMPIEN,TEST,IVMPNODE,TESTTYPE,SEQS,TESTCODE,HARDSHIP,ACTVIEN,IVMZMH,IVMSEQ
"RTN","IVMPTRN8",50,0)
 N EDBMTZ06
"RTN","IVMPTRN8",51,0)
 ;
"RTN","IVMPTRN8",52,0)
 ; create (PID) Patient Identification segment
"RTN","IVMPTRN8",53,0)
 S IVMSEQ="3,5,7,8,11,12,13,14,19"
"RTN","IVMPTRN8",54,0)
 ; do not transmit seq 11 and 12 if the Bad Address Indicator is set
"RTN","IVMPTRN8",55,0)
 ; or other address filters do not pass
"RTN","IVMPTRN8",56,0)
 S:$$FILTER^IVMPTRN9(DFN) IVMSEQ="3,5,7,8,13,14,19"
"RTN","IVMPTRN8",57,0)
 S IVMPID=$$EN^VAFHLPID(DFN,"1,"_IVMSEQ)        ;add SEQ 1 for PID
"RTN","IVMPTRN8",58,0)
 ;
"RTN","IVMPTRN8",59,0)
 ; **** Add ICN to 2nd piece PID segment for MPI@HEC.
"RTN","IVMPTRN8",60,0)
 S IVMCMOR="1,2"
"RTN","IVMPTRN8",61,0)
 ; check to see if site is a legacy site.  If not add ICN to PID segment.
"RTN","IVMPTRN8",62,0)
 I '$D(^PPP(1020.128,"AC",$P($$SITE^VASITE,"^",3))) D
"RTN","IVMPTRN8",63,0)
 .I +$$GETICN^MPIF001(DFN)>0,($$IFLOCAL^MPIF001(DFN)=0) S IVMPID=$$EN^VAFCPID(DFN,"1,2,"_IVMSEQ),IVMCMOR="1,2,3"  ;add SEQ 1 and 2 for PID
"RTN","IVMPTRN8",64,0)
 ;
"RTN","IVMPTRN8",65,0)
 I $D(VAFPID(1)) S IVMPID(1)=VAFPID(1)
"RTN","IVMPTRN8",66,0)
 ; send SSN indicating pseudo
"RTN","IVMPTRN8",67,0)
 ; I $P(IVMPID_$G(IVMPID(1)),HLFS,20)["P" D PSEUDO^IVMPTRN1  ; strip 'P' from pseudo SSNs
"RTN","IVMPTRN8",68,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID
"RTN","IVMPTRN8",69,0)
 I $D(IVMPID(1)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMPID(1)
"RTN","IVMPTRN8",70,0)
 ;
"RTN","IVMPTRN8",71,0)
 ; **** create (PD1) Patient CMOR segment for MPI@HEC.
"RTN","IVMPTRN8",72,0)
 S:'$D(HL("FS")) HL("FS")=HLFS
"RTN","IVMPTRN8",73,0)
 S:'$D(HL("ECH")) HL("ECH")=HLECH
"RTN","IVMPTRN8",74,0)
 S:'$D(HL("Q")) HL("Q")=HLQ
"RTN","IVMPTRN8",75,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLPD1(DFN,IVMCMOR)
"RTN","IVMPTRN8",76,0)
 ;
"RTN","IVMPTRN8",77,0)
 ; create (ZPD) Patient Dependent Info. segment
"RTN","IVMPTRN8",78,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN1^VAFHLZPD(DFN,"1,8,9,11,12,13,17,19,31,32"),IVMINS=$P(^(IVMCT),HLFS,12)
"RTN","IVMPTRN8",79,0)
 ;
"RTN","IVMPTRN8",80,0)
 ; create (ZTA) Temporary Address segment
"RTN","IVMPTRN8",81,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZTA(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",82,0)
 ;
"RTN","IVMPTRN8",83,0)
 ; create (ZIE) Ineligible segment
"RTN","IVMPTRN8",84,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIE(DFN,"1,2,3",1)
"RTN","IVMPTRN8",85,0)
 ;
"RTN","IVMPTRN8",86,0)
 ; create (ZEL) Eligibility segment(s) 
"RTN","IVMPTRN8",87,0)
 ; **** Add 5th piece to ZEL to correct consistency check
"RTN","IVMPTRN8",88,0)
 D EN1^VAFHLZEL(DFN,"1,2,5,6,7,10,11,13,14,15,16,17,18,19,20,21,23,24,25,29,34,35,37,38",2,.VAFZEL)
"RTN","IVMPTRN8",89,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(1))  ; Primary Eligibility
"RTN","IVMPTRN8",90,0)
 ; - other entitled eligibilities
"RTN","IVMPTRN8",91,0)
 F IVMSUB=1:0 S IVMSUB=+$O(VAFZEL(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",92,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(VAFZEL(+IVMSUB))
"RTN","IVMPTRN8",93,0)
 ;
"RTN","IVMPTRN8",94,0)
 ; create (ZEN) Enrollment segment
"RTN","IVMPTRN8",95,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEN(DFN)
"RTN","IVMPTRN8",96,0)
 ;
"RTN","IVMPTRN8",97,0)
 ; create (ZCD) Catastrophic Disability segment(s)
"RTN","IVMPTRN8",98,0)
 D BUILD^VAFHLZCD(.IVMZCD,DFN,,HLQ,HLFS)
"RTN","IVMPTRN8",99,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZCD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",100,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZCD(+IVMSUB))
"RTN","IVMPTRN8",101,0)
 ;
"RTN","IVMPTRN8",102,0)
 ; Optionally create (ZMH) Military History segment for Purple Heart
"RTN","IVMPTRN8",103,0)
 D ENTER^VAFHLZMH(DFN,"IVMZMH","13")
"RTN","IVMPTRN8",104,0)
 I $P(IVMZMH(1,0),HLFS,3)="PH","YN"[$E($P(IVMZMH(1,0),HLFS,4)) S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMZMH(1,0)
"RTN","IVMPTRN8",105,0)
 ;
"RTN","IVMPTRN8",106,0)
 ; create (ZRD) Rated Disabilities segment(s)
"RTN","IVMPTRN8",107,0)
 D EN^VAFHLZRD(DFN,"1,2,3,4",HLQ,HLFS,"IVMZRD")
"RTN","IVMPTRN8",108,0)
 F IVMSUB=0:0 S IVMSUB=+$O(IVMZRD(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",109,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$G(IVMZRD(+IVMSUB,0))
"RTN","IVMPTRN8",110,0)
 ;
"RTN","IVMPTRN8",111,0)
 ; create (ZCT) Emergency Contact segment
"RTN","IVMPTRN8",112,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZCT(DFN,"1,2,3,4,5,6,7")
"RTN","IVMPTRN8",113,0)
 ;
"RTN","IVMPTRN8",114,0)
 ; create (ZEM) Employment Info. segment for (1) Patient & (2) Spouse
"RTN","IVMPTRN8",115,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3")
"RTN","IVMPTRN8",116,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZEM(DFN,"1,2,3",2,2)
"RTN","IVMPTRN8",117,0)
 ;
"RTN","IVMPTRN8",118,0)
 ; create (ZGD) Guardian segment for (1) VA & (2) Civil 
"RTN","IVMPTRN8",119,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",1)
"RTN","IVMPTRN8",120,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZGD(DFN,"1,2,3,4,5,6,7,8",2)
"RTN","IVMPTRN8",121,0)
 ;
"RTN","IVMPTRN8",122,0)
 ; Income Year requiring transmission from IVM Patient File (301.5)
"RTN","IVMPTRN8",123,0)
 S IVMIY=$S($D(IVMIY):IVMIY,1:(IVMMTDT-10000))
"RTN","IVMPTRN8",124,0)
 N MTINFO S MTINFO=$$FUT^DGMTU(DFN)
"RTN","IVMPTRN8",125,0)
 I ($E(IVMIY,1,3)+1)=$E($P(MTINFO,U,2),1,3) S IVMMTDT=$P(MTINFO,U,2)
"RTN","IVMPTRN8",126,0)
 ;get the primary test for the income year
"RTN","IVMPTRN8",127,0)
 S TESTTYPE=$$GETTYPE^IVMPTRN9(DFN,IVMMTDT,.TESTCODE,.HARDSHIP,.ACTVIEN)
"RTN","IVMPTRN8",128,0)
 ;
"RTN","IVMPTRN8",129,0)
 ; The following function call returns:
"RTN","IVMPTRN8",130,0)
 ;   - Patient Relation IEN array in DGREL
"RTN","IVMPTRN8",131,0)
 ;   - Individual Annual Income IEN array in DGINC
"RTN","IVMPTRN8",132,0)
 ;   - Income Relation IEN array in DGINR
"RTN","IVMPTRN8",133,0)
 D ALL^DGMTU21(DFN,"VSC",IVMMTDT,"IPR",ACTVIEN)
"RTN","IVMPTRN8",134,0)
 ;
"RTN","IVMPTRN8",135,0)
 S EDBMTZ06=0 I $$VERZ06^EASPTRN1(DFN) S EDBMTZ06=1
"RTN","IVMPTRN8",136,0)
 ; create (ZIC) Income segment for veteran
"RTN","IVMPTRN8",137,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("V")),"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20")
"RTN","IVMPTRN8",138,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",139,0)
 I $P(^TMP("HLS",$J,IVMCT),"^",3)=HLQ S $P(^TMP("HLS",$J,IVMCT),"^",3)=$$HLDATE^HLFNC($E(IVMMTDT,1,3)-1_"0000")
"RTN","IVMPTRN8",140,0)
 ;
"RTN","IVMPTRN8",141,0)
 ; create (ZIR) Income Relation segment for veteran
"RTN","IVMPTRN8",142,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("V")),"1,2,3,4,5,10")
"RTN","IVMPTRN8",143,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^1"
"RTN","IVMPTRN8",144,0)
 ;
"RTN","IVMPTRN8",145,0)
 ; create (ZDP) Patient Dependent Info. segment for spouse
"RTN","IVMPTRN8",146,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("S")),"1,2,3,4,5,6,7,8,9")
"RTN","IVMPTRN8",147,0)
 I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",148,0)
 .; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",149,0)
 .S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",150,0)
 ;
"RTN","IVMPTRN8",151,0)
 ; create (ZIC) Income segment for spouse
"RTN","IVMPTRN8",152,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("S")),"1,2,3,4,5,6,7,8,9,10,11,12,16,17,18,19,20")
"RTN","IVMPTRN8",153,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",154,0)
 ;
"RTN","IVMPTRN8",155,0)
 ; create (ZIR) Income Relation segment for spouse
"RTN","IVMPTRN8",156,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("S")),"1,2,3")
"RTN","IVMPTRN8",157,0)
 I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",158,0)
 ;
"RTN","IVMPTRN8",159,0)
 ;
"RTN","IVMPTRN8",160,0)
 ; create ZDP, ZIC, and ZIR segments for all Means Test dependents
"RTN","IVMPTRN8",161,0)
 F IVMSUB=0:0 S IVMSUB=$O(DGREL("C",IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",162,0)
 .;
"RTN","IVMPTRN8",163,0)
 .; - create (ZDP) Dependent Info. segment for dependent child
"RTN","IVMPTRN8",164,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZDP(+$G(DGREL("C",IVMSUB)),"1,2,3,4,5,6,7,9")
"RTN","IVMPTRN8",165,0)
 .I $P(^TMP("HLS",$J,IVMCT),HLFS,3)'=HLQ,($P($G(^(IVMCT)),HLFS,6)=HLQ) D
"RTN","IVMPTRN8",166,0)
 ..; - pass non-existant SSNs as 0s
"RTN","IVMPTRN8",167,0)
 ..S $P(X,HLFS,6)="000000000"
"RTN","IVMPTRN8",168,0)
 .;
"RTN","IVMPTRN8",169,0)
 .; - create (ZIC) Income segment for dependent child
"RTN","IVMPTRN8",170,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIC(+$G(DGINC("C",IVMSUB)),"1,2,3,4,5,6,7,8,9,10,11,12,15")
"RTN","IVMPTRN8",171,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIC^"_$P(^TMP("HLS",$J,IVMCT),"^",2,3)
"RTN","IVMPTRN8",172,0)
 .;
"RTN","IVMPTRN8",173,0)
 .; - create (ZIR) Income Relation segment for dependent child
"RTN","IVMPTRN8",174,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=$$EN^VAFHLZIR(+$G(DGINR("C",IVMSUB)),"1,2,3,6,7,8,9")
"RTN","IVMPTRN8",175,0)
 .I EDBMTZ06 S ^TMP("HLS",$J,IVMCT)="ZIR^"_$P(^TMP("HLS",$J,IVMCT),"^",2)
"RTN","IVMPTRN8",176,0)
 .; 
"RTN","IVMPTRN8",177,0)
 ;
"RTN","IVMPTRN8",178,0)
 ; create (ZIO) Inpatient/Outpatient segment for veteran
"RTN","IVMPTRN8",179,0)
 S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="ZIO^1^"_$$EN^IVMUFNC1(DFN,IVMMTDT,.IVMQUERY)_"^"_$$LTD^IVMUFNC(DFN,.IVMQUERY)
"RTN","IVMPTRN8",180,0)
 ;
"RTN","IVMPTRN8",181,0)
 ; create (NTE) Notes and Comments segment
"RTN","IVMPTRN8",182,0)
 D NTE^IVMUFNC4(DFN,.IVMNTE,IVMMTDT)
"RTN","IVMPTRN8",183,0)
 I '$D(IVMNTE) D
"RTN","IVMPTRN8",184,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)="NTE^1"
"RTN","IVMPTRN8",185,0)
 I $D(IVMNTE) D
"RTN","IVMPTRN8",186,0)
 .; - get notes and comments
"RTN","IVMPTRN8",187,0)
 .F IVMSUB=0:0 S IVMSUB=$O(IVMNTE(IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",188,0)
 ..S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=IVMNTE(IVMSUB)
"RTN","IVMPTRN8",189,0)
 ;
"RTN","IVMPTRN8",190,0)
 ; create (IN1) Insurance segment(s) for all active insurance
"RTN","IVMPTRN8",191,0)
 K ^TMP("VAFIN1",$J)
"RTN","IVMPTRN8",192,0)
 D EN^VAFHLIN1(DFN,"1,4,5,7,8,9,12,13,15,16,17,28,36")
"RTN","IVMPTRN8",193,0)
 F IVMSUB=0:0 S IVMSUB=$O(^TMP("VAFIN1",$J,IVMSUB)) Q:'IVMSUB  D
"RTN","IVMPTRN8",194,0)
 .S IVMCT=IVMCT+1,^TMP("HLS",$J,IVMCT)=^TMP("VAFIN1",$J,+IVMSUB,0)
"RTN","IVMPTRN8",195,0)
 ;
"RTN","IVMPTRN8",196,0)
 D GOTO^IVMPTRN9
"RTN","IVMPTRN8",197,0)
 Q
"VER")
8.0^22
**INSTALL NAME**
EAS*1.0*38
"BLD",4380,0)
EAS*1.0*38^ENROLLMENT APPLICATION SYSTEM^0^3040820^y
"BLD",4380,4,0)
^9.64PA^^
"BLD",4380,"KRN",0)
^9.67PA^8989.52^19
"BLD",4380,"KRN",.4,0)
.4
"BLD",4380,"KRN",.401,0)
.401
"BLD",4380,"KRN",.402,0)
.402
"BLD",4380,"KRN",.403,0)
.403
"BLD",4380,"KRN",.5,0)
.5
"BLD",4380,"KRN",.84,0)
.84
"BLD",4380,"KRN",3.6,0)
3.6
"BLD",4380,"KRN",3.8,0)
3.8
"BLD",4380,"KRN",9.2,0)
9.2
"BLD",4380,"KRN",9.8,0)
9.8
"BLD",4380,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",4380,"KRN",9.8,"NM",1,0)
EASMTCHK^^0^B31606511
"BLD",4380,"KRN",9.8,"NM",2,0)
EASECSC1^^0^B30600206
"BLD",4380,"KRN",9.8,"NM","B","EASECSC1",2)

"BLD",4380,"KRN",9.8,"NM","B","EASMTCHK",1)

"BLD",4380,"KRN",19,0)
19
"BLD",4380,"KRN",19.1,0)
19.1
"BLD",4380,"KRN",101,0)
101
"BLD",4380,"KRN",409.61,0)
409.61
"BLD",4380,"KRN",771,0)
771
"BLD",4380,"KRN",870,0)
870
"BLD",4380,"KRN",8989.51,0)
8989.51
"BLD",4380,"KRN",8989.52,0)
8989.52
"BLD",4380,"KRN",8994,0)
8994
"BLD",4380,"KRN","B",.4,.4)

"BLD",4380,"KRN","B",.401,.401)

"BLD",4380,"KRN","B",.402,.402)

"BLD",4380,"KRN","B",.403,.403)

"BLD",4380,"KRN","B",.5,.5)

"BLD",4380,"KRN","B",.84,.84)

"BLD",4380,"KRN","B",3.6,3.6)

"BLD",4380,"KRN","B",3.8,3.8)

"BLD",4380,"KRN","B",9.2,9.2)

"BLD",4380,"KRN","B",9.8,9.8)

"BLD",4380,"KRN","B",19,19)

"BLD",4380,"KRN","B",19.1,19.1)

"BLD",4380,"KRN","B",101,101)

"BLD",4380,"KRN","B",409.61,409.61)

"BLD",4380,"KRN","B",771,771)

"BLD",4380,"KRN","B",870,870)

"BLD",4380,"KRN","B",8989.51,8989.51)

"BLD",4380,"KRN","B",8989.52,8989.52)

"BLD",4380,"KRN","B",8994,8994)

"BLD",4380,"QUES",0)
^9.62^^
"BLD",4380,"REQB",0)
^9.611^2^2
"BLD",4380,"REQB",1,0)
EAS*1.0*15^2
"BLD",4380,"REQB",2,0)
EAS*1.0*7^2
"BLD",4380,"REQB","B","EAS*1.0*15",1)

"BLD",4380,"REQB","B","EAS*1.0*7",2)

"MBREQ")
0
"PKG",551,-1)
1^1
"PKG",551,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",551,20,0)
^9.402P^1^1
"PKG",551,20,1,0)
2^^EASXDR
"PKG",551,20,1,1)
 
"PKG",551,20,"B",2,1)

"PKG",551,22,0)
^9.49I^1^1
"PKG",551,22,1,0)
1.0^3010315^3010523^66481
"PKG",551,22,1,"PAH",1,0)
38^3040820
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","EASECSC1")
0^2^B30600206
"RTN","EASECSC1",1,0)
EASECSC1 ;ALB/PHH,LBD - LTC Co-Pay Test Screen Military Service ;18 AUG 2001
"RTN","EASECSC1",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**5,7,38**;Mar 15, 2001
"RTN","EASECSC1",3,0)
 ;
"RTN","EASECSC1",4,0)
 ; Input  -- DFN      Patient IEN
"RTN","EASECSC1",5,0)
 ;           DGMTACT  LTC Co-Pay Test Action
"RTN","EASECSC1",6,0)
 ;           DGVINI   Veteran Individual Annual Income IEN
"RTN","EASECSC1",7,0)
 ;           DGVIRI   Veteran Income Relation IEN
"RTN","EASECSC1",8,0)
 ;           DGVPRI   Veteran Patient Relation IEN
"RTN","EASECSC1",9,0)
 ; Output -- None
"RTN","EASECSC1",10,0)
 ;
"RTN","EASECSC1",11,0)
EN ;Entry point
"RTN","EASECSC1",12,0)
 N DGLTCEX,DGLTC,IORVON,IORVOFF
"RTN","EASECSC1",13,0)
 D ^DGRPV
"RTN","EASECSC1",14,0)
 D EASECRP6
"RTN","EASECSC1",15,0)
 S X="IORVON;IORVOFF" D ENDR^%ZISS K X
"RTN","EASECSC1",16,0)
 I $G(DGLTCEX) W !?2,$G(IORVON)," * VETERAN MAY BE EXEMPT FROM COPAY IF LTC EPISODE IS DUE TO THIS CONDITION.",$G(IORVOFF)
"RTN","EASECSC1",17,0)
 S X="^2"
"RTN","EASECSC1",18,0)
 S:$$PAUSE(0) X="^"
"RTN","EASECSC1",19,0)
 G EN1^EASECSCR
"RTN","EASECSC1",20,0)
 Q
"RTN","EASECSC1",21,0)
PAUSE(RESP) ; Prompt user for next page or quit
"RTN","EASECSC1",22,0)
 N DIR,DIRUT,DUOUT,DTOUT,U,X,Y
"RTN","EASECSC1",23,0)
 S DIR(0)="E"
"RTN","EASECSC1",24,0)
 D ^DIR
"RTN","EASECSC1",25,0)
 I 'Y S RESP=1
"RTN","EASECSC1",26,0)
 Q RESP
"RTN","EASECSC1",27,0)
 ;
"RTN","EASECSC1",28,0)
EASECRP6 ; Display the screen
"RTN","EASECSC1",29,0)
 ; Note: This section was copied from ^DGRP6 and modified specifically
"RTN","EASECSC1",30,0)
 ;       to work with LTC.
"RTN","EASECSC1",31,0)
 ;
"RTN","EASECSC1",32,0)
 S (DGRPS,DGMTSCI)=1 D HD^EASECSCU F I=.32,.321,.322,.36,.52,.53 S DGRP(I)=$S($D(^DPT(DFN,I)):^(I),1:"")
"RTN","EASECSC1",33,0)
 S (DGRPW,Z)=1 D WW S Z="    Service Branch",Z1=24 D WW1^DGRPV S Z="   Service #",Z1=19 D WW1^DGRPV S Z="   Entered",Z1=12 D WW1^DGRPV S Z="   Separated",Z1=12 D WW1^DGRPV W "   Discharge"
"RTN","EASECSC1",34,0)
 W !?4,"--------------",?27,"---------",?46,"-------",?58,"---------",?70,"---------"
"RTN","EASECSC1",35,0)
 S DGRPX=DGRP(.32),DGRPSV=4 D S I $P(DGRPX,"^",19)="Y" S DGRPSV=9 D S I $P(DGRPX,"^",20)="Y" S DGRPSV=14 D S
"RTN","EASECSC1",36,0)
 S Z=2,DGRPX=DGRP(.52) D WW W "           POW: " S X=5,Z1=6 D YN W "From: " S X=7,Z1=13 D DAT W "To: " S X=8,Z1=12 D DAT W "War: ",$S($D(^DIC(22,+$P(DGRPX,"^",6),0)):$P(^(0),"^",2),1:"")
"RTN","EASECSC1",37,0)
 S Z=3 D WW W "        Combat: " S X=11,Z1=6 D YN W "From: " S X=13,Z1=13 D DAT W "To: " S X=14,Z1=12 D DAT W "Loc: ",$S($D(^DIC(22,+$P(DGRPX,"^",12),0)):$P(^(0),"^",2),1:"")
"RTN","EASECSC1",38,0)
 S Z=4,DGRPX=DGRP(.321) D WW W "       Vietnam: " S X=1,Z1=6 D YN W "From: " S X=4,Z1=13 D DAT W "To: " S X=5,X1=13 D DAT
"RTN","EASECSC1",39,0)
 S Z=5 D WW W "      A/O Exp.: " S X=2,Z1=7,DGLTC=1 D YN W "Reg: " S X=7,Z1=11 D DAT W "Exam: " S X=9,Z1=11 D DAT W "A/O#: " S Z=$P(DGRPX,"^",10),Z1=8 D WW1^DGRPV S Z=$P(DGRPX,"^",13) W $S(Z="K":" DMZ",Z="V":"VIET",1:"")
"RTN","EASECSC1",40,0)
 S Z=6 D WW W "      ION Rad.: " S X=3,Z1=7,DGLTC=1 D YN W "Reg: " S X=11,Z1=9 D DAT W "Method: " S X=$P(DGRPX,"^",12) W $S(X="B":"BOTH",X="T":"NUCLEAR TESTING",X="N":"NAGASAKI/HIROSHIMA",1:"")
"RTN","EASECSC1",41,0)
 S DGRPX=DGRP(.322)
"RTN","EASECSC1",42,0)
 F DGX=1,4,7,10 S X=DGX,Z=DGX-1/3+7 D WW W:DGX<10 " " W $S(DGX=1:"      Lebanon",DGX=4:"      Grenada",DGX=7:"       Panama",1:"      Gulf War"),": " S Z1=6 D YN W "From: " S X=DGX+1,Z1=13 D DAT W "To: " S X=DGX+2,Z1=12 D DAT
"RTN","EASECSC1",43,0)
 S Z=11 D WW W "       Somalia: " S (DGX,X)=16,Z1=6 D YN W "From: " S X=17,Z1=13 D DAT W "To: " S X=18,Z1=12 D DAT
"RTN","EASECSC1",44,0)
 S Z=12 D WW W "    Env Contam: " S X=13,Z1=7,DGLTC=1 D YN W "Reg: " S X=14,Z1=11 D DAT W "Exam: " S X=15,Z1=10 D DAT
"RTN","EASECSC1",45,0)
 S Z=13 D WW S X=$P(DGRP(.36),"^",2)
"RTN","EASECSC1",46,0)
 W "     Mil Disab: ",$S(X=0:"NO",X=1:"YES",X=2:"YES",X=3:"UNK",1:"UNANSWERED") I X]"",(X'=3) W ", Applicant is ",$S('X:"NOT ",1:""),"retired from military due to disability." I X=2 D MR
"RTN","EASECSC1",47,0)
 S Z=14 D WW W "      Dent Inj: " S DGRPX=DGRP(.36),X=8,Z1=28 D YN W "Teeth Extracted: " S X=9,Z1=9 D YN S DGRPD=0 I $P(DGRPX,"^",8)="Y",$P(DGRPX,"^",9)="Y" S DGRPD=1
"RTN","EASECSC1",48,0)
 I DGRPD S I1="" F I=0:0 S I=$O(^DPT(DFN,.37,I)) Q:'I  S I1=1,DGRPX=^(I,0) D DEN
"RTN","EASECSC1",49,0)
 S DGRPX=DGRP(.322)
"RTN","EASECSC1",50,0)
 S Z=15 D WW W "    Yugoslavia: " S (DGX,X)=19,Z1=6 D YN W "From: " S X=20,Z1=13 D DAT W "To: " S X=21,Z1=12 D DAT
"RTN","EASECSC1",51,0)
 S Z=16 D WW W "  Purple Heart: " S DGRPX=DGRP(.53),X=1 D YN D
"RTN","EASECSC1",52,0)
 . I $P($G(DGRPX),U)="Y",($P($G(DGRPX),U,2)]"") W ?26,"PH Status: "_$S($P($G(DGRPX),U,2)="1":"Pending",$P($G(DGRPX),U,2)="2":"In Process",$P($G(DGRPX),U,2)="3":"Confirmed",1:"")
"RTN","EASECSC1",53,0)
 I $P($G(DGRPX),U)="N" D
"RTN","EASECSC1",54,0)
 . S DGX=$P(DGRPX,U,3)
"RTN","EASECSC1",55,0)
 . S DGX=$S($G(DGX)=1:"UNACCEPTABLE DOCUMENTATION",$G(DGX)=2:"NO DOCUMENTATION REC'D",$G(DGX)=3:"ENTERED IN ERROR",$G(DGX)=4:"UNSUPPORTED PURPLE HEART",$G(DGX)=5:"VAMC",$G(DGX)=6:"UNDELIVERABLE MAIL",1:"")
"RTN","EASECSC1",56,0)
 . I $G(DGX)]"" W ?26,"PH Remarks: "_$S($G(DGX)]"":$G(DGX),1:"")
"RTN","EASECSC1",57,0)
 S Z=17 D WW W "    N/T Radium: " D     ;N/T Radium Treatment expos.
"RTN","EASECSC1",58,0)
 . N DGNT S DGRPX=$$GETCUR^DGNTAPI(DFN,"DGNT") W $G(DGNT("INTRP")) I $G(DGNT("INTRP"))["YES" W "*" S DGLTCEX=1
"RTN","EASECSC1",59,0)
Q K DGRPD,DGRPSV
"RTN","EASECSC1",60,0)
 Q
"RTN","EASECSC1",61,0)
YN S Z=$S($P(DGRPX,"^",X)="Y":"YES",$P(DGRPX,"^",X)="N":"NO",$P(DGRPX,"^",X)="U":"UNK",1:"") S:Z="YES"&($G(DGLTC)) Z=Z_"*",DGLTCEX=1 D WW1^DGRPV K DGLTC Q
"RTN","EASECSC1",62,0)
DAT S Z=$P(DGRPX,"^",X) I Z']"" S Z=""
"RTN","EASECSC1",63,0)
 E  S Z=$$FMTE^XLFDT(Z,"5DZ")
"RTN","EASECSC1",64,0)
 D WW1^DGRPV Q
"RTN","EASECSC1",65,0)
DEN W !?3," Trt Date: " S X=1,Z1=10 D DAT W "Cond.: ",$E($P(DGRPX,"^",2),1,45) Q
"RTN","EASECSC1",66,0)
S N DGRPSB S DGRPSB=+$P(DGRPX,U,DGRPSV+1)  ;Service Branch
"RTN","EASECSC1",67,0)
 W !?4,$S($D(^DIC(23,DGRPSB,0)):$E($P(^(0),"^",1),1,15),1:DGRPU) W:$$FV^DGRPMS(DGRPSB)=1 ?20,"("_$P(DGRP(.321),U,14)_")"
"RTN","EASECSC1",68,0)
 W ?27,$S($P(DGRPX,"^",DGRPSV+4)]"":$P(DGRPX,"^",DGRPSV+4),1:DGRPU)
"RTN","EASECSC1",69,0)
 F I=2,3 S X=$P(DGRPX,"^",DGRPSV+I),X=$S(X]"":$$FMTE^XLFDT(X,"5DZ"),1:"UNKNOWN") W ?$S(I=2:46,1:58),X
"RTN","EASECSC1",70,0)
 W ?70,$S($D(^DIC(25,+$P(DGRPX,"^",DGRPSV),0)):$E($P(^(0),"^",1),1,9),1:"UNKNOWN") Q
"RTN","EASECSC1",71,0)
MR W !?19,"Receiving Military retirement in lieu of VA Compensation." Q
"RTN","EASECSC1",72,0)
WW ;Write number on screens for display and/or edit (Z=number)
"RTN","EASECSC1",73,0)
 ; NOTE: This section was copied from WW^DGRPV and modified specifically
"RTN","EASECSC1",74,0)
 ;       for LTC.  The code calling ^DGRPV has been redirected here.
"RTN","EASECSC1",75,0)
 W:DGRPW !
"RTN","EASECSC1",76,0)
 Q
"RTN","EASMTCHK")
0^1^B31606511
"RTN","EASMTCHK",1,0)
EASMTCHK ;ALB/SCK,PJR -  MEANS TEST BLOCKING CHECK ; 11/13/03 11:13am
"RTN","EASMTCHK",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**3,12,15,38**;MAR 15,2001
"RTN","EASMTCHK",3,0)
 ; This routine provides an API, which when called from Appointment Management will allow 
"RTN","EASMTCHK",4,0)
 ; for the blocking of future appointments and appointment check-in/out if the patient 
"RTN","EASMTCHK",5,0)
 ; requires a Means Test or has a Means Test Status of Required. $$LST^DGMTU is used 
"RTN","EASMTCHK",6,0)
 ; to determine if a MT is REQUIRED.  If a MT does not have a status of REQUIRED, 
"RTN","EASMTCHK",7,0)
 ; but is more than 365 days out (same criteria used in OLD^DGMTU4), the MT will 
"RTN","EASMTCHK",8,0)
 ; be considered "REQUIRED" for blocking purposes. If a Means Test is required, the 
"RTN","EASMTCHK",9,0)
 ; following combinations of appointment actions will be blocked:
"RTN","EASMTCHK",10,0)
 ;    o Making a future appt for a Regular appt type
"RTN","EASMTCHK",11,0)
 ;    o Check In/Out an appt which is either a Regular or Research type
"RTN","EASMTCHK",12,0)
 ;
"RTN","EASMTCHK",13,0)
 ; A Walk-in will see the alert notice, and will be warned NOT to CHECK-IN the walk-in 
"RTN","EASMTCHK",14,0)
 ; appointment. Unscheduled/Walk-ins can ONLY be checked out.
"RTN","EASMTCHK",15,0)
 ;
"RTN","EASMTCHK",16,0)
 ; This API may be passed a flag to "silence" the screen display of the alert message, and 
"RTN","EASMTCHK",17,0)
 ; will accept an array variable to return the alert text in. Inpatient appointments 
"RTN","EASMTCHK",18,0)
 ; are not affected in any way.  Domicilary are not considered inpatients for the purpose 
"RTN","EASMTCHK",19,0)
 ; of Means Test Blocking for appointments
"RTN","EASMTCHK",20,0)
 ;
"RTN","EASMTCHK",21,0)
MT(DFN,EASAPT,EASACT,EASDT,EASQT,EASMSG) ; Entry point for MT Check
"RTN","EASMTCHK",22,0)
 ; Input Variables
"RTN","EASMTCHK",23,0)
 ;    DFN    - Patient's IEN in File #2
"RTN","EASMTCHK",24,0)
 ;    EASAPT - Appointment Type (File #409.1) [Optional]
"RTN","EASMTCHK",25,0)
 ;    EASACT - Appointment Action Flag [Optional] Default = "Other"
"RTN","EASMTCHK",26,0)
 ;             "M"  - Make an Appointment
"RTN","EASMTCHK",27,0)
 ;             "C"  - Check In/Out an existing appointment
"RTN","EASMTCHK",28,0)
 ;             "W"  - Unscheduled/Walk-in appointment
"RTN","EASMTCHK",29,0)
 ;             "O"  - Other
"RTN","EASMTCHK",30,0)
 ;             "L"  - Letters
"RTN","EASMTCHK",31,0)
 ;
"RTN","EASMTCHK",32,0)
 ;    EASDT  - Appointment Date/Time [Optional]
"RTN","EASMTCHK",33,0)
 ;    EASQT  - Silent flag [Optional], if set will prevent display of alert message
"RTN","EASMTCHK",34,0)
 ;    EASMSG - Return array for alert message [Optional], if passed in, the alert 
"RTN","EASMTCHK",35,0)
 ;             message text will be copied to this array
"RTN","EASMTCHK",36,0)
 ;
"RTN","EASMTCHK",37,0)
 ; Output
"RTN","EASMTCHK",38,0)
 ;    1  - Block action (MT Required)
"RTN","EASMTCHK",39,0)
 ;    0  - Don't block action (MT Not required)
"RTN","EASMTCHK",40,0)
 ;
"RTN","EASMTCHK",41,0)
 N RSLT,EASMT,EASTXT,EASX,EAMTS,DSPLY,IENS
"RTN","EASMTCHK",42,0)
 ;
"RTN","EASMTCHK",43,0)
 S RSLT=0
"RTN","EASMTCHK",44,0)
 S EASQT=+$G(EASQT)
"RTN","EASMTCHK",45,0)
 S EASAPT=+$G(EASAPT)
"RTN","EASMTCHK",46,0)
 S EASDT=$G(EASDT)
"RTN","EASMTCHK",47,0)
 S EASACT=$G(EASACT)
"RTN","EASMTCHK",48,0)
 S:EASACT']"" EASACT="O"
"RTN","EASMTCHK",49,0)
 ; If Appt type is not defined, action is CI/CO, get appt date
"RTN","EASMTCHK",50,0)
 I 'EASAPT,EASACT="C" D
"RTN","EASMTCHK",51,0)
 . S IENS=EASDT_","_DFN
"RTN","EASMTCHK",52,0)
 . S EASAPT=$$GET1^DIQ(2.98,IENS,9.5,"I")
"RTN","EASMTCHK",53,0)
 ;
"RTN","EASMTCHK",54,0)
 Q:$$INP(DFN) RSLT       ; Quit if inpatient
"RTN","EASMTCHK",55,0)
 S EAMTS=$$MTCHK(DFN,EASACT)    ; Get MT Check flag
"RTN","EASMTCHK",56,0)
 Q:'EAMTS RSLT
"RTN","EASMTCHK",57,0)
 ;
"RTN","EASMTCHK",58,0)
 ;Build Alert message 
"RTN","EASMTCHK",59,0)
 D BLDMSG(EASACT,.EASTXT)
"RTN","EASMTCHK",60,0)
 I $D(EASMSG) M @EASMSG=EASTXT ; If output array defined,copy message test
"RTN","EASMTCHK",61,0)
 ;
"RTN","EASMTCHK",62,0)
 ; Check appointment action and appointment type.  Set blocking action
"RTN","EASMTCHK",63,0)
 I EASACT="M",EASAPT=9 S (DSPLY,RSLT)=1 ; Make an Appt.
"RTN","EASMTCHK",64,0)
 ;
"RTN","EASMTCHK",65,0)
 I EASACT="C" D  ; Check-in an appt.
"RTN","EASMTCHK",66,0)
 . I $G(EASAPT)=9 S (DSPLY,RSLT)=1
"RTN","EASMTCHK",67,0)
 ;
"RTN","EASMTCHK",68,0)
 I "W,O"[EASACT D  ; Walk-in/Other appt.
"RTN","EASMTCHK",69,0)
 . S:$G(EASAPT)=9 DSPLY=1
"RTN","EASMTCHK",70,0)
 ;
"RTN","EASMTCHK",71,0)
 I $G(DSPLY) D
"RTN","EASMTCHK",72,0)
 . Q:EASQT  ; If silent flag is set, do not display alert
"RTN","EASMTCHK",73,0)
 . S EASX=0
"RTN","EASMTCHK",74,0)
 . W !?5,$CHAR(7),"******************************************************"
"RTN","EASMTCHK",75,0)
 . F  S EASX=$O(EASTXT(EASX)) Q:'EASX  D
"RTN","EASMTCHK",76,0)
 . . W !?5,EASTXT(EASX)
"RTN","EASMTCHK",77,0)
 ;
"RTN","EASMTCHK",78,0)
 ; Check for override key on making appointments
"RTN","EASMTCHK",79,0)
 I EASACT="M" D
"RTN","EASMTCHK",80,0)
 . I $D(^XUSEC("EAS MTOVERRIDE",DUZ)) S RSLT=0
"RTN","EASMTCHK",81,0)
 Q $G(RSLT)
"RTN","EASMTCHK",82,0)
 ;
"RTN","EASMTCHK",83,0)
MTCHK(DFN,EASACT) ; Check Means Test Status
"RTN","EASMTCHK",84,0)
 ; Input
"RTN","EASMTCHK",85,0)
 ;     DFN
"RTN","EASMTCHK",86,0)
 ;
"RTN","EASMTCHK",87,0)
 ; Output  
"RTN","EASMTCHK",88,0)
 ;     0   OK
"RTN","EASMTCHK",89,0)
 ;     1   MEANS TEST Required
"RTN","EASMTCHK",90,0)
 ;
"RTN","EASMTCHK",91,0)
 N RSLT,EASTAT,EASDT
"RTN","EASMTCHK",92,0)
 ;
"RTN","EASMTCHK",93,0)
 S RSLT=0
"RTN","EASMTCHK",94,0)
 S EASTAT=$$LST^DGMTU(DFN,"",1)
"RTN","EASMTCHK",95,0)
 I EASTAT]"" D
"RTN","EASMTCHK",96,0)
 . I $P(EASTAT,U,4)="R" S RSLT=1 Q
"RTN","EASMTCHK",97,0)
 . ;; Condition Check: MT Stat="P" AND GMT Threshold>Threshold A
"RTN","EASMTCHK",98,0)
 . ;;  AND MT Date is after 10/5/1999 AND Agrees to pay Deductible
"RTN","EASMTCHK",99,0)
 . ;;  AND MT Date is older than 365 days, THEN MT is required
"RTN","EASMTCHK",100,0)
 . I $P(EASTAT,U,4)="P",$$GET1^DIQ(408.31,+EASTAT,.27,"I")>$$GET1^DIQ(408.31,+EASTAT,.12,"I"),$P(EASTAT,U,2)>2991005,$$GET1^DIQ(408.31,+EASTAT,.11,"I"),$$OLD^DGMTU4($P(EASTAT,U,2)) S RSLT=1 Q
"RTN","EASMTCHK",101,0)
 . ;; Condition Check: Cat C or Pending Adj.
"RTN","EASMTCHK",102,0)
 . ;;  AND Agrees to pay Deductible AND MT date after 10/5/1999
"RTN","EASMTCHK",103,0)
 . I "C,P"[$P(EASTAT,U,4),$$GET1^DIQ(408.31,+EASTAT,.11,"I"),$P(EASTAT,U,2)>2991005 Q
"RTN","EASMTCHK",104,0)
 . I $P(EASTAT,U,4)="P",$$GET1^DIQ(408.31,+EASTAT,.27,"I")>$$GET1^DIQ(408.31,+EASTAT,.12,"I"),$P(EASTAT,U,2)>2991005,$$GET1^DIQ(408.31,+EASTAT,.11,"I"),$$OLD^DGMTU4($P(EASTAT,U,2)) S RSLT=1 Q
"RTN","EASMTCHK",105,0)
 . ;; Condition Check: Cat C AND Declines to give income information AND Agreed to pay deductible
"RTN","EASMTCHK",106,0)
 . I $P(EASTAT,U,4)="C",$$GET1^DIQ(408.31,+EASTAT,.14,"I"),$$GET1^DIQ(408.31,+EASTAT,.11,"I") Q
"RTN","EASMTCHK",107,0)
 . S EASDT=$P(EASTAT,U,2)
"RTN","EASMTCHK",108,0)
 . I ($$FMDIFF^XLFDT(DT,EASDT)>365) S RSLT=1
"RTN","EASMTCHK",109,0)
 . I $G(EASACT)="L" D
"RTN","EASMTCHK",110,0)
 . . ;; For letters, need to check for letters past 60-day threshold
"RTN","EASMTCHK",111,0)
 . . I ($$FMDIFF^XLFDT(DT,EASDT)>304) S RSLT=1
"RTN","EASMTCHK",112,0)
 ;
"RTN","EASMTCHK",113,0)
 I $P(EASTAT,U,4)="N" S RSLT=0
"RTN","EASMTCHK",114,0)
 Q $G(RSLT)
"RTN","EASMTCHK",115,0)
 ;
"RTN","EASMTCHK",116,0)
BLDMSG(EASACT,EASTXT) ; Build alert message to user
"RTN","EASMTCHK",117,0)
 N LINE
"RTN","EASMTCHK",118,0)
 ;
"RTN","EASMTCHK",119,0)
 S LINE=1
"RTN","EASMTCHK",120,0)
 S EASTXT(LINE)="Means Test Alert",LINE=LINE+1
"RTN","EASMTCHK",121,0)
 S EASTXT(LINE)="A Means Test is required or needs to be completed.",LINE=LINE+1
"RTN","EASMTCHK",122,0)
 ;
"RTN","EASMTCHK",123,0)
 I "M,C,W"[EASACT D
"RTN","EASMTCHK",124,0)
 . S EASTXT(LINE)="Please perform MEANS TEST or instruct patient",LINE=LINE+1
"RTN","EASMTCHK",125,0)
 . S EASTXT(LINE)="to report for Means Test interview.",LINE=LINE+1
"RTN","EASMTCHK",126,0)
 ;
"RTN","EASMTCHK",127,0)
 I EASACT="M" D
"RTN","EASMTCHK",128,0)
 . S EASTXT(LINE)=">> A future appointment cannot be made at this time."
"RTN","EASMTCHK",129,0)
 . S:$D(^XUSEC("EAS MTOVERRIDE",DUZ)) EASTXT(LINE)=">> Override Key in Effect."
"RTN","EASMTCHK",130,0)
 . S LINE=LINE+1
"RTN","EASMTCHK",131,0)
 ;
"RTN","EASMTCHK",132,0)
 I EASACT="C" S EASTXT(LINE)=">> This action may not be completed at this time.",LINE=LINE+1
"RTN","EASMTCHK",133,0)
 I EASACT="W" D
"RTN","EASMTCHK",134,0)
 . S EASTXT(LINE)=">> Check-Out ONLY.  Do NOT Check-In (CI) a walk-in appointment",LINE=LINE+1
"RTN","EASMTCHK",135,0)
 . S EASTXT(LINE)="   You will not be able to check-out the appt. if you do so.",LINE=LINE+1
"RTN","EASMTCHK",136,0)
 Q
"RTN","EASMTCHK",137,0)
 ;
"RTN","EASMTCHK",138,0)
INP(DFN) ; Check on Inpatient status
"RTN","EASMTCHK",139,0)
 ;  Input
"RTN","EASMTCHK",140,0)
 ;     DFN   - IEN from patient file
"RTN","EASMTCHK",141,0)
 ;  Output
"RTN","EASMTCHK",142,0)
 ;     1 - Patient has Inpatient status 
"RTN","EASMTCHK",143,0)
 ;     0 - Patient does not have Inpatient status
"RTN","EASMTCHK",144,0)
 ;  Default
"RTN","EASMTCHK",145,0)
 ;     Inpatient API defaults to TODAY for inpatient status check
"RTN","EASMTCHK",146,0)
 ;
"RTN","EASMTCHK",147,0)
 N VAERR,EAIN,VAROOT,VAINDT
"RTN","EASMTCHK",148,0)
 ;
"RTN","EASMTCHK",149,0)
 S VAINDT=$$NOW^XLFDT,VAROOT="EAIN"
"RTN","EASMTCHK",150,0)
 ;; Modified to treat DOM patients as inpatients for the purpose of appointment blocking.
"RTN","EASMTCHK",151,0)
 ;; EAS*1*12
"RTN","EASMTCHK",152,0)
 D INP^VADPT
"RTN","EASMTCHK",153,0)
 Q $S(+$G(EAIN(1)):1,1:0)
"VER")
8.0^22
**END**
**END**
