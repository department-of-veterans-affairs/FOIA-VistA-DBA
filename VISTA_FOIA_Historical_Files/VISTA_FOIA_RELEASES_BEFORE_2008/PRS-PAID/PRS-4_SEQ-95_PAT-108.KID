Released PRS*4*108 SEQ #95
Extracted from mail message
**KIDS**:PRS*4.0*108^

**INSTALL NAME**
PRS*4.0*108
"BLD",6677,0)
PRS*4.0*108^PAID^0^3060505^y
"BLD",6677,4,0)
^9.64PA^^
"BLD",6677,"KRN",0)
^9.67PA^8989.52^19
"BLD",6677,"KRN",.4,0)
.4
"BLD",6677,"KRN",.401,0)
.401
"BLD",6677,"KRN",.402,0)
.402
"BLD",6677,"KRN",.403,0)
.403
"BLD",6677,"KRN",.5,0)
.5
"BLD",6677,"KRN",.84,0)
.84
"BLD",6677,"KRN",3.6,0)
3.6
"BLD",6677,"KRN",3.8,0)
3.8
"BLD",6677,"KRN",9.2,0)
9.2
"BLD",6677,"KRN",9.8,0)
9.8
"BLD",6677,"KRN",9.8,"NM",0)
^9.68A^5^5
"BLD",6677,"KRN",9.8,"NM",1,0)
PRSATP5^^0^B26276696
"BLD",6677,"KRN",9.8,"NM",2,0)
PRSATP6^^0^B5087366
"BLD",6677,"KRN",9.8,"NM",3,0)
PRSATP7^^0^B4957081
"BLD",6677,"KRN",9.8,"NM",4,0)
PRS8HR^^0^B29706028
"BLD",6677,"KRN",9.8,"NM",5,0)
PRS8HRSV^^0^B35348193
"BLD",6677,"KRN",9.8,"NM","B","PRS8HR",4)

"BLD",6677,"KRN",9.8,"NM","B","PRS8HRSV",5)

"BLD",6677,"KRN",9.8,"NM","B","PRSATP5",1)

"BLD",6677,"KRN",9.8,"NM","B","PRSATP6",2)

"BLD",6677,"KRN",9.8,"NM","B","PRSATP7",3)

"BLD",6677,"KRN",19,0)
19
"BLD",6677,"KRN",19.1,0)
19.1
"BLD",6677,"KRN",101,0)
101
"BLD",6677,"KRN",409.61,0)
409.61
"BLD",6677,"KRN",771,0)
771
"BLD",6677,"KRN",870,0)
870
"BLD",6677,"KRN",8989.51,0)
8989.51
"BLD",6677,"KRN",8989.52,0)
8989.52
"BLD",6677,"KRN",8994,0)
8994
"BLD",6677,"KRN","B",.4,.4)

"BLD",6677,"KRN","B",.401,.401)

"BLD",6677,"KRN","B",.402,.402)

"BLD",6677,"KRN","B",.403,.403)

"BLD",6677,"KRN","B",.5,.5)

"BLD",6677,"KRN","B",.84,.84)

"BLD",6677,"KRN","B",3.6,3.6)

"BLD",6677,"KRN","B",3.8,3.8)

"BLD",6677,"KRN","B",9.2,9.2)

"BLD",6677,"KRN","B",9.8,9.8)

"BLD",6677,"KRN","B",19,19)

"BLD",6677,"KRN","B",19.1,19.1)

"BLD",6677,"KRN","B",101,101)

"BLD",6677,"KRN","B",409.61,409.61)

"BLD",6677,"KRN","B",771,771)

"BLD",6677,"KRN","B",870,870)

"BLD",6677,"KRN","B",8989.51,8989.51)

"BLD",6677,"KRN","B",8989.52,8989.52)

"BLD",6677,"KRN","B",8994,8994)

"BLD",6677,"QUES",0)
^9.62^^
"BLD",6677,"REQB",0)
^9.611^1^1
"BLD",6677,"REQB",1,0)
PRS*4.0*102^1
"BLD",6677,"REQB","B","PRS*4.0*102",1)

"MBREQ")
0
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
108^3060505
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","PRS8HR")
0^4^B29706028^B41812105
"RTN","PRS8HR",1,0)
PRS8HR ;HISC/MRL,WCIOFO/JAH-DECOMPOSITION, HOURS ;05/05/06
"RTN","PRS8HR",2,0)
 ;;4.0;PAID;**2,22,29,42,52,102,108**;Sep 21, 1995
"RTN","PRS8HR",3,0)
 ;
"RTN","PRS8HR",4,0)
 ;This routine is called by ^PRS8PP (premium pay calculator)
"RTN","PRS8HR",5,0)
 ;=====================================================================
"RTN","PRS8HR",6,0)
 ; ** indicates incompleted comments
"RTN","PRS8HR",7,0)
 ;
"RTN","PRS8HR",8,0)
 ;VARIABLE DEFINITION
"RTN","PRS8HR",9,0)
 ;
"RTN","PRS8HR",10,0)
 ; TYP   =  contains codes representing type of employee.
"RTN","PRS8HR",11,0)
 ;          It's a composite code string w/ characters that
"RTN","PRS8HR",12,0)
 ;          represent pay plan, duty basis, & normal hours.
"RTN","PRS8HR",13,0)
 ;    CODE  REPRESENTS      CODE   REPRESENTS
"RTN","PRS8HR",14,0)
 ;     D     daily            f     firefighter
"RTN","PRS8HR",15,0)
 ;     W     wagegrade        P     part-time
"RTN","PRS8HR",16,0)
 ;     N     nurse            d     doctor
"RTN","PRS8HR",17,0)
 ;     B     baylor plan      dR    doctor/resident or intern
"RTN","PRS8HR",18,0)
 ;     H     Nurse Hybrid     ""    *
"RTN","PRS8HR",19,0)
 ;     I     intermittent
"RTN","PRS8HR",20,0)
 ; VAL   =  Single char code represents employee's work status for
"RTN","PRS8HR",21,0)
 ;          current 15 min increment.
"RTN","PRS8HR",22,0)
 ; FLX   =  Flex tour indicator.
"RTN","PRS8HR",23,0)
 ; TH(W) =  Tour Hours for week 1, TH(1) & week 2, TH(2)
"RTN","PRS8HR",24,0)
 ; TH    =  Tour Hours
"RTN","PRS8HR",25,0)
 ; HTP   =  PAYABLE hours worked today.
"RTN","PRS8HR",26,0)
 ; HT    =  Hours worked today.
"RTN","PRS8HR",27,0)
 ; AV    =  String w/ most normal types of time (see bottom of PRS8EX)
"RTN","PRS8HR",28,0)
 ;          does NOT contain premium times or unscheduled time (OoEes4)
"RTN","PRS8HR",29,0)
 ;====================================================================
"RTN","PRS8HR",30,0)
 ;
"RTN","PRS8HR",31,0)
 S AV="1235nHMLSWNARUXYVJFGD"
"RTN","PRS8HR",32,0)
 ;
"RTN","PRS8HR",33,0)
 ;   Loop thru each quarter hour segment of day.
"RTN","PRS8HR",34,0)
 ;   Check for times in AV array.
"RTN","PRS8HR",35,0)
 ;   Proceed w/ calculation if Overtime worked on Holiday.
"RTN","PRS8HR",36,0)
 ;
"RTN","PRS8HR",37,0)
 F M=1:1:96 D
"RTN","PRS8HR",38,0)
 .  S VAL=$E(D,M)
"RTN","PRS8HR",39,0)
 .;
"RTN","PRS8HR",40,0)
 .;    If non premium type of time or (overtime on holiday)
"RTN","PRS8HR",41,0)
 .;
"RTN","PRS8HR",42,0)
 .  I AV[VAL!(VAL="O"&($E(DAY(DAY,"HOL"),M)=2)) D CALC
"RTN","PRS8HR",43,0)
 Q
"RTN","PRS8HR",44,0)
 ;
"RTN","PRS8HR",45,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HR",46,0)
 ;
"RTN","PRS8HR",47,0)
CALC ; --- Entry point for calculating placement of time
"RTN","PRS8HR",48,0)
 ;
"RTN","PRS8HR",49,0)
 ;     Set up variables for calculations and comparisons in this routine
"RTN","PRS8HR",50,0)
 ;
"RTN","PRS8HR",51,0)
 N HOLWKD,HOLEX,HOLWKEX
"RTN","PRS8HR",52,0)
 D ^PRS8HRSV
"RTN","PRS8HR",53,0)
 ;
"RTN","PRS8HR",54,0)
 ;     IF intermittent employee on continuation of pay OR overtime on 
"RTN","PRS8HR",55,0)
 ;     holiday THEN increment Pay Period tour hours and current weeks 
"RTN","PRS8HR",56,0)
 ;     tour hours.
"RTN","PRS8HR",57,0)
 ;
"RTN","PRS8HR",58,0)
 I TYP["I",VAL["V"!(VAL="O"&(HOLWKD)) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HR",59,0)
 ;
"RTN","PRS8HR",60,0)
 ;     IF part time doctor & total hours = 80 & type of
"RTN","PRS8HR",61,0)
 ;     time is unscheduled, overtime, comptime THEN quit
"RTN","PRS8HR",62,0)
 ;
"RTN","PRS8HR",63,0)
 I TYP["d",TYP["P",TH=320,"4OosEe"[VAL Q
"RTN","PRS8HR",64,0)
 ;
"RTN","PRS8HR",65,0)
 ;     IF INT doctor & total hours = 80 THEN quit
"RTN","PRS8HR",66,0)
 ;
"RTN","PRS8HR",67,0)
 I TYP["I",$E(AC,1)="L",TH=320,"4OosEe"[VAL Q
"RTN","PRS8HR",68,0)
 ;
"RTN","PRS8HR",69,0)
 ;     IF type of time is anything but (leave w/out pay, comp time) 
"RTN","PRS8HR",70,0)
 ;     THEN increment total hrs(HT) & increment HTP if type of 
"RTN","PRS8HR",71,0)
 ;     time not non pay or leave w/out pay.
"RTN","PRS8HR",72,0)
 ;
"RTN","PRS8HR",73,0)
 ; Update daily counter - *102 added non-pay back into daily count
"RTN","PRS8HR",74,0)
 ;
"RTN","PRS8HR",75,0)
 S HT=HT+1,HTP=HTP+1
"RTN","PRS8HR",76,0)
 ;
"RTN","PRS8HR",77,0)
 ;---------------------------------------------------------
"RTN","PRS8HR",78,0)
 ;     IF entitled to VCS commission sales & normal time(1) ??(2,3)
"RTN","PRS8HR",79,0)
 ;     & holiday excused set X to type of time=Piece Worker Hol excused.
"RTN","PRS8HR",80,0)
 ;     Then IF part time set X to part time hours code.
"RTN","PRS8HR",81,0)
 ;
"RTN","PRS8HR",82,0)
 I $E(ENT,38),"123"[VAL,HOLEX S X=36 D CHK^PRS8HRSV D  Q:X
"RTN","PRS8HR",83,0)
 .  I TYP["P" S X=32 D CHK^PRS8HRSV
"RTN","PRS8HR",84,0)
 ;
"RTN","PRS8HR",85,0)
 ;---------------------------------------------------------------
"RTN","PRS8HR",86,0)
 ;
"RTN","PRS8HR",87,0)
 ;     Don't mess w/ fire fighters
"RTN","PRS8HR",88,0)
 ;
"RTN","PRS8HR",89,0)
 Q:"Ff"[TYP
"RTN","PRS8HR",90,0)
 ;
"RTN","PRS8HR",91,0)
 S GO=0
"RTN","PRS8HR",92,0)
 ;     IF compressed tour & parttime & tour hours are over 80
"RTN","PRS8HR",93,0)
 ;     OR tour hours = 80 & it's overtime, comptime, or unscheduled reg.
"RTN","PRS8HR",94,0)
 ;
"RTN","PRS8HR",95,0)
 ; Check for FT Compressed
"RTN","PRS8HR",96,0)
 I NH>319,FLX="C",("OoseE4"[VAL) S GO=1
"RTN","PRS8HR",97,0)
 ;
"RTN","PRS8HR",98,0)
 ; Check for week
"RTN","PRS8HR",99,0)
 I (TH(W)>160&("OoseE4"[VAL))!(TH(W)=160&("OosEe4"[VAL)) S GO=1
"RTN","PRS8HR",100,0)
 ;
"RTN","PRS8HR",101,0)
 ; Check for day
"RTN","PRS8HR",102,0)
 I HT>32,"OoseE4"[VAL S GO=1
"RTN","PRS8HR",103,0)
 ;
"RTN","PRS8HR",104,0)
 ;     Following segment is concerned w/ variations of part time
"RTN","PRS8HR",105,0)
 ;     employees (TYP["P"), & 1 baylor (TYP["B").
"RTN","PRS8HR",106,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",107,0)
 ;
"RTN","PRS8HR",108,0)
 ;     Doctor over 8 hours
"RTN","PRS8HR",109,0)
 ;
"RTN","PRS8HR",110,0)
 I TYP["Pd",HT>32 S GO=0 ; part-time doctors PT + PH must = NH
"RTN","PRS8HR",111,0)
 ;
"RTN","PRS8HR",112,0)
 I TYP["P",HOLWKD S GO=0
"RTN","PRS8HR",113,0)
 ;
"RTN","PRS8HR",114,0)
 ;     Baylor plan & ct/ot/s
"RTN","PRS8HR",115,0)
 ;
"RTN","PRS8HR",116,0)
 I TYP["B","EeOos"[VAL S GO=1
"RTN","PRS8HR",117,0)
 ;
"RTN","PRS8HR",118,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",119,0)
 ;     GO set in cases where employee maybe eligible for OT
"RTN","PRS8HR",120,0)
 ;     due to over > 8/day OR > 40/week.
"RTN","PRS8HR",121,0)
 ;
"RTN","PRS8HR",122,0)
 S X=0 I GO D TH^PRS8HRSV D OVER840^PRS8HROT Q
"RTN","PRS8HR",123,0)
 ;
"RTN","PRS8HR",124,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",125,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",126,0)
 ;     GO not set for compressed schedule of at least 80 hrs.
"RTN","PRS8HR",127,0)
 ;     GO not set for non compressed schedule of over 40 hrs.
"RTN","PRS8HR",128,0)
 ;     IF GO is set and we are evaluating normal hours or
"RTN","PRS8HR",129,0)
 ;     HOLIDAY OVERTIME use NORMHRS to increment TIME
"RTN","PRS8HR",130,0)
 ;     in week array.  THEN QUIT.
"RTN","PRS8HR",131,0)
 ;
"RTN","PRS8HR",132,0)
 S GO=1
"RTN","PRS8HR",133,0)
 I FLX="C",NH>319 S GO=0
"RTN","PRS8HR",134,0)
 I FLX'="C",NH(WK)>160,TYP'["Pd" S GO=0 ;IF pt-doctor don't set GO=0
"RTN","PRS8HR",135,0)
 I GO,"1235nHMLSWNARUXYVJFGD"[VAL!(VAL="O"&(HOLWKD)) D NORMHRS^PRS8HROT Q
"RTN","PRS8HR",136,0)
 ;
"RTN","PRS8HR",137,0)
 ;--------------------------------------------------------------------
"RTN","PRS8HR",138,0)
 ;   Check employees with Normal hours less than 80. (Baylor NH=320)
"RTN","PRS8HR",139,0)
 ;
"RTN","PRS8HR",140,0)
 I NH'>319 D TH^PRS8HRSV D  Q
"RTN","PRS8HR",141,0)
 .I FLX="C" D  Q:X
"RTN","PRS8HR",142,0)
 ..;
"RTN","PRS8HR",143,0)
 ..; For PT employees review hours worked to determine X
"RTN","PRS8HR",144,0)
 ..I "OosEe4"'[VAL S X=32  ; All tour time = PT/PH
"RTN","PRS8HR",145,0)
 ..;
"RTN","PRS8HR",146,0)
 ..; Checks for CT
"RTN","PRS8HR",147,0)
 ..I "Ee"[VAL D
"RTN","PRS8HR",148,0)
 ...; <8/DAY & <40/WK  = UN/US
"RTN","PRS8HR",149,0)
 ...I HT'>32,TH(W)'>160 S X=9 Q
"RTN","PRS8HR",150,0)
 ...S X=7 ; CE/CT
"RTN","PRS8HR",151,0)
 ..;
"RTN","PRS8HR",152,0)
 ..; Checks for all other types of time
"RTN","PRS8HR",153,0)
 ..I "Oos4"[VAL D
"RTN","PRS8HR",154,0)
 ...I HT>32 S X=TOUR+15 Q  ; DA/DE
"RTN","PRS8HR",155,0)
 ...I TH(W)>160 S X=TOUR+19 Q  ; OA/OE
"RTN","PRS8HR",156,0)
 ...S X=9 ; UN/US
"RTN","PRS8HR",157,0)
 ..D CHK^PRS8HRSV
"RTN","PRS8HR",158,0)
 .;
"RTN","PRS8HR",159,0)
 .;     Under 8/day, 40/week, and not coded as overtime or comptime
"RTN","PRS8HR",160,0)
 .;     or overtime on holiday.
"RTN","PRS8HR",161,0)
 .;
"RTN","PRS8HR",162,0)
 .; Checks for non-compressed employees
"RTN","PRS8HR",163,0)
 .I HT'>32,TH(W)'>160,"OoseE"'[VAL!(VAL="O"&(HOLWKD)) S X=0 D  Q:X
"RTN","PRS8HR",164,0)
 ..;
"RTN","PRS8HR",165,0)
 ..;    Not intermittent, normal hours and not unscheduled reg. 
"RTN","PRS8HR",166,0)
 ..;    TIME gets parttime hours.
"RTN","PRS8HR",167,0)
 ..;
"RTN","PRS8HR",168,0)
 ..I TYP'["I",AV[VAL,VAL'=4 S X=32 D CHK^PRS8HRSV Q
"RTN","PRS8HR",169,0)
 ..;
"RTN","PRS8HR",170,0)
 ..;    All else fails - TIME gets unscheduled regular.
"RTN","PRS8HR",171,0)
 ..;
"RTN","PRS8HR",172,0)
 ..S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",173,0)
 .;
"RTN","PRS8HR",174,0)
 .;     Part time doctor w/ unscheduled reg. TIME gets unscheduled reg.
"RTN","PRS8HR",175,0)
 .; 
"RTN","PRS8HR",176,0)
 .I TYP["P",TYP["d",VAL=4 S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",177,0)
 .;
"RTN","PRS8HR",178,0)
 .;     Over 8/day
"RTN","PRS8HR",179,0)
 .;
"RTN","PRS8HR",180,0)
 .I HT>32 D G8^PRS8HRSV Q:X
"RTN","PRS8HR",181,0)
 .;
"RTN","PRS8HR",182,0)
 .;     For all time left except comptime set TIME to appropriate OT
"RTN","PRS8HR",183,0)
 .;     unless comptime has been worked earlier in the week making
"RTN","PRS8HR",184,0)
 .;     the total hours less than 40, then TIME gets unscheduled reg.
"RTN","PRS8HR",185,0)
 .;     COMPTIME OVER 8/DAY WILL BE CREDITED HERE
"RTN","PRS8HR",186,0)
 .;
"RTN","PRS8HR",187,0)
 .S X=$S("Ee"'[VAL:TOUR+19,(TH(W)'>160)&(HT'>32):9,1:7)
"RTN","PRS8HR",188,0)
 .I TYP["P",VAL[4,TH(W)'>160,HT'>32 S X=9
"RTN","PRS8HR",189,0)
 .D CHK^PRS8HRSV
"RTN","PRS8HR",190,0)
 Q
"RTN","PRS8HR",191,0)
 ;
"RTN","PRS8HR",192,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HR",193,0)
 ; ### DELETE UNLESS EARLIER CHECK WAS RESTORED
"RTN","PRS8HR",194,0)
CT2DAY() ;Determine if comptime eligible including 2 day tour.
"RTN","PRS8HR",195,0)
 ;
"RTN","PRS8HR",196,0)
 N TOUREC,TWODAY
"RTN","PRS8HR",197,0)
 S (RTN,TWODAY)=0
"RTN","PRS8HR",198,0)
 ;
"RTN","PRS8HR",199,0)
 ;      IF time segment contains Scheduled or unscheduled comptime 
"RTN","PRS8HR",200,0)
 ;      or overtime and there is some time in tour hours worked THEN
"RTN","PRS8HR",201,0)
 ;      check if it's a 2 day tour. For 2 day tours some of time worked
"RTN","PRS8HR",202,0)
 ;      won't be in HT variable since it occured on other day of two
"RTN","PRS8HR",203,0)
 ;      day tour, it's not valid to simply check the HT variable for
"RTN","PRS8HR",204,0)
 ;      8 hours of work. (patch PRS*4*22)
"RTN","PRS8HR",205,0)
 ;
"RTN","PRS8HR",206,0)
 I "OosEe4"[VAL,(HT>0),(NH>319) D
"RTN","PRS8HR",207,0)
 .S TOUREC=$P($G(DAY(DAY,0)),"^",2)
"RTN","PRS8HR",208,0)
 .I TOUREC>0 S TWODAY=$P($G(^PRST(457.1,TOUREC,0)),"^",5)
"RTN","PRS8HR",209,0)
 .I TWODAY="Y" S RTN=1
"RTN","PRS8HR",210,0)
 Q RTN
"RTN","PRS8HRSV")
0^5^B35348193^B37540189
"RTN","PRS8HRSV",1,0)
PRS8HRSV ;WCIOFO/JAH-HOLIDAY FLAG, TIME CHECKER, WK() SET; 05/02/06
"RTN","PRS8HRSV",2,0)
 ;;4.0;PAID;**29,52,102,108**;Sep 21, 1995
"RTN","PRS8HRSV",3,0)
 ;  Set up variable for holiday worked or holiday exused
"RTN","PRS8HRSV",4,0)
 ;  Holiday worked coded 2 in DAY array
"RTN","PRS8HRSV",5,0)
 ;  Holiday exused coded 1 in DAY array
"RTN","PRS8HRSV",6,0)
 ;  A NON holiday is coded as all zero's in day array.
"RTN","PRS8HRSV",7,0)
 ;
"RTN","PRS8HRSV",8,0)
 ;  HOLIDAY WORKED
"RTN","PRS8HRSV",9,0)
 S HOLWKD=$E(DAY(DAY,"HOL"),M)=2
"RTN","PRS8HRSV",10,0)
 ;
"RTN","PRS8HRSV",11,0)
 ;  HOLIDAY EXCUSED
"RTN","PRS8HRSV",12,0)
 S HOLEX=$E(DAY(DAY,"HOL"),M)=1
"RTN","PRS8HRSV",13,0)
 ;
"RTN","PRS8HRSV",14,0)
 ;  HOLIDAY EXCUSED OR HOLIDAY WORKED
"RTN","PRS8HRSV",15,0)
 S HOLWKEX=$E(DAY(DAY,"HOL"),M)
"RTN","PRS8HRSV",16,0)
 Q
"RTN","PRS8HRSV",17,0)
 ;
"RTN","PRS8HRSV",18,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",19,0)
 ;
"RTN","PRS8HRSV",20,0)
CHK ; --- Check ENT for acceptable X value
"RTN","PRS8HRSV",21,0)
 ;    Pieces of Y have values in locations corresponding to premium
"RTN","PRS8HRSV",22,0)
 ;    times in value of X.  Values in Y string are locations
"RTN","PRS8HRSV",23,0)
 ;    in entitlement string where associated time in X is
"RTN","PRS8HRSV",24,0)
 ;    located.
"RTN","PRS8HRSV",25,0)
 ;   --------------------------------------------------
"RTN","PRS8HRSV",26,0)
 ;                 | Fixed      |  Premium
"RTN","PRS8HRSV",27,0)
 ;     Piece       | Position in|  Type Of Time
"RTN","PRS8HRSV",28,0)
 ;    Of Y-String  | Entitlement|
"RTN","PRS8HRSV",29,0)
 ;    & **WK()     | String     |
"RTN","PRS8HRSV",30,0)
 ;    -----------  | -----------|  --------------------
"RTN","PRS8HRSV",31,0)
 ;        7        |    28      |  comp earned
"RTN","PRS8HRSV",32,0)
 ;        9        |     2      |  unscheduled regular
"RTN","PRS8HRSV",33,0)
 ;       16        |    19      |  hrs excess 8-d
"RTN","PRS8HRSV",34,0)
 ;       17        |    20      |  hrs excess 8-d2
"RTN","PRS8HRSV",35,0)
 ;       18        |    21      |  hrs excess 8 d3
"RTN","PRS8HRSV",36,0)
 ;       20        |    12      |  OT total hrs d
"RTN","PRS8HRSV",37,0)
 ;       21        |    13      |  OT total hrs d2
"RTN","PRS8HRSV",38,0)
 ;       22        |    14      |  OT total hrs d3
"RTN","PRS8HRSV",39,0)
 ;   ---------------------------------------------------
"RTN","PRS8HRSV",40,0)
 ;
"RTN","PRS8HRSV",41,0)
 N ZZ S Y="^^^^^^28^^2^^^^^^^19^20^21^^12^13^14^^^^3^4^^^^"
"RTN","PRS8HRSV",42,0)
 ;
"RTN","PRS8HRSV",43,0)
 ;   Set Y to a premium time in Y string, based on X 
"RTN","PRS8HRSV",44,0)
 ;   OR set Y to zero if X is a non premium time or parttime hours.
"RTN","PRS8HRSV",45,0)
 ;
"RTN","PRS8HRSV",46,0)
 I X'=32 S Y=+$P(Y,"^",X)
"RTN","PRS8HRSV",47,0)
 ;
"RTN","PRS8HRSV",48,0)
 ;   IF Y is premium time & not Unscheduled regular but employee not
"RTN","PRS8HRSV",49,0)
 ;   ENTITLED to that type of time THEN set X to zero.
"RTN","PRS8HRSV",50,0)
 ;
"RTN","PRS8HRSV",51,0)
 I +Y,Y'=2,'$E(ENT,+Y) S X=0
"RTN","PRS8HRSV",52,0)
 ;
"RTN","PRS8HRSV",53,0)
 ;   Overtime & Not entitled set X & Y to unscheduled regular
"RTN","PRS8HRSV",54,0)
 ;
"RTN","PRS8HRSV",55,0)
 I "^12^13^14^"[("^"_Y_"^"),'X S X=9,Y=2
"RTN","PRS8HRSV",56,0)
 ;
"RTN","PRS8HRSV",57,0)
 ;   IF regular unscheduled (Y=2) & not hourly for regular unscheduled
"RTN","PRS8HRSV",58,0)
 ;   THEN set X=0, unless Baylor then X gets regular unscheduled.
"RTN","PRS8HRSV",59,0)
 ;
"RTN","PRS8HRSV",60,0)
 I X,Y=2,$E(ENT,+Y)'="H" S X=$S(TYP'["B":0,1:9)
"RTN","PRS8HRSV",61,0)
 ;
"RTN","PRS8HRSV",62,0)
 ;   If X is hours in excess of 8/day & > 40/week & type of time
"RTN","PRS8HRSV",63,0)
 ;   is compensatory time X = 0
"RTN","PRS8HRSV",64,0)
 ;
"RTN","PRS8HRSV",65,0)
 I "^16^17^18^"[("^"_X_"^"),TH(WK)>160,"Ee"[VAL S X=0
"RTN","PRS8HRSV",66,0)
 ;
"RTN","PRS8HRSV",67,0)
 ;   ** Significance of checking "X" now as opposed to Y.
"RTN","PRS8HRSV",68,0)
 ;
"RTN","PRS8HRSV",69,0)
 K Y Q:'X
"RTN","PRS8HRSV",70,0)
 ;
"RTN","PRS8HRSV",71,0)
 ;   (Hours excess 8/day, OT hours, Reg hours @ OT rate, Holiday hours, 
"RTN","PRS8HRSV",72,0)
 ;   part time hours) OR unscheduled regular & Nurse or Nurse Hybrid.
"RTN","PRS8HRSV",73,0)
 ; ### DO WE NEED TO ADD !HYBRID TO THIS CHECK ???
"RTN","PRS8HRSV",74,0)
 I "^16^17^18^20^21^22^29^30^31^32^"[("^"_X_"^")!(X=9&(TYP["N"!(TYP["H"))) D
"RTN","PRS8HRSV",75,0)
 .;
"RTN","PRS8HRSV",76,0)
 .;     If today holiday or holiday benefit day for employee
"RTN","PRS8HRSV",77,0)
 .;
"RTN","PRS8HRSV",78,0)
 .I $$HOLIDAY^PRS8UT(PY,DFN,DAY) D  Q:'X
"RTN","PRS8HRSV",79,0)
 ..;
"RTN","PRS8HRSV",80,0)
 ..;     If part time hours & entitled to (Holiday [Shift day, 2 or 3])
"RTN","PRS8HRSV",81,0)
 ..;
"RTN","PRS8HRSV",82,0)
 ..I X=32,$E(ENT,TOUR+21),HOLWKD S ZZ=X,X=$S($G(DAY(DAY,"OFF"))'=1:TOUR+28,1:9) D SET S X=$S(TYP'["I":ZZ,1:9) Q
"RTN","PRS8HRSV",83,0)
 ..;
"RTN","PRS8HRSV",84,0)
 ..;     IF not part time hours & intermittent employee & employee
"RTN","PRS8HRSV",85,0)
 ..;     entitled to holiday overtime & holiday worked THEN set TIME 
"RTN","PRS8HRSV",86,0)
 ..;     to OT on Holiday and credit that TIME in SET.
"RTN","PRS8HRSV",87,0)
 ..;
"RTN","PRS8HRSV",88,0)
 ..I X'=32,TYP["I",$E(ENT,25),HOLWKD S ZZ=X,X=24 D SET S X=0
"RTN","PRS8HRSV",89,0)
 ..;
"RTN","PRS8HRSV",90,0)
 ..;     IF conditions same as above except employee is NOT entitled
"RTN","PRS8HRSV",91,0)
 ..;     to Holiday OT THEN use X as coded to credit TIME.
"RTN","PRS8HRSV",92,0)
 ..;
"RTN","PRS8HRSV",93,0)
 ..I X'=32,TYP["I",'$E(ENT,25),HOLWKD S ZZ=0 D SET S X=9
"RTN","PRS8HRSV",94,0)
 ..;
"RTN","PRS8HRSV",95,0)
 ..;     IF not part time hours & emp. is entitled to Holiday OT But
"RTN","PRS8HRSV",96,0)
 ..;     they did not work the holiday THEN if emp. is part time or
"RTN","PRS8HRSV",97,0)
 ..;     intermittent set type of time to Regular hrs @ OT rate 3
"RTN","PRS8HRSV",98,0)
 ..;     otherwise OT @ Holiday rate & IF the original coded TIME
"RTN","PRS8HRSV",99,0)
 ..;     NOT = reg hrs @ OT rate(shift D,2,3) THEN credit TIME at 
"RTN","PRS8HRSV",100,0)
 ..;     OT on holiday or Reg hours @ OT rate.  THEN also credit time 
"RTN","PRS8HRSV",101,0)
 ..;     as unscheduled regular.  ** why code time twice?
"RTN","PRS8HRSV",102,0)
 ..;
"RTN","PRS8HRSV",103,0)
 ..I X'=32,$E(ENT,25),'HOLWKD D
"RTN","PRS8HRSV",104,0)
 ...S ZZ=X
"RTN","PRS8HRSV",105,0)
 ...S X=$S(TYP["P"!(TYP["I"):TOUR+28,1:24) D SET
"RTN","PRS8HRSV",106,0)
 ...I TYP["P"!(TYP["I") S X=9 D SET
"RTN","PRS8HRSV",107,0)
 ...S X=0
"RTN","PRS8HRSV",108,0)
 .;
"RTN","PRS8HRSV",109,0)
 .;     IF type of time is part time hours for intermittent employee
"RTN","PRS8HRSV",110,0)
 .;     THEN set TIME = unscheduled regular.
"RTN","PRS8HRSV",111,0)
 .;
"RTN","PRS8HRSV",112,0)
 .I X=32,TYP["I" S X=9
"RTN","PRS8HRSV",113,0)
 .;
"RTN","PRS8HRSV",114,0)
 .;    Part time hours or unscheduled regular.
"RTN","PRS8HRSV",115,0)
 .;
"RTN","PRS8HRSV",116,0)
 .Q:X=32!(X=9)
"RTN","PRS8HRSV",117,0)
 .;
"RTN","PRS8HRSV",118,0)
 .;     IF employee worked holiday THEN set TIME to zero & if original
"RTN","PRS8HRSV",119,0)
 .;     coded type of time is NOT regular hours @ OT rate DO
"RTN","PRS8HRSV",120,0)
 .;
"RTN","PRS8HRSV",121,0)
 .I HOLWKD S ZZ=X,X=0 D
"RTN","PRS8HRSV",122,0)
 ..;
"RTN","PRS8HRSV",123,0)
 ..;     IF entitled to Holiday pay for this shift THEN set TIME
"RTN","PRS8HRSV",124,0)
 ..;     to Holiday HRS (shift d, 2 or 3)
"RTN","PRS8HRSV",125,0)
 ..;
"RTN","PRS8HRSV",126,0)
 ..I $E(ENT,TOUR+21) S X=TOUR+28
"RTN","PRS8HRSV",127,0)
 ;
"RTN","PRS8HRSV",128,0)
 ;     IF employee is part time & either a nurse or nurse hybrid 
"RTN","PRS8HRSV",129,0)
 ;     & they worked the holiday
"RTN","PRS8HRSV",130,0)
 ; ### SHOULD HYBRID BE ADDED TO THIS CHECK  HOW SHOULD THESE HYBRIDS
"RTN","PRS8HRSV",131,0)
 ; ### TREATED ON A HOLIDAY
"RTN","PRS8HRSV",132,0)
 I TYP["P",TYP["N"!(TYP["H"),HOLWKD,X=32 D
"RTN","PRS8HRSV",133,0)
 .;
"RTN","PRS8HRSV",134,0)
 .;     J gets start & stop times for employee's holiday tour.
"RTN","PRS8HRSV",135,0)
 .;     Start/stop times are represented w/ natural numbers
"RTN","PRS8HRSV",136,0)
 .;     from 0-96.  Each 15 minute segment of the 24 hour period
"RTN","PRS8HRSV",137,0)
 .;     beginning & ending at midnight can be represented w/
"RTN","PRS8HRSV",138,0)
 .;     a positive integer.  I.e.  1 = mid-12:15am,
"RTN","PRS8HRSV",139,0)
 .;     2 = 12:15-12:30a ... 96 = 11:45pm-mid.
"RTN","PRS8HRSV",140,0)
 .;
"RTN","PRS8HRSV",141,0)
 .;     Loop thru each set of start & stop times.  IF the single
"RTN","PRS8HRSV",142,0)
 .;     1/4 hr segment we're working w/ falls w/in any of the nurses 
"RTN","PRS8HRSV",143,0)
 .;     start & stop times THEN set TIME to Holiday Hours Day.
"RTN","PRS8HRSV",144,0)
 .;
"RTN","PRS8HRSV",145,0)
 .N I,J S J=$G(^TMP($J,"PRS8",DAY,"HWK")),ZZ=X
"RTN","PRS8HRSV",146,0)
 .;
"RTN","PRS8HRSV",147,0)
 .F I=1:2 Q:$P(J,U,I)=""  I M'<$P(J,U,I),M'>$P(J,U,I+1) S X=29
"RTN","PRS8HRSV",148,0)
 .;
"RTN","PRS8HRSV",149,0)
 .;     Holiday hrs-Day. reset X if 2 day tour.  Otherwise X = 0.
"RTN","PRS8HRSV",150,0)
 .;
"RTN","PRS8HRSV",151,0)
 .I X=29 D SET S X=$S($P(^PRST(457.1,$P(DAY(DAY-1,0),U,2),0),U,5)="Y":ZZ,1:0)
"RTN","PRS8HRSV",152,0)
 ;
"RTN","PRS8HRSV",153,0)
 ;
"RTN","PRS8HRSV",154,0)
SET ; --- Set value into WK array
"RTN","PRS8HRSV",155,0)
 ;
"RTN","PRS8HRSV",156,0)
 ;     Full time employee & part time hours & normal hours WK1 + WK2
"RTN","PRS8HRSV",157,0)
 ;     = biweekly normal hours.
"RTN","PRS8HRSV",158,0)
 ;
"RTN","PRS8HRSV",159,0)
 I $P(C0,"^",10)=1,X=32,NH(1)+NH(2)=NH Q
"RTN","PRS8HRSV",160,0)
 ;
"RTN","PRS8HRSV",161,0)
 ;     For all types of TIME, increment the WK array.
"RTN","PRS8HRSV",162,0)
 ;
"RTN","PRS8HRSV",163,0)
 I +X D  Q
"RTN","PRS8HRSV",164,0)
 . S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)+1
"RTN","PRS8HRSV",165,0)
 ;
"RTN","PRS8HRSV",166,0)
 ;     When X is zero, reset to originally coded time.
"RTN","PRS8HRSV",167,0)
 ;
"RTN","PRS8HRSV",168,0)
 I 'X S X=ZZ Q
"RTN","PRS8HRSV",169,0)
 Q
"RTN","PRS8HRSV",170,0)
 ;
"RTN","PRS8HRSV",171,0)
 ;
"RTN","PRS8HRSV",172,0)
TH ; --- increment total hours & compensatory time hours.
"RTN","PRS8HRSV",173,0)
 ; Posted RG/OT/CT that is >8/day but < 40/week and < 80/pp will not be
"RTN","PRS8HRSV",174,0)
 ; counted in TH or TH(W)
"RTN","PRS8HRSV",175,0)
 ; 
"RTN","PRS8HRSV",176,0)
 ; I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",177,0)
 ;
"RTN","PRS8HRSV",178,0)
 I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) D
"RTN","PRS8HRSV",179,0)
 . Q:(HT>32)&(TH(W)<160)&(NH<320)&($E(ENT,19)=1)
"RTN","PRS8HRSV",180,0)
 . S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",181,0)
 Q
"RTN","PRS8HRSV",182,0)
 ;
"RTN","PRS8HRSV",183,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",184,0)
 ;
"RTN","PRS8HRSV",185,0)
G8 ; --- Check for greater than 8 hours in day
"RTN","PRS8HRSV",186,0)
 ;
"RTN","PRS8HRSV",187,0)
 Q:HTP'>32!(VAL="E")
"RTN","PRS8HRSV",188,0)
 ;
"RTN","PRS8HRSV",189,0)
 ; Checks for Hours Excess 8/day (DA/DE)
"RTN","PRS8HRSV",190,0)
 S X=TOUR+15 D CHK^PRS8HRSV
"RTN","PRS8HRSV",191,0)
 I X,NH<320,CYA2806>0 S CYA2806=CYA2806-1
"RTN","PRS8HRSV",192,0)
 Q:X
"RTN","PRS8HRSV",193,0)
 ;
"RTN","PRS8HRSV",194,0)
 ; Checks for OT Total Hours (OA/OE)
"RTN","PRS8HRSV",195,0)
 I TYP["I"!(TYP["P"),TYP'["B",TH(W)>160 S X=TOUR+19 D CHK^PRS8HRSV
"RTN","PRS8HRSV",196,0)
 Q
"RTN","PRS8HRSV",197,0)
 ;
"RTN","PRS8HRSV",198,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRSATP5")
0^1^B26276696^B28158534
"RTN","PRSATP5",1,0)
PRSATP5 ;HISC/MGD-Timekeeper Post Absence ;04/18/06
"RTN","PRSATP5",2,0)
 ;;4.0;PAID;**102,108**;Sep 21, 1995
"RTN","PRSATP5",3,0)
 ;
"RTN","PRSATP5",4,0)
CNV96(TDATA,NSEG,ARRAY,ZERO,DADRFM) ;
"RTN","PRSATP5",5,0)
 ; Convert the external representation of the start/stop time to
"RTN","PRSATP5",6,0)
 ; its 1 - 192 piece equivalent
"RTN","PRSATP5",7,0)
 ; 
"RTN","PRSATP5",8,0)
 ; Input:
"RTN","PRSATP5",9,0)
 ;       TDATA - Time segments to operate on passed by reference
"RTN","PRSATP5",10,0)
 ;        NSEG - Number of Segments per start/stop time entry
"RTN","PRSATP5",11,0)
 ;                       3 for tours, 4 for exceptions
"RTN","PRSATP5",12,0)
 ;       ARRAY - Name of ordered array to create
"RTN","PRSATP5",13,0)
 ;       1st char - P = Prior (to holiday)
"RTN","PRSATP5",14,0)
 ;                  H = Holiday
"RTN","PRSATP5",15,0)
 ;                  N = Next day after holiday
"RTN","PRSATP5",16,0)
 ;       2nd char - T = Tour segments
"RTN","PRSATP5",17,0)
 ;                  E = Exception segments, does not include segments
"RTN","PRSATP5",18,0)
 ;                      that define periods of On-Call
"RTN","PRSATP5",19,0)
 ;                  O = Segments that define periods of On-Call
"RTN","PRSATP5",20,0)
 ;                      Could have come from Tour(s) or Exceptions
"RTN","PRSATP5",21,0)
 ;                  C = Segments of work performed during periods
"RTN","PRSATP5",22,0)
 ;                      of On-Call
"RTN","PRSATP5",23,0)
 ;       Format for all arrays
"RTN","PRSATP5",24,0)
 ;         ARRAY(START)=START^STOP^TOT
"RTN","PRSATP5",25,0)
 ;         Note: Exceptions arrays (PE, HE, NE) will contain the
"RTN","PRSATP5",26,0)
 ;               Remarks Code as the 4th piece of DATA
"RTN","PRSATP5",27,0)
 ;               Exceptions(START)=START^STOP^TOT^RC
"RTN","PRSATP5",28,0)
 ;               
"RTN","PRSATP5",29,0)
 ;        ZERO - 0 node of day being processed 
"RTN","PRSATP5",30,0)
 ;        
"RTN","PRSATP5",31,0)
 ;        DADRFM - variable needed for tracking of tours that
"RTN","PRSATP5",32,0)
 ;                 cross midnight.  Passed by reference and may
"RTN","PRSATP5",33,0)
 ;                 be changed.
"RTN","PRSATP5",34,0)
 ;
"RTN","PRSATP5",35,0)
 Q:TDATA=""
"RTN","PRSATP5",36,0)
 N D,FLAG,K,LAST,K1,N,N1,N14,NDAY,QT,V,X,Y,Y1,Z
"RTN","PRSATP5",37,0)
 S N=$S(NSEG=4:2,1:1)
"RTN","PRSATP5",38,0)
 D CNV,COA
"RTN","PRSATP5",39,0)
 Q
"RTN","PRSATP5",40,0)
 ;
"RTN","PRSATP5",41,0)
 ; The CNV code was copied from PRS8SU and modified to fit
"RTN","PRSATP5",42,0)
 ; out needs
"RTN","PRSATP5",43,0)
 ; 
"RTN","PRSATP5",44,0)
 ; loop thru data nodes for day
"RTN","PRSATP5",45,0)
CNV S D(0)=ZERO,Z=TDATA,N1=NSEG,(N14,NDAY,LAST,QT)=0
"RTN","PRSATP5",46,0)
 ;
"RTN","PRSATP5",47,0)
 ; process tour and work nodes by looping thru postings in the node
"RTN","PRSATP5",48,0)
 F K=1:N1 S V=$P(Z,"^",K,K+1) Q:QT  D
"RTN","PRSATP5",49,0)
 .S X=$P(Z,U,K,999)
"RTN","PRSATP5",50,0)
 .S:X?1"^"."^"!(X="")!(N14=1) QT=1
"RTN","PRSATP5",51,0)
 .I QT!($P(Z,U,K)="") Q
"RTN","PRSATP5",52,0)
 .;
"RTN","PRSATP5",53,0)
 .S:K=1 (NDAY,LAST)=0
"RTN","PRSATP5",54,0)
 .;
"RTN","PRSATP5",55,0)
 .; process start time and stop time for posting in node
"RTN","PRSATP5",56,0)
 .F K1=1,2 S X=$P(V,"^",K1),(Y,Y1)=K1-1 I X'="" D
"RTN","PRSATP5",57,0)
 ..;
"RTN","PRSATP5",58,0)
 ..; when a tour exception (N=2) start time (K1=1) is being processed
"RTN","PRSATP5",59,0)
 ..; determine if LAST should be reset (FLAG). If LAST is reset then
"RTN","PRSATP5",60,0)
 ..; the start time of the tour exception will initially be placed
"RTN","PRSATP5",61,0)
 ..; in the current day (X'>96) instead of the following day (X>96)
"RTN","PRSATP5",62,0)
 ..S FLAG=1
"RTN","PRSATP5",63,0)
 ..I N=2&(K1=1)&("^HW^"[("^"_$P(Z,"^",K+2)_"^")) D
"RTN","PRSATP5",64,0)
 ...S FLAG=$S(NDAY=1!(LAST>96)&("^HW^"[("^"_$P(Z,"^",K+2)_"^"))&((X["A")!(X["MID")):0,1:1),NDAY=0
"RTN","PRSATP5",65,0)
 ..S:$P(D(0),"^",14)'=""&(X="MID")&(LAST=96)&(N=2)&(K1=1) FLAG=0
"RTN","PRSATP5",66,0)
 ..S:N=2&(K1=1)&(FLAG=1) (NDAY,LAST)=0
"RTN","PRSATP5",67,0)
 ..;
"RTN","PRSATP5",68,0)
 ..S Y=K1-1 D 15^PRS8SU ; determine number (1-192) corresponding to time
"RTN","PRSATP5",69,0)
 ..;
"RTN","PRSATP5",70,0)
 ..; if some tour exceptions (such as leave) are not within a sched.
"RTN","PRSATP5",71,0)
 ..; tour then they must be for the following day (i.e. 2-day tour)
"RTN","PRSATP5",72,0)
 ..I N=2,"^RG^OT^CT^ON^SB^HW^"'[("^"_$P(Z,"^",K+2)_"^") D
"RTN","PRSATP5",73,0)
 ...S Y=+$O(DADRFM("S",(-X-.01))),Y1=+$O(DADRFM("F",(X-.01)))
"RTN","PRSATP5",74,0)
 ...I $G(DADRFM("S",Y))'=$G(DADRFM("F",Y1)) S X=X+96
"RTN","PRSATP5",75,0)
 ...;
"RTN","PRSATP5",76,0)
 ..S $P(Z,"^",K+(K1-1))=X ; replace time by number
"RTN","PRSATP5",77,0)
 ..;
"RTN","PRSATP5",78,0)
 ..; save scheduled tour start and stop times for later use when
"RTN","PRSATP5",79,0)
 ..; placing some tour exceptions on correct day for 2-day tours
"RTN","PRSATP5",80,0)
 ..I K1=1,N=1!(N=4) S DADRFM("S",-X)=DADRFM
"RTN","PRSATP5",81,0)
 ..I K1=2,N=1!(N=4) S DADRFM("F",X)=DADRFM,DADRFM=DADRFM+1
"RTN","PRSATP5",82,0)
 ..;
"RTN","PRSATP5",83,0)
 ..; End of code copied from PRS8SU
"RTN","PRSATP5",84,0)
 ..S $P(TDATA,U,K+(K1-1))=X
"RTN","PRSATP5",85,0)
 Q
"RTN","PRSATP5",86,0)
 ;
"RTN","PRSATP5",87,0)
 ; Create ordered arrays
"RTN","PRSATP5",88,0)
COA N ARY,RC,SEG,STI,STOP,STRT,TOT
"RTN","PRSATP5",89,0)
 S RC=""
"RTN","PRSATP5",90,0)
 F SEG=0:1:6 D
"RTN","PRSATP5",91,0)
 .S STRT=$P(TDATA,U,(SEG*NSEG)+1)
"RTN","PRSATP5",92,0)
 .Q:STRT=""
"RTN","PRSATP5",93,0)
 .S STOP=$P(TDATA,U,(SEG*NSEG)+2),TOT=$P(TDATA,U,(SEG*NSEG)+3)
"RTN","PRSATP5",94,0)
 .; For Node1 & Node4 TOT will be numeric so we will need to get
"RTN","PRSATP5",95,0)
 .; its external representation (2 character string)
"RTN","PRSATP5",96,0)
 .; For Node2 TOT will be a 2 character string
"RTN","PRSATP5",97,0)
 .I NSEG=4 S RC=$P(TDATA,U,(SEG*NSEG)+4)
"RTN","PRSATP5",98,0)
 .S STI="" ; Special Tour Indicator
"RTN","PRSATP5",99,0)
 .I NSEG=3,TOT S STI=$P($G(^PRST(457.2,TOT,0)),U,2)
"RTN","PRSATP5",100,0)
 .;
"RTN","PRSATP5",101,0)
 .; Don't set exceptions defining periods of On-Call into Exception array
"RTN","PRSATP5",102,0)
 .I $E(ARRAY,2)="E",TOT'="ON" D
"RTN","PRSATP5",103,0)
 ..S @ARRAY@(STRT)=STRT_U_STOP_U_TOT_U_RC
"RTN","PRSATP5",104,0)
 .;
"RTN","PRSATP5",105,0)
 .; Set only Reg segments of tour where the Special Tour Indicator
"RTN","PRSATP5",106,0)
 .; is "" or RG into the Tour array
"RTN","PRSATP5",107,0)
 .I $E(ARRAY,2)="T" D
"RTN","PRSATP5",108,0)
 ..I TOT="" S @ARRAY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",109,0)
 ..I STI="RG" S @ARRAY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",110,0)
 .;
"RTN","PRSATP5",111,0)
 .; Only set segments that define On-Call into On-Call array
"RTN","PRSATP5",112,0)
 .I TOT="ON"!(STI="ON") D
"RTN","PRSATP5",113,0)
 ..S TOT=$S(TOT'="":TOT,1:STI)
"RTN","PRSATP5",114,0)
 ..S ARY=$E(ARRAY,1)_"O" S @ARY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",115,0)
 .;
"RTN","PRSATP5",116,0)
 .; Only segments of work get in the Call-Back
"RTN","PRSATP5",117,0)
 .I "^RG^OT^CT^"[("^"_TOT_"^") D
"RTN","PRSATP5",118,0)
 .. S ARY=$E(ARRAY,1)_"C" S @ARY@(STRT)=STRT_U_STOP_U_TOT
"RTN","PRSATP5",119,0)
 Q
"RTN","PRSATP5",120,0)
 ;
"RTN","PRSATP5",121,0)
GETPPP(PPIP,DFN,WDAY,BACK,QUIT) ;
"RTN","PRSATP5",122,0)
 ; Set appropriate variables for prior pay period
"RTN","PRSATP5",123,0)
 ;   Input:
"RTN","PRSATP5",124,0)
 ;     PPIP - Internal format of current pay period
"RTN","PRSATP5",125,0)
 ;      DFN - IEN of employee
"RTN","PRSATP5",126,0)
 ;     WDAY - Day currently being examined
"RTN","PRSATP5",127,0)
 ;     QUIT - Null
"RTN","PRSATP5",128,0)
 ;     
"RTN","PRSATP5",129,0)
 ;  Output:
"RTN","PRSATP5",130,0)
 ;     PPIP - IEN of Prior Pay Period
"RTN","PRSATP5",131,0)
 ;     WDAY - Set to last day of prior pay period
"RTN","PRSATP5",132,0)
 ;     BACK - Counter for number of pay period looked back
"RTN","PRSATP5",133,0)
 ;     QUIT - Will be set to 1 if there is no timecard for
"RTN","PRSATP5",134,0)
 ;            the employee in the prior pay period
"RTN","PRSATP5",135,0)
 ;
"RTN","PRSATP5",136,0)
 S PPIP=$O(^PRST(458,PPIP),-1) ; Get Prior PP
"RTN","PRSATP5",137,0)
 I 'PPIP S QUIT=1 Q  ; No prior pay period on file
"RTN","PRSATP5",138,0)
 ; Check for employee timecard in this PP
"RTN","PRSATP5",139,0)
 I '$D(^PRST(458,PPIP,"E",DFN,0)) S QUIT=1 Q
"RTN","PRSATP5",140,0)
 S WDAY=14,BACK=BACK+1
"RTN","PRSATP5",141,0)
 Q
"RTN","PRSATP5",142,0)
 ;
"RTN","PRSATP5",143,0)
GETNPP(PPIN,DFN,WDAY,NEXT,QUIT) ;
"RTN","PRSATP5",144,0)
 ; Set appropriate variables for next pay period
"RTN","PRSATP5",145,0)
 ;   Input:
"RTN","PRSATP5",146,0)
 ;     PPIN - Internal format of current pay period
"RTN","PRSATP5",147,0)
 ;      DFN - IEN of employee
"RTN","PRSATP5",148,0)
 ;     WDAY - Day currently being examined
"RTN","PRSATP5",149,0)
 ;     QUIT - Null
"RTN","PRSATP5",150,0)
 ;
"RTN","PRSATP5",151,0)
 ;  Output:
"RTN","PRSATP5",152,0)
 ;     PPIN - IEN of Next Pay Period
"RTN","PRSATP5",153,0)
 ;     WDAY - Set to first day of next pay period
"RTN","PRSATP5",154,0)
 ;     BACK - Counter for number of pay period looked forward
"RTN","PRSATP5",155,0)
 ;     QUIT - Will be set to 1 if there is no timecard for
"RTN","PRSATP5",156,0)
 ;            the employee in the next pay period
"RTN","PRSATP5",157,0)
 ;
"RTN","PRSATP5",158,0)
 S PPIN=$O(^PRST(458,PPIN)) ; Get next PP
"RTN","PRSATP5",159,0)
 I 'PPIN S QUIT=1 Q  ; Next pay period not on file
"RTN","PRSATP5",160,0)
 ; Check for employee timecard in this PP
"RTN","PRSATP5",161,0)
 I '$D(^PRST(458,PPIN,"E",DFN,0)) S QUIT=1 Q
"RTN","PRSATP5",162,0)
 S WDAY=1,NEXT=NEXT+1
"RTN","PRSATP5",163,0)
 Q
"RTN","PRSATP6")
0^2^B5087366^B5009394
"RTN","PRSATP6",1,0)
PRSATP6 ;HISC/MGD-Timekeeper Post Absence ;04/18/06
"RTN","PRSATP6",2,0)
 ;;4.0;PAID;**102,108**;Sep 21, 1995
"RTN","PRSATP6",3,0)
 ;       
"RTN","PRSATP6",4,0)
DBH(PPIP,DFN,WDAY,DBH,QUIT) ;
"RTN","PRSATP6",5,0)
 ; Find Day Before Holiday
"RTN","PRSATP6",6,0)
 ; Input:
"RTN","PRSATP6",7,0)
 ;   PPIP - IEN of pay period to check
"RTN","PRSATP6",8,0)
 ;    DFN - IEN of employee to check
"RTN","PRSATP6",9,0)
 ;   WDAY - Day to start looping from
"RTN","PRSATP6",10,0)
 ;    DAH - Null
"RTN","PRSATP6",11,0)
 ;   QUIT - Null
"RTN","PRSATP6",12,0)
 ;   
"RTN","PRSATP6",13,0)
 ;  Output: 
"RTN","PRSATP6",14,0)
 ;    DAH - PPIP^WDAY^Type of non-pay
"RTN","PRSATP6",15,0)
 ;   QUIT - Will be set to 1 if the holiday encapsulation
"RTN","PRSATP6",16,0)
 ;          rules are broken
"RTN","PRSATP6",17,0)
 ;
"RTN","PRSATP6",18,0)
 N DADRFM,EDATA,EEND,EIN,EINDX,ETOT,NODE0,NODE1,NODE2,NODE4
"RTN","PRSATP6",19,0)
 N TEND,TINDX,TOUR1,TOUR2,REGHRS1,REGHRS2
"RTN","PRSATP6",20,0)
 N PT,PE,PO,PC ; New ordered arrays
"RTN","PRSATP6",21,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP6",22,0)
 I NODE0="" S QUIT=1 Q  ; Corrupted data 
"RTN","PRSATP6",23,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP6",24,0)
 ;
"RTN","PRSATP6",25,0)
 ; Skip Days off
"RTN","PRSATP6",26,0)
 Q:$P(NODE0,U,2)=1
"RTN","PRSATP6",27,0)
 ;
"RTN","PRSATP6",28,0)
 ; Check for tours with no regular hours
"RTN","PRSATP6",29,0)
 S TOUR1=+$P(NODE0,U,2),TOUR2=+$P(NODE0,U,13)
"RTN","PRSATP6",30,0)
 S REGHRS1=$P($G(^PRST(457.1,TOUR1,0)),U,6)
"RTN","PRSATP6",31,0)
 S REGHRS2=$S(TOUR2:$P($G(^PRST(457.1,TOUR2,0)),U,6),1:"")
"RTN","PRSATP6",32,0)
 Q:$P(NODE0,U,2)'=2&($P(NODE0,U,2)'=3)&(REGHRS1+REGHRS2=0)
"RTN","PRSATP6",33,0)
 ;
"RTN","PRSATP6",34,0)
 ; If the day has a tour that defines work and there are no exceptions
"RTN","PRSATP6",35,0)
 ; encapsulation is broken
"RTN","PRSATP6",36,0)
 I $P(NODE0,U,2)>1,NODE2'["NP",NODE2'["WP" S QUIT=1 Q
"RTN","PRSATP6",37,0)
 ;
"RTN","PRSATP6",38,0)
 ; Checks for employees with DAILY tours
"RTN","PRSATP6",39,0)
 I $P(NODE0,U,2)=2!($P(NODE0,U,2)=3) S DBH=PPIP_U_DFN_U_$P(NODE2,U,3) Q
"RTN","PRSATP6",40,0)
 ;
"RTN","PRSATP6",41,0)
 ; Load tours and convert to numeric equivalents
"RTN","PRSATP6",42,0)
 ; This creates the ordered arrays
"RTN","PRSATP6",43,0)
 S DADRFM=1
"RTN","PRSATP6",44,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP6",45,0)
 D CNV96^PRSATP5(.NODE1,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP6",46,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP6",47,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"PT",NODE0,.DADRFM)
"RTN","PRSATP6",48,0)
 D CNV96^PRSATP5(.NODE2,4,"PE",NODE0,.DADRFM)
"RTN","PRSATP6",49,0)
 ;
"RTN","PRSATP6",50,0)
 ; Identify end of tour
"RTN","PRSATP6",51,0)
 S TINDX="",TINDX=$O(PT(TINDX),-1)
"RTN","PRSATP6",52,0)
 S TEND=$P(PT(TINDX),U,2)
"RTN","PRSATP6",53,0)
 ;
"RTN","PRSATP6",54,0)
 ; Loop backwards through ordered exceptions to see if last 15
"RTN","PRSATP6",55,0)
 ; minutes of tour was non-pay
"RTN","PRSATP6",56,0)
 S (EINDX,EDATA)=""
"RTN","PRSATP6",57,0)
 F EIN=1:1:7 D  Q:QUIT!(EINDX="")!(DBH'="")
"RTN","PRSATP6",58,0)
 . S EINDX=$O(PE(EINDX),-1)
"RTN","PRSATP6",59,0)
 . Q:EINDX=""
"RTN","PRSATP6",60,0)
 . S EDATA=PE(EINDX),EEND=$P(EDATA,U,2),ETOT=$P(EDATA,U,3)
"RTN","PRSATP6",61,0)
 . Q:EEND'=TEND  ; not last 15 minutes
"RTN","PRSATP6",62,0)
 . I ETOT'="NP"&(ETOT'="WP") S QUIT=1 Q  ; last 15 wasn't non-pay
"RTN","PRSATP6",63,0)
 . S DBH=PPIP_U_WDAY_U_ETOT
"RTN","PRSATP6",64,0)
 I DBH="" S QUIT=1
"RTN","PRSATP6",65,0)
 Q
"RTN","PRSATP7")
0^3^B4957081^B4880229
"RTN","PRSATP7",1,0)
PRSATP7 ;HISC/MGD-Timekeeper Post Absence ;04/18/06
"RTN","PRSATP7",2,0)
 ;;4.0;PAID;**102,108**;Sep 21, 1995
"RTN","PRSATP7",3,0)
 ;       
"RTN","PRSATP7",4,0)
DAH(PPIP,DFN,WDAY,DAH,QUIT) ;
"RTN","PRSATP7",5,0)
 ; Find Day After Holiday - Called from PRSASR
"RTN","PRSATP7",6,0)
 ; Input:
"RTN","PRSATP7",7,0)
 ;   PPIP - IEN of pay period to check
"RTN","PRSATP7",8,0)
 ;    DFN - IEN of employee to check
"RTN","PRSATP7",9,0)
 ;   WDAY - Day to start looping from
"RTN","PRSATP7",10,0)
 ;    DAH - Null
"RTN","PRSATP7",11,0)
 ;   QUIT - Null
"RTN","PRSATP7",12,0)
 ;   
"RTN","PRSATP7",13,0)
 ;  Output: 
"RTN","PRSATP7",14,0)
 ;    DAH - PPIP^WDAY^Type of non-pay
"RTN","PRSATP7",15,0)
 ;   QUIT - Will be set to 1 if the holiday encapsulation
"RTN","PRSATP7",16,0)
 ;          rules are broken
"RTN","PRSATP7",17,0)
 ;
"RTN","PRSATP7",18,0)
 N DADRFM,EDATA,EEND,EIN,EINDX,ETOT,NODE0,NODE1,NODE2,NODE4
"RTN","PRSATP7",19,0)
 N TINDX,TOUR1,TOUR2,REGHRS1,REGHRS2
"RTN","PRSATP7",20,0)
 N NT,NE,NO,NC ; New ordered arrays
"RTN","PRSATP7",21,0)
 S NODE0=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,0))
"RTN","PRSATP7",22,0)
 I NODE0="" S QUIT=1 Q  ; Corrupted data 
"RTN","PRSATP7",23,0)
 S NODE2=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,2))
"RTN","PRSATP7",24,0)
 ;
"RTN","PRSATP7",25,0)
 ; Skip Days off
"RTN","PRSATP7",26,0)
 Q:$P(NODE0,U,2)=1
"RTN","PRSATP7",27,0)
 ;
"RTN","PRSATP7",28,0)
 ; Check for tours with no regular hours
"RTN","PRSATP7",29,0)
 S TOUR1=+$P(NODE0,U,2),TOUR2=+$P(NODE0,U,13)
"RTN","PRSATP7",30,0)
 S REGHRS1=$P($G(^PRST(457.1,TOUR1,0)),U,6)
"RTN","PRSATP7",31,0)
 S REGHRS2=$S(TOUR2:$P($G(^PRST(457.1,TOUR2,0)),U,6),1:"")
"RTN","PRSATP7",32,0)
 Q:$P(NODE0,U,2)'=2&($P(NODE0,U,2)'=3)&(REGHRS1+REGHRS2=0)
"RTN","PRSATP7",33,0)
 ;
"RTN","PRSATP7",34,0)
 ; If scheduled work day w/o any non-pay, set QUIT
"RTN","PRSATP7",35,0)
 I $P(NODE0,U,2)>1,NODE2'["NP",NODE2'["WP" S QUIT=1 Q
"RTN","PRSATP7",36,0)
 ;
"RTN","PRSATP7",37,0)
 ; Checks for employees with DAILY tours
"RTN","PRSATP7",38,0)
 I $P(NODE0,U,2)=2!($P(NODE0,U,2)=3) S DAH=PPIP_U_DFN_U_$P(NODE2,U,3) Q
"RTN","PRSATP7",39,0)
 ;
"RTN","PRSATP7",40,0)
 ; Load tours and convert to numeric equivalents
"RTN","PRSATP7",41,0)
 ; This creates the ordered arrays
"RTN","PRSATP7",42,0)
 ;
"RTN","PRSATP7",43,0)
 S DADRFM=1
"RTN","PRSATP7",44,0)
 S NODE1=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,1))
"RTN","PRSATP7",45,0)
 D CNV96^PRSATP5(.NODE1,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP7",46,0)
 S NODE4=$G(^PRST(458,PPIP,"E",DFN,"D",WDAY,4))
"RTN","PRSATP7",47,0)
 I NODE4'="" D CNV96^PRSATP5(.NODE4,3,"NT",NODE0,.DADRFM)
"RTN","PRSATP7",48,0)
 D CNV96^PRSATP5(.NODE2,4,"NE",NODE0,.DADRFM)
"RTN","PRSATP7",49,0)
 ;
"RTN","PRSATP7",50,0)
 ; Identify beginning of tour
"RTN","PRSATP7",51,0)
 S TINDX="",TINDX=$O(NT(TINDX))
"RTN","PRSATP7",52,0)
 ;
"RTN","PRSATP7",53,0)
 ; Loop through ordered exceptions to see if the first 15 minutes
"RTN","PRSATP7",54,0)
 ; of the tour was non-pay
"RTN","PRSATP7",55,0)
 S (EINDX,EDATA)=""
"RTN","PRSATP7",56,0)
 F EIN=1:1:7 D  Q:QUIT!(EINDX="")!(DAH'="")
"RTN","PRSATP7",57,0)
 . S EINDX=$O(NE(EINDX))
"RTN","PRSATP7",58,0)
 . Q:EINDX=""
"RTN","PRSATP7",59,0)
 . S EDATA=NE(EINDX),EEND=$P(EDATA,U,2),ETOT=$P(EDATA,U,3)
"RTN","PRSATP7",60,0)
 . Q:EINDX'=TINDX  ; not first 15 minutes
"RTN","PRSATP7",61,0)
 . I ETOT'="NP"&(ETOT'="WP") S QUIT=1 Q  ; first 15 wasn't non-pay
"RTN","PRSATP7",62,0)
 . S DAH=PPIP_U_WDAY_U_ETOT
"RTN","PRSATP7",63,0)
 I DAH="" S QUIT=1
"RTN","PRSATP7",64,0)
 Q
"VER")
8.0^22.0
"BLD",6677,6)
^95
**END**
**END**
