Released PRS*4*112 SEQ #102
Extracted from mail message
**KIDS**:PRS*4.0*112^

**INSTALL NAME**
PRS*4.0*112
"BLD",7030,0)
PRS*4.0*112^PAID^0^3070919^y
"BLD",7030,1,0)
^^1^1^3061206^
"BLD",7030,1,1,0)
Nurse Alternative Work Schedules
"BLD",7030,4,0)
^9.64PA^456^6
"BLD",7030,4,455.1,0)
455.1
"BLD",7030,4,455.1,222)
n^n^f^^n^PRS P112 DATA^y^r^n
"BLD",7030,4,456,0)
456
"BLD",7030,4,456,222)
y^y^f^^^^n
"BLD",7030,4,457.3,0)
457.3
"BLD",7030,4,457.3,222)
n^n^f^^n^^y^r^n
"BLD",7030,4,457.4,0)
457.4
"BLD",7030,4,457.4,222)
n^n^f^^n^^y^r^n
"BLD",7030,4,457.5,0)
457.5
"BLD",7030,4,457.5,222)
n^n^f^^n^^y^r^n
"BLD",7030,4,458.8,0)
458.8
"BLD",7030,4,458.8,222)
y^n^f^^^^n
"BLD",7030,4,"B",455.1,455.1)

"BLD",7030,4,"B",456,456)

"BLD",7030,4,"B",457.3,457.3)

"BLD",7030,4,"B",457.4,457.4)

"BLD",7030,4,"B",457.5,457.5)

"BLD",7030,4,"B",458.8,458.8)

"BLD",7030,6)
14^
"BLD",7030,6.3)
54
"BLD",7030,"ABPKG")
n
"BLD",7030,"INIT")
P112POST^PRSXP112
"BLD",7030,"KRN",0)
^9.67PA^8989.52^19
"BLD",7030,"KRN",.4,0)
.4
"BLD",7030,"KRN",.4,"NM",0)
^9.68A^^
"BLD",7030,"KRN",.401,0)
.401
"BLD",7030,"KRN",.402,0)
.402
"BLD",7030,"KRN",.403,0)
.403
"BLD",7030,"KRN",.5,0)
.5
"BLD",7030,"KRN",.84,0)
.84
"BLD",7030,"KRN",3.6,0)
3.6
"BLD",7030,"KRN",3.8,0)
3.8
"BLD",7030,"KRN",9.2,0)
9.2
"BLD",7030,"KRN",9.8,0)
9.8
"BLD",7030,"KRN",9.8,"NM",0)
^9.68A^57^46
"BLD",7030,"KRN",9.8,"NM",1,0)
PRSAENT^^0^B18682753
"BLD",7030,"KRN",9.8,"NM",3,0)
PRS8AC^^0^B64260454
"BLD",7030,"KRN",9.8,"NM",4,0)
PRS8CR^^0^B10818384
"BLD",7030,"KRN",9.8,"NM",5,0)
PRS8DR^^0^B13372030
"BLD",7030,"KRN",9.8,"NM",6,0)
PRS8EX^^0^B42573837
"BLD",7030,"KRN",9.8,"NM",8,0)
PRS8HR^^0^B28258844
"BLD",7030,"KRN",9.8,"NM",9,0)
PRS8MT^^0^B45103174
"BLD",7030,"KRN",9.8,"NM",11,0)
PRS8ST^^0^B44290795
"BLD",7030,"KRN",9.8,"NM",12,0)
PRS8SU^^0^B23008538
"BLD",7030,"KRN",9.8,"NM",13,0)
PRS8VW^^0^B15727436
"BLD",7030,"KRN",9.8,"NM",14,0)
PRS8VW1^^0^B4032424
"BLD",7030,"KRN",9.8,"NM",15,0)
PRS8VW2^^0^B23384902
"BLD",7030,"KRN",9.8,"NM",16,0)
PRSACED5^^0^B6936874
"BLD",7030,"KRN",9.8,"NM",17,0)
PRSAENX^^0^B5045459
"BLD",7030,"KRN",9.8,"NM",18,0)
PRSALVS^^0^B19299804
"BLD",7030,"KRN",9.8,"NM",20,0)
PRSATE^^0^B81258209
"BLD",7030,"KRN",9.8,"NM",21,0)
PRSATE0^^0^B9347970
"BLD",7030,"KRN",9.8,"NM",28,0)
PRSASR^^0^B51171967
"BLD",7030,"KRN",9.8,"NM",29,0)
PRSATP^^0^B31400754
"BLD",7030,"KRN",9.8,"NM",30,0)
PRSATP1^^0^B16694794
"BLD",7030,"KRN",9.8,"NM",31,0)
PRSATPE^^0^B59425461
"BLD",7030,"KRN",9.8,"NM",32,0)
PRSAOTT^^0^B32642391
"BLD",7030,"KRN",9.8,"NM",33,0)
PRSU1B2^^0^B16700974
"BLD",7030,"KRN",9.8,"NM",34,0)
PRSARC^^0^B63390639
"BLD",7030,"KRN",9.8,"NM",35,0)
PRSARC01^^0^B95060943
"BLD",7030,"KRN",9.8,"NM",36,0)
PRSARC02^^0^B34099229
"BLD",7030,"KRN",9.8,"NM",37,0)
PRSARC03^^0^B65859109
"BLD",7030,"KRN",9.8,"NM",38,0)
PRSARC04^^0^B24587069
"BLD",7030,"KRN",9.8,"NM",39,0)
PRSARC05^^0^B2069515
"BLD",7030,"KRN",9.8,"NM",40,0)
PRSARC06^^0^B25613765
"BLD",7030,"KRN",9.8,"NM",41,0)
PRSARC07^^0^B43840543
"BLD",7030,"KRN",9.8,"NM",42,0)
PRSARC08^^0^B14633080
"BLD",7030,"KRN",9.8,"NM",43,0)
PRSARCS^^0^B15801244
"BLD",7030,"KRN",9.8,"NM",44,0)
PRSARCH^^0^B18790944
"BLD",7030,"KRN",9.8,"NM",45,0)
PRS8HRSV^^0^B43992593
"BLD",7030,"KRN",9.8,"NM",46,0)
PRS8MSC0^^0^B40092261
"BLD",7030,"KRN",9.8,"NM",47,0)
PRS8OC^^0^B43489130
"BLD",7030,"KRN",9.8,"NM",48,0)
PRSACED6^^0^B5380606
"BLD",7030,"KRN",9.8,"NM",49,0)
PRSACED2^^0^B16840857
"BLD",7030,"KRN",9.8,"NM",50,0)
PRSPUT3^^0^B60317840
"BLD",7030,"KRN",9.8,"NM",51,0)
PRS8PP^^0^B69818276
"BLD",7030,"KRN",9.8,"NM",53,0)
PRS8WE2^^0^B21508630
"BLD",7030,"KRN",9.8,"NM",54,0)
PRSAPPH^^0^B20434653
"BLD",7030,"KRN",9.8,"NM",55,0)
PRSARC09^^0^B9347328
"BLD",7030,"KRN",9.8,"NM",56,0)
PRSXP112^^0^B1188446
"BLD",7030,"KRN",9.8,"NM",57,0)
PRSAPPO^^0^B16889205
"BLD",7030,"KRN",9.8,"NM","B","PRS8AC",3)

"BLD",7030,"KRN",9.8,"NM","B","PRS8CR",4)

"BLD",7030,"KRN",9.8,"NM","B","PRS8DR",5)

"BLD",7030,"KRN",9.8,"NM","B","PRS8EX",6)

"BLD",7030,"KRN",9.8,"NM","B","PRS8HR",8)

"BLD",7030,"KRN",9.8,"NM","B","PRS8HRSV",45)

"BLD",7030,"KRN",9.8,"NM","B","PRS8MSC0",46)

"BLD",7030,"KRN",9.8,"NM","B","PRS8MT",9)

"BLD",7030,"KRN",9.8,"NM","B","PRS8OC",47)

"BLD",7030,"KRN",9.8,"NM","B","PRS8PP",51)

"BLD",7030,"KRN",9.8,"NM","B","PRS8ST",11)

"BLD",7030,"KRN",9.8,"NM","B","PRS8SU",12)

"BLD",7030,"KRN",9.8,"NM","B","PRS8VW",13)

"BLD",7030,"KRN",9.8,"NM","B","PRS8VW1",14)

"BLD",7030,"KRN",9.8,"NM","B","PRS8VW2",15)

"BLD",7030,"KRN",9.8,"NM","B","PRS8WE2",53)

"BLD",7030,"KRN",9.8,"NM","B","PRSACED2",49)

"BLD",7030,"KRN",9.8,"NM","B","PRSACED5",16)

"BLD",7030,"KRN",9.8,"NM","B","PRSACED6",48)

"BLD",7030,"KRN",9.8,"NM","B","PRSAENT",1)

"BLD",7030,"KRN",9.8,"NM","B","PRSAENX",17)

"BLD",7030,"KRN",9.8,"NM","B","PRSALVS",18)

"BLD",7030,"KRN",9.8,"NM","B","PRSAOTT",32)

"BLD",7030,"KRN",9.8,"NM","B","PRSAPPH",54)

"BLD",7030,"KRN",9.8,"NM","B","PRSAPPO",57)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC",34)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC01",35)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC02",36)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC03",37)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC04",38)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC05",39)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC06",40)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC07",41)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC08",42)

"BLD",7030,"KRN",9.8,"NM","B","PRSARC09",55)

"BLD",7030,"KRN",9.8,"NM","B","PRSARCH",44)

"BLD",7030,"KRN",9.8,"NM","B","PRSARCS",43)

"BLD",7030,"KRN",9.8,"NM","B","PRSASR",28)

"BLD",7030,"KRN",9.8,"NM","B","PRSATE",20)

"BLD",7030,"KRN",9.8,"NM","B","PRSATE0",21)

"BLD",7030,"KRN",9.8,"NM","B","PRSATP",29)

"BLD",7030,"KRN",9.8,"NM","B","PRSATP1",30)

"BLD",7030,"KRN",9.8,"NM","B","PRSATPE",31)

"BLD",7030,"KRN",9.8,"NM","B","PRSPUT3",50)

"BLD",7030,"KRN",9.8,"NM","B","PRSU1B2",33)

"BLD",7030,"KRN",9.8,"NM","B","PRSXP112",56)

"BLD",7030,"KRN",19,0)
19
"BLD",7030,"KRN",19,"NM",0)
^9.68A^10^10
"BLD",7030,"KRN",19,"NM",1,0)
PRSA RECESS ENTER/EDIT^^0
"BLD",7030,"KRN",19,"NM",2,0)
PRSA RECESS VIEWER-HR^^0
"BLD",7030,"KRN",19,"NM",3,0)
PRSA RECESS VIEWER-NURSE^^0
"BLD",7030,"KRN",19,"NM",4,0)
PRSA RECESS VIEWER-SUP^^0
"BLD",7030,"KRN",19,"NM",5,0)
PRSA RECESS VIEWER-TK^^0
"BLD",7030,"KRN",19,"NM",6,0)
PRSA TK MEN-EMP^^2
"BLD",7030,"KRN",19,"NM",7,0)
PRSRSU-PAID SYSTEM REPORTS^^2
"BLD",7030,"KRN",19,"NM",8,0)
PRSRFI-PAID SYSTEM REPORTS^^2
"BLD",7030,"KRN",19,"NM",9,0)
PRSA EMP MENU^^2
"BLD",7030,"KRN",19,"NM",10,0)
PRSD 05 EMPLOYEE INQUIRY MENU^^2
"BLD",7030,"KRN",19,"NM","B","PRSA EMP MENU",9)

"BLD",7030,"KRN",19,"NM","B","PRSA RECESS ENTER/EDIT",1)

"BLD",7030,"KRN",19,"NM","B","PRSA RECESS VIEWER-HR",2)

"BLD",7030,"KRN",19,"NM","B","PRSA RECESS VIEWER-NURSE",3)

"BLD",7030,"KRN",19,"NM","B","PRSA RECESS VIEWER-SUP",4)

"BLD",7030,"KRN",19,"NM","B","PRSA RECESS VIEWER-TK",5)

"BLD",7030,"KRN",19,"NM","B","PRSA TK MEN-EMP",6)

"BLD",7030,"KRN",19,"NM","B","PRSD 05 EMPLOYEE INQUIRY MENU",10)

"BLD",7030,"KRN",19,"NM","B","PRSRFI-PAID SYSTEM REPORTS",8)

"BLD",7030,"KRN",19,"NM","B","PRSRSU-PAID SYSTEM REPORTS",7)

"BLD",7030,"KRN",19.1,0)
19.1
"BLD",7030,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",7030,"KRN",19.1,"NM",1,0)
PRSAWS9^^0
"BLD",7030,"KRN",19.1,"NM","B","PRSAWS9",1)

"BLD",7030,"KRN",101,0)
101
"BLD",7030,"KRN",101,"NM",0)
^9.68A^11^11
"BLD",7030,"KRN",101,"NM",1,0)
PRSA DESELECT WEEKS^^0
"BLD",7030,"KRN",101,"NM",2,0)
PRSA FILE RECESS SCHEDULE^^0
"BLD",7030,"KRN",101,"NM",3,0)
PRSA RECESS HOURS VIEW^^0
"BLD",7030,"KRN",101,"NM",4,0)
PRSA RECESS TRACKING MENU^^0
"BLD",7030,"KRN",101,"NM",5,0)
PRSA SELECT RECESS WK^^0
"BLD",7030,"KRN",101,"NM",6,0)
PRSA SET RECESS HOURS^^0
"BLD",7030,"KRN",101,"NM",7,0)
PRSA CHANGE AWS START^^0
"BLD",7030,"KRN",101,"NM",8,0)
PRSA RECESS HELP^^0
"BLD",7030,"KRN",101,"NM",9,0)
PRSA RECESS QUIT^^0
"BLD",7030,"KRN",101,"NM",10,0)
PRSA RECESS SAVE AND CONTINUE^^0
"BLD",7030,"KRN",101,"NM",11,0)
PRSA RECESS VIEW MENU^^0
"BLD",7030,"KRN",101,"NM","B","PRSA CHANGE AWS START",7)

"BLD",7030,"KRN",101,"NM","B","PRSA DESELECT WEEKS",1)

"BLD",7030,"KRN",101,"NM","B","PRSA FILE RECESS SCHEDULE",2)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS HELP",8)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS HOURS VIEW",3)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS QUIT",9)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS SAVE AND CONTINUE",10)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS TRACKING MENU",4)

"BLD",7030,"KRN",101,"NM","B","PRSA RECESS VIEW MENU",11)

"BLD",7030,"KRN",101,"NM","B","PRSA SELECT RECESS WK",5)

"BLD",7030,"KRN",101,"NM","B","PRSA SET RECESS HOURS",6)

"BLD",7030,"KRN",409.61,0)
409.61
"BLD",7030,"KRN",409.61,"NM",0)
^9.68A^4^4
"BLD",7030,"KRN",409.61,"NM",1,0)
PRSA RECESS TRACKING MANAGER^^0
"BLD",7030,"KRN",409.61,"NM",2,0)
PRSA RECESS SUMMARY^^0
"BLD",7030,"KRN",409.61,"NM",3,0)
PRSA RECESS TRACKING HELP^^0
"BLD",7030,"KRN",409.61,"NM",4,0)
PRSA RECESS TRACKING VIEWER^^0
"BLD",7030,"KRN",409.61,"NM","B","PRSA RECESS SUMMARY",2)

"BLD",7030,"KRN",409.61,"NM","B","PRSA RECESS TRACKING HELP",3)

"BLD",7030,"KRN",409.61,"NM","B","PRSA RECESS TRACKING MANAGER",1)

"BLD",7030,"KRN",409.61,"NM","B","PRSA RECESS TRACKING VIEWER",4)

"BLD",7030,"KRN",771,0)
771
"BLD",7030,"KRN",870,0)
870
"BLD",7030,"KRN",8989.51,0)
8989.51
"BLD",7030,"KRN",8989.52,0)
8989.52
"BLD",7030,"KRN",8994,0)
8994
"BLD",7030,"KRN",8994,"NM",0)
^9.68A^^
"BLD",7030,"KRN","B",.4,.4)

"BLD",7030,"KRN","B",.401,.401)

"BLD",7030,"KRN","B",.402,.402)

"BLD",7030,"KRN","B",.403,.403)

"BLD",7030,"KRN","B",.5,.5)

"BLD",7030,"KRN","B",.84,.84)

"BLD",7030,"KRN","B",3.6,3.6)

"BLD",7030,"KRN","B",3.8,3.8)

"BLD",7030,"KRN","B",9.2,9.2)

"BLD",7030,"KRN","B",9.8,9.8)

"BLD",7030,"KRN","B",19,19)

"BLD",7030,"KRN","B",19.1,19.1)

"BLD",7030,"KRN","B",101,101)

"BLD",7030,"KRN","B",409.61,409.61)

"BLD",7030,"KRN","B",771,771)

"BLD",7030,"KRN","B",870,870)

"BLD",7030,"KRN","B",8989.51,8989.51)

"BLD",7030,"KRN","B",8989.52,8989.52)

"BLD",7030,"KRN","B",8994,8994)

"BLD",7030,"QUES",0)
^9.62^^
"BLD",7030,"REQB",0)
^9.611^12^11
"BLD",7030,"REQB",1,0)
PRS*4.0*108^2
"BLD",7030,"REQB",2,0)
PRS*4.0*109^2
"BLD",7030,"REQB",4,0)
PRS*4.0*55^2
"BLD",7030,"REQB",5,0)
PRS*4.0*93^2
"BLD",7030,"REQB",6,0)
PRS*4.0*111^2
"BLD",7030,"REQB",7,0)
PRS*4.0*92^2
"BLD",7030,"REQB",8,0)
PRS*4.0*45^2
"BLD",7030,"REQB",9,0)
PRS*4.0*54^2
"BLD",7030,"REQB",10,0)
PRS*4.0*57^2
"BLD",7030,"REQB",11,0)
PRS*4.0*69^2
"BLD",7030,"REQB",12,0)
PRS*4.0*96^2
"BLD",7030,"REQB","B","PRS*4.0*108",1)

"BLD",7030,"REQB","B","PRS*4.0*109",2)

"BLD",7030,"REQB","B","PRS*4.0*111",6)

"BLD",7030,"REQB","B","PRS*4.0*45",8)

"BLD",7030,"REQB","B","PRS*4.0*54",9)

"BLD",7030,"REQB","B","PRS*4.0*55",4)

"BLD",7030,"REQB","B","PRS*4.0*57",10)

"BLD",7030,"REQB","B","PRS*4.0*69",11)

"BLD",7030,"REQB","B","PRS*4.0*92",7)

"BLD",7030,"REQB","B","PRS*4.0*93",5)

"BLD",7030,"REQB","B","PRS*4.0*96",12)

"DATA",455.1,153,0)
153
"DATA",455.1,153,"E",0)
^^2^2^3061220^
"DATA",455.1,153,"E",1,0)
With Duty Basis 1, Normal Hours must exceed 79 unless Pay Plan is K or
"DATA",455.1,153,"E",2,0)
   M and Normal Hours are 48 or 72.
"DATA",455.1,155,0)
155
"DATA",455.1,155,"E",0)
^^2^2^3061220^
"DATA",455.1,155,"E",1,0)
With Duty Basis 2, Normal Hours may not exceed 79 unless Pay Plan is M 
"DATA",455.1,155,"E",2,0)
and FLSA is Exempt.
"DATA",457.3,2,0)
AL^ANNUAL LV^Annual Leave
"DATA",457.3,3,0)
AA^AUTH ABS^Authorized Absence
"DATA",457.3,4,0)
CP^COP^Continuation of Pay
"DATA",457.3,5,0)
CU^CT/CH USED^CompTime/CreditHrs Used
"DATA",457.3,6,0)
HX^HOL EX^Holiday Excused
"DATA",457.3,8,0)
ML^MIL LV^Military Leave
"DATA",457.3,10,0)
NP^NON PAY^Non-Pay
"DATA",457.3,11,0)
RL^RES ANN LV^Restored Annual Leave
"DATA",457.3,12,0)
SL^SICK LV^Sick Leave
"DATA",457.3,15,0)
WP^LWOP^Leave Without Pay
"DATA",457.3,16,0)
CT^CT/CH ERND^CompTime/CreditHrs Earned
"DATA",457.3,18,0)
OT^OVERTIME^Overtime
"DATA",457.3,19,0)
RG^REG TIME^Regular Scheduled Time
"DATA",457.3,20,0)
TR^TRAINING^Training
"DATA",457.3,21,0)
TV^TRAVEL^Travel
"DATA",457.3,22,0)
NL^N/P A/L^Non-Pay Annual Leave
"DATA",457.3,23,0)
ON^ON-CALL^On-Call
"DATA",457.3,24,0)
SB^STANDBY^Standby
"DATA",457.3,25,0)
UN^UNAVAIL^Unavailable
"DATA",457.3,26,0)
HW^HOL WK^Holiday Worked
"DATA",457.3,27,0)
CB^FAM CARE^Family Care & Bereavement
"DATA",457.3,28,0)
AD^ADOPT^Adoption
"DATA",457.3,29,0)
DL^DONOR LV^Donor Leave
"DATA",457.3,30,0)
RS^RECESS^Recess
"DATA",457.4,1,0)
SF71 on file^1^AL AA DL CU ML RL SL CB AD WP NL^SF71 ON FILE
"DATA",457.4,3,0)
AWOL^3^WP^AWOL
"DATA",457.4,4,0)
On Suspension^4^WP^ON SUSPENSION
"DATA",457.4,5,0)
AA Granted by Supr.^5^AA DL^AA GRANTED BY SUPR.
"DATA",457.4,6,0)
Jury Duty^6^AA^JURY DUTY
"DATA",457.4,7,0)
Shift Coverage^7^RG^SHIFT COVERAGE
"DATA",457.4,8,0)
OT while in Travel Status^8^OT^OT WHILE IN TRAVEL STATUS
"DATA",457.4,9,0)
OT/CT on Premium T&L^9^OT CT RG^OT/CT ON PREMIUM T&L
"DATA",457.4,11,0)
Pre-Scheduled^11^OT CT^PRE-SCHEDULED
"DATA",457.4,12,0)
Tour Coverage^12^OT CT^TOUR COVERAGE
"DATA",457.4,13,0)
CB - Non-Premium T&L^13^OT CT^CB - NON-PREMIUM T&L
"DATA",457.4,14,0)
CB - Premium T&L^14^OT CT^CB - PREMIUM T&L
"DATA",457.4,15,0)
CompTime--No Remark^15^CT CU^COMPTIME--NO REMARK
"DATA",457.4,16,0)
Credit Hours^16^CT CU^CREDIT HOURS
"DATA",457.4,17,0)
OT/CT With Premiums^17^OT CT RG HW^OT/CT WITH PREMIUMS
"DATA",457.5,1,0)
0 1 E^01E
"DATA",457.5,1,1)
H00001101111110100100111000101101111100
"DATA",457.5,6,0)
0 1 N^01N
"DATA",457.5,6,1)
H00001101111110101111111000101101111100
"DATA",457.5,7,0)
0 2 E^02E
"DATA",457.5,7,1)
HH0001100001110100100111000101101111100
"DATA",457.5,12,0)
0 2 N^02N
"DATA",457.5,12,1)
HH0001100001110101111111000101101111100
"DATA",457.5,13,0)
0 3 N^03N
"DATA",457.5,13,1)
0H0000000001110100111000000000000000100
"DATA",457.5,14,0)
0 3 E^03E
"DATA",457.5,14,1)
0H0000000001110100100000000000000000100
"DATA",457.5,15,0)
A 1 E^A1E
"DATA",457.5,15,1)
H00001001001001000100100000101101111100
"DATA",457.5,16,0)
A 1 N PPI=X^A1NX
"DATA",457.5,16,1)
H00001001001001001100100010101101111100
"DATA",457.5,17,0)
A 1 E PPI=X^A1EX
"DATA",457.5,17,1)
H00001001001001000100100010101101111100
"DATA",457.5,18,0)
A 1 E PPI=E,F^A1EE
"DATA",457.5,18,1)
H00001011001001000100100110101101111100
"DATA",457.5,19,0)
A 1 N PPI=Y^A1NY
"DATA",457.5,19,1)
H00000000001001001100000001111101111100
"DATA",457.5,20,0)
A 1 N PPI=W^A1NW
"DATA",457.5,20,1)
H00001001001001011100100011111101111100
"DATA",457.5,21,0)
A 1 N NH>80^A1N*
"DATA",457.5,21,1)
H00000000001001001100000000101101111101
"DATA",457.5,22,0)
A 1 N^A1N
"DATA",457.5,22,1)
H00001001001001001100100000101101111100
"DATA",457.5,23,0)
A 2 E PPI=E,F^A2EE
"DATA",457.5,23,1)
HH0001011001001000100100110101101111100
"DATA",457.5,24,0)
A 2 E^A2E
"DATA",457.5,24,1)
HH0001000001001000100100000101101111100
"DATA",457.5,25,0)
A 2 E PPI=X^A2EX
"DATA",457.5,25,1)
HH0001000001001000100100010101101111100
"DATA",457.5,26,0)
A 2 N PPI=X^A2NX
"DATA",457.5,26,1)
HH0001000001001001100100010101101111100
"DATA",457.5,27,0)
A 2 N PPI=W^A2NW
"DATA",457.5,27,1)
HH0001000001001011100100011111101111100
"DATA",457.5,28,0)
A 2 N PPI=Y^A2NY
"DATA",457.5,28,1)
HH0000000001001001100100001111101111100
"DATA",457.5,29,0)
A 2 N^A2N
"DATA",457.5,29,1)
HH0001000001001001100100000101101111100
"DATA",457.5,30,0)
A 3 E PPI=E,F^A3EE
"DATA",457.5,30,1)
0H0001011001001000100100110000000000100
"DATA",457.5,31,0)
A 3 E^A3E
"DATA",457.5,31,1)
0H0000000001001000100000000000000000100
"DATA",457.5,32,0)
A 3 N^A3N
"DATA",457.5,32,1)
0H0000000001001000100000000000000000100
"DATA",457.5,36,0)
E 1 E^E1E
"DATA",457.5,36,1)
H00000000000000000000000000001101111100
"DATA",457.5,37,0)
E 2 E^E2E
"DATA",457.5,37,1)
HH0000000000000000000000000001101111100
"DATA",457.5,38,0)
E 3 E^E3E
"DATA",457.5,38,1)
0H0000000000000000000000000000000000100
"DATA",457.5,39,0)
G 1 N^G1N
"DATA",457.5,39,1)
H00001001001001001100100000001101011100
"DATA",457.5,40,0)
G 2 N^G2N
"DATA",457.5,40,1)
HH0001000001001001100100000001101011100
"DATA",457.5,41,0)
G 3 N TYP-APPT=8^G3N8
"DATA",457.5,41,1)
0H0000000001000100111000000000000000100
"DATA",457.5,42,0)
G 3 N^G3N
"DATA",457.5,42,1)
0H0000000001001000100000000000000000100
"DATA",457.5,43,0)
J 1 E^J1E
"DATA",457.5,43,1)
D00000000000000000000000000001101111100
"DATA",457.5,44,0)
K 1 E^K1E
"DATA",457.5,44,1)
H00001011001000000100100110101101111100
"DATA",457.5,45,0)
K 1 E NH=48^K1EB
"DATA",457.5,45,1)
H00001000001000000000100100101101111100
"DATA",457.5,46,0)
L 1 E LVG=5^L1E*
"DATA",457.5,46,1)
D00000000000000000000000000001111011100
"DATA",457.5,47,0)
L 1 E^L1E
"DATA",457.5,47,1)
D00000000000000000000000000001101111100
"DATA",457.5,48,0)
L 2 E PAY BASIS=0^L2E*
"DATA",457.5,48,1)
0D0000000000000000000000000000000000100
"DATA",457.5,49,0)
L 2 E^L2E
"DATA",457.5,49,1)
HH0000000000000000000000000001101111100
"DATA",457.5,50,0)
L 3 E^L3E
"DATA",457.5,50,1)
0H0000000000000000000000000000000000100
"DATA",457.5,51,0)
M 1 E^M1E
"DATA",457.5,51,1)
H00001011001000000100100110101101111100
"DATA",457.5,52,0)
M 1 E NH=48^M1EB
"DATA",457.5,52,1)
H00001000001000000000100100101101111100
"DATA",457.5,53,0)
M 1 E OCC=Trainee^M1ET
"DATA",457.5,53,1)
H00000000000000000000000000001101011100
"DATA",457.5,54,0)
M 2 E^M2E
"DATA",457.5,54,1)
HH0001011001000000100100110101101111100
"DATA",457.5,55,0)
M 2 E OCC=Trainee^M2ET
"DATA",457.5,55,1)
HH0000000000000000000000000001101011100
"DATA",457.5,56,0)
M 3 E^M3E
"DATA",457.5,56,1)
0H0001011001000000100100110000000000100
"DATA",457.5,57,0)
M 3 E OCC=Trainee^M3ET
"DATA",457.5,57,1)
0H0000000000000000000000000000000000100
"DATA",457.5,58,0)
N 1 E^N1E
"DATA",457.5,58,1)
H00001001001001000100100000101101111100
"DATA",457.5,59,0)
N 1 N^N1N
"DATA",457.5,59,1)
H00001001001001000100100000101101111100
"DATA",457.5,60,0)
N 1 N ASSGN=TR-Tn-An^N1NT
"DATA",457.5,60,1)
H00000000000000000000000000001101011100
"DATA",457.5,61,0)
N 2 N ASSGN=TR-Tn-An^N2NT
"DATA",457.5,61,1)
HH0000000000000000000000000001101011100
"DATA",457.5,62,0)
N 2 E^N2E
"DATA",457.5,62,1)
HH0001000001001000100100000101101111100
"DATA",457.5,63,0)
N 2 N^N2N
"DATA",457.5,63,1)
HH0001000001001000100100000101101111100
"DATA",457.5,64,0)
N 3 E PAY BASIS=$^N3E$
"DATA",457.5,64,1)
000000000000000000000000000000000000100
"DATA",457.5,65,0)
N 3 N ASSGN=TR-Tn-An^N3NT
"DATA",457.5,65,1)
0H0000000000000000000000000000000000100
"DATA",457.5,66,0)
N 3 E^N3E
"DATA",457.5,66,1)
0H0000000001001000100000000000000000100
"DATA",457.5,67,0)
N 3 N^N3N
"DATA",457.5,67,1)
0H0000000001001000100000000000000000100
"DATA",457.5,68,0)
P 1 E^P1E
"DATA",457.5,68,1)
D00000000000000000000000000001101111100
"DATA",457.5,69,0)
Q 1 E^Q1E
"DATA",457.5,69,1)
D00000000000000000000000000001101111100
"DATA",457.5,70,0)
Q 2 E^Q2E
"DATA",457.5,70,1)
HH0000000000000000000000000001101111100
"DATA",457.5,71,0)
Q 2 E PAY BASIS=0^Q2E0
"DATA",457.5,71,1)
0D0000000000000000000000000000000000100
"DATA",457.5,72,0)
Q 3 E^Q3E
"DATA",457.5,72,1)
0H0000000000000000000000000000000000100
"DATA",457.5,73,0)
R 1 E^R1E
"DATA",457.5,73,1)
H00000000000000000000000000001101011100
"DATA",457.5,74,0)
R 2 E^R2E
"DATA",457.5,74,1)
HH0000000000000000000000000001101011100
"DATA",457.5,75,0)
R 3 E^R3E
"DATA",457.5,75,1)
0H0000000000000000000000000000000000100
"DATA",457.5,76,0)
S 1 E^S1E
"DATA",457.5,76,1)
000000000000000000000000000000000000000
"DATA",457.5,77,0)
T 1 E^T1E
"DATA",457.5,77,1)
H00000000000000000000000000001101011100
"DATA",457.5,78,0)
T 2 E^T2E
"DATA",457.5,78,1)
HH0000000000000000000000000001101011100
"DATA",457.5,79,0)
T 3 E PAY BASIS=9^T3E9
"DATA",457.5,79,1)
0D0000000000000000000000000000000000100
"DATA",457.5,80,0)
T 3 E^T3E
"DATA",457.5,80,1)
0H0000000000000000000000000000000000100
"DATA",457.5,81,0)
U 1 E PAY BASIS=H13^U1E
"DATA",457.5,81,1)
H00001001001000000100100000101101111100
"DATA",457.5,82,0)
U 1 N PAY BASIS=ETX27^U1N
"DATA",457.5,82,1)
H00001101111110001111111000101101111100
"DATA",457.5,83,0)
U 1 N PAY BASIS=P^U1NP
"DATA",457.5,83,1)
H00000000000000000000000000001101111110
"DATA",457.5,85,0)
U 2 E PAY BASIS=H13^U2E
"DATA",457.5,85,1)
HH0001000001000000100100000101101111100
"DATA",457.5,87,0)
U 2 N PAY BASIS=P^U2NP
"DATA",457.5,87,1)
HH0000000000000000000000000001101111110
"DATA",457.5,88,0)
U 2 N PAY BASIS=ETX27^U2N
"DATA",457.5,88,1)
HH0001100001110001111111000101101111100
"DATA",457.5,89,0)
U 3 E PAY BASIS=H13^U3E
"DATA",457.5,89,1)
0H0000000001000000100000000000000000100
"DATA",457.5,90,0)
U 3 N PAY BASIS=P^U3NP
"DATA",457.5,90,1)
0H0000000000000000000000000000000000110
"DATA",457.5,91,0)
U 3 N PAY BASIS=ETX27^U3N
"DATA",457.5,91,1)
0H0001000001110000111000000000000000100
"DATA",457.5,92,0)
W 1 E^W1E
"DATA",457.5,92,1)
H00000000000000000000000000001101111100
"DATA",457.5,93,0)
X 1 E^X1E
"DATA",457.5,93,1)
H00000000000000000000000000001101111100
"DATA",457.5,94,0)
X 1 E NH=00^X1E0
"DATA",457.5,94,1)
D00000000000000000000000000001101111100
"DATA",457.5,95,0)
Y 1 E^Y1E
"DATA",457.5,95,1)
D00000000000000000000000000001101111100
"DATA",457.5,96,0)
A 1 E NH>80^A1E*
"DATA",457.5,96,1)
H00000000001001000000000000101101111101
"DATA",457.5,97,0)
A 1 E PPI=Y^A1EY
"DATA",457.5,97,1)
H00000000001001000100000001111101111100
"DATA",457.5,98,0)
A 1 E PPI=W^A1EW
"DATA",457.5,98,1)
H00001001001001010100100011111101111100
"DATA",457.5,99,0)
A 2 E PPI=Y^A2EY
"DATA",457.5,99,1)
HH0000000001001000100100001111101111100
"DATA",457.5,100,0)
A 2 E PPI=W^A2EW
"DATA",457.5,100,1)
HH0001000001001010100100011111101111100
"DATA",457.5,101,0)
M 2 E PAY BASIS=0^M2E0
"DATA",457.5,101,1)
0D0000000000000000000000000000000000100
"DATA",457.5,102,0)
N 2 E PAY BASIS=0^N2E0
"DATA",457.5,102,1)
0D0000000000000000000000000000000000100
"DATA",457.5,103,0)
N 1 E ASSGN=TR-Tn-An^N1ET
"DATA",457.5,103,1)
H00000000000000000000000000001101011100
"DATA",457.5,104,0)
N 2 E ASSGN=TR-Tn-An^N2ET
"DATA",457.5,104,1)
HH0000000000000000000000000001101011100
"DATA",457.5,105,0)
N 3 E ASSGN=TR-Tn-An^N3ET
"DATA",457.5,105,1)
0H0000000000000000000000000000000000100
"DATA",457.5,106,0)
N 3 N PAY BASIS=$^N3N$
"DATA",457.5,106,1)
000000000000000000000000000000000000100
"DATA",457.5,107,0)
M 3 E PB=2^M3E2
"DATA",457.5,107,1)
0H0000000000000000000000000000000000100
"DATA",457.5,108,0)
L 3 E RESIDENT^L3E*
"DATA",457.5,108,1)
0D0000000000000000000000000000000000100
"DATA",457.5,109,0)
F 3 E^F3E
"DATA",457.5,109,1)
000000000000000000000000000000000000100
"DATA",457.5,110,0)
A Q E PPI=O^A1EO
"DATA",457.5,110,1)
H01000000001000000000000000101101111101
"DATA",457.5,111,0)
A 1 E PPI=R^A1ER
"DATA",457.5,111,1)
HH1000000001000000000000000101101111101
"DATA",457.5,112,0)
A 1 N PPI=R^A1NR
"DATA",457.5,112,1)
HH1000000001000001000000000101101111101
"DATA",457.5,113,0)
A 1 E PPI=C^A1EC
"DATA",457.5,113,1)
HH1000000001000000000000000101101111101
"DATA",457.5,114,0)
A 1 N PPI=C^A1NC
"DATA",457.5,114,1)
HH1000000001000001000000000101101111101
"DATA",457.5,115,0)
A 1 E PPI=S^A1ES
"DATA",457.5,115,1)
H00001011001001000100100000101101111100
"DATA",457.5,116,0)
A 1 E PPI=V^A1EV
"DATA",457.5,116,1)
H00001011001001010100100011111101111100
"DATA",457.5,117,0)
A 1 E PPI=T^A1ET
"DATA",457.5,117,1)
H00001011001001000100100010101101111100
"DATA",457.5,118,0)
A 1 E PPI=U^A1EU
"DATA",457.5,118,1)
H00000010001001000100000001111101111100
"DATA",457.5,119,0)
A 1 N PPI=S^A1NS
"DATA",457.5,119,1)
H00001011001001001100100000101101111100
"DATA",457.5,120,0)
A 1 N PPI=V^A1NV
"DATA",457.5,120,1)
H00001011001001011100100011111101111100
"DATA",457.5,121,0)
A 1 N PPI=T^A1NT
"DATA",457.5,121,1)
H00001011001001001100100010101101111100
"DATA",457.5,122,0)
A 1 N PPI=U^A1NU
"DATA",457.5,122,1)
H00000010001001001100000001111101111100
"DATA",457.5,123,0)
A 2 E PPI=S^A2ES
"DATA",457.5,123,1)
HH0001011001001000100100000101101111100
"DATA",457.5,124,0)
A 2 E PPI=V^A2EV
"DATA",457.5,124,1)
HH0001011001001010100100011111101111100
"DATA",457.5,125,0)
A 2 E PPI=T^A2ET
"DATA",457.5,125,1)
HH0001011001001000100100010101101111100
"DATA",457.5,126,0)
A 2 E PPI=U^A2EU
"DATA",457.5,126,1)
HH0000010001001000100100001111101111100
"DATA",457.5,127,0)
A 2 N PPI=S^A2NS
"DATA",457.5,127,1)
HH0001011001001001100100000101101111100
"DATA",457.5,128,0)
A 2 N PPI=V^A2NV
"DATA",457.5,128,1)
HH0001011001001011100100011111101111100
"DATA",457.5,129,0)
A 2 N PPI=T^A2NT
"DATA",457.5,129,1)
HH0001011001001001100100010101101111100
"DATA",457.5,130,0)
A 2 N PPI=U^A2NU
"DATA",457.5,130,1)
HH0000010001001001100100001111101111100
"DATA",457.5,131,0)
N 1 E PPI=S^N1ES
"DATA",457.5,131,1)
H00001011001001000100100000101101111100
"DATA",457.5,132,0)
N 1 N PPI=S^N1NS
"DATA",457.5,132,1)
H00001011001001000100100000101101111100
"DATA",457.5,133,0)
N 2 E PPI=S^N2ES
"DATA",457.5,133,1)
HH0001011001001000100100000101101111100
"DATA",457.5,134,0)
N 2 N PPI=S^N2NS
"DATA",457.5,134,1)
HH000101100100100010010000010110111110
"DATA",457.5,135,0)
N 3 E PPI=S^N3ES
"DATA",457.5,135,1)
0H0000011001001000100000000000000000100
"DATA",457.5,136,0)
N 3 N PPI=S^N3NS
"DATA",457.5,136,1)
0H0000011001001000100000000000000000100
"DATA",457.5,137,0)
A 3 E PPI=S^A3ES
"DATA",457.5,137,1)
0H0000011001001000100000000000000000100
"DATA",457.5,138,0)
A 3 N PPI=S^A3NS
"DATA",457.5,138,1)
0H0000011001001000100000000000000000100
"DATA",457.5,139,0)
M 2 E NH=80^M2ER
"DATA",457.5,139,1)
HH0011011001000000100100110101101111100
"FIA",455.1)
8B ERROR MESSAGE
"FIA",455.1,0)
^PRST(455.1,
"FIA",455.1,0,0)
455.1
"FIA",455.1,0,1)
n^n^f^^n^PRS P112 DATA^y^r^n
"FIA",455.1,0,10)

"FIA",455.1,0,11)

"FIA",455.1,0,"RLRO")
^DIBT(2114,1)
"FIA",455.1,0,"VR")
4.0^PRS
"FIA",455.1,455.1)
0
"FIA",455.1,455.11)
0
"FIA",456)
PAID PARAMETERS
"FIA",456,0)
^PRST(456,
"FIA",456,0,0)
456P
"FIA",456,0,1)
y^y^f^^^^n
"FIA",456,0,10)

"FIA",456,0,11)

"FIA",456,0,"RLRO")

"FIA",456,0,"VR")
4.0^PRS
"FIA",456,456)
0
"FIA",457.3)
TYPE OF TIME
"FIA",457.3,0)
^PRST(457.3,
"FIA",457.3,0,0)
457.3I
"FIA",457.3,0,1)
n^n^f^^n^^y^r^n
"FIA",457.3,0,10)

"FIA",457.3,0,11)

"FIA",457.3,0,"RLRO")

"FIA",457.3,0,"VR")
4.0^PRS
"FIA",457.3,457.3)
0
"FIA",457.4)
TIME REMARKS
"FIA",457.4,0)
^PRST(457.4,
"FIA",457.4,0,0)
457.4I
"FIA",457.4,0,1)
n^n^f^^n^^y^r^n
"FIA",457.4,0,10)

"FIA",457.4,0,11)

"FIA",457.4,0,"RLRO")

"FIA",457.4,0,"VR")
4.0^PRS
"FIA",457.4,457.4)
0
"FIA",457.5)
PAY ENTITLEMENT
"FIA",457.5,0)
^PRST(457.5,
"FIA",457.5,0,0)
457.5
"FIA",457.5,0,1)
n^n^f^^n^^y^r^n
"FIA",457.5,0,10)

"FIA",457.5,0,11)

"FIA",457.5,0,"RLRO")

"FIA",457.5,0,"VR")
4.0^PRS
"FIA",457.5,457.5)
0
"FIA",458.8)
RECESS TRACKING
"FIA",458.8,0)
^PRST(458.8,
"FIA",458.8,0,0)
458.8IP
"FIA",458.8,0,1)
y^n^f^^^^n
"FIA",458.8,0,10)

"FIA",458.8,0,11)

"FIA",458.8,0,"RLRO")

"FIA",458.8,0,"VR")
4.0^PRS
"FIA",458.8,458.8)
0
"FIA",458.8,458.82)
0
"FIA",458.8,458.83)
0
"INIT")
P112POST^PRSXP112
"IX",458.8,458.8,"AC",0)
458.8^AC^FISCAL YEAR^R^^R^IR^I^458.8^^^^^S
"IX",458.8,458.8,"AC",.1,0)
^^2^2^3061108^
"IX",458.8,458.8,"AC",.1,1,0)
This cross reference is used to find the nurses entry for a specified 
"IX",458.8,458.8,"AC",.1,2,0)
fiscal year.
"IX",458.8,458.8,"AC",1)
S ^PRST(458.8,"AC",$E(X(1),1,10),$E(X(2),1,30),DA)=""
"IX",458.8,458.8,"AC",2)
K ^PRST(458.8,"AC",$E(X(1),1,10),$E(X(2),1,30),DA)
"IX",458.8,458.8,"AC",2.5)
K ^PRST(458.8,"AC")
"IX",458.8,458.8,"AC",11.1,0)
^.114IA^2^2
"IX",458.8,458.8,"AC",11.1,1,0)
1^F^458.8^.01^10^1^F
"IX",458.8,458.8,"AC",11.1,2,0)
2^F^458.8^1^30^2^F
"IX",458.8,458.82,"AC",0)
458.82^AC^RECESS WEEK DAY 1 DATE^R^^F^IR^I^458.82^^^^^S
"IX",458.8,458.82,"AC",.1,0)
^^4^4^3061108^
"IX",458.8,458.82,"AC",.1,1,0)
This date is used to calculate the number of hours of recess requested 
"IX",458.8,458.82,"AC",.1,2,0)
for a given time period.  It is needed to project the amount of leave a 
"IX",458.8,458.82,"AC",.1,3,0)
nurse will accrue in a given time period.  The nurse does not accrue 
"IX",458.8,458.82,"AC",.1,4,0)
leave while on recess.
"IX",458.8,458.82,"AC",1)
S ^PRST(458.8,DA(1),1,"AC",$E(X,1,8),DA)=""
"IX",458.8,458.82,"AC",2)
K ^PRST(458.8,DA(1),1,"AC",$E(X,1,8),DA)
"IX",458.8,458.82,"AC",2.5)
K ^PRST(458.8,DA(1),1,"AC")
"IX",458.8,458.82,"AC",11.1,0)
^.114IA^1^1
"IX",458.8,458.82,"AC",11.1,1,0)
1^F^458.82^2^8^1^F
"KRN",19,5851,-1)
2^10
"KRN",19,5851,0)
PRSD 05 EMPLOYEE INQUIRY MENU^Employee Inquiry/Reports Menu^^M^.5^^^^^^^^^1
"KRN",19,5851,10,0)
^19.01IP^10^10
"KRN",19,5851,10,10,0)
12976^10
"KRN",19,5851,10,10,"^")
PRSA RECESS VIEWER-HR
"KRN",19,5851,"U")
EMPLOYEE INQUIRY/REPORTS MENU
"KRN",19,5872,-1)
2^9
"KRN",19,5872,0)
PRSA EMP MENU^Employee Menu^^M^12222^^^^^^^^^1^
"KRN",19,5872,10,0)
^19.01IP^13^13
"KRN",19,5872,10,13,0)
12978^12
"KRN",19,5872,10,13,"^")
PRSA RECESS VIEWER-NURSE
"KRN",19,5872,"U")
EMPLOYEE MENU
"KRN",19,5908,-1)
2^6
"KRN",19,5908,0)
PRSA TK MEN-EMP^Employee Data^^M^100831^^^^^^^
"KRN",19,5908,10,0)
^19.01IP^13^13
"KRN",19,5908,10,12,0)
12696^7
"KRN",19,5908,10,12,"^")
PRSA RECESS ENTER/EDIT
"KRN",19,5908,10,13,0)
12979^8
"KRN",19,5908,10,13,"^")
PRSA RECESS VIEWER-TK
"KRN",19,5908,"U")
EMPLOYEE DATA
"KRN",19,5990,-1)
2^7
"KRN",19,5990,0)
PRSRSU-PAID SYSTEM REPORTS^Employee Reports^^M^100831^^^^^^^408
"KRN",19,5990,10,0)
^19.01IP^6^6
"KRN",19,5990,10,6,0)
12977^6
"KRN",19,5990,10,6,"^")
PRSA RECESS VIEWER-SUP
"KRN",19,5990,"U")
EMPLOYEE REPORTS
"KRN",19,6004,-1)
2^8
"KRN",19,6004,0)
PRSRFI-PAID SYSTEM REPORTS^Employee Reports^^M^100831^^^^^^^408
"KRN",19,6004,10,0)
^19.01IP^6^6
"KRN",19,6004,10,6,0)
12976^6
"KRN",19,6004,10,6,"^")
PRSA RECESS VIEWER-HR
"KRN",19,6004,"U")
EMPLOYEE REPORTS
"KRN",19,12696,-1)
0^1
"KRN",19,12696,0)
PRSA RECESS ENTER/EDIT^Recess Enter/Edit for 9 Month AWS^^R^^^^^^^^
"KRN",19,12696,1,0)
^19.06^12^12^3070104^^
"KRN",19,12696,1,1,0)
This option provides timekeepers the ability to enter and edit recess
"KRN",19,12696,1,2,0)
schedules for nurses working a 9 month/3 month alternative work schedule 
"KRN",19,12696,1,3,0)
(AWS). Timekeepers may only enter or edit recess schedules for nurses on
"KRN",19,12696,1,4,0)
the 9-month/3-month AWS that are within T&L units assigned to them.  When
"KRN",19,12696,1,5,0)
entering a new recess schedule the date that the AWS becomes effective is
"KRN",19,12696,1,6,0)
required. If a date is entered that is not the first Sunday of the pay
"KRN",19,12696,1,7,0)
period then the option assumes the first Sunday for the pay period in
"KRN",19,12696,1,8,0)
which the user supplied date falls.  The option limits the available 
"KRN",19,12696,1,9,0)
recess schedules for entry and editing to the current, next and last 
"KRN",19,12696,1,10,0)
fiscal years.  The option invokes the ListManager to produce a list of
"KRN",19,12696,1,11,0)
weeks in calendar format from the first week of the AWS through the end of
"KRN",19,12696,1,12,0)
the fiscal year.
"KRN",19,12696,25)
ENEDIT^PRSARC
"KRN",19,12696,"U")
RECESS ENTER/EDIT FOR 9 MONTH 
"KRN",19,12976,-1)
0^2
"KRN",19,12976,0)
PRSA RECESS VIEWER-HR^Review FY Recess for 9 Month AWS Employee^^R^^^^^^^^PAID
"KRN",19,12976,1,0)
^^8^8^3070530^
"KRN",19,12976,1,1,0)
This is a view only option that provides a display of the recess schedule
"KRN",19,12976,1,2,0)
for nurses on the 9 month/3 month alternate work schedule (AWS).  To
"KRN",19,12976,1,3,0)
select a 9 month/3 month AWS recess schedule to view, enter either a
"KRN",19,12976,1,4,0)
fiscal year or the nurses name.  Once the schedule is selected, the user
"KRN",19,12976,1,5,0)
may enter actions at the select action prompt to navigate through the
"KRN",19,12976,1,6,0)
recess schedule, print the recess schedule and display a summary.  Enter
"KRN",19,12976,1,7,0)
?? at the select action prompt to see the complete list of available
"KRN",19,12976,1,8,0)
actions.
"KRN",19,12976,10.1)
Recess Viewer
"KRN",19,12976,25)
HR^PRSARC
"KRN",19,12976,"U")
REVIEW FY RECESS FOR 9 MONTH A
"KRN",19,12977,-1)
0^4
"KRN",19,12977,0)
PRSA RECESS VIEWER-SUP^Review FY Recess for 9 Month AWS Employee^^R^^^^^^^^
"KRN",19,12977,1,0)
^^8^8^3070530^
"KRN",19,12977,1,1,0)
This is a view only option that provides a display of the recess schedule
"KRN",19,12977,1,2,0)
for nurses on the 9 month/3 month alternate work schedule (AWS).  To
"KRN",19,12977,1,3,0)
select a 9 month/3 month AWS recess schedule to view, first enter the T&L
"KRN",19,12977,1,4,0)
unit of the nurse, then enter either a fiscal year or the nurses name.  
"KRN",19,12977,1,5,0)
Once the schedule is selected, the user may enter actions at the select
"KRN",19,12977,1,6,0)
action prompt to navigate through the recess schedule, print the recess
"KRN",19,12977,1,7,0)
schedule and display a summary.  Enter ?? at the select action prompt to
"KRN",19,12977,1,8,0)
see the complete list of available actions.
"KRN",19,12977,10.1)
Recess Viewer
"KRN",19,12977,25)
SUP^PRSARC
"KRN",19,12977,"U")
REVIEW FY RECESS FOR 9 MONTH A
"KRN",19,12978,-1)
0^3
"KRN",19,12978,0)
PRSA RECESS VIEWER-NURSE^Review FY Recess for 9 Month AWS Employee^^R^^PRSAWS9^^^^^^
"KRN",19,12978,1,0)
^^6^6^3070625^
"KRN",19,12978,1,1,0)
This is a view only option that provides a display of the recess schedule
"KRN",19,12978,1,2,0)
for a 9 month/3 month alternate work schedule (AWS).  To select a 9
"KRN",19,12978,1,3,0)
month/3 month AWS recess schedule, enter a fiscal year.  Once the schedule
"KRN",19,12978,1,4,0)
is selected, enter actions at the Select Action prompt to navigate through
"KRN",19,12978,1,5,0)
the recess schedule, print the recess schedule and display a summary.  
"KRN",19,12978,1,6,0)
Nurses must hold the PRSAWS9 security key to access this option.
"KRN",19,12978,10.1)
Recess Viewer
"KRN",19,12978,25)
NURSE^PRSARC
"KRN",19,12978,"U")
REVIEW FY RECESS FOR 9 MONTH A
"KRN",19,12979,-1)
0^5
"KRN",19,12979,0)
PRSA RECESS VIEWER-TK^Review FY Recess for 9 Month AWS Employee^^R^^^^^^^^
"KRN",19,12979,1,0)
^^7^7^3070625^
"KRN",19,12979,1,1,0)
This is a view only option that provides a display of the recess schedule
"KRN",19,12979,1,2,0)
for nurses on the 9 month/3 month alternate work schedule (AWS).  To
"KRN",19,12979,1,3,0)
select a 9 month/3 month AWS recess schedule to view, first enter the T&L
"KRN",19,12979,1,4,0)
unit of the nurse, then enter either a fiscal year or the nurse's name.  
"KRN",19,12979,1,5,0)
Once the schedule is selected, the user may enter actions at the select
"KRN",19,12979,1,6,0)
action prompt to navigate through the recess schedule, print the recess
"KRN",19,12979,1,7,0)
schedule and display a summary.
"KRN",19,12979,10.1)
Recess Viewer
"KRN",19,12979,25)
TK^PRSARC
"KRN",19,12979,"U")
REVIEW FY RECESS FOR 9 MONTH A
"KRN",19.1,507,-1)
0^1
"KRN",19.1,507,0)
PRSAWS9^AWS 9MONTH NURSES
"KRN",19.1,507,1,0)
^^4^4^3070108^
"KRN",19.1,507,1,1,0)
This key grants access to the option--Review FY Recess for 9 Month AWS
"KRN",19.1,507,1,2,0)
Employee [PRSA RECESS VIEWER-NURSE].  Nurses on the 9 month AWS must hold
"KRN",19.1,507,1,3,0)
this key and use the option to view their AWS 9 month recess schedule
"KRN",19.1,507,1,4,0)
entered by their timekeeper.
"KRN",101,4126,-1)
0^5
"KRN",101,4126,0)
PRSA SELECT RECESS WK^Select Recess Weeks^^A^^^^^^^^PAID
"KRN",101,4126,20)
D SELRWK^PRSARC01("Y",.OUT)
"KRN",101,4126,99)
60794,46310
"KRN",101,4127,-1)
0^4
"KRN",101,4127,0)
PRSA RECESS TRACKING MENU^^^M^^^^^^^^PAID
"KRN",101,4127,4)
26
"KRN",101,4127,10,0)
^101.01PA^9^9
"KRN",101,4127,10,1,0)
4126^SE^1^
"KRN",101,4127,10,1,"^")
PRSA SELECT RECESS WK
"KRN",101,4127,10,2,0)
4128^EH^2^
"KRN",101,4127,10,2,"^")
PRSA SET RECESS HOURS
"KRN",101,4127,10,3,0)
4129^CR^3^
"KRN",101,4127,10,3,"^")
PRSA DESELECT WEEKS
"KRN",101,4127,10,4,0)
4136^EX^9^
"KRN",101,4127,10,4,"^")
PRSA FILE RECESS SCHEDULE
"KRN",101,4127,10,5,0)
4155^GH^5^
"KRN",101,4127,10,5,"^")
PRSA RECESS HOURS VIEW
"KRN",101,4127,10,6,0)
4156^NS^4^
"KRN",101,4127,10,6,"^")
PRSA CHANGE AWS START
"KRN",101,4127,10,7,0)
4174^QU^8^
"KRN",101,4127,10,7,"^")
PRSA RECESS QUIT
"KRN",101,4127,10,8,0)
4175^HE^6^
"KRN",101,4127,10,8,"^")
PRSA RECESS HELP
"KRN",101,4127,10,9,0)
4178^SV^7^
"KRN",101,4127,10,9,"^")
PRSA RECESS SAVE AND CONTINUE
"KRN",101,4127,26)
D SHOW^VALM
"KRN",101,4127,28)
Select Action: 
"KRN",101,4127,99)
60794,46310
"KRN",101,4128,-1)
0^6
"KRN",101,4128,0)
PRSA SET RECESS HOURS^Edit Recess Hours^^A^^^^^^^^PAID
"KRN",101,4128,20)
D SETRECES^PRSARC03
"KRN",101,4128,99)
60794,46310
"KRN",101,4129,-1)
0^1
"KRN",101,4129,0)
PRSA DESELECT WEEKS^Cancel Recess Weeks^^A^^^^^^^^PAID
"KRN",101,4129,20)
D DSELWK^PRSARC01
"KRN",101,4129,99)
60794,46310
"KRN",101,4136,-1)
0^2
"KRN",101,4136,0)
PRSA FILE RECESS SCHEDULE^Exit and Save Recess^^A^^^^^^^^
"KRN",101,4136,20)
D FLRECESS^PRSARC01
"KRN",101,4136,99)
60794,46310
"KRN",101,4155,-1)
0^3
"KRN",101,4155,0)
PRSA RECESS HOURS VIEW^Recess Hours Summary^^A^^^^^^^^
"KRN",101,4155,20)
D EN^PRSARCS
"KRN",101,4155,99)
60794,46310
"KRN",101,4156,-1)
0^7
"KRN",101,4156,0)
PRSA CHANGE AWS START^Change AWS Start^^A^^^^^^^^
"KRN",101,4156,20)
D EDITSTRT^PRSARC01
"KRN",101,4156,99)
60794,46310
"KRN",101,4174,-1)
0^9
"KRN",101,4174,0)
PRSA RECESS QUIT^Quit without Saving^^A^^^^^^^^
"KRN",101,4174,20)
S PRSOUT=1 D FLRECESS^PRSARC01
"KRN",101,4174,99)
60794,46310
"KRN",101,4175,-1)
0^8
"KRN",101,4175,0)
PRSA RECESS HELP^Help^^A^^^^^^^^
"KRN",101,4175,20)
D EN^PRSARCH
"KRN",101,4175,99)
60794,46310
"KRN",101,4178,-1)
0^10
"KRN",101,4178,0)
PRSA RECESS SAVE AND CONTINUE^Save Recess Schedule^^A^^^^^^^^
"KRN",101,4178,15)
K PRSVONLY
"KRN",101,4178,20)
S PRSVONLY=1 D FLRECESS^PRSARC01
"KRN",101,4178,99)
60794,46310
"KRN",101,4186,-1)
0^11
"KRN",101,4186,0)
PRSA RECESS VIEW MENU^View Recess Schedule Menu^^M^^^^^^^^PAID
"KRN",101,4186,10,0)
^101.01PA^1^1
"KRN",101,4186,10,1,0)
4155^RS^1^
"KRN",101,4186,10,1,"^")
PRSA RECESS HOURS VIEW
"KRN",101,4186,26)
D SHOW^VALM
"KRN",101,4186,28)
Select Action:
"KRN",101,4186,99)
60795,44605
"KRN",409.61,847,-1)
0^1
"KRN",409.61,847,0)
PRSA RECESS TRACKING MANAGER^1^^80^5^19^1^1^Recess week^PRSA RECESS TRACKING MENU^RECESS TRACKING VIEW/EDIT^1^^1
"KRN",409.61,847,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,847,"ARRAY")
 ^TMP("PRSARC",$J)
"KRN",409.61,847,"COL",0)
^409.621^5^5
"KRN",409.61,847,"COL",1,0)
ITEM^2^4^Week #^^0
"KRN",409.61,847,"COL",2,0)
PAY PERIOD^9^5^PayPd
"KRN",409.61,847,"COL",3,0)
WEEKDAYS^15^27^Sun Mon Tue Wed Thu Fri Sat
"KRN",409.61,847,"COL",4,0)
RECESS HOURS^43^17^Recess: Scheduled^R
"KRN",409.61,847,"COL",5,0)
RECESS POSTED^62^9^Certified
"KRN",409.61,847,"COL","AIDENT",0,1)

"KRN",409.61,847,"COL","B","ITEM",1)

"KRN",409.61,847,"COL","B","PAY PERIOD",2)

"KRN",409.61,847,"COL","B","RECESS HOURS",4)

"KRN",409.61,847,"COL","B","RECESS POSTED",5)

"KRN",409.61,847,"COL","B","WEEKDAYS",3)

"KRN",409.61,847,"FNL")
D EXIT^PRSARC
"KRN",409.61,847,"HDR")
D HDR^PRSARC
"KRN",409.61,847,"HLP")
D HELP^PRSARC
"KRN",409.61,847,"INIT")
D INIT^PRSARC
"KRN",409.61,851,-1)
0^2
"KRN",409.61,851,0)
PRSA RECESS SUMMARY^2^^80^5^20^0^1^^^RECESS SCHEDULE SUMMARY^1^^1
"KRN",409.61,851,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,851,"ARRAY")
 ^TMP("PRSARS",$J)
"KRN",409.61,851,"COL",0)
^409.621^4^4
"KRN",409.61,851,"COL",1,0)
WEEK^3^4^Week
"KRN",409.61,851,"COL",2,0)
BEGIN DATE^8^10^Begin Date
"KRN",409.61,851,"COL",3,0)
RECESS HOURS^24^16^Sched Recess Hrs
"KRN",409.61,851,"COL",4,0)
RECESS POSTED^44^18^TimeCard Certified
"KRN",409.61,851,"COL","B","BEGIN DATE",2)

"KRN",409.61,851,"COL","B","RECESS HOURS",3)

"KRN",409.61,851,"COL","B","RECESS POSTED",4)

"KRN",409.61,851,"COL","B","WEEK",1)

"KRN",409.61,851,"FNL")
D EXIT^PRSARCS
"KRN",409.61,851,"HDR")
D HDR^PRSARCS
"KRN",409.61,851,"HLP")
D HELP^PRSARCS
"KRN",409.61,851,"INIT")
D INIT^PRSARCS
"KRN",409.61,857,-1)
0^3
"KRN",409.61,857,0)
PRSA RECESS TRACKING HELP^2^^80^5^20^1^1^^^RECESS TRACKING HELP^^^1
"KRN",409.61,857,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,857,"FNL")
D EXIT^PRSARCH
"KRN",409.61,857,"HDR")
D HDR^PRSARCH
"KRN",409.61,857,"HLP")
D HELP^PRSARCH
"KRN",409.61,857,"INIT")
D INIT^PRSARCH
"KRN",409.61,859,-1)
0^4
"KRN",409.61,859,0)
PRSA RECESS TRACKING VIEWER^1^^80^5^21^1^1^Recess Week^PRSA RECESS VIEW MENU^Recess Schedule Viewer^1^^1
"KRN",409.61,859,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,859,"ARRAY")
 ^TMP("PRSARC",$J)
"KRN",409.61,859,"COL",0)
^409.621^5^5
"KRN",409.61,859,"COL",1,0)
ITEM^2^4^Week #
"KRN",409.61,859,"COL",2,0)
PAY PERIOD^9^5^PayPd
"KRN",409.61,859,"COL",3,0)
WEEKDAYS^15^27^Sun Mon Tue Wed Thu Fri Sat
"KRN",409.61,859,"COL",4,0)
RECESS HOURS^43^17^Recess: Scheduled
"KRN",409.61,859,"COL",5,0)
RECESS POSTED^62^9^Certified
"KRN",409.61,859,"COL","B","ITEM",1)

"KRN",409.61,859,"COL","B","PAY PERIOD",2)

"KRN",409.61,859,"COL","B","RECESS HOURS",4)

"KRN",409.61,859,"COL","B","RECESS POSTED",5)

"KRN",409.61,859,"COL","B","WEEKDAYS",3)

"KRN",409.61,859,"FNL")
D EXIT^PRSARC
"KRN",409.61,859,"HDR")
D HDR^PRSARC
"KRN",409.61,859,"INIT")
D INIT^PRSARC
"MBREQ")
0
"ORD",3,19.1)
19.1;3;1;;KEY^XPDTA1;;;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
112^3070919^100831
"PKG",408,22,1,"PAH",1,1,0)
^^1^1^3070919
"PKG",408,22,1,"PAH",1,1,1,0)
Nurse Alternative Work Schedules
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
46
"RTN","PRS8AC")
0^3^B64260454^B43020889
"RTN","PRS8AC",1,0)
PRS8AC ;HISC/MRL-DECOMPOSITION, ACTIVITY STRING ;05/18/07
"RTN","PRS8AC",2,0)
 ;;4.0;PAID;**40,45,54,52,69,75,90,96,112**;Sep 21, 1995;Build 54
"RTN","PRS8AC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8AC",4,0)
 ;
"RTN","PRS8AC",5,0)
 ;The primary purpose of this routine is to create the activity
"RTN","PRS8AC",6,0)
 ;string [the "W" node] for each day of activity.  While creating
"RTN","PRS8AC",7,0)
 ;this string certain counts will also be tallied.  These include
"RTN","PRS8AC",8,0)
 ;Standby, On-Call and the various absence categories.  Actual
"RTN","PRS8AC",9,0)
 ;Call Back hrs are also counted in this routine for the purpose
"RTN","PRS8AC",10,0)
 ;of reducing the OC later on in the process.
"RTN","PRS8AC",11,0)
 ;
"RTN","PRS8AC",12,0)
 ;Called by Routines:  PRS8EX, PRS8ST.
"RTN","PRS8AC",13,0)
 ;
"RTN","PRS8AC",14,0)
 Q:VAR=""
"RTN","PRS8AC",15,0)
 I $S($P(V,"^",1)="":1,$P(V,"^",2)="":1,1:0) Q  ;no times
"RTN","PRS8AC",16,0)
 S Q=0
"RTN","PRS8AC",17,0)
 I DY>0,DY<15 D  G END:Q
"RTN","PRS8AC",18,0)
 .I DAY(DY,"OFF"),"LSWARUHFGDr"[VAR S Q=1 ;exc invalid day off VAR
"RTN","PRS8AC",19,0)
 K OC,FLAG
"RTN","PRS8AC",20,0)
 ;
"RTN","PRS8AC",21,0)
 S DAYZ=DAY(DY,"W")_$G(DAY(DY,"N")),MTM=0
"RTN","PRS8AC",22,0)
 S DAYH=$G(DAY(DY,"HOL"))_$G(DAY(DY+1,"HOL")) ;holiday node
"RTN","PRS8AC",23,0)
 N DAYR
"RTN","PRS8AC",24,0)
 S DAYR=DAY(DY,"r")_$G(DAY(DY,"rN")) ; Recess
"RTN","PRS8AC",25,0)
 ;
"RTN","PRS8AC",26,0)
 ;P 45 FIREFIGHTERS F NODE TO TRACK ADDITIONAL FF HRS
"RTN","PRS8AC",27,0)
 S DAYF=$G(DAY(DY,"F"))
"RTN","PRS8AC",28,0)
 ;
"RTN","PRS8AC",29,0)
 F T=+V:1:+$P(V,"^",2) D
"RTN","PRS8AC",30,0)
 .I +VAR,$E(DAYH,T),$E(DAYZ,T)?1A Q  ;no override holiday
"RTN","PRS8AC",31,0)
 .; Don't override Recess but allow Unscheduled Regular (VAR=4)
"RTN","PRS8AC",32,0)
 .I +VAR,VAR'=4,$E(DAYR,T)="r" Q  ; don't override Recess
"RTN","PRS8AC",33,0)
 .I VAR="A"&(JURY=1) S VAR="J"
"RTN","PRS8AC",34,0)
 .S VAR1=VAR Q:VAR1=""  S DAYZ(1)=$E(DAYZ,T)
"RTN","PRS8AC",35,0)
 .I "HhJLSARWMNUnVXYTFGD"[VAR1,$E(DAYZ,T)="m" Q
"RTN","PRS8AC",36,0)
 .I T=+V,"12345E"[VAR1 S DAY(DY,"DWK")=1 ;count days worked
"RTN","PRS8AC",37,0)
 .I T=+V,"Vh"[VAR1,TYP["I" S DAY(DY,"DWK")=1 ;count days worked for cop
"RTN","PRS8AC",38,0)
 .I "JLSWNnARUXYFGD"[VAR1,T'>96,'$E(DAYZ,T) Q  ;invalid outside tour
"RTN","PRS8AC",39,0)
 .; Regular employees can't earn ct/use ot during work
"RTN","PRS8AC",40,0)
 .I +NAWS'=9,"EOPQT4"[VAR1,T'>96,$E(DAYZ,T) Q
"RTN","PRS8AC",41,0)
 .; 9mo AWS checks
"RTN","PRS8AC",42,0)
 .I +NAWS=9,"PQT"[VAR1,T'>96,$E(DAYZ,T) Q  ;can't earn ct/use ot during work
"RTN","PRS8AC",43,0)
 .; Allow CT/OT/UN/ON if posted over Recess otherwise don't allow
"RTN","PRS8AC",44,0)
 .I +NAWS=9,"4OEC"[VAR1,T'>96,$E(DAYZ,T),$E(DAYR,T)'="r" S $E(DAYR,T)=VAR1 Q
"RTN","PRS8AC",45,0)
 .I "OE"[VAR1,"BC"[DAYZ(1),$L(DAYZ(1)) D  ; Change OT or CT to CB/SB OT
"RTN","PRS8AC",46,0)
 ..S VAR1=$C($A($E(DAYZ,T))+32)
"RTN","PRS8AC",47,0)
 ..I $E(DAYZ,T)="C",VAR="E" S VAR1="t" ; Comp time on on-call = "t"
"RTN","PRS8AC",48,0)
 .I "BC"[VAR1,DAYZ(1)="O",$L(DAYZ(1)) D  ; Change CB/SB to CB/SB OT
"RTN","PRS8AC",49,0)
 ..S VAR1=$C($A($E(VAR1))+32)
"RTN","PRS8AC",50,0)
 .I "Hh"[VAR1 D  Q:VAR1="H"
"RTN","PRS8AC",51,0)
 ..S DAYH=$E(DAYH,0,T-1)_$S(VAR1="H":1,$E(DAYZ,T)&($E(DAYZ,T)'=4)!(TYP["I")!(TYP["P"&(TYP["N"!(TYP["H")))!(VAR1="h"):2,1:0)_$E(DAYH,T+1,999) ;holiday node
"RTN","PRS8AC",52,0)
 ..I VAR1="h" S VAR1="O" ;convert HW to OT
"RTN","PRS8AC",53,0)
 ..I VAR="h",$E(DAYZ,T)=5 S FLAG=5
"RTN","PRS8AC",54,0)
 .I $E(DAYZ,T)=5,"ALSRUFGD"[VAR1 S VAR1=$E(DAYZ,T)
"RTN","PRS8AC",55,0)
 .I $E(DAYZ,T)="-","BbCctes"[VAR1 Q  ;unavail for oc/sb or sch ot/ct
"RTN","PRS8AC",56,0)
 .;
"RTN","PRS8AC",57,0)
 .I VAR'="r" D
"RTN","PRS8AC",58,0)
 ..S DAYZ=$E(DAYZ,0,T-1)_VAR1_$E(DAYZ,T+1,999)
"RTN","PRS8AC",59,0)
 ..I $E($G(DAY(DY-1,"N")),T)'="",VAR1'=$E($G(DAY(DY-1,"N")),T) D
"RTN","PRS8AC",60,0)
 ...S DAY(DY-1,"N")=$E(DAY(DY-1,"N"),0,T-1)_VAR1_$E(DAY(DY-1,"N"),T+1,999) ;save VAR
"RTN","PRS8AC",61,0)
 ..; When processing tour time also copy tour into DAYR
"RTN","PRS8AC",62,0)
 ..I "1235"[VAR1 D
"RTN","PRS8AC",63,0)
 ...S DAYR=$E(DAYZ,0,T-1)_VAR1_$E(DAYZ,T+1,999)
"RTN","PRS8AC",64,0)
 ...I $E($G(DAY(DY-1,"N")),T)'="",VAR1'=$E($G(DAY(DY-1,"N")),T) D
"RTN","PRS8AC",65,0)
 ....S DAY(DY-1,"rN")=$E(DAY(DY-1,"rN"),0,T-1)_VAR1_$E(DAY(DY-1,"rN"),T+1,999)
"RTN","PRS8AC",66,0)
 .;
"RTN","PRS8AC",67,0)
 .; The following check will record Recess and will then update VAR1 to 0 which
"RTN","PRS8AC",68,0)
 .; will result in the normally scheduled tour being marked as being no tour.
"RTN","PRS8AC",69,0)
 .; This will allow Unscheduled Regular, OT and CT to be posted over the tour.
"RTN","PRS8AC",70,0)
 .I VAR="r" D
"RTN","PRS8AC",71,0)
 ..S DAYR=$E(DAYR,0,T-1)_VAR1_$E(DAYR,T+1,999)
"RTN","PRS8AC",72,0)
 ..S DAYZ=$E(DAYZ,0,T-1)_0_$E(DAYZ,T+1,999) ; Overwrite tour
"RTN","PRS8AC",73,0)
 ..I $E($G(DAY(DY-1,"rN")),T)'="",VAR1'=$E($G(DAY(DY-1,"rN")),T) D
"RTN","PRS8AC",74,0)
 ...S DAY(DY-1,"rN")=$E(DAY(DY-1,"rN"),0,T-1)_VAR1_$E(DAY(DY-1,"rN"),T+1,999)
"RTN","PRS8AC",75,0)
 ...S DAY(DY-1,"N")=$E(DAY(DY-1,"N"),0,T-1)_0_$E(DAY(DY-1,"N"),T+1,999)
"RTN","PRS8AC",76,0)
 ..S Y=48 D SET ; Count Recess
"RTN","PRS8AC",77,0)
 .;
"RTN","PRS8AC",78,0)
 .I VAR1="J" S Y=5 D SET ;set authorized absence for jury duty
"RTN","PRS8AC",79,0)
 .I VAR1="M" S Y=5 D SET ; authorized absence for ML
"RTN","PRS8AC",80,0)
 .;ot on non-premium T&L
"RTN","PRS8AC",81,0)
 .I ("Eocb"[VAR1!(VAR1="O"&'$E(DAYH,T)))&("^^10^11^12^13^15^16^17^"[("^"_$P(V,"^",4)_"^"))!(VAR1=5&("ALSRUFGD"[VAR))!(VAR1=4&(TYP["P"!(TYP["I"&(TYP["N"!(TYP["H"!($$HYBRID^PRSAENT1($G(DFN)))))))&("^7^9^11^12^14^17^"[("^"_$P(V,"^",4)_"^"))) D
"RTN","PRS8AC",82,0)
 ..Q:$E(DAY(DY,"P"),T)=5&("ALSRUFGD"'[VAR)
"RTN","PRS8AC",83,0)
 ..I $D(FLAG) S FLAG=VAR1,VAR1=5
"RTN","PRS8AC",84,0)
 ..N CODE D
"RTN","PRS8AC",85,0)
 ...I "^7^8^12^"[("^"_$P(V,"^",4)_"^")&(TYP["N"!(TYP["H")!($$HYBRID^PRSAENT1($G(DFN)))) S CODE="N" Q
"RTN","PRS8AC",86,0)
 ...I "^7^8^12^"[("^"_$P(V,"^",4)_"^")&(PMP'="")&("^S^T^U^V^"[(U_PMP_U)) S CODE="N" Q
"RTN","PRS8AC",87,0)
 ...I $P(V,"^",4)=11,($$HYBRID^PRSAENT1($G(DFN))) S CODE="N" Q
"RTN","PRS8AC",88,0)
 ...I $P(V,"^",4)=11&(PMP'="")&("^S^T^U^V^"[(U_PMP_U)) S CODE="N" Q
"RTN","PRS8AC",89,0)
 ...I "^7^8^9^11^"[("^"_$P(V,"^",4)_"^")&(TYP'["N")&(TYP'["H")&('$$HYBRID^PRSAENT1($G(DFN))) S CODE="n" Q
"RTN","PRS8AC",90,0)
 ...I "^7^8^9^11^"[("^"_$P(V,"^",4)_"^")&("^S^T^U^V^"'[(U_PMP_U)) S CODE="n" Q
"RTN","PRS8AC",91,0)
 ...I $P(V,"^",4)=17 S CODE="N" Q  ; Code 17 - OT/CT with premiums 
"RTN","PRS8AC",92,0)
 ...I VAR1=5 S CODE=VAR Q
"RTN","PRS8AC",93,0)
 ...S CODE=1
"RTN","PRS8AC",94,0)
 ..S DAY(DY,"P")=$E(DAY(DY,"P"),0,T-1)_CODE_$E(DAY(DY,"P"),T+1,999)
"RTN","PRS8AC",95,0)
 .I "ALSRUFGD"[VAR,VAR1=5 S VAR1=VAR
"RTN","PRS8AC",96,0)
 .I $D(FLAG) S VAR1=FLAG K FLAG
"RTN","PRS8AC",97,0)
 .;
"RTN","PRS8AC",98,0)
FOPTHR .; part time hrs (PT/PH 8b codes) for CODE O firefighters
"RTN","PRS8AC",99,0)
 .I +VAR1,"Ff"[TYP,PMP="O",(NH=448!(NH>320&(NH(1)'=NH(2)))) S Y=32 D SET
"RTN","PRS8AC",100,0)
 .;
"RTN","PRS8AC",101,0)
FRCPTHR .; part time hrs (PT/PH 8b codes) for code R & C firefighters
"RTN","PRS8AC",102,0)
 .; don't include UNSCHEDULED REGULAR (var1=4)
"RTN","PRS8AC",103,0)
 .I +VAR1,VAR1'=4,"Ff"[TYP,"RC"[PMP S Y=32 D SET
"RTN","PRS8AC",104,0)
 .;
"RTN","PRS8AC",105,0)
 .;patch 45 & 54
"RTN","PRS8AC",106,0)
 .; Set non pay hrs in the basic tour for firefighters with premium
"RTN","PRS8AC",107,0)
 .;pay indicator of C.
"RTN","PRS8AC",108,0)
 .I "nW"[VAR1,"Ff"[TYP,"C"=PMP D
"RTN","PRS8AC",109,0)
 ..;
"RTN","PRS8AC",110,0)
 ..;  Y designates location in WK array where NT/NH will be stored.
"RTN","PRS8AC",111,0)
 ..;  F node was set to 1 for periods of addtl ff hrs during 1st pass 
"RTN","PRS8AC",112,0)
 ..;  thru scheduled ToD.  Count NT/NH if this is not addtl ff hrs.
"RTN","PRS8AC",113,0)
 ..;
"RTN","PRS8AC",114,0)
 ..I '$E(DAY(DY,"F"),T) S Y=47 D SET
"RTN","PRS8AC",115,0)
 .S S="LSWnAREUP HYXOVQTFGD" I S[VAR1&(DY>0&(DY<15)!(DY=0&(T>96))) D  ;save in WK array
"RTN","PRS8AC",116,0)
 ..S S(1)=$F(S,VAR1)-1
"RTN","PRS8AC",117,0)
 ..S S=$P("1^2^3^4^5^6^0^8^0^9^24^42^43^0^33^0^19^44^45^46","^",S(1)) ;WK location
"RTN","PRS8AC",118,0)
 ..Q:S=0
"RTN","PRS8AC",119,0)
 ..; Patch *40 removed A (authorized absence) from leave counted in LU.
"RTN","PRS8AC",120,0)
 ..; LU is only used to determine if night differential granted for
"RTN","PRS8AC",121,0)
 ..; leave should be backed out.
"RTN","PRS8AC",122,0)
 ..I TYP'["D","LSRUFGD"[VAR1 S LU=LU+1 ;increment leave counter
"RTN","PRS8AC",123,0)
 ..I TYP'["D","LSRUFGD"[VAR1,(DY=0!(DY=14)&(T>96)),LU>0 S LU=LU-1
"RTN","PRS8AC",124,0)
 ..S Y=S D SET S:TYP["D" Q=1
"RTN","PRS8AC",125,0)
 ..K S,VAR1
"RTN","PRS8AC",126,0)
 ;
"RTN","PRS8AC",127,0)
 S DAY(DY,"W")=$E(DAYZ,1,96) ;todays activity
"RTN","PRS8AC",128,0)
 S DAY(DY,"N")=$E(DAYZ,97,999) ;tomorrows activity from today/if any
"RTN","PRS8AC",129,0)
 S DAY(DY,"r")=$E(DAYR,1,96) ; Today's Recess
"RTN","PRS8AC",130,0)
 S DAY(DY,"rN")=$E(DAYR,97,999) ; Tomorrow's Recess/if any
"RTN","PRS8AC",131,0)
 S:$E(DAY(DY,"P"),97,999)'="" DAY(DY,"P1")=$E(DAY(DY,"P"),97,999) ;non-prem ot for next day
"RTN","PRS8AC",132,0)
 S DAY(DY,"P")=$E(DAY(DY,"P"),1,96) ;non-prem ot for today
"RTN","PRS8AC",133,0)
 I DAY(DY,"N")?1"0"."0",DAY(DY,"rN")'["r" S DAY(DY,"N")=""
"RTN","PRS8AC",134,0)
 S DAY(DY,"HOL")=$E(DAYH,1,96)
"RTN","PRS8AC",135,0)
 ;
"RTN","PRS8AC",136,0)
 ;P 45 FIREFIGHTER ADDITIONAL FIREFIGHTER HRS NODE FOR THIS DAY
"RTN","PRS8AC",137,0)
 I $G(PRS8AFFH) D
"RTN","PRS8AC",138,0)
 .  N PRSFFHR,PRSF1,PRSF2,PRSF3,SEG1,SEG2
"RTN","PRS8AC",139,0)
 .;
"RTN","PRS8AC",140,0)
 .;GET THE POSITIONAL START AND STOPS FOR THIS SEGMENT
"RTN","PRS8AC",141,0)
 .  S SEG1=$P(V,U,1),SEG2=$P(V,U,2)
"RTN","PRS8AC",142,0)
 .;EXISTING PORTION OF F NODE UP TO CURRENT SEGMENT
"RTN","PRS8AC",143,0)
 .  S PRSF1=$E(DAYF,1,SEG1-1)
"RTN","PRS8AC",144,0)
 .;CURRENT SEGMENT UP TO END OF DAY
"RTN","PRS8AC",145,0)
 .  S PRSF2=$E(DAYZ,SEG1,SEG2)
"RTN","PRS8AC",146,0)
 .;CURRENT F NODE PAST CURRENT SEGMENT TO END OF THE TOUR WHICH
"RTN","PRS8AC",147,0)
 .;MAY FALL IN TODAY OR NEXT DAY.
"RTN","PRS8AC",148,0)
 .S PRSF3=$E(DAYF,SEG2+1,999)
"RTN","PRS8AC",149,0)
 .;
"RTN","PRS8AC",150,0)
 .;UPDATE THE DAY ARRAY AND THE TMP GLOBAL WITH WORK STRING.
"RTN","PRS8AC",151,0)
 .;EACH CHAR THAT IS SET TO 1 REPRESENTS A 15 MIN SEGMENT THAT
"RTN","PRS8AC",152,0)
 .;THE FIREFIGHTER WAS SCHEDULED FOR ADDITIONAL FF HRS.
"RTN","PRS8AC",153,0)
 .;FOR TOURS CROSSING MIDNIGHT THIS STRING WILL BE LONGER THAN 96
"RTN","PRS8AC",154,0)
 .;CHARACTERS. CHARACTERS IN POSITIONS PAST 96 REPRESENT TIMES PAST
"RTN","PRS8AC",155,0)
 .;MIDNIGHT OF THE CURRENT DAY (TOMORROW).
"RTN","PRS8AC",156,0)
 .S PRSFFHR=PRSF1_PRSF2_PRSF3
"RTN","PRS8AC",157,0)
 .S DAY(DY,"F")=PRSFFHR
"RTN","PRS8AC",158,0)
 .S ^TMP($J,"PRS8",DY,"F")=PRSFFHR
"RTN","PRS8AC",159,0)
 ;
"RTN","PRS8AC",160,0)
 I DY<15 S X=$E(DAYH,97,999) I X'?."0" S ^TMP($J,"PRS8",DY+1,"HOL")=X_$E($G(^TMP($J,"PRS8",DY+1,"HOL")),$L(X)+1,999),DAY(DY+1,"HOL")=X
"RTN","PRS8AC",161,0)
 ;
"RTN","PRS8AC",162,0)
MOVE ; --- entry point for just moving previous days hrs to today
"RTN","PRS8AC",163,0)
 I $D(DAY(DY-1,"N")),$L(DAY(DY-1,"N")) D
"RTN","PRS8AC",164,0)
 .S X=DAY(DY-1,"N")_$E(DAY(DY,"W"),$L(DAY(DY-1,"N"))+1,96)
"RTN","PRS8AC",165,0)
 .S DAY(DY,"W")=X
"RTN","PRS8AC",166,0)
 I $D(DAY(DY-1,"P1")),$L(DAY(DY-1,"P1")) D
"RTN","PRS8AC",167,0)
 .S X=DAY(DY-1,"P1")_$E(DAY(DY,"P"),$L(DAY(DY-1,"P1"))+1,96)
"RTN","PRS8AC",168,0)
 .S DAY(DY,"P")=X
"RTN","PRS8AC",169,0)
 I $D(DAY(DY-1,"rN")),$L(DAY(DY-1,"rN")) D
"RTN","PRS8AC",170,0)
 .S X=DAY(DY-1,"rN")_$E(DAY(DY,"r"),$L(DAY(DY-1,"rN"))+1,96)
"RTN","PRS8AC",171,0)
 .S DAY(DY,"r")=X
"RTN","PRS8AC",172,0)
 ;
"RTN","PRS8AC",173,0)
END ; --- all done here
"RTN","PRS8AC",174,0)
 K CNT,OC,Q,S,SB,SL,SLP,T,VAR1,X,Y Q
"RTN","PRS8AC",175,0)
 ;
"RTN","PRS8AC",176,0)
SET ; --- set WK variable
"RTN","PRS8AC",177,0)
 I (DY=0&(T<97))!(DY=14&(T>96))!(DY>14) Q
"RTN","PRS8AC",178,0)
 S ZZ=WK,WK=$S(DY>7:2,1:1)
"RTN","PRS8AC",179,0)
 I TYP'["D",DY=7,T>96 S WK=2
"RTN","PRS8AC",180,0)
 S $P(WK(WK),"^",Y)=$P(WK(WK),"^",Y)+1
"RTN","PRS8AC",181,0)
 ;
"RTN","PRS8AC",182,0)
 ; The passing of Public Law 106-554 allows taking ML in hours.
"RTN","PRS8AC",183,0)
 ; ML will now be recorded in 15 minute segments in the WK(3) array
"RTN","PRS8AC",184,0)
 ; for employees entitled to take ML in hours.  PRS*4.0*69
"RTN","PRS8AC",185,0)
 ;
"RTN","PRS8AC",186,0)
 I VAR1="M",$$MLINHRS^PRSAENT(DFN) D
"RTN","PRS8AC",187,0)
 . S WK=3,Y=11
"RTN","PRS8AC",188,0)
 . S $P(WK(WK),"^",Y)=$P(WK(WK),"^",Y)+1
"RTN","PRS8AC",189,0)
 ;
"RTN","PRS8AC",190,0)
 ; IF a part-time employee and they have either LWOP or Non-Pay
"RTN","PRS8AC",191,0)
 ; THEN decrement total hours for the week and the pay period.
"RTN","PRS8AC",192,0)
 ; PRS*4.0*52.
"RTN","PRS8AC",193,0)
 ;
"RTN","PRS8AC",194,0)
 I "Wn"[VAR1,TYP["P" S TH=TH-1,TH(WK)=TH(WK)-1
"RTN","PRS8AC",195,0)
 S WK=ZZ Q
"RTN","PRS8CR")
0^4^B10818384^B9423526
"RTN","PRS8CR",1,0)
PRS8CR ;HISC/MRL-DECOMPOSITION, CREATE STRING ;01/17/07
"RTN","PRS8CR",2,0)
 ;;4.0;PAID;**2,6,45,69,112**;Sep 21, 1995;Build 54
"RTN","PRS8CR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8CR",4,0)
 ;
"RTN","PRS8CR",5,0)
 ;This routine take the information contained in the WK array
"RTN","PRS8CR",6,0)
 ;and creates the activity string to be passed to Austin.  The
"RTN","PRS8CR",7,0)
 ;WK(1) node contains those items pertaining to Week 1 activity,
"RTN","PRS8CR",8,0)
 ;WK(2) contains those items pertaining to Week 2 activity and
"RTN","PRS8CR",9,0)
 ;WK(3) contains the Miscellaneous information shown on the bottom
"RTN","PRS8CR",10,0)
 ;of the timecard.
"RTN","PRS8CR",11,0)
 ;
"RTN","PRS8CR",12,0)
 ;Called by Routines:  PRS8DR
"RTN","PRS8CR",13,0)
 ;
"RTN","PRS8CR",14,0)
 ;Variable S contains the lengths of each of the Values for the
"RTN","PRS8CR",15,0)
 ;different time codes.  Used to format values with leading and
"RTN","PRS8CR",16,0)
 ;trailing zero's
"RTN","PRS8CR",17,0)
 N MLINHRS
"RTN","PRS8CR",18,0)
 S MLINHRS=$$MLINHRS^PRSAENT(DFN)
"RTN","PRS8CR",19,0)
 S S="333333333333333333333333333333333443623233333333333"
"RTN","PRS8CR",20,0)
 S E(1)="ANSKWDNOAURTCECUUNNANBSPSASBSCDADBDCTFOAOBOCYAOKOMRARBRCHAHBHCPTPAONYDHDVCEA  EB  TATCFAFCADNTRSSRSDND"
"RTN","PRS8CR",21,0)
 S E(2)="ALSLWPNPABRLCTCOUSNRNSSQSESFSGDEDFDGTGOEOFOGYEOSOURERFRGHLHMHNPHPBCLYHHOVSEC  ED  TBTDFBFDAFNHRNSSSHNU"
"RTN","PRS8CR",22,0)
 S E(3)="NLDWINTLLULNLDDTTOLAMLCAPCCYRRFFFECD"
"RTN","PRS8CR",23,0)
 K V S V="" F I=1,2,3 S V(I)=""
"RTN","PRS8CR",24,0)
 ;
"RTN","PRS8CR",25,0)
 ;Next section gets Week 1 and Week 2 data and stores in V(WK)
"RTN","PRS8CR",26,0)
 F J=1,2 F I=1:1:38,40,42:1:51 S X=+$P(WK(J),"^",I) I X]"" D
"RTN","PRS8CR",27,0)
 .; Don't report PT/PT for nurses on AWS schedules
"RTN","PRS8CR",28,0)
 .Q:$E(AC,2)=1&($P(C0,U,16)=72)&(I=32)  ; 36/40 AWS
"RTN","PRS8CR",29,0)
 .Q:$E(AC,2)=2&($P(C0,U,16)=80)&(I=32)  ; 9month AWS
"RTN","PRS8CR",30,0)
 .;
"RTN","PRS8CR",31,0)
 .I TYP'["D",I'=38,I'=40 D QH
"RTN","PRS8CR",32,0)
 .I TYP["D" S X=+X_"0"
"RTN","PRS8CR",33,0)
 .I TYP["Pd",$E(ENT,2)'="D",$P(WK(J),"^",32)="",V(J)="" S V(J)=V(J)_$S(J=1:"PT000",J=2:"PH000",1:"") ;for p/t drs put PT,PH in 8B string even if they are 0 (PT+PH=NH)
"RTN","PRS8CR",34,0)
 .I I=32,TYP["P",TYP["N",TYP'["B"!(TYP["H"),'X D  Q
"RTN","PRS8CR",35,0)
 ..S X=$E("0000000",0,+$E(S,I)-$L(X))_X
"RTN","PRS8CR",36,0)
 ..S V(J)=V(J)_$E(E(J),I+(I-1),I*2)_X
"RTN","PRS8CR",37,0)
 ..Q
"RTN","PRS8CR",38,0)
 .I I=37,$P(C0,"^",20)="P",$P(C0,"^",21)="U" D
"RTN","PRS8CR",39,0)
 ..S X=$E("0000000",0,+$E(S,I)-$L(X))_X
"RTN","PRS8CR",40,0)
 ..I 'X S V(J)=V(J)_$E(E(J),I+(I-1),I*2)_X
"RTN","PRS8CR",41,0)
 ..Q
"RTN","PRS8CR",42,0)
 .S X=+X I I=32,TYP["Pd",X=0 S X=1
"RTN","PRS8CR",43,0)
 .Q:'X
"RTN","PRS8CR",44,0)
 .I I=32,TYP["Pd",X=1 S X=0
"RTN","PRS8CR",45,0)
 .I I=38!(I=40) D
"RTN","PRS8CR",46,0)
 ..S Z=X,X=4*$P(WK(J),"^",I+1) D QH
"RTN","PRS8CR",47,0)
 ..S X=($E("00",0,$E(S,I)-$L(Z))_+Z)_($E("000",0,$E(S,I+1)-$L(+X))_+X) ;combine env. diff. % and hours
"RTN","PRS8CR",48,0)
 ..Q
"RTN","PRS8CR",49,0)
 .E  S X=$E("0000000",0,+$E(S,I)-$L(X))_+X
"RTN","PRS8CR",50,0)
 .I +X S V(J)=V(J)_$E(E(J),I+(I-1),I*2)_X,V=V+X
"RTN","PRS8CR",51,0)
 ;
"RTN","PRS8CR",52,0)
 ;Now we get miscellaneous data
"RTN","PRS8CR",53,0)
 ;
"RTN","PRS8CR",54,0)
 S S="22134446114423146"
"RTN","PRS8CR",55,0)
 F I=1:1:17 S X=$P(WK(3),"^",I) I X'="" D
"RTN","PRS8CR",56,0)
 .I I=11 D
"RTN","PRS8CR",57,0)
 . . I MLINHRS D QH ; Convert to 1/4 hours.
"RTN","PRS8CR",58,0)
 . . I MLINHRS=0 S X=X_"0" ; Convert to 1/4 hours.
"RTN","PRS8CR",59,0)
 .S X=$E("000000",0,+$E(S,I)-$L(X))_X
"RTN","PRS8CR",60,0)
 .I $D(X) S V(3)=V(3)_$E(E(3),I+(I-1),I*2)_X,V=V+X
"RTN","PRS8CR",61,0)
 ;
"RTN","PRS8CR",62,0)
 ;finish up
"RTN","PRS8CR",63,0)
 ;
"RTN","PRS8CR",64,0)
 S VAL="" I $L(V(1))!($L(V(2)))!($L(V(3))) S X=V(1)_V(2)_V(3)_"CD"_$E("000000",0,6-$L(+V))_+V,VAL=X
"RTN","PRS8CR",65,0)
 ;
"RTN","PRS8CR",66,0)
STUB ; --- enter here to create stub only
"RTN","PRS8CR",67,0)
 I '($D(VAL)#2) S VAL=""
"RTN","PRS8CR",68,0)
 ; code below to add CP field to STUB record (32nd position)
"RTN","PRS8CR",69,0)
 S CPFX=""
"RTN","PRS8CR",70,0)
 S CPFX=$P($G(^PRST(458,PY,"E",DFN,0)),"^",6) ;get CP from 458
"RTN","PRS8CR",71,0)
 I CPFX="" S CPFX=$P($G(^PRSPC(DFN,1)),"^",7) ;if 458 null get from 450
"RTN","PRS8CR",72,0)
 I "0"[CPFX S CPFX=" " ;if it is 0 or "" set CPFX = " "
"RTN","PRS8CR",73,0)
 S PPE=$G(^PRST(458,+PY,0)),PPE=$P(PPE,"^",1),PPI=+PY D ^PRSAXSR
"RTN","PRS8CR",74,0)
 S VAL=HDR_CPFX_VAL ;decomp no longer saves 8B in 5 node (6/95)
"RTN","PRS8CR",75,0)
 K I,J,S Q
"RTN","PRS8CR",76,0)
 ;
"RTN","PRS8CR",77,0)
QH ; --- for persons paid hourly/convert to Quarter Hours
"RTN","PRS8CR",78,0)
 ;
"RTN","PRS8CR",79,0)
 I I'=37 S X1=X#4,X=X\4_+X1 K X1
"RTN","PRS8CR",80,0)
 Q
"RTN","PRS8DR")
0^5^B13372030^B11848996
"RTN","PRS8DR",1,0)
PRS8DR ;HISC/MRL,JAH/WCIOFO-DECOMPOSITION, DRIVER ;4/09/2007
"RTN","PRS8DR",2,0)
 ;;4.0;PAID;**22,29,56,90,111,112**;Sep 21, 1995;Build 54
"RTN","PRS8DR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8DR",4,0)
 ;
"RTN","PRS8DR",5,0)
 ;This routine determines whether or not the parameters necessary
"RTN","PRS8DR",6,0)
 ;to decompose time are in existence.  The majority of variables
"RTN","PRS8DR",7,0)
 ;involving processing an individual employee are defined in this
"RTN","PRS8DR",8,0)
 ;routine.
"RTN","PRS8DR",9,0)
 ;
"RTN","PRS8DR",10,0)
 ;The following lines establish variables necessary to process a
"RTN","PRS8DR",11,0)
 ;specific employees time for the specified pay period.
"RTN","PRS8DR",12,0)
 ;
"RTN","PRS8DR",13,0)
 ;Called by Routines:  PRS8, PRS8DR (tag 1)
"RTN","PRS8DR",14,0)
 ;
"RTN","PRS8DR",15,0)
 N PRVAL,RESTORE
"RTN","PRS8DR",16,0)
 ;
"RTN","PRS8DR",17,0)
 D ONE^PRS8CV ;clean up variables
"RTN","PRS8DR",18,0)
 S SAVE=+$G(SAVE),SEE=+$G(SEE)
"RTN","PRS8DR",19,0)
 S TMTD=$G(^PRST(458,+PY,"E",DFN,0)),TMTD=$S($P(TMTD,"^",2)="X":1,1:0)
"RTN","PRS8DR",20,0)
 K WK F I=1,2,3 S WK(I)="" ;weekly totals (wk3=misc data)
"RTN","PRS8DR",21,0)
 D ^PRSAENT S VAL="" ;get entitlement (ENT)
"RTN","PRS8DR",22,0)
 I PP="S" G END ;Manila citizen/don't decompose/no stub
"RTN","PRS8DR",23,0)
 I $G(PB)["$" G STUB^PRS8CR ;don't decompose stipend/create stub
"RTN","PRS8DR",24,0)
 ; Set NAWS to type of AWS
"RTN","PRS8DR",25,0)
 N NAWS
"RTN","PRS8DR",26,0)
 S NAWS=0
"RTN","PRS8DR",27,0)
 I "KM"[$E(AC,1),$E(AC,2)=1,NH=72 S NAWS="36/40 AWS"
"RTN","PRS8DR",28,0)
 I $E(AC,1)="M",$E(AC,2)=2,NH=80 S NAWS="9Mo AWS"
"RTN","PRS8DR",29,0)
 ;
"RTN","PRS8DR",30,0)
 I "^P^X^"[(U_$P($G(^PRST(458,+PY,"E",DFN,0)),"^",2)_U) S RESTORE=1
"RTN","PRS8DR",31,0)
 D AUTOPINI^PRS8(+PY,+DFN,$G(RESTORE),.PRVAL) ; remove auto-posted data
"RTN","PRS8DR",32,0)
 S DOUB=0 I $E(ENT,26),$E(ENT,29) S DOUB=1 ;count standby & oncall same
"RTN","PRS8DR",33,0)
 S FLX="" S FLX=$P($G(^PRST(458,+PY,"E",DFN,0)),"^",6)
"RTN","PRS8DR",34,0)
 I +NAWS=36 S FLX="C"
"RTN","PRS8DR",35,0)
 S (SST,TAL)="",X=$P(C0,"^",8) I X'="" D  ;T&L Unit
"RTN","PRS8DR",36,0)
 .S X=$O(^PRST(455.5,"B",X,0)) ;get ien
"RTN","PRS8DR",37,0)
 .S TAL=$G(^PRST(455.5,+X,0)),X=$P(TAL,"^",8) ;get sleep start time
"RTN","PRS8DR",38,0)
 .I $L(X) S (NDAY,LAST,Y,Y1)=0 D 15^PRS8SU
"RTN","PRS8DR",39,0)
 .S SST=$S(+X:X,1:93) K X,Y1,LAST,X ;sleep start time
"RTN","PRS8DR",40,0)
 .K SL,SB,ST ;make sure standby variable don't exist
"RTN","PRS8DR",41,0)
 S (CAMISC,CYA,CYA2806,WPCYA,LU)=0 ; << ADDED >> calendar year adjust./leave used in pp
"RTN","PRS8DR",42,0)
 S (NH(1),NH(2))=0 ;normal hrs/pp total/week(1)/week(2)
"RTN","PRS8DR",43,0)
 S (TH,TH(1),TH(2))=0 ;total hours
"RTN","PRS8DR",44,0)
 N CT S (CT(1),CT(2))=0 ; counter for compensatory time
"RTN","PRS8DR",45,0)
 K DWK S DWK=0 ;count of days worked - for intermittents
"RTN","PRS8DR",46,0)
 S NH=NH/.25 ;turn Norm hrs into 15min increments
"RTN","PRS8DR",47,0)
 K TOUR S (TOUR(1),TOUR(2))="" ;tour code for wg/week(1)/week(2)
"RTN","PRS8DR",48,0)
 K TYP S TYP="" I $E(ENT)="D"!($E(ENT,1,2)="0D") S TYP=TYP_"D" ;daily pay basis
"RTN","PRS8DR",49,0)
 I PP?1N.E!(PP="U") S TYP=TYP_"W" ;wagegrade
"RTN","PRS8DR",50,0)
 I PP'="","KM"[PP S TYP=TYP_"N" ;nurse
"RTN","PRS8DR",51,0)
 I +$E(AC,2)=1,NH=192 S TYP=TYP_"B" ;baylor plan
"RTN","PRS8DR",52,0)
 I $G(PMP)'="","EF"[PMP S TYP=TYP_"H" ;Nurse Hybrid
"RTN","PRS8DR",53,0)
 I $E($G(AC),2)=3 S TYP=TYP_"I" ;intermittent
"RTN","PRS8DR",54,0)
 I NH>320 S TYP=TYP_"F" I NH'>448 S TYP=TYP_"f" ;firefighter
"RTN","PRS8DR",55,0)
 ; Nurses on the 9month AWS will be treated as FT employees during the 9 months
"RTN","PRS8DR",56,0)
 ; that they are working.  Prevent a "P" from being added to TYP.
"RTN","PRS8DR",57,0)
 I NH,NH'>319,$E(AC,2)'=1 S TYP=TYP_"P" ;part-time
"RTN","PRS8DR",58,0)
 I PP="L",$E(AC,2)=2 S TYP=TYP_"d" ;doctor
"RTN","PRS8DR",59,0)
 I PP="L",$E(AC,2)=1 S TYP=TYP_"dR" ;doctor/resident or intern
"RTN","PRS8DR",60,0)
 S (PTH,PTH(1),PTH(2))=0 ;part-time hours
"RTN","PRS8DR",61,0)
 K WKL S (WKL(1),WKL(2))=0 ;count leave used in week during ND hours
"RTN","PRS8DR",62,0)
 K MEAL S $P(MEAL,"1^",14)="",MEAL=MEAL_1 ;mealtime
"RTN","PRS8DR",63,0)
 S (MILV,WCMP)=0 ;ML and PC indicators
"RTN","PRS8DR",64,0)
 S (CBCK(1),CBCK(2))=0 ;call back hrs by week counter
"RTN","PRS8DR",65,0)
 I TYP="" S TYP="*"
"RTN","PRS8DR",66,0)
 K I,PB,PP,X,X1,X2
"RTN","PRS8DR",67,0)
 D ^PRS8SU ;set up employee variables and commence decomposing
"RTN","PRS8DR",68,0)
 D ^PRS8CR
"RTN","PRS8DR",69,0)
 D:$D(PRVAL) AUTOPRES^PRS8(+PY,+DFN,.PRVAL) ; restore auto-posted data
"RTN","PRS8DR",70,0)
 I SEE D ^PRS8VW
"RTN","PRS8DR",71,0)
 ;
"RTN","PRS8DR",72,0)
END ; --- This is where we end this process
"RTN","PRS8DR",73,0)
 G ONE^PRS8CV ;clean up
"RTN","PRS8DR",74,0)
 Q
"RTN","PRS8DR",75,0)
 ;
"RTN","PRS8DR",76,0)
1 ; --- enter here to print single entry and close device
"RTN","PRS8DR",77,0)
 D ^PRS8DR,^%ZISC Q
"RTN","PRS8EX")
0^6^B42573837^B42340152
"RTN","PRS8EX",1,0)
PRS8EX ;HISC/MRL,WCIOFO/SAB-DECOMPOSITION, EXCEPTIONS ;1/31/2007
"RTN","PRS8EX",2,0)
 ;;4.0;PAID;**2,40,56,69,111,112**;Sep 21, 1995;Build 54
"RTN","PRS8EX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8EX",4,0)
 ;
"RTN","PRS8EX",5,0)
 ;This routine is used to process most exceptions to the normal
"RTN","PRS8EX",6,0)
 ;tod.  It is used, for example, to determine whether or not the
"RTN","PRS8EX",7,0)
 ;employee is entitled to such exceptions as Leave, OT, etc.,
"RTN","PRS8EX",8,0)
 ;and then calls ^PRS8AC to process them.
"RTN","PRS8EX",9,0)
 ;
"RTN","PRS8EX",10,0)
 ;Called by Routines:  PRS8ST
"RTN","PRS8EX",11,0)
 ;
"RTN","PRS8EX",12,0)
 S TT=$P(V,"^",3) ;type of time
"RTN","PRS8EX",13,0)
 I TT="OT",+$P(V,"^",4)=8,$E(ENT,18) S TT="TT" ;ot in travel status
"RTN","PRS8EX",14,0)
 I TT="CU",$P(V,"^",4)=6 Q  ;comp for religious purposes/don't code
"RTN","PRS8EX",15,0)
 I TT="HW",$E(ENT,1,2)="0D" S TT="RG"
"RTN","PRS8EX",16,0)
 I TT="OT",TYP["P",TYP'["B" S TT="RG" ;To convert Pt ot to RG
"RTN","PRS8EX",17,0)
 I TT="HW",TYP'["D",+V,+$P(V,"^",2) D
"RTN","PRS8EX",18,0)
 .I $P(V,"^",2)-V-1<8 D  ; <2 hrs HW
"RTN","PRS8EX",19,0)
 ..S ^TMP($J,"PRS8",DY,"HW")=$G(^TMP($J,"PRS8",DY,"HW"))_$P(V,U,1,2)_U
"RTN","PRS8EX",20,0)
 ..Q
"RTN","PRS8EX",21,0)
 .I TYP["P",$P(V,"^",2)>96 S LEN=$P(V,"^",2)-96 D  ;two day tour of HW for part timers
"RTN","PRS8EX",22,0)
 ..S ^TMP($J,"PRS8",DY+1,"HWK")=$G(^TMP($J,"PRS8",DY+1,"HWK"))_1_U_LEN_U
"RTN","PRS8EX",23,0)
 ..K LEN
"RTN","PRS8EX",24,0)
 ..Q
"RTN","PRS8EX",25,0)
 .I TYP["P",TYP["N"!(TYP["H"),'$E(DAY(DY,"W"),+V) D  ; part time nurses, uscheduled HW.
"RTN","PRS8EX",26,0)
 ..S ^TMP($J,"PRS8",DY,"HWK")=$G(^TMP($J,"PRS8",DY,"HWK"))_$P(V,U,1,2)_U
"RTN","PRS8EX",27,0)
 ..Q
"RTN","PRS8EX",28,0)
 .Q
"RTN","PRS8EX",29,0)
 S X="^AL^SL^WP^NP^AA^RL^CU^CT^CP^HX^ML^TR^TV^OT^RG^TT^SB^ON^NL^HW^CB^AD^DL^RS" ;code
"RTN","PRS8EX",30,0)
 S X=($F(X,"^"_TT)\3)+4,(X,TT(1))=$P($T(ACT+X),";;",2) ;parameters
"RTN","PRS8EX",31,0)
 S GO=0 I '+X!($E(ENT,+X)) S GO=1 ;entitlement exists-continue
"RTN","PRS8EX",32,0)
 I TT="RG",$E(ENT,2)'=0 S GO=1 ;intermittent
"RTN","PRS8EX",33,0)
 I TT="RG"!(TT="CP"),$E(ENT,2)="D" S DAY(DY,"DWK")=1 ;intrmtnt-count days worked (for RG or CP)
"RTN","PRS8EX",34,0)
 I TT="OT",'GO,$E(ENT,13)!$E(ENT,14) S GO=1 ;entitled to ot
"RTN","PRS8EX",35,0)
 I TT="UN" S GO=1,VAR="-" ;unavailable
"RTN","PRS8EX",36,0)
 I TYP["W",TT="RG",$P(V,"^",4)=7 D
"RTN","PRS8EX",37,0)
 .;wage grade employee working regular unscheduled hours for
"RTN","PRS8EX",38,0)
 .;shift coverage (7) can get shift differential based on the higher
"RTN","PRS8EX",39,0)
 .;of the unscheduled tour's shift or their normal shift.
"RTN","PRS8EX",40,0)
 .;The unscheduled tour and corresponding differential will be saved
"RTN","PRS8EX",41,0)
 .;in the "SD" node and used by PRS8PP when differentials are
"RTN","PRS8EX",42,0)
 .;computed.
"RTN","PRS8EX",43,0)
 .N ST,EN,SD,MID
"RTN","PRS8EX",44,0)
 .S ST=$P(V,"^"),EN=$P(V,"^",2) Q:'ST!'EN
"RTN","PRS8EX",45,0)
 .S MID=ST+EN/2
"RTN","PRS8EX",46,0)
 .; check for 2day tour and if found use combined tour (recompute MID)
"RTN","PRS8EX",47,0)
 .; to determine appropriate shift differential.
"RTN","PRS8EX",48,0)
 .; if start is 1 (midnight) then check previous day for a similar tour
"RTN","PRS8EX",49,0)
 .; that ended at 96 (midnight).
"RTN","PRS8EX",50,0)
 . I ST=1 D
"RTN","PRS8EX",51,0)
 .. N PRSI,PRSX
"RTN","PRS8EX",52,0)
 .. S PRSX=$G(^TMP($J,"PRS8",DY-1,2))
"RTN","PRS8EX",53,0)
 .. F PRSI=1:1:7 Q:$P(PRSX,U,(PRSI-1)*4+1)=""  D
"RTN","PRS8EX",54,0)
 ... I $P(PRSX,U,(PRSI-1)*4+2)=96,$P(PRSX,U,(PRSI-1)*4+3)="RG",$P(PRSX,U,(PRSI-1)*4+4)=7 S MID=($P(PRSX,U,(PRSI-1)*4+1)+EN+96)/2
"RTN","PRS8EX",55,0)
 .; if end is 96 (midnight) then check next day for a similar tour that
"RTN","PRS8EX",56,0)
 .; starts at 1 (midnight).
"RTN","PRS8EX",57,0)
 . I EN=96 D
"RTN","PRS8EX",58,0)
 .. N PRSI,PRSX
"RTN","PRS8EX",59,0)
 .. S PRSX=$G(^TMP($J,"PRS8",DY+1,2))
"RTN","PRS8EX",60,0)
 .. F PRSI=1:1:7 Q:$P(PRSX,U,(PRSI-1)*4+1)=""  D
"RTN","PRS8EX",61,0)
 ... I $P(PRSX,U,(PRSI-1)*4+1)=1,$P(PRSX,U,(PRSI-1)*4+3)="RG",$P(PRSX,U,(PRSI-1)*4+4)=7 S MID=(ST+$P(PRSX,U,(PRSI-1)*4+2)+96)/2
"RTN","PRS8EX",62,0)
 .; determine shift differential (if any) based on unscheduled tour hours
"RTN","PRS8EX",63,0)
 .S SD=0
"RTN","PRS8EX",64,0)
 .I MID<32.5 S SD=3 ; majority of tour before 8a
"RTN","PRS8EX",65,0)
 .I MID>60.5,MID'>94.5 S SD=2 ; majority of tour after 3p, upto 11:30p
"RTN","PRS8EX",66,0)
 .I MID>94.5,MID<128.5 S SD=3 ; majority of tour after 11:30p, before 8a
"RTN","PRS8EX",67,0)
 .; use employee's normal shift if higher than shift based on hours
"RTN","PRS8EX",68,0)
 .I TOUR>1,TOUR>SD S SD=TOUR
"RTN","PRS8EX",69,0)
 .S:SD ^TMP($J,"PRS8",DY,"SD")=$G(^TMP($J,"PRS8",DY,"SD"))_ST_U_EN_U_SD_U
"RTN","PRS8EX",70,0)
 .Q
"RTN","PRS8EX",71,0)
 I (TT="OT"!(TT="RG")!(TT="CT")),"^13^14^"[("^"_$P(V,"^",4)_"^")!($P(V,"^",4)=12&(TYP["N"!(TYP["H"))) D
"RTN","PRS8EX",72,0)
 .S ^TMP($J,"PRS8",DY,"CB")=$G(^TMP($J,"PRS8",DY,"CB"))_$P(V,"^",1,2)_"^"
"RTN","PRS8EX",73,0)
 .Q
"RTN","PRS8EX",74,0)
 I TYP'["D",TT="HX"!(TT="HW") S GO=1 ;process holiday excused/worked
"RTN","PRS8EX",75,0)
 G END:'GO ;nothing to process
"RTN","PRS8EX",76,0)
 I TT'="UN" S VAR=$P(X,"^",3) ;increment time code
"RTN","PRS8EX",77,0)
 I '$S(VAR'="W":1,'CYA:1,DY<CYA:1,1:0) D
"RTN","PRS8EX",78,0)
 .S WPCY=1 ;flag to save WOP in hours from 1/1 for calendar year adjustment
"RTN","PRS8EX",79,0)
 I TYP'["D" D  G END ;process hourly people and quit
"RTN","PRS8EX",80,0)
 .; The following 2 lines commented out because for Employees that are
"RTN","PRS8EX",81,0)
 .; non-daily tour (TYP'["D"), policy is has been described that all
"RTN","PRS8EX",82,0)
 .; ML/COP has to be posted by time-keeper.
"RTN","PRS8EX",83,0)
 .; If this changes, then uncomment these lines, remove the line adding
"RTN","PRS8EX",84,0)
 .; military leave and COP that follows, and refer to routine PRS8UP.
"RTN","PRS8EX",85,0)
 .; I VAR="M" S ^TMP($J,"PRS8",DY,"ML")=1,MILV=1 ;military leave taken
"RTN","PRS8EX",86,0)
 .; I VAR="V" S ^TMP($J,"PRS8",DY,"CP")=1,WCMP=1 ;cont of pay indicator
"RTN","PRS8EX",87,0)
 .I DY>0,DY<15 D
"RTN","PRS8EX",88,0)
 ..; Post ML for employees who are charged in days.
"RTN","PRS8EX",89,0)
 ..I VAR="M",$$MLINHRS^PRSAENT(DFN)=0 D
"RTN","PRS8EX",90,0)
 ...S X=$P(TT(1),"^",4) D SET ; military leave & auth. absence
"RTN","PRS8EX",91,0)
 ..I VAR="V",'$G(^TMP($J,"PRS8",DY,"CP")) S X="M",^TMP($J,"PRS8",DY,"CP")=1 D SET ; COP
"RTN","PRS8EX",92,0)
 ..Q
"RTN","PRS8EX",93,0)
 .D ^PRS8AC ;update activity string
"RTN","PRS8EX",94,0)
 .Q
"RTN","PRS8EX",95,0)
 ; Employees with daily tours (TYP["D")
"RTN","PRS8EX",96,0)
 I DY>0,DY<15,VAR="M" S X=$P(TT(1),"^",4) D SET S X=5 D SET G END ;military leave & auth. absence
"RTN","PRS8EX",97,0)
 I DY>0,DY<15,$$HOLIDAY^PRS8UT(PY,DFN,DY) D  G END ;holiday-no charge
"RTN","PRS8EX",98,0)
 .I TT="RG" S DAY(DY,"W")=VAR,X=$S('$E(ENT,TOUR+21):9,1:TOUR+28) D SET ; If worked on holiday count it.
"RTN","PRS8EX",99,0)
 .Q
"RTN","PRS8EX",100,0)
 S D=DY
"RTN","PRS8EX",101,0)
 I TT="NP"!($P(DAY(D,0),"^",2)'=1) S DAY(D,"W")=VAR,X=$P(TT(1),"^",4) I X'="",DY>0,DY<15 D SET I VAR="V" S X="M" D SET I VAR="V",TYP["DI",$E(ENT,2)="D" S X=9 D SET ; IF INT RESDNT PAID IN DAYS HAS COP POSTED PAY UN/US ALSO
"RTN","PRS8EX",102,0)
 D ENCAP^PRS8EX0
"RTN","PRS8EX",103,0)
 ;
"RTN","PRS8EX",104,0)
END ; --- all done here     
"RTN","PRS8EX",105,0)
 K A,D,DD,GO,TT,X,Z
"RTN","PRS8EX",106,0)
 Q
"RTN","PRS8EX",107,0)
 ;
"RTN","PRS8EX",108,0)
SET ; --- enter here to set without VAL defined
"RTN","PRS8EX",109,0)
 ; Quit if this day has already been counted through the encapsulation
"RTN","PRS8EX",110,0)
 ; check that is performed in ENCAP^PRS8EX0.
"RTN","PRS8EX",111,0)
 Q:$D(^TMP($J,"PRS8",DY,2,0))
"RTN","PRS8EX",112,0)
 ;
"RTN","PRS8EX",113,0)
 Q:X="K"&($P(V,"^",1)>96)!((X="K")&($D(^TMP($J,"PRS8",DY,"ML"))))  S ^TMP($J,"PRS8",DY,"ML")=1 ;stop counting ML twice for two day tours & split tours, but allow PC
"RTN","PRS8EX",114,0)
 I +X S $P(WK(WK),"^",+X)=$P(WK(WK),"^",+X)+1
"RTN","PRS8EX",115,0)
 E  S X=$A(X)-64,$P(WK(3),"^",+X)=$P(WK(3),"^",+X)+1
"RTN","PRS8EX",116,0)
 Q
"RTN","PRS8EX",117,0)
 ;
"RTN","PRS8EX",118,0)
ACT ; --- define variable X for action
"RTN","PRS8EX",119,0)
 ;     - piece 1 = entitlement (ENT) string $Extract to check
"RTN","PRS8EX",120,0)
 ;     -       2 = Literal name of exception
"RTN","PRS8EX",121,0)
 ;     -       3 = Time String code (DAY(X,"W"))
"RTN","PRS8EX",122,0)
 ;;
"RTN","PRS8EX",123,0)
 ;;30^Annual Leave^L^1
"RTN","PRS8EX",124,0)
 ;;31^Sick Leave^S^2
"RTN","PRS8EX",125,0)
 ;;33^Without Pay^W^3
"RTN","PRS8EX",126,0)
 ;;36^Non-Pay Status^n^4
"RTN","PRS8EX",127,0)
 ;;35^Authorized Absence^A^5
"RTN","PRS8EX",128,0)
 ;;30^Restored Leave^R^6
"RTN","PRS8EX",129,0)
 ;;28^Comp Used^U^8
"RTN","PRS8EX",130,0)
 ;;28^Comp Earned^E^7
"RTN","PRS8EX",131,0)
 ;;37^Continuation of Pay^V^33
"RTN","PRS8EX",132,0)
 ;;38^Holiday Excused^H
"RTN","PRS8EX",133,0)
 ;;34^Military Leave^M^K
"RTN","PRS8EX",134,0)
 ;;0^Training^X^43
"RTN","PRS8EX",135,0)
 ;;0^Travel^Y^42
"RTN","PRS8EX",136,0)
 ;;12^Overtime^O
"RTN","PRS8EX",137,0)
 ;;2^Unscheduled^4^9
"RTN","PRS8EX",138,0)
 ;;18^OT in Travel Status^T
"RTN","PRS8EX",139,0)
 ;;29^Standby^B
"RTN","PRS8EX",140,0)
 ;;26^On-Call^C
"RTN","PRS8EX",141,0)
 ;;36^Nonpay A/L^N^A
"RTN","PRS8EX",142,0)
 ;;38^Holiday Worked^h
"RTN","PRS8EX",143,0)
 ;;31^Care and Bereavement^F^44
"RTN","PRS8EX",144,0)
 ;;31^Adoption^G^45
"RTN","PRS8EX",145,0)
 ;;35^Donor Leave^D^46
"RTN","PRS8EX",146,0)
 ;;5^Recess^r^48
"RTN","PRS8HR")
0^8^B28258844^B29706028
"RTN","PRS8HR",1,0)
PRS8HR ;HISC/MRL,WCIOFO/JAH-DECOMPOSITION, HOURS ;06/25/07
"RTN","PRS8HR",2,0)
 ;;4.0;PAID;**2,22,29,42,52,102,108,112**;Sep 21, 1995;Build 54
"RTN","PRS8HR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8HR",4,0)
 ;
"RTN","PRS8HR",5,0)
 ;This routine is called by ^PRS8PP (premium pay calculator)
"RTN","PRS8HR",6,0)
 ;=====================================================================
"RTN","PRS8HR",7,0)
 ; ** indicates incompleted comments
"RTN","PRS8HR",8,0)
 ;
"RTN","PRS8HR",9,0)
 ;VARIABLE DEFINITION
"RTN","PRS8HR",10,0)
 ;
"RTN","PRS8HR",11,0)
 ; TYP   =  contains codes representing type of employee.
"RTN","PRS8HR",12,0)
 ;          It's a composite code string w/ characters that
"RTN","PRS8HR",13,0)
 ;          represent pay plan, duty basis, & normal hours.
"RTN","PRS8HR",14,0)
 ;    CODE  REPRESENTS      CODE   REPRESENTS
"RTN","PRS8HR",15,0)
 ;     D     daily            f     firefighter
"RTN","PRS8HR",16,0)
 ;     W     wagegrade        P     part-time
"RTN","PRS8HR",17,0)
 ;     N     nurse            d     doctor
"RTN","PRS8HR",18,0)
 ;     B     baylor plan      dR    doctor/resident or intern
"RTN","PRS8HR",19,0)
 ;     H     Nurse Hybrid     ""    *
"RTN","PRS8HR",20,0)
 ;     I     intermittent
"RTN","PRS8HR",21,0)
 ; VAL   =  Single char code represents employee's work status for
"RTN","PRS8HR",22,0)
 ;          current 15 min increment.
"RTN","PRS8HR",23,0)
 ; FLX   =  Flex tour indicator.
"RTN","PRS8HR",24,0)
 ; TH(W) =  Tour Hours for week 1, TH(1) & week 2, TH(2)
"RTN","PRS8HR",25,0)
 ; TH    =  Tour Hours
"RTN","PRS8HR",26,0)
 ; HTP   =  PAYABLE hours worked today.
"RTN","PRS8HR",27,0)
 ; HT    =  Hours worked today.
"RTN","PRS8HR",28,0)
 ; AV    =  String w/ most normal types of time (see bottom of PRS8EX)
"RTN","PRS8HR",29,0)
 ;          does NOT contain premium times or unscheduled time (OoEes4)
"RTN","PRS8HR",30,0)
 ;====================================================================
"RTN","PRS8HR",31,0)
 ;
"RTN","PRS8HR",32,0)
 S AV="1235nHMLSWNARUXYVJFGD"
"RTN","PRS8HR",33,0)
 ;
"RTN","PRS8HR",34,0)
 ;   Loop thru each quarter hour segment of day.
"RTN","PRS8HR",35,0)
 ;   Check for times in AV array.
"RTN","PRS8HR",36,0)
 ;   Proceed w/ calculation if Overtime worked on Holiday.
"RTN","PRS8HR",37,0)
 ;
"RTN","PRS8HR",38,0)
 F M=1:1:96 D
"RTN","PRS8HR",39,0)
 .  S VAL=$E(D,M)
"RTN","PRS8HR",40,0)
 .;
"RTN","PRS8HR",41,0)
 .;    If non premium type of time or (overtime on holiday)
"RTN","PRS8HR",42,0)
 .;
"RTN","PRS8HR",43,0)
 .  I AV[VAL!(VAL="O"&($E(DAY(DAY,"HOL"),M)=2)) D CALC
"RTN","PRS8HR",44,0)
 Q
"RTN","PRS8HR",45,0)
 ;
"RTN","PRS8HR",46,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HR",47,0)
 ;
"RTN","PRS8HR",48,0)
CALC ; --- Entry point for calculating placement of time
"RTN","PRS8HR",49,0)
 ;
"RTN","PRS8HR",50,0)
 ;     Set up variables for calculations and comparisons in this routine
"RTN","PRS8HR",51,0)
 ;
"RTN","PRS8HR",52,0)
 N HOLWKD,HOLEX,HOLWKEX
"RTN","PRS8HR",53,0)
 D ^PRS8HRSV
"RTN","PRS8HR",54,0)
 ;
"RTN","PRS8HR",55,0)
 ;     IF intermittent employee on continuation of pay OR overtime on 
"RTN","PRS8HR",56,0)
 ;     holiday THEN increment Pay Period tour hours and current weeks 
"RTN","PRS8HR",57,0)
 ;     tour hours.
"RTN","PRS8HR",58,0)
 ;
"RTN","PRS8HR",59,0)
 I TYP["I",VAL["V"!(VAL="O"&(HOLWKD)) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HR",60,0)
 ;
"RTN","PRS8HR",61,0)
 ;     IF part time doctor & total hours = 80 & type of
"RTN","PRS8HR",62,0)
 ;     time is unscheduled, overtime, comptime THEN quit
"RTN","PRS8HR",63,0)
 ;
"RTN","PRS8HR",64,0)
 I TYP["d",TYP["P",TH=320,"4OosEe"[VAL Q
"RTN","PRS8HR",65,0)
 ;
"RTN","PRS8HR",66,0)
 ;     IF INT doctor & total hours = 80 THEN quit
"RTN","PRS8HR",67,0)
 ;
"RTN","PRS8HR",68,0)
 I TYP["I",$E(AC,1)="L",TH=320,"4OosEe"[VAL Q
"RTN","PRS8HR",69,0)
 ;
"RTN","PRS8HR",70,0)
 ;     IF type of time is anything but Leave Without Pay "W" or Non-Pay "n"
"RTN","PRS8HR",71,0)
 ;     THEN increment total hrs HT & increment HTP.  Also update
"RTN","PRS8HR",72,0)
 ;     ^TMP global for reference during the processing of On-Call (PRS8OC).
"RTN","PRS8HR",73,0)
 ;
"RTN","PRS8HR",74,0)
 I "Wn"'[VAL S HT=HT+1,HTP=HTP+1,^TMP($J,"PRS8",DAY,"HT")=HT
"RTN","PRS8HR",75,0)
 ;
"RTN","PRS8HR",76,0)
 ;---------------------------------------------------------
"RTN","PRS8HR",77,0)
 ;     IF entitled to VCS commission sales & normal time(1) ??(2,3)
"RTN","PRS8HR",78,0)
 ;     & holiday excused set X to type of time=Piece Worker Hol excused.
"RTN","PRS8HR",79,0)
 ;     Then IF part time set X to part time hours code.
"RTN","PRS8HR",80,0)
 ;
"RTN","PRS8HR",81,0)
 I $E(ENT,38),"123"[VAL,HOLEX S X=36 D CHK^PRS8HRSV D  Q:X
"RTN","PRS8HR",82,0)
 .  I TYP["P" S X=32 D CHK^PRS8HRSV
"RTN","PRS8HR",83,0)
 ;
"RTN","PRS8HR",84,0)
 ;---------------------------------------------------------------
"RTN","PRS8HR",85,0)
 ;
"RTN","PRS8HR",86,0)
 ;     Don't mess w/ fire fighters
"RTN","PRS8HR",87,0)
 ;
"RTN","PRS8HR",88,0)
 Q:"Ff"[TYP
"RTN","PRS8HR",89,0)
 ;
"RTN","PRS8HR",90,0)
 S GO=0
"RTN","PRS8HR",91,0)
 ;     IF compressed tour & parttime & tour hours are over 80
"RTN","PRS8HR",92,0)
 ;     OR tour hours = 80 & it's overtime, comptime, or unscheduled reg.
"RTN","PRS8HR",93,0)
 ;
"RTN","PRS8HR",94,0)
 ; Check for FT Compressed
"RTN","PRS8HR",95,0)
 I $E(AC,2)=1,NH>319,FLX="C",("OoseE4"[VAL) S GO=1
"RTN","PRS8HR",96,0)
 ;
"RTN","PRS8HR",97,0)
 ; Check for week
"RTN","PRS8HR",98,0)
 I (TH(W)>160&("OoseE4"[VAL))!(TH(W)=160&("OosEe4"[VAL)) S GO=1
"RTN","PRS8HR",99,0)
 ;
"RTN","PRS8HR",100,0)
 ; Check for day
"RTN","PRS8HR",101,0)
 I HT>32,"OoseE4"[VAL S GO=1
"RTN","PRS8HR",102,0)
 ;
"RTN","PRS8HR",103,0)
 ;     Following segment is concerned w/ variations of part time
"RTN","PRS8HR",104,0)
 ;     employees (TYP["P"), & 1 baylor (TYP["B").
"RTN","PRS8HR",105,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",106,0)
 ;
"RTN","PRS8HR",107,0)
 ;     Doctor over 8 hours
"RTN","PRS8HR",108,0)
 ;
"RTN","PRS8HR",109,0)
 I TYP["Pd",HT>32 S GO=0 ; part-time doctors PT + PH must = NH
"RTN","PRS8HR",110,0)
 ;
"RTN","PRS8HR",111,0)
 I TYP["P",HOLWKD S GO=0
"RTN","PRS8HR",112,0)
 ;
"RTN","PRS8HR",113,0)
 ;     Baylor plan & ct/ot/s
"RTN","PRS8HR",114,0)
 ;
"RTN","PRS8HR",115,0)
 I TYP["B","EeOos"[VAL S GO=1
"RTN","PRS8HR",116,0)
 ;
"RTN","PRS8HR",117,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",118,0)
 ;     GO set in cases where employee maybe eligible for OT
"RTN","PRS8HR",119,0)
 ;     due to over > 8/day OR > 40/week.
"RTN","PRS8HR",120,0)
 ;
"RTN","PRS8HR",121,0)
 S X=0 I GO D TH^PRS8HRSV D OVER840^PRS8HROT Q
"RTN","PRS8HR",122,0)
 ;
"RTN","PRS8HR",123,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",124,0)
 ;-------------------------------------------------------------------
"RTN","PRS8HR",125,0)
 ;     GO not set for compressed schedule of at least 80 hrs.
"RTN","PRS8HR",126,0)
 ;     GO not set for non compressed schedule of over 40 hrs.
"RTN","PRS8HR",127,0)
 ;     IF GO is set and we are evaluating normal hours or
"RTN","PRS8HR",128,0)
 ;     HOLIDAY OVERTIME use NORMHRS to increment TIME
"RTN","PRS8HR",129,0)
 ;     in week array.  THEN QUIT.
"RTN","PRS8HR",130,0)
 ;
"RTN","PRS8HR",131,0)
 S GO=1
"RTN","PRS8HR",132,0)
 I FLX="C",NH>319 S GO=0
"RTN","PRS8HR",133,0)
 I FLX'="C",NH(WK)>160,TYP'["Pd" S GO=0 ;IF pt-doctor don't set GO=0
"RTN","PRS8HR",134,0)
 I GO,"1235nHMLSWNARUXYVJFGD"[VAL!(VAL="O"&(HOLWKD)) D NORMHRS^PRS8HROT Q
"RTN","PRS8HR",135,0)
 ;
"RTN","PRS8HR",136,0)
 ;--------------------------------------------------------------------
"RTN","PRS8HR",137,0)
 ;   Check employees with Normal hours less than 80. (Baylor NH=320)
"RTN","PRS8HR",138,0)
 ;
"RTN","PRS8HR",139,0)
 I NH'>319!(($E(AC,2)=2)&(NH=320)) D TH^PRS8HRSV D  Q
"RTN","PRS8HR",140,0)
 .I FLX="C" D  Q:X
"RTN","PRS8HR",141,0)
 ..;
"RTN","PRS8HR",142,0)
 ..; For PT employees review hours worked to determine X
"RTN","PRS8HR",143,0)
 ..I "OosEe4"'[VAL S X=32  ; All tour time = PT/PH
"RTN","PRS8HR",144,0)
 ..;
"RTN","PRS8HR",145,0)
 ..; Checks for CT
"RTN","PRS8HR",146,0)
 ..I "Ee"[VAL D
"RTN","PRS8HR",147,0)
 ...; <8/DAY & <40/WK  = UN/US
"RTN","PRS8HR",148,0)
 ...I HT'>32,TH(W)'>160 S X=9 Q
"RTN","PRS8HR",149,0)
 ...S X=7 ; CE/CT
"RTN","PRS8HR",150,0)
 ..;
"RTN","PRS8HR",151,0)
 ..; Checks for all other types of time
"RTN","PRS8HR",152,0)
 ..I "Oos4"[VAL D
"RTN","PRS8HR",153,0)
 ...I HT>32 S X=TOUR+15 Q  ; DA/DE
"RTN","PRS8HR",154,0)
 ...I TH(W)>160 S X=TOUR+19 Q  ; OA/OE
"RTN","PRS8HR",155,0)
 ...S X=9 ; UN/US
"RTN","PRS8HR",156,0)
 ..D CHK^PRS8HRSV
"RTN","PRS8HR",157,0)
 .;
"RTN","PRS8HR",158,0)
 .;     Under 8/day, 40/week, and not coded as overtime or comptime
"RTN","PRS8HR",159,0)
 .;     or overtime on holiday.
"RTN","PRS8HR",160,0)
 .;
"RTN","PRS8HR",161,0)
 .; Checks for non-compressed employees
"RTN","PRS8HR",162,0)
 .I HT'>32,TH(W)'>160,"OoseE"'[VAL!(VAL="O"&(HOLWKD)) S X=0 D  Q:X
"RTN","PRS8HR",163,0)
 ..;
"RTN","PRS8HR",164,0)
 ..;    Not intermittent, normal hours and not unscheduled reg. 
"RTN","PRS8HR",165,0)
 ..;    TIME gets parttime hours.
"RTN","PRS8HR",166,0)
 ..;
"RTN","PRS8HR",167,0)
 ..I TYP'["I",AV[VAL,VAL'=4 S X=32 D CHK^PRS8HRSV Q
"RTN","PRS8HR",168,0)
 ..;
"RTN","PRS8HR",169,0)
 ..;    All else fails - TIME gets unscheduled regular.
"RTN","PRS8HR",170,0)
 ..;
"RTN","PRS8HR",171,0)
 ..S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",172,0)
 .;
"RTN","PRS8HR",173,0)
 .;     Part time doctor w/ unscheduled reg. TIME gets unscheduled reg.
"RTN","PRS8HR",174,0)
 .; 
"RTN","PRS8HR",175,0)
 .I TYP["P",TYP["d",VAL=4 S X=9 D CHK^PRS8HRSV Q
"RTN","PRS8HR",176,0)
 .;
"RTN","PRS8HR",177,0)
 .;     Over 8/day
"RTN","PRS8HR",178,0)
 .;
"RTN","PRS8HR",179,0)
 .I HT>32 D G8^PRS8HRSV Q:X
"RTN","PRS8HR",180,0)
 .;
"RTN","PRS8HR",181,0)
 .;     For all time left except comptime set TIME to appropriate OT
"RTN","PRS8HR",182,0)
 .;     unless comptime has been worked earlier in the week making
"RTN","PRS8HR",183,0)
 .;     the total hours less than 40, then TIME gets unscheduled reg.
"RTN","PRS8HR",184,0)
 .;     COMPTIME OVER 8/DAY WILL BE CREDITED HERE
"RTN","PRS8HR",185,0)
 .;
"RTN","PRS8HR",186,0)
 .S X=$S("Ee"'[VAL:TOUR+19,(TH(W)'>160)&(HT'>32):9,1:7)
"RTN","PRS8HR",187,0)
 .I TYP["P",VAL[4,TH(W)'>160,HT'>32 S X=9
"RTN","PRS8HR",188,0)
 .I TYP["P",VAL="O",TH(W)'>160,HT'>32 S X=9
"RTN","PRS8HR",189,0)
 .D CHK^PRS8HRSV
"RTN","PRS8HR",190,0)
 Q
"RTN","PRS8HRSV")
0^45^B43992593^B35348193
"RTN","PRS8HRSV",1,0)
PRS8HRSV ;WCIOFO/JAH-HOLIDAY FLAG, TIME CHECKER, WK() SET; 04/05/07
"RTN","PRS8HRSV",2,0)
 ;;4.0;PAID;**29,52,102,108,112**;Sep 21, 1995;Build 54
"RTN","PRS8HRSV",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8HRSV",4,0)
 ;  Set up variable for holiday worked or holiday excused
"RTN","PRS8HRSV",5,0)
 ;  Holiday worked coded 2 in DAY array
"RTN","PRS8HRSV",6,0)
 ;  Holiday excused coded 1 in DAY array
"RTN","PRS8HRSV",7,0)
 ;  A NON holiday is coded as all zero's in day array.
"RTN","PRS8HRSV",8,0)
 ;
"RTN","PRS8HRSV",9,0)
 ;  HOLIDAY WORKED
"RTN","PRS8HRSV",10,0)
 S HOLWKD=$E(DAY(DAY,"HOL"),M)=2
"RTN","PRS8HRSV",11,0)
 ;
"RTN","PRS8HRSV",12,0)
 ;  HOLIDAY EXCUSED
"RTN","PRS8HRSV",13,0)
 S HOLEX=$E(DAY(DAY,"HOL"),M)=1
"RTN","PRS8HRSV",14,0)
 ;
"RTN","PRS8HRSV",15,0)
 ;  HOLIDAY EXCUSED OR HOLIDAY WORKED
"RTN","PRS8HRSV",16,0)
 S HOLWKEX=$E(DAY(DAY,"HOL"),M)
"RTN","PRS8HRSV",17,0)
 Q
"RTN","PRS8HRSV",18,0)
 ;
"RTN","PRS8HRSV",19,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",20,0)
 ;
"RTN","PRS8HRSV",21,0)
CHK ; --- Check ENT for acceptable X value
"RTN","PRS8HRSV",22,0)
 ;    Pieces of Y have values in locations corresponding to premium
"RTN","PRS8HRSV",23,0)
 ;    times in value of X.  Values in Y string are locations
"RTN","PRS8HRSV",24,0)
 ;    in entitlement string where associated time in X is
"RTN","PRS8HRSV",25,0)
 ;    located.
"RTN","PRS8HRSV",26,0)
 ;   --------------------------------------------------
"RTN","PRS8HRSV",27,0)
 ;                 | Fixed      |  Premium
"RTN","PRS8HRSV",28,0)
 ;     Piece       | Position in|  Type Of Time
"RTN","PRS8HRSV",29,0)
 ;    Of Y-String  | Entitlement|
"RTN","PRS8HRSV",30,0)
 ;    & **WK()     | String     |
"RTN","PRS8HRSV",31,0)
 ;    -----------  | -----------|  --------------------
"RTN","PRS8HRSV",32,0)
 ;        7        |    28      |  comp earned
"RTN","PRS8HRSV",33,0)
 ;        9        |     2      |  unscheduled regular
"RTN","PRS8HRSV",34,0)
 ;       16        |    19      |  hrs excess 8-d
"RTN","PRS8HRSV",35,0)
 ;       17        |    20      |  hrs excess 8-d2
"RTN","PRS8HRSV",36,0)
 ;       18        |    21      |  hrs excess 8 d3
"RTN","PRS8HRSV",37,0)
 ;       20        |    12      |  OT total hrs d
"RTN","PRS8HRSV",38,0)
 ;       21        |    13      |  OT total hrs d2
"RTN","PRS8HRSV",39,0)
 ;       22        |    14      |  OT total hrs d3
"RTN","PRS8HRSV",40,0)
 ;   ---------------------------------------------------
"RTN","PRS8HRSV",41,0)
 ;
"RTN","PRS8HRSV",42,0)
 N ZZ S Y="^^^^^^28^^2^^^^^^^19^20^21^^12^13^14^^^^3^4^^^^"
"RTN","PRS8HRSV",43,0)
 ;
"RTN","PRS8HRSV",44,0)
 ;   Set Y to a premium time in Y string, based on X 
"RTN","PRS8HRSV",45,0)
 ;   OR set Y to zero if X is a non premium time or parttime hours.
"RTN","PRS8HRSV",46,0)
 ;
"RTN","PRS8HRSV",47,0)
 I X'=32 S Y=+$P(Y,"^",X)
"RTN","PRS8HRSV",48,0)
 ;
"RTN","PRS8HRSV",49,0)
 ;   IF Y is premium time & not Unscheduled regular but employee not
"RTN","PRS8HRSV",50,0)
 ;   ENTITLED to that type of time THEN set X to zero.
"RTN","PRS8HRSV",51,0)
 ;
"RTN","PRS8HRSV",52,0)
 I +Y,Y'=2,'$E(ENT,+Y) S X=0
"RTN","PRS8HRSV",53,0)
 ;
"RTN","PRS8HRSV",54,0)
 ;   Overtime & Not entitled set X & Y to unscheduled regular
"RTN","PRS8HRSV",55,0)
 ;
"RTN","PRS8HRSV",56,0)
 I "^12^13^14^"[("^"_Y_"^"),'X S X=9,Y=2
"RTN","PRS8HRSV",57,0)
 ;
"RTN","PRS8HRSV",58,0)
 ;   IF regular unscheduled (Y=2) & not hourly for regular unscheduled
"RTN","PRS8HRSV",59,0)
 ;   THEN set X=0, unless Baylor then X gets regular unscheduled.
"RTN","PRS8HRSV",60,0)
 ;
"RTN","PRS8HRSV",61,0)
 I X,Y=2,$E(ENT,+Y)'="H" S X=$S(TYP'["B":0,1:9)
"RTN","PRS8HRSV",62,0)
 ;
"RTN","PRS8HRSV",63,0)
 ;   IF 36/40 AWS with WP determine eligibility for OT/CT
"RTN","PRS8HRSV",64,0)
 ;   Skip this check if time is HW (X=29) or OT on Hol (X=24)
"RTN","PRS8HRSV",65,0)
 ;   
"RTN","PRS8HRSV",66,0)
 I "KM"[$E(AC,1),$E(AC,2)=1,$P(C0,U,16)=72,X'=32,X'=29,X'=24 D
"RTN","PRS8HRSV",67,0)
 . I HT>32 S X=$S(VAL="O":TOUR+15,VAL="e":7,1:X)  Q
"RTN","PRS8HRSV",68,0)
 . I TH(W)>160 S X=$S(VAL="O":TOUR+19,VAL="e":7,1:X)  Q
"RTN","PRS8HRSV",69,0)
 . I HT'>32,TH(W)'>160 S X=9
"RTN","PRS8HRSV",70,0)
 ;
"RTN","PRS8HRSV",71,0)
 ;   If X is hours in excess of 8/day & > 40/week & type of time
"RTN","PRS8HRSV",72,0)
 ;   is compensatory time X = 0
"RTN","PRS8HRSV",73,0)
 ;
"RTN","PRS8HRSV",74,0)
 I "^16^17^18^"[("^"_X_"^"),TH(WK)>160,"Ee"[VAL S X=0
"RTN","PRS8HRSV",75,0)
 ;
"RTN","PRS8HRSV",76,0)
 ;   ** Significance of checking "X" now as opposed to Y.
"RTN","PRS8HRSV",77,0)
 ;
"RTN","PRS8HRSV",78,0)
 K Y Q:'X
"RTN","PRS8HRSV",79,0)
 ;
"RTN","PRS8HRSV",80,0)
 ;   (Hours excess 8/day, OT hours, Reg hours @ OT rate, Holiday hours, 
"RTN","PRS8HRSV",81,0)
 ;   part time hours) OR unscheduled regular & Nurse or Nurse Hybrid.
"RTN","PRS8HRSV",82,0)
 ; ### DO WE NEED TO ADD !HYBRID TO THIS CHECK ???
"RTN","PRS8HRSV",83,0)
 I "^16^17^18^20^21^22^29^30^31^32^"[("^"_X_"^")!(X=9&(TYP["N"!(TYP["H"))) D
"RTN","PRS8HRSV",84,0)
 .;
"RTN","PRS8HRSV",85,0)
 .;     If today holiday or holiday benefit day for employee
"RTN","PRS8HRSV",86,0)
 .;
"RTN","PRS8HRSV",87,0)
 .I $$HOLIDAY^PRS8UT(PY,DFN,DAY) D  Q:'X
"RTN","PRS8HRSV",88,0)
 ..;
"RTN","PRS8HRSV",89,0)
 ..;     If part time hours & entitled to (Holiday [Shift day, 2 or 3])
"RTN","PRS8HRSV",90,0)
 ..;
"RTN","PRS8HRSV",91,0)
 ..I X=32,$E(ENT,TOUR+21),HOLWKD S ZZ=X,X=$S($G(DAY(DAY,"OFF"))'=1:TOUR+28,1:9) D SET S X=$S(TYP'["I":ZZ,1:9) Q
"RTN","PRS8HRSV",92,0)
 ..;
"RTN","PRS8HRSV",93,0)
 ..;     IF not part time hours & intermittent employee & employee
"RTN","PRS8HRSV",94,0)
 ..;     entitled to holiday overtime & holiday worked THEN set TIME 
"RTN","PRS8HRSV",95,0)
 ..;     to OT on Holiday and credit that TIME in SET.
"RTN","PRS8HRSV",96,0)
 ..;
"RTN","PRS8HRSV",97,0)
 ..I X'=32,TYP["I",$E(ENT,25),HOLWKD S ZZ=X,X=24 D SET S X=0
"RTN","PRS8HRSV",98,0)
 ..;
"RTN","PRS8HRSV",99,0)
 ..;     IF conditions same as above except employee is NOT entitled
"RTN","PRS8HRSV",100,0)
 ..;     to Holiday OT THEN use X as coded to credit TIME.
"RTN","PRS8HRSV",101,0)
 ..;
"RTN","PRS8HRSV",102,0)
 ..I X'=32,TYP["I",'$E(ENT,25),HOLWKD S ZZ=0 D SET S X=9
"RTN","PRS8HRSV",103,0)
 ..;
"RTN","PRS8HRSV",104,0)
 ..;     IF not part time hours & emp. is entitled to Holiday OT But
"RTN","PRS8HRSV",105,0)
 ..;     they did not work the holiday THEN if emp. is part time or
"RTN","PRS8HRSV",106,0)
 ..;     intermittent set type of time to Regular hrs @ OT rate 3
"RTN","PRS8HRSV",107,0)
 ..;     otherwise OT @ Holiday rate & IF the original coded TIME
"RTN","PRS8HRSV",108,0)
 ..;     NOT = reg hrs @ OT rate(shift D,2,3) THEN credit TIME at 
"RTN","PRS8HRSV",109,0)
 ..;     OT on holiday or Reg hours @ OT rate.  THEN also credit time 
"RTN","PRS8HRSV",110,0)
 ..;     as unscheduled regular.  ** why code time twice?
"RTN","PRS8HRSV",111,0)
 ..;
"RTN","PRS8HRSV",112,0)
 ..I X'=32,$E(ENT,25),'HOLWKD D
"RTN","PRS8HRSV",113,0)
 ...S ZZ=X
"RTN","PRS8HRSV",114,0)
 ...; for 36/40 AWS w/ WP or NP report OT on Holiday as (OK/OS)
"RTN","PRS8HRSV",115,0)
 ...; For 9mo AWS w/ Recess report OT on Holiday as (OK/OS)
"RTN","PRS8HRSV",116,0)
 ...I +NAWS,VAL["O",$E(DAY(DAY,"HOL"),M)=0 S X=24 D SET S X=0 Q
"RTN","PRS8HRSV",117,0)
 ...;
"RTN","PRS8HRSV",118,0)
 ...S X=$S(TYP["P"!(TYP["I"):TOUR+28,1:24) D SET
"RTN","PRS8HRSV",119,0)
 ...I TYP["P"!(TYP["I") S X=9 D SET
"RTN","PRS8HRSV",120,0)
 ...S X=0
"RTN","PRS8HRSV",121,0)
 .;
"RTN","PRS8HRSV",122,0)
 .;     IF type of time is part time hours for intermittent employee
"RTN","PRS8HRSV",123,0)
 .;     THEN set TIME = unscheduled regular.
"RTN","PRS8HRSV",124,0)
 .;
"RTN","PRS8HRSV",125,0)
 .I X=32,TYP["I" S X=9
"RTN","PRS8HRSV",126,0)
 .;
"RTN","PRS8HRSV",127,0)
 .;    Part time hours or unscheduled regular.
"RTN","PRS8HRSV",128,0)
 .;
"RTN","PRS8HRSV",129,0)
 .Q:X=32!(X=9)
"RTN","PRS8HRSV",130,0)
 .;
"RTN","PRS8HRSV",131,0)
 .;     IF employee worked holiday THEN set TIME to zero & if original
"RTN","PRS8HRSV",132,0)
 .;     coded type of time is NOT regular hours @ OT rate DO
"RTN","PRS8HRSV",133,0)
 .;
"RTN","PRS8HRSV",134,0)
 .I HOLWKD S ZZ=X,X=0 D
"RTN","PRS8HRSV",135,0)
 ..;
"RTN","PRS8HRSV",136,0)
 ..;     IF entitled to Holiday pay for this shift THEN set TIME
"RTN","PRS8HRSV",137,0)
 ..;     to Holiday HRS (shift d, 2 or 3)
"RTN","PRS8HRSV",138,0)
 ..;
"RTN","PRS8HRSV",139,0)
 ..I $E(ENT,TOUR+21) S X=TOUR+28
"RTN","PRS8HRSV",140,0)
 ;
"RTN","PRS8HRSV",141,0)
 ;     IF employee is part time & either a nurse or nurse hybrid 
"RTN","PRS8HRSV",142,0)
 ;     & they worked the holiday
"RTN","PRS8HRSV",143,0)
 ; ### SHOULD HYBRID BE ADDED TO THIS CHECK  HOW SHOULD THESE HYBRIDS
"RTN","PRS8HRSV",144,0)
 ; ### TREATED ON A HOLIDAY
"RTN","PRS8HRSV",145,0)
 I TYP["P",TYP["N"!(TYP["H"),HOLWKD,X=32 D
"RTN","PRS8HRSV",146,0)
 .;
"RTN","PRS8HRSV",147,0)
 .;     J gets start & stop times for employee's holiday tour.
"RTN","PRS8HRSV",148,0)
 .;     Start/stop times are represented w/ natural numbers
"RTN","PRS8HRSV",149,0)
 .;     from 0-96.  Each 15 minute segment of the 24 hour period
"RTN","PRS8HRSV",150,0)
 .;     beginning & ending at midnight can be represented w/
"RTN","PRS8HRSV",151,0)
 .;     a positive integer.  I.e.  1 = mid-12:15am,
"RTN","PRS8HRSV",152,0)
 .;     2 = 12:15-12:30a ... 96 = 11:45pm-mid.
"RTN","PRS8HRSV",153,0)
 .;
"RTN","PRS8HRSV",154,0)
 .;     Loop thru each set of start & stop times.  IF the single
"RTN","PRS8HRSV",155,0)
 .;     1/4 hr segment we're working w/ falls w/in any of the nurses 
"RTN","PRS8HRSV",156,0)
 .;     start & stop times THEN set TIME to Holiday Hours Day.
"RTN","PRS8HRSV",157,0)
 .;
"RTN","PRS8HRSV",158,0)
 .N I,J S J=$G(^TMP($J,"PRS8",DAY,"HWK")),ZZ=X
"RTN","PRS8HRSV",159,0)
 .;
"RTN","PRS8HRSV",160,0)
 .F I=1:2 Q:$P(J,U,I)=""  I M'<$P(J,U,I),M'>$P(J,U,I+1) S X=29
"RTN","PRS8HRSV",161,0)
 .;
"RTN","PRS8HRSV",162,0)
 .;     Holiday hrs-Day. reset X if 2 day tour.  Otherwise X = 0.
"RTN","PRS8HRSV",163,0)
 .;
"RTN","PRS8HRSV",164,0)
 .I X=29 D SET S X=$S($P(^PRST(457.1,$P(DAY(DAY-1,0),U,2),0),U,5)="Y":ZZ,1:0)
"RTN","PRS8HRSV",165,0)
 ;
"RTN","PRS8HRSV",166,0)
 ;
"RTN","PRS8HRSV",167,0)
SET ; --- Set value into WK array
"RTN","PRS8HRSV",168,0)
 ;
"RTN","PRS8HRSV",169,0)
 ; Nurses on the 36/40 AWS are FT with Normal Hours of 72.  Nurses on the 9 month
"RTN","PRS8HRSV",170,0)
 ; AWS are PT with Normal Hours of 80.  Neither will not have Part Time Hours
"RTN","PRS8HRSV",171,0)
 ; counted in their 8B string.
"RTN","PRS8HRSV",172,0)
 ;
"RTN","PRS8HRSV",173,0)
 Q:$E(AC,2)=1&($P(C0,U,16)=72)&(X=32)  ; 36/40 AWS
"RTN","PRS8HRSV",174,0)
 Q:$E(AC,2)=2&(NH=320)&(X=32)  ; 9month AWS before any Recess processed
"RTN","PRS8HRSV",175,0)
 ;
"RTN","PRS8HRSV",176,0)
 ;     Full time employee & part time hours & normal hours WK1 + WK2
"RTN","PRS8HRSV",177,0)
 ;     = biweekly normal hours.
"RTN","PRS8HRSV",178,0)
 ;
"RTN","PRS8HRSV",179,0)
 I $P(C0,"^",10)=1,X=32,NH(1)+NH(2)=NH Q
"RTN","PRS8HRSV",180,0)
 ;
"RTN","PRS8HRSV",181,0)
 ;     For all types of TIME, increment the WK array.
"RTN","PRS8HRSV",182,0)
 ;
"RTN","PRS8HRSV",183,0)
 I +X D  Q
"RTN","PRS8HRSV",184,0)
 . S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)+1
"RTN","PRS8HRSV",185,0)
 ;
"RTN","PRS8HRSV",186,0)
 ;     When X is zero, reset to originally coded time.
"RTN","PRS8HRSV",187,0)
 ;
"RTN","PRS8HRSV",188,0)
 I 'X S X=ZZ Q
"RTN","PRS8HRSV",189,0)
 Q
"RTN","PRS8HRSV",190,0)
 ;
"RTN","PRS8HRSV",191,0)
 ;
"RTN","PRS8HRSV",192,0)
TH ; --- increment total hours & compensatory time hours.
"RTN","PRS8HRSV",193,0)
 ; Posted RG/OT/CT that is >8/day but < 40/week and < 80/pp will not be
"RTN","PRS8HRSV",194,0)
 ; counted in TH or TH(W)
"RTN","PRS8HRSV",195,0)
 ; 
"RTN","PRS8HRSV",196,0)
 ; I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",197,0)
 ;
"RTN","PRS8HRSV",198,0)
 I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) D
"RTN","PRS8HRSV",199,0)
 . Q:(HT>32)&(TH(W)<160)&(NH<320)&($E(ENT,19)=1)
"RTN","PRS8HRSV",200,0)
 . Q:(HT>32)&(TH(W)<160)&(NH=320)&($E(ENT,19)=1)&($E(AC,2)=2)  ; 9month AWS
"RTN","PRS8HRSV",201,0)
 . S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",202,0)
 Q
"RTN","PRS8HRSV",203,0)
 ;
"RTN","PRS8HRSV",204,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",205,0)
 ;
"RTN","PRS8HRSV",206,0)
G8 ; --- Check for greater than 8 hours in day
"RTN","PRS8HRSV",207,0)
 ;
"RTN","PRS8HRSV",208,0)
 Q:HTP'>32!(VAL="E")
"RTN","PRS8HRSV",209,0)
 ;
"RTN","PRS8HRSV",210,0)
 ; Checks for Hours Excess 8/day (DA/DE)
"RTN","PRS8HRSV",211,0)
 S X=TOUR+15 D CHK^PRS8HRSV
"RTN","PRS8HRSV",212,0)
 I X,NH<320,CYA2806>0 S CYA2806=CYA2806-1
"RTN","PRS8HRSV",213,0)
 Q:X
"RTN","PRS8HRSV",214,0)
 ;
"RTN","PRS8HRSV",215,0)
 ; Checks for OT Total Hours (OA/OE)
"RTN","PRS8HRSV",216,0)
 I TYP["I"!(TYP["P"),TYP'["B",TH(W)>160 S X=TOUR+19 D CHK^PRS8HRSV
"RTN","PRS8HRSV",217,0)
 Q
"RTN","PRS8HRSV",218,0)
 ;
"RTN","PRS8HRSV",219,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8MSC0")
0^46^B40092261^B31114141
"RTN","PRS8MSC0",1,0)
PRS8MSC0 ;HISC/DAD,WCIOFO/JAH,SAB - MISC TIME CARD ADJUST(contd) ;4/04/2007
"RTN","PRS8MSC0",2,0)
 ;;4.0;PAID;**22,35,40,56,111,112**;Sep 21, 1995;Build 54
"RTN","PRS8MSC0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8MSC0",4,0)
 ;
"RTN","PRS8MSC0",5,0)
 ; for employee on daily tour check if no duty performed during week
"RTN","PRS8MSC0",6,0)
 I TYP["D" D NODUTY^PRS8MSC1
"RTN","PRS8MSC0",7,0)
 ;
"RTN","PRS8MSC0",8,0)
 S B="",Z0="" S $P(B,"B",97)="",$P(Z0,"0",97)="",FLAG=0
"RTN","PRS8MSC0",9,0)
 F X=1:1:PEROWK S Y=$P(PEROWK(X),"^",4),DAT=$P(PEROWK(X),"^",1,3),DY=$P(DAT,"^",1),BEG=$P(DAT,"^",2),END=$P(DAT,"^",3) D
"RTN","PRS8MSC0",10,0)
 .I $L(Y)'<96,TYP'["Ff",$E(ENT,27) D  ; slp for 24hr cvg
"RTN","PRS8MSC0",11,0)
 ..S SLMAX=32,(SLW,SLY,SLST,SLSTR,SLST1,SLY1,SL1,SL2,SL3)=""
"RTN","PRS8MSC0",12,0)
 ..I END=96 D
"RTN","PRS8MSC0",13,0)
 ...S SLST=$P($G(PEROWK(X)),"^",4),SL2=$E(SLST,SST,$L(SLST)),SL1=$E(SLST,1,SLMAX-$L(SL2)),SL3=$L(SL2)
"RTN","PRS8MSC0",14,0)
 ...S SLSTR=SL1_SL2
"RTN","PRS8MSC0",15,0)
 ...I DOUB S SLSTR=$TR(SLSTR,"Cct","Bbb") ; if PPC = W then OC = SB
"RTN","PRS8MSC0",16,0)
 ...S SLSTR=$TR(SLSTR,$TR(SLSTR,"Bb"),Z0)
"RTN","PRS8MSC0",17,0)
 ...S SLY=$L($TR(SLSTR,"b0")),SLW=$L($TR(SLSTR,"B0"))
"RTN","PRS8MSC0",18,0)
 ...I SLW>12 Q
"RTN","PRS8MSC0",19,0)
 ...I DY=0 S FLAG=SL3
"RTN","PRS8MSC0",20,0)
 ...S Y=$L(SLSTR)-SLW
"RTN","PRS8MSC0",21,0)
 ...I FLAG>0&(DY=1) S Y=Y-FLAG,FLAG=0
"RTN","PRS8MSC0",22,0)
 ...S D=DY,P=25 D SET Q
"RTN","PRS8MSC0",23,0)
 ..E  D
"RTN","PRS8MSC0",24,0)
 ...S SLST=$G(^TMP($J,"PRS8",DY,"W"))_$G(^TMP($J,"PRS8",DY+1,"W"))
"RTN","PRS8MSC0",25,0)
 ...S SLSTR=$E(SLST,1,SST+(SLMAX-1))
"RTN","PRS8MSC0",26,0)
 ...I DOUB S SLSTR=$TR(SLSTR,"Cct","Bbb") ; if PPC = W then OC = SB
"RTN","PRS8MSC0",27,0)
 ...S SLSTR=$TR(SLSTR,$TR(SLSTR,"Bb"),Z0)
"RTN","PRS8MSC0",28,0)
 ...S SLY=$E(SLSTR,SST,96),SLY1=$E(SLSTR,97,$L(SLSTR))
"RTN","PRS8MSC0",29,0)
 ...S SLSTR=SLY_SLY1,SLW=$L($TR(SLSTR,"B0"))
"RTN","PRS8MSC0",30,0)
 ...I SLW>12 Q
"RTN","PRS8MSC0",31,0)
 ...S D=DY,Y=$L($TR(SLY,"b0")),P=25 D SET
"RTN","PRS8MSC0",32,0)
 ...Q:DY=0  S D=DY+1,Y=$L($TR(SLY1,"b0")) D SET
"RTN","PRS8MSC0",33,0)
 ...Q
"RTN","PRS8MSC0",34,0)
 ..K BEG,DAT,END,NL,SLW,SLY,SLST,SLSTR,SLST1,SLY1,SL1,SL2,SL3 Q
"RTN","PRS8MSC0",35,0)
 .Q
"RTN","PRS8MSC0",36,0)
 S D="",(H,ROSS)=1 K OT,UN,DA,CT
"RTN","PRS8MSC0",37,0)
 F H=H:ROSS:PEROT D  ; calculate CB OT and FF OT/sleep time
"RTN","PRS8MSC0",38,0)
 .S Y=PEROT(H),Z=$P(Y,"^",3)
"RTN","PRS8MSC0",39,0)
 .I "Ff"[TYP D  ;K OT,UN,DA D  ; FF sleep time
"RTN","PRS8MSC0",40,0)
 ..F M=1:1:$L(Z) D  ; following FF OT per Mary Baker 4/1/93
"RTN","PRS8MSC0",41,0)
 ...I D'=+Y+(($P(Y,"^",2)+M-2)\96) D
"RTN","PRS8MSC0",42,0)
 ....S D=+Y+(($P(Y,"^",2)+M-2)\96),HT=0
"RTN","PRS8MSC0",43,0)
 ....Q
"RTN","PRS8MSC0",44,0)
 ...S HT=HT+1
"RTN","PRS8MSC0",45,0)
 ...I $E(Z,H)="E" S CT(D)=$G(CT(D))+1 Q
"RTN","PRS8MSC0",46,0)
 ...I M'>32 S:HT'>32 OT(D)=$G(OT(D))+1 S:HT>32 DA(D)=$G(DA(D))+1 ; FF OT
"RTN","PRS8MSC0",47,0)
 ...I M>32,$L(Z)'<96&(M'>64)!($L(Z)<96) S DA(D)=$G(DA(D))+1 ; FF hrs>8
"RTN","PRS8MSC0",48,0)
 ...I $L(Z)'<96,M>64 D  ; FF 2/3 rule
"RTN","PRS8MSC0",49,0)
 ....I M'>96 S UN(D)=$G(UN(D))+1 ; first 8 sleep time
"RTN","PRS8MSC0",50,0)
 ....E  S DA(D)=$G(DA(D))+1 ; rest hrs >8 
"RTN","PRS8MSC0",51,0)
 ....Q
"RTN","PRS8MSC0",52,0)
 ...Q
"RTN","PRS8MSC0",53,0)
 ..Q
"RTN","PRS8MSC0",54,0)
 .I $L(Z)<8 D  ; call back OT at least 2 hrs
"RTN","PRS8MSC0",55,0)
 ..S YY=Y,ZZ=Z N X,Y,START,STOP,T,TT,Z,DD,TL S Y=YY,Z=ZZ
"RTN","PRS8MSC0",56,0)
 ..S CB=$G(^TMP($J,"PRS8",+Y,"CB"))
"RTN","PRS8MSC0",57,0)
 ..;no call back OT today or send bulletin
"RTN","PRS8MSC0",58,0)
 ..Q:(CB="")!($$OTNXTPP(+Y,CB,$P(C0,"^",1),PY,$P(C0,"^",8)))
"RTN","PRS8MSC0",59,0)
 ..S Q=0 F ZZ=1:2 Q:'$P(CB,"^",ZZ)  I $P(Y,"^",2)=$P(CB,"^",ZZ) S Q=1
"RTN","PRS8MSC0",60,0)
 ..Q:'Q  ; this OT episode not call back
"RTN","PRS8MSC0",61,0)
 ..S OT=Y,START=$P(OT,"^",2),STOP=$P(OT,"^",2)+$L(Z)-1,T=START,TT=$S(T>96:T-96,1:T)
"RTN","PRS8MSC0",62,0)
 ..S W=$G(^TMP($J,"PRS8",+OT,"W")),WEEK=$S(+OT>7:2,1:1)
"RTN","PRS8MSC0",63,0)
 ..S W1=$G(^TMP($J,"PRS8",OT-1,"W"))
"RTN","PRS8MSC0",64,0)
 ..S W2=$G(^TMP($J,"PRS8",OT+1,"W"))
"RTN","PRS8MSC0",65,0)
 ..S (Z,X)=0 F Z=1:1:8-(STOP-START+1) D  Q:X=0
"RTN","PRS8MSC0",66,0)
 ...S DD=Z
"RTN","PRS8MSC0",67,0)
 ...I TT-DD>0 S X=$E(W,TT-DD)
"RTN","PRS8MSC0",68,0)
 ...E  S X=$E(W1,96+T-DD)
"RTN","PRS8MSC0",69,0)
 ...I "123m"[X,$E($G(^TMP($J,"PRS8",$S(TT-DD>0:+OT,1:OT-1),"HOL")),$S(TT-DD>0:TT-DD,1:96+T-DD))=1 S X=0 ; HX becomes time off
"RTN","PRS8MSC0",70,0)
 ...Q
"RTN","PRS8MSC0",71,0)
 ..S ZZ=Z S:X=0&Z ZZ=ZZ-1 S X=0,T=STOP,TT=$S(T>96:T-96,1:T)
"RTN","PRS8MSC0",72,0)
 ..F Z=1:1:8-(STOP-START+1+ZZ) D  Q:X=0
"RTN","PRS8MSC0",73,0)
 ...S DD=STOP-START+1+ZZ+Z
"RTN","PRS8MSC0",74,0)
 ...I T+Z'>96 S X=$E(W,T+Z)
"RTN","PRS8MSC0",75,0)
 ...E  S X=$E(W2,T-96+Z)
"RTN","PRS8MSC0",76,0)
 ...I "123m"[X,$E($G(^TMP($J,"PRS8",$S(T+Z'>96:+OT,1:OT+1),"HOL")),$S(T+Z'>96:T+Z,1:T-96+Z))=1 S X=0 ; HX becomes time off
"RTN","PRS8MSC0",77,0)
 ...Q
"RTN","PRS8MSC0",78,0)
 ..S Z=ZZ+Z-(X=0&Z)
"RTN","PRS8MSC0",79,0)
 ..I STOP-START+1+Z<8 D
"RTN","PRS8MSC0",80,0)
 ...I TYP["W",$E($P(PEROT(H),"^",3))'="E"&($G(^TMP($J,"PRS8",$P(PEROT(H),"^",1),"OFF"))=0) S TOUR=$G(^TMP($J,"PRS8",$P(PEROT(H),"^",1),"TOUR"))
"RTN","PRS8MSC0",81,0)
 ...S D=+OT,P=$S($E($P(PEROT(H),"^",3))'="E":TOUR+19,1:7),Y=8-(STOP-START+1+Z)
"RTN","PRS8MSC0",82,0)
 ...;
"RTN","PRS8MSC0",83,0)
 ...I TYP["P",TYP'["B",P'=7,'+NAWS D
"RTN","PRS8MSC0",84,0)
 ....I $P($G(^TMP($J,"PRS8",$P(PEROT(H),"^",1),"OFF")),"^",1)=1&(TH(WEEK)'>160) S Y=0 Q
"RTN","PRS8MSC0",85,0)
 ....I $P(C0,"^",12)="E" S P=$S($L($TR(W,"0O"))>31&(TH(WEEK)'>160):TOUR+25,1:P) D:Y SET S Y=$S(TH(WEEK)'>160:Y,1:0) S P=9 D:Y SET S Y=0
"RTN","PRS8MSC0",86,0)
 ...I $P(C0,"^",12)="N",P'=7 S P=$S($L($TR(W,"0O"))>31:TOUR+15,1:P) D:Y SET S Y=0
"RTN","PRS8MSC0",87,0)
 ...D:Y&('+NAWS) SET
"RTN","PRS8MSC0",88,0)
 ...;
"RTN","PRS8MSC0",89,0)
 ...I +NAWS D  Q  ; Checks for just the AWS nurses
"RTN","PRS8MSC0",90,0)
 ....N CNT,HT,I
"RTN","PRS8MSC0",91,0)
 ....S CNT=Y,Y=1,HT=$G(^TMP($J,"PRS8",D,"HT"))
"RTN","PRS8MSC0",92,0)
 ....F I=1:1:CNT D
"RTN","PRS8MSC0",93,0)
 .....I HT'<32 S P=$S(P'=7:TOUR+15,1:P) D SET1 Q  ; DA/DE or CE/CT
"RTN","PRS8MSC0",94,0)
 .....I TH($S(+OT>7:2,1:1))'<160 S P=$S(P'=7:TOUR+19,1:P) D SET1 Q  ; OA/OE or CE/CT
"RTN","PRS8MSC0",95,0)
 .....I HT<32,TH($S(+OT>7:2,1:1))<160 S P=9 D SET1 Q  ; UN/US
"RTN","PRS8MSC0",96,0)
 ..Q
"RTN","PRS8MSC0",97,0)
 .Q
"RTN","PRS8MSC0",98,0)
 F X="OT","DA","UN","CT" D  ; store FF OT into WK array
"RTN","PRS8MSC0",99,0)
 .N Y S P=$S(X="OT":TOUR+19,X="DA"&$E(ENT,TOUR+18):TOUR+15,X="DA":TOUR+19,X="CT":TOUR+6,1:9)
"RTN","PRS8MSC0",100,0)
 .F D=0:0 S D=$O(@(X_"("_D_")")) Q:D'>0  S Y=@(X_"("_D_")") D SET
"RTN","PRS8MSC0",101,0)
 .Q
"RTN","PRS8MSC0",102,0)
 ;
"RTN","PRS8MSC0",103,0)
 ; check/adjust night differential granted for leave
"RTN","PRS8MSC0",104,0)
 D LVND
"RTN","PRS8MSC0",105,0)
 Q
"RTN","PRS8MSC0",106,0)
SET ; Set sleep time into WK array
"RTN","PRS8MSC0",107,0)
 Q:D<1!(D>14)
"RTN","PRS8MSC0",108,0)
 S WEEK=$S(D>7:2,1:1)
"RTN","PRS8MSC0",109,0)
 S $P(WK(WEEK),"^",P)=$P(WK(WEEK),"^",P)+Y
"RTN","PRS8MSC0",110,0)
 Q
"RTN","PRS8MSC0",111,0)
 ;
"RTN","PRS8MSC0",112,0)
SET1     ; Set sleep time into WK array
"RTN","PRS8MSC0",113,0)
 Q:D<1!(D>14)
"RTN","PRS8MSC0",114,0)
 S WEEK=$S(D>7:2,1:1)
"RTN","PRS8MSC0",115,0)
 S $P(WK(WEEK),"^",P)=$P(WK(WEEK),"^",P)+Y
"RTN","PRS8MSC0",116,0)
 Q:(HT>32)&(TH(WEEK)<160)&(NH<320)&($E(ENT,19)=1)
"RTN","PRS8MSC0",117,0)
 Q:(HT>32)&(TH(WEEK)<160)&(NH=320)&($E(ENT,19)=1)&($E(AC,2)=2)  ; 9month AWS
"RTN","PRS8MSC0",118,0)
 S HT=HT+1,TH(WEEK)=TH(WEEK)+1
"RTN","PRS8MSC0",119,0)
 S ^TMP($J,"PRS8",D,"HT")=^TMP($J,"PRS8",D,"HT")+1
"RTN","PRS8MSC0",120,0)
 Q
"RTN","PRS8MSC0",121,0)
 ;
"RTN","PRS8MSC0",122,0)
OTNXTPP(DAY,CALLBK,EMPNM,PPIEN,TLU) ;
"RTN","PRS8MSC0",123,0)
 ;OT or CT connects to a tour of duty in the next pay period.
"RTN","PRS8MSC0",124,0)
 ;JAH-patch PRS*4*22
"RTN","PRS8MSC0",125,0)
 ;If OT or CT are worked in last 2 hours of pay period & 1st day 
"RTN","PRS8MSC0",126,0)
 ;of next pay period is missing a tour beginning at midnight, send
"RTN","PRS8MSC0",127,0)
 ;a bulletin warning that call back will be paid unless corrective
"RTN","PRS8MSC0",128,0)
 ;action is taken.
"RTN","PRS8MSC0",129,0)
 ;(i.e a nurse comes in before midnight on last saturday of 
"RTN","PRS8MSC0",130,0)
 ;pay period & works for a period less than 2 hrs. before her tour
"RTN","PRS8MSC0",131,0)
 ;that begins at midnight on Sunday, first day of the next pp)
"RTN","PRS8MSC0",132,0)
 ;
"RTN","PRS8MSC0",133,0)
 ; CALLBK  =   start and stop position in 96 char BCD string.
"RTN","PRS8MSC0",134,0)
 ; RECORD  =   pointer from employee's tour info to a record 
"RTN","PRS8MSC0",135,0)
 ;             in tour of duty file.
"RTN","PRS8MSC0",136,0)
 ; DAY  =      day of the pay period 
"RTN","PRS8MSC0",137,0)
 ; D1NXTPP  =  BOOLEAN; set to true if tour on day 1 of next pay period 
"RTN","PRS8MSC0",138,0)
 ;                      begins at midnight, otherwise false
"RTN","PRS8MSC0",139,0)
 ; NEXTP    =  next pay period in 97-05 format.
"RTN","PRS8MSC0",140,0)
 ; CURP     =  current pay period in 99-02 format.
"RTN","PRS8MSC0",141,0)
 ; TLU      = 3 digit time & leave unit of employee.
"RTN","PRS8MSC0",142,0)
 N D1NXTPP,RECORD,CURP,NEXTP,XMDUZ,XMB,XMY,XMDUZ
"RTN","PRS8MSC0",143,0)
 S (RTN,D1NXTPP)=0
"RTN","PRS8MSC0",144,0)
 S RECORD=$P($G(^TMP($J,"PRS8",15,0)),"^",2)
"RTN","PRS8MSC0",145,0)
 I RECORD'="" S D1NXTPP=($P($G(^PRST(457.1,RECORD,1)),"^")="MID")
"RTN","PRS8MSC0",146,0)
 I (DAY=14)&($P(CALLBK,"^",2)=96) D
"RTN","PRS8MSC0",147,0)
 . I (D1NXTPP) S RTN=1
"RTN","PRS8MSC0",148,0)
 . E  D
"RTN","PRS8MSC0",149,0)
 ..   S CURP=$P($G(^PRST(458,PPIEN,0)),"^",1)
"RTN","PRS8MSC0",150,0)
 ..   S NXTP=$E($$NXTPP^PRSAPPU(CURP),3,7)
"RTN","PRS8MSC0",151,0)
 ..;  Send bulletin to G.PAD
"RTN","PRS8MSC0",152,0)
 ..   S XMY("G.PAD@"_^XMB("NETNAME"))=""
"RTN","PRS8MSC0",153,0)
 ..   S XMDUZ="DHCP PAID package"
"RTN","PRS8MSC0",154,0)
 ..   S XMB="PRS LAST SAT OT/CT"
"RTN","PRS8MSC0",155,0)
 ..;
"RTN","PRS8MSC0",156,0)
 ..;  employee name, pay period number, next pay period
"RTN","PRS8MSC0",157,0)
 ..   S XMB(1)=EMPNM,XMB(2)=CURP,XMB(3)=NXTP,XMB(4)=TLU
"RTN","PRS8MSC0",158,0)
 ..   D ^XMB
"RTN","PRS8MSC0",159,0)
 Q RTN
"RTN","PRS8MSC0",160,0)
 ;
"RTN","PRS8MSC0",161,0)
LVND ; Leave Night Differential
"RTN","PRS8MSC0",162,0)
 ; back out ND granted for leave if employee took 8 or more hrs of leave
"RTN","PRS8MSC0",163,0)
 ;   a non-wage grade employee can receive night differential when
"RTN","PRS8MSC0",164,0)
 ;   on leave as long as the employee has taken less than 8 hours of
"RTN","PRS8MSC0",165,0)
 ;   leave during the pay period.
"RTN","PRS8MSC0",166,0)
 ; input (note: units are count of 15min time segments):
"RTN","PRS8MSC0",167,0)
 ;   LU     - leave taken during pay period (set in PRS8AC, PRS8MT)
"RTN","PRS8MSC0",168,0)
 ;   WK(#)  - piece 10 contains total shift-2 ND for week #
"RTN","PRS8MSC0",169,0)
 ;   WKL(#) - ND granted for leave during week # (set in PRS8PP)
"RTN","PRS8MSC0",170,0)
 ; output:
"RTN","PRS8MSC0",171,0)
 ;   WK(#)  - piece 10 may be modified
"RTN","PRS8MSC0",172,0)
 ;   WKL(#) - may be modified
"RTN","PRS8MSC0",173,0)
 N W
"RTN","PRS8MSC0",174,0)
 Q:TYP["W"  ;              Doesn't apply to Wage Grade
"RTN","PRS8MSC0",175,0)
 Q:LU'>31  ;               Didn't take 8hrs of leave
"RTN","PRS8MSC0",176,0)
 F W=1,2 D  ;              For each week subtract leave ND from total ND
"RTN","PRS8MSC0",177,0)
 . Q:'WKL(W)  ;                                 No leave ND to subtract
"RTN","PRS8MSC0",178,0)
 . I +NAWS'=36 S $P(WK(W),"^",10)=$P(WK(W),"^",10)-WKL(W) ; Subtract
"RTN","PRS8MSC0",179,0)
 . ; For 36/40 AWS subtract time from Night Differential-AWS (piece 51)
"RTN","PRS8MSC0",180,0)
 . I +NAWS=36 S $P(WK(W),"^",51)=$P(WK(W),"^",51)-WKL(W)
"RTN","PRS8MSC0",181,0)
 . S WKL(W)=0 ;                                 Reset leave ND amount
"RTN","PRS8MSC0",182,0)
 Q
"RTN","PRS8MT")
0^9^B45103174^B28085680
"RTN","PRS8MT",1,0)
PRS8MT ;HISC/MRL-DECOMPOSITION, MEALTIME ;05/02/07
"RTN","PRS8MT",2,0)
 ;;4.0;PAID;**2,40,69,102,109,112**;Sep 21, 1995;Build 54
"RTN","PRS8MT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8MT",4,0)
 ;
"RTN","PRS8MT",5,0)
 ;This routine is used to determine placement of mealtime where
"RTN","PRS8MT",6,0)
 ;necessary.
"RTN","PRS8MT",7,0)
 ;
"RTN","PRS8MT",8,0)
 ;Called by Routines:  PRS8ST
"RTN","PRS8MT",9,0)
 ;
"RTN","PRS8MT",10,0)
MULT ; --- checking 1 node
"RTN","PRS8MT",11,0)
 I $$HOLIDAY^PRS8UT(PY,DFN,MDY),$G(^PRST(458,PY,"E",DFN,"D",MDY,2))["MID^MID^ON" Q  ;don't add meal if mid-mid on-call on a holiday, quit routine
"RTN","PRS8MT",12,0)
 S TWO=DAY(MDY,"TWO")
"RTN","PRS8MT",13,0)
 S S=1 D SET D:'Q  I TWO S S=2 D SET D:'Q
"RTN","PRS8MT",14,0)
 .S D1="",$P(D1,"0",193)="",V(1)=97,V(2)=0
"RTN","PRS8MT",15,0)
 .F I=1:3:28 S V=$P(N,"^",I,I+2) Q:$P(V,"^",1)=""  D
"RTN","PRS8MT",16,0)
 ..S X=$P(V,"^",3) I "^^6^7^3^8^"'[("^"_X_"^") Q  ;quit if not NH
"RTN","PRS8MT",17,0)
 ..F M=$P(V,"^"):1:$P(V,"^",2) D  ; build up tour
"RTN","PRS8MT",18,0)
 ...S D1=$E(D1,1,M-1)_$S(X=""!(X=3):1,X=6:2,1:3)_$E(D1,M+1,192)
"RTN","PRS8MT",19,0)
 ...I V(1)>M S V(1)=M
"RTN","PRS8MT",20,0)
 ...I V(2)<M S V(2)=M
"RTN","PRS8MT",21,0)
 ..Q
"RTN","PRS8MT",22,0)
 .D:V(2) GETY
"RTN","PRS8MT",23,0)
 .F I="N","W" F J=MDY,MDY+1 S X=$G(DAY(J,I)) D
"RTN","PRS8MT",24,0)
 ..I X'="" S ^TMP($J,"PRS8",J,I)=X
"RTN","PRS8MT",25,0)
 ..Q
"RTN","PRS8MT",26,0)
 .Q
"RTN","PRS8MT",27,0)
 ;
"RTN","PRS8MT",28,0)
END ; --- all done here
"RTN","PRS8MT",29,0)
 K A,B,C,D,DIF,DIF1,J,L,M,M1,MID,MT,N,PM,T,SPL,SPLX,USE,V(1),V(2),VT,X,X1,X2,Y
"RTN","PRS8MT",30,0)
 Q
"RTN","PRS8MT",31,0)
 ;
"RTN","PRS8MT",32,0)
GETY ; --- this is where Y (placement of mealtime) is defined
"RTN","PRS8MT",33,0)
 S X=$E(D,V(1),V(2)),D1=$E(D1,V(1),V(2))
"RTN","PRS8MT",34,0)
 N ORIGX,RECESS
"RTN","PRS8MT",35,0)
 S ORIGX=X ; Original copy of codes in X and
"RTN","PRS8MT",36,0)
 S RECESS=DAY(MDY,"r")_$G(DAY(MDY,"rN"))
"RTN","PRS8MT",37,0)
 S RECESS=$E(RECESS,V(1),V(2)) ; load any Recess
"RTN","PRS8MT",38,0)
 I X["5" D
"RTN","PRS8MT",39,0)
 . N DAYP
"RTN","PRS8MT",40,0)
 . ; loop thru string X and replace 5s by a leave code if one exists
"RTN","PRS8MT",41,0)
 . S DAYP=$E(DAY(MDY,"P"),V(1),V(2)) ; leave may be hidden here
"RTN","PRS8MT",42,0)
 . F M=1:1:$L(X) D
"RTN","PRS8MT",43,0)
 . . I $E(X,M)=5,$E(DAYP,M)'=0 S $E(X,M)=$E(DAYP,M)
"RTN","PRS8MT",44,0)
 S MID=V(2)-V(1)+1-MT\2,MID=MID+V(1) ;middle of tour
"RTN","PRS8MT",45,0)
 S PM=+$P($G(^PRST(457.1,+$P(DAY(MDY,0),"^",$S(S=1:2,1:13)),0)),"^",7) ;0=non=prem meal/1=prem. meal
"RTN","PRS8MT",46,0)
 S X1=$E(X),Q=1
"RTN","PRS8MT",47,0)
 F M=1:1:$L(X) D  Q:'Q
"RTN","PRS8MT",48,0)
 .S Y=$E(X,M)
"RTN","PRS8MT",49,0)
 .I "1235C"[Y,"1235C"[X1 Q  ; scheduled work time
"RTN","PRS8MT",50,0)
 .I "4OC"[Y,$E(RECESS,M)="r" S Q=0 Q  ; Work performed while on Recess (9mo AWS)
"RTN","PRS8MT",51,0)
 .I Y'="O",Y'=X1 S Q=0 Q  ; not same type of time, and non-OT
"RTN","PRS8MT",52,0)
 .I Y="O",($E(DAY($S(V(1)+M-1<97:MDY,1:MDY+1),"HOL"),$S(V(1)+M-1<97:V(1)+M-1,1:V(1)+M-1-96))'=2) S Q=0 Q  ; OT indicating non-holiday worked gets no meal
"RTN","PRS8MT",53,0)
 .I Y="O",($E(DAY($S(V(1)+M-1<97:MDY,1:MDY+1),"HOL"),$S(V(1)+M-1<97:V(1)+M-1,1:V(1)+M-1-96))=2),"123C"[X1 S Q=0 Q  ; OT indicating holiday worked and Excused.
"RTN","PRS8MT",54,0)
 .Q
"RTN","PRS8MT",55,0)
 I X["0" D
"RTN","PRS8MT",56,0)
 .I RECESS'["r" S SPL=$TR(X,"1235"),SPLX=$TR(X,SPL,$TR($J("",$L(SPL))," "))
"RTN","PRS8MT",57,0)
 .I RECESS["r" S SPL=$TR(X,"01235"),SPLX=$TR(X,SPL,$TR($J("",$L(SPL))," "))
"RTN","PRS8MT",58,0)
 .I SPLX="" S Q=1
"RTN","PRS8MT",59,0)
 ;
"RTN","PRS8MT",60,0)
 K M
"RTN","PRS8MT",61,0)
 ;--- one activity for entire tour
"RTN","PRS8MT",62,0)
 I Q S Q=0 D  F M=1:1:MT S M(M)=Y+M-1
"RTN","PRS8MT",63,0)
 .I V(1)>24,V(2)<73 S Y=MID Q  ;no premium time involved/ meal in middle
"RTN","PRS8MT",64,0)
 .S Q=0 D  ;check for all premium
"RTN","PRS8MT",65,0)
 ..I V(1)<25,V(2)<25 S Q=1 Q  ;all hours before 6am
"RTN","PRS8MT",66,0)
 ..I V(1)>72,V(2)>72,V(2)'>120 S Q=1 Q  ;all hours after 6pm
"RTN","PRS8MT",67,0)
 .I Q S Y=MID Q  ; all time premium time/ meal in middle
"RTN","PRS8MT",68,0)
 .I PM S Y=0 D
"RTN","PRS8MT",69,0)
 ..I V(2)>72 S Y=73-$S(V(2)-73>MT&(V(1)'>73):0,V(1)<25!(V(2)'<121):73,1:MT-(V(2)-73))
"RTN","PRS8MT",70,0)
 ..I 'Y,V(1)<25 S Y=$S(25-V(1)>MT:25-MT,1:V(1))
"RTN","PRS8MT",71,0)
 ..I 'Y S Y=$S(121-V(1)>MT:121-MT,1:V(1))
"RTN","PRS8MT",72,0)
 .E  S Y=0 D
"RTN","PRS8MT",73,0)
 ..I V(2)>72 S Y=$S(73-MT>V(1):73-MT,V(1)<25!(V(2)'<121):0,1:V(1))
"RTN","PRS8MT",74,0)
 ..I 'Y,V(1)<25 S Y=$S(V(2)-MT>24:25,1:V(2)-MT+1)
"RTN","PRS8MT",75,0)
 ..I 'Y S Y=$S(V(2)-MT>120:121,1:V(2)-MT+1)
"RTN","PRS8MT",76,0)
 .I 'Y S Y=MID
"RTN","PRS8MT",77,0)
 .Q
"RTN","PRS8MT",78,0)
 ; --- multiple activities per tour
"RTN","PRS8MT",79,0)
 E  D
"RTN","PRS8MT",80,0)
 .S Z=$TR(X,"1235"),X=$TR(X,Z,$TR($J("",$L(Z))," ","0"))
"RTN","PRS8MT",81,0)
 .S ZRIK=$TR(Z,"HC") I MT>0,$L(ZRIK)'<(($P(DAY(DAY,0),"^",8)*4)+MT) S X="",$P(X,"1",$L(ZRIK)+1)="" ;if leave posted > or = to tour length + mt (ie didn't post around lunch) it was resulting in OT (ZRIK strips HOL & OC)
"RTN","PRS8MT",82,0)
 .Q:X?1"0"."0"&(RECESS'["r")
"RTN","PRS8MT",83,0)
 .S M=0 F A=1,2 Q:M=MT  F B=MID,MID+1,MID-1:-1:V(1),MID+2:1:V(2) D  Q:M=MT
"RTN","PRS8MT",84,0)
 ..Q:'$E(X,B-V(1)+1)
"RTN","PRS8MT",85,0)
 ..I A=1,PM,B<25!(B>72&(B<121)) S M=M+1,M(M)=B
"RTN","PRS8MT",86,0)
 ..I A=1,'PM,B>24&(B<73)!(B>120) S M=M+1,M(M)=B
"RTN","PRS8MT",87,0)
 ..I A=2 S M=M+1,M(M)=B
"RTN","PRS8MT",88,0)
 ..Q
"RTN","PRS8MT",89,0)
 .Q
"RTN","PRS8MT",90,0)
 Q:'$O(M(0))
"RTN","PRS8MT",91,0)
Y ; --- this is where meals get placed in string
"RTN","PRS8MT",92,0)
 F Y=0:0 S Y=$O(M(Y)) Q:Y'>0  D
"RTN","PRS8MT",93,0)
 . N ORIGAC ; original activity code
"RTN","PRS8MT",94,0)
 . S M=M(Y),(X,ORIGAC)=$E(D,M),X=$S(X="J":"A",X=5:$E(DAY(MDY,"P"),M),1:X)
"RTN","PRS8MT",95,0)
 . ; If a 9mo AWS works during Recess don't place meal over that type of time
"RTN","PRS8MT",96,0)
 . I +NAWS=9 D  ; 9mo AWS nurses
"RTN","PRS8MT",97,0)
 . . ; If extra work (UN,OT,CT) was posted over the entire tour including the meal time
"RTN","PRS8MT",98,0)
 . . ; don't include meal time in the W node or you will reduce the extra work count.
"RTN","PRS8MT",99,0)
 . . ; Set X=0 to reduce the Recess count below.
"RTN","PRS8MT",100,0)
 . . I "4OEC"[ORIGAC&($L(ORIGX)=$L($TR(ORIGX,"1235"))) S X=0 Q
"RTN","PRS8MT",101,0)
 . . ;
"RTN","PRS8MT",102,0)
 . . ; If extra work posted over tour time that wasn't covered by Recess it will
"RTN","PRS8MT",103,0)
 . . ; be stored in the r node.  If this time exists, add that time back into the 
"RTN","PRS8MT",104,0)
 . . ; W node instead of the meal time.
"RTN","PRS8MT",105,0)
 . . I "1235"[ORIGAC,"4OEC"[$E(RECESS,M-V(1)+1) D  Q
"RTN","PRS8MT",106,0)
 . . . S D=$E(D,0,M-1)_$E(RECESS,M-V(1)+1)_$E(D,M+1,999)
"RTN","PRS8MT",107,0)
 . . . S ORIGX=$E(ORIGX,1,M-V(1)-1)_$E(RECESS,M-V(1)+1)_$E(ORIGX,M-V(1)+2,999)
"RTN","PRS8MT",108,0)
 . . ;
"RTN","PRS8MT",109,0)
 . . ; For everything else, update D and ORIGX
"RTN","PRS8MT",110,0)
 . . S D=$E(D,0,M-1)_"m"_$E(D,M+1,999)
"RTN","PRS8MT",111,0)
 . . S ORIGX=$E(ORIGX,M-V(1)-1)_"m"_$E(ORIGX,M-V(1)+2,999)
"RTN","PRS8MT",112,0)
 . ;
"RTN","PRS8MT",113,0)
 . ; All employees other than 9mo AWS
"RTN","PRS8MT",114,0)
 . I +NAWS'=9 S D=$E(D,0,M-1)_"m"_$E(D,M+1,999)
"RTN","PRS8MT",115,0)
 . ;
"RTN","PRS8MT",116,0)
 . ; The following line has been updated to include a check for Recess as the 48th piece.
"RTN","PRS8MT",117,0)
 . ; Recess will be designated as a zero (0). 
"RTN","PRS8MT",118,0)
 . S X=$S(X'="M":$F("LSWnAR*U************************V********YXFGD*0",X)-1,1:5)
"RTN","PRS8MT",119,0)
 . ;
"RTN","PRS8MT",120,0)
 . ; Firefighter checks
"RTN","PRS8MT",121,0)
 . I "Ff"[TYP,NH'=480!(NH(1)'=NH(2)) S X=32
"RTN","PRS8MT",122,0)
 . ;I X'=4,CYA2806>0 S CYA2806=CYA2806-1 ; << ADDED-> DROP LUNCH FROM CY ALSO>>
"RTN","PRS8MT",123,0)
 . Q:X'>0
"RTN","PRS8MT",124,0)
 . Q:MDY=0&(M(Y)<96)!(MDY=14&(M(Y)>97))
"RTN","PRS8MT",125,0)
 . S W=$S(MDY<8:1,1:2) I MDY=7&(M(Y)>96) S W=2
"RTN","PRS8MT",126,0)
 . I $P(WK(W),"^",+X)>0 S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)-1 ;subtract
"RTN","PRS8MT",127,0)
 . ;
"RTN","PRS8MT",128,0)
 . ; If Military Leave subtract the mealtime out of the WK(3) array.
"RTN","PRS8MT",129,0)
 . I ORIGAC="M",$P(WK(3),U,11)>0 S $P(WK(3),U,11)=$P(WK(3),U,11)-1
"RTN","PRS8MT",130,0)
 . ;I WPCYA>0 S WPCYA=WPCYA-1 ;lunch from total << AND FROM CA TOTAL >>
"RTN","PRS8MT",131,0)
 . ; PRS*4*40 added 8 (U), 44 (F), 45 (G), 46 (D) to following line
"RTN","PRS8MT",132,0)
 . ; because PRS8AC also increments LU for those types of time
"RTN","PRS8MT",133,0)
 . I +X,"^1^2^6^8^44^45^46^"[("^"_+X_"^") S LU=LU-1 ;reduce leave used
"RTN","PRS8MT",134,0)
 . I +X,"^3^"[("^"_+X_"^"),"P"[TYP S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8MT",135,0)
 . Q
"RTN","PRS8MT",136,0)
 S DAY(MDY,"W")=$E(D,1,96)
"RTN","PRS8MT",137,0)
 S X=$E(D,97,999) I $L(X) D
"RTN","PRS8MT",138,0)
 .I $D(DAY(MDY+1,"W")) S DAY(MDY+1,"W")=X_$E(DAY(MDY+1,"W"),$L(X)+1,999)
"RTN","PRS8MT",139,0)
 .S DAY(MDY,"N")=X
"RTN","PRS8MT",140,0)
 Q
"RTN","PRS8MT",141,0)
 ;
"RTN","PRS8MT",142,0)
SET ; --- set up for processing
"RTN","PRS8MT",143,0)
 K A,B S (A,B,Q,Y)=0
"RTN","PRS8MT",144,0)
 S MT=$G(DAY(MDY,"MT"_S)) I MT'>0 S Q=1 Q  ; mealtime for tour?
"RTN","PRS8MT",145,0)
 S D=DAY(MDY,"W")_$G(DAY(MDY,"N")) ; get daily activity
"RTN","PRS8MT",146,0)
 S N=DAY(MDY,S*S) ; get tour
"RTN","PRS8MT",147,0)
 Q
"RTN","PRS8OC")
0^47^B43489130^B29072439
"RTN","PRS8OC",1,0)
PRS8OC ;HISC/MGD-DECOMPOSITION, ON-CALL ;02/27/07
"RTN","PRS8OC",2,0)
 ;;4.0;PAID;**63,92,112**;Sep 21, 1995;Build 54
"RTN","PRS8OC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8OC",4,0)
 ;
"RTN","PRS8OC",5,0)
 ;The following MUMPS code is used to credit the appropriate
"RTN","PRS8OC",6,0)
 ;categories on the timecard for work performed while On-Call.
"RTN","PRS8OC",7,0)
 ;All hours during which an individual is identified as being
"RTN","PRS8OC",8,0)
 ;On-Call are credited to blocks YD and YH (On Call Hrs) on
"RTN","PRS8OC",9,0)
 ;the timecard.  Hours during an On-Call episode where an
"RTN","PRS8OC",10,0)
 ;individual is actually called in to perform work are credited
"RTN","PRS8OC",11,0)
 ;to blocks YA and YE (Sch CB OT) as appropriate.  This credit
"RTN","PRS8OC",12,0)
 ;is given under the 2-hour minimum rule.  When OT work is
"RTN","PRS8OC",13,0)
 ;performed during On-Call the actual On-Call Hours reported
"RTN","PRS8OC",14,0)
 ;are reduced by the ACTUAL number of hours worked (not by the
"RTN","PRS8OC",15,0)
 ;2-hour minimum).
"RTN","PRS8OC",16,0)
 ;
"RTN","PRS8OC",17,0)
 ;Called by Routines: PRS8ST
"RTN","PRS8OC",18,0)
 ;
"RTN","PRS8OC",19,0)
 ;C = On-Call
"RTN","PRS8OC",20,0)
 ;c = OT during OC
"RTN","PRS8OC",21,0)
 ;t = CT during OC
"RTN","PRS8OC",22,0)
 ;
"RTN","PRS8OC",23,0)
 S (I,D)=$S(T'>96:DAY,1:(DAY+1))
"RTN","PRS8OC",24,0)
 S OC=$G(OC),OC(DAY)=$G(OC(DAY)),OC(DAY+1)=$G(OC(DAY+1)) ;oc variables
"RTN","PRS8OC",25,0)
 S CC=$G(CC),CC(DAY)=$G(CC(DAY)),CC(DAY+1)=$G(CC(DAY+1)) ;CT on OC count
"RTN","PRS8OC",26,0)
 S Y=35,Y(1)=1 D SET
"RTN","PRS8OC",27,0)
 I VAR1="C" D:OC!(CC) OCS ;on-call episode (ot OR ct)
"RTN","PRS8OC",28,0)
 S:"ct"[VAR1 OC=OC+1,OC(D)=OC(D)+1 S:VAR1="t" CC=CC+1,CC(D)=CC(D)+1
"RTN","PRS8OC",29,0)
 I "ct"[VAR1,DAY>0,DAY<15 S CBCK(WK)=CBCK(WK)+1 ;count actual CB hrs
"RTN","PRS8OC",30,0)
 Q:'OK!('$D(OC))
"RTN","PRS8OC",31,0)
 I OC S Y=23 D OCS ;get rest of them
"RTN","PRS8OC",32,0)
 K OC,CC,Y,D Q
"RTN","PRS8OC",33,0)
 ;
"RTN","PRS8OC",34,0)
OCS ; --- set On-Call minimum hours
"RTN","PRS8OC",35,0)
 ;set YA/YE for PPI="W" or "V" else set OT
"RTN","PRS8OC",36,0)
 I +NAWS=0 S Y=$S(CC:7,'DOUB:TOUR+19,1:23)
"RTN","PRS8OC",37,0)
 I +NAWS S Y=$S(CC:7,1:TOUR+19)
"RTN","PRS8OC",38,0)
 ;
"RTN","PRS8OC",39,0)
 N X,Z,DD,TT,CCCNT,NEXTT,OCCNT,TIMECNT
"RTN","PRS8OC",40,0)
 S TT=$S(T>96:T-96,1:T),TIMECNT=0
"RTN","PRS8OC",41,0)
 S X=$E(DAY($S(T>96:DAY+1,1:DAY),"W"),TT)
"RTN","PRS8OC",42,0)
 ;
"RTN","PRS8OC",43,0)
 ; If the current segment is the last of the On-Call OR the last of
"RTN","PRS8OC",44,0)
 ; the On-Call Callback and the next time segment is Unavailable ("-")
"RTN","PRS8OC",45,0)
 ; or not a type of work ("0") check to see if OT/reg sched is prior
"RTN","PRS8OC",46,0)
 ; to on call worked.
"RTN","PRS8OC",47,0)
 ;
"RTN","PRS8OC",48,0)
 S NEXTT=$S(T+1>96:T-95,1:TT+1) ; Next time segment
"RTN","PRS8OC",49,0)
 I "C"[X!(("ct"[X)&("-0"[$E($S(T+1>96:DAY(DAY+1,"W"),1:DAY(DAY,"W")),NEXTT))) D
"RTN","PRS8OC",50,0)
 .K XH S X=0 F Z=1:1:8-(OC(DAY)+$G(OC(DAY+1))) D  Q:"01"[X
"RTN","PRS8OC",51,0)
 ..S DD=OC(DAY)+OC(DAY+1)+Z
"RTN","PRS8OC",52,0)
 ..I TT-DD>0 S X=$E(DAY(DAY,"W"),TT-DD) S:X="O"&($E(DAY(DAY,"HOL"),TT-DD)=2) X="h"
"RTN","PRS8OC",53,0)
 ..E  S X=$E(DAY(DAY-1,"W"),96+T-DD) S:X="O"&($E(DAY(DAY-1,"HOL"),96+T-DD)=2) X="h"
"RTN","PRS8OC",54,0)
 ..I "123nHMLSWNARXYFGD"[X S X=1 Q  ; on call abuts a reg sched TOD.
"RTN","PRS8OC",55,0)
 ..E  I "EOhoscte"[X D  ; on call abuts time worked outside posted TOD.
"RTN","PRS8OC",56,0)
 ...I "ct"'[X S TIMECNT=TIMECNT+1 ; Time already counted in WK(). 
"RTN","PRS8OC",57,0)
 ...S XH=$S(X'="h":0,1:1),X=2
"RTN","PRS8OC",58,0)
 ..E  S X=0
"RTN","PRS8OC",59,0)
 ..Q
"RTN","PRS8OC",60,0)
 .Q
"RTN","PRS8OC",61,0)
 E  D  ; Check to see if OT/reg sched is after on call worked
"RTN","PRS8OC",62,0)
 .K XH S X=0 F Z=1:1:8-(OC(DAY)+$G(OC(DAY+1))) D  Q:"01"[X
"RTN","PRS8OC",63,0)
 ..S DD=OC(DAY)+OC(DAY+1)+Z
"RTN","PRS8OC",64,0)
 ..I T+Z'>96 S X=$E(DAY(DAY,"W"),T+Z) S:X="O"&($E(DAY(DAY,"HOL"),T+Z)=2) X="h"
"RTN","PRS8OC",65,0)
 ..E  S X=$E(DAY(DAY+1,"W"),T-96+Z) S:X="O"&($E(DAY(DAY+1,"HOL"),T-96+Z)=2) X="h"
"RTN","PRS8OC",66,0)
 ..I "123nHMLSWNARXYFGD"[X S X=1 Q  ; on call abuts a reg sched TOD.
"RTN","PRS8OC",67,0)
 ..E  I "EOhoscte"[X D
"RTN","PRS8OC",68,0)
 ...I "ct"'[X S TIMECNT=TIMECNT+1 ; Time already counted in WK(). 
"RTN","PRS8OC",69,0)
 ...S XH=$S(X'="h":0,1:1),X=2
"RTN","PRS8OC",70,0)
 ..E  S X=0
"RTN","PRS8OC",71,0)
 ..Q
"RTN","PRS8OC",72,0)
 .Q
"RTN","PRS8OC",73,0)
 I $G(XH)'="" S:XH=1!'X Z=Z-1,X=2
"RTN","PRS8OC",74,0)
 ;
"RTN","PRS8OC",75,0)
 ; Check if Scheduled Call-Back OT crosses Midnight
"RTN","PRS8OC",76,0)
 ;
"RTN","PRS8OC",77,0)
 I '$D(CRSMID(D)),$E(DAY(DAY,"W"),1)="c",$E(DAY(DAY-1,"W"),96)="c" S FG=0 D  Q:FG=1
"RTN","PRS8OC",78,0)
 .S CRSMID(D)=1
"RTN","PRS8OC",79,0)
 .I OC<7 D  Q:FG=1
"RTN","PRS8OC",80,0)
 ..; crosses midnight, check if its <2 hours, CRSMID variable set to 
"RTN","PRS8OC",81,0)
 ..; only do on segment that cross mid, not others
"RTN","PRS8OC",82,0)
 ..S CNTR=0 F CX=1:1:8-OC S:$E(DAY(DAY-1,"W"),97-CX)="c" CNTR=CNTR+1
"RTN","PRS8OC",83,0)
 ..I OC+CNTR'>8 D
"RTN","PRS8OC",84,0)
 ...S Y(1)=$S(X=1:OC,1:8-CNTR)
"RTN","PRS8OC",85,0)
 ...I +NAWS=0 D CHOL ; Process everyone but AWS nurses
"RTN","PRS8OC",86,0)
 ...I +NAWS D CHOL1 ; Process AWS nurses
"RTN","PRS8OC",87,0)
 ...S (OC,OC(D),CC,CC(D))=0,FG=1
"RTN","PRS8OC",88,0)
 ..Q
"RTN","PRS8OC",89,0)
 ;
"RTN","PRS8OC",90,0)
 ; Check if Comp Time crosses Midnight
"RTN","PRS8OC",91,0)
 ;
"RTN","PRS8OC",92,0)
 I '$D(CRSMID(D)),$E(DAY(DAY,"W"),1)="t",$E(DAY(DAY-1,"W"),96)="t" S FG=0 D  Q:FG=1
"RTN","PRS8OC",93,0)
 .S CRSMID(D)=1
"RTN","PRS8OC",94,0)
 .I OC<7 D  Q:FG=1
"RTN","PRS8OC",95,0)
 ..; crosses midnight, check if its <2 hours, CRSMID variable set to 
"RTN","PRS8OC",96,0)
 ..; only do on segment that cross mid, not others
"RTN","PRS8OC",97,0)
 ..S CNTR=0 F CX=1:1:8-OC S:$E(DAY(DAY-1,"W"),97-CX)="t" CNTR=CNTR+1
"RTN","PRS8OC",98,0)
 ..I OC+CNTR'>8 D
"RTN","PRS8OC",99,0)
 ...S Y(1)=$S(X=1:OC,1:8-CNTR)
"RTN","PRS8OC",100,0)
 ...I +NAWS=0 D CHOL ; Process everyone but AWS nurses
"RTN","PRS8OC",101,0)
 ...I +NAWS D CHOL1 ; Process AWS nurses
"RTN","PRS8OC",102,0)
 ...S (OC,OC(D),CC,CC(D))=0,FG=1
"RTN","PRS8OC",103,0)
 ..Q
"RTN","PRS8OC",104,0)
 ;
"RTN","PRS8OC",105,0)
 I CC>0,CC<OC D  ;SPLIT SEGMENT, MUST DO TWICE (FOR CT THEN FOR OT)
"RTN","PRS8OC",106,0)
 .F I=DAY:1:(DAY+1) I OC(I) D
"RTN","PRS8OC",107,0)
 ..S (OCCNT,CCCNT)=0
"RTN","PRS8OC",108,0)
 ..I X=2,OC(I)+TIMECNT<8 D   ; Add time if 2 hour minimum was not met.
"RTN","PRS8OC",109,0)
 ...S TIMECNT=8-OC(I)-TIMECNT ; Amount of time short of the 2 hour min.
"RTN","PRS8OC",110,0)
 ...;
"RTN","PRS8OC",111,0)
 ...; If TIMECNT is an even number divide needed time equally among the
"RTN","PRS8OC",112,0)
 ...; CT and OT.
"RTN","PRS8OC",113,0)
 ...I TIMECNT#2=0 S CCCNT=TIMECNT/2,OCCNT=TIMECNT/2
"RTN","PRS8OC",114,0)
 ...;
"RTN","PRS8OC",115,0)
 ...; If TIMECNT is not an even number divide the time needed as equally
"RTN","PRS8OC",116,0)
 ...; as possible among the CT and OT w/ remaining 15 minutes going to OC.
"RTN","PRS8OC",117,0)
 ...I TIMECNT#2=1 S CCCNT=TIMECNT\2,OCCNT=(TIMECNT\2)+1
"RTN","PRS8OC",118,0)
 ...;
"RTN","PRS8OC",119,0)
 ..S Y(1)=$S(X=2:CC(I)+CCCNT,X:CC(I),OC(I)>7:CC(I),1:4),Y=7
"RTN","PRS8OC",120,0)
 ..I +NAWS=0 D CHOL ; Process everyone but AWS nurses
"RTN","PRS8OC",121,0)
 ..I +NAWS D CHOL1 ; Process AWS nurses
"RTN","PRS8OC",122,0)
 ..S Y(1)=$S(X=2:OC(I)-CC(I)+OCCNT,X:OC(I)-CC(I),OC(I)>7:OC(I)-CC(I),1:4)
"RTN","PRS8OC",123,0)
 ..S Y=$S('DOUB:TOUR+19,1:23)
"RTN","PRS8OC",124,0)
 ..I +NAWS=0 D CHOL ; Process everyone but AWS nurses
"RTN","PRS8OC",125,0)
 ..I +NAWS D CHOL1 ; Process AWS nurses
"RTN","PRS8OC",126,0)
 ..Q
"RTN","PRS8OC",127,0)
 .Q
"RTN","PRS8OC",128,0)
 E  D  ;NOT SPLIT SEGMENT
"RTN","PRS8OC",129,0)
 .F I=DAY:1:(DAY+1) I OC(I) D
"RTN","PRS8OC",130,0)
 ..I OC(I)<8,X=2 D
"RTN","PRS8OC",131,0)
 ...I T'=96 S OC(I)=8-TIMECNT
"RTN","PRS8OC",132,0)
 ...I T=96,"ct"'[$E(DAY(DAY+1,"W"),1) S OC(I)=8-TIMECNT
"RTN","PRS8OC",133,0)
 ..S Y(1)=$S(X:OC(I),OC(I)>7:OC(I),1:8)
"RTN","PRS8OC",134,0)
 ..I +NAWS=0 D CHOL ; Process everyone but AWS nurses
"RTN","PRS8OC",135,0)
 ..I +NAWS D CHOL1 ; Process AWS nurses
"RTN","PRS8OC",136,0)
 ..Q
"RTN","PRS8OC",137,0)
 .Q
"RTN","PRS8OC",138,0)
 K OC,CC Q
"RTN","PRS8OC",139,0)
 ;
"RTN","PRS8OC",140,0)
CHOL ; --- Check for Holiday Callback
"RTN","PRS8OC",141,0)
 S TMP=Y,Y=0
"RTN","PRS8OC",142,0)
 ; Don't convert Overtime to Comptime
"RTN","PRS8OC",143,0)
 I TMP'=7,$E(ENT,25),$$HOLIDAY^PRS8UT(PY,DFN,+D) S Y=24 ;ot on actual hol
"RTN","PRS8OC",144,0)
 I 'Y,$E($G(DAY(I,"HOL")),$S(T>96:(T-96),1:T)) S Y=TOUR+28 ;holiday callback
"RTN","PRS8OC",145,0)
 I 'Y S Y=TMP
"RTN","PRS8OC",146,0)
 D SET S Y=$S(CC:7,'DOUB:TOUR+19,1:23)
"RTN","PRS8OC",147,0)
 Q
"RTN","PRS8OC",148,0)
 ;
"RTN","PRS8OC",149,0)
SET ; --- set WK array
"RTN","PRS8OC",150,0)
 S W=$S(I<8:1,1:2)
"RTN","PRS8OC",151,0)
 I I<1!(I>14) Q
"RTN","PRS8OC",152,0)
 I Y(1)>32,'DOUB,$P(C0,"^",12)="N",Y'=7 D
"RTN","PRS8OC",153,0)
 .S $P(WK(W),"^",TOUR+15)=$P(WK(W),"^",TOUR+15)+(Y(1)-32)
"RTN","PRS8OC",154,0)
 .S $P(WK(W),"^",Y)=$P(WK(W),"^",Y)+32 ;if FLSA=N set >8 = DA
"RTN","PRS8OC",155,0)
 E  S $P(WK(W),"^",Y)=$P(WK(W),"^",Y)+Y(1)
"RTN","PRS8OC",156,0)
 Q
"RTN","PRS8OC",157,0)
 ;
"RTN","PRS8OC",158,0)
CHOL1 ; Checks for AWS nurses
"RTN","PRS8OC",159,0)
 N HT,J,K,T2ADD
"RTN","PRS8OC",160,0)
 S K=0,TMP=Y,Y=0
"RTN","PRS8OC",161,0)
 S T2ADD=$S(CC:Y(1)-CC,1:Y(1)-OC-CC)
"RTN","PRS8OC",162,0)
 ; Apply normal checks for OT on Hol and Hol Callback
"RTN","PRS8OC",163,0)
 I TMP'=7,$E(ENT,25),$$HOLIDAY^PRS8UT(PY,DFN,+D) S Y=24 ;ot on actual hol
"RTN","PRS8OC",164,0)
 I 'Y,$E($G(DAY(I,"HOL")),$S(T>96:(T-96),1:T)) S Y=TOUR+28 ;holiday callback
"RTN","PRS8OC",165,0)
 I 'Y S Y=TMP
"RTN","PRS8OC",166,0)
 I Y=24!(Y=(TOUR+28)) D SET Q
"RTN","PRS8OC",167,0)
 ; If not OT on Hol or Hol Callback Determine if we are setting OT or CT
"RTN","PRS8OC",168,0)
 S K=$S(Y=7:CC,1:OC)
"RTN","PRS8OC",169,0)
 F J=1:1:K D AWSWK ; Update actual time worked
"RTN","PRS8OC",170,0)
 F J=1:1:T2ADD D AWSWK ; Update time added to reach 2 hour min
"RTN","PRS8OC",171,0)
 Q
"RTN","PRS8OC",172,0)
 ;
"RTN","PRS8OC",173,0)
AWSWK ; Determine what type of time to add based on 8/day and 40/wk
"RTN","PRS8OC",174,0)
 S HT=+$G(^TMP($J,"PRS8",D,"HT"))
"RTN","PRS8OC",175,0)
 I HT'<32 S Y=$S(Y'=7:TOUR+15,1:Y) D SET1 Q
"RTN","PRS8OC",176,0)
 I TH(W)'<160 S Y=$S(Y'=7:TOUR+19,1:Y) D SET1 Q
"RTN","PRS8OC",177,0)
 I HT<32,TH(W)<160 S Y=9 D SET1
"RTN","PRS8OC",178,0)
 Q
"RTN","PRS8OC",179,0)
 ;
"RTN","PRS8OC",180,0)
SET1 ; Set WK array for AWS nurses
"RTN","PRS8OC",181,0)
 S $P(WK(W),"^",Y)=$P(WK(W),"^",Y)+1
"RTN","PRS8OC",182,0)
 Q:HT'<32
"RTN","PRS8OC",183,0)
 S TH=TH+1,TH(WK)=TH(WK)+1
"RTN","PRS8OC",184,0)
 S ^TMP($J,"PRS8",DAY,"HT")=HT+1
"RTN","PRS8OC",185,0)
 Q
"RTN","PRS8PP")
0^51^B69818276^B55184962
"RTN","PRS8PP",1,0)
PRS8PP ;HISC/MRL,WIRMFO/MGD-DECOMP, PREMIUM PAYS ;05/10/07
"RTN","PRS8PP",2,0)
 ;;4.0;PAID;**22,40,75,92,96,112**;Sep 21, 1995;Build 54
"RTN","PRS8PP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8PP",4,0)
 ;
"RTN","PRS8PP",5,0)
 ;This routine is the entry point for determining certain premium
"RTN","PRS8PP",6,0)
 ;pays for an employee.  Included are overtime (OT), 
"RTN","PRS8PP",7,0)
 ;night differential (ND), unscheduled hours (UH), etc.
"RTN","PRS8PP",8,0)
 ;
"RTN","PRS8PP",9,0)
 ;Called by Routines:  PRS8ST
"RTN","PRS8PP",10,0)
 ;
"RTN","PRS8PP",11,0)
 S D=DAY(DAY,"W") ;                Daily activity string.
"RTN","PRS8PP",12,0)
 S W=$S(DAY<8:1,1:2) ;             Week.
"RTN","PRS8PP",13,0)
 I D?1"0"."0" Q  ;                 No activity this date.
"RTN","PRS8PP",14,0)
 S NDC=1,(HT,HTP,HTFFOT)=0 ;       Counter for hrs worked this 
"RTN","PRS8PP",15,0)
 ;                                 day (HT=Hours total).
"RTN","PRS8PP",16,0)
 N HYBRID ;                        HYBRID under P.L 107-135
"RTN","PRS8PP",17,0)
 S HYBRID=$$HYBRID^PRSAENT1($G(DFN))
"RTN","PRS8PP",18,0)
 D ^PRS8HR ;                       calculate Norm hrs first
"RTN","PRS8PP",19,0)
 F M=1:1:96 S VAL=$E(D,M) I VAL'=0 D  ;loop thru minutes of day
"RTN","PRS8PP",20,0)
 .S DH=DAY(DAY,"DH1")
"RTN","PRS8PP",21,0)
 .I TWO,M'<+$P(DAY(DAY,"TWO"),"^",2) S DH=DAY(DAY,"DH2") ;    Daily hrs.
"RTN","PRS8PP",22,0)
 .I NDC,"CWB"'[VAL D ND ;                                        Get ND.
"RTN","PRS8PP",23,0)
 .I TYP["B",+VAL Q  ;                  Baylor get no premium during tod.
"RTN","PRS8PP",24,0)
 .I "1234OosEe"'[VAL Q  ;                 Don't chk for non-work status.
"RTN","PRS8PP",25,0)
 .S X=$E(D,M,96) ;                                     Remainder of day.
"RTN","PRS8PP",26,0)
 .I X?1N.N,X'[4 Q  ;                      No hrs left other than normal.
"RTN","PRS8PP",27,0)
 .I "J123MLSWNARXYOFGD"'[VAL!(VAL="O"&($E(DAY(DAY,"HOL"),M)'=2)) S AV="OosEe" D CALC^PRS8HR
"RTN","PRS8PP",28,0)
 K AV,D,GO,M,NDC,X,X1,J1,J2 Q
"RTN","PRS8PP",29,0)
 ;
"RTN","PRS8PP",30,0)
ND ; --- compute ND
"RTN","PRS8PP",31,0)
 ; Process wagegrade
"RTN","PRS8PP",32,0)
 I TYP["W" D  Q
"RTN","PRS8PP",33,0)
 . ; process WG scheduled time
"RTN","PRS8PP",34,0)
 . I "J23LSARMXYUVFGD"[VAL!(VAL="O"&($E(DAY(DAY,"HOL"),M)=2)) D
"RTN","PRS8PP",35,0)
 . . N DAT,DAYN,FND,M1,NODE,SC,TS
"RTN","PRS8PP",36,0)
 . . ; find tour segment that contains the time and get it's special code
"RTN","PRS8PP",37,0)
 . . S FND=0,SC="" ; FND true if found in schedule, SC = special code 
"RTN","PRS8PP",38,0)
 . . ; look in schedule of current day for M and previous day for M+96
"RTN","PRS8PP",39,0)
 . . ; (in 2day tour, previous day's schedules >96 are Today's activity)
"RTN","PRS8PP",40,0)
 . . F DAYN=DAY,DAY-1 D  Q:FND
"RTN","PRS8PP",41,0)
 . . . S M1=$S(DAYN=DAY:M,1:M+96)
"RTN","PRS8PP",42,0)
 . . . ; loop thru both tours in day
"RTN","PRS8PP",43,0)
 . . . F NODE=1,4 S DAT=$G(^TMP($J,"PRS8",DAYN,NODE)) Q:DAT=""  D  Q:FND
"RTN","PRS8PP",44,0)
 . . . . ; loop thru tour segments in tour
"RTN","PRS8PP",45,0)
 . . . . F TS=1:1:7 Q:$P(DAT,U,(TS-1)*3+1)=""  D  Q:FND
"RTN","PRS8PP",46,0)
 . . . . . ; check if time contained in tour segment
"RTN","PRS8PP",47,0)
 . . . . . I M1'<$P(DAT,U,(TS-1)*3+1),M1'>$P(DAT,U,(TS-1)*3+2) S FND=1,SC=$P(DAT,U,(TS-1)*3+3)
"RTN","PRS8PP",48,0)
 . . ;
"RTN","PRS8PP",49,0)
 . . ; if time not found in any schedule, base SC on value of variable
"RTN","PRS8PP",50,0)
 . . ;   TOUR for Today (or previous day when no scheduled tour Today).
"RTN","PRS8PP",51,0)
 . . I 'FND S SC=$S($G(^TMP($J,"PRS8",DAY,1))=""&(DAY(DAY-1,"TOUR")>1):DAY(DAY-1,"TOUR")+4,1:TOUR+4)
"RTN","PRS8PP",52,0)
 . . Q:"^6^7^"'[(U_SC_U)  ; tour segment not coded for shift 2 or 3
"RTN","PRS8PP",53,0)
 . . S X=(SC-4)+8 ; determine where to store in WK array
"RTN","PRS8PP",54,0)
 . . I $E(ENT,X-4) D SET ; if employee entitled then store result
"RTN","PRS8PP",55,0)
 . ;
"RTN","PRS8PP",56,0)
 . ; process WG unscheduled time
"RTN","PRS8PP",57,0)
 . I VAL=4!(VAL="O") D
"RTN","PRS8PP",58,0)
 . . N T,SD
"RTN","PRS8PP",59,0)
 . . ; unscheduled regular tours for 'shift coverage' that are eligible
"RTN","PRS8PP",60,0)
 . . ;   for shift 2 or 3 differential were saved in "SD" by PRS8EX.
"RTN","PRS8PP",61,0)
 . . S SD=$G(^TMP($J,"PRS8",DAY,"SD"))
"RTN","PRS8PP",62,0)
 . . Q:SD=""
"RTN","PRS8PP",63,0)
 . . ; see if time belongs to a tour saved in "SD" and if so use the
"RTN","PRS8PP",64,0)
 . . ;   associated shift (2 or 3)
"RTN","PRS8PP",65,0)
 . . S SD(1)=0 ; init shift
"RTN","PRS8PP",66,0)
 . . F T=1:3 S SD(0)=$P(SD,U,T,T+2) Q:SD(0)=""!(SD(0)?1."^")  D  Q:SD(1)
"RTN","PRS8PP",67,0)
 . . . I M'<+SD(0),M'>$P(SD(0),"^",2) S SD(1)=$P(SD(0),"^",3)
"RTN","PRS8PP",68,0)
 . . I SD(1) S X=SD(1)+8 I $E(ENT,X-4) D SET
"RTN","PRS8PP",69,0)
 ;
"RTN","PRS8PP",70,0)
 ; Process Other Employees (non-Wage Grade)
"RTN","PRS8PP",71,0)
 ;
"RTN","PRS8PP",72,0)
 ; Not entitled to ND
"RTN","PRS8PP",73,0)
 I '$E(ENT,6) Q
"RTN","PRS8PP",74,0)
 ;
"RTN","PRS8PP",75,0)
 ; not entitled to ND if No Premium Pay tour
"RTN","PRS8PP",76,0)
 I $P(DAY(DAY,1),"^",3)=8 Q
"RTN","PRS8PP",77,0)
 ;
"RTN","PRS8PP",78,0)
 ; check if time segment could be eligible for ND
"RTN","PRS8PP",79,0)
 I $$NOTND(TYP,DAY,M) Q
"RTN","PRS8PP",80,0)
 ;
"RTN","PRS8PP",81,0)
 S AV="J1234ALSRMUEOosecbVXYFGD"
"RTN","PRS8PP",82,0)
 ;
"RTN","PRS8PP",83,0)
 ; Grant ND for time before 6a/after 6p or anytime when nurse/hybrid
"RTN","PRS8PP",84,0)
 ; works tour coverage
"RTN","PRS8PP",85,0)
 I M<25!(M>72)!($E(DAY(DAY,"P"),M)="N"&(TYP["N"!(TYP["H")!(HYBRID))),AV[VAL D
"RTN","PRS8PP",86,0)
 . ; The Hybrids defined in Public Law 107-135 will only receive Night
"RTN","PRS8PP",87,0)
 . ; Differential time for OT and CT worked between 6 p.m. and 6 a.m.
"RTN","PRS8PP",88,0)
 . Q:HYBRID!(PMP'=""&("^S^T^U^V^"[(U_PMP_U)))&(M'<25&(M'>72))
"RTN","PRS8PP",89,0)
 . ; Tour time between 6 p.m. and 6 a.m. counts toward ND
"RTN","PRS8PP",90,0)
 . N DAT,DAYN,FND,M1,NODE,SC,TS,TOT
"RTN","PRS8PP",91,0)
 . ; find tour segment that contains the time and get it's special code
"RTN","PRS8PP",92,0)
 . S FND=0,SC="" ; FND true if found in schedule, SC = special code 
"RTN","PRS8PP",93,0)
 . S TOT="" ; Type Of Time
"RTN","PRS8PP",94,0)
 . ; look in schedule of current day for M and previous day for M+96
"RTN","PRS8PP",95,0)
 . ; (in 2day tour, previous day's schedules >96 are Today's activity)
"RTN","PRS8PP",96,0)
 . F DAYN=DAY,DAY-1 D  Q:FND
"RTN","PRS8PP",97,0)
 . . S M1=$S(DAYN=DAY:M,1:M+96)
"RTN","PRS8PP",98,0)
 . . S DAT=$G(^TMP($J,"PRS8",DAYN,2)) D  Q:FND
"RTN","PRS8PP",99,0)
 . . . ; loop thru tour segments in exceptions
"RTN","PRS8PP",100,0)
 . . . F TS=1:1:7 Q:$P(DAT,U,(TS-1)*4+1)=""  D  Q:FND
"RTN","PRS8PP",101,0)
 . . . . ; check if time contained in exception segment
"RTN","PRS8PP",102,0)
 . . . . I M1'<$P(DAT,U,(TS-1)*4+1),M1'>$P(DAT,U,(TS-1)*4+2) D
"RTN","PRS8PP",103,0)
 . . . . . S TOT=$P(DAT,U,(TS-1)*4+3)
"RTN","PRS8PP",104,0)
 . . . . . ; On-Call and Recess are the only types of exceptions
"RTN","PRS8PP",105,0)
 . . . . . ; where OT, CT and RG can be posted for the same 15 minute
"RTN","PRS8PP",106,0)
 . . . . . ; segment of time, so don't stop searching if you find these.
"RTN","PRS8PP",107,0)
 . . . . . I TOT="ON"!(TOT="RS") S TOT="" Q
"RTN","PRS8PP",108,0)
 . . . . . S FND=1,SC=$P(DAT,U,(TS-1)*4+4)
"RTN","PRS8PP",109,0)
 . . . . . Q
"RTN","PRS8PP",110,0)
 . Q:TOT="OT"&("^11^12^17^"'[(U_SC_U))  ; Pre-Scheduled & Tour Coverage & OT/CT With Premiums
"RTN","PRS8PP",111,0)
 . Q:TOT="CT"&("^12^17^"'[(U_SC_U))     ; Tour Coverage & OT/CT With Premiums
"RTN","PRS8PP",112,0)
 . ; Code 17 - OT/CT with premiums only get ND for 6p-6a
"RTN","PRS8PP",113,0)
 . Q:TOT="OT"!(TOT="CT")!(TOT="RG")&(SC=17)&((M'<25)&(M'>72))
"RTN","PRS8PP",114,0)
 . Q:TOT="RG"&(SC'=7)&(SC'=17)          ; Shift Coverage & OT/CT With Premiums
"RTN","PRS8PP",115,0)
 . S X=10
"RTN","PRS8PP",116,0)
 . ; for 36/40 AWS, premium time resulting from their tour 
"RTN","PRS8PP",117,0)
 . ; will be mapped to Night Differential-AWS (ND/NU) and
"RTN","PRS8PP",118,0)
 . ; Paid at the AAC with the 1872 divisor for the hourly rate (36*52)
"RTN","PRS8PP",119,0)
 . I +NAWS=36,("OEc"'[VAL!(TOT="HW")) S X=51
"RTN","PRS8PP",120,0)
 . D SET
"RTN","PRS8PP",121,0)
 . ; keep leave count since it may need to be backed out by PRS8MSC0
"RTN","PRS8PP",122,0)
 . I "LSRUFGD"[VAL S WKL(WK)=WKL(WK)+1
"RTN","PRS8PP",123,0)
 ;
"RTN","PRS8PP",124,0)
 ; Nurse can get ND for 6a-6p time when part of tour with 4+ hrs in 6p-6a
"RTN","PRS8PP",125,0)
 ; check is made when M=24 (just before 6am) or M=73 (just after 6pm).
"RTN","PRS8PP",126,0)
 ; if tour eligible (4+ hours in 'night' time) then ND is granted for
"RTN","PRS8PP",127,0)
 ; the portion of the tour that falls within the 'day' time.
"RTN","PRS8PP",128,0)
 I TYP["N"!(TYP["H"),M=73!(M=24),AV_"m"[VAL D
"RTN","PRS8PP",129,0)
 . N C,J,Q,X,X1,X2,XD
"RTN","PRS8PP",130,0)
 . ;
"RTN","PRS8PP",131,0)
 . ; quit if 'day' time is for tour coverage since already counted
"RTN","PRS8PP",132,0)
 . I $E(DAY(DAY,"P"),$S(M=73:72,1:25))="N" Q
"RTN","PRS8PP",133,0)
 . ;
"RTN","PRS8PP",134,0)
 . ; first check if tour has at least 4 hours of 'night' (6pm-6am) time
"RTN","PRS8PP",135,0)
 . S XD=$S(M=24:-1,1:1) ; loop direction, [6am back, 6pm forward]
"RTN","PRS8PP",136,0)
 . S X1=M,X2=X1+(XD*15) ; start and stop of 4 hour range
"RTN","PRS8PP",137,0)
 . ; loop thru tour 'night' time - stop if tour ends or after 4 hours
"RTN","PRS8PP",138,0)
 . S C=1 ; init flag, false when tour has less than 4 hours of 'night'
"RTN","PRS8PP",139,0)
 . F J=X1:XD:X2 D  Q:'C
"RTN","PRS8PP",140,0)
 . . I AV_"m"'[$E(D,J) S C=0 Q  ; inappropriate type of time
"RTN","PRS8PP",141,0)
 . . I $$NOTND(TYP,DAY,J) S C=0 Q
"RTN","PRS8PP",142,0)
 . . ; scheduled TOD considered as separate from covered TOD
"RTN","PRS8PP",143,0)
 . . I $E(DAY(DAY,"P"),M)'=$E(DAY(DAY,"P"),J) S C=0 Q
"RTN","PRS8PP",144,0)
 . ;
"RTN","PRS8PP",145,0)
 . Q:'C  ; tour not eligible (less than 4 hours of 'night')
"RTN","PRS8PP",146,0)
 . ;
"RTN","PRS8PP",147,0)
 . ; loop thru day time (6am-6pm) portion of tour and grant ND
"RTN","PRS8PP",148,0)
 . ; don't pay ND for meal-time (m) but continue loop
"RTN","PRS8PP",149,0)
 . S XD=$S(M=24:1,1:-1) ; loop direction [6am forward, 6pm back]
"RTN","PRS8PP",150,0)
 . S X1=M+XD,X2=X1+(47*XD) ; start and stop for day time (12 hours)
"RTN","PRS8PP",151,0)
 . S Q=0 ; init flag, true when end of tour reached
"RTN","PRS8PP",152,0)
 . F J=X1:XD:X2 D  Q:Q
"RTN","PRS8PP",153,0)
 . . I AV_"m"'[$E(D,J) S Q=1 Q  ;    inappropriate time
"RTN","PRS8PP",154,0)
 . . I $$NOTND(TYP,DAY,J) S Q=1 Q
"RTN","PRS8PP",155,0)
 . . ; scheduled TOD considered as separate from covered TOD
"RTN","PRS8PP",156,0)
 . . I $E(DAY(DAY,"P"),M)'=$E(DAY(DAY,"P"),J) S Q=1 Q
"RTN","PRS8PP",157,0)
 . . ; grant ND (unless meal-time, etc.), keep count of leave since it
"RTN","PRS8PP",158,0)
 . . ;   may need to be backed out by PRS8MSC0
"RTN","PRS8PP",159,0)
 . . I AV[$E(D,J) D
"RTN","PRS8PP",160,0)
 . . . S X=10
"RTN","PRS8PP",161,0)
 . . . ; For 36/46 AWS nurses ND for Holiday Worked (HA/HL) and normal
"RTN","PRS8PP",162,0)
 . . . ; tour time will be reported as Night Differential-AWS (ND/NU)
"RTN","PRS8PP",163,0)
 . . . I +NAWS=36 D
"RTN","PRS8PP",164,0)
 . . . . I $E(DAY(DAY,"HOL"),J)=2 S X=51 Q  ; Holiday Worked
"RTN","PRS8PP",165,0)
 . . . . I "OEc"'[VAL S X=51 ; Tour time
"RTN","PRS8PP",166,0)
 . . . D SET
"RTN","PRS8PP",167,0)
 . . . S:"LSRUFGD"[$E(D,J) WKL(WK)=WKL(WK)+1
"RTN","PRS8PP",168,0)
 ;
"RTN","PRS8PP",169,0)
 Q
"RTN","PRS8PP",170,0)
 ;
"RTN","PRS8PP",171,0)
SETJ ; --- set week node (J variable defined)
"RTN","PRS8PP",172,0)
 Q:$E(D,J)="m"
"RTN","PRS8PP",173,0)
 ;
"RTN","PRS8PP",174,0)
SET ; --- actually set the piece
"RTN","PRS8PP",175,0)
 S $P(WK(WK),"^",X)=$P(WK(WK),"^",X)+1
"RTN","PRS8PP",176,0)
 Q
"RTN","PRS8PP",177,0)
 ;
"RTN","PRS8PP",178,0)
NOTND(PRSTY,PRSDY,PRSTM) ; Not Eligible Night Differential
"RTN","PRS8PP",179,0)
 ; in PRSTY  type of employee
"RTN","PRS8PP",180,0)
 ;    PRSDY  day (1-14)
"RTN","PRS8PP",181,0)
 ;    PRSTM  time segment (1-96)
"RTN","PRS8PP",182,0)
 ; returns 0 or 1 (True when not eligible for ND)
"RTN","PRS8PP",183,0)
 ;
"RTN","PRS8PP",184,0)
 N VAL
"RTN","PRS8PP",185,0)
 S VAL=$E(DAY(PRSDY,"W"),PRSTM)
"RTN","PRS8PP",186,0)
 ;
"RTN","PRS8PP",187,0)
 ; not entitled to ND
"RTN","PRS8PP",188,0)
 I ($E(DAY(PRSDY,"P"),PRSTM)=5) Q 1
"RTN","PRS8PP",189,0)
 ;
"RTN","PRS8PP",190,0)
 ; OT on non-premium T&L
"RTN","PRS8PP",191,0)
 I "EOosecb"[VAL,$E(DAY(PRSDY,"P"),PRSTM),VAL'="O"!(VAL="O"&($E(DAY(PRSDY,"HOL"),PRSTM)'=2)) Q 1
"RTN","PRS8PP",192,0)
 ;
"RTN","PRS8PP",193,0)
 ; Nurses do not get ND for OT that is not for ND Tour Coverage
"RTN","PRS8PP",194,0)
 I "Ecb"[VAL!(VAL="O"&'$E(DAY(PRSDY,"HOL"),PRSTM)),PRSTY["N"!(PRSTY["H")!(HYBRID)!("^S^T^U^V^"[(U_PMP_U)),$E(DAY(PRSDY,"P"),PRSTM)'="N" Q 1
"RTN","PRS8PP",195,0)
 ;
"RTN","PRS8PP",196,0)
 ; Baylor gets no ND for work time on regularly scheduled day
"RTN","PRS8PP",197,0)
 I TYP["B","^1^7^8^14^"[("^"_DAY_"^"),"1234ALSRMUNVXYFGD"[VAL Q 1
"RTN","PRS8PP",198,0)
 ;
"RTN","PRS8PP",199,0)
 ; GS Employees do not get ND for OT that is not Pre-Scheduled
"RTN","PRS8PP",200,0)
 I "Ecb"[VAL!(VAL="O"&'$E(DAY(PRSDY,"HOL"),PRSTM)),PRSTY'["N",PRSTY'["H",'HYBRID,("^S^T^U^V^"'[(U_PMP_U)),$E(DAY(PRSDY,"P"),PRSTM)'="n" Q 1
"RTN","PRS8PP",201,0)
 ;
"RTN","PRS8PP",202,0)
 ; Unsch Reg time needs to be Pre-scheduled to get ND
"RTN","PRS8PP",203,0)
 I VAL=4,PRSTY["P"!(PRSTY["I"&(PRSTY["N"!(PRSTY["H"))),"Nn"'[$E(DAY(PRSDY,"P"),PRSTM) Q 1
"RTN","PRS8PP",204,0)
 Q 0 ; did not fail any of the checks
"RTN","PRS8ST")
0^11^B44290795^B26297736
"RTN","PRS8ST",1,0)
PRS8ST ;HISC/MGD-DECOMPOSITION, START-UP ;05/09/07
"RTN","PRS8ST",2,0)
 ;;4.0;PAID;**45,92,102,112**;Sep 21, 1995;Build 54
"RTN","PRS8ST",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8ST",4,0)
 ;
"RTN","PRS8ST",5,0)
 ;This routine is the one which actually gets everything moving.
"RTN","PRS8ST",6,0)
 ;It moves the information from the ^TMP global into a local array
"RTN","PRS8ST",7,0)
 ;[DAY(DAY)] for the three day period it's working with.  It then
"RTN","PRS8ST",8,0)
 ;processes that information internally and, where necessary, by
"RTN","PRS8ST",9,0)
 ;calling certain external processes.
"RTN","PRS8ST",10,0)
 ;
"RTN","PRS8ST",11,0)
 ;Called by Routines:  PRS8SU
"RTN","PRS8ST",12,0)
 ;
"RTN","PRS8ST",13,0)
 K SBY F DAY=1:1:14 D
"RTN","PRS8ST",14,0)
 .K DAY(DAY-2)
"RTN","PRS8ST",15,0)
 .S LP=$S(DAY=1:"0,1,2",1:(DAY+1)),JURY=0
"RTN","PRS8ST",16,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",17,0)
 ..F J=0,1,2,4,10,"CP","DH1","DH2","HOL","ML","MT1","MT2","OFF","P","TOUR","TWO","W","r" D
"RTN","PRS8ST",18,0)
 ...S DAY(DY,J)=$G(^TMP($J,"PRS8",DY,J))
"RTN","PRS8ST",19,0)
 ...;
"RTN","PRS8ST",20,0)
 ...;P 45 INITIALIZE THE "F" NODE HERE BY SIMPLY COPYING THE 
"RTN","PRS8ST",21,0)
 ...;THE "W" NODE FROM TEMP--FOR TESTING PURPOSES.
"RTN","PRS8ST",22,0)
 ...;THE NODE SHOULD BE INITIALIZED BY COPYING THE "F" NODE
"RTN","PRS8ST",23,0)
 ...;FROM THE TEMP GLOBAL.
"RTN","PRS8ST",24,0)
 ...S DAY(DY,"F")=$G(^TMP($J,"PRS8",DY,"W"))
"RTN","PRS8ST",25,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",26,0)
 ..S WK=$S(DY<8:1,1:2)
"RTN","PRS8ST",27,0)
 ..S TOUR=$S(TYP'["W":1,+DAY(DY,"TOUR"):+DAY(DY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",28,0)
 ..D MOVE^PRS8AC
"RTN","PRS8ST",29,0)
 ..S N=DAY(DY,2),WK=$S(DY<8:1,1:2) ;exception node/week
"RTN","PRS8ST",30,0)
 ..I N["UN" S X1="UN" D 2 ;unavailable
"RTN","PRS8ST",31,0)
 ..I N["HX" S X1="HX" D 2 ;holiday excused
"RTN","PRS8ST",32,0)
 ..I N["ON" S X1="ON" D 2 ;on-call
"RTN","PRS8ST",33,0)
 ..I N["SB" S X1="SB" D 2 ;standby
"RTN","PRS8ST",34,0)
 ..; Process the scheduled tours
"RTN","PRS8ST",35,0)
 ..S N=DAY(DY,1),DH=DAY(DY,"DH1"),NN=1 D  I DAY(DY,"TWO") S N=DAY(DY,4),DH=DAY(DY,"DH2"),NN=4 D
"RTN","PRS8ST",36,0)
 ...S QT=0 F PRS8=1:3 S V=$P(N,"^",PRS8,PRS8+2) Q:QT  D
"RTN","PRS8ST",37,0)
 ....N PRS8AFFH S PRS8AFFH=0 ;fire fighter additional hours flag
"RTN","PRS8ST",38,0)
 ....S X=$P(DAY(DY,NN),"^",PRS8,999)
"RTN","PRS8ST",39,0)
 ....I X="" S QT=1 Q  ;nothing left to check
"RTN","PRS8ST",40,0)
 ....I X?1"^"."^" S QT=1 Q  ;only ^ left
"RTN","PRS8ST",41,0)
 ....;
"RTN","PRS8ST",42,0)
 ....; X = 9 is special tour CODE FOR FF ADDTL HRS.
"RTN","PRS8ST",43,0)
 ....; It gets converted to 'f'
"RTN","PRS8ST",44,0)
 ....S X=$P(V,"^",3),VAR=1 I X S VAR=$E("se1BC235f",+X) I '+VAR D ENT Q:Q
"RTN","PRS8ST",45,0)
 ....;if this segment is addt ff hrs then save a variable to signify
"RTN","PRS8ST",46,0)
 ....;that, but convert the time back to a 1 to use in the W node.
"RTN","PRS8ST",47,0)
 ....I "Ff"[TYP,VAR="f" S (PRS8AFFH,VAR)=1
"RTN","PRS8ST",48,0)
 ....;
"RTN","PRS8ST",49,0)
 ....I VAR,TYP'["W" S VAR=$S(VAR=5:5,1:1) ;only wg need shifts
"RTN","PRS8ST",50,0)
 ....S JURY=$G(^TMP($J,"PRS8",DY,2)) I JURY'="" D
"RTN","PRS8ST",51,0)
 .....F J=4,8,12,16,20,24,28 S:$P(JURY,"^",J)=6 JURY=1 Q
"RTN","PRS8ST",52,0)
 ....D ^PRS8AC ;build "W" node
"RTN","PRS8ST",53,0)
 ..; Process the exceptions
"RTN","PRS8ST",54,0)
 ..S N=DAY(DY,2),WK=$S(DY<8:1,1:2) ;exception node/week
"RTN","PRS8ST",55,0)
 ..S QT=0
"RTN","PRS8ST",56,0)
 ..; If there are Recess exceptions, process them first
"RTN","PRS8ST",57,0)
 ..I N["RS" D
"RTN","PRS8ST",58,0)
 ...; Since Recess will reduce hours worked in the week add P to TYP
"RTN","PRS8ST",59,0)
 ...I TYP'["P" S TYP=TYP_"P"
"RTN","PRS8ST",60,0)
 ...F PRS8=1:4:25 S V=$P(N,"^",PRS8,PRS8+3) Q:QT  D
"RTN","PRS8ST",61,0)
 ....Q:$P(V,"^",3)='"RS"
"RTN","PRS8ST",62,0)
 ....I TYP["D",$P(V,"^",3)="" S QT=1 Q  ;doctor
"RTN","PRS8ST",63,0)
 ....I TYP'["D",'+V,$P(V,"^",3)="" S QT=1 Q  ;all others
"RTN","PRS8ST",64,0)
 ....S X=$P(V,"^",3)
"RTN","PRS8ST",65,0)
 ....I "^UN^ON^SB^HX^"'[("^"_X_"^") D ^PRS8EX
"RTN","PRS8ST",66,0)
 ...;
"RTN","PRS8ST",67,0)
 ...; Process all other types of exceptions
"RTN","PRS8ST",68,0)
 ..S QT=0
"RTN","PRS8ST",69,0)
 ..F PRS8=1:4:25 S V=$P(N,"^",PRS8,PRS8+3) Q:QT  D
"RTN","PRS8ST",70,0)
 ...Q:$P(V,"^",3)="RS"
"RTN","PRS8ST",71,0)
 ...I TYP["D",$P(V,"^",3)="" S QT=1 Q  ;doctor
"RTN","PRS8ST",72,0)
 ...I TYP'["D",'+V,$P(V,"^",3)="" S QT=1 Q  ;all others
"RTN","PRS8ST",73,0)
 ...S X=$P(V,"^",3)
"RTN","PRS8ST",74,0)
 ...I "^UN^ON^SB^HX^"'[("^"_X_"^") D ^PRS8EX
"RTN","PRS8ST",75,0)
 ..;
"RTN","PRS8ST",76,0)
 ..S ^TMP($J,"PRS8",DY,"W")=DAY(DY,"W") ;save in ^TMP
"RTN","PRS8ST",77,0)
 ..S ^TMP($J,"PRS8",DY,"P")=DAY(DY,"P") ;save non-prem ot in ^TMP
"RTN","PRS8ST",78,0)
 ..S ^TMP($J,"PRS8",DY,"HOL")=DAY(DY,"HOL") ;holiday
"RTN","PRS8ST",79,0)
 ..S ^TMP($J,"PRS8",DY,"r")=DAY(DY,"r") ; Recess for 9mo AWS nurse
"RTN","PRS8ST",80,0)
 .S WK=$S(DAY<8:1,1:2),OFF=+DAY(DAY,"OFF") ;week/day off
"RTN","PRS8ST",81,0)
 .S TOUR=$S(TYP'["W":1,+DAY(DAY,"TOUR"):+DAY(DAY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",82,0)
 .I TYP["I",DAY>0,DAY<15,$G(DAY(DAY,"DWK")) D  ;days worked
"RTN","PRS8ST",83,0)
 ..S DWK=DWK+1 ;count days worked
"RTN","PRS8ST",84,0)
 ..I CYA,DAY'<CYA S CAMISC=CAMISC+1 ;calendar year adjustment (CA)
"RTN","PRS8ST",85,0)
 .S MDY=+DAY D ^PRS8MT I +DAY=1 S MDY=0 D ^PRS8MT
"RTN","PRS8ST",86,0)
 .Q
"RTN","PRS8ST",87,0)
 ;
"RTN","PRS8ST",88,0)
 ;make DAY array available for prior, current, and next day
"RTN","PRS8ST",89,0)
 F DAY=1:1:14 D
"RTN","PRS8ST",90,0)
 .; I AWS Nurse check to see if hour counts need to be adjusted
"RTN","PRS8ST",91,0)
 .S WK=$S(DAY<8:1,1:2)
"RTN","PRS8ST",92,0)
 .; For each week, TYP should not contain "P" unless:
"RTN","PRS8ST",93,0)
 .; 36/40 AWS has NP or WP
"RTN","PRS8ST",94,0)
 .;   9mo AWS has Recess
"RTN","PRS8ST",95,0)
 .I +NAWS,(DAY=1!(DAY=8)) S TYP=$TR(TYP,"P","") D NAWS
"RTN","PRS8ST",96,0)
 .;
"RTN","PRS8ST",97,0)
 .K DAY(DAY-2)
"RTN","PRS8ST",98,0)
 .S LP=$S(DAY=1:"0,1,2",1:(DAY+1))
"RTN","PRS8ST",99,0)
 .F II=1:1 S DY=$P(LP,",",II) Q:DY=""  D
"RTN","PRS8ST",100,0)
 ..F J=0,1,2,4,10,"CP","DH1","DH2","HOL","ML","MT1","MT2","OFF","P","TOUR","TWO","W","F","r" S DAY(DY,J)=$G(^TMP($J,"PRS8",DY,J))
"RTN","PRS8ST",101,0)
 .;
"RTN","PRS8ST",102,0)
 .S WK=$S(DAY<8:1,1:2),OFF=+DAY(DAY,"OFF") ;week/day off
"RTN","PRS8ST",103,0)
 .S TOUR=$S(TYP'["W":1,+DAY(DAY,"TOUR"):+DAY(DAY,"TOUR"),1:+TOUR(WK))
"RTN","PRS8ST",104,0)
 .;
"RTN","PRS8ST",105,0)
 .I ((TYP["I")!(TYP["P")),DAY>0,DAY<15 D  ;FOR CY
"RTN","PRS8ST",106,0)
 ..I $S('CYA:1,DAY<CYA:1,1:0) Q  ;quit if no calendar year adjustment
"RTN","PRS8ST",107,0)
 ..S IIX=0 I $E(ENT,2)'="D" F II=1:1:$L(DAY(DAY,"W")) D
"RTN","PRS8ST",108,0)
 ...I "4E"[$E(DAY(DAY,"W"),II) S IIX=IIX+1
"RTN","PRS8ST",109,0)
 ...S CYA2806=CYA2806+("ALSUMRVW1235OscXYFGD"[$E(DAY(DAY,"W"),II)) S:(IIX<33)&(FLX'="C"&(TH(WK)+IIX<163))!(FLX="C"&(TH+IIX<323)) CYA2806=CYA2806+("4E"[$E(DAY(DAY,"W"),II))
"RTN","PRS8ST",110,0)
 ...;SF2806 adjustment (CY) (163 & 323 because mt subtracted)
"RTN","PRS8ST",111,0)
 .;
"RTN","PRS8ST",112,0)
 .I CYA,DAY'<CYA,DAY(DAY,"W")["W" D  ;count wop in hours for CA
"RTN","PRS8ST",113,0)
 ..F II=1:1:$L(DAY(DAY,"W")) S WPCYA=WPCYA+("W"=$E(DAY(DAY,"W"),II))
"RTN","PRS8ST",114,0)
 .;
"RTN","PRS8ST",115,0)
 .I TYP'["D",DAY(DAY,"W")'?1"0"."0" D ^PRS8PP ;nightdiff/shift premiums
"RTN","PRS8ST",116,0)
 .;
"RTN","PRS8ST",117,0)
 .F T=1:1:96 S VAR1=$E(DAY(DAY,"W"),T) S OK=0 D
"RTN","PRS8ST",118,0)
 ..I "BbCct"[VAR1 D  ; process on-call/standby
"RTN","PRS8ST",119,0)
 ...I T=96!("BbCct"'[$E(DAY(DAY,"W"),T+1)) S OK=T
"RTN","PRS8ST",120,0)
 ...I DOUB D ^PRS8OC,^PRS8SB Q  ;Prem. Pay of "W" or "V"
"RTN","PRS8ST",121,0)
 ...I VAR1'=""&("Cct"[VAR1) D ^PRS8OC Q  ;compute on-call/2hr minimum
"RTN","PRS8ST",122,0)
 ...I "Bb"[VAR1 D ^PRS8SB ;standby
"RTN","PRS8ST",123,0)
 .I $G(SBY) D UP^PRS8SB
"RTN","PRS8ST",124,0)
 .;
"RTN","PRS8ST",125,0)
 .Q
"RTN","PRS8ST",126,0)
 ;
"RTN","PRS8ST",127,0)
 ;P 45 CODE O firefighters use PRS8MISC to calculated overtime
"RTN","PRS8ST",128,0)
 ;but code R and C firefighters use routine PRS8OTFF.
"RTN","PRS8ST",129,0)
 ;
"RTN","PRS8ST",130,0)
 I "Ff"[TYP&("RC"[PMP) D
"RTN","PRS8ST",131,0)
 .  D ^PRS8OTFF
"RTN","PRS8ST",132,0)
 E  D
"RTN","PRS8ST",133,0)
 .  D ^PRS8MISC
"RTN","PRS8ST",134,0)
 K DH,DY,I,J,JURY,K,K1,LP,N,NN,OFF,PRS8L,TOUR,V,VAR,WG,X,Y,Y1
"RTN","PRS8ST",135,0)
 D ^PRS8WE ;Weekend premiums
"RTN","PRS8ST",136,0)
 D ^PRS8UP ;finish up Misc and non-time related activities
"RTN","PRS8ST",137,0)
 Q
"RTN","PRS8ST",138,0)
 ;
"RTN","PRS8ST",139,0)
ENT ; --- check entitlement to activity for 1 node non-norm hrs
"RTN","PRS8ST",140,0)
 S Q=0
"RTN","PRS8ST",141,0)
 I '$E(ENT,$P("12^28^^29^26^^^29","^",+X)) S Q=1 ;entitlement string
"RTN","PRS8ST",142,0)
 ;PATCH 45: ADD CHECK FOR FIRE FIGHTER ADDITIONAL HOURS
"RTN","PRS8ST",143,0)
 ;SINCE THIS TYPE OF TIME IS NOT IN THE ENTITLEMENT TABLE
"RTN","PRS8ST",144,0)
 ;IT IS SET UP WITH TOUR IND. WITH CODE 9
"RTN","PRS8ST",145,0)
 I "Ff"[TYP,X=9 S Q=0
"RTN","PRS8ST",146,0)
 Q:X'=12  I TYP["W",TOUR>1,$E(ENT,11+TOUR) S Q=0
"RTN","PRS8ST",147,0)
 Q
"RTN","PRS8ST",148,0)
 ;
"RTN","PRS8ST",149,0)
2 ; --- get 2 node unavailable/oncall and standby
"RTN","PRS8ST",150,0)
 F PRS8=1:4:25 S V=$P(N,"^",PRS8,PRS8+2) Q:$P(V,"^",1)=""  D
"RTN","PRS8ST",151,0)
 .S X=$P(V,"^",3) I X=X1 D ^PRS8EX
"RTN","PRS8ST",152,0)
 K PRS8,X,V
"RTN","PRS8ST",153,0)
 Q
"RTN","PRS8ST",154,0)
 ;
"RTN","PRS8ST",155,0)
NAWS ; NAWS Nurse Alternate Work Schedules
"RTN","PRS8ST",156,0)
 ; If any NP or WP has been incurred for a nurse on the 36/40 AWS,
"RTN","PRS8ST",157,0)
 ; adjust their hours worked counts.  40 hrs/wk will now be used to 
"RTN","PRS8ST",158,0)
 ; determine their qualification for OT and CT.  Check piece 16 of
"RTN","PRS8ST",159,0)
 ; 0 node as NH will have been updated to 320 in PRS8SU.
"RTN","PRS8ST",160,0)
 ;
"RTN","PRS8ST",161,0)
 I +NAWS=36 D
"RTN","PRS8ST",162,0)
 .Q:$P(WK(WK),U,3)=""&($P(WK(WK),U,4)="")
"RTN","PRS8ST",163,0)
 .S TH(WK)=144-($P(WK(WK),U,3)+$P(WK(WK),U,4)) ; Adjust Total Hours per week
"RTN","PRS8ST",164,0)
 .S TH=TH(1)+TH(2) ; Adjust Total Hours per pay period
"RTN","PRS8ST",165,0)
 .S NH(WK)=144,NH=288 ; Adjust Normal Hours
"RTN","PRS8ST",166,0)
 .I TYP'["P" S TYP=TYP_"P" ; Make them into a PT employee
"RTN","PRS8ST",167,0)
 .S $E(ENT,2)=1 ; Make employee eligible for UN/US
"RTN","PRS8ST",168,0)
 ;
"RTN","PRS8ST",169,0)
 ; If any Recess has occurred for a nurse on the 9month AWS, adjust 
"RTN","PRS8ST",170,0)
 ; their hours worked counts.  These employees will be treated as PT
"RTN","PRS8ST",171,0)
 ; in determining the eligibility for OT/CT.
"RTN","PRS8ST",172,0)
 ;
"RTN","PRS8ST",173,0)
 I +NAWS=9 D
"RTN","PRS8ST",174,0)
 .Q:$P(WK(WK),U,48)=""
"RTN","PRS8ST",175,0)
 .S TH(WK)=TH(WK)-$P(WK(WK),U,48) ; Adjust total hours per week
"RTN","PRS8ST",176,0)
 .S TH=TH(1)+TH(2) ; Adjust Total Hours
"RTN","PRS8ST",177,0)
 .I TYP'["P" S TYP=TYP_"P" ; Adjust TYP to represent a PT employee
"RTN","PRS8ST",178,0)
 Q
"RTN","PRS8SU")
0^12^B23008538^B21540884
"RTN","PRS8SU",1,0)
PRS8SU ;HISC/MRL-DECOMPOSITION, SET-UP ;01/11/07
"RTN","PRS8SU",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRS8SU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8SU",4,0)
 ;
"RTN","PRS8SU",5,0)
 ;This routine sets up various data elements required to process
"RTN","PRS8SU",6,0)
 ;a decomp.  The ^TMP array is built for each day of the
"RTN","PRS8SU",7,0)
 ;pay period (1-14) and includes tour information, exceptions,
"RTN","PRS8SU",8,0)
 ;holiday information, etc.  All times are converted to 15-minute
"RTN","PRS8SU",9,0)
 ;increments in this routine (the number of 15-minute increments
"RTN","PRS8SU",10,0)
 ;into the day).  Additionally, the credit tour for WG
"RTN","PRS8SU",11,0)
 ;employees is determined in this routine.
"RTN","PRS8SU",12,0)
 ;
"RTN","PRS8SU",13,0)
 ;Called by Routines:  PRS8DR
"RTN","PRS8SU",14,0)
 ;
"RTN","PRS8SU",15,0)
 K ^TMP($J,"PRS8")
"RTN","PRS8SU",16,0)
 K D,DAY F DAY=0:1:15 D
"RTN","PRS8SU",17,0)
 .I 'CYA,DAY>1,DAY<15,$E($P(PPD,"^",DAY),4,7)="0101" S CYA=DAY
"RTN","PRS8SU",18,0)
 .S P=0 I 'DAY S P=+PPD(0),D=14 ;last day of previous pp
"RTN","PRS8SU",19,0)
 .I DAY=15 S P=+PPD(15),D=1 ;first day of next pp
"RTN","PRS8SU",20,0)
 .I P S ZZ=$S(D=14:0,1:15)
"RTN","PRS8SU",21,0)
 .I 'P S P=+PY,(ZZ,D)=+DAY
"RTN","PRS8SU",22,0)
 .S W=$S(D<8:1,1:2) K DADRFM S DADRFM=1
"RTN","PRS8SU",23,0)
 .S TWO=0 F N=0,1,4,2,10 S Z=$G(^PRST(458,+P,"E",+DFN,"D",+D,N)) D
"RTN","PRS8SU",24,0)
 ..S (N14,NDAY,LAST,QT)=0,D(N)=Z,N1=$S(N=2:4,1:3)
"RTN","PRS8SU",25,0)
 ..I N=0,$S(ZZ<15:1,1:0) F J=2,13 I +$P(D(0),"^",J) D
"RTN","PRS8SU",26,0)
 ...S X=+$P(D(0),"^",$S(J=2:8,1:14)) Q:'X  ;normal hours
"RTN","PRS8SU",27,0)
 ...I DAY'=0 S X=X\.25 S NH(W)=NH(W)+X ;increment NH
"RTN","PRS8SU",28,0)
 ...S Z1=Z,Z=X,D1=D,X="DH"_$S(J=2:1,1:2) D SET S Z=Z1 ;save NH
"RTN","PRS8SU",29,0)
 ...S X=+$P(D(0),"^",J)
"RTN","PRS8SU",30,0)
 ...S X=+$P($G(^PRST(457.1,+X,0)),"^",3) Q:'X  ;mltime
"RTN","PRS8SU",31,0)
 ...S X=X\15,MT($S(J=2:1,1:2))=X ;save mltime
"RTN","PRS8SU",32,0)
 ...I X S X1=Z,Z=X,D1=D,X="MT"_$S(J=2:1,1:2) D SET S Z=X1
"RTN","PRS8SU",33,0)
 ..I "^1^2^4^"[("^"_N_"^") F K=1:N1 S V=$P(Z,"^",K,K+1) Q:QT  D
"RTN","PRS8SU",34,0)
 ...S X=$P(Z,U,K,999) S:X?1"^"."^"!(X="")!(N14=1) QT=1 I QT!($P(Z,U,K)="") Q
"RTN","PRS8SU",35,0)
 ...S:K=1 (NDAY,LAST)=0 F K1=1,2 S X=$P(V,"^",K1),(Y,Y1)=K1-1 I X'="" D
"RTN","PRS8SU",36,0)
 ....S FLAG=1 I N=2&(K1=1)&("^HW^"[("^"_$P(Z,"^",K+2)_"^")) S FLAG=$S(NDAY=1!(LAST>96)&("^HW^"[("^"_$P(Z,"^",K+2)_"^"))&((X["A")!(X["MID")):0,1:1),NDAY=0
"RTN","PRS8SU",37,0)
 ....S:$P(D(0),"^",14)'=""&(X="MID")&(LAST=96)&(N=2)&(K1=1) FLAG=0 S:N=2&(K1=1)&(FLAG=1) (NDAY,LAST)=0 S Y=K1-1 D 15
"RTN","PRS8SU",38,0)
 ....I N=2,"^RG^OT^CT^ON^SB^HW^"'[("^"_$P(Z,"^",K+2)_"^") D
"RTN","PRS8SU",39,0)
 .....S Y=+$O(DADRFM("S",(-X-.01))),Y1=+$O(DADRFM("F",(X-.01)))
"RTN","PRS8SU",40,0)
 .....I $G(DADRFM("S",Y))'=$G(DADRFM("F",Y1)) S X=X+96
"RTN","PRS8SU",41,0)
 .....Q
"RTN","PRS8SU",42,0)
 ....S $P(Z,"^",K+(K1-1))=X ;15-minute conversion
"RTN","PRS8SU",43,0)
 ....I K1=1,N=1!(N=4) S DADRFM("S",-X)=DADRFM
"RTN","PRS8SU",44,0)
 ....I K1=2,N=1!(N=4) S DADRFM("F",X)=DADRFM,DADRFM=DADRFM+1
"RTN","PRS8SU",45,0)
 ....I K1=2,X>96,N'=2 S Y=$P(Z,"^",(K+K1)) I Y=""!("12345"'[Y) S X=X-96 D
"RTN","PRS8SU",46,0)
 .....I "^0^7^14^"'[("^"_+ZZ_"^") Q
"RTN","PRS8SU",47,0)
 .....I $G(^TMP($J,"PRS8",DAY,"MT1"))>1 S X=X-$G(^TMP($J,"PRS8",DAY,"MT1"))
"RTN","PRS8SU",48,0)
 .....I ZZ=0!(ZZ=7) S NH($S('ZZ:1,1:2))=NH($S('ZZ:1,1:2))+X
"RTN","PRS8SU",49,0)
 .....Q:'ZZ  ;already moved previous time to this pp
"RTN","PRS8SU",50,0)
 .....S NH($S(D=7:1,1:2))=NH($S(D=7:1,1:2))-X
"RTN","PRS8SU",51,0)
 .....Q
"RTN","PRS8SU",52,0)
 ....Q
"RTN","PRS8SU",53,0)
 ...I N=4,Z?1AN.E!(Z?1"^".AN) D  ;2-tour day
"RTN","PRS8SU",54,0)
 ....I +D(1)'>+Z S TWO=1_"^"_+Z ;early tour first
"RTN","PRS8SU",55,0)
 ....E  S TWO=2_"^"_+D(1) ;late tour first
"RTN","PRS8SU",56,0)
 ....Q:+TWO=1  ;we're gonna switch 1&4 nodes if necessary now
"RTN","PRS8SU",57,0)
 ....S X1=^TMP($J,"PRS8",DAY,1),D1=D,X=1,D(1)=Z D SET ;move 4 node to 1
"RTN","PRS8SU",58,0)
 ....S Z=X1,N14=1 K X,X1 ;this will move 1 node to 4
"RTN","PRS8SU",59,0)
 ..S D(N)=Z,D1=D,X=N D SET
"RTN","PRS8SU",60,0)
 .K DADRFM,MT1,MT2
"RTN","PRS8SU",61,0)
 .S Z=TWO,D1=D,X="TWO" D SET
"RTN","PRS8SU",62,0)
 .S Z="",$P(Z,"0",97)="",D1=D,X="W" D SET ;activity string
"RTN","PRS8SU",63,0)
 .S X="HOL" D SET ;save holiday string
"RTN","PRS8SU",64,0)
 .S X="P" D SET ;premium node
"RTN","PRS8SU",65,0)
 .S X="r" D SET ;Recess node
"RTN","PRS8SU",66,0)
 .S X=D(0),OFF=0 I $P(X,"^",2)=1 S OFF=1 ;day off
"RTN","PRS8SU",67,0)
 .S Z=OFF,X="OFF" D SET
"RTN","PRS8SU",68,0)
 .I +TWO=2 S MT2=$G(^TMP($J,"PRS8",D1,"MT2")),MT1=$G(^TMP($J,"PRS8",D1,"MT1")),^TMP($J,"PRS8",D1,"MT2")=MT1,^TMP($J,"PRS8",D1,"MT1")=MT2
"RTN","PRS8SU",69,0)
 .I TYP["W" D  ; -- compute credit tour for WG
"RTN","PRS8SU",70,0)
 ..S X=D(0) I DAY=0 S (L,T)=0
"RTN","PRS8SU",71,0)
 ..I $P(X,"^",3) S X=$G(^PRST(457.1,+$P(X,"^",4),1)) ;temp tour
"RTN","PRS8SU",72,0)
 ..E  S X=D(1) ;not temporary
"RTN","PRS8SU",73,0)
 ..S S=0 F J=1,4 Q:D(J)=""  F I=3:3:28 Q:S!($P(D(J),"^",(I-2))="")  D
"RTN","PRS8SU",74,0)
 ...I "^6^7^"[("^"_+$P(D(J),"^",I)_"^") S S=+$P(D(J),"^",I)-4
"RTN","PRS8SU",75,0)
 ..I 'OFF S:'S S=1 S:(DAY>0)&(DAY<15) L=S ;credit tour
"RTN","PRS8SU",76,0)
 ..I DAY>0,DAY<15 D
"RTN","PRS8SU",77,0)
 ...I 'T S T=+S
"RTN","PRS8SU",78,0)
 ...I S S T=S ;T=credit tour on days off
"RTN","PRS8SU",79,0)
 ..S Z=S S:TYP'["W"&(Z>1) Z=1 S D1=DAY,X="TOUR" D SET
"RTN","PRS8SU",80,0)
 ..I DAY=7!(DAY=14) S TOUR((DAY\7))=$S(T:T,1:1),T=0 ;save tour
"RTN","PRS8SU",81,0)
 I TYP["B" S NH=320,(NH(1),NH(2))=160,TH=192,(TH(1),TH(2))=96 ; Baylor NH=40 hrs to mimic full time, TH = 24 hrs for reality
"RTN","PRS8SU",82,0)
 E  S TH=NH,TH(1)=NH(1),TH(2)=NH(2) ;total hrs for pp
"RTN","PRS8SU",83,0)
 ; 
"RTN","PRS8SU",84,0)
 ; Update NH for the nurses on the 36/40 AWS
"RTN","PRS8SU",85,0)
 I "KM"[$E(AC,1),$E(AC,2)=1,NH=288 S NH=320,(NH(1),NH(2))=160,TH=320,(TH(1),TH(2))=160
"RTN","PRS8SU",86,0)
 ;
"RTN","PRS8SU",87,0)
 I TYP["W",L>1 S $P(WK(3),"^",3)=L ;last tour (IN) in misc for WG
"RTN","PRS8SU",88,0)
 S VALOLD=$G(^PRST(458,+PY,"E",+DFN,5)) ;existing decomp
"RTN","PRS8SU",89,0)
 K D,D1,DAY,NDAY,FLAG,J,K,K1,L,LAST,MT,N,N1,N14,P,QT,T,V,W,X,Y,Y1,Z
"RTN","PRS8SU",90,0)
 G ^PRS8ST ;start decomp
"RTN","PRS8SU",91,0)
 ;
"RTN","PRS8SU",92,0)
15 ; --- convert time to 15-minute increments
"RTN","PRS8SU",93,0)
 ;
"RTN","PRS8SU",94,0)
 ; Need to conditionally set Y $S(Y=0 mid=00:00, y=1: mid=24:00)
"RTN","PRS8SU",95,0)
 ; based on whether exception is within or outside the tour.
"RTN","PRS8SU",96,0)
 D MIL^PRSATIM ;convert to military (24hr) time
"RTN","PRS8SU",97,0)
 I +Y<1000 S Y=$E("0000",0,4-$L(Y))_Y
"RTN","PRS8SU",98,0)
 S X=(+$E(Y,1,2)*4)+($E(Y,3,4)\15)
"RTN","PRS8SU",99,0)
 I 'Y1 S X=X+1 ; Add 15 minutes to start time
"RTN","PRS8SU",100,0)
 I X<LAST S X=X+96,NDAY=1 ;new day
"RTN","PRS8SU",101,0)
 S LAST=X Q
"RTN","PRS8SU",102,0)
 ;
"RTN","PRS8SU",103,0)
SET ; --- save value (Z) in ^TMP($J,"PRS8",DAY,X)
"RTN","PRS8SU",104,0)
 ;
"RTN","PRS8SU",105,0)
 S D1=+ZZ
"RTN","PRS8SU",106,0)
 S ^TMP($J,"PRS8",D1,X)=Z Q
"RTN","PRS8SU",107,0)
 ;
"RTN","PRS8SU",108,0)
TAL ; --- T&L Unit (whole zeroth node)
"RTN","PRS8SU",109,0)
 ;
"RTN","PRS8SU",110,0)
 S X=$O(^PRST(455.5,"B",X,0))
"RTN","PRS8SU",111,0)
 S X=$G(^PRST(455.5,+X,0)) I $E(X)="" S X=""
"RTN","PRS8VW")
0^13^B15727436^B13947007
"RTN","PRS8VW",1,0)
PRS8VW ;HISC/MRL-DECOMPOSITION, VIEW RESULTS ;03/22/07
"RTN","PRS8VW",2,0)
 ;;4.0;PAID;**2,6,27,45,112**;Sep 21, 1995;Build 54
"RTN","PRS8VW",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8VW",4,0)
 ;
"RTN","PRS8VW",5,0)
 ;This routine is used to view the results of the decomposition.
"RTN","PRS8VW",6,0)
 ;The variables VAL and VALOLD must be passed.  VAL is the current
"RTN","PRS8VW",7,0)
 ;decomposition string.  VALOLD, which may be null, is the results
"RTN","PRS8VW",8,0)
 ;of a previous decomposition run (what's in the 5 node of file 458
"RTN","PRS8VW",9,0)
 ;prior to running decomposition).
"RTN","PRS8VW",10,0)
 ;
"RTN","PRS8VW",11,0)
 ;Called by Routines:  PRS8, PRS8DR
"RTN","PRS8VW",12,0)
 S (NEW,VAL)=$G(VAL),(OLD,VALOLD)=$G(VALOLD)
"RTN","PRS8VW",13,0)
 N DASH1,DASH2
"RTN","PRS8VW",14,0)
 S $P(DASH1,"-",79)="-",$P(DASH2,"=",79)="="
"RTN","PRS8VW",15,0)
 I +$E(NEW,2,4) S NEW=$E(VAL,33,999) ; 33rd position because CP field
"RTN","PRS8VW",16,0)
 I +$E(OLD,2,4) S OLD=$E(VALOLD,33,999) ;is added(either "C","F"or" ")
"RTN","PRS8VW",17,0)
 D E
"RTN","PRS8VW",18,0)
 W @IOF
"RTN","PRS8VW",19,0)
 I "C"'[$E(IOST) D
"RTN","PRS8VW",20,0)
 .S X="Decomposition of Time" W ?(80-$L(X)/2),X,!
"RTN","PRS8VW",21,0)
 .D NOW^%DTC S Y=% X ^DD("DD")
"RTN","PRS8VW",22,0)
 .S X=$G(^VA(200,+$G(DUZ),0)),TR="User:  "_$S($P(X,"^",1)'="":$P(X,"^",1),1:"Unknown")
"RTN","PRS8VW",23,0)
 .S TR=TR_"                                                                               "
"RTN","PRS8VW",24,0)
 .S X="Run Date: "_Y,TR=$E(TR,1,(79-$L(X)))_X
"RTN","PRS8VW",25,0)
 S X=$P(C0,"^",1)_" [SSN: "_$P(C0,"^",9)_"]" W !,X
"RTN","PRS8VW",26,0)
 S X="Pay Period: "_(^PRST(458,+PY,0)) W ?(79-$L(X)),$P(X,"^",1)
"RTN","PRS8VW",27,0)
 D CTID
"RTN","PRS8VW",28,0)
 W !,DASH2
"RTN","PRS8VW",29,0)
 W !,"Loc.",?10,"Data Element",?44,"Code",?52,"Old Value",?67,"New Value"
"RTN","PRS8VW",30,0)
 W !,"----",?10,"------------",?44,"----",?52,"---------",?67,"---------"
"RTN","PRS8VW",31,0)
 K I,L,X,USED
"RTN","PRS8VW",32,0)
 D ^PRS8VW1
"RTN","PRS8VW",33,0)
 D STUB
"RTN","PRS8VW",34,0)
 I "C"'[$E(IOST) D
"RTN","PRS8VW",35,0)
 .W !,DASH1
"RTN","PRS8VW",36,0)
 .W !,TR
"RTN","PRS8VW",37,0)
 D ONE^PRS8CV,^%ZISC Q
"RTN","PRS8VW",38,0)
 ;
"RTN","PRS8VW",39,0)
CERT ; entry point to show supervisor result of decomp before certifying
"RTN","PRS8VW",40,0)
 N DASH1,DASH2
"RTN","PRS8VW",41,0)
 S $P(DASH1,"-",79)="-",$P(DASH2,"=",79)="="
"RTN","PRS8VW",42,0)
 S (NEW,VAL)=$G(VAL)
"RTN","PRS8VW",43,0)
 I +$E(NEW,2,4) S NEW=$E(VAL,33,999) ;because CP field is added to STUB
"RTN","PRS8VW",44,0)
 D E2
"RTN","PRS8VW",45,0)
 W @IOF
"RTN","PRS8VW",46,0)
 I "C"'[$E(IOST) D
"RTN","PRS8VW",47,0)
 .S X="Decomposition of Time" W ?(80-$L(X)/2),X,!
"RTN","PRS8VW",48,0)
 .D NOW^%DTC S Y=% X ^DD("DD")
"RTN","PRS8VW",49,0)
 .S X=$G(^VA(200,+$G(DUZ),0)),TR="User:  "_$S($P(X,"^",1)'="":$P(X,"^",1),1:"Unknown")
"RTN","PRS8VW",50,0)
 .S TR=TR_"                                                                               "
"RTN","PRS8VW",51,0)
 .S X="Run Date: "_Y,TR=$E(TR,1,(79-$L(X)))_X
"RTN","PRS8VW",52,0)
 S H="PAY PERIOD SUMMARY" W !,$J(H,40+($L(H)/2)),!
"RTN","PRS8VW",53,0)
 S X=$P(C0,"^",1)_" [SSN: "_$E($P(C0,"^",9))_"XXXX"_$E($P(C0,"^",9),6,9)_"]" W !,X
"RTN","PRS8VW",54,0)
 S X="Pay Period: "_(^PRST(458,+PY,0)) W ?(79-$L(X)),$P(X,"^",1)
"RTN","PRS8VW",55,0)
 D CTID
"RTN","PRS8VW",56,0)
 W !,DASH2
"RTN","PRS8VW",57,0)
 W !
"RTN","PRS8VW",58,0)
 K I,L,X,USED
"RTN","PRS8VW",59,0)
 D ^PRS8VW2
"RTN","PRS8VW",60,0)
 I "C"'[$E(IOST) D
"RTN","PRS8VW",61,0)
 .W !,DASH1
"RTN","PRS8VW",62,0)
 .W !,TR
"RTN","PRS8VW",63,0)
 K H,R,Z Q
"RTN","PRS8VW",64,0)
E2 ; --- create E array
"RTN","PRS8VW",65,0)
 S E(1)="ANSKWDNOAURTCECUUNNANBSPSASBSCDADBDCTFOAOBOCYAOKOMRARBRCHAHBHCPTPAONYDHDVCEAEBTATCFAFCADNTRSSRSDND"
"RTN","PRS8VW",66,0)
 S E(2)="ALSLWPNPABRLCTCOUSNRNSSQSESFSGDEDFDGTGOEOFOGYEOSOURERFRGHLHMHNPHPBCLYHHOVSECEDTBTDFBFDAFNHRNSSSHNU"
"RTN","PRS8VW",67,0)
 S E(3)="NLDWMLCAPCCYFE" Q
"RTN","PRS8VW",68,0)
STUB ; --- show stub record
"RTN","PRS8VW",69,0)
 S X1=$G(HDR),X2=$E(VAL,1,32)
"RTN","PRS8VW",70,0)
 I X1="" S X1=$E(VALOLD,1,32)
"RTN","PRS8VW",71,0)
 I X1="" S X1=X2
"RTN","PRS8VW",72,0)
 I $L(X1)<$L(X2) S X1=X2
"RTN","PRS8VW",73,0)
 W !!,"STUB RECORD >>>>> ",$S(X1'="":X1,1:"Not Available At this Time...") Q
"RTN","PRS8VW",74,0)
 ;
"RTN","PRS8VW",75,0)
E ; --- create E array
"RTN","PRS8VW",76,0)
 S E(1)="ANSKWDNOAURTCECUUNNANBSPSASBSCDADBDCTFOAOBOCYAOKOMRARBRCHAHBHCPTPAONYDHDVCEAEBTATCFAFCADNTRSSRSDND"
"RTN","PRS8VW",77,0)
 S E(2)="ALSLWPNPABRLCTCOUSNRNSSQSESFSGDEDFDGTGOEOFOGYEOSOURERFRGHLHMHNPHPBCLYHHOVSECEDTBTDFBFDAFNHRNSSSHNU"
"RTN","PRS8VW",78,0)
 S E(3)="NLDWINTLLULNLDDTTOLAMLCAPCCYRRFFFECD" Q
"RTN","PRS8VW",79,0)
CTID ; compressed tour indicator display
"RTN","PRS8VW",80,0)
 ; in - PY (pay period ien), DFN (employee ien)
"RTN","PRS8VW",81,0)
 N FLX,FLXP
"RTN","PRS8VW",82,0)
 S FLX=$P($G(^PRST(458,+PY,"E",DFN,0)),U,6) ; for current pay period
"RTN","PRS8VW",83,0)
 S FLXP=$P($G(^PRST(458,+PY-1,"E",DFN,0)),U,6) ; for previous pay period
"RTN","PRS8VW",84,0)
 I FLX]"",FLX'="0" D
"RTN","PRS8VW",85,0)
 . W !,"This is a ",$$EXTERNAL^DILFD(458.01,5,"",FLX)," tour!"
"RTN","PRS8VW",86,0)
 I FLX]"",FLXP]"",FLX'=FLXP D
"RTN","PRS8VW",87,0)
 . W !,"Note: The Compressed Tour Indicator has been changed since"
"RTN","PRS8VW",88,0)
 . W !,"      the previous pay period (from "
"RTN","PRS8VW",89,0)
 . W $$EXTERNAL^DILFD(458.01,5,"",FLXP)
"RTN","PRS8VW",90,0)
 . W " to ",$$EXTERNAL^DILFD(458.01,5,"",FLX),")."
"RTN","PRS8VW",91,0)
 Q
"RTN","PRS8VW1")
0^14^B4032424^B8775754
"RTN","PRS8VW1",1,0)
PRS8VW1 ;HISC/MRL-DECOMPOSITION, VIEW RESULTS, CONT. ;01/23/07
"RTN","PRS8VW1",2,0)
 ;;4.0;PAID;**6,35,45,69,112**;Sep 21, 1995;Build 54
"RTN","PRS8VW1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8VW1",4,0)
 ;
"RTN","PRS8VW1",5,0)
 ;This routine is used to view the results of the decomposition.
"RTN","PRS8VW1",6,0)
 ;It is a continuation of routine ^PRS8VW.
"RTN","PRS8VW1",7,0)
 ;
"RTN","PRS8VW1",8,0)
 ;See routine PRS8VW2 at label TYP for type of time
"RTN","PRS8VW1",9,0)
 ;text displayed from this routine.
"RTN","PRS8VW1",10,0)
 ;
"RTN","PRS8VW1",11,0)
 ;Called by Routines:  PRS8VW1
"RTN","PRS8VW1",12,0)
 ;
"RTN","PRS8VW1",13,0)
 S CHECK=0
"RTN","PRS8VW1",14,0)
 ;
"RTN","PRS8VW1",15,0)
EN ; --- entry point from PRS8CK1
"RTN","PRS8VW1",16,0)
 S E=E(1),W="Wk-1",LOC=1 D SHOW
"RTN","PRS8VW1",17,0)
 S E=E(2),W="Wk-2",LOC=2 D SHOW
"RTN","PRS8VW1",18,0)
 S E=E(3),W="Misc",LOC=0 D SHOW
"RTN","PRS8VW1",19,0)
 I 'CHECK,"C"'[$E(IOST) D
"RTN","PRS8VW1",20,0)
 .W !,DASH1
"RTN","PRS8VW1",21,0)
 .W !,TR
"RTN","PRS8VW1",22,0)
 K %,CHECK,D,E,I,L,LOC,USED,W,X,Y Q
"RTN","PRS8VW1",23,0)
 ;
"RTN","PRS8VW1",24,0)
SHOW ; --- show information
"RTN","PRS8VW1",25,0)
 F I=1:2 S X=$E(E,I,I+1) Q:X=""  D
"RTN","PRS8VW1",26,0)
 .I $D(USED(X)) Q
"RTN","PRS8VW1",27,0)
 .S USED(X)=""
"RTN","PRS8VW1",28,0)
 .S X(1)=$F(OLD,X),X(2)=$F(NEW,X) ; try to find time code in TT8B
"RTN","PRS8VW1",29,0)
 .I 'CHECK,'X(1),'X(2) Q  ;not in either string
"RTN","PRS8VW1",30,0)
 .I CHECK S LOC(1)=(I\2+1) S:'LOC LOC(1)=LOC(1)+50 D
"RTN","PRS8VW1",31,0)
 ..S FOUND(LOC(1))=$G(FOUND(LOC(1)))
"RTN","PRS8VW1",32,0)
 ..S $P(FOUND(LOC(1)),"^",$S(LOC<2:1,1:4))=X
"RTN","PRS8VW1",33,0)
 .S Y=$P($T(@($E(X)_"^PRS8VW2")),";;",2)
"RTN","PRS8VW1",34,0)
 .S Y(1)=$F(Y,$E(X,2)_":")
"RTN","PRS8VW1",35,0)
 .S Y=$P($E(Y,Y(1),999),":",1,2)
"RTN","PRS8VW1",36,0)
 .I 'CHECK W !,W,?10,$P($T(TYP+Y^PRS8VW2),";;",2),?45,X
"RTN","PRS8VW1",37,0)
 .S X=X(1),X1=52 D CON
"RTN","PRS8VW1",38,0)
 .S X=X(2),X1=67 D CON
"RTN","PRS8VW1",39,0)
 Q
"RTN","PRS8VW1",40,0)
 ;
"RTN","PRS8VW1",41,0)
CON ; --- convert to proper format
"RTN","PRS8VW1",42,0)
 I '+X S X=$E("00000000000",1,+$P(Y,":",2))
"RTN","PRS8VW1",43,0)
 I X,X1=52 S (X,Z)=$E(OLD,X(1),X(1)+$P(Y,":",2)-1)
"RTN","PRS8VW1",44,0)
 I X,X1=67 S:'$D(Z) Z="" S X=$E(NEW,X(2),X(2)+$P(Y,":",2)-1)
"RTN","PRS8VW1",45,0)
 I 'CHECK W ?X1,$J(X,9) D  Q
"RTN","PRS8VW1",46,0)
 .I OLD=""!(NEW="") Q
"RTN","PRS8VW1",47,0)
 .I X1=67,Z'="",X'=Z W " *"
"RTN","PRS8VW1",48,0)
 S LOC(2)=$S(X1=52:2,1:3) I LOC=2 S LOC(2)=LOC(2)+3
"RTN","PRS8VW1",49,0)
 S $P(FOUND(LOC(1)),"^",LOC(2))=X
"RTN","PRS8VW1",50,0)
 Q:X1'=67
"RTN","PRS8VW1",51,0)
 I $P(FOUND(LOC(1)),"^",1)="CD" Q
"RTN","PRS8VW1",52,0)
 S S=0,X=FOUND(LOC(1))
"RTN","PRS8VW1",53,0)
 I +$P(X,"^",2)!(+$P(X,"^",3)) S S=1
"RTN","PRS8VW1",54,0)
 I 'S,LOC,+$P(X,"^",5)!(+$P(X,"^",6)) S S=1
"RTN","PRS8VW1",55,0)
 I 'S,LOC'=1 K FOUND(LOC(1))
"RTN","PRS8VW1",56,0)
 Q
"RTN","PRS8VW2")
0^15^B23384902^B20085383
"RTN","PRS8VW2",1,0)
PRS8VW2 ;HISC/MRL,RTK-DECOMPOSITION, VIEW RESULTS ;03/28/07
"RTN","PRS8VW2",2,0)
 ;;4.0;PAID;**6,32,34,45,69,112**;Sep 21, 1995;Build 54
"RTN","PRS8VW2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8VW2",4,0)
 ; 
"RTN","PRS8VW2",5,0)
 ; This routine is used to show the results of the decomp to
"RTN","PRS8VW2",6,0)
 ; the supervisor before certification.  It takes the values
"RTN","PRS8VW2",7,0)
 ; in the 8B string (NEW) and prints each type of time with the
"RTN","PRS8VW2",8,0)
 ; amount in a more readable format (ie - value in 8B = OE163,
"RTN","PRS8VW2",9,0)
 ; would print -->    Week 1    Overtime    16.75
"RTN","PRS8VW2",10,0)
 ; Called from CERT+18^PRS8VW, a continuation from that entry point.
"RTN","PRS8VW2",11,0)
 ;
"RTN","PRS8VW2",12,0)
 S CHECK=0
"RTN","PRS8VW2",13,0)
 ;
"RTN","PRS8VW2",14,0)
EN ;
"RTN","PRS8VW2",15,0)
 S E=E(1),W="Week 1",LOC=1 D SHOW
"RTN","PRS8VW2",16,0)
 S E=E(2),W="Week 2",LOC=2 D SHOW
"RTN","PRS8VW2",17,0)
 S E=E(3),W="Misc",LOC=0 D SHOW
"RTN","PRS8VW2",18,0)
 I 'CHECK,"C"'[$E(IOST) D
"RTN","PRS8VW2",19,0)
 .W !,DASH1
"RTN","PRS8VW2",20,0)
 .W !,TR
"RTN","PRS8VW2",21,0)
 K %,CHECK,D,E,I,L,LOC,USED,W,X,Y Q
"RTN","PRS8VW2",22,0)
 ;
"RTN","PRS8VW2",23,0)
SHOW ; --- show information
"RTN","PRS8VW2",24,0)
 F I=1:2 S X=$E(E,I,I+1) Q:X=""  D
"RTN","PRS8VW2",25,0)
 .I $D(USED(X)) Q
"RTN","PRS8VW2",26,0)
 .S USED(X)=""
"RTN","PRS8VW2",27,0)
 .S X(1)=$F(NEW,X)
"RTN","PRS8VW2",28,0)
 .I 'CHECK,'X(1) Q  ;not in string
"RTN","PRS8VW2",29,0)
 .I CHECK S LOC(1)=(I\2+1) S:'LOC LOC(1)=LOC(1)+50 D
"RTN","PRS8VW2",30,0)
 ..S FOUND(LOC(1))=$G(FOUND(LOC(1)))
"RTN","PRS8VW2",31,0)
 ..S $P(FOUND(LOC(1)),"^",$S(LOC<2:1,1:4))=X
"RTN","PRS8VW2",32,0)
 .;
"RTN","PRS8VW2",33,0)
 .;read from tables below
"RTN","PRS8VW2",34,0)
 .;
"RTN","PRS8VW2",35,0)
 .S Y=$P($T(@$E(X)),";;",2)
"RTN","PRS8VW2",36,0)
 .S Y(1)=$F(Y,$E(X,2)_":")
"RTN","PRS8VW2",37,0)
 .S Y=$P($E(Y,Y(1),999),":",1,2)
"RTN","PRS8VW2",38,0)
 .I 'CHECK W !,W,?15,$P($T(TYP+Y),";;",2)
"RTN","PRS8VW2",39,0)
 .S X=X(1),X1=52 D CON
"RTN","PRS8VW2",40,0)
 Q
"RTN","PRS8VW2",41,0)
 ;
"RTN","PRS8VW2",42,0)
CON ; --- convert to proper format
"RTN","PRS8VW2",43,0)
 I '+X S X=$E("00000000000",1,+$P(Y,":",2))
"RTN","PRS8VW2",44,0)
 I X,X1=52 S (X,Z)=$E(NEW,X(1),X(1)+$P(Y,":",2)-1)
"RTN","PRS8VW2",45,0)
 I I=73!(W="Misc"&(I=13)) S R=X/100 W ?50,$J(R,6,2) Q
"RTN","PRS8VW2",46,0)
 I W="Misc",I=3 S X=X*10
"RTN","PRS8VW2",47,0)
 S R=$E(X,1,$L(X)-1)_$S($E(X,$L(X))=3:".75",$E(X,$L(X))=2:".5",$E(X,$L(X))=1:".25",1:"") W ?50,$J(R,6,2) Q
"RTN","PRS8VW2",48,0)
 Q
"RTN","PRS8VW2",49,0)
 ;
"RTN","PRS8VW2",50,0)
 ; This internal table stores types of time codes and their
"RTN","PRS8VW2",51,0)
 ; corresponding descriptions and TT8B value field lengths. Each
"RTN","PRS8VW2",52,0)
 ; single char line label below is the 1st char of a type of time code.
"RTN","PRS8VW2",53,0)
 ; The text on the corresponding line contains '^' delimited
"RTN","PRS8VW2",54,0)
 ; pieces.  The 1st char of those pieces is the 2nd char of a type of
"RTN","PRS8VW2",55,0)
 ; time.  The text description for that time code is given by the
"RTN","PRS8VW2",56,0)
 ; the number in the 2nd ':' delimited piece.  That number indicates
"RTN","PRS8VW2",57,0)
 ; the line number below the label TYP in routine PRS8VW2.  The 3rd
"RTN","PRS8VW2",58,0)
 ; ':' delimited piece is the length of the time code's value in the
"RTN","PRS8VW2",59,0)
 ; TT8B String.
"RTN","PRS8VW2",60,0)
 ;
"RTN","PRS8VW2",61,0)
A ;;N:1:3^U:5:3^L:1:3^B:5:3^D:63:3^F:63:3
"RTN","PRS8VW2",62,0)
C ;;E:7:3^U:8:3^T:7:3^O:8:3^L:34:4^A:55:4^Y:57:3^D:60:6
"RTN","PRS8VW2",63,0)
D ;;A:16:3^B:17:3^C:18:3^E:16:3^F:17:3^G:18:3^W:45:2^T:48:6
"RTN","PRS8VW2",64,0)
E ;;A:38:5^B:40:5^C:38:5^D:40:5
"RTN","PRS8VW2",65,0)
F ;;F:59:4^A:61:3^B:61:3^C:62:3^D:62:3^E:64:6
"RTN","PRS8VW2",66,0)
H ;;A:29:3^B:30:3^C:31:3^L:29:3^M:30:3^N:31:3^D:36:3^O:36:3
"RTN","PRS8VW2",67,0)
I ;;N:46:1
"RTN","PRS8VW2",68,0)
L ;;U:48:4^N:49:4^D:50:4^A:53:1
"RTN","PRS8VW2",69,0)
M ;;L:54:4
"RTN","PRS8VW2",70,0)
N ;;O:4:3^A:10:3^B:11:3^P:4:3^R:10:3^S:11:3^L:44:2^T:65:3^H:65:3^D:69:3^U:69:3
"RTN","PRS8VW2",71,0)
O ;;A:20:3^B:21:3^C:22:3^K:24:3^M:25:3^N:34:4^E:20:3^F:21:3^G:22:3^S:24:3^U:25:3
"RTN","PRS8VW2",72,0)
P ;;T:32:3^A:33:3^H:32:3^B:33:3^C:56:2
"RTN","PRS8VW2",73,0)
R ;;T:6:3^A:26:3^B:27:3^C:28:3^L:6:3^E:26:3^F:27:3^G:28:3^R:58:1^S:66:3^N:66:3
"RTN","PRS8VW2",74,0)
S ;;K:2:3^P:12:3^A:13:3^B:14:3^C:15:3^L:2:3^Q:12:3^E:13:3^F:14:3^G:15:3^R:67:3^S:67:3^D:68:3^H:68:3
"RTN","PRS8VW2",75,0)
T ;;F:19:3^A:42:3^C:43:3^G:19:3^B:42:3^D:43:3^L:47:3^O:52:1
"RTN","PRS8VW2",76,0)
U ;;N:9:3^S:9:3
"RTN","PRS8VW2",77,0)
V ;;C:37:6^S:37:6
"RTN","PRS8VW2",78,0)
W ;;D:3:3^P:3:3
"RTN","PRS8VW2",79,0)
Y ;;A:23:3^D:35:4^E:23:3^H:35:4
"RTN","PRS8VW2",80,0)
 ;
"RTN","PRS8VW2",81,0)
TYP ; literal values of activities (actual name)
"RTN","PRS8VW2",82,0)
 ;;Annual Leave
"RTN","PRS8VW2",83,0)
 ;;Sick Leave
"RTN","PRS8VW2",84,0)
 ;;Leave Without Pay
"RTN","PRS8VW2",85,0)
 ;;Non-Pay Time
"RTN","PRS8VW2",86,0)
 ;;Authorized Absence
"RTN","PRS8VW2",87,0)
 ;;Restored Annual Leave
"RTN","PRS8VW2",88,0)
 ;;Comp Time/Credit Hrs Earned
"RTN","PRS8VW2",89,0)
 ;;Comp Time/Credit Hrs Used
"RTN","PRS8VW2",90,0)
 ;;Unscheduled Regular
"RTN","PRS8VW2",91,0)
 ;;Night Differential-2
"RTN","PRS8VW2",92,0)
 ;;Night Differential-3
"RTN","PRS8VW2",93,0)
 ;;Saturday Premium
"RTN","PRS8VW2",94,0)
 ;;Sunday Premium-D
"RTN","PRS8VW2",95,0)
 ;;Sunday Premium-2
"RTN","PRS8VW2",96,0)
 ;;Sunday Premium-3
"RTN","PRS8VW2",97,0)
 ;;Overtime Hrs > 8 Day-D
"RTN","PRS8VW2",98,0)
 ;;Overtime Hrs > 8 Day-2
"RTN","PRS8VW2",99,0)
 ;;Overtime Hrs > 8 Day-3
"RTN","PRS8VW2",100,0)
 ;;Travel OT-FLSA
"RTN","PRS8VW2",101,0)
 ;;Overtime Total Hours-D
"RTN","PRS8VW2",102,0)
 ;;Overtime Total Hours-2
"RTN","PRS8VW2",103,0)
 ;;Overtime Total Hours-3
"RTN","PRS8VW2",104,0)
 ;;Scheduled Call-Back OT
"RTN","PRS8VW2",105,0)
 ;;Overtime on Holiday
"RTN","PRS8VW2",106,0)
 ;;Sleep Time
"RTN","PRS8VW2",107,0)
 ;;Reg Hrs @ Overtime Rate-D
"RTN","PRS8VW2",108,0)
 ;;Reg Hrs @ Overtime Rate-2
"RTN","PRS8VW2",109,0)
 ;;Reg Hrs @ Overtime Rate-3
"RTN","PRS8VW2",110,0)
 ;;Holiday Hours-D
"RTN","PRS8VW2",111,0)
 ;;Holiday Hours-2
"RTN","PRS8VW2",112,0)
 ;;Holiday Hours-3
"RTN","PRS8VW2",113,0)
 ;;Part Time Hours
"RTN","PRS8VW2",114,0)
 ;;Continuation of Pay
"RTN","PRS8VW2",115,0)
 ;;Standby Hours
"RTN","PRS8VW2",116,0)
 ;;On-Call Hours
"RTN","PRS8VW2",117,0)
 ;;Pieceworker Holiday Excused
"RTN","PRS8VW2",118,0)
 ;;VCS Sales
"RTN","PRS8VW2",119,0)
 ;;Environmental Differential
"RTN","PRS8VW2",120,0)
 ;;
"RTN","PRS8VW2",121,0)
 ;;Hazardous Duty Pay
"RTN","PRS8VW2",122,0)
 ;;
"RTN","PRS8VW2",123,0)
 ;;Travel
"RTN","PRS8VW2",124,0)
 ;;Training
"RTN","PRS8VW2",125,0)
 ;;Non-Pay Annual Leave
"RTN","PRS8VW2",126,0)
 ;;Days Worked
"RTN","PRS8VW2",127,0)
 ;;Insurance
"RTN","PRS8VW2",128,0)
 ;;T&L Change
"RTN","PRS8VW2",129,0)
 ;;Lump Sum Units-D
"RTN","PRS8VW2",130,0)
 ;;Lump Sum Units-2
"RTN","PRS8VW2",131,0)
 ;;Lump Sum Units-3
"RTN","PRS8VW2",132,0)
 ;;Lump Sum Expiration Date
"RTN","PRS8VW2",133,0)
 ;;Optional Withholding Tax
"RTN","PRS8VW2",134,0)
 ;;Foreign Cola
"RTN","PRS8VW2",135,0)
 ;;Military Leave
"RTN","PRS8VW2",136,0)
 ;;Calendar Year Adjustment
"RTN","PRS8VW2",137,0)
 ;;Workers Compensation
"RTN","PRS8VW2",138,0)
 ;;SF 2806 Adjustment
"RTN","PRS8VW2",139,0)
 ;;Payment Record Requested
"RTN","PRS8VW2",140,0)
 ;;Fire Fighter Normal Hours
"RTN","PRS8VW2",141,0)
 ;;Control Data
"RTN","PRS8VW2",142,0)
 ;;Care and Bereavement
"RTN","PRS8VW2",143,0)
 ;;Adoption
"RTN","PRS8VW2",144,0)
 ;;Donor Leave
"RTN","PRS8VW2",145,0)
 ;;Fee Basis
"RTN","PRS8VW2",146,0)
 ;;Base Tour Non Pay Hours
"RTN","PRS8VW2",147,0)
 ;;Recess
"RTN","PRS8VW2",148,0)
 ;;Saturday Premium-AWS
"RTN","PRS8VW2",149,0)
 ;;Sunday Premium-AWS
"RTN","PRS8VW2",150,0)
 ;;Night Differential-AWS
"RTN","PRS8WE2")
0^53^B21508630^B16748307
"RTN","PRS8WE2",1,0)
PRS8WE2 ;WCIOFO/MGD-DECOMPOSITION, WEEKEND PREMIUM PART 2 ;3/23/07
"RTN","PRS8WE2",2,0)
 ;;4.0;PAID;**90,92,96,112**;Sep 21, 1995;Build 54
"RTN","PRS8WE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8WE2",4,0)
COUNT(DAYN,SEG) ; Increase count of premium for tour
"RTN","PRS8WE2",5,0)
 ; input
"RTN","PRS8WE2",6,0)
 ;   DAYN = day # (0-15) being counted
"RTN","PRS8WE2",7,0)
 ;   SEG  = segment # (1-96) in DAYN being counted
"RTN","PRS8WE2",8,0)
 ;   D(DAYN)
"RTN","PRS8WE2",9,0)
 ;   P(DAYN)
"RTN","PRS8WE2",10,0)
 ;   H(DAYN)
"RTN","PRS8WE2",11,0)
 ;   CNT(DAYN,shift) - optional
"RTN","PRS8WE2",12,0)
 ; output
"RTN","PRS8WE2",13,0)
 ;   CNT(DAYN,shift) = current count for tour being processed
"RTN","PRS8WE2",14,0)
 ;
"RTN","PRS8WE2",15,0)
 N DAT,FND,M1,NODE,NOTELG,POST,PREVDAY,RC,SC,SHIFT,TDAY,TOUR,TOURS,TS
"RTN","PRS8WE2",16,0)
 ; perform final checks
"RTN","PRS8WE2",17,0)
 I ("EetOscbT"[$E(D(DAYN),SEG)),$E(H(DAYN),SEG)'=2,$E(P(DAYN),SEG) Q
"RTN","PRS8WE2",18,0)
 I TYP["P","4"[$E(D(DAYN),SEG),$E(H(DAYN),SEG)'=2,$E(P(DAYN),SEG)=0 Q
"RTN","PRS8WE2",19,0)
 ;
"RTN","PRS8WE2",20,0)
 ; If Hybrid employee as defined by Public Law P.L. 107-135, check
"RTN","PRS8WE2",21,0)
 ; to see if the time was on a tour of duty or an exception.  Tours
"RTN","PRS8WE2",22,0)
 ; worked on Sat or Sun qualify for Premium time.  If the time was
"RTN","PRS8WE2",23,0)
 ; an exception, check the Remarks Code to see if the segment can be
"RTN","PRS8WE2",24,0)
 ; counted as Premium time.
"RTN","PRS8WE2",25,0)
 ;
"RTN","PRS8WE2",26,0)
 S (FND,NOTELG)=0
"RTN","PRS8WE2",27,0)
 ; Quit if Sunday and employee is not entitled to Sun Prem Pay
"RTN","PRS8WE2",28,0)
 Q:SATNOSUN&("^1^8^15^"[(U_DAY_U))&(TP="SUN")
"RTN","PRS8WE2",29,0)
 I HYBRID!(PMP'=""&("^S^T^U^V^"[(U_PMP_U))) D  Q:NOTELG
"RTN","PRS8WE2",30,0)
 . ; Check to see if the time was on a tour or an exception
"RTN","PRS8WE2",31,0)
 . N INC,END
"RTN","PRS8WE2",32,0)
 . F TOURS=1,4,2 D  Q:NOTELG!(FND)
"RTN","PRS8WE2",33,0)
 . . S TOUR=$G(^TMP($J,"PRS8",DAYN,TOURS))
"RTN","PRS8WE2",34,0)
 . . Q:TOUR=""
"RTN","PRS8WE2",35,0)
 . . S INC=$S(TOURS=2:4,1:3)
"RTN","PRS8WE2",36,0)
 . . S END=$S(TOURS=2:25,1:19)
"RTN","PRS8WE2",37,0)
 . . F POST=1:INC:END I $P(TOUR,"^",POST)'="" D  Q:NOTELG!(FND)
"RTN","PRS8WE2",38,0)
 . . . ; Quit if SEG is not within the start/stop time
"RTN","PRS8WE2",39,0)
 . . . Q:SEG<$P(TOUR,"^",POST)!(SEG>$P(TOUR,"^",POST+1))
"RTN","PRS8WE2",40,0)
 . . . S FND=1
"RTN","PRS8WE2",41,0)
 . . . Q:TOURS=1!(TOURS=4)  ; If on a Tour it counts as Premium
"RTN","PRS8WE2",42,0)
 . . . S RC=$P(TOUR,"^",POST+3)
"RTN","PRS8WE2",43,0)
 . . . ; Remarks Code must be OT/CT on Premium (#9), Tour Coverage (#12),
"RTN","PRS8WE2",44,0)
 . . . ; CB - Premium T&L (#14) or OT/CT With Premiums (#17) to qualify for Premium pay.
"RTN","PRS8WE2",45,0)
 . . . I "^9^12^14^17^"'[("^"_RC_"^") S NOTELG=1
"RTN","PRS8WE2",46,0)
 . Q:FND
"RTN","PRS8WE2",47,0)
 . ;
"RTN","PRS8WE2",48,0)
 . ; If we didn't find SEG in either of the two tours or the
"RTN","PRS8WE2",49,0)
 . ; exceptions then check to see if it crossed over into this day.
"RTN","PRS8WE2",50,0)
 . S PREVDAY=DAYN-1
"RTN","PRS8WE2",51,0)
 . N INC,END
"RTN","PRS8WE2",52,0)
 . F TOURS=1,4,2 D  Q:NOTELG
"RTN","PRS8WE2",53,0)
 . . S TOUR=$G(^TMP($J,"PRS8",PREVDAY,TOURS))
"RTN","PRS8WE2",54,0)
 . . Q:TOUR=""
"RTN","PRS8WE2",55,0)
 . . S INC=$S(TOURS=2:4,1:3)
"RTN","PRS8WE2",56,0)
 . . S END=$S(TOURS=2:25,1:19)
"RTN","PRS8WE2",57,0)
 . . F POST=1:4:25 I $P(TOUR,"^",POST)'="" D  Q:NOTELG!(FND)
"RTN","PRS8WE2",58,0)
 . . . ; Quit if SEG is not within the start/stop time
"RTN","PRS8WE2",59,0)
 . . . Q:(SEG+96)<$P(TOUR,"^",POST)!((SEG+96)>$P(TOUR,"^",POST+1))
"RTN","PRS8WE2",60,0)
 . . . S FND=1
"RTN","PRS8WE2",61,0)
 . . . Q:TOURS=1!(TOURS=4)  ; If on a Tour it counts as Premium
"RTN","PRS8WE2",62,0)
 . . . S RC=$P(TOUR,"^",POST+3)
"RTN","PRS8WE2",63,0)
 . . . ; Remarks Code must be OT/CT on Premium (#9), Tour Coverage (#12),
"RTN","PRS8WE2",64,0)
 . . . ; CB - Premium T&L (#14) or OT/CT With Premiums to qualify for premium pay.
"RTN","PRS8WE2",65,0)
 . . . I "^9^12^14^17^"'[("^"_RC_"^") S NOTELG=1
"RTN","PRS8WE2",66,0)
 ;
"RTN","PRS8WE2",67,0)
 I $E(H(DAYN),SEG)=1!($E(P(DAYN),SEG)=5) Q
"RTN","PRS8WE2",68,0)
 ; determine special code
"RTN","PRS8WE2",69,0)
 S SHIFT=1
"RTN","PRS8WE2",70,0)
 I TP="SUN",TYP["W" D
"RTN","PRS8WE2",71,0)
 . ; Check to see if shift 2 or 3 is recorded for the segment worked
"RTN","PRS8WE2",72,0)
 . I "^2^3^"[(U_$E(D(DAYN),SEG)_U) S SHIFT=$E(D(DAYN),SEG) Q
"RTN","PRS8WE2",73,0)
 . S FND=0,SC=""
"RTN","PRS8WE2",74,0)
 . ; Check for Holiday Worked on a Holiday
"RTN","PRS8WE2",75,0)
 . I $E(D(DAYN),SEG)="O",$E(H(DAYN),SEG)=2 D
"RTN","PRS8WE2",76,0)
 . . F TDAY=DAYN,DAYN-1 D  Q:FND
"RTN","PRS8WE2",77,0)
 . . . S M1=$S(TDAY=DAYN:SEG,1:SEG+96)
"RTN","PRS8WE2",78,0)
 . . . ; loop through both tours in day
"RTN","PRS8WE2",79,0)
 . . . F NODE=1,4 S DAT=$G(^TMP($J,"PRS8",TDAY,NODE)) Q:DAT=""  D  Q:FND
"RTN","PRS8WE2",80,0)
 . . . . ; loop through tour segments in tour
"RTN","PRS8WE2",81,0)
 . . . . F TS=1:1:7 Q:$P(DAT,U,(TS-1)*3+1)=""  D  Q:FND
"RTN","PRS8WE2",82,0)
 . . . . . ; check if time is contained in tour segment
"RTN","PRS8WE2",83,0)
 . . . . . I M1'<$P(DAT,U,(TS-1)*3+1),M1'>$P(DAT,U,(TS-1)*3+2) D
"RTN","PRS8WE2",84,0)
 . . . . . . S SC=$P(DAT,U,(TS-1)*3+3),SHIFT=$S(SC=6:2,SC=7:3,1:1)
"RTN","PRS8WE2",85,0)
 . . . . . . I "^2^3^"[(U_SHIFT_U) S FND=1
"RTN","PRS8WE2",86,0)
 ;
"RTN","PRS8WE2",87,0)
 ;Set shift 2 for 36/40 AWS nurses with premium time outside tour
"RTN","PRS8WE2",88,0)
 ;for this time segment  i.e. overtime(O), comp time(C) or called in from
"RTN","PRS8WE2",89,0)
 ;on-call(c)
"RTN","PRS8WE2",90,0)
 I +NAWS=36,"cOE"[$E(D(DAYN),SEG) S SHIFT=2
"RTN","PRS8WE2",91,0)
 ; add to count
"RTN","PRS8WE2",92,0)
 S CNT(DAYN,SHIFT)=$G(CNT(DAYN,SHIFT))+1
"RTN","PRS8WE2",93,0)
 Q
"RTN","PRS8WE2",94,0)
 ;
"RTN","PRS8WE2",95,0)
SAVE ; Update WK array with final count for tour
"RTN","PRS8WE2",96,0)
 ; input
"RTN","PRS8WE2",97,0)
 ;   TP  - type of premium (SAT or SUN)
"RTN","PRS8WE2",98,0)
 ;   CNT(day,shift)=amount
"RTN","PRS8WE2",99,0)
 ;
"RTN","PRS8WE2",100,0)
 N AMT,DAYN,PC,SHIFT,WEEK
"RTN","PRS8WE2",101,0)
 S DAYN=0 F  S DAYN=$O(CNT(DAYN)) Q:DAYN=""  D
"RTN","PRS8WE2",102,0)
 . Q:DAYN<1!(DAYN>14)
"RTN","PRS8WE2",103,0)
 . S WEEK=$S(DAYN<8:1,1:2)
"RTN","PRS8WE2",104,0)
 . S SHIFT="" F  S SHIFT=$O(CNT(DAYN,SHIFT)) Q:SHIFT=""  D
"RTN","PRS8WE2",105,0)
 . . S AMT=CNT(DAYN,SHIFT)
"RTN","PRS8WE2",106,0)
 . . S PC=$S(TP="SAT":0,1:SHIFT)+12
"RTN","PRS8WE2",107,0)
 . . ;Shift 2 used for 36/40 nurses premium time within tour using the 2080 divisor (40*52).
"RTN","PRS8WE2",108,0)
 . . ;Saturday Premium-AWS (SR/SS) and Sunday Premium-AWS (SD/SH)
"RTN","PRS8WE2",109,0)
 . . ;Paid at the AAC with the 1872 divisor for the hourly rate (36*52)
"RTN","PRS8WE2",110,0)
 . . ;for time outside the tour.
"RTN","PRS8WE2",111,0)
 . . S:+NAWS=36 PC=$S(SHIFT=2:$S(TP="SAT":12,1:13),TP="SAT":49,1:50)
"RTN","PRS8WE2",112,0)
 . . S $P(WK(WEEK),U,PC)=$P(WK(WEEK),U,PC)+AMT
"RTN","PRS8WE2",113,0)
 Q
"RTN","PRS8WE2",114,0)
 ;
"RTN","PRS8WE2",115,0)
 ;PRS8WE
"RTN","PRSACED2")
0^49^B16840857^B16128783
"RTN","PRSACED2",1,0)
PRSACED2 ; HISC/FPT-T&A Edits ;11/24/1999
"RTN","PRSACED2",2,0)
 ;;4.0;PAID;**45,54,112**;Sep 21, 1995;Build 54
"RTN","PRSACED2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSACED2",4,0)
 ;
"RTN","PRSACED2",5,0)
 ; initialize array that stores 8b values.  This array is used
"RTN","PRSACED2",6,0)
 ; for edit checks that involve more than one type of time.
"RTN","PRSACED2",7,0)
 ;   nodes 14-17 were initialized and set in PRSACED1.
"RTN","PRSACED2",8,0)
 F Z=1:1:13 S E(Z)=0
"RTN","PRSACED2",9,0)
 ;
"RTN","PRSACED2",10,0)
 F K=29:1:32,34:1:42,46,47 S X=$P(C0,"^",K) I X'="" S LAB=$P(T0," ",K-12) D @LAB
"RTN","PRSACED2",11,0)
 F K=11:1:14,16:1:24,28,29,58,59 S X=$P(C1,"^",K) I X'="" S LAB=$P(T1," ",K) D @LAB
"RTN","PRSACED2",12,0)
 I E(1)+E(2)=0 G E1
"RTN","PRSACED2",13,0)
 I "0123456789GHU"[PAY,E(1)>60!(E(2)>60) S ERR=41 D ERR^PRSACED
"RTN","PRSACED2",14,0)
E1 I "^R^C^"'[(U_PMP_U),E(3)>20!(E(4)>20) S ERR=55 D ERR^PRSACED
"RTN","PRSACED2",15,0)
 I E(5)>24!(E(6)>24) S ERR=61 D ERR^PRSACED
"RTN","PRSACED2",16,0)
 I NOR>80,(E(5)+E(6)) S ERR=168 D ERR^PRSACED
"RTN","PRSACED2",17,0)
 ;  RA or RE hours may not exceed PT or PH hours minus 53.
"RTN","PRSACED2",18,0)
 ;  RA is stored in E(3), RE in E(4), PT in E(10) and PH in E(11).
"RTN","PRSACED2",19,0)
 ;  only check firefighters with premium pay indicator R or C (patch *54)
"RTN","PRSACED2",20,0)
 I "^R^C^"[(U_PMP_U) D
"RTN","PRSACED2",21,0)
 . I E(3),(E(3)>(E(10)-53)) S ERR=175 D ERR^PRSACED
"RTN","PRSACED2",22,0)
 . I E(4),(E(4)>(E(11)-53)) S ERR=176 D ERR^PRSACED
"RTN","PRSACED2",23,0)
 ;
"RTN","PRSACED2",24,0)
 ; NT, NH, NO, NP, WD, WP in E(12), E(13), E(14), E(15), E(16), E(17)
"RTN","PRSACED2",25,0)
 ; NT hrs can't exceed WD + NO.  NH hrs can't exceed WP + NP.
"RTN","PRSACED2",26,0)
 ;
"RTN","PRSACED2",27,0)
 I E(12)>(E(14)+E(16)) S ERR=178 D ERR^PRSACED
"RTN","PRSACED2",28,0)
 I E(13)>(E(15)+E(17)) S ERR=179 D ERR^PRSACED
"RTN","PRSACED2",29,0)
 ;
"RTN","PRSACED2",30,0)
 I E(7)+E(8)=0 G E2
"RTN","PRSACED2",31,0)
 I DUT=1,CWK'="C" S MX=NOR/2 I E(7)>MX!(E(8)>MX) S ERR=80 D ERR^PRSACED
"RTN","PRSACED2",32,0)
 G:DUT=1 E2 S X1=$P(C0,"^",42)+$P(C0,"^",21),X1=X1\10+(X1#10*.25)
"RTN","PRSACED2",33,0)
 I E(7)>X1 S ERR=81 D ERR^PRSACED
"RTN","PRSACED2",34,0)
 S X1=$P(C1,"^",24)+$P(C1,"^",3),X1=X1\10+(X1#10*.25)
"RTN","PRSACED2",35,0)
 I E(8)>X1 S ERR=81 D ERR^PRSACED
"RTN","PRSACED2",36,0)
E2 I NOR=112,DUT=1,'$P(C0,"^",42)!('$P(C1,"^",24)) S ERR=67 D ERR^PRSACED
"RTN","PRSACED2",37,0)
 I E(9),'$P(C1,"^",46),E(9)'=+NOR S ERR=65 D ERR^PRSACED
"RTN","PRSACED2",38,0)
 ;exclude 9/3 month employee
"RTN","PRSACED2",39,0)
 I DUT=2,'(NOR="01"&("LMN"[PAY)),'(NOR="80"&(PAY="M")),$P(C0,"^",42)=""!($P(C1,"^",24)="") S ERR=66 D ERR^PRSACED
"RTN","PRSACED2",40,0)
 G ^PRSACED3
"RTN","PRSACED2",41,0)
OA ;
"RTN","PRSACED2",42,0)
OE I "ABCKMN"[PAY,X>600 S ERR=35 D ERR^PRSACED
"RTN","PRSACED2",43,0)
 I "ABCGKMNU0123456789"'[PAY S ERR=36 D ERR^PRSACED
"RTN","PRSACED2",44,0)
 S X1=LAB="OE"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",45,0)
 Q
"RTN","PRSACED2",46,0)
OB ;
"RTN","PRSACED2",47,0)
OF I "ABCGU0123456789"'[PAY S ERR=37 D ERR^PRSACED
"RTN","PRSACED2",48,0)
 I "ABC"[PAY,X>60 S ERR=38 D ERR^PRSACED
"RTN","PRSACED2",49,0)
 S X1=LAB="OF"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",50,0)
 Q
"RTN","PRSACED2",51,0)
OC ;
"RTN","PRSACED2",52,0)
OG I "0123456789GU"'[PAY S ERR=39 D ERR^PRSACED
"RTN","PRSACED2",53,0)
 S X1=LAB="OG"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",54,0)
 Q
"RTN","PRSACED2",55,0)
OK ;
"RTN","PRSACED2",56,0)
OS I "ABCKM"'[PAY S ERR=44 D ERR^PRSACED
"RTN","PRSACED2",57,0)
 I "ABC"[PAY,PMP="" S ERR=45 D ERR^PRSACED
"RTN","PRSACED2",58,0)
 I FLSA'="E" S ERR=46 D ERR^PRSACED
"RTN","PRSACED2",59,0)
 Q
"RTN","PRSACED2",60,0)
OM I X>560 S ERR=48 D ERR^PRSACED
"RTN","PRSACED2",61,0)
 I ($P(C0,"^",44)'>0),NOR'>80 S ERR=50 D ERR^PRSACED
"RTN","PRSACED2",62,0)
 I X>$P(C0,"^",44) S ERR=62 D ERR^PRSACED
"RTN","PRSACED2",63,0)
 Q
"RTN","PRSACED2",64,0)
OU I X>560 S ERR=49 D ERR^PRSACED
"RTN","PRSACED2",65,0)
 I ($P(C1,"^",26)'>0),NOR'>80 S ERR=51 D ERR^PRSACED
"RTN","PRSACED2",66,0)
 I X>$P(C1,"^",26) S ERR=63 D ERR^PRSACED
"RTN","PRSACED2",67,0)
 Q
"RTN","PRSACED2",68,0)
RA ;RA is stored in E(3), RE in E(4)
"RTN","PRSACED2",69,0)
RE I "ABCGKMNU0123456789"'[PAY S ERR=52 D ERR^PRSACED
"RTN","PRSACED2",70,0)
 S X1=LAB="RE"+3,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",71,0)
 Q
"RTN","PRSACED2",72,0)
RB ;
"RTN","PRSACED2",73,0)
RF I "BGU0123456789"'[PAY S ERR=53 D ERR^PRSACED
"RTN","PRSACED2",74,0)
 S X1=LAB="RF"+3,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",75,0)
 Q
"RTN","PRSACED2",76,0)
RC ;
"RTN","PRSACED2",77,0)
RG I "0123456789AGKMNU"'[PAY S ERR=54 D ERR^PRSACED
"RTN","PRSACED2",78,0)
 I PAY="A",X>200 S ERR=56 D ERR^PRSACED
"RTN","PRSACED2",79,0)
 S X1=LAB="RG"+3,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",80,0)
 Q
"RTN","PRSACED2",81,0)
HA ;
"RTN","PRSACED2",82,0)
HL I "ABCGKMNU0123456789"'[PAY S ERR=57 D ERR^PRSACED
"RTN","PRSACED2",83,0)
 S X1=LAB="HL"+5,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",84,0)
 Q
"RTN","PRSACED2",85,0)
HB ;
"RTN","PRSACED2",86,0)
HM I "BGU0123456789"'[PAY S ERR=58 D ERR^PRSACED
"RTN","PRSACED2",87,0)
 S X1=LAB="HM"+5,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",88,0)
 Q
"RTN","PRSACED2",89,0)
HC ;
"RTN","PRSACED2",90,0)
HN I "0123456789GKMU"'[PAY S ERR=59 D ERR^PRSACED
"RTN","PRSACED2",91,0)
 S X1=LAB="HN"+5,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",92,0)
 Q
"RTN","PRSACED2",93,0)
HD ;
"RTN","PRSACED2",94,0)
HO I X>240 S ERR=60 D ERR^PRSACED
"RTN","PRSACED2",95,0)
 I PAY'="U" S ERR=76 D ERR^PRSACED
"RTN","PRSACED2",96,0)
 I PB'="P" S ERR=76 D ERR^PRSACED
"RTN","PRSACED2",97,0)
 Q
"RTN","PRSACED2",98,0)
PT ;
"RTN","PRSACED2",99,0)
PH I 'X,'LVG,'(DUT=2&("BLM"[PAY)) S ERR=64 D ERR^PRSACED
"RTN","PRSACED2",100,0)
 I DUT=1,NOR'>80 S ERR=67 D ERR^PRSACED
"RTN","PRSACED2",101,0)
 I DUT=3 S ERR=68 D ERR^PRSACED
"RTN","PRSACED2",102,0)
 ; total part time hours stored in E(9)
"RTN","PRSACED2",103,0)
 S E(9)=E(9)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",104,0)
 ; Save PT in E(10) and PH in E(11)
"RTN","PRSACED2",105,0)
 S X1=LAB="PH"+10,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",106,0)
 Q
"RTN","PRSACED2",107,0)
EA S E(7)=E(7)+$E(X,3,4)+($E(X,5)*.25)
"RTN","PRSACED2",108,0)
EB I LAB="EB" S E(7)=E(7)+$E(X,3,4)+($E(X,5)*.25)
"RTN","PRSACED2",109,0)
EC I LAB="EC" S E(8)=E(8)+$E(X,3,4)+($E(X,5)*.25)
"RTN","PRSACED2",110,0)
ED I LAB="ED" S E(8)=E(8)+$E(X,3,4)+($E(X,5)*.25)
"RTN","PRSACED2",111,0)
 I "GU1234567"'[PAY S ERR=78 D ERR^PRSACED
"RTN","PRSACED2",112,0)
 I $E(X,1,2)>50 S ERR=79 D ERR^PRSACED
"RTN","PRSACED2",113,0)
 Q
"RTN","PRSACED2",114,0)
NT ; Special firefighter codes
"RTN","PRSACED2",115,0)
NH ; NT is stored in E(12), NH in E(13)
"RTN","PRSACED2",116,0)
 I NOR'>80 S ERR=177 D ERR^PRSACED
"RTN","PRSACED2",117,0)
 S X1=LAB="NH"+12,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED2",118,0)
 Q
"RTN","PRSACED5")
0^16^B6936874^B6094695
"RTN","PRSACED5",1,0)
PRSACED5 ; HISC/REL/FPT/PLT-T&A Cross-Edits ;11/20/06  12:53
"RTN","PRSACED5",2,0)
 ;;4.0;PAID;**102,112**;Sep 21, 1995;Build 54
"RTN","PRSACED5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSACED5",4,0)
 ;
"RTN","PRSACED5",5,0)
 G D1:DUT=1,D2:DUT=2,D3:DUT=3 Q
"RTN","PRSACED5",6,0)
D1 G:+NOR N1
"RTN","PRSACED5",7,0)
 I "045"'[LVG S ERR=151 D ERR^PRSACED
"RTN","PRSACED5",8,0)
 I "LJXWPQY"'[PAY S ERR=152 D ERR^PRSACED
"RTN","PRSACED5",9,0)
 Q:"45"'[LVG
"RTN","PRSACED5",10,0)
 S E(1)=0 F K=13:1:18 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",11,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",12,0)
 I E(1)>7!(E(2)>7) S ERR=159 D ERR^PRSACED
"RTN","PRSACED5",13,0)
 I LVG=5 I E(1)+E(2)+$P(C1,"^",30)>14 S ERR=160 D ERR^PRSACED
"RTN","PRSACED5",14,0)
 Q
"RTN","PRSACED5",15,0)
 ;36/40 employee has 8b normal hour = 72
"RTN","PRSACED5",16,0)
N1 I '(NOR=48!(NOR=72)&("KM"[PAY)),NOR<80 S ERR=153 D ERR^PRSACED
"RTN","PRSACED5",17,0)
 I '(PAY="W"&(LVG=0)),"123"'[LVG S ERR=154 D ERR^PRSACED
"RTN","PRSACED5",18,0)
 S E(1)=0 F K=13:1:18,20,43 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",19,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",20,0)
 F K=2,25 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",21,0)
 G:NOR=80 N2
"RTN","PRSACED5",22,0)
 I $P(C0,"^",42)+$P(C1,"^",24)=0 S MX=NOR/2 I E(1)>MX!(E(2)>MX) S ERR=161 D ERR^PRSACED
"RTN","PRSACED5",23,0)
 S X=$P(C0,"^",42) I X S X=$E(X,1,2)+($E(X,3)*.25) I E(1)>X S ERR=163 D ERR^PRSACED
"RTN","PRSACED5",24,0)
 S X=$P(C1,"^",24) I X S X=$E(X,1,2)+($E(X,3)*.25) I E(2)>X S ERR=163 D ERR^PRSACED
"RTN","PRSACED5",25,0)
 Q
"RTN","PRSACED5",26,0)
N2 I CWK'="C",E(1)>45!(E(2)>45) S ERR=165 D ERR^PRSACED
"RTN","PRSACED5",27,0)
 I CWK="C",E(1)+E(2)>80 S ERR=166 D ERR^PRSACED
"RTN","PRSACED5",28,0)
 Q
"RTN","PRSACED5",29,0)
 ;exclude 9/3 month employee
"RTN","PRSACED5",30,0)
D2 I PAY'="M"!(FLSA'="E"),NOR<1!(NOR>79) S ERR=155 D ERR^PRSACED
"RTN","PRSACED5",31,0)
 I "0123"'[LVG S ERR=156 D ERR^PRSACED
"RTN","PRSACED5",32,0)
 I "ABCGLMNRU0123456789PQT"'[PAY S ERR=157 D ERR^PRSACED
"RTN","PRSACED5",33,0)
 ;exclude 9/3 month employee
"RTN","PRSACED5",34,0)
 QUIT:"123"'[LVG!(NOR="80"&(PAY="M"))
"RTN","PRSACED5",35,0)
 S E(1)=0 F K=13:1:18,20,43 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",36,0)
 S E(2)=0 F K=48:1:53 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",37,0)
 F K=2,25 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",38,0)
 S X=$P(C0,"^",42),X=$E(X,1,2)+($E(X,3)*.25) I E(1)>X S ERR=164 D ERR^PRSACED
"RTN","PRSACED5",39,0)
 S X=$P(C1,"^",24),X=$E(X,1,2)+($E(X,3)*.25) I E(2)>X S ERR=164 D ERR^PRSACED
"RTN","PRSACED5",40,0)
 Q:CWK'="C"
"RTN","PRSACED5",41,0)
 S E(1)=0 F K=29,30,31 S X=$P(C0,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",42,0)
 F K=11,12,13 S X=$P(C1,"^",K),E(1)=E(1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",43,0)
 S E(2)=0 F K=21,42 S X=$P(C0,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",44,0)
 F K=16,51 S X=$P(C0,"^",K),E(2)=E(2)-$E(X,1,2)-($E(X,3)*.25)
"RTN","PRSACED5",45,0)
 F K=3,24 S X=$P(C1,"^",K),E(2)=E(2)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED5",46,0)
 ; The following line was commented out for DFAS Release #1 per Angela Curtiss instructions.
"RTN","PRSACED5",47,0)
 ; I E(1),E(2)<80 S ERR=170 D ERR^PRSACED - 
"RTN","PRSACED5",48,0)
 Q
"RTN","PRSACED5",49,0)
D3 I +NOR!LVG S ERR=158 D ERR^PRSACED
"RTN","PRSACED5",50,0)
 Q
"RTN","PRSACED6")
0^48^B5380606^B4762530
"RTN","PRSACED6",1,0)
PRSACED6 ; HISC/FPT-T&A Cross-Edits ;11/27/95  10:01
"RTN","PRSACED6",2,0)
 ;;4.0;PAID;**6,45,112**;Sep 21, 1995;Build 54
"RTN","PRSACED6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSACED6",4,0)
CODES ; Set variables T0 and T1 with 8B code list
"RTN","PRSACED6",5,0)
 ;      1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
"RTN","PRSACED6",6,0)
 ;
"RTN","PRSACED6",7,0)
 S T0="AN SK WD NO AU RT CE CU UN NA NB SP DA SA SB SC OA OB OC OK DB OM RA RB RC HA HB HC HD PT PA ON VC EA EB AL SL WP NP AB RL FA FB FC FD AD AF FE",N1=60
"RTN","PRSACED6",8,0)
 S T1="CT CO US NR NS DC TF SE SF SG OE OF OG OS TA OU RE RF RG HL HM HN HO PH PB CL VS EC ED NL DW IN TL LU LN LD TO LA ML CA PC TC CY RR SQ FF DE DF YA DG TG YD YE TB DT YH TD NT NH RS RN ND NU SR SS SD SH",N2=67
"RTN","PRSACED6",9,0)
 Q
"RTN","PRSACED6",10,0)
STUB ; parse out 'stub' variables from 8b record
"RTN","PRSACED6",11,0)
 S RECORD=^PRST(458,PPI,"E",DFN,5)
"RTN","PRSACED6",12,0)
 S STA=$E(RECORD,2,4)
"RTN","PRSACED6",13,0)
 S SSN=$E(RECORD,5,13)
"RTN","PRSACED6",14,0)
 S NCODE=$E(RECORD,14,16)
"RTN","PRSACED6",15,0)
 S DAYNO=$E(RECORD,17,19)
"RTN","PRSACED6",16,0)
 S TL=$E(RECORD,22,24)
"RTN","PRSACED6",17,0)
 S LVG=$E(RECORD,25)
"RTN","PRSACED6",18,0)
 S NOR=$E(RECORD,26,27)
"RTN","PRSACED6",19,0)
 S PAY=$E(RECORD,28)
"RTN","PRSACED6",20,0)
 S DUT=$E(RECORD,29)
"RTN","PRSACED6",21,0)
 S RECORD=$E(RECORD,33,$L(RECORD))
"RTN","PRSACED6",22,0)
 S (C0,C1)="",EOR=0
"RTN","PRSACED6",23,0)
 Q:RECORD=""
"RTN","PRSACED6",24,0)
TYPE ; parse out type of time from 8b record
"RTN","PRSACED6",25,0)
 I EOR=1 K EOR,LOOP,MATCH,RECORD,TYPE,VALUE Q
"RTN","PRSACED6",26,0)
 S TYPE=$E(RECORD,1,2)
"RTN","PRSACED6",27,0)
 I TYPE="CD" S VALUE=$E(RECORD,3,$L(RECORD)) D CD S EOR=1 G TYPE
"RTN","PRSACED6",28,0)
 F LOOP=3:1:$L(RECORD) Q:$E(RECORD,LOOP)?1U
"RTN","PRSACED6",29,0)
 S:LOOP=$L(RECORD) EOR=1
"RTN","PRSACED6",30,0)
 S VALUE=$S(EOR=1:$E(RECORD,3,LOOP),1:$E(RECORD,3,LOOP-1))
"RTN","PRSACED6",31,0)
 S:EOR=0 RECORD=$E(RECORD,LOOP,$L(RECORD))
"RTN","PRSACED6",32,0)
 S MATCH=0
"RTN","PRSACED6",33,0)
 S Z=$F(T0,TYPE)
"RTN","PRSACED6",34,0)
 I Z>2 S $P(C0,"^",(Z/3)+12)=VALUE,MATCH=1
"RTN","PRSACED6",35,0)
 G:MATCH=1 TYPE
"RTN","PRSACED6",36,0)
 S Z=$F(T1,TYPE)
"RTN","PRSACED6",37,0)
 I Z>2 S $P(C1,"^",Z/3)=VALUE
"RTN","PRSACED6",38,0)
 G TYPE
"RTN","PRSACED6",39,0)
CD ; calculate/compare cd value
"RTN","PRSACED6",40,0)
 S END=$L(C0,"^"),CD=0
"RTN","PRSACED6",41,0)
 F LOOP=13:1:END S CD=CD+$P(C0,"^",LOOP)
"RTN","PRSACED6",42,0)
 S END=$L(C1,"^")
"RTN","PRSACED6",43,0)
 F LOOP=1:1:END S CD=CD+$P(C1,"^",LOOP)
"RTN","PRSACED6",44,0)
 I CD'=+VALUE W !,"THE CD VALUE DID NOT ADD UP CORRECTLY FOR ",$P($G(^PRSPC(DFN,0)),"^",1)
"RTN","PRSACED6",45,0)
 K CD,END Q
"RTN","PRSAENT")
0^1^B18682753^B18018727
"RTN","PRSAENT",1,0)
PRSAENT ;HISC/MGD-Entitlement String ;10/21/04
"RTN","PRSAENT",2,0)
 ;;4.0;PAID;**6,21,45,69,75,76,90,96,112**;Sep 21, 1995;Build 54
"RTN","PRSAENT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAENT",4,0)
 ;
"RTN","PRSAENT",5,0)
 ;VARS:
"RTN","PRSAENT",6,0)
 ; C0=employees 0 node of master record in file 450
"RTN","PRSAENT",7,0)
 ; NH= employees 8B normal hours
"RTN","PRSAENT",8,0)
 ; FLX= compressed/flextime code (0=none,C=compressed,F=flextime)
"RTN","PRSAENT",9,0)
 ; PMP= premium pay indicator 
"RTN","PRSAENT",10,0)
 ;     ( D = entitled Sun.,   F = entitled Sat./Sun.,
"RTN","PRSAENT",11,0)
 ;       E = entitled variable Sat./Sun. premium pay,
"RTN","PRSAENT",12,0)
 ;       G = entitled variable Sun. prem pay
"RTN","PRSAENT",13,0)
 ;       X = title 5 employees
"RTN","PRSAENT",14,0)
 ;       R, C, O = 3 types of firefighters )
"RTN","PRSAENT",15,0)
 ; AC= 3 single char codes concat. w/o delims + a possible 4th char.
"RTN","PRSAENT",16,0)
 ; AC= PP_DutyBasis(full-1,part-2,intermit-3)_FLSA(E=Exempt,N=NonExempt)
"RTN","PRSAENT",17,0)
 ;     _(*EWXY8BT02S9P)
"RTN","PRSAENT",18,0)
 ; PP= employees pay plan (possible chars 0AEFGJKLMNPQRSTUWXY)
"RTN","PRSAENT",19,0)
 ; PB= pay basis-code for time condition for computing pay.
"RTN","PRSAENT",20,0)
 ; TA= type of appointment (career, career conditional, etc.)
"RTN","PRSAENT",21,0)
 ; OCC= 4 digit cost center for fund appropriation accounting
"RTN","PRSAENT",22,0)
 ; LVG= one digit code for employees leave group.
"RTN","PRSAENT",23,0)
 ; ASS= specialty assignment of physicians,dentists, nurses,
"RTN","PRSAENT",24,0)
 ;      summer employees,trainees and other special programs.
"RTN","PRSAENT",25,0)
 ; ENT= 39 character entitlement string
"RTN","PRSAENT",26,0)
 ; PMP = Premium Pay Code
"RTN","PRSAENT",27,0)
 ;
"RTN","PRSAENT",28,0)
 N PAYPDTMP,PPLOLD,DUTYTEMP,FLSATEMP
"RTN","PRSAENT",29,0)
 ;
"RTN","PRSAENT",30,0)
 S C0=^PRSPC(DFN,0)
"RTN","PRSAENT",31,0)
 ;
"RTN","PRSAENT",32,0)
 ; pay plan in master record.
"RTN","PRSAENT",33,0)
 S PP=$P(C0,"^",21)
"RTN","PRSAENT",34,0)
 ;
"RTN","PRSAENT",35,0)
 ;=====================================================================
"RTN","PRSAENT",36,0)
 ; duty basis from master record
"RTN","PRSAENT",37,0)
 S DUTYTEMP=$P(C0,"^",10)
"RTN","PRSAENT",38,0)
 ;
"RTN","PRSAENT",39,0)
 ; FLSA indicator from master record
"RTN","PRSAENT",40,0)
 S FLSATEMP=$P(C0,"^",12)
"RTN","PRSAENT",41,0)
 ;
"RTN","PRSAENT",42,0)
 ;Make sure we've called this routine from an entry point that uses
"RTN","PRSAENT",43,0)
 ;PY for pay period.  A few reports, call PRSAENT from TYPSTF^PRSRUT0
"RTN","PRSAENT",44,0)
 ;and the reports aren't concerned about differing pay plans from 
"RTN","PRSAENT",45,0)
 ;other pay periods.
"RTN","PRSAENT",46,0)
 ;
"RTN","PRSAENT",47,0)
 I +($G(PY))>0 D
"RTN","PRSAENT",48,0)
 .S PAYPDTMP=$P($G(^PRST(458,+PY,0)),"^") ;pay period we're working with.
"RTN","PRSAENT",49,0)
 .S PPLOLD=$$OLDPP^PRS8UT(PAYPDTMP,+DFN) ;pay plan from PAYPDTMP.
"RTN","PRSAENT",50,0)
 .;if we find an old pay plan and it's different than the master record
"RTN","PRSAENT",51,0)
 .;use the old pay plan to determine VCS or FEE.
"RTN","PRSAENT",52,0)
 .I PPLOLD'=0,(PP'=PPLOLD) D
"RTN","PRSAENT",53,0)
 ..   S PP=PPLOLD
"RTN","PRSAENT",54,0)
 ..   S DUTYTEMP=OLDPP("DUTYBS")
"RTN","PRSAENT",55,0)
 ;=====================================================================
"RTN","PRSAENT",56,0)
 ;
"RTN","PRSAENT",57,0)
 ; Numeric Pay plans are all Wage grade. Set them to 0.
"RTN","PRSAENT",58,0)
 S:PP?1N PP=0
"RTN","PRSAENT",59,0)
 ;
"RTN","PRSAENT",60,0)
 ;
"RTN","PRSAENT",61,0)
 S:"BC"[PP PP="A"
"RTN","PRSAENT",62,0)
 I "0AEFGJKLMNPQRSTUWXY"'[PP D NO Q
"RTN","PRSAENT",63,0)
 S NH=+$P(C0,"^",16)
"RTN","PRSAENT",64,0)
 S FLX=$P($G(^PRSPC(DFN,1)),"^",7)
"RTN","PRSAENT",65,0)
 S PMP=$P($G(^PRSPC(DFN,"PREMIUM")),"^",6)
"RTN","PRSAENT",66,0)
 S AC=PP_DUTYTEMP_FLSATEMP
"RTN","PRSAENT",67,0)
 I $L(AC)'=3 D NO Q
"RTN","PRSAENT",68,0)
 ;
"RTN","PRSAENT",69,0)
 ;
"RTN","PRSAENT",70,0)
 D @PP
"RTN","PRSAENT",71,0)
 D FND
"RTN","PRSAENT",72,0)
 Q
"RTN","PRSAENT",73,0)
 ;===========================================================
"RTN","PRSAENT",74,0)
 ;
"RTN","PRSAENT",75,0)
0 Q
"RTN","PRSAENT",76,0)
 ;
"RTN","PRSAENT",77,0)
A ;patch 45: firefighters entitlements are based on PMP Codes.  
"RTN","PRSAENT",78,0)
 ; Code O still uses nh>80 to determine entitlement. 
"RTN","PRSAENT",79,0)
 I "RC"[PMP S AC=AC_PMP Q
"RTN","PRSAENT",80,0)
 ;
"RTN","PRSAENT",81,0)
 ;This check does not concern itself with whether or not a code
"RTN","PRSAENT",82,0)
 ; O is present.  Simply if not a code R or C then an over 80
"RTN","PRSAENT",83,0)
 ; must be a code O firefighter under the rules implemented in 
"RTN","PRSAENT",84,0)
 ; patch 45.  
"RTN","PRSAENT",85,0)
 ;
"RTN","PRSAENT",86,0)
 I "CR"'[PMP,NH>80 S AC=AC_"*" Q
"RTN","PRSAENT",87,0)
 ;
"RTN","PRSAENT",88,0)
 Q:PMP=""
"RTN","PRSAENT",89,0)
 I $E(AC,2)'=3,"WXY"[PMP S AC=AC_PMP Q
"RTN","PRSAENT",90,0)
 S:"EF"[PMP AC=AC_"E"
"RTN","PRSAENT",91,0)
 ;The following check is for Public Law 108-170
"RTN","PRSAENT",92,0)
 S:"STUV"[PMP AC=AC_PMP
"RTN","PRSAENT",93,0)
 Q
"RTN","PRSAENT",94,0)
E Q
"RTN","PRSAENT",95,0)
F Q
"RTN","PRSAENT",96,0)
G I $E(AC,2)<3 Q
"RTN","PRSAENT",97,0)
 S TA=$P(C0,"^",43) S:TA=8 AC=AC_"8" Q
"RTN","PRSAENT",98,0)
J Q
"RTN","PRSAENT",99,0)
K S:NH=48 AC=AC_"B" Q
"RTN","PRSAENT",100,0)
L I $E(AC,2)=2 S PB=$P(C0,"^",20) S:PB=0 AC=AC_"*" Q
"RTN","PRSAENT",101,0)
 I $E(AC,2)=3 S OCC=$P(C0,"^",17),OCC=+$E(OCC,5,6) S:OCC>20&(OCC<38) AC=AC_"*" Q
"RTN","PRSAENT",102,0)
 S LVG=$P(C0,"^",15) S:LVG=5 AC=AC_"*" Q
"RTN","PRSAENT",103,0)
M I $E(AC,2)=1,NH=48 S AC=AC_"B" Q
"RTN","PRSAENT",104,0)
 I $E(AC,2)=2,NH=80 S AC=AC_"R" Q
"RTN","PRSAENT",105,0)
 I $E(AC,2)=2 S PB=$P(C0,"^",20) I PB=0 S AC=AC_"0" Q
"RTN","PRSAENT",106,0)
 I $E(AC,2)=3 S PB=$P(C0,"^",20) I PB=2 S AC=AC_"2" Q
"RTN","PRSAENT",107,0)
 S OCC=$P(C0,"^",17) S:OCC="" OCC="*"
"RTN","PRSAENT",108,0)
 S:" 061056 061057 "[OCC AC=AC_"T"
"RTN","PRSAENT",109,0)
 S:" 061071 061072 061080 061083 061084 "[OCC AC=AC_"T"
"RTN","PRSAENT",110,0)
 S:" 060552 060556 "[OCC AC=AC_"T" Q
"RTN","PRSAENT",111,0)
N S ASS=$P(C0,"^",4),PB=$P(C0,"^",20)
"RTN","PRSAENT",112,0)
 ;The following check is for Public Law 108-170
"RTN","PRSAENT",113,0)
 I "^S^T^U^V^"[("^"_PMP_"^") S AC=AC_PMP Q
"RTN","PRSAENT",114,0)
 I AC="N2E",PB=0 S AC=AC_"0" Q
"RTN","PRSAENT",115,0)
 I $E(AC,2)=3,PB="S" S AC=AC_"$" Q
"RTN","PRSAENT",116,0)
 S OCC=$P(C0,"^",17) S:OCC="" OCC="*"
"RTN","PRSAENT",117,0)
 I OCC="069961" S AC=AC_"T" Q  ; Student Nurse Technician
"RTN","PRSAENT",118,0)
 I OCC="069964" S AC=AC_"T" Q  ; Student Nurse Technician
"RTN","PRSAENT",119,0)
 S AC=AC_$S(ASS="TR":"T",ASS?1"T"1N:"T",ASS?1"A"1N:"T",1:"") Q
"RTN","PRSAENT",120,0)
P Q
"RTN","PRSAENT",121,0)
Q I $E(AC,2)'=2 Q
"RTN","PRSAENT",122,0)
 S PB=$P(C0,"^",20) S:PB=0 AC=AC_"0" Q
"RTN","PRSAENT",123,0)
R Q
"RTN","PRSAENT",124,0)
S Q
"RTN","PRSAENT",125,0)
T I $E(AC,2)'=3 Q
"RTN","PRSAENT",126,0)
 S PB=$P(C0,"^",20) S:PB=9 AC=AC_"9" Q
"RTN","PRSAENT",127,0)
U S PB=$P(C0,"^",20) I $E(AC,3)="N",PB="P" S AC=AC_"P"
"RTN","PRSAENT",128,0)
 Q
"RTN","PRSAENT",129,0)
W Q
"RTN","PRSAENT",130,0)
X S:'NH AC=AC_"0" Q
"RTN","PRSAENT",131,0)
Y Q
"RTN","PRSAENT",132,0)
 ;
"RTN","PRSAENT",133,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSAENT",134,0)
FND ;Look up the 39 character entitlement string in the entitlement table
"RTN","PRSAENT",135,0)
 ;The lookup is based on the AC x-ref that matches the AC variable that
"RTN","PRSAENT",136,0)
 ;is built in this routine from the three 1 character codes from the 
"RTN","PRSAENT",137,0)
 ;450 fields (pay plan, duty basis, FLSA).
"RTN","PRSAENT",138,0)
 ;
"RTN","PRSAENT",139,0)
 S A1=$O(^PRST(457.5,"AC",AC,0))
"RTN","PRSAENT",140,0)
 D NO
"RTN","PRSAENT",141,0)
 I +A1 S ENT=^PRST(457.5,A1,1)
"RTN","PRSAENT",142,0)
 ; The following check was added to address the Hybrid employees
"RTN","PRSAENT",143,0)
 ; defined in Public Law 107-135.  These Hybrids do not have a
"RTN","PRSAENT",144,0)
 ; Premium Pay Indicator but are entitled to Saturday and Sunday
"RTN","PRSAENT",145,0)
 ; Premium Pay.
"RTN","PRSAENT",146,0)
 I $$HYBRID^PRSAENT1(DFN) D
"RTN","PRSAENT",147,0)
 . S $E(ENT,8,9)="11"
"RTN","PRSAENT",148,0)
 ;
"RTN","PRSAENT",149,0)
 Q
"RTN","PRSAENT",150,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSAENT",151,0)
NO S ENT=""
"RTN","PRSAENT",152,0)
 Q
"RTN","PRSAENT",153,0)
 ;
"RTN","PRSAENT",154,0)
MLINHRS(IEN) ; 
"RTN","PRSAENT",155,0)
 ;----------------------------------------------------------------------
"RTN","PRSAENT",156,0)
 ; Determine if the employee is entitled to Military Leave in hours.
"RTN","PRSAENT",157,0)
 ;
"RTN","PRSAENT",158,0)
 ; Input Vars:
"RTN","PRSAENT",159,0)
 ;  IEN - the ien number of the employee in the PAID EMPLOYEE (#450)
"RTN","PRSAENT",160,0)
 ;        file.
"RTN","PRSAENT",161,0)
 ;
"RTN","PRSAENT",162,0)
 ; Local Vars:
"RTN","PRSAENT",163,0)
 ;  DATA - the 0 node of the employee from the PAID EMPLOYEE (#450)
"RTN","PRSAENT",164,0)
 ;         file.
"RTN","PRSAENT",165,0)
 ;    DB - Duty Basis    field #9    from the #450 file.
"RTN","PRSAENT",166,0)
 ;    NH - Normal Hours  field # 15  from the #450 file.
"RTN","PRSAENT",167,0)
 ;    PP - Pay Plan      field # 20  from the #450 file.
"RTN","PRSAENT",168,0)
 ;
"RTN","PRSAENT",169,0)
 ; Output:
"RTN","PRSAENT",170,0)
 ;  1 : Entitled to ML in hours.
"RTN","PRSAENT",171,0)
 ;  0 : Entitled to ML in days.
"RTN","PRSAENT",172,0)
 ;  X : Some of the required fields were not defined or the employee
"RTN","PRSAENT",173,0)
 ;      is not entitled to Military Leave.
"RTN","PRSAENT",174,0)
 ;----------------------------------------------------------------------
"RTN","PRSAENT",175,0)
 ; Quit if no IEN passed in
"RTN","PRSAENT",176,0)
 ;
"RTN","PRSAENT",177,0)
 Q:'+IEN "X"
"RTN","PRSAENT",178,0)
 ;
"RTN","PRSAENT",179,0)
 ; Verify that ENT is defined.  If not call PRSAENT to define it.
"RTN","PRSAENT",180,0)
 ;
"RTN","PRSAENT",181,0)
 I '$D(ENT) D PRSAENT
"RTN","PRSAENT",182,0)
 ;
"RTN","PRSAENT",183,0)
 ; Quit if the Entitlement string is not defined for the employee
"RTN","PRSAENT",184,0)
 ;
"RTN","PRSAENT",185,0)
 Q:ENT="" "X"
"RTN","PRSAENT",186,0)
 ;
"RTN","PRSAENT",187,0)
 ; Quit if the employee is not entitled to Military Leave
"RTN","PRSAENT",188,0)
 ;
"RTN","PRSAENT",189,0)
 Q:'$E(ENT,34) "X"
"RTN","PRSAENT",190,0)
 ;
"RTN","PRSAENT",191,0)
 N DATA,PP,DB,NH
"RTN","PRSAENT",192,0)
 S DATA=$G(^PRSPC(IEN,0))
"RTN","PRSAENT",193,0)
 Q:DATA="" "X"
"RTN","PRSAENT",194,0)
 S DB=$P(DATA,U,10),NH=$P(DATA,U,16),PP=$P(DATA,U,21)
"RTN","PRSAENT",195,0)
 Q:DB=""!(NH="")!(PP="") "X" ; Quit if DB or NH or PP is not defined.
"RTN","PRSAENT",196,0)
 ;
"RTN","PRSAENT",197,0)
 ; Check for ML in Days
"RTN","PRSAENT",198,0)
 ;
"RTN","PRSAENT",199,0)
 I DB=1,NH=0,"^J^L^P^Q^X^"[PP  Q 0
"RTN","PRSAENT",200,0)
 ;
"RTN","PRSAENT",201,0)
 ; Otherwise the employee is entitled to ML in hours.
"RTN","PRSAENT",202,0)
 ;
"RTN","PRSAENT",203,0)
 Q 1
"RTN","PRSAENX")
0^17^B5045459^B4733733
"RTN","PRSAENX",1,0)
PRSAENX ; HISC/REL-List Entitlement ;3/12/93  12:58
"RTN","PRSAENX",2,0)
 ;;4.0;PAID;**34,112**;Sep 21, 1995;Build 54
"RTN","PRSAENX",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAENX",4,0)
 K DIC S DIC="^PRST(457.5,",DIC(0)="AEQM" W ! D ^DIC G:Y<1 EX S ENT=^PRST(457.5,+Y,1),NAM=$P(Y,"^",2)
"RTN","PRSAENX",5,0)
 W ! K IOP,%ZIS S %ZIS("A")="Select Device: ",%ZIS="MQ" D ^%ZIS K %ZIS,IOP G:POP EX
"RTN","PRSAENX",6,0)
 I $D(IO("Q")) S PRSAPGM="Q1^PRSAENX",PRSALST="NAM^ENT" D QUE^PRSAUTL G EX
"RTN","PRSAENX",7,0)
 U IO D Q1 D ^%ZISC K %ZIS,IOP G EX
"RTN","PRSAENX",8,0)
Q1 ; Display Entitlement Entry
"RTN","PRSAENX",9,0)
 W:$E(IOST,1,2)="C-" @IOF W !?29,"PAY ENTITLEMENT TABLE"
"RTN","PRSAENX",10,0)
 W !,"Name: ",NAM,! D Q2
"RTN","PRSAENX",11,0)
 I $E(IOST,1,2)="C-" R !!,"Press RETURN to Continue. ",X:DTIME
"RTN","PRSAENX",12,0)
 Q
"RTN","PRSAENX",13,0)
Q2 ; Display Entitlement List
"RTN","PRSAENX",14,0)
 S M("H")="Hrs.",M("D")="Days",M(0)="No",M(1)="Yes"
"RTN","PRSAENX",15,0)
 F K=1:1:19 W !,$P($T(ENT+K),";;",2),?30,M($E(ENT,K)),?40,$P($T(ENT+K+19),";;",2),?70,M($E(ENT,K+19))
"RTN","PRSAENX",16,0)
 Q
"RTN","PRSAENX",17,0)
EX G KILL^XUSCLEAN
"RTN","PRSAENX",18,0)
ENT ;;
"RTN","PRSAENX",19,0)
1 ;;Regular Scheduled
"RTN","PRSAENX",20,0)
2 ;;Regular Unscheduled
"RTN","PRSAENX",21,0)
3 ;;FF Reg. Sch. Hrs. Over 53
"RTN","PRSAENX",22,0)
4 ;;Reserved for future use
"RTN","PRSAENX",23,0)
5 ;;Recess Periods
"RTN","PRSAENX",24,0)
6 ;;Night Differential - 2
"RTN","PRSAENX",25,0)
7 ;;Night Differential - 3
"RTN","PRSAENX",26,0)
8 ;;Saturday Premium
"RTN","PRSAENX",27,0)
9 ;;Sunday - Day
"RTN","PRSAENX",28,0)
10 ;;Sunday - 2
"RTN","PRSAENX",29,0)
11 ;;Sunday - 3
"RTN","PRSAENX",30,0)
12 ;;Overtime - Day
"RTN","PRSAENX",31,0)
13 ;;Overtime - 2
"RTN","PRSAENX",32,0)
14 ;;Overtime - 3
"RTN","PRSAENX",33,0)
15 ;;Hazardous Duty
"RTN","PRSAENX",34,0)
16 ;;Environmental Differential
"RTN","PRSAENX",35,0)
17 ;;Scheduled CB OT
"RTN","PRSAENX",36,0)
18 ;;Travel OT
"RTN","PRSAENX",37,0)
19 ;;Hrs. >8 - Day
"RTN","PRSAENX",38,0)
20 ;;Hrs. > 8 - 2
"RTN","PRSAENX",39,0)
21 ;;Hrs. > 8 - 3
"RTN","PRSAENX",40,0)
22 ;;Holiday - Day
"RTN","PRSAENX",41,0)
23 ;;Holiday - 2
"RTN","PRSAENX",42,0)
24 ;;Holiday - 3
"RTN","PRSAENX",43,0)
25 ;;Holiday OT
"RTN","PRSAENX",44,0)
26 ;;On Call
"RTN","PRSAENX",45,0)
27 ;;Sleep Time
"RTN","PRSAENX",46,0)
28 ;;CompTime/CreditHrs Earn/Use
"RTN","PRSAENX",47,0)
29 ;;Standby
"RTN","PRSAENX",48,0)
30 ;;Annual/Restored Leave
"RTN","PRSAENX",49,0)
31 ;;Sick Leave
"RTN","PRSAENX",50,0)
32 ;;NonPay Annual Leave
"RTN","PRSAENX",51,0)
33 ;;AWOL/Susp/LWOP
"RTN","PRSAENX",52,0)
34 ;;Military Leave
"RTN","PRSAENX",53,0)
35 ;;Authorized Absence
"RTN","PRSAENX",54,0)
36 ;;Non-Pay
"RTN","PRSAENX",55,0)
37 ;;Continuation of Pay
"RTN","PRSAENX",56,0)
38 ;;VCS Commission Sales
"RTN","PRSAENX",57,0)
39 ;;FireFighter Overtime
"RTN","PRSALVS")
0^18^B19299804^B16330153
"RTN","PRSALVS",1,0)
PRSALVS ;HISC/REL-Display Leave Request ;11/21/06
"RTN","PRSALVS",2,0)
 ;;4.0;PAID;**9,69,112**;Sep 21, 1995;Build 54
"RTN","PRSALVS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSALVS",4,0)
 S DFN="",SSN=$P($G(^VA(200,DUZ,1)),"^",9) I SSN'="" S DFN=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSALVS",5,0)
 I 'DFN W !!,*7,"Your SSN was not found in both the New Person & Employee File!" G EX
"RTN","PRSALVS",6,0)
 D HDR
"RTN","PRSALVS",7,0)
 K %DT S %DT="AEX",%DT("A")="Begin with Date: ",%DT("B")="T" W ! D ^%DT K %DT S:$D(DTOUT) Y=0 G:Y<1 EX S EDT=9999999-Y
"RTN","PRSALVS",8,0)
 W ! S NUM=0 D DISP,H1 G EX
"RTN","PRSALVS",9,0)
DISP ; Display Leave Requests
"RTN","PRSALVS",10,0)
 S LVT=";"_$P(^DD(458.1,6,0),"^",3),LVS=";"_$P(^DD(458.1,8,0),"^",3),CNT=0,QT=0 K:NUM R
"RTN","PRSALVS",11,0)
 F DTI=0:0 S DTI=$O(^PRST(458.1,"AD",DFN,DTI)) Q:DTI=""!(DTI>EDT)  F DA=0:0 S DA=$O(^PRST(458.1,"AD",DFN,DTI,DA)) Q:DA=""  D LST G:QT D0
"RTN","PRSALVS",12,0)
 W:'CNT !,"No Requests on File."
"RTN","PRSALVS",13,0)
D0 Q
"RTN","PRSALVS",14,0)
LST ; Display Request
"RTN","PRSALVS",15,0)
 S Z=$G(^PRST(458.1,DA,0)) Q:Z=""  Q:$P(Z,"^",9)="X"  S SCOM=$P($G(^(1)),"^",1) I NUM,$P(Z,"^",9)'="R" Q:"D"[$P(Z,"^",9)  D  Q:Z=""
"RTN","PRSALVS",16,0)
 .S X=$P(Z,"^",3),X=$G(^PRST(458,"AD",+X))
"RTN","PRSALVS",17,0)
 .S Y=$G(^PRST(458,+$P(X,"^",1),"E",DFN,"D",+$P(X,"^",2),2))
"RTN","PRSALVS",18,0)
 .Q:Y'[$P(Z,"^",7)  S Z="" Q
"RTN","PRSALVS",19,0)
 I CNT D:$Y>(IOSL-4) H1 Q:QT
"RTN","PRSALVS",20,0)
 S CNT=CNT+1 W ! I NUM W $J(CNT,2)," " S R(CNT)=DA
"RTN","PRSALVS",21,0)
 W $P(Z,"^",4)," " S X=$P(Z,"^",3) D DTP^PRSAPPU W Y," to ",$P(Z,"^",6)," "
"RTN","PRSALVS",22,0)
 S X=$P(Z,"^",5) D DTP^PRSAPPU W Y," "
"RTN","PRSALVS",23,0)
 S X=$P(Z,"^",15) I X W X," ",$S($P(Z,"^",16)="D":"days",1:"hrs")," "
"RTN","PRSALVS",24,0)
 S X=$P(Z,"^",7),%=$F(LVT,";"_X_":") I %>0 W $P($E(LVT,%,999),";",1)," "
"RTN","PRSALVS",25,0)
 S X=$P(Z,"^",9)
"RTN","PRSALVS",26,0)
 S %=$F(LVS,";"_X_":") I %>0 W $P($E(LVS,%,999),";",1)
"RTN","PRSALVS",27,0)
 S X=$P(Z,"^",8) W:X'="" !?5,X S Y=$P(Z,"^",11) D DTP^PRSAUDP W !?5,"Requested: ",Y
"RTN","PRSALVS",28,0)
 W:SCOM'="" !?5,"Supr: ",SCOM Q
"RTN","PRSALVS",29,0)
BAL ; Leave Balance
"RTN","PRSALVS",30,0)
 N CNT,PPE S Z=$P($G(^PRST(458.1,DA,0)),"^",7),(BAL,INC,CNT)="" Q:Z=""
"RTN","PRSALVS",31,0)
 I "CB AD"[Z N Z S Z="SL"
"RTN","PRSALVS",32,0)
 Q:"AL SL CU ML RL"'[Z  D ^PRSALVT I NH'=48!(DB'=1) G B0
"RTN","PRSALVS",33,0)
 I Z="AL" S BAL=$P($G(^PRSPC(DFN,"BAYLOR")),"^",1) G B2
"RTN","PRSALVS",34,0)
 I Z="SL" S BAL=$P($G(^PRSPC(DFN,"BAYLOR")),"^",13) G B2
"RTN","PRSALVS",35,0)
 I Z="RL" S BAL=$G(^PRSPC(DFN,"BAYLOR")),BAL=$P(BAL,"^",9)+$P(BAL,"^",10) G B2
"RTN","PRSALVS",36,0)
 G B1
"RTN","PRSALVS",37,0)
B0 I Z="AL" S BAL=$P($G(^PRSPC(DFN,"ANNUAL")),"^",3) G B2
"RTN","PRSALVS",38,0)
 I Z="SL" S BAL=$P($G(^PRSPC(DFN,"SICK")),"^",3) G B2
"RTN","PRSALVS",39,0)
 I Z="RL" S BAL=$G(^PRSPC(DFN,"ANNUAL")),BAL=$P(BAL,"^",10)+$P(BAL,"^",11) G B2
"RTN","PRSALVS",40,0)
B1 I Z="ML" S BAL=$P($G(^PRSPC(DFN,"MILITARY")),"^",1) G B2
"RTN","PRSALVS",41,0)
 Q:Z'="CU"  S Z="CT",Y=$G(^PRSPC(DFN,"COMP"))
"RTN","PRSALVS",42,0)
 F K=1:1:8 S BAL=BAL+$P(Y,"^",K)
"RTN","PRSALVS",43,0)
B2 S LST=+$P($G(^PRSPC(DFN,"MISC4")),"^",16),D1=DT D PP^PRSAPPU S YR=$P(PPE,"-",1)
"RTN","PRSALVS",44,0)
 S D1=+$P(PPE,"-",2),YR=$S(D1'<LST:YR,1:$E(199+YR,2,3)),PPE=YR_"-"_$S(LST>9:LST,1:"0"_LST)
"RTN","PRSALVS",45,0)
 S PPI=$O(^PRST(458,"B",PPE,0)),SDT=DT I PPI S D1=$P($G(^PRST(458,PPI,2)),"^",14),SDT=$P($G(^(1)),"^",14)
"RTN","PRSALVS",46,0)
 I PRT W !,Z," Leave Balance: ",$S(Z="ML":$J(BAL,13,2),1:$J(BAL,13,3))," as of ",D1
"RTN","PRSALVS",47,0)
 I "AL SL"'[Z Q
"RTN","PRSALVS",48,0)
 S EDT=$P($G(^PRST(458.1,DA,0)),"^",5) I EDT'>SDT G B3
"RTN","PRSALVS",49,0)
 S X1=EDT,X2=SDT D ^%DTC S INC=X+13\14*$S(Z="AL":AINC,1:SINC)
"RTN","PRSALVS",50,0)
 I NH=80,DB=2 S X1=EDT,X2=X+13\14*14-X D C^%DTC S INC=INC-$$RT(X,SDT) S:INC<0 INC=0
"RTN","PRSALVS",51,0)
 I PRT W !,Z," Estimated Earnings: ",$J(INC,8,3)
"RTN","PRSALVS",52,0)
 S LST=9999999-SDT,CNT=0
"RTN","PRSALVS",53,0)
 F DTI=0:0 S DTI=$O(^PRST(458.1,"AD",DFN,DTI)) Q:DTI=""!(DTI>LST)  F RDA=0:0 S RDA=$O(^PRST(458.1,"AD",DFN,DTI,RDA)) Q:RDA=""  I $G(^(RDA))'>EDT D
"RTN","PRSALVS",54,0)
 .S Z1=$G(^PRST(458.1,RDA,0)) S X1=$P(Z1,"^",7) S:"CB AD"[X1 X1="SL" Q:X1'=Z  Q:"AR"'[$P(Z1,"^",9)
"RTN","PRSALVS",55,0)
 .I NH=72,DB=1 S $P(Z1,U,15)=$$LC($P(Z1,U,15))
"RTN","PRSALVS",56,0)
 .S CNT=CNT+$P(Z1,"^",15)
"RTN","PRSALVS",57,0)
 .I $P(Z1,"^",3)'<SDT,$P(Z1,"^",5)'>EDT Q
"RTN","PRSALVS",58,0)
 .S X1=$P(Z1,"^",5),X2=$P(Z1,"^",3) D ^%DTC S Z3=$P(Z1,"^",15)/$S($G(X):X,1:1)
"RTN","PRSALVS",59,0)
 .I $P(Z1,"^",3)<SDT S X1=SDT,X2=$P(Z1,"^",3) D ^%DTC  I X>0 S CNT=CNT-(X*Z3)
"RTN","PRSALVS",60,0)
 .I $P(Z1,"^",5)>EDT S X1=$P(Z1,"^",5),X2=EDT D ^%DTC I X>0 S CNT=CNT-(X*Z3)
"RTN","PRSALVS",61,0)
 .Q
"RTN","PRSALVS",62,0)
 I PRT W !,Z," Estimated Usage: ",$J(CNT,11,3)
"RTN","PRSALVS",63,0)
B3 S BAL=BAL+INC-CNT I PRT W !,Z," Projected Balance: ",$J(BAL,9,3)
"RTN","PRSALVS",64,0)
 I PRT,BAL<0 W !,"Warning: Approval MAY result in a negative leave balance."
"RTN","PRSALVS",65,0)
 Q
"RTN","PRSALVS",66,0)
HDR ; Display Header
"RTN","PRSALVS",67,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM",!?32,"LEAVE REQUESTS"
"RTN","PRSALVS",68,0)
 S X=$G(^PRSPC(DFN,0)) W !!,$P(X,"^",1) S X=$P(X,"^",9) I X W ?50,"XXX-XX-",$E(X,6,9) Q
"RTN","PRSALVS",69,0)
H1 I $E(IOST,1,2)="C-" R !!,"Press RETURN to Continue.",X:DTIME S:'$T!(X["^") QT=1 I 'QT W @IOF,!
"RTN","PRSALVS",70,0)
 Q
"RTN","PRSALVS",71,0)
EX G KILL^XUSCLEAN
"RTN","PRSALVS",72,0)
 ;Multiply leave request by 1.111 and round down to the quarter hour
"RTN","PRSALVS",73,0)
 ;for 36/40 nurses
"RTN","PRSALVS",74,0)
LC(X) S X=X*1.111\.25*.25 Q X
"RTN","PRSALVS",75,0)
 ;Calculate number of Recess hours scheduled for a 9-month AWS Nurse 
"RTN","PRSALVS",76,0)
 ;before the date leave has been requested for
"RTN","PRSALVS",77,0)
RT(EDT,SDT) N SFY,EFY,T,WK
"RTN","PRSALVS",78,0)
 S SFY=$E($P($$GETFSCYR^PRSARC04(SDT),U,2),3,6),EFY=$E($P($$GETFSCYR^PRSARC04(EDT),U,2),3,6)
"RTN","PRSALVS",79,0)
 D RES^PRSARC05(.WK,DFN,SFY,EFY,SDT,EDT) S (I,T)=0 F  S I=$O(WK(I)) Q:I=""  S T=T+WK(I)
"RTN","PRSALVS",80,0)
 ;Calculate the number of hours of leave that would have been
"RTN","PRSALVS",81,0)
 ;accumulated for the time the nurse was on recess.
"RTN","PRSALVS",82,0)
 Q T/80*$S(Z="AL":AINC,1:SINC)\.25*.25
"RTN","PRSAOTT")
0^32^B32642391^B31511741
"RTN","PRSAOTT",1,0)
PRSAOTT ;WCIOFO/JAH/PLT- 8B CODES ARRAY.  COMPARE OT (8B-vs-APPROVED). ;11/29/2006
"RTN","PRSAOTT",2,0)
 ;;4.0;PAID;**37,43,54,112**;Sep 21, 1995;Build 54
"RTN","PRSAOTT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAOTT",4,0)
 ;
"RTN","PRSAOTT",5,0)
 ;Function & subroutine Index for this routine.
"RTN","PRSAOTT",6,0)
 ;
"RTN","PRSAOTT",7,0)
 ; APOTWEEK(PAYPRD,WEEKID,EMP450).....return all approved OT in a week.
"RTN","PRSAOTT",8,0)
 ; ARRAY8B(RECORD)...............Build employee 8B array for payperiod.
"RTN","PRSAOTT",9,0)
 ; CODES(WEEK)........return string of valid time codes for week 1,2,3.
"RTN","PRSAOTT",10,0)
 ; GET8BCDS(TT8B).................return timecode portion of 8B string.
"RTN","PRSAOTT",11,0)
 ; GET8BOT(EMPIEN,WEEK,TT8B)..........return all OT in an 8b string.
"RTN","PRSAOTT",12,0)
 ; GETOTS(PP,EI,T8,WK,.O8,.OA)......Get overtimes (tt8b & approved).
"RTN","PRSAOTT",13,0)
 ; OTREQ(REC).................returns true if Request is type Overtime.
"RTN","PRSAOTT",14,0)
 ; OTAPPR(REC)...................returns true if a Request is Approved.
"RTN","PRSAOTT",15,0)
 ; WEEKRNG(PPE,WEEK,FIRST,LAST)........1st & last FM days in a pp week.
"RTN","PRSAOTT",16,0)
 ; WARNSUP(PPE,EI,E8B,WK,OTERR,O8,OA)... check ot's for a week & warn.
"RTN","PRSAOTT",17,0)
 Q
"RTN","PRSAOTT",18,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",19,0)
GETOTS(PP,EI,T8,WK,O8,OA) ;Get overtimes (tt8b & approved)
"RTN","PRSAOTT",20,0)
 ; Sample call:
"RTN","PRSAOTT",21,0)
 ;   D GETOTS("98-05",1255,TT8BSTRING,1,.O8,.OA)
"RTN","PRSAOTT",22,0)
 ;   where TT8BSTRING might be =
"RTN","PRSAOTT",23,0)
 ;   "658229548868WIL   8B268380A106 AN320NA060DA030NR300SE080CD000790"
"RTN","PRSAOTT",24,0)
 ;
"RTN","PRSAOTT",25,0)
 ; subroutine returns overtime from request file & TT8B string for
"RTN","PRSAOTT",26,0)
 ; week specified in parameter 4
"RTN","PRSAOTT",27,0)
 ;
"RTN","PRSAOTT",28,0)
 ;  Input:  PP - Pay period in format YY-PP.
"RTN","PRSAOTT",29,0)
 ;          EI - Employees ien from file 450.
"RTN","PRSAOTT",30,0)
 ;          T8   - Entire 8B record.  Stored in
"RTN","PRSAOTT",31,0)
 ;                   ^PRST(458,PP,"E",EI,5).
"RTN","PRSAOTT",32,0)
 ;  Output: O8 - TT8B overtime calculated
"RTN","PRSAOTT",33,0)
 ;          OA - approved overtime in request fiLE
"RTN","PRSAOTT",34,0)
 ;
"RTN","PRSAOTT",35,0)
 S (OA,O8)=0
"RTN","PRSAOTT",36,0)
 Q:((WK'=1)&(WK'=2))
"RTN","PRSAOTT",37,0)
 ;
"RTN","PRSAOTT",38,0)
 S O8=$$GET8BOT^PRSAOTT(EI,WK,T8) ;    get all OT from 8b string
"RTN","PRSAOTT",39,0)
 S OA=$$APOTWEEK^PRSAOTT(PP,WK,EI) ;      get approved overtime
"RTN","PRSAOTT",40,0)
 Q
"RTN","PRSAOTT",41,0)
 ;
"RTN","PRSAOTT",42,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",43,0)
WARNSUP(PPE,EI,E8B,WK,OTERR,O8,OA) ;Gets overtime from request
"RTN","PRSAOTT",44,0)
 ; file & TT8B string & displays warning if 8B string has more
"RTN","PRSAOTT",45,0)
 ; OT than approved requests.
"RTN","PRSAOTT",46,0)
 ;
"RTN","PRSAOTT",47,0)
 ;Input: PPE - (P)ay (P)eriod (E)xternal in format YY-PP.
"RTN","PRSAOTT",48,0)
 ;       EI  - (E)mployees (I)nternal entry # from file 450.
"RTN","PRSAOTT",49,0)
 ;       E8B - (E)ntire (8B) record.  Stored in ^PRST(458,PP,"E",EI,5).
"RTN","PRSAOTT",50,0)
 ;       WK - week number 1 or 2 of pay period.
"RTN","PRSAOTT",51,0)
 ;Output: Warning message to screen.
"RTN","PRSAOTT",52,0)
 ;Local: OA - (O)vertime (A)pproved  from requests file.
"RTN","PRSAOTT",53,0)
 ;       O8 - (O)vertime totaled from (8)b string.
"RTN","PRSAOTT",54,0)
 ;
"RTN","PRSAOTT",55,0)
 S (OA,O8,OTERR)=0
"RTN","PRSAOTT",56,0)
 ; Compare week of approved ot requests to 8B OT.
"RTN","PRSAOTT",57,0)
 S O8=$$GET8BOT(EI,WK,E8B) ;   get all OT from 8b string
"RTN","PRSAOTT",58,0)
 S OA=$$APOTWEEK(PPE,WK,EI) ;     get approved overtime
"RTN","PRSAOTT",59,0)
 I OA<O8 D DISPLAY(EI,O8,OA,WK) S OTERR=1 ; Display warning if calc>apprv
"RTN","PRSAOTT",60,0)
 Q
"RTN","PRSAOTT",61,0)
 ;
"RTN","PRSAOTT",62,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",63,0)
DISPLAY(IEN,OT8B,OTRQ,WK) ;Output warning message.  8b ot > approved ot.
"RTN","PRSAOTT",64,0)
 ;
"RTN","PRSAOTT",65,0)
 ;  Input:  IEN - employees 450 ien.
"RTN","PRSAOTT",66,0)
 ;          OT8B - employees total overtime calculated from 8b string.
"RTN","PRSAOTT",67,0)
 ;          OTRQ - employees total approved OT request's from 458.2
"RTN","PRSAOTT",68,0)
 ;          WK   - week 1 or 2 of payperiod.
"RTN","PRSAOTT",69,0)
 ;
"RTN","PRSAOTT",70,0)
 W !,?3,"WARNING: Week ",WK," -Overtime being paid (",OT8B,") is more than approved (",OTRQ,")."
"RTN","PRSAOTT",71,0)
 Q
"RTN","PRSAOTT",72,0)
 ;
"RTN","PRSAOTT",73,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",74,0)
GET8BOT(EMPIEN,WEEK,TT8B) ;
"RTN","PRSAOTT",75,0)
 ;  Output:  Function returns total hrs of overtime that is coded
"RTN","PRSAOTT",76,0)
 ;           into  TT8B string for either week (1) or (2).
"RTN","PRSAOTT",77,0)
 ;  Input:   EMPIEN - internal entry # of employee to check 8B overtime
"RTN","PRSAOTT",78,0)
 ;           WEEK   - week (1) or (2) of pay period to check 8B overtime.
"RTN","PRSAOTT",79,0)
 ;           TT8B   - full 8B string stub & values.
"RTN","PRSAOTT",80,0)
 ;
"RTN","PRSAOTT",81,0)
 N PPIEN,TT8BOT,OTCODES,CODE,OTTOTAL,OTTMP
"RTN","PRSAOTT",82,0)
 S OTTOTAL=0
"RTN","PRSAOTT",83,0)
 ;
"RTN","PRSAOTT",84,0)
 ; get time coded portion of 8B string
"RTN","PRSAOTT",85,0)
 ;
"RTN","PRSAOTT",86,0)
 S TT8B=$$GET8BCDS(TT8B)
"RTN","PRSAOTT",87,0)
 Q:$L(TT8B)<2 OTTOTAL ;    Aint no coded OT if there aint no codes.
"RTN","PRSAOTT",88,0)
 ;
"RTN","PRSAOTT",89,0)
 ; create array of codes & values for this 8b string.
"RTN","PRSAOTT",90,0)
 D ARRAY8B(TT8B)
"RTN","PRSAOTT",91,0)
 ;
"RTN","PRSAOTT",92,0)
 ; create string with all overtime codes.
"RTN","PRSAOTT",93,0)
 S OTCODES=$S(WEEK=1:"^DA^DB^DC^OA^OB^OC^OK^",1:"^DE^DF^DG^OE^OF^OG^OS^")
"RTN","PRSAOTT",94,0)
 ; Only count total regular hours @ OT rate when not a firefighter
"RTN","PRSAOTT",95,0)
 ; with premium pay code "R" or "C". These firefighters get RA/RE from
"RTN","PRSAOTT",96,0)
 ; their scheduled tour and do not need to have overtime requests. *54
"RTN","PRSAOTT",97,0)
 I "^R^C^"'[(U_$P($G(^PRSPC(EMPIEN,"PREMIUM")),U,6)_U) D
"RTN","PRSAOTT",98,0)
 . S OTCODES=OTCODES_$S(WEEK=1:"RA^RB^RC^",1:"RE^RF^RG^")
"RTN","PRSAOTT",99,0)
 ;
"RTN","PRSAOTT",100,0)
 ; loop thru employees 8b array to see if they have any of
"RTN","PRSAOTT",101,0)
 ; overtime codes & add any of them up.
"RTN","PRSAOTT",102,0)
 ;
"RTN","PRSAOTT",103,0)
 S CODE=""
"RTN","PRSAOTT",104,0)
 F  S CODE=$O(TT8B(WEEK,CODE)) Q:CODE=""  D
"RTN","PRSAOTT",105,0)
 .  I OTCODES[("^"_CODE_"^") D
"RTN","PRSAOTT",106,0)
 ..   S OTTMP=TT8B(WEEK,CODE)
"RTN","PRSAOTT",107,0)
 ..   S OTTOTAL=OTTOTAL+$E(OTTMP,1,2)+($E(OTTMP,3)*.25)
"RTN","PRSAOTT",108,0)
 Q OTTOTAL
"RTN","PRSAOTT",109,0)
 ;
"RTN","PRSAOTT",110,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",111,0)
 ;
"RTN","PRSAOTT",112,0)
APOTWEEK(PAYPRD,WEEKID,EMP450) ;
"RTN","PRSAOTT",113,0)
 ;Function returns approved overtime totals for a week.
"RTN","PRSAOTT",114,0)
 ;Input:  PPE,PAYPRD   - pay period of concern. YY-PP
"RTN","PRSAOTT",115,0)
 ;        WEEKID   - week (1) or week (2) of pay period
"RTN","PRSAOTT",116,0)
 ;        EMP450   - employees internal entry number in file 450.
"RTN","PRSAOTT",117,0)
 ;Output: TOTALOT  - total hrs of overtime for a week
"RTN","PRSAOTT",118,0)
 ;
"RTN","PRSAOTT",119,0)
 ;local vars:  D1 - 1st day of payperiod-returned by NX^PRSAPPU
"RTN","PRSAOTT",120,0)
 ;             OTREC - a record containing 1 overtime request.
"RTN","PRSAOTT",121,0)
 ;             START,STOP - 1st & last FM days of week (Sun,Sat)
"RTN","PRSAOTT",122,0)
 ;
"RTN","PRSAOTT",123,0)
 ; quit returning 0 if anything is missing.
"RTN","PRSAOTT",124,0)
 Q:$G(PAYPRD)=""!$G(WEEKID)=""!$G(EMP450)="" 0
"RTN","PRSAOTT",125,0)
 ;
"RTN","PRSAOTT",126,0)
 ; Loop thru OT/CT requests file x-ref on requested work date &
"RTN","PRSAOTT",127,0)
 ; add up all employees approved OT requests within week.
"RTN","PRSAOTT",128,0)
 ;
"RTN","PRSAOTT",129,0)
 N D1,PPE,TOTALOT,START,STOP,OTREC
"RTN","PRSAOTT",130,0)
 S TOTALOT=0
"RTN","PRSAOTT",131,0)
 D WEEKRNG(PAYPRD,WEEKID,.START,.STOP)
"RTN","PRSAOTT",132,0)
 S D1=START-.1
"RTN","PRSAOTT",133,0)
 F  S D1=$O(^PRST(458.2,"AD",EMP450,D1)) Q:D1>STOP!(D1="")  D
"RTN","PRSAOTT",134,0)
 .  S OTREC=""
"RTN","PRSAOTT",135,0)
 .  F  S OTREC=$O(^PRST(458.2,"AD",EMP450,D1,OTREC)) Q:OTREC=""  D
"RTN","PRSAOTT",136,0)
 ..    I $$OTREQ(OTREC),$$OTAPPR(OTREC) D
"RTN","PRSAOTT",137,0)
 ...     S TOTALOT=TOTALOT+$P($G(^PRST(458.2,OTREC,0)),"^",6)
"RTN","PRSAOTT",138,0)
 Q TOTALOT
"RTN","PRSAOTT",139,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",140,0)
OTREQ(REC) ;Function returns true if Request is type Overtime.
"RTN","PRSAOTT",141,0)
 Q:$G(REC)="" 0
"RTN","PRSAOTT",142,0)
 Q $P($G(^PRST(458.2,REC,0)),"^",5)="OT"
"RTN","PRSAOTT",143,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",144,0)
OTAPPR(REC) ;Function returns true if a Request is Approved.
"RTN","PRSAOTT",145,0)
 Q:$G(REC)="" 0
"RTN","PRSAOTT",146,0)
 Q "AS"[$P($G(^PRST(458.2,REC,0)),"^",8)
"RTN","PRSAOTT",147,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",148,0)
WEEKRNG(PPE,WEEK,FIRST,LAST) ;
"RTN","PRSAOTT",149,0)
 ;
"RTN","PRSAOTT",150,0)
 ; Routine takes a pay period & a week number & returns
"RTN","PRSAOTT",151,0)
 ; 1st & last FileMan days of specified week.
"RTN","PRSAOTT",152,0)
 ;  Input:  PPE - pay period in format YY-PP.
"RTN","PRSAOTT",153,0)
 ;          WEEK - week (1) or (2).
"RTN","PRSAOTT",154,0)
 ;  Output: .FIRST - first day of specified week-FM format
"RTN","PRSAOTT",155,0)
 ;          .LAST  - last day of specified week-FM format
"RTN","PRSAOTT",156,0)
 N D1,X1,X2,PPD1
"RTN","PRSAOTT",157,0)
 D NX^PRSAPPU S PPD1=D1
"RTN","PRSAOTT",158,0)
 I WEEK=1 D
"RTN","PRSAOTT",159,0)
 . S (FIRST,X1)=PPD1,X2=6 D C^%DTC S LAST=X
"RTN","PRSAOTT",160,0)
 E  D
"RTN","PRSAOTT",161,0)
 . S X1=PPD1,X2=7 D C^%DTC S FIRST=X
"RTN","PRSAOTT",162,0)
 . S X1=PPD1,X2=13 D C^%DTC S LAST=X
"RTN","PRSAOTT",163,0)
 Q
"RTN","PRSAOTT",164,0)
 ;
"RTN","PRSAOTT",165,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",166,0)
GET8BCDS(TT8B) ; GET 8B time CoDeS
"RTN","PRSAOTT",167,0)
 ;  Input:   Full 8b record as stored on node 5 of employee record
"RTN","PRSAOTT",168,0)
 ;           in time & attendance file.
"RTN","PRSAOTT",169,0)
 ;  Output:  Function returns section of 8b record with pay 
"RTN","PRSAOTT",170,0)
 ;           codes & values.
"RTN","PRSAOTT",171,0)
 ;
"RTN","PRSAOTT",172,0)
 ;  i.e. return last portion of 8b record  ----- <<AN280AL120CD00040>>
"RTN","PRSAOTT",173,0)
 ; ^PRST(458,,"E",,5)=658226944741FLI 8B256280A112 AN280AL120CD00040
"RTN","PRSAOTT",174,0)
 ;
"RTN","PRSAOTT",175,0)
 ;  Input:   FULL 8B RECORD
"RTN","PRSAOTT",176,0)
 ;
"RTN","PRSAOTT",177,0)
 Q $E(TT8B,33,$L(TT8B))
"RTN","PRSAOTT",178,0)
 ;
"RTN","PRSAOTT",179,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",180,0)
ARRAY8B(RECORD) ; Build employee 8B array.
"RTN","PRSAOTT",181,0)
 ; calls to this routine are responsible for cleaning up TT8B( array.
"RTN","PRSAOTT",182,0)
 ;
"RTN","PRSAOTT",183,0)
 ; Build a TT8B array which contains ONLY codes & values 
"RTN","PRSAOTT",184,0)
 ; that are in employees 8B record.
"RTN","PRSAOTT",185,0)
 ;
"RTN","PRSAOTT",186,0)
 ; Input:  RECORD - last portion of 8B array with codes & values.
"RTN","PRSAOTT",187,0)
 ;                  e.g. <<AN280AL120CD00040>> (see GET8BCDS^PRSAOTT)
"RTN","PRSAOTT",188,0)
 ;
"RTN","PRSAOTT",189,0)
 ; Output: array subscripted by time code & set equal to value.
"RTN","PRSAOTT",190,0)
 ;   e.g.     TT8B(1,"AN")=010
"RTN","PRSAOTT",191,0)
 ;            TT8B(1,"DA")=020
"RTN","PRSAOTT",192,0)
 ;            TT8B(1,"NA")=020
"RTN","PRSAOTT",193,0)
 ;            TT8B(2,"SL")=080
"RTN","PRSAOTT",194,0)
 ;            TT8B(3,"CD")=000130
"RTN","PRSAOTT",195,0)
 ;
"RTN","PRSAOTT",196,0)
 K TT8B S TT8B(0)=0
"RTN","PRSAOTT",197,0)
 Q:$G(RECORD)=""
"RTN","PRSAOTT",198,0)
 N EOR,TYPE,VALUE,LOOP,WK
"RTN","PRSAOTT",199,0)
 S EOR=0
"RTN","PRSAOTT",200,0)
 F  D  Q:EOR=1
"RTN","PRSAOTT",201,0)
 .  S TYPE=$E(RECORD,1,2)
"RTN","PRSAOTT",202,0)
 .;  I TYPE="CD" S VALUE=$E(RECORD,3,$L(RECORD)) S EOR=1
"RTN","PRSAOTT",203,0)
 .;
"RTN","PRSAOTT",204,0)
 .;traverse record to next code so LOOP gets len of curr code value
"RTN","PRSAOTT",205,0)
 .;
"RTN","PRSAOTT",206,0)
 .  F LOOP=3:1:$L(RECORD) Q:$E(RECORD,LOOP)?1U
"RTN","PRSAOTT",207,0)
 .  S:LOOP=$L(RECORD) EOR=1
"RTN","PRSAOTT",208,0)
 .  S VALUE=$S(EOR=1:$E(RECORD,3,LOOP),1:$E(RECORD,3,LOOP-1))
"RTN","PRSAOTT",209,0)
 .  S:EOR=0 RECORD=$E(RECORD,LOOP,$L(RECORD))
"RTN","PRSAOTT",210,0)
 .;
"RTN","PRSAOTT",211,0)
 .;Put code into corresponding week of TT8B array.
"RTN","PRSAOTT",212,0)
 .;
"RTN","PRSAOTT",213,0)
 .  S WK=$S($F($$CODES(1),TYPE):1,$F($$CODES(2),TYPE):2,$F($$CODES(3),TYPE):3,1:"unknown")
"RTN","PRSAOTT",214,0)
 .  S TT8B(WK,TYPE)=VALUE,TT8B(0)=TT8B(0)+1
"RTN","PRSAOTT",215,0)
 Q
"RTN","PRSAOTT",216,0)
 ;
"RTN","PRSAOTT",217,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSAOTT",218,0)
CODES(WEEK) ;
"RTN","PRSAOTT",219,0)
 ; 8b string can contain any number of codes.  Some of codes
"RTN","PRSAOTT",220,0)
 ; are strictly for types of time in week 1 & some are for week 2.
"RTN","PRSAOTT",221,0)
 ; There are also pay period codes that are independant from weeks.
"RTN","PRSAOTT",222,0)
 ;
"RTN","PRSAOTT",223,0)
 ; This function returns a string of codes for specified 
"RTN","PRSAOTT",224,0)
 ; week (1) or (2)  -OR- (3)---8b codes independant of week.
"RTN","PRSAOTT",225,0)
 ;
"RTN","PRSAOTT",226,0)
 ;  Input:  WEEK - week (1) (2) of pay period. 
"RTN","PRSAOTT",227,0)
 ;
"RTN","PRSAOTT",228,0)
 Q:$G(WEEK)="" 0
"RTN","PRSAOTT",229,0)
 Q:WEEK=1 "AN SK WD NO AU RT CE CU UN NA NB SP SA SB SC DA DB DC TF OA OB OC YA OK OM RA RB RC HA HB HC PT PA ON YD HD VC EA EB TA TC FA FC AD NT RS ND SR SD"
"RTN","PRSAOTT",230,0)
 ;
"RTN","PRSAOTT",231,0)
 Q:WEEK=2 "AL SL WP NP AB RL CT CO US NR NS SQ SE SF SG DE DF DG TG OE OF OG YE OS OU RE RF RG HL HM HN PH PB CL YH HO VS EC ED TB TD FB FD AF NH RN NU SS SH"
"RTN","PRSAOTT",232,0)
 ;
"RTN","PRSAOTT",233,0)
 Q:WEEK=3 "NL DW IN TL LU LN LD DT TO LA ML CA PC CY RR FF FE CD"
"RTN","PRSAOTT",234,0)
 Q 0
"RTN","PRSAPPH")
0^54^B20434653^B20374442
"RTN","PRSAPPH",1,0)
PRSAPPH ; HISC/REL-Holiday Utilities ;01/03/07
"RTN","PRSAPPH",2,0)
 ;;4.0;PAID;**33,66,112**;Sep 21, 1995;Build 54
"RTN","PRSAPPH",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAPPH",4,0)
 K HOL S PDT=$G(^PRST(458,PPI,1)) Q:PDT=""  S X1=$P(PDT,"^",1),X2=-6 D C^%DTC
"RTN","PRSAPPH",5,0)
 S PRS8D=X D EN^PRS8HD
"RTN","PRSAPPH",6,0)
 S PDH=PRS8D F DAY=1:1:25 S X1=PRS8D,X2=DAY D C^%DTC S PDH=PDH_"^"_X
"RTN","PRSAPPH",7,0)
 F DAY=1:1:26 S Z=$P(PDH,"^",DAY) I $D(HD(Z)) S HOL(Z)=$S(DAY<7:-DAY,1:DAY-6)
"RTN","PRSAPPH",8,0)
 K HO,HD,PRS8D,PDH Q
"RTN","PRSAPPH",9,0)
E ; Set Holidays for Employees
"RTN","PRSAPPH",10,0)
 S FLX=$P($G(^PRST(458,PPI,"E",DFN,0)),"^",6),DB=$P($G(^PRSPC(DFN,0)),"^",10)
"RTN","PRSAPPH",11,0)
 S NH=$P($G(^PRSPC(DFN,0)),"^",16) Q:NH>80
"RTN","PRSAPPH",12,0)
 F LLL=0:0 S LLL=$O(HOL(LLL)) Q:LLL<1  S DAY=HOL(LLL) D E0
"RTN","PRSAPPH",13,0)
 Q
"RTN","PRSAPPH",14,0)
E0 ; Find Benefit Day
"RTN","PRSAPPH",15,0)
 Q:DAY=15  I DAY>0,DAY<15 G P0
"RTN","PRSAPPH",16,0)
 Q:DB'=1  Q:NH=48!(NH=72)  G P1:DAY<0,P3:DAY>14
"RTN","PRSAPPH",17,0)
P0 S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2) Q:'TC
"RTN","PRSAPPH",18,0)
 I (TC=3)!(TC=4) G U1
"RTN","PRSAPPH",19,0)
 I DB=1,NH=48 G U1
"RTN","PRSAPPH",20,0)
 S C=0
"RTN","PRSAPPH",21,0)
 I TC=2!$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",8)!$P($G(^(0)),"^",14),'$P($G(^(0)),"^",12) G S0
"RTN","PRSAPPH",22,0)
 Q:$P($G(^(0)),"^",12)=LLL&(TT="HX") 
"RTN","PRSAPPH",23,0)
 G U1:DB=2!(NH=72) I FLX'="C" G EF:(DAY#7=1),EB:(DAY#7=0)
"RTN","PRSAPPH",24,0)
 S C=0 F X1=$S(DAY<8:1,1:8):1:DAY I '$P($G(^PRST(458,PPI,"E",DFN,"D",X1,0)),"^",8),'$P($G(^(0)),"^",14) S C=C+1
"RTN","PRSAPPH",25,0)
 I FLX'="C" G EF:C<2,EB
"RTN","PRSAPPH",26,0)
 I C'=2 G EF:C<3,EB
"RTN","PRSAPPH",27,0)
 I DAY#7 F X1=DAY+1:1:$S(DAY<8:7,1:14) I '$P($G(^PRST(458,PPI,"E",DFN,"D",X1,0)),"^",8),'$P($G(^(0)),"^",14) S C=C+1
"RTN","PRSAPPH",28,0)
 G EB:C=2,EF
"RTN","PRSAPPH",29,0)
 ;
"RTN","PRSAPPH",30,0)
 ;if looking forward, don't set off for another holiday
"RTN","PRSAPPH",31,0)
 ;
"RTN","PRSAPPH",32,0)
EF F DAY=DAY+1:1:14 S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2) Q:TC=""  I TC=2!$P($G(^(0)),"^",8)!$P($G(^(0)),"^",14),'$$FUTRHOL(),$$PREVSET() G S0
"RTN","PRSAPPH",33,0)
 Q
"RTN","PRSAPPH",34,0)
 ;
"RTN","PRSAPPH",35,0)
FUTRHOL() ;Check to see if day is another future holiday.
"RTN","PRSAPPH",36,0)
 Q $G(HOL($P($G(^PRST(458,PPI,1)),"^",DAY)))>0
"RTN","PRSAPPH",37,0)
PREVSET() ; Day NOT Already Set as holiday
"RTN","PRSAPPH",38,0)
 Q ('($P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)>0)!($P($G(^(0)),"^",12)=LLL))
"RTN","PRSAPPH",39,0)
 ;
"RTN","PRSAPPH",40,0)
 ;back up to find an available day to set the Holiday.
"RTN","PRSAPPH",41,0)
EB F DAY=DAY-1:-1:1 S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2) Q:TC=""  I $$PREVSET(),TC=2!$P($G(^(0)),"^",8)!$P($G(^(0)),"^",14) G S0
"RTN","PRSAPPH",42,0)
 Q
"RTN","PRSAPPH",43,0)
 ;
"RTN","PRSAPPH",44,0)
P1 I FLX'="C" Q:DAY'=-5  S C=13 D PF Q:'Z  S DAY=0 G EF
"RTN","PRSAPPH",45,0)
 S C=8-DAY D PF Q:'Z
"RTN","PRSAPPH",46,0)
 S DAY=8-DAY,C=0 F X1=8:1:DAY I '$P($G(^PRST(458,PPI-1,"E",DFN,"D",X1,0)),"^",8),'$P($G(^(0)),"^",14) S C=C+1
"RTN","PRSAPPH",47,0)
 Q:C>2  I C<2 S DAY=0 G EF
"RTN","PRSAPPH",48,0)
 I DAY<14 F X1=DAY+1:1:14 I '$P($G(^PRST(458,PPI-1,"E",DFN,"D",X1,0)),"^",8),'$P($G(^(0)),"^",14) S C=C+1
"RTN","PRSAPPH",49,0)
 Q:C=2  S DAY=0 G EF
"RTN","PRSAPPH",50,0)
P3 I FLX'="C" Q:DAY'=16  S C=2 D PN Q:'Z  S DAY=15 G EB
"RTN","PRSAPPH",51,0)
 Q:DAY=15  S C=DAY-14 D PN Q:'Z  I DAY>16 S DAY=15 G EB
"RTN","PRSAPPH",52,0)
 S C=2 F L1=3:1:7 D
"RTN","PRSAPPH",53,0)
 .S X1=$G(^PRST(458,PPI+1,"E",DFN,"D",L1,0)) I X1'="" S:$P(X1,"^",8)+$P(X1,"^",14)=0 C=C+1 Q
"RTN","PRSAPPH",54,0)
 .S X1=$P($G(^PRST(458,PPI,"E",DFN,"D",L1,0)),"^",2,4) I $P(X1,"^",3),$P(X1,"^",4) S X1=$P(X1,"^",4)
"RTN","PRSAPPH",55,0)
 .S:'$P($G(^PRST(457.1,+X1,0)),"^",6) C=C+1 Q
"RTN","PRSAPPH",56,0)
 Q:C>2  S DAY=15 G EB
"RTN","PRSAPPH",57,0)
PN ; Determine TC for next Pay Period; if Z=1 then all TC=1 for days 1 to C
"RTN","PRSAPPH",58,0)
 S Z=1 F C=C:-1:1 D  Q:'Z
"RTN","PRSAPPH",59,0)
 .S X1=$P($G(^PRST(458,PPI+1,"E",DFN,"D",C,0)),"^",2) I X1=2 S Z=0 Q
"RTN","PRSAPPH",60,0)
 .I X1'="" S X1=$P($G(^PRST(458,PPI+1,"E",DFN,"D",C,0)),"^",8)+$P($G(^(0)),"^",14) S:X1 Z=0 Q
"RTN","PRSAPPH",61,0)
 .S X1=$P($G(^PRST(458,PPI,"E",DFN,"D",C,0)),"^",2,4) I $P(X1,"^",2),$P(X1,"^",3) S X1=$P(X1,"^",3)
"RTN","PRSAPPH",62,0)
 .S X1=+X1 I X1=0!(X1=2) S Z=0 Q
"RTN","PRSAPPH",63,0)
 .S:$P($G(^PRST(457.1,X1,0)),"^",6) Z=0 Q
"RTN","PRSAPPH",64,0)
 Q
"RTN","PRSAPPH",65,0)
PF ; Determine TC for prior PP
"RTN","PRSAPPH",66,0)
 S Z=1 F C=C:1:14 D  Q:'Z
"RTN","PRSAPPH",67,0)
 .S X1=$P($G(^PRST(458,PPI-1,"E",DFN,"D",C,0)),"^",2) I X1=""!(X1=2) S Z=0 Q
"RTN","PRSAPPH",68,0)
 .S X1=$P($G(^PRST(458,PPI-1,"E",DFN,"D",C,0)),"^",8)+$P($G(^(0)),"^",14) S:X1 Z=0 Q
"RTN","PRSAPPH",69,0)
 Q
"RTN","PRSAPPH",70,0)
S0 ; Set Holiday (Excused or Worked)
"RTN","PRSAPPH",71,0)
 I TT="HX",$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)=LLL Q
"RTN","PRSAPPH",72,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,1)) I Z="" S $P(^(2),"^",3)=TT Q:TT="HW"  G UPD
"RTN","PRSAPPH",73,0)
 S ZS=$G(^PRST(458,PPI,"E",DFN,"D",DAY,4)) I ZS'="" D FND
"RTN","PRSAPPH",74,0)
 S ZS="",L1=1 F K=1:3:19 Q:$P(Z,"^",K)=""  D
"RTN","PRSAPPH",75,0)
 .I $P(Z,"^",K+2),"RG"'[$P($G(^PRST(457.2,+$P(Z,"^",K+2),0)),"^",2) Q
"RTN","PRSAPPH",76,0)
 .S $P(ZS,"^",L1)=$P(Z,"^",K),$P(ZS,"^",L1+1)=$P(Z,"^",K+1)
"RTN","PRSAPPH",77,0)
 .S $P(ZS,"^",L1+2)=TT S L1=L1+4 Q
"RTN","PRSAPPH",78,0)
 S:ZS'="" ^PRST(458,PPI,"E",DFN,"D",DAY,2)=ZS Q:TT="HW"  G:'DUP UPD
"RTN","PRSAPPH",79,0)
 ; Remove holiday on another day
"RTN","PRSAPPH",80,0)
 S K=PPI F L1=$S(DAY-8>0:DAY-8,1:1):1:$S(DAY+8<15:DAY+8,1:14) I $P($G(^PRST(458,K,"E",DFN,"D",L1,0)),"^",12)=LLL D REM
"RTN","PRSAPPH",81,0)
 I DAY<9 S K=PPI-1 F L1=(DAY+6):1:14 I $P($G(^PRST(458,K,"E",DFN,"D",L1,0)),"^",12)=LLL D REM
"RTN","PRSAPPH",82,0)
 I DAY>6 S K=PPI+1 F L1=1:1:(DAY-6) I $P($G(^PRST(458,K,"E",DFN,"D",L1,0)),"^",12)=LLL D REM
"RTN","PRSAPPH",83,0)
UPD ; Update status
"RTN","PRSAPPH",84,0)
 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,10),"^",1,4)="T^"_DUZ_"^"_NOW_"^2"
"RTN","PRSAPPH",85,0)
U1 ; Mark as Holiday
"RTN","PRSAPPH",86,0)
 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,0),"^",12)=LLL Q
"RTN","PRSAPPH",87,0)
REM ; Remove posting for moved holiday
"RTN","PRSAPPH",88,0)
 I $P($G(^PRST(458,K,"E",DFN,0)),"^",2)'="T" Q
"RTN","PRSAPPH",89,0)
 S $P(^PRST(458,K,"E",DFN,"D",L1,0),"^",12)=""
"RTN","PRSAPPH",90,0)
 S ZS=$G(^PRST(458,K,"E",DFN,"D",L1,2)) Q:ZS=""
"RTN","PRSAPPH",91,0)
 I ZS["HX"!(ZS["HW") K ^PRST(458,K,"E",DFN,"D",L1,2),^(3),^(10)
"RTN","PRSAPPH",92,0)
 Q
"RTN","PRSAPPH",93,0)
FND ; Determine which tour is first
"RTN","PRSAPPH",94,0)
 N X,Y S X=$P(Z,"^",1),Y=0 D MIL^PRSATIM S K=Y
"RTN","PRSAPPH",95,0)
 S X=$P(ZS,"^",1),Y=0 D MIL^PRSATIM S:Y<K Z=ZS Q
"RTN","PRSAPPH",96,0)
 Q
"RTN","PRSAPPO")
0^57^B16889205^B11822872
"RTN","PRSAPPO",1,0)
PRSAPPO ; HISC/MGD - Open New Pay Period ;07/30/07
"RTN","PRSAPPO",2,0)
 ;;4.0;PAID;**93,112**;Sep 21, 1995;Build 54
"RTN","PRSAPPO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSAPPO",4,0)
 S PPI=$P(^PRST(458,0),"^",3),PPE=$P(^PRST(458,PPI,0),"^",1)
"RTN","PRSAPPO",5,0)
 D NX^PRSAPPU S X1=D1,X2=14 D C^%DTC S D1=X
"RTN","PRSAPPO",6,0)
 S X1=DT,X2=7 D C^%DTC I D1>X W *7,!!,"You cannot open a Pay Period more than 7 days in advance!" G EX
"RTN","PRSAPPO",7,0)
 D PP^PRSAPPU S X=D1 D DTP^PRSAPPU
"RTN","PRSAPPO",8,0)
A1 W !!,"Do you wish to Open Pay Period ",PPE," beginning ",Y," ? "
"RTN","PRSAPPO",9,0)
 R X:DTIME G:'$T!(X["^") EX S:X="" X="*" S X=$TR(X,"yesno","YESNO")
"RTN","PRSAPPO",10,0)
 I $P("YES",X,1)'="",$P("NO",X,1)'="" W !?5,*7,"Answer YES or NO" G A1
"RTN","PRSAPPO",11,0)
 G:$E(X,1)'="Y" EX
"RTN","PRSAPPO",12,0)
 I $D(^PRST(458,"B",PPE)) W !!,*7,"That Pay Period is already open!" G EX
"RTN","PRSAPPO",13,0)
 K DIC,DD,DO S DIC="^PRST(458,",DIC(0)="L",DLAYGO=458,X=PPE D FILE^DICN G:Y<1 EX
"RTN","PRSAPPO",14,0)
 K DIC,DLAYGO S PPI=+Y,PPIP=PPI-1
"RTN","PRSAPPO",15,0)
A2 I PPIP,'$D(^PRST(458,PPIP)) S PPIP=PPIP-1 G A2
"RTN","PRSAPPO",16,0)
 ; Generate dates
"RTN","PRSAPPO",17,0)
 S Y1=D1 F K=1:1:13 S X2=K,X1=D1 D C^%DTC S Y1=Y1_"^"_X
"RTN","PRSAPPO",18,0)
 S Y2="" F K=1:1:14 S X=$P(Y1,"^",K) D DTP^PRSAPPU S Y=$P("Sat Sun Mon Tue Wed Thu Fri"," ",K#7+1)_" "_Y S $P(Y2,"^",K)=Y
"RTN","PRSAPPO",19,0)
 S ^PRST(458,PPI,1)=Y1,^(2)=Y2
"RTN","PRSAPPO",20,0)
 F K=1:1:14 S X=$P(Y1,"^",K),^PRST(458,"AD",X)=PPI_"^"_K
"RTN","PRSAPPO",21,0)
A3 S ^PRST(458,PPI,"E",0)="^458.01P^^" D NOW^%DTC S NOW=% D ^PRSAPPH
"RTN","PRSAPPO",22,0)
 W !!,"Moving Current Employees into Pay Period ... " S N=0
"RTN","PRSAPPO",23,0)
 N MDAT,MIEN,PRSIEN
"RTN","PRSAPPO",24,0)
 S ATL="ATL00" F  S ATL=$O(^PRSPC(ATL)) Q:ATL'?1"ATL".E  S TLE=$E(ATL,4,6),NAM="" F  S NAM=$O(^PRSPC(ATL,NAM)) Q:NAM=""  F DFN=0:0 S DFN=$O(^PRSPC(ATL,NAM,DFN)) Q:DFN<1  D
"RTN","PRSAPPO",25,0)
 .Q:$D(^PRST(458,PPI,"E",DFN,"D",14,0))
"RTN","PRSAPPO",26,0)
 .I $P($G(^PRSPC(DFN,"LWOP")),"^",1)="Y" Q
"RTN","PRSAPPO",27,0)
 .I $P($G(^PRSPC(DFN,1)),"^",20)="Y" Q
"RTN","PRSAPPO",28,0)
 .I $P($G(^PRSPC(DFN,1)),"^",33)'="N" Q
"RTN","PRSAPPO",29,0)
 .S C0=^PRSPC(DFN,0)
"RTN","PRSAPPO",30,0)
 .I $P(C0,U,10)=2,$P(C0,U,16)=80 S NAWS="9Mo AWS",CT9=$G(CT9)+1
"RTN","PRSAPPO",31,0)
 .I $P(C0,U,10)=1,$P(C0,U,16)=72 S NAWS="36/40 AWS",CT36=$G(CT36)+1
"RTN","PRSAPPO",32,0)
 .S PRSIEN=DFN,MDAT=$P(PDT,U,1)
"RTN","PRSAPPO",33,0)
 .S MIEN=$$MIEN^PRSPUT1(PRSIEN,MDAT)
"RTN","PRSAPPO",34,0)
 .D MOV I $D(HOL),'MIEN S TT="HX",DUP=0 D E^PRSAPPH
"RTN","PRSAPPO",35,0)
 .;
"RTN","PRSAPPO",36,0)
 .; Call to Autopost PT Phy Leave
"RTN","PRSAPPO",37,0)
 .I $G(MIEN) D PLPP^PRSPLVA(PRSIEN,PPI)
"RTN","PRSAPPO",38,0)
 .;
"RTN","PRSAPPO",39,0)
 .; Call to Autopost PT Phy Extended Absence
"RTN","PRSAPPO",40,0)
 .I $G(MIEN) D PEAPP^PRSPEAA(PRSIEN,PPI)
"RTN","PRSAPPO",41,0)
 .S N=N+1 W:N#100=0 "." Q
"RTN","PRSAPPO",42,0)
 ;SEND A MESSAGE WHEN A 9 MONTH AWS NURSE IS ACTIVATED AT A SITE
"RTN","PRSAPPO",43,0)
 I +$G(NAWS) D
"RTN","PRSAPPO",44,0)
 .I $G(CT9) S TMP(1)=CT9_" 9 month AWS nurse(s) set up"
"RTN","PRSAPPO",45,0)
 .I $G(CT36) S TMP(2)=CT36_" 36/40 AWS nurse(s) set up"
"RTN","PRSAPPO",46,0)
 .S S=$$KSP^XUPARAM("INST")_"," D FIND^DIC(456,,,"Q",+S)
"RTN","PRSAPPO",47,0)
 .S IND=$S($D(^TMP("DILIST",$J,0)):+^(0),1:$O(^PRST(456,0)))
"RTN","PRSAPPO",48,0)
 .S CM9=$$GET1^DIQ(456,IND,2),CM36=$$GET1^DIQ(456,IND,4)
"RTN","PRSAPPO",49,0)
 .S MAX=$$GET1^DIQ(456,IND,3) N FDA,DIERR
"RTN","PRSAPPO",50,0)
 .I $G(CT9),CM9<MAX S FDA(456,IND_",",2)=CM9+1
"RTN","PRSAPPO",51,0)
 .I $G(CT36),CM36<MAX S FDA(456,IND_",",4)=CM36+1
"RTN","PRSAPPO",52,0)
 .Q:'$D(FDA)  D FILE^DIE("","FDA"),MSG^DIALOG()
"RTN","PRSAPPO",53,0)
 .S S=$$GET1^DIQ(4,+S,99)_" "_$$GET1^DIQ(4,+S,100),XMTEXT="TMP("
"RTN","PRSAPPO",54,0)
 .S TMP(3)="At "_S,XMDUZ=.5,XMY("VHAOIPAIDETANAWSBULLETIN@VA.GOV")=""
"RTN","PRSAPPO",55,0)
 .S XMSUB=+S_" 36/40, 9 month AWS nurse(s) deployed PRS*4.0*112"
"RTN","PRSAPPO",56,0)
 .D ^XMD K TMP
"RTN","PRSAPPO",57,0)
 S $P(^PRST(458,PPI,"E",0),"^",3,4)=N_"^"_N W !!,N," Employee Records created.",!
"RTN","PRSAPPO",58,0)
EX G KILL^XUSCLEAN
"RTN","PRSAPPO",59,0)
RES ; Re-start/Re-open a Pay Period
"RTN","PRSAPPO",60,0)
 S PPI=$P(^PRST(458,0),"^",3),PPIP=PPI-1 G A3
"RTN","PRSAPPO",61,0)
MOV ; Create PP entry for Employee
"RTN","PRSAPPO",62,0)
 I '$D(^PRST(458,PPI,"E",DFN,0)) S ^(0)=DFN_"^T" D
"RTN","PRSAPPO",63,0)
 .S CPI=$G(^PRST(458,PPIP,"E",DFN,0))
"RTN","PRSAPPO",64,0)
 .S CPI=$S($P(CPI,"^",7)'="":$P(CPI,"^",7),$P(CPI,"^",6)'="":$P(CPI,"^",6),1:$P($G(^PRSPC(DFN,1)),"^",7))
"RTN","PRSAPPO",65,0)
 .S:CPI="" CPI=0 S $P(^PRST(458,PPI,"E",DFN,0),"^",6)=CPI Q
"RTN","PRSAPPO",66,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSAPPO",67,0)
 ;
"RTN","PRSAPPO",68,0)
 ; if there's a PTP memo and this is the 1st PP for the memo then
"RTN","PRSAPPO",69,0)
 ; set the memo status to Active
"RTN","PRSAPPO",70,0)
 I $G(MIEN),($P($G(^PRST(458.7,+MIEN,9,1,0)),U,1)=$P($G(^PRST(458,PPI,0)),U,1)) D
"RTN","PRSAPPO",71,0)
 . N IENS,PRSFDA
"RTN","PRSAPPO",72,0)
 . S IENS=+MIEN_","
"RTN","PRSAPPO",73,0)
 . S PRSFDA(458.7,IENS,5)=2 ; 2:ACTIVE
"RTN","PRSAPPO",74,0)
 . D FILE^DIE("","PRSFDA")
"RTN","PRSAPPO",75,0)
 . K PRSFDA
"RTN","PRSAPPO",76,0)
 ;
"RTN","PRSAPPO",77,0)
 F DAY=1:1:14 I '$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2) D
"RTN","PRSAPPO",78,0)
 . D M1
"RTN","PRSAPPO",79,0)
 . ; Update Daily ESR and post Holiday Excused
"RTN","PRSAPPO",80,0)
 . I MIEN D ESRUPDT^PRSPUT3(PPI,DFN,DAY)
"RTN","PRSAPPO",81,0)
 Q
"RTN","PRSAPPO",82,0)
 ;
"RTN","PRSAPPO",83,0)
M1 ; Set a day
"RTN","PRSAPPO",84,0)
 S Z=$G(^PRST(458,PPIP,"E",DFN,"D",DAY,0)),TD=$P(Z,"^",2) I $P(Z,"^",3) S TD=$P(Z,"^",4)
"RTN","PRSAPPO",85,0)
 S X=$G(^PRST(457.1,+TD,1)),TDH=$P($G(^(0)),"^",6)
"RTN","PRSAPPO",86,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=DAY_"^"_TD S:TDH'="" $P(^(0),"^",8)=TDH S:X'="" ^(1)=X
"RTN","PRSAPPO",87,0)
 Q
"RTN","PRSARC")
0^34^B63390639^n/a
"RTN","PRSARC",1,0)
PRSARC ;WOIFO/JAH - Recess Tracking ListManger Inteface ;10/16/06
"RTN","PRSARC",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC",4,0)
 Q
"RTN","PRSARC",5,0)
ENEDIT ; -- main entry point for PRSA RECESS TRACKING
"RTN","PRSARC",6,0)
 S PRSOUT=0
"RTN","PRSARC",7,0)
 ;
"RTN","PRSARC",8,0)
 D SETUP(.PRSOUT)
"RTN","PRSARC",9,0)
 I $G(PRSOUT)=1 D EXIT Q
"RTN","PRSARC",10,0)
 ;
"RTN","PRSARC",11,0)
 ; set global var to allow editing
"RTN","PRSARC",12,0)
 S PRSVIEW=0
"RTN","PRSARC",13,0)
 D EN^VALM("PRSA RECESS TRACKING MANAGER")
"RTN","PRSARC",14,0)
 Q
"RTN","PRSARC",15,0)
SUP ;
"RTN","PRSARC",16,0)
TK ;
"RTN","PRSARC",17,0)
 N PRSTLV,TLE,TLI
"RTN","PRSARC",18,0)
 S PRSTLV=2 D ^PRSAUTL
"RTN","PRSARC",19,0)
 Q:$G(TLE)=""
"RTN","PRSARC",20,0)
 N DIC,Y,FYREC,PRSIEN,DUOUT,DTOUT
"RTN","PRSARC",21,0)
 S DIC("S")="I $P(^PRSPC(+^PRST(458.8,+Y,0),0),U,8)=TLE"
"RTN","PRSARC",22,0)
 S DIC(0)="AEMZQ"
"RTN","PRSARC",23,0)
 S DIC("A")="Select 9-month AWS Nurse: "
"RTN","PRSARC",24,0)
 S DIC="^PRST(458.8,"
"RTN","PRSARC",25,0)
 D ^DIC
"RTN","PRSARC",26,0)
 Q:$D(DUOUT)!$D(DTOUT)!($G(Y)'>0)
"RTN","PRSARC",27,0)
 S PRSIEN=Y(0)
"RTN","PRSARC",28,0)
 S FYREC=+Y
"RTN","PRSARC",29,0)
 D ENVIEW
"RTN","PRSARC",30,0)
 Q
"RTN","PRSARC",31,0)
HR ;
"RTN","PRSARC",32,0)
 N DIC,Y,FYREC,PRSIEN,DUOUT,DTOUT
"RTN","PRSARC",33,0)
 S DIC(0)="AEMZQ"
"RTN","PRSARC",34,0)
 S DIC("A")="Select 9-month AWS Nurse: "
"RTN","PRSARC",35,0)
 S DIC="^PRST(458.8,"
"RTN","PRSARC",36,0)
 D ^DIC
"RTN","PRSARC",37,0)
 Q:$D(DUOUT)!$D(DTOUT)!($G(Y)'>0)
"RTN","PRSARC",38,0)
 S PRSIEN=Y(0)
"RTN","PRSARC",39,0)
 S FYREC=+Y
"RTN","PRSARC",40,0)
 D ENVIEW
"RTN","PRSARC",41,0)
 Q
"RTN","PRSARC",42,0)
NURSE ;
"RTN","PRSARC",43,0)
 N DIC,Y,FDEFAULT,SSN,FYREC,PRSIEN,DUOUT,DTOUT,ABORT
"RTN","PRSARC",44,0)
 S PRSNURSE="",SSN=$P($G(^VA(200,DUZ,1)),"^",9)
"RTN","PRSARC",45,0)
 I SSN'="" S PRSNURSE=$O(^PRSPC("SSN",SSN,0))
"RTN","PRSARC",46,0)
 I 'PRSNURSE W !!!,*7,"Your SSN was not found in either the New Person file or the Employee file.",!! H 1 S ABORT=$$ASK^PRSLIB00(1) Q
"RTN","PRSARC",47,0)
 S FDEFAULT=$O(^PRST(458.8,"AC",PRSNURSE,9999999),-1)
"RTN","PRSARC",48,0)
 I 'FDEFAULT W !!,*7,"You have no recess schedules on file.  Please contact your timekeeper.",!! H 1 S ABORT=$$ASK^PRSLIB00(1) Q
"RTN","PRSARC",49,0)
 S FDEFAULT=$O(^PRST(458.8,"AC",PRSNURSE,FDEFAULT,0))
"RTN","PRSARC",50,0)
 S FDEFAULT=+$G(^PRST(458.8,FDEFAULT,3))
"RTN","PRSARC",51,0)
 S DIC("B")=FDEFAULT
"RTN","PRSARC",52,0)
 S DIC(0)="AEMZQ"
"RTN","PRSARC",53,0)
 S DIC("A")="Select a Recess Schedule: "
"RTN","PRSARC",54,0)
 S DIC="^PRST(458.8,"
"RTN","PRSARC",55,0)
 S DIC("S")="I +^PRST(458.8,+Y,0)=PRSNURSE"
"RTN","PRSARC",56,0)
 D ^DIC
"RTN","PRSARC",57,0)
 Q:$D(DUOUT)!$D(DTOUT)!($G(Y)'>0)
"RTN","PRSARC",58,0)
 S PRSIEN=Y(0)
"RTN","PRSARC",59,0)
 S FYREC=+Y
"RTN","PRSARC",60,0)
 D ENVIEW
"RTN","PRSARC",61,0)
 Q
"RTN","PRSARC",62,0)
ENVIEW ; -- main entry point for PRSA RECESS VIEWER
"RTN","PRSARC",63,0)
 ; ask user nurse then provide selection of available recess records
"RTN","PRSARC",64,0)
 ; by fiscal year that may be viewed.
"RTN","PRSARC",65,0)
 ;
"RTN","PRSARC",66,0)
 N ZNODE,NAME,SSN,TLE
"RTN","PRSARC",67,0)
 S ZNODE=$G(^PRSPC(+PRSIEN,0))
"RTN","PRSARC",68,0)
 S NAME=$P(ZNODE,U)
"RTN","PRSARC",69,0)
 ; set global var so action protocols will be unavailable (view only)
"RTN","PRSARC",70,0)
 S PRSVIEW=1
"RTN","PRSARC",71,0)
 S SSN=$P(ZNODE,U,9),SSN="XXX-XX-"_$E(SSN,6,9)
"RTN","PRSARC",72,0)
 S TLE=$P(ZNODE,U,8)
"RTN","PRSARC",73,0)
 S PRSNURSE=PRSIEN_U_NAME_U_U_TLE_U_SSN
"RTN","PRSARC",74,0)
 S PRSFY=$$FYRDATA^PRSARC03(FYREC)
"RTN","PRSARC",75,0)
 S PRSFYRNG=$P(PRSFY,U,5,6)
"RTN","PRSARC",76,0)
 D FYWEEKS^PRSARC04(.FMWKS,PRSFY,0)
"RTN","PRSARC",77,0)
 D FYWEEKS^PRSARC04(.WKSFM,PRSFY,1)
"RTN","PRSARC",78,0)
 S PRSDT=$P(PRSFY,U,11)
"RTN","PRSARC",79,0)
 S PRSFSCYR=$$GETFSCYR^PRSARC04(PRSDT)
"RTN","PRSARC",80,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARC",81,0)
 D EN^VALM("PRSA RECESS TRACKING VIEWER")
"RTN","PRSARC",82,0)
 Q
"RTN","PRSARC",83,0)
 ;
"RTN","PRSARC",84,0)
SETUP(OUT) ; Setup for a new AWS schedule-prompt for year & start or bring
"RTN","PRSARC",85,0)
 ; up an existing schedule
"RTN","PRSARC",86,0)
 ;
"RTN","PRSARC",87,0)
 ;
"RTN","PRSARC",88,0)
 ; get NURSE IEN^NAME^(0 edit only, 1 add and edit)
"RTN","PRSARC",89,0)
 ; if nurse is currently entitled to recess a new rec can be added,
"RTN","PRSARC",90,0)
 ; otherwise only edit existing records curr, next, or last are allowed.
"RTN","PRSARC",91,0)
 ; 2nd input param=2 for timekeepers T&L lookup
"RTN","PRSARC",92,0)
 ; 
"RTN","PRSARC",93,0)
 D GETNURSE^PRSARC02(.PRSNURSE,2)
"RTN","PRSARC",94,0)
 I +$G(PRSNURSE)'>0 S OUT=1 Q
"RTN","PRSARC",95,0)
 L +^PRST(458.8,+PRSNURSE):$S($G(DILOCKTM)>0:DILOCKTM,1:5) I '$T W !,"Another user is editing this nurses recess records." S OUT=1 Q
"RTN","PRSARC",96,0)
 ;
"RTN","PRSARC",97,0)
 ; Set global variable to hold total of weeks that are selectable
"RTN","PRSARC",98,0)
 ;
"RTN","PRSARC",99,0)
 N ALLFY,FD,LD,RWREC
"RTN","PRSARC",100,0)
 ;
"RTN","PRSARC",101,0)
 ; Build schedule choice and ask which one to edit, current next last.
"RTN","PRSARC",102,0)
 ; If schedule exists we get 458.8 Recess Tracking IEN.
"RTN","PRSARC",103,0)
 ;
"RTN","PRSARC",104,0)
 D CHOOSEFY^PRSARC02(.PRSFY,PRSNURSE)
"RTN","PRSARC",105,0)
 ;
"RTN","PRSARC",106,0)
 I $G(PRSFY)'>0 S OUT=1 Q
"RTN","PRSARC",107,0)
 S RWREC=$P(PRSFY,U,9)
"RTN","PRSARC",108,0)
 ;
"RTN","PRSARC",109,0)
 ; get range of dates for PRSFY
"RTN","PRSARC",110,0)
 ;
"RTN","PRSARC",111,0)
 S PRSFYRNG=$P(PRSFY,U,5,6)
"RTN","PRSARC",112,0)
 ;
"RTN","PRSARC",113,0)
 S FD=$P(PRSFYRNG,U,1)
"RTN","PRSARC",114,0)
 S LD=$P(PRSFYRNG,U,2)
"RTN","PRSARC",115,0)
 ;
"RTN","PRSARC",116,0)
 ; Build 2 indexes: (1) FMWKS with FMdate subscript = week number and
"RTN","PRSARC",117,0)
 ; (2) WKSFM with week number subscript = FMdate (1st day of week)
"RTN","PRSARC",118,0)
 ;
"RTN","PRSARC",119,0)
 D FYWEEKS^PRSARC04(.FMWKS,PRSFY,0)
"RTN","PRSARC",120,0)
 D FYWEEKS^PRSARC04(.WKSFM,PRSFY,1)
"RTN","PRSARC",121,0)
 ;
"RTN","PRSARC",122,0)
 ; use existing AWS Start Date if it exist otherwise
"RTN","PRSARC",123,0)
 ; ask if AWS will cover entire fiscal year?
"RTN","PRSARC",124,0)
 ;
"RTN","PRSARC",125,0)
 ;code for setting continuous recess for new records
"RTN","PRSARC",126,0)
 N NEWREC S NEWREC=0
"RTN","PRSARC",127,0)
 ;
"RTN","PRSARC",128,0)
 S PRSDT=$P(PRSFY,U,11)
"RTN","PRSARC",129,0)
 I PRSDT'>0 D
"RTN","PRSARC",130,0)
 . ;code for setting continuous recess for new records
"RTN","PRSARC",131,0)
 .  S NEWREC=1
"RTN","PRSARC",132,0)
 .;
"RTN","PRSARC",133,0)
 .  S ALLFY=$$ALLFYAWS^PRSARC04()
"RTN","PRSARC",134,0)
 .  I ALLFY<0 D
"RTN","PRSARC",135,0)
 ..    S OUT=1 K PRSFY
"RTN","PRSARC",136,0)
 .  E  D
"RTN","PRSARC",137,0)
 ..    I ALLFY=1 D
"RTN","PRSARC",138,0)
 ...      S PRSDT=FD
"RTN","PRSARC",139,0)
 ..    E  D
"RTN","PRSARC",140,0)
 ...      S PRSDT=$$AWSTART^PRSARC03(FD,LD,"Enter Date 9 mo. AWS begins")
"RTN","PRSARC",141,0)
 ...      I PRSDT=0 S OUT=1 K PRSFY
"RTN","PRSARC",142,0)
 .  I 'OUT D
"RTN","PRSARC",143,0)
 ..; convert start to 1st day of pp and 
"RTN","PRSARC",144,0)
 ..; update the PRSFY var with new start date info
"RTN","PRSARC",145,0)
 ..   N D1,DAY,PPI,PPE S D1=PRSDT D PP^PRSAPPU
"RTN","PRSARC",146,0)
 ..   I DAY'=1 N X1,X2,X,%H S X1=D1,X2=-(DAY-1) D C^%DTC S PRSDT=X
"RTN","PRSARC",147,0)
 ..   S $P(PRSFY,U,12)=PPE
"RTN","PRSARC",148,0)
 ..   S $P(PRSFY,U,10)=$E(PRSDT,4,5)_"/"_$E(PRSDT,6,7)_"/"_$E(PRSDT,2,3)
"RTN","PRSARC",149,0)
 ..   S $P(PRSFY,U,11)=PRSDT
"RTN","PRSARC",150,0)
 Q:OUT
"RTN","PRSARC",151,0)
 ;
"RTN","PRSARC",152,0)
 S PRSFSCYR=$$GETFSCYR^PRSARC04(PRSDT)
"RTN","PRSARC",153,0)
 ;
"RTN","PRSARC",154,0)
 ;GET total available hours based on fiscal year and start date.
"RTN","PRSARC",155,0)
 ;
"RTN","PRSARC",156,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARC",157,0)
 ;code for setting continuous recess for new records
"RTN","PRSARC",158,0)
 I NEWREC S PRSAUTOR=$$AUTOREC^PRSARC09(PRSDT,LD)
"RTN","PRSARC",159,0)
 ;
"RTN","PRSARC",160,0)
 Q
"RTN","PRSARC",161,0)
 ;
"RTN","PRSARC",162,0)
HDR ; -- header code
"RTN","PRSARC",163,0)
 N NAME,SSN,TLE,PAD
"RTN","PRSARC",164,0)
 S NAME=$E($P(PRSNURSE,U,2),1,30)
"RTN","PRSARC",165,0)
 S SSN=$P(PRSNURSE,U,5)
"RTN","PRSARC",166,0)
 S TLE=$P(PRSNURSE,U,4)
"RTN","PRSARC",167,0)
 S VALMHDR(1)=$P(PRSFSCYR,U,2)_" Recess Week "_$S($G(PRSVIEW):"Viewer",1:"Editor")_" for 9 month AWS with start date "_$P(PRSFY,U,10)_" (pp "_$P(PRSFY,U,12)_")"
"RTN","PRSARC",168,0)
 S PAD=$E("                               ",1,31-$L(NAME))
"RTN","PRSARC",169,0)
 S VALMHDR(2)=NAME_PAD_SSN_"              T&L Unit: "_TLE
"RTN","PRSARC",170,0)
 Q
"RTN","PRSARC",171,0)
 ;
"RTN","PRSARC",172,0)
INIT ; -- init variables and list array
"RTN","PRSARC",173,0)
 ;
"RTN","PRSARC",174,0)
 ; PRSLSTRT = what week the list starts with.  So if the schedule
"RTN","PRSARC",175,0)
 ;            begins in the 13th week of the fiscal year, this var
"RTN","PRSARC",176,0)
 ;            would be 13 and the first selectable item in the list.
"RTN","PRSARC",177,0)
 ; PRSWKLST = increment counter for items in the list that are #ed
"RTN","PRSARC",178,0)
 ;            and thus selectable.  when init is done calling main this
"RTN","PRSARC",179,0)
 ;            should be set to week # of the last week in the FY.
"RTN","PRSARC",180,0)
 ;  LINE  =   counter of all items in list, incl. non selectable items
"RTN","PRSARC",181,0)
 ;            such as month headings.
"RTN","PRSARC",182,0)
 ;
"RTN","PRSARC",183,0)
 Q:$G(PRSOUT)=1
"RTN","PRSARC",184,0)
 N LISTI,LINE,FIRSTRW
"RTN","PRSARC",185,0)
 S (LISTI,LINE)=0
"RTN","PRSARC",186,0)
 K ^TMP("PRSARC",$J) ;  array-all items in list, incl. non selectable 
"RTN","PRSARC",187,0)
 ;                      items such as month headings.
"RTN","PRSARC",188,0)
 K ^TMP("PRSLI",$J) ; index of all selectable items in the list.
"RTN","PRSARC",189,0)
 K ^TMP("PRSSW",$J) ; index of items selected as recess weeks.
"RTN","PRSARC",190,0)
 K ^TMP("PRSRW",$J) ; index of recess weeks with hours.
"RTN","PRSARC",191,0)
 D MAIN^PRSARC06(.PRSLSTRT,.LISTI,.LINE,PRSDT,PRSFYRNG)
"RTN","PRSARC",192,0)
 S PRSWKLST=LISTI-1
"RTN","PRSARC",193,0)
 S VALMCNT=LINE
"RTN","PRSARC",194,0)
 ;
"RTN","PRSARC",195,0)
 ; add recess hours to screen and PRSRW array if they exist
"RTN","PRSARC",196,0)
 ;
"RTN","PRSARC",197,0)
 S RWREC=$P(PRSFY,U,9)
"RTN","PRSARC",198,0)
 I RWREC>0 D GETFLWKS^PRSARC03(RWREC,PRSDT)
"RTN","PRSARC",199,0)
 ;
"RTN","PRSARC",200,0)
 ; add recess hours if user elected to auto populated recess and start
"RTN","PRSARC",201,0)
 ; list display at that week
"RTN","PRSARC",202,0)
 ;
"RTN","PRSARC",203,0)
 I +$G(PRSAUTOR)>0 D ADDAUTOR^PRSARC09(PRSAUTOR)
"RTN","PRSARC",204,0)
 S FIRSTRW=$O(^TMP("PRSRW",$J,0))
"RTN","PRSARC",205,0)
 I $G(FIRSTRW)>0 S FIRSTRW=+^TMP("PRSRW",$J,FIRSTRW) I $G(FIRSTRW)>3 S VALMBG=FIRSTRW-1
"RTN","PRSARC",206,0)
 ;
"RTN","PRSARC",207,0)
 ; get timecard posted recess that's certified
"RTN","PRSARC",208,0)
 D RPOSTED^PRSARC03
"RTN","PRSARC",209,0)
 Q
"RTN","PRSARC",210,0)
 ;
"RTN","PRSARC",211,0)
HELP ; -- help code
"RTN","PRSARC",212,0)
 N DIR
"RTN","PRSARC",213,0)
 I X="?" S DIR("A")="Enter RETURN to continue or '^' to exit",DIR(0)="E"
"RTN","PRSARC",214,0)
 D FULL^VALM1
"RTN","PRSARC",215,0)
 W !!,"The following actions are available:"
"RTN","PRSARC",216,0)
 W !,"  GH  Recess Hours Summary - recess weeks and hours summary with totals."
"RTN","PRSARC",217,0)
 I $G(PRSVIEW)'=1 D
"RTN","PRSARC",218,0)
 .W !,"  SE  Select Recess Weeks - select weeks and add/edit recess hours."
"RTN","PRSARC",219,0)
 .W !,"  EH  Edit Recess Hours - edit recess hours for each selected week."
"RTN","PRSARC",220,0)
 .W !,"  CR  Cancel Recess Weeks - remove recess hours from selected weeks."
"RTN","PRSARC",221,0)
 .W !,"  NS  Change AWS Start - change pay period when the AWS becomes effective."
"RTN","PRSARC",222,0)
 .W !,"  HE  Help - Get more detailed help about the available actions."
"RTN","PRSARC",223,0)
 .W !,"  SV  Save Recess Schedule - save any edits and continue editing."
"RTN","PRSARC",224,0)
 .W !,"  QU  Quit without Saving - exit without saving changes."
"RTN","PRSARC",225,0)
 .W !,"  EX  Exit and Save Recess - file changes to recess schedule and exit."
"RTN","PRSARC",226,0)
 I $D(DIR("A")) D ^DIR
"RTN","PRSARC",227,0)
 S VALMBCK="R"
"RTN","PRSARC",228,0)
 Q
"RTN","PRSARC",229,0)
 ;
"RTN","PRSARC",230,0)
EXIT ; -- exit code
"RTN","PRSARC",231,0)
 D FULL^VALM1
"RTN","PRSARC",232,0)
 I +$G(PRSFY) D VALIDRS^PRSARCS
"RTN","PRSARC",233,0)
 I '$G(PRSVIEW) D
"RTN","PRSARC",234,0)
 .  L -^PRST(458.8,+$G(PRSNURSE))
"RTN","PRSARC",235,0)
 .  I +$G(PRSFY) D ALLOKEY^PRSARC04(+$G(PRSNURSE))
"RTN","PRSARC",236,0)
 ;
"RTN","PRSARC",237,0)
 K ^TMP("PRSARC",$J),^TMP("PRSLI",$J),^TMP("PRSRW",$J),^TMP("PRSSW",$J)
"RTN","PRSARC",238,0)
 K PRSFYRNG,PRSFSCYR,PRSWKLST,PRSLSTRT,PRSFY,PRSNURSE
"RTN","PRSARC",239,0)
 K PRSVIEW,PRSOUT,PRSRWHRS,PRSDT,PRSVONLY,PRSAUTOR
"RTN","PRSARC",240,0)
 K FMWKS,WKSFM,RWREC
"RTN","PRSARC",241,0)
 ; clean up vars from PRS calls outside of Recess Tracking
"RTN","PRSARC",242,0)
 K C0,FLX,A1,DAY,AC,DAY,PP,PMP,STOP,T1,T2,Z1,TESTINPP
"RTN","PRSARC",243,0)
 Q
"RTN","PRSARC",244,0)
 ;
"RTN","PRSARC",245,0)
EXPND ; -- expand code
"RTN","PRSARC",246,0)
 Q
"RTN","PRSARC",247,0)
 ;
"RTN","PRSARC01")
0^35^B95060943^n/a
"RTN","PRSARC01",1,0)
PRSARC01 ;WOIFO/JAH - Recess Tracking ListManger Action Protocols ;10/17/06
"RTN","PRSARC01",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC01",4,0)
 Q
"RTN","PRSARC01",5,0)
 ; ^TMP("PRSSW",$J) index of user selected weeks.
"RTN","PRSARC01",6,0)
 ; ^TMP("PRSRW",$J) index of recess weeks with hours.
"RTN","PRSARC01",7,0)
 ;
"RTN","PRSARC01",8,0)
EDITSTRT ; action protocol-edit AWS Start Date
"RTN","PRSARC01",9,0)
 ;
"RTN","PRSARC01",10,0)
 N RWREC
"RTN","PRSARC01",11,0)
 S VALMBCK="R"
"RTN","PRSARC01",12,0)
 I $G(PRSVIEW) D VWMSG^PRSARC03(1) Q
"RTN","PRSARC01",13,0)
 N OUT
"RTN","PRSARC01",14,0)
 D FULL^VALM1
"RTN","PRSARC01",15,0)
 W @IOF,!
"RTN","PRSARC01",16,0)
 ;
"RTN","PRSARC01",17,0)
 W !,"  WARNING:  Changing the AWS start date will remove recess hours"
"RTN","PRSARC01",18,0)
 W !,"            that are earlier than the new AWS start date.",!
"RTN","PRSARC01",19,0)
 S OUT=$$ASK^PRSLIB00()
"RTN","PRSARC01",20,0)
 S VALMBCK="R"
"RTN","PRSARC01",21,0)
 Q:OUT
"RTN","PRSARC01",22,0)
 N PRSDTTMP
"RTN","PRSARC01",23,0)
 S PRSDTTMP=PRSDT
"RTN","PRSARC01",24,0)
 D NEWSTART^PRSARC03(.OUT,.PRSDT)
"RTN","PRSARC01",25,0)
 I OUT S PRSDT=PRSDTTMP Q
"RTN","PRSARC01",26,0)
 ;
"RTN","PRSARC01",27,0)
 S RWREC=$P(PRSFY,U,9)
"RTN","PRSARC01",28,0)
 I RWREC>0 D GETFLWKS^PRSARC03(RWREC,PRSDT)
"RTN","PRSARC01",29,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARC01",30,0)
 N FIRSTRW
"RTN","PRSARC01",31,0)
 S FIRSTRW=$O(^TMP("PRSRW",$J,0))
"RTN","PRSARC01",32,0)
 I $G(FIRSTRW)>0 S FIRSTRW=+^TMP("PRSRW",$J,FIRSTRW)
"RTN","PRSARC01",33,0)
 S VALMBG=$S($G(FIRSTRW)>3:FIRSTRW-1,1:1)
"RTN","PRSARC01",34,0)
 Q
"RTN","PRSARC01",35,0)
 ;
"RTN","PRSARC01",36,0)
SETWKHRS(OUT) ;set hrs for selected weeks
"RTN","PRSARC01",37,0)
 ;
"RTN","PRSARC01",38,0)
 N RH1,RH2,OTHERHRS,UOH,CTRH1,CTRH2,UCTH
"RTN","PRSARC01",39,0)
 S VALMBCK="R"
"RTN","PRSARC01",40,0)
 D FULL^VALM1
"RTN","PRSARC01",41,0)
 W @IOF,!
"RTN","PRSARC01",42,0)
 I '$D(^TMP("PRSSW",$J)) D  Q
"RTN","PRSARC01",43,0)
 .  W !,"No weeks have been selected."
"RTN","PRSARC01",44,0)
 .  S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSARC01",45,0)
 .  S VALMBCK="R"
"RTN","PRSARC01",46,0)
 ;
"RTN","PRSARC01",47,0)
 D WHATHRS(.OUT,.RH1,.RH2,.OTHERHRS,.UOH,.CTRH1,.CTRH2,.UCTH)
"RTN","PRSARC01",48,0)
 I $G(OUT) S VALMBCK="R" Q
"RTN","PRSARC01",49,0)
 ;
"RTN","PRSARC01",50,0)
 D SETWKSLM(.OOPSWKS,RH1,RH2,OTHERHRS,UOH,CTRH1,CTRH2,UCTH)
"RTN","PRSARC01",51,0)
 ;
"RTN","PRSARC01",52,0)
 I $G(OOPSWKS)'="" S VALMSG="No tour data for the following weeks: "_$P(OOPSWKS,1,$L(OOPSWKS,",")-1)
"RTN","PRSARC01",53,0)
 ;
"RTN","PRSARC01",54,0)
 D DSELALL
"RTN","PRSARC01",55,0)
 S VALMBCK="R"
"RTN","PRSARC01",56,0)
 Q
"RTN","PRSARC01",57,0)
WHATHRS(OUT,RH1,RH2,OTHERHRS,UOH,CTRH1,CTRH2,UCTH) ;Ask user-which hours
"RTN","PRSARC01",58,0)
 ; to use.
"RTN","PRSARC01",59,0)
 ;
"RTN","PRSARC01",60,0)
 ; UCTH-use current tour hours flag
"RTN","PRSARC01",61,0)
 ; get current ToD hrs for week 1,2-ask whether to use hrs for recess.
"RTN","PRSARC01",62,0)
 ;
"RTN","PRSARC01",63,0)
 N DIR,Y,I
"RTN","PRSARC01",64,0)
 S (CTRH1,CTRH2,RH1,RH2,OTHERHRS,UOH,UCTH)=0
"RTN","PRSARC01",65,0)
 N PPI S PPI=$O(^PRST(458,999999),-1)
"RTN","PRSARC01",66,0)
 N TH D TOURHRS^PRSARC07(.TH,PPI,+PRSNURSE,"")
"RTN","PRSARC01",67,0)
 S CTRH1=TH("W1"),CTRH2=TH("W2")
"RTN","PRSARC01",68,0)
 I CTRH1>0!(CTRH2>0) D
"RTN","PRSARC01",69,0)
 .   S UOH=1
"RTN","PRSARC01",70,0)
 .   S OTHERHRS=$$OTHERHRS^PRSARC03(CTRH1,CTRH2,+PRSNURSE)
"RTN","PRSARC01",71,0)
 .   I OTHERHRS D
"RTN","PRSARC01",72,0)
 ..     S DIR("A")="Set recess to match tour hours from the timecard (Recommended)"
"RTN","PRSARC01",73,0)
 ..     S DIR("?",1)=" You have selected weeks in the past that have tour hours"
"RTN","PRSARC01",74,0)
 ..     S DIR("?",2)=" on the nurses' timecard that are different than the"
"RTN","PRSARC01",75,0)
 ..     S DIR("?",3)=" current tour hours."
"RTN","PRSARC01",76,0)
 ..     S DIR("?",4)=""
"RTN","PRSARC01",77,0)
 ..     S DIR("?",5)="Current tour of duty hours are as follows:"
"RTN","PRSARC01",78,0)
 ..     S DIR("?",6)="   Week 1 of pay period: "_TH("W1")
"RTN","PRSARC01",79,0)
 ..     S DIR("?",7)="   Week 2 of pay period: "_TH("W2")
"RTN","PRSARC01",80,0)
 ..     S I=0 F  S I=$O(DIR("?",I)) Q:I'>0  W !,DIR("?",I)
"RTN","PRSARC01",81,0)
 ..     S DIR("B")="YES"
"RTN","PRSARC01",82,0)
 ..     S DIR(0)="Y"
"RTN","PRSARC01",83,0)
 ..     D ^DIR
"RTN","PRSARC01",84,0)
 ..     S (UOH,UCTH)=+Y
"RTN","PRSARC01",85,0)
 .   I 'OTHERHRS!(UOH=0) D
"RTN","PRSARC01",86,0)
 ..    S DIR("A")="Set recess hours to current tour of duty hours"
"RTN","PRSARC01",87,0)
 ..    S DIR("?",1)="Current tour of duty hours are as follows:"
"RTN","PRSARC01",88,0)
 ..    S DIR("?",2)="   Week 1 of pay period: "_TH("W1")
"RTN","PRSARC01",89,0)
 ..    S DIR("?",3)="   Week 2 of pay period: "_TH("W2")
"RTN","PRSARC01",90,0)
 ..    S DIR("?",4)=""
"RTN","PRSARC01",91,0)
 ..    S DIR("?",5)="Choose yes to mark recess weeks with current tour of duty hours"
"RTN","PRSARC01",92,0)
 ..    S DIR("?",6)="for week 1 and 2."
"RTN","PRSARC01",93,0)
 ..    S DIR("?")="Enter yes or no."
"RTN","PRSARC01",94,0)
 ..    S DIR("B")="YES"
"RTN","PRSARC01",95,0)
 ..    S DIR(0)="Y"
"RTN","PRSARC01",96,0)
 ..    S I=0 F  S I=$O(DIR("?",I)) Q:I'>0  W !,DIR("?",I)
"RTN","PRSARC01",97,0)
 ..    D ^DIR
"RTN","PRSARC01",98,0)
 ..    S UCTH=Y
"RTN","PRSARC01",99,0)
 E  D
"RTN","PRSARC01",100,0)
 .  W !,"There are no tour hours in the current pay period."
"RTN","PRSARC01",101,0)
 .  S UCTH=0
"RTN","PRSARC01",102,0)
 ;
"RTN","PRSARC01",103,0)
 I $D(DIRUT) Q
"RTN","PRSARC01",104,0)
 ;
"RTN","PRSARC01",105,0)
 N ODD,EVEN
"RTN","PRSARC01",106,0)
 I 'UCTH D
"RTN","PRSARC01",107,0)
 .  ; return true if there are odd or even pp weeks in the selection
"RTN","PRSARC01",108,0)
 .  D EVEODDWK^PRSARC03(.ODD,.EVEN)
"RTN","PRSARC01",109,0)
 .  I ODD D
"RTN","PRSARC01",110,0)
 ..   K DIR,Y
"RTN","PRSARC01",111,0)
 ..   S DIR("B")=40
"RTN","PRSARC01",112,0)
 ..   S DIR("A")="Enter recess hours for the 1st week of the pay period"
"RTN","PRSARC01",113,0)
 ..   S DIR("?")="Pay period week 1 hours.  Enter the recess hours for selected weeks."
"RTN","PRSARC01",114,0)
 ..   S DIR(0)="N^0:72:2"
"RTN","PRSARC01",115,0)
 ..   N VALID S (VALID,OUT)=0
"RTN","PRSARC01",116,0)
 ..   F  D  Q:VALID!OUT
"RTN","PRSARC01",117,0)
 ...    D ^DIR
"RTN","PRSARC01",118,0)
 ...    I (+Y#.25)=0 S VALID=1
"RTN","PRSARC01",119,0)
 ...    I +Y=0 S Y=""
"RTN","PRSARC01",120,0)
 ...    I $D(DIRUT) S OUT=1
"RTN","PRSARC01",121,0)
 ...    S RH1=Y
"RTN","PRSARC01",122,0)
 .  Q:$G(OUT)
"RTN","PRSARC01",123,0)
 .  I EVEN D
"RTN","PRSARC01",124,0)
 ..   K DIR,Y
"RTN","PRSARC01",125,0)
 ..   S DIR("B")=80-$S($G(RH1)>0:RH1,1:40)
"RTN","PRSARC01",126,0)
 ..   S DIR("A")="Enter recess hours for the 2nd week of the pay period"
"RTN","PRSARC01",127,0)
 ..   S DIR("?")="Pay period week 2 hours.  Enter the recess hours for selected weeks."
"RTN","PRSARC01",128,0)
 ..   S DIR(0)="N^0:72:2"
"RTN","PRSARC01",129,0)
 ..   N VALID S (VALID,OUT)=0
"RTN","PRSARC01",130,0)
 ..   F  D  Q:VALID!OUT
"RTN","PRSARC01",131,0)
 ...    D ^DIR
"RTN","PRSARC01",132,0)
 ...    I (+Y#.25)=0 S VALID=1
"RTN","PRSARC01",133,0)
 ...    I +Y=0 S Y=""
"RTN","PRSARC01",134,0)
 ...    I $D(DIRUT) S OUT=1
"RTN","PRSARC01",135,0)
 ...    S RH2=Y
"RTN","PRSARC01",136,0)
 Q
"RTN","PRSARC01",137,0)
SETWKSLM(OOPSWKS,RH1,RH2,OTHERHRS,UOH,CTRH1,CTRH2,UCTH) ;
"RTN","PRSARC01",138,0)
 ; Set weeks RECESS HOURS in listmanager display
"RTN","PRSARC01",139,0)
 ;
"RTN","PRSARC01",140,0)
 N ITEM,LSTITEM
"RTN","PRSARC01",141,0)
 N OOPSWKS S OOPSWKS=""
"RTN","PRSARC01",142,0)
 S ITEM=0
"RTN","PRSARC01",143,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0  D
"RTN","PRSARC01",144,0)
 . ; Get item out of selectable items index
"RTN","PRSARC01",145,0)
 . S RH=$S(ITEM#2:$G(RH1),1:$G(RH2))
"RTN","PRSARC01",146,0)
 . I $G(OTHERHRS),$G(UOH) D
"RTN","PRSARC01",147,0)
 ..  N D1,DAY,PPI,PPE S D1=$G(WKSFM(ITEM)) D PP^PRSAPPU
"RTN","PRSARC01",148,0)
 ..  I $G(PPI)>0 D
"RTN","PRSARC01",149,0)
 ...   K TH D TOURHRS^PRSARC07(.TH,PPI,+PRSNURSE,"")
"RTN","PRSARC01",150,0)
 ...   S RH=$S(ITEM#2:TH("W1"),1:TH("W2"))
"RTN","PRSARC01",151,0)
 . I RH'>0,UCTH S RH=$S(ITEM#2:CTRH1,1:CTRH2)
"RTN","PRSARC01",152,0)
 . S LSTITEM=$G(^TMP("PRSSW",$J,ITEM))
"RTN","PRSARC01",153,0)
 . D FLDTEXT^VALM10(LSTITEM,"RECESS HOURS",$J(RH,15,2))
"RTN","PRSARC01",154,0)
 .;
"RTN","PRSARC01",155,0)
 .; set hours for selected weeks, remove from array if 0
"RTN","PRSARC01",156,0)
 .; 
"RTN","PRSARC01",157,0)
 . I RH'>0 D
"RTN","PRSARC01",158,0)
 ..  I UCTH S OOPSWKS=OOPSWKS_ITEM_","
"RTN","PRSARC01",159,0)
 ..  K ^TMP("PRSRW",$J,ITEM)
"RTN","PRSARC01",160,0)
 . E  D
"RTN","PRSARC01",161,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,2)=RH
"RTN","PRSARC01",162,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,3)=$G(WKSFM(ITEM))
"RTN","PRSARC01",163,0)
 ..  ;S $P(^TMP("PRSRW",$J,ITEM),U,4)=REW
"RTN","PRSARC01",164,0)
 Q
"RTN","PRSARC01",165,0)
SELRWK(PR,OUT) ;PROMPT USER TO SELECT WEEKS FOR RECESS
"RTN","PRSARC01",166,0)
 ; 
"RTN","PRSARC01",167,0)
 ; INPUT: PR-prompt flag are they setting recess hours or removing
"RTN","PRSARC01",168,0)
 ;        recess hours
"RTN","PRSARC01",169,0)
 ; OUTPUT: OUT - user aborted or timed out
"RTN","PRSARC01",170,0)
 S VALMBCK="R"
"RTN","PRSARC01",171,0)
 I $G(PRSVIEW) D VWMSG^PRSARC03(1) Q
"RTN","PRSARC01",172,0)
 N DIR,DIRUT,LISTI,ITEM,Y
"RTN","PRSARC01",173,0)
 S OUT=1
"RTN","PRSARC01",174,0)
 ;
"RTN","PRSARC01",175,0)
 ; clear out current selections
"RTN","PRSARC01",176,0)
 ;
"RTN","PRSARC01",177,0)
 D DSELALL
"RTN","PRSARC01",178,0)
 N PRESEL
"RTN","PRSARC01",179,0)
 S PRESEL=+$P($P($G(XQORNOD(0)),U,4),"=",2)
"RTN","PRSARC01",180,0)
 I PRESEL,(PRESEL'=$P($P($G(XQORNOD(0)),U,4),"=",2))!((PRESEL'>PRSWKLST)&(PRESEL'<PRSLSTRT)) S Y=$$PARSE^PRSARC08(XQORNOD(0),PRSLSTRT,PRSWKLST)
"RTN","PRSARC01",181,0)
 I '(+$G(Y))!(+$G(Y)<PRSLSTRT)!(+$G(Y)>PRSWKLST) D
"RTN","PRSARC01",182,0)
 .S DIR(0)="L^"_PRSLSTRT_":"_PRSWKLST
"RTN","PRSARC01",183,0)
 .I $G(PR)="Z" D
"RTN","PRSARC01",184,0)
 .. S DIR("A")="Enter week numbers to set back to work weeks"
"RTN","PRSARC01",185,0)
 .E  D
"RTN","PRSARC01",186,0)
 .. S DIR("A")="Enter week numbers to set to recess"
"RTN","PRSARC01",187,0)
 .;
"RTN","PRSARC01",188,0)
 .D ^DIR
"RTN","PRSARC01",189,0)
 S VALMBCK="R"
"RTN","PRSARC01",190,0)
 Q:$D(DIRUT)
"RTN","PRSARC01",191,0)
 F I=1:1:$L(Y,",") D
"RTN","PRSARC01",192,0)
 .  S ITEM=+$P(Y,",",I)
"RTN","PRSARC01",193,0)
 .  Q:ITEM'>0
"RTN","PRSARC01",194,0)
 . ; Get item out of selectable items index
"RTN","PRSARC01",195,0)
 .  S LISTI=$G(^TMP("PRSLI",$J,ITEM))
"RTN","PRSARC01",196,0)
 .;
"RTN","PRSARC01",197,0)
 .; set selection week, recess
"RTN","PRSARC01",198,0)
 .;
"RTN","PRSARC01",199,0)
 .  S $P(^TMP("PRSRW",$J,ITEM),U)=LISTI
"RTN","PRSARC01",200,0)
 .  S ^TMP("PRSSW",$J,ITEM)=LISTI
"RTN","PRSARC01",201,0)
 S OUT=0
"RTN","PRSARC01",202,0)
 I "ZX"'[PR D SETWKHRS(.OUT)
"RTN","PRSARC01",203,0)
 S VALMBCK="R"
"RTN","PRSARC01",204,0)
 Q
"RTN","PRSARC01",205,0)
FLRECESS ; save recess schedule hrs to file
"RTN","PRSARC01",206,0)
 S VALMBCK="Q"
"RTN","PRSARC01",207,0)
 N SURE S SURE=0
"RTN","PRSARC01",208,0)
 ;
"RTN","PRSARC01",209,0)
 N CANADD,HASREC,OUT,CHANGE
"RTN","PRSARC01",210,0)
 S CANADD=$P(PRSNURSE,U,3)
"RTN","PRSARC01",211,0)
 S HASREC=$P(PRSFY,U,9)
"RTN","PRSARC01",212,0)
 ;
"RTN","PRSARC01",213,0)
 N DIR,Y,DIRUT
"RTN","PRSARC01",214,0)
 I $G(PRSOUT)=1 D
"RTN","PRSARC01",215,0)
 . S CHANGE=$$CHANGE^PRSARC03(HASREC)
"RTN","PRSARC01",216,0)
 . I 'HASREC!CHANGE D
"RTN","PRSARC01",217,0)
 ..  S SURE=1
"RTN","PRSARC01",218,0)
 ..  S DIR("A")="Changes will be lost.  Are you sure you want to quit"
"RTN","PRSARC01",219,0)
 ..  S DIR(0)="Y",DIR("B")="NO" D ^DIR
"RTN","PRSARC01",220,0)
 I SURE,(Y=0!$D(DIRUT)) S VALMBCK="R",PRSOUT=0 Q
"RTN","PRSARC01",221,0)
 I $G(PRSOUT)=1 S VALMBCK="Q" D:CHANGE VWMSG^PRSARC03(2) Q
"RTN","PRSARC01",222,0)
 ;
"RTN","PRSARC01",223,0)
 ;If new record add it. Nurse must be current AWS 9-month
"RTN","PRSARC01",224,0)
 ;
"RTN","PRSARC01",225,0)
 N PRSFDA,IEN,IENS,HOURS,WEEK
"RTN","PRSARC01",226,0)
 D FULL^VALM1
"RTN","PRSARC01",227,0)
 ;
"RTN","PRSARC01",228,0)
 I CANADD,'HASREC D
"RTN","PRSARC01",229,0)
 .  K PRSFDA
"RTN","PRSARC01",230,0)
 .  S PRSFDA(458.8,"+1,",.01)=+PRSNURSE
"RTN","PRSARC01",231,0)
 .  S PRSFDA(458.8,"+1,",1)=+PRSFY
"RTN","PRSARC01",232,0)
 .  S PRSFDA(458.8,"+1,",1.1)=PRSDT
"RTN","PRSARC01",233,0)
 .  D UPDATE^DIE("","PRSFDA","IEN"),MSG^DIALOG()
"RTN","PRSARC01",234,0)
 .  S HASREC=$G(IEN(1))
"RTN","PRSARC01",235,0)
 .  S $P(PRSFY,U,9)=HASREC
"RTN","PRSARC01",236,0)
 .  S $P(PRSFY,U,10)=$E(PRSDT,4,5)_"/"_$E(PRSDT,6,7)_"/"_$E(PRSDT,2,3)
"RTN","PRSARC01",237,0)
 .  S $P(PRSFY,U,11)=PRSDT
"RTN","PRSARC01",238,0)
 ;
"RTN","PRSARC01",239,0)
 I HASREC D
"RTN","PRSARC01",240,0)
 .; start date changed?
"RTN","PRSARC01",241,0)
 .  I $P($G(^PRST(458.8,HASREC,3)),U,2)'=PRSDT D
"RTN","PRSARC01",242,0)
 ..   K PRSFDA,IENS
"RTN","PRSARC01",243,0)
 ..   S IENS=HASREC_","
"RTN","PRSARC01",244,0)
 ..   S PRSFDA(458.8,IENS,1.1)=PRSDT
"RTN","PRSARC01",245,0)
 ..   D UPDATE^DIE("","PRSFDA","IEN"),MSG^DIALOG()
"RTN","PRSARC01",246,0)
 ..   S $P(PRSFY,U,10)=$E(PRSDT,4,5)_"/"_$E(PRSDT,6,7)_"/"_$E(PRSDT,2,3)
"RTN","PRSARC01",247,0)
 ..   S $P(PRSFY,U,11)=PRSDT
"RTN","PRSARC01",248,0)
 . I $$CHANGE^PRSARC03(HASREC) D
"RTN","PRSARC01",249,0)
 .. ; clean out old recess week records
"RTN","PRSARC01",250,0)
 ..   N WKIEN S WKIEN=0
"RTN","PRSARC01",251,0)
 ..   F  S WKIEN=$O(^PRST(458.8,HASREC,1,WKIEN)) Q:WKIEN'>0  D
"RTN","PRSARC01",252,0)
 ...    S IENS=WKIEN_","_HASREC_","
"RTN","PRSARC01",253,0)
 ...    S PRSFDA(458.82,IENS,.01)="@"
"RTN","PRSARC01",254,0)
 ..   D FILE^DIE("E","PRSFDA")
"RTN","PRSARC01",255,0)
 ..;
"RTN","PRSARC01",256,0)
 ..   S WEEK=0
"RTN","PRSARC01",257,0)
 ..   F  S WEEK=$O(^TMP("PRSRW",$J,WEEK)) Q:WEEK'>0  D
"RTN","PRSARC01",258,0)
 ...    S HOURS=$P(^TMP("PRSRW",$J,WEEK),U,2)
"RTN","PRSARC01",259,0)
 ...    Q:HOURS'>0
"RTN","PRSARC01",260,0)
 ...    K PRSFDA,IENS
"RTN","PRSARC01",261,0)
 ...    S IENS="+1,"_HASREC_","
"RTN","PRSARC01",262,0)
 ...    S PRSFDA(458.82,IENS,.01)=WEEK
"RTN","PRSARC01",263,0)
 ...    S PRSFDA(458.82,IENS,1)=HOURS
"RTN","PRSARC01",264,0)
 ...    S PRSFDA(458.82,IENS,2)=$G(WKSFM(WEEK))
"RTN","PRSARC01",265,0)
 ...    S PRSFDA(458.82,IENS,3)=$P(^TMP("PRSRW",$J,WEEK),U,4)
"RTN","PRSARC01",266,0)
 ...    D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSARC01",267,0)
 ..;
"RTN","PRSARC01",268,0)
 ..;  update user edit date time
"RTN","PRSARC01",269,0)
 ..;
"RTN","PRSARC01",270,0)
 ..    N %,%H,%I,X D NOW^%DTC
"RTN","PRSARC01",271,0)
 ..    K PRSFDA,IENS
"RTN","PRSARC01",272,0)
 ..    S IENS="+1,"_HASREC_","
"RTN","PRSARC01",273,0)
 ..    S PRSFDA(458.83,IENS,.01)=%
"RTN","PRSARC01",274,0)
 ..    S PRSFDA(458.83,IENS,1)=DUZ
"RTN","PRSARC01",275,0)
 ..    D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSARC01",276,0)
 .   S VALMSG="Changes Saved."
"RTN","PRSARC01",277,0)
 . E  D
"RTN","PRSARC01",278,0)
 ..  S VALMSG="Recess schedule has not changed since last save."
"RTN","PRSARC01",279,0)
 ;
"RTN","PRSARC01",280,0)
 I '$G(PRSVONLY) D
"RTN","PRSARC01",281,0)
 .  W !,VALMSG
"RTN","PRSARC01",282,0)
 .  S VALMBCK="Q"
"RTN","PRSARC01",283,0)
 E  D
"RTN","PRSARC01",284,0)
 .  S VALMBCK="R"
"RTN","PRSARC01",285,0)
 Q
"RTN","PRSARC01",286,0)
 ;
"RTN","PRSARC01",287,0)
DSELWK ;DESELECT WEEKS
"RTN","PRSARC01",288,0)
 ;
"RTN","PRSARC01",289,0)
 S VALMBCK="R"
"RTN","PRSARC01",290,0)
 I $G(PRSVIEW) D VWMSG^PRSARC03(1) Q
"RTN","PRSARC01",291,0)
 N OUT,ITEM,REW,RH,RDATA
"RTN","PRSARC01",292,0)
 S VALMBCK="R"
"RTN","PRSARC01",293,0)
 D SELRWK("Z",.OUT)
"RTN","PRSARC01",294,0)
 Q:OUT
"RTN","PRSARC01",295,0)
 ;
"RTN","PRSARC01",296,0)
 ; remove selections from recess array
"RTN","PRSARC01",297,0)
 S (ITEM,RH)=0
"RTN","PRSARC01",298,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0  D
"RTN","PRSARC01",299,0)
 . S LSTITEM=$G(^TMP("PRSSW",$J,ITEM))
"RTN","PRSARC01",300,0)
 . D FLDTEXT^VALM10(LSTITEM,"RECESS HOURS","")
"RTN","PRSARC01",301,0)
 . S RDATA=^TMP("PRSRW",$J,ITEM)
"RTN","PRSARC01",302,0)
 . I $P(RDATA,U,5)'>0 D
"RTN","PRSARC01",303,0)
 ..   K ^TMP("PRSRW",$J,ITEM)
"RTN","PRSARC01",304,0)
 . E  D
"RTN","PRSARC01",305,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,2)=""
"RTN","PRSARC01",306,0)
 ;
"RTN","PRSARC01",307,0)
 D DSELALL
"RTN","PRSARC01",308,0)
 S VALMBCK="R"
"RTN","PRSARC01",309,0)
 Q
"RTN","PRSARC01",310,0)
DSELALL ; procedure removes items from selected items index w/no effect
"RTN","PRSARC01",311,0)
 ; on ListMan display.
"RTN","PRSARC01",312,0)
 ;
"RTN","PRSARC01",313,0)
 N ITEM,LISTI
"RTN","PRSARC01",314,0)
 S ITEM=0
"RTN","PRSARC01",315,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0  D
"RTN","PRSARC01",316,0)
 . S LISTI=$G(^TMP("PRSSW",$J,ITEM))
"RTN","PRSARC01",317,0)
 . K ^TMP("PRSSW",$J,ITEM)
"RTN","PRSARC01",318,0)
 Q
"RTN","PRSARC02")
0^36^B34099229^n/a
"RTN","PRSARC02",1,0)
PRSARC02 ;WOIFO/JAH - Recess Tracking Library Functions ;10/16/06
"RTN","PRSARC02",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC02",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC02",4,0)
 Q
"RTN","PRSARC02",5,0)
GETNURSE(NURSE,PRSTLV) ; procedure prompts and screens only 9-month AWS nurses
"RTN","PRSARC02",6,0)
 ;   
"RTN","PRSARC02",7,0)
 ;
"RTN","PRSARC02",8,0)
 ; INPUT: PRSTLV - flag to indicate T&L access, 2 for timekeeper
"RTN","PRSARC02",9,0)
 ;                 3 for 
"RTN","PRSARC02",10,0)
 ; OUTPUT: NURSE (3 ^ pieces)
"RTN","PRSARC02",11,0)
 ;           1) - Nurse IEN from 450 lookup which is screened for
"RTN","PRSARC02",12,0)
 ;            (DB part-time + NH 80 + pp M) or (recess rec exists)
"RTN","PRSARC02",13,0)
 ;           2) Nurse name
"RTN","PRSARC02",14,0)
 ;           3) 0 edit only, 1 add and edit
"RTN","PRSARC02",15,0)
 ;
"RTN","PRSARC02",16,0)
 ; use full screen for initial prompts
"RTN","PRSARC02",17,0)
 D FULL^VALM1
"RTN","PRSARC02",18,0)
 W @IOF,!!!
"RTN","PRSARC02",19,0)
 ;
"RTN","PRSARC02",20,0)
 ;Ask T&L unit
"RTN","PRSARC02",21,0)
 ;
"RTN","PRSARC02",22,0)
 N TLI,TLE,SSN,DUMMY
"RTN","PRSARC02",23,0)
 I $G(PRSTLV)'>0 Q -1
"RTN","PRSARC02",24,0)
 D ^PRSAUTL
"RTN","PRSARC02",25,0)
 I $G(TLE)="" Q -1
"RTN","PRSARC02",26,0)
 ;
"RTN","PRSARC02",27,0)
 ;Lookup employees screening on t&l, normal hours, duty basis, pay plan
"RTN","PRSARC02",28,0)
 ;
"RTN","PRSARC02",29,0)
 N DIC,D
"RTN","PRSARC02",30,0)
 S DIC("A")="Select AWS NURSE: "
"RTN","PRSARC02",31,0)
 S DIC(0)="AEQM"
"RTN","PRSARC02",32,0)
 S DIC="^PRSPC("
"RTN","PRSARC02",33,0)
 S D="ATL"_TLE
"RTN","PRSARC02",34,0)
 S DIC("S")="I $P(^(0),U,8)=TLE,(($P(^(0),U,16)=80)&($P(^(0),U,10)=2)&($P(^(0),U,21)=""M""))!($O(^PRST(458.8,""B"",+Y,0)))"
"RTN","PRSARC02",35,0)
 D IX^DIC
"RTN","PRSARC02",36,0)
 S NURSE=Y
"RTN","PRSARC02",37,0)
 I +NURSE'>0 Q -1
"RTN","PRSARC02",38,0)
 ;
"RTN","PRSARC02",39,0)
 ; ensure entitlement string returns recess periods set to 1
"RTN","PRSARC02",40,0)
 ;
"RTN","PRSARC02",41,0)
 N DFN,ENT,ZENT
"RTN","PRSARC02",42,0)
 S DFN=+NURSE
"RTN","PRSARC02",43,0)
 D ^PRSAENT S ZENT=$S($E(ENT,5):"Recess Periods",1:"")
"RTN","PRSARC02",44,0)
 I ZENT="" D
"RTN","PRSARC02",45,0)
 .  W !!?5,"This nurse is not currently entitled to Recess Periods."
"RTN","PRSARC02",46,0)
 .  W !?5,"A new FY Recess Record cannot be added, but existing FY"
"RTN","PRSARC02",47,0)
 .  W !?5,"Recess records may be edited."
"RTN","PRSARC02",48,0)
 .  W ! S DUMMY=$$ASK^PRSLIB00(1)
"RTN","PRSARC02",49,0)
 .  S NURSE=NURSE_U_0
"RTN","PRSARC02",50,0)
 E  D
"RTN","PRSARC02",51,0)
 .  S NURSE=NURSE_U_1
"RTN","PRSARC02",52,0)
 S SSN=$P(^PRSPC(+NURSE,0),U,9),SSN="XXX-XX-"_$E(SSN,6,9)
"RTN","PRSARC02",53,0)
 S NURSE=NURSE_U_TLE_U_SSN
"RTN","PRSARC02",54,0)
 Q
"RTN","PRSARC02",55,0)
 ;
"RTN","PRSARC02",56,0)
CHOOSEFY(SELFY,NURSE) ; Build List of FY choices--Last, Current, Next--include
"RTN","PRSARC02",57,0)
 ; whether a record exists for that fiscal year already or not
"RTN","PRSARC02",58,0)
 ;
"RTN","PRSARC02",59,0)
 ;  INPUT: NURSE- IEN^NAME^(0 edit only, 1 add and edit)
"RTN","PRSARC02",60,0)
 ;         if nurse entitled to recess, new rec can be added, else
"RTN","PRSARC02",61,0)
 ;         only edit existing records allowed.
"RTN","PRSARC02",62,0)
 ;  OUTPUT: SELFY-selected fiscal year data (11 ^ piece string)
"RTN","PRSARC02",63,0)
 ;    1) 4 digit yr           2) ex.FY06-07      3) external 1st day
"RTN","PRSARC02",64,0)
 ;    4) external last day    5) FM 1st day      6) FM last day
"RTN","PRSARC02",65,0)
 ;    7) first pp             8) last pp         9) 458.8 IEN if exists 
"RTN","PRSARC02",66,0)
 ;    10) ext AWS start date 11) FM date AWS start
"RTN","PRSARC02",67,0)
 ;    12) AWS start pay period
"RTN","PRSARC02",68,0)
 ;
"RTN","PRSARC02",69,0)
 ;    example:
"RTN","PRSARC02",70,0)
 ; 2007^FY06-07^10/01/06^10/13/07^3061001^3071013^06-20^07-20^1
"RTN","PRSARC02",71,0)
 ; ^11/12/06^3061112^06-23
"RTN","PRSARC02",72,0)
 ;
"RTN","PRSARC02",73,0)
 ; entitled to Recess
"RTN","PRSARC02",74,0)
 N RENT,FYA,FYSA
"RTN","PRSARC02",75,0)
 S RENT=$P(NURSE,U,3)
"RTN","PRSARC02",76,0)
 ;
"RTN","PRSARC02",77,0)
 ; check to see if any Schedules are on file for this Nurse
"RTN","PRSARC02",78,0)
 ;
"RTN","PRSARC02",79,0)
 D FIND^DIC(458.8,,".01;1;1.1","Q",+NURSE,"AC",,,,"FYA")
"RTN","PRSARC02",80,0)
 ;
"RTN","PRSARC02",81,0)
 ; get current next and last
"RTN","PRSARC02",82,0)
 ;
"RTN","PRSARC02",83,0)
 D PRMPTARY
"RTN","PRSARC02",84,0)
 ;
"RTN","PRSARC02",85,0)
 ; if there are no editable records in the range and the Nurse
"RTN","PRSARC02",86,0)
 ; isn't entitled then the gig is up.
"RTN","PRSARC02",87,0)
 ;
"RTN","PRSARC02",88,0)
 I 'RENT&($P(FYSA(1),U,9)=""&($P(FYSA(2),U,9)="")&($P(FYSA(3),U,9)="")) D  Q
"RTN","PRSARC02",89,0)
 .  W !,$P(NURSE,U,2)," has no AWS schedules in the current, next or last fiscal years."
"RTN","PRSARC02",90,0)
 ;
"RTN","PRSARC02",91,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,CHOICE,CH,DIRUT
"RTN","PRSARC02",92,0)
 S DIR(0)=$$BLDDIR(.FYSA,.CHOICE,RENT)
"RTN","PRSARC02",93,0)
 S CH=CHOICE
"RTN","PRSARC02",94,0)
 I $L(CHOICE)=3 S CH=$E(CHOICE,1)_", "_$E(CHOICE,2)_" or "_$E(CHOICE,3)
"RTN","PRSARC02",95,0)
 E  I $L(CHOICE)=2 S CH=$E(CHOICE,1)_" or "_$E(CHOICE,2)
"RTN","PRSARC02",96,0)
 S DIR("?")="  Enter "_CH_" to "_$S(RENT:"add or edit",1:"edit")_" the recess schedule for that fiscal year."
"RTN","PRSARC02",97,0)
 S DIR("?",1)="  Edit a fiscal year by entering the code on the left."
"RTN","PRSARC02",98,0)
 S DIR("?",2)="  The available choices for editing a 9 month AWS"
"RTN","PRSARC02",99,0)
 S DIR("?",3)="  recess record are limited to the current, next and last"
"RTN","PRSARC02",100,0)
 S DIR("?",4)="  fiscal years.  If the nurse has an AWS record on file"
"RTN","PRSARC02",101,0)
 S DIR("?",5)="  for the current, next or last fiscal year then the"
"RTN","PRSARC02",102,0)
 S DIR("?",6)="  record may be edited.  To add a new schedule the nurse"
"RTN","PRSARC02",103,0)
 S DIR("?",7)="  must have a pay plan of M, a duty basis of part-time"
"RTN","PRSARC02",104,0)
 S DIR("?",8)="  and normal Hours equal to 80."
"RTN","PRSARC02",105,0)
 S DIR("A")="Select fiscal year"
"RTN","PRSARC02",106,0)
 S DIR("B")=$E(CHOICE,1)
"RTN","PRSARC02",107,0)
 D ^DIR
"RTN","PRSARC02",108,0)
 I $D(DIRUT) S SELFY=0
"RTN","PRSARC02",109,0)
 E  S SELFY=FYSA($S(Y="C":1,Y="N":2,1:3))
"RTN","PRSARC02",110,0)
 Q
"RTN","PRSARC02",111,0)
 ;
"RTN","PRSARC02",112,0)
PRMPTARY ; Build array w/fiscal year selections to edit
"RTN","PRSARC02",113,0)
 N FY,CNT,REC,FOUND,ST,EN,RANGE,RWIEN,CUR,CUR4Y,EXTRANGE,PPE,STDT
"RTN","PRSARC02",114,0)
 N X,TMPDT,EXTSTDT,LAS,LAS4Y,NEX,NEX4Y
"RTN","PRSARC02",115,0)
 S CUR=$$GETFSCYR^PRSARC04(DT)
"RTN","PRSARC02",116,0)
 S CUR4Y=+$E(CUR,1,3)
"RTN","PRSARC02",117,0)
 S TMPDT=CUR4Y+1_"0101"
"RTN","PRSARC02",118,0)
 S NEX=$$GETFSCYR^PRSARC04(TMPDT)
"RTN","PRSARC02",119,0)
 S NEX4Y=+$E(NEX,1,3)
"RTN","PRSARC02",120,0)
 S TMPDT=NEX4Y-2_"0101"
"RTN","PRSARC02",121,0)
 S LAS=$$GETFSCYR^PRSARC04(TMPDT)
"RTN","PRSARC02",122,0)
 S LAS4Y=+$E(LAS,1,3)
"RTN","PRSARC02",123,0)
 S CUR4Y=CUR4Y+1700
"RTN","PRSARC02",124,0)
 S NEX4Y=NEX4Y+1700
"RTN","PRSARC02",125,0)
 S LAS4Y=LAS4Y+1700
"RTN","PRSARC02",126,0)
 ;
"RTN","PRSARC02",127,0)
 S CNT=0
"RTN","PRSARC02",128,0)
 F FY=CUR4Y,NEX4Y,LAS4Y D
"RTN","PRSARC02",129,0)
 .  S CNT=CNT+1
"RTN","PRSARC02",130,0)
 .  S (REC,FOUND)=0
"RTN","PRSARC02",131,0)
 .  F  S REC=$O(FYA("DILIST","ID",REC)) Q:REC'>0!(FOUND)  D
"RTN","PRSARC02",132,0)
 ..   I FYA("DILIST","ID",REC,1)=FY S FOUND=REC,RWIEN=FYA("DILIST",2,REC)
"RTN","PRSARC02",133,0)
 .  S RANGE=$$FYDAYS^PRSARC04(FY)
"RTN","PRSARC02",134,0)
 .  S ST=$P(RANGE,U)
"RTN","PRSARC02",135,0)
 .  S EN=$P(RANGE,U,2)
"RTN","PRSARC02",136,0)
 .  S ST=$E(ST,4,5)_"/"_$E(ST,6,7)_"/"_$E(ST,2,3)
"RTN","PRSARC02",137,0)
 .  S EN=$E(EN,4,5)_"/"_$E(EN,6,7)_"/"_$E(EN,2,3)
"RTN","PRSARC02",138,0)
 .  S EXTRANGE=ST_U_EN
"RTN","PRSARC02",139,0)
 .  S FYSA(CNT)=$S(CNT=2:NEX4Y,CNT=1:CUR4Y,1:LAS4Y)
"RTN","PRSARC02",140,0)
 .  S FYSA(CNT)=FYSA(CNT)_U_$P($S(CNT=2:NEX,CNT=1:CUR,1:LAS),U,3)_U_EXTRANGE_U_RANGE
"RTN","PRSARC02",141,0)
 .  I FOUND D
"RTN","PRSARC02",142,0)
 ..    ;convert start date to mm/dd/yy
"RTN","PRSARC02",143,0)
 ..    S X=$G(FYA("DILIST","ID",FOUND,1.1))
"RTN","PRSARC02",144,0)
 ..    D ^%DT
"RTN","PRSARC02",145,0)
 ..    S STDT=Y
"RTN","PRSARC02",146,0)
 ..    N D1 S D1=STDT D PP^PRSAPPU
"RTN","PRSARC02",147,0)
 ..    S EXTSTDT=$E(Y,4,5)_"/"_$E(Y,6,7)_"/"_$E(Y,2,3)
"RTN","PRSARC02",148,0)
 ..    S FYSA(CNT)=FYSA(CNT)_U_RWIEN_U_EXTSTDT_U_STDT_U_PPE
"RTN","PRSARC02",149,0)
 .  E  D
"RTN","PRSARC02",150,0)
 ..    S FYSA(CNT)=FYSA(CNT)_U_U_U
"RTN","PRSARC02",151,0)
 ;
"RTN","PRSARC02",152,0)
 Q
"RTN","PRSARC02",153,0)
BLDDIR(FYSA,CHOICES,RENT) ; Put Set of Codes for DIR into DIR(0) format
"RTN","PRSARC02",154,0)
 I '$D(FYSA) W !,"Error: no fiscal year data!",!! Q
"RTN","PRSARC02",155,0)
 ;
"RTN","PRSARC02",156,0)
 N CNT,CI,SOC,AW,SELI,NR
"RTN","PRSARC02",157,0)
 S CNT=0
"RTN","PRSARC02",158,0)
 S NR="-has no existing record."
"RTN","PRSARC02",159,0)
 S AW="-has AWS start date "
"RTN","PRSARC02",160,0)
 ;
"RTN","PRSARC02",161,0)
 ; SOC -set of codes
"RTN","PRSARC02",162,0)
 ;
"RTN","PRSARC02",163,0)
 N SOC S SOC="",CHOICES=""
"RTN","PRSARC02",164,0)
 F SELI="Current","Next","Last" D
"RTN","PRSARC02",165,0)
 . S CNT=CNT+1
"RTN","PRSARC02",166,0)
 . S CI=$G(FYSA(CNT))
"RTN","PRSARC02",167,0)
 . Q:RENT=0&($P(CI,U,9)="")
"RTN","PRSARC02",168,0)
 . S CHOICES=CHOICES_$S(CNT=1:"C",CNT=2:"N",1:"L")
"RTN","PRSARC02",169,0)
 . I SOC="" D
"RTN","PRSARC02",170,0)
 ..  S SOC="S^"_$S(CNT=1:"C:",CNT=2:"N:",1:"L:")
"RTN","PRSARC02",171,0)
 . E  D
"RTN","PRSARC02",172,0)
 ..  S SOC=SOC_$S(CNT=2:";N:",1:";L:")
"RTN","PRSARC02",173,0)
 . S SOC=SOC_SELI_" FY"_$P(CI,U,1)_" begins "_$P(CI,U,3)_$S($P(CI,U,9)'="":AW_$P(CI,U,10),1:NR)
"RTN","PRSARC02",174,0)
 Q SOC
"RTN","PRSARC03")
0^37^B65859109^n/a
"RTN","PRSARC03",1,0)
PRSARC03 ;WOIFO/JAH - Recess Tracking Functions ;10/25/06
"RTN","PRSARC03",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC03",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC03",4,0)
 Q
"RTN","PRSARC03",5,0)
NEWSTART(OUT,PRSDT) ; change alternate work schedule start date.
"RTN","PRSARC03",6,0)
 ;
"RTN","PRSARC03",7,0)
 N FD,LD,ALLFY,GOOD,LINE,LISTI
"RTN","PRSARC03",8,0)
 S OUT=0
"RTN","PRSARC03",9,0)
 S FD=$P(PRSFYRNG,U,1)
"RTN","PRSARC03",10,0)
 S LD=$P(PRSFYRNG,U,2)
"RTN","PRSARC03",11,0)
 S ALLFY=$$ALLFYAWS^PRSARC04()
"RTN","PRSARC03",12,0)
 I ALLFY<0 S OUT=1 Q
"RTN","PRSARC03",13,0)
 I ALLFY=1 D
"RTN","PRSARC03",14,0)
 .    S PRSDT=$P(PRSFY,U,5)
"RTN","PRSARC03",15,0)
 E  D
"RTN","PRSARC03",16,0)
 .    S PRSDT=$$AWSTART(FD,LD,"Enter Date 9 mo. AWS begins")
"RTN","PRSARC03",17,0)
 .    I PRSDT'>0 S OUT=1
"RTN","PRSARC03",18,0)
 Q:OUT
"RTN","PRSARC03",19,0)
 ; convert start to 1st day of pp and 
"RTN","PRSARC03",20,0)
 ; update the PRSFY var with new start date info
"RTN","PRSARC03",21,0)
 N D1,DAY S D1=PRSDT D PP^PRSAPPU
"RTN","PRSARC03",22,0)
 I DAY'=1 N X1,X2,X,%H S X1=D1,X2=-(DAY-1) D C^%DTC S PRSDT=X
"RTN","PRSARC03",23,0)
 S $P(PRSFY,U,12)=PPE
"RTN","PRSARC03",24,0)
 S $P(PRSFY,U,10)=$E(PRSDT,4,5)_"/"_$E(PRSDT,6,7)_"/"_$E(PRSDT,2,3)
"RTN","PRSARC03",25,0)
 S $P(PRSFY,U,11)=PRSDT
"RTN","PRSARC03",26,0)
 ;
"RTN","PRSARC03",27,0)
 ;
"RTN","PRSARC03",28,0)
 S PRSFSCYR=$$GETFSCYR^PRSARC04(PRSDT)
"RTN","PRSARC03",29,0)
 I PRSDT<2006 S OUT=1
"RTN","PRSARC03",30,0)
 ;
"RTN","PRSARC03",31,0)
 ;GET total available hours based on fiscal year and start date.
"RTN","PRSARC03",32,0)
 ;
"RTN","PRSARC03",33,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARC03",34,0)
 ;
"RTN","PRSARC03",35,0)
 ; clean out old list data and rebuild everything
"RTN","PRSARC03",36,0)
 ;
"RTN","PRSARC03",37,0)
 D CLEAN^VALM10
"RTN","PRSARC03",38,0)
 S (LISTI,LINE)=0
"RTN","PRSARC03",39,0)
 K ^TMP("PRSARC",$J) ;  array-all items in list, incl. non selectable
"RTN","PRSARC03",40,0)
 ;                      items such as month headings.
"RTN","PRSARC03",41,0)
 K ^TMP("PRSLI",$J) ; index of all selectable items in the list.
"RTN","PRSARC03",42,0)
 K ^TMP("PRSSW",$J) ; index of items selected as recess weeks.
"RTN","PRSARC03",43,0)
 K ^TMP("PRSRW",$J) ; index of recess weeks with hours.
"RTN","PRSARC03",44,0)
 D MAIN^PRSARC06(.PRSLSTRT,.LISTI,.LINE,PRSDT,PRSFYRNG)
"RTN","PRSARC03",45,0)
 D HDR^PRSARC
"RTN","PRSARC03",46,0)
 S PRSWKLST=LISTI-1
"RTN","PRSARC03",47,0)
 S VALMCNT=LINE
"RTN","PRSARC03",48,0)
 ;
"RTN","PRSARC03",49,0)
 Q
"RTN","PRSARC03",50,0)
 ;
"RTN","PRSARC03",51,0)
AWSTART(FD,LD,PROMPT) ;function returns date within range FD-LD using PROMPT.
"RTN","PRSARC03",52,0)
 ;
"RTN","PRSARC03",53,0)
 ; since %DT will not restrict the valid date to a range we can use
"RTN","PRSARC03",54,0)
 ;  %DT to create the lower bound and then check the upper bound
"RTN","PRSARC03",55,0)
 ;  after exit from %DT.  range is first and last day of FY.
"RTN","PRSARC03",56,0)
 N PRSDT,Y,DIRUT,DIR,X
"RTN","PRSARC03",57,0)
 S DIR("A")=PROMPT
"RTN","PRSARC03",58,0)
 S DIR(0)="D^"_FD_":"_LD_":EX"
"RTN","PRSARC03",59,0)
 D ^DIR
"RTN","PRSARC03",60,0)
 S PRSDT=Y
"RTN","PRSARC03",61,0)
 I $D(DIRUT) S PRSDT=0
"RTN","PRSARC03",62,0)
 Q PRSDT
"RTN","PRSARC03",63,0)
 ;
"RTN","PRSARC03",64,0)
FYRDATA(RWIEN) ; build a record of data for the Fiscal Year Recess for the viewer
"RTN","PRSARC03",65,0)
 ; INPUT: Recess record IEN
"RTN","PRSARC03",66,0)
 ;
"RTN","PRSARC03",67,0)
 ;  OUTPUT: SELFY-selected fiscal year data (11 ^ piece string)
"RTN","PRSARC03",68,0)
 ;    1) 4 digit yr           2) ex.FY06-07      3) external 1st day
"RTN","PRSARC03",69,0)
 ;    4) external last day    5) FM 1st day      6) FM last day
"RTN","PRSARC03",70,0)
 ;    7) first pp             8) last pp         9) 458.8 IEN if exists 
"RTN","PRSARC03",71,0)
 ;    10) ext AWS start date 11) FM date AWS start
"RTN","PRSARC03",72,0)
 ;    12) AWS start pay period
"RTN","PRSARC03",73,0)
 ;
"RTN","PRSARC03",74,0)
 N NODE3,FY,RANGE,ST,EN,EXTRANGE,FYE,X,Y,EXTSTDT,SELFY,STDT
"RTN","PRSARC03",75,0)
 S NODE3=$G(^PRST(458.8,RWIEN,3))
"RTN","PRSARC03",76,0)
 S FY=$P(NODE3,U,1)
"RTN","PRSARC03",77,0)
 S RANGE=$$FYDAYS^PRSARC04(FY)
"RTN","PRSARC03",78,0)
 S ST=$P(RANGE,U)
"RTN","PRSARC03",79,0)
 S EN=$P(RANGE,U,2)
"RTN","PRSARC03",80,0)
 S ST=$E(ST,4,5)_"/"_$E(ST,6,7)_"/"_$E(ST,2,3)
"RTN","PRSARC03",81,0)
 S EN=$E(EN,4,5)_"/"_$E(EN,6,7)_"/"_$E(EN,2,3)
"RTN","PRSARC03",82,0)
 S EXTRANGE=ST_U_EN
"RTN","PRSARC03",83,0)
 S FYE=$$GETFSCYR^PRSARC04(FY-1700_"0101")
"RTN","PRSARC03",84,0)
 S SELFY=FY_U_$P(FYE,U,3)_U_EXTRANGE_U_RANGE
"RTN","PRSARC03",85,0)
 S X=$P(NODE3,U,2)
"RTN","PRSARC03",86,0)
 D ^%DT
"RTN","PRSARC03",87,0)
 S STDT=Y
"RTN","PRSARC03",88,0)
 N D1,DAY S D1=STDT D PP^PRSAPPU
"RTN","PRSARC03",89,0)
 S EXTSTDT=$E(Y,4,5)_"/"_$E(Y,6,7)_"/"_$E(Y,2,3)
"RTN","PRSARC03",90,0)
 S SELFY=SELFY_U_RWIEN_U_EXTSTDT_U_STDT_U_PPE
"RTN","PRSARC03",91,0)
 Q SELFY
"RTN","PRSARC03",92,0)
VWMSG(MSG) ; roll and scroll message from listmanager call.
"RTN","PRSARC03",93,0)
 D FULL^VALM1
"RTN","PRSARC03",94,0)
 I MSG=1 D
"RTN","PRSARC03",95,0)
 .  W !!,"This is a view only option.  You may not make any changes to the"
"RTN","PRSARC03",96,0)
 .  W !,"recess schedule.  The Recess Hours Summary action is available.",!
"RTN","PRSARC03",97,0)
 .  S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSARC03",98,0)
 E  D
"RTN","PRSARC03",99,0)
 .  I 'PRSVIEW W !!,"Recess Schedule not saved." S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSARC03",100,0)
 Q
"RTN","PRSARC03",101,0)
OTHERHRS(CTHW1,CTHW2,PRSNURSE) ; are any tour hours selected different than
"RTN","PRSARC03",102,0)
 ; current tour hours.
"RTN","PRSARC03",103,0)
 N ITEM,D1,TH,MISMATCH,K,PP4Y,PPE,PPI,Y,DAY,W1TMP,W2TMP
"RTN","PRSARC03",104,0)
 S (MISMATCH,ITEM)=0
"RTN","PRSARC03",105,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0!MISMATCH  D
"RTN","PRSARC03",106,0)
 . ; Get item out of selectable items index
"RTN","PRSARC03",107,0)
 .  S D1=$G(WKSFM(ITEM)) D PP^PRSAPPU
"RTN","PRSARC03",108,0)
 .  I $G(PPI)>0 D
"RTN","PRSARC03",109,0)
 ..   K TH D TOURHRS^PRSARC07(.TH,PPI,PRSNURSE,"")
"RTN","PRSARC03",110,0)
 ..   S W1TMP=$G(TH("W1"))
"RTN","PRSARC03",111,0)
 ..   S W2TMP=$G(TH("W2"))
"RTN","PRSARC03",112,0)
 ..   I W1TMP>0,W1TMP'=CTHW1 S MISMATCH=1 Q
"RTN","PRSARC03",113,0)
 ..   I W2TMP>0,W2TMP'=CTHW2 S MISMATCH=1 Q
"RTN","PRSARC03",114,0)
 Q MISMATCH
"RTN","PRSARC03",115,0)
 ;
"RTN","PRSARC03",116,0)
GETFLWKS(IEN,PRSDT) ; Get weeks/recess hours from 458.8 and any posted recess
"RTN","PRSARC03",117,0)
 ; by way of the TT8b string.  Update the list columns.
"RTN","PRSARC03",118,0)
 ;
"RTN","PRSARC03",119,0)
 ; INPUT: IEN from file 458.8
"RTN","PRSARC03",120,0)
 ;
"RTN","PRSARC03",121,0)
 N RW,RWDATA,REW,RWD1,D1,TMPDT,LSTITEM,RH,PPI,STR8B,PAD,RCPOSTED
"RTN","PRSARC03",122,0)
 N X1,X2,X,%H S X1=PRSDT,X2=-1 D C^%DTC S TMPDT=X
"RTN","PRSARC03",123,0)
 ;
"RTN","PRSARC03",124,0)
 F  S TMPDT=$O(^PRST(458.8,IEN,1,"AC",TMPDT)) Q:TMPDT'>0  D
"RTN","PRSARC03",125,0)
 .  S RW=$O(^PRST(458.8,IEN,1,"AC",TMPDT,0))
"RTN","PRSARC03",126,0)
 .  S RWDATA=^PRST(458.8,IEN,1,RW,0)
"RTN","PRSARC03",127,0)
 .  S RH=$P(RWDATA,U,2)
"RTN","PRSARC03",128,0)
 .  S RWD1=$P(RWDATA,U,3)
"RTN","PRSARC03",129,0)
 .  S REW=$P(RWDATA,U,4)
"RTN","PRSARC03",130,0)
 .  ; Get item number for week out of selectable items index
"RTN","PRSARC03",131,0)
 .  S LSTITEM=$G(^TMP("PRSLI",$J,+RWDATA))
"RTN","PRSARC03",132,0)
 .  D FLDTEXT^VALM10(LSTITEM,"RECESS HOURS",$J($P(RWDATA,U,2),15,2))
"RTN","PRSARC03",133,0)
 .  D FLDCTRL^VALM10(LSTITEM,"RECESS HOURS",,,1)
"RTN","PRSARC03",134,0)
 .  S ^TMP("PRSRW",$J,+RWDATA)=LSTITEM_U_RH_U_RWD1_U_REW
"RTN","PRSARC03",135,0)
 ;D RPOSTED
"RTN","PRSARC03",136,0)
 Q
"RTN","PRSARC03",137,0)
RPOSTED ; Get weeks posted 
"RTN","PRSARC03",138,0)
 ; get 8b from 5 node unless corrected timecard--then re decomp
"RTN","PRSARC03",139,0)
 ;
"RTN","PRSARC03",140,0)
 N WKDT,RW,STARTDT,STR8B,PAD,RCPOSTED,LSTITEM,RW
"RTN","PRSARC03",141,0)
 S STARTDT=PRSDT
"RTN","PRSARC03",142,0)
 N X1,X2,X,%H S X1=PRSDT,X2=-1 D C^%DTC S WKDT=X
"RTN","PRSARC03",143,0)
 F  S WKDT=$O(FMWKS(WKDT)) Q:WKDT'>0  D
"RTN","PRSARC03",144,0)
 .  S RW=$G(FMWKS(WKDT))
"RTN","PRSARC03",145,0)
 .  S PPI=+$G(^PRST(458,"AD",WKDT))
"RTN","PRSARC03",146,0)
 .  Q:PPI'>0
"RTN","PRSARC03",147,0)
 .  S STR8B=$$GET8B^PRSPUT3(PPI,+PRSNURSE)
"RTN","PRSARC03",148,0)
 .; pad 8B for function
"RTN","PRSARC03",149,0)
 .  S PAD="12345678901234567890123456789012"
"RTN","PRSARC03",150,0)
 .  S RCPOSTED=$$CD8B^PRSU1B2(PAD_STR8B,"RS^3^RN^3",1)
"RTN","PRSARC03",151,0)
 .  S RCPOSTED=$P(RCPOSTED,U,$S(RW#2:1,1:2))
"RTN","PRSARC03",152,0)
 .  Q:RCPOSTED'>0
"RTN","PRSARC03",153,0)
 .  S LSTITEM=$G(^TMP("PRSLI",$J,RW))
"RTN","PRSARC03",154,0)
 .  D FLDTEXT^VALM10(LSTITEM,"RECESS POSTED",$J(RCPOSTED,7,2))
"RTN","PRSARC03",155,0)
 .  I +$G(^TMP("PRSRW",$J,+RW)) D
"RTN","PRSARC03",156,0)
 ..   S $P(^TMP("PRSRW",$J,+RW),U,5)=RCPOSTED
"RTN","PRSARC03",157,0)
 .  E  D
"RTN","PRSARC03",158,0)
 ..   S ^TMP("PRSRW",$J,RW)=LSTITEM_U_U_U_U_RCPOSTED
"RTN","PRSARC03",159,0)
 Q
"RTN","PRSARC03",160,0)
EVEODDWK(ODD,EVEN) ; CHECK SELECTION INDEX FOR ODD AND EVEN PP WEEKS
"RTN","PRSARC03",161,0)
 N ITEM
"RTN","PRSARC03",162,0)
 S (ODD,EVEN)=0
"RTN","PRSARC03",163,0)
 S ITEM=0
"RTN","PRSARC03",164,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0!(ODD&EVEN)  D
"RTN","PRSARC03",165,0)
 . I ITEM#2 S ODD=1
"RTN","PRSARC03",166,0)
 . E  S EVEN=1
"RTN","PRSARC03",167,0)
 Q
"RTN","PRSARC03",168,0)
CHANGE(IEN) ; funtion true if file record is different than current data
"RTN","PRSARC03",169,0)
 ;
"RTN","PRSARC03",170,0)
 S VALMBCK="R"
"RTN","PRSARC03",171,0)
 Q:$G(IEN)'>0 0
"RTN","PRSARC03",172,0)
 N RW,RWDATA,REW,RH,RWD1,PRSFILED,ITEM,PRSLIST,WK
"RTN","PRSARC03",173,0)
 S RW=0,PRSFILED="",PRSLIST=""
"RTN","PRSARC03",174,0)
 F  S RW=$O(^PRST(458.8,IEN,1,RW)) Q:RW'>0  D
"RTN","PRSARC03",175,0)
 . S RWDATA=^PRST(458.8,IEN,1,RW,0)
"RTN","PRSARC03",176,0)
 . S WK=+RWDATA
"RTN","PRSARC03",177,0)
 . S RH=$P(RWDATA,U,2)
"RTN","PRSARC03",178,0)
 . S RWD1=$P(RWDATA,U,3)
"RTN","PRSARC03",179,0)
 . S REW=$P(RWDATA,U,4)
"RTN","PRSARC03",180,0)
 . S PRSFILED=PRSFILED_WK_U_RH_U
"RTN","PRSARC03",181,0)
 ;
"RTN","PRSARC03",182,0)
 S ITEM=0
"RTN","PRSARC03",183,0)
 F  S ITEM=$O(^TMP("PRSRW",$J,ITEM)) Q:ITEM'>0  D
"RTN","PRSARC03",184,0)
 . S RH=$P(^TMP("PRSRW",$J,ITEM),U,2)
"RTN","PRSARC03",185,0)
 . I RH>0 S PRSLIST=PRSLIST_ITEM_U_RH_U
"RTN","PRSARC03",186,0)
 Q PRSFILED'=PRSLIST
"RTN","PRSARC03",187,0)
 ;==================================================================
"RTN","PRSARC03",188,0)
 ;
"RTN","PRSARC03",189,0)
SETRECES ;SET HOURS FOR A WEEK AT A TIME
"RTN","PRSARC03",190,0)
 ;
"RTN","PRSARC03",191,0)
 S VALMBCK="R"
"RTN","PRSARC03",192,0)
 I $G(PRSVIEW) D VWMSG^PRSARC03(1) Q
"RTN","PRSARC03",193,0)
 ;
"RTN","PRSARC03",194,0)
 N LSTITEM,CTRH1
"RTN","PRSARC03",195,0)
 N ITEM,Y,RH1,RH2,OUT,HRSLEFT,HRDEFALT,CRH,TOURHRS,D1,PPI,PPE
"RTN","PRSARC03",196,0)
 ;
"RTN","PRSARC03",197,0)
 S VALMBCK="R"
"RTN","PRSARC03",198,0)
 D SELRWK^PRSARC01("X",.OUT)
"RTN","PRSARC03",199,0)
 Q:OUT
"RTN","PRSARC03",200,0)
 ;get remaining hours to schedule for FY
"RTN","PRSARC03",201,0)
 ;
"RTN","PRSARC03",202,0)
 S (CRH,ITEM)=0
"RTN","PRSARC03",203,0)
 F  S ITEM=$O(^TMP("PRSSW",$J,ITEM)) Q:ITEM'>0!OUT  D
"RTN","PRSARC03",204,0)
 .  S D1=$G(WKSFM(ITEM)) D PP^PRSAPPU
"RTN","PRSARC03",205,0)
 .  N TH D TOURHRS^PRSARC07(.TH,PPI,+PRSNURSE,"")
"RTN","PRSARC03",206,0)
 .  S CTRH1=+TH("W1"),CTRH2=+TH("W2")
"RTN","PRSARC03",207,0)
 .  S TOURHRS=$S(ITEM#2:CTRH1,1:CTRH2)
"RTN","PRSARC03",208,0)
 .  S HRSLEFT=$$HRSLEFT()
"RTN","PRSARC03",209,0)
 .  S CRH=+$P($G(^TMP("PRSRW",$J,ITEM)),U,2)
"RTN","PRSARC03",210,0)
 .  I HRSLEFT+CRH<TOURHRS D
"RTN","PRSARC03",211,0)
 ..    S HRDEFALT=HRSLEFT+CRH
"RTN","PRSARC03",212,0)
 .  E  D
"RTN","PRSARC03",213,0)
 ..   S HRDEFALT=TOURHRS
"RTN","PRSARC03",214,0)
 .  I HRDEFALT<0 S HRDEFALT=0
"RTN","PRSARC03",215,0)
 .  N DIRUT,DIR,Y,VALID
"RTN","PRSARC03",216,0)
 .  S DIR(0)="N^0:72:2"
"RTN","PRSARC03",217,0)
 .  S DIR("B")=HRDEFALT
"RTN","PRSARC03",218,0)
 .  W !,"Recess hours remaining to schedule: ",HRSLEFT,!
"RTN","PRSARC03",219,0)
 .  S DIR("A")="Enter recess hours for week "_ITEM
"RTN","PRSARC03",220,0)
 .  S VALID=0
"RTN","PRSARC03",221,0)
 .  F  D  Q:VALID!OUT
"RTN","PRSARC03",222,0)
 ..   D ^DIR
"RTN","PRSARC03",223,0)
 ..   I (+Y#.25)=0 S VALID=1
"RTN","PRSARC03",224,0)
 ..   I +Y=0 S Y=""
"RTN","PRSARC03",225,0)
 ..   S RH=Y
"RTN","PRSARC03",226,0)
 ..   I $D(DIRUT) S OUT=1,RH=CRH
"RTN","PRSARC03",227,0)
 . ; Get item from selectable index
"RTN","PRSARC03",228,0)
 . S LSTITEM=$G(^TMP("PRSSW",$J,ITEM))
"RTN","PRSARC03",229,0)
 . D FLDTEXT^VALM10(LSTITEM,"RECESS HOURS",$J(RH,15,2))
"RTN","PRSARC03",230,0)
 .;
"RTN","PRSARC03",231,0)
 .; set hrs for selected weeks, remove from array if zero
"RTN","PRSARC03",232,0)
 .; 
"RTN","PRSARC03",233,0)
 . I RH'>0 D
"RTN","PRSARC03",234,0)
 ..  K ^TMP("PRSRW",$J,ITEM)
"RTN","PRSARC03",235,0)
 . E  D
"RTN","PRSARC03",236,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,2)=RH
"RTN","PRSARC03",237,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,3)=$G(WKSFM(ITEM))
"RTN","PRSARC03",238,0)
 ..  S $P(^TMP("PRSRW",$J,ITEM),U,4)=0
"RTN","PRSARC03",239,0)
 ;
"RTN","PRSARC03",240,0)
 D DSELALL^PRSARC01
"RTN","PRSARC03",241,0)
 S VALMBCK="R"
"RTN","PRSARC03",242,0)
 Q
"RTN","PRSARC03",243,0)
 ;====================
"RTN","PRSARC03",244,0)
HRSLEFT() ; Get remaining hours available for recess for the FY
"RTN","PRSARC03",245,0)
 ;
"RTN","PRSARC03",246,0)
 N TRHA,WK,HRSWK,HRSUSED,PRSRWHRS
"RTN","PRSARC03",247,0)
 S (WK,HRSUSED)=0
"RTN","PRSARC03",248,0)
 F  S WK=$O(^TMP("PRSRW",$J,WK)) Q:WK'>0  D
"RTN","PRSARC03",249,0)
 . ; Get item out of recess weeks items index
"RTN","PRSARC03",250,0)
 .   S HRSWK=$P(^TMP("PRSRW",$J,WK),U,2)
"RTN","PRSARC03",251,0)
 .   S HRSUSED=HRSUSED+HRSWK
"RTN","PRSARC03",252,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARC03",253,0)
 S TRHA=$P($G(PRSRWHRS),U,2)
"RTN","PRSARC03",254,0)
 Q TRHA-HRSUSED
"RTN","PRSARC03",255,0)
 ;
"RTN","PRSARC03",256,0)
HRSFILED(IEN) ; funtion returns number of recess hours on file
"RTN","PRSARC03",257,0)
 ;
"RTN","PRSARC03",258,0)
 N RW,RWDATA,RH,HRSFILED
"RTN","PRSARC03",259,0)
 S HRSFILED=0
"RTN","PRSARC03",260,0)
 Q:$G(IEN)'>0 HRSFILED
"RTN","PRSARC03",261,0)
 S RW=0,PRSFILED="",PRSLIST=""
"RTN","PRSARC03",262,0)
 F  S RW=$O(^PRST(458.8,IEN,1,RW)) Q:RW'>0  D
"RTN","PRSARC03",263,0)
 . S RWDATA=^PRST(458.8,IEN,1,RW,0)
"RTN","PRSARC03",264,0)
 . S RH=$P(RWDATA,U,2)
"RTN","PRSARC03",265,0)
 . S HRSFILED=HRSFILED+RH
"RTN","PRSARC03",266,0)
 Q HRSFILED
"RTN","PRSARC03",267,0)
 ;==================================================================
"RTN","PRSARC03",268,0)
 ;
"RTN","PRSARC04")
0^38^B24587069^n/a
"RTN","PRSARC04",1,0)
PRSARC04 ;WOIFO/JAH - Recess Tracking Functions ;11/1/06
"RTN","PRSARC04",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC04",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC04",4,0)
 Q
"RTN","PRSARC04",5,0)
GETFSCYR(PRSDT) ; Given a date get the 9-month AWS fiscal year.
"RTN","PRSARC04",6,0)
 ; This is the fiscal year during which the 9-month AWS is effective.
"RTN","PRSARC04",7,0)
 ; The fiscal year for 2006 (FY06, sometimes written FY05-06) is from
"RTN","PRSARC04",8,0)
 ; October 1, 2005 through September 30, 2006.  However, the fiscal
"RTN","PRSARC04",9,0)
 ; year for purposes of the 9-month AWS will be governed also by
"RTN","PRSARC04",10,0)
 ; complete pay periods, since the nurses normal hours=80 and duty
"RTN","PRSARC04",11,0)
 ; basis = part-time, must be in effect for the entire pay period.
"RTN","PRSARC04",12,0)
 ; Thus some 9-month AWS fiscal years may have 50, 52 or 54 weeks. 
"RTN","PRSARC04",13,0)
 ; The fiscal year is defined as the 12 months from the first full
"RTN","PRSARC04",14,0)
 ; pay period after October 1 through the pay period that contains
"RTN","PRSARC04",15,0)
 ; September 30.  In the example below September 30, 2007 is the
"RTN","PRSARC04",16,0)
 ; first day of the pay period 20 and thus the entire pay period is
"RTN","PRSARC04",17,0)
 ; included in the weeks for the 9-month AWS schedule for FY07. 
"RTN","PRSARC04",18,0)
 ;          
"RTN","PRSARC04",19,0)
 ;            Week    PayPd Sun Mon Tue Wed Thu Fri Sat
"RTN","PRSARC04",20,0)
 ;          
"RTN","PRSARC04",21,0)
 ;                    =============Oct 2006============
"RTN","PRSARC04",22,0)
 ;              1     06-20   1   2   3   4   5   6   7
"RTN","PRSARC04",23,0)
 ;              2             8   9  10  11  12  13  14
"RTN","PRSARC04",24,0)
 ;              3     06-21  15  16  17  18  19  20  21
"RTN","PRSARC04",25,0)
 ;              ...
"RTN","PRSARC04",26,0)
 ;          
"RTN","PRSARC04",27,0)
 ;             51     07-19  16  17  18  19  20  21  22
"RTN","PRSARC04",28,0)
 ;             52            23  24  25  26  27  28  29
"RTN","PRSARC04",29,0)
 ;             53     07-20  30   1   2   3   4   5   6
"RTN","PRSARC04",30,0)
 ;                    =============Oct 2007============
"RTN","PRSARC04",31,0)
 ;             54             7   8   9  10  11  12  13
"RTN","PRSARC04",32,0)
 ;
"RTN","PRSARC04",33,0)
 ; Get pay period with PRSDT and the 1st day of that pp
"RTN","PRSARC04",34,0)
 N X1,X2,%H,X,D1,PPE,YR,DAY,TMPYR,FFPPE,PPE,FISCALYR,PPDT1,FY1,FY2,FYLONG
"RTN","PRSARC04",35,0)
 S D1=PRSDT D PP^PRSAPPU
"RTN","PRSARC04",36,0)
 S FFPPE=PPE
"RTN","PRSARC04",37,0)
 S X2=(1-DAY),X1=PRSDT D C^%DTC S PPDT1=X
"RTN","PRSARC04",38,0)
 S TMPYR=$E(PPDT1,1,3)
"RTN","PRSARC04",39,0)
 S FISCALYR=$S(PPDT1'>(TMPYR_"0930"):TMPYR,1:TMPYR+1)_"0000"
"RTN","PRSARC04",40,0)
 S YR=$E(FISCALYR,1,3)
"RTN","PRSARC04",41,0)
 S FY1=$E($E(YR,1,3)-1,2,3)
"RTN","PRSARC04",42,0)
 S FYLONG=1700+YR
"RTN","PRSARC04",43,0)
 S FY2=$E(YR,2,3)
"RTN","PRSARC04",44,0)
 Q FISCALYR_"^"_"FY"_FYLONG_"^"_"FY"_FY1_"-"_FY2
"RTN","PRSARC04",45,0)
 ;
"RTN","PRSARC04",46,0)
FYDAYS(FSCYR) ; Given a fiscal year get the PAID ETA start and stop
"RTN","PRSARC04",47,0)
 ; dates (i.e. the first day of the first pay period of the fiscal
"RTN","PRSARC04",48,0)
 ; year and the last day of the last pay period in the fiscal year.
"RTN","PRSARC04",49,0)
 ; see GETFSCYR for fiscal year info
"RTN","PRSARC04",50,0)
 ;
"RTN","PRSARC04",51,0)
 Q:($G(FSCYR)'>1992)!($G(FSCYR)>2106) "input date out of range"
"RTN","PRSARC04",52,0)
 ;
"RTN","PRSARC04",53,0)
 N X1,X2,%H,X,D1,PPE,DAY,END,START,ENDPPE,FYENDT,FYSTDT,STRTPPE
"RTN","PRSARC04",54,0)
 ;
"RTN","PRSARC04",55,0)
 ; The start pay period can't contain the date Sept 30.
"RTN","PRSARC04",56,0)
 ;
"RTN","PRSARC04",57,0)
 S START=FSCYR-1701
"RTN","PRSARC04",58,0)
 S D1=START_"0930" D PP^PRSAPPU
"RTN","PRSARC04",59,0)
 S X2=(15-DAY),X1=D1 D C^%DTC S FYSTDT=X
"RTN","PRSARC04",60,0)
 S D1=FYSTDT D PP^PRSAPPU
"RTN","PRSARC04",61,0)
 S STRTPPE=PPE
"RTN","PRSARC04",62,0)
 ;
"RTN","PRSARC04",63,0)
 ; the end pay period must contain sept 30
"RTN","PRSARC04",64,0)
 ;
"RTN","PRSARC04",65,0)
 S END=FSCYR-1700
"RTN","PRSARC04",66,0)
 S D1=END_"0930" D PP^PRSAPPU
"RTN","PRSARC04",67,0)
 S ENDPPE=PPE
"RTN","PRSARC04",68,0)
 S X2=(14-DAY),X1=D1 D C^%DTC S FYENDT=X
"RTN","PRSARC04",69,0)
 ;
"RTN","PRSARC04",70,0)
 Q FYSTDT_"^"_FYENDT_"^"_STRTPPE_"^"_ENDPPE
"RTN","PRSARC04",71,0)
 ;
"RTN","PRSARC04",72,0)
GETPPDY(PRSDT) ; Given FM date--PRSDT--Get pay period + 1st day of that pp
"RTN","PRSARC04",73,0)
 N X1,X2,%H,X,D1,PPE,PPD1
"RTN","PRSARC04",74,0)
 S D1=PRSDT D PP^PRSAPPU
"RTN","PRSARC04",75,0)
 S FFPPE=PPE
"RTN","PRSARC04",76,0)
 S X2=(1-DAY),X1=PRSDT D C^%DTC S PPD1=X
"RTN","PRSARC04",77,0)
 Q PPD1_U_PPE
"RTN","PRSARC04",78,0)
 ;
"RTN","PRSARC04",79,0)
ALLFYAWS() ; Ask user if AWS will cover the entire Fiscal Year
"RTN","PRSARC04",80,0)
 N DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,FY
"RTN","PRSARC04",81,0)
 S DIR(0)="Y"
"RTN","PRSARC04",82,0)
 S DIR("B")="NO"
"RTN","PRSARC04",83,0)
 S DIR("A")="Does the AWS cover the entire fiscal year"
"RTN","PRSARC04",84,0)
 S DIR("?")="Enter Y for Yes or N for No."
"RTN","PRSARC04",85,0)
 S DIR("?",1)="  If the Nurse is starting the fiscal year on the"
"RTN","PRSARC04",86,0)
 S DIR("?",2)="  9 Month AWS then answer YES.  If they are starting"
"RTN","PRSARC04",87,0)
 S DIR("?",3)="  the AWS in a pay period after the 1st pay period"
"RTN","PRSARC04",88,0)
 S DIR("?",4)="  of the fiscal year then answer NO."
"RTN","PRSARC04",89,0)
 D ^DIR
"RTN","PRSARC04",90,0)
 Q:$D(DIRUT) -1
"RTN","PRSARC04",91,0)
 Q Y
"RTN","PRSARC04",92,0)
 ; 
"RTN","PRSARC04",93,0)
 ;
"RTN","PRSARC04",94,0)
 ;
"RTN","PRSARC04",95,0)
FYWEEKS(WKARRAY,FY,SD) ; RETURN ARRAY WITH WEEKS
"RTN","PRSARC04",96,0)
 ; INPUT:
"RTN","PRSARC04",97,0)
 ;   FY - fiscal year in 4 digit format
"RTN","PRSARC04",98,0)
 ;   SD - (optional) set to 1 if you want week numbers in the subscript
"RTN","PRSARC04",99,0)
 ;        otherwise subscript will be fmdates.
"RTN","PRSARC04",100,0)
 ;
"RTN","PRSARC04",101,0)
 N FD,LD,PRSFYRNG
"RTN","PRSARC04",102,0)
 ;
"RTN","PRSARC04",103,0)
 ; get range of dates for FY (PRS
"RTN","PRSARC04",104,0)
 ; cleaned up at exit from LM)
"RTN","PRSARC04",105,0)
 ;
"RTN","PRSARC04",106,0)
 S PRSFYRNG=$$FYDAYS(FY)
"RTN","PRSARC04",107,0)
 ;
"RTN","PRSARC04",108,0)
 S FD=$P(PRSFYRNG,U,1)
"RTN","PRSARC04",109,0)
 S LD=$P(PRSFYRNG,U,2)
"RTN","PRSARC04",110,0)
 ; Build an array with FMdate for first day of each week in the FY
"RTN","PRSARC04",111,0)
 ;
"RTN","PRSARC04",112,0)
 D WKSDAY1(.WKARRAY,FD,LD,$G(SD))
"RTN","PRSARC04",113,0)
 Q
"RTN","PRSARC04",114,0)
 ;
"RTN","PRSARC04",115,0)
GETAVHRS(FMWKS,PRSDT) ; calculate the number of weeks in the AWS fiscal year
"RTN","PRSARC04",116,0)
 ; from the input date and the hours available for recess from that
"RTN","PRSARC04",117,0)
 ; date
"RTN","PRSARC04",118,0)
 ; INPUT: PRSDT-must be a first day of a pay period in the input array
"RTN","PRSARC04",119,0)
 ;        FMWKS-array produced from FYWEEKS call in this routine.
"RTN","PRSARC04",120,0)
 ; OUTPUT: 
"RTN","PRSARC04",121,0)
 ;  # of FY weeks from PRSDT ^ available recess hrs ^ avail recess weeks
"RTN","PRSARC04",122,0)
 ;
"RTN","PRSARC04",123,0)
 N FRSTWK,LASTWK,WKS,HRS,AVWKS
"RTN","PRSARC04",124,0)
 Q:'$D(FMWKS($G(PRSDT))) 0
"RTN","PRSARC04",125,0)
 S FRSTWK=$G(FMWKS(PRSDT))
"RTN","PRSARC04",126,0)
 S LASTWK=$O(FMWKS(9999999),-1),LASTWK=$G(FMWKS(LASTWK))
"RTN","PRSARC04",127,0)
 S WKS=LASTWK-FRSTWK+1
"RTN","PRSARC04",128,0)
 S HRS=WKS*40*.25
"RTN","PRSARC04",129,0)
 S AVWKS=WKS*.25
"RTN","PRSARC04",130,0)
 Q WKS_U_HRS_U_AVWKS
"RTN","PRSARC04",131,0)
 ;
"RTN","PRSARC04",132,0)
 ;
"RTN","PRSARC04",133,0)
WKSDAY1(WKARRAY,FD,LD,SF) ;Build FY week array
"RTN","PRSARC04",134,0)
 ;
"RTN","PRSARC04",135,0)
 ; INPUT FD = fm first day of ETA type fiscal year (i.e. Sunday of pp)
"RTN","PRSARC04",136,0)
 ;       LD = last day ETA fiscal year
"RTN","PRSARC04",137,0)
 ;       SF = optional subscript flag = 1 use week otherwise use FMDAY
"RTN","PRSARC04",138,0)
 ;
"RTN","PRSARC04",139,0)
 ; OUTPUT WKARRAY = ARRAY for weeks in a Fiscal Year with
"RTN","PRSARC04",140,0)
 ;                 (Subscript) = FMdate 
"RTN","PRSARC04",141,0)
 ;                     Value   = FY WEEK of 1st day of week.
"RTN","PRSARC04",142,0)
 ;
"RTN","PRSARC04",143,0)
 N SUBS,WKD1,WEEK,X1,X2,X,VALUE
"RTN","PRSARC04",144,0)
 I $G(SF)=1 S SUBS="WEEK",VALUE="WKD1"
"RTN","PRSARC04",145,0)
 E  S SUBS="WKD1",VALUE="WEEK"
"RTN","PRSARC04",146,0)
 S WKD1=FD,WEEK=1
"RTN","PRSARC04",147,0)
 F  D  Q:WKD1>$G(LD)
"RTN","PRSARC04",148,0)
 .  S WKARRAY(@SUBS)=@VALUE
"RTN","PRSARC04",149,0)
 .  S WEEK=WEEK+1
"RTN","PRSARC04",150,0)
 .  S X2=7,X1=WKD1 D C^%DTC S WKD1=X
"RTN","PRSARC04",151,0)
 Q
"RTN","PRSARC04",152,0)
ALLOKEY(PRSNURSE) ; Allocate security key to the NURSE if they don't hold it
"RTN","PRSARC04",153,0)
 ;
"RTN","PRSARC04",154,0)
 ; determine associated NEW PERSON entry
"RTN","PRSARC04",155,0)
 Q:+$G(PRSNURSE)'>0
"RTN","PRSARC04",156,0)
 Q:'$O(^PRST(458.8,"B",+PRSNURSE,0))
"RTN","PRSARC04",157,0)
 N SSN,IEN200
"RTN","PRSARC04",158,0)
 S SSN=$$GET1^DIQ(450,+PRSNURSE_",",8,"I")
"RTN","PRSARC04",159,0)
 S IEN200=$S(SSN="":"",1:$O(^VA(200,"SSN",SSN,0)))
"RTN","PRSARC04",160,0)
 I 'IEN200 D  Q
"RTN","PRSARC04",161,0)
 . W $C(7),!!,"Can't find this nurse in the NEW PERSON file.  This must"
"RTN","PRSARC04",162,0)
 . W !,"be corrected before they can view their schedule and the"
"RTN","PRSARC04",163,0)
 . W !,"PRSAWS9 security key may need to be allocated to this nurse."
"RTN","PRSARC04",164,0)
 . S SSN=$$ASK^PRSLIB00(1)
"RTN","PRSARC04",165,0)
 ;
"RTN","PRSARC04",166,0)
 I '$D(^XUSEC("PRSAWS9",IEN200)) D
"RTN","PRSARC04",167,0)
 . W !,"... allocating PRSAWS9 security key for this nurse." H 1 W !!
"RTN","PRSARC04",168,0)
 . N KEYIEN,PRSFDA,PRSIENS
"RTN","PRSARC04",169,0)
 . S KEYIEN=$$FIND1^DIC(19.1,,"X","PRSAWS9")
"RTN","PRSARC04",170,0)
 . I 'KEYIEN D  Q
"RTN","PRSARC04",171,0)
 . . W !!,"The PRSAWS9 key is missing from file 19.1."
"RTN","PRSARC04",172,0)
 . S PRSFDA(200.051,"?+1,"_IEN200_",",.01)=KEYIEN
"RTN","PRSARC04",173,0)
 . S PRSIENS(1)=KEYIEN
"RTN","PRSARC04",174,0)
 . D UPDATE^DIE("","PRSFDA","PRSIENS"),MSG^DIALOG()
"RTN","PRSARC04",175,0)
 ;
"RTN","PRSARC04",176,0)
 Q
"RTN","PRSARC05")
0^39^B2069515^n/a
"RTN","PRSARC05",1,0)
PRSARC05 ;DWS/ALB-RECESS UTILITY ;DEC 05, 2006  09:58
"RTN","PRSARC05",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC05",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC05",4,0)
 Q
"RTN","PRSARC05",5,0)
RSPP(WK,IEN,PP) ;SAME RESULTS AS RES USING DIFFERENT PARAMETERS
"RTN","PRSARC05",6,0)
 ;IEN  THE EMPLOYEE IEN FROM FILE 450
"RTN","PRSARC05",7,0)
 ;PP   Pay period to return results for in YYYY-NN format i.e. 2006-01 for example
"RTN","PRSARC05",8,0)
 ;WK   Set to -1 if pay period is not found.  Otherwise results for RES are passed through.
"RTN","PRSARC05",9,0)
 N I,SFY,EFY,SDT,EDT S I=$O(^PRST(458,"AB",PP,0)) I 'I S WK=-1 Q 
"RTN","PRSARC05",10,0)
 S I=^PRST(458,I,1),SDT=$P(I,U),EDT=$P(I,U,14)
"RTN","PRSARC05",11,0)
 S (SFY,EFY)=$S($E(SDT,4,7)>930:PP+1,1:+PP)
"RTN","PRSARC05",12,0)
 D RES(.WK,IEN,SFY,EFY,SDT,EDT) Q
"RTN","PRSARC05",13,0)
RES(WK,IEN,SFY,EFY,SDT,EDT) ;RETURN NUMBER OF HOURS OF RECESS IN WK ARRAY
"RTN","PRSARC05",14,0)
 ;IEN  THE EMPLOYEE IEN FROM FILE 450
"RTN","PRSARC05",15,0)
 ;SFY  THE FISCAL YEAR OF THE START OF THE TIME PERIOD
"RTN","PRSARC05",16,0)
 ;EFY  THE FISCAL YEAR OF THE END OF THE TIME PERIOD
"RTN","PRSARC05",17,0)
 ;SDT  THE DATE OF THE START OF THE TIME PERIOD
"RTN","PRSARC05",18,0)
 ;EDT  THE DATE OF THE END OF THE TIME PERIOD
"RTN","PRSARC05",19,0)
 ;WK(X)   THE NUMBER OF HOURS OF RECESS SCHEDULED IN THE WEEK BEGANNING
"RTN","PRSARC05",20,0)
 ;        ON DAY X.  X IS A FILEMAN DATE FOR THE FIRST DAY OF THE WEEK.
"RTN","PRSARC05",21,0)
 N DA,FY,H,HRS,I,J,K,L,PPI S PPI=$P($G(^PRST(458,"AD",SDT)),U) S:'PPI PPI=$P(^PRST(458,0),U,3)
"RTN","PRSARC05",22,0)
 D TOURHRS^PRSARC07(.HRS,PPI,IEN)
"RTN","PRSARC05",23,0)
 S DA=$O(^PRST(458.8,"AC",IEN,SFY,0)),I=SDT-7,K=1,FY=SFY Q:'DA
"RTN","PRSARC05",24,0)
 D  I SFY'=EFY S DA=$O(^PRST(458.8,"AC",IEN,EFY,0)) D:DA
"RTN","PRSARC05",25,0)
 .F  S I=$O(^PRST(458.8,DA,1,"AC",I)) Q:I=""!(I>EDT)  D
"RTN","PRSARC05",26,0)
 ..S J=$O(^(I,0)),L=^PRST(458.8,DA,1,J,0),H=$P(L,U,2)
"RTN","PRSARC05",27,0)
 ..I H="" S H=HRS("W"_$$WK($P(L,U,3)))
"RTN","PRSARC05",28,0)
 ..S WK($P(L,U,3))=H
"RTN","PRSARC05",29,0)
 Q
"RTN","PRSARC05",30,0)
WK(X) ;RETURN 1 FOR THE FIRST WEEK OF THE PAY PERIOD AND 2 FOR THE SECOND
"RTN","PRSARC05",31,0)
 ;WEEK
"RTN","PRSARC05",32,0)
 N %H D H^%DTC Q %H\7#2+1
"RTN","PRSARC06")
0^40^B25613765^n/a
"RTN","PRSARC06",1,0)
PRSARC06 ;WOIFO/JAH - Recess Tracking ListManger Inteface ;10/16/06
"RTN","PRSARC06",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC06",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC06",4,0)
 Q
"RTN","PRSARC06",5,0)
MAIN(LSTART,LISTI,LINE,PRSDT,PRSFYRNG) ; BUILD LIST OF CALENDER FROM PP WITH PRSDT
"RTN","PRSARC06",6,0)
 ; THROUGH PP CONTAINING SEPTEMBER 30
"RTN","PRSARC06",7,0)
 ;
"RTN","PRSARC06",8,0)
 ; PRSNMDT - date for new month
"RTN","PRSARC06",9,0)
 ;
"RTN","PRSARC06",10,0)
 ; Q:$G(PRSOUT)=1
"RTN","PRSARC06",11,0)
 N FIRSTPP,PRSNMDT,FFPPE,LFPPE,EOFYDT,OUT,PRSDY,PRSMO,PRSNXTMO,PRSYR
"RTN","PRSARC06",12,0)
 ;
"RTN","PRSARC06",13,0)
 ; Get PP with PRSDT and convert PRSDT to the 1st day of that pp
"RTN","PRSARC06",14,0)
 ;
"RTN","PRSARC06",15,0)
 S FIRSTPP=$$GETPPDY^PRSARC04(PRSDT)
"RTN","PRSARC06",16,0)
 S FFPPE=$P(FIRSTPP,U,2)
"RTN","PRSARC06",17,0)
 S (PRSDT,PRSNMDT)=$P(FIRSTPP,U,1)
"RTN","PRSARC06",18,0)
 ;
"RTN","PRSARC06",19,0)
 ; lookup which week of the fiscal year the schedule begins
"RTN","PRSARC06",20,0)
 ; this week # will be the first selectable item in the list
"RTN","PRSARC06",21,0)
 ;
"RTN","PRSARC06",22,0)
 S (LSTART,LISTI)=$G(FMWKS(PRSDT))
"RTN","PRSARC06",23,0)
 ;
"RTN","PRSARC06",24,0)
 ; Get the last PP of the fiscal year and it's last day.
"RTN","PRSARC06",25,0)
 S LFPPE=$P(PRSFYRNG,U,4)
"RTN","PRSARC06",26,0)
 S EOFYDT=$P(PRSFYRNG,U,2)
"RTN","PRSARC06",27,0)
 ;
"RTN","PRSARC06",28,0)
 ; if the first week in the AWS schedule is not both the 1st day
"RTN","PRSARC06",29,0)
 ; of a PP and the first day of the month, then we need
"RTN","PRSARC06",30,0)
 ; special code for that month, so that a partial month is used
"RTN","PRSARC06",31,0)
 ; including only the pps that are part of the schedule.
"RTN","PRSARC06",32,0)
 ;
"RTN","PRSARC06",33,0)
 S (OUT,LINE,MONTHCNT)=0
"RTN","PRSARC06",34,0)
 I $E(PRSDT,6,7)'="01" D
"RTN","PRSARC06",35,0)
 .  S STARTDAY=$E(PRSDT,6,7)
"RTN","PRSARC06",36,0)
 .  D ARAYMO(.LISTI,.LINE,PRSDT,MONTHCNT,STARTDAY,0)
"RTN","PRSARC06",37,0)
 .  S PRSMO=$E(PRSDT,4,5),PRSYR=$E(PRSDT,1,3),PRSDY=$E(PRSDT,6,7)
"RTN","PRSARC06",38,0)
 .  S PRSNXTMO=PRSMO+1 I $L(PRSNXTMO)=1 S PRSNXTMO="0"_PRSNXTMO
"RTN","PRSARC06",39,0)
 .  S PRSNMDT=$S(PRSMO=12:PRSYR+1_"01"_PRSDY,1:PRSYR_PRSNXTMO_"01")
"RTN","PRSARC06",40,0)
 ;
"RTN","PRSARC06",41,0)
 ; loop through the calendar building list items for every week in 
"RTN","PRSARC06",42,0)
 ; the year until we reach october.  All agreements are through
"RTN","PRSARC06",43,0)
 ; the end of the fiscal year.
"RTN","PRSARC06",44,0)
 ;
"RTN","PRSARC06",45,0)
 S OUT=0
"RTN","PRSARC06",46,0)
 F  D  Q:OUT
"RTN","PRSARC06",47,0)
 .  S MONTHCNT=MONTHCNT+1
"RTN","PRSARC06",48,0)
 .  D ARAYMO(.LISTI,.LINE,PRSNMDT,MONTHCNT,1,0)
"RTN","PRSARC06",49,0)
 .  S PRSMO=$E(PRSNMDT,4,5),PRSYR=$E(PRSNMDT,1,3),PRSDY=$E(PRSNMDT,6,7)
"RTN","PRSARC06",50,0)
 .  S PRSNXTMO=PRSMO+1 I $L(PRSNXTMO)=1 S PRSNXTMO="0"_PRSNXTMO
"RTN","PRSARC06",51,0)
 .  S PRSNMDT=$S(PRSMO=12:PRSYR+1_"01"_PRSDY,1:PRSYR_PRSNXTMO_"01")
"RTN","PRSARC06",52,0)
 .  ;if we hit september 30 or october quit
"RTN","PRSARC06",53,0)
 .  I PRSNXTMO=10!(PRSNMDT>EOFYDT) S OUT=1
"RTN","PRSARC06",54,0)
 ;
"RTN","PRSARC06",55,0)
 ; Include any weeks in October that are part of the PP
"RTN","PRSARC06",56,0)
 ; with September 30, thus the fiscal year spills into october by
"RTN","PRSARC06",57,0)
 ; no more than 13 days 
"RTN","PRSARC06",58,0)
 ;
"RTN","PRSARC06",59,0)
 I PRSNXTMO=10&(PRSNMDT'>EOFYDT) D
"RTN","PRSARC06",60,0)
 .  S MONTHCNT=MONTHCNT+1
"RTN","PRSARC06",61,0)
 .  D ARAYMO(.LISTI,.LINE,PRSNMDT,MONTHCNT,1,+$E(EOFYDT,6,7))
"RTN","PRSARC06",62,0)
 Q
"RTN","PRSARC06",63,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSARC06",64,0)
 ;
"RTN","PRSARC06",65,0)
ARAYMO(LISTI,LINE,PRSDT,MONTHCNT,STARTDAY,SHORT) ;SILENT CALL TO PLACE MONTH IN ARRAY
"RTN","PRSARC06",66,0)
 ;  INPUT: PRSDT - must be fileman date
"RTN","PRSARC06",67,0)
 ;         SHORT - set to # of days to show if a short month
"RTN","PRSARC06",68,0)
 ;                 is desired.  i.e. to stop listing after the 
"RTN","PRSARC06",69,0)
 ;                  first PP then specify the # of
"RTN","PRSARC06",70,0)
 ;                 days to that date from the 1st of the month
"RTN","PRSARC06",71,0)
 ;
"RTN","PRSARC06",72,0)
 N X,Y,%DT,DAY1,Y,MONTH,DAYS,YEAR,FIRSTDAY,LASTDAY,COUNT,HDR
"RTN","PRSARC06",73,0)
 S X=PRSDT D ^%DT Q:Y<0
"RTN","PRSARC06",74,0)
 S MONTH=$E(PRSDT,4,5),YEAR=$E(PRSDT,1,3)+1700
"RTN","PRSARC06",75,0)
 I SHORT D
"RTN","PRSARC06",76,0)
 .   S DAYS=SHORT
"RTN","PRSARC06",77,0)
 E  D
"RTN","PRSARC06",78,0)
 .   S DAYS=$$DAYSINMO(YEAR,MONTH)
"RTN","PRSARC06",79,0)
 S FIRSTDAY=$E(PRSDT,1,5)_"01",LASTDAY=$E(PRSDT,1,5)_DAYS
"RTN","PRSARC06",80,0)
 ;
"RTN","PRSARC06",81,0)
 ;Get day #s of pps in month
"RTN","PRSARC06",82,0)
 N PPS
"RTN","PRSARC06",83,0)
 I FIRSTDAY<3130000 D GETPPS(FIRSTDAY,LASTDAY)
"RTN","PRSARC06",84,0)
 S DAY1=$$WEEKDAY1(PRSDT)
"RTN","PRSARC06",85,0)
 S HDR=$$GETHEAD(Y)
"RTN","PRSARC06",86,0)
 S LINE=LINE+1
"RTN","PRSARC06",87,0)
 S ^TMP("PRSARC",$J,LINE,0)="        ============="_HDR_"============"
"RTN","PRSARC06",88,0)
 ;
"RTN","PRSARC06",89,0)
 D DISPMO(.LISTI,.LINE,DAY1,DAYS,1,STARTDAY)
"RTN","PRSARC06",90,0)
 ;S LINE=LINE+1
"RTN","PRSARC06",91,0)
 ;D HOLIDAY
"RTN","PRSARC06",92,0)
 Q
"RTN","PRSARC06",93,0)
 ;
"RTN","PRSARC06",94,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSARC06",95,0)
DISPMO(LISTI,LINE,DAYNO,NODAYS,SKPW1,STRTDY) ;store a month into an array
"RTN","PRSARC06",96,0)
 ;SAMPLE CALL:  D DISPMO(4,30,.L,0) Produces a 30 day month with day 1
"RTN","PRSARC06",97,0)
 ;                                 beginning on Wednesday.
"RTN","PRSARC06",98,0)
 ;SAMPLE CALL:  D DISPMO(4,30,.L,1) Produces a 30 day month starting
"RTN","PRSARC06",99,0)
 ;                                  in week 2 Sunday--day 5
"RTN","PRSARC06",100,0)
 ;
"RTN","PRSARC06",101,0)
 ;INPUT:
"RTN","PRSARC06",102,0)
 ;  DAYNO : integer value of weekday (0=sun,1=mon,2=tues,...,6=sat)
"RTN","PRSARC06",103,0)
 ;  NODAYS: integer value of days in month, i.e. 30 days has sept...
"RTN","PRSARC06",104,0)
 ;  SKIPW1: set to true if you want to skip partial 1st week
"RTN","PRSARC06",105,0)
 ;  STRTDY: set to day of month to start calendar.
"RTN","PRSARC06",106,0)
 ;
"RTN","PRSARC06",107,0)
 N DAYS,DAYPOS,I,PPOFFSET,CNTDWN,BLNKS,LEADBLNK,WRTAB
"RTN","PRSARC06",108,0)
 S PPOFFSET="     ",CNTDWN=NODAYS
"RTN","PRSARC06",109,0)
 ;
"RTN","PRSARC06",110,0)
 ; keep track of selectable items in the list (LISTI) and 
"RTN","PRSARC06",111,0)
 ; lines in the list
"RTN","PRSARC06",112,0)
 ;
"RTN","PRSARC06",113,0)
 ; start with second week when SKPW1 is true and the first week
"RTN","PRSARC06",114,0)
 ; of the month isn't a full week.
"RTN","PRSARC06",115,0)
 ;   also I STARTDAY is > 1 then use it (we only want a partial month)
"RTN","PRSARC06",116,0)
 I (STRTDY=1)&SKPW1&(DAYNO'=0) S STRTDY=8-DAYNO
"RTN","PRSARC06",117,0)
 F I=STRTDY:1:NODAYS D
"RTN","PRSARC06",118,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSARC06",119,0)
 . I DAYPOS=0 D
"RTN","PRSARC06",120,0)
 ..  S LINE=LINE+1
"RTN","PRSARC06",121,0)
 ..  S LEADBLNK=$E("   ",1,(3-$L(LISTI)))
"RTN","PRSARC06",122,0)
 ..  S BLNKS="     "
"RTN","PRSARC06",123,0)
 ..  I $G(PPS(I))'="" D
"RTN","PRSARC06",124,0)
 ...   ; index of items that are selectable (weeks only, no month heads)
"RTN","PRSARC06",125,0)
 ...   S ^TMP("PRSLI",$J,LISTI)=LINE
"RTN","PRSARC06",126,0)
 ...   ; ListManager's items
"RTN","PRSARC06",127,0)
 ...   S ^TMP("PRSARC",$J,LINE,0)=LEADBLNK_LISTI_BLNKS_PPS(I)
"RTN","PRSARC06",128,0)
 ..  E  D
"RTN","PRSARC06",129,0)
 ...   S ^TMP("PRSLI",$J,LISTI)=LINE
"RTN","PRSARC06",130,0)
 ...   S ^TMP("PRSARC",$J,LINE,0)=LEADBLNK_LISTI_BLNKS_PPOFFSET
"RTN","PRSARC06",131,0)
 ..  S LISTI=LISTI+1
"RTN","PRSARC06",132,0)
 . I ($G(CNTDWN)>0) D
"RTN","PRSARC06",133,0)
 ..   S WRTAB=$S($L(I)=2:"  ",1:"   ")
"RTN","PRSARC06",134,0)
 ..   S ^TMP("PRSARC",$J,LINE,0)=$G(^TMP("PRSARC",$J,LINE,0))_WRTAB_I
"RTN","PRSARC06",135,0)
 ..   S CNTDWN=CNTDWN-1
"RTN","PRSARC06",136,0)
 ;
"RTN","PRSARC06",137,0)
 ; add first days of next month to the last week
"RTN","PRSARC06",138,0)
 ;
"RTN","PRSARC06",139,0)
 I DAYPOS'=6 D
"RTN","PRSARC06",140,0)
 .  F I=1:1:7-(DAYPOS+1) S ^TMP("PRSARC",$J,LINE,0)=$G(^TMP("PRSARC",$J,LINE,0))_"   "_I
"RTN","PRSARC06",141,0)
 Q
"RTN","PRSARC06",142,0)
 ;
"RTN","PRSARC06",143,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSARC06",144,0)
 ;
"RTN","PRSARC06",145,0)
GETPPS(FIRSTDAY,LASTDAY) ;
"RTN","PRSARC06",146,0)
 N D1,PPE,PPDAY,PPI,PP4Y
"RTN","PRSARC06",147,0)
 S D1=FIRSTDAY D PP^PRSAPPU
"RTN","PRSARC06",148,0)
 D NX^PRSAPPU
"RTN","PRSARC06",149,0)
 I D1<FIRSTDAY S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSARC06",150,0)
 S PPDAY=+$E(D1,6,7)
"RTN","PRSARC06",151,0)
 S PPS(PPDAY)=PPE
"RTN","PRSARC06",152,0)
 F  D  Q:D1>LASTDAY
"RTN","PRSARC06",153,0)
 .  S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSARC06",154,0)
 .  Q:D1>LASTDAY
"RTN","PRSARC06",155,0)
 .  S PPDAY=+$E(D1,6,7)
"RTN","PRSARC06",156,0)
 .  S PPS(PPDAY)=PPE
"RTN","PRSARC06",157,0)
 Q
"RTN","PRSARC06",158,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSARC06",159,0)
 ;
"RTN","PRSARC06",160,0)
GETHEAD(Y) ;
"RTN","PRSARC06",161,0)
 N YEAR,MONTH,HDR,LENOFDT
"RTN","PRSARC06",162,0)
 S HDR=$$FMTE^XLFDT(Y,"1D")
"RTN","PRSARC06",163,0)
 S MONTH=$P(HDR," ")
"RTN","PRSARC06",164,0)
 S LENOFDT=$L(HDR," ")
"RTN","PRSARC06",165,0)
 S YEAR=$P(HDR," ",LENOFDT)
"RTN","PRSARC06",166,0)
 Q MONTH_" "_YEAR
"RTN","PRSARC06",167,0)
 ;
"RTN","PRSARC06",168,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSARC06",169,0)
 ;
"RTN","PRSARC06",170,0)
WEEKDAY1(ZDATE) ;get the weekday of the 1st day of the month
"RTN","PRSARC06",171,0)
 ; INPUT:   ZDATE   - FileMan date, used as the month to display
"RTN","PRSARC06",172,0)
 ; OUTPUT:  return - Integer corresponding to day of week 
"RTN","PRSARC06",173,0)
 ;                   (i.e. Sunday[1], Monday[2]) for the 1st day of
"RTN","PRSARC06",174,0)
 ;                   the month
"RTN","PRSARC06",175,0)
 S ZDATE=$E(ZDATE,1,5)_"01"
"RTN","PRSARC06",176,0)
 Q $$DOW^XLFDT(ZDATE,1)
"RTN","PRSARC06",177,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSARC06",178,0)
 ;
"RTN","PRSARC06",179,0)
DAYSINMO(Y,M) ; Return # of days in month based on year and month
"RTN","PRSARC06",180,0)
 ;  Input:  Y = year in 4 digit format between 1700 and 3000
"RTN","PRSARC06",181,0)
 ;          M = month expressed as an integer from 1 to 12 (Jan - Dec)
"RTN","PRSARC06",182,0)
 ;
"RTN","PRSARC06",183,0)
 N GOODY,GOODM S (GOODY,GOODM)=0
"RTN","PRSARC06",184,0)
 I Y<2700,Y>1700 S GOODY=1
"RTN","PRSARC06",185,0)
 I M>0,M<13 S GOODM=1
"RTN","PRSARC06",186,0)
 Q:'(GOODM&GOODY) 0
"RTN","PRSARC06",187,0)
 Q $P("31^"_(28+$$LEAPYR^PRSLIB00(YEAR))_"^31^30^31^30^31^31^30^31^30^31",U,MONTH)
"RTN","PRSARC07")
0^41^B43840543^n/a
"RTN","PRSARC07",1,0)
PRSARC07 ;WOIFO/JAH - Tour Hours Procedure ;12/19/06
"RTN","PRSARC07",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC07",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC07",4,0)
 Q
"RTN","PRSARC07",5,0)
 ;
"RTN","PRSARC07",6,0)
TOURHRS(THRARY,PPI,PRSIEN,TOURSTR) ; Return data for TOUR OF DUTY
"RTN","PRSARC07",7,0)
 ;Input:
"RTN","PRSARC07",8,0)
 ;  PPI (optional) IEN of #458 otherwise curr PPI assumed.
"RTN","PRSARC07",9,0)
 ;    *If PPI and TOURSTR (or only PPI) defined then last pay period
"RTN","PRSARC07",10,0)
 ;     spill over from 2nd sat. is added to day 1.
"RTN","PRSARC07",11,0)
 ;    *If TOURSTR is defined but not PPI then tour hours
"RTN","PRSARC07",12,0)
 ;     from 2nd saturday of tour in TOURSTR are placed on 1st Sunday.
"RTN","PRSARC07",13,0)
 ;
"RTN","PRSARC07",14,0)
 ;  PRSIEN (required) IEN-File (#450). 
"RTN","PRSARC07",15,0)
 ;  TOURSTR (optional) if defined should contain 14 piece string
"RTN","PRSARC07",16,0)
 ;          delimited by "^" pieces 1-14 contain pointers
"RTN","PRSARC07",17,0)
 ;          to ToD file. Will be used instead of pp to determine
"RTN","PRSARC07",18,0)
 ;          tour hrs.
"RTN","PRSARC07",19,0)
 ; Output
"RTN","PRSARC07",20,0)
 ;  THRARY (TOUR HRS ARRAY)-2 piece array subsc by day #.
"RTN","PRSARC07",21,0)
 ;     W1 & W2 node w/ wkly tour hrs.
"RTN","PRSARC07",22,0)
 ;    Piece one = Shift code:
"RTN","PRSARC07",23,0)
 ;      -Null when no tour hrs fall on that day.
"RTN","PRSARC07",24,0)
 ;      -Always 0 for Wage Grades
"RTN","PRSARC07",25,0)
 ;      -1, 2, or 3 corresponds to earliest shift on day being reported.
"RTN","PRSARC07",26,0)
 ;    Piece two = total hrs for tours that fall on each day.
"RTN","PRSARC07",27,0)
 ;       Tours crossing midnight--hrs placed in node on day the occur
"RTN","PRSARC07",28,0)
 ;    SPECIAL CASE: COMPRESSED TOURS: "CT" node is defined
"RTN","PRSARC07",29,0)
 ;      Piece one set to shift (earliest for pp or 0 for wage)
"RTN","PRSARC07",30,0)
 ;      Piece 2 = total pp hrs 
"RTN","PRSARC07",31,0)
 ;
"RTN","PRSARC07",32,0)
 ;    Error Codes = ARRAY VARIABLE contains a 1 for success or 0 for
"RTN","PRSARC07",33,0)
 ;       failure.  If failed then error codes returned in Array 0 node
"RTN","PRSARC07",34,0)
 ;         1 = pp undef
"RTN","PRSARC07",35,0)
 ;         2 = emp undef
"RTN","PRSARC07",36,0)
 ;         3 = no timecard for emp in pp
"RTN","PRSARC07",37,0)
 ; Example
"RTN","PRSARC07",38,0)
 ; >D TOURHRS^PRSARC04(.THRS,257,12711)
"RTN","PRSARC07",39,0)
 ; >ZW THRS
"RTN","PRSARC07",40,0)
 ; THRS=1
"RTN","PRSARC07",41,0)
 ; THRS(1)=^0
"RTN","PRSARC07",42,0)
 ; THRS(2)=1^3
"RTN","PRSARC07",43,0)
 ; THRS(3)=1^6
"RTN","PRSARC07",44,0)
 ; ...
"RTN","PRSARC07",45,0)
 ; THRS(14)=^0
"RTN","PRSARC07",46,0)
 N SHIFTCD,ISWAGE,ZNODE,PRSD,SAT
"RTN","PRSARC07",47,0)
 K THRARY
"RTN","PRSARC07",48,0)
 I '$D(^PRSPC(+$G(PRSIEN),0)) S THRARY=0,THRARY(0)="2^undefined employee"
"RTN","PRSARC07",49,0)
 I $G(TOURSTR)="" D
"RTN","PRSARC07",50,0)
 .  I $G(PPI)'>0 S PPI=$P(^PRST(458,0),"^",3)
"RTN","PRSARC07",51,0)
 .  I '$D(^PRST(458,+$G(PPI),0)) S THRARY=0,THRARY(0)="1^undefined pay period"
"RTN","PRSARC07",52,0)
 .  S ISWAGE=$$ISWAGE^PRSARC08(PRSIEN)
"RTN","PRSARC07",53,0)
 . ;
"RTN","PRSARC07",54,0)
 . ; Get ToD and Second ToD from last saturday of 
"RTN","PRSARC07",55,0)
 . ; prior PP to check for spill over hrs onto day 1 of this PP.
"RTN","PRSARC07",56,0)
 . S SAT=$G(^PRST(458,PPI-1,"E",PRSIEN,"D",14,0))
"RTN","PRSARC07",57,0)
 . S PRSD=0,T1=$P(SAT,U,2),T2=$P(SAT,U,13)
"RTN","PRSARC07",58,0)
 . D PLACEHRS(.THRARY,PRSD,T1,T2)
"RTN","PRSARC07",59,0)
 . F PRSD=1:1:14 D
"RTN","PRSARC07",60,0)
 ..   S ZNODE=$G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0))
"RTN","PRSARC07",61,0)
 ..   S T1=$P(ZNODE,U,2),T2=$P(ZNODE,U,13)
"RTN","PRSARC07",62,0)
 ..   D PLACEHRS(.THRARY,PRSD,T1,T2)
"RTN","PRSARC07",63,0)
 ..   D PLACESHF(.THRARY,PRSD,T1,T2,ISWAGE)
"RTN","PRSARC07",64,0)
 .;
"RTN","PRSARC07",65,0)
 .; add compressed tour node if necessary
"RTN","PRSARC07",66,0)
 .I $$ISCMPTR^PRSARC08(PPI,PRSIEN) S THRARY("CT")=$$EARLYSH^PRSARC08(.THRARY,ISWAGE)_"^"_$$TOTAL^PRSARC08(.THRARY)
"RTN","PRSARC07",67,0)
 E  D
"RTN","PRSARC07",68,0)
 .; use tourstring for tours
"RTN","PRSARC07",69,0)
 .; add prior tour spillover from 2nd Sat to first Sun
"RTN","PRSARC07",70,0)
 . I $G(PPI)>0 D
"RTN","PRSARC07",71,0)
 ..   S SAT=$G(^PRST(458,PPI-1,"E",PRSIEN,"D",14,0))
"RTN","PRSARC07",72,0)
 ..   S PRSD=0,T1=$P(SAT,U,2),T2=$P(SAT,U,13)
"RTN","PRSARC07",73,0)
 ..   D PLACEHRS(.THRARY,PRSD,T1,T2)
"RTN","PRSARC07",74,0)
 . F PRSD=1:1:14 D
"RTN","PRSARC07",75,0)
 ..   S T1=$P(TOURSTR,U,PRSD),T2=""
"RTN","PRSARC07",76,0)
 ..   D PLACEHRS(.THRARY,PRSD,T1,T2)
"RTN","PRSARC07",77,0)
 . ; wrap second saturday to first sunday (IF PPI NOT PASSED)
"RTN","PRSARC07",78,0)
 . I $G(PPI)="" S $P(THRARY(1),U,2)=$P(THRARY(1),U,2)+$P($G(THRARY(15)),U,2)
"RTN","PRSARC07",79,0)
 ; Prior Sat THRARY(0) only needed temp to get any part of a two day 
"RTN","PRSARC07",80,0)
 ; tour that spilled onto THRARY(1)-1st Sun. Next Sun THRARY(15) is 
"RTN","PRSARC07",81,0)
 ; only an artifact.
"RTN","PRSARC07",82,0)
 S THRARY("W1")=$$TOTAL^PRSARC08(.THRARY,1)
"RTN","PRSARC07",83,0)
 S THRARY("W2")=$$TOTAL^PRSARC08(.THRARY,2)
"RTN","PRSARC07",84,0)
 K THRARY(0),THRARY(15)
"RTN","PRSARC07",85,0)
 Q
"RTN","PRSARC07",86,0)
 ;
"RTN","PRSARC07",87,0)
PLACEHRS(PRSTH,PRSD,T1,T2) ; procedure puts hrs from tours on current day and 
"RTN","PRSARC07",88,0)
 ; next.  called once for each day so a call for curr day may have hrs
"RTN","PRSARC07",89,0)
 ; from prior two day tour
"RTN","PRSARC07",90,0)
 ;
"RTN","PRSARC07",91,0)
 N CURHRS,CURSHFT,TODAYND,TOMORND,TODHRS,TOMHRS,TOURHRS
"RTN","PRSARC07",92,0)
 S TODAYND=$G(PRSTH(PRSD))
"RTN","PRSARC07",93,0)
 S TOMORND=$G(PRSTH(PRSD+1))
"RTN","PRSARC07",94,0)
 S TODHRS=$P(TODAYND,U,2)
"RTN","PRSARC07",95,0)
 S TOMHRS=$P(TOMORND,U,2)
"RTN","PRSARC07",96,0)
 ;
"RTN","PRSARC07",97,0)
 ; get tour 1 hrs-add to today, tomorrow
"RTN","PRSARC07",98,0)
 I T1>0 D
"RTN","PRSARC07",99,0)
 .  S TOURHRS=$$TRHRS(T1)
"RTN","PRSARC07",100,0)
 .  S TODHRS=TODHRS+$P(TOURHRS,U)
"RTN","PRSARC07",101,0)
 .  S TOMHRS=TOMHRS+$P(TOURHRS,U,2)
"RTN","PRSARC07",102,0)
 ;
"RTN","PRSARC07",103,0)
 ; get tour 2 hrs-add to today, tomorrow
"RTN","PRSARC07",104,0)
 I T2>0 D
"RTN","PRSARC07",105,0)
 .  S TOURHRS=$$TRHRS(T2)
"RTN","PRSARC07",106,0)
 .  S TODHRS=TODHRS+$P(TOURHRS,U)
"RTN","PRSARC07",107,0)
 .  S TOMHRS=TODHRS+$P(TOURHRS,U,2)
"RTN","PRSARC07",108,0)
 ;
"RTN","PRSARC07",109,0)
 ; add tour hrs to array
"RTN","PRSARC07",110,0)
 S $P(PRSTH(PRSD),U,2)=TODHRS
"RTN","PRSARC07",111,0)
 ;
"RTN","PRSARC07",112,0)
 ; add hrs to day node of array 
"RTN","PRSARC07",113,0)
 ;   (2 day tour hrs past midnight on last Sat. go in node 15)
"RTN","PRSARC07",114,0)
 ;
"RTN","PRSARC07",115,0)
 S $P(PRSTH(PRSD+1),U,2)=TOMHRS
"RTN","PRSARC07",116,0)
 Q
"RTN","PRSARC07",117,0)
TRHRS(TOURIEN) ; return string w/ todays hrs p1 ^ tomorrows hrs p2
"RTN","PRSARC07",118,0)
 ;
"RTN","PRSARC07",119,0)
 N TODHR,TOMHR,TOUR,TSEGS,TWODAYTR,REGHRS,DONE,CROSS,BEG,END,MEALTIME
"RTN","PRSARC07",120,0)
 N BEG24,END24,SEGTIME,SEGTOD,SEGTOM,I,SPECIND
"RTN","PRSARC07",121,0)
 ;
"RTN","PRSARC07",122,0)
 S TODHR=0,TOMHR=0
"RTN","PRSARC07",123,0)
 I $G(TOURIEN)'>0 Q TODHR_"^"_TOMHR
"RTN","PRSARC07",124,0)
 S TOUR=$G(^PRST(457.1,TOURIEN,0))
"RTN","PRSARC07",125,0)
 S TSEGS=$G(^PRST(457.1,TOURIEN,1))
"RTN","PRSARC07",126,0)
 S TWODAYTR=$P(TOUR,U,5)="Y"
"RTN","PRSARC07",127,0)
 S MEALTIME=$P(TOUR,U,3)
"RTN","PRSARC07",128,0)
 S REGHRS=$P(TOUR,U,6)
"RTN","PRSARC07",129,0)
 I TWODAYTR D
"RTN","PRSARC07",130,0)
 .  S (DONE,CROSS)=0
"RTN","PRSARC07",131,0)
 .  F I=1:3:19 D  Q:DONE
"RTN","PRSARC07",132,0)
 ..    S BEG=$P(TSEGS,U,I)
"RTN","PRSARC07",133,0)
 ..    I BEG="" S DONE=1 Q
"RTN","PRSARC07",134,0)
 ..    S END=$P(TSEGS,U,I+1)
"RTN","PRSARC07",135,0)
 ..    S SPECIND=$P(TSEGS,U,I+2)
"RTN","PRSARC07",136,0)
 ..;   only count regular hours
"RTN","PRSARC07",137,0)
 ..    I SPECIND,"RG"'[$P($G(^PRST(457.2,+SPECIND,0)),"^",2) Q
"RTN","PRSARC07",138,0)
 ..;  convert beg & end to 24 hr to check if one < other (Xes midnight)
"RTN","PRSARC07",139,0)
 ..;  also crossed midnight if not first seg starts at midnight.
"RTN","PRSARC07",140,0)
 ..;  CROSS is true so remaining segments recorded to tomorrow.
"RTN","PRSARC07",141,0)
 ..    S BEG24=$$TWENTY4^PRSPESR2(BEG)
"RTN","PRSARC07",142,0)
 ..    S END24=$$TWENTY4^PRSPESR2(END)
"RTN","PRSARC07",143,0)
 ..    I 'CROSS&(((BEG24'<END24)&(BEG24'=2400))!((I>1)&(BEG24=2400))) D
"RTN","PRSARC07",144,0)
 ...     S CROSS=1
"RTN","PRSARC07",145,0)
 ...     S SEGTOD=$S(BEG24=2400:0,1:$$AMT^PRSPSAPU(BEG,"MID",0))
"RTN","PRSARC07",146,0)
 ...     S SEGTOM=$$AMT^PRSPSAPU("MID",END,0)
"RTN","PRSARC07",147,0)
 ...     S TODHR=TODHR+SEGTOD
"RTN","PRSARC07",148,0)
 ...     S TOMHR=TOMHR+SEGTOM
"RTN","PRSARC07",149,0)
 ..    E  D
"RTN","PRSARC07",150,0)
 ...     S SEGTIME=$$AMT^PRSPSAPU(BEG,END,0)
"RTN","PRSARC07",151,0)
 ...     I CROSS D
"RTN","PRSARC07",152,0)
 ....      S TOMHR=TOMHR+SEGTIME
"RTN","PRSARC07",153,0)
 ...     E  D
"RTN","PRSARC07",154,0)
 ....      S TODHR=TODHR+SEGTIME
"RTN","PRSARC07",155,0)
 . ;Pull meal off hrs for today, tomorrow or both.
"RTN","PRSARC07",156,0)
 . N HOURS S HOURS=$$PLACEML^PRSARC08(TODHR,TOMHR,MEALTIME)
"RTN","PRSARC07",157,0)
 . S TODHR=$P(HOURS,U)
"RTN","PRSARC07",158,0)
 . S TOMHR=$P(HOURS,U,2)
"RTN","PRSARC07",159,0)
 E  D
"RTN","PRSARC07",160,0)
 .  S TODHR=REGHRS
"RTN","PRSARC07",161,0)
 Q TODHR_"^"_TOMHR
"RTN","PRSARC07",162,0)
 ;
"RTN","PRSARC07",163,0)
PLACESHF(PRSTH,PRSD,T1,T2,WAGER) ;Place earliest shift from
"RTN","PRSARC07",164,0)
 ; tour 1 and tour 2 in SDA Tour array (PRSTH)
"RTN","PRSARC07",165,0)
 ;INPUT:
"RTN","PRSARC07",166,0)
 ;  PRSTH - array to store SDA tour info p1=shift, p2=tour hrs.
"RTN","PRSARC07",167,0)
 ;  PRSD - day number in pp 1-14
"RTN","PRSARC07",168,0)
 ;  T1, T2 - tour 1 and 2 (ien in ToD file)
"RTN","PRSARC07",169,0)
 ;  WAGER - 0 or 1 for whether this is a wage grade employee.
"RTN","PRSARC07",170,0)
 ;OUTPUT:
"RTN","PRSARC07",171,0)
 ;  PRSTH by reference.  Update "^" piece 1 with shift indicator
"RTN","PRSARC07",172,0)
 ;
"RTN","PRSARC07",173,0)
 N SHIFT,T1SHFTS,T2SHFTS,SHIFTINI,EARLIEST,SHIFT2
"RTN","PRSARC07",174,0)
 ;
"RTN","PRSARC07",175,0)
 ; Wage grade always have a 0 for shift
"RTN","PRSARC07",176,0)
 I WAGER D
"RTN","PRSARC07",177,0)
 .  S $P(PRSTH(PRSD),U)=0
"RTN","PRSARC07",178,0)
 E  D 
"RTN","PRSARC07",179,0)
 .  S T1SHFTS=$$TRSHFTS^PRSARC08(T1) ; get tour 1 shift for today and tomorrow
"RTN","PRSARC07",180,0)
 .  S T2SHFTS=$$TRSHFTS^PRSARC08(T2) ; and tour 2
"RTN","PRSARC07",181,0)
 .;  Get any shift placed by a two day tour from yesterday.
"RTN","PRSARC07",182,0)
 .;  Then find earliest shift from t1, t2 and two day carryover
"RTN","PRSARC07",183,0)
 .  S SHIFTINI=$P($G(PRSTH(PRSD)),U) I SHIFTINI="" S SHIFTINI=4
"RTN","PRSARC07",184,0)
 .  S SHIFT=$P(T1SHFTS,U) I SHIFT="" S SHIFT=4
"RTN","PRSARC07",185,0)
 .  S SHIFT2=$P(T2SHFTS,U) I SHIFT2="" S SHIFT2=4
"RTN","PRSARC07",186,0)
 .  S EARLIEST=SHIFTINI
"RTN","PRSARC07",187,0)
 .  I SHIFT<SHIFTINI S EARLIEST=SHIFT
"RTN","PRSARC07",188,0)
 .  I SHIFT2<EARLIEST S EARLIEST=SHIFT2
"RTN","PRSARC07",189,0)
 .  I EARLIEST=4 S EARLIEST=""
"RTN","PRSARC07",190,0)
 .  S $P(PRSTH(PRSD),U)=EARLIEST
"RTN","PRSARC07",191,0)
 . ;
"RTN","PRSARC07",192,0)
 . ; Now do anything for tomorrow
"RTN","PRSARC07",193,0)
 .  S SHIFTINI=$P($G(PRSTH(PRSD+1)),U,1) I SHIFTINI="" S SHIFTINI=4
"RTN","PRSARC07",194,0)
 .  S SHIFT=$P(T1SHFTS,U,2) I SHIFT="" S SHIFT=4
"RTN","PRSARC07",195,0)
 .  S SHIFT2=$P(T2SHFTS,U,2) I SHIFT2="" S SHIFT2=4
"RTN","PRSARC07",196,0)
 .  S EARLIEST=SHIFTINI
"RTN","PRSARC07",197,0)
 .  I SHIFT<SHIFTINI S EARLIEST=SHIFT
"RTN","PRSARC07",198,0)
 .  I SHIFT2<EARLIEST S EARLIEST=SHIFT2
"RTN","PRSARC07",199,0)
 .  I EARLIEST=4 S EARLIEST=""
"RTN","PRSARC07",200,0)
 .  S $P(PRSTH(PRSD+1),U)=EARLIEST
"RTN","PRSARC07",201,0)
 Q
"RTN","PRSARC07",202,0)
 ;
"RTN","PRSARC08")
0^42^B14633080^n/a
"RTN","PRSARC08",1,0)
PRSARC08 ;WOIFO/JAH - Tour hours procedure calls ;12/19/06
"RTN","PRSARC08",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC08",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC08",4,0)
 Q
"RTN","PRSARC08",5,0)
 ;
"RTN","PRSARC08",6,0)
TRSHFTS(TOURIEN) ; return two piece ^ string with EARLIEST shift special
"RTN","PRSARC08",7,0)
 ; indicator for a tour 
"RTN","PRSARC08",8,0)
 ;
"RTN","PRSARC08",9,0)
 N TOUR,TODSHFT,TOMSHFT,TSEGS,TWODAYTR,I
"RTN","PRSARC08",10,0)
 N DONE,CROSS,BEG,END,SPIND,BEG24,END24
"RTN","PRSARC08",11,0)
 Q:$G(TOURIEN)'>0 "^"
"RTN","PRSARC08",12,0)
 S (TODSHFT,TOMSHFT)="4"
"RTN","PRSARC08",13,0)
 S TOUR=$G(^PRST(457.1,TOURIEN,0))
"RTN","PRSARC08",14,0)
 S TSEGS=$G(^PRST(457.1,TOURIEN,1))
"RTN","PRSARC08",15,0)
 S TWODAYTR=$P(TOUR,U,5)="Y"
"RTN","PRSARC08",16,0)
 S (DONE,CROSS)=0
"RTN","PRSARC08",17,0)
 F I=1:3:18 D  Q:DONE
"RTN","PRSARC08",18,0)
 .  S BEG=$P(TSEGS,U,I)
"RTN","PRSARC08",19,0)
 .  I BEG="" S DONE=1 Q
"RTN","PRSARC08",20,0)
 .  S END=$P(TSEGS,U,I+1)
"RTN","PRSARC08",21,0)
 .  S SPIND=$P(TSEGS,U,I+2) I SPIND="" S SPIND=1
"RTN","PRSARC08",22,0)
 .  S SPIND=$TR(SPIND,"67","23")
"RTN","PRSARC08",23,0)
 .  Q:"^1^2^3^"'[("^"_SPIND_"^")
"RTN","PRSARC08",24,0)
 . ; convert beg and end to twenty four hr to determine if one is
"RTN","PRSARC08",25,0)
 . ; less than other and hence crosses midnight. You've also
"RTN","PRSARC08",26,0)
 . ;  crossed midnight if a segment other than first starts at
"RTN","PRSARC08",27,0)
 . ;  midnight.
"RTN","PRSARC08",28,0)
 . ; Set CROSS to true so any remaining segments get recorded to
"RTN","PRSARC08",29,0)
 . ; tomorrow.
"RTN","PRSARC08",30,0)
 .    S BEG24=$$TWENTY4^PRSPESR2(BEG)
"RTN","PRSARC08",31,0)
 .    S END24=$$TWENTY4^PRSPESR2(END)
"RTN","PRSARC08",32,0)
 .    I 'CROSS&((BEG24'<END24)!((I>1)&(BEG24=2400))) D
"RTN","PRSARC08",33,0)
 ..     S CROSS=1
"RTN","PRSARC08",34,0)
 ..     I SPIND<TODSHFT S TODSHFT=SPIND
"RTN","PRSARC08",35,0)
 ..     I SPIND<TOMSHFT S TOMSHFT=SPIND
"RTN","PRSARC08",36,0)
 .    E  D
"RTN","PRSARC08",37,0)
 ..     I CROSS D
"RTN","PRSARC08",38,0)
 ...       I SPIND<TOMSHFT S TOMSHFT=SPIND
"RTN","PRSARC08",39,0)
 ..     E  D
"RTN","PRSARC08",40,0)
 ...       I SPIND<TODSHFT S TODSHFT=SPIND
"RTN","PRSARC08",41,0)
 I TODSHFT=4 S TODSHFT=""
"RTN","PRSARC08",42,0)
 I TOMSHFT=4 S TOMSHFT=""
"RTN","PRSARC08",43,0)
 Q TODSHFT_"^"_TOMSHFT
"RTN","PRSARC08",44,0)
 ;
"RTN","PRSARC08",45,0)
PLACEML(S1,S2,M) ; Remove meal from hrs on 2 day tour.  Put meal in middle and
"RTN","PRSARC08",46,0)
 ; remove from today S1 or tomorrow S2.  Function considers only amount
"RTN","PRSARC08",47,0)
 ; of hrs worked, to indicate in which hr of total hrs meal
"RTN","PRSARC08",48,0)
 ; would begin.  It doesn't consider where hrs are placed in day.
"RTN","PRSARC08",49,0)
 ; INPUT:
"RTN","PRSARC08",50,0)
 ;  S1 = HRS ON DAY 1 (DECIMAL 8.0, 8.5, ETC)
"RTN","PRSARC08",51,0)
 ;  S2 = HRS ON DAY 2
"RTN","PRSARC08",52,0)
 ;  M = LENGTH OF MEAL IN DECIMAL FORM .25 HRS, .5 HRS ETC
"RTN","PRSARC08",53,0)
 ;
"RTN","PRSARC08",54,0)
 ; ETA deals with quarter hrs so (\.25*.25) will round
"RTN","PRSARC08",55,0)
 ; down result to quarter hr.
"RTN","PRSARC08",56,0)
 ;
"RTN","PRSARC08",57,0)
 I (M>60)!(M<15)!((M#15)'=0) Q S1_"^"_S2
"RTN","PRSARC08",58,0)
 ; Convert minutes meal to decimal
"RTN","PRSARC08",59,0)
 N X S X=M D MEALIN^PRSPESR2 S M=.25*X
"RTN","PRSARC08",60,0)
 N MEALHR,NS1,NS2
"RTN","PRSARC08",61,0)
 S MEALHR=(S1+S2)/2-(M/2)\.25*.25
"RTN","PRSARC08",62,0)
 Q:MEALHR'>0 S1_"^"_S2
"RTN","PRSARC08",63,0)
 ;
"RTN","PRSARC08",64,0)
 ;  pull meal from S1, S2 or both
"RTN","PRSARC08",65,0)
 I MEALHR<S1 D
"RTN","PRSARC08",66,0)
 .  I (MEALHR+M)'>S1 D
"RTN","PRSARC08",67,0)
 ..   S NS2=S2
"RTN","PRSARC08",68,0)
 ..   S NS1=S1-M
"RTN","PRSARC08",69,0)
 .  E  D
"RTN","PRSARC08",70,0)
 ..   S NS1=S1-(S1-MEALHR)
"RTN","PRSARC08",71,0)
 ..   S NS2=S2-(M-(S1-MEALHR))
"RTN","PRSARC08",72,0)
 E  D
"RTN","PRSARC08",73,0)
 .   S NS1=S1
"RTN","PRSARC08",74,0)
 .   S NS2=S2-M
"RTN","PRSARC08",75,0)
 Q NS1_"^"_NS2
"RTN","PRSARC08",76,0)
 ;
"RTN","PRSARC08",77,0)
EARLYSH(TH,WAGER) ; LOOP THROUGH ARRAY TO FIND EARLIEST SHIFT
"RTN","PRSARC08",78,0)
 ;
"RTN","PRSARC08",79,0)
 N EARLIEST,HRS,SHIFT,TOURDAY
"RTN","PRSARC08",80,0)
 I WAGER D
"RTN","PRSARC08",81,0)
 .  S EARLIEST=0
"RTN","PRSARC08",82,0)
 E  D
"RTN","PRSARC08",83,0)
 .  S EARLIEST=4
"RTN","PRSARC08",84,0)
 .  S TOURDAY=0
"RTN","PRSARC08",85,0)
 .  F  S TOURDAY=$O(TH(TOURDAY)) Q:TOURDAY'>0  D
"RTN","PRSARC08",86,0)
 ..    S HRS=$P($G(TH(TOURDAY)),U,2)
"RTN","PRSARC08",87,0)
 ..    Q:HRS'>0
"RTN","PRSARC08",88,0)
 ..    S SHIFT=$P($G(TH(TOURDAY)),U)
"RTN","PRSARC08",89,0)
 ..    I SHIFT<EARLIEST S EARLIEST=SHIFT
"RTN","PRSARC08",90,0)
 I EARLIEST=4 S EARLIEST=""
"RTN","PRSARC08",91,0)
 Q EARLIEST
"RTN","PRSARC08",92,0)
 ;
"RTN","PRSARC08",93,0)
ISWAGE(PRSIEN) ; return true for wage grade 
"RTN","PRSARC08",94,0)
 I $G(PRSIEN)'>0 Q "0^undefined employee"
"RTN","PRSARC08",95,0)
 N PAYPLAN,ISWAGE
"RTN","PRSARC08",96,0)
 S ISWAGE=1
"RTN","PRSARC08",97,0)
 I '$D(^PRSPC(PRSIEN,0)) Q "0^undefined employee"
"RTN","PRSARC08",98,0)
 S PAYPLAN=$P($G(^PRSPC(PRSIEN,0)),U,21)
"RTN","PRSARC08",99,0)
 I "0123456789GU"'[PAYPLAN S ISWAGE=0
"RTN","PRSARC08",100,0)
 Q ISWAGE
"RTN","PRSARC08",101,0)
 ;
"RTN","PRSARC08",102,0)
ISCMPTR(PPI,PRSIEN) ; return true for compressed tours
"RTN","PRSARC08",103,0)
 ;
"RTN","PRSARC08",104,0)
 N ISCT S ISCT=0 I $P($G(^PRST(458,PPI,"E",PRSIEN,0)),U,6)="C" S ISCT=1
"RTN","PRSARC08",105,0)
 Q ISCT
"RTN","PRSARC08",106,0)
 ;
"RTN","PRSARC08",107,0)
TOTAL(TH,WKS) ; array loop tallis hrs
"RTN","PRSARC08",108,0)
 ; INPUT : WKS (optional) 1 for week one total, 2 for week 2 total,
"RTN","PRSARC08",109,0)
 ;                        otherwise full pay period total.
"RTN","PRSARC08",110,0)
 N LASTDAY,TOURDAY,TOTAL S TOTAL=0
"RTN","PRSARC08",111,0)
 S TOURDAY=$S($G(WKS)=2:7,1:0)
"RTN","PRSARC08",112,0)
 S LASTDAY=$S($G(WKS)=1:7,1:14)
"RTN","PRSARC08",113,0)
 F  S TOURDAY=$O(TH(TOURDAY)) Q:TOURDAY>LASTDAY!(TOURDAY'>0)  D
"RTN","PRSARC08",114,0)
 .  S TOTAL=TOTAL+$P($G(TH(TOURDAY)),U,2)
"RTN","PRSARC08",115,0)
 Q TOTAL
"RTN","PRSARC08",116,0)
 ;
"RTN","PRSARC08",117,0)
PARSE(VALMNOD,BEG,END) ; -- Copy from VALM2 split out pre-answers from user
"RTN","PRSARC08",118,0)
 N Y,J,L,X
"RTN","PRSARC08",119,0)
 S Y=$TR($P($P(VALMNOD,U,4),"=",2),"/\; .",",,,,,")
"RTN","PRSARC08",120,0)
 I Y["-" S X=Y,Y="" F I=1:1 S J=$P(X,",",I) Q:J']""  I +J>(BEG-1),+J<(END+1) S:J'["-" Y=Y_J_"," I J["-",+J,+J<+$P(J,"-",2) F L=+J:1:+$P(J,"-",2) I L>(BEG-1),L<(END+1) S Y=Y_L_","
"RTN","PRSARC08",121,0)
 Q Y
"RTN","PRSARC09")
0^55^B9347328^n/a
"RTN","PRSARC09",1,0)
PRSARC09 ;WOIFO/JAH - automatically load continuous recess;5/31/07
"RTN","PRSARC09",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARC09",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARC09",4,0)
 Q
"RTN","PRSARC09",5,0)
 ;
"RTN","PRSARC09",6,0)
AUTOREC(AWSST,AWSEND) ; Ask user: automatically schedule all available
"RTN","PRSARC09",7,0)
 ; recess, continuously from a user specified date.
"RTN","PRSARC09",8,0)
 W @IOF,!!
"RTN","PRSARC09",9,0)
 N DIR,X,Y,DIRUT,I
"RTN","PRSARC09",10,0)
 S DIR("A")="Set available recess, continously from a particular date"
"RTN","PRSARC09",11,0)
 S DIR("?",1)=" You may now select a recess start date and all available "
"RTN","PRSARC09",12,0)
 S DIR("?",2)=" recess will automatically be scheduled fully for each "
"RTN","PRSARC09",13,0)
 S DIR("?",3)=" week from the date you pick.  If you answer NO, you may"
"RTN","PRSARC09",14,0)
 S DIR("?",4)=" schedule recess by selecting weeks in the recess editor."
"RTN","PRSARC09",15,0)
 S DIR("?",5)=" "
"RTN","PRSARC09",16,0)
 S DIR("?",6)=" There are "_$P(PRSRWHRS,U,3)_" weeks or "_$P(PRSRWHRS,U,2)_" hours available for recess."
"RTN","PRSARC09",17,0)
 S I=0 F  S I=$O(DIR("?",I)) Q:I'>0  W !,DIR("?",I)
"RTN","PRSARC09",18,0)
 S DIR("B")="YES"
"RTN","PRSARC09",19,0)
 S DIR(0)="Y"
"RTN","PRSARC09",20,0)
 D ^DIR
"RTN","PRSARC09",21,0)
 S (PRSAUTOR)=+Y
"RTN","PRSARC09",22,0)
 Q:'PRSAUTOR 0
"RTN","PRSARC09",23,0)
 ; Find last date recess can start
"RTN","PRSARC09",24,0)
 N X,X1,X2,RECSTART
"RTN","PRSARC09",25,0)
 S X2=-(7*(($P(PRSRWHRS,U,3)+.9\1)-1)),X1=AWSEND D C^%DTC S AWSEND=X
"RTN","PRSARC09",26,0)
 S RECSTART=$$AWSTART^PRSARC03(AWSST,AWSEND,"Enter Recess Start Date")
"RTN","PRSARC09",27,0)
 Q:RECSTART'>0 0
"RTN","PRSARC09",28,0)
 ; convert RECESS start to 1st day of week
"RTN","PRSARC09",29,0)
 N D1,DAY,PPI,PPE S D1=RECSTART D PP^PRSAPPU
"RTN","PRSARC09",30,0)
 N X1,X2,X,%H S X1=D1,X2=-$S(DAY<8:DAY-1,1:DAY-8) D C^%DTC S RECSTART=X
"RTN","PRSARC09",31,0)
 Q PRSAUTOR_U_RECSTART
"RTN","PRSARC09",32,0)
 ;
"RTN","PRSARC09",33,0)
 ;
"RTN","PRSARC09",34,0)
ADDAUTOR(PRSAUTOR) ; auto add recess to listman
"RTN","PRSARC09",35,0)
 ;
"RTN","PRSARC09",36,0)
 N LSTITEM,CTRH1,CTRH2,LOFHRS,LOFTH1,LOFTH2,WKDY1
"RTN","PRSARC09",37,0)
 N ITEM,Y,RH1,RH2,OUT,HRSLEFT,RDEFAULT,CRH,TOURHRS,D1,PPI,PPE
"RTN","PRSARC09",38,0)
 ;
"RTN","PRSARC09",39,0)
 ; get tour hours from latest pay period on file
"RTN","PRSARC09",40,0)
 N PPI S PPI=$O(^PRST(458,999999),-1)
"RTN","PRSARC09",41,0)
 N TH D TOURHRS^PRSARC07(.TH,PPI,+PRSNURSE,"")
"RTN","PRSARC09",42,0)
 S LOFTH1=TH("W1"),LOFTH2=TH("W2")
"RTN","PRSARC09",43,0)
 ;
"RTN","PRSARC09",44,0)
 ; Initialize hours left for recess to 20 since 1 pay period minimum
"RTN","PRSARC09",45,0)
 ; is 25% of 80 hours
"RTN","PRSARC09",46,0)
 S HRSLEFT=20
"RTN","PRSARC09",47,0)
 S (OUT,ITEM,RDEFAULT)=0
"RTN","PRSARC09",48,0)
 S WKDY1=$P(PRSAUTOR,U,2)-1
"RTN","PRSARC09",49,0)
 F  S WKDY1=$O(FMWKS(WKDY1)) Q:WKDY1'>0!(HRSLEFT'>0)  D
"RTN","PRSARC09",50,0)
 .  S HRSLEFT=$$HRSLEFT^PRSARC03()
"RTN","PRSARC09",51,0)
 .  Q:HRSLEFT'>0
"RTN","PRSARC09",52,0)
 .  S ITEM=$G(FMWKS(WKDY1))
"RTN","PRSARC09",53,0)
 .  S LSTITEM=$G(^TMP("PRSLI",$J,ITEM))
"RTN","PRSARC09",54,0)
 .  S D1=WKDY1 D PP^PRSAPPU
"RTN","PRSARC09",55,0)
 .  N TH D TOURHRS^PRSARC07(.TH,PPI,+PRSNURSE,"")
"RTN","PRSARC09",56,0)
 .  S CTRH1=+TH("W1"),CTRH2=+TH("W2")
"RTN","PRSARC09",57,0)
 .  S TOURHRS=$S(ITEM#2:CTRH1,1:CTRH2)
"RTN","PRSARC09",58,0)
 .  S LOFHRS=$S(ITEM#2:LOFTH1,1:LOFTH2)
"RTN","PRSARC09",59,0)
 .  I TOURHRS'>0 S TOURHRS=LOFHRS
"RTN","PRSARC09",60,0)
 .  ;get remaining hours to schedule for FY
"RTN","PRSARC09",61,0)
 .  I HRSLEFT<TOURHRS D
"RTN","PRSARC09",62,0)
 ..    S RDEFAULT=HRSLEFT
"RTN","PRSARC09",63,0)
 .  E  D
"RTN","PRSARC09",64,0)
 ..   S RDEFAULT=TOURHRS
"RTN","PRSARC09",65,0)
 .  I RDEFAULT<0 S RDEFAULT=0
"RTN","PRSARC09",66,0)
 . D FLDTEXT^VALM10(LSTITEM,"RECESS HOURS",$J(RDEFAULT,15,2))
"RTN","PRSARC09",67,0)
 .;
"RTN","PRSARC09",68,0)
 .; set hrs for selected weeks, remove from array if zero
"RTN","PRSARC09",69,0)
 .; 
"RTN","PRSARC09",70,0)
 . I RDEFAULT'>0 D
"RTN","PRSARC09",71,0)
 ..  K ^TMP("PRSRW",$J,ITEM)
"RTN","PRSARC09",72,0)
 . E  D
"RTN","PRSARC09",73,0)
 ..  S ^TMP("PRSRW",$J,ITEM)=LSTITEM_U_RDEFAULT_U_WKDY1_U_"0"
"RTN","PRSARC09",74,0)
 ;
"RTN","PRSARC09",75,0)
 Q
"RTN","PRSARC09",76,0)
 ;
"RTN","PRSARCH")
0^44^B18790944^n/a
"RTN","PRSARCH",1,0)
PRSARCH ;;WOIFO/JAH - Recess Tracking Help List ;11-DEC-2006
"RTN","PRSARCH",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARCH",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARCH",4,0)
 Q
"RTN","PRSARCH",5,0)
EN ;
"RTN","PRSARCH",6,0)
 D EN^VALM("PRSA RECESS TRACKING HELP")
"RTN","PRSARCH",7,0)
 S VALMBCK="R"
"RTN","PRSARCH",8,0)
 Q
"RTN","PRSARCH",9,0)
HDR ; -- header code
"RTN","PRSARCH",10,0)
 S VALMHDR(1)="Help Screen for 9 Mo. AWS Recess Tracking Actions"
"RTN","PRSARCH",11,0)
 S VALMHDR(2)="Enter QU to return to the Schedule"
"RTN","PRSARCH",12,0)
 Q
"RTN","PRSARCH",13,0)
 ;
"RTN","PRSARCH",14,0)
INIT ; -- init variables and list array
"RTN","PRSARCH",15,0)
 ;
"RTN","PRSARCH",16,0)
 N TEXT,LEN
"RTN","PRSARCH",17,0)
 S VALMCNT=0
"RTN","PRSARCH",18,0)
 F  D  Q:TEXT=""
"RTN","PRSARCH",19,0)
 .  S VALMCNT=VALMCNT+1
"RTN","PRSARCH",20,0)
 .  S TEXT=$P($T(HLPTXT+VALMCNT),";",3)
"RTN","PRSARCH",21,0)
 .  I $E(TEXT,1)?1A D
"RTN","PRSARCH",22,0)
 ..    S LEN=$L(TEXT)
"RTN","PRSARCH",23,0)
 ..    S TEXT="              "_TEXT
"RTN","PRSARCH",24,0)
 ..    D SET^VALM10(VALMCNT,TEXT)
"RTN","PRSARCH",25,0)
 ..    D CNTRL^VALM10(VALMCNT,15,LEN,IORVON,IORVOFF,0)
"RTN","PRSARCH",26,0)
 ..   ; D RESTORE^VALM10(VALMCNT)
"RTN","PRSARCH",27,0)
 .  E  D
"RTN","PRSARCH",28,0)
 ..   D SET^VALM10(VALMCNT,TEXT)
"RTN","PRSARCH",29,0)
 Q
"RTN","PRSARCH",30,0)
HLPTXT ;
"RTN","PRSARCH",31,0)
 ;;SE  Select Recess Weeks
"RTN","PRSARCH",32,0)
 ;;    Enter SE at the Select Action prompt to select weeks by the number
"RTN","PRSARCH",33,0)
 ;;    in the left hand column of the list.  You may select multiple
"RTN","PRSARCH",34,0)
 ;;    weeks by entering week numbers separated by commas and you may
"RTN","PRSARCH",35,0)
 ;;    select a range of weeks by using a hyphen.  For example: 3,6-10,12
"RTN","PRSARCH",36,0)
 ;;    is a valid response to select weeks.  This action will then prompt
"RTN","PRSARCH",37,0)
 ;;    for the hours to enter for all of the weeks selected.  If the
"RTN","PRSARCH",38,0)
 ;;    weeks are in the past the tour of duty hours stored in the
"RTN","PRSARCH",39,0)
 ;;    employee's timecard may be used by accepting the default to use
"RTN","PRSARCH",40,0)
 ;;    tour of duty hours.  Alternatively you can choose to use the 
"RTN","PRSARCH",41,0)
 ;;    employee's current tour hours from the timecard as the recess 
"RTN","PRSARCH",42,0)
 ;;    hours or you may specify the recess hours for each week of the
"RTN","PRSARCH",43,0)
 ;;    pay period for the weeks selected.  In all cases the recess hours
"RTN","PRSARCH",44,0)
 ;;    specified are applied to all the weeks selected.
"RTN","PRSARCH",45,0)
 ;;EH  Edit Recess Hours
"RTN","PRSARCH",46,0)
 ;;    Enter EH at the Select Action prompt to select any of the weeks
"RTN","PRSARCH",47,0)
 ;;    in the list by number.  You will be prompted to enter the recess
"RTN","PRSARCH",48,0)
 ;;    hours for each week that you selected.
"RTN","PRSARCH",49,0)
 ;;CR  Cancel Recess Weeks
"RTN","PRSARCH",50,0)
 ;;    Enter CR at the Select Action prompt to select any of the weeks
"RTN","PRSARCH",51,0)
 ;;    in the list by number.  Any recess hours from the selection will
"RTN","PRSARCH",52,0)
 ;;    be removed.
"RTN","PRSARCH",53,0)
 ;;NS  Change AWS Start
"RTN","PRSARCH",54,0)
 ;;    Enter NS at the Select Action prompt to change when the AWS
"RTN","PRSARCH",55,0)
 ;;    schedule takes effect.  Any recess scheduled during the fiscal
"RTN","PRSARCH",56,0)
 ;;    year that occurs before the new start date is removed.  If you
"RTN","PRSARCH",57,0)
 ;;    enter a date other than the first day of a pay period the action
"RTN","PRSARCH",58,0)
 ;;    will automatically set the AWS start date to the first day of 
"RTN","PRSARCH",59,0)
 ;;    the pay period that the date you entered falls within.
"RTN","PRSARCH",60,0)
 ;;    The number of weeks available for recess is 25% of the weeks
"RTN","PRSARCH",61,0)
 ;;    from the start date to the end of the fiscal year.
"RTN","PRSARCH",62,0)
 ;;GH  Recess Hours Summary
"RTN","PRSARCH",63,0)
 ;;    Enter GH to see a summary screen with recess totals.  Be sure 
"RTN","PRSARCH",64,0)
 ;;    to scroll down to see the whole report.
"RTN","PRSARCH",65,0)
 ;;SV  Save Recess Schedule
"RTN","PRSARCH",66,0)
 ;;    Enter SV to save any edits you have made to the schedule and
"RTN","PRSARCH",67,0)
 ;;    continue editing.
"RTN","PRSARCH",68,0)
 ;;EX  Exit and Save Recess
"RTN","PRSARCH",69,0)
 ;;    Enter EX to save any edits you have made to the schedule and exit
"RTN","PRSARCH",70,0)
 ;;    the option.
"RTN","PRSARCH",71,0)
 ;;QU  Quit without Saving
"RTN","PRSARCH",72,0)
 ;;    Enter QU to quit and not save any of the changes you made.
"RTN","PRSARCH",73,0)
 Q
"RTN","PRSARCH",74,0)
 ;
"RTN","PRSARCH",75,0)
HELP ; -- help code
"RTN","PRSARCH",76,0)
 N X
"RTN","PRSARCH",77,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PRSARCH",78,0)
 Q
"RTN","PRSARCH",79,0)
 ;
"RTN","PRSARCH",80,0)
EXIT ; -- exit code
"RTN","PRSARCH",81,0)
 D CLEAN^VALM10
"RTN","PRSARCH",82,0)
 Q
"RTN","PRSARCH",83,0)
 ;
"RTN","PRSARCH",84,0)
EXPND ; -- expand code
"RTN","PRSARCH",85,0)
 Q
"RTN","PRSARCH",86,0)
 ;
"RTN","PRSARCS")
0^43^B15801244^n/a
"RTN","PRSARCS",1,0)
PRSARCS ;;WOIFO/JAH - Recess Tracking Functions ;02-MAR-2007
"RTN","PRSARCS",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSARCS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSARCS",4,0)
 Q
"RTN","PRSARCS",5,0)
EN ;
"RTN","PRSARCS",6,0)
 S PRSHDR="9 Mo. AWS Recess Summary for "_$P(PRSFSCYR,U,2)_"  AWS Start Date: "_$P(PRSFY,U,10)_" (pp "_$P(PRSFY,U,12)_")"
"RTN","PRSARCS",7,0)
 S PRSHDR2=$G(VALMHDR(2))
"RTN","PRSARCS",8,0)
 D EN^VALM("PRSA RECESS SUMMARY")
"RTN","PRSARCS",9,0)
 S VALMBCK="R"
"RTN","PRSARCS",10,0)
 Q
"RTN","PRSARCS",11,0)
HDR ; -- header code
"RTN","PRSARCS",12,0)
 S VALMHDR(1)=PRSHDR
"RTN","PRSARCS",13,0)
 S VALMHDR(2)=PRSHDR2
"RTN","PRSARCS",14,0)
 Q
"RTN","PRSARCS",15,0)
 ;
"RTN","PRSARCS",16,0)
INIT ; -- init variables and list array
"RTN","PRSARCS",17,0)
 ; hours based on 25% of AWS schedule--total assigned and available hrs
"RTN","PRSARCS",18,0)
 ; and hours available to be assigned to weeks.
"RTN","PRSARCS",19,0)
 ;
"RTN","PRSARCS",20,0)
 N TRWA,TRHA,RRHA,OUT,RCNT,ED1,TEXT,WD1,WK,HRSWK,HRSUSED,TOTWKS,HRSPOST
"RTN","PRSARCS",21,0)
 N HRSPSTOT,DEC
"RTN","PRSARCS",22,0)
 S (WK,HRSUSED,RCNT,HRSPSTOT)=0
"RTN","PRSARCS",23,0)
 S VALMCNT=0
"RTN","PRSARCS",24,0)
 F  S WK=$O(^TMP("PRSRW",$J,WK)) Q:WK'>0  D
"RTN","PRSARCS",25,0)
 . ; Get item out of recess weeks items index
"RTN","PRSARCS",26,0)
 .   S VALMCNT=VALMCNT+1
"RTN","PRSARCS",27,0)
 .   S WD1=$G(WKSFM(WK)),ED1=$E(WD1,4,5)_"/"_$E(WD1,6,7)_"/"_$E(WD1,2,3)
"RTN","PRSARCS",28,0)
 .   S HRSWK=$P(^TMP("PRSRW",$J,WK),U,2)
"RTN","PRSARCS",29,0)
 .   I HRSWK>0 S RCNT=RCNT+1
"RTN","PRSARCS",30,0)
 .   S HRSPOST=$P(^TMP("PRSRW",$J,WK),U,5)
"RTN","PRSARCS",31,0)
 .   S HRSPSTOT=HRSPSTOT+HRSPOST
"RTN","PRSARCS",32,0)
 .   S HRSUSED=HRSUSED+HRSWK
"RTN","PRSARCS",33,0)
 .   S DEC=$S($P(HRSWK,".",2)>0:1,1:0)
"RTN","PRSARCS",34,0)
 .   S TEXT=$J(WK,5,0)_"   "_ED1_$J(HRSWK,18,2)_$J(HRSPOST,19,2)
"RTN","PRSARCS",35,0)
 .   D SET^VALM10(VALMCNT,TEXT)
"RTN","PRSARCS",36,0)
 I RCNT=0 D 
"RTN","PRSARCS",37,0)
 .  S VALMCNT=VALMCNT+1
"RTN","PRSARCS",38,0)
 .  D SET^VALM10(VALMCNT,"  There are no weeks scheduled with recess hours.")
"RTN","PRSARCS",39,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARCS",40,0)
 S TOTWKS=$P($G(PRSRWHRS),U)
"RTN","PRSARCS",41,0)
 S TRHA=$P($G(PRSRWHRS),U,2)
"RTN","PRSARCS",42,0)
 S TRWA=$P($G(PRSRWHRS),U,3)
"RTN","PRSARCS",43,0)
 S RRHA=TRHA-HRSUSED
"RTN","PRSARCS",44,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",45,0)
 D SET^VALM10(VALMCNT,"                            ======             ======")
"RTN","PRSARCS",46,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",47,0)
 D SET^VALM10(VALMCNT," Total Recess.   Scheduled:"_$J(HRSUSED,7,2)_"     Posted:"_$J(HRSPSTOT,7,2))
"RTN","PRSARCS",48,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",49,0)
 D SET^VALM10(VALMCNT,"")
"RTN","PRSARCS",50,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",51,0)
 D SET^VALM10(VALMCNT," Total Weeks in AWS FY Schedule: "_$J(TOTWKS,5,2))
"RTN","PRSARCS",52,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",53,0)
 D SET^VALM10(VALMCNT," Total available FY recess hrs: "_$J(TRHA,6,2)_" ("_TRWA_" weeks)")
"RTN","PRSARCS",54,0)
 S VALMCNT=VALMCNT+1
"RTN","PRSARCS",55,0)
 I RRHA<0 D
"RTN","PRSARCS",56,0)
 .  D SET^VALM10(VALMCNT," WARNING--Recess hours over scheduled: "_$J(RRHA,6,2))
"RTN","PRSARCS",57,0)
 .  S VALMSG="WARNING--Recess hours are over scheduled: "_$J(RRHA,6,2)
"RTN","PRSARCS",58,0)
 E  D
"RTN","PRSARCS",59,0)
 .  I RRHA>0 D
"RTN","PRSARCS",60,0)
 ..    D SET^VALM10(VALMCNT," WARNING--Recess hours under scheduled: "_$J(RRHA,6,2))
"RTN","PRSARCS",61,0)
 ..  S VALMSG="WARNING--Recess hours are under scheduled: "_$J(RRHA,6,2)
"RTN","PRSARCS",62,0)
 .  E  D
"RTN","PRSARCS",63,0)
 ..    D SET^VALM10(VALMCNT," Scheduled recess hours match hours available for recess.")
"RTN","PRSARCS",64,0)
 S VALMBCK="Q"
"RTN","PRSARCS",65,0)
 Q
"RTN","PRSARCS",66,0)
VALIDRS ; valid recess schedule?
"RTN","PRSARCS",67,0)
 ; hours based on 25% of AWS schedule--total assigned and available hrs
"RTN","PRSARCS",68,0)
 ; and hours available to be assigned to weeks.
"RTN","PRSARCS",69,0)
 ;
"RTN","PRSARCS",70,0)
 ; if quitting (PRSOUT=1) check the file, otherwise check what is 
"RTN","PRSARCS",71,0)
 ; being saved from the PRSRW array.
"RTN","PRSARCS",72,0)
 ;
"RTN","PRSARCS",73,0)
 N TRHA,RRHA,OUT,CNT,ED1,WD1,WK,HRSWK,HRSUSED,OUT
"RTN","PRSARCS",74,0)
 I '$G(PRSOUT) D
"RTN","PRSARCS",75,0)
 . S (WK,HRSUSED)=0
"RTN","PRSARCS",76,0)
 . F  S WK=$O(^TMP("PRSRW",$J,WK)) Q:WK'>0  D
"RTN","PRSARCS",77,0)
 .. ; Get item out of recess weeks items index
"RTN","PRSARCS",78,0)
 ..   S HRSWK=$P(^TMP("PRSRW",$J,WK),U,2)
"RTN","PRSARCS",79,0)
 ..   S HRSUSED=HRSUSED+HRSWK
"RTN","PRSARCS",80,0)
 E  D
"RTN","PRSARCS",81,0)
 .  S HRSUSED=$$HRSFILED^PRSARC03($P($G(PRSFY),U,9))
"RTN","PRSARCS",82,0)
 S PRSRWHRS=$$GETAVHRS^PRSARC04(.FMWKS,PRSDT)
"RTN","PRSARCS",83,0)
 S TRHA=$P($G(PRSRWHRS),U,2)
"RTN","PRSARCS",84,0)
 S RRHA=TRHA-HRSUSED
"RTN","PRSARCS",85,0)
 I RRHA<0 D
"RTN","PRSARCS",86,0)
 .  W !,"WARNING--Recess hours are over scheduled: "_$J(-RRHA,6,2)
"RTN","PRSARCS",87,0)
 E  D
"RTN","PRSARCS",88,0)
 .  I RRHA>0 D
"RTN","PRSARCS",89,0)
 ..   W !,"WARNING--Recess hours are under scheduled: "_$J(-RRHA,6,2)
"RTN","PRSARCS",90,0)
 .  E  D
"RTN","PRSARCS",91,0)
 ..   W !,"Scheduled recess hours match hours available for recess."
"RTN","PRSARCS",92,0)
 S OUT=$$ASK^PRSLIB00(1)
"RTN","PRSARCS",93,0)
 Q
"RTN","PRSARCS",94,0)
 ;
"RTN","PRSARCS",95,0)
HELP ; -- help code
"RTN","PRSARCS",96,0)
 N X
"RTN","PRSARCS",97,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","PRSARCS",98,0)
 Q
"RTN","PRSARCS",99,0)
 ;
"RTN","PRSARCS",100,0)
EXIT ; -- exit code
"RTN","PRSARCS",101,0)
 D CLEAN^VALM10
"RTN","PRSARCS",102,0)
 K PRSHDR,PRSHDR2
"RTN","PRSARCS",103,0)
 Q
"RTN","PRSARCS",104,0)
 ;
"RTN","PRSARCS",105,0)
EXPND ; -- expand code
"RTN","PRSARCS",106,0)
 Q
"RTN","PRSARCS",107,0)
 ;
"RTN","PRSASR")
0^28^B51171967^B44221248
"RTN","PRSASR",1,0)
PRSASR ;HISC/MGD,WOIFO/JAH/PLT - Supervisor Certification ;02/05/2005
"RTN","PRSASR",2,0)
 ;;4.0;PAID;**2,7,8,22,37,43,82,93,112**;Sep 21, 1995;Build 54
"RTN","PRSASR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSASR",4,0)
 ;
"RTN","PRSASR",5,0)
 ;Called by Pay Per Cert Option on T&A Superv menu. Timecard 4 each 
"RTN","PRSASR",6,0)
 ;employee in this supervs T&L is displayed.  Superv prompted at each 
"RTN","PRSASR",7,0)
 ;display as to whether card is ready 4 certification. Cards that r
"RTN","PRSASR",8,0)
 ;ready r saved in ^TMP.  After this review--elect sign code is 
"RTN","PRSASR",9,0)
 ;required to release approved cards to payroll. Upon ES
"RTN","PRSASR",10,0)
 ; 8b, exceptions, & ot warnings r stored & timecard status 
"RTN","PRSASR",11,0)
 ;changed to 'P'--'released to payroll' 
"RTN","PRSASR",12,0)
 ;
"RTN","PRSASR",13,0)
 ;=====================================================================
"RTN","PRSASR",14,0)
 ;
"RTN","PRSASR",15,0)
 ;Set up reverse video ON & OFF for tour error highlighting
"RTN","PRSASR",16,0)
 N IORVOFF,IORVON,IOINHI,IOINORM,IOBOFF,IOBON,RESP
"RTN","PRSASR",17,0)
 S X="IORVOFF;IORVON;IOBOFF;IOBON;IOINHI;IOINORM" D ENDR^%ZISS
"RTN","PRSASR",18,0)
 ;
"RTN","PRSASR",19,0)
 N MIDPP,DUMMY
"RTN","PRSASR",20,0)
 S MIDPP="In middle of Pay Period; Cannot Certify & Release."
"RTN","PRSASR",21,0)
 W:$E(IOST,1,2)="C-" @IOF W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSASR",22,0)
 W !?27,"SUPERVISORY CERTIFICATION"
"RTN","PRSASR",23,0)
 S PRSTLV=3 D ^PRSAUTL G:TLI<1 EX
"RTN","PRSASR",24,0)
 D NOW^%DTC
"RTN","PRSASR",25,0)
 S DT=%\1,APDT=%,Y=$G(^PRST(458,"AD",DT)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2)
"RTN","PRSASR",26,0)
 I DAY>5,DAY<11 W $C(7),!!,MIDPP G EX
"RTN","PRSASR",27,0)
 I DAY<6 S X1=DT,X2=-7 D C^%DTC S PPI=$P($G(^PRST(458,"AD",X)),"^",1) G:'PPI EX
"RTN","PRSASR",28,0)
 ;     -----------------------------------------
"RTN","PRSASR",29,0)
P0 ;PDT     = string of pay period dates with format - Sun 29-Sep-96^
"RTN","PRSASR",30,0)
 ;PDTI    = string of pay period dates in fileman format.
"RTN","PRSASR",31,0)
 ;PPI     = pay period internal entry number in file 458.
"RTN","PRSASR",32,0)
 ;GLOB    = global reference for employees pay period record
"RTN","PRSASR",33,0)
 ;          returned from $$AVAILREC & passed to UNLOCK.
"RTN","PRSASR",34,0)
 ;     -----------------------------------------
"RTN","PRSASR",35,0)
 ;
"RTN","PRSASR",36,0)
 S PDT=$G(^PRST(458,PPI,2)),PDTI=$G(^(1)),QT=0 K ^TMP($J)
"RTN","PRSASR",37,0)
 ;
"RTN","PRSASR",38,0)
 ;     -----------------------------------------
"RTN","PRSASR",39,0)
 ;Loop thru this supervisor's T&L unit on x-ref in 450.
"RTN","PRSASR",40,0)
 ;$$availrec() ensures there's data & node with employee's 
"RTN","PRSASR",41,0)
 ;pay period record is NOT locked, then locks node.
"RTN","PRSASR",42,0)
 ;Call to CHK checks for needed approvals for current employee
"RTN","PRSASR",43,0)
 ;If supervisor decides record is not ready, during this call,
"RTN","PRSASR",44,0)
 ;then node is unlocked.  Records that super accepts for release
"RTN","PRSASR",45,0)
 ;are not unlocked until they are processed thru temp global
"RTN","PRSASR",46,0)
 ;& their status' are updated.
"RTN","PRSASR",47,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",48,0)
 ;
"RTN","PRSASR",49,0)
 S NN="",CKS=1
"RTN","PRSASR",50,0)
 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  I $$AVAILREC^PRSLIB00("SUP",.GLOB) D CHK I QT G T0
"RTN","PRSASR",51,0)
 ;
"RTN","PRSASR",52,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",53,0)
 ;Loop through T&L unit file x-ref 2 c if this supervisor certifies
"RTN","PRSASR",54,0)
 ;payperiod data for other supervisors of other T&L units.  If so
"RTN","PRSASR",55,0)
 ;process after ensuring node to be certified is available.
"RTN","PRSASR",56,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",57,0)
 ;
"RTN","PRSASR",58,0)
 S CKS=0
"RTN","PRSASR",59,0)
 F VA2=0:0 S VA2=$$TLSUP Q:VA2<1  S SSN=$$SSN I SSN'="" S DFN=$$DFN S Z=$P($G(^PRSPC(+DFN,0)),"^",8) I Z'="",Z'=TLE,$$AVAILREC^PRSLIB00("SUP",.GLOB) D CHK I QT G EX:'$T,T0
"RTN","PRSASR",60,0)
 ;
"RTN","PRSASR",61,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",62,0)
T0 I $D(^TMP($J,"E")) G T1
"RTN","PRSASR",63,0)
 W !!,"No records have been selected for certification."
"RTN","PRSASR",64,0)
 S DUMMY=$$ASK^PRSLIB00(1) G EX
"RTN","PRSASR",65,0)
 ;
"RTN","PRSASR",66,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",67,0)
 ;
"RTN","PRSASR",68,0)
T1 ;if supervisor signs off then update all records in tmp
"RTN","PRSASR",69,0)
 ;otherwise remove any auto posting.
"RTN","PRSASR",70,0)
 D ^PRSAES I ESOK D
"RTN","PRSASR",71,0)
 .D NOW^%DTC S APDT=%
"RTN","PRSASR",72,0)
 .F DFN=0:0 S DFN=$O(^TMP($J,"E",DFN)) Q:DFN<1  S VAL=$G(^(DFN)) D PROC
"RTN","PRSASR",73,0)
 I 'ESOK D
"RTN","PRSASR",74,0)
 .F DFN=0:0 S DFN=$O(^TMP($J,"E",DFN)) Q:DFN<1  D
"RTN","PRSASR",75,0)
 ..D AUTOPINI^PRS8(PPI,DFN)
"RTN","PRSASR",76,0)
 D EX
"RTN","PRSASR",77,0)
 Q
"RTN","PRSASR",78,0)
 ;
"RTN","PRSASR",79,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",80,0)
CHK ; Check for needed approvals
"RTN","PRSASR",81,0)
 N PRSENT,PRSWOC
"RTN","PRSASR",82,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) I "PX"[STAT Q
"RTN","PRSASR",83,0)
 I USR=DFN Q:'$D(^XUSEC("PRSA SIGN",DUZ))
"RTN","PRSASR",84,0)
 E  I CKS S SSN=$P($G(^PRSPC(DFN,0)),"^",9) I SSN S EDUZ=+$O(^VA(200,"SSN",SSN,0)) I $D(^PRST(455.5,"AS",EDUZ,TLI)) Q:$P($G(^PRST(455.5,TLI,"S",EDUZ,0)),"^",2)'=TLE
"RTN","PRSASR",85,0)
 S HDR=0 D HDR,^PRSAENT S PRSENT=ENT
"RTN","PRSASR",86,0)
 ;
"RTN","PRSASR",87,0)
 ;Loop to display tour, exceptions(leave, etc..) & errors.
"RTN","PRSASR",88,0)
 ;
"RTN","PRSASR",89,0)
 S (XF,X9)=0
"RTN","PRSASR",90,0)
 F DAY=1:1:14 D TOURERR($P(PDT,"^",DAY),.X9,.XF) D:$Y>(IOSL-6)&(DAY<14) HDR G:QT O1
"RTN","PRSASR",91,0)
 ;
"RTN","PRSASR",92,0)
 ;Display VCS commission sales, if applicable
"RTN","PRSASR",93,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,2))
"RTN","PRSASR",94,0)
 I Z'="" D:$Y>(IOSL-11) HDR Q:QT  D VCS^PRSASR1
"RTN","PRSASR",95,0)
 ;
"RTN","PRSASR",96,0)
 ;
"RTN","PRSASR",97,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,4))
"RTN","PRSASR",98,0)
 I Z'="" D:$Y>(IOSL-9) HDR Q:QT  D ED^PRSASR1
"RTN","PRSASR",99,0)
 I XF W !,IORVON,"Serious error; cannot release.",IORVOFF S QT=$$ASK^PRSLIB00() Q
"RTN","PRSASR",100,0)
 S QT=$$ASK^PRSLIB00() Q:QT
"RTN","PRSASR",101,0)
 ;
"RTN","PRSASR",102,0)
 ;PRS8 call creates & stores 8B string in employees attendance
"RTN","PRSASR",103,0)
 ;record.  Later, under a payroll option, string will be
"RTN","PRSASR",104,0)
 ;transmitted to Austin.
"RTN","PRSASR",105,0)
 ;
"RTN","PRSASR",106,0)
 N NN D ONE^PRS8 S C0=$G(^PRSPC(DFN,0)),PY=PPI D CERT^PRS8VW S QT=0
"RTN","PRSASR",107,0)
 ;
"RTN","PRSASR",108,0)
 ;Show OT (approve-vs-8B) warning & save in TMP.
"RTN","PRSASR",109,0)
 N WK,OTERR,O8,OA
"RTN","PRSASR",110,0)
 F WK=1:1:2 D
"RTN","PRSASR",111,0)
 .  D WARNSUP^PRSAOTT(PPE,DFN,VAL,WK,.OTERR,.O8,.OA)
"RTN","PRSASR",112,0)
 .  I OTERR S ^TMP($J,"OT",DFN,WK)=O8_"^"_OA
"RTN","PRSASR",113,0)
 ;
"RTN","PRSASR",114,0)
 ;warning message for rs/rn and on type of time
"RTN","PRSASR",115,0)
 I $E(PRSENT,5) D
"RTN","PRSASR",116,0)
 . I @($TR($$CD8B^PRSU1B2(VAL,"RS^3^RN^3",1),U,"+")_"-("_$TR($$RSHR^PRSU1B2(DFN,PPI),U,"+")_")") W !,?3,"WARNING: The total scheduled recess hours for this pay period does not match the total RS/RN posted."
"RTN","PRSASR",117,0)
 . I $G(PRSWOC)]"" W !,?3,"Warning: The entire tour for day# ",PRSWOC," is posted RECESS. The On-Call will be paid unless posted UNAVAILABLE."
"RTN","PRSASR",118,0)
 . QUIT
"RTN","PRSASR",119,0)
 ;
"RTN","PRSASR",120,0)
LD ; Check for changes to the Labor Distribution Codes made during the pay
"RTN","PRSASR",121,0)
 ; period.
"RTN","PRSASR",122,0)
 I $D(^PRST(458,PPI,"E",DFN,"LDAUD")) D LD^PRSASR1
"RTN","PRSASR",123,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",124,0)
OK ;Prompt Supervisor to release timecard.  If yes, store in ^TMP(.
"RTN","PRSASR",125,0)
 ;If supervisor answers no then bypass & unlock record.
"RTN","PRSASR",126,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",127,0)
 W !!,IORVON,"Release to Payroll?",IORVOFF," "
"RTN","PRSASR",128,0)
 R X:DTIME S:'$T!(X["^") QT=1 Q:QT  S:X="" X="*" S X=$TR(X,"yesno","YESNO")
"RTN","PRSASR",129,0)
 I $P("YES",X,1)'="",$P("NO",X,1)'="" W $C(7)," Answer YES or NO" G OK
"RTN","PRSASR",130,0)
 I X?1"Y".E S ^TMP($J,"E",DFN)=VAL
"RTN","PRSASR",131,0)
 E  D
"RTN","PRSASR",132,0)
 .  D AUTOPINI^PRS8(PPI,DFN) ; remove any auto posting
"RTN","PRSASR",133,0)
 .  D UNLOCK^PRSLIB00(GLOB) ; unlock record
"RTN","PRSASR",134,0)
 .  K ^TMP($J,"LOCK",DFN) ;clean out of local lock list.
"RTN","PRSASR",135,0)
O1 Q
"RTN","PRSASR",136,0)
 ;
"RTN","PRSASR",137,0)
PROC ; Set Approval, file any exceptions & update 8B string
"RTN","PRSASR",138,0)
 ;
"RTN","PRSASR",139,0)
 ; get employees entitlement string in variable A1
"RTN","PRSASR",140,0)
 D ^PRSAENT
"RTN","PRSASR",141,0)
 ;
"RTN","PRSASR",142,0)
 ; set approvals
"RTN","PRSASR",143,0)
 S $P(^PRST(458,PPI,"E",DFN,0),"^",3,5)=DUZ_"^"_APDT_"^"_A1
"RTN","PRSASR",144,0)
 ; VCS approval
"RTN","PRSASR",145,0)
 I $D(^PRST(458,PPI,"E",DFN,2)) S $P(^(2),"^",17,18)=DUZ_"^"_APDT
"RTN","PRSASR",146,0)
 ;
"RTN","PRSASR",147,0)
 ; loop thru any exceptions & file in 458.5
"RTN","PRSASR",148,0)
 I $D(^TMP($J,"X",DFN)) S K="" F  S K=$O(^TMP($J,"X",DFN,K)) Q:K=""  S DAY=$P(K," ",1),X1=$P(PDTI,"^",DAY),X2=$G(^(K)) D ^PRSATPF
"RTN","PRSASR",149,0)
 ;
"RTN","PRSASR",150,0)
 ; file overtime warnings
"RTN","PRSASR",151,0)
 F WK=1:1:2 I $G(^TMP($J,"OT",DFN,WK))'="" D
"RTN","PRSASR",152,0)
 .  S O8=$P(^TMP($J,"OT",DFN,WK),"^")
"RTN","PRSASR",153,0)
 .  S OA=$P(^TMP($J,"OT",DFN,WK),"^",2)
"RTN","PRSASR",154,0)
 .  D FILEOTW^PRSAOTTF(PPI,DFN,WK,O8,OA)
"RTN","PRSASR",155,0)
 ;
"RTN","PRSASR",156,0)
 ;set 8b string & change status of timecard to payroll
"RTN","PRSASR",157,0)
 S ^PRST(458,PPI,"E",DFN,5)=VAL S $P(^PRST(458,PPI,"E",DFN,0),"^",2)="P"
"RTN","PRSASR",158,0)
 ;
"RTN","PRSASR",159,0)
 ; If employee is a PT Phys w/ memo update hours credited
"RTN","PRSASR",160,0)
 D PTP^PRSASR1(DFN,PPI)
"RTN","PRSASR",161,0)
 ;
"RTN","PRSASR",162,0)
 ;unlock employees time card record
"RTN","PRSASR",163,0)
 S GLOB="^PRST(458,"_PPI_","_"""E"""_","_DFN_",0)"
"RTN","PRSASR",164,0)
 D UNLOCK^PRSLIB00(GLOB)
"RTN","PRSASR",165,0)
 K ^TMP($J,"LOCK",DFN) ;clean out of local lock list.
"RTN","PRSASR",166,0)
 Q
"RTN","PRSASR",167,0)
 ;
"RTN","PRSASR",168,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRSASR",169,0)
 ;
"RTN","PRSASR",170,0)
HDR ; Display Header
"RTN","PRSASR",171,0)
 I HDR S QT=$$ASK^PRSLIB00() Q:QT
"RTN","PRSASR",172,0)
 S X=$G(^PRSPC(DFN,0)) W !,@IOF,?3,$P(X,"^",1) S X=$P(X,"^",9) I X W ?68,$E(X),"XX-XX-",$E(X,6,9) S HDR=1
"RTN","PRSASR",173,0)
 W !,?6,"Date",?20,"Scheduled Tour",?40,"Tour Exceptions",?63,IORVON,"Tour Errors",IORVOFF
"RTN","PRSASR",174,0)
 W !?3 F I=1:1:72 W "-"
"RTN","PRSASR",175,0)
 Q
"RTN","PRSASR",176,0)
 ;====================================================================
"RTN","PRSASR",177,0)
HDR2 ; Display Header don't quit
"RTN","PRSASR",178,0)
 N HOLD
"RTN","PRSASR",179,0)
 S HOLD=$$ASK^PRSLIB00(1)
"RTN","PRSASR",180,0)
 S X=$G(^PRSPC(DFN,0)) W !,@IOF,?3,$P(X,"^",1) S X=$P(X,"^",9) I X W ?68,$E(X),"XX-XX-",$E(X,6,9)
"RTN","PRSASR",181,0)
 W !,?6,"Date",?20,"Scheduled Tour",?40,"Tour Exceptions",?63,IORVON,"Tour Errors",IORVOFF
"RTN","PRSASR",182,0)
 W !?3 F I=1:1:72 W "-"
"RTN","PRSASR",183,0)
 Q
"RTN","PRSASR",184,0)
 ;====================================================================
"RTN","PRSASR",185,0)
 ;
"RTN","PRSASR",186,0)
EX ; clean up variables & unlock any leftover time card nodes
"RTN","PRSASR",187,0)
 N EMPREC
"RTN","PRSASR",188,0)
 S EMPREC=""
"RTN","PRSASR",189,0)
 F  S EMPREC=$O(^TMP($J,"LOCK",EMPREC))  Q:EMPREC=""  D
"RTN","PRSASR",190,0)
 .  S GLOB="^PRST(458,"_PPI_","_"""E"""_","_EMPREC_",0)"
"RTN","PRSASR",191,0)
 .  D UNLOCK^PRSLIB00(GLOB)
"RTN","PRSASR",192,0)
 K ^TMP($J) G KILL^XUSCLEAN
"RTN","PRSASR",193,0)
 Q
"RTN","PRSASR",194,0)
 ;
"RTN","PRSASR",195,0)
 ;
"RTN","PRSASR",196,0)
 ;These extrinsic functions simply remove lengthy code from long, 
"RTN","PRSASR",197,0)
 ;single line, nested loop.
"RTN","PRSASR",198,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",199,0)
TLSUP() ;get next supervisor who certifies other supervisors
"RTN","PRSASR",200,0)
 Q $O(^PRST(455.5,"ASX",TLE,VA2))
"RTN","PRSASR",201,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",202,0)
SSN() ;get ssn of supervisor to be certified by this supervisor.
"RTN","PRSASR",203,0)
 Q $P($G(^VA(200,VA2,1)),"^",9)
"RTN","PRSASR",204,0)
 ;     ---------------------------------------------------
"RTN","PRSASR",205,0)
DFN() ;get internal entry number of supvisor of other T&L 2b approved
"RTN","PRSASR",206,0)
 ;by current supervisor.
"RTN","PRSASR",207,0)
 Q $O(^PRSPC("SSN",SSN,0))
"RTN","PRSASR",208,0)
 ;====================================================================
"RTN","PRSASR",209,0)
TOURERR(DTE,X9,XF) ;DISPLAY TOUR & ERRORS
"RTN","PRSASR",210,0)
 ;
"RTN","PRSASR",211,0)
 N IORVOFF,IORVON,RESP,ERRLEN
"RTN","PRSASR",212,0)
 S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","PRSASR",213,0)
 D F1^PRSADP1,^PRSATPE
"RTN","PRSASR",214,0)
 F K=1:1 Q:'$D(Y1(K))&'$D(Y2(K))  D
"RTN","PRSASR",215,0)
 . I $Y>(IOSL-4) D HDR2
"RTN","PRSASR",216,0)
 . W:K>1 !
"RTN","PRSASR",217,0)
 . W:$D(Y1(K)) ?21,Y1(K)
"RTN","PRSASR",218,0)
 . W:$P($G(Y2(K)),"^")'="" ?45,$P(Y2(K),"^",1)
"RTN","PRSASR",219,0)
 . I $P($G(Y2(K)),"^",2)'="" W:$X>44 ! W ?45,$P(Y2(K),"^",2)
"RTN","PRSASR",220,0)
 W:Y3'="" !?10,Y3
"RTN","PRSASR",221,0)
 I $D(ER) S:FATAL XF=1 F K=0:0 S K=$O(ER(K)) Q:K<1  D
"RTN","PRSASR",222,0)
 . I $Y>(IOSL-4) D HDR2
"RTN","PRSASR",223,0)
 .W:X9!($X>55) ! S ERRLEN=23
"RTN","PRSASR",224,0)
 .I $P(ER(K),"^",2)'="" S ERRLEN=$L(ER(K))
"RTN","PRSASR",225,0)
 .W ?(IOM-(ERRLEN+1)),IORVON
"RTN","PRSASR",226,0)
 .W:$P(ER(K),"^",2)'="" $P(ER(K),"^",2)
"RTN","PRSASR",227,0)
 .W " ",$P(ER(K),"^",1),IORVOFF
"RTN","PRSASR",228,0)
 .S X9=0 S:'XF ^TMP($J,"X",DFN,DAY_" "_K)=ER(K)
"RTN","PRSASR",229,0)
 .Q
"RTN","PRSASR",230,0)
 Q
"RTN","PRSATE")
0^20^B81258209^B80705897
"RTN","PRSATE",1,0)
PRSATE ;WCIOFO/JAH - Enter/Edit Employee (emp) Tour of Duty (ToD) ;03/15/2005
"RTN","PRSATE",2,0)
 ;;4.0;PAID;**8,11,27,45,55,93,112**;Sep 21, 1995;Build 54
"RTN","PRSATE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATE",4,0)
 N PPI,PPE,PRSTLV,TLI,TLE,DFN
"RTN","PRSATE",5,0)
 ;
"RTN","PRSATE",6,0)
 ;    PPI =  pay period (pp) internal #.
"RTN","PRSATE",7,0)
 ;    PPE = pp external form (99-06).
"RTN","PRSATE",8,0)
 ;    PRSTLV = flag indicates timekeeper (TK) in T&L lookup ^PRSAUTL.
"RTN","PRSATE",9,0)
 ;    TLI = T&L unit internal #.
"RTN","PRSATE",10,0)
 ;    TLU = T&L unit # 3-digit
"RTN","PRSATE",11,0)
 ;
"RTN","PRSATE",12,0)
 ;  -Get current pp-internal & external.  -Ask user for T&L.
"RTN","PRSATE",13,0)
 ;  -Loop to ask for emp until TK is done.
"RTN","PRSATE",14,0)
 ;  --Emp lookup screens emps not in T&L returned by PRSAUTL call.
"RTN","PRSATE",15,0)
 ;
"RTN","PRSATE",16,0)
 S PRSTLV=2 D ^PRSAUTL Q:TLI<1
"RTN","PRSATE",17,0)
 F  S DFN=$$GETEMP^PRSATE6(TLE) Q:DFN<1  D
"RTN","PRSATE",18,0)
 .    S PPI=$P(^PRST(458,0),"^",3),PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",19,0)
 .    D TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV)
"RTN","PRSATE",20,0)
 Q
"RTN","PRSATE",21,0)
 ;=======================
"RTN","PRSATE",22,0)
 ;
"RTN","PRSATE",23,0)
TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV) ;
"RTN","PRSATE",24,0)
 ;
"RTN","PRSATE",25,0)
 N C0,NH,FLX,PMP,PP,PB,ENT,SRT,WTL,TYP,Z,TD,ERROR,NOERROR
"RTN","PRSATE",26,0)
 ;
"RTN","PRSATE",27,0)
 ;   Entitlement lookup leaks many variables.  Following R used in 
"RTN","PRSATE",28,0)
 ;   this routine but may be looked up again despite the fact they R 
"RTN","PRSATE",29,0)
 ;   leaked by ^PRSAENT.  See PRSAENT for further doc.
"RTN","PRSATE",30,0)
 ;
"RTN","PRSATE",31,0)
 ;    C0=emps 0 node in file 450    NH= emps 8B normal hrs
"RTN","PRSATE",32,0)
 ;    FLX= compressed/flextime code (0=none,C=compressed,F=flextime)
"RTN","PRSATE",33,0)
 ;    PMP= premium pay indicator 
"RTN","PRSATE",34,0)
 ;      ( D=entitled Sun., F=entitled Sat./Sun.,
"RTN","PRSATE",35,0)
 ;        E=entitled variable Sat./Sun. premium pay,
"RTN","PRSATE",36,0)
 ;        G=entitled variable Sun. prem pay, X=title 5 emps
"RTN","PRSATE",37,0)
 ;        R,C,O=different types of firefighters)
"RTN","PRSATE",38,0)
 ;  * PP= emps pay plan
"RTN","PRSATE",39,0)
 ;    DB = pay basis-1:full,2:part,3:intermit
"RTN","PRSATE",40,0)
 ;    ENT= 39 char entitlement string
"RTN","PRSATE",41,0)
 ;
"RTN","PRSATE",42,0)
 ;  Entitlement lookup.
"RTN","PRSATE",43,0)
 ;
"RTN","PRSATE",44,0)
 D ^PRSAENT I ENT="" D ERROR(1) S OUT=1 Q
"RTN","PRSATE",45,0)
 ;
"RTN","PRSATE",46,0)
 ; Display header/Ask pp (NOL^PRSATE2 returns SRT = Current, Next, Last)
"RTN","PRSATE",47,0)
 ;
"RTN","PRSATE",48,0)
 D NOW^%DTC S NOW=% K %
"RTN","PRSATE",49,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSATE",50,0)
 W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSATE",51,0)
 W !?29,"EMPLOYEE TOUR OF DUTY"
"RTN","PRSATE",52,0)
 D HDR^PRSADP1,NOL^PRSATE2
"RTN","PRSATE",53,0)
 Q:SRT="^"
"RTN","PRSATE",54,0)
 I SRT="L" S PPI=PPI-1,PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",55,0)
 ;
"RTN","PRSATE",56,0)
 ;  Get emp's flexitime code
"RTN","PRSATE",57,0)
 ;
"RTN","PRSATE",58,0)
 S FLX=$$FLEXIND^PRSATE6(PPI,DFN,SRT)
"RTN","PRSATE",59,0)
 ;
"RTN","PRSATE",60,0)
 ;  Is emp entitled reg. shed. hrs.?
"RTN","PRSATE",61,0)
 ;
"RTN","PRSATE",62,0)
 I $E(ENT,1)="0" D
"RTN","PRSATE",63,0)
 .  S Z=$E(ENT,2),TD=$S(Z="D":3,1:4) D NONE
"RTN","PRSATE",64,0)
 E  D
"RTN","PRSATE",65,0)
 .;
"RTN","PRSATE",66,0)
 .;    initialize t&l for this ToD
"RTN","PRSATE",67,0)
 .;
"RTN","PRSATE",68,0)
 .  S WTL=TLI
"RTN","PRSATE",69,0)
 .  I "NL"[SRT D
"RTN","PRSATE",70,0)
 ..    S TYP=0
"RTN","PRSATE",71,0)
 .  E  D
"RTN","PRSATE",72,0)
 ..    S TYP=$$ISTEMPTR()
"RTN","PRSATE",73,0)
 ..;
"RTN","PRSATE",74,0)
 ..;  For temp ToDs--ask user for T&L ToD will be worked
"RTN","PRSATE",75,0)
 ..;  Quit if we don't get a valid T&L unit.
"RTN","PRSATE",76,0)
 ..;
"RTN","PRSATE",77,0)
 ..    I TYP S WTL=$$ASKTLWRK^PRSATE6(TLE)
"RTN","PRSATE",78,0)
 .;
"RTN","PRSATE",79,0)
 .;  Save current ToD in case user aborts with an unacceptable ToD.
"RTN","PRSATE",80,0)
 .;
"RTN","PRSATE",81,0)
 .   D SAVETOUR^PRSATE6(PPI,DFN)
"RTN","PRSATE",82,0)
 .;
"RTN","PRSATE",83,0)
 .  I WTL'<1,TYP'["^" D 
"RTN","PRSATE",84,0)
 ..    D A1
"RTN","PRSATE",85,0)
 ..;
"RTN","PRSATE",86,0)
 ..; verify firefighter ToD after compressed ind. edit.  Don't accept 
"RTN","PRSATE",87,0)
 ..; ToD until its within guidlines. If TK force exits, restore old ToD.
"RTN","PRSATE",88,0)
 ..;
"RTN","PRSATE",89,0)
 ..  S NOERROR=0
"RTN","PRSATE",90,0)
 ..  F  D  Q:NOERROR
"RTN","PRSATE",91,0)
 ...    N ERROR D FFTOUR^PRSATE6(PPI,DFN,SRT,.ERROR)
"RTN","PRSATE",92,0)
 ...    I $$ISERRORS^PRSATE6(.ERROR) D
"RTN","PRSATE",93,0)
 ....      I $$ASKTOFIX^PRSATE6() D
"RTN","PRSATE",94,0)
 .....        D A1
"RTN","PRSATE",95,0)
 ....      E  D
"RTN","PRSATE",96,0)
 .....        D RESTORE^PRSATE6(PPI,DFN) S NOERROR=1
"RTN","PRSATE",97,0)
 ...    E  D
"RTN","PRSATE",98,0)
 ....      S NOERROR=1
"RTN","PRSATE",99,0)
 K NOW Q
"RTN","PRSATE",100,0)
 ;=======================
"RTN","PRSATE",101,0)
 ;
"RTN","PRSATE",102,0)
ISTEMPTR() ; IS TEMPORARY ToD ?
"RTN","PRSATE",103,0)
 ; Ask user if ToD is temp or perm & convert TYP to true false flag
"RTN","PRSATE",104,0)
 ;    Permanent set TYP=0,  Temporary set TYP=true (1)
"RTN","PRSATE",105,0)
 ; 
"RTN","PRSATE",106,0)
 S TYP=$$ASKTEMP^PRSATE6() I TYP'["^" S TYP=$E(TYP,1)="T",WTL=TLI
"RTN","PRSATE",107,0)
 Q TYP
"RTN","PRSATE",108,0)
 ;=======================
"RTN","PRSATE",109,0)
 ;
"RTN","PRSATE",110,0)
A1 ; Set up for emps ToD look up. Screen allows Daily ToDs & days off 
"RTN","PRSATE",111,0)
 ; for daily emps.  Everyone else gets days off & all other ToDs.
"RTN","PRSATE",112,0)
 ; Screen further ensures ToD is available either to all t&ls 
"RTN","PRSATE",113,0)
 ; or to t&l that this emp is working in.
"RTN","PRSATE",114,0)
 ;
"RTN","PRSATE",115,0)
 N DIC,X
"RTN","PRSATE",116,0)
 S DIC="^PRST(457.1,",DIC(0)="AEQMN"
"RTN","PRSATE",117,0)
 S DIC("S")="I "_$S($E(ENT,1)="D":"Y<3",1:"Y>5!(Y=1)")_",$P(^PRST(457.1,+Y,0),U,4)!($D(^PRST(457.1,+Y,""T"",""B"",WTL)))"
"RTN","PRSATE",118,0)
 ;
"RTN","PRSATE",119,0)
 ; Setup a fixed or varying ToD.  Compressed ToDs must be varying;
"RTN","PRSATE",120,0)
 ; ask TK about all others.
"RTN","PRSATE",121,0)
 ;
"RTN","PRSATE",122,0)
 S DB=$P(C0,U,10) I FLX="C"!("KM"[PP&(DB=1)&(NH=72)) D
"RTN","PRSATE",123,0)
 .   D VAR
"RTN","PRSATE",124,0)
 E  D
"RTN","PRSATE",125,0)
 .  S X=$$ASKFIXED()
"RTN","PRSATE",126,0)
 .  Q:X="^"
"RTN","PRSATE",127,0)
 .  I X="N" D
"RTN","PRSATE",128,0)
 ..    D VAR
"RTN","PRSATE",129,0)
 .  E  D FX
"RTN","PRSATE",130,0)
 K DB Q
"RTN","PRSATE",131,0)
 ;=======================
"RTN","PRSATE",132,0)
 ;
"RTN","PRSATE",133,0)
FX ; Fixed ToD
"RTN","PRSATE",134,0)
 S DIC("A")="Select TOUR OF DUTY: "
"RTN","PRSATE",135,0)
 W ! D ^DIC
"RTN","PRSATE",136,0)
 Q:Y'>0
"RTN","PRSATE",137,0)
 S TD=+Y,Y=$G(^PRST(457.1,TD,1)),TDH=$P(^(0),"^",6),HRS=TDH*10
"RTN","PRSATE",138,0)
 S (ZENT,STR)=""
"RTN","PRSATE",139,0)
 D OT^PRSATP,VS^PRSATE0
"RTN","PRSATE",140,0)
 I STR'="" W *7,!!,STR G FX
"RTN","PRSATE",141,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",142,0)
 I SRT="N" D
"RTN","PRSATE",143,0)
 .  D F1
"RTN","PRSATE",144,0)
 E  D
"RTN","PRSATE",145,0)
 .  F DAY=2:1:6,9:1:13 D SET
"RTN","PRSATE",146,0)
 .  S TD=1,(Y,TDH)="" F DAY=1,7,8,14 D SET
"RTN","PRSATE",147,0)
 .  W "  ... done" D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",148,0)
 .  D T2,^PRSATE5
"RTN","PRSATE",149,0)
 D HOL,RS K HRS,STR
"RTN","PRSATE",150,0)
 Q
"RTN","PRSATE",151,0)
 ;=======================
"RTN","PRSATE",152,0)
 ;
"RTN","PRSATE",153,0)
F1 F DAY=2:1:6,9:1:13 D NX
"RTN","PRSATE",154,0)
 S TD=1 F DAY=1,7,8,14 D NX
"RTN","PRSATE",155,0)
 W "  ... done"
"RTN","PRSATE",156,0)
 D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",157,0)
 Q
"RTN","PRSATE",158,0)
 ;=======================
"RTN","PRSATE",159,0)
 ;
"RTN","PRSATE",160,0)
VAR ; Variable ToD
"RTN","PRSATE",161,0)
 D ^PRSATE0
"RTN","PRSATE",162,0)
 I SRT'="N" D T2,^PRSATE5
"RTN","PRSATE",163,0)
 D HOL,RS
"RTN","PRSATE",164,0)
 Q
"RTN","PRSATE",165,0)
 ;=======================
"RTN","PRSATE",166,0)
 ;
"RTN","PRSATE",167,0)
NONE ; No ToD
"RTN","PRSATE",168,0)
 N TYP2,UPDT,Y,TDH
"RTN","PRSATE",169,0)
 W !!,"This is an intermittent employee with no specified tour."
"RTN","PRSATE",170,0)
 W !!,"Time records will now be updated to indicate this."
"RTN","PRSATE",171,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",172,0)
 I '$$PERM^PRSALIB(PPI,DFN) D
"RTN","PRSATE",173,0)
 .  W !!,"Not all tour days are assigned a permanent status."
"RTN","PRSATE",174,0)
 .  I $$UPDTQ^PRSALIB(),$$TMPST^PRSALIB(.TYP2) D UPDSTAT^PRSALIB(PPI,DFN,TYP2)
"RTN","PRSATE",175,0)
 S (Y,TDH)="",TYP=0,WTL=TLI
"RTN","PRSATE",176,0)
 I SRT="N" D
"RTN","PRSATE",177,0)
 .  F DAY=1:1:14 D NX
"RTN","PRSATE",178,0)
 E  D
"RTN","PRSATE",179,0)
 .  F DAY=1:1:14 D SET
"RTN","PRSATE",180,0)
 W "  ... done"
"RTN","PRSATE",181,0)
 D HOL,RS
"RTN","PRSATE",182,0)
 Q
"RTN","PRSATE",183,0)
 ;=======================
"RTN","PRSATE",184,0)
 ;
"RTN","PRSATE",185,0)
RS ; Get Comp Ind
"RTN","PRSATE",186,0)
 S Y=$G(^PRST(458,PPI,"E",DFN,0))
"RTN","PRSATE",187,0)
 S FLX=$S((SRT="N")&($P(Y,U,7)]""):$P(Y,U,7),1:$P(Y,U,6))
"RTN","PRSATE",188,0)
 S DIR(0)="SAM^C:Compressed;F:Flexitime;0:None"
"RTN","PRSATE",189,0)
 S DIR("A")="Compressed Tour Indicator: "
"RTN","PRSATE",190,0)
 S DIR("B")=$S(FLX="C":"Compressed",FLX="F":"Flexitime",1:"None")
"RTN","PRSATE",191,0)
 D ^DIR K DIR I "^C^F^0^"'[(U_Y_U) S Y=FLX
"RTN","PRSATE",192,0)
 ;
"RTN","PRSATE",193,0)
 ;  Intermittent employee cannot have compressed tour.
"RTN","PRSATE",194,0)
 ;
"RTN","PRSATE",195,0)
 I $P(C0,U,10)=3,Y="C" D  G RS
"RTN","PRSATE",196,0)
 .   W *7,!?5,"Compressed tour not valid for this employee."
"RTN","PRSATE",197,0)
 ;
"RTN","PRSATE",198,0)
 I Y="F" S Z=0 D  I Z G RS
"RTN","PRSATE",199,0)
 .S PAY=$P(C0,U,21),PB=$P(C0,U,20)
"RTN","PRSATE",200,0)
 .I "0123456789GU"'[PAY S Z=1
"RTN","PRSATE",201,0)
 .I PAY="G",PB'=2 S Z=1
"RTN","PRSATE",202,0)
 .I PAY="U","27EXT"'[PB S Z=1
"RTN","PRSATE",203,0)
 .I Z W *7,!?5,"Flexitime not valid for this employee."
"RTN","PRSATE",204,0)
 .Q
"RTN","PRSATE",205,0)
 S $P(^PRST(458,PPI,"E",DFN,0),U,$S(SRT="N":7,1:6))=Y
"RTN","PRSATE",206,0)
 I $D(^PRST(458,"ATC",DFN)) D UPD^PRSASAL
"RTN","PRSATE",207,0)
 K PAY,ZENT Q
"RTN","PRSATE",208,0)
 ;=======================
"RTN","PRSATE",209,0)
 ;
"RTN","PRSATE",210,0)
NX ; Set Next ToD
"RTN","PRSATE",211,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",212,0)
 Q:$P(Z,"^",2)=TD&('$P(Z,"^",3))
"RTN","PRSATE",213,0)
 ;
"RTN","PRSATE",214,0)
 S $P(Z,"^",3,4)="2^"_TD,$P(Z,"^",10,11)=DUZ_"^"_NOW
"RTN","PRSATE",215,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z,^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",216,0)
 Q
"RTN","PRSATE",217,0)
 ;=======================
"RTN","PRSATE",218,0)
 ;
"RTN","PRSATE",219,0)
SET ; Set ToD
"RTN","PRSATE",220,0)
 N ZLASTPP
"RTN","PRSATE",221,0)
 S U="^"
"RTN","PRSATE",222,0)
 ;
"RTN","PRSATE",223,0)
 ; Get Zero node of emp pp rec, Old ToD, & Prior scheduled ToD.
"RTN","PRSATE",224,0)
 ; ZLASTPP is true if a ToD present on this day last pp.
"RTN","PRSATE",225,0)
 ;
"RTN","PRSATE",226,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",227,0)
 S ZLASTPP=$P($G(^PRST(458,PPI-1,"E",DFN,"D",DAY,0)),U,2)'=""
"RTN","PRSATE",228,0)
 S OLD=$P(Z,U,2),SCH=$P(Z,U,4)
"RTN","PRSATE",229,0)
 ;
"RTN","PRSATE",230,0)
 ; Quit if old ToD=this ToD & emp rec start/stop=ToD file start/stop.
"RTN","PRSATE",231,0)
 ;
"RTN","PRSATE",232,0)
 Q:(OLD=TD)&($G(^PRST(458,PPI,"E",DFN,"D",DAY,1))=Y)
"RTN","PRSATE",233,0)
 ;
"RTN","PRSATE",234,0)
 ; Z is updated with new ToD info & replaces the emp ToD record.
"RTN","PRSATE",235,0)
 ;
"RTN","PRSATE",236,0)
 S $P(Z,U,8)=TDH
"RTN","PRSATE",237,0)
 S $P(Z,U,10,11)=DUZ_U_NOW
"RTN","PRSATE",238,0)
 I $P(Z,U,12) S $P(Z,U,12)="" ; remove holiday flag
"RTN","PRSATE",239,0)
 ;
"RTN","PRSATE",240,0)
 ; Temp ToD, store T&L ToD will be worked if it's not emp's usual t&l.
"RTN","PRSATE",241,0)
 ;
"RTN","PRSATE",242,0)
 I TYP S:TLI'=WTL $P(Z,U,9)=WTL
"RTN","PRSATE",243,0)
 ;
"RTN","PRSATE",244,0)
 ; No existing ToD on this day.
"RTN","PRSATE",245,0)
 ;
"RTN","PRSATE",246,0)
 I OLD="" D
"RTN","PRSATE",247,0)
 .  S $P(Z,U,1,3)=DAY_U_TD_U_TYP
"RTN","PRSATE",248,0)
 .  I ZLASTPP D S0
"RTN","PRSATE",249,0)
 E  D
"RTN","PRSATE",250,0)
 .;
"RTN","PRSATE",251,0)
 .;  clean out postings and other ToD info since ToD is changing
"RTN","PRSATE",252,0)
 .;
"RTN","PRSATE",253,0)
 .  D CLEANTOD(PPI,DFN,DAY,TD)
"RTN","PRSATE",254,0)
 .;
"RTN","PRSATE",255,0)
 .;
"RTN","PRSATE",256,0)
 .;
"RTN","PRSATE",257,0)
 .  S:SCH $P(Z,U,5,7)="^^"
"RTN","PRSATE",258,0)
 .  I SCH="" D
"RTN","PRSATE",259,0)
 ..    S $P(Z,U,2,4)=TD_U_TYP_U_OLD
"RTN","PRSATE",260,0)
 ..    D S0
"RTN","PRSATE",261,0)
 .  E  D
"RTN","PRSATE",262,0)
 ..    I SCH=TD D
"RTN","PRSATE",263,0)
 ...      S $P(Z,U,2,4)=TD_"^^"
"RTN","PRSATE",264,0)
 ...      K ^PRST(458,"ATC",DFN,PPI,DAY)
"RTN","PRSATE",265,0)
 ..    E  D
"RTN","PRSATE",266,0)
 ...      S $P(Z,U,2,3)=TD_U_TYP
"RTN","PRSATE",267,0)
 ...      D S0
"RTN","PRSATE",268,0)
 ;
"RTN","PRSATE",269,0)
 D S1
"RTN","PRSATE",270,0)
 K OLD,SCH Q
"RTN","PRSATE",271,0)
 ;=======================
"RTN","PRSATE",272,0)
 ;
"RTN","PRSATE",273,0)
 ; Set up x-ref for supervisor approval of ToD change
"RTN","PRSATE",274,0)
 ;
"RTN","PRSATE",275,0)
S0 S ^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",276,0)
 Q
"RTN","PRSATE",277,0)
 ;=======================
"RTN","PRSATE",278,0)
 ;
"RTN","PRSATE",279,0)
S1 ;
"RTN","PRSATE",280,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z S:Y'="" ^(1)=Y
"RTN","PRSATE",281,0)
 Q
"RTN","PRSATE",282,0)
 ;=======================
"RTN","PRSATE",283,0)
 ;
"RTN","PRSATE",284,0)
T2 ; Ask if second ToD
"RTN","PRSATE",285,0)
 N X
"RTN","PRSATE",286,0)
 ;
"RTN","PRSATE",287,0)
 ;  Don't ask for Daily ToDs
"RTN","PRSATE",288,0)
 ;
"RTN","PRSATE",289,0)
 Q:$E(ENT,1)="D"
"RTN","PRSATE",290,0)
 ;
"RTN","PRSATE",291,0)
 S X=$$ASK2NDTR()
"RTN","PRSATE",292,0)
 Q:X'="Y"  G ^PRSATE4
"RTN","PRSATE",293,0)
 ;=======================
"RTN","PRSATE",294,0)
 ;
"RTN","PRSATE",295,0)
HOL ; Determine if Holiday within ToD
"RTN","PRSATE",296,0)
 N DAY
"RTN","PRSATE",297,0)
 D ^PRSAPPH
"RTN","PRSATE",298,0)
 Q:'$D(HOL)
"RTN","PRSATE",299,0)
 S TT="HX",DUP=1
"RTN","PRSATE",300,0)
 D E^PRSAPPH K DUP,HOL,TT
"RTN","PRSATE",301,0)
 Q
"RTN","PRSATE",302,0)
 ;=======================
"RTN","PRSATE",303,0)
 ;
"RTN","PRSATE",304,0)
CLEANTOD(PPI,DFN,DAY,TD) ; CLEAN OUT TOUR
"RTN","PRSATE",305,0)
 N PRSDT,MIEN
"RTN","PRSATE",306,0)
 K ^PRST(458,PPI,"E",DFN,"D",DAY,1),^(2),^(3),^(10) I TD<5 K ^(4) S $P(Z,U,13,15)="^^"
"RTN","PRSATE",307,0)
 ; if employee is PTP with active memo then reset the ESR day
"RTN","PRSATE",308,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSATE",309,0)
 S MIEN=$$MIEN^PRSPUT1(DFN,PRSDT)
"RTN","PRSATE",310,0)
 I MIEN D
"RTN","PRSATE",311,0)
 . N PRSFDA
"RTN","PRSATE",312,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",146)="3" ; status = resubmit
"RTN","PRSATE",313,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",148)="Tour Changed" ; remarks
"RTN","PRSATE",314,0)
 . D FILE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSATE",315,0)
 Q
"RTN","PRSATE",316,0)
 ;=======================
"RTN","PRSATE",317,0)
 ;
"RTN","PRSATE",318,0)
ERROR(NUM,VAR1,VAR2) ;
"RTN","PRSATE",319,0)
 W *7,!!
"RTN","PRSATE",320,0)
 I NUM=1 W "Employee has no Pay Entitlement table entry."
"RTN","PRSATE",321,0)
 I NUM=2 D
"RTN","PRSATE",322,0)
 .  Q:$G(NH)=112
"RTN","PRSATE",323,0)
 .  W "Warning: Normal Hours are ",$G(VAR1),"; Tour Hours are ",$G(VAR2)
"RTN","PRSATE",324,0)
 Q
"RTN","PRSATE",325,0)
 ;=======================
"RTN","PRSATE",326,0)
 ;
"RTN","PRSATE",327,0)
ASKFIXED() ;GET USER'S YES OR NO RESPONSE TO FIXED ToD QUESTION
"RTN","PRSATE",328,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",329,0)
 S DIR("A")="Do you wish to enter a fixed Mon-Fri Tour"
"RTN","PRSATE",330,0)
 S DIR(0)="Y"
"RTN","PRSATE",331,0)
 S DIR("?")="Answer NO to create any other type of tour."
"RTN","PRSATE",332,0)
 S DIR("?",1)="Fixed tours are Monday - Friday with the same hours."
"RTN","PRSATE",333,0)
 D ^DIR
"RTN","PRSATE",334,0)
 Q $S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",335,0)
 ;=======================
"RTN","PRSATE",336,0)
 ;
"RTN","PRSATE",337,0)
ASK2NDTR() ;GET USER'S YES OR NO RESPONSE TO 2nd ToD QUESTION
"RTN","PRSATE",338,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",339,0)
 S DIR("A")="Do you wish to enter a Second Tour for any Day"
"RTN","PRSATE",340,0)
 S DIR(0)="Y"
"RTN","PRSATE",341,0)
 S DIR("B")="N"
"RTN","PRSATE",342,0)
 S DIR("?",1)="Answer Yes to add a second tour.  No to continue."
"RTN","PRSATE",343,0)
 S DIR("?")="Enter ^ to escape and cancel this tour change."
"RTN","PRSATE",344,0)
 D ^DIR
"RTN","PRSATE",345,0)
 Q $S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",346,0)
 ;=======================
"RTN","PRSATE",347,0)
 ;
"RTN","PRSATE0")
0^21^B9347970^B5165179
"RTN","PRSATE0",1,0)
PRSATE0 ; HISC/REL-Edit Variable Tours ;5/30/95  14:37
"RTN","PRSATE0",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSATE0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATE0",4,0)
 S TOLD="" F K=1:1:14 S Z=$P($G(^PRST(458,PPI,"E",DFN,"D",K,0)),"^",2),$P(TOLD,"^",K)=Z I SRT="N",$P($G(^(0)),"^",3) S $P(TOLD,"^",K)=$P(^(0),"^",4)
"RTN","PRSATE0",5,0)
 K K S ^PRST(458,PPI,"E",DFN,"T")=TOLD D DT^PRSATE2
"RTN","PRSATE0",6,0)
 K DDSFILE,DA,DR,PRSAERR S DDSFILE=458,DDSFILE(1)=458.01,DA(1)=PPI,DA=DFN
"RTN","PRSATE0",7,0)
 S DR="[PRSA TE EDIT]" D ^DDS K DS Q:$D(PRSAERR)
"RTN","PRSATE0",8,0)
 S TNEW=$G(^PRST(458,PPI,"E",DFN,"T")) K ^PRST(458,PPI,"E",DFN,"T")
"RTN","PRSATE0",9,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE0",10,0)
 F DAY=1:1:14 S TD=$P(TNEW,"^",DAY) I TD>0 D S1
"RTN","PRSATE0",11,0)
 K TNEW,TOLD Q
"RTN","PRSATE0",12,0)
S1 ; Set Tour if necessary
"RTN","PRSATE0",13,0)
 I TD=$P(TOLD,"^",DAY),$G(^PRST(457.1,+TD,1))=$G(^PRST(457.1,+$P(TOLD,"^",DAY),1)) Q
"RTN","PRSATE0",14,0)
 I SRT'="N" S Y=$G(^PRST(457.1,TD,1)),TDH=$P(^(0),"^",6) D SET^PRSATE Q
"RTN","PRSATE0",15,0)
 D NX^PRSATE Q
"RTN","PRSATE0",16,0)
VS ; Validate tour segments
"RTN","PRSATE0",17,0)
 S TRG=0 F K=1:3:19 Q:$P(Y,"^",K)=""  S Z=$P(Y,"^",K+2) S:'Z TRG=1 I Z D
"RTN","PRSATE0",18,0)
 .S Z=$P($G(^PRST(457.2,Z,0)),"^",2) I Z="RG" S TRG=1 Q
"RTN","PRSATE0",19,0)
 .I ZENT'[Z S STR="Tour Indicator contains type of time to which employee is not entitled."
"RTN","PRSATE0",20,0)
 .Q
"RTN","PRSATE0",21,0)
 Q
"RTN","PRSATE0",22,0)
VAL ; Validate Tour
"RTN","PRSATE0",23,0)
 N NAWS,SNAWS,TDT S (ZENT,STR)="" K PRSAERR D OT^PRSATP S DB=$P(C0,U,10) I "KM"[PP,DB=1,NH=72 S NAWS=1
"RTN","PRSATE0",24,0)
 S (HRS,TRS,TDT)=0 F DAY=1:1:14 D  I STR'="" G V1
"RTN","PRSATE0",25,0)
 .S TD=$$GET^DDSVAL(DIE,.DA,DAY+200),Z=$P($G(^PRST(457.1,+TD,0)),"^",6) S:Z HRS=HRS+Z S Y=$G(^(1))
"RTN","PRSATE0",26,0)
 .I DAY=7!(DAY=14)&'TDT S TDT=$P($G(^PRST(457.1,+TD,0)),U,5)="Y"
"RTN","PRSATE0",27,0)
 .I $D(NAWS) S:Z'=12&Z NAWS=0 S $P(SNAWS,U,DAY)=TD I Z=12 S NAWS(DAY-1\7+1)=$G(NAWS(DAY-1\7+1))+1
"RTN","PRSATE0",28,0)
 .D VS S:TRG TRS=TRS+1
"RTN","PRSATE0",29,0)
 I FLX="C",TRS>9 S STR="Warning: Compressed Schedule has more than 9 Tours!" D HLP^DDSUTL(.STR)
"RTN","PRSATE0",30,0)
 I NH'=HRS,NH'=112 S STR="Warning: Normal Hours are "_NH_"; Tour Hours are "_HRS D HLP^DDSUTL(.STR)
"RTN","PRSATE0",31,0)
 I $D(NAWS) D
"RTN","PRSATE0",32,0)
 .I $G(NAWS(1))'=3!($G(NAWS(2))'=3)!'NAWS S STR=$P($T(NAWS1),";",3) D HLP^DDSUTL(.STR)
"RTN","PRSATE0",33,0)
 .D TOURHRS^PRSARC07(.HRS,PPI,DFN,SNAWS)
"RTN","PRSATE0",34,0)
 .I $G(HRS("W1"))'=36!($G(HRS("W2"))'=36) S STR=$P($T(NAWS2),";",3) D HLP^DDSUTL(.STR)
"RTN","PRSATE0",35,0)
 .I $G(TDT) S STR=$P($T(NAWS3),";",3) D HLP^DDSUTL(.STR)
"RTN","PRSATE0",36,0)
 K K,STR,TRG,TRS Q
"RTN","PRSATE0",37,0)
V1 S (DDSERROR,PRSAERR)=1 D HLP^DDSUTL(.STR) K DDSERROR Q
"RTN","PRSATE0",38,0)
NAWS1 ;;Warning: There are not three 12 hour tours in week 1 and/or week 2 for this AWS 36/40 Nurse
"RTN","PRSATE0",39,0)
NAWS2 ;;Warning: Hours in week 1 and/or week 2 are not 36 for this AWS 36/40 Nurse.
"RTN","PRSATE0",40,0)
NAWS3 ;;Warning: Tour overlaps two administrative work weeks for this 36/40 Nurse.
"RTN","PRSATP")
0^29^B31400754^B31409450
"RTN","PRSATP",1,0)
PRSATP ;HISC/REL,WIRMFO/MGD/PLT - Timekeeper Post Time ;11/21/06
"RTN","PRSATP",2,0)
 ;;4.0;PAID;**22,57,69,92,102,93,112**;Sep 21, 1995;Build 54
"RTN","PRSATP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATP",4,0)
 ; input (from calling option)
"RTN","PRSATP",5,0)
 ;   PTPF - (optional) part-time physician flag, true (=1) when called
"RTN","PRSATP",6,0)
 ;          by the posting option for part-time physicians with a memo.
"RTN","PRSATP",7,0)
 ;
"RTN","PRSATP",8,0)
 N GLOB ; global reference for employee's time & attendance record.
"RTN","PRSATP",9,0)
 N PRSDT
"RTN","PRSATP",10,0)
 S PRSTLV=2 D ^PRSAUTL G:TLI<1 EX S %DT="X",X="T+3" D ^%DT
"RTN","PRSATP",11,0)
 S %DT="AEPX",%DT("A")="Posting Date: ",%DT("B")="T-1",%DT(0)=-Y W ! D ^%DT
"RTN","PRSATP",12,0)
 G:Y<1 EX S (PRSDT,D1)=Y S Y=$G(^PRST(458,"AD",D1)),PPI=$P(Y,"^",1),DAY=$P(Y,"^",2)
"RTN","PRSATP",13,0)
 I PPI="" W !!,$C(7),"Pay Period is Not Open Yet!" G EX
"RTN","PRSATP",14,0)
 S PPE=$P($G(^PRST(458,PPI,0)),"^",1),DTE=$P($G(^PRST(458,PPI,2)),"^",DAY),DTI=$P($G(^(1)),"^",DAY)
"RTN","PRSATP",15,0)
D2 W !!,"Would you like to edit the T & A RECORDs in alphabetical order" S %=1 D YN^DICN I % S LP=% G EX:%=-1,LOOP:%=1,NME
"RTN","PRSATP",16,0)
 W !!,"Answer YES if you want all RECORDs brought up for which no data"
"RTN","PRSATP",17,0)
 W !,"has been entered." G D2
"RTN","PRSATP",18,0)
 ;
"RTN","PRSATP",19,0)
 ;
"RTN","PRSATP",20,0)
LOOP ;
"RTN","PRSATP",21,0)
 S LP=1,NN=""
"RTN","PRSATP",22,0)
 F  S NN=$O(^PRSPC("ATL"_TLE,NN)) Q:NN=""  F DFN=0:0 S DFN=$O(^PRSPC("ATL"_TLE,NN,DFN)) Q:DFN<1  I $$PTPSCR(DFN,PRSDT,$G(PTPF)) S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) I 'LP G EX
"RTN","PRSATP",23,0)
 G EX
"RTN","PRSATP",24,0)
NME K DIC S DIC("A")="Select EMPLOYEE: ",DIC("S")="I $P(^(0),""^"",8)=TLE,$D(^PRST(458,PPI,""E"",+Y)),$$PTPSCR^PRSATP(+Y,PRSDT,$G(PTPF))",DIC(0)="AEQM",DIC="^PRSPC(",D="ATL"_TLE W ! D IX^DIC S DFN=+Y K DIC
"RTN","PRSATP",25,0)
 G:DFN<1 EX S GLOB="" D POST D:GLOB]"" UNLOCK^PRSLIB00(GLOB) G NME
"RTN","PRSATP",26,0)
POST S TC=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",2),TC2=$P($G(^(0)),"^",13)
"RTN","PRSATP",27,0)
 I 'TC Q:LP'=2  W !!?5,"This Employee has no tour entered for this date." Q
"RTN","PRSATP",28,0)
 I "T"'[$P($G(^PRST(458,PPI,"E",DFN,0)),"^",2) W:LP=2 $C(7),!!,"This Employee has already been sent to Payroll." Q
"RTN","PRSATP",29,0)
 S STAT=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,10)),"^",1)
"RTN","PRSATP",30,0)
 I LP=1,"1 3 4"[TC!(STAT'="") Q
"RTN","PRSATP",31,0)
 ;
"RTN","PRSATP",32,0)
 ; check if ESR is approved when posting PT Phy with memo
"RTN","PRSATP",33,0)
 I $G(PTPF),$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,7)),U)=5 D  Q:'Y!$D(DIRUT)
"RTN","PRSATP",34,0)
 . W $C(7),!
"RTN","PRSATP",35,0)
 . W !,"This day was auto-posted from an approved Electronic Subsidiary Record (ESR)."
"RTN","PRSATP",36,0)
 . W !,"Normally, changes should be accomplished by having the T & L supervisor return"
"RTN","PRSATP",37,0)
 . W !,"the ESR day to the part-time physician for correction."
"RTN","PRSATP",38,0)
 . W !,"An exception to the above is when AWOL, On Suspension, or Non-Pay must be"
"RTN","PRSATP",39,0)
 . W !,"posted, since those can not be entered via the ESR.",!
"RTN","PRSATP",40,0)
 . S DIR(0)="Y"
"RTN","PRSATP",41,0)
 . S DIR("A")="Do you want to manually post this day on the timecard"
"RTN","PRSATP",42,0)
 . S DIR("B")="NO"
"RTN","PRSATP",43,0)
 . D ^DIR K DIR
"RTN","PRSATP",44,0)
 ;
"RTN","PRSATP",45,0)
 ; lock employee record for editing by timekeeper
"RTN","PRSATP",46,0)
 I '$$AVAILREC^PRSLIB00("TK",.GLOB,.STOP) S:LP=1&$G(STOP) LP=0 Q
"RTN","PRSATP",47,0)
 D ^PRSADP1,LP,^PRSATP2,^PRSAENT
"RTN","PRSATP",48,0)
 G P0:TC>4,P0:TC=2,P0:TC=3,P3:TC=4,P1
"RTN","PRSATP",49,0)
P0 R !!,"Did Employee Only Work Scheduled Tour? ",X:DTIME S:'$T X="^^" S:X["^^" LP=0 Q:X["^"  S X=$TR(X,"yesnor","YESNOR")
"RTN","PRSATP",50,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="",X'="R" W $C(7),!?5," Answer YES or NO or R for Normal Posting with Remarks" G P0
"RTN","PRSATP",51,0)
 S X=$E(X,1) I "YR"'[X G P1
"RTN","PRSATP",52,0)
 S PTY=1 I STAT'="" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3)
"RTN","PRSATP",53,0)
 I TC=3 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,2),"^",3)="RG",STAT="T"
"RTN","PRSATP",54,0)
 I STAT'="",$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) D NOW^%DTC S NOW=%,TT="HW" D S0^PRSAPPH
"RTN","PRSATP",55,0)
 S LV="" D A2^PRSATP0:X="R" G UPD
"RTN","PRSATP",56,0)
P1 R !!,"Was Employee Absent the Entire Tour? ",X:DTIME S:'$T X="^" Q:X["^"  S X=$TR(X,"yesno","YESNO")
"RTN","PRSATP",57,0)
 S:X="" X="*" I $P("YES",X,1)'="",$P("NO",X,1)'="" W $C(7)," Answer YES or NO" G P1
"RTN","PRSATP",58,0)
 I X?1"Y".E D ^PRSATP0 Q:X["^"  G UPD
"RTN","PRSATP",59,0)
 I $E(ENT,1,2)["D" K ^PRST(458,PPI,"E",DFN,"D",DAY,2),^(3),^(10) Q
"RTN","PRSATP",60,0)
P3 S ZENT=$S($E(ENT,2)="H"&('$G(PTPF)):"RG ",$E(ENT,1,2)="00":"RG ",1:"")
"RTN","PRSATP",61,0)
 I TC=1 D OT S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&(AC="M2E") ZENT=ZENT_"HW " S ZENT=ZENT_"NP CP " G P31
"RTN","PRSATP",62,0)
 I TC=3!(TC=4) D LV S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12)&($E(ENT,22)) ZENT=ZENT_"HW " G P31
"RTN","PRSATP",63,0)
 D LV,OT S ZENT=ZENT_"TV TR " S:$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) ZENT=ZENT_"HX HW "
"RTN","PRSATP",64,0)
P31 S DDSFILE=458,DDSFILE(1)=458.02,DA(2)=PPI,DA(1)=DFN,DA=DAY
"RTN","PRSATP",65,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ZS
"RTN","PRSATP",66,0)
 S DR="[PRSA TP POST1]" D ^DDS K DS Q:'$D(ZS)
"RTN","PRSATP",67,0)
 I ZS'="" S ^PRST(458,PPI,"E",DFN,"D",DAY,2)=ZS,PTY=3 G UPD
"RTN","PRSATP",68,0)
 I $D(^PRST(458,PPI,"E",DFN,"D",DAY,2)) K ^(2),^(3),^(10)
"RTN","PRSATP",69,0)
 Q
"RTN","PRSATP",70,0)
UPD ; Update status
"RTN","PRSATP",71,0)
 D NOW^%DTC
"RTN","PRSATP",72,0)
 S $P(^PRST(458,PPI,"E",DFN,"D",DAY,10),"^",1,4)="T^"_DUZ_"^"_%_"^"_PTY
"RTN","PRSATP",73,0)
 N DAH,DBH,HOL,QUIT
"RTN","PRSATP",74,0)
 S (DAH,DBH,HOL,QUIT)=""
"RTN","PRSATP",75,0)
 ;
"RTN","PRSATP",76,0)
 ; Check to holiday encapsulated by a form a non-pay
"RTN","PRSATP",77,0)
 D HENCAP^PRSATP3(PPI,DFN,DAY,.DBH,.HOL,.DAH,.QUIT)
"RTN","PRSATP",78,0)
 Q:QUIT
"RTN","PRSATP",79,0)
 D UPDT^PRSATP3(DFN,DBH,HOL,DAH)
"RTN","PRSATP",80,0)
 K DAH,DBH,HOL,QUIT
"RTN","PRSATP",81,0)
 Q
"RTN","PRSATP",82,0)
LP W !!,"Enter '^' to bypass this employee." W:LP=1 " Enter '^^' to stop T&L editing." W ! Q
"RTN","PRSATP",83,0)
LV S Z1="30 31 31 31 32 33 28 35 35 30 36 37 38",Z2="AL SL CB AD NL WP CU AA DL RL NP CP HX"
"RTN","PRSATP",84,0)
 ;
"RTN","PRSATP",85,0)
 ; Check to see if the employee is entitled to Military Leave and add
"RTN","PRSATP",86,0)
 ; ML to list if they are.  Added to be compliant with Public Law
"RTN","PRSATP",87,0)
 ; 106-554.
"RTN","PRSATP",88,0)
 S:$E(ENT,34) Z1=Z1_" 34",Z2=Z2_" ML"
"RTN","PRSATP",89,0)
 ;9/3 month employee entitled RS with recess hours in file# 458.8
"RTN","PRSATP",90,0)
 S:$E(ENT,5)&$P($$RSHR^PRSU1B2(DFN,PPE),U,DAY>7+1) Z1=Z1_" 5",Z2=Z2_" RS"
"RTN","PRSATP",91,0)
 F K=1:1:$L(Z1," ") I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" "
"RTN","PRSATP",92,0)
 QUIT
"RTN","PRSATP",93,0)
 ;
"RTN","PRSATP",94,0)
OT ; Get entitled out-of-tour types of time
"RTN","PRSATP",95,0)
 S Z1="12 28 26",Z2="OT CT ON" F K=1:1:3 I $E(ENT,$P(Z1," ",K)) S ZENT=ZENT_$P(Z2," ",K)_" " I ZENT'["UN" S ZENT=ZENT_"UN "
"RTN","PRSATP",96,0)
 I $E(ENT,29),'$E(ENT,26) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",97,0)
 ; Allow Stand By for employees w/ Prem Pay Ind = W or V
"RTN","PRSATP",98,0)
 I $E(ENT,29),$E(ENT,26),"^W^V^"[(U_PMP_U) S ZENT=ZENT_"SB " S:ZENT'["UN" ZENT=ZENT_"UN "
"RTN","PRSATP",99,0)
 Q
"RTN","PRSATP",100,0)
EX ;clean up lock global which is set in $$AVAILREC^PRSLIB00
"RTN","PRSATP",101,0)
 K ^TMP($J,"LOCK")
"RTN","PRSATP",102,0)
 ;generic cleanup
"RTN","PRSATP",103,0)
 G KILL^XUSCLEAN
"RTN","PRSATP",104,0)
 ;
"RTN","PRSATP",105,0)
PTPSCR(PRSIEN,PSTDT,PTPF) ; part-time physician screen extrinsic function
"RTN","PRSATP",106,0)
 ; input
"RTN","PRSATP",107,0)
 ;   PRSIEN - Employee IEN (file 450)
"RTN","PRSATP",108,0)
 ;   PSTDT  - Date being posted (FileMan internal)
"RTN","PRSATP",109,0)
 ;   PTPF   - (opt) Part-time physician flag, equals true (1) when screen
"RTN","PRSATP",110,0)
 ;            should only allow selection of part-time physician with
"RTN","PRSATP",111,0)
 ;            memo and false (null or 0) when screen should only
"RTN","PRSATP",112,0)
 ;            allow selection of employees that are not part-time
"RTN","PRSATP",113,0)
 ;            physicians with memo.
"RTN","PRSATP",114,0)
 ; result
"RTN","PRSATP",115,0)
 ;   returns a boolean value (1 or 0) or null
"RTN","PRSATP",116,0)
 ;     =1 if employee passed screen
"RTN","PRSATP",117,0)
 ;        (PTPF true and employee is PTP with memo) OR
"RTN","PRSATP",118,0)
 ;        (PTPF false and employee is not PTP with memo)
"RTN","PRSATP",119,0)
 ;     =0 if employee did not pass screen
"RTN","PRSATP",120,0)
 ;     =null value if required inputs were not provided
"RTN","PRSATP",121,0)
 ;
"RTN","PRSATP",122,0)
 N PRSRET,PTPM
"RTN","PRSATP",123,0)
 S PTPF=$G(PTPF)
"RTN","PRSATP",124,0)
 S PRSRET="" ; init return
"RTN","PRSATP",125,0)
 I PRSIEN,PSTDT D
"RTN","PRSATP",126,0)
 . ; determine if employee is PT physician with memo on the posting date
"RTN","PRSATP",127,0)
 . S PTPM=$S($$MIEN^PRSPUT1(PRSIEN,PSTDT)>0:1,1:0)
"RTN","PRSATP",128,0)
 . ; apply screen
"RTN","PRSATP",129,0)
 . S PRSRET=$S(PTPF&PTPM:1,'PTPF&'PTPM:1,1:0)
"RTN","PRSATP",130,0)
 ;
"RTN","PRSATP",131,0)
 Q PRSRET
"RTN","PRSATP",132,0)
 ;
"RTN","PRSATP",133,0)
 ;PRSATP
"RTN","PRSATP1")
0^30^B16694794^B11087077
"RTN","PRSATP1",1,0)
PRSATP1 ; HISC/REL,WOIFO/PLT - Daily Post verification ;11/28/2006
"RTN","PRSATP1",2,0)
 ;;4.0;PAID;**34,57,112**;Sep 21, 1995;Build 54
"RTN","PRSATP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATP1",4,0)
 ;routine is called to validate data entered during the 
"RTN","PRSATP1",5,0)
 ;screenman posting of an employees pay period
"RTN","PRSATP1",6,0)
 ;
"RTN","PRSATP1",7,0)
 K T S ZS="",TWO=$P($G(^PRST(457.1,+TC,0)),"^",5),DY2=TWO="Y" I TC2,'DY2 S TWO=$P($G(^PRST(457.1,+TC2,0)),"^",5),DY2=TWO="Y"
"RTN","PRSATP1",8,0)
 F K=1:4:25 I $P(Z,"^",K)'="" D
"RTN","PRSATP1",9,0)
 .S X=$P(Z,"^",K)_"^"_$P(Z,"^",K+1) I $P(Z,"^",K+1)="" D E8 Q
"RTN","PRSATP1",10,0)
 .D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V0
"RTN","PRSATP1",11,0)
 .I Z2>1440,TWO'="Y","OT CT SB ON UA"'[$P(Z,"^",K+2) D E4 Q
"RTN","PRSATP1",12,0)
 .I Z2>2880 D E5 Q
"RTN","PRSATP1",13,0)
 .I $P(Z,"^",K+2)="" D E9 Q
"RTN","PRSATP1",14,0)
 .;check duplicate start time if no rs-type of time in exception string z for node 2
"RTN","PRSATP1",15,0)
 .I Z'["^RS",'(Z["HX"&("ON HW"[$P(Z,"^",K+2))),'(Z["^ON"&(Z["OT")),'(Z["^ON"&(Z["CT")),$D(T(Z1)) D E3 Q
"RTN","PRSATP1",16,0)
 .I $P(Z,"^",K+2)="HW",Z'["HX",'$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),"^",12) D E7 Q
"RTN","PRSATP1",17,0)
 .I $P(Z,"^",K+2)'="" S T(Z1)=$G(T(Z1))_$P(Z,U,K+2)_U,T(Z1,K)=Z2_"^"_$P(Z,"^",K,K+3)
"RTN","PRSATP1",18,0)
 .Q
"RTN","PRSATP1",19,0)
 I '$D(T) Q
"RTN","PRSATP1",20,0)
 ;check duplicate start time if rs in exception string z for node 2.
"RTN","PRSATP1",21,0)
 S Z1="" I Z["^RS",'(Z["^ON"&(Z["OT")),'(Z["^ON"&(Z["CT")) F  S Z1=$O(T(Z1)) QUIT:Z1=""  QUIT:Z["HX"&("^ON^HW^"[T(Z1))  I $L(T(Z1),U)>2 D  QUIT:Z1="*"
"RTN","PRSATP1",22,0)
 . N A
"RTN","PRSATP1",23,0)
 . S A=T(Z1),A=U_A
"RTN","PRSATP1",24,0)
 . I $L(A,U)>4 S Z1="*" QUIT
"RTN","PRSATP1",25,0)
 . I A'["^RS^" S A=$P(A,"^ON")_$P(A,"^ON",2) S:A="" A="^ON" I "^CT^"'[A,"^OT^"'[A,Z'["^HX"!("^HW^"'[A) S Z1="*" QUIT
"RTN","PRSATP1",26,0)
 . I A["^RS^" S A=$P(A,"^RS")_$P(A,"^RS",2) S:A="" A="^RS" I "^CT^OT^RG^ON^HW^"'[A S Z1="*" QUIT
"RTN","PRSATP1",27,0)
 . QUIT
"RTN","PRSATP1",28,0)
 G:Z1="*" E3
"RTN","PRSATP1",29,0)
 ;exclude rs with ct, ot, rg, on, hw for error e2 check
"RTN","PRSATP1",30,0)
 I Z'["HX",'(Z["^ON"&(Z["OT")),'(Z["^ON"&(Z["CT")) S Z1="" F  S Z1=$O(T(Z1)) Q:Z1=""  G:Z1'<T(Z1,$O(T(Z1,0))) E1 S Y=$O(T(Z1)) I Y,T(Z1,$O(T(Z1,0)))>Y G E2:'(T(Z1)["RS^"&("^CT^OT^RG^ON^HW^"[T(Y)))&'("^CT^OT^RG^ON^HW^"[T(Z1)&(T(Y)["RS^"))
"RTN","PRSATP1",31,0)
 S Z1="",LL=1 F  S Z1=$O(T(Z1)) Q:Z1=""  F K=0:0 S K=$O(T(Z1,K)) Q:K<1  D
"RTN","PRSATP1",32,0)
 .S $P(ZS,"^",LL)=$P(T(Z1,K),"^",2),$P(ZS,"^",LL+1)=$P(T(Z1,K),"^",3),$P(ZS,"^",LL+2)=$P(T(Z1,K),"^",4) S:$P(T(Z1,K),"^",5)'="" $P(ZS,"^",LL+3)=$P(T(Z1,K),"^",5)
"RTN","PRSATP1",33,0)
 .S LL=LL+4 Q
"RTN","PRSATP1",34,0)
 S Z1=$$GET^DDSVAL(DIE,.DA,70)
"RTN","PRSATP1",35,0)
 I Z1="" F K=1:4:25 G:$P(Z,"^",K+2)="AA" E6 I $P(Z,"^",K+2)="WP",$P(Z,"^",K+3)=3 G E10
"RTN","PRSATP1",36,0)
 ;loop thru posting checking for comptime w/out remarks code.
"RTN","PRSATP1",37,0)
 F K=1:4:25 G:($P(Z,"^",K+2)="CT")&($P(Z,"^",K+3)="") E11
"RTN","PRSATP1",38,0)
 F K=1:4:25 G:($P(Z,"^",K+2)="CU")&($P(Z,"^",K+3)="") E12
"RTN","PRSATP1",39,0)
 ;Now loop again checking to make sure compressed tours aren't
"RTN","PRSATP1",40,0)
 ;trying to post credit hours remarks.
"RTN","PRSATP1",41,0)
 I $$COMPR(PPI,DFN) F K=1:4:25 G:$$CTCH(Z,K) E13
"RTN","PRSATP1",42,0)
 Q
"RTN","PRSATP1",43,0)
 ;-------------------------------------------------
"RTN","PRSATP1",44,0)
COMPR(P,D) ;return true if employee has a compressed tour indicator 
"RTN","PRSATP1",45,0)
 ;        this pay period
"RTN","PRSATP1",46,0)
 ;        INPUT:  P--pay period ien; D--Day number
"RTN","PRSATP1",47,0)
 ;
"RTN","PRSATP1",48,0)
 Q $P($G(^PRST(458,+P,"E",D,0)),"^",6)="C"
"RTN","PRSATP1",49,0)
 ;-------------------------------------------------
"RTN","PRSATP1",50,0)
CTCH(Z,K) ;return true if comp/credit earned (CT) posted and
"RTN","PRSATP1",51,0)
 ;        the remarks code is credit hours.
"RTN","PRSATP1",52,0)
 ;        INPUT: Z--Posting node from file 458
"RTN","PRSATP1",53,0)
 ;               K--segment of posting node
"RTN","PRSATP1",54,0)
 Q $P(Z,"^",K+2)="CT"&($P(Z,"^",K+3)="16")
"RTN","PRSATP1",55,0)
 ;-------------------------------------------------
"RTN","PRSATP1",56,0)
 ;
"RTN","PRSATP1",57,0)
V0 I Z2>Z1 S:DY2=1&($O(T(0))>Z1) DY2=2 I DY2=2 S Z1=Z1+1440,Z2=Z2+1440
"RTN","PRSATP1",58,0)
 S:Z2'>Z1 Z2=Z2+1440,DY2=2 Q
"RTN","PRSATP1",59,0)
E1 S STR="A start time is not less than a stop time." G E20
"RTN","PRSATP1",60,0)
E2 S STR="End of one segment must not be greater than start of next." G E20
"RTN","PRSATP1",61,0)
E3 S STR="Duplicate start times encountered." G E20
"RTN","PRSATP1",62,0)
E4 S STR="Segment of second day encountered; no two-day tour specified." G E20
"RTN","PRSATP1",63,0)
E5 S STR="Segment of third day encountered." G E20
"RTN","PRSATP1",64,0)
E6 S STR="Remarks must be entered when AA is posted." G E20
"RTN","PRSATP1",65,0)
E7 S STR="HW can only be posted with HX or on a Holiday." G E20
"RTN","PRSATP1",66,0)
E8 S STR="Stop Time not entered for a segment." G E20
"RTN","PRSATP1",67,0)
E9 S STR="Type of Time not entered for a segment." G E20
"RTN","PRSATP1",68,0)
E10 S STR="Remarks must be entered for WP due to AWOL." G E20
"RTN","PRSATP1",69,0)
E11 S STR="REMARKS CODE must be entered when CT is posted." G E20
"RTN","PRSATP1",70,0)
E12 S STR="REMARKS CODE must be entered when CU is posted." G E20
"RTN","PRSATP1",71,0)
E13 S STR="REMARKS CODE:  Compressed tours can't earn credit hours." G E20
"RTN","PRSATP1",72,0)
E20 K ZS,T S DDSERROR=1,TIM=0 D HLP^DDSUTL(.STR) Q
"RTN","PRSATPE")
0^31^B59425461^B24687644
"RTN","PRSATPE",1,0)
PRSATPE ;HISC/REL,WOIFO/PLT-Find Exceptions ;12/06/06
"RTN","PRSATPE",2,0)
 ;;4.0;PAID;**26,34,69,102,112**;Sep 21, 1995;Build 54
"RTN","PRSATPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATPE",4,0)
 K ER S (ECNT,FATAL)=0,X0=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),STAT=$P($G(^(10)),"^",1)
"RTN","PRSATPE",5,0)
 N MLTIME S MLTIME=0
"RTN","PRSATPE",6,0)
 S TC=$P(X0,"^",2) I 'TC S ER(1)=$P($T(ERTX+1),";;",2),FATAL=1 G EX
"RTN","PRSATPE",7,0)
 I "1 3 4"'[TC,STAT="" S ER(1)=$P($T(ERTX+2),";;",2),FATAL=1 G EX
"RTN","PRSATPE",8,0)
 ;
"RTN","PRSATPE",9,0)
 ;  Validate NAWS 36/40 nurse tours--can't certify if errors
"RTN","PRSATPE",10,0)
 N NAWSERR S NAWSERR=0
"RTN","PRSATPE",11,0)
 I DAY=7!(DAY=14),$$NAWS3640(DFN,PPI) D
"RTN","PRSATPE",12,0)
 .  I $$SAT2DAY(DAY/7,DFN,PPI) D
"RTN","PRSATPE",13,0)
 ..    S FATAL=1 S ERR=16 D ERR3640 S ERR=17 D ERR3640
"RTN","PRSATPE",14,0)
 ..    S NAWSERR=1
"RTN","PRSATPE",15,0)
 .  I $$THREE12(DAY/7,DFN,PPI) D
"RTN","PRSATPE",16,0)
 ..    S FATAL=1 I 'NAWSERR S ERR=16 D ERR3640
"RTN","PRSATPE",17,0)
 ..    S ERR=$S(DAY=7:19,1:20) D ERR3640
"RTN","PRSATPE",18,0)
 I DAY=1,$$NAWS3640(DFN,PPI),$$CARRYOVR(DFN,PPI) D
"RTN","PRSATPE",19,0)
 .    S FATAL=1 S ERR=16 D ERR3640 S ERR=18 D ERR3640
"RTN","PRSATPE",20,0)
 ;
"RTN","PRSATPE",21,0)
 S X2=$G(^PRST(458,PPI,"E",DFN,"D",DAY,2)) G:X2="" EX S X1=$G(^(1)),X4=$G(^(4)),K=$P($G(^(10)),U,4)
"RTN","PRSATPE",22,0)
 ;check recess entire day having un-unavailable posted for all scheduled on-on call
"RTN","PRSATPE",23,0)
 I $E($G(PRSENT),5),K=2,X2["^RS" D
"RTN","PRSATPE",24,0)
 . F K=1:3 QUIT:$P(X1,U,K,999)=""  S Z=$P(X1,U,K+2) I Z,$P($G(^PRST(457.2,Z,0)),"^",2)="ON",X2'[($P(X1,U,K,K+1)_"^UN") S PRSWOC=$G(PRSWOC)_DAY_"," QUIT
"RTN","PRSATPE",25,0)
 . I $G(PRSWOC)'[(DAY_",") F K=1:3 QUIT:$P(X4,U,K,999)=""  S Z=$P(X4,U,K+2) I Z,$P($G(^PRST(457.2,Z,0)),"^",2)="ON",X2'[($P(X4,U,K,K+1)_"^UN") S PRSWOC=$G(PRSWOC)_DAY_"," QUIT
"RTN","PRSATPE",26,0)
 . QUIT
"RTN","PRSATPE",27,0)
 ;
"RTN","PRSATPE",28,0)
 K TM I X2["OT"!(X2["CT") D TM
"RTN","PRSATPE",29,0)
 K T,TRS F K=1:3 Q:$P(X1,"^",K)=""  S Z=$P(X1,"^",K+2) I $S('Z:1,1:$P($G(^PRST(457.2,Z,0)),"^",2)="RG") D
"RTN","PRSATPE",30,0)
 .S X=$P(X1,"^",K,K+1) D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V0
"RTN","PRSATPE",31,0)
 .I Z1'="",$G(T(Z1))="*" K T(Z1) S T(Z2)="*" Q
"RTN","PRSATPE",32,0)
 .S T(Z1)="",T(Z2)="*" Q
"RTN","PRSATPE",33,0)
 I X4'="" F K=1:3 Q:$P(X4,"^",K)=""  S Z=$P(X4,"^",K+2) I $S('Z:1,1:$P($G(^PRST(457.2,Z,0)),"^",2)="RG") D
"RTN","PRSATPE",34,0)
 .S X=$P(X4,"^",K,K+1) D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V0
"RTN","PRSATPE",35,0)
 .I Z1'="",$G(T(Z1))="*" K T(Z1) S T(Z2)="*" Q
"RTN","PRSATPE",36,0)
 .S T(Z1)="",T(Z2)="*" Q
"RTN","PRSATPE",37,0)
 ;
"RTN","PRSATPE",38,0)
 ;find rs-type of time segments of trs array in x2 posted string
"RTN","PRSATPE",39,0)
 I X2["^RS" F K=1:4:25 QUIT:$P(X2,U,K,999)=""  S X=$P(X2,"^",K,K+1) I "^"'[X,$P(X2,"^",K+2)="RS" D
"RTN","PRSATPE",40,0)
 . S TT=$P(X2,"^",K+2) D CNV^PRSATIM S Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V1
"RTN","PRSATPE",41,0)
 . I Z1'="",$G(TRS(Z1))="*" K TRS(Z1) S TRS(Z2)="*" QUIT
"RTN","PRSATPE",42,0)
 . S TRS(Z1)="",TRS(Z2)="*"
"RTN","PRSATPE",43,0)
 . QUIT
"RTN","PRSATPE",44,0)
 ; Checks for Daily employees
"RTN","PRSATPE",45,0)
 I "^"[$P(X2,"^",1,2) S TT=$P(X2,"^",3),K=1,DN=0,Y0="" G L0
"RTN","PRSATPE",46,0)
 F K=1:4:25 S X=$P(X2,"^",K,K+1) I "^"'[X D
"RTN","PRSATPE",47,0)
 . N Z3,Z4
"RTN","PRSATPE",48,0)
 . S TT=$P(X2,"^",K+2)
"RTN","PRSATPE",49,0)
 . D CNV^PRSATIM S Y0=Y,Z1=$P(Y,"^",1),Z2=$P(Y,"^",2) D V1 S TIM=Z2-Z1/60
"RTN","PRSATPE",50,0)
 . S Z3=Z1,Z4=Z2
"RTN","PRSATPE",51,0)
 . I TT="ML" S MLTIME=MLTIME+TIM
"RTN","PRSATPE",52,0)
 . S Z1=$O(T(Z1)) S:Z1'="" Z1=T(Z1)
"RTN","PRSATPE",53,0)
 . S Z2=$O(T(Z2-1)) S:Z2'="" Z2=T(Z2)
"RTN","PRSATPE",54,0)
 . ;trs=1 if absolute outside rs, 2 if absolute inside rs, 3 if overlap (in/outside) rs and inside tour of duty
"RTN","PRSATPE",55,0)
 . ;if exception segment start/ending time outside tour of duty, reset z3 and z4
"RTN","PRSATPE",56,0)
 . I Z1]""!(Z2]""),X2["^RS" S:Z1=""&(Z2="*") Z3=$O(T(Z3)) S:Z1="*"&(Z2="") Z4=$O(T(Z3)) S Z3=$O(TRS(Z3)) S:Z3]"" Z3=TRS(Z3) S Z4=$O(TRS(Z4-1)) S:Z4]"" Z4=TRS(Z4) S TRS=$S(Z3=""&(Z4=""):1,Z3="*"&(Z4="*"):2,1:3)
"RTN","PRSATPE",57,0)
 . I TT="UN" D UN^PRSATPH QUIT
"RTN","PRSATPE",58,0)
 . I "CT OT ON SB RG"[TT D OT QUIT
"RTN","PRSATPE",59,0)
 . D LV QUIT
"RTN","PRSATPE",60,0)
 ;
"RTN","PRSATPE",61,0)
 ; Check for a minimum of 1 hour ML
"RTN","PRSATPE",62,0)
 ;
"RTN","PRSATPE",63,0)
 I TT="ML",MLTIME<1 S ER(1)=$P($T(ERTX+14),";;",2),FATAL=1 G EX
"RTN","PRSATPE",64,0)
 ;
"RTN","PRSATPE",65,0)
EX Q
"RTN","PRSATPE",66,0)
V0 I Z2>Z1 S:$O(T(""))'<Z2 Z1=Z1+1440,Z2=Z2+1440 Q
"RTN","PRSATPE",67,0)
 S Z2=Z2+1440 Q
"RTN","PRSATPE",68,0)
V1 S DN=0 I Z2>Z1 Q:"CT OT ON SB UN RG"[TT  S:$O(T(""))'<Z2 Z1=Z1+1440,Z2=Z2+1440,DN=2 Q
"RTN","PRSATPE",69,0)
 S Z2=Z2+1440,DN=1 Q
"RTN","PRSATPE",70,0)
OT ; Check OT/CT Request
"RTN","PRSATPE",71,0)
 I Z1'=""!(Z2'="") D O2 I $G(ERR)=6 S FATAL=1 D ERR
"RTN","PRSATPE",72,0)
 I DN=1,$O(T(1440))="" D NX^PRSATPH
"RTN","PRSATPE",73,0)
 I 'DN,$O(T(""))=""!($P(Y0,"^",1)'>$O(T(""))) D PR^PRSATPH
"RTN","PRSATPE",74,0)
 I "ON SB RG"[TT Q
"RTN","PRSATPE",75,0)
 ; check status of request(s)
"RTN","PRSATPE",76,0)
 S DTI=$P($G(^PRST(458,PPI,1)),U,DAY) Q:'DTI
"RTN","PRSATPE",77,0)
 S STAT="" ; init highest status var
"RTN","PRSATPE",78,0)
 S DA=0 F  S DA=$O(^PRST(458.2,"AD",DFN,DTI,DA)) Q:'DA  D  Q:STAT="A"
"RTN","PRSATPE",79,0)
 . S Z=$G(^PRST(458.2,DA,0))
"RTN","PRSATPE",80,0)
 . Q:$P(Z,"^",5)'=TT  ; ignore different type
"RTN","PRSATPE",81,0)
 . I $F("RSA",$P(Z,U,8))>$F("RSA",STAT) S STAT=$P(Z,U,8) ; higher status
"RTN","PRSATPE",82,0)
 I STAT="" S ERR=3 D ERR Q  ; none with requested or higher status
"RTN","PRSATPE",83,0)
 I STAT'="A" D  Q  ; none approved
"RTN","PRSATPE",84,0)
 . S ERR=$S(STAT="R":8,1:9) D ERR
"RTN","PRSATPE",85,0)
 . ; check posted hours vs requested since no approved request
"RTN","PRSATPE",86,0)
 . S TM(TT,"R")=$G(TM(TT,"R"))-TIM I TM(TT,"R")<0 S ERR=7 D ERR
"RTN","PRSATPE",87,0)
 ; check posted hours vs approved since we have an approved request
"RTN","PRSATPE",88,0)
 S TM(TT,"A")=$G(TM(TT,"A"))-TIM I TM(TT,"A")<0 S ERR=13 D ERR
"RTN","PRSATPE",89,0)
 Q
"RTN","PRSATPE",90,0)
O2 ; Check for valid with-in tour or cross-tour situations
"RTN","PRSATPE",91,0)
 I TT="ON"&(X2["HX") Q
"RTN","PRSATPE",92,0)
 ;I "OT CT"[TT,TIM'>1 Q
"RTN","PRSATPE",93,0)
 ;none-leave hours are inside tour hours, but quit if inside rs hours
"RTN","PRSATPE",94,0)
 QUIT:$G(TRS)=2!(TT="HW"&(X2["^RS"))  S ERR=6 QUIT
"RTN","PRSATPE",95,0)
TM ; Get OT,CT request,approve times
"RTN","PRSATPE",96,0)
 S DTI=$P($G(^PRST(458,PPI,1)),"^",DAY),DA=0 Q:'DTI
"RTN","PRSATPE",97,0)
T1 S DA=$O(^PRST(458.2,"AD",DFN,DTI,DA)) I 'DA Q
"RTN","PRSATPE",98,0)
 S Z=$G(^PRST(458.2,DA,0)),STAT=$P(Z,"^",8) I STAT'="","XD"[STAT G T1
"RTN","PRSATPE",99,0)
 S TT=$P(Z,"^",5) I TT'="OT",TT'="CT" G T1
"RTN","PRSATPE",100,0)
 S TM(TT,"R")=$G(TM(TT,"R"))+$P(Z,"^",6) ; requested sum
"RTN","PRSATPE",101,0)
 I STAT="A" S TM(TT,"A")=$G(TM(TT,"A"))+$P(Z,"^",6) ; approved sum
"RTN","PRSATPE",102,0)
 G T1
"RTN","PRSATPE",103,0)
LV ; Check Leave Request
"RTN","PRSATPE",104,0)
 I TC=3!(TC=4) Q
"RTN","PRSATPE",105,0)
 I TC=1,TT="HW" Q
"RTN","PRSATPE",106,0)
 ;leave hours are (overlap) outside tour hours or (overlap) inside recess hours
"RTN","PRSATPE",107,0)
 I ($G(TRS)'=1&(TT="HW")&$G(TRS)) QUIT
"RTN","PRSATPE",108,0)
 I Z1'="*"!(Z2'="*")!($G(TRS)'=1&(TT'="RS")&$G(TRS)) S ERR=5,FATAL=1 D ERR
"RTN","PRSATPE",109,0)
 ;
"RTN","PRSATPE",110,0)
L0 N REMARK S REMARK=$P(X2,"^",K+3)
"RTN","PRSATPE",111,0)
 Q:REMARK&(REMARK'=15&(REMARK'=16))
"RTN","PRSATPE",112,0)
 I "HX"[TT D HENCAP
"RTN","PRSATPE",113,0)
 ;no leave request for non-leave hour and rs types
"RTN","PRSATPE",114,0)
 QUIT:"RG CP NP HX HW TR TV RS"[TT
"RTN","PRSATPE",115,0)
 S DTI=$P($G(^PRST(458,PPI,1)),"^",DAY) Q:'DTI  S (DT1,DT2)=DTI
"RTN","PRSATPE",116,0)
 I DN D D2 S:DN=2 DT1=DT2
"RTN","PRSATPE",117,0)
 S DTIN=9999999-DT2,DA=0
"RTN","PRSATPE",118,0)
 F KK=0:0 S KK=$O(^PRST(458.1,"AD",DFN,KK)) G:KK=""!(KK>DTIN) L3 F DA=0:0 S DA=$O(^PRST(458.1,"AD",DFN,KK,DA)) Q:DA=""  I ^(DA)'>DT1 D L1 G:LF L4
"RTN","PRSATPE",119,0)
 Q
"RTN","PRSATPE",120,0)
L1 S Z=$G(^PRST(458.1,DA,0)),LF=0 Q:$P(Z,"^",7)'=TT  S STAT=$P(Z,"^",9) I "XD"[STAT Q
"RTN","PRSATPE",121,0)
 G:Y0="" L2 S Z1=$P(Y0,"^",1),Z2=$P(Y0,"^",2)
"RTN","PRSATPE",122,0)
 S X=$P(Z,"^",4)_"^"_$P(Z,"^",6) D CNV^PRSATIM
"RTN","PRSATPE",123,0)
 I $P(Z,"^",3)=DT1,$P(Y,"^",1)>Z1 Q
"RTN","PRSATPE",124,0)
 I $P(Z,"^",5)=DT2,$P(Y,"^",2)<Z2 Q
"RTN","PRSATPE",125,0)
L2 I STAT'="A" S ERR=4 D ERR
"RTN","PRSATPE",126,0)
 S LF=1 Q
"RTN","PRSATPE",127,0)
L3 S ERR=3 D ERR Q
"RTN","PRSATPE",128,0)
L4 Q
"RTN","PRSATPE",129,0)
D2 I DAY<14 S DT2=$P($G(^PRST(458,PPI,1)),"^",DAY+1) Q
"RTN","PRSATPE",130,0)
 N X1,X2 S X1=DT1,X2=1 D C^%DTC S DT2=X Q
"RTN","PRSATPE",131,0)
 ;
"RTN","PRSATPE",132,0)
HENCAP ; Check for Holiday encapsulated by non-pay
"RTN","PRSATPE",133,0)
 N DAH,DBH,HOL,QUIT
"RTN","PRSATPE",134,0)
 S (DAH,DBH,HOL,QUIT)=""
"RTN","PRSATPE",135,0)
 D HENCAP^PRSATP4(PPI,DFN,DAY,.DBH,.HOL,.DAH,.QUIT)
"RTN","PRSATPE",136,0)
 Q:QUIT
"RTN","PRSATPE",137,0)
 Q:HOL=""
"RTN","PRSATPE",138,0)
 S ERR=15 D ERR Q  ; Holiday in current PP
"RTN","PRSATPE",139,0)
 Q
"RTN","PRSATPE",140,0)
NAWS3640(PRSEMP,PPI) ; return true if NAWS 36/40 Nurse for this PPI
"RTN","PRSATPE",141,0)
 N EMPNODE,PAYPLAN,DTYBASIS,NORMHRS,S8
"RTN","PRSATPE",142,0)
 S S8=$G(^PRST(458,PPI,"E",PRSEMP,5))
"RTN","PRSATPE",143,0)
 I S8'="",($E(S8,26,27)'=72!("KM"'[$E(S8,28))!($E(S8,29)'=1)) Q 0
"RTN","PRSATPE",144,0)
 S EMPNODE=$G(^PRSPC(PRSEMP,0))
"RTN","PRSATPE",145,0)
 S PAYPLAN=$P(EMPNODE,U,21)
"RTN","PRSATPE",146,0)
 S DTYBASIS=$P(EMPNODE,U,10)
"RTN","PRSATPE",147,0)
 S NORMHRS=$P(EMPNODE,U,16)
"RTN","PRSATPE",148,0)
 Q "KM"[PAYPLAN&(DTYBASIS=1)&(NORMHRS=72)
"RTN","PRSATPE",149,0)
SAT2DAY(WK,PRSIEN,PPI) ;
"RTN","PRSATPE",150,0)
 N HRS,SUNTRHRS,SAT2DAY,PRSD
"RTN","PRSATPE",151,0)
 S SAT2DAY=0
"RTN","PRSATPE",152,0)
 S PRSD=$S(WK=1:7,1:14)
"RTN","PRSATPE",153,0)
 S SAT2DAY=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),"^",2)
"RTN","PRSATPE",154,0)
 I SAT2DAY>0 S SAT2DAY=$P($G(^PRST(457.1,SAT2DAY,0)),U,5)="Y"
"RTN","PRSATPE",155,0)
 Q SAT2DAY
"RTN","PRSATPE",156,0)
CARRYOVR(PRSIEN,PPI) ; true if hours are coming in from last pp
"RTN","PRSATPE",157,0)
 N PRIORSAT,SAT2DAY
"RTN","PRSATPE",158,0)
 S SAT2DAY=0
"RTN","PRSATPE",159,0)
 S PRIORSAT=$P($G(^PRST(458,PPI-1,"E",PRSIEN,"D",14,0)),U,2)
"RTN","PRSATPE",160,0)
 I PRIORSAT>0 S SAT2DAY=$P($G(^PRST(457.1,PRIORSAT,0)),U,5)="Y"
"RTN","PRSATPE",161,0)
 Q SAT2DAY
"RTN","PRSATPE",162,0)
THREE12(WK,PRSIEN,PPI) ;
"RTN","PRSATPE",163,0)
 N PRSD,TOURDTY,COUNT,ST,EN
"RTN","PRSATPE",164,0)
 S COUNT=0
"RTN","PRSATPE",165,0)
 S ST=$S(WK=1:1,1:8),EN=$S(WK=1:7,1:14)
"RTN","PRSATPE",166,0)
 F PRSD=ST:1:EN D
"RTN","PRSATPE",167,0)
 . S TOURDTY=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",PRSD,0)),"^",2)
"RTN","PRSATPE",168,0)
 . I $P($G(^PRST(457.1,TOURDTY,0)),U,6)=12 S COUNT=COUNT+1
"RTN","PRSATPE",169,0)
 I COUNT'=3 Q 1
"RTN","PRSATPE",170,0)
 N HRS
"RTN","PRSATPE",171,0)
 D TOURHRS^PRSARC07(.HRS,PPI,PRSIEN)
"RTN","PRSATPE",172,0)
 Q:(HRS($S(WK=1:"W1",1:"W2"))'=36) 1
"RTN","PRSATPE",173,0)
 Q 0
"RTN","PRSATPE",174,0)
 ;
"RTN","PRSATPE",175,0)
ERR ; Set Error
"RTN","PRSATPE",176,0)
 S ECNT=ECNT+1,ER(ECNT)=TT_$P($T(ERTX+ERR),";;",2)_"^"_$P(X2,"^",K) Q
"RTN","PRSATPE",177,0)
ERR3640 ; Set NAWS (36/40) Errors
"RTN","PRSATPE",178,0)
 S ECNT=ECNT+1,ER(ECNT)=$P($T(ERTX+ERR),";;",2) Q
"RTN","PRSATPE",179,0)
ERTX ;;
"RTN","PRSATPE",180,0)
1 ;;No Tour Entered^
"RTN","PRSATPE",181,0)
2 ;;No Time Posted^
"RTN","PRSATPE",182,0)
3 ;; not Requested
"RTN","PRSATPE",183,0)
4 ;; Requested but not Approved
"RTN","PRSATPE",184,0)
5 ;; Posted outside of Tour Hours or within Recess Hours
"RTN","PRSATPE",185,0)
6 ;; Posted within Tour Hours or outside of Recess Hours
"RTN","PRSATPE",186,0)
7 ;; Posted exceeds Requested Hours
"RTN","PRSATPE",187,0)
8 ;; Requested but pending Supervisor Approval
"RTN","PRSATPE",188,0)
9 ;; Supervisor Approved but pending Director Approval
"RTN","PRSATPE",189,0)
10 ;; Overlaps with the start of the next day's Tour
"RTN","PRSATPE",190,0)
11 ;; Overlaps with the prior day's Tour
"RTN","PRSATPE",191,0)
12 ;; can only be posted against OT, CT, ON, & SB in Tour
"RTN","PRSATPE",192,0)
13 ;; Posted exceeds Approved Hours
"RTN","PRSATPE",193,0)
14 ;; The minimum charge for Military Leave is one hour
"RTN","PRSATPE",194,0)
15 ;; was encapsulated by non-pay
"RTN","PRSATPE",195,0)
16 ;;36/40 AWS tours require
"RTN","PRSATPE",196,0)
17 ;; -no 2 day tours on Sat
"RTN","PRSATPE",197,0)
18 ;; -no prior pp carryover
"RTN","PRSATPE",198,0)
19 ;; -3 12 hr tours/wk 1
"RTN","PRSATPE",199,0)
20 ;; -3 12 hr tours/wk 2
"RTN","PRSPUT3")
0^50^B60317840^B60317538
"RTN","PRSPUT3",1,0)
PRSPUT3 ;WOIFO/MGD,JAH - PART TIME PHYSICIAN UTILITIES #1 ;03/23/07
"RTN","PRSPUT3",2,0)
 ;;4.0;PAID;**93,112**;Sep 21, 1995;Build 54
"RTN","PRSPUT3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSPUT3",4,0)
 ;
"RTN","PRSPUT3",5,0)
 ;Utilities for Part Time Physician patch PRS*4.0*93.
"RTN","PRSPUT3",6,0)
 ;
"RTN","PRSPUT3",7,0)
PTP(PRSIEN) ;Check for potential PTP (has a memo on file)
"RTN","PRSPUT3",8,0)
 ; input PRSIEN = employee IEN (file 450)
"RTN","PRSPUT3",9,0)
 ; result = 1 or 0, true (1) if employee has any memos on file
"RTN","PRSPUT3",10,0)
 Q $S($O(^PRST(458.7,"B",PRSIEN,0)):1,1:0)
"RTN","PRSPUT3",11,0)
 ;
"RTN","PRSPUT3",12,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",13,0)
 ; Display PTP AL info
"RTN","PRSPUT3",14,0)
 ; Input: PRSIEN - IEN of PT Physician
"RTN","PRSPUT3",15,0)
 ;         ARRAY - Array where leave info is stored. (Optional) If not 
"RTN","PRSPUT3",16,0)
 ;                 specified, no array is created.
"RTN","PRSPUT3",17,0)
 ;         INDEX - Index to start array. (optional) set to 1 if not spec
"RTN","PRSPUT3",18,0)
 ; Output: 2 line summary-current AL bal, fut reqs and potential loss.
"RTN","PRSPUT3",19,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",20,0)
AL(PRSIEN,ARRAY,INDEX) ;
"RTN","PRSPUT3",21,0)
 Q:'PRSIEN
"RTN","PRSPUT3",22,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX^PRSPUT1
"RTN","PRSPUT3",23,0)
 N AINC,ALBAL,ALTBL,APALHRS,EOLYD,LVG,TEXT,X,X1,X2,Y,MAYLOSE,LDPINV
"RTN","PRSPUT3",24,0)
 ;
"RTN","PRSPUT3",25,0)
 ; Max Carryover
"RTN","PRSPUT3",26,0)
 S MAXOVER=240
"RTN","PRSPUT3",27,0)
 ;
"RTN","PRSPUT3",28,0)
 ; current AL bal
"RTN","PRSPUT3",29,0)
 S ALBAL=$P($G(^PRSPC(PRSIEN,"ANNUAL")),U,3)
"RTN","PRSPUT3",30,0)
 ;
"RTN","PRSPUT3",31,0)
 ; last day of curr leave yr
"RTN","PRSPUT3",32,0)
 S EOLYD=$$GETLDOYR()
"RTN","PRSPUT3",33,0)
 ;
"RTN","PRSPUT3",34,0)
 ; last day proc from 459 & inverse
"RTN","PRSPUT3",35,0)
 S LDP=$P($G(^PRST(458,$O(^PRST(458,"AB",$O(^PRST(459,"AB",""),-1),0)),1)),U,14)
"RTN","PRSPUT3",36,0)
 S LDPINV=9999999-LDP
"RTN","PRSPUT3",37,0)
 ;
"RTN","PRSPUT3",38,0)
 ; future al approved (ranges from LastDayProcessed459-EndOfLeaveYear)
"RTN","PRSPUT3",39,0)
 ; This is an estimate since we count all hrs for reqs that begin in 
"RTN","PRSPUT3",40,0)
 ; the current yr but cross into next
"RTN","PRSPUT3",41,0)
 S APALHRS=$$GETAPALH(PRSIEN,LDPINV,EOLYD)
"RTN","PRSPUT3",42,0)
 ;
"RTN","PRSPUT3",43,0)
 ; accrual from last pp proc to EOY
"RTN","PRSPUT3",44,0)
 S ACCRUAL=$$GETACCRU(PRSIEN,EOLYD,LDP)
"RTN","PRSPUT3",45,0)
 ;
"RTN","PRSPUT3",46,0)
 ; potential loss
"RTN","PRSPUT3",47,0)
 S MAYLOSE=$$GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER)
"RTN","PRSPUT3",48,0)
 ;
"RTN","PRSPUT3",49,0)
 ; Display
"RTN","PRSPUT3",50,0)
 S TEXT=""
"RTN","PRSPUT3",51,0)
 D A1^PRSPUT1 ; Blank line
"RTN","PRSPUT3",52,0)
 S TEXT="AL Bal: "_$J(ALBAL,6,2)
"RTN","PRSPUT3",53,0)
 S $E(TEXT,17)="",TEXT=TEXT_"Approved future AL thru Leave Year: "
"RTN","PRSPUT3",54,0)
 S TEXT=TEXT_$J(APALHRS,6,2)
"RTN","PRSPUT3",55,0)
 S $E(TEXT,60)="",TEXT=TEXT_"Max carryover: "_MAXOVER
"RTN","PRSPUT3",56,0)
 D A1^PRSPUT1 ; Line #1
"RTN","PRSPUT3",57,0)
 S Y=EOLYD
"RTN","PRSPUT3",58,0)
 D DD^%DT
"RTN","PRSPUT3",59,0)
 S TEXT="Potential AL hours to be lost by "_Y_" excluding Approved AL: "
"RTN","PRSPUT3",60,0)
 S TEXT=TEXT_MAYLOSE
"RTN","PRSPUT3",61,0)
 D A1^PRSPUT1 ; Line #2
"RTN","PRSPUT3",62,0)
 K INDEX
"RTN","PRSPUT3",63,0)
 Q
"RTN","PRSPUT3",64,0)
 ;
"RTN","PRSPUT3",65,0)
GETACCRU(PRSIEN,EOLYD,LDP) ; Calculate AL accrucal from last day of 
"RTN","PRSPUT3",66,0)
 ; pp processed in 459 (LDP) to end of leave year (EOLYD)
"RTN","PRSPUT3",67,0)
 ;
"RTN","PRSPUT3",68,0)
 N CO,LVG,NH,DB,AINC,X1,X2,INC
"RTN","PRSPUT3",69,0)
 ;
"RTN","PRSPUT3",70,0)
 S C0=$G(^PRSPC(PRSIEN,0)),LVG=$P(C0,"^",15),NH=+$P(C0,"^",16)
"RTN","PRSPUT3",71,0)
 S DB=$P(C0,"^",10),AINC=""
"RTN","PRSPUT3",72,0)
 Q:LVG'?1N!("123"'[LVG) 0
"RTN","PRSPUT3",73,0)
 I LVG=1 D  ; Leave Group 1
"RTN","PRSPUT3",74,0)
 . S AINC=$S(DB=1:4,1:NH+AINC/20\1)
"RTN","PRSPUT3",75,0)
 I LVG=2 D  ; Leave Group 2
"RTN","PRSPUT3",76,0)
 . S AINC=$S(DB=1:6,1:NH+AINC/13\1)
"RTN","PRSPUT3",77,0)
 I LVG=3 D  ; Leave Group 3
"RTN","PRSPUT3",78,0)
 . S AINC=$S(DB=1:8,1:NH+AINC/10\1)
"RTN","PRSPUT3",79,0)
 S X1=EOLYD,X2=LDP
"RTN","PRSPUT3",80,0)
 D ^%DTC
"RTN","PRSPUT3",81,0)
 S INC=X+13\14*AINC
"RTN","PRSPUT3",82,0)
 Q INC
"RTN","PRSPUT3",83,0)
 ;
"RTN","PRSPUT3",84,0)
GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER) ; Calculate potential hours to be lost
"RTN","PRSPUT3",85,0)
 N ALTBL
"RTN","PRSPUT3",86,0)
 S ALTBL=ALBAL+ACCRUAL-MAXOVER-APALHRS
"RTN","PRSPUT3",87,0)
 Q $S(ALTBL<0:0,1:ALTBL)
"RTN","PRSPUT3",88,0)
 ;
"RTN","PRSPUT3",89,0)
GETLDOYR() ; Calculate last day of the last pp of current year (EOLY)
"RTN","PRSPUT3",90,0)
 N X,I,X1,X2,NEXTYR,PRSYRDT
"RTN","PRSPUT3",91,0)
 S PRSYRDT=$P($T(DAT^PRSAPPU),";;",2)
"RTN","PRSPUT3",92,0)
 F I=1:1 S NEXTYR=$P(PRSYRDT,",",I) Q:NEXTYR>DT!(NEXTYR="")
"RTN","PRSPUT3",93,0)
 I NEXTYR="" Q DT
"RTN","PRSPUT3",94,0)
 S X1=NEXTYR,X2=-1
"RTN","PRSPUT3",95,0)
 D C^%DTC
"RTN","PRSPUT3",96,0)
 Q X
"RTN","PRSPUT3",97,0)
 ;
"RTN","PRSPUT3",98,0)
GETAPALH(PRSIEN,PPPIN,EOLYD) ; Approved AL hrs
"RTN","PRSPUT3",99,0)
 ;
"RTN","PRSPUT3",100,0)
 N APALHRS,EOLYDINV,LREND,LRIEN,LRSTRT,LRDATA
"RTN","PRSPUT3",101,0)
 ;
"RTN","PRSPUT3",102,0)
 S APALHRS=0 ; COUNTER-APproved Annual Leave HouR
"RTN","PRSPUT3",103,0)
 S EOLYDINV=9999999-EOLYD
"RTN","PRSPUT3",104,0)
 ;
"RTN","PRSPUT3",105,0)
 ; use inverse dt to loop chrono from future requests to recent ones
"RTN","PRSPUT3",106,0)
 ; Quit when end date hits last proc pp. Don't include canceled & other
"RTN","PRSPUT3",107,0)
 ; leave type reqs from AD index.
"RTN","PRSPUT3",108,0)
 ;
"RTN","PRSPUT3",109,0)
 S LREND=0
"RTN","PRSPUT3",110,0)
 F  S LREND=$O(^PRST(458.1,"AD",PRSIEN,LREND)) Q:(LREND'>0)!(LREND>PPPIN)  D
"RTN","PRSPUT3",111,0)
 . S LRIEN=0
"RTN","PRSPUT3",112,0)
 . F  S LRIEN=$O(^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)) Q:LRIEN'>0  D
"RTN","PRSPUT3",113,0)
 . . S LRSTRT=^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)
"RTN","PRSPUT3",114,0)
 . . S LRSTRT=9999999-LRSTRT
"RTN","PRSPUT3",115,0)
 . . ;
"RTN","PRSPUT3",116,0)
 . . ; skip if lv doesn't start in range-last pp proc to EOLY
"RTN","PRSPUT3",117,0)
 . . Q:LRSTRT'<PPPIN!(LRSTRT'>EOLYDINV)
"RTN","PRSPUT3",118,0)
 . . ; skip if not AL or App
"RTN","PRSPUT3",119,0)
 . . S LRDATA=$G(^PRST(458.1,LRIEN,0))
"RTN","PRSPUT3",120,0)
 . . Q:$P(LRDATA,U,7)'="AL"!($P(LRDATA,U,9)'="A")
"RTN","PRSPUT3",121,0)
 . . S APALHRS=APALHRS+$P(LRDATA,U,15)
"RTN","PRSPUT3",122,0)
 Q APALHRS
"RTN","PRSPUT3",123,0)
 ;
"RTN","PRSPUT3",124,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",125,0)
 ; Utility updates ESR Status and autopost any holidays
"RTN","PRSPUT3",126,0)
 ;
"RTN","PRSPUT3",127,0)
 ; Input:
"RTN","PRSPUT3",128,0)
 ;       PPI - The internal entry number of the PP
"RTN","PRSPUT3",129,0)
 ;    PRSIEN - The internal entry number of the PT Phy
"RTN","PRSPUT3",130,0)
 ;       DAY - (optional) If passed in the specific date (1-14) that
"RTN","PRSPUT3",131,0)
 ;               needs to be updated.  If a specific date is not
"RTN","PRSPUT3",132,0)
 ;               passed in all 14 days will be reviewed and updated
"RTN","PRSPUT3",133,0)
 ;               as necessary.
"RTN","PRSPUT3",134,0)
 ;
"RTN","PRSPUT3",135,0)
 ; HOL and PDT need to be set by calling ^PRSAPPH prior to making this
"RTN","PRSPUT3",136,0)
 ; call.
"RTN","PRSPUT3",137,0)
 ;
"RTN","PRSPUT3",138,0)
ESRUPDT(PPI,PRSIEN,DAY) ;
"RTN","PRSPUT3",139,0)
 ;
"RTN","PRSPUT3",140,0)
 N END,HTOUR,IENS,MT,PRSFDA,START,STATUS,STOP,TOUR
"RTN","PRSPUT3",141,0)
 S DAY=$G(DAY,"")
"RTN","PRSPUT3",142,0)
 S START=$S(DAY:DAY,1:1)
"RTN","PRSPUT3",143,0)
 S END=$S(DAY:DAY,1:14)
"RTN","PRSPUT3",144,0)
 F DAY=START:1:END D
"RTN","PRSPUT3",145,0)
 . S TOUR=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",146,0)
 . S STATUS=$S(TOUR>1:1,1:6)
"RTN","PRSPUT3",147,0)
 . S IENS=DAY_","_PRSIEN_","_PPI_","
"RTN","PRSPUT3",148,0)
 . K PRSFDA
"RTN","PRSPUT3",149,0)
 . S PRSFDA(458.02,IENS,146)=STATUS
"RTN","PRSPUT3",150,0)
 . I $D(HOL($P(PDT,U,DAY))) D
"RTN","PRSPUT3",151,0)
 . . S HTOUR=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,1))
"RTN","PRSPUT3",152,0)
 . . Q:HTOUR=""
"RTN","PRSPUT3",153,0)
 . . S MT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",154,0)
 . . S MT=$P($G(^PRST(457.1,MT,0)),U,3)
"RTN","PRSPUT3",155,0)
 . . F I=0:1:6 Q:$P(HTOUR,U,(3*I)+1)=""  D
"RTN","PRSPUT3",156,0)
 . . . S START=$P(HTOUR,U,(3*I)+1),STOP=$P(HTOUR,U,(3*I)+2)
"RTN","PRSPUT3",157,0)
 . . . S PRSFDA(458.02,IENS,110+(5*I))=START
"RTN","PRSPUT3",158,0)
 . . . S PRSFDA(458.02,IENS,111+(5*I))=STOP
"RTN","PRSPUT3",159,0)
 . . . S PRSFDA(458.02,IENS,112+(5*I))="HX"
"RTN","PRSPUT3",160,0)
 . . S PRSFDA(458.02,IENS,146)=4 ; ESR DAILY STATUS = SIGNED
"RTN","PRSPUT3",161,0)
 . . S PRSFDA(458.02,IENS,101)="" ; Reset timecard status to unposted.
"RTN","PRSPUT3",162,0)
 . . S PRSFDA(458.02,IENS,114)=MT ; Meal time for 1st segment
"RTN","PRSPUT3",163,0)
 . . S PRSFDA(458.02,IENS,147)=$$NOW^XLFDT() ; Date/Time stamp
"RTN","PRSPUT3",164,0)
 . . S PRSFDA(458.02,IENS,149)=4 ; ESR Signed by Holiday
"RTN","PRSPUT3",165,0)
 . D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSPUT3",166,0)
 Q
"RTN","PRSPUT3",167,0)
 ;
"RTN","PRSPUT3",168,0)
MEMCPP(MIEN) ; Memo Certified PP
"RTN","PRSPUT3",169,0)
 ; This utility determine the last certified PP and the number of
"RTN","PRSPUT3",170,0)
 ; certified PPs for a given memo.
"RTN","PRSPUT3",171,0)
 ; input
"RTN","PRSPUT3",172,0)
 ;   MIEN - internal entry number of a memo in file 458.7
"RTN","PRSPUT3",173,0)
 ; returns a string value
"RTN","PRSPUT3",174,0)
 ;   = last certified PP (external value)^number of certified PPs
"RTN","PRSPUT3",175,0)
 ;   example "05-01^3"
"RTN","PRSPUT3",176,0)
 ;
"RTN","PRSPUT3",177,0)
 N LASTPP,MPPIEN,PPC,PRSX
"RTN","PRSPUT3",178,0)
 I '$G(MIEN) Q "^"
"RTN","PRSPUT3",179,0)
 ;
"RTN","PRSPUT3",180,0)
 S LASTPP="" ; last PP
"RTN","PRSPUT3",181,0)
 S PPC=0 ; pp counter
"RTN","PRSPUT3",182,0)
 ; loop thru PPs in memo
"RTN","PRSPUT3",183,0)
 S MPPIEN=0 F  S MPPIEN=$O(^PRST(458.7,MIEN,9,MPPIEN)) Q:'MPPIEN  D
"RTN","PRSPUT3",184,0)
 . S PRSX=$G(^PRST(458.7,MIEN,9,MPPIEN,0))
"RTN","PRSPUT3",185,0)
 . Q:$P(PRSX,U,2)=""  ; REG HOURS is null so PP never certified
"RTN","PRSPUT3",186,0)
 . S LASTPP=$P(PRSX,U,1)
"RTN","PRSPUT3",187,0)
 . S PPC=PPC+1
"RTN","PRSPUT3",188,0)
 ;
"RTN","PRSPUT3",189,0)
 Q LASTPP_"^"_PPC
"RTN","PRSPUT3",190,0)
 ;
"RTN","PRSPUT3",191,0)
PP8BAMT(PPAMT,PPI,PRSIEN) ; array TIMEAMTS passed by reference
"RTN","PRSPUT3",192,0)
 ; subscripted w/ types of time CODE and type of time activity 
"RTN","PRSPUT3",193,0)
 ; from PRS8VW2 table.  This routine sets each node of TIMEAMTS array
"RTN","PRSPUT3",194,0)
 ; to the total hours (week one and two) in the pp 
"RTN","PRSPUT3",195,0)
 ; for that type of time activity.
"RTN","PRSPUT3",196,0)
 ;
"RTN","PRSPUT3",197,0)
 ; SAMPLE CALL:
"RTN","PRSPUT3",198,0)
 ; S TAMTS("WP","Leave Without Pay")="" D PP8BTOT(.TAMTS,PPI,PRSIEN)
"RTN","PRSPUT3",199,0)
 ;
"RTN","PRSPUT3",200,0)
 ; SAMPLE RETURN ARRAY
"RTN","PRSPUT3",201,0)
 ; TAMTS("WP","Leave Without Pay")=12.5
"RTN","PRSPUT3",202,0)
 ;
"RTN","PRSPUT3",203,0)
 N TT,STR8B,TC,TA,WK1CD,WK2CD,AMT1,AMT2
"RTN","PRSPUT3",204,0)
 S STR8B=$$GET8B(PPI,PRSIEN)
"RTN","PRSPUT3",205,0)
 S TC=""
"RTN","PRSPUT3",206,0)
 F  S TC=$O(PPAMT(TC)) Q:TC=""  D
"RTN","PRSPUT3",207,0)
 .  S TA=""
"RTN","PRSPUT3",208,0)
 .  F  S TA=$O(PPAMT(TC,TA)) Q:TA=""  D
"RTN","PRSPUT3",209,0)
 ..    S WK1CD=$$WKTT(TC,TA,1)
"RTN","PRSPUT3",210,0)
 ..    S WK2CD=$$WKTT(TC,TA,2)
"RTN","PRSPUT3",211,0)
 ..    S AMT1=$$EXTR8BT(STR8B,WK1CD)
"RTN","PRSPUT3",212,0)
 ..    S AMT2=$$EXTR8BT(STR8B,WK2CD)
"RTN","PRSPUT3",213,0)
 ..    S PPAMT(TC,TA)=AMT1+AMT2
"RTN","PRSPUT3",214,0)
 Q
"RTN","PRSPUT3",215,0)
GET8B(PPI,PRSIEN) ; get 8b from 5 node unless corrected timecard 
"RTN","PRSPUT3",216,0)
 ;                 has been done then we need to recompute 8B
"RTN","PRSPUT3",217,0)
 N S8B
"RTN","PRSPUT3",218,0)
 I $$CORRECT(PPI,PRSIEN) D
"RTN","PRSPUT3",219,0)
 .  N DFN,PY,VAL
"RTN","PRSPUT3",220,0)
 .; new variables used BY callers to this API because the decomp
"RTN","PRSPUT3",221,0)
 .;  kills everything in its path.
"RTN","PRSPUT3",222,0)
 .  N QT,PP,%,C0,CNT,CT,D,DAY,HDR,I,K,MEAL,SSN,ST,TT,TYP,X,X1,Y,Y1,Z,ML,Z0,Z1
"RTN","PRSPUT3",223,0)
 .  S DFN=PRSIEN
"RTN","PRSPUT3",224,0)
 .  S PY=PPI
"RTN","PRSPUT3",225,0)
 .  D ONE^PRS8
"RTN","PRSPUT3",226,0)
 .  S S8B=$E($G(VAL),33,999)
"RTN","PRSPUT3",227,0)
 E  D
"RTN","PRSPUT3",228,0)
 .  S S8B=$E($G(^PRST(458,PPI,"E",PRSIEN,5)),33,999)
"RTN","PRSPUT3",229,0)
 Q S8B
"RTN","PRSPUT3",230,0)
CORRECT(PPI,PRSIEN) ; return true if any corrected timecards exist for 
"RTN","PRSPUT3",231,0)
 ;this emp's pp that were approved by the final level supr apprl
"RTN","PRSPUT3",232,0)
 N CORRECT,STATUS,TCD
"RTN","PRSPUT3",233,0)
 S CORRECT=0
"RTN","PRSPUT3",234,0)
 Q:($G(PPI)'>0)!($G(PRSIEN)'>0)
"RTN","PRSPUT3",235,0)
 S TCD=0
"RTN","PRSPUT3",236,0)
 F  S TCD=$O(^PRST(458,PPI,"E",PRSIEN,"X",TCD)) Q:TCD'>0!(CORRECT)  D
"RTN","PRSPUT3",237,0)
 .  S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,"X",TCD,0)),U,5)
"RTN","PRSPUT3",238,0)
 .  I STATUS="P"!(STATUS="S") S CORRECT=1
"RTN","PRSPUT3",239,0)
 Q CORRECT
"RTN","PRSPUT3",240,0)
EXTR8BT(S,T) ; EXTRACT THE 8B TYPE OF TIME FROM THE STUB AND RETURN THE 
"RTN","PRSPUT3",241,0)
 ; AMOUNT OF TIME FROM WEEK ONE AND TWO FOR THIS TYPE OF TIME
"RTN","PRSPUT3",242,0)
 ; INPUT: S-8B STUB
"RTN","PRSPUT3",243,0)
 ;        T-TYPE OF TIME TO FIND ^ LENGTH OF DATA IN 8B
"RTN","PRSPUT3",244,0)
 N AMT,LEN,POS,QH,HRS
"RTN","PRSPUT3",245,0)
 S AMT="0.0"
"RTN","PRSPUT3",246,0)
 S POS=$F(S,$P(T,U))
"RTN","PRSPUT3",247,0)
 I POS D
"RTN","PRSPUT3",248,0)
 .  S LEN=$P(T,U,2)
"RTN","PRSPUT3",249,0)
 .  S AMT=$E(S,POS,POS-1+LEN)
"RTN","PRSPUT3",250,0)
 .  S HRS=+$E(AMT,1,LEN-1)
"RTN","PRSPUT3",251,0)
 .  S QH=+$E(AMT,LEN,LEN)
"RTN","PRSPUT3",252,0)
 .  S QH=$S(QH=1:".25",QH=2:".5",QH=3:".75",1:".0")
"RTN","PRSPUT3",253,0)
 .  S AMT=HRS_QH
"RTN","PRSPUT3",254,0)
 Q AMT
"RTN","PRSPUT3",255,0)
 ;
"RTN","PRSPUT3",256,0)
WKTT(T,TA,WK) ; GET 8B STRING TIMECODE FOR WEEK ONE OR TWO AND LENGTH OF 
"RTN","PRSPUT3",257,0)
 ; THE DATA IN THE 8B STRING
"RTN","PRSPUT3",258,0)
 ;  Input:
"RTN","PRSPUT3",259,0)
 ;    T- type of time code from file 457.3
"RTN","PRSPUT3",260,0)
 ;    TA-time activity from the table in PRS8VW2 (e.g. Leave Without Pay)
"RTN","PRSPUT3",261,0)
 ;    WK-1 or 2 for the desired timecode week
"RTN","PRSPUT3",262,0)
 ;
"RTN","PRSPUT3",263,0)
 S WK=$S($G(WK)=2:2,1:1)
"RTN","PRSPUT3",264,0)
 Q:$G(T)=""
"RTN","PRSPUT3",265,0)
 N TCH1,TTEXT,CHKLN,I,FOUND,E,TTABLE,CHUNK,TABLEI,WKTTCODE
"RTN","PRSPUT3",266,0)
 S FOUND=0
"RTN","PRSPUT3",267,0)
 ;
"RTN","PRSPUT3",268,0)
 S TCH1=$E(T,1,1)
"RTN","PRSPUT3",269,0)
 D E2^PRS8VW
"RTN","PRSPUT3",270,0)
 S CHKLN=$P($T(@(TCH1)+0^PRS8VW2),";;",2)
"RTN","PRSPUT3",271,0)
 F I=1:1:$L(CHKLN,"^") D  Q:FOUND
"RTN","PRSPUT3",272,0)
 .  S CHUNK=$P(CHKLN,U,I)
"RTN","PRSPUT3",273,0)
 .  S TABLEI=$P(CHUNK,":",2)
"RTN","PRSPUT3",274,0)
 .  S WKTTCODE=TCH1_$P(CHUNK,":")
"RTN","PRSPUT3",275,0)
 .  S TTABLE=$P($T(TYP+TABLEI^PRS8VW2),";;",2)
"RTN","PRSPUT3",276,0)
 .  I TTABLE=TA,$F(E(WK),WKTTCODE) D
"RTN","PRSPUT3",277,0)
 ..   S FOUND=1
"RTN","PRSPUT3",278,0)
 ..;  When found in PRS8VW2 table return code and length
"RTN","PRSPUT3",279,0)
 ..   S WKTTCODE=WKTTCODE_U_$P(CHUNK,":",3)
"RTN","PRSPUT3",280,0)
 I 'FOUND S WKTTCODE=0
"RTN","PRSPUT3",281,0)
 Q WKTTCODE
"RTN","PRSU1B2")
0^33^B16700974^n/a
"RTN","PRSU1B2",1,0)
PRSU1B2 ;WOIFO/PLT-UTILITY ; 24-Aug-2005 10:34 AM
"RTN","PRSU1B2",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSU1B2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","PRSU1B2",4,0)
 QUIT  ; invalid entry
"RTN","PRSU1B2",5,0)
 ;
"RTN","PRSU1B2",6,0)
 ;prsa date ~1=[label]^routine, ~2=task description
"RTN","PRSU1B2",7,0)
 ;prsb data ~1=variable name/global root, ~2...
"RTN","PRSU1B2",8,0)
 ;prsc data ~1=1 if ask start time, ~2=start time (fm time/$h-time), ~3=keep until time (fm/$h)
"RTN","PRSU1B2",9,0)
 ;          ~4=i/o device name, ~5=priority(1-10),
"RTN","PRSU1B2",10,0)
 ;          ~6=task uci, ~7=volume set,
"RTN","PRSU1B2",11,0)
TASK(PRSA,PRSB,PRSC) ;ef value ^1 task number, ^2=start time(fm/$h)
"RTN","PRSU1B2",12,0)
 ;task set-up
"RTN","PRSU1B2",13,0)
 N ZTRN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSK
"RTN","PRSU1B2",14,0)
 N A,B
"RTN","PRSU1B2",15,0)
 S ZTRTN=$P(PRSA,"~"),ZTDESC=$P(PRSA,"~",2)
"RTN","PRSU1B2",16,0)
 I $G(PRSB)]"" F A=1:1 Q:$P(PRSB,"~",A,999)=""  S B=$P(PRSB,"~",A) S:B]"" @("ZTSAVE("""_B_""")=""""")
"RTN","PRSU1B2",17,0)
 S ZTIO=""
"RTN","PRSU1B2",18,0)
 S PRSC=$G(PRSC) S:'PRSC ZTDTH=$S($P(PRSC,"~",2)="":$H,1:$P(PRSC,"~",2))
"RTN","PRSU1B2",19,0)
 I $P(PRSC,"~",3,999)]"" D
"RTN","PRSU1B2",20,0)
 . S:$P(PRSC,"~",3)]"" ZTKILL=$P(PRSC,"~",3)
"RTN","PRSU1B2",21,0)
 . S:$P(PRSC,"~",4)]"" ZTIO=$P(PRSC,"~",4)
"RTN","PRSU1B2",22,0)
 . S:$P(PRSC,"~",5)]"" ZTPRI=$P(PRSC,"~",5)
"RTN","PRSU1B2",23,0)
 . S:$P(PRSC,"~",6)]"" ZTUCI=$P(PRSC,"~",6)
"RTN","PRSU1B2",24,0)
 . S:$P(PRSC,"~",7)]"" ZTCPU=$P(PRSC,"~",7)
"RTN","PRSU1B2",25,0)
 . QUIT
"RTN","PRSU1B2",26,0)
 D ^%ZTLOAD
"RTN","PRSU1B2",27,0)
 QUIT $G(ZTSK)_"^"_$G(ZTSK("D"))
"RTN","PRSU1B2",28,0)
 ;
"RTN","PRSU1B2",29,0)
 ;PRSA data ^1=message subject, ^2=message sender's name (option)
"RTN","PRSU1B2",30,0)
 ;xmtext text array name with left parenthesis
"RTN","PRSU1B2",31,0)
 ;.xmy recipients ri/name, group array, return value ien of 3.9
"RTN","PRSU1B2",32,0)
 ;.xmrou routine name array
"RTN","PRSU1B2",33,0)
 ;.xmstrip striped character array
"RTN","PRSU1B2",34,0)
MM(PRSA,XMTEXT,XMY,XMROU,XMSTRIP) ;mail message sending
"RTN","PRSU1B2",35,0)
 N XMSUB,XMDUZ
"RTN","PRSU1B2",36,0)
 S XMSUB=$P(PRSA,"^") S:$P(PRSA,"^",2)]"" XMDUZ=$P(PRSA,"^",2)
"RTN","PRSU1B2",37,0)
 D ^XMD K XMY S XMY=XMZ K XMZ
"RTN","PRSU1B2",38,0)
 QUIT
"RTN","PRSU1B2",39,0)
 ;
"RTN","PRSU1B2",40,0)
 ;
"RTN","PRSU1B2",41,0)
 ;PRSA=package name (.01) in file 9.4
"RTN","PRSU1B2",42,0)
PKGVER(PRSA) ;ef - ^1=ri of file 9.4, ^2=version number from node version if defined
"RTN","PRSU1B2",43,0)
 ;     ^3=version number from node 22, ^4=version install date from node 22
"RTN","PRSU1B2",44,0)
 N A,B,C
"RTN","PRSU1B2",45,0)
 S (A,B)=""
"RTN","PRSU1B2",46,0)
 Q:$D(PRSPKVER(PRSA)) PRSPKVER(PRSA)
"RTN","PRSU1B2",47,0)
 S A=$O(^DIC(9.4,"B",PRSA,""))
"RTN","PRSU1B2",48,0)
 I A S PRSPKVER(PRSA)=A,$P(PRSPKVER(PRSA),"^",2)=$P($G(^DIC(9.4,A,"VERSION")),"^"),$P(PRSPKVER(PRSA),"^",3)=$P(PRSPKVER(PRSA),"^",2) D:$P(PRSPKVER(PRSA),"^",2)=""
"RTN","PRSU1B2",49,0)
 . D EN^DDIOL("Package is defined, but has not current version data.")
"RTN","PRSU1B2",50,0)
 . D EN^DDIOL("Please call IRM!")
"RTN","PRSU1B2",51,0)
 S:'A PRSPKVER(PRSA)=""
"RTN","PRSU1B2",52,0)
 QUIT PRSPKVER(PRSA)
"RTN","PRSU1B2",53,0)
 ;
"RTN","PRSU1B2",54,0)
 ;A=date/time, B='I' if fileman date/time, 'H' if $H date/time, 'E' if external date
"RTN","PRSU1B2",55,0)
 ;C="S" if second required
"RTN","PRSU1B2",56,0)
DT(A,B,C) ;ef value: -1 if wrong format,  ^1=fileman.time, ^2=$h date,time
"RTN","PRSU1B2",57,0)
 ;          ^3-week day, ^4=mm/dd/yy@time, ^5=alpha date@time
"RTN","PRSU1B2",58,0)
 N %DT,X,Y,Z,%H,%,%T,%Y
"RTN","PRSU1B2",59,0)
 S:'$D(C) C="" S Z=""
"RTN","PRSU1B2",60,0)
 I B="E" D  QUIT:Z=-1 Z
"RTN","PRSU1B2",61,0)
 . S %DT="T" S:C="S" %DT=%DT_"S"
"RTN","PRSU1B2",62,0)
 . S X=A D ^%DT S Z=Y
"RTN","PRSU1B2",63,0)
 I B="H" D
"RTN","PRSU1B2",64,0)
 . S %H=+A D YMD^%DTC S Z=X,%=$P(A,",",2) D S^%DTC S Z=Z_$S(%=0:".0000",C="S":%,1:$E(%,1,5))
"RTN","PRSU1B2",65,0)
 S:Z="" Z=A
"RTN","PRSU1B2",66,0)
 S X=Z D H^%DTC S $P(Z,"^",2)=%H_","_%T,$P(Z,"^",3)=%Y
"RTN","PRSU1B2",67,0)
 S Y=$P(Z,"^") S:C="S" %DT="S" D DD^%DT S $P(Z,"^",5)=Y,A=$P(Y,"@",2)
"RTN","PRSU1B2",68,0)
 S $P(Z,"^",4)=$E(Z,4,5)_"/"_$E(Z,6,7)_"/"_$E(Z,2,3)
"RTN","PRSU1B2",69,0)
 S:$P(Z,"^")["." $P(Z,"^",4)=$P(Z,"^",4)_"@"_$TR(A,":",""),$P(Z,"^")=+Z
"RTN","PRSU1B2",70,0)
 QUIT Z
"RTN","PRSU1B2",71,0)
 ;
"RTN","PRSU1B2",72,0)
 ;a - the date, b - date format:E - external, I - internal, H - $h
"RTN","PRSU1B2",73,0)
DTPP(A,B) ;ef - -1 if date in wrong format, day #^pay period yy-pp^pp start date cyymmdd^pp ending date cyymmdd^pp start $h date
"RTN","PRSU1B2",74,0)
 ;assume the pp '06-01' starting 1/8/2006 with $h=60273 and fm date 3060108
"RTN","PRSU1B2",75,0)
 N C,D,E,F,G
"RTN","PRSU1B2",76,0)
 S E="60273^3060108^06-01"
"RTN","PRSU1B2",77,0)
 S D=$$DT(A,B),F=+$P(D,U,2) I D=-1 QUIT D
"RTN","PRSU1B2",78,0)
 ;find the first pay period date of the year
"RTN","PRSU1B2",79,0)
 S D=$E(D,1,3)_"0101",B=$$DT(D,"I"),D=+$P(B,U,2) F G=D:1:D+14 QUIT:G-E#14=0
"RTN","PRSU1B2",80,0)
 I G'>F S $P(C,U,2)=$E(B,2,3)_"-"_$E(F-G\14+101,2,3)
"RTN","PRSU1B2",81,0)
 E  S D=$E(B,1,3)-1_"0101",B=$$DT(D,"I"),D=+$P(B,U,2) F G=D:1:D+14 I E-G#14=0 S $P(C,U,2)=$E(B,2,3)_"-"_$E(F-G\14+101,2,3) QUIT
"RTN","PRSU1B2",82,0)
 S $P(C,U)=F-G#14+1,$P(C,U,3)=$E($$DT(F-C+1,"H"),1,7),$P(C,U,4)=$E($$DT(F-C+14,"H"),1,7),$P(C,U,5)=F-C+1
"RTN","PRSU1B2",83,0)
 QUIT C
"RTN","PRSU1B2",84,0)
 ;
"RTN","PRSU1B2",85,0)
 ;a - pay period yyyy-nn or yy-nn, b - day #
"RTN","PRSU1B2",86,0)
PPDT(A,B) ;ef- -1 if a,b invalid, date of day # cyymmdd^pp start date cyymmdd^pp ending date^pp start $h date
"RTN","PRSU1B2",87,0)
 ;assume 19yy if yy>70 and 20yy if yy'>70
"RTN","PRSU1B2",88,0)
 ;assume the pp '06-01' starting 1/8/2006 with $h=60273 and fm date 3060108
"RTN","PRSU1B2",89,0)
 N C,D,E,F,G
"RTN","PRSU1B2",90,0)
 S E="60273^3060108^06-01"
"RTN","PRSU1B2",91,0)
 I A'?1(2N1"-"2N,4N1"-"2N)!(B'?1.2N)!(B>14)!(B<1) QUIT -1
"RTN","PRSU1B2",92,0)
 I $P(A,"-",2)<1!($P(A,"-",2)>27) QUIT -1
"RTN","PRSU1B2",93,0)
 S D=$P(A,"-") I D?2N S D=$S(D>70:1900,1:2000)+D
"RTN","PRSU1B2",94,0)
 ;find the first pay period date of the year
"RTN","PRSU1B2",95,0)
 S C=$$DT("1/1/"_D,"E"),F=$P(C,U,2) F G=F:1:F+14 QUIT:G-E#14=0
"RTN","PRSU1B2",96,0)
 S C=$P(A,"-",2)-1*14+G,C=$E($$DT(C+B-1,"H"),1,7)_U_$E($$DT(C,"H"),1,7)_U_$E($$DT(C+13,"H"),1,7)_U_C
"RTN","PRSU1B2",97,0)
 I $P(A,"-",2)>24 S F=$$DT("1/1/"_(D+1),"E"),F=$P(F,U,2) F B=F:1:F+14 I B-E#14=0 S:B-G/14<$P(A,"-",2) C="-1^"_(B-G/14) QUIT
"RTN","PRSU1B2",98,0)
 QUIT C
"RTN","PRSU1B2",99,0)
 ;
"RTN","PRSU1B2",100,0)
 ; a= ien of 450, b=pay period yyyy-pp or yy-pp or ien of file #458
"RTN","PRSU1B2",101,0)
RSHR(A,B) ;ef - ^1-first week recess hrs in file 458.8, ^2 - second week recess hrs
"RTN","PRSU1B2",102,0)
 N C
"RTN","PRSU1B2",103,0)
 S:B?1.N B=$P(^PRST(458,B,0),U) S:B?2N1"-".E B=$S(B<70:20,1:19)_B
"RTN","PRSU1B2",104,0)
 D RSPP^PRSARC05(.C,A,B)
"RTN","PRSU1B2",105,0)
 QUIT +$G(C(+$$PPDT(B,1)))_"^"_+$G(C(+$$PPDT(B,8)))
"RTN","PRSU1B2",106,0)
 ;
"RTN","PRSU1B2",107,0)
 ;a=8b string, b=week1 code^value length^week2 code^value length, c=1 if 3-digit hr
"RTN","PRSU1B2",108,0)
CD8B(A,B,C) ;ef - ^1=week 1 value (hours if c=1), ^2=week 2 value (hours if c=1)
"RTN","PRSU1B2",109,0)
 N D,E
"RTN","PRSU1B2",110,0)
 S D=$E(A,33,999),E=$P(D,$P(B,U),2),D=$P(D,$P(B,U,3),2)
"RTN","PRSU1B2",111,0)
 S:E]"" E=$E(E,1,$P(B,U,2)),E=$S(C=1:E/10+(E#10*.15),1:E) S:D]"" D=$E(D,1,$P(B,U,4)),D=$S(C=1:D/10+(D#10*.15),1:D)
"RTN","PRSU1B2",112,0)
 QUIT $G(E)_U_$G(D)
"RTN","PRSXP112")
0^56^B1188446^n/a
"RTN","PRSXP112",1,0)
PRSXP112 ;WOIFO/JAH - PAID Parameter post-init for p 112 ;7/25/07
"RTN","PRSXP112",2,0)
 ;;4.0;PAID;**112**;Sep 21, 1995;Build 54
"RTN","PRSXP112",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSXP112",4,0)
 Q
"RTN","PRSXP112",5,0)
P112POST ; Initialize parameter file for the institution installing
"RTN","PRSXP112",6,0)
 ; the patch
"RTN","PRSXP112",7,0)
 ;
"RTN","PRSXP112",8,0)
 ; Create entry in #456 and add populate fields
"RTN","PRSXP112",9,0)
 N PRSFDA,IEN456,INST
"RTN","PRSXP112",10,0)
 S INST=+$$KSP^XUPARAM("INST") ;   INSTITUTION
"RTN","PRSXP112",11,0)
 I (INST>0),($O(^PRST(456,"B",INST,0))>0) Q
"RTN","PRSXP112",12,0)
 S PRSFDA(456,"+1,",.01)=INST ;   INSTITUTION
"RTN","PRSXP112",13,0)
 D UPDATE^DIE("","PRSFDA","IEN456"),MSG^DIALOG()
"RTN","PRSXP112",14,0)
 S IEN456=IEN456(1)_","
"RTN","PRSXP112",15,0)
 S PRSFDA(456,IEN456,1)=1 ;  TURN BULLETIN FLAG ON
"RTN","PRSXP112",16,0)
 S PRSFDA(456,IEN456,2)=0 ; INIT Bulletins sent
"RTN","PRSXP112",17,0)
 S PRSFDA(456,IEN456,3)=5 ; INIT Bulletin Limit
"RTN","PRSXP112",18,0)
 D FILE^DIE("","PRSFDA",),MSG^DIALOG()
"RTN","PRSXP112",19,0)
 Q
"SEC","^DIC",456,456,0,"AUDIT")
@
"SEC","^DIC",456,456,0,"DD")
@
"SEC","^DIC",456,456,0,"DEL")
@
"SEC","^DIC",456,456,0,"LAYGO")
@
"SEC","^DIC",456,456,0,"RD")
@
"SEC","^DIC",456,456,0,"WR")
@
"VER")
8.0^22.0
"^DD",455.1,455.1,0)
FIELD^^1^2
"^DD",455.1,455.1,0,"DDA")
N
"^DD",455.1,455.1,0,"IX","B",455.1,.01)

"^DD",455.1,455.1,0,"NM","8B ERROR MESSAGE")

"^DD",455.1,455.1,.01,0)
ERROR #^RNJ4,0^^0;1^K:+X'=X!(X>1000)!(X<1)!(X?.E1"."1N.N) X I $D(X) S DINUM=X
"^DD",455.1,455.1,.01,1,0)
^.1
"^DD",455.1,455.1,.01,1,1,0)
455.1^B
"^DD",455.1,455.1,.01,1,1,1)
S ^PRST(455.1,"B",$E(X,1,30),DA)=""
"^DD",455.1,455.1,.01,1,1,2)
K ^PRST(455.1,"B",$E(X,1,30),DA)
"^DD",455.1,455.1,.01,3)
Type a Number between 1 and 1000, 0 Decimal Digits
"^DD",455.1,455.1,.01,21,0)
^^3^3^2890327^
"^DD",455.1,455.1,.01,21,1,0)
This field contains an arbitrary number assigned to each error
"^DD",455.1,455.1,.01,21,2,0)
message. However, these numbers are referred to by various edit
"^DD",455.1,455.1,.01,21,3,0)
programs and should not be altered.
"^DD",455.1,455.1,1,0)
MESSAGE^455.11^^E;0
"^DD",455.1,455.1,1,21,0)
^^1^1^2890327^
"^DD",455.1,455.1,1,21,1,0)
This field contains the text of the error message.
"^DD",455.1,455.11,0)
MESSAGE SUB-FIELD^^.01^1
"^DD",455.1,455.11,0,"NM","MESSAGE")

"^DD",455.1,455.11,0,"UP")
455.1
"^DD",455.1,455.11,.01,0)
MESSAGE^W^^0;1^Q
"^DD",455.1,455.11,.01,21,0)
^^1^1^2890327^
"^DD",455.1,455.11,.01,21,1,0)
This field contains the text of the error message.
"^DD",456,456,0)
FIELD^^4^5
"^DD",456,456,0,"DT")
3070727
"^DD",456,456,0,"IX","B",456,.01)

"^DD",456,456,0,"NM","PAID PARAMETERS")

"^DD",456,456,.01,0)
INSTITUTION^R*P4'^DIC(4,^0;1^S DIC("S")="I +$$GET1^DIQ(4,+Y,99)=+$$STA^XUAF4(+$$KSP^XUPARAM(""INST""))" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",456,456,.01,1,0)
^.1
"^DD",456,456,.01,1,1,0)
456^B
"^DD",456,456,.01,1,1,1)
S ^PRST(456,"B",$E(X,1,30),DA)=""
"^DD",456,456,.01,1,1,2)
K ^PRST(456,"B",$E(X,1,30),DA)
"^DD",456,456,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",456,456,.01,12)
allow only valid local stations
"^DD",456,456,.01,12.1)
S DIC("S")="I +$$GET1^DIQ(4,+Y,99)=+$$STA^XUAF4(+$$KSP^XUPARAM(""INST""))"
"^DD",456,456,.01,21,0)
^^1^1^3070725^
"^DD",456,456,.01,21,1,0)
Please enter the DIVISION these parameters apply to.
"^DD",456,456,.01,23,0)
^^2^2^3070725^
"^DD",456,456,.01,23,1,0)
One entry per division for site parameters to handle multi divisional 
"^DD",456,456,.01,23,2,0)
sites.
"^DD",456,456,.01,"DT")
3070727
"^DD",456,456,1,0)
SEND AWS BULLETIN^S^0:NO;1:YES;^0;2^Q
"^DD",456,456,1,3)
Answer Yes to allow 9mo/3mo AWS bulletin to be sent to developers
"^DD",456,456,1,"DT")
3070725
"^DD",456,456,2,0)
AWS 9MO BULLETIN COUNT^NJ5,0I^^0;3^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1.N) X
"^DD",456,456,2,3)
Type a number between 0 and 99999, 0 Decimal Digits
"^DD",456,456,2,21,0)
^^3^3^3070730^
"^DD",456,456,2,21,1,0)
This field counts the number of bulletins that have been sent to the
"^DD",456,456,2,21,2,0)
developers notifying them when an employee has been identified as being
"^DD",456,456,2,21,3,0)
converted or beginning to work the 9 mo/3 mo AWS.
"^DD",456,456,2,23,0)
^^2^2^3070730^
"^DD",456,456,2,23,1,0)
Counter updated by code when bulletin is sent.  Code may impose a limit on
"^DD",456,456,2,23,2,0)
how many bulletins are sent.  Users should not edit this field.
"^DD",456,456,2,"DT")
3070730
"^DD",456,456,3,0)
AWS BULLETIN LIMIT^NJ4,0^^0;4^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1.N) X
"^DD",456,456,3,3)
Type a number between 0 and 9999, 0 Decimal Digits
"^DD",456,456,3,21,0)
^^3^3^3070725^
"^DD",456,456,3,21,1,0)
Please enter the number of bulletins that should be sent to the 
"^DD",456,456,3,21,2,0)
developers, once an employee is identified as working the 9 month/3 month 
"^DD",456,456,3,21,3,0)
alternative work schedule (AWS).
"^DD",456,456,3,23,0)
^^2^2^3070725^
"^DD",456,456,3,23,1,0)
Limit number of bulletins by not sending the bulletin once this limit is 
"^DD",456,456,3,23,2,0)
reached.  The limit is stored in field 2--AWS BULLETIN COUNTER.
"^DD",456,456,3,"DT")
3070725
"^DD",456,456,4,0)
AWS 36-40 BULLETIN COUNT^NJ4,0I^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1.N) X
"^DD",456,456,4,3)
Type a number between 0 and 9999, 0 Decimal Digits
"^DD",456,456,4,21,0)
^^3^3^3070727^
"^DD",456,456,4,21,1,0)
This field counts the number of bulletins that have been sent to the 
"^DD",456,456,4,21,2,0)
developers notifying them when an employee has been identified as being 
"^DD",456,456,4,21,3,0)
converted or beginning to work the 36/40 AWS.
"^DD",456,456,4,"DT")
3070730
"^DD",457.3,457.3,0)
FIELD^^2^3
"^DD",457.3,457.3,0,"DT")
2920605
"^DD",457.3,457.3,0,"ID","WRITE")
W "   ",$P(^(0),U,2)
"^DD",457.3,457.3,0,"IX","B",457.3,.01)

"^DD",457.3,457.3,0,"NM","TYPE OF TIME")

"^DD",457.3,457.3,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",457.3,457.3,.01,1,0)
^.1
"^DD",457.3,457.3,.01,1,1,0)
457.3^B
"^DD",457.3,457.3,.01,1,1,1)
S ^PRST(457.3,"B",$E(X,1,30),DA)=""
"^DD",457.3,457.3,.01,1,1,2)
K ^PRST(457.3,"B",$E(X,1,30),DA)
"^DD",457.3,457.3,.01,3)
Answer must be 2 characters in length.
"^DD",457.3,457.3,.01,21,0)
^^2^2^2921105^
"^DD",457.3,457.3,.01,21,1,0)
The two character code that identifies a type of time used in time card
"^DD",457.3,457.3,.01,21,2,0)
posting.
"^DD",457.3,457.3,.01,"DT")
2920117
"^DD",457.3,457.3,1,0)
SHORT DESCRIPTION^F^^0;2^K:$L(X)>10!($L(X)<1) X
"^DD",457.3,457.3,1,3)
Answer must be 1-10 characters in length.
"^DD",457.3,457.3,1,21,0)
^^1^1^2921105^
"^DD",457.3,457.3,1,21,1,0)
A short description of the type of time used in time card posting.
"^DD",457.3,457.3,1,"DT")
2920117
"^DD",457.3,457.3,2,0)
LONG DESCRIPTION^F^^0;3^K:$L(X)>50!($L(X)<3) X
"^DD",457.3,457.3,2,3)
Answer must be 3-50 characters in length.
"^DD",457.3,457.3,2,21,0)
^^1^1^2921105^
"^DD",457.3,457.3,2,21,1,0)
The full description of the type of time used in time card posting.
"^DD",457.3,457.3,2,"DT")
2920117
"^DD",457.4,457.4,0)
FIELD^^5^4
"^DD",457.4,457.4,0,"DT")
2920723
"^DD",457.4,457.4,0,"ID","WRITE")
W "   ",$P(^(0),U,2)
"^DD",457.4,457.4,0,"IX","B",457.4,.01)

"^DD",457.4,457.4,0,"IX","C",457.4,1)

"^DD",457.4,457.4,0,"IX","D",457.4,4)

"^DD",457.4,457.4,0,"NM","TIME REMARKS")

"^DD",457.4,457.4,0,"PT",458.02,44)

"^DD",457.4,457.4,0,"PT",458.02,48)

"^DD",457.4,457.4,0,"PT",458.02,52)

"^DD",457.4,457.4,0,"PT",458.02,56)

"^DD",457.4,457.4,0,"PT",458.02,60)

"^DD",457.4,457.4,0,"PT",458.02,64)

"^DD",457.4,457.4,0,"PT",458.02,68)

"^DD",457.4,457.4,0,"PT",458.02,113)

"^DD",457.4,457.4,0,"PT",458.02,118)

"^DD",457.4,457.4,0,"PT",458.02,123)

"^DD",457.4,457.4,0,"PT",458.02,128)

"^DD",457.4,457.4,0,"PT",458.02,133)

"^DD",457.4,457.4,0,"PT",458.02,138)

"^DD",457.4,457.4,0,"PT",458.02,143)

"^DD",457.4,457.4,.01,0)
DESCRIPTION^RF^^0;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>25!($L(X)<1) X
"^DD",457.4,457.4,.01,1,0)
^.1
"^DD",457.4,457.4,.01,1,1,0)
457.4^B
"^DD",457.4,457.4,.01,1,1,1)
S ^PRST(457.4,"B",$E(X,1,30),DA)=""
"^DD",457.4,457.4,.01,1,1,2)
K ^PRST(457.4,"B",$E(X,1,30),DA)
"^DD",457.4,457.4,.01,1,2,0)
^^TRIGGER^457.4^4
"^DD",457.4,457.4,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^PRST(457.4,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y X ^DD(457.4,.01,1,2,1.1) X ^DD(457.4,.01,1,2,1.4)
"^DD",457.4,457.4,.01,1,2,1.1)
S X=DIV S X=DIV X "F %=1:1:$L(X) S:$E(X,%)?1L X=$E(X,0,%-1)_$C($A(X,%)-32)_$E(X,%+1,999)"
"^DD",457.4,457.4,.01,1,2,1.4)
S DIH=$S($D(^PRST(457.4,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=457.4,DIG=4 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",457.4,457.4,.01,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^PRST(457.4,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(457.4,.01,1,2,2.4)
"^DD",457.4,457.4,.01,1,2,2.4)
S DIH=$S($D(^PRST(457.4,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=457.4,DIG=4 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",457.4,457.4,.01,1,2,"CREATE VALUE")
UPPERCASE(DESCRIPTION)
"^DD",457.4,457.4,.01,1,2,"DELETE VALUE")
@
"^DD",457.4,457.4,.01,1,2,"DT")
2920723
"^DD",457.4,457.4,.01,1,2,"FIELD")
UPPERCASE NAME
"^DD",457.4,457.4,.01,3)
Answer must be 1-25 characters in length.
"^DD",457.4,457.4,.01,21,0)
^^1^1^2921105^
"^DD",457.4,457.4,.01,21,1,0)
A description of the time remark.
"^DD",457.4,457.4,.01,"DT")
2920723
"^DD",457.4,457.4,1,0)
CODE^RNJ2,0X^^0;2^K:X'=DA X
"^DD",457.4,457.4,1,1,0)
^.1
"^DD",457.4,457.4,1,1,1,0)
457.4^C
"^DD",457.4,457.4,1,1,1,1)
S ^PRST(457.4,"C",$E(X,1,30),DA)=""
"^DD",457.4,457.4,1,1,1,2)
K ^PRST(457.4,"C",$E(X,1,30),DA)
"^DD",457.4,457.4,1,1,1,"DT")
2920414
"^DD",457.4,457.4,1,3)
Type a Number between 1 and 99, 0 Decimal Digits
"^DD",457.4,457.4,1,21,0)
^^1^1^2921105^
"^DD",457.4,457.4,1,21,1,0)
A numeric code that identifies the time remark.
"^DD",457.4,457.4,1,"DT")
2920414
"^DD",457.4,457.4,4,0)
UPPERCASE NAME^RF^^0;4^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<3) X
"^DD",457.4,457.4,4,1,0)
^.1
"^DD",457.4,457.4,4,1,1,0)
457.4^D
"^DD",457.4,457.4,4,1,1,1)
S ^PRST(457.4,"D",$E(X,1,30),DA)=""
"^DD",457.4,457.4,4,1,1,2)
K ^PRST(457.4,"D",$E(X,1,30),DA)
"^DD",457.4,457.4,4,1,1,"DT")
2920723
"^DD",457.4,457.4,4,3)
Answer must be 3-30 characters in length.
"^DD",457.4,457.4,4,5,1,0)
457.4^.01^2
"^DD",457.4,457.4,4,9)
^
"^DD",457.4,457.4,4,21,0)
^^1^1^2921105^
"^DD",457.4,457.4,4,21,1,0)
The DESCRIPTION field of the time remark displayed in uppercase letters.
"^DD",457.4,457.4,4,"DT")
2920723
"^DD",457.4,457.4,5,0)
APPLICABLE TYPES OF TIME^F^^0;3^K:$L(X)>40!($L(X)<2) X
"^DD",457.4,457.4,5,3)
Answer must be 2-40 characters in length.
"^DD",457.4,457.4,5,21,0)
^^2^2^2921105^
"^DD",457.4,457.4,5,21,1,0)
A character string containing the two letter codes, separated by a space,
"^DD",457.4,457.4,5,21,2,0)
for the type of time associated with this time remark.
"^DD",457.4,457.4,5,"DT")
2920721
"^DD",457.5,457.5,0)
FIELD^^20^3
"^DD",457.5,457.5,0,"DT")
2920601
"^DD",457.5,457.5,0,"IX","AC",457.5,1)

"^DD",457.5,457.5,0,"IX","B",457.5,.01)

"^DD",457.5,457.5,0,"NM","PAY ENTITLEMENT")

"^DD",457.5,457.5,0,"PT",458.01,4)

"^DD",457.5,457.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<5) X
"^DD",457.5,457.5,.01,1,0)
^.1
"^DD",457.5,457.5,.01,1,1,0)
457.5^B
"^DD",457.5,457.5,.01,1,1,1)
S ^PRST(457.5,"B",$E(X,1,30),DA)=""
"^DD",457.5,457.5,.01,1,1,2)
K ^PRST(457.5,"B",$E(X,1,30),DA)
"^DD",457.5,457.5,.01,3)
Answer must be 5-30 characters in length.
"^DD",457.5,457.5,.01,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,.01,21,1,0)
The name of the pay entitlement character string.
"^DD",457.5,457.5,.01,"DT")
2920601
"^DD",457.5,457.5,1,0)
CODE^RF^^0;2^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>4!($L(X)<3) X
"^DD",457.5,457.5,1,1,0)
^.1
"^DD",457.5,457.5,1,1,1,0)
457.5^AC
"^DD",457.5,457.5,1,1,1,1)
S ^PRST(457.5,"AC",$E(X,1,30),DA)=""
"^DD",457.5,457.5,1,1,1,2)
K ^PRST(457.5,"AC",$E(X,1,30),DA)
"^DD",457.5,457.5,1,1,1,"DT")
2920420
"^DD",457.5,457.5,1,3)
Answer must be 3-4 characters in length.
"^DD",457.5,457.5,1,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,1,21,1,0)
A code that identifies the pay entitlement string.
"^DD",457.5,457.5,1,"DT")
2920420
"^DD",457.5,457.5,20,0)
ENTITLEMENT STRING^RF^^1;1^K:$L(X)>50!($L(X)<38) X
"^DD",457.5,457.5,20,3)
Answer must be 38-50 characters in length.
"^DD",457.5,457.5,20,21,0)
^^1^1^2921105^
"^DD",457.5,457.5,20,21,1,0)
The pay entitlement character string.
"^DD",457.5,457.5,20,"DT")
2920420
"^DD",458.8,458.8,0)
FIELD^^1.1^5
"^DD",458.8,458.8,0,"DDA")
N
"^DD",458.8,458.8,0,"DT")
3061205
"^DD",458.8,458.8,0,"ID",1)
W:$D(^(3)) "   ",$P(^(3),U,1)
"^DD",458.8,458.8,0,"IX","B",458.8,.01)

"^DD",458.8,458.8,0,"IX","C",458.8,1)

"^DD",458.8,458.8,0,"NM","RECESS TRACKING")

"^DD",458.8,458.8,0,"VRPK")
PRS
"^DD",458.8,458.8,.01,0)
NURSE^RP450'^PRSPC(^0;1^Q
"^DD",458.8,458.8,.01,1,0)
^.1
"^DD",458.8,458.8,.01,1,1,0)
458.8^B
"^DD",458.8,458.8,.01,1,1,1)
S ^PRST(458.8,"B",$E(X,1,30),DA)=""
"^DD",458.8,458.8,.01,1,1,2)
K ^PRST(458.8,"B",$E(X,1,30),DA)
"^DD",458.8,458.8,.01,3)
Select Nurses on 9-month AWS
"^DD",458.8,458.8,.01,"DT")
3061114
"^DD",458.8,458.8,1,0)
FISCAL YEAR^RF^^3;1^K:$L(X)>4!($L(X)<4)!'(X?4.N) X
"^DD",458.8,458.8,1,1,0)
^.1
"^DD",458.8,458.8,1,1,1,0)
458.8^C
"^DD",458.8,458.8,1,1,1,1)
S ^PRST(458.8,"C",$E(X,1,30),DA)=""
"^DD",458.8,458.8,1,1,1,2)
K ^PRST(458.8,"C",$E(X,1,30),DA)
"^DD",458.8,458.8,1,1,1,"%D",0)
^^1^1^3061214^
"^DD",458.8,458.8,1,1,1,"%D",1,0)
whole file cross reference by fiscal year.
"^DD",458.8,458.8,1,1,1,"DT")
3061214
"^DD",458.8,458.8,1,3)
Answer must be 4 characters in length.
"^DD",458.8,458.8,1,21,0)
^.001^26^26^3061114^^^
"^DD",458.8,458.8,1,21,1,0)
This is the fiscal year during which the 9-month AWS is effective.
"^DD",458.8,458.8,1,21,2,0)
The fiscal year for 2006 (FY06, sometimes written FY05-06) is from
"^DD",458.8,458.8,1,21,3,0)
October 1, 2005 through September 30, 2006.  However, the fiscal year
"^DD",458.8,458.8,1,21,4,0)
for purposes of the 9-month AWS will be governed also by complete pay 
"^DD",458.8,458.8,1,21,5,0)
periods, since the nurses normal hours=80 and duty basis = part-time, 
"^DD",458.8,458.8,1,21,6,0)
must be in effect for the entire pay period. Thus some 9-month AWS
"^DD",458.8,458.8,1,21,7,0)
fiscal years may have 50, 52 or 54 weeks.  The fiscal year is defined
"^DD",458.8,458.8,1,21,8,0)
as the 12 months from the first full pay period after October 1 
"^DD",458.8,458.8,1,21,9,0)
through the full pay period that contains September 30.  In the
"^DD",458.8,458.8,1,21,10,0)
example, September 30, 2007 is the first day of pay period 20 and
"^DD",458.8,458.8,1,21,11,0)
thus the entire pay period is included in the weeks for the 9-month
"^DD",458.8,458.8,1,21,12,0)
AWS schedule for FY07.  The last pay period--weeks 53 and 54--are
"^DD",458.8,458.8,1,21,13,0)
also part of the fiscal year for the AWS since September 30 is in
"^DD",458.8,458.8,1,21,14,0)
that pay period.
"^DD",458.8,458.8,1,21,15,0)
         
"^DD",458.8,458.8,1,21,16,0)
 Week   PayPd Sun Mon Tue Wed Thu Fri Sat
"^DD",458.8,458.8,1,21,17,0)
        =============Oct 2006============
"^DD",458.8,458.8,1,21,18,0)
  1     06-20   1   2   3   4   5   6   7
"^DD",458.8,458.8,1,21,19,0)
  2             8   9  10  11  12  13  14
"^DD",458.8,458.8,1,21,20,0)
  3     06-21  15  16  17  18  19  20  21
"^DD",458.8,458.8,1,21,21,0)
        ...
"^DD",458.8,458.8,1,21,22,0)
 51     07-19  16  17  18  19  20  21  22
"^DD",458.8,458.8,1,21,23,0)
 52            23  24  25  26  27  28  29
"^DD",458.8,458.8,1,21,24,0)
 53     07-20  30   1   2   3   4   5   6
"^DD",458.8,458.8,1,21,25,0)
        =============Oct 2007============
"^DD",458.8,458.8,1,21,26,0)
 54             7   8   9  10  11  12  13
"^DD",458.8,458.8,1,"DT")
3061214
"^DD",458.8,458.8,1.1,0)
AWS START DATE^D^^3;2^S %DT="EX" D ^%DT S X=Y K:3061001>X X
"^DD",458.8,458.8,1.1,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2006
"^DD",458.8,458.8,1.1,"DT")
3061019
"^DD",458.8,458.8,2,0)
RECESS WEEKS^458.82^^1;0
"^DD",458.8,458.8,2,21,0)
^^2^2^3061025^
"^DD",458.8,458.8,2,21,1,0)
This multiple contains each recess week and the hours associated with 
"^DD",458.8,458.8,2,21,2,0)
that week.
"^DD",458.8,458.8,3,0)
ENTER/EDIT DATE/TIME^458.83D^^2;0
"^DD",458.8,458.82,0)
RECESS WEEKS SUB-FIELD^^3^4
"^DD",458.8,458.82,0,"DT")
3061030
"^DD",458.8,458.82,0,"IX","B",458.82,.01)

"^DD",458.8,458.82,0,"NM","RECESS WEEKS")

"^DD",458.8,458.82,0,"UP")
458.8
"^DD",458.8,458.82,.01,0)
RECESS WEEKS^NJ2,0^^0;1^K:+X'=X!(X>54)!(X<1)!(X?.E1"."1.N) X
"^DD",458.8,458.82,.01,1,0)
^.1
"^DD",458.8,458.82,.01,1,1,0)
458.82^B
"^DD",458.8,458.82,.01,1,1,1)
S ^PRST(458.8,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",458.8,458.82,.01,1,1,2)
K ^PRST(458.8,DA(1),1,"B",$E(X,1,30),DA)
"^DD",458.8,458.82,.01,3)
Type a number between 1 and 54, 0 Decimal Digits
"^DD",458.8,458.82,.01,"DT")
3061018
"^DD",458.8,458.82,1,0)
HOURS^NJ2,0^^0;2^K:+X'=X!(X>72)!(X<0)!(X?.E1"."1.N) X
"^DD",458.8,458.82,1,3)
Type a number between 0 and 72, 0 Decimal Digits
"^DD",458.8,458.82,1,"DT")
3061018
"^DD",458.8,458.82,2,0)
DAY 1^D^^0;3^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",458.8,458.82,2,3)
(No range limit on date)
"^DD",458.8,458.82,2,"DT")
3061026
"^DD",458.8,458.82,3,0)
FULL WEEK COVERED?^S^0:NO;1:YES;^0;4^Q
"^DD",458.8,458.82,3,3)
Answer yes if the entire scheduled week is covered by recess.
"^DD",458.8,458.82,3,"DT")
3061030
"^DD",458.8,458.83,0)
ENTER/EDIT DATE/TIME SUB-FIELD^^1^2
"^DD",458.8,458.83,0,"DT")
3061205
"^DD",458.8,458.83,0,"IX","B",458.83,.01)

"^DD",458.8,458.83,0,"NM","ENTER/EDIT DATE/TIME")

"^DD",458.8,458.83,0,"UP")
458.8
"^DD",458.8,458.83,.01,0)
ENTER/EDIT DATE/TIME^D^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:3061001>X X
"^DD",458.8,458.83,.01,1,0)
^.1
"^DD",458.8,458.83,.01,1,1,0)
458.83^B
"^DD",458.8,458.83,.01,1,1,1)
S ^PRST(458.8,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",458.8,458.83,.01,1,1,2)
K ^PRST(458.8,DA(1),2,"B",$E(X,1,30),DA)
"^DD",458.8,458.83,.01,3)
TYPE A DATE NOT EARLIER THAN OCT 01, 2006
"^DD",458.8,458.83,.01,"DT")
3061019
"^DD",458.8,458.83,1,0)
USER^RP200'^VA(200,^0;2^Q
"^DD",458.8,458.83,1,3)
Enter user who entered or edited the record.
"^DD",458.8,458.83,1,"DT")
3061205
"^DIC",455.1,455.1,0)
8B ERROR MESSAGE^455.1
"^DIC",455.1,455.1,0,"GL")
^PRST(455.1,
"^DIC",455.1,455.1,"%D",0)
^^3^3^2920129^^
"^DIC",455.1,455.1,"%D",1,0)
This file contains error messages corresponding to various edit
"^DIC",455.1,455.1,"%D",2,0)
errors that may be detected during the processing and checking
"^DIC",455.1,455.1,"%D",3,0)
of an 8B record entry.
"^DIC",455.1,"B","8B ERROR MESSAGE",455.1)

"^DIC",456,456,0)
PAID PARAMETERS^456
"^DIC",456,456,0,"GL")
^PRST(456,
"^DIC",456,"B","PAID PARAMETERS",456)

"^DIC",457.3,457.3,0)
TYPE OF TIME^457.3I
"^DIC",457.3,457.3,0,"GL")
^PRST(457.3,
"^DIC",457.3,457.3,"%D",0)
^^5^5^2920601^^
"^DIC",457.3,457.3,"%D",1,0)
This file contains a list of Types of Time which may be used
"^DIC",457.3,457.3,"%D",2,0)
in posting. Most of the entries are either types of leave or
"^DIC",457.3,457.3,"%D",3,0)
Overtime/Comp time.
"^DIC",457.3,457.3,"%D",4,0)
 
"^DIC",457.3,457.3,"%D",5,0)
This file should not be altered except as instructed.
"^DIC",457.3,"B","TYPE OF TIME",457.3)

"^DIC",457.4,457.4,0)
TIME REMARKS^457.4I
"^DIC",457.4,457.4,0,"GL")
^PRST(457.4,
"^DIC",457.4,457.4,"%D",0)
^^4^4^2920723^^
"^DIC",457.4,457.4,"%D",1,0)
This file contains fixed entries to indicate special conditions
"^DIC",457.4,457.4,"%D",2,0)
related to a posted time segment.
"^DIC",457.4,457.4,"%D",3,0)
 
"^DIC",457.4,457.4,"%D",4,0)
This file should not be altered except as instructed.
"^DIC",457.4,"B","TIME REMARKS",457.4)

"^DIC",457.5,457.5,0)
PAY ENTITLEMENT^457.5
"^DIC",457.5,457.5,0,"GL")
^PRST(457.5,
"^DIC",457.5,457.5,"%D",0)
^^6^6^2920601^^
"^DIC",457.5,457.5,"%D",1,0)
This file contains a string of codes which indicate entitlement
"^DIC",457.5,457.5,"%D",2,0)
to specific type of time for different pay plan categories.
"^DIC",457.5,457.5,"%D",3,0)
The first character of the name is the Pay Plan, the second is
"^DIC",457.5,457.5,"%D",4,0)
Duty Basis, and the third is the FLSA indicator.
"^DIC",457.5,457.5,"%D",5,0)
 
"^DIC",457.5,457.5,"%D",6,0)
This file should not be altered except as instructed.
"^DIC",457.5,"B","PAY ENTITLEMENT",457.5)

"^DIC",458.8,458.8,0)
RECESS TRACKING^458.8
"^DIC",458.8,458.8,0,"GL")
^PRST(458.8,
"^DIC",458.8,458.8,"%",0)
^1.005^^0
"^DIC",458.8,458.8,"%D",0)
^1.001^8^8^3061018^^
"^DIC",458.8,458.8,"%D",1,0)
The Recess Tracking file contains records of recess periods for each 
"^DIC",458.8,458.8,"%D",2,0)
fiscal year for nurses on the 9-month AWS schedule.  Nurses on the 9-month
"^DIC",458.8,458.8,"%D",3,0)
AWS shall be required to schedule 75 percent of the fiscal year as work
"^DIC",458.8,458.8,"%D",4,0)
and 25% of the fiscal year as recess, prior to beginning the AWS.  The
"^DIC",458.8,458.8,"%D",5,0)
periods of work and recess are prorated from the first pay period in which
"^DIC",458.8,458.8,"%D",6,0)
the AWS begins and the last pay period of the fiscal year.  An ETA fiscal 
"^DIC",458.8,458.8,"%D",7,0)
year runs from the first full pay period after September 30 through the 
"^DIC",458.8,458.8,"%D",8,0)
following year and the entire pay period that contains September 30.
"^DIC",458.8,"B","RECESS TRACKING",458.8)

"BLD",7030,6)
^102
**END**
**END**
