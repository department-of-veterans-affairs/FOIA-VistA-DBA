Released DG*5.3*533 SEQ #482
Extracted from mail message
**KIDS**:DG*5.3*533^

**INSTALL NAME**
DG*5.3*533
"BLD",4560,0)
DG*5.3*533^REGISTRATION^0^3031121^y
"BLD",4560,1,0)
^^1^1^3030916^
"BLD",4560,1,1,0)
Please refer to Patch DG*5.3*533
"BLD",4560,4,0)
^9.64PA^391.23^1
"BLD",4560,4,391.23,0)
391.23
"BLD",4560,4,391.23,222)
y^y^f^^n^^y^r^n
"BLD",4560,4,"B",391.23,391.23)

"BLD",4560,"ABPKG")
n
"BLD",4560,"KRN",0)
^9.67PA^8989.52^19
"BLD",4560,"KRN",.4,0)
.4
"BLD",4560,"KRN",.401,0)
.401
"BLD",4560,"KRN",.402,0)
.402
"BLD",4560,"KRN",.403,0)
.403
"BLD",4560,"KRN",.5,0)
.5
"BLD",4560,"KRN",.84,0)
.84
"BLD",4560,"KRN",3.6,0)
3.6
"BLD",4560,"KRN",3.8,0)
3.8
"BLD",4560,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",4560,"KRN",3.8,"NM",1,0)
DG REGISTER ONCE
"BLD",4560,"KRN",3.8,"NM","B","DG REGISTER ONCE",1)

"BLD",4560,"KRN",9.2,0)
9.2
"BLD",4560,"KRN",9.8,0)
9.8
"BLD",4560,"KRN",9.8,"NM",0)
^9.68A^21^17
"BLD",4560,"KRN",9.8,"NM",1,0)
DGROAPI^^0^B3265178
"BLD",4560,"KRN",9.8,"NM",2,0)
DGRODEBR^^0^B25642758
"BLD",4560,"KRN",9.8,"NM",4,0)
DGROHLQ^^0^B10886906
"BLD",4560,"KRN",9.8,"NM",5,0)
DGROHLQ1^^0^B9477851
"BLD",4560,"KRN",9.8,"NM",6,0)
DGROHLQ2^^0^B5967124
"BLD",4560,"KRN",9.8,"NM",7,0)
DGROHLQ3^^0^B10020641
"BLD",4560,"KRN",9.8,"NM",8,0)
DGROHLR^^0^B35271600
"BLD",4560,"KRN",9.8,"NM",11,0)
DGROHLS^^0^B11501370
"BLD",4560,"KRN",9.8,"NM",12,0)
DGROHLU^^0^B15796235
"BLD",4560,"KRN",9.8,"NM",13,0)
DGROHLU1^^0^B13634833
"BLD",4560,"KRN",9.8,"NM",14,0)
DGROHLU3^^0^B34237959
"BLD",4560,"KRN",9.8,"NM",15,0)
DGROHLU4^^0^B16672998
"BLD",4560,"KRN",9.8,"NM",17,0)
DGROHLUT^^0^B21978377
"BLD",4560,"KRN",9.8,"NM",18,0)
DGROUT^^0^B14985839
"BLD",4560,"KRN",9.8,"NM",19,0)
DGROUT2^^0^B3162566
"BLD",4560,"KRN",9.8,"NM",20,0)
DGREG^^0^B43561920
"BLD",4560,"KRN",9.8,"NM",21,0)
DGROMAIL^^0^B29396861
"BLD",4560,"KRN",9.8,"NM","B","DGREG",20)

"BLD",4560,"KRN",9.8,"NM","B","DGROAPI",1)

"BLD",4560,"KRN",9.8,"NM","B","DGRODEBR",2)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLQ",4)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLQ1",5)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLQ2",6)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLQ3",7)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLR",8)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLS",11)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLU",12)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLU1",13)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLU3",14)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLU4",15)

"BLD",4560,"KRN",9.8,"NM","B","DGROHLUT",17)

"BLD",4560,"KRN",9.8,"NM","B","DGROMAIL",21)

"BLD",4560,"KRN",9.8,"NM","B","DGROUT",18)

"BLD",4560,"KRN",9.8,"NM","B","DGROUT2",19)

"BLD",4560,"KRN",19,0)
19
"BLD",4560,"KRN",19,"NM",0)
^9.68A^^
"BLD",4560,"KRN",19.1,0)
19.1
"BLD",4560,"KRN",101,0)
101
"BLD",4560,"KRN",101,"NM",0)
^9.68A^4^2
"BLD",4560,"KRN",101,"NM",2,0)
DGRO ROM ORF/R04 SUBSC^^0
"BLD",4560,"KRN",101,"NM",4,0)
DGRO ROM QRY/R02 EVENT^^0
"BLD",4560,"KRN",101,"NM","B","DGRO ROM ORF/R04 SUBSC",2)

"BLD",4560,"KRN",101,"NM","B","DGRO ROM QRY/R02 EVENT",4)

"BLD",4560,"KRN",409.61,0)
409.61
"BLD",4560,"KRN",771,0)
771
"BLD",4560,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",4560,"KRN",771,"NM",1,0)
DGRO-QRY^^0
"BLD",4560,"KRN",771,"NM",2,0)
DGRO-QRYRESP^^0
"BLD",4560,"KRN",771,"NM","B","DGRO-QRY",1)

"BLD",4560,"KRN",771,"NM","B","DGRO-QRYRESP",2)

"BLD",4560,"KRN",870,0)
870
"BLD",4560,"KRN",8989.51,0)
8989.51
"BLD",4560,"KRN",8989.52,0)
8989.52
"BLD",4560,"KRN",8994,0)
8994
"BLD",4560,"KRN","B",.4,.4)

"BLD",4560,"KRN","B",.401,.401)

"BLD",4560,"KRN","B",.402,.402)

"BLD",4560,"KRN","B",.403,.403)

"BLD",4560,"KRN","B",.5,.5)

"BLD",4560,"KRN","B",.84,.84)

"BLD",4560,"KRN","B",3.6,3.6)

"BLD",4560,"KRN","B",3.8,3.8)

"BLD",4560,"KRN","B",9.2,9.2)

"BLD",4560,"KRN","B",9.8,9.8)

"BLD",4560,"KRN","B",19,19)

"BLD",4560,"KRN","B",19.1,19.1)

"BLD",4560,"KRN","B",101,101)

"BLD",4560,"KRN","B",409.61,409.61)

"BLD",4560,"KRN","B",771,771)

"BLD",4560,"KRN","B",870,870)

"BLD",4560,"KRN","B",8989.51,8989.51)

"BLD",4560,"KRN","B",8989.52,8989.52)

"BLD",4560,"KRN","B",8994,8994)

"BLD",4560,"QUES",0)
^9.62^^
"BLD",4560,"REQB",0)
^9.611^3^3
"BLD",4560,"REQB",1,0)
IB*2.0*214^2
"BLD",4560,"REQB",2,0)
MPIF*1.0*31^2
"BLD",4560,"REQB",3,0)
DG*5.3*425^2
"BLD",4560,"REQB","B","DG*5.3*425",3)

"BLD",4560,"REQB","B","IB*2.0*214",1)

"BLD",4560,"REQB","B","MPIF*1.0*31",2)

"DATA",391.23,1,0)
OCCUPATION^2^.07^OCCUPATION^0
"DATA",391.23,2,0)
STREET ADDRESS [LINE 1]^2^.111^STREET ADDRESS [Line 1]^0
"DATA",391.23,3,0)
ZIP+4^2^.1112^ZIP + 4^0
"DATA",391.23,4,0)
STREET ADDRESS [LINE 2]^2^.112^STREET ADDRESS [Line 2]^0
"DATA",391.23,5,0)
STREET ADDRESS [LINE 3]^2^.113^STREET ADDRESS [Line 3]^0
"DATA",391.23,6,0)
CITY^2^.114^CITY^0
"DATA",391.23,7,0)
STATE^2^.115^STATE^0
"DATA",391.23,8,0)
ZIP CODE^2^.116^ZIP CODE^0
"DATA",391.23,9,0)
COUNTY^2^.117^VA COUNTY CODE^0
"DATA",391.23,10,0)
ADDRESS CHANGE DT/TM^2^.118^ADDRESS CHANGE DT/TM^0
"DATA",391.23,11,0)
ADDRESS CHANGE SOURCE^2^.119^ADDRESS CHANGE SOURCE^0
"DATA",391.23,12,0)
ADDRESS CHANGE SITE^2^.12^ADDRESS CHANGE SITE^0
"DATA",391.23,13,0)
TEMPORARY ADDRESS ACTIVE?^2^.12105^TEMPORARY ADDRESS ACTIVE? (ZTA^0
"DATA",391.23,14,0)
TEMPORARY STREET [LINE 1]^2^.1211^TEMPORARY STREET [Line 1] (ZTA^0
"DATA",391.23,15,0)
TEMPORARY ADDRESS COUNTY^2^.12111^TEMPORARY ADDRESS COUNTY (ZTA ^0
"DATA",391.23,16,0)
TEMPORARY ZIP+4^2^.12112^TEMPORARY ZIP+4 (ZTA not retur^0
"DATA",391.23,17,0)
TEMPORARY STREET [LINE 2]^2^.1212^TEMPORARY STREET [Line 2] (ZTA^0
"DATA",391.23,18,0)
TEMPORARY STREET [LINE 3]^2^.1213^TEMPORARY STREET [Line 3] (ZTA^0
"DATA",391.23,19,0)
TEMPORARY CITY^2^.1214^TEMPORARY CITY (ZTA not return^0
"DATA",391.23,20,0)
TEMPORARY STATE^2^.1215^TEMPORARY STATE (ZTA not retur^0
"DATA",391.23,21,0)
TEMPORARY ZIP CODE^2^.1216^TEMPORARY ZIP CODE (ZTA not re^0
"DATA",391.23,22,0)
TEMPORARY ADDRESS START DATE^2^.1217^TEMPORARY ADDRESS START DATE (^0
"DATA",391.23,23,0)
TEMPORARY ADDRESS END DATE^2^.1218^TEMPORARY ADDRESS END DATE (ZT^0
"DATA",391.23,24,0)
TEMPORARY PHONE NUMBER^2^.1219^TEMPORARY PHONE NUMBER (ZTA no^0
"DATA",391.23,25,0)
PHONE NUMBER [RESIDENCE]^2^.131^PHONE NUMBER RESIDENCE ^0
"DATA",391.23,26,0)
PHONE NUMBER [WORK]^2^.132^PHONE NUMBER WORK ^0
"DATA",391.23,27,0)
CONFIDENTIAL ADDRESS CATEGORY^2.141^.01^CONFIDENTIAL ADDRESS CATEGORY^0
"DATA",391.23,28,0)
CONFIDENTIAL ADDRESS ACTIVE?^2^.14105^CONFIDENTIAL ADDRESS ACTIVE (Y^0
"DATA",391.23,29,0)
CONFIDENTIAL STREET [LINE 1]^2^.1411^CONFIDENTIAL ADDRESS LINE 1^0
"DATA",391.23,30,0)
CONFIDENTIAL ADDRESS COUNTY^2^.14111^CONFIDENTIAL ADDRESS COUNTY^0
"DATA",391.23,31,0)
CONFIDENTIAL STREET [LINE 2]^2^.1412^CONFIDENTIAL ADDRESS LINE 2^0
"DATA",391.23,32,0)
CONFIDENTIAL STREET [LINE 3]^2^.1413^CONFIDENTIAL ADDRESS LINE 3^0
"DATA",391.23,33,0)
CONFIDENTIAL ADDRESS CITY^2^.1414^CONFIDENTIAL CITY^0
"DATA",391.23,34,0)
CONFIDENTIAL ADDRESS STATE^2^.1415^CONFIDENTIAL STATE^0
"DATA",391.23,35,0)
CONFIDENTIAL ADDRESS ZIP CODE^2^.1416^CONFIDENTIAL ZIP^0
"DATA",391.23,36,0)
CONFIDENTIAL START DATE^2^.1417^CONFIDENTIAL ADDRESS START DAT^0
"DATA",391.23,37,0)
CONFIDENTIAL END DATE^2^.1418^CONFIDENTIAL ADDRESS END DATE^0
"DATA",391.23,38,0)
K-WORK PHONE NUMBER^2^.21011^Business Phone Number (NK1) (N^0
"DATA",391.23,39,0)
K-NAME OF PRIMARY NOK^2^.211^Name (NK1) (Not returned to Vi^0
"DATA",391.23,40,0)
K2-WORK PHONE NUMBER^2^.211011^Business Phone Number (NK2) (N^0
"DATA",391.23,41,0)
K-RELATIONSHIP TO PATIENT^2^.212^Relationship (NK1) (Not return^0
"DATA",391.23,42,0)
K-STREET ADDRESS [LINE 1]^2^.213^STREET ADDRESS [LINE 1] (NK1) ^0
"DATA",391.23,43,0)
K-STREET ADDRESS [LINE 2]^2^.214^STREET ADDRESS [LINE 2] (NK1) ^0
"DATA",391.23,44,0)
K-STREET ADDRESS [LINE 3]^2^.215^STREET ADDRESS [LINE 3] (NK1) ^0
"DATA",391.23,45,0)
K-CITY^2^.216^CITY (NK1) (Not returned to Vi^0
"DATA",391.23,46,0)
K-STATE^2^.217^STATE (NK1) (Not returned to V^0
"DATA",391.23,47,0)
K-ZIP CODE^2^.218^ZIP (NK1) (Not returned to Vis^0
"DATA",391.23,48,0)
K-PHONE NUMBER^2^.219^Phone Number (NK1) (Not return^0
"DATA",391.23,49,0)
K2-NAME OF SECONDARY NOK^2^.2191^Name (NK2) (Not returned to Vi^0
"DATA",391.23,50,0)
K2-RELATIONSHIP TO PATIENT^2^.2192^Relationship (NK2) (Not return^0
"DATA",391.23,51,0)
K2-STREET ADDRESS [LINE 1]^2^.2193^STREET ADDRESS [LINE 1] (NK2) ^0
"DATA",391.23,52,0)
K2-STREET ADDRESS [LINE 2]^2^.2194^STREET ADDRESS [LINE 2] (NK2) ^0
"DATA",391.23,53,0)
K2-STREET ADDRESS [LINE 3]^2^.2195^STREET ADDRESS [LINE 3] (NK2) ^0
"DATA",391.23,54,0)
K2-CITY^2^.2196^CITY (NK2) (Not returned to Vi^0
"DATA",391.23,55,0)
K2-STATE^2^.2197^STATE (NK2) (Not returned to V^0
"DATA",391.23,56,0)
K2-ZIP CODE^2^.2198^ZIP (NK2) (Not returned to Vis^0
"DATA",391.23,57,0)
K2-PHONE NUMBER^2^.2199^Phone Number (NK2) (Not return^0
"DATA",391.23,58,0)
EMPLOYER ZIP+4^2^.2205^EMPLOYER ZIP+4^0
"DATA",391.23,59,0)
SPOUSE'S EMP ZIP+4^2^.2206^SPOUSE'S EMP ZIP+4^0
"DATA",391.23,60,0)
SPOUSE'S EMPLOYER NAME^2^.251^SPOUSE'S EMPLOYER NAME^0
"DATA",391.23,61,0)
SPOUSE'S OCCUPATION^2^.2514^SPOUSE'S OCCUPATION^0
"DATA",391.23,62,0)
SPOUSE'S EMPLOYMENT STATUS^2^.2515^SPOUSE'S EMPLOYMENT STATUS^0
"DATA",391.23,63,0)
SPOUSE'S EMP STREET [LINE 1]^2^.252^SPOUSE'S EMP STREET [LINE 1]^0
"DATA",391.23,64,0)
SPOUSE'S EMP STREET [LINE 2]^2^.253^SPOUSE'S EMP STREET [LINE 2]^0
"DATA",391.23,65,0)
SPOUSE'S EMP STREET [LINE 3]^2^.254^SPOUSE'S EMP STREET [LINE 3]^0
"DATA",391.23,66,0)
SPOUSE'S EMPLOYER'S CITY^2^.255^SPOUSE'S EMPLOYER'S CITY^0
"DATA",391.23,67,0)
SPOUSE'S EMPLOYER'S STATE^2^.256^SPOUSE'S EMPLOYER'S STATE^0
"DATA",391.23,68,0)
SPOUSE'S EMP PHONE NUMBER^2^.258^SPOUSE'S EMP PHONE NUMBER^0
"DATA",391.23,69,0)
EMPLOYER NAME^2^.3111^EMPLOYER NAME^0
"DATA",391.23,70,0)
EMPLOYMENT STATUS^2^.31115^EMPLOYMENT STATUS^0
"DATA",391.23,71,0)
EMPLOYER STREET [LINE 1]^2^.3113^EMPLOYER STREET LINE 1^0
"DATA",391.23,72,0)
EMPLOYER STREET [LINE 2]^2^.3114^EMPLOYER STREET LINE 2^0
"DATA",391.23,73,0)
EMPLOYER STREET [LINE 3]^2^.3115^EMPLOYER STREET LINE 3^0
"DATA",391.23,74,0)
EMPLOYER CITY^2^.3116^EMPLOYER CITY^0
"DATA",391.23,75,0)
EMPLOYER STATE^2^.3117^EMPLOYER STATE^0
"DATA",391.23,76,0)
EMPLOYER PHONE NUMBER^2^.3119^EMPLOYER PHONE^0
"DATA",391.23,77,0)
VIETNAM FROM DATE^2^.32104^VIETNAM FROM DATE^0
"DATA",391.23,78,0)
VIETNAM TO DATE^2^.32105^VIETNAM TO DATE^0
"DATA",391.23,79,0)
AGENT ORANGE REGISTRATION DATE^2^.32107^AGENT ORANGE REGISTRATION DATE^0
"DATA",391.23,80,0)
AGENT ORANGE EXAM DATE^2^.32109^AGENT ORANGE EXAM DATE^0
"DATA",391.23,81,0)
AGENT ORANGE REGISTRATION #^2^.3211^ AGENT ORANGE REGISTRATION #^0
"DATA",391.23,82,0)
RADIATION REGISTRATION DATE^2^.32111^RADIATION REGISTRATION DATE^0
"DATA",391.23,83,0)
RADIATION EXPOSURE METHOD^2^.3212^RADIATION EXPOSURE METHOD^0
"DATA",391.23,84,0)
PERSIAN GULF SERVICE?^2^.32201^PERSIAN GULF SERVICE?^0
"DATA",391.23,85,0)
PERSIAN GULF FROM DATE^2^.322011^PERSIAN GULF FROM DATE^0
"DATA",391.23,86,0)
PERSIAN GULF TO DATE^2^.322012^PERSIAN GULF TO DATE^0
"DATA",391.23,87,0)
SOMALIA SERVICE INDICATED?^2^.322016^SOMALIA SERVICE INDICATED?^0
"DATA",391.23,88,0)
SOMALIA FROM DATE^2^.322017^SOMALIA FROM DATE^0
"DATA",391.23,89,0)
SOMALIA TO DATE^2^.322018^SOMALIA TO DATE^0
"DATA",391.23,90,0)
YUGOSLAVIA SERVICE INDICATED?^2^.322019^YUGOSLAVIA SERVICE INDICATED?^0
"DATA",391.23,91,0)
YUGOSLAVIA FROM DATE^2^.32202^YUGOSLAVIA FROM DATE^0
"DATA",391.23,92,0)
YUGOSLAVIA TO DATE^2^.322021^YUGOSLAVIA TO DATE^0
"DATA",391.23,93,0)
LEBANON SERVICE INDICATED?^2^.3221^LEBANON SERVICE INDICATED?^0
"DATA",391.23,94,0)
LEBANON FROM DATE^2^.3222^LEBANON FROM DATE^0
"DATA",391.23,95,0)
LEBANON TO DATE^2^.3223^LEBANON TO DATE^0
"DATA",391.23,96,0)
GRENADA SERVICE INDICATED?^2^.3224^GRENADA SERVICE INDICATED?^0
"DATA",391.23,97,0)
GRENADA FROM DATE^2^.3225^GRENADA FROM DATE^0
"DATA",391.23,98,0)
GRENADA TO DATE^2^.3226^GRENADA TO DATE^0
"DATA",391.23,99,0)
PANAMA SERVICE INDICATED?^2^.3227^PANAMA SERVICE INDICATED?^0
"DATA",391.23,100,0)
PANAMA FROM DATE^2^.3228^PANAMA FROM DATE^0
"DATA",391.23,101,0)
PANAMA TO DATE^2^.3229^PANAMA TO DATE^0
"DATA",391.23,102,0)
SERVICE DISCHARGE TYPE [LAST]^2^.324^SERVICE DISCHARGE TYPE [LAST]^0
"DATA",391.23,103,0)
SERVICE BRANCH [LAST]^2^.325^SERVICE BRANCH [LAST]^0
"DATA",391.23,104,0)
SERVICE ENTRY DATE [LAST]^2^.326^SERVICE ENTRY DATE [LAST]^0
"DATA",391.23,105,0)
SERVICE SEPARATION DATE [LAST]^2^.327^SERVICE SEPARATION DATE [LAST]^0
"DATA",391.23,106,0)
SERVICE NUMBER [LAST]^2^.328^SERVICE NUMBER [LAST]^0
"DATA",391.23,107,0)
SERVICE SECOND EPISODE?^2^.3285^SERVICE SECOND EPISODE?^0
"DATA",391.23,108,0)
SERVICE DISCHARGE TYPE [NTL]^2^.329^SERVICE DISCHARGE TYPE [NTL]^0
"DATA",391.23,109,0)
SERVICE BRANCH [NTL]^2^.3291^SERVICE BRANCH [NTL]^0
"DATA",391.23,110,0)
SERVICE ENTRY DATE [NTL]^2^.3292^SERVICE ENTRY DATE [NTL]^0
"DATA",391.23,111,0)
SERVICE SEPARATION DATE [NTL]^2^.3293^SERVICE SEPARATION DATE [NTL]^0
"DATA",391.23,112,0)
SERVICE NUMBER [NTL]^2^.3294^SERVICE NUMBER [NTL]^0
"DATA",391.23,113,0)
SERVICE THIRD EPISODE?^2^.32945^SERVICE THIRD EPISODE?^0
"DATA",391.23,114,0)
SERVICE DISCHARGE TYPE [NNTL]^2^.3295^SERVICE DISCHARGE TYPE [NNTL]^0
"DATA",391.23,115,0)
SERVICE BRANCH [NNTL]^2^.3296^SERVICE BRANCH [NNTL]^0
"DATA",391.23,116,0)
SERVICE ENTRY DATE [NNTL]^2^.3297^SERVICE ENTRY DATE [NNTL]^0
"DATA",391.23,117,0)
SERVICE SEPARATION DATE [NNTL]^2^.3298^SERVICE SEPARATION DATE [NNTL]^0
"DATA",391.23,118,0)
SERVICE NUMBER [NNTL]^2^.3299^SERVICE NUMBER [NNTL]^0
"DATA",391.23,119,0)
E-WORK PHONE NUMBER^2^.33011^Business Phone Number (EC1) (N^0
"DATA",391.23,120,0)
E-NAME^2^.331^Name (EC1) (Not returned to Vi^0
"DATA",391.23,121,0)
E2-WORK PHONE NUMBER^2^.331011^Business Phone Number (EC2) (N^0
"DATA",391.23,122,0)
E2-NAME OF SECONDARY CONTACT^2^.3311^Name (EC2) (Not returned to Vi^0
"DATA",391.23,123,0)
E2-RELATIONSHIP TO PATIENT^2^.3312^Relationship (EC2)(Not returne^0
"DATA",391.23,124,0)
E2-STREET ADDRESS [LINE 1]^2^.3313^STREET ADDRESS [LINE 1] (EC2) ^0
"DATA",391.23,125,0)
E2-STREET ADDRESS [LINE 2]^2^.3314^STREET ADDRESS [LINE 2] (EC2) ^0
"DATA",391.23,126,0)
E2-STREET ADDRESS [LINE 3]^2^.3315^STREET ADDRESS [LINE 3] (EC2) ^0
"DATA",391.23,127,0)
E2-CITY^2^.3316^CITY (EC2) (Not returned to Vi^0
"DATA",391.23,128,0)
E2-STATE^2^.3317^STATE (EC2) (Not returned to V^0
"DATA",391.23,129,0)
E2-ZIP CODE^2^.3318^ZIP (EC2) (Not returned to Vis^0
"DATA",391.23,130,0)
E2-PHONE NUMBER^2^.3319^Phone Number (EC2) (Not return^0
"DATA",391.23,131,0)
E-RELATIONSHIP TO PATIENT^2^.332^Relationship (EC1) (Not return^0
"DATA",391.23,132,0)
E-STREET ADDRESS [LINE 1]^2^.333^STREET ADDRESS [LINE 1] (EC1) ^0
"DATA",391.23,133,0)
E-STREET ADDRESS [LINE 2]^2^.334^STREET ADDRESS [LINE 2] (EC1) ^0
"DATA",391.23,134,0)
E-STREET ADDRESS [LINE 3]^2^.335^STREET ADDRESS [LINE 3] (EC1) ^0
"DATA",391.23,135,0)
E-CITY^2^.336^CITY (EC1) (Not returned to Vi^0
"DATA",391.23,136,0)
E-STATE^2^.337^STATE (EC1) (Not returned to V^0
"DATA",391.23,137,0)
E-ZIP CODE^2^.338^ZIP (EC1) (Not returned to Vis^0
"DATA",391.23,138,0)
E-PHONE NUMBER^2^.339^Phone Number (EC1) (Not return^0
"DATA",391.23,139,0)
D-WORK PHONE NUMBER^2^.34011^Business Phone Number (DESIG) ^0
"DATA",391.23,140,0)
D-NAME OF DESIGNEE^2^.341^Name (DESIG) (Not returned to ^0
"DATA",391.23,141,0)
D-RELATIONSHIP TO PATIENT^2^.342^Relationship (DESIG) (Not retu^0
"DATA",391.23,142,0)
D-STREET ADDRESS [LINE 1]^2^.343^STREET ADDRESS [LINE 1] (DESIG^0
"DATA",391.23,143,0)
D-STREET ADDRESS [LINE 2]^2^.344^STREET ADDRESS [LINE 2] (DESIG^0
"DATA",391.23,144,0)
D-STREET ADDRESS [LINE 3]^2^.345^STREET ADDRESS [LINE 3] (DESIG^0
"DATA",391.23,145,0)
D-CITY^2^.346^CITY (DESIG) (Not returned to ^0
"DATA",391.23,146,0)
D-STATE^2^.347^STATE (DESIG) (Not returned to^0
"DATA",391.23,147,0)
D-ZIP CODE^2^.348^ZIP (DESIG) (Not returned to V^0
"DATA",391.23,148,0)
D-PHONE NUMBER^2^.349^Phone Number (DESIG) (Not retu^0
"DATA",391.23,149,0)
DATE OF DEATH^2^.351^DATE OF DEATH^0
"DATA",391.23,150,0)
POW CONFINEMENT LOCATION^2^.526^POW LOCATION^0
"DATA",391.23,151,0)
POW FROM DATE^2^.527^POW FROM DATE^0
"DATA",391.23,152,0)
POW TO DATE^2^.528^POW TO DATE^0
"DATA",391.23,153,0)
COMBAT SERVICE INDICATED?^2^.5291^COMBAT SERVICE INDICATED?^0
"DATA",391.23,154,0)
COMBAT SERVICE LOCATION^2^.5292^COMBAT SERVICE LOCATION^0
"DATA",391.23,155,0)
COMBAT FROM DATE^2^.5293^COMBAT FROM DATE^0
"DATA",391.23,156,0)
COMBAT TO DATE^2^.5294^COMBAT TO DATE^0
"DATA",391.23,158,0)
ALIAS^2.01^.01^ALIAS^0
"DATA",391.23,159,0)
ALIAS SSN^2.01^1^ALIAS SSN ^0
"DATA",391.23,160,0)
SPONSOR^355.8^.01^SPONSOR NAME^0
"DATA",391.23,161,0)
MILITARY STATUS^355.8^.02^SPONSOR MILITARY STATUS^0
"DATA",391.23,162,0)
BRANCH^355.8^.03^SPONSOR BRANCH OF SERVICE^0
"DATA",391.23,163,0)
RANK^355.8^.04^SPONSOR RANK^0
"DATA",391.23,164,0)
FAMILY PREFIX^355.81^.03^SPONSOR PREFIX^0
"DATA",391.23,165,0)
SPONSOR TYPE^355.81^.04^SPONSOR TYPE^0
"DATA",391.23,166,0)
EFFECTIVE DATE^355.81^.05^SPONSOR EFFECTIVE DATE^0
"DATA",391.23,167,0)
EXPIRATION DATE^355.81^.06^SPONSOR EXPIRATION DATE^0
"DATA",391.23,168,0)
DATE OF BIRTH^355.82^.02^SPONSOR SOCIAL SECURITY NUMBER^0
"DATA",391.23,169,0)
MARRIED THIS YEAR^408.22^.14^Married this year^0
"DATA",391.23,170,0)
LIVING WITH PATIENT^408.22^.15^Living with Patient^0
"DATA",391.23,171,0)
BAD ADDRESS INDICATOR^2^.121^BAD ADDRESS INDICATOR^0
"DATA",391.23,172,0)
NAME^38.1^.01^NAME Pointer to Patient File^0
"DATA",391.23,173,0)
SECURITY LEVEL^38.1^2^SECURITY LEVEL SENS PATIENT^0
"DATA",391.23,174,0)
SPONSOR PERSON NAME^355.82^.01^NAME^0
"DATA",391.23,175,0)
SOCIAL SECURITY NUMBER^355.82^.03^SPONSOR SOCIAL SECURITY NUMBER^0
"DATA",391.23,176,0)
RACE^2.02^.01^RACE MULTIPLE SUB-FILE
"DATA",391.23,177,0)
ETHNICITY^2.06^.01^ETHNICITY INFORMATION
"DATA",391.23,178,0)
ETHNICITY METHOD OF COLLECTION^2.06^.02^ETHNICITY METHOD OF COLLECTION
"DATA",391.23,179,0)
RACE METHOD OF COLLECTION^2.02^.02^RACE METHOD OF COLLECTION
"DATA",391.23,180,0)
CONFIDENTIAL CATEGORY ACTIVE^2.141^1^CONFIDENTIAL CATEGORY ACTIVE
"DATA",391.23,181,0)
VIETNAM SERVICE INDICATED?^2^.32101^VIETNAM SERVICE INDICATED?
"DATA",391.23,182,0)
DEATH ENTERED BY^2^.352^DEATH ENTERED BY
"DATA",391.23,183,0)
SOURCE OF NOTIFICATION^2^.353^SOURCE OF NOTIFICATION
"DATA",391.23,184,0)
DATE OF DEATH LAST UPDATED^2^.354^DATE OF DEATH LAST UPDATED
"DATA",391.23,185,0)
POW STATUS INDICATED?^2^.525^POW STATUS INDICATED?
"DATA",391.23,186,0)
AGENT ORANGE EXPOS. INDICATED?^2^.32102^AGENT ORANGE EXPOS. INDICATED?
"DATA",391.23,187,0)
RADIATION EXPOSURE INDICATED?^2^.32103^RADIATION EXPOSURE INDICATED?
"FIA",391.23)
DG REGISTER ONCE FIELD DEFINITION
"FIA",391.23,0)
^DGRO(391.23,
"FIA",391.23,0,0)
391.23
"FIA",391.23,0,1)
y^y^f^^n^^y^r^n
"FIA",391.23,0,10)

"FIA",391.23,0,11)

"FIA",391.23,0,"RLRO")

"FIA",391.23,0,"VR")
5.3^DG
"FIA",391.23,391.23)
0
"IX",391.23,391.23,"C",0)
391.23^C^Cross reference on File and Field numbers^R^^R^IR^I^391.23^^^^^LS
"IX",391.23,391.23,"C",1)
S ^DGRO(391.23,"C",X(1),X(2),DA)=""
"IX",391.23,391.23,"C",2)
K ^DGRO(391.23,"C",X(1),X(2),DA)
"IX",391.23,391.23,"C",2.5)
K ^DGRO(391.23,"C")
"IX",391.23,391.23,"C",11.1,0)
^.114IA^2^2
"IX",391.23,391.23,"C",11.1,1,0)
1^F^391.23^1^^1^F
"IX",391.23,391.23,"C",11.1,2,0)
2^F^391.23^2^^2^F
"KRN",3.8,317,-1)
0^1
"KRN",3.8,317,0)
DG REGISTER ONCE^PU^y^^^^
"KRN",3.8,317,3)

"KRN",101,3788,-1)
0^2
"KRN",101,3788,0)
DGRO ROM ORF/R04 SUBSC^^^S^^^^^^^^
"KRN",101,3788,1,0)
^^3^3^3030718^
"KRN",101,3788,1,1,0)
This protocol is the subscriber protocol for the Register Once Messaging 
"KRN",101,3788,1,2,0)
query message (QRY~R02).  The protocol will return a patient FDA array
"KRN",101,3788,1,3,0)
message (ORF~R04).
"KRN",101,3788,770)
^DGRO-QRYRESP^^R04^^^^^^^ORF
"KRN",101,3788,771)
D RCV^DGROHLR
"KRN",101,3788,773)
1^1
"KRN",101,3788,774)
Q
"KRN",101,3791,-1)
0^4
"KRN",101,3791,0)
DGRO ROM QRY/R02 EVENT^^^E^^^^^^^^
"KRN",101,3791,1,0)
^^2^2^3030617^
"KRN",101,3791,1,1,0)
This protocol is the event protocol for the Register Once Messaging query
"KRN",101,3791,1,2,0)
message (QRY~R02).
"KRN",101,3791,770)
DGRO-QRY^^QRY^R02^^^^^^2.3^
"KRN",101,3791,772)
D RCV^DGROHLR
"KRN",101,3791,775,0)
^101.0775PA^1^1
"KRN",101,3791,775,1,0)
3788
"KRN",101,3791,775,1,"^")
DGRO ROM ORF/R04 SUBSC
"KRN",771,121,-1)
0^1
"KRN",771,121,0)
DGRO-QRY^a^^^^^US
"KRN",771,122,-1)
0^2
"KRN",771,122,0)
DGRO-QRYRESP^a^^^^^US
"MBREQ")
0
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2941102^2941102
"PKG",5,22,1,"PAH",1,0)
533^3031121^109
"PKG",5,22,1,"PAH",1,1,0)
^^1^1^3031121
"PKG",5,22,1,"PAH",1,1,1,0)
Please refer to Patch DG*5.3*533
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
17
"RTN","DGREG")
0^20^B43561920
"RTN","DGREG",1,0)
DGREG ;ALB/JDS,MRL-REGISTER PATIENT ; 5/28/03 1:12pm
"RTN","DGREG",2,0)
 ;;5.3;Registration;**1,32,108,147,149,182,245,250,513,425,533**;Aug 13, 1993
"RTN","DGREG",3,0)
START ;
"RTN","DGREG",4,0)
EN D LO^DGUTL S DGCLPR=""
"RTN","DGREG",5,0)
 N DGDIV
"RTN","DGREG",6,0)
 S DGDIV=$$PRIM^VASITE
"RTN","DGREG",7,0)
 S:DGDIV %ZIS("B")=$P($G(^DG(40.8,+DGDIV,"DEV")),U,1)
"RTN","DGREG",8,0)
 I $P(^DG(43,1,0),U,39) S %ZIS="NQ",%ZIS("A")="Select 1010 printer: " D ^%ZIS Q:POP  S (DGIO(10),DGIO("PRF"),DGIO("RT"),DGIO("HS"))=ION,DGASKDEV="" I $E(IOST,1,2)'["P-" W !,$C(7),"Not a printer" G DGREG
"RTN","DGREG",9,0)
 K %ZIS("B")
"RTN","DGREG",10,0)
 I '$D(DGIO),$P(^DG(43,1,0),U,30) S %ZIS="N",IOP="HOME" D ^%ZIS I $D(IOS),IOS,$D(^%ZIS(1,+IOS,99)),$D(^%ZIS(1,+^(99),0)) S Y=$P(^(0),U,1) W !,"Using closest printer ",Y,! F I=10,"PRF","RT","HS" S DGIO(I)=Y
"RTN","DGREG",11,0)
A D ENDREG($G(DFN)) I '$G(DG1010TF) W !! S DIC=2,DIC(0)="ALEQM",DLAYGO=2 K DIC("S") D ^DIC K DLAYGO G Q1:Y<0 S (DFN,DA)=+Y,DGNEW=$P(Y,"^",3) N Y D PAUSE^DG10 D BEGINREG(DFN) I DGNEW D NEW^DGRP
"RTN","DGREG",12,0)
 ;
"RTN","DGREG",13,0)
 D CIRN
"RTN","DGREG",14,0)
 ;
"RTN","DGREG",15,0)
 I +$G(DGNEW) D
"RTN","DGREG",16,0)
 . ; query CMOR for Patient Record Flag Assignments if NEW patient and
"RTN","DGREG",17,0)
 . ; display results.
"RTN","DGREG",18,0)
 . I $$PRFQRY^DGPFAPI(DFN) D DISPPRF^DGPFAPI(DFN)
"RTN","DGREG",19,0)
 ;
"RTN","DGREG",20,0)
 D ROMQRY
"RTN","DGREG",21,0)
 ;
"RTN","DGREG",22,0)
 S (DGFC,CURR)=0
"RTN","DGREG",23,0)
 D:'$G(DGNEW) WARN S DA=DFN,DGFC="^1",VET=$S($D(^DPT(DFN,"VET")):^("VET")'="Y",1:0)
"RTN","DGREG",24,0)
 I '$G(DG1010TF) S %ZIS="N",IOP="HOME" D ^%ZIS S DGELVER=0 D EN^DGRPD I $D(DGRPOUT) D ENDREG($G(DFN)) D HL7A08^VAFCDD01 K DFN,DGRPOUT G A
"RTN","DGREG",25,0)
 I '$G(DG1010TF) D HINQ^DG10
"RTN","DGREG",26,0)
 I $D(^DIC(195.4,1,"UP")) I ^("UP") D ADM^RTQ3
"RTN","DGREG",27,0)
 D REG^IVMCQ($G(DFN))  ; send financial query  
"RTN","DGREG",28,0)
 G A1
"RTN","DGREG",29,0)
 ;
"RTN","DGREG",30,0)
RT I $D(^DIC(195.4,1,"UP")) I ^("UP") S $P(DGFC,U,1)=DIV D ADM^RTQ3
"RTN","DGREG",31,0)
 Q
"RTN","DGREG",32,0)
 ;
"RTN","DGREG",33,0)
A1 I '$G(DG1010TF) W !,"Do you want to ",$S(DGNEW:"enter",1:"edit")," Patient Data" S %=1 D YN^DICN G H:'%,CK:%'=1 S DGRPV=0 D EN1^DGRP G Q:'$D(DA)
"RTN","DGREG",34,0)
 G CH
"RTN","DGREG",35,0)
PR W !!,"Is the patient currently being followed in a clinic for the same condition" S %=0 D YN^DICN G Q:%=-1
"RTN","DGREG",36,0)
 I '% W !?4,$C(7),"Enter 'Y' if the patient is being followed in clinic for condition for which",!?6,"registered, 'N' if not." G PR
"RTN","DGREG",37,0)
 S CURR=% G SEEN
"RTN","DGREG",38,0)
 ;
"RTN","DGREG",39,0)
CK S DGEDCN=1 D ^DGRPC
"RTN","DGREG",40,0)
CH S X=$S('$D(^DPT(DFN,.36)):1,$P(^(.36),"^",1)']"":1,1:0),X1=$S('$D(^DPT(DFN,.32)):1,$P(^(.32),"^",3)']"":1,1:0) I 'X,'X1 G CH1
"RTN","DGREG",41,0)
CH1 S DA=DFN G PR:'$D(^DPT("ADA",1,DA)) W !!,"There is still an open disposition--register aborted.",$C(7),$C(7) G Q
"RTN","DGREG",42,0)
SEEN W !!,"Is the patient to be examined in the medical center today" S %=1 D YN^DICN S SEEN=% G:%<0 Q I %'>0 W !!,"Enter 'Y' if the patient is to be examined today, 'N' if not.",$C(7) G SEEN
"RTN","DGREG",43,0)
ABIL D ^DGREGG
"RTN","DGREG",44,0)
ENR ; next line appears to be dead code.  left commented just to test.  mli 4/28/94
"RTN","DGREG",45,0)
 ;S DE=0 F I=0:0 S I=$O(^DPT(DA,"DE",I)) Q:'I  I $P(^(I,0),"^",3)'?7N Q  D PR:'DE S L=+$P($S($D(^SC(L,0)):^(0),1:""),"^",1)
"RTN","DGREG",46,0)
REG S (DIE,DIC)="^DPT("_DFN_",""DIS"",",%DT="PTEX",%DT("A")="Registration login date/time: NOW// "
"RTN","DGREG",47,0)
 W !,%DT("A") R ANS:DTIME S:'$T ANS="^" S:ANS="" ANS="N" S X=ANS G Q:ANS="^" S DA(1)=DFN D CHK^DIE(2.101,.01,"E",X,.RESULT) G REG:RESULT="^"!('$D(RESULT)),PR3:'(RESULT#1) S Y=RESULT
"RTN","DGREG",48,0)
 I (RESULT'="^") W "  ("_RESULT(0)_")"
"RTN","DGREG",49,0)
 S DINUM=9999999-RESULT
"RTN","DGREG",50,0)
 S (DFN1,Y1)=DINUM,APD=Y I $D(^DPT(DFN,"DIS",Y1)) W !!,"You must enter a date that does not exist.",$C(7),$C(7) G REG
"RTN","DGREG",51,0)
 G:$D(^DPT("ADA",1,DA)) CH1 L @(DIE_DINUM_")"):2 G:'$T MSG S:'($D(^DPT(DA(1),"DIS",0))#2) ^(0)="^2.101D^^" S DIC(0)="L",X=+Y D ^DIC
"RTN","DGREG",52,0)
 ;
"RTN","DGREG",53,0)
 ;SAVE OFF DATE/TIME OF REGISTRATION FOR HL7 V2.3 MESSAGING, IN VAFCDDT
"RTN","DGREG",54,0)
 S VAFCDDT=X
"RTN","DGREG",55,0)
 ;
"RTN","DGREG",56,0)
 S DA=DFN1,DIE("NO^")="",DA(1)=DFN,DP=2.101,DR="1///"_$S(SEEN=2:2,CURR=1:1,1:0)_";Q;2"_$S(CURR=1:"///3",1:"")_";2.1;3//"_$S($P(^DG(43,1,"GL"),"^",2):"",1:"/")_$S($D(^DG(40.8,+$P(^DG(43,1,"GL"),"^",3),0)):$P(^(0),"^",1),1:"")_";4////"_DUZ
"RTN","DGREG",57,0)
 I $G(DG1010TF) S DR=DR_";.2///1"
"RTN","DGREG",58,0)
 D EL K DIC("A") N DGNDLOCK S DGNDLOCK=DIE_DFN1_")" L +@DGNDLOCK:2 G:'$T MSG D ^DIE L -@DGNDLOCK
"RTN","DGREG",59,0)
 I $D(DTOUT) D  G Q
"RTN","DGREG",60,0)
 .K DTOUT
"RTN","DGREG",61,0)
 .N DA,DIK
"RTN","DGREG",62,0)
 .S DA(1)=DFN,DA=DFN1,DIK="^DPT("_DFN_",""DIS"","
"RTN","DGREG",63,0)
 .D ^DIK
"RTN","DGREG",64,0)
 .W !!?5,"User Time-out.  Required registration data could be missing."
"RTN","DGREG",65,0)
 .W !,?5,"This registration has been deleted."
"RTN","DGREG",66,0)
 S DGXXXD=1 D EL^DGREGE I $P(^DPT(DFN,"DIS",DFN1,0),"^",3)=4 S DA=DFN,DIE="^DPT(",DR=".368;.369" D ^DIE S DIE="^DPT("_DFN_",""DIS"",",DA(1)=DFN,DA=DFN1
"RTN","DGREG",67,0)
 S DA=DFN,DR="[DGREG]",DIE="^DPT(" D ^DIE K DIE("NO^")
"RTN","DGREG",68,0)
 I $D(^DPT(DFN,"DIS",DFN1,2)),$P(^(2),"^",1)="Y" S DIE="^DPT(",DR="[DG EMPLOYER]",DA=DFN D ^DIE
"RTN","DGREG",69,0)
 G ^DGREG0
"RTN","DGREG",70,0)
PR2 W !!,"You can only enter new registrations through this option.",$C(7),$C(7) G REG
"RTN","DGREG",71,0)
PR3 W !!,"Time is required to register the patient.",!!,$C(7),$C(7) G REG
"RTN","DGREG",72,0)
H W !?5,"Enter 'YES' to enter/edit registration data or 'NO' to continue." G A1
"RTN","DGREG",73,0)
Q K DG,DQ G Q1^DGREG0
"RTN","DGREG",74,0)
Q1 K DGIO,DGASKDEV,DGFC,DGCLRP,CURR,DGELVER,DGNEW Q
"RTN","DGREG",75,0)
EL S DR=DR_";13//" I $D(^DPT(DFN,.36)),$D(^DIC(8,+^(.36),0)) S DR=DR_$P(^(0),"^",1) Q
"RTN","DGREG",76,0)
 S DR=DR_"HUMANITARIAN EMERGENCY" Q
"RTN","DGREG",77,0)
FEE S DGRPFEE=1 D DGREG K DGRPFEE G Q1
"RTN","DGREG",78,0)
 ;
"RTN","DGREG",79,0)
EN1010T(DFN,DGNEWPF,DGDIV,DGIO,DGASKDEV,DG1010TF) ;Registration entry point for 10-10T
"RTN","DGREG",80,0)
 S DGNEW=DGNEWPF ;set new patient flag
"RTN","DGREG",81,0)
 I $G(DGASKDF) S DGASKDEV="" ;ask device flag
"RTN","DGREG",82,0)
 D A
"RTN","DGREG",83,0)
 K DFN1,DG1,DGMT,DGMTCOR,DGRGAUTO,DGWRT
"RTN","DGREG",84,0)
 G Q1
"RTN","DGREG",85,0)
 ;
"RTN","DGREG",86,0)
WARN I $S('$D(^DPT(DFN,.1)):0,$P(^(.1),"^",1)']"":0,1:1) W !,$C(7),"***PATIENT IS CURRENTLY AN INPATIENT***",! H 2
"RTN","DGREG",87,0)
 I $S('$D(^DPT(DFN,.107)):0,$P(^(.107),"^",1)']"":0,1:1) W !,$C(7),"***PATIENT IS CURRENTLY A LODGER***",! H 2
"RTN","DGREG",88,0)
 Q
"RTN","DGREG",89,0)
MSG W !,"Another user is editing, try later ..." G Q
"RTN","DGREG",90,0)
 ;
"RTN","DGREG",91,0)
BEGINREG(DFN) ;
"RTN","DGREG",92,0)
 ;Description: This is called at the begining of the registration process.
"RTN","DGREG",93,0)
 ;Concurrent processes can check the lock to determine if the patient is
"RTN","DGREG",94,0)
 ;currently being registered.
"RTN","DGREG",95,0)
 ;
"RTN","DGREG",96,0)
 Q:'$G(DFN) 0
"RTN","DGREG",97,0)
 I $$QRY^DGENQRY(DFN) W !!,"Enrollment/Eligibility Query sent ...",!!
"RTN","DGREG",98,0)
 L +^TMP(DFN,"REGISTRATION IN PROGRESS"):1
"RTN","DGREG",99,0)
 I $$LOCK^DGENPTA1(DFN) ;try to lock the patient record
"RTN","DGREG",100,0)
 Q
"RTN","DGREG",101,0)
 ;
"RTN","DGREG",102,0)
ENDREG(DFN) ;
"RTN","DGREG",103,0)
 ;Description: releases the lock obtained by calling BEGINREG.
"RTN","DGREG",104,0)
 ;
"RTN","DGREG",105,0)
 Q:'$G(DFN)
"RTN","DGREG",106,0)
 L -^TMP(DFN,"REGISTRATION IN PROGRESS")
"RTN","DGREG",107,0)
 D UNLOCK^DGENPTA1(DFN)
"RTN","DGREG",108,0)
 Q
"RTN","DGREG",109,0)
 ;
"RTN","DGREG",110,0)
IFREG(DFN) ;
"RTN","DGREG",111,0)
 ;Description: tests whether the lock set by BEGINREG is set
"RTN","DGREG",112,0)
 ;
"RTN","DGREG",113,0)
 ;Input:  DFN
"RTN","DGREG",114,0)
 ;Output:
"RTN","DGREG",115,0)
 ;      Function Value = 1 if lock is set, 0 otherwise
"RTN","DGREG",116,0)
 ;
"RTN","DGREG",117,0)
 N RETURN
"RTN","DGREG",118,0)
 Q:'$G(DFN) 0
"RTN","DGREG",119,0)
 L +^TMP(DFN,"REGISTRATION IN PROGRESS"):1
"RTN","DGREG",120,0)
 S RETURN='$T
"RTN","DGREG",121,0)
 L -^TMP(DFN,"REGISTRATION IN PROGRESS")
"RTN","DGREG",122,0)
 Q RETURN
"RTN","DGREG",123,0)
 Q
"RTN","DGREG",124,0)
CIRN ;MPI QUERY
"RTN","DGREG",125,0)
 ;check to see if CIRN PD/MPI is installed
"RTN","DGREG",126,0)
 N X S X="MPIFAPI" X ^%ZOSF("TEST") Q:'$T
"RTN","DGREG",127,0)
 K MPIFRTN
"RTN","DGREG",128,0)
 D MPIQ^MPIFAPI(DFN)
"RTN","DGREG",129,0)
 K MPIFRTN
"RTN","DGREG",130,0)
 Q
"RTN","DGREG",131,0)
ROMQRY ;
"RTN","DGREG",132,0)
 I +$G(DGNEW) D
"RTN","DGREG",133,0)
 . ; query LST for Patient Demographic Information if NEW patient and
"RTN","DGREG",134,0)
 . ; file into patient's record.
"RTN","DGREG",135,0)
 . N A
"RTN","DGREG",136,0)
 . I $$ROMQRY^DGROAPI(DFN) D
"RTN","DGREG",137,0)
 . . ;display busy message to interactive users
"RTN","DGREG",138,0)
 . .S DGMSG(1)="Data retrieval from LST site has been completed successfully"
"RTN","DGREG",139,0)
 . .S DGMSG(2)="Thank you for your patience."
"RTN","DGREG",140,0)
 . .D EN^DDIOL(.DGMSG) R A:5
"RTN","DGREG",141,0)
 . E  D
"RTN","DGREG",142,0)
 . . ;display busy message to interactive users
"RTN","DGREG",143,0)
 . .S DGMSG(1)="Data retrieval from LST site has not been successful."
"RTN","DGREG",144,0)
 . .S DGMSG(2)="Please continue the Registration Process."
"RTN","DGREG",145,0)
 . .D EN^DDIOL(.DGMSG) R A:5
"RTN","DGREG",146,0)
 . ;
"RTN","DGREG",147,0)
 Q
"RTN","DGROAPI")
0^1^B3265178
"RTN","DGROAPI",1,0)
DGROAPI ;DJH/AMA - ROM EXTERNAL USER INTERFACE APIs ; 24 Jun 2003  3:53 PM
"RTN","DGROAPI",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROAPI",3,0)
 ;
"RTN","DGROAPI",4,0)
 ;This routine contains API entry points that are used by packages
"RTN","DGROAPI",5,0)
 ;and modules that are external to the Register Once module.
"RTN","DGROAPI",6,0)
 ;
"RTN","DGROAPI",7,0)
 Q  ;no direct entry
"RTN","DGROAPI",8,0)
 ;
"RTN","DGROAPI",9,0)
ROMQRY(DGDFN) ;query the LST for all patient demographic data
"RTN","DGROAPI",10,0)
 ;This function queries a given patient's Last Site Treated (LST)
"RTN","DGROAPI",11,0)
 ;site to retrieve all patient demographic data for the patient.
"RTN","DGROAPI",12,0)
 ;The function will only succeed when the QRY HL7 interface is
"RTN","DGROAPI",13,0)
 ;enabled, the patient has a national Integrated Control Number
"RTN","DGROAPI",14,0)
 ;(ICN), the patient's LST is not the local site and the HL7 query
"RTN","DGROAPI",15,0)
 ;receives an ACK from the LST site.
"RTN","DGROAPI",16,0)
 ;
"RTN","DGROAPI",17,0)
 ;  Input:
"RTN","DGROAPI",18,0)
 ;     DGDFN - pointer to patient in PATIENT (#2) file
"RTN","DGROAPI",19,0)
 ;
"RTN","DGROAPI",20,0)
 ;  Output:
"RTN","DGROAPI",21,0)
 ;     Function value - 1 on success, 0 on failure
"RTN","DGROAPI",22,0)
 ;
"RTN","DGROAPI",23,0)
 N DGRSLT,STRTIME,ENDTIME,ELAPTIME
"RTN","DGROAPI",24,0)
 S STRTIME=$P($H,",",2)
"RTN","DGROAPI",25,0)
 ;
"RTN","DGROAPI",26,0)
 S DGRSLT=$$SNDQRY^DGROHLS(DGDFN)
"RTN","DGROAPI",27,0)
 S ENDTIME=$P($H,",",2)
"RTN","DGROAPI",28,0)
 S ELAPTIME=ENDTIME-STRTIME
"RTN","DGROAPI",29,0)
 I DGRSLT=0&(ELAPTIME>59) D
"RTN","DGROAPI",30,0)
 . S DGMSG(1)="The connection to the Last Site Treated failed and timed out."
"RTN","DGROAPI",31,0)
 . S DGMSG(2)="Please continue with registration."
"RTN","DGROAPI",32,0)
 . S DGMSG(3)=" "
"RTN","DGROAPI",33,0)
 . D EN^DDIOL(.DGMSG)
"RTN","DGROAPI",34,0)
 ;
"RTN","DGROAPI",35,0)
 I DGRSLT D
"RTN","DGROAPI",36,0)
 . N ZTSAVE,A,ZTRTN,ZTDESC,ZTIO,ZTDTH,DGMSG
"RTN","DGROAPI",37,0)
 . ;Invoke IB Insurance Query (Patch IB*2.0*214)
"RTN","DGROAPI",38,0)
 . S ZTSAVE("IBTYPE")=1,ZTSAVE("DFN")=DGDFN,ZTSAVE("IBDUZ")=$G(DUZ)
"RTN","DGROAPI",39,0)
 . S ZTRTN="BACKGND^IBCNRDV"
"RTN","DGROAPI",40,0)
 . S ZTDTH=$H
"RTN","DGROAPI",41,0)
 . S ZTDESC="IBCN INSURANCE QUERY TASK"
"RTN","DGROAPI",42,0)
 . S ZTIO=""
"RTN","DGROAPI",43,0)
 . D ^%ZTLOAD
"RTN","DGROAPI",44,0)
 . ;display busy message to interactive users
"RTN","DGROAPI",45,0)
 . S DGMSG(1)="Insurance data retrieval has been initiated."
"RTN","DGROAPI",46,0)
 . S DGMSG(2)=""
"RTN","DGROAPI",47,0)
 . D EN^DDIOL(.DGMSG) R A:5
"RTN","DGROAPI",48,0)
 Q DGRSLT
"RTN","DGROAPI",49,0)
 ;
"RTN","DGRODEBR")
0^2^B25642758
"RTN","DGRODEBR",1,0)
DGRODEBR ;DJH/AMA - ROM DATA ELEMENT BUSINESS RULES ; 21 July 2003 4:41 PM
"RTN","DGRODEBR",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGRODEBR",3,0)
 ;
"RTN","DGRODEBR",4,0)
 ;BUSINESS RULES TO BE CHECKED JUST BEFORE FILING THE
"RTN","DGRODEBR",5,0)
 ;PATIENT DATA RETRIEVED FROM THE LAST SITE TREATED (LST)
"RTN","DGRODEBR",6,0)
 ;
"RTN","DGRODEBR",7,0)
POW(DGDATA,DFN,LSTDFN) ;POW STATUS INDICATED?
"RTN","DGRODEBR",8,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",9,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGRODEBR",10,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",11,0)
 N RSPOW    ;REQUESTING SITE POW STATUS INDICATED
"RTN","DGRODEBR",12,0)
 N LSTPOW   ;LAST SITE TREATED POW STATUS INDICATED
"RTN","DGRODEBR",13,0)
 S RSPOW=$$GET1^DIQ(2,DFN,.525,"I")
"RTN","DGRODEBR",14,0)
 S LSTPOW=$G(@DGDATA@(2,LSTDFN_",",.525,"I"))
"RTN","DGRODEBR",15,0)
 ;If either of the POW STATUS INDICATED? flags are "N"o, don't file the POW data element(s)
"RTN","DGRODEBR",16,0)
 I (RSPOW="N")!(LSTPOW="N") D
"RTN","DGRODEBR",17,0)
 . N FIELD
"RTN","DGRODEBR",18,0)
 . F FIELD=.525:.001:.528 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",19,0)
 Q
"RTN","DGRODEBR",20,0)
 ;
"RTN","DGRODEBR",21,0)
AO(DGDATA,DFN,LSTDFN) ;AGENT ORANGE EXPOSURE INDICATED?
"RTN","DGRODEBR",22,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",23,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGRODEBR",24,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",25,0)
 N RSAO    ;R.S. AGENT ORANGE EXPOSURE INDICATED
"RTN","DGRODEBR",26,0)
 N LSTAO   ;LST AGENT ORANGE EXPOSURE INDICATED
"RTN","DGRODEBR",27,0)
 S RSAO=$$GET1^DIQ(2,DFN,.32102,"I")
"RTN","DGRODEBR",28,0)
 S LSTAO=$G(@DGDATA@(2,LSTDFN_",",.32102,"I"))
"RTN","DGRODEBR",29,0)
 ;If either of the AGENT ORANGE EXPOSURE INDICATED? flags are "N"o, delete the AO data element(s)
"RTN","DGRODEBR",30,0)
 I (RSAO="N")!(LSTAO="N") D
"RTN","DGRODEBR",31,0)
 . N FIELD
"RTN","DGRODEBR",32,0)
 . F FIELD=.32102,.32107,.32108,.32109,.3211 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",33,0)
 Q
"RTN","DGRODEBR",34,0)
 ;
"RTN","DGRODEBR",35,0)
IR(DGDATA,DFN,LSTDFN) ;RADIATION EXPOSURE INDICATED?
"RTN","DGRODEBR",36,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",37,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGRODEBR",38,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",39,0)
 N RSIR    ;R.S. RADIATION EXPOSURE INDICATED
"RTN","DGRODEBR",40,0)
 N LSTIR   ;LST RADIATION EXPOSURE INDICATED
"RTN","DGRODEBR",41,0)
 S RSIR=$$GET1^DIQ(2,DFN,.32103,"I")
"RTN","DGRODEBR",42,0)
 S LSTIR=$G(@DGDATA@(2,LSTDFN_",",.32103,"I"))
"RTN","DGRODEBR",43,0)
 ;If either of the RADIATION EXPOSURE INDICATED flags are "N"o, delete the IR data elements
"RTN","DGRODEBR",44,0)
 I (RSIR="N")!(LSTIR="N") D
"RTN","DGRODEBR",45,0)
 . N FIELD
"RTN","DGRODEBR",46,0)
 . F FIELD=.32103,.32111,.3212 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",47,0)
 Q
"RTN","DGRODEBR",48,0)
 ;
"RTN","DGRODEBR",49,0)
DOD(DGDATA,DFN,LSTDFN) ;DATE OF DEATH
"RTN","DGRODEBR",50,0)
 ;Retrieve all DATE OF DEATH data elements, but instead of being filed,
"RTN","DGRODEBR",51,0)
 ;they will be placed into a mail message to the appropriate group.
"RTN","DGRODEBR",52,0)
 ;
"RTN","DGRODEBR",53,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",54,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGRODEBR",55,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",56,0)
 ;
"RTN","DGRODEBR",57,0)
 N DODFLG,FLD,DGMSG
"RTN","DGRODEBR",58,0)
 S DODFLG=0
"RTN","DGRODEBR",59,0)
 F FLD=.351:.001:.354 I $D(@DGDATA@(2,LSTDFN_",",FLD)) S DODFLG=1
"RTN","DGRODEBR",60,0)
 I DODFLG D
"RTN","DGRODEBR",61,0)
 . D DODMAIL^DGROMAIL(DGDATA,DFN,LSTDFN)
"RTN","DGRODEBR",62,0)
 . S DGMSG(1)="Date of Death information has been retrieved from the LST."
"RTN","DGRODEBR",63,0)
 . S DGMSG(2)="This information has NOT been filed into the patient's record."
"RTN","DGRODEBR",64,0)
 . S DGMSG(3)="A mail message has been sent to the Register Once mail group."
"RTN","DGRODEBR",65,0)
 . D EN^DDIOL(.DGMSG) R A:5
"RTN","DGRODEBR",66,0)
 ;Remove DoD fields from the FDA array so they are not filed into patient record.
"RTN","DGRODEBR",67,0)
 F FLD=.351:.001:.354 K @DGDATA@(2,LSTDFN_",",FLD)
"RTN","DGRODEBR",68,0)
 Q
"RTN","DGRODEBR",69,0)
 ;
"RTN","DGRODEBR",70,0)
TA(DGDATA,LSTDFN) ;TEMPORARY ADDRESS
"RTN","DGRODEBR",71,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",72,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",73,0)
 N LSTTAED   ;LST TEMPORARY ADDRESS END DATE
"RTN","DGRODEBR",74,0)
 S LSTTAED=$G(@DGDATA@(2,LSTDFN_",",.1218,"I"))
"RTN","DGRODEBR",75,0)
 ;If the TEMPORARY ADDRESS END DATE is less than the date of the query, delete the TA data elements
"RTN","DGRODEBR",76,0)
 I LSTTAED,(LSTTAED<DT) D
"RTN","DGRODEBR",77,0)
 . N FIELD
"RTN","DGRODEBR",78,0)
 . F FIELD=.12105,.12111,.12112,.1211:.0001:.1219 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",79,0)
 Q
"RTN","DGRODEBR",80,0)
 ;
"RTN","DGRODEBR",81,0)
SP(DGDATA,DFN,LSTDFN) ;SENSITIVE PATIENT
"RTN","DGRODEBR",82,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",83,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGRODEBR",84,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",85,0)
 ;
"RTN","DGRODEBR",86,0)
 N RSSP    ;R.S. SENSITIVE PATIENT
"RTN","DGRODEBR",87,0)
 N LSTSP   ;LST SENSITIVE PATIENT
"RTN","DGRODEBR",88,0)
 S RSSP=$$GET1^DIQ(38.1,DFN,2,"I")
"RTN","DGRODEBR",89,0)
 S LSTSP=$G(@DGDATA@(38.1,LSTDFN_",",2,"I"))
"RTN","DGRODEBR",90,0)
 ;
"RTN","DGRODEBR",91,0)
 ;In all cases, the Primary Eligibility Code and the Patient Type are not to be retrieved
"RTN","DGRODEBR",92,0)
 K @DGDATA@(2,LSTDFN_",",.361),@DGDATA@(2,LSTDFN_",",391)
"RTN","DGRODEBR",93,0)
 ;
"RTN","DGRODEBR",94,0)
 ;If the SENSITIVE PATIENT flag is received from the HEC -- OR -- if the
"RTN","DGRODEBR",95,0)
 ;flag is NOT received from both the HEC and LST, retrieve and file all
"RTN","DGRODEBR",96,0)
 ;Sensitive data elements, but NOT the fields for the Security Log file.
"RTN","DGRODEBR",97,0)
 I '((RSSP'=1)&(LSTSP=1)) D  I 1
"RTN","DGRODEBR",98,0)
 . K @DGDATA@(38.1)
"RTN","DGRODEBR",99,0)
 E  D
"RTN","DGRODEBR",100,0)
 . ;Otherwise (flag not received from the HEC but is from the LST),
"RTN","DGRODEBR",101,0)
 . ;send a mail message to the ISO and the "Register Once" mail
"RTN","DGRODEBR",102,0)
 . ;group that this patient is listed as Sensitive
"RTN","DGRODEBR",103,0)
 . D SPMAIL^DGROMAIL(DFN)
"RTN","DGRODEBR",104,0)
 . N DGMSG
"RTN","DGRODEBR",105,0)
 . S DGMSG(1)="Sensitive Patient information has been retrieved from the LST."
"RTN","DGRODEBR",106,0)
 . S DGMSG(2)="This information has been filed into the patient's record."
"RTN","DGRODEBR",107,0)
 . S DGMSG(3)="A mail message has been sent to the Register Once mail group"
"RTN","DGRODEBR",108,0)
 . S DGMSG(4)="and the ISO explaining that this information has been received."
"RTN","DGRODEBR",109,0)
 . D EN^DDIOL(.DGMSG) R A:5
"RTN","DGRODEBR",110,0)
 Q
"RTN","DGRODEBR",111,0)
 ;
"RTN","DGRODEBR",112,0)
RE ;RACE AND ETHNICITY
"RTN","DGRODEBR",113,0)
 ;If the RACE AND ETHNICITY data not already populated, file it (already the basic rule)
"RTN","DGRODEBR",114,0)
 Q
"RTN","DGRODEBR",115,0)
 ;
"RTN","DGRODEBR",116,0)
CA(DGDATA,LSTDFN) ;CONFIDENTIAL ADDRESS
"RTN","DGRODEBR",117,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",118,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",119,0)
 N LSTCAAF   ;LST CONFIDENTIAL ADDRESS ACTIVE FLAG
"RTN","DGRODEBR",120,0)
 N LSTCAED   ;LST CONFIDENTIAL ADDRESS END DATE
"RTN","DGRODEBR",121,0)
 S LSTCAAF=$G(@DGDATA@(2,LSTDFN_",",.14105,"I"))
"RTN","DGRODEBR",122,0)
 S LSTCAED=$G(@DGDATA@(2,LSTDFN_",",.1418,"I"))
"RTN","DGRODEBR",123,0)
 ;If the CONFIDENTIAL ADDRESS FLAG from the Last Site Treated is "N"o,
"RTN","DGRODEBR",124,0)
 ;  OR  if the C.A. END DATE from the LST is less than the Query date,
"RTN","DGRODEBR",125,0)
 ;delete the C.A. data elements
"RTN","DGRODEBR",126,0)
 I (LSTCAAF'="Y")!(LSTCAED&(LSTCAED<DT)) D
"RTN","DGRODEBR",127,0)
 . N FIELD
"RTN","DGRODEBR",128,0)
 . F FIELD=.14105,.14111,.1411:.0001:.1418 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",129,0)
 . K @DGDATA@(2.141)
"RTN","DGRODEBR",130,0)
 ;Else the Confidential Address information will be filed
"RTN","DGRODEBR",131,0)
 ;and a User Interface message will be displayed.
"RTN","DGRODEBR",132,0)
 E  D
"RTN","DGRODEBR",133,0)
 . N DGMSG
"RTN","DGRODEBR",134,0)
 . S DGMSG(1)="Confidential Address information has been retrieved from the LST."
"RTN","DGRODEBR",135,0)
 . S DGMSG(2)="This information has been filed into the patient's record."
"RTN","DGRODEBR",136,0)
 . S DATE=$G(@DGDATA@(2,LSTDFN_",",.1417,"I"))
"RTN","DGRODEBR",137,0)
 . I DATE>DT D
"RTN","DGRODEBR",138,0)
 . . S Y=DATE D DD^%DT S DATE=Y
"RTN","DGRODEBR",139,0)
 . . S DGMSG(3)="   NOTE:  Confidential Address Start Date is in the future, "_DATE
"RTN","DGRODEBR",140,0)
 . . S DGMSG(4)=""
"RTN","DGRODEBR",141,0)
 . D EN^DDIOL(.DGMSG) R A:5
"RTN","DGRODEBR",142,0)
 Q
"RTN","DGRODEBR",143,0)
 ;
"RTN","DGRODEBR",144,0)
PA(DGDATA,LSTDFN) ;PERMANENT ADDRESS
"RTN","DGRODEBR",145,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGRODEBR",146,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGRODEBR",147,0)
 N LSTBAI   ;LST BAD ADDRESS INDICATOR
"RTN","DGRODEBR",148,0)
 S LSTBAI=$G(@DGDATA@(2,LSTDFN_",",.121,"I"))
"RTN","DGRODEBR",149,0)
 ;If the BAD ADDRESS INDICATOR from LST is NOT null,
"RTN","DGRODEBR",150,0)
 ;delete the PERMANENT ADDRESS data elements
"RTN","DGRODEBR",151,0)
 I LSTBAI'="" D
"RTN","DGRODEBR",152,0)
 . N FIELD
"RTN","DGRODEBR",153,0)
 . F FIELD=.1112,.111:.001:.117 K @DGDATA@(2,LSTDFN_",",FIELD)
"RTN","DGRODEBR",154,0)
 Q
"RTN","DGROHLQ")
0^4^B10886906
"RTN","DGROHLQ",1,0)
DGROHLQ ;DJH/AMA - ROM HL7 QRY/ORF PROCESSING ; 09 Jul 2003  4:41 PM
"RTN","DGROHLQ",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLQ",3,0)
 ;
"RTN","DGROHLQ",4,0)
BLDQRY(DGDFN,DGICN,DGROOT,DGHL) ;Build QRY~R02 Message/Segments
"RTN","DGROHLQ",5,0)
 ;Called from SNDQRY^DGROHLS
"RTN","DGROHLQ",6,0)
 ;  Input:
"RTN","DGROHLQ",7,0)
 ;    DGDFN - (required) Pointer to patient in PATIENT (#2) file
"RTN","DGROHLQ",8,0)
 ;    DGICN - (required) Patient's Integrated Control Number
"RTN","DGROHLQ",9,0)
 ;   DGROOT - (required) Closed root array or global name for segment storage.
"RTN","DGROHLQ",10,0)
 ;     DGHL - (required) VistA HL7 environment array
"RTN","DGROHLQ",11,0)
 ;
"RTN","DGROHLQ",12,0)
 ;  Output:
"RTN","DGROHLQ",13,0)
 ;   Function Value - 1 on success, 0 on failure
"RTN","DGROHLQ",14,0)
 ;           DGROOT - array of HL7 segments on success
"RTN","DGROHLQ",15,0)
 ;
"RTN","DGROHLQ",16,0)
 N DGCNT   ;segment counter
"RTN","DGROHLQ",17,0)
 N DGDEM   ;pt. demographics array
"RTN","DGROHLQ",18,0)
 N DGQRD   ;formatted QRD segment
"RTN","DGROHLQ",19,0)
 N DGQRF   ;formatted QRF segment
"RTN","DGROHLQ",20,0)
 N DGRSLT  ;function value
"RTN","DGROHLQ",21,0)
 N DGSTR   ;field string
"RTN","DGROHLQ",22,0)
 ;
"RTN","DGROHLQ",23,0)
 S (DGCNT,DGRSLT)=0
"RTN","DGROHLQ",24,0)
 ;
"RTN","DGROHLQ",25,0)
 I +$G(DGDFN),+$G(DGICN),$G(DGROOT)]"" D
"RTN","DGROHLQ",26,0)
 . ;
"RTN","DGROHLQ",27,0)
 . ;get patient demographics
"RTN","DGROHLQ",28,0)
 . Q:'$$GETPAT^DGROUT2(DGDFN,.DGDEM)
"RTN","DGROHLQ",29,0)
 . ;build QRD
"RTN","DGROHLQ",30,0)
 . S DGSTR="1,2,3,4,7,8,9,10"
"RTN","DGROHLQ",31,0)
 . S DGQRD=$$QRD^DGROHLQ1(DGDFN,DGICN,DGSTR,.DGHL)
"RTN","DGROHLQ",32,0)
 . Q:(DGQRD="")
"RTN","DGROHLQ",33,0)
 . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGQRD
"RTN","DGROHLQ",34,0)
 . ;
"RTN","DGROHLQ",35,0)
 . ;build QRF
"RTN","DGROHLQ",36,0)
 . S DGSTR="1,4,5"
"RTN","DGROHLQ",37,0)
 . S DGQRF=$$QRF^DGROHLQ2($G(DGDEM("SSN")),$G(DGDEM("DOB")),DGSTR,.DGHL)
"RTN","DGROHLQ",38,0)
 . Q:(DGQRF="")
"RTN","DGROHLQ",39,0)
 . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGQRF
"RTN","DGROHLQ",40,0)
 . ;
"RTN","DGROHLQ",41,0)
 . S DGRSLT=1
"RTN","DGROHLQ",42,0)
 Q DGRSLT
"RTN","DGROHLQ",43,0)
 ;
"RTN","DGROHLQ",44,0)
BLDORF(DGROOT,DGHL,DGDFN,DGQRY,DGSEGERR,DGQRYERR) ;Build ORF~R04 Message/Segments
"RTN","DGROHLQ",45,0)
 ;Called from SNDORF^DGROHLS
"RTN","DGROHLQ",46,0)
 ;  Input:
"RTN","DGROHLQ",47,0)
 ;     DGROOT - (required) Segment array, ^TMP("HLA",$J)
"RTN","DGROHLQ",48,0)
 ;       DGHL - (required) HL7 environment array
"RTN","DGROHLQ",49,0)
 ;      DGDFN - (required) Pointer to patient in PATIENT (#2) file
"RTN","DGROHLQ",50,0)
 ;      DGQRY - (required) Array of parsed QRY data
"RTN","DGROHLQ",51,0)
 ;   DGSEGERR - (optional) Array of errors encountered during QRY parsing
"RTN","DGROHLQ",52,0)
 ;   DGQRYERR - (optional) Error encountered during ICN to DFN conversion
"RTN","DGROHLQ",53,0)
 ;
"RTN","DGROHLQ",54,0)
 ;  Output:
"RTN","DGROHLQ",55,0)
 ;   Function Value - 1 on success, 0 on failure
"RTN","DGROHLQ",56,0)
 ;
"RTN","DGROHLQ",57,0)
 N DGACK     ;acknowledgment code (i.e. AA, AE)
"RTN","DGROHLQ",58,0)
 N DGAIENS   ;array of assignment IENS
"RTN","DGROHLQ",59,0)
 N DGCNT     ;segment counter
"RTN","DGROHLQ",60,0)
 N DGRSLT    ;function value
"RTN","DGROHLQ",61,0)
 N DGSEGSTR  ;formatted segment string
"RTN","DGROHLQ",62,0)
 N DGSTR     ;comma-delimited list of fields to include
"RTN","DGROHLQ",63,0)
 ;
"RTN","DGROHLQ",64,0)
 S DGRSLT=0
"RTN","DGROHLQ",65,0)
 ;
"RTN","DGROHLQ",66,0)
 I $G(DGROOT)]"",+$G(DGDFN)>0,$D(DGQRY) D
"RTN","DGROHLQ",67,0)
 . S DGCNT=0
"RTN","DGROHLQ",68,0)
 . ;
"RTN","DGROHLQ",69,0)
 . ;build MSA segment
"RTN","DGROHLQ",70,0)
 . S DGACK=$S($D(DGSEGERR):"AR",$D(DGQRYERR):"AE",1:"AA")
"RTN","DGROHLQ",71,0)
 . S DGSTR=$S(DGACK="AE":"1,2,6",1:"1,2")
"RTN","DGROHLQ",72,0)
 . I '$D(DGHL("MID")) S DGHL("MID")=+$G(DGHL("ICN"))
"RTN","DGROHLQ",73,0)
 . S DGSEGSTR=$$MSA^DGROHLU3(DGACK,DGHL("MID"),.DGQRYERR,DGSTR,.DGHL)
"RTN","DGROHLQ",74,0)
 . Q:(DGSEGSTR="")
"RTN","DGROHLQ",75,0)
 . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGSEGSTR
"RTN","DGROHLQ",76,0)
 . ;
"RTN","DGROHLQ",77,0)
 . ;build ERR segments for any segment parsing errors
"RTN","DGROHLQ",78,0)
 . I DGACK="AR",'$$BLDERR^DGROHLU4(DGROOT,.DGSEGERR,.DGHL,.DGCNT) Q
"RTN","DGROHLQ",79,0)
 . ;
"RTN","DGROHLQ",80,0)
 . ;build QRD segment
"RTN","DGROHLQ",81,0)
 . S DGSTR="1,2,3,4,7,8,9,10"
"RTN","DGROHLQ",82,0)
 . S DGSEGSTR=$$QRD^DGROHLQ1($G(DGQRY("DFN")),$G(DGQRY("ICN")),DGSTR,.DGHL)
"RTN","DGROHLQ",83,0)
 . Q:(DGSEGSTR="")
"RTN","DGROHLQ",84,0)
 . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGSEGSTR
"RTN","DGROHLQ",85,0)
 . ;
"RTN","DGROHLQ",86,0)
 . ;gather all of the patient data
"RTN","DGROHLQ",87,0)
 . N DGROFDA,DGX
"RTN","DGROHLQ",88,0)
 . S DGROFDA=$NA(^TMP("DGROFDA",$J)) K @DGROFDA
"RTN","DGROHLQ",89,0)
 . D DIQ^DGROHLU(.DGROFDA,2,DGDFN)
"RTN","DGROHLQ",90,0)
 . ;
"RTN","DGROHLQ",91,0)
 . ;build FDA segment
"RTN","DGROHLQ",92,0)
 . K DGSEGSTR
"RTN","DGROHLQ",93,0)
 . D FDA^DGROHLU1(DGROFDA,.DGSEGSTR)
"RTN","DGROHLQ",94,0)
 . K @DGROFDA
"RTN","DGROHLQ",95,0)
 . ;
"RTN","DGROHLQ",96,0)
 . Q:'$D(DGSEGSTR)
"RTN","DGROHLQ",97,0)
 . S DGX=0 F  S DGX=$O(DGSEGSTR(DGX)) Q:'DGX  D
"RTN","DGROHLQ",98,0)
 . . S @DGROOT@(DGCNT+DGX)=DGSEGSTR(DGX)
"RTN","DGROHLQ",99,0)
 . ;
"RTN","DGROHLQ",100,0)
 . S DGRSLT=1
"RTN","DGROHLQ",101,0)
 Q DGRSLT
"RTN","DGROHLQ1")
0^5^B9477851
"RTN","DGROHLQ1",1,0)
DGROHLQ1 ;DJH/AMA - ROM HL7 BUILD QRD SEGMENT ; 24 Jun 2003  3:53 PM
"RTN","DGROHLQ1",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLQ1",3,0)
 ;
"RTN","DGROHLQ1",4,0)
QRD(DGDFN,DGICN,DGFLD,DGHL) ;QRD HL7 segment API
"RTN","DGROHLQ1",5,0)
 ;This function wraps the data retrieval and segment creation APIs
"RTN","DGROHLQ1",6,0)
 ;and returns a formatted QRD segment.
"RTN","DGROHLQ1",7,0)
 ;  Called from BLDQRY and BLDORF^DGROHLQ
"RTN","DGROHLQ1",8,0)
 ;
"RTN","DGROHLQ1",9,0)
 ;  Input:
"RTN","DGROHLQ1",10,0)
 ;    DGDFN - (required) DFN
"RTN","DGROHLQ1",11,0)
 ;    DGICN - (required) Integrated Control Number
"RTN","DGROHLQ1",12,0)
 ;    DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGROHLQ1",13,0)
 ;            to include.  Defaults to all required fields (1-4,7-10).
"RTN","DGROHLQ1",14,0)
 ;     DGHL - VistA HL7 environment array
"RTN","DGROHLQ1",15,0)
 ;
"RTN","DGROHLQ1",16,0)
 ; Output:
"RTN","DGROHLQ1",17,0)
 ;  Function Value - QRD segment on success, "" on failure
"RTN","DGROHLQ1",18,0)
 ;
"RTN","DGROHLQ1",19,0)
 N DGQRD,DGVAL
"RTN","DGROHLQ1",20,0)
 ;
"RTN","DGROHLQ1",21,0)
 S DGQRD=""
"RTN","DGROHLQ1",22,0)
 I $G(DGDFN)>0,$G(DGICN)]"" D
"RTN","DGROHLQ1",23,0)
 . S DGFLD=$$CKSTR^DGROHLUT("1,2,3,4,7,8,9,10",DGFLD)  ;validate fields
"RTN","DGROHLQ1",24,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGROHLQ1",25,0)
 . I $$QRDVAL(DGFLD,DGDFN,DGICN,.DGVAL) D
"RTN","DGROHLQ1",26,0)
 . . S DGQRD=$$BLDSEG^DGROHLUT("QRD",.DGVAL,.DGHL)
"RTN","DGROHLQ1",27,0)
 Q DGQRD
"RTN","DGROHLQ1",28,0)
 ;
"RTN","DGROHLQ1",29,0)
QRDVAL(DGFLD,DGDFN,DGICN,DGVAL) ;build QRD value array
"RTN","DGROHLQ1",30,0)
 ;
"RTN","DGROHLQ1",31,0)
 ;  Input:
"RTN","DGROHLQ1",32,0)
 ;    DGFLD - Fields string
"RTN","DGROHLQ1",33,0)
 ;    DGDFN - DFN
"RTN","DGROHLQ1",34,0)
 ;    DGICN - ICN
"RTN","DGROHLQ1",35,0)
 ;    
"RTN","DGROHLQ1",36,0)
 ;  Output:
"RTN","DGROHLQ1",37,0)
 ;   Function Value - 1 on success, 0 on failure
"RTN","DGROHLQ1",38,0)
 ;            DGVAL - QRD field array [SUB1:field, SUB2:repetition,
"RTN","DGROHLQ1",39,0)
 ;                                     SUB3:component, SUB4:sub-component
"RTN","DGROHLQ1",40,0)
 ;
"RTN","DGROHLQ1",41,0)
 N DGRSLT
"RTN","DGROHLQ1",42,0)
 ;
"RTN","DGROHLQ1",43,0)
 S DGRSLT=0
"RTN","DGROHLQ1",44,0)
 I $G(DGDFN)>0,$G(DGICN)]"",$G(DGFLD)]"" D
"RTN","DGROHLQ1",45,0)
 . ;
"RTN","DGROHLQ1",46,0)
 . ; seq 1 (required) Query Date/Time
"RTN","DGROHLQ1",47,0)
 . I DGFLD[",1," D  Q:(+DGVAL(1)'>0)
"RTN","DGROHLQ1",48,0)
 . . S DGVAL(1)=$$FMTHL7^XLFDT($$NOW^XLFDT())
"RTN","DGROHLQ1",49,0)
 . ;
"RTN","DGROHLQ1",50,0)
 . ; seq 2 (required) Query Format Code
"RTN","DGROHLQ1",51,0)
 . I DGFLD[",2," D
"RTN","DGROHLQ1",52,0)
 . . S DGVAL(2)="R"  ;always "R"ecord
"RTN","DGROHLQ1",53,0)
 . ;
"RTN","DGROHLQ1",54,0)
 . ; seq 3 (required) Query Priority
"RTN","DGROHLQ1",55,0)
 . I DGFLD[",3," D
"RTN","DGROHLQ1",56,0)
 . . S DGVAL(3)="I"  ;always "I"mmediate
"RTN","DGROHLQ1",57,0)
 . ;
"RTN","DGROHLQ1",58,0)
 . ; seq 4 (required) DFN
"RTN","DGROHLQ1",59,0)
 . I DGFLD[",4," D
"RTN","DGROHLQ1",60,0)
 . . S DGVAL(4)=DGDFN
"RTN","DGROHLQ1",61,0)
 . ;
"RTN","DGROHLQ1",62,0)
 . ; seq 5 (optional) Deferred Response Type
"RTN","DGROHLQ1",63,0)
 . I DGFLD[",5," D
"RTN","DGROHLQ1",64,0)
 . . S DGVAL(5)=""
"RTN","DGROHLQ1",65,0)
 . ;
"RTN","DGROHLQ1",66,0)
 . ; seq 6 (optional) Deferred Response Date/Time
"RTN","DGROHLQ1",67,0)
 . I DGFLD[",6," D
"RTN","DGROHLQ1",68,0)
 . . S DGVAL(6)=""
"RTN","DGROHLQ1",69,0)
 . ;
"RTN","DGROHLQ1",70,0)
 . ; seq 7 (required) Quantity Limited Request
"RTN","DGROHLQ1",71,0)
 . I DGFLD[",7," D
"RTN","DGROHLQ1",72,0)
 . . S DGVAL(7,1,1)=10
"RTN","DGROHLQ1",73,0)
 . . S DGVAL(7,1,2)="RD"  ;records
"RTN","DGROHLQ1",74,0)
 . ;
"RTN","DGROHLQ1",75,0)
 . ; seq 8 (required) ICN
"RTN","DGROHLQ1",76,0)
 . I DGFLD[",8," D
"RTN","DGROHLQ1",77,0)
 . . S DGVAL(8,1,1)=DGICN
"RTN","DGROHLQ1",78,0)
 . . S DGVAL(8,1,9,1)="USVHA"
"RTN","DGROHLQ1",79,0)
 . . S DGVAL(8,1,9,2)=""
"RTN","DGROHLQ1",80,0)
 . . S DGVAL(8,1,9,3)="L"
"RTN","DGROHLQ1",81,0)
 . ;
"RTN","DGROHLQ1",82,0)
 . ; seq 9 (required) What Subject Filter
"RTN","DGROHLQ1",83,0)
 . I DGFLD[",9," D
"RTN","DGROHLQ1",84,0)
 . . S DGVAL(9,1,1)="OTH"
"RTN","DGROHLQ1",85,0)
 . . S DGVAL(9,1,2)="Other"
"RTN","DGROHLQ1",86,0)
 . . S DGVAL(9,1,3)="HL0048"
"RTN","DGROHLQ1",87,0)
 . ;
"RTN","DGROHLQ1",88,0)
 . ; seq 10 (required) What Dept. Data Code
"RTN","DGROHLQ1",89,0)
 . I DGFLD[",10," D
"RTN","DGROHLQ1",90,0)
 . . S DGVAL(10,1,1)="ROMDD"
"RTN","DGROHLQ1",91,0)
 . . S DGVAL(10,1,2)="Register Once Messaging Demographic Data"
"RTN","DGROHLQ1",92,0)
 . . S DGVAL(10,1,3)="L"
"RTN","DGROHLQ1",93,0)
 . ;
"RTN","DGROHLQ1",94,0)
 . ; seq 11 (optional) What Data Code Value Qual.
"RTN","DGROHLQ1",95,0)
 . I DGFLD[",11," D
"RTN","DGROHLQ1",96,0)
 . . S DGVAL(11)=""
"RTN","DGROHLQ1",97,0)
 . ;
"RTN","DGROHLQ1",98,0)
 . ; seq 12 (optional) Query Results Level
"RTN","DGROHLQ1",99,0)
 . I DGFLD[",12," D
"RTN","DGROHLQ1",100,0)
 . . S DGVAL(12)=""
"RTN","DGROHLQ1",101,0)
 . ;
"RTN","DGROHLQ1",102,0)
 . S DGRSLT=1
"RTN","DGROHLQ1",103,0)
 I 'DGRSLT K DGVAL
"RTN","DGROHLQ1",104,0)
 Q DGRSLT
"RTN","DGROHLQ2")
0^6^B5967124
"RTN","DGROHLQ2",1,0)
DGROHLQ2 ;DJH/AMA - ROM HL7 BUILD QRF SEGMENT ; 24 Jun 2003  3:53 PM
"RTN","DGROHLQ2",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLQ2",3,0)
 ;
"RTN","DGROHLQ2",4,0)
 ;
"RTN","DGROHLQ2",5,0)
QRF(DGSSN,DGDOB,DGFLD,DGHL) ;QRF HL7 segment API
"RTN","DGROHLQ2",6,0)
 ;This function wraps the data retrieval and segment crateion APIs and
"RTN","DGROHLQ2",7,0)
 ;returns a formatted QRF segment.  Called from BLDQRY^DGROHLQ
"RTN","DGROHLQ2",8,0)
 ;
"RTN","DGROHLQ2",9,0)
 ;  Input:
"RTN","DGROHLQ2",10,0)
 ;    DGSSN - (required) Patient's Social Security Number
"RTN","DGROHLQ2",11,0)
 ;    DGDOB - (required) Patient's Date of Birth in FileMan format
"RTN","DGROHLQ2",12,0)
 ;    DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGROHLQ2",13,0)
 ;            to include.  Defaults to all required fields (1).
"RTN","DGROHLQ2",14,0)
 ;     DGHL - VistA HL7 environment array
"RTN","DGROHLQ2",15,0)
 ;
"RTN","DGROHLQ2",16,0)
 ;  Output:
"RTN","DGROHLQ2",17,0)
 ;    Function Value - QRF segment on success, "" on failure
"RTN","DGROHLQ2",18,0)
 ;
"RTN","DGROHLQ2",19,0)
 N DGQRF,DGVAL
"RTN","DGROHLQ2",20,0)
 ;
"RTN","DGROHLQ2",21,0)
 S DGQRF=""
"RTN","DGROHLQ2",22,0)
 I $G(DGSSN),$G(DGDOB) D
"RTN","DGROHLQ2",23,0)
 . S DGFLD=$$CKSTR^DGROHLUT("1",DGFLD)  ;validate field string
"RTN","DGROHLQ2",24,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGROHLQ2",25,0)
 . I $$QRFVAL(DGFLD,DGSSN,DGDOB,.DGVAL) D
"RTN","DGROHLQ2",26,0)
 . . S DGQRF=$$BLDSEG^DGROHLUT("QRF",.DGVAL,.DGHL)
"RTN","DGROHLQ2",27,0)
 Q DGQRF
"RTN","DGROHLQ2",28,0)
 ;
"RTN","DGROHLQ2",29,0)
QRFVAL(DGFLD,DGSSN,DGDOB,DGVAL) ;build QRF field value array
"RTN","DGROHLQ2",30,0)
 ;
"RTN","DGROHLQ2",31,0)
 ;  Input:
"RTN","DGROHLQ2",32,0)
 ;    DGFLD - (required) Fields string
"RTN","DGROHLQ2",33,0)
 ;    DGSSN - (required) Patient's Social Security Number
"RTN","DGROHLQ2",34,0)
 ;    DGDOB - (required) Patient's Date of Birth
"RTN","DGROHLQ2",35,0)
 ;
"RTN","DGROHLQ2",36,0)
 ;  Output:
"RTN","DGROHLQ2",37,0)
 ;    Function Value - 1 on success, 0 on failure
"RTN","DGROHLQ2",38,0)
 ;             DGVAL - QRF field array [SUB1:field, SUB2:repetition,
"RTN","DGROHLQ2",39,0)
 ;                                     SUB3:component, SUB4:sub-component]
"RTN","DGROHLQ2",40,0)
 ;
"RTN","DGROHLQ2",41,0)
 N DGRSLT
"RTN","DGROHLQ2",42,0)
 ;
"RTN","DGROHLQ2",43,0)
 S DGRSLT=0
"RTN","DGROHLQ2",44,0)
 I $G(DGFLD)]"",$G(DGSSN),$G(DGDOB) D
"RTN","DGROHLQ2",45,0)
 . ;
"RTN","DGROHLQ2",46,0)
 . ; seq 1 (required) Where Subj Filter
"RTN","DGROHLQ2",47,0)
 . I DGFLD[",1," D
"RTN","DGROHLQ2",48,0)
 . . S DGVAL(1)="ROM"
"RTN","DGROHLQ2",49,0)
 . ;
"RTN","DGROHLQ2",50,0)
 . ; seq 2 (optional) When Data Start Date/Time
"RTN","DGROHLQ2",51,0)
 . I DGFLD[",2," D
"RTN","DGROHLQ2",52,0)
 . . S DGVAL(2)=""
"RTN","DGROHLQ2",53,0)
 . ;
"RTN","DGROHLQ2",54,0)
 . ; seq 3 (optional) When Data End Date/Time
"RTN","DGROHLQ2",55,0)
 . I DGFLD[",3," D
"RTN","DGROHLQ2",56,0)
 . . S DGVAL(3)=""
"RTN","DGROHLQ2",57,0)
 . ;
"RTN","DGROHLQ2",58,0)
 . ; seq 4 (optional) What User Qualifier
"RTN","DGROHLQ2",59,0)
 . I DGFLD[",4," D
"RTN","DGROHLQ2",60,0)
 . . S DGVAL(4)=DGSSN
"RTN","DGROHLQ2",61,0)
 . ;
"RTN","DGROHLQ2",62,0)
 . ; seq 5 (optional) Other Query Subj Filter
"RTN","DGROHLQ2",63,0)
 . I DGFLD[",5," D
"RTN","DGROHLQ2",64,0)
 . . S DGVAL(5)=$$FMTHL7^XLFDT(DGDOB)
"RTN","DGROHLQ2",65,0)
 . ;
"RTN","DGROHLQ2",66,0)
 . ;- seq 6 (optional) Which Date/Time Qualifier
"RTN","DGROHLQ2",67,0)
 . I DGFLD[",6," D
"RTN","DGROHLQ2",68,0)
 . . S DGVAL(6)=""
"RTN","DGROHLQ2",69,0)
 . ;
"RTN","DGROHLQ2",70,0)
 . ; seq 7 (optional) Which Date/Time Status Qualifier
"RTN","DGROHLQ2",71,0)
 . I DGFLD[",7," D
"RTN","DGROHLQ2",72,0)
 . . S DGVAL(7)=""
"RTN","DGROHLQ2",73,0)
 . ;
"RTN","DGROHLQ2",74,0)
 . ; seq 8 (optional) Date/Time Selection Qualifier
"RTN","DGROHLQ2",75,0)
 . I DGFLD[",8," D
"RTN","DGROHLQ2",76,0)
 . . S DGVAL(8)=""
"RTN","DGROHLQ2",77,0)
 . ;
"RTN","DGROHLQ2",78,0)
 . ; seq 9 (optional) When Quantity/Timing Qualifier
"RTN","DGROHLQ2",79,0)
 . I DGFLD[",9," D
"RTN","DGROHLQ2",80,0)
 . . S DGVAL(9)=""
"RTN","DGROHLQ2",81,0)
 . ;
"RTN","DGROHLQ2",82,0)
 . S DGRSLT=1
"RTN","DGROHLQ2",83,0)
 I 'DGRSLT K DGVAL
"RTN","DGROHLQ2",84,0)
 Q DGRSLT
"RTN","DGROHLQ3")
0^7^B10020641
"RTN","DGROHLQ3",1,0)
DGROHLQ3 ;DJH/AMA - ROM HL7 QRY/ORF PROCESSING ; 09 Jul 2003  4:41 PM
"RTN","DGROHLQ3",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLQ3",3,0)
 ;
"RTN","DGROHLQ3",4,0)
PARSQRY(DGWRK,DGHL,DGQRY,DGROERR) ;Parse QRY~R02 Message/Segments
"RTN","DGROHLQ3",5,0)
 ;Called from RCVQRY^DGROHLR
"RTN","DGROHLQ3",6,0)
 ;  Input:
"RTN","DGROHLQ3",7,0)
 ;    DGWRK - Closed root global reference, ^TMP("DGROHL7",$J)
"RTN","DGROHLQ3",8,0)
 ;     DGHL - VistA HL7 environment array
"RTN","DGROHLQ3",9,0)
 ;
"RTN","DGROHLQ3",10,0)
 ;  Output:
"RTN","DGROHLQ3",11,0)
 ;    DGQRY - Patient lookup components array
"RTN","DGROHLQ3",12,0)
 ;   DGROERR - Undefined on success, ERR segment data array on failure
"RTN","DGROHLQ3",13,0)
 ;             Format:  DGROERR(seg_id,sequence,fld_pos)=error_code
"RTN","DGROHLQ3",14,0)
 ;
"RTN","DGROHLQ3",15,0)
 N DGFS      ;field separator
"RTN","DGROHLQ3",16,0)
 N DGCS      ;component separator
"RTN","DGROHLQ3",17,0)
 N DGRS      ;repetition separator
"RTN","DGROHLQ3",18,0)
 N DGSS      ;sub-component separator
"RTN","DGROHLQ3",19,0)
 N DGCURLIN  ;current segment line
"RTN","DGROHLQ3",20,0)
 N DGSEG     ;segment field data array
"RTN","DGROHLQ3",21,0)
 N DGROERR   ;error processing array
"RTN","DGROHLQ3",22,0)
 ;
"RTN","DGROHLQ3",23,0)
 S DGFS=DGHL("FS")
"RTN","DGROHLQ3",24,0)
 S DGCS=$E(DGHL("ECH"),1)
"RTN","DGROHLQ3",25,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGROHLQ3",26,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGROHLQ3",27,0)
 S DGCURLIN=0
"RTN","DGROHLQ3",28,0)
 ;
"RTN","DGROHLQ3",29,0)
 ;loop through the message segments and retrieve the field data
"RTN","DGROHLQ3",30,0)
 F  D  Q:'DGCURLIN
"RTN","DGROHLQ3",31,0)
 . N DGSEG
"RTN","DGROHLQ3",32,0)
 . S DGCURLIN=$$NXTSEG^DGROHLUT(DGWRK,DGCURLIN,DGFS,.DGSEG)
"RTN","DGROHLQ3",33,0)
 . Q:'DGCURLIN
"RTN","DGROHLQ3",34,0)
 . D @(DGSEG("TYPE")_"(.DGSEG,DGCS,DGRS,DGSS,.DGQRY,.DGROERR)")
"RTN","DGROHLQ3",35,0)
 Q
"RTN","DGROHLQ3",36,0)
 ;
"RTN","DGROHLQ3",37,0)
PARSORF(DGWRK,DGHL,DGORF,DGMSG,DGDATA) ;Parse ORF~R04 Message/Segments
"RTN","DGROHLQ3",38,0)
 ;Called RCVORF^DGROHLR
"RTN","DGROHLQ3",39,0)
 ;  Input:
"RTN","DGROHLQ3",40,0)
 ;    DGWRK - Closed root work global reference, ^TMP("DGROHL7",$J)
"RTN","DGROHLQ3",41,0)
 ;     DGHL - HL7 environment array
"RTN","DGROHLQ3",42,0)
 ;
"RTN","DGROHLQ3",43,0)
 ;  Output:
"RTN","DGROHLQ3",44,0)
 ;     DGORF - array of ORF results
"RTN","DGROHLQ3",45,0)
 ;             "ACKCODE" - acknowledgment code ("AA","AE","AR")
"RTN","DGROHLQ3",46,0)
 ;             "DFN"     - DFN
"RTN","DGROHLQ3",47,0)
 ;             "ICN"     - patient's Integrated Control Number
"RTN","DGROHLQ3",48,0)
 ;             "MSGDTM"  - message creation date/time in FileMan format
"RTN","DGROHLQ3",49,0)
 ;             "MSGID"   - Message ID for HL7
"RTN","DGROHLQ3",50,0)
 ;             "RCVFAC"  - receiving facility
"RTN","DGROHLQ3",51,0)
 ;             "SNDFAC"  - sending facility
"RTN","DGROHLQ3",52,0)
 ;    DGDATA - array of patient data to upload, ^TMP("DGROFDA",$J)
"RTN","DGROHLQ3",53,0)
 ;     DGMSG - undefined on success, array of MailMan text on failure
"RTN","DGROHLQ3",54,0)
 ;
"RTN","DGROHLQ3",55,0)
 N DGFS,DGCS,DGRS,DGSS,DGCURLIN
"RTN","DGROHLQ3",56,0)
 ;
"RTN","DGROHLQ3",57,0)
 S DGFS=DGHL("FS")
"RTN","DGROHLQ3",58,0)
 S DGCS=$E(DGHL("ECH"),1)
"RTN","DGROHLQ3",59,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGROHLQ3",60,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGROHLQ3",61,0)
 S DGCURLIN=0
"RTN","DGROHLQ3",62,0)
 ;
"RTN","DGROHLQ3",63,0)
 ;loop through the message segments and retrieve the field data
"RTN","DGROHLQ3",64,0)
 F  D  Q:'DGCURLIN
"RTN","DGROHLQ3",65,0)
 . N DGSEG
"RTN","DGROHLQ3",66,0)
 . S DGCURLIN=$$NXTSEG^DGROHLUT(DGWRK,DGCURLIN,DGFS,.DGSEG)
"RTN","DGROHLQ3",67,0)
 . Q:'DGCURLIN
"RTN","DGROHLQ3",68,0)
 . I DGSEG("TYPE")'="FDA" D @(DGSEG("TYPE")_"(.DGSEG,DGCS,DGRS,DGSS,.DGORF,.DGMSG)") I 1
"RTN","DGROHLQ3",69,0)
 . E  D FDA^DGROHLU(DGWRK,.DGCURLIN,DGFS,DGCS,DGRS,.DGDATA)
"RTN","DGROHLQ3",70,0)
 Q
"RTN","DGROHLQ3",71,0)
 ;
"RTN","DGROHLQ3",72,0)
MSH(DGSEG,DGCS,DGRS,DGSS,DGORF,DGERR) ;
"RTN","DGROHLQ3",73,0)
 ;
"RTN","DGROHLQ3",74,0)
 ;  Input:
"RTN","DGROHLQ3",75,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLQ3",76,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLQ3",77,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLQ3",78,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLQ3",79,0)
 ;
"RTN","DGROHLQ3",80,0)
 ;  Output:
"RTN","DGROHLQ3",81,0)
 ;    DGORF - array of ORF results
"RTN","DGROHLQ3",82,0)
 ;            "SNDFAC" - sending facility
"RTN","DGROHLQ3",83,0)
 ;            "RCVFAC" - receiving facility
"RTN","DGROHLQ3",84,0)
 ;            "MSGDTM" - message creation date/time in FileMan format
"RTN","DGROHLQ3",85,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLQ3",86,0)
 ;
"RTN","DGROHLQ3",87,0)
 D MSH^DGROHLU4(.DGSEG,DGCS,DGRS,DGSS,.DGORF,.DGERR)
"RTN","DGROHLQ3",88,0)
 Q
"RTN","DGROHLQ3",89,0)
 ;
"RTN","DGROHLQ3",90,0)
MSA(DGSEG,DGCS,DGRS,DGSS,DGORF,DGERR) ;
"RTN","DGROHLQ3",91,0)
 ;
"RTN","DGROHLQ3",92,0)
 ;  Input:
"RTN","DGROHLQ3",93,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLQ3",94,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLQ3",95,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLQ3",96,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLQ3",97,0)
 ;
"RTN","DGROHLQ3",98,0)
 ;  Output:
"RTN","DGROHLQ3",99,0)
 ;    DGORF - array of ORF results
"RTN","DGROHLQ3",100,0)
 ;            "ACKCODE" - Acknowledgment code
"RTN","DGROHLQ3",101,0)
 ;            "MSGID" - Message Control ID of the message being ACK'ed
"RTN","DGROHLQ3",102,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLQ3",103,0)
 ;
"RTN","DGROHLQ3",104,0)
 D MSA^DGROHLU4(.DGSEG,DGCS,DGRS,DGSS,.DGORF,.DGERR)
"RTN","DGROHLQ3",105,0)
 Q
"RTN","DGROHLQ3",106,0)
 ;
"RTN","DGROHLQ3",107,0)
ERR(DGSEG,DGCS,DGRS,DGSS,DGORF,DGERR) ;
"RTN","DGROHLQ3",108,0)
 ;
"RTN","DGROHLQ3",109,0)
 ;  Input:
"RTN","DGROHLQ3",110,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLQ3",111,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLQ3",112,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLQ3",113,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLQ3",114,0)
 ;
"RTN","DGROHLQ3",115,0)
 ;  Output:
"RTN","DGROHLQ3",116,0)
 ;    DGORF - array of ORF results
"RTN","DGROHLQ3",117,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLQ3",118,0)
 ;
"RTN","DGROHLQ3",119,0)
 D ERR^DGROHLU4(.DGSEG,DGCS,DGRS,DGSS,.DGORF,.DGERR)
"RTN","DGROHLQ3",120,0)
 Q
"RTN","DGROHLQ3",121,0)
 ;
"RTN","DGROHLQ3",122,0)
QRD(DGSEG,DGCS,DGRS,DGSS,DGQRY,DGERR) ;
"RTN","DGROHLQ3",123,0)
 ;
"RTN","DGROHLQ3",124,0)
 ;  Input:
"RTN","DGROHLQ3",125,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLQ3",126,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLQ3",127,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLQ3",128,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLQ3",129,0)
 ;
"RTN","DGROHLQ3",130,0)
 ;  Output:
"RTN","DGROHLQ3",131,0)
 ;    DGQRY("ICN") - Patient's Integrated Control Number
"RTN","DGROHLQ3",132,0)
 ;    DGQRY("DFN") - Query ID
"RTN","DGROHLQ3",133,0)
 ;           DGERR - undefined on success, error array on failure
"RTN","DGROHLQ3",134,0)
 ;                      format: DGERR(seg_id,sequence,fld_pos)=error code
"RTN","DGROHLQ3",135,0)
 ;
"RTN","DGROHLQ3",136,0)
 S DGQRY("DFN")=$G(DGSEG(4))
"RTN","DGROHLQ3",137,0)
 S DGQRY("ICN")=+$P($G(DGSEG(8)),DGCS,1)
"RTN","DGROHLQ3",138,0)
 I DGQRY("ICN")="" D
"RTN","DGROHLQ3",139,0)
 . S DGERR("QRD",1,8)="NM"
"RTN","DGROHLQ3",140,0)
 Q
"RTN","DGROHLQ3",141,0)
 ;
"RTN","DGROHLQ3",142,0)
QRF(DGSEG,DGCS,DGRS,DGSS,DGQRY,DGERR) ;
"RTN","DGROHLQ3",143,0)
 ;
"RTN","DGROHLQ3",144,0)
 ;  Input:
"RTN","DGROHLQ3",145,0)
 ;    DGSEG - PID segment field array
"RTN","DGROHLQ3",146,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLQ3",147,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLQ3",148,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLQ3",149,0)
 ;
"RTN","DGROHLQ3",150,0)
 ;  Output:
"RTN","DGROHLQ3",151,0)
 ;    DGQRY("SSN") - Patient's Social Security Number
"RTN","DGROHLQ3",152,0)
 ;    DGQRY("DOB") - Patient's Date of Birth
"RTN","DGROHLQ3",153,0)
 ;           DGERR - undefined on success, error array on failure
"RTN","DGROHLQ3",154,0)
 ;                   format: DGERR(seg_id,sequence,fld_pos)=error code
"RTN","DGROHLQ3",155,0)
 ;
"RTN","DGROHLQ3",156,0)
 S DGQRY("SSN")=$G(DGSEG(4))
"RTN","DGROHLQ3",157,0)
 I DGQRY("SSN")="" S DGERR("QRF",1,4)="NM"  ;no match
"RTN","DGROHLQ3",158,0)
 ;
"RTN","DGROHLQ3",159,0)
 S DGQRY("DOB")=+$$HL7TFM^XLFDT($G(DGSEG(5)))
"RTN","DGROHLQ3",160,0)
 I DGQRY("DOB")'>0 S DGERR("QRF",1,5)="NM"  ;no match
"RTN","DGROHLQ3",161,0)
 Q
"RTN","DGROHLR")
0^8^B35271600
"RTN","DGROHLR",1,0)
DGROHLR ;DJH/AMA - ROM HL7 RECEIVE DRIVERS ; 09 Jul 2003  4:41 PM
"RTN","DGROHLR",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLR",3,0)
 ;
"RTN","DGROHLR",4,0)
RCV ;Receive all message types and route to message specific receiver
"RTN","DGROHLR",5,0)
 ;
"RTN","DGROHLR",6,0)
 ;This procedure is the main driver entry point for receiving all
"RTN","DGROHLR",7,0)
 ;message types (ACK, QRY and ORF) for Register Once Messaging.
"RTN","DGROHLR",8,0)
 ;
"RTN","DGROHLR",9,0)
 ;All procedures and functions assume that all VistA HL7 environment
"RTN","DGROHLR",10,0)
 ;variables are properly initialized and will produce a fatal error if
"RTN","DGROHLR",11,0)
 ;they are missing.
"RTN","DGROHLR",12,0)
 ;
"RTN","DGROHLR",13,0)
 ;The received message is copied to a temporary work global for
"RTN","DGROHLR",14,0)
 ;processing.  The message type is determined from the MSH segment and
"RTN","DGROHLR",15,0)
 ;a receive processing procedure specific to the message type is called.
"RTN","DGROHLR",16,0)
 ;(Ex. ORF~R01 message calls procedure: RCVORF).  The specific receive
"RTN","DGROHLR",17,0)
 ;processing procedure calls a message specific parse procedure to
"RTN","DGROHLR",18,0)
 ;validate the message data and return data arrays for storage.  If no
"RTN","DGROHLR",19,0)
 ;parse errors are reported during validation, then the data arrays are
"RTN","DGROHLR",20,0)
 ;stored by the receive processing procedure.  Control, along with any
"RTN","DGROHLR",21,0)
 ;parse validation errors, is then passed to the message specific send
"RTN","DGROHLR",22,0)
 ;processing procedures to build and transmit the acknowledgment and
"RTN","DGROHLR",23,0)
 ;query results messages.
"RTN","DGROHLR",24,0)
 ;
"RTN","DGROHLR",25,0)
 ;  The message specific procedures are as follows:
"RTN","DGROHLR",26,0)
 ;
"RTN","DGROHLR",27,0)
 ;  Message   Receive Procedure   Parse Procedure    Send Procedure
"RTN","DGROHLR",28,0)
 ;  -------   -----------------   ----------------    --------------
"RTN","DGROHLR",29,0)
 ;                                                   SNDACK^DGROHLS
"RTN","DGROHLR",30,0)
 ;  ACK~R01   RCVACK^DGROHLR      PARSACK^DGROHLU4   N/A
"RTN","DGROHLR",31,0)
 ;  QRY~R02   RCVQRY^DGROHLR      PARSQRY^DGROHLQ3   SNDORF^DGROHLS
"RTN","DGROHLR",32,0)
 ;  ORF~R01   RCVORF^DGROHLR      PARSORF^DGROHLQ3   N/A
"RTN","DGROHLR",33,0)
 ;
"RTN","DGROHLR",34,0)
 N DGCNT,DGMSGTYP,DGSEG,DGSEGCNT,DGWRK
"RTN","DGROHLR",35,0)
 ;
"RTN","DGROHLR",36,0)
 S DGWRK=$NA(^TMP("DGROHL7",$J))
"RTN","DGROHLR",37,0)
 K @DGWRK
"RTN","DGROHLR",38,0)
 ;
"RTN","DGROHLR",39,0)
 ;load work global with segments
"RTN","DGROHLR",40,0)
 F DGSEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","DGROHLR",41,0)
 . S DGCNT=0
"RTN","DGROHLR",42,0)
 . S @DGWRK@(DGSEGCNT,DGCNT)=HLNODE
"RTN","DGROHLR",43,0)
 . F  S DGCNT=$O(HLNODE(DGCNT)) Q:'DGCNT  D
"RTN","DGROHLR",44,0)
 . . S @DGWRK@(DGSEGCNT,DGCNT)=HLNODE(DGCNT)
"RTN","DGROHLR",45,0)
 ;
"RTN","DGROHLR",46,0)
 ;get message type from "MSH"
"RTN","DGROHLR",47,0)
  I $$NXTSEG^DGROHLUT(DGWRK,0,HL("FS"),.DGSEG),$G(DGSEG("TYPE"))="MSH" D
"RTN","DGROHLR",48,0)
 . S DGMSGTYP=$P(DGSEG(9),$E(HL("ECH"),1),1)
"RTN","DGROHLR",49,0)
 . ;HLMTIENS is only required by RCVORU and RCVQRY, thus $GET
"RTN","DGROHLR",50,0)
 . I DGMSGTYP="" S (DGMSGTYP,HL("MTN"))="ORF",HLMTIENS=HLMTIEN
"RTN","DGROHLR",51,0)
 . I DGMSGTYP=HL("MTN") D @("RCV"_DGMSGTYP_"(DGWRK,$G(HLMTIENS),.HL)")
"RTN","DGROHLR",52,0)
 ;
"RTN","DGROHLR",53,0)
 ;cleanup
"RTN","DGROHLR",54,0)
 K @DGWRK
"RTN","DGROHLR",55,0)
 Q
"RTN","DGROHLR",56,0)
 ;
"RTN","DGROHLR",57,0)
RCVACK(DGWRK,DGMIEN,DGHL) ;Receive ACK Message Types (ACK~R01)
"RTN","DGROHLR",58,0)
 ;
"RTN","DGROHLR",59,0)
 ;  Input:
"RTN","DGROHLR",60,0)
 ;    DGWRK - name of work global containing segments
"RTN","DGROHLR",61,0)
 ;   DGMIEN - IEN of message entry in file #773
"RTN","DGROHLR",62,0)
 ;     DGHL - HL environment array
"RTN","DGROHLR",63,0)
 ;
"RTN","DGROHLR",64,0)
 ;  Output:
"RTN","DGROHLR",65,0)
 ;    none
"RTN","DGROHLR",66,0)
 ;
"RTN","DGROHLR",67,0)
 N DGACK   ;ACK data array
"RTN","DGROHLR",68,0)
 N DGERR   ;error array
"RTN","DGROHLR",69,0)
 N DGLIEN  ;HL7 transmission log IEN
"RTN","DGROHLR",70,0)
 N DGROL   ;HL7 transmssion log data array
"RTN","DGROHLR",71,0)
 ;
"RTN","DGROHLR",72,0)
 S ACKCODE=0
"RTN","DGROHLR",73,0)
 D PARSACK^DGROHLU4(DGWRK,.DGHL,.DGACK,.DGERR)
"RTN","DGROHLR",74,0)
 I $G(DGACK("ACKCODE"))'="AA" S ACKCODE=1
"RTN","DGROHLR",75,0)
 Q
"RTN","DGROHLR",76,0)
 ;
"RTN","DGROHLR",77,0)
RCVQRY(DGWRK,DGMIEN,DGHL) ;Receive QRY Message Types (QRY~R02)
"RTN","DGROHLR",78,0)
 ;
"RTN","DGROHLR",79,0)
 ;  Input:
"RTN","DGROHLR",80,0)
 ;    DGWRK - name of work global containing segments
"RTN","DGROHLR",81,0)
 ;   DGMIEN - IEN of message entry in file #773
"RTN","DGROHLR",82,0)
 ;     DGHL - HL environment array
"RTN","DGROHLR",83,0)
 ;
"RTN","DGROHLR",84,0)
 ;  Output:
"RTN","DGROHLR",85,0)
 ;    none
"RTN","DGROHLR",86,0)
 ;
"RTN","DGROHLR",87,0)
 N DGDFN,DGQRY,DGQRYERR,DGSEGERR
"RTN","DGROHLR",88,0)
 ;
"RTN","DGROHLR",89,0)
 D PARSQRY^DGROHLQ3(DGWRK,.DGHL,.DGQRY,.DGSEGERR)
"RTN","DGROHLR",90,0)
 S DGDFN=$$GETDFN^DGROUT2(DGQRY("ICN"),DGQRY("DOB"),DGQRY("SSN"))
"RTN","DGROHLR",91,0)
 I DGDFN'>0 D
"RTN","DGROHLR",92,0)
 . S DGQRYERR="NM"
"RTN","DGROHLR",93,0)
 . ;
"RTN","DGROHLR",94,0)
 . ;THE ICN FROM THE MPI DOES NOT MATCH A PATIENT, SO NOTIFY THE MPI
"RTN","DGROHLR",95,0)
 . D MPIMAIL^DGROMAIL(.DGQRY)
"RTN","DGROHLR",96,0)
 . ;
"RTN","DGROHLR",97,0)
 D SNDORF^DGROHLS(.DGQRY,DGMIEN,.DGHL,DGDFN,.DGSEGERR,.DGQRYERR)
"RTN","DGROHLR",98,0)
 Q
"RTN","DGROHLR",99,0)
 ;
"RTN","DGROHLR",100,0)
RCVORF(DGWRK,DGMIEN,DGHL) ;Receive ORF Message Types (ORF~R01)
"RTN","DGROHLR",101,0)
 ;
"RTN","DGROHLR",102,0)
 ;  Input:
"RTN","DGROHLR",103,0)
 ;    DGWRK - name of work global containing segments, ^TMP("DGROHL7",$J)
"RTN","DGROHLR",104,0)
 ;   DGMIEN - IEN of message entry in file #773
"RTN","DGROHLR",105,0)
 ;     DGHL - HL environment array
"RTN","DGROHLR",106,0)
 ;
"RTN","DGROHLR",107,0)
 ;  Output:
"RTN","DGROHLR",108,0)
 ;    none
"RTN","DGROHLR",109,0)
 ;
"RTN","DGROHLR",110,0)
 N DGDATA    ;patient data array to upload
"RTN","DGROHLR",111,0)
 N DGERR     ;parse error array
"RTN","DGROHLR",112,0)
 N DGORF     ;ORF data array
"RTN","DGROHLR",113,0)
 ;
"RTN","DGROHLR",114,0)
 S DGDATA=$NA(^TMP("DGROFDA",$J)) K @DGDATA
"RTN","DGROHLR",115,0)
 D PARSORF^DGROHLQ3(DGWRK,.DGHL,.DGORF,.DGERR,.DGDATA)
"RTN","DGROHLR",116,0)
 ;
"RTN","DGROHLR",117,0)
 Q:'$D(DGORF)
"RTN","DGROHLR",118,0)
 Q:(+$G(DGORF("DFN"))'>0)
"RTN","DGROHLR",119,0)
 Q:'$D(^DPT(DGORF("DFN"),0))
"RTN","DGROHLR",120,0)
 S DFN=DGORF("DFN")
"RTN","DGROHLR",121,0)
 ;
"RTN","DGROHLR",122,0)
 ;Get DFN at Last Site Treated
"RTN","DGROHLR",123,0)
 S LSTDFN=+$O(@DGDATA@(2,""))
"RTN","DGROHLR",124,0)
 ;CHECK BUSINESS RULES
"RTN","DGROHLR",125,0)
 D POW^DGRODEBR(DGDATA,DFN,LSTDFN)   ;POW STATUS
"RTN","DGROHLR",126,0)
 D AO^DGRODEBR(DGDATA,DFN,LSTDFN)    ;AGENT ORANGE EXPOSURE
"RTN","DGROHLR",127,0)
 D IR^DGRODEBR(DGDATA,DFN,LSTDFN)    ;RADIATION EXPOSURE
"RTN","DGROHLR",128,0)
 D DOD^DGRODEBR(DGDATA,DFN,LSTDFN)   ;DATE OF DEATH
"RTN","DGROHLR",129,0)
 D TA^DGRODEBR(DGDATA,LSTDFN)        ;TEMPORARY ADDRESS
"RTN","DGROHLR",130,0)
 D SP^DGRODEBR(DGDATA,DFN,LSTDFN)    ;SENSITIVE PATIENT
"RTN","DGROHLR",131,0)
 D CA^DGRODEBR(DGDATA,LSTDFN)        ;CONFIDENTIAL ADDRESS
"RTN","DGROHLR",132,0)
 D PA^DGRODEBR(DGDATA,LSTDFN)        ;PERMANENT ADDRESS
"RTN","DGROHLR",133,0)
 ;
"RTN","DGROHLR",134,0)
 ;File the data
"RTN","DGROHLR",135,0)
 D CONVFDA(DFN,DGDATA)
"RTN","DGROHLR",136,0)
 ;CLEAN UP
"RTN","DGROHLR",137,0)
 K @DGDATA
"RTN","DGROHLR",138,0)
 Q
"RTN","DGROHLR",139,0)
 ;
"RTN","DGROHLR",140,0)
CONVFDA(DFN,DGDATA) ; LOOP THROUGH DATA TO FILE
"RTN","DGROHLR",141,0)
 N DFNC,F,IEN,FIELD,DGROAR
"RTN","DGROHLR",142,0)
 ;
"RTN","DGROHLR",143,0)
 S DFNC=DFN_","
"RTN","DGROHLR",144,0)
 S F="" F  S F=$O(@DGDATA@(F)) Q:F=""  D
"RTN","DGROHLR",145,0)
 . I '$D(^DGRO(391.23,"C",F)) Q
"RTN","DGROHLR",146,0)
 . S IEN="" F  S IEN=$O(@DGDATA@(F,IEN)) Q:IEN=""  D
"RTN","DGROHLR",147,0)
 . . S FIELD="" F  S FIELD=$O(@DGDATA@(F,IEN,FIELD)) Q:FIELD=""  D FILE
"RTN","DGROHLR",148,0)
 ;
"RTN","DGROHLR",149,0)
 D FILE^DIE("","DGROAR","ERR")
"RTN","DGROHLR",150,0)
 Q
"RTN","DGROHLR",151,0)
FILE ;FILE THE DATA
"RTN","DGROHLR",152,0)
 N U,F1,D,DATA,DGROARB,NODE2
"RTN","DGROHLR",153,0)
 ;
"RTN","DGROHLR",154,0)
 I '$D(^DGRO(391.23,"C",F,FIELD)) Q
"RTN","DGROHLR",155,0)
 S U="^"
"RTN","DGROHLR",156,0)
 ;
"RTN","DGROHLR",157,0)
 ;CHECK LOCAL PATIENT FILE FOR EXISTING DATA, SO THAT IT'S NOT OVERWRITTEN
"RTN","DGROHLR",158,0)
 S D=$$GET1^DIQ(F,DFNC,FIELD) Q:D'=""
"RTN","DGROHLR",159,0)
 S DATA=$G(@DGDATA@(F,IEN,FIELD,"I"))
"RTN","DGROHLR",160,0)
 I F=2.02 S DATA=$G(@DGDATA@(F,IEN,FIELD,"E"))
"RTN","DGROHLR",161,0)
 I F=2.06 S DATA=$G(@DGDATA@(F,IEN,FIELD,"E"))
"RTN","DGROHLR",162,0)
 Q:DATA=""
"RTN","DGROHLR",163,0)
 ;
"RTN","DGROHLR",164,0)
 I F=2 S DGROAR(F,DFNC,FIELD)=DATA Q
"RTN","DGROHLR",165,0)
 ;
"RTN","DGROHLR",166,0)
 ;FILE ALIAS AND CONFIDENTIAL ADDRESS CATEGORY SUBFILE DATA 
"RTN","DGROHLR",167,0)
 I (F=2.01)!(F=2.141) D  Q
"RTN","DGROHLR",168,0)
 . S NODE2=""
"RTN","DGROHLR",169,0)
 . I FIELD=.01 S NODE2="+"
"RTN","DGROHLR",170,0)
 . S NODE2=NODE2_$P(IEN,",")_","_DFNC
"RTN","DGROHLR",171,0)
 . S DGROARB(F,NODE2,FIELD)=DATA
"RTN","DGROHLR",172,0)
 . D UPDATE^DIE("","DGROARB","","ERR")
"RTN","DGROHLR",173,0)
 ;
"RTN","DGROHLR",174,0)
 ;FILE THE RACE AND ETHNICITY DATA
"RTN","DGROHLR",175,0)
 I (F=2.02)!(F=2.06) D  Q
"RTN","DGROHLR",176,0)
 . N REFILE,REIEN,DATA30,QFL,DATACOMP,TEST,ERR,INACTIVE
"RTN","DGROHLR",177,0)
 . I (F=2.02),(FIELD=.01) S REFILE=10
"RTN","DGROHLR",178,0)
 . I (F=2.06),(FIELD=.01) S REFILE=10.2
"RTN","DGROHLR",179,0)
 . I FIELD=.02 S REFILE=10.3
"RTN","DGROHLR",180,0)
 . S DATA30=$E(DATA,1,30) D
"RTN","DGROHLR",181,0)
 . . S QFL=0,REIEN="",NODE=""
"RTN","DGROHLR",182,0)
 . . D FIND^DIC(REFILE,"","@;.01;200","",DATA30,,"B","","","TEST","ERR")
"RTN","DGROHLR",183,0)
 . . F  S NODE=$O(TEST("DILIST",2,NODE)) Q:'NODE  D  Q:$G(QFL)=1
"RTN","DGROHLR",184,0)
 . . . S REIEN=$G(TEST("DILIST",2,NODE))
"RTN","DGROHLR",185,0)
 . . . S INACTIVE=$G(TEST("DILIST","ID",NODE,200))
"RTN","DGROHLR",186,0)
 . . . Q:INACTIVE="YES"
"RTN","DGROHLR",187,0)
 . . . S DATACOMP=$G(TEST("DILIST","ID",NODE,.01))
"RTN","DGROHLR",188,0)
 . . . I DATACOMP=DATA S QFL=1
"RTN","DGROHLR",189,0)
 . Q:'QFL
"RTN","DGROHLR",190,0)
 . Q:$G(INACTIVE)="YES"
"RTN","DGROHLR",191,0)
 . S DATA=REIEN
"RTN","DGROHLR",192,0)
 . ;
"RTN","DGROHLR",193,0)
 . S NODE2=""
"RTN","DGROHLR",194,0)
 . I FIELD=.01 S NODE2="+"
"RTN","DGROHLR",195,0)
 . S NODE2=NODE2_$P(IEN,",")_","_DFNC
"RTN","DGROHLR",196,0)
 . S DGROARB(F,NODE2,FIELD)=DATA
"RTN","DGROHLR",197,0)
 . D UPDATE^DIE("","DGROARB","","ERR")
"RTN","DGROHLR",198,0)
 ;
"RTN","DGROHLR",199,0)
 ;CHECK FOR SENSITIVE PATIENT DATA, ALL FIELDS AT ONCE
"RTN","DGROHLR",200,0)
 I F=38.1 D  Q
"RTN","DGROHLR",201,0)
 . Q:$D(^DGSL(38.1,DFN))
"RTN","DGROHLR",202,0)
 . S FIELD=.01,DGROARB(F,"+1,",FIELD)=DFN
"RTN","DGROHLR",203,0)
 . F  S FIELD=$O(@DGDATA@(F,IEN,FIELD)) Q:'FIELD  D
"RTN","DGROHLR",204,0)
 . . S DGROARB(F,"+1,",FIELD)=@DGDATA@(F,IEN,FIELD,"I")
"RTN","DGROHLR",205,0)
 . S DGROARBI(1)=DFN D UPDATE^DIE("","DGROARB","DGROARBI","ERR")
"RTN","DGROHLR",206,0)
 . S FIELD=999
"RTN","DGROHLR",207,0)
 Q
"RTN","DGROHLS")
0^11^B11501370
"RTN","DGROHLS",1,0)
DGROHLS ;DJH/AMA - ROM HL7 SEND DRIVERS ; 09 Jul 2003  4:41 PM
"RTN","DGROHLS",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLS",3,0)
 ;
"RTN","DGROHLS",4,0)
SNDACK(DGACKTYP,DGMIEN,DGHL,DGSEGERR,DGSTOERR) ;Send ACK Message Type (ACK~R01)
"RTN","DGROHLS",5,0)
 ;This procedure assumes that the VistA HL7 environment is providing the
"RTN","DGROHLS",6,0)
 ;environment variables and will produce a fatal error if they are missing.
"RTN","DGROHLS",7,0)
 ;
"RTN","DGROHLS",8,0)
 ;  Input:
"RTN","DGROHLS",9,0)
 ;    DGACKTYP - (required) ACK message type ("AA","AE")
"RTN","DGROHLS",10,0)
 ;      DGMIEN - (required) IEN of message entry in file #773
"RTN","DGROHLS",11,0)
 ;        DGHL - (required) HL7 environment array
"RTN","DGROHLS",12,0)
 ;    DGSEGERR - (optional) Errors found during parsing
"RTN","DGROHLS",13,0)
 ;    DGSTOERR - (optional) Errors during data storage
"RTN","DGROHLS",14,0)
 ;
"RTN","DGROHLS",15,0)
 ;  Output:
"RTN","DGROHLS",16,0)
 ;    none
"RTN","DGROHLS",17,0)
 ;
"RTN","DGROHLS",18,0)
 N DGHLROOT,DGHLERR
"RTN","DGROHLS",19,0)
 ;
"RTN","DGROHLS",20,0)
 Q:($G(DGACKTYP)']"")
"RTN","DGROHLS",21,0)
 Q:('+$G(DGMIEN))
"RTN","DGROHLS",22,0)
 ;
"RTN","DGROHLS",23,0)
 S DGHLROOT=$NA(^TMP("HLA",$J))
"RTN","DGROHLS",24,0)
 K @DGHLROOT
"RTN","DGROHLS",25,0)
 ;
"RTN","DGROHLS",26,0)
 ;build ACK segments array
"RTN","DGROHLS",27,0)
 I $$BLDACK^DGROHLU4(DGACKTYP,DGHLROOT,.DGHL,.DGSEGERR,.DGSTOERR) D
"RTN","DGROHLS",28,0)
 . ;
"RTN","DGROHLS",29,0)
 . ;generate the message
"RTN","DGROHLS",30,0)
 . D GENACK^HLMA1(DGHL("EID"),DGMIEN,DGHL("EIDS"),"GM",1,.DGHLERR)
"RTN","DGROHLS",31,0)
 ;
"RTN","DGROHLS",32,0)
 ;cleanup
"RTN","DGROHLS",33,0)
 K @DGHLROOT
"RTN","DGROHLS",34,0)
 Q
"RTN","DGROHLS",35,0)
 ;
"RTN","DGROHLS",36,0)
SNDQRY(DGDFN) ;Send QRY Message Types (QRY~R02)
"RTN","DGROHLS",37,0)
 ;
"RTN","DGROHLS",38,0)
 ;  Input:
"RTN","DGROHLS",39,0)
 ;    DGDFN - (required) pointer to patient in PATIENT (#2) file
"RTN","DGROHLS",40,0)
 ;
"RTN","DGROHLS",41,0)
 ;  Output:
"RTN","DGROHLS",42,0)
 ;   Function value - 1 on success, 0 on failure
"RTN","DGROHLS",43,0)
 ;
"RTN","DGROHLS",44,0)
 N DGLST,DGHLROOT,DGHLLNK,DGHL,DGICN,DGMSG,DGRSLT,HLL,HLEID,HLRSLT
"RTN","DGROHLS",45,0)
 ;
"RTN","DGROHLS",46,0)
 ;the following HL* variables are created by DIRECT^HLMA
"RTN","DGROHLS",47,0)
 N HL,HLCS,HLDOM,HLECH,HLFS,HLINST,HLINSTN,HLQ,ACKCODE
"RTN","DGROHLS",48,0)
 N HLMTIEN,HLNEXT,HLNODE,HLPARAM,HLPROD,HLQUIT
"RTN","DGROHLS",49,0)
 ;
"RTN","DGROHLS",50,0)
 S DGRSLT=0
"RTN","DGROHLS",51,0)
 S DGHLROOT=$NA(^TMP("HLS",$J))
"RTN","DGROHLS",52,0)
 K @DGHLROOT
"RTN","DGROHLS",53,0)
 ;
"RTN","DGROHLS",54,0)
 I +$G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGROHLS",55,0)
 . ;
"RTN","DGROHLS",56,0)
 . ;ICN must be national and LST must not be local site
"RTN","DGROHLS",57,0)
 . Q:'$$MPIOK^DGROUT(DGDFN,.DGICN,.DGLST)
"RTN","DGROHLS",58,0)
 . ;
"RTN","DGROHLS",59,0)
 . ;retrieve LST's HL Logical Link and build HLL array
"RTN","DGROHLS",60,0)
 . S DGHLLNK=$$GETLINK^DGROHLUT(DGLST)
"RTN","DGROHLS",61,0)
 . Q:(DGHLLNK=0)
"RTN","DGROHLS",62,0)
 . S HLL("LINKS",1)="DGRO ROM ORF/R04 SUBSC"_U_DGHLLNK
"RTN","DGROHLS",63,0)
 . ;
"RTN","DGROHLS",64,0)
 . ;initialize VistA HL7 environment
"RTN","DGROHLS",65,0)
 . S HLEID=$$INIT^DGROHLUT("DGRO ROM QRY/R02 EVENT",.DGHL)
"RTN","DGROHLS",66,0)
 . Q:'HLEID
"RTN","DGROHLS",67,0)
 . ;
"RTN","DGROHLS",68,0)
 . ;build QRY segments array
"RTN","DGROHLS",69,0)
 . Q:'$$BLDQRY^DGROHLQ(DGDFN,DGICN,DGHLROOT,.DGHL)
"RTN","DGROHLS",70,0)
 . ;
"RTN","DGROHLS",71,0)
 . ;display busy message to interactive users
"RTN","DGROHLS",72,0)
 . S DGMSG(1)="Attempting to connect to the Last Site of Treatment ("_$G(DGLST)_") to search for Patient"
"RTN","DGROHLS",73,0)
 . S DGMSG(2)="Demographic Data.  This request may take some time, please be patient ..."
"RTN","DGROHLS",74,0)
 . D EN^DDIOL(.DGMSG)
"RTN","DGROHLS",75,0)
 . ;
"RTN","DGROHLS",76,0)
 . ;generate HL7 message
"RTN","DGROHLS",77,0)
 . D DIRECT^HLMA(HLEID,"GM",1,.HLRSLT,"","")
"RTN","DGROHLS",78,0)
 . Q:$P(HLRSLT,U,2)]""
"RTN","DGROHLS",79,0)
 . I HLMTIEN D RCV^DGROHLR
"RTN","DGROHLS",80,0)
 . Q:$G(ACKCODE)
"RTN","DGROHLS",81,0)
 . ;success
"RTN","DGROHLS",82,0)
 . S DGRSLT=1
"RTN","DGROHLS",83,0)
 ;
"RTN","DGROHLS",84,0)
 ;cleanup
"RTN","DGROHLS",85,0)
 K @DGHLROOT
"RTN","DGROHLS",86,0)
 Q DGRSLT
"RTN","DGROHLS",87,0)
 ;
"RTN","DGROHLS",88,0)
SNDORF(DGQRY,DGMIEN,DGHL,DGDFN,DGSEGERR,DGQRYERR) ;Send ORF Message Type (ORF~R04)
"RTN","DGROHLS",89,0)
 ;This procedure assumes the the VistA HL7 environment is providing the
"RTN","DGROHLS",90,0)
 ;environment variables and will produce a fatal error if they are
"RTN","DGROHLS",91,0)
 ;missing.  (Called from RCVQRY^DGROHLR)
"RTN","DGROHLS",92,0)
 ;
"RTN","DGROHLS",93,0)
 ;  Input:
"RTN","DGROHLS",94,0)
 ;       DGQRY - (required) Array of QRY parsing results
"RTN","DGROHLS",95,0)
 ;      DGMIEN - (required) IEN of message entry in file #773
"RTN","DGROHLS",96,0)
 ;        DGHL - (required) HL7 environment array
"RTN","DGROHLS",97,0)
 ;       DGDFN - (required) Pointer to patient in PATIENT (#2) file
"RTN","DGROHLS",98,0)
 ;    DGSEGERR - (optional) Errors found during parsing
"RTN","DGROHLS",99,0)
 ;    DGQRYERR - (optional) Errors found during query
"RTN","DGROHLS",100,0)
 ;
"RTN","DGROHLS",101,0)
 ;  Output:
"RTN","DGROHLS",102,0)
 ;    none
"RTN","DGROHLS",103,0)
 ;
"RTN","DGROHLS",104,0)
 N DGHLROOT
"RTN","DGROHLS",105,0)
 N DGHLERR
"RTN","DGROHLS",106,0)
 ;
"RTN","DGROHLS",107,0)
 Q:('$D(DGQRY))
"RTN","DGROHLS",108,0)
 Q:('+$G(DGMIEN))
"RTN","DGROHLS",109,0)
 ;
"RTN","DGROHLS",110,0)
 S DGHLROOT=$NA(^TMP("HLA",$J)) K @DGHLROOT
"RTN","DGROHLS",111,0)
 ;
"RTN","DGROHLS",112,0)
 ;build ORF segments array
"RTN","DGROHLS",113,0)
 I $$BLDORF^DGROHLQ(DGHLROOT,.DGHL,DGDFN,.DGQRY,.DGSEGERR,.DGQRYERR) D
"RTN","DGROHLS",114,0)
 . ;
"RTN","DGROHLS",115,0)
 . ;generate the message
"RTN","DGROHLS",116,0)
 . D GENACK^HLMA1(DGHL("EID"),DGMIEN,DGHL("EIDS"),"GM",1,.DGHLERR)
"RTN","DGROHLS",117,0)
 ;
"RTN","DGROHLS",118,0)
 ;cleanup
"RTN","DGROHLS",119,0)
 K @DGHLROOT
"RTN","DGROHLS",120,0)
 Q
"RTN","DGROHLU")
0^12^B15796235
"RTN","DGROHLU",1,0)
DGROHLU ;DJH/AMA - ROM HL7 BUILD ORF SEGMENT ; 24 Jun 2003  3:53 PM
"RTN","DGROHLU",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLU",3,0)
 ;
"RTN","DGROHLU",4,0)
 Q
"RTN","DGROHLU",5,0)
 ;
"RTN","DGROHLU",6,0)
DIQ(DGROFDA,FILE,DFN)   ;GATHER THE PATIENT DATA USING GETS^DIQ
"RTN","DGROHLU",7,0)
 ;Called from BLDORF^DGROHLQ
"RTN","DGROHLU",8,0)
 ;  INPUT:
"RTN","DGROHLU",9,0)
 ;    DGROFDA = ROOT FILE NAME OF TEMP GLOBAL ARRAY, ^TMP("DGROFDA",$J)
"RTN","DGROHLU",10,0)
 ;    FILE    = FILE FROM WHICH TO GATHER THE DATA
"RTN","DGROHLU",11,0)
 ;    DFN     = POINTER TO PATIENT (#2) FILE
"RTN","DGROHLU",12,0)
 ;
"RTN","DGROHLU",13,0)
 ;  OUTPUT:
"RTN","DGROHLU",14,0)
 ;    GLOBAL ARRAY OF REQUESTED DATA ELEMENTS, IN DGROFDA
"RTN","DGROHLU",15,0)
 ;
"RTN","DGROHLU",16,0)
 ;THIS ROUTINE ALSO CHECKS THE DG REGISTER ONCE FIELD DEFINITION
"RTN","DGROHLU",17,0)
 ;(#391.23) FILE TO ENSURE EACH DATA ELEMENT IS REQUESTED.
"RTN","DGROHLU",18,0)
 ;
"RTN","DGROHLU",19,0)
 N U,FLAG,FIELD,TMPFLD,F,IEN,CNT,F1,F2,F3,F4,EIEN
"RTN","DGROHLU",20,0)
 ;
"RTN","DGROHLU",21,0)
 ;BUILD THE INITIAL DATA ELEMENT GLOBAL ARRAY
"RTN","DGROHLU",22,0)
 S U="^",FLAG="IN"
"RTN","DGROHLU",23,0)
 S FILE=0 F  S FILE=$O(^DGRO(391.23,"C",FILE)) Q:'FILE  D
"RTN","DGROHLU",24,0)
 . I (FILE=2.01)!(FILE=2.02)!(FILE=2.06)!(FILE=2.141) Q
"RTN","DGROHLU",25,0)
 . S FIELD=0 F  S FIELD=$O(^DGRO(391.23,"C",FILE,FIELD)) Q:'FIELD  D
"RTN","DGROHLU",26,0)
 . . D GETS^DIQ(FILE,DFN,FIELD,FLAG,DGROFDA)
"RTN","DGROHLU",27,0)
 ;
"RTN","DGROHLU",28,0)
 ;GET EXTERNAL VALUE FOR "DATE OF DEATH ENTERED BY" PERSON
"RTN","DGROHLU",29,0)
 I $D(@DGROFDA@(2,DFN_",",.352)) D
"RTN","DGROHLU",30,0)
 . D GETS^DIQ(2,DFN,.352,"E",DGROFDA)
"RTN","DGROHLU",31,0)
 . K @DGROFDA@(2,DFN_",",.352,"I")
"RTN","DGROHLU",32,0)
 ;
"RTN","DGROHLU",33,0)
 ;RETRIEVE INTERNAL VALUES FOR ALIAS SUB-FILE, BUT EXTERNAL VALUES FOR RACE AND ETHNICITY SUB-FILES
"RTN","DGROHLU",34,0)
 F FILE=2.01,2.02,2.06,2.141 D
"RTN","DGROHLU",35,0)
 . N SBFL,SBDA,SBFLD
"RTN","DGROHLU",36,0)
 . I (FILE=2.02)!(FILE=2.06) S FLAG="IEN"
"RTN","DGROHLU",37,0)
 . E  S FLAG="IN"
"RTN","DGROHLU",38,0)
 . S SBFL=FILE-2 I FILE=2.141 S SBFL=.14
"RTN","DGROHLU",39,0)
 . S SBDA=0 F  S SBDA=$O(^DPT(DFN,SBFL,SBDA)) Q:'SBDA  D
"RTN","DGROHLU",40,0)
 . . S SBFLD=0 F  S SBFLD=$O(^DGRO(391.23,"C",FILE,SBFLD)) Q:'SBFLD  D
"RTN","DGROHLU",41,0)
 . . . D GETS^DIQ(FILE,SBDA_","_DFN,SBFLD,FLAG,DGROFDA)
"RTN","DGROHLU",42,0)
 ;ENSURE THE RACE DATA IS ACTIVE
"RTN","DGROHLU",43,0)
 S IEN="" F  S IEN=$O(@DGROFDA@(2.02,IEN)) Q:IEN=""  D
"RTN","DGROHLU",44,0)
 . N RIEN,MIEN
"RTN","DGROHLU",45,0)
 . S RIEN=$G(@DGROFDA@(2.02,IEN,.01,"I"))
"RTN","DGROHLU",46,0)
 . I $$GET1^DIQ(10,RIEN,200,"I") K @DGROFDA@(2.02,IEN) Q
"RTN","DGROHLU",47,0)
 . K @DGROFDA@(2.02,IEN,.01,"I")
"RTN","DGROHLU",48,0)
 . K @DGROFDA@(2.02,IEN,.02,"I")
"RTN","DGROHLU",49,0)
 ;ENSURE THE ETHNICITY DATA IS ACTIVE
"RTN","DGROHLU",50,0)
 S IEN="" F  S IEN=$O(@DGROFDA@(2.06,IEN)) Q:IEN=""  D
"RTN","DGROHLU",51,0)
 . N EIEN,MIEN
"RTN","DGROHLU",52,0)
 . S EIEN=$G(@DGROFDA@(2.06,IEN,.01,"I"))
"RTN","DGROHLU",53,0)
 . I $$GET1^DIQ(10.2,EIEN,200,"I") K @DGROFDA@(2.06,IEN) Q
"RTN","DGROHLU",54,0)
 . K @DGROFDA@(2.06,IEN,.01,"I")
"RTN","DGROHLU",55,0)
 . K @DGROFDA@(2.06,IEN,.02,"I")
"RTN","DGROHLU",56,0)
 ;
"RTN","DGROHLU",57,0)
 ;EXPAND ANY POINTED-TO FILES
"RTN","DGROHLU",58,0)
 S F=0 F  S F=$O(@DGROFDA@(F)) Q:'F  D
"RTN","DGROHLU",59,0)
 . S IEN="" F  S IEN=$O(@DGROFDA@(F,IEN)) Q:IEN=""  D
"RTN","DGROHLU",60,0)
 . . S FIELD=0 F  S FIELD=$O(@DGROFDA@(F,IEN,FIELD)) Q:'FIELD  D
"RTN","DGROHLU",61,0)
 . . . D FIELD^DID(F,FIELD,,"POINTER;LABEL","F1")
"RTN","DGROHLU",62,0)
 . . . S F1=F1("LABEL")
"RTN","DGROHLU",63,0)
 . . . S F2=F1("POINTER")
"RTN","DGROHLU",64,0)
 . . . S EIEN=$G(@DGROFDA@(F,IEN,FIELD,"I"))
"RTN","DGROHLU",65,0)
 . . . ;  IF THE ELEMENT IS A POINTER, GET THE DATA VALUE FROM THAT FILE
"RTN","DGROHLU",66,0)
 . . . I F2'="" D:EIEN'="" EXPAND
"RTN","DGROHLU",67,0)
 ;
"RTN","DGROHLU",68,0)
 ;NOW THAT EVERYTHING'S BUILT, CHECK THE INACTIVE 
"RTN","DGROHLU",69,0)
 ;FLAG IN THE FIELD DEFINITION (#391.23) FILE
"RTN","DGROHLU",70,0)
 S F=0 F  S F=$O(@DGROFDA@(F)) Q:'F  D
"RTN","DGROHLU",71,0)
 . I '$D(^DGRO(391.23,"C",F)) K @DGROFDA@(F) Q
"RTN","DGROHLU",72,0)
 . S IEN="" F  S IEN=$O(@DGROFDA@(F,IEN)) Q:IEN=""  D
"RTN","DGROHLU",73,0)
 . . S FIELD=0 F  S FIELD=$O(@DGROFDA@(F,IEN,FIELD)) Q:'FIELD  D
"RTN","DGROHLU",74,0)
 . . . I '$D(^DGRO(391.23,"C",F,FIELD)) K @DGROFDA@(F,IEN,FIELD)
"RTN","DGROHLU",75,0)
 Q
"RTN","DGROHLU",76,0)
 ;
"RTN","DGROHLU",77,0)
EXPAND ;  RETRIEVE DATA VALUES FROM POINTED-TO FILES
"RTN","DGROHLU",78,0)
 N FILE,FIE
"RTN","DGROHLU",79,0)
 S FILE=+$P(F2,"P",2)
"RTN","DGROHLU",80,0)
 Q:'$D(^DGRO(391.23,"C",FILE))
"RTN","DGROHLU",81,0)
 S FIE=0 F  S FIE=$O(^DGRO(391.23,"C",FILE,FIE)) Q:'FIE  D
"RTN","DGROHLU",82,0)
 . D GETS^DIQ(FILE,EIEN,FIE,"IN",DGROFDA)
"RTN","DGROHLU",83,0)
 Q
"RTN","DGROHLU",84,0)
 ;
"RTN","DGROHLU",85,0)
FDA(DGWRK,DGCURLIN,DGFS,DGCS,DGRS,DGDATA)   ;Download patient data from Last Site Treated
"RTN","DGROHLU",86,0)
 ;Called from PARSORF^DGROHLQ3
"RTN","DGROHLU",87,0)
 ;  Input:
"RTN","DGROHLU",88,0)
 ;    DGWRK - Root global with all of the patient data segments, ^TMP("DGROHL7",$J)
"RTN","DGROHLU",89,0)
 ;    DGCNT - Counter for the root global subscript
"RTN","DGROHLU",90,0)
 ;     DGFS - HL7 field separator
"RTN","DGROHLU",91,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLU",92,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLU",93,0)
 ;
"RTN","DGROHLU",94,0)
 ;  Output:
"RTN","DGROHLU",95,0)
 ;    DGDATA - Root global for the patient data to upload, ^TMP("DGROFDA",$J)
"RTN","DGROHLU",96,0)
 ;
"RTN","DGROHLU",97,0)
 N DGSUBS,DGVAL,DGFILE,DGIEN,DGFIELD,DGINT,DGRODA
"RTN","DGROHLU",98,0)
 ;
"RTN","DGROHLU",99,0)
 S DGCURLIN=DGCURLIN-1
"RTN","DGROHLU",100,0)
 F  S DGCURLIN=$O(@DGWRK@(DGCURLIN)) Q:'DGCURLIN  D
"RTN","DGROHLU",101,0)
 . N DGSEG
"RTN","DGROHLU",102,0)
 . S DGSEG=$P(@DGWRK@(DGCURLIN,0),DGFS,2)
"RTN","DGROHLU",103,0)
 . S DGSUBS=$P(DGSEG,DGRS),DGVAL=$P(DGSEG,DGRS,2)
"RTN","DGROHLU",104,0)
 . S DGFILE=$P(DGSUBS,DGCS),DGIEN=$P(DGSUBS,DGCS,2)
"RTN","DGROHLU",105,0)
 . S DGFIELD=$P(DGSUBS,DGCS,3),DGINT=$P(DGVAL,DGCS)
"RTN","DGROHLU",106,0)
 . ;
"RTN","DGROHLU",107,0)
 . I '$D(^DGRO(391.23,"C",DGFILE,DGFIELD)) Q
"RTN","DGROHLU",108,0)
 . ;
"RTN","DGROHLU",109,0)
 . ;CHECK FOR SPECIAL "E"XTERNAL VALUES
"RTN","DGROHLU",110,0)
 . I (DGFILE=2),(DGFIELD=.352) D  Q
"RTN","DGROHLU",111,0)
 . . S @DGDATA@(DGFILE,DGIEN,DGFIELD,"E")=DGINT
"RTN","DGROHLU",112,0)
 . I (DGFILE=2.02)!(DGFILE=2.06) D  Q
"RTN","DGROHLU",113,0)
 . . S @DGDATA@(DGFILE,DGIEN,DGFIELD,"E")=DGINT
"RTN","DGROHLU",114,0)
 . ;
"RTN","DGROHLU",115,0)
 . ;OTHERWISE, BUILD/STORE INTO GLOBAL AS
"RTN","DGROHLU",116,0)
 . ;^TMP("DGROFDA",$J,FILE,IEN,FIELD,"I")=VALUE
"RTN","DGROHLU",117,0)
 . S @DGDATA@(DGFILE,DGIEN,DGFIELD,"I")=DGINT
"RTN","DGROHLU",118,0)
 Q
"RTN","DGROHLU1")
0^13^B13634833
"RTN","DGROHLU1",1,0)
DGROHLU1 ;DJH/AMA - ROM HL7 BUILD FDA SEGMENT ; 24 Jun 2003  3:53 PM
"RTN","DGROHLU1",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLU1",3,0)
 ;
"RTN","DGROHLU1",4,0)
 Q
"RTN","DGROHLU1",5,0)
 ;
"RTN","DGROHLU1",6,0)
FDA(DGROFDA,DGSEGSTR)    ; FDA SEGMENT API
"RTN","DGROHLU1",7,0)
 ;Called from BLDORF^DGROHLQ
"RTN","DGROHLU1",8,0)
 ;
"RTN","DGROHLU1",9,0)
 ;   INPUT:
"RTN","DGROHLU1",10,0)
 ;     DGROFDA - POINTER TO THE GLOBAL DATA ARRAY, ^TMP("DGROFDA",$J)
"RTN","DGROHLU1",11,0)
 ;
"RTN","DGROHLU1",12,0)
 ;   OUTPUT:
"RTN","DGROHLU1",13,0)
 ;     DGSEGSTR - ARRAY OF SEGMENTS
"RTN","DGROHLU1",14,0)
 ;
"RTN","DGROHLU1",15,0)
 N DGVAL
"RTN","DGROHLU1",16,0)
 ;
"RTN","DGROHLU1",17,0)
 Q:'$D(@DGROFDA)
"RTN","DGROHLU1",18,0)
 I $$FDAVAL(.DGVAL) D
"RTN","DGROHLU1",19,0)
 . D BLDFDA("FDA",.DGVAL,.DGSEGSTR,.DGHL)
"RTN","DGROHLU1",20,0)
 Q
"RTN","DGROHLU1",21,0)
 ;
"RTN","DGROHLU1",22,0)
FDAVAL(DGVAL)   ; FORMAT THE DATA ARRAY FOR THE FDA SEGMENT
"RTN","DGROHLU1",23,0)
 ;   Input:
"RTN","DGROHLU1",24,0)
 ;     DGVAL - array of data
"RTN","DGROHLU1",25,0)
 ;
"RTN","DGROHLU1",26,0)
 N DGRSLT,DGX,DGF,DGIEN,DGFLD,DGEI,DGCHAR
"RTN","DGROHLU1",27,0)
 ;
"RTN","DGROHLU1",28,0)
 S (DGRSLT,DGX)=0
"RTN","DGROHLU1",29,0)
 S DGF=0 F  S DGF=$O(@DGROFDA@(DGF)) Q:'DGF  D
"RTN","DGROHLU1",30,0)
 . S DGIEN="" F  S DGIEN=$O(@DGROFDA@(DGF,DGIEN)) Q:DGIEN=""  D
"RTN","DGROHLU1",31,0)
 . . S DGFLD=0 F  S DGFLD=$O(@DGROFDA@(DGF,DGIEN,DGFLD)) Q:'DGFLD  D
"RTN","DGROHLU1",32,0)
 . . . S DGX=DGX+1
"RTN","DGROHLU1",33,0)
 . . . S DGVAL(DGX,1,1)=DGF
"RTN","DGROHLU1",34,0)
 . . . S DGVAL(DGX,1,2)=DGIEN
"RTN","DGROHLU1",35,0)
 . . . S DGVAL(DGX,1,3)=DGFLD
"RTN","DGROHLU1",36,0)
 . . . S DGVAL(DGX,2,1)=$G(@DGROFDA@(DGF,DGIEN,DGFLD,"I"))
"RTN","DGROHLU1",37,0)
 . . . ;
"RTN","DGROHLU1",38,0)
 . . . ;GET EXTERNAL VALUE FOR "DATE OF DEATH ENTERED BY" PERSON
"RTN","DGROHLU1",39,0)
 . . . I (DGF=2),(DGFLD=.352) S DGVAL(DGX,2,1)=$G(@DGROFDA@(DGF,DGIEN,DGFLD,"E"))
"RTN","DGROHLU1",40,0)
 . . . ;
"RTN","DGROHLU1",41,0)
 . . . ;EXTRACT EXTERNAL VALUES FOR RACE AND ETHNICITY FILES
"RTN","DGROHLU1",42,0)
 . . . I (DGF=2.02)!(DGF=2.06) S DGVAL(DGX,2,1)=$G(@DGROFDA@(DGF,DGIEN,DGFLD,"E"))
"RTN","DGROHLU1",43,0)
 . S DGRSLT=1
"RTN","DGROHLU1",44,0)
 ;
"RTN","DGROHLU1",45,0)
 Q DGRSLT
"RTN","DGROHLU1",46,0)
 ;
"RTN","DGROHLU1",47,0)
BLDFDA(DGTYP,DGVAL,DGSEGSTR,DGHL)       ;FDA SEGMENT BUILDER
"RTN","DGROHLU1",48,0)
 ;BUILDS THE FDA SEGMENT IN THE FOLLOWING FORMAT:
"RTN","DGROHLU1",49,0)
 ;  FDA ^ FILE | IEN | FIELD ~ INTERNAL VALUE
"RTN","DGROHLU1",50,0)
 ;  ADD ^ FILE | IEN | FIELD ~ INTERNAL VALUE
"RTN","DGROHLU1",51,0)
 ;  ADD ^ FILE | IEN | FIELD ~ INTERNAL VALUE
"RTN","DGROHLU1",52,0)
 ;   etc., etc.
"RTN","DGROHLU1",53,0)
 ;
"RTN","DGROHLU1",54,0)
 ;   INPUT:
"RTN","DGROHLU1",55,0)
 ;     DGTYP    - SEGMENT TYPE
"RTN","DGROHLU1",56,0)
 ;     DGVAL    - FIELD DATA ARRAY  [SUB1:field, SUB2:repetition
"RTN","DGROHLU1",57,0)
 ;                                   SUB3:component, SUB4:sub-component]
"RTN","DGROHLU1",58,0)
 ;     DGSEGSTR - ARRAY OF SEGMENTS, EACH NO GREATER THAN 245 CHARACTERS
"RTN","DGROHLU1",59,0)
 ;     DGHL     - HL7 ENVIRONMENT ARRAY
"RTN","DGROHLU1",60,0)
 ;
"RTN","DGROHLU1",61,0)
 ;   OUTPUT:
"RTN","DGROHLU1",62,0)
 ;     FUNCTION VALUE - FORMATTED ARRAY OF HL7 SEGMENTS ON SUCCESS, "" ON FAILURE
"RTN","DGROHLU1",63,0)
 ;
"RTN","DGROHLU1",64,0)
 N DGCNT     ;array counter
"RTN","DGROHLU1",65,0)
 N DGFS      ;field separator
"RTN","DGROHLU1",66,0)
 N DGCS      ;component separator
"RTN","DGROHLU1",67,0)
 N DGRS      ;repetition separator
"RTN","DGROHLU1",68,0)
 N DGSS      ;sub-component separator
"RTN","DGROHLU1",69,0)
 N DGFLD     ;field subscript
"RTN","DGROHLU1",70,0)
 N DGFLDVAL  ;field value
"RTN","DGROHLU1",71,0)
 N DGSEP     ;HL7 separator
"RTN","DGROHLU1",72,0)
 N DGREP     ;repetition subscript
"RTN","DGROHLU1",73,0)
 N DGREPVAL  ;repetition value
"RTN","DGROHLU1",74,0)
 N DGCMP     ;component subscript
"RTN","DGROHLU1",75,0)
 N DGCMPVAL  ;component value
"RTN","DGROHLU1",76,0)
 N DGSUB     ;sub-component subscript
"RTN","DGROHLU1",77,0)
 N DGSUBVAL  ;sub-component value
"RTN","DGROHLU1",78,0)
 ;
"RTN","DGROHLU1",79,0)
 Q:($G(DGTYP)']"")
"RTN","DGROHLU1",80,0)
 ;
"RTN","DGROHLU1",81,0)
 S DGCNT=1
"RTN","DGROHLU1",82,0)
 S DGSEGSTR(DGCNT)=DGTYP
"RTN","DGROHLU1",83,0)
 S DGFS=DGHL("FS")
"RTN","DGROHLU1",84,0)
 S DGCS=$E(DGHL("ECH"))
"RTN","DGROHLU1",85,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGROHLU1",86,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGROHLU1",87,0)
 ;
"RTN","DGROHLU1",88,0)
 F DGFLD=1:1:$O(DGVAL(""),-1) D
"RTN","DGROHLU1",89,0)
 . I DGTYP="ADD" S DGCNT=DGCNT+1,DGSEGSTR(DGCNT)=DGTYP
"RTN","DGROHLU1",90,0)
 . S DGFLDVAL=$G(DGVAL(DGFLD)),DGSEP=DGFS
"RTN","DGROHLU1",91,0)
 . D ADD(DGFLDVAL,DGSEP,.DGSEGSTR,.DGCNT)
"RTN","DGROHLU1",92,0)
 . F DGREP=1:1:$O(DGVAL(DGFLD,""),-1)  D
"RTN","DGROHLU1",93,0)
 . . S DGREPVAL=$G(DGVAL(DGFLD,DGREP))
"RTN","DGROHLU1",94,0)
 . . S DGSEP=$S(DGREP=1:"",1:DGRS)
"RTN","DGROHLU1",95,0)
 . . D ADD(DGREPVAL,DGSEP,.DGSEGSTR,.DGCNT)
"RTN","DGROHLU1",96,0)
 . . F DGCMP=1:1:$O(DGVAL(DGFLD,DGREP,""),-1) D
"RTN","DGROHLU1",97,0)
 . . . S DGCMPVAL=$G(DGVAL(DGFLD,DGREP,DGCMP))
"RTN","DGROHLU1",98,0)
 . . . S DGSEP=$S(DGCMP=1:"",1:DGCS)
"RTN","DGROHLU1",99,0)
 . . . D ADD(DGCMPVAL,DGSEP,.DGSEGSTR,.DGCNT)
"RTN","DGROHLU1",100,0)
 . . . F DGSUB=1:1:$O(DGVAL(DGFLD,DGREP,DGCMP,""),-1) D
"RTN","DGROHLU1",101,0)
 . . . . S DGSUBVAL=$G(DGVAL(DGFLD,DGREP,DGCMP,DGSUB))
"RTN","DGROHLU1",102,0)
 . . . . S DGSEP=$S(DGSUB=1:"",1:DGSS)
"RTN","DGROHLU1",103,0)
 . . . . D ADD(DGSUBVAL,DGSEP,.DGSEGSTR,.DGCNT)
"RTN","DGROHLU1",104,0)
 . S DGTYP="ADD"
"RTN","DGROHLU1",105,0)
 Q
"RTN","DGROHLU1",106,0)
 ;
"RTN","DGROHLU1",107,0)
ADD(DGVAL,DGSEP,DGSEGSTR,DGCNT) ;append a value onto segment
"RTN","DGROHLU1",108,0)
 ;
"RTN","DGROHLU1",109,0)
 ;  Input:
"RTN","DGROHLU1",110,0)
 ;    DGVAL - value to append
"RTN","DGROHLU1",111,0)
 ;    DGSEP - HL7 separator
"RTN","DGROHLU1",112,0)
 ;
"RTN","DGROHLU1",113,0)
 ;  Output:
"RTN","DGROHLU1",114,0)
 ;    DGSEGSTR(DGCNT) - segment passed by reference
"RTN","DGROHLU1",115,0)
 ;
"RTN","DGROHLU1",116,0)
 S DGSEP=$G(DGSEP)
"RTN","DGROHLU1",117,0)
 S DGVAL=$G(DGVAL)
"RTN","DGROHLU1",118,0)
 S DGSEGSTR(DGCNT)=DGSEGSTR(DGCNT)_DGSEP_DGVAL
"RTN","DGROHLU1",119,0)
 Q
"RTN","DGROHLU3")
0^14^B34237959
"RTN","DGROHLU3",1,0)
DGROHLU3 ;DJH/AMA - ROM HL7 BUILD MSA/ERR SEGMENTS ; 02 Jul 2003  5:02 PM
"RTN","DGROHLU3",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLU3",3,0)
 ;
"RTN","DGROHLU3",4,0)
 Q
"RTN","DGROHLU3",5,0)
 ;
"RTN","DGROHLU3",6,0)
MSA(DGACK,DGID,DGERR,DGFLD,DGHL) ;MSA Segment API
"RTN","DGROHLU3",7,0)
 ;This function wraps the data retrieval and segment creation APIs and
"RTN","DGROHLU3",8,0)
 ;returns a formatted MSA segment.
"RTN","DGROHLU3",9,0)
 ;  Called from BLDORF^DGROHLQ and BLDACK^DGROHLU4
"RTN","DGROHLU3",10,0)
 ;
"RTN","DGROHLU3",11,0)
 ;  Input:
"RTN","DGROHLU3",12,0)
 ;     DGACK - (required) MSA segment Acknowledgment code
"RTN","DGROHLU3",13,0)
 ;      DGID - (required) Message Control ID
"RTN","DGROHLU3",14,0)
 ;     DGERR - (optional) Error condition
"RTN","DGROHLU3",15,0)
 ;     DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGROHLU3",16,0)
 ;             to include.  Defaults to all required fields (1,2).
"RTN","DGROHLU3",17,0)
 ;      DGHL - (required) HL7 environment array
"RTN","DGROHLU3",18,0)
 ;
"RTN","DGROHLU3",19,0)
 ;  Output:
"RTN","DGROHLU3",20,0)
 ;   Function Value - MSA segment on success, "" on failure
"RTN","DGROHLU3",21,0)
 ;
"RTN","DGROHLU3",22,0)
 N DGMSA
"RTN","DGROHLU3",23,0)
 N DGVAL
"RTN","DGROHLU3",24,0)
 ;
"RTN","DGROHLU3",25,0)
 S DGMSA=""
"RTN","DGROHLU3",26,0)
 I $G(DGACK)]"",+$G(DGID) D
"RTN","DGROHLU3",27,0)
 . S DGERR=$G(DGERR)
"RTN","DGROHLU3",28,0)
 . S DGFLD=$$CKSTR^DGROHLUT("1,2",DGFLD)  ;validate field string
"RTN","DGROHLU3",29,0)
 . I DGERR]"" S DGFLD=DGFLD_",6"
"RTN","DGROHLU3",30,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGROHLU3",31,0)
 . I $$MSAVAL(DGFLD,DGACK,DGID,"","","",DGERR,.DGVAL) D
"RTN","DGROHLU3",32,0)
 . . S DGMSA=$$BLDSEG^DGROHLUT("MSA",.DGVAL,.DGHL)
"RTN","DGROHLU3",33,0)
 Q DGMSA
"RTN","DGROHLU3",34,0)
 ;
"RTN","DGROHLU3",35,0)
MSAVAL(DGFLD,DGACK,DGID,DGTEXT,DGESN,DGDAT,DGERR,DGVAL) ;build MSA value array
"RTN","DGROHLU3",36,0)
 ;
"RTN","DGROHLU3",37,0)
 ;  Input:
"RTN","DGROHLU3",38,0)
 ;     DGFLD - (required) fields string
"RTN","DGROHLU3",39,0)
 ;     DGACK - (required) MSA segment Acknowledgment code
"RTN","DGROHLU3",40,0)
 ;      DGID - (required) Message Control ID
"RTN","DGROHLU3",41,0)
 ;    DGTEXT - (optional) Text message
"RTN","DGROHLU3",42,0)
 ;     DGESN - (optional) Expected sequence number
"RTN","DGROHLU3",43,0)
 ;     DGDAT - (optional) Delayed acknowledgment type
"RTN","DGROHLU3",44,0)
 ;     DGERR - (optional) Error condition
"RTN","DGROHLU3",45,0)
 ;
"RTN","DGROHLU3",46,0)
 ;  Output:
"RTN","DGROHLU3",47,0)
 ;   Function Value - 1 on sucess, 0 on failure
"RTN","DGROHLU3",48,0)
 ;            DGVAL - MSA field array [SUB1:field, SUB2:repetition,
"RTN","DGROHLU3",49,0)
 ;                                    SUB3:component, SUB4:sub-component]
"RTN","DGROHLU3",50,0)
 ;
"RTN","DGROHLU3",51,0)
 N DGRSLT    ;function value
"RTN","DGROHLU3",52,0)
 N DGACKS    ;array of valid ACK codes
"RTN","DGROHLU3",53,0)
 N DGCOD     ;ACK code string
"RTN","DGROHLU3",54,0)
 N DGERRSTR  ;Error condition string
"RTN","DGROHLU3",55,0)
 N DGTBL     ;VA086 Error code array
"RTN","DGROHLU3",56,0)
 ;
"RTN","DGROHLU3",57,0)
 S DGRSLT=0
"RTN","DGROHLU3",58,0)
 I $G(DGFLD)]"",$G(DGACK)]"",+$G(DGID) D
"RTN","DGROHLU3",59,0)
 . F DGCOD="AA","AE","AR","CA","CE","CR" S DGACKS(DGCOD)=""
"RTN","DGROHLU3",60,0)
 . ;
"RTN","DGROHLU3",61,0)
 . ; seq 1 Acknowledgment Code
"RTN","DGROHLU3",62,0)
 . I DGFLD[",1," D
"RTN","DGROHLU3",63,0)
 . . S DGVAL(1)=$S($D(DGACKS(DGACK)):DGACK,1:"")
"RTN","DGROHLU3",64,0)
 . Q:(DGVAL(1)="")  ;required field
"RTN","DGROHLU3",65,0)
 . ;
"RTN","DGROHLU3",66,0)
 . ; seq 2 Message Control ID
"RTN","DGROHLU3",67,0)
 . I DGFLD[",2," D
"RTN","DGROHLU3",68,0)
 . . S DGVAL(2)=DGID
"RTN","DGROHLU3",69,0)
 . Q:(DGVAL(2)="")  ;required field
"RTN","DGROHLU3",70,0)
 . ;
"RTN","DGROHLU3",71,0)
 . ; seq 3 Text Message
"RTN","DGROHLU3",72,0)
 . I DGFLD[",3," D
"RTN","DGROHLU3",73,0)
 . . S DGVAL(3)=$G(DGTEXT)
"RTN","DGROHLU3",74,0)
 . ;
"RTN","DGROHLU3",75,0)
 . ; seq 4 Expected Sequence Number
"RTN","DGROHLU3",76,0)
 . I DGFLD[",4," D
"RTN","DGROHLU3",77,0)
 . . S DGVAL(4)=$G(DGESN)
"RTN","DGROHLU3",78,0)
 . ;
"RTN","DGROHLU3",79,0)
 . ; seq 5 Delayed Acknowledgment Type
"RTN","DGROHLU3",80,0)
 . I DGFLD[",5," D
"RTN","DGROHLU3",81,0)
 . . S DGDAT=$G(DGDAT)
"RTN","DGROHLU3",82,0)
 . . S DGVAL(5)=$S(DGDAT="D":DGDAT,DGDAT="F":DGDAT,1:"")
"RTN","DGROHLU3",83,0)
 . ;
"RTN","DGROHLU3",84,0)
 . ; seq 6 Error Condition
"RTN","DGROHLU3",85,0)
 . I DGFLD[",6," D
"RTN","DGROHLU3",86,0)
 . . D BLDVA086(.DGTBL)
"RTN","DGROHLU3",87,0)
 . . I $G(DGERR)]"",$D(DGTBL(DGERR))#2 D
"RTN","DGROHLU3",88,0)
 . . . S DGVAL(6,1,1)=DGERR
"RTN","DGROHLU3",89,0)
 . . . S DGVAL(6,1,2)=DGTBL(DGERR)
"RTN","DGROHLU3",90,0)
 . . . S DGVAL(6,1,3)="VA086"
"RTN","DGROHLU3",91,0)
 . S DGRSLT=1
"RTN","DGROHLU3",92,0)
 I 'DGRSLT K DGVAL
"RTN","DGROHLU3",93,0)
 Q DGRSLT
"RTN","DGROHLU3",94,0)
 ;
"RTN","DGROHLU3",95,0)
ERR(DGSEG,DGSEQ,DGPOS,DGCOD,DGFLD,DGHL) ;ERR segment API
"RTN","DGROHLU3",96,0)
 ;Called from BLDERR^DGROHLU4
"RTN","DGROHLU3",97,0)
 ;  Input:
"RTN","DGROHLU3",98,0)
 ;    DGSEG - (required) Segment ID
"RTN","DGROHLU3",99,0)
 ;    DGSEQ - (required) Sequence
"RTN","DGROHLU3",100,0)
 ;    DGPOS - (required) Field position
"RTN","DGROHLU3",101,0)
 ;    DGCOD - (required) Error code from table VA086
"RTN","DGROHLU3",102,0)
 ;    DGFLD - (optional) List of comma-separated fields (sequence #'s)
"RTN","DGROHLU3",103,0)
 ;             to include.  Defaults to all required fields (1).
"RTN","DGROHLU3",104,0)
 ;     DGHL - (required) HL7 Environment array
"RTN","DGROHLU3",105,0)
 ;
"RTN","DGROHLU3",106,0)
 ;  Output:
"RTN","DGROHLU3",107,0)
 ;   Function value - ERR segment on success, "" on failure
"RTN","DGROHLU3",108,0)
 ;
"RTN","DGROHLU3",109,0)
 N DGERR
"RTN","DGROHLU3",110,0)
 N DGVAL
"RTN","DGROHLU3",111,0)
 N DGFLD
"RTN","DGROHLU3",112,0)
 ;
"RTN","DGROHLU3",113,0)
 S DGERR=""
"RTN","DGROHLU3",114,0)
 I $G(DGSEG)]"",+$G(DGSEQ),+$G(DGPOS),$G(DGCOD)]"",$G(DGHL("ECH"))]"" D
"RTN","DGROHLU3",115,0)
 . S DGFLD=$$CKSTR^DGROHLUT("1",DGFLD)  ;validate field string
"RTN","DGROHLU3",116,0)
 . S DGFLD=","_DGFLD_","
"RTN","DGROHLU3",117,0)
 . I $$ERRVAL(DGFLD,DGSEG,DGSEQ,DGPOS,DGCOD,.DGVAL) D
"RTN","DGROHLU3",118,0)
 . . S DGERR=$$BLDSEG^DGROHLUT("ERR",.DGVAL,.DGHL)
"RTN","DGROHLU3",119,0)
 Q DGERR
"RTN","DGROHLU3",120,0)
 ;
"RTN","DGROHLU3",121,0)
ERRVAL(DGFLD,DGSEG,DGSEQ,DGPOS,DGCOD,DGVAL) ;build ERR value array
"RTN","DGROHLU3",122,0)
 ;
"RTN","DGROHLU3",123,0)
 ;  Input:
"RTN","DGROHLU3",124,0)
 ;    DGFLD - (required) Field string
"RTN","DGROHLU3",125,0)
 ;    DGSEG - (required) Segment ID
"RTN","DGROHLU3",126,0)
 ;    DGSEQ - (required) Sequence
"RTN","DGROHLU3",127,0)
 ;    DGPOS - (required) Field position
"RTN","DGROHLU3",128,0)
 ;    DGCOD - (required) Error code from table VA086
"RTN","DGROHLU3",129,0)
 ;    
"RTN","DGROHLU3",130,0)
 ;  Output:
"RTN","DGROHLU3",131,0)
 ;   Function value - 1 on success, 0 on failure
"RTN","DGROHLU3",132,0)
 ;            DGVAL - ERR field array [SUB1:field, SUB2:repetition,
"RTN","DGROHLU3",133,0)
 ;                                    SUB3:component, SUB4:sub-component]
"RTN","DGROHLU3",134,0)
 N DGRSLT
"RTN","DGROHLU3",135,0)
 N DGTBL
"RTN","DGROHLU3",136,0)
 ;
"RTN","DGROHLU3",137,0)
 S DGRSLT=0
"RTN","DGROHLU3",138,0)
 I $G(DGFLD)]"",$G(DGSEG)]"",+$G(DGSEQ),+$G(DGPOS),$G(DGCOD)]"" D
"RTN","DGROHLU3",139,0)
 . I DGFLD[",1," D
"RTN","DGROHLU3",140,0)
 . . D BLDVA086(.DGTBL)
"RTN","DGROHLU3",141,0)
 . . I $D(DGTBL(DGCOD))#2 D
"RTN","DGROHLU3",142,0)
 . . . S DGVAL(1,1,1)=DGSEG
"RTN","DGROHLU3",143,0)
 . . . S DGVAL(1,1,2)=DGSEQ
"RTN","DGROHLU3",144,0)
 . . . S DGVAL(1,1,3)=DGPOS
"RTN","DGROHLU3",145,0)
 . . . S DGVAL(1,1,4,1)=DGCOD
"RTN","DGROHLU3",146,0)
 . . . S DGVAL(1,1,4,2)=DGTBL(DGCOD)
"RTN","DGROHLU3",147,0)
 . . . S DGVAL(1,1,4,3)="VA086"
"RTN","DGROHLU3",148,0)
 . S DGRSLT=1
"RTN","DGROHLU3",149,0)
 Q DGRSLT
"RTN","DGROHLU3",150,0)
 ;
"RTN","DGROHLU3",151,0)
BLDVA086(DGTBL) ;build error code/text array for table VA086
"RTN","DGROHLU3",152,0)
 ;
"RTN","DGROHLU3",153,0)
 ;  Input:
"RTN","DGROHLU3",154,0)
 ;    none
"RTN","DGROHLU3",155,0)
 ;
"RTN","DGROHLU3",156,0)
 ;  Output:
"RTN","DGROHLU3",157,0)
 ;    DGTBL - error code array subscripted by code containing error text
"RTN","DGROHLU3",158,0)
 ;
"RTN","DGROHLU3",159,0)
 N DGI
"RTN","DGROHLU3",160,0)
 N DGLINE
"RTN","DGROHLU3",161,0)
 N DGCOD
"RTN","DGROHLU3",162,0)
 N DGTXT
"RTN","DGROHLU3",163,0)
 N DGDESC
"RTN","DGROHLU3",164,0)
 ;
"RTN","DGROHLU3",165,0)
 F DGI=1:1 S DGLINE=$T(ERRTBL+DGI)  Q:DGLINE=""  D
"RTN","DGROHLU3",166,0)
 . S DGCOD=$P(DGLINE,";",3)
"RTN","DGROHLU3",167,0)
 . S DGTXT=$P(DGLINE,";",4)
"RTN","DGROHLU3",168,0)
 . S DGDESC=$P(DGLINE,";",5)
"RTN","DGROHLU3",169,0)
 . S DGTBL(DGCOD)=DGTXT
"RTN","DGROHLU3",170,0)
 . S DGTBL(DGCOD,"DESC")=DGDESC
"RTN","DGROHLU3",171,0)
 Q
"RTN","DGROHLU3",172,0)
 ;
"RTN","DGROHLU3",173,0)
ERRTBL ;VA086 Error Code Table;error code;error text
"RTN","DGROHLU3",174,0)
 ;;FE;Filer Error;An error occurred at the remote site when attempting to add or update an assignment.
"RTN","DGROHLU3",175,0)
 ;;IF;Invalid Patient Record Flag;The transmitted Patient Record Flag is not defined at the remote site.
"RTN","DGROHLU3",176,0)
 ;;IID;Invalid Observation ID;The transmitted observation ID is not "N"arrative, "S"tatus or "C"omment.
"RTN","DGROHLU3",177,0)
 ;;IOR;Invalid Originating Site;The originating site of the transmission is not defined at the remote site.
"RTN","DGROHLU3",178,0)
 ;;IOW;Invalid Owner Site;The transmitted owning site is not defined at the remote site.
"RTN","DGROHLU3",179,0)
 ;;NM;No Match;No patient was found that correlates to the transmitted ICN, DOB and SSN.
"RTN","DGROHLU3",180,0)
 ;;UU;Unauthorized Update;The originating site of the transmission is not defined as the owning site of the assignment or an invalid action was transmitted (i.e. Reactivate an already active assignment).
"RTN","DGROHLU4")
0^15^B16672998
"RTN","DGROHLU4",1,0)
DGROHLU4 ;DJH/AMA - ROM HL7 ACK PROCESSING ; 24 Jun 2003  3:53 PM
"RTN","DGROHLU4",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLU4",3,0)
 ;
"RTN","DGROHLU4",4,0)
BLDACK(DGACK,DGROOT,DGHL,DGSEGERR,DGSTOERR) ;Build ACK Message/Segments
"RTN","DGROHLU4",5,0)
 ;Called from SNDACK^DGROHLS
"RTN","DGROHLU4",6,0)
 ;  Input:
"RTN","DGROHLU4",7,0)
 ;      DGACK - (required) Acknowledment code
"RTN","DGROHLU4",8,0)
 ;     DGROOT - (required) Segment array name
"RTN","DGROHLU4",9,0)
 ;       DGHL - (required) HL7 environment array
"RTN","DGROHLU4",10,0)
 ;   DGSEGERR - (optional) defined only if errors during parsing
"RTN","DGROHLU4",11,0)
 ;   DGSTOERR - (optional) defined only if errors during filing
"RTN","DGROHLU4",12,0)
 ;
"RTN","DGROHLU4",13,0)
 ;  Output:
"RTN","DGROHLU4",14,0)
 ;   Function Value - 1 on success, 0 on failure
"RTN","DGROHLU4",15,0)
 ;   ^TMP("HLA",$J) - Array of ACK segments
"RTN","DGROHLU4",16,0)
 ;
"RTN","DGROHLU4",17,0)
 N DGCNT   ;segment counter
"RTN","DGROHLU4",18,0)
 N DGMSA   ;formatted MSA segment
"RTN","DGROHLU4",19,0)
 N DGRSLT  ;function value
"RTN","DGROHLU4",20,0)
 ;
"RTN","DGROHLU4",21,0)
 S DGRSLT=0
"RTN","DGROHLU4",22,0)
 I $G(DGACK)]"",$G(DGROOT)]"" D
"RTN","DGROHLU4",23,0)
 . S DGCNT=0
"RTN","DGROHLU4",24,0)
 . ;
"RTN","DGROHLU4",25,0)
 . ;build MSA segment
"RTN","DGROHLU4",26,0)
 . S DGMSA=$$MSA^DGROHLU3(DGACK,DGHL("MID"),.DGSTOERR,"1,2",.DGHL)
"RTN","DGROHLU4",27,0)
 . Q:(DGMSA="")
"RTN","DGROHLU4",28,0)
 . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGMSA
"RTN","DGROHLU4",29,0)
 . ;
"RTN","DGROHLU4",30,0)
 . ;build ERR segments
"RTN","DGROHLU4",31,0)
 . Q:($D(DGSEGERR)&('$$BLDERR(DGROOT,.DGSEGERR,.DGHL,.DGCNT)))
"RTN","DGROHLU4",32,0)
 . ;
"RTN","DGROHLU4",33,0)
 . ;success
"RTN","DGROHLU4",34,0)
 . S DGRSLT=1
"RTN","DGROHLU4",35,0)
 Q DGRSLT
"RTN","DGROHLU4",36,0)
 ;
"RTN","DGROHLU4",37,0)
PARSACK(DGWRK,DGHL,DGACK,DGMSG) ;Parse ACK Message/Segments
"RTN","DGROHLU4",38,0)
 ;Called from RCVACK^DGROHLR
"RTN","DGROHLU4",39,0)
 ;  Input:
"RTN","DGROHLU4",40,0)
 ;    DGWRK - Closed root work global reference
"RTN","DGROHLU4",41,0)
 ;     DGHL - HL7 environment array
"RTN","DGROHLU4",42,0)
 ;
"RTN","DGROHLU4",43,0)
 ;  Output:
"RTN","DGROHLU4",44,0)
 ;    DGACK - array of ACK results
"RTN","DGROHLU4",45,0)
 ;    DGMSG - undefined on success, array of MailMan text on failure
"RTN","DGROHLU4",46,0)
 ;
"RTN","DGROHLU4",47,0)
 N DGFS
"RTN","DGROHLU4",48,0)
 N DGCS
"RTN","DGROHLU4",49,0)
 N DGRS
"RTN","DGROHLU4",50,0)
 N DGSS
"RTN","DGROHLU4",51,0)
 N DGCURLIN
"RTN","DGROHLU4",52,0)
 ;
"RTN","DGROHLU4",53,0)
 S DGFS=DGHL("FS")
"RTN","DGROHLU4",54,0)
 S DGCS=$E(DGHL("ECH"),1)
"RTN","DGROHLU4",55,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGROHLU4",56,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGROHLU4",57,0)
 S DGCURLIN=0
"RTN","DGROHLU4",58,0)
 ;
"RTN","DGROHLU4",59,0)
 ;loop through the message segments and retrieve the field data
"RTN","DGROHLU4",60,0)
 F  D  Q:'DGCURLIN
"RTN","DGROHLU4",61,0)
 . N DGSEG
"RTN","DGROHLU4",62,0)
 . S DGCURLIN=$$NXTSEG^DGROHLUT(DGWRK,DGCURLIN,DGFS,.DGSEG)
"RTN","DGROHLU4",63,0)
 . Q:'DGCURLIN
"RTN","DGROHLU4",64,0)
 . D @(DGSEG("TYPE")_"(.DGSEG,DGCS,DGRS,DGSS,.DGACK,.DGMSG)")
"RTN","DGROHLU4",65,0)
 Q
"RTN","DGROHLU4",66,0)
 ;
"RTN","DGROHLU4",67,0)
MSH(DGSEG,DGCS,DGRS,DGSS,DGACK,DGERR) ;
"RTN","DGROHLU4",68,0)
 ;Also called from MSH^DGROHLQ3
"RTN","DGROHLU4",69,0)
 ;  Input:
"RTN","DGROHLU4",70,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLU4",71,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLU4",72,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLU4",73,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLU4",74,0)
 ;
"RTN","DGROHLU4",75,0)
 ;  Output:
"RTN","DGROHLU4",76,0)
 ;    DGACK - array of ACK results
"RTN","DGROHLU4",77,0)
 ;            "SNDFAC" - sending facility, the Querying Site
"RTN","DGROHLU4",78,0)
 ;            "RCVFAC" - receiving facility, the Last Site Treated
"RTN","DGROHLU4",79,0)
 ;            "MSGDTM" - message creation date/time in FileMan format
"RTN","DGROHLU4",80,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLU4",81,0)
 ;
"RTN","DGROHLU4",82,0)
 S DGACK("SNDFAC")=$P($G(DGSEG(4)),DGCS,1)
"RTN","DGROHLU4",83,0)
 S DGACK("RCVFAC")=$P($G(DGSEG(6)),DGCS,1)
"RTN","DGROHLU4",84,0)
 S DGACK("MSGDTM")=$$HL7TFM^XLFDT($G(DGSEG(7)))
"RTN","DGROHLU4",85,0)
 Q
"RTN","DGROHLU4",86,0)
 ;
"RTN","DGROHLU4",87,0)
MSA(DGSEG,DGCS,DGRS,DGSS,DGACK,DGERR) ;
"RTN","DGROHLU4",88,0)
 ;Also called from MSA^DGROHLQ3
"RTN","DGROHLU4",89,0)
 ;  Input:
"RTN","DGROHLU4",90,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLU4",91,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLU4",92,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLU4",93,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLU4",94,0)
 ;
"RTN","DGROHLU4",95,0)
 ;  Output:
"RTN","DGROHLU4",96,0)
 ;    DGACK - array of ACK results
"RTN","DGROHLU4",97,0)
 ;            "ACKCODE" - Acknowledgment code
"RTN","DGROHLU4",98,0)
 ;            "MSGID" - Message Control ID of the message being ACK'ed
"RTN","DGROHLU4",99,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLU4",100,0)
 ;
"RTN","DGROHLU4",101,0)
 N DGCNT
"RTN","DGROHLU4",102,0)
 ;
"RTN","DGROHLU4",103,0)
 S DGACK("ACKCODE")=$G(DGSEG(1))
"RTN","DGROHLU4",104,0)
 S DGACK("MSGID")=$G(DGSEG(2))
"RTN","DGROHLU4",105,0)
 I DGACK("ACKCODE")'="AA",$G(DGSEG(6))]"" D
"RTN","DGROHLU4",106,0)
 . S DGCNT=$O(DGERR(""),-1),DGCNT=DGCNT+1
"RTN","DGROHLU4",107,0)
 . S DGERR(DGCNT)=$P(DGSEG(6),DGCS,1)
"RTN","DGROHLU4",108,0)
 Q
"RTN","DGROHLU4",109,0)
 ;
"RTN","DGROHLU4",110,0)
ERR(DGSEG,DGCS,DGRS,DGSS,DGACK,DGERR) ;
"RTN","DGROHLU4",111,0)
 ;Also called from ERR^DGROHLQ3
"RTN","DGROHLU4",112,0)
 ;  Input:
"RTN","DGROHLU4",113,0)
 ;    DGSEG - MSH segment field array
"RTN","DGROHLU4",114,0)
 ;     DGCS - HL7 component separator
"RTN","DGROHLU4",115,0)
 ;     DGRS - HL7 repetition separator
"RTN","DGROHLU4",116,0)
 ;     DGSS - HL7 sub-component separator
"RTN","DGROHLU4",117,0)
 ;
"RTN","DGROHLU4",118,0)
 ;  Output:
"RTN","DGROHLU4",119,0)
 ;    DGACK - array of ACK results
"RTN","DGROHLU4",120,0)
 ;    DGERR - undefined on success, error array on failure
"RTN","DGROHLU4",121,0)
 ;
"RTN","DGROHLU4",122,0)
 N DGCNT
"RTN","DGROHLU4",123,0)
 N DGCOD
"RTN","DGROHLU4",124,0)
 ;
"RTN","DGROHLU4",125,0)
 I $G(DGSEG(1))]"" D
"RTN","DGROHLU4",126,0)
 . S DGCOD=$P($P(DGSEG(1),DGCS,4),DGSS,1)
"RTN","DGROHLU4",127,0)
 . I DGCOD]"" D
"RTN","DGROHLU4",128,0)
 . . S DGCNT=$O(DGERR(""),-1),DGCNT=DGCNT+1
"RTN","DGROHLU4",129,0)
 . . S DGERR(DGCNT)=DGCOD
"RTN","DGROHLU4",130,0)
 Q
"RTN","DGROHLU4",131,0)
 ;
"RTN","DGROHLU4",132,0)
BLDERR(DGROOT,DGSEGERR,DGHL,DGCNT) ;build all ERR segments
"RTN","DGROHLU4",133,0)
 ;This function builds a formatted ERR segment for each entry in the
"RTN","DGROHLU4",134,0)
 ;segment error array (DGSEGERR).  Called from BLDORF^DGROHLQ
"RTN","DGROHLU4",135,0)
 ;
"RTN","DGROHLU4",136,0)
 ;  Input:
"RTN","DGROHLU4",137,0)
 ;     DGROOT - (required) Closed root array or global name for segment
"RTN","DGROHLU4",138,0)
 ;              storage
"RTN","DGROHLU4",139,0)
 ;   DGSEGERR - (required) Array of segment errors
"RTN","DGROHLU4",140,0)
 ;              Format: DGSEGERR(segment name,sequence,field)=error code
"RTN","DGROHLU4",141,0)
 ;       DGHL - (required) VistA HL7 environment array
"RTN","DGROHLU4",142,0)
 ;      DGCNT - (optional) Previous segment # in DGROOT
"RTN","DGROHLU4",143,0)
 ;
"RTN","DGROHLU4",144,0)
 ;  Output:
"RTN","DGROHLU4",145,0)
 ;   Function Value - 1 on success, 0 on failure
"RTN","DGROHLU4",146,0)
 ;
"RTN","DGROHLU4",147,0)
 N DGCOD   ;error code
"RTN","DGROHLU4",148,0)
 N DGERR   ;formatted ERR segment
"RTN","DGROHLU4",149,0)
 N DGPOS   ;field positions containing error
"RTN","DGROHLU4",150,0)
 N DGSEG   ;segment name containing error
"RTN","DGROHLU4",151,0)
 N DGSEQ   ;sequence of segment containing error
"RTN","DGROHLU4",152,0)
 N DGRSLT  ;function value
"RTN","DGROHLU4",153,0)
 ;
"RTN","DGROHLU4",154,0)
 S DGRSLT=0
"RTN","DGROHLU4",155,0)
 I $G(DGROOT)]"",$D(DGSEGERR) D
"RTN","DGROHLU4",156,0)
 . S DGCNT=$G(DGCNT,0)
"RTN","DGROHLU4",157,0)
 . S DGSEG=""
"RTN","DGROHLU4",158,0)
 . F  S DGSEG=$O(DGSEGERR(DGSEG)) Q:(DGSEG="")  D  Q:(DGERR="")
"RTN","DGROHLU4",159,0)
 . . S DGSEQ=0
"RTN","DGROHLU4",160,0)
 . . F  S DGSEQ=$O(DGSEGERR(DGSEG,DGSEQ)) Q:'DGSEQ  D  Q:(DGERR="")
"RTN","DGROHLU4",161,0)
 . . . S DGPOS=0
"RTN","DGROHLU4",162,0)
 . . . F  S DGPOS=$O(DGSEGERR(DGSEG,DGSEQ,DGPOS)) Q:'DGPOS  D  Q:(DGERR="")
"RTN","DGROHLU4",163,0)
 . . . . S DGCOD=DGSEGERR(DGSEG,DGSEQ,DGPOS)
"RTN","DGROHLU4",164,0)
 . . . . S DGERR=$$ERR^DGROHLU3(DGSEG,DGSEQ,DGPOS,DGCOD,"1",.DGHL)
"RTN","DGROHLU4",165,0)
 . . . . Q:(DGERR="")
"RTN","DGROHLU4",166,0)
 . . . . S DGCNT=DGCNT+1,@DGROOT@(DGCNT)=DGERR
"RTN","DGROHLU4",167,0)
 . Q:(DGERR="")
"RTN","DGROHLU4",168,0)
 . S DGRSLT=1
"RTN","DGROHLU4",169,0)
 Q DGRSLT
"RTN","DGROHLUT")
0^17^B21978377
"RTN","DGROHLUT",1,0)
DGROHLUT ;DJH/AMA - ROM HL7 UTILITIES ; 24 Jun 2003  3:53 PM
"RTN","DGROHLUT",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROHLUT",3,0)
 ;This routine contains generic utilities used when building
"RTN","DGROHLUT",4,0)
 ;or processing received patient record flag HL7 messages.
"RTN","DGROHLUT",5,0)
 ;
"RTN","DGROHLUT",6,0)
 Q  ;no supported direct entry
"RTN","DGROHLUT",7,0)
 ;
"RTN","DGROHLUT",8,0)
INIT(DGPROT,DGHL) ;Kernel HL7 INIT wrapper
"RTN","DGROHLUT",9,0)
 ;Called from SNDQRY^DGROHLS
"RTN","DGROHLUT",10,0)
 ;  Supported DBIA #2161:  The supported DBIA is used to access the
"RTN","DGROHLUT",11,0)
 ;                         VistA HL7 API to initialize the HL7 environ-
"RTN","DGROHLUT",12,0)
 ;                         ment variables.
"RTN","DGROHLUT",13,0)
 ;
"RTN","DGROHLUT",14,0)
 ;  Input:
"RTN","DGROHLUT",15,0)
 ;    DGPROT - Event protocol name
"RTN","DGROHLUT",16,0)
 ;
"RTN","DGROHLUT",17,0)
 ;  Output:
"RTN","DGROHLUT",18,0)
 ;    Function value - HLEID on success;0 on failure
"RTN","DGROHLUT",19,0)
 ;    DGHL - HL array from INIT^HLFNC2 Kernel call
"RTN","DGROHLUT",20,0)
 ;
"RTN","DGROHLUT",21,0)
 N DGHLEID
"RTN","DGROHLUT",22,0)
 S DGHLEID=$$HLEID(DGPROT)
"RTN","DGROHLUT",23,0)
 I DGHLEID D
"RTN","DGROHLUT",24,0)
 . D INIT^HLFNC2(DGHLEID,.DGHL)
"RTN","DGROHLUT",25,0)
 . I $O(DGHL(""))="" S DGHLEID=0
"RTN","DGROHLUT",26,0)
 Q DGHLEID
"RTN","DGROHLUT",27,0)
 ;
"RTN","DGROHLUT",28,0)
HLEID(DGPROT) ;return IEN of HL7 protocol
"RTN","DGROHLUT",29,0)
 ;
"RTN","DGROHLUT",30,0)
 ;  Input:  
"RTN","DGROHLUT",31,0)
 ;    DGPROT - Protocol name
"RTN","DGROHLUT",32,0)
 ;
"RTN","DGROHLUT",33,0)
 ;  Output:  
"RTN","DGROHLUT",34,0)
 ;   Function value - IEN of protocol on success, 0 on failure
"RTN","DGROHLUT",35,0)
 ;
"RTN","DGROHLUT",36,0)
 I $G(DGPROT)="" Q 0
"RTN","DGROHLUT",37,0)
 Q +$$FIND1^DIC(101,,"B",DGPROT)
"RTN","DGROHLUT",38,0)
 ;
"RTN","DGROHLUT",39,0)
GETLINK(DGINST) ;retrieve a single link for a given institution
"RTN","DGROHLUT",40,0)
 ;Called from SNDQRY^DGROHLS
"RTN","DGROHLUT",41,0)
 ;  Supported DBIA #2271:  The supported DBIA is used to access the
"RTN","DGROHLUT",42,0)
 ;                         VistA HL7 API to retrieve logical links
"RTN","DGROHLUT",43,0)
 ;                         given a pointer to the INSTITUTION (#4) file.
"RTN","DGROHLUT",44,0)
 ;
"RTN","DGROHLUT",45,0)
 ;  Input:
"RTN","DGROHLUT",46,0)
 ;    DGINST - IEN of site in INSTITUTION (#4) file
"RTN","DGROHLUT",47,0)
 ;
"RTN","DGROHLUT",48,0)
 ;  Output:
"RTN","DGROHLUT",49,0)
 ;    Function Value - HL Logical link on success, 0 on failure
"RTN","DGROHLUT",50,0)
 ;
"RTN","DGROHLUT",51,0)
 N DGLINKS,DGLNK,DGRSLT
"RTN","DGROHLUT",52,0)
 ;
"RTN","DGROHLUT",53,0)
 S DGRSLT=0
"RTN","DGROHLUT",54,0)
 I $G(DGINST)>0 D
"RTN","DGROHLUT",55,0)
 . D LINK^HLUTIL3(DGINST,.DGLINKS,"I")
"RTN","DGROHLUT",56,0)
 . S DGLNK=$O(DGLINKS(0))
"RTN","DGROHLUT",57,0)
 . S DGRSLT=$S(DGLNK>0:DGLINKS(DGLNK),1:0)
"RTN","DGROHLUT",58,0)
 Q DGRSLT
"RTN","DGROHLUT",59,0)
 ;
"RTN","DGROHLUT",60,0)
NXTSEG(DGROOT,DGCURR,DGFS,DGFLD) ;retrieves next sequential segment
"RTN","DGROHLUT",61,0)
 ;This function retrieves the next segment in the work global, returns
"RTN","DGROHLUT",62,0)
 ;an array of field values and the segment's work global index.  If
"RTN","DGROHLUT",63,0)
 ;the next segment does not exist, then the function returns a zero.
"RTN","DGROHLUT",64,0)
 ;  Called from PARSQRY and PARSORF^DGROHLQ3,
"RTN","DGROHLUT",65,0)
 ;              RCV^DGROHLR, and PARSACK^DGROHLU4
"RTN","DGROHLUT",66,0)
 ;
"RTN","DGROHLUT",67,0)
 ;  Input:
"RTN","DGROHLUT",68,0)
 ;    DGROOT - close root name of work global
"RTN","DGROHLUT",69,0)
 ;    DGCURR - index of current segment
"RTN","DGROHLUT",70,0)
 ;      DGFS - HL7 field separator character
"RTN","DGROHLUT",71,0)
 ;
"RTN","DGROHLUT",72,0)
 ;  Output:
"RTN","DGROHLUT",73,0)
 ;   Function Value  - index of the next segment on success, 0 on failure
"RTN","DGROHLUT",74,0)
 ;             DGFLD - array of segment field values
"RTN","DGROHLUT",75,0)
 ;
"RTN","DGROHLUT",76,0)
 N NXTSEG
"RTN","DGROHLUT",77,0)
 ;
"RTN","DGROHLUT",78,0)
 S DGCURR=DGCURR+1
"RTN","DGROHLUT",79,0)
 S NXTSEG=$G(@DGROOT@(DGCURR,0))
"RTN","DGROHLUT",80,0)
 I NXTSEG]"" D
"RTN","DGROHLUT",81,0)
 . D GETFLDS(NXTSEG,DGFS,.DGFLD)
"RTN","DGROHLUT",82,0)
 E  D
"RTN","DGROHLUT",83,0)
 . S DGCURR=0
"RTN","DGROHLUT",84,0)
 Q DGCURR
"RTN","DGROHLUT",85,0)
 ;
"RTN","DGROHLUT",86,0)
GETFLDS(DGSEG,DGFS,DGFLD) ;retrieve HL7 segment fields into an array
"RTN","DGROHLUT",87,0)
 ;This procedure parses a single HL7 segment and builds an array
"RTN","DGROHLUT",88,0)
 ;subscripted by the field number that contains the data for that
"RTN","DGROHLUT",89,0)
 ;field.  An additional subscript node, "TYPE" is created containing
"RTN","DGROHLUT",90,0)
 ;the segment type.
"RTN","DGROHLUT",91,0)
 ;
"RTN","DGROHLUT",92,0)
 ;  Input:
"RTN","DGROHLUT",93,0)
 ;     DGSEG - HL7 segment to parse
"RTN","DGROHLUT",94,0)
 ;      DGFS - HL7 field separator
"RTN","DGROHLUT",95,0)
 ;
"RTN","DGROHLUT",96,0)
 ;  Output:
"RTN","DGROHLUT",97,0)
 ;    DGFLD - array of segment field values subscripted by field #
"RTN","DGROHLUT",98,0)
 ;            Example: DGFLD(2)="DOE,JOHN"
"RTN","DGROHLUT",99,0)
 ;
"RTN","DGROHLUT",100,0)
 N DGI
"RTN","DGROHLUT",101,0)
 ;
"RTN","DGROHLUT",102,0)
 S DGFLD("TYPE")=$P(DGSEG,DGFS)
"RTN","DGROHLUT",103,0)
 F DGI=2:1:$L(DGSEG,DGFS) D
"RTN","DGROHLUT",104,0)
 . S DGFLD($S(DGFLD("TYPE")="MSH":DGI,1:DGI-1))=$P(DGSEG,DGFS,DGI)
"RTN","DGROHLUT",105,0)
 Q
"RTN","DGROHLUT",106,0)
 ;
"RTN","DGROHLUT",107,0)
STRIPTS(DGSTR) ;Strip trailing spaces from a line of text
"RTN","DGROHLUT",108,0)
 ;
"RTN","DGROHLUT",109,0)
 ;  Input:
"RTN","DGROHLUT",110,0)
 ;    DGSTR - Text string
"RTN","DGROHLUT",111,0)
 ;
"RTN","DGROHLUT",112,0)
 ;  Output:
"RTN","DGROHLUT",113,0)
 ;   Function Value - Input text string with trailing spaces removed
"RTN","DGROHLUT",114,0)
 ;
"RTN","DGROHLUT",115,0)
 N SPACE
"RTN","DGROHLUT",116,0)
 S SPACE=$C(32)
"RTN","DGROHLUT",117,0)
 F  Q:$E(DGSTR,$L(DGSTR))'=SPACE  S DGSTR=$E(DGSTR,1,$L(DGSTR)-1)
"RTN","DGROHLUT",118,0)
 Q DGSTR
"RTN","DGROHLUT",119,0)
 ;
"RTN","DGROHLUT",120,0)
BLDSEG(DGTYP,DGVAL,DGHL) ;generic segment builder
"RTN","DGROHLUT",121,0)
 ;Called from QRD^DGROHLQ1, QRF^DGROHLQ2, and MSA and ERR^DGROHLU3
"RTN","DGROHLUT",122,0)
 ;  Input:
"RTN","DGROHLUT",123,0)
 ;    DGTYP - segment type
"RTN","DGROHLUT",124,0)
 ;    DGVAL - field data array [SUB1:field, SUB2:repetition,
"RTN","DGROHLUT",125,0)
 ;                              SUB3:component, SUB4:sub-component] 
"RTN","DGROHLUT",126,0)
 ;     DGHL - HL7 environment array
"RTN","DGROHLUT",127,0)
 ;
"RTN","DGROHLUT",128,0)
 ;  Output:
"RTN","DGROHLUT",129,0)
 ;    Function Value - Formatted HL7 segment on success, "" on failure
"RTN","DGROHLUT",130,0)
 ;
"RTN","DGROHLUT",131,0)
 N DGCMP     ;component subscript
"RTN","DGROHLUT",132,0)
 N DGCMPVAL  ;component value
"RTN","DGROHLUT",133,0)
 N DGFLD     ;field subscript
"RTN","DGROHLUT",134,0)
 N DGFLDVAL  ;field value
"RTN","DGROHLUT",135,0)
 N DGREP     ;repetition subscript
"RTN","DGROHLUT",136,0)
 N DGREPVAL  ;repetition value
"RTN","DGROHLUT",137,0)
 N DGSUB     ;sub-component subscript
"RTN","DGROHLUT",138,0)
 N DGSUBVAL  ;sub-component value
"RTN","DGROHLUT",139,0)
 N DGFS      ;field separator
"RTN","DGROHLUT",140,0)
 N DGCS      ;component separator
"RTN","DGROHLUT",141,0)
 N DGRS      ;repetition separator
"RTN","DGROHLUT",142,0)
 N DGSS      ;sub-component separator
"RTN","DGROHLUT",143,0)
 N DGSEG,DGSEP
"RTN","DGROHLUT",144,0)
 ;
"RTN","DGROHLUT",145,0)
 Q:($G(DGTYP)']"") ""
"RTN","DGROHLUT",146,0)
 ;
"RTN","DGROHLUT",147,0)
 S DGSEG=DGTYP
"RTN","DGROHLUT",148,0)
 S DGFS=DGHL("FS")
"RTN","DGROHLUT",149,0)
 S DGCS=$E(DGHL("ECH"))
"RTN","DGROHLUT",150,0)
 S DGRS=$E(DGHL("ECH"),2)
"RTN","DGROHLUT",151,0)
 S DGSS=$E(DGHL("ECH"),4)
"RTN","DGROHLUT",152,0)
 ;
"RTN","DGROHLUT",153,0)
 F DGFLD=1:1:$O(DGVAL(""),-1) D
"RTN","DGROHLUT",154,0)
 . S DGFLDVAL=$G(DGVAL(DGFLD)),DGSEP=DGFS
"RTN","DGROHLUT",155,0)
 . D ADD(DGFLDVAL,DGSEP,.DGSEG)
"RTN","DGROHLUT",156,0)
 . F DGREP=1:1:$O(DGVAL(DGFLD,""),-1)  D
"RTN","DGROHLUT",157,0)
 . . S DGREPVAL=$G(DGVAL(DGFLD,DGREP))
"RTN","DGROHLUT",158,0)
 . . S DGSEP=$S(DGREP=1:"",1:DGRS)
"RTN","DGROHLUT",159,0)
 . . D ADD(DGREPVAL,DGSEP,.DGSEG)
"RTN","DGROHLUT",160,0)
 . . F DGCMP=1:1:$O(DGVAL(DGFLD,DGREP,""),-1) D
"RTN","DGROHLUT",161,0)
 . . . S DGCMPVAL=$G(DGVAL(DGFLD,DGREP,DGCMP))
"RTN","DGROHLUT",162,0)
 . . . S DGSEP=$S(DGCMP=1:"",1:DGCS)
"RTN","DGROHLUT",163,0)
 . . . D ADD(DGCMPVAL,DGSEP,.DGSEG)
"RTN","DGROHLUT",164,0)
 . . . F DGSUB=1:1:$O(DGVAL(DGFLD,DGREP,DGCMP,""),-1) D
"RTN","DGROHLUT",165,0)
 . . . . S DGSUBVAL=$G(DGVAL(DGFLD,DGREP,DGCMP,DGSUB))
"RTN","DGROHLUT",166,0)
 . . . . S DGSEP=$S(DGSUB=1:"",1:DGSS)
"RTN","DGROHLUT",167,0)
 . . . . D ADD(DGSUBVAL,DGSEP,.DGSEG)
"RTN","DGROHLUT",168,0)
 Q DGSEG
"RTN","DGROHLUT",169,0)
 ;
"RTN","DGROHLUT",170,0)
ADD(DGVAL,DGSEP,DGSEG) ;append a value onto segment
"RTN","DGROHLUT",171,0)
 ;
"RTN","DGROHLUT",172,0)
 ;  Input:
"RTN","DGROHLUT",173,0)
 ;    DGVAL - value to append
"RTN","DGROHLUT",174,0)
 ;    DGSEP - HL7 separator
"RTN","DGROHLUT",175,0)
 ;
"RTN","DGROHLUT",176,0)
 ;  Output:
"RTN","DGROHLUT",177,0)
 ;    DGSEG - segment passed by reference
"RTN","DGROHLUT",178,0)
 ;
"RTN","DGROHLUT",179,0)
 S DGSEP=$G(DGSEP)
"RTN","DGROHLUT",180,0)
 S DGVAL=$G(DGVAL)
"RTN","DGROHLUT",181,0)
 S DGSEG=DGSEG_DGSEP_DGVAL
"RTN","DGROHLUT",182,0)
 Q
"RTN","DGROHLUT",183,0)
 ;
"RTN","DGROHLUT",184,0)
CKSTR(DGFLDS,DGSTR) ;validate comma-delimited HL7 field string
"RTN","DGROHLUT",185,0)
 ;Called from QRD^DGROHLQ1, QRF^DGROHLQ2, and MSA and ERR^DGROHLU3
"RTN","DGROHLUT",186,0)
 ;  Input:
"RTN","DGROHLUT",187,0)
 ;    DGFLDS - (required) comma delimited string of required fields
"RTN","DGROHLUT",188,0)
 ;    DGSTR - (optional) comma delimited string of fields to include
"RTN","DGROHLUT",189,0)
 ;            in an HL7 segment.
"RTN","DGROHLUT",190,0)
 ;
"RTN","DGROHLUT",191,0)
 ;  Output:
"RTN","DGROHLUT",192,0)
 ;   Function Value - validated string of fields
"RTN","DGROHLUT",193,0)
 ;
"RTN","DGROHLUT",194,0)
 N DGI     ;generic index
"RTN","DGROHLUT",195,0)
 N DGREQ   ;required field
"RTN","DGROHLUT",196,0)
 ;
"RTN","DGROHLUT",197,0)
 Q:($G(DGFLDS)']"") ""
"RTN","DGROHLUT",198,0)
 S DGSTR=$G(DGSTR)
"RTN","DGROHLUT",199,0)
 F DGI=1:1 S DGREQ=$P(DGFLDS,",",DGI) Q:DGREQ=""  D
"RTN","DGROHLUT",200,0)
 . I ","_DGSTR_","'[(","_DGREQ_",") S DGSTR=DGSTR_$S($L(DGSTR)>0:",",1:"")_DGREQ
"RTN","DGROHLUT",201,0)
 Q DGSTR
"RTN","DGROMAIL")
0^21^B29396861
"RTN","DGROMAIL",1,0)
DGROMAIL ;DJH/AMA - ROM HL7 MAIL MESSAGE PROCESSING ; 08/21/03
"RTN","DGROMAIL",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROMAIL",3,0)
 ;
"RTN","DGROMAIL",4,0)
 Q
"RTN","DGROMAIL",5,0)
 ;
"RTN","DGROMAIL",6,0)
MPIMAIL(DGQRY) ;LOG MPI EXCEPTION FROM LAST SITE TREATED
"RTN","DGROMAIL",7,0)
 ;The ICN sent from the MPI does not match the patient at the Last Site
"RTN","DGROMAIL",8,0)
 ;Treated, even though the site was on the Treatment Facility List
"RTN","DGROMAIL",9,0)
 ;received from the MPI.  Send the MPI an exception to this effect.
"RTN","DGROMAIL",10,0)
 ;CALLED FROM RCVQRY^DGROHLR
"RTN","DGROMAIL",11,0)
 ;
"RTN","DGROMAIL",12,0)
 ; Input:
"RTN","DGROMAIL",13,0)
 ;   DGQRY - Patient lookup components array
"RTN","DGROMAIL",14,0)
        N FACNAM,LINE,TEXT,DGXMTXT,MPIFL,SITE,HLMID
"RTN","DGROMAIL",15,0)
        S HLMID=$G(HL("MID"))
"RTN","DGROMAIL",16,0)
 ;
"RTN","DGROMAIL",17,0)
        S FACNAM="",LINE="",MPIFL=1,HL("MID")=""
"RTN","DGROMAIL",18,0)
 I '$G(DGQRY("RCVFAC")) D
"RTN","DGROMAIL",19,0)
 . S SITE=$$SITE^VASITE
"RTN","DGROMAIL",20,0)
 . S DGQRY("RCVFAC")=$P(SITE,U,3)
"RTN","DGROMAIL",21,0)
 ;
"RTN","DGROMAIL",22,0)
 S RGEXC=219
"RTN","DGROMAIL",23,0)
 S TEXT="Unable to find ICN # "_DGQRY("ICN")_" based on a Register Once call from Station # "_DGQRY("RCVFAC")
"RTN","DGROMAIL",24,0)
 D EXC^RGHLLOG(RGEXC,TEXT)
"RTN","DGROMAIL",25,0)
 S HL("MID")=HLMID
"RTN","DGROMAIL",26,0)
 Q
"RTN","DGROMAIL",27,0)
 ;
"RTN","DGROMAIL",28,0)
DODMAIL(DGDATA,DFN,LSTDFN) ;SEND MAIL MESSAGE TO DATE OF DEATH MAIL GROUP
"RTN","DGROMAIL",29,0)
 ;Date of Death data has been received from the Last Site Treated,
"RTN","DGROMAIL",30,0)
 ;so notify the appropriate people that this person is listed as
"RTN","DGROMAIL",31,0)
 ;deceased at the LST.
"RTN","DGROMAIL",32,0)
 ;  CALLED FROM DOD^DGRODEBR
"RTN","DGROMAIL",33,0)
 ;
"RTN","DGROMAIL",34,0)
 ; Input:
"RTN","DGROMAIL",35,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGROMAIL",36,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGROMAIL",37,0)
 ;   LSTDFN - Pointer to the patient data from the LST, in DGDATA
"RTN","DGROMAIL",38,0)
 N U,LINE,LNCNT,TEXT,DGXMTXT,MPIFL
"RTN","DGROMAIL",39,0)
 ;
"RTN","DGROMAIL",40,0)
 S U="^",LINE="",LNCNT=7,MPIFL=0
"RTN","DGROMAIL",41,0)
 S LINE(1)="* * * *  DG REGISTER ONCE NOTIFICATION  * * * *"
"RTN","DGROMAIL",42,0)
 S LINE(2)="Death Information has been received for the following patient:"
"RTN","DGROMAIL",43,0)
 S LINE(3)="Patient Name: "_$$GET1^DIQ(2,DFN,.01,"I")
"RTN","DGROMAIL",44,0)
 S LINE(4)="Social Security Number: "_$$GET1^DIQ(2,DFN,.09,"I")
"RTN","DGROMAIL",45,0)
 S LINE(5)="Date Of Birth: "_$$FMTE^XLFDT($$GET1^DIQ(2,DFN,.03,"I"))
"RTN","DGROMAIL",46,0)
 S LINE(6)="Integrated Control #: "_$$GET1^DIQ(2,DFN,991.01,"I")
"RTN","DGROMAIL",47,0)
 ;
"RTN","DGROMAIL",48,0)
 S LINE(LNCNT)="Death data received:"
"RTN","DGROMAIL",49,0)
 I $D(@DGDATA@(2,LSTDFN_",",.351)) D
"RTN","DGROMAIL",50,0)
 . S LNCNT=LNCNT+1
"RTN","DGROMAIL",51,0)
 . S LINE(LNCNT)="   Date of Death: "_$$FMTE^XLFDT(@DGDATA@(2,LSTDFN_",",.351,"I"))
"RTN","DGROMAIL",52,0)
 I $D(@DGDATA@(2,LSTDFN_",",.354)) D
"RTN","DGROMAIL",53,0)
 . S LNCNT=LNCNT+1
"RTN","DGROMAIL",54,0)
 . S LINE(LNCNT)="   D.o.D. Last Updated: "_$$FMTE^XLFDT(@DGDATA@(2,LSTDFN_",",.354,"I"))
"RTN","DGROMAIL",55,0)
 I $D(@DGDATA@(2,LSTDFN_",",.352)) D
"RTN","DGROMAIL",56,0)
 . S LNCNT=LNCNT+1
"RTN","DGROMAIL",57,0)
 . S LINE(LNCNT)="   D.o.D. Entered By: "_@DGDATA@(2,LSTDFN_",",.352,"E")
"RTN","DGROMAIL",58,0)
 I $D(@DGDATA@(2,LSTDFN_",",.353)) D
"RTN","DGROMAIL",59,0)
 . N DGSET,DGSRCE
"RTN","DGROMAIL",60,0)
 . D FIELD^DID(2,.353,,"POINTER","DGSET")
"RTN","DGROMAIL",61,0)
 . S DGSRCE=@DGDATA@(2,LSTDFN_",",.353,"I")
"RTN","DGROMAIL",62,0)
 . S DGSRCE=$P($P(DGSET("POINTER"),";",DGSRCE),":",2)
"RTN","DGROMAIL",63,0)
 . S LNCNT=LNCNT+1
"RTN","DGROMAIL",64,0)
 . S LINE(LNCNT)="   Source Of Notification of D.o.D.: "_DGSRCE
"RTN","DGROMAIL",65,0)
 ;
"RTN","DGROMAIL",66,0)
 S DGXMTXT=$NA(TEXT)
"RTN","DGROMAIL",67,0)
 D BLDMSG(.LINE,DGXMTXT)
"RTN","DGROMAIL",68,0)
 D SNDMSG(DGXMTXT,"DG REGISTER ONCE",MPIFL)
"RTN","DGROMAIL",69,0)
 Q
"RTN","DGROMAIL",70,0)
 ;
"RTN","DGROMAIL",71,0)
SPMAIL(DFN) ;SEND MAIL MESSAGE REGARDING A SENSITIVE PATIENT
"RTN","DGROMAIL",72,0)
 ;Sensitive Patient data has been received from the Last Site Treated,
"RTN","DGROMAIL",73,0)
 ;so notify the appropriate people that this person is listed as
"RTN","DGROMAIL",74,0)
 ;Sensitive at the LST.
"RTN","DGROMAIL",75,0)
 ;  CALLED FROM SP^DGRODEBR
"RTN","DGROMAIL",76,0)
 ;
"RTN","DGROMAIL",77,0)
 ; Input:
"RTN","DGROMAIL",78,0)
 ;   DGDATA - Data element array from LST, ^TMP("DGROFDA",$J)
"RTN","DGROMAIL",79,0)
 ;      DFN - Pointer to the PATIENT (#2) file
"RTN","DGROMAIL",80,0)
 N U,LINE,TEXT,DGXMTXT,MPIFL
"RTN","DGROMAIL",81,0)
 ;
"RTN","DGROMAIL",82,0)
 S U="^",LINE="",MPIFL=0
"RTN","DGROMAIL",83,0)
 S LINE(1)="* * * *  DG REGISTER ONCE NOTIFICATION  * * * *"
"RTN","DGROMAIL",84,0)
 S LINE(2)="Sensitive Patient Information has been received for the following patient:"
"RTN","DGROMAIL",85,0)
 S LINE(3)="Patient Name: "_$$GET1^DIQ(2,DFN,.01,"I")
"RTN","DGROMAIL",86,0)
 S LINE(4)="Social Security Number: "_$$GET1^DIQ(2,DFN,.09,"I")
"RTN","DGROMAIL",87,0)
 S LINE(5)="Date Of Birth: "_$$FMTE^XLFDT($$GET1^DIQ(2,DFN,.03,"I"))
"RTN","DGROMAIL",88,0)
 S LINE(6)="Integrated Control #: "_$$GET1^DIQ(2,DFN,991.01,"I")
"RTN","DGROMAIL",89,0)
 ;
"RTN","DGROMAIL",90,0)
 S DGXMTXT=$NA(TEXT)
"RTN","DGROMAIL",91,0)
 D BLDMSG(.LINE,DGXMTXT)
"RTN","DGROMAIL",92,0)
 D SNDMSG(DGXMTXT,"DG REGISTER ONCE",MPIFL)
"RTN","DGROMAIL",93,0)
 Q
"RTN","DGROMAIL",94,0)
 ;
"RTN","DGROMAIL",95,0)
BLDMSG(LINE,DGXMTXT) ;build MailMan message array
"RTN","DGROMAIL",96,0)
 ;
"RTN","DGROMAIL",97,0)
 ;  Input:
"RTN","DGROMAIL",98,0)
 ;    LINE - message array
"RTN","DGROMAIL",99,0)
 ;
"RTN","DGROMAIL",100,0)
 ;  Output:
"RTN","DGROMAIL",101,0)
 ;    DGXMTXT - array of MailMan text lines
"RTN","DGROMAIL",102,0)
 ;
"RTN","DGROMAIL",103,0)
 N DGLIN   ;line counter
"RTN","DGROMAIL",104,0)
 N DGMAX   ;maximum line length
"RTN","DGROMAIL",105,0)
 N DGCNT   ;counter
"RTN","DGROMAIL",106,0)
 ;
"RTN","DGROMAIL",107,0)
 S DGLIN=0
"RTN","DGROMAIL",108,0)
 S DGMAX=65
"RTN","DGROMAIL",109,0)
 ;
"RTN","DGROMAIL",110,0)
 S DGCNT=0 F  S DGCNT=$O(LINE(DGCNT)) Q:'DGCNT  D
"RTN","DGROMAIL",111,0)
 . D ADDLINE("",0,DGMAX,.DGLIN,DGXMTXT)
"RTN","DGROMAIL",112,0)
 . D ADDLINE(LINE(DGCNT),0,DGMAX,.DGLIN,DGXMTXT)
"RTN","DGROMAIL",113,0)
 ;
"RTN","DGROMAIL",114,0)
 D ADDLINE("",0,DGMAX,.DGLIN,DGXMTXT)
"RTN","DGROMAIL",115,0)
 Q
"RTN","DGROMAIL",116,0)
 ;
"RTN","DGROMAIL",117,0)
ADDLINE(DGTEXT,DGINDENT,DGMAXLEN,DGCNT,DGXMTXT) ;add text line to message array
"RTN","DGROMAIL",118,0)
 ;
"RTN","DGROMAIL",119,0)
 ;  Input:
"RTN","DGROMAIL",120,0)
 ;     DGTEXT - text string
"RTN","DGROMAIL",121,0)
 ;   DGINDENT - number of spaces to insert at start of line
"RTN","DGROMAIL",122,0)
 ;   DGMAXLEN - maximum desired line length (default: 60)
"RTN","DGROMAIL",123,0)
 ;      DGCNT - line number passed by reference
"RTN","DGROMAIL",124,0)
 ;
"RTN","DGROMAIL",125,0)
 ;  Output:
"RTN","DGROMAIL",126,0)
 ;    DGXMTXT - array of text strings
"RTN","DGROMAIL",127,0)
 ;
"RTN","DGROMAIL",128,0)
 N DGAVAIL  ;available space for text
"RTN","DGROMAIL",129,0)
 N DGLINE   ;truncated text
"RTN","DGROMAIL",130,0)
 N DGLOC    ;location of space character
"RTN","DGROMAIL",131,0)
 N DGPAD    ;space indent
"RTN","DGROMAIL",132,0)
 ;
"RTN","DGROMAIL",133,0)
 S DGTEXT=$G(DGTEXT)
"RTN","DGROMAIL",134,0)
 S DGINDENT=+$G(DGINDENT)
"RTN","DGROMAIL",135,0)
 S DGMAXLEN=+$G(DGMAXLEN)
"RTN","DGROMAIL",136,0)
 S:'DGMAXLEN DGMAXLEN=60
"RTN","DGROMAIL",137,0)
 I DGINDENT>(DGMAXLEN-1) S DGINDENT=0
"RTN","DGROMAIL",138,0)
 S DGCNT=$G(DGCNT,0)  ;default to 0
"RTN","DGROMAIL",139,0)
 ;
"RTN","DGROMAIL",140,0)
 S DGPAD=$$REPEAT^XLFSTR(" ",DGINDENT)
"RTN","DGROMAIL",141,0)
 ;
"RTN","DGROMAIL",142,0)
 ;determine availaible space for text
"RTN","DGROMAIL",143,0)
 S DGAVAIL=(DGMAXLEN-DGINDENT)
"RTN","DGROMAIL",144,0)
 F  D  Q:('$L(DGTEXT))
"RTN","DGROMAIL",145,0)
 . ;
"RTN","DGROMAIL",146,0)
 . ;find potential line break
"RTN","DGROMAIL",147,0)
 . S DGLOC=$L($E(DGTEXT,1,DGAVAIL)," ")
"RTN","DGROMAIL",148,0)
 . ;
"RTN","DGROMAIL",149,0)
 . ;break a line that is too long when it has potential line breaks
"RTN","DGROMAIL",150,0)
 . I $L(DGTEXT)>DGAVAIL,DGLOC D
"RTN","DGROMAIL",151,0)
 . . S DGLINE=$P(DGTEXT," ",1,$S(DGLOC>1:DGLOC-1,1:1))
"RTN","DGROMAIL",152,0)
 . . S DGTEXT=$P(DGTEXT," ",$S(DGLOC>1:DGLOC,1:DGLOC+1),$L(DGTEXT," "))
"RTN","DGROMAIL",153,0)
 . E  D
"RTN","DGROMAIL",154,0)
 . . S DGLINE=DGTEXT,DGTEXT=""
"RTN","DGROMAIL",155,0)
 . ;
"RTN","DGROMAIL",156,0)
 . S DGCNT=DGCNT+1
"RTN","DGROMAIL",157,0)
 . S @DGXMTXT@(DGCNT)=DGPAD_DGLINE
"RTN","DGROMAIL",158,0)
 Q
"RTN","DGROMAIL",159,0)
 ;
"RTN","DGROMAIL",160,0)
SNDMSG(DGXMTXT,MAILGRP,MPIFL) ;send the MailMan message
"RTN","DGROMAIL",161,0)
 ;
"RTN","DGROMAIL",162,0)
 ;  Input:
"RTN","DGROMAIL",163,0)
 ;    DGXMTXT - name of message text array in closed format
"RTN","DGROMAIL",164,0)
 ;
"RTN","DGROMAIL",165,0)
 ;  Output:
"RTN","DGROMAIL",166,0)
 ;    none
"RTN","DGROMAIL",167,0)
 ;
"RTN","DGROMAIL",168,0)
 N DIFROM  ;protect FM package
"RTN","DGROMAIL",169,0)
 N XMDUZ   ;sender
"RTN","DGROMAIL",170,0)
 N XMSUB   ;message subject
"RTN","DGROMAIL",171,0)
 N XMTEXT  ;name of message text array in open format
"RTN","DGROMAIL",172,0)
 N XMY     ;recipient array
"RTN","DGROMAIL",173,0)
 N XMZ     ;returned message number
"RTN","DGROMAIL",174,0)
 ;
"RTN","DGROMAIL",175,0)
 S XMDUZ="DG Register Once Module"
"RTN","DGROMAIL",176,0)
 S XMSUB="DG REGISTER ONCE MESSAGE"
"RTN","DGROMAIL",177,0)
 S XMTEXT=$$OREF^DILF(DGXMTXT)
"RTN","DGROMAIL",178,0)
 S XMY("G."_MAILGRP)=""
"RTN","DGROMAIL",179,0)
 I '$G(MPIFL) S XMY(DUZ)=""
"RTN","DGROMAIL",180,0)
 D ^XMD
"RTN","DGROMAIL",181,0)
 Q
"RTN","DGROUT")
0^18^B14985839
"RTN","DGROUT",1,0)
DGROUT ;DJH/AMA - ROM UTILITIES ; 07 Jul 2003  4:02 PM
"RTN","DGROUT",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROUT",3,0)
 ;
"RTN","DGROUT",4,0)
 Q   ;no direct entry
"RTN","DGROUT",5,0)
 ;
"RTN","DGROUT",6,0)
MPIOK(DGDFN,DGICN,DGLST) ;return non-local LST and ICN
"RTN","DGROUT",7,0)
 ;This function retrieves an ICN given a pointer to the PATIENT (#2)
"RTN","DGROUT",8,0)
 ;file for a patient.  When the ICN is not local and the local site
"RTN","DGROUT",9,0)
 ;is not the Last Site Treated (LST), the LST is retrieved as a
"RTN","DGROUT",10,0)
 ;pointer to the INSTITUTION (#4) file.
"RTN","DGROUT",11,0)
 ;  Called from SNDQRY^DGROHLR
"RTN","DGROUT",12,0)
 ;
"RTN","DGROUT",13,0)
 ;  Supported DBIA #2701:  The supported DBIA is used to access MPI
"RTN","DGROUT",14,0)
 ;                         APIs to retrieve ICN, determine if ICN
"RTN","DGROUT",15,0)
 ;                         is local and if site is LST.
"RTN","DGROUT",16,0)
 ;  Supported DBIA #2702:  The supported DBIA is used to retrieve the
"RTN","DGROUT",17,0)
 ;                         MPI node from the PATIENT (#2) file.
"RTN","DGROUT",18,0)
 ;
"RTN","DGROUT",19,0)
 ;  Input:
"RTN","DGROUT",20,0)
 ;    DGDFN - IEN of patient in PATIENT (#2) file
"RTN","DGROUT",21,0)
 ;    DGICN - passed by reference to contain national ICN
"RTN","DGROUT",22,0)
 ;    DGLST - passed by reference to contain LST
"RTN","DGROUT",23,0)
 ;
"RTN","DGROUT",24,0)
 ;  Output:
"RTN","DGROUT",25,0)
 ;   Function Value - 1 on national ICN and non-local LST, 0 on failure
"RTN","DGROUT",26,0)
 ;            DGICN - Patient's Integrated Control Number
"RTN","DGROUT",27,0)
 ;            DGLST - Pointer to INSTITUTION (#4) file for LST if LST
"RTN","DGROUT",28,0)
 ;                    is not local, undefined otherwise.
"RTN","DGROUT",29,0)
 ;
"RTN","DGROUT",30,0)
 N DGRSLT
"RTN","DGROUT",31,0)
 S DGRSLT=0
"RTN","DGROUT",32,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,"MPI")) D
"RTN","DGROUT",33,0)
 . S DGICN=$$GETICN^MPIF001(DGDFN)
"RTN","DGROUT",34,0)
 . ;
"RTN","DGROUT",35,0)
 . ;ICN must be valid
"RTN","DGROUT",36,0)
 . I (DGICN'>0) D  Q
"RTN","DGROUT",37,0)
 . .S DGMSG(1)="The query to the LST has been terminated because required"
"RTN","DGROUT",38,0)
 . .S DGMSG(2)="information was not provided by the MPI."
"RTN","DGROUT",39,0)
 . .S DGMSG(3)=""
"RTN","DGROUT",40,0)
 . .D EN^DDIOL(.DGMSG) R A:5
"RTN","DGROUT",41,0)
 . ;
"RTN","DGROUT",42,0)
 . ;ICN must not be local
"RTN","DGROUT",43,0)
 . I $$IFLOCAL^MPIF001(DGDFN) D  Q
"RTN","DGROUT",44,0)
 . .S DGMSG(1)="The query to the LST has been terminated because required"
"RTN","DGROUT",45,0)
 . .S DGMSG(2)="information was not provided by the MPI."
"RTN","DGROUT",46,0)
 . .S DGMSG(3)=""
"RTN","DGROUT",47,0)
 . .D EN^DDIOL(.DGMSG) R A:5
"RTN","DGROUT",48,0)
 . ;
"RTN","DGROUT",49,0)
 . ;Get LST from Treating Facility List
"RTN","DGROUT",50,0)
 . S DGLST=$$TFL(DGDFN)
"RTN","DGROUT",51,0)
 . ;
"RTN","DGROUT",52,0)
 . I (DGLST'>0) D  Q
"RTN","DGROUT",53,0)
 . .S DGMSG(1)="The query to the LST has been terminated because required"
"RTN","DGROUT",54,0)
 . .S DGMSG(2)="information was not provided by the MPI."
"RTN","DGROUT",55,0)
 . .S DGMSG(3)=""
"RTN","DGROUT",56,0)
 . .D EN^DDIOL(.DGMSG) R A:5
"RTN","DGROUT",57,0)
 . ;
"RTN","DGROUT",58,0)
 . S DGRSLT=1
"RTN","DGROUT",59,0)
 Q DGRSLT
"RTN","DGROUT",60,0)
 ;
"RTN","DGROUT",61,0)
TFL(DFN) ;
"RTN","DGROUT",62,0)
 ;Retrieve Last Site Treated from the Treating Facility List ^DGCN(391.91
"RTN","DGROUT",63,0)
 ;This function will retrieve the most recent treatment site
"RTN","DGROUT",64,0)
 ;from the Treating Facility List (TFL) received from the MPI
"RTN","DGROUT",65,0)
 ;
"RTN","DGROUT",66,0)
 ;  Input:
"RTN","DGROUT",67,0)
 ;    DFN - (required) IEN of patient in PATIENT (#2) File
"RTN","DGROUT",68,0)
 ;
"RTN","DGROUT",69,0)
 ;  Output:
"RTN","DGROUT",70,0)
 ;    Function value - Facility IEN on success, 0 on failure
"RTN","DGROUT",71,0)
 ;
"RTN","DGROUT",72,0)
 N RSLT       ;Result returned from call
"RTN","DGROUT",73,0)
 N QFL        ;Quit flag
"RTN","DGROUT",74,0)
 N TFLDR      ;Treating Facility List Record Number
"RTN","DGROUT",75,0)
 N DATA       ;Array of TFL data
"RTN","DGROUT",76,0)
 N RDATA      ;Array of Treating Facilities arranged by date and TFLDR
"RTN","DGROUT",77,0)
 N DATE,TFL
"RTN","DGROUT",78,0)
 ;
"RTN","DGROUT",79,0)
 S (RSLT,QFL)=0
"RTN","DGROUT",80,0)
 ;Check to see if there is a TFL for this patient.
"RTN","DGROUT",81,0)
 ;If not exit and return -1 to call.
"RTN","DGROUT",82,0)
 I '$D(^DGCN(391.91,"B",DFN)) G EXITTFL
"RTN","DGROUT",83,0)
 ;
"RTN","DGROUT",84,0)
 ;Go through the "B" index of TFL file and retrieve
"RTN","DGROUT",85,0)
 ;record numbers for the patient DFN.
"RTN","DGROUT",86,0)
 S TFLDR="" F  S TFLDR=$O(^DGCN(391.91,"B",DFN,TFLDR)) Q:TFLDR=""  D
"RTN","DGROUT",87,0)
 . ;Retrieve data from record and store in DATA array by record number.
"RTN","DGROUT",88,0)
 . S DATA(TFLDR)=$G(^DGCN(391.91,TFLDR,0))
"RTN","DGROUT",89,0)
 . ;Extract DATE from 3rd piece of record
"RTN","DGROUT",90,0)
 . S DATE=$P(DATA(TFLDR),"^",3)
"RTN","DGROUT",91,0)
 . ;Quit if DATE is null
"RTN","DGROUT",92,0)
 . Q:DATE=""
"RTN","DGROUT",93,0)
 . ;Get Station Number using the facility pointer to the Institution (#4) file
"RTN","DGROUT",94,0)
 . S FAC=$P(DATA(TFLDR),"^",2)
"RTN","DGROUT",95,0)
 . S FAC=$$STA^XUAF4(FAC) Q:FAC=""
"RTN","DGROUT",96,0)
 . ;Build RDATA array using the DATE and TFLDR
"RTN","DGROUT",97,0)
 . S RDATA(DATE,TFLDR)=FAC
"RTN","DGROUT",98,0)
 ;Exit if the RDATA array does not exist.
"RTN","DGROUT",99,0)
 G:'$D(RDATA) EXITTFL
"RTN","DGROUT",100,0)
 ;
"RTN","DGROUT",101,0)
 ;Reverse order through the RDATA array (start with the latest date).
"RTN","DGROUT",102,0)
 ;Extract the treating facility from the RDATA array.
"RTN","DGROUT",103,0)
 ;Check the facility against local facility number:  if they are
"RTN","DGROUT",104,0)
 ;the same, then get the next facility.  (Should never happen)
"RTN","DGROUT",105,0)
 S DATE="" F  S DATE=$O(RDATA(DATE),-1) Q:DATE=""  D  Q:QFL=1
"RTN","DGROUT",106,0)
 . S TFL="" F  S TFL=$O(RDATA(DATE,TFL)) Q:TFL=""  D  Q:QFL=1
"RTN","DGROUT",107,0)
 . . S FAC=RDATA(DATE,TFL) I FAC=$G(DIV(0)) Q
"RTN","DGROUT",108,0)
 . . ;If the facility is not the current facility, then set RSLT to the facility and quit
"RTN","DGROUT",109,0)
 . . S RSLT=FAC,QFL=1  ;set QFL to 1 to stop going through the RDATA array
"RTN","DGROUT",110,0)
EXITTFL Q RSLT  ;Return the LST to the calling routine
"RTN","DGROUT2")
0^19^B3162566
"RTN","DGROUT2",1,0)
DGROUT2 ;DJH/AMA - ROM UTILITIES CONTINUED ; 24 Jun 2003  3:53 PM
"RTN","DGROUT2",2,0)
 ;;5.3;Registration;**533**;Aug 13, 1993
"RTN","DGROUT2",3,0)
 ;
"RTN","DGROUT2",4,0)
 ; This routine contains generic calls for use throughout DGRO*.
"RTN","DGROUT2",5,0)
 ;
"RTN","DGROUT2",6,0)
 QUIT   ;no direct entry
"RTN","DGROUT2",7,0)
 ;
"RTN","DGROUT2",8,0)
GETPAT(DGDFN,DGPAT) ;retrieve patient identifying information
"RTN","DGROUT2",9,0)
 ;Used to obtain identifying information for a patient in the
"RTN","DGROUT2",10,0)
 ;PATIENT (#2) file and place it in an array format.
"RTN","DGROUT2",11,0)
 ;  Called from BLDQRY^DGROHLQ
"RTN","DGROUT2",12,0)
 ;
"RTN","DGROUT2",13,0)
 ; NOTE: Direct global reference of patient's zero node in the
"RTN","DGROUT2",14,0)
 ;       PATIENT (#2) file is supported by DBIA #10035
"RTN","DGROUT2",15,0)
 ;
"RTN","DGROUT2",16,0)
 ;  Input:
"RTN","DGROUT2",17,0)
 ;    DGDFN - (required) ien of patient in PATIENT (#2) file
"RTN","DGROUT2",18,0)
 ;
"RTN","DGROUT2",19,0)
 ;  Output:
"RTN","DGROUT2",20,0)
 ;    Function Value - returns 1 on success, 0 on failure
"RTN","DGROUT2",21,0)
 ;    DGPAT - output array containing patient identifying information
"RTN","DGROUT2",22,0)
 ;            on success, pass by reference.  Array subscripts are:
"RTN","DGROUT2",23,0)
 ;              "DFN"  - ien PATIENT (#2) file
"RTN","DGROUT2",24,0)
 ;              "NAME" - patient name
"RTN","DGROUT2",25,0)
 ;              "SSN"  - patient Social Security Number
"RTN","DGROUT2",26,0)
 ;              "DOB"  - patient date of birth (FM format)
"RTN","DGROUT2",27,0)
 ;              "SEX"  - patient sex
"RTN","DGROUT2",28,0)
 ;
"RTN","DGROUT2",29,0)
 N DGNODE,RESULT
"RTN","DGROUT2",30,0)
 ;
"RTN","DGROUT2",31,0)
 S RESULT=0
"RTN","DGROUT2",32,0)
 I $G(DGDFN)>0,$D(^DPT(DGDFN,0)) D
"RTN","DGROUT2",33,0)
 . S DGPAT("DFN")=DGDFN
"RTN","DGROUT2",34,0)
 . S DGPAT("NAME")=$$GET1^DIQ(2,DGDFN,.01)
"RTN","DGROUT2",35,0)
 . S DGPAT("SEX")=$$GET1^DIQ(2,DGDFN,.02)
"RTN","DGROUT2",36,0)
 . S DGPAT("DOB")=$$GET1^DIQ(2,DGDFN,.03)
"RTN","DGROUT2",37,0)
 . S DGPAT("SSN")=$$GET1^DIQ(2,DGDFN,.09)
"RTN","DGROUT2",38,0)
 . S RESULT=1  ;success
"RTN","DGROUT2",39,0)
 ;
"RTN","DGROUT2",40,0)
 Q RESULT
"RTN","DGROUT2",41,0)
 ;
"RTN","DGROUT2",42,0)
GETDFN(DGICN,DGDOB,DGSSN) ;Convert ICN to DFN after verifying DOB and SSN
"RTN","DGROUT2",43,0)
 ;Called from RCVQRY^DGROHLR
"RTN","DGROUT2",44,0)
 ;  Supported DBIA #2701:  The supported DBIA is used to retrieve the
"RTN","DGROUT2",45,0)
 ;                         pointer (DFN) to the PATIENT (#2) file for a
"RTN","DGROUT2",46,0)
 ;                         given ICN.
"RTN","DGROUT2",47,0)
 ;
"RTN","DGROUT2",48,0)
 ;  Input:
"RTN","DGROUT2",49,0)
 ;    DGICN - Integrated Control Number with or without checksum
"RTN","DGROUT2",50,0)
 ;    DGDOB - Date of Birth in FileMan format
"RTN","DGROUT2",51,0)
 ;    DGSSN - Social Security Number with no delimiters
"RTN","DGROUT2",52,0)
 ;
"RTN","DGROUT2",53,0)
 ;  Output:
"RTN","DGROUT2",54,0)
 ;   Function Value - DFN on success, 0 on failure
"RTN","DGROUT2",55,0)
 ;
"RTN","DGROUT2",56,0)
 N DGDFN   ;pointer to patient
"RTN","DGROUT2",57,0)
 N DGDPT   ;patient data array
"RTN","DGROUT2",58,0)
 N DGRSLT  ;function value
"RTN","DGROUT2",59,0)
 ;
"RTN","DGROUT2",60,0)
 S DGRSLT=0
"RTN","DGROUT2",61,0)
 S DGICN=+$G(DGICN)
"RTN","DGROUT2",62,0)
 S DGDOB=+$G(DGDOB)
"RTN","DGROUT2",63,0)
 S DGSSN=+$G(DGSSN)
"RTN","DGROUT2",64,0)
 I DGICN,DGDOB,DGSSN D  ;drops out of block on first failure
"RTN","DGROUT2",65,0)
 . S DGDFN=+$$GETDFN^MPIF001(DGICN)
"RTN","DGROUT2",66,0)
 . Q:(DGDFN'>0)
"RTN","DGROUT2",67,0)
 . ;Q:('$$GETPAT(DGDFN,.DGDPT))
"RTN","DGROUT2",68,0)
 . ;Q:(DGDOB'=+DGDPT("DOB"))
"RTN","DGROUT2",69,0)
 . ;Q:(DGSSN'=+DGDPT("SSN"))
"RTN","DGROUT2",70,0)
 . S DGRSLT=DGDFN
"RTN","DGROUT2",71,0)
 Q DGRSLT
"SEC","^DIC",391.23,391.23,0,"AUDIT")
@
"SEC","^DIC",391.23,391.23,0,"DD")
@
"SEC","^DIC",391.23,391.23,0,"DEL")
@
"SEC","^DIC",391.23,391.23,0,"LAYGO")
@
"SEC","^DIC",391.23,391.23,0,"RD")
@
"SEC","^DIC",391.23,391.23,0,"WR")
@
"VER")
8.0^22.0
"^DD",391.23,391.23,0)
FIELD^^4^5
"^DD",391.23,391.23,0,"DT")
3030718
"^DD",391.23,391.23,0,"IX","B",391.23,.01)

"^DD",391.23,391.23,0,"NM","DG REGISTER ONCE FIELD DEFINITION")

"^DD",391.23,391.23,0,"VRPK")
DG
"^DD",391.23,391.23,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",391.23,391.23,.01,1,0)
^.1
"^DD",391.23,391.23,.01,1,1,0)
391.23^B
"^DD",391.23,391.23,.01,1,1,1)
S ^DGRO(391.23,"B",$E(X,1,30),DA)=""
"^DD",391.23,391.23,.01,1,1,2)
K ^DGRO(391.23,"B",$E(X,1,30),DA)
"^DD",391.23,391.23,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",391.23,391.23,1,0)
FILE NUMBER^RNJ13,5^^0;2^K:+X'=X!(X>9999999)!(X<0)!(X?.E1"."6.N) X
"^DD",391.23,391.23,1,3)
Type a number between 0 and 9999999, 5 Decimal Digits
"^DD",391.23,391.23,1,"DT")
3030718
"^DD",391.23,391.23,2,0)
FIELD NUMBER^RNJ15,6^^0;3^K:+X'=X!(X>99999999)!(X<0)!(X?.E1"."7.N) X
"^DD",391.23,391.23,2,3)
Type a number between 0 and 99999999, 6 Decimal Digits
"^DD",391.23,391.23,2,"DT")
3030827
"^DD",391.23,391.23,3,0)
FIELD DESCRIPTION^F^^0;4^K:$L(X)>30!($L(X)<3) X
"^DD",391.23,391.23,3,3)
Answer must be 3-30 characters in length
"^DD",391.23,391.23,3,"DT")
3030827
"^DD",391.23,391.23,4,0)
Disable Field^S^0:No;1:Yes;^0;5^Q
"^DD",391.23,391.23,4,3)
Enter Yes to disable the entry of this field from the LST.
"^DD",391.23,391.23,4,"DT")
3030718
"^DIC",391.23,391.23,0)
DG REGISTER ONCE FIELD DEFINITION^391.23
"^DIC",391.23,391.23,0,"GL")
^DGRO(391.23,
"^DIC",391.23,"B","DG REGISTER ONCE FIELD DEFINITION",391.23)

**END**
**END**
