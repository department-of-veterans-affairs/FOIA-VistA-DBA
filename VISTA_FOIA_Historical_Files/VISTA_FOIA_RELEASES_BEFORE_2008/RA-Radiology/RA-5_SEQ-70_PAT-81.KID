Released RA*5*81 SEQ #70
Extracted from mail message
**KIDS**:RA*5.0*81^

**INSTALL NAME**
RA*5.0*81
"BLD",6301,0)
RA*5.0*81^RADIOLOGY/NUCLEAR MEDICINE^0^3070425^y
"BLD",6301,1,0)
^^2^2^3061023^
"BLD",6301,1,1,0)
Please refer to the patch description in FORUM regarding the installation
"BLD",6301,1,2,0)
of RA*5.0*81.
"BLD",6301,4,0)
^9.64PA^79.7^1
"BLD",6301,4,79.7,0)
79.7
"BLD",6301,4,79.7,222)
y^y^f^^^^n
"BLD",6301,4,"B",79.7,79.7)

"BLD",6301,6.3)
12
"BLD",6301,"ABPKG")
n
"BLD",6301,"KRN",0)
^9.67PA^8989.52^19
"BLD",6301,"KRN",.4,0)
.4
"BLD",6301,"KRN",.401,0)
.401
"BLD",6301,"KRN",.402,0)
.402
"BLD",6301,"KRN",.403,0)
.403
"BLD",6301,"KRN",.5,0)
.5
"BLD",6301,"KRN",.84,0)
.84
"BLD",6301,"KRN",3.6,0)
3.6
"BLD",6301,"KRN",3.8,0)
3.8
"BLD",6301,"KRN",9.2,0)
9.2
"BLD",6301,"KRN",9.8,0)
9.8
"BLD",6301,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",6301,"KRN",9.8,"NM",1,0)
RAHLTCPB^^0^B61371898
"BLD",6301,"KRN",9.8,"NM",2,0)
RAHLO4^^0^B41347235
"BLD",6301,"KRN",9.8,"NM",3,0)
RAHLRPC^^0^B13841696
"BLD",6301,"KRN",9.8,"NM",4,0)
RAHLRPT^^0^B70016688
"BLD",6301,"KRN",9.8,"NM",5,0)
RAHLO3^^0^B20660605
"BLD",6301,"KRN",9.8,"NM",6,0)
RAHLRU^^0^B28042615
"BLD",6301,"KRN",9.8,"NM","B","RAHLO3",5)

"BLD",6301,"KRN",9.8,"NM","B","RAHLO4",2)

"BLD",6301,"KRN",9.8,"NM","B","RAHLRPC",3)

"BLD",6301,"KRN",9.8,"NM","B","RAHLRPT",4)

"BLD",6301,"KRN",9.8,"NM","B","RAHLRU",6)

"BLD",6301,"KRN",9.8,"NM","B","RAHLTCPB",1)

"BLD",6301,"KRN",19,0)
19
"BLD",6301,"KRN",19.1,0)
19.1
"BLD",6301,"KRN",101,0)
101
"BLD",6301,"KRN",409.61,0)
409.61
"BLD",6301,"KRN",771,0)
771
"BLD",6301,"KRN",870,0)
870
"BLD",6301,"KRN",8989.51,0)
8989.51
"BLD",6301,"KRN",8989.52,0)
8989.52
"BLD",6301,"KRN",8994,0)
8994
"BLD",6301,"KRN","B",.4,.4)

"BLD",6301,"KRN","B",.401,.401)

"BLD",6301,"KRN","B",.402,.402)

"BLD",6301,"KRN","B",.403,.403)

"BLD",6301,"KRN","B",.5,.5)

"BLD",6301,"KRN","B",.84,.84)

"BLD",6301,"KRN","B",3.6,3.6)

"BLD",6301,"KRN","B",3.8,3.8)

"BLD",6301,"KRN","B",9.2,9.2)

"BLD",6301,"KRN","B",9.8,9.8)

"BLD",6301,"KRN","B",19,19)

"BLD",6301,"KRN","B",19.1,19.1)

"BLD",6301,"KRN","B",101,101)

"BLD",6301,"KRN","B",409.61,409.61)

"BLD",6301,"KRN","B",771,771)

"BLD",6301,"KRN","B",870,870)

"BLD",6301,"KRN","B",8989.51,8989.51)

"BLD",6301,"KRN","B",8989.52,8989.52)

"BLD",6301,"KRN","B",8994,8994)

"BLD",6301,"QUES",0)
^9.62^^
"BLD",6301,"REQB",0)
^9.611^2^2
"BLD",6301,"REQB",1,0)
RA*5.0*82^2
"BLD",6301,"REQB",2,0)
HL*1.6*132^2
"BLD",6301,"REQB","B","HL*1.6*132",2)

"BLD",6301,"REQB","B","RA*5.0*82",1)

"FIA",79.7)
RAD/NUC MED HL7 APPLICATION EXCEPTION
"FIA",79.7,0)
^RA(79.7,
"FIA",79.7,0,0)
79.7P
"FIA",79.7,0,1)
y^y^f^^^^n
"FIA",79.7,0,10)

"FIA",79.7,0,11)

"FIA",79.7,0,"RLRO")

"FIA",79.7,0,"VR")
5.0^RA
"FIA",79.7,79.7)
0
"FIA",79.7,79.72)
0
"FIA",79.7,79.721)
0
"FIA",79.7,79.7211)
0
"FIA",79.7,79.72114)
0
"MBREQ")
0
"PKG",18,-1)
1^1
"PKG",18,0)
RADIOLOGY/NUCLEAR MEDICINE^RA^REGISTERS PATIENTS,RECORDS EXAMS,PROFILES,AMIS REPORTS
"PKG",18,20,0)
^9.402P^^
"PKG",18,22,0)
^9.49I^1^1
"PKG",18,22,1,0)
5.0^3051109^2980407^50
"PKG",18,22,1,"PAH",1,0)
81^3070425
"PKG",18,22,1,"PAH",1,1,0)
^^2^2^3070425
"PKG",18,22,1,"PAH",1,1,1,0)
Please refer to the patch description in FORUM regarding the installation
"PKG",18,22,1,"PAH",1,1,2,0)
of RA*5.0*81.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","RAHLO3")
0^5^B20660605^B8588948
"RTN","RAHLO3",1,0)
RAHLO3 ;HIRMFO/GJC-Process data set from the bridge program ;11/18/97  12:13
"RTN","RAHLO3",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**4,81**;Mar 16, 1998;Build 12
"RTN","RAHLO3",3,0)
RPTSTAT ; Determine the status to set this report to.
"RTN","RAHLO3",4,0)
 K RARPTSTS S:$D(RAESIG) RARPTSTS="V" Q:$D(RARPTSTS)
"RTN","RAHLO3",5,0)
 ; $D(RAESIG)=0 now figure out report status
"RTN","RAHLO3",6,0)
 S RASTAT=$E($G(^TMP("RARPT-REC",$J,RASUB,"RASTAT")))
"RTN","RAHLO3",7,0)
 I RASTAT="A" S RARPTSTS="V" Q
"RTN","RAHLO3",8,0)
 I RASTAT]"",("FR"[RASTAT) D
"RTN","RAHLO3",9,0)
 . S:RASTAT="F" RARPTSTS="V" Q:$D(RARPTSTS)
"RTN","RAHLO3",10,0)
 . ; do we allow 'Released/Unverified' reports for this location?
"RTN","RAHLO3",11,0)
 . S RARPTSTS=$S($P($G(^RA(79.1,RAMLC,0)),"^",17)="Y":"R",1:"D")
"RTN","RAHLO3",12,0)
 . Q
"RTN","RAHLO3",13,0)
 ; if no status, & there's physician data (verifier/primary),set status
"RTN","RAHLO3",14,0)
 I '$D(RARPTSTS),($G(RAVERF)!$G(^TMP("RARPT-REC",$J,RASUB,"RASTAFF"))!$G(^("RARESIDENT"))) S RARPTSTS=$S($P($G(^RA(79.1,RAMLC,0)),"^",17)="Y":"R",1:"D")
"RTN","RAHLO3",15,0)
 ; if still no status, default to draft
"RTN","RAHLO3",16,0)
 S:'$D(RARPTSTS) RARPTSTS="D"
"RTN","RAHLO3",17,0)
 K RASTAT
"RTN","RAHLO3",18,0)
 Q
"RTN","RAHLO3",19,0)
TEXT(X) ; Check if the Impression Text and the Report Text contain
"RTN","RAHLO3",20,0)
 ; valid characters.
"RTN","RAHLO3",21,0)
 ; Input : X = "I" if Impr Text is being checked, "R" if Rpt Text
"RTN","RAHLO3",22,0)
 ; Output: 0=invalid, 1=valid
"RTN","RAHLO3",23,0)
 N CNT,DATA,FLAG,I,I1,J,Y S (FLAG,I)=0
"RTN","RAHLO3",24,0)
 F  S I=$O(^TMP("RARPT-REC",$J,RASUB,$S(X="I":"RAIMP",1:"RATXT"),I)) Q:I'>0  D  Q:FLAG
"RTN","RAHLO3",25,0)
 . S CNT=0,DATA=$G(^TMP("RARPT-REC",$J,RASUB,$S(X="I":"RAIMP",1:"RATXT"),I)) Q:DATA']""
"RTN","RAHLO3",26,0)
 . F J=1:1:$L(DATA) D  Q:FLAG
"RTN","RAHLO3",27,0)
 .. S:$E(DATA,J)?1AN CNT=CNT+1
"RTN","RAHLO3",28,0)
 .. S:$E(DATA,J)'?1AN&(CNT>0) CNT=0
"RTN","RAHLO3",29,0)
 .. S:CNT=2 FLAG=1
"RTN","RAHLO3",30,0)
 .. Q
"RTN","RAHLO3",31,0)
 . Q
"RTN","RAHLO3",32,0)
 Q FLAG
"RTN","RAHLO3",33,0)
 ;
"RTN","RAHLO3",34,0)
VERCHK ; Check if our provider can verify reports.
"RTN","RAHLO3",35,0)
 ; Examine the following four (4) conditions if $D(RAESIG)
"RTN","RAHLO3",36,0)
 ; 1) Does this person have a resident or staff classification?
"RTN","RAHLO3",37,0)
 ; 2) If a resident, does the division parameter allow resident
"RTN","RAHLO3",38,0)
 ;    verification?
"RTN","RAHLO3",39,0)
 ; 3) Does this person hold the "RA VERIFY" key?
"RTN","RAHLO3",40,0)
 ; 4) Is this person an activate Rad/Nuc Med user?
"RTN","RAHLO3",41,0)
 ; 5) Can this person verify reports without staff review?
"RTN","RAHLO3",42,0)
 ; If 'No' to any of the above questions, kill RAESIG & set the variable
"RTN","RAHLO3",43,0)
 ; RAERR to the appropriate error message.
"RTN","RAHLO3",44,0)
 I '$D(^VA(200,"ARC","R",+$G(RAVERF))),('$D(^VA(200,"ARC","S",+$G(RAVERF)))) D  Q
"RTN","RAHLO3",45,0)
 . ; neither a resident or staff
"RTN","RAHLO3",46,0)
 . K RAESIG S RAERR="Provider not classified as resident or staff."
"RTN","RAHLO3",47,0)
 . Q
"RTN","RAHLO3",48,0)
 I $D(^VA(200,"ARC","R",+$G(RAVERF))),('$P(RAMDV,"^",18)) D  Q
"RTN","RAHLO3",49,0)
 . ; residents can't verify reports linked to this division
"RTN","RAHLO3",50,0)
 . K RAESIG S RAERR="Residents are not permitted to verify reports."
"RTN","RAHLO3",51,0)
 . Q
"RTN","RAHLO3",52,0)
 I '$D(^XUSEC("RA VERIFY",+$G(RAVERF))) D  Q
"RTN","RAHLO3",53,0)
 . ; verifier MUST have the RA VERIFY key.
"RTN","RAHLO3",54,0)
 . K RAESIG S RAERR="Provider does not meet security requirements to verify report."
"RTN","RAHLO3",55,0)
 . Q
"RTN","RAHLO3",56,0)
 I $P($G(^VA(200,+$G(RAVERF),"RA")),"^",3),($P(^("RA"),"^",3)'>$$DT^XLFDT()) D
"RTN","RAHLO3",57,0)
 . ; Rad/Nuc Med user has been inactivated.
"RTN","RAHLO3",58,0)
 . K RAESIG S RAERR="Inactive Rad/Nuc Med Classification for Interpreting Physician."
"RTN","RAHLO3",59,0)
 . Q
"RTN","RAHLO3",60,0)
 I '$S('$D(^VA(200,+$G(RAVERF),"RA")):1,$P(^("RA"),"^")'="Y":1,1:0) D
"RTN","RAHLO3",61,0)
 . K RAESIG S RAERR="Staff review required to verify report."
"RTN","RAHLO3",62,0)
 . Q
"RTN","RAHLO3",63,0)
 Q
"RTN","RAHLO3",64,0)
VFIER ; Check if the RAVERF string is a partial match to an entry in file
"RTN","RAHLO3",65,0)
 ; 200.  If if is, check to see that is a partial match to only ONE
"RTN","RAHLO3",66,0)
 ; active provider entry in file 200.
"RTN","RAHLO3",67,0)
 I '$L(RAVERF) S RAERR="Missing Provider information" Q
"RTN","RAHLO3",68,0)
 N RAVCNT,RAVIEN,RAVLGTH,RAVPS
"RTN","RAHLO3",69,0)
 S RAVLGTH=$L(RAVERF) ; length of the RAVERF string
"RTN","RAHLO3",70,0)
 S RAVCNT=0,RAVS1=RAVERF,RAVIEN=""
"RTN","RAHLO3",71,0)
 F  S RAVS1=$O(^VA(200,"B",RAVS1)) Q:RAVS1=""!($E(RAVS1,1,RAVLGTH)'=RAVERF)  D  Q:RAVCNT>1
"RTN","RAHLO3",72,0)
 . ; return subscripts that have the RAVERF string as the first
"RTN","RAHLO3",73,0)
 . ; 1 - RAVLGTH chars of RAVS1
"RTN","RAHLO3",74,0)
 . S RAVIEN=0
"RTN","RAHLO3",75,0)
 . F  S RAVIEN=$O(^VA(200,"B",RAVS1,RAVIEN)) Q:RAVIEN'>0  D  Q:RAVCNT>1
"RTN","RAHLO3",76,0)
 .. S RAVPS=$G(^VA(200,RAVIEN,"PS"))
"RTN","RAHLO3",77,0)
 .. S:'$P(RAVPS,"^",4)!($P(RAVPS,"^",4)>DT) RAVCNT=RAVCNT+1
"RTN","RAHLO3",78,0)
 .. I RAVCNT=1,('$D(RAVIEN(RAVCNT))#2) S RAVIEN(RAVCNT)=RAVIEN ; when
"RTN","RAHLO3",79,0)
 .. ; we find the first active provider save the provider ien off
"RTN","RAHLO3",80,0)
 .. ; in a local array.
"RTN","RAHLO3",81,0)
 .. Q
"RTN","RAHLO3",82,0)
 . Q
"RTN","RAHLO3",83,0)
 ; Added for PowerScribe
"RTN","RAHLO3",84,0)
 I RAVIEN']"" D
"RTN","RAHLO3",85,0)
 . ;S RAVIEN=$P(RAVERF,$E(HL("ECH"),4))
"RTN","RAHLO3",86,0)
 . S RAVIEN=+RAVERF
"RTN","RAHLO3",87,0)
 . S RAVPS=$G(^VA(200,RAVIEN,"PS"))
"RTN","RAHLO3",88,0)
 . S:'$P(RAVPS,"^",4)!($P(RAVPS,"^",4)>DT) RAVCNT=RAVCNT+1
"RTN","RAHLO3",89,0)
 . I RAVCNT=1,('$D(RAVIEN(RAVCNT))#2) S RAVIEN(RAVCNT)=RAVIEN
"RTN","RAHLO3",90,0)
 . Q
"RTN","RAHLO3",91,0)
 I RAVCNT=0 S RAERR="Invalid Provider Name" Q  ; partial match not found
"RTN","RAHLO3",92,0)
 I RAVCNT>1 S RAERR="Non-Unique Provider Name" Q  ; >1 partial match
"RTN","RAHLO3",93,0)
 S RAVERF=$G(RAVIEN(1)) S:'RAVERF RAERR="Provider Name Entry Error"
"RTN","RAHLO3",94,0)
 Q
"RTN","RAHLO3",95,0)
ESIG ; Added for COTS E-Sig capability
"RTN","RAHLO3",96,0)
 ;
"RTN","RAHLO3",97,0)
 Q:"FA"'[^TMP(RARRR,$J,RASUB,"RASTAT")!('$D(^("RAVERF")))!($D(^("RAESIG")))
"RTN","RAHLO3",98,0)
 S RADFN=+$G(^TMP(RARRR,$J,RASUB,"RADFN"))
"RTN","RAHLO3",99,0)
 S RADTI=+$G(^TMP(RARRR,$J,RASUB,"RADTI"))
"RTN","RAHLO3",100,0)
 S RADIV=$P($G(^RADPT(RADFN,"DT",RADTI,0)),"^",3)
"RTN","RAHLO3",101,0)
 Q:RADIV=""  ; exam has been deleted - will be rejected
"RTN","RAHLO3",102,0)
 ; Check division parameters for ALLOW E-SIG ON COTS REPORT in file 79
"RTN","RAHLO3",103,0)
 ; for the division that ordered this procedure.
"RTN","RAHLO3",104,0)
 I $P(^RA(79,RADIV,.1),"^",27)["Y" D
"RTN","RAHLO3",105,0)
 . S RAESIG=$$GET1^DIQ(200,RAVERF,20.2)
"RTN","RAHLO3",106,0)
 . S:RAESIG]"" ^TMP(RARRR,$J,RASUB,"RAESIG")=RAESIG
"RTN","RAHLO3",107,0)
 . Q
"RTN","RAHLO3",108,0)
 Q
"RTN","RAHLO4")
0^2^B41347235^B39683908
"RTN","RAHLO4",1,0)
RAHLO4 ;HIRMFO/GJC-File rpt (data from bridge program) ;7/21/99  11:45
"RTN","RAHLO4",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**4,8,81**;Mar 16, 1998;Build 12
"RTN","RAHLO4",3,0)
TASK ; Task ORU message
"RTN","RAHLO4",4,0)
 S ZTDESC="Rad/Nuc Med Compiling HL7 ORU Message",ZTDTH=$H,ZTIO="",ZTRTN="RPT^RAHLRPC",ZTSAVE("RADFN")="",ZTSAVE("RADTI")="",ZTSAVE("RACNI")="",ZTSAVE("RARPT")=""
"RTN","RAHLO4",5,0)
 ;S:$L($G(RANOSEND))&'$O(RAPRSET(RADTI,0)) ZTSAVE("RANOSEND")="" D ^%ZTLOAD
"RTN","RAHLO4",6,0)
 S:$L($G(RANOSEND)) ZTSAVE("RANOSEND")="" D ^%ZTLOAD
"RTN","RAHLO4",7,0)
 K ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE
"RTN","RAHLO4",8,0)
 Q
"RTN","RAHLO4",9,0)
VOICE ; voice dictation auto-print (background process)
"RTN","RAHLO4",10,0)
 Q:$P(^RA(79.1,+$G(RAMLC),0),U,26)'="Y"  ; Voice Dictation Auto-Print
"RTN","RAHLO4",11,0)
 S ZTIO=$$GET1^DIQ(3.5,+$P(^RA(79.1,+$G(RAMLC),0),U,10),.01) ; dev name
"RTN","RAHLO4",12,0)
 Q:ZTIO']""  ; quit if the device does not exist
"RTN","RAHLO4",13,0)
 S ZTDTH=$H,ZTRTN="DQ^RARTR",ZTSAVE("RARPT")=""
"RTN","RAHLO4",14,0)
 S ZTDESC="Rad/Nuc Med voice dictation auto-print"
"RTN","RAHLO4",15,0)
 D ^%ZTLOAD K RAMES,ZTDESC,ZTSK,ZTIO,ZTSAVE,ZTRTN,RASV,ZTDTH
"RTN","RAHLO4",16,0)
 Q
"RTN","RAHLO4",17,0)
FILETST ; is anyone else working on this report?
"RTN","RAHLO4",18,0)
 L +^RARPT(RARPT):1
"RTN","RAHLO4",19,0)
 I '$T S RAERR="This report is being edited by another user" L -^RARPT(RARPT)
"RTN","RAHLO4",20,0)
 Q
"RTN","RAHLO4",21,0)
UPMEM ;copy (prim:dx,stf,res),rpt ien to other members of same print set
"RTN","RAHLO4",22,0)
 ; first clear those fields
"RTN","RAHLO4",23,0)
 K DIE,DA,DR S DA=RACNI,DA(1)=RADTI,DA(2)=RADFN
"RTN","RAHLO4",24,0)
 S DIE="^RADPT("_DA(2)_",""DT"","_DA(1)_",""P"","
"RTN","RAHLO4",25,0)
 S DR="13///@;12///@;15///@" D ^DIE
"RTN","RAHLO4",26,0)
 ; now set those fields based on lead case of printset
"RTN","RAHLO4",27,0)
 S DR="13////"_RA13_";12////"_RA12_";15////"_RA15 D ^DIE K DA,DR,DIE
"RTN","RAHLO4",28,0)
 ; now set the report pointer (uneditable, thus must hard set)
"RTN","RAHLO4",29,0)
 S $P(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0),"^",17)=RARPT
"RTN","RAHLO4",30,0)
 Q
"RTN","RAHLO4",31,0)
SETPHYS ;set Primary Resident or Staff, either piece 12 or piece 15 of case
"RTN","RAHLO4",32,0)
 Q:RADPIECE'=15&(RADPIECE'=12)
"RTN","RAHLO4",33,0)
 S DR=RADPIECE_"////"_$G(RAVERF)
"RTN","RAHLO4",34,0)
 S DA(2)=RADFN,DA(1)=RADTI,DA=RACNI
"RTN","RAHLO4",35,0)
 S DIE="^RADPT("_DA(2)_",""DT"","_DA(1)_",""P"","
"RTN","RAHLO4",36,0)
 D ^DIE K DA,DR
"RTN","RAHLO4",37,0)
 Q
"RTN","RAHLO4",38,0)
KILSECDG ;kill secondary diagnoses nodes of this case
"RTN","RAHLO4",39,0)
 Q:'$D(RADFN)!('$D(RADTI))!('$D(RACNI))
"RTN","RAHLO4",40,0)
 Q:RADFN=""!(RADTI="")!(RACNI="")
"RTN","RAHLO4",41,0)
 Q:'$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",0))
"RTN","RAHLO4",42,0)
 S DA(3)=RADFN,DA(2)=RADTI,DA(1)=RACNI
"RTN","RAHLO4",43,0)
 N RA1 S RA1=""
"RTN","RAHLO4",44,0)
K1 S RA1=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",RA1)) G:RA1="" KQ
"RTN","RAHLO4",45,0)
 S DA=RA1
"RTN","RAHLO4",46,0)
 S DIK="^RADPT("_DA(3)_",""DT"","_DA(2)_",""P"","_DA(1)_",""DX"","
"RTN","RAHLO4",47,0)
 D ^DIK
"RTN","RAHLO4",48,0)
 G K1
"RTN","RAHLO4",49,0)
KQ K DA Q
"RTN","RAHLO4",50,0)
 ;
"RTN","RAHLO4",51,0)
PCEXTR(RASUB,RASEG,RAPCE,RADEL) ; extract the right piece of data
"RTN","RAHLO4",52,0)
 ; from the right data node
"RTN","RAHLO4",53,0)
 ; input: RASUB-data node subscript
"RTN","RAHLO4",54,0)
 ;        RASEG-HL7 segment (minus the segment header)
"RTN","RAHLO4",55,0)
 ;        RAPCE-data's piece position
"RTN","RAHLO4",56,0)
 ;        RADEL-delimiter (field separator)
"RTN","RAHLO4",57,0)
 S RAHL70="",RAHL7X=0,RAHL7OFF=$L(RASEG,RADEL)
"RTN","RAHLO4",58,0)
 S RAHL7LST=$P(RASEG,RADEL,RAHL7OFF)
"RTN","RAHLO4",59,0)
 I RAPCE<RAHL7OFF S RAHL70=$P(RASEG,RADEL,RAPCE) D KILL Q RAHL70
"RTN","RAHLO4",60,0)
 I RAHL7OFF=RAPCE D  ; check if data wraps to the next node (if any)
"RTN","RAHLO4",61,0)
 . S RAHL70=$P(RASEG,RADEL,RAPCE),II1=$O(^TMP("RARPT-HL7",$J,RASUB,0))
"RTN","RAHLO4",62,0)
 . S:'II1 RAHL7X=1 Q:'II1
"RTN","RAHLO4",63,0)
 . S RAHL70=RAHL70_$P(^TMP("RARPT-HL7",$J,RASUB,II1),RADEL),RAHL7X=1
"RTN","RAHLO4",64,0)
 . Q
"RTN","RAHLO4",65,0)
 I RAHL7X D KILL Q RAHL70
"RTN","RAHLO4",66,0)
 ; check if this node has descendent data nodes
"RTN","RAHLO4",67,0)
 I '$O(^TMP("RARPT-HL7",$J,RASUB,0)) D KILL Q "" ; descendents not found
"RTN","RAHLO4",68,0)
 S I=0,RAHL7CNT=RAHL7OFF
"RTN","RAHLO4",69,0)
 F  S I=$O(^TMP("RARPT-HL7",$J,RASUB,I)) Q:I'>0  D  Q:RAHL7X
"RTN","RAHLO4",70,0)
 . S RAHL7SUB=$G(^TMP("RARPT-HL7",$J,RASUB,I))
"RTN","RAHLO4",71,0)
 . S RAHL7PRE=$O(^TMP("RARPT-HL7",$J,RASUB,I),-1)
"RTN","RAHLO4",72,0)
 . S:RAHL7PRE RAHL7LST=$$LSTPCE(^TMP("RARPT-HL7",$J,RASUB,RAHL7PRE),RADEL)
"RTN","RAHLO4",73,0)
 . F II1=1:1:$L(RAHL7SUB,RADEL) D  Q:RAHL7X
"RTN","RAHLO4",74,0)
 .. ; HL7 may have broken the string on data!
"RTN","RAHLO4",75,0)
 .. I II1=1 S RAHL7ARY(RAHL7CNT)=RAHL7LST_$P(RAHL7SUB,RADEL)
"RTN","RAHLO4",76,0)
 .. E  D  ; for the case II1'=1
"RTN","RAHLO4",77,0)
 ... S RAHL7CNT=RAHL7CNT+1
"RTN","RAHLO4",78,0)
 ... S RAHL7ARY(RAHL7CNT)=$P(RAHL7SUB,RADEL,II1)
"RTN","RAHLO4",79,0)
 ... Q
"RTN","RAHLO4",80,0)
 .. I RAHL7CNT=RAPCE,(II1'=$L(RAHL7SUB,RADEL)) S RAHL7X=1,RAHL70=RAHL7ARY(RAHL7CNT)
"RTN","RAHLO4",81,0)
 .. I RAHL7CNT=RAPCE,(II1=$L(RAHL7SUB,RADEL)) D
"RTN","RAHLO4",82,0)
 ... ; grab the 1st piece of the next node (if any)
"RTN","RAHLO4",83,0)
 ... S RAHL7X=1,RAHL70=RAHL7ARY(RAHL7CNT)
"RTN","RAHLO4",84,0)
 ... S N1=+$O(^TMP("RARPT-HL7",$J,RASUB,I)) Q:'N1
"RTN","RAHLO4",85,0)
 ... S RAHL70=RAHL70_$P(^TMP("RARPT-HL7",$J,RASUB,N1),RADEL)
"RTN","RAHLO4",86,0)
 ... Q
"RTN","RAHLO4",87,0)
 .. K:'RAHL7X RAHL7ARY
"RTN","RAHLO4",88,0)
 .. Q
"RTN","RAHLO4",89,0)
 . Q
"RTN","RAHLO4",90,0)
 D KILL
"RTN","RAHLO4",91,0)
 Q RAHL70
"RTN","RAHLO4",92,0)
KILL ; kill the RAHLD* variables
"RTN","RAHLO4",93,0)
 K I,II1,N1,RAHL7ARY,RAHL7CNT,RAHL7LST,RAHL7OFF,RAHL7PRE,RAHL7SUB,RAHL7X
"RTN","RAHLO4",94,0)
 Q
"RTN","RAHLO4",95,0)
LSTPCE(X,DEL) ; given a string and a delimiter, return the last piece
"RTN","RAHLO4",96,0)
 Q $P(X,DEL,$L(X,DEL))
"RTN","RAHLO4",97,0)
CKDUPA ; if duplicate addendum, send msg to members of unverify rpt mailgroup
"RTN","RAHLO4",98,0)
 S RADUPA=0 ; 0 means not a duplicate
"RTN","RAHLO4",99,0)
 N I1,I2,X1,X2,X3,X4,X21,R0,R1,R2,MATCH,XMSUB
"RTN","RAHLO4",100,0)
 S I1="I",I2="RAIMP" I $O(^RARPT(RARPT,I1,0))'="" D ISITDUP ;Q:'RADUPA
"RTN","RAHLO4",101,0)
 ;
"RTN","RAHLO4",102,0)
 I 'RADUPA S I1="R",I2="RATXT" I $O(^RARPT(RARPT,I1,0))'="" D ISITDUP Q:'RADUPA
"RTN","RAHLO4",103,0)
 ;S I1="R",I2="RATXT" I $O(^RARPT(RARPT,I1,0))'="" D ISITDUP Q:'RADUPA
"RTN","RAHLO4",104,0)
 ;
"RTN","RAHLO4",105,0)
 S XMSUB="Duplicate addendum being sent to Vista"
"RTN","RAHLO4",106,0)
 ;
"RTN","RAHLO4",107,0)
 ; check to see if mail message already sent for
"RTN","RAHLO4",108,0)
 ; this case no. TODAY only. if so quit - no need to
"RTN","RAHLO4",109,0)
 ; re-send to save time backwards $ORDER, duplicate
"RTN","RAHLO4",110,0)
 ; most likely to be most recently.
"RTN","RAHLO4",111,0)
 S (XMB,XMATCH)=""
"RTN","RAHLO4",112,0)
 D NOW^%DTC S RATDY=X K X
"RTN","RAHLO4",113,0)
 F  S XMB=$O(^XMB(3.9,"B",$E(XMSUB,1,30),XMB),-1) Q:XMB=""  D  Q:XMATCH'=""
"RTN","RAHLO4",114,0)
 .I $P($$GET1^DIQ(3.9,XMB,1.4,"I"),".")'=RATDY S XMATCH=0 Q  ;(DBIA2860)
"RTN","RAHLO4",115,0)
 .Q:$G(^XMB(3.9,XMB,2,6,0))'[RALONGCN
"RTN","RAHLO4",116,0)
 .S XMATCH=1
"RTN","RAHLO4",117,0)
 K XMB,RATDY
"RTN","RAHLO4",118,0)
 Q:XMATCH=1
"RTN","RAHLO4",119,0)
 ;
"RTN","RAHLO4",120,0)
 ; send mail to members of unverify bulletin  (DBIA2861)
"RTN","RAHLO4",121,0)
 ; find ien of unverify bulletin
"RTN","RAHLO4",122,0)
 D FIND^DIC(3.6,"","","","RAD/NUC MED REPORT UNVERIFIED",1,"","","","R0")
"RTN","RAHLO4",123,0)
 Q:'$D(R0("DILIST",2,1))#2
"RTN","RAHLO4",124,0)
 ; find name of mail group linked to that bulletin
"RTN","RAHLO4",125,0)
 D GETS^DIQ(3.6,R0("DILIST",2,1),"4*","EI","R1")
"RTN","RAHLO4",126,0)
 ; check to see if MailGroup is PUBLIC, otherwise quit
"RTN","RAHLO4",127,0)
 S X=$G(R1(3.62,"1,"_R0("DILIST",2,1)_",",.01,"I")) I X="" K X Q
"RTN","RAHLO4",128,0)
 I $$GET1^DIQ(3.8,X_",",4,"I")'="PU" K X Q
"RTN","RAHLO4",129,0)
 S X=$G(R1(3.62,"1,"_R0("DILIST",2,1)_",",.01,"E")) I X="" K X Q
"RTN","RAHLO4",130,0)
 N XMDUZ,XMTEXT,XMY,MSGTXT,XRAVERF,XRATRANS,XRADFN
"RTN","RAHLO4",131,0)
 S X="G."_X,XMY(X)="" K X ;recipient mail group
"RTN","RAHLO4",132,0)
 ;
"RTN","RAHLO4",133,0)
 S XMDUZ=.5
"RTN","RAHLO4",134,0)
 S MSGTXT(1)=$G(^TMP("RARPT-REC",$J,RASUB,"VENDOR"))_" is sending duplicate addenda to Radiology/Nuclear Medicine."
"RTN","RAHLO4",135,0)
 S MSGTXT(2)=" "
"RTN","RAHLO4",136,0)
 S MSGTXT(3)="The following radiology report was sent with a duplicate addendum:"
"RTN","RAHLO4",137,0)
 S:RADFN'="" XRADFN=$$GET1^DIQ(2,RADFN,.01)
"RTN","RAHLO4",138,0)
 S:$G(XRADFN)="" XRADFN="Unknown"
"RTN","RAHLO4",139,0)
 S MSGTXT(4)="   1) Patient              : "_XRADFN
"RTN","RAHLO4",140,0)
 S MSGTXT(5)="   2) SSN                  : "_$$SSN^RAUTL()
"RTN","RAHLO4",141,0)
 S MSGTXT(6)="   3) Case Number          : "_RALONGCN
"RTN","RAHLO4",142,0)
 S:RAVERF'="" XRAVERF=$$GET1^DIQ(200,RAVERF,.01)
"RTN","RAHLO4",143,0)
 S:$G(XRAVERF)="" XRAVERF="Unknown"
"RTN","RAHLO4",144,0)
 S MSGTXT(7)="   4) Verifier             : "_XRAVERF
"RTN","RAHLO4",145,0)
 S:RATRANSC'="" XRATRANS=$$GET1^DIQ(200,RATRANSC,.01)
"RTN","RAHLO4",146,0)
 S:$G(XRATRANS)="" XRATRANS="Unknown"
"RTN","RAHLO4",147,0)
 S MSGTXT(8)="   5) Transcriptionist     : "_XRATRANS
"RTN","RAHLO4",148,0)
 S MSGTXT(9)=" "
"RTN","RAHLO4",149,0)
 S MSGTXT(10)="Please notify IRM."
"RTN","RAHLO4",150,0)
 S XMTEXT="MSGTXT("
"RTN","RAHLO4",151,0)
 D ^XMD
"RTN","RAHLO4",152,0)
 Q
"RTN","RAHLO4",153,0)
ISITDUP ; X1=last ien ^RARPT, X2=LAST IEN ^TMP, x21=first ien ^TMP
"RTN","RAHLO4",154,0)
 Q:'$O(^TMP("RARPT-REC",$J,RASUB,I2,0))
"RTN","RAHLO4",155,0)
 N X1,X2,X21,X3,X4,XX
"RTN","RAHLO4",156,0)
 S RADUPA=0 ; Reset to zero otherwise Imp Text match will override
"RTN","RAHLO4",157,0)
 S X1=$O(^RARPT(RARPT,I1,""),-1)
"RTN","RAHLO4",158,0)
 S XX=$G(^RARPT(RARPT,I1,X1,0)) S XX=$S(XX=""!(XX=" "):0,1:1)
"RTN","RAHLO4",159,0)
 S X2=$O(^TMP("RARPT-REC",$J,RASUB,I2,""),-1),X21=$O(^(0))
"RTN","RAHLO4",160,0)
 S X3=X1-X2+XX Q:X3<1  ; begin comparison from ^RARPT(RARPT,I1,X3
"RTN","RAHLO4",161,0)
 ; chk 1st line of previous addendum
"RTN","RAHLO4",162,0)
 Q:^RARPT(RARPT,I1,X3,0)'["Addendum: "  S X4=^(0)
"RTN","RAHLO4",163,0)
 S X4=$E(X4,$L("Addendum: ")+1,$L(X4)) ; exclude "Addendum: " from X4
"RTN","RAHLO4",164,0)
 Q:X4'=^TMP("RARPT-REC",$J,RASUB,I2,X21)
"RTN","RAHLO4",165,0)
 ; chk remaining lines
"RTN","RAHLO4",166,0)
 S X21=X21+1 F X1=X21:1:X2 S X3=X3+1 Q:^RARPT(RARPT,I1,X3,0)'=^TMP("RARPT-REC",$J,RASUB,I2,X1)
"RTN","RAHLO4",167,0)
 Q:X1<X2
"RTN","RAHLO4",168,0)
 S RADUPA=1
"RTN","RAHLO4",169,0)
 Q
"RTN","RAHLRPC")
0^3^B13841696^B16016942
"RTN","RAHLRPC",1,0)
RAHLRPC ;HIRMFO/BNT-Rad/NM HL7 Protocol calls ;05/21/99   14:50
"RTN","RAHLRPC",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**12,25,54,71,82,81**;Mar 16, 1998;Build 12
"RTN","RAHLRPC",3,0)
 ; 03/16/2006 *71 Rem Call 124379 allow exam updates to create HL7 msg
"RTN","RAHLRPC",4,0)
REG ; register exam
"RTN","RAHLRPC",5,0)
 N X,RAPID,RAEID
"RTN","RAHLRPC",6,0)
 S RAPID="RA REF" ; get all protocols beginning RA REG
"RTN","RAHLRPC",7,0)
 F  S RAPID=$O(^ORD(101,"B",RAPID)) Q:RAPID'["RA REG"  D
"RTN","RAHLRPC",8,0)
 .S RAEID=$O(^ORD(101,"B",RAPID,0))
"RTN","RAHLRPC",9,0)
 .I RAEID,'$L($P(^ORD(101,RAEID,0),"^",3)) D EN^RAHLR
"RTN","RAHLRPC",10,0)
 Q
"RTN","RAHLRPC",11,0)
CANCEL ; cancel exam
"RTN","RAHLRPC",12,0)
 N X,RAPID,RAEID
"RTN","RAHLRPC",13,0)
 S RAPID="RA CANCEK" ; get all protocols beginning RA CANCEL
"RTN","RAHLRPC",14,0)
 F  S RAPID=$O(^ORD(101,"B",RAPID)) Q:RAPID'["RA CANCEL"  D
"RTN","RAHLRPC",15,0)
 .S RAEID=$O(^ORD(101,"B",RAPID,0))
"RTN","RAHLRPC",16,0)
 .I RAEID,'$L($P(^ORD(101,RAEID,0),"^",3)) D EN^RAHLR
"RTN","RAHLRPC",17,0)
 Q
"RTN","RAHLRPC",18,0)
 ;
"RTN","RAHLRPC",19,0)
RPT ; report verified or released/not verified
"RTN","RAHLRPC",20,0)
 N X,RAPID,RAEID,RASSS ; RASSS subcriber array to be passed to HLL for GENERATE^HLMA
"RTN","RAHLRPC",21,0)
 ;S X="^%ET",@^%ZOSF("TRAP")
"RTN","RAHLRPC",22,0)
 S RAPID="RA RPS" ; get all protocols beginning RA RPT
"RTN","RAHLRPC",23,0)
 F  S RAPID=$O(^ORD(101,"B",RAPID)) Q:RAPID'["RA RPT"  D
"RTN","RAHLRPC",24,0)
 .S RAEID=$O(^ORD(101,"B",RAPID,0)) K RASSS  ; RA*5*81
"RTN","RAHLRPC",25,0)
 .S:$L($G(RANOSEND)) RAEID=$$GETEID(RAEID,RANOSEND,.RASSS) ;RA*5*81
"RTN","RAHLRPC",26,0)
 .I RAEID,'$L($P(^ORD(101,RAEID,0),"^",3)) D EN^RAHLRPT
"RTN","RAHLRPC",27,0)
 K RANOSEND
"RTN","RAHLRPC",28,0)
 Q
"RTN","RAHLRPC",29,0)
 ;
"RTN","RAHLRPC",30,0)
EXM ;Examined case; called from RAUTL1 and RASTED after a case has been edited.
"RTN","RAHLRPC",31,0)
 ;
"RTN","RAHLRPC",32,0)
 ;Called from RAUTL1 and RASTED after a case's status is upgraded
"RTN","RAHLRPC",33,0)
 ; and case's 30th piece is null
"RTN","RAHLRPC",34,0)
 ;
"RTN","RAHLRPC",35,0)
 ;If this new status is :
"RTN","RAHLRPC",36,0)
 ; at a status (or higher than a status) where
"RTN","RAHLRPC",37,0)
 ; GENERATE EXAMINED HL7 MSG = Y,
"RTN","RAHLRPC",38,0)
 ; then :
"RTN","RAHLRPC",39,0)
 ; 1. send an HL7 msg re this case having reached EXAMINED status
"RTN","RAHLRPC",40,0)
 ; 2. set subfile 70.03's HL7 EXAMINED MSG SENT  to  Y
"RTN","RAHLRPC",41,0)
 ;
"RTN","RAHLRPC",42,0)
 ; RALOWER = next lower status
"RTN","RAHLRPC",43,0)
 ; RANEWST = new status ien
"RTN","RAHLRPC",44,0)
 ; RAEXEDT = Indication of editing of: proc, proc mod, req phys, CPT mod, Tech comm...
"RTN","RAHLRPC",45,0)
 ; RAGENHL7 = Indication that sending ORU is due...
"RTN","RAHLRPC",46,0)
 ; 
"RTN","RAHLRPC",47,0)
 N RAIMGTYI,RAIMGTYJ,RALOWER,RANEWST,RAEXMDUN,RAGENHL7
"RTN","RAHLRPC",48,0)
 S RAIMGTYI=$P($G(^RADPT(RADFN,"DT",RADTI,0)),U,2),RAIMGTYJ=$P(^RA(79.2,RAIMGTYI,0),U),RANEWST=$P($G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0)),U,3)
"RTN","RAHLRPC",49,0)
 S:$P(^RA(72,RANEWST,0),U,8)="Y" RAGENHL7=1 ;this status has GEN HL7 marked Y
"RTN","RAHLRPC",50,0)
 ; look thru lower statuses for GEN HL7 marked Y
"RTN","RAHLRPC",51,0)
DOWN S RALOWER=$P($G(^RA(72,+RANEWST,0)),U,3)
"RTN","RAHLRPC",52,0)
 I '$G(RAGENHL7) F  S RALOWER=$O(^RA(72,"AA",RAIMGTYJ,RALOWER),-1) Q:RALOWER<1  S:$P(^RA(72,+$O(^RA(72,"AA",RAIMGTYJ,RALOWER,0)),0),U,8)="Y" RAGENHL7=1
"RTN","RAHLRPC",53,0)
 ;?? none of the lower status levels have GEN HL7 marked Y
"RTN","RAHLRPC",54,0)
 K:$P(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0),U,30)="Y" RAGENHL7 ;already sent
"RTN","RAHLRPC",55,0)
 Q:'$G(RAEXEDT)&'$G(RAGENHL7)
"RTN","RAHLRPC",56,0)
 ;
"RTN","RAHLRPC",57,0)
1 N RAEXMDUN
"RTN","RAHLRPC",58,0)
 S RAEXMDUN=1
"RTN","RAHLRPC",59,0)
A1 N X,RAPID,RAEID
"RTN","RAHLRPC",60,0)
 S RAPID="RA EXAMINEC" ; get all protocols beginning RA EXAMINED
"RTN","RAHLRPC",61,0)
 F  S RAPID=$O(^ORD(101,"B",RAPID)) Q:RAPID'["RA EXAMINED"  D
"RTN","RAHLRPC",62,0)
 .N RAGENHL7 S RAEID=$O(^ORD(101,"B",RAPID,0))
"RTN","RAHLRPC",63,0)
 .I RAEID,'$L($P(^ORD(101,RAEID,0),"^",3)) D EN^RAHLR
"RTN","RAHLRPC",64,0)
 S:$G(RAGENHL7) $P(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0),U,30)="Y"
"RTN","RAHLRPC",65,0)
 Q
"RTN","RAHLRPC",66,0)
 ;
"RTN","RAHLRPC",67,0)
GETEID(RAEID,RANOSEND,RASSS) ; RA*5*81   Return RAEID or 0 (zero)  = for future use.
"RTN","RAHLRPC",68,0)
 ; RAEID = IEN of regular Event driver
"RTN","RAHLRPC",69,0)
 ; RANOSEND Application name or IEN from 771 file..  don't send message to Subcr. with this application.
"RTN","RAHLRPC",70,0)
 ; RASSS Array of subcribers (IENs) associated with RANOSEND application
"RTN","RAHLRPC",71,0)
 ; 0 (zero) returned if No subscriber exist or all subscribers associated with RANOSEND application.
"RTN","RAHLRPC",72,0)
 S RAEID=$G(RAEID) Q:'RAEID!'$L($G(RANOSEND))!'$D(^ORD(101,+RAEID,0)) RAEID
"RTN","RAHLRPC",73,0)
 N RAXX,ERR,X1,Y1,YY,RAPL,RANEW,RAPIDS,RAIEDS
"RTN","RAHLRPC",74,0)
 S RAPL=$S(+RANOSEND:+RANOSEND,1:$O(^HL(771,"B",RANOSEND,0))) Q:'RAPL RAEID
"RTN","RAHLRPC",75,0)
 D GETS^DIQ(101,RAEID_",","**","I","RAXX","ERR")
"RTN","RAHLRPC",76,0)
 Q:$D(ERR) RAEID ; Was not able get Event driver info... so just pass event driver...
"RTN","RAHLRPC",77,0)
 Q:'$D(RAXX(101.0775)) 0  ;No subcribers exist for Event driver
"RTN","RAHLRPC",78,0)
 S X1="",RANEW=0,Y1=0 F  S X1=$O(RAXX(101.0775,X1)) Q:'$L(X1)  D
"RTN","RAHLRPC",79,0)
 .S YY=$G(RAXX(101.0775,X1,.01,"I"))
"RTN","RAHLRPC",80,0)
 .I $P($G(^ORD(101,+YY,770)),U,2)=RAPL D  Q
"RTN","RAHLRPC",81,0)
 ..S Y1=Y1+1,RASSS("EXCLUDE SUBSCRIBER",Y1)=YY ;Y1= 1,2,3...
"RTN","RAHLRPC",82,0)
 .S RANEW=1
"RTN","RAHLRPC",83,0)
 Q:'RANEW 0  ;All subscribers are associated with application RANOSEND..  Don't send the message.
"RTN","RAHLRPC",84,0)
 Q RAEID
"RTN","RAHLRPT")
0^4^B70016688^B65391180
"RTN","RAHLRPT",1,0)
RAHLRPT ;HISC/CAH AISC/SAW-Compiles HL7 'ORU' Message Type ; 4/26/01 10:40am
"RTN","RAHLRPT",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**2,12,10,25,81**;Mar 16, 1998;Build 12
"RTN","RAHLRPT",3,0)
EN ; Called from RA RPT and RA RPT 2.3 protocol entry action
"RTN","RAHLRPT",4,0)
 ; Input variables:
"RTN","RAHLRPT",5,0)
 ;   RADFN=file 2 IEN (DFN)
"RTN","RAHLRPT",6,0)
 ;   RADTI=file 70 Exam subrecord IEN (reverse date/time)
"RTN","RAHLRPT",7,0)
 ;   RACNI=file 70 Case subrecord IEN
"RTN","RAHLRPT",8,0)
 ;   RARPT=file 74 Report IEN
"RTN","RAHLRPT",9,0)
 ;   RASSS=List of Subscribers passed into GENERATE^HLMA  will be set into HLP array.
"RTN","RAHLRPT",10,0)
 ; Output variables:
"RTN","RAHLRPT",11,0)
 ;   HLA("HLS", array containing HL7 msg
"RTN","RAHLRPT",12,0)
 ;
"RTN","RAHLRPT",13,0)
 N RASET,RACN0
"RTN","RAHLRPT",14,0)
 S RASET=0
"RTN","RAHLRPT",15,0)
 S RACN0=^RADPT(RADFN,"DT",RADTI,"P",RACNI,0)
"RTN","RAHLRPT",16,0)
 S:'$D(RARPT) RARPT=+$P(RACN0,"^",17)
"RTN","RAHLRPT",17,0)
 I +$P(RACN0,U,25)=2 D  Q  ; printset
"RTN","RAHLRPT",18,0)
 .; loop through all cases in set and create message
"RTN","RAHLRPT",19,0)
 .S RASET=1
"RTN","RAHLRPT",20,0)
 .N RACNI,RAII S RAII=0
"RTN","RAHLRPT",21,0)
 .F  S RAII=$O(^RADPT(RADFN,"DT",RADTI,"P",RAII)) Q:RAII'>0  D
"RTN","RAHLRPT",22,0)
 .. Q:$P(^RADPT(RADFN,"DT",RADTI,"P",RAII,0),U,25)'=2
"RTN","RAHLRPT",23,0)
 .. S RACNI=RAII
"RTN","RAHLRPT",24,0)
 .. D NEW
"RTN","RAHLRPT",25,0)
NEW ; new variables
"RTN","RAHLRPT",26,0)
 S:$D(ZTQUEUED) ZTREQ="@" ; delete task from task global
"RTN","RAHLRPT",27,0)
 N DFN,DIWF,DIWL,DIWR,RACPT,RACPTNDE,RADTECN,RADTE0,RADTV,RAI,RAN,RAOBR4,RAPRCNDE,RAPROC,RAPROCIT,RAPRV,RARPT0
"RTN","RAHLRPT",28,0)
 N VADM,VAERR,X,X1,X2,XX2,Y,X0,OBR36,EID,HL,INT,HLQ,HLFS,HLECH,HLA,RAN K RAVADM
"RTN","RAHLRPT",29,0)
 D INIT^RAHLRU ;initialize HL7 variables
"RTN","RAHLRPT",30,0)
 Q:+$G(HL)=15  ;no known client(item) linked to the event driver protocol
"RTN","RAHLRPT",31,0)
 Q:$O(HL(""))=""  ;failed return from init^hlfnc2
"RTN","RAHLRPT",32,0)
 ;
"RTN","RAHLRPT",33,0)
 ;** branch to new HL7 logic when the HL7 version surpasses 2.3 **
"RTN","RAHLRPT",34,0)
 ;I HL("VER")]2.3 D EN^RAHLRPT1(RADFN,RADTI,RACNI,RAEID),EXIT Q
"RTN","RAHLRPT",35,0)
 ;** branch to new HL7 logic when the HL7 version surpasses 2.3 **
"RTN","RAHLRPT",36,0)
 ;
"RTN","RAHLRPT",37,0)
 S DFN=RADFN D DEM^VADPT
"RTN","RAHLRPT",38,0)
 I VADM(1)']"" S HLP("ERRTEXT")="Invalid Patient Identifier" G EXIT
"RTN","RAHLRPT",39,0)
 S RAN=0
"RTN","RAHLRPT",40,0)
 S RAVADM(3)=$S($E(+VADM(3),6,7)="00":"",1:+VADM(3)) ; NOTE: Check
"RTN","RAHLRPT",41,0)
 ; for an inexact date of birth.  If inexact, pass null for DOB in
"RTN","RAHLRPT",42,0)
 ; the 'PID' segment.  Some COTS systems can't handle inexact DOB's.
"RTN","RAHLRPT",43,0)
 D SETUP,PID,OBR,OBXPRC,OBXIMP,OBXDIA,OBXRPT,OBXMOD,OBXTCM
"RTN","RAHLRPT",44,0)
EXIT ; set HL7 message type & return to RA RPT protocol
"RTN","RAHLRPT",45,0)
 S HL("MTN")="ORU"
"RTN","RAHLRPT",46,0)
 N HLEID,HLARYTYP,HLFORMAT,HLMTIEN,HLP
"RTN","RAHLRPT",47,0)
 S HLEID=RAEID,HLARYTYP="LM",HLFORMAT=1,HLMTIEN="",HLP("PRIORITY")="I"
"RTN","RAHLRPT",48,0)
 M:$D(RASSS) HLP=RASSS
"RTN","RAHLRPT",49,0)
 ;D:$D(RASSSX(HLEID)) GETHLP^RAHLRS1(HLEID,.HLP)
"RTN","RAHLRPT",50,0)
 D GENERATE^HLMA(HLEID,HLARYTYP,HLFORMAT,.HLRESLT,HLMTIEN,.HLP)
"RTN","RAHLRPT",51,0)
 K RAVADM
"RTN","RAHLRPT",52,0)
 Q
"RTN","RAHLRPT",53,0)
 ;
"RTN","RAHLRPT",54,0)
OBR ;Compile 'OBR' Segment
"RTN","RAHLRPT",55,0)
 S RAOBR4=$P(RACPTNDE,U)_$E(HLECH)_$P(RACPTNDE,U,2)_$E(HLECH)_"C4"_$E(HLECH)_+RAPROC_$E(HLECH)_$P(RAPRCNDE,U)_$E(HLECH)_"99RAP"
"RTN","RAHLRPT",56,0)
 ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRPT",57,0)
 ; S RAOBR4=$P(RACPTNDE,U)_$E(HLECH)_$$ESCAPE^RAHLRU($P(RACPTNDE,U,2))_$E(HLECH)_"C4"_$E(HLECH)_+RAPROC_$E(HLECH)_$$ESCAPE^RAHLRU($P(RAPRCNDE,U))_$E(HLECH)_"99RAP"
"RTN","RAHLRPT",58,0)
 ; Have to use LOCAL code if Broad Procedure - no CPT code
"RTN","RAHLRPT",59,0)
 I $P(RAOBR4,$E(HLECH))=""!($P(RAOBR4,$E(HLECH),2)="") S $P(RAOBR4,$E(HLECH),1,3)=$P(RAOBR4,$E(HLECH),4,5)_$E(HLECH)_"LOCAL"
"RTN","RAHLRPT",60,0)
 S X1="OBR"_HLFS_HLFS_HLFS_RADTI_"-"_RACNI_$E(HLECH)_RADTECN_$E(HLECH)_"L"_HLFS_RAOBR4_HLFS_HLFS_HLFS_RADTE0_HLFS_HLQ_HLFS_HLQ_HLFS_HLFS_HLFS_HLFS_HLFS,Y=$$HLDATE^HLFNC($P(RARPT0,"^",6)) S X1=X1_Y_HLFS_HLFS
"RTN","RAHLRPT",61,0)
 S RAPRV=$$GET1^DIQ(200,+$P(RACN0,"^",14),.01)
"RTN","RAHLRPT",62,0)
 S Y=$$HLNAME^HLFNC(RAPRV) S X1=X1_$S(Y]"":+$P(RACN0,"^",14)_$E(HLECH)_Y,1:"")
"RTN","RAHLRPT",63,0)
 S $P(X1,HLFS,19)=$S($D(^DIC(42,+$P(RACN0,"^",6),0)):$P(^(0),"^"),$D(^SC(+$P(RACN0,"^",8),0)):$P(^(0),"^"),1:"Unknown")
"RTN","RAHLRPT",64,0)
 ; PCE 21 -> ien file #79.1~name of img loc~stn #~stn name
"RTN","RAHLRPT",65,0)
 N RACN00,RA20 S RACN00=$G(^RADPT(RADFN,"DT",RADTI,0))
"RTN","RAHLRPT",66,0)
 S RA20=+$G(^RA(79.1,+$P(RACN00,U,4),0))
"RTN","RAHLRPT",67,0)
 S $P(X1,HLFS,21)=$P(RACN00,"^",4)_$E(HLECH)_$P($G(^SC(RA20,0)),"^")_$E(HLECH)_$P(RACN00,"^",3)_$E(HLECH)_$P($G(^DIC(4,$P(RACN00,U,3),0)),"^")
"RTN","RAHLRPT",68,0)
 S $P(X1,HLFS,21)=$P(X1,HLFS,21)
"RTN","RAHLRPT",69,0)
 ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRPT",70,0)
 ; S $P(X1,HLFS,21)=$$ESCAPE^RAHLRU($P(X1,HLFS,21))
"RTN","RAHLRPT",71,0)
 ;
"RTN","RAHLRPT",72,0)
 S OBR36=9999999.9999-RADTI
"RTN","RAHLRPT",73,0)
 S $P(X1,HLFS,37)=$$FMTHL7^XLFDT(OBR36)
"RTN","RAHLRPT",74,0)
 ;
"RTN","RAHLRPT",75,0)
 S RADTV=HLDT1 I $P(RARPT0,"^",5)="V",$P(RARPT0,"^",7) K RADTV S RADTV=$$HLDATE^HLFNC($P(RARPT0,"^",7))
"RTN","RAHLRPT",76,0)
 S $P(X1,HLFS,23)=RADTV,$P(X1,HLFS,26)=$S($P(RARPT0,"^",5)="V":"F",1:"R")
"RTN","RAHLRPT",77,0)
 ;Principal Result Interpreter = Verifying Physician
"RTN","RAHLRPT",78,0)
 S $P(X1,HLFS,33)="" I $P(RARPT0,"^",9) D
"RTN","RAHLRPT",79,0)
 .S X2=$$GET1^DIQ(200,$P(RARPT0,"^",9),.01) Q:X2']""
"RTN","RAHLRPT",80,0)
 .S Y=$$HLNAME^HLFNC(X2) Q:Y']""
"RTN","RAHLRPT",81,0)
 .S $P(X1,HLFS,33)=$P(RARPT0,"^",9)_$E(HLECH)_Y
"RTN","RAHLRPT",82,0)
 ;Assistant Result Interpreter = Primary Interpreting Staff OR Resident
"RTN","RAHLRPT",83,0)
 S $P(X1,HLFS,34)="" I $P(RACN0,"^",15) D
"RTN","RAHLRPT",84,0)
 .S X2=$$GET1^DIQ(200,$P(RACN0,"^",15),.01) Q:X2']""
"RTN","RAHLRPT",85,0)
 .S Y=$$HLNAME^HLFNC(X2) Q:Y']""
"RTN","RAHLRPT",86,0)
 .S $P(X1,HLFS,34)=$P(RACN0,"^",15)_$E(HLECH)_Y
"RTN","RAHLRPT",87,0)
 I $P(RACN0,"^",12) D
"RTN","RAHLRPT",88,0)
 .S X2=$$GET1^DIQ(200,$P(RACN0,"^",12),.01) Q:X2']""
"RTN","RAHLRPT",89,0)
 .S Y=$$HLNAME^HLFNC(X2) Q:Y']""
"RTN","RAHLRPT",90,0)
 .S $P(X1,HLFS,34)=$P(RACN0,"^",12)_$E(HLECH)_Y
"RTN","RAHLRPT",91,0)
 ;Technician = Technologist
"RTN","RAHLRPT",92,0)
 S $P(X1,HLFS,35)="" I $O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"TC",0)) D
"RTN","RAHLRPT",93,0)
 .S X2=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"TC",0)) I X2']"" Q
"RTN","RAHLRPT",94,0)
 .S X2=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"TC",X2,0)) I X2']"" Q
"RTN","RAHLRPT",95,0)
 .S XX2=$$GET1^DIQ(200,X2,.01) Q:XX2']""
"RTN","RAHLRPT",96,0)
 .S Y=$$HLNAME^HLFNC(XX2) I Y']"" Q
"RTN","RAHLRPT",97,0)
 .S $P(X1,HLFS,35)=X2_$E(HLECH)_Y
"RTN","RAHLRPT",98,0)
 ;Transcriptionist
"RTN","RAHLRPT",99,0)
 S $P(X1,HLFS,36)="" I $G(^RARPT(RARPT,"T")) D
"RTN","RAHLRPT",100,0)
 .S X2=$$GET1^DIQ(200,^RARPT(RARPT,"T"),.01) I X2']"" Q
"RTN","RAHLRPT",101,0)
 .S Y=$$HLNAME^HLFNC(X2) I Y']"" Q
"RTN","RAHLRPT",102,0)
 .S $P(X1,HLFS,36)=^RARPT(RARPT,"T")_$E(HLECH)_Y
"RTN","RAHLRPT",103,0)
 ;
"RTN","RAHLRPT",104,0)
 ; if long str, break so 2nd str begins with separator to avoid abend
"RTN","RAHLRPT",105,0)
 I $L(X1)>245 N RAPART F RAPART=5:1:18 S RAPART(1)=$P(X1,HLFS,1,RAPART),RAPART(2)=$P(X1,HLFS,RAPART+1,99) Q:$L(RAPART(1))<245&($L(RAPART(2))<245)&($P(RAPART(2),HLFS)="")
"RTN","RAHLRPT",106,0)
 I $D(RAPART) K:RAPART=18 RAPART ;if RAPART reaches 18, then something's wrong, so kill RAPART to allow abend due "string too long"
"RTN","RAHLRPT",107,0)
 S RAN=RAN+1
"RTN","RAHLRPT",108,0)
 I $D(RAPART) S HLA("HLS",RAN)=$P(RAPART(1),HLFS)_HLFS,HLA("HLS",RAN,1)=$P(RAPART(1),HLFS,2,99)_HLFS,HLA("HLS",RAN,2)=RAPART(2) K RAPART Q
"RTN","RAHLRPT",109,0)
 S HLA("HLS",RAN)=X1
"RTN","RAHLRPT",110,0)
 Q
"RTN","RAHLRPT",111,0)
OBXDIA ;Compile 'OBX' Segment for Diagnostic Code
"RTN","RAHLRPT",112,0)
 S RAI=$P($G(^RA(78.3,+$P(RACN0,"^",13),0)),"^") I RAI]"" D
"RTN","RAHLRPT",113,0)
 .S RAN=RAN+1
"RTN","RAHLRPT",114,0)
 .I $$PATCH^XPDUTL("MAG*2.5*1")!(+$$VERSION^XPDUTL("MAG")>2.5) D
"RTN","RAHLRPT",115,0)
 ..S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_+$P(RACN0,"^",13)_$E(HLECH)_RAI_$E(HLECH)_"L"
"RTN","RAHLRPT",116,0)
 ..; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRPT",117,0)
 ..; S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_+$P(RACN0,"^",13)_$E(HLECH)_$$ESCAPE^RAHLRU(RAI)_$E(HLECH)_"L"
"RTN","RAHLRPT",118,0)
 .E  D
"RTN","RAHLRPT",119,0)
 ..S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"ST"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_RAI
"RTN","RAHLRPT",120,0)
 .D OBX11^RAHLRU
"RTN","RAHLRPT",121,0)
 Q:'$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",0))  ;any secondary dx
"RTN","RAHLRPT",122,0)
 S X2=0
"RTN","RAHLRPT",123,0)
OBXDIA2 S X2=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",X2)) Q:'X2
"RTN","RAHLRPT",124,0)
 S Y=+^(X2,0),X=$P($G(^RA(78.3,+Y,0)),U)
"RTN","RAHLRPT",125,0)
 I X]"" D
"RTN","RAHLRPT",126,0)
 .S RAN=RAN+1
"RTN","RAHLRPT",127,0)
 .I $$PATCH^XPDUTL("MAG*2.5*1")!(+$$VERSION^XPDUTL("MAG")>2.5) D
"RTN","RAHLRPT",128,0)
 ..S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_Y_$E(HLECH)_X_$E(HLECH)_"L"
"RTN","RAHLRPT",129,0)
 ..; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRPT",130,0)
 ..; S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_Y_$E(HLECH)_$$ESCAPE^RAHLRU(X)_$E(HLECH)_"L"
"RTN","RAHLRPT",131,0)
 .E  D
"RTN","RAHLRPT",132,0)
 ..S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"ST"_HLFS_"D"_$E(HLECH)_"DIAGNOSTIC CODE"_$E(HLECH)_"L"_HLFS_HLFS_X
"RTN","RAHLRPT",133,0)
 .D OBX11^RAHLRU
"RTN","RAHLRPT",134,0)
 G OBXDIA2
"RTN","RAHLRPT",135,0)
 ;
"RTN","RAHLRPT",136,0)
OBXIMP ;Compile 'OBX' segment for Impression
"RTN","RAHLRPT",137,0)
 I '$O(^RARPT(RARPT,"I",0)) S RAN=RAN+1,HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"I"_$E(HLECH)_"IMPRESSION"_$E(HLECH)_"L"_HLFS_HLFS_"None Entered" D OBX11^RAHLRU Q
"RTN","RAHLRPT",138,0)
 K ^UTILITY($J,"W") S DIWF="",DIWR=80,DIWL=1 F RAI=0:0 S RAI=$O(^RARPT(RARPT,"I",RAI)) Q:'RAI  I $D(^(RAI,0)) S X=^(0) D ^DIWP
"RTN","RAHLRPT",139,0)
 F RAI=0:0 S RAI=$O(^UTILITY($J,"W",DIWL,RAI)) Q:'RAI  I $D(^(RAI,0)) S RAN=RAN+1,HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"I"_$E(HLECH)_"IMPRESSION"_$E(HLECH)_"L"_HLFS_HLFS_^(0) D OBX11^RAHLRU
"RTN","RAHLRPT",140,0)
 Q
"RTN","RAHLRPT",141,0)
OBXMOD ;Compile 'OBX' Segment for Modifiers
"RTN","RAHLRPT",142,0)
 S RAN=RAN+1 D OBXMOD^RAHLRU
"RTN","RAHLRPT",143,0)
 Q
"RTN","RAHLRPT",144,0)
OBXPRC ;Compile 'OBX' Segment for Procedure
"RTN","RAHLRPT",145,0)
 S RAN=RAN+1 D OBXPRC^RAHLRU
"RTN","RAHLRPT",146,0)
 Q
"RTN","RAHLRPT",147,0)
OBXTCM ; Compile 'OBX' Segment for Tech Comments
"RTN","RAHLRPT",148,0)
 D OBXTCM^RAHLRU
"RTN","RAHLRPT",149,0)
 Q
"RTN","RAHLRPT",150,0)
OBXRPT ;Compile 'OBX' Segment for Radiology Report Text
"RTN","RAHLRPT",151,0)
 I '$O(^RARPT(RARPT,"R",0)) S RAN=RAN+1,HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"R"_$E(HLECH)_"REPORT"_$E(HLECH)_"L"_HLFS_HLFS_"None Entered" D OBX11^RAHLRU Q
"RTN","RAHLRPT",152,0)
 K ^UTILITY($J,"W") S DIWF="",DIWR=80,DIWL=1 F RAI=0:0 S RAI=$O(^RARPT(RARPT,"R",RAI)) Q:'RAI  I $D(^(RAI,0)) S X=^(0) D ^DIWP
"RTN","RAHLRPT",153,0)
 F RAI=0:0 S RAI=$O(^UTILITY($J,"W",DIWL,RAI)) Q:'RAI  I $D(^(RAI,0)) S RAN=RAN+1,HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"R"_$E(HLECH)_"REPORT"_$E(HLECH)_"L"_HLFS_HLFS_^(0) D OBX11^RAHLRU
"RTN","RAHLRPT",154,0)
 ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRPT",155,0)
 ; F RAI=0:0 S RAI=$O(^UTILITY($J,"W",DIWL,RAI)) Q:'RAI  I $D(^(RAI,0)) S RAN=RAN+1,HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"R"_$E(HLECH)_"REPORT"_$E(HLECH)_"L"_HLFS_HLFS_$$ESCAPE^RAHLRU(^(0)) D OBX11^RAHLRU
"RTN","RAHLRPT",156,0)
 Q
"RTN","RAHLRPT",157,0)
PID ;Compile 'PID' Segment
"RTN","RAHLRPT",158,0)
 I HL("VER")']"2.2" D
"RTN","RAHLRPT",159,0)
 .S X1="",X1="PID"_HLFS_HLFS_$G(VA("PID"))_HLFS_Y_HLFS_HLFS S X=VADM(1),Y=$$HLNAME^HLFNC(X) S X1=X1_Y_HLFS_HLFS
"RTN","RAHLRPT",160,0)
 .S X=RAVADM(3),Y=$$HLDATE^HLFNC(X) S X1=X1_Y_HLFS_$S(VADM(5)]"":$S("MF"[$P(VADM(5),"^"):$P(VADM(5),"^"),1:"O"),1:"U") S:$P(VADM(2),"^")]"" $P(X1,HLFS,20)=$P(VADM(2),"^") S RAN=RAN+1,HLA("HLS",RAN)=X1
"RTN","RAHLRPT",161,0)
 I HL("VER")]"2.2" S RAN=RAN+1,HLA("HLS",RAN)=$$EN^VAFHLPID(DFN,"2,3,5,7,8,19,20")
"RTN","RAHLRPT",162,0)
 Q
"RTN","RAHLRPT",163,0)
SETUP ; Setup basic examination information
"RTN","RAHLRPT",164,0)
 S:RASET RACN0=^RADPT(RADFN,"DT",RADTI,"P",RACNI,0)
"RTN","RAHLRPT",165,0)
 S RADTE0=9999999.9999-RADTI,RADTECN=$E(RADTE0,4,7)_$E(RADTE0,2,3)_"-"_+RACN0,RARPT0=^RARPT(RARPT,0)
"RTN","RAHLRPT",166,0)
 S RAPROC=+$P(RACN0,U,2),RAPROCIT=+$P($G(^RAMIS(71,RAPROC,0)),U,12),RAPROCIT=$P(^RA(79.2,RAPROCIT,0),U,1)
"RTN","RAHLRPT",167,0)
 S RAPRCNDE=$G(^RAMIS(71,+RAPROC,0)),RACPT=+$P(RAPRCNDE,U,9)
"RTN","RAHLRPT",168,0)
 S RACPTNDE=$$NAMCODE^RACPTMSC(RACPT,DT)
"RTN","RAHLRPT",169,0)
 S Y=$$HLDATE^HLFNC(RADTE0) S RADTE0=$S(Y:Y,1:HLQ),Y=$$M11^HLFNC(RADFN)
"RTN","RAHLRPT",170,0)
 Q
"RTN","RAHLRU")
0^6^B28042615^B11355538
"RTN","RAHLRU",1,0)
RAHLRU ;HISC/SWM - utilities for HL7 messaging ;03/16/98  11:03
"RTN","RAHLRU",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**10,25,81**;Mar 16, 1998;Build 12
"RTN","RAHLRU",3,0)
 ;
"RTN","RAHLRU",4,0)
 ;IA 2701 used to store ICN in PID-3 ($$GETICN^MPIF001)
"RTN","RAHLRU",5,0)
 ;IA 3630 used to build the PID segment for our ORM & ORU HL7 messages
"RTN","RAHLRU",6,0)
 ;
"RTN","RAHLRU",7,0)
OBX11 ; set OBX-11, = 12th piece of string where piece 1 is "OBX"
"RTN","RAHLRU",8,0)
 N RARPTIEN,Y
"RTN","RAHLRU",9,0)
 S RARPTIEN=+$G(RARPT)
"RTN","RAHLRU",10,0)
 S Y=$P($G(^RARPT(RARPTIEN,0)),U,5)
"RTN","RAHLRU",11,0)
 S $P(HLA("HLS",RAN),HLFS,12)=$S(Y="R":"P",Y="V":"F",1:"I")
"RTN","RAHLRU",12,0)
 I $D(^RARPT(RARPTIEN,"ERR")) D  Q
"RTN","RAHLRU",13,0)
 .S $P(HLA("HLS",RAN),HLFS,12)="C"
"RTN","RAHLRU",14,0)
 Q
"RTN","RAHLRU",15,0)
 ;
"RTN","RAHLRU",16,0)
ESCAPE(XDTA) ;apply the appropriate escape sequence to a string of data
"RTN","RAHLRU",17,0)
 ; Insert a escape sequence place holder, then swap the escape sequence
"RTN","RAHLRU",18,0)
 ; place holder with the real escape sequence. This action requires two
"RTN","RAHLRU",19,0)
 ; passes because the escape sequence uses the escape ("\") character.
"RTN","RAHLRU",20,0)
 ; Input:  XDTA=data string to be escaped (if necessary)
"RTN","RAHLRU",21,0)
 ;         HLFS=field separator     (global scope; set in INIT^RAHLR)
"RTN","RAHLRU",22,0)
 ;        HLECH=encoding characters (global scope; set in INIT^RAHLR)
"RTN","RAHLRU",23,0)
 ; Return: XDTA=an escaped data string
"RTN","RAHLRU",24,0)
 ;
"RTN","RAHLRU",25,0)
 N UFS,UCS,URS,UEC,USS ;field, component, repetition, escape, & subcomponent
"RTN","RAHLRU",26,0)
 S UFS=HLFS,UCS=$E(HLECH),URS=$E(HLECH,2),UEC=$E(HLECH,3),USS=$E(HLECH,4)
"RTN","RAHLRU",27,0)
 F  Q:XDTA'[UFS  S XDTA=$P(XDTA,UFS)_$C(1)_$P(XDTA,UFS,2,999)
"RTN","RAHLRU",28,0)
 F  Q:XDTA'[UCS  S XDTA=$P(XDTA,UCS)_$C(2)_$P(XDTA,UCS,2,999)
"RTN","RAHLRU",29,0)
 F  Q:XDTA'[URS  S XDTA=$P(XDTA,URS)_$C(3)_$P(XDTA,URS,2,999)
"RTN","RAHLRU",30,0)
 F  Q:XDTA'[UEC  S XDTA=$P(XDTA,UEC)_$C(4)_$P(XDTA,UEC,2,999)
"RTN","RAHLRU",31,0)
 F  Q:XDTA'[USS  S XDTA=$P(XDTA,USS)_$C(5)_$P(XDTA,USS,2,999)
"RTN","RAHLRU",32,0)
 F  Q:XDTA'[$C(1)  S XDTA=$P(XDTA,$C(1))_UEC_"F"_UEC_$P(XDTA,$C(1),2,999)
"RTN","RAHLRU",33,0)
 F  Q:XDTA'[$C(2)  S XDTA=$P(XDTA,$C(2))_UEC_"S"_UEC_$P(XDTA,$C(2),2,999)
"RTN","RAHLRU",34,0)
 F  Q:XDTA'[$C(3)  S XDTA=$P(XDTA,$C(3))_UEC_"R"_UEC_$P(XDTA,$C(3),2,999)
"RTN","RAHLRU",35,0)
 F  Q:XDTA'[$C(4)  S XDTA=$P(XDTA,$C(4))_UEC_"E"_UEC_$P(XDTA,$C(4),2,999)
"RTN","RAHLRU",36,0)
 F  Q:XDTA'[$C(5)  S XDTA=$P(XDTA,$C(5))_UEC_"T"_UEC_$P(XDTA,$C(5),2,999)
"RTN","RAHLRU",37,0)
 Q XDTA
"RTN","RAHLRU",38,0)
 ;
"RTN","RAHLRU",39,0)
 ;
"RTN","RAHLRU",40,0)
 ;ESCAPE(STR)    ;'Escape out' the formatting codes in data strings...
"RTN","RAHLRU",41,0)
 ; Input: Where STR is the data string to 'escape out'.
"RTN","RAHLRU",42,0)
 ;    ex: "this is a test case^"
"RTN","RAHLRU",43,0)
 ;Output: "this is a test case\S\"
"RTN","RAHLRU",44,0)
 ;
"RTN","RAHLRU",45,0)
 ;assuming the following as our encoding characters (HLECH): "^~\&" 
"RTN","RAHLRU",46,0)
 ;encoding character position, character representations, & escape seq
"RTN","RAHLRU",47,0)
 ;1) component separator    "^"  \S\
"RTN","RAHLRU",48,0)
 ;2) repetition separator   "~"  \R\
"RTN","RAHLRU",49,0)
 ;3) escape character       "\"  \E\
"RTN","RAHLRU",50,0)
 ;4) subcomponent separator "&"  \T\
"RTN","RAHLRU",51,0)
 ;
"RTN","RAHLRU",52,0)
 ;assuming the following as our field separator (HLFS): "|" the escape
"RTN","RAHLRU",53,0)
 ;sequence is: \F\. All of the following can be embedded in data, so
"RTN","RAHLRU",54,0)
 ;field separator and encoding characters have to be converted to the
"RTN","RAHLRU",55,0)
 ;correct formatting codes (escape sequences). We'll accomplish this by
"RTN","RAHLRU",56,0)
 ;concatenating the field separator string to the encoding character
"RTN","RAHLRU",57,0)
 ;string (ENCDE).
"RTN","RAHLRU",58,0)
 ;
"RTN","RAHLRU",59,0)
 ;Q:STR="" STR ;no string to escape...
"RTN","RAHLRU",60,0)
 ;N BUF,ESC,CH,I1,I2,ENCDE S ENCDE=HLFS_HLECH
"RTN","RAHLRU",61,0)
 ;--- Find all occurences of field separator & encoding
"RTN","RAHLRU",62,0)
 ;--- characters; save their positions to a local array
"RTN","RAHLRU",63,0)
 ;F I1=1:1:5  D
"RTN","RAHLRU",64,0)
 ;. S CH=$E(ENCDE,I1),I2=1
"RTN","RAHLRU",65,0)
 ;. F  S I2=$F(STR,CH,I2)  Q:'I2  S BUF(I2-1)=I1
"RTN","RAHLRU",66,0)
 ;Q:$D(BUF)<10 STR
"RTN","RAHLRU",67,0)
 ;--- Replace HL7 field separator & encoding chars with formatting codes
"RTN","RAHLRU",68,0)
 ;S (BUF,I2)="",ESC=$E(HLECH,3)  S:ESC="" ESC="\"
"RTN","RAHLRU",69,0)
 ;F  S I1=I2,I2=$O(BUF(I2))  Q:I2=""  D
"RTN","RAHLRU",70,0)
 ;. S BUF=BUF_$E(STR,I1+1,I2-1)_ESC_$E("FSRET",BUF(I2))_ESC
"RTN","RAHLRU",71,0)
 ;Q BUF_$E(STR,I1+1,$L(STR))
"RTN","RAHLRU",72,0)
 ;
"RTN","RAHLRU",73,0)
OBXPRC ;Compile 'OBX' Segment for Procedure
"RTN","RAHLRU",74,0)
 S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"P"_$E(HLECH)_"PROCEDURE"_$E(HLECH)_"L"_HLFS_HLFS_$P(RACN0,"^",2)
"RTN","RAHLRU",75,0)
 S X=$S($D(^RAMIS(71,+$P(RACN0,"^",2),0)):$P(^(0),"^"),1:""),HLA("HLS",RAN)=HLA("HLS",RAN)_$E(HLECH)_X_$E(HLECH)_"L" D OBX11
"RTN","RAHLRU",76,0)
 ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRU",77,0)
 ; S X=$S($D(^RAMIS(71,+$P(RACN0,"^",2),0)):$P(^(0),"^"),1:""),HLA("HLS",RAN)=HLA("HLS",RAN)_$E(HLECH)_$$ESCAPE(X)_$E(HLECH)_"L" D OBX11
"RTN","RAHLRU",78,0)
 Q
"RTN","RAHLRU",79,0)
OBXMOD ; Compile 'OBX' segments for both types of modifiers
"RTN","RAHLRU",80,0)
 ; Procedure modifiers
"RTN","RAHLRU",81,0)
 N X3
"RTN","RAHLRU",82,0)
 D MODS^RAUTL2 S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"M"_$E(HLECH)_"MODIFIERS"_$E(HLECH)_"L"_HLFS_HLFS_Y D OBX11
"RTN","RAHLRU",83,0)
 Q:Y(1)="None"
"RTN","RAHLRU",84,0)
 ; CPT Modifiers
"RTN","RAHLRU",85,0)
 F RAI=1:1 S X0=$P(Y(1),", ",RAI),X1=$P(Y(2),", ",RAI) Q:X0=""  D
"RTN","RAHLRU",86,0)
 . S RAN=RAN+1
"RTN","RAHLRU",87,0)
 . S X3=$$BASICMOD^RACPTMSC(X1,DT)
"RTN","RAHLRU",88,0)
 . S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"C4"_$E(HLECH)_"CPT MODIFIERS"_$E(HLECH)_"C4"_HLFS_HLFS_X0_$E(HLECH)_$P(X3,"^",3)_$E(HLECH)_"C4"
"RTN","RAHLRU",89,0)
 . ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRU",90,0)
 . ;S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"CE"_HLFS_"C4"_$E(HLECH)_"CPT MODIFIERS"_$E(HLECH)_"C4"_HLFS_HLFS_X0_$E(HLECH)_$$ESCAPE($P(X3,"^",3))_$E(HLECH)_"C4"
"RTN","RAHLRU",91,0)
 . I $P(X3,"^",4)]"" S HLA("HLS",RAN)=HLA("HLS",RAN)_$E(HLECH)_$P(X3,"^",4)_$E(HLECH)_$P(X3,"^",3)_$E(HLECH)_"C4"
"RTN","RAHLRU",92,0)
 . ; Replace above with following when Imaging can cope with ESC chars
"RTN","RAHLRU",93,0)
 . ;I $P(X3,"^",4)]"" S HLA("HLS",RAN)=HLA("HLS",RAN)_$E(HLECH)_$P(X3,"^",4)_$E(HLECH)_$$ESCAPE($P(X3,"^",3))_$E(HLECH)_"C4"
"RTN","RAHLRU",94,0)
 . D OBX11
"RTN","RAHLRU",95,0)
 . Q
"RTN","RAHLRU",96,0)
 Q
"RTN","RAHLRU",97,0)
 ;
"RTN","RAHLRU",98,0)
OBXTCM ; Compile 'OBX' segment for latest TECH COMMENT
"RTN","RAHLRU",99,0)
 ;
"RTN","RAHLRU",100,0)
 ; Only Released version of Imaging 2.5 able to handle Tech Comments
"RTN","RAHLRU",101,0)
 Q:'($$PATCH^XPDUTL("MAG*2.5*1")!(+$$VERSION^XPDUTL("MAG")>2.5))
"RTN","RAHLRU",102,0)
 ;
"RTN","RAHLRU",103,0)
 N X4,X3
"RTN","RAHLRU",104,0)
 S X4=$$GETTCOM^RAUTL11(RADFN,RADTI,RACNI)
"RTN","RAHLRU",105,0)
 Q:X4=""
"RTN","RAHLRU",106,0)
 S RAN=RAN+1
"RTN","RAHLRU",107,0)
 S HLA("HLS",RAN)="OBX"_HLFS_HLFS_"TX"_HLFS_"TCM"_$E(HLECH)_"TECH COMMENT"_$E(HLECH)_"L"_HLFS_HLFS
"RTN","RAHLRU",108,0)
 D OBX11
"RTN","RAHLRU",109,0)
 I $L(X4)+$L(HLA("HLS",RAN))'>245 D  Q
"RTN","RAHLRU",110,0)
 .S $P(HLA("HLS",RAN),HLFS,6)=X4
"RTN","RAHLRU",111,0)
 ;
"RTN","RAHLRU",112,0)
 ; If Tech Comment is v. long it will need to be
"RTN","RAHLRU",113,0)
 ; split into two parts. Do not split words if possible....
"RTN","RAHLRU",114,0)
 ;
"RTN","RAHLRU",115,0)
 S X3=$E(X4,1,245-$L(HLA("HLS",RAN)))
"RTN","RAHLRU",116,0)
 I $L(X3," ")>1 S X3=$P(X3," ",1,$L(X3," ")-1)
"RTN","RAHLRU",117,0)
 S X4=$P(X4,X3,2)
"RTN","RAHLRU",118,0)
 S $P(HLA("HLS",RAN),HLFS,6)=X3
"RTN","RAHLRU",119,0)
 S HLA("HLS",RAN,1)=X4_HLFS_$P(HLA("HLS",RAN),HLFS,7,12)
"RTN","RAHLRU",120,0)
 S HLA("HLS",RAN)=$P(HLA("HLS",RAN),HLFS,1,6)
"RTN","RAHLRU",121,0)
 Q
"RTN","RAHLRU",122,0)
 ;
"RTN","RAHLRU",123,0)
INIT ; initialize HL7 variables; called from RAHLR & RAHLRPT
"RTN","RAHLRU",124,0)
 Q:'$G(RAEID)  ;undefined server application
"RTN","RAHLRU",125,0)
 S HLDT=$$NOW^XLFDT(),HLDT1=$$HLDATE^HLFNC(HLDT),EID=RAEID
"RTN","RAHLRU",126,0)
 S HL="HLS(""HLS"")",INT=1
"RTN","RAHLRU",127,0)
 D INIT^HLFNC2(EID,.HL,INT)
"RTN","RAHLRU",128,0)
 Q:'$D(HL("Q"))  ;improperly defined server application
"RTN","RAHLRU",129,0)
 S HLQ=HL("Q"),HLFS=HL("FS"),HLECH=HL("ECH") K EID,INT
"RTN","RAHLRU",130,0)
 Q
"RTN","RAHLRU",131,0)
 ;
"RTN","RAHLRU",132,0)
DOB(X) ;strip off trailing "0"'s from the date of birth
"RTN","RAHLRU",133,0)
 I $E(X,5,6)="00" S X=$E(X,1,4) ;if no month then no day, return year
"RTN","RAHLRU",134,0)
 E  I $E(X,7,8)="00" S X=$E(X,1,6) ;if month & no day, return month/year
"RTN","RAHLRU",135,0)
 Q X
"RTN","RAHLRU",136,0)
 ;
"RTN","RAHLRU",137,0)
CPTMOD(RAIEN,HLECH,DT) ;return OBX-5 as it pertains to CPT Modifiers
"RTN","RAHLRU",138,0)
 ;called from: RAHLRPT1 & RAHLR2
"RTN","RAHLRU",139,0)
 ;input: RAIEN=IEN of the record in file 81.3
"RTN","RAHLRU",140,0)
 ;       HLECH=HL7 encoding characters
"RTN","RAHLRU",141,0)
 ;          DT=today's date
"RTN","RAHLRU",142,0)
 N X S X=$$BASICMOD^RACPTMSC(RAIEN,DT)
"RTN","RAHLRU",143,0)
 ;1st piece=IEN #81.3; 3rd piece=versioned name; 5th piece=coding sys
"RTN","RAHLRU",144,0)
 Q RAIEN_$E(HLECH,1)_$$ESCAPE^RAHLRU($P(X,U,3))_$E(HLECH,1)_$P(X,U,5)
"RTN","RAHLRU",145,0)
GETSFLAG(SAN,MTN,ETN,VER) ;Return HL nessage flag (79.721,1)
"RTN","RAHLRU",146,0)
 Q:'$L(SAN)!'$L(MTN)!'$L(ETN)!'$L(VER) 0
"RTN","RAHLRU",147,0)
 S SAN=$O(^HL(771,"B",SAN,0)) Q:'SAN 0
"RTN","RAHLRU",148,0)
 S MTN=$O(^HL(771.2,"B",MTN,0)) Q:'MTN 0
"RTN","RAHLRU",149,0)
 S ETN=$O(^HL(779.001,"B",ETN,0)) Q:'ETN 0
"RTN","RAHLRU",150,0)
 S VER=$O(^HL(771.5,"B",VER,0)) Q:'VER 0
"RTN","RAHLRU",151,0)
 Q +$P($G(^RA(79.7,SAN,1,MTN,1,ETN,1,VER,0)),U,2)
"RTN","RAHLTCPB")
0^1^B61371898^B57781715
"RTN","RAHLTCPB",1,0)
RAHLTCPB ; HIRMFO/REL,GJC,BNT,PAV - Rad/Nuc Med HL7 TCP/IP Bridge;05/21/99
"RTN","RAHLTCPB",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**12,17,25,51,71,81**;Mar 16, 1998;Build 12
"RTN","RAHLTCPB",3,0)
 ; 07/05/2006 BAY/KAM Remedy Call 124379 Eliminate unneeded ORM msgs
"RTN","RAHLTCPB",4,0)
 ; 09/01/2006   Acomodate multiplr ORC/OBR segments Patch 81
"RTN","RAHLTCPB",5,0)
EN1 ; Build the ^TMP("RARPT-REC" global when we receive the
"RTN","RAHLTCPB",6,0)
 ; 07/05/2006 Remedy Call 124379 message from HL7. If RAHLTCPB is defined, do not broadcast ORM messages. As of the writing
"RTN","RAHLTCPB",7,0)
 ; of patch 71, RAHLTCPB is referenced in RAHLTCPB, UPSTAT^RAUTL0, & UP2^RAUTL1
"RTN","RAHLTCPB",8,0)
 ;G:$G(HL("VER"))]"2.3" EN1^RAHLTCPX
"RTN","RAHLTCPB",9,0)
 S RASUB=HL("MID"),RAHLTCPB=1 K RAERR
"RTN","RAHLTCPB",10,0)
 ;**********************************************
"RTN","RAHLTCPB",11,0)
 ;RACN is Counter - Indication that ORC segment present
"RTN","RAHLTCPB",12,0)
 N RACN,II,L,RAPRSET,RARRR,XX,RAHLD,RARSDNT,RATRSCRP S (RACN,RAPRSET)=0 ; = Address where we go to store data...
"RTN","RAHLTCPB",13,0)
 ;**********************************************
"RTN","RAHLTCPB",14,0)
 K ^TMP("RARPT-HL7",$J) ; clean area that holds data from HL7
"RTN","RAHLTCPB",15,0)
 K ^TMP("RARPT-REC",$J,RASUB) ; kill storage area for new HL7 message id
"RTN","RAHLTCPB",16,0)
 S ^TMP("RARPT-REC",$J,RASUB,"RADATE")=$$DT^XLFDT()
"RTN","RAHLTCPB",17,0)
 F I=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","RAHLTCPB",18,0)
 .I '$L(HLNODE),$L($G(HLNODE(1))) S HLNODE=HLNODE(1) K HLNODE(1) F J=2:1 Q:'$D(HLNODE(J))  S HLNODE(J-1)=HLNODE(J) K HLNODE(J)
"RTN","RAHLTCPB",19,0)
 .S ^TMP("RARPT-HL7",$J,I)=HLNODE,J=0 F  S J=$O(HLNODE(J)) Q:'J  S ^TMP("RARPT-HL7",$J,I,J)=HLNODE(J)
"RTN","RAHLTCPB",20,0)
 S CNT=2,SEGMNT=$G(^TMP("RARPT-HL7",$J,CNT))
"RTN","RAHLTCPB",21,0)
 S:'$$GETSFLAG^RAHLRU($G(HL("SAN")),$G(HL("MTN")),$G(HL("ETN")),$G(HL("VER"))) RANOSEND=$G(HL("SAN"))
"RTN","RAHLTCPB",22,0)
 S ^TMP("RARPT-REC",$J,RASUB,"VENDOR")=$G(HL("SAN"))
"RTN","RAHLTCPB",23,0)
PID ; Pick data off the 'PID' segment.
"RTN","RAHLTCPB",24,0)
 I $P(SEGMNT,HL("FS"))="PID" D
"RTN","RAHLTCPB",25,0)
 . S SEGMNT=$P(SEGMNT,HL("FS"),2,99999)
"RTN","RAHLTCPB",26,0)
 . I $P($P(SEGMNT,HL("FS"),3),$E(HL("ECH")))]"" D
"RTN","RAHLTCPB",27,0)
 .. S (^TMP("RARPT-REC",$J,RASUB,"RADFN"),RADFN)=$P($P(SEGMNT,HL("FS"),3),$E(HL("ECH")))
"RTN","RAHLTCPB",28,0)
 .. Q
"RTN","RAHLTCPB",29,0)
 . I $P(SEGMNT,HL("FS"),19)]"" D
"RTN","RAHLTCPB",30,0)
 .. S ^TMP("RARPT-REC",$J,RASUB,"RASSN")=$P(SEGMNT,HL("FS"),19)
"RTN","RAHLTCPB",31,0)
 .. Q
"RTN","RAHLTCPB",32,0)
 . Q
"RTN","RAHLTCPB",33,0)
 E  S RAERR="Missing PID segment" D XIT Q
"RTN","RAHLTCPB",34,0)
 I '(+$G(^TMP("RARPT-REC",$J,RASUB,"RADFN"))) D  Q
"RTN","RAHLTCPB",35,0)
 .S RAERR="Invalid Patient ID"
"RTN","RAHLTCPB",36,0)
 .D XIT
"RTN","RAHLTCPB",37,0)
 ; Save off E-Sig information (if it exists)
"RTN","RAHLTCPB",38,0)
 S:$D(HL("ESIG")) ^TMP("RARPT-REC",$J,RASUB,"RAESIG")=HL("ESIG")
"RTN","RAHLTCPB",39,0)
 ;********************************
"RTN","RAHLTCPB",40,0)
ORC ; Pick data off the 'ORC' segment.
"RTN","RAHLTCPB",41,0)
 D
"RTN","RAHLTCPB",42,0)
 .N CNT1 S CNT1=CNT,RARRR=""
"RTN","RAHLTCPB",43,0)
111 .K SEGMNT S CNT1=$O(^TMP("RARPT-HL7",$J,CNT1)) Q:CNT1=""  S SEGMNT=$G(^(CNT1))
"RTN","RAHLTCPB",44,0)
 .I $P(SEGMNT,HL("FS"))="PV1" S CNT=CNT1 G 111
"RTN","RAHLTCPB",45,0)
 .Q:$P(SEGMNT,HL("FS"))'="ORC"
"RTN","RAHLTCPB",46,0)
 .S CNT=CNT1 Q:$P(SEGMNT,HL("FS"),2)'="CN"  ; find the 'ORC' segment
"RTN","RAHLTCPB",47,0)
 .S RACN=RACN+1,RARRR="RARPT-REC-"_RACN
"RTN","RAHLTCPB",48,0)
 ;********************************
"RTN","RAHLTCPB",49,0)
OBR ; Pick data off the 'OBR' segment.
"RTN","RAHLTCPB",50,0)
 I $L(RARRR) K ^TMP(RARRR,$J) M ^TMP(RARRR,$J)=^TMP("RARPT-REC",$J) ;Merge if OBR without Report
"RTN","RAHLTCPB",51,0)
 S:'$L(RARRR) RARRR="RARPT-REC"
"RTN","RAHLTCPB",52,0)
 K SEGMNT F  S CNT=$O(^TMP("RARPT-HL7",$J,CNT)) Q:CNT=""  S SEGMNT=$G(^(CNT)) Q:$P(SEGMNT,HL("FS"))="OBR"  ; find the 'OBR' segment
"RTN","RAHLTCPB",53,0)
 I $P($G(SEGMNT),HL("FS"))'="OBR" S RAERR="Missing OBR segment" D XIT Q
"RTN","RAHLTCPB",54,0)
 S SEGMNT=$P(SEGMNT,HL("FS"),2,99999) K RADTI,RACNI
"RTN","RAHLTCPB",55,0)
 I $P(SEGMNT,HL("FS"),3)]"" D
"RTN","RAHLTCPB",56,0)
 . N RADTCN S RADTCN=$P(SEGMNT,HL("FS"),3)
"RTN","RAHLTCPB",57,0)
 . S:$P($P(RADTCN,$E(HL("ECH"))),"-")]"" (^TMP(RARRR,$J,RASUB,"RADTI"),RADTI)=$P($P(RADTCN,$E(HL("ECH"))),"-")
"RTN","RAHLTCPB",58,0)
 . S:$P($P(RADTCN,$E(HL("ECH"))),"-",2)]"" (^TMP(RARRR,$J,RASUB,"RACNI"),RACNI)=$P($P(RADTCN,$E(HL("ECH"))),"-",2)
"RTN","RAHLTCPB",59,0)
 . S:$P(RADTCN,$E(HL("ECH")),2)["&L" RADTCN=$TR(RADTCN,"&","^")
"RTN","RAHLTCPB",60,0)
 . S:$P(RADTCN,$E(HL("ECH")),2)]"" ^TMP(RARRR,$J,RASUB,"RALONGCN")=$P(RADTCN,$E(HL("ECH")),2)
"RTN","RAHLTCPB",61,0)
 . Q
"RTN","RAHLTCPB",62,0)
 S RAHLD=$$PCEXTR^RAHLO4(CNT,SEGMNT,25,HL("FS")) K RAHL70
"RTN","RAHLTCPB",63,0)
 I RAHLD="" S RAERR="Missing Report Status" D XIT Q
"RTN","RAHLTCPB",64,0)
 I "AFR"'[RAHLD S RAERR="Invalid Report Status" D XIT Q
"RTN","RAHLTCPB",65,0)
 S ^TMP(RARRR,$J,RASUB,"RASTAT")=RAHLD
"RTN","RAHLTCPB",66,0)
 G:$P(RARRR,"-",3) 112 S RAHLD=$$PCEXTR^RAHLO4(CNT,SEGMNT,32,HL("FS")) K RAHL70
"RTN","RAHLTCPB",67,0)
 I RAHLD']"" S RAERR="Missing Provider ID" D XIT Q
"RTN","RAHLTCPB",68,0)
 S RAVERF=RAHLD
"RTN","RAHLTCPB",69,0)
 ; -----   Check the validity of the provider name   -----
"RTN","RAHLTCPB",70,0)
 I '$D(^VA(200,"B",RAVERF)) D  ; check for a partial match in file 200
"RTN","RAHLTCPB",71,0)
 . D VFIER^RAHLO3 ; if one partial match found, return the entry ien
"RTN","RAHLTCPB",72,0)
 E  D  ; $D(^VA(200,"B",RAVERF)) true, get the entry ien
"RTN","RAHLTCPB",73,0)
 . S RAVERF=$O(^VA(200,"B",RAVERF,0))
"RTN","RAHLTCPB",74,0)
 . S:'RAVERF RAERR="Invalid Provider Name"
"RTN","RAHLTCPB",75,0)
 ; can't get resident info from medspeak
"RTN","RAHLTCPB",76,0)
 S RAHLD=$$PCEXTR^RAHLO4(CNT,SEGMNT,33,HL("FS")),RARSDNT="" K RAHL70
"RTN","RAHLTCPB",77,0)
 I RAHLD]"" D
"RTN","RAHLTCPB",78,0)
 . S RARSDNT=$P(RAHLD,$E(HL("ECH"),4)) I '$D(^VA(200,+RARSDNT,0)) S RARSDNT=""
"RTN","RAHLTCPB",79,0)
 S RAHLD="",RAHLD=$$PCEXTR^RAHLO4(CNT,SEGMNT,35,HL("FS")),RATRSCRP="" K RAHL70
"RTN","RAHLTCPB",80,0)
 I RAHLD]"" D
"RTN","RAHLTCPB",81,0)
 . S RATRSCRP=$P(RAHLD,$E(HL("ECH"),4)) I '$D(^VA(200,+RATRSCRP,0)) S RATRSCRP=""
"RTN","RAHLTCPB",82,0)
 S ^TMP(RARRR,$J,RASUB,"RAVERF")=RAVERF
"RTN","RAHLTCPB",83,0)
 S ^TMP(RARRR,$J,RASUB,"RATRANSCRIPT")=$S(RATRSCRP]"":RATRSCRP,RARSDNT]"":RARSDNT,1:RAVERF)
"RTN","RAHLTCPB",84,0)
 S:$G(RARSDNT) ^TMP(RARRR,$J,RASUB,"RARESIDENT")=RARSDNT
"RTN","RAHLTCPB",85,0)
 S ^TMP(RARRR,$J,RASUB,"RASTAFF")=RAVERF,^("RAWHOCHANGE")=RAVERF
"RTN","RAHLTCPB",86,0)
 I $D(RAERR) D XIT Q
"RTN","RAHLTCPB",87,0)
 D ESIG^RAHLO3
"RTN","RAHLTCPB",88,0)
 ;If last OBR set provider info to all OBRs
"RTN","RAHLTCPB",89,0)
 K XX F I=1:1:RACN S XX=RARRR_"-"_I D:$D(^TMP(XX,$J,RASUB))
"RTN","RAHLTCPB",90,0)
 .N XXX M XXX=^TMP(XX,$J,RASUB),^TMP(XX,$J,RASUB)=^TMP(RARRR,$J,RASUB),^TMP(XX,$J,RASUB)=XXX
"RTN","RAHLTCPB",91,0)
112 I $D(RADTI),$D(RACNI),$D(RAPRSET(RADTI,RACNI)) K RAPRSET(RADTI,RACNI),^TMP(RARRR,$J) S RACN=RACN-1 G:$P(RARRR,"-",3) ORC M ^TMP(RARRR,$J)=^TMP("RARPT-REC-"_(RACN+1),$J) K ^TMP("RARPT-REC-"_(RACN+1),$J) G OBX
"RTN","RAHLTCPB",92,0)
 I $D(RADTI),'$D(RAPRSET(RADTI)) D  ;Get array of printset for date...
"RTN","RAHLTCPB",93,0)
 .N RAPRTSET,RACN,RASUB,CNT
"RTN","RAHLTCPB",94,0)
 .K XX D EN2^RAUTL20(.XX) M:$D(XX) RAPRSET(RADTI)=XX K RAPRSET(RADTI,RACNI)
"RTN","RAHLTCPB",95,0)
 ;
"RTN","RAHLTCPB",96,0)
OBX ; Pick data off the 'OBX' segments
"RTN","RAHLTCPB",97,0)
 K SEGMNT F  S CNT=$O(^TMP("RARPT-HL7",$J,CNT)) Q:CNT=""  S SEGMNT=$G(^(CNT)) D:$P(SEGMNT,HL("FS"))="OBX"  Q:$D(RAERR)  I $P(SEGMNT,HL("FS"))="ORC" S CNT=CNT-1 G ORC
"RTN","RAHLTCPB",98,0)
 . S SEGMNT=$P(SEGMNT,HL("FS"),2,9999)
"RTN","RAHLTCPB",99,0)
 . Q:SEGMNT?@("1"""_HL("FS")_"""."""_HL("FS")_"""")  ;Quit if OBX is something as:    OBX||||||||
"RTN","RAHLTCPB",100,0)
 . I $P(SEGMNT,HL("FS"),3)']"" S RAERR="Missing Observation Identifier" Q
"RTN","RAHLTCPB",101,0)
 . S OBXTYP=$P(SEGMNT,HL("FS"),3),OBXTYP=$E(OBXTYP,$F(OBXTYP,"&"))
"RTN","RAHLTCPB",102,0)
 . S OBX2CE=""
"RTN","RAHLTCPB",103,0)
 . S:OBXTYP="" OBXTYP=" "
"RTN","RAHLTCPB",104,0)
 . I OBXTYP=" "&($P(SEGMNT,HL("FS"),2)="CE") D
"RTN","RAHLTCPB",105,0)
 . . I $P(SEGMNT,HL("FS"),5)=" " S OBXTYP="F" Q
"RTN","RAHLTCPB",106,0)
 . . S OBX2CE=1,OBXTYP="D" Q
"RTN","RAHLTCPB",107,0)
 . I "IDRF"'[OBXTYP S RAERR="Invalid Observation Identifier" Q
"RTN","RAHLTCPB",108,0)
 . D RPT Q
"RTN","RAHLTCPB",109,0)
XIT ; RACKYES  Indicates that Ack will be sent on the last OBR segment or at Error condition.
"RTN","RAHLTCPB",110,0)
 N RACKYES
"RTN","RAHLTCPB",111,0)
 I $D(RAERR) S RACKYES=1 D EN1^RAHLEXF,GENACK G XIT1
"RTN","RAHLTCPB",112,0)
 I $D(^TMP("RARPT-REC",$J)) S:'RACN RACKYES=1 D  G:$D(RAERR) XIT1
"RTN","RAHLTCPB",113,0)
 .N RACN D EN1^RAHLO I $D(RAERR) S RACKYES=1 D EN1^RAHLEXF,GENACK
"RTN","RAHLTCPB",114,0)
 F II=1:1:RACN S RARRR="RARPT-REC-"_II D:$D(^TMP(RARRR,$J))  Q:$D(RAERR)
"RTN","RAHLTCPB",115,0)
 .K ^TMP("RARPT-REC",$J) M ^TMP("RARPT-REC",$J)=^TMP(RARRR,$J) K ^TMP(RARRR,$J)
"RTN","RAHLTCPB",116,0)
 .S RACKYES=(II=RACN) N II,RACN D EN1^RAHLO I $D(RAERR) S RACKYES=1 D EN1^RAHLEXF,GENACK
"RTN","RAHLTCPB",117,0)
XIT1 K ^TMP("RARPT-REC",$J) ; kill storage area for current HL7 message id
"RTN","RAHLTCPB",118,0)
 F II=1:1:RACN S RARRR="RARPT-REC-"_II K:$D(^TMP(RARRR,$J)) ^TMP(RARRR,$J)
"RTN","RAHLTCPB",119,0)
 K ^TMP("RARPT-HL7",$J) ; clean up HL7 storage
"RTN","RAHLTCPB",120,0)
 K CNT,OBXTYP,X1,LIN,RADATE,RADTCN,RAERR,RAESIG,RAHLD,RAHLTCPB,RANODE,RARCNT
"RTN","RAHLTCPB",121,0)
 K RAVERF,RASUB,SEGMNT,RANOSEND,MSA1,OBX2CE,RADX,RADX1,RADX2,RADX3
"RTN","RAHLTCPB",122,0)
 Q
"RTN","RAHLTCPB",123,0)
RPT ; Save off Report Text data.
"RTN","RAHLTCPB",124,0)
 N RAXADEDN
"RTN","RAHLTCPB",125,0)
 S RAXADEDN=^TMP("RARPT-REC",$J,RASUB,"RASTAT")
"RTN","RAHLTCPB",126,0)
 S RANODE=$S(OBXTYP="D":"RADX",OBXTYP="I":"RAIMP",1:"RATXT"),LIN=""
"RTN","RAHLTCPB",127,0)
 I OBX2CE D  Q
"RTN","RAHLTCPB",128,0)
 . S X=$P(SEGMNT,HL("FS"),5),RADX1=$P(X,$E(HL("ECH")))
"RTN","RAHLTCPB",129,0)
 . S LIN=RADX1,L=999 D P2 S LIN=X
"RTN","RAHLTCPB",130,0)
 . Q:X'["~"  F J=0:0 S J=$O(^TMP("RARPT-HL7",$J,CNT,J)) Q:'J  S X1=^(J),LIN=LIN_X1 Q
"RTN","RAHLTCPB",131,0)
 . S RADX=LIN,RADX2=$P($P(RADX,"~",2),"^") S:RADX2]"" LIN=RADX2 D P2
"RTN","RAHLTCPB",132,0)
 . S RADX3=$P($P(RADX,"~",3),"^") Q:RADX3']""  S LIN=RADX3 D P2 Q
"RTN","RAHLTCPB",133,0)
 S X=$P(SEGMNT,HL("FS"),5)
"RTN","RAHLTCPB",134,0)
 I X["\S\"!(X["\R\")!(X["\E\")!(X["\T\") D FORMAT
"RTN","RAHLTCPB",135,0)
 D PAR
"RTN","RAHLTCPB",136,0)
 F J=0:0 S J=$O(^TMP("RARPT-HL7",$J,CNT,J)) Q:'J  S X1=^(J),X=$E(X1,1,125) D PAR I $L(X1)>125 S X=$E(X1,126,999) D PAR
"RTN","RAHLTCPB",137,0)
 I X=""!(LIN'="") S L=999 D P2
"RTN","RAHLTCPB",138,0)
 Q
"RTN","RAHLTCPB",139,0)
FORMAT ; Format report text for Escape Character delimited codes.
"RTN","RAHLTCPB",140,0)
 S Y=X N T,Q
"RTN","RAHLTCPB",141,0)
 I Y["\S\" S Q=$F(Y,"\S\"),T=Q-4,X=$E(Y,1,T)_$E(HL("ECH"))_$E(Y,Q,$L(X)),Y=X
"RTN","RAHLTCPB",142,0)
 I Y["\R\" S Q=$F(Y,"\R\"),T=Q-4,X=$E(Y,1,T)_$E(HL("ECH"),2)_$E(Y,Q,$L(X)),Y=X
"RTN","RAHLTCPB",143,0)
 I Y["\E\" S Q=$F(Y,"\E\"),T=Q-4,X=$E(Y,1,T)_$E(HL("ECH"),3)_$E(Y,Q,$L(X)),Y=X
"RTN","RAHLTCPB",144,0)
 I Y["\T\" S Q=$F(Y,"\T\"),T=Q-4,X=$E(Y,1,T)_$E(HL("ECH"),4)_$E(Y,Q,$L(X)),Y=X
"RTN","RAHLTCPB",145,0)
 I X["\S\"!(X["\R\")!(X["\E\")!(X["\T\") D FORMAT
"RTN","RAHLTCPB",146,0)
 Q
"RTN","RAHLTCPB",147,0)
PAR ; Build text paragraph
"RTN","RAHLTCPB",148,0)
 S LIN=LIN_X
"RTN","RAHLTCPB",149,0)
P1 I $L(LIN)<80 Q
"RTN","RAHLTCPB",150,0)
 F L=80:-1:1 Q:$E(LIN,L)=" "
"RTN","RAHLTCPB",151,0)
 D P2 S LIN=$E(LIN,L+1,999) G P1
"RTN","RAHLTCPB",152,0)
P2 ; Set node
"RTN","RAHLTCPB",153,0)
 ; If Addendum and Report text is a space don't process
"RTN","RAHLTCPB",154,0)
 I $P(SEGMNT,HL("FS"),1)=1,RAXADEDN="A",RANODE="RATXT",$E(LIN,1,L-1)=" " Q
"RTN","RAHLTCPB",155,0)
 S RARCNT(OBXTYP)=$G(RARCNT(OBXTYP))+1
"RTN","RAHLTCPB",156,0)
 S ^TMP("RARPT-REC",$J,RASUB,RANODE,RARCNT(OBXTYP))=$E(LIN,1,L-1)
"RTN","RAHLTCPB",157,0)
 F I=1:1:RACN S RARRR="RARPT-REC-"_I S:$D(^TMP(RARRR,$J)) ^TMP(RARRR,$J,RASUB,RANODE,RARCNT(OBXTYP))=$E(LIN,1,L-1)
"RTN","RAHLTCPB",158,0)
 Q
"RTN","RAHLTCPB",159,0)
 ;
"RTN","RAHLTCPB",160,0)
GENACK ; Compile the 'ACK' segment, generate the 'ACK' message.
"RTN","RAHLTCPB",161,0)
 Q:'$G(RACKYES)
"RTN","RAHLTCPB",162,0)
 S MSA1="AA"
"RTN","RAHLTCPB",163,0)
 Q:$E($G(HL("SAN")),1,3)'="RA-"  ; Don't allow non RA namespaced interfaces
"RTN","RAHLTCPB",164,0)
 I $D(RAERR) S MSA1=$S($G(HL("SAN"))="RA-PSCRIBE-TCP":"AE",1:"AR")
"RTN","RAHLTCPB",165,0)
 ; Added next line to support MedSpeak interface.  Must re-initialize
"RTN","RAHLTCPB",166,0)
 ; FS and EC's before sending ACK.
"RTN","RAHLTCPB",167,0)
 D:$G(HL("SAN"))="RA-CLIENT-TCP" INIT^HLFNC2("RA VOICE TCP SERVER RPT",.HL)
"RTN","RAHLTCPB",168,0)
 S HLA("HLA",1)="MSA"_HL("FS")_MSA1_HL("FS")_HL("MID")_$S($D(RAERR):HL("FS")_RAERR,1:"")
"RTN","RAHLTCPB",169,0)
 ; 06/22/2006 KAM CHANGED NEXT TWO LINES FOR RA*5*71
"RTN","RAHLTCPB",170,0)
 S HLEID=HL("EID"),HLEIDS=HL("EIDS"),HLARYTYP="LM",HLFORMAT=1
"RTN","RAHLTCPB",171,0)
 K HLRESLT D GENACK^HLMA1(HLEID,HLMTIENS,HLEIDS,HLARYTYP,HLFORMAT)
"RTN","RAHLTCPB",172,0)
 Q
"SEC","^DIC",79.7,79.7,0,"AUDIT")
#
"SEC","^DIC",79.7,79.7,0,"DD")
"@"
"SEC","^DIC",79.7,79.7,0,"DEL")
#
"SEC","^DIC",79.7,79.7,0,"LAYGO")
#
"SEC","^DIC",79.7,79.7,0,"RD")
#
"SEC","^DIC",79.7,79.7,0,"WR")
#
"VER")
8.0^22.0
"^DD",79.7,79.7,0)
FIELD^^2^2
"^DD",79.7,79.7,0,"DDA")
N
"^DD",79.7,79.7,0,"DT")
3070404
"^DD",79.7,79.7,0,"IX","B",79.7,.01)

"^DD",79.7,79.7,0,"NM","RAD/NUC MED HL7 APPLICATION EXCEPTION")

"^DD",79.7,79.7,.01,0)
HL7 APPLICATION NAME^R*P771'X^HL(771,^0;1^S DIC("S")="I $E(X,1,2)=""RA""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X S:$D(X) DINUM=X
"^DD",79.7,79.7,.01,1,0)
^.1
"^DD",79.7,79.7,.01,1,1,0)
79.7^B
"^DD",79.7,79.7,.01,1,1,1)
S ^RA(79.7,"B",$E(X,1,30),DA)=""
"^DD",79.7,79.7,.01,1,1,2)
K ^RA(79.7,"B",$E(X,1,30),DA)
"^DD",79.7,79.7,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",79.7,79.7,.01,12)
VistA Radiology HL7 applications are the only HL7 applications selectable.
"^DD",79.7,79.7,.01,12.1)
S DIC("S")="I $E(X,1,2)=""RA"""
"^DD",79.7,79.7,.01,21,0)
^^3^3^3070418^
"^DD",79.7,79.7,.01,21,1,0)
This field allows the user to select a 'RA' namespaced HL7 APPLICATION 
"^DD",79.7,79.7,.01,21,2,0)
PARAMETER (#771) file record in which exceptions are defined that impact 
"^DD",79.7,79.7,.01,21,3,0)
HL7 message routing.
"^DD",79.7,79.7,.01,"DT")
3070403
"^DD",79.7,79.7,2,0)
MESSAGE TYPE^79.72P^^1;0
"^DD",79.7,79.7,2,21,0)
^.001^2^2^3070419^^
"^DD",79.7,79.7,2,21,1,0)
This field identifies the HL7 message type. This field is a pointer
"^DD",79.7,79.7,2,21,2,0)
to HL7 MESSAGE TYPE (#771.2) file.
"^DD",79.7,79.7,2,"DT")
3070419
"^DD",79.7,79.72,0)
MESSAGE TYPE SUB-FIELD^^1^2
"^DD",79.7,79.72,0,"DT")
3070404
"^DD",79.7,79.72,0,"IX","B",79.72,.01)

"^DD",79.7,79.72,0,"NM","MESSAGE TYPE")

"^DD",79.7,79.72,0,"UP")
79.7
"^DD",79.7,79.72,.01,0)
MESSAGE TYPE^MP771.2'X^HL(771.2,^0;1^S:$D(X) DINUM=X Q
"^DD",79.7,79.72,.01,1,0)
^.1
"^DD",79.7,79.72,.01,1,1,0)
79.72^B
"^DD",79.7,79.72,.01,1,1,1)
S ^RA(79.7,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",79.7,79.72,.01,1,1,2)
K ^RA(79.7,DA(1),1,"B",$E(X,1,30),DA)
"^DD",79.7,79.72,.01,3)
Select HL7 Message Type
"^DD",79.7,79.72,.01,21,0)
^.001^3^3^3070419^^
"^DD",79.7,79.72,.01,21,1,0)
This field identifies the HL7 message type. This field is a pointer
"^DD",79.7,79.72,.01,21,2,0)
to HL7 MESSAGE TYPE (#771.2) file and may be set to values such as: ORM 
"^DD",79.7,79.72,.01,21,3,0)
(order message) or ORU (unsolicited observation message).
"^DD",79.7,79.72,.01,"DT")
3070419
"^DD",79.7,79.72,1,0)
EVENT TYPE^79.721P^^1;0
"^DD",79.7,79.72,1,21,0)
^^2^2^3070419^
"^DD",79.7,79.72,1,21,1,0)
This field identifies the HL7 event type. This field is a pointer to HL7
"^DD",79.7,79.72,1,21,2,0)
EVENT TYPE CODE (#779.001) file.
"^DD",79.7,79.72,1,"DT")
3070419
"^DD",79.7,79.721,0)
EVENT TYPE SUB-FIELD^^1^2
"^DD",79.7,79.721,0,"DT")
3070404
"^DD",79.7,79.721,0,"IX","B",79.721,.01)

"^DD",79.7,79.721,0,"NM","EVENT TYPE")

"^DD",79.7,79.721,0,"UP")
79.72
"^DD",79.7,79.721,.01,0)
EVENT TYPE^P779.001'X^HL(779.001,^0;1^S:$D(X) DINUM=X Q
"^DD",79.7,79.721,.01,1,0)
^.1
"^DD",79.7,79.721,.01,1,1,0)
79.721^B
"^DD",79.7,79.721,.01,1,1,1)
S ^RA(79.7,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",79.7,79.721,.01,1,1,2)
K ^RA(79.7,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",79.7,79.721,.01,3)
Select HL7 Event Type
"^DD",79.7,79.721,.01,21,0)
^^3^3^3070419^
"^DD",79.7,79.721,.01,21,1,0)
This field identifies the HL7 event type. This field is a pointer to HL7
"^DD",79.7,79.721,.01,21,2,0)
EVENT TYPE CODE (#779.001) file and may be set to values such as: O01 
"^DD",79.7,79.721,.01,21,3,0)
(Oh-zero-one) or RO1 (R-zero-one).
"^DD",79.7,79.721,.01,"DT")
3070419
"^DD",79.7,79.721,1,0)
HL7 VERSION^79.7211P^^1;0
"^DD",79.7,79.721,1,21,0)
^.001^2^2^3070419^^
"^DD",79.7,79.721,1,21,1,0)
This field identifies the HL7 version. This field is a pointer to HL7
"^DD",79.7,79.721,1,21,2,0)
VERSION (#771.5) file.
"^DD",79.7,79.721,1,"DT")
3070419
"^DD",79.7,79.7211,0)
HL7 VERSION SUB-FIELD^^4^5
"^DD",79.7,79.7211,0,"DT")
3070404
"^DD",79.7,79.7211,0,"IX","B",79.7211,.01)

"^DD",79.7,79.7211,0,"NM","HL7 VERSION")

"^DD",79.7,79.7211,0,"UP")
79.721
"^DD",79.7,79.7211,.01,0)
HL7 VERSION^P771.5'X^HL(771.5,^0;1^S:$D(X) DINUM=X Q
"^DD",79.7,79.7211,.01,.1)
HL7 VERSION
"^DD",79.7,79.7211,.01,1,0)
^.1
"^DD",79.7,79.7211,.01,1,1,0)
79.7211^B
"^DD",79.7,79.7211,.01,1,1,1)
S ^RA(79.7,DA(3),1,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",79.7,79.7211,.01,1,1,2)
K ^RA(79.7,DA(3),1,DA(2),1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",79.7,79.7211,.01,21,0)
^^3^3^3070419^
"^DD",79.7,79.7211,.01,21,1,0)
This field identifies the HL7 version. This field is a pointer to HL7
"^DD",79.7,79.7211,.01,21,2,0)
VERSION (#771.5) file. The following values 2.3, 2.4, & 2.5 are
"^DD",79.7,79.7211,.01,21,3,0)
legitimate HL7 versions.
"^DD",79.7,79.7211,.01,"DT")
3070419
"^DD",79.7,79.7211,1,0)
RETURN HL7 TO SENDER^S^1:Yes;0:No;^0;2^Q
"^DD",79.7,79.7211,1,3)
Type Yes or No
"^DD",79.7,79.7211,1,21,0)
^^5^5^3070419^
"^DD",79.7,79.7211,1,21,1,0)
This field indicates if an inbound HL7 message to the VistA 
"^DD",79.7,79.7211,1,21,2,0)
Radiology/Nuclear Medicine application is to be re-broadcast to the
"^DD",79.7,79.7211,1,21,3,0)
original sender of the HL7 message.
"^DD",79.7,79.7211,1,21,4,0)
 
"^DD",79.7,79.7211,1,21,5,0)
The default value is 'NO'.
"^DD",79.7,79.7211,1,"DT")
3070419
"^DD",79.7,79.7211,2,0)
INBOUND SEGMENT CODING^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",79.7,79.7211,2,3)
Enter Standard MUMPS code
"^DD",79.7,79.7211,2,21,0)
^^5^5^3070419^
"^DD",79.7,79.7211,2,21,1,0)
For an inbound HL7 messages this field will contain M code to handle
"^DD",79.7,79.7211,2,21,2,0)
business rule exceptions which are to be applied to HL7 segments.
"^DD",79.7,79.7211,2,21,3,0)
 
"^DD",79.7,79.7211,2,21,4,0)
The M code in this field will be executed before the HL7 segment is
"^DD",79.7,79.7211,2,21,5,0)
processed.
"^DD",79.7,79.7211,2,"DT")
3070419
"^DD",79.7,79.7211,3,0)
OUTBOUND SEGMENT CODING^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",79.7,79.7211,3,3)
Enter Standard MUMPS code
"^DD",79.7,79.7211,3,21,0)
^^8^8^3070419^
"^DD",79.7,79.7211,3,21,1,0)
For Outbound message: M coding to handle exceptions on Segment level. 
"^DD",79.7,79.7211,3,21,2,0)
Coding is invoked before the Segment is processed.
"^DD",79.7,79.7211,3,21,3,0)
 
"^DD",79.7,79.7211,3,21,4,0)
For an outbound HL7 messages this field will contain M code to handle
"^DD",79.7,79.7211,3,21,5,0)
business rule exceptions which are to be applied to HL7 segments.
"^DD",79.7,79.7211,3,21,6,0)
 
"^DD",79.7,79.7211,3,21,7,0)
The M code in this field will be executed before the HL7 segment is
"^DD",79.7,79.7211,3,21,8,0)
broadcast as part of a HL7 message.
"^DD",79.7,79.7211,3,"DT")
3070419
"^DD",79.7,79.7211,4,0)
HL7 FIELD EXCEPTIONS^79.72114^^3;0
"^DD",79.7,79.7211,4,21,0)
^.001^2^2^3070419^^
"^DD",79.7,79.7211,4,21,1,0)
This field will contain M code to handle business rule exceptions which
"^DD",79.7,79.7211,4,21,2,0)
are to be applied to HL7 fields.
"^DD",79.7,79.7211,4,"DT")
3070419
"^DD",79.7,79.72114,0)
HL7 FIELD EXCEPTIONS SUB-FIELD^^2^3
"^DD",79.7,79.72114,0,"DT")
3070404
"^DD",79.7,79.72114,0,"IX","B",79.72114,.01)

"^DD",79.7,79.72114,0,"NM","HL7 FIELD EXCEPTIONS")

"^DD",79.7,79.72114,0,"UP")
79.7211
"^DD",79.7,79.72114,.01,0)
HL7 FIELD EXCEPTIONS NAME^F^^0;1^K:$L(X)>10!($L(X)<3) X
"^DD",79.7,79.72114,.01,1,0)
^.1
"^DD",79.7,79.72114,.01,1,1,0)
79.72114^B
"^DD",79.7,79.72114,.01,1,1,1)
S ^RA(79.7,DA(4),1,DA(3),1,DA(2),1,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",79.7,79.72114,.01,1,1,2)
K ^RA(79.7,DA(4),1,DA(3),1,DA(2),1,DA(1),3,"B",$E(X,1,30),DA)
"^DD",79.7,79.72114,.01,3)
Answer must be 3-10 characters in length
"^DD",79.7,79.72114,.01,21,0)
^^6^6^3070419^
"^DD",79.7,79.72114,.01,21,1,0)
This field will contain M code to handle business rule exceptions which
"^DD",79.7,79.72114,.01,21,2,0)
are to be applied to HL7 fields.  
"^DD",79.7,79.72114,.01,21,3,0)
 
"^DD",79.7,79.72114,.01,21,4,0)
An example of a HL7 FIELD EXCEPTIONS NAME would be: 'OBR-32'. 'OBR' is the
"^DD",79.7,79.72114,.01,21,5,0)
HL7 segments and thirty-two in the piece position on that segment to which
"^DD",79.7,79.72114,.01,21,6,0)
the business rule exception will be applied.
"^DD",79.7,79.72114,.01,"DT")
3070419
"^DD",79.7,79.72114,1,0)
INBOUND HL7 FIELD CODING^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",79.7,79.72114,1,3)
Enter Standard MUMPS code
"^DD",79.7,79.72114,1,21,0)
^^5^5^3070419^
"^DD",79.7,79.72114,1,21,1,0)
For an inbound HL7 messages this field will contain M code to handle
"^DD",79.7,79.72114,1,21,2,0)
business rule exceptions which are to be applied to HL7 fields.
"^DD",79.7,79.72114,1,21,3,0)
 
"^DD",79.7,79.72114,1,21,4,0)
The M code in this field will be executed before the HL7 field is
"^DD",79.7,79.72114,1,21,5,0)
processed.
"^DD",79.7,79.72114,1,"DT")
3070419
"^DD",79.7,79.72114,2,0)
OUTBOUND HL7 FIELD CODING^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",79.7,79.72114,2,3)
Enter Standard MUMPS code
"^DD",79.7,79.72114,2,21,0)
^^5^5^3070419^
"^DD",79.7,79.72114,2,21,1,0)
For an outbound HL7 messages this field will contain M code to handle
"^DD",79.7,79.72114,2,21,2,0)
business rule exceptions which are to be applied to HL7 fields.
"^DD",79.7,79.72114,2,21,3,0)
 
"^DD",79.7,79.72114,2,21,4,0)
The M code in this field will be executed before the HL7 field is
"^DD",79.7,79.72114,2,21,5,0)
broadcast as part of a HL7 message.         
"^DD",79.7,79.72114,2,"DT")
3070419
"^DIC",79.7,79.7,0)
RAD/NUC MED HL7 APPLICATION EXCEPTION^79.7
"^DIC",79.7,79.7,0,"GL")
^RA(79.7,
"^DIC",79.7,79.7,"%",0)
^1.005^^
"^DIC",79.7,79.7,"%D",0)
^^15^15^3070418^
"^DIC",79.7,79.7,"%D",1,0)
The file holds parameters related to the application exceptions in 
"^DIC",79.7,79.7,"%D",2,0)
processing of HL7 Radiology messages.
"^DIC",79.7,79.7,"%D",3,0)
 
"^DIC",79.7,79.7,"%D",4,0)
DO NOT EDIT THIS FILE!
"^DIC",79.7,79.7,"%D",5,0)
 
"^DIC",79.7,79.7,"%D",6,0)
For designated applications, the file entries held the exceptions in 
"^DIC",79.7,79.7,"%D",7,0)
processing of RAD HL7 messages. If the radiology department at the 
"^DIC",79.7,79.7,"%D",8,0)
facility chooses to rebroadcast HL7 report messages to the 
"^DIC",79.7,79.7,"%D",9,0)
originator of the message, that parameter is set in this file.
"^DIC",79.7,79.7,"%D",10,0)
 
"^DIC",79.7,79.7,"%D",11,0)
Different HL7 interfaces enforce different business rules. For example,
"^DIC",79.7,79.7,"%D",12,0)
Radiology may wish to apply different business rules (for example 
"^DIC",79.7,79.7,"%D",13,0)
provider classification) to 'Prinicipal Result Intepreter' (OBR-32) data.
"^DIC",79.7,79.7,"%D",14,0)
 
"^DIC",79.7,79.7,"%D",15,0)
This file is where interface specifc business rules will be codified.
"^DIC",79.7,"B","RAD/NUC MED HL7 APPLICATION EXCEPTION",79.7)

"BLD",6301,6)
^70
**END**
**END**
