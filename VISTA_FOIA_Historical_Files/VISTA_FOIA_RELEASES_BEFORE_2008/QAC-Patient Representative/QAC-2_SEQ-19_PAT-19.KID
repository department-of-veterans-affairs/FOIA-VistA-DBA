Released QAC*2*19 SEQ #19
Extracted from mail message
**KIDS**:QAC*2.0*19^

**INSTALL NAME**
QAC*2.0*19
"BLD",6097,0)
QAC*2.0*19^PATIENT REPRESENTATIVE^0^3070124^y
"BLD",6097,1,0)
^^7^7^3061026^^
"BLD",6097,1,1,0)
This patch contains the VistA objects to run PATS (Patient Advocate
"BLD",6097,1,2,0)
Tracking System), the application that replaces the legacy Patient
"BLD",6097,1,3,0)
Representative system.
"BLD",6097,1,4,0)
 
"BLD",6097,1,5,0)
It includes both objects used to retrieve VistA data while the PATS
"BLD",6097,1,6,0)
application is running, and objects used to migrate the legacy data from
"BLD",6097,1,7,0)
the FileMan files to the new PATS Oracle tables on a central server.
"BLD",6097,4,0)
^9.64PA^^
"BLD",6097,6)
37^
"BLD",6097,6.3)
55
"BLD",6097,"INID")
n^n
"BLD",6097,"INIT")

"BLD",6097,"KRN",0)
^9.67PA^8989.52^19
"BLD",6097,"KRN",.4,0)
.4
"BLD",6097,"KRN",.401,0)
.401
"BLD",6097,"KRN",.402,0)
.402
"BLD",6097,"KRN",.403,0)
.403
"BLD",6097,"KRN",.5,0)
.5
"BLD",6097,"KRN",.84,0)
.84
"BLD",6097,"KRN",3.6,0)
3.6
"BLD",6097,"KRN",3.8,0)
3.8
"BLD",6097,"KRN",9.2,0)
9.2
"BLD",6097,"KRN",9.8,0)
9.8
"BLD",6097,"KRN",9.8,"NM",0)
^9.68A^18^17
"BLD",6097,"KRN",9.8,"NM",1,0)
QACI0^^0^B1984508
"BLD",6097,"KRN",9.8,"NM",2,0)
QACI1^^0^B23422676
"BLD",6097,"KRN",9.8,"NM",3,0)
QACI1A^^0^B6784447
"BLD",6097,"KRN",9.8,"NM",4,0)
QACI2^^0^B15898410
"BLD",6097,"KRN",9.8,"NM",5,0)
QACI20^^0^B56932032
"BLD",6097,"KRN",9.8,"NM",6,0)
QACI2A^^0^B18512192
"BLD",6097,"KRN",9.8,"NM",7,0)
QACI2B^^0^B36187753
"BLD",6097,"KRN",9.8,"NM",8,0)
QACI2C^^0^B34183381
"BLD",6097,"KRN",9.8,"NM",9,0)
QACI2D^^0^B68859293
"BLD",6097,"KRN",9.8,"NM",10,0)
QACI2E^^0^B22678389
"BLD",6097,"KRN",9.8,"NM",11,0)
QACI3^^0^B8458772
"BLD",6097,"KRN",9.8,"NM",12,0)
QACI4^^0^B3186113
"BLD",6097,"KRN",9.8,"NM",13,0)
QACI5^^0^B43902138
"BLD",6097,"KRN",9.8,"NM",14,0)
QACIENV^^0^B2063143
"BLD",6097,"KRN",9.8,"NM",16,0)
QACVDEM^^0^B35412405
"BLD",6097,"KRN",9.8,"NM",17,0)
QACVEMPX^^0^B18632980
"BLD",6097,"KRN",9.8,"NM",18,0)
QACVKHLD^^0^B5032982
"BLD",6097,"KRN",9.8,"NM","B","QACI0",1)

"BLD",6097,"KRN",9.8,"NM","B","QACI1",2)

"BLD",6097,"KRN",9.8,"NM","B","QACI1A",3)

"BLD",6097,"KRN",9.8,"NM","B","QACI2",4)

"BLD",6097,"KRN",9.8,"NM","B","QACI20",5)

"BLD",6097,"KRN",9.8,"NM","B","QACI2A",6)

"BLD",6097,"KRN",9.8,"NM","B","QACI2B",7)

"BLD",6097,"KRN",9.8,"NM","B","QACI2C",8)

"BLD",6097,"KRN",9.8,"NM","B","QACI2D",9)

"BLD",6097,"KRN",9.8,"NM","B","QACI2E",10)

"BLD",6097,"KRN",9.8,"NM","B","QACI3",11)

"BLD",6097,"KRN",9.8,"NM","B","QACI4",12)

"BLD",6097,"KRN",9.8,"NM","B","QACI5",13)

"BLD",6097,"KRN",9.8,"NM","B","QACIENV",14)

"BLD",6097,"KRN",9.8,"NM","B","QACVDEM",16)

"BLD",6097,"KRN",9.8,"NM","B","QACVEMPX",17)

"BLD",6097,"KRN",9.8,"NM","B","QACVKHLD",18)

"BLD",6097,"KRN",19,0)
19
"BLD",6097,"KRN",19,"NM",0)
^9.68A^18^18
"BLD",6097,"KRN",19,"NM",1,0)
QACI AUTO CLOSE ROCS^^0
"BLD",6097,"KRN",19,"NM",2,0)
QACI INACTIVATE PAT REP^^0
"BLD",6097,"KRN",19,"NM",3,0)
QACI KILL ROLLUP TASK^^0
"BLD",6097,"KRN",19,"NM",4,0)
QACI MAIN DATA CLEANUP MENU^^0
"BLD",6097,"KRN",19,"NM",5,0)
QACI MAIN PATS MIGRATION MENU^^0
"BLD",6097,"KRN",19,"NM",6,0)
QACI MIGRATION DATA BUILD^^0
"BLD",6097,"KRN",19,"NM",7,0)
QACI PATS RPC ACCESS^^0
"BLD",6097,"KRN",19,"NM",8,0)
QACI PREMIGRATION ERROR REPORT^^0
"BLD",6097,"KRN",19,"NM",9,0)
QACI REPORT AUTO-CLOSED ROCS^^0
"BLD",6097,"KRN",19,"NM",10,0)
QACI REPORT MENU^^0
"BLD",6097,"KRN",19,"NM",11,0)
QACI REPORT MIGR COUNTS^^0
"BLD",6097,"KRN",19,"NM",12,0)
QACI REPORT NOTIFICATIONS^^0
"BLD",6097,"KRN",19,"NM",13,0)
QACI REPORT ROC CHANGES^^0
"BLD",6097,"KRN",19,"NM",14,0)
QACI REPRINT ERRORS REPORT^^0
"BLD",6097,"KRN",19,"NM",15,0)
QACI RESCHEDULE ROLLUP TASK^^0
"BLD",6097,"KRN",19,"NM",16,0)
QACI ROC MIGRATION STATUS^^0
"BLD",6097,"KRN",19,"NM",17,0)
QACI UTILITY MENU^^0
"BLD",6097,"KRN",19,"NM",18,0)
QACV PATS RPC ACCESS^^0
"BLD",6097,"KRN",19,"NM","B","QACI AUTO CLOSE ROCS",1)

"BLD",6097,"KRN",19,"NM","B","QACI INACTIVATE PAT REP",2)

"BLD",6097,"KRN",19,"NM","B","QACI KILL ROLLUP TASK",3)

"BLD",6097,"KRN",19,"NM","B","QACI MAIN DATA CLEANUP MENU",4)

"BLD",6097,"KRN",19,"NM","B","QACI MAIN PATS MIGRATION MENU",5)

"BLD",6097,"KRN",19,"NM","B","QACI MIGRATION DATA BUILD",6)

"BLD",6097,"KRN",19,"NM","B","QACI PATS RPC ACCESS",7)

"BLD",6097,"KRN",19,"NM","B","QACI PREMIGRATION ERROR REPORT",8)

"BLD",6097,"KRN",19,"NM","B","QACI REPORT AUTO-CLOSED ROCS",9)

"BLD",6097,"KRN",19,"NM","B","QACI REPORT MENU",10)

"BLD",6097,"KRN",19,"NM","B","QACI REPORT MIGR COUNTS",11)

"BLD",6097,"KRN",19,"NM","B","QACI REPORT NOTIFICATIONS",12)

"BLD",6097,"KRN",19,"NM","B","QACI REPORT ROC CHANGES",13)

"BLD",6097,"KRN",19,"NM","B","QACI REPRINT ERRORS REPORT",14)

"BLD",6097,"KRN",19,"NM","B","QACI RESCHEDULE ROLLUP TASK",15)

"BLD",6097,"KRN",19,"NM","B","QACI ROC MIGRATION STATUS",16)

"BLD",6097,"KRN",19,"NM","B","QACI UTILITY MENU",17)

"BLD",6097,"KRN",19,"NM","B","QACV PATS RPC ACCESS",18)

"BLD",6097,"KRN",19.1,0)
19.1
"BLD",6097,"KRN",19.1,"NM",0)
^9.68A^6^6
"BLD",6097,"KRN",19.1,"NM",1,0)
QACV_ADUSH^^0
"BLD",6097,"KRN",19.1,"NM",2,0)
QACV_DMGR^^0
"BLD",6097,"KRN",19.1,"NM",3,0)
QACV_NPO^^0
"BLD",6097,"KRN",19.1,"NM",4,0)
QACV_SIT^^0
"BLD",6097,"KRN",19.1,"NM",5,0)
QACV_SRCU^^0
"BLD",6097,"KRN",19.1,"NM",6,0)
QACV_VU^^0
"BLD",6097,"KRN",19.1,"NM","B","QACV_ADUSH",1)

"BLD",6097,"KRN",19.1,"NM","B","QACV_DMGR",2)

"BLD",6097,"KRN",19.1,"NM","B","QACV_NPO",3)

"BLD",6097,"KRN",19.1,"NM","B","QACV_SIT",4)

"BLD",6097,"KRN",19.1,"NM","B","QACV_SRCU",5)

"BLD",6097,"KRN",19.1,"NM","B","QACV_VU",6)

"BLD",6097,"KRN",101,0)
101
"BLD",6097,"KRN",101,"NM",0)
^9.68A^^
"BLD",6097,"KRN",409.61,0)
409.61
"BLD",6097,"KRN",771,0)
771
"BLD",6097,"KRN",870,0)
870
"BLD",6097,"KRN",8989.51,0)
8989.51
"BLD",6097,"KRN",8989.52,0)
8989.52
"BLD",6097,"KRN",8994,0)
8994
"BLD",6097,"KRN",8994,"NM",0)
^9.68A^11^6
"BLD",6097,"KRN",8994,"NM",6,0)
QACI DELETE ALL LISTS^^0
"BLD",6097,"KRN",8994,"NM",7,0)
QACI LOAD REFERENCE TABLES^^0
"BLD",6097,"KRN",8994,"NM",8,0)
QACI LOAD ROC^^0
"BLD",6097,"KRN",8994,"NM",9,0)
QACI NATL INSTITUTION LIST^^0
"BLD",6097,"KRN",8994,"NM",10,0)
QACV KEY HOLDERS VLH^^0
"BLD",6097,"KRN",8994,"NM",11,0)
QACV PERSON LOOKUP VLH^^0
"BLD",6097,"KRN",8994,"NM","B","QACI DELETE ALL LISTS",6)

"BLD",6097,"KRN",8994,"NM","B","QACI LOAD REFERENCE TABLES",7)

"BLD",6097,"KRN",8994,"NM","B","QACI LOAD ROC",8)

"BLD",6097,"KRN",8994,"NM","B","QACI NATL INSTITUTION LIST",9)

"BLD",6097,"KRN",8994,"NM","B","QACV KEY HOLDERS VLH",10)

"BLD",6097,"KRN",8994,"NM","B","QACV PERSON LOOKUP VLH",11)

"BLD",6097,"KRN","B",.4,.4)

"BLD",6097,"KRN","B",.401,.401)

"BLD",6097,"KRN","B",.402,.402)

"BLD",6097,"KRN","B",.403,.403)

"BLD",6097,"KRN","B",.5,.5)

"BLD",6097,"KRN","B",.84,.84)

"BLD",6097,"KRN","B",3.6,3.6)

"BLD",6097,"KRN","B",3.8,3.8)

"BLD",6097,"KRN","B",9.2,9.2)

"BLD",6097,"KRN","B",9.8,9.8)

"BLD",6097,"KRN","B",19,19)

"BLD",6097,"KRN","B",19.1,19.1)

"BLD",6097,"KRN","B",101,101)

"BLD",6097,"KRN","B",409.61,409.61)

"BLD",6097,"KRN","B",771,771)

"BLD",6097,"KRN","B",870,870)

"BLD",6097,"KRN","B",8989.51,8989.51)

"BLD",6097,"KRN","B",8989.52,8989.52)

"BLD",6097,"KRN","B",8994,8994)

"BLD",6097,"PRE")
QACIENV
"BLD",6097,"QUES",0)
^9.62^^
"BLD",6097,"REQB",0)
^9.611^6^6
"BLD",6097,"REQB",1,0)
QAC*2.0*18^1
"BLD",6097,"REQB",2,0)
DG*5.3*538^1
"BLD",6097,"REQB",3,0)
DG*5.3*557^1
"BLD",6097,"REQB",4,0)
XU*8.0*329^1
"BLD",6097,"REQB",5,0)
XOBU 1.5^1
"BLD",6097,"REQB",6,0)
XU*8.0*430^1
"BLD",6097,"REQB","B","DG*5.3*538",2)

"BLD",6097,"REQB","B","DG*5.3*557",3)

"BLD",6097,"REQB","B","QAC*2.0*18",1)

"BLD",6097,"REQB","B","XOBU 1.5",5)

"BLD",6097,"REQB","B","XU*8.0*329",4)

"BLD",6097,"REQB","B","XU*8.0*430",6)

"KRN",19,2920105,-1)
0^8
"KRN",19,2920105,0)
QACI PREMIGRATION ERROR REPORT^Check for Data Errors Prior to Migration^^R^^^^^^^^
"KRN",19,2920105,1,0)
^^5^5^3040601^
"KRN",19,2920105,1,1,0)
This option generates a report showing any data problems that would
"KRN",19,2920105,1,2,0)
prevent legacy data from being migrated from the old Patient
"KRN",19,2920105,1,3,0)
Representative System to the new PATS system.
"KRN",19,2920105,1,4,0)
 
"KRN",19,2920105,1,5,0)
This option should be run prior to migrating any data.
"KRN",19,2920105,25)
EN^QACI0
"KRN",19,2920105,"U")
CHECK FOR DATA ERRORS PRIOR TO
"KRN",19,2920106,-1)
0^1
"KRN",19,2920106,0)
QACI AUTO CLOSE ROCS^Auto-Close Old Open Contacts (ROCs)^^R^^^^^^^^^y
"KRN",19,2920106,1,0)
^19.06^8^8^3040601^^
"KRN",19,2920106,1,1,0)
Open Consumer Contact records (ROCs) whose date of contact is prior to the
"KRN",19,2920106,1,2,0)
beginning of the previous quarter will be automatically closed unless they
"KRN",19,2920106,1,3,0)
are missing some of the data required either by the Patient Rep system, or
"KRN",19,2920106,1,4,0)
the PATS system.
"KRN",19,2920106,1,5,0)
 
"KRN",19,2920106,1,6,0)
An error report is generated to show ROCs with missing data. The ROCs can 
"KRN",19,2920106,1,7,0)
be edited and this option can be re-run as needed. This option should be 
"KRN",19,2920106,1,8,0)
run before migrating the ROCs to PATS.
"KRN",19,2920106,25)
EN^QACI1
"KRN",19,2920106,"U")
AUTO-CLOSE OLD OPEN CONTACTS (
"KRN",19,2920107,-1)
0^6
"KRN",19,2920107,0)
QACI MIGRATION DATA BUILD^Move Data to Staging Area for Migration^^R^^^^^^^^
"KRN",19,2920107,1,0)
^^12^12^3040601^
"KRN",19,2920107,1,1,0)
Build local lists (i.e., a staging area) of Patient Representative
"KRN",19,2920107,1,2,0)
reference table data and Contact (ROC) data in preparation for migration
"KRN",19,2920107,1,3,0)
to the PATS system.
"KRN",19,2920107,1,4,0)
 
"KRN",19,2920107,1,5,0)
After the data has been moved to the staging area and has been flagged 
"KRN",19,2920107,1,6,0)
ready for migration, run the routine that reads the temporary lists
"KRN",19,2920107,1,7,0)
created by this option, and migrates the Patient Rep data into the PATS
"KRN",19,2920107,1,8,0)
tables.
"KRN",19,2920107,1,9,0)
 
"KRN",19,2920107,1,10,0)
An error report is generated to show any data errors. The data can be
"KRN",19,2920107,1,11,0)
edited and this option can be re-run as needed to prepare any entries 
"KRN",19,2920107,1,12,0)
that previously had errors for migration.
"KRN",19,2920107,25)
EN^QACI2
"KRN",19,2920107,"U")
MOVE DATA TO STAGING AREA FOR 
"KRN",19,2920108,-1)
0^10
"KRN",19,2920108,0)
QACI REPORT MENU^Data Migration Reports^^M^^^^^^^^
"KRN",19,2920108,1,0)
^19.06^3^3^3040823^^^^
"KRN",19,2920108,1,1,0)
Menu that allows the user to print reports generated during both the
"KRN",19,2920108,1,2,0)
cleanup phase and the migration phase of data from the Patient
"KRN",19,2920108,1,3,0)
Representative system to the new Patient Advocate Tracking System (PATS).
"KRN",19,2920108,10,0)
^19.01IP^7^7
"KRN",19,2920108,10,1,0)
2920110^ALST^2
"KRN",19,2920108,10,1,"^")
QACI REPORT AUTO-CLOSED ROCS
"KRN",19,2920108,10,3,0)
2920109^DERR^1
"KRN",19,2920108,10,3,"^")
QACI REPRINT ERRORS REPORT
"KRN",19,2920108,10,4,0)
2920111^CNG^3
"KRN",19,2920108,10,4,"^")
QACI REPORT ROC CHANGES
"KRN",19,2920108,10,5,0)
2920118^CNT^4
"KRN",19,2920108,10,5,"^")
QACI REPORT MIGR COUNTS
"KRN",19,2920108,10,6,0)
2920117^NOT^6
"KRN",19,2920108,10,6,"^")
QACI REPORT NOTIFICATIONS
"KRN",19,2920108,10,7,0)
2920120^STAT^5
"KRN",19,2920108,10,7,"^")
QACI ROC MIGRATION STATUS
"KRN",19,2920108,99)
60578,59988
"KRN",19,2920108,"U")
DATA MIGRATION REPORTS
"KRN",19,2920109,-1)
0^14
"KRN",19,2920109,0)
QACI REPRINT ERRORS REPORT^Reprint Migration/Pre-Migration Data Errors Report^^R^^^^^^^^
"KRN",19,2920109,1,0)
^^3^3^3040601^
"KRN",19,2920109,1,1,0)
Reprints the error reports showing data that cannot migrate due to errors.
"KRN",19,2920109,1,2,0)
The same error report is generated in the pre-migration phase, and when
"KRN",19,2920109,1,3,0)
the data is moved to the staging area.
"KRN",19,2920109,25)
ENREPRNT^QACI2E
"KRN",19,2920109,"U")
REPRINT MIGRATION/PRE-MIGRATIO
"KRN",19,2920110,-1)
0^9
"KRN",19,2920110,0)
QACI REPORT AUTO-CLOSED ROCS^Reprint All ROCs that were Auto-Closed^^R^^^^^^^^
"KRN",19,2920110,1,0)
^19.06^2^2^3040601^^
"KRN",19,2920110,1,1,0)
Prints a list of ROC numbers for every Contact (ROC) that was closed 
"KRN",19,2920110,1,2,0)
during the option to auto-close ROCs.
"KRN",19,2920110,25)
ENRPT2^QACI1A
"KRN",19,2920110,"U")
REPRINT ALL ROCS THAT WERE AUT
"KRN",19,2920111,-1)
0^13
"KRN",19,2920111,0)
QACI REPORT ROC CHANGES^System Generated Changes to ROCs for Migration^^R^^^^^^^^
"KRN",19,2920111,1,0)
^^10^10^3040601^
"KRN",19,2920111,1,1,0)
Report of changes that will be made by the Migration System to ROCs when
"KRN",19,2920111,1,2,0)
they are migrated to PATs. These changes are made when missing data can be
"KRN",19,2920111,1,3,0)
provided either from data available in other places on the ROC, or that
"KRN",19,2920111,1,4,0)
can be filled in with a default value.
"KRN",19,2920111,1,5,0)
 
"KRN",19,2920111,1,6,0)
This report can be quite large. The type of changes reported are: Issue
"KRN",19,2920111,1,7,0)
Text or Resolution Text were missing and will be replaced by canned text,
"KRN",19,2920111,1,8,0)
Division was missing and will be filled in from station number that is the
"KRN",19,2920111,1,9,0)
first part of the ROC number, either Info Taken By or Edited By were
"KRN",19,2920111,1,10,0)
missing and both set to the same value.
"KRN",19,2920111,25)
ENRPT2^QACI2E
"KRN",19,2920111,"U")
SYSTEM GENERATED CHANGES TO RO
"KRN",19,2920112,-1)
0^7
"KRN",19,2920112,0)
QACI PATS RPC ACCESS^Register PATS Data Migration RPCs^^B^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920112,1,0)
^19.06^2^2^3040406^^^
"KRN",19,2920112,1,1,0)
Handles security for RPCs. PATS RPCs used for data migration will be 
"KRN",19,2920112,1,2,0)
registered to this option.
"KRN",19,2920112,99.1)
60184,63482
"KRN",19,2920112,"RPC",0)
^19.05P^4^4
"KRN",19,2920112,"RPC",1,0)
QACI DELETE ALL LISTS
"KRN",19,2920112,"RPC",2,0)
QACI LOAD REFERENCE TABLES
"KRN",19,2920112,"RPC",3,0)
QACI LOAD ROC
"KRN",19,2920112,"RPC",4,0)
QACI NATL INSTITUTION LIST
"KRN",19,2920112,"U")
REGISTER PATS DATA MIGRATION R
"KRN",19,2920113,-1)
0^18
"KRN",19,2920113,0)
QACV PATS RPC ACCESS^Register PATS RPCs for Employee/Patient Data^^B^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920113,1,0)
^19.06^2^2^3031203^^
"KRN",19,2920113,1,1,0)
Handles security for RPCs. PATS RPCs used for retrieving Employee and 
"KRN",19,2920113,1,2,0)
Patient Data from VistA will be registered to this option.
"KRN",19,2920113,99)
60464,62677
"KRN",19,2920113,99.1)
60184,59271
"KRN",19,2920113,"RPC",0)
^19.05P^4^4
"KRN",19,2920113,"RPC",3,0)
QACV PERSON LOOKUP VLH
"KRN",19,2920113,"RPC",4,0)
QACV KEY HOLDERS VLH
"KRN",19,2920113,"U")
REGISTER PATS RPCS FOR EMPLOYE
"KRN",19,2920114,-1)
0^2
"KRN",19,2920114,0)
QACI INACTIVATE PAT REP^Activate/Inactivate Patient Rep Options^^R^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920114,1,0)
^^7^7^3040601^
"KRN",19,2920114,1,1,0)
Inactivate or re-activate all of the options that allow the user to edit 
"KRN",19,2920114,1,2,0)
data in the Patient Representative System. Options that report information
"KRN",19,2920114,1,3,0)
but do not allow data to be edited are unchanged.
"KRN",19,2920114,1,4,0)
 
"KRN",19,2920114,1,5,0)
If the options are currently active, the options are inactivated (i.e., 
"KRN",19,2920114,1,6,0)
set OUT OF ORDER). If the options are currently inactive, the options are 
"KRN",19,2920114,1,7,0)
re-activated.
"KRN",19,2920114,25)
EN^QACI5
"KRN",19,2920114,"U")
ACTIVATE/INACTIVATE PATIENT RE
"KRN",19,2920115,-1)
0^17
"KRN",19,2920115,0)
QACI UTILITY MENU^Activate/Inactivate Options or Tasks^^M^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920115,1,0)
^19.06^4^4^3050727^^^
"KRN",19,2920115,1,1,0)
Menu containing options used to Inactivate or Re-Activate options and 
"KRN",19,2920115,1,2,0)
tasks in the old Patient Representative system, and the option used to
"KRN",19,2920115,1,3,0)
move the data into a staging area prior to migration into the new 
"KRN",19,2920115,1,4,0)
Patient Advocate Tracking system (PATS).
"KRN",19,2920115,10,0)
^19.01IP^4^4
"KRN",19,2920115,10,1,0)
2920114^POPT^1
"KRN",19,2920115,10,1,"^")
QACI INACTIVATE PAT REP
"KRN",19,2920115,10,3,0)
2920122^RTSK^2
"KRN",19,2920115,10,3,"^")
QACI RESCHEDULE ROLLUP TASK
"KRN",19,2920115,10,4,0)
2920121^KTSK^3
"KRN",19,2920115,10,4,"^")
QACI KILL ROLLUP TASK
"KRN",19,2920115,99)
60578,59988
"KRN",19,2920115,"U")
ACTIVATE/INACTIVATE OPTIONS OR
"KRN",19,2920116,-1)
0^5
"KRN",19,2920116,0)
QACI MAIN PATS MIGRATION MENU^Main Menu for Patient Rep Migration Steps^^M^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920116,1,0)
^19.06^3^3^3050727^^^^
"KRN",19,2920116,1,1,0)
Menu of options used to complete steps needed to move Patient 
"KRN",19,2920116,1,2,0)
Representative data into a staging area in preparation for migrating the 
"KRN",19,2920116,1,3,0)
data into the new PATS system.
"KRN",19,2920116,10,0)
^19.01IP^6^5
"KRN",19,2920116,10,3,0)
2920115^UTIL^3
"KRN",19,2920116,10,3,"^")
QACI UTILITY MENU
"KRN",19,2920116,10,4,0)
2920107^MSTG^1
"KRN",19,2920116,10,4,"^")
QACI MIGRATION DATA BUILD
"KRN",19,2920116,10,6,0)
2920108^RPTS^2
"KRN",19,2920116,10,6,"^")
QACI REPORT MENU
"KRN",19,2920116,99)
60578,59988
"KRN",19,2920116,99.1)
60184,54090
"KRN",19,2920116,"U")
MAIN MENU FOR PATIENT REP MIGR
"KRN",19,2920117,-1)
0^12
"KRN",19,2920117,0)
QACI REPORT NOTIFICATIONS^Pending Notifications Report^^R^^^^^^^^
"KRN",19,2920117,1,0)
^19.06^2^2^3040601^^
"KRN",19,2920117,1,1,0)
Report of pending notifications lists all notifications (Alerts) that 
"KRN",19,2920117,1,2,0)
have been sent but have had no response.
"KRN",19,2920117,25)
EN3^QACI5
"KRN",19,2920117,"U")
PENDING NOTIFICATIONS REPORT
"KRN",19,2920118,-1)
0^11
"KRN",19,2920118,0)
QACI REPORT MIGR COUNTS^Counts of Errors, Ready to Migrate, Migrated^^R^^^^^^^^
"KRN",19,2920118,1,0)
^^7^7^3040601^
"KRN",19,2920118,1,1,0)
First, displays the total number of ROCs in the CONSUMER CONTACT file.
"KRN",19,2920118,1,2,0)
 
"KRN",19,2920118,1,3,0)
Then for each type of data that will be migrated to PATS, the report 
"KRN",19,2920118,1,4,0)
displays the total number of records that are in the staging area ready to
"KRN",19,2920118,1,5,0)
be migrated, the total number of records that have already been
"KRN",19,2920118,1,6,0)
migrated to PATS, and the total number of records that cannot be migrated 
"KRN",19,2920118,1,7,0)
due to errors.
"KRN",19,2920118,25)
EN4^QACI5
"KRN",19,2920118,"U")
COUNTS OF ERRORS, READY TO MIG
"KRN",19,2920119,-1)
0^4
"KRN",19,2920119,0)
QACI MAIN DATA CLEANUP MENU^Main Menu for Pre-Migration Data Cleanup^^M^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920119,1,0)
^19.06^3^3^3040701^^^
"KRN",19,2920119,1,1,0)
Menu of options used to clean and prepare the data for migration from the
"KRN",19,2920119,1,2,0)
old Patient Representative system to the new Patient Advocate Tracking
"KRN",19,2920119,1,3,0)
(PATS) system.
"KRN",19,2920119,10,0)
^19.01IP^3^3
"KRN",19,2920119,10,1,0)
2920105^CHK^1
"KRN",19,2920119,10,1,"^")
QACI PREMIGRATION ERROR REPORT
"KRN",19,2920119,10,2,0)
2920106^CLS^2
"KRN",19,2920119,10,2,"^")
QACI AUTO CLOSE ROCS
"KRN",19,2920119,10,3,0)
2920108^RPTS^3
"KRN",19,2920119,10,3,"^")
QACI REPORT MENU
"KRN",19,2920119,99)
60578,59988
"KRN",19,2920119,99.1)
60184,49937
"KRN",19,2920119,"U")
MAIN MENU FOR PRE-MIGRATION DA
"KRN",19,2920120,-1)
0^16
"KRN",19,2920120,0)
QACI ROC MIGRATION STATUS^Display Migration Status for a ROC^^R^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920120,1,0)
^^5^5^3040823^
"KRN",19,2920120,1,1,0)
Display the migration status for a selected ROC. The possible values are:
"KRN",19,2920120,1,2,0)
  ROC has been successfully migrated to PATS.
"KRN",19,2920120,1,3,0)
  ROC has errors.
"KRN",19,2920120,1,4,0)
  ROC has been moved to the staging area ready to migrate.
"KRN",19,2920120,1,5,0)
  No action has been taken for the ROC.
"KRN",19,2920120,25)
ENRSTAT^QACI5
"KRN",19,2920120,"U")
DISPLAY MIGRATION STATUS FOR A
"KRN",19,2920121,-1)
0^3
"KRN",19,2920121,0)
QACI KILL ROLLUP TASK^Stop (Kill) Rollup to Austin^^R^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920121,1,0)
^^2^2^3050718^
"KRN",19,2920121,1,1,0)
After data has been migrated into PATS, this option can be used to stop 
"KRN",19,2920121,1,2,0)
(kill) the TaskMan task that rolls Patient Rep data up to Austin.
"KRN",19,2920121,25)
ENKTASK^QACI5
"KRN",19,2920121,"U")
STOP (KILL) ROLLUP TO AUSTIN
"KRN",19,2920122,-1)
0^15
"KRN",19,2920122,0)
QACI RESCHEDULE ROLLUP TASK^Reschedule Rollup to Austin^^R^^^^^^^^PATIENT REPRESENTATIVE
"KRN",19,2920122,1,0)
^^2^2^3050718^
"KRN",19,2920122,1,1,0)
Reschedule the task that rolls up data from the Patient Rep system to 
"KRN",19,2920122,1,2,0)
Austin. This task reschedules itself each time it runs.
"KRN",19,2920122,25)
ENRTASK^QACI5
"KRN",19,2920122,"U")
RESCHEDULE ROLLUP TO AUSTIN
"KRN",19.1,698,-1)
0^5
"KRN",19.1,698,0)
QACV_SRCU^Site Record Control User^l^n^1
"KRN",19.1,698,1,0)
^19.11^4^4^3031203^^
"KRN",19.1,698,1,1,0)
Controls ROLE access to the Patient Advocate Tracking System (PATS). This 
"KRN",19.1,698,1,2,0)
key designates the Site Record Control User role. The SRCU can enter 
"KRN",19.1,698,1,3,0)
ROCs, and can edit any ROC. They also can maintain all of the local 
"KRN",19.1,698,1,4,0)
supporting tables in PATS.
"KRN",19.1,699,-1)
0^4
"KRN",19.1,699,0)
QACV_SIT^Site Information Taker in PATS^l^n^1
"KRN",19.1,699,1,0)
^19.11^4^4^3031203^^
"KRN",19.1,699,1,1,0)
Controls ROLE access to the Patient Advocate Tracking System (PATS). This
"KRN",19.1,699,1,2,0)
key designates the Site Information Taker role. The SIT is allowed to 
"KRN",19.1,699,1,3,0)
enter information to a ROC, and can edit the ROCs on which they are the 
"KRN",19.1,699,1,4,0)
Info Taken By Person, but they cannot edit any other ROCs.
"KRN",19.1,700,-1)
0^3
"KRN",19.1,700,0)
QACV_NPO^National Program Office User^l^n^1
"KRN",19.1,700,1,0)
^19.11^3^3^3031203^^
"KRN",19.1,700,1,1,0)
Controls ROLE access to the Patient Advocate Tracking System (PATS). This 
"KRN",19.1,700,1,2,0)
key designates the National Program Office User role. The NPO user 
"KRN",19.1,700,1,3,0)
maintains the national tables and has access to national reports in PATS.
"KRN",19.1,701,-1)
0^6
"KRN",19.1,701,0)
QACV_VU^VISN User^l^n^1
"KRN",19.1,701,1,0)
^19.11^3^3^3031203^^
"KRN",19.1,701,1,1,0)
Controls ROLE access to the Patient Advocate Tracking System (PATS). This 
"KRN",19.1,701,1,2,0)
key designates the VISN User role. The VISN level user maintains the 
"KRN",19.1,701,1,3,0)
facility_service_or_section table.
"KRN",19.1,702,-1)
0^1
"KRN",19.1,702,0)
QACV_ADUSH^Asst.Deputy Under Secretary HA^l^n^1
"KRN",19.1,702,1,0)
^19.11^2^2^3060215^^^
"KRN",19.1,702,1,1,0)
Controls ROLE access to the Patient Advocate Tracking System (PATS). This 
"KRN",19.1,702,1,2,0)
key designates the Assistant Deputy Under Secretary HA User role.
"KRN",19.1,703,-1)
0^2
"KRN",19.1,703,0)
QACV_DMGR^PATS Data Migration Manager^l^n^1
"KRN",19.1,703,1,0)
^^7^7^3040820^
"KRN",19.1,703,1,1,0)
This key is assigned to the person responsible for migrating the legacy
"KRN",19.1,703,1,2,0)
Patient Representative data into the new Patient Advocate Tracking System 
"KRN",19.1,703,1,3,0)
(PATS).
"KRN",19.1,703,1,4,0)
 
"KRN",19.1,703,1,5,0)
The user must own the key in order to make a VistALink connection from the
"KRN",19.1,703,1,6,0)
web-based application used to migrate the data into PATS to the VistA
"KRN",19.1,703,1,7,0)
system where the legacy Patient Representative data resides.
"KRN",8994,2300,-1)
0^6
"KRN",8994,2300,0)
QACI DELETE ALL LISTS^ENDELALL^QACI2C^1^^^^^1
"KRN",8994,2300,1,0)
^8994.01^6^6^3031009^^
"KRN",8994,2300,1,1,0)
This RPC deletes the lists of legacy table data and Contact (ROC) numbers
"KRN",8994,2300,1,2,0)
that have been migrated from the old Patient Representative files to the
"KRN",8994,2300,1,3,0)
new PATS Oracle Tables. It is called from a Java routine after the
"KRN",8994,2300,1,4,0)
migrated data has been deleted from the Oracle tables. This is done ONLY
"KRN",8994,2300,1,5,0)
if for some reason a site has decided that they need to completely restart
"KRN",8994,2300,1,6,0)
the data migration to PATS.
"KRN",8994,2300,3,0)
^8994.03^1^1^3031009^^
"KRN",8994,2300,3,1,0)
Returns a number set to 1 to indicate success.
"KRN",8994,2301,-1)
0^7
"KRN",8994,2301,0)
QACI LOAD REFERENCE TABLES^EN^QACI3^4^P^^^1^1
"KRN",8994,2301,1,0)
^^35^35^3040928^
"KRN",8994,2301,1,1,0)
This RPC assumes that the user has previously run the option QACI 
"KRN",8994,2301,1,2,0)
MIGRATION DATA BUILD to build the lists of reference table data for all
"KRN",8994,2301,1,3,0)
entries referenced by at least one CONSUMER CONTACT record.
"KRN",8994,2301,1,4,0)
 
"KRN",8994,2301,1,5,0)
You must set up separate code to load each table, because the FLAG 
"KRN",8994,2301,1,6,0)
parameter will be different for each table. The order in which the tables 
"KRN",8994,2301,1,7,0)
are updated is not important. Each table update can call the RPC multiple
"KRN",8994,2301,1,8,0)
times in a loop. When all of the data for a single table has been
"KRN",8994,2301,1,9,0)
processed, the output array is returned empty. Exit the loop for that 
"KRN",8994,2301,1,10,0)
table and go on to process the next table.
"KRN",8994,2301,1,11,0)
 
"KRN",8994,2301,1,12,0)
The first time the RPC is called (based on an input parameter) two checks 
"KRN",8994,2301,1,13,0)
are done. If there is no data to migrate in any of the tables, the RPC
"KRN",8994,2301,1,14,0)
returns 0 in the 0th entry of the array. If the 'ready to migrate' flag
"KRN",8994,2301,1,15,0)
has not been set, the RPC returns 1 in the 0th entry of the array 
"KRN",8994,2301,1,16,0)
indicating that the user has not yet flagged the data ready for migration.
"KRN",8994,2301,1,17,0)
 
"KRN",8994,2301,1,18,0)
So you would do the following in the Java calling code:
"KRN",8994,2301,1,19,0)
1) Set the flag to indicate the table you wish to update, then call the
"KRN",8994,2301,1,20,0)
RPC using VistALink. On the first call, the input array will be empty, 
"KRN",8994,2301,1,21,0)
and the input parameter indicating whether this is the first call should 
"KRN",8994,2301,1,22,0)
be set to 1.
"KRN",8994,2301,1,23,0)
2) Check to make sure the 0 entry of the array is not set to 1 or 0. If
"KRN",8994,2301,1,24,0)
it is, generate an appropriate message and quit.
"KRN",8994,2301,1,25,0)
3) Check the output list from the RPC. If empty, return to step 1 to
"KRN",8994,2301,1,26,0)
process the next table.
"KRN",8994,2301,1,27,0)
4) Otherwise, pass the list returned by the RPC to the appropriate Oracle
"KRN",8994,2301,1,28,0)
procedure to update the current table.
"KRN",8994,2301,1,29,0)
5) Move the output from the Oracle procedure into the array that will be 
"KRN",8994,2301,1,30,0)
used as input to the next RPC call, then return to step 1, still
"KRN",8994,2301,1,31,0)
processing the same table.
"KRN",8994,2301,1,32,0)
 
"KRN",8994,2301,1,33,0)
Each entry in the output list from this RPC contains up-arrow delimited
"KRN",8994,2301,1,34,0)
strings of reference table data, each one containing all the data to
"KRN",8994,2301,1,35,0)
update a single entry on the Oracle table indicated by the flag parameter.
"KRN",8994,2301,2,0)
^8994.02A^5^4
"KRN",8994,2301,2,2,0)
PATSNO^1^10^1^1
"KRN",8994,2301,2,2,1,0)
^^2^2^3030521^
"KRN",8994,2301,2,2,1,1,0)
Number of entries to be returned in one call to the RPC. If set to 0 or 
"KRN",8994,2301,2,2,1,2,0)
null, the RPC returns all entries for the current reference table.
"KRN",8994,2301,2,3,0)
PATSLIST^2^^0^2
"KRN",8994,2301,2,3,1,0)
^^4^4^3030521^
"KRN",8994,2301,2,3,1,1,0)
If defined, contains a list of VistA_IEN^Ids entries for the previous 
"KRN",8994,2301,2,3,1,2,0)
group of entries that was migrated from VistA to the Oracle table. 
"KRN",8994,2301,2,3,1,3,0)
Information indicating which table the data belongs to is included as 
"KRN",8994,2301,2,3,1,4,0)
part of the list itself.
"KRN",8994,2301,2,4,0)
PATSFLAG^1^3^1^3
"KRN",8994,2301,2,4,1,0)
^^8^8^3030530^
"KRN",8994,2301,2,4,1,1,0)
Must be set to the following, to indicate what type of data is to be 
"KRN",8994,2301,2,4,1,2,0)
returned in the output list.
"KRN",8994,2301,2,4,1,3,0)
H = hospital_location entries (HOSPITAL LOCATION #44)
"KRN",8994,2301,2,4,1,4,0)
P = pats_patient entries (PATIENT file #2)
"KRN",8994,2301,2,4,1,5,0)
U = pats_user entries (NEW PERSON file #200)
"KRN",8994,2301,2,4,1,6,0)
C = congressional_contact (CONGRESSIONAL OFFICE file #745.4)
"KRN",8994,2301,2,4,1,7,0)
E = employee_involved (NEW PERSON file #200)
"KRN",8994,2301,2,4,1,8,0)
F = facility_service_or_section (QAC SERVICE/DISCIPLINE file 745.55)
"KRN",8994,2301,2,5,0)
PATSFRST^1^1^0^4
"KRN",8994,2301,2,5,1,0)
^^7^7^3040928^
"KRN",8994,2301,2,5,1,1,0)
This boolean value indicates whether this RPC is being called the first 
"KRN",8994,2301,2,5,1,2,0)
time, or subsequent times. On the first call, the parameter should be set 
"KRN",8994,2301,2,5,1,3,0)
to 1. On subsequent calls, it should be set to 0.
"KRN",8994,2301,2,5,1,4,0)
 
"KRN",8994,2301,2,5,1,5,0)
This controls additional checks in the routine that will tell the calling 
"KRN",8994,2301,2,5,1,6,0)
routine if there is no data to migrate, or if the user flag that allows 
"KRN",8994,2301,2,5,1,7,0)
the migration to be done has been set to allow migration at this time.
"KRN",8994,2301,2,"B","PATSFLAG",4)

"KRN",8994,2301,2,"B","PATSFRST",5)

"KRN",8994,2301,2,"B","PATSLIST",3)

"KRN",8994,2301,2,"B","PATSNO",2)

"KRN",8994,2301,2,"PARAMSEQ",1,2)

"KRN",8994,2301,2,"PARAMSEQ",2,3)

"KRN",8994,2301,2,"PARAMSEQ",3,4)

"KRN",8994,2301,2,"PARAMSEQ",4,5)

"KRN",8994,2301,3,0)
^8994.03^1^1^3040928^^^^
"KRN",8994,2301,3,1,0)
Returns an M global which is an array of up-arrow delimited strings.
"KRN",8994,2302,-1)
0^8
"KRN",8994,2302,0)
QACI LOAD ROC^EN^QACI4^4^P^^^1^1
"KRN",8994,2302,1,0)
^^20^20^3040928^
"KRN",8994,2302,1,1,0)
This RPC assumes that the user has previously run the option QACI 
"KRN",8994,2302,1,2,0)
MIGRATION DATA BUILD to build the list of data to be migrated.
"KRN",8994,2302,1,3,0)
 
"KRN",8994,2302,1,4,0)
You will call this RPC multiple times in a loop. You can tell when all of 
"KRN",8994,2302,1,5,0)
the ROCs have been processed when the output list comes back empty.
"KRN",8994,2302,1,6,0)
 
"KRN",8994,2302,1,7,0)
So you would do the following in the Java calling code:
"KRN",8994,2302,1,8,0)
1) Call the RPC using VistALink. (On the first call, the input array will
"KRN",8994,2302,1,9,0)
be empty).
"KRN",8994,2302,1,10,0)
2) Check the output list from the RPC. If empty, you're done.
"KRN",8994,2302,1,11,0)
3) Otherwise, pass the list returned by the RPC to the Oracle procedure to
"KRN",8994,2302,1,12,0)
update the ROCs.
"KRN",8994,2302,1,13,0)
4) Move the output from the Oracle procedure into the array that will be 
"KRN",8994,2302,1,14,0)
used as input to the next RPC call, then return to step 1.
"KRN",8994,2302,1,15,0)
 
"KRN",8994,2302,1,16,0)
Each entry in the output list from this RPC contains up-arrow delimited
"KRN",8994,2302,1,17,0)
strings of ROC data. The data tells the procedure both what ROC number it 
"KRN",8994,2302,1,18,0)
belongs to, and the type of data. The data for the main table comes first,
"KRN",8994,2302,1,19,0)
followed by the issue text entries, the resolution text entries, and the
"KRN",8994,2302,1,20,0)
method-of-contact entries.
"KRN",8994,2302,2,0)
^8994.02A^3^1
"KRN",8994,2302,2,3,0)
PATSLIST^2^^0^1
"KRN",8994,2302,2,3,1,0)
^8994.021^2^2^3030605^^
"KRN",8994,2302,2,3,1,1,0)
If defined, contains a list of ROC numbers for the previous group of ROCs
"KRN",8994,2302,2,3,1,2,0)
that was migrated from VistA to the Oracle table. 
"KRN",8994,2302,2,"B","PATSLIST",3)

"KRN",8994,2302,2,"PARAMSEQ",1,3)

"KRN",8994,2302,3,0)
^8994.03^1^1^3030605^^^
"KRN",8994,2302,3,1,0)
Returns an M global which is an array of up-arrow delimited strings.
"KRN",8994,2303,-1)
0^11
"KRN",8994,2303,0)
QACV PERSON LOOKUP VLH^EN^QACVEMPX^4^^^^1
"KRN",8994,2303,1,0)
^8994.01^15^15^3030905^^^
"KRN",8994,2303,1,1,0)
Pass the name of an employee formatted as "last_name,first_name". 
"KRN",8994,2303,1,2,0)
 
"KRN",8994,2303,1,3,0)
The routine does a lister call on the VistA NEW PERSON file (200) to find
"KRN",8994,2303,1,4,0)
the next set of records that match the name. Partial name lookup is
"KRN",8994,2303,1,5,0)
supported. For example, "Sm" will find all "Smiths" and Smurfs, "Sm,J"
"KRN",8994,2303,1,6,0)
will find "Smith,Joe", and "Smurf,Jimmy".
"KRN",8994,2303,1,7,0)
 
"KRN",8994,2303,1,8,0)
The routine returns the IEN, name components, title and mail code for the
"KRN",8994,2303,1,9,0)
person(s) who match the lookup value, in XML format. In addition, the XML
"KRN",8994,2303,1,10,0)
data contains a flag indicating whether there are more matching records to
"KRN",8994,2303,1,11,0)
return. If it is set to 1, then the caller can make another call to get
"KRN",8994,2303,1,12,0)
the next 'N' records. The XML data also contains a 'next name' and 'next
"KRN",8994,2303,1,13,0)
IEN' value. This is used to tell the FileMan Lister where to start looking
"KRN",8994,2303,1,14,0)
on subsequent calls, in order to return the next N records. These two
"KRN",8994,2303,1,15,0)
'from' values must be passed as input parameters to subsequent calls.
"KRN",8994,2303,2,0)
^8994.02A^5^4
"KRN",8994,2303,2,2,0)
EMPNAME^1^60^1^1
"KRN",8994,2303,2,2,1,0)
^^1^1^3020903^
"KRN",8994,2303,2,2,1,1,0)
Employee's name with last name first. Ex: Smith,Joe
"KRN",8994,2303,2,3,0)
PATSROWS^1^12^0^2
"KRN",8994,2303,2,3,1,0)
^^2^2^3030822^
"KRN",8994,2303,2,3,1,1,0)
Number of employees to return in each call. If not passed, the default
"KRN",8994,2303,2,3,1,2,0)
value will be the next 10 matching employees.
"KRN",8994,2303,2,4,0)
PATSFRM0^1^35^1^3
"KRN",8994,2303,2,4,1,0)
^^5^5^3030905^
"KRN",8994,2303,2,4,1,1,0)
On the first call to this RPC, this parameter should be set to the empty
"KRN",8994,2303,2,4,1,2,0)
string "". On subsequent calls to find more matches to the same lookup 
"KRN",8994,2303,2,4,1,3,0)
value, the parameter must be set to the "patsFrom0" attribute value from
"KRN",8994,2303,2,4,1,4,0)
the XML document output by the previous call. The attribute will contain 
"KRN",8994,2303,2,4,1,5,0)
the starting NAME value for the next search.
"KRN",8994,2303,2,5,0)
PATSFRM1^1^35^1^4
"KRN",8994,2303,2,5,1,0)
^^5^5^3030905^
"KRN",8994,2303,2,5,1,1,0)
On the first call to this RPC, this parameter should be set to the empty
"KRN",8994,2303,2,5,1,2,0)
string "". On subsequent calls to find more matches to the same lookup 
"KRN",8994,2303,2,5,1,3,0)
value, the parameter must be set to the "patsFrom1" attribute value from
"KRN",8994,2303,2,5,1,4,0)
the XML document output by the previous call. The attribute will contain 
"KRN",8994,2303,2,5,1,5,0)
the starting IEN value for the next search.
"KRN",8994,2303,2,"B","EMPNAME",2)

"KRN",8994,2303,2,"B","PATSFRM0",4)

"KRN",8994,2303,2,"B","PATSFRM1",5)

"KRN",8994,2303,2,"B","PATSROWS",3)

"KRN",8994,2303,2,"PARAMSEQ",1,2)

"KRN",8994,2303,2,"PARAMSEQ",2,3)

"KRN",8994,2303,2,"PARAMSEQ",3,4)

"KRN",8994,2303,2,"PARAMSEQ",4,5)

"KRN",8994,2303,3,0)
^8994.03^1^1^3030905^^
"KRN",8994,2303,3,1,0)
Returns an M global which contains employee data in XML format.
"KRN",8994,2304,-1)
0^10
"KRN",8994,2304,0)
QACV KEY HOLDERS VLH^EN^QACVEMPX^4^^^^1
"KRN",8994,2304,1,0)
^8994.01^13^13^3040406^^^
"KRN",8994,2304,1,1,0)
Pass a list of SECURITY KEY names. The routine returns the next 'n' 
"KRN",8994,2304,1,2,0)
persons who have been granted access to one or more of the keys in the 
"KRN",8994,2304,1,3,0)
list.
"KRN",8994,2304,1,4,0)
 
"KRN",8994,2304,1,5,0)
The routine returns the IEN, name components, title and mail code for the
"KRN",8994,2304,1,6,0)
person(s) who match the lookup value, in XML format. In addition, the XML
"KRN",8994,2304,1,7,0)
header contains a flag indicating whether there are more matching records
"KRN",8994,2304,1,8,0)
to return. If it is set to 1, then the caller can make another call to get
"KRN",8994,2304,1,9,0)
the next 'N' records. The XML header also contains a 'next name' and 'next
"KRN",8994,2304,1,10,0)
IEN' value. These values are used like the FROM array in a FileMan Lister 
"KRN",8994,2304,1,11,0)
call LIST^DIC. They are used to tell the routine where to start looking on
"KRN",8994,2304,1,12,0)
subsequent calls, in order to return the next N records. These two 'from'
"KRN",8994,2304,1,13,0)
values must be passed as input parameters to subsequent calls.
"KRN",8994,2304,2,0)
^8994.02A^5^4
"KRN",8994,2304,2,2,0)
KEYLIST^2^30^1^1
"KRN",8994,2304,2,2,1,0)
^^2^2^3031120^
"KRN",8994,2304,2,2,1,1,0)
An array containing names of one or more SECURITY KEYS in the VistA 
"KRN",8994,2304,2,2,1,2,0)
system. The array looks like LIST(N)=KEYNAME where N is a integer.
"KRN",8994,2304,2,3,0)
PATSROWS^1^12^0^2
"KRN",8994,2304,2,3,1,0)
^^2^2^3030822^
"KRN",8994,2304,2,3,1,1,0)
Number of employees to return in each call. If not passed, the default
"KRN",8994,2304,2,3,1,2,0)
value will be the next 10 matching employees.
"KRN",8994,2304,2,4,0)
PATSFRM0^1^35^1^3
"KRN",8994,2304,2,4,1,0)
^^5^5^3030905^
"KRN",8994,2304,2,4,1,1,0)
On the first call to this RPC, this parameter should be set to the empty
"KRN",8994,2304,2,4,1,2,0)
string "". On subsequent calls to find more matches to the same lookup 
"KRN",8994,2304,2,4,1,3,0)
value, the parameter must be set to the "patsFrom0" attribute value from
"KRN",8994,2304,2,4,1,4,0)
the XML document output by the previous call. The attribute will contain 
"KRN",8994,2304,2,4,1,5,0)
the starting NAME value for the next search.
"KRN",8994,2304,2,5,0)
PATSFRM1^1^35^1^4
"KRN",8994,2304,2,5,1,0)
^8994.021^5^5^3040406^^^
"KRN",8994,2304,2,5,1,1,0)
On the first call to this RPC, this parameter should be set to the empty
"KRN",8994,2304,2,5,1,2,0)
string "". On subsequent calls to find more matches to the same lookup 
"KRN",8994,2304,2,5,1,3,0)
value, the parameter must be set to the "patsFrom1" attribute value from
"KRN",8994,2304,2,5,1,4,0)
the XML document output by the previous call. The attribute will contain 
"KRN",8994,2304,2,5,1,5,0)
the starting IEN value for the next search.
"KRN",8994,2304,2,"B","KEYLIST",2)

"KRN",8994,2304,2,"B","PATSFRM0",4)

"KRN",8994,2304,2,"B","PATSFRM1",5)

"KRN",8994,2304,2,"B","PATSROWS",3)

"KRN",8994,2304,2,"PARAMSEQ",1,2)

"KRN",8994,2304,2,"PARAMSEQ",2,3)

"KRN",8994,2304,2,"PARAMSEQ",3,4)

"KRN",8994,2304,2,"PARAMSEQ",4,5)

"KRN",8994,2304,3,0)
^8994.03^1^1^3040406^^^^
"KRN",8994,2304,3,1,0)
Returns an M global which contains employee data in XML format.
"KRN",8994,2306,-1)
0^9
"KRN",8994,2306,0)
QACI NATL INSTITUTION LIST^ENLDSTA^QACI2^1^^^^^1
"KRN",8994,2306,1,0)
^^7^7^3061130^
"KRN",8994,2306,1,1,0)
This RPC receives a list of station numbers from the Standard Data 
"KRN",8994,2306,1,2,0)
Services institution table std_institution. The list contains all station 
"KRN",8994,2306,1,3,0)
numbers that begin with the 3 character computing facility station number.
"KRN",8994,2306,1,4,0)
 
"KRN",8994,2306,1,5,0)
The list is stored in the ^XTMP array, and is used in the pre-migration
"KRN",8994,2306,1,6,0)
data cleanup option to make sure that any data references only valid
"KRN",8994,2306,1,7,0)
station numbers.
"KRN",8994,2306,3,0)
^^1^1^3061130^
"KRN",8994,2306,3,1,0)
Returns a number set to 1 to indicate success, 0 to indicate failure.
"MBREQ")
0
"ORD",3,19.1)
19.1;3;1;;KEY^XPDTA1;;;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",418,-1)
1^1
"PKG",418,0)
PATIENT REPRESENTATIVE^QAC^PATIENT REPRESENTATIVE PACKAGE
"PKG",418,22,0)
^9.49I^1^1
"PKG",418,22,1,0)
2.0^2950725^2950913
"PKG",418,22,1,"PAH",1,0)
19^3070124^520646539
"PKG",418,22,1,"PAH",1,1,0)
^^7^7^3070124
"PKG",418,22,1,"PAH",1,1,1,0)
This patch contains the VistA objects to run PATS (Patient Advocate
"PKG",418,22,1,"PAH",1,1,2,0)
Tracking System), the application that replaces the legacy Patient
"PKG",418,22,1,"PAH",1,1,3,0)
Representative system.
"PKG",418,22,1,"PAH",1,1,4,0)
 
"PKG",418,22,1,"PAH",1,1,5,0)
It includes both objects used to retrieve VistA data while the PATS
"PKG",418,22,1,"PAH",1,1,6,0)
application is running, and objects used to migrate the legacy data from
"PKG",418,22,1,"PAH",1,1,7,0)
the FileMan files to the new PATS Oracle tables on a central server.
"PRE")
QACIENV
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
17
"RTN","QACI0")
0^1^B1984508^n/a
"RTN","QACI0",1,0)
QACI0 ; OAKOIFO/TKW - DATA MIGRATION - PRE-MIGRATION ERROR CHECKING AND REPORT ;11/30/06  12:22
"RTN","QACI0",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI0",3,0)
EN ; Build report of errors found in both Reference Tables and ROCs.
"RTN","QACI0",4,0)
 ; Make sure list of valid sites has been downloaded from the EMC
"RTN","QACI0",5,0)
 W !!,"This option is meant to be run prior to migrating data from the old",!,"Patient Representative System in VistA to the new PATS system."
"RTN","QACI0",6,0)
 W !!,"The option reports data problems that would prevent the data from",!,"being migrated.",!
"RTN","QACI0",7,0)
 I '$D(^XTMP("QACMIGR","STDINSTITUTION")) D STAERR^QACI2 Q
"RTN","QACI0",8,0)
 Q:$$ASK'=1
"RTN","QACI0",9,0)
 W !
"RTN","QACI0",10,0)
 N QACI0 S QACI0=1
"RTN","QACI0",11,0)
 D EN0^QACI2
"RTN","QACI0",12,0)
 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI0",13,0)
 . K ^XTMP("QACMIGR",TYPE,"U") Q
"RTN","QACI0",14,0)
 Q
"RTN","QACI0",15,0)
 ;
"RTN","QACI0",16,0)
 ;
"RTN","QACI0",17,0)
ASK() ; Ask user whether they're sure they want to run the option.
"RTN","QACI0",18,0)
 N DIR,X,Y
"RTN","QACI0",19,0)
 S DIR(0)="YO",DIR("A")="Are you sure",DIR("B")="YES"
"RTN","QACI0",20,0)
 D ^DIR
"RTN","QACI0",21,0)
 Q Y
"RTN","QACI0",22,0)
 ;
"RTN","QACI0",23,0)
 ;
"RTN","QACI1")
0^2^B23422676^n/a
"RTN","QACI1",1,0)
QACI1 ; OAKOIFO/TKW - DATA MIGRATION - AUTO-CLOSE ROCS ;4/25/05  16:51
"RTN","QACI1",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI1",3,0)
EN ; Auto-close open ROCs with a Date of Contact prior to user-selected date.
"RTN","QACI1",4,0)
 I $D(^XTMP("QACMIGR","ROC","U")) D
"RTN","QACI1",5,0)
 . W !!,"*** CAUTION! You have already moved some ROCs to the staging area. To migrate"
"RTN","QACI1",6,0)
 . W !,"any changes to these ROCs, you will need to run the option to move data to"
"RTN","QACI1",7,0)
 . W !,"the staging area again. ***" Q
"RTN","QACI1",8,0)
 I $D(^XTMP("QACMIGR","ROC","D")) D
"RTN","QACI1",9,0)
 . W !!,"*** You cannot auto-close ROCs that have already migrated into PATS ***" Q
"RTN","QACI1",10,0)
 I '$D(^XTMP("QACMIGR","ROC","E")) D  Q
"RTN","QACI1",11,0)
 . W !!,"*** CAUTION! You have not yet run the option to generate the error report.",!,"     You must run it before auto-closing ROCs!" Q
"RTN","QACI1",12,0)
 N PATSCLDT,ROCIEN,ROC0,ROC2,ROCNO,CONVROC,CONDATE,INFOBY,ENTBY,STATION,TXT,EDITEBY,EDITIBY,EDITDIV,EDITITXT,EDITRTXT,PATSFDA,PATSIENS,DOTCNT,PATSCDT,CURRDT
"RTN","QACI1",13,0)
 N PATSCNT S PATSCNT=0
"RTN","QACI1",14,0)
 S CURRDT=$$DT^XLFDT()
"RTN","QACI1",15,0)
 S PATSCDT=$$FMTE^XLFDT(CURRDT)
"RTN","QACI1",16,0)
 S DOTCNT=0
"RTN","QACI1",17,0)
 ; Set default text to replace null issue text or null resolution text
"RTN","QACI1",18,0)
 S TXT(1)="This R.O.C. was auto-closed prior to migration to PATS"
"RTN","QACI1",19,0)
 ; Prompt them for auto-close date
"RTN","QACI1",20,0)
 S PATSCLDT=$$DEFDATE^QACI1A
"RTN","QACI1",21,0)
 W !!!,"You have asked to auto-close Open ROCs with a Date of Contact prior to",!,"the beginning of the previous quarter --  "_$$FMTE^XLFDT(PATSCLDT),!
"RTN","QACI1",22,0)
 D  Q:Y'=1
"RTN","QACI1",23,0)
 . N DIR S DIR(0)="YO"
"RTN","QACI1",24,0)
 . S DIR("A")="Are you sure"
"RTN","QACI1",25,0)
 . S DIR("B")="YES"
"RTN","QACI1",26,0)
 . D ^DIR Q
"RTN","QACI1",27,0)
 W !,"."
"RTN","QACI1",28,0)
 ;
"RTN","QACI1",29,0)
 ; Initialize header for all migration data so Kernel will kill global in 30 days.
"RTN","QACI1",30,0)
 S $P(^XTMP("QACMIGR",0),"^",1,2)=$$FMADD^XLFDT(CURRDT,30)_"^"_CURRDT
"RTN","QACI1",31,0)
 ; Set a flag indicating that auto-close in in process
"RTN","QACI1",32,0)
 S $P(^XTMP("QACMIGR","AUTO","C"),"^",2)=1
"RTN","QACI1",33,0)
 ; Read through CONSUMER CONTACTS and auto-close ROCs.
"RTN","QACI1",34,0)
 F ROCIEN=0:0 S ROCIEN=$O(^QA(745.1,ROCIEN)) Q:'ROCIEN  S ROC0=$G(^(ROCIEN,0)) D
"RTN","QACI1",35,0)
 . S DOTCNT=DOTCNT+1 I DOTCNT=500 W "." S DOTCNT=0
"RTN","QACI1",36,0)
 . ; Quit if ROC is already closed or if ROC number is null.
"RTN","QACI1",37,0)
 . Q:$P($G(^QA(745.1,ROCIEN,7)),"^",2)="C"
"RTN","QACI1",38,0)
 . S ROCNO=$P(ROC0,"^") Q:ROCNO=""
"RTN","QACI1",39,0)
 . S CONVROC=$$CONVROC^QACI2C(ROCNO)
"RTN","QACI1",40,0)
 . ; Quit is ROC has errors, or has been migrated.
"RTN","QACI1",41,0)
 . Q:$D(^XTMP("QACMIGR","ROC","E",ROCNO_" "))
"RTN","QACI1",42,0)
 . Q:$D(^XTMP("QACMIGR","ROC","D",CONVROC))
"RTN","QACI1",43,0)
 . ; Quit if date of contact is past the close date, or if it's null
"RTN","QACI1",44,0)
 . S CONDATE=$P(ROC0,"^",2) Q:CONDATE>PATSCLDT
"RTN","QACI1",45,0)
 . S CONDATE=$$FMTE^XLFDT(CONDATE,5)
"RTN","QACI1",46,0)
 . Q:CONDATE=""
"RTN","QACI1",47,0)
 . S ROC2=$G(^QA(745.1,ROCIEN,2))
"RTN","QACI1",48,0)
 . S (EDITEBY,EDITIBY,EDITDIV,EDITITXT,EDITRTXT)=0
"RTN","QACI1",49,0)
 . ;Extract and check DIVISION. Quit if station number is invalid.
"RTN","QACI1",50,0)
 . S STATION=+$P(ROC0,"^",16)
"RTN","QACI1",51,0)
 . I 'STATION S STATION=$$LKUP^XUAF4($P(ROCNO,".")),EDITDIV=1
"RTN","QACI1",52,0)
 . Q:$$STA^XUAF4(STATION)=""
"RTN","QACI1",53,0)
 . ;Extract info taken by and entered by--quit if both are null.
"RTN","QACI1",54,0)
 . S INFOBY=$P(ROC0,"^",6),ENTBY=$P(ROC0,"^",7)
"RTN","QACI1",55,0)
 . I ENTBY="" S ENTBY=INFOBY,EDITEBY=1
"RTN","QACI1",56,0)
 . I INFOBY="" S INFOBY=ENTBY,EDITIBY=1
"RTN","QACI1",57,0)
 . Q:INFOBY=""
"RTN","QACI1",58,0)
 . ;Make sure there is at least one issue code on the ROC, unless
"RTN","QACI1",59,0)
 . ;  the date of contact is in or prior to FY 2003.
"RTN","QACI1",60,0)
 . S I=$O(^QA(745.1,ROCIEN,3,0)),X=$P($G(^QA(745.1,ROCIEN,3,+I,0)),"^"),X=$P($G(^QA(745.2,+X,0)),"^")
"RTN","QACI1",61,0)
 . I X="",$P(ROC0,"^",2)>3030930 Q
"RTN","QACI1",62,0)
 . ; Issue Text
"RTN","QACI1",63,0)
 . S TXT="" D
"RTN","QACI1",64,0)
 .. F I=0:0 S I=$O(^QA(745.1,ROCIEN,4,I)) Q:'I  S TXT=$G(^(I,0)) Q:TXT]""
"RTN","QACI1",65,0)
 .. Q
"RTN","QACI1",66,0)
 . I TXT="" S EDITITXT=1
"RTN","QACI1",67,0)
 . ; Resolution Text
"RTN","QACI1",68,0)
 . S TXT="" D
"RTN","QACI1",69,0)
 .. F I=0:0 S I=$O(^QA(745.1,ROCIEN,6,I)) Q:'I  S TXT=$G(^(I,0)) Q:TXT]""
"RTN","QACI1",70,0)
 .. Q
"RTN","QACI1",71,0)
 . I TXT="" S EDITRTXT=1
"RTN","QACI1",72,0)
 . ;
"RTN","QACI1",73,0)
 . ; Set status of ROC to Closed and update any missing required fields
"RTN","QACI1",74,0)
 . ;   with their default values
"RTN","QACI1",75,0)
 . K ^TMP("DIERR",$J)
"RTN","QACI1",76,0)
 . K PATSFDA S PATSIENS=ROCIEN_","
"RTN","QACI1",77,0)
 . S PATSFDA(745.1,PATSIENS,27)="C"
"RTN","QACI1",78,0)
 . S PATSFDA(745.1,PATSIENS,26)=CURRDT
"RTN","QACI1",79,0)
 . I EDITEBY S PATSFDA(745.1,PATSIENS,9)=ENTBY
"RTN","QACI1",80,0)
 . I EDITIBY S PATSFDA(745.1,PATSIENS,8)=INFOBY
"RTN","QACI1",81,0)
 . I EDITDIV S PATSFDA(745.1,PATSIENS,37)=STATION
"RTN","QACI1",82,0)
 . D FILE^DIE("","PATSFDA")
"RTN","QACI1",83,0)
 . K PATSFDA
"RTN","QACI1",84,0)
 . I $D(^TMP("DIERR",$J)) D REOPEN Q
"RTN","QACI1",85,0)
 . ; Update Issue Text if necessary.
"RTN","QACI1",86,0)
 . I EDITITXT D WP^DIE(745.1,PATSIENS,22,"","TXT")
"RTN","QACI1",87,0)
 . I $D(^TMP("DIERR",$J)) D REOPEN Q
"RTN","QACI1",88,0)
 . ; Update Resolution Text if necessary.
"RTN","QACI1",89,0)
 . I EDITRTXT D WP^DIE(745.1,PATSIENS,25,"","TXT")
"RTN","QACI1",90,0)
 . I $D(^TMP("DIERR",$J)) D REOPEN Q
"RTN","QACI1",91,0)
 . ; Build a list of ROCs that were auto-closed.
"RTN","QACI1",92,0)
 . S ^XTMP("QACMIGR","AUTO","C",ROCNO_" ")=PATSCDT_"^"_EDITEBY_"^"_EDITIBY_"^"_EDITITXT_"^"_EDITRTXT_"^"_EDITDIV
"RTN","QACI1",93,0)
 . ; Update the count of ROCs that were autoclosed
"RTN","QACI1",94,0)
 . S PATSCNT=PATSCNT+1
"RTN","QACI1",95,0)
 . Q
"RTN","QACI1",96,0)
 W "Done."
"RTN","QACI1",97,0)
 ; Update count of ROCs autoclosed, set flag to indicate process is done.
"RTN","QACI1",98,0)
 S PATSCNT=$P(^XTMP("QACMIGR","AUTO","C"),"^")+PATSCNT D
"RTN","QACI1",99,0)
 . I PATSCNT=0 K ^XTMP("QACMIGR","AUTO","C") Q
"RTN","QACI1",100,0)
 . S ^XTMP("QACMIGR","AUTO","C")=PATSCNT_"^0" Q
"RTN","QACI1",101,0)
 ; Print report of ROCs auto-closed.
"RTN","QACI1",102,0)
 D ENRPT2^QACI1A
"RTN","QACI1",103,0)
 Q
"RTN","QACI1",104,0)
 ;
"RTN","QACI1",105,0)
REOPEN ; Re-open ROC if an error occurred during FileMan update
"RTN","QACI1",106,0)
 K PATSFDA,^TMP("DIERR",$J)
"RTN","QACI1",107,0)
 S PATSFDA(745.1,PATSIENS,27)="O"
"RTN","QACI1",108,0)
 D FILE^DIE("","PATSFDA")
"RTN","QACI1",109,0)
 K PATSFDA Q
"RTN","QACI1",110,0)
 ;
"RTN","QACI1",111,0)
 ;
"RTN","QACI1A")
0^3^B6784447^n/a
"RTN","QACI1A",1,0)
QACI1A ; OAKOIFO/TKW - DATA MIGRATION - AUTO-CLOSE ROCS (CONTINUED) ;10/26/06  11:23
"RTN","QACI1A",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI1A",3,0)
 ;
"RTN","QACI1A",4,0)
DEFDATE(DATEIN) ; Return default date for auto-closing ROCs
"RTN","QACI1A",5,0)
 N MM,YY
"RTN","QACI1A",6,0)
 I '$G(DATEIN) S DATEIN=$$DT^XLFDT()
"RTN","QACI1A",7,0)
 S MM=$E(DATEIN,4,5),YY=$E(DATEIN,1,3)
"RTN","QACI1A",8,0)
 S MM=$S(MM>9:"07",MM>6:"04",MM>3:"01",1:"10")
"RTN","QACI1A",9,0)
 I MM=10 S YY=YY-1
"RTN","QACI1A",10,0)
 Q YY_MM_"01"
"RTN","QACI1A",11,0)
 ;
"RTN","QACI1A",12,0)
 ;
"RTN","QACI1A",13,0)
ENRPT2 ; Print report of auto-closed ROCs
"RTN","QACI1A",14,0)
 I $O(^XTMP("QACMIGR","AUTO","C",""))="" W !!,"No ROCs have been Auto-Closed!",!! Q
"RTN","QACI1A",15,0)
 W !!,"Ready to print report of auto-closed ROCs",!
"RTN","QACI1A",16,0)
 N PATSHDR,PATSTYPE
"RTN","QACI1A",17,0)
 S PATSTYPE="AUTO"
"RTN","QACI1A",18,0)
 S PATSHDR="AUTO-CLOSED ROCS",PATSHDR(1)="ROC Number     Date Closed    NULL Fields changed"
"RTN","QACI1A",19,0)
 N ZTSAVE S ZTSAVE("PATSTYPE")="",ZTSAVE("PATSHDR")=""
"RTN","QACI1A",20,0)
 D EN^XUTMDEVQ("DQRPT2^QACI1A","Report of "_ZTSAVE("PATSHDR"),.ZTSAVE)
"RTN","QACI1A",21,0)
 Q
"RTN","QACI1A",22,0)
 ;
"RTN","QACI1A",23,0)
DQRPT ; Report errors found while processing ROCs
"RTN","QACI1A",24,0)
 N PAGENO,LNCNT,LASTROC,ROCNO,ERRMSG,INFO,HDDATE,X,%,%H,%I
"RTN","QACI1A",25,0)
 S PAGENO=1,LNCNT=0
"RTN","QACI1A",26,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI1A",27,0)
 U IO D HDR
"RTN","QACI1A",28,0)
 S (LASTROC,ROCNO)=""
"RTN","QACI1A",29,0)
 F  S ROCNO=$O(^XTMP("QACMIGR",PATSTYPE,"E",ROCNO)) Q:ROCNO=""  D
"RTN","QACI1A",30,0)
 . I LASTROC'=ROCNO D
"RTN","QACI1A",31,0)
 .. D:LNCNT>53 HDR
"RTN","QACI1A",32,0)
 .. W !,ROCNO
"RTN","QACI1A",33,0)
 .. S LASTROC=ROCNO,LNCNT=LNCNT+1
"RTN","QACI1A",34,0)
 .. Q
"RTN","QACI1A",35,0)
 . F I=0:0 S I=$O(^XTMP("QACMIGR",PATSTYPE,"E",ROCNO,I)) Q:'I  S X=^(I) D
"RTN","QACI1A",36,0)
 .. S ERRMSG=$P(X,"^") S:I=1 INFO=$P(X,"^",2)
"RTN","QACI1A",37,0)
 .. D:LNCNT>54 HDR
"RTN","QACI1A",38,0)
 .. I I=1 W ?15,"Info Taker: ",INFO,! S LNCNT=LNCNT+1
"RTN","QACI1A",39,0)
 .. W ?15,ERRMSG,!
"RTN","QACI1A",40,0)
 .. S LNCNT=LNCNT+1 Q
"RTN","QACI1A",41,0)
 . Q
"RTN","QACI1A",42,0)
 D ^%ZISC Q
"RTN","QACI1A",43,0)
 ;
"RTN","QACI1A",44,0)
DQRPT2 ; Report list of auto-closed ROCs
"RTN","QACI1A",45,0)
 N PAGENO,LNCNT,ROCNO,ERRMSG,HDDATE,%,%H,%I,PATSS,X
"RTN","QACI1A",46,0)
 S PATSS="D" I PATSTYPE="AUTO" S PATSS="C"
"RTN","QACI1A",47,0)
 S PAGENO=1,LNCNT=0
"RTN","QACI1A",48,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI1A",49,0)
 U IO D HDR
"RTN","QACI1A",50,0)
 S ROCNO=""
"RTN","QACI1A",51,0)
 F  S ROCNO=$O(^XTMP("QACMIGR",PATSTYPE,PATSS,ROCNO)) Q:ROCNO=""  S X=^(ROCNO) D
"RTN","QACI1A",52,0)
 . D:LNCNT>54 HDR
"RTN","QACI1A",53,0)
 . W !,ROCNO
"RTN","QACI1A",54,0)
 . I PATSTYPE="AUTO" D
"RTN","QACI1A",55,0)
 .. W ?15,$P(X,"^")
"RTN","QACI1A",56,0)
 .. I $P(X,"^",2) W "   Edited By"
"RTN","QACI1A",57,0)
 .. I $P(X,"^",3) W "   Info Taken By"
"RTN","QACI1A",58,0)
 .. I $P(X,"^",4) W "   Issue Text"
"RTN","QACI1A",59,0)
 .. I $P(X,"^",5) W "   Resolution Text"
"RTN","QACI1A",60,0)
 .. I $P(X,"^",6) W "   Division"
"RTN","QACI1A",61,0)
 .. Q
"RTN","QACI1A",62,0)
 . S LNCNT=LNCNT+1
"RTN","QACI1A",63,0)
 . Q
"RTN","QACI1A",64,0)
 D ^%ZISC Q
"RTN","QACI1A",65,0)
 ;
"RTN","QACI1A",66,0)
HDR W #,!,PATSHDR,?43,HDDATE,?68,"Page "_PAGENO,!
"RTN","QACI1A",67,0)
 I $D(PATSHDR(1)) W PATSHDR(1),!
"RTN","QACI1A",68,0)
 N X S X="",$P(X,"-",78)=""
"RTN","QACI1A",69,0)
 W X,!
"RTN","QACI1A",70,0)
 S LNCNT=0,PAGENO=PAGENO+1 Q
"RTN","QACI1A",71,0)
 ;
"RTN","QACI1A",72,0)
 ;
"RTN","QACI2")
0^4^B15898410^n/a
"RTN","QACI2",1,0)
QACI2 ; OAKOIFO/TKW - DATA MIGRATION - BUILD SUPPORTING TABLE AND ROC DATA TO MIGRATE ;1/24/07  17:14
"RTN","QACI2",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2",3,0)
EN ; Main entry point for building both legacy supporting table data
"RTN","QACI2",4,0)
 ; and ROC data to be migrated. Skip entries that have already
"RTN","QACI2",5,0)
 ; been migrated.
"RTN","QACI2",6,0)
 ;
"RTN","QACI2",7,0)
 I $P($G(^XTMP("QACMIGR","AUTO","C")),"^",2)=1 W !!,"*** CAUTION! Another user is trying to auto-close ROCs. Allow the process to",!,"finish before moving data. ***"
"RTN","QACI2",8,0)
 ; Make sure list of valid sites has been downloaded from the EMC
"RTN","QACI2",9,0)
 I '$D(^XTMP("QACMIGR","STDINSTITUTION")) D STAERR Q
"RTN","QACI2",10,0)
 I '$D(^XTMP("QACMIGR","AUTO","C")) W !!,"** No Contacts were Auto-Closed. **"
"RTN","QACI2",11,0)
 Q:$$ASK^QACI2A("")'=1
"RTN","QACI2",12,0)
 ; If called from ^QACI0 (pre-migration error report), QACI0 will be set to 1.
"RTN","QACI2",13,0)
 N QACI0 S QACI0=0
"RTN","QACI2",14,0)
 ; Kill Taskman task that rolls up data to Austin for VSSC reports, Put Patient Rep menus OUT OF ORDER
"RTN","QACI2",15,0)
 I '$$EN1^QACI5 Q
"RTN","QACI2",16,0)
 ;
"RTN","QACI2",17,0)
EN0 ; Entry point from ^QACI0 (Just check for errors, don't save data to staging area for migration)
"RTN","QACI2",18,0)
 ; If called from ^QACI0, QACI0 will be set to 1.
"RTN","QACI2",19,0)
 ; 
"RTN","QACI2",20,0)
 ; Get QA Site Parameter station number, and VISN Name
"RTN","QACI2",21,0)
 N PARENT,VISNNAME D PARVISN^QACI2A(.PARENT,.VISNNAME)
"RTN","QACI2",22,0)
 I VISNNAME="" W !!,"QA Site Parameter Station Number or VISN cannot be found!" Q
"RTN","QACI2",23,0)
 I $L(PARENT)'=3 W !!,"QA Site Parameter Station Number not 3 digits!" Q
"RTN","QACI2",24,0)
 ;
"RTN","QACI2",25,0)
 N TYPE,ROCIEN,ROC0,ROC2,ROC7,ROCNO,OLDROC,CONDATE,DFN,STATION,INFOBY,ENTBY,CC,EMPINV,FSOS,ROCISS,ISSIEN,PATSDT,HL,CE,MOC,MOCSTR,TS,PHONE,PHDESC,PATID,RESDATE,INTAPPL
"RTN","QACI2",26,0)
 N CURRDT,EDITEBY,EDITIBY,EDITDIV,EDITITXT,EDITRTXT,ITXTCNT,ITXTLN,ELIGSTAT,CATEGORY,CCNAME,PATSDUZ2,DOTCNT,PATSCNT,PATSERR,SRVRSTA,RLUPSTAT,QACDIV,DIK,DA,I,X
"RTN","QACI2",27,0)
 ; PATSDT will be current date in a format Oracle will recognize
"RTN","QACI2",28,0)
 S CURRDT=$$DT^XLFDT()
"RTN","QACI2",29,0)
 S PATSDT=$$FMTE^XLFDT(CURRDT,5)
"RTN","QACI2",30,0)
 ; Set header node for migration data. Data will be automatically purged in 30 days.
"RTN","QACI2",31,0)
 S $P(^XTMP("QACMIGR",0),"^",1,2)=$$FMADD^XLFDT(CURRDT,30)_"^"_CURRDT
"RTN","QACI2",32,0)
 S DOTCNT=199
"RTN","QACI2",33,0)
 ; Kill existing lists of data to be migrated and set counters to 0.
"RTN","QACI2",34,0)
 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI2",35,0)
 . K ^XTMP("QACMIGR",TYPE,"U"),^("E")
"RTN","QACI2",36,0)
 . S PATSCNT(TYPE)=0 Q
"RTN","QACI2",37,0)
 ; Retrieve and save station data (IA #1518)
"RTN","QACI2",38,0)
 D  I SRVRSTA="" W !!,"Server Station Number cannot be found!" Q
"RTN","QACI2",39,0)
 . S SRVRSTA=$$STA^XUAF4(+$$GET1^DIQ(8989.3,1,217,"I")) Q:SRVRSTA=""
"RTN","QACI2",40,0)
 . ; load list of divisions from MEDICAL CENTER DIVISION file for error checking
"RTN","QACI2",41,0)
 . F I=0:0 S I=$O(^DG(40.8,I)) Q:'I  S X=$P($G(^(I,0)),"^",7) S:X QACDIV(X)=""
"RTN","QACI2",42,0)
 . ; Quit if only running CHK option.
"RTN","QACI2",43,0)
 . Q:QACI0
"RTN","QACI2",44,0)
 . ; Put VISN and Computing facility data from QAC SITE PARAMETERS into output global
"RTN","QACI2",45,0)
 . ; for ROC and Facility Service or Section.
"RTN","QACI2",46,0)
 . S ^XTMP("QACMIGR","FSOS","U",0)=VISNNAME
"RTN","QACI2",47,0)
 . S ^XTMP("QACMIGR","ROC","U",0)=VISNNAME_"^"_PARENT_"^"_SRVRSTA
"RTN","QACI2",48,0)
 . ; Save computing station number for server in ROC and User nodes
"RTN","QACI2",49,0)
 . S ^XTMP("QACMIGR","USER","U",0)=SRVRSTA
"RTN","QACI2",50,0)
 . S ^XTMP("QACMIGR","EMPINV","U",0)=SRVRSTA Q
"RTN","QACI2",51,0)
 I SRVRSTA'=PARENT W !!,"QA Site Parameter Station Number not the same as Computing Station!" Q
"RTN","QACI2",52,0)
 ; Build mapping lists for contacting_entity, method_of_contact, treatment_status.
"RTN","QACI2",53,0)
 D CEMOCTS^QACI2A
"RTN","QACI2",54,0)
 ; Build temporary list of valid Migrated Issue Codes
"RTN","QACI2",55,0)
 I '$G(^XTMP("QACMIGR","ISS","D")) D BLDISS^QACI2A
"RTN","QACI2",56,0)
 ;
"RTN","QACI2",57,0)
 ; Build Reference Tables Lists for Congressional Contact
"RTN","QACI2",58,0)
 D BLDCC^QACI2A(PARENT,.PATSCNT)
"RTN","QACI2",59,0)
 ;
"RTN","QACI2",60,0)
 ;
"RTN","QACI2",61,0)
 ; Read through ROCs, check for errors, and if QACI0'=1 move data to staging area.
"RTN","QACI2",62,0)
 D ^QACI20
"RTN","QACI2",63,0)
 ; If not called from ^QACI0, update the counts of migrated data.
"RTN","QACI2",64,0)
 I 'QACI0 D UPDCNT^QACI2E(.PATSCNT)
"RTN","QACI2",65,0)
 ; Update the counts of errors.
"RTN","QACI2",66,0)
 D UPDERRCT^QACI2E
"RTN","QACI2",67,0)
 ; Print error report
"RTN","QACI2",68,0)
 D ERRPT^QACI2E(QACI0)
"RTN","QACI2",69,0)
 Q
"RTN","QACI2",70,0)
 ;
"RTN","QACI2",71,0)
ENLDSTA(PATSBY,QACSLIST) ; Load list of stations from sdsadm.std_institution table
"RTN","QACI2",72,0)
 ; PATSBY is set to 1 if this runs to completion, to 0 otherwise.
"RTN","QACI2",73,0)
 ; QACSLIST is an input array of station numbers
"RTN","QACI2",74,0)
 S PATSBY=0
"RTN","QACI2",75,0)
 I $O(QACSLIST(""))="" Q
"RTN","QACI2",76,0)
 K ^XTMP("QACMIGR","STDINSTITUTION")
"RTN","QACI2",77,0)
 ; Set header node for migration data. Data will be automatically purged in 30 days.
"RTN","QACI2",78,0)
 I '$D(^XTMP("QACMIGR")) D
"RTN","QACI2",79,0)
 . N CURRDT S CURRDT=$$DT^XLFDT()
"RTN","QACI2",80,0)
 . S $P(^XTMP("QACMIGR",0),"^",1,2)=$$FMADD^XLFDT(CURRDT,30)_"^"_CURRDT
"RTN","QACI2",81,0)
 . Q
"RTN","QACI2",82,0)
 N I,QACSTA S I=""
"RTN","QACI2",83,0)
 F  S I=$O(QACSLIST(I)) Q:I=""  S QACSTA=QACSLIST(I) D:QACSTA]""
"RTN","QACI2",84,0)
 . S ^XTMP("QACMIGR","STDINSTITUTION",QACSTA)=""
"RTN","QACI2",85,0)
 . Q
"RTN","QACI2",86,0)
 S PATSBY=1
"RTN","QACI2",87,0)
 Q
"RTN","QACI2",88,0)
 ;
"RTN","QACI2",89,0)
STAERR ; Display error if national stations not downloaded from EMC
"RTN","QACI2",90,0)
 W !!,"*** You must first run the option to download the list of nationally ***",!
"RTN","QACI2",91,0)
 W "*** recognized stations. See the PATS Data Migration Guide. ***" Q
"RTN","QACI2",92,0)
 ;   
"RTN","QACI2",93,0)
 ;
"RTN","QACI20")
0^5^B56932032^n/a
"RTN","QACI20",1,0)
QACI20 ; OAKOIFO/TKW - DATA MIGRATION - BUILD SUPPORTING TABLE AND ROC DATA TO MIGRATE (CONT.) ;01/12/2007  11:48
"RTN","QACI20",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI20",3,0)
 ;
"RTN","QACI20",4,0)
EN ; Read through ROCs, check for errors and if QACI0=0, move data to staging area.
"RTN","QACI20",5,0)
 F ROCIEN=0:0 S ROCIEN=$O(^QA(745.1,ROCIEN)) Q:'ROCIEN  S ROC0=$G(^(ROCIEN,0)) D
"RTN","QACI20",6,0)
 . S DOTCNT=DOTCNT+1 I DOTCNT=200 W "." S DOTCNT=0
"RTN","QACI20",7,0)
 . S X="" F I=2:1:16 S X=X_$P(ROC0,"^",I)
"RTN","QACI20",8,0)
 . S OLDROC=$P(ROC0,"^")
"RTN","QACI20",9,0)
 . ; If ROC has no ROC number, or nothing but a ROC number, delete it.
"RTN","QACI20",10,0)
 . I X=""!(OLDROC="") S DIK="^QA(745.1,",DA=ROCIEN D ^DIK Q
"RTN","QACI20",11,0)
 . ; Convert ROC Number to PATS format
"RTN","QACI20",12,0)
 . S ROCNO=$$CONVROC^QACI2C(OLDROC)
"RTN","QACI20",13,0)
 . I ROCNO'?3N.E1"."9N D ERROC^QACI2A(OLDROC,"ROC number is not correctly formatted") Q
"RTN","QACI20",14,0)
 . ; Quit if ROC has already been migrated.
"RTN","QACI20",15,0)
 . I $D(^XTMP("QACMIGR","ROC","D",ROCNO)) S X=^(ROCNO) D  Q
"RTN","QACI20",16,0)
 .. I X="" S ^XTMP("QACMIGR","ROC","D",ROCNO)=ROCIEN Q
"RTN","QACI20",17,0)
 .. I X'=ROCIEN D ERROC^QACI2A(OLDROC_" IEN: "_ROCIEN," is a duplicate ROC number")
"RTN","QACI20",18,0)
 .. Q
"RTN","QACI20",19,0)
 . ; Generate an error for duplicate ROC numbers
"RTN","QACI20",20,0)
 . I $D(^XTMP("QACMIGR","ROC","U",ROCNO_" "))!($D(^XTMP("QACMIGR","ROC","E",OLDROC_" "))) D  Q
"RTN","QACI20",21,0)
 .. D ERROC^QACI2A(OLDROC_" IEN: "_ROCIEN," is a duplicate ROC number") Q
"RTN","QACI20",22,0)
 . ; Extract date of contact, convert to 'Oracle friendly' format
"RTN","QACI20",23,0)
 . I $P(ROC0,"^",2)="" D ERROC^QACI2A(OLDROC,"DATE OF CONTACT is missing") Q
"RTN","QACI20",24,0)
 . D DT^DILF("X",$P(ROC0,"^",2),.CONDATE)
"RTN","QACI20",25,0)
 . I CONDATE>0 S CONDATE=$$FMTE^XLFDT(CONDATE,5)
"RTN","QACI20",26,0)
 . I CONDATE'?1.2N1"/"1.2N1"/"4N D ERROC^QACI2A(OLDROC,"DATE OF CONTACT is invalid")
"RTN","QACI20",27,0)
 . ; Kill ROC from list of ROCs whose data was changed during migration
"RTN","QACI20",28,0)
 . ; and initialize variables indicating ROC was changed
"RTN","QACI20",29,0)
 . D:'QACI0
"RTN","QACI20",30,0)
 .. K ^XTMP("QACMIGR","ROC","C",OLDROC_" ")
"RTN","QACI20",31,0)
 .. S (EDITEBY,EDITIBY,EDITDIV,EDITITXT,EDITRTXT)=0 Q
"RTN","QACI20",32,0)
 . S ROC2=$G(^QA(745.1,ROCIEN,2)),ROC7=$G(^(7))
"RTN","QACI20",33,0)
 . ;
"RTN","QACI20",34,0)
 . ; Get station number
"RTN","QACI20",35,0)
 . S STATION=$P(ROC0,"^",16) I STATION]"" D  Q:STATION=""
"RTN","QACI20",36,0)
 .. I '$D(QACDIV(STATION)) D ERROC^QACI2A(OLDROC,"DIVISION pointer "_+STATION_" not in MEDICAL CENTER DIVISION file") Q 
"RTN","QACI20",37,0)
 .. S STATION=$$STA^XUAF4(STATION)
"RTN","QACI20",38,0)
 .. I STATION="" D ERROC^QACI2A(OLDROC,"DIVISION pointer "_+STATION_" is invalid or has no Station Number") Q
"RTN","QACI20",39,0)
 .. I '$D(^XTMP("QACMIGR","STDINSTITUTION",STATION)) D ERROC^QACI2A(OLDROC,"DIVISION "_STATION_" is not a valid national station")
"RTN","QACI20",40,0)
 .. Q
"RTN","QACI20",41,0)
 . E  D
"RTN","QACI20",42,0)
 .. S STATION=$P(ROC0,"."),EDITDIV=1
"RTN","QACI20",43,0)
 .. I '$$LKUP^XUAF4(STATION) D ERROC^QACI2A(OLDROC,"STATION number part of ROC number is invalid.") Q
"RTN","QACI20",44,0)
 .. I '$D(^XTMP("QACMIGR","STDINSTITUTION",STATION)) D ERROC^QACI2A(OLDROC,"DIVISION "_STATION_" is not a valid national station")
"RTN","QACI20",45,0)
 .. Q
"RTN","QACI20",46,0)
 . ;
"RTN","QACI20",47,0)
 . ; Get Patient IEN
"RTN","QACI20",48,0)
 . S DFN=$P(ROC0,"^",3) I DFN]"" D
"RTN","QACI20",49,0)
 .. I 'DFN!('$D(^DPT(+DFN))) D ERROC^QACI2A(OLDROC,"PATIENT pointer "_+DFN_" is invalid") Q
"RTN","QACI20",50,0)
 .. ; build data for pats_patient table
"RTN","QACI20",51,0)
 .. S PATSERR=0 D PTDATA^QACI2B(PARENT,DFN,QACI0,.PATSERR,.PATSCNT)
"RTN","QACI20",52,0)
 .. I PATSERR D ERROC^QACI2A(OLDROC,"PATIENT has invalid data--see ref data report") Q
"RTN","QACI20",53,0)
 . ;
"RTN","QACI20",54,0)
 . ;Extract and convert to Id value--contacting_entity, treatment_status
"RTN","QACI20",55,0)
 . I 'QACI0 D
"RTN","QACI20",56,0)
 .. S X=$P(ROC0,"^",10),CE=$S(X="":10,$G(CE(X)):CE(X),1:10)
"RTN","QACI20",57,0)
 .. S X=$P(ROC2,"^",2) D
"RTN","QACI20",58,0)
 ... I X]"",$G(TS(X)) S TS=TS(X) Q
"RTN","QACI20",59,0)
 ... S TS=$S(DFN="":5,1:4) Q
"RTN","QACI20",60,0)
 .. Q
"RTN","QACI20",61,0)
 . ;
"RTN","QACI20",62,0)
 . ; Get hospital location data
"RTN","QACI20",63,0)
 . S HL=$P(ROC0,"^",12)
"RTN","QACI20",64,0)
 . ;
"RTN","QACI20",65,0)
 . ; Get Pats User data
"RTN","QACI20",66,0)
 . S INFOBY=+$P(ROC0,"^",6),ENTBY=+$P(ROC0,"^",7)
"RTN","QACI20",67,0)
 . I 'ENTBY S ENTBY=INFOBY,EDITEBY=1
"RTN","QACI20",68,0)
 . I 'INFOBY S INFOBY=ENTBY,EDITIBY=1
"RTN","QACI20",69,0)
 . I 'INFOBY D ERROC^QACI2A(OLDROC,"INFO TAKEN BY and ENTERED BY are both NULL")
"RTN","QACI20",70,0)
 . D:INFOBY
"RTN","QACI20",71,0)
 .. I '$D(^VA(200,INFOBY,0)) D ERROC^QACI2A(OLDROC,"INFO TAKEN BY pointer "_+INFOBY_" is invalid") Q
"RTN","QACI20",72,0)
 .. ; build data for pats_user table
"RTN","QACI20",73,0)
 .. S PATSERR=0 D USERDATA^QACI2B(PARENT,INFOBY,"U",QACI0,.PATSERR,.PATSCNT)
"RTN","QACI20",74,0)
 .. I PATSERR D ERROC^QACI2A(OLDROC,"INFO TAKER has invalid data--see USER on ref data report") Q
"RTN","QACI20",75,0)
 . I ENTBY,ENTBY'=INFOBY D
"RTN","QACI20",76,0)
 .. I '$D(^VA(200,ENTBY,0)) D ERROC^QACI2A(OLDROC,"ENTERED BY pointer "_+ENTBY_" is invalid") Q
"RTN","QACI20",77,0)
 .. ; build data for pats_user table
"RTN","QACI20",78,0)
 .. S PATSERR=0 D USERDATA^QACI2B(PARENT,ENTBY,"U",QACI0,.PATSERR,.PATSCNT)
"RTN","QACI20",79,0)
 .. I PATSERR D ERROC^QACI2A(OLDROC,"ENTERED BY has invalid data--see USER on ref data report") Q
"RTN","QACI20",80,0)
 . ;
"RTN","QACI20",81,0)
 . ; If telephone no.is null but name of contact is not, set telephone toa single space.
"RTN","QACI20",82,0)
 . S PHONE=$P(ROC0,"^",9),PHDESC=$P(ROC0,"^",8)
"RTN","QACI20",83,0)
 . I PHONE]"",$$TXTERR^QACI2C(PHONE,30) D ERROC^QACI2A(OLDROC,"TELEPHONE NO. too long or contains control characters")
"RTN","QACI20",84,0)
 . I PHDESC]"",$$TXTERR^QACI2C(PHDESC,30) D ERROC^QACI2A(OLDROC,"NAME OF CONTACT too long or contains control characters")
"RTN","QACI20",85,0)
 . I PHDESC]"",PHONE="" S PHONE=" "
"RTN","QACI20",86,0)
 . ;
"RTN","QACI20",87,0)
 . ; Get resolution date
"RTN","QACI20",88,0)
 . S RESDATE=$P(ROC7,"^") I RESDATE]"" D
"RTN","QACI20",89,0)
 .. D DT^DILF("X",$P(ROC7,"^"),.RESDATE)
"RTN","QACI20",90,0)
 .. I RESDATE>0 S RESDATE=$$FMTE^XLFDT(RESDATE,5)
"RTN","QACI20",91,0)
 .. I RESDATE'?1.2N1"/"1.2N1"/"4N D ERROC^QACI2A(OLDROC,"DATE RESOLVED is invalid")
"RTN","QACI20",92,0)
 .. Q
"RTN","QACI20",93,0)
 . ;
"RTN","QACI20",94,0)
 . ; Get ROC Status
"RTN","QACI20",95,0)
 . S STATUS=$P(ROC7,"^",2) I STATUS'="O",STATUS'="C" D ERROC^QACI2A(OLDROC,"STATUS not set to either Open or Closed")
"RTN","QACI20",96,0)
 . ;
"RTN","QACI20",97,0)
 . ; Get Congressional Contact
"RTN","QACI20",98,0)
 . S CC=$P(ROC0,"^",13),CCNAME=""
"RTN","QACI20",99,0)
 . I CC]"" D
"RTN","QACI20",100,0)
 .. I '$D(^QA(745.4,+CC,0)) D ERROC^QACI2A(OLDROC,"CONGRESSIONAL CONTACT pointer "_+CC_" is invalid") Q
"RTN","QACI20",101,0)
 .. S CCNAME=$P($G(^QA(745.4,+CC,0)),"^") S:CCNAME="" CCNAME="** no name **"
"RTN","QACI20",102,0)
 .. I $D(^XTMP("QACMIGR","CC","E",+CC)) D ERROC^QACI2A(OLDROC,"CONGRESSIONAL CONTACT "_CCNAME_" invalid--see ref data report")
"RTN","QACI20",103,0)
 .. Q
"RTN","QACI20",104,0)
 . ;
"RTN","QACI20",105,0)
 . ; Get 'Is internal appeal?' flag
"RTN","QACI20",106,0)
 . S INTAPPL=$P(ROC2,"^",7),INTAPPL=$S(INTAPPL="Y":1,1:0)
"RTN","QACI20",107,0)
 . ;
"RTN","QACI20",108,0)
 . ; Get Eligibility Status and Category at time ROC was entered
"RTN","QACI20",109,0)
 . D ELIGCAT^QACI2B(.ELIGSTAT,.CATEGORY,ROC0)
"RTN","QACI20",110,0)
 . ;
"RTN","QACI20",111,0)
 . ; Get rollup status
"RTN","QACI20",112,0)
 . S RLUPSTAT=0 I $P($G(^QA(745.1,ROCIEN,7)),"^",6)=3 S RLUPSTAT=1
"RTN","QACI20",113,0)
 . ;
"RTN","QACI20",114,0)
 . ; Build Issue Text and Resolution Text into output global
"RTN","QACI20",115,0)
 . N RESERR
"RTN","QACI20",116,0)
 . D BLDTXT^QACI2C(ROCNO,ROCIEN,QACI0,.ROCCNT,.RESERR,.EDITITXT,.EDITRTXT)
"RTN","QACI20",117,0)
 . ;
"RTN","QACI20",118,0)
 . ; If not called from ^QACI0, Build data for report of fields changed for migration.
"RTN","QACI20",119,0)
 . I 'QACI0,(EDITEBY+EDITIBY+EDITDIV+EDITITXT+EDITRTXT)>0 D
"RTN","QACI20",120,0)
 .. Q:$D(^XTMP("QACMIGR","ROC","E",OLDROC_" "))
"RTN","QACI20",121,0)
 .. S ^XTMP("QACMIGR","ROC","C",OLDROC_" ")=EDITEBY_"^"_EDITIBY_"^"_EDITDIV_"^"_EDITITXT_"^"_EDITRTXT
"RTN","QACI20",122,0)
 .. Q
"RTN","QACI20",123,0)
 . ; Build main ROC data - if called from ^QACI0, just set node.
"RTN","QACI20",124,0)
 . I QACI0 S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",1)=""
"RTN","QACI20",125,0)
 . E  S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",1)=ROCNO_"^MAIN^"_CONDATE_"^"_DFN_"^"_INFOBY_"^"_ENTBY_"^"_TS_"^"_CCNAME_"^"_STATUS_"^"_STATION_"^"_RESDATE_"^"_PHDESC_"^"_PHONE_"^"_CE_"^"_INTAPPL_"^"_ELIGSTAT_"^"_CATEGORY_"^"_RLUPSTAT_"^"
"RTN","QACI20",126,0)
 . ;
"RTN","QACI20",127,0)
 . ; Build Issue Code combinations into output global
"RTN","QACI20",128,0)
 . S ISSERR=$$ENISS^QACI2D(ROCIEN,ROCNO,OLDROC,QACI0,.ROCCNT,.RESERR,HL,PARENT,STATION,.PATSCNT)
"RTN","QACI20",129,0)
 . I ISSERR K ^XTMP("QACMIGR","ROC","U",ROCNO_" ")
"RTN","QACI20",130,0)
 . ; Build Methods of Contact into output global
"RTN","QACI20",131,0)
 . S (MOC,MOCSTR)=""
"RTN","QACI20",132,0)
 . S X=$P(ROC0,"^",11)
"RTN","QACI20",133,0)
 . I X]"" S MOC=$G(MOC(X)) I MOC="" D ERROC^QACI2A(OLDROC,"SOURCE OF CONTACT is invalid")
"RTN","QACI20",134,0)
 . I MOC]"" S MOCSTR=MOC_"^"
"RTN","QACI20",135,0)
 . F I=0:0 S I=$O(^QA(745.1,ROCIEN,12,I)) Q:'I  S X=$P($G(^(I,0)),"^") D:X]""
"RTN","QACI20",136,0)
 .. S MOC=$G(MOC(X))
"RTN","QACI20",137,0)
 .. I MOC="" D ERROC^QACI2A(OLDROC,"SOURCE(S) OF CONTACT are invalid") Q
"RTN","QACI20",138,0)
 .. S MOCSTR=MOCSTR_MOC_"^" Q
"RTN","QACI20",139,0)
 . I MOCSTR]"" D
"RTN","QACI20",140,0)
 .. ; If called from ^QACI0, we don't need to save data
"RTN","QACI20",141,0)
 .. Q:QACI0
"RTN","QACI20",142,0)
 .. Q:$D(^XTMP("QACMIGR","ROC","E",OLDROC_" "))
"RTN","QACI20",143,0)
 .. S ROCCNT=ROCCNT+1
"RTN","QACI20",144,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^MOC^"_MOCSTR
"RTN","QACI20",145,0)
 .. Q
"RTN","QACI20",146,0)
 . I $D(^XTMP("QACMIGR","ROC","E",OLDROC_" ")) K ^XTMP("QACMIGR","ROC","U",ROCNO_" ") Q
"RTN","QACI20",147,0)
 . S PATSCNT("ROC")=PATSCNT("ROC")+1
"RTN","QACI20",148,0)
 . Q
"RTN","QACI20",149,0)
 Q
"RTN","QACI20",150,0)
 ;
"RTN","QACI20",151,0)
 ;
"RTN","QACI2A")
0^6^B18512192^n/a
"RTN","QACI2A",1,0)
QACI2A ; OAKOIFO/TKW - DATA MIGRATION - BUILD LEGACY DATA TO BE MIGRATED (CONT.) ;10/26/06  16:42
"RTN","QACI2A",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2A",3,0)
PARVISN(PARENT,VISNNAME) ; Get Parent Station Number and VISN Name for a Station
"RTN","QACI2A",4,0)
 N I,QACPAR
"RTN","QACI2A",5,0)
 ; Get parent institution IEN from QAC SITE PARAMETERS file entry
"RTN","QACI2A",6,0)
 S PARENT=$P($G(^QA(740,1,0)),"^"),VISNNAME=""
"RTN","QACI2A",7,0)
 Q:'PARENT
"RTN","QACI2A",8,0)
 ; Retrieve VISN name
"RTN","QACI2A",9,0)
 D PARENT^XUAF4("QACPAR","`"_PARENT,1)
"RTN","QACI2A",10,0)
 S I=$O(QACPAR("P",0)) I 'I S PARENT="" Q
"RTN","QACI2A",11,0)
 S VISNNAME=$P(QACPAR("P",I),"^")
"RTN","QACI2A",12,0)
 ; Get station number for parent station
"RTN","QACI2A",13,0)
 S PARENT=$$STA^XUAF4(PARENT) S:PARENT="" VISNNAME=""
"RTN","QACI2A",14,0)
 Q
"RTN","QACI2A",15,0)
 ;
"RTN","QACI2A",16,0)
ASK(FLAG) ; Question Confirming that User want to run this option
"RTN","QACI2A",17,0)
 W !!,"This option builds temporary globals used to migrate all legacy data",!,"from the old Patient Representative system to the new Patient Advocate",!,"Tracking System (PATS).",!
"RTN","QACI2A",18,0)
 ;I $G(FLAG)="X" D
"RTN","QACI2A",19,0)
 ;. W !,"** This is the option to completely restart the migration process . **"
"RTN","QACI2A",20,0)
 ;. W !,"If data was migrated in error, the PATS Production Database Manager",!,"should delete the data from PATS prior to running this option.",!
"RTN","QACI2A",21,0)
 ;. Q
"RTN","QACI2A",22,0)
 N DIR S DIR(0)="YO",DIR("A")="Are you sure",DIR("B")="YES"
"RTN","QACI2A",23,0)
 S DIR("?",1)="This option reads through all of the ROCs. ROCs that have already been migrated"
"RTN","QACI2A",24,0)
 S DIR("?",2)="to PATS will not be moved to the staging area again. ROCs are checked for"
"RTN","QACI2A",25,0)
 S DIR("?",3)="data errors. Any ROCs with errors will not be moved to the staging area, and"
"RTN","QACI2A",26,0)
 S DIR("?",4)="will be displayed on an error report at the end of the process."
"RTN","QACI2A",27,0)
 S DIR("?",5)=""
"RTN","QACI2A",28,0)
 S DIR("?",6)="Once ROCs have been moved to the staging area, they are ready to be migrated"
"RTN","QACI2A",29,0)
 S DIR("?")="into PATS."
"RTN","QACI2A",30,0)
 D ^DIR
"RTN","QACI2A",31,0)
 Q Y
"RTN","QACI2A",32,0)
 ;
"RTN","QACI2A",33,0)
CEMOCTS ; Build mapping lists for contacting_entity, method_of_contact, treatment_status.
"RTN","QACI2A",34,0)
 S MOC("P")=1,MOC("W")=2,MOC("V")=2,MOC("I")=3,MOC("L")=4,MOC("S")=5
"RTN","QACI2A",35,0)
 Q:QACI0
"RTN","QACI2A",36,0)
 S CE("PA")=1,CE("RE")=2,CE("FR")=3,CE("CO")=4,CE("VH")=5,CE("VO")=6,CE("AT")=7,CE("DI")=8,CE("ST")=9,CE("OT")=10
"RTN","QACI2A",37,0)
 S TS("I")=6,TS("O")=7,TS("D")=8,TS("N")=9,TS("L")=10,TS("E")=11,TS("H")=12
"RTN","QACI2A",38,0)
 Q
"RTN","QACI2A",39,0)
 ;
"RTN","QACI2A",40,0)
BLDISS ; Build a list of migrated National Issue Codes.
"RTN","QACI2A",41,0)
 K ^XTMP("QACMIGR","ISS","D")
"RTN","QACI2A",42,0)
 ; Count of national issue codes to migrate=59
"RTN","QACI2A",43,0)
 S ^XTMP("QACMIGR","ISS","D")=59
"RTN","QACI2A",44,0)
 N I
"RTN","QACI2A",45,0)
 F I=1:1 S X=$P($T(LIST+I),";",3) Q:X=""  S ^XTMP("QACMIGR","ISS","D",X)=""
"RTN","QACI2A",46,0)
 Q
"RTN","QACI2A",47,0)
 ;
"RTN","QACI2A",48,0)
BLDCC(STATION,PATSCNT) ; Build list of all Congressional Contacts to migrate
"RTN","QACI2A",49,0)
 N CCIEN,CCCNT,CC0,X,CCDNM
"RTN","QACI2A",50,0)
 S CCCNT=0
"RTN","QACI2A",51,0)
 F CCIEN=0:0 S CCIEN=$O(^QA(745.4,CCIEN)) Q:'CCIEN  S CC0=$G(^(CCIEN,0)) D
"RTN","QACI2A",52,0)
 . S CCNAME=$P(CC0,"^")
"RTN","QACI2A",53,0)
 . Q:$D(^XTMP("QACMIGR","CC","D",CCIEN))
"RTN","QACI2A",54,0)
 . S CCDNM=$E(CCNAME,1,20) S:$L(CCNAME)>20 CCDNM=CCDNM_"..."
"RTN","QACI2A",55,0)
 . I $$TXTERR^QACI2C(CCNAME,60,0,1) D  Q
"RTN","QACI2A",56,0)
 .. D ERREF^QACI2C("CC",CCIEN,CCDNM_" - Office or Person Name invalid") Q
"RTN","QACI2A",57,0)
 . S X=$P(CC0,"^",2) I X]"",X'=1,X'=0 D  Q
"RTN","QACI2A",58,0)
 .. D ERREF^QACI2C("CC",CCIEN,CCDNM_" - 'Inactive' flag is invalid") Q
"RTN","QACI2A",59,0)
 . S ^XTMP("QACMIGR","CC","U",CCIEN)=CCIEN_"^"_STATION_"^"_CCNAME_"^"_X
"RTN","QACI2A",60,0)
 . S CCCNT=CCCNT+1 Q
"RTN","QACI2A",61,0)
 S PATSCNT("CC")=CCCNT
"RTN","QACI2A",62,0)
 Q
"RTN","QACI2A",63,0)
 ;
"RTN","QACI2A",64,0)
BLDFSOS(FSOSIEN,FSOSNAME,QACI0,PATSCNT) ; Check for errors, build data for a single Facility Service or Section
"RTN","QACI2A",65,0)
 Q:$D(^XTMP("QACMIGR","FSOS","E",FSOSIEN))
"RTN","QACI2A",66,0)
 Q:$D(^XTMP("QACMIGR","FSOS","U",FSOSIEN))
"RTN","QACI2A",67,0)
 I $$TXTERR^QACI2C(FSOSNAME,50,0,1) D  Q
"RTN","QACI2A",68,0)
 . N Y S Y=$L(FSOSNAME)
"RTN","QACI2A",69,0)
 . S FSOSNAME=$E(FSOSNAME,1,30) I Y>30 S FSOSNAME=FSOSNAME_"..."
"RTN","QACI2A",70,0)
 . D ERREF^QACI2C("FSOS",FSOSIEN,FSOSNAME_" - Name invalid") Q
"RTN","QACI2A",71,0)
 ; Quit if called from ^QACI0 to just print the error report
"RTN","QACI2A",72,0)
 Q:QACI0
"RTN","QACI2A",73,0)
 ; Quite if fsos has already migrated
"RTN","QACI2A",74,0)
 Q:$D(^XTMP("QACMIGR","FSOS","D",FSOSIEN))
"RTN","QACI2A",75,0)
 S ^XTMP("QACMIGR","FSOS","U",FSOSIEN)=FSOSIEN_"^"_FSOSNAME
"RTN","QACI2A",76,0)
 S PATSCNT("FSOS")=PATSCNT("FSOS")+1
"RTN","QACI2A",77,0)
 Q
"RTN","QACI2A",78,0)
 ;
"RTN","QACI2A",79,0)
ERROC(OLDROC,MSG) ; Record an error on a ROC
"RTN","QACI2A",80,0)
 Q:MSG=""
"RTN","QACI2A",81,0)
 N ERRCNT S ERRCNT=$O(^XTMP("QACMIGR","ROC","E",OLDROC_" ","A"),-1)+1
"RTN","QACI2A",82,0)
 S ^XTMP("QACMIGR","ROC","E",OLDROC_" ",ERRCNT)=MSG
"RTN","QACI2A",83,0)
 I ERRCNT=1 D
"RTN","QACI2A",84,0)
 . N I S I=$O(^QA(745.1,"B",OLDROC,0)) Q:'I
"RTN","QACI2A",85,0)
 . S X=$P($G(^QA(745.1,I,0)),"^",6) Q:'X
"RTN","QACI2A",86,0)
 . S X=$P($G(^VA(200,X,0)),"^") Q:X=""
"RTN","QACI2A",87,0)
 . S $P(^XTMP("QACMIGR","ROC","E",OLDROC_" ",ERRCNT),"^",2)=X Q
"RTN","QACI2A",88,0)
 Q
"RTN","QACI2A",89,0)
 ;
"RTN","QACI2A",90,0)
LIST ;; List of valid national issue codes
"RTN","QACI2A",91,0)
 ;;AC01
"RTN","QACI2A",92,0)
 ;;AC02
"RTN","QACI2A",93,0)
 ;;AC03
"RTN","QACI2A",94,0)
 ;;AC04
"RTN","QACI2A",95,0)
 ;;AC05
"RTN","QACI2A",96,0)
 ;;AC06
"RTN","QACI2A",97,0)
 ;;AC07
"RTN","QACI2A",98,0)
 ;;AC08
"RTN","QACI2A",99,0)
 ;;AC09
"RTN","QACI2A",100,0)
 ;;AC10
"RTN","QACI2A",101,0)
 ;;AC11
"RTN","QACI2A",102,0)
 ;;AC12
"RTN","QACI2A",103,0)
 ;;CO01
"RTN","QACI2A",104,0)
 ;;CO02
"RTN","QACI2A",105,0)
 ;;CO03
"RTN","QACI2A",106,0)
 ;;CO04
"RTN","QACI2A",107,0)
 ;;CP01
"RTN","QACI2A",108,0)
 ;;ED01
"RTN","QACI2A",109,0)
 ;;ED02
"RTN","QACI2A",110,0)
 ;;EM01
"RTN","QACI2A",111,0)
 ;;EM02
"RTN","QACI2A",112,0)
 ;;EM03
"RTN","QACI2A",113,0)
 ;;EV01
"RTN","QACI2A",114,0)
 ;;EV02
"RTN","QACI2A",115,0)
 ;;EV03
"RTN","QACI2A",116,0)
 ;;FI01
"RTN","QACI2A",117,0)
 ;;IF01
"RTN","QACI2A",118,0)
 ;;IF02
"RTN","QACI2A",119,0)
 ;;IF04
"RTN","QACI2A",120,0)
 ;;IF05
"RTN","QACI2A",121,0)
 ;;IF06
"RTN","QACI2A",122,0)
 ;;IF07
"RTN","QACI2A",123,0)
 ;;IF08
"RTN","QACI2A",124,0)
 ;;IF09
"RTN","QACI2A",125,0)
 ;;IF10
"RTN","QACI2A",126,0)
 ;;LL01
"RTN","QACI2A",127,0)
 ;;LL02
"RTN","QACI2A",128,0)
 ;;LL03
"RTN","QACI2A",129,0)
 ;;LL04
"RTN","QACI2A",130,0)
 ;;OP01
"RTN","QACI2A",131,0)
 ;;OP02
"RTN","QACI2A",132,0)
 ;;PC01
"RTN","QACI2A",133,0)
 ;;PC02
"RTN","QACI2A",134,0)
 ;;PR01
"RTN","QACI2A",135,0)
 ;;PR02
"RTN","QACI2A",136,0)
 ;;PR03
"RTN","QACI2A",137,0)
 ;;PR04
"RTN","QACI2A",138,0)
 ;;RE01
"RTN","QACI2A",139,0)
 ;;RG01
"RTN","QACI2A",140,0)
 ;;RG02
"RTN","QACI2A",141,0)
 ;;RG03
"RTN","QACI2A",142,0)
 ;;RI01
"RTN","QACI2A",143,0)
 ;;RI02
"RTN","QACI2A",144,0)
 ;;RI03
"RTN","QACI2A",145,0)
 ;;RI04
"RTN","QACI2A",146,0)
 ;;RI05
"RTN","QACI2A",147,0)
 ;;SC01
"RTN","QACI2A",148,0)
 ;;SC02
"RTN","QACI2A",149,0)
 ;;TR01
"RTN","QACI2A",150,0)
 ;;
"RTN","QACI2B")
0^7^B36187753^n/a
"RTN","QACI2B",1,0)
QACI2B ; OAKOIFO/TKW - DATA MIGRATION - BUILD SUPPORTING TABLE DATA ;4/10/06  12:06
"RTN","QACI2B",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2B",3,0)
 ;
"RTN","QACI2B",4,0)
PTDATA(STATION,DFN,QACI0,PATSERR,PATSCNT) ; Put patient data into ^XTMP global for migration
"RTN","QACI2B",5,0)
 S PATSERR=0
"RTN","QACI2B",6,0)
 Q:$D(^XTMP("QACMIGR","PT","D",DFN))
"RTN","QACI2B",7,0)
 Q:$D(^XTMP("QACMIGR","PT","U",DFN))
"RTN","QACI2B",8,0)
 I $D(^XTMP("QACMIGR","PT","E",DFN)) S PATSERR=1 Q
"RTN","QACI2B",9,0)
 N PATX,I,X,Y,VAN,VAX,VAV,VADM,VAEL,DSPNAME,PTICN,PTNAME,PATSDATA,PATSDAT2,PATSENRL,GENDER,DOB,RACE,ETH
"RTN","QACI2B",10,0)
 S (PATSDATA,PATSDAT2)=""
"RTN","QACI2B",11,0)
 ; Get Patient Demographics, load name into variable. (IA #10061)
"RTN","QACI2B",12,0)
 D DEM^VADPT
"RTN","QACI2B",13,0)
 S DSPNAME=$G(VADM(1)) I $L(DSPNAME)>30 S DSPNAME=$E(DSPNAME,1,30)_"..."
"RTN","QACI2B",14,0)
 ; Get Patient's Integration Control Number (ICN) (IA #2701)
"RTN","QACI2B",15,0)
 S PTICN=$P($$GETICN^MPIF001(DFN),"^")
"RTN","QACI2B",16,0)
 I PTICN]"",PTICN'=-1,PTICN'?1.12N1"V"1.6N S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - ICN invalid")
"RTN","QACI2B",17,0)
 ; Load Parent Station number, Patients IEN (DFN) and ICN into output (node 1)
"RTN","QACI2B",18,0)
 I 'QACI0 S PATSDATA="1^"_STATION_"^"_DFN_"^"_PTICN_"^"
"RTN","QACI2B",19,0)
 ; Get enrollment priority for current enrollment from file 27.11 (IA #2918)
"RTN","QACI2B",20,0)
 S PATSENRL=$$GETENRL^QACVDEM(DFN)
"RTN","QACI2B",21,0)
 ; Get Patient Name Components and load into output. (IA #3065)
"RTN","QACI2B",22,0)
 S PTNAME("FILE")=2,PTNAME("FIELD")=.01,PTNAME("IENS")=DFN
"RTN","QACI2B",23,0)
 S PTNAME=$$HLNAME^XLFNAME(.PTNAME)
"RTN","QACI2B",24,0)
 D
"RTN","QACI2B",25,0)
 . N NMERR S NMERR=0
"RTN","QACI2B",26,0)
 . I PTNAME'?.ANP S NMERR=1
"RTN","QACI2B",27,0)
 . S X=$P(PTNAME,"^") I $$TXTERR^QACI2C(X,35,0,1) S NMERR=1
"RTN","QACI2B",28,0)
 . S X=$P(PTNAME,"^",2) I $$TXTERR^QACI2C(X,25,0,1) S NMERR=1
"RTN","QACI2B",29,0)
 . S X=$P(PTNAME,"^",3) I $$TXTERR^QACI2C(X,25) S NMERR=1
"RTN","QACI2B",30,0)
 . F I=4:1:6 I $$TXTERR^QACI2C($P(PTNAME,"^",I),10) S NMERR=1 Q
"RTN","QACI2B",31,0)
 . I NMERR=1 S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Name invalid")
"RTN","QACI2B",32,0)
 . Q
"RTN","QACI2B",33,0)
 I 'QACI0 S PATSDATA=PATSDATA_PTNAME
"RTN","QACI2B",34,0)
 ; Load Gender, date of birth and SSN into output
"RTN","QACI2B",35,0)
 S GENDER=$P(VADM(5),"^") I GENDER'="M",GENDER'="F" D
"RTN","QACI2B",36,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Gender invalid") Q
"RTN","QACI2B",37,0)
 S DOB=$$CONVDATE($P(VADM(3),"^")) D:'DOB
"RTN","QACI2B",38,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Date of Birth invalid") Q
"RTN","QACI2B",39,0)
 S X=$E(VADM(2),1,9) I X]"",X'?9N D
"RTN","QACI2B",40,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - SSN invalid") Q
"RTN","QACI2B",41,0)
 I 'QACI0 S $P(PATSDATA,"^",11,14)=GENDER_"^"_DOB_"^"_X_"^0"
"RTN","QACI2B",42,0)
 S PATX=$E(VADM(2),10) I PATX="P",'QACI0 S $P(PATSDATA,"^",14)=1
"RTN","QACI2B",43,0)
 ; Get eligibility data, load eligibility code and enrollment priority
"RTN","QACI2B",44,0)
 ; period of service, is service connected, svc.connected %
"RTN","QACI2B",45,0)
 ; and category into output  (IA #10061)
"RTN","QACI2B",46,0)
 D ELIG^VADPT
"RTN","QACI2B",47,0)
 S X=$P(VAEL(1),"^",2)
"RTN","QACI2B",48,0)
 I $P(VAEL(1),"^"),X="" D
"RTN","QACI2B",49,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Primary Eligibility Code pointer invalid") Q
"RTN","QACI2B",50,0)
 I $$TXTERR^QACI2C(X,30) D
"RTN","QACI2B",51,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Primary Eligibility Code invalid") Q
"RTN","QACI2B",52,0)
 I 'QACI0 S $P(PATSDATA,"^",15,16)=X_"^"_PATSENRL
"RTN","QACI2B",53,0)
 ; Load period of service, is service connected, svc.connected %
"RTN","QACI2B",54,0)
 ; and category into output node 2.
"RTN","QACI2B",55,0)
 S X=$P(VAEL(2),"^",2)
"RTN","QACI2B",56,0)
 I $P(VAEL(2),"^"),X="" D
"RTN","QACI2B",57,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Period of Service pointer invalid") Q
"RTN","QACI2B",58,0)
 I $$TXTERR^QACI2C(X,25) D
"RTN","QACI2B",59,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Period of Service invalid") Q
"RTN","QACI2B",60,0)
 I 'QACI0 S PATSDAT2="2^"_X
"RTN","QACI2B",61,0)
 S X=$P(VAEL(3),"^") I X'=1,X'=0 D
"RTN","QACI2B",62,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Is Service Connected Flag invalid") Q
"RTN","QACI2B",63,0)
 I 'QACI0 S $P(PATSDAT2,"^",3)=X
"RTN","QACI2B",64,0)
 S X=$P(VAEL(3),"^",2) D:X]""
"RTN","QACI2B",65,0)
 . I X'?1.3N!(X<0)!(X>100) S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Service Connected % invalid")
"RTN","QACI2B",66,0)
 . Q
"RTN","QACI2B",67,0)
 I 'QACI0 S $P(PATSDAT2,"^",4)=X
"RTN","QACI2B",68,0)
 ; Add CATEGORY (Current Means Test Status)
"RTN","QACI2B",69,0)
 S X=$P($G(^DPT(DFN,0)),"^",14) I X,'$D(^DG(408.32,X,0)) D
"RTN","QACI2B",70,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Current Means Test Status pointer invalid") Q
"RTN","QACI2B",71,0)
 S X=$P(VAEL(9),"^",2)
"RTN","QACI2B",72,0)
 I X]"",$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E)!(X'?.ANP) D
"RTN","QACI2B",73,0)
 . S PATSERR=1 D ERREF^QACI2C("PT",DFN,DSPNAME_" - Current Means Test Status invalid") Q
"RTN","QACI2B",74,0)
 I 'QACI0 S $P(PATSDAT2,"^",5)=X
"RTN","QACI2B",75,0)
 ; Add Ethnicity and Race information to output (IA #3799)
"RTN","QACI2B",76,0)
 D RACETH^QACVDEM(.VADM,.RACE,.ETH)
"RTN","QACI2B",77,0)
 I ETH]"" S $P(PATSDAT2,"^",6)=ETH
"RTN","QACI2B",78,0)
 S X=6
"RTN","QACI2B",79,0)
 F I=0:0 S I=$O(RACE(I)) Q:'I  D
"RTN","QACI2B",80,0)
 . S X=X+1
"RTN","QACI2B",81,0)
 . S $P(PATSDAT2,"^",X)=RACE(I)
"RTN","QACI2B",82,0)
 . Q
"RTN","QACI2B",83,0)
 ; Quit if any errors occurred
"RTN","QACI2B",84,0)
 I PATSERR=1 Q
"RTN","QACI2B",85,0)
 ; Put data into table for output.
"RTN","QACI2B",86,0)
 S ^XTMP("QACMIGR","PT","U",DFN)=PATSDATA
"RTN","QACI2B",87,0)
 S ^XTMP("QACMIGR","PT","U",DFN,"cont")=PATSDAT2
"RTN","QACI2B",88,0)
 S PATSCNT("PT")=PATSCNT("PT")+1
"RTN","QACI2B",89,0)
 Q
"RTN","QACI2B",90,0)
 ;
"RTN","QACI2B",91,0)
ELIGCAT(ELIGSTAT,CATEGORY,ROC0) ; Get Patient Eligibility Status and Category from ROC
"RTN","QACI2B",92,0)
 S ELIGSTAT=$P(ROC0,"^",4) D:ELIGSTAT]""
"RTN","QACI2B",93,0)
 . I $$TXTERR^QACI2C(ELIGSTAT,30) D ERROC^QACI2A(OLDROC,"ELIGIBILITY STATUS is invalid")
"RTN","QACI2B",94,0)
 . Q
"RTN","QACI2B",95,0)
 S CATEGORY=$P(ROC0,"^",5) D:CATEGORY]""
"RTN","QACI2B",96,0)
 . I $$TXTERR^QACI2C(CATEGORY,30) D ERROC^QACI2A(OLDROC,"CATEGORY (current means test) is invalid")
"RTN","QACI2B",97,0)
 . Q
"RTN","QACI2B",98,0)
 Q
"RTN","QACI2B",99,0)
 ;
"RTN","QACI2B",100,0)
USERDATA(STATION,IEN,USERTYPE,QACI0,PATSERR,PATSCNT) ; Load pats_user data for migration
"RTN","QACI2B",101,0)
 S PATSERR=0
"RTN","QACI2B",102,0)
 N UTYPE S UTYPE=$S(USERTYPE="U":"USER",1:"EMPINV")
"RTN","QACI2B",103,0)
 Q:$D(^XTMP("QACMIGR",UTYPE,"D",IEN))
"RTN","QACI2B",104,0)
 Q:$D(^XTMP("QACMIGR",UTYPE,"U",IEN))
"RTN","QACI2B",105,0)
 I $D(^XTMP("QACMIGR",UTYPE,"E",IEN)) S PATSERR=1 Q
"RTN","QACI2B",106,0)
 N IENS,EMPDATA,DSPNAME,NAMECOMP,NAMEJ,TITLE,MAILCODE,NMERR
"RTN","QACI2B",107,0)
 S IENS=IEN_",",EMPDATA=""
"RTN","QACI2B",108,0)
 S DSPNAME=$P($G(^VA(200,+$G(IEN),0)),"^")
"RTN","QACI2B",109,0)
 I $L(DSPNAME)>30 S DSPNAME=$E(DSPNAME,1,30)_"..."
"RTN","QACI2B",110,0)
 ; Get user name, pointer to name componentents, title and mail code (IA #10060)
"RTN","QACI2B",111,0)
 I USERTYPE="E" D
"RTN","QACI2B",112,0)
 . D GETS^DIQ(200,IENS,"8;28","IE","EMPDATA")
"RTN","QACI2B",113,0)
 . S X=$P($G(^VA(200,IEN,0)),"^",9) I X,'$D(^DIC(3.1,X,0)) D
"RTN","QACI2B",114,0)
 .. S PATSERR=1 D ERREF^QACI2C("EMPINV",IEN,DSPNAME_" - Title pointer invalid")
"RTN","QACI2B",115,0)
 . S TITLE=$E($G(EMPDATA(200,IENS,8,"E")),1,30)
"RTN","QACI2B",116,0)
 . S MAILCODE=$E($G(EMPDATA(200,IENS,28,"E")),1,10)
"RTN","QACI2B",117,0)
 . I $$TXTERR^QACI2C(TITLE) S PATSERR=1 D ERREF^QACI2C("EMPINV",IEN,DSPNAME_" - Title invalid")
"RTN","QACI2B",118,0)
 . I $$TXTERR^QACI2C(MAILCODE) S PATSERR=1 D ERREF^QACI2C("EMPINV",IEN,DSPNAME_" - Mail Code invalid")
"RTN","QACI2B",119,0)
 . Q
"RTN","QACI2B",120,0)
 ; Load User IEN and station number into output
"RTN","QACI2B",121,0)
 I 'QACI0 S EMPDATA=IEN_"^"_STATION_"^"
"RTN","QACI2B",122,0)
 ; Get name components (IA #3065)
"RTN","QACI2B",123,0)
 S NAMECOMP("FILE")=200,NAMECOMP("FIELD")=.01,NAMECOMP("IENS")=IENS
"RTN","QACI2B",124,0)
 S NAMECOMP=$$HLNAME^XLFNAME(.NAMECOMP)
"RTN","QACI2B",125,0)
 S NMERR=0
"RTN","QACI2B",126,0)
 F NAMEJ=1:1:6 D
"RTN","QACI2B",127,0)
 . S X=$P(NAMECOMP,"^",NAMEJ) I NAMEJ>2,X="" Q
"RTN","QACI2B",128,0)
 . I X'?.ANP S NMERR=1 Q
"RTN","QACI2B",129,0)
 . I NAMEJ=1,$$TXTERR^QACI2C(X,35,0,1) S NMERR=1 Q
"RTN","QACI2B",130,0)
 . I NAMEJ=2,$$TXTERR^QACI2C(X,25,0,1) S NMERR=1 Q
"RTN","QACI2B",131,0)
 . I NAMEJ=3,$$TXTERR^QACI2C(X,25) S NMERR=1 Q
"RTN","QACI2B",132,0)
 . I NAMEJ>3,$$TXTERR^QACI2C(X,10) S NMERR=1 Q
"RTN","QACI2B",133,0)
 . I 'QACI0 S $P(EMPDATA,"^",NAMEJ+2)=X
"RTN","QACI2B",134,0)
 . Q
"RTN","QACI2B",135,0)
 I NMERR=1 D NAMERR
"RTN","QACI2B",136,0)
 Q:PATSERR=1
"RTN","QACI2B",137,0)
 I 'QACI0,USERTYPE="E" S $P(EMPDATA,"^",9)=TITLE,$P(EMPDATA,"^",10)=MAILCODE
"RTN","QACI2B",138,0)
 S ^XTMP("QACMIGR",UTYPE,"U",IEN)=EMPDATA
"RTN","QACI2B",139,0)
 S PATSCNT(UTYPE)=PATSCNT(UTYPE)+1
"RTN","QACI2B",140,0)
 Q
"RTN","QACI2B",141,0)
 ;
"RTN","QACI2B",142,0)
CONVDATE(OLDDATE) ; Convert data to MM/DD/YYYY format
"RTN","QACI2B",143,0)
 N MM,DD S MM=$E(OLDDATE,4,5),DD=$E(OLDDATE,6,7)
"RTN","QACI2B",144,0)
 S:MM="00" MM="01"
"RTN","QACI2B",145,0)
 S:DD="00" DD="01"
"RTN","QACI2B",146,0)
 S OLDDATE=$E(OLDDATE,1,3)_MM_DD
"RTN","QACI2B",147,0)
 Q $$FMTE^XLFDT(OLDDATE,5)
"RTN","QACI2B",148,0)
 ;
"RTN","QACI2B",149,0)
NAMERR ;
"RTN","QACI2B",150,0)
 N X S X="Name invalid"
"RTN","QACI2B",151,0)
 I $G(DSPNAME)]"" S X=DSPNAME_" - "_X
"RTN","QACI2B",152,0)
 S PATSERR=1 D ERREF^QACI2C(UTYPE,IEN,X)
"RTN","QACI2B",153,0)
 Q
"RTN","QACI2B",154,0)
 ;
"RTN","QACI2C")
0^8^B34183381^n/a
"RTN","QACI2C",1,0)
QACI2C ; OAKOIFO/TKW - DATA MIGRATION - BUILD LEGACY DATA TO BE MIGRATED (CONT.) ;5/1/06  12:09
"RTN","QACI2C",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2C",3,0)
TXTERR(FLD,LEN,REMOVEUP,NOTNULL) ; Check field for length, check for control characters
"RTN","QACI2C",4,0)
 ; FLD=Field to be checked, LEN=optional max length
"RTN","QACI2C",5,0)
 ; REMOVEUP=optional flag set to 1 to remove up-arrows from the text.
"RTN","QACI2C",6,0)
 ; NOTNULL=optional flag set to 1 if field cannot be null.
"RTN","QACI2C",7,0)
 ; Return 1 if any errors are encountered.
"RTN","QACI2C",8,0)
 N L,I,X,Y,ERR S REMOVEUP=$G(REMOVEUP)
"RTN","QACI2C",9,0)
 S L=$L(FLD),ERR=0
"RTN","QACI2C",10,0)
 I $G(LEN),L>LEN Q 1
"RTN","QACI2C",11,0)
 F I=1:1:L S X=$E(FLD,I,I) Q:ERR!(X="")  D
"RTN","QACI2C",12,0)
 . I REMOVEUP,X="^" S FLD=$E(FLD,1,I-1)_$E(FLD,I+1,L),I=I-1 Q
"RTN","QACI2C",13,0)
 . S Y=$A(X)
"RTN","QACI2C",14,0)
 . I Y>31,Y<127 Q
"RTN","QACI2C",15,0)
 . S ERR=1 Q
"RTN","QACI2C",16,0)
 I $G(NOTNULL),FLD="" Q 1
"RTN","QACI2C",17,0)
 Q ERR
"RTN","QACI2C",18,0)
 ;
"RTN","QACI2C",19,0)
CONVROC(OLDROC) ; Convert roc number to new format
"RTN","QACI2C",20,0)
 I OLDROC'?3N.AN1"."6N Q ""
"RTN","QACI2C",21,0)
 N NEWROC,X
"RTN","QACI2C",22,0)
 ; Make sure the first part of the ROC number is a valid station number
"RTN","QACI2C",23,0)
 S X=$P(OLDROC,".") Q:X="" ""
"RTN","QACI2C",24,0)
 I '$$LKUP^XUAF4(X) Q ""
"RTN","QACI2C",25,0)
 ; Convert the fiscal year part of the ROC number to 4 digits
"RTN","QACI2C",26,0)
 S X=$E($P(OLDROC,".",2),1,2)
"RTN","QACI2C",27,0)
 S X=$S(+X>9:"19"_X,1:"20"_X)
"RTN","QACI2C",28,0)
 ; Build the new ROC number, adding one more digit to the sequential counter part of the ROC number.
"RTN","QACI2C",29,0)
 S NEWROC=$P(OLDROC,".")_"."_X_"0"_$E($P(OLDROC,".",2),3,6)
"RTN","QACI2C",30,0)
 Q NEWROC
"RTN","QACI2C",31,0)
 ;
"RTN","QACI2C",32,0)
ENDELALL(PATSBY) ; Wipe out list of previously migrated reference table data
"RTN","QACI2C",33,0)
 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" K ^XTMP("QACMIGR",TYPE,"D")
"RTN","QACI2C",34,0)
 S PATSBY=1
"RTN","QACI2C",35,0)
 Q
"RTN","QACI2C",36,0)
 ;
"RTN","QACI2C",37,0)
BLDTXT(ROCNO,ROCIEN,QACI0,ROCCNT,RESERR,EDITITXT,EDITRTXT) ; Build issue and resolution text into output global
"RTN","QACI2C",38,0)
 ; Issue Text
"RTN","QACI2C",39,0)
 N I,X,ITXTCNT,ITXTLN,ITXTLONG,OLDROC,RESERR1,RESERR2
"RTN","QACI2C",40,0)
 I QACI0 N ROCCNT
"RTN","QACI2C",41,0)
 S ROCCNT=1,(ITXTCNT,ITXTLN,ITXTLONG)=0
"RTN","QACI2C",42,0)
 S OLDROC=$P(^QA(745.1,ROCIEN,0),"^")
"RTN","QACI2C",43,0)
 F I=0:0 S I=$O(^QA(745.1,ROCIEN,4,I)) Q:'I!(ITXTLONG)  S X=$G(^(I,0)) D 
"RTN","QACI2C",44,0)
 . I $E(X,$L(X))'=" " S X=X_" "
"RTN","QACI2C",45,0)
 . I $$TXTERR(.X,256,1) D ERROC^QACI2A(OLDROC,"Issue Text node "_I_" too long or contains invalid characters") Q
"RTN","QACI2C",46,0)
 . I (ITXTCNT+$L(X))>3950 D  Q
"RTN","QACI2C",47,0)
 .. S ITXTCNT=ITXTCNT+43,ITXTLONG=1
"RTN","QACI2C",48,0)
 .. Q:QACI0
"RTN","QACI2C",49,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^ITXT^ ",^(ROCCNT+2)=ROCNO_"^ITXT^ "
"RTN","QACI2C",50,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+3)=ROCNO_"^ITXT^  ****  Continued in Resolution Text  ****"
"RTN","QACI2C",51,0)
 .. S ROCCNT=ROCCNT+3
"RTN","QACI2C",52,0)
 .. Q
"RTN","QACI2C",53,0)
 . S ITXTCNT=ITXTCNT+$L(X)
"RTN","QACI2C",54,0)
 . S ITXTLN=I
"RTN","QACI2C",55,0)
 . ; If called from ^QACI0, we just need to check the text, not save it.
"RTN","QACI2C",56,0)
 . Q:QACI0
"RTN","QACI2C",57,0)
 . S ROCCNT=ROCCNT+1
"RTN","QACI2C",58,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^ITXT^"_X
"RTN","QACI2C",59,0)
 . Q
"RTN","QACI2C",60,0)
 ;If there was no issue text, set one line of text for migration.
"RTN","QACI2C",61,0)
 I ROCCNT=1,'QACI0 D
"RTN","QACI2C",62,0)
 . S ROCCNT=2,EDITITXT=1
"RTN","QACI2C",63,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",2)=ROCNO_"^ITXT^No data present in this field during migration from Patient Rep. Text required for closed ROCs in PATS."
"RTN","QACI2C",64,0)
 . Q
"RTN","QACI2C",65,0)
 ;
"RTN","QACI2C",66,0)
 ; Resolution Text
"RTN","QACI2C",67,0)
 S RESERR1="Resolution Text",RESERR2=" char.(8000 maximum)"
"RTN","QACI2C",68,0)
 S RESERR="0^"_RESERR1
"RTN","QACI2C",69,0)
 N RTXTCNT S RTXTCNT=0
"RTN","QACI2C",70,0)
 F I=0:0 S I=$O(^QA(745.1,ROCIEN,6,I)) Q:'I  S X=$G(^(I,0)) D
"RTN","QACI2C",71,0)
 . I $E(X,$L(X))'=" " S X=X_" "
"RTN","QACI2C",72,0)
 . S RTXTCNT=RTXTCNT+$L(X)
"RTN","QACI2C",73,0)
 . I $$TXTERR(.X,256,1) D ERROC^QACI2A(OLDROC,"Resolution Text Node "_I_" too long or contains invalid characters") Q
"RTN","QACI2C",74,0)
 . ; If resolution text is too long, quit, but keep track of total length.
"RTN","QACI2C",75,0)
 . Q:RTXTCNT>8000
"RTN","QACI2C",76,0)
 . ; If called from ^QACI0, just check for errors, don't save text.
"RTN","QACI2C",77,0)
 . Q:QACI0
"RTN","QACI2C",78,0)
 . S ROCCNT=ROCCNT+1
"RTN","QACI2C",79,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^RTXT^"_X
"RTN","QACI2C",80,0)
 . Q
"RTN","QACI2C",81,0)
 S RESERR=RTXTCNT_"^"_RESERR1
"RTN","QACI2C",82,0)
 I RTXTCNT>8000 D ERROC^QACI2A(OLDROC,RESERR1_"="_RTXTCNT_RESERR2)
"RTN","QACI2C",83,0)
 ;
"RTN","QACI2C",84,0)
 ; If issue text was too long, store it in the resolution text for migration
"RTN","QACI2C",85,0)
 I ITXTLONG D
"RTN","QACI2C",86,0)
 . S RESERR1="Resolution + overflow issue text"
"RTN","QACI2C",87,0)
 . S RTXTCNT=RTXTCNT+76
"RTN","QACI2C",88,0)
 . I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2C",89,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ ",^(ROCCNT+2)=ROCNO_"^RTXT^ "
"RTN","QACI2C",90,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+3)=ROCNO_"^RTXT^  ****  (continued) Issue Text transferred during Data Migration  ****"
"RTN","QACI2C",91,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+4)=ROCNO_"^RTXT^ "
"RTN","QACI2C",92,0)
 .. S ROCCNT=ROCCNT+4,EDITRTXT=1
"RTN","QACI2C",93,0)
 .. Q
"RTN","QACI2C",94,0)
 . ; Read through remaining issue text and append it to resolution text.
"RTN","QACI2C",95,0)
 . F I=ITXTLN:0 S I=$O(^QA(745.1,ROCIEN,4,I)) Q:'I  S X=$G(^(I,0)) D
"RTN","QACI2C",96,0)
 .. I $E(X,$L(X))'=" " S X=X_" "
"RTN","QACI2C",97,0)
 .. S RTXTCNT=RTXTCNT+$L(X)
"RTN","QACI2C",98,0)
 .. I $$TXTERR(.X,256,1) D ERROC^QACI2A(OLDROC,"Issue Text Node "_I_" too long or contains invalid characters") Q
"RTN","QACI2C",99,0)
 .. I QACI0!(RTXTCNT>8000) Q
"RTN","QACI2C",100,0)
 .. S ROCCNT=ROCCNT+1
"RTN","QACI2C",101,0)
 .. S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^RTXT^"_X
"RTN","QACI2C",102,0)
 .. Q
"RTN","QACI2C",103,0)
 . S RTXTCNT=RTXTCNT+42
"RTN","QACI2C",104,0)
 . S RESERR=RTXTCNT_"^"_RESERR1
"RTN","QACI2C",105,0)
 . I RTXTCNT>8000 D ERROC^QACI2A(OLDROC,RESERR1_"="_RTXTCNT_RESERR2) Q
"RTN","QACI2C",106,0)
 . Q:QACI0
"RTN","QACI2C",107,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ ",^(ROCCNT+2)=ROCNO_"^RTXT^ "
"RTN","QACI2C",108,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+3)=ROCNO_"^RTXT^  ****  End of overflow Issue Text  ****"
"RTN","QACI2C",109,0)
 . S ROCCNT=ROCCNT+3
"RTN","QACI2C",110,0)
 . Q
"RTN","QACI2C",111,0)
 ; Store REFER CONTACT TO list in resolution text.
"RTN","QACI2C",112,0)
 Q:'$O(^QA(745.1,ROCIEN,11,0))
"RTN","QACI2C",113,0)
 S RESERR1=RESERR1_" + Refer To"
"RTN","QACI2C",114,0)
 S RTXTCNT=RTXTCNT+24
"RTN","QACI2C",115,0)
 I 'QACI0 D
"RTN","QACI2C",116,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ ",^(ROCCNT+2)=ROCNO_"^RTXT^ "
"RTN","QACI2C",117,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+3)=ROCNO_"^RTXT^** REFER CONTACT TO **"
"RTN","QACI2C",118,0)
 . S ROCCNT=ROCCNT+3
"RTN","QACI2C",119,0)
 . Q
"RTN","QACI2C",120,0)
 F I=0:0 S I=$O(^QA(745.1,ROCIEN,11,I)) Q:'I  S X=+$G(^(I,0)) D
"RTN","QACI2C",121,0)
 . S X=$P($G(^VA(200,X,0)),"^")
"RTN","QACI2C",122,0)
 . S RTXTCNT=RTXTCNT+$L(X)+2
"RTN","QACI2C",123,0)
 . Q:QACI0!(RTXTCNT>8000)
"RTN","QACI2C",124,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ "
"RTN","QACI2C",125,0)
 . S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+2)=ROCNO_"^RTXT^ "_X
"RTN","QACI2C",126,0)
 . S ROCCNT=ROCCNT+2
"RTN","QACI2C",127,0)
 . Q
"RTN","QACI2C",128,0)
 S RESERR=RTXTCNT_"^"_RESERR1
"RTN","QACI2C",129,0)
 I RTXTCNT>8000 D ERROC^QACI2A(OLDROC,RESERR1_"="_RTXTCNT_RESERR2)
"RTN","QACI2C",130,0)
 Q
"RTN","QACI2C",131,0)
 ;
"RTN","QACI2C",132,0)
ERREF(TYPE,IEN,MSG) ; Record an error on Reference Table Data
"RTN","QACI2C",133,0)
 N ERRCNT S ERRCNT=$O(^XTMP("QACMIGR",TYPE,"E",IEN,"A"),-1)+1
"RTN","QACI2C",134,0)
 S ^XTMP("QACMIGR",TYPE,"E",IEN,ERRCNT)=MSG Q
"RTN","QACI2C",135,0)
 ;
"RTN","QACI2C",136,0)
 ;
"RTN","QACI2C",137,0)
 ;
"RTN","QACI2D")
0^9^B68859293^n/a
"RTN","QACI2D",1,0)
QACI2D ; OAKOIFO/TKW - DATA MIGRATION - BUILD LEGACY DATA TO BE MIGRATED (CONT.) ;11/30/06  12:06
"RTN","QACI2D",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2D",3,0)
ENISS(ROCIEN,ROCNO,OLDROC,QACI0,ROCCNT,RESERR,HL,PARENT,STATION,PATSCNT) ; Move Issue Code and related data to output global
"RTN","QACI2D",4,0)
 N I,J,X,ROCISS,ISSIEN,ISSLIST,ISSCODE,ISSNAME,FSOSIEN,FSOS,FSOSCNT,ERR,HLID,HLNAME,EMPID,EMP,EMPNAME,EMPCNT,NEWITXT,ISACTIVE,ITXT,HLINST,ROCDT
"RTN","QACI2D",5,0)
 S ERR=0
"RTN","QACI2D",6,0)
 ; Read through Issue Codes, build lists of active/inactive codes
"RTN","QACI2D",7,0)
 F ROCISS=0:0 S ROCISS=$O(^QA(745.1,ROCIEN,3,ROCISS)) Q:'ROCISS!(ERR)  S ISSIEN=$P($G(^(ROCISS,0)),"^") D:ISSIEN]""
"RTN","QACI2D",8,0)
 . S X=""
"RTN","QACI2D",9,0)
 . I ISSIEN S X=$G(^QA(745.2,ISSIEN,0))
"RTN","QACI2D",10,0)
 . I X="" D ERROC^QACI2A(OLDROC,"Issue Code Pointer "_+X_" is invalid") Q
"RTN","QACI2D",11,0)
 . S ISSCODE=$P(X,"^"),ISSNAME=$P(X,"^",3)
"RTN","QACI2D",12,0)
 . I ISSCODE=""!(ISSNAME="") S ERR=1 D ERROC^QACI2A(OLDROC,"Issue Code or Issue Code Name NULL") Q
"RTN","QACI2D",13,0)
 . ; Set a flag based on whether this is an active (migrated) issue code.
"RTN","QACI2D",14,0)
 . S ISACTIVE=$S($D(^XTMP("QACMIGR","ISS","D",ISSCODE)):1,1:0)
"RTN","QACI2D",15,0)
 . S ISSLIST(ISACTIVE,ROCISS)=ISSIEN_"^"_ISSCODE_"^"_ISSNAME
"RTN","QACI2D",16,0)
 . Q
"RTN","QACI2D",17,0)
 ;
"RTN","QACI2D",18,0)
 ; If there are no issue codes, and date of contact after FY2003, generate an error
"RTN","QACI2D",19,0)
 I '$D(ISSLIST) D  Q:ERR ERR
"RTN","QACI2D",20,0)
 . N ROCDT S ROCDT=$P(^QA(745.1,ROCIEN,0),"^",2)
"RTN","QACI2D",21,0)
 . I ROCDT<3031001 S ISSLIST(0,1)=0 Q
"RTN","QACI2D",22,0)
 . S ERR=1 D ERROC^QACI2A(OLDROC,"ROC Has no valid Issue Codes")
"RTN","QACI2D",23,0)
 . Q
"RTN","QACI2D",24,0)
 ;
"RTN","QACI2D",25,0)
 ; Build hospital location ref table data if there's at least one active issue code to migrate
"RTN","QACI2D",26,0)
 S (HLNAME,HLINST)=""
"RTN","QACI2D",27,0)
 I HL]"" D
"RTN","QACI2D",28,0)
 . S HLNAME=$P($G(^SC(+HL,0)),"^")
"RTN","QACI2D",29,0)
 . Q:'$O(ISSLIST(1,0))
"RTN","QACI2D",30,0)
 . ; First check for errors on Hospital Location
"RTN","QACI2D",31,0)
 . I HLNAME="",'$D(^SC(+HL,0)) S ERR=1 D  Q
"RTN","QACI2D",32,0)
 .. D ERROC^QACI2A(OLDROC,"LOCATION OF EVENT pointer "_+HL_" is invalid") Q
"RTN","QACI2D",33,0)
 . I HLNAME="" S ERR=1 D
"RTN","QACI2D",34,0)
 .. D ERROC^QACI2A(OLDROC,"LOCATION OF EVENT Name field is NULL") Q
"RTN","QACI2D",35,0)
 . I $D(^XTMP("QACMIGR","HL","E",HL)) D  Q
"RTN","QACI2D",36,0)
 .. D ERROC^QACI2A(OLDROC,"LOCATION OF EVENT has invalid data -- see ref data report") Q
"RTN","QACI2D",37,0)
 . S HLINST=$P($G(^XTMP("QACMIGR","HL","U",HL)),"^",3) Q:HLINST]""
"RTN","QACI2D",38,0)
 . ; Build Reference Table data for Hospital Location
"RTN","QACI2D",39,0)
 . D HLDATA(STATION,HL,QACI0,.ERR,.HLINST,.PATSCNT)
"RTN","QACI2D",40,0)
 . I ERR D ERROC^QACI2A(OLDROC,"LOCATION OF EVENT has invalid data -- see ref data report")
"RTN","QACI2D",41,0)
 . Q
"RTN","QACI2D",42,0)
 ;
"RTN","QACI2D",43,0)
 ; Build list of employees.
"RTN","QACI2D",44,0)
 S EMPCNT=0
"RTN","QACI2D",45,0)
 F I=0:0 S I=$O(^QA(745.1,ROCIEN,8,I)) Q:'I  S EMP=$P($G(^(I,0)),"^") D:EMP]""
"RTN","QACI2D",46,0)
 . S EMPNAME=""
"RTN","QACI2D",47,0)
 . ; Check for errors on Employee data
"RTN","QACI2D",48,0)
 . I '$D(^VA(200,+EMP,0)) D  Q
"RTN","QACI2D",49,0)
 .. D ERROC^QACI2A(OLDROC,"EMPLOYEE pointer "_+EMP_" is invalid")
"RTN","QACI2D",50,0)
 .. S ERR=1 Q
"RTN","QACI2D",51,0)
 . S EMPNAME=$P(^VA(200,+EMP,0),"^")
"RTN","QACI2D",52,0)
 . S EMP(EMP)=EMPNAME,EMPCNT=EMPCNT+1
"RTN","QACI2D",53,0)
 . ; Quit if there are no active issue codes to migrate.
"RTN","QACI2D",54,0)
 . Q:'$O(ISSLIST(1,0))
"RTN","QACI2D",55,0)
 . I EMPNAME="" D  Q
"RTN","QACI2D",56,0)
 .. S ERR=1
"RTN","QACI2D",57,0)
 .. D ERREF^QACI2C("EMPINV",EMP,"Name missing")
"RTN","QACI2D",58,0)
 .. D ERROC^QACI2A(OLDROC,"EMPLOYEE Name is NULL -- see EMP.INVOLVED on ref data report") Q
"RTN","QACI2D",59,0)
 . ; Build reference table data for Employee Involved.
"RTN","QACI2D",60,0)
 . D USERDATA^QACI2B(PARENT,EMP,"E",QACI0,.ERR,.PATSCNT)
"RTN","QACI2D",61,0)
 . I ERR D ERROC^QACI2A(OLDROC,"EMPLOYEE has invalid data -- see EMP.INVOLVED on ref data report")
"RTN","QACI2D",62,0)
 . Q
"RTN","QACI2D",63,0)
 Q:ERR ERR
"RTN","QACI2D",64,0)
 ;
"RTN","QACI2D",65,0)
 ;
"RTN","QACI2D",66,0)
 ; For inactive issue codes, issue multiple data goes in resolution text.
"RTN","QACI2D",67,0)
 I $O(ISSLIST(0,0)) D
"RTN","QACI2D",68,0)
 . N RTXTCNT,RESERR1,RESERR2
"RTN","QACI2D",69,0)
 . S RESERR2=" char.(8000 maximum)"
"RTN","QACI2D",70,0)
 . ; Set current resolution text number of characters and error code
"RTN","QACI2D",71,0)
 . I 'RESERR D
"RTN","QACI2D",72,0)
 .. S RTXTCNT=0
"RTN","QACI2D",73,0)
 .. S RESERR1="Resolution Text" Q
"RTN","QACI2D",74,0)
 . E  D 
"RTN","QACI2D",75,0)
 .. S RTXTCNT=$P(RESERR,"^")
"RTN","QACI2D",76,0)
 .. S RESERR1=$P(RESERR,"^",2)_" + Issue Code Data" Q
"RTN","QACI2D",77,0)
 . ; Add header to resolution text.
"RTN","QACI2D",78,0)
 . S RTXTCNT=RTXTCNT+34
"RTN","QACI2D",79,0)
 . I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2D",80,0)
 .. I RTXTCNT>0 S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ ",^(ROCCNT+2)=ROCNO_"^RTXT^ ",ROCCNT=ROCCNT+2
"RTN","QACI2D",81,0)
 .. I $P($G(ISSLIST(0,1)),"^")=0 S X="**  No Issue Code Assigned  **"
"RTN","QACI2D",82,0)
 .. E  S X="**  Inactive Issue Code Data  **"
"RTN","QACI2D",83,0)
 .. S ROCCNT=ROCCNT+1,^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^RTXT^"_X
"RTN","QACI2D",84,0)
 .. Q
"RTN","QACI2D",85,0)
 . ; Add Hospital Location data to Resolution Text
"RTN","QACI2D",86,0)
 . I HL]"" D
"RTN","QACI2D",87,0)
 .. I 'HL S HLNAME=HL
"RTN","QACI2D",88,0)
 .. S:HLNAME="" HLNAME="*Unknown*"
"RTN","QACI2D",89,0)
 .. S RTXTCNT=RTXTCNT+$L(HLNAME)+12
"RTN","QACI2D",90,0)
 .. I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2D",91,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ "
"RTN","QACI2D",92,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+2)=ROCNO_"^RTXT^Hosp.Loc.: "_HLNAME
"RTN","QACI2D",93,0)
 ... S ROCCNT=ROCCNT+2 Q
"RTN","QACI2D",94,0)
 .. Q
"RTN","QACI2D",95,0)
 . ; Add Employee Involved data to Resolution Text
"RTN","QACI2D",96,0)
 . F EMP=0:0 S EMP=$O(EMP(EMP)) Q:'EMP  D
"RTN","QACI2D",97,0)
 .. S EMPNAME=EMP(EMP)
"RTN","QACI2D",98,0)
 .. S:EMPNAME="" EMPNAME="*Unknown*"
"RTN","QACI2D",99,0)
 .. S RTXTCNT=RTXTCNT+$L(EMPNAME)+11
"RTN","QACI2D",100,0)
 .. I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2D",101,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ "
"RTN","QACI2D",102,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+2)=ROCNO_"^RTXT^Emp.Inv.: "_EMPNAME
"RTN","QACI2D",103,0)
 ... S ROCCNT=ROCCNT+2 Q
"RTN","QACI2D",104,0)
 .. Q
"RTN","QACI2D",105,0)
 . ; Add Issue Code and Service/Discipline data to Resolution Text
"RTN","QACI2D",106,0)
 . F I=0:0 S I=$O(ISSLIST(0,I)) Q:'I  S X=ISSLIST(0,I) D:X
"RTN","QACI2D",107,0)
 .. S ISSCODE=$P(X,"^",2),ISSNAME=$P(X,"^",3) S:ISSCODE="" ISSCODE="*Unknown*"
"RTN","QACI2D",108,0)
 .. S RTXTCNT=RTXTCNT+$L(ISSNAME)+19
"RTN","QACI2D",109,0)
 .. I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2D",110,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ "
"RTN","QACI2D",111,0)
 ... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+2)=ROCNO_"^RTXT^Issue Code: "_ISSCODE_"  "_ISSNAME
"RTN","QACI2D",112,0)
 ... S ROCCNT=ROCCNT+2 Q
"RTN","QACI2D",113,0)
 .. ; Read through Service/Discipline multiples
"RTN","QACI2D",114,0)
 .. F J=0:0 S J=$O(^QA(745.1,ROCIEN,3,I,3,J)) Q:'J  S FSOSIEN=$P($G(^(J,0)),"^") D:FSOSIEN
"RTN","QACI2D",115,0)
 ... S X=$P($G(^QA(745.55,FSOSIEN,0)),"^")
"RTN","QACI2D",116,0)
 ... S:X="" X="*Unknown*"
"RTN","QACI2D",117,0)
 ... S RTXTCNT=RTXTCNT+$L(X)+14
"RTN","QACI2D",118,0)
 ... I 'QACI0,RTXTCNT'>8000 D
"RTN","QACI2D",119,0)
 .... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+1)=ROCNO_"^RTXT^ "
"RTN","QACI2D",120,0)
 .... S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT+2)=ROCNO_"^RTXT^  Serv/Disc: "_X
"RTN","QACI2D",121,0)
 .... S ROCCNT=ROCCNT+2 Q
"RTN","QACI2D",122,0)
 ... Q
"RTN","QACI2D",123,0)
 .. Q
"RTN","QACI2D",124,0)
 . I RTXTCNT>8000 D
"RTN","QACI2D",125,0)
 .. D ERROC^QACI2A(OLDROC,RESERR1_"="_RTXTCNT_RESERR2)
"RTN","QACI2D",126,0)
 .. S ERR=1 Q
"RTN","QACI2D",127,0)
 . Q
"RTN","QACI2D",128,0)
 ;
"RTN","QACI2D",129,0)
 ;
"RTN","QACI2D",130,0)
 ; For active issue codes, build issue code multiple data for the ROC.
"RTN","QACI2D",131,0)
 F I=0:0 S I=$O(ISSLIST(1,I)) Q:'I  S X=ISSLIST(1,I) D
"RTN","QACI2D",132,0)
 . S ISSCODE=$P(X,"^",2)
"RTN","QACI2D",133,0)
 . ;
"RTN","QACI2D",134,0)
 . ; Read through Service/Discipline multiple
"RTN","QACI2D",135,0)
 . S FSOSCNT=0,FSOSNAME=""
"RTN","QACI2D",136,0)
 . F J=0:0 S J=$O(^QA(745.1,ROCIEN,3,I,3,J)) Q:'J!(ERR)  S FSOSIEN=$P($G(^(J,0)),"^") D:FSOSIEN]""
"RTN","QACI2D",137,0)
 .. ; Check for errors
"RTN","QACI2D",138,0)
 .. I '$D(^QA(745.55,+FSOSIEN,0)) D  Q
"RTN","QACI2D",139,0)
 ... D ERROC^QACI2A(OLDROC,"SERVICE/DISCIPLINE pointer "_+FSOSIEN_" is invalid")
"RTN","QACI2D",140,0)
 ... S ERR=1 Q
"RTN","QACI2D",141,0)
 .. S FSOSNAME=$P(^QA(745.55,+FSOSIEN,0),"^")
"RTN","QACI2D",142,0)
 .. I $$TXTERR^QACI2C(FSOSNAME,50,0,1) D
"RTN","QACI2D",143,0)
 ... S ERR=1
"RTN","QACI2D",144,0)
 ... D ERROC^QACI2A(OLDROC,"SERVICE/DISCIPLINE on issue "_ISSCODE_" invalid -- see ref data report")
"RTN","QACI2D",145,0)
 ... Q
"RTN","QACI2D",146,0)
 .. ; Build reference table data for FSOS
"RTN","QACI2D",147,0)
 .. D BLDFSOS^QACI2A(FSOSIEN,FSOSNAME,QACI0,.PATSCNT)
"RTN","QACI2D",148,0)
 .. ; Quit if errors were encountered in FSOS data
"RTN","QACI2D",149,0)
 .. I $D(^XTMP("QACMIGR","FSOS","E",FSOSIEN)) S ERR=1 Q
"RTN","QACI2D",150,0)
 .. S FSOSCNT=FSOSCNT+1
"RTN","QACI2D",151,0)
 .. ;
"RTN","QACI2D",152,0)
 .. ; Set ROC Issue data for Issue Multiples with both FSOS and Employees
"RTN","QACI2D",153,0)
 .. I EMPCNT D  Q
"RTN","QACI2D",154,0)
 ... F EMP=0:0 S EMP=$O(EMP(EMP)) Q:'EMP  D:'QACI0 SETDATA
"RTN","QACI2D",155,0)
 ... Q
"RTN","QACI2D",156,0)
 .. ; If no employees notified, set Issue Multiples with FSOS
"RTN","QACI2D",157,0)
 .. S EMP="" D:'QACI0 SETDATA
"RTN","QACI2D",158,0)
 .. Q
"RTN","QACI2D",159,0)
 . I FSOSCNT=0 S FSOSNAME="" D
"RTN","QACI2D",160,0)
 .. ; If no FSOS, but there are employees, set Issue Multiples
"RTN","QACI2D",161,0)
 .. I EMPCNT D  Q
"RTN","QACI2D",162,0)
 ... F EMP=0:0 S EMP=$O(EMP(EMP)) Q:'EMP  D:'QACI0 SETDATA
"RTN","QACI2D",163,0)
 ... Q
"RTN","QACI2D",164,0)
 .. ; If there are no FSOS and no employees, set Issue Multiples
"RTN","QACI2D",165,0)
 .. S EMP="" D:'QACI0 SETDATA Q
"RTN","QACI2D",166,0)
 . Q
"RTN","QACI2D",167,0)
 ; If errors were encountered, quit with the error code
"RTN","QACI2D",168,0)
 I ERR K ^XTMP("QACMIGR","ROC","U",ROCNO) Q ERR
"RTN","QACI2D",169,0)
 Q 0
"RTN","QACI2D",170,0)
 ;
"RTN","QACI2D",171,0)
 ;
"RTN","QACI2D",172,0)
SETDATA ; Set data for Issue Code multiple on a ROC
"RTN","QACI2D",173,0)
 ; We don't call this routine if just building error report (i.e., from ^QACI0).
"RTN","QACI2D",174,0)
 S ROCCNT=ROCCNT+1
"RTN","QACI2D",175,0)
 S ^XTMP("QACMIGR","ROC","U",ROCNO_" ",ROCCNT)=ROCNO_"^ISS^"_ISSCODE_"^"_FSOSNAME_"^"_EMP_"^"_HLNAME_"^"_HLINST_"^"
"RTN","QACI2D",176,0)
 Q
"RTN","QACI2D",177,0)
 ;
"RTN","QACI2D",178,0)
HLDATA(STATION,HL,QACI0,ERR,HLINST,PATSCNT) ; Load Hospital Location Data for migration
"RTN","QACI2D",179,0)
 ; IA #10040, #10112
"RTN","QACI2D",180,0)
 N Y,HLNAME S ERR=0
"RTN","QACI2D",181,0)
 S Y=$G(^SC(HL,0)) I Y="" S ERR=1 Q
"RTN","QACI2D",182,0)
 S HLNAME=$P(Y,"^"),HLINST=""
"RTN","QACI2D",183,0)
 D
"RTN","QACI2D",184,0)
 . ; Get DIVISION station number for Hospital Location
"RTN","QACI2D",185,0)
 . S HLINST=$P(Y,"^",15)
"RTN","QACI2D",186,0)
 . I HLINST S HLINST=$P($$SITE^VASITE(,HLINST),"^",3) Q:HLINST'=-1
"RTN","QACI2D",187,0)
 . ; If not found, get Institution station
"RTN","QACI2D",188,0)
 . S HLINST=$P(Y,"^",4) Q:'HLINST
"RTN","QACI2D",189,0)
 . S HLINST=$$STA^XUAF4(HLINST) Q:HLINST]""
"RTN","QACI2D",190,0)
 . ; If no station number for either one, generate an error
"RTN","QACI2D",191,0)
 . S Y=$L(HLNAME)
"RTN","QACI2D",192,0)
 . S HLNAME=$E(HLNAME,1,30)_$S(Y>30:"...",1:"")
"RTN","QACI2D",193,0)
 . S ERR=1 D ERREF^QACI2C("HL",HL,HLNAME_" - has no STATION NUMBER") Q
"RTN","QACI2D",194,0)
 I HLINST="" S HLINST=STATION
"RTN","QACI2D",195,0)
 Q:$D(^XTMP("QACMIGR","HL","D",HL))
"RTN","QACI2D",196,0)
 Q:$D(^XTMP("QACMIGR","HL","U",HL))
"RTN","QACI2D",197,0)
 I $$TXTERR^QACI2C(HLNAME,30,0,1) D
"RTN","QACI2D",198,0)
 . S HLNAME=$E(HLNAME,1,20)_$S($L(HLNAME>20):"...",1:"")
"RTN","QACI2D",199,0)
 . S ERR=1 D ERREF^QACI2C("HL",HL,HLNAME_" - NAME missing or invalid") Q
"RTN","QACI2D",200,0)
 ; Check to make sure station is on the list from std_institution table
"RTN","QACI2D",201,0)
 I '$D(^XTMP("QACMIGR","STDINSTITUTION",HLINST)) D
"RTN","QACI2D",202,0)
 . S ERR=1 D ERREF^QACI2C("HL",HL,HLINST_" is not a valid national station number") Q
"RTN","QACI2D",203,0)
 ; Quit if there are errors, or if called from ^QACI0 to just print the error report.
"RTN","QACI2D",204,0)
 Q:ERR=1
"RTN","QACI2D",205,0)
 Q:QACI0
"RTN","QACI2D",206,0)
 S ^XTMP("QACMIGR","HL","U",HL)=HL_"^"_HLNAME_"^"_HLINST_"^"
"RTN","QACI2D",207,0)
 S PATSCNT("HL")=PATSCNT("HL")+1
"RTN","QACI2D",208,0)
 Q
"RTN","QACI2D",209,0)
 ;
"RTN","QACI2D",210,0)
 ;
"RTN","QACI2E")
0^10^B22678389^n/a
"RTN","QACI2E",1,0)
QACI2E ; OAKOIFO/TKW - DATA MIGRATION - BUILD LEGACY DATA TO BE MIGRATED (CONT.) ;7/27/05  14:15
"RTN","QACI2E",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI2E",3,0)
 ;
"RTN","QACI2E",4,0)
UPDCNT(PATSCNT) ; Update counts of data migrated on XTMP global
"RTN","QACI2E",5,0)
 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI2E",6,0)
 . S ^XTMP("QACMIGR",TYPE,"U")=PATSCNT(TYPE)
"RTN","QACI2E",7,0)
 . Q
"RTN","QACI2E",8,0)
 Q
"RTN","QACI2E",9,0)
 ;
"RTN","QACI2E",10,0)
UPDERRCT ; Update counts of errors generated.
"RTN","QACI2E",11,0)
 N CNT,I,TYPE
"RTN","QACI2E",12,0)
 F TYPE="HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI2E",13,0)
 . S CNT=0
"RTN","QACI2E",14,0)
 . F I=0:0 S I=$O(^XTMP("QACMIGR",TYPE,"E",I)) Q:'I  S CNT=CNT+1
"RTN","QACI2E",15,0)
 . S ^XTMP("QACMIGR",TYPE,"E")=CNT Q
"RTN","QACI2E",16,0)
 S CNT=0,I=""
"RTN","QACI2E",17,0)
 F  S I=$O(^XTMP("QACMIGR","ROC","E",I)) Q:I=""  S CNT=CNT+1
"RTN","QACI2E",18,0)
 S ^XTMP("QACMIGR","ROC","E")=CNT
"RTN","QACI2E",19,0)
 Q
"RTN","QACI2E",20,0)
 ;
"RTN","QACI2E",21,0)
ERRPT(QACI0) ; Print all errors found during data migration
"RTN","QACI2E",22,0)
 N PATSFROM
"RTN","QACI2E",23,0)
 S PATSFROM=$S(QACI0:"Data Cleanup",1:"Move to Staging Area")
"RTN","QACI2E",24,0)
ENERRPT ; Entry point to print all error reports found during any step of data migration.
"RTN","QACI2E",25,0)
 N PATSTYPE,PATSHDR,PATSERR
"RTN","QACI2E",26,0)
 S PATSERR=0
"RTN","QACI2E",27,0)
 F PATSTYPE="HL","USER","PT","CC","EMPINV","FSOS" D  Q:PATSERR
"RTN","QACI2E",28,0)
 . I $O(^XTMP("QACMIGR",PATSTYPE,"E",0))]"" S PATSERR=1
"RTN","QACI2E",29,0)
 . Q
"RTN","QACI2E",30,0)
 I 'PATSERR W !!,"No Reference Table Errors were found",!
"RTN","QACI2E",31,0)
 E  D
"RTN","QACI2E",32,0)
 . I $G(REPRINT),'$$ASK("Ref Table") Q
"RTN","QACI2E",33,0)
 . W !!,"Printing report of Reference Table Errors",!
"RTN","QACI2E",34,0)
 . S PATSHDR=PATSFROM_" - Ref Table Data Errors"
"RTN","QACI2E",35,0)
 . N ZTSAVE S ZTSAVE("PATSHDR")=""
"RTN","QACI2E",36,0)
 . D EN^XUTMDEVQ("DQRPT^QACI2E","Report - "_PATSHDR,.ZTSAVE)
"RTN","QACI2E",37,0)
 . Q
"RTN","QACI2E",38,0)
 I $O(^XTMP("QACMIGR","ROC","E",0))="" D  Q
"RTN","QACI2E",39,0)
 . W !!,"No Report of Contact (ROC) Errors were found",!
"RTN","QACI2E",40,0)
 . Q
"RTN","QACI2E",41,0)
 I $G(REPRINT),'$$ASK("ROC") Q
"RTN","QACI2E",42,0)
 W !!,"Printing report of Report of Contact (ROC) Errors",!
"RTN","QACI2E",43,0)
 S PATSTYPE="ROC"
"RTN","QACI2E",44,0)
 S PATSHDR=PATSFROM_" - ROC Errors",PATSHDR(1)=" ROC Number    Error"
"RTN","QACI2E",45,0)
 K ZTSAVE S ZTSAVE("PATSTYPE")="",ZTSAVE("PATSHDR")=""
"RTN","QACI2E",46,0)
 D EN^XUTMDEVQ("DQRPT^QACI1A","Report - "_PATSHDR,.ZTSAVE)
"RTN","QACI2E",47,0)
 Q
"RTN","QACI2E",48,0)
 ;
"RTN","QACI2E",49,0)
ENRPT2 ; Print list of ROCs with data changed during migration
"RTN","QACI2E",50,0)
 I $O(^XTMP("QACMIGR","ROC","C",""))="" D  Q
"RTN","QACI2E",51,0)
 . I $G(^XTMP("QACMIGR","ROC","U"))!($G(^("D"))) W !!,"No ROC data was changed when data was moved to staging area!",!! Q
"RTN","QACI2E",52,0)
 . W !!,"ROC changes occur when data is moved to the staging area!"
"RTN","QACI2E",53,0)
 . Q
"RTN","QACI2E",54,0)
 W !!,"Ready to print the list of ROCs with data changed",!
"RTN","QACI2E",55,0)
 N PATSHDR
"RTN","QACI2E",56,0)
 S PATSHDR="ROCs With Data Changed for Migration",PATSHDR(1)=" ROC Number     Data Changed"
"RTN","QACI2E",57,0)
 N ZTSAVE S ZTSAVE("PATSHDR")=""
"RTN","QACI2E",58,0)
 D EN^XUTMDEVQ("DQRPT3^QACI2E","Report of ROC Data Changed for Migration",.ZTSAVE)
"RTN","QACI2E",59,0)
 Q
"RTN","QACI2E",60,0)
 ;
"RTN","QACI2E",61,0)
DQRPT ; Report errors found in reference table data
"RTN","QACI2E",62,0)
 N PAGENO,LNCNT,LASTIEN,IEN,TYPE,ERRMSG,HDDATE,%,%H,%I
"RTN","QACI2E",63,0)
 S PAGENO=1,LNCNT=0
"RTN","QACI2E",64,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI2E",65,0)
 U IO D HDR^QACI1A
"RTN","QACI2E",66,0)
 S (LASTIEN,IEN)=""
"RTN","QACI2E",67,0)
 F TYPE="HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI2E",68,0)
 . Q:$O(^XTMP("QACMIGR",TYPE,"E",0))']""
"RTN","QACI2E",69,0)
 . W !,$S(TYPE="HL":"Hospital Location",TYPE="USER":"User",TYPE="PT":"Patient",TYPE="CC":"Congressional Contact",TYPE="EMPINV":"Employee Involved",TYPE="FSOS":"Service/Discipline (Facility Service or Section)","":"*Unknown*")
"RTN","QACI2E",70,0)
 . F IEN=0:0 S IEN=$O(^XTMP("QACMIGR",TYPE,"E",IEN)) Q:'IEN  D
"RTN","QACI2E",71,0)
 .. I LASTIEN'=IEN D
"RTN","QACI2E",72,0)
 ... D:LNCNT>56 HDR^QACI1A
"RTN","QACI2E",73,0)
 ... W !,"IEN: "_IEN
"RTN","QACI2E",74,0)
 ... S LASTIEN=IEN,LNCNT=LNCNT+1
"RTN","QACI2E",75,0)
 ... Q
"RTN","QACI2E",76,0)
 .. F I=0:0 S I=$O(^XTMP("QACMIGR",TYPE,"E",IEN,I)) Q:'I  S ERRMSG=^(I) D
"RTN","QACI2E",77,0)
 ... D:LNCNT>58 HDR^QACI1A
"RTN","QACI2E",78,0)
 ... W ?20,ERRMSG,!
"RTN","QACI2E",79,0)
 ... S LNCNT=LNCNT+1 Q
"RTN","QACI2E",80,0)
 .. Q
"RTN","QACI2E",81,0)
 . Q
"RTN","QACI2E",82,0)
 D ^%ZISC Q
"RTN","QACI2E",83,0)
 ;
"RTN","QACI2E",84,0)
DQRPT3 ; Print report of ROC data changed for migration
"RTN","QACI2E",85,0)
 N PAGENO,LNCNT,ROCNO,PATSCHG,HDDATE,%,%H,%I,I
"RTN","QACI2E",86,0)
 S PAGENO=1,LNCNT=0
"RTN","QACI2E",87,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI2E",88,0)
 U IO D HDR^QACI1A
"RTN","QACI2E",89,0)
 S ROCNO=""
"RTN","QACI2E",90,0)
 F  S ROCNO=$O(^XTMP("QACMIGR","ROC","C",ROCNO)) Q:ROCNO=""  S PATSCHG=^(ROCNO) D
"RTN","QACI2E",91,0)
 . D:LNCNT>56 HDR^QACI1A
"RTN","QACI2E",92,0)
 . W !," "_ROCNO S I=16
"RTN","QACI2E",93,0)
 . I $P(PATSCHG,"^")=1 W ?I,"Info Taken By" S I=I+16
"RTN","QACI2E",94,0)
 . I $P(PATSCHG,"^",2)=1 W ?I,"Edited By" S I=I+16
"RTN","QACI2E",95,0)
 . I $P(PATSCHG,"^",3)=1 W ?I,"Division" S I=I+16
"RTN","QACI2E",96,0)
 . I $P(PATSCHG,"^",4)=1 W ?I,"Issue Text" S I=I+16
"RTN","QACI2E",97,0)
 . I $P(PATSCHG,"^",5)=1 W ?I,"Issue Text Overflow"
"RTN","QACI2E",98,0)
 . W ! S LNCNT=LNCNT+1
"RTN","QACI2E",99,0)
 . Q
"RTN","QACI2E",100,0)
 D ^%ZISC
"RTN","QACI2E",101,0)
 Q
"RTN","QACI2E",102,0)
 ;
"RTN","QACI2E",103,0)
ENREPRNT ; Reprint data error reports - menu entry point
"RTN","QACI2E",104,0)
 N PATSFROM,CNT,REPRINT
"RTN","QACI2E",105,0)
 S CNT=0,REPRINT=1
"RTN","QACI2E",106,0)
 F PATSTYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D  Q:CNT
"RTN","QACI2E",107,0)
 . I $O(^XTMP("QACMIGR",PATSTYPE,"U",0))]"" S CNT=1 Q
"RTN","QACI2E",108,0)
 . I $O(^XTMP("QACMIGR",PATSTYPE,"D",0))]"" S CNT=1
"RTN","QACI2E",109,0)
 . Q
"RTN","QACI2E",110,0)
 S PATSFROM=$S(CNT=1:"Data Cleanup",1:"Move to Staging Area")
"RTN","QACI2E",111,0)
 D ENERRPT
"RTN","QACI2E",112,0)
 Q
"RTN","QACI2E",113,0)
 ;
"RTN","QACI2E",114,0)
ASK(TYPE) ; Ask whether users want to reprint error reports
"RTN","QACI2E",115,0)
 N DIR,X,Y
"RTN","QACI2E",116,0)
 S DIR("A")="Reprint the "_TYPE_" error report"
"RTN","QACI2E",117,0)
 S DIR(0)="YO",DIR("B")="YES"
"RTN","QACI2E",118,0)
 D ^DIR
"RTN","QACI2E",119,0)
 Q Y
"RTN","QACI2E",120,0)
 ;
"RTN","QACI2E",121,0)
 ;
"RTN","QACI3")
0^11^B8458772^n/a
"RTN","QACI3",1,0)
QACI3 ; OAKOIFO/TKW - DATA MIGRATION - VISTALINK RPC CODE ;7/27/05  16:18
"RTN","QACI3",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI3",3,0)
EN(PATSBY,PATSNO,PATSLIST,PATSFLAG,PATSFRST) ;
"RTN","QACI3",4,0)
 ; Read list of migrated reference table entries in PATSLIST, put into
"RTN","QACI3",5,0)
 ;   ^XTMP. Then return the next PATSNO entries into global PATSBY,
"RTN","QACI3",6,0)
 ;   from the table referrenced by PATSFLAG.
"RTN","QACI3",7,0)
 ; PATSBY = the name of the output global
"RTN","QACI3",8,0)
 ; PATSNO = the number of records to return
"RTN","QACI3",9,0)
 ; PATSLIST = If defined, contains a list of ^ delimited strings
"RTN","QACI3",10,0)
 ;     0 node set to a flag indicating which file these came from.
"RTN","QACI3",11,0)
 ;     The other entries contain two pieces:
"RTN","QACI3",12,0)
 ;     1)ien or primary key of the entry on the M VistA side
"RTN","QACI3",13,0)
 ;     2)primary key of the entry in the Oracle table (usually id).
"RTN","QACI3",14,0)
 ; PATSFLAG="H" (hospital location), "U" (user), "P" (patient),
"RTN","QACI3",15,0)
 ;  "C" (congressional contact), "E" (employee involved),
"RTN","QACI3",16,0)
 ;  "F" (facility service or section)
"RTN","QACI3",17,0)
 ; PATSFRST = 1 on the first call to this routine, 0 on subsequent calls.
"RTN","QACI3",18,0)
 ;
"RTN","QACI3",19,0)
 ; Process incoming list
"RTN","QACI3",20,0)
 N FLAG,TYPE,UNAME,DONENAME
"RTN","QACI3",21,0)
 S PATSNO=+$G(PATSNO),PATSFRST=+$G(PATSFRST)
"RTN","QACI3",22,0)
 ; For the incoming list, find the file type on the first array entry.
"RTN","QACI3",23,0)
 S FLAG=$P($G(PATSLIST(0)),"^"),TYPE=""
"RTN","QACI3",24,0)
 I FLAG]"" S TYPE=$S(FLAG="H":"HL",FLAG="U":"USER",FLAG="P":"PT",FLAG="C":"CC",FLAG="E":"EMPINV",FLAG="F":"FSOS",1:"")
"RTN","QACI3",25,0)
 ; Move list of migrated entries to ^XTMP("QACMIGR",file_type,"D").
"RTN","QACI3",26,0)
 ;  at the same time, delete them from the list of entries still to be
"RTN","QACI3",27,0)
 ;  migrated, ^XTMP("QACMIGR",file_type,"U").
"RTN","QACI3",28,0)
 I TYPE]"" D
"RTN","QACI3",29,0)
 . S UNAME=$NA(^XTMP("QACMIGR",TYPE,"U"))
"RTN","QACI3",30,0)
 . S DONENAME=$NA(^XTMP("QACMIGR",TYPE,"D"))
"RTN","QACI3",31,0)
 . D LISTIN Q
"RTN","QACI3",32,0)
 ; Now get the next set of entries to be migrated, for the table
"RTN","QACI3",33,0)
 ;  referenced by the PATSFLAG input parameter.
"RTN","QACI3",34,0)
 S FLAG=$G(PATSFLAG)
"RTN","QACI3",35,0)
 S TYPE=$S(FLAG="H":"HL",FLAG="U":"USER",FLAG="P":"PT",FLAG="C":"CC",FLAG="E":"EMPINV",FLAG="F":"FSOS",1:"")
"RTN","QACI3",36,0)
 Q:TYPE=""
"RTN","QACI3",37,0)
 S UNAME=$NA(^XTMP("QACMIGR",TYPE,"U"))
"RTN","QACI3",38,0)
 S PATSBY=$NA(^TMP(TYPE,$J))
"RTN","QACI3",39,0)
 ; Build the next list of entries to be migrated.
"RTN","QACI3",40,0)
 D LISTOUT
"RTN","QACI3",41,0)
 Q
"RTN","QACI3",42,0)
 ;
"RTN","QACI3",43,0)
LISTIN ; Move Ids of migrated data entries into ^XTMP
"RTN","QACI3",44,0)
 N I,X,CNT S CNT=0
"RTN","QACI3",45,0)
 F I=0:0 S I=$O(PATSLIST(I)) Q:'I  S X=PATSLIST(I) D
"RTN","QACI3",46,0)
 . S Y=$P(X,"^"),X=$P(X,"^",2)
"RTN","QACI3",47,0)
 . ; If entry not added to Oracle table, quit
"RTN","QACI3",48,0)
 . Q:X=""
"RTN","QACI3",49,0)
 . ; Else, kill 'unmigrated' entry, set 'migrated' entry
"RTN","QACI3",50,0)
 . K @UNAME@(Y)
"RTN","QACI3",51,0)
 . S @DONENAME@(Y)=X
"RTN","QACI3",52,0)
 . S CNT=CNT+1 Q
"RTN","QACI3",53,0)
 ; If no data left in table of entries to be migrated, kill it.
"RTN","QACI3",54,0)
 I '$O(@UNAME@(0)) K @UNAME
"RTN","QACI3",55,0)
 I CNT>0 D
"RTN","QACI3",56,0)
 . ; Increment count of migrated entries
"RTN","QACI3",57,0)
 . S @DONENAME=$G(@DONENAME)+CNT
"RTN","QACI3",58,0)
 . Q:'$O(@UNAME@(0))
"RTN","QACI3",59,0)
 . ; Decrement count of entries to be migrated.
"RTN","QACI3",60,0)
 . S @UNAME=$G(@UNAME)-CNT
"RTN","QACI3",61,0)
 . Q
"RTN","QACI3",62,0)
 Q
"RTN","QACI3",63,0)
 ;
"RTN","QACI3",64,0)
LISTOUT ; Build next set of data to be migrated into ^TMP global
"RTN","QACI3",65,0)
 K @PATSBY
"RTN","QACI3",66,0)
 N CNT,I,X,XOUT
"RTN","QACI3",67,0)
 ; On the first time calling this routine, check.
"RTN","QACI3",68,0)
 S XOUT=0 I PATSFRST=1 D  Q:XOUT
"RTN","QACI3",69,0)
 . ; If no data in staging area, return 0 in 0th node
"RTN","QACI3",70,0)
 . S CNT=0 F I="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI3",71,0)
 .. S CNT=CNT+$G(^XTMP("QACMIGR",I,"U")) Q
"RTN","QACI3",72,0)
 . I CNT=0 S @PATSBY@(0)=0,XOUT=1
"RTN","QACI3",73,0)
 . Q
"RTN","QACI3",74,0)
 ; If no data to migrate in the current table, return nothing
"RTN","QACI3",75,0)
 ;  in the output array.
"RTN","QACI3",76,0)
 Q:'$O(@UNAME@(0))
"RTN","QACI3",77,0)
 S CNT=0
"RTN","QACI3",78,0)
 ; For Facility Service or Section, set VISN name into first entry of output array.
"RTN","QACI3",79,0)
 ; For Users or Employees Involved, put station number for server into first entry of output array.
"RTN","QACI3",80,0)
 I "F^U^E"[FLAG,$O(@UNAME@(0)) D
"RTN","QACI3",81,0)
 . S CNT=1,PATSNO=PATSNO+1
"RTN","QACI3",82,0)
 . S @PATSBY@(1)=$G(^XTMP("QACMIGR",TYPE,"U",0))
"RTN","QACI3",83,0)
 . Q
"RTN","QACI3",84,0)
 ; Move data to be migrated into output global.
"RTN","QACI3",85,0)
 F I=0:0 S I=$O(@UNAME@(I)) Q:'I  Q:PATSNO&(CNT=PATSNO)  S X=^(I) D
"RTN","QACI3",86,0)
 . S CNT=CNT+1
"RTN","QACI3",87,0)
 . S @PATSBY@(CNT)=X
"RTN","QACI3",88,0)
 . Q:FLAG'="P"
"RTN","QACI3",89,0)
 . ; Load continuation patient data
"RTN","QACI3",90,0)
 . S CNT=CNT+1
"RTN","QACI3",91,0)
 . S @PATSBY@(CNT)=@UNAME@(I,"cont")
"RTN","QACI3",92,0)
 . Q
"RTN","QACI3",93,0)
 Q
"RTN","QACI3",94,0)
 ;
"RTN","QACI3",95,0)
 ;
"RTN","QACI4")
0^12^B3186113^n/a
"RTN","QACI4",1,0)
QACI4 ; OAKOIFO/TKW - DATA MIGRATION - VISTALINK RPC CODE ;9/28/04  11:54
"RTN","QACI4",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI4",3,0)
EN(PATSBY,PATSLIST) ;
"RTN","QACI4",4,0)
 ; Read list of migrated ROCs in PATSLIST, put into ^XTMP. Then
"RTN","QACI4",5,0)
 ;   return the next list of ROCs to be migrated into global ^TMP.
"RTN","QACI4",6,0)
 ;   NOTE: This routine is always called after QACI3, so there is
"RTN","QACI4",7,0)
 ;   no need to check the 'ready to migrate' flag.
"RTN","QACI4",8,0)
 ; PATSBY = the name of the output global
"RTN","QACI4",9,0)
 ; PATSLIST = If defined, contains a list of ROC numbers
"RTN","QACI4",10,0)
 ;     for ROCs that have been successfully migrated to PATS.
"RTN","QACI4",11,0)
 ;
"RTN","QACI4",12,0)
 ; Process incoming list. Move list of migrated ROCs into
"RTN","QACI4",13,0)
 ; ^XTMP("QACMIGR","ROC","D"), remove them from the list of ROCs
"RTN","QACI4",14,0)
 ; to be migrated ^XTMP("QACMIGR","ROC","U").
"RTN","QACI4",15,0)
 D LISTIN
"RTN","QACI4",16,0)
 ; Now return the next set of ROCs to be migrated.
"RTN","QACI4",17,0)
 S PATSBY=$NA(^TMP("ROC",$J))
"RTN","QACI4",18,0)
 D LISTOUT
"RTN","QACI4",19,0)
 Q
"RTN","QACI4",20,0)
 ;
"RTN","QACI4",21,0)
LISTIN ;
"RTN","QACI4",22,0)
 N I,ROCNO,CNT S I="",CNT=0
"RTN","QACI4",23,0)
 F  S I=$O(PATSLIST(I)) Q:I=""  S ROCNO=PATSLIST(I) I ROCNO]"" D
"RTN","QACI4",24,0)
 . K ^XTMP("QACMIGR","ROC","U",ROCNO_" ")
"RTN","QACI4",25,0)
 . S ^XTMP("QACMIGR","ROC","D",ROCNO)=""
"RTN","QACI4",26,0)
 . S CNT=CNT+1
"RTN","QACI4",27,0)
 . Q
"RTN","QACI4",28,0)
 I CNT>0 D
"RTN","QACI4",29,0)
 . S ^XTMP("QACMIGR","ROC","D")=$G(^XTMP("QACMIGR","ROC","D"))+CNT
"RTN","QACI4",30,0)
 . I $O(^XTMP("QACMIGR","ROC","U",0))="" K ^XTMP("QACMIGR","ROC","U") Q
"RTN","QACI4",31,0)
 . S ^XTMP("QACMIGR","ROC","U")=$G(^XTMP("QACMIGR","ROC","U"))-CNT
"RTN","QACI4",32,0)
 . Q
"RTN","QACI4",33,0)
 Q
"RTN","QACI4",34,0)
 ;
"RTN","QACI4",35,0)
LISTOUT ;
"RTN","QACI4",36,0)
 K ^TMP("ROC",$J)
"RTN","QACI4",37,0)
 ; The output array will be empty if there is no data to migrate
"RTN","QACI4",38,0)
 Q:$O(^XTMP("QACMIGR","ROC","U",0))=""
"RTN","QACI4",39,0)
 ; The 0 node should contain VISN name and Station Numbers
"RTN","QACI4",40,0)
 ;  if not, return the output array empty.
"RTN","QACI4",41,0)
 N X S X=$G(^XTMP("QACMIGR","ROC","U",0))
"RTN","QACI4",42,0)
 Q:X=""
"RTN","QACI4",43,0)
 S ^TMP("ROC",$J,1)=X
"RTN","QACI4",44,0)
 N ROCNO,I,CNT S CNT=1,ROCNO=0
"RTN","QACI4",45,0)
 F  S ROCNO=$O(^XTMP("QACMIGR","ROC","U",ROCNO)) Q:ROCNO=""!(CNT>1500)  D
"RTN","QACI4",46,0)
 . S I=$O(^XTMP("QACMIGR","ROC","U",ROCNO,"A"),-1)
"RTN","QACI4",47,0)
 . I (I+CNT)>1500 S CNT=9999 Q
"RTN","QACI4",48,0)
 . F I=0:0 S I=$O(^XTMP("QACMIGR","ROC","U",ROCNO,I)) Q:'I  S X=^(I) D
"RTN","QACI4",49,0)
 .. S CNT=CNT+1
"RTN","QACI4",50,0)
 .. S ^TMP("ROC",$J,CNT)=X Q
"RTN","QACI4",51,0)
 . Q
"RTN","QACI4",52,0)
 Q
"RTN","QACI4",53,0)
 ;
"RTN","QACI5")
0^13^B43902138^n/a
"RTN","QACI5",1,0)
QACI5 ; OAKOIFO/TKW - DATA MIGRATION - OPTIONS OUT-OF-ORDER/IN-ORDER ;7/27/05  16:22
"RTN","QACI5",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACI5",3,0)
EN ; Put Patient Rep (QAC) options out-of-order or back in order again
"RTN","QACI5",4,0)
 N QACIEN,QACIO,QACX,DIR,X,Y
"RTN","QACI5",5,0)
 S QACIEN=$$FIND1^DIC(19,,"X","QAC NEW")
"RTN","QACI5",6,0)
 I 'QACIEN W "QAC NEW option not found!" Q
"RTN","QACI5",7,0)
 S QACX=$$GET1^DIQ(19,QACIEN_",",2,"I")
"RTN","QACI5",8,0)
 ; Set QACIO to 0 if menus are out of order, 1 if they're active
"RTN","QACI5",9,0)
 S QACIO=$S(QACX]"":0,1:1)
"RTN","QACI5",10,0)
 K DIR,Y
"RTN","QACI5",11,0)
 W !!,"  The Patient Rep Options are currently "_$S(QACIO=0:"OUT OF ORDER.",1:"ACTIVE."),!
"RTN","QACI5",12,0)
 S DIR("A")="  Put Patient Rep Options OUT OF ORDER"
"RTN","QACI5",13,0)
 I QACIO=0 S DIR("A")="  Reactivate Patient Rep Options"
"RTN","QACI5",14,0)
 S DIR(0)="YO",DIR("B")="YES"
"RTN","QACI5",15,0)
 D ^DIR
"RTN","QACI5",16,0)
 Q:Y'=1
"RTN","QACI5",17,0)
 D E0
"RTN","QACI5",18,0)
 Q
"RTN","QACI5",19,0)
E0 ; Activate/Inactivate Patient Rep menu options. 
"RTN","QACI5",20,0)
 N QACOPT,QACTXT
"RTN","QACI5",21,0)
 F QACOPT="QAC NEW","QAC EDIT","QAC STATUS","QAC SETUP MENU","QAC ALERT","QAC ROLLUP (MANUAL)" D
"RTN","QACI5",22,0)
 . I QACIO=1 S QACTXT="Use data migration UTIL option to reactivate."
"RTN","QACI5",23,0)
 . E  S QACTXT=""
"RTN","QACI5",24,0)
 . D OUT^XPDMENU(QACOPT,QACTXT) Q
"RTN","QACI5",25,0)
 W !!,"  * Patient Rep Options have been "_$S(QACIO=0:"Reactivated.",1:"put OUT OF ORDER."),!
"RTN","QACI5",26,0)
 Q
"RTN","QACI5",27,0)
 ;
"RTN","QACI5",28,0)
EN1() ; Entry point from ^QACI2 (set options out of order, kill rollup task
"RTN","QACI5",29,0)
 ; when data is moved to staging area.)
"RTN","QACI5",30,0)
 N QACIO S QACIO=1
"RTN","QACI5",31,0)
 ; Kill the TaskMan task that rolls Patient Rep data up to Austin for VSSC Reports
"RTN","QACI5",32,0)
 W !!,"  Stopping (killing) task that rolls up data to Austin..."
"RTN","QACI5",33,0)
 I '$$KILLRLUP Q 0
"RTN","QACI5",34,0)
 ; Call routine to put Patient Rep options OUT OF ORDER.
"RTN","QACI5",35,0)
 D E0
"RTN","QACI5",36,0)
 Q 1
"RTN","QACI5",37,0)
 ;
"RTN","QACI5",38,0)
ENRTASK ; Reschedule task that rolls data up to Austin
"RTN","QACI5",39,0)
 N DIR,Y W !
"RTN","QACI5",40,0)
 S DIR("A")="  Reschedule task to roll up data to Austin"
"RTN","QACI5",41,0)
 S DIR(0)="YO",DIR("B")="YES"
"RTN","QACI5",42,0)
 S DIR("?",1)="When you migrated data to the staging area, the task that rolls up data"
"RTN","QACI5",43,0)
 S DIR("?",2)="from the Patient Rep application to Austin was automatically stopped (killed)."
"RTN","QACI5",44,0)
 S DIR("?",3)=""
"RTN","QACI5",45,0)
 S DIR("?")="Answer YES if you want to restart the scheduled rollup task."
"RTN","QACI5",46,0)
 D ^DIR
"RTN","QACI5",47,0)
 I Y'=1 W !,"   * no action taken" Q
"RTN","QACI5",48,0)
 W !,"...processing task--please wait..."
"RTN","QACI5",49,0)
 D ^QACMAIL0
"RTN","QACI5",50,0)
 W !,"  * Task has been rescheduled.",!,"    Data will be rolled up from Patient Rep to Austin."
"RTN","QACI5",51,0)
 Q
"RTN","QACI5",52,0)
 ;
"RTN","QACI5",53,0)
ENKTASK ; Kill task that rolls data up to Austin
"RTN","QACI5",54,0)
 N DIR,Y W !
"RTN","QACI5",55,0)
 S DIR("A")="  Stop (kill) task that rolls up data to Austin"
"RTN","QACI5",56,0)
 S DIR(0)="YO",DIR("B")="YES"
"RTN","QACI5",57,0)
 S DIR("?",1)="After data has been migrated into PATS, you will no longer want to run the"
"RTN","QACI5",58,0)
 S DIR("?",2)="scheduled task that rolls up data from the Patient Rep application to Austin."
"RTN","QACI5",59,0)
 S DIR("?",3)=""
"RTN","QACI5",60,0)
 S DIR("?")="Answer YES if you want to stop (kill) the scheduled rollup task."
"RTN","QACI5",61,0)
 D ^DIR
"RTN","QACI5",62,0)
 I Y'=1 W !,"   * no action taken" Q
"RTN","QACI5",63,0)
 I $$KILLRLUP Q
"RTN","QACI5",64,0)
 Q
"RTN","QACI5",65,0)
 ;
"RTN","QACI5",66,0)
KILLRLUP() ; Kill Taskman Task that rolls Patient Rep data up to Austin for VSSC reports
"RTN","QACI5",67,0)
 ; Get task number from QAC SITE PARAMETER FILE  
"RTN","QACI5",68,0)
 N QACZTSK,QACHK,ZTSK
"RTN","QACI5",69,0)
 S ZTSK=""
"RTN","QACI5",70,0)
 D CHKTSK^QACMAIL0
"RTN","QACI5",71,0)
 ; If no task number in SITE PARAMETER FILE, job is not scheduled, we can continue.
"RTN","QACI5",72,0)
 I $G(ZTSK)'>0 W !,"  * No task is currently scheduled--rollup to Austin is stopped." Q 1
"RTN","QACI5",73,0)
 I $G(ZTSK(1))=2 W !!,"  * Task that rolls data up to Austin is currently running.",!,"    Please try later." Q 0
"RTN","QACI5",74,0)
 ; If task is not currently scheduled, we can continue.
"RTN","QACI5",75,0)
 I $G(QACHK)'=1 W !,"  * No task is currently scheduled--rollup to Austin is stopped." Q 1
"RTN","QACI5",76,0)
 ; Otherwise, kill the task
"RTN","QACI5",77,0)
 D KILL^%ZTLOAD
"RTN","QACI5",78,0)
 I $G(ZTSK(0))'=1 W !!,"  * Error attempting to kill task "_ZTSK_"!",!,"    Please contact IRM staff for assistance." Q 0
"RTN","QACI5",79,0)
 W !,"  * Task has been stopped (killed).",!,"    Data will not be rolled up from Patient Rep to Austin."
"RTN","QACI5",80,0)
 Q 1
"RTN","QACI5",81,0)
 ;
"RTN","QACI5",82,0)
EN3 ; Print list of pending ARNs
"RTN","QACI5",83,0)
 I $E($O(^XTV(8992,"AXQAN","QAC-")),1,4)'="QAC-" W !!,"There are no Pending Notifications!",!! Q
"RTN","QACI5",84,0)
 N PATSHDR
"RTN","QACI5",85,0)
 S PATSHDR="Pending Notifications"
"RTN","QACI5",86,0)
 S PATSHDR(1)="ROC No.      From                            To"
"RTN","QACI5",87,0)
 N ZTSAVE S ZTSAVE("PATSHDR")=""
"RTN","QACI5",88,0)
 D EN^XUTMDEVQ("DQRPT3^QACI5","Report of Pending Notifications",.ZTSAVE)
"RTN","QACI5",89,0)
 Q
"RTN","QACI5",90,0)
 ;
"RTN","QACI5",91,0)
EN4 ; Counts of migrated/unmigrated/total/errors
"RTN","QACI5",92,0)
 N PATSHDR
"RTN","QACI5",93,0)
 S PATSHDR="PATS Migration Counts"
"RTN","QACI5",94,0)
 N ZTSAVE S ZTSAVE("PATSHDR")=""
"RTN","QACI5",95,0)
 D EN^XUTMDEVQ("DQRPT4^QACI5",PATSHDR,.ZTSAVE)
"RTN","QACI5",96,0)
 Q
"RTN","QACI5",97,0)
 ;
"RTN","QACI5",98,0)
DQRPT3 ; Report pending ARNs
"RTN","QACI5",99,0)
 N PAGENO,LNCNT,NKEY,NIEN,NDATE,NOTIF0,ERRMSG,HDDATE,QACFROM,QACTO,ROCNO,DATESENT,X,%,%H,%I
"RTN","QACI5",100,0)
 S PAGENO=1,LNCNT=0
"RTN","QACI5",101,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI5",102,0)
 U IO D HDR^QACI1A
"RTN","QACI5",103,0)
 W ! S LNCNT=1
"RTN","QACI5",104,0)
 S NKEY="QAC-"
"RTN","QACI5",105,0)
 F  S NKEY=$O(^XTV(8992,"AXQAN",NKEY)) Q:$E(NKEY,1,4)'="QAC-"  D
"RTN","QACI5",106,0)
 . F NIEN=0:0 S NIEN=$O(^XTV(8992,"AXQAN",NKEY,NIEN)) Q:'NIEN  F NDATE=0:0 S NDATE=$O(^XTV(8992,"AXQAN",NKEY,NIEN,NDATE)) Q:'NDATE  D
"RTN","QACI5",107,0)
 .. S NOTIF0=$G(^XTV(8992,NIEN,"XQA",NDATE,0))
"RTN","QACI5",108,0)
 .. S QACTO=$P($G(^VA(200,NIEN,0)),"^")
"RTN","QACI5",109,0)
 .. S QACFROM=$P($G(^VA(200,$P(NOTIF0,";",2),0)),"^")
"RTN","QACI5",110,0)
 .. S DATESENT=$$FMTE^XLFDT(NDATE)
"RTN","QACI5",111,0)
 .. S ROCNO=$P(NOTIF0,"-",2)
"RTN","QACI5",112,0)
 .. D:LNCNT>55 HDR^QACI1A
"RTN","QACI5",113,0)
 .. W ROCNO,?13,QACFROM,?45,QACTO,!
"RTN","QACI5",114,0)
 .. W ?2,"Sent: "_DATESENT,!
"RTN","QACI5",115,0)
 .. W ?2,"Msg:  ",$P(NOTIF0,"^",3),!!
"RTN","QACI5",116,0)
 .. S LNCNT=LNCNT+4
"RTN","QACI5",117,0)
 .. Q
"RTN","QACI5",118,0)
 . Q
"RTN","QACI5",119,0)
 D ^%ZISC Q
"RTN","QACI5",120,0)
 ;
"RTN","QACI5",121,0)
DQRPT4 ; Print various counts for migration
"RTN","QACI5",122,0)
 N PAGENO,CNT,HDDATE,TYPE,DSPTYPE,DASH,X,%,%H,%I
"RTN","QACI5",123,0)
 S PAGENO=1
"RTN","QACI5",124,0)
 S DASH=" ",$P(DASH,"-",24)=""
"RTN","QACI5",125,0)
 D NOW^%DTC S HDDATE=$$FMTE^XLFDT(%)
"RTN","QACI5",126,0)
 S DSPTYPE("ROC")="ROCs",DSPTYPE("HL")="Hospital Locations"
"RTN","QACI5",127,0)
 S DSPTYPE("USER")="PATS Users",DSPTYPE("PT")="Patients"
"RTN","QACI5",128,0)
 S DSPTYPE("CC")="Congressional Contacts"
"RTN","QACI5",129,0)
 S DSPTYPE("EMPINV")="Employees Involved"
"RTN","QACI5",130,0)
 S DSPTYPE("FSOS")="Service/Disciplines"
"RTN","QACI5",131,0)
 U IO D HDR^QACI1A
"RTN","QACI5",132,0)
 W ! S LNCNT=1
"RTN","QACI5",133,0)
 S CNT=0 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI5",134,0)
 . S CNT=CNT+$G(^XTMP("QACMIGR",TYPE,"U")) Q
"RTN","QACI5",135,0)
 I CNT=0 W "** No data in staging area. **",!!
"RTN","QACI5",136,0)
 E  W "** Data moved to the staging area, ready to migrate to PATS **",!!
"RTN","QACI5",137,0)
 S CNT=0 F I=0:0 S I=$O(^QA(745.1,I)) Q:'I  S CNT=CNT+1
"RTN","QACI5",138,0)
 W "Total Number of ROCs:",$E(DASH,1,20),?42,CNT,!
"RTN","QACI5",139,0)
 F TYPE="ROC","HL","USER","PT","CC","EMPINV","FSOS" D
"RTN","QACI5",140,0)
 . W DSPTYPE(TYPE)_" ready to migrate:",$E(DASH,1,23-$L(DSPTYPE(TYPE))),?42,+$G(^XTMP("QACMIGR",TYPE,"U")),!
"RTN","QACI5",141,0)
 . W ?8,"migrated:"_DASH,?42,+$G(^XTMP("QACMIGR",TYPE,"D")),!
"RTN","QACI5",142,0)
 . W ?8,"with errors:"_$E(DASH,1,21),?42,+$G(^XTMP("QACMIGR",TYPE,"E")),!!
"RTN","QACI5",143,0)
 . Q
"RTN","QACI5",144,0)
 D ^%ZISC Q
"RTN","QACI5",145,0)
 ;
"RTN","QACI5",146,0)
ENRSTAT ; Return status for a selected ROC
"RTN","QACI5",147,0)
 N DIC,X,Y,OLDROC,NEWROC
"RTN","QACI5",148,0)
 S DIC="^QA(745.1,",DIC(0)="AEMQZ",DIC("A")="Select CONTACT NUMBER: "
"RTN","QACI5",149,0)
 D ^DIC Q:'Y!(Y=-1)
"RTN","QACI5",150,0)
 S OLDROC=$P(Y(0),"^")
"RTN","QACI5",151,0)
 S NEWROC=$$CONVROC^QACI2C(OLDROC)
"RTN","QACI5",152,0)
 W !!,"**** ROC Status: "
"RTN","QACI5",153,0)
 I $D(^XTMP("QACMIGR","ROC","D",NEWROC)) W "This ROC has been successfully migrated into PATS.",! Q
"RTN","QACI5",154,0)
 I $D(^XTMP("QACMIGR","ROC","E",OLDROC_" ")) W "This ROC has errors.",! Q
"RTN","QACI5",155,0)
 I $D(^XTMP("QACMIGR","ROC","U",NEWROC_" ")) W "This ROC is in the staging area, ready to migrate.",! Q
"RTN","QACI5",156,0)
 W "No action has been taken for this ROC.",!
"RTN","QACI5",157,0)
 Q
"RTN","QACI5",158,0)
 ;
"RTN","QACI5",159,0)
 ;
"RTN","QACIENV")
0^14^B2063143^n/a
"RTN","QACIENV",1,0)
QACIENV ; OAKOIFO/TKW - ENVIRONMENT CHECK ROUTINE FOR PATCH QAC*2.0*19 (PATS) ;3/31/06  13:34
"RTN","QACIENV",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACIENV",3,0)
EN ; PATS Environment Check Routine
"RTN","QACIENV",4,0)
 ; Check to see if DGRR Broker Type options exist
"RTN","QACIENV",5,0)
 N DGOPTPL,DGOPTPC
"RTN","QACIENV",6,0)
 S DGOPTPL=$$FIND1^DIC(19,,"QX","DGRR GUI PATIENT LOOKUP","B")
"RTN","QACIENV",7,0)
 S DGOPTPC=$$FIND1^DIC(19,,"QX","DGRR PATIENT SERVICE QUERY","B")
"RTN","QACIENV",8,0)
 I 'DGOPTPL D  S XPDABORT=1
"RTN","QACIENV",9,0)
 . W !!,"The Patient Service Lookup Broker Type Option DGRR GUI PATIENT LOOKUP"
"RTN","QACIENV",10,0)
 . W !,"is not found on your VistA system. Patient Service Lookup"
"RTN","QACIENV",11,0)
 . W !,"must be installed prior to installing PATS!"
"RTN","QACIENV",12,0)
 . Q
"RTN","QACIENV",13,0)
 I 'DGOPTPC D  S XPDABORT=1
"RTN","QACIENV",14,0)
 . W !!,"The Patient Service Construct Broker Type Option DGRR PATIENT SERVICE QUERY"
"RTN","QACIENV",15,0)
 . W !,"is not found on your VistA system. Patient Service Construct"
"RTN","QACIENV",16,0)
 . W !,"must be installed prior to installing PATS!"
"RTN","QACIENV",17,0)
 . Q
"RTN","QACIENV",18,0)
 Q
"RTN","QACIENV",19,0)
 ;
"RTN","QACIENV",20,0)
 ;
"RTN","QACVDEM")
0^16^B35412405^n/a
"RTN","QACVDEM",1,0)
QACVDEM ;PGB - RPC TO RETRIEVE DEMO/ELIG/ENROLLMENT PATIENT DATA ;8/3/05  14:13
"RTN","QACVDEM",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACVDEM",3,0)
 ;
"RTN","QACVDEM",4,0)
EN(PATSBY,DFN) ; (deprecated 08/03/2005)
"RTN","QACVDEM",5,0)
 ; (note: this entry point will be replaced with calls to 
"RTN","QACVDEM",6,0)
 ;  Patient Service Demographics service 08/03/2005)
"RTN","QACVDEM",7,0)
 S PATSBY=$NA(^TMP("PatsPatientDetailsXml",$J))
"RTN","QACVDEM",8,0)
 N CNT,TXT
"RTN","QACVDEM",9,0)
 S DFN=+$G(DFN),CNT=0,TXT=""
"RTN","QACVDEM",10,0)
 I '$G(DFN)!('$D(^DPT(DFN,0))) QUIT
"RTN","QACVDEM",11,0)
 S TXT="<?xml version=""1.0"" encoding=""utf-8""?>"
"RTN","QACVDEM",12,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",13,0)
 S TXT="<PatientDataSet xmlns=""http://tempuri.org/PatientDataSet.xsd"">"
"RTN","QACVDEM",14,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",15,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)="<PatsPatient>"
"RTN","QACVDEM",16,0)
 D DEMOG(DFN,.CNT)
"RTN","QACVDEM",17,0)
 D ELIG(DFN,.CNT)
"RTN","QACVDEM",18,0)
 D ENROLL(DFN,.CNT)
"RTN","QACVDEM",19,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)="</PatsPatient>"
"RTN","QACVDEM",20,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)="</PatientDataSet>"
"RTN","QACVDEM",21,0)
 QUIT
"RTN","QACVDEM",22,0)
 ;
"RTN","QACVDEM",23,0)
DEMOG(DFN,CNT) ;
"RTN","QACVDEM",24,0)
 ;Retrieve:      Full Name (.01)
"RTN","QACVDEM",25,0)
 ;               Name Components (Last,First,Middle,Pre,Suffix,Degree
"RTN","QACVDEM",26,0)
 ;               Gender(.02);
"RTN","QACVDEM",27,0)
 ;               Date of Birth (.03)     
"RTN","QACVDEM",28,0)
 ;               SSN (.09)
"RTN","QACVDEM",29,0)
 ;               ICN (991.01)
"RTN","QACVDEM",30,0)
 ;               RACE (2)
"RTN","QACVDEM",31,0)
 ;               ETHNICITY (6)
"RTN","QACVDEM",32,0)
 N FILE,ICNO,SSN,TXT,ARR,TAGO,TAGC,VADM
"RTN","QACVDEM",33,0)
 N YYYY,MM,DD,DOB,RACE,ETH
"RTN","QACVDEM",34,0)
 S (SNN,ARR,TXT,YYYY,MM,DD,ETH)=""
"RTN","QACVDEM",35,0)
 D NAMEC(DFN_",",.CNT) ;Get individual name components
"RTN","QACVDEM",36,0)
 ; Get patient demographics and load into output (IA #10061)
"RTN","QACVDEM",37,0)
 D DEM^VADPT
"RTN","QACVDEM",38,0)
 S TXT="<Gender>"_$P(VADM(5),"^")_"</Gender>"
"RTN","QACVDEM",39,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",40,0)
 S DOB=$$CONVDATE($P(VADM(3),"^"))
"RTN","QACVDEM",41,0)
 I DOB'="" D
"RTN","QACVDEM",42,0)
 .S TXT="<DateOfBirth>"_DOB_"</DateOfBirth>"
"RTN","QACVDEM",43,0)
 .S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",44,0)
 S TAGO="<SocialSecurityNumber>",TAGC="</SocialSecurityNumber>"
"RTN","QACVDEM",45,0)
 S SSN=$P(VADM(2),"^")
"RTN","QACVDEM",46,0)
 S TXT=TAGO_$E(SSN,1,9)_TAGC
"RTN","QACVDEM",47,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",48,0)
 S TAGO="<IsPseudoSsn>",TAGC="</IsPseudoSsn>"
"RTN","QACVDEM",49,0)
 S TXT=TAGO_"false"_TAGC
"RTN","QACVDEM",50,0)
 I SSN["P" S TXT=TAGO_"true"_TAGC
"RTN","QACVDEM",51,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",52,0)
 ; Get race and ethnicity data (IA #3799)
"RTN","QACVDEM",53,0)
 D RACETH(.VADM,.RACE,.ETH)
"RTN","QACVDEM",54,0)
 I ETH]"" D
"RTN","QACVDEM",55,0)
 . S TXT="<Ethnicity>"_ETH_"</Ethnicity>"
"RTN","QACVDEM",56,0)
 . S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",57,0)
 . Q
"RTN","QACVDEM",58,0)
 F I=0:0 S I=$O(RACE(I)) Q:'I  D
"RTN","QACVDEM",59,0)
 . S TXT="<Race>"_RACE(I)_"</Race>"
"RTN","QACVDEM",60,0)
 . S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",61,0)
 . Q
"RTN","QACVDEM",62,0)
 ; Get integration control number (IA #2701)
"RTN","QACVDEM",63,0)
 S ICNO=$P($$GETICN^MPIF001(DFN),"^")
"RTN","QACVDEM",64,0)
 S TAGO="<IntegrationControlNumber>",TAGC="</IntegrationControlNumber>"
"RTN","QACVDEM",65,0)
 I ICNO'="" D
"RTN","QACVDEM",66,0)
 .S TXT=TAGO_ICNO_TAGC
"RTN","QACVDEM",67,0)
 .S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",68,0)
 QUIT
"RTN","QACVDEM",69,0)
 ;
"RTN","QACVDEM",70,0)
NAMEC(DFN,CNT) ;Name from Name Component File (#20) (IA #3065)
"RTN","QACVDEM",71,0)
 ;Retrieve:      LastName(1)
"RTN","QACVDEM",72,0)
 ;               FirstName(2)
"RTN","QACVDEM",73,0)
 ;               MiddleName(3)
"RTN","QACVDEM",74,0)
 ;               Prefix(4)
"RTN","QACVDEM",75,0)
 ;               Suffix(5)
"RTN","QACVDEM",76,0)
 ;               Degree(6)
"RTN","QACVDEM",77,0)
 N DGNAMEC,DPTNAME,DGFLD,TXT,NAMEC,DGII,TAGO,TAGC
"RTN","QACVDEM",78,0)
 S DPTNAME("FILE")=2,DGFLD=1,DPTNAME("FIELD")=".01",DPTNAME("IENS")=DFN
"RTN","QACVDEM",79,0)
 S NAMEC=$$HLNAME^XLFNAME(.DPTNAME,"S","^") ;IA #3065
"RTN","QACVDEM",80,0)
 F DGII=1:1:6 D
"RTN","QACVDEM",81,0)
 .S $P(DGNAMEC,U,DGFLD)=$P(NAMEC,U,DGII)
"RTN","QACVDEM",82,0)
 .S DGFLD=DGFLD+1
"RTN","QACVDEM",83,0)
 S TXT="<LastName>"_$P(DGNAMEC,U,1)_"</LastName>"
"RTN","QACVDEM",84,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",85,0)
 S TXT="<FirstName>"_$P(DGNAMEC,U,2)_"</FirstName>"
"RTN","QACVDEM",86,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",87,0)
 S TXT="<MiddleName>"_$P(DGNAMEC,U,3)_"</MiddleName>"
"RTN","QACVDEM",88,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",89,0)
 S TXT="<NameSuffix>"_$P(DGNAMEC,U,4)_"</NameSuffix>"
"RTN","QACVDEM",90,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",91,0)
 S TXT="<NamePrefix>"_$P(DGNAMEC,U,5)_"</NamePrefix>"
"RTN","QACVDEM",92,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",93,0)
 S TXT="<Degree>"_$P(DGNAMEC,U,6)_"</Degree>"
"RTN","QACVDEM",94,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",95,0)
 QUIT
"RTN","QACVDEM",96,0)
 ;
"RTN","QACVDEM",97,0)
ELIG(DFN,CNT) ;
"RTN","QACVDEM",98,0)
 ;Retrieve:      Eligibility (.361)
"RTN","QACVDEM",99,0)
 ;               Service Connected (.301)
"RTN","QACVDEM",100,0)
 ;               SC Percent (.302)
"RTN","QACVDEM",101,0)
 ;               Period of Service (.323)
"RTN","QACVDEM",102,0)
 ;               Category (current means test status .14)
"RTN","QACVDEM",103,0)
 N VAEL,FILE,TXT,ARR,TAGO,TAGC,ISSC,SCP,X
"RTN","QACVDEM",104,0)
 S FILE=2,(ARR,TXT,SCP)=""
"RTN","QACVDEM",105,0)
 ; (IA #10061 - NOTE: does not remove reserved XML characters (see $$SYMENC^MXMLUTL, IA#4153))
"RTN","QACVDEM",106,0)
 D ELIG^VADPT
"RTN","QACVDEM",107,0)
 S DFN=DFN_","
"RTN","QACVDEM",108,0)
 S TAGO="<EligibilityCode>",TAGC="</EligibilityCode>"
"RTN","QACVDEM",109,0)
 S X=$P(VAEL(1),"^",2)
"RTN","QACVDEM",110,0)
 S TXT=TAGO_X_TAGC
"RTN","QACVDEM",111,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",112,0)
 S ISSC="false"
"RTN","QACVDEM",113,0)
 I $P(VAEL(3),"^",1)=1 S ISSC="true"
"RTN","QACVDEM",114,0)
 S TAGO="<IsServiceConnected>",TAGC="</IsServiceConnected>"
"RTN","QACVDEM",115,0)
 S TXT=TAGO_ISSC_TAGC
"RTN","QACVDEM",116,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",117,0)
 S TAGO="<ServiceConnectedPercentage>"
"RTN","QACVDEM",118,0)
 S TAGC="</ServiceConnectedPercentage>"
"RTN","QACVDEM",119,0)
 I ISSC="true" S SCP=$P(VAEL(3),"^",2)
"RTN","QACVDEM",120,0)
 I SCP'="" D
"RTN","QACVDEM",121,0)
 .S TXT=TAGO_SCP_TAGC
"RTN","QACVDEM",122,0)
 .S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",123,0)
 S TAGO="<PeriodOfService>",TAGC="</PeriodOfService>"
"RTN","QACVDEM",124,0)
 S X=$P(VAEL(2),"^",2)
"RTN","QACVDEM",125,0)
 S TXT=TAGO_X_TAGC
"RTN","QACVDEM",126,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",127,0)
 S TAGO="<Category>",TAGC="</Category>"
"RTN","QACVDEM",128,0)
 S X=$P(VAEL(9),"^",2)
"RTN","QACVDEM",129,0)
 S TXT=TAGO_X_TAGC
"RTN","QACVDEM",130,0)
 S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",131,0)
 QUIT
"RTN","QACVDEM",132,0)
 ;
"RTN","QACVDEM",133,0)
ENROLL(DFN,CNT) ;
"RTN","QACVDEM",134,0)
 ;Retrieve:      Enrollment Priority (#27.01-->#27.11,.07)
"RTN","QACVDEM",135,0)
 N ENRP,TAGO,TAGC
"RTN","QACVDEM",136,0)
 S TAGO="<EnrollmentPriority>",TAGC="</EnrollmentPriority>"
"RTN","QACVDEM",137,0)
 S ENRP=$$GETENRL(DFN)
"RTN","QACVDEM",138,0)
 I ENRP'="" D
"RTN","QACVDEM",139,0)
 .S TXT=TAGO_ENRP_TAGC
"RTN","QACVDEM",140,0)
 .S CNT=CNT+1,^TMP("PatsPatientDetailsXml",$J,CNT)=TXT
"RTN","QACVDEM",141,0)
 QUIT
"RTN","QACVDEM",142,0)
GETENRL(DFN) ; Return current enrollment priority for this patient
"RTN","QACVDEM",143,0)
 N CUR,QACX
"RTN","QACVDEM",144,0)
 ; Get current enrollment (IA #2918)
"RTN","QACVDEM",145,0)
 S CUR=$$PRIORITY^DGENA(DFN) Q:CUR="" ""
"RTN","QACVDEM",146,0)
 ; Convert internal to external enrollment priority (IA #2462)
"RTN","QACVDEM",147,0)
 S QACX=$$EXTERNAL^DILFD(27.11,.07,,CUR)
"RTN","QACVDEM",148,0)
 Q QACX
"RTN","QACVDEM",149,0)
 ;
"RTN","QACVDEM",150,0)
RACETH(VADM,RACE,ETH) ; Return active race and ethnicity values
"RTN","QACVDEM",151,0)
 N I,J,TXT S ETH=""
"RTN","QACVDEM",152,0)
 ; Get Ethnicity abbreviation.
"RTN","QACVDEM",153,0)
 S I=$O(VADM(11,0)) D:I
"RTN","QACVDEM",154,0)
 . S ETH=$P($G(VADM(11,I)),"^")
"RTN","QACVDEM",155,0)
 . I 'ETH S ETH="" Q
"RTN","QACVDEM",156,0)
 . Q:$$INACTIVE^DGUTL4(ETH,2)
"RTN","QACVDEM",157,0)
 . S ETH=$$PTR2CODE^DGUTL4(ETH,2,1)
"RTN","QACVDEM",158,0)
 . Q
"RTN","QACVDEM",159,0)
 ; Get historical race HL7 code.
"RTN","QACVDEM",160,0)
 S J=0 K RACE
"RTN","QACVDEM",161,0)
 S RACE=$P($G(VADM(8)),"^") D:RACE RACE(.RACE,.J)
"RTN","QACVDEM",162,0)
 ; Get new race HL7 codes.
"RTN","QACVDEM",163,0)
 F I=0:0 S I=$O(VADM(12,I)) Q:'I  D
"RTN","QACVDEM",164,0)
 . S RACE=$P($G(VADM(12,I)),"^") Q:'RACE
"RTN","QACVDEM",165,0)
 . D RACE(.RACE,.J) Q
"RTN","QACVDEM",166,0)
 Q
"RTN","QACVDEM",167,0)
 ;
"RTN","QACVDEM",168,0)
RACE(RACE,CNT) ; Return race
"RTN","QACVDEM",169,0)
 Q:$$INACTIVE^DGUTL4(RACE,1)
"RTN","QACVDEM",170,0)
 N X S X=$$PTR2CODE^DGUTL4(RACE,1,2) Q:X=""
"RTN","QACVDEM",171,0)
 S CNT=CNT+1,RACE(CNT)=X Q
"RTN","QACVDEM",172,0)
 ;
"RTN","QACVDEM",173,0)
CONVDATE(OLDDATE) ; Convert data to MM/DD/YYYY format
"RTN","QACVDEM",174,0)
 Q:OLDDATE="" ""
"RTN","QACVDEM",175,0)
 N MM,DD S MM=$E(OLDDATE,4,5),DD=$E(OLDDATE,6,7)
"RTN","QACVDEM",176,0)
 S:MM="00" MM="01"
"RTN","QACVDEM",177,0)
 S:DD="00" DD="01"
"RTN","QACVDEM",178,0)
 Q $E(OLDDATE,1,3)+1700_"-"_MM_"-"_DD
"RTN","QACVEMPX")
0^17^B18632980^n/a
"RTN","QACVEMPX",1,0)
QACVEMPX ; Return Person Data using Value List Handler Pattern to update Patient Advocate PatsPerson table ;5/8/06  10:36
"RTN","QACVEMPX",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACVEMPX",3,0)
EN(PATSBY,LKUPVAL,PATSROWS,PATSFRM0,PATSFRM1)        ; Lookup Employee by Name, then
"RTN","QACVEMPX",4,0)
 ; Output XML formatted data from NEW PERSON file.
"RTN","QACVEMPX",5,0)
 ; PATSBY contains the name of the output array (pass by reference)
"RTN","QACVEMPX",6,0)
 ; LKUPVAL is the name of the person to be matched (LAST,FIRST), or
"RTN","QACVEMPX",7,0)
 ;         an array of Security Keys.
"RTN","QACVEMPX",8,0)
 ; PATSROWS=Number of rows to return in each call
"RTN","QACVEMPX",9,0)
 ; PATSFRM0=Employee Name value from previous call (empty on first call)
"RTN","QACVEMPX",10,0)
 ; PATSFRM1=Employee IEN from previous call (empty on first call)
"RTN","QACVEMPX",11,0)
 K ^TMP("DILIST",$J),^TMP("PatsPersonXml",$J)
"RTN","QACVEMPX",12,0)
 N STDNAME,NAMECOMP,IENS,PIECE,OUTCNT,TAGLIST,FROM,PART,SRVIEN,MAILCODE,TITLE,SRVRSTA,PATSMORE,PATSERR,DIERR,I,J,X,Y
"RTN","QACVEMPX",13,0)
 ; If LKUPVAL exists, it contains an employee name. Else, it is
"RTN","QACVEMPX",14,0)
 ;  an array of Security Key values and we want to find all holders
"RTN","QACVEMPX",15,0)
 ;  of those keys.
"RTN","QACVEMPX",16,0)
 ; Standardize the name, parse out last name and first name.
"RTN","QACVEMPX",17,0)
 I $G(LKUPVAL)]"" S STDNAME=LKUPVAL D BYNAME
"RTN","QACVEMPX",18,0)
 I $G(LKUPVAL)="" D
"RTN","QACVEMPX",19,0)
 . D EN^QACVKHLD(.LKUPVAL,PATSROWS,.PATSFRM0,.PATSFRM1)
"RTN","QACVEMPX",20,0)
 . S FROM(1)=$G(PATSFRM0),FROM(2)=$G(PATSFRM1)
"RTN","QACVEMPX",21,0)
 . S PATSMORE=$S(FROM(1)="":0,1:1)
"RTN","QACVEMPX",22,0)
 . Q
"RTN","QACVEMPX",23,0)
 I '$D(^TMP("DILIST",$J)),'$D(^TMP("DIERR",$J)) Q
"RTN","QACVEMPX",24,0)
 S PATSERR="" I $D(^TMP("DIERR",$J)) S PATSERR=$G(^TMP("DIERR",$J,1,"TEXT",1))
"RTN","QACVEMPX",25,0)
 ; Get Station Number of Institution where server resides (IA #1518)
"RTN","QACVEMPX",26,0)
 S SRVRSTA=$$STA^XUAF4(+$$GET1^DIQ(8989.3,1,217,"I"))
"RTN","QACVEMPX",27,0)
 ; Set name of output array into output parameter.
"RTN","QACVEMPX",28,0)
 S PATSBY=$NA(^TMP("PatsPersonXml",$J))
"RTN","QACVEMPX",29,0)
 ; Now build the output.
"RTN","QACVEMPX",30,0)
 D HDR
"RTN","QACVEMPX",31,0)
 S OUTCNT=2
"RTN","QACVEMPX",32,0)
 D EN2(.OUTCNT),FOOTER(.OUTCNT)
"RTN","QACVEMPX",33,0)
 Q
"RTN","QACVEMPX",34,0)
 ;
"RTN","QACVEMPX",35,0)
 ;
"RTN","QACVEMPX",36,0)
BYNAME ; Standardize the name, parse out last name and first name. (IA #3065)
"RTN","QACVEMPX",37,0)
 D STDNAME^XLFNAME(.STDNAME,"FG")
"RTN","QACVEMPX",38,0)
 N FIRST,LAST,LEN,SCR,CURRDT
"RTN","QACVEMPX",39,0)
 S LAST=$P(STDNAME,","),FIRST=$P(STDNAME,",",2,99)
"RTN","QACVEMPX",40,0)
 S CURRDT=$$DT^XLFDT()
"RTN","QACVEMPX",41,0)
 ; Screen out terminated users.
"RTN","QACVEMPX",42,0)
 S SCR="I ($P(^(0),""^"",11)=""""!(CURRDT<$P(^(0),""^"",11)))"
"RTN","QACVEMPX",43,0)
 ; If first name was passed, check for it with a screen.
"RTN","QACVEMPX",44,0)
 S LEN=$L(FIRST) I LEN>0 S SCR=SCR_",$E($P($P(^(0),""^""),"","",2,99),1,"_LEN_")="_""""_FIRST_""""
"RTN","QACVEMPX",45,0)
 ; Set the starting values, and partial match values.
"RTN","QACVEMPX",46,0)
 I $G(PATSFRM0)="" S FROM(1)=LAST,FROM(2)=""
"RTN","QACVEMPX",47,0)
 E  S FROM(1)=PATSFRM0,FROM(2)=$G(PATSFRM1)
"RTN","QACVEMPX",48,0)
 S PART(1)=LAST
"RTN","QACVEMPX",49,0)
 I '$G(PATSROWS) S PATSROWS=10
"RTN","QACVEMPX",50,0)
 ; Return list of standard name pointer, title and mail code (IA #10060)
"RTN","QACVEMPX",51,0)
 D LIST^DIC(200,,"@;8;28","MP",PATSROWS,.FROM,.PART,"B",SCR)
"RTN","QACVEMPX",52,0)
 ; Set flag telling whether there are more entries to fetch).
"RTN","QACVEMPX",53,0)
 S PATSMORE=$S(FROM(1)="":0,1:1)
"RTN","QACVEMPX",54,0)
 Q
"RTN","QACVEMPX",55,0)
 ;
"RTN","QACVEMPX",56,0)
HDR ; Build header node
"RTN","QACVEMPX",57,0)
 S ^TMP("PatsPersonXml",$J,1)="<?xml version=""1.0"" encoding=""utf-8""?>"
"RTN","QACVEMPX",58,0)
 S ^TMP("PatsPersonXml",$J,2)="<PersonDataSet hasMore="""_PATSMORE_""" patsFrom0="""_FROM(1)_""" patsFrom1="""_FROM(2)_""" vistAError="""_PATSERR_""">"
"RTN","QACVEMPX",59,0)
 Q
"RTN","QACVEMPX",60,0)
 ;
"RTN","QACVEMPX",61,0)
EN2(OUTCNT) ; Build output for individual persons.
"RTN","QACVEMPX",62,0)
 N TAGLIST,IENS,TITLE,MAILCODE,NAMECOMP,I,J,X,Y
"RTN","QACVEMPX",63,0)
 ; Build list of XML tags to use in output.
"RTN","QACVEMPX",64,0)
 D BLDLST(.TAGLIST)
"RTN","QACVEMPX",65,0)
 ; Read through lister results and build output
"RTN","QACVEMPX",66,0)
 F I=0:0 S I=$O(^TMP("DILIST",$J,I)) Q:'I  S X=$G(^(I,0)) D
"RTN","QACVEMPX",67,0)
 . S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",68,0)
 . S ^TMP("PatsPersonXml",$J,OUTCNT)="<PatsPerson>"
"RTN","QACVEMPX",69,0)
 . S IENS=$P(X,"^") Q:IENS=""  S IENS=IENS_","
"RTN","QACVEMPX",70,0)
 . ; NOTE: does not remove reserved XML characters (see $$SYMENC^MXMLUTL, IA#4153)
"RTN","QACVEMPX",71,0)
 . S TITLE=$E($P(X,"^",2),1,30)
"RTN","QACVEMPX",72,0)
 . S MAILCODE=$E($P(X,"^",3),1,30)
"RTN","QACVEMPX",73,0)
 . ; Get the individual name components and add them to the output (IA #3065)
"RTN","QACVEMPX",74,0)
 . K NAMECOMP S NAMECOMP("FILE")=200,NAMECOMP("FIELD")=.01,NAMECOMP("IENS")=IENS
"RTN","QACVEMPX",75,0)
 . S NAMECOMP=$$HLNAME^XLFNAME(.NAMECOMP,"S")
"RTN","QACVEMPX",76,0)
 . F J=1:1:6 D
"RTN","QACVEMPX",77,0)
 .. S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",78,0)
 .. S Y=$P(NAMECOMP,"^",J)
"RTN","QACVEMPX",79,0)
 .. S ^TMP("PatsPersonXml",$J,OUTCNT)="<"_TAGLIST(J)_">"_Y_"</"_TAGLIST(J)_">"
"RTN","QACVEMPX",80,0)
 .. Q
"RTN","QACVEMPX",81,0)
 . S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",82,0)
 . S ^TMP("PatsPersonXml",$J,OUTCNT)="<Title>"_TITLE_"</Title>"
"RTN","QACVEMPX",83,0)
 . S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",84,0)
 . S ^TMP("PatsPersonXml",$J,OUTCNT)="<MailCode>"_MAILCODE_"</MailCode>"
"RTN","QACVEMPX",85,0)
 . S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",86,0)
 . S ^TMP("PatsPersonXml",$J,OUTCNT)="<VistaIen>"_$P(X,"^")_"</VistaIen>"
"RTN","QACVEMPX",87,0)
 . S OUTCNT=OUTCNT+1
"RTN","QACVEMPX",88,0)
 . S ^TMP("PatsPersonXml",$J,OUTCNT)="</PatsPerson>"
"RTN","QACVEMPX",89,0)
 . Q
"RTN","QACVEMPX",90,0)
 Q
"RTN","QACVEMPX",91,0)
 ;
"RTN","QACVEMPX",92,0)
FOOTER(OUTCNT) ; Add the footer
"RTN","QACVEMPX",93,0)
 S ^TMP("PatsPersonXml",$J,OUTCNT+1)="</PersonDataSet>"
"RTN","QACVEMPX",94,0)
 K ^TMP("DILIST",$J)
"RTN","QACVEMPX",95,0)
 Q
"RTN","QACVEMPX",96,0)
 ;
"RTN","QACVEMPX",97,0)
CONV(NAMEPART) ; Convert a name part to mixed case
"RTN","QACVEMPX",98,0)
 N LEN,TEMP,UPPER,I,X
"RTN","QACVEMPX",99,0)
 S LEN=$L(NAMEPART),UPPER=1,TEMP=""
"RTN","QACVEMPX",100,0)
 F I=1:1:LEN S X=$E(NAMEPART,I,I) D
"RTN","QACVEMPX",101,0)
 . I UPPER=1 D
"RTN","QACVEMPX",102,0)
 .. I X?1L S X=$C($A(X)-32)
"RTN","QACVEMPX",103,0)
 .. S UPPER=0 Q
"RTN","QACVEMPX",104,0)
 . E  I X?1U S X=$C($A(X)+32)
"RTN","QACVEMPX",105,0)
 . S TEMP=TEMP_X
"RTN","QACVEMPX",106,0)
 . I X'?1L,X'?1U S UPPER=1
"RTN","QACVEMPX",107,0)
 . Q
"RTN","QACVEMPX",108,0)
 Q TEMP
"RTN","QACVEMPX",109,0)
 ;
"RTN","QACVEMPX",110,0)
BLDLST(TAGLIST) ; Build list of XML data tags
"RTN","QACVEMPX",111,0)
 S TAGLIST(1)="LastName"
"RTN","QACVEMPX",112,0)
 S TAGLIST(2)="FirstName"
"RTN","QACVEMPX",113,0)
 S TAGLIST(3)="MiddleName"
"RTN","QACVEMPX",114,0)
 S TAGLIST(4)="NameSuffix"
"RTN","QACVEMPX",115,0)
 S TAGLIST(5)="NamePrefix"
"RTN","QACVEMPX",116,0)
 S TAGLIST(6)="Degree"
"RTN","QACVEMPX",117,0)
 Q
"RTN","QACVEMPX",118,0)
 ;
"RTN","QACVKHLD")
0^18^B5032982^n/a
"RTN","QACVKHLD",1,0)
QACVKHLD ; OAKOIFO/TKW - DATA MIGRATION - VISTALINK RPC CODE ;5/5/06  12:56
"RTN","QACVKHLD",2,0)
 ;;2.0;Patient Representative;**19**;07/25/1995;Build 55
"RTN","QACVKHLD",3,0)
EN(PATSLIST,PATSROWS,PATSFRM0,PATSFRM1) ; Called from ^QACVEMPX
"RTN","QACVKHLD",4,0)
 ; Read list of Security Key Names in PATSLIST, return a list
"RTN","QACVKHLD",5,0)
 ; of all people in NEW PERSON file who hold that key.
"RTN","QACVKHLD",6,0)
 N PATSKI,PATSKEY,KEYSCR,LSTNAME,LSTIEN,CURRDT,I,J,X,Y,Z
"RTN","QACVKHLD",7,0)
 S CURRDT=$$DT^XLFDT()
"RTN","QACVKHLD",8,0)
 I '$G(PATSROWS) S PATSROWS=10
"RTN","QACVKHLD",9,0)
 S PATSFRM0=$G(PATSFRM0),PATSFRM1=$G(PATSFRM1)
"RTN","QACVKHLD",10,0)
 K ^TMP("QACKHLD",$J)
"RTN","QACVKHLD",11,0)
 ; Build the list of people who hold one or more of the keys. The
"RTN","QACVKHLD",12,0)
 ; screen prevents us from looking up same person holding more than
"RTN","QACVKHLD",13,0)
 ; one of the keys in the list, and screens out terminated users.
"RTN","QACVKHLD",14,0)
 ; IA #10060
"RTN","QACVKHLD",15,0)
 S KEYSCR="I ($P(^(0),""^"",11)=""""!(CURRDT<$P(^(0),""^"",11))),'$D(^TMP(""QACKHLD"",$J,""IEN"",Y))"
"RTN","QACVKHLD",16,0)
 F PATSKI=0:0 S PATSKI=$O(PATSLIST(PATSKI)) Q:'PATSKI!($G(DIERR))  S PATSKEY=PATSLIST(PATSKI) D:PATSKEY]""
"RTN","QACVKHLD",17,0)
 . D FIND^DIC(200,,"@;.01I;8;28","X",PATSKEY,,"AB",.KEYSCR)
"RTN","QACVKHLD",18,0)
 . F I=0:0 S I=$O(^TMP("DILIST",$J,2,I)) Q:'I  S X=^(I) D
"RTN","QACVKHLD",19,0)
 .. S Y=$G(^TMP("DILIST",$J,"ID",I,.01))
"RTN","QACVKHLD",20,0)
 .. Q:'X!(Y="")
"RTN","QACVKHLD",21,0)
 .. ; Build list of IENs to use in FIND^DIC screen
"RTN","QACVKHLD",22,0)
 .. S ^TMP("QACKHLD",$J,"IEN",X)=""
"RTN","QACVKHLD",23,0)
 .. ; Build list of person data, ordered by name, IEN.
"RTN","QACVKHLD",24,0)
 .. S Z=X_"^"_$G(^TMP("DILIST",$J,"ID",I,8))_"^"_$G(^(28))
"RTN","QACVKHLD",25,0)
 .. S ^TMP("QACKHLD",$J,"NAME",Y,X)=Z
"RTN","QACVKHLD",26,0)
 .. Q
"RTN","QACVKHLD",27,0)
 . Q
"RTN","QACVKHLD",28,0)
 ; Now build output as if this came from a lister call. Sort the
"RTN","QACVKHLD",29,0)
 ; output by person NAME then IEN. PATSFRM0 is the ending name from
"RTN","QACVKHLD",30,0)
 ; the last call, PATSFRM1 is the last IEN (if the ending name in
"RTN","QACVKHLD",31,0)
 ; the previous call matches the first name in this one).
"RTN","QACVKHLD",32,0)
 K ^TMP("DILIST",$J)
"RTN","QACVKHLD",33,0)
 S Y=PATSFRM0,I=0,(LSTNAME,LSTIEN)=""
"RTN","QACVKHLD",34,0)
 I PATSFRM1 S Y=$O(^TMP("QACKHLD",$J,"NAME",PATSFRM0),-1)
"RTN","QACVKHLD",35,0)
 F  S Y=$O(^TMP("QACKHLD",$J,"NAME",Y)) Q:Y=""!(I>PATSROWS)  D
"RTN","QACVKHLD",36,0)
 . F X=+PATSFRM1:0 S X=$O(^TMP("QACKHLD",$J,"NAME",Y,X)) Q:'X!(I>PATSROWS)  S Z=^(X) D
"RTN","QACVKHLD",37,0)
 .. S I=I+1
"RTN","QACVKHLD",38,0)
 .. ; If we exceed the total number of rows to be output this time,
"RTN","QACVKHLD",39,0)
 .. ;  set FROM values as if we came from a LIST^DIC call.
"RTN","QACVKHLD",40,0)
 .. I I>PATSROWS D  Q
"RTN","QACVKHLD",41,0)
 ... S PATSFRM0=LSTNAME
"RTN","QACVKHLD",42,0)
 ... S PATSFRM1=$S(Y=LSTNAME:LSTIEN,1:"")
"RTN","QACVKHLD",43,0)
 .. S ^TMP("DILIST",$J,I,0)=Z
"RTN","QACVKHLD",44,0)
 .. S LSTNAME=Y,LSTIEN=X,(PATSFRM0,PATSFRM1)=""
"RTN","QACVKHLD",45,0)
 .. Q
"RTN","QACVKHLD",46,0)
 . Q
"RTN","QACVKHLD",47,0)
 K ^TMP("QACKHLD",$J)
"RTN","QACVKHLD",48,0)
 Q
"RTN","QACVKHLD",49,0)
 ;
"RTN","QACVKHLD",50,0)
 ;
"VER")
8.0^22.0
"BLD",6097,6)
^19
**END**
**END**
