Released XU*8*299 SEQ #307
Extracted from mail message
**KIDS**:XU*8.0*299^

**INSTALL NAME**
XU*8.0*299
"BLD",2212,0)
XU*8.0*299^KERNEL^0^3050426^y
"BLD",2212,4,0)
^9.64PA^4.001^1
"BLD",2212,4,4.001,0)
4.001
"BLD",2212,4,4.001,222)
y^y^f^^n^^y^o^n
"BLD",2212,4,"B",4.001,4.001)

"BLD",2212,"ABNS",0)
^9.66A^^
"BLD",2212,"ABPKG")
n^n
"BLD",2212,"INIT")
MAIN^XUMFPOST
"BLD",2212,"KRN",0)
^9.67PA^19^17
"BLD",2212,"KRN",.4,0)
.4
"BLD",2212,"KRN",.4,"NM",0)
^9.68A^^
"BLD",2212,"KRN",.401,0)
.401
"BLD",2212,"KRN",.402,0)
.402
"BLD",2212,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",2212,"KRN",.402,"NM",1,0)
XUMF MFP EDIT    FILE #4.001^4.001^0
"BLD",2212,"KRN",.402,"NM","B","XUMF MFP EDIT    FILE #4.001",1)

"BLD",2212,"KRN",.403,0)
.403
"BLD",2212,"KRN",.5,0)
.5
"BLD",2212,"KRN",.84,0)
.84
"BLD",2212,"KRN",3.6,0)
3.6
"BLD",2212,"KRN",3.8,0)
3.8
"BLD",2212,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",2212,"KRN",3.8,"NM",1,0)
XUMF ERROR^^0
"BLD",2212,"KRN",3.8,"NM","B","XUMF ERROR",1)

"BLD",2212,"KRN",9.2,0)
9.2
"BLD",2212,"KRN",9.8,0)
9.8
"BLD",2212,"KRN",9.8,"NM",0)
^9.68A^22^12
"BLD",2212,"KRN",9.8,"NM",9,0)
XUMFHPQ^^0^35776436
"BLD",2212,"KRN",9.8,"NM",10,0)
XUMFHPR^^0^13192564
"BLD",2212,"KRN",9.8,"NM",13,0)
XUMF299^^0^1677077
"BLD",2212,"KRN",9.8,"NM",14,0)
XUMFX^^0^35545449
"BLD",2212,"KRN",9.8,"NM",15,0)
XUMFXP^^0^17509486
"BLD",2212,"KRN",9.8,"NM",16,0)
XUMFXP1^^0^16832935
"BLD",2212,"KRN",9.8,"NM",17,0)
XUMFXP2^^0^11001670
"BLD",2212,"KRN",9.8,"NM",18,0)
XUMFXH^^0^95840639
"BLD",2212,"KRN",9.8,"NM",19,0)
XUMFXR^^0^10945367
"BLD",2212,"KRN",9.8,"NM",20,0)
XUMFXI^^0^66169929
"BLD",2212,"KRN",9.8,"NM",21,0)
XUMFXHL7^^0^6997687
"BLD",2212,"KRN",9.8,"NM",22,0)
XUMFXACK^^0^1046343
"BLD",2212,"KRN",9.8,"NM","B","XUMF299",13)

"BLD",2212,"KRN",9.8,"NM","B","XUMFHPQ",9)

"BLD",2212,"KRN",9.8,"NM","B","XUMFHPR",10)

"BLD",2212,"KRN",9.8,"NM","B","XUMFX",14)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXACK",22)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXH",18)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXHL7",21)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXI",20)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXP",15)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXP1",16)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXP2",17)

"BLD",2212,"KRN",9.8,"NM","B","XUMFXR",19)

"BLD",2212,"KRN",19,0)
19
"BLD",2212,"KRN",19,"NM",0)
^9.68A^^0
"BLD",2212,"KRN",19.1,0)
19.1
"BLD",2212,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",2212,"KRN",101,0)
101
"BLD",2212,"KRN",101,"NM",0)
^9.68A^15^8
"BLD",2212,"KRN",101,"NM",3,0)
XUMF MFP MFR^^0
"BLD",2212,"KRN",101,"NM",4,0)
XUMFX SERVER^^0
"BLD",2212,"KRN",101,"NM",10,0)
XUMF MFS^^0
"BLD",2212,"KRN",101,"NM",11,0)
XUMFX MFQ^^0
"BLD",2212,"KRN",101,"NM",12,0)
XUMFX MFR^^0
"BLD",2212,"KRN",101,"NM",13,0)
DS Pub Man~~L^^0
"BLD",2212,"KRN",101,"NM",14,0)
XUMF MFP MFQ^^0
"BLD",2212,"KRN",101,"NM",15,0)
DTS Term Srv~~L^^0
"BLD",2212,"KRN",101,"NM","B","DS Pub Man~~L",13)

"BLD",2212,"KRN",101,"NM","B","DTS Term Srv~~L",15)

"BLD",2212,"KRN",101,"NM","B","XUMF MFP MFQ",14)

"BLD",2212,"KRN",101,"NM","B","XUMF MFP MFR",3)

"BLD",2212,"KRN",101,"NM","B","XUMF MFS",10)

"BLD",2212,"KRN",101,"NM","B","XUMFX MFQ",11)

"BLD",2212,"KRN",101,"NM","B","XUMFX MFR",12)

"BLD",2212,"KRN",101,"NM","B","XUMFX SERVER",4)

"BLD",2212,"KRN",409.61,0)
409.61
"BLD",2212,"KRN",771,0)
771
"BLD",2212,"KRN",771,"NM",0)
^9.68A^8^8
"BLD",2212,"KRN",771,"NM",1,0)
XUMF MFP MFQ^^0
"BLD",2212,"KRN",771,"NM",2,0)
XUMF MFP MFR^^0
"BLD",2212,"KRN",771,"NM",3,0)
DS Pub Man~~L^^0
"BLD",2212,"KRN",771,"NM",4,0)
XUMF MFS^^0
"BLD",2212,"KRN",771,"NM",5,0)
XUMFX MFQ^^0
"BLD",2212,"KRN",771,"NM",6,0)
XUMFX MFR^^0
"BLD",2212,"KRN",771,"NM",7,0)
XUMFX SERVER^^0
"BLD",2212,"KRN",771,"NM",8,0)
DTS Term Srv~~L^^0
"BLD",2212,"KRN",771,"NM","B","DS Pub Man~~L",3)

"BLD",2212,"KRN",771,"NM","B","DTS Term Srv~~L",8)

"BLD",2212,"KRN",771,"NM","B","XUMF MFP MFQ",1)

"BLD",2212,"KRN",771,"NM","B","XUMF MFP MFR",2)

"BLD",2212,"KRN",771,"NM","B","XUMF MFS",4)

"BLD",2212,"KRN",771,"NM","B","XUMFX MFQ",5)

"BLD",2212,"KRN",771,"NM","B","XUMFX MFR",6)

"BLD",2212,"KRN",771,"NM","B","XUMFX SERVER",7)

"BLD",2212,"KRN",870,0)
870
"BLD",2212,"KRN",870,"NM",0)
^9.68A^1^1
"BLD",2212,"KRN",870,"NM",1,0)
XUMF ACK^^0
"BLD",2212,"KRN",870,"NM","B","XUMF ACK",1)

"BLD",2212,"KRN",8994,0)
8994
"BLD",2212,"KRN","B",.4,.4)

"BLD",2212,"KRN","B",.401,.401)

"BLD",2212,"KRN","B",.402,.402)

"BLD",2212,"KRN","B",.403,.403)

"BLD",2212,"KRN","B",.5,.5)

"BLD",2212,"KRN","B",.84,.84)

"BLD",2212,"KRN","B",3.6,3.6)

"BLD",2212,"KRN","B",3.8,3.8)

"BLD",2212,"KRN","B",9.2,9.2)

"BLD",2212,"KRN","B",9.8,9.8)

"BLD",2212,"KRN","B",19,19)

"BLD",2212,"KRN","B",19.1,19.1)

"BLD",2212,"KRN","B",101,101)

"BLD",2212,"KRN","B",409.61,409.61)

"BLD",2212,"KRN","B",771,771)

"BLD",2212,"KRN","B",870,870)

"BLD",2212,"KRN","B",8994,8994)

"BLD",2212,"QUES",0)
^9.62^^
"BLD",2212,"REQB",0)
^9.611^1^1
"BLD",2212,"REQB",1,0)
XU*8.0*261^0
"BLD",2212,"REQB","B","XU*8.0*261",1)

"DATA",4.001,4.001,0)
4.001^ZZZ^ZMF^NULL^NULL^158
"DATA",4.001,4.001,1,0)
^4.011^20^20
"DATA",4.001,4.001,1,1,0)
masterFile^.01^4^^^^
"DATA",4.001,4.001,1,2,0)
segmentName^.02^1^^^^
"DATA",4.001,4.001,1,3,0)
mfiCode^.03^1^^^^
"DATA",4.001,4.001,1,4,0)
preUpdateRoutine^.04^1^^^^
"DATA",4.001,4.001,1,5,0)
postUpdateRoutine^.05^1^^^^
"DATA",4.001,4.001,1,6,0)
mfeIdField^4.1^4^^^^
"DATA",4.001,4.001,1,7,0)
mfeTextField^4.2^4^^^^
"DATA",4.001,4.001,1,8,0)
mfeCodSys^4.3^1^^^^
"DATA",4.001,4.001,1,9,0)
mfeAltIdField^4.4^4^^^^
"DATA",4.001,4.001,1,10,0)
mfeAltTextField^4.5^4^^^^
"DATA",4.001,4.001,1,11,0)
mfeAltCodSys^4.6^1^^^^
"DATA",4.001,4.001,1,12,0)
mfePkvType^4.7^1^^^^
"DATA",4.001,4.001,1,13,0)
mfePkvXref^4.8^1^^^^
"DATA",4.001,4.001,1,14,0)
assigningAuthority^4.9^1^^^^
"DATA",4.001,4.001,1,15,0)
mfeIdType^4.11^1^^^^
"DATA",4.001,4.001,1,16,0)
mfeTextType^4.12^1^^^^
"DATA",4.001,4.001,1,17,0)
mfeAltIdType^4.14^1^^^^
"DATA",4.001,4.001,1,18,0)
mfeAltTextType^4.15^1^^^^
"DATA",4.001,4.001,1,19,0)
mfePreUpdateRoutine^4.16^1^^^^
"DATA",4.001,4.001,1,20,0)
mfePostUpdateRoutine^4.17^1^^^^
"DATA",4.001,4.001,"MFE")
.01^.02^B^.01^.02^VA^CE^B^ISS^^1^1^^1^1^NULL^MFP
"DATA",4.001,120.51,0)
120.51^RDT^GMRV Vital Type^PRE^POST^191
"DATA",4.001,120.51,1,0)
^4.011^9^8
"DATA",4.001,120.51,1,2,0)
name^.01^1^^^^^^50
"DATA",4.001,120.51,1,3,0)
abbreviation^1^1^^^^^^5
"DATA",4.001,120.51,1,4,0)
rate^3^4^^^^^^1
"DATA",4.001,120.51,1,5,0)
rateInputTransform^4^1^^^^^^99
"DATA",4.001,120.51,1,6,0)
rateHelp^5^1^^^^^^30
"DATA",4.001,120.51,1,7,0)
pceAbbreviation^7^1^^^^^^10
"DATA",4.001,120.51,1,8,0)
effectiveDate^.01^5^120.5199^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.51,1,9,0)
status^.02^4^120.5199^^effectiveDate^^^1
"DATA",4.001,120.51,2)
D MFSUP^HDISVF09(120.51,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.51,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.52,0)
120.52^RDT^GMRV Vital Qualifier^PRE^POST^191
"DATA",4.001,120.52,1,0)
^4.011^7^6
"DATA",4.001,120.52,1,2,0)
qualifier^.01^1^^^^^^50
"DATA",4.001,120.52,1,3,0)
synonym^.02^1^^^^^^3
"DATA",4.001,120.52,1,4,0)
vitalType^.01^1^120.521^^vitalType^^^50^^0^1^VUID
"DATA",4.001,120.52,1,5,0)
category^.02^1^120.521^^vitalType^^^40^^^^VUID
"DATA",4.001,120.52,1,6,0)
effectiveDate^.01^5^120.5299^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.52,1,7,0)
status^.02^4^120.5299^^effectiveDate^^^1
"DATA",4.001,120.52,2)
D MFSUP^HDISVF09(120.52,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.52,"MFE")
99.99^.01^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"DATA",4.001,120.53,0)
120.53^RDT^GMRV Vital Category^PRE^POST
"DATA",4.001,120.53,1,0)
^4.011^9^8
"DATA",4.001,120.53,1,2,0)
category^.01^1^^^^^^40
"DATA",4.001,120.53,1,3,0)
vitalType^.01^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,4,0)
maximumEntries^.03^4^120.531^^vitalType^^^2
"DATA",4.001,120.53,1,5,0)
printOrder^.05^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,6,0)
editOrder^.06^4^120.531^^vitalType^^^1
"DATA",4.001,120.53,1,7,0)
defaultQualifier^.07^1^120.531^^vitalType^^^50^^^^VUID
"DATA",4.001,120.53,1,8,0)
effectiveDate^.01^5^120.5399^^effectiveDate^^^8^^^^^L
"DATA",4.001,120.53,1,9,0)
status^.02^4^120.5399^^effectiveDate^^^1
"DATA",4.001,120.53,2)
D MFSUP^HDISVF09(120.53,$G(ERROR)),EN^GMVUID($G(ERROR))
"DATA",4.001,120.53,"MFE")
99.99^vuid^ERT^.01^.01^VA^16^B^VA^^4^1^^1^1^NULL^NULL
"FIA",4.001)
MASTER FILE PARAMETERS
"FIA",4.001,0)
^DIC(4.001,
"FIA",4.001,0,0)
4.001P
"FIA",4.001,0,1)
y^y^f^^n^^y^o^n
"FIA",4.001,0,10)

"FIA",4.001,0,11)

"FIA",4.001,0,"RLRO")

"FIA",4.001,0,"VR")
8.0^XU
"FIA",4.001,4.001)
0
"FIA",4.001,4.011)
0
"INIT")
MAIN^XUMFPOST
"KRN",.402,1927,-1)
0^1
"KRN",.402,1927,0)
XUMF MFP EDIT^3050317.0722^@^4.001^^@^3050405
"KRN",.402,1927,"DIAB",1,0,4.001,1)
4.6;"ALT CODING SYSTEM";REQ
"KRN",.402,1927,"DIAB",2,0,4.001,0)
.03;REQ
"KRN",.402,1927,"DIAB",2,0,4.001,1)
4.7;REQ
"KRN",.402,1927,"DIAB",3,0,4.001,0)
.02;REQ
"KRN",.402,1927,"DIAB",3,0,4.001,1)
4.8;REQ
"KRN",.402,1927,"DIAB",4,1,4.011,0)
.02;REQ
"KRN",.402,1927,"DIAB",7,0,4.001,0)
4.1;"MFE ID FIELD";REQ
"KRN",.402,1927,"DIAB",8,0,4.001,0)
4.11;"MFE ID TYPE";REQ
"KRN",.402,1927,"DIAB",8,1,4.011,0)
.03;REQ
"KRN",.402,1927,"DIAB",9,0,4.001,0)
4.2;"MFE TEXT FIELD";REQ
"KRN",.402,1927,"DIAB",9,1,4.011,0)
.09;REQ
"KRN",.402,1927,"DIAB",10,0,4.001,0)
4.12;"MFE TEXT TYPE";REQ
"KRN",.402,1927,"DIAB",11,0,4.001,0)
4.3;"MFE ID CODING SYSTEM";REQ
"KRN",.402,1927,"DIAB",12,0,4.001,0)
4.4;"ALT ID FIELD";REQ
"KRN",.402,1927,"DIAB",13,0,4.001,0)
4.14;"ALT ID TYPE";REQ
"KRN",.402,1927,"DIAB",14,0,4.001,0)
4.5;"ALT TEXT FIELD";REQ
"KRN",.402,1927,"DIAB",15,0,4.001,0)
4.15;"ALT TEXT TYPE";REQ
"KRN",.402,1927,"DR",1,4.001)
.01;.03R~;.02R~;.04;.05;.06;4.1R~MFE ID FIELD~;4.11R~MFE ID TYPE~;4.2R~MFE TEXT FIELD~;4.12R~MFE TEXT TYPE~;4.3R~MFE ID CODING SYSTEM~;4.4R~ALT ID FIELD~;4.14R~ALT ID TYPE~;4.5R~ALT TEXT FIELD~;4.15R~ALT TEXT TYPE~;
"KRN",.402,1927,"DR",1,4.001,1)
4.6R~ALT CODING SYSTEM~;4.7R~;4.8R~;4.16;4.17;4.9;1;
"KRN",.402,1927,"DR",2,4.011)
.01;.04;S XUMFMIFN=X;.02R~;S XUMFFN=X;S:'$$PTR^XUMF($S($G(XUMFMIFN):$G(XUMFMIFN),1:DA(1)),X) Y=.03;.07;.03R~;.09R~;.13;.14;S:'$G(XUMFMIFN) Y="@1";.08;.06;S:X'="" Y="@1";.05;@1;K XUMFFN,XUMFMIFN;
"KRN",3.8,180,-1)
0^1
"KRN",3.8,180,0)
XUMF ERROR^PU^^^^0^
"KRN",3.8,180,2,0)
^3.801^1^1^3050405^^^^
"KRN",3.8,180,2,1,0)
This mail group receives messages related to the Master File Server.
"KRN",3.8,180,3)

"KRN",3.8,180,6,0)
^3.812^^0
"KRN",101,2391,-1)
0^4
"KRN",101,2391,0)
XUMFX SERVER^Master File Notification^^E^^^^^^^^
"KRN",101,2391,1,0)
^101.06^1^1^3041012^^^^
"KRN",101,2391,1,1,0)
This protocol is the Master File Notification event driver for the MFS.
"KRN",101,2391,4)
^^^
"KRN",101,2391,99)
59612,14644
"KRN",101,2391,770)
XUMFX SERVER^^MFN^M01^i^P^^^^2.4^MFK
"KRN",101,2391,771)

"KRN",101,2391,772)
D MAIN^XUMFXH
"KRN",101,2391,775,0)
^101.0775PA^1^1
"KRN",101,2391,775,1,0)
2485
"KRN",101,2391,775,1,"^")
XUMF MFS
"KRN",101,2473,-1)
0^14
"KRN",101,2473,0)
XUMF MFP MFQ^Master File Parameters Query^^E^^^^^^^^
"KRN",101,2473,1,0)
^101.06^1^1^3030930^^^^
"KRN",101,2473,1,1,0)
This protocol is Master File Parameters Query event driver for MFS.
"KRN",101,2473,99)
59612,14644
"KRN",101,2473,770)
XUMF MFP MFQ^^MFQ^M05^i^P^^^^2.3^MFR
"KRN",101,2473,772)
D MAIN^XUMFHPR
"KRN",101,2473,775,0)
^101.0775PA^1^1
"KRN",101,2473,775,1,0)
2474
"KRN",101,2473,775,1,"^")
XUMF MFP MFR
"KRN",101,2474,-1)
0^3
"KRN",101,2474,0)
XUMF MFP MFR^Master File Parameters Query Response^^S^^^^^^^^
"KRN",101,2474,1,0)
^101.06^2^2^3030930^^^^
"KRN",101,2474,1,1,0)
This protocol handles Master File Parameters query response messages 
"KRN",101,2474,1,2,0)
for the MFS.
"KRN",101,2474,99)
59612,14644
"KRN",101,2474,770)
^XUMF MFP MFR^MFQ^M05^i^P^^^^2.3^MFR^^i
"KRN",101,2474,771)
D MAIN^XUMFHPQ
"KRN",101,2474,773)
1^1^^1
"KRN",101,2474,774)
Q
"KRN",101,2485,-1)
0^10
"KRN",101,2485,0)
XUMF MFS^MFS handler^^S^^^^^^^^
"KRN",101,2485,1,0)
^101.06^2^2^3040928^^^^
"KRN",101,2485,1,1,0)
This protocol handles Master File Notification messages for
"KRN",101,2485,1,2,0)
the Master File Server mechanism.
"KRN",101,2485,99)
59805,28749
"KRN",101,2485,770)
^XUMF MFS^MFN^M01^^P^XUMF ACK^AL^AL^2.4^MFK^^i
"KRN",101,2485,771)
D MAIN^XUMFXH
"KRN",101,2485,773)
1^1^^1
"KRN",101,2485,774)
Q
"KRN",101,2486,-1)
0^11
"KRN",101,2486,0)
XUMFX MFQ^MFS query^^E^^^^^^^^
"KRN",101,2486,1,0)
^101.06^1^1^3030930^^^^
"KRN",101,2486,1,1,0)
This protocol is Master File Query event driver for the MFS.
"KRN",101,2486,99)
59807,42415
"KRN",101,2486,770)
XUMFX MFQ^^MFQ^M01^i^P^^^^2.4^MFR
"KRN",101,2486,772)
D MAIN^XUMFXH
"KRN",101,2486,775,0)
^101.0775PA^1^1
"KRN",101,2486,775,1,0)
2487
"KRN",101,2486,775,1,"^")
XUMFX MFR
"KRN",101,2487,-1)
0^12
"KRN",101,2487,0)
XUMFX MFR^MFS query response^^S^^^^^^^^
"KRN",101,2487,1,0)
^^1^1^3000222^^^^
"KRN",101,2487,1,1,0)
This protocol handles Master File Query messages for the Institution file.
"KRN",101,2487,99)
59807,42499
"KRN",101,2487,770)
^XUMFX MFR^MFQ^M01^i^P^^^^2.4^MFR^^i
"KRN",101,2487,771)
D MAIN^XUMFXH
"KRN",101,2487,773)
1^1^^1
"KRN",101,2487,774)
Q
"KRN",101,2488,-1)
0^13
"KRN",101,2488,0)
DS Pub Man~~L^Master File Notification^^E^^^^^^^^
"KRN",101,2488,1,0)
^101.06^1^1^3041012^^^^
"KRN",101,2488,1,1,0)
This protocol is the Master File Notification event driver for the MFS.
"KRN",101,2488,99)
59829,24729
"KRN",101,2488,770)
DS Pub Man~~L^^MFN^M01^i^P^^^^2.4^MFK
"KRN",101,2488,772)
D MAIN^XUMFXH
"KRN",101,2488,775,0)
^101.0775PA^1^1
"KRN",101,2488,775,1,0)
2485
"KRN",101,2488,775,1,"^")
XUMF MFS
"KRN",101,2489,-1)
0^15
"KRN",101,2489,0)
DTS Term Srv~~L^DTS TERMINOLOGY SERVER^^E^^^^^^^^
"KRN",101,2489,1,0)
^101.06^1^1^3041012^^^^
"KRN",101,2489,1,1,0)
This protocol is the Master File Notification event driver for the MFS.
"KRN",101,2489,99)
59946,21539
"KRN",101,2489,770)
DTS Term Srv~~L^^MFN^M01^i^P^^AL^AL^2.4^MFK
"KRN",101,2489,772)
D MAIN^XUMFXH
"KRN",101,2489,775,0)
^101.0775PA^1^1
"KRN",101,2489,775,1,0)
2485
"KRN",101,2489,775,1,"^")
XUMF MFS
"KRN",771,78,-1)
0^7
"KRN",771,78,0)
XUMFX SERVER^a^MFS^XUMF SERVER^^^USA
"KRN",771,78,"MSG",0)
^771.06P^1^1
"KRN",771,78,"MSG",1,0)
MSA
"KRN",771,78,"MSG",1,"R")
NONE
"KRN",771,78,"SEG",0)
^771.05P^1^1
"KRN",771,78,"SEG",1,0)
MSH
"KRN",771,78,"SEG",1,"F")
.01
"KRN",771,93,-1)
0^2
"KRN",771,93,0)
XUMF MFP MFR^a^MFP^XUMF ERROR^^^USA
"KRN",771,93,"MSG",0)
^771.06P^2^1
"KRN",771,93,"MSG",2,0)
ZTA
"KRN",771,93,"MSG",2,"R")
NONE
"KRN",771,93,"SEG",0)
^771.05P^1^1
"KRN",771,93,"SEG",1,0)
MSH
"KRN",771,93,"SEG",1,"F")
.01
"KRN",771,94,-1)
0^1
"KRN",771,94,0)
XUMF MFP MFQ^a^MFP^XUMF ERROR^^^USA
"KRN",771,94,"MSG",0)
^771.06P^1^1
"KRN",771,94,"MSG",1,0)
ZTA
"KRN",771,94,"MSG",1,"R")
NONE
"KRN",771,94,"SEG",0)
^771.05P^1^1
"KRN",771,94,"SEG",1,0)
MSH
"KRN",771,94,"SEG",1,"F")
.01
"KRN",771,96,-1)
0^4
"KRN",771,96,0)
XUMF MFS^a^MFS^XUMF SERVER^^^USA
"KRN",771,96,"MSG",0)
^771.06P^1^1
"KRN",771,96,"MSG",1,0)
MSA
"KRN",771,96,"MSG",1,"R")
NONE
"KRN",771,96,"SEG",0)
^771.05P^1^1
"KRN",771,96,"SEG",1,0)
MSH
"KRN",771,96,"SEG",1,"F")
.01
"KRN",771,97,-1)
0^5
"KRN",771,97,0)
XUMFX MFQ^a^MFS^XUMF SERVER^^^USA
"KRN",771,97,"MSG",0)
^771.06P^1^1
"KRN",771,97,"MSG",1,0)
ZTA
"KRN",771,97,"MSG",1,"R")
NONE
"KRN",771,97,"SEG",0)
^771.05P^1^1
"KRN",771,97,"SEG",1,0)
MSH
"KRN",771,97,"SEG",1,"F")
.01
"KRN",771,98,-1)
0^6
"KRN",771,98,0)
XUMFX MFR^a^MFS^XUMF SERVER^^^USA
"KRN",771,98,"MSG",0)
^771.06P^1^1
"KRN",771,98,"MSG",1,0)
MSA
"KRN",771,98,"MSG",1,"R")
NONE
"KRN",771,98,"SEG",0)
^771.05P^1^1
"KRN",771,98,"SEG",1,0)
MSH
"KRN",771,98,"SEG",1,"F")
.01
"KRN",771,99,-1)
0^3
"KRN",771,99,0)
DS Pub Man~~L^a^MFS^XUMF SERVER^^^USA
"KRN",771,99,"MSG",0)
^771.06P^1^1
"KRN",771,99,"MSG",1,0)
MSA
"KRN",771,99,"MSG",1,"R")
NONE
"KRN",771,99,"SEG",0)
^771.05P^1^1
"KRN",771,99,"SEG",1,0)
MSH
"KRN",771,99,"SEG",1,"F")
.01
"KRN",771,100,-1)
0^8
"KRN",771,100,0)
DTS Term Srv~~L^a^MFS^XUMF SERVER^^^USA
"KRN",771,100,"MSG",0)
^771.06P^1^1
"KRN",771,100,"MSG",1,0)
MSA
"KRN",771,100,"MSG",1,"R")
NONE
"KRN",771,100,"SEG",0)
^771.05P^1^1
"KRN",771,100,"SEG",1,0)
MSH
"KRN",771,100,"SEG",1,"F")
.01
"KRN",870,200,-1)
0^1
"KRN",870,200,0)
XUMF ACK^^TCP^^^^^^^^^^^^^^^^^^10
"KRN",870,200,200)
^5^^60^60^^^^^S
"KRN",870,200,400)
^8090^C^^^
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1
"ORD",11,3.8,0)
MAIL GROUP
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",113,-1)
1^1
"PKG",113,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^XUDOCV7 NEW FEATURES
"PKG",113,20,0)
^9.402P^^
"PKG",113,22,0)
^9.49I^1^1
"PKG",113,22,1,0)
8.0^2950703^2960322^648
"PKG",113,22,1,"PAH",1,0)
299^3050426^9147
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","XUMF299")
0^13^B1677077
"RTN","XUMF299",1,0)
XUMF299 ;ISS/RAM - Query Master File Parameters;04/15/02
"RTN","XUMF299",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMF299",3,0)
 ;
"RTN","XUMF299",4,0)
 ; $$PARAM^HLCS2 call supported by IA #3552
"RTN","XUMF299",5,0)
 ;
"RTN","XUMF299",6,0)
 Q
"RTN","XUMF299",7,0)
 ;
"RTN","XUMF299",8,0)
MAIN ; -- main
"RTN","XUMF299",9,0)
 ;
"RTN","XUMF299",10,0)
 N ZTRTN,ZTDESC,ZTDTH
"RTN","XUMF299",11,0)
 ;
"RTN","XUMF299",12,0)
 S ZTRTN="EN^XUMF299"
"RTN","XUMF299",13,0)
 S ZTDESC="XUMF query MFS for file parameters"
"RTN","XUMF299",14,0)
 S ZTDTH=$$NOW^XLFDT
"RTN","XUMF299",15,0)
 S ZTIO=""
"RTN","XUMF299",16,0)
 S ZTSAVE("IEN")=""
"RTN","XUMF299",17,0)
 S ZTSAVE("IFN")=""
"RTN","XUMF299",18,0)
 ;
"RTN","XUMF299",19,0)
 D ^%ZTLOAD
"RTN","XUMF299",20,0)
 ;
"RTN","XUMF299",21,0)
 Q
"RTN","XUMF299",22,0)
 ;
"RTN","XUMF299",23,0)
EN ; -- entry point
"RTN","XUMF299",24,0)
 ;
"RTN","XUMF299",25,0)
 N PARAM,ERROR,TEST
"RTN","XUMF299",26,0)
 ;
"RTN","XUMF299",27,0)
 S (ERROR,TEST)=0
"RTN","XUMF299",28,0)
 ;
"RTN","XUMF299",29,0)
 I $P($$PARAM^HLCS2,U,3)="T" S TEST=1
"RTN","XUMF299",30,0)
 ;
"RTN","XUMF299",31,0)
 ; -- get Master File Parameters
"RTN","XUMF299",32,0)
 ;
"RTN","XUMF299",33,0)
 S PARAM("LLNK")="XUMF MFP MFR^XUMF "_$S('TEST:"FORUM",1:"TEST")
"RTN","XUMF299",34,0)
 S PARAM("PROTOCOL")=$$FIND1^DIC(101,,"B","XUMF MFP MFQ")
"RTN","XUMF299",35,0)
 ;
"RTN","XUMF299",36,0)
 D MAIN^XUMFXP(4.001,IEN,5,.PARAM,.ERROR) Q:ERROR
"RTN","XUMF299",37,0)
 D MAIN^XUMFXI(4.001,IEN,5,.PARAM,.ERROR) Q:ERROR
"RTN","XUMF299",38,0)
 D MAIN^XUMFHPR
"RTN","XUMF299",39,0)
 ;
"RTN","XUMF299",40,0)
EXIT ; -- cleanup and quit
"RTN","XUMF299",41,0)
 ;
"RTN","XUMF299",42,0)
 K ^TMP("XUMF MFS",$J),^TMP("DIERR",$J)
"RTN","XUMF299",43,0)
 ;
"RTN","XUMF299",44,0)
 S ZTREQ="@"
"RTN","XUMF299",45,0)
 ;
"RTN","XUMF299",46,0)
 Q
"RTN","XUMF299",47,0)
 ;
"RTN","XUMFHPQ")
0^9^B35776436
"RTN","XUMFHPQ",1,0)
XUMFHPQ ;ISS/RAM - MFS param server-side handler ;06/28/00
"RTN","XUMFHPQ",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFHPQ",3,0)
 ;
"RTN","XUMFHPQ",4,0)
 Q
"RTN","XUMFHPQ",5,0)
 ;
"RTN","XUMFHPQ",6,0)
MAIN ; -- entry point
"RTN","XUMFHPQ",7,0)
 ;
"RTN","XUMFHPQ",8,0)
 N CNT,ERR,I,X,HLFS,HLCS,ERROR,HLRESLTA,IFN,IEN,TYPE
"RTN","XUMFHPQ",9,0)
 N VALUE,PARAM,ROOT,SEG,HLSCS,MTYP
"RTN","XUMFHPQ",10,0)
 ;
"RTN","XUMFHPQ",11,0)
 D INIT,PROCESS,RESPONSE,SEND,EXIT
"RTN","XUMFHPQ",12,0)
 ;
"RTN","XUMFHPQ",13,0)
 Q
"RTN","XUMFHPQ",14,0)
 ;
"RTN","XUMFHPQ",15,0)
INIT ; -- initialize
"RTN","XUMFHPQ",16,0)
 ;
"RTN","XUMFHPQ",17,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMFHPQ",18,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFHPQ",19,0)
 ;
"RTN","XUMFHPQ",20,0)
 S ERROR=0,CNT=1,MTYP="HLA"
"RTN","XUMFHPQ",21,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH")),HLSCS=$E(HL("ECH"),4)
"RTN","XUMFHPQ",22,0)
 ;
"RTN","XUMFHPQ",23,0)
 Q
"RTN","XUMFHPQ",24,0)
 ;
"RTN","XUMFHPQ",25,0)
PROCESS ; -- pull message text
"RTN","XUMFHPQ",26,0)
 ;
"RTN","XUMFHPQ",27,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFHPQ",28,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFHPQ",29,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFHPQ",30,0)
 ;
"RTN","XUMFHPQ",31,0)
 Q
"RTN","XUMFHPQ",32,0)
 ;
"RTN","XUMFHPQ",33,0)
MSH ; -- MSH segment
"RTN","XUMFHPQ",34,0)
 ;
"RTN","XUMFHPQ",35,0)
 Q
"RTN","XUMFHPQ",36,0)
 ;
"RTN","XUMFHPQ",37,0)
MSA ; -- MSA segment
"RTN","XUMFHPQ",38,0)
 ;
"RTN","XUMFHPQ",39,0)
 N CODE
"RTN","XUMFHPQ",40,0)
 ;
"RTN","XUMFHPQ",41,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMFHPQ",42,0)
 ;
"RTN","XUMFHPQ",43,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMFHPQ",44,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMFHPQ",45,0)
 .D EM^XUMFHPR(ERROR,.ERR)
"RTN","XUMFHPQ",46,0)
 ;
"RTN","XUMFHPQ",47,0)
 Q
"RTN","XUMFHPQ",48,0)
 ;
"RTN","XUMFHPQ",49,0)
QRD ; -- QRD segment
"RTN","XUMFHPQ",50,0)
 ;
"RTN","XUMFHPQ",51,0)
 Q:ERROR
"RTN","XUMFHPQ",52,0)
 ;
"RTN","XUMFHPQ",53,0)
 N WHO,WHAT
"RTN","XUMFHPQ",54,0)
 ;
"RTN","XUMFHPQ",55,0)
 S WHO=$P(HLNODE,HLFS,9)
"RTN","XUMFHPQ",56,0)
 I WHO="" D  Q
"RTN","XUMFHPQ",57,0)
 .S ERROR="1^QRD segment has null missing WHO parameter"
"RTN","XUMFHPQ",58,0)
 .D EM^XUMFHPR(ERROR,.ERR)
"RTN","XUMFHPQ",59,0)
 S WHAT=$P(HLNODE,HLFS,10)
"RTN","XUMFHPQ",60,0)
 I WHAT="" D  Q
"RTN","XUMFHPQ",61,0)
 .S ERROR="1^QRD segment has null missing WHAT parameter"
"RTN","XUMFHPQ",62,0)
 .D EM^XUMFHPR(ERROR,.ERR)
"RTN","XUMFHPQ",63,0)
 ;
"RTN","XUMFHPQ",64,0)
 S IFN=+WHAT
"RTN","XUMFHPQ",65,0)
 I IFN'=4.001 S ERROR="1^QRD segment invalid WHAT for protocol" Q
"RTN","XUMFHPQ",66,0)
 ;
"RTN","XUMFHPQ",67,0)
 S IEN=$$FIND1^DIC(4.001,,"B",$P(WHO,HLCS))
"RTN","XUMFHPQ",68,0)
 ;
"RTN","XUMFHPQ",69,0)
 I 'IEN D  Q
"RTN","XUMFHPQ",70,0)
 .S ERROR="1^"_$P(WHO,HLCS)_" not a supported master file"
"RTN","XUMFHPQ",71,0)
 ;
"RTN","XUMFHPQ",72,0)
 Q
"RTN","XUMFHPQ",73,0)
 ;
"RTN","XUMFHPQ",74,0)
 ;
"RTN","XUMFHPQ",75,0)
RESPONSE ;  -- build MFR
"RTN","XUMFHPQ",76,0)
 ;
"RTN","XUMFHPQ",77,0)
 D INI1,MSA1,QRD1,MFI1,MFE1,ZZZ1,ZZS1
"RTN","XUMFHPQ",78,0)
 ;
"RTN","XUMFHPQ",79,0)
 Q
"RTN","XUMFHPQ",80,0)
 ;
"RTN","XUMFHPQ",81,0)
INI1 ; -- initialize
"RTN","XUMFHPQ",82,0)
 ;
"RTN","XUMFHPQ",83,0)
 Q:ERROR
"RTN","XUMFHPQ",84,0)
 ;
"RTN","XUMFHPQ",85,0)
 D MAIN^XUMFXP(IFN,IEN,11,.PARAM,.ERROR)
"RTN","XUMFHPQ",86,0)
 I $G(ERROR) D
"RTN","XUMFHPQ",87,0)
 .S ERROR="1error INI1 of XUMFHPQ"
"RTN","XUMFHPQ",88,0)
 .D EM^XUMFHPR(ERROR,.ERR)
"RTN","XUMFHPQ",89,0)
 ;
"RTN","XUMFHPQ",90,0)
 Q
"RTN","XUMFHPQ",91,0)
 ;
"RTN","XUMFHPQ",92,0)
MSA1 ; - ACK 
"RTN","XUMFHPQ",93,0)
 ;
"RTN","XUMFHPQ",94,0)
 S ^TMP(MTYP,$J,CNT)="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")
"RTN","XUMFHPQ",95,0)
 S CNT=CNT+1
"RTN","XUMFHPQ",96,0)
 ;
"RTN","XUMFHPQ",97,0)
 Q
"RTN","XUMFHPQ",98,0)
 ;
"RTN","XUMFHPQ",99,0)
QRD1 ; -- query definition segment
"RTN","XUMFHPQ",100,0)
 ;
"RTN","XUMFHPQ",101,0)
 Q:ERROR
"RTN","XUMFHPQ",102,0)
 ;
"RTN","XUMFHPQ",103,0)
 N QDT,QFC,QP,QID,ZDRT,ZDRDT,QLR,WHO,WHAT,WDDC,WDCVQ,QRL,QRD
"RTN","XUMFHPQ",104,0)
 ;
"RTN","XUMFHPQ",105,0)
 S QDT=$G(^TMP("XUMF MFS",$J,"PARAM","QDT"))
"RTN","XUMFHPQ",106,0)
 S QFC=$G(^TMP("XUMF MFS",$J,"PARAM","QFC"))
"RTN","XUMFHPQ",107,0)
 S QP=$G(^TMP("XUMF MFS",$J,"PARAM","QP"))
"RTN","XUMFHPQ",108,0)
 S QID=$G(^TMP("XUMF MFS",$J,"PARAM","QID"))
"RTN","XUMFHPQ",109,0)
 S ZDRT=$G(^TMP("XUMF MFS",$J,"PARAM","DRT"))
"RTN","XUMFHPQ",110,0)
 S ZDRDT=$G(^TMP("XUMF MFS",$J,"PARAM","DRDT"))
"RTN","XUMFHPQ",111,0)
 S QLR=$G(^TMP("XUMF MFS",$J,"PARAM","QLR"))
"RTN","XUMFHPQ",112,0)
 S WHO=$G(^TMP("XUMF MFS",$J,"PARAM","WHO"))
"RTN","XUMFHPQ",113,0)
 S WHAT=$G(^TMP("XUMF MFS",$J,"PARAM","WHAT"))
"RTN","XUMFHPQ",114,0)
 S WDDC=$G(^TMP("XUMF MFS",$J,"PARAM","WDDC"))
"RTN","XUMFHPQ",115,0)
 S WDCVQ=$G(^TMP("XUMF MFS",$J,"PARAM","WDCVQ"))
"RTN","XUMFHPQ",116,0)
 S QRL=$G(^TMP("XUMF MFS",$J,"PARAM","QRL"))
"RTN","XUMFHPQ",117,0)
 S QRD="QRD"_HLFS_QDT_HLFS_QFC_HLFS_QP_HLFS_QID_HLFS_ZDRT_HLFS_ZDRDT
"RTN","XUMFHPQ",118,0)
 S QRD=QRD_HLFS_QLR_HLFS_WHO_HLFS_WHAT_HLFS_WDDC_HLFS_WDCVQ_HLFS_QRL
"RTN","XUMFHPQ",119,0)
 S ^TMP(MTYP,$J,CNT)=QRD
"RTN","XUMFHPQ",120,0)
 S CNT=CNT+1
"RTN","XUMFHPQ",121,0)
 ;
"RTN","XUMFHPQ",122,0)
 Q
"RTN","XUMFHPQ",123,0)
 ;
"RTN","XUMFHPQ",124,0)
MFI1 ; master file identifier segment
"RTN","XUMFHPQ",125,0)
 ;
"RTN","XUMFHPQ",126,0)
 Q:ERROR
"RTN","XUMFHPQ",127,0)
 ;
"RTN","XUMFHPQ",128,0)
 N ID,APP,EVENT,ENDT,EFFDT,RESP,MFI
"RTN","XUMFHPQ",129,0)
 ;
"RTN","XUMFHPQ",130,0)
 S ID=$G(^TMP("XUMF MFS",$J,"PARAM","MFI"))
"RTN","XUMFHPQ",131,0)
 S APP=$G(^TMP("XUMF MFS",$J,"PARAM","MFAI"))
"RTN","XUMFHPQ",132,0)
 S EVENT=$G(^TMP("XUMF MFS",$J,"PARAM","FLEV"))
"RTN","XUMFHPQ",133,0)
 S ENDT=$G(^TMP("XUMF MFS",$J,"PARAM","ENDT"))
"RTN","XUMFHPQ",134,0)
 S EFFDT=$G(^TMP("XUMF MFS",$J,"PARAM","MFIEDT"))
"RTN","XUMFHPQ",135,0)
 S RESP=$G(^TMP("XUMF MFS",$J,"PARAM","RLC"))
"RTN","XUMFHPQ",136,0)
 S:APP="" APP="MFS" S:EVENT="" EVENT="REP" S:RESP="" RESP="NE"
"RTN","XUMFHPQ",137,0)
 S:ENDT="" ENDT=$$NOW^XLFDT S:EFFDT="" EFFDT=$$NOW^XLFDT
"RTN","XUMFHPQ",138,0)
 S MFI=$$MFI^XUMFMFI(ID,APP,EVENT,ENDT,EFFDT,RESP)
"RTN","XUMFHPQ",139,0)
 I $E(MFI)="-" S ERROR=MFI Q
"RTN","XUMFHPQ",140,0)
 S ^TMP(MTYP,$J,CNT)=MFI
"RTN","XUMFHPQ",141,0)
 S CNT=CNT+1
"RTN","XUMFHPQ",142,0)
 ;
"RTN","XUMFHPQ",143,0)
 Q
"RTN","XUMFHPQ",144,0)
 ;
"RTN","XUMFHPQ",145,0)
MFE1 ; master file entry segment
"RTN","XUMFHPQ",146,0)
 ;
"RTN","XUMFHPQ",147,0)
 Q:ERROR
"RTN","XUMFHPQ",148,0)
 ;
"RTN","XUMFHPQ",149,0)
 N EVENT,MFN,EDT,CODE,MFE
"RTN","XUMFHPQ",150,0)
 ;
"RTN","XUMFHPQ",151,0)
 S EVENT=$G(^TMP("XUMF MFS",$J,"PARAM","RLEC"))
"RTN","XUMFHPQ",152,0)
 S MFN=$G(^TMP("XUMF MFS",$J,"PARAM","MFNCID"))
"RTN","XUMFHPQ",153,0)
 S EDT=$G(^TMP("XUMF MFS",$J,"PARAM","MFEEDT"))
"RTN","XUMFHPQ",154,0)
 S CODE=$G(^TMP("XUMF MFS",$J,"PARAM","PKV"))
"RTN","XUMFHPQ",155,0)
 S:EDT="" EDT=$$NOW^XLFDT S:EVENT="" EVENT="MAD"
"RTN","XUMFHPQ",156,0)
 S MFE=$$MFE^XUMFMFE(EVENT,MFN,EDT,CODE)
"RTN","XUMFHPQ",157,0)
 I $E(MFE)="-" S ERROR=MFE Q
"RTN","XUMFHPQ",158,0)
 S ^TMP(MTYP,$J,CNT)=MFE
"RTN","XUMFHPQ",159,0)
 S CNT=CNT+1
"RTN","XUMFHPQ",160,0)
 ;
"RTN","XUMFHPQ",161,0)
 Q
"RTN","XUMFHPQ",162,0)
 ;
"RTN","XUMFHPQ",163,0)
ZZZ1 ; ZZZ segment
"RTN","XUMFHPQ",164,0)
 ;
"RTN","XUMFHPQ",165,0)
 Q:ERROR
"RTN","XUMFHPQ",166,0)
 ;
"RTN","XUMFHPQ",167,0)
 N NODE,SEQ,VALUE,FIELD
"RTN","XUMFHPQ",168,0)
 ;
"RTN","XUMFHPQ",169,0)
 S NODE=""
"RTN","XUMFHPQ",170,0)
 ;
"RTN","XUMFHPQ",171,0)
 ;zero node
"RTN","XUMFHPQ",172,0)
 F SEQ=1:1:6 D
"RTN","XUMFHPQ",173,0)
 .S FIELD=".0"_SEQ
"RTN","XUMFHPQ",174,0)
 .S VALUE=$$GET1^DIQ(4.001,IEN_",",FIELD)
"RTN","XUMFHPQ",175,0)
 .S $P(NODE,HLFS,SEQ)=VALUE
"RTN","XUMFHPQ",176,0)
 ;
"RTN","XUMFHPQ",177,0)
 ;mfe node
"RTN","XUMFHPQ",178,0)
 F SEQ=1:1:9 D
"RTN","XUMFHPQ",179,0)
 .S FIELD="4."_SEQ
"RTN","XUMFHPQ",180,0)
 .S VALUE=$$GET1^DIQ(4.001,IEN_",",FIELD)
"RTN","XUMFHPQ",181,0)
 .S $P(NODE,HLFS,SEQ+6)=VALUE
"RTN","XUMFHPQ",182,0)
 F SEQ=1,2,4:1:7 D
"RTN","XUMFHPQ",183,0)
 .S FIELD="4.1"_SEQ
"RTN","XUMFHPQ",184,0)
 .S VALUE=$$GET1^DIQ(4.001,IEN_",",FIELD)
"RTN","XUMFHPQ",185,0)
 .S $P(NODE,HLFS,SEQ+15)=VALUE
"RTN","XUMFHPQ",186,0)
 ;
"RTN","XUMFHPQ",187,0)
 S ^TMP(MTYP,$J,CNT)="ZMF"_HLFS_NODE
"RTN","XUMFHPQ",188,0)
 S CNT=CNT+1
"RTN","XUMFHPQ",189,0)
 ;
"RTN","XUMFHPQ",190,0)
 Q
"RTN","XUMFHPQ",191,0)
 ;
"RTN","XUMFHPQ",192,0)
ZZS1 ; - ZZS segment
"RTN","XUMFHPQ",193,0)
 ;
"RTN","XUMFHPQ",194,0)
 Q:ERROR
"RTN","XUMFHPQ",195,0)
 ;
"RTN","XUMFHPQ",196,0)
 N IDX,FLD,VALUE,NODE
"RTN","XUMFHPQ",197,0)
 ;
"RTN","XUMFHPQ",198,0)
 S IDX=0
"RTN","XUMFHPQ",199,0)
 F  S IDX=$O(^DIC(4.001,IEN,1,IDX)) Q:'IDX  D
"RTN","XUMFHPQ",200,0)
 .S IENS=IDX_","_IEN_",",NODE=""
"RTN","XUMFHPQ",201,0)
 .F I=1:1:9 D
"RTN","XUMFHPQ",202,0)
 ..S FLD=".0"_I
"RTN","XUMFHPQ",203,0)
 ..S VALUE=$$GET1^DIQ(4.011,IENS,FLD)
"RTN","XUMFHPQ",204,0)
 ..S $P(NODE,HLFS,I)=VALUE
"RTN","XUMFHPQ",205,0)
 .;
"RTN","XUMFHPQ",206,0)
 .S NODE="ZZS"_HLFS_NODE
"RTN","XUMFHPQ",207,0)
 .S ^TMP(MTYP,$J,CNT)=NODE
"RTN","XUMFHPQ",208,0)
 .S CNT=CNT+1
"RTN","XUMFHPQ",209,0)
 ;
"RTN","XUMFHPQ",210,0)
 Q
"RTN","XUMFHPQ",211,0)
 ;
"RTN","XUMFHPQ",212,0)
SEND ; -- send HL7 message
"RTN","XUMFHPQ",213,0)
 ;
"RTN","XUMFHPQ",214,0)
 S HLP("PRIORITY")="I"
"RTN","XUMFHPQ",215,0)
 ;
"RTN","XUMFHPQ",216,0)
 D GENACK^HLMA1(HL("EID"),HLMTIENS,HL("EIDS"),"GM",1,.HLRESLT)
"RTN","XUMFHPQ",217,0)
 ;
"RTN","XUMFHPQ",218,0)
 ; check for error
"RTN","XUMFHPQ",219,0)
 I ($P($G(HLRESLT),U,3)'="") D  Q
"RTN","XUMFHPQ",220,0)
 .S ERROR=1_U_$P(HLRESLT,HLFS,3)_U_$P(HLRESLT,HLFS,2)_U_$P(HLRESLT,U)
"RTN","XUMFHPQ",221,0)
 ;
"RTN","XUMFHPQ",222,0)
 ; successful call, message ID returned
"RTN","XUMFHPQ",223,0)
 S ERROR="0^"_$P($G(HLRESLT),U,1)
"RTN","XUMFHPQ",224,0)
 ;
"RTN","XUMFHPQ",225,0)
 Q
"RTN","XUMFHPQ",226,0)
 ;
"RTN","XUMFHPQ",227,0)
EXIT ; -- exit
"RTN","XUMFHPQ",228,0)
 ;
"RTN","XUMFHPQ",229,0)
 D CLEAN^DILF
"RTN","XUMFHPQ",230,0)
 ;
"RTN","XUMFHPQ",231,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFHPQ",232,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFHPQ",233,0)
 ;
"RTN","XUMFHPQ",234,0)
 Q
"RTN","XUMFHPQ",235,0)
 ;
"RTN","XUMFHPR")
0^10^B13192564
"RTN","XUMFHPR",1,0)
XUMFHPR ;OIFO-OAK/RAM - Master File Parameters client Handler ;06/28/00
"RTN","XUMFHPR",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFHPR",3,0)
 ;
"RTN","XUMFHPR",4,0)
 ; This routine handles Master File Parameters file updates.
"RTN","XUMFHPR",5,0)
 ;
"RTN","XUMFHPR",6,0)
MAIN ; -- entry point
"RTN","XUMFHPR",7,0)
 ;
"RTN","XUMFHPR",8,0)
 N ERR,HLFS,HLCS,ERROR,IEN,KEY,MID,REASON,VALUE
"RTN","XUMFHPR",9,0)
 ;
"RTN","XUMFHPR",10,0)
 D INIT,PROCESS,EXIT
"RTN","XUMFHPR",11,0)
 ;
"RTN","XUMFHPR",12,0)
 Q
"RTN","XUMFHPR",13,0)
 ;
"RTN","XUMFHPR",14,0)
INIT ; -- initialize
"RTN","XUMFHPR",15,0)
 ;
"RTN","XUMFHPR",16,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMFHPR",17,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFHPR",18,0)
 ;
"RTN","XUMFHPR",19,0)
 S ERROR=0,HLFS=HL("FS"),HLCS=$E(HL("ECH"))
"RTN","XUMFHPR",20,0)
 ;
"RTN","XUMFHPR",21,0)
 Q
"RTN","XUMFHPR",22,0)
 ;
"RTN","XUMFHPR",23,0)
PROCESS ; -- pull message text
"RTN","XUMFHPR",24,0)
 ;
"RTN","XUMFHPR",25,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFHPR",26,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFHPR",27,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFHPR",28,0)
 ;
"RTN","XUMFHPR",29,0)
 Q
"RTN","XUMFHPR",30,0)
 ;
"RTN","XUMFHPR",31,0)
MSH ; -- MSH segment
"RTN","XUMFHPR",32,0)
 ;
"RTN","XUMFHPR",33,0)
 Q
"RTN","XUMFHPR",34,0)
 ;
"RTN","XUMFHPR",35,0)
MSA ; -- MSA segment
"RTN","XUMFHPR",36,0)
 ;
"RTN","XUMFHPR",37,0)
 N CODE
"RTN","XUMFHPR",38,0)
 ;
"RTN","XUMFHPR",39,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMFHPR",40,0)
 ;
"RTN","XUMFHPR",41,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMFHPR",42,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMFHPR",43,0)
 .D EM(ERROR,.ERR)
"RTN","XUMFHPR",44,0)
 ;
"RTN","XUMFHPR",45,0)
 Q
"RTN","XUMFHPR",46,0)
 ;
"RTN","XUMFHPR",47,0)
QRD ; -- QRD segment
"RTN","XUMFHPR",48,0)
 ;
"RTN","XUMFHPR",49,0)
 Q
"RTN","XUMFHPR",50,0)
 ;
"RTN","XUMFHPR",51,0)
MFI ; -- MFI segment
"RTN","XUMFHPR",52,0)
 ;
"RTN","XUMFHPR",53,0)
 Q
"RTN","XUMFHPR",54,0)
 ;
"RTN","XUMFHPR",55,0)
MFE ; -- MFE segment
"RTN","XUMFHPR",56,0)
 ;
"RTN","XUMFHPR",57,0)
 Q:ERROR
"RTN","XUMFHPR",58,0)
 ;
"RTN","XUMFHPR",59,0)
 S KEY=$P($P(HLNODE,HLFS,5),HLCS)
"RTN","XUMFHPR",60,0)
 ;
"RTN","XUMFHPR",61,0)
 S IEN=$$FIND1^DIC(1,,"X",KEY,"B")
"RTN","XUMFHPR",62,0)
 ;
"RTN","XUMFHPR",63,0)
 I 'IEN D  Q
"RTN","XUMFHPR",64,0)
 .D EM("Error - no IEN in MFE XUMFH",.ERR)
"RTN","XUMFHPR",65,0)
 .K ERR
"RTN","XUMFHPR",66,0)
 ;
"RTN","XUMFHPR",67,0)
 Q
"RTN","XUMFHPR",68,0)
 ;
"RTN","XUMFHPR",69,0)
ZMF ; -- ZMF segment
"RTN","XUMFHPR",70,0)
 ;
"RTN","XUMFHPR",71,0)
 Q:ERROR
"RTN","XUMFHPR",72,0)
 ;
"RTN","XUMFHPR",73,0)
 N FDA,IENS,FIELD,ERR,XUMF,SEQ,X
"RTN","XUMFHPR",74,0)
 ;
"RTN","XUMFHPR",75,0)
 S XUMF=1
"RTN","XUMFHPR",76,0)
 ;
"RTN","XUMFHPR",77,0)
 K FDA
"RTN","XUMFHPR",78,0)
 S IENS=IEN_","
"RTN","XUMFHPR",79,0)
 ;
"RTN","XUMFHPR",80,0)
 ;zero node
"RTN","XUMFHPR",81,0)
 F SEQ=2:1:6 D
"RTN","XUMFHPR",82,0)
 .S FIELD=".0"_SEQ
"RTN","XUMFHPR",83,0)
 .S VALUE=$P(HLNODE,HLFS,SEQ+1)
"RTN","XUMFHPR",84,0)
 .S VALUE=$$DTYP^XUMFP(VALUE,"ST",HLCS,0)
"RTN","XUMFHPR",85,0)
 .S FDA(4.001,IENS,FIELD)=VALUE
"RTN","XUMFHPR",86,0)
 ;
"RTN","XUMFHPR",87,0)
 ;mfe node
"RTN","XUMFHPR",88,0)
 F SEQ=1:1:9 D
"RTN","XUMFHPR",89,0)
 .S FIELD="4."_SEQ
"RTN","XUMFHPR",90,0)
 .S VALUE=$P(HLNODE,HLFS,SEQ+7)
"RTN","XUMFHPR",91,0)
 .S VALUE=$$DTYP^XUMFP(VALUE,"ST",HLCS,0)
"RTN","XUMFHPR",92,0)
 .S FDA(4.001,IENS,FIELD)=VALUE
"RTN","XUMFHPR",93,0)
 F SEQ=1,2,4:1:7 D
"RTN","XUMFHPR",94,0)
 .S FIELD="4.1"_SEQ
"RTN","XUMFHPR",95,0)
 .S VALUE=$P(HLNODE,HLFS,SEQ+16)
"RTN","XUMFHPR",96,0)
 .S VALUE=$$DTYP^XUMFP(VALUE,"ST",HLCS,0)
"RTN","XUMFHPR",97,0)
 .S FDA(4.001,IENS,FIELD)=VALUE
"RTN","XUMFHPR",98,0)
 ;
"RTN","XUMFHPR",99,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","XUMFHPR",100,0)
 I $D(ERR) D
"RTN","XUMFHPR",101,0)
 .D EM("FILE DIE call error message in ZZZ XUMFHPR",.ERR)
"RTN","XUMFHPR",102,0)
 .K ERR
"RTN","XUMFHPR",103,0)
 ;
"RTN","XUMFHPR",104,0)
 K FDA
"RTN","XUMFHPR",105,0)
 S SEQ=0
"RTN","XUMFHPR",106,0)
 F  S SEQ=$O(^DIC(4.001,IEN,1,SEQ)) Q:'SEQ  D
"RTN","XUMFHPR",107,0)
 .S IENS=SEQ_","_IEN_","
"RTN","XUMFHPR",108,0)
 .S FDA(4.011,IENS,.01)="@"
"RTN","XUMFHPR",109,0)
 ;
"RTN","XUMFHPR",110,0)
 D FILE^DIE("E","FDA")
"RTN","XUMFHPR",111,0)
 ;
"RTN","XUMFHPR",112,0)
 Q
"RTN","XUMFHPR",113,0)
 ;
"RTN","XUMFHPR",114,0)
ZZS ; -- SEQUENCE segments
"RTN","XUMFHPR",115,0)
 ;
"RTN","XUMFHPR",116,0)
 Q:ERROR
"RTN","XUMFHPR",117,0)
 ;
"RTN","XUMFHPR",118,0)
 N FDA,IENS,FIELD,ERR,XUMF,SEQ
"RTN","XUMFHPR",119,0)
 ;
"RTN","XUMFHPR",120,0)
 S XUMF=1
"RTN","XUMFHPR",121,0)
 ;
"RTN","XUMFHPR",122,0)
 S IENS="?+"_+$P(HLNODE,HLFS,2)_","_IEN_","
"RTN","XUMFHPR",123,0)
 ;
"RTN","XUMFHPR",124,0)
 F I=1:1:9 D
"RTN","XUMFHPR",125,0)
 .S FIELD=".0"_I
"RTN","XUMFHPR",126,0)
 .S VALUE=$P(HLNODE,HLFS,I+1)
"RTN","XUMFHPR",127,0)
 .S VALUE=$$DTYP^XUMFP(VALUE,"ST",HLCS,0)
"RTN","XUMFHPR",128,0)
 .S FDA(4.011,IENS,FIELD)=VALUE
"RTN","XUMFHPR",129,0)
 ;
"RTN","XUMFHPR",130,0)
 D UPDATE^DIE("E","FDA",,"ERR")
"RTN","XUMFHPR",131,0)
 I $D(ERR) D
"RTN","XUMFHPR",132,0)
 .D EM("UPDATE DIE call error message in ZZS XUMFHPR",.ERR)
"RTN","XUMFHPR",133,0)
 .K ERR
"RTN","XUMFHPR",134,0)
 ;
"RTN","XUMFHPR",135,0)
 Q
"RTN","XUMFHPR",136,0)
 ;
"RTN","XUMFHPR",137,0)
EXIT ; -- cleanup, and quit
"RTN","XUMFHPR",138,0)
 ;
"RTN","XUMFHPR",139,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J),^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFHPR",140,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFHPR",141,0)
 ;
"RTN","XUMFHPR",142,0)
 Q
"RTN","XUMFHPR",143,0)
 ;
"RTN","XUMFHPR",144,0)
EM(ERROR,ERR,XMSUB,XMY) ; -- error message
"RTN","XUMFHPR",145,0)
 ;
"RTN","XUMFHPR",146,0)
 N X,XMTEXT
"RTN","XUMFHPR",147,0)
 ;
"RTN","XUMFHPR",148,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMFHPR",149,0)
 ;
"RTN","XUMFHPR",150,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID"))
"RTN","XUMFHPR",151,0)
 S X(.2)="",X(.3)=$G(ERROR),X(.4)=""
"RTN","XUMFHPR",152,0)
 S:$G(XMSUB)="" XMSUB="MFS ERROR"
"RTN","XUMFHPR",153,0)
 S XMY("G.XUMF ERROR")="",XMDUZ=.5
"RTN","XUMFHPR",154,0)
 S XMTEXT="X("
"RTN","XUMFHPR",155,0)
 ;
"RTN","XUMFHPR",156,0)
 D ^XMD
"RTN","XUMFHPR",157,0)
 ;
"RTN","XUMFHPR",158,0)
 Q
"RTN","XUMFHPR",159,0)
 ;
"RTN","XUMFPOST")
0^^B1058304
"RTN","XUMFPOST",1,0)
XUMFPOST ;ISS/RAM - post-install routine ;04/15/02
"RTN","XUMFPOST",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFPOST",3,0)
 ;
"RTN","XUMFPOST",4,0)
 ; make sure subscriber protocols are associated with event protocols
"RTN","XUMFPOST",5,0)
 ;
"RTN","XUMFPOST",6,0)
 Q
"RTN","XUMFPOST",7,0)
 ;
"RTN","XUMFPOST",8,0)
MAIN ; -- main
"RTN","XUMFPOST",9,0)
 ;
"RTN","XUMFPOST",10,0)
 N FDA,IEN,IENS
"RTN","XUMFPOST",11,0)
 ;
"RTN","XUMFPOST",12,0)
 ; mfn
"RTN","XUMFPOST",13,0)
 K FDA
"RTN","XUMFPOST",14,0)
 ;S IEN=$$FIND1^DIC(101,,"B","DS Pub Man~~L")
"RTN","XUMFPOST",15,0)
 S IEN=$$FIND1^DIC(101,,"B","XUMFX SERVER")
"RTN","XUMFPOST",16,0)
 S IENS=IEN_","
"RTN","XUMFPOST",17,0)
 S FDA(101.0775,"?+1,"_IENS,.01)="XUMF MFS"
"RTN","XUMFPOST",18,0)
 D UPDATE^DIE("E","FDA","IENS")
"RTN","XUMFPOST",19,0)
 ;
"RTN","XUMFPOST",20,0)
 ; mfp
"RTN","XUMFPOST",21,0)
 K FDA
"RTN","XUMFPOST",22,0)
 S IEN=$$FIND1^DIC(101,,"B","XUMF MFP MFQ")
"RTN","XUMFPOST",23,0)
 S IENS=IEN_","
"RTN","XUMFPOST",24,0)
 S FDA(101.0775,"?+1,"_IENS,.01)="XUMF MFP MFR"
"RTN","XUMFPOST",25,0)
 D UPDATE^DIE("E","FDA","IENS")
"RTN","XUMFPOST",26,0)
 ;
"RTN","XUMFPOST",27,0)
 ; mfq
"RTN","XUMFPOST",28,0)
 K FDA
"RTN","XUMFPOST",29,0)
 S IEN=$$FIND1^DIC(101,,"B","XUMFX MFQ")
"RTN","XUMFPOST",30,0)
 S IENS=IEN_","
"RTN","XUMFPOST",31,0)
 S FDA(101.0775,"?+1,"_IENS,.01)="XUMFX MFR"
"RTN","XUMFPOST",32,0)
 D UPDATE^DIE("E","FDA","IENS")
"RTN","XUMFPOST",33,0)
 ;
"RTN","XUMFPOST",34,0)
 Q
"RTN","XUMFPOST",35,0)
 ;
"RTN","XUMFX")
0^14^B35545449
"RTN","XUMFX",1,0)
XUMFX ;ISS/RAM - XUMF API's;04/15/02
"RTN","XUMFX",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFX",3,0)
 ;
"RTN","XUMFX",4,0)
 Q
"RTN","XUMFX",5,0)
 ;
"RTN","XUMFX",6,0)
IEN(IFN,ID) ; -- Internal Entry Number
"RTN","XUMFX",7,0)
 ;
"RTN","XUMFX",8,0)
 N IEN,ROOT
"RTN","XUMFX",9,0)
 ;
"RTN","XUMFX",10,0)
 S IFN=$G(IFN),ID=$G(ID)
"RTN","XUMFX",11,0)
 ;
"RTN","XUMFX",12,0)
 Q:'IFN "0^IFN required"
"RTN","XUMFX",13,0)
 Q:ID="" "0^ID required"
"RTN","XUMFX",14,0)
 ;
"RTN","XUMFX",15,0)
 S ROOT=$$ROOT^DILFD(IFN,,1) Q:ROOT="" "0^invalid IFN"
"RTN","XUMFX",16,0)
 S IEN=$O(@ROOT@("VUID",ID,0))
"RTN","XUMFX",17,0)
 ;
"RTN","XUMFX",18,0)
 Q $S(IEN:IEN,1:"0^not found")
"RTN","XUMFX",19,0)
 ;
"RTN","XUMFX",20,0)
PKV(IFN,IEN,HLCS) ; Primary Key Value - MFE.4
"RTN","XUMFX",21,0)
 ;
"RTN","XUMFX",22,0)
 S IFN=$G(IFN),IEN=$G(IEN),HLCS=$G(HLCS)
"RTN","XUMFX",23,0)
 ;
"RTN","XUMFX",24,0)
 N MFE,NODE,ID,TEXT,CDSYS,IENS
"RTN","XUMFX",25,0)
 ;
"RTN","XUMFX",26,0)
 S NODE=$G(^DIC(4.001,IFN,"MFE"))
"RTN","XUMFX",27,0)
 Q:NODE="" "1^Error - MFS parameter not defined for IFN "_IFN
"RTN","XUMFX",28,0)
 ;
"RTN","XUMFX",29,0)
 S:HLCS="" HLCS="~"
"RTN","XUMFX",30,0)
 S CDSYS=$P(NODE,U,3)
"RTN","XUMFX",31,0)
 ;
"RTN","XUMFX",32,0)
 Q:IEN="NEW" IEN_HLCS_"NEW ENTRY"_HLCS_CDSYS
"RTN","XUMFX",33,0)
 ;
"RTN","XUMFX",34,0)
 Q:'IFN "1^Error - IFN required"
"RTN","XUMFX",35,0)
 Q:'IEN "1^Error - IEN required"
"RTN","XUMFX",36,0)
 ;
"RTN","XUMFX",37,0)
 S IENS=IEN_","
"RTN","XUMFX",38,0)
 ;
"RTN","XUMFX",39,0)
 S FIELD=$P(NODE,U,1),ID=$$GET1^DIQ(IFN,IENS,FIELD)
"RTN","XUMFX",40,0)
 S FIELD=$P(NODE,U,2),TEXT=$$GET1^DIQ(IFN,IENS,FIELD)
"RTN","XUMFX",41,0)
 ;
"RTN","XUMFX",42,0)
 S MFE=ID_HLCS_TEXT_HLCS_CDSYS
"RTN","XUMFX",43,0)
 ;
"RTN","XUMFX",44,0)
 Q:'$P(NODE,U,4) MFE
"RTN","XUMFX",45,0)
 ;
"RTN","XUMFX",46,0)
 S FIELD=$P(NODE,U,4),ID=$$GET1^DIQ(IFN,IENS,FIELD)
"RTN","XUMFX",47,0)
 S FIELD=$P(NODE,U,5),TEXT=$$GET1^DIQ(IFN,IENS,FIELD)
"RTN","XUMFX",48,0)
 S CDSYS=$P(NODE,U,6)
"RTN","XUMFX",49,0)
 ;
"RTN","XUMFX",50,0)
 Q MFE_HLCS_ID_HLCS_TEXT_HLCS_CDSYS
"RTN","XUMFX",51,0)
 ;
"RTN","XUMFX",52,0)
MFE(IFN,PKV,HLCS,IEN,ERROR) ; -- update
"RTN","XUMFX",53,0)
 ;
"RTN","XUMFX",54,0)
 N IENS,MFE,I,X,ID,XREF,NAME,FLD,FDA,DIC
"RTN","XUMFX",55,0)
 ;
"RTN","XUMFX",56,0)
 S IFN=$G(IFN),IEN=$G(IEN),HLCS=$G(HLCS),ERROR=$G(ERROR)
"RTN","XUMFX",57,0)
 S:HLCS="" HLCS="~"
"RTN","XUMFX",58,0)
 ;
"RTN","XUMFX",59,0)
 Q:ERROR
"RTN","XUMFX",60,0)
 ;
"RTN","XUMFX",61,0)
 I 'IFN S ERROR="1^Error - IFN required" Q
"RTN","XUMFX",62,0)
 ;
"RTN","XUMFX",63,0)
 I $P(PKV,HLCS)=""!($P(PKV,HLCS,2)="")!($P(PKV,HLCS,4)="") D  Q
"RTN","XUMFX",64,0)
 .S ERROR="1^Error - PKV not valid"
"RTN","XUMFX",65,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",66,0)
 ;
"RTN","XUMFX",67,0)
 S MFE=$G(^DIC(4.001,IFN,"MFE")),XREF=$P(MFE,U,8)
"RTN","XUMFX",68,0)
 I XREF="" D  Q
"RTN","XUMFX",69,0)
 .S ERROR="1^Error - MFE parameter XREF missing"
"RTN","XUMFX",70,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",71,0)
 ;
"RTN","XUMFX",72,0)
 I IFN=4.001 D  Q
"RTN","XUMFX",73,0)
 .S IEN=$$FIND1^DIC(1,,"BX",$P(PKV,HLCS))
"RTN","XUMFX",74,0)
 .I 'IEN D  Q
"RTN","XUMFX",75,0)
 ..S ERROR="1^not a valid IEN in MFE XUMF"
"RTN","XUMFX",76,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",77,0)
 .Q:$D(^DIC(4.001,IEN))
"RTN","XUMFX",78,0)
 .S NAME=$P(PKV,HLCS)
"RTN","XUMFX",79,0)
 .K FDA
"RTN","XUMFX",80,0)
 .S FDA(IFN,"?+1,",.01)=NAME
"RTN","XUMFX",81,0)
 .D UPDATE^DIE("E","FDA",,"ERR")
"RTN","XUMFX",82,0)
 .I $D(ERR) D  Q
"RTN","XUMFX",83,0)
 ..S ERROR="1^MFE UPDATE FAILED"
"RTN","XUMFX",84,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",85,0)
 ;
"RTN","XUMFX",86,0)
 S VUID=$P(PKV,HLCS)
"RTN","XUMFX",87,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFX",88,0)
 S IEN=$O(@ROOT@("AMASTERVUID",VUID,1,0))
"RTN","XUMFX",89,0)
 ;S:'IEN IEN=$O(@ROOT@("AVUID",VUID,0))
"RTN","XUMFX",90,0)
 ;
"RTN","XUMFX",91,0)
 Q:IEN
"RTN","XUMFX",92,0)
 ;
"RTN","XUMFX",93,0)
 I 'IEN D
"RTN","XUMFX",94,0)
 .S KEY=$P(PKV,HLCS,4)
"RTN","XUMFX",95,0)
 .S IEN=$O(@ROOT@(XREF,KEY,0))
"RTN","XUMFX",96,0)
 ;
"RTN","XUMFX",97,0)
 I 'IEN D  Q:ERROR
"RTN","XUMFX",98,0)
 .S NAME=$P(PKV,HLCS,2)
"RTN","XUMFX",99,0)
 .D CHK^DIE(IFN,.01,,NAME,.X)
"RTN","XUMFX",100,0)
 .I X="^" D  Q
"RTN","XUMFX",101,0)
 ..S ERROR="1^Error - PKV .01 is invalid"
"RTN","XUMFX",102,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",103,0)
 .K DIC S DIC=IFN,DIC(0)="F" D FILE^DICN K DIC
"RTN","XUMFX",104,0)
 .I Y="-1" D  Q
"RTN","XUMFX",105,0)
 ..S ERROR="1^stub entry for "_PKV_" failed"
"RTN","XUMFX",106,0)
 ..D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",107,0)
 .S IEN=+Y
"RTN","XUMFX",108,0)
 ;
"RTN","XUMFX",109,0)
 S IENS=IEN_","
"RTN","XUMFX",110,0)
 ;
"RTN","XUMFX",111,0)
 S FDA(IFN,IENS,99.99)=$P(PKV,HLCS,1)
"RTN","XUMFX",112,0)
 S FDA(IFN,IENS,99.98)=1
"RTN","XUMFX",113,0)
 ;S FDA(IFN,IENS,.01)=$P(PKV,HLCS,2)
"RTN","XUMFX",114,0)
 ;
"RTN","XUMFX",115,0)
 K ERR
"RTN","XUMFX",116,0)
 ;
"RTN","XUMFX",117,0)
 D FILE^DIE("E","FDA","ERR")
"RTN","XUMFX",118,0)
 I $D(ERR) D
"RTN","XUMFX",119,0)
 .S ERROR="1^VUID update error for IFN: "_IFN_" IEN: "_IEN_" PKV: "_PKV
"RTN","XUMFX",120,0)
 .D EM^XUMFH(ERROR,.ERR)
"RTN","XUMFX",121,0)
 .K ERR
"RTN","XUMFX",122,0)
 ;
"RTN","XUMFX",123,0)
 Q
"RTN","XUMFX",124,0)
 ;
"RTN","XUMFX",125,0)
LOAD(IFN) ; -- query and file
"RTN","XUMFX",126,0)
 ;
"RTN","XUMFX",127,0)
 D MFS(IFN,"ALL",5,.ERROR)
"RTN","XUMFX",128,0)
 ;
"RTN","XUMFX",129,0)
 Q
"RTN","XUMFX",130,0)
 ;
"RTN","XUMFX",131,0)
ARRAY(IFN) ; -- query and tmp array
"RTN","XUMFX",132,0)
 ;
"RTN","XUMFX",133,0)
 D MFS(IFN,"ALL",7,.ERROR)
"RTN","XUMFX",134,0)
 ;
"RTN","XUMFX",135,0)
 Q
"RTN","XUMFX",136,0)
 ;
"RTN","XUMFX",137,0)
MFS(IFN,IEN,TYP,ERROR) ; -- get file from Master File Server
"RTN","XUMFX",138,0)
 ;
"RTN","XUMFX",139,0)
 ; TYP (5=query/file, 7=query/tmp_array)
"RTN","XUMFX",140,0)
 ;
"RTN","XUMFX",141,0)
 N TEST
"RTN","XUMFX",142,0)
 ;
"RTN","XUMFX",143,0)
 S (ERROR,TEST)=0
"RTN","XUMFX",144,0)
 ;
"RTN","XUMFX",145,0)
 S IFN=$G(IFN),IEN=$G(IEN),TYP=$G(TYP)
"RTN","XUMFX",146,0)
 ;
"RTN","XUMFX",147,0)
 I 'IFN S ERROR="1^IFN required" Q
"RTN","XUMFX",148,0)
 I IEN="" S ERROR="1^IEN required" Q
"RTN","XUMFX",149,0)
 I TYP'=5,TYP'=7 S ERROR="1^not a valid type" Q
"RTN","XUMFX",150,0)
 ;
"RTN","XUMFX",151,0)
 I $P($$PARAM^HLCS2,U,3)="T" S TEST=1
"RTN","XUMFX",152,0)
 ;
"RTN","XUMFX",153,0)
 S PARAM("LLNK")="XUMFX MFR^XUMF "_$S('TEST:"FORUM",1:"TEST")
"RTN","XUMFX",154,0)
 S PARAM("PROTOCOL")=$O(^ORD(101,"B","XUMFX MFQ",0))
"RTN","XUMFX",155,0)
 ;
"RTN","XUMFX",156,0)
 D MAIN^XUMFXP(IFN,"ALL",TYP,.PARAM,.ERROR) Q:ERROR
"RTN","XUMFX",157,0)
 D MAIN^XUMFXI(IFN,"ALL",TYP,.PARAM,.ERROR) Q:ERROR
"RTN","XUMFX",158,0)
 D MAIN^XUMFXH
"RTN","XUMFX",159,0)
 ;
"RTN","XUMFX",160,0)
 Q
"RTN","XUMFX",161,0)
 ;
"RTN","XUMFX",162,0)
VUID(FILE,FIELD,VUID,X) ; -- If value type pointer and VUID may be used,
"RTN","XUMFX",163,0)
 ; get IEN and set it as internal value
"RTN","XUMFX",164,0)
 N XVUID,X1
"RTN","XUMFX",165,0)
 Q:'$L(FILE)!'FIELD!'$L(VUID) 0
"RTN","XUMFX",166,0)
 Q:$E(X,1,$L(VUID))'=VUID 0
"RTN","XUMFX",167,0)
 S XVUID=$E(X,$L(VUID)+1,$L(X))
"RTN","XUMFX",168,0)
 D FIELD^DID(FILE,FIELD,,"POINTER","X1")
"RTN","XUMFX",169,0)
 S X1=$G(X1("POINTER"))
"RTN","XUMFX",170,0)
 Q:'$L(X1) 0
"RTN","XUMFX",171,0)
 ;S X1=U_X1_"""AVUID"",XVUID,0)"
"RTN","XUMFX",172,0)
 S X1=U_X1_"""AMASTERVUID"",XVUID,1,0)"
"RTN","XUMFX",173,0)
 S X1=$O(@X1)
"RTN","XUMFX",174,0)
 Q +X1
"RTN","XUMFX",175,0)
 ;
"RTN","XUMFX",176,0)
VAL(FILE,FIELD,VUID,VALUE,IENS) ; convert to internal
"RTN","XUMFX",177,0)
 ;
"RTN","XUMFX",178,0)
 N RESULT,ERR
"RTN","XUMFX",179,0)
 ;
"RTN","XUMFX",180,0)
 I $L(VUID) D  Q RESULT
"RTN","XUMFX",181,0)
 .S RESULT=$$VUID(FILE,FIELD,VUID,VALUE)
"RTN","XUMFX",182,0)
 .I 'RESULT D
"RTN","XUMFX",183,0)
 ..S RESULT="^",ERROR="1^VUID lookup failed on "_VALUE
"RTN","XUMFX",184,0)
 ..D EM("VUID lookup failed on "_VALUE)
"RTN","XUMFX",185,0)
 ;
"RTN","XUMFX",186,0)
 I FILE=120.51,FIELD=4 F  Q:VALUE'["\F\"  D
"RTN","XUMFX",187,0)
 .S VALUE=$P(VALUE,"\F\")_"^"_$P(VALUE,"\F\",2,9999)
"RTN","XUMFX",188,0)
 I FILE=120.51,FIELD=4 F  Q:VALUE'["\T\"  D
"RTN","XUMFX",189,0)
 .S VALUE=$P(VALUE,"\T\")_"&"_$P(VALUE,"\T\",2,9999)
"RTN","XUMFX",190,0)
 ;
"RTN","XUMFX",191,0)
 D VAL^DIE(FILE,IENS,FIELD,,VALUE,.RESULT,,"ERR")
"RTN","XUMFX",192,0)
 ;
"RTN","XUMFX",193,0)
 I $D(ERR) D
"RTN","XUMFX",194,0)
 .;Q:$G(ERR("DIERR",1))=405
"RTN","XUMFX",195,0)
 .;Q:$G(ERR("DIERR",1))=602
"RTN","XUMFX",196,0)
 .;Q:$G(ERR("DIERR",1))=710
"RTN","XUMFX",197,0)
 .D EM("validation error",.ERR)
"RTN","XUMFX",198,0)
 ;
"RTN","XUMFX",199,0)
 I RESULT="^" S ERROR="1^data validation error"
"RTN","XUMFX",200,0)
 ;
"RTN","XUMFX",201,0)
 Q RESULT
"RTN","XUMFX",202,0)
 ;
"RTN","XUMFX",203,0)
EM(ERROR,ERR,XMSUB,XMY) ; -- error message
"RTN","XUMFX",204,0)
 ;
"RTN","XUMFX",205,0)
 N X,XMTEXT,XMDUZ,GROUP
"RTN","XUMFX",206,0)
 ;
"RTN","XUMFX",207,0)
 D MSG^DIALOG("AM",.X,80,,"ERR")
"RTN","XUMFX",208,0)
 ;
"RTN","XUMFX",209,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID"))
"RTN","XUMFX",210,0)
 S X(.2)="",X(.3)=$G(ERROR)
"RTN","XUMFX",211,0)
 S X(.4)="",X(.5)="Key: "_$G(KEY),X(.6)=""
"RTN","XUMFX",212,0)
 S:$G(XMSUB)="" XMSUB="MFS ERROR/WARNING/INFO"
"RTN","XUMFX",213,0)
 S XMY("G.XUMF ERROR")="",XMDUZ=.5
"RTN","XUMFX",214,0)
 S GROUP=$P($G(^DIC(4.001,+IFN,0)),U,6)
"RTN","XUMFX",215,0)
 I GROUP'="" S GROUP="G."_GROUP,XMY(GROUP)=""
"RTN","XUMFX",216,0)
 S XMTEXT="X("
"RTN","XUMFX",217,0)
 ;
"RTN","XUMFX",218,0)
 D ^XMD
"RTN","XUMFX",219,0)
 ;
"RTN","XUMFX",220,0)
 Q
"RTN","XUMFX",221,0)
 ;
"RTN","XUMFXACK")
0^22^B1046343
"RTN","XUMFXACK",1,0)
XUMFXACK ;ISS/RAM - MFS app ack ;06/28/00
"RTN","XUMFXACK",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXACK",3,0)
 ;
"RTN","XUMFXACK",4,0)
 ;
"RTN","XUMFXACK",5,0)
 Q
"RTN","XUMFXACK",6,0)
 ;
"RTN","XUMFXACK",7,0)
REPLY(ERROR) ; -- master file response (called from XUMFXH)
"RTN","XUMFXACK",8,0)
 ;
"RTN","XUMFXACK",9,0)
 Q:HL("MTN")="MFR"
"RTN","XUMFXACK",10,0)
 Q:HL("MTN")="MFK"
"RTN","XUMFXACK",11,0)
 Q:HL("MTN")="ACK"
"RTN","XUMFXACK",12,0)
 ;
"RTN","XUMFXACK",13,0)
 S:(TYPE<10) TYPE=(TYPE+10)
"RTN","XUMFXACK",14,0)
 ;
"RTN","XUMFXACK",15,0)
 I HL("MTN")="MFQ" D
"RTN","XUMFXACK",16,0)
 .S IFN=+$G(WHAT) I 'IFN D  Q
"RTN","XUMFXACK",17,0)
 ..S ERROR="1^REPLY MFQ couldn't resolve IFN"
"RTN","XUMFXACK",18,0)
 ..D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXACK",19,0)
 .S XREF=$P(WHO,HLCS,9),ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFXACK",20,0)
 .S IEN=$O(@ROOT@(XREF,$P(WHO,HLCS),0))
"RTN","XUMFXACK",21,0)
 .S IEN=$S(IEN:IEN,1:$P(WHO,HLCS))
"RTN","XUMFXACK",22,0)
 ;
"RTN","XUMFXACK",23,0)
 S IFN=$G(IFN),IEN=$G(IEN)
"RTN","XUMFXACK",24,0)
 ;
"RTN","XUMFXACK",25,0)
 D MAIN^XUMFXP(IFN,IEN,TYPE,.PARAM,.ERROR)
"RTN","XUMFXACK",26,0)
 D MAIN^XUMFXI(IFN,IEN,TYPE,.PARAM,.ERROR)
"RTN","XUMFXACK",27,0)
 ;
"RTN","XUMFXACK",28,0)
 Q
"RTN","XUMFXACK",29,0)
 ;
"RTN","XUMFXH")
0^18^B95840639
"RTN","XUMFXH",1,0)
XUMFXH ;ISS/RAM - MFS Handler ;06/28/00
"RTN","XUMFXH",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXH",3,0)
 ;
"RTN","XUMFXH",4,0)
 ; This routine handles Master File HL7 messages.
"RTN","XUMFXH",5,0)
 ;
"RTN","XUMFXH",6,0)
MAIN ; -- entry point
"RTN","XUMFXH",7,0)
 ;
"RTN","XUMFXH",8,0)
 N CNT,ERR,I,X,HLFS,HLCS,ERROR,HLRESLTA,IFN,IEN,MTPE,TYPE,ARRAY
"RTN","XUMFXH",9,0)
 N HDT,KEY,MID,REASON,VALUE,XREF,ALL,GROUP,PARAM,ROOT,SEG,QRD,XUMF
"RTN","XUMFXH",10,0)
 N QID,WHAT,WHO,HLSCS,CDSYS,EXIT,HLREP,NUMBER,Y,XXX,YYY,ERR,XIEN
"RTN","XUMFXH",11,0)
 ;
"RTN","XUMFXH",12,0)
 D INIT,PROCESS,REPLY^XUMFXACK(ERROR),EXIT
"RTN","XUMFXH",13,0)
 ;
"RTN","XUMFXH",14,0)
 Q
"RTN","XUMFXH",15,0)
 ;
"RTN","XUMFXH",16,0)
INIT ; -- initialize
"RTN","XUMFXH",17,0)
 ;
"RTN","XUMFXH",18,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMFXH",19,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXH",20,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFXH",21,0)
 ;
"RTN","XUMFXH",22,0)
 S XUMF=1,DUZ(0)="@"
"RTN","XUMFXH",23,0)
 ;
"RTN","XUMFXH",24,0)
 S (ERROR,CNT,TYPE,ARRAY,EXIT)=0
"RTN","XUMFXH",25,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH"))
"RTN","XUMFXH",26,0)
 S HLSCS=$E(HL("ECH"),4),HLREP=$E(HL("ECH"),2)
"RTN","XUMFXH",27,0)
 ;
"RTN","XUMFXH",28,0)
 Q
"RTN","XUMFXH",29,0)
 ;
"RTN","XUMFXH",30,0)
PROCESS ; -- pull message text
"RTN","XUMFXH",31,0)
 ;
"RTN","XUMFXH",32,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","XUMFXH",33,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","XUMFXH",34,0)
 .Q:"^MSH^MSA^QRD^MFI^MFE^RDF^RDT^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","XUMFXH",35,0)
 .D @($P(HLNODE,HLFS))
"RTN","XUMFXH",36,0)
 ;
"RTN","XUMFXH",37,0)
 Q
"RTN","XUMFXH",38,0)
 ;
"RTN","XUMFXH",39,0)
MSH ; -- MSH segment
"RTN","XUMFXH",40,0)
 ;
"RTN","XUMFXH",41,0)
 Q
"RTN","XUMFXH",42,0)
 ;
"RTN","XUMFXH",43,0)
MSA ; -- MSA segment
"RTN","XUMFXH",44,0)
 ;
"RTN","XUMFXH",45,0)
 N CODE
"RTN","XUMFXH",46,0)
 ;
"RTN","XUMFXH",47,0)
 S CODE=$P(HLNODE,HLFS,2)
"RTN","XUMFXH",48,0)
 ;
"RTN","XUMFXH",49,0)
 I CODE="AE"!(CODE="AR") D
"RTN","XUMFXH",50,0)
 .S ERROR=ERROR_U_$P(HLNODE,HLFS,4)_U_$G(ERR)
"RTN","XUMFXH",51,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",52,0)
 ;
"RTN","XUMFXH",53,0)
 Q
"RTN","XUMFXH",54,0)
 ;
"RTN","XUMFXH",55,0)
QRD ; -- QRD segment
"RTN","XUMFXH",56,0)
 ;
"RTN","XUMFXH",57,0)
 Q:ERROR
"RTN","XUMFXH",58,0)
 Q:EXIT
"RTN","XUMFXH",59,0)
 ;
"RTN","XUMFXH",60,0)
 S QRD="QRD,QDT,QFC,QP,QID,DRT,DRDT,QLR,WHO,WHAT,WDDC,WDCVQ,QRL"
"RTN","XUMFXH",61,0)
 ;
"RTN","XUMFXH",62,0)
 F I=2:1:13 S PARAM($P(QRD,",",I))=$P(HLNODE,HLFS,I)
"RTN","XUMFXH",63,0)
 S QID=$P(HLNODE,HLFS,5)
"RTN","XUMFXH",64,0)
 S WHO=$P(HLNODE,HLFS,9)
"RTN","XUMFXH",65,0)
 I WHO="" D  Q
"RTN","XUMFXH",66,0)
 .S ERROR="1^QRD segment has null missing WHO parameter"
"RTN","XUMFXH",67,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",68,0)
 S WHAT=$P(HLNODE,HLFS,10)
"RTN","XUMFXH",69,0)
 I WHAT="" D  Q
"RTN","XUMFXH",70,0)
 .S ERROR="1^QRD segment has null missing WHAT parameter"
"RTN","XUMFXH",71,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",72,0)
 ;
"RTN","XUMFXH",73,0)
 S ARRAY=$S(QID["ARRAY":1,1:0)
"RTN","XUMFXH",74,0)
 S ALL=$S(WHO["ALL":1,1:0)
"RTN","XUMFXH",75,0)
 S GROUP=$S(ALL:1,(WHO["IEN"):1,1:0)
"RTN","XUMFXH",76,0)
 ;
"RTN","XUMFXH",77,0)
 S:ARRAY TYPE=$S(GROUP:7,1:3)
"RTN","XUMFXH",78,0)
 S:'ARRAY TYPE=$S(GROUP:5,1:1)
"RTN","XUMFXH",79,0)
 S:HL("MTN")="MFR" TYPE=TYPE+10
"RTN","XUMFXH",80,0)
 ;
"RTN","XUMFXH",81,0)
 S IFN=+WHAT
"RTN","XUMFXH",82,0)
 S XREF=$P($G(^DIC(4.001,+IFN,"MFE")),U,8)
"RTN","XUMFXH",83,0)
 I XREF="" D  Q
"RTN","XUMFXH",84,0)
 .S ERROR="1QRD null XREF parameter"
"RTN","XUMFXH",85,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",86,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFXH",87,0)
 S IEN=$O(@ROOT@(XREF,$P(WHO,HLCS),0))
"RTN","XUMFXH",88,0)
 S IEN=$S(IEN:IEN,1:$P(WHO,HLCS))
"RTN","XUMFXH",89,0)
 ;S PARAM("CDSYS")=$P($G(^DIC(4.001,+IFN,"MFS")),U,3)
"RTN","XUMFXH",90,0)
 ;
"RTN","XUMFXH",91,0)
 K:ARRAY ^TMP("XUMF ARRAY",$J)
"RTN","XUMFXH",92,0)
 ;
"RTN","XUMFXH",93,0)
 Q
"RTN","XUMFXH",94,0)
 ;
"RTN","XUMFXH",95,0)
MFI ; -- MFI segment
"RTN","XUMFXH",96,0)
 ;
"RTN","XUMFXH",97,0)
 Q:ERROR
"RTN","XUMFXH",98,0)
 Q:EXIT
"RTN","XUMFXH",99,0)
 ;
"RTN","XUMFXH",100,0)
 K IFN,ARRAY
"RTN","XUMFXH",101,0)
 ;
"RTN","XUMFXH",102,0)
 I $P(HLNODE,HLFS,2)="" D  Q
"RTN","XUMFXH",103,0)
 .S ERROR="1^MFI segment missing Master File Identifier"
"RTN","XUMFXH",104,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",105,0)
 ;
"RTN","XUMFXH",106,0)
 S IFN=$P(HLNODE,HLFS,2)
"RTN","XUMFXH",107,0)
 S:'IFN IFN=$O(^DIC(4.001,"MFI",$P($P(HLNODE,HLFS,2),HLCS,2),0))
"RTN","XUMFXH",108,0)
 S IFN=$S(IFN:IFN,$P(HLNODE,HLFS,2)="ZMF":4.001,1:0)
"RTN","XUMFXH",109,0)
 I 'IFN D  Q
"RTN","XUMFXH",110,0)
 .S ERROR="1^IFN in MFI could not be resolved"
"RTN","XUMFXH",111,0)
 .D EM^XUMFX(ERROR,.ERR)
"RTN","XUMFXH",112,0)
 ;
"RTN","XUMFXH",113,0)
 S ARRAY=$S($G(ARRAY):1,$P(HLNODE,HLFS,3)="TEMP":1,1:0)
"RTN","XUMFXH",114,0)
 ;
"RTN","XUMFXH",115,0)
 Q
"RTN","XUMFXH",116,0)
 ;
"RTN","XUMFXH",117,0)
MFE ; -- MFE segment
"RTN","XUMFXH",118,0)
 ;
"RTN","XUMFXH",119,0)
 Q:ERROR
"RTN","XUMFXH",120,0)
 Q:EXIT
"RTN","XUMFXH",121,0)
 ;
"RTN","XUMFXH",122,0)
 K IEN
"RTN","XUMFXH",123,0)
 ;
"RTN","XUMFXH",124,0)
 N PRE,POST
"RTN","XUMFXH",125,0)
 ;
"RTN","XUMFXH",126,0)
 S KEY=$P(HLNODE,HLFS,5) Q:ARRAY
"RTN","XUMFXH",127,0)
 ;
"RTN","XUMFXH",128,0)
 S PRE=$P($G(^DIC(4.001,+IFN,"MFE")),U,16)
"RTN","XUMFXH",129,0)
 I PRE'="" D  Q:$G(EXIT)
"RTN","XUMFXH",130,0)
 .S PRE=PRE_"^XUMFXR"
"RTN","XUMFXH",131,0)
 .D @(PRE)
"RTN","XUMFXH",132,0)
 ;
"RTN","XUMFXH",133,0)
 D MFE^XUMFX(IFN,KEY,HLCS,.IEN,.ERROR) Q:ERROR
"RTN","XUMFXH",134,0)
 ;
"RTN","XUMFXH",135,0)
 S POST=$P($G(^DIC(4.001,+IFN,"MFE")),U,17)
"RTN","XUMFXH",136,0)
 I POST'="" D  Q:$G(EXIT)
"RTN","XUMFXH",137,0)
 .S POST=POST_"^XUMFXR"
"RTN","XUMFXH",138,0)
 .D @(POST)
"RTN","XUMFXH",139,0)
 ;
"RTN","XUMFXH",140,0)
 I 'IEN D  Q
"RTN","XUMFXH",141,0)
 .S ERROR="1^IEN not resolved in MFE"
"RTN","XUMFXH",142,0)
 .D EM^XUMFX("Error in MFE",.ERR)
"RTN","XUMFXH",143,0)
 .K ERR
"RTN","XUMFXH",144,0)
 ;
"RTN","XUMFXH",145,0)
 K:'$D(XIEN(IEN)) XIEN
"RTN","XUMFXH",146,0)
 S XIEN(IEN)=$G(XIEN(IEN))+1
"RTN","XUMFXH",147,0)
 ;
"RTN","XUMFXH",148,0)
 Q
"RTN","XUMFXH",149,0)
 ;
"RTN","XUMFXH",150,0)
RDF ; -- table row definition
"RTN","XUMFXH",151,0)
 ;
"RTN","XUMFXH",152,0)
 Q:ERROR
"RTN","XUMFXH",153,0)
 Q:EXIT
"RTN","XUMFXH",154,0)
 ;
"RTN","XUMFXH",155,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMFXH",156,0)
 ;
"RTN","XUMFXH",157,0)
 N COL,X,Y,Z,DTYP,IDX,SEQ,VUID
"RTN","XUMFXH",158,0)
 ;
"RTN","XUMFXH",159,0)
 K ^TMP("XUMF MFS",$J,"PARAM","SEQ")
"RTN","XUMFXH",160,0)
 K ^TMP("XUMF MFS",$J,"PARAM","MULT")
"RTN","XUMFXH",161,0)
 K ^TMP("XUMF MFS",$J,"PARAM","MKEY")
"RTN","XUMFXH",162,0)
 K ^TMP("XUMF MFS",$J,"PARAM","IENS")
"RTN","XUMFXH",163,0)
 ;
"RTN","XUMFXH",164,0)
 K XXX,YYY
"RTN","XUMFXH",165,0)
 ;
"RTN","XUMFXH",166,0)
 S NUMBER=$P(HLNODE,HLFS,2)
"RTN","XUMFXH",167,0)
 S DATA=$P(HLNODE,HLFS,3)
"RTN","XUMFXH",168,0)
 ;
"RTN","XUMFXH",169,0)
 S CNT=0,Y=0
"RTN","XUMFXH",170,0)
 F SEQ=1:1:NUMBER D
"RTN","XUMFXH",171,0)
 .S Y=Y+1
"RTN","XUMFXH",172,0)
 .S Z=$P(DATA,HLREP,Y)
"RTN","XUMFXH",173,0)
 .I Y=$L(DATA,HLREP) D
"RTN","XUMFXH",174,0)
 ..S CNT=$O(HLNODE(CNT))
"RTN","XUMFXH",175,0)
 ..S DATA=$G(HLNODE(+CNT))
"RTN","XUMFXH",176,0)
 ..S Z=Z_$P(DATA,HLREP)
"RTN","XUMFXH",177,0)
 ..S Y=1
"RTN","XUMFXH",178,0)
 .S COL(SEQ)=Z
"RTN","XUMFXH",179,0)
 ;
"RTN","XUMFXH",180,0)
 S SEQ=0
"RTN","XUMFXH",181,0)
 F  S SEQ=$O(COL(SEQ)) Q:'SEQ  D
"RTN","XUMFXH",182,0)
 .S NAME=$P(COL(SEQ),HLCS) Q:NAME=""
"RTN","XUMFXH",183,0)
 .;S IDX=$O(^DIC(4.001,4,1,"B",NAME,0)) Q:'IDX
"RTN","XUMFXH",184,0)
 .S IDX=$O(^DIC(4.001,+IFN,1,"B",NAME,0)) Q:'IDX
"RTN","XUMFXH",185,0)
 .S DATA=$G(^DIC(4.001,+IFN,1,+IDX,0)) Q:DATA=""
"RTN","XUMFXH",186,0)
 .S YYY(NAME,SEQ)=""
"RTN","XUMFXH",187,0)
 .;
"RTN","XUMFXH",188,0)
 .N FLD,TYP,SUBFILE,LKUP,REPEAT,CLEAN,TIMEZONE
"RTN","XUMFXH",189,0)
 .S TYP=$P(DATA,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMFXH",190,0)
 .S FLD=$P(DATA,U,2),SUBFILE=$P(DATA,U,4)
"RTN","XUMFXH",191,0)
 .S LKUP=$P(DATA,U,7),TIMEZONE=$P(DATA,U,14)
"RTN","XUMFXH",192,0)
 .S REPEAT=$P(DATA,U,11),CLEAN=$P(DATA,U,12),VUID=$P(DATA,U,13)
"RTN","XUMFXH",193,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"VUID")=VUID
"RTN","XUMFXH",194,0)
 .;
"RTN","XUMFXH",195,0)
 .I 'SUBFILE D  Q
"RTN","XUMFXH",196,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FLD)=TYP_U_LKUP
"RTN","XUMFXH",197,0)
 .;
"RTN","XUMFXH",198,0)
 .; -- multiple field
"RTN","XUMFXH",199,0)
 .;
"RTN","XUMFXH",200,0)
 .I $P(DATA,U,6)'="" D  ;.01 is a field
"RTN","XUMFXH",201,0)
 ..S XXX(SEQ)=$P(DATA,U,6)
"RTN","XUMFXH",202,0)
 .I $P(DATA,U,6)="" D  ;.01 is lkup on MKEY literal
"RTN","XUMFXH",203,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=""
"RTN","XUMFXH",204,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","MKEY",SEQ)=$P(DATA,U,5)
"RTN","XUMFXH",205,0)
 .;
"RTN","XUMFXH",206,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")=SUBFILE
"RTN","XUMFXH",207,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")=FLD
"RTN","XUMFXH",208,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")=TYP
"RTN","XUMFXH",209,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"REPEAT")=REPEAT
"RTN","XUMFXH",210,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"CLEAN")=CLEAN
"RTN","XUMFXH",211,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"TIMEZONE")=TIMEZONE
"RTN","XUMFXH",212,0)
 ;
"RTN","XUMFXH",213,0)
 S SEQ=0
"RTN","XUMFXH",214,0)
 F  S SEQ=$O(XXX(SEQ)) Q:'SEQ  D
"RTN","XUMFXH",215,0)
 .S X=XXX(SEQ),Y=$O(YYY(X,0))
"RTN","XUMFXH",216,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=Y
"RTN","XUMFXH",217,0)
 ;
"RTN","XUMFXH",218,0)
 Q
"RTN","XUMFXH",219,0)
 ;
"RTN","XUMFXH",220,0)
RDT ; -- table row data
"RTN","XUMFXH",221,0)
 ;
"RTN","XUMFXH",222,0)
 Q:ERROR
"RTN","XUMFXH",223,0)
 Q:EXIT
"RTN","XUMFXH",224,0)
 ;
"RTN","XUMFXH",225,0)
 I $G(ARRAY) D ARRAY Q
"RTN","XUMFXH",226,0)
 ;
"RTN","XUMFXH",227,0)
 Q:'IEN
"RTN","XUMFXH",228,0)
 ;
"RTN","XUMFXH",229,0)
 N FDA,IENS,FIELD,ERR,PRE,POST,MULT,FDA1,SEQ,VUID,TIMEZONE
"RTN","XUMFXH",230,0)
 ;
"RTN","XUMFXH",231,0)
 S PRE=$P($G(^DIC(4.001,+IFN,0)),U,4)
"RTN","XUMFXH",232,0)
 I PRE'="" D
"RTN","XUMFXH",233,0)
 .S PRE=PRE_"^XUMFR"
"RTN","XUMFXH",234,0)
 .D @(PRE)
"RTN","XUMFXH",235,0)
 ;
"RTN","XUMFXH",236,0)
 S IENS=IEN_","
"RTN","XUMFXH",237,0)
 S SEQ=0
"RTN","XUMFXH",238,0)
 F  S SEQ=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFXH",239,0)
 .S FIELD=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,0))
"RTN","XUMFXH",240,0)
 .S VUID=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"VUID"))
"RTN","XUMFXH",241,0)
 .S TIMEZONE=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"TIMEZONE"))
"RTN","XUMFXH",242,0)
 .I 'FIELD D SUBFILE Q
"RTN","XUMFXH",243,0)
 .S TYP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FIELD))
"RTN","XUMFXH",244,0)
 .S VALUE=$$VALUE()
"RTN","XUMFXH",245,0)
 .S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMFXH",246,0)
 .S VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,IENS) Q:VALUE="^"
"RTN","XUMFXH",247,0)
 .S FDA(IFN,IENS,FIELD)=VALUE
"RTN","XUMFXH",248,0)
 ;
"RTN","XUMFXH",249,0)
 M FDA=FDA1
"RTN","XUMFXH",250,0)
 ;
"RTN","XUMFXH",251,0)
 D FILE^DIE(,"FDA","ERR")
"RTN","XUMFXH",252,0)
 I $D(ERR) D
"RTN","XUMFXH",253,0)
 .S ERROR="1^updating error"
"RTN","XUMFXH",254,0)
 .D EM^XUMFX("file DIE call error message in ZZZ",.ERR)
"RTN","XUMFXH",255,0)
 .K ERR
"RTN","XUMFXH",256,0)
 ;
"RTN","XUMFXH",257,0)
 S POST=$P($G(^DIC(4.001,+IFN,0)),U,5)
"RTN","XUMFXH",258,0)
 I POST'="" D
"RTN","XUMFXH",259,0)
 .S POST=POST_"^XUMFR"
"RTN","XUMFXH",260,0)
 .D @(POST)
"RTN","XUMFXH",261,0)
 ;
"RTN","XUMFXH",262,0)
 Q
"RTN","XUMFXH",263,0)
 ;
"RTN","XUMFXH",264,0)
SUBFILE ; -- process subfile record
"RTN","XUMFXH",265,0)
 ;
"RTN","XUMFXH",266,0)
 N IFN,IENS1,KEY1,FIELD,TYP,MKEY,ERR,REPEAT,CLEAN
"RTN","XUMFXH",267,0)
 ;
"RTN","XUMFXH",268,0)
 S IFN=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")
"RTN","XUMFXH",269,0)
 S FIELD=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")
"RTN","XUMFXH",270,0)
 S TYP=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")
"RTN","XUMFXH",271,0)
 S REPEAT=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"REPEAT")
"RTN","XUMFXH",272,0)
 S CLEAN=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"CLEAN")
"RTN","XUMFXH",273,0)
 ;
"RTN","XUMFXH",274,0)
 I CLEAN,$G(XIEN(IEN))'>1 D
"RTN","XUMFXH",275,0)
 .N ROOT,IDX
"RTN","XUMFXH",276,0)
 .S ROOT=$$ROOT^DILFD(IFN,","_IENS,1)
"RTN","XUMFXH",277,0)
 .S IDX=0 F  S IDX=$O(@ROOT@(IDX)) Q:'IDX  D
"RTN","XUMFXH",278,0)
 ..D
"RTN","XUMFXH",279,0)
 ...N DA,DIK,DIC S DA(1)=+IENS,DA=IDX,DIK=$P(ROOT,")")_"," D ^DIK
"RTN","XUMFXH",280,0)
 ..I $D(ERR) D
"RTN","XUMFXH",281,0)
 ...S ERROR="1^error while cleaning out multiple"
"RTN","XUMFXH",282,0)
 ...D EM^XUMFX("update DIE call error message in SUBFILE",.ERR)
"RTN","XUMFXH",283,0)
 ...K ERR
"RTN","XUMFXH",284,0)
 ;
"RTN","XUMFXH",285,0)
 S VALUE=$$VALUE()
"RTN","XUMFXH",286,0)
 S VALUE=$$DTYP^XUMFXP(VALUE,TYP,HLCS,0,TIMEZONE)
"RTN","XUMFXH",287,0)
 ;
"RTN","XUMFXH",288,0)
 ;IF REPEAT DO xxx (not supported this version)
"RTN","XUMFXH",289,0)
 ;
"RTN","XUMFXH",290,0)
 S MULT=$G(^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ))
"RTN","XUMFXH",291,0)
 S MKEY=$G(^TMP("XUMF MFS",$J,"PARAM","MKEY",SEQ))
"RTN","XUMFXH",292,0)
 ;
"RTN","XUMFXH",293,0)
 I MULT=SEQ Q:VALUE=""  D
"RTN","XUMFXH",294,0)
 .N FDA,IEN
"RTN","XUMFXH",295,0)
 .S VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMFXH",296,0)
 .S FDA(IFN,"?+1,"_IENS,.01)=VALUE
"RTN","XUMFXH",297,0)
 .D UPDATE^DIE(,"FDA","IEN","ERR")
"RTN","XUMFXH",298,0)
 .I $D(ERR) D  Q
"RTN","XUMFXH",299,0)
 ..S ERROR="1^subfile update error"
"RTN","XUMFXH",300,0)
 ..D EM^XUMFX("update DIE call error message in SUBFILE",.ERR)
"RTN","XUMFXH",301,0)
 ..K ERR
"RTN","XUMFXH",302,0)
 .S IENS1=IEN(1)_","_IENS,MULT(SEQ)=IENS1
"RTN","XUMFXH",303,0)
 I 'MULT D
"RTN","XUMFXH",304,0)
 .N FDA,IEN
"RTN","XUMFXH",305,0)
 .S MKEY=$$VAL^XUMFX(IFN,FIELD,VUID,MKEY,"?+1,"_IENS)
"RTN","XUMFXH",306,0)
 .S FDA(IFN,"?+1,"_IENS,.01)=MKEY
"RTN","XUMFXH",307,0)
 .D UPDATE^DIE("E","FDA","IEN","ERR")
"RTN","XUMFXH",308,0)
 .I $D(ERR) D
"RTN","XUMFXH",309,0)
 ..S ERROR="1^subfile update error"
"RTN","XUMFXH",310,0)
 ..D EM^XUMFX("update DIE call error message in SUBFILE",.ERR)
"RTN","XUMFXH",311,0)
 ..K ERR
"RTN","XUMFXH",312,0)
 .S IENS1=IEN(1)_","_IENS,MULT(SEQ)=IENS1
"RTN","XUMFXH",313,0)
 .S FDA1(IFN,IENS1,.01)=MKEY
"RTN","XUMFXH",314,0)
 I MULT,MULT'=SEQ S IENS1=$G(MULT(+MULT)) Q:IENS1=""
"RTN","XUMFXH",315,0)
 S:MULT'=SEQ VALUE=$$VAL^XUMFX(IFN,FIELD,VUID,VALUE,"?+1,"_IENS) Q:VALUE="^"
"RTN","XUMFXH",316,0)
 S:$D(IENS1) FDA1(IFN,IENS1,FIELD)=VALUE
"RTN","XUMFXH",317,0)
 ;
"RTN","XUMFXH",318,0)
 Q
"RTN","XUMFXH",319,0)
 ;
"RTN","XUMFXH",320,0)
VALUE() ; -- handle HL7 continuation nodes
"RTN","XUMFXH",321,0)
 ;
"RTN","XUMFXH",322,0)
 Q:'$O(HLNODE(0)) $P(HLNODE,HLFS,SEQ+1)
"RTN","XUMFXH",323,0)
 ;
"RTN","XUMFXH",324,0)
 N COL
"RTN","XUMFXH",325,0)
 ;
"RTN","XUMFXH",326,0)
 D SEGPRSE^XUMFXHL7("HLNODE","COL")
"RTN","XUMFXH",327,0)
 ;
"RTN","XUMFXH",328,0)
 Q COL(SEQ)
"RTN","XUMFXH",329,0)
 ;
"RTN","XUMFXH",330,0)
ARRAY ; -- query data stored in array (not filed)
"RTN","XUMFXH",331,0)
 ;
"RTN","XUMFXH",332,0)
 N X S X=KEY S X=$S($P(X,HLCS)'="":$P(X,HLCS),1:$P(X,HLCS,4)) Q:X=""
"RTN","XUMFXH",333,0)
 ;
"RTN","XUMFXH",334,0)
 M ^TMP("XUMF ARRAY",$J,IFN,X)=HLNODE
"RTN","XUMFXH",335,0)
 ;
"RTN","XUMFXH",336,0)
 Q
"RTN","XUMFXH",337,0)
 ;
"RTN","XUMFXH",338,0)
EXIT ; -- cleanup, and quit
"RTN","XUMFXH",339,0)
 ;
"RTN","XUMFXH",340,0)
 ; post processing logic
"RTN","XUMFXH",341,0)
 S X=$G(^DIC(4.001,+IFN,2)) X:X'="" X
"RTN","XUMFXH",342,0)
 ;
"RTN","XUMFXH",343,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J),^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXH",344,0)
 ;
"RTN","XUMFXH",345,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFXH",346,0)
 ;
"RTN","XUMFXH",347,0)
 Q
"RTN","XUMFXH",348,0)
 ;
"RTN","XUMFXHL7")
0^21^B6997687
"RTN","XUMFXHL7",1,0)
XUMFXHL7 ;BPFO/JRP - IEMM UTILTIES (CONT);7/29/2002
"RTN","XUMFXHL7",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXHL7",3,0)
 ;
"RTN","XUMFXHL7",4,0)
 ;copied from SCMSVUT5
"RTN","XUMFXHL7",5,0)
 ;
"RTN","XUMFXHL7",6,0)
PARSE(INARR,OUTARR,SEP,SUB,MAX) ;Parse array into individual fields
"RTN","XUMFXHL7",7,0)
 ;Input  : INARR - Array containing data to parse (full global ref)
"RTN","XUMFXHL7",8,0)
 ;                   INARR = First 245 characters of data
"RTN","XUMFXHL7",9,0)
 ;                   INARR(1..n) = Continuation nodes
"RTN","XUMFXHL7",10,0)
 ;                        OR
"RTN","XUMFXHL7",11,0)
 ;                   INARR(x) = First 245 characters of data
"RTN","XUMFXHL7",12,0)
 ;                   INARR(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",13,0)
 ;         OUTARR - Array to put parsed data into (full global ref)
"RTN","XUMFXHL7",14,0)
 ;         SEP - Field separator (defaults to ^) (1 character)
"RTN","XUMFXHL7",15,0)
 ;         SUB - Starting subscript of OUTARR (defaults to 0)
"RTN","XUMFXHL7",16,0)
 ;         MAX - Maximum length of output node (defaults to 245)
"RTN","XUMFXHL7",17,0)
 ;Output : None
"RTN","XUMFXHL7",18,0)
 ;         OUTARR(SUB) = First piece (MAX characters)
"RTN","XUMFXHL7",19,0)
 ;         OUTARR(SUB,1..n) = Continuation nodes
"RTN","XUMFXHL7",20,0)
 ;         OUTARR(SUB+X) = Xth piece (MAX characters)
"RTN","XUMFXHL7",21,0)
 ;         OUTARR(SUB+X,1..n) = Continuation nodes
"RTN","XUMFXHL7",22,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",23,0)
 ;       : Assumes that INARR and OUTARR are defined and valid
"RTN","XUMFXHL7",24,0)
 ;
"RTN","XUMFXHL7",25,0)
 ;Declare variables
"RTN","XUMFXHL7",26,0)
 N NODE,STOP,DATA,INFO,FLD,SEPCNT,CN,OUT,TMP,ROOT,OUTNODE
"RTN","XUMFXHL7",27,0)
 K @OUTARR
"RTN","XUMFXHL7",28,0)
 S SEP=$G(SEP) S SEP=$E(SEP,1) S:SEP="" SEP="^"
"RTN","XUMFXHL7",29,0)
 S SUB=+$G(SUB)
"RTN","XUMFXHL7",30,0)
 S MAX=+$G(MAX) S:'MAX MAX=245
"RTN","XUMFXHL7",31,0)
 S NODE=INARR
"RTN","XUMFXHL7",32,0)
 S INFO=$G(@NODE)
"RTN","XUMFXHL7",33,0)
 S ROOT=$$OREF^DILF(INARR)
"RTN","XUMFXHL7",34,0)
 S FLD=1
"RTN","XUMFXHL7",35,0)
 S SEPCNT=$L(INFO,SEP)
"RTN","XUMFXHL7",36,0)
 S STOP=0
"RTN","XUMFXHL7",37,0)
 S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","XUMFXHL7",38,0)
 S CN=0
"RTN","XUMFXHL7",39,0)
 F  S DATA=$P(INFO,SEP,FLD) D  Q:STOP
"RTN","XUMFXHL7",40,0)
 .I FLD=SEPCNT D  Q
"RTN","XUMFXHL7",41,0)
 ..D ADDNODE
"RTN","XUMFXHL7",42,0)
 ..S NODE=$Q(@NODE)
"RTN","XUMFXHL7",43,0)
 ..I (NODE="")!(NODE'[ROOT) S STOP=1 Q
"RTN","XUMFXHL7",44,0)
 ..S INFO=$G(@NODE)
"RTN","XUMFXHL7",45,0)
 ..S SEPCNT=$L(INFO,SEP)
"RTN","XUMFXHL7",46,0)
 ..S FLD=1
"RTN","XUMFXHL7",47,0)
 .D ADDNODE
"RTN","XUMFXHL7",48,0)
 .S SUB=SUB+1
"RTN","XUMFXHL7",49,0)
 .S CN=0
"RTN","XUMFXHL7",50,0)
 .S OUTNODE=$NA(@OUTARR@(SUB))
"RTN","XUMFXHL7",51,0)
 .S FLD=FLD+1
"RTN","XUMFXHL7",52,0)
 Q
"RTN","XUMFXHL7",53,0)
ADDNODE ;Used by PARSE to add data to output node (handles continuation nodes)
"RTN","XUMFXHL7",54,0)
 S TMP=$G(@OUTNODE)
"RTN","XUMFXHL7",55,0)
 I ($L(TMP)+$L(DATA))<(MAX+1) S @OUTNODE=TMP_DATA Q
"RTN","XUMFXHL7",56,0)
 S @OUTNODE=TMP_$E(DATA,1,(MAX-$L(TMP)))
"RTN","XUMFXHL7",57,0)
 S CN=CN+1
"RTN","XUMFXHL7",58,0)
 S DATA=$E(DATA,(MAX-$L(TMP)+1),$L(DATA))
"RTN","XUMFXHL7",59,0)
 S OUTNODE=$NA(@OUTARR@(SUB,CN))
"RTN","XUMFXHL7",60,0)
 I DATA'="" D ADDNODE
"RTN","XUMFXHL7",61,0)
 Q
"RTN","XUMFXHL7",62,0)
 ;
"RTN","XUMFXHL7",63,0)
 ;
"RTN","XUMFXHL7",64,0)
SEGPRSE(SEGMENT,OUTARR,FS)      ;Parse HL7 segment by field separator
"RTN","XUMFXHL7",65,0)
 ;Input  : SEGMENT - Array containing HL7 segment to parse
"RTN","XUMFXHL7",66,0)
 ;                   (full global ref)
"RTN","XUMFXHL7",67,0)
 ;                   SEGMENT = First 245 characters of segment
"RTN","XUMFXHL7",68,0)
 ;                   SEGMENT(1..n) = Continuation nodes
"RTN","XUMFXHL7",69,0)
 ;                        OR
"RTN","XUMFXHL7",70,0)
 ;                   SEGMENT(x) = First 245 characters of segment
"RTN","XUMFXHL7",71,0)
 ;                   SEGMENT(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",72,0)
 ;         OUTARR - Array to put parsed segment into (full global ref)
"RTN","XUMFXHL7",73,0)
 ;         FS - HL7 field separator (defaults to ^) (1 character)
"RTN","XUMFXHL7",74,0)
 ;Output : None
"RTN","XUMFXHL7",75,0)
 ;         OUTARR(0) = Segment name
"RTN","XUMFXHL7",76,0)
 ;         OUTARR(seq#) = Data (first 245 characters)
"RTN","XUMFXHL7",77,0)
 ;         OUTARR(seq#,1..n) Continuation nodes
"RTN","XUMFXHL7",78,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",79,0)
 ;       : Assumes SEGMENT and OUTARR are defined and valid
"RTN","XUMFXHL7",80,0)
 ;
"RTN","XUMFXHL7",81,0)
 D PARSE($G(SEGMENT),$G(OUTARR),$G(FS),0,245)
"RTN","XUMFXHL7",82,0)
 Q
"RTN","XUMFXHL7",83,0)
 ;
"RTN","XUMFXHL7",84,0)
SEQPRSE(SEQDATA,OUTARR,ENCODE)  ;Parse HL7 sequence by component
"RTN","XUMFXHL7",85,0)
 ;Input  : SEQDATA - Array containing seq to parse (full global ref)
"RTN","XUMFXHL7",86,0)
 ;                   SEQDATA = First 245 characters of sequence
"RTN","XUMFXHL7",87,0)
 ;                   SEQDATA(1..n) = Continuation nodes
"RTN","XUMFXHL7",88,0)
 ;                        OR
"RTN","XUMFXHL7",89,0)
 ;                   SEQDATA(x) = First 245 characters of sequence
"RTN","XUMFXHL7",90,0)
 ;                   SEQDATA(x,1..n) = Continuation nodes
"RTN","XUMFXHL7",91,0)
 ;         OUTARR - Array to put parsed sequence into (full global ref)
"RTN","XUMFXHL7",92,0)
 ;         ENCODE - HL7 encoding characters (defaults to ~|\&) (4 chars)
"RTN","XUMFXHL7",93,0)
 ;Output : None
"RTN","XUMFXHL7",94,0)
 ;         OUTARR(rep#,comp#) = Data (first 245 characters)
"RTN","XUMFXHL7",95,0)
 ;         OUTARR(rep#,comp#,1..n) = Continuation nodes
"RTN","XUMFXHL7",96,0)
 ;Notes  : OUTARR is initialized (KILLed) on entry
"RTN","XUMFXHL7",97,0)
 ;       : Assumes SEQDATA and OUTARR are defined and valid
"RTN","XUMFXHL7",98,0)
 ;
"RTN","XUMFXHL7",99,0)
 ;Declare variables
"RTN","XUMFXHL7",100,0)
 N RS,CS,INFO,DATA,REP,COMP
"RTN","XUMFXHL7",101,0)
 S ENCODE=$G(ENCODE,"~|\&")
"RTN","XUMFXHL7",102,0)
 S ENCODE=$E(ENCODE,1,4) S:$L(ENCODE)'=4 ENCODE="~|\&"
"RTN","XUMFXHL7",103,0)
 S CS=$E(ENCODE,1)
"RTN","XUMFXHL7",104,0)
 S RS=$E(ENCODE,2)
"RTN","XUMFXHL7",105,0)
 S INFO=$NA(^TMP("XUMFXHL7",$J,"SEQPRSE"))
"RTN","XUMFXHL7",106,0)
 D PARSE($G(SEQDATA),INFO,RS,1,245)
"RTN","XUMFXHL7",107,0)
 S REP=0
"RTN","XUMFXHL7",108,0)
 F  S REP=+$O(@INFO@(REP)) Q:'REP  D PARSE($NA(@INFO@(REP)),$NA(@OUTARR@(REP)),CS,1,245)
"RTN","XUMFXHL7",109,0)
 K @INFO
"RTN","XUMFXHL7",110,0)
 Q
"RTN","XUMFXHL7",111,0)
        
"RTN","XUMFXI")
0^20^B66169929
"RTN","XUMFXI",1,0)
XUMFXI ;ISS/RAM - MFS build message ;06/28/00
"RTN","XUMFXI",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXI",3,0)
 ;
"RTN","XUMFXI",4,0)
 ; This routine is the Master File Server HL7 message builder API.
"RTN","XUMFXI",5,0)
 ; The routine will generate messages for both trigger events and
"RTN","XUMFXI",6,0)
 ; queries.
"RTN","XUMFXI",7,0)
 ;
"RTN","XUMFXI",8,0)
 ; Use the routine XUMFXP to initialize the PARAM array.
"RTN","XUMFXI",9,0)
 ; See XUMFXP for a full description of the parameters.
"RTN","XUMFXI",10,0)
 ;
"RTN","XUMFXI",11,0)
 ; use of $O(^HLCS(870,"C",institution_ptr)) supported by IA# 3550
"RTN","XUMFXI",12,0)
 ;
"RTN","XUMFXI",13,0)
MAIN(IFN,IEN,TYPE,PARAM,ERROR) ;  -- entry point
"RTN","XUMFXI",14,0)
 ;
"RTN","XUMFXI",15,0)
 ;
"RTN","XUMFXI",16,0)
 N HLFS,HLCS,HLRESLT,QUERY,UPDATE,ALL,CNT,ROOT,PROTOCOL,MFR,MFQ,MTYP,I
"RTN","XUMFXI",17,0)
 N ARRAY,GROUP,MFK,CDSYS,J,HLSCS
"RTN","XUMFXI",18,0)
 ;
"RTN","XUMFXI",19,0)
 M ^TMP("XUMF MFS",$J,"PARAM")=PARAM K PARAM
"RTN","XUMFXI",20,0)
 ;
"RTN","XUMFXI",21,0)
 D INIT,BUILD,LLNK,SEND,EXIT
"RTN","XUMFXI",22,0)
 ;
"RTN","XUMFXI",23,0)
 ;
"RTN","XUMFXI",24,0)
 Q
"RTN","XUMFXI",25,0)
 ;
"RTN","XUMFXI",26,0)
INIT ; -- initialize
"RTN","XUMFXI",27,0)
 ;
"RTN","XUMFXI",28,0)
 K ^TMP("DILIST",$J),^TMP("DIERR",$J)
"RTN","XUMFXI",29,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXI",30,0)
 ;
"RTN","XUMFXI",31,0)
 S IEN=$G(IEN),IFN=$G(IFN)
"RTN","XUMFXI",32,0)
 S TYPE=$G(TYPE),ERROR=$G(ERROR),CNT=1
"RTN","XUMFXI",33,0)
 S UPDATE=$S(TYPE#2:0,1:1)
"RTN","XUMFXI",34,0)
 S QUERY='UPDATE
"RTN","XUMFXI",35,0)
 S GROUP=$S(UPDATE:0,TYPE[5:1,TYPE[7:1,1:0)
"RTN","XUMFXI",36,0)
 S ARRAY=$S(UPDATE:0,TYPE[3:1,TYPE[7:1,1:0)
"RTN","XUMFXI",37,0)
 S ALL=$S(IEN["ALL":1,1:0)
"RTN","XUMFXI",38,0)
 S PROTOCOL=$G(^TMP("XUMF MFS",$J,"PARAM","PROTOCOL"))
"RTN","XUMFXI",39,0)
 S MFR=$S(UPDATE:0,TYPE>10:1,1:0)
"RTN","XUMFXI",40,0)
 S MFQ=$S(UPDATE:0,'MFR:1,1:0)
"RTN","XUMFXI",41,0)
 S MFK=$S(TYPE=10:1,1:0)
"RTN","XUMFXI",42,0)
 S MTYP=$S(MFR:"HLA",MFK:"HLA",1:"HLS")
"RTN","XUMFXI",43,0)
 ;
"RTN","XUMFXI",44,0)
 ; -- get variables from HL7 package
"RTN","XUMFXI",45,0)
 I $O(HL(""))="" D INIT^HLFNC2(PROTOCOL,.HL)
"RTN","XUMFXI",46,0)
 I $O(HL(""))="" S ERROR="1^"_$P(HL,"^",2) Q
"RTN","XUMFXI",47,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH")),HLSCS=$E(HL("ECH"),4)
"RTN","XUMFXI",48,0)
 ;
"RTN","XUMFXI",49,0)
 Q:ERROR
"RTN","XUMFXI",50,0)
 Q:MFK
"RTN","XUMFXI",51,0)
 ;
"RTN","XUMFXI",52,0)
 ; -- check parameters
"RTN","XUMFXI",53,0)
 I 'QUERY,'UPDATE S ERROR="1^invalid message type" Q
"RTN","XUMFXI",54,0)
 I 'IFN S ERROR="1^invalid file number" Q
"RTN","XUMFXI",55,0)
 I 'IEN,'ALL,'MFK S ERROR="1^invalid IEN" Q
"RTN","XUMFXI",56,0)
 I '$$VFILE^DILFD(IFN) S ERROR="1^invalid file number" Q
"RTN","XUMFXI",57,0)
 I UPDATE,'IEN S ERROR="1^update message requires an IEN" Q
"RTN","XUMFXI",58,0)
 ;
"RTN","XUMFXI",59,0)
 ; -- get root of file
"RTN","XUMFXI",60,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFXI",61,0)
 ;
"RTN","XUMFXI",62,0)
 ; -- if IEN array input, merge with param
"RTN","XUMFXI",63,0)
 I 'ALL,'IEN,$O(IEN(0)) M ^TMP("XUMF MFS",$J,"PARAM","IEN")=IEN
"RTN","XUMFXI",64,0)
 ;
"RTN","XUMFXI",65,0)
 ; -- if CDSYS and ALL get entries
"RTN","XUMFXI",66,0)
 S CDSYS=$G(^TMP("XUMF MFS",$J,"PARAM","CDSYS"))
"RTN","XUMFXI",67,0)
 I ALL,CDSYS'="" D
"RTN","XUMFXI",68,0)
 .S I=0 F  S I=$O(@ROOT@("XUMFIDX",CDSYS,I)) Q:'I  D
"RTN","XUMFXI",69,0)
 ..S J=$O(@ROOT@("XUMFIDX",CDSYS,I,0))
"RTN","XUMFXI",70,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","IEN",J)=""
"RTN","XUMFXI",71,0)
 ;
"RTN","XUMFXI",72,0)
 ; -- get ALL file 'national' entries
"RTN","XUMFXI",73,0)
 I ALL,'$D(^TMP("XUMF MFS",$J,"PARAM","IEN")) D
"RTN","XUMFXI",74,0)
 .S I=0 F  S I=$O(@ROOT@("AVUID",I)) Q:'I  D
"RTN","XUMFXI",75,0)
 ..S J=$O(@ROOT@("AVUID",I,0))
"RTN","XUMFXI",76,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","IEN",J)=""
"RTN","XUMFXI",77,0)
 ;
"RTN","XUMFXI",78,0)
 Q
"RTN","XUMFXI",79,0)
 ;
"RTN","XUMFXI",80,0)
BUILD ; -- build message
"RTN","XUMFXI",81,0)
 ;
"RTN","XUMFXI",82,0)
 I MFK D MFK Q
"RTN","XUMFXI",83,0)
 ;
"RTN","XUMFXI",84,0)
 Q:ERROR
"RTN","XUMFXI",85,0)
 ;
"RTN","XUMFXI",86,0)
 N ID,APP,EVENT,ENDT,EFFDT,RESP,MFI,MFN,EDT,CODE,MFE
"RTN","XUMFXI",87,0)
 ;
"RTN","XUMFXI",88,0)
 I QUERY D QRD Q:MFQ
"RTN","XUMFXI",89,0)
 ;
"RTN","XUMFXI",90,0)
 D MFI
"RTN","XUMFXI",91,0)
 ;
"RTN","XUMFXI",92,0)
 I GROUP D GROUP Q
"RTN","XUMFXI",93,0)
 ;
"RTN","XUMFXI",94,0)
 D MFE,RDT
"RTN","XUMFXI",95,0)
 ;
"RTN","XUMFXI",96,0)
 Q
"RTN","XUMFXI",97,0)
 ;
"RTN","XUMFXI",98,0)
MFK ; -- master file acknowledgement
"RTN","XUMFXI",99,0)
 ;
"RTN","XUMFXI",100,0)
 N X
"RTN","XUMFXI",101,0)
 S X="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")_HLFS_$P(ERROR,U,2)
"RTN","XUMFXI",102,0)
 S ^TMP(MTYP,$J,CNT)=X
"RTN","XUMFXI",103,0)
 S CNT=CNT+1
"RTN","XUMFXI",104,0)
 ;
"RTN","XUMFXI",105,0)
 Q
"RTN","XUMFXI",106,0)
 ;
"RTN","XUMFXI",107,0)
QRD ; -- query definition segment
"RTN","XUMFXI",108,0)
 ;
"RTN","XUMFXI",109,0)
 I TYPE>10 D
"RTN","XUMFXI",110,0)
 .S ^TMP(MTYP,$J,CNT)="MSA"_HLFS_$S(ERROR:"AE",1:"AA")_HLFS_HL("MID")
"RTN","XUMFXI",111,0)
 .S CNT=CNT+1
"RTN","XUMFXI",112,0)
 ;
"RTN","XUMFXI",113,0)
 Q:ERROR
"RTN","XUMFXI",114,0)
 ;
"RTN","XUMFXI",115,0)
 N QDT,QFC,QP,QID,ZDRT,ZDRDT,QLR,WHO,WHAT,WDDC,WDCVQ,QRL,QRD
"RTN","XUMFXI",116,0)
 ;
"RTN","XUMFXI",117,0)
 S QDT=$G(^TMP("XUMF MFS",$J,"PARAM","QDT"))
"RTN","XUMFXI",118,0)
 S QFC=$G(^TMP("XUMF MFS",$J,"PARAM","QFC"))
"RTN","XUMFXI",119,0)
 S QP=$G(^TMP("XUMF MFS",$J,"PARAM","QP"))
"RTN","XUMFXI",120,0)
 S QID=$G(^TMP("XUMF MFS",$J,"PARAM","QID"))
"RTN","XUMFXI",121,0)
 S ZDRT=$G(^TMP("XUMF MFS",$J,"PARAM","DRT"))
"RTN","XUMFXI",122,0)
 S ZDRDT=$G(^TMP("XUMF MFS",$J,"PARAM","DRDT"))
"RTN","XUMFXI",123,0)
 S QLR=$G(^TMP("XUMF MFS",$J,"PARAM","QLR"))
"RTN","XUMFXI",124,0)
 S WHO=$G(^TMP("XUMF MFS",$J,"PARAM","WHO"))
"RTN","XUMFXI",125,0)
 S WHAT=$G(^TMP("XUMF MFS",$J,"PARAM","WHAT"))
"RTN","XUMFXI",126,0)
 S WDDC=$G(^TMP("XUMF MFS",$J,"PARAM","WDDC"))
"RTN","XUMFXI",127,0)
 S WDCVQ=$G(^TMP("XUMF MFS",$J,"PARAM","WDCVQ"))
"RTN","XUMFXI",128,0)
 S QRL=$G(^TMP("XUMF MFS",$J,"PARAM","QRL"))
"RTN","XUMFXI",129,0)
 S QRD="QRD"_HLFS_QDT_HLFS_QFC_HLFS_QP_HLFS_QID_HLFS_ZDRT_HLFS_ZDRDT
"RTN","XUMFXI",130,0)
 S QRD=QRD_HLFS_QLR_HLFS_WHO_HLFS_WHAT_HLFS_WDDC_HLFS_WDCVQ_HLFS_QRL
"RTN","XUMFXI",131,0)
 S ^TMP(MTYP,$J,CNT)=QRD
"RTN","XUMFXI",132,0)
 S CNT=CNT+1
"RTN","XUMFXI",133,0)
 ;
"RTN","XUMFXI",134,0)
 Q
"RTN","XUMFXI",135,0)
 ;
"RTN","XUMFXI",136,0)
MFI ; master file identifier segment
"RTN","XUMFXI",137,0)
 ;
"RTN","XUMFXI",138,0)
 Q:ERROR
"RTN","XUMFXI",139,0)
 ;
"RTN","XUMFXI",140,0)
 N ID,APP,EVENT,ENDT,EFFDT,RESP,MFI
"RTN","XUMFXI",141,0)
 ;
"RTN","XUMFXI",142,0)
 S ID=$G(^TMP("XUMF MFS",$J,"PARAM","MFI"))
"RTN","XUMFXI",143,0)
 S APP=$G(^TMP("XUMF MFS",$J,"PARAM","MFAI"))
"RTN","XUMFXI",144,0)
 S EVENT=$G(^TMP("XUMF MFS",$J,"PARAM","FLEV"))
"RTN","XUMFXI",145,0)
 S ENDT=$G(^TMP("XUMF MFS",$J,"PARAM","ENDT"))
"RTN","XUMFXI",146,0)
 S EFFDT=$G(^TMP("XUMF MFS",$J,"PARAM","MFIEDT"))
"RTN","XUMFXI",147,0)
 S RESP=$G(^TMP("XUMF MFS",$J,"PARAM","RLC"))
"RTN","XUMFXI",148,0)
 S:APP="" APP="MFS" S:EVENT="" EVENT="REP" S:RESP="" RESP="NE"
"RTN","XUMFXI",149,0)
 S:ENDT="" ENDT=$$NOW^XLFDT S:EFFDT="" EFFDT=$$NOW^XLFDT
"RTN","XUMFXI",150,0)
 S MFI=$$MFI^XUMFMFI(ID,APP,EVENT,ENDT,EFFDT,RESP)
"RTN","XUMFXI",151,0)
 I $E(MFI)="-" S ERROR=MFI Q
"RTN","XUMFXI",152,0)
 S ^TMP(MTYP,$J,CNT)=MFI
"RTN","XUMFXI",153,0)
 S CNT=CNT+1
"RTN","XUMFXI",154,0)
 ;
"RTN","XUMFXI",155,0)
 Q
"RTN","XUMFXI",156,0)
 ;
"RTN","XUMFXI",157,0)
MFE ; master file entry segment
"RTN","XUMFXI",158,0)
 ;
"RTN","XUMFXI",159,0)
 Q:ERROR
"RTN","XUMFXI",160,0)
 ;
"RTN","XUMFXI",161,0)
 N EVENT,MFN,EDT,CODE,MFE
"RTN","XUMFXI",162,0)
 ;
"RTN","XUMFXI",163,0)
 S EVENT=$G(^TMP("XUMF MFS",$J,"PARAM","RLEC"))
"RTN","XUMFXI",164,0)
 S MFN=$G(^TMP("XUMF MFS",$J,"PARAM","MFNCID"))
"RTN","XUMFXI",165,0)
 S EDT=$G(^TMP("XUMF MFS",$J,"PARAM","MFEEDT"))
"RTN","XUMFXI",166,0)
 S CODE=$G(^TMP("XUMF MFS",$J,"PARAM","PKV"))
"RTN","XUMFXI",167,0)
 S:EDT="" EDT=$$NOW^XLFDT S:EVENT="" EVENT="MAD"
"RTN","XUMFXI",168,0)
 S MFE=$$MFE^XUMFMFE(EVENT,MFN,EDT,CODE)
"RTN","XUMFXI",169,0)
 I $E(MFE)="-" S ERROR=MFE Q
"RTN","XUMFXI",170,0)
 S ^TMP(MTYP,$J,CNT)=MFE
"RTN","XUMFXI",171,0)
 S CNT=CNT+1
"RTN","XUMFXI",172,0)
 ;
"RTN","XUMFXI",173,0)
 Q
"RTN","XUMFXI",174,0)
 ;
"RTN","XUMFXI",175,0)
RDT ; table row definition/data segment
"RTN","XUMFXI",176,0)
 ;
"RTN","XUMFXI",177,0)
 Q:ERROR
"RTN","XUMFXI",178,0)
 ;
"RTN","XUMFXI",179,0)
 N SEG,SEQ,ZZZ,FLD,FILE,IENS,VALUE,ERR,ZDTYP,FIELD,SEQ1,SEQ2,SEQ3
"RTN","XUMFXI",180,0)
 N SEQ0,SEQ9,CNT1,CNT2,NODE,XXX,LKUP
"RTN","XUMFXI",181,0)
 ;
"RTN","XUMFXI",182,0)
 S SEQ=0
"RTN","XUMFXI",183,0)
 F  S SEQ=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFXI",184,0)
 .;
"RTN","XUMFXI",185,0)
 .S FLD=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,0))
"RTN","XUMFXI",186,0)
 .;
"RTN","XUMFXI",187,0)
 .I 'FLD D
"RTN","XUMFXI",188,0)
 ..S FILE=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")
"RTN","XUMFXI",189,0)
 ..S IENS=$G(^TMP("XUMF MFS",$J,"PARAM","IENS",SEQ))
"RTN","XUMFXI",190,0)
 ..S FIELD=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")
"RTN","XUMFXI",191,0)
 ..S ZDTYP=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")
"RTN","XUMFXI",192,0)
 ..S LKUP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"LKUP"))
"RTN","XUMFXI",193,0)
 ..I LKUP S FIELD=FIELD_":"_LKUP
"RTN","XUMFXI",194,0)
 ..S VALUE=$$GET1^DIQ(FILE,IENS,FIELD)
"RTN","XUMFXI",195,0)
 ..S VALUE=$$DTYP^XUMFXP(VALUE,ZDTYP,HLCS,1)
"RTN","XUMFXI",196,0)
 .I FLD D
"RTN","XUMFXI",197,0)
 ..S ZDTYP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FLD))
"RTN","XUMFXI",198,0)
 ..S LKUP=$P(ZDTYP,U,2),ZDTYP=$P(ZDTYP,U)
"RTN","XUMFXI",199,0)
 ..I LKUP S FLD=FLD_":"_LKUP
"RTN","XUMFXI",200,0)
 ..S VALUE=$$GET1^DIQ(IFN,IEN_",",FLD)
"RTN","XUMFXI",201,0)
 ..S VALUE=$$DTYP^XUMFXP(VALUE,ZDTYP,HLCS,1)
"RTN","XUMFXI",202,0)
 .;
"RTN","XUMFXI",203,0)
 .S ZZZ(SEQ)=VALUE
"RTN","XUMFXI",204,0)
 ;
"RTN","XUMFXI",205,0)
 K NODE
"RTN","XUMFXI",206,0)
 S (SEQ,SEQ0,SEQ9,SEQ1,CNT1)=0,NODE(0)=""
"RTN","XUMFXI",207,0)
 F  S SEQ1=$O(ZZZ(SEQ1)) Q:'SEQ1  D
"RTN","XUMFXI",208,0)
 .S VALUE=ZZZ(SEQ1)
"RTN","XUMFXI",209,0)
 .I $L(NODE(CNT1)_VALUE)>200 D
"RTN","XUMFXI",210,0)
 ..S CNT1=CNT1+1,SEQ9=SEQ0+SEQ9
"RTN","XUMFXI",211,0)
 .S SEQ=$S('CNT1:SEQ1,1:SEQ1-SEQ9)
"RTN","XUMFXI",212,0)
 .S $P(NODE(CNT1),HLFS,SEQ)=VALUE
"RTN","XUMFXI",213,0)
 .S SEQ0=SEQ-1
"RTN","XUMFXI",214,0)
 ;
"RTN","XUMFXI",215,0)
 S NODE="RDT"_HLFS_$G(NODE(0)) K NODE(0)
"RTN","XUMFXI",216,0)
 ;
"RTN","XUMFXI",217,0)
 M ^TMP(MTYP,$J,CNT)=^TMP("XUMF MFS",$J,"PARAM","RDF")
"RTN","XUMFXI",218,0)
 S CNT=CNT+1
"RTN","XUMFXI",219,0)
 M ^TMP(MTYP,$J,CNT)=NODE
"RTN","XUMFXI",220,0)
 S CNT=CNT+1
"RTN","XUMFXI",221,0)
 ;
"RTN","XUMFXI",222,0)
 Q
"RTN","XUMFXI",223,0)
 ;
"RTN","XUMFXI",224,0)
GROUP ; -- query group records
"RTN","XUMFXI",225,0)
 ;
"RTN","XUMFXI",226,0)
 Q:ERROR
"RTN","XUMFXI",227,0)
 ;
"RTN","XUMFXI",228,0)
 S IEN=0
"RTN","XUMFXI",229,0)
 F  S IEN=$O(^TMP("XUMF MFS",$J,"PARAM","IEN",IEN)) Q:'IEN  D
"RTN","XUMFXI",230,0)
 .K ^TMP("XUMF MFS",$J,"PARAM","PKV")
"RTN","XUMFXI",231,0)
 .K ^TMP("XUMF MFS",$J,"PARAM","IENS")
"RTN","XUMFXI",232,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","PKV")=^TMP("XUMF MFS",$J,"PARAM",IEN,"PKV")
"RTN","XUMFXI",233,0)
 .M ^TMP("XUMF MFS",$J,"PARAM","IENS")=^TMP("XUMF MFS",$J,"PARAM",IEN,"IENS")
"RTN","XUMFXI",234,0)
 .D MFE,RDT
"RTN","XUMFXI",235,0)
 ;
"RTN","XUMFXI",236,0)
 Q
"RTN","XUMFXI",237,0)
 ;
"RTN","XUMFXI",238,0)
SEND ; -- send HL7 message
"RTN","XUMFXI",239,0)
 ;
"RTN","XUMFXI",240,0)
 I 'MFK,ERROR Q
"RTN","XUMFXI",241,0)
 ;
"RTN","XUMFXI",242,0)
 S HLP("PRIORITY")="I"
"RTN","XUMFXI",243,0)
 ;
"RTN","XUMFXI",244,0)
 I 'TYPE D GENERATE^HLMA(PROTOCOL,"GM",1,.HLRESLT,"",.HLP)
"RTN","XUMFXI",245,0)
 I TYPE,(TYPE<10) D DIRECT^HLMA(PROTOCOL,"GM",1,.HLRESLT,"",.HLP)
"RTN","XUMFXI",246,0)
 I (TYPE>9) D GENACK^HLMA1($G(HL("EID")),$G(HLMTIENS),$G(HL("EIDS")),"GM",1,.HLRESLT)
"RTN","XUMFXI",247,0)
 ;
"RTN","XUMFXI",248,0)
 ; check for error
"RTN","XUMFXI",249,0)
 I ($P($G(HLRESLT),U,3)'="") D  Q
"RTN","XUMFXI",250,0)
 .S ERROR=1_U_$P(HLRESLT,HLFS,3)_U_$P(HLRESLT,HLFS,2)_U_$P(HLRESLT,U)
"RTN","XUMFXI",251,0)
 ;
"RTN","XUMFXI",252,0)
 ; successful call, message ID returned
"RTN","XUMFXI",253,0)
 S ERROR="0^"_$P($G(HLRESLT),U,1)
"RTN","XUMFXI",254,0)
 ;
"RTN","XUMFXI",255,0)
 Q
"RTN","XUMFXI",256,0)
 ;
"RTN","XUMFXI",257,0)
EXIT ; -- exit
"RTN","XUMFXI",258,0)
 ;
"RTN","XUMFXI",259,0)
 D CLEAN^DILF
"RTN","XUMFXI",260,0)
 ;
"RTN","XUMFXI",261,0)
 K ^TMP("HLS",$J),^TMP("HLA",$J)
"RTN","XUMFXI",262,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFXI",263,0)
 ;
"RTN","XUMFXI",264,0)
 Q
"RTN","XUMFXI",265,0)
 ;
"RTN","XUMFXI",266,0)
LLNK ; -- dynamic addressing BROADCAST
"RTN","XUMFXI",267,0)
 ;
"RTN","XUMFXI",268,0)
 Q:TYPE>9
"RTN","XUMFXI",269,0)
 ;
"RTN","XUMFXI",270,0)
 I $G(^TMP("XUMF MFS",$J,"PARAM","LLNK"))'="" D  Q
"RTN","XUMFXI",271,0)
 .S HLL("LINKS",1)=^TMP("XUMF MFS",$J,"PARAM","LLNK")
"RTN","XUMFXI",272,0)
 ;
"RTN","XUMFXI",273,0)
 Q:'$$SERVER()
"RTN","XUMFXI",274,0)
 ;
"RTN","XUMFXI",275,0)
 Q:TYPE
"RTN","XUMFXI",276,0)
 Q:'$G(^TMP("XUMF MFS",$J,"PARAM","BROADCAST"))
"RTN","XUMFXI",277,0)
 ;
"RTN","XUMFXI",278,0)
 N I,J,LLNK
"RTN","XUMFXI",279,0)
 ;
"RTN","XUMFXI",280,0)
 S (I,J)=0
"RTN","XUMFXI",281,0)
 F  S I=$O(^HLCS(870,"C",I)) Q:'I  D
"RTN","XUMFXI",282,0)
 .S J=$O(^HLCS(870,"C",I,0)) Q:'J
"RTN","XUMFXI",283,0)
 .S LLNK=$P($G(^HLCS(870,J,0)),U)
"RTN","XUMFXI",284,0)
 .S HLL("LINKS",I)="XUMF MFS^"_LLNK
"RTN","XUMFXI",285,0)
 ;
"RTN","XUMFXI",286,0)
 Q
"RTN","XUMFXI",287,0)
 ;
"RTN","XUMFXI",288,0)
SERVER() ; -- servers
"RTN","XUMFXI",289,0)
 ;
"RTN","XUMFXI",290,0)
 N I
"RTN","XUMFXI",291,0)
 ;
"RTN","XUMFXI",292,0)
 S I=$$KSP^XUPARAM("INST") Q:'I 0
"RTN","XUMFXI",293,0)
 ;
"RTN","XUMFXI",294,0)
 Q:I=662 1  ;VAB
"RTN","XUMFXI",295,0)
 Q:I=442 1  ;BP TEST
"RTN","XUMFXI",296,0)
 Q:I=12000 1  ;FORUM
"RTN","XUMFXI",297,0)
 Q:I=100002 1  ;HEC
"RTN","XUMFXI",298,0)
 ;
"RTN","XUMFXI",299,0)
 Q 0
"RTN","XUMFXI",300,0)
 ;
"RTN","XUMFXP")
0^15^B17509486
"RTN","XUMFXP",1,0)
XUMFXP ;ISS/RAM - Master File Parameters ; 10/11/02 2:50pm
"RTN","XUMFXP",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXP",3,0)
 ;
"RTN","XUMFXP",4,0)
 ;
"RTN","XUMFXP",5,0)
 ;
"RTN","XUMFXP",6,0)
MAIN(IFN,IEN,TYPE,PARAM,ERROR) ; -- parameters for master file server
"RTN","XUMFXP",7,0)
 ;
"RTN","XUMFXP",8,0)
 ;INPUT
"RTN","XUMFXP",9,0)
 ;       IFN             Internal File Number (required)
"RTN","XUMFXP",10,0)
 ;
"RTN","XUMFXP",11,0)
 ;       IEN             Internal Entry Number (required)
"RTN","XUMFXP",12,0)
 ;
"RTN","XUMFXP",13,0)
 ;                       single entry (pass by value) example: IEN=1
"RTN","XUMFXP",14,0)
 ;
"RTN","XUMFXP",15,0)
 ;                       multiple entries (pass by reference)  IEN(1)=""
"RTN","XUMFXP",16,0)
 ;                                                             IEN(2)=""
"RTN","XUMFXP",17,0)
 ;
"RTN","XUMFXP",18,0)
 ;                       ALL national entries (pass by value)  IEN="ALL"
"RTN","XUMFXP",19,0)
 ;
"RTN","XUMFXP",20,0)
 ;                       NEW entry (pass by value)             IEN="NEW"
"RTN","XUMFXP",21,0)
 ;
"RTN","XUMFXP",22,0)
 ;       TYPE            Message TYPE (required)
"RTN","XUMFXP",23,0)
 ;
"RTN","XUMFXP",24,0)
 ;                       0  = MFN - unsolicited update
"RTN","XUMFXP",25,0)
 ;                       1  = MFQ - query particular record and file
"RTN","XUMFXP",26,0)
 ;                       3  = MFQ - query particular record in array
"RTN","XUMFXP",27,0)
 ;                       5  = MFQ - query group records file
"RTN","XUMFXP",28,0)
 ;                       7  = MFQ - query group records array
"RTN","XUMFXP",29,0)
 ;                       11 = MFR - query response particular rec file
"RTN","XUMFXP",30,0)
 ;                       13 = MFR - query response particular rec array
"RTN","XUMFXP",31,0)
 ;                       15 = MFR - query response group records file
"RTN","XUMFXP",32,0)
 ;                       17 = MFR - query response group records array
"RTN","XUMFXP",33,0)
 ;
"RTN","XUMFXP",34,0)
 ;
"RTN","XUMFXP",35,0)
 ;INPUT/OUTPUT
"RTN","XUMFXP",36,0)
 ;
"RTN","XUMFXP",37,0)
 ;       PARAM("PROTOCOL")       IEN Protocol (#101) file
"RTN","XUMFXP",38,0)
 ;       PARAM("LLNK")           HLL("LINKS",n) 'protocol^logical link'
"RTN","XUMFXP",39,0)
 ;       PARAM("CDSYS")          Coding System - if mult cod sys for
"RTN","XUMFXP",40,0)
 ;                               table - use XUMFIDX x-ref for CDSYS
"RTN","XUMFXP",41,0)
 ;
"RTN","XUMFXP",42,0)
 ;       QRD -- Query definition segment
"RTN","XUMFXP",43,0)
 ;       -------------------------------
"RTN","XUMFXP",44,0)
 ;       PARAM("QDT")            Query Date/Time
"RTN","XUMFXP",45,0)
 ;       PARAM("QFC")            Query Format Code
"RTN","XUMFXP",46,0)
 ;       PARAM("QP")             Query Priority
"RTN","XUMFXP",47,0)
 ;       PARAM("QID")            Query ID
"RTN","XUMFXP",48,0)
 ;       PARAM("DRT")            Deferred Response Type
"RTN","XUMFXP",49,0)
 ;       PARAM("DRDT")           Deferred Response Date/Time
"RTN","XUMFXP",50,0)
 ;       PARAM("QLR")            Quantity Limited Request
"RTN","XUMFXP",51,0)
 ;       PARAM("WHO")            Who Subject Filter
"RTN","XUMFXP",52,0)
 ;       PARAM("WHAT")           What Subject Filter
"RTN","XUMFXP",53,0)
 ;       PARAM("WDDC")           What Department Data Code
"RTN","XUMFXP",54,0)
 ;       PARAM("WDCVQ")          What Data Code Value Qual
"RTN","XUMFXP",55,0)
 ;       PARAM("QRL")            Query Results Level
"RTN","XUMFXP",56,0)
 ;
"RTN","XUMFXP",57,0)
 ;       MFI -- Master File Identification
"RTN","XUMFXP",58,0)
 ;       ---------------------------------
"RTN","XUMFXP",59,0)
 ;       PARAM("MFI")            Master File Identifier
"RTN","XUMFXP",60,0)
 ;       PARAM("MFAI")           Master File Application Identifier
"RTN","XUMFXP",61,0)
 ;                                 if MFAI contains TEMP do not store
"RTN","XUMFXP",62,0)
 ;                                 values in FileMan but parse into
"RTN","XUMFXP",63,0)
 ;                                 ^TEMP("XUMF ARRAY",$J, global
"RTN","XUMFXP",64,0)
 ;       PARAM("FLEC")           File-Level Event Code
"RTN","XUMFXP",65,0)
 ;       PARAM("ENDT")           Entered Data/Time
"RTN","XUMFXP",66,0)
 ;       PARAM("MFIEDT")         Effective Date/Time
"RTN","XUMFXP",67,0)
 ;       PARAM("RLC")            Response Level Code
"RTN","XUMFXP",68,0)
 ; 
"RTN","XUMFXP",69,0)
 ;       MFE -- Master File Entry
"RTN","XUMFXP",70,0)
 ;       ------------------------
"RTN","XUMFXP",71,0)
 ;       PARAM("RLEC")           Record-Level Event Code
"RTN","XUMFXP",72,0)
 ;       PARAM("MFNCID")         MFN Control ID
"RTN","XUMFXP",73,0)
 ;       PARAM("MFEEDT")         Effective Date/Time
"RTN","XUMFXP",74,0)
 ;       PARAM("PKV")            Primary Key Value
"RTN","XUMFXP",75,0)
 ;
"RTN","XUMFXP",76,0)
 ;       segment(s) parameters
"RTN","XUMFXP",77,0)
 ;       -------------------------
"RTN","XUMFXP",78,0)
 ;       PARAM("SEQ",SEQ,FLD#)=hl7_dataType
"RTN","XUMFXP",79,0)
 ;    If the FIELD is a pointer add ":" + extended reference
"RTN","XUMFXP",80,0)
 ;    lookup field (if other than .01) after HL7 data type.
"RTN","XUMFXP",81,0)
 ;
"RTN","XUMFXP",82,0)
 ;       Files involving sub-records and/or extended reference
"RTN","XUMFXP",83,0)
 ;       -----------------------------------------------------
"RTN","XUMFXP",84,0)
 ;       PARAM("SEQ",SEQ,"FILE")       See FM documentation
"RTN","XUMFXP",85,0)
 ;       PARAM("SEQ",SEQ,"IENS")       $$GET1^DIQ() for value
"RTN","XUMFXP",86,0)
 ;       PARAM("SEQ",SEQ,"FIELD")      of FILE, IENS, & FIELD.
"RTN","XUMFXP",87,0)
 ;
"RTN","XUMFXP",88,0)
 ;       PARAM("SEQ",SEQ,"DTYP")      HL7 data type
"RTN","XUMFXP",89,0)
 ;       PRAAM("SEQ",SEQ,"LKUP")      extended reference lookup field
"RTN","XUMFXP",90,0)
 ;
"RTN","XUMFXP",91,0)
 ;       and another node is required for sub-file IENS for group
"RTN","XUMFXP",92,0)
 ;       ^TMP("XUMF MFS",$J,"PARAM",IEN,"IENS",SEQ)=IENS
"RTN","XUMFXP",93,0)
 ;
"RTN","XUMFXP",94,0)
 ;       NOTE: OUTPUT in ^TMP("XUMF MFS",$J,"PARAM")
"RTN","XUMFXP",95,0)
 ;
"RTN","XUMFXP",96,0)
 ;       Example: MFE PKV is ^TMP("XUMF MFS",$J,"PARAM",IEN,"PKV")
"RTN","XUMFXP",97,0)
 ;
"RTN","XUMFXP",98,0)
 ;
"RTN","XUMFXP",99,0)
 N QUERY,UPDATE,ALL,MFR,MFQ,HLFS,HLCS,GROUP,ARRAY,ROOT,NEW,I,J,CDSYS
"RTN","XUMFXP",100,0)
 N PROTOCOL,MFK
"RTN","XUMFXP",101,0)
 ;
"RTN","XUMFXP",102,0)
 K ^TMP("XUMF MFS",$J)
"RTN","XUMFXP",103,0)
 M ^TMP("XUMF MFS",$J,"PARAM")=PARAM
"RTN","XUMFXP",104,0)
 ;
"RTN","XUMFXP",105,0)
 S IEN=$G(IEN),IFN=$G(IFN)
"RTN","XUMFXP",106,0)
 S TYPE=+$G(TYPE),ERROR=$G(ERROR)
"RTN","XUMFXP",107,0)
 S UPDATE=$S(TYPE#2:0,1:1)
"RTN","XUMFXP",108,0)
 S QUERY='UPDATE
"RTN","XUMFXP",109,0)
 S GROUP=$S(UPDATE:0,TYPE[5:1,TYPE[7:1,1:0)
"RTN","XUMFXP",110,0)
 S ARRAY=$S(UPDATE:0,TYPE[3:1,TYPE[7:1,1:0)
"RTN","XUMFXP",111,0)
 S ALL=$S(IEN="ALL":1,1:0)
"RTN","XUMFXP",112,0)
 S NEW=$S(IEN="NEW":1,1:0)
"RTN","XUMFXP",113,0)
 S MFR=$S(UPDATE:0,TYPE>10:1,1:0)
"RTN","XUMFXP",114,0)
 S MFQ=$S(UPDATE:0,'MFR:1,1:0)
"RTN","XUMFXP",115,0)
 S MFK=$S(TYPE=10:1,1:0)
"RTN","XUMFXP",116,0)
 ;
"RTN","XUMFXP",117,0)
 Q:MFK
"RTN","XUMFXP",118,0)
 ;
"RTN","XUMFXP",119,0)
 S PROTOCOL=$G(PARAM("PROTOCOL"))
"RTN","XUMFXP",120,0)
 ;
"RTN","XUMFXP",121,0)
 I 'IFN S ERROR="1^invalid IFN" Q
"RTN","XUMFXP",122,0)
 ;
"RTN","XUMFXP",123,0)
 ; -- get root of file
"RTN","XUMFXP",124,0)
 S ROOT=$$ROOT^DILFD(IFN,,1)
"RTN","XUMFXP",125,0)
 ;
"RTN","XUMFXP",126,0)
 ; -- if IEN array input, merge with param
"RTN","XUMFXP",127,0)
 I 'ALL,'IEN,$O(IEN(0)) M ^TMP("XUMF MFS",$J,"PARAM","IEN")=IEN
"RTN","XUMFXP",128,0)
 ;
"RTN","XUMFXP",129,0)
 ; -- if CDSYS and ALL get entries
"RTN","XUMFXP",130,0)
 S CDSYS=$G(^TMP("XUMF MFS",$J,"PARAM","CDSYS"))
"RTN","XUMFXP",131,0)
 I ALL,CDSYS'="" D
"RTN","XUMFXP",132,0)
 .S I=0 F  S I=$O(@ROOT@("XUMFIDX",CDSYS,I)) Q:'I  D
"RTN","XUMFXP",133,0)
 ..S J=$O(@ROOT@("XUMFIDX",CDSYS,I,0))
"RTN","XUMFXP",134,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","IEN",J)=I
"RTN","XUMFXP",135,0)
 ;
"RTN","XUMFXP",136,0)
 ; -- get ALL file 'national' entries
"RTN","XUMFXP",137,0)
 I ALL,'$D(^TMP("XUMF MFS",$J,"PARAM","IEN")),CDSYS="" D
"RTN","XUMFXP",138,0)
 .S I=0 F  S I=$O(@ROOT@("AVUID",I)) Q:'I  D
"RTN","XUMFXP",139,0)
 ..S J=$O(@ROOT@("AVUID",I,0))
"RTN","XUMFXP",140,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","IEN",J)=I
"RTN","XUMFXP",141,0)
 ;
"RTN","XUMFXP",142,0)
 ; -- get ALL file
"RTN","XUMFXP",143,0)
 I ALL,'$D(^TMP("XUMF MFS",$J,"PARAM","IEN")),CDSYS="" D
"RTN","XUMFXP",144,0)
 .S I=0 F  S I=$O(@ROOT@(I)) Q:'I  D
"RTN","XUMFXP",145,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","IEN",I)=""
"RTN","XUMFXP",146,0)
 ;
"RTN","XUMFXP",147,0)
 I '$D(^DIC(4.001,+IFN)) S ERROR="1^file not supported" Q
"RTN","XUMFXP",148,0)
 ;
"RTN","XUMFXP",149,0)
 D MAIN^XUMFXP1
"RTN","XUMFXP",150,0)
 ;
"RTN","XUMFXP",151,0)
 K PARAM
"RTN","XUMFXP",152,0)
 ;
"RTN","XUMFXP",153,0)
 Q
"RTN","XUMFXP",154,0)
 ;
"RTN","XUMFXP",155,0)
 ;
"RTN","XUMFXP",156,0)
DTYP(VALUE,TYP,HLCS,TOHL7,TIMEZONE) ;data type conversion
"RTN","XUMFXP",157,0)
 ;INPUT
"RTN","XUMFXP",158,0)
 ;   VALUE    value
"RTN","XUMFXP",159,0)
 ;   TYP    HL7 data type
"RTN","XUMFXP",160,0)
 ;   TOHL7   1=to HL7, 0=to FileMan
"RTN","XUMFXP",161,0)
 ;OUTPUT
"RTN","XUMFXP",162,0)
 ;   $$      formatted data
"RTN","XUMFXP",163,0)
 ;
"RTN","XUMFXP",164,0)
 N TEXT,CS
"RTN","XUMFXP",165,0)
 S TYP=$G(TYP),VALUE=$G(VALUE)
"RTN","XUMFXP",166,0)
 S TOHL7=$G(TOHL7),TIMEZONE=$G(TIMEZONE)
"RTN","XUMFXP",167,0)
 Q:TYP="" VALUE Q:VALUE="" VALUE
"RTN","XUMFXP",168,0)
 S TEXT=$P(TYP,U,2),TYP=$P(TYP,U)
"RTN","XUMFXP",169,0)
 I TYP="ST"!(TYP="ID") Q VALUE
"RTN","XUMFXP",170,0)
 I TYP="DT",TOHL7 D  Q $$HLDATE^HLFNC(VALUE)
"RTN","XUMFXP",171,0)
 .N X,Y S X=VALUE D ^%DT S VALUE=+Y
"RTN","XUMFXP",172,0)
 I TYP="DT",$E(VALUE,1,4)="0000" Q $$NOW^XLFDT
"RTN","XUMFXP",173,0)
 I TYP="DT" Q $$HL7TFM^XLFDT(+VALUE,TIMEZONE)
"RTN","XUMFXP",174,0)
 I TYP="ZST" D  Q VALUE
"RTN","XUMFXP",175,0)
 .N IEN5 S IEN5=+$O(^DIC(5,"C",VALUE,""))
"RTN","XUMFXP",176,0)
 .S:IEN5 VALUE=$P($G(^DIC(5,IEN5,0)),"^")
"RTN","XUMFXP",177,0)
 I 'TOHL7 Q $P(VALUE,HLCS)
"RTN","XUMFXP",178,0)
 Q VALUE_$TR(TEXT,"~",HLCS)
"RTN","XUMFXP",179,0)
 ;
"RTN","XUMFXP1")
0^16^B16832935
"RTN","XUMFXP1",1,0)
XUMFXP1 ;ISS/RAM - MFS parameters ;06/28/00
"RTN","XUMFXP1",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXP1",3,0)
 ;
"RTN","XUMFXP1",4,0)
 ;
"RTN","XUMFXP1",5,0)
 ; This routine sets up the parameters required by the
"RTN","XUMFXP1",6,0)
 ; Master File server mechanism.
"RTN","XUMFXP1",7,0)
 ;
"RTN","XUMFXP1",8,0)
 ;  ** This routine is not a supported interface -- use XUMFXP **
"RTN","XUMFXP1",9,0)
 ;
"RTN","XUMFXP1",10,0)
 ;  See XUMFXP for parameter list documentation
"RTN","XUMFXP1",11,0)
 ;
"RTN","XUMFXP1",12,0)
 Q
"RTN","XUMFXP1",13,0)
 ;
"RTN","XUMFXP1",14,0)
MAIN ; -- main
"RTN","XUMFXP1",15,0)
 ;
"RTN","XUMFXP1",16,0)
 N PKV,HLFS,HLCS,RT,RF,SEQ,PRE,POST,LKUP,RDF,NUM,HLREP,IDX,XXX,YYY,X,Y
"RTN","XUMFXP1",17,0)
 ;
"RTN","XUMFXP1",18,0)
 I 'PROTOCOL D
"RTN","XUMFXP1",19,0)
 .;S:UPDATE PROTOCOL=$$FIND1^DIC(101,,"B","DS Pub Man~~L")
"RTN","XUMFXP1",20,0)
 .S:UPDATE PROTOCOL=$$FIND1^DIC(101,,"B","XUMFX SERVER")
"RTN","XUMFXP1",21,0)
 .S:QUERY PROTOCOL=$$FIND1^DIC(101,,"B","XUMF MFQ")
"RTN","XUMFXP1",22,0)
 S:'PROTOCOL ERROR="1^invalid protocol" Q:ERROR
"RTN","XUMFXP1",23,0)
 S ^TMP("XUMF MFS",$J,"PARAM","PROTOCOL")=PROTOCOL
"RTN","XUMFXP1",24,0)
 ;
"RTN","XUMFXP1",25,0)
 I $O(HL(""))="" D
"RTN","XUMFXP1",26,0)
 .D INIT^HLFNC2(PROTOCOL,.HL)
"RTN","XUMFXP1",27,0)
 I $O(HL(""))="" S ERROR="1^"_$P(HL,U,2) Q
"RTN","XUMFXP1",28,0)
 S HLFS=HL("FS"),HLCS=$E(HL("ECH")),HLREP=$E(HL("ECH"),2)
"RTN","XUMFXP1",29,0)
 ;
"RTN","XUMFXP1",30,0)
 Q:$G(MFK)
"RTN","XUMFXP1",31,0)
 ;
"RTN","XUMFXP1",32,0)
 I QUERY D QRD^XUMFXP2
"RTN","XUMFXP1",33,0)
 ;
"RTN","XUMFXP1",34,0)
 ; MFI -- Master File Identification
"RTN","XUMFXP1",35,0)
 ;
"RTN","XUMFXP1",36,0)
 ;Master File Identifier
"RTN","XUMFXP1",37,0)
 ;S ^TMP("XUMF MFS",$J,"PARAM","MFI")=$P($G(^DIC(4.001,+IFN,0)),U,3)
"RTN","XUMFXP1",38,0)
 S ^TMP("XUMF MFS",$J,"PARAM","MFI")=+IFN
"RTN","XUMFXP1",39,0)
 ;Application Identifier
"RTN","XUMFXP1",40,0)
 S ^TMP("XUMF MFS",$J,"PARAM","MFAI")=$G(^TMP("XUMF MFS",$J,"PARAM","MFAI"))
"RTN","XUMFXP1",41,0)
 ;File-Level Event Code
"RTN","XUMFXP1",42,0)
 S ^TMP("XUMF MFS",$J,"PARAM","FLEC")="UPD"
"RTN","XUMFXP1",43,0)
 ;Entered Data/Time
"RTN","XUMFXP1",44,0)
 S ^TMP("XUMF MFS",$J,"PARAM","ENDT")=""
"RTN","XUMFXP1",45,0)
 ;Effective Date/Time
"RTN","XUMFXP1",46,0)
 S ^TMP("XUMF MFS",$J,"PARAM","MFIEDT")=""
"RTN","XUMFXP1",47,0)
 ;Response Level Code
"RTN","XUMFXP1",48,0)
 S ^TMP("XUMF MFS",$J,"PARAM","RLC")="NE"
"RTN","XUMFXP1",49,0)
 ;
"RTN","XUMFXP1",50,0)
 ; MFE -- Master File Entry
"RTN","XUMFXP1",51,0)
 ;
"RTN","XUMFXP1",52,0)
 ;Record-Level Event Code
"RTN","XUMFXP1",53,0)
 I $G(^TMP("XUMF MFS",$J,"PARAM","RLEC"))="" D
"RTN","XUMFXP1",54,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","RLEC")="MUP"
"RTN","XUMFXP1",55,0)
 ;MFN Control ID
"RTN","XUMFXP1",56,0)
 S ^TMP("XUMF MFS",$J,"PARAM","MFNCID")=""
"RTN","XUMFXP1",57,0)
 ;Effective Date/Time
"RTN","XUMFXP1",58,0)
 I $G(^TMP("XUMF MFS",$J,"PARAM","MFEEDT"))="" D
"RTN","XUMFXP1",59,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","MFEEDT")=$$HLDATE^HLFNC($$NOW^XLFDT)
"RTN","XUMFXP1",60,0)
 ;
"RTN","XUMFXP1",61,0)
SEG ; -- data segment
"RTN","XUMFXP1",62,0)
 ;
"RTN","XUMFXP1",63,0)
 ;FOR MULTIPLE FIELDS
"RTN","XUMFXP1",64,0)
 ;
"RTN","XUMFXP1",65,0)
 ; MKEY is defined only when .01 is not passed in HL7 segment
"RTN","XUMFXP1",66,0)
 ; but is some constant string (like VISN in INSTITUTION assoc mult).
"RTN","XUMFXP1",67,0)
 ; MKEY and MULT evaluate FALSE.
"RTN","XUMFXP1",68,0)
 ;
"RTN","XUMFXP1",69,0)
 ; MULT is set to field number # for SEQ.  SEQ=.01 set to itself.
"RTN","XUMFXP1",70,0)
 ; MULT set to .01 field #.  MULT is TRUE.  MKEY undefined.
"RTN","XUMFXP1",71,0)
 ;
"RTN","XUMFXP1",72,0)
 I IEN D
"RTN","XUMFXP1",73,0)
 .S PKV=$$PKV^XUMFX(IFN,IEN,HLCS)
"RTN","XUMFXP1",74,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","PKV")=PKV
"RTN","XUMFXP1",75,0)
 I NEW D
"RTN","XUMFXP1",76,0)
 .S PKV=$$PKV^XUMFX(IFN,"NEW",HLCS)
"RTN","XUMFXP1",77,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","PKV")=PKV
"RTN","XUMFXP1",78,0)
 ;
"RTN","XUMFXP1",79,0)
 S (IDX,SEQ,NUM,CNT)=0,RDF(0)=""
"RTN","XUMFXP1",80,0)
 F  S IDX=$O(^DIC(4.001,IFN,1,IDX)) Q:'IDX  D
"RTN","XUMFXP1",81,0)
 .S Y=$G(^DIC(4.001,+IFN,1,IDX,0))
"RTN","XUMFXP1",82,0)
 .;
"RTN","XUMFXP1",83,0)
 .N FLD,TYP,SUBFILE,COLUMN,WIDTH
"RTN","XUMFXP1",84,0)
 .S COLUMN=$P(Y,U),WIDTH=$P(Y,U,9),NUM=NUM+1,SEQ=SEQ+1
"RTN","XUMFXP1",85,0)
 .S FLD=$P(Y,U,2),SUBFILE=$P(Y,U,4),LKUP=$P(Y,U,7)
"RTN","XUMFXP1",86,0)
 .S TYP=$P(Y,U,3),TYP=$$GET1^DIQ(771.4,(+TYP_","),.01)
"RTN","XUMFXP1",87,0)
 .S YYY(COLUMN,SEQ)=""
"RTN","XUMFXP1",88,0)
 .;
"RTN","XUMFXP1",89,0)
 .I $L(RDF(CNT)_(COLUMN_HLCS_TYP_HLCS_WIDTH_HLREP))>200 D
"RTN","XUMFXP1",90,0)
 ..S CNT=CNT+1,RDF(CNT)=""
"RTN","XUMFXP1",91,0)
 .S RDF(CNT)=RDF(CNT)_COLUMN_HLCS_TYP_HLCS_WIDTH_HLREP
"RTN","XUMFXP1",92,0)
 .;
"RTN","XUMFXP1",93,0)
 .I 'SUBFILE D  Q
"RTN","XUMFXP1",94,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FLD)=TYP_U_LKUP
"RTN","XUMFXP1",95,0)
 .;
"RTN","XUMFXP1",96,0)
 .; -- multiple
"RTN","XUMFXP1",97,0)
 .;
"RTN","XUMFXP1",98,0)
 .I $P(Y,U,6)'="" D  ;.01 is a field
"RTN","XUMFXP1",99,0)
 ..;S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=$P(Y,U,6)
"RTN","XUMFXP1",100,0)
 ..S XXX(SEQ)=$P(Y,U,6)
"RTN","XUMFXP1",101,0)
 .I $P(Y,U,6)="" D  ;.01 is lkup on MKEY literal
"RTN","XUMFXP1",102,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=""
"RTN","XUMFXP1",103,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM","MKEY",SEQ)=$P(Y,U,5)
"RTN","XUMFXP1",104,0)
 .;
"RTN","XUMFXP1",105,0)
 .N LKUP,FUNC
"RTN","XUMFXP1",106,0)
 .S LKUP=$P(Y,U,7),FUNC=$P(Y,U,8)
"RTN","XUMFXP1",107,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")=SUBFILE
"RTN","XUMFXP1",108,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")=FLD
"RTN","XUMFXP1",109,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"DTYP")=TYP
"RTN","XUMFXP1",110,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"LKUP")=LKUP
"RTN","XUMFXP1",111,0)
 .Q:'IEN
"RTN","XUMFXP1",112,0)
 .I 'FUNC,FUNC'="" D
"RTN","XUMFXP1",113,0)
 ..I FUNC'["(" S FUNC="$$"_FUNC_"^XUMFF" Q
"RTN","XUMFXP1",114,0)
 ..S FUNC="$$"_$P(FUNC,"(")_"^XUMFF("_$P(FUNC,"(",2)
"RTN","XUMFXP1",115,0)
 .S X="S X="_FUNC X:X["$$" X
"RTN","XUMFXP1",116,0)
 .Q:'X
"RTN","XUMFXP1",117,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","IENS",SEQ)=X_","_IEN_","
"RTN","XUMFXP1",118,0)
 ;
"RTN","XUMFXP1",119,0)
 S SEQ=0
"RTN","XUMFXP1",120,0)
 F  S SEQ=$O(XXX(SEQ)) Q:'SEQ  D
"RTN","XUMFXP1",121,0)
 .S X=XXX(SEQ),Y=$O(YYY(X,0))
"RTN","XUMFXP1",122,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","MULT",SEQ)=Y
"RTN","XUMFXP1",123,0)
 ;
"RTN","XUMFXP1",124,0)
 S RDF="RDF"_HLFS_NUM_HLFS_RDF(0) K RDF(0)
"RTN","XUMFXP1",125,0)
 M ^TMP("XUMF MFS",$J,"PARAM","RDF")=RDF
"RTN","XUMFXP1",126,0)
 ;
"RTN","XUMFXP1",127,0)
GROUP ; -- query group
"RTN","XUMFXP1",128,0)
 ;
"RTN","XUMFXP1",129,0)
 D GROUP^XUMFXP2
"RTN","XUMFXP1",130,0)
 ;
"RTN","XUMFXP1",131,0)
 Q
"RTN","XUMFXP1",132,0)
 ;
"RTN","XUMFXP1",133,0)
 ;
"RTN","XUMFXP2")
0^17^B11001670
"RTN","XUMFXP2",1,0)
XUMFXP2 ;ISS/RAM - MFS parameters query/group ;06/28/00
"RTN","XUMFXP2",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXP2",3,0)
 ;
"RTN","XUMFXP2",4,0)
 ; this routine is a called by XUMFXP1 and is a continuation of that
"RTN","XUMFXP2",5,0)
 ; routine
"RTN","XUMFXP2",6,0)
 ;
"RTN","XUMFXP2",7,0)
 Q
"RTN","XUMFXP2",8,0)
 ;
"RTN","XUMFXP2",9,0)
MAIN ; -- main
"RTN","XUMFXP2",10,0)
 ;
"RTN","XUMFXP2",11,0)
 N X
"RTN","XUMFXP2",12,0)
 ;
"RTN","XUMFXP2",13,0)
QRD ; -- query definition segment
"RTN","XUMFXP2",14,0)
 ;
"RTN","XUMFXP2",15,0)
 ;Query Date/Time
"RTN","XUMFXP2",16,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QDT")) D
"RTN","XUMFXP2",17,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QDT")=$$HLDATE^HLFNC($$NOW^XLFDT)
"RTN","XUMFXP2",18,0)
 ;
"RTN","XUMFXP2",19,0)
 ;Query Format Code
"RTN","XUMFXP2",20,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QFC")) D
"RTN","XUMFXP2",21,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QFC")="R"
"RTN","XUMFXP2",22,0)
 ;
"RTN","XUMFXP2",23,0)
 ;Query Priority
"RTN","XUMFXP2",24,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QP")) D
"RTN","XUMFXP2",25,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QP")="I"
"RTN","XUMFXP2",26,0)
 ;
"RTN","XUMFXP2",27,0)
 ;Query ID
"RTN","XUMFXP2",28,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QID")) D
"RTN","XUMFXP2",29,0)
 .S X=$P($G(^DIC(4.001,+IFN,0)),U,3)
"RTN","XUMFXP2",30,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QID")=X_$S(ARRAY:" ARRAY",1:" FILE")
"RTN","XUMFXP2",31,0)
 ;
"RTN","XUMFXP2",32,0)
 ;Deferred Response Type (optional)
"RTN","XUMFXP2",33,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","DRT")) D
"RTN","XUMFXP2",34,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","DRT")=""
"RTN","XUMFXP2",35,0)
 ;
"RTN","XUMFXP2",36,0)
 ;Deferred Response Date/Time (optional)
"RTN","XUMFXP2",37,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","DRDT")) D
"RTN","XUMFXP2",38,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","DRDT")=""
"RTN","XUMFXP2",39,0)
 ;
"RTN","XUMFXP2",40,0)
 ;Quantity Limited Request
"RTN","XUMFXP2",41,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QLR")) D
"RTN","XUMFXP2",42,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QLR")="RD"_HLCS_999
"RTN","XUMFXP2",43,0)
 ;
"RTN","XUMFXP2",44,0)
 ;Who Subject Filter - ID, source table (use x-ref), assigning authority
"RTN","XUMFXP2",45,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","WHO")) D
"RTN","XUMFXP2",46,0)
 .N PKV,XREF,AA
"RTN","XUMFXP2",47,0)
 .S PKV=$$PKV^XUMFX(IFN,IEN,HLCS)
"RTN","XUMFXP2",48,0)
 .S XREF=$P($G(^DIC(4.001,+IFN,"MFE")),U,8)
"RTN","XUMFXP2",49,0)
 .S AA=$P($G(^DIC(4.001,+IFN,"MFE")),U,9)
"RTN","XUMFXP2",50,0)
 .N X S X=$S(ALL:"ALL",IEN:$P(PKV,HLCS),1:"IEN ARRAY")
"RTN","XUMFXP2",51,0)
 .S $P(X,HLCS,9,10)=XREF_HLCS_AA
"RTN","XUMFXP2",52,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","WHO")=X
"RTN","XUMFXP2",53,0)
 ;
"RTN","XUMFXP2",54,0)
 ;What Subject Filter
"RTN","XUMFXP2",55,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","WHAT")) D
"RTN","XUMFXP2",56,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","WHAT")=IFN_HLCS_"IFN"_HLCS_"VA FM"
"RTN","XUMFXP2",57,0)
 ;
"RTN","XUMFXP2",58,0)
 ;What Department Data Code
"RTN","XUMFXP2",59,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","WDDC")) D
"RTN","XUMFXP2",60,0)
 .N X S X="INFRASTRUCTURE"_HLCS_"INFORMATION INFRASTRUCTURE"
"RTN","XUMFXP2",61,0)
 .S X=X_HLCS_"VA TS"
"RTN","XUMFXP2",62,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","WDDC")=X
"RTN","XUMFXP2",63,0)
 ;
"RTN","XUMFXP2",64,0)
 ;What Data Code Value Qual (optional)
"RTN","XUMFXP2",65,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","WDCVQ")) D
"RTN","XUMFXP2",66,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","WDCVQ")=""
"RTN","XUMFXP2",67,0)
 ;
"RTN","XUMFXP2",68,0)
 ;Query Results Level (optional)
"RTN","XUMFXP2",69,0)
 I '$D(^TMP("XUMF MFS",$J,"PARAM","QRL")) D
"RTN","XUMFXP2",70,0)
 .S ^TMP("XUMF MFS",$J,"PARAM","QRL")=""
"RTN","XUMFXP2",71,0)
 ;
"RTN","XUMFXP2",72,0)
 Q
"RTN","XUMFXP2",73,0)
 ;
"RTN","XUMFXP2",74,0)
GROUP ; -- query group
"RTN","XUMFXP2",75,0)
 ;
"RTN","XUMFXP2",76,0)
 N XXX,IDX,SEQ
"RTN","XUMFXP2",77,0)
 ;
"RTN","XUMFXP2",78,0)
 S (IDX,SEQ)=0
"RTN","XUMFXP2",79,0)
 F  S IDX=$O(^DIC(4.001,IFN,1,IDX)) Q:'IDX  D
"RTN","XUMFXP2",80,0)
 .S SEQ=SEQ+1
"RTN","XUMFXP2",81,0)
 .N FUNC,SUBFILE,X,Y
"RTN","XUMFXP2",82,0)
 .S Y=$G(^DIC(4.001,+IFN,1,+IDX,0))
"RTN","XUMFXP2",83,0)
 .S SUBFILE=$P(Y,U,4)
"RTN","XUMFXP2",84,0)
 .Q:'SUBFILE
"RTN","XUMFXP2",85,0)
 .S FUNC=$P(Y,U,8)
"RTN","XUMFXP2",86,0)
 .I 'FUNC,FUNC'="" D
"RTN","XUMFXP2",87,0)
 ..I FUNC'["(" S FUNC="$$"_FUNC_"^XUMFF" Q
"RTN","XUMFXP2",88,0)
 ..S FUNC="$$"_$P(FUNC,"(")_"^XUMFF("_$P(FUNC,"(",2)
"RTN","XUMFXP2",89,0)
 ..S XXX(SEQ)=FUNC
"RTN","XUMFXP2",90,0)
 ;
"RTN","XUMFXP2",91,0)
 S IEN=0
"RTN","XUMFXP2",92,0)
 F  S IEN=$O(^TMP("XUMF MFS",$J,"PARAM","IEN",IEN)) Q:'IEN  D
"RTN","XUMFXP2",93,0)
 .S PKV=$$PKV^XUMFX(IFN,IEN,HLCS)
"RTN","XUMFXP2",94,0)
 .I CDSYS'="" D
"RTN","XUMFXP2",95,0)
 ..S $P(PKV,HLCS,1)=^TMP("XUMF MFS",$J,"PARAM","IEN",IEN)
"RTN","XUMFXP2",96,0)
 ..S $P(PKV,HLCS,2)=$P($G(@ROOT@(+IEN,0)),U)
"RTN","XUMFXP2",97,0)
 ..S $P(PKV,HLCS,3)=CDSYS
"RTN","XUMFXP2",98,0)
 .S ^TMP("XUMF MFS",$J,"PARAM",IEN,"PKV")=PKV
"RTN","XUMFXP2",99,0)
 .;
"RTN","XUMFXP2",100,0)
 .S SEQ=0
"RTN","XUMFXP2",101,0)
 .F  S SEQ=$O(XXX(SEQ)) Q:'SEQ  D
"RTN","XUMFXP2",102,0)
 ..S FUNC=XXX(SEQ)
"RTN","XUMFXP2",103,0)
 ..S X="S X="_FUNC X X
"RTN","XUMFXP2",104,0)
 ..Q:'X
"RTN","XUMFXP2",105,0)
 ..S ^TMP("XUMF MFS",$J,"PARAM",IEN,"IENS",SEQ)=X_","_IEN_","
"RTN","XUMFXP2",106,0)
 ;
"RTN","XUMFXP2",107,0)
 Q
"RTN","XUMFXP2",108,0)
 ;
"RTN","XUMFXR")
0^19^B10945367
"RTN","XUMFXR",1,0)
XUMFXR ;ISS/RAM - MFS param pre/post update;04/15/02
"RTN","XUMFXR",2,0)
 ;;8.0;KERNEL;**299**;Jul 10, 1995
"RTN","XUMFXR",3,0)
 ;
"RTN","XUMFXR",4,0)
 Q
"RTN","XUMFXR",5,0)
 ;
"RTN","XUMFXR",6,0)
NULL ; -- do nothing
"RTN","XUMFXR",7,0)
 ;
"RTN","XUMFXR",8,0)
 Q
"RTN","XUMFXR",9,0)
 ;
"RTN","XUMFXR",10,0)
PRE ; -- pre update
"RTN","XUMFXR",11,0)
 ;
"RTN","XUMFXR",12,0)
 N ARRAY
"RTN","XUMFXR",13,0)
 ;
"RTN","XUMFXR",14,0)
 K ^TMP("XUMF PRE",$J)
"RTN","XUMFXR",15,0)
 ;
"RTN","XUMFXR",16,0)
 D DATA(.ARRAY)
"RTN","XUMFXR",17,0)
 ;
"RTN","XUMFXR",18,0)
 M ^TMP("XUMF PRE",$J)=ARRAY
"RTN","XUMFXR",19,0)
 ;
"RTN","XUMFXR",20,0)
 Q
"RTN","XUMFXR",21,0)
 ;
"RTN","XUMFXR",22,0)
POST ; -- post update
"RTN","XUMFXR",23,0)
 ;
"RTN","XUMFXR",24,0)
 N ARRAY,I,X,FLAG
"RTN","XUMFXR",25,0)
 ;
"RTN","XUMFXR",26,0)
 D DATA(.ARRAY)
"RTN","XUMFXR",27,0)
 ;
"RTN","XUMFXR",28,0)
 S (FLAG,I)=0
"RTN","XUMFXR",29,0)
 F  S I=$O(ARRAY(I)) Q:'I  D  Q:FLAG
"RTN","XUMFXR",30,0)
 .I ARRAY(I)'=^TMP("XUMF PRE",$J,I) S FLAG=1 Q
"RTN","XUMFXR",31,0)
 ;
"RTN","XUMFXR",32,0)
 I FLAG D
"RTN","XUMFXR",33,0)
 .S I=0
"RTN","XUMFXR",34,0)
 .F  S I=$O(ARRAY(I)) Q:'I  D
"RTN","XUMFXR",35,0)
 ..S X(I+100)=ARRAY(I) K ARRAY(I)
"RTN","XUMFXR",36,0)
 .M X=^TMP("XUMF PRE",$J)
"RTN","XUMFXR",37,0)
 .D XM(.X,$G(KEY))
"RTN","XUMFXR",38,0)
 ;
"RTN","XUMFXR",39,0)
 K ^TMP("XUMF PRE",$J)
"RTN","XUMFXR",40,0)
 ;
"RTN","XUMFXR",41,0)
 Q
"RTN","XUMFXR",42,0)
 ;
"RTN","XUMFXR",43,0)
DATA(ARRAY) ; -- array(sequence)=fieldLabel_": "_value
"RTN","XUMFXR",44,0)
 ;
"RTN","XUMFXR",45,0)
 N SEG,SEQ,FLD,FILE,IENS,FIELD,VALUE,LKUP,IDX
"RTN","XUMFXR",46,0)
 ;
"RTN","XUMFXR",47,0)
 S SEG="",SEQ=0
"RTN","XUMFXR",48,0)
 F  S SEQ=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ)) Q:'SEQ  D
"RTN","XUMFXR",49,0)
 .;
"RTN","XUMFXR",50,0)
 .S FLD=$O(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,0))
"RTN","XUMFXR",51,0)
 .;
"RTN","XUMFXR",52,0)
 .I 'FLD D
"RTN","XUMFXR",53,0)
 ..S FILE=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FILE")
"RTN","XUMFXR",54,0)
 ..S IENS=$G(^TMP("XUMF MFS",$J,"PARAM","IENS",SEQ))
"RTN","XUMFXR",55,0)
 ..S FIELD=^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"FIELD")
"RTN","XUMFXR",56,0)
 ..S LKUP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,"LKUP"))
"RTN","XUMFXR",57,0)
 ..I LKUP S FIELD=FIELD_":"_LKUP
"RTN","XUMFXR",58,0)
 ..S VALUE=$$GET1^DIQ(FILE,IENS,FIELD)
"RTN","XUMFXR",59,0)
 ..S ARRAY(SEQ)=$$FIELD^XUMF(FILE,$P(FIELD,":"),"LABEL")_": "_VALUE
"RTN","XUMFXR",60,0)
 .I FLD D
"RTN","XUMFXR",61,0)
 ..S ZDTYP=$G(^TMP("XUMF MFS",$J,"PARAM","SEQ",SEQ,FLD))
"RTN","XUMFXR",62,0)
 ..S LKUP=$P(ZDTYP,U,2)
"RTN","XUMFXR",63,0)
 ..I LKUP S FLD=FLD_":"_LKUP
"RTN","XUMFXR",64,0)
 ..S VALUE=$$GET1^DIQ(IFN,IEN_",",FLD)
"RTN","XUMFXR",65,0)
 ..S ARRAY(SEQ)=$$FIELD^XUMF(IFN,$P(FLD,":"),"LABEL")_": "_VALUE
"RTN","XUMFXR",66,0)
 ;
"RTN","XUMFXR",67,0)
 Q
"RTN","XUMFXR",68,0)
 ;
"RTN","XUMFXR",69,0)
MFP ; -- get Master File Parameters from server
"RTN","XUMFXR",70,0)
 ;
"RTN","XUMFXR",71,0)
 N X
"RTN","XUMFXR",72,0)
 ;
"RTN","XUMFXR",73,0)
 S EXIT=1
"RTN","XUMFXR",74,0)
 S IEN=$$FIND1^DIC(1,,"BX",$P(KEY,HLCS))
"RTN","XUMFXR",75,0)
 ;
"RTN","XUMFXR",76,0)
 D MAIN^XUMF299
"RTN","XUMFXR",77,0)
 ;
"RTN","XUMFXR",78,0)
 S X(1)="Query sent to MFS to get "_$P(KEY,HLCS)_" parameters"
"RTN","XUMFXR",79,0)
 D XM1(.X)
"RTN","XUMFXR",80,0)
 ;
"RTN","XUMFXR",81,0)
 Q
"RTN","XUMFXR",82,0)
 ;
"RTN","XUMFXR",83,0)
XM(X,XUMFKEY) ; -- MailMan notification
"RTN","XUMFXR",84,0)
 ;
"RTN","XUMFXR",85,0)
 N GROUP
"RTN","XUMFXR",86,0)
 ;
"RTN","XUMFXR",87,0)
 S HLCS=$G(HLCS) S:HLCS="" HLCS="~"
"RTN","XUMFXR",88,0)
 S XUMFKEY=" "_$P($G(XUMFKEY),HLCS)
"RTN","XUMFXR",89,0)
 ;
"RTN","XUMFXR",90,0)
 S GROUP=$$GET1^DIQ(4.001,IEN_",",.06)
"RTN","XUMFXR",91,0)
 S:GROUP'="" GROUP="G."_GROUP
"RTN","XUMFXR",92,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID")),X(.2)=""
"RTN","XUMFXR",93,0)
 S X(.3)="PRE UPDATE VALUES:",X(.4)=""
"RTN","XUMFXR",94,0)
 S X(99.1)="",X(99.2)="POST UPDATE VALUES:",X(99.3)=""
"RTN","XUMFXR",95,0)
 S XMSUB="XUMF MFS UPDATE - "_$$FILE^XUMF(IFN,"NAME")_XUMFKEY
"RTN","XUMFXR",96,0)
 S XMY("G.XUMF SERVER")="",XMDUZ=.5
"RTN","XUMFXR",97,0)
 S:GROUP'="" XMY(GROUP)=""
"RTN","XUMFXR",98,0)
 S XMTEXT="X("
"RTN","XUMFXR",99,0)
 ;
"RTN","XUMFXR",100,0)
 D ^XMD
"RTN","XUMFXR",101,0)
 ;
"RTN","XUMFXR",102,0)
XM1(X) ; -- MailMan notification
"RTN","XUMFXR",103,0)
 ;
"RTN","XUMFXR",104,0)
 N GROUP
"RTN","XUMFXR",105,0)
 ;
"RTN","XUMFXR",106,0)
 S GROUP=$$GET1^DIQ(4.001,IEN_",",.06)
"RTN","XUMFXR",107,0)
 S:GROUP'="" GROUP="G."_GROUP
"RTN","XUMFXR",108,0)
 S X(.1)="HL7 message ID: "_$G(HL("MID")),X(.2)=""
"RTN","XUMFXR",109,0)
 S XMSUB="XUMF MFE - "_$$FILE^XUMF(IFN,"NAME")
"RTN","XUMFXR",110,0)
 S XMY("G.XUMF SERVER")="",XMDUZ=.5
"RTN","XUMFXR",111,0)
 S:GROUP'="" XMY(GROUP)=""
"RTN","XUMFXR",112,0)
 S XMTEXT="X("
"RTN","XUMFXR",113,0)
 ;
"RTN","XUMFXR",114,0)
 D ^XMD
"RTN","XUMFXR",115,0)
 ;
"RTN","XUMFXR",116,0)
 Q
"RTN","XUMFXR",117,0)
 ;
"SEC","^DIC",4.001,4.001,0,"AUDIT")
@
"SEC","^DIC",4.001,4.001,0,"DD")
@
"SEC","^DIC",4.001,4.001,0,"DEL")
@
"SEC","^DIC",4.001,4.001,0,"LAYGO")
@
"SEC","^DIC",4.001,4.001,0,"RD")
@
"SEC","^DIC",4.001,4.001,0,"WR")
@
"VER")
8.0^22.0
"^DD",4.001,4.001,0)
FIELD^^.07^23
"^DD",4.001,4.001,0,"DDA")
N
"^DD",4.001,4.001,0,"DT")
3050317
"^DD",4.001,4.001,0,"IX","B",4.001,.01)

"^DD",4.001,4.001,0,"IX","MFI",4.001,.03)

"^DD",4.001,4.001,0,"IX","ZZZ",4.001,.02)

"^DD",4.001,4.001,0,"NM","MASTER FILE PARAMETERS")

"^DD",4.001,4.001,0,"VRPK")
XU
"^DD",4.001,4.001,.01,0)
MASTER FILE^RP1X^DIC(^0;1^S DINUM=X
"^DD",4.001,4.001,.01,1,0)
^.1
"^DD",4.001,4.001,.01,1,1,0)
4.001^B
"^DD",4.001,4.001,.01,1,1,1)
S ^DIC(4.001,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.01,1,1,2)
K ^DIC(4.001,"B",$E(X,1,30),DA)
"^DD",4.001,4.001,.01,3)
Select file to be supported by the Master File Server (MFS) mechanism.
"^DD",4.001,4.001,.01,21,0)
^^3^3^3031223^
"^DD",4.001,4.001,.01,21,1,0)
This field is the Internal File Number (IFN) of the
"^DD",4.001,4.001,.01,21,2,0)
Master File table supported by the Master File Server
"^DD",4.001,4.001,.01,21,3,0)
(MFS).
"^DD",4.001,4.001,.01,"DT")
3031226
"^DD",4.001,4.001,.02,0)
SEGMENT NAME^RFX^^0;2^K:$L(X)>3!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.02,1,0)
^.1
"^DD",4.001,4.001,.02,1,1,0)
4.001^ZZZ
"^DD",4.001,4.001,.02,1,1,1)
S ^DIC(4.001,"ZZZ",$E(X,1,30),DA)=""
"^DD",4.001,4.001,.02,1,1,2)
K ^DIC(4.001,"ZZZ",$E(X,1,30),DA)
"^DD",4.001,4.001,.02,1,1,"%D",0)
^^3^3^3031223^
"^DD",4.001,4.001,.02,1,1,"%D",1,0)
This x-ref is the segment name.  The MFS handler
"^DD",4.001,4.001,.02,1,1,"%D",2,0)
checks incoming message data segments against this
"^DD",4.001,4.001,.02,1,1,"%D",3,0)
x-ref to verify the file is supported.
"^DD",4.001,4.001,.02,1,1,"DT")
3031223
"^DD",4.001,4.001,.02,3)
Enter the HL7 data segment or Z segment name.
"^DD",4.001,4.001,.02,21,0)
^^2^2^3031223^
"^DD",4.001,4.001,.02,21,1,0)
This field holds the name of the HL7 data segment
"^DD",4.001,4.001,.02,21,2,0)
that hold the actual table values.
"^DD",4.001,4.001,.02,"DT")
3031226
"^DD",4.001,4.001,.03,0)
MFI CODE^RFX^^0;3^K:$L(X)>60!($L(X)<2) X
"^DD",4.001,4.001,.03,1,0)
^.1
"^DD",4.001,4.001,.03,1,1,0)
4.001^MFI
"^DD",4.001,4.001,.03,1,1,1)
S ^DIC(4.001,"MFI",$E(X,1,60),DA)=""
"^DD",4.001,4.001,.03,1,1,2)
K ^DIC(4.001,"MFI",$E(X,1,60),DA)
"^DD",4.001,4.001,.03,1,1,"%D",0)
^^1^1^3031223^
"^DD",4.001,4.001,.03,1,1,"%D",1,0)
This x-ref is the Master File Identifier (MFI).
"^DD",4.001,4.001,.03,1,1,"DT")
3031223
"^DD",4.001,4.001,.03,3)
Answer must be 2-60 characters in length.
"^DD",4.001,4.001,.03,21,0)
^^1^1^3031224^^
"^DD",4.001,4.001,.03,21,1,0)
This code identifies the master file.
"^DD",4.001,4.001,.03,"DT")
3041220
"^DD",4.001,4.001,.04,0)
PRE-UPDATE ROUTINE^RFX^^0;4^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.04,3)
Enter the label of sub-routine in XUMFR to be executed prior to the MFS update.
"^DD",4.001,4.001,.04,21,0)
^^20^20^3031226^^^
"^DD",4.001,4.001,.04,21,1,0)
This field holds the label of the 
"^DD",4.001,4.001,.04,21,2,0)
sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.04,21,3,0)
before an update by the MFS for a
"^DD",4.001,4.001,.04,21,4,0)
data type segment.  
"^DD",4.001,4.001,.04,21,5,0)
                                 
"^DD",4.001,4.001,.04,21,6,0)
Enter the label without '^XUMFR'.  The
"^DD",4.001,4.001,.04,21,7,0)
sub-routine can assume the presence of the
"^DD",4.001,4.001,.04,21,8,0)
variables IFN and IEN.  All local variables
"^DD",4.001,4.001,.04,21,9,0)
within the sub-routine must be NEW'd 
"^DD",4.001,4.001,.04,21,10,0)
before using them.
"^DD",4.001,4.001,.04,21,11,0)
                                 
"^DD",4.001,4.001,.04,21,12,0)
The default value for this field is 
"^DD",4.001,4.001,.04,21,13,0)
'PRE'.  The PRE sub-routine builds
"^DD",4.001,4.001,.04,21,14,0)
the current values of the entry in
"^DD",4.001,4.001,.04,21,15,0)
question (associated with the IEN)
"^DD",4.001,4.001,.04,21,16,0)
into an array (^TMP("XUMF PRE",$J,SEQ)
"^DD",4.001,4.001,.04,21,17,0)
=fieldLabel_": "_value). 
"^DD",4.001,4.001,.04,21,18,0)

"^DD",4.001,4.001,.04,21,19,0)
This field is required, so if you have
"^DD",4.001,4.001,.04,21,20,0)
no processing use NULL.
"^DD",4.001,4.001,.04,"DT")
3031226
"^DD",4.001,4.001,.05,0)
POST-UPDATE ROUTINE^RFX^^0;5^K:$L(X)>20!($L(X)<3) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.05,3)
Enter the label of sub-routine in XUMFR to be executed after MFS updates.
"^DD",4.001,4.001,.05,21,0)
^^19^19^3031226^^
"^DD",4.001,4.001,.05,21,1,0)
This field holds the label of the sub-routine in XUMFR that gets called
"^DD",4.001,4.001,.05,21,2,0)
after an update by the the MFS for a data type segment.
"^DD",4.001,4.001,.05,21,3,0)
 
"^DD",4.001,4.001,.05,21,4,0)
Enter the label without '^XUMFR'.  The sub-routine can assume the presence
"^DD",4.001,4.001,.05,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,.05,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,.05,21,7,0)
 
"^DD",4.001,4.001,.05,21,8,0)
The default value for this field is 'POST'.  The POST sub-routine builds
"^DD",4.001,4.001,.05,21,9,0)
the new values of the entry in question (associated with the IEN) and
"^DD",4.001,4.001,.05,21,10,0)
compares them against the previous values (prior to update) to determine
"^DD",4.001,4.001,.05,21,11,0)
if any values changed.  If the values have changed a MailMan notification
"^DD",4.001,4.001,.05,21,12,0)
is sent to the XUMF SERVER mail group and the group identified by MAIL
"^DD",4.001,4.001,.05,21,13,0)
GROUP of this MASTER FILE PARAMERS entry.
"^DD",4.001,4.001,.05,21,14,0)
 
"^DD",4.001,4.001,.05,21,15,0)
Note: if the post-update routine calls POST^XUMFR then pre-update routine
"^DD",4.001,4.001,.05,21,16,0)
must call PRE^XUMFR.
"^DD",4.001,4.001,.05,21,17,0)

"^DD",4.001,4.001,.05,21,18,0)
This field is required, so if you have
"^DD",4.001,4.001,.05,21,19,0)
no processing use NULL.
"^DD",4.001,4.001,.05,"DT")
3031226
"^DD",4.001,4.001,.06,0)
MAIL GROUP^P3.8X^XMB(3.8,^0;6^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,.06,3)
Enter the mail group that will receive update notifications.
"^DD",4.001,4.001,.06,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,.06,21,1,0)
This mail group will be notified when an HL7 unsolicited update
"^DD",4.001,4.001,.06,21,2,0)
message is received from the MFS server.  This group will be notified
"^DD",4.001,4.001,.06,21,3,0)
in addition to the group XUMF SERVER.
"^DD",4.001,4.001,.06,"DT")
3031226
"^DD",4.001,4.001,.07,0)
POST-PROCESSING LOGIC^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",4.001,4.001,.07,3)
This is Standard MUMPS code that gets executed after message processing.
"^DD",4.001,4.001,.07,9)
@
"^DD",4.001,4.001,.07,21,0)
^.001^1^1^3050225^^
"^DD",4.001,4.001,.07,21,1,0)
This is Standard MUMPS code that gets executed after message processing.
"^DD",4.001,4.001,.07,"DT")
3050225
"^DD",4.001,4.001,1,0)
COLUMN^4.011^^1;0
"^DD",4.001,4.001,1,21,0)
^.001^4^4^3040420^^^^
"^DD",4.001,4.001,1,21,1,0)
The COLUMN DESCRIPTION multiple maps the data type segment fields
"^DD",4.001,4.001,1,21,2,0)
and components to FileMan fields for a standard table.  There are
"^DD",4.001,4.001,1,21,3,0)
additional fields within the sub-file to handle multiple field types
"^DD",4.001,4.001,1,21,4,0)
and extended references.
"^DD",4.001,4.001,1,"DT")
3040420
"^DD",4.001,4.001,4.1,0)
MFE ID FIELD^RRNJ17,7X^^MFE;1^Q
"^DD",4.001,4.001,4.1,3)
Enter the field # that corresponds to the PKV id.
"^DD",4.001,4.001,4.1,21,0)
^^5^5^3031224^
"^DD",4.001,4.001,4.1,21,1,0)
This field holds the field number that corresponds to the ID
"^DD",4.001,4.001,4.1,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.1,21,3,0)
 
"^DD",4.001,4.001,4.1,21,4,0)
This field # is the SDS field added to the file to store the internal
"^DD",4.001,4.001,4.1,21,5,0)
identifier to the SDS database.
"^DD",4.001,4.001,4.1,"DT")
3031230
"^DD",4.001,4.001,4.11,0)
MFE ID TYPE^RP771.4'X^HL(771.4,^MFE;11^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.11,3)
Enter HL7 data type.
"^DD",4.001,4.001,4.11,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.11,21,1,0)
MFE ID HL7 data type.
"^DD",4.001,4.001,4.11,"DT")
3031226
"^DD",4.001,4.001,4.12,0)
MFE TEXT TYPE^RP771.4'X^HL(771.4,^MFE;12^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.12,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.12,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.12,21,1,0)
Enter the MFE TEXT HL7 data type.
"^DD",4.001,4.001,4.12,"DT")
3031226
"^DD",4.001,4.001,4.14,0)
MFE ALT ID TYPE^RP771.4'X^HL(771.4,^MFE;14^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.14,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.14,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.14,21,1,0)
Enter the MFE ID HL7 data type.
"^DD",4.001,4.001,4.14,"DT")
3031226
"^DD",4.001,4.001,4.15,0)
MFE ALT TEXT TYPE^RP771.4'X^HL(771.4,^MFE;15^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.15,3)
Enter the HL7 data type.
"^DD",4.001,4.001,4.15,21,0)
^^1^1^3031224^
"^DD",4.001,4.001,4.15,21,1,0)
Enter the MFE ALT TEXT HL7 data type.
"^DD",4.001,4.001,4.15,"DT")
3031226
"^DD",4.001,4.001,4.16,0)
MFE PRE-UPDATE ROUTINE^RFX^^MFE;16^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.16,3)
Enter the subroutine label that executes prior to MFE.
"^DD",4.001,4.001,4.16,21,0)
^^6^6^3031224^
"^DD",4.001,4.001,4.16,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.16,21,2,0)
before an update by the the MFS for an MFE segment.
"^DD",4.001,4.001,4.16,21,3,0)
 
"^DD",4.001,4.001,4.16,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.16,21,5,0)
of the variable IFN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.16,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,4.16,"DT")
3031226
"^DD",4.001,4.001,4.17,0)
MFE POST-UPDATE ROUTINE^RFX^^MFE;17^K:$L(X)>8!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.17,3)
Enter the subroutine label that executes after the MFE segment.
"^DD",4.001,4.001,4.17,21,0)
^^6^6^3031224^
"^DD",4.001,4.001,4.17,21,1,0)
This field holds the label of the sub-routine in XUMFRMFE that gets called
"^DD",4.001,4.001,4.17,21,2,0)
after an update by the the MFS for an MFE segment.                             
"^DD",4.001,4.001,4.17,21,3,0)
 
"^DD",4.001,4.001,4.17,21,4,0)
Enter the label without '^XUMFRMFE'.  The sub-routine can assume the presence
"^DD",4.001,4.001,4.17,21,5,0)
of the variables IFN and IEN.  All local variables within the sub-routine
"^DD",4.001,4.001,4.17,21,6,0)
must be NEW'd before using them.
"^DD",4.001,4.001,4.17,"DT")
3031226
"^DD",4.001,4.001,4.2,0)
MFE TEXT FIELD^RNJ17,7X^^MFE;2^Q
"^DD",4.001,4.001,4.2,3)
Enter the field # that corresponds to the PKV text.
"^DD",4.001,4.001,4.2,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.2,21,1,0)
This field holds the field number that corresponds to the TEXT
"^DD",4.001,4.001,4.2,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.2,"DT")
3031230
"^DD",4.001,4.001,4.3,0)
MFE CODSYS^RFX^^MFE;3^K:$L(X)>20!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.3,3)
Enter the coding system for the MFE ID.
"^DD",4.001,4.001,4.3,21,0)
^^2^2^3031224^^
"^DD",4.001,4.001,4.3,21,1,0)
This field holds the coding system that corresponds to the ID
"^DD",4.001,4.001,4.3,21,2,0)
of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.3,"DT")
3031226
"^DD",4.001,4.001,4.4,0)
MFE ALT ID FIELD^RNJ17,7X^^MFE;4^Q
"^DD",4.001,4.001,4.4,3)
Enter the field # that corresponds to the PKV alternate id.
"^DD",4.001,4.001,4.4,21,0)
^^7^7^3031224^
"^DD",4.001,4.001,4.4,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.4,21,2,0)
alternate ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.4,21,3,0)
 
"^DD",4.001,4.001,4.4,21,4,0)
The field # should be a key field to the file (not the SDS identifier
"^DD",4.001,4.001,4.4,21,5,0)
field).  This field will be used by MFS to determine which entry in
"^DD",4.001,4.001,4.4,21,6,0)
the file corresponds to the PKV id if it hasn't been already associated.
"^DD",4.001,4.001,4.4,21,7,0)
Ideally, this field is a unique key to the file.
"^DD",4.001,4.001,4.4,"DT")
3031230
"^DD",4.001,4.001,4.5,0)
MFE ALT TEXT FIELD^RNJ17,7X^^MFE;5^Q
"^DD",4.001,4.001,4.5,3)
Enter the field # that corresponds to the PKV alternate text.
"^DD",4.001,4.001,4.5,21,0)
^^2^2^3031224^
"^DD",4.001,4.001,4.5,21,1,0)
This field holds the field number that corresponds to the
"^DD",4.001,4.001,4.5,21,2,0)
alternate TEXT of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.5,"DT")
3031230
"^DD",4.001,4.001,4.6,0)
MFE ALT CODSYS^RFX^^MFE;6^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.6,3)
Enter the alternate coding system of the PKV.
"^DD",4.001,4.001,4.6,21,0)
^.001^2^2^3050331^^
"^DD",4.001,4.001,4.6,21,1,0)
This field holds the alternate coding system that corresponds
"^DD",4.001,4.001,4.6,21,2,0)
to the ID of the Primary Key Value in MFE.
"^DD",4.001,4.001,4.6,"DT")
3031226
"^DD",4.001,4.001,4.7,0)
MFE PKV TYPE^RP771.4'X^HL(771.4,^MFE;7^K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.7,3)
Enter the PKV type (i.e., CE or PL) CE or Composite Element.
"^DD",4.001,4.001,4.7,21,0)
^^3^3^3031224^^
"^DD",4.001,4.001,4.7,21,1,0)
This field holds the Primary Key Value data
"^DD",4.001,4.001,4.7,21,2,0)
type.  Valid values stored in HL7 Table 0355 -
"^DD",4.001,4.001,4.7,21,3,0)
Primary key value type.
"^DD",4.001,4.001,4.7,"DT")
3031226
"^DD",4.001,4.001,4.8,0)
MFE PKV X-REF^RFX^^MFE;8^K:$L(X)>10!($L(X)<1) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.8,3)
Enter the FM x-ref of non-SDS key field - MFE.4.4
"^DD",4.001,4.001,4.8,21,0)
^^6^6^3031224^^
"^DD",4.001,4.001,4.8,21,1,0)
This field hold the FileMan cross-reference of
"^DD",4.001,4.001,4.8,21,2,0)
the Primary Key Value (PKV).
"^DD",4.001,4.001,4.8,21,3,0)
 
"^DD",4.001,4.001,4.8,21,4,0)
Since MFE.4.1 is the SDS internal identifier then provide
"^DD",4.001,4.001,4.8,21,5,0)
the alternate ID (MFE.4.4) cross-reference.  The natural
"^DD",4.001,4.001,4.8,21,6,0)
FileMan key x-ref that corresponds to the alt id.
"^DD",4.001,4.001,4.8,"DT")
3031226
"^DD",4.001,4.001,4.9,0)
ASSIGNING AUTHORITY^RFX^^MFE;9^K:$L(X)>20!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.001,4.9,3)
Enter the entity responsible for assigning IDs for coding system.
"^DD",4.001,4.001,4.9,21,0)
^^11^11^3031226^^^
"^DD",4.001,4.001,4.9,21,1,0)
This field holds the assigning authority responsible for
"^DD",4.001,4.001,4.9,21,2,0)
the code system used in the HL7 MFE PKV segment sequence.
"^DD",4.001,4.001,4.9,21,3,0)
 
"^DD",4.001,4.001,4.9,21,4,0)
See QRD segment.  Who Subject Filter.
"^DD",4.001,4.001,4.9,21,5,0)

"^DD",4.001,4.001,4.9,21,6,0)
This field holds the code that identifies the standards
"^DD",4.001,4.001,4.9,21,7,0)
body, or in the case of VA specific data the routing
"^DD",4.001,4.001,4.9,21,8,0)
symbol (or other identifying code) of the data owner of
"^DD",4.001,4.001,4.9,21,9,0)
steward.
"^DD",4.001,4.001,4.9,21,10,0)

"^DD",4.001,4.001,4.9,21,11,0)
If all else fails, use 'VA' as the code.
"^DD",4.001,4.001,4.9,"DT")
3031226
"^DD",4.001,4.011,0)
COLUMN SUB-FIELD^^.14^12
"^DD",4.001,4.011,0,"DT")
3050317
"^DD",4.001,4.011,0,"IX","B",4.011,.01)

"^DD",4.001,4.011,0,"NM","COLUMN")

"^DD",4.001,4.011,0,"UP")
4.001
"^DD",4.001,4.011,.01,0)
COLUMN DESCRIPTION^MF^^0;1^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.01,1,0)
^.1
"^DD",4.001,4.011,.01,1,1,0)
4.011^B
"^DD",4.001,4.011,.01,1,1,1)
S ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",4.001,4.011,.01,1,1,2)
K ^DIC(4.001,DA(1),1,"B",$E(X,1,30),DA)
"^DD",4.001,4.011,.01,3)
Answer must be 1-40 characters in length.
"^DD",4.001,4.011,.01,21,0)
^.001^21^21^3040420^^^^
"^DD",4.001,4.011,.01,21,1,0)
The column description is the identifier that
"^DD",4.001,4.011,.01,21,2,0)
names the data element that gets mapped to a
"^DD",4.001,4.011,.01,21,3,0)
FileMan field.  The RDF segment (table row 
"^DD",4.001,4.011,.01,21,4,0)
definition) has a field (the 3rd sequence) that
"^DD",4.001,4.011,.01,21,5,0)
is a repeating element.  The 1st component of
"^DD",4.001,4.011,.01,21,6,0)
the element is the column description.  It is
"^DD",4.001,4.011,.01,21,7,0)
the column name in central repository master
"^DD",4.001,4.011,.01,21,8,0)
table.
"^DD",4.001,4.011,.01,21,9,0)

"^DD",4.001,4.011,.01,21,10,0)
(The 2nd component is the HL7 data type.  The
"^DD",4.001,4.011,.01,21,11,0)
3rd component is the length of the field.) 
"^DD",4.001,4.011,.01,21,12,0)
                                
"^DD",4.001,4.011,.01,21,13,0)
The RDF segment defines the format of
"^DD",4.001,4.011,.01,21,14,0)
subsequent RDT segment (table row data).  The
"^DD",4.001,4.011,.01,21,15,0)
sequence of column description fields in the
"^DD",4.001,4.011,.01,21,16,0)
RDF segment maps the sequence of the
"^DD",4.001,4.011,.01,21,17,0)
corresponding data values in the RDT segment.
"^DD",4.001,4.011,.01,21,18,0)

"^DD",4.001,4.011,.01,21,19,0)
(The 2nd field of the RDF segment is the number
"^DD",4.001,4.011,.01,21,20,0)
of columns or data elements passed in the RDF
"^DD",4.001,4.011,.01,21,21,0)
and RDT segments.) 
"^DD",4.001,4.011,.01,"DT")
3040420
"^DD",4.001,4.011,.02,0)
FIELD NUMBER^RNJ17,7X^^0;2^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8N.N) X ;  K:'$$ECHO^XUMF(DA(1),DA,X,+$G(XUMF)) X
"^DD",4.001,4.011,.02,3)
Enter the field number for the data element.
"^DD",4.001,4.011,.02,21,0)
^.001^6^6^3031224^^^
"^DD",4.001,4.011,.02,21,1,0)
This field holds the FileMan field number that corresponds to
"^DD",4.001,4.011,.02,21,2,0)
the segment sequence number in question.
"^DD",4.001,4.011,.02,21,3,0)
 
"^DD",4.001,4.011,.02,21,4,0)
If this sequence component maps to a FileMan sub-file (multiple)
"^DD",4.001,4.011,.02,21,5,0)
then the SUBFILE NUMBER (#.04) is required before FIELD NUMBER to
"^DD",4.001,4.011,.02,21,6,0)
be able to validate (input transform.)
"^DD",4.001,4.011,.02,"DT")
3040420
"^DD",4.001,4.011,.03,0)
HL7 DATA TYPE^RP771.4'X^HL(771.4,^0;3^;K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.03,3)
Enter the HL7 data type.
"^DD",4.001,4.011,.03,21,0)
^^1^1^3031224^
"^DD",4.001,4.011,.03,21,1,0)
This field holds the HL7 data type of the sequence.
"^DD",4.001,4.011,.03,"DT")
3040420
"^DD",4.001,4.011,.04,0)
SUBFILE NUMBER^NJ17,7X^^0;4^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.04,3)
If multiple field, enter sub-file number.
"^DD",4.001,4.011,.04,21,0)
^^2^2^3031224^
"^DD",4.001,4.011,.04,21,1,0)
This field holds the FileMan sub-file number.  ONLY if FIELD NUMBER
"^DD",4.001,4.011,.04,21,2,0)
relates to a field in a multiple.
"^DD",4.001,4.011,.04,"DT")
3031226
"^DD",4.001,4.011,.05,0)
SUBFILE LKUP LITERAL^FX^^0;5^K:$L(X)>30!($L(X)<2) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.05,3)
If subfile and .01 not in HL7 segment, enter literal value of the .01
"^DD",4.001,4.011,.05,21,0)
^^9^9^3031224^^
"^DD",4.001,4.011,.05,21,1,0)
If this sequence is a field in a subfile and the .01 of the multiple
"^DD",4.001,4.011,.05,21,2,0)
is not included in the HL7 segment but is some literal, then provide
"^DD",4.001,4.011,.05,21,3,0)
the literal string here.
"^DD",4.001,4.011,.05,21,4,0)
 
"^DD",4.001,4.011,.05,21,5,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.05,21,6,0)
be NULL.
"^DD",4.001,4.011,.05,21,7,0)

"^DD",4.001,4.011,.05,21,8,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.05,21,9,0)
be NULL.
"^DD",4.001,4.011,.05,"DT")
3031226
"^DD",4.001,4.011,.06,0)
SUBFILE LKUP COLUMN^F^^0;6^K:$L(X)>40!($L(X)<1) X
"^DD",4.001,4.011,.06,3)
Enter the COLUMN DESCRIPTION identifer that is the lookup (.01) to this field
"^DD",4.001,4.011,.06,21,0)
^.001^11^11^3040525^^^
"^DD",4.001,4.011,.06,21,1,0)
If the FIELD NUMBER is associated with a multiple field, then this
"^DD",4.001,4.011,.06,21,2,0)
field holds the COLUMN DESCRIPTION of the .01 field of the multiple. 
"^DD",4.001,4.011,.06,21,3,0)
 
"^DD",4.001,4.011,.06,21,4,0)
If the .01 field is not a sequence, then leave this field blank and
"^DD",4.001,4.011,.06,21,5,0)
provide a value for SUBFILE LKUP LITERAL.
"^DD",4.001,4.011,.06,21,6,0)
 
"^DD",4.001,4.011,.06,21,7,0)
If SUBFILE LKUP LITERAL is NULL then SUBFILE LKUP SEQUENCE must not
"^DD",4.001,4.011,.06,21,8,0)
be NULL.
"^DD",4.001,4.011,.06,21,9,0)

"^DD",4.001,4.011,.06,21,10,0)
If SUBFILE LKUP LITERAL is not NULL then SUBFILE LKUP SEQUENCE must
"^DD",4.001,4.011,.06,21,11,0)
be NULL.
"^DD",4.001,4.011,.06,"DT")
3040525
"^DD",4.001,4.011,.07,0)
EXTENDED POINTER LKUP^NJ17,7X^^0;7^K:+X'=X!(X>999999999)!(X<.01)!(X?.E1"."8.N) X K:'$$F^XUMF(+$G(XUMF)) X
"^DD",4.001,4.011,.07,3)
Enter the field number which is the key to the extended reference of FIELD NAME if other than .01
"^DD",4.001,4.011,.07,21,0)
^^8^8^3031224^
"^DD",4.001,4.011,.07,21,1,0)
If FIELD NUMBER is a pointer and you want to look-up
"^DD",4.001,4.011,.07,21,2,0)
the entry by a field other than its .01, then enter
"^DD",4.001,4.011,.07,21,3,0)
that field number.
"^DD",4.001,4.011,.07,21,4,0)

"^DD",4.001,4.011,.07,21,5,0)
Example: Parent facility, in the association multiple
"^DD",4.001,4.011,.07,21,6,0)
of the Institution file points to Instituion.  The
"^DD",4.001,4.011,.07,21,7,0)
Institution NAME may not be unique.  It would be more
"^DD",4.001,4.011,.07,21,8,0)
useful to look-up the Institution by STATION NUMBER.
"^DD",4.001,4.011,.07,"DT")
3031226
"^DD",4.001,4.011,.09,0)
COLUMN LENGTH^RNJ2,0^^0;9^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",4.001,4.011,.09,3)
Type the maximum column width
"^DD",4.001,4.011,.09,21,0)
^.001^4^4^3040525^^^^
"^DD",4.001,4.011,.09,21,1,0)
This field holds the maximum column width of the column in question.
"^DD",4.001,4.011,.09,21,2,0)
The column description is the 3rd sequence of the RDF segment.  It
"^DD",4.001,4.011,.09,21,3,0)
is a repeating element.  The maximum column width is the 3rd component
"^DD",4.001,4.011,.09,21,4,0)
of the element.
"^DD",4.001,4.011,.09,"DT")
3040525
"^DD",4.001,4.011,.11,0)
REPEATING FIELD^S^1:YES;0:NO;^0;11^Q
"^DD",4.001,4.011,.11,21,0)
^^5^5^3040817^
"^DD",4.001,4.011,.11,21,1,0)
If this field is repeating - a single valued multiple (a multiple
"^DD",4.001,4.011,.11,21,2,0)
field with only a .01 field) - field, then set the flag to YES.
"^DD",4.001,4.011,.11,21,3,0)

"^DD",4.001,4.011,.11,21,4,0)
If the multiple should be cleaned out first, then also set the CLEAN
"^DD",4.001,4.011,.11,21,5,0)
MULTIPLE flag too.
"^DD",4.001,4.011,.11,"DT")
3040817
"^DD",4.001,4.011,.12,0)
CLEAN MULTIPLE^S^1:YES;0:NO;^0;12^Q
"^DD",4.001,4.011,.12,3)
delete existing values before updating
"^DD",4.001,4.011,.12,21,0)
^^6^6^3040817^
"^DD",4.001,4.011,.12,21,1,0)
If this field is a single valued repeating element (see REPEATING FIELD)
"^DD",4.001,4.011,.12,21,2,0)
and the existing values should be deleted before the update occurs, then
"^DD",4.001,4.011,.12,21,3,0)
set this flag to YES.
"^DD",4.001,4.011,.12,21,4,0)

"^DD",4.001,4.011,.12,21,5,0)
By setting this flag, you indicate all the valid data is contained within
"^DD",4.001,4.011,.12,21,6,0)
the incoming message, so purge existing values and start clean.
"^DD",4.001,4.011,.12,"DT")
3040817
"^DD",4.001,4.011,.13,0)
VUID PREFIX^F^^0;13^K:$L(X)>10!($L(X)<1) X
"^DD",4.001,4.011,.13,3)
Enter string (i.e. "VUID") to indicate VUID value is passed instead of VALUE
"^DD",4.001,4.011,.13,21,0)
^^7^7^3041019^
"^DD",4.001,4.011,.13,21,1,0)
String indicates that at Pointer type field
"^DD",4.001,4.011,.13,21,2,0)
the VUID may be used instead of value (.01).
"^DD",4.001,4.011,.13,21,3,0)

"^DD",4.001,4.011,.13,21,4,0)
Example:  Instead of Drug Class name may be used
"^DD",4.001,4.011,.13,21,5,0)
VUID of drup class in the form: "VUID123456", where
"^DD",4.001,4.011,.13,21,6,0)
123456 is VUID of Drug Class and "VUID" is the
"^DD",4.001,4.011,.13,21,7,0)
prefix.
"^DD",4.001,4.011,.13,"DT")
3041019
"^DD",4.001,4.011,.14,0)
TIME ZONE FLAG^S^L:LOCAL;U:UTC;^0;14^Q
"^DD",4.001,4.011,.14,3)
Should the local or UTC time be filed?
"^DD",4.001,4.011,.14,21,0)
^.001^7^7^3050317^^^^
"^DD",4.001,4.011,.14,21,1,0)
If this column/field represents a date data type then MFS
"^DD",4.001,4.011,.14,21,2,0)
needs to know how to handle the time zone.
"^DD",4.001,4.011,.14,21,3,0)
 
"^DD",4.001,4.011,.14,21,4,0)
This field indicates how FileMan should file the HL7 date --
"^DD",4.001,4.011,.14,21,5,0)
local time or UTC time.
"^DD",4.001,4.011,.14,21,6,0)

"^DD",4.001,4.011,.14,21,7,0)
Note: VUID effective date/time should always be flagged LOCAL.
"^DD",4.001,4.011,.14,"DT")
3050317
"^DIC",4.001,4.001,0)
MASTER FILE PARAMETERS^4.001P
"^DIC",4.001,4.001,0,"GL")
^DIC(4.001,
"^DIC",4.001,4.001,"%",0)
^1.005^^0
"^DIC",4.001,4.001,"%D",0)
^^9^9^3031228^^
"^DIC",4.001,4.001,"%D",1,0)
The file holds parameters related to the Master File Server (MFS).
"^DIC",4.001,4.001,"%D",2,0)
 
"^DIC",4.001,4.001,"%D",3,0)
DO NOT EDIT THIS FILE!
"^DIC",4.001,4.001,"%D",4,0)
 
"^DIC",4.001,4.001,"%D",5,0)
The parameters map HL7 segment data to standard
"^DIC",4.001,4.001,"%D",6,0)
FileMan data files.  Local modifications to this
"^DIC",4.001,4.001,"%D",7,0)
file will seriously disrupt standard file updating
"^DIC",4.001,4.001,"%D",8,0)
and have negative consequences to existing VistA
"^DIC",4.001,4.001,"%D",9,0)
applications.
"^DIC",4.001,"B","MASTER FILE PARAMETERS",4.001)

**END**
**END**
