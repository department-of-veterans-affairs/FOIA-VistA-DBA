Released BPS*1*2 SEQ #4
Extracted from mail message
**KIDS**:BPS*1.0*2^

**INSTALL NAME**
BPS*1.0*2
"BLD",6355,0)
BPS*1.0*2^E CLAIMS MGMT ENGINE^0^3061207^y
"BLD",6355,1,0)
^^2^2^3060614^
"BLD",6355,1,1,0)
The HIPPA NPI project supports the use of NPI within the Electronic 
"BLD",6355,1,2,0)
Claims Management Engine (ECME) application.
"BLD",6355,4,0)
^9.64PA^9002313.91^3
"BLD",6355,4,9002313.02,0)
9002313.02
"BLD",6355,4,9002313.02,2,0)
^9.641^9002313.02^1
"BLD",6355,4,9002313.02,2,9002313.02,0)
BPS CLAIMS  (File-top level)
"BLD",6355,4,9002313.02,2,9002313.02,1,0)
^9.6411^.01^1
"BLD",6355,4,9002313.02,2,9002313.02,1,.01,0)
Claim ID
"BLD",6355,4,9002313.02,222)
y^y^p^^^^n^^n
"BLD",6355,4,9002313.02,224)

"BLD",6355,4,9002313.56,0)
9002313.56
"BLD",6355,4,9002313.56,2,0)
^9.641^9002313.56^1
"BLD",6355,4,9002313.56,2,9002313.56,0)
BPS PHARMACIES  (File-top level)
"BLD",6355,4,9002313.56,2,9002313.56,1,0)
^9.6411^.02^3
"BLD",6355,4,9002313.56,2,9002313.56,1,.02,0)
NCPDP #
"BLD",6355,4,9002313.56,2,9002313.56,1,41.01,0)
NPI
"BLD",6355,4,9002313.56,2,9002313.56,1,41.02,0)
DATE/TIME OF LAST NPI CHANGE
"BLD",6355,4,9002313.56,222)
y^y^p^^^^n^^n
"BLD",6355,4,9002313.56,224)

"BLD",6355,4,9002313.91,0)
9002313.91
"BLD",6355,4,9002313.91,222)
n^y^f^^n^NPI ENTRIES^y^o^n
"BLD",6355,4,"APDD",9002313.02,9002313.02)

"BLD",6355,4,"APDD",9002313.02,9002313.02,.01)

"BLD",6355,4,"APDD",9002313.56,9002313.56)

"BLD",6355,4,"APDD",9002313.56,9002313.56,.02)

"BLD",6355,4,"APDD",9002313.56,9002313.56,41.01)

"BLD",6355,4,"APDD",9002313.56,9002313.56,41.02)

"BLD",6355,4,"B",9002313.02,9002313.02)

"BLD",6355,4,"B",9002313.56,9002313.56)

"BLD",6355,4,"B",9002313.91,9002313.91)

"BLD",6355,6.3)
12
"BLD",6355,"INI")
EN^BPS01P2
"BLD",6355,"INID")
^n^n
"BLD",6355,"INIT")
TASKMAN^BPSJAREG
"BLD",6355,"KRN",0)
^9.67PA^8989.52^19
"BLD",6355,"KRN",.4,0)
.4
"BLD",6355,"KRN",.401,0)
.401
"BLD",6355,"KRN",.402,0)
.402
"BLD",6355,"KRN",.403,0)
.403
"BLD",6355,"KRN",.5,0)
.5
"BLD",6355,"KRN",.84,0)
.84
"BLD",6355,"KRN",3.6,0)
3.6
"BLD",6355,"KRN",3.8,0)
3.8
"BLD",6355,"KRN",9.2,0)
9.2
"BLD",6355,"KRN",9.8,0)
9.8
"BLD",6355,"KRN",9.8,"NM",0)
^9.68A^25^22
"BLD",6355,"KRN",9.8,"NM",1,0)
BPSNCPDP^^0^B55688274
"BLD",6355,"KRN",9.8,"NM",3,0)
BPSECX1^^0^B18310807
"BLD",6355,"KRN",9.8,"NM",4,0)
BPSOSCC^^0^B48377531
"BLD",6355,"KRN",9.8,"NM",5,0)
BPSOSCD^^0^B49363018
"BLD",6355,"KRN",9.8,"NM",6,0)
BPSBUTL^^0^B52557633
"BLD",6355,"KRN",9.8,"NM",7,0)
BPSJINIT^^0^B36822861
"BLD",6355,"KRN",9.8,"NM",9,0)
BPSJZRP^^0^B23528734
"BLD",6355,"KRN",9.8,"NM",10,0)
BPSJACK^^0^B35600985
"BLD",6355,"KRN",9.8,"NM",11,0)
BPSNPI^^0^B2822022
"BLD",6355,"KRN",9.8,"NM",12,0)
BPSPHAR^^0^B1520532
"BLD",6355,"KRN",9.8,"NM",13,0)
BPSBCKJ^^0^B46170482
"BLD",6355,"KRN",9.8,"NM",14,0)
BPSECMC2^^0^B13729099
"BLD",6355,"KRN",9.8,"NM",15,0)
BPSJPREG^^0^B18676924
"BLD",6355,"KRN",9.8,"NM",16,0)
BPSJAREG^^0^B12520945
"BLD",6355,"KRN",9.8,"NM",18,0)
BPSUTIL^^0^B4017713
"BLD",6355,"KRN",9.8,"NM",19,0)
BPSJVAL^^0^B8180579
"BLD",6355,"KRN",9.8,"NM",20,0)
BPSJVAL2^^0^B27168549
"BLD",6355,"KRN",9.8,"NM",21,0)
BPS01P2^^0^B332915
"BLD",6355,"KRN",9.8,"NM",22,0)
BPSOSU^^0^B70730686
"BLD",6355,"KRN",9.8,"NM",23,0)
BPSECMPS^^0^B68150253
"BLD",6355,"KRN",9.8,"NM",24,0)
BPSJUTL^^0^B9495384
"BLD",6355,"KRN",9.8,"NM",25,0)
BPSOSHR^^0^B19816580
"BLD",6355,"KRN",9.8,"NM","B","BPS01P2",21)

"BLD",6355,"KRN",9.8,"NM","B","BPSBCKJ",13)

"BLD",6355,"KRN",9.8,"NM","B","BPSBUTL",6)

"BLD",6355,"KRN",9.8,"NM","B","BPSECMC2",14)

"BLD",6355,"KRN",9.8,"NM","B","BPSECMPS",23)

"BLD",6355,"KRN",9.8,"NM","B","BPSECX1",3)

"BLD",6355,"KRN",9.8,"NM","B","BPSJACK",10)

"BLD",6355,"KRN",9.8,"NM","B","BPSJAREG",16)

"BLD",6355,"KRN",9.8,"NM","B","BPSJINIT",7)

"BLD",6355,"KRN",9.8,"NM","B","BPSJPREG",15)

"BLD",6355,"KRN",9.8,"NM","B","BPSJUTL",24)

"BLD",6355,"KRN",9.8,"NM","B","BPSJVAL",19)

"BLD",6355,"KRN",9.8,"NM","B","BPSJVAL2",20)

"BLD",6355,"KRN",9.8,"NM","B","BPSJZRP",9)

"BLD",6355,"KRN",9.8,"NM","B","BPSNCPDP",1)

"BLD",6355,"KRN",9.8,"NM","B","BPSNPI",11)

"BLD",6355,"KRN",9.8,"NM","B","BPSOSCC",4)

"BLD",6355,"KRN",9.8,"NM","B","BPSOSCD",5)

"BLD",6355,"KRN",9.8,"NM","B","BPSOSHR",25)

"BLD",6355,"KRN",9.8,"NM","B","BPSOSU",22)

"BLD",6355,"KRN",9.8,"NM","B","BPSPHAR",12)

"BLD",6355,"KRN",9.8,"NM","B","BPSUTIL",18)

"BLD",6355,"KRN",19,0)
19
"BLD",6355,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",6355,"KRN",19,"NM",1,0)
BPS APP REG TASKMAN^^1^
"BLD",6355,"KRN",19,"NM","B","BPS APP REG TASKMAN",1)

"BLD",6355,"KRN",19.1,0)
19.1
"BLD",6355,"KRN",101,0)
101
"BLD",6355,"KRN",409.61,0)
409.61
"BLD",6355,"KRN",771,0)
771
"BLD",6355,"KRN",870,0)
870
"BLD",6355,"KRN",8989.51,0)
8989.51
"BLD",6355,"KRN",8989.52,0)
8989.52
"BLD",6355,"KRN",8994,0)
8994
"BLD",6355,"KRN","B",.4,.4)

"BLD",6355,"KRN","B",.401,.401)

"BLD",6355,"KRN","B",.402,.402)

"BLD",6355,"KRN","B",.403,.403)

"BLD",6355,"KRN","B",.5,.5)

"BLD",6355,"KRN","B",.84,.84)

"BLD",6355,"KRN","B",3.6,3.6)

"BLD",6355,"KRN","B",3.8,3.8)

"BLD",6355,"KRN","B",9.2,9.2)

"BLD",6355,"KRN","B",9.8,9.8)

"BLD",6355,"KRN","B",19,19)

"BLD",6355,"KRN","B",19.1,19.1)

"BLD",6355,"KRN","B",101,101)

"BLD",6355,"KRN","B",409.61,409.61)

"BLD",6355,"KRN","B",771,771)

"BLD",6355,"KRN","B",870,870)

"BLD",6355,"KRN","B",8989.51,8989.51)

"BLD",6355,"KRN","B",8989.52,8989.52)

"BLD",6355,"KRN","B",8994,8994)

"BLD",6355,"QUES",0)
^9.62^^
"BLD",6355,"REQB",0)
^9.611^4^4
"BLD",6355,"REQB",1,0)
XU*8.0*410^1
"BLD",6355,"REQB",2,0)
BPS*1.0*3^1
"BLD",6355,"REQB",3,0)
PSO*7.0*254^1
"BLD",6355,"REQB",4,0)
BPS*1.0*4^1
"BLD",6355,"REQB","B","BPS*1.0*3",2)

"BLD",6355,"REQB","B","BPS*1.0*4",4)

"BLD",6355,"REQB","B","PSO*7.0*254",3)

"BLD",6355,"REQB","B","XU*8.0*410",1)

"DATA",9002313.91,5,0)
201^B1^SERVICE PROVIDER ID^A/N^12
"DATA",9002313.91,5,5)
B1^12
"DATA",9002313.91,5,10,0)
^9002313.9101^1^1^3060419^^
"DATA",9002313.91,5,10,1,0)
S BPS("X")=$G(BPS("Site","NPI"))
"DATA",9002313.91,5,20,0)
^9002313.9102^1^1^3040827^^^^
"DATA",9002313.91,5,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),12)
"DATA",9002313.91,5,25,0)
^9002313.9104^1^1^3040827^^^^
"DATA",9002313.91,5,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,5,30,0)
^9002313.9103^1^1^3040827^^^^
"DATA",9002313.91,5,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,1)=BPS("X")
"DATA",9002313.91,26,0)
411^DB^PRESCRIBER ID^A/N^10
"DATA",9002313.91,26,5)
DB^15
"DATA",9002313.91,26,10,0)
^^1^1^3060419^
"DATA",9002313.91,26,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Prescriber NPI"))
"DATA",9002313.91,26,20,0)
^9002313.9102^1^1^3030823^^^^
"DATA",9002313.91,26,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,26,25,0)
^9002313.9104^1^1^3030823^^^
"DATA",9002313.91,26,25,1,0)
S BPS("X")="DB"_$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,26,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,26,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,11)=BPS("X")
"DATA",9002313.91,45,0)
421^DL^PRIMARY PRESCRIBER^A/N^10
"DATA",9002313.91,45,5)
DL^15
"DATA",9002313.91,45,10,0)
^^2^2^3060419^
"DATA",9002313.91,45,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Primary Prescriber"))
"DATA",9002313.91,45,10,2,0)
I $G(VARX) S BPS("X")=BPS("RX",BPS(9002313.0201),"Primary Care Provider NPI")
"DATA",9002313.91,45,20,0)
^9002313.9102^1^1^3041015^^^^
"DATA",9002313.91,45,20,1,0)
S BPS("X")="DL"_$$ANFF^BPSECFM($G(BPS("X")),10)
"DATA",9002313.91,45,25,0)
^9002313.9104^1^1^3041015^^^^
"DATA",9002313.91,45,25,1,0)
S BPS("X")="DL"_$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,45,30,0)
^^1^1^3041015^
"DATA",9002313.91,45,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),400),U,21)=""
"DATA",9002313.91,75,0)
202^B2^SERV PROVIDER ID QUALIFIER^A/N^2
"DATA",9002313.91,75,5)
B2^2
"DATA",9002313.91,75,10,0)
^^1^1^3060419^
"DATA",9002313.91,75,10,1,0)
I $G(VARX) S BPS("X")="01"
"DATA",9002313.91,75,20,0)
^9002313.9102^1^1^3040114^^^^
"DATA",9002313.91,75,20,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,75,25,0)
^9002313.9104^1^1^3040114^^^^
"DATA",9002313.91,75,25,1,0)
S BPS("X")=$$ANFF^BPSECFM($G(BPS("X")),2) ;VA
"DATA",9002313.91,75,30,0)
^9002313.9103^1^1^3040114^^^^
"DATA",9002313.91,75,30,1,0)
S $P(^BPSC(BPS(9002313.02),200),U,2)=BPS("X") ;VA
"DATA",9002313.91,82,0)
465^EY^PROVIDER ID QUALIFIER^A/N^2
"DATA",9002313.91,82,5)
EY^2
"DATA",9002313.91,82,10,0)
^^1^1^3060419^
"DATA",9002313.91,82,10,1,0)
S BPS("X")="05"
"DATA",9002313.91,82,20,0)
^9002313.9102^1^1^3041015^^^^
"DATA",9002313.91,82,20,1,0)
S BPS("X")="EY"_$$ANFF^BPSECFM($G(BPS("X")),1)
"DATA",9002313.91,82,25,0)
^9002313.9104^1^1^3041015^^^^
"DATA",9002313.91,82,25,1,0)
S BPS("X")="EY"_$$ANFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,82,30,0)
^^1^1^3041015^
"DATA",9002313.91,82,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,5)=""
"DATA",9002313.91,83,0)
444^E9^PROVIDER ID^A/N^15
"DATA",9002313.91,83,5)
E9^15
"DATA",9002313.91,83,10,0)
^^1^1^3060419^
"DATA",9002313.91,83,10,1,0)
S BPS("X")=$G(BPS("RX",BPS(9002313.0201),"Provider NPI"))
"DATA",9002313.91,83,20,0)
^9002313.9102^1^1^3041015^^^^
"DATA",9002313.91,83,20,1,0)
S BPS("X")="E9"_$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,25,0)
^9002313.9104^1^1^3041015^^^^
"DATA",9002313.91,83,25,1,0)
S BPS("X")="E9"_$$ANFF^BPSECFM($G(BPS("X")),15)
"DATA",9002313.91,83,30,0)
^^1^1^3041015^
"DATA",9002313.91,83,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),440),U,4)=""
"DATA",9002313.91,84,0)
466^EZ^PRESCRIBER ID QUALIFIER^A/N^2
"DATA",9002313.91,84,5)
EZ^2
"DATA",9002313.91,84,10,0)
^^1^1^3060419^
"DATA",9002313.91,84,10,1,0)
S BPS("X")="01"
"DATA",9002313.91,84,20,0)
^9002313.9102^1^1^3030823^^^^
"DATA",9002313.91,84,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,25,0)
^9002313.9104^1^1^3030823^^^^
"DATA",9002313.91,84,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,84,30,0)
^9002313.9103^1^1^3030823^^^^
"DATA",9002313.91,84,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,6)=BPS("X")
"DATA",9002313.91,87,0)
468^2E^PRIMARY CARE PROV ID QUAL^A/N^2
"DATA",9002313.91,87,5)
2E^2
"DATA",9002313.91,87,10,0)
^^1^1^3060419^
"DATA",9002313.91,87,10,1,0)
I $G(VARX) S BPS("X")="01"
"DATA",9002313.91,87,20,0)
^9002313.9102^1^1^3041015^^^
"DATA",9002313.91,87,20,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,25,0)
^9002313.9104^1^1^3041015^^^^
"DATA",9002313.91,87,25,1,0)
S BPS("X")=$$NFF^BPSECFM($G(BPS("X")),2)
"DATA",9002313.91,87,30,0)
^^1^1^3041015^
"DATA",9002313.91,87,30,1,0)
S $P(^BPSC(BPS(9002313.02),400,BPS(9002313.0201),460),U,8)=""
"FIA",9002313.02)
BPS CLAIMS
"FIA",9002313.02,0)
^BPSC(
"FIA",9002313.02,0,0)
9002313.02
"FIA",9002313.02,0,1)
y^y^p^^^^n^^n
"FIA",9002313.02,0,10)

"FIA",9002313.02,0,11)

"FIA",9002313.02,0,"RLRO")

"FIA",9002313.02,0,"VR")
1.0^BPS
"FIA",9002313.02,9002313.02)
1
"FIA",9002313.02,9002313.02,.01)

"FIA",9002313.56)
BPS PHARMACIES
"FIA",9002313.56,0)
^BPS(9002313.56,
"FIA",9002313.56,0,0)
9002313.56
"FIA",9002313.56,0,1)
y^y^p^^^^n^^n
"FIA",9002313.56,0,10)

"FIA",9002313.56,0,11)

"FIA",9002313.56,0,"RLRO")

"FIA",9002313.56,0,"VR")
1.0^BPS
"FIA",9002313.56,9002313.56)
1
"FIA",9002313.56,9002313.56,.02)

"FIA",9002313.56,9002313.56,41.01)

"FIA",9002313.56,9002313.56,41.02)

"FIA",9002313.91)
BPS NCPDP FIELD DEFS
"FIA",9002313.91,0)
^BPSF(9002313.91,
"FIA",9002313.91,0,0)
9002313.91I
"FIA",9002313.91,0,1)
n^y^f^^n^NPI ENTRIES^y^o^n
"FIA",9002313.91,0,10)

"FIA",9002313.91,0,11)

"FIA",9002313.91,0,"RLRO")
^DIBT(4020,1)
"FIA",9002313.91,0,"VR")
1.0^BPS
"FIA",9002313.91,9002313.91)
0
"FIA",9002313.91,9002313.9101)
0
"FIA",9002313.91,9002313.9102)
0
"FIA",9002313.91,9002313.9103)
0
"FIA",9002313.91,9002313.9104)
0
"INI")
EN^BPS01P2
"INIT")
TASKMAN^BPSJAREG
"KRN",19,2938605,-1)
1^1
"KRN",19,2938605,0)
BPS APP REG TASKMAN
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",588,-1)
1^1
"PKG",588,0)
E CLAIMS MGMT ENGINE^BPS^ELECTRONIC CLAIMS MGT
"PKG",588,22,0)
^9.49I^1^1
"PKG",588,22,1,0)
1.0^3041008^3041029^18119
"PKG",588,22,1,"PAH",1,0)
2^3061207^18126
"PKG",588,22,1,"PAH",1,1,0)
^^2^2^3061207
"PKG",588,22,1,"PAH",1,1,1,0)
The HIPPA NPI project supports the use of NPI within the Electronic 
"PKG",588,22,1,"PAH",1,1,2,0)
Claims Management Engine (ECME) application.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
22
"RTN","BPS01P2")
0^21^B332915^n/a
"RTN","BPS01P2",1,0)
BPS01P2 ;BHAM ISC/DMB - NPI Drop Dead Date Checking ;04/19/2006
"RTN","BPS01P2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**2**;JUN 2004;Build 12
"RTN","BPS01P2",3,0)
 ;
"RTN","BPS01P2",4,0)
 ; Pre-Install routine for BPS*1.0*2
"RTN","BPS01P2",5,0)
 ; Fileman calls to SCHEDULE OPTION file (#19.2) are allowed
"RTN","BPS01P2",6,0)
 ;   by IA3732
"RTN","BPS01P2",7,0)
 ;
"RTN","BPS01P2",8,0)
 ; Must call this routine at the EN entry point
"RTN","BPS01P2",9,0)
 Q
"RTN","BPS01P2",10,0)
 ;
"RTN","BPS01P2",11,0)
 ;
"RTN","BPS01P2",12,0)
EN ; Remove Automated Registration as a scheduled job as
"RTN","BPS01P2",13,0)
 ; this is now called by the ECME Nightly Background Job
"RTN","BPS01P2",14,0)
 ; (BPSBCKJ), which is also an ECME scheduled job.
"RTN","BPS01P2",15,0)
 N DIC,X,Y,DTOUT,DUOUT,DIK,DA
"RTN","BPS01P2",16,0)
 ;
"RTN","BPS01P2",17,0)
 ; Get BPS APP REG TASKMAN option
"RTN","BPS01P2",18,0)
 S DIC=19.2,DIC(0)="BX",X="BPS APP REG TASKMAN"
"RTN","BPS01P2",19,0)
 D ^DIC
"RTN","BPS01P2",20,0)
 ;
"RTN","BPS01P2",21,0)
 ; Quit if it is not found
"RTN","BPS01P2",22,0)
 I Y=-1 Q
"RTN","BPS01P2",23,0)
 ;
"RTN","BPS01P2",24,0)
 ; Cleanup DIC variables and delete the option
"RTN","BPS01P2",25,0)
 K DIC,X,DTOUT,DUOUT
"RTN","BPS01P2",26,0)
 S DA=+Y,DIK="^DIC(19.2,"
"RTN","BPS01P2",27,0)
 D ^DIK
"RTN","BPS01P2",28,0)
 Q
"RTN","BPSBCKJ")
0^13^B46170482^B45801024
"RTN","BPSBCKJ",1,0)
BPSBCKJ ;BHAM ISC/AAT - BPS NIGHTLY BACKGROUND JOB ;02/27/2005
"RTN","BPSBCKJ",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSBCKJ",3,0)
 ;
"RTN","BPSBCKJ",4,0)
 Q
"RTN","BPSBCKJ",5,0)
 ;
"RTN","BPSBCKJ",6,0)
EN ; The ECME NIGHTLY PROCESS
"RTN","BPSBCKJ",7,0)
 ;
"RTN","BPSBCKJ",8,0)
 ; Do Auto-Reversals for claims not released and inpatient claims.
"RTN","BPSBCKJ",9,0)
 D AUTOREV
"RTN","BPSBCKJ",10,0)
 ; 
"RTN","BPSBCKJ",11,0)
 ; Do automatic registration.
"RTN","BPSBCKJ",12,0)
 D TASKMAN^BPSJAREG
"RTN","BPSBCKJ",13,0)
 Q
"RTN","BPSBCKJ",14,0)
 ;
"RTN","BPSBCKJ",15,0)
AUTOREV ; The Auto-Reverse Procedure
"RTN","BPSBCKJ",16,0)
 N BDT,BTRAN,BPHARM,BTRAN0,BTRAN1,BTRAN4,BDAYS,BRX,BFIL,BDATE,BNOW,BCLAIM,BRES,BREV,BTEST,REF,BCNT,BTX,X,X1,X2
"RTN","BPSBCKJ",17,0)
 ;
"RTN","BPSBCKJ",18,0)
 S BTEST=0 ; Debugging flag 1 - TEST, 0 - LIVE
"RTN","BPSBCKJ",19,0)
 S BCNT=0 ; Count reversals
"RTN","BPSBCKJ",20,0)
 ;
"RTN","BPSBCKJ",21,0)
 S REF=$NA(^TMP($J,"BPSBCKJ")) K @REF
"RTN","BPSBCKJ",22,0)
 ;
"RTN","BPSBCKJ",23,0)
 S (X1,BNOW)=$$DT^XLFDT()
"RTN","BPSBCKJ",24,0)
 ;
"RTN","BPSBCKJ",25,0)
 ;Define number of days to look back - Auto Reverse days can be from 0-31
"RTN","BPSBCKJ",26,0)
 ;To make sure every claim is caught, moving back 45 days
"RTN","BPSBCKJ",27,0)
 S X2=-45 D C^%DTC S BDT=X
"RTN","BPSBCKJ",28,0)
 ;
"RTN","BPSBCKJ",29,0)
 ;Loop through 'LAST UPDATE' 'AH' index
"RTN","BPSBCKJ",30,0)
 F  S BDT=$O(^BPST("AH",BDT)) Q:'BDT  S BTRAN=0 F  S BTRAN=$O(^BPST("AH",BDT,BTRAN)) Q:'BTRAN  D
"RTN","BPSBCKJ",31,0)
 . W:BTEST !,"TRAN=",BTRAN," ",?20
"RTN","BPSBCKJ",32,0)
 . S BTRAN0=$G(^BPST(BTRAN,0)),BTRAN1=$G(^(1)),BTRAN4=$G(^(4))
"RTN","BPSBCKJ",33,0)
 . I BTRAN0=""!(BTRAN1="") W:BTEST "ZERO OR ONE NODE MISSING" Q
"RTN","BPSBCKJ",34,0)
 . I '$$PAID^BPSOSQ4(BTRAN) W:BTEST "NOT PAID" Q  ; Not paid
"RTN","BPSBCKJ",35,0)
 . I $P(BTRAN0,U,13)'=1 W:BTEST "NOT AN RX" Q  ; Not a prescription transmission
"RTN","BPSBCKJ",36,0)
 . S BPHARM=$P(BTRAN1,U,7) I 'BPHARM W:BTEST "NO BPS PHARM" Q  ; BPS PHARMACY
"RTN","BPSBCKJ",37,0)
 . W:BTEST "BPHARM=",$P($G(^BPS(9002313.56,BPHARM,0)),U,1),"  "
"RTN","BPSBCKJ",38,0)
 . ;
"RTN","BPSBCKJ",39,0)
 . ;Handle 'Inpatient' Auto-Reversals
"RTN","BPSBCKJ",40,0)
 . S BREV=$$REVINP(BNOW,BTRAN,BTRAN0,BTRAN1,BPHARM) Q:BREV
"RTN","BPSBCKJ",41,0)
 . ;
"RTN","BPSBCKJ",42,0)
 . ;Handle Regular Auto-Reversals
"RTN","BPSBCKJ",43,0)
 . S BDAYS=+$P($G(^BPS(9002313.56,BPHARM,0)),U,9)
"RTN","BPSBCKJ",44,0)
 . I 'BDAYS W:BTEST "AUTO-REV DISABLED" Q  ;disabled
"RTN","BPSBCKJ",45,0)
 . I $P(BTRAN4,U,1) Q  ;Reversal claim exist
"RTN","BPSBCKJ",46,0)
 . S BCLAIM=$P(BTRAN0,U,4) I 'BCLAIM W:BTEST "NO BCLAIM" Q
"RTN","BPSBCKJ",47,0)
 . I $P($G(^BPSC(BCLAIM,0)),U,7) W:BTEST "AUTO-REVERSE FLAG" Q 
"RTN","BPSBCKJ",48,0)
 . S BDATE=$P($G(^BPSC(BCLAIM,0)),U,5)
"RTN","BPSBCKJ",49,0)
 . I 'BDATE S BDATE=$P($G(^BPSC(BCLAIM,0)),U,6)
"RTN","BPSBCKJ",50,0)
 . S BDATE=$P(BDATE,".")
"RTN","BPSBCKJ",51,0)
 . I 'BDATE="" W:BTEST "NO DATE" Q
"RTN","BPSBCKJ",52,0)
 . W:BTEST "DATE=",BDATE,"  "
"RTN","BPSBCKJ",53,0)
 . I $$FMDIFF^XLFDT(BNOW,BDATE,1)'>BDAYS W:BTEST "TOO EARLY" Q
"RTN","BPSBCKJ",54,0)
 . S BRX=$P(BTRAN1,U,11) I 'BRX W:BTEST "NO RX" Q
"RTN","BPSBCKJ",55,0)
 . S BFIL=$P(BTRAN1,U,1)
"RTN","BPSBCKJ",56,0)
 . I $$RELDATE(BRX,BFIL) W:BTEST " RELEASED" Q  ;released
"RTN","BPSBCKJ",57,0)
 . S BRES=$$REVERSE(BRX,BFIL,BCLAIM,1)
"RTN","BPSBCKJ",58,0)
 . W:BTEST " *REV CLM=",BCLAIM," STAT=",BRES
"RTN","BPSBCKJ",59,0)
 . I BRES=0!(BRES=4) D
"RTN","BPSBCKJ",60,0)
 .. S (BCNT,@REF@(BRES))=$G(@REF@(BRES))+1
"RTN","BPSBCKJ",61,0)
 .. S @REF@(BRES,BCNT)=BTRAN_U_BCLAIM_U_BRX_U_BFIL_U_BPHARM
"RTN","BPSBCKJ",62,0)
 . ; Any notifications to IB?
"RTN","BPSBCKJ",63,0)
 D BULL(REF) ; Send the bulletin
"RTN","BPSBCKJ",64,0)
 K @REF
"RTN","BPSBCKJ",65,0)
 Q
"RTN","BPSBCKJ",66,0)
 ;
"RTN","BPSBCKJ",67,0)
 ;Auto-Reverse Claims for Current Inpatients
"RTN","BPSBCKJ",68,0)
 ;
"RTN","BPSBCKJ",69,0)
 ;20050810;BEE;Phase III - CR11
"RTN","BPSBCKJ",70,0)
 ;
"RTN","BPSBCKJ",71,0)
REVINP(BNOW,BTRAN,BTRAN0,BTRAN1,BPHARM) N BRX,BFIL,BCLAIM,BDATE,BRES,DFN,VAIP
"RTN","BPSBCKJ",72,0)
 ;
"RTN","BPSBCKJ",73,0)
 ;Only process Window fills
"RTN","BPSBCKJ",74,0)
 S BRX=+$P(BTRAN1,U,11) I BRX=0 Q 0
"RTN","BPSBCKJ",75,0)
 S BFIL=+$P(BTRAN1,U)
"RTN","BPSBCKJ",76,0)
 I $$MWC^BPSRPT6(BRX,BFIL)'=3 Q 0
"RTN","BPSBCKJ",77,0)
 ;
"RTN","BPSBCKJ",78,0)
 ;Check for Fill date - Must be equal to T-5
"RTN","BPSBCKJ",79,0)
 S BCLAIM=$P(BTRAN0,U,4) I 'BCLAIM Q 0
"RTN","BPSBCKJ",80,0)
 S BDATE=$$FILDATE(BRX,BFIL)
"RTN","BPSBCKJ",81,0)
 S BDATE=$P(BDATE,".")
"RTN","BPSBCKJ",82,0)
 I 'BDATE="" Q 0
"RTN","BPSBCKJ",83,0)
 I $$FMDIFF^XLFDT(BNOW,BDATE,1)'=5 Q 0
"RTN","BPSBCKJ",84,0)
 ;
"RTN","BPSBCKJ",85,0)
 ;Check for current Inpatient
"RTN","BPSBCKJ",86,0)
 S DFN=+$P(BTRAN0,U,6) I DFN=0 Q 0
"RTN","BPSBCKJ",87,0)
 D IN5^VADPT
"RTN","BPSBCKJ",88,0)
 I $G(VAIP(3))="" Q 0
"RTN","BPSBCKJ",89,0)
 ;
"RTN","BPSBCKJ",90,0)
 ;Auto-Reverse Claim
"RTN","BPSBCKJ",91,0)
 S BRES=$$REVERSE(BRX,BFIL,BCLAIM,2)
"RTN","BPSBCKJ",92,0)
 W:BTEST " *REV CLM=",BCLAIM," STAT=",BRES
"RTN","BPSBCKJ",93,0)
 I BRES=0!(BRES=4) D
"RTN","BPSBCKJ",94,0)
 . S (BCNT,@REF@(BRES))=$G(@REF@(BRES))+1
"RTN","BPSBCKJ",95,0)
 . S @REF@(BRES,BCNT)=BTRAN_U_BCLAIM_U_BRX_U_BFIL_U_BPHARM
"RTN","BPSBCKJ",96,0)
 Q 1
"RTN","BPSBCKJ",97,0)
 ;
"RTN","BPSBCKJ",98,0)
RELDATE(BRX,BFIL) ;Get the Released Date 
"RTN","BPSBCKJ",99,0)
 I BFIL Q $P($G(^PSRX(BRX,1,+BFIL,0)),U,18)
"RTN","BPSBCKJ",100,0)
 Q $P($G(^PSRX(BRX,2)),U,13)
"RTN","BPSBCKJ",101,0)
 ;
"RTN","BPSBCKJ",102,0)
FILDATE(BRX,BFIL) ;Get the Fill Date 
"RTN","BPSBCKJ",103,0)
 I BFIL Q $P($G(^PSRX(BRX,1,+BFIL,0)),U,1)
"RTN","BPSBCKJ",104,0)
 Q $P($G(^PSRX(BRX,2)),U,2)
"RTN","BPSBCKJ",105,0)
 ;
"RTN","BPSBCKJ",106,0)
REVERSE(BRX,BFIL,BCLAIM,BTYPE) ;Auto-Reverse the claim
"RTN","BPSBCKJ",107,0)
 ;PUBLIC BTEST
"RTN","BPSBCKJ",108,0)
 N BDOS,BRES,BDAT,BMES,BRSN
"RTN","BPSBCKJ",109,0)
 I $G(BTEST) Q 0  ; Test mode
"RTN","BPSBCKJ",110,0)
 ;
"RTN","BPSBCKJ",111,0)
 ; Get Date of Service and set reversal reason
"RTN","BPSBCKJ",112,0)
 S BDOS=$$DOSDATE^BPSSCRRS(BRX,BFIL)
"RTN","BPSBCKJ",113,0)
 S BRSN=$S(BTYPE=2:"CURRENT INPATIENT",1:"PRESCRIPTION NOT RELEASED")
"RTN","BPSBCKJ",114,0)
 ;
"RTN","BPSBCKJ",115,0)
 ; Call ECME to process reversal
"RTN","BPSBCKJ",116,0)
 S BRES=$$EN^BPSNCPDP(BRX,BFIL,BDOS,"AREV","",BRSN,"")
"RTN","BPSBCKJ",117,0)
 ;
"RTN","BPSBCKJ",118,0)
 ; If successful, log message to the Prescription Activity Log
"RTN","BPSBCKJ",119,0)
 ;  and set the auto-reversal flag
"RTN","BPSBCKJ",120,0)
 S BRES=+BRES,BMES="Submitted to ECME: AUTO REVERSAL JOB"
"RTN","BPSBCKJ",121,0)
 I BRES=0 D
"RTN","BPSBCKJ",122,0)
 . D ECMEACT^PSOBPSU1(BRX,BFIL,BMES,.5)
"RTN","BPSBCKJ",123,0)
 . S BDAT(9002313.02,BCLAIM_",",.07)=BTYPE D FILE^DIE("","BDAT")
"RTN","BPSBCKJ",124,0)
 Q BRES
"RTN","BPSBCKJ",125,0)
 ;
"RTN","BPSBCKJ",126,0)
 ;
"RTN","BPSBCKJ",127,0)
BULL(REF) ;Bulletin to the OPECC
"RTN","BPSBCKJ",128,0)
 ;PUBLIC BTEST,DUZ,DT
"RTN","BPSBCKJ",129,0)
 N XMSUB,XMY,XMTEXT,XMDUZ,BLNUM
"RTN","BPSBCKJ",130,0)
 ;
"RTN","BPSBCKJ",131,0)
 S BLNUM=0,BCNT=+$G(@REF@(0))
"RTN","BPSBCKJ",132,0)
 S XMSUB="ECME AUTO-REVERSAL PROCESS"
"RTN","BPSBCKJ",133,0)
 I $G(BTEST) D T("*** P L E A S E   D I S R E G A R D    T H I S    E M A I L ***"),T(),T("NOT ACTUALLY REVERSED - THIS IS A TEST TEST TEST TEST"),T()
"RTN","BPSBCKJ",134,0)
 D T("The ECME Nightly Process completed auto-reversals for the following e-Pharmacy")
"RTN","BPSBCKJ",135,0)
 D T("prescriptions.")
"RTN","BPSBCKJ",136,0)
 D T()
"RTN","BPSBCKJ",137,0)
 D T("TOTAL AUTO-REVERSED CLAIMS: "_BCNT)
"RTN","BPSBCKJ",138,0)
 D T()
"RTN","BPSBCKJ",139,0)
 I BCNT D T("Claims Auto-Reversed on "_$$DAT(DT)_":") D ARLIST(0,REF)
"RTN","BPSBCKJ",140,0)
 D T()
"RTN","BPSBCKJ",141,0)
 S BCNT=+$G(@REF@(4))
"RTN","BPSBCKJ",142,0)
 I BCNT'=0 D
"RTN","BPSBCKJ",143,0)
 . D T()
"RTN","BPSBCKJ",144,0)
 . D T("The ECME Nightly Process attempted to auto-reversal the following claims but")
"RTN","BPSBCKJ",145,0)
 . D T("could not because the previous request was IN PROGRESS.  Please verify that")
"RTN","BPSBCKJ",146,0)
 . D T("the previous request is not stranded.")
"RTN","BPSBCKJ",147,0)
 . D T()
"RTN","BPSBCKJ",148,0)
 . D T("Total number of claims that could not be auto-reversed: "_BCNT)
"RTN","BPSBCKJ",149,0)
 . D T()
"RTN","BPSBCKJ",150,0)
 . D T("Claims not auto-reversed on "_$$DAT(DT)_":")
"RTN","BPSBCKJ",151,0)
 . D ARLIST(4,REF)
"RTN","BPSBCKJ",152,0)
 . D T()
"RTN","BPSBCKJ",153,0)
 ;
"RTN","BPSBCKJ",154,0)
 S XMDUZ="BPS PACKAGE",XMTEXT="BTX("
"RTN","BPSBCKJ",155,0)
 S XMY("G.BPS OPECC")=""
"RTN","BPSBCKJ",156,0)
 I $G(DUZ)'<1 S XMY(DUZ)=""
"RTN","BPSBCKJ",157,0)
 D ^XMD
"RTN","BPSBCKJ",158,0)
 Q
"RTN","BPSBCKJ",159,0)
 ;
"RTN","BPSBCKJ",160,0)
T(BTXT) ; Add text to the message
"RTN","BPSBCKJ",161,0)
 ;PUBLIC BLNUM,BTEST
"RTN","BPSBCKJ",162,0)
 S BLNUM=BLNUM+1,BTX(BLNUM)=$G(BTXT," ")
"RTN","BPSBCKJ",163,0)
 I $G(BTEST) W !,$G(BTXT)
"RTN","BPSBCKJ",164,0)
 Q
"RTN","BPSBCKJ",165,0)
 ;
"RTN","BPSBCKJ",166,0)
ARLIST(BRES,REF) ;Auto-Rev List
"RTN","BPSBCKJ",167,0)
 N I,TXT,BCLAIM,BTRAN,Y,BRX,BFIL,BFDATE,BPHARM,BRXN,BPHARMN,BPAT,BPSTAT
"RTN","BPSBCKJ",168,0)
 D T()
"RTN","BPSBCKJ",169,0)
 D T(" #    RX     FILL  STATUS FILL DATE PATIENT                      BPS PHARMACY")
"RTN","BPSBCKJ",170,0)
 D T("------------------------------------------------------------------------------")
"RTN","BPSBCKJ",171,0)
 S I=0 F  S I=$O(@REF@(BRES,I)) Q:'I   D
"RTN","BPSBCKJ",172,0)
 . S Y=@REF@(BRES,I)
"RTN","BPSBCKJ",173,0)
 . S BTRAN=$P(Y,U)
"RTN","BPSBCKJ",174,0)
 . S BCLAIM=$P(Y,U,2)
"RTN","BPSBCKJ",175,0)
 . S BRX=$P(Y,U,3),BRXN=$P($G(^PSRX(BRX,0)),U)
"RTN","BPSBCKJ",176,0)
 . S BPAT=$P($G(^DPT($P($G(^PSRX(BRX,0)),U,2),0)),U)
"RTN","BPSBCKJ",177,0)
 . S BFIL=$P(Y,U,4)
"RTN","BPSBCKJ",178,0)
 . S BPHARM=$P(Y,U,5),BPHARMN=$P($G(^BPS(9002313.56,BPHARM,0)),U)
"RTN","BPSBCKJ",179,0)
 . S BFDATE=$$FILDATE(BRX,BFIL)
"RTN","BPSBCKJ",180,0)
 . S BPSTAT=$$MWCNAM^BPSRPT1($$MWC^BPSRPT6(BRX,BFIL))_"/"_$S($$RELDATE(BRX,BFIL)]"":"RL",1:"NR")
"RTN","BPSBCKJ",181,0)
 . S TXT=$J(I,3)_" "_$$J(BRXN,10)_" "_$$J(BFIL,2)_"  "_$J(BPSTAT,4)_"  "_$$J($$DAT(BFDATE),11)_$$J(BPAT,25)_" "_$J($E(BPHARMN,1,15),15)
"RTN","BPSBCKJ",182,0)
 . D T(TXT)
"RTN","BPSBCKJ",183,0)
 D T("------------------------------------------------------------------------------")
"RTN","BPSBCKJ",184,0)
 Q
"RTN","BPSBCKJ",185,0)
 ;
"RTN","BPSBCKJ",186,0)
J(TXT,LEN) ;Left justify
"RTN","BPSBCKJ",187,0)
 Q TXT_$J("",LEN-$L(TXT))
"RTN","BPSBCKJ",188,0)
 ;
"RTN","BPSBCKJ",189,0)
DAT(X,Y) ; Convert FM date to displayable (mm/dd/yy) format.
"RTN","BPSBCKJ",190,0)
 ; -- optional output of time, if $g(y) 
"RTN","BPSBCKJ",191,0)
 N DATE,T
"RTN","BPSBCKJ",192,0)
 S DATE=$S(X:$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3),1:"")
"RTN","BPSBCKJ",193,0)
 I $G(Y) S T="."_$E($P(X,".",2)_"000000",1,7) I T>0 S DATE=DATE_" "_$S($E(T,2,3)>12:$E(T,2,3)-12,$E(T,2,3)="00":"00",1:+$E(T,2,3))_":"_$E(T,4,5)_$S($E(T,2,5)>1200:" pm",1:" am")
"RTN","BPSBCKJ",194,0)
 Q DATE
"RTN","BPSBUTL")
0^6^B52557633^B47119211
"RTN","BPSBUTL",1,0)
BPSBUTL ;BHAM ISC/MFR/VA/DLF - IB Communication Utilities ;06/01/2004
"RTN","BPSBUTL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSBUTL",3,0)
 ;Reference to ^PSRX supported by DBIA 1977
"RTN","BPSBUTL",4,0)
 ;Reference to STORESP^IBNCPDP supported by DBIA 4299
"RTN","BPSBUTL",5,0)
 ;Reference to ^DG(40.8,"AD" supported by DBIA 2817
"RTN","BPSBUTL",6,0)
 ;----------------------------------------------------------------------
"RTN","BPSBUTL",7,0)
CLOSE(CLAIM,TRNDX,REASON,PAPER,RELCOP,COMMENT,ERROR) ; Send IB an update on the CLAIM status for a Closed Claim
"RTN","BPSBUTL",8,0)
 N DFN,IBARY,BILLNUM,CLAIMNFO,RXINFO,RFINFO,TRANINFO
"RTN","BPSBUTL",9,0)
 ;
"RTN","BPSBUTL",10,0)
 ; - Data gathering
"RTN","BPSBUTL",11,0)
 D GETS^DIQ("9002313.59",TRNDX,"1.11;9","I","TRANINFO")
"RTN","BPSBUTL",12,0)
 S RXIEN=TRANINFO(9002313.59,TRNDX_",",1.11,"I")
"RTN","BPSBUTL",13,0)
 I '$D(^PSRX(RXIEN,0)) S ERROR="Prescription not found." Q
"RTN","BPSBUTL",14,0)
 S IBARY("FILL NUMBER")=TRANINFO(9002313.59,TRNDX_",",9,"I")
"RTN","BPSBUTL",15,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;403;426","","CLAIMNFO")
"RTN","BPSBUTL",16,0)
 S IBARY("FILL DATE")=$$EXT2FM^BPSOSU1(CLAIMNFO("9002313.0201","1,"_CLAIM_",","401"))
"RTN","BPSBUTL",17,0)
 D GETS^DIQ("52",RXIEN,".01;4;6;8;7;16;27","IE","RXINFO")
"RTN","BPSBUTL",18,0)
 S FILLNUM=+IBARY("FILL NUMBER") I FILLNUM>0 D GETS^DIQ("52.1",FILLNUM_","_RXIEN,".01;1;1.1;11","","RFINFO")
"RTN","BPSBUTL",19,0)
 S DFN=$P(^PSRX(RXIEN,0),"^",2)
"RTN","BPSBUTL",20,0)
 S IBARY("FILLED BY")=RXINFO(52,RXIEN_",",16,"I"),IBARY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",21,0)
 S IBARY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",22,0)
 S IBARY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",23,0)
 S IBARY("PLAN")=$P(^BPST(TRNDX,10,1,0),"^"),IBARY("STATUS")="CLOSED",IBARY("PAID")=0
"RTN","BPSBUTL",24,0)
 S IBARY("RELEASE DATE")=$S(FILLNUM=0:$P(^PSRX(RXIEN,2),"^",13),1:$P($G(^PSRX(RXIEN,1,FILLNUM,0)),"^",18))
"RTN","BPSBUTL",25,0)
 S IBARY("DIVISION")=$$MCDIV(RXIEN,FILLNUM),IBARY("USER")=DUZ
"RTN","BPSBUTL",26,0)
 I REASON'="" D
"RTN","BPSBUTL",27,0)
 . S IBARY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",28,0)
 . S IBARY("DROP TO PAPER")=+$G(PAPER)
"RTN","BPSBUTL",29,0)
 . S IBARY("RELEASE COPAY")=+$G(RELCOP)
"RTN","BPSBUTL",30,0)
 I $G(COMMENT)]"" S IBARY("CLOSE COMMENT")=COMMENT
"RTN","BPSBUTL",31,0)
 ;
"RTN","BPSBUTL",32,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.IBARY)
"RTN","BPSBUTL",33,0)
 Q
"RTN","BPSBUTL",34,0)
 ; Send IB an update on the CLAIM status for a restocked or deleted prescription
"RTN","BPSBUTL",35,0)
CLOSE2(RXIEN,BFILL,BWHERE) ;
"RTN","BPSBUTL",36,0)
 N IEN59,IBARY,DFN,BILLNUM,FILL,REASON
"RTN","BPSBUTL",37,0)
 N CLAIMNFO,RXINFO,RFINFO
"RTN","BPSBUTL",38,0)
 N DIE,DA,DR
"RTN","BPSBUTL",39,0)
 ;
"RTN","BPSBUTL",40,0)
 ; Check parameters
"RTN","BPSBUTL",41,0)
 I '$G(RXIEN) S ERROR="No prescription parameter" Q
"RTN","BPSBUTL",42,0)
 I '$D(^PSRX(RXIEN,0)) S ERROR="Prescription not found." Q
"RTN","BPSBUTL",43,0)
 I ",DDED,DE,RS,"'[(","_BWHERE_",") S ERROR="Invalid BWHERE parameter" Q
"RTN","BPSBUTL",44,0)
 ;
"RTN","BPSBUTL",45,0)
 ; Calculate the transaction IEN and see that it exists
"RTN","BPSBUTL",46,0)
 S FILL=".0000"_+BFILL
"RTN","BPSBUTL",47,0)
 S IEN59=RXIEN_"."_$E(FILL,$L(FILL)-3,$L(FILL))_"1"
"RTN","BPSBUTL",48,0)
 I '$D(^BPST(IEN59,0)) Q
"RTN","BPSBUTL",49,0)
 ;
"RTN","BPSBUTL",50,0)
 ; Get claim data
"RTN","BPSBUTL",51,0)
 S CLAIM=$P(^BPST(IEN59,0),"^",4)
"RTN","BPSBUTL",52,0)
 D GETS^DIQ("9002313.02",CLAIM,"400*;401;402;426","","CLAIMNFO")
"RTN","BPSBUTL",53,0)
 S IBARY("FILL NUMBER")=+BFILL
"RTN","BPSBUTL",54,0)
 S IBARY("FILL DATE")=$$EXT2FM^BPSOSU1(CLAIMNFO("9002313.0201","1,"_CLAIM_",","401"))
"RTN","BPSBUTL",55,0)
 ;
"RTN","BPSBUTL",56,0)
 ; Get prescription data
"RTN","BPSBUTL",57,0)
 D GETS^DIQ("52",RXIEN,".01;4;6;8;7;16;27","IE","RXINFO")
"RTN","BPSBUTL",58,0)
 S FILLNUM=IBARY("FILL NUMBER")
"RTN","BPSBUTL",59,0)
 I FILLNUM>0 D GETS^DIQ("52.1",FILLNUM_","_RXIEN,".01;1;1.1;11","","RFINFO")
"RTN","BPSBUTL",60,0)
 S DFN=$P(^PSRX(RXIEN,0),"^",2)
"RTN","BPSBUTL",61,0)
 S IBARY("FILLED BY")=RXINFO(52,RXIEN_",",16,"I"),IBARY("PRESCRIPTION")=RXIEN
"RTN","BPSBUTL",62,0)
 S IBARY("BILLED")=$$DFF2EXT^BPSECFM($P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","426"),"DQ",2))
"RTN","BPSBUTL",63,0)
 S IBARY("CLAIMID")=$P(CLAIMNFO("9002313.0201","1,"_CLAIM_",","402"),"D2",2)
"RTN","BPSBUTL",64,0)
 S IBARY("PLAN")=$P(^BPST(IEN59,10,1,0),"^"),IBARY("STATUS")="CLOSED",IBARY("PAID")=0
"RTN","BPSBUTL",65,0)
 S IBARY("RELEASE DATE")=$S(FILLNUM=0:$P(^PSRX(RXIEN,2),"^",13),1:$P($G(^PSRX(RXIEN,1,FILLNUM,0)),"^",18))
"RTN","BPSBUTL",66,0)
 ;
"RTN","BPSBUTL",67,0)
 ; Determine the reversal reason based on the BWHERE value
"RTN","BPSBUTL",68,0)
 I BWHERE="RS" S REASON="PRESCRIPTION NOT RELEASED"
"RTN","BPSBUTL",69,0)
 I BWHERE="DE"!(BWHERE="DDED") S REASON="PRESCRIPTION DELETED"
"RTN","BPSBUTL",70,0)
 I REASON]"" S IBARY("CLOSE REASON")=$O(^IBE(356.8,"B",REASON,0))
"RTN","BPSBUTL",71,0)
 ;
"RTN","BPSBUTL",72,0)
 ;if a refill was deleted while RX is still active (not deleted) then send DELETION OF REFILL comment for CT record
"RTN","BPSBUTL",73,0)
 I BWHERE="DE",$$RXSTATUS^BPSSCRU2(RXIEN,0)'=13 S IBARY("CLOSE COMMENT")="DELETION OF REFILL ONLY - ORIGINAL RX MAY REMAIN ACTIVE"
"RTN","BPSBUTL",74,0)
 ;
"RTN","BPSBUTL",75,0)
 ; Miscellaneous values
"RTN","BPSBUTL",76,0)
 S IBARY("DIVISION")=$$MCDIV(RXIEN,FILLNUM),IBARY("USER")=.5
"RTN","BPSBUTL",77,0)
 ;
"RTN","BPSBUTL",78,0)
 ; Update IB
"RTN","BPSBUTL",79,0)
 S BILLNUM=$$STORESP^IBNCPDP(DFN,.IBARY)
"RTN","BPSBUTL",80,0)
 ;
"RTN","BPSBUTL",81,0)
 ; Update the claim file that the claim is closed and the reason why.
"RTN","BPSBUTL",82,0)
 S DIE="^BPSC(",DA=CLAIM
"RTN","BPSBUTL",83,0)
 S DR="901///1;902///"_$$NOW^XLFDT()_";903///.5;904///"_IBARY("CLOSE REASON")
"RTN","BPSBUTL",84,0)
 D ^DIE
"RTN","BPSBUTL",85,0)
 Q
"RTN","BPSBUTL",86,0)
 ;
"RTN","BPSBUTL",87,0)
 ; Function to return Transaction, claim, and response IENs
"RTN","BPSBUTL",88,0)
 ; Parameters:
"RTN","BPSBUTL",89,0)
 ;    RXI: Prescription IEN
"RTN","BPSBUTL",90,0)
 ;    RXR: Fill Number
"RTN","BPSBUTL",91,0)
 ; Returns:
"RTN","BPSBUTL",92,0)
 ;    IEN59^Claim IEN^Response IEN^Reversal Claim IEN^Reversal Response IEN
"RTN","BPSBUTL",93,0)
CLAIM(RXI,RXR) ;
"RTN","BPSBUTL",94,0)
 N IEN59,CLAIMIEN,RESPIEN,REVCLAIM,REVRESP
"RTN","BPSBUTL",95,0)
 I '$G(RXI) Q
"RTN","BPSBUTL",96,0)
 S IEN59=$$IEN59^BPSOSRX(RXI,RXR)
"RTN","BPSBUTL",97,0)
 I '$D(^BPST(IEN59,0)) Q ""
"RTN","BPSBUTL",98,0)
 S CLAIMIEN=$P(^BPST(IEN59,0),"^",4),RESPIEN=$P(^BPST(IEN59,0),"^",5)
"RTN","BPSBUTL",99,0)
 S REVCLAIM=$P($G(^BPST(IEN59,4)),"^",1),REVRESP=$P($G(^BPST(IEN59,4)),"^",2)
"RTN","BPSBUTL",100,0)
 Q IEN59_U_CLAIMIEN_U_RESPIEN_U_REVCLAIM_U_REVRESP
"RTN","BPSBUTL",101,0)
 ;
"RTN","BPSBUTL",102,0)
NABP(RXP,BFILL) ;
"RTN","BPSBUTL",103,0)
 N BPSTIEN,BPSCIEN,DFILL,NABP
"RTN","BPSBUTL",104,0)
 S DFILL=$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)
"RTN","BPSBUTL",105,0)
 S BPSTIEN=RXP_"."_DFILL_"1"
"RTN","BPSBUTL",106,0)
 I 'BPSTIEN Q 0
"RTN","BPSBUTL",107,0)
 S BPSCIEN=$P($G(^BPST(BPSTIEN,0)),U,4)
"RTN","BPSBUTL",108,0)
 I 'BPSCIEN Q 0
"RTN","BPSBUTL",109,0)
 S NABP=$P($G(^BPSC(BPSCIEN,200)),U)
"RTN","BPSBUTL",110,0)
 Q NABP
"RTN","BPSBUTL",111,0)
 ;
"RTN","BPSBUTL",112,0)
 ;MC Division for the IB
"RTN","BPSBUTL",113,0)
MCDIV(RXIEN,FILLNUM) ; Get MC DIVISION from the Rx/Fill
"RTN","BPSBUTL",114,0)
 N BPSDIV,BINST,BMCDIV
"RTN","BPSBUTL",115,0)
 ; outpatient division
"RTN","BPSBUTL",116,0)
 I 'FILLNUM S BPSDIV=+$P($G(^PSRX(RXIEN,2)),U,9)
"RTN","BPSBUTL",117,0)
 E  S BPSDIV=+$P($G(^PSRX(RXIEN,1,FILLNUM,0)),U,9)
"RTN","BPSBUTL",118,0)
 I 'BPSDIV Q ""
"RTN","BPSBUTL",119,0)
 ; related institution
"RTN","BPSBUTL",120,0)
 S BINST=+$P($G(^PS(59,BPSDIV,"INI")),U) Q:'BINST ""
"RTN","BPSBUTL",121,0)
 S BMCDIV=$O(^DG(40.8,"AD",BINST,0)) ; medical center division
"RTN","BPSBUTL",122,0)
 Q BMCDIV
"RTN","BPSBUTL",123,0)
 ;
"RTN","BPSBUTL",124,0)
 ; DIVNCPDP - For a specific outpatient site, first try to get the NPI.
"RTN","BPSBUTL",125,0)
 ;            If no NPI, get NABP/NCPDP number.
"RTN","BPSBUTL",126,0)
 ; Note that the name is misleading but this originally only returned
"RTN","BPSBUTL",127,0)
 ;      NABP/NCPDP.
"RTN","BPSBUTL",128,0)
 ;
"RTN","BPSBUTL",129,0)
 ; Input
"RTN","BPSBUTL",130,0)
 ;   ABSBPDIV - Outpatient Site
"RTN","BPSBUTL",131,0)
 ; Output
"RTN","BPSBUTL",132,0)
 ;   "" - No BPS Pharmacy for the outpatient site.
"RTN","BPSBUTL",133,0)
 ;   NPI if available, otherwise NABP/NCPCP number (prior to NPI drop
"RTN","BPSBUTL",134,0)
 ;      dead date)
"RTN","BPSBUTL",135,0)
DIVNCPDP(ABSBPDIV) ;
"RTN","BPSBUTL",136,0)
 N BPSHARM,FACID,ABSBSDIV
"RTN","BPSBUTL",137,0)
 I '$G(ABSBPDIV) Q ""
"RTN","BPSBUTL",138,0)
 S FACID="",ABSBSDIV=1
"RTN","BPSBUTL",139,0)
 ; GETPHARM expects ABSBPDIV and ABSBSDIV to be set
"RTN","BPSBUTL",140,0)
 ; Returns BPSHARM (BPS Pharmacy IEN)
"RTN","BPSBUTL",141,0)
 D GETPHARM^BPSOSQC
"RTN","BPSBUTL",142,0)
 I BPSHARM=0 Q FACID
"RTN","BPSBUTL",143,0)
 S FACID=$$GET1^DIQ(9002313.56,BPSHARM_",",41.01)
"RTN","BPSBUTL",144,0)
 I FACID="",'$$NPIREQ^BPSNPI(DT) S FACID=$$GET1^DIQ(9002313.56,BPSHARM_",",.02)
"RTN","BPSBUTL",145,0)
 Q FACID
"RTN","BPSBUTL",146,0)
 ;
"RTN","BPSBUTL",147,0)
 ; DIVNPI - Get NPI number for a specific outpatient site
"RTN","BPSBUTL",148,0)
 ; Input
"RTN","BPSBUTL",149,0)
 ;   ABSBPDIV - Outpatient Site
"RTN","BPSBUTL",150,0)
 ; Output
"RTN","BPSBUTL",151,0)
 ;   "" - No BPS Pharmacies record or no NPI number found
"RTN","BPSBUTL",152,0)
 ;   NPI
"RTN","BPSBUTL",153,0)
DIVNPI(ABSBPDIV) ;
"RTN","BPSBUTL",154,0)
 N BPSHARM,NPI,ABSBSDIV
"RTN","BPSBUTL",155,0)
 I '$G(ABSBPDIV) Q ""
"RTN","BPSBUTL",156,0)
 S NPI="",ABSBSDIV=1
"RTN","BPSBUTL",157,0)
 ; GETPHARM expects ABSBPDIV and ABSBSDIV to be set
"RTN","BPSBUTL",158,0)
 ; Returns BPSHARM (BPS Pharmacy IEN)
"RTN","BPSBUTL",159,0)
 D GETPHARM^BPSOSQC
"RTN","BPSBUTL",160,0)
 I BPSHARM'=0 S NPI=$$GET1^DIQ(9002313.56,BPSHARM_",",41.01)
"RTN","BPSBUTL",161,0)
 Q NPI
"RTN","BPSBUTL",162,0)
 ;
"RTN","BPSBUTL",163,0)
 ;ADDCOMM - Add a comment to a ECME claim
"RTN","BPSBUTL",164,0)
 ;Input:
"RTN","BPSBUTL",165,0)
 ; BPRX - ien in file #52 
"RTN","BPSBUTL",166,0)
 ; BPREF - refill number (0,1,2,...)
"RTN","BPSBUTL",167,0)
 ; BPRCMNT - comment text 
"RTN","BPSBUTL",168,0)
 ;Output:
"RTN","BPSBUTL",169,0)
 ;  1 - okay
"RTN","BPSBUTL",170,0)
 ; -1 - failed
"RTN","BPSBUTL",171,0)
ADDCOMM(BPRX,BPREF,BPRCMNT) ;*/
"RTN","BPSBUTL",172,0)
 N BP59,BPNOW,BPLCK,BPREC,BPDA,BPERR
"RTN","BPSBUTL",173,0)
 N %,%H,%I,X
"RTN","BPSBUTL",174,0)
 I $L(BPRX)<1 Q -1
"RTN","BPSBUTL",175,0)
 I $G(BPRCMNT)="" Q -1
"RTN","BPSBUTL",176,0)
 S BP59=BPRX_$S($L(+BPREF)=1:".000",1:".00")_+BPREF_"1" ;borrowed from CLOSE2 above
"RTN","BPSBUTL",177,0)
 D NOW^%DTC
"RTN","BPSBUTL",178,0)
 S BPNOW=%
"RTN","BPSBUTL",179,0)
 L +^BPST(9002313.59111,+BP59):10
"RTN","BPSBUTL",180,0)
 S BPLCK=$T
"RTN","BPSBUTL",181,0)
 I 'BPLCK Q -1  ;quit
"RTN","BPSBUTL",182,0)
 D INSITEM^BPSCMT01(9002313.59111,+BP59,BPNOW)
"RTN","BPSBUTL",183,0)
 S BPREC=$O(^BPST(BP59,11,"B",BPNOW,0))
"RTN","BPSBUTL",184,0)
 I BPREC>0 D
"RTN","BPSBUTL",185,0)
 . S BPDA(9002313.59111,BPREC_","_BP59_",",.02)=+$G(DUZ)
"RTN","BPSBUTL",186,0)
 . S BPDA(9002313.59111,BPREC_","_BP59_",",.03)=$G(BPRCMNT)
"RTN","BPSBUTL",187,0)
 . D FILE^DIE("","BPDA","BPERR")
"RTN","BPSBUTL",188,0)
 I BPLCK L -^BPST(9002313.59111,+BP59)
"RTN","BPSBUTL",189,0)
 I BPREC>0,'$D(BPERR) Q 1
"RTN","BPSBUTL",190,0)
 Q -1
"RTN","BPSBUTL",191,0)
 ;
"RTN","BPSBUTL",192,0)
 ;REOPEN - Reopen closed claim
"RTN","BPSBUTL",193,0)
 ;Input:
"RTN","BPSBUTL",194,0)
 ; BP59 - ien in BPS TRANSACTION file
"RTN","BPSBUTL",195,0)
 ; BP02 - ien in BPS CLAIMS file
"RTN","BPSBUTL",196,0)
 ; BPREOPDT - reopen date/time 
"RTN","BPSBUTL",197,0)
 ; BPDUZ - user DUZ (#200 ien)
"RTN","BPSBUTL",198,0)
 ; BPCOMM - reopen comment text
"RTN","BPSBUTL",199,0)
 ;Output:
"RTN","BPSBUTL",200,0)
 ; 0^message_error - error
"RTN","BPSBUTL",201,0)
 ; 1 - success
"RTN","BPSBUTL",202,0)
REOPEN(BP59,BP02,BPREOPDT,BPDUZ,BPCOMM) ;
"RTN","BPSBUTL",203,0)
 N RECIENS,BPDA,ERRARR,BPREFNO,BPRXIEN,BPFILLDT,BPCLMID,BPZ,IBARY,BPDFN,BPRETVAL,BPZ1
"RTN","BPSBUTL",204,0)
 S BPDFN=$P($G(^BPST(BP59,0)),U,6)
"RTN","BPSBUTL",205,0)
 S BPREFNO=$P($G(^BPST(BP59,1)),U)
"RTN","BPSBUTL",206,0)
 I BPREFNO="" Q "0^Null Fill Number"
"RTN","BPSBUTL",207,0)
 S BPRXIEN=$P($G(^BPST(BP59,1)),U,11)
"RTN","BPSBUTL",208,0)
 I BPRXIEN="" Q "0^Null RX ien Number"
"RTN","BPSBUTL",209,0)
 ;in VA there is only one med/claim but in some cases it can different than "1"
"RTN","BPSBUTL",210,0)
 ;so take the latest one
"RTN","BPSBUTL",211,0)
 S BPZ=$O(^BPSC(BP02,400,9999999),-1)
"RTN","BPSBUTL",212,0)
 I BPRXIEN="" Q "0^Database Error"
"RTN","BPSBUTL",213,0)
 S BPFILLDT=$$YMD2FM^BPSSCRU6(+$P($G(^BPSC(BP02,400,+BPZ,400)),U))
"RTN","BPSBUTL",214,0)
 S BPCLMID=$$CONVCLID^BPSSCRU6($P($G(^BPSC(BP02,400,+BPZ,400)),U,2))
"RTN","BPSBUTL",215,0)
 ;============
"RTN","BPSBUTL",216,0)
 ;Now update ECME database
"RTN","BPSBUTL",217,0)
 S BPRETVAL=$$UPDREOP^BPSREOP1(BP02,0,BPREOPDT,BPDUZ,BPCOMM)
"RTN","BPSBUTL",218,0)
 I +BPRETVAL=0 D  Q BPRETVAL
"RTN","BPSBUTL",219,0)
 . ;try to reverse it in case it was done partially
"RTN","BPSBUTL",220,0)
 . I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",221,0)
 ;============
"RTN","BPSBUTL",222,0)
 ;Now call IB API for "REOPEN" event
"RTN","BPSBUTL",223,0)
 S IBARY("STATUS")="REOPEN"
"RTN","BPSBUTL",224,0)
 S IBARY("FILL DATE")=BPFILLDT
"RTN","BPSBUTL",225,0)
 S IBARY("FILL NUMBER")=BPREFNO
"RTN","BPSBUTL",226,0)
 S IBARY("PRESCRIPTION")=BPRXIEN
"RTN","BPSBUTL",227,0)
 S IBARY("CLAIMID")=BPCLMID
"RTN","BPSBUTL",228,0)
 S IBARY("DRUG")=$$DRUGIEN^BPSSCRU6(BPRXIEN,BPDFN)
"RTN","BPSBUTL",229,0)
 S IBARY("PLAN")=$P($G(^BPST(BP59,10,1,0)),"^")
"RTN","BPSBUTL",230,0)
 S IBARY("USER")=BPDUZ
"RTN","BPSBUTL",231,0)
 S IBARY("REOPEN COMMENT")=BPCOMM
"RTN","BPSBUTL",232,0)
 S BPRETVAL=$$STORESP^IBNCPDP(BPDFN,.IBARY)
"RTN","BPSBUTL",233,0)
 ;if successful
"RTN","BPSBUTL",234,0)
 I +BPRETVAL>0 Q "1^ReOpening Claim: "_$P($G(^BPSC(BP02,0)),U)_" ... OK"
"RTN","BPSBUTL",235,0)
 ;===========
"RTN","BPSBUTL",236,0)
 ;if it was unsuccessful
"RTN","BPSBUTL",237,0)
 ;reverse ECME database (keep the user who made the attempt)
"RTN","BPSBUTL",238,0)
 I $$UPDREOP^BPSREOP1(BP02,1,"@",+BPDUZ,"@")
"RTN","BPSBUTL",239,0)
 ;return IB error message
"RTN","BPSBUTL",240,0)
 Q BPRETVAL
"RTN","BPSECMC2")
0^14^B13729099^B13730407
"RTN","BPSECMC2",1,0)
BPSECMC2 ;BHAM ISC/SAB - ENTER/EDIT OUTPATIENT SITE PARAMETERS ;09/18/92 9:11
"RTN","BPSECMC2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSECMC2",3,0)
 ;
"RTN","BPSECMC2",4,0)
CHOP(HLA,CLAIMIEN,IEN59) ;
"RTN","BPSECMC2",5,0)
 ;
"RTN","BPSECMC2",6,0)
 ;
"RTN","BPSECMC2",7,0)
 N TCNT,CNT,RNLNGTH,TRANID,V2DTG
"RTN","BPSECMC2",8,0)
 S CNT=0
"RTN","BPSECMC2",9,0)
 ;
"RTN","BPSECMC2",10,0)
 ; Crash proofing - Need to put better error handling in
"RTN","BPSECMC2",11,0)
 I '$D(HLA)!'$L($G(CLAIMIEN)) W !,"Error: Invalid Claim Data"
"RTN","BPSECMC2",12,0)
 ;
"RTN","BPSECMC2",13,0)
 ; Initialize HL7 environment
"RTN","BPSECMC2",14,0)
 ;
"RTN","BPSECMC2",15,0)
 D INIT^HLFNC2("BPS ECMECL1 NTE",.HL)
"RTN","BPSECMC2",16,0)
 I $G(HL)  D
"RTN","BPSECMC2",17,0)
 . ; put error handler here for init failure
"RTN","BPSECMC2",18,0)
 . W !,"Error: "_$P(HL,2)
"RTN","BPSECMC2",19,0)
 ;
"RTN","BPSECMC2",20,0)
 ; Determine run length of the transmission & pad with zeroes
"RTN","BPSECMC2",21,0)
 ;
"RTN","BPSECMC2",22,0)
 S RNLNGTH=0
"RTN","BPSECMC2",23,0)
 F TCNT=1:1 Q:$G(HLA("HLS",TCNT))=""  D
"RTN","BPSECMC2",24,0)
 .S RNLNGTH=RNLNGTH+$L(HLA("HLS",TCNT))
"RTN","BPSECMC2",25,0)
 S RNLNGTH=$RE($E($RE("0000"_(RNLNGTH+32)),1,4))
"RTN","BPSECMC2",26,0)
 S CNT=TCNT-1
"RTN","BPSECMC2",27,0)
 ;
"RTN","BPSECMC2",28,0)
 S TRANID=$P($P($G(^BPSC(CLAIMIEN,0)),"^"),"R")
"RTN","BPSECMC2",29,0)
 S HLA("HLS",1)="\X02\"_RNLNGTH_TRANID_$G(HLA("HLS",1))
"RTN","BPSECMC2",30,0)
 ;
"RTN","BPSECMC2",31,0)
 ; Translate non-printable to printable & Set OBX segs
"RTN","BPSECMC2",32,0)
 F TCNT=1:1:CNT Q:$G(HLA("HLS",TCNT))=""  D
"RTN","BPSECMC2",33,0)
 .F  D  Q:$P(HLA("HLS",TCNT),$C(29))=HLA("HLS",TCNT)
"RTN","BPSECMC2",34,0)
 ..S:HLA("HLS",TCNT)[$C(29) HLA("HLS",TCNT)=$P(HLA("HLS",TCNT),$C(29))_"\X1D\"_$P(HLA("HLS",TCNT),$C(29),2,999)
"RTN","BPSECMC2",35,0)
 .F  D  Q:$P(HLA("HLS",TCNT),$C(30))=HLA("HLS",TCNT)
"RTN","BPSECMC2",36,0)
 ..S:HLA("HLS",TCNT)[$C(30) HLA("HLS",TCNT)=$P(HLA("HLS",TCNT),$C(30))_"\X1E\"_$P(HLA("HLS",TCNT),$C(30),2,999)
"RTN","BPSECMC2",37,0)
 .F  D  Q:$P(HLA("HLS",TCNT),$C(28))=HLA("HLS",TCNT)
"RTN","BPSECMC2",38,0)
 ..S:HLA("HLS",TCNT)[$C(28) HLA("HLS",TCNT)=$P(HLA("HLS",TCNT),$C(28))_"\X1C\"_$P(HLA("HLS",TCNT),$C(28),2,999)
"RTN","BPSECMC2",39,0)
 .I TCNT=CNT S HLA("HLS",CNT)=$P(HLA("HLS",CNT),$C(3))_"\X03\"
"RTN","BPSECMC2",40,0)
 .S HLA("HLS",TCNT)="OBX||FT|NCPDP|"_TCNT_"|"_HLA("HLS",TCNT)_"||||||F"
"RTN","BPSECMC2",41,0)
 ;
"RTN","BPSECMC2",42,0)
 ; Set OBR seg
"RTN","BPSECMC2",43,0)
 ; Get fileman date/time, ensuring seconds are included: 3031029.135636
"RTN","BPSECMC2",44,0)
 S V2DTG=$E($$HTFM^XLFDT($H)_"000000",1,14)
"RTN","BPSECMC2",45,0)
 ; Set HL7 Date/Time format: 20031029135636-0400
"RTN","BPSECMC2",46,0)
 S HLA("HLS",.5)="OBR||||NCPDP|||"_$$FMTHL7^XLFDT(V2DTG)_"|||||||||||"_$E(TRANID,1,32)
"RTN","BPSECMC2",47,0)
 ;
"RTN","BPSECMC2",48,0)
 K HLA("HLS",0)
"RTN","BPSECMC2",49,0)
 ;
"RTN","BPSECMC2",50,0)
 ;CALL HL7 TO TRANSMIT SINGLE MESSAGE
"RTN","BPSECMC2",51,0)
 ;
"RTN","BPSECMC2",52,0)
 S IEN59=$O(^BPST("AE",CLAIMIEN,""))
"RTN","BPSECMC2",53,0)
 I IEN59="" S IEN59=$O(^BPST("AER",CLAIMIEN,""))
"RTN","BPSECMC2",54,0)
 D SETSLOT^BPSOSL(IEN59)
"RTN","BPSECMC2",55,0)
 D LOG^BPSOSL($T(+0)_" - CLAIM - BEGIN - #"_CLAIMIEN_" ("_$P($G(^BPSC(CLAIMIEN,0)),U)_")")
"RTN","BPSECMC2",56,0)
 D SETCSTAT^BPSOSU(CLAIMIEN,60)
"RTN","BPSECMC2",57,0)
 ;
"RTN","BPSECMC2",58,0)
 D GENERATE^HLMA("BPS ECMESV1 NTE","LM",1,.MYRESULT,"",.MYOPTNS)
"RTN","BPSECMC2",59,0)
 ;
"RTN","BPSECMC2",60,0)
 D LOG^BPSOSL($T(+0)_" - CLAIM - SENT - #"_CLAIMIEN_" ("_$P($G(^BPSC(CLAIMIEN,0)),U)_")")
"RTN","BPSECMC2",61,0)
 Q
"RTN","BPSECMC2",62,0)
STORESP ;
"RTN","BPSECMC2",63,0)
 ; 
"RTN","BPSECMC2",64,0)
 ; THE HL7 MODULE CALLS THIS ROUTINE FROM THE RESPONSE PROCESSING ROUTINE.  THIS MODULE READS THE
"RTN","BPSECMC2",65,0)
 ; INFORMATION ABOUT THE RESPONSE FROM FILE 772 AND CALLS PSOECMPS4 TO STORE THE RESPONSE INTO 
"RTN","BPSECMC2",66,0)
 ; THE BPS RESPONSE FILE, 9002313.03
"RTN","BPSECMC2",67,0)
 ;
"RTN","BPSECMC2",68,0)
 N RI,TMSG,RMSG,RESPIEN,TRANTYPE,VANUM,CLAIMIEN,IEN59,ABSBRXI
"RTN","BPSECMC2",69,0)
 S TMSG=""
"RTN","BPSECMC2",70,0)
 F RI=1:1 X HLNEXT Q:HLNODE=""  I $E(HLNODE,1,3)="OBX"  D
"RTN","BPSECMC2",71,0)
 .S TMSG=HLNODE,RMSG=""
"RTN","BPSECMC2",72,0)
 .F  S RMSG=$O(HLNODE(RMSG)) Q:RMSG=""  S TMSG=TMSG_HLNODE(RMSG)
"RTN","BPSECMC2",73,0)
 ;
"RTN","BPSECMC2",74,0)
 ;STRIP OFF HL7, STX, ETX, NTE AND BYTE COUNT
"RTN","BPSECMC2",75,0)
 S TMSG=$P(TMSG,$E(TMSG,4),6),TMSG=$E(TMSG,10,$L(TMSG)-5)
"RTN","BPSECMC2",76,0)
 S TRANTYPE=$E(TMSG,35,36),VANUM=$E(TMSG,1,32)
"RTN","BPSECMC2",77,0)
 S CLAIMIEN=$O(^BPSC("B",VANUM,""))
"RTN","BPSECMC2",78,0)
 ; If CLAIMIEN is null, next line will crash ungracefully
"RTN","BPSECMC2",79,0)
 S IEN59=$O(^BPST("AE",CLAIMIEN,""))
"RTN","BPSECMC2",80,0)
 I IEN59="" S IEN59=$O(^BPST("AER",CLAIMIEN,""))
"RTN","BPSECMC2",81,0)
 ;
"RTN","BPSECMC2",82,0)
 D SETSLOT^BPSOSL(IEN59)
"RTN","BPSECMC2",83,0)
 D SETCSTAT^BPSOSU(CLAIMIEN,70)
"RTN","BPSECMC2",84,0)
 ;STORE THE RESPONSE MESSAGE IN THE RESPONSE FILE
"RTN","BPSECMC2",85,0)
 ;
"RTN","BPSECMC2",86,0)
 D LOG^BPSOSL($T(+0)_" - CLAIM - RESPONSE RECEIVED - #"_CLAIMIEN_" ("_$P($G(^BPSC(CLAIMIEN,0)),U)_")")
"RTN","BPSECMC2",87,0)
 D SETCSTAT^BPSOSU(CLAIMIEN,80)
"RTN","BPSECMC2",88,0)
 D PARSE^BPSECMPS(TMSG,CLAIMIEN,.RESPIEN)
"RTN","BPSECMC2",89,0)
 D LOG^BPSOSL($T(+0)_" - CLAIM - RESPONSE STORED - #"_CLAIMIEN_" ("_$P($G(^BPSC(CLAIMIEN,0)),U)_")")
"RTN","BPSECMC2",90,0)
 D LOG^BPSOSL("CLAIM - END - #"_CLAIMIEN_" ("_$P($G(^BPSC(CLAIMIEN,0)),U)_")")
"RTN","BPSECMC2",91,0)
 S ABSBRXI=IEN59
"RTN","BPSECMC2",92,0)
 D ONE^BPSOSQL(CLAIMIEN,$G(RESPIEN))
"RTN","BPSECMC2",93,0)
 Q
"RTN","BPSECMPS")
0^23^B68150253^B68357125
"RTN","BPSECMPS",1,0)
BPSECMPS ;BHAM ISC/FCS/DRS - Parse Claim Response ;06/15/2004
"RTN","BPSECMPS",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSECMPS",3,0)
 ;Reference to ^PSDRUG supported by DBIA 221
"RTN","BPSECMPS",4,0)
 ;
"RTN","BPSECMPS",5,0)
PARSE(RREC,CLAIMIEN,RESPIEN) ;
"RTN","BPSECMPS",6,0)
 N GS,FS,SS,FILE,ROOT,TRANSACT,TRANSCNT
"RTN","BPSECMPS",7,0)
 N FDATA,FDAIEN,FDAIEN03
"RTN","BPSECMPS",8,0)
 ;
"RTN","BPSECMPS",9,0)
 ;Make sure input variables are defined
"RTN","BPSECMPS",10,0)
 Q:$G(RREC)=""
"RTN","BPSECMPS",11,0)
 Q:$G(CLAIMIEN)=""
"RTN","BPSECMPS",12,0)
 ;
"RTN","BPSECMPS",13,0)
 ;group and field separator characters
"RTN","BPSECMPS",14,0)
 S GS="\X1D\",FS="\X1C\",SS="\X1E\"
"RTN","BPSECMPS",15,0)
 S FILE="9002313.03"
"RTN","BPSECMPS",16,0)
 S ROOT="FDATA(9002313.03)"
"RTN","BPSECMPS",17,0)
 D TRANSMSN            ;process the transmission level data
"RTN","BPSECMPS",18,0)
 D TRANSACT            ;process the transaction level data
"RTN","BPSECMPS",19,0)
 ;
"RTN","BPSECMPS",20,0)
 ; If the test payer routine exists, call the override routine
"RTN","BPSECMPS",21,0)
 ; IEN59 and TRANTYPE are set in BPSECMC2
"RTN","BPSECMPS",22,0)
 ; Commented for production.  MUST be commented out for any release.
"RTN","BPSECMPS",23,0)
 ;I $L($T(CHECK^ZZGIZOV1))>0,$$CHECK^ZZGIZOV1 D SETOVER^ZZGIZOV1(IEN59,TRANTYPE,.FDATA)
"RTN","BPSECMPS",24,0)
 D UPDATE^DIE("S","FDATA(9002313.03)","FDAIEN")
"RTN","BPSECMPS",25,0)
 F TRANSACT=1:1:TRANSCNT  D
"RTN","BPSECMPS",26,0)
 .D PROCRESP
"RTN","BPSECMPS",27,0)
 .D PROCREJ
"RTN","BPSECMPS",28,0)
 .D PROCAPP
"RTN","BPSECMPS",29,0)
 .D PROCPPR
"RTN","BPSECMPS",30,0)
 .D PROCOTH^BPSECMP2
"RTN","BPSECMPS",31,0)
 .D PROCDUR^BPSECMP2
"RTN","BPSECMPS",32,0)
 .S RESPIEN=FDAIEN(TRANSACT)
"RTN","BPSECMPS",33,0)
 .D IBSEND^BPSECMP2(CLAIMIEN,RESPIEN,"","")
"RTN","BPSECMPS",34,0)
 Q
"RTN","BPSECMPS",35,0)
 ;
"RTN","BPSECMPS",36,0)
TRANSMSN ;This subroutine will work through the transmission level information
"RTN","BPSECMPS",37,0)
 ;
"RTN","BPSECMPS",38,0)
 N RTRANM,RHEADER,SEG,SEGMENT,SEGID
"RTN","BPSECMPS",39,0)
 ;
"RTN","BPSECMPS",40,0)
 ;Parse response transmission level from ascii record
"RTN","BPSECMPS",41,0)
 S RTRANM=$P(RREC,GS,1)
"RTN","BPSECMPS",42,0)
 ;
"RTN","BPSECMPS",43,0)
 ; get just the header segment 
"RTN","BPSECMPS",44,0)
 S RHEADER=$P(RTRANM,SS,1)    ;header- required/fixed length
"RTN","BPSECMPS",45,0)
 D PARSEH
"RTN","BPSECMPS",46,0)
 ;
"RTN","BPSECMPS",47,0)
 ; There are 2 optional segments on the transmission level - message
"RTN","BPSECMPS",48,0)
 ; and insurance.  We'll check for both and parse what we find.
"RTN","BPSECMPS",49,0)
 F SEG=2:1:3 D
"RTN","BPSECMPS",50,0)
 . S SEGMENT=$P(RTRANM,SS,SEG)
"RTN","BPSECMPS",51,0)
 . Q:SEGMENT=""
"RTN","BPSECMPS",52,0)
 . S SEGID=$P(SEGMENT,FS,2)
"RTN","BPSECMPS",53,0)
 . I $E(SEGID,1,2)="AM" D                ;segment identification
"RTN","BPSECMPS",54,0)
 .. S SEGFID=$E(SEGID,3,4)
"RTN","BPSECMPS",55,0)
 .. D:(SEGFID=20)!(SEGFID=25) PARSETM
"RTN","BPSECMPS",56,0)
 ;
"RTN","BPSECMPS",57,0)
 Q
"RTN","BPSECMPS",58,0)
 ;
"RTN","BPSECMPS",59,0)
TRANSACT ;This subroutine will work through the transaction level information
"RTN","BPSECMPS",60,0)
 ;
"RTN","BPSECMPS",61,0)
 N RTRAN,SEG,SEGMENT,MEDN,GRP
"RTN","BPSECMPS",62,0)
 S MEDN=0
"RTN","BPSECMPS",63,0)
 ;
"RTN","BPSECMPS",64,0)
 F GRP=2:1 D  Q:RTRAN=""
"RTN","BPSECMPS",65,0)
 . S RTRAN=$P(RREC,GS,GRP)     ;get the next transaction (could be 4)
"RTN","BPSECMPS",66,0)
 . Q:RTRAN=""                  ;we're done if it's empty
"RTN","BPSECMPS",67,0)
 . S MEDN=MEDN+1               ;transaction counter
"RTN","BPSECMPS",68,0)
 . ;
"RTN","BPSECMPS",69,0)
 . F SEG=2:1 D  Q:SEGMENT=""   ;break the record down by segments
"RTN","BPSECMPS",70,0)
 .. S SEGMENT=$P(RTRAN,SS,SEG) ;get the segment
"RTN","BPSECMPS",71,0)
 .. Q:SEGMENT=""
"RTN","BPSECMPS",72,0)
 .. D PARSETN                  ;get the fields
"RTN","BPSECMPS",73,0)
 Q
"RTN","BPSECMPS",74,0)
 ;
"RTN","BPSECMPS",75,0)
PARSEH ; The header record is required on all responses, and is fixed 
"RTN","BPSECMPS",76,0)
 ; length.  It is the only record that is fixed length.
"RTN","BPSECMPS",77,0)
 ;
"RTN","BPSECMPS",78,0)
 N FIELD,%,%H,%I
"RTN","BPSECMPS",79,0)
 S FIELD=".01" D FDA^DILF(FILE,"+1",FIELD,"",CLAIMIEN,ROOT)
"RTN","BPSECMPS",80,0)
 D NOW^%DTC
"RTN","BPSECMPS",81,0)
 S FIELD=".02" D FDA^DILF(FILE,"+1",FIELD,"",%,ROOT)
"RTN","BPSECMPS",82,0)
 S FIELD=".03" D FDA^DILF(FILE,"+1",FIELD,"",$H,ROOT)
"RTN","BPSECMPS",83,0)
 S FIELD=102 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,33,34),ROOT)    ;version/release number
"RTN","BPSECMPS",84,0)
 S FIELD=103 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,35,36),ROOT)    ;transaction code
"RTN","BPSECMPS",85,0)
 S FIELD=109 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,37,37),ROOT)    ;transaction count
"RTN","BPSECMPS",86,0)
 S TRANSCNT=$E(RHEADER,37,37)
"RTN","BPSECMPS",87,0)
 S FIELD=501 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,38,38),ROOT)    ;response status header
"RTN","BPSECMPS",88,0)
 S FIELD=202 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,39,40),ROOT)    ;service provider id qualifier
"RTN","BPSECMPS",89,0)
 S FIELD=201 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,41,55),ROOT)    ;service provider id
"RTN","BPSECMPS",90,0)
 S FIELD=401 D FDA^DILF(FILE,"+1",FIELD,"",$E(RHEADER,56,63),ROOT)    ;date of service
"RTN","BPSECMPS",91,0)
 Q
"RTN","BPSECMPS",92,0)
 ;
"RTN","BPSECMPS",93,0)
PARSETM ; This subroutine will parse the variable portions of the transmission 
"RTN","BPSECMPS",94,0)
 ;
"RTN","BPSECMPS",95,0)
 N FIELD,PC,FLDNUM
"RTN","BPSECMPS",96,0)
 ;
"RTN","BPSECMPS",97,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -already know its value 
"RTN","BPSECMPS",98,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",99,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",100,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",101,0)
 . Q:FLDNUM=""                 ;shouldn't happen - but lets skip
"RTN","BPSECMPS",102,0)
 . S FIELD=$E(FIELD,3,999)
"RTN","BPSECMPS",103,0)
 . D FDA^DILF(FILE,"+1",FLDNUM,"",FIELD,ROOT)
"RTN","BPSECMPS",104,0)
 Q
"RTN","BPSECMPS",105,0)
 ; 
"RTN","BPSECMPS",106,0)
PARSETN ; This subroutine will parse the transaction level segments. For 
"RTN","BPSECMPS",107,0)
 ;
"RTN","BPSECMPS",108,0)
 ; Possible values of the SEGFID field:
"RTN","BPSECMPS",109,0)
 ;  21 = Response Status Segment
"RTN","BPSECMPS",110,0)
 ;  22 = Response Claim Segment
"RTN","BPSECMPS",111,0)
 ;  23 = Response Pricing Segment
"RTN","BPSECMPS",112,0)
 ;  24 = Response DUR/PPS Segment
"RTN","BPSECMPS",113,0)
 ;  26 = Response Prior Authorization Segment
"RTN","BPSECMPS",114,0)
 ;
"RTN","BPSECMPS",115,0)
 N FIELD,PC,FLDNUM,RPTFLD,RCNT,REPEAT
"RTN","BPSECMPS",116,0)
 N SEGID,SEGFID,CKRPT
"RTN","BPSECMPS",117,0)
 ;
"RTN","BPSECMPS",118,0)
 S RPTFLD=""
"RTN","BPSECMPS",119,0)
 S SEGID=$P(SEGMENT,FS,2)           ;this should be the segment id
"RTN","BPSECMPS",120,0)
 Q:SEGID=""                         ;don't process without a Seg id
"RTN","BPSECMPS",121,0)
 Q:$E(SEGID,1,2)'="AM"              ;don't know what we have - skip
"RTN","BPSECMPS",122,0)
 ;
"RTN","BPSECMPS",123,0)
 S SEGFID=$E(SEGID,3,4)             ;this should be the field ID
"RTN","BPSECMPS",124,0)
 ;
"RTN","BPSECMPS",125,0)
 ; setup the repeating flds based on the segment
"RTN","BPSECMPS",126,0)
 I SEGFID=21 D               ;status segment
"RTN","BPSECMPS",127,0)
 . S RPTFLD=",548,511,546,"
"RTN","BPSECMPS",128,0)
 . S (RCNT(548),RCNT(511),RCNT(546))=0
"RTN","BPSECMPS",129,0)
 ;
"RTN","BPSECMPS",130,0)
 I SEGFID=22 D                 ;claim segment
"RTN","BPSECMPS",131,0)
 . S RPTFLD=",552,553,554,555,556,"
"RTN","BPSECMPS",132,0)
 . S (RCNT(552),RCNT(553),RCNT(554),RCNT(555),RCNT(556))=0
"RTN","BPSECMPS",133,0)
 ;
"RTN","BPSECMPS",134,0)
 I SEGFID=23 D                ;pricing segment
"RTN","BPSECMPS",135,0)
 . S RPTFLD=",564,565,"
"RTN","BPSECMPS",136,0)
 . S (RCNT(564),RCNT(565))=0
"RTN","BPSECMPS",137,0)
 ;
"RTN","BPSECMPS",138,0)
 I SEGFID=24 D                ;DUR/PPS segment
"RTN","BPSECMPS",139,0)
 . S RPTFLD=",439,528,529,530,531,532,533,9002313,544,567,"
"RTN","BPSECMPS",140,0)
 . S (RCNT(439),RCNT(528),RCNT(529),RCNT(530),RCNT(531))=0
"RTN","BPSECMPS",141,0)
 . S (RCNT(532),RCNT(533),RCNT(9002313),RCNT(567))=0,RCNT(544)=0
"RTN","BPSECMPS",142,0)
 ;
"RTN","BPSECMPS",143,0)
 ; now lets parse out the fields
"RTN","BPSECMPS",144,0)
 ;
"RTN","BPSECMPS",145,0)
 F PC=3:1 D  Q:FIELD=""        ;skip the seg id -jump to the other flds
"RTN","BPSECMPS",146,0)
 . S FIELD=$P(SEGMENT,FS,PC)   ;piece through the record
"RTN","BPSECMPS",147,0)
 . Q:FIELD=""                  ;stop - we hit the end
"RTN","BPSECMPS",148,0)
 . S FLDNUM=$$GETNUM(FIELD)    ;get the field number used for storage
"RTN","BPSECMPS",149,0)
 . ;
"RTN","BPSECMPS",150,0)
 . S REPEAT=0                  ;for this segment, lets figure
"RTN","BPSECMPS",151,0)
 . S CKRPT=","_FLDNUM_","      ;out if the field is a repeating
"RTN","BPSECMPS",152,0)
 . S:RPTFLD[CKRPT REPEAT=1     ;field
"RTN","BPSECMPS",153,0)
 . ;
"RTN","BPSECMPS",154,0)
 . I REPEAT D                  ;if rptg, store with a counter
"RTN","BPSECMPS",155,0)
 .. S RCNT(FLDNUM)=$G(RCNT(FLDNUM))+1
"RTN","BPSECMPS",156,0)
 .. S FDATA(MEDN,FLDNUM,RCNT(FLDNUM))=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",157,0)
 . ;
"RTN","BPSECMPS",158,0)
 . I 'REPEAT D                 ;not rptg, store without counter
"RTN","BPSECMPS",159,0)
 .. S FDATA(MEDN,FLDNUM)=$E(FIELD,3,$L(FIELD))
"RTN","BPSECMPS",160,0)
 Q
"RTN","BPSECMPS",161,0)
 ;
"RTN","BPSECMPS",162,0)
GETNUM(FIELD) ; This routine will translate the field ID into a field number.    
"RTN","BPSECMPS",163,0)
 ; We will use the NCPDP field Defs files, cross ref "D" to
"RTN","BPSECMPS",164,0)
 ; perform this translation.  (The field number is needed to store
"RTN","BPSECMPS",165,0)
 ; the data in the correct field within the response file.)
"RTN","BPSECMPS",166,0)
 ;
"RTN","BPSECMPS",167,0)
 N FLDID,FLDIEN,FLDNUM
"RTN","BPSECMPS",168,0)
 S (FLDID,FLDNUM)=""
"RTN","BPSECMPS",169,0)
 S FLDIEN=0
"RTN","BPSECMPS",170,0)
 ;
"RTN","BPSECMPS",171,0)
 S FLDID=$E(FIELD,1,2)       ;field identifier
"RTN","BPSECMPS",172,0)
 Q:FLDID=""
"RTN","BPSECMPS",173,0)
 ;
"RTN","BPSECMPS",174,0)
 I FLDID'="" D
"RTN","BPSECMPS",175,0)
 . S FLDIEN=$O(^BPSF(9002313.91,"D",FLDID,FLDIEN))  ;internal fld #
"RTN","BPSECMPS",176,0)
 . S:FLDIEN FLDNUM=$P($G(^BPSF(9002313.91,FLDIEN,0)),U) ;fld number
"RTN","BPSECMPS",177,0)
 Q FLDNUM
"RTN","BPSECMPS",178,0)
 ;
"RTN","BPSECMPS",179,0)
PROCRESP ;
"RTN","BPSECMPS",180,0)
 N FILE,ROOT,FDATA03,FLDNUM,FIELD
"RTN","BPSECMPS",181,0)
 S FILE="9002313.0301"
"RTN","BPSECMPS",182,0)
 S ROOT="FDATA03(9002313.0301)"
"RTN","BPSECMPS",183,0)
 K FDATA03
"RTN","BPSECMPS",184,0)
 I '$D(FDATA(TRANSACT,501)) S FDATA(TRANSACT,501)=FDATA(TRANSACT,112)
"RTN","BPSECMPS",185,0)
 I '$D(FDATA(TRANSACT,112)) S FDATA(TRANSACT,112)=FDATA(TRANSACT,501)
"RTN","BPSECMPS",186,0)
 S FLDNUM=".01" D FDA^DILF(FILE,"+1,"_FDAIEN(TRANSACT),FLDNUM,"",TRANSACT,ROOT)
"RTN","BPSECMPS",187,0)
 S FIELD=""
"RTN","BPSECMPS",188,0)
 F  S FIELD=$O(FDATA(TRANSACT,FIELD)) Q:FIELD=""  D   ;set all the non-repeating fields for 9002313.0301
"RTN","BPSECMPS",189,0)
 .I $G(FDATA(TRANSACT,FIELD))'=""  D
"RTN","BPSECMPS",190,0)
 ..I FIELD=402 S FDATA(TRANSACT,FIELD)=$TR(FDATA(TRANSACT,FIELD),"\","") ;REMOVE EXTRANEOUS "\"
"RTN","BPSECMPS",191,0)
 ..D FDA^DILF(FILE,"+"_TRANSACT_","_FDAIEN(TRANSACT),FIELD,"",FDATA(TRANSACT,FIELD),ROOT)
"RTN","BPSECMPS",192,0)
 .E  D
"RTN","BPSECMPS",193,0)
 ..;
"RTN","BPSECMPS",194,0)
 D UPDATE^DIE("S","FDATA03(9002313.0301)","FDAIEN03")
"RTN","BPSECMPS",195,0)
 Q
"RTN","BPSECMPS",196,0)
 ;
"RTN","BPSECMPS",197,0)
PROCREJ ;
"RTN","BPSECMPS",198,0)
 Q:$G(FDATA(TRANSACT,510))=""
"RTN","BPSECMPS",199,0)
 N FILE,ROOT,FLDNUM,FDAT3511,NUMREJS,NNDX
"RTN","BPSECMPS",200,0)
 S FILE="9002313.03511"
"RTN","BPSECMPS",201,0)
 S ROOT="FDAT3511(9002313.03511)"
"RTN","BPSECMPS",202,0)
 S NUMREJS=FDATA(TRANSACT,510)
"RTN","BPSECMPS",203,0)
 S NNDX=""
"RTN","BPSECMPS",204,0)
 F  S NNDX=$O(FDATA(TRANSACT,511,NNDX)) Q:NNDX=""  D   ;set all the non-repeating fields for 9002313.3511 rejections
"RTN","BPSECMPS",205,0)
 .S FDATA(TRANSACT,511,NNDX)=$TR(FDATA(TRANSACT,511,NNDX),"\","")
"RTN","BPSECMPS",206,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,511,NNDX),ROOT)
"RTN","BPSECMPS",207,0)
 D UPDATE^DIE("S","FDAT3511(9002313.03511)")
"RTN","BPSECMPS",208,0)
 Q
"RTN","BPSECMPS",209,0)
 ;
"RTN","BPSECMPS",210,0)
PROCAPP ;
"RTN","BPSECMPS",211,0)
 Q:$G(FDATA(TRANSACT,548,1))=""
"RTN","BPSECMPS",212,0)
 N FILE,ROOT,FLDNUM,FDAT1548,NNDX
"RTN","BPSECMPS",213,0)
 S FILE="9002313.301548"
"RTN","BPSECMPS",214,0)
 S ROOT="FDAT1548(9002313.0301548)"
"RTN","BPSECMPS",215,0)
 S NNDX=""
"RTN","BPSECMPS",216,0)
 F  S NNDX=$O(FDATA(FDAIEN(TRANSACT),548,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",217,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,548,NNDX),ROOT)
"RTN","BPSECMPS",218,0)
 D UPDATE^DIE("S","FDAT1548(9002313.301548)")
"RTN","BPSECMPS",219,0)
 Q
"RTN","BPSECMPS",220,0)
 ;
"RTN","BPSECMPS",221,0)
PROCPPR ;
"RTN","BPSECMPS",222,0)
 Q:$G(FDATA(TRANSACT,551.01,1))=""
"RTN","BPSECMPS",223,0)
 N FILE,ROOT,FLDNUM,FDAT1301,NNDX
"RTN","BPSECMPS",224,0)
 S FILE="9002313.1301"
"RTN","BPSECMPS",225,0)
 S ROOT="FDAT1301(9002313.1301)"
"RTN","BPSECMPS",226,0)
 S NNDX=""
"RTN","BPSECMPS",227,0)
 F  S NNDX=$O(FDATA(FDAIEN(TRANSACT),551.01,NNDX)) Q:NNDX=""  D
"RTN","BPSECMPS",228,0)
 .S FLDNUM=".01" D FDA^DILF(FILE,"+"_NNDX_","_FDAIEN03(TRANSACT)_","_FDAIEN(TRANSACT),FLDNUM,"",FDATA(TRANSACT,551.01,NNDX),ROOT)
"RTN","BPSECMPS",229,0)
 D UPDATE^DIE("S","FDAT1301(9002313.1301)")
"RTN","BPSECMPS",230,0)
 Q
"RTN","BPSECX1")
0^3^B18310807^B16923293
"RTN","BPSECX1",1,0)
BPSECX1 ;BHAM ISC/FCS/DRS/VA/DLF - Create new Claim ID for Claim Submission file ;05/17/2004
"RTN","BPSECX1",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSECX1",3,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX1",4,0)
 ;Create new Claim ID for Claim Submission file (9002313.02)
"RTN","BPSECX1",5,0)
 ;
"RTN","BPSECX1",6,0)
 ;Input Variables:   NRDEFIEN  - NCPDP Record Definitions IEN
"RTN","BPSECX1",7,0)
 ;                               (9002313.92)
"RTN","BPSECX1",8,0)
 ;
"RTN","BPSECX1",9,0)
 ;Function Returns:  String:  C<YY>-<BBBBBB>-<NNNNN>
"RTN","BPSECX1",10,0)
 ;                         C can also be P or other ORIGIN code.
"RTN","BPSECX1",11,0)
 ;                         See remarks a few lines below about ORIGIN
"RTN","BPSECX1",12,0)
 ;                   Where:   <YY> is the year
"RTN","BPSECX1",13,0)
 ;                            <BBBBBB> is the BIN number of the payor
"RTN","BPSECX1",14,0)
 ;                            <NNNNN> is a 5-digit sequence number
"RTN","BPSECX1",15,0)
 ;----------------------------------------------------------------------
"RTN","BPSECX1",16,0)
 ; Also called from old Alaska Medicaid batch method,
"RTN","BPSECX1",17,0)
 ; regrettably still in use at one site, but we're going to
"RTN","BPSECX1",18,0)
 ; phase it out someday.
"RTN","BPSECX1",19,0)
 ;
"RTN","BPSECX1",20,0)
 ;  ORIGIN argument added 08/23/2000
"RTN","BPSECX1",21,0)
 ;     Can specify the leading character of the claim ID.
"RTN","BPSECX1",22,0)
 ;     Defaults to "C".
"RTN","BPSECX1",23,0)
 ;     ECME sends in "P"
"RTN","BPSECX1",24,0)
 ;   09/20/2000 - can override by setting BPSECX1("PREFIX")=letter
"RTN","BPSECX1",25,0)
 ;     (Do this if you change the batch file to submit via POS)
"RTN","BPSECX1",26,0)
 ;
"RTN","BPSECX1",27,0)
 ;  Also changed 08/23/2000:  Sequence number is now 6 digits
"RTN","BPSECX1",28,0)
 ;  and the first number assigned is 100000.  As of yesterday, ANMC
"RTN","BPSECX1",29,0)
 ;  is already up to almost 40000.
"RTN","BPSECX1",30,0)
 ;  Can't change length in the middle of the year or the $O(,-1) is
"RTN","BPSECX1",31,0)
 ;  messed up.   So the code will adapt - if it finds 5-digit format
"RTN","BPSECX1",32,0)
 ;  already there, it will assign new numbers with 5 digits.
"RTN","BPSECX1",33,0)
 ;
"RTN","BPSECX1",34,0)
CLAIMID(NRDEFIEN,ORIGIN) ;EP - Called from BPSOSCE from BPSOSCA from BPSOSQG from BPSOSQ2
"RTN","BPSECX1",35,0)
 N PHARMACY,FACID,THIRD,DEL,PLAN,I,BIN,SEQNUM,ROOT,LAST
"RTN","BPSECX1",36,0)
 ;
"RTN","BPSECX1",37,0)
 I '$D(ORIGIN) S ORIGIN="C"
"RTN","BPSECX1",38,0)
 I $G(BPSECX1("PREFIX"))?1U S ORIGIN=BPSECX1("PREFIX")
"RTN","BPSECX1",39,0)
 ;
"RTN","BPSECX1",40,0)
 ; LJE;7/24/03; The following lines generate the VA transmission ID and quits
"RTN","BPSECX1",41,0)
 I VARX D  Q ROOT
"RTN","BPSECX1",42,0)
 . ;
"RTN","BPSECX1",43,0)
 . ; Default the Origin (first piece of transmission ID
"RTN","BPSECX1",44,0)
 . S ORIGIN="VA"
"RTN","BPSECX1",45,0)
 . ;
"RTN","BPSECX1",46,0)
 . ; Get and format the Facility ID (second piece of the transmission ID)
"RTN","BPSECX1",47,0)
 . S PHARMACY=+$P($G(^BPST(IEN59,1)),U,7)
"RTN","BPSECX1",48,0)
 . ;
"RTN","BPSECX1",49,0)
 . ; Try to get NPI first.
"RTN","BPSECX1",50,0)
 . S FACID=$P($G(^BPS(9002313.56,PHARMACY,"NPI")),U,1)
"RTN","BPSECX1",51,0)
 . ;
"RTN","BPSECX1",52,0)
 . ; If we do not get the NPI, get the NCPDP and left-pad it with zeros
"RTN","BPSECX1",53,0)
 . ;   up to seven characters.
"RTN","BPSECX1",54,0)
 . I FACID="" D
"RTN","BPSECX1",55,0)
 .. S FACID=$P($G(^BPS(9002313.56,PHARMACY,0)),U,2)
"RTN","BPSECX1",56,0)
 .. S FACID=$TR($J("",7-$L(FACID))," ","0")_FACID
"RTN","BPSECX1",57,0)
 . ;
"RTN","BPSECX1",58,0)
 . ; Right-pad the final ID with spaces up to 10 characters
"RTN","BPSECX1",59,0)
 . S FACID=$RE($J($RE(FACID),10))
"RTN","BPSECX1",60,0)
 . ;
"RTN","BPSECX1",61,0)
 . ; Get the third piece of the transmission ID
"RTN","BPSECX1",62,0)
 . ;  If the National Plan ID is available, use it with '=' delimiter (new format)
"RTN","BPSECX1",63,0)
 . ;  If not, it will need to be the BIN with the '-' delimiter (old format)
"RTN","BPSECX1",64,0)
 . S THIRD="",PLAN=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",","902.27")
"RTN","BPSECX1",65,0)
 . I PLAN]"" D
"RTN","BPSECX1",66,0)
 .. F I=1:1:$L(PLAN) I $E(PLAN,I)?1N Q
"RTN","BPSECX1",67,0)
 .. S PLAN=$E(PLAN,I,$L(PLAN))
"RTN","BPSECX1",68,0)
 .. S THIRD=PLAN,DEL="="
"RTN","BPSECX1",69,0)
 . ;
"RTN","BPSECX1",70,0)
 . ; If no plan, get BIN and use '-' delimiter (old format)
"RTN","BPSECX1",71,0)
 . I THIRD="" S DEL="-",THIRD=$$GET1^DIQ(9002313.59902,"1,"_IEN59_",","902.03")
"RTN","BPSECX1",72,0)
 . ;
"RTN","BPSECX1",73,0)
 . ; Pad third piece with zeros
"RTN","BPSECX1",74,0)
 . S THIRD=$TR($J("",6-$L(THIRD))," ","0")_THIRD
"RTN","BPSECX1",75,0)
 . ;
"RTN","BPSECX1",76,0)
 . ; Get and format the sequence number (fourth piece)
"RTN","BPSECX1",77,0)
 . L +^BPS(9002313.99,1,3):15 I '$T D IMPOSS^BPSOSUE("DB,P","TI","",,"Can't lock BPS(9002313.99,1,3)",$T(+0))
"RTN","BPSECX1",78,0)
 . S SEQNUM=+$G(^BPS(9002313.99,1,3)),^BPS(9002313.99,1,3)=SEQNUM+1
"RTN","BPSECX1",79,0)
 . I $L(SEQNUM<7) S SEQNUM=$E($TR($J("",7-$L(SEQNUM))," ","0")_SEQNUM,1,7)
"RTN","BPSECX1",80,0)
 . L -^BPS(9002313.99,1,3)
"RTN","BPSECX1",81,0)
 . ;
"RTN","BPSECX1",82,0)
 . ; Create the Transmission ID
"RTN","BPSECX1",83,0)
 . S ROOT=ORIGIN_($E(DT,1,3)+1700)_DEL_FACID_DEL_THIRD_DEL_SEQNUM
"RTN","BPSECX1",84,0)
 ;
"RTN","BPSECX1",85,0)
 ;Get and format BIN number for the electronic payer
"RTN","BPSECX1",86,0)
 S BIN=$P($G(^BPSF(9002313.92,NRDEFIEN,1)),U,1)
"RTN","BPSECX1",87,0)
 S BIN=$$NFF^BPSECFM(BIN,6)
"RTN","BPSECX1",88,0)
 ;
"RTN","BPSECX1",89,0)
 ;Establish the root for the claim id number
"RTN","BPSECX1",90,0)
 S ROOT=ORIGIN_$E(DT,2,3)_"-"_BIN_"-" ; 11 characters long
"RTN","BPSECX1",91,0)
 ;
"RTN","BPSECX1",92,0)
 ;Get last claim id number with the same root
"RTN","BPSECX1",93,0)
 S LAST=$O(^BPSC("B",ROOT_"Z"),-1)
"RTN","BPSECX1",94,0)
 ; Reversal claim ID?  Get rid of the suffix R#
"RTN","BPSECX1",95,0)
 ; BPS*1.0T7*6    could be #>9, in which case the old logic fails!
"RTN","BPSECX1",96,0)
 ; BPS*1.0T7*6    replaced the line that strips off the R#
"RTN","BPSECX1",97,0)
 I $L(LAST)>6,LAST?.E1"R"1.N S $P(LAST,"-",3)=+$P(LAST,"-",3) ;BPS*1.0T7*6
"RTN","BPSECX1",98,0)
 ;
"RTN","BPSECX1",99,0)
 ;Set and format sequence number
"RTN","BPSECX1",100,0)
 S SEQNUM=$S($E(LAST,1,11)=ROOT:(+$P(LAST,"-",3))+1,1:0)
"RTN","BPSECX1",101,0)
 N SEQLEN
"RTN","BPSECX1",102,0)
 ;  5 or 6 digit numbers?  Depends on what's there already?
"RTN","BPSECX1",103,0)
 ;  Six digits is what we really want, but upgrades will be trickier.
"RTN","BPSECX1",104,0)
 ; New installs and ANMC 2001 will have 6 digits.
"RTN","BPSECX1",105,0)
 ;
"RTN","BPSECX1",106,0)
 I SEQNUM=0 S SEQLEN=6,SEQNUM=100000
"RTN","BPSECX1",107,0)
 E  S SEQLEN=$L($P(LAST,"-",3))
"RTN","BPSECX1",108,0)
 I SEQLEN<5 D IMPOSS^BPSOSUE("DB,P","TI",LAST,,"SEQLEN<5",$T(+0)) ; internal error
"RTN","BPSECX1",109,0)
 I SEQLEN>6 D IMPOSS^BPSOSUE("DB,P","TI",LAST,,"SEQLEN>6",$T(+0)) ; internal error
"RTN","BPSECX1",110,0)
 I $L(SEQNUM)=SEQLEN,SEQNUM?."9" D
"RTN","BPSECX1",111,0)
 . D IMPOSS^BPSOSUE("DB,P","T",LAST,,"OVERFLOWED!",$T(+0))
"RTN","BPSECX1",112,0)
 I SEQLEN=5 S SEQNUM=$TR($J(SEQNUM,SEQLEN)," ","0") ; pad w/leading 0s
"RTN","BPSECX1",113,0)
 I $L(SEQNUM)'=SEQLEN D  ; internal error
"RTN","BPSECX1",114,0)
 . D IMPOSS^BPSOSUE("DB,P","TI",LAST,SEQLEN,"length",$T(+0))
"RTN","BPSECX1",115,0)
 ;
"RTN","BPSECX1",116,0)
 Q ROOT_SEQNUM
"RTN","BPSJACK")
0^10^B35600985^B29751574
"RTN","BPSJACK",1,0)
BPSJACK ;BHAM ISC/LJF - HL7 Acknowledgement Messages ;21-NOV-2003
"RTN","BPSJACK",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJACK",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJACK",4,0)
 ;
"RTN","BPSJACK",5,0)
 ; This routine examines an Acknowledgement Message. If the message is
"RTN","BPSJACK",6,0)
 ; the E-PHARM Application Acknowledgement Message, and it is "AA",
"RTN","BPSJACK",7,0)
 ; it kicks off the Pharmacy Registration Messages.
"RTN","BPSJACK",8,0)
 ; If the message flags an error, then error notification is processed.
"RTN","BPSJACK",9,0)
 ;
"RTN","BPSJACK",10,0)
EN(HL) N ACK,AREG,BPSJSEG,ERR,HCT,SEG
"RTN","BPSJACK",11,0)
 N MFI,MFIIX,MSGCTLID,MSGID,MSGIX,MSH
"RTN","BPSJACK",12,0)
 ;
"RTN","BPSJACK",13,0)
 I '$D(HL) Q
"RTN","BPSJACK",14,0)
 ;
"RTN","BPSJACK",15,0)
 S (AREG,HCT,MFIIX,MSGCTLID,MSGID,MSGIX)=0,(ACK,MFI,MSH)=""
"RTN","BPSJACK",16,0)
 S ERR("MSA")=""
"RTN","BPSJACK",17,0)
 ;  Loop through the message and find each segment for processing
"RTN","BPSJACK",18,0)
 F  S HCT=$O(^TMP($J,"BPSJHLI",HCT)) Q:HCT=""  D
"RTN","BPSJACK",19,0)
 . K BPSJSEG D SPAR^BPSJUTL(.HL,.BPSJSEG,HCT) S SEG=$G(BPSJSEG(1))
"RTN","BPSJACK",20,0)
 . ;
"RTN","BPSJACK",21,0)
 . I SEG="MSH" D  Q
"RTN","BPSJACK",22,0)
 . . S MSGCTLID=$G(BPSJSEG(10))    ; get the message control id
"RTN","BPSJACK",23,0)
 . ;
"RTN","BPSJACK",24,0)
 . I SEG="MSA" D  Q  ; MSA seg looks like this -> MSA|AA|509133482
"RTN","BPSJACK",25,0)
 . . S ACK=$G(BPSJSEG(2)),MSGID=$G(BPSJSEG(3)) K ERR("MSA")
"RTN","BPSJACK",26,0)
 . ;
"RTN","BPSJACK",27,0)
 . I SEG="MFI",ACK="AA",$P($G(BPSJSEG(2)),$E($G(HL("ECH"))))="Facility Table" S AREG=1
"RTN","BPSJACK",28,0)
 . ;
"RTN","BPSJACK",29,0)
 . ;GET NPI 
"RTN","BPSJACK",30,0)
 . I SEG="MFI",ACK="AA",$P($G(BPSJSEG(2)),$E($G(HL("ECH"))))="Pharmacy Table" D
"RTN","BPSJACK",31,0)
 . . I '$G(MSGID) Q
"RTN","BPSJACK",32,0)
 . . N BPSJNPI,BPSJPIX,BPSJNDT,BPSJ,HLMAID,HLID
"RTN","BPSJACK",33,0)
 . . S HLMAID=$O(^HLMA("C",MSGID,"")) I '$G(HLMAID) Q
"RTN","BPSJACK",34,0)
 . . S HLID=$P(^HLMA(HLMAID,0),U) I '$G(HLID) Q
"RTN","BPSJACK",35,0)
 . . S BPSJNPI=$P($G(^HL(772,HLID,"IN",22,0)),"|") I '$G(BPSJNPI) Q
"RTN","BPSJACK",36,0)
 . . S BPSJ=$G(^XTMP("BPSJ","NPI",BPSJNPI)) I 'BPSJ Q
"RTN","BPSJACK",37,0)
 . . S BPSJPIX=$P(BPSJ,U),BPSJNDT=$P(BPSJ,U,2)
"RTN","BPSJACK",38,0)
 . . N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJACK",39,0)
 . . S DA=BPSJPIX,DIE=$$ROOT^DILFD(9002313.56)
"RTN","BPSJACK",40,0)
 . . S DR="41.01////"_BPSJNPI_";41.02////"_BPSJNDT D ^DIE
"RTN","BPSJACK",41,0)
 . . K ^XTMP("BPSJ","NPI",BPSJNPI)
"RTN","BPSJACK",42,0)
 . ;
"RTN","BPSJACK",43,0)
 . I SEG="MFA",ACK="AE" S ERR("MFA",U_$G(BPSJSEG(5)))="" Q
"RTN","BPSJACK",44,0)
 ;
"RTN","BPSJACK",45,0)
 ; Pharmacy Registrations
"RTN","BPSJACK",46,0)
 I AREG S AREG=0 D
"RTN","BPSJACK",47,0)
 . F  S AREG=$O(^BPS(9002313.56,AREG)) Q:'AREG  D REG^BPSJPREG(AREG)
"RTN","BPSJACK",48,0)
 ;
"RTN","BPSJACK",49,0)
 I $D(ERR) D ERRORM D MSG^BPSJUTL(.ERR,"BPSJACK")
"RTN","BPSJACK",50,0)
 Q
"RTN","BPSJACK",51,0)
 ;
"RTN","BPSJACK",52,0)
ERRORM ; Error message setup
"RTN","BPSJACK",53,0)
 N ERRT
"RTN","BPSJACK",54,0)
 ;
"RTN","BPSJACK",55,0)
 S ERR(1)="Error(s) indicated for HL7 Application Acknowledge Message ID: "_$G(MSGCTLID)
"RTN","BPSJACK",56,0)
 I $D(ERR("MSA")) S ERR(2)="Error:NO MSA - No MSA segment found."
"RTN","BPSJACK",57,0)
 I $D(ERR("MFA")) S ERRT="" F  S ERRT=$O(ERR("MFA",ERRT)) Q:ERRT=""  D
"RTN","BPSJACK",58,0)
 . I ERRT["NC100" S ERR(100)="Error:NC100 - Invalid OP Interface version." Q
"RTN","BPSJACK",59,0)
 . I ERRT["NC200" S ERR(200)="Error:NC200 - Not e-IIV registered." Q
"RTN","BPSJACK",60,0)
 . I ERRT["NC201" S ERR(201)="Error:NC201 - Invalid IIV Interface version." Q
"RTN","BPSJACK",61,0)
 . I ERRT["NC202" S ERR(202)="Error:NC202 - Invalid e-IIV registration state." Q
"RTN","BPSJACK",62,0)
 . I ERRT["NC300" S ERR(300)="Error:NC300 - OP pharmacy not registered.  Failed to update Pharmacy information." Q
"RTN","BPSJACK",63,0)
 . I ERRT["NC301" S ERR(301)="Error:NC301 - Unable to update Pharmacy information due to outpatient pharmacy registration has invalid OP interface version." Q
"RTN","BPSJACK",64,0)
 . I ERRT["NC302" S ERR(302)="Error:NC302 - Unable to update Pharmacy information due to invalid e-IIV registration state." Q
"RTN","BPSJACK",65,0)
 . S ERR(399)="Error:"_ERRT_" - Unknown error."
"RTN","BPSJACK",66,0)
 K ERR("MFA"),ERR("MSA")
"RTN","BPSJACK",67,0)
 ;
"RTN","BPSJACK",68,0)
 Q
"RTN","BPSJACK",69,0)
 ;
"RTN","BPSJACK",70,0)
APPACK(HL,APPACK,PSIEN) ; Application Acknowledgement for Payer Sheets
"RTN","BPSJACK",71,0)
 N MGRP,MSG,MCT,GENRSLT
"RTN","BPSJACK",72,0)
 N TLN,FS,FS2,FS3,CS
"RTN","BPSJACK",73,0)
 ;
"RTN","BPSJACK",74,0)
 K ^TMP("HLA",$J)
"RTN","BPSJACK",75,0)
 ;
"RTN","BPSJACK",76,0)
 ;-Set up HL7
"RTN","BPSJACK",77,0)
 D INIT^HLFNC2("BPSJ REGISTER",.HL)
"RTN","BPSJACK",78,0)
 ;
"RTN","BPSJACK",79,0)
 D DGAPPACK  ; Dollar G the APPACK variable (bullet proofing)
"RTN","BPSJACK",80,0)
 ;
"RTN","BPSJACK",81,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"      ; field separator
"RTN","BPSJACK",82,0)
 S CS=$E($G(HL("ECH"))) I CS="" S CS="^"  ; component separator
"RTN","BPSJACK",83,0)
 ;
"RTN","BPSJACK",84,0)
 S MCT=0,FS2=FS_FS,FS3=FS_FS_FS
"RTN","BPSJACK",85,0)
 ;
"RTN","BPSJACK",86,0)
 ;-MSA SEG
"RTN","BPSJACK",87,0)
 I APPACK("MFA",4,1)="S" S ^TMP("HLA",$J,1)="MSA"_FS_"AA"_FS_APPACK("MSA",2)
"RTN","BPSJACK",88,0)
 E  S ^TMP("HLA",$J,1)="MSA"_FS_"AE"_FS_APPACK("MSA",2)
"RTN","BPSJACK",89,0)
 ;
"RTN","BPSJACK",90,0)
 ;-MFI SEG
"RTN","BPSJACK",91,0)
 S TLN="MFI"_FS_APPACK("MFI",1,1)_CS_APPACK("MFI",1,2)_FS2
"RTN","BPSJACK",92,0)
 S ^TMP("HLA",$J,2)=TLN_APPACK("MFI",3)_FS3_APPACK("MFI",6)
"RTN","BPSJACK",93,0)
 ;
"RTN","BPSJACK",94,0)
 ;-MFA SEG(S)
"RTN","BPSJACK",95,0)
 I APPACK("MFA",4,1)="S" D  S ^TMP("HLA",$J,3)=TLN
"RTN","BPSJACK",96,0)
 . S TLN="MFA"_FS_APPACK("MFA",1)_FS_APPACK("MFA",2)_FS2
"RTN","BPSJACK",97,0)
 . S TLN=TLN_APPACK("MFA",4,1)_CS_APPACK("MFA",4,2)_FS
"RTN","BPSJACK",98,0)
 . S TLN=TLN_APPACK("MFA",5)_FS_APPACK("MFA",6)
"RTN","BPSJACK",99,0)
 E  D MFASEGS
"RTN","BPSJACK",100,0)
 ;
"RTN","BPSJACK",101,0)
 D GENACK^HLMA1($G(HL("EID")),$G(HL("HLMTIENS")),$G(HL("EIDS")),"GM",1,.GENRSLT)
"RTN","BPSJACK",102,0)
 ;
"RTN","BPSJACK",103,0)
 K ^TMP("HLA",$J)
"RTN","BPSJACK",104,0)
 Q
"RTN","BPSJACK",105,0)
 ;
"RTN","BPSJACK",106,0)
MFASEGS ; Set up the MFA segs for Reject message
"RTN","BPSJACK",107,0)
 N MFAP1,MFAP2,MFACNTR,FIELD,RECORD,ZPRERR
"RTN","BPSJACK",108,0)
 ;
"RTN","BPSJACK",109,0)
 S MFAP1="MFA"_FS_APPACK("MFA",1)_FS_APPACK("MFA",2)
"RTN","BPSJACK",110,0)
 S MFAP1=MFAP1_FS2_APPACK("MFA",4,1)_CS
"RTN","BPSJACK",111,0)
 S MFAP2=FS_APPACK("MFA",5)_FS_APPACK("MFA",6)
"RTN","BPSJACK",112,0)
 S MFACNTR=2
"RTN","BPSJACK",113,0)
 ;
"RTN","BPSJACK",114,0)
 I $D(^TMP($J,"BPSJ-ERROR","MFI")) S FIELD="" D
"RTN","BPSJACK",115,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","MFI",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",116,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",117,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V60"_FIELD_MFAP2
"RTN","BPSJACK",118,0)
 ;
"RTN","BPSJACK",119,0)
 I $D(^TMP($J,"BPSJ-ERROR","MFE")) S FIELD="" D
"RTN","BPSJACK",120,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","MFE",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",121,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",122,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V61"_FIELD_MFAP2
"RTN","BPSJACK",123,0)
 ;
"RTN","BPSJACK",124,0)
 I $D(^TMP($J,"BPSJ-ERROR","ZPS")) S FIELD="" D
"RTN","BPSJACK",125,0)
 . F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","ZPS",FIELD)) Q:'FIELD  D
"RTN","BPSJACK",126,0)
 .. S MFACNTR=MFACNTR+1
"RTN","BPSJACK",127,0)
 .. S ^TMP("HLA",$J,MFACNTR)=MFAP1_"V62"_FIELD_MFAP2
"RTN","BPSJACK",128,0)
 ;
"RTN","BPSJACK",129,0)
 I $D(^TMP($J,"BPSJ-ERROR","ZPR")) S RECORD="" D
"RTN","BPSJACK",130,0)
 . F  S RECORD=$O(^TMP($J,"BPSJ-ERROR","ZPR",RECORD)),FIELD="" Q:'RECORD  D
"RTN","BPSJACK",131,0)
 .. F  S FIELD=$O(^TMP($J,"BPSJ-ERROR","ZPR",RECORD,FIELD)) Q:'FIELD  D
"RTN","BPSJACK",132,0)
 ... S ZPRERR=$G(^TMP($J,"BPSJ-ERROR","ZPR",RECORD,FIELD))
"RTN","BPSJACK",133,0)
 ... S MFACNTR=MFACNTR+1,^TMP("HLA",$J,MFACNTR)=MFAP1_ZPRERR_MFAP2
"RTN","BPSJACK",134,0)
 ;
"RTN","BPSJACK",135,0)
 Q
"RTN","BPSJACK",136,0)
DGAPPACK ; $G the APPACK var
"RTN","BPSJACK",137,0)
 S APPACK("MFA",1)=$G(APPACK("MFA",1))
"RTN","BPSJACK",138,0)
 S APPACK("MFA",2)=$G(APPACK("MFA",2))
"RTN","BPSJACK",139,0)
 S APPACK("MFA",3)=$G(APPACK("MFA",3))
"RTN","BPSJACK",140,0)
 S APPACK("MFA",4,1)=$G(APPACK("MFA",4,1))
"RTN","BPSJACK",141,0)
 S APPACK("MFA",4,2)=$G(APPACK("MFA",4,2))
"RTN","BPSJACK",142,0)
 S APPACK("MFA",5)=$G(APPACK("MFA",5))
"RTN","BPSJACK",143,0)
 S APPACK("MFA",6)=$G(APPACK("MFA",6))
"RTN","BPSJACK",144,0)
 S APPACK("MFI",1,1)=$G(APPACK("MFI",1,1))
"RTN","BPSJACK",145,0)
 S APPACK("MFI",1,2)=$G(APPACK("MFI",1,2))
"RTN","BPSJACK",146,0)
 S APPACK("MFI",3)=$G(APPACK("MFI",3))
"RTN","BPSJACK",147,0)
 S APPACK("MFI",6)=$G(APPACK("MFI",6))
"RTN","BPSJACK",148,0)
 S APPACK("MSA",1)=$G(APPACK("MSA",1))
"RTN","BPSJACK",149,0)
 S APPACK("MSA",2)=$G(APPACK("MSA",2))
"RTN","BPSJACK",150,0)
 Q
"RTN","BPSJAREG")
0^16^B12520945^B10520831
"RTN","BPSJAREG",1,0)
BPSJAREG ;BHAM ISC/LJF - HL7 Application Registration MFN Message ;21-NOV-2003
"RTN","BPSJAREG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJAREG",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJAREG",4,0)
 ;
"RTN","BPSJAREG",5,0)
 ;  This program will process the outgoing registration MFN message
"RTN","BPSJAREG",6,0)
 ;
"RTN","BPSJAREG",7,0)
 ;  Variables
"RTN","BPSJAREG",8,0)
 ; HL      = HL7 parameters
"RTN","BPSJAREG",9,0)
 ; HL7DTG  = Date time in HL7 format
"RTN","BPSJAREG",10,0)
 ; HLECH   = HL7 Encoding Characters
"RTN","BPSJAREG",11,0)
 ; HLEID   = HL7 Link id
"RTN","BPSJAREG",12,0)
 ; HLFS    = HL7 Field separator
"RTN","BPSJAREG",13,0)
 ; HLLNK   = HL7 E-Pharm Link
"RTN","BPSJAREG",14,0)
 ; HLRESET = HL7 generate results
"RTN","BPSJAREG",15,0)
 ; IPP     = IP Port
"RTN","BPSJAREG",16,0)
 ; IPA     = IP Address
"RTN","BPSJAREG",17,0)
 ; MCT     = Message Count
"RTN","BPSJAREG",18,0)
 ; MGRP    = E-Mail message group
"RTN","BPSJAREG",19,0)
 ; MSG     = Message
"RTN","BPSJAREG",20,0)
 ;
"RTN","BPSJAREG",21,0)
INI ;
"RTN","BPSJAREG",22,0)
INIT ; Unconditional jump....
"RTN","BPSJAREG",23,0)
 G ^BPSJINIT
"RTN","BPSJAREG",24,0)
 Q
"RTN","BPSJAREG",25,0)
 ;
"RTN","BPSJAREG",26,0)
BPSJVAL(BPSJVAL) ; Validation entry point - HL7 message processing prevented
"RTN","BPSJAREG",27,0)
 ;
"RTN","BPSJAREG",28,0)
TASKMAN ; Entry point for taskman to run this routine
"RTN","BPSJAREG",29,0)
 ;
"RTN","BPSJAREG",30,0)
 N DA,HL,HL7DTG,HLECH,HLEID,HLFS,HLLNK,HLRESET,HLPRO
"RTN","BPSJAREG",31,0)
 N IPA,IPP
"RTN","BPSJAREG",32,0)
 N MGRP,MSG,MCT,BPSJARES,BPVALFN
"RTN","BPSJAREG",33,0)
 ;
"RTN","BPSJAREG",34,0)
 S MCT=0,BPSJVAL=+$G(BPSJVAL)
"RTN","BPSJAREG",35,0)
 K ^TMP("HLS",$J)
"RTN","BPSJAREG",36,0)
 ;       
"RTN","BPSJAREG",37,0)
 S BPVALFN=9002313.99
"RTN","BPSJAREG",38,0)
 ;set version number
"RTN","BPSJAREG",39,0)
 D VERSION^BPSJINIT(BPVALFN)
"RTN","BPSJAREG",40,0)
 ;
"RTN","BPSJAREG",41,0)
 K DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJAREG",42,0)
 S DR=$P($G(^BPS(BPVALFN,DA,"VITRIA")),U,3)
"RTN","BPSJAREG",43,0)
 I DR>2,DR=+DR
"RTN","BPSJAREG",44,0)
 E  S DIE=$$ROOT^DILFD(BPVALFN),DR="6003////3" D ^DIE
"RTN","BPSJAREG",45,0)
 ;
"RTN","BPSJAREG",46,0)
 ;  Get Link data from HL7 table
"RTN","BPSJAREG",47,0)
 S HLPRO="BPSJ REGISTER",(IPA,IPP)=""
"RTN","BPSJAREG",48,0)
 S HLLNK=$$FIND1^DIC(870,"",,"EPHARM OUT","B")
"RTN","BPSJAREG",49,0)
 I HLLNK S IPA=$$GET1^DIQ(870,HLLNK_",",400.01),IPP=$$GET1^DIQ(870,HLLNK_",",400.02)
"RTN","BPSJAREG",50,0)
 ;
"RTN","BPSJAREG",51,0)
 ;  Error if any missing data
"RTN","BPSJAREG",52,0)
 I IPA=""!(IPP="") S MCT=MCT+1,MSG(MCT)="IP Address or Port is not defined.  "
"RTN","BPSJAREG",53,0)
 ;
"RTN","BPSJAREG",54,0)
 I MCT,'BPSJVAL D MSG^BPSJUTL(.MSG,"BPSJAREG") Q
"RTN","BPSJAREG",55,0)
 ;
"RTN","BPSJAREG",56,0)
 ;  Initialize the HL7
"RTN","BPSJAREG",57,0)
 D INIT^HLFNC2(HLPRO,.HL)
"RTN","BPSJAREG",58,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","BPSJAREG",59,0)
 S HLECH=$E($G(HL("ECH")),1) I HLECH="" S HLECH="^"
"RTN","BPSJAREG",60,0)
 S HL("SITE")=$$SITE^VASITE,HL("SAF")=$P(HL("SITE"),U,2,3)
"RTN","BPSJAREG",61,0)
 S HL("EPPORT")=IPP,HLEID=$$HLP^BPSJUTL(HLPRO)
"RTN","BPSJAREG",62,0)
 ;
"RTN","BPSJAREG",63,0)
 ;Get fileman date/time, ensuring seconds are included: 3031029.135636
"RTN","BPSJAREG",64,0)
 S HL7DTG=$E($$HTFM^XLFDT($H)_"000000",1,14)
"RTN","BPSJAREG",65,0)
 ;Set HL7 Date/Time format: 20031029135636-0400
"RTN","BPSJAREG",66,0)
 S HL7DTG=$$FMTHL7^XLFDT(HL7DTG)
"RTN","BPSJAREG",67,0)
 ;
"RTN","BPSJAREG",68,0)
 ;   Set the MFI segment
"RTN","BPSJAREG",69,0)
 S ^TMP("HLS",$J,1)="MFI"_HLFS_"Facility Table"_HLFS_HLFS_"UPD"_HLFS
"RTN","BPSJAREG",70,0)
 S ^TMP("HLS",$J,1)=^TMP("HLS",$J,1)_HL7DTG_HLFS_HL7DTG_HLFS_"NE"
"RTN","BPSJAREG",71,0)
 ;
"RTN","BPSJAREG",72,0)
 ;  Set the MFE segment
"RTN","BPSJAREG",73,0)
 S ^TMP("HLS",$J,2)="MFE"_HLFS_"MUP"_HLFS_HLFS_HL7DTG_HLFS
"RTN","BPSJAREG",74,0)
 S ^TMP("HLS",$J,2)=^TMP("HLS",$J,2)_+HL("SITE")_HLFS_"ST"
"RTN","BPSJAREG",75,0)
 ;
"RTN","BPSJAREG",76,0)
 ; Set the ZQR segment
"RTN","BPSJAREG",77,0)
 S ^TMP("HLS",$J,3)=$$EN^BPSJZQR(.HL)
"RTN","BPSJAREG",78,0)
 ;
"RTN","BPSJAREG",79,0)
 S BPSJARES=$$VAL1^BPSJVAL(BPSJVAL)   ; 0 = ok,
"RTN","BPSJAREG",80,0)
 I BPSJVAL=3 G FINI   ; Just checking to see if data valid.
"RTN","BPSJAREG",81,0)
 ;
"RTN","BPSJAREG",82,0)
 ;-Check if msg valid.
"RTN","BPSJAREG",83,0)
 I 'BPSJARES D  G FINI
"RTN","BPSJAREG",84,0)
 . K HLRESLT
"RTN","BPSJAREG",85,0)
 . D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"")
"RTN","BPSJAREG",86,0)
 . I $P($G(HLRESLT),U,2)]"" D  Q
"RTN","BPSJAREG",87,0)
 .. I BPSJVAL D  Q   ; Interactive: show no success
"RTN","BPSJAREG",88,0)
 ... W !!,"ECME Application Registration HL7 Message not created: "_HLRESLT
"RTN","BPSJAREG",89,0)
 .. S MCT=MCT+1,MSG(MCT)="ECME Application Registration HL7 Message not created."
"RTN","BPSJAREG",90,0)
 .. S MCT=MCT+1,MSG(MCT)=HLRESLT
"RTN","BPSJAREG",91,0)
 .. D MSG^BPSJUTL(.MSG,"ECME Application Registration")
"RTN","BPSJAREG",92,0)
 . I BPSJVAL D    ;Interactive: show success
"RTN","BPSJAREG",93,0)
 .. W !!,"ECME Application Registration HL7 Message successfully created."
"RTN","BPSJAREG",94,0)
 ;
"RTN","BPSJAREG",95,0)
FINI ; Clean up
"RTN","BPSJAREG",96,0)
 K ^TMP("HLS",$J)
"RTN","BPSJAREG",97,0)
 Q
"RTN","BPSJINIT")
0^7^B36822861^B36410434
"RTN","BPSJINIT",1,0)
BPSJINIT ;BHAM ISC/LJF - HL7 Application Registration ;21-NOV-2003
"RTN","BPSJINIT",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSJINIT",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJINIT",4,0)
 ;
"RTN","BPSJINIT",5,0)
 N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",6,0)
 N BPVALFN,BPSJAPPR,BPSJVALR,PHIX,DT,DUZ
"RTN","BPSJINIT",7,0)
 ;
"RTN","BPSJINIT",8,0)
 ;  This program will allow user to enter site data.
"RTN","BPSJINIT",9,0)
 ;
"RTN","BPSJINIT",10,0)
 ; Programmer Note: D BPSJVAL^BPSJAREG(X) will validate with following.
"RTN","BPSJINIT",11,0)
 ;   where X is: 0 = HL7 trigger, no validation display
"RTN","BPSJINIT",12,0)
 ;               1 = HL7 trigger, display validation
"RTN","BPSJINIT",13,0)
 ;               2 = no HL7 trigger, display validation
"RTN","BPSJINIT",14,0)
 ;               3 = no validation display, no HL7 trigger
"RTN","BPSJINIT",15,0)
 ;
"RTN","BPSJINIT",16,0)
 D DT^DICRW S DUZ(0)="@",DT=$$NOW^XLFDT
"RTN","BPSJINIT",17,0)
 D HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJINIT",18,0)
 W !!!,"ENTER/VERIFY SITE REGISTRATION DATA.",!!
"RTN","BPSJINIT",19,0)
 ;
"RTN","BPSJINIT",20,0)
 S BPVALFN=9002313.99
"RTN","BPSJINIT",21,0)
 ;set version number
"RTN","BPSJINIT",22,0)
 D VERSION(BPVALFN)
"RTN","BPSJINIT",23,0)
 ;
"RTN","BPSJINIT",24,0)
 W !!,"PRIMARY SITE CONTACT DATA."
"RTN","BPSJINIT",25,0)
 K DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",26,0)
 S DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",27,0)
 S DR="[BPSJ CONTACT ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",28,0)
 ;
"RTN","BPSJINIT",29,0)
 W !!,"ALTERNATE SITE CONTACT DATA."
"RTN","BPSJINIT",30,0)
 K DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",31,0)
 S DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",32,0)
 S DR="[BPSJ ALT CONTACT ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",33,0)
 ;
"RTN","BPSJINIT",34,0)
 D HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJINIT",35,0)
 W !!!,"-- APPLICATION REGISTRATION VALIDATION RESULTS. --",!!
"RTN","BPSJINIT",36,0)
 S BPSJVALR=-1
"RTN","BPSJINIT",37,0)
 D BPSJVAL^BPSJAREG(2)
"RTN","BPSJINIT",38,0)
 S BPSJAPPR=BPSJVALR
"RTN","BPSJINIT",39,0)
 ;
"RTN","BPSJINIT",40,0)
 I 'BPSJAPPR W !!,"-- APPLICATION REGISTRATION DATA VALID. --",!
"RTN","BPSJINIT",41,0)
 E  D
"RTN","BPSJINIT",42,0)
 . W !!,"** APPLICATION REGISTRATION DATA INVALID!!!  **"
"RTN","BPSJINIT",43,0)
 . W !,"**  APPLICATION REGISTRATION AND PHARMACY    **"
"RTN","BPSJINIT",44,0)
 . W !,"**    REGISTRATIONS WILL NOT BE SENT!        **",!
"RTN","BPSJINIT",45,0)
 ;
"RTN","BPSJINIT",46,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",47,0)
 S DIR(0)="EO" D ^DIR I X=U Q
"RTN","BPSJINIT",48,0)
 ;
"RTN","BPSJINIT",49,0)
 D PHARM
"RTN","BPSJINIT",50,0)
 I BPSJAPPR D  Q
"RTN","BPSJINIT",51,0)
 . W !!,"REGISTRATION ABORTED DUE TO INVALID SITE REGISTRATION DATA.",!!
"RTN","BPSJINIT",52,0)
 ;
"RTN","BPSJINIT",53,0)
 D HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJINIT",54,0)
 W !!!,"APPLICATION REGISTRATION DATA IS VALID."
"RTN","BPSJINIT",55,0)
 W !!,"PHARMACY REGISTRATION DATA IS:"
"RTN","BPSJINIT",56,0)
 S PHIX=$O(^BPS(9002313.56,0))
"RTN","BPSJINIT",57,0)
 F  Q:'PHIX  D  S PHIX=$O(^BPS(9002313.56,PHIX))
"RTN","BPSJINIT",58,0)
 . S BPSJVALR=-1 D REG^BPSJPREG(PHIX,3)
"RTN","BPSJINIT",59,0)
 . I BPSJVALR>0 S DIR=" *INVALID",DIE=" and will NOT be transmitted."
"RTN","BPSJINIT",60,0)
 . E  S DIR="    VALID",DIE=" and will be transmitted."
"RTN","BPSJINIT",61,0)
 . W !,DIR_" for "_$P($G(^BPS(9002313.56,PHIX,0)),U)_DIE
"RTN","BPSJINIT",62,0)
 W !
"RTN","BPSJINIT",63,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",64,0)
 S DIR(0)="YEO",DIR("A")="SEND APPLICATION REGISTRATION: Y/N " D ^DIR
"RTN","BPSJINIT",65,0)
 I $TR($E(X),"y","Y")'="Y" Q
"RTN","BPSJINIT",66,0)
 ;
"RTN","BPSJINIT",67,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",68,0)
 D BPSJVAL^BPSJAREG(0)
"RTN","BPSJINIT",69,0)
 W !!,"APPLICATION REGISTRATION SUBMITTED."
"RTN","BPSJINIT",70,0)
 Q
"RTN","BPSJINIT",71,0)
 ;
"RTN","BPSJINIT",72,0)
PHARM ;CYCLE THROUGH PHARMACIES
"RTN","BPSJINIT",73,0)
 ;
"RTN","BPSJINIT",74,0)
 N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",75,0)
 N BPVALFN,BPSJVALR,DT,DUZ,BPSJPHPR
"RTN","BPSJINIT",76,0)
 ;
"RTN","BPSJINIT",77,0)
 D DT^DICRW S DUZ(0)="@",DT=$$NOW^XLFDT
"RTN","BPSJINIT",78,0)
 ;
"RTN","BPSJINIT",79,0)
 ; Check DropDeadDate
"RTN","BPSJINIT",80,0)
 N BPSJDDD
"RTN","BPSJINIT",81,0)
 S BPSJDDD=$$NPIREQ^BPSNPI(DT) ; DDD=3080524
"RTN","BPSJINIT",82,0)
 ;
"RTN","BPSJINIT",83,0)
 S BPVALFN=9002313.56,PHIX=0
"RTN","BPSJINIT",84,0)
 ;
"RTN","BPSJINIT",85,0)
 F  D  Q:PHIX=""
"RTN","BPSJINIT",86,0)
 . D HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJINIT",87,0)
 . W !!!,"ENTER/VERIFY PHARMACY REGISTRATION DATA."
"RTN","BPSJINIT",88,0)
 . W !!,"PHARMACY SPECIFIC DATA."
"RTN","BPSJINIT",89,0)
 . K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",90,0)
 . ;check for drop dead date
"RTN","BPSJINIT",91,0)
 . S DIC(0)="QAELM" I $G(BPSJDDD)>0 S DIC(0)="QAEM"
"RTN","BPSJINIT",92,0)
 . S DIC=BPVALFN,DLAYGO=DIC D ^DIC
"RTN","BPSJINIT",93,0)
 . ;
"RTN","BPSJINIT",94,0)
 . I X'=U,0<+Y S PHIX=+Y
"RTN","BPSJINIT",95,0)
 . E  S PHIX="" Q
"RTN","BPSJINIT",96,0)
 . D MOD I 'PHIX Q
"RTN","BPSJINIT",97,0)
 . D HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJINIT",98,0)
 . W !!!,"-- PHARMACY REGISTRATION VALIDATION RESULTS. --",!
"RTN","BPSJINIT",99,0)
 . ;
"RTN","BPSJINIT",100,0)
 . S BPSJVALR=-1
"RTN","BPSJINIT",101,0)
 . D REG^BPSJPREG(PHIX,2)
"RTN","BPSJINIT",102,0)
 . S BPSJPHPR=BPSJVALR
"RTN","BPSJINIT",103,0)
 . ;
"RTN","BPSJINIT",104,0)
 . I 'BPSJPHPR W !!,"-- PHARMACY REGISTRATION DATA VALID. --",!
"RTN","BPSJINIT",105,0)
 . E  D
"RTN","BPSJINIT",106,0)
 .. W !!,"**     PHARMACY REGISTRATION DATA INVALID!!!      **"
"RTN","BPSJINIT",107,0)
 .. W !,"** THIS PHARMACY'S REGISTRATION WILL NOT BE SENT! **",!
"RTN","BPSJINIT",108,0)
 . ;
"RTN","BPSJINIT",109,0)
 . K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",110,0)
 . S DIR(0)="EO",DIR("A")="Enter RETURN to continue" D ^DIR
"RTN","BPSJINIT",111,0)
 ;
"RTN","BPSJINIT",112,0)
 Q
"RTN","BPSJINIT",113,0)
 ;
"RTN","BPSJINIT",114,0)
MOD ;
"RTN","BPSJINIT",115,0)
 N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",116,0)
 ;
"RTN","BPSJINIT",117,0)
 ; Set hours to default if not set.
"RTN","BPSJINIT",118,0)
 S DA=$$OPHOURS^BPSJZRP(PHIX),DR=$G(^BPS(9002313.56,PHIX,"HOURS"))
"RTN","BPSJINIT",119,0)
 I $P(DR,U,2,5)'=DA S ^BPS(9002313.56,PHIX,"HOURS")="24"_U_DA
"RTN","BPSJINIT",120,0)
 ;
"RTN","BPSJINIT",121,0)
 ; Set STATUS default to ACTIVE if not set
"RTN","BPSJINIT",122,0)
 I $$GET1^DIQ(9002313.56,PHIX,.1,"I")="" D
"RTN","BPSJINIT",123,0)
 . K DI,DIDEL
"RTN","BPSJINIT",124,0)
 . S DR=".1///ACTIVE",DIE=9002313.56,DA=PHIX
"RTN","BPSJINIT",125,0)
 . D ^DIE
"RTN","BPSJINIT",126,0)
 ;
"RTN","BPSJINIT",127,0)
 W !!,"SITE DATA."
"RTN","BPSJINIT",128,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",129,0)
 S DA=PHIX,DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",130,0)
 S DR="[BPSJ PHARMACY SITE ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",131,0)
 ;
"RTN","BPSJINIT",132,0)
 I '$G(DA) S PHIX=0 Q   ; Pharmacy killed by user
"RTN","BPSJINIT",133,0)
 ;
"RTN","BPSJINIT",134,0)
 ; Pharmacy open hours
"RTN","BPSJINIT",135,0)
 I '$D(Y) D EN^BPSJINI1(PHIX)
"RTN","BPSJINIT",136,0)
 ;
"RTN","BPSJINIT",137,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",138,0)
 S DIR(0)="EO" D ^DIR
"RTN","BPSJINIT",139,0)
 ;
"RTN","BPSJINIT",140,0)
 I X=U Q
"RTN","BPSJINIT",141,0)
 ;
"RTN","BPSJINIT",142,0)
 W !!,"PRIMARY CONTACT DATA."
"RTN","BPSJINIT",143,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",144,0)
 S DA=PHIX,DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",145,0)
 S DR="[BPSJ PHARM CONTACT ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",146,0)
 ;
"RTN","BPSJINIT",147,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",148,0)
 S DIR(0)="EO" D ^DIR
"RTN","BPSJINIT",149,0)
 ;
"RTN","BPSJINIT",150,0)
 I X=U Q
"RTN","BPSJINIT",151,0)
 ;
"RTN","BPSJINIT",152,0)
 W !!,"ALTERNATE CONTACT DATA."
"RTN","BPSJINIT",153,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",154,0)
 S DA=PHIX,DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",155,0)
 S DR="[BPSJ PHARM ALT CONT ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",156,0)
 ;
"RTN","BPSJINIT",157,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",158,0)
 S DIR(0)="EO" D ^DIR
"RTN","BPSJINIT",159,0)
 ;
"RTN","BPSJINIT",160,0)
 I X=U Q
"RTN","BPSJINIT",161,0)
 ;
"RTN","BPSJINIT",162,0)
 W !!,"PHARMACIST DATA."  ; VA LEAD PHARMACIST
"RTN","BPSJINIT",163,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",164,0)
 S DA=PHIX,DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",165,0)
 S DR="[BPSJ PHARMACIST ENTER/EDIT]" D ^DIE
"RTN","BPSJINIT",166,0)
 ;
"RTN","BPSJINIT",167,0)
 I $D(Y) Q
"RTN","BPSJINIT",168,0)
 ;
"RTN","BPSJINIT",169,0)
 ; VA LEAD PHARMACIST LICENSE
"RTN","BPSJINIT",170,0)
 K DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJINIT",171,0)
 S DA=PHIX,DIE=$$ROOT^DILFD(BPVALFN)
"RTN","BPSJINIT",172,0)
 S DR="1900.04//" D ^DIE
"RTN","BPSJINIT",173,0)
 ;
"RTN","BPSJINIT",174,0)
 Q
"RTN","BPSJINIT",175,0)
 ;
"RTN","BPSJINIT",176,0)
VERSION(BPVAL) ;Set Version number to 3 if not set or not an integer > 1      
"RTN","BPSJINIT",177,0)
 S DA=$O(^BPS(BPVAL,0)),DIE=$$ROOT^DILFD(BPVAL)
"RTN","BPSJINIT",178,0)
 I 'DA S DA=1 D
"RTN","BPSJINIT",179,0)
 . S DR=".01////BPS SETUP #1" D ^DIE
"RTN","BPSJINIT",180,0)
 . S DR="6003////3" D ^DIE
"RTN","BPSJINIT",181,0)
 Q
"RTN","BPSJINIT",182,0)
 ;
"RTN","BPSJINIT",183,0)
VALIDATE ;  this will only validate the Application Registration and
"RTN","BPSJINIT",184,0)
 ;          the Pharmacy registrations
"RTN","BPSJINIT",185,0)
 Q
"RTN","BPSJINIT",186,0)
 N AREG
"RTN","BPSJINIT",187,0)
 ;
"RTN","BPSJINIT",188,0)
 D BPSJVAL^BPSJAREG(2)
"RTN","BPSJINIT",189,0)
 ;
"RTN","BPSJINIT",190,0)
 S DIR(0)="EO"
"RTN","BPSJINIT",191,0)
 D ^DIR
"RTN","BPSJINIT",192,0)
 I X=U Q
"RTN","BPSJINIT",193,0)
 ;
"RTN","BPSJINIT",194,0)
 S AREG="" F  S AREG=$O(^BPS(9002313.56,AREG)) Q:'AREG  D  I X=U Q
"RTN","BPSJINIT",195,0)
 . D REG^BPSJPREG(AREG,2)
"RTN","BPSJINIT",196,0)
 . S DIR(0)="EO"
"RTN","BPSJINIT",197,0)
 . D ^DIR
"RTN","BPSJINIT",198,0)
 ;
"RTN","BPSJINIT",199,0)
 Q
"RTN","BPSJPREG")
0^15^B18676924^B11507539
"RTN","BPSJPREG",1,0)
BPSJPREG ;BHAM ISC/LJF - HL7 Registration MFN Message ;21-NOV-2003
"RTN","BPSJPREG",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSJPREG",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJPREG",4,0)
 ;
"RTN","BPSJPREG",5,0)
 ;**Program Description**
"RTN","BPSJPREG",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","BPSJPREG",7,0)
 ;
"RTN","BPSJPREG",8,0)
 ;  Variable
"RTN","BPSJPREG",9,0)
 ; HL      = HL7 parameters
"RTN","BPSJPREG",10,0)
 ; HL7DTG  = Date time in HL7 format
"RTN","BPSJPREG",11,0)
 ; HLECH   = HL7 Encoding Characters
"RTN","BPSJPREG",12,0)
 ; HLEID   = HL7 Link id
"RTN","BPSJPREG",13,0)
 ; HLFS    = HL7 Field separator
"RTN","BPSJPREG",14,0)
 ; HLLNK   = HL7 E-Pharm Link
"RTN","BPSJPREG",15,0)
 ; HLRESET = HL7 generate results
"RTN","BPSJPREG",16,0)
 ; IPP     = IP Port
"RTN","BPSJPREG",17,0)
 ; IPA     = IP Address
"RTN","BPSJPREG",18,0)
 ; MCT     = Message Count
"RTN","BPSJPREG",19,0)
 ; MGRP    = E-Mail message group
"RTN","BPSJPREG",20,0)
 ; MSG     = Message
"RTN","BPSJPREG",21,0)
 ;
"RTN","BPSJPREG",22,0)
 ; Don't allow direct execution
"RTN","BPSJPREG",23,0)
 ;
"RTN","BPSJPREG",24,0)
 W !!!,"DIRECT ENTRY NOT ALLOWED",!!!
"RTN","BPSJPREG",25,0)
 Q
"RTN","BPSJPREG",26,0)
 ;
"RTN","BPSJPREG",27,0)
REG(PHARMIX,BPSJVAL) ;  Registration message for when a site installs
"RTN","BPSJPREG",28,0)
 ;
"RTN","BPSJPREG",29,0)
 N HL,HL7DTG,HLECH,HLEID,HLFS,HLLNK,HLPRO,HLRESLT,IPA,IPP,NPKEY,NCPDP
"RTN","BPSJPREG",30,0)
 N MGRP,MCT,MSG,TAXID,ZRPSEG,BPSJVAL2,BPSJPRES
"RTN","BPSJPREG",31,0)
 ;
"RTN","BPSJPREG",32,0)
 S (MCT,TAXID)=0,BPSJVAL=$G(BPSJVAL)
"RTN","BPSJPREG",33,0)
 ;
"RTN","BPSJPREG",34,0)
 I '$G(PHARMIX) Q
"RTN","BPSJPREG",35,0)
 K ^TMP("HLS",$J)
"RTN","BPSJPREG",36,0)
 ;
"RTN","BPSJPREG",37,0)
 ; NPI Processing      
"RTN","BPSJPREG",38,0)
 ; Get DropDeadDate and Date/Time Last Change
"RTN","BPSJPREG",39,0)
 N BPSJAPI,BPSJNPI,BPSJNDT,BPSJOP,BPSJOPS,BPSJDDD,NPKEY
"RTN","BPSJPREG",40,0)
 S BPSJDDD=$$NPIREQ^BPSNPI(DT)
"RTN","BPSJPREG",41,0)
 N NOW,%,%H,%I,X D NOW^%DTC S BPSJNDT=%
"RTN","BPSJPREG",42,0)
 ; Get OP site for pharmacy and NPIAPI
"RTN","BPSJPREG",43,0)
 S BPSJOP=0,BPSJAPI=""
"RTN","BPSJPREG",44,0)
 F  S BPSJOP=$O(^BPS(9002313.56,PHARMIX,"OPSITE",BPSJOP)) Q:'BPSJOP  D  I BPSJAPI'="" Q
"RTN","BPSJPREG",45,0)
 . S BPSJOPS=$G(^BPS(9002313.56,PHARMIX,"OPSITE",BPSJOP,0))
"RTN","BPSJPREG",46,0)
 . S BPSJAPI=$$NPI^BPSNPI("Pharmacy_ID",BPSJOPS)
"RTN","BPSJPREG",47,0)
 . I $P(BPSJAPI,U,1)=-1 S BPSJAPI="" Q
"RTN","BPSJPREG",48,0)
 . I $P(BPSJAPI,U)>0 S BPSJAPI=$P(BPSJAPI,U)
"RTN","BPSJPREG",49,0)
 ; Check for existing NPI 
"RTN","BPSJPREG",50,0)
 S BPSJNPI=$P($G(^BPS(9002313.56,PHARMIX,"NPI")),U)
"RTN","BPSJPREG",51,0)
 I 'BPSJAPI,BPSJNPI,BPSJVAL<2 D
"RTN","BPSJPREG",52,0)
 . N DA,DIC,DIE,DINUM,DIR,DIRUT,DIROUT,DLAYGO,DR,DTOUT,DUOUT,X,Y
"RTN","BPSJPREG",53,0)
 . S DA=PHARMIX,DIE=$$ROOT^DILFD(9002313.56)
"RTN","BPSJPREG",54,0)
 . S DR="41.01///@;41.02///@" D ^DIE
"RTN","BPSJPREG",55,0)
 I BPSJAPI,BPSJVAL<2 D
"RTN","BPSJPREG",56,0)
 . S ^XTMP("BPSJ",0)=(BPSJNDT+7)_U_BPSJNDT_U_"BPS NPI HL7 DATA"
"RTN","BPSJPREG",57,0)
 . S ^XTMP("BPSJ","NPI",BPSJAPI)=PHARMIX_U_BPSJNDT
"RTN","BPSJPREG",58,0)
 ;
"RTN","BPSJPREG",59,0)
 ;  Get Link data from HL7 table
"RTN","BPSJPREG",60,0)
 S HLPRO="BPSJ REGISTER",(IPA,IPP)=""
"RTN","BPSJPREG",61,0)
 S HLLNK=$$FIND1^DIC(870,"",,"EPHARM OUT","B")
"RTN","BPSJPREG",62,0)
 I HLLNK S IPA=$$GET1^DIQ(870,HLLNK_",",400.01),IPP=$$GET1^DIQ(870,HLLNK_",",400.02)
"RTN","BPSJPREG",63,0)
 ;
"RTN","BPSJPREG",64,0)
 ;  Error if any missing data
"RTN","BPSJPREG",65,0)
 I IPA=""!(IPP="") S MCT=MCT+1,MSG(MCT)="IP Address or Port is not defined.  "
"RTN","BPSJPREG",66,0)
 ;
"RTN","BPSJPREG",67,0)
 ;  Initialize the HL7
"RTN","BPSJPREG",68,0)
 D INIT^HLFNC2(HLPRO,.HL)
"RTN","BPSJPREG",69,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","BPSJPREG",70,0)
 S HLECH=$E($G(HL("ECH"),1)) I HLECH="" S HLECH="^"
"RTN","BPSJPREG",71,0)
 S HL("SITE")=$$SITE^VASITE,HL("SAF")=$P(HL("SITE"),U,2,3)
"RTN","BPSJPREG",72,0)
 S HL("EPPORT")=IPP,HLEID=$$HLP^BPSJUTL(HLPRO)
"RTN","BPSJPREG",73,0)
 ;
"RTN","BPSJPREG",74,0)
 ;Get fileman date/time, ensuring seconds are included: 3031029.135636
"RTN","BPSJPREG",75,0)
 S HL7DTG=$E($$HTFM^XLFDT($H)_"000000",1,14)
"RTN","BPSJPREG",76,0)
 ;Set HL7 Date/Time format: 20031029135636-0400
"RTN","BPSJPREG",77,0)
 S HL7DTG=$$FMTHL7^XLFDT(HL7DTG)
"RTN","BPSJPREG",78,0)
 ;
"RTN","BPSJPREG",79,0)
 ;  Set the ZRP Segment
"RTN","BPSJPREG",80,0)
 D EN^BPSJZRP(.HL,PHARMIX,.ZRPSEG,BPSJAPI,.NCPDP)
"RTN","BPSJPREG",81,0)
 M ^TMP("HLS",$J,3)=ZRPSEG K ZRPSEG
"RTN","BPSJPREG",82,0)
 ;
"RTN","BPSJPREG",83,0)
 ;  Set the MFE segment
"RTN","BPSJPREG",84,0)
 N BPSMFE S BPSMFE="MUP"
"RTN","BPSJPREG",85,0)
 S NPKEY=$$NPKEY^BPSNPI(NCPDP,BPSJNPI,BPSJAPI)
"RTN","BPSJPREG",86,0)
 I NPKEY D
"RTN","BPSJPREG",87,0)
 . I '$$BPSACTV^BPSUTIL(PHARMIX) S BPSMFE="MDC"
"RTN","BPSJPREG",88,0)
 . S ^TMP("HLS",$J,2)="MFE"_HLFS_BPSMFE_HLFS_HLFS_HL7DTG
"RTN","BPSJPREG",89,0)
 . S ^TMP("HLS",$J,2)=^TMP("HLS",$J,2)_HLFS_NPKEY_HLFS_"ST"
"RTN","BPSJPREG",90,0)
 ;
"RTN","BPSJPREG",91,0)
 ;   Set the MFI segment
"RTN","BPSJPREG",92,0)
 S ^TMP("HLS",$J,1)="MFI"_HLFS_"Pharmacy Table"_HLFS_HLFS_"UPD"_HLFS
"RTN","BPSJPREG",93,0)
 S ^TMP("HLS",$J,1)=^TMP("HLS",$J,1)_HL7DTG_HLFS_HL7DTG_HLFS_"NE"
"RTN","BPSJPREG",94,0)
 ;
"RTN","BPSJPREG",95,0)
 S BPSJPRES=$$VAL2^BPSJVAL(BPSJVAL,BPSJDDD)  ; 0 = ok
"RTN","BPSJPREG",96,0)
 I BPSJVAL=3 G FINI   ; Just checking to see if data valid.
"RTN","BPSJPREG",97,0)
 ;
"RTN","BPSJPREG",98,0)
 ;-Check if msg valid.
"RTN","BPSJPREG",99,0)
 I 'BPSJPRES D  G FINI
"RTN","BPSJPREG",100,0)
 . K HLRESLT
"RTN","BPSJPREG",101,0)
 . D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"")
"RTN","BPSJPREG",102,0)
 . I $P($G(HLRESLT),U,2)]"" D  Q
"RTN","BPSJPREG",103,0)
 .. I BPSJVAL D  Q   ; Interactive: show no success
"RTN","BPSJPREG",104,0)
 ... W !!,"ECME Pharmacy Registration HL7 Message not created: "_HLRESLT
"RTN","BPSJPREG",105,0)
 ... W !," PHARMIX: "_PHARMIX_""
"RTN","BPSJPREG",106,0)
 .. S MCT=MCT+1,MSG(MCT)="ECME Pharmacy Registration HL7 Message not created. (PHARMIX: "_PHARMIX_")"
"RTN","BPSJPREG",107,0)
 .. S MCT=MCT+1,MSG(MCT)=HLRESLT
"RTN","BPSJPREG",108,0)
 .. D MSG^BPSJUTL(.MSG,"ECME Pharmacy Registration")
"RTN","BPSJPREG",109,0)
 . I BPSJVAL D    ;Interactive: show success
"RTN","BPSJPREG",110,0)
 .. W !!,"ECME Pharmacy Registration HL7 Message was created successfully."
"RTN","BPSJPREG",111,0)
 ;
"RTN","BPSJPREG",112,0)
 ;
"RTN","BPSJPREG",113,0)
FINI ; Clean up
"RTN","BPSJPREG",114,0)
 K ^TMP("HLS",$J)
"RTN","BPSJPREG",115,0)
 Q
"RTN","BPSJUTL")
0^24^B9495384^B9376447
"RTN","BPSJUTL",1,0)
BPSJUTL ;BHAM ISC/LJF - e-Pharmacy Utils ;16-OCT-2003
"RTN","BPSJUTL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJUTL",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJUTL",4,0)
 ;
"RTN","BPSJUTL",5,0)
 Q
"RTN","BPSJUTL",6,0)
 ;
"RTN","BPSJUTL",7,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","BPSJUTL",8,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","BPSJUTL",9,0)
 ;
"RTN","BPSJUTL",10,0)
VAHL7ECH(HL) ; Hl7 Encoding Characters
"RTN","BPSJUTL",11,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"
"RTN","BPSJUTL",12,0)
 S ECH=$G(HL("ECH")) I ECH="" S ECH="^~\&"
"RTN","BPSJUTL",13,0)
 S CPS=$E(ECH),REP=$E(ECH,2)
"RTN","BPSJUTL",14,0)
 ;
"RTN","BPSJUTL",15,0)
 Q
"RTN","BPSJUTL",16,0)
 ;
"RTN","BPSJUTL",17,0)
MSG(BPSJMM,BPSJRTN) ; Message Handler
"RTN","BPSJUTL",18,0)
 ;
"RTN","BPSJUTL",19,0)
 N XMDUZ,XMSUB,XMY,XMTEXT,BPMSJMG
"RTN","BPSJUTL",20,0)
 ;
"RTN","BPSJUTL",21,0)
 I $G(U)="" S U="^"
"RTN","BPSJUTL",22,0)
 I $G(BPSJRTN)]"" S BPSJMM(.0001)="Source Process: "_BPSJRTN
"RTN","BPSJUTL",23,0)
 S BPMSJMG=$O(^BPS(9002313.99,0)) Q:'BPMSJMG
"RTN","BPSJUTL",24,0)
 S BPMSJMG=+$G(^BPS(9002313.99,BPMSJMG,"VITRIA")) Q:'BPMSJMG
"RTN","BPSJUTL",25,0)
 S BPMSJMG=$G(^VA(200,BPMSJMG,.15)) Q:BPMSJMG=""
"RTN","BPSJUTL",26,0)
 S XMY(BPMSJMG)="",XMTEXT="BPSJMM(",XMSUB="ECME Registration Problem."
"RTN","BPSJUTL",27,0)
 D ^XMD
"RTN","BPSJUTL",28,0)
 ;
"RTN","BPSJUTL",29,0)
 Q
"RTN","BPSJUTL",30,0)
 ;
"RTN","BPSJUTL",31,0)
VA200NM(VAIX,VATITLE,HL) ;
"RTN","BPSJUTL",32,0)
 ;
"RTN","BPSJUTL",33,0)
 N RETDATA,NMDATA
"RTN","BPSJUTL",34,0)
 N FS,CPS,REP
"RTN","BPSJUTL",35,0)
 ;
"RTN","BPSJUTL",36,0)
 I '$G(VAIX) Q ""
"RTN","BPSJUTL",37,0)
 S NMDATA=$P($G(^VA(200,VAIX,0)),U,1) I NMDATA="" Q ""
"RTN","BPSJUTL",38,0)
 ;
"RTN","BPSJUTL",39,0)
 D VAHL7ECH(.HL)
"RTN","BPSJUTL",40,0)
 D STDNAME^XLFNAME(.NMDATA,"C")
"RTN","BPSJUTL",41,0)
 ;
"RTN","BPSJUTL",42,0)
 S RETDATA=$G(NMDATA("FAMILY"))              ;1
"RTN","BPSJUTL",43,0)
 S RETDATA=RETDATA_CPS_$G(NMDATA("GIVEN"))   ;2
"RTN","BPSJUTL",44,0)
 S RETDATA=RETDATA_CPS_$G(NMDATA("MIDDLE"))  ;3
"RTN","BPSJUTL",45,0)
 S RETDATA=RETDATA_CPS_$G(NMDATA("SUFFIX"))  ;4
"RTN","BPSJUTL",46,0)
 S RETDATA=RETDATA_CPS_$G(NMDATA("PREFIX"))  ;5
"RTN","BPSJUTL",47,0)
 S RETDATA=RETDATA_CPS_$G(NMDATA("DEGREE"))  ;6
"RTN","BPSJUTL",48,0)
 ;
"RTN","BPSJUTL",49,0)
 S VATITLE=$P($G(^VA(200,VAIX,0)),U,9)
"RTN","BPSJUTL",50,0)
 I VATITLE S VATITLE=$G(^DIC(3.1,VATITLE,0))
"RTN","BPSJUTL",51,0)
 ;
"RTN","BPSJUTL",52,0)
 Q RETDATA
"RTN","BPSJUTL",53,0)
 ;
"RTN","BPSJUTL",54,0)
VA20013(VAIX,HL) ; Build the HL7 Contact Means data field
"RTN","BPSJUTL",55,0)
 ;
"RTN","BPSJUTL",56,0)
 N FDATA,RETDATA
"RTN","BPSJUTL",57,0)
 N FS,CPS,REP
"RTN","BPSJUTL",58,0)
 ;
"RTN","BPSJUTL",59,0)
 I '$G(VAIX) Q ""
"RTN","BPSJUTL",60,0)
 ; VAIX is the index to ^VA(200,n
"RTN","BPSJUTL",61,0)
 D VAHL7ECH(.HL)
"RTN","BPSJUTL",62,0)
 S RETDATA=$P($G(^VA(200,VAIX,.15)),U,1)   ; LJF@DAOU.COM
"RTN","BPSJUTL",63,0)
 I RETDATA]"",RETDATA["@" S RETDATA=CPS_"NET"_CPS_"INTERNET"_CPS_RETDATA
"RTN","BPSJUTL",64,0)
 S FDATA=$$EN^BPSJPHNM(VAIX,CPS,REP)
"RTN","BPSJUTL",65,0)
 I $L(FDATA) D
"RTN","BPSJUTL",66,0)
 . I $L(RETDATA) S RETDATA=RETDATA_REP
"RTN","BPSJUTL",67,0)
 . S RETDATA=RETDATA_FDATA
"RTN","BPSJUTL",68,0)
 Q RETDATA
"RTN","BPSJUTL",69,0)
 ;
"RTN","BPSJUTL",70,0)
ENCODE(INSTR,TCH) ;  Encode data - Primarily HL7
"RTN","BPSJUTL",71,0)
 N X,WCHR,OSTR
"RTN","BPSJUTL",72,0)
 S OSTR=""
"RTN","BPSJUTL",73,0)
 I $G(INSTR)]"" F X=1:1:$L(INSTR) D  S OSTR=OSTR_WCHR
"RTN","BPSJUTL",74,0)
 . S WCHR=$E(INSTR,X) I $D(TCH(WCHR)) S WCHR=TCH(WCHR)
"RTN","BPSJUTL",75,0)
 Q OSTR
"RTN","BPSJUTL",76,0)
 ;
"RTN","BPSJUTL",77,0)
SPAR(HL,BPSJSEG,HCTS) ;  Segment Parsing
"RTN","BPSJUTL",78,0)
 N II,IJ,IK,ISDATA
"RTN","BPSJUTL",79,0)
 N FS,CPS,REP,ECH
"RTN","BPSJUTL",80,0)
 ;
"RTN","BPSJUTL",81,0)
 I '$G(HCTS) Q
"RTN","BPSJUTL",82,0)
 ;
"RTN","BPSJUTL",83,0)
 D VAHL7ECH(.HL)
"RTN","BPSJUTL",84,0)
 M ISDATA=^TMP($J,"BPSJHLI",HCTS)
"RTN","BPSJUTL",85,0)
 S IK=0,IJ=1,II=""
"RTN","BPSJUTL",86,0)
 F  S II=$O(ISDATA(II)) Q:II=""  D
"RTN","BPSJUTL",87,0)
 . S ISDATA=$G(ISDATA(II)) Q:ISDATA=""
"RTN","BPSJUTL",88,0)
 . F  D  Q:ISDATA=""
"RTN","BPSJUTL",89,0)
 . . S IK=IK+1,BPSJSEG(IJ,IK)=$P(ISDATA,FS)
"RTN","BPSJUTL",90,0)
 . . S $P(ISDATA,FS)=""
"RTN","BPSJUTL",91,0)
 . . I $E(ISDATA)=FS S IJ=IJ+1,$E(ISDATA)=""
"RTN","BPSJUTL",92,0)
 ;
"RTN","BPSJUTL",93,0)
 ; Promote data in 1st subnode and kill subnode
"RTN","BPSJUTL",94,0)
 S II=""
"RTN","BPSJUTL",95,0)
 F  S II=$O(BPSJSEG(II)) Q:II=""  D
"RTN","BPSJUTL",96,0)
 . S IJ=$O(BPSJSEG(II,"")) Q:'IJ
"RTN","BPSJUTL",97,0)
 . S BPSJSEG(II)=BPSJSEG(II,IJ) K BPSJSEG(II,IJ)
"RTN","BPSJUTL",98,0)
 Q
"RTN","BPSJVAL")
0^19^B8180579^B7718705
"RTN","BPSJVAL",1,0)
BPSJVAL ;BHAM ISC/LJF - Pharmacy data entry ;2004-03-01
"RTN","BPSJVAL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJVAL",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJVAL",4,0)
 ;
"RTN","BPSJVAL",5,0)
 D ^BPSJVAL1
"RTN","BPSJVAL",6,0)
 K DIR,X S DIR(0)="EO" D ^DIR
"RTN","BPSJVAL",7,0)
 I X=U Q
"RTN","BPSJVAL",8,0)
 D ^BPSJVAL2
"RTN","BPSJVAL",9,0)
 Q
"RTN","BPSJVAL",10,0)
 ;
"RTN","BPSJVAL",11,0)
VAL1(VALCK) ;   Application
"RTN","BPSJVAL",12,0)
 N RETCODE,VERBOSE,IX2
"RTN","BPSJVAL",13,0)
 ;
"RTN","BPSJVAL",14,0)
 ; VALCK=0 = validation, HL7 trigger, no display
"RTN","BPSJVAL",15,0)
 I '$G(VALCK) N RETCODE D  Q RETCODE  ; 0 means ok, '0 means invalid
"RTN","BPSJVAL",16,0)
 . ;-validate and quit if ok
"RTN","BPSJVAL",17,0)
 . S RETCODE=0 D VALIDATE^BPSJVAL1 I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",18,0)
 . I 'RETCODE Q
"RTN","BPSJVAL",19,0)
 . ;-invalid data, send an email
"RTN","BPSJVAL",20,0)
 . S MCT=1+$G(MCT),MSG(MCT)="ECME Application Registration HL7 Message not created."
"RTN","BPSJVAL",21,0)
 . F IX2=1:1:RETCODE I $G(RETCODE(IX2))]"" D
"RTN","BPSJVAL",22,0)
 .. S MCT=1+MCT,MSG(MCT)=$G(RETCODE(IX2))
"RTN","BPSJVAL",23,0)
 . D MSG^BPSJUTL(.MSG,"ECME Application Registration")
"RTN","BPSJVAL",24,0)
 ;
"RTN","BPSJVAL",25,0)
 ; VALCK=1 = validation, HL7 trigger, display
"RTN","BPSJVAL",26,0)
 I $G(VALCK)=1 N RETCODE D  Q RETCODE  ; 0 means ok, '0 means invalid
"RTN","BPSJVAL",27,0)
 . S RETCODE=0,VERBOSE=1 D VALIDATE^BPSJVAL1
"RTN","BPSJVAL",28,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",29,0)
 ;
"RTN","BPSJVAL",30,0)
 ; VALCK=2 = validation, no HL7 trigger, display
"RTN","BPSJVAL",31,0)
 I $G(VALCK)=2 N RETCODE D  Q 1
"RTN","BPSJVAL",32,0)
 . S RETCODE=0,VERBOSE=1 D VALIDATE^BPSJVAL1
"RTN","BPSJVAL",33,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",34,0)
 ;
"RTN","BPSJVAL",35,0)
 ; VALCK=3 = validation, no HL7 trigger, no display
"RTN","BPSJVAL",36,0)
 I $G(VALCK)=3 N RETCODE D  Q 1
"RTN","BPSJVAL",37,0)
 . S RETCODE=0 D VALIDATE^BPSJVAL1
"RTN","BPSJVAL",38,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",39,0)
 ;
"RTN","BPSJVAL",40,0)
 Q
"RTN","BPSJVAL",41,0)
 ;
"RTN","BPSJVAL",42,0)
VAL2(VALCK,BPSJD) ;  Pharmacies
"RTN","BPSJVAL",43,0)
 N RETCODE,VERBOSE,IX2
"RTN","BPSJVAL",44,0)
 ;
"RTN","BPSJVAL",45,0)
 ; VALCK=0 = validation, HL7 trigger, no display
"RTN","BPSJVAL",46,0)
 I '$G(VALCK) N RETCODE D  Q RETCODE  ; 0 means ok, '0 means invalid
"RTN","BPSJVAL",47,0)
 . ;-validate and quit if ok
"RTN","BPSJVAL",48,0)
 . S RETCODE=0 D VALIDATE^BPSJVAL2(BPSJD) I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",49,0)
 . I 'RETCODE Q
"RTN","BPSJVAL",50,0)
 . ;-invalid data, send an email
"RTN","BPSJVAL",51,0)
 . S MCT=1+$G(MCT),MSG(MCT)="ECME Pharmacy Registration HL7 Message not created."
"RTN","BPSJVAL",52,0)
 . F IX2=1:1:RETCODE I $G(RETCODE(IX2))]"" D
"RTN","BPSJVAL",53,0)
 .. S MCT=1+MCT,MSG(MCT)=$G(RETCODE(IX2))
"RTN","BPSJVAL",54,0)
 . D MSG^BPSJUTL(.MSG,"ECME Pharmacy Registration")
"RTN","BPSJVAL",55,0)
 ;
"RTN","BPSJVAL",56,0)
 ; VALCK=1 = validation, HL7 trigger, display
"RTN","BPSJVAL",57,0)
 I $G(VALCK)=1 N RETCODE D  Q RETCODE  ; 0 means ok, '0 means invalid
"RTN","BPSJVAL",58,0)
 . S RETCODE=0,VERBOSE=1 D VALIDATE^BPSJVAL2(BPSJD)
"RTN","BPSJVAL",59,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",60,0)
 ;
"RTN","BPSJVAL",61,0)
 ; VALCK=2 = validation, no HL7 trigger, display
"RTN","BPSJVAL",62,0)
 I $G(VALCK)=2 N RETCODE D  Q 1
"RTN","BPSJVAL",63,0)
 . S RETCODE=0,VERBOSE=1 D VALIDATE^BPSJVAL2(BPSJD)
"RTN","BPSJVAL",64,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",65,0)
 ;
"RTN","BPSJVAL",66,0)
 ; VALCK=3 = validation, no display, no HL7 trigger
"RTN","BPSJVAL",67,0)
 I $G(VALCK)=3 N RETCODE D  Q 1
"RTN","BPSJVAL",68,0)
 . S RETCODE=0 D VALIDATE^BPSJVAL2(BPSJD)
"RTN","BPSJVAL",69,0)
 . I $G(BPSJVALR)=-1 S BPSJVALR=RETCODE
"RTN","BPSJVAL",70,0)
 ;
"RTN","BPSJVAL",71,0)
 Q
"RTN","BPSJVAL2")
0^20^B27168549^B30079900
"RTN","BPSJVAL2",1,0)
BPSJVAL2 ;BHAM ISC/LJF - Validate Pharmacy data ;2004-03-01
"RTN","BPSJVAL2",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJVAL2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJVAL2",4,0)
 ;
"RTN","BPSJVAL2",5,0)
 N PHARMIX,RET,DIR,X
"RTN","BPSJVAL2",6,0)
 ;
"RTN","BPSJVAL2",7,0)
 S PHARMIX=0,X=""
"RTN","BPSJVAL2",8,0)
 F  S PHARMIX=$O(^BPS(9002313.56,PHARMIX)) Q:'PHARMIX  D  Q:X=U
"RTN","BPSJVAL2",9,0)
 . D DT^DICRW,HOME^%ZIS,CLEAR^VALM1
"RTN","BPSJVAL2",10,0)
 . W !!,"VERIFY PHARMACY REGISTRATIONS DATA.",!
"RTN","BPSJVAL2",11,0)
 . D REG^BPSJPREG(PHARMIX,2)
"RTN","BPSJVAL2",12,0)
 . W !
"RTN","BPSJVAL2",13,0)
 . S DIR(0)="EO" D ^DIR
"RTN","BPSJVAL2",14,0)
 ;
"RTN","BPSJVAL2",15,0)
 Q
"RTN","BPSJVAL2",16,0)
 ;
"RTN","BPSJVAL2",17,0)
VALIDATE(BPSJDDD) ;
"RTN","BPSJVAL2",18,0)
 N SEG,SEGIX,ZRP,RAY,RIX,PIX,PIXL,SEGDAT,ZNOTE,ZMAX,CPS,FS,REP
"RTN","BPSJVAL2",19,0)
 N VALDATA,TMP
"RTN","BPSJVAL2",20,0)
 S ZMAX=17
"RTN","BPSJVAL2",21,0)
 ;
"RTN","BPSJVAL2",22,0)
 S RETCODE=$G(RETCODE)
"RTN","BPSJVAL2",23,0)
 S ZRP="",RIX=0
"RTN","BPSJVAL2",24,0)
 ;
"RTN","BPSJVAL2",25,0)
 ; Set HL7 Delimiters - use standard defaults if none provided
"RTN","BPSJVAL2",26,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"
"RTN","BPSJVAL2",27,0)
 S CPS=$E($G(HL("ECH"))) I CPS="" S CPS="^"
"RTN","BPSJVAL2",28,0)
 S REP=$E($G(HL("ECH")),2) I REP="" S REP="~"
"RTN","BPSJVAL2",29,0)
 ;
"RTN","BPSJVAL2",30,0)
 F SEGIX=3:1 S SEG=$G(^TMP("HLS",$J,SEGIX)),PIX=0 Q:SEG=""  D  I ZRP]"" Q
"RTN","BPSJVAL2",31,0)
 . I $E(SEG,1,3)="ZRP" S ZRP=$E(SEG,4) S $E(SEG,1,4)=""
"RTN","BPSJVAL2",32,0)
 I ZRP="" Q
"RTN","BPSJVAL2",33,0)
 F  S RIX=$O(^TMP("HLS",$J,SEGIX,RIX)) Q:'RIX  I RIX<(ZMAX+1) D
"RTN","BPSJVAL2",34,0)
 . S TMP=$P($G(^TMP("HLS",$J,SEGIX,RIX)),ZRP)
"RTN","BPSJVAL2",35,0)
 . I $G(TMP)="" S RETCODE(RIX)=""
"RTN","BPSJVAL2",36,0)
 . I RIX=3 S RETCODE(RIX)=TMP ;capture pharmacy name
"RTN","BPSJVAL2",37,0)
 F  S RIX=$O(RETCODE(RIX)) Q:'RIX  D
"RTN","BPSJVAL2",38,0)
 . D @RIX
"RTN","BPSJVAL2",39,0)
 . I +$G(VERBOSE),$L($G(RETCODE(RIX))) W !,RETCODE(RIX)
"RTN","BPSJVAL2",40,0)
 ;
"RTN","BPSJVAL2",41,0)
 Q
"RTN","BPSJVAL2",42,0)
 ;
"RTN","BPSJVAL2",43,0)
 ; NS=Not Supported, R=Required, RE=Required or empty, C=Conditional
"RTN","BPSJVAL2",44,0)
 ; CE=Conditional or empty, O=Optional,
"RTN","BPSJVAL2",45,0)
 ;
"RTN","BPSJVAL2",46,0)
1 ; Set ID - NS
"RTN","BPSJVAL2",47,0)
 Q
"RTN","BPSJVAL2",48,0)
2 ; NCPDP Number - C
"RTN","BPSJVAL2",49,0)
 S ZNOTE="   NCPDP NUMBER - VALID"
"RTN","BPSJVAL2",50,0)
 I RETCODE(RIX)="" D
"RTN","BPSJVAL2",51,0)
 . I BPSJDDD=0 D 
"RTN","BPSJVAL2",52,0)
 . . I '$D(RETCODE(17)) Q
"RTN","BPSJVAL2",53,0)
 . . S ZNOTE="** NCPDP NUMBER - NCPDP OR NPI - Missing/Invalid",RETCODE=2
"RTN","BPSJVAL2",54,0)
 . . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",55,0)
 Q
"RTN","BPSJVAL2",56,0)
3 ; PHARMACY NAME - R
"RTN","BPSJVAL2",57,0)
 S ZNOTE="   PHARMACY NAME"
"RTN","BPSJVAL2",58,0)
 I RETCODE(RIX)="" D 
"RTN","BPSJVAL2",59,0)
 . S ZNOTE="** PHARMACY NAME - Missing/Invalid",RETCODE=3
"RTN","BPSJVAL2",60,0)
 I RETCODE(RIX)]"" S RETCODE(RIX)=": "_RETCODE(RIX)
"RTN","BPSJVAL2",61,0)
 S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",62,0)
 Q
"RTN","BPSJVAL2",63,0)
4 ; DEA Number - R
"RTN","BPSJVAL2",64,0)
 S ZNOTE="   DEA NUMBER - Required - VALID"
"RTN","BPSJVAL2",65,0)
 I RETCODE(RIX)="" D
"RTN","BPSJVAL2",66,0)
 . S ZNOTE="** DEA NUMBER - Missing/Invalid",RETCODE=4
"RTN","BPSJVAL2",67,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",68,0)
 Q
"RTN","BPSJVAL2",69,0)
5 ; Hour of Operation
"RTN","BPSJVAL2",70,0)
 S ZNOTE="   HOURS OF OPERATION - VALID"
"RTN","BPSJVAL2",71,0)
 Q
"RTN","BPSJVAL2",72,0)
6 ; Mailing Address - R
"RTN","BPSJVAL2",73,0)
 S ZNOTE=$$TRIMTAIL(RETCODE(RIX))
"RTN","BPSJVAL2",74,0)
 S VALDATA=($L($P(ZNOTE,CPS,1))<1)          ; Street address
"RTN","BPSJVAL2",75,0)
 S VALDATA=($L($P(ZNOTE,CPS,3))<1)+VALDATA  ; City
"RTN","BPSJVAL2",76,0)
 S VALDATA=($L($P(ZNOTE,CPS,4))<1)+VALDATA  ; State
"RTN","BPSJVAL2",77,0)
 S VALDATA=($L($P(ZNOTE,CPS,5))<1)+VALDATA  ; Zip
"RTN","BPSJVAL2",78,0)
 S ZNOTE="   MAILING ADDRESS - Required - VALID"
"RTN","BPSJVAL2",79,0)
 I VALDATA D
"RTN","BPSJVAL2",80,0)
 . S ZNOTE="** MAILING ADDRESS - Missing/Invalid",RETCODE=6
"RTN","BPSJVAL2",81,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",82,0)
 Q
"RTN","BPSJVAL2",83,0)
7 ; Remittance Address - R
"RTN","BPSJVAL2",84,0)
 S ZNOTE=$$TRIMTAIL(RETCODE(RIX))
"RTN","BPSJVAL2",85,0)
 S VALDATA=($L($P(ZNOTE,CPS,1))<1)          ; Street Address
"RTN","BPSJVAL2",86,0)
 S VALDATA=($L($P(ZNOTE,CPS,3))<1)+VALDATA  ; City
"RTN","BPSJVAL2",87,0)
 S VALDATA=($L($P(ZNOTE,CPS,4))<1)+VALDATA  ; State
"RTN","BPSJVAL2",88,0)
 S VALDATA=($L($P(ZNOTE,CPS,5))<1)+VALDATA  ; Zip
"RTN","BPSJVAL2",89,0)
 S ZNOTE="   REMITTANCE ADDRESS - Required - VALID"
"RTN","BPSJVAL2",90,0)
 I VALDATA D 
"RTN","BPSJVAL2",91,0)
 . S ZNOTE="** REMITTANCE ADDRESS - Missing/Invalid",RETCODE=7
"RTN","BPSJVAL2",92,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",93,0)
 Q
"RTN","BPSJVAL2",94,0)
8 ; Contact Name
"RTN","BPSJVAL2",95,0)
 S ZNOTE=$$TRIMTAIL(RETCODE(RIX))
"RTN","BPSJVAL2",96,0)
 S VALDATA=($L($P(ZNOTE,CPS,1))<1)  ; Surname
"RTN","BPSJVAL2",97,0)
 S ZNOTE="   CONTACT NAME - Required - VALID"
"RTN","BPSJVAL2",98,0)
 I VALDATA D
"RTN","BPSJVAL2",99,0)
 . S ZNOTE="** CONTACT NAME - Missing/Invalid",RETCODE=8
"RTN","BPSJVAL2",100,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",101,0)
 Q
"RTN","BPSJVAL2",102,0)
9 ; Contact Title
"RTN","BPSJVAL2",103,0)
 S ZNOTE="   CONTACT TITLE - VALID"
"RTN","BPSJVAL2",104,0)
 Q
"RTN","BPSJVAL2",105,0)
10 ; Contact means
"RTN","BPSJVAL2",106,0)
 S ZNOTE="   CONTACT MEANS - VALID"
"RTN","BPSJVAL2",107,0)
 ;S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",108,0)
 Q
"RTN","BPSJVAL2",109,0)
11 ; Alternate Contact Name
"RTN","BPSJVAL2",110,0)
 S ZNOTE=$$TRIMTAIL(RETCODE(RIX))
"RTN","BPSJVAL2",111,0)
 S VALDATA=($L($P(ZNOTE,CPS,1))<1)  ; Surname
"RTN","BPSJVAL2",112,0)
 S ZNOTE="   ALTERNATE CONTACT NAME - Required - VALID"
"RTN","BPSJVAL2",113,0)
 I VALDATA D
"RTN","BPSJVAL2",114,0)
 . S ZNOTE="** ALTERNATE CONTACT NAME - Missing/Invalid",RETCODE=11
"RTN","BPSJVAL2",115,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",116,0)
 Q
"RTN","BPSJVAL2",117,0)
12 ; Alternate Contact Title
"RTN","BPSJVAL2",118,0)
 S ZNOTE="   ALTERNATE CONTACT TITLE - VALID"
"RTN","BPSJVAL2",119,0)
 Q
"RTN","BPSJVAL2",120,0)
13 ; Alternate Contact means
"RTN","BPSJVAL2",121,0)
 S ZNOTE="   ALTERNATE CONTACT MEANS - VALID"
"RTN","BPSJVAL2",122,0)
 Q
"RTN","BPSJVAL2",123,0)
14 ; Lead Pharmacist Name - R
"RTN","BPSJVAL2",124,0)
 S ZNOTE=$$TRIMTAIL(RETCODE(RIX))
"RTN","BPSJVAL2",125,0)
 S VALDATA=($L($P(ZNOTE,CPS,1))<1)  ; Surname
"RTN","BPSJVAL2",126,0)
 S ZNOTE="   LEAD PHARMACIST NAME - Required - VALID"
"RTN","BPSJVAL2",127,0)
 I VALDATA D
"RTN","BPSJVAL2",128,0)
 . S ZNOTE="** LEAD PHARMACIST NAME - Missing/Invalid",RETCODE=14
"RTN","BPSJVAL2",129,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",130,0)
 Q
"RTN","BPSJVAL2",131,0)
15 ; Lead Pharmacist Title
"RTN","BPSJVAL2",132,0)
 S ZNOTE="   LEAD PHARMACIST TITLE - VALID"
"RTN","BPSJVAL2",133,0)
 Q
"RTN","BPSJVAL2",134,0)
16 ; Lead Pharmacist License Number
"RTN","BPSJVAL2",135,0)
 S ZNOTE="   LEAD PHARMACIST LICENSE NUMBER - VALID"
"RTN","BPSJVAL2",136,0)
 Q
"RTN","BPSJVAL2",137,0)
17 ; NPI Number - C (R - AFTER DDD)
"RTN","BPSJVAL2",138,0)
 S ZNOTE="   NPI NUMBER - Required - VALID "
"RTN","BPSJVAL2",139,0)
 I RETCODE(RIX)="" D
"RTN","BPSJVAL2",140,0)
 . I BPSJDDD=0 D
"RTN","BPSJVAL2",141,0)
 . . I '$D(RETCODE(2)) S ZNOTE="   NPI NUMBER - Warning NPI NUMBER Missing " Q
"RTN","BPSJVAL2",142,0)
 . . S ZNOTE="** NPI NUMBER - NPI OR NCPDP - Missing/Invalid" S RETCODE=17
"RTN","BPSJVAL2",143,0)
 . I BPSJDDD>0 D
"RTN","BPSJVAL2",144,0)
 . . S ZNOTE="** NPI NUMBER - Missing/Invalid" S RETCODE=17
"RTN","BPSJVAL2",145,0)
 . S RETCODE(RIX)=ZNOTE_RETCODE(RIX)
"RTN","BPSJVAL2",146,0)
 Q
"RTN","BPSJVAL2",147,0)
 ;
"RTN","BPSJVAL2",148,0)
TRIMTAIL(INSTR) ;
"RTN","BPSJVAL2",149,0)
 N OUTSTR,CHR
"RTN","BPSJVAL2",150,0)
 ;
"RTN","BPSJVAL2",151,0)
 I $G(INSTR)="" Q ""   ; quit if nothing there
"RTN","BPSJVAL2",152,0)
 ;
"RTN","BPSJVAL2",153,0)
 S INSTR=$RE(INSTR)
"RTN","BPSJVAL2",154,0)
 S CHR=$E($TR(INSTR,CPS_REP))
"RTN","BPSJVAL2",155,0)
 I CHR]"" Q $RE($P(INSTR,CHR,2,200))_CHR
"RTN","BPSJVAL2",156,0)
 Q ""
"RTN","BPSJZRP")
0^9^B23528734^B23404723
"RTN","BPSJZRP",1,0)
BPSJZRP ;BHAM ISC/LJF - HL7 Registration ZRP Message ;21-NOV-2003
"RTN","BPSJZRP",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSJZRP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSJZRP",4,0)
 ;
"RTN","BPSJZRP",5,0)
 Q
"RTN","BPSJZRP",6,0)
 ;
"RTN","BPSJZRP",7,0)
EN(HL,PHIX,ZRP,NPI,NCP) ;
"RTN","BPSJZRP",8,0)
 ; ZRP array contains pharmacy registration info
"RTN","BPSJZRP",9,0)
 N ZRPS,FS,CPS,REP,NDZRO,NDHRS,NDREM,NDREP,NDREP1,NDADD,STATE
"RTN","BPSJZRP",10,0)
 N VAIX1,VAIX2,VAIXLP,VATLE,CNF,MSGCNT,TCH
"RTN","BPSJZRP",11,0)
 ;
"RTN","BPSJZRP",12,0)
 ; Quit if no Pharmacy index provided
"RTN","BPSJZRP",13,0)
 I '$G(PHIX) Q
"RTN","BPSJZRP",14,0)
 ;
"RTN","BPSJZRP",15,0)
 K ZRP S ZRPS=""
"RTN","BPSJZRP",16,0)
 ;
"RTN","BPSJZRP",17,0)
 ; Set HL7 Delimiters - use standard defaults if none provided
"RTN","BPSJZRP",18,0)
 S FS=$G(HL("FS")) I FS="" S FS="|"
"RTN","BPSJZRP",19,0)
 S CPS=$E($G(HL("ECH"))) I CPS="" S CPS="^"
"RTN","BPSJZRP",20,0)
 S REP=$E($G(HL("ECH")),2) I REP="" S REP="~"
"RTN","BPSJZRP",21,0)
 ;
"RTN","BPSJZRP",22,0)
 S NDZRO=$G(^BPS(9002313.56,PHIX,0))
"RTN","BPSJZRP",23,0)
 S NDREM=$G(^BPS(9002313.56,PHIX,"REMIT"))
"RTN","BPSJZRP",24,0)
 S NDREP=$G(^BPS(9002313.56,PHIX,"REP"))
"RTN","BPSJZRP",25,0)
 S NDREP1=$G(^BPS(9002313.56,PHIX,"REP1"))
"RTN","BPSJZRP",26,0)
 S NDADD=$G(^BPS(9002313.56,PHIX,"ADDR"))
"RTN","BPSJZRP",27,0)
 ;
"RTN","BPSJZRP",28,0)
 F ZRP=1:1:17 S ZRP(ZRP)="" ;Initialize
"RTN","BPSJZRP",29,0)
 S (ZRP(2),NCP)=$P(NDZRO,U,2)     ;NCPDP #
"RTN","BPSJZRP",30,0)
 S ZRP(3)=$P(NDZRO,U)       ;NAME
"RTN","BPSJZRP",31,0)
 S ZRP(4)=$P(NDZRO,U,3)     ;DEFAULT DEA #
"RTN","BPSJZRP",32,0)
 ;
"RTN","BPSJZRP",33,0)
 S ZRP(5)=$$OPHOURS(PHIX)
"RTN","BPSJZRP",34,0)
 ;
"RTN","BPSJZRP",35,0)
 I $L($P(NDADD,U,8)) S $P(ZRPS,CPS,1)=$P(NDADD,U,8)  ;SITE ADDRESS NAME
"RTN","BPSJZRP",36,0)
 I $L($P(NDADD,U,1)) S $P(ZRPS,CPS,1)=$P(ZRPS,CPS,1)_" "_$P(NDADD,U,1)  ;SITE ADDRESS 1
"RTN","BPSJZRP",37,0)
 I $L($P(NDADD,U,2)) S $P(ZRPS,CPS,2)=$P(NDADD,U,2)  ;SITE ADDRESS 2
"RTN","BPSJZRP",38,0)
 I $L($P(NDADD,U,3)) S $P(ZRPS,CPS,3)=$P(NDADD,U,3)  ;CITY
"RTN","BPSJZRP",39,0)
 I $L($P(NDADD,U,4)) S STATE=$P(NDADD,U,4) I STATE D  ; State
"RTN","BPSJZRP",40,0)
 . S STATE=$P($G(^DIC(5,STATE,0)),U,2)
"RTN","BPSJZRP",41,0)
 . I STATE]"" S $P(ZRPS,CPS,4)=STATE
"RTN","BPSJZRP",42,0)
 I $L($P(NDADD,U,5)) S $P(ZRPS,CPS,5)=$P(NDADD,U,5)  ;ZIP
"RTN","BPSJZRP",43,0)
 I ZRPS]"" S ZRP(6)=ZRPS,ZRPS=""
"RTN","BPSJZRP",44,0)
 ;
"RTN","BPSJZRP",45,0)
 I $L($P(NDREM,U,1)) S $P(ZRPS,CPS,1)=$P(NDREM,U,1)   ;REMITTANCE ADDRESS NAME
"RTN","BPSJZRP",46,0)
 I $L($P(NDREM,U,2)) S $P(ZRPS,CPS,1)=$P(ZRPS,CPS,1)_" "_$P(NDREM,U,2)  ;REMIT ADDRESS LINE 1
"RTN","BPSJZRP",47,0)
 I $L($P(NDREM,U,3)) S $P(ZRPS,CPS,2)=$P(NDREM,U,3)   ;REMIT ADDRESS LINE 2
"RTN","BPSJZRP",48,0)
 I $L($P(NDREM,U,6)) S $P(ZRPS,CPS,3)=$P(NDREM,U,6)   ;CITY
"RTN","BPSJZRP",49,0)
 I $L($P(NDREM,U,7)) S STATE=$P(NDREM,U,7) I STATE D  ;State
"RTN","BPSJZRP",50,0)
 . S STATE=$P($G(^DIC(5,STATE,0)),U,2)
"RTN","BPSJZRP",51,0)
 . I STATE]"" S $P(ZRPS,CPS,4)=STATE
"RTN","BPSJZRP",52,0)
 I $L($P(NDREM,U,8)) S $P(ZRPS,CPS,5)=$P(NDREM,U,8)  ;ZIP
"RTN","BPSJZRP",53,0)
 I ZRPS]"" S ZRP(7)=ZRPS,ZRPS=""
"RTN","BPSJZRP",54,0)
 ;
"RTN","BPSJZRP",55,0)
 ; Load the Name and Means Fields
"RTN","BPSJZRP",56,0)
 S VAIX1=$P(NDREP,U,3)
"RTN","BPSJZRP",57,0)
 S VAIX2=$P(NDREP,U,4)
"RTN","BPSJZRP",58,0)
 S VAIXLP=$P(NDREP,U,5)
"RTN","BPSJZRP",59,0)
 ;
"RTN","BPSJZRP",60,0)
 ; Contact
"RTN","BPSJZRP",61,0)
 I $G(VAIX1) S VATLE="" D
"RTN","BPSJZRP",62,0)
 . S CNF=$$VA200NM^BPSJUTL(VAIX1,.VATLE,.HL) I CNF]"" S ZRP(8)=CNF
"RTN","BPSJZRP",63,0)
 . I VATLE]"" S ZRP(9)=VATLE
"RTN","BPSJZRP",64,0)
 . S CNF=$$VA20013^BPSJUTL(VAIX1,.HL) I CNF]"" S ZRP(10)=CNF
"RTN","BPSJZRP",65,0)
 ;
"RTN","BPSJZRP",66,0)
 ; Alternate Contact
"RTN","BPSJZRP",67,0)
 I $G(VAIX2) S VATLE="" D
"RTN","BPSJZRP",68,0)
 . S CNF=$$VA200NM^BPSJUTL(VAIX2,.VATLE,.HL) I CNF]"" S ZRP(11)=CNF
"RTN","BPSJZRP",69,0)
 . I VATLE]"" S ZRP(12)=VATLE
"RTN","BPSJZRP",70,0)
 . S CNF=$$VA20013^BPSJUTL(VAIX2,.HL) I CNF]"" S ZRP(13)=CNF
"RTN","BPSJZRP",71,0)
 ;
"RTN","BPSJZRP",72,0)
 ; Lead Pharmacist
"RTN","BPSJZRP",73,0)
 I $G(VAIXLP) S VATLE="" D
"RTN","BPSJZRP",74,0)
 . S CNF=$$VA200NM^BPSJUTL(VAIXLP,.VATLE,.HL) I CNF]"" S ZRP(14)=CNF
"RTN","BPSJZRP",75,0)
 . I VATLE]"" S ZRP(15)=VATLE
"RTN","BPSJZRP",76,0)
 ;
"RTN","BPSJZRP",77,0)
 ; Pharmacist's License
"RTN","BPSJZRP",78,0)
 I $L($P(NDREP1,U)) S ZRP(16)=$P(NDREP1,U)
"RTN","BPSJZRP",79,0)
 ;
"RTN","BPSJZRP",80,0)
 ; NPI
"RTN","BPSJZRP",81,0)
 S ZRP(17)=$G(NPI)
"RTN","BPSJZRP",82,0)
 ;
"RTN","BPSJZRP",83,0)
 ; Encode special chars. Add Field separators.
"RTN","BPSJZRP",84,0)
 S TCH("\")="\E\",TCH("&")="\T\",TCH("|")="\F\"
"RTN","BPSJZRP",85,0)
 S (ZRPS(5),ZRPS(10),ZRPS(13))=1  ;Fields with HL7 repetion chars
"RTN","BPSJZRP",86,0)
 F ZRP=17:-1:1 D  S ZRP(ZRP)=$$ENCODE^BPSJUTL(ZRP(ZRP),.TCH)_FS
"RTN","BPSJZRP",87,0)
 . I $G(ZRPS(ZRP)) K TCH("~")  ; don't convert repetion chars
"RTN","BPSJZRP",88,0)
 . E  S TCH("~")="\R\"         ; ok to convert repetion chars
"RTN","BPSJZRP",89,0)
 S ZRP="ZRP|"
"RTN","BPSJZRP",90,0)
 ;
"RTN","BPSJZRP",91,0)
 Q
"RTN","BPSJZRP",92,0)
 ;
"RTN","BPSJZRP",93,0)
OPHOURS(PHINDEX) ; Operational Hours
"RTN","BPSJZRP",94,0)
 N DAY,DIX,OPH,RETURN,WEEK,OPDAY,OPHOUR
"RTN","BPSJZRP",95,0)
 N CLH
"RTN","BPSJZRP",96,0)
 ;
"RTN","BPSJZRP",97,0)
 S PHINDEX=+$G(PHINDEX),RETURN=""
"RTN","BPSJZRP",98,0)
 S WEEK="SUN^MON^TUE^WED^THU^FRI^SAT^"
"RTN","BPSJZRP",99,0)
 S OPH=$G(^BPS(9002313.56,PHINDEX,"TOPEN"))
"RTN","BPSJZRP",100,0)
 S CLH=$G(^BPS(9002313.56,PHINDEX,"TCLOSE"))
"RTN","BPSJZRP",101,0)
 I $G(CPS)="" S CPS=$E($G(HL("ECH"))) I CPS="" S CPS="^"
"RTN","BPSJZRP",102,0)
 I $G(REP)="" S REP=$E($G(HL("ECH")),2) I REP="" S REP="~"
"RTN","BPSJZRP",103,0)
 I OPH]"" F DAY=1:1:7 I $P(OPH,U,DAY)]"" D
"RTN","BPSJZRP",104,0)
 . I RETURN]"" S RETURN=RETURN_REP
"RTN","BPSJZRP",105,0)
 . S RETURN=RETURN_$P(WEEK,U,DAY)_CPS_$P(WEEK,U,DAY)_CPS
"RTN","BPSJZRP",106,0)
 . S OPHOUR=$$HOURS($P(OPH,U,DAY)) I OPHOUR<0 S OPHOUR="0000"
"RTN","BPSJZRP",107,0)
 . S RETURN=RETURN_OPHOUR_CPS
"RTN","BPSJZRP",108,0)
 . S OPHOUR=$$HOURS($P(CLH,U,DAY)) I OPHOUR<0 S OPHOUR="2359"
"RTN","BPSJZRP",109,0)
 . S RETURN=RETURN_OPHOUR
"RTN","BPSJZRP",110,0)
 I RETURN]"" Q RETURN
"RTN","BPSJZRP",111,0)
 ;
"RTN","BPSJZRP",112,0)
 S WEEK=U_WEEK
"RTN","BPSJZRP",113,0)
 S OPH=$G(^BPS(9002313.56,PHINDEX,"HOURS"))
"RTN","BPSJZRP",114,0)
 S OPDAY=$E($P(OPH,U,2),1,3)
"RTN","BPSJZRP",115,0)
 ;-if start day unrecognizable force to SUN
"RTN","BPSJZRP",116,0)
 I WEEK[(U_OPDAY_U) S RETURN=OPDAY_CPS
"RTN","BPSJZRP",117,0)
 E  S RETURN="SUN"_CPS
"RTN","BPSJZRP",118,0)
 S OPDAY=$E($P(OPH,U,3),1,3)
"RTN","BPSJZRP",119,0)
 ;-if end day unrecognizable force to SAT
"RTN","BPSJZRP",120,0)
 I WEEK[(U_OPDAY_U) S RETURN=RETURN_OPDAY_CPS
"RTN","BPSJZRP",121,0)
 E  S RETURN=RETURN_"SAT"_CPS
"RTN","BPSJZRP",122,0)
 ;-if start time unrecognizable force to 0000
"RTN","BPSJZRP",123,0)
 S OPHOUR=$$HOURS($E($P(OPH,U,4),1,4)) I OPHOUR<0 S OPHOUR="0000"
"RTN","BPSJZRP",124,0)
 ;-if end time unrecognizable force to 2359
"RTN","BPSJZRP",125,0)
 S OPDAY=$$HOURS($E($P(OPH,U,5),1,4)) I OPDAY<0 S OPDAY="2359"
"RTN","BPSJZRP",126,0)
 ;-if end time is less than start time force 0000 to 2359
"RTN","BPSJZRP",127,0)
 I OPDAY>OPHOUR S RETURN=RETURN_OPHOUR_CPS_OPDAY
"RTN","BPSJZRP",128,0)
 E  S RETURN=RETURN_"0000"_CPS_"2359"
"RTN","BPSJZRP",129,0)
 Q RETURN
"RTN","BPSJZRP",130,0)
 ;
"RTN","BPSJZRP",131,0)
HOURS(MIN) ; Validate time 0000 - 2359
"RTN","BPSJZRP",132,0)
 N HRS
"RTN","BPSJZRP",133,0)
 S HRS=$E(MIN,1,2),$E(MIN,1,2)=""
"RTN","BPSJZRP",134,0)
 I $L(HRS)=2,HRS>-1,HRS<24,$L(MIN)=2,MIN>-1,MIN<60 Q HRS_MIN
"RTN","BPSJZRP",135,0)
 Q -1
"RTN","BPSNCPDP")
0^1^B55688274^B54179108
"RTN","BPSNCPDP",1,0)
BPSNCPDP ;BHAM ISC/LJE - API to submit a claim to ECME ;8/01/03
"RTN","BPSNCPDP",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,4,2**;JUN 2004;Build 12
"RTN","BPSNCPDP",3,0)
 ;
"RTN","BPSNCPDP",4,0)
 ; For comments regarding this API, see routine BPSNCPD1.
"RTN","BPSNCPDP",5,0)
 ;   They were moved to BPSNCPD1 due to size constraints
"RTN","BPSNCPDP",6,0)
 ; Reference to ^PSRX supported by DBIA 1977
"RTN","BPSNCPDP",7,0)
 ;    
"RTN","BPSNCPDP",8,0)
EN(BRXIEN,BFILL,BFILLDAT,BWHERE,BILLNDC,REVREAS,DURREC,BPOVRIEN) ;
"RTN","BPSNCPDP",9,0)
EN1 N DFN,PNAME,BRX,ARRAY,MOREDATA,SITE,WFLG,OLDRESP
"RTN","BPSNCPDP",10,0)
 N %,%I,%H,X,TODAY
"RTN","BPSNCPDP",11,0)
 N QUIT,CERTIFY,CERTIEN,PAYERSH
"RTN","BPSNCPDP",12,0)
 N REBILL,REVONLY,CLMSTAT,RESPONSE,BPSTART,IB,RESP
"RTN","BPSNCPDP",13,0)
 ;
"RTN","BPSNCPDP",14,0)
 ; Default variables
"RTN","BPSNCPDP",15,0)
 S RESPONSE="",CLMSTAT=""
"RTN","BPSNCPDP",16,0)
 ;
"RTN","BPSNCPDP",17,0)
 ; Check for missing parameters
"RTN","BPSNCPDP",18,0)
 I '$G(BRXIEN) S CLMSTAT="Prescription IEN parameter missing",RESPONSE=5 G END
"RTN","BPSNCPDP",19,0)
 I $G(BWHERE)="" S CLMSTAT="RX Action parameter missing",RESPONSE=5 G END
"RTN","BPSNCPDP",20,0)
 I '$G(BFILL) S BFILL=0
"RTN","BPSNCPDP",21,0)
 ;
"RTN","BPSNCPDP",22,0)
 ; Check that the prescription exists
"RTN","BPSNCPDP",23,0)
 I '$D(^PSRX(BRXIEN,0)) S CLMSTAT="Prescription does not exist",RESPONSE=5 G END
"RTN","BPSNCPDP",24,0)
 ;
"RTN","BPSNCPDP",25,0)
 ; Get the NDC if it was not passed in
"RTN","BPSNCPDP",26,0)
 I $G(BILLNDC)="" S BILLNDC=$$GETNDC^PSONDCUT(BRXIEN,BFILL)
"RTN","BPSNCPDP",27,0)
 ;
"RTN","BPSNCPDP",28,0)
 ; Patient Info
"RTN","BPSNCPDP",29,0)
 S DFN=$$GET1^DIQ(52,BRXIEN_",",2,"I"),PNAME=$$GET1^DIQ(2,DFN,.01)
"RTN","BPSNCPDP",30,0)
 ;
"RTN","BPSNCPDP",31,0)
 ; Get prescription number
"RTN","BPSNCPDP",32,0)
 S BRX=$P(^PSRX(BRXIEN,0),"^",1)
"RTN","BPSNCPDP",33,0)
 ;
"RTN","BPSNCPDP",34,0)
 ; Set write flag
"RTN","BPSNCPDP",35,0)
 S WFLG=1
"RTN","BPSNCPDP",36,0)
 I ",ARES,AREV,CRLB,CRLR,CRLX,DDED,DE,EREV,HLD,PC,PE,PL,RS,"[(","_BWHERE_",") S WFLG=0
"RTN","BPSNCPDP",37,0)
 ;
"RTN","BPSNCPDP",38,0)
 ; Get status of previously submitted claim and set rebill/revonly flags
"RTN","BPSNCPDP",39,0)
 S (REBILL,REVONLY)=0
"RTN","BPSNCPDP",40,0)
 S OLDRESP=$P($$STATUS^BPSOSRX(BRXIEN,BFILL,1),U,1)
"RTN","BPSNCPDP",41,0)
 I ",AREV,CRLR,CRLX,DC,DDED,DE,EREV,HLD,RS,"[(","_BWHERE_",") S REVONLY=1
"RTN","BPSNCPDP",42,0)
 E  I OLDRESP="E PAYABLE"!(OLDRESP="E DUPLICATE") S REBILL=1
"RTN","BPSNCPDP",43,0)
 ;
"RTN","BPSNCPDP",44,0)
 ; Get Site info and check if the site has ECME turned on and an NPI
"RTN","BPSNCPDP",45,0)
 ;   after drop dead date.  Do not check for reversals/rebill as these
"RTN","BPSNCPDP",46,0)
 ;   need to be processed for the old site
"RTN","BPSNCPDP",47,0)
 I 'BFILL S SITE=$$GET1^DIQ(52,BRXIEN,20,"I")
"RTN","BPSNCPDP",48,0)
 I BFILL S SITE=$$GET1^DIQ(52.1,BFILL_","_BRXIEN,8,"I")
"RTN","BPSNCPDP",49,0)
 I 'REVONLY,'REBILL D  I RESPONSE=1 G END
"RTN","BPSNCPDP",50,0)
 . I '$G(SITE) S CLMSTAT="No Site Information",RESPONSE=1 Q
"RTN","BPSNCPDP",51,0)
 . I '$$ECMEON^BPSUTIL(SITE) S CLMSTAT="ECME switch is not on for the site",RESPONSE=1 Q
"RTN","BPSNCPDP",52,0)
 . I $$NPIREQ^BPSNPI(DT),$$DIVNPI^BPSBUTL(SITE)="" S CLMSTAT="NPI not available for the site",RESPONSE=1 Q
"RTN","BPSNCPDP",53,0)
 ;
"RTN","BPSNCPDP",54,0)
 ; In Progress/Stranded claims check
"RTN","BPSNCPDP",55,0)
 I OLDRESP["IN PROGRESS" D  G END
"RTN","BPSNCPDP",56,0)
 . S CLMSTAT="Previous request is IN PROGRESS.  It may need to be unstranded.",RESPONSE=4
"RTN","BPSNCPDP",57,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",58,0)
 . ; If not OP, then send an email to the OPECC
"RTN","BPSNCPDP",59,0)
 . I ",AREV,BB,ERES,EREV,"'[(","_BWHERE_",") D BULL^BPSNCPD1(BRXIEN,BFILL,$G(SITE),$G(DFN),$G(PNAME))
"RTN","BPSNCPDP",60,0)
 ;
"RTN","BPSNCPDP",61,0)
 ; Backbilling check
"RTN","BPSNCPDP",62,0)
 I BWHERE="BB",OLDRESP'="" D  G END
"RTN","BPSNCPDP",63,0)
 . S CLMSTAT="Previously billed through ECME: "_OLDRESP,RESPONSE=1
"RTN","BPSNCPDP",64,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",65,0)
 ;
"RTN","BPSNCPDP",66,0)
 ; Do not reverse if the prescription was not previously billed through ECME
"RTN","BPSNCPDP",67,0)
 I OLDRESP="",(",AREV,CRLR,CRLX,DC,DDED,DE,EREV,HLD,RS,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",68,0)
 . S CLMSTAT="Prescription not previously billed through ECME.  Cannot Reverse claim.",RESPONSE=1
"RTN","BPSNCPDP",69,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",70,0)
 ;
"RTN","BPSNCPDP",71,0)
 ; If returning to stock or deleting and the previous claim was not paid, then no reversal is needed
"RTN","BPSNCPDP",72,0)
 ;   so close the prescription and quit
"RTN","BPSNCPDP",73,0)
 I OLDRESP'["E PAYABLE",OLDRESP'["E REVERSAL REJECTED",(",RS,DE,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",74,0)
 . D CLOSE2^BPSBUTL(BRXIEN,BFILL,BWHERE)
"RTN","BPSNCPDP",75,0)
 . S CLMSTAT="Claim was not payable so it has been closed.  No ECME claim created.",RESPONSE=3
"RTN","BPSNCPDP",76,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",77,0)
 ;
"RTN","BPSNCPDP",78,0)
 ; Do not reverse if the claim is not E PAYABLE
"RTN","BPSNCPDP",79,0)
 I OLDRESP'["E PAYABLE",OLDRESP'["E DUPLICATE",(",AREV,CRLR,CRLX,DC,DDED,HLD,"[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",80,0)
 . S CLMSTAT="Claim has status "_OLDRESP_".  Not reversed.",RESPONSE=1
"RTN","BPSNCPDP",81,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",82,0)
 ;
"RTN","BPSNCPDP",83,0)
 ; EREV can be re-reversed if the previous submission is Payable or Rejected Revesal
"RTN","BPSNCPDP",84,0)
 I BWHERE="EREV",",E PAYABLE,E DUPLICATE,E REVERSAL REJECTED,E REVERSAL STRANDED,"'[(","_OLDRESP_",") D  G END
"RTN","BPSNCPDP",85,0)
 . S CLMSTAT="Claim has status "_OLDRESP_".  Not reversed.",RESPONSE=1
"RTN","BPSNCPDP",86,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",87,0)
 ;
"RTN","BPSNCPDP",88,0)
 ; Make sure fill date is not in the future or empty
"RTN","BPSNCPDP",89,0)
 D NOW^%DTC
"RTN","BPSNCPDP",90,0)
 S TODAY=$P(%,".",1)
"RTN","BPSNCPDP",91,0)
 I '$G(BFILLDAT)!($G(BFILLDAT)>TODAY) S BFILLDAT=TODAY
"RTN","BPSNCPDP",92,0)
 ;
"RTN","BPSNCPDP",93,0)
 ; Store needed parameters into MOREDATA
"RTN","BPSNCPDP",94,0)
 ; In instances where duz is null set it equal to .5 (postmaster)
"RTN","BPSNCPDP",95,0)
 S MOREDATA("USER")=$S('DUZ:.5,1:DUZ)
"RTN","BPSNCPDP",96,0)
 S MOREDATA("RX ACTION")=$G(BWHERE)
"RTN","BPSNCPDP",97,0)
 S MOREDATA("DATE OF SERVICE")=$P($G(BFILLDAT),".",1)
"RTN","BPSNCPDP",98,0)
 S MOREDATA("REVERSAL REASON")=$S($G(REVREAS)="":"UNKNOWN",1:$E($G(REVREAS),1,40))
"RTN","BPSNCPDP",99,0)
 I $G(DURREC)]"" S MOREDATA("DUR",1,0)=DURREC
"RTN","BPSNCPDP",100,0)
 I $G(BPOVRIEN)]"" S MOREDATA("BPOVRIEN")=BPOVRIEN
"RTN","BPSNCPDP",101,0)
 ;
"RTN","BPSNCPDP",102,0)
 ; Do a reversal for the appropriate actions
"RTN","BPSNCPDP",103,0)
 I ",AREV,CRLR,CRLX,DC,DDED,DE,EREV,HLD,RS,"[(","_BWHERE_",") D  G STATUS:RESPONSE=0,END:RESPONSE=4
"RTN","BPSNCPDP",104,0)
 . ; If override flag is set, prompt for override values - MUST be commented out for any release.
"RTN","BPSNCPDP",105,0)
 . ;I $L($T(CHECK^ZZGIZOV1))>0,$$CHECK^ZZGIZOV1 D GETOVER^ZZGIZOV1(BRXIEN,BFILL,OLDRESP,BWHERE,"R")
"RTN","BPSNCPDP",106,0)
 . D LOG(DT_" Before Submit of Reversal")
"RTN","BPSNCPDP",107,0)
 . S BPSTART=$$STTM()
"RTN","BPSNCPDP",108,0)
 . S RESP=$$UNCLAIM^BPSOSRX(BRXIEN,BFILL,.MOREDATA)
"RTN","BPSNCPDP",109,0)
 . D LOG("After Submit of Reversal. Return Value: "_RESP)
"RTN","BPSNCPDP",110,0)
 . I RESP=1 D
"RTN","BPSNCPDP",111,0)
 .. S RESPONSE=0,CLMSTAT="Reversing prescription "_BRX_"."
"RTN","BPSNCPDP",112,0)
 .. I WFLG W !,CLMSTAT H 2
"RTN","BPSNCPDP",113,0)
 . I RESP=0 D
"RTN","BPSNCPDP",114,0)
 .. S RESPONSE=4,CLMSTAT="No claim submission made.  Unable to queue reversal."
"RTN","BPSNCPDP",115,0)
 .. D LOG(CLMSTAT)
"RTN","BPSNCPDP",116,0)
 .. I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",117,0)
 .. L -^BPST
"RTN","BPSNCPDP",118,0)
 ;
"RTN","BPSNCPDP",119,0)
 ; Can not resubmit reversed claims unless they are accepted
"RTN","BPSNCPDP",120,0)
 I OLDRESP]"",OLDRESP["E REVERSAL",OLDRESP'="E REVERSAL ACCEPTED" D  G END
"RTN","BPSNCPDP",121,0)
 . S CLMSTAT="Can not resubmit a rejected or stranded reversal",RESPONSE=1
"RTN","BPSNCPDP",122,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",123,0)
 ;
"RTN","BPSNCPDP",124,0)
 ; Some actions require a paid claim (they will not do a reversal/resubmit)
"RTN","BPSNCPDP",125,0)
 I OLDRESP]"",OLDRESP'="E REVERSAL ACCEPTED",OLDRESP'="E REJECTED",(",CRLB,ED,ERES,RL,RRL,"'[(","_BWHERE_",")) D  G END
"RTN","BPSNCPDP",126,0)
 . S CLMSTAT="Previously billed through ECME: "_OLDRESP,RESPONSE=1
"RTN","BPSNCPDP",127,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",128,0)
 ;
"RTN","BPSNCPDP",129,0)
 ; Certification Testing
"RTN","BPSNCPDP",130,0)
 S (QUIT,CERTIFY)=0
"RTN","BPSNCPDP",131,0)
 I ^BPS(9002313.99,1,"CERTIFIER")=DUZ D  I QUIT S CLMSTAT="User exited from certification questions",RESPONSE=1 G END
"RTN","BPSNCPDP",132,0)
 . S CERTIFY=1
"RTN","BPSNCPDP",133,0)
C1 . R !,"ENTER NDC: ",BILLNDC:120 S:BILLNDC="^" QUIT=1 Q:QUIT  I BILLNDC="" G C1
"RTN","BPSNCPDP",134,0)
C2 . R !,"PAYER SHEET: ",PAYERSH:120 I '$D(^BPSF(9002313.92,"B",PAYERSH)) S:PAYERSH="^" QUIT=1 Q:QUIT  W !,"INVALID SHEET" G C2
"RTN","BPSNCPDP",135,0)
C3 . R !,"CERTIFICATION ENTRY: ",CERTIEN:120 I '$D(^BPS(9002313.31,CERTIEN)) S:CERTIEN="^" QUIT=1 Q:QUIT  W !,"INVALID IEN" G C3
"RTN","BPSNCPDP",136,0)
 I WFLG W !!
"RTN","BPSNCPDP",137,0)
 ;
"RTN","BPSNCPDP",138,0)
 ; Build array with prescription data
"RTN","BPSNCPDP",139,0)
 D STARRAY^BPSNCPD1(BRXIEN,BFILL,BWHERE,.ARRAY)
"RTN","BPSNCPDP",140,0)
 ;
"RTN","BPSNCPDP",141,0)
 ; Do IB billing determination and check response
"RTN","BPSNCPDP",142,0)
 ; If IB=2, then not billable, so write messages
"RTN","BPSNCPDP",143,0)
 S IB=0
"RTN","BPSNCPDP",144,0)
 D EN^BPSNCPD2
"RTN","BPSNCPDP",145,0)
 I IB=2 D  G END
"RTN","BPSNCPDP",146,0)
 . S RESPONSE=2
"RTN","BPSNCPDP",147,0)
 . S CLMSTAT=$P(MOREDATA("BILL"),"^",2)
"RTN","BPSNCPDP",148,0)
 . I OLDRESP]"" D LOG(CLMSTAT)
"RTN","BPSNCPDP",149,0)
 ;
"RTN","BPSNCPDP",150,0)
 ; Check for missing data (Will IB billing determination catch this?)
"RTN","BPSNCPDP",151,0)
 I $D(MOREDATA("IBDATA",1,1)),$P(MOREDATA("IBDATA",1,1),"^",1)="" D  G END
"RTN","BPSNCPDP",152,0)
 . S RESPONSE=2,CLMSTAT="Information missing from IB data."
"RTN","BPSNCPDP",153,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",154,0)
 ;
"RTN","BPSNCPDP",155,0)
 ; Check for missing/invalid payer sheets (I think IB billing determination will catch this)
"RTN","BPSNCPDP",156,0)
 I $P($G(MOREDATA("IBDATA",1,1)),"^",4)="" D  G END
"RTN","BPSNCPDP",157,0)
 . S RESPONSE=2,CLMSTAT="Invalid/missing payer sheet from IB data."
"RTN","BPSNCPDP",158,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",159,0)
 ;
"RTN","BPSNCPDP",160,0)
 ; Check if IB says to bill
"RTN","BPSNCPDP",161,0)
 I '$G(MOREDATA("BILL")) D  G END
"RTN","BPSNCPDP",162,0)
 . S RESPONSE=2
"RTN","BPSNCPDP",163,0)
 . S CLMSTAT="Flagged by IB to not 3rd Party Insurance bill through ECME."
"RTN","BPSNCPDP",164,0)
 . I WFLG W !,CLMSTAT,! H 2
"RTN","BPSNCPDP",165,0)
 ;
"RTN","BPSNCPDP",166,0)
 ; Log message to ECME log
"RTN","BPSNCPDP",167,0)
 D LOG(DT_" Before submit of claim")
"RTN","BPSNCPDP",168,0)
 ;
"RTN","BPSNCPDP",169,0)
 ; If override flag is set, prompt for override values - MUST be commented out for any release.
"RTN","BPSNCPDP",170,0)
 ;I $L($T(CHECK^ZZGIZOV1))>0,$$CHECK^ZZGIZOV1 D GETOVER^ZZGIZOV1(BRXIEN,BFILL,OLDRESP,BWHERE,"S")
"RTN","BPSNCPDP",171,0)
 ;
"RTN","BPSNCPDP",172,0)
 ; Get require data
"RTN","BPSNCPDP",173,0)
 S BPSTART=$$STTM()
"RTN","BPSNCPDP",174,0)
 ;
"RTN","BPSNCPDP",175,0)
 ; Submit claim and check result
"RTN","BPSNCPDP",176,0)
 S RESP=$$CLAIM^BPSOSRX(BRXIEN,BFILL,.MOREDATA)
"RTN","BPSNCPDP",177,0)
 D LOG("After Submit of Claim.  Return Value: "_RESP)
"RTN","BPSNCPDP",178,0)
 I RESP=1 D
"RTN","BPSNCPDP",179,0)
 . S RESPONSE=0
"RTN","BPSNCPDP",180,0)
 . S CLMSTAT="Prescription "_BRX_" successfully submitted to ECME for claim generation."
"RTN","BPSNCPDP",181,0)
 . I WFLG W !!,CLMSTAT
"RTN","BPSNCPDP",182,0)
 I RESP=0 D  G END
"RTN","BPSNCPDP",183,0)
 . S RESPONSE=4
"RTN","BPSNCPDP",184,0)
 . S CLMSTAT="No claim submission made.  Unable to queue claim submission."
"RTN","BPSNCPDP",185,0)
 . I WFLG W !!,CLMSTAT,!
"RTN","BPSNCPDP",186,0)
 . D LOG(CLMSTAT)
"RTN","BPSNCPDP",187,0)
 ;
"RTN","BPSNCPDP",188,0)
 ; Display status
"RTN","BPSNCPDP",189,0)
STATUS I 'WFLG H 1
"RTN","BPSNCPDP",190,0)
 E  D STATUS^BPSNCPD1(BRXIEN,BFILL,REBILL,REVONLY,BPSTART,BWHERE)
"RTN","BPSNCPDP",191,0)
 ;
"RTN","BPSNCPDP",192,0)
 ; Clean up and quit
"RTN","BPSNCPDP",193,0)
END K BRXIEN,BFILL,BFILLDAT,BWHERE,MOREDATA
"RTN","BPSNCPDP",194,0)
 S:'$D(RESPONSE) RESPONSE=1
"RTN","BPSNCPDP",195,0)
 Q RESPONSE_"^"_$G(CLMSTAT)
"RTN","BPSNCPDP",196,0)
 ;
"RTN","BPSNCPDP",197,0)
LOG(LOGMSG) ;
"RTN","BPSNCPDP",198,0)
 D LOG59^BPSOSL($T(+0)_" - "_LOGMSG,BRXIEN_"."_$E($TR($J("",4-$L(BFILL))," ","0")_BFILL,1,4)_1)
"RTN","BPSNCPDP",199,0)
 Q
"RTN","BPSNCPDP",200,0)
STTM() ;
"RTN","BPSNCPDP",201,0)
 N %,%H,%I
"RTN","BPSNCPDP",202,0)
 D NOW^%DTC
"RTN","BPSNCPDP",203,0)
 Q %
"RTN","BPSNPI")
0^11^B2822022^n/a
"RTN","BPSNPI",1,0)
BPSNPI ;BHAM ISC/DMB - NPI Drop Dead Date Checking ;04/19/2006
"RTN","BPSNPI",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**2**;JUN 2004;Build 12
"RTN","BPSNPI",3,0)
 ;
"RTN","BPSNPI",4,0)
 ; Reference to $$NPI^XUSNPI supported by IA4532
"RTN","BPSNPI",5,0)
 ;
"RTN","BPSNPI",6,0)
 ; Must call at an entry point  
"RTN","BPSNPI",7,0)
 Q
"RTN","BPSNPI",8,0)
 ;
"RTN","BPSNPI",9,0)
 ; NPIREQ - Extrinsic funtion that will return a flag indicating
"RTN","BPSNPI",10,0)
 ;          if the NPI 'drop dead date' has been passed.
"RTN","BPSNPI",11,0)
 ; Input
"RTN","BPSNPI",12,0)
 ;    BPSDT - Date to check (internal Fileman format)
"RTN","BPSNPI",13,0)
 ; Output
"RTN","BPSNPI",14,0)
 ;    1 - On or after the May 23, 2008 drop dead date
"RTN","BPSNPI",15,0)
 ;    0 - Prior to the May 23, 2008 drop dead date 
"RTN","BPSNPI",16,0)
NPIREQ(BPSDT) ; Check NPI drop dead date
"RTN","BPSNPI",17,0)
 N BPSCHKDT
"RTN","BPSNPI",18,0)
 S BPSCHKDT=3080523
"RTN","BPSNPI",19,0)
 Q $S(BPSDT<BPSCHKDT:0,1:1)
"RTN","BPSNPI",20,0)
 ;
"RTN","BPSNPI",21,0)
 ; NPI - Get NPI number
"RTN","BPSNPI",22,0)
 ; Input
"RTN","BPSNPI",23,0)
 ;   TYPE - Organization_ID, Individual_ID, or Pharmacy_ID
"RTN","BPSNPI",24,0)
 ;   IEN  - For Organization, IEN from Institution file (#4)
"RTN","BPSNPI",25,0)
 ;        - For Individual, IEN from New Person file (#200)
"RTN","BPSNPI",26,0)
 ;        - For Pharmacy, IEN from Outpatient Site file (#59)
"RTN","BPSNPI",27,0)
 ; Output - NPI for valid entry
"RTN","BPSNPI",28,0)
 ;        -  -1^Error Code if unable to get NPI
"RTN","BPSNPI",29,0)
NPI(TYPE,IEN) ;
"RTN","BPSNPI",30,0)
 N NPI
"RTN","BPSNPI",31,0)
 S TYPE=$G(TYPE)
"RTN","BPSNPI",32,0)
 I TYPE'="Organization_ID",TYPE'="Individual_ID",TYPE'="Pharmacy_ID" Q "-1^Invalid Type"
"RTN","BPSNPI",33,0)
 I '$G(IEN) Q "-1^Invalid IEN"
"RTN","BPSNPI",34,0)
 I TYPE="Pharmacy_ID" D
"RTN","BPSNPI",35,0)
 . K ^TMP($J,"BPS59")
"RTN","BPSNPI",36,0)
 . D PSS^PSO59(IEN,"","BPS59")
"RTN","BPSNPI",37,0)
 . S IEN=$P($G(^TMP($J,"BPS59",IEN,101)),U,1),TYPE="Organization_ID"
"RTN","BPSNPI",38,0)
 . K ^TMP($J,"BPS59")
"RTN","BPSNPI",39,0)
 I 'IEN Q "-1^Unable to determine Institution ID"
"RTN","BPSNPI",40,0)
 S NPI=$$NPI^XUSNPI(TYPE,IEN,DT)
"RTN","BPSNPI",41,0)
 I $P(NPI,U,1)<1 Q "-1^No NPI"
"RTN","BPSNPI",42,0)
 I $P(NPI,U,3)'="Active" Q "-1^Inactive NPI"
"RTN","BPSNPI",43,0)
 Q $P(NPI,U,1)
"RTN","BPSNPI",44,0)
 ;
"RTN","BPSNPI",45,0)
NPKEY(BPSNCP,BPSNPI,BPSAPI) ;
"RTN","BPSNPI",46,0)
 ; Determine primay key to use in MFE 4.1 for pharm registration.
"RTN","BPSNPI",47,0)
 ; Input
"RTN","BPSNPI",48,0)
 ;    BPSNCP  - ncpdp number for the pharmacy in file (#9002313.56,.02)
"RTN","BPSNPI",49,0)
 ;    BPSNPI - existing NPI for the pharmacy in file (#9002313.56,41.01)
"RTN","BPSNPI",50,0)
 ;    BPSAPI - current NPI returned from NPI^BPSNPI 
"RTN","BPSNPI",51,0)
 N BPSPKY
"RTN","BPSNPI",52,0)
 S BPSPKY=""
"RTN","BPSNPI",53,0)
 I $G(BPSNPI) S BPSPKY=BPSNPI
"RTN","BPSNPI",54,0)
 E  I $G(BPSNCP) S BPSPKY=BPSNCP
"RTN","BPSNPI",55,0)
 E  S BPSPKY=$G(BPSAPI)
"RTN","BPSNPI",56,0)
 Q BPSPKY
"RTN","BPSOSCC")
0^4^B48377531^B47709345
"RTN","BPSOSCC",1,0)
BPSOSCC ;BHAM ISC/FCS/DRS/DLF - Set up BPS() ;06/01/2004
"RTN","BPSOSCC",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSOSCC",3,0)
 ;
"RTN","BPSOSCC",4,0)
 ; Reference to $$NPI^XUSNPI supported by IA4532
"RTN","BPSOSCC",5,0)
 Q
"RTN","BPSOSCC",6,0)
GETINFO(DIALOUT,PATIEN,VSTIEN,PINS,INSIEN,VAINFO) ;EP;LJE;6/30/03 ADD VAINFO
"RTN","BPSOSCC",7,0)
 N XDATA,NRECIEN
"RTN","BPSOSCC",8,0)
 N PINSDA,PINSDA1,PINSTYPE S PINSDA=$P(PINS,",",2),PINSTYPE=$P(PINS,",")
"RTN","BPSOSCC",9,0)
 I PINSTYPE="PRVT"!(PINSTYPE="VA3PTY") S PINSDA1=$P(PINS,",",3) ; else PINSDA1 undef
"RTN","BPSOSCC",10,0)
 S BPS("VisitIEN")=VSTIEN
"RTN","BPSOSCC",11,0)
 S (VAINSDA,VAINSDA1)="" S VAINSDA=PINSDA,VAINSDA1=PINSDA1
"RTN","BPSOSCC",12,0)
 S BPS("Site","IEN")=DIALOUT
"RTN","BPSOSCC",13,0)
 S BPS("Site","Switch Type")=$$SWTYPE(DIALOUT)
"RTN","BPSOSCC",14,0)
 N PHARMACY,SITE,NPI
"RTN","BPSOSCC",15,0)
 D
"RTN","BPSOSCC",16,0)
 . N ABSBRXI S ABSBRXI=$O(RXILIST(""))
"RTN","BPSOSCC",17,0)
 . S PHARMACY=$P(^BPST(ABSBRXI,1),U,7)
"RTN","BPSOSCC",18,0)
 . S SITE=$P($G(^BPST(ABSBRXI,1)),U,4)
"RTN","BPSOSCC",19,0)
 . S XDATA=^BPS(9002313.56,PHARMACY,0)
"RTN","BPSOSCC",20,0)
 . S BPS("Site","NABP #")=$P(XDATA,U,2)
"RTN","BPSOSCC",21,0)
 . S BPS("Site","Default DEA #")=$P(XDATA,U,3)
"RTN","BPSOSCC",22,0)
 . S BPS("Envoy Terminal ID")=$P(XDATA,U,6)
"RTN","BPSOSCC",23,0)
 . S XDATA=$G(^BPS(9002313.56,PHARMACY,"CAID"))
"RTN","BPSOSCC",24,0)
 . S BPS("Site","Medicaid Pharmacy #")=$P(XDATA,U)
"RTN","BPSOSCC",25,0)
 . S BPS("Site","Default CAID #")=$P(XDATA,U,2)
"RTN","BPSOSCC",26,0)
 . S XDATA=$G(^BPS(9002313.56,PHARMACY,"NDC"))
"RTN","BPSOSCC",27,0)
 . S BPS("Site","NDC ID")=$P(XDATA,U)
"RTN","BPSOSCC",28,0)
 . S NPI=$$NPI^BPSNPI("Pharmacy_ID",SITE)
"RTN","BPSOSCC",29,0)
 . I +NPI=-1 S NPI=""
"RTN","BPSOSCC",30,0)
 . S BPS("Site","NPI")=$P(NPI,U,1)
"RTN","BPSOSCC",31,0)
 ;
"RTN","BPSOSCC",32,0)
 I $P($G(^BPS(9002313.99,1,"SITE TYPE")),"^",1) D
"RTN","BPSOSCC",33,0)
 . S XDATA=^DPT(PATIEN,0)
"RTN","BPSOSCC",34,0)
 . S BPS("Patient","IEN")=PATIEN
"RTN","BPSOSCC",35,0)
 . D  ; Patient,Name
"RTN","BPSOSCC",36,0)
 .. N % I PINSTYPE="CAID" D
"RTN","BPSOSCC",37,0)
 .. . S %=$$CAIDNAME
"RTN","BPSOSCC",38,0)
 .. E  I PINSTYPE="CARE" D
"RTN","BPSOSCC",39,0)
 .. . S %=$$CARENAME
"RTN","BPSOSCC",40,0)
 .. E  S %=""
"RTN","BPSOSCC",41,0)
 .. I %="" S %=$P(XDATA,U)
"RTN","BPSOSCC",42,0)
 .. S BPS("Patient","Name")=%
"RTN","BPSOSCC",43,0)
 . S BPS("Patient","Sex")=$P(XDATA,U,2)
"RTN","BPSOSCC",44,0)
 . S BPS("Patient","DOB")=$P(XDATA,U,3)
"RTN","BPSOSCC",45,0)
 . S BPS("Patient","SSN")=$P(XDATA,U,9)
"RTN","BPSOSCC",46,0)
 E  S DFN=PATIEN D DEM^VADPT,ADD^VADPT D  ;LJE;06/30/03;VA doesn't BILL medicare/medicaid
"RTN","BPSOSCC",47,0)
 . S BPS("Patient","IEN")=PATIEN
"RTN","BPSOSCC",48,0)
 . S BPS("Patient","Name")=$G(VADM(1))
"RTN","BPSOSCC",49,0)
 . S BPS("Patient","Sex")=$P($G(VADM(5)),"^",1)
"RTN","BPSOSCC",50,0)
 . S BPS("Patient","DOB")=$P($G(VADM(3)),"^",1)
"RTN","BPSOSCC",51,0)
 . S BPS("Patient","DOB")=($E(BPS("Patient","DOB"),1,3)+1700)_$E(BPS("Patient","DOB"),4,7)
"RTN","BPSOSCC",52,0)
 . S BPS("Patient","SSN")=$P($G(VADM(2)),"^",1)
"RTN","BPSOSCC",53,0)
 . S BPS("Patient","State")=$P($G(VAPA(5)),"^",1)
"RTN","BPSOSCC",54,0)
 . I BPS("Patient","State")'="" S BPS("Patient","State")=$P($G(^DIC(5,BPS("Patient","State"),0)),"^",2)
"RTN","BPSOSCC",55,0)
 . S BPS("Patient","Street Address")=$G(VAPA(1))
"RTN","BPSOSCC",56,0)
 . S BPS("Patient","City")=$G(VAPA(4))
"RTN","BPSOSCC",57,0)
 . S BPS("Patient","Zip")=$G(VAPA(6))
"RTN","BPSOSCC",58,0)
 . S BPS("Patient","Phone #")=$P($G(VAPA(8)),"^",1)
"RTN","BPSOSCC",59,0)
 . S BPS("Patient","Phone #")=$TR(BPS("Patient","Phone #"),"()-/*# ")
"RTN","BPSOSCC",60,0)
 .
"RTN","BPSOSCC",61,0)
 S (INSIEN,BPS("Insurer","IEN"))=INSIEN   ;$$INSIEN
"RTN","BPSOSCC",62,0)
 S VARX=0
"RTN","BPSOSCC",63,0)
 I '$P($G(^BPS(9002313.99,1,"SITE TYPE")),"^",1) D  G VASKIP  ;LJE;7/3/03
"RTN","BPSOSCC",64,0)
 . S VARX=1
"RTN","BPSOSCC",65,0)
 . S BPS("Insurer","Relationship")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.07,"I"))
"RTN","BPSOSCC",66,0)
 . S BPS("Insurer","Administrative Fee")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.16,"I"))
"RTN","BPSOSCC",67,0)
 . I BPS("Insurer","Administrative Fee")'=""&(BPS("Insurer","Administrative Fee")'=0) S BPS("Insurer","Other Amt Claim Sub Qual")="04"
"RTN","BPSOSCC",68,0)
 . E  S BPS("Insurer","Other Amt Claim Sub Qual")=""
"RTN","BPSOSCC",69,0)
 . I BPS("Insurer","Relationship")="" S BPS("Insurer","Relationship")=0 ;if not there, mark it as unspecified.
"RTN","BPSOSCC",70,0)
 . S BPS("Patient","Primary Care Prov Location Code")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.11,"I"))  ;LJE;7/7/03
"RTN","BPSOSCC",71,0)
 . S BPS("Insurer","Person Code")=$S(BPS("Insurer","Relationship")=1:"01",BPS("Insurer","Relationship")=2:"02",BPS("Insurer","Relationship")=3:03,1:"")
"RTN","BPSOSCC",72,0)
 . S BPS("Insurer","Group #")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.05,"I"))
"RTN","BPSOSCC",73,0)
 . S BPS("Insurer","Policy #")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.06,"I"))  ;CARDHOLDER ID
"RTN","BPSOSCC",74,0)
 . S BPS("Insurer","Full Policy #")=BPS("Insurer","Policy #")
"RTN","BPSOSCC",75,0)
 . S BPS("Insurer","VA PLAN IEN")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",.01,"I"))
"RTN","BPSOSCC",76,0)
 . S:'$D(BPS("Insurer","Percent Sales Tax Rate Sub")) BPS("Insurer","Percent Sales Tax Rate Sub")=""
"RTN","BPSOSCC",77,0)
 . S:'$D(BPS("Insurer","Percent Sales Tax Basis Sub")) BPS("Insurer","Percent Sales Tax Basis Sub")=""
"RTN","BPSOSCC",78,0)
 . S BPS("Cardholder","First Name")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.08,"I"))
"RTN","BPSOSCC",79,0)
 . S BPS("Cardholder","Last Name")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.09,"I"))
"RTN","BPSOSCC",80,0)
 . S BPS("Home Plan")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.11,"I"))
"RTN","BPSOSCC",81,0)
 . S BPS("Site","Pharmacy #")=BPS("Site","NABP #")
"RTN","BPSOSCC",82,0)
 . I $D(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #","B",INSIEN)) D
"RTN","BPSOSCC",83,0)
 . . N X S X=$O(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #","B",INSIEN,0))
"RTN","BPSOSCC",84,0)
 . . S BPS("Site","Pharmacy #")=$P(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #",X,0),U,2)
"RTN","BPSOSCC",85,0)
 . S BPS("NCPDP","BIN Number")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.03,"I"))
"RTN","BPSOSCC",86,0)
 . S XDATA=""
"RTN","BPSOSCC",87,0)
 . I $G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.02,"I")) S XDATA=$G(^BPSF(9002313.92,VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.02,"I"),1))
"RTN","BPSOSCC",88,0)
 . I XDATA="" D IMPOSS^BPSOSUE("DB","TI","VA - Payer sheet info missing.",,"BPS NCPDP FORMATS",$T(+0))
"RTN","BPSOSCC",89,0)
 . S BPS("NCPDP","Version")=$P(XDATA,U,2)
"RTN","BPSOSCC",90,0)
 . S BPS("NCPDP","# Meds/Claim")=$P(XDATA,U,3)
"RTN","BPSOSCC",91,0)
 . S BPS("NCPDP","PCN")=$G(VAINFO(9002313.59902,PINSDA1_","_PINSDA_",",902.04,"I"))
"RTN","BPSOSCC",92,0)
 . I $P(XDATA,U,8)="" S $P(XDATA,U,8)=1
"RTN","BPSOSCC",93,0)
 . S (INSIEN,BPS("Insurer","IEN"))=$P(INSIEN,"^",2)
"RTN","BPSOSCC",94,0)
 . S NRECIEN=INSIEN ;LJE;7/2/03;PAYER SHEET IEN
"RTN","BPSOSCC",95,0)
 ;
"RTN","BPSOSCC",96,0)
 S BPS("Insurer","Relationship")=$$INSREL
"RTN","BPSOSCC",97,0)
 S BPS("Insurer","Person Code")=$$PERSON
"RTN","BPSOSCC",98,0)
 S BPS("Insurer","Group #")=$$INSGRP
"RTN","BPSOSCC",99,0)
 S BPS("Insurer","Policy #")=$TR($$INSPOL,"- /.","") ; BPS*1.0T7*3
"RTN","BPSOSCC",100,0)
 ;
"RTN","BPSOSCC",101,0)
 ; IHS/SD/lwj 03/12/02  some insurers require the entire, untranslated
"RTN","BPSOSCC",102,0)
 ; value as the cardholder ID - added new array bucket to hold
"RTN","BPSOSCC",103,0)
 S BPS("Insurer","Full Policy #")=$$INSPOL ;IHS/SD/lwj 03/12/02
"RTN","BPSOSCC",104,0)
 ;
"RTN","BPSOSCC",105,0)
 ; Pharmacy number:  usually NABP #, but sometimes the insurer demands
"RTN","BPSOSCC",106,0)
 ; their own insurer-assigned pharmacy number.  Especially with Medicaid
"RTN","BPSOSCC",107,0)
 S BPS("Site","Pharmacy #")=BPS("Site","NABP #")
"RTN","BPSOSCC",108,0)
 I $D(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #","B",INSIEN)) D
"RTN","BPSOSCC",109,0)
 . N X S X=$O(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #","B",INSIEN,0))
"RTN","BPSOSCC",110,0)
 . S BPS("Site","Pharmacy #")=$P(^BPS(9002313.56,PHARMACY,"INSURER-ASSIGNED #",X,0),U,2)
"RTN","BPSOSCC",111,0)
 ; Anachronism:  Medicaid Pharmacy # is a special field,
"RTN","BPSOSCC",112,0)
 ; properly, it belongs in the INSURER-ASSIGNED #
"RTN","BPSOSCC",113,0)
 ; But that Medicaid Pharmacy # will overwrite the in INS.-ASSIGNED #
"RTN","BPSOSCC",114,0)
 I PINSTYPE="CAID",BPS("Site","Medicaid Pharmacy #")]"" D
"RTN","BPSOSCC",115,0)
 . S BPS("Site","Pharmacy #")=BPS("Site","Medicaid Pharmacy #")
"RTN","BPSOSCC",116,0)
 ;"NCPDP" nodes
"RTN","BPSOSCC",117,0)
 S NRECIEN=$P($G(^BPSEI(INSIEN,100)),U,1)
"RTN","BPSOSCC",118,0)
VASKIP ;LJE;7/2/03
"RTN","BPSOSCC",119,0)
 S BPS("Insurer","Percentage Sales Tax Amt Sub")=0
"RTN","BPSOSCC",120,0)
 S BPS("Insurer","Flat Sales Tax Amount Sub")=0
"RTN","BPSOSCC",121,0)
 D:NRECIEN'=""
"RTN","BPSOSCC",122,0)
 .S BPS("NCPDP","IEN")=NRECIEN
"RTN","BPSOSCC",123,0)
 .S XDATA=$G(^BPSF(9002313.92,NRECIEN,1))
"RTN","BPSOSCC",124,0)
 .S:BPS("NCPDP","BIN Number")="" BPS("NCPDP","BIN Number")=$P(XDATA,U,1)
"RTN","BPSOSCC",125,0)
 .S BPS("NCPDP","Version")=$P(XDATA,U,2)
"RTN","BPSOSCC",126,0)
 .S BPS("NCPDP","# Meds/Claim")=$P(XDATA,U,3)
"RTN","BPSOSCC",127,0)
 .S BPS("NCPDP","Envoy Plan Number")=$P(XDATA,U,4)
"RTN","BPSOSCC",128,0)
 .S BPS("NCPDP","Software Vendor/Cert ID")=$P(XDATA,U,13)
"RTN","BPSOSCC",129,0)
 .I $P(XDATA,U,8)="" S $P(XDATA,U,8)=1  ;LJE;7/15/03
"RTN","BPSOSCC",130,0)
 .I '$G(VARX) S BPS("NCPDP","Add Disp. Fee to Ingr. Cost")=$P(XDATA,U,8) ;LJE;7/15/03
"RTN","BPSOSCC",131,0)
 Q
"RTN","BPSOSCC",132,0)
 ; $$INSxxx functions - given PINSTYPE, PINSDA, PINSDA1
"RTN","BPSOSCC",133,0)
INSIEN() ; get pointer to ^AUTNINS
"RTN","BPSOSCC",134,0)
 ; (But shouldn't we directly get this from the IEN59?)
"RTN","BPSOSCC",135,0)
 Q 0
"RTN","BPSOSCC",136,0)
INSREL() ; a single digit, 1, 2, 3, 4 = self,spouse,child,other
"RTN","BPSOSCC",137,0)
 Q 0
"RTN","BPSOSCC",138,0)
AUTTRLSH() ; relationship - pointer to ^AUTTRLSH
"RTN","BPSOSCC",139,0)
 Q 0
"RTN","BPSOSCC",140,0)
ELGCLAR() ; Eligibility clarification code
"RTN","BPSOSCC",141,0)
 Q ""
"RTN","BPSOSCC",142,0)
PERSON() ; Person Code
"RTN","BPSOSCC",143,0)
 N X
"RTN","BPSOSCC",144,0)
 I X="" S X="0"_$$INSREL
"RTN","BPSOSCC",145,0)
 Q X
"RTN","BPSOSCC",146,0)
INSGRP() I PINSTYPE'="PRVT" Q ""
"RTN","BPSOSCC",147,0)
 N X S X=$$INS3PPH Q:'X ""
"RTN","BPSOSCC",148,0)
 Q 0
"RTN","BPSOSCC",149,0)
INS3PPH() Q 0
"RTN","BPSOSCC",150,0)
INSPOL() ;
"RTN","BPSOSCC",151,0)
 Q 0
"RTN","BPSOSCC",152,0)
CAIDNAME() Q 0
"RTN","BPSOSCC",153,0)
CARENAME() Q 0
"RTN","BPSOSCC",154,0)
SWTYPE(D) ;EP - from BPSOSC4 - given pointer to dial-out
"RTN","BPSOSCC",155,0)
 ; Is it NDC or ENVOY?
"RTN","BPSOSCC",156,0)
 I '$P($G(^BPS(9002313.99,1,"SITE TYPE")),"^",1) Q "VA"  ;LJE;6/30/03
"RTN","BPSOSCC",157,0)
 N X S X=^BPS(9002313.55,D,0)
"RTN","BPSOSCC",158,0)
 I $P(X,U,3)]"" Q $P(X,U,3)
"RTN","BPSOSCC",159,0)
 I $P(X,U)["NDC" Q "NDC"
"RTN","BPSOSCC",160,0)
 I $P(X,U)["ENVOY" Q "ENVOY"
"RTN","BPSOSCC",161,0)
 D IMPOSS^BPSOSUE("P","TI","Bad switch type for dialout "_D,,"SWTYPE",$T(+0))
"RTN","BPSOSCC",162,0)
 Q "" ; should never happen
"RTN","BPSOSCD")
0^5^B49363018^B46703234
"RTN","BPSOSCD",1,0)
BPSOSCD ;BHAM ISC/FCS/DRS/DLF - Set BPS() "RX" nodes for current medication ;06/01/2004
"RTN","BPSOSCD",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSOSCD",3,0)
 Q
"RTN","BPSOSCD",4,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCD",5,0)
 ;Set BPS() "RX" nodes for current medication:
"RTN","BPSOSCD",6,0)
 ;
"RTN","BPSOSCD",7,0)
 ;Parameters:   VMEDINFO  - Contains VMEDIEN,RXIEN,RXRFIEN,VCPTIEN
"RTN","BPSOSCD",8,0)
 ;              MEDN      - Index number indicating what medication is
"RTN","BPSOSCD",9,0)
 ;                          being processed
"RTN","BPSOSCD",10,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCD",11,0)
 ; Called from BPSOSCA from BPSOSQG from BPSOSQ2,
"RTN","BPSOSCD",12,0)
 ; once for each item in its VMEDS() array.
"RTN","BPSOSCD",13,0)
MEDINFO(VMEDINFO,MEDN,INSPINS) ;EP
"RTN","BPSOSCD",14,0)
 ;Manage local variables
"RTN","BPSOSCD",15,0)
 N VMEDIEN,RXIEN,RXRFIEN,DRUGIEN,PROVIEN,VCPTIEN,RXI,IEN59,PINSTYPE
"RTN","BPSOSCD",16,0)
 N FILLDT,NPI
"RTN","BPSOSCD",17,0)
 ;
"RTN","BPSOSCD",18,0)
 ;Parse variables from VMEDINFO variable
"RTN","BPSOSCD",19,0)
 S VMEDIEN=$P(VMEDINFO,U,1)
"RTN","BPSOSCD",20,0)
 S RXIEN=$P(VMEDINFO,U,2)
"RTN","BPSOSCD",21,0)
 S RXRFIEN=$P(VMEDINFO,U,3)
"RTN","BPSOSCD",22,0)
 S VCPTIEN=$P(VMEDINFO,U,4)
"RTN","BPSOSCD",23,0)
 S IEN59=$P(VMEDINFO,U,5) ; 06/23/2000
"RTN","BPSOSCD",24,0)
 D OVERRIDE(IEN59,MEDN) ; overrides stored in 9002313.511
"RTN","BPSOSCD",25,0)
 ;
"RTN","BPSOSCD",26,0)
 ;IHS/SD/lwj 8/20/02  NCPDP 5.1 changes - if a 5.1 claims and
"RTN","BPSOSCD",27,0)
 ; there are DUR values - retrieve them
"RTN","BPSOSCD",28,0)
 I BPS("NCPDP","Version")[5 D DURVALUE(IEN59,MEDN)
"RTN","BPSOSCD",29,0)
 ;
"RTN","BPSOSCD",30,0)
 ;
"RTN","BPSOSCD",31,0)
 S PINSTYPE=$P(INSPINS,",") ; "CAID" will make a difference
"RTN","BPSOSCD",32,0)
 ;
"RTN","BPSOSCD",33,0)
 S DRUGIEN=$P($G(^PSRX(RXIEN,0)),U,6)
"RTN","BPSOSCD",34,0)
 S PROVIEN=$P($G(^PSRX(RXIEN,0)),U,4)
"RTN","BPSOSCD",35,0)
 ;
"RTN","BPSOSCD",36,0)
 S BPS("RX",MEDN,"VCPT IEN")=VCPTIEN
"RTN","BPSOSCD",37,0)
 S BPS("RX",MEDN,"IEN59")=IEN59 ; 06/23/2000
"RTN","BPSOSCD",38,0)
 S (RXI,BPS("RX",MEDN,"RX IEN"))=RXIEN
"RTN","BPSOSCD",39,0)
 S BPS("RX",MEDN,"Date Written")=$P($G(^PSRX(RXIEN,0)),U,13)
"RTN","BPSOSCD",40,0)
 S BPS("RX",MEDN,"RX Number")=RXIEN
"RTN","BPSOSCD",41,0)
 S BPS("RX",MEDN,"New/Refill")=$S(RXRFIEN="":"N",1:"R")
"RTN","BPSOSCD",42,0)
 ;
"RTN","BPSOSCD",43,0)
 ;IHS/SD/lwj 8/30/02  NCPDP 5.1 changes 
"RTN","BPSOSCD",44,0)
 ; Version 3.2 uses field 416 for the prior auth code and number
"RTN","BPSOSCD",45,0)
 ; Version 5.1 will use fields 461 and 462
"RTN","BPSOSCD",46,0)
 ; Below line remarked out, next three lines added
"RTN","BPSOSCD",47,0)
 ;
"RTN","BPSOSCD",48,0)
 S BPS("RX",MEDN,"Preauth #")=$P(^BPST(IEN59,1),U,15)_$P(^BPST(IEN59,1),U,9)
"RTN","BPSOSCD",49,0)
 ;
"RTN","BPSOSCD",50,0)
 ; Get Service Date
"RTN","BPSOSCD",51,0)
 ; It should be in BPS Transaction.  If not, use the established algorithm, which
"RTN","BPSOSCD",52,0)
 ;    is $$DOSDATE^BPSSCRRS
"RTN","BPSOSCD",53,0)
 S FILLDT=$P($G(^BPST(IEN59,12)),U,2)
"RTN","BPSOSCD",54,0)
 I FILLDT="" S FILLDT=$$DOSDATE^BPSSCRRS(RXIEN,RXRFIEN)
"RTN","BPSOSCD",55,0)
 S BPS("RX",MEDN,"Date Filled")=$$FMTHL7^XLFDT(FILLDT)
"RTN","BPSOSCD",56,0)
 S BPS("Claim",MEDN,"Prior Auth Type")=$P(^BPST(IEN59,1),U,15)
"RTN","BPSOSCD",57,0)
 S BPS("Claim",MEDN,"Prior Auth Num Sub")=$P(^BPST(IEN59,1),U,9)
"RTN","BPSOSCD",58,0)
 ;
"RTN","BPSOSCD",59,0)
 I 'RXRFIEN D  ; first fill
"RTN","BPSOSCD",60,0)
 .S BPS("RX",MEDN,"Quantity")=$P($G(^PSRX(RXIEN,0)),U,7)
"RTN","BPSOSCD",61,0)
 .S BPS("RX",MEDN,"Days Supply")=$P($G(^PSRX(RXIEN,0)),U,8)
"RTN","BPSOSCD",62,0)
 .S BPS("RX",MEDN,"DAW")=$P($G(^PSRX(RXIEN,"EPH")),U,1)
"RTN","BPSOSCD",63,0)
 . D NOW^%DTC S TODAY=$P(%,".",1)
"RTN","BPSOSCD",64,0)
 E  D  ; refill
"RTN","BPSOSCD",65,0)
 .S BPS("RX",MEDN,"Quantity")=$P($G(^PSRX(RXIEN,1,RXRFIEN,0)),U,4)
"RTN","BPSOSCD",66,0)
 .S BPS("RX",MEDN,"Days Supply")=$P($G(^PSRX(RXIEN,1,RXRFIEN,0)),U,10)
"RTN","BPSOSCD",67,0)
 .S BPS("RX",MEDN,"DAW")=$P($G(^PSRX(RXIEN,1,RXRFIEN,"EPH")),U,1)
"RTN","BPSOSCD",68,0)
 S BPS("RX",MEDN,"NDC")=$$GETNDC^PSONDCUT(RXIEN,RXRFIEN)
"RTN","BPSOSCD",69,0)
 S BPS("RX",MEDN,"# Refills")=$P($G(^PSRX(RXIEN,0)),U,9)
"RTN","BPSOSCD",70,0)
 S BPS("RX",MEDN,"Refill #")=$$RXRFN(RXIEN,RXRFIEN)
"RTN","BPSOSCD",71,0)
 S BPS("RX",MEDN,"Prescriber IEN")=+PROVIEN
"RTN","BPSOSCD",72,0)
 D STLIC^BPSJPAY(MEDN,PROVIEN,BPS("RX",MEDN,"Date Filled"))
"RTN","BPSOSCD",73,0)
 I PROVIEN'="" D  ;had to do this for certification
"RTN","BPSOSCD",74,0)
 .S BPS("RX",MEDN,"Prescriber Name")=$$GET1^DIQ(200,+PROVIEN,.01) ;LJE;7/7/03
"RTN","BPSOSCD",75,0)
 .S BPS("RX",MEDN,"Prescriber Phone #")=$$GET1^DIQ(200,+PROVIEN,.131) ;LJE;7/7/03
"RTN","BPSOSCD",76,0)
 .I ^BPS(9002313.99,1,"CERTIFIER")=DUZ S BPS("RX",MEDN,"Prescriber DEA #")=$G(BPS("RX",1,"Provider ID"))
"RTN","BPSOSCD",77,0)
 .S BPS("RX",MEDN,"Prescriber DEA #")=$$GET1^DIQ(200,+PROVIEN,53.2)
"RTN","BPSOSCD",78,0)
 .S NPI=$$NPI^BPSNPI("Individual_ID",+PROVIEN)
"RTN","BPSOSCD",79,0)
 .I +NPI=-1 S NPI=""
"RTN","BPSOSCD",80,0)
 .S BPS("RX",MEDN,"Prescriber NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",81,0)
 .S BPS("RX",MEDN,"Prescriber CAID #")=""
"RTN","BPSOSCD",82,0)
 .S BPS("RX",MEDN,"Prescriber UPIN #")=""
"RTN","BPSOSCD",83,0)
 .S BPS("RX",MEDN,"Prescriber Billing Location")="" ; ANMC only?  not in Sitka's data dic.
"RTN","BPSOSCD",84,0)
 .S BPS("RX",MEDN,"Primary Care Provider NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",85,0)
 .S BPS("RX",MEDN,"Provider NPI")=$P(NPI,U,1)
"RTN","BPSOSCD",86,0)
 S BPS("RX",MEDN,"Alt. Product Type")="03" ;lje;7/15/03
"RTN","BPSOSCD",87,0)
 S BPS("RX",MEDN,"Gross Amount Due")=$G(VAINFO(9002313.59902,VAINSDA1_","_VAINSDA_",",902.15,"I")) ;LJE
"RTN","BPSOSCD",88,0)
 S BPS("RX",MEDN,"Usual & Customary")=$G(VAINFO(9002313.59902,VAINSDA1_","_VAINSDA_",",902.14,"I")) ;LJE
"RTN","BPSOSCD",89,0)
 S BPS("RX",MEDN,"Basis of Cost Determination")=$G(VAINFO(9002313.59902,VAINSDA1_","_VAINSDA_",",902.13,"I")) ;LJE
"RTN","BPSOSCD",90,0)
 S (VANATURE,VAOIEN)="",VAOIEN=$P($G(^PSRX(RXIEN,"OR1")),"^",2),VANATURE=$$GET1^DIQ(100.008,"1,"_VAOIEN_",","12")
"RTN","BPSOSCD",91,0)
 S BPS("RX",MEDN,"Origin Code")=$S(VANATURE="AUTO":2,VANATURE["ELECTRONIC":3,VANATURE="DUPLICATE":0,VANATURE["TELEPHONE":2,1:1)
"RTN","BPSOSCD",92,0)
 K VANATURE,VAOIEN ;LJE;7/16/03
"RTN","BPSOSCD",93,0)
 D
"RTN","BPSOSCD",94,0)
 . N %
"RTN","BPSOSCD",95,0)
 . I PINSTYPE="CAID" D
"RTN","BPSOSCD",96,0)
 . . S %=BPS("RX",MEDN,"Prescriber CAID #")
"RTN","BPSOSCD",97,0)
 . . I %="" D  ; special for ANMC
"RTN","BPSOSCD",98,0)
 . . . N X1 S X1=BPS("RX",MEDN,"Prescriber Billing Location")
"RTN","BPSOSCD",99,0)
 . . . S %=$S(X1=1665:"MDG275",X1=1946:"MDG867",1:"")
"RTN","BPSOSCD",100,0)
 . . I %="" S %=BPS("Site","Default CAID #")
"RTN","BPSOSCD",101,0)
 . E  D
"RTN","BPSOSCD",102,0)
 . . S %=BPS("RX",MEDN,"Prescriber DEA #")
"RTN","BPSOSCD",103,0)
 . . I %="" S %=BPS("Site","Default DEA #")
"RTN","BPSOSCD",104,0)
 . S BPS("RX",MEDN,"Prescriber ID")=%
"RTN","BPSOSCD",105,0)
 ;
"RTN","BPSOSCD",106,0)
 D:DRUGIEN'=""
"RTN","BPSOSCD",107,0)
 .S BPS("RX",MEDN,"Drug IEN")=DRUGIEN
"RTN","BPSOSCD",108,0)
 .S BPS("RX",MEDN,"Drug Name")=$$DRUGDIE^BPSUTIL(DRUGIEN,.01,"E")
"RTN","BPSOSCD",109,0)
 N PRICING S PRICING=^BPST(IEN59,5)
"RTN","BPSOSCD",110,0)
 S BPS("RX",MEDN,"Quantity")=$P(PRICING,U) ; 01/31/2001
"RTN","BPSOSCD",111,0)
 S BPS("RX",MEDN,"Unit Price")=$P(PRICING,U,2)
"RTN","BPSOSCD",112,0)
 S BPS("RX",MEDN,"Ingredient Cost")=$J($P(PRICING,U,2),0,2)
"RTN","BPSOSCD",113,0)
 S BPS("RX",MEDN,"Dispensing Fee")=$J($P(PRICING,U,4),0,2)
"RTN","BPSOSCD",114,0)
 S BPS("Site","Dispensing Fee")=BPS("RX",MEDN,"Dispensing Fee")
"RTN","BPSOSCD",115,0)
 I '$G(VARX) S BPS("RX",MEDN,"Gross Amount Due")=$J($P(PRICING,U,5),0,2) ;LJE;7/21/03
"RTN","BPSOSCD",116,0)
 S BPS("RX",MEDN,"Usual & Customary")=$J($P(PRICING,U,5),0,2)
"RTN","BPSOSCD",117,0)
 I $G(BPS("NCPDP","Add Disp. Fee to Ingr. Cost")) D  ;LJE;ADDED $G
"RTN","BPSOSCD",118,0)
 . N X S X=BPS("RX",MEDN,"Ingredient Cost")
"RTN","BPSOSCD",119,0)
 . S X=X+BPS("RX",MEDN,"Dispensing Fee")
"RTN","BPSOSCD",120,0)
 . S BPS("RX",MEDN,"Ingredient Cost")=X
"RTN","BPSOSCD",121,0)
 ;
"RTN","BPSOSCD",122,0)
 ; Visit-related data
"RTN","BPSOSCD",123,0)
 ;
"RTN","BPSOSCD",124,0)
 I IEN59 D
"RTN","BPSOSCD",125,0)
 . N VSITIEN S VSITIEN=$P(^BPST(IEN59,0),U,7)
"RTN","BPSOSCD",126,0)
 . Q:'VSITIEN
"RTN","BPSOSCD",127,0)
 Q
"RTN","BPSOSCD",128,0)
 ;
"RTN","BPSOSCD",129,0)
 ; $$RXRFN()
"RTN","BPSOSCD",130,0)
 ;Determine RX Refill Number based on prescription record
"RTN","BPSOSCD",131,0)
 ;  It's overly cautious about making sure that the refills are
"RTN","BPSOSCD",132,0)
 ;  counted in date filled order.
"RTN","BPSOSCD",133,0)
 ;
"RTN","BPSOSCD",134,0)
 ;Input Variables:    RXIEN    -  Prescription record IEN (52)
"RTN","BPSOSCD",135,0)
 ;                    RXRFIEN  -  Refill multiple IEN
"RTN","BPSOSCD",136,0)
 ;
"RTN","BPSOSCD",137,0)
 ;Function Returns:   Null  - Could not process request
"RTN","BPSOSCD",138,0)
 ;                    0     - Not a refill
"RTN","BPSOSCD",139,0)
 ;                    N     - Refill number
"RTN","BPSOSCD",140,0)
 ; Copied into here from BPSECD4 so we can remove BPSECD4 from kit.
"RTN","BPSOSCD",141,0)
 ; Also called from BPSOSN3
"RTN","BPSOSCD",142,0)
 ;----------------------------------------------------------------------
"RTN","BPSOSCD",143,0)
RXRFN(RXIEN,RXRFIEN) ;EP
"RTN","BPSOSCD",144,0)
 ;Manage local variables
"RTN","BPSOSCD",145,0)
 N COUNT,DATE,XIEN,STOP
"RTN","BPSOSCD",146,0)
 ;
"RTN","BPSOSCD",147,0)
 ;Make sure input variables are defined
"RTN","BPSOSCD",148,0)
 Q:$G(RXIEN)="" ""
"RTN","BPSOSCD",149,0)
 Q:$G(RXRFIEN)="" ""
"RTN","BPSOSCD",150,0)
 ;
"RTN","BPSOSCD",151,0)
 ;Initialize local variables
"RTN","BPSOSCD",152,0)
 S (COUNT,STOP)=0
"RTN","BPSOSCD",153,0)
 ;
"RTN","BPSOSCD",154,0)
 ;Loop through refill multiple by date
"RTN","BPSOSCD",155,0)
 S DATE=""
"RTN","BPSOSCD",156,0)
 F  D  Q:'+DATE!(STOP)
"RTN","BPSOSCD",157,0)
 .S DATE=$O(^PSRX(RXIEN,1,"B",DATE))
"RTN","BPSOSCD",158,0)
 .Q:'+DATE
"RTN","BPSOSCD",159,0)
 .;
"RTN","BPSOSCD",160,0)
 .;For each sub-record increment refill count
"RTN","BPSOSCD",161,0)
 .S XIEN=""
"RTN","BPSOSCD",162,0)
 .F  D  Q:'+XIEN!(STOP)
"RTN","BPSOSCD",163,0)
 ..S XIEN=$O(^PSRX(RXIEN,1,"B",DATE,XIEN))
"RTN","BPSOSCD",164,0)
 ..Q:'+XIEN
"RTN","BPSOSCD",165,0)
 ..S COUNT=COUNT+1
"RTN","BPSOSCD",166,0)
 ..;
"RTN","BPSOSCD",167,0)
 ..;STOP when you reach the refill record
"RTN","BPSOSCD",168,0)
 ..S:XIEN=RXRFIEN STOP=1
"RTN","BPSOSCD",169,0)
 Q $S(STOP=1:COUNT,1:0)
"RTN","BPSOSCD",170,0)
 ;
"RTN","BPSOSCD",171,0)
 ; Retrieve OVERRIDE nodes and put into BPS array
"RTN","BPSOSCD",172,0)
 ; They will be fetched from BPS("OVERRIDE"
"RTN","BPSOSCD",173,0)
 ; during low-level construction of the actual encoded claim packet.
"RTN","BPSOSCD",174,0)
 ;
"RTN","BPSOSCD",175,0)
OVERRIDE(IEN59,MEDN)    ; set any BPS("OVERRIDE" nodes from 9002313.511 data
"RTN","BPSOSCD",176,0)
 ; BPS("OVERRIDE",field)=value  for fields 101-401
"RTN","BPSOSCD",177,0)
 ; BPS("OVERRIDE","RX",MEDN,field) for med #N, fields 402+
"RTN","BPSOSCD",178,0)
 ; Note that if you have multiple prescriptions bundled, the
"RTN","BPSOSCD",179,0)
 ; union of overrides from 101-401 apply to all; and if there's a 
"RTN","BPSOSCD",180,0)
 ; conflict, the last one overwrites the previous ones.
"RTN","BPSOSCD",181,0)
 N IEN511 S IEN511=$P(^BPST(IEN59,1),U,13) Q:'IEN511
"RTN","BPSOSCD",182,0)
 N RETVAL S RETVAL=$$GET511^BPSOSO2(IEN511,"BPS(""OVERRIDE"")","BPS(""OVERRIDE"",""RX"","_MEDN_")")
"RTN","BPSOSCD",183,0)
CC Q
"RTN","BPSOSCD",184,0)
 ;
"RTN","BPSOSCD",185,0)
DURVALUE(IEN59,MEDN)         ;IHS/SD/lwj 8/20/02 NCPDP 5.1 changes
"RTN","BPSOSCD",186,0)
 ; This subroutine will read in the DUR data from the DUR multiple
"RTN","BPSOSCD",187,0)
 ; in BPS Transactions and store the values into BPS("RX",MEDN,DUR,....)
"RTN","BPSOSCD",188,0)
 ;
"RTN","BPSOSCD",189,0)
 ; (NOTE - unlike most values, these fields are stored by their
"RTN","BPSOSCD",190,0)
 ; field number.  Since they are repeating, it will ease the 
"RTN","BPSOSCD",191,0)
 ; retrieval of them, when we populate the claim.)
"RTN","BPSOSCD",192,0)
 ;
"RTN","BPSOSCD",193,0)
 N DUR,DCNT,DURREC
"RTN","BPSOSCD",194,0)
 ;
"RTN","BPSOSCD",195,0)
 S (DUR,DCNT)=0
"RTN","BPSOSCD",196,0)
 F  S DCNT=$O(^BPST(IEN59,13,DCNT)) Q:'+DCNT  D
"RTN","BPSOSCD",197,0)
 . S DURREC=$G(^BPST(IEN59,13,DCNT,0))
"RTN","BPSOSCD",198,0)
 . I DURREC="" Q
"RTN","BPSOSCD",199,0)
 . S DUR=DUR+1
"RTN","BPSOSCD",200,0)
 . S BPS("RX",MEDN,"DUR",DUR,473)=DUR  ;dur/pps cntr
"RTN","BPSOSCD",201,0)
 . S BPS("RX",MEDN,"DUR",DUR,439)=$P(DURREC,U,2) ;Reason Srv Cd
"RTN","BPSOSCD",202,0)
 . S BPS("RX",MEDN,"DUR",DUR,440)=$P(DURREC,U,3) ;Prof Srv Cd
"RTN","BPSOSCD",203,0)
 . S BPS("RX",MEDN,"DUR",DUR,441)=$P(DURREC,U,4) ;Result Src Cd
"RTN","BPSOSCD",204,0)
 . S BPS("RX",MEDN,"DUR",DUR,474)=""             ;Level of Effort
"RTN","BPSOSCD",205,0)
 . S BPS("RX",MEDN,"DUR",DUR,475)=""             ;Co-agent Qual
"RTN","BPSOSCD",206,0)
 . S BPS("RX",MEDN,"DUR",DUR,476)=""             ;Co-agent ID
"RTN","BPSOSCD",207,0)
 ;
"RTN","BPSOSCD",208,0)
 Q
"RTN","BPSOSHR")
0^25^B19816580^B19974681
"RTN","BPSOSHR",1,0)
BPSOSHR ;BHAM ISC/SD/lwj/DLF - 3.2 to 5.1 clm reversal format ;06/01/2004
"RTN","BPSOSHR",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSOSHR",3,0)
 ;
"RTN","BPSOSHR",4,0)
 ;-------------------------------------------------------
"RTN","BPSOSHR",5,0)
 ; IHS/SD/lwj 10/22/02 NCPDP 5.1 changes
"RTN","BPSOSHR",6,0)
 ; We ran into a big snag - some processors are doing an all or nothing
"RTN","BPSOSHR",7,0)
 ; switch to 5.1 with no grace period for 3.2 and 5.1 claims.  What this
"RTN","BPSOSHR",8,0)
 ; means is that we have to be able to reverse a previously submitted
"RTN","BPSOSHR",9,0)
 ; 3.2 claim in 5.1 reversal format since they won't accept 3.2 any
"RTN","BPSOSHR",10,0)
 ; more.  The biggest problem with this is that 3.2 and 5.1 fields
"RTN","BPSOSHR",11,0)
 ; are formatted differently, and the reversal process was used to
"RTN","BPSOSHR",12,0)
 ; simply copy the information from the original claim into the
"RTN","BPSOSHR",13,0)
 ; reversal claim.  To get around this, this routine was created
"RTN","BPSOSHR",14,0)
 ; to try and reformat those fields that require the 5.1 format to
"RTN","BPSOSHR",15,0)
 ; reverse properly.
"RTN","BPSOSHR",16,0)
 ;
"RTN","BPSOSHR",17,0)
 ; This routine should only be called from within the BPSECA8 - it
"RTN","BPSOSHR",18,0)
 ; is dependent on variables set there.
"RTN","BPSOSHR",19,0)
 ;
"RTN","BPSOSHR",20,0)
 ; Basic logic:
"RTN","BPSOSHR",21,0)
 ;  Read the format for the designated segment
"RTN","BPSOSHR",22,0)
 ;  Read through the fields on the segment (no xref - very few fields)
"RTN","BPSOSHR",23,0)
 ;  Determine if there are "special" values for the field
"RTN","BPSOSHR",24,0)
 ;  Format the field with the proper value
"RTN","BPSOSHR",25,0)
 ;  Set the TMP field to the formatted value
"RTN","BPSOSHR",26,0)
 ;
"RTN","BPSOSHR",27,0)
 Q
"RTN","BPSOSHR",28,0)
 ;
"RTN","BPSOSHR",29,0)
REFORM(BPSFORM) ;EP  main driver of problem and entry point - everything
"RTN","BPSOSHR",30,0)
 ; should call through to here
"RTN","BPSOSHR",31,0)
 ;
"RTN","BPSOSHR",32,0)
 N BPS
"RTN","BPSOSHR",33,0)
 ;
"RTN","BPSOSHR",34,0)
 D REFRMH(BPSFORM)
"RTN","BPSOSHR",35,0)
 D REFRMD(BPSFORM)
"RTN","BPSOSHR",36,0)
 ;
"RTN","BPSOSHR",37,0)
 Q
"RTN","BPSOSHR",38,0)
REFRMH(BPSFORM) ;
"RTN","BPSOSHR",39,0)
 ; This routine will only attempt to reset the "header" fields that need
"RTN","BPSOSHR",40,0)
 ; adjusting for 5.1.  There are four fields in the header segment that
"RTN","BPSOSHR",41,0)
 ; need to be reformatted - we will leave the others since they may have
"RTN","BPSOSHR",42,0)
 ; gone through extensive formatting for the original claim and are fine
"RTN","BPSOSHR",43,0)
 ; the way they are.  These four fields were either new to the reversal
"RTN","BPSOSHR",44,0)
 ; in 5.1, or changed value/length in 5.1.  The fields are:
"RTN","BPSOSHR",45,0)
 ;     109  Transaction Count   (not on 3.2 reversal)
"RTN","BPSOSHR",46,0)
 ;     110  Software Vendor/Certificationd ID  (new field to 5.1)
"RTN","BPSOSHR",47,0)
 ;     201  Service Provider ID (changed length in 5.1)
"RTN","BPSOSHR",48,0)
 ;     202  Service Provider ID Qualifier (new to 5.1)
"RTN","BPSOSHR",49,0)
 ;
"RTN","BPSOSHR",50,0)
 ; Remember - the header is stagnate - that's the only reason we look
"RTN","BPSOSHR",51,0)
 ; specifically for those two fields.
"RTN","BPSOSHR",52,0)
 ;
"RTN","BPSOSHR",53,0)
 ; IEN and TMP are set in BPSECA8
"RTN","BPSOSHR",54,0)
 ;
"RTN","BPSOSHR",55,0)
 ; The header segment is small, and there isn't a xref by field #, so we
"RTN","BPSOSHR",56,0)
 ; will read the entire segment here.
"RTN","BPSOSHR",57,0)
 ;
"RTN","BPSOSHR",58,0)
 N FLDIEN,PMODE,ORDER,RECMIEN,FIELD
"RTN","BPSOSHR",59,0)
 ;
"RTN","BPSOSHR",60,0)
 S ORDER=0
"RTN","BPSOSHR",61,0)
 F  S ORDER=$O(^BPSF(9002313.92,BPSFORM,100,"B",ORDER)) Q:'ORDER  D
"RTN","BPSOSHR",62,0)
 . S RECMIEN=$O(^BPSF(9002313.92,BPSFORM,100,"B",ORDER,0))
"RTN","BPSOSHR",63,0)
 . Q:'RECMIEN
"RTN","BPSOSHR",64,0)
 . S FLDIEN=$P($G(^BPSF(9002313.92,BPSFORM,100,RECMIEN,0)),U,2)
"RTN","BPSOSHR",65,0)
 . S FIELD=$P($G(^BPSF(9002313.91,FLDIEN,0)),U)
"RTN","BPSOSHR",66,0)
 . Q:(FIELD'=110)&(FIELD'=109)
"RTN","BPSOSHR",67,0)
 . ;
"RTN","BPSOSHR",68,0)
 . ; check to see if the format has a "special" value for this field
"RTN","BPSOSHR",69,0)
 . S PMODE=$P($G(^BPSF(9002313.92,BPSFORM,100,RECMIEN,0)),U,3)
"RTN","BPSOSHR",70,0)
 . I PMODE="X" D XSPCCODE^BPSOSCF(BPSFORM,100,RECMIEN)
"RTN","BPSOSHR",71,0)
 . I PMODE'="X" S BPS("X")=$G(TMP(9002313.02,IEN,FIELD,"I"))
"RTN","BPSOSHR",72,0)
 . ;
"RTN","BPSOSHR",73,0)
 . D FORMAT
"RTN","BPSOSHR",74,0)
 . ;
"RTN","BPSOSHR",75,0)
 . S TMP(9002313.02,IEN,FIELD,"I")=BPS("X")
"RTN","BPSOSHR",76,0)
 ;
"RTN","BPSOSHR",77,0)
 ;
"RTN","BPSOSHR",78,0)
 Q
"RTN","BPSOSHR",79,0)
 ;
"RTN","BPSOSHR",80,0)
REFRMD(BPSFORM) ;
"RTN","BPSOSHR",81,0)
 ; This routine is going to try and reformat the "detail" portion of the
"RTN","BPSOSHR",82,0)
 ; claim. For now, the only segment we are going to look at is 130
"RTN","BPSOSHR",83,0)
 ; which is the claim segment.  If other reversal formats become
"RTN","BPSOSHR",84,0)
 ; available, and they require other segments - this section will have
"RTN","BPSOSHR",85,0)
 ; to change.  Since the claim segment full of optional fields, we wil
"RTN","BPSOSHR",86,0)
 ; read through the format and take it a field at a time.
"RTN","BPSOSHR",87,0)
 ;
"RTN","BPSOSHR",88,0)
 ; IEN, RX, and TMP were set in BPSECA8
"RTN","BPSOSHR",89,0)
 ;
"RTN","BPSOSHR",90,0)
 ;
"RTN","BPSOSHR",91,0)
 N FLDIEN,PMODE,ORDER,RECMIEN,NODE,IDIEN,DOFORM,FIELD
"RTN","BPSOSHR",92,0)
 S NODE=130
"RTN","BPSOSHR",93,0)
 ;
"RTN","BPSOSHR",94,0)
 S ORDER=0
"RTN","BPSOSHR",95,0)
 F  S ORDER=$O(^BPSF(9002313.92,BPSFORM,NODE,"B",ORDER)) Q:'ORDER  D
"RTN","BPSOSHR",96,0)
 . S RECMIEN=$O(^BPSF(9002313.92,BPSFORM,NODE,"B",ORDER,0))
"RTN","BPSOSHR",97,0)
 . Q:'RECMIEN
"RTN","BPSOSHR",98,0)
 . S FLDIEN=$P($G(^BPSF(9002313.92,BPSFORM,NODE,RECMIEN,0)),U,2)
"RTN","BPSOSHR",99,0)
 . S FIELD=$P($G(^BPSF(9002313.91,FLDIEN,0)),U)
"RTN","BPSOSHR",100,0)
 . Q:FIELD=111    ;(SEGMENT IDENTIFIER - SKIP)
"RTN","BPSOSHR",101,0)
 . ;
"RTN","BPSOSHR",102,0)
 . ; check to see if the format has a "special" value for this field
"RTN","BPSOSHR",103,0)
 . S PMODE=$P($G(^BPSF(9002313.92,BPSFORM,NODE,RECMIEN,0)),U,3)
"RTN","BPSOSHR",104,0)
 . I $G(VARX) S BPS("X")=$G(TMP(9002313.0201,RX_","_IEN,FIELD,"I")) ;LJE;8/2/03
"RTN","BPSOSHR",105,0)
 . I PMODE="X" D XSPCCODE^BPSOSCF(BPSFORM,NODE,RECMIEN)
"RTN","BPSOSHR",106,0)
 . ;
"RTN","BPSOSHR",107,0)
 . ; if this isn't a special value field in 5.1, we need to make sure
"RTN","BPSOSHR",108,0)
 . ; it wasn't an optional field in 3.2. If it was, the field ID is
"RTN","BPSOSHR",109,0)
 . ; already a part of the field, and we don't need to reformat it
"RTN","BPSOSHR",110,0)
 . ;
"RTN","BPSOSHR",111,0)
 . S DOFORM=1
"RTN","BPSOSHR",112,0)
 . I PMODE'="X" D
"RTN","BPSOSHR",113,0)
 .. ; DMB 4/29/2005
"RTN","BPSOSHR",114,0)
 .. I '$G(VARX) S:$P($G(^BPSF(9002313.91,FLDIEN,0)),U,2)'="" DOFORM=0
"RTN","BPSOSHR",115,0)
 .. E  I $P($G(^BPSF(9002313.91,FLDIEN,5)),U,1)'="" S DOFORM=0
"RTN","BPSOSHR",116,0)
 .. S:DOFORM BPS("X")=$G(TMP(9002313.0201,RX_",",IEN,FIELD,"I"))
"RTN","BPSOSHR",117,0)
 . ;
"RTN","BPSOSHR",118,0)
 . ; format it only if it needs it
"RTN","BPSOSHR",119,0)
 . ;
"RTN","BPSOSHR",120,0)
 . I DOFORM D
"RTN","BPSOSHR",121,0)
 .. D FORMAT
"RTN","BPSOSHR",122,0)
 .. S TMP(9002313.0201,RX_","_IEN,FIELD,"I")=BPS("X")
"RTN","BPSOSHR",123,0)
 ;
"RTN","BPSOSHR",124,0)
 ;
"RTN","BPSOSHR",125,0)
 Q
"RTN","BPSOSHR",126,0)
 ;
"RTN","BPSOSHR",127,0)
FORMAT ; This routine will format the field to 5.1 standards - remember it
"RTN","BPSOSHR",128,0)
 ; will set BPS("X") based on what is in the BPS NCPDP Field Defs file
"RTN","BPSOSHR",129,0)
 ;
"RTN","BPSOSHR",130,0)
 N INDEX,MCODE,NODE,QUAL,QUALFLG  ;LJE;8/2/03
"RTN","BPSOSHR",131,0)
 S NODE=25            ;we only want the 5.1 format code
"RTN","BPSOSHR",132,0)
 ;
"RTN","BPSOSHR",133,0)
 S QUALFLG=0,QUAL="",QUAL=$P(^BPSF(9002313.91,FLDIEN,5),"^",1) ;LJE;8/2/03
"RTN","BPSOSHR",134,0)
 I $E(BPS("X"),1,2)=QUAL S QUALFLG=1,BPS("X")=$P(BPS("X"),QUAL,2) ;LJE;8/2/03
"RTN","BPSOSHR",135,0)
 S INDEX=0
"RTN","BPSOSHR",136,0)
  F  D  Q:'+INDEX
"RTN","BPSOSHR",137,0)
 . S INDEX=$O(^BPSF(9002313.91,FLDIEN,NODE,INDEX))
"RTN","BPSOSHR",138,0)
 . Q:'+INDEX
"RTN","BPSOSHR",139,0)
 . S MCODE=$G(^BPSF(9002313.91,FLDIEN,NODE,INDEX,0))
"RTN","BPSOSHR",140,0)
 . Q:MCODE=""
"RTN","BPSOSHR",141,0)
 . Q:$E(MCODE,1)=";"
"RTN","BPSOSHR",142,0)
 . X MCODE
"RTN","BPSOSHR",143,0)
 I QUALFLG&($E(BPS("X"),1,2)'=QUAL) S BPS("X")=QUAL_BPS("X")
"RTN","BPSOSHR",144,0)
 ;
"RTN","BPSOSHR",145,0)
 ;
"RTN","BPSOSHR",146,0)
 Q
"RTN","BPSOSU")
0^22^B70730686^B67702663
"RTN","BPSOSU",1,0)
BPSOSU ;BHAM ISC/FCS/DRS/FLS - Common utilities ;06/01/2004
"RTN","BPSOSU",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,2**;JUN 2004;Build 12
"RTN","BPSOSU",3,0)
 Q
"RTN","BPSOSU",4,0)
 ; some common utilities called a lot.
"RTN","BPSOSU",5,0)
 ;
"RTN","BPSOSU",6,0)
 ; SETSTAT - set status field for ^BPST(ABSBRXI,
"RTN","BPSOSU",7,0)
 ; Input: 
"RTN","BPSOSU",8,0)
 ;   ABSBRXI - This needs to be newed and defined by the calling routine
"RTN","BPSOSU",9,0)
 ;   STATUS  - Value to set into BPS Transaction
"RTN","BPSOSU",10,0)
SETSTAT(STATUS) ;EP - from many places
"RTN","BPSOSU",11,0)
 ; set ^BPST( status for ABSBRXI
"RTN","BPSOSU",12,0)
 ;
"RTN","BPSOSU",13,0)
 ; Timing problem:  if response got processed before the SETCSTAT
"RTN","BPSOSU",14,0)
 ; was sent for "waiting to process response",  don't reset it now.
"RTN","BPSOSU",15,0)
 I STATUS=80,$P(^BPST(ABSBRXI,0),U,2)>80 Q
"RTN","BPSOSU",16,0)
 ;
"RTN","BPSOSU",17,0)
 ; Perhaps other such detection would be a good idea here.
"RTN","BPSOSU",18,0)
 ;
"RTN","BPSOSU",19,0)
 ; LOCK the file - something is very wrong if you can't get the lock
"RTN","BPSOSU",20,0)
 F  L +^BPST(ABSBRXI):300 Q:$T  Q:'$$IMPOSS^BPSOSUE("L","RTI","LOCK +^BPST",,"SETSTAT",$T(+0))
"RTN","BPSOSU",21,0)
 N DIE,DA,DR,X S DIE=9002313.59,DA=ABSBRXI,DR="1///"_STATUS_";7///NOW"
"RTN","BPSOSU",22,0)
 I STATUS=0 S DR=DR_";15///NOW" ; START TIME, too.
"RTN","BPSOSU",23,0)
 D ^DIE
"RTN","BPSOSU",24,0)
 N X S X="" F  S X=$O(^BPST("AD",X)) Q:X=""  D
"RTN","BPSOSU",25,0)
 .I X'=STATUS K ^BPST("AD",X,ABSBRXI)
"RTN","BPSOSU",26,0)
 I STATUS=99 D STATUS99
"RTN","BPSOSU",27,0)
 L -^BPST(ABSBRXI)
"RTN","BPSOSU",28,0)
 Q
"RTN","BPSOSU",29,0)
 ;
"RTN","BPSOSU",30,0)
 ; STATUS99 - Special activity when a claim reaches status 99
"RTN","BPSOSU",31,0)
 ; Input:
"RTN","BPSOSU",32,0)
 ;   ABSBRXI - This is called by SETSTAT (above) and this variable is set
"RTN","BPSOSU",33,0)
STATUS99 ;
"RTN","BPSOSU",34,0)
 ; Transaction log in .57  (but not if it's a canceled transaction!)
"RTN","BPSOSU",35,0)
 N RX,RF,CLMSTAT
"RTN","BPSOSU",36,0)
 S RX=$P(ABSBRXI,"."),RF=+$E($P(ABSBRXI,".",2),1,4)
"RTN","BPSOSU",37,0)
 ;
"RTN","BPSOSU",38,0)
 ; Get status of the claim
"RTN","BPSOSU",39,0)
 S CLMSTAT=$$CATEG^BPSOSUC(ABSBRXI)
"RTN","BPSOSU",40,0)
 ;
"RTN","BPSOSU",41,0)
 ; Canceled - shouldn't we restore old .57 into this .59?
"RTN","BPSOSU",42,0)
 I $P($G(^BPST(ABSBRXI,3)),U,2) D
"RTN","BPSOSU",43,0)
 . D LOG^BPSOSL($T(+0)_" - Cancellation succeeded.")
"RTN","BPSOSU",44,0)
 E  D
"RTN","BPSOSU",45,0)
 . N BPS57 S BPS57=$$NEW57(ABSBRXI)
"RTN","BPSOSU",46,0)
 . D TRANSACT^BPSOSBC(BPS57) ; hand it to posting
"RTN","BPSOSU",47,0)
 . D RECEIPT(BPS57) ; automatic receipt printing
"RTN","BPSOSU",48,0)
 ;
"RTN","BPSOSU",49,0)
 ; If the Reverse Then Resubmit field is set to Resubmitting (2),
"RTN","BPSOSU",50,0)
 ;   then set to 'Done' (0)
"RTN","BPSOSU",51,0)
 I $P(^BPST(ABSBRXI,1),U,12)=2 S $P(^BPST(ABSBRXI,1),U,12)=0
"RTN","BPSOSU",52,0)
 ;
"RTN","BPSOSU",53,0)
 ; If resubmit flag is set to 'Reverse, then Resubmit' (1), see about
"RTN","BPSOSU",54,0)
 ;   doing a resubmit
"RTN","BPSOSU",55,0)
 I $P(^BPST(ABSBRXI,1),U,12)=1 D
"RTN","BPSOSU",56,0)
 . ;
"RTN","BPSOSU",57,0)
 . ; Slot stuff
"RTN","BPSOSU",58,0)
 . N OLDSLOT,SLOT,SKIP,SITE
"RTN","BPSOSU",59,0)
 . S OLDSLOT=$$GETSLOT^BPSOSL
"RTN","BPSOSU",60,0)
 . S SLOT=ABSBRXI D SETSLOT^BPSOSL(SLOT)
"RTN","BPSOSU",61,0)
 . D LOG^BPSOSL($T(+0)_" "_SLOT_" Reverse then Resubmit attempt:"_$J)
"RTN","BPSOSU",62,0)
 . ;
"RTN","BPSOSU",63,0)
 . ; Initialize the skip flag
"RTN","BPSOSU",64,0)
 . S SKIP=0
"RTN","BPSOSU",65,0)
 . ;
"RTN","BPSOSU",66,0)
 . ; Get Site info and make sure it exists
"RTN","BPSOSU",67,0)
 . I 'RF S SITE=$$GET1^DIQ(52,RX,20,"I")
"RTN","BPSOSU",68,0)
 . I RF S SITE=$$GET1^DIQ(52.1,RF_","_RX,8,"I")
"RTN","BPSOSU",69,0)
 . I '$G(SITE) D
"RTN","BPSOSU",70,0)
 .. D LOG^BPSOSL($T(+0)_" Cannot - No site information")
"RTN","BPSOSU",71,0)
 .. S SKIP=1
"RTN","BPSOSU",72,0)
 . ;
"RTN","BPSOSU",73,0)
 . ; Check the ECME switch for the site
"RTN","BPSOSU",74,0)
 . I $G(SITE),'$$ECMEON^BPSUTIL(SITE) D
"RTN","BPSOSU",75,0)
 . . D LOG^BPSOSL($T(+0)_" Cannot - ECME switch is off for the site")
"RTN","BPSOSU",76,0)
 . . S SKIP=1
"RTN","BPSOSU",77,0)
 . ;
"RTN","BPSOSU",78,0)
 . ; Check for NPI after drop-dead date
"RTN","BPSOSU",79,0)
 . I $G(SITE),$$NPIREQ^BPSNPI(DT),$$DIVNPI^BPSBUTL(SITE)="" D
"RTN","BPSOSU",80,0)
 . . D LOG^BPSOSL($T(+0)_" Cannot - NPI not available for the site")
"RTN","BPSOSU",81,0)
 . . S SKIP=1
"RTN","BPSOSU",82,0)
 . ;
"RTN","BPSOSU",83,0)
 . ; If reversal was not successful, log message and quit
"RTN","BPSOSU",84,0)
 . I CLMSTAT'="E REVERSAL ACCEPTED" D
"RTN","BPSOSU",85,0)
 . . D LOG^BPSOSL($T(+0)_" Cannot - Reversal failed - "_X)
"RTN","BPSOSU",86,0)
 . . S SKIP=1
"RTN","BPSOSU",87,0)
 . ;
"RTN","BPSOSU",88,0)
 . ; Check if the MOREDATA array is defined
"RTN","BPSOSU",89,0)
 . I '$D(^XTMP("BPSOSRB","MOREDATA",ABSBRXI,"RESUB")) D
"RTN","BPSOSU",90,0)
 . . D LOG^BPSOSL($T(+0)_" Cannot - MOREDATA array undefined")
"RTN","BPSOSU",91,0)
 . . S SKIP=1
"RTN","BPSOSU",92,0)
 . ;
"RTN","BPSOSU",93,0)
 . ; If skip flag is set, clear the resubmit flag and do nothing else
"RTN","BPSOSU",94,0)
 . ; Else resubmit the claim and set resubmit flag
"RTN","BPSOSU",95,0)
 . ;  to 'Resubmitting'
"RTN","BPSOSU",96,0)
 . I SKIP S $P(^BPST(ABSBRXI,1),U,12)=0
"RTN","BPSOSU",97,0)
 . E  D
"RTN","BPSOSU",98,0)
 . . K MOREDATA
"RTN","BPSOSU",99,0)
 . . M MOREDATA=^XTMP("BPSOSRB","MOREDATA",ABSBRXI,"RESUB")
"RTN","BPSOSU",100,0)
 . . K ^XTMP("BPSOSRB","MOREDATA",ABSBRXI,"RESUB")
"RTN","BPSOSU",101,0)
 . . D LOG^BPSOSL($T(+0)_" Now resubmit "_$J)
"RTN","BPSOSU",102,0)
 . . D CLAIM^BPSOSRB(RX,RF,ABSBRXI,.MOREDATA)
"RTN","BPSOSU",103,0)
 . D RELSLOT^BPSOSL
"RTN","BPSOSU",104,0)
 . I OLDSLOT D SETSLOT^BPSOSL(OLDSLOT)
"RTN","BPSOSU",105,0)
 ;
"RTN","BPSOSU",106,0)
 ; Check Auto-Reversed claims to see if they should be resubmitted, which
"RTN","BPSOSU",107,0)
 ;  should be done if the reversal was accepted and the RX/Fill was released
"RTN","BPSOSU",108,0)
 ;  while waiting for the payer response
"RTN","BPSOSU",109,0)
 ; Need to check for 'normal' auto-reversals
"RTN","BPSOSU",110,0)
 I CLMSTAT="E REVERSAL ACCEPTED",$$RXRLDT^PSOBPSUT(RX,RF) D
"RTN","BPSOSU",111,0)
 . N CLAIMIEN,AUTOREV
"RTN","BPSOSU",112,0)
 . S CLAIMIEN=$$GET1^DIQ(9002313.59,ABSBRXI,3,"I")
"RTN","BPSOSU",113,0)
 . I '$G(CLAIMIEN) Q
"RTN","BPSOSU",114,0)
 . S AUTOREV=$$GET1^DIQ(9002313.02,CLAIMIEN,.07,"I")
"RTN","BPSOSU",115,0)
 . I $G(AUTOREV)'=1 Q
"RTN","BPSOSU",116,0)
 . N BDOS,BRES,BMES,BMSG
"RTN","BPSOSU",117,0)
 . D LOG^BPSOSL($T(+0)_" Submit released auto-reversal")
"RTN","BPSOSU",118,0)
 . S BDOS=$$DOSDATE^BPSSCRRS(RX,RF)
"RTN","BPSOSU",119,0)
 . S BRES=$$EN^BPSNCPDP(RX,RF,BDOS,"ARES")
"RTN","BPSOSU",120,0)
 . D LOG^BPSOSL($T(+0)_" Response from BPSNCPDP: "_BRES)
"RTN","BPSOSU",121,0)
 . S BMSG=$P(BRES,U,2),BRES=+BRES
"RTN","BPSOSU",122,0)
 . S BMES="Submitted to ECME: Resubmit for released autoreversal"
"RTN","BPSOSU",123,0)
 . S BMES=BMES_$S(BRES=1:"-NO SUBMISSION VIA ECME",BRES=4:"-NOT PROCESSED",BRES=5:"-SOFTWARE ERROR",1:"")
"RTN","BPSOSU",124,0)
 . D ECMEACT^PSOBPSU1(RX,RF,BMES,.5)
"RTN","BPSOSU",125,0)
 . I BRES=2 D ECMEACT^PSOBPSU1(RX,RF,"Not ECME Billable: "_BMSG,.5)
"RTN","BPSOSU",126,0)
 ;
"RTN","BPSOSU",127,0)
 ; And at random times, winnow the log files 
"RTN","BPSOSU",128,0)
 I $R(10000)=0 D
"RTN","BPSOSU",129,0)
 . N ZTRTN,ZTIO,ZTSAVE,ZTDTH
"RTN","BPSOSU",130,0)
 . S ZTRTN="SILENT^BPSOSK(1)"
"RTN","BPSOSU",131,0)
 . S ZTIO="",ZTDTH=$$TADD^BPSOSUD(DT,1)_".0222" ; tomorrow early a.m.
"RTN","BPSOSU",132,0)
 . D ^%ZTLOAD
"RTN","BPSOSU",133,0)
 Q
"RTN","BPSOSU",134,0)
 ;
"RTN","BPSOSU",135,0)
NEW57(RXI) ;EP - copy this ^BPST(RXI) into ^BPSTL(N)
"RTN","BPSOSU",136,0)
 F  L +^BPSTL:300 Q:$T  Q:'$$IMPOSS^BPSOSUE("L","RTI","LOCK ^BPSTL",,"NEW57",$T(+0))
"RTN","BPSOSU",137,0)
NEW57A N N S N=$P(^BPSTL(0),U,3)+1
"RTN","BPSOSU",138,0)
 N C S C=$P(^BPSTL(0),U,4)+1
"RTN","BPSOSU",139,0)
 S $P(^BPSTL(0),U,3,4)=N_U_C
"RTN","BPSOSU",140,0)
 I $D(^BPSTL(N)) G NEW57A ; should never happen
"RTN","BPSOSU",141,0)
 L -^BPSTL
"RTN","BPSOSU",142,0)
 M ^BPSTL(N)=^BPST(RXI)
"RTN","BPSOSU",143,0)
 ;
"RTN","BPSOSU",144,0)
 ; Indexing - First, fileman indexing
"RTN","BPSOSU",145,0)
 D
"RTN","BPSOSU",146,0)
 . N DIK,DA S DIK="^BPSTL(",DA=N N N D IX1^DIK
"RTN","BPSOSU",147,0)
 ;
"RTN","BPSOSU",148,0)
 ; The NON-FILEMAN index on RXI,RXR
"RTN","BPSOSU",149,0)
 D
"RTN","BPSOSU",150,0)
 . N INDEX,A,B,TYPE S TYPE=$E(RXI,$L(RXI))
"RTN","BPSOSU",151,0)
 . I TYPE=1!(TYPE=2) D
"RTN","BPSOSU",152,0)
 . . S A=$P(^BPSTL(N,1),U,11)
"RTN","BPSOSU",153,0)
 . . S B=$P(^BPSTL(N,1),U)
"RTN","BPSOSU",154,0)
 . . S INDEX=$S(TYPE=1:"RXIRXR",TYPE=2:"POSTAGE")
"RTN","BPSOSU",155,0)
 . E  I TYPE=3 D
"RTN","BPSOSU",156,0)
 . . S A=$P(^BPSTL(N,0),U,7)
"RTN","BPSOSU",157,0)
 . . S B=$P(^BPSTL(N,1),U,3) ; VCPT
"RTN","BPSOSU",158,0)
 . . S INDEX="OTHERS"
"RTN","BPSOSU",159,0)
 . E  D IMPOSS^BPSOSUE("DB,P","TI","Bad TYPE="_TYPE,"in RXI="_RXI,"NEW57",$T(+0))
"RTN","BPSOSU",160,0)
 . S ^BPSTL("NON-FILEMAN",INDEX,A,B,N)=""
"RTN","BPSOSU",161,0)
 Q N
"RTN","BPSOSU",162,0)
 ; $$PREV57(point to 57) returns pointer to previous transaction
"RTN","BPSOSU",163,0)
 ; for the same RXI,RXR - returns "" if no such
"RTN","BPSOSU",164,0)
PREV57(N57) ; EP -
"RTN","BPSOSU",165,0)
 N RXI,RXR S RXI=$P(^BPSTL(N57,1),U,11)
"RTN","BPSOSU",166,0)
 S RXR=$P(^BPSTL(N57,1),U)
"RTN","BPSOSU",167,0)
 I RXI=""!(RXR="") Q ""
"RTN","BPSOSU",168,0)
 Q $O(^BPSTL("NON-FILEMAN","RXIRXR",RXI,RXR,N57),-1)
"RTN","BPSOSU",169,0)
 ;
"RTN","BPSOSU",170,0)
 ; SETCSTAT - set the status for every prescription associated with
"RTN","BPSOSU",171,0)
 ; this claim
"RTN","BPSOSU",172,0)
 ;
"RTN","BPSOSU",173,0)
SETCSTAT(CLAIM,STATUS)       ;EP - BPSOSAM
"RTN","BPSOSU",174,0)
 N ABSBRXI
"RTN","BPSOSU",175,0)
 I $$ISREVERS(CLAIM) D  Q  ; different for reversals
"RTN","BPSOSU",176,0)
 .S ABSBRXI=$$RXI4REV(CLAIM) I ABSBRXI D SETSTAT(STATUS)
"RTN","BPSOSU",177,0)
 S ABSBRXI=""
"RTN","BPSOSU",178,0)
 F  S ABSBRXI=$O(^BPST("AE",CLAIM,ABSBRXI)) Q:ABSBRXI=""  D
"RTN","BPSOSU",179,0)
 .D SETSTAT(STATUS)
"RTN","BPSOSU",180,0)
 Q
"RTN","BPSOSU",181,0)
ISREVERS(CLAIM) ;EP - BPSOSP2
"RTN","BPSOSU",182,0)
 ; is this a reversal claim?  $$ returns 1 or 0
"RTN","BPSOSU",183,0)
 Q $P($G(^BPSC(CLAIM,100)),"^",3)=11!($P($G(^BPSC(CLAIM,100)),"^",3)="B2")  ;LJE;9/19/03
"RTN","BPSOSU",184,0)
RXI4REV(REVCLAIM)  ; given IEN of reversal claim $$this to get RXI
"RTN","BPSOSU",185,0)
 ; The reversal claim must be associated with exactly one RXI.
"RTN","BPSOSU",186,0)
 N RET,MBN ; MBN=Must Be Null
"RTN","BPSOSU",187,0)
 S RET=$O(^BPST("AER",REVCLAIM,0)),MBN=$O(^(RET))
"RTN","BPSOSU",188,0)
 I 'RET D IMPOSS^BPSOSUE("DB,P","TI","REVCLAIM="_REVCLAIM_" and ""AER"" index",,"RXI4REV",$T(+0)) ; may not apply to certification testing!! SEE ABOVE.
"RTN","BPSOSU",189,0)
 I MBN'="" D IMPOSS^BPSOSUE("DB,P","TI","REVCLAIM="_REVCLAIM_" points back to multiple .59 entries",,"RXI4REV",$T(+0))
"RTN","BPSOSU",190,0)
 Q RET
"RTN","BPSOSU",191,0)
 ;
"RTN","BPSOSU",192,0)
 ; SETCOMMS - for each prescription associated with this claim,
"RTN","BPSOSU",193,0)
 ; point back to the log of the comms session wherein xmit/rcv happened
"RTN","BPSOSU",194,0)
 ;
"RTN","BPSOSU",195,0)
SETCOMMS(CLAIM,POINTER) ;EP - BPSOSAM
"RTN","BPSOSU",196,0)
 N ABSBRXI S ABSBRXI=""
"RTN","BPSOSU",197,0)
 F  S ABSBRXI=$O(^BPST("AE",CLAIM,ABSBRXI)) Q:ABSBRXI=""  D
"RTN","BPSOSU",198,0)
 .S $P(^BPST(ABSBRXI,0),"^",12)=POINTER
"RTN","BPSOSU",199,0)
 Q
"RTN","BPSOSU",200,0)
 ;
"RTN","BPSOSU",201,0)
 ; SETRESU - Set Result  into ^BPST(ABSBRXI,2)
"RTN","BPSOSU",202,0)
 ;
"RTN","BPSOSU",203,0)
 ;    NOTE !!! NOTE !!! NOTE !!!  ABSBRXI must be set (not RXI) !!!
"RTN","BPSOSU",204,0)
 ;
"RTN","BPSOSU",205,0)
SETRESU(RESULT,TEXT)    ;EP - from many places
"RTN","BPSOSU",206,0)
 S $P(^BPST(ABSBRXI,2),U)=RESULT
"RTN","BPSOSU",207,0)
 I $G(TEXT)]"" D
"RTN","BPSOSU",208,0)
 . N X,Y S X=^BPST(ABSBRXI,2)
"RTN","BPSOSU",209,0)
 . S Y=$P(X,U),X=$P(X,U,2,$L(X,U))
"RTN","BPSOSU",210,0)
 . I X="" S X=$E(TEXT,1,255-$L(Y)-1)
"RTN","BPSOSU",211,0)
 . E  D
"RTN","BPSOSU",212,0)
 .. I $E(X,1,12)'="[Previously:" D
"RTN","BPSOSU",213,0)
 ... D PREVISLY^BPSOSIZ(ABSBRXI)
"RTN","BPSOSU",214,0)
 ... S X=$P(^BPST(ABSBRXI,2),U,2)
"RTN","BPSOSU",215,0)
 .. S X=$E(TEXT_X,1,255-$L(Y)-1)
"RTN","BPSOSU",216,0)
 . S ^BPST(ABSBRXI,2)=Y_U_X
"RTN","BPSOSU",217,0)
 I RESULT=0 Q  ; look at the associated RESPONSE in ^BPSR(
"RTN","BPSOSU",218,0)
 ;
"RTN","BPSOSU",219,0)
 ; For other RESULT codes, put a textual explanation in 
"RTN","BPSOSU",220,0)
 Q
"RTN","BPSOSU",221,0)
 ;
"RTN","BPSOSU",222,0)
 ; SETCRESU - set the result code for every prescription assoc'd with
"RTN","BPSOSU",223,0)
 ; this claim
"RTN","BPSOSU",224,0)
SETCRESU(CLAIM,RESULT,TEXT) ;
"RTN","BPSOSU",225,0)
 N ABSBRXI S ABSBRXI=""
"RTN","BPSOSU",226,0)
 F  S ABSBRXI=$O(^BPST("AE",CLAIM,ABSBRXI)) Q:ABSBRXI=""  D
"RTN","BPSOSU",227,0)
 .D SETRESU(RESULT,$G(TEXT))
"RTN","BPSOSU",228,0)
 Q
"RTN","BPSOSU",229,0)
 ;
"RTN","BPSOSU",230,0)
 ; STATI(X) gives a text version of what status code X means.
"RTN","BPSOSU",231,0)
 ;
"RTN","BPSOSU",232,0)
STATI(X) ;EP - from many places ; perhaps should be a Fileman file
"RTN","BPSOSU",233,0)
 I X=99 Q "Done"
"RTN","BPSOSU",234,0)
 I X=50 Q "Waiting for transmit"
"RTN","BPSOSU",235,0)
 I X=30 Q "Waiting for packet build"
"RTN","BPSOSU",236,0)
 I X=0 Q "Waiting to start"
"RTN","BPSOSU",237,0)
 I X=10 Q "Gathering claim info"
"RTN","BPSOSU",238,0)
 I X=40 Q "Packet being built"
"RTN","BPSOSU",239,0)
 I X=60 Q "Transmitting"
"RTN","BPSOSU",240,0)
 I X=61 Q "Transmitting"
"RTN","BPSOSU",241,0)
 I X=70 Q "Receiving response"
"RTN","BPSOSU",242,0)
 I X=80 Q "Waiting to process response"
"RTN","BPSOSU",243,0)
 I X=90 Q "Processing response"
"RTN","BPSOSU",244,0)
 I X=51 Q "Wait for retry (comms error)"
"RTN","BPSOSU",245,0)
 I X=31 Q "Wait for retry (insurer asleep)"
"RTN","BPSOSU",246,0)
 I X=19 Q "Special grouping"
"RTN","BPSOSU",247,0)
 I X=98 Q "Resubmitting" ;Used only by STATUS^BPSOSRX (Not stored in BPS Transactions)
"RTN","BPSOSU",248,0)
 ; When you add new X=, account for these in FETSTAT^BPSOS2
"RTN","BPSOSU",249,0)
 Q "?"_X_"?"
"RTN","BPSOSU",250,0)
 ;
"RTN","BPSOSU",251,0)
 ; RESULTI(X) gives a text version of what result code X means
"RTN","BPSOSU",252,0)
 ;
"RTN","BPSOSU",253,0)
RESULTI(X)         ;
"RTN","BPSOSU",254,0)
 I X=0 Q "See detail in BPS RESPONSES file" ; say more
"RTN","BPSOSU",255,0)
 Q "Result code "_X ; a catch-all default
"RTN","BPSOSU",256,0)
 ;
"RTN","BPSOSU",257,0)
RECEIPT(IEN57) ; This is where the receipt would go - taskman it to print in
"RTN","BPSOSU",258,0)
 ; background, somewhere, somehow
"RTN","BPSOSU",259,0)
 Q:'$$DORECEI
"RTN","BPSOSU",260,0)
 Q
"RTN","BPSOSU",261,0)
DORECEI() ; Should we print a receipt? 
"RTN","BPSOSU",262,0)
 ; Site-specific conditions needed.
"RTN","BPSOSU",263,0)
 ; example:  electronic claims only;
"RTN","BPSOSU",264,0)
 ;   only claims with co-pay;
"RTN","BPSOSU",265,0)
 ;   etc.
"RTN","BPSOSU",266,0)
 Q 0
"RTN","BPSPHAR")
0^12^B1520532^B1377330
"RTN","BPSPHAR",1,0)
BPSPHAR ;BHAM ISC/BEE - ECME MGR PHAR OPTION ;14-FEB-05
"RTN","BPSPHAR",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSPHAR",3,0)
 ;; Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","BPSPHAR",4,0)
 ;
"RTN","BPSPHAR",5,0)
 ;This routine is called by the [BPS SETUP PHARMACY] menu option. It updates
"RTN","BPSPHAR",6,0)
 ;several fields in the [BPS PHARMACIES] file.
"RTN","BPSPHAR",7,0)
 ;
"RTN","BPSPHAR",8,0)
 Q
"RTN","BPSPHAR",9,0)
 ;
"RTN","BPSPHAR",10,0)
EN N D0,DA,DI,DIC,DLAYGO,DIE,DIRUT,DQ,DR,DTOUT,DUOUT,X,Y
"RTN","BPSPHAR",11,0)
 ;
"RTN","BPSPHAR",12,0)
 ;First select the pharmacy or enter a new one
"RTN","BPSPHAR",13,0)
 W !! S DIC(0)="QEALM",(DLAYGO,DIC)=9002313.56,DIC("A")="Select BPS PHARMACIES NAME: "
"RTN","BPSPHAR",14,0)
 D ^DIC
"RTN","BPSPHAR",15,0)
 ;
"RTN","BPSPHAR",16,0)
 ;Check for "^", timeout, or blank entry
"RTN","BPSPHAR",17,0)
 I ($G(DUOUT)=1)!($G(DTOUT)=1)!($G(Y)=-1) Q
"RTN","BPSPHAR",18,0)
 ;
"RTN","BPSPHAR",19,0)
 ;Pull internal entry
"RTN","BPSPHAR",20,0)
 S DA=$P($G(Y),U) Q:'$G(Y)
"RTN","BPSPHAR",21,0)
 ;
"RTN","BPSPHAR",22,0)
 ; Display the BPS Pharmacy name, NCPDP #, and NPI
"RTN","BPSPHAR",23,0)
 W !!,"NAME: ",$P($G(^BPS(9002313.56,DA,0)),U,1)
"RTN","BPSPHAR",24,0)
 W !,"STATUS: ",$$GET1^DIQ(9002313.56,DA,.1,"E")
"RTN","BPSPHAR",25,0)
 W !,"NCPDP #: ",$P($G(^BPS(9002313.56,DA,0)),U,2)
"RTN","BPSPHAR",26,0)
 W !,"NPI: ",$P($G(^BPS(9002313.56,DA,"NPI")),U,1)
"RTN","BPSPHAR",27,0)
 ;
"RTN","BPSPHAR",28,0)
 ;Now edit OUTPATIENT SITE, CMOP SWITCH, AUTO-REVERSE PARAMETER, and the DEFAULT DEA #
"RTN","BPSPHAR",29,0)
 S DIE=9002313.56
"RTN","BPSPHAR",30,0)
 S DR="13800;1;.09;.03"
"RTN","BPSPHAR",31,0)
 S DR(2,9002313.5601)=".01"
"RTN","BPSPHAR",32,0)
 D ^DIE
"RTN","BPSPHAR",33,0)
 ;
"RTN","BPSPHAR",34,0)
 Q
"RTN","BPSUTIL")
0^18^B4017713^B4023220
"RTN","BPSUTIL",1,0)
BPSUTIL ;BHAM ISC/FLS - General Utility functions ;06/01/2004
"RTN","BPSUTIL",2,0)
 ;;1.0;E CLAIMS MGMT ENGINE;**1,3,2**;JUN 2004;Build 12
"RTN","BPSUTIL",3,0)
 Q
"RTN","BPSUTIL",4,0)
DIC19 ; Convert menu item descriptions to upper case
"RTN","BPSUTIL",5,0)
 N DIC,ENT,GLO,TXT,OPT,VAR,NEW,I
"RTN","BPSUTIL",6,0)
 S DIC=19,GLO="^DIC",TXT="BPS"
"RTN","BPSUTIL",7,0)
 F  S TXT=$O(@GLO@(DIC,"B",TXT)) Q:(TXT]"BPT")!(TXT="")  D
"RTN","BPSUTIL",8,0)
 .  S ENT=$O(@GLO@(DIC,"B",TXT,""))
"RTN","BPSUTIL",9,0)
 .  S VAR=$G(@GLO@(DIC,ENT,0)) Q:VAR=""
"RTN","BPSUTIL",10,0)
 .  S OPT=$P(VAR,"^",2),NEW=OPT
"RTN","BPSUTIL",11,0)
 .  F I=1:1:$L(OPT," ") D
"RTN","BPSUTIL",12,0)
 .  .  S $P(NEW," ",I)=$$MAKEUPR($P(OPT," ",I))
"RTN","BPSUTIL",13,0)
 .  W !,"NEW ",NEW
"RTN","BPSUTIL",14,0)
 .  W !,"OLD ",OPT
"RTN","BPSUTIL",15,0)
 .  Q
"RTN","BPSUTIL",16,0)
 Q
"RTN","BPSUTIL",17,0)
 ;
"RTN","BPSUTIL",18,0)
MAKEUPR(X) ;
"RTN","BPSUTIL",19,0)
 N TST,VAL
"RTN","BPSUTIL",20,0)
 S VAL=X
"RTN","BPSUTIL",21,0)
 S TST=$$UPPER(X)
"RTN","BPSUTIL",22,0)
 I $L(TST)>2,"|THE|FOR|NOW|AND|FOR|"'[("|"_TST_"|") S $E(VAL)=$$UPPER($E(VAL))
"RTN","BPSUTIL",23,0)
 Q VAL
"RTN","BPSUTIL",24,0)
 ;
"RTN","BPSUTIL",25,0)
UPPER(X) ;
"RTN","BPSUTIL",26,0)
 Q $TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","BPSUTIL",27,0)
 ;
"RTN","BPSUTIL",28,0)
 ; ECMEON
"RTN","BPSUTIL",29,0)
 ;   Input:
"RTN","BPSUTIL",30,0)
 ;      SITE - Pointer to Outpatient Site file (#59)
"RTN","BPSUTIL",31,0)
 ;   Output
"RTN","BPSUTIL",32,0)
 ;      1 - ECME is turned ON for the Outpatient Site
"RTN","BPSUTIL",33,0)
 ;      0 - ECME is not turned ON for the Outpatient Site.
"RTN","BPSUTIL",34,0)
 ;   Note that ON means that the Outpatient site is linked to a BPS Pharmacy
"RTN","BPSUTIL",35,0)
 ;      and has a Pharmacy ID.
"RTN","BPSUTIL",36,0)
ECMEON(SITE) ;
"RTN","BPSUTIL",37,0)
 Q:'$G(SITE) 0
"RTN","BPSUTIL",38,0)
 N FACID
"RTN","BPSUTIL",39,0)
 S FACID=$$DIVNCPDP^BPSBUTL(SITE)
"RTN","BPSUTIL",40,0)
 I FACID="" Q 0
"RTN","BPSUTIL",41,0)
 Q 1
"RTN","BPSUTIL",42,0)
 ;
"RTN","BPSUTIL",43,0)
CMOPON(SITE) ; - Returns 1 if CMOP is turned ON for ECME or 0 if not
"RTN","BPSUTIL",44,0)
 ; SITE - Pointer to #59 (OUTPATIENT SITE)
"RTN","BPSUTIL",45,0)
 Q:'$G(SITE) 0
"RTN","BPSUTIL",46,0)
 N PHRM S PHRM=$O(^BPS(9002313.56,"C",SITE,0)) I 'PHRM Q 0
"RTN","BPSUTIL",47,0)
 Q $$GET1^DIQ(9002313.56,PHRM,1,"I")
"RTN","BPSUTIL",48,0)
 ;
"RTN","BPSUTIL",49,0)
 ;Function returns STATUS flag from BPS PHARMACIES (file #56)
"RTN","BPSUTIL",50,0)
 ; Returns '1' for active or '0' for inactive BPS Pharmacy
"RTN","BPSUTIL",51,0)
BPSACTV(BPSPHARM) ; 
"RTN","BPSUTIL",52,0)
 Q:'$G(BPSPHARM) 0
"RTN","BPSUTIL",53,0)
 Q +$P($G(^BPS(9002313.56,BPSPHARM,0)),U,10)
"RTN","BPSUTIL",54,0)
 ;
"RTN","BPSUTIL",55,0)
 ;Function to return field data from DRUG file (#50)
"RTN","BPSUTIL",56,0)
 ; Parameters
"RTN","BPSUTIL",57,0)
 ;  DRGIEN - IEN of DRUG FILE #50
"RTN","BPSUTIL",58,0)
 ;  FLDNUM - Field Number(s) (like .01)
"RTN","BPSUTIL",59,0)
 ;  INTEXT - Specifies internal or external value of returned field
"RTN","BPSUTIL",60,0)
 ;         - optional, defaults to "I"
"RTN","BPSUTIL",61,0)
 ;  DRGARR - Array to return value(s).  Optional.  Pass by reference.
"RTN","BPSUTIL",62,0)
 ;           See EN^DIQ documentation for variable DIQ
"RTN","BPSUTIL",63,0)
 ;
"RTN","BPSUTIL",64,0)
 ; Function returns field data if one field is specified.  If
"RTN","BPSUTIL",65,0)
 ;   multiple fields, the function will return "" and the field
"RTN","BPSUTIL",66,0)
 ;   values are returned in DRGARR    
"RTN","BPSUTIL",67,0)
DRUGDIE(DRGIEN,FLDNUM,INTEXT,DRGARR) ; Return field values for Drug file 
"RTN","BPSUTIL",68,0)
 I $G(DRGIEN)=""!($G(FLDNUM)="") Q ""
"RTN","BPSUTIL",69,0)
 N DIQ,PSSDIY
"RTN","BPSUTIL",70,0)
 I $G(INTEXT)'="E" S INTEXT="I"
"RTN","BPSUTIL",71,0)
 S DIQ="DRGARR",DIQ(0)=INTEXT
"RTN","BPSUTIL",72,0)
 D EN^PSSDI(50,"BPS",50,.FLDNUM,.DRGIEN,.DIQ)
"RTN","BPSUTIL",73,0)
 Q $G(DRGARR(50,DRGIEN,FLDNUM,INTEXT))
"RTN","BPSUTIL",74,0)
 ;
"RTN","BPSUTIL",75,0)
 ;Function to do lookup on DRUG file (#50)
"RTN","BPSUTIL",76,0)
 ; Paramters
"RTN","BPSUTIL",77,0)
 ;   DIC - Setup per fileman documentation for call to ^DIC
"RTN","BPSUTIL",78,0)
 ;
"RTN","BPSUTIL",79,0)
 ; Returns variables as documented for call to ^DIC except X
"RTN","BPSUTIL",80,0)
 ;   will not be returned.
"RTN","BPSUTIL",81,0)
DRUGDIC(DIC) ; Look up on DRUG FILE (#50)
"RTN","BPSUTIL",82,0)
 I '$G(DIC) Q
"RTN","BPSUTIL",83,0)
 N PSSDIY
"RTN","BPSUTIL",84,0)
 D DIC^PSSDI(50,"BPS",.DIC)
"RTN","BPSUTIL",85,0)
 Q
"RTN","BPSUTIL",86,0)
 ;
"SEC","^DIC",9002313.91,9002313.91,0,"AUDIT")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DD")
@
"SEC","^DIC",9002313.91,9002313.91,0,"DEL")
@
"SEC","^DIC",9002313.91,9002313.91,0,"LAYGO")
@
"SEC","^DIC",9002313.91,9002313.91,0,"RD")
Pp
"SEC","^DIC",9002313.91,9002313.91,0,"WR")
@
"VER")
8.0^22.0
"^DD",9002313.02,9002313.02,.01,0)
Claim ID^F^^0;1^K:$L(X)>32!($L(X)<1) X
"^DD",9002313.02,9002313.02,.01,1,0)
^.1
"^DD",9002313.02,9002313.02,.01,1,1,0)
9002313.02^B^MUMPS
"^DD",9002313.02,9002313.02,.01,1,1,1)
S ^BPSC("B",$E(X,1,32),DA)=""
"^DD",9002313.02,9002313.02,.01,1,1,2)
K ^BPSC("B",$E(X,1,32),DA)
"^DD",9002313.02,9002313.02,.01,1,1,"DT")
3030725
"^DD",9002313.02,9002313.02,.01,3)
Answer must be 1-32 characters in length.
"^DD",9002313.02,9002313.02,.01,21,0)
^^4^4^3060628^
"^DD",9002313.02,9002313.02,.01,21,1,0)
External Claim ID value.  This value is a concatenation of the text 'VA'
"^DD",9002313.02,9002313.02,.01,21,2,0)
along with the current year, the pharmacy ID, the VA National Plan ID
"^DD",9002313.02,9002313.02,.01,21,3,0)
(without the alpha prefix), and a unique sequence number.  Each of the
"^DD",9002313.02,9002313.02,.01,21,4,0)
four pieces are delimited by the equal sign ("=").
"^DD",9002313.02,9002313.02,.01,"DT")
3060628
"^DD",9002313.56,9002313.56,.02,0)
NCPDP #^F^^0;2^K:$L(X)>10!($L(X)<3) X
"^DD",9002313.56,9002313.56,.02,3)
This is a number assigned to your pharmacy by the NCPDP.  It was previously known as the NABP #.
"^DD",9002313.56,9002313.56,.02,21,0)
^.001^1^1^3060411^^
"^DD",9002313.56,9002313.56,.02,21,1,0)
The NCPDP # is sent as part of the electronic claim header.
"^DD",9002313.56,9002313.56,.02,"DT")
3060412
"^DD",9002313.56,9002313.56,41.01,0)
NPI^FX^^NPI;1^K:$L(X)>10!($L(X)<10)!'$$CHKDGT^XUSNPI(X) X
"^DD",9002313.56,9002313.56,41.01,3)
Enter a valid NPI (10 numeric digits with proper check digit).
"^DD",9002313.56,9002313.56,41.01,21,0)
^.001^3^3^3060616^^^
"^DD",9002313.56,9002313.56,41.01,21,1,0)
National Provider ID.  This is a unique ID assigned to providers by CMS.  
"^DD",9002313.56,9002313.56,41.01,21,2,0)
It is used as the second piece of the Claim ID field (.01) of BPS CLAIMS
"^DD",9002313.56,9002313.56,41.01,21,3,0)
file (#9002313.02) and is sent as part of the electronic claim header.
"^DD",9002313.56,9002313.56,41.01,"DT")
3060504
"^DD",9002313.56,9002313.56,41.02,0)
DATE/TIME OF LAST NPI CHANGE^D^^NPI;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",9002313.56,9002313.56,41.02,3)
Enter the data and time of the last change to the NPI.
"^DD",9002313.56,9002313.56,41.02,21,0)
^^1^1^3060628^
"^DD",9002313.56,9002313.56,41.02,21,1,0)
This is the date and time of the last change to the NPI value.
"^DD",9002313.56,9002313.56,41.02,"DT")
3060628
"^DD",9002313.91,9002313.91,0)
FIELD^^40^11
"^DD",9002313.91,9002313.91,0,"DDA")
N
"^DD",9002313.91,9002313.91,0,"DT")
3030512
"^DD",9002313.91,9002313.91,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",9002313.91,9002313.91,0,"IX","B",9002313.91,.01)

"^DD",9002313.91,9002313.91,0,"IX","C",9002313.91,.03)

"^DD",9002313.91,9002313.91,0,"IX","D",9002313.91,.06)

"^DD",9002313.91,9002313.91,0,"NM","BPS NCPDP FIELD DEFS")

"^DD",9002313.91,9002313.91,0,"PT",9002313.311,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.3121,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.5111,.01)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9201,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9202,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9203,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9204,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9205,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9206,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9207,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9208,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9209,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.921,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9213,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9214,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9215,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9216,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9217,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9218,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.9219,.02)

"^DD",9002313.91,9002313.91,0,"PT",9002313.922,.02)

"^DD",9002313.91,9002313.91,0,"VRPK")
BPS
"^DD",9002313.91,9002313.91,.01,0)
Number^RNJ6,2^^0;1^K:+X'=X!(X>800)!(X<0)!(X?.E1"."3N.N) X
"^DD",9002313.91,9002313.91,.01,1,0)
^.1
"^DD",9002313.91,9002313.91,.01,1,1,0)
9002313.91^B
"^DD",9002313.91,9002313.91,.01,1,1,1)
S ^BPSF(9002313.91,"B",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.01,1,1,2)
K ^BPSF(9002313.91,"B",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.01,3)
Type a Number between 0 and 800, 2 Decimal Digits
"^DD",9002313.91,9002313.91,.01,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.01,21,1,0)
The NCPDP field number from the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.01,"DT")
3030512
"^DD",9002313.91,9002313.91,.02,0)
ID^F^^0;2^K:$L(X)>2!($L(X)<2) X
"^DD",9002313.91,9002313.91,.02,3)
Answer must be 2 characters in length.
"^DD",9002313.91,9002313.91,.02,21,0)
^^2^2^3040121^
"^DD",9002313.91,9002313.91,.02,21,1,0)
The Alphanumeric field identifier.  Each field consists of
"^DD",9002313.91,9002313.91,.02,21,2,0)
a 3 digit numeric and a two digit alpha segment.
"^DD",9002313.91,9002313.91,.02,"DT")
2950406
"^DD",9002313.91,9002313.91,.03,0)
Name^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",9002313.91,9002313.91,.03,1,0)
^.1
"^DD",9002313.91,9002313.91,.03,1,1,0)
9002313.91^C
"^DD",9002313.91,9002313.91,.03,1,1,1)
S ^BPSF(9002313.91,"C",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.03,1,1,2)
K ^BPSF(9002313.91,"C",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.03,1,1,"DT")
3001007
"^DD",9002313.91,9002313.91,.03,3)
Answer must be 3-30 characters in length.
"^DD",9002313.91,9002313.91,.03,21,0)
^^2^2^3040121^
"^DD",9002313.91,9002313.91,.03,21,1,0)
Descriptive name the tells what the field is within the
"^DD",9002313.91,9002313.91,.03,21,2,0)
pharmacy environment.
"^DD",9002313.91,9002313.91,.03,"DT")
3001007
"^DD",9002313.91,9002313.91,.04,0)
Format^S^N:NUMERIC;A/N:ALPHA/NUMERIC;D:SIGNED NUMERIC;^0;4^Q
"^DD",9002313.91,9002313.91,.04,21,0)
^^2^2^3040121^
"^DD",9002313.91,9002313.91,.04,21,1,0)
M code goes here to format the field before storing it in the
"^DD",9002313.91,9002313.91,.04,21,2,0)
database.  
"^DD",9002313.91,9002313.91,.04,"DT")
2950406
"^DD",9002313.91,9002313.91,.05,0)
Length^NJ4,0^^0;5^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.91,9002313.91,.05,3)
Type a Number between 1 and 9999, 0 Decimal Digits
"^DD",9002313.91,9002313.91,.05,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.05,21,1,0)
Max length of the field from the NCPDP data dictionary.
"^DD",9002313.91,9002313.91,.05,"DT")
2950406
"^DD",9002313.91,9002313.91,.06,0)
5.1 ID^F^^5;1^K:$L(X)>2!($L(X)<2) X
"^DD",9002313.91,9002313.91,.06,1,0)
^.1
"^DD",9002313.91,9002313.91,.06,1,1,0)
9002313.91^D
"^DD",9002313.91,9002313.91,.06,1,1,1)
S ^BPSF(9002313.91,"D",$E(X,1,30),DA)=""
"^DD",9002313.91,9002313.91,.06,1,1,2)
K ^BPSF(9002313.91,"D",$E(X,1,30),DA)
"^DD",9002313.91,9002313.91,.06,1,1,"%D",0)
^^3^3^3020807^
"^DD",9002313.91,9002313.91,.06,1,1,"%D",1,0)
Cross reference of the 5.1 Field ID.  This cross reference will be used in
"^DD",9002313.91,9002313.91,.06,1,1,"%D",2,0)
the processing of the response as a means of translating the value to a
"^DD",9002313.91,9002313.91,.06,1,1,"%D",3,0)
field number.
"^DD",9002313.91,9002313.91,.06,1,1,"DT")
3020807
"^DD",9002313.91,9002313.91,.06,3)
Answer must be 2 characters in length.
"^DD",9002313.91,9002313.91,.06,21,0)
^^3^3^3040121^
"^DD",9002313.91,9002313.91,.06,21,1,0)
The same as the .02 field, but for specific use when creating
"^DD",9002313.91,9002313.91,.06,21,2,0)
5.1 claims.  The 5.1 fields were separated because IHS was doing
"^DD",9002313.91,9002313.91,.06,21,3,0)
3.x and 5.1 claims concurrently.
"^DD",9002313.91,9002313.91,.06,"DT")
3020807
"^DD",9002313.91,9002313.91,.07,0)
5.1 Length^NJ4,0^^5;2^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
"^DD",9002313.91,9002313.91,.07,3)
Type a Number between 1 and 9999, 0 Decimal Digits
"^DD",9002313.91,9002313.91,.07,21,0)
^^1^1^3040121^
"^DD",9002313.91,9002313.91,.07,21,1,0)
Length of the field from the 5.1 NCPDP standard.
"^DD",9002313.91,9002313.91,.07,"DT")
3020724
"^DD",9002313.91,9002313.91,10,0)
Get Code^9002313.9101^^10;0
"^DD",9002313.91,9002313.91,10,21,0)
^^2^2^3040121^
"^DD",9002313.91,9002313.91,10,21,1,0)
M code that tells the BPS system where to find the 
"^DD",9002313.91,9002313.91,10,21,2,0)
particular piece of data for this field.
"^DD",9002313.91,9002313.91,20,0)
Format Code^9002313.9102^^20;0
"^DD",9002313.91,9002313.91,20,21,0)
^^1^1^3040322^
"^DD",9002313.91,9002313.91,20,21,1,0)
M code to format the data before storing it in the claim.
"^DD",9002313.91,9002313.91,30,0)
Set Code^9002313.9103^^30;0
"^DD",9002313.91,9002313.91,30,21,0)
^^1^1^3040326^
"^DD",9002313.91,9002313.91,30,21,1,0)
M code to store the data in the appropriate segment within the claim.
"^DD",9002313.91,9002313.91,40,0)
5.1 Format Code^9002313.9104^^25;0
"^DD",9002313.91,9002313.91,40,21,0)
^.001^3^3^3040326^^
"^DD",9002313.91,9002313.91,40,21,1,0)
M code to format the data before storing it in the claim.
"^DD",9002313.91,9002313.91,40,21,2,0)
5.1 was separate within IHS because they were doing 3.2 and
"^DD",9002313.91,9002313.91,40,21,3,0)
5.1 at the same time.
"^DD",9002313.91,9002313.9101,0)
Get Code SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9101,0,"DT")
2950420
"^DD",9002313.91,9002313.9101,0,"NM","Get Code")

"^DD",9002313.91,9002313.9101,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9101,.01,0)
Get Code^WL^^0;1^Q
"^DD",9002313.91,9002313.9101,.01,"DT")
2950420
"^DD",9002313.91,9002313.9102,0)
Format Code SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9102,0,"DT")
2950420
"^DD",9002313.91,9002313.9102,0,"NM","Format Code")

"^DD",9002313.91,9002313.9102,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9102,.01,0)
Format Code^WL^^0;1^Q
"^DD",9002313.91,9002313.9102,.01,"DT")
2950420
"^DD",9002313.91,9002313.9103,0)
Set Code SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9103,0,"DT")
2950420
"^DD",9002313.91,9002313.9103,0,"NM","Set Code")

"^DD",9002313.91,9002313.9103,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9103,.01,0)
Set Code^WL^^0;1^Q
"^DD",9002313.91,9002313.9103,.01,"DT")
2950420
"^DD",9002313.91,9002313.9104,0)
5.1 Format Code SUB-FIELD^^.01^1
"^DD",9002313.91,9002313.9104,0,"DT")
3020724
"^DD",9002313.91,9002313.9104,0,"NM","5.1 Format Code")

"^DD",9002313.91,9002313.9104,0,"UP")
9002313.91
"^DD",9002313.91,9002313.9104,.01,0)
5.1 Format Code^WL^^0;1^Q
"^DD",9002313.91,9002313.9104,.01,"DT")
3020724
"^DIC",9002313.91,9002313.91,0)
BPS NCPDP FIELD DEFS^9002313.91
"^DIC",9002313.91,9002313.91,0,"GL")
^BPSF(9002313.91,
"^DIC",9002313.91,9002313.91,"%",0)
^1.005^1^1
"^DIC",9002313.91,9002313.91,"%",1,0)
BPS
"^DIC",9002313.91,9002313.91,"%","B","ABSP",1)

"^DIC",9002313.91,9002313.91,"%","B","BPS",1)

"^DIC",9002313.91,9002313.91,"%D",0)
^^3^3^3010205^^^^
"^DIC",9002313.91,9002313.91,"%D",1,0)
The NCPDP Data Dictionary
"^DIC",9002313.91,9002313.91,"%D",2,0)
Individual fields which combine into formatted packets.
"^DIC",9002313.91,9002313.91,"%D",3,0)
Installation overwrites this file, totally.
"^DIC",9002313.91,"B","BPS NCPDP FIELD DEFS",9002313.91)

"BLD",6355,6)
^4
**END**
**END**
