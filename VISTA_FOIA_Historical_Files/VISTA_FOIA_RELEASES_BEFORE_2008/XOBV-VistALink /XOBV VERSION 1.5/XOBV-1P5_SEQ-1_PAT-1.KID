Released XOBV*1.5*1 SEQ #1
Extracted from mail message
**KIDS**:XOBV*1.5*1^

**INSTALL NAME**
XOBV*1.5*1
"BLD",4283,0)
XOBV*1.5*1^VISTALINK^0^3060720^y
"BLD",4283,1,0)
^^2^2^3060707^
"BLD",4283,1,1,0)
For complete information, see the patch description for patch XOBV*1.5*1
"BLD",4283,1,2,0)
in the National Patch Module on FORUM.
"BLD",4283,4,0)
^9.64PA^^
"BLD",4283,6.3)
3
"BLD",4283,"ABPKG")
n
"BLD",4283,"KRN",0)
^9.67PA^8989.52^19
"BLD",4283,"KRN",.4,0)
.4
"BLD",4283,"KRN",.401,0)
.401
"BLD",4283,"KRN",.402,0)
.402
"BLD",4283,"KRN",.403,0)
.403
"BLD",4283,"KRN",.5,0)
.5
"BLD",4283,"KRN",.84,0)
.84
"BLD",4283,"KRN",3.6,0)
3.6
"BLD",4283,"KRN",3.8,0)
3.8
"BLD",4283,"KRN",9.2,0)
9.2
"BLD",4283,"KRN",9.8,0)
9.8
"BLD",4283,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",4283,"KRN",9.8,"NM",1,0)
XOBSCAV1^^0^B79358675
"BLD",4283,"KRN",9.8,"NM",2,0)
XOBVSYSI^^0^B50785262
"BLD",4283,"KRN",9.8,"NM","B","XOBSCAV1",1)

"BLD",4283,"KRN",9.8,"NM","B","XOBVSYSI",2)

"BLD",4283,"KRN",19,0)
19
"BLD",4283,"KRN",19.1,0)
19.1
"BLD",4283,"KRN",101,0)
101
"BLD",4283,"KRN",409.61,0)
409.61
"BLD",4283,"KRN",771,0)
771
"BLD",4283,"KRN",870,0)
870
"BLD",4283,"KRN",8989.51,0)
8989.51
"BLD",4283,"KRN",8989.52,0)
8989.52
"BLD",4283,"KRN",8994,0)
8994
"BLD",4283,"KRN","B",.4,.4)

"BLD",4283,"KRN","B",.401,.401)

"BLD",4283,"KRN","B",.402,.402)

"BLD",4283,"KRN","B",.403,.403)

"BLD",4283,"KRN","B",.5,.5)

"BLD",4283,"KRN","B",.84,.84)

"BLD",4283,"KRN","B",3.6,3.6)

"BLD",4283,"KRN","B",3.8,3.8)

"BLD",4283,"KRN","B",9.2,9.2)

"BLD",4283,"KRN","B",9.8,9.8)

"BLD",4283,"KRN","B",19,19)

"BLD",4283,"KRN","B",19.1,19.1)

"BLD",4283,"KRN","B",101,101)

"BLD",4283,"KRN","B",409.61,409.61)

"BLD",4283,"KRN","B",771,771)

"BLD",4283,"KRN","B",870,870)

"BLD",4283,"KRN","B",8989.51,8989.51)

"BLD",4283,"KRN","B",8989.52,8989.52)

"BLD",4283,"KRN","B",8994,8994)

"BLD",4283,"QUES",0)
^9.62^^
"BLD",4283,"REQB",0)
^9.611^^
"MBREQ")
0
"PKG",554,-1)
1^1
"PKG",554,0)
VISTALINK^XOBV^VistaLink
"PKG",554,20,0)
^9.402P^^
"PKG",554,22,0)
^9.49I^1^1
"PKG",554,22,1,0)
1.5^3060525^3050915^11738
"PKG",554,22,1,"PAH",1,0)
1^3060720
"PKG",554,22,1,"PAH",1,1,0)
^^2^2^3060720
"PKG",554,22,1,"PAH",1,1,1,0)
For complete information, see the patch description for patch XOBV*1.5*1
"PKG",554,22,1,"PAH",1,1,2,0)
in the National Patch Module on FORUM.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XOBSCAV1")
0^1^B79358675^B79287263
"RTN","XOBSCAV1",1,0)
XOBSCAV1 ;; kec/oak - VistaLink Access/Verify Security ; [6/28/06 2:26pm]
"RTN","XOBSCAV1",2,0)
 ;;1.5;VistALink Security;**1**;Sep 09, 2005;Build 3
"RTN","XOBSCAV1",3,0)
 ;;Foundations Toolbox Release v1.5 [Build: 1.5.1.001]
"RTN","XOBSCAV1",4,0)
 ;;
"RTN","XOBSCAV1",5,0)
 QUIT
"RTN","XOBSCAV1",6,0)
 ; 
"RTN","XOBSCAV1",7,0)
 ; Access/Verify Security: Security Message Request Handler
"RTN","XOBSCAV1",8,0)
 ; specific message request/response pairs)  
"RTN","XOBSCAV1",9,0)
 ; 
"RTN","XOBSCAV1",10,0)
 ; ** Setting/Killing of DUZ covered by blanket SAC Kernel exemption for Foundations
"RTN","XOBSCAV1",11,0)
 ; 
"RTN","XOBSCAV1",12,0)
 ; ::AV.SetupAndIntroText.Request message processing
"RTN","XOBSCAV1",13,0)
SENDITXT ; Do Setup and send Intro Text
"RTN","XOBSCAV1",14,0)
 NEW XOBSTINF,XOBITINF,XOBMSG,XOBTMP,XOBTMP1,XOBCCMSK,XOBI,XOBPROD
"RTN","XOBSCAV1",15,0)
 ;
"RTN","XOBSCAV1",16,0)
 IF $$PRODMISM() DO  QUIT
"RTN","XOBSCAV1",17,0)
 . NEW XOBSPAR SET XOBSPAR(1)=$GET(XOBDATA("CLIENTISPRODUCTION")),XOBSPAR(2)=$SELECT($$PROD^XUPROD(0):"true",1:"false")
"RTN","XOBSCAV1",18,0)
 . DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Production-Test Mismatch",183007,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183007,.XOBSPAR)))
"RTN","XOBSCAV1",19,0)
 ;
"RTN","XOBSCAV1",20,0)
 IF $$STATMISM() DO  QUIT
"RTN","XOBSCAV1",21,0)
 . NEW XOBSPAR SET XOBSPAR(1)=$GET(XOBDATA("CLIENTPRIMARYSTATION")),XOBSPAR(2)=XOBSYS("PRIMARY STATION#")
"RTN","XOBSCAV1",22,0)
 . DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Primary Station Mismatch",183010,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183010,.XOBSPAR)))
"RTN","XOBSCAV1",23,0)
 ;
"RTN","XOBSCAV1",24,0)
 ; Do SETUP^XUSRB to setup, then INTRO^XUSRB to get intro text
"RTN","XOBSCAV1",25,0)
 ; NOTE: $$GETPEER^%ZOSV fails for TCP_SERVICES listeners if COM file doesn't set up VISTA$IP logical
"RTN","XOBSCAV1",26,0)
 SET XWBTIP=$$GETPEER^%ZOSV ; XWBTIP needed by SETUP^XUSRB. Use of GETPEER^%ZOSV: DBIA #4056
"RTN","XOBSCAV1",27,0)
 ;
"RTN","XOBSCAV1",28,0)
 USE XOBNULL ; protect against direct writes to socket
"RTN","XOBSCAV1",29,0)
 ; note: SETUP/INTRO^XUSRB set current IO to null device
"RTN","XOBSCAV1",30,0)
 ; 
"RTN","XOBSCAV1",31,0)
 IF XOBSYS("ENV")="j2ee" DO
"RTN","XOBSCAV1",32,0)
 . DO SETUP^XUSRB(.XOBSTINF,"") ; use of SETUP^XUSRB: DBIA #4054
"RTN","XOBSCAV1",33,0)
 ELSE  DO  QUIT:$GET(DUZ)>0
"RTN","XOBSCAV1",34,0)
 . SET XWBVER=1.1 ; to allow VistaLink to contact client agent
"RTN","XOBSCAV1",35,0)
 . DO SETUP^XUSRB(.XOBSTINF,"") ; use of SETUP^XUSRB: DBIA #4054
"RTN","XOBSCAV1",36,0)
 . ; start of auto-signon support
"RTN","XOBSCAV1",37,0)
 . SET DUZ=$$AUTOXWB^XUS1B() IF DUZ<1 KILL DUZ ; use of $$AUTOXWB^XUS1B: DBIA #4060
"RTN","XOBSCAV1",38,0)
 . IF $GET(DUZ)>0 DO NOW^XUSRB SET XUMSG=$$POST^XUSRB(0) IF XUMSG>0 KILL DUZ ; XUSRB calls: DBIA #4061
"RTN","XOBSCAV1",39,0)
 . ; do autosignon and quit if DUZ is set
"RTN","XOBSCAV1",40,0)
 . IF $GET(DUZ)>0 DO  QUIT
"RTN","XOBSCAV1",41,0)
 . .USE XOBPORT ; restore current IO (the TCP port)
"RTN","XOBSCAV1",42,0)
 . .SET XOBRET(5)=0 DO LOGFIN
"RTN","XOBSCAV1",43,0)
 . .QUIT
"RTN","XOBSCAV1",44,0)
 . KILL XWBVER ; once auto-signon fails, don't need to contact client agent
"RTN","XOBSCAV1",45,0)
 . ; end of autosignon support
"RTN","XOBSCAV1",46,0)
 ; 
"RTN","XOBSCAV1",47,0)
 ;if failed autosignon, continue w/intro text
"RTN","XOBSCAV1",48,0)
 DO INTRO^XUSRB(.XOBITINF) ; use of INTRO^XUSRB: DBIA #4054
"RTN","XOBSCAV1",49,0)
 ; ** use of USE command covered by blanket SAC Kernel exemption for Foundations
"RTN","XOBSCAV1",50,0)
 USE XOBPORT ; restore current IO (the TCP port)
"RTN","XOBSCAV1",51,0)
 ;
"RTN","XOBSCAV1",52,0)
 SET XOBMSG(1)="<SetupInfo serverName='"_$$CHARCHK^XOBVLIB(XOBSTINF(0))_"' volume='"
"RTN","XOBSCAV1",53,0)
 ; note: next line, "dtime" attribute value is not DTIME, but is the VistaLink heartbeat rate.
"RTN","XOBSCAV1",54,0)
 ;       this is used by the J2SE client code to time out the client dialogs.
"RTN","XOBSCAV1",55,0)
 ;       Value may be replaced w/a signon-specific site parameter later.
"RTN","XOBSCAV1",56,0)
 SET XOBMSG(1)=XOBMSG(1)_$$CHARCHK^XOBVLIB(XOBSTINF(1))_"' uci='"_$$CHARCHK^XOBVLIB(XOBSTINF(2))_"' device='"_$$CHARCHK^XOBVLIB(XOBSTINF(3))_"' numberAttempts='"_$$CHARCHK^XOBVLIB(XOBSTINF(4))_"' dtime='"_$$GETRATE^XOBVLIB()_"'/>"
"RTN","XOBSCAV1",57,0)
 ; add intro text
"RTN","XOBSCAV1",58,0)
 DO GETINTRO^XOBSCAV2("XOBMSG",2)
"RTN","XOBSCAV1",59,0)
 ;
"RTN","XOBSCAV1",60,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGSETUP^XOBSCAV),";;",2),.XOBMSG,$$SUCCESS^XOBSCAV(),$PIECE($TEXT(SCHSETUP^XOBSCAV),";;",2))
"RTN","XOBSCAV1",61,0)
 QUIT
"RTN","XOBSCAV1",62,0)
 ; ::AV.Logon.Request message processing
"RTN","XOBSCAV1",63,0)
LOGON ; process login request
"RTN","XOBSCAV1",64,0)
 NEW XOBAC,XOBVC,XOBRET,XOBRETDV
"RTN","XOBSCAV1",65,0)
 ;
"RTN","XOBSCAV1",66,0)
 IF $$LOGGEDON^XOBSCAV DO  QUIT
"RTN","XOBSCAV1",67,0)
 .DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Server Partition State",183003,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183003)))
"RTN","XOBSCAV1",68,0)
 ;
"RTN","XOBSCAV1",69,0)
 KILL DUZ ; if DUZ is around, it shouldn't be.
"RTN","XOBSCAV1",70,0)
 USE XOBNULL ; protect against direct writes to socket
"RTN","XOBSCAV1",71,0)
 ; try to logon w/avcodes
"RTN","XOBSCAV1",72,0)
 DO VALIDAV^XUSRB(.XOBRET,XOBDATA("XOB SECAV","AVCODE")) ; use of VALIDAV^XUSRB: DBIA#4054
"RTN","XOBSCAV1",73,0)
 USE XOBPORT ; restore current IO (the TCP port)
"RTN","XOBSCAV1",74,0)
 ;
"RTN","XOBSCAV1",75,0)
 ; if bad a/v code credentials
"RTN","XOBSCAV1",76,0)
 IF '+XOBRET(0),'+XOBRET(1),'+XOBRET(2) DO  QUIT
"RTN","XOBSCAV1",77,0)
 . IF XOBSYS("ENV")="j2ee" DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Connector Proxy User Error",183008,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183008,$GET(XOBRET(3)))))
"RTN","XOBSCAV1",78,0)
 . ; look for particular error string which means IP is locked
"RTN","XOBSCAV1",79,0)
 . IF $GET(XOBRET(3))["Device/IP address is locked due" DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Logon Failed",182306,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(182306,$GET(XOBRET(3))))) QUIT
"RTN","XOBSCAV1",80,0)
 . ELSE  DO LOGBADCD
"RTN","XOBSCAV1",81,0)
 ;
"RTN","XOBSCAV1",82,0)
 ; if Kernel says user needs to change verify code
"RTN","XOBSCAV1",83,0)
 IF '+XOBRET(0),'+XOBRET(1),XOBRET(2) DO LOGCVC QUIT
"RTN","XOBSCAV1",84,0)
 ;
"RTN","XOBSCAV1",85,0)
 IF '+XOBRET(0) DO  QUIT  ; there was an error
"RTN","XOBSCAV1",86,0)
 .NEW XOBSPAR
"RTN","XOBSCAV1",87,0)
 .SET XOBSPAR(1)=$GET(XOBRET(3))
"RTN","XOBSCAV1",88,0)
 .; look for particular error string which means too many invalid signon attempts
"RTN","XOBSCAV1",89,0)
 .IF XOBSPAR(1)["too many invalid sign" DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Logon Failed",183005,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183005,.XOBSPAR))) QUIT
"RTN","XOBSCAV1",90,0)
 .DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Logon Failed",183004,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183004,.XOBSPAR)))
"RTN","XOBSCAV1",91,0)
 ;
"RTN","XOBSCAV1",92,0)
 ; if user requested to change verify code
"RTN","XOBSCAV1",93,0)
 IF XOBDATA("XOB SECAV","REQUESTCVC")="true" DO LOGCVC QUIT
"RTN","XOBSCAV1",94,0)
 ;
"RTN","XOBSCAV1",95,0)
 ; if j2ee, test for connector proxy user
"RTN","XOBSCAV1",96,0)
 IF XOBSYS("ENV")="j2ee" QUIT:'$$ISCPROXY()
"RTN","XOBSCAV1",97,0)
 ;
"RTN","XOBSCAV1",98,0)
 ; at this point login was successful
"RTN","XOBSCAV1",99,0)
 DO LOGFIN
"RTN","XOBSCAV1",100,0)
 QUIT
"RTN","XOBSCAV1",101,0)
LOGFIN ; check the divisions, finish login now
"RTN","XOBSCAV1",102,0)
 NEW XOBRETDV DO DIVGET^XUSRB2(.XOBRETDV,DUZ) ; use of DIVGET^XUSRB2: DBIA #4055
"RTN","XOBSCAV1",103,0)
 IF '+XOBRETDV(0) DO  QUIT
"RTN","XOBSCAV1",104,0)
 . DO LOGOK
"RTN","XOBSCAV1",105,0)
 . DO DUZSV^XOBVSYSI(.DUZ)
"RTN","XOBSCAV1",106,0)
 ; otherwise this is a multidivisional user
"RTN","XOBSCAV1",107,0)
 DO LOGSELDV(.XOBRETDV)
"RTN","XOBSCAV1",108,0)
 QUIT
"RTN","XOBSCAV1",109,0)
LOGBADCD ; response if bad a/v code pair
"RTN","XOBSCAV1",110,0)
 NEW XOBMSG
"RTN","XOBSCAV1",111,0)
 SET XOBMSG(1)="<"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"_$$CHARCHK^XOBVLIB(XOBRET(3))_"</"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"
"RTN","XOBSCAV1",112,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGLGON^XOBSCAV),";;",2),.XOBMSG,$$FAILURE^XOBSCAV(),$PIECE($TEXT(SCHSIMPL^XOBSCAV),";;",2))
"RTN","XOBSCAV1",113,0)
 QUIT
"RTN","XOBSCAV1",114,0)
LOGCVC ; response if need to change vc
"RTN","XOBSCAV1",115,0)
 NEW XOBMSG,XOBLINE
"RTN","XOBSCAV1",116,0)
 SET XOBLINE=$$POSTTXT^XOBSCAV(.XOBRET,.XOBMSG)
"RTN","XOBSCAV1",117,0)
 SET XOBMSG(XOBLINE+1)="<"_$PIECE($TEXT(PARTTAG^XOBSCAV),";;",2)_" changeVerify=""true"" cvcHelpText="""_$$CHARCHK^XOBVLIB($$AVHLPTXT^XUS2())_""" />" ; use of AVHLPTXT^XUS2: DBIA #4057
"RTN","XOBSCAV1",118,0)
 SET XOBMSG(XOBLINE+2)="<"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"_$$CHARCHK^XOBVLIB(XOBRET(3))_"</"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"
"RTN","XOBSCAV1",119,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGLGON^XOBSCAV),";;",2),.XOBMSG,$$PARTIAL^XOBSCAV(),$PIECE($TEXT(SCHPARTS^XOBSCAV),";;",2))
"RTN","XOBSCAV1",120,0)
 QUIT
"RTN","XOBSCAV1",121,0)
LOGSELDV(XOBDIVS) ; response if need to select division
"RTN","XOBSCAV1",122,0)
 ;XOBDIVS is in format of output from DIVGET^XUSRB2
"RTN","XOBSCAV1",123,0)
 NEW XOBMSG,XOBLINE
"RTN","XOBSCAV1",124,0)
 SET XOBLINE=$$POSTTXT^XOBSCAV(.XOBRET,.XOBMSG)
"RTN","XOBSCAV1",125,0)
 SET XOBLINE=$$ADDDIVS^XOBSCAV(.XOBDIVS,.XOBMSG)
"RTN","XOBSCAV1",126,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGLGON^XOBSCAV),";;",2),.XOBMSG,$$PARTIAL^XOBSCAV(),$PIECE($TEXT(SCHPARTS^XOBSCAV),";;",2))
"RTN","XOBSCAV1",127,0)
 QUIT
"RTN","XOBSCAV1",128,0)
LOGOK ; response if everything's looking good
"RTN","XOBSCAV1",129,0)
 NEW XOBMSG,XOBLINE
"RTN","XOBSCAV1",130,0)
 SET XOBLINE=$$POSTTXT^XOBSCAV(.XOBRET,.XOBMSG)
"RTN","XOBSCAV1",131,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGLGON^XOBSCAV),";;",2),.XOBMSG,$$SUCCESS^XOBSCAV(),$PIECE($TEXT(SCHLGON^XOBSCAV),";;",2))
"RTN","XOBSCAV1",132,0)
 QUIT
"RTN","XOBSCAV1",133,0)
 ; ::AV.Logout.Request message processing
"RTN","XOBSCAV1",134,0)
LOGOUT ; logout
"RTN","XOBSCAV1",135,0)
 USE XOBNULL ; protect against direct writes to socket
"RTN","XOBSCAV1",136,0)
 ; do the logout
"RTN","XOBSCAV1",137,0)
 DO CLEAN
"RTN","XOBSCAV1",138,0)
 USE XOBPORT ; restore current IO (the TCP port)
"RTN","XOBSCAV1",139,0)
 NEW XOBMSG
"RTN","XOBSCAV1",140,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGLGOUT^XOBSCAV),";;",2),.XOBMSG,$$SUCCESS^XOBSCAV(),$PIECE($TEXT(SCHSIMPL^XOBSCAV),";;",2))
"RTN","XOBSCAV1",141,0)
 QUIT
"RTN","XOBSCAV1",142,0)
 ; ::Logout to call if connection has timed out
"RTN","XOBSCAV1",143,0)
CLEAN ; logout
"RTN","XOBSCAV1",144,0)
 DO LOGOUT^XUSRB ; use of LOGOUT^XUSRB: DBIA #4054
"RTN","XOBSCAV1",145,0)
 QUIT
"RTN","XOBSCAV1",146,0)
 ; ::AV.SelectDivision.Request message processing
"RTN","XOBSCAV1",147,0)
DIVSLCT ; select division
"RTN","XOBSCAV1",148,0)
 NEW XOBRET
"RTN","XOBSCAV1",149,0)
 IF '+DUZ DO DIVSLCT0("User did not complete the access/verify code login process.") QUIT  ; need DUZ
"RTN","XOBSCAV1",150,0)
 DO DIVSET^XUSRB2(.XOBRET,"`"_XOBDATA("XOB SECAV","SELECTEDDIVISION")) ; use of DIVSET^XUSRB2: DBIA #4055
"RTN","XOBSCAV1",151,0)
 IF +XOBRET DO  QUIT
"RTN","XOBSCAV1",152,0)
 . DO DIVSLCT1
"RTN","XOBSCAV1",153,0)
 . DO DUZSV^XOBVSYSI(.DUZ)
"RTN","XOBSCAV1",154,0)
 DO DIVSLCT0("division not found for this user.")
"RTN","XOBSCAV1",155,0)
 QUIT
"RTN","XOBSCAV1",156,0)
 ;
"RTN","XOBSCAV1",157,0)
DIVSLCT0(XOBTEXT) ; send 
"RTN","XOBSCAV1",158,0)
 NEW XOBMSG
"RTN","XOBSCAV1",159,0)
 SET XOBMSG(1)="<"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"_$$CHARCHK^XOBVLIB(XOBTEXT)_"</"_$PIECE($TEXT(MSGTAG^XOBSCAV),";;",2)_">"
"RTN","XOBSCAV1",160,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGSELDV^XOBSCAV),";;",2),.XOBMSG,$$FAILURE^XOBSCAV(),$PIECE($TEXT(SCHSIMPL^XOBSCAV),";;",2))
"RTN","XOBSCAV1",161,0)
 QUIT
"RTN","XOBSCAV1",162,0)
 ;
"RTN","XOBSCAV1",163,0)
DIVSLCT1 ; success
"RTN","XOBSCAV1",164,0)
 NEW XOBMSG
"RTN","XOBSCAV1",165,0)
 DO SENDSEC^XOBSCAV(.XOBR,$PIECE($TEXT(RESTYPE^XOBSCAV),";;",2),$PIECE($TEXT(MSGSELDV^XOBSCAV),";;",2),.XOBMSG,$$SUCCESS^XOBSCAV(),$PIECE($TEXT(SCHSIMPL^XOBSCAV),";;",2))
"RTN","XOBSCAV1",166,0)
 QUIT
"RTN","XOBSCAV1",167,0)
 ;
"RTN","XOBSCAV1",168,0)
PRODMISM() ; returns 1 if production mismatch, 0 if not
"RTN","XOBSCAV1",169,0)
 IF XOBSYS("ENV")'="j2ee" QUIT 0 ; skip in c/s mode
"RTN","XOBSCAV1",170,0)
 SET XOBPROD=$SELECT($GET(XOBDATA("CLIENTISPRODUCTION"))="true":1,1:0)
"RTN","XOBSCAV1",171,0)
 IF '(XOBPROD=$$PROD^XUPROD(0)) QUIT 1
"RTN","XOBSCAV1",172,0)
 QUIT 0
"RTN","XOBSCAV1",173,0)
 ;
"RTN","XOBSCAV1",174,0)
STATMISM() ; return 1 if primary station mismatch, 0 if not
"RTN","XOBSCAV1",175,0)
 IF XOBSYS("ENV")'="j2ee" QUIT 0 ; no checking for c/s mode
"RTN","XOBSCAV1",176,0)
 NEW XOBSTAT
"RTN","XOBSCAV1",177,0)
 ; strip off suffix
"RTN","XOBSCAV1",178,0)
 SET XOBSTAT=$$STRPSUFF($GET(XOBDATA("CLIENTPRIMARYSTATION")))
"RTN","XOBSCAV1",179,0)
 ; compare w/KSP value
"RTN","XOBSCAV1",180,0)
 IF XOBSTAT'=XOBSYS("PRIMARY STATION#") QUIT 1 ;mismatch found
"RTN","XOBSCAV1",181,0)
 QUIT 0
"RTN","XOBSCAV1",182,0)
 ;
"RTN","XOBSCAV1",183,0)
STRPSUFF(XOBSTAT) ; strip alpha suffix from sta# e.g. AAC "200M"
"RTN","XOBSCAV1",184,0)
 SET XOBSTAT=+XOBSTAT
"RTN","XOBSCAV1",185,0)
 ; nursing home, treat 9 as suffix
"RTN","XOBSCAV1",186,0)
 IF $LENGTH(XOBSTAT)=4,$E(XOBSTAT,4)=9 SET XOBSTAT=$E(XOBSTAT,1,3)
"RTN","XOBSCAV1",187,0)
 QUIT XOBSTAT
"RTN","XOBSCAV1",188,0)
 ;
"RTN","XOBSCAV1",189,0)
ISCPROXY() ; c/proxy check
"RTN","XOBSCAV1",190,0)
 ; returns 1 if c/proxy user, 0 if not
"RTN","XOBSCAV1",191,0)
 NEW XOBCPCHK,XOBOK
"RTN","XOBSCAV1",192,0)
 SET XOBOK=1
"RTN","XOBSCAV1",193,0)
 SET XOBCPCHK=$$CPCHK^XUSAP(+XOBRET(0))
"RTN","XOBSCAV1",194,0)
 IF 'XOBCPCHK DO  SET XOBOK=0
"RTN","XOBSCAV1",195,0)
 . DO ERROR^XOBSCAV(.XOBR,$PIECE($TEXT(FSERVER^XOBSCAV),";;",2),"Connector Proxy User Error",183008,$$CHARCHK^XOBVLIB($$EZBLD^DIALOG(183008,$PIECE($GET(XOBCPCHK),U,2))))
"RTN","XOBSCAV1",196,0)
 QUIT XOBOK
"RTN","XOBSCAV1",197,0)
 ;
"RTN","XOBVSYSI")
0^2^B50785262^B49378284
"RTN","XOBVSYSI",1,0)
XOBVSYSI ;; ld,mjk/alb - VistaLink Interface Implementation ; [7/20/06 10:51am]
"RTN","XOBVSYSI",2,0)
 ;;1.5;VistALink;**1**;Sep 09, 2005;Build 3
"RTN","XOBVSYSI",3,0)
 ;;Foundations Toolbox Release v1.5 [Build: 1.5.1.001]
"RTN","XOBVSYSI",4,0)
 ;
"RTN","XOBVSYSI",5,0)
CALLBACK(CB) ; -- init callbacks implementation
"RTN","XOBVSYSI",6,0)
 SET CB("STARTELEMENT")="ELEST^XOBVSYSI"
"RTN","XOBVSYSI",7,0)
 QUIT
"RTN","XOBVSYSI",8,0)
 ;
"RTN","XOBVSYSI",9,0)
 ; ------------------------------------------------------------------------
"RTN","XOBVSYSI",10,0)
 ;             RPC Server: Request Message XML SAX Parser Callbacks         
"RTN","XOBVSYSI",11,0)
 ; ------------------------------------------------------------------------
"RTN","XOBVSYSI",12,0)
ELEST(ELE,ATR) ; -- element start event handler
"RTN","XOBVSYSI",13,0)
 IF ELE="VistaLink" DO  QUIT
"RTN","XOBVSYSI",14,0)
 . SET XOBDATA("MODE")=$GET(ATR("mode"),"single call")
"RTN","XOBVSYSI",15,0)
 ;
"RTN","XOBVSYSI",16,0)
 IF ELE="Request" DO  QUIT
"RTN","XOBVSYSI",17,0)
 . SET XOBDATA("XOB SYSTEM","TYPE")=$GET(ATR("type"),"unknown")
"RTN","XOBVSYSI",18,0)
 . SET XOBDATA("XOB SYSTEM","ENV")=$$LOW^XLFSTR($GET(ATR("environment"),"j2se"))
"RTN","XOBVSYSI",19,0)
 ;
"RTN","XOBVSYSI",20,0)
 QUIT
"RTN","XOBVSYSI",21,0)
 ;
"RTN","XOBVSYSI",22,0)
READER(XOBUF,XOBDATA) ; -- proprietary format reader implementation
"RTN","XOBVSYSI",23,0)
 QUIT
"RTN","XOBVSYSI",24,0)
 ;
"RTN","XOBVSYSI",25,0)
REQHDLR(XOBDATA) ; -- request handler implementation
"RTN","XOBVSYSI",26,0)
 NEW TYPE
"RTN","XOBVSYSI",27,0)
 SET TYPE=$GET(XOBDATA("XOB SYSTEM","TYPE"),"unknown")
"RTN","XOBVSYSI",28,0)
 ;
"RTN","XOBVSYSI",29,0)
 ; -- initialize socket partition request
"RTN","XOBVSYSI",30,0)
 IF TYPE="initializeSocket" DO INIT(.TYPE) GOTO REQHDLRQ
"RTN","XOBVSYSI",31,0)
 ;
"RTN","XOBVSYSI",32,0)
 ; -- set stop flag to close socket request
"RTN","XOBVSYSI",33,0)
 IF TYPE="closeSocket" DO CLOSE(.TYPE) GOTO REQHDLRQ
"RTN","XOBVSYSI",34,0)
 ;
"RTN","XOBVSYSI",35,0)
 ; -- cleanup partition request 
"RTN","XOBVSYSI",36,0)
 IF TYPE="cleanupPartition" DO CLEANUP(.TYPE) GOTO REQHDLRQ
"RTN","XOBVSYSI",37,0)
 ;
"RTN","XOBVSYSI",38,0)
 ; --  heartbeat request 
"RTN","XOBVSYSI",39,0)
 IF TYPE="heartbeat" DO HB(.TYPE) GOTO REQHDLRQ
"RTN","XOBVSYSI",40,0)
 ;
"RTN","XOBVSYSI",41,0)
 ; --  system info request 
"RTN","XOBVSYSI",42,0)
 IF TYPE="systemInfo" DO SYSINFO(.TYPE) GOTO REQHDLRQ
"RTN","XOBVSYSI",43,0)
 ;
"RTN","XOBVSYSI",44,0)
 ; -- failue if processing get here
"RTN","XOBVSYSI",45,0)
 DO RESPONSE(.TYPE,"failure")
"RTN","XOBVSYSI",46,0)
 ;
"RTN","XOBVSYSI",47,0)
REQHDLRQ ;
"RTN","XOBVSYSI",48,0)
 QUIT
"RTN","XOBVSYSI",49,0)
 ;
"RTN","XOBVSYSI",50,0)
ENV ; -- set env variable
"RTN","XOBVSYSI",51,0)
 SET XOBSYS("ENV")=$GET(XOBDATA("XOB SYSTEM","ENV"))
"RTN","XOBVSYSI",52,0)
 QUIT
"RTN","XOBVSYSI",53,0)
 ;
"RTN","XOBVSYSI",54,0)
PSTANUM ; -- set primary station number
"RTN","XOBVSYSI",55,0)
 SET XOBSYS("PRIMARY STATION#")=+$$STA^XUAF4($$KSP^XUPARAM("INST"))
"RTN","XOBVSYSI",56,0)
 QUIT
"RTN","XOBVSYSI",57,0)
 ;
"RTN","XOBVSYSI",58,0)
INIT(TYPE) ; -- handle initialize request
"RTN","XOBVSYSI",59,0)
 KILL XOBSYS
"RTN","XOBVSYSI",60,0)
 DO ENV
"RTN","XOBVSYSI",61,0)
 DO PSTANUM
"RTN","XOBVSYSI",62,0)
 ;
"RTN","XOBVSYSI",63,0)
 IF "^j2se^j2ee^.net^"[(U_XOBSYS("ENV")_U) DO
"RTN","XOBVSYSI",64,0)
 . DO RESPONSE(.TYPE,"success",$$RATE()_$$JOB()_$$RASTO())
"RTN","XOBVSYSI",65,0)
 ELSE  DO
"RTN","XOBVSYSI",66,0)
 . DO RESPONSE(.TYPE,"failure")
"RTN","XOBVSYSI",67,0)
 QUIT
"RTN","XOBVSYSI",68,0)
 ;
"RTN","XOBVSYSI",69,0)
CLOSE(TYPE) ; -- handle close socket request
"RTN","XOBVSYSI",70,0)
 SET XOBSTOP=1
"RTN","XOBVSYSI",71,0)
 DO RESPONSE(.TYPE,"success")
"RTN","XOBVSYSI",72,0)
 QUIT
"RTN","XOBVSYSI",73,0)
 ;
"RTN","XOBVSYSI",74,0)
CLEANUP(TYPE) ; -- handle cleanup partition request
"RTN","XOBVSYSI",75,0)
 ; -- unlock any pending locks
"RTN","XOBVSYSI",76,0)
 LOCK
"RTN","XOBVSYSI",77,0)
 ;
"RTN","XOBVSYSI",78,0)
 ; -- clean ^TMP, ^UTILITY, ^XUTL
"RTN","XOBVSYSI",79,0)
 DO XUTL^XUSCLEAN
"RTN","XOBVSYSI",80,0)
 ;
"RTN","XOBVSYSI",81,0)
 ; -- restore DUZ to connector user
"RTN","XOBVSYSI",82,0)
 KILL DUZ
"RTN","XOBVSYSI",83,0)
 MERGE DUZ=XOBSYS("DUZ")
"RTN","XOBVSYSI",84,0)
 ;
"RTN","XOBVSYSI",85,0)
 ; -- clean symbol table
"RTN","XOBVSYSI",86,0)
 DO KILL^XOBVLL
"RTN","XOBVSYSI",87,0)
 ;
"RTN","XOBVSYSI",88,0)
 DO RESPONSE(.TYPE,"success")
"RTN","XOBVSYSI",89,0)
 QUIT
"RTN","XOBVSYSI",90,0)
 ;
"RTN","XOBVSYSI",91,0)
DUZSV(DUZ) ; -- save initial DUZ info for session
"RTN","XOBVSYSI",92,0)
 IF $GET(XOBSYS("ENV"))="j2ee" DO
"RTN","XOBVSYSI",93,0)
 . KILL XOBSYS("DUZ")
"RTN","XOBVSYSI",94,0)
 . MERGE XOBSYS("DUZ")=DUZ
"RTN","XOBVSYSI",95,0)
 QUIT
"RTN","XOBVSYSI",96,0)
 ;
"RTN","XOBVSYSI",97,0)
HB(TYPE) ; -- handle heartbeat request
"RTN","XOBVSYSI",98,0)
 DO ENV
"RTN","XOBVSYSI",99,0)
 DO RESPONSE(.TYPE,"success",$$RATE())
"RTN","XOBVSYSI",100,0)
 QUIT
"RTN","XOBVSYSI",101,0)
 ;
"RTN","XOBVSYSI",102,0)
RATE() ; -- set up rate attribute for response
"RTN","XOBVSYSI",103,0)
 NEW XOBRATE
"RTN","XOBVSYSI",104,0)
 ; -- get J2EE timeout value for app serv environment
"RTN","XOBVSYSI",105,0)
 IF $GET(XOBSYS("ENV"))="j2ee" DO
"RTN","XOBVSYSI",106,0)
 . SET XOBRATE=$$GETASTO^XOBVLIB()
"RTN","XOBVSYSI",107,0)
 ELSE  DO
"RTN","XOBVSYSI",108,0)
 . SET XOBRATE=$$GETRATE^XOBVLIB()
"RTN","XOBVSYSI",109,0)
 QUIT " rate="""_XOBRATE_""""
"RTN","XOBVSYSI",110,0)
 ;
"RTN","XOBVSYSI",111,0)
JOB() ; -- set up $JOB attribute for response
"RTN","XOBVSYSI",112,0)
 QUIT " mJob="""_$JOB_""""
"RTN","XOBVSYSI",113,0)
 ;
"RTN","XOBVSYSI",114,0)
RASTO() ; -- set up ReAuthenticated Session TimeOut
"RTN","XOBVSYSI",115,0)
 QUIT " reAuthSessionTimeout="""_$$GETRASTO^XOBVLIB()_""""
"RTN","XOBVSYSI",116,0)
 ;
"RTN","XOBVSYSI",117,0)
RESPONSE(TYPE,STATUS,ATTRS) ; -- build xml response
"RTN","XOBVSYSI",118,0)
 ; -- initialize
"RTN","XOBVSYSI",119,0)
 DO PRE^XOBVSKT
"RTN","XOBVSYSI",120,0)
 DO WRITE^XOBVSKT($$VLHDR^XOBVLIB(4))
"RTN","XOBVSYSI",121,0)
 DO WRITE^XOBVSKT("<Response type="""_$GET(TYPE)_""" status="""_$GET(STATUS)_""""_$GET(ATTRS,"")_" />")
"RTN","XOBVSYSI",122,0)
 DO WRITE^XOBVSKT($$ENVFTR^XOBVLIB())
"RTN","XOBVSYSI",123,0)
 ; -- send eot and flush buffer
"RTN","XOBVSYSI",124,0)
 DO POST^XOBVSKT
"RTN","XOBVSYSI",125,0)
 QUIT
"RTN","XOBVSYSI",126,0)
 ;
"RTN","XOBVSYSI",127,0)
SYSINFO(TYPE) ; -- build system info response
"RTN","XOBVSYSI",128,0)
 NEW XOBINFO,XOBELE,XOBDEFLT,XOBINTRO,XOBI
"RTN","XOBVSYSI",129,0)
 ;
"RTN","XOBVSYSI",130,0)
 ; -- set up default value
"RTN","XOBVSYSI",131,0)
 SET XOBDEFLT="unknown"
"RTN","XOBVSYSI",132,0)
 ;
"RTN","XOBVSYSI",133,0)
 ; -- get system info array
"RTN","XOBVSYSI",134,0)
 DO GETSINFO(.XOBINFO)
"RTN","XOBVSYSI",135,0)
 ;
"RTN","XOBVSYSI",136,0)
 ; -- build <SystemInfo> element
"RTN","XOBVSYSI",137,0)
 SET XOBELE="<SystemInfo"
"RTN","XOBVSYSI",138,0)
 SET XOBELE=XOBELE_" vistalinkVersion="""_$GET(XOBINFO("version"),XOBDEFLT)_""""
"RTN","XOBVSYSI",139,0)
 SET XOBELE=XOBELE_" vistalinkBuild="""_$GET(XOBINFO("build"),XOBDEFLT)_""""
"RTN","XOBVSYSI",140,0)
 SET XOBELE=XOBELE_" appServerTimeout="""_$GET(XOBINFO("appServerTimeout"),XOBDEFLT)_""""
"RTN","XOBVSYSI",141,0)
 SET XOBELE=XOBELE_" reAuthSessionTimeout="""_$GET(XOBINFO("reAuthSessionTimeout"),XOBDEFLT)_""""
"RTN","XOBVSYSI",142,0)
 SET XOBELE=XOBELE_" uci="""_$GET(XOBINFO("uci"),XOBDEFLT)_""""
"RTN","XOBVSYSI",143,0)
 SET XOBELE=XOBELE_" vol="""_$GET(XOBINFO("vol"),XOBDEFLT)_""""
"RTN","XOBVSYSI",144,0)
 SET XOBELE=XOBELE_" boxVolume="""_$GET(XOBINFO("boxVolume"),XOBDEFLT)_""""
"RTN","XOBVSYSI",145,0)
 SET XOBELE=XOBELE_" mVersion="""_$GET(XOBINFO("mVersion"),XOBDEFLT)_""""
"RTN","XOBVSYSI",146,0)
 SET XOBELE=XOBELE_" operatingSystem="""_$GET(XOBINFO("operatingSystem"),XOBDEFLT)_""""
"RTN","XOBVSYSI",147,0)
 SET XOBELE=XOBELE_" domainName="""_$GET(XOBINFO("domainName"),XOBDEFLT)_""""
"RTN","XOBVSYSI",148,0)
 SET XOBELE=XOBELE_" vistaProduction="""_$GET(XOBINFO("vistaProduction"),XOBDEFLT)_""""
"RTN","XOBVSYSI",149,0)
 SET XOBELE=XOBELE_" defaultInstitution="""_$GET(XOBINFO("defaultInstitution"),XOBDEFLT)_""""
"RTN","XOBVSYSI",150,0)
 SET XOBELE=XOBELE_" cpName="""_$GET(XOBINFO("cpName"),XOBDEFLT)_""""
"RTN","XOBVSYSI",151,0)
 SET XOBELE=XOBELE_" />"
"RTN","XOBVSYSI",152,0)
 ;
"RTN","XOBVSYSI",153,0)
 SET XOBINTRO=$GET(XOBINFO("introductoryText"))
"RTN","XOBVSYSI",154,0)
 ;
"RTN","XOBVSYSI",155,0)
 ; -- build and send complate message
"RTN","XOBVSYSI",156,0)
 DO PRE^XOBVSKT
"RTN","XOBVSYSI",157,0)
 DO WRITE^XOBVSKT($$VLHDR^XOBVLIB(4))
"RTN","XOBVSYSI",158,0)
 DO WRITE^XOBVSKT("<Response type="""_$GET(TYPE)_""" status=""success"" >")
"RTN","XOBVSYSI",159,0)
 DO WRITE^XOBVSKT(XOBELE)
"RTN","XOBVSYSI",160,0)
 FOR XOBI=1:1  QUIT:'$DATA(XOBINFO("introductoryText",XOBI))  DO
"RTN","XOBVSYSI",161,0)
 . DO WRITE^XOBVSKT(XOBINFO("introductoryText",XOBI))
"RTN","XOBVSYSI",162,0)
 DO WRITE^XOBVSKT("</Response>")
"RTN","XOBVSYSI",163,0)
 DO WRITE^XOBVSKT($$ENVFTR^XOBVLIB())
"RTN","XOBVSYSI",164,0)
 DO POST^XOBVSKT
"RTN","XOBVSYSI",165,0)
 ;
"RTN","XOBVSYSI",166,0)
 QUIT
"RTN","XOBVSYSI",167,0)
 ;
"RTN","XOBVSYSI",168,0)
GETSINFO(XOBINFO) ; -- gather system info into array
"RTN","XOBVSYSI",169,0)
 NEW X,Y
"RTN","XOBVSYSI",170,0)
 ;
"RTN","XOBVSYSI",171,0)
 ; -- get version
"RTN","XOBVSYSI",172,0)
 SET XOBINFO("version")=$PIECE($TEXT(XOBVSYSI+1),";",3)
"RTN","XOBVSYSI",173,0)
 ;
"RTN","XOBVSYSI",174,0)
 ; -- get build number
"RTN","XOBVSYSI",175,0)
 SET XOBINFO("build")=$PIECE($PIECE($TEXT(XOBVSYSI+2),"Build: ",2),"]")
"RTN","XOBVSYSI",176,0)
 ;
"RTN","XOBVSYSI",177,0)
 ; -- get application server connection timeout
"RTN","XOBVSYSI",178,0)
 SET XOBINFO("appServerTimeout")=$$GETASTO^XOBVLIB()
"RTN","XOBVSYSI",179,0)
 ;
"RTN","XOBVSYSI",180,0)
 ; -- get reauthentication session timeout
"RTN","XOBVSYSI",181,0)
 SET XOBINFO("reAuthSessionTimeout")=$$GETRASTO^XOBVLIB()
"RTN","XOBVSYSI",182,0)
 ;
"RTN","XOBVSYSI",183,0)
 ; -- get basic M environment information
"RTN","XOBVSYSI",184,0)
 SET Y=""
"RTN","XOBVSYSI",185,0)
 DO GETENV^%ZOSV
"RTN","XOBVSYSI",186,0)
 ;
"RTN","XOBVSYSI",187,0)
 ; -- get uci
"RTN","XOBVSYSI",188,0)
 SET XOBINFO("uci")=$PIECE(Y,U,1)
"RTN","XOBVSYSI",189,0)
 ;
"RTN","XOBVSYSI",190,0)
 ; -- get vol
"RTN","XOBVSYSI",191,0)
 SET XOBINFO("vol")=$PIECE(Y,U,2)
"RTN","XOBVSYSI",192,0)
 ;
"RTN","XOBVSYSI",193,0)
 ; -- get box volume
"RTN","XOBVSYSI",194,0)
 SET XOBINFO("boxVolume")=$PIECE(Y,U,4)
"RTN","XOBVSYSI",195,0)
 ;
"RTN","XOBVSYSI",196,0)
 ; -- get M version (full name)
"RTN","XOBVSYSI",197,0)
 SET XOBINFO("mVersion")=$$SYMENC^MXMLUTL($$VERSION^%ZOSV(1))
"RTN","XOBVSYSI",198,0)
 ;
"RTN","XOBVSYSI",199,0)
 ; -- get operating system
"RTN","XOBVSYSI",200,0)
 SET XOBINFO("operatingSystem")=$$SYMENC^MXMLUTL($$SYSOS^XOBVLIB(XOBOS))
"RTN","XOBVSYSI",201,0)
 ;
"RTN","XOBVSYSI",202,0)
 ; -- get domain name
"RTN","XOBVSYSI",203,0)
 SET XOBINFO("domainName")=$$SYMENC^MXMLUTL($$KSP^XUPARAM("WHERE"))
"RTN","XOBVSYSI",204,0)
 ;
"RTN","XOBVSYSI",205,0)
 ; -- production or test
"RTN","XOBVSYSI",206,0)
 SET XOBINFO("vistaProduction")=$S($$PROD^XUPROD(0):"true",1:"false")
"RTN","XOBVSYSI",207,0)
 ;
"RTN","XOBVSYSI",208,0)
 ; -- default institution
"RTN","XOBVSYSI",209,0)
 SET XOBINFO("defaultInstitution")=$$SYMENC^MXMLUTL($$STA^XUAF4($$KSP^XUPARAM("INST"))_"/"_$$NAME^XUAF4($$KSP^XUPARAM("INST")))
"RTN","XOBVSYSI",210,0)
 ;
"RTN","XOBVSYSI",211,0)
 ; -- get intro text
"RTN","XOBVSYSI",212,0)
 D GETINTRO^XOBSCAV2("XOBINFO(""introductoryText"")",1)
"RTN","XOBVSYSI",213,0)
 ;
"RTN","XOBVSYSI",214,0)
 ; -- get c/p username
"RTN","XOBVSYSI",215,0)
 SET XOBINFO("cpName")=$$NAME^XUSER(DUZ)
"RTN","XOBVSYSI",216,0)
 ;
"RTN","XOBVSYSI",217,0)
 QUIT
"RTN","XOBVSYSI",218,0)
 ;
"RTN","XOBVSYSI",219,0)
RPC(XOBY) ;
"RTN","XOBVSYSI",220,0)
 NEW XOBX,XOBLINE,XOBARR
"RTN","XOBVSYSI",221,0)
 D GETSINFO(.XOBARR)
"RTN","XOBVSYSI",222,0)
 SET XOBLINE=0
"RTN","XOBVSYSI",223,0)
 S XOBX="" F  S XOBX=$O(XOBARR(XOBX)) Q:XOBX']""  D
"RTN","XOBVSYSI",224,0)
 . SET XOBLINE=XOBLINE+1
"RTN","XOBVSYSI",225,0)
 . SET XOBY(XOBLINE)=XOBX_"~"_XOBARR(XOBX)
"RTN","XOBVSYSI",226,0)
 QUIT
"RTN","XOBVSYSI",227,0)
 ;
"VER")
8.0^22.0
"BLD",4283,6)
^1
**END**
**END**
