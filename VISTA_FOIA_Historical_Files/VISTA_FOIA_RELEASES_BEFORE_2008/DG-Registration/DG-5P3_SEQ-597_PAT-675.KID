Released DG*5.3*675 SEQ #597
Extracted from mail message
**KIDS**:DG*5.3*675^

**INSTALL NAME**
DG*5.3*675
"BLD",5735,0)
DG*5.3*675^REGISTRATION^0^3051108^y
"BLD",5735,1,0)
^^1^1^3050722^^
"BLD",5735,1,1,0)
 REQUIRED MEANS TEST WARNING DOESN'T SHOW IN CPRS
"BLD",5735,4,0)
^9.64PA^^
"BLD",5735,"ABPKG")
n
"BLD",5735,"KRN",0)
^9.67PA^8989.52^19
"BLD",5735,"KRN",.4,0)
.4
"BLD",5735,"KRN",.401,0)
.401
"BLD",5735,"KRN",.402,0)
.402
"BLD",5735,"KRN",.403,0)
.403
"BLD",5735,"KRN",.5,0)
.5
"BLD",5735,"KRN",.84,0)
.84
"BLD",5735,"KRN",3.6,0)
3.6
"BLD",5735,"KRN",3.8,0)
3.8
"BLD",5735,"KRN",9.2,0)
9.2
"BLD",5735,"KRN",9.8,0)
9.8
"BLD",5735,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",5735,"KRN",9.8,"NM",1,0)
DPTLK5^^0^B3796452
"BLD",5735,"KRN",9.8,"NM",2,0)
DPTLK6^^0^B12759471
"BLD",5735,"KRN",9.8,"NM",3,0)
DGENUPL2^^0^B53271937
"BLD",5735,"KRN",9.8,"NM","B","DGENUPL2",3)
 
"BLD",5735,"KRN",9.8,"NM","B","DPTLK5",1)
 
"BLD",5735,"KRN",9.8,"NM","B","DPTLK6",2)
 
"BLD",5735,"KRN",19,0)
19
"BLD",5735,"KRN",19.1,0)
19.1
"BLD",5735,"KRN",101,0)
101
"BLD",5735,"KRN",409.61,0)
409.61
"BLD",5735,"KRN",771,0)
771
"BLD",5735,"KRN",870,0)
870
"BLD",5735,"KRN",8989.51,0)
8989.51
"BLD",5735,"KRN",8989.52,0)
8989.52
"BLD",5735,"KRN",8994,0)
8994
"BLD",5735,"KRN","B",.4,.4)
 
"BLD",5735,"KRN","B",.401,.401)
 
"BLD",5735,"KRN","B",.402,.402)
 
"BLD",5735,"KRN","B",.403,.403)
 
"BLD",5735,"KRN","B",.5,.5)
 
"BLD",5735,"KRN","B",.84,.84)
 
"BLD",5735,"KRN","B",3.6,3.6)
 
"BLD",5735,"KRN","B",3.8,3.8)
 
"BLD",5735,"KRN","B",9.2,9.2)
 
"BLD",5735,"KRN","B",9.8,9.8)
 
"BLD",5735,"KRN","B",19,19)
 
"BLD",5735,"KRN","B",19.1,19.1)
 
"BLD",5735,"KRN","B",101,101)
 
"BLD",5735,"KRN","B",409.61,409.61)
 
"BLD",5735,"KRN","B",771,771)
 
"BLD",5735,"KRN","B",870,870)
 
"BLD",5735,"KRN","B",8989.51,8989.51)
 
"BLD",5735,"KRN","B",8989.52,8989.52)
 
"BLD",5735,"KRN","B",8994,8994)
 
"BLD",5735,"QUES",0)
^9.62^^
"BLD",5735,"REQB",0)
^9.611^4^3
"BLD",5735,"REQB",1,0)
DG*5.3*485^2
"BLD",5735,"REQB",3,0)
DG*5.3*277^2
"BLD",5735,"REQB",4,0)
DG*5.3*631^2
"BLD",5735,"REQB","B","DG*5.3*277",3)
 
"BLD",5735,"REQB","B","DG*5.3*485",1)
 
"BLD",5735,"REQB","B","DG*5.3*631",4)
 
"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
675^3051108
"PKG",5,22,1,"PAH",1,1,0)
^^1^1^3051108
"PKG",5,22,1,"PAH",1,1,1,0)
 REQUIRED MEANS TEST WARNING DOESN'T SHOW IN CPRS
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")
 
"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","DGENUPL2")
0^3^B53271937
"RTN","DGENUPL2",1,0)
DGENUPL2 ;ALB/CJM,RTK,ISA/KWP/RMM/CKN,EG - PROCESS INCOMING (Z11 EVENT TYPE) HL7 MESSAGES ; 11/08/2005 7:49 AM
"RTN","DGENUPL2",2,0)
 ;;5.3;REGISTRATION;**147,222,232,310,314,367,397,677,631,675**;Aug 13,1993
"RTN","DGENUPL2",3,0)
 ;
"RTN","DGENUPL2",4,0)
 ;
"RTN","DGENUPL2",5,0)
 ;***************************************************************
"RTN","DGENUPL2",6,0)
 ;The following procedures parse particular segment types.
"RTN","DGENUPL2",7,0)
 ;Input:SEG(),MSGID
"RTN","DGENUPL2",8,0)
 ;Output:DGPAT(),DGELG(),DGENR(),DGCDIS(),DGNTR(),ERROR
"RTN","DGENUPL2",9,0)
 ;***************************************************************
"RTN","DGENUPL2",10,0)
 ;
"RTN","DGENUPL2",11,0)
PID ;
"RTN","DGENUPL2",12,0)
 S DGPAT("SSN")=SEG(19)
"RTN","DGENUPL2",13,0)
 Q
"RTN","DGENUPL2",14,0)
 ;
"RTN","DGENUPL2",15,0)
ZPD ;
"RTN","DGENUPL2",16,0)
 S DGELG("RATEINC")=$$CONVERT^DGENUPL1(SEG(8))
"RTN","DGENUPL2",17,0)
 S DGPAT("DEATH")=$$CONVERT^DGENUPL1(SEG(9),"TS",.ERROR)
"RTN","DGENUPL2",18,0)
 I ERROR D  Q
"RTN","DGENUPL2",19,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZPD SEGMENT, SEQ 9",.ERRCOUNT)
"RTN","DGENUPL2",20,0)
 S DGELG("MEDICAID")=$$CONVERT^DGENUPL1(SEG(12))
"RTN","DGENUPL2",21,0)
 S DGELG("POW")=$$CONVERT^DGENUPL1(SEG(17))
"RTN","DGENUPL2",22,0)
 S DGPAT("EMGRES")=$$CONVERT^DGENUPL1(SEG(40))   ;DG*5.3*677
"RTN","DGENUPL2",23,0)
 Q
"RTN","DGENUPL2",24,0)
 ;
"RTN","DGENUPL2",25,0)
ZIE ;
"RTN","DGENUPL2",26,0)
 S DGPAT("INELDATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",27,0)
 I ERROR D  Q
"RTN","DGENUPL2",28,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZIE SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",29,0)
 S DGPAT("INELREA")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",30,0)
 S DGPAT("INELDEC")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENUPL2",31,0)
 Q
"RTN","DGENUPL2",32,0)
 ;
"RTN","DGENUPL2",33,0)
ZEL(COUNT) ;
"RTN","DGENUPL2",34,0)
 D ZEL^DGENUPLA(COUNT)  ;code for ZEL segment has moved to DGENUPLA
"RTN","DGENUPL2",35,0)
 Q
"RTN","DGENUPL2",36,0)
 ;
"RTN","DGENUPL2",37,0)
ZEN ;
"RTN","DGENUPL2",38,0)
 N SUB
"RTN","DGENUPL2",39,0)
 S DGENR("DATE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",40,0)
 I ERROR D  Q
"RTN","DGENUPL2",41,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",42,0)
 S DGENR("SOURCE")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",43,0)
 S DGENR("STATUS")=$$CONVERT^DGENUPL1(SEG(4))
"RTN","DGENUPL2",44,0)
 S DGENR("REASON")=$$CONVERT^DGENUPL1(SEG(5))
"RTN","DGENUPL2",45,0)
 S DGENR("REMARKS")=$$CONVERT^DGENUPL1(SEG(6))
"RTN","DGENUPL2",46,0)
 S DGENR("FACREC")=$$CONVERT^DGENUPL1(SEG(7),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",47,0)
 I ERROR D  Q
"RTN","DGENUPL2",48,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY RECEIVED "_SEG(7)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",49,0)
 S DGPAT("PREFAC")=$$CONVERT^DGENUPL1(SEG(8),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",50,0)
 I ERROR D  Q
"RTN","DGENUPL2",51,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"PREFERRED FACILITY "_SEG(8)_" NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",52,0)
 ;
"RTN","DGENUPL2",53,0)
 S DGENR("PRIORITY")=$$CONVERT^DGENUPL1(SEG(9))
"RTN","DGENUPL2",54,0)
 S DGENR("EFFDATE")=$$CONVERT^DGENUPL1(SEG(10),"DATE",.ERROR)
"RTN","DGENUPL2",55,0)
 I ERROR D  Q
"RTN","DGENUPL2",56,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 10",.ERRCOUNT)
"RTN","DGENUPL2",57,0)
 S DGENR("APP")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPL2",58,0)
 I ERROR D  Q
"RTN","DGENUPL2",59,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPL2",60,0)
 ;
"RTN","DGENUPL2",61,0)
 ;!!!!!!!!! take this next line out when HEC begins transmitting the applicatizon date
"RTN","DGENUPL2",62,0)
 I DGENR("APP")="" S DGENR("APP")=DGENR("DATE")
"RTN","DGENUPL2",63,0)
 I DGENR("APP")="" S DGENR("APP")=DGENR("EFFDATE")
"RTN","DGENUPL2",64,0)
 ;
"RTN","DGENUPL2",65,0)
 S DGENR("END")=$$CONVERT^DGENUPL1(SEG(12),"DATE",.ERROR)
"RTN","DGENUPL2",66,0)
 I ERROR D  Q
"RTN","DGENUPL2",67,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZEN SEGMENT, SEQ 12",.ERRCOUNT)
"RTN","DGENUPL2",68,0)
 ;Phase II Parse out Sub-Group (SRS 6.4)
"RTN","DGENUPL2",69,0)
 S DGENR("SUBGRP")=$$CONVERT^DGENUPL1(SEG(13))
"RTN","DGENUPL2",70,0)
 ;
"RTN","DGENUPL2",71,0)
 ;want to ignore double quotes sent for enrollment fields
"RTN","DGENUPL2",72,0)
 S SUB=""
"RTN","DGENUPL2",73,0)
 F  S SUB=$O(DGENR(SUB)) Q:SUB=""  I DGENR(SUB)="@" S DGENR(SUB)=""
"RTN","DGENUPL2",74,0)
 ;
"RTN","DGENUPL2",75,0)
 Q
"RTN","DGENUPL2",76,0)
 ;
"RTN","DGENUPL2",77,0)
ZMT ;
"RTN","DGENUPL2",78,0)
 I SEG(1)>1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"ZMT SEGMENT, SEQ 1, SHOULD SPECIFY MEANS TEST",.ERRCOUNT) S ERROR=1 Q
"RTN","DGENUPL2",79,0)
 S DGELG("MTSTA")=$$CONVERT^DGENUPL1(SEG(3),"MT",.ERROR)
"RTN","DGENUPL2",80,0)
 I ERROR D  Q
"RTN","DGENUPL2",81,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZMT SEGMENT, SEQ 3",.ERRCOUNT)
"RTN","DGENUPL2",82,0)
 Q
"RTN","DGENUPL2",83,0)
 ;
"RTN","DGENUPL2",84,0)
ZCD ;
"RTN","DGENUPL2",85,0)
 ;Phase II for multiple ZCD's
"RTN","DGENUPL2",86,0)
 I SEG(1)>1 G SKIP
"RTN","DGENUPL2",87,0)
 S DGCDIS("BY")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",88,0)
 S DGCDIS("DATE")=$$CONVERT^DGENUPL1(SEG(5),"DATE",.ERROR)
"RTN","DGENUPL2",89,0)
 I ERROR D  Q
"RTN","DGENUPL2",90,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 5",.ERRCOUNT)
"RTN","DGENUPL2",91,0)
 S DGCDIS("FACDET")=$$CONVERT^DGENUPL1(SEG(4),"INSTITUTION",.ERROR)
"RTN","DGENUPL2",92,0)
 I ERROR D  Q
"RTN","DGENUPL2",93,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"FACILITY "_SEG(4)_" MAKING CATASTROPHIC DISABILITY DETERMINATION NOT FOUND IN THE INSTITUTION FILE",.ERRCOUNT)
"RTN","DGENUPL2",94,0)
 S DGCDIS("REVDTE")=$$CONVERT^DGENUPL1(SEG(2),"DATE",.ERROR)
"RTN","DGENUPL2",95,0)
 I ERROR D  Q
"RTN","DGENUPL2",96,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZCD SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",97,0)
 S DGCDIS("METDET")=$$CONVERT^DGENUPL1($P(SEG(6),$E(HLECH)))
"RTN","DGENUPL2",98,0)
 S DGCDIS("VCD")=$$CONVERT^DGENUPL1(SEG(12))
"RTN","DGENUPL2",99,0)
SKIP ;
"RTN","DGENUPL2",100,0)
 ;Phase II Parse out additional fields.  CONVERT type of RSN converts the code to IEN for diagnosis,procedure and condition (HL7TORSN^DGENA5).
"RTN","DGENUPL2",101,0)
 S DGCDIS("DIAG",SEG(1))=$$CONVERT^DGENUPL1(SEG(7),"CDRSN")
"RTN","DGENUPL2",102,0)
 S DGCDIS("PROC",SEG(1))=$$CONVERT^DGENUPL1(SEG(8),"CDRSN")
"RTN","DGENUPL2",103,0)
 S DGCDIS("EXT",SEG(1),1)=$$CONVERT^DGENUPL1($P(SEG(9),$E(HLECH)),"EXT")
"RTN","DGENUPL2",104,0)
 S DGCDIS("COND",SEG(1))=$$CONVERT^DGENUPL1(SEG(10),"CDRSN")
"RTN","DGENUPL2",105,0)
 S DGCDIS("SCORE",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(11),$E(HLECH)))
"RTN","DGENUPL2",106,0)
 S DGCDIS("PERM",SEG(1))=$$CONVERT^DGENUPL1($P(SEG(13),$E(HLECH)))
"RTN","DGENUPL2",107,0)
 I DGCDIS("VCD")="Y",'DGCDIS("DIAG",SEG(1)),'DGCDIS("PROC",SEG(1)),'DGCDIS("COND",SEG(1)) D  Q
"RTN","DGENUPL2",108,0)
 .S ERROR=1 D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"NO VALID DIAGNOSIS,PROCEDURE, OR CONDITION IN THE ZCD SEGMENT",.ERRCOUNT)
"RTN","DGENUPL2",109,0)
 Q
"RTN","DGENUPL2",110,0)
 ;
"RTN","DGENUPL2",111,0)
ZSP ;
"RTN","DGENUPL2",112,0)
 S DGELG("SC")=$$CONVERT^DGENUPL1(SEG(2),"Y/N",.ERROR)
"RTN","DGENUPL2",113,0)
 I ERROR D  Q
"RTN","DGENUPL2",114,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 2",.ERRCOUNT)
"RTN","DGENUPL2",115,0)
 S DGELG("SCPER")=$$CONVERT^DGENUPL1(SEG(3))
"RTN","DGENUPL2",116,0)
 S DGELG("EFFDT")=$$CONVERT^DGENUPL1(SEG(11),"DATE",.ERROR)
"RTN","DGENUPL2",117,0)
 I ERROR D  Q
"RTN","DGENUPL2",118,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGELG("EFFDT")),"BAD VALUE, ZSP SEGMENT, SEQ 11",.ERRCOUNT)
"RTN","DGENUPL2",119,0)
 ;if effective date is null, set update value to "@" (delete)
"RTN","DGENUPL2",120,0)
 I DGELG("EFFDT")="" S DGELG("EFFDT")="@"
"RTN","DGENUPL2",121,0)
 ;
"RTN","DGENUPL2",122,0)
 ;added 8/3/98 to reduce #rejects
"RTN","DGENUPL2",123,0)
 ;if HEC sends SC=NO, SC% not sent, and site has value for SC% then delete it
"RTN","DGENUPL2",124,0)
 I DGELG("SC")="N",DGELG("SCPER")="" S DGELG("SCPER")="@"
"RTN","DGENUPL2",125,0)
 ;
"RTN","DGENUPL2",126,0)
 S DGELG("P&T")=$$CONVERT^DGENUPL1(SEG(6),"Y/N",.ERROR)
"RTN","DGENUPL2",127,0)
 I ERROR D  Q
"RTN","DGENUPL2",128,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 6",.ERRCOUNT)
"RTN","DGENUPL2",129,0)
 S DGELG("UNEMPLOY")=$$CONVERT^DGENUPL1(SEG(7),"Y/N",.ERROR)
"RTN","DGENUPL2",130,0)
 I ERROR D  Q
"RTN","DGENUPL2",131,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 7",.ERRCOUNT)
"RTN","DGENUPL2",132,0)
 S DGELG("SCAWDATE")=$$CONVERT^DGENUPL1(SEG(8),"DATE",.ERROR)
"RTN","DGENUPL2",133,0)
 I ERROR D  Q
"RTN","DGENUPL2",134,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZSP SEGMENT, SEQ 8",.ERRCOUNT)
"RTN","DGENUPL2",135,0)
 Q
"RTN","DGENUPL2",136,0)
 ;
"RTN","DGENUPL2",137,0)
ZMH ; Purple Heart
"RTN","DGENUPL2",138,0)
 Q:SEG(2)'="PH"      ;ONLY PROCESS PURPLE HEART FROM ZMH
"RTN","DGENUPL2",139,0)
 S DGPAT("PHI")=$P(SEG(3),$E(HLECH))
"RTN","DGENUPL2",140,0)
 S DGELG("PH")=$$CONVERT^DGENUPL1($P(SEG(3),$E(HLECH)))
"RTN","DGENUPL2",141,0)
 S DGPAT("PHST")=$P(SEG(3),$E(HLECH),2)
"RTN","DGENUPL2",142,0)
 S DGPAT("PHRR")=$P(SEG(3),$E(HLECH),3)
"RTN","DGENUPL2",143,0)
 Q
"RTN","DGENUPL2",144,0)
 ;
"RTN","DGENUPL2",145,0)
ZRD ;
"RTN","DGENUPL2",146,0)
 N COUNT,DXCODE,NAME,COND
"RTN","DGENUPL2",147,0)
 S DXCODE=$P(SEG(2),$E(HLECH))
"RTN","DGENUPL2",148,0)
 I DXCODE="""""" S DXCODE=""
"RTN","DGENUPL2",149,0)
 S NAME=$P(SEG(2),$E(HLECH),2)
"RTN","DGENUPL2",150,0)
 Q:DXCODE=""  ;segment does not contain a disability condition
"RTN","DGENUPL2",151,0)
 ;
"RTN","DGENUPL2",152,0)
 S COUNT=1+(+$G(DGELG("RATEDIS")))
"RTN","DGENUPL2",153,0)
 S (COND,DGELG("RATEDIS",COUNT,"RD"))=$$DCLOOKUP(DXCODE,NAME)
"RTN","DGENUPL2",154,0)
 S DGELG("RATEDIS",COUNT,"PER")=SEG(3),DGELG("RATEDIS")=COUNT
"RTN","DGENUPL2",155,0)
 S DGELG("RATEDIS",COUNT,"RDEXT")=SEG(12)
"RTN","DGENUPL2",156,0)
 S DGELG("RATEDIS",COUNT,"RDORIG")=$$CONVERT^DGENUPL1(SEG(13),"DATE",.ERROR)
"RTN","DGENUPL2",157,0)
 I ERROR D  Q
"RTN","DGENUPL2",158,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, S 13",.ERRCOUNT)
"RTN","DGENUPL2",159,0)
 S DGELG("RATEDIS",COUNT,"RDCURR")=$$CONVERT^DGENUPL1(SEG(14),"DATE",.ERROR)
"RTN","DGENUPL2",160,0)
 I ERROR D  Q
"RTN","DGENUPL2",161,0)
 . D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, S 14",.ERRCOUNT)
"RTN","DGENUPL2",162,0)
 I 'COND D  Q
"RTN","DGENUPL2",163,0)
 .D ADDERROR^DGENUPL(MSGID,$G(DGPAT("SSN")),"BAD VALUE, ZRD SEGMENT, SEQ 2 - DISABILTY CONDITION LOOKUP FAILED",.ERRCOUNT)
"RTN","DGENUPL2",164,0)
 .S ERROR=1
"RTN","DGENUPL2",165,0)
 Q
"RTN","DGENUPL2",166,0)
OBX ;
"RTN","DGENUPL2",167,0)
 D OBX^DGENUPLA  ;code for OBX segment has moved to DGENUPLA
"RTN","DGENUPL2",168,0)
 Q
"RTN","DGENUPL2",169,0)
 ;
"RTN","DGENUPL2",170,0)
 ;******************end of segment parsers*********************
"RTN","DGENUPL2",171,0)
 ;
"RTN","DGENUPL2",172,0)
DCLOOKUP(DGCODE,DGNAME) ;
"RTN","DGENUPL2",173,0)
 ;Description: Returns the ien of an Disability Condition (file #31) based on the DXCODE and NAME
"RTN","DGENUPL2",174,0)
 ;
"RTN","DGENUPL2",175,0)
 ;Input:
"RTN","DGENUPL2",176,0)
 ;  DXCODE - the DX Code of the Disability Condition
"RTN","DGENUPL2",177,0)
 ;  NAME - the name of the Disability Condition
"RTN","DGENUPL2",178,0)
 ;Output:
"RTN","DGENUPL2",179,0)
 ;  Function Value: the ien of the entry found, or 0 otherwise
"RTN","DGENUPL2",180,0)
 ;
"RTN","DGENUPL2",181,0)
 Q:(DXCODE="") 0
"RTN","DGENUPL2",182,0)
 N NODE,IEN,FOUND
"RTN","DGENUPL2",183,0)
 S (FOUND,IEN)=0
"RTN","DGENUPL2",184,0)
 F  S IEN=$O(^DIC(31,"C",DXCODE,IEN)) Q:'IEN  D  Q:FOUND
"RTN","DGENUPL2",185,0)
 .S NODE=$G(^DIC(31,IEN,0))
"RTN","DGENUPL2",186,0)
 .I NAME=$P(NODE,"^"),DXCODE=$P(NODE,"^",3) S FOUND=1
"RTN","DGENUPL2",187,0)
 I 'FOUND S IEN=$O(^DIC(31,"C",DXCODE,0))
"RTN","DGENUPL2",188,0)
 Q +IEN
"RTN","DGENUPL2",189,0)
 ;
"RTN","DGENUPL2",190,0)
REGCHECK(DFN) ;
"RTN","DGENUPL2",191,0)
 ;Description: passes patient through the registration consistency checker
"RTN","DGENUPL2",192,0)
 ;Input -
"RTN","DGENUPL2",193,0)
 ;  DFN is a pointer to the Patient File
"RTN","DGENUPL2",194,0)
 ;
"RTN","DGENUPL2",195,0)
 N DGCD,DGCHK,DGDAY,DGEDCN,DGER,DGLST,DGNCK,DGRPCOLD,DGSC,DGTYPE,DGVT,VA,X
"RTN","DGENUPL2",196,0)
 ;
"RTN","DGENUPL2",197,0)
 S DGEDCN=0
"RTN","DGENUPL2",198,0)
 D ^DGRPC
"RTN","DGENUPL2",199,0)
 Q
"RTN","DPTLK5")
0^1^B3796452
"RTN","DPTLK5",1,0)
DPTLK5 ;BAY/JAT,EG - Patient lookup APIs for patient safety issues ; 11 Aug 2005 8:20 AM
"RTN","DPTLK5",2,0)
 ;;5.3;Registration;**265,276,277,485,675**;Aug 13, 1993
"RTN","DPTLK5",3,0)
 Q
"RTN","DPTLK5",4,0)
BS5(DPTDFN) ;function checks if other patients on "BS5" xref
"RTN","DPTLK5",5,0)
 ; with same last name
"RTN","DPTLK5",6,0)
 ; returns 1 if other patients exist
"RTN","DPTLK5",7,0)
 ; input: ien of Patient file
"RTN","DPTLK5",8,0)
 I '$G(DPTDFN) Q 0
"RTN","DPTLK5",9,0)
 I '$D(^DPT(DPTDFN,0)) Q 0
"RTN","DPTLK5",10,0)
 N DPT0,DPTNME,DPTSSN,DPTBS5,DPTLAST,DPTIEN,DPTFLAG
"RTN","DPTLK5",11,0)
 S DPT0=^DPT(DPTDFN,0)
"RTN","DPTLK5",12,0)
 S DPTNME=$E(DPT0,1),DPTSSN=$E($P(DPT0,U,9),6,9)
"RTN","DPTLK5",13,0)
 S DPTBS5=DPTNME_DPTSSN
"RTN","DPTLK5",14,0)
 S DPTLAST=$P($P(DPT0,U),",")
"RTN","DPTLK5",15,0)
 S (DPTIEN,DPTFLAG)=0
"RTN","DPTLK5",16,0)
 F  S DPTIEN=$O(^DPT("BS5",DPTBS5,DPTIEN)) Q:'DPTIEN!(DPTFLAG=1)  D
"RTN","DPTLK5",17,0)
 .Q:DPTDFN=DPTIEN
"RTN","DPTLK5",18,0)
 .S DPTNME=$P($P($G(^DPT(DPTIEN,0)),U),",")
"RTN","DPTLK5",19,0)
 .I DPTNME=DPTLAST S DPTFLAG=1
"RTN","DPTLK5",20,0)
 Q DPTFLAG
"RTN","DPTLK5",21,0)
 ;
"RTN","DPTLK5",22,0)
DMT(DPTDFN,DPTUSER) ; function checks if the 'Display Means Test Required'
"RTN","DPTLK5",23,0)
 ; message is to be displayed for this Division
"RTN","DPTLK5",24,0)
 ; returns Division ien if message is to be displayed
"RTN","DPTLK5",25,0)
 ; input:  a) ien of Patient file 
"RTN","DPTLK5",26,0)
 ;         b) user's Institution for current session (DUZ(2))
"RTN","DPTLK5",27,0)
 ;             DD(200.02,.01)<==>DD(4,DINUM)<==>DD(40.8,.07)
"RTN","DPTLK5",28,0)
 I '$G(DPTDFN)!('$G(DPTUSER)) Q 0
"RTN","DPTLK5",29,0)
 N Y,DFN,DGREQF,DGMTLST,DPTDIV
"RTN","DPTLK5",30,0)
 ; verifies that Means Test required for this patient
"RTN","DPTLK5",31,0)
 ;
"RTN","DPTLK5",32,0)
 S DFN=DPTDFN
"RTN","DPTLK5",33,0)
 S DGMTLST=$$CMTS^DGMTU(DFN)
"RTN","DPTLK5",34,0)
 ;only display division message if means test is required
"RTN","DPTLK5",35,0)
 I '$$MFLG^DGMTU(DGMTLST) Q 0
"RTN","DPTLK5",36,0)
 S DPTDIV=0
"RTN","DPTLK5",37,0)
 S DPTDIV=$O(^DG(40.8,"AD",DPTUSER,DPTDIV))
"RTN","DPTLK5",38,0)
 I DPTDIV,$P($G(^DG(40.8,DPTDIV,"MT")),U)="Y" Q DPTDIV
"RTN","DPTLK5",39,0)
 Q 0
"RTN","DPTLK5",40,0)
 ;
"RTN","DPTLK5",41,0)
FFP ; This function checks if the 'Display Fugitive Felon Message'
"RTN","DPTLK5",42,0)
 ; message is to be displayed.  Message displays only for DG and SD
"RTN","DPTLK5",43,0)
 ; menu options
"RTN","DPTLK5",44,0)
 ;
"RTN","DPTLK5",45,0)
 Q:'$D(XQY0)
"RTN","DPTLK5",46,0)
 Q:$E(XQY0,1,2)'="SD"&($E(XQY0,1,2)'="DG")
"RTN","DPTLK5",47,0)
 ;
"RTN","DPTLK5",48,0)
 N X,Y,IORVON,IORVOFF,DIR,DIRUT
"RTN","DPTLK5",49,0)
 S X="IORVON;IORVOFF"
"RTN","DPTLK5",50,0)
 D ENDR^%ZISS
"RTN","DPTLK5",51,0)
 W !?17,$CHAR(7) W:$D(IORVON) IORVON W "*** WARNING - FFP FLAG ACTIVE ***" W:$D(IORVOFF) IORVOFF
"RTN","DPTLK5",52,0)
 W !?19,$CHAR(7) W:$D(IORVON) IORVON W "PLEASE NOTIFY YOUR SUPERVISOR" W:$D(IORVOFF) IORVOFF
"RTN","DPTLK5",53,0)
 W !
"RTN","DPTLK5",54,0)
 S DIR(0)="FAO",DIR("A")="Enter <RETURN> to continue."
"RTN","DPTLK5",55,0)
 D ^DIR K DIR
"RTN","DPTLK5",56,0)
 Q
"RTN","DPTLK6")
0^2^B12759471
"RTN","DPTLK6",1,0)
DPTLK6 ;BAY/JAT,EG - Patient lookup RPCs for patient safety issue ; 11 Aug 2005 8:33 AM
"RTN","DPTLK6",2,0)
 ;;5.3;Registration;**265,276,277,675**;Aug 13, 1993
"RTN","DPTLK6",3,0)
GUIBS5(GUIDATA,DFN) ; RPC checks if other patients on "BS5" xref
"RTN","DPTLK6",4,0)
 ; with same last name
"RTN","DPTLK6",5,0)
 ; returns:  1 or 0 (or -1 if bad dfn or no zero node)
"RTN","DPTLK6",6,0)
 ;           if 1, returns text to be displayed
"RTN","DPTLK6",7,0)
 ; return type:  array
"RTN","DPTLK6",8,0)
 ; parameter:  ien of Patient file
"RTN","DPTLK6",9,0)
 K GUIDATA
"RTN","DPTLK6",10,0)
 I '$G(DFN) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",11,0)
 I '$D(^DPT(DFN,0)) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",12,0)
 I '$$BS5^DPTLK5(DFN) S GUIDATA(1)=0 Q
"RTN","DPTLK6",13,0)
 S GUIDATA(1)=1
"RTN","DPTLK6",14,0)
 N DPT0,DPTNME,DPTSSN
"RTN","DPTLK6",15,0)
 S DPT0=$G(^DPT(DFN,0))
"RTN","DPTLK6",16,0)
 S DPTNME=$P($P(DPT0,U),",")
"RTN","DPTLK6",17,0)
 S DPTSSN=$E($P(DPT0,U,9),6,9)
"RTN","DPTLK6",18,0)
 S GUIDATA(2)="There is more than one patient whose last name is "_DPTNME
"RTN","DPTLK6",19,0)
 S GUIDATA(3)="and whose social security number ends with "_DPTSSN
"RTN","DPTLK6",20,0)
 S GUIDATA(4)="Are you sure you wish to continue?"
"RTN","DPTLK6",21,0)
 Q
"RTN","DPTLK6",22,0)
 ;
"RTN","DPTLK6",23,0)
GUIBS5A(GUIDATA,DFN) ; RPC checks if other patients on "BS5" xref
"RTN","DPTLK6",24,0)
 ; with same last name
"RTN","DPTLK6",25,0)
 ; returns 1 or 0 in 1st string (or -1 if bad DFN or no zero node)
"RTN","DPTLK6",26,0)
 ; if 1 returns array nodes where
"RTN","DPTLK6",27,0)
 ; text is preceeded by 0 (0^<text>) 
"RTN","DPTLK6",28,0)
 ; and patient data is preceeded by 1 (1^DFN^patient name^DOB^SSN)
"RTN","DPTLK6",29,0)
 ; return type:  global array
"RTN","DPTLK6",30,0)
 ; parameter:  ien of Patient file
"RTN","DPTLK6",31,0)
 K GUIDATA
"RTN","DPTLK6",32,0)
 I '$G(DFN) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",33,0)
 I '$D(^DPT(DFN,0)) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",34,0)
 I '$$BS5^DPTLK5(DFN) S GUIDATA(1)=0 Q
"RTN","DPTLK6",35,0)
 K ^TMP("DPTLK6",$J)
"RTN","DPTLK6",36,0)
 S ^TMP("DPTLK6",$J,1)=1
"RTN","DPTLK6",37,0)
 N DPT0,DPTNME,DPTSSN,DPTBS5,DPTLAST,DPTIEN,DPTCNT,DPTDOB,DPTSSN1
"RTN","DPTLK6",38,0)
 S DPT0=^DPT(DFN,0)
"RTN","DPTLK6",39,0)
 S DPTNME=$E(DPT0,1),DPTSSN=$E($P(DPT0,U,9),6,9)
"RTN","DPTLK6",40,0)
 S DPTBS5=DPTNME_DPTSSN
"RTN","DPTLK6",41,0)
 S DPTLAST=$P($P(DPT0,U),",")
"RTN","DPTLK6",42,0)
 S ^TMP("DPTLK6",$J,2)="0^There is more than one patient whose last name is "_DPTLAST
"RTN","DPTLK6",43,0)
 S ^TMP("DPTLK6",$J,3)="0^and whose social security number ends with "_DPTSSN
"RTN","DPTLK6",44,0)
 S DPTCNT=3
"RTN","DPTLK6",45,0)
 S DPTIEN=0
"RTN","DPTLK6",46,0)
 F  S DPTIEN=$O(^DPT("BS5",DPTBS5,DPTIEN)) Q:'DPTIEN  D
"RTN","DPTLK6",47,0)
 .S DPT0=$G(^DPT(DPTIEN,0)),DPTNME=$P($P(DPT0,U),",")
"RTN","DPTLK6",48,0)
 .Q:DPTNME'=DPTLAST
"RTN","DPTLK6",49,0)
 .S DPTNME=$P(DPT0,U)
"RTN","DPTLK6",50,0)
 .I $T(DOB^DPTLK1)'="" S DPTDOB=$$DOB^DPTLK1(DPTIEN,2),DPTSSN1=$$SSN^DPTLK1(DPTIEN)
"RTN","DPTLK6",51,0)
 .E  S DPTDOB=$P(DPT0,U,3),DPTSSN1=$P(DPT0,U,9)
"RTN","DPTLK6",52,0)
 .S DPTCNT=DPTCNT+1
"RTN","DPTLK6",53,0)
 .S ^TMP("DPTLK6",$J,DPTCNT)="1"_U_DPTIEN_U_DPTNME_U_DPTDOB_U_DPTSSN1
"RTN","DPTLK6",54,0)
 S DPTCNT=DPTCNT+1
"RTN","DPTLK6",55,0)
 S ^TMP("DPTLK6",$J,DPTCNT)="0^Are you sure you wish to continue?"
"RTN","DPTLK6",56,0)
 M GUIDATA=^TMP("DPTLK6",$J)
"RTN","DPTLK6",57,0)
 K ^TMP("DPTLK6",$J)
"RTN","DPTLK6",58,0)
 Q
"RTN","DPTLK6",59,0)
 ;
"RTN","DPTLK6",60,0)
GUIDMT(GUIDATA,DUZ2) ; RPC checks if the 'Display Means Test Required'
"RTN","DPTLK6",61,0)
 ; message is to be displayed for the Division user is in
"RTN","DPTLK6",62,0)
 ; returns 1 or 0 in 1st string (or -1 if bad DUZ(2))
"RTN","DPTLK6",63,0)
 ; if 1, returns text to be displayed in 2nd and 3rd string (if any)
"RTN","DPTLK6",64,0)
 ; return type:  array
"RTN","DPTLK6",65,0)
 ; parameter:  Institution file pointer for user (optional)
"RTN","DPTLK6",66,0)
 K GUIDATA
"RTN","DPTLK6",67,0)
 I '$G(DUZ2) S DUZ2=DUZ(2)
"RTN","DPTLK6",68,0)
 I '$G(DUZ2) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",69,0)
 N DPTDIV,DPTDIVMT S DPTDIV=0
"RTN","DPTLK6",70,0)
 S DPTDIV=$O(^DG(40.8,"AD",DUZ2,DPTDIV))
"RTN","DPTLK6",71,0)
 I '$G(DPTDIV) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",72,0)
 S GUIDATA(1)=0
"RTN","DPTLK6",73,0)
 S DPTDIVMT=$G(^DG(40.8,DPTDIV,"MT"))
"RTN","DPTLK6",74,0)
 I $P(DPTDIVMT,U,3)="Y" S GUIDATA(1)=1,GUIDATA(2)="MEANS TEST REQUIRED",GUIDATA(3)=$P(DPTDIVMT,U,2)
"RTN","DPTLK6",75,0)
 Q
"RTN","DPTLK6",76,0)
 ;
"RTN","DPTLK6",77,0)
GUIMT(GUIDATA,DFN) ; RPC checks if Means Test is required for this patient
"RTN","DPTLK6",78,0)
 ; returns 1 or 0 (or -1 if bad DFN)
"RTN","DPTLK6",79,0)
 ; return type:  single value
"RTN","DPTLK6",80,0)
 ; parameter:  ien of Patient file
"RTN","DPTLK6",81,0)
 K GUIDATA
"RTN","DPTLK6",82,0)
 I '$G(DFN) S GUIDATA=-1 Q
"RTN","DPTLK6",83,0)
 N Y,DGREQF,DGMTLST
"RTN","DPTLK6",84,0)
 S GUIDATA=0
"RTN","DPTLK6",85,0)
 S DGMTLST=$$CMTS^DGMTU(DFN)
"RTN","DPTLK6",86,0)
 I $P(DGMTLST,U,4)'="R" Q
"RTN","DPTLK6",87,0)
 S GUIDATA=1
"RTN","DPTLK6",88,0)
 Q
"RTN","DPTLK6",89,0)
 ;
"RTN","DPTLK6",90,0)
GUIMTD(GUIDATA,DFN,DUZ2) ; RPC checks if Means Test is required for this
"RTN","DPTLK6",91,0)
 ; patient and if 'Means Test Required' message is to be
"RTN","DPTLK6",92,0)
 ; displayed for the Division user is in
"RTN","DPTLK6",93,0)
 ; returns 1 or 0 in 1st string (or -1 if bad parameters)
"RTN","DPTLK6",94,0)
 ; if 1, returns text to be displayed in 2nd and 3rd string (if any)
"RTN","DPTLK6",95,0)
 ; return type:  array
"RTN","DPTLK6",96,0)
 ; parameters:  ien of Patient file, Institution file pointer for user
"RTN","DPTLK6",97,0)
 ;                                   (optional)
"RTN","DPTLK6",98,0)
 K GUIDATA
"RTN","DPTLK6",99,0)
 I '$G(DUZ2) S DUZ2=DUZ(2)
"RTN","DPTLK6",100,0)
 I '$G(DFN)!('$G(DUZ2)) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",101,0)
 N DPTDIV,DPTDIVMT S DPTDIV=0
"RTN","DPTLK6",102,0)
 S DPTDIV=$O(^DG(40.8,"AD",DUZ2,DPTDIV))
"RTN","DPTLK6",103,0)
 I '$G(DPTDIV) S GUIDATA(1)=-1 Q
"RTN","DPTLK6",104,0)
 N Y,DGREQF,DGMTLST
"RTN","DPTLK6",105,0)
 S GUIDATA(1)=0
"RTN","DPTLK6",106,0)
 S DGMTLST=$$CMTS^DGMTU(DFN)
"RTN","DPTLK6",107,0)
 ;only display division message if means test is required
"RTN","DPTLK6",108,0)
 I '$$MFLG^DGMTU(DGMTLST) Q
"RTN","DPTLK6",109,0)
 S DPTDIVMT=$G(^DG(40.8,DPTDIV,"MT"))
"RTN","DPTLK6",110,0)
 I $P(DPTDIVMT,U,3)="Y" S GUIDATA(1)=1,GUIDATA(2)="MEANS TEST REQUIRED",GUIDATA(3)=$P(DPTDIVMT,U,2)
"RTN","DPTLK6",111,0)
 Q
"RTN","DPTLK6",112,0)
 ;
"VER")
8.0^22.0
"BLD",5735,6)
^597
**END**
**END**
